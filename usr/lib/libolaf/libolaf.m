size_t gnssOsa_readNv(uint64_t a1, void *a2, size_t a3)
{
  uint64_t v6;
  unsigned __int16 v7;
  size_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  unsigned __int16 v18;
  void *__p;
  _BYTE *v21;
  char __str[1040];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v6 = mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 68, "gnssOsa_readNv");
    LbsOsaTrace_WriteLog(0xEu, __str, v7, 5, 1);
  }
  if (a2 && gp_NvStorage)
  {
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)gp_NvStorage + 64))(&__p, gp_NvStorage, a1);
    if (v21 - (_BYTE *)__p >= a3)
      v8 = a3;
    else
      v8 = v21 - (_BYTE *)__p;
    memcpy(a2, __p, v8);
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NvID,%d,BytesRead,%zu,BytesReq,%zu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "OSA", 68, "gnssOsa_readNv", a1, v21 - (_BYTE *)__p, a3);
      LbsOsaTrace_WriteLog(0xEu, __str, v10, 5, 1);
    }
    if (__p == v21 && LbsOsaTrace_IsLoggingAllowed(0xEu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v11 = mach_continuous_time();
      v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx No NV data,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "OSA", 87, "gnssOsa_readNv", 769, a1);
      LbsOsaTrace_WriteLog(0xEu, __str, v12, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v13 = mach_continuous_time();
      v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "OSA", 68, "gnssOsa_readNv");
      LbsOsaTrace_WriteLog(0xEu, __str, v14, 5, 1);
    }
    if (__p)
    {
      v21 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v15 = mach_continuous_time();
      v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "OSA", 69, "gnssOsa_readNv", 770);
      LbsOsaTrace_WriteLog(0xEu, __str, v16, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v17 = mach_continuous_time();
      v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "OSA", 68, "gnssOsa_readNv");
      LbsOsaTrace_WriteLog(0xEu, __str, v18, 5, 1);
    }
    return 0;
  }
  return v8;
}

void sub_21E538A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t gnssOsa_storeBufferToNv(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 v12;
  char __str[8];
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v6 = mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 68, "gnssOsa_storeBufferToNv");
    LbsOsaTrace_WriteLog(0xEu, __str, v7, 5, 1);
  }
  if (a2 && gp_NvStorage)
  {
    *(_QWORD *)__str = 0;
    v15 = 0;
    v16 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(__str, a2, (uint64_t)a2 + a3, a3);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(_QWORD *)gp_NvStorage + 32))(gp_NvStorage, a1, __str);
    if (*(_QWORD *)__str)
    {
      v15 = *(void **)__str;
      operator delete(*(void **)__str);
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: invalid Argument\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "OSA", 69, "gnssOsa_storeBufferToNv");
      LbsOsaTrace_WriteLog(0xEu, __str, v10, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v11 = mach_continuous_time();
      v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "OSA", 68, "gnssOsa_storeBufferToNv");
      LbsOsaTrace_WriteLog(0xEu, __str, v12, 5, 1);
    }
    return 0;
  }
  return v8;
}

void sub_21E538D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t gnssOsa_getNvSize(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned __int16 v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t result;
  uint64_t v11;
  unsigned __int16 v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  unsigned __int16 v16;
  void *__p;
  _BYTE *v18;
  char __str[1040];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v4 = mach_continuous_time();
    v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "OSA", 68, "gnssOsa_getNvSize");
    LbsOsaTrace_WriteLog(0xEu, __str, v5, 5, 1);
  }
  if (a2)
  {
    if (gp_NvStorage)
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)gp_NvStorage + 64))(&__p, gp_NvStorage, a1);
      *a2 = v18 - (_BYTE *)__p;
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v6 = mach_continuous_time();
        v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NvSize,%zu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "OSA", 68, "gnssOsa_getNvSize", *a2);
        LbsOsaTrace_WriteLog(0xEu, __str, v7, 5, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v8 = mach_continuous_time();
        v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "OSA", 68, "gnssOsa_getNvSize");
        LbsOsaTrace_WriteLog(0xEu, __str, v9, 5, 1);
      }
      if (__p)
      {
        v18 = __p;
        operator delete(__p);
      }
      return 1;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v13 = mach_continuous_time();
      v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NvStorage\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "OSA", 69, "gnssOsa_getNvSize", 770);
      LbsOsaTrace_WriteLog(0xEu, __str, v14, 0, 1);
    }
    result = LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0);
    if ((_DWORD)result)
    {
LABEL_19:
      bzero(__str, 0x410uLL);
      v15 = mach_continuous_time();
      v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "OSA", 68, "gnssOsa_getNvSize");
      LbsOsaTrace_WriteLog(0xEu, __str, v16, 5, 1);
      return 0;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v11 = mach_continuous_time();
      v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NvSize\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "OSA", 69, "gnssOsa_getNvSize", 513);
      LbsOsaTrace_WriteLog(0xEu, __str, v12, 0, 1);
    }
    result = LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0);
    if ((_DWORD)result)
      goto LABEL_19;
  }
  return result;
}

void sub_21E5391A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t gnssOsa_clearNV(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  char __str[1040];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0xEu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NvID,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 73, "gnssOsa_clearNV", a1);
    LbsOsaTrace_WriteLog(0xEu, __str, v3, 4, 1);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)gp_NvStorage + 80))(gp_NvStorage, a1);
}

size_t gnssOsa_flushNv(void)
{
  uint64_t v0;
  unsigned __int16 v1;
  size_t result;
  uint64_t v3;
  unsigned __int16 v4;
  char __str[1040];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v0 = mach_continuous_time();
    v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "OSA", 68, "gnssOsa_flushNv");
    LbsOsaTrace_WriteLog(0xEu, __str, v1, 5, 1);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)gp_NvStorage + 56))(gp_NvStorage);
  result = LbsOsaTrace_IsLoggingAllowed(0xEu, 5, 0, 0);
  if ((_DWORD)result)
  {
    bzero(__str, 0x410uLL);
    v3 = mach_continuous_time();
    v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "OSA", 68, "gnssOsa_flushNv");
    return LbsOsaTrace_WriteLog(0xEu, __str, v4, 5, 1);
  }
  return result;
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_21E5394B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::vector<unsigned char>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24E2B0820, MEMORY[0x24BEDAAF0]);
}

void sub_21E5395B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

unint64_t NK_Set_Environ_Severity(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v7;
  _BYTE *v8;
  _OWORD *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unsigned __int8 v28;
  unsigned int v29;
  unsigned int v30;
  unsigned __int8 v31;
  char v32;
  int v33;
  int v34;
  int v35;
  char v36;
  int v37;

  if (*(_BYTE *)(a2 + 43))
  {
    *(_DWORD *)(a2 + 60) = 1;
  }
  else
  {
    v7 = (_BYTE *)result;
    v8 = (_BYTE *)(a4 + 25068);
    v9 = (_OWORD *)(a3 + 6752);
    result = (unint64_t)memmove((void *)(a3 + 6800), (const void *)(a3 + 6752), 0x150uLL);
    v10 = *(_QWORD *)(a3 + 7152);
    *(_OWORD *)(a3 + 7140) = *(_OWORD *)(a3 + 7136);
    v11 = *(_DWORD *)(a3 + 7160);
    *(_QWORD *)(a3 + 7156) = v10;
    *(_DWORD *)(a3 + 7164) = v11;
    v12 = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a3 + 7136) = v12;
    *(_OWORD *)(a3 + 6784) = 0u;
    *(_OWORD *)(a3 + 6768) = 0u;
    *(_OWORD *)(a3 + 6752) = 0u;
    v13 = 7;
    v14 = 8750;
    do
    {
      v15 = *(_DWORD *)(a3 + 4 * v13 + 7136);
      v14 -= 1000;
      v16 = v13-- != 0;
    }
    while (v16 && !v15);
    v17 = v15 + v14;
    if (v12 <= v17 && v12 + 750 >= v17 - 750)
    {
      v18 = v13 + 1;
    }
    else
    {
      v18 = 0;
      v9[24] = 0u;
      v9[25] = 0u;
      v9[22] = 0u;
      v9[23] = 0u;
      v9[20] = 0u;
      v9[21] = 0u;
      v9[18] = 0u;
      v9[19] = 0u;
      v9[16] = 0u;
      v9[17] = 0u;
      v9[14] = 0u;
      v9[15] = 0u;
      v9[12] = 0u;
      v9[13] = 0u;
      v9[10] = 0u;
      v9[11] = 0u;
      v9[8] = 0u;
      v9[9] = 0u;
      v9[6] = 0u;
      v9[7] = 0u;
      v9[4] = 0u;
      v9[5] = 0u;
      v9[2] = 0u;
      v9[3] = 0u;
      *v9 = 0u;
      v9[1] = 0u;
      *(_DWORD *)(a3 + 7136) = *(_DWORD *)(a4 + 4);
    }
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = a3 + 48 * v18 + 6752;
    do
    {
      if (*(int *)&v7[4 * v19 + 412] >= 10 && *(unsigned __int16 *)&v7[2 * v19 + 844] >= 0x65u)
      {
        *((_BYTE *)v9 + v19) = v7[v19 + 604];
        v25 = v7[v19 + 604];
        v21 += v25;
        ++v20;
        if (v18 < 1)
        {
          v33 = v7[v19 + 604];
        }
        else
        {
          v26 = (unsigned __int8 *)v24;
          v27 = v18 + 1;
          v28 = v7[v19 + 604];
          do
          {
            v30 = *v26;
            v26 -= 48;
            v29 = v30;
            v31 = v28;
            if (v30 > v28)
              v31 = v29;
            v32 = v25;
            if (v29 < v25)
              v32 = v29;
            if (v29)
            {
              v21 += v29;
              ++v20;
              v28 = v31;
              LOBYTE(v25) = v32;
            }
            --v27;
          }
          while (v27 > 1);
          v33 = v28;
          v25 = v25;
        }
        v34 = v33 - v25;
        result = (v34 - 2);
        if ((*(_WORD *)&v7[2 * v19 + 316] & 0x300) == 0)
          v34 -= 2;
        if (v34 > v22)
          v22 = v34;
        if (v34 > v23)
        {
          v22 = v23;
          v23 = v34;
        }
      }
      ++v19;
      ++v24;
    }
    while (v19 != 48);
    if (v20 < 8)
    {
      v35 = 0;
    }
    else if (v22 + v23 > 8 || v21 / v20 <= *(unsigned __int8 *)(a3 + 3))
    {
      v35 = 7;
    }
    else
    {
      v35 = 1;
    }
    v36 = *(_BYTE *)(p_NA + 319);
    if (v36)
    {
      v37 = *(_DWORD *)(p_NA + 19388);
      switch(v37)
      {
        case 0:
          goto LABEL_43;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          break;
        default:
          v37 = 0;
          break;
      }
      *(_DWORD *)(a2 + 60) = v37;
      if (!v8[8])
      {
        *v8 = v36;
        v8[8] = v36;
      }
    }
    else
    {
LABEL_43:
      if (v20 >= 8)
        *(_DWORD *)(a2 + 60) = v35;
    }
  }
  return result;
}

void PERAppendData(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, unint64_t);
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 1088);
  v5 = *(void (**)(uint64_t, unint64_t))(a1 + 728);
  if (v5)
  {
    v5(a1, a2);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 880))(a1, a1 + 1104);
    *(_QWORD *)(a1 + 1088) = v6;
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 1088);
  }
  if (v6 - v4 < a2)
    EPErrorHandler(a1, 22);
}

uint64_t PERPutBit(uint64_t result, char a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  int v8;
  char v9;
  char v10;

  v3 = result;
  v4 = *(_BYTE **)(result + 1096);
  if (v4 == *(_BYTE **)(result + 1080))
  {
    v5 = *(_QWORD *)(result + 1072);
    v6 = *(_QWORD *)(result + 1088) - v5;
    v7 = &v4[-v5];
    result = (*(uint64_t (**)(uint64_t, uint64_t))(result + 856))(result, 1);
    *(_QWORD *)(v3 + 1072) = result;
    v4 = &v7[result];
    *(_QWORD *)(v3 + 1080) = &v7[result + 1];
    *(_QWORD *)(v3 + 1088) = result + v6;
    *(_QWORD *)(v3 + 1096) = &v7[result];
  }
  v8 = *(unsigned __int8 *)(v3 + 1105);
  if (v8 == 7)
  {
    *v4 = a2 << 7;
    v9 = *(_BYTE *)(v3 + 1105);
  }
  else
  {
    *v4 |= a2 << v8;
    v9 = *(_BYTE *)(v3 + 1105);
    if (!v9)
    {
      ++*(_QWORD *)(v3 + 1096);
      v10 = 7;
      goto LABEL_7;
    }
  }
  v10 = v9 - 1;
LABEL_7:
  *(_BYTE *)(v3 + 1105) = v10;
  return result;
}

uint64_t PERGetBit(uint64_t a1)
{
  unsigned __int8 *v2;
  unsigned int v3;
  char v4;
  char v5;

  v2 = *(unsigned __int8 **)(a1 + 1096);
  if (v2 == *(unsigned __int8 **)(a1 + 1088))
  {
    PERAppendData(a1, 1uLL);
    v2 = *(unsigned __int8 **)(a1 + 1096);
  }
  v3 = *v2;
  v4 = *(_BYTE *)(a1 + 1105);
  if (v4)
  {
    v5 = v4 - 1;
  }
  else
  {
    *(_QWORD *)(a1 + 1096) = v2 + 1;
    v5 = 7;
  }
  *(_BYTE *)(a1 + 1105) = v5;
  return (v3 >> v4) & 1;
}

size_t PERPutBits(size_t result, unint64_t a2, unsigned int a3)
{
  size_t v4;
  unsigned __int8 v5;
  int v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned int v16;
  _BYTE *v17;
  _BYTE *v18;

  if (a3)
  {
    v4 = result;
    v5 = a3 - *(_BYTE *)(result + 1105) + 7;
    v6 = v5 & 7;
    if (a3 >= 0x21)
      result = CUCFErrorHandler(result, 15);
    v7 = v5 >> 3;
    v8 = *(_BYTE **)(v4 + 1096);
    if ((v5 & 7) != 0)
      v9 = (unint64_t)&v8[v7 + 1];
    else
      v9 = (unint64_t)&v8[v7];
    v10 = *(_QWORD *)(v4 + 1080);
    if (v9 > v10)
    {
      v11 = &v8[(v6 != 0) + v7 - v10];
      v12 = *(_QWORD *)(v4 + 1072);
      v13 = *(_QWORD *)(v4 + 1088) - v12;
      v14 = &v8[-v12];
      v15 = v10 - v12;
      result = (*(uint64_t (**)(size_t, _BYTE *))(v4 + 856))(v4, v11);
      *(_QWORD *)(v4 + 1072) = result;
      *(_QWORD *)(v4 + 1080) = &v11[v15 + result];
      *(_QWORD *)(v4 + 1088) = result + v13;
      v8 = &v14[result];
      *(_QWORD *)(v4 + 1096) = &v14[result];
    }
    if (*(_BYTE *)(v4 + 1105) == 7)
      *v8 = 0;
    if (v5 >= 8u)
    {
      v18 = (_BYTE *)(*(_QWORD *)(v4 + 1096) + v7);
      *(_QWORD *)(v4 + 1096) = v18;
      if ((v5 & 7) != 0)
      {
        *v18 = a2 << (8 - v6);
        a2 >>= v6;
        v18 = *(_BYTE **)(v4 + 1096);
      }
      v17 = v18 - 1;
      if (v5 >= 0x10u)
      {
        do
        {
          *v17-- = a2;
          LODWORD(v7) = v7 - 1;
          a2 >>= 8;
        }
        while (v7 > 1u);
      }
      v16 = (0xFFu >> (7 - *(_BYTE *)(v4 + 1105))) & a2;
    }
    else
    {
      v16 = (0xFFu >> (7 - *(_BYTE *)(v4 + 1105))) & ((_DWORD)a2 << (8 - v6));
      v17 = *(_BYTE **)(v4 + 1096);
    }
    *v17 |= v16;
    *(_BYTE *)(v4 + 1105) = v6 ^ 7;
  }
  return result;
}

unint64_t PERGetBits(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t result;
  unsigned __int8 *v10;
  unint64_t v11;
  uint64_t v12;
  char v13;

  if (!a2)
    return 0;
  v2 = a2;
  if (a2 >= 0x21)
    CUCFErrorHandler(a1, 15);
  v4 = *(unsigned __int8 *)(a1 + 1105);
  v5 = v4 - *(unsigned __int8 *)(a1 + 1104) + 8 * (*(_QWORD *)(a1 + 1088) - *(_QWORD *)(a1 + 1096));
  v6 = v2 >= v5;
  v7 = v2 - v5;
  if (v7 != 0 && v6)
  {
    if ((v7 & 7) != 0)
      v8 = (v7 >> 3) + 1;
    else
      v8 = v7 >> 3;
    PERAppendData(a1, v8);
    LODWORD(v4) = *(unsigned __int8 *)(a1 + 1105);
  }
  if ((_DWORD)v4 == 7)
  {
    result = 0;
LABEL_15:
    if (v2 >= 8u)
    {
      v12 = *(_QWORD *)(a1 + 1096) + 1;
      do
      {
        result = *(unsigned __int8 *)(v12 - 1) | (result << 8);
        LOBYTE(v2) = v2 - 8;
        *(_QWORD *)(a1 + 1096) = v12++;
      }
      while (v2 > 7u);
    }
    if ((_BYTE)v2)
    {
      *(_BYTE *)(a1 + 1105) = v2 ^ 7;
      return (result << v2) | (**(unsigned __int8 **)(a1 + 1096) >> (8 - v2));
    }
    v13 = 7;
    goto LABEL_24;
  }
  v10 = *(unsigned __int8 **)(a1 + 1096);
  v11 = (*v10 << (7 - v4));
  if ((int)v4 + 1 < v2)
  {
    result = v11 >> (7 - v4);
    LOBYTE(v2) = ~(_BYTE)v4 + v2;
    *(_QWORD *)(a1 + 1096) = v10 + 1;
    goto LABEL_15;
  }
  result = v11 >> (8 - v2);
  if ((_DWORD)v4 + 1 == v2)
  {
    *(_BYTE *)(a1 + 1105) = 7;
    *(_QWORD *)(a1 + 1096) = v10 + 1;
    return result;
  }
  v13 = v4 - v2;
LABEL_24:
  *(_BYTE *)(a1 + 1105) = v13;
  return result;
}

uint64_t PERPutByte(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  int v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(unsigned __int8 *)(result + 1105);
  v5 = *(_BYTE **)(result + 1096);
  if (v4 == 7)
  {
    if (v5 == *(_BYTE **)(result + 1080))
    {
      v6 = *(_QWORD *)(result + 1072);
      v7 = *(_QWORD *)(result + 1088) - v6;
      v8 = &v5[-v6];
      result = (*(uint64_t (**)(uint64_t, uint64_t))(result + 856))(result, 1);
      *(_QWORD *)(v3 + 1072) = result;
      v5 = &v8[result];
      *(_QWORD *)(v3 + 1080) = &v8[result + 1];
      *(_QWORD *)(v3 + 1088) = result + v7;
      *(_QWORD *)(v3 + 1096) = &v8[result];
    }
    *v5 = a2;
    ++*(_QWORD *)(v3 + 1096);
  }
  else
  {
    if (v5 + 1 == *(_BYTE **)(result + 1080))
    {
      v9 = *(_QWORD *)(result + 1072);
      v10 = *(_QWORD *)(result + 1088) - v9;
      v11 = &v5[-v9];
      v12 = &v5[-v9 + 1];
      result = (*(uint64_t (**)(uint64_t, uint64_t))(result + 856))(result, 1);
      *(_QWORD *)(v3 + 1072) = result;
      *(_QWORD *)(v3 + 1080) = &v12[result + 1];
      *(_QWORD *)(v3 + 1088) = result + v10;
      v5 = &v11[result];
      *(_QWORD *)(v3 + 1096) = &v11[result];
      LOBYTE(v4) = *(_BYTE *)(v3 + 1105);
    }
    *v5 |= a2 >> (7 - v4);
    v13 = *(_QWORD *)(v3 + 1096);
    *(_QWORD *)(v3 + 1096) = v13 + 1;
    *(_BYTE *)(v13 + 1) = a2 << (*(_BYTE *)(v3 + 1105) + 1);
  }
  return result;
}

uint64_t PERGetByte(uint64_t a1)
{
  int v2;
  _BYTE *v3;
  int v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;

  v2 = *(unsigned __int8 *)(a1 + 1105);
  if (v2 == 7)
  {
    v3 = *(_BYTE **)(a1 + 1096);
    if (v3 == *(_BYTE **)(a1 + 1088))
    {
      PERAppendData(a1, 1uLL);
      v3 = *(_BYTE **)(a1 + 1096);
    }
    LOBYTE(v4) = *v3;
    *(_QWORD *)(a1 + 1096) = v3 + 1;
  }
  else
  {
    v5 = *(unsigned __int8 **)(a1 + 1096);
    v6 = *(_QWORD *)(a1 + 1088) - (_QWORD)v5;
    if (v6 <= 1)
    {
      PERAppendData(a1, 2 - v6);
      v5 = *(unsigned __int8 **)(a1 + 1096);
      LOBYTE(v2) = *(_BYTE *)(a1 + 1105);
    }
    v7 = *v5 << (7 - v2);
    *(_QWORD *)(a1 + 1096) = v5 + 1;
    return ((v5[1] >> (v2 + 1)) | v7);
  }
  return v4;
}

uint64_t PERSkipBytes(uint64_t a1, uint64_t a2)
{
  int v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v4 = *(unsigned __int8 *)(a1 + 1105);
  v5 = *(_BYTE **)(a1 + 1096);
  v6 = &v5[a2];
  v7 = *(_QWORD *)(a1 + 1080);
  if (v4 == 7)
  {
    if ((unint64_t)v6 > v7)
    {
      v8 = &v5[a2 - v7];
      v9 = *(_QWORD *)(a1 + 1072);
      v10 = *(_QWORD *)(a1 + 1088) - v9;
      v11 = &v5[-v9];
      v12 = v7 - v9;
      v13 = (*(uint64_t (**)(uint64_t, _BYTE *))(a1 + 856))(a1, v8);
      *(_QWORD *)(a1 + 1072) = v13;
      *(_QWORD *)(a1 + 1080) = &v8[v12 + v13];
      *(_QWORD *)(a1 + 1088) = v13 + v10;
      v5 = &v11[v13];
      *(_QWORD *)(a1 + 1096) = v5;
    }
  }
  else
  {
    if ((unint64_t)v6 >= v7)
    {
      v14 = (uint64_t)&v5[a2 - v7 + 1];
      v15 = *(_QWORD *)(a1 + 1072);
      v16 = *(_QWORD *)(a1 + 1088) - v15;
      v17 = &v5[-v15];
      v18 = v7 - v15;
      v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 856))(a1, v14);
      *(_QWORD *)(a1 + 1072) = v19;
      *(_QWORD *)(a1 + 1080) = v19 + v18 + v14;
      *(_QWORD *)(a1 + 1088) = v19 + v16;
      v5 = &v17[v19];
      *(_QWORD *)(a1 + 1096) = v5;
      LOBYTE(v4) = *(_BYTE *)(a1 + 1105);
    }
    *v5 &= 510 << v4;
    v5 = (_BYTE *)(*(_QWORD *)(a1 + 1096) + 1);
  }
  result = memset_s(v5, a2, 0, a2);
  *(_QWORD *)(a1 + 1096) += a2;
  return result;
}

void PERGetSkipBytes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 1096);
    v5 = v4 + a2;
    if (*(_BYTE *)(a1 + 1105) == 7)
    {
      v6 = *(_QWORD *)(a1 + 1088);
      if (v5 > v6)
      {
        v7 = v4 + a2 - v6;
LABEL_7:
        PERAppendData(a1, v7);
        v4 = *(_QWORD *)(a1 + 1096);
      }
    }
    else
    {
      v8 = v5 + 1;
      v9 = *(_QWORD *)(a1 + 1088);
      if (v8 > v9)
      {
        v7 = a2 + v4 - v9 + 1;
        goto LABEL_7;
      }
    }
    *(_QWORD *)(a1 + 1096) = v4 + a2;
  }
}

uint64_t PERPutSeg(uint64_t result, unsigned __int8 *a2, size_t a3)
{
  size_t v3;
  _QWORD *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  if (a3)
  {
    v3 = a3;
    v5 = (_QWORD *)result;
    v6 = *(char **)(result + 1096);
    v7 = &v6[v3];
    if (*(_BYTE *)(result + 1105) == 7)
    {
      v8 = *(_QWORD *)(result + 1080);
      if ((unint64_t)v7 > v8)
      {
        v9 = &v6[v3 - v8];
        v10 = *(_QWORD *)(result + 1072);
        v11 = *(_QWORD *)(result + 1088) - v10;
        v12 = &v6[-v10];
        v13 = v8 - v10;
        v14 = (*(uint64_t (**)(uint64_t, char *))(result + 856))(result, v9);
        v5[134] = v14;
        v5[135] = &v9[v13 + v14];
        v5[136] = v14 + v11;
        v6 = &v12[v14];
        v5[137] = &v12[v14];
      }
      result = (uint64_t)memcpy_s("posp_memcpy", 29, v6, v3, a2, v3);
      v5[137] += v3;
    }
    else
    {
      v15 = *(_QWORD *)(result + 1080);
      if ((unint64_t)(v7 + 1) > v15)
      {
        v16 = (uint64_t)&v6[v3 - v15 + 1];
        v17 = *(_QWORD *)(result + 1072);
        v18 = *(_QWORD *)(result + 1088) - v17;
        v19 = &v6[-v17];
        v20 = v15 - v17;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(result + 856))(result, v16);
        v5[134] = result;
        v5[135] = result + v20 + v16;
        v5[136] = result + v18;
        v5[137] = &v19[result];
      }
      do
      {
        *(_BYTE *)v5[137] |= *a2 >> (7 - *((_BYTE *)v5 + 1105));
        v21 = v5[137];
        v5[137] = v21 + 1;
        v22 = *a2++;
        *(_BYTE *)(v21 + 1) = v22 << (*((_BYTE *)v5 + 1105) + 1);
        --v3;
      }
      while (v3);
    }
  }
  return result;
}

void *PEROctetsFragmentation(uint64_t a1, unint64_t a2)
{
  size_t v2;
  uint64_t v4;
  _BYTE *v5;
  void *result;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  size_t v16;
  size_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unsigned int v22;
  char *v23;

  v2 = a2;
  if (a2 >= 0x4000)
  {
    v7 = (a2 - 0x10000) >> 16;
    v8 = v7 + 1;
    if (a2 >> 16)
      v9 = v7 + 1;
    else
      v9 = 0;
    v10 = (unsigned __int16)a2 >> 14;
    if ((unsigned __int16)a2 < 0x4000uLL)
      v11 = v9;
    else
      v11 = v9 + 1;
    v12 = (unsigned __int16)a2 < 0x4000uLL;
    if ((unsigned __int16)a2 >= 0x4000uLL)
      v13 = 0x4000;
    else
      v13 = 0;
    if ((unsigned __int16)a2 >= 0x8000uLL)
    {
      v11 = v9 + 1;
      v12 = 0;
      v13 = 0x8000;
    }
    if (v10 > 2)
      v14 = v9 + 1;
    else
      v14 = v11;
    v15 = v10 <= 2 && v12;
    if (v10 <= 2)
      v16 = v13;
    else
      v16 = 49152;
    v17 = (unsigned __int16)a2 - (unint64_t)v16;
    if (v17 < 0x80)
    {
      PERSkipBytes(a1, (unsigned __int16)v14);
      v19 = (char *)(*(_QWORD *)(a1 + 1096) - v17);
      v18 = &v19[-(unsigned __int16)v14];
      result = memmove(v19, v18, v17);
    }
    else
    {
      PERSkipBytes(a1, (unsigned __int16)v14 + 1);
      v18 = (char *)(*(_QWORD *)(a1 + 1096) + ~(v17 + (unsigned __int16)v14));
      result = memmove(&v18[(unsigned __int16)v14 + 1], v18, v17);
      v18[(unsigned __int16)v14] = v2;
      LODWORD(v2) = (v17 >> 8) | 0xFFFFFF80;
    }
    v18[(unsigned __int16)v14 - 1] = v2;
    if (!v15)
    {
      --v14;
      v18 -= v16;
      if ((_WORD)v14)
      {
        v20 = (unsigned __int16)v14;
        result = memmove(&v18[(unsigned __int16)v14], v18, v16);
      }
      else
      {
        v20 = 0;
      }
      v18[v20 - 1] = (v16 >> 14) | 0xC0;
    }
    if ((_WORD)v9)
    {
      if ((unsigned __int16)v9 == 1)
      {
        v21 = v18;
      }
      else
      {
        v22 = v14 - 1;
        do
        {
          v21 = v18 - 0x10000;
          v23 = &v18[(unsigned __int16)v22];
          result = memmove(v23 - 0x10000, v21, 0x10000uLL);
          *(v23 - 65537) = -60;
          --v8;
          --v22;
          v18 = v21;
        }
        while ((unsigned __int16)v8 > 1u);
      }
      *(v21 - 65537) = -60;
    }
  }
  else
  {
    PERSkipBytes(a1, 1);
    v4 = *(_QWORD *)(a1 + 1096);
    v5 = (_BYTE *)(v4 + ~v2);
    result = memmove((void *)(v4 - v2), v5, v2);
    *v5 = v2;
    *(v5 - 1) = BYTE1(v2) | 0x80;
  }
  return result;
}

uint64_t PEROctetsDefragmentation(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int i;
  const void *v7;
  uint64_t v8;
  char v9;
  size_t v10;
  const void *v11;
  uint64_t v12;
  BOOL v13;
  int64_t v14;
  unint64_t v15;
  const void *v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  void *v20;
  size_t v21;
  size_t v22;
  uint64_t v23;
  int64_t v24;

  v2 = *(_QWORD *)(a1 + 1096);
  switch(PERGetByte(a1))
  {
    case 0xC1u:
      v3 = (char *)(*(_QWORD *)(a1 + 1096) + 0x4000);
      *(_QWORD *)(a1 + 1096) = v3;
      v4 = 0x4000;
      break;
    case 0xC2u:
      v3 = (char *)(*(_QWORD *)(a1 + 1096) + 0x8000);
      *(_QWORD *)(a1 + 1096) = v3;
      v4 = 0x8000;
      break;
    case 0xC3u:
      v3 = (char *)(*(_QWORD *)(a1 + 1096) + 49152);
      *(_QWORD *)(a1 + 1096) = v3;
      v4 = 49152;
      break;
    case 0xC4u:
      v3 = (char *)(*(_QWORD *)(a1 + 1096) + 0x10000);
      *(_QWORD *)(a1 + 1096) = v3;
      v4 = 0x10000;
      break;
    default:
      EPErrorHandler(a1, 26);
      v4 = 0;
      v3 = *(char **)(a1 + 1096);
      break;
  }
  v5 = *(_QWORD *)(a1 + 1088);
  if ((unint64_t)v3 >= v5)
  {
    PERAppendData(a1, (unint64_t)&v3[-v5]);
    v3 = *(char **)(a1 + 1096);
  }
  for (i = PERGetByte(a1); i == 196; v4 += 0x10000)
  {
    v7 = *(const void **)(a1 + 1096);
    v8 = *(_QWORD *)(a1 + 1088) - (_QWORD)v7;
    if (v8 < 0x10000)
    {
      PERAppendData(a1, 0x10000 - v8);
      v7 = *(const void **)(a1 + 1096);
    }
    memmove(v3, v7, 0x10000uLL);
    v3 += 0x10000;
    *(_QWORD *)(a1 + 1096) += 0x10000;
    i = PERGetByte(a1);
  }
  v9 = i;
  if (i >= 0xC1)
  {
    v10 = (unint64_t)(i & 3) << 14;
    v4 += v10;
    v11 = *(const void **)(a1 + 1096);
    v12 = *(_QWORD *)(a1 + 1088) - (_QWORD)v11;
    v13 = __OFSUB__(v10, v12);
    v14 = v10 - v12;
    if (!((v14 < 0) ^ v13 | (v14 == 0)))
    {
      PERAppendData(a1, v14);
      v11 = *(const void **)(a1 + 1096);
    }
    memmove(v3, v11, v10);
    v3 += v10;
    *(_QWORD *)(a1 + 1096) += v10;
    v9 = PERGetByte(a1);
  }
  if ((v9 & 0xC0) == 0x80)
  {
    v15 = PERGetByte(a1) & 0xFFFF80FF | ((v9 & 0x7F) << 8);
    v4 += v15;
    v16 = *(const void **)(a1 + 1096);
    v17 = *(_QWORD *)(a1 + 1088) - (_QWORD)v16;
    v18 = v15 >= v17;
    v19 = v15 - v17;
    if (v19 != 0 && v18)
    {
      PERAppendData(a1, v19);
      v16 = *(const void **)(a1 + 1096);
    }
    v20 = v3;
    v21 = v15;
  }
  else
  {
    if (v9 < 0)
    {
      EPErrorHandler(a1, 26);
      goto LABEL_27;
    }
    v22 = v9 & 0x7F;
    v4 += v22;
    v16 = *(const void **)(a1 + 1096);
    v23 = *(_QWORD *)(a1 + 1088) - (_QWORD)v16;
    v13 = __OFSUB__(v22, v23);
    v24 = v22 - v23;
    if (!((v24 < 0) ^ v13 | (v24 == 0)))
    {
      PERAppendData(a1, v24);
      v16 = *(const void **)(a1 + 1096);
    }
    v20 = v3;
    v21 = v22;
  }
  memmove(v20, v16, v21);
LABEL_27:
  *(_QWORD *)(a1 + 1096) = v2 + 1;
  return v4;
}

void *PEROctetsFragmentationWithOffset(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  char *v6;
  void *result;
  _BYTE *v8;
  char v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  unsigned int v26;
  char v27;
  char v28;
  _BYTE *v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;

  v2 = a2;
  if (a2 < 0x4000)
  {
    PERSkipBytes(a1, 1);
    v4 = *(_QWORD *)(a1 + 1096);
    v5 = (_BYTE *)(v4 + ~v2);
    v6 = (char *)(v4 - v2);
    result = memmove((void *)(v4 - v2), v5, v2 + 1);
    v8 = (_BYTE *)(a1 + 1105);
    v9 = *(v5 - 1) & (510 << *(_BYTE *)(a1 + 1105));
    *(v5 - 1) = v9;
    *(v5 - 1) = v9 | ((v2 | 0x8000) >> (15 - *(_BYTE *)(a1 + 1105)));
    *v5 = (v2 | 0x8000) >> (7 - *(_BYTE *)(a1 + 1105));
    v10 = 0xFFu >> (7 - *(_BYTE *)(a1 + 1105));
    v11 = *v6;
    goto LABEL_48;
  }
  v12 = (a2 - 0x10000) >> 16;
  v13 = v12 + 1;
  if (a2 >> 16)
    v14 = v12 + 1;
  else
    v14 = 0;
  v15 = (unsigned __int16)a2 >> 14;
  if ((unsigned __int16)a2 < 0x4000uLL)
    v16 = v14;
  else
    v16 = v14 + 1;
  v17 = (unsigned __int16)a2 < 0x4000uLL;
  if ((unsigned __int16)a2 >= 0x4000uLL)
    v18 = 0x4000;
  else
    v18 = 0;
  if ((unsigned __int16)a2 >= 0x8000uLL)
  {
    v16 = v14 + 1;
    v17 = 0;
    v18 = 0x8000;
  }
  if (v15 > 2)
    v19 = v14 + 1;
  else
    v19 = v16;
  v20 = v15 <= 2 && v17;
  if (v15 <= 2)
    v21 = v18;
  else
    v21 = 49152;
  v22 = (unsigned __int16)a2 - (unint64_t)v21;
  if (v22 < 0x80)
  {
    PERSkipBytes(a1, (unsigned __int16)v19);
    v23 = (char *)(*(_QWORD *)(a1 + 1096) - v22 - (unsigned __int16)v19);
    v24 = (char *)(*(_QWORD *)(a1 + 1096) - v22);
  }
  else
  {
    PERSkipBytes(a1, (unsigned __int16)v19 + 1);
    v23 = (char *)(*(_QWORD *)(a1 + 1096) + ~(v22 + (unsigned __int16)v19));
    v24 = &v23[(unsigned __int16)v19 + 1];
  }
  result = memmove(v24, v23, v22 + 1);
  if (!v20)
  {
    --v19;
    v23 -= v21;
    if ((_WORD)v19)
    {
      result = memmove(&v23[(unsigned __int16)v19], v23, v21 | 1);
    }
    else
    {
      v19 = 0;
      --v23;
    }
  }
  if ((_WORD)v14)
  {
    if ((unsigned __int16)v14 != 1)
    {
      v25 = v23 - 0x10000;
      v26 = v19 - 1;
      do
      {
        result = memmove(&v25[(unsigned __int16)v26], v25, 0x10001uLL);
        --v13;
        v25 -= 0x10000;
        --v26;
      }
      while ((unsigned __int16)v13 > 1u);
      v23 = v25 + 0x10000;
    }
    v23 -= 65537;
  }
  if (v2 >= 0x10000)
  {
    do
    {
      v27 = *v23 & (510 << *(_BYTE *)(a1 + 1105));
      *v23 = v27;
      *v23 = v27 | (0xC4u >> (7 - *(_BYTE *)(a1 + 1105)));
      v28 = v23[1] & (0xFFu >> (7 - *(_BYTE *)(a1 + 1105)));
      v23[1] = v28;
      v23[1] = v28 | (392 << *(_BYTE *)(a1 + 1105));
      v2 -= 0x10000;
      v23 += 65537;
    }
    while (v2 >> 16);
  }
  if (v2 < 0xC000)
  {
    if (v2 < 0x8000)
    {
      if (v2 < 0x4000)
        goto LABEL_45;
      v29 = (_BYTE *)(a1 + 1105);
      v36 = *v23 & (510 << *(_BYTE *)(a1 + 1105));
      *v23 = v36;
      *v23 = v36 | (0xC1u >> (7 - *(_BYTE *)(a1 + 1105)));
      v31 = v23[1] & (0xFFu >> (7 - *(_BYTE *)(a1 + 1105)));
      v23[1] &= 0xFFu >> (7 - *(_BYTE *)(a1 + 1105));
      v32 = -16384;
      v33 = -126;
      v34 = 16385;
    }
    else
    {
      v29 = (_BYTE *)(a1 + 1105);
      v35 = *v23 & (510 << *(_BYTE *)(a1 + 1105));
      *v23 = v35;
      *v23 = v35 | (0xC2u >> (7 - *(_BYTE *)(a1 + 1105)));
      v31 = v23[1] & (0xFFu >> (7 - *(_BYTE *)(a1 + 1105)));
      v23[1] &= 0xFFu >> (7 - *(_BYTE *)(a1 + 1105));
      v32 = -32768;
      v33 = -124;
      v34 = 32769;
    }
  }
  else
  {
    v29 = (_BYTE *)(a1 + 1105);
    v30 = *v23 & (510 << *(_BYTE *)(a1 + 1105));
    *v23 = v30;
    *v23 = v30 | (0xC3u >> (7 - *(_BYTE *)(a1 + 1105)));
    v31 = v23[1] & (0xFFu >> (7 - *(_BYTE *)(a1 + 1105)));
    v23[1] &= 0xFFu >> (7 - *(_BYTE *)(a1 + 1105));
    v32 = -49152;
    v33 = -122;
    v34 = 49153;
  }
  v23[1] = v31 | (v33 << *v29);
  v2 += v32;
  v23 += v34;
LABEL_45:
  v8 = (_BYTE *)(a1 + 1105);
  if (v2 < 0x80)
  {
    v39 = *v23 & (510 << *(_BYTE *)(a1 + 1105));
    *v23 = v39;
    *v23 = v39 | (v2 >> (7 - *(_BYTE *)(a1 + 1105)));
    v10 = 0xFFu >> (7 - *(_BYTE *)(a1 + 1105));
    v40 = v23[1];
    v6 = v23 + 1;
    v11 = v40;
  }
  else
  {
    v37 = *v23 & (510 << *(_BYTE *)(a1 + 1105));
    *v23 = v37;
    *v23 = v37 | ((v2 | 0x8000) >> (15 - *(_BYTE *)(a1 + 1105)));
    v23[1] = (v2 | 0x8000) >> (7 - *(_BYTE *)(a1 + 1105));
    v10 = 0xFFu >> (7 - *(_BYTE *)(a1 + 1105));
    v38 = v23[2];
    v6 = v23 + 2;
    v11 = v38;
  }
LABEL_48:
  v41 = v11 & v10;
  *v6 = v41;
  *v6 = v41 | (v2 << (*v8 + 1));
  return result;
}

uint64_t PEROctetsDefragmentationWithOffset(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int i;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  size_t v16;
  int64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 1096);
  switch(PERGetByte(a1))
  {
    case 0xC1u:
      v3 = (_BYTE *)(*(_QWORD *)(a1 + 1096) + 0x4000);
      *(_QWORD *)(a1 + 1096) = v3;
      v4 = 0x4000;
      break;
    case 0xC2u:
      v3 = (_BYTE *)(*(_QWORD *)(a1 + 1096) + 0x8000);
      *(_QWORD *)(a1 + 1096) = v3;
      v4 = 0x8000;
      break;
    case 0xC3u:
      v3 = (_BYTE *)(*(_QWORD *)(a1 + 1096) + 49152);
      *(_QWORD *)(a1 + 1096) = v3;
      v4 = 49152;
      break;
    case 0xC4u:
      v3 = (_BYTE *)(*(_QWORD *)(a1 + 1096) + 0x10000);
      *(_QWORD *)(a1 + 1096) = v3;
      v4 = 0x10000;
      break;
    default:
      EPErrorHandler(a1, 26);
      v4 = 0;
      v3 = *(_BYTE **)(a1 + 1096);
      break;
  }
  v5 = *(_QWORD *)(a1 + 1088);
  if ((unint64_t)v3 >= v5)
  {
    PERAppendData(a1, (unint64_t)&v3[-v5]);
    v3 = *(_BYTE **)(a1 + 1096);
  }
  for (i = PERGetByte(a1); i == 196; v4 += 0x10000)
  {
    v7 = *(_QWORD *)(a1 + 1088) - *(_QWORD *)(a1 + 1096);
    if (v7 < 65537)
      PERAppendData(a1, 65537 - v7);
    *v3 &= 510 << *(_BYTE *)(a1 + 1105);
    **(_BYTE **)(a1 + 1096) &= 0xFFu >> (7 - *(_BYTE *)(a1 + 1105));
    *v3 |= **(_BYTE **)(a1 + 1096);
    memmove(v3 + 1, (const void *)(*(_QWORD *)(a1 + 1096) + 1), 0x10000uLL);
    v3 += 0x10000;
    *(_QWORD *)(a1 + 1096) += 0x10000;
    i = PERGetByte(a1);
  }
  v8 = i;
  if (i >= 0xC1)
  {
    v9 = (unint64_t)(i & 3) << 14;
    v4 += v9;
    v10 = *(_QWORD *)(a1 + 1088) - *(_QWORD *)(a1 + 1096);
    v11 = (unsigned __int16)((_WORD)i << 14) | 1u;
    if (v11 > v10)
      PERAppendData(a1, v11 - v10);
    *v3 &= 510 << *(_BYTE *)(a1 + 1105);
    **(_BYTE **)(a1 + 1096) &= 0xFFu >> (7 - *(_BYTE *)(a1 + 1105));
    *v3 |= **(_BYTE **)(a1 + 1096);
    memmove(v3 + 1, (const void *)(*(_QWORD *)(a1 + 1096) + 1), (unint64_t)(v8 & 3) << 14);
    v3 += v9;
    *(_QWORD *)(a1 + 1096) += v9;
    v8 = PERGetByte(a1);
  }
  if ((v8 & 0xC0) == 0x80)
  {
    v12 = PERGetByte(a1) & 0xFFFF80FF | ((v8 & 0x7F) << 8);
    v4 += v12;
    v13 = *(_QWORD *)(a1 + 1088) - *(_QWORD *)(a1 + 1096);
    if (v12 > v13)
      PERAppendData(a1, v12 - v13);
    *v3 &= 510 << *(_BYTE *)(a1 + 1105);
    **(_BYTE **)(a1 + 1096) &= 0xFFu >> (7 - *(_BYTE *)(a1 + 1105));
    *v3 |= **(_BYTE **)(a1 + 1096);
    v14 = (const void *)(*(_QWORD *)(a1 + 1096) + 1);
    v15 = v3 + 1;
    v16 = v12;
  }
  else
  {
    if (v8 < 0)
    {
      EPErrorHandler(a1, 26);
      goto LABEL_26;
    }
    v17 = v8 & 0x7F;
    v4 += v17;
    v18 = *(_QWORD *)(a1 + 1088) - *(_QWORD *)(a1 + 1096);
    if (v17 > v18)
      PERAppendData(a1, v17 - v18);
    *v3 &= 510 << *(_BYTE *)(a1 + 1105);
    **(_BYTE **)(a1 + 1096) &= 0xFFu >> (7 - *(_BYTE *)(a1 + 1105));
    *v3 |= **(_BYTE **)(a1 + 1096);
    v14 = (const void *)(*(_QWORD *)(a1 + 1096) + 1);
    v15 = v3 + 1;
    v16 = v17;
  }
  memmove(v15, v14, v16);
LABEL_26:
  *(_QWORD *)(a1 + 1096) = v2 + 1;
  return v4;
}

uint64_t PERConstructedEncode(size_t a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= 0x4000)
  {
    if (v4 >= 0x10000)
    {
      do
      {
        if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
        {
          v5 = *(unsigned __int8 *)(a1 + 1105);
          if (v5 != 7)
          {
            *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v5;
            *(_BYTE *)(a1 + 1105) = 7;
          }
        }
        PERPutByte(a1, 0xC4u);
        (*(void (**)(size_t, uint64_t, uint64_t))(a2 + 16))(a1, 0x10000, a2);
        v4 = *(_QWORD *)(a2 + 8);
      }
      while (v4 >> 16);
    }
    if (v4 >= 0xC000)
    {
      if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
      {
        v6 = *(unsigned __int8 *)(a1 + 1105);
        if (v6 != 7)
        {
          *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v6;
          *(_BYTE *)(a1 + 1105) = 7;
        }
      }
      PERPutByte(a1, 0xC3u);
      (*(void (**)(size_t, uint64_t, uint64_t))(a2 + 16))(a1, 49152, a2);
      v4 = *(_QWORD *)(a2 + 8);
    }
    if (v4 >= 0x8000)
    {
      if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
      {
        v7 = *(unsigned __int8 *)(a1 + 1105);
        if (v7 != 7)
        {
          *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v7;
          *(_BYTE *)(a1 + 1105) = 7;
        }
      }
      PERPutByte(a1, 0xC2u);
      (*(void (**)(size_t, uint64_t, uint64_t))(a2 + 16))(a1, 0x8000, a2);
      v4 = *(_QWORD *)(a2 + 8);
    }
    if (v4 >= 0x4000)
    {
      if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
      {
        v8 = *(unsigned __int8 *)(a1 + 1105);
        if (v8 != 7)
        {
          *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v8;
          *(_BYTE *)(a1 + 1105) = 7;
        }
      }
      PERPutByte(a1, 0xC1u);
      (*(void (**)(size_t, uint64_t, uint64_t))(a2 + 16))(a1, 0x4000, a2);
    }
  }
  if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
  {
    v9 = *(unsigned __int8 *)(a1 + 1105);
    if (v9 != 7)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v9;
      *(_BYTE *)(a1 + 1105) = 7;
    }
  }
  v10 = *(_QWORD *)(a2 + 8);
  if (v10 > 0x7F)
    PERPutBits(a1, v10 | 0x8000, 0x10u);
  else
    PERPutByte(a1, *(_QWORD *)(a2 + 8));
  return (*(uint64_t (**)(size_t, _QWORD, uint64_t))(a2 + 16))(a1, *(_QWORD *)(a2 + 8), a2);
}

uint64_t PERConstructedDecode(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  char v6;
  uint64_t result;

  v4 = 0;
  while (1)
  {
    if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
    {
      v5 = *(unsigned __int8 *)(a1 + 1105);
      if (v5 != 7)
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v5;
        *(_BYTE *)(a1 + 1105) = 7;
      }
    }
    v6 = PERGetByte(a1);
    if ((v6 + 63) >= 4u)
      break;
    v4 = ((unint64_t)(v6 + 63) << 14) + 0x4000;
LABEL_11:
    result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(a2 + 16))(a1, v4, a2);
    if (!(v4 >> 14))
      return result;
  }
  if ((v6 & 0xC0) == 0x80)
  {
    v4 = PERGetByte(a1) & 0xFFFF80FF | ((v6 & 0x7F) << 8);
    goto LABEL_11;
  }
  if (v6 < 0)
  {
    EPErrorHandler(a1, 26);
    goto LABEL_11;
  }
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a2 + 16))(a1, v6 & 0x7F, a2);
}

uint64_t Hal17_SoftReset(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  unsigned __int16 v6;
  uint64_t result;
  int v8;
  char v9;
  int v10;
  int IsLoggingAllowed;
  uint64_t v12;
  unsigned __int16 v13;
  uint64_t v14;
  unsigned __int16 v15;
  unint64_t v16;
  int v17;
  unsigned __int16 v18;
  unint64_t v19;
  unsigned __int16 v20;
  int v21;
  uint64_t v22;
  unsigned __int16 v23;
  unint64_t v24;
  unsigned __int16 v25;
  unint64_t v26;
  unint64_t v27;
  __int16 v28;
  char v29;
  char __str[1040];
  _DWORD v31[37];
  unsigned __int8 v32[5];
  __int16 v33;
  char v34;
  char v35;
  char v36;
  __int16 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v31[0] = 0;
  v28 = 29250;
  v29 = a1;
  v33 = 3;
  v34 = 0;
  plc00_10EncodeHdrPlCs(&v28, (uint64_t)v32, 12, 1u, 1, (uint64_t)v31);
  v4 = v31[0];
  if (v31[0])
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v5 = mach_continuous_time();
      v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HdrErr,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "HAL", 69, "Hal17_SoftReset", 775, v4);
      LbsOsaTrace_WriteLog(0xDu, __str, v6, 0, 1);
    }
    return 0xFFFFFFFFLL;
  }
  v35 = a2;
  v36 = a2;
  v37 = 2560;
  if ((_DWORD)a1 == 77)
  {
    v8 = 2;
  }
  else
  {
    if ((_DWORD)a1 != 80)
      goto LABEL_11;
    v8 = 3;
  }
  g_HalState = v8;
LABEL_11:
  if ((int)Hal22_ZxSendToChip(v32, 0xCuLL) > 0)
  {
    v9 = gnssOsa_SemWaitTimeOut(g_HandleAckSem, 0x1388u);
    if (v9 == 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        v17 = 1543;
LABEL_26:
        v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx cpu,%c\n", v16, "HAL", 69, "Hal17_SoftReset", v17, a1);
        LbsOsaTrace_WriteLog(0xDu, __str, v18, 0, 1);
      }
    }
    else
    {
      if (!v9)
      {
        v10 = g_HalState;
        if (g_HalState != 3)
        {
          result = 0xFFFFFFFFLL;
          goto LABEL_36;
        }
        if (g_ResetResp == a2)
        {
          if (g_ResetResp == 32)
          {
            IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0);
            result = 0;
            if (IsLoggingAllowed)
            {
              bzero(__str, 0x410uLL);
              v12 = mach_continuous_time();
              v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "HAL", 73, "Hal17_SoftReset", 1289);
              LbsOsaTrace_WriteLog(0xDu, __str, v13, 4, 1);
              result = 0;
            }
            goto LABEL_35;
          }
          if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            v26 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx status,%c\n", v26);
            goto LABEL_33;
          }
        }
        else if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RstType,%x,Resp,%x\n", v19);
LABEL_33:
          LbsOsaTrace_WriteLog(0xDu, __str, v20, 0, 1);
        }
        result = 4294967288;
LABEL_35:
        v10 = g_HalState;
LABEL_36:
        if (v10 != 2)
          return result;
        if (g_ResetResp == a2)
        {
          if (g_ResetResp == 32)
          {
            v21 = LbsOsaTrace_IsLoggingAllowed(0xDu, 4, 0, 0);
            result = 0;
            if (v21)
            {
              bzero(__str, 0x410uLL);
              v22 = mach_continuous_time();
              v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "HAL", 73, "Hal17_SoftReset", 1289);
              LbsOsaTrace_WriteLog(0xDu, __str, v23, 4, 1);
              return 0;
            }
            return result;
          }
          if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            v27 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx status,%c\n", v27);
            goto LABEL_45;
          }
        }
        else if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v24 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Rst,%x,resp,%x\n", v24);
LABEL_45:
          LbsOsaTrace_WriteLog(0xDu, __str, v25, 0, 1);
        }
        return 4294967288;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        v17 = 1541;
        goto LABEL_26;
      }
    }
    return 4294967287;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v14 = mach_continuous_time();
    v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "HAL", 69, "Hal17_SoftReset", 1282);
    LbsOsaTrace_WriteLog(0xDu, __str, v15, 0, 1);
  }
  return 4294967289;
}

size_t Hal17_HandleReset(unsigned __int8 *a1, uint64_t a2)
{
  size_t result;
  const char *v4;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int16 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char __str[1040];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!(_DWORD)result)
      return result;
    bzero(__str, 0x410uLL);
    v11 = 513;
    v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v4 = "%10u %s%c %s: #%04hx data\n";
    goto LABEL_16;
  }
  if (a2 <= 0xC)
  {
    result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!(_DWORD)result)
      return result;
    bzero(__str, 0x410uLL);
    v11 = 515;
    v12 = a2;
    v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v4 = "%10u %s%c %s: #%04hx len,%u\n";
    goto LABEL_16;
  }
  if (a1[2] != 66 || a1[3] != 82 || (v6 = a1[4], v6 != 80) && v6 != 77)
  {
    result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if (!(_DWORD)result)
      return result;
    bzero(__str, 0x410uLL);
    v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v13 = a1[3];
    v14 = a1[4];
    v11 = 1290;
    v12 = a1[2];
    v4 = "%10u %s%c %s: #%04hx rcvd MC,%c,MID,%c,MIDEx,%c\n";
    v10 = v8;
    goto LABEL_16;
  }
  g_ResetResp = a1[9];
  g_ResetResp = a1[8];
  result = gnssOsa_SemRelease((dispatch_semaphore_t)g_HandleAckSem);
  if ((result & 1) == 0)
  {
    result = LbsOsaTrace_IsLoggingAllowed(0xDu, 0, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      v11 = 1542;
      v12 = *__error();
      v10 = v7;
      v4 = "%10u %s%c %s: #%04hx HandleAckSem err,%d\n";
LABEL_16:
      v9 = snprintf(__str, 0x40FuLL, v4, v10, "HAL", 69, "Hal17_HandleReset", v11, v12, v13, v14);
      return LbsOsaTrace_WriteLog(0xDu, __str, v9, 0, 1);
    }
  }
  return result;
}

uint64_t GM_Conv_Lock_Units(uint64_t result, uint64_t a2, uint64_t a3)
{
  __int16 *v3;
  _WORD *v4;
  __int16 v5;
  __int16 v6;
  unsigned int v7;
  BOOL v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  __int16 v12;

  if ((_DWORD)result)
  {
    v3 = (__int16 *)(a3 + 34);
    v4 = (_WORD *)(a2 + 14);
    result = result;
    do
    {
      if ((unsigned __int16)*(v4 - 2) >= 0xFDF2u)
        v5 = 6500;
      else
        v5 = *(v4 - 2) / 0xAu;
      *(v4 - 2) = v5;
      if ((unsigned __int16)*(v4 - 1) >= 0xFDF2u)
        v6 = 6500;
      else
        v6 = *(v4 - 1) / 0xAu;
      *(v4 - 1) = v6;
      v7 = (unsigned __int16)*v4;
      v8 = v7 > 0xFDEC;
      v9 = (429496730 * (unint64_t)(v7 + 5)) >> 32;
      if (v8)
        LOWORD(v9) = 6500;
      *v4 = v9;
      v4 += 18;
      v10 = *v3;
      v11 = ((26215 * v10) >> 18) + ((26215 * v10) >> 31);
      if (v10 > 32009)
        LOWORD(v11) = 3200;
      if (v10 >= -32009)
        v12 = v11;
      else
        v12 = -3200;
      *v3 = v12;
      v3 += 28;
      --result;
    }
    while (result);
  }
  return result;
}

uint64_t asn1PE_PosTechnology(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;

  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    v7 = *(unsigned __int8 *)(a1 + 16);
  }
  else
  {
    Asn1Coder::AddBitToBuffer((uint64_t **)a1, *a2);
    v4 = *(unsigned __int8 *)(a1 + 16);
    if (*(_BYTE *)(a1 + 16))
    {
      v5 = *(_DWORD *)(a1 + 8);
      v6 = *(_DWORD *)(a1 + 12);
      v7 = *(unsigned __int8 *)(a1 + 16);
    }
    else
    {
      Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[1]);
      v4 = *(unsigned __int8 *)(a1 + 16);
      if (*(_BYTE *)(a1 + 16))
      {
        v5 = *(_DWORD *)(a1 + 8);
        v6 = *(_DWORD *)(a1 + 12);
        v7 = *(unsigned __int8 *)(a1 + 16);
      }
      else
      {
        Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[2]);
        v4 = *(unsigned __int8 *)(a1 + 16);
        if (*(_BYTE *)(a1 + 16))
        {
          v5 = *(_DWORD *)(a1 + 8);
          v6 = *(_DWORD *)(a1 + 12);
          v7 = *(unsigned __int8 *)(a1 + 16);
        }
        else
        {
          Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[3]);
          v4 = *(unsigned __int8 *)(a1 + 16);
          if (*(_BYTE *)(a1 + 16))
          {
            v5 = *(_DWORD *)(a1 + 8);
            v6 = *(_DWORD *)(a1 + 12);
            v7 = *(unsigned __int8 *)(a1 + 16);
          }
          else
          {
            Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[4]);
            v4 = *(unsigned __int8 *)(a1 + 16);
            if (*(_BYTE *)(a1 + 16))
            {
              v5 = *(_DWORD *)(a1 + 8);
              v6 = *(_DWORD *)(a1 + 12);
              v7 = *(unsigned __int8 *)(a1 + 16);
            }
            else
            {
              Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[5]);
              v4 = *(unsigned __int8 *)(a1 + 16);
              if (!*(_BYTE *)(a1 + 16))
              {
                Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[6]);
                return *(unsigned __int8 *)(a1 + 16);
              }
              v5 = *(_DWORD *)(a1 + 8);
              v6 = *(_DWORD *)(a1 + 12);
              v7 = *(unsigned __int8 *)(a1 + 16);
            }
          }
        }
      }
    }
  }
  SuplAsn1Logger::TraceError(v7, v5, v6);
  return v4;
}

uint64_t asn1PE_PrefMethod(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v3;
  uint64_t v4;

  v3 = *a2;
  if (v3 >= 3)
  {
    v4 = 4;
    *(_BYTE *)(a1 + 16) = 4;
    SuplAsn1Logger::TraceError(4u, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  }
  else
  {
    v4 = Asn1Coder::EncodeInteger(a1, 0, 2, v3);
    if (!(_DWORD)v4)
      return v4;
  }
  SuplAsn1Logger::TraceError(v4, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  return v4;
}

uint64_t asn1PE_PosProtocol(uint64_t a1, unsigned __int8 *a2, uint8x8_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint8x8_t v9;

  a3.i32[0] = *(_DWORD *)(a2 + 3);
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, vmovn_s16((int16x8_t)vmovl_u8(a3)).u32[0] != 0);
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_9:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *a2);
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_9;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[1]);
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_9;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[2]);
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_9;
  }
  v9.i32[0] = *(_DWORD *)(a2 + 3);
  if (!vmovn_s16((int16x8_t)vmovl_u8(v9)).u32[0])
    return 0;
  v8 = asn1PE_PosProtocol_VER2(a1, a2);
  v5 = v8;
  if ((_DWORD)v8)
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_9;
  }
  return v5;
}

uint64_t asn1PE_SETCapabilities(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint8x8_t v8;

  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
LABEL_7:
    SuplAsn1Logger::TraceError(v7, v5, v6);
    return v4;
  }
  v7 = asn1PE_PosTechnology(a1, a2);
  if ((_DWORD)v7)
  {
    v4 = v7;
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_7;
  }
  v7 = asn1PE_PrefMethod(a1, a2 + 7);
  if ((_DWORD)v7)
  {
    v4 = v7;
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_7;
  }
  return asn1PE_PosProtocol(a1, a2 + 8, v8);
}

uint64_t ds_NK_Summary_FirstLine(uint64_t result)
{
  uint64_t v1;
  char *v2;
  char v3;

  v1 = 0;
  v2 = *(char **)result;
  v3 = 78;
  do
  {
    *(_QWORD *)result = v2 + 1;
    *v2 = v3;
    v2 = *(char **)result;
    if (*(_QWORD *)result >= *(_QWORD *)(result + 24))
    {
      v2 = *(char **)(result + 16);
      *(_QWORD *)result = v2;
    }
    v3 = str_0[++v1];
  }
  while (v1 != 16);
  *(_QWORD *)result = v2 + 1;
  *v2 = 10;
  if (*(_QWORD *)result >= *(_QWORD *)(result + 24))
    *(_QWORD *)result = *(_QWORD *)(result + 16);
  return GNSS_Nav_Debug_Flush_Check(result);
}

uint64_t ds_NK_Summary(_QWORD *a1)
{
  char **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char *v8;
  char v9;
  uint64_t v10;
  char v11;
  unsigned __int8 *v12;
  int v13;
  char *v14;
  char *v15;
  char v16;
  unsigned __int8 *v17;
  int v18;
  char *v19;
  unsigned int i;
  char *v21;
  char *v22;
  char *v23;
  char v24;
  int v25;
  char *v26;
  char **v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  _DWORD *v31;
  unsigned int *v32;
  uint64_t v33;
  char *v34;
  char v35;
  uint64_t v36;
  double v37;
  __int16 v38;
  double *v39;
  BOOL v40;
  double v41;
  double j;
  unsigned __int16 v43;
  char *v44;
  unsigned int v45;
  char *v46;
  char *v47;
  char *v48;
  char v49;
  int v50;
  char *v51;
  double v52;
  double v53;
  double v54;
  int v55;
  uint64_t v56;
  char *v57;
  char v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  char *v70;
  unint64_t v71;
  double v72;
  double k;
  char *v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char v79;
  double v80;
  double v81;
  unsigned int v82;
  double v83;
  double v84;
  double v85;
  int v86;
  unsigned int v87;
  char *v88;
  char *v89;
  unsigned int v90;
  unsigned int v91;
  char *v92;
  char *v93;
  double v94;
  double v95;
  double v96;
  int v97;
  uint64_t v98;
  char v99;
  char v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  unsigned int v104;
  char *v105;
  int v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  char *v110;
  char v111;
  char *v112;
  char **v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char v120;
  uint64_t v121;
  double v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  char *v128;
  unsigned int v129;
  uint64_t v130;
  char *v131;
  char v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  char v137;
  int v138;
  gnss::GnssAdaptDevice *v139;
  int v140;
  char **v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char v145;
  uint64_t v146;
  char v147;
  char *v148;
  char *v149;
  char v150;
  char *v151;
  char v152;
  char *v153;
  char v154;
  char *v155;
  char v156;
  char *v157;
  char v158;
  char *v159;
  char v160;
  char *v161;
  const char *Str_FIX_TYPE;
  char v163;
  char *v164;
  unsigned __int8 *v165;
  int v166;
  uint64_t v167;
  char *v168;
  char v169;
  int v170;
  unsigned int v171;
  int v172;
  int m;
  int v174;
  char *v175;
  uint64_t v176;
  char *v177;
  char v178;
  int v179;
  int n;
  int v181;
  char *v182;
  char *v183;
  int v184;
  int ii;
  int v186;
  char *v187;
  uint64_t v188;
  char *v189;
  char v190;
  uint64_t v191;
  char *v192;
  double v193;
  double v194;
  double v195;
  unsigned int v196;
  char *v197;
  char v198;
  uint64_t v199;
  char *v200;
  char *v201;
  char v202;
  char *v203;
  char *v204;
  const char *v205;
  char v206;
  unsigned __int8 *v207;
  int v208;
  char *v209;
  const char *v210;
  char v211;
  unsigned __int8 *v212;
  int v213;
  char *v214;
  char v215;
  char *v216;
  uint64_t v217;
  char v218;
  unint64_t v219;
  uint64_t v220;
  char *v221;
  char v222;
  char *v223;
  char v224;
  uint64_t v225;
  char *v226;
  char *v227;
  char *v228;
  char *v229;
  char v230;
  uint64_t v231;
  char *v232;
  char *v233;
  char *v234;
  char v235;
  uint64_t v236;
  char *v237;
  char *v238;
  char *v239;
  char v240;
  uint64_t v241;
  int v242;
  unsigned int v243;
  char *v244;
  gnss::GnssAdaptDevice *v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char v250;
  uint64_t v251;
  char *v252;
  _BYTE *v253;
  double v254;
  double v255;
  double v256;
  unsigned int v257;
  char *v258;
  char v259;
  uint64_t v260;
  uint64_t v261;
  char v262;
  _BYTE *v263;
  char *v264;
  char v265;
  char *v266;
  char *v267;
  uint64_t v268;
  char v269;
  const char *v270;
  char v271;
  char *v272;
  unsigned __int8 *v273;
  int v274;
  char *v275;
  uint64_t v276;
  char v277;
  uint64_t v278;
  int32x4_t v279;
  int32x4_t v280;
  int32x4_t v281;
  int32x4_t v282;
  uint8x16_t v283;
  uint16x8_t v284;
  uint16x8_t v285;
  _BYTE *v286;
  char *v287;
  char *v288;
  char v289;
  char *v290;
  char *v291;
  char *v292;
  char v293;
  char *v294;
  char *v295;
  char *v296;
  char v297;
  char *v298;
  char *v299;
  char *v300;
  char v301;
  char *v302;
  char *v303;
  char *v304;
  char v305;
  char *v306;
  char *v307;
  char v308;
  uint64_t v309;
  _BYTE *v310;
  _BYTE *v311;
  _BYTE *v312;
  char *v313;
  char v314;
  uint64_t v315;
  _BYTE *v316;
  _BYTE *v317;
  char *v318;
  char v319;
  uint64_t v320;
  _BYTE *v321;
  _BYTE *v322;
  char *v323;
  char v324;
  uint64_t v325;
  _BYTE *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  char v332;
  uint64_t v333;
  int v334;
  char v335;
  int v336;
  char v337;
  int v338;
  char v339;
  int v340;
  char v341;
  int v342;
  char v343;
  int v344;
  char v345;
  int v346;
  char v347;
  int v348;
  char v349;
  int v350;
  char v351;
  int v352;
  char v353;
  int v354;
  char v355;
  int v356;
  char v357;
  int v358;
  char v359;
  int v360;
  char v361;
  int v362;
  char v363;
  char v364;
  char *v365;
  unsigned __int8 *v366;
  int v367;
  char v368;
  uint64_t v369;
  char *v370;
  char v371;
  uint64_t v372;
  uint64_t v373;
  char v374;
  char *v375;
  int v376;
  double v377;
  double v378;
  double v379;
  double v380;
  unsigned int v381;
  char *v382;
  char v383;
  uint64_t v384;
  uint64_t v385;
  char v386;
  unsigned __int8 *v387;
  int v388;
  double v389;
  double v390;
  double v391;
  unsigned int v392;
  _BYTE *v393;
  int v394;
  unsigned int v395;
  double v396;
  double v397;
  double v398;
  unsigned int v399;
  _BYTE *v400;
  int v401;
  unsigned int v402;
  _BYTE *v403;
  _BYTE *v404;
  char *v405;
  char v406;
  uint64_t v407;
  double v408;
  double v409;
  double v410;
  unsigned int v411;
  _BYTE *v412;
  double v413;
  double v414;
  double v415;
  unsigned int v416;
  _BYTE *v417;
  double v418;
  double v419;
  double v420;
  unsigned int v421;
  _BYTE *v422;
  double v423;
  double v424;
  double v425;
  unsigned int v426;
  _BYTE *v427;
  double v428;
  double v429;
  double v430;
  unsigned int v431;
  _BYTE *v432;
  char *v433;
  char v434;
  char *v435;
  char *v436;
  char v437;
  char *v438;
  char *v439;
  char v440;
  char *v441;
  uint64_t v442;
  double *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  char *v447;
  char v448;
  uint64_t v449;
  double *v450;
  double *v451;
  uint64_t v452;
  double v453;
  double v454;
  _BYTE *v455;
  _BYTE *v457;
  uint64_t v458;
  double v459;
  uint64_t v460;
  unint64_t v461;
  _BYTE *v462;
  char **v463;
  uint64_t *v464;
  uint64_t v465;
  char *v466;
  char v467;
  uint64_t v468;
  char *v469;
  double v470;
  double v471;
  double v472;
  double v473;
  unsigned int v474;
  char *v475;
  char *v476;
  char *v477;
  char *v478;
  char *v479;
  char *v480;
  char *v481;
  char *v482;
  char *v483;
  char *v484;
  char *v485;
  char *v486;
  char *v487;
  char *v488;
  char *v489;
  char *v490;
  char *v491;
  char *v492;
  double v493;
  double v494;
  double v495;
  double v496;
  unsigned int v497;
  char *v498;
  char *v499;
  char *v500;
  char *v501;
  char *v502;
  char *v503;
  char *v504;
  char *v505;
  char *v506;
  char *v507;
  char *v508;
  char *v509;
  char *v510;
  char *v511;
  char *v512;
  char *v513;
  char *v514;
  uint64_t v515;
  uint64_t v516;
  _BYTE *v517;
  char *v518;
  char v519;
  uint64_t v520;
  uint64_t v521;
  unint64_t v522;
  char v523;
  uint64_t v524;
  char v525;
  BOOL v526;
  char v527;
  uint64_t v528;
  uint64_t jj;
  char v530;
  uint64_t v531;
  char v532;
  char v533;
  uint64_t v534;
  char v535;
  uint64_t v536;
  uint64_t v537;
  unint64_t v538;
  _DWORD *v539;
  char v540;
  char v541;
  BOOL v542;
  char *v543;
  uint64_t kk;
  char v545;
  char v546;
  uint64_t v547;
  char v548;
  uint64_t v549;
  uint64_t v550;
  unint64_t v551;
  char v552;
  char v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  char v557;
  uint64_t v558;
  uint64_t v559;
  char *v560;
  uint64_t v561;
  unint64_t v562;
  _WORD *v563;
  char v564;
  char v565;
  BOOL v566;
  char v567;
  uint64_t v568;
  uint64_t mm;
  char v570;
  uint64_t nn;
  char v572;
  char *v573;
  unsigned int v574;
  char *v575;
  char v576;
  uint64_t v577;
  unsigned __int16 *v578;
  char **v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  char *v584;
  char v585;
  uint64_t v586;
  uint64_t v587;
  unint64_t v588;
  char v589;
  char v590;
  uint64_t v591;
  char v592;
  uint64_t v593;
  uint64_t v594;
  char v595;
  char v596;
  uint64_t v597;
  double v598;
  char *v599;
  char v600;
  uint64_t v601;
  char **v602;
  _QWORD *v603;
  uint64_t v604;
  _QWORD *v605;
  uint64_t v606;
  uint64_t v607;
  char *v608;
  char v609;
  uint64_t v610;
  unint64_t v611;
  unint64_t v612;
  char v613;
  _DWORD *v614;
  int v615;
  char v616;
  BOOL v617;
  char *v618;
  uint64_t v619;
  uint64_t v620;
  char v621;
  char *v622;
  double v623;
  double v624;
  char *v625;
  char v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  char v630;
  uint64_t v631;
  char *v632;
  uint64_t v633;
  uint64_t v634;
  int v635;
  int v636;
  char *v637;
  unsigned __int8 *v638;
  double *v639;
  char v640;
  uint64_t v641;
  uint64_t v642;
  char *v643;
  char *v644;
  char *v645;
  char *v646;
  char *v647;
  char *v648;
  double v649;
  double v650;
  char v651;
  uint64_t v652;
  char *v653;
  char *v654;
  char *v655;
  char *v656;
  double v657;
  double v658;
  double v659;
  unsigned int v660;
  double v661;
  double v662;
  double v663;
  unsigned int v664;
  double v665;
  double v666;
  double v667;
  unsigned int v668;
  char *v669;
  uint64_t v670;
  char *v671;
  char v672;
  char *v673;
  char *v674;
  char *v675;
  unsigned int i1;
  char *v677;
  char *v678;
  char *v679;
  char *v680;
  char *v681;
  char *v682;
  char *v683;
  uint64_t v684;
  char *v685;
  char v686;
  unsigned int *v687;
  uint64_t v688;
  char *v689;
  char **v690;
  uint64_t v691;
  unsigned __int8 *v692;
  char *v693;
  char v694;
  uint64_t v695;
  char Char_Ass_Status_Edit;
  char *v697;
  char v698;
  char *v699;
  char *v700;
  char *v701;
  uint64_t v702;
  char v703;
  char v704;
  char *v705;
  uint64_t v706;
  char v707;
  char v708;
  char *v709;
  uint64_t v710;
  char v711;
  char v712;
  char *v713;
  uint64_t v714;
  char v715;
  int v716;
  uint64_t v717;
  unsigned int i2;
  int v719;
  unsigned int v720;
  char *v721;
  char *v722;
  char *v723;
  char *v724;
  char *v725;
  char *v726;
  char *v727;
  char *v728;
  char *v729;
  char v730;
  uint64_t v731;
  char v732;
  char *v733;
  uint64_t v734;
  char v735;
  char v736;
  char *v737;
  uint64_t v738;
  char v739;
  char v740;
  char *v741;
  uint64_t v742;
  char v743;
  int v744;
  uint64_t v745;
  unsigned int i3;
  int v747;
  unsigned int v748;
  char *v749;
  char *v750;
  char *v751;
  char *v752;
  char *v753;
  uint64_t v754;
  char v755;
  _QWORD *v756;
  char *v757;
  char v758;
  char *v759;
  char *v760;
  unsigned int i4;
  char **v762;
  uint64_t v763;
  unsigned __int8 *v764;
  unsigned int *v765;
  char *v766;
  char v767;
  uint64_t v768;
  uint64_t v769;
  char v770;
  char *v771;
  char v772;
  char *v773;
  char *v774;
  char *v775;
  char *v776;
  char v777;
  char *v778;
  char *v779;
  char *v780;
  char v781;
  char *v782;
  char v783;
  uint64_t v784;
  char *v785;
  char v786;
  char *v787;
  char *v788;
  char *v789;
  char *v790;
  char v791;
  char *v792;
  char *v793;
  char *v794;
  char v795;
  char *v796;
  char v797;
  uint64_t v798;
  char *v799;
  char v800;
  char *v801;
  char *v802;
  char *v803;
  char *v804;
  char *v805;
  char *v806;
  char v807;
  char *v808;
  char **v809;
  uint64_t v810;
  char *v811;
  char v812;
  uint64_t v813;
  char v814;
  uint64_t v815;
  char *v816;
  char *v817;
  char v818;
  char *v819;
  char *v820;
  char v821;
  uint64_t v822;
  uint64_t v823;
  char *v824;
  char v825;
  uint64_t v826;
  char *v827;
  char v828;
  uint64_t v829;
  char *v830;
  char v831;
  uint64_t v832;
  char *v833;
  char v834;
  char *v835;
  char v836;
  uint64_t v837;
  char *v838;
  char v839;
  uint64_t v840;
  char *v841;
  char v842;
  uint64_t v843;
  char *v844;
  char *v845;
  char *v846;
  char v847;
  uint64_t v848;
  char *v849;
  char *v850;
  char v851;
  uint64_t v852;
  char *v853;
  char *v854;
  char *v855;
  char *v856;
  char *v857;
  char *v858;
  char v859;
  uint64_t v860;
  char *v861;
  char *v862;
  uint64_t v863;
  char v864;
  char *v865;
  _BYTE *v866;
  char *v867;
  char v868;
  uint64_t v869;
  uint64_t v870;
  char v871;
  char *v872;
  char *v873;
  char v874;
  char *v875;
  char *v876;
  char v877;
  uint64_t v878;
  char *v879;
  char *v880;
  char v881;
  uint64_t v882;
  double v883;
  double v884;
  double v885;
  unsigned int v886;
  double v887;
  double v888;
  double v889;
  unsigned int v890;
  char *v891;
  char v892;
  uint64_t v893;
  char *v894;
  char v895;
  uint64_t v896;
  char *v897;
  char *v898;
  char v899;
  char *v900;
  char *v901;
  char v902;
  uint64_t v903;
  char *v904;
  char *v905;
  char v906;
  uint64_t v907;
  double v908;
  char *v909;
  char v910;
  uint64_t v911;
  char *v912;
  char v913;
  uint64_t v914;
  char *v915;
  char *v916;
  char v917;
  char *v918;
  char *v919;
  char v920;
  uint64_t v921;
  char *v922;
  char *v923;
  char v924;
  uint64_t v925;
  double v926;
  char *v927;
  char v928;
  uint64_t v929;
  char *v930;
  uint64_t v931;
  char *v932;
  char v933;
  uint64_t v934;
  uint64_t v935;
  char *v936;
  char v937;
  uint64_t v938;
  uint64_t v939;
  char *v940;
  char v941;
  int v942;
  unsigned int v943;
  uint64_t v944;
  char *v945;
  char v946;
  unint64_t v947;
  char *v948;
  uint64_t v949;
  unsigned __int16 *v950;
  uint64_t v951;
  uint64_t v952;
  char *v953;
  char v954;
  char *v955;
  char v956;
  uint64_t v957;
  unsigned int v958;
  unsigned int v959;
  unsigned int v960;
  uint64_t v961;
  char *v962;
  char v963;
  uint64_t v964;
  char v965;
  char *v966;
  char *v967;
  char *v968;
  char *v969;
  char *v970;
  char *v971;
  char *v972;
  char *v973;
  char v974;
  uint64_t v975;
  char *v976;
  char *v977;
  char v978;
  uint64_t v979;
  char *v980;
  char *v981;
  char v982;
  uint64_t v983;
  uint64_t v984;
  char v985;
  char v986;
  char *v987;
  uint64_t v988;
  unsigned __int8 *v989;
  double *v990;
  unsigned int v991;
  char v992;
  char *v993;
  uint64_t v994;
  char *v995;
  char v996;
  char *v997;
  char v998;
  uint64_t v999;
  double v1000;
  double v1001;
  double v1002;
  unsigned int v1003;
  int v1004;
  char *v1005;
  char v1006;
  uint64_t v1007;
  char v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  char v1012;
  char *v1013;
  char *v1014;
  char v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  char *v1019;
  char *v1020;
  char v1021;
  uint64_t v1022;
  uint64_t i5;
  char *v1024;
  unsigned int i6;
  uint64_t v1026;
  uint64_t v1027;
  char *v1028;
  char **v1029;
  uint64_t v1030;
  char *v1031;
  char v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  char *v1036;
  char **v1037;
  uint64_t v1038;
  uint64_t v1039;
  char *v1040;
  char v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  char *v1045;
  uint64_t v1046;
  char *v1047;
  char v1048;
  uint64_t v1049;
  uint64_t i7;
  char *v1051;
  char v1052;
  uint64_t v1053;
  char *v1054;
  double *v1055;
  uint64_t v1056;
  double v1057;
  double v1058;
  char *v1059;
  char *v1060;
  char v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  char *v1065;
  uint64_t v1066;
  char *v1067;
  char v1068;
  uint64_t v1069;
  unsigned int v1070;
  char *v1071;
  unsigned int v1072;
  char *v1073;
  unsigned int v1074;
  char *v1075;
  char *v1076;
  char v1077;
  uint64_t v1078;
  BOOL v1079;
  unsigned int v1080;
  BOOL v1081;
  unsigned int v1082;
  char *v1083;
  char *v1084;
  char v1085;
  uint64_t v1086;
  uint64_t v1087;
  char *v1088;
  char v1089;
  char *v1090;
  char v1091;
  uint64_t v1092;
  unint64_t v1093;
  char *v1094;
  char **v1095;
  uint64_t v1096;
  char *v1097;
  char v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  char *v1102;
  uint64_t v1103;
  uint64_t v1104;
  char *v1105;
  char v1106;
  uint64_t v1107;
  uint64_t v1108;
  char *v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  char v1113;
  unsigned int *v1114;
  uint64_t v1115;
  char *v1116;
  uint64_t v1117;
  char *v1118;
  char v1119;
  char v1120;
  unsigned int v1121;
  unsigned int v1122;
  unsigned int v1123;
  uint64_t v1124;
  char *v1125;
  char v1126;
  char *v1127;
  char *v1128;
  char v1129;
  int v1130;
  uint64_t v1131;
  char v1132;
  char *v1133;
  char v1134;
  uint64_t v1135;
  char *v1136;
  char v1137;
  uint64_t v1138;
  char *v1139;
  char **v1140;
  uint64_t v1141;
  double v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  double v1146;
  uint64_t v1147;
  double v1148;
  uint64_t v1149;
  double v1150;
  double v1151;
  double v1152;
  uint64_t v1153;
  double v1154;
  double v1155;
  int v1156;
  uint64_t v1157;
  double v1158;
  double v1159;
  int v1160;
  double v1161;
  double v1162;
  uint64_t v1163;
  uint64_t v1164;
  double v1167;
  double v1170;
  uint64_t v1171;
  uint64_t v1172;
  unsigned __int16 *v1173;
  uint64_t v1174;
  uint64_t v1175;
  unsigned __int8 *v1176;
  int v1177;
  unsigned int v1179;
  char *v1180;
  char v1181;
  uint64_t v1182;
  char v1183;
  char *v1184;
  char v1185;
  unsigned int v1186;
  char *v1187;
  uint64_t v1188;
  unint64_t v1189;
  unint64_t v1190;
  double v1191;
  double v1192;
  double v1193;
  unsigned int v1194;
  unint64_t v1195;
  unint64_t v1196;
  double v1197;
  double v1198;
  double v1199;
  unsigned int v1200;
  __int16 v1201;
  unsigned __int16 *v1202;
  uint64_t v1203;
  char *v1204;
  int v1205;
  uint64_t v1206;
  char *v1207;
  int v1208;
  uint64_t v1209;
  char *v1210;
  int v1211;
  uint64_t v1212;
  char *v1213;
  unsigned int i8;
  uint64_t v1215;
  char v1216;
  int v1217;
  unsigned int v1218;
  unsigned int v1219;
  uint64_t v1220;
  char *v1221;
  char v1222;
  char *v1223;
  _BYTE *v1224;
  int v1225;
  unsigned int v1226;
  uint64_t v1227;
  char v1228;
  char *v1229;
  char *v1230;
  _BYTE *v1231;
  int v1232;
  int v1233;
  unsigned int v1234;
  uint64_t v1235;
  char v1236;
  char *v1237;
  char *v1238;
  const char *v1239;
  char v1240;
  unsigned __int8 *v1241;
  int v1242;
  int v1243;
  unsigned int v1244;
  char *v1245;
  char *v1246;
  int v1247;
  unsigned int v1248;
  uint64_t v1249;
  char v1250;
  uint64_t v1251;
  unsigned int v1252;
  int v1253;
  __int16 *v1254;
  char *v1255;
  char v1256;
  uint64_t v1257;
  int v1258;
  int v1259;
  uint64_t v1260;
  double v1261;
  char *v1262;
  char v1263;
  uint64_t v1264;
  double v1265;
  double v1266;
  unsigned int v1267;
  double v1268;
  double v1269;
  double v1270;
  unsigned int v1271;
  int v1272;
  uint64_t v1273;
  double v1274;
  double v1275;
  BOOL v1276;
  double v1277;
  double v1278;
  double v1279;
  unsigned int v1280;
  uint64_t v1281;
  int v1282;
  char *v1283;
  uint64_t v1284;
  gnss::GnssAdaptDevice *v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  const char *v1292;
  char *v1293;
  char v1294;
  uint64_t v1295;
  char *v1296;
  uint64_t v1297;
  char v1298;
  char *v1299;
  char *v1300;
  char *v1301;
  char *v1302;
  uint64_t v1303;
  uint64_t v1304;
  char v1305;
  char *v1306;
  char *v1307;
  char *v1308;
  char *v1309;
  char *v1310;
  char *v1311;
  char v1312;
  char *v1313;
  unsigned __int8 *v1314;
  int v1315;
  double v1316;
  double v1317;
  double v1318;
  unsigned int v1319;
  double v1320;
  double v1321;
  double v1322;
  unsigned int v1323;
  int v1324;
  double v1325;
  double v1326;
  double v1327;
  unsigned int v1328;
  uint64_t v1329;
  uint64_t v1330;
  double v1331;
  double v1332;
  double v1333;
  unsigned int v1334;
  uint64_t v1335;
  double v1336;
  double v1337;
  double v1338;
  double v1339;
  unsigned int v1340;
  double v1341;
  double v1342;
  double v1343;
  unsigned int v1344;
  int v1345;
  uint64_t v1346;
  double v1347;
  double v1348;
  double v1349;
  double v1350;
  unsigned int v1351;
  uint64_t v1352;
  double v1353;
  double v1354;
  double v1355;
  unsigned int v1356;
  char *v1357;
  char *v1358;
  char *v1359;
  uint64_t v1360;
  char *v1361;
  char *v1362;
  int v1363;
  unsigned int v1364;
  int v1365;
  int v1366;
  uint64_t v1367;
  double v1368;
  double v1369;
  double v1370;
  double v1371;
  double v1372;
  double v1373;
  double v1374;
  double v1375;
  unsigned int v1376;
  double v1377;
  double v1378;
  double v1379;
  double v1380;
  unsigned int v1381;
  uint64_t v1382;
  char v1383;
  char *v1384;
  uint64_t v1385;
  char **v1386;
  uint64_t v1387;
  uint64_t v1388;
  unsigned __int8 *v1389;
  uint64_t v1390;
  uint64_t v1391;
  char *v1392;
  char v1393;
  char *v1394;
  char v1395;
  int v1396;
  uint64_t v1397;
  char *v1398;
  char v1399;
  unint64_t v1400;
  uint64_t v1401;
  int v1402;
  int v1403;
  char *v1404;
  char *v1405;
  char v1406;
  uint64_t v1407;
  __int16 *v1408;
  char *v1409;
  char v1410;
  unsigned int v1411;
  char *v1412;
  unsigned int i9;
  char *v1414;
  uint64_t result;
  char **v1416;
  _BYTE *v1417;
  uint64_t v1418;
  _BYTE *v1419;
  double v1420;
  double v1421;
  double v1422;
  int v1423;
  char *v1424;
  char v1425;
  uint64_t v1426;
  unsigned int v1427;
  char *v1428;
  char v1429;
  uint64_t v1430;
  uint64_t v1431;
  char *v1432;
  char v1433;
  uint64_t v1434;
  char *v1435;
  char *v1436;
  char v1437;
  uint64_t v1438;
  char *v1439;
  char v1440;
  uint64_t v1441;
  uint64_t v1442;
  char *v1443;
  char v1444;
  uint64_t v1445;
  char *v1446;
  char *v1447;
  char v1448;
  uint64_t v1449;
  char *v1450;
  char v1451;
  uint64_t v1452;
  uint64_t v1453;
  char *v1454;
  char v1455;
  uint64_t v1456;
  char *v1457;
  char *v1458;
  char v1459;
  uint64_t v1460;
  char *v1461;
  char v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  char *v1468;
  char v1469;
  char *v1470;
  char *v1471;
  char v1472;
  uint64_t v1473;
  char *v1474;
  char v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  char *v1481;
  char v1482;
  char *v1483;
  char *v1484;
  char v1485;
  uint64_t v1486;
  char *v1487;
  char v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  char *v1494;
  char v1495;
  char *v1496;
  char *v1497;
  char v1498;
  uint64_t v1499;
  unint64_t v1500;
  _BYTE *v1501;
  int v1502;
  int v1503;
  char *v1504;
  char *v1505;
  char v1506;
  uint64_t v1507;
  __int16 *v1508;
  char *v1509;
  char v1510;
  unsigned int v1511;
  uint64_t v1512;
  char *v1513;
  char v1514;
  uint64_t v1515;
  char *v1516;
  char v1517;
  uint64_t v1518;
  _BYTE *v1519;
  char *v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  _QWORD *v1524;
  _DWORD *v1525;
  uint64_t v1526;
  uint64_t v1527;
  _BYTE *v1528;
  double v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  int v1534;
  uint64_t v1535;
  uint64_t v1536;
  int v1537;
  uint64_t v1538;
  uint64_t v1539;
  __int16 *v1540;
  uint64_t v1541;
  signed __int8 v1542;
  unsigned __int16 v1543;
  unsigned __int16 v1544[2];
  unsigned __int16 v1545[2];
  double v1546;
  unsigned int v1547[4];
  __int128 v1548;
  __int128 v1549;
  __int128 v1550;
  __int128 v1551;
  __int128 v1552;
  __int128 v1553;
  __int128 v1554;
  __int128 v1555;
  __int128 v1556;
  __int128 v1557;
  __int128 v1558;
  __int128 v1559;
  __int128 v1560;
  __int128 v1561;
  __int128 v1562;
  __int128 v1563;
  __int128 v1564;
  __int128 v1565;
  __int128 v1566;
  __int128 v1567;
  __int128 v1568;
  __int128 v1569;
  __int128 v1570;
  _OWORD v1571[24];
  unsigned int v1572[4];
  uint64_t v1573;
  unsigned int v1574[6];
  uint64_t v1575;

  v1575 = *MEMORY[0x24BDAC8D0];
  v2 = (char **)a1[46];
  v3 = a1[9];
  v4 = a1[10];
  v5 = a1[22];
  v6 = a1[36];
  v7 = *(unsigned __int16 *)(a1[20] + 394);
  GN_GPS_Get_LibVersion((char *)v1571);
  v8 = *v2;
  v9 = 86;
  v10 = 1u;
  do
  {
    *v2 = v8 + 1;
    *v8 = v9;
    v8 = *v2;
    if (*v2 >= v2[3])
    {
      v8 = v2[2];
      *v2 = v8;
    }
    v9 = aVer[v10++];
  }
  while (v10 != 7);
  v11 = v1571[0];
  if (LOBYTE(v1571[0]))
  {
    v12 = (unsigned __int8 *)v1571 + 1;
    do
    {
      *v2 = v8 + 1;
      *v8 = v11;
      v8 = *v2;
      if (*v2 >= v2[3])
      {
        v8 = v2[2];
        *v2 = v8;
      }
      v13 = *v12++;
      v11 = v13;
    }
    while (v13);
  }
  *v2 = v8 + 1;
  *v8 = 32;
  v14 = *v2;
  if (*v2 >= v2[3])
    v14 = v2[2];
  *v2 = v14 + 1;
  *v14 = 91;
  v15 = *v2;
  if (*v2 >= v2[3])
  {
    v15 = v2[2];
    *v2 = v15;
  }
  v16 = *(_BYTE *)(v6 + 118);
  if (v16)
  {
    v17 = (unsigned __int8 *)(v6 + 119);
    do
    {
      *v2 = v15 + 1;
      *v15 = v16;
      v15 = *v2;
      if (*v2 >= v2[3])
      {
        v15 = v2[2];
        *v2 = v15;
      }
      v18 = *v17++;
      v16 = v18;
    }
    while (v18);
  }
  *v2 = v15 + 1;
  *v15 = 93;
  v19 = *v2;
  if (*v2 >= v2[3])
    v19 = v2[2];
  for (i = 3; i > 1; --i)
  {
    *v2 = v19 + 1;
    *v19 = 32;
    v19 = *v2;
    if (*v2 >= v2[3])
    {
      v19 = v2[2];
      *v2 = v19;
    }
  }
  sprintf_2f((uint64_t)v2, (*(_DWORD *)(v4 + 32) - *(_DWORD *)(v5 + 26996)) / 0x64u);
  v21 = (*v2)++;
  *v21 = 32;
  v22 = *v2;
  if (*v2 >= v2[3])
    v22 = v2[2];
  v23 = &ch_GNSS_Exe_States[20 * *(int *)(v3 + 1284) + 1];
  v24 = 32;
  do
  {
    *v2 = v22 + 1;
    *v22 = v24;
    v22 = *v2;
    if (*v2 >= v2[3])
    {
      v22 = v2[2];
      *v2 = v22;
    }
    v25 = *v23++;
    v24 = v25;
  }
  while (v25);
  sprintf_sp1d(v2, *(unsigned __int8 *)(v3 + 1280));
  sprintf_sp1d(v2, v7);
  sprintf_sp1d(v2, *(unsigned __int8 *)(v5 + 29));
  v26 = (*v2)++;
  *v26 = 10;
  if (*v2 >= v2[3])
    *v2 = v2[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v2);
  v27 = (char **)a1[46];
  v28 = a1[2];
  v29 = (double *)a1[6];
  v31 = (_DWORD *)a1[9];
  v30 = a1[10];
  v32 = (unsigned int *)a1[22];
  v33 = a1[29];
  v34 = *v27;
  v35 = 84;
  v36 = 1u;
  do
  {
    *v27 = v34 + 1;
    *v34 = v35;
    v34 = *v27;
    if (*v27 >= v27[3])
    {
      v34 = v27[2];
      *v27 = v34;
    }
    v35 = aTime[v36++];
  }
  while (v36 != 7);
  v1538 = v28;
  *(_QWORD *)&v1571[0] = 0;
  LOWORD(v1572[0]) = 0;
  LOWORD(v1546) = 0;
  *(_DWORD *)v1544 = 0;
  *(_DWORD *)v1545 = 0;
  v1543 = 0;
  v37 = *(double *)(v30 + 40);
  v38 = *(_WORD *)(v30 + 54);
  v39 = (double *)(v30 + 144);
  *(_QWORD *)v1547 = 0;
  if (!R8_EQ((const double *)(v30 + 144), (const double *)v1547)
    || (v39 = (double *)(v30 + 152), *(_QWORD *)v1547 = 0, !R8_EQ((const double *)(v30 + 152), (const double *)v1547))
    || (v39 = (double *)(v30 + 160),
        *(_QWORD *)v1547 = 0,
        v40 = R8_EQ((const double *)(v30 + 160), (const double *)v1547),
        v41 = 0.0,
        !v40))
  {
    v41 = *v39;
  }
  for (j = v37 - v41; j >= 604800.0; ++v38)
    j = j + -604800.0;
  while (j < 0.0)
  {
    j = j + 604800.0;
    --v38;
  }
  API_Get_UTC_Cor(0, (double *)v1571);
  GPS_To_UTC_Time(v1572, (unsigned __int16 *)&v1546, &v1545[1], v1545, &v1544[1], v1544, &v1543, v38, j, *(double *)v1571);
  sprintf_02d(v27, v1545[0]);
  sprintf_02d(v27, v1544[1]);
  v43 = v1544[0];
  if (v1545[0] == 23 && v1544[1] == 59 && v1544[0] >= 0x3Au)
  {
    v1547[0] = 0;
    v1542 = 0;
    v1574[0] = 0;
    API_Get_Next_Leap_Second(v1547, &v1542, (int *)v1574);
    v43 = v1544[0];
    if (!v1574[0] && v1542 == 1)
      v43 = ++v1544[0];
  }
  sprintf_02d(v27, v43);
  v44 = (*v27)++;
  *v44 = 46;
  if (*v27 >= v27[3])
    *v27 = v27[2];
  sprintf_03d((uint64_t)v27, v1543);
  v45 = *(_DWORD *)(v30 + 32);
  v46 = (*v27)++;
  *v46 = 32;
  if (*v27 >= v27[3])
    *v27 = v27[2];
  sprintf_10u(v27, v45);
  sprintf_5d(v27, *(__int16 *)(v30 + 54));
  sprintf_12f3(v27, *(double *)(v30 + 40));
  sprintf_2d(v27, *(unsigned __int8 *)(v33 + 16));
  v47 = *v27;
  v48 = &g_TOW_Stat_As_String[10 * *(unsigned int *)v29 + 1];
  v49 = 32;
  do
  {
    *v27 = v47 + 1;
    *v47 = v49;
    v47 = *v27;
    if (*v27 >= v27[3])
    {
      v47 = v27[2];
      *v27 = v47;
    }
    v50 = *v48++;
    v49 = v50;
  }
  while (v50);
  sprintf_6d(v27, v32[2757]);
  sprintf_6d(v27, v32[2758]);
  sprintf_gR8(v27, v29[4] * 1000000000.0);
  sprintf_sgR8(v27, *(double *)(v30 + 168) * 1000000000.0);
  v51 = (*v27)++;
  *v51 = 32;
  if (*v27 >= v27[3])
    *v27 = v27[2];
  sprintf_sp1u(v27, *(_DWORD *)(v30 + 36));
  if (*(int *)v29 < 1)
  {
    v56 = 0;
    v57 = *v27;
    v58 = 32;
    do
    {
      *v27 = v57 + 1;
      *v57 = v58;
      v57 = *v27;
      if (*v27 >= v27[3])
      {
        v57 = v27[2];
        *v27 = v57;
      }
      v58 = a9999999[++v56];
    }
    while (v56 != 16);
    goto LABEL_95;
  }
  v52 = *(double *)(v30 + 40) * 1000.0;
  v53 = -0.5;
  if (v52 > 0.0)
    v53 = 0.5;
  v54 = v52 + v53;
  if (v54 <= 2147483650.0)
  {
    if (v54 >= -2147483650.0)
      v55 = (int)v54;
    else
      v55 = 0x80000000;
  }
  else
  {
    v55 = 0x7FFFFFFF;
  }
  v59 = _MergedGlobals_0;
  v60 = *(_DWORD *)(v30 + 32);
  if (_MergedGlobals_0)
  {
    v61 = dword_2540216BC;
  }
  else
  {
    _MergedGlobals_0 = *(_DWORD *)(v30 + 32);
    dword_2540216BC = v55;
    v61 = v55;
    v59 = v60;
  }
  v62 = v59 + v55;
  v63 = v61 + v60;
  v64 = v63 - v62;
  if (v63 - v62 <= -302400000)
    v64 = -302400000;
  v65 = v64 + v62;
  v66 = (v65 - v63 - (v65 != v63)) / 0x240C8400;
  if (v65 != v63)
    ++v66;
  v67 = v63 + 604800000 * v66;
  if ((int)(v67 - v62) >= 302399999)
    v68 = 302399999;
  else
    v68 = v67 - v62;
  v69 = v67 - v62 - 604800000 * ((v67 + ~(v62 + v68) + 604800000) / 0x240C8400);
  v70 = (*v27)++;
  *v70 = 32;
  if (*v27 >= v27[3])
    *v27 = v27[2];
  sprintf_4d(v27, v69);
  LODWORD(v1571[0]) = 0;
  v1547[0] = 0;
  v1574[0] = 0;
  v1572[0] = 0;
  if (!API_Get_FS_Pulse_TTick((unsigned int *)v1571, v1547, v1574, v1572))
  {
    v74 = *v27;
    v75 = 32;
    v76 = 1u;
    do
    {
      *v27 = v74 + 1;
      *v74 = v75;
      v74 = *v27;
      if (*v27 >= v27[3])
      {
        v74 = v27[2];
        *v27 = v74;
      }
      v75 = a9999999_0[v76++];
    }
    while (v76 != 15);
LABEL_95:
    k = 0.0;
    goto LABEL_110;
  }
  LODWORD(v71) = v1547[0];
  v72 = *(double *)(v30 + 40)
      - *(double *)(v30 + 144)
      + ((double)(*(_DWORD *)(v30 + 32) - LODWORD(v1571[0])) + (double)v71 * -0.0000152587891)
      * -0.001
      * (1.0 - *(double *)(v30 + 168));
  for (k = v72 - (double)(int)v72; k < -0.5; k = k + 1.0)
    ;
  for (; k > 0.5; k = k + -1.0)
    ;
  v77 = 0;
  v78 = *v27;
  v79 = 32;
  do
  {
    *v27 = v78 + 1;
    *v78 = v79;
    v78 = *v27;
    if (*v27 >= v27[3])
    {
      v78 = v27[2];
      *v27 = v78;
    }
    v79 = asc_21E797762[++v77];
  }
  while (v77 != 2);
  sprintf_10u(v27, v1571[0]);
  sprintf_10u(v27, v1547[0]);
  v80 = -0.5;
  if (k * 10000.0 > 0.0)
    v80 = 0.5;
  v81 = k * 10000.0 + v80;
  if (v81 <= 2147483650.0)
  {
    if (v81 >= -2147483650.0)
      v82 = (int)v81;
    else
      v82 = 0x80000000;
  }
  else
  {
    v82 = 0x7FFFFFFF;
  }
  sprintf_7f((uint64_t)v27, v82, 2);
LABEL_110:
  v83 = *(double *)(v30 + 40) * 1000.0;
  v84 = -0.5;
  if (v83 > 0.0)
    v84 = 0.5;
  v85 = v83 + v84;
  if (v85 <= 2147483650.0)
  {
    if (v85 >= -2147483650.0)
      v86 = (int)v85;
    else
      v86 = 0x80000000;
  }
  else
  {
    v86 = 0x7FFFFFFF;
  }
  v87 = *(_DWORD *)(v30 + 32) - (*((_DWORD *)v29 + 25) + v86) + *((_DWORD *)v29 + 24);
  v88 = (*v27)++;
  *v88 = 32;
  if (*v27 >= v27[3])
    *v27 = v27[2];
  sprintf_4d(v27, v87);
  v89 = (*v27)++;
  *v89 = 32;
  if (*v27 >= v27[3])
    *v27 = v27[2];
  sprintf_2d(v27, v32[2763]);
  v90 = v31[265];
  if (v90 == -1)
    v91 = 255;
  else
    v91 = v90 / 0xEA60;
  sprintf_4d(v27, v91);
  v92 = (*v27)++;
  *v92 = 32;
  if (*v27 >= v27[3])
    *v27 = v27[2];
  sprintf_1u(v27, v31[267]);
  v93 = *v27;
  if (*(_BYTE *)(v1538 + 22))
  {
    *v27 = v93 + 1;
    *v93 = 32;
    if (*v27 >= v27[3])
      *v27 = v27[2];
    v94 = *(double *)(v30 + 40) * 1000.0;
    v95 = -0.5;
    if (v94 > 0.0)
      v95 = 0.5;
    v96 = v94 + v95;
    if (v96 <= 2147483650.0)
    {
      if (v96 >= -2147483650.0)
        v97 = (int)v96;
      else
        v97 = 0x80000000;
    }
    else
    {
      v97 = 0x7FFFFFFF;
    }
    sprintf_5f((uint64_t)v27, *(_DWORD *)(v1538 + 24) - v97, 4);
    sprintf_sp1d(v27, *(unsigned __int8 *)(v1538 + 22));
    sprintf_sp1d(v27, *(unsigned __int8 *)(v1538 + 21));
    v93 = *v27;
  }
  else
  {
    v98 = 0;
    v99 = 32;
    do
    {
      *v27 = v93 + 1;
      *v93 = v99;
      v93 = *v27;
      if (*v27 >= v27[3])
      {
        v93 = v27[2];
        *v27 = v93;
      }
      v99 = a0000[++v98];
    }
    while (v98 != 8);
  }
  v100 = 32;
  v101 = 1u;
  do
  {
    *v27 = v93 + 1;
    *v93 = v100;
    v93 = *v27;
    if (*v27 >= v27[3])
    {
      v93 = v27[2];
      *v27 = v93;
    }
    v100 = aGoh[v101++];
  }
  while (v101 != 6);
  sprintf_4d(v27, v31[282]);
  v102 = v31[279];
  if (v102)
  {
    v103 = 274877907 * (*(_DWORD *)(v30 + 36) - v102);
    v104 = (v103 >> 38) + ((unint64_t)v103 >> 63);
    v105 = (*v27)++;
    *v105 = 32;
    if (*v27 >= v27[3])
      *v27 = v27[2];
    sprintf_4d(v27, v104);
    v106 = v31[282];
    if (v106)
    {
      v107 = 274877907 * (*(_DWORD *)(v30 + 36) - v106);
      v108 = (v107 >> 38) + ((unint64_t)v107 >> 63);
    }
    else
    {
      v108 = 0;
    }
    v112 = (*v27)++;
    *v112 = 32;
    if (*v27 >= v27[3])
      *v27 = v27[2];
    sprintf_4d(v27, v108);
    v110 = *v27;
  }
  else
  {
    v109 = 0;
    v110 = *v27;
    v111 = 32;
    do
    {
      *v27 = v110 + 1;
      *v110 = v111;
      v110 = *v27;
      if (*v27 >= v27[3])
      {
        v110 = v27[2];
        *v27 = v110;
      }
      v111 = a00[++v109];
    }
    while (v109 != 4);
  }
  *v27 = v110 + 1;
  *v110 = 10;
  if (*v27 >= v27[3])
    *v27 = v27[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v27);
  v113 = (char **)a1[46];
  v115 = a1[6];
  v114 = a1[7];
  v116 = (unsigned __int8 *)(v114 + 16232);
  v117 = (char *)(v114 + 8458);
  v118 = a1[10];
  v119 = *v113;
  v120 = 71;
  v121 = 1u;
  do
  {
    *v113 = v119 + 1;
    *v119 = v120;
    v119 = *v113;
    if (*v113 >= v113[3])
    {
      v119 = v113[2];
      *v113 = v119;
    }
    v120 = aGlot[v121++];
  }
  while (v121 != 7);
  v122 = *(double *)(v115 + 72) - *(double *)(v118 + 152) + 0.0005;
  if (v122 >= 86400.0)
    v122 = v122 + -86400.0;
  v123 = ((v122 - (double)v122) * 1000.0);
  v124 = (unsigned __int16)(v122 / 0xE10);
  v125 = v122 - 3600 * v124;
  v126 = (unsigned __int16)(v125 / 0x3C);
  v127 = v125 - 60 * v126;
  sprintf_02d(v113, v124);
  sprintf_02d(v113, v126);
  sprintf_02d(v113, v127);
  v128 = (*v113)++;
  *v128 = 46;
  if (*v113 >= v113[3])
    *v113 = v113[2];
  sprintf_03d((uint64_t)v113, v123);
  sprintf_3d(v113, *(__int16 *)(v115 + 66));
  sprintf_5d(v113, *(__int16 *)(v115 + 68));
  v129 = v117[3];
  sprintf_3d(v113, *v117);
  sprintf_3d(v113, v129);
  v130 = 0;
  v131 = *v113;
  v132 = 32;
  do
  {
    *v113 = v131 + 1;
    *v131 = v132;
    v131 = *v113;
    if (*v113 >= v113[3])
    {
      v131 = v113[2];
      *v113 = v131;
    }
    v132 = asc_21E797762[++v130];
  }
  while (v130 != 2);
  sprintf_12f3(v113, *(double *)(v115 + 72));
  sprintf_2d(v113, *(unsigned __int8 *)(v115 + 64));
  sprintf_3d(v113, *v116);
  sprintf_5d(v113, *((unsigned __int16 *)v117 + 3883));
  v133 = (*v113)++;
  *v133 = 32;
  v134 = *v113;
  if (*v113 >= v113[3])
    v134 = v113[2];
  *v113 = v134 + 1;
  *v134 = 32;
  v135 = *v113;
  if (*v113 >= v113[3])
    v135 = v113[2];
  v136 = &g_TOW_Stat_As_String[10 * *(unsigned int *)(v115 + 60) + 1];
  v137 = 32;
  do
  {
    *v113 = v135 + 1;
    *v135 = v137;
    v135 = *v113;
    if (*v113 >= v113[3])
    {
      v135 = v113[2];
      *v113 = v135;
    }
    v138 = *v136++;
    v137 = v138;
  }
  while (v138);
  *v113 = v135 + 1;
  *v135 = 10;
  if (*v113 >= v113[3])
    *v113 = v113[2];
  v139 = (gnss::GnssAdaptDevice *)GNSS_Nav_Debug_Flush_Check((uint64_t)v113);
  v140 = gnss::GnssAdaptDevice::Ga05_08CheckIfInertialFusionShouldBeEnabled(v139);
  v141 = (char **)a1[46];
  if (v140)
  {
    v142 = a1[34];
    if (*(_DWORD *)(v142 + 1020) == *(_DWORD *)(v142 + 4))
    {
      v143 = a1[27];
      v144 = *v141;
      v145 = 83;
      v146 = 1u;
      do
      {
        *v141 = v144 + 1;
        *v144 = v145;
        v144 = *v141;
        if (*v141 >= v141[3])
        {
          v144 = v141[2];
          *v141 = v144;
        }
        v145 = aSel[v146++];
      }
      while (v146 != 6);
      if (*(_BYTE *)(v143 + 2032))
        v147 = 70;
      else
        v147 = 71;
      *v141 = v144 + 1;
      *v144 = v147;
      v148 = *v141;
      if (*v141 >= v141[3])
        v148 = v141[2];
      *v141 = v148 + 1;
      *v148 = 32;
      v149 = *v141;
      if (*v141 >= v141[3])
        v149 = v141[2];
      if (*(_BYTE *)(v142 + 24))
        v150 = 103;
      else
        v150 = 45;
      *v141 = v149 + 1;
      *v149 = v150;
      v151 = *v141;
      if (*v141 >= v141[3])
        v151 = v141[2];
      if (*(_BYTE *)(v142 + 1040))
        v152 = 102;
      else
        v152 = 45;
      *v141 = v151 + 1;
      *v151 = v152;
      v153 = *v141;
      if (*v141 >= v141[3])
        v153 = v141[2];
      if (*(_BYTE *)(v142 + 2032))
        v154 = 83;
      else
        v154 = 45;
      *v141 = v153 + 1;
      *v153 = v154;
      v155 = *v141;
      if (*v141 >= v141[3])
        v155 = v141[2];
      if (*(_BYTE *)(v142 + 2033))
        v156 = 71;
      else
        v156 = 70;
      *v141 = v155 + 1;
      *v155 = v156;
      v157 = *v141;
      if (*v141 >= v141[3])
        v157 = v141[2];
      if (*(_BYTE *)(v142 + 2034))
        v158 = 78;
      else
        v158 = 45;
      *v141 = v157 + 1;
      *v157 = v158;
      v159 = *v141;
      if (*v141 >= v141[3])
        v159 = v141[2];
      if (*(_BYTE *)(v142 + 2035))
        v160 = 66;
      else
        v160 = 45;
      *v141 = v159 + 1;
      *v159 = v160;
      v161 = *v141;
      if (*v141 >= v141[3])
        v161 = v141[2];
      *v141 = v161 + 1;
      *v161 = 32;
      if (*v141 >= v141[3])
        *v141 = v141[2];
      Str_FIX_TYPE = Get_Str_FIX_TYPE(*(_DWORD *)(v142 + 28));
      v163 = *Str_FIX_TYPE;
      v164 = *v141;
      if (*Str_FIX_TYPE)
      {
        v165 = (unsigned __int8 *)(Str_FIX_TYPE + 1);
        do
        {
          *v141 = v164 + 1;
          *v164 = v163;
          v164 = *v141;
          if (*v141 >= v141[3])
          {
            v164 = v141[2];
            *v141 = v164;
          }
          v166 = *v165++;
          v163 = v166;
        }
        while (v166);
      }
      *v141 = v164 + 1;
      *v164 = 32;
      if (*v141 >= v141[3])
        *v141 = v141[2];
      sprintf_4d(v141, *(_DWORD *)(v143 + 2148));
      v167 = 0;
      v168 = *v141;
      v169 = 32;
      do
      {
        *v141 = v168 + 1;
        *v168 = v169;
        v168 = *v141;
        if (*v141 >= v141[3])
        {
          v168 = v141[2];
          *v141 = v168;
        }
        v169 = aG[++v167];
      }
      while (v167 != 4);
      sprintf_ACC(v141, *(double *)(v142 + 2040));
      v170 = *(_DWORD *)(v143 + 2136);
      v171 = v170 - 1;
      v172 = v170 - 5 * ((v170 - 1) / 5u);
      for (m = 4; m != -1; --m)
      {
        v174 = v172 + m;
        if (v172 + m - 5 >= 0)
          v174 = v172 + m - 5;
        v175 = (*v141)++;
        *v175 = 32;
        if (*v141 >= v141[3])
          *v141 = v141[2];
        sprintf_ACC(v141, *(double *)(v143 + 8 * v174 + 2096));
      }
      v176 = 0;
      v177 = *v141;
      v178 = 32;
      do
      {
        *v141 = v177 + 1;
        *v177 = v178;
        v177 = *v141;
        if (*v141 >= v141[3])
        {
          v177 = v141[2];
          *v141 = v177;
        }
        v178 = aF[++v176];
      }
      while (v176 != 4);
      sprintf_ACC(v141, *(double *)(v142 + 2048));
      v179 = v170 - 5 * (v171 / 5);
      for (n = 4; n != -1; --n)
      {
        v181 = v179 + n;
        if (v179 + n - 5 >= 0)
          v181 = v179 + n - 5;
        v182 = (*v141)++;
        *v182 = 32;
        if (*v141 >= v141[3])
          *v141 = v141[2];
        sprintf_ACC(v141, *(double *)(v143 + 8 * v181 + 2048));
      }
      v183 = (*v141)++;
      *v183 = 32;
      if (*v141 >= v141[3])
        *v141 = v141[2];
      v184 = v170 - 5 * (v171 / 5);
      for (ii = 4; ii != -1; --ii)
      {
        v186 = v184 + ii;
        if (v184 + ii - 5 >= 0)
          v186 = v184 + ii - 5;
        sprintf1da(v141, *(unsigned __int8 *)(v143 + v186 + 2088), v1571, 0, 0);
      }
      v187 = (*v141)++;
      *v187 = 10;
      if (*v141 >= v141[3])
        *v141 = v141[2];
      GNSS_Nav_Debug_Flush_Check((uint64_t)v141);
      v141 = (char **)a1[46];
    }
  }
  v188 = a1[38];
  v189 = *v141;
  v190 = 112;
  v191 = 1u;
  do
  {
    *v141 = v189 + 1;
    *v189 = v190;
    v189 = *v141;
    if (*v141 >= v141[3])
    {
      v189 = v141[2];
      *v141 = v189;
    }
    v190 = aPNd[v191++];
  }
  while (v191 != 7);
  v1571[0] = vmulq_f64(*(float64x2_t *)(v188 + 96), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D44uLL));
  sprintf_LaLo(v141, (uint64_t)v1571);
  sprintf_sgR8(v141, *(double *)(v188 + 112));
  sprintf_sgR8(v141, *(double *)(v188 + 120));
  v192 = (*v141)++;
  *v192 = 32;
  if (*v141 >= v141[3])
    *v141 = v141[2];
  sprintf_sgR8(v141, *(double *)(v188 + 128));
  v193 = *(double *)(v188 + 136) * 10.0;
  v194 = -0.5;
  if (v193 > 0.0)
    v194 = 0.5;
  v195 = v193 + v194;
  if (v195 <= 2147483650.0)
  {
    if (v195 >= -2147483650.0)
      v196 = (int)v195;
    else
      v196 = 0x80000000;
  }
  else
  {
    v196 = 0x7FFFFFFF;
  }
  sprintf_7f((uint64_t)v141, v196, 2);
  sprintf_sgR8(v141, *(double *)(v188 + 144));
  v197 = *v141;
  v198 = 32;
  v199 = 1u;
  do
  {
    *v141 = v197 + 1;
    *v197 = v198;
    v197 = *v141;
    if (*v141 >= v141[3])
    {
      v197 = v141[2];
      *v141 = v197;
    }
    v198 = aSt[v199++];
  }
  while (v199 != 6);
  sprintf_2d(v141, *(unsigned __int8 *)(v188 + 317));
  sprintf_2d(v141, *(unsigned __int8 *)(v188 + 318));
  v200 = (*v141)++;
  *v200 = 32;
  v201 = *v141;
  if (*v141 >= v141[3])
  {
    v201 = v141[2];
    *v141 = v201;
  }
  v202 = 45;
  switch(*(_DWORD *)(v188 + 304))
  {
    case 0:
      break;
    case 1:
      v202 = 86;
      break;
    case 2:
      v202 = 76;
      break;
    case 3:
      v202 = 77;
      break;
    case 4:
      v202 = 72;
      break;
    default:
      EvCrt_Illegal_Default("Get_Char_GN_RELIAB", 0x1103u);
      v201 = *v141;
      v202 = 120;
      break;
  }
  *v141 = v201 + 1;
  *v201 = v202;
  v203 = *v141;
  if (*v141 >= v141[3])
    v203 = v141[2];
  *v141 = v203 + 1;
  *v203 = 32;
  v204 = *v141;
  if (*v141 >= v141[3])
  {
    v204 = v141[2];
    *v141 = v204;
  }
  v205 = "NC";
  switch(*(_DWORD *)(v188 + 300))
  {
    case 0:
      break;
    case 1:
      v205 = "0D";
      break;
    case 2:
      v205 = "1D";
      break;
    case 3:
      v205 = "2D";
      break;
    case 4:
      v205 = "3D";
      break;
    default:
      EvCrt_Illegal_Default("Get_Str_GN_GNSS_CONTENT", 0x10EFu);
      v204 = *v141;
      v205 = "xx";
      break;
  }
  v206 = *v205;
  if (*v205)
  {
    v207 = (unsigned __int8 *)(v205 + 1);
    do
    {
      *v141 = v204 + 1;
      *v204 = v206;
      v204 = *v141;
      if (*v141 >= v141[3])
      {
        v204 = v141[2];
        *v141 = v204;
      }
      v208 = *v207++;
      v206 = v208;
    }
    while (v208);
  }
  *v141 = v204 + 1;
  *v204 = 32;
  v209 = *v141;
  if (*v141 >= v141[3])
  {
    v209 = v141[2];
    *v141 = v209;
  }
  v210 = "NF";
  switch(*(_DWORD *)(v188 + 296))
  {
    case 0:
      break;
    case 1:
      v210 = "ES";
      break;
    case 2:
      v210 = "G2";
      break;
    case 3:
      v210 = "D2";
      break;
    case 4:
      v210 = "G3";
      break;
    case 5:
      v210 = "D3";
      break;
    default:
      EvCrt_Illegal_Default("Get_Str_GN_GPS_FIX_TYPE", 0x10C4u);
      v209 = *v141;
      v210 = "xx";
      break;
  }
  v211 = *v210;
  if (*v210)
  {
    v212 = (unsigned __int8 *)(v210 + 1);
    do
    {
      *v141 = v209 + 1;
      *v209 = v211;
      v209 = *v141;
      if (*v141 >= v141[3])
      {
        v209 = v141[2];
        *v141 = v209;
      }
      v213 = *v212++;
      v211 = v213;
    }
    while (v213);
  }
  *v141 = v209 + 1;
  *v209 = 32;
  v214 = *v141;
  if (*v141 >= v141[3])
  {
    v214 = v141[2];
    *v141 = v214;
  }
  v215 = 45;
  switch(*(_DWORD *)(v188 + 292))
  {
    case 0:
      break;
    case 1:
      v215 = 83;
      break;
    case 2:
      v215 = 80;
      break;
    case 3:
      v215 = 86;
      break;
    case 4:
      v215 = 70;
      break;
    case 5:
      v215 = 43;
      break;
    default:
      EvCrt_Illegal_Default("Get_Char_GN_USTATE", 0x112Du);
      v214 = *v141;
      v215 = 120;
      break;
  }
  *v141 = v214 + 1;
  *v214 = v215;
  v216 = *v141;
  if (*v141 >= v141[3])
    v216 = v141[2];
  v217 = 0;
  v218 = 32;
  do
  {
    *v141 = v216 + 1;
    *v216 = v218;
    v216 = *v141;
    if (*v141 >= v141[3])
    {
      v216 = v141[2];
      *v141 = v216;
    }
    v218 = a0x[++v217];
  }
  while (v217 != 4);
  v219 = *(unsigned int *)(v188 + 312);
  LOBYTE(v1547[0]) = hexTABLE[v219 >> 28];
  BYTE1(v1547[0]) = hexTABLE[(v219 >> 24) & 0xF];
  hex6((uint64_t)v141, v219, v1547, 2);
  v220 = 0;
  v221 = *v141;
  v222 = 32;
  do
  {
    *v141 = v221 + 1;
    *v221 = v222;
    v221 = *v141;
    if (*v141 >= v141[3])
    {
      v221 = v141[2];
      *v141 = v221;
    }
    v222 = a0x[++v220];
  }
  while (v220 != 4);
  sprintf_03x(v141, *(unsigned int *)(v188 + 288));
  v223 = *v141;
  v224 = 32;
  v225 = 1u;
  do
  {
    *v141 = v223 + 1;
    *v223 = v224;
    v223 = *v141;
    if (*v141 >= v141[3])
    {
      v223 = v141[2];
      *v141 = v223;
    }
    v224 = aPa[v225++];
  }
  while (v225 != 6);
  sprintf_ACC(v141, *(double *)(v188 + 200));
  v226 = (*v141)++;
  *v226 = 32;
  if (*v141 >= v141[3])
    *v141 = v141[2];
  sprintf_ACC(v141, *(double *)(v188 + 208));
  v227 = (*v141)++;
  *v227 = 32;
  if (*v141 >= v141[3])
    *v141 = v141[2];
  sprintf_3d(v141, (int)*(double *)(v188 + 216));
  v228 = (*v141)++;
  *v228 = 32;
  if (*v141 >= v141[3])
    *v141 = v141[2];
  sprintf_ACC(v141, *(double *)(v188 + 192));
  v229 = *v141;
  v230 = 32;
  v231 = 1u;
  do
  {
    *v141 = v229 + 1;
    *v229 = v230;
    v229 = *v141;
    if (*v141 >= v141[3])
    {
      v229 = v141[2];
      *v141 = v229;
    }
    v230 = aVa[v231++];
  }
  while (v231 != 6);
  sprintf_ACC(v141, *(double *)(v188 + 224));
  v232 = (*v141)++;
  *v232 = 32;
  if (*v141 >= v141[3])
    *v141 = v141[2];
  sprintf_ACC(v141, *(double *)(v188 + 232));
  v233 = (*v141)++;
  *v233 = 32;
  if (*v141 >= v141[3])
    *v141 = v141[2];
  sprintf_ACC(v141, *(double *)(v188 + 240));
  v234 = *v141;
  v235 = 32;
  v236 = 1u;
  do
  {
    *v141 = v234 + 1;
    *v234 = v235;
    v234 = *v141;
    if (*v141 >= v141[3])
    {
      v234 = v141[2];
      *v141 = v234;
    }
    v235 = aTa[v236++];
  }
  while (v236 != 6);
  sprintf_ACC(v141, *(double *)(v188 + 152) * 1000.0);
  v237 = (*v141)++;
  *v237 = 32;
  if (*v141 >= v141[3])
    *v141 = v141[2];
  sprintf_ACC(v141, *(double *)(v188 + 160) * 1000000000.0);
  v238 = (*v141)++;
  *v238 = 32;
  if (*v141 >= v141[3])
    *v141 = v141[2];
  sprintf_ACC(v141, *(double *)(v188 + 168) * 1000000000.0);
  v239 = *v141;
  v240 = 32;
  v241 = 1u;
  do
  {
    *v141 = v239 + 1;
    *v239 = v240;
    v239 = *v141;
    if (*v141 >= v141[3])
    {
      v239 = v141[2];
      *v141 = v239;
    }
    v240 = aEt[v241++];
  }
  while (v241 != 6);
  v242 = *(_DWORD *)(v188 + 308);
  if (v242 >= 0)
    v243 = *(_DWORD *)(v188 + 308);
  else
    v243 = -v242;
  sprintf1da(v141, v243, v1547, 0, v242 >> 31);
  v244 = (*v141)++;
  *v244 = 10;
  if (*v141 >= v141[3])
    *v141 = v141[2];
  v245 = (gnss::GnssAdaptDevice *)GNSS_Nav_Debug_Flush_Check((uint64_t)v141);
  v246 = gnss::GnssAdaptDevice::Ga05_08CheckIfInertialFusionShouldBeEnabled(v245);
  v247 = a1[46];
  if (v246 && (unsigned __int16)g_Enable_Nav_Debug >= 2u && *(_BYTE *)(a1[26] + 2126920))
  {
    v248 = a1[18];
    v249 = a1[11];
    v250 = 70;
    v251 = 1u;
    v252 = *(char **)v247;
    do
    {
      *(_QWORD *)v247 = v252 + 1;
      *v252 = v250;
      v252 = *(char **)v247;
      if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      {
        v252 = *(char **)(v247 + 16);
        *(_QWORD *)v247 = v252;
      }
      v250 = aFpe[v251++];
    }
    while (v251 != 7);
    sprintf_LaLo((char **)v247, v248 + 192);
    sprintf_sgR8((_QWORD *)v247, *(double *)(v248 + 208));
    sprintf_sgR8((_QWORD *)v247, *(double *)(v248 + 208) - *(double *)(v249 + 232));
    v253 = (_BYTE *)(*(_QWORD *)v247)++;
    *v253 = 32;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      *(_QWORD *)v247 = *(_QWORD *)(v247 + 16);
    sprintf_sgR8((_QWORD *)v247, *(double *)(v248 + 248));
    v254 = *(double *)(v248 + 256) * 10.0;
    v255 = -0.5;
    if (v254 > 0.0)
      v255 = 0.5;
    v256 = v254 + v255;
    if (v256 <= 2147483650.0)
    {
      if (v256 >= -2147483650.0)
        v257 = (int)v256;
      else
        v257 = 0x80000000;
    }
    else
    {
      v257 = 0x7FFFFFFF;
    }
    sprintf_7f(v247, v257, 2);
    sprintf_sgR8((_QWORD *)v247, -*(double *)(v248 + 232));
    v258 = *(char **)v247;
    v259 = 32;
    v260 = 1u;
    do
    {
      *(_QWORD *)v247 = v258 + 1;
      *v258 = v259;
      v258 = *(char **)v247;
      if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      {
        v258 = *(char **)(v247 + 16);
        *(_QWORD *)v247 = v258;
      }
      v259 = aSt[v260++];
    }
    while (v260 != 6);
    v261 = 0;
    v262 = 32;
    do
    {
      *(_QWORD *)v247 = v258 + 1;
      *v258 = v262;
      v258 = *(char **)v247;
      if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      {
        v258 = *(char **)(v247 + 16);
        *(_QWORD *)v247 = v258;
      }
      v262 = asc_21E79784D[++v261];
    }
    while (v261 != 2);
    sprintf_2d((_QWORD *)v247, *(unsigned __int8 *)(v248 + 24));
    v263 = (_BYTE *)(*(_QWORD *)v247)++;
    *v263 = 32;
    v264 = *(char **)v247;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
    {
      v264 = *(char **)(v247 + 16);
      *(_QWORD *)v247 = v264;
    }
    v265 = 45;
    switch(*(_DWORD *)(v248 + 36))
    {
      case 0:
        break;
      case 1:
        v265 = 76;
        break;
      case 2:
        v265 = 72;
        break;
      case 3:
        v265 = 70;
        break;
      default:
        EvCrt_Illegal_Default("Get_Char_FPE_CONF", 0x1117u);
        v264 = *(char **)v247;
        v265 = 120;
        break;
    }
    *(_QWORD *)v247 = v264 + 1;
    *v264 = v265;
    v266 = *(char **)v247;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      v266 = *(char **)(v247 + 16);
    *(_QWORD *)v247 = v266 + 1;
    *v266 = 32;
    v267 = *(char **)v247;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      v267 = *(char **)(v247 + 16);
    v268 = 0;
    v269 = 32;
    do
    {
      *(_QWORD *)v247 = v267 + 1;
      *v267 = v269;
      v267 = *(char **)v247;
      if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      {
        v267 = *(char **)(v247 + 16);
        *(_QWORD *)v247 = v267;
      }
      v269 = asc_21E79784D[++v268];
    }
    while (v268 != 2);
    *(_QWORD *)v247 = v267 + 1;
    *v267 = 32;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      *(_QWORD *)v247 = *(_QWORD *)(v247 + 16);
    v270 = Get_Str_FIX_TYPE(*(_DWORD *)(v248 + 28));
    v271 = *v270;
    v272 = *(char **)v247;
    if (*v270)
    {
      v273 = (unsigned __int8 *)(v270 + 1);
      do
      {
        *(_QWORD *)v247 = v272 + 1;
        *v272 = v271;
        v272 = *(char **)v247;
        if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
        {
          v272 = *(char **)(v247 + 16);
          *(_QWORD *)v247 = v272;
        }
        v274 = *v273++;
        v271 = v274;
      }
      while (v274);
    }
    *(_QWORD *)v247 = v272 + 1;
    *v272 = 32;
    v275 = *(char **)v247;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      v275 = *(char **)(v247 + 16);
    v276 = 0;
    v277 = 45;
    do
    {
      *(_QWORD *)v247 = v275 + 1;
      *v275 = v277;
      v275 = *(char **)v247;
      if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      {
        v275 = *(char **)(v247 + 16);
        *(_QWORD *)v247 = v275;
      }
      v277 = asc_21E797850[++v276];
    }
    while (v276 != 2);
    v278 = 0;
    v279 = 0uLL;
    v280 = 0uLL;
    v281 = 0uLL;
    v282 = 0uLL;
    do
    {
      v283 = *(uint8x16_t *)(v248 + 264 + v278);
      v284 = vmovl_u8(*(uint8x8_t *)v283.i8);
      v285 = vmovl_high_u8(v283);
      v282 = (int32x4_t)vaddw_high_u16((uint32x4_t)v282, v285);
      v281 = (int32x4_t)vaddw_u16((uint32x4_t)v281, *(uint16x4_t *)v285.i8);
      v280 = (int32x4_t)vaddw_high_u16((uint32x4_t)v280, v284);
      v279 = (int32x4_t)vaddw_u16((uint32x4_t)v279, *(uint16x4_t *)v284.i8);
      v278 += 16;
    }
    while (v278 != 48);
    sprintf_2d((_QWORD *)v247, vaddvq_s32(vaddq_s32(vaddq_s32(v279, v281), vaddq_s32(v280, v282))));
    v286 = (_BYTE *)(*(_QWORD *)v247)++;
    *v286 = 32;
    v287 = *(char **)v247;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      v287 = *(char **)(v247 + 16);
    *(_QWORD *)v247 = v287 + 1;
    *v287 = 97;
    v288 = *(char **)v247;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      v288 = *(char **)(v247 + 16);
    if (*(_BYTE *)(v248 + 312))
    {
      if (*(_BYTE *)(v248 + 320))
      {
        v289 = 85;
      }
      else if (*(_DWORD *)(v248 + 316))
      {
        v289 = 69;
      }
      else
      {
        v289 = 65;
      }
    }
    else
    {
      v289 = 45;
    }
    *(_QWORD *)v247 = v288 + 1;
    *v288 = v289;
    v290 = *(char **)v247;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      v290 = *(char **)(v247 + 16);
    *(_QWORD *)v247 = v290 + 1;
    *v290 = 32;
    v291 = *(char **)v247;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      v291 = *(char **)(v247 + 16);
    *(_QWORD *)v247 = v291 + 1;
    *v291 = 103;
    v292 = *(char **)v247;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      v292 = *(char **)(v247 + 16);
    if (*(_BYTE *)(v248 + 328))
    {
      if (*(_BYTE *)(v248 + 336))
      {
        v293 = 85;
      }
      else if (*(_DWORD *)(v248 + 332))
      {
        v293 = 69;
      }
      else
      {
        v293 = 65;
      }
    }
    else
    {
      v293 = 45;
    }
    *(_QWORD *)v247 = v292 + 1;
    *v292 = v293;
    v294 = *(char **)v247;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      v294 = *(char **)(v247 + 16);
    *(_QWORD *)v247 = v294 + 1;
    *v294 = 32;
    v295 = *(char **)v247;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      v295 = *(char **)(v247 + 16);
    *(_QWORD *)v247 = v295 + 1;
    *v295 = 109;
    v296 = *(char **)v247;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      v296 = *(char **)(v247 + 16);
    if (*(_BYTE *)(v248 + 360))
    {
      if (*(_BYTE *)(v248 + 368))
      {
        v297 = 85;
      }
      else if (*(_DWORD *)(v248 + 364))
      {
        v297 = 69;
      }
      else
      {
        v297 = 65;
      }
    }
    else
    {
      v297 = 45;
    }
    *(_QWORD *)v247 = v296 + 1;
    *v296 = v297;
    v298 = *(char **)v247;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      v298 = *(char **)(v247 + 16);
    *(_QWORD *)v247 = v298 + 1;
    *v298 = 32;
    v299 = *(char **)v247;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      v299 = *(char **)(v247 + 16);
    *(_QWORD *)v247 = v299 + 1;
    *v299 = 99;
    v300 = *(char **)v247;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      v300 = *(char **)(v247 + 16);
    if (*(_BYTE *)(v248 + 376))
    {
      if (*(_BYTE *)(v248 + 384))
      {
        v301 = 85;
      }
      else if (*(_DWORD *)(v248 + 380))
      {
        v301 = 69;
      }
      else
      {
        v301 = 65;
      }
    }
    else
    {
      v301 = 45;
    }
    *(_QWORD *)v247 = v300 + 1;
    *v300 = v301;
    v302 = *(char **)v247;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      v302 = *(char **)(v247 + 16);
    *(_QWORD *)v247 = v302 + 1;
    *v302 = 32;
    v303 = *(char **)v247;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      v303 = *(char **)(v247 + 16);
    *(_QWORD *)v247 = v303 + 1;
    *v303 = 102;
    v304 = *(char **)v247;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      v304 = *(char **)(v247 + 16);
    if (*(_BYTE *)(v248 + 392))
    {
      if (*(_BYTE *)(v248 + 400))
      {
        v305 = 85;
      }
      else if (*(_DWORD *)(v248 + 396))
      {
        v305 = 69;
      }
      else
      {
        v305 = 65;
      }
    }
    else
    {
      v305 = 45;
    }
    *(_QWORD *)v247 = v304 + 1;
    *v304 = v305;
    v306 = *(char **)v247;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      v306 = *(char **)(v247 + 16);
    *(_QWORD *)v247 = v306 + 1;
    *v306 = 32;
    v307 = *(char **)v247;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      v307 = *(char **)(v247 + 16);
    v308 = 32;
    v309 = 1u;
    do
    {
      *(_QWORD *)v247 = v307 + 1;
      *v307 = v308;
      v307 = *(char **)v247;
      if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      {
        v307 = *(char **)(v247 + 16);
        *(_QWORD *)v247 = v307;
      }
      v308 = aPa[v309++];
    }
    while (v309 != 6);
    sprintf_ACC((char **)v247, *(double *)(v248 + 136));
    v310 = (_BYTE *)(*(_QWORD *)v247)++;
    *v310 = 32;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      *(_QWORD *)v247 = *(_QWORD *)(v247 + 16);
    sprintf_ACC((char **)v247, *(double *)(v248 + 144));
    v311 = (_BYTE *)(*(_QWORD *)v247)++;
    *v311 = 32;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      *(_QWORD *)v247 = *(_QWORD *)(v247 + 16);
    sprintf_3d((_QWORD *)v247, (int)*(double *)(v248 + 152));
    v312 = (_BYTE *)(*(_QWORD *)v247)++;
    *v312 = 32;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      *(_QWORD *)v247 = *(_QWORD *)(v247 + 16);
    sprintf_ACC((char **)v247, *(double *)(v248 + 64));
    v313 = *(char **)v247;
    v314 = 32;
    v315 = 1u;
    do
    {
      *(_QWORD *)v247 = v313 + 1;
      *v313 = v314;
      v313 = *(char **)v247;
      if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      {
        v313 = *(char **)(v247 + 16);
        *(_QWORD *)v247 = v313;
      }
      v314 = aVa[v315++];
    }
    while (v315 != 6);
    sprintf_ACC((char **)v247, *(double *)(v248 + 96));
    v316 = (_BYTE *)(*(_QWORD *)v247)++;
    *v316 = 32;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      *(_QWORD *)v247 = *(_QWORD *)(v247 + 16);
    sprintf_ACC((char **)v247, *(double *)(v248 + 104));
    v317 = (_BYTE *)(*(_QWORD *)v247)++;
    *v317 = 32;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      *(_QWORD *)v247 = *(_QWORD *)(v247 + 16);
    sprintf_ACC((char **)v247, *(double *)(v248 + 120));
    v318 = *(char **)v247;
    v319 = 32;
    v320 = 1u;
    do
    {
      *(_QWORD *)v247 = v318 + 1;
      *v318 = v319;
      v318 = *(char **)v247;
      if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      {
        v318 = *(char **)(v247 + 16);
        *(_QWORD *)v247 = v318;
      }
      v319 = aTa[v320++];
    }
    while (v320 != 6);
    sprintf_ACC((char **)v247, *(double *)(v248 + 88) * 1000.0);
    v321 = (_BYTE *)(*(_QWORD *)v247)++;
    *v321 = 32;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      *(_QWORD *)v247 = *(_QWORD *)(v247 + 16);
    sprintf_ACC((char **)v247, *(double *)(v248 + 80) * 1000000000.0);
    v322 = (_BYTE *)(*(_QWORD *)v247)++;
    *v322 = 32;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      *(_QWORD *)v247 = *(_QWORD *)(v247 + 16);
    sprintf_ACC((char **)v247, *(double *)(v248 + 128) * 1000000000.0);
    v323 = *(char **)v247;
    v324 = 32;
    v325 = 1u;
    do
    {
      *(_QWORD *)v247 = v323 + 1;
      *v323 = v324;
      v323 = *(char **)v247;
      if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      {
        v323 = *(char **)(v247 + 16);
        *(_QWORD *)v247 = v323;
      }
      v324 = aCl[v325++];
    }
    while (v325 != 6);
    sprintf_sgR8((_QWORD *)v247, *(double *)(v248 + 184) * 1000000000.0);
    sprintf_gR8((_QWORD *)v247, *(double *)(v248 + 160) * 1000000000.0);
    sprintf_sgR8((_QWORD *)v247, (*(double *)(v248 + 168) - *(double *)(v248 + 160)) * 1000000000.0);
    sprintf_sgR8((_QWORD *)v247, (*(double *)(v248 + 176) - *(double *)(v248 + 160)) * 1000000000.0);
    v326 = (_BYTE *)(*(_QWORD *)v247)++;
    *v326 = 10;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      *(_QWORD *)v247 = *(_QWORD *)(v247 + 16);
    GNSS_Nav_Debug_Flush_Check(v247);
    v247 = a1[46];
  }
  v327 = a1[9];
  v328 = a1[10];
  v329 = a1[22];
  v330 = a1[29];
  strcpy((char *)v1571, "    -------------- ");
  v331 = *(char **)v247;
  v332 = 71;
  v333 = 1u;
  do
  {
    *(_QWORD *)v247 = v331 + 1;
    *v331 = v332;
    v331 = *(char **)v247;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
    {
      v331 = *(char **)(v247 + 16);
      *(_QWORD *)v247 = v331;
    }
    v332 = aGeod[v333++];
  }
  while (v333 != 7);
  sprintf_LaLo((char **)v247, v328 + 208);
  sprintf_sgR8((_QWORD *)v247, *(double *)(v328 + 224));
  sprintf_sgR8((_QWORD *)v247, *(double *)(v328 + 224) - *(double *)(v328 + 232));
  v334 = *(_DWORD *)(v328 + 392);
  if (v334 == 2)
  {
    v335 = 115;
  }
  else
  {
    if (v334 != 1)
      goto LABEL_536;
    v335 = 83;
  }
  BYTE4(v1571[0]) = v335;
LABEL_536:
  v336 = *(_DWORD *)(v328 + 396);
  if (v336 == 2)
  {
    v337 = 98;
  }
  else
  {
    if (v336 != 1)
      goto LABEL_541;
    v337 = 66;
  }
  BYTE5(v1571[0]) = v337;
LABEL_541:
  v338 = *(_DWORD *)(v328 + 408);
  if (v338 == 2)
  {
    v339 = 100;
  }
  else
  {
    if (v338 != 1)
      goto LABEL_546;
    v339 = 68;
  }
  BYTE6(v1571[0]) = v339;
LABEL_546:
  v340 = *(_DWORD *)(v328 + 400);
  if (v340 == 2)
  {
    v341 = 103;
  }
  else
  {
    if (v340 != 1)
      goto LABEL_551;
    v341 = 71;
  }
  BYTE7(v1571[0]) = v341;
LABEL_551:
  v342 = *(_DWORD *)(v328 + 416);
  if (v342 == 2)
  {
    v343 = 104;
  }
  else
  {
    if (v342 != 1)
      goto LABEL_556;
    v343 = 72;
  }
  BYTE8(v1571[0]) = v343;
LABEL_556:
  v344 = *(_DWORD *)(v328 + 420);
  if (v344 == 2)
  {
    v345 = 97;
  }
  else
  {
    if (v344 != 1)
      goto LABEL_561;
    v345 = 65;
  }
  BYTE9(v1571[0]) = v345;
LABEL_561:
  v346 = *(_DWORD *)(v328 + 424);
  if (v346 == 2)
  {
    v347 = 118;
  }
  else
  {
    if (v346 != 1)
      goto LABEL_566;
    v347 = 86;
  }
  BYTE10(v1571[0]) = v347;
LABEL_566:
  v348 = *(_DWORD *)(v328 + 428);
  if (v348 == 2)
  {
    v349 = 100;
  }
  else
  {
    if (v348 != 1)
      goto LABEL_571;
    v349 = 68;
  }
  BYTE11(v1571[0]) = v349;
LABEL_571:
  v350 = *(_DWORD *)(v328 + 432);
  if (v350 == 2)
  {
    v351 = 103;
  }
  else
  {
    if (v350 != 1)
      goto LABEL_576;
    v351 = 71;
  }
  BYTE12(v1571[0]) = v351;
LABEL_576:
  v352 = *(_DWORD *)(v328 + 436);
  if (v352 == 2)
  {
    v353 = 115;
  }
  else
  {
    if (v352 != 1)
      goto LABEL_581;
    v353 = 83;
  }
  BYTE13(v1571[0]) = v353;
LABEL_581:
  v354 = *(_DWORD *)(v328 + 440);
  if (v354 == 2)
  {
    v355 = 100;
  }
  else
  {
    if (v354 != 1)
      goto LABEL_586;
    v355 = 68;
  }
  BYTE14(v1571[0]) = v355;
LABEL_586:
  v356 = *(_DWORD *)(v328 + 444);
  if (v356 == 2)
  {
    v357 = 103;
  }
  else
  {
    if (v356 != 1)
      goto LABEL_591;
    v357 = 71;
  }
  HIBYTE(v1571[0]) = v357;
LABEL_591:
  v358 = *(_DWORD *)(v328 + 448);
  if (v358 == 2)
  {
    v359 = 100;
  }
  else
  {
    if (v358 != 1)
      goto LABEL_596;
    v359 = 68;
  }
  LOBYTE(v1571[1]) = v359;
LABEL_596:
  v360 = *(_DWORD *)(v328 + 452);
  if (v360 == 2)
  {
    v361 = 116;
  }
  else
  {
    if (v360 != 1)
      goto LABEL_601;
    v361 = 84;
  }
  BYTE1(v1571[1]) = v361;
LABEL_601:
  v362 = *(_DWORD *)(v328 + 456);
  if (v362 == 2)
  {
    v363 = 100;
    goto LABEL_605;
  }
  if (v362 == 1)
  {
    v363 = 68;
LABEL_605:
    BYTE2(v1571[1]) = v363;
  }
  v364 = v1571[0];
  v365 = *(char **)v247;
  if (LOBYTE(v1571[0]))
  {
    v366 = (unsigned __int8 *)v1571 + 1;
    do
    {
      *(_QWORD *)v247 = v365 + 1;
      *v365 = v364;
      v365 = *(char **)v247;
      if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      {
        v365 = *(char **)(v247 + 16);
        *(_QWORD *)v247 = v365;
      }
      v367 = *v366++;
      v364 = v367;
    }
    while (v367);
  }
  v368 = 32;
  v369 = 1u;
  do
  {
    *(_QWORD *)v247 = v365 + 1;
    *v365 = v368;
    v365 = *(char **)v247;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
    {
      v365 = *(char **)(v247 + 16);
      *(_QWORD *)v247 = v365;
    }
    v368 = aPf[v369++];
  }
  while (v369 != 6);
  sprintf_2d((_QWORD *)v247, *(unsigned __int8 *)(v327 + 66));
  v370 = *(char **)v247;
  v371 = 32;
  v372 = 1u;
  do
  {
    *(_QWORD *)v247 = v370 + 1;
    *v370 = v371;
    v370 = *(char **)v247;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
    {
      v370 = *(char **)(v247 + 16);
      *(_QWORD *)v247 = v370;
    }
    v371 = aSf[v372++];
  }
  while (v372 != 6);
  v373 = *(unsigned int *)(v329 + 11116);
  v374 = ch_Stat_Fil[2 * v373];
  if (v374)
  {
    v375 = &ch_Stat_Fil[2 * v373 + 1];
    do
    {
      *(_QWORD *)v247 = v370 + 1;
      *v370 = v374;
      v370 = *(char **)v247;
      if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      {
        v370 = *(char **)(v247 + 16);
        *(_QWORD *)v247 = v370;
      }
      v376 = *v375++;
      v374 = v376;
    }
    while (v376);
  }
  sprintf_2d((_QWORD *)v247, *(unsigned __int8 *)(v329 + 11161));
  sprintf_2d((_QWORD *)v247, *(_DWORD *)(v329 + 11120));
  sprintf_2d((_QWORD *)v247, *(unsigned __int8 *)(v329 + 11160));
  v377 = *(double *)(v329 + 11128);
  if (v377 >= 9.89999962)
    v378 = 98.9999962;
  else
    v378 = v377 * 10.0;
  v379 = -0.5;
  if (v378 > 0.0)
    v379 = 0.5;
  v380 = v378 + v379;
  if (v380 <= 2147483650.0)
  {
    if (v380 >= -2147483650.0)
      v381 = (int)v380;
    else
      v381 = 0x80000000;
  }
  else
  {
    v381 = 0x7FFFFFFF;
  }
  sprintf_3f(v247, v381, 2);
  sprintf_sgR8((_QWORD *)v247, *(double *)(v329 + 11144));
  sprintf_sgR8((_QWORD *)v247, *(double *)(v329 + 11152));
  v382 = *(char **)v247;
  v383 = 32;
  v384 = 1u;
  do
  {
    *(_QWORD *)v247 = v382 + 1;
    *v382 = v383;
    v382 = *(char **)v247;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
    {
      v382 = *(char **)(v247 + 16);
      *(_QWORD *)v247 = v382;
    }
    v383 = aHf[v384++];
  }
  while (v384 != 6);
  v385 = *(unsigned int *)(v329 + 11188);
  v386 = ch_Heading[2 * v385];
  if (v386)
  {
    v387 = &ch_Heading[2 * v385 + 1];
    do
    {
      *(_QWORD *)v247 = v382 + 1;
      *v382 = v386;
      v382 = *(char **)v247;
      if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
      {
        v382 = *(char **)(v247 + 16);
        *(_QWORD *)v247 = v382;
      }
      v388 = *v387++;
      v386 = v388;
    }
    while (v388);
  }
  v389 = *(double *)(v329 + 11192);
  v390 = -0.5;
  if (v389 > 0.0)
    v390 = 0.5;
  v391 = v389 + v390;
  if (v391 <= 2147483650.0)
  {
    if (v391 >= -2147483650.0)
      v392 = (int)v391;
    else
      v392 = 0x80000000;
  }
  else
  {
    v392 = 0x7FFFFFFF;
  }
  sprintf_5d((_QWORD *)v247, v392);
  v393 = (_BYTE *)(*(_QWORD *)v247)++;
  *v393 = 32;
  if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
    *(_QWORD *)v247 = *(_QWORD *)(v247 + 16);
  v394 = *(_DWORD *)(v329 + 11208);
  if (v394)
    v395 = (*(_DWORD *)v330 - v394) / 1000;
  else
    v395 = 0;
  sprintf_4d((_QWORD *)v247, v395);
  v396 = *(double *)(v329 + 11240);
  v397 = -0.5;
  if (v396 > 0.0)
    v397 = 0.5;
  v398 = v396 + v397;
  if (v398 <= 2147483650.0)
  {
    if (v398 >= -2147483650.0)
      v399 = (int)v398;
    else
      v399 = 0x80000000;
  }
  else
  {
    v399 = 0x7FFFFFFF;
  }
  sprintf_5d((_QWORD *)v247, v399);
  v400 = (_BYTE *)(*(_QWORD *)v247)++;
  *v400 = 32;
  if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
    *(_QWORD *)v247 = *(_QWORD *)(v247 + 16);
  v401 = *(_DWORD *)(v329 + 11248);
  if (v401)
    v402 = (*(_DWORD *)v330 - v401) / 1000;
  else
    v402 = 0;
  sprintf_4d((_QWORD *)v247, v402);
  sprintf_2d((_QWORD *)v247, *(unsigned __int8 *)(v329 + 11232));
  v403 = (_BYTE *)(*(_QWORD *)v247)++;
  *v403 = 32;
  if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
    *(_QWORD *)v247 = *(_QWORD *)(v247 + 16);
  sprintf_11f9((_QWORD *)v247, *(double *)(v329 + 11216));
  v404 = (_BYTE *)(*(_QWORD *)v247)++;
  *v404 = 32;
  if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
    *(_QWORD *)v247 = *(_QWORD *)(v247 + 16);
  sprintf_11f9((_QWORD *)v247, *(double *)(v329 + 11224));
  v405 = *(char **)v247;
  v406 = 32;
  v407 = 1u;
  do
  {
    *(_QWORD *)v247 = v405 + 1;
    *v405 = v406;
    v405 = *(char **)v247;
    if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
    {
      v405 = *(char **)(v247 + 16);
      *(_QWORD *)v247 = v405;
    }
    v406 = aHi[v407++];
  }
  while (v407 != 6);
  v408 = *(double *)(v330 + 31424) * 10.0;
  v409 = -0.5;
  if (v408 > 0.0)
    v409 = 0.5;
  v410 = v408 + v409;
  if (v410 <= 2147483650.0)
  {
    if (v410 >= -2147483650.0)
      v411 = (int)v410;
    else
      v411 = 0x80000000;
  }
  else
  {
    v411 = 0x7FFFFFFF;
  }
  sprintf_2f(v247, v411);
  v412 = (_BYTE *)(*(_QWORD *)v247)++;
  *v412 = 32;
  if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
    *(_QWORD *)v247 = *(_QWORD *)(v247 + 16);
  v413 = *(double *)(v330 + 31400);
  v414 = -0.5;
  if (v413 > 0.0)
    v414 = 0.5;
  v415 = v413 + v414;
  if (v415 <= 2147483650.0)
  {
    if (v415 >= -2147483650.0)
      v416 = (int)v415;
    else
      v416 = 0x80000000;
  }
  else
  {
    v416 = 0x7FFFFFFF;
  }
  sprintf_3d((_QWORD *)v247, v416);
  v417 = (_BYTE *)(*(_QWORD *)v247)++;
  *v417 = 32;
  if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
    *(_QWORD *)v247 = *(_QWORD *)(v247 + 16);
  v418 = *(double *)(v330 + 952);
  v419 = -0.5;
  if (v418 > 0.0)
    v419 = 0.5;
  v420 = v418 + v419;
  if (v420 <= 2147483650.0)
  {
    if (v420 >= -2147483650.0)
      v421 = (int)v420;
    else
      v421 = 0x80000000;
  }
  else
  {
    v421 = 0x7FFFFFFF;
  }
  sprintf_3d((_QWORD *)v247, v421);
  v422 = (_BYTE *)(*(_QWORD *)v247)++;
  *v422 = 32;
  if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
    *(_QWORD *)v247 = *(_QWORD *)(v247 + 16);
  v423 = *(double *)(v330 + 31416);
  v424 = -0.5;
  if (v423 > 0.0)
    v424 = 0.5;
  v425 = v423 + v424;
  if (v425 <= 2147483650.0)
  {
    if (v425 >= -2147483650.0)
      v426 = (int)v425;
    else
      v426 = 0x80000000;
  }
  else
  {
    v426 = 0x7FFFFFFF;
  }
  sprintf_3d((_QWORD *)v247, v426);
  v427 = (_BYTE *)(*(_QWORD *)v247)++;
  *v427 = 32;
  if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
    *(_QWORD *)v247 = *(_QWORD *)(v247 + 16);
  v428 = *(double *)(v330 + 31408);
  v429 = -0.5;
  if (v428 > 0.0)
    v429 = 0.5;
  v430 = v428 + v429;
  if (v430 <= 2147483650.0)
  {
    if (v430 >= -2147483650.0)
      v431 = (int)v430;
    else
      v431 = 0x80000000;
  }
  else
  {
    v431 = 0x7FFFFFFF;
  }
  sprintf_3d((_QWORD *)v247, v431);
  v432 = (_BYTE *)(*(_QWORD *)v247)++;
  *v432 = 32;
  v433 = *(char **)v247;
  if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
  {
    v433 = *(char **)(v247 + 16);
    *(_QWORD *)v247 = v433;
  }
  v434 = 120;
  switch(*(_DWORD *)(v330 + 31432))
  {
    case 0:
      break;
    case 1:
      v434 = 85;
      break;
    case 2:
      v434 = 83;
      break;
    case 3:
      v434 = 70;
      break;
    case 4:
      v434 = 49;
      break;
    case 5:
      v434 = 50;
      break;
    case 6:
      v434 = 48;
      break;
    case 7:
      v434 = 77;
      break;
    default:
      EvCrt_Illegal_Default("Get_Char_Hdg_Filt_Info", 0x11C6u);
      v433 = *(char **)v247;
      v434 = 120;
      break;
  }
  *(_QWORD *)v247 = v433 + 1;
  *v433 = v434;
  v435 = *(char **)v247;
  if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
    v435 = *(char **)(v247 + 16);
  *(_QWORD *)v247 = v435 + 1;
  *v435 = 32;
  v436 = *(char **)v247;
  if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
    v436 = *(char **)(v247 + 16);
  if (*(_BYTE *)(v330 + 31436))
    v437 = 83;
  else
    v437 = 45;
  *(_QWORD *)v247 = v436 + 1;
  *v436 = v437;
  v438 = *(char **)v247;
  if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
    v438 = *(char **)(v247 + 16);
  *(_QWORD *)v247 = v438 + 1;
  *v438 = 32;
  v439 = *(char **)v247;
  if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
    v439 = *(char **)(v247 + 16);
  if (*(_BYTE *)(v330 + 31437))
    v440 = 84;
  else
    v440 = 45;
  *(_QWORD *)v247 = v439 + 1;
  *v439 = v440;
  v441 = *(char **)v247;
  if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
    v441 = *(char **)(v247 + 16);
  *(_QWORD *)v247 = v441 + 1;
  *v441 = 10;
  if (*(_QWORD *)v247 >= *(_QWORD *)(v247 + 24))
    *(_QWORD *)v247 = *(_QWORD *)(v247 + 16);
  GNSS_Nav_Debug_Flush_Check(v247);
  v442 = a1[46];
  v444 = a1[9];
  v443 = (double *)a1[10];
  v445 = a1[22];
  v446 = a1[29];
  v447 = *(char **)v442;
  v448 = 76;
  v449 = 1u;
  do
  {
    *(_QWORD *)v442 = v447 + 1;
    *v447 = v448;
    v447 = *(char **)v442;
    if (*(_QWORD *)v442 >= *(_QWORD *)(v442 + 24))
    {
      v447 = *(char **)(v442 + 16);
      *(_QWORD *)v442 = v447;
    }
    v448 = aLocal[v449++];
  }
  while (v449 != 8);
  v450 = (double *)(v445 + 27072);
  v451 = v443 + 26;
  v452 = -3;
  do
  {
    v453 = *v451 - *(v450 - 5);
    if ((_DWORD)v452 != -3)
    {
      if ((_DWORD)v452 != -2)
        goto LABEL_758;
      v454 = -6.28318531;
      if (v453 >= 3.14159265 || (v454 = 6.28318531, v453 < -3.14159265))
        v453 = v453 + v454;
    }
    v453 = v453 * *v450;
LABEL_758:
    v455 = (_BYTE *)(*(_QWORD *)v442)++;
    *v455 = 32;
    if (*(_QWORD *)v442 >= *(_QWORD *)(v442 + 24))
      *(_QWORD *)v442 = *(_QWORD *)(v442 + 16);
    sprintf_12f3((char **)v442, v453);
    ++v450;
    ++v451;
  }
  while (!__CFADD__(v452++, 1));
  v457 = (_BYTE *)(*(_QWORD *)v442)++;
  *v457 = 32;
  if (*(_QWORD *)v442 >= *(_QWORD *)(v442 + 24))
    *(_QWORD *)v442 = *(_QWORD *)(v442 + 16);
  sprintf_sgR8((_QWORD *)v442, v443[44]);
  sprintf_sgR8((_QWORD *)v442, -v443[42]);
  v458 = 120;
  if (!*(_BYTE *)(v444 + 66))
    v458 = 45;
  sprintf_6d((_QWORD *)v442, (int)v443[v458]);
  v459 = 0.0;
  v460 = 17;
  do
  {
    v459 = v459 + v443[v460] * v443[v460];
    v461 = v460 - 14;
    --v460;
  }
  while (v461 > 1);
  sprintf_sgR8((_QWORD *)v442, sqrt(v459));
  sprintf_6d((_QWORD *)v442, (int)*(double *)(v446 + 952));
  sprintf_sgR8((_QWORD *)v442, v443[40]);
  sprintf_sgR8((_QWORD *)v442, v443[41]);
  sprintf_sgR8((_QWORD *)v442, v443[115]);
  sprintf_sgR8((_QWORD *)v442, v443[116]);
  sprintf_sgR8((_QWORD *)v442, v443[118]);
  sprintf_sgR8((_QWORD *)v442, v443[119]);
  v462 = (_BYTE *)(*(_QWORD *)v442)++;
  *v462 = 10;
  if (*(_QWORD *)v442 >= *(_QWORD *)(v442 + 24))
    *(_QWORD *)v442 = *(_QWORD *)(v442 + 16);
  GNSS_Nav_Debug_Flush_Check(v442);
  print_line_LS(a1, 1);
  print_line_LS(a1, 2);
  print_line_LS(a1, 3);
  print_line_LS(a1, 4);
  print_line_LS(a1, 5);
  v463 = (char **)a1[46];
  v464 = &qword_21E7F9000;
  v1524 = a1;
  if ((unsigned __int16)g_Enable_Nav_Debug > 1u)
  {
    v465 = a1[22];
    v466 = *v463;
    v467 = 75;
    v468 = 1u;
    do
    {
      *v463 = v466 + 1;
      *v466 = v467;
      v466 = *v463;
      if (*v463 >= v463[3])
      {
        v466 = v463[2];
        *v463 = v466;
      }
      v467 = aKfarp[v468++];
    }
    while (v468 != 7);
    *v463 = v466 + 1;
    *v466 = 32;
    v469 = *v463;
    if (*v463 >= v463[3])
      v469 = v463[2];
    *v463 = v469 + 1;
    *v469 = 80;
    if (*v463 >= v463[3])
      *v463 = v463[2];
    sprintf_3d(v463, *(char *)(v465 + 11528));
    v470 = *(double *)(v465 + 11520);
    if (v470 >= 9.89999962)
      v471 = 98.9999962;
    else
      v471 = v470 * 10.0;
    v472 = -0.5;
    if (v471 > 0.0)
      v472 = 0.5;
    v473 = v471 + v472;
    if (v473 <= 2147483650.0)
    {
      if (v473 >= -2147483650.0)
        v474 = (int)v473;
      else
        v474 = 0x80000000;
    }
    else
    {
      v474 = 0x7FFFFFFF;
    }
    sprintf_3f((uint64_t)v463, v474, 2);
    v475 = (*v463)++;
    *v475 = 32;
    v476 = *v463;
    if (*v463 >= v463[3])
      v476 = v463[2];
    *v463 = v476 + 1;
    *v476 = 72;
    if (*v463 >= v463[3])
      *v463 = v463[2];
    sprintf_6d(v463, (int)fmin(*(double *)(v465 + 11480), 99999.0));
    v477 = (*v463)++;
    *v477 = 32;
    v478 = *v463;
    if (*v463 >= v463[3])
      v478 = v463[2];
    *v463 = v478 + 1;
    *v478 = 86;
    if (*v463 >= v463[3])
      *v463 = v463[2];
    sprintf_6d(v463, (int)fmin(*(double *)(v465 + 11488), 99999.0));
    v479 = (*v463)++;
    *v479 = 32;
    v480 = *v463;
    if (*v463 >= v463[3])
      v480 = v463[2];
    *v463 = v480 + 1;
    *v480 = 66;
    if (*v463 >= v463[3])
      *v463 = v463[2];
    sprintf_6d(v463, (int)fmin(*(double *)(v465 + 11496), 99999.0));
    v481 = (*v463)++;
    *v481 = 32;
    v482 = *v463;
    if (*v463 >= v463[3])
      v482 = v463[2];
    *v463 = v482 + 1;
    *v482 = 83;
    if (*v463 >= v463[3])
      *v463 = v463[2];
    sprintf_6d(v463, (int)fmin(*(double *)(v465 + 11504), 99999.0));
    v483 = (*v463)++;
    *v483 = 32;
    v484 = *v463;
    if (*v463 >= v463[3])
      v484 = v463[2];
    *v463 = v484 + 1;
    *v484 = 72;
    if (*v463 >= v463[3])
      *v463 = v463[2];
    sprintf_3d(v463, *(char *)(v465 + 11440));
    v485 = (*v463)++;
    *v485 = 32;
    v486 = *v463;
    if (*v463 >= v463[3])
      v486 = v463[2];
    *v463 = v486 + 1;
    *v486 = 86;
    if (*v463 >= v463[3])
      *v463 = v463[2];
    sprintf_3d(v463, *(char *)(v465 + 11441));
    v487 = (*v463)++;
    *v487 = 32;
    v488 = *v463;
    if (*v463 >= v463[3])
      v488 = v463[2];
    *v463 = v488 + 1;
    *v488 = 66;
    if (*v463 >= v463[3])
      *v463 = v463[2];
    sprintf_3d(v463, *(char *)(v465 + 11442));
    v489 = (*v463)++;
    *v489 = 32;
    v490 = *v463;
    if (*v463 >= v463[3])
      v490 = v463[2];
    *v463 = v490 + 1;
    *v490 = 83;
    if (*v463 >= v463[3])
      *v463 = v463[2];
    sprintf_3d(v463, *(char *)(v465 + 11443));
    v491 = (*v463)++;
    *v491 = 32;
    v492 = *v463;
    if (*v463 >= v463[3])
      v492 = v463[2];
    *v463 = v492 + 1;
    *v492 = 86;
    if (*v463 >= v463[3])
      *v463 = v463[2];
    sprintf_3d(v463, *(char *)(v465 + 11624));
    v493 = *(double *)(v465 + 11616);
    if (v493 >= 9.89999962)
      v494 = 98.9999962;
    else
      v494 = v493 * 10.0;
    v495 = -0.5;
    if (v494 > 0.0)
      v495 = 0.5;
    v496 = v494 + v495;
    if (v496 <= 2147483650.0)
    {
      if (v496 >= -2147483650.0)
        v497 = (int)v496;
      else
        v497 = 0x80000000;
    }
    else
    {
      v497 = 0x7FFFFFFF;
    }
    sprintf_3f((uint64_t)v463, v497, 2);
    v498 = (*v463)++;
    *v498 = 32;
    v499 = *v463;
    if (*v463 >= v463[3])
      v499 = v463[2];
    *v463 = v499 + 1;
    *v499 = 72;
    if (*v463 >= v463[3])
      *v463 = v463[2];
    sprintf_3d(v463, (int)fmin(*(double *)(v465 + 11576), 99.0));
    v500 = (*v463)++;
    *v500 = 32;
    v501 = *v463;
    if (*v463 >= v463[3])
      v501 = v463[2];
    *v463 = v501 + 1;
    *v501 = 86;
    if (*v463 >= v463[3])
      *v463 = v463[2];
    sprintf_3d(v463, (int)fmin(*(double *)(v465 + 11584), 99.0));
    v502 = (*v463)++;
    *v502 = 32;
    v503 = *v463;
    if (*v463 >= v463[3])
      v503 = v463[2];
    *v463 = v503 + 1;
    *v503 = 66;
    if (*v463 >= v463[3])
      *v463 = v463[2];
    sprintf_3d(v463, (int)fmin(*(double *)(v465 + 11592), 99.0));
    v504 = (*v463)++;
    *v504 = 32;
    v505 = *v463;
    if (*v463 >= v463[3])
      v505 = v463[2];
    *v463 = v505 + 1;
    *v505 = 83;
    if (*v463 >= v463[3])
      *v463 = v463[2];
    sprintf_3d(v463, (int)fmin(*(double *)(v465 + 11600), 99.0));
    v506 = (*v463)++;
    *v506 = 32;
    v507 = *v463;
    if (*v463 >= v463[3])
      v507 = v463[2];
    *v463 = v507 + 1;
    *v507 = 72;
    if (*v463 >= v463[3])
      *v463 = v463[2];
    sprintf_3d(v463, *(char *)(v465 + 11536));
    v508 = (*v463)++;
    *v508 = 32;
    v509 = *v463;
    if (*v463 >= v463[3])
      v509 = v463[2];
    *v463 = v509 + 1;
    *v509 = 86;
    if (*v463 >= v463[3])
      *v463 = v463[2];
    sprintf_3d(v463, *(char *)(v465 + 11537));
    v510 = (*v463)++;
    *v510 = 32;
    v511 = *v463;
    if (*v463 >= v463[3])
      v511 = v463[2];
    *v463 = v511 + 1;
    *v511 = 66;
    if (*v463 >= v463[3])
      *v463 = v463[2];
    sprintf_3d(v463, *(char *)(v465 + 11538));
    v512 = (*v463)++;
    *v512 = 32;
    v513 = *v463;
    if (*v463 >= v463[3])
      v513 = v463[2];
    *v463 = v513 + 1;
    *v513 = 83;
    if (*v463 >= v463[3])
      *v463 = v463[2];
    sprintf_3d(v463, *(char *)(v465 + 11539));
    v514 = (*v463)++;
    *v514 = 10;
    if (*v463 >= v463[3])
      *v463 = v463[2];
    GNSS_Nav_Debug_Flush_Check((uint64_t)v463);
    v463 = (char **)a1[46];
    if ((unsigned __int16)g_Enable_Nav_Debug >= 2u)
    {
      v515 = a1[7];
      v516 = a1[5];
      v517 = (_BYTE *)a1[9];
      v518 = *v463;
      v519 = 78;
      v520 = 1u;
      do
      {
        *v463 = v518 + 1;
        *v518 = v519;
        v518 = *v463;
        if (*v463 >= v463[3])
        {
          v518 = v463[2];
          *v463 = v518;
        }
        v519 = aNavm[v520++];
      }
      while (v520 != 7);
      if (v517[31])
      {
        v521 = 0;
        v522 = 0;
        v523 = 31;
        v524 = 208;
        do
        {
          if (*(_BYTE *)(*(_QWORD *)(v515 + 64) + v521))
            v525 = 65;
          else
            v525 = 45;
          if (*(_BYTE *)(*(_QWORD *)(v515 + 48) + v521) || *(_BYTE *)(*(_QWORD *)(v515 + 56) + v521))
            v525 += 24;
          if (!*(_BYTE *)(*(_QWORD *)v515 + v521))
            v525 += 32;
          if (v525 == 77)
            v525 = 46;
          if (*(_BYTE *)(*(_QWORD *)(v515 + 48) + v521))
            v526 = *(_BYTE *)(*(_QWORD *)v515 + v521) == 0;
          else
            v526 = 1;
          if (!v526 && *(_DWORD *)(v515 + v524) == 0xFFFFFF)
            v522 = v522 | (1 << v523);
          *v463 = v518 + 1;
          *v518 = v525;
          v518 = *v463;
          if (*v463 >= v463[3])
          {
            v518 = v463[2];
            *v463 = v518;
          }
          if ((~(_BYTE)v521 & 3) == 0)
          {
            *v463 = v518 + 1;
            *v518 = 32;
            v518 = *v463;
            if (*v463 >= v463[3])
            {
              v518 = v463[2];
              *v463 = v518;
            }
          }
          ++v521;
          --v523;
          v524 += 108;
        }
        while (v521 != 32);
        v527 = 32;
        v528 = 1u;
        do
        {
          *v463 = v518 + 1;
          *v518 = v527;
          v518 = *v463;
          if (*v463 >= v463[3])
          {
            v518 = v463[2];
            *v463 = v518;
          }
          v527 = asc_21E797912[v528++];
        }
        while (v528 != 8);
        for (jj = 0; jj != 32; ++jj)
        {
          v530 = 120;
          switch(*(_DWORD *)(v516 + 5420 + 4 * jj))
          {
            case 0:
              v530 = 77;
              break;
            case 1:
              v530 = 86;
              break;
            case 2:
              v530 = 110;
              break;
            case 3:
              break;
            default:
              EvCrt_Illegal_Default("print_line_NavM", 0x66Fu);
              v518 = *v463;
              v530 = 120;
              break;
          }
          *v463 = v518 + 1;
          *v518 = v530;
          v518 = *v463;
          if (*v463 >= v463[3])
          {
            v518 = v463[2];
            *v463 = v518;
          }
          if ((~(_BYTE)jj & 3) == 0)
          {
            *v463 = v518 + 1;
            *v518 = 32;
            v518 = *v463;
            if (*v463 >= v463[3])
            {
              v518 = v463[2];
              *v463 = v518;
            }
          }
        }
        v531 = 0;
        v532 = 32;
        do
        {
          *v463 = v518 + 1;
          *v518 = v532;
          v518 = *v463;
          if (*v463 >= v463[3])
          {
            v518 = v463[2];
            *v463 = v518;
          }
          v532 = asc_21E79792A[++v531];
        }
        while (v531 != 8);
        LOBYTE(v1571[0]) = hexTABLE[(unint64_t)v522 >> 28];
        BYTE1(v1571[0]) = hexTABLE[(v522 >> 24) & 0xF];
        hex6((uint64_t)v463, v522, v1571, 2);
        sprintf_sp1d(v463, *(_DWORD *)(v515 + 8428));
        sprintf_sp1d(v463, *(_DWORD *)(v515 + 8444));
        v518 = *v463;
      }
      else
      {
        v533 = 71;
        v534 = 1u;
        do
        {
          *v463 = v518 + 1;
          *v518 = v533;
          v518 = *v463;
          if (*v463 >= v463[3])
          {
            v518 = v463[2];
            *v463 = v518;
          }
          v533 = aGpsDisabled[v534++];
        }
        while (v534 != 15);
      }
      v535 = 32;
      v536 = 1u;
      do
      {
        *v463 = v518 + 1;
        *v518 = v535;
        v518 = *v463;
        if (*v463 >= v463[3])
        {
          v518 = v463[2];
          *v463 = v518;
        }
        v535 = aQzss[v536++];
      }
      while (v536 != 8);
      if (v517[33])
      {
        v537 = 0;
        v538 = 0;
        v539 = (_DWORD *)(v515 + 8712);
        v540 = 9;
        do
        {
          if (*(_BYTE *)(*(_QWORD *)(v515 + 8568) + v537))
            v541 = 65;
          else
            v541 = 45;
          if (*(_BYTE *)(*(_QWORD *)(v515 + 8552) + v537) || *(_BYTE *)(*(_QWORD *)(v515 + 8560) + v537))
            v541 += 24;
          if (!*(_BYTE *)(*(_QWORD *)(v515 + 8504) + v537))
            v541 += 32;
          if (v541 == 77)
            v541 = 46;
          if (*(_BYTE *)(*(_QWORD *)(v515 + 8552) + v537))
            v542 = *(_BYTE *)(*(_QWORD *)(v515 + 8504) + v537) == 0;
          else
            v542 = 1;
          if (!v542)
          {
            if (*v539 == 0xFFFFFF)
              v538 = v538 | (1 << v540);
            else
              v538 = v538;
          }
          *v463 = v518 + 1;
          *v518 = v541;
          v518 = *v463;
          if (*v463 >= v463[3])
          {
            v518 = v463[2];
            *v463 = v518;
          }
          ++v537;
          --v540;
          v539 += 27;
        }
        while (v537 != 10);
        *v463 = v518 + 1;
        *v518 = 32;
        v543 = *v463;
        if (*v463 >= v463[3])
        {
          v543 = v463[2];
          *v463 = v543;
        }
        for (kk = 0; kk != 40; kk += 4)
        {
          v545 = 120;
          switch(*(_DWORD *)(v516 + 5936 + kk))
          {
            case 0:
              v545 = 77;
              break;
            case 1:
              v545 = 86;
              break;
            case 2:
              v545 = 110;
              break;
            case 3:
              break;
            default:
              EvCrt_Illegal_Default("print_line_NavM", 0x6A5u);
              v543 = *v463;
              v545 = 120;
              break;
          }
          *v463 = v543 + 1;
          *v543 = v545;
          v543 = *v463;
          if (*v463 >= v463[3])
          {
            v543 = v463[2];
            *v463 = v543;
          }
        }
        *v463 = v543 + 1;
        *v543 = 32;
        if (*v463 >= v463[3])
          *v463 = v463[2];
        sprintf_02x(v463, v538);
        v518 = *v463;
      }
      else
      {
        v546 = 68;
        v547 = 1u;
        do
        {
          *v463 = v518 + 1;
          *v518 = v546;
          v518 = *v463;
          if (*v463 >= v463[3])
          {
            v518 = v463[2];
            *v463 = v518;
          }
          v546 = aDisabled[v547++];
        }
        while (v547 != 11);
      }
      v548 = 32;
      v549 = 1u;
      do
      {
        *v463 = v518 + 1;
        *v518 = v548;
        v518 = *v463;
        if (*v463 >= v463[3])
        {
          v518 = v463[2];
          *v463 = v518;
        }
        v548 = aSbas[v549++];
      }
      while (v549 != 8);
      if (v517[34])
      {
        v550 = 0;
        v464 = &qword_21E7F9000;
        do
        {
          v551 = *(unsigned __int8 *)(v516 + 6316 + v550);
          if (v551 >= 3)
            v552 = 90;
          else
            v552 = 0x41452Du >> (8 * v551);
          *v463 = v518 + 1;
          *v518 = v552;
          v518 = *v463;
          if (*v463 >= v463[3])
          {
            v518 = v463[2];
            *v463 = v518;
          }
          ++v550;
        }
        while (v550 != 39);
        sprintf_sp1d(v463, *(unsigned __int8 *)(v516 + 6355));
        sprintf_sp1d(v463, *(unsigned __int8 *)(v516 + 6356));
        v518 = *v463;
      }
      else
      {
        v553 = 68;
        v554 = 1u;
        v464 = &qword_21E7F9000;
        do
        {
          *v463 = v518 + 1;
          *v518 = v553;
          v518 = *v463;
          if (*v463 >= v463[3])
          {
            v518 = v463[2];
            *v463 = v518;
          }
          v553 = aDisabled_0[v554++];
        }
        while (v554 != 10);
      }
      *v463 = v518 + 1;
      *v518 = 10;
      if (*v463 >= v463[3])
        *v463 = v463[2];
      GNSS_Nav_Debug_Flush_Check((uint64_t)v463);
      v463 = (char **)a1[46];
      if ((unsigned __int16)g_Enable_Nav_Debug > 1u)
      {
        v555 = a1[9];
        v556 = a1[7];
        v557 = 71;
        v558 = a1[5];
        v559 = 1u;
        v560 = *v463;
        do
        {
          *v463 = v560 + 1;
          *v560 = v557;
          v560 = *v463;
          if (*v463 >= v463[3])
          {
            v560 = v463[2];
            *v463 = v560;
          }
          v557 = aGlom[v559++];
        }
        while (v559 != 7);
        if (*(_BYTE *)(v555 + 32))
        {
          v561 = 0;
          v562 = 0;
          v563 = (_WORD *)(v556 + 11284);
          v564 = 23;
          do
          {
            if (*(_BYTE *)(*(_QWORD *)(v556 + 16288) + v561))
              v565 = 65;
            else
              v565 = 45;
            if (*(_BYTE *)(*(_QWORD *)(v556 + 16272) + v561) || *(_BYTE *)(*(_QWORD *)(v556 + 16280) + v561))
              v565 += 24;
            if (!*(_BYTE *)(*(_QWORD *)(v556 + 11208) + v561))
              v565 += 32;
            if (v565 == 77)
              v565 = 46;
            if (*(_BYTE *)(*(_QWORD *)(v556 + 16272) + v561))
              v566 = *(_BYTE *)(*(_QWORD *)(v556 + 11208) + v561) == 0;
            else
              v566 = 1;
            if (!v566)
            {
              if (*v563 == 4095)
                v562 = v562 | (1 << v564);
              else
                v562 = v562;
            }
            *v463 = v560 + 1;
            *v560 = v565;
            v560 = *v463;
            if (*v463 >= v463[3])
            {
              v560 = v463[2];
              *v463 = v560;
            }
            if ((~(_BYTE)v561 & 3) == 0)
            {
              *v463 = v560 + 1;
              *v560 = 32;
              v560 = *v463;
              if (*v463 >= v463[3])
              {
                v560 = v463[2];
                *v463 = v560;
              }
            }
            ++v561;
            --v564;
            v563 += 32;
          }
          while (v561 != 24);
          v567 = 32;
          v568 = 1u;
          do
          {
            *v463 = v560 + 1;
            *v560 = v567;
            v560 = *v463;
            if (*v463 >= v463[3])
            {
              v560 = v463[2];
              *v463 = v560;
            }
            v567 = asc_21E79795F[v568++];
          }
          while (v568 != 18);
          for (mm = 0; mm != 24; ++mm)
          {
            v570 = 120;
            switch(*(_DWORD *)(v558 + 5548 + 4 * mm))
            {
              case 0:
                v570 = 77;
                break;
              case 1:
                v570 = 86;
                break;
              case 2:
                v570 = 110;
                break;
              case 3:
                break;
              default:
                EvCrt_Illegal_Default("print_line_GloM", 0x70Eu);
                v560 = *v463;
                v570 = 120;
                break;
            }
            *v463 = v560 + 1;
            *v560 = v570;
            v560 = *v463;
            if (*v463 >= v463[3])
            {
              v560 = v463[2];
              *v463 = v560;
            }
            if ((~((_BYTE)mm + 32) & 3) == 0)
            {
              *v463 = v560 + 1;
              *v560 = 32;
              v560 = *v463;
              if (*v463 >= v463[3])
              {
                v560 = v463[2];
                *v463 = v560;
              }
            }
          }
          for (nn = 0; nn != 14; ++nn)
          {
            v572 = 120;
            switch(*(_DWORD *)(v558 + 6140 + 4 * nn))
            {
              case 0:
                v572 = 77;
                break;
              case 1:
                v572 = 86;
                break;
              case 2:
                v572 = 110;
                break;
              case 3:
                break;
              default:
                EvCrt_Illegal_Default("print_line_GloM", 0x71Du);
                v560 = *v463;
                v572 = 120;
                break;
            }
            *v463 = v560 + 1;
            *v560 = v572;
            v560 = *v463;
            if (*v463 >= v463[3])
            {
              v560 = v463[2];
              *v463 = v560;
            }
            if ((~(_BYTE)nn & 3) == 0)
            {
              *v463 = v560 + 1;
              *v560 = 32;
              v560 = *v463;
              if (*v463 >= v463[3])
              {
                v560 = v463[2];
                *v463 = v560;
              }
            }
          }
          *v463 = v560 + 1;
          *v560 = 32;
          if (*v463 >= v463[3])
            *v463 = v463[2];
          sprintf_06x(v463, v562);
          v573 = *v463;
          v574 = 9;
          v464 = &qword_21E7F9000;
          do
          {
            *v463 = v573 + 1;
            *v573 = 32;
            v573 = *v463;
            if (*v463 >= v463[3])
            {
              v573 = v463[2];
              *v463 = v573;
            }
            --v574;
          }
          while (v574 > 1);
          sprintf_sgR8(v463, (double)*(int *)(v556 + 16236) * 9.31322575e-10 * 299792458.0);
          v575 = (*v463)++;
          *v575 = 10;
          if (*v463 >= v463[3])
            *v463 = v463[2];
          GNSS_Nav_Debug_Flush_Check((uint64_t)v463);
        }
        else
        {
          v576 = 68;
          v577 = 1u;
          do
          {
            *v463 = v560 + 1;
            *v560 = v576;
            v560 = *v463;
            if (*v463 >= v463[3])
            {
              v560 = v463[2];
              *v463 = v560;
            }
            v576 = aDisabled_0[v577++];
          }
          while (v577 != 10);
          *v463 = v560 + 1;
          *v560 = 10;
          if (*v463 >= v463[3])
            *v463 = v463[2];
        }
        v578 = (unsigned __int16 *)&unk_25400F000;
        if ((unsigned __int16)g_Enable_Nav_Debug >= 2u)
        {
          v579 = (char **)a1[46];
          v580 = a1[6];
          v581 = a1[7];
          v582 = a1[5];
          v1539 = a1[29];
          v583 = a1[9];
          v584 = *v579;
          v585 = 71;
          v586 = 1u;
          do
          {
            *v579 = v584 + 1;
            *v584 = v585;
            v584 = *v579;
            if (*v579 >= v579[3])
            {
              v584 = v579[2];
              *v579 = v584;
            }
            v585 = aGalm[v586++];
          }
          while (v586 != 7);
          if (*(_BYTE *)(v583 + 36))
          {
            v587 = 0;
            v588 = 0;
            v589 = 35;
            while (1)
            {
              if (*(_BYTE *)(*(_QWORD *)(v581 + 16624) + v587))
                v590 = 65;
              else
                v590 = 45;
              if (*(_BYTE *)(*(_QWORD *)(v581 + 16608) + v587) || *(_BYTE *)(*(_QWORD *)(v581 + 16616) + v587))
                v590 += 24;
              if (!*(_BYTE *)(*(_QWORD *)(v581 + 16560) + v587))
                v590 += 32;
              if (v590 == 77)
              {
                v590 = 46;
              }
              else if (*(_BYTE *)(v581 + 16700 + v587))
              {
                if (!*(_BYTE *)(*(_QWORD *)(v581 + 16608) + v587))
                {
                  if (*(_BYTE *)(*(_QWORD *)(v581 + 16616) + v587))
                    v590 = 77;
                  else
                    v590 = 109;
                  goto LABEL_1083;
                }
                v590 = 77;
LABEL_1080:
                if (*(_BYTE *)(*(_QWORD *)(v581 + 16560) + v587))
                  v588 = v588 | (1 << v589);
                else
                  v588 = v588;
                goto LABEL_1083;
              }
              if (*(_BYTE *)(*(_QWORD *)(v581 + 16608) + v587))
                goto LABEL_1080;
LABEL_1083:
              *v579 = v584 + 1;
              *v584 = v590;
              v584 = *v579;
              if (*v579 >= v579[3])
              {
                v584 = v579[2];
                *v579 = v584;
              }
              if ((~(_BYTE)v587 & 3) == 0)
              {
                *v579 = v584 + 1;
                *v584 = 32;
                v584 = *v579;
                if (*v579 >= v579[3])
                {
                  v584 = v579[2];
                  *v579 = v584;
                }
              }
              ++v587;
              --v589;
              if (v587 == 36)
              {
                v591 = 0;
                v592 = 32;
                do
                {
                  *v579 = v584 + 1;
                  *v584 = v592;
                  v584 = *v579;
                  if (*v579 >= v579[3])
                  {
                    v584 = v579[2];
                    *v579 = v584;
                  }
                  v592 = asc_21E797762[++v591];
                }
                while (v591 != 2);
                v593 = 0;
                v594 = v582 + 5644;
                do
                {
                  v595 = 120;
                  switch(*(_DWORD *)(v594 + 4 * v593))
                  {
                    case 0:
                      v595 = 77;
                      break;
                    case 1:
                      v595 = 86;
                      break;
                    case 2:
                      v595 = 110;
                      break;
                    case 3:
                      break;
                    default:
                      EvCrt_Illegal_Default("print_line_GALM", 0x787u);
                      v584 = *v579;
                      v595 = 120;
                      break;
                  }
                  *v579 = v584 + 1;
                  *v584 = v595;
                  v584 = *v579;
                  if (*v579 >= v579[3])
                  {
                    v584 = v579[2];
                    *v579 = v584;
                  }
                  if ((~((_BYTE)v593 + 56) & 3) == 0)
                  {
                    *v579 = v584 + 1;
                    *v584 = 32;
                    v584 = *v579;
                    if (*v579 >= v579[3])
                    {
                      v584 = v579[2];
                      *v579 = v584;
                    }
                  }
                  ++v593;
                }
                while (v593 != 36);
                v596 = 32;
                v597 = 1u;
                v464 = &qword_21E7F9000;
                do
                {
                  *v579 = v584 + 1;
                  *v584 = v596;
                  v584 = *v579;
                  if (*v579 >= v579[3])
                  {
                    v584 = v579[2];
                    *v579 = v584;
                  }
                  v596 = asc_21E7979A7[v597++];
                }
                while (v597 != 4);
                LOBYTE(v1571[0]) = hexTABLE[(unint64_t)v588 >> 28];
                BYTE1(v1571[0]) = hexTABLE[(v588 >> 24) & 0xF];
                hex6((uint64_t)v579, v588, v1571, 2);
                sprintf_sp1d(v579, *(_DWORD *)(v581 + 24372));
                v598 = 0.0;
                if ((*(_DWORD *)(v581 + 24372) - 2) <= 4)
                {
                  v598 = *(double *)(v581 + 24392);
                  if (*(int *)v580 >= 1)
                  {
                    if (*(_BYTE *)(v580 + 5))
                      v598 = *(double *)(v1539 + 608);
                  }
                }
                sprintf_sgR8(v579, v598 * 299792458.0);
                v599 = (*v579)++;
                *v599 = 10;
                if (*v579 >= v579[3])
                  *v579 = v579[2];
                GNSS_Nav_Debug_Flush_Check((uint64_t)v579);
                v578 = (_WORD *)&unk_25400F000;
                goto LABEL_1125;
              }
            }
          }
          v600 = 71;
          v601 = 1u;
          do
          {
            *v579 = v584 + 1;
            *v584 = v600;
            v584 = *v579;
            if (*v579 >= v579[3])
            {
              v584 = v579[2];
              *v579 = v584;
            }
            v600 = aGalDisabled[v601++];
          }
          while (v601 != 15);
          *v579 = v584 + 1;
          *v584 = 10;
          v578 = (unsigned __int16 *)&unk_25400F000;
          if (*v579 >= v579[3])
            *v579 = v579[2];
        }
LABEL_1125:
        if (v578[1212] >= 2u)
        {
          v602 = (char **)a1[46];
          v604 = a1[6];
          v603 = (_QWORD *)a1[7];
          v605 = v603 + 3077;
          v606 = a1[5];
          v607 = a1[9];
          v608 = *v602;
          v609 = 66;
          v610 = 1u;
          do
          {
            *v602 = v608 + 1;
            *v608 = v609;
            v608 = *v602;
            if (*v602 >= v602[3])
            {
              v608 = v602[2];
              *v602 = v608;
            }
            v609 = aBdsm[v610++];
          }
          while (v610 != 7);
          if (*(_BYTE *)(v607 + 35))
          {
            v1540 = (__int16 *)v603 + 16778;
            v611 = 0;
            v612 = 0;
            v613 = 36;
            v614 = v603 + 3077;
            do
            {
              if (v611 < 5)
                v615 = -1;
              else
                v615 = 0x7FFFFFF;
              if (*(_BYTE *)(v603[3060] + v611))
                v616 = 65;
              else
                v616 = 45;
              if (*(_BYTE *)(v603[3058] + v611) || *(_BYTE *)(v603[3059] + v611))
                v616 += 24;
              if (!*(_BYTE *)(v603[3052] + v611))
                v616 += 32;
              if (v616 == 77)
                v616 = 46;
              if (*(_BYTE *)(v603[3058] + v611))
                v617 = *(_BYTE *)(v603[3052] + v611) == 0;
              else
                v617 = 1;
              if (!v617 && *v614 == v615)
                v612 = v612 | (1 << v613);
              *v602 = v608 + 1;
              *v608 = v616;
              v608 = *v602;
              if (*v602 >= v602[3])
              {
                v608 = v602[2];
                *v602 = v608;
              }
              if ((~(_BYTE)v611 & 3) == 0)
              {
                *v602 = v608 + 1;
                *v608 = 32;
                v608 = *v602;
                if (*v602 >= v602[3])
                {
                  v608 = v602[2];
                  *v602 = v608;
                }
              }
              ++v611;
              --v613;
              v614 += 25;
            }
            while (v611 != 37);
            *v602 = v608 + 1;
            *v608 = 32;
            v618 = *v602;
            if (*v602 >= v602[3])
            {
              v618 = v602[2];
              *v602 = v618;
            }
            v619 = 0;
            v620 = v606 + 5788;
            do
            {
              v621 = 120;
              switch(*(_DWORD *)(v620 + 4 * v619))
              {
                case 0:
                  v621 = 77;
                  break;
                case 1:
                  v621 = 86;
                  break;
                case 2:
                  v621 = 110;
                  break;
                case 3:
                  break;
                default:
                  EvCrt_Illegal_Default("print_line_BDSM", 0x7F3u);
                  v618 = *v602;
                  v621 = 120;
                  break;
              }
              *v602 = v618 + 1;
              *v618 = v621;
              v618 = *v602;
              if (*v602 >= v602[3])
              {
                v618 = v602[2];
                *v602 = v618;
              }
              if ((~((_BYTE)v619 + 92) & 3) == 0)
              {
                *v602 = v618 + 1;
                *v618 = 32;
                v618 = *v602;
                if (*v602 >= v602[3])
                {
                  v618 = v602[2];
                  *v602 = v618;
                }
              }
              ++v619;
            }
            while (v619 != 37);
            *v602 = v618 + 1;
            *v618 = 32;
            v622 = *v602;
            if (*v602 >= v602[3])
              v622 = v602[2];
            *v602 = v622 + 1;
            *v622 = 32;
            v464 = &qword_21E7F9000;
            if (*v602 >= v602[3])
              *v602 = v602[2];
            LOBYTE(v1571[0]) = hexTABLE[(unint64_t)v612 >> 28];
            BYTE1(v1571[0]) = hexTABLE[(v612 >> 24) & 0xF];
            hex6((uint64_t)v602, v612, v1571, 2);
            sprintf_sp1d(v602, *((_DWORD *)v605 + 2234));
            v623 = 0.0;
            if ((*((_DWORD *)v605 + 2234) - 2) <= 4)
            {
              v623 = (double)*v1540 * 0.1;
              if (*(int *)v604 >= 1)
              {
                v624 = *(double *)(v604 + 24) + -14.0;
                if (v624 < 0.0)
                  v624 = v624 + 604800.0;
                v623 = v623 + (double)v1540[1] * 0.1 * v624;
              }
            }
            sprintf_sgR8(v602, v623 * 0.299792458);
            v625 = (*v602)++;
            *v625 = 10;
            if (*v602 >= v602[3])
              *v602 = v602[2];
            GNSS_Nav_Debug_Flush_Check((uint64_t)v602);
            v578 = (_WORD *)&unk_25400F000;
          }
          else
          {
            v626 = 66;
            v627 = 1u;
            do
            {
              *v602 = v608 + 1;
              *v608 = v626;
              v608 = *v602;
              if (*v602 >= v602[3])
              {
                v608 = v602[2];
                *v602 = v608;
              }
              v626 = aBdsDisabled[v627++];
            }
            while (v627 != 15);
            *v602 = v608 + 1;
            *v608 = 10;
            v578 = (unsigned __int16 *)&unk_25400F000;
            if (*v602 >= v602[3])
              *v602 = v602[2];
          }
        }
        v463 = (char **)a1[46];
        if (v578[1212] >= 2u)
        {
          v628 = a1[12];
          v629 = a1[6];
          v630 = 83;
          v631 = 1u;
          v632 = *v463;
          do
          {
            *v463 = v632 + 1;
            *v632 = v630;
            v632 = *v463;
            if (*v463 >= v463[3])
            {
              v632 = v463[2];
              *v463 = v632;
            }
            v630 = aStage[v631++];
          }
          while (v631 != 7);
          v633 = v628 + 160;
          v634 = 149;
          do
          {
            if (*(_DWORD *)(v633 + 24))
            {
              v635 = (int)*(double *)(v629 + 24)
                   - *(_DWORD *)v633
                   + 604800 * (*(__int16 *)(v629 + 16) - *(__int16 *)(v633 + 4));
              if (v635 >= 99)
                v635 = 99;
              if (v635 <= -99)
                v636 = -99;
              else
                v636 = v635;
              sprintf_sp1d(v463, v636);
            }
            v633 += 192;
            --v634;
          }
          while (v634);
          v637 = (*v463)++;
          *v637 = 10;
          if (*v463 >= v463[3])
            *v463 = v463[2];
          GNSS_Nav_Debug_Flush_Check((uint64_t)v463);
          v463 = (char **)a1[46];
        }
      }
    }
  }
  v638 = (unsigned __int8 *)a1[10];
  v639 = (double *)a1[29];
  v640 = 65;
  v641 = a1[40];
  v642 = 1u;
  v643 = *v463;
  do
  {
    *v463 = v643 + 1;
    *v643 = v640;
    v643 = *v463;
    if (*v463 >= v463[3])
    {
      v643 = v463[2];
      *v463 = v643;
    }
    v640 = aAcc[v642++];
  }
  while (v642 != 6);
  sprintf_2d(v463, *((_DWORD *)v638 + 1));
  sprintf_2d(v463, *((_DWORD *)v638 + 2));
  sprintf_2d(v463, *v638);
  sprintf_2d(v463, v638[1]);
  v644 = (*v463)++;
  *v644 = 32;
  if (*v463 >= v463[3])
    *v463 = v463[2];
  sprintf_ACC(v463, *((double *)v638 + 102));
  v645 = (*v463)++;
  *v645 = 32;
  if (*v463 >= v463[3])
    *v463 = v463[2];
  sprintf_ACC(v463, *((double *)v638 + 103));
  v646 = (*v463)++;
  *v646 = 32;
  if (*v463 >= v463[3])
    *v463 = v463[2];
  sprintf_ACC(v463, *((double *)v638 + 104));
  v647 = (*v463)++;
  *v647 = 32;
  v648 = *v463;
  if (*v463 >= v463[3])
  {
    v648 = v463[2];
    *v463 = v648;
  }
  v649 = *((double *)v638 + 106);
  v1529 = *((double *)v464 + 1);
  if (v649 <= v1529 || v649 >= 8999100.0)
  {
    sprintf_ACC(v463, v649);
  }
  else
  {
    v650 = v649 / 299792.458;
    if (v650 <= 9999.0)
    {
      if (v650 <= 9.9)
      {
        v887 = v650 * -100.0;
        v888 = -0.5;
        if (v887 > 0.0)
          v888 = 0.5;
        v889 = v887 + v888;
        if (v889 <= 2147483650.0)
        {
          if (v889 >= -2147483650.0)
            v890 = (int)v889;
          else
            v890 = 0x80000000;
        }
        else
        {
          v890 = 0x7FFFFFFF;
        }
        sprintf_4f((uint64_t)v463, v890, 3);
      }
      else
      {
        v884 = -0.5;
        if (v650 < 0.0)
          v884 = 0.5;
        v885 = v884 - v650;
        if (v885 <= 2147483650.0)
        {
          if (v885 >= -2147483650.0)
            v886 = (int)v885;
          else
            v886 = 0x80000000;
        }
        else
        {
          v886 = 0x7FFFFFFF;
        }
        sprintf_5d(v463, v886);
      }
    }
    else
    {
      v651 = 45;
      v652 = 1u;
      do
      {
        *v463 = v648 + 1;
        *v648 = v651;
        v648 = *v463;
        if (*v463 >= v463[3])
        {
          v648 = v463[2];
          *v463 = v648;
        }
        v651 = a9999[v652++];
      }
      while (v652 != 6);
    }
  }
  v653 = (*v463)++;
  *v653 = 32;
  if (*v463 >= v463[3])
    *v463 = v463[2];
  sprintf_ACC(v463, *((double *)v638 + 105));
  v654 = (*v463)++;
  *v654 = 32;
  if (*v463 >= v463[3])
    *v463 = v463[2];
  sprintf_ACC(v463, *((double *)v638 + 109));
  v655 = (*v463)++;
  *v655 = 32;
  if (*v463 >= v463[3])
    *v463 = v463[2];
  sprintf_ACC(v463, *((double *)v638 + 111));
  v656 = (*v463)++;
  *v656 = 32;
  if (*v463 >= v463[3])
    *v463 = v463[2];
  v657 = *((double *)v638 + 95) * 100.0;
  if (v657 <= 0.0)
    v658 = -0.5;
  else
    v658 = 0.5;
  v659 = v657 + v658;
  if (v659 <= 2147483650.0)
  {
    if (v659 >= -2147483650.0)
      v660 = (int)v659;
    else
      v660 = 0x80000000;
  }
  else
  {
    v660 = 0x7FFFFFFF;
  }
  sprintf_6f((uint64_t)v463, v660, 3);
  v661 = *((double *)v638 + 96) * 100.0;
  if (v661 <= 0.0)
    v662 = -0.5;
  else
    v662 = 0.5;
  v663 = v661 + v662;
  if (v663 <= 2147483650.0)
  {
    if (v663 >= -2147483650.0)
      v664 = (int)v663;
    else
      v664 = 0x80000000;
  }
  else
  {
    v664 = 0x7FFFFFFF;
  }
  sprintf_6f((uint64_t)v463, v664, 3);
  v665 = *((double *)v638 + 97) * 100.0;
  v666 = -0.5;
  if (v665 > 0.0)
    v666 = 0.5;
  v667 = v665 + v666;
  if (v667 <= 2147483650.0)
  {
    if (v667 >= -2147483650.0)
      v668 = (int)v667;
    else
      v668 = 0x80000000;
  }
  else
  {
    v668 = 0x7FFFFFFF;
  }
  sprintf_6f((uint64_t)v463, v668, 3);
  v669 = (*v463)++;
  *v669 = 32;
  if (*v463 >= v463[3])
    *v463 = v463[2];
  sprintf_ACC(v463, *((double *)v638 + 110));
  v670 = 0;
  v671 = *v463;
  v672 = 32;
  do
  {
    *v463 = v671 + 1;
    *v671 = v672;
    v671 = *v463;
    if (*v463 >= v463[3])
    {
      v671 = v463[2];
      *v463 = v671;
    }
    v672 = aEl[++v670];
  }
  while (v670 != 4);
  sprintf_ACC(v463, *((double *)v638 + 112));
  v673 = (*v463)++;
  *v673 = 32;
  if (*v463 >= v463[3])
    *v463 = v463[2];
  sprintf_ACC(v463, *((double *)v638 + 113));
  v674 = (*v463)++;
  *v674 = 32;
  if (*v463 >= v463[3])
    *v463 = v463[2];
  sprintf_ACC(v463, *((double *)v638 + 114));
  v675 = *v463;
  for (i1 = 5; i1 > 1; --i1)
  {
    *v463 = v675 + 1;
    *v675 = 32;
    v675 = *v463;
    if (*v463 >= v463[3])
    {
      v675 = v463[2];
      *v463 = v675;
    }
  }
  sprintf_ACC(v463, *((double *)v638 + 107));
  v677 = (*v463)++;
  *v677 = 32;
  if (*v463 >= v463[3])
    *v463 = v463[2];
  sprintf_ACC(v463, *((double *)v638 + 108));
  v678 = (*v463)++;
  *v678 = 32;
  if (*v463 >= v463[3])
    *v463 = v463[2];
  sprintf_ACC(v463, v639[3056]);
  v679 = (*v463)++;
  *v679 = 32;
  if (*v463 >= v463[3])
    *v463 = v463[2];
  sprintf_ACC(v463, v639[3057]);
  v680 = (*v463)++;
  *v680 = 32;
  if (*v463 >= v463[3])
    *v463 = v463[2];
  sprintf_ACC(v463, v639[3058]);
  v681 = (*v463)++;
  *v681 = 32;
  if (*v463 >= v463[3])
    *v463 = v463[2];
  sprintf_ACC(v463, v639[3059]);
  v682 = (*v463)++;
  *v682 = 32;
  if (*v463 >= v463[3])
    *v463 = v463[2];
  sprintf_ACC(v463, v639[3060]);
  v683 = (*v463)++;
  *v683 = 32;
  if (*v463 >= v463[3])
    *v463 = v463[2];
  sprintf_ACC(v463, v639[3061]);
  v684 = 0;
  v685 = *v463;
  v686 = 32;
  do
  {
    *v463 = v685 + 1;
    *v685 = v686;
    v685 = *v463;
    if (*v463 >= v463[3])
    {
      v685 = v463[2];
      *v463 = v685;
    }
    v686 = aNv[++v684];
  }
  while (v684 != 4);
  v687 = (unsigned int *)(v641 + 22132);
  v688 = 10;
  do
  {
    if (*v687 && (int)*(v687 - 1) >= 1)
      sprintf_4d(v463, *v687);
    v687 += 8;
    --v688;
  }
  while (v688);
  v689 = (*v463)++;
  *v689 = 10;
  if (*v463 >= v463[3])
    *v463 = v463[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v463);
  v690 = (char **)a1[46];
  v691 = a1[29];
  v692 = (unsigned __int8 *)(v691 + 25052);
  v693 = *v690;
  v694 = 69;
  v695 = 1u;
  do
  {
    *v690 = v693 + 1;
    *v693 = v694;
    v693 = *v690;
    if (*v690 >= v690[3])
    {
      v693 = v690[2];
      *v690 = v693;
    }
    v694 = aExtp[v695++];
  }
  while (v695 != 7);
  Char_Ass_Status_Edit = Get_Char_Ass_Status_Edit(*(_DWORD *)(v691 + 25024));
  v697 = (*v690)++;
  *v697 = Char_Ass_Status_Edit;
  if (*v690 >= v690[3])
    *v690 = v690[2];
  v698 = Get_Char_Ass_Status_Edit(*(_DWORD *)(v691 + 25040));
  v699 = (*v690)++;
  *v699 = v698;
  v700 = *v690;
  if (*v690 >= v690[3])
    v700 = v690[2];
  *v690 = v700 + 1;
  *v700 = 32;
  v701 = *v690;
  if (*v690 >= v690[3])
  {
    v701 = v690[2];
    *v690 = v701;
  }
  if (*(_BYTE *)(v691 + 22992) || *(_BYTE *)(v691 + 23008))
  {
    v702 = 0;
    v703 = 72;
    do
    {
      *v690 = v701 + 1;
      *v701 = v703;
      v701 = *v690;
      if (*v690 >= v690[3])
      {
        v701 = v690[2];
        *v690 = v701;
      }
      v703 = aHor[++v702];
    }
    while (v702 != 4);
    v704 = print_line_ExtP(s_GN_Ptrs *)::ch_MEAS[*(unsigned int *)(v691 + 22996)];
    *v690 = v701 + 1;
    *v701 = v704;
    v705 = *v690;
    if (*v690 >= v690[3])
      v705 = v690[2];
    v706 = 0;
    v707 = 32;
    do
    {
      *v690 = v705 + 1;
      *v705 = v707;
      v705 = *v690;
      if (*v690 >= v690[3])
      {
        v705 = v690[2];
        *v690 = v705;
      }
      v707 = aT[++v706];
    }
    while (v706 != 4);
    v708 = print_line_ExtP(s_GN_Ptrs *)::ch_TRUST[*(unsigned int *)(v691 + 23000)];
    *v690 = v705 + 1;
    *v705 = v708;
    v709 = *v690;
    if (*v690 >= v690[3])
      v709 = v690[2];
    v710 = 0;
    v711 = 32;
    do
    {
      *v690 = v709 + 1;
      *v709 = v711;
      v709 = *v690;
      if (*v690 >= v690[3])
      {
        v709 = v690[2];
        *v690 = v709;
      }
      v711 = aC[++v710];
    }
    while (v710 != 4);
    v712 = print_line_ExtP(s_GN_Ptrs *)::ch_CORREL[*(unsigned int *)(v691 + 23004)];
    *v690 = v709 + 1;
    *v709 = v712;
    v713 = *v690;
    if (*v690 >= v690[3])
      v713 = v690[2];
    v714 = 0;
    v715 = 32;
    do
    {
      *v690 = v713 + 1;
      *v713 = v715;
      v713 = *v690;
      if (*v690 >= v690[3])
      {
        v713 = v690[2];
        *v690 = v713;
      }
      v715 = aE[++v714];
    }
    while (v714 != 4);
    if (*(_BYTE *)(v691 + 23008))
    {
      LOBYTE(v716) = 49;
      strcpy((char *)v1571, "1");
      v717 = 1;
      do
      {
        *v690 = v713 + 1;
        *v713 = v716;
        v713 = *v690;
        if (*v690 >= v690[3])
        {
          v713 = v690[2];
          *v690 = v713;
        }
        v716 = *((unsigned __int8 *)v1571 + v717++);
      }
      while (v716);
    }
    else
    {
      *v690 = v713 + 1;
      *v713 = 45;
      v713 = *v690;
      if (*v690 >= v690[3])
        v713 = v690[2];
    }
    for (i2 = 4; i2 > 1; --i2)
    {
      *v690 = v713 + 1;
      *v713 = 32;
      v713 = *v690;
      if (*v690 >= v690[3])
      {
        v713 = v690[2];
        *v690 = v713;
      }
    }
    v719 = *(_DWORD *)v691 - *(_DWORD *)(v691 + 23012);
    if (v719 >= -999999)
    {
      if (v719 <= 999999)
        v720 = v719 / 1000;
      else
        v720 = 9999;
    }
    else
    {
      v720 = -9999;
    }
    sprintf_4d(v690, v720);
    v721 = (*v690)++;
    *v721 = 32;
    if (*v690 >= v690[3])
      *v690 = v690[2];
    sprintf_ACC(v690, sqrt(*(double *)(v691 + 23040)));
    v722 = (*v690)++;
    *v722 = 32;
    if (*v690 >= v690[3])
      *v690 = v690[2];
    sprintf_ACC(v690, sqrt(*(double *)(v691 + 23048)));
    v723 = (*v690)++;
    *v723 = 32;
    if (*v690 >= v690[3])
      *v690 = v690[2];
    sprintf_ACC(v690, sqrt(*(double *)(v691 + 23064)));
    v724 = (*v690)++;
    *v724 = 32;
    if (*v690 >= v690[3])
      *v690 = v690[2];
    sprintf_ACC(v690, sqrt(*(double *)(v691 + 23072)));
    v725 = (*v690)++;
    *v725 = 32;
    if (*v690 >= v690[3])
      *v690 = v690[2];
    sprintf_sgR8(v690, *(double *)(v691 + 23080));
    v726 = (*v690)++;
    *v726 = 32;
    if (*v690 >= v690[3])
      *v690 = v690[2];
    sprintf_sgR8(v690, *(double *)(v691 + 23088));
    v727 = (*v690)++;
    *v727 = 32;
    if (*v690 >= v690[3])
      *v690 = v690[2];
    sprintf_sgR8(v690, sqrt(fabs(*(double *)(v691 + 23104))));
    v728 = (*v690)++;
    *v728 = 32;
    if (*v690 >= v690[3])
      *v690 = v690[2];
    sprintf_sgR8(v690, sqrt(fabs(*(double *)(v691 + 23112))));
    v692 = (unsigned __int8 *)(v691 + 25052);
  }
  if (*(_BYTE *)(v691 + 23120) || *(_BYTE *)(v691 + 23136))
  {
    v729 = *v690;
    v730 = 32;
    v731 = 1u;
    do
    {
      *v690 = v729 + 1;
      *v729 = v730;
      v729 = *v690;
      if (*v690 >= v690[3])
      {
        v729 = v690[2];
        *v690 = v729;
      }
      v730 = aVer_0[v731++];
    }
    while (v731 != 7);
    v732 = print_line_ExtP(s_GN_Ptrs *)::ch_MEAS[*(unsigned int *)(v691 + 23124)];
    *v690 = v729 + 1;
    *v729 = v732;
    v733 = *v690;
    if (*v690 >= v690[3])
      v733 = v690[2];
    v734 = 0;
    v735 = 32;
    do
    {
      *v690 = v733 + 1;
      *v733 = v735;
      v733 = *v690;
      if (*v690 >= v690[3])
      {
        v733 = v690[2];
        *v690 = v733;
      }
      v735 = aT[++v734];
    }
    while (v734 != 4);
    v736 = print_line_ExtP(s_GN_Ptrs *)::ch_TRUST[*(unsigned int *)(v691 + 23128)];
    *v690 = v733 + 1;
    *v733 = v736;
    v737 = *v690;
    if (*v690 >= v690[3])
      v737 = v690[2];
    v738 = 0;
    v739 = 32;
    do
    {
      *v690 = v737 + 1;
      *v737 = v739;
      v737 = *v690;
      if (*v690 >= v690[3])
      {
        v737 = v690[2];
        *v690 = v737;
      }
      v739 = aC[++v738];
    }
    while (v738 != 4);
    v740 = print_line_ExtP(s_GN_Ptrs *)::ch_CORREL[*(unsigned int *)(v691 + 23132)];
    *v690 = v737 + 1;
    *v737 = v740;
    v741 = *v690;
    if (*v690 >= v690[3])
      v741 = v690[2];
    v742 = 0;
    v743 = 32;
    do
    {
      *v690 = v741 + 1;
      *v741 = v743;
      v741 = *v690;
      if (*v690 >= v690[3])
      {
        v741 = v690[2];
        *v690 = v741;
      }
      v743 = aE[++v742];
    }
    while (v742 != 4);
    if (*(_BYTE *)(v691 + 23136))
    {
      LOBYTE(v744) = 49;
      strcpy((char *)v1571, "1");
      v745 = 1;
      do
      {
        *v690 = v741 + 1;
        *v741 = v744;
        v741 = *v690;
        if (*v690 >= v690[3])
        {
          v741 = v690[2];
          *v690 = v741;
        }
        v744 = *((unsigned __int8 *)v1571 + v745++);
      }
      while (v744);
    }
    else
    {
      *v690 = v741 + 1;
      *v741 = 45;
      v741 = *v690;
      if (*v690 >= v690[3])
        v741 = v690[2];
    }
    for (i3 = 4; i3 > 1; --i3)
    {
      *v690 = v741 + 1;
      *v741 = 32;
      v741 = *v690;
      if (*v690 >= v690[3])
      {
        v741 = v690[2];
        *v690 = v741;
      }
    }
    v747 = *(_DWORD *)v691 - *(_DWORD *)(v691 + 23140);
    if (v747 >= -999999)
    {
      if (v747 <= 999999)
        v748 = v747 / 1000;
      else
        v748 = 9999;
    }
    else
    {
      v748 = -9999;
    }
    sprintf_4d(v690, v748);
    v749 = (*v690)++;
    *v749 = 32;
    if (*v690 >= v690[3])
      *v690 = v690[2];
    sprintf_ACC(v690, sqrt(*(double *)(v691 + 23152)));
    v750 = (*v690)++;
    *v750 = 32;
    if (*v690 >= v690[3])
      *v690 = v690[2];
    sprintf_ACC(v690, sqrt(*(double *)(v691 + 23160)));
    v751 = (*v690)++;
    *v751 = 32;
    if (*v690 >= v690[3])
      *v690 = v690[2];
    sprintf_sgR8(v690, *(double *)(v691 + 23168));
    v752 = (*v690)++;
    *v752 = 32;
    if (*v690 >= v690[3])
      *v690 = v690[2];
    sprintf_sgR8(v690, sqrt(fabs(*(double *)(v691 + 23184))));
  }
  v753 = *v690;
  if (*v692)
  {
    v754 = 0;
    v755 = 32;
    v756 = a1;
    do
    {
      *v690 = v753 + 1;
      *v753 = v755;
      v753 = *v690;
      if (*v690 >= v690[3])
      {
        v753 = v690[2];
        *v690 = v753;
      }
      v755 = aTepa[++v754];
    }
    while (v754 != 8);
    sprintf1da(v690, *v692, v1571, 0, 0);
    v757 = (*v690)++;
    *v757 = 32;
    if (*v690 >= v690[3])
      *v690 = v690[2];
    v758 = Get_Char_Ass_Status_Edit(*((_DWORD *)v692 + 1));
    v759 = (*v690)++;
    *v759 = v758;
    v760 = *v690;
    if (*v690 >= v690[3])
      v760 = v690[2];
    for (i4 = 3; i4 > 1; --i4)
    {
      *v690 = v760 + 1;
      *v760 = 32;
      v760 = *v690;
      if (*v690 >= v690[3])
      {
        v760 = v690[2];
        *v690 = v760;
      }
    }
    sprintf_4d(v690, *((_DWORD *)v692 + 3));
    v753 = *v690;
  }
  else
  {
    v756 = a1;
  }
  *v690 = v753 + 1;
  *v753 = 10;
  if (*v690 >= v690[3])
    *v690 = v690[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v690);
  v762 = (char **)v756[46];
  v763 = v756[29];
  v764 = (unsigned __int8 *)(v763 + 24924);
  v765 = (unsigned int *)(v763 + 22720);
  v766 = *v762;
  v767 = 67;
  v768 = 1u;
  do
  {
    *v762 = v766 + 1;
    *v766 = v767;
    v766 = *v762;
    if (*v762 >= v762[3])
    {
      v766 = v762[2];
      *v762 = v766;
    }
    v767 = aCtxt[v768++];
  }
  while (v768 != 7);
  v769 = 0;
  v770 = 85;
  do
  {
    *v762 = v766 + 1;
    *v766 = v770;
    v766 = *v762;
    if (*v762 >= v762[3])
    {
      v766 = v762[2];
      *v762 = v766;
    }
    v770 = aUac[++v769];
  }
  while (v769 != 4);
  sprintf_2d(v762, v764[16]);
  sprintf_2d(v762, v764[24]);
  v771 = (*v762)++;
  *v771 = 32;
  if (*v762 >= v762[3])
    *v762 = v762[2];
  v772 = Get_Char_Ass_Status_Edit(*((_DWORD *)v764 + 5));
  v773 = (*v762)++;
  *v773 = v772;
  v774 = *v762;
  if (*v762 >= v762[3])
    v774 = v762[2];
  *v762 = v774 + 1;
  *v774 = 32;
  if (*v762 >= v762[3])
    *v762 = v762[2];
  sprintf_3f((uint64_t)v762, *((_DWORD *)v764 + 7) / 10, 3);
  v775 = (*v762)++;
  *v775 = 32;
  v776 = *v762;
  if (*v762 >= v762[3])
    v776 = v762[2];
  v777 = print_line_CTXT(s_GN_Ptrs *)::ch_UAC_TXT[v765[3]];
  *v762 = v776 + 1;
  *v776 = v777;
  v778 = *v762;
  if (*v762 >= v762[3])
    v778 = v762[2];
  *v762 = v778 + 1;
  *v778 = 32;
  if (*v762 >= v762[3])
    *v762 = v762[2];
  sprintf_1x(v762, v765[5]);
  v779 = (*v762)++;
  *v779 = 32;
  v780 = *v762;
  if (*v762 >= v762[3])
    v780 = v762[2];
  v781 = print_line_CTXT(s_GN_Ptrs *)::ch_CTXT_SRC[v765[4]];
  *v762 = v780 + 1;
  *v780 = v781;
  v782 = *v762;
  if (*v762 >= v762[3])
    v782 = v762[2];
  v783 = 32;
  v784 = 1u;
  do
  {
    *v762 = v782 + 1;
    *v782 = v783;
    v782 = *v762;
    if (*v762 >= v762[3])
    {
      v782 = v762[2];
      *v762 = v782;
    }
    v783 = aDms[v784++];
  }
  while (v784 != 8);
  sprintf_2d(v762, *v764);
  sprintf_2d(v762, v764[8]);
  v785 = (*v762)++;
  *v785 = 32;
  if (*v762 >= v762[3])
    *v762 = v762[2];
  v786 = Get_Char_Ass_Status_Edit(*((_DWORD *)v764 + 1));
  v787 = (*v762)++;
  *v787 = v786;
  v788 = *v762;
  if (*v762 >= v762[3])
    v788 = v762[2];
  *v762 = v788 + 1;
  *v788 = 32;
  if (*v762 >= v762[3])
    *v762 = v762[2];
  sprintf_3f((uint64_t)v762, *((_DWORD *)v764 + 3) / 10, 3);
  v789 = (*v762)++;
  *v789 = 32;
  v790 = *v762;
  if (*v762 >= v762[3])
    v790 = v762[2];
  v791 = print_line_CTXT(s_GN_Ptrs *)::ch_DMS_STE[*v765];
  *v762 = v790 + 1;
  *v790 = v791;
  v792 = *v762;
  if (*v762 >= v762[3])
    v792 = v762[2];
  *v762 = v792 + 1;
  *v792 = 32;
  if (*v762 >= v762[3])
    *v762 = v762[2];
  sprintf_1x(v762, v765[2]);
  v793 = (*v762)++;
  *v793 = 32;
  v794 = *v762;
  if (*v762 >= v762[3])
    v794 = v762[2];
  v795 = print_line_CTXT(s_GN_Ptrs *)::ch_CTXT_SRC[v765[1]];
  *v762 = v794 + 1;
  *v794 = v795;
  v796 = *v762;
  if (*v762 >= v762[3])
    v796 = v762[2];
  v797 = 32;
  v798 = 1u;
  do
  {
    *v762 = v796 + 1;
    *v796 = v797;
    v796 = *v762;
    if (*v762 >= v762[3])
    {
      v796 = v762[2];
      *v762 = v796;
    }
    v797 = aFiv[v798++];
  }
  while (v798 != 8);
  sprintf_2d(v762, v764[32]);
  sprintf_2d(v762, v764[40]);
  v799 = (*v762)++;
  *v799 = 32;
  if (*v762 >= v762[3])
    *v762 = v762[2];
  v800 = Get_Char_Ass_Status_Edit(*((_DWORD *)v764 + 9));
  v801 = (*v762)++;
  *v801 = v800;
  v802 = *v762;
  if (*v762 >= v762[3])
    v802 = v762[2];
  *v762 = v802 + 1;
  *v802 = 32;
  if (*v762 >= v762[3])
    *v762 = v762[2];
  sprintf_3f((uint64_t)v762, *((_DWORD *)v764 + 11) / 10, 3);
  v803 = (*v762)++;
  *v803 = 32;
  if (*v762 >= v762[3])
    *v762 = v762[2];
  sprintf_1x(v762, v765[6]);
  v804 = (*v762)++;
  *v804 = 32;
  if (*v762 >= v762[3])
    *v762 = v762[2];
  sprintf_1x(v762, v765[8]);
  v805 = (*v762)++;
  *v805 = 32;
  v806 = *v762;
  if (*v762 >= v762[3])
    v806 = v762[2];
  v807 = print_line_CTXT(s_GN_Ptrs *)::ch_CTXT_SRC[v765[7]];
  *v762 = v806 + 1;
  *v806 = v807;
  v808 = *v762;
  if (*v762 >= v762[3])
    v808 = v762[2];
  *v762 = v808 + 1;
  *v808 = 10;
  if (*v762 >= v762[3])
    *v762 = v762[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v762);
  v809 = (char **)v756[46];
  v810 = v756[29];
  if ((unsigned __int16)g_Enable_Nav_Debug >= 2u)
  {
    if (!*(_BYTE *)(v810 + 24988))
      goto LABEL_1585;
    v811 = *v809;
    v812 = 77;
    v813 = 1u;
    do
    {
      *v809 = v811 + 1;
      *v811 = v812;
      v811 = *v809;
      if (*v809 >= v809[3])
      {
        v811 = v809[2];
        *v809 = v811;
      }
      v812 = aMapv[v813++];
    }
    while (v813 != 7);
    v814 = 83;
    v815 = 1u;
    do
    {
      *v809 = v811 + 1;
      *v811 = v814;
      v811 = *v809;
      if (*v809 >= v809[3])
      {
        v811 = v809[2];
        *v809 = v811;
      }
      v814 = aStat[v815++];
    }
    while (v815 != 6);
    sprintf_2d(v809, *(unsigned __int8 *)(v810 + 24988));
    sprintf_2d(v809, *(unsigned __int8 *)(v810 + 24996));
    v816 = (*v809)++;
    *v816 = 32;
    v817 = *v809;
    if (*v809 >= v809[3])
      v817 = v809[2];
    *v809 = v817 + 1;
    *v817 = 101;
    if (*v809 >= v809[3])
      *v809 = v809[2];
    v818 = Get_Char_Ass_Status_Edit(*(_DWORD *)(v810 + 24992));
    v819 = (*v809)++;
    *v819 = v818;
    v820 = *v809;
    if (*v809 >= v809[3])
      v820 = v809[2];
    v821 = 32;
    v822 = 1u;
    do
    {
      *v809 = v820 + 1;
      *v820 = v821;
      v820 = *v809;
      if (*v809 >= v809[3])
      {
        v820 = v809[2];
        *v809 = v820;
      }
      v821 = aAge[v822++];
    }
    while (v822 != 6);
    sprintf_6d(v809, *(_DWORD *)(v810 + 25000));
    v823 = 0;
    v824 = *v809;
    v825 = 32;
    do
    {
      *v809 = v824 + 1;
      *v824 = v825;
      v824 = *v809;
      if (*v809 >= v809[3])
      {
        v824 = v809[2];
        *v809 = v824;
      }
      v825 = aAt[++v823];
    }
    while (v823 != 4);
    sprintf_sgR8(v809, *(double *)(v810 + 24056));
    v826 = 0;
    v827 = *v809;
    v828 = 32;
    do
    {
      *v809 = v827 + 1;
      *v827 = v828;
      v827 = *v809;
      if (*v809 >= v809[3])
      {
        v827 = v809[2];
        *v809 = v827;
      }
      v828 = aCt[++v826];
    }
    while (v826 != 4);
    sprintf_sgR8(v809, *(double *)(v810 + 24064));
    v829 = 0;
    v830 = *v809;
    v831 = 32;
    do
    {
      *v809 = v830 + 1;
      *v830 = v831;
      v830 = *v809;
      if (*v809 >= v809[3])
      {
        v830 = v809[2];
        *v809 = v830;
      }
      v831 = aHd[++v829];
    }
    while (v829 != 4);
    sprintf_sgR8(v809, *(double *)(v810 + 24072));
    v832 = 0;
    v833 = *v809;
    v834 = 32;
    do
    {
      *v809 = v833 + 1;
      *v833 = v834;
      v833 = *v809;
      if (*v809 >= v809[3])
      {
        v833 = v809[2];
        *v809 = v833;
      }
      v834 = aGs[++v832];
    }
    while (v832 != 4);
    sprintf_sgR8(v809, *(double *)(v810 + 24048));
    v835 = *v809;
    v836 = 32;
    v837 = 1u;
    do
    {
      *v809 = v835 + 1;
      *v835 = v836;
      v835 = *v809;
      if (*v809 >= v809[3])
      {
        v835 = v809[2];
        *v809 = v835;
      }
      v836 = aEpa[v837++];
    }
    while (v837 != 6);
    sprintf_sgR8(v809, *(double *)(v810 + 24080));
    v838 = *v809;
    v839 = 32;
    v840 = 1u;
    do
    {
      *v809 = v838 + 1;
      *v838 = v839;
      v838 = *v809;
      if (*v809 >= v809[3])
      {
        v838 = v809[2];
        *v809 = v838;
      }
      v839 = aEpc[v840++];
    }
    while (v840 != 6);
    sprintf_sgR8(v809, *(double *)(v810 + 24088));
    v841 = *v809;
    v842 = 77;
    v843 = 1u;
    do
    {
      *v809 = v841 + 1;
      *v841 = v842;
      v841 = *v809;
      if (*v809 >= v809[3])
      {
        v841 = v809[2];
        *v809 = v841;
      }
      v842 = aMv[v843++];
    }
    while (v843 != 4);
    sprintf_sgR8(v809, *(double *)(v810 + 23816));
    sprintf_sgR8(v809, *(double *)(v810 + 23824));
    sprintf_sgR8(v809, *(double *)(v810 + 23832));
    v844 = (*v809)++;
    *v844 = 32;
    if (*v809 >= v809[3])
      *v809 = v809[2];
    sprintf1da(v809, *(unsigned __int8 *)(v810 + 23840), v1571, 0, 0);
    sprintf1da(v809, *(unsigned __int8 *)(v810 + 23841), v1571, 0, 0);
    sprintf1da(v809, *(unsigned __int8 *)(v810 + 23842), v1571, 0, 0);
    sprintf1da(v809, *(unsigned __int8 *)(v810 + 23843), v1571, 0, 0);
    sprintf1da(v809, *(unsigned __int8 *)(v810 + 23844), v1571, 0, 0);
    v845 = (*v809)++;
    *v845 = 32;
    v846 = *v809;
    if (*v809 >= v809[3])
      v846 = v809[2];
    if (!*(_DWORD *)(v810 + 24992))
    {
      v847 = 72;
      v848 = 1u;
      do
      {
        *v809 = v846 + 1;
        *v846 = v847;
        v846 = *v809;
        if (*v809 >= v809[3])
        {
          v846 = v809[2];
          *v809 = v846;
        }
        v847 = aHpos[v848++];
      }
      while (v848 != 6);
      sprintf1da(v809, *(unsigned __int8 *)(v810 + 24868), v1571, 0, 0);
      v849 = (*v809)++;
      *v849 = 32;
      v850 = *v809;
      if (*v809 >= v809[3])
        v850 = v809[2];
      v851 = 32;
      v852 = 1u;
      do
      {
        *v809 = v850 + 1;
        *v850 = v851;
        v850 = *v809;
        if (*v809 >= v809[3])
        {
          v850 = v809[2];
          *v809 = v850;
        }
        v851 = aHpre[v852++];
      }
      while (v852 != 7);
      sprintf_ACC(v809, sqrt(*(double *)(v810 + 23896)));
      v853 = (*v809)++;
      *v853 = 32;
      if (*v809 >= v809[3])
        *v809 = v809[2];
      sprintf_ACC(v809, sqrt(*(double *)(v810 + 23904)));
      v854 = (*v809)++;
      *v854 = 32;
      if (*v809 >= v809[3])
        *v809 = v809[2];
      sprintf_ACC(v809, sqrt(*(double *)(v810 + 23920)));
      v855 = (*v809)++;
      *v855 = 32;
      if (*v809 >= v809[3])
        *v809 = v809[2];
      sprintf_ACC(v809, sqrt(*(double *)(v810 + 23928)));
      v856 = (*v809)++;
      *v856 = 32;
      if (*v809 >= v809[3])
        *v809 = v809[2];
      sprintf_sgR8(v809, *(double *)(v810 + 23936));
      v857 = (*v809)++;
      *v857 = 32;
      if (*v809 >= v809[3])
        *v809 = v809[2];
      sprintf_sgR8(v809, *(double *)(v810 + 23944));
      v858 = *v809;
      v859 = 84;
      v860 = 1u;
      do
      {
        *v809 = v858 + 1;
        *v858 = v859;
        v858 = *v809;
        if (*v809 >= v809[3])
        {
          v858 = v809[2];
          *v809 = v858;
        }
        v859 = aTrck[v860++];
      }
      while (v860 != 6);
      sprintf1da(v809, *(unsigned __int8 *)(v810 + 24869), v1571, 0, 0);
      v861 = (*v809)++;
      *v861 = 32;
      v862 = *v809;
      if (*v809 >= v809[3])
        v862 = v809[2];
      v863 = 0;
      v864 = 32;
      do
      {
        *v809 = v862 + 1;
        *v862 = v864;
        v862 = *v809;
        if (*v809 >= v809[3])
        {
          v862 = v809[2];
          *v809 = v862;
        }
        v864 = aTpre[++v863];
      }
      while (v863 != 8);
      sprintf_ACC(v809, sqrt(*(double *)(v810 + 24008)));
      v865 = (*v809)++;
      *v865 = 32;
      if (*v809 >= v809[3])
        *v809 = v809[2];
      sprintf_sgR8(v809, *(double *)(v810 + 24024));
      v846 = *v809;
    }
    *v809 = v846 + 1;
    *v846 = 10;
    if (*v809 >= v809[3])
      *v809 = v809[2];
    GNSS_Nav_Debug_Flush_Check((uint64_t)v809);
    v809 = (char **)v756[46];
    v810 = v756[29];
    if ((unsigned __int16)g_Enable_Nav_Debug >= 2u)
    {
LABEL_1585:
      v866 = (_BYTE *)(v810 + 25084);
      if (!*(_BYTE *)(v810 + 25084) && !*(_BYTE *)(v810 + 25116) && !*(_BYTE *)(v810 + 25100))
        goto LABEL_1685;
      v867 = *v809;
      v868 = 86;
      v869 = 1u;
      do
      {
        *v809 = v867 + 1;
        *v867 = v868;
        v867 = *v809;
        if (*v809 >= v809[3])
        {
          v867 = v809[2];
          *v809 = v867;
        }
        v868 = aVela[v869++];
      }
      while (v869 != 7);
      v870 = 0;
      v871 = 65;
      do
      {
        *v809 = v867 + 1;
        *v867 = v871;
        v867 = *v809;
        if (*v809 >= v809[3])
        {
          v867 = v809[2];
          *v809 = v867;
        }
        v871 = aAtv[++v870];
      }
      while (v870 != 4);
      sprintf_2d(v809, *v866);
      sprintf_2d(v809, *(unsigned __int8 *)(v810 + 25092));
      v872 = (*v809)++;
      *v872 = 32;
      v873 = *v809;
      if (*v809 >= v809[3])
        v873 = v809[2];
      *v809 = v873 + 1;
      *v873 = 101;
      if (*v809 >= v809[3])
        *v809 = v809[2];
      v874 = Get_Char_Ass_Status_Edit(*(_DWORD *)(v810 + 25088));
      v875 = (*v809)++;
      *v875 = v874;
      v876 = *v809;
      if (*v809 >= v809[3])
        v876 = v809[2];
      v877 = 32;
      v878 = 1u;
      do
      {
        *v809 = v876 + 1;
        *v876 = v877;
        v876 = *v809;
        if (*v809 >= v809[3])
        {
          v876 = v809[2];
          *v809 = v876;
        }
        v877 = aAge[v878++];
      }
      while (v878 != 6);
      sprintf_6d(v809, *(_DWORD *)(v810 + 25096));
      v879 = (*v809)++;
      *v879 = 32;
      if (*v809 >= v809[3])
        *v809 = v809[2];
      if (*v866)
      {
        memset(v1571, 0, 24);
        Core_Get_ExtA_AT_Vel(120000, (uint64_t)v1571);
        sprintf_sgR8(v809, *((double *)v1571 + 1));
        v880 = *v809;
        v881 = 32;
        v882 = 1u;
        do
        {
          *v809 = v880 + 1;
          *v880 = v881;
          v880 = *v809;
          if (*v809 >= v809[3])
          {
            v880 = v809[2];
            *v809 = v880;
          }
          v881 = aRms[v882++];
        }
        while (v882 != 6);
        v883 = *(double *)&v1571[1];
      }
      else
      {
        sprintf_sgR8(v809, 0.0);
        v891 = *v809;
        v892 = 32;
        v893 = 1u;
        do
        {
          *v809 = v891 + 1;
          *v891 = v892;
          v891 = *v809;
          if (*v809 >= v809[3])
          {
            v891 = v809[2];
            *v809 = v891;
          }
          v892 = aRms[v893++];
        }
        while (v893 != 6);
        v883 = 0.0;
      }
      sprintf_sgR8(v809, v883);
      v894 = *v809;
      v895 = 32;
      v896 = 1u;
      do
      {
        *v809 = v894 + 1;
        *v894 = v895;
        v894 = *v809;
        if (*v809 >= v809[3])
        {
          v894 = v809[2];
          *v809 = v894;
        }
        v895 = aHed[v896++];
      }
      while (v896 != 6);
      sprintf_2d(v809, *(unsigned __int8 *)(v810 + 25116));
      sprintf_2d(v809, *(unsigned __int8 *)(v810 + 25124));
      v897 = (*v809)++;
      *v897 = 32;
      v898 = *v809;
      if (*v809 >= v809[3])
        v898 = v809[2];
      *v809 = v898 + 1;
      *v898 = 101;
      if (*v809 >= v809[3])
        *v809 = v809[2];
      v899 = Get_Char_Ass_Status_Edit(*(_DWORD *)(v810 + 25120));
      v900 = (*v809)++;
      *v900 = v899;
      v901 = *v809;
      if (*v809 >= v809[3])
        v901 = v809[2];
      v902 = 32;
      v903 = 1u;
      do
      {
        *v809 = v901 + 1;
        *v901 = v902;
        v901 = *v809;
        if (*v809 >= v809[3])
        {
          v901 = v809[2];
          *v809 = v901;
        }
        v902 = aAge[v903++];
      }
      while (v903 != 6);
      sprintf_6d(v809, *(_DWORD *)(v810 + 25128));
      v904 = (*v809)++;
      *v904 = 32;
      if (*v809 >= v809[3])
        *v809 = v809[2];
      if (*(_BYTE *)(v810 + 25116))
      {
        memset(v1571, 0, 24);
        Core_Get_ExtA_Heading(120000, (uint64_t)v1571);
        sprintf_sgR8(v809, *((double *)v1571 + 1));
        v905 = *v809;
        v906 = 32;
        v907 = 1u;
        do
        {
          *v809 = v905 + 1;
          *v905 = v906;
          v905 = *v809;
          if (*v809 >= v809[3])
          {
            v905 = v809[2];
            *v809 = v905;
          }
          v906 = aRms[v907++];
        }
        while (v907 != 6);
        v908 = *(double *)&v1571[1];
      }
      else
      {
        sprintf_sgR8(v809, 0.0);
        v909 = *v809;
        v910 = 32;
        v911 = 1u;
        do
        {
          *v809 = v909 + 1;
          *v909 = v910;
          v909 = *v809;
          if (*v809 >= v809[3])
          {
            v909 = v809[2];
            *v809 = v909;
          }
          v910 = aRms[v911++];
        }
        while (v911 != 6);
        v908 = 0.0;
      }
      sprintf_sgR8(v809, v908);
      v912 = *v809;
      v913 = 32;
      v914 = 1u;
      do
      {
        *v809 = v912 + 1;
        *v912 = v913;
        v912 = *v809;
        if (*v809 >= v809[3])
        {
          v912 = v809[2];
          *v809 = v912;
        }
        v913 = aVvl[v914++];
      }
      while (v914 != 6);
      sprintf_2d(v809, *(unsigned __int8 *)(v810 + 25100));
      sprintf_2d(v809, *(unsigned __int8 *)(v810 + 25108));
      v915 = (*v809)++;
      *v915 = 32;
      v916 = *v809;
      if (*v809 >= v809[3])
        v916 = v809[2];
      *v809 = v916 + 1;
      *v916 = 101;
      if (*v809 >= v809[3])
        *v809 = v809[2];
      v917 = Get_Char_Ass_Status_Edit(*(_DWORD *)(v810 + 25104));
      v918 = (*v809)++;
      *v918 = v917;
      v919 = *v809;
      if (*v809 >= v809[3])
        v919 = v809[2];
      v920 = 32;
      v921 = 1u;
      do
      {
        *v809 = v919 + 1;
        *v919 = v920;
        v919 = *v809;
        if (*v809 >= v809[3])
        {
          v919 = v809[2];
          *v809 = v919;
        }
        v920 = aAge[v921++];
      }
      while (v921 != 6);
      sprintf_6d(v809, *(_DWORD *)(v810 + 25112));
      v922 = (*v809)++;
      *v922 = 32;
      if (*v809 >= v809[3])
        *v809 = v809[2];
      if (*(_BYTE *)(v810 + 25100))
      {
        memset(v1571, 0, 24);
        Core_Get_ExtA_V_Vel(120000, (uint64_t)v1571);
        sprintf_sgR8(v809, *((double *)v1571 + 1));
        v923 = *v809;
        v924 = 32;
        v925 = 1u;
        do
        {
          *v809 = v923 + 1;
          *v923 = v924;
          v923 = *v809;
          if (*v809 >= v809[3])
          {
            v923 = v809[2];
            *v809 = v923;
          }
          v924 = aRms[v925++];
        }
        while (v925 != 6);
        v926 = *(double *)&v1571[1];
      }
      else
      {
        sprintf_sgR8(v809, 0.0);
        v927 = *v809;
        v928 = 32;
        v929 = 1u;
        do
        {
          *v809 = v927 + 1;
          *v927 = v928;
          v927 = *v809;
          if (*v809 >= v809[3])
          {
            v927 = v809[2];
            *v809 = v927;
          }
          v928 = aRms[v929++];
        }
        while (v929 != 6);
        v926 = 0.0;
      }
      sprintf_sgR8(v809, v926);
      v930 = (*v809)++;
      *v930 = 10;
      if (*v809 >= v809[3])
        *v809 = v809[2];
      GNSS_Nav_Debug_Flush_Check((uint64_t)v809);
      v809 = (char **)v756[46];
      v810 = v756[29];
      if ((unsigned __int16)g_Enable_Nav_Debug > 1u)
      {
LABEL_1685:
        v931 = v756[22];
        v932 = *v809;
        v933 = 65;
        v934 = 1u;
        do
        {
          *v809 = v932 + 1;
          *v932 = v933;
          v932 = *v809;
          if (*v809 >= v809[3])
          {
            v932 = v809[2];
            *v809 = v932;
          }
          v933 = aApa[v934++];
        }
        while (v934 != 6);
        if (*(_BYTE *)(v810 + 23616) || !*(_BYTE *)(v810 + 23120))
        {
          sprintf_2d(v809, *(unsigned __int8 *)(v810 + 23616));
          sprintf_sgR8(v809, *(double *)(v810 + 23640));
          sprintf_sgR8(v809, sqrt(*(double *)(v810 + 23648)));
          v935 = 23664;
        }
        else
        {
          sprintf_2d(v809, *(_DWORD *)(v810 + 23124) + 1);
          sprintf_sgR8(v809, *(double *)(v810 + 23144));
          sprintf_sgR8(v809, sqrt(*(double *)(v810 + 23152)));
          v935 = 23168;
        }
        sprintf_sgR8(v809, *(double *)(v810 + v935));
        v936 = *v809;
        v937 = 32;
        v938 = 1u;
        do
        {
          *v809 = v936 + 1;
          *v936 = v937;
          v936 = *v809;
          if (*v809 >= v809[3])
          {
            v936 = v809[2];
            *v809 = v936;
          }
          v937 = aVva[v938++];
        }
        while (v938 != 7);
        sprintf_2d(v809, *(unsigned __int8 *)(v810 + 23544));
        sprintf_sgR8(v809, *(double *)(v810 + 23568));
        sprintf_sgR8(v809, sqrt(*(double *)(v810 + 23576)));
        sprintf_sgR8(v809, *(double *)(v810 + 23592));
        v939 = 0;
        v940 = *v809;
        v941 = 32;
        do
        {
          *v809 = v940 + 1;
          *v940 = v941;
          v940 = *v809;
          if (*v809 >= v809[3])
          {
            v940 = v809[2];
            *v809 = v940;
          }
          v941 = aDy[++v939];
        }
        while (v939 != 4);
        v942 = *(_DWORD *)(v931 + 20);
        if (v942 >= 0)
          v943 = *(_DWORD *)(v931 + 20);
        else
          v943 = -v942;
        sprintf1da(v809, v943, v1571, 0, v942 >> 31);
        v944 = 0;
        v945 = *v809;
        v946 = 32;
        do
        {
          *v809 = v945 + 1;
          *v945 = v946;
          v945 = *v809;
          if (*v809 >= v809[3])
          {
            v945 = v809[2];
            *v809 = v945;
          }
          v946 = aT0[++v944];
        }
        while (v944 != 4);
        sprintf_1u(v809, *(_DWORD *)(v931 + 26996));
        LODWORD(v947) = *(_DWORD *)(v810 + 25364);
        sprintf_sgR8(v809, (double)v947);
        v948 = (*v809)++;
        *v948 = 10;
        if (*v809 >= v809[3])
          *v809 = v809[2];
        GNSS_Nav_Debug_Flush_Check((uint64_t)v809);
        v809 = (char **)v756[46];
        v810 = v756[29];
        if ((unsigned __int16)g_Enable_Nav_Debug > 1u)
        {
          v949 = 0;
          v950 = (unsigned __int16 *)(v756[22] + 10998);
          v951 = v756[9];
          v952 = v756[10];
          v953 = *v809;
          v954 = 83;
          do
          {
            *v809 = v953 + 1;
            *v953 = v954;
            v953 = *v809;
            if (*v809 >= v809[3])
            {
              v953 = v809[2];
              *v809 = v953;
            }
            v954 = aSigs[++v949];
          }
          while (v949 != 4);
          sprintf_sgR8(v809, *(double *)(v952 + 1976));
          sprintf_sgR8(v809, *(double *)(v952 + 1984));
          sprintf_sgR8(v809, *(double *)(v952 + 2000));
          sprintf_sgR8(v809, *(double *)(v952 + 2008));
          sprintf_sgR8(v809, *(double *)(v952 + 2024));
          sprintf_sgR8(v809, *(double *)(v952 + 2032));
          v955 = *v809;
          v956 = 32;
          v957 = 1u;
          do
          {
            *v809 = v955 + 1;
            *v955 = v956;
            v955 = *v809;
            if (*v809 >= v809[3])
            {
              v955 = v809[2];
              *v809 = v955;
            }
            v956 = aEc[v957++];
          }
          while (v957 != 4);
          if (*(unsigned __int16 *)(v952 + 1992) >= 0x270Fu)
            v958 = 9999;
          else
            v958 = *(unsigned __int16 *)(v952 + 1992);
          sprintf_5d(v809, v958);
          if (*(unsigned __int16 *)(v952 + 2016) >= 0x270Fu)
            v959 = 9999;
          else
            v959 = *(unsigned __int16 *)(v952 + 2016);
          sprintf_5d(v809, v959);
          if (*(unsigned __int16 *)(v952 + 2040) >= 0x270Fu)
            v960 = 9999;
          else
            v960 = *(unsigned __int16 *)(v952 + 2040);
          sprintf_5d(v809, v960);
          v961 = 0;
          v962 = *v809;
          v963 = 32;
          do
          {
            *v809 = v962 + 1;
            *v962 = v963;
            v962 = *v809;
            if (*v809 >= v809[3])
            {
              v962 = v809[2];
              *v809 = v962;
            }
            v963 = aJn0[++v961];
          }
          while (v961 != 8);
          v964 = 0;
          v965 = 32;
          do
          {
            *v809 = v962 + 1;
            *v962 = v965;
            v962 = *v809;
            if (*v809 >= v809[3])
            {
              v962 = v809[2];
              *v809 = v962;
            }
            v965 = aNaEc[++v964];
          }
          while (v964 != 8);
          sprintf1da(v809, v950[1], v1571, 0, 0);
          v966 = (*v809)++;
          *v966 = 32;
          if (*v809 >= v809[3])
            *v809 = v809[2];
          sprintf1da(v809, v950[2], v1571, 0, 0);
          v967 = (*v809)++;
          *v967 = 32;
          if (*v809 >= v809[3])
            *v809 = v809[2];
          sprintf1da(v809, *v950, v1571, 0, 0);
          v968 = (*v809)++;
          *v968 = 32;
          v969 = *v809;
          if (*v809 >= v809[3])
          {
            v969 = v809[2];
            *v809 = v969;
          }
          if (*(int *)(v810 + 24824) <= 0)
          {
            v974 = 32;
            v975 = 1u;
            do
            {
              *v809 = v969 + 1;
              *v969 = v974;
              v969 = *v809;
              if (*v809 >= v809[3])
              {
                v969 = v809[2];
                *v809 = v969;
              }
              v974 = aXXXX[v975++];
            }
            while (v975 != 10);
          }
          else
          {
            sprintf_2d(v809, (int)*(double *)(v810 + 23080));
            v970 = (*v809)++;
            *v970 = 32;
            if (*v809 >= v809[3])
              *v809 = v809[2];
            sprintf_2d(v809, (int)*(double *)(v810 + 23088));
            v971 = (*v809)++;
            *v971 = 32;
            if (*v809 >= v809[3])
              *v809 = v809[2];
            sprintf_2d(v809, (int)sqrt(*(double *)(v810 + 23040)));
            v972 = (*v809)++;
            *v972 = 32;
            if (*v809 >= v809[3])
              *v809 = v809[2];
            sprintf_2d(v809, (int)sqrt(*(double *)(v810 + 23048)));
            v973 = (*v809)++;
            *v973 = 32;
            v969 = *v809;
            if (*v809 >= v809[3])
            {
              v969 = v809[2];
              *v809 = v969;
            }
          }
          if (*(int *)(v810 + 24828) <= 0)
          {
            v978 = 32;
            v979 = 1u;
            do
            {
              *v809 = v969 + 1;
              *v969 = v978;
              v969 = *v809;
              if (*v809 >= v809[3])
              {
                v969 = v809[2];
                *v809 = v969;
              }
              v978 = aXX[v979++];
            }
            while (v979 != 6);
          }
          else
          {
            sprintf_2d(v809, (int)*(double *)(v810 + 23168));
            v976 = (*v809)++;
            *v976 = 32;
            if (*v809 >= v809[3])
              *v809 = v809[2];
            sprintf_2d(v809, (int)sqrt(*(double *)(v810 + 23152)));
            v977 = (*v809)++;
            *v977 = 32;
            v969 = *v809;
            if (*v809 >= v809[3])
            {
              v969 = v809[2];
              *v809 = v969;
            }
          }
          if (*(int *)(v810 + 24816) <= 0)
          {
            v982 = 32;
            v983 = 1u;
            do
            {
              *v809 = v969 + 1;
              *v969 = v982;
              v969 = *v809;
              if (*v809 >= v809[3])
              {
                v969 = v809[2];
                *v809 = v969;
              }
              v982 = aXX[v983++];
            }
            while (v983 != 6);
          }
          else
          {
            sprintf_sgR8(v809, *(double *)(v810 + 22968));
            v980 = (*v809)++;
            *v980 = 32;
            if (*v809 >= v809[3])
              *v809 = v809[2];
            sprintf_2d(v809, (int)sqrt(*(double *)(v810 + 22952)));
            v981 = (*v809)++;
            *v981 = 32;
            v969 = *v809;
            if (*v809 >= v809[3])
              v969 = v809[2];
          }
          v984 = 0;
          v985 = 32;
          do
          {
            *v809 = v969 + 1;
            *v969 = v985;
            v969 = *v809;
            if (*v809 >= v809[3])
            {
              v969 = v809[2];
              *v809 = v969;
            }
            v985 = aEs_0[++v984];
          }
          while (v984 != 4);
          v986 = 48;
          switch(*(_DWORD *)(v951 + 60))
          {
            case 0:
              break;
            case 1:
              v986 = 49;
              break;
            case 2:
              v986 = 50;
              break;
            case 3:
              v986 = 51;
              break;
            case 4:
              v986 = 52;
              break;
            case 5:
              v986 = 53;
              break;
            case 6:
              v986 = 54;
              break;
            case 7:
              v986 = 55;
              break;
            default:
              EvCrt_Illegal_Default("Get_Char_CTXT_SES", 0x11ACu);
              v969 = *v809;
              v986 = 45;
              break;
          }
          *v809 = v969 + 1;
          *v969 = v986;
          v987 = *v809;
          if (*v809 >= v809[3])
            v987 = v809[2];
          *v809 = v987 + 1;
          *v987 = 10;
          if (*v809 >= v809[3])
            *v809 = v809[2];
          GNSS_Nav_Debug_Flush_Check((uint64_t)v809);
          v809 = (char **)v756[46];
          v810 = v756[29];
          if ((unsigned __int16)g_Enable_Nav_Debug >= 2u)
          {
            v988 = 0;
            v989 = (unsigned __int8 *)v756[13];
            v990 = (double *)v756[22];
            v991 = *(_DWORD *)v756;
            v992 = 86;
            v993 = *v809;
            do
            {
              *v809 = v993 + 1;
              *v993 = v992;
              v993 = *v809;
              if (*v809 >= v809[3])
              {
                v993 = v809[2];
                *v809 = v993;
              }
              v992 = aVarf[++v988];
            }
            while (v988 != 4);
            sprintf_sgR8(v809, *(double *)(v810 + 2840));
            sprintf_sgR8(v809, v990[1361]);
            sprintf_sgR8(v809, *(double *)(v810 + 8416));
            sprintf_sgR8(v809, v990[1364]);
            sprintf_sgR8(v809, *(double *)(v810 + 13992));
            sprintf_sgR8(v809, v990[1367]);
            v994 = 0;
            v995 = *v809;
            v996 = 32;
            do
            {
              *v809 = v995 + 1;
              *v995 = v996;
              v995 = *v809;
              if (*v809 >= v809[3])
              {
                v995 = v809[2];
                *v809 = v995;
              }
              v996 = aS[++v994];
            }
            while (v994 != 2);
            sprintf_3d(v809, v991);
            v997 = *v809;
            v998 = 32;
            v999 = 1u;
            do
            {
              *v809 = v997 + 1;
              *v997 = v998;
              v997 = *v809;
              if (*v809 >= v809[3])
              {
                v997 = v809[2];
                *v809 = v997;
              }
              v998 = aI[v999++];
            }
            while (v999 != 4);
            v1000 = *(double *)(v810 + 656) * 10.0;
            v1001 = -0.5;
            if (v1000 > 0.0)
              v1001 = 0.5;
            v1002 = v1000 + v1001;
            if (v1002 <= 2147483650.0)
            {
              if (v1002 >= -2147483650.0)
                v1003 = (int)v1002;
              else
                v1003 = 0x80000000;
            }
            else
            {
              v1003 = 0x7FFFFFFF;
            }
            sprintf_2f((uint64_t)v809, v1003);
            v1004 = *(_DWORD *)(v810 + 44);
            if (v1004 > -10)
            {
              v1005 = *v809;
              v1008 = 32;
              if (v1004 <= 99)
              {
                v1010 = 1u;
                do
                {
                  *v809 = v1005 + 1;
                  *v1005 = v1008;
                  v1005 = *v809;
                  if (*v809 >= v809[3])
                  {
                    v1005 = v809[2];
                    *v809 = v1005;
                  }
                  v1008 = aTs[v1010++];
                }
                while (v1010 != 4);
                sprintf_sp1d(v809, *(_DWORD *)(v810 + 44));
                v1005 = *v809;
              }
              else
              {
                v1009 = 1u;
                do
                {
                  *v809 = v1005 + 1;
                  *v1005 = v1008;
                  v1005 = *v809;
                  if (*v809 >= v809[3])
                  {
                    v1005 = v809[2];
                    *v809 = v1005;
                  }
                  v1008 = aTs99[v1009++];
                }
                while (v1009 != 7);
              }
            }
            else
            {
              v1005 = *v809;
              v1006 = 32;
              v1007 = 1u;
              do
              {
                *v809 = v1005 + 1;
                *v1005 = v1006;
                v1005 = *v809;
                if (*v809 >= v809[3])
                {
                  v1005 = v809[2];
                  *v809 = v1005;
                }
                v1006 = aTs9[v1007++];
              }
              while (v1007 != 7);
            }
            v1011 = 0;
            v1012 = 32;
            do
            {
              *v809 = v1005 + 1;
              *v1005 = v1012;
              v1005 = *v809;
              if (*v809 >= v809[3])
              {
                v1005 = v809[2];
                *v809 = v1005;
              }
              v1012 = aNf_0[++v1011];
            }
            while (v1011 != 4);
            sprintf_sp1d(v809, v989[72]);
            sprintf_sp1d(v809, v989[73]);
            sprintf_sp1d(v809, v989[74]);
            v1013 = (*v809)++;
            *v1013 = 10;
            if (*v809 >= v809[3])
              *v809 = v809[2];
            GNSS_Nav_Debug_Flush_Check((uint64_t)v809);
            v809 = (char **)v756[46];
            v810 = v756[29];
            if ((unsigned __int16)g_Enable_Nav_Debug >= 2u)
            {
              v1014 = *v809;
              v1015 = 79;
              v1016 = 1u;
              do
              {
                *v809 = v1014 + 1;
                *v1014 = v1015;
                v1014 = *v809;
                if (*v809 >= v809[3])
                {
                  v1014 = v809[2];
                  *v809 = v1014;
                }
                v1015 = aOrigSig[v1016++];
              }
              while (v1016 != 10);
              v1017 = 0;
              v1018 = v810 + 24496;
              do
              {
                sprintf_sgR8F(v809, sqrt(*(double *)(v1018 + v1017)));
                v1017 += 8;
              }
              while (v1017 != 88);
              v1019 = (*v809)++;
              *v1019 = 10;
              if (*v809 >= v809[3])
                *v809 = v809[2];
              GNSS_Nav_Debug_Flush_Check((uint64_t)v809);
              v809 = (char **)v756[46];
              v810 = v756[29];
            }
          }
        }
      }
    }
  }
  v1020 = *v809;
  v1021 = 83;
  v1022 = 1u;
  do
  {
    *v809 = v1020 + 1;
    *v1020 = v1021;
    v1020 = *v809;
    if (*v809 >= v809[3])
    {
      v1020 = v809[2];
      *v809 = v1020;
    }
    v1021 = aSvecCor[v1022++];
  }
  while (v1022 != 10);
  for (i5 = 0; i5 != 88; i5 += 8)
    sprintf_sgR8F(v809, *(double *)(v810 + 25272 + i5));
  v1024 = *v809;
  for (i6 = 3; i6 > 1; --i6)
  {
    *v809 = v1024 + 1;
    *v1024 = 32;
    v1024 = *v809;
    if (*v809 >= v809[3])
    {
      v1024 = v809[2];
      *v809 = v1024;
    }
  }
  v1026 = 0;
  v1027 = v810 + 25166;
  do
    sprintf1da(v809, *(unsigned __int8 *)(v1027 + v1026++), v1571, 0, 0);
  while (v1026 != 11);
  v1028 = (*v809)++;
  *v1028 = 10;
  if (*v809 >= v809[3])
    *v809 = v809[2];
  v1029 = (char **)v756[46];
  v1030 = v756[29];
  v1031 = *v1029;
  v1032 = 83;
  v1033 = 1u;
  do
  {
    *v1029 = v1031 + 1;
    *v1031 = v1032;
    v1031 = *v1029;
    if (*v1029 >= v1029[3])
    {
      v1031 = v1029[2];
      *v1029 = v1031;
    }
    v1032 = aSvecSig[v1033++];
  }
  while (v1033 != 10);
  v1034 = 0;
  v1035 = v1030 + 24136;
  do
  {
    sprintf_sgR8F(v1029, sqrt(*(double *)(v1035 + v1034)));
    v1034 += 8;
  }
  while (v1034 != 88);
  v1036 = (*v1029)++;
  *v1036 = 10;
  if (*v1029 >= v1029[3])
    *v1029 = v1029[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v1029);
  v1037 = (char **)v756[46];
  v1038 = v756[29];
  if ((unsigned __int16)g_Enable_Nav_Debug < 2u)
    goto LABEL_1916;
  v1039 = v756[22];
  if (*(_DWORD *)(v1039 + 144))
  {
LABEL_1885:
    v1046 = v756[10];
    v1047 = *v1037;
    v1048 = 119;
    v1049 = 1u;
    do
    {
      *v1037 = v1047 + 1;
      *v1047 = v1048;
      v1047 = *v1037;
      if (*v1037 >= v1037[3])
      {
        v1047 = v1037[2];
        *v1037 = v1047;
      }
      v1048 = aWrdop[v1049++];
    }
    while (v1049 != 10);
    sprintf_sgR8F(v1037, sqrt(*(double *)(v1039 + 7248)));
    for (i7 = 0; i7 != 24; i7 += 8)
      sprintf_sgR8(v1037, sqrt(*(double *)(v1039 + 7256 + i7)));
    sprintf_sgR8(v1037, *(double *)(v1039 + 7280));
    v1051 = *v1037;
    v1052 = 32;
    v1053 = 1u;
    do
    {
      *v1037 = v1051 + 1;
      *v1051 = v1052;
      v1051 = *v1037;
      if (*v1037 >= v1037[3])
      {
        v1051 = v1037[2];
        *v1037 = v1051;
      }
      v1052 = aPrefc[v1053++];
    }
    while (v1053 != 8);
    sprintf_LaLo(v1037, v1038 + 31296);
    sprintf_sgR8(v1037, *(double *)(v1038 + 31312));
    sprintf_sgR8(v1037, *(double *)(v1038 + 31312) - *(double *)(v1046 + 232));
    v1054 = (*v1037)++;
    *v1054 = 32;
    if (*v1037 >= v1037[3])
      *v1037 = v1037[2];
    v1055 = (double *)(v1039 + 27072);
    v1056 = 3912;
    while (1)
    {
      v1057 = *(double *)(v1038 + 8 * v1056) - *(v1055 - 5);
      if ((_DWORD)v1056 == 3912)
        goto LABEL_1903;
      if ((_DWORD)v1056 == 3913)
        break;
LABEL_1904:
      sprintf_6d(v1037, (int)v1057);
      v1059 = (*v1037)++;
      *v1059 = 32;
      v1060 = *v1037;
      if (*v1037 >= v1037[3])
      {
        v1060 = v1037[2];
        *v1037 = v1060;
      }
      ++v1056;
      ++v1055;
      if (v1056 == 3915)
      {
        v1061 = 32;
        v1062 = 1u;
        do
        {
          *v1037 = v1060 + 1;
          *v1060 = v1061;
          v1060 = *v1037;
          if (*v1037 >= v1037[3])
          {
            v1060 = v1037[2];
            *v1037 = v1060;
          }
          v1061 = aVel[v1062++];
        }
        while (v1062 != 6);
        v1063 = 0;
        v1064 = v1038 + 31320;
        do
        {
          sprintf_sgR8(v1037, *(double *)(v1064 + v1063));
          v1063 += 8;
        }
        while (v1063 != 24);
        v1065 = (*v1037)++;
        *v1065 = 10;
        if (*v1037 >= v1037[3])
          *v1037 = v1037[2];
        GNSS_Nav_Debug_Flush_Check((uint64_t)v1037);
        v1037 = (char **)v756[46];
        v1038 = v756[29];
        goto LABEL_1916;
      }
    }
    v1058 = -6.28318531;
    if (v1057 >= 3.14159265 || (v1058 = 6.28318531, v1057 < -3.14159265))
      v1057 = v1057 + v1058;
LABEL_1903:
    v1057 = v1057 * *v1055;
    goto LABEL_1904;
  }
  v1040 = *v1037;
  v1041 = 81;
  v1042 = 1u;
  do
  {
    *v1037 = v1040 + 1;
    *v1040 = v1041;
    v1040 = *v1037;
    if (*v1037 >= v1037[3])
    {
      v1040 = v1037[2];
      *v1037 = v1040;
    }
    v1041 = aQBSize[v1042++];
  }
  while (v1042 != 10);
  v1043 = 0;
  v1044 = v1039 + 184;
  do
  {
    sprintf_sgR8F(v1037, sqrt(*(double *)(v1044 + v1043)));
    v1043 += 8;
  }
  while (v1043 != 48);
  sprintf_sgR8F(v1037, *(double *)(v1038 + 20016));
  sprintf_sgR8F(v1037, *(double *)(v1038 + 20024));
  v1045 = (*v1037)++;
  *v1045 = 10;
  if (*v1037 >= v1037[3])
    *v1037 = v1037[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v1037);
  v1037 = (char **)v756[46];
  v1038 = v756[29];
  if ((unsigned __int16)g_Enable_Nav_Debug >= 2u)
  {
    v1039 = v756[22];
    goto LABEL_1885;
  }
LABEL_1916:
  v1066 = v756[9];
  v1067 = *v1037;
  v1068 = 67;
  v1069 = 1u;
  do
  {
    *v1037 = v1067 + 1;
    *v1067 = v1068;
    v1067 = *v1037;
    if (*v1037 >= v1037[3])
    {
      v1067 = v1037[2];
      *v1037 = v1067;
    }
    v1068 = aClkbias[v1069++];
  }
  while (v1069 != 10);
  v1070 = (int)(*(double *)(v1038 + 736) * 2997924580.0);
  sprintf_5f((uint64_t)v1037, v1070, 2);
  v1071 = (*v1037)++;
  *v1071 = 32;
  if (*v1037 >= v1037[3])
    *v1037 = v1037[2];
  v1072 = (int)(*(double *)(v1038 + 744) * 2997924580.0);
  sprintf_5f((uint64_t)v1037, v1072, 2);
  v1073 = (*v1037)++;
  *v1073 = 32;
  if (*v1037 >= v1037[3])
    *v1037 = v1037[2];
  v1074 = (int)(*(double *)(v1038 + 752) * 2997924580.0);
  sprintf_5f((uint64_t)v1037, v1074, 2);
  v1075 = (*v1037)++;
  *v1075 = 32;
  v1076 = *v1037;
  if (*v1037 >= v1037[3])
    v1076 = v1037[2];
  v1077 = 32;
  v1078 = 1u;
  do
  {
    *v1037 = v1076 + 1;
    *v1076 = v1077;
    v1076 = *v1037;
    if (*v1037 >= v1037[3])
    {
      v1076 = v1037[2];
      *v1037 = v1076;
    }
    v1077 = aDclk[v1078++];
  }
  while (v1078 != 7);
  if (v1072)
    v1079 = v1070 == 0;
  else
    v1079 = 1;
  if (v1079)
    v1080 = 0;
  else
    v1080 = v1072 - v1070;
  *v1037 = v1076 + 1;
  *v1076 = 32;
  if (*v1037 >= v1037[3])
    *v1037 = v1037[2];
  sprintf_5f((uint64_t)v1037, v1080, 2);
  if (v1074)
    v1081 = v1070 == 0;
  else
    v1081 = 1;
  if (v1081)
    v1082 = 0;
  else
    v1082 = v1074 - v1070;
  v1083 = (*v1037)++;
  *v1083 = 32;
  if (*v1037 >= v1037[3])
    *v1037 = v1037[2];
  sprintf_5f((uint64_t)v1037, v1082, 2);
  v1084 = *v1037;
  v1085 = 32;
  v1086 = 1u;
  do
  {
    *v1037 = v1084 + 1;
    *v1084 = v1085;
    v1084 = *v1037;
    if (*v1037 >= v1037[3])
    {
      v1084 = v1037[2];
      *v1037 = v1084;
    }
    v1085 = aIni[v1086++];
  }
  while (v1086 != 7);
  sprintf_2d(v1037, *(unsigned __int8 *)(v1038 + 768));
  sprintf_2d(v1037, *(unsigned __int8 *)(v1038 + 769));
  sprintf_2d(v1037, *(unsigned __int8 *)(v1038 + 770));
  v1087 = 0;
  v1088 = *v1037;
  v1089 = 32;
  do
  {
    *v1037 = v1088 + 1;
    *v1088 = v1089;
    v1088 = *v1037;
    if (*v1037 >= v1037[3])
    {
      v1088 = v1037[2];
      *v1037 = v1088;
    }
    v1089 = aLsKf[++v1087];
  }
  while (v1087 != 8);
  sprintf_2d(v1037, *(unsigned __int8 *)(v1038 + 31344));
  v1090 = *v1037;
  v1091 = 32;
  v1092 = 1u;
  do
  {
    *v1037 = v1090 + 1;
    *v1090 = v1091;
    v1090 = *v1037;
    if (*v1037 >= v1037[3])
    {
      v1090 = v1037[2];
      *v1037 = v1090;
    }
    v1091 = aJit[v1092++];
  }
  while (v1092 != 7);
  sprintf_4f((uint64_t)v1037, (int)((double)*(char *)(v1066 + 250) * 2.99792458), 2);
  LOBYTE(v1093) = *(_BYTE *)(v1066 + 251);
  sprintf_4f((uint64_t)v1037, (int)((double)v1093 * 2.99792458), 2);
  v1094 = (*v1037)++;
  *v1094 = 10;
  if (*v1037 >= v1037[3])
    *v1037 = v1037[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v1037);
  v1095 = (char **)v756[46];
  if ((unsigned __int16)g_Enable_Nav_Debug >= 2u)
  {
    v1096 = v756[7];
    v1097 = *v1095;
    v1098 = 71;
    v1099 = 1u;
    do
    {
      *v1095 = v1097 + 1;
      *v1097 = v1098;
      v1097 = *v1095;
      if (*v1095 >= v1095[3])
      {
        v1097 = v1095[2];
        *v1095 = v1097;
      }
      v1098 = aGlofrq[v1099++];
    }
    while (v1099 != 8);
    v1100 = 0;
    v1101 = v1096 + 16336;
    do
    {
      if (*(_DWORD *)(v1101 + 4 * v1100) != 2139062143)
      {
        sprintf_3d(v1095, v1100 + 1);
        sprintf_3d(v1095, *(_DWORD *)(v1101 + 4 * v1100));
        v1102 = (*v1095)++;
        *v1102 = 59;
        v1097 = *v1095;
        if (*v1095 >= v1095[3])
        {
          v1097 = v1095[2];
          *v1095 = v1097;
        }
      }
      ++v1100;
    }
    while (v1100 != 24);
    *v1095 = v1097 + 1;
    *v1097 = 10;
    if (*v1095 >= v1095[3])
      *v1095 = v1095[2];
    GNSS_Nav_Debug_Flush_Check((uint64_t)v1095);
    v1095 = (char **)v756[46];
    if ((unsigned __int16)g_Enable_Nav_Debug >= 2u)
    {
      v1103 = 0;
      v1104 = v756[7];
      v1105 = *v1095;
      v1106 = 71;
      do
      {
        *v1095 = v1105 + 1;
        *v1105 = v1106;
        v1105 = *v1095;
        if (*v1095 >= v1095[3])
        {
          v1105 = v1095[2];
          *v1095 = v1105;
        }
        v1106 = aGloslot[++v1103];
      }
      while (v1103 != 8);
      v1107 = 0;
      v1108 = v1104 + 16432;
      do
      {
        if (*(_DWORD *)(v1108 + 4 * v1107) != 2139062143)
        {
          sprintf_3d(v1095, v1107 - 7);
          sprintf_3d(v1095, *(_DWORD *)(v1108 + 4 * v1107));
          v1109 = (*v1095)++;
          *v1109 = 59;
          v1105 = *v1095;
          if (*v1095 >= v1095[3])
          {
            v1105 = v1095[2];
            *v1095 = v1105;
          }
        }
        ++v1107;
      }
      while (v1107 != 14);
      *v1095 = v1105 + 1;
      *v1105 = 10;
      if (*v1095 >= v1095[3])
        *v1095 = v1095[2];
      GNSS_Nav_Debug_Flush_Check((uint64_t)v1095);
      v1095 = (char **)v756[46];
    }
  }
  v1110 = v756[10];
  v1111 = v756[22];
  v1112 = v756[29];
  v1113 = 82;
  v1114 = (unsigned int *)v756[6];
  v1115 = 1u;
  v1116 = *v1095;
  do
  {
    *v1095 = v1116 + 1;
    *v1116 = v1113;
    v1116 = *v1095;
    if (*v1095 >= v1095[3])
    {
      v1116 = v1095[2];
      *v1095 = v1116;
    }
    v1113 = aReset[v1115++];
  }
  while (v1115 != 8);
  sprintf1da(v1095, *(unsigned __int8 *)(v1111 + 128), v1571, 0, 0);
  sprintf_3d(v1095, *(_DWORD *)(v1111 + 132));
  sprintf_5d(v1095, *(_DWORD *)(v1111 + 136));
  sprintf_6d(v1095, *(_DWORD *)(v1111 + 140));
  sprintf_2d(v1095, *(unsigned __int8 *)(v1111 + 168));
  v1117 = 0;
  v1118 = *v1095;
  v1119 = 32;
  do
  {
    *v1095 = v1118 + 1;
    *v1118 = v1119;
    v1118 = *v1095;
    if (*v1095 >= v1095[3])
    {
      v1118 = v1095[2];
      *v1095 = v1118;
    }
    v1119 = aQb[++v1117];
  }
  while (v1117 != 4);
  if (*(_BYTE *)(v1111 + 175))
    v1120 = 49;
  else
    v1120 = 48;
  *v1095 = v1118 + 1;
  *v1118 = v1120;
  if (*v1095 >= v1095[3])
    *v1095 = v1095[2];
  v1121 = *(unsigned __int8 *)(v1111 + 176);
  if (*(_BYTE *)(v1111 + 178))
    v1121 |= 2u;
  if (*(_BYTE *)(v1111 + 180))
    v1122 = v1121 | 4;
  else
    v1122 = v1121;
  sprintf1da(v1095, v1122, v1571, 0, 0);
  if (*(_BYTE *)(v1111 + 179))
    v1123 = *(unsigned __int8 *)(v1111 + 177) | 2;
  else
    v1123 = *(unsigned __int8 *)(v1111 + 177);
  sprintf1da(v1095, v1123, v1571, 0, 0);
  sprintf_6d(v1095, *(_DWORD *)(v1111 + 144));
  v1124 = 0;
  v1125 = *v1095;
  v1126 = 32;
  do
  {
    *v1095 = v1125 + 1;
    *v1125 = v1126;
    v1125 = *v1095;
    if (*v1095 >= v1095[3])
    {
      v1125 = v1095[2];
      *v1095 = v1125;
    }
    v1126 = aSt_0[++v1124];
  }
  while (v1124 != 4);
  sprintf1da(v1095, *((unsigned __int8 *)v1114 + 5), v1571, 0, 0);
  v1127 = *v1095;
  v1128 = &g_TOW_Stat_As_String[10 * *v1114 + 1];
  v1129 = 32;
  do
  {
    *v1095 = v1127 + 1;
    *v1127 = v1129;
    v1127 = *v1095;
    if (*v1095 >= v1095[3])
    {
      v1127 = v1095[2];
      *v1095 = v1127;
    }
    v1130 = *v1128++;
    v1129 = v1130;
  }
  while (v1130);
  v1131 = 0;
  v1132 = 32;
  do
  {
    *v1095 = v1127 + 1;
    *v1127 = v1132;
    v1127 = *v1095;
    if (*v1095 >= v1095[3])
    {
      v1127 = v1095[2];
      *v1095 = v1127;
    }
    v1132 = aSp[++v1131];
  }
  while (v1131 != 4);
  sprintf1da(v1095, *(unsigned __int8 *)(v1110 + 19), v1571, 0, 0);
  sprintf1da(v1095, *(unsigned __int8 *)(v1111 + 232), v1571, 0, 0);
  sprintf1da(v1095, *(unsigned __int8 *)(v1111 + 233), v1571, 0, 0);
  sprintf1da(v1095, *(unsigned __int8 *)(v1112 + 25165), v1571, 0, 0);
  v1133 = *v1095;
  v1134 = 32;
  v1135 = 1u;
  do
  {
    *v1095 = v1133 + 1;
    *v1133 = v1134;
    v1133 = *v1095;
    if (*v1095 >= v1095[3])
    {
      v1133 = v1095[2];
      *v1095 = v1133;
    }
    v1134 = aFf[v1135++];
  }
  while (v1135 != 6);
  sprintf_3f((uint64_t)v1095, 10 * *(_DWORD *)(v1111 + 11048) / 0x3E8u, 2);
  sprintf_sp1d(v1095, *(_DWORD *)(v1112 + 40));
  v1136 = *v1095;
  v1137 = 32;
  v1138 = 1u;
  do
  {
    *v1095 = v1136 + 1;
    *v1136 = v1137;
    v1136 = *v1095;
    if (*v1095 >= v1095[3])
    {
      v1136 = v1095[2];
      *v1095 = v1136;
    }
    v1137 = aOr[v1138++];
  }
  while (v1138 != 6);
  sprintf1da(v1095, *(unsigned __int8 *)(v1112 + 976), v1571, 0, 0);
  v1139 = (*v1095)++;
  *v1139 = 10;
  if (*v1095 >= v1095[3])
    *v1095 = v1095[2];
  GNSS_Nav_Debug_Flush_Check((uint64_t)v1095);
  v1140 = (char **)v756[46];
  v1531 = v756[5];
  v1527 = v756[4];
  v1522 = v756[7];
  v1532 = v756[22];
  v1141 = v756[29];
  v1142 = k * 1000.0;
  if (!*(_BYTE *)(v1141 + 25170))
    v1142 = v1142 - *(double *)(v1141 + 25216);
  v1530 = v756[33];
  v1143 = 0;
  v1535 = v756[13];
  v1536 = v756[10];
  v1526 = v756[8];
  v1523 = v756[12];
  v1533 = v756[35];
  v1144 = v1535 + 76;
  *(_OWORD *)v1572 = *(_OWORD *)(v1141 + 688);
  v1573 = *(_QWORD *)(v1141 + 704);
  do
  {
    *(double *)&v1574[v1143] = *(double *)(v1141 + v1143 * 4 + 664) - *(double *)(v1532 + 27008 + v1143 * 4);
    v1143 += 2;
  }
  while (v1143 != 6);
  v1145 = 0;
  memset(v1571, 0, sizeof(v1571));
  v1569 = 0u;
  v1570 = 0u;
  v1567 = 0u;
  v1568 = 0u;
  v1565 = 0u;
  v1566 = 0u;
  v1563 = 0u;
  v1564 = 0u;
  v1561 = 0u;
  v1562 = 0u;
  v1559 = 0u;
  v1560 = 0u;
  v1557 = 0u;
  v1558 = 0u;
  v1556 = 0u;
  v1146 = fabs(v1142);
  v1147 = v1141 + 20032;
  v1148 = 0.0;
  v1554 = 0u;
  v1555 = 0u;
  v1552 = 0u;
  v1553 = 0u;
  v1550 = 0u;
  v1551 = 0u;
  v1149 = v1141 + 8384;
  v1548 = 0u;
  v1549 = 0u;
  v1150 = 0.0;
  v1151 = 0.0;
  *(_OWORD *)v1547 = 0u;
  v1152 = 0.0;
  do
  {
    if (Is_Legal(*(_DWORD *)(v1144 + 4 * v1145)))
    {
      if (*(_BYTE *)(v1141 + v1145 + 2960) || (v1546 = 0.0, !R8_EQ((const double *)(v1141 + 8 * v1145 + 7616), &v1546)))
      {
        v1153 = 0;
        v1154 = 0.0;
        do
        {
          v1154 = v1154 + *(double *)&v1574[v1153] * *(double *)(v1147 + v1153 * 4);
          v1153 += 2;
        }
        while (v1153 != 6);
        if (v1146 > 0.5)
          v1154 = v1154 - *(double *)(v1141 + 56 * v1145 + 20080) * v1142;
        v1155 = v1154 + *(double *)(v1141 + 2808 + 8 * v1145 + 4808);
        *((double *)v1571 + v1145) = v1155;
        v1156 = *(_DWORD *)(v1141 + 2808 + 4 * v1145 + 248);
        if ((v1156 - 1) >= 0x1D)
        {
          if (v1156)
          {
            EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
          }
          else
          {
            v1161 = 1.0 / *(double *)(v1141 + 8 * v1145 + 6848);
            v1152 = v1152 + v1161 * v1155;
            v1151 = v1151 + v1161;
          }
        }
      }
      if (*(_BYTE *)(v1141 + v1145 + 8536)
        || (v1546 = 0.0, !R8_EQ((const double *)(v1141 + 8 * v1145 + 13192), &v1546)))
      {
        v1157 = 0;
        v1158 = 0.0;
        do
        {
          v1158 = v1158 + *(double *)&v1572[v1157] * *(double *)(v1147 + v1157 * 4);
          v1157 += 2;
        }
        while (v1157 != 6);
        v1159 = v1158 + *(double *)(v1149 + 8 * v1145 + 4808);
        *(double *)&v1547[2 * v1145] = v1159;
        v1160 = *(_DWORD *)(v1149 + 4 * v1145 + 248);
        if ((v1160 - 1) >= 0x1D)
        {
          if (v1160)
          {
            EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
          }
          else
          {
            v1162 = 1.0 / *(double *)(v1141 + 8 * v1145 + 12424);
            v1150 = v1150 + v1162 * v1159;
            v1148 = v1148 + v1162;
          }
        }
      }
    }
    ++v1145;
    v1147 += 56;
  }
  while (v1145 != 48);
  v1163 = 0;
  v1164 = 0;
  if (v1151 <= 0.0 || v1152 == 0.0)
    v1167 = 0.0;
  else
    v1167 = v1152 / v1151;
  if (v1148 <= 0.0 || v1150 == 0.0)
    v1170 = 0.0;
  else
    v1170 = v1150 / v1148;
  v1171 = v1141 + 7616;
  do
  {
    if (Is_Legal(*(_DWORD *)(v1144 + 4 * v1164)))
    {
      if (*(_BYTE *)(v1141 + v1164 + 2960) || (v1546 = 0.0, !R8_EQ((const double *)(v1171 + v1163), &v1546)))
        *((double *)v1571 + v1164) = *((double *)v1571 + v1164) - v1167;
      if (*(_BYTE *)(v1171 + v1164 + 920) || (v1546 = 0.0, !R8_EQ((const double *)(v1141 + 13192 + v1163), &v1546)))
        *(double *)&v1547[2 * v1164] = (*(double *)&v1547[2 * v1164] - v1170) * 5.25503547;
    }
    ++v1164;
    v1163 += 8;
  }
  while (v1164 != 48);
  v1172 = 0;
  v1525 = (_DWORD *)(v1530 + 17512);
  v1521 = v1141 + 8384;
  v1173 = (unsigned __int16 *)&unk_25400F000;
  v1174 = v1535;
  while (2)
  {
    v1175 = v1174 + 4 * v1172;
    v1177 = *(unsigned __int8 *)(v1175 + 76);
    v1176 = (unsigned __int8 *)(v1175 + 76);
    if (v1177)
    {
      if (v1173[1212] > 2u || *(_DWORD *)(v1536 + 4 * v1172 + 1160) >= 4)
      {
        v1537 = *(_DWORD *)(v1536 + 4 * v1172 + 1160);
        v1179 = v1176[2];
        if (v1176[2])
          v1534 = GNSS_Id_To_Num_Prn_Idx(*(_DWORD *)v1176);
        else
          v1534 = 0;
        v1180 = *v1140;
        v1181 = 83;
        v1182 = 1u;
        do
        {
          *v1140 = v1180 + 1;
          *v1180 = v1181;
          v1180 = *v1140;
          if (*v1140 >= v1140[3])
          {
            v1180 = v1140[2];
            *v1140 = v1180;
          }
          v1181 = aSv[v1182++];
        }
        while (v1182 != 4);
        v1183 = ch_CONSTELL_ID[*v1176];
        *v1140 = v1180 + 1;
        *v1180 = v1183;
        v1184 = *v1140;
        if (*v1140 >= v1140[3])
        {
          v1184 = v1140[2];
          *v1140 = v1184;
        }
        v1185 = ch_GNSS_SIGID[v1176[1]];
        *v1140 = v1184 + 1;
        *v1184 = v1185;
        if (*v1140 >= v1140[3])
          *v1140 = v1140[2];
        sprintf_4d(v1140, v1179);
        sprintf_3d(v1140, (char)v1176[3]);
        if (*v1176 == 2)
          v1186 = (char)v1176[3] + 8;
        else
          v1186 = 0;
        sprintf_3d(v1140, v1186);
        v1541 = v1174 + v1172;
        sprintf_3d(v1140, *(unsigned __int8 *)(v1174 + v1172 + 268));
        v1187 = (*v1140)++;
        *v1187 = 32;
        if (*v1140 >= v1140[3])
          *v1140 = v1140[2];
        v1188 = v1174 + 2 * v1172;
        sprintf_04x(v1140, *(unsigned __int16 *)(v1188 + 316));
        sprintf_3d(v1140, *(_DWORD *)(v1174 + 4 * v1172 + 412));
        LOBYTE(v1189) = *(_BYTE *)(v1541 + 604);
        LOBYTE(v1190) = *(_BYTE *)(v1541 + 652);
        v1191 = ((double)v1189 + (double)v1190 * 0.0625) * 10.0;
        if (v1191 <= 0.0)
          v1192 = -0.5;
        else
          v1192 = 0.5;
        v1193 = v1191 + v1192;
        if (v1193 <= 2147483650.0)
        {
          if (v1193 >= -2147483650.0)
            v1194 = (int)v1193;
          else
            v1194 = 0x80000000;
        }
        else
        {
          v1194 = 0x7FFFFFFF;
        }
        sprintf_4f((uint64_t)v1140, v1194, 2);
        LOBYTE(v1195) = *(_BYTE *)(v1174 + v1172 + 700);
        LOBYTE(v1196) = *(_BYTE *)(v1174 + v1172 + 748);
        v1197 = ((double)v1195 + (double)v1196 * 0.0625) * 10.0;
        if (v1197 <= 0.0)
          v1198 = -0.5;
        else
          v1198 = 0.5;
        v1199 = v1197 + v1198;
        if (v1199 <= 2147483650.0)
        {
          if (v1199 >= -2147483650.0)
            v1200 = (int)v1199;
          else
            v1200 = 0x80000000;
        }
        else
        {
          v1200 = 0x7FFFFFFF;
        }
        sprintf_4f((uint64_t)v1140, v1200, 2);
        v1201 = *(_WORD *)(v1188 + 316);
        if ((v1201 & 8) != 0)
        {
          if ((v1201 & 0xC0) != 0)
          {
            v1202 = (unsigned __int16 *)(v1174 + 2 * v1172 + 1036);
          }
          else if ((v1201 & 0x30) != 0)
          {
            v1202 = (unsigned __int16 *)(v1174 + 2 * v1172 + 940);
          }
          else
          {
            v1202 = (unsigned __int16 *)(v1174 + 2 * v1172 + 844);
          }
        }
        else
        {
          v1202 = (unsigned __int16 *)(v1174 + 2 * v1172 + 844);
        }
        sprintf_6d(v1140, *v1202);
        if (!v1179 || v1537 == 3)
        {
          strcpy((char *)v1574, "    0");
          v1204 = *v1140;
          LOBYTE(v1205) = 32;
          v1206 = 1;
          do
          {
            *v1140 = v1204 + 1;
            *v1204 = v1205;
            v1204 = *v1140;
            if (*v1140 >= v1140[3])
            {
              v1204 = v1140[2];
              *v1140 = v1204;
            }
            v1205 = *((unsigned __int8 *)v1574 + v1206++);
          }
          while (v1205);
          strcpy((char *)v1574, "  0");
          v1207 = *v1140;
          LOBYTE(v1208) = 32;
          v1209 = 1;
          do
          {
            *v1140 = v1207 + 1;
            *v1207 = v1208;
            v1207 = *v1140;
            if (*v1140 >= v1140[3])
            {
              v1207 = v1140[2];
              *v1140 = v1207;
            }
            v1208 = *((unsigned __int8 *)v1574 + v1209++);
          }
          while (v1208);
          strcpy((char *)v1574, "   0");
          v1210 = *v1140;
          LOBYTE(v1211) = 32;
          v1212 = 1;
          do
          {
            *v1140 = v1210 + 1;
            *v1210 = v1211;
            v1210 = *v1140;
            if (*v1140 >= v1140[3])
            {
              v1210 = v1140[2];
              *v1140 = v1210;
            }
            v1211 = *((unsigned __int8 *)v1574 + v1212++);
          }
          while (v1211);
        }
        else
        {
          if (*(_BYTE *)(v1141 + v1172 + 49) && (v1203 = v1532 + 2 * v1172, *(_WORD *)(v1203 + 7744)))
          {
            sprintf_5d(v1140, *(unsigned __int16 *)(v1203 + 7744));
          }
          else
          {
            v1213 = *v1140;
            for (i8 = 5; i8 > 1; --i8)
            {
              *v1140 = v1213 + 1;
              *v1213 = 32;
              v1213 = *v1140;
              if (*v1140 >= v1140[3])
              {
                v1213 = v1140[2];
                *v1140 = v1213;
              }
            }
            if (*(__int16 *)(v1141 + 2 * v1172 + 25476) < 0)
            {
              *v1140 = v1213 + 1;
              v1216 = 120;
            }
            else if (*v1176 == 3
                   && (v1215 = v1179 - 1, *(_BYTE *)(v1522 + v1215 + 16700))
                   && !*(_BYTE *)(*(_QWORD *)(v1522 + 16608) + v1215))
            {
              *v1140 = v1213 + 1;
              v1216 = 109;
            }
            else
            {
              v1216 = ch_EPH_ALM[*(unsigned int *)(v1523 + 192 * *(unsigned __int16 *)(v1141 + 2 * v1172 + 25476) + 184)];
              *v1140 = v1213 + 1;
            }
            *v1213 = v1216;
            if (*v1140 >= v1140[3])
              *v1140 = v1140[2];
          }
          v1217 = *(char *)(v1527 + (int)GNSS_Id_To_Num_Prn_Idx(*(_DWORD *)v1176));
          if (v1217 <= -9)
            v1218 = -9;
          else
            v1218 = v1217;
          sprintf_3d(v1140, v1218);
          v1219 = *(unsigned __int16 *)(v1527 + 2 * (int)GNSS_Id_To_Num_Prn_Idx(*(_DWORD *)v1176) + 178);
          if ((v1219 & 0x8000) != 0)
          {
            v1220 = 0;
            v1221 = *v1140;
            v1222 = 32;
            do
            {
              *v1140 = v1221 + 1;
              *v1221 = v1222;
              v1221 = *v1140;
              if (*v1140 >= v1140[3])
              {
                v1221 = v1140[2];
                *v1140 = v1221;
              }
              v1222 = a0[++v1220];
            }
            while (v1220 != 4);
          }
          else
          {
            sprintf_4d(v1140, v1219);
          }
        }
        v1223 = (*v1140)++;
        *v1223 = 32;
        if (*v1140 >= v1140[3])
          *v1140 = v1140[2];
        sprintf_sgR8(v1140, *(double *)(v1141 + 2808 + 8 * v1172 + 2408));
        v1224 = (_BYTE *)(v1141 + 2808 + v1172 + 152);
        if (*v1224)
        {
          if (*(_BYTE *)(v1141 + v1172 + 6368))
            v1225 = 3;
          else
            v1225 = 1;
          if (*(_BYTE *)(v1141 + v1172 + 6800))
            v1226 = v1225 | 4;
          else
            v1226 = v1225;
        }
        else
        {
          v1226 = 0;
        }
        sprintf_2d(v1140, v1226);
        v1227 = *(int *)(v1141 + 4 * v1172 + 3056);
        if (v1227 >= 0x1D)
        {
          gn_report_assertion_failure("SV_Meas_Edit_Char");
          v1228 = 120;
        }
        else
        {
          v1228 = aGhkmnpqrstvyac[v1227];
        }
        v1229 = (*v1140)++;
        *v1229 = v1228;
        v1230 = *v1140;
        if (*v1140 >= v1140[3])
          v1230 = v1140[2];
        *v1140 = v1230 + 1;
        *v1230 = 32;
        if (*v1140 >= v1140[3])
          *v1140 = v1140[2];
        v1231 = (_BYTE *)(v1141 + v1172 + 14112);
        if (*v1231 || (v1232 = *(_DWORD *)(v1141 + 4 * v1172 + 14208), (v1232 - 1) < 0x1D))
        {
LABEL_2184:
          sprintf_sgR8(v1140, *(double *)(v1141 + 8 * v1172 + 16752));
          if (*v1231)
          {
            if (*(_BYTE *)(v1141 + v1172 + 17520))
              v1233 = 3;
            else
              v1233 = 1;
            if (*(_BYTE *)(v1141 + v1172 + 17952))
              v1234 = v1233 | 4;
            else
              v1234 = v1233;
          }
          else
          {
            v1234 = 0;
          }
          sprintf_2d(v1140, v1234);
          v1235 = *(int *)(v1141 + 4 * v1172 + 14208);
          if (v1235 >= 0x1D)
          {
            gn_report_assertion_failure("SV_Meas_Edit_Char");
            v1236 = 120;
          }
          else
          {
            v1236 = aGhkmnpqrstvyac[v1235];
          }
          v1237 = (*v1140)++;
          *v1237 = v1236;
          v1238 = *v1140;
          if (*v1140 >= v1140[3])
          {
            v1238 = v1140[2];
            *v1140 = v1238;
          }
          v1239 = " 1 ";
        }
        else
        {
          if (v1232)
          {
            EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
            goto LABEL_2184;
          }
          sprintf_sgR8(v1140, *(double *)(v1521 + 8 * v1172 + 2792));
          if (*(_BYTE *)(v1521 + v1172 + 152))
          {
            if (*(_BYTE *)(v1141 + v1172 + 11944))
              v1363 = 3;
            else
              v1363 = 1;
            if (*(_BYTE *)(v1141 + v1172 + 12376))
              v1364 = v1363 | 4;
            else
              v1364 = v1363;
          }
          else
          {
            v1364 = 0;
          }
          sprintf_2d(v1140, v1364);
          v1382 = *(int *)(v1141 + 4 * v1172 + 8632);
          v1231 = (_BYTE *)(v1141 + v1172 + 14112);
          if (v1382 >= 0x1D)
          {
            gn_report_assertion_failure("SV_Meas_Edit_Char");
            v1383 = 120;
          }
          else
          {
            v1383 = aGhkmnpqrstvyac[v1382];
          }
          v1384 = (*v1140)++;
          *v1384 = v1383;
          v1238 = *v1140;
          if (*v1140 >= v1140[3])
          {
            v1238 = v1140[2];
            *v1140 = v1238;
          }
          v1239 = " 2 ";
          if (!*(_BYTE *)(v1141 + v1172 + 19536))
            v1239 = " 0 ";
        }
        v1240 = *v1239;
        if (*v1239)
        {
          v1241 = (unsigned __int8 *)(v1239 + 1);
          do
          {
            *v1140 = v1238 + 1;
            *v1238 = v1240;
            v1238 = *v1140;
            if (*v1140 >= v1140[3])
            {
              v1238 = v1140[2];
              *v1140 = v1238;
            }
            v1242 = *v1241++;
            v1240 = v1242;
          }
          while (v1242);
        }
        if (v1179 && v1537 == 1)
        {
          v1243 = *(char *)(v1531 + (int)GNSS_Id_To_Num_Prn_Idx(*(_DWORD *)v1176) + 3996);
          if (v1243 < 0 || !*(_BYTE *)(v1531 + 48 * v1243 + 64))
          {
            if (v1179 <= 0x20)
              v1244 = (int)((double)-*(__int16 *)(v1531 + 24) * 1.57542);
            else
              v1244 = -9999;
          }
          else
          {
            v1244 = *(__int16 *)(v1531 + 48 * v1243 + 82);
          }
        }
        else
        {
          v1244 = (int)*(double *)(v1535 + 8 * v1172 + 1616);
        }
        sprintf_6d(v1140, v1244);
        v1245 = (*v1140)++;
        *v1245 = 32;
        v1246 = *v1140;
        if (*v1140 >= v1140[3])
        {
          v1246 = v1140[2];
          *v1140 = v1246;
        }
        if ((Is_Legal(*(_DWORD *)v1176) & 1) != 0)
        {
          v1247 = *(_DWORD *)v1141 - *(_DWORD *)(v1526 + 4 * v1172 + 416);
          if (v1247 >= -999)
          {
            v1253 = v1247 / 1000;
            if (v1253 >= 9)
              v1248 = 9;
            else
              v1248 = v1253;
          }
          else
          {
            v1248 = 0;
          }
          sprintf_2d(v1140, v1248);
          if (!v1179)
            goto LABEL_2228;
LABEL_2222:
          if (*(char *)(v1531 + v1534 + 3996) < 0)
          {
            v1252 = (int)((double)-*(__int16 *)(v1531 + 24) * 1.57542) / 10;
            v1179 = (5381 * *(unsigned __int16 *)(v1531 + 4)) >> 10;
          }
          else
          {
            v1251 = v1531 + 48 * *(unsigned __int8 *)(v1531 + v1534 + 3996);
            v1252 = *(unsigned __int16 *)(v1251 + 86);
            v1179 = *(unsigned __int16 *)(v1251 + 78);
          }
        }
        else
        {
          v1249 = 0;
          v1250 = 32;
          do
          {
            *v1140 = v1246 + 1;
            *v1246 = v1250;
            v1246 = *v1140;
            if (*v1140 >= v1140[3])
            {
              v1246 = v1140[2];
              *v1140 = v1246;
            }
            v1250 = aX[++v1249];
          }
          while (v1249 != 2);
          if (v1179)
            goto LABEL_2222;
LABEL_2228:
          v1252 = 0;
        }
        sprintf_5d(v1140, v1252);
        sprintf_6d(v1140, v1179);
        if (Is_Legal(*(_DWORD *)v1176))
        {
          v1254 = (__int16 *)(v1533 + 2 * v1172);
          sprintf_5d(v1140, *v1254);
          sprintf_6d(v1140, v1254[48]);
        }
        else
        {
          v1255 = *v1140;
          v1256 = 32;
          v1257 = 1u;
          do
          {
            *v1140 = v1255 + 1;
            *v1255 = v1256;
            v1255 = *v1140;
            if (*v1140 >= v1140[3])
            {
              v1255 = v1140[2];
              *v1140 = v1255;
            }
            v1256 = a00_0[v1257++];
          }
          while (v1257 != 12);
        }
        v1258 = *v1224;
        v1174 = v1535;
        if (v1258 || (v1259 = *(_DWORD *)(v1141 + 4 * v1172 + 3056), (v1259 - 1) < 0x1D))
        {
LABEL_2238:
          v1260 = v1141 + 8 * v1172;
          sprintf_sgR8(v1140, *(double *)(v1260 + 7616));
          v1261 = sqrt(*(double *)(v1260 + 6848));
          if (v1261 <= v1529)
          {
            if (v1261 <= 999.9)
            {
              v1268 = v1261 * 10.0;
              if (v1268 <= 0.0)
                v1269 = -0.5;
              else
                v1269 = 0.5;
              v1270 = v1268 + v1269;
              if (v1270 <= 2147483650.0)
              {
                if (v1270 >= -2147483650.0)
                  v1271 = (int)v1270;
                else
                  v1271 = 0x80000000;
              }
              else
              {
                v1271 = 0x7FFFFFFF;
              }
              sprintf_5f((uint64_t)v1140, v1271, 2);
            }
            else
            {
              if (v1261 <= 0.0)
                v1265 = -0.5;
              else
                v1265 = 0.5;
              v1266 = v1261 + v1265;
              if (v1266 <= 2147483650.0)
              {
                if (v1266 >= -2147483650.0)
                  v1267 = (int)v1266;
                else
                  v1267 = 0x80000000;
              }
              else
              {
                v1267 = 0x7FFFFFFF;
              }
              sprintf_6d(v1140, v1267);
            }
          }
          else
          {
            v1262 = *v1140;
            v1263 = 32;
            v1264 = 1u;
            do
            {
              *v1140 = v1262 + 1;
              *v1262 = v1263;
              v1262 = *v1140;
              if (*v1140 >= v1140[3])
              {
                v1262 = v1140[2];
                *v1140 = v1262;
              }
              v1263 = a99999[v1264++];
            }
            while (v1264 != 7);
          }
          if (*v1231 || (v1272 = *(_DWORD *)(v1141 + 4 * v1172 + 14208), (v1272 - 1) < 0x1D))
          {
LABEL_2265:
            v1273 = v1141 + 8 * v1172;
            sprintf_sgR8(v1140, *(double *)(v1273 + 18768));
            v1274 = sqrt(*(double *)(v1273 + 18000));
            v1275 = v1274 * 1000.0;
            v1276 = v1274 < 9.89999962;
            v1277 = 9899.99962;
            if (v1276)
              v1277 = v1275;
            if (v1277 <= 0.0)
              v1278 = -0.5;
            else
              v1278 = 0.5;
            v1279 = v1277 + v1278;
            if (v1279 <= 2147483650.0)
            {
              if (v1279 >= -2147483650.0)
                v1280 = (int)v1279;
              else
                v1280 = 0x80000000;
            }
            else
            {
              v1280 = 0x7FFFFFFF;
            }
            v1281 = (uint64_t)v1140;
            v1282 = 4;
          }
          else
          {
            if (v1272)
            {
              EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
              goto LABEL_2265;
            }
            v1367 = v1141 + 8 * v1172;
            sprintf_sgR8(v1140, *(double *)(v1367 + 13192));
            v1368 = sqrt(*(double *)(v1367 + 12424));
            v1369 = v1368 * 100.0;
            v1276 = v1368 < 99.9000015;
            v1370 = 9990.00015;
            if (v1276)
              v1370 = v1369;
            if (v1370 <= 0.0)
              v1371 = -0.5;
            else
              v1371 = 0.5;
            v1372 = v1370 + v1371;
            if (v1372 <= 2147483650.0)
            {
              if (v1372 >= -2147483650.0)
                v1280 = (int)v1372;
              else
                v1280 = 0x80000000;
            }
            else
            {
              v1280 = 0x7FFFFFFF;
            }
            v1281 = (uint64_t)v1140;
            v1282 = 3;
          }
          sprintf_5f(v1281, v1280, v1282);
          sprintf_4d(v1140, *(unsigned __int8 *)(v1541 + 604) - *(unsigned __int8 *)(v1141 + v1172 + 978));
          v1283 = (*v1140)++;
          *v1283 = 32;
          if (*v1140 >= v1140[3])
            *v1140 = v1140[2];
          v1284 = v1533 + 8 * v1172;
          sprintf_sgR8(v1140, *(double *)(v1284 + 2432));
          v1285 = (gnss::GnssAdaptDevice *)sprintf_sgR8(v1140, *(double *)(v1284 + 2816));
          if (gnss::GnssAdaptDevice::Ga05_08CheckIfInertialFusionShouldBeEnabled(v1285))
          {
            v1286 = (*v1525 - 1);
            if (*v1525 - 1 < 0)
            {
              v1292 = " |    0.000 0~   0.0    0.000 0~   0.0    0.000    0.000    0.000    0.000 |";
            }
            else
            {
              v1528 = v1231;
              v1287 = 4 * (*v1525 - 1);
              v1288 = v1286 + 1652;
              v1289 = 144 * v1286 + 17552;
              v1290 = 8 * (*v1525 - 1);
              while (*(_DWORD *)(v1530 + v1287 + 400) != v1176[2] || *(_DWORD *)(v1530 + v1287 + 592) != *v1176)
              {
                v1291 = v1288 - 1652;
                --v1288;
                v1289 -= 144;
                v1290 -= 8;
                v1287 -= 4;
                if (v1291 <= 0)
                {
                  v1292 = " |    0.000 0~   0.0    0.000 0~   0.0    0.000    0.000    0.000    0.000 |";
                  v1174 = v1535;
                  v1231 = v1528;
                  goto LABEL_2319;
                }
              }
              v1293 = *v1140;
              v1294 = 32;
              v1295 = 1u;
              do
              {
                *v1140 = v1293 + 1;
                *v1293 = v1294;
                v1293 = *v1140;
                if (*v1140 >= v1140[3])
                {
                  v1293 = v1140[2];
                  *v1140 = v1293;
                }
                v1294 = asc_21E797BF9[v1295++];
              }
              while (v1295 != 4);
              sprintf_sgR8(v1140, *(double *)(v1530 + v1290 + 2808));
              v1296 = (*v1140)++;
              *v1296 = 32;
              if (*v1140 >= v1140[3])
                *v1140 = v1140[2];
              sprintf1da(v1140, *(_DWORD *)(v1530 + v1287 + 1032) == 0, v1574, 0, 0);
              v1297 = *(int *)(v1530 + v1287 + 1032);
              if (v1297 >= 0x1D)
              {
                gn_report_assertion_failure("SV_Meas_Edit_Char");
                v1298 = 120;
              }
              else
              {
                v1298 = aGhkmnpqrstvyac[v1297];
              }
              v1231 = v1528;
              v1299 = (*v1140)++;
              *v1299 = v1298;
              v1300 = *v1140;
              if (*v1140 >= v1140[3])
                v1300 = v1140[2];
              *v1140 = v1300 + 1;
              *v1300 = 32;
              if (*v1140 >= v1140[3])
                *v1140 = v1140[2];
              sprintf_ACC(v1140, sqrt(*(double *)(v1530 + v1290 + 4824)));
              v1301 = (*v1140)++;
              *v1301 = 32;
              if (*v1140 >= v1140[3])
                *v1140 = v1140[2];
              sprintf_sgR8(v1140, *(double *)(v1530 + v1290 + 8384));
              v1302 = (*v1140)++;
              *v1302 = 32;
              if (*v1140 >= v1140[3])
                *v1140 = v1140[2];
              sprintf1da(v1140, *(_DWORD *)(v1530 + 4 * v1288) == 0, v1574, 0, 0);
              v1303 = *(int *)(v1530 + 4 * v1288);
              if (v1303 >= 0x1D)
              {
                gn_report_assertion_failure("SV_Meas_Edit_Char");
                v1304 = v1530;
                v1305 = 120;
              }
              else
              {
                v1304 = v1530;
                v1305 = aGhkmnpqrstvyac[v1303];
              }
              v1306 = (*v1140)++;
              *v1306 = v1305;
              v1307 = *v1140;
              if (*v1140 >= v1140[3])
                v1307 = v1140[2];
              *v1140 = v1307 + 1;
              *v1307 = 32;
              if (*v1140 >= v1140[3])
                *v1140 = v1140[2];
              sprintf_ACC(v1140, sqrt(*(double *)(v1304 + v1290 + 10400)));
              v1308 = (*v1140)++;
              *v1308 = 32;
              if (*v1140 >= v1140[3])
                *v1140 = v1140[2];
              sprintf_sgR8(v1140, *(double *)(v1530 + v1289));
              v1309 = (*v1140)++;
              *v1309 = 32;
              v1174 = v1535;
              if (*v1140 >= v1140[3])
                *v1140 = v1140[2];
              sprintf_sgR8(v1140, *(double *)(v1530 + v1289 + 96));
              v1310 = (*v1140)++;
              *v1310 = 32;
              if (*v1140 >= v1140[3])
                *v1140 = v1140[2];
              sprintf_sgR8(v1140, *(double *)(v1530 + v1289 + 8));
              v1311 = (*v1140)++;
              *v1311 = 32;
              if (*v1140 >= v1140[3])
                *v1140 = v1140[2];
              sprintf_sgR8(v1140, *(double *)(v1530 + v1289 + 104));
              v1292 = " |";
            }
LABEL_2319:
            v1312 = *v1292;
            if (*v1292)
            {
              v1313 = *v1140;
              v1314 = (unsigned __int8 *)(v1292 + 1);
              do
              {
                *v1140 = v1313 + 1;
                *v1313 = v1312;
                v1313 = *v1140;
                if (*v1140 >= v1140[3])
                {
                  v1313 = v1140[2];
                  *v1140 = v1313;
                }
                v1315 = *v1314++;
                v1312 = v1315;
              }
              while (v1315);
            }
          }
          sprintf_3d(v1140, *(unsigned __int8 *)(v1532 + v1172 + 6696));
          sprintf_sgR8(v1140, sqrt(*(double *)(v1532 + 8 * v1172 + 6312)));
          v1316 = sqrt(*(double *)(v1141 + 24 * v1172 + 3296)) * 10.0;
          if (v1316 <= 0.0)
            v1317 = -0.5;
          else
            v1317 = 0.5;
          v1318 = v1316 + v1317;
          if (v1318 <= 2147483650.0)
          {
            if (v1318 >= -2147483650.0)
              v1319 = (int)v1318;
            else
              v1319 = 0x80000000;
          }
          else
          {
            v1319 = 0x7FFFFFFF;
          }
          sprintf_5f((uint64_t)v1140, v1319, 2);
          v1320 = sqrt(*(double *)(v1141 + 24 * v1172 + 3304)) * 10.0;
          if (v1320 <= 0.0)
            v1321 = -0.5;
          else
            v1321 = 0.5;
          v1322 = v1320 + v1321;
          if (v1322 <= 2147483650.0)
          {
            if (v1322 >= -2147483650.0)
              v1323 = (int)v1322;
            else
              v1323 = 0x80000000;
          }
          else
          {
            v1323 = 0x7FFFFFFF;
          }
          sprintf_5f((uint64_t)v1140, v1323, 2);
          if (*v1231 || (v1324 = *(_DWORD *)(v1141 + 4 * v1172 + 14208), (v1324 - 1) < 0x1D))
          {
LABEL_2342:
            v1325 = sqrt(*(double *)(v1141 + 24 * v1172 + 14448)) * 10.0;
            if (v1325 <= 0.0)
              v1326 = -0.5;
            else
              v1326 = 0.5;
            v1327 = v1325 + v1326;
            if (v1327 <= 2147483650.0)
            {
              if (v1327 >= -2147483650.0)
                v1328 = (int)v1327;
              else
                v1328 = 0x80000000;
            }
            else
            {
              v1328 = 0x7FFFFFFF;
            }
            sprintf_4f((uint64_t)v1140, v1328, 2);
            v1329 = v1141 + 24 * v1172;
            v1330 = 14456;
          }
          else
          {
            if (v1324)
            {
              EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
              goto LABEL_2342;
            }
            v1373 = sqrt(*(double *)(v1141 + 24 * v1172 + 8872)) * 10.0;
            if (v1373 <= 0.0)
              v1374 = -0.5;
            else
              v1374 = 0.5;
            v1375 = v1373 + v1374;
            if (v1375 <= 2147483650.0)
            {
              if (v1375 >= -2147483650.0)
                v1376 = (int)v1375;
              else
                v1376 = 0x80000000;
            }
            else
            {
              v1376 = 0x7FFFFFFF;
            }
            sprintf_4f((uint64_t)v1140, v1376, 2);
            v1329 = v1141 + 24 * v1172;
            v1330 = 8880;
          }
          v1331 = sqrt(*(double *)(v1329 + v1330)) * 10.0;
          if (v1331 <= 0.0)
            v1332 = -0.5;
          else
            v1332 = 0.5;
          v1333 = v1331 + v1332;
          if (v1333 <= 2147483650.0)
          {
            if (v1333 >= -2147483650.0)
              v1334 = (int)v1333;
            else
              v1334 = 0x80000000;
          }
          else
          {
            v1334 = 0x7FFFFFFF;
          }
          sprintf_4f((uint64_t)v1140, v1334, 2);
          v1335 = v1141 + 8 * v1172;
          v1336 = fmin(*(double *)(v1335 + 4832), 999.900024);
          if (v1336 <= -999.900024)
            v1337 = -9999.00024;
          else
            v1337 = v1336 * 10.0;
          if (v1337 <= 0.0)
            v1338 = -0.5;
          else
            v1338 = 0.5;
          v1339 = v1337 + v1338;
          if (v1339 <= 2147483650.0)
          {
            if (v1339 >= -2147483650.0)
              v1340 = (int)v1339;
            else
              v1340 = 0x80000000;
          }
          else
          {
            v1340 = 0x7FFFFFFF;
          }
          sprintf_6f((uint64_t)v1140, v1340, 2);
          v1341 = sqrt(*(double *)(v1335 + 5984)) * 10.0;
          if (v1341 <= 0.0)
            v1342 = -0.5;
          else
            v1342 = 0.5;
          v1343 = v1341 + v1342;
          if (v1343 <= 2147483650.0)
          {
            if (v1343 >= -2147483650.0)
              v1344 = (int)v1343;
            else
              v1344 = 0x80000000;
          }
          else
          {
            v1344 = 0x7FFFFFFF;
          }
          sprintf_5f((uint64_t)v1140, v1344, 2);
          if (*v1231 || (v1345 = *(_DWORD *)(v1141 + 4 * v1172 + 14208), (v1345 - 1) < 0x1D))
          {
LABEL_2380:
            v1346 = v1141 + 8 * v1172;
            v1347 = fmin(*(double *)(v1346 + 15984), 99.9000015);
            if (v1347 <= -99.9000015)
              v1348 = -999.000015;
            else
              v1348 = v1347 * 10.0;
            if (v1348 <= 0.0)
              v1349 = -0.5;
            else
              v1349 = 0.5;
            v1350 = v1348 + v1349;
            if (v1350 <= 2147483650.0)
            {
              if (v1350 >= -2147483650.0)
                v1351 = (int)v1350;
              else
                v1351 = 0x80000000;
            }
            else
            {
              v1351 = 0x7FFFFFFF;
            }
            sprintf_5f((uint64_t)v1140, v1351, 2);
            v1352 = 17136;
          }
          else
          {
            if (v1345)
            {
              EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
              goto LABEL_2380;
            }
            v1346 = v1141 + 8 * v1172;
            v1377 = fmin(*(double *)(v1346 + 10408), 99.9000015);
            if (v1377 <= -99.9000015)
              v1378 = -999.000015;
            else
              v1378 = v1377 * 10.0;
            if (v1378 <= 0.0)
              v1379 = -0.5;
            else
              v1379 = 0.5;
            v1380 = v1378 + v1379;
            if (v1380 <= 2147483650.0)
            {
              if (v1380 >= -2147483650.0)
                v1381 = (int)v1380;
              else
                v1381 = 0x80000000;
            }
            else
            {
              v1381 = 0x7FFFFFFF;
            }
            sprintf_5f((uint64_t)v1140, v1381, 2);
            v1352 = 11560;
          }
          v1353 = sqrt(*(double *)(v1346 + v1352)) * 10.0;
          if (v1353 <= 0.0)
            v1354 = -0.5;
          else
            v1354 = 0.5;
          v1355 = v1353 + v1354;
          if (v1355 <= 2147483650.0)
          {
            if (v1355 >= -2147483650.0)
              v1356 = (int)v1355;
            else
              v1356 = 0x80000000;
          }
          else
          {
            v1356 = 0x7FFFFFFF;
          }
          sprintf_5f((uint64_t)v1140, v1356, 2);
        }
        else
        {
          if (v1259)
            goto LABEL_2429;
          if (*(_BYTE *)(v1141 + v1172 + 8536))
            goto LABEL_2238;
          v1365 = *(_DWORD *)(v1141 + 4 * v1172 + 8632);
          if ((v1365 - 1) < 0x1D)
            goto LABEL_2238;
          if (v1365)
            goto LABEL_2429;
          if (*v1231)
            goto LABEL_2238;
          v1366 = *(_DWORD *)(v1141 + 4 * v1172 + 14208);
          if ((v1366 - 1) < 0x1D)
            goto LABEL_2238;
          if (v1366)
          {
LABEL_2429:
            EvCrt_Illegal_Default("Any_SV_Meas_Edit", 0xA6u);
            goto LABEL_2238;
          }
        }
        v1357 = (*v1140)++;
        *v1357 = 32;
        if (*v1140 >= v1140[3])
          *v1140 = v1140[2];
        sprintf_2d(v1140, *(unsigned __int8 *)(v1174 + v1172 + 2912));
        v1358 = (*v1140)++;
        *v1358 = 32;
        if (*v1140 >= v1140[3])
          *v1140 = v1140[2];
        sprintf_2d(v1140, *(unsigned __int8 *)(v1174 + v1172 + 2960));
        v1359 = (*v1140)++;
        *v1359 = 32;
        if (*v1140 >= v1140[3])
          *v1140 = v1140[2];
        v1360 = v1174 + 2 * v1172;
        sprintf_2d(v1140, *(unsigned __int16 *)(v1360 + 3008));
        v1361 = (*v1140)++;
        *v1361 = 32;
        if (*v1140 >= v1140[3])
          *v1140 = v1140[2];
        sprintf_4d(v1140, *(unsigned __int16 *)(v1360 + 1132));
        v1362 = (*v1140)++;
        *v1362 = 10;
        if (*v1140 >= v1140[3])
          *v1140 = v1140[2];
        GNSS_Nav_Debug_Flush_Check((uint64_t)v1140);
        v1173 = (_WORD *)&unk_25400F000;
      }
    }
    if (++v1172 != 48)
      continue;
    break;
  }
  v1385 = 0;
  v1386 = (char **)v1524[46];
  v1387 = v1524[5];
  v1388 = v1524[10];
  v1389 = (unsigned __int8 *)v1524[8];
  v1390 = v1524[22];
  v1391 = v1524[29];
  v1392 = *v1386;
  v1393 = 84;
  do
  {
    *v1386 = v1392 + 1;
    *v1392 = v1393;
    v1392 = *v1386;
    if (*v1386 >= v1386[3])
    {
      v1392 = v1386[2];
      *v1386 = v1392;
    }
    v1393 = aTheEnd[++v1385];
  }
  while (v1385 != 8);
  v1394 = &ch_Pos_Confid[5 * *(unsigned int *)(v1388 + 12) + 1];
  v1395 = 32;
  do
  {
    *v1386 = v1392 + 1;
    *v1392 = v1395;
    v1392 = *v1386;
    if (*v1386 >= v1386[3])
    {
      v1392 = v1386[2];
      *v1386 = v1392;
    }
    v1396 = *v1394++;
    v1395 = v1396;
  }
  while (v1396);
  sprintf_sp1d(v1386, *(unsigned __int8 *)(v1390 + 235));
  sprintf_sp1d(v1386, *(_DWORD *)(v1391 + 972));
  sprintf_sp1d(v1386, *v1389);
  sprintf_sp1d(v1386, *(unsigned __int8 *)(v1390 + 234));
  v1397 = 0;
  v1398 = *v1386;
  v1399 = 32;
  do
  {
    *v1386 = v1398 + 1;
    *v1398 = v1399;
    v1398 = *v1386;
    if (*v1386 >= v1386[3])
    {
      v1398 = v1386[2];
      *v1386 = v1398;
    }
    v1399 = aVis[++v1397];
  }
  while (v1397 != 4);
  sprintf_3d(v1386, *(unsigned __int8 *)(v1387 + 6132));
  if (*(_BYTE *)(v1387 + 6132))
  {
    v1400 = 0;
    do
    {
      v1547[0] = 0;
      v1401 = v1387 + 2 * v1400;
      v1402 = *(unsigned __int16 *)(v1401 + 4174);
      if ((__int16)v1402 < 1)
      {
        v1407 = 0;
        v1408 = (__int16 *)(v1401 + 4174);
        v1409 = *v1386;
        v1410 = 32;
        do
        {
          *v1386 = v1409 + 1;
          *v1409 = v1410;
          v1409 = *v1386;
          if (*v1386 >= v1386[3])
          {
            v1409 = v1386[2];
            *v1386 = v1409;
          }
          v1410 = aX[++v1407];
        }
        while (v1407 != 2);
        v1403 = *v1408;
      }
      else
      {
        v1403 = LongPrnIdx_To_Prn(v1402 - 1, (int *)v1547);
        v1404 = (*v1386)++;
        *v1404 = 32;
        v1405 = *v1386;
        if (*v1386 >= v1386[3])
          v1405 = v1386[2];
        v1406 = ch_CONSTELL_ID[v1547[0]];
        *v1386 = v1405 + 1;
        *v1405 = v1406;
        if (*v1386 >= v1386[3])
          *v1386 = v1386[2];
      }
      if (v1403 >= 0)
        v1411 = v1403;
      else
        v1411 = -v1403;
      sprintf1da(v1386, v1411, v1571, 0, v1403 >> 31);
      ++v1400;
    }
    while (v1400 < *(unsigned __int8 *)(v1387 + 6132));
  }
  v1412 = *v1386;
  for (i9 = 3; i9 > 1; --i9)
  {
    *v1386 = v1412 + 1;
    *v1412 = 32;
    v1412 = *v1386;
    if (*v1386 >= v1386[3])
    {
      v1412 = v1386[2];
      *v1386 = v1412;
    }
  }
  sprintf_sp1d(v1386, *(unsigned __int8 *)(v1390 + 7172));
  sprintf_sgR8(v1386, *(double *)(v1391 + 2848));
  sprintf_sp1d(v1386, *(unsigned __int8 *)(v1391 + 2811));
  sprintf_sp1d(v1386, *(unsigned __int8 *)(v1391 + 24777));
  sprintf_sgR8(v1386, *(double *)(v1391 + 8424));
  sprintf_sp1d(v1386, *(unsigned __int8 *)(v1391 + 8387));
  sprintf_sp1d(v1386, *(unsigned __int8 *)(v1391 + 24779));
  sprintf_sp1d(v1386, *(unsigned __int16 *)(v1390 + 236));
  sprintf_sp1d(v1386, *(unsigned __int8 *)(v1391 + 24778));
  v1414 = (*v1386)++;
  *v1414 = 10;
  if (*v1386 >= v1386[3])
    *v1386 = v1386[2];
  result = GNSS_Nav_Debug_Flush_Check((uint64_t)v1386);
  if ((unsigned __int16)g_Enable_Nav_Debug >= 4u)
  {
    v1416 = (char **)v1524[46];
    v1418 = v1524[4];
    v1417 = (_BYTE *)v1524[5];
    v1419 = v1417 + 6132;
    v1420 = *(double *)(v1524[10] + 40);
    v1421 = -0.5;
    if (v1420 > 0.0)
      v1421 = 0.5;
    v1422 = v1420 + v1421;
    if (v1422 <= 2147483650.0)
    {
      if (v1422 >= -2147483650.0)
        v1423 = (int)v1422;
      else
        v1423 = 0x80000000;
    }
    else
    {
      v1423 = 0x7FFFFFFF;
    }
    v1424 = *v1416;
    v1425 = 69;
    v1426 = 1u;
    do
    {
      *v1416 = v1424 + 1;
      *v1424 = v1425;
      v1424 = *v1416;
      if (*v1416 >= v1416[3])
      {
        v1424 = v1416[2];
        *v1416 = v1424;
      }
      v1425 = aElev[v1426++];
    }
    while (v1426 != 6);
    v1427 = v1423 % 86400;
    sprintf_8d(v1416, v1423 % 86400);
    v1428 = *v1416;
    v1429 = 32;
    v1430 = 1u;
    do
    {
      *v1416 = v1428 + 1;
      *v1428 = v1429;
      v1428 = *v1416;
      if (*v1416 >= v1416[3])
      {
        v1428 = v1416[2];
        *v1416 = v1428;
      }
      v1429 = asc_21E797C84[v1430++];
    }
    while (v1430 != 6);
    v1431 = 0;
    while (1)
    {
      if (v1431 > 138)
      {
        if (v1431 == 0xFFFFFFFFLL || v1431 == 139)
        {
LABEL_2535:
          v1432 = *v1416;
          v1433 = 32;
          v1434 = 1u;
          do
          {
            *v1416 = v1432 + 1;
            *v1432 = v1433;
            v1432 = *v1416;
            if (*v1416 >= v1416[3])
            {
              v1432 = v1416[2];
              *v1416 = v1432;
            }
            v1433 = asc_21E797BF9[v1434++];
          }
          while (v1434 != 4);
        }
      }
      else if (v1431 == 32 || v1431 == 129)
      {
        goto LABEL_2535;
      }
      sprintf_4d(v1416, *(char *)(v1418 + v1431++));
      if (v1431 == 178)
      {
        v1435 = (*v1416)++;
        *v1435 = 10;
        if (*v1416 >= v1416[3])
          *v1416 = v1416[2];
        GNSS_Nav_Debug_Flush_Check((uint64_t)v1416);
        v1436 = *v1416;
        v1437 = 65;
        v1438 = 1u;
        do
        {
          *v1416 = v1436 + 1;
          *v1436 = v1437;
          v1436 = *v1416;
          if (*v1416 >= v1416[3])
          {
            v1436 = v1416[2];
            *v1416 = v1436;
          }
          v1437 = aAzim[v1438++];
        }
        while (v1438 != 6);
        sprintf_8d(v1416, v1427);
        v1439 = *v1416;
        v1440 = 32;
        v1441 = 1u;
        do
        {
          *v1416 = v1439 + 1;
          *v1439 = v1440;
          v1439 = *v1416;
          if (*v1416 >= v1416[3])
          {
            v1439 = v1416[2];
            *v1416 = v1439;
          }
          v1440 = asc_21E797C84[v1441++];
        }
        while (v1441 != 6);
        v1442 = 0;
        while (2)
        {
          if (v1442 > 138)
          {
            if (v1442 == 0xFFFFFFFFLL || v1442 == 139)
              goto LABEL_2557;
          }
          else
          {
            if (v1442 != 32 && v1442 != 129)
              goto LABEL_2561;
LABEL_2557:
            v1443 = *v1416;
            v1444 = 32;
            v1445 = 1u;
            do
            {
              *v1416 = v1443 + 1;
              *v1443 = v1444;
              v1443 = *v1416;
              if (*v1416 >= v1416[3])
              {
                v1443 = v1416[2];
                *v1416 = v1443;
              }
              v1444 = asc_21E797BF9[v1445++];
            }
            while (v1445 != 4);
          }
LABEL_2561:
          sprintf_4d(v1416, *(__int16 *)(v1418 + 2 * v1442++ + 178));
          if (v1442 != 178)
            continue;
          break;
        }
        v1446 = (*v1416)++;
        *v1446 = 10;
        if (*v1416 >= v1416[3])
          *v1416 = v1416[2];
        GNSS_Nav_Debug_Flush_Check((uint64_t)v1416);
        v1447 = *v1416;
        v1448 = 83;
        v1449 = 1u;
        do
        {
          *v1416 = v1447 + 1;
          *v1447 = v1448;
          v1447 = *v1416;
          if (*v1416 >= v1416[3])
          {
            v1447 = v1416[2];
            *v1416 = v1447;
          }
          v1448 = aSidx[v1449++];
        }
        while (v1449 != 6);
        sprintf_8d(v1416, v1427);
        v1450 = *v1416;
        v1451 = 32;
        v1452 = 1u;
        do
        {
          *v1416 = v1450 + 1;
          *v1450 = v1451;
          v1450 = *v1416;
          if (*v1416 >= v1416[3])
          {
            v1450 = v1416[2];
            *v1416 = v1450;
          }
          v1451 = asc_21E797C84[v1452++];
        }
        while (v1452 != 6);
        v1453 = 0;
        while (2)
        {
          if (v1453 > 138)
          {
            if (v1453 == 0xFFFFFFFFLL || v1453 == 139)
              goto LABEL_2579;
          }
          else
          {
            if (v1453 != 32 && v1453 != 129)
              goto LABEL_2583;
LABEL_2579:
            v1454 = *v1416;
            v1455 = 32;
            v1456 = 1u;
            do
            {
              *v1416 = v1454 + 1;
              *v1454 = v1455;
              v1454 = *v1416;
              if (*v1416 >= v1416[3])
              {
                v1454 = v1416[2];
                *v1416 = v1454;
              }
              v1455 = asc_21E797BF9[v1456++];
            }
            while (v1456 != 4);
          }
LABEL_2583:
          sprintf_4d(v1416, (char)v1417[v1453++ + 3996]);
          if (v1453 == 178)
          {
            v1457 = (*v1416)++;
            *v1457 = 10;
            if (*v1416 >= v1416[3])
              *v1416 = v1416[2];
            GNSS_Nav_Debug_Flush_Check((uint64_t)v1416);
            v1458 = *v1416;
            v1459 = 75;
            v1460 = 1u;
            do
            {
              *v1416 = v1458 + 1;
              *v1458 = v1459;
              v1458 = *v1416;
              if (*v1416 >= v1416[3])
              {
                v1458 = v1416[2];
                *v1416 = v1458;
              }
              v1459 = aKvis[v1460++];
            }
            while (v1460 != 6);
            sprintf_8d(v1416, v1427);
            v1461 = *v1416;
            v1462 = 32;
            v1463 = 1u;
            do
            {
              *v1416 = v1461 + 1;
              *v1461 = v1462;
              v1461 = *v1416;
              if (*v1416 >= v1416[3])
              {
                v1461 = v1416[2];
                *v1416 = v1461;
              }
              v1462 = asc_21E797C84[v1463++];
            }
            while (v1463 != 6);
            v1464 = 0;
            v1465 = *v1419;
            if (v1465 >= 0xAA)
              v1466 = 178;
            else
              v1466 = v1465 + 8;
            do
            {
              if (v1464 == *v1419)
              {
                v1467 = 0;
                v1468 = *v1416;
                v1469 = 32;
                do
                {
                  *v1416 = v1468 + 1;
                  *v1468 = v1469;
                  v1468 = *v1416;
                  if (*v1416 >= v1416[3])
                  {
                    v1468 = v1416[2];
                    *v1416 = v1468;
                  }
                  v1469 = asc_21E797C9C[++v1467];
                }
                while (v1467 != 4);
              }
              sprintf_4d(v1416, *(__int16 *)&v1417[2 * v1464++ + 4174]);
            }
            while (v1464 != v1466);
            v1470 = (*v1416)++;
            *v1470 = 10;
            if (*v1416 >= v1416[3])
              *v1416 = v1416[2];
            GNSS_Nav_Debug_Flush_Check((uint64_t)v1416);
            v1471 = *v1416;
            v1472 = 77;
            v1473 = 1u;
            do
            {
              *v1416 = v1471 + 1;
              *v1471 = v1472;
              v1471 = *v1416;
              if (*v1416 >= v1416[3])
              {
                v1471 = v1416[2];
                *v1416 = v1471;
              }
              v1472 = aMvis[v1473++];
            }
            while (v1473 != 6);
            sprintf_8d(v1416, v1427);
            v1474 = *v1416;
            v1475 = 32;
            v1476 = 1u;
            do
            {
              *v1416 = v1474 + 1;
              *v1474 = v1475;
              v1474 = *v1416;
              if (*v1416 >= v1416[3])
              {
                v1474 = v1416[2];
                *v1416 = v1474;
              }
              v1475 = asc_21E797C84[v1476++];
            }
            while (v1476 != 6);
            v1477 = 0;
            v1478 = v1417[6133];
            if (v1478 >= 0xAA)
              v1479 = 178;
            else
              v1479 = v1478 + 8;
            do
            {
              if (v1477 == v1417[6133])
              {
                v1480 = 0;
                v1481 = *v1416;
                v1482 = 32;
                do
                {
                  *v1416 = v1481 + 1;
                  *v1481 = v1482;
                  v1481 = *v1416;
                  if (*v1416 >= v1416[3])
                  {
                    v1481 = v1416[2];
                    *v1416 = v1481;
                  }
                  v1482 = asc_21E797C9C[++v1480];
                }
                while (v1480 != 4);
              }
              sprintf_4d(v1416, *(__int16 *)&v1417[2 * v1477++ + 4530]);
            }
            while (v1477 != v1479);
            v1483 = (*v1416)++;
            *v1483 = 10;
            if (*v1416 >= v1416[3])
              *v1416 = v1416[2];
            GNSS_Nav_Debug_Flush_Check((uint64_t)v1416);
            v1484 = *v1416;
            v1485 = 65;
            v1486 = 1u;
            do
            {
              *v1416 = v1484 + 1;
              *v1484 = v1485;
              v1484 = *v1416;
              if (*v1416 >= v1416[3])
              {
                v1484 = v1416[2];
                *v1416 = v1484;
              }
              v1485 = aAaok[v1486++];
            }
            while (v1486 != 6);
            sprintf_8d(v1416, v1427);
            v1487 = *v1416;
            v1488 = 32;
            v1489 = 1u;
            do
            {
              *v1416 = v1487 + 1;
              *v1487 = v1488;
              v1487 = *v1416;
              if (*v1416 >= v1416[3])
              {
                v1487 = v1416[2];
                *v1416 = v1487;
              }
              v1488 = asc_21E797C84[v1489++];
            }
            while (v1489 != 6);
            v1490 = 0;
            v1491 = v1417[6136];
            if (v1491 >= 0x4A)
              v1492 = 82;
            else
              v1492 = v1491 + 8;
            do
            {
              if (v1490 == v1417[6136])
              {
                v1493 = 0;
                v1494 = *v1416;
                v1495 = 32;
                do
                {
                  *v1416 = v1494 + 1;
                  *v1494 = v1495;
                  v1494 = *v1416;
                  if (*v1416 >= v1416[3])
                  {
                    v1494 = v1416[2];
                    *v1416 = v1494;
                  }
                  v1495 = asc_21E797C9C[++v1493];
                }
                while (v1493 != 4);
              }
              sprintf_4d(v1416, v1417[48 * v1490++ + 64]);
            }
            while (v1490 != v1492);
            v1496 = (*v1416)++;
            *v1496 = 10;
            if (*v1416 >= v1416[3])
              *v1416 = v1416[2];
            GNSS_Nav_Debug_Flush_Check((uint64_t)v1416);
            v1497 = *v1416;
            v1498 = 86;
            v1499 = 1u;
            do
            {
              *v1416 = v1497 + 1;
              *v1497 = v1498;
              v1497 = *v1416;
              if (*v1416 >= v1416[3])
              {
                v1497 = v1416[2];
                *v1416 = v1497;
              }
              v1498 = aViz[v1499++];
            }
            while (v1499 != 6);
            sprintf_8d(v1416, v1427);
            sprintf_5d(v1416, *v1419);
            sprintf_4d(v1416, v1417[6133]);
            sprintf_4d(v1416, v1417[6134]);
            sprintf_4d(v1416, v1417[6135]);
            sprintf_4d(v1416, v1417[6136]);
            if (*v1419)
            {
              v1500 = 0;
              do
              {
                v1547[0] = 0;
                v1501 = &v1417[2 * v1500];
                v1502 = *((unsigned __int16 *)v1501 + 2087);
                if ((__int16)v1502 < 1)
                {
                  v1507 = 0;
                  v1508 = (__int16 *)(v1501 + 4174);
                  v1509 = *v1416;
                  v1510 = 32;
                  do
                  {
                    *v1416 = v1509 + 1;
                    *v1509 = v1510;
                    v1509 = *v1416;
                    if (*v1416 >= v1416[3])
                    {
                      v1509 = v1416[2];
                      *v1416 = v1509;
                    }
                    v1510 = aX[++v1507];
                  }
                  while (v1507 != 2);
                  v1503 = *v1508;
                }
                else
                {
                  v1503 = LongPrnIdx_To_Prn(v1502 - 1, (int *)v1547);
                  v1504 = (*v1416)++;
                  *v1504 = 32;
                  v1505 = *v1416;
                  if (*v1416 >= v1416[3])
                    v1505 = v1416[2];
                  v1506 = ch_CONSTELL_ID[v1547[0]];
                  *v1416 = v1505 + 1;
                  *v1505 = v1506;
                  if (*v1416 >= v1416[3])
                    *v1416 = v1416[2];
                }
                if (v1503 >= 0)
                  v1511 = v1503;
                else
                  v1511 = -v1503;
                sprintf1da(v1416, v1511, v1571, 0, v1503 >> 31);
                ++v1500;
              }
              while (v1500 < *v1419);
            }
            v1512 = 0;
            v1513 = *v1416;
            v1514 = 32;
            do
            {
              *v1416 = v1513 + 1;
              *v1513 = v1514;
              v1513 = *v1416;
              if (*v1416 >= v1416[3])
              {
                v1513 = v1416[2];
                *v1416 = v1513;
              }
              v1514 = aGfvz[++v1512];
            }
            while (v1512 != 8);
            sprintf_4d(v1416, (char)v1417[6211]);
            sprintf_3d(v1416, (char)v1417[6210]);
            v1515 = 0;
            v1516 = *v1416;
            v1517 = 32;
            do
            {
              *v1416 = v1516 + 1;
              *v1516 = v1517;
              v1516 = *v1416;
              if (*v1416 >= v1416[3])
              {
                v1516 = v1416[2];
                *v1416 = v1516;
              }
              v1517 = asc_21E797762[++v1515];
            }
            while (v1515 != 2);
            v1518 = 0;
            v1519 = v1417 + 6196;
            do
              sprintf_3d(v1416, (char)v1519[v1518++]);
            while (v1518 != 14);
            v1520 = (*v1416)++;
            *v1520 = 10;
            if (*v1416 >= v1416[3])
              *v1416 = v1416[2];
            return GNSS_Nav_Debug_Flush_Check((uint64_t)v1416);
          }
          continue;
        }
      }
    }
  }
  return result;
}

_QWORD *print_line_LS(_QWORD *result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  double v9;
  double v10;
  double *v11;
  double *v12;
  const char *v13;
  char v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  _BYTE *v23;
  _BYTE *v24;
  char *v25;
  char v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  double v30;
  double v31;
  BOOL v32;
  double v33;
  double v34;
  double v35;
  unsigned int v36;
  uint64_t v37;
  char *v38;
  char v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  char *v43;
  char v44;
  _BYTE *v45;
  _BYTE *v46;
  char *v47;
  _BYTE *v48;
  char *v49;
  _BYTE *v50;
  char *v51;
  _BYTE *v52;
  char *v53;
  _BYTE *v54;
  char *v55;
  _BYTE *v56;
  char *v57;
  _BYTE *v58;
  char *v59;
  _BYTE *v60;
  char *v61;
  _BYTE *v62;
  char *v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  unsigned int v69;
  _BYTE *v70;
  char *v71;
  _BYTE *v72;
  char *v73;
  _BYTE *v74;
  char *v75;
  _BYTE *v76;
  char *v77;
  _BYTE *v78;
  char *v79;
  _BYTE *v80;
  char *v81;
  _BYTE *v82;
  char *v83;
  _BYTE *v84;
  char *v85;
  _BYTE *v86;

  v2 = result[46];
  v3 = result[10];
  v4 = result[22];
  v5 = (double *)result[35];
  switch(a2)
  {
    case 1:
      v6 = result[29];
      v7 = *(char *)(v6 + 26144);
      v8 = *(char *)(v6 + 26145);
      v9 = 0.0;
      if (*(char *)(v6 + 26143) < 0)
      {
        v10 = 9999000.0;
      }
      else
      {
        v10 = 9999000.0;
        if (*(double *)(v6 + 8 * *(unsigned __int8 *)(v6 + 26143) + 25848) <= 9999000.0)
        {
          v9 = *(double *)(v6 + 25664);
          v10 = *(double *)(v6 + 8 * *(unsigned __int8 *)(v6 + 26143) + 25848);
        }
      }
      v11 = (double *)(v6 + 25616);
      if ((v7 & 0x80000000) == 0 && v10 >= *(double *)(v6 + 8 * v7 + 25848))
      {
        v9 = *(double *)(v6 + 25680);
        v10 = *(double *)(v6 + 8 * v7 + 25848);
      }
      if ((v8 & 0x80000000) != 0 || v10 < *(double *)(v6 + 8 * v8 + 25848))
      {
        v13 = "LS_All ";
        goto LABEL_23;
      }
      v12 = (double *)(v6 + 25696);
      v13 = "LS_All ";
      break;
    case 2:
      if ((unsigned __int16)g_Enable_Nav_Debug < 3u)
        return result;
      v11 = v5 + 36;
      v12 = v5 + 42;
      v13 = "LS_GPS ";
      break;
    case 3:
      if ((unsigned __int16)g_Enable_Nav_Debug < 3u)
        return result;
      v11 = v5 + 103;
      v12 = v5 + 111;
      v13 = "LS_Glo ";
      break;
    case 4:
      if ((unsigned __int16)g_Enable_Nav_Debug < 3u)
        return result;
      v11 = v5 + 170;
      v12 = v5 + 176;
      v13 = "LS_GAL ";
      break;
    default:
      if ((unsigned __int16)g_Enable_Nav_Debug < 3u)
        return result;
      v11 = v5 + 237;
      v12 = v5 + 247;
      v13 = "LS_BDS ";
      break;
  }
  v9 = *v12;
LABEL_23:
  v14 = *v13;
  if (*v13)
  {
    v15 = *(char **)v2;
    v16 = (unsigned __int8 *)(v13 + 1);
    do
    {
      *(_QWORD *)v2 = v15 + 1;
      *v15 = v14;
      v15 = *(char **)v2;
      if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      {
        v15 = *(char **)(v2 + 16);
        *(_QWORD *)v2 = v15;
      }
      v17 = *v16++;
      v14 = v17;
    }
    while (v17);
  }
  v18 = 0;
  v19 = v4 + 27072;
  v20 = v3 + 208;
  do
  {
    if ((char)v11[51] < 0)
    {
      v21 = 0.0;
      if (!(_DWORD)v18)
        goto LABEL_37;
    }
    else
    {
      v21 = v11[v18 + 16] - *(double *)(v20 + 8 * v18);
      if (!(_DWORD)v18)
        goto LABEL_37;
    }
    if ((_DWORD)v18 != 1)
      goto LABEL_38;
    v22 = -6.28318531;
    if (v21 >= 3.14159265 || (v22 = 6.28318531, v21 < -3.14159265))
      v21 = v21 + v22;
LABEL_37:
    v21 = v21 * *(double *)(v19 + 8 * v18);
LABEL_38:
    v23 = (_BYTE *)(*(_QWORD *)v2)++;
    *v23 = 32;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
    sprintf_12f3((char **)v2, v21);
    ++v18;
  }
  while (v18 != 3);
  v24 = (_BYTE *)(*(_QWORD *)v2)++;
  *v24 = 32;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  sprintf_sgR8((_QWORD *)v2, v11[24]);
  sprintf_sgR8((_QWORD *)v2, -v11[23]);
  sprintf_6d((_QWORD *)v2, (int)v11[25]);
  v25 = *(char **)v2;
  v26 = 32;
  v27 = 1u;
  do
  {
    *(_QWORD *)v2 = v25 + 1;
    *v25 = v26;
    v25 = *(char **)v2;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    {
      v25 = *(char **)(v2 + 16);
      *(_QWORD *)v2 = v25;
    }
    v26 = aClk[v27++];
  }
  while (v27 != 6);
  sprintf_8d((_QWORD *)v2, (int)v9);
  sprintf_sgR8((_QWORD *)v2, v11[20]);
  sprintf_sgR8((_QWORD *)v2, v11[12]);
  v28 = (_BYTE *)(*(_QWORD *)v2)++;
  *v28 = 32;
  v29 = *(char **)v2;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    v29 = *(char **)(v2 + 16);
  *(_QWORD *)v2 = v29 + 1;
  *v29 = 80;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  sprintf_2d((_QWORD *)v2, *((unsigned __int8 *)v11 + 392));
  sprintf_3d((_QWORD *)v2, *((char *)v11 + 408));
  v30 = v11[50];
  v31 = v30 * 10.0;
  v32 = v30 < 9.89999962;
  v33 = 98.9999962;
  if (v32)
    v33 = v31;
  v34 = -0.5;
  if (v33 > 0.0)
    v34 = 0.5;
  v35 = v33 + v34;
  if (v35 <= 2147483650.0)
  {
    if (v35 >= -2147483650.0)
      v36 = (int)v35;
    else
      v36 = 0x80000000;
  }
  else
  {
    v36 = 0x7FFFFFFF;
  }
  sprintf_3f(v2, v36, 2);
  v37 = 0;
  v38 = *(char **)v2;
  v39 = 32;
  do
  {
    *(_QWORD *)v2 = v38 + 1;
    *v38 = v39;
    v38 = *(char **)v2;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    {
      v38 = *(char **)(v2 + 16);
      *(_QWORD *)v2 = v38;
    }
    v39 = aEl[++v37];
  }
  while (v37 != 4);
  sprintf_ACC((char **)v2, v11[26]);
  v40 = (_BYTE *)(*(_QWORD *)v2)++;
  *v40 = 32;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  sprintf_ACC((char **)v2, v11[27]);
  v41 = (_BYTE *)(*(_QWORD *)v2)++;
  *v41 = 32;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  sprintf_ACC((char **)v2, v11[28]);
  v42 = 0;
  v43 = *(char **)v2;
  v44 = 32;
  do
  {
    *(_QWORD *)v2 = v43 + 1;
    *v43 = v44;
    v43 = *(char **)v2;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    {
      v43 = *(char **)(v2 + 16);
      *(_QWORD *)v2 = v43;
    }
    v44 = aVf[++v42];
  }
  while (v42 != 4);
  sprintf_sgR8((_QWORD *)v2, v11[2]);
  v45 = (_BYTE *)(*(_QWORD *)v2)++;
  *v45 = 32;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  sprintf_sgR8((_QWORD *)v2, v11[4]);
  v46 = (_BYTE *)(*(_QWORD *)v2)++;
  *v46 = 32;
  v47 = *(char **)v2;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    v47 = *(char **)(v2 + 16);
  *(_QWORD *)v2 = v47 + 1;
  *v47 = 72;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  sprintf_6d((_QWORD *)v2, (int)fmin(v11[45], 99999.0));
  v48 = (_BYTE *)(*(_QWORD *)v2)++;
  *v48 = 32;
  v49 = *(char **)v2;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    v49 = *(char **)(v2 + 16);
  *(_QWORD *)v2 = v49 + 1;
  *v49 = 86;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  sprintf_6d((_QWORD *)v2, (int)fmin(v11[46], 99999.0));
  v50 = (_BYTE *)(*(_QWORD *)v2)++;
  *v50 = 32;
  v51 = *(char **)v2;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    v51 = *(char **)(v2 + 16);
  *(_QWORD *)v2 = v51 + 1;
  *v51 = 66;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  sprintf_6d((_QWORD *)v2, (int)fmin(v11[47], 99999.0));
  v52 = (_BYTE *)(*(_QWORD *)v2)++;
  *v52 = 32;
  v53 = *(char **)v2;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    v53 = *(char **)(v2 + 16);
  *(_QWORD *)v2 = v53 + 1;
  *v53 = 83;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  sprintf_6d((_QWORD *)v2, (int)fmin(v11[48], 99999.0));
  v54 = (_BYTE *)(*(_QWORD *)v2)++;
  *v54 = 32;
  v55 = *(char **)v2;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    v55 = *(char **)(v2 + 16);
  *(_QWORD *)v2 = v55 + 1;
  *v55 = 72;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  sprintf_3d((_QWORD *)v2, *((char *)v11 + 320));
  v56 = (_BYTE *)(*(_QWORD *)v2)++;
  *v56 = 32;
  v57 = *(char **)v2;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    v57 = *(char **)(v2 + 16);
  *(_QWORD *)v2 = v57 + 1;
  *v57 = 86;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  sprintf_3d((_QWORD *)v2, *((char *)v11 + 321));
  v58 = (_BYTE *)(*(_QWORD *)v2)++;
  *v58 = 32;
  v59 = *(char **)v2;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    v59 = *(char **)(v2 + 16);
  *(_QWORD *)v2 = v59 + 1;
  *v59 = 66;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  sprintf_3d((_QWORD *)v2, *((char *)v11 + 322));
  v60 = (_BYTE *)(*(_QWORD *)v2)++;
  *v60 = 32;
  v61 = *(char **)v2;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    v61 = *(char **)(v2 + 16);
  *(_QWORD *)v2 = v61 + 1;
  *v61 = 83;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  sprintf_3d((_QWORD *)v2, *((char *)v11 + 323));
  v62 = (_BYTE *)(*(_QWORD *)v2)++;
  *v62 = 32;
  v63 = *(char **)v2;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    v63 = *(char **)(v2 + 16);
  *(_QWORD *)v2 = v63 + 1;
  *v63 = 86;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  sprintf_2d((_QWORD *)v2, *((unsigned __int8 *)v11 + 488));
  sprintf_3d((_QWORD *)v2, *((char *)v11 + 504));
  v64 = v11[62];
  v65 = v64 * 100.0;
  v32 = v64 < 9.98999977;
  v66 = 998.999977;
  if (v32)
    v66 = v65;
  v67 = -0.5;
  if (v66 > 0.0)
    v67 = 0.5;
  v68 = v66 + v67;
  if (v68 <= 2147483650.0)
  {
    if (v68 >= -2147483650.0)
      v69 = (int)v68;
    else
      v69 = 0x80000000;
  }
  else
  {
    v69 = 0x7FFFFFFF;
  }
  sprintf_4f(v2, v69, 3);
  if ((unsigned __int16)g_Enable_Nav_Debug >= 2u)
  {
    v70 = (_BYTE *)(*(_QWORD *)v2)++;
    *v70 = 32;
    v71 = *(char **)v2;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      v71 = *(char **)(v2 + 16);
    *(_QWORD *)v2 = v71 + 1;
    *v71 = 72;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
    sprintf_3d((_QWORD *)v2, (int)fmin(v11[57], 99.0));
    v72 = (_BYTE *)(*(_QWORD *)v2)++;
    *v72 = 32;
    v73 = *(char **)v2;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      v73 = *(char **)(v2 + 16);
    *(_QWORD *)v2 = v73 + 1;
    *v73 = 86;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
    sprintf_3d((_QWORD *)v2, (int)fmin(v11[58], 99.0));
    v74 = (_BYTE *)(*(_QWORD *)v2)++;
    *v74 = 32;
    v75 = *(char **)v2;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      v75 = *(char **)(v2 + 16);
    *(_QWORD *)v2 = v75 + 1;
    *v75 = 66;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
    sprintf_3d((_QWORD *)v2, (int)fmin(v11[59], 99.0));
    v76 = (_BYTE *)(*(_QWORD *)v2)++;
    *v76 = 32;
    v77 = *(char **)v2;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      v77 = *(char **)(v2 + 16);
    *(_QWORD *)v2 = v77 + 1;
    *v77 = 83;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
    sprintf_3d((_QWORD *)v2, (int)fmin(v11[60], 99.0));
    v78 = (_BYTE *)(*(_QWORD *)v2)++;
    *v78 = 32;
    v79 = *(char **)v2;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      v79 = *(char **)(v2 + 16);
    *(_QWORD *)v2 = v79 + 1;
    *v79 = 72;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
    sprintf_3d((_QWORD *)v2, *((char *)v11 + 416));
    v80 = (_BYTE *)(*(_QWORD *)v2)++;
    *v80 = 32;
    v81 = *(char **)v2;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      v81 = *(char **)(v2 + 16);
    *(_QWORD *)v2 = v81 + 1;
    *v81 = 86;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
    sprintf_3d((_QWORD *)v2, *((char *)v11 + 417));
    v82 = (_BYTE *)(*(_QWORD *)v2)++;
    *v82 = 32;
    v83 = *(char **)v2;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      v83 = *(char **)(v2 + 16);
    *(_QWORD *)v2 = v83 + 1;
    *v83 = 66;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
    sprintf_3d((_QWORD *)v2, *((char *)v11 + 418));
    v84 = (_BYTE *)(*(_QWORD *)v2)++;
    *v84 = 32;
    v85 = *(char **)v2;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      v85 = *(char **)(v2 + 16);
    *(_QWORD *)v2 = v85 + 1;
    *v85 = 83;
    if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
      *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
    sprintf_3d((_QWORD *)v2, *((char *)v11 + 419));
  }
  v86 = (_BYTE *)(*(_QWORD *)v2)++;
  *v86 = 10;
  if (*(_QWORD *)v2 >= *(_QWORD *)(v2 + 24))
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 16);
  return (_QWORD *)GNSS_Nav_Debug_Flush_Check(v2);
}

const char *Get_Str_FIX_TYPE(unsigned int a1)
{
  if (a1 < 6)
    return off_24E2B0BA0[a1];
  EvCrt_Illegal_Default("Get_Str_FIX_TYPE", 0x10DAu);
  return "xx";
}

uint64_t sprintf_LaLo(char **a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  double v6;
  double v7;
  unsigned int v8;
  char v9;
  double v10;
  unsigned int v11;
  double v12;
  double v13;
  double v14;
  unsigned int v15;
  uint64_t result;
  char *v17;
  char v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;

  v4 = 0;
  v5 = 1;
  do
  {
    v6 = *(double *)(a2 + 8 * v4) * 57.2957795;
    v7 = -v6;
    if (v6 >= 0.0)
      v7 = *(double *)(a2 + 8 * v4) * 57.2957795;
    v8 = (int)v7;
    v9 = v5;
    v10 = (v7 - (double)(int)v7) * 60.0;
    v11 = (int)v10;
    v12 = (v10 - (double)(int)v10) * 60.0;
    sprintf_4d(a1, v8);
    sprintf_3d(a1, v11);
    if (v12 * 100000.0 <= 0.0)
      v13 = -0.5;
    else
      v13 = 0.5;
    v14 = v12 * 100000.0 + v13;
    if (v14 <= 2147483650.0)
    {
      if (v14 >= -2147483650.0)
        v15 = (int)v14;
      else
        v15 = 0x80000000;
    }
    else
    {
      v15 = 0x7FFFFFFF;
    }
    result = sprintf_8f((uint64_t)a1, v15, 6);
    v17 = &ch_NSEW[8 * v4];
    if (*(double *)(a2 + 8 * v4) < 0.0)
      v17 += 4;
    v18 = *v17;
    if (*v17)
    {
      v19 = *a1;
      v20 = (unsigned __int8 *)(v17 + 1);
      do
      {
        *a1 = v19 + 1;
        *v19 = v18;
        v19 = *a1;
        if (*a1 >= a1[3])
        {
          v19 = a1[2];
          *a1 = v19;
        }
        v21 = *v20++;
        v18 = v21;
      }
      while (v21);
    }
    v5 = 0;
    v4 = 1;
  }
  while ((v9 & 1) != 0);
  return result;
}

uint64_t Get_Char_Ass_Status_Edit(int a1)
{
  uint64_t result;

  result = 45;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 82;
      break;
    case 2:
    case 16:
    case 38:
      result = 65;
      break;
    case 3:
      result = 73;
      break;
    case 4:
      result = 83;
      break;
    case 5:
    case 39:
      result = 77;
      break;
    case 6:
    case 27:
    case 31:
      result = 68;
      break;
    case 7:
      result = 84;
      break;
    case 8:
    case 17:
      result = 66;
      break;
    case 9:
      result = 85;
      break;
    case 10:
    case 37:
      result = 80;
      break;
    case 11:
      result = 67;
      break;
    case 12:
      result = 86;
      break;
    case 13:
      goto LABEL_4;
    case 14:
      result = 88;
      break;
    case 15:
    case 30:
    case 34:
    case 36:
      result = 78;
      break;
    case 18:
      result = 72;
      break;
    case 19:
      result = 104;
      break;
    case 20:
      result = 54;
      break;
    case 21:
      result = 51;
      break;
    case 22:
      result = 55;
      break;
    case 23:
      result = 49;
      break;
    case 24:
      result = 50;
      break;
    case 25:
      result = 52;
      break;
    case 26:
      result = 79;
      break;
    case 28:
    case 32:
      result = 75;
      break;
    case 29:
    case 33:
    case 35:
      result = 69;
      break;
    default:
      if ((a1 - 1000) >= 0xE)
      {
        gn_report_assertion_failure("Ass_Status_Edit_Char");
        result = 120;
      }
      else
      {
LABEL_4:
        result = 76;
      }
      break;
  }
  return result;
}

size_t LOGASN1Error(uint64_t a1, uint64_t a2)
{
  size_t result;
  unint64_t v4;
  unsigned __int16 v5;
  unint64_t v6;
  char __str[1040];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  result = LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0);
  if (a2)
  {
    if (!(_DWORD)result)
      return result;
    bzero(__str, 0x410uLL);
    v4 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ErrorStr,%s, path,%s\n", v4, "PSP");
  }
  else
  {
    if (!(_DWORD)result)
      return result;
    bzero(__str, 0x410uLL);
    v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ErrorStr,%s\n", v6);
  }
  return LbsOsaTrace_WriteLog(0x13u, __str, v5, 0, 1);
}

uint64_t GN_AGLON_Set_Alm_El(unsigned __int16 *a1)
{
  uint64_t result;
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned __int16 v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  _DWORD v16[2];
  __int16 v17;
  char v18;
  char v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  char v24;
  __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  BOOL v28;
  char v29;
  char v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _BOOL4 v34;
  uint64_t v35;
  __int16 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  result = Is_GN_API_Set_Allowed("GN_AGLON_Set_Alm_El");
  if ((_DWORD)result)
  {
    if ((unsigned __int16)g_Enable_Event_Log >= 5u)
      EvLog_v("GN_AGLON_Set_Alm_El: %4d %2d %2d %8d %7d %7d %8d %3d %5d %4d %d %d %d %d", *a1, *((unsigned __int8 *)a1 + 2), *((unsigned __int8 *)a1 + 3), *((_DWORD *)a1 + 1), *((_DWORD *)a1 + 2), *((_DWORD *)a1 + 3), *((_DWORD *)a1 + 4), *((char *)a1 + 20), a1[11], (__int16)a1[12], (__int16)a1[13], *((unsigned __int8 *)a1 + 28), *((unsigned __int8 *)a1 + 29), *((unsigned __int8 *)a1 + 30));
    v3 = *((unsigned __int8 *)a1 + 2);
    if ((v3 - 25) <= 0xFFFFFFE7)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: Sat_ID = %d <%d or >%d, Out of range!");
      return 0;
    }
    v4 = *a1;
    if ((v4 - 1462) <= 0xFFFFFA4A)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmNA = %d <1 or >%d, Out of range!");
      return 0;
    }
    v5 = *((unsigned __int8 *)a1 + 3);
    if (v5 >= 0x20)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmHA = %d >31, Out of range!");
      return 0;
    }
    v6 = *((_DWORD *)a1 + 1);
    if ((v6 - 0x100000) >> 21 != 2047)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmLambdaA = %d <-2^20 or >=2^20, Out of range!");
      return 0;
    }
    v7 = *((_DWORD *)a1 + 2);
    if (v7 >= 0x200000)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmtlambdaA = %d >=2^21, Out of range!");
      return 0;
    }
    v8 = *((_DWORD *)a1 + 3);
    if ((v8 - 0x20000) <= 0xFFFBFFFF)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmDeltaIa = %d <-2^17 or >=2^17, Out of range!");
      return 0;
    }
    v9 = *((_DWORD *)a1 + 4);
    if ((v9 - 0x200000) >> 22 != 1023)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmDeltaTA = %d <-2^21 or >=2^21, Out of range!");
      return 0;
    }
    v10 = *((char *)a1 + 20);
    if (((v10 - 64) & 0x80) == 0)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmDeltaTdotA = %d <-2^6 or >=2^6, Out of range!");
      return 0;
    }
    v11 = (__int16)a1[11];
    if (v11 < 0)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmEpsilonA = %d >=2^15, Out of range!");
      return 0;
    }
    v12 = a1[13];
    if ((unsigned __int16)((unsigned __int16)(v12 - 512) >> 10) <= 0x3Eu)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmTauA = %d <-2^9 or >=2^9, Out of range!");
      return 0;
    }
    v13 = *((unsigned __int8 *)a1 + 28);
    if (v13 >= 2)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmCA = %d >1, Out of range!");
      return 0;
    }
    v14 = *((unsigned __int8 *)a1 + 29);
    if (v14 >= 4)
    {
      EvCrt_v("GN_AGLON_Set_Alm_El: FAILED: gloAlmMA = %d >3, Out of range!");
      return 0;
    }
    if (*((_BYTE *)a1 + 30))
      v15 = 5;
    else
      v15 = 3;
    v16[0] = 0;
    v16[1] = v15;
    v17 = v4;
    v18 = v3;
    v19 = v5;
    v20 = v6;
    v21 = v7;
    v22 = v8;
    v23 = v9;
    v24 = v10;
    v25 = v11;
    v26 = a1[12];
    v27 = v12;
    v30 = 1;
    v28 = v13 != 0;
    v29 = v14;
    v35 = 0;
    v36 = 0;
    v37 = 0uLL;
    v38 = 0;
    GLON_AlmInt2Bin((uint64_t)v16, (uint64_t)&v35);
    v31 = 0;
    v32 = v37;
    v33 = v38;
    v34 = HIDWORD(v35) == 5;
    WORD2(v31) = v36;
    return GN_AGLON_Set_Alm(*((unsigned __int8 *)a1 + 2), (uint64_t)&v31);
  }
  return result;
}

uint64_t lsim17_04SiCbInit(void (*a1)(void))
{
  uint64_t v1;
  unsigned __int16 v2;
  size_t IsLoggingAllowed;
  uint64_t v4;
  unsigned __int16 v5;
  uint64_t result;
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  size_t v12;
  int v13;
  uint64_t v14;
  char __str[1040];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    g_SimInfoCallback = (uint64_t (*)(_QWORD))a1;
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v1 = mach_continuous_time();
      v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "LSM", 73, "GNS_ExecuteSimInfoCallback");
      LbsOsaTrace_WriteLog(0xCu, __str, v2, 4, 1);
    }
    if (g_SimInfoCallback)
    {
      IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
      if ((_DWORD)IsLoggingAllowed)
      {
        bzero(__str, 0x410uLL);
        v4 = mach_continuous_time();
        v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:SIMS_INFO_REQ =>SiCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "GNS_ExecuteSimInfoCallback");
        IsLoggingAllowed = LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
      }
      g_SimInfoCallback(IsLoggingAllowed);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SimInfo\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 87, "GNS_ExecuteSimInfoCallback", 258);
      LbsOsaTrace_WriteLog(0xCu, __str, v10, 2, 1);
    }
    result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v11 = mach_continuous_time();
      v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 73, "GNS_ExecuteSimInfoCallback");
      v13 = 4;
      return LbsOsaTrace_WriteLog(0xCu, __str, v12, v13, 1);
    }
  }
  else if (g_SimInfoCallback)
  {
    result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v7 = mach_continuous_time();
      v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DeRegistering\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "LSM", 73, "lsim17_04SiCbInit", 513);
      result = LbsOsaTrace_WriteLog(0xCu, __str, v8, 4, 1);
    }
    g_SimInfoCallback = 0;
  }
  else
  {
    result = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v14 = mach_continuous_time();
      v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CbPtr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "LSM", 87, "lsim17_04SiCbInit", 513);
      v13 = 2;
      return LbsOsaTrace_WriteLog(0xCu, __str, v12, v13, 1);
    }
  }
  return result;
}

uint64_t lsim17_05SimInfoUpdateInd(_BYTE *a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 v9;
  char __str[1040];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim17_05SimInfoUpdateInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  v4 = byte_253FFD891;
  v5 = a1[15];
  byte_253FFD88E = a1[12];
  byte_253FFD891 = v5;
  byte_253FFD892 = a1[16];
  memcpy_s("lsim17_05SimInfoUpdateInd", 113, &unk_253FFD88F, 2u, a1 + 13, 2uLL);
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v6 = mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_SIMINFO_UPDATE_IND,NumActiveSim,%u,DataSim,%u,CpSim,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "lsim17_05SimInfoUpdateInd", byte_253FFD88E, byte_253FFD891, byte_253FFD892);
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  byte_253FFD88D = 1;
  if (v4 != v5)
  {
    lsim05_42CloseSuplSessions(255, 0);
    lsim09_34SendClientSlpInfo();
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v8 = mach_continuous_time();
    v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "lsim17_05SimInfoUpdateInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
  }
  return 0;
}

BOOL GNS_SimsInfoInitialize(void (*a1)(void))
{
  uint64_t v2;
  unsigned __int16 v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  unsigned __int16 v7;
  char __str[1040];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "GNS_SimsInfoInitialize");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  v4 = gnssOsa_Calloc("GNS_SimsInfoInitialize", 184, 1, 0x18uLL);
  v5 = v4;
  if (v4)
  {
    v4[3] = 9;
    *((_QWORD *)v4 + 2) = a1;
    AgpsSendFsmMsg(131, 131, 8635139, v4);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v6 = mach_continuous_time();
      v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GNS_SimsInfoInitialize");
      LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
    }
  }
  return v5 != 0;
}

size_t GNS_SimsInfoInd(int *a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  _BYTE *v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int16 v8;
  size_t result;
  uint64_t v10;
  unsigned __int16 v11;
  char __str[1040];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "GNS_SimsInfoInd");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (a1)
  {
    v4 = gnssOsa_Calloc("GNS_SimsInfoInd", 223, 1, 0x14uLL);
    v5 = (int)v4;
    if (!v4)
      goto LABEL_9;
    v6 = *a1;
    v4[16] = *((_BYTE *)a1 + 4);
    *((_DWORD *)v4 + 3) = v6;
    AgpsSendFsmMsg(131, 131, 8634627, v4);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xCu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v7 = mach_continuous_time();
    v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SimsInfo\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "LSM", 69, "GNS_SimsInfoInd", 513);
    LbsOsaTrace_WriteLog(0xCu, __str, v8, 0, 1);
  }
  v5 = 0;
LABEL_9:
  result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, v5);
  if ((_DWORD)result)
  {
    bzero(__str, 0x410uLL);
    v10 = mach_continuous_time();
    v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 73, "GNS_SimsInfoInd");
    return LbsOsaTrace_WriteLog(0xCu, __str, v11, 4, 1);
  }
  return result;
}

void GncP07_06SendPENVRestoreResp(int a1, int a2)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  unsigned __int16 v7;
  char __str[1040];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = gnssOsa_Calloc("GncP07_06SendPENVRestoreResp", 47, 1, 0x10uLL);
  if (v4)
  {
    v5 = v4;
    v4[12] = a1;
    v4[13] = a2;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v6 = mach_continuous_time();
      v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_PE_NV_RESTORE_RSP =>GNM Code,%hhu,SeqNum,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GncP07_06SendPENVRestoreResp", a1, a2);
      LbsOsaTrace_WriteLog(8u, __str, v7, 4, 1);
    }
    AgpsSendFsmMsg(134, 128, 8787460, v5);
  }
}

uint64_t GncP07_07HandlePENVRestore(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  size_t v4;
  const void *v5;
  void *v6;
  int v7;
  uint64_t v8;
  unsigned __int16 v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned __int16 v13;
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 v17;
  char __str[1040];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v2 = mach_continuous_time();
      v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_PE_NV_RESTORE_REQ NVSize,%u,SeqNum,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP07_07HandlePENVRestore", *(unsigned __int16 *)(a1 + 12), *(unsigned __int8 *)(a1 + 24));
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    v4 = *(unsigned __int16 *)(a1 + 12);
    if (*(_WORD *)(a1 + 12) && (v5 = *(const void **)(a1 + 16)) != 0)
    {
      if ((_DWORD)v4 == 22944)
      {
        if ((_QWORD)xmmword_254011388)
        {
          memcpy_s("GncP07_07HandlePENVRestore", 107, (void *)xmmword_254011388, 0x59A0u, v5, v4);
          v6 = *(void **)(a1 + 16);
          if (v6)
            free(v6);
          v7 = 0;
          *(_QWORD *)(a1 + 16) = 0;
        }
        else
        {
          if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            v16 = mach_continuous_time();
            v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNC", 87, "GncP07_07HandlePENVRestore", 769);
            LbsOsaTrace_WriteLog(8u, __str, v17, 2, 1);
          }
          v7 = 3;
        }
      }
      else if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v14 = mach_continuous_time();
        v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NVSize Mismatch PESize,%u,GNMSize,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 87, "GncP07_07HandlePENVRestore", 22944, *(unsigned __int16 *)(a1 + 12));
        v7 = 1;
        LbsOsaTrace_WriteLog(8u, __str, v15, 2, 1);
      }
      else
      {
        v7 = 1;
      }
      v10 = *(unsigned __int8 *)(a1 + 24);
      v11 = v7;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v8 = mach_continuous_time();
        v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "GncP07_07HandlePENVRestore", 513);
        LbsOsaTrace_WriteLog(8u, __str, v9, 2, 1);
      }
      v10 = *(unsigned __int8 *)(a1 + 24);
      v11 = 2;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v12 = mach_continuous_time();
      v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 69, "GncP07_07HandlePENVRestore", 517);
      LbsOsaTrace_WriteLog(8u, __str, v13, 0, 1);
    }
    v11 = 2;
    v10 = 255;
  }
  GncP07_06SendPENVRestoreResp(v11, v10);
  return 0;
}

void GncP07_08WriteNVStore(size_t a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  unsigned __int16 v8;
  unsigned __int16 v9;
  char __str[1040];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      return;
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NVStore\n");
LABEL_12:
    LbsOsaTrace_WriteLog(8u, __str, v9, 2, 1);
    return;
  }
  if (!(_DWORD)a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      return;
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NVSize,0\n");
    goto LABEL_12;
  }
  v4 = gnssOsa_Calloc("GncP07_08WriteNVStore", 134, 1, 0x18uLL);
  if (v4)
  {
    v5 = v4;
    v6 = gnssOsa_Calloc("GncP07_08WriteNVStore", 140, a1, 1uLL);
    v5[2] = v6;
    if (v6)
    {
      *((_WORD *)v5 + 6) = a1;
      memcpy_s("GncP07_08WriteNVStore", 148, v6, a1, a2, a1);
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v7 = mach_continuous_time();
        v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_PE_NV_BACKUP_IND =>GNM NVSize,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 73, "GncP07_08WriteNVStore", a1);
        LbsOsaTrace_WriteLog(8u, __str, v8, 4, 1);
      }
      AgpsSendFsmMsg(134, 128, 8787203, v5);
    }
    else
    {
      free(v5);
    }
  }
}

size_t lsim15_02SendMobileInfoReq(int a1, char a2)
{
  uint64_t v4;
  unsigned __int16 v5;
  int IsLoggingAllowed;
  unsigned __int16 v7;
  size_t result;
  uint64_t v9;
  unsigned __int16 v10;
  int __s;
  char v12;
  char __str[1040];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v4 = mach_continuous_time();
    v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim15_02SendMobileInfoReq");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (g_GnsCellInfoCallback)
  {
    memset_s(&__s, 8uLL, 0, 8uLL);
    __s = a1;
    v12 = a2;
    IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if (a1)
    {
      if (IsLoggingAllowed)
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:INFO_REQ => CiCB,ReqMask,%X\n");
LABEL_9:
        LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
      }
    }
    else if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: DeReg MobInfo\n");
      goto LABEL_9;
    }
    GNS_ExecuteCiCb(0, 8, (uint64_t)&__s);
  }
  result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if ((_DWORD)result)
  {
    bzero(__str, 0x410uLL);
    v9 = mach_continuous_time();
    v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "LSM", 73, "lsim15_02SendMobileInfoReq");
    return LbsOsaTrace_WriteLog(0xCu, __str, v10, 4, 1);
  }
  return result;
}

size_t GNS_ExecuteCiCb(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 v9;
  size_t result;
  uint64_t v11;
  unsigned __int16 v12;
  char __str[1040];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v6 = mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GNS_ExecuteCiCb");
    LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
  }
  if (g_GnsCellInfoCallback)
  {
    g_GnsCellInfoCallback(a1, a2, a3);
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v8 = mach_continuous_time();
    v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CellInfo\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 87, "GNS_ExecuteCiCb", 258);
    LbsOsaTrace_WriteLog(0xCu, __str, v9, 2, 1);
  }
  result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
  if ((_DWORD)result)
  {
    bzero(__str, 0x410uLL);
    v11 = mach_continuous_time();
    v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 73, "GNS_ExecuteCiCb");
    return LbsOsaTrace_WriteLog(0xCu, __str, v12, 4, 1);
  }
  return result;
}

uint64_t lsim15_12HandleMobileInfo()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int16 v2;
  uint64_t v3;
  unsigned __int16 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  char v9;
  char v10;
  int v11;
  unsigned __int16 v12;
  uint64_t v13;
  unsigned __int16 v14;
  unint64_t v15;
  unsigned __int16 v16;
  unint64_t v17;
  unsigned int v18;
  _DWORD *v19;
  int v20;
  int v21;
  _DWORD *v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned __int16 v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned __int16 v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int16 v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned __int16 v50;
  unint64_t v51;
  unsigned __int8 *v52;
  int v53;
  unint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  unsigned __int16 v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int16 v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unsigned __int16 v64;
  unint64_t v65;
  unsigned __int8 *v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int16 v72;
  uint64_t v73;
  unsigned __int8 *v74;
  int v75;
  unint64_t v76;
  uint64_t v77;
  unsigned __int16 v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int16 v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  uint64_t v86;
  unsigned __int16 v87;
  int v88;
  uint64_t v89;
  unsigned __int16 v90;
  int IsLoggingAllowed;
  uint64_t v92;
  unsigned __int16 v93;
  unint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100[1040];
  char __str[8];
  char v102;
  _BYTE v103[6228];

  v0 = MEMORY[0x24BDAC7A8]();
  *(_QWORD *)&v103[6212] = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v1 = mach_continuous_time();
    v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "LSM", 73, "lsim15_12HandleMobileInfo");
    LbsOsaTrace_WriteLog(0xCu, __str, v2, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v3 = mach_continuous_time();
    v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_MOBILE_INFO_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "LSM", 73, "lsim15_12HandleMobileInfo");
    LbsOsaTrace_WriteLog(0xCu, __str, v4, 4, 1);
  }
  if (!v0)
    goto LABEL_26;
  if (*(_DWORD *)(v0 + 6232) == 1)
  {
    v5 = *(unsigned __int8 *)(v0 + 12);
    if (v5 != 255)
    {
      v6 = 0;
      v7 = qword_25401F518;
      v8 = -1;
      v9 = 1;
      while (1)
      {
        v10 = v9;
        v11 = *(unsigned __int8 *)(qword_25401F518 + 6220 * v6);
        if (v5 == v11)
          break;
        v9 = 0;
        if (v8 < v6)
          LOBYTE(v6) = v8;
        if (v11 == 255)
          v8 = v6;
        v6 = 1;
        if ((v10 & 1) == 0)
        {
          if (v8 >= 2u)
          {
            if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
              goto LABEL_25;
            bzero(__str, 0x410uLL);
            mach_continuous_time();
            v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SimIndex\n");
LABEL_24:
            LbsOsaTrace_WriteLog(0xCu, __str, v12, 2, 1);
            goto LABEL_25;
          }
LABEL_29:
          v18 = v8;
          v19 = (_DWORD *)(qword_25401F518 + 6220 * v8);
          memcpy_s("lsim15_12HandleMobileInfo", 220, v19, 0x184Cu, (const void *)(v0 + 12), 0x184CuLL);
          v20 = v19[1];
          v21 = v19[2];
          v22 = v19 + 1;
          g_LsimMobInfo = g_LsimMobInfo & 0xFE | (v21 == 2);
          switch(v20)
          {
            case 0:
              v23 = *(_DWORD *)(v0 + 6232);
              v24 = 1;
              goto LABEL_87;
            case 1:
              v96 = v5;
              v97 = v0;
              if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v27 = mach_continuous_time();
                v28 = v7 + 6220 * v18;
                v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CIGSM,Mcc,%u,Mnc,%u,Lac,%u,Ci,%u,Ta,%u,NumNmr,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "LSM", 68, "lsim15_12HandleMobileInfo", *(unsigned __int16 *)(v28 + 12), *(unsigned __int16 *)(v28 + 14), *(_DWORD *)(v28 + 16), *(_DWORD *)(v28 + 20), *(unsigned __int16 *)(v28 + 24), *(unsigned __int8 *)(v28 + 26));
                LbsOsaTrace_WriteLog(0xCu, __str, v29, 5, 1);
              }
              v30 = v7 + 6220 * v18;
              if (*(_BYTE *)(v30 + 26))
              {
                v31 = 0;
                v32 = v30 + 12;
                v33 = (unsigned __int8 *)(v7 + 6220 * v18 + 31);
                do
                {
                  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    v34 = mach_continuous_time();
                    v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CIGSM NMR,Arfcn,%u,Bsic,%u,RxLev,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "LSM", 68, "lsim15_12HandleMobileInfo", *(unsigned __int16 *)(v33 - 3), *(v33 - 1), *v33);
                    LbsOsaTrace_WriteLog(0xCu, __str, v35, 5, 1);
                  }
                  ++v31;
                  v33 += 4;
                }
                while (v31 < *(unsigned __int8 *)(v32 + 14));
              }
              goto LABEL_79;
            case 2:
              v96 = v5;
              v97 = v0;
              if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v36 = mach_continuous_time();
                v37 = v7 + 6220 * v18;
                v38 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CIWCDMAF,Mcc,%u,Mnc,%u,Lac,%u,Ci,%u,UarfcnDl,%u,UarfcnUl,%u,Psc,%u,NumMeasRes,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "LSM", 68, "lsim15_12HandleMobileInfo", *(unsigned __int16 *)(v37 + 12), *(unsigned __int16 *)(v37 + 14), *(_DWORD *)(v37 + 16), *(_DWORD *)(v37 + 20), *(unsigned __int16 *)(v37 + 24), *(unsigned __int16 *)(v37 + 26), *(unsigned __int16 *)(v37 + 28), *(unsigned __int8 *)(v37 + 30));
                LbsOsaTrace_WriteLog(0xCu, __str, v38, 5, 1);
              }
              v39 = v7 + 6220 * v18;
              if (*(_BYTE *)(v39 + 30))
              {
                v40 = 0;
                v41 = v39 + 12;
                v42 = v7 + 6220 * v18 + 48;
                do
                {
                  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
                  {
                    v43 = v41;
                    v44 = v41 + 392 * v40;
                    bzero(__str, 0x410uLL);
                    v45 = mach_continuous_time();
                    v46 = *(unsigned __int16 *)(v44 + 20);
                    v47 = *(unsigned __int16 *)(v44 + 22);
                    v48 = *(unsigned __int8 *)(v44 + 24);
                    v49 = *(unsigned __int8 *)(v44 + 25);
                    v41 = v43;
                    v50 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CIWCDMAF MEASLIST,UarfcnDl,%u,UarfcnUl,%u,Rssi,%u,NumMeas,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v45), "LSM", 68, "lsim15_12HandleMobileInfo", v46, v47, v48, v49);
                    LbsOsaTrace_WriteLog(0xCu, __str, v50, 5, 1);
                  }
                  v51 = v41 + 392 * v40;
                  v53 = *(unsigned __int8 *)(v51 + 25);
                  v52 = (unsigned __int8 *)(v51 + 25);
                  if (v53)
                  {
                    v54 = 0;
                    v55 = (unsigned __int8 *)v42;
                    do
                    {
                      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
                      {
                        bzero(__str, 0x410uLL);
                        v56 = mach_continuous_time();
                        v57 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CIWCDMAF MEAS,Ci,%u,Psc,%u,EcNo,%u,Rscp,%u,PathLoss,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v56), "LSM", 68, "lsim15_12HandleMobileInfo", *((_DWORD *)v55 - 2), *((unsigned __int16 *)v55 - 2), *(v55 - 2), *(v55 - 1), *v55);
                        LbsOsaTrace_WriteLog(0xCu, __str, v57, 5, 1);
                      }
                      ++v54;
                      v55 += 12;
                    }
                    while (v54 < *v52);
                  }
                  ++v40;
                  v42 += 392;
                }
                while (v40 < *(unsigned __int8 *)(v41 + 18));
              }
              goto LABEL_79;
            case 3:
              v96 = v5;
              v97 = v0;
              if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v58 = mach_continuous_time();
                v59 = v7 + 6220 * v18;
                v60 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CIWCDMAT,Mcc,%u,Mnc,%u,Lac,%u,Ci,%u,UarfcnNt,%u,CparamId,%u,NumMeasRes,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v58), "LSM", 68, "lsim15_12HandleMobileInfo", *(unsigned __int16 *)(v59 + 12), *(unsigned __int16 *)(v59 + 14), *(_DWORD *)(v59 + 16), *(_DWORD *)(v59 + 20), *(unsigned __int16 *)(v59 + 24), *(unsigned __int16 *)(v59 + 26), *(unsigned __int8 *)(v59 + 28));
                LbsOsaTrace_WriteLog(0xCu, __str, v60, 5, 1);
              }
              v61 = v7 + 6220 * v18;
              if (*(_BYTE *)(v61 + 28))
              {
                v62 = 0;
                v98 = v7 + 6220 * v18 + 45;
                v99 = v61 + 12;
                do
                {
                  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    v63 = mach_continuous_time();
                    v64 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CIWCDMAT MEASLIST,UarfcnNt,%u,Rssi,%u,NumMeas,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v63), "LSM", 68, "lsim15_12HandleMobileInfo", *(unsigned __int16 *)(v99 + 772 * v62 + 20), *(unsigned __int8 *)(v99 + 772 * v62 + 22), *(unsigned __int8 *)(v99 + 772 * v62 + 23));
                    LbsOsaTrace_WriteLog(0xCu, __str, v64, 5, 1);
                  }
                  v65 = v99 + 772 * v62;
                  v67 = *(unsigned __int8 *)(v65 + 23);
                  v66 = (unsigned __int8 *)(v65 + 23);
                  if (v67)
                  {
                    v68 = 0;
                    v69 = v98;
                    do
                    {
                      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
                      {
                        bzero(__str, 0x410uLL);
                        v70 = mach_continuous_time();
                        v71 = v99 + 772 * v62 + 24 * v68;
                        v72 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CIWCDMAT MEAS,Ci,%u,CparamId,%u,Tgsn,%u,Rscp,%u,PathLoss,%u,NumIscp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v70), "LSM", 68, "lsim15_12HandleMobileInfo", *(_DWORD *)(v71 + 24), *(unsigned __int8 *)(v71 + 28), *(unsigned __int8 *)(v71 + 29), *(unsigned __int8 *)(v71 + 30), *(unsigned __int8 *)(v71 + 31), *(unsigned __int8 *)(v71 + 32));
                        LbsOsaTrace_WriteLog(0xCu, __str, v72, 5, 1);
                      }
                      v73 = v99 + 772 * v62 + 24 * v68;
                      v75 = *(unsigned __int8 *)(v73 + 32);
                      v74 = (unsigned __int8 *)(v73 + 32);
                      if (v75)
                      {
                        v76 = 0;
                        do
                        {
                          if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
                          {
                            bzero(__str, 0x410uLL);
                            v77 = mach_continuous_time();
                            v78 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CIWCDMAT ISCP,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v77), "LSM", 68, "lsim15_12HandleMobileInfo", *(unsigned __int8 *)(v69 + v76));
                            LbsOsaTrace_WriteLog(0xCu, __str, v78, 5, 1);
                          }
                          ++v76;
                        }
                        while (v76 < *v74);
                      }
                      ++v68;
                      v69 += 24;
                    }
                    while (v68 < *v66);
                  }
                  ++v62;
                  v98 += 772;
                }
                while (v62 < *(unsigned __int8 *)(v99 + 16));
              }
              goto LABEL_79;
            case 4:
              v96 = v5;
              v97 = v0;
              if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v79 = mach_continuous_time();
                v80 = v7 + 6220 * v18;
                v81 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CILTE,Mcc,%u,Mnc,%u,Ci,%u,Pci,%u,Tac,%u,Rsrp,%u,Rsrq,%u,Earfcn,%u,Ta,%u,NumNmr,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v79), "LSM", 68, "lsim15_12HandleMobileInfo", *(unsigned __int16 *)(v80 + 12), *(unsigned __int16 *)(v80 + 14), *(_DWORD *)(v80 + 16), *(unsigned __int16 *)(v80 + 20), *(_DWORD *)(v80 + 24), *(unsigned __int8 *)(v80 + 28), *(unsigned __int8 *)(v80 + 29), *(_DWORD *)(v80 + 32), *(unsigned __int16 *)(v80 + 36), *(unsigned __int8 *)(v80 + 38));
                LbsOsaTrace_WriteLog(0xCu, __str, v81, 5, 1);
              }
              v82 = v7 + 6220 * v18;
              if (*(_BYTE *)(v82 + 38))
              {
                v83 = 0;
                v84 = v82 + 12;
                v85 = (_DWORD *)(v7 + 6220 * v18 + 56);
                do
                {
                  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    v86 = mach_continuous_time();
                    v87 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CILTE NMR,Mcc,%u,Mnc,%u,Ci,%u,Pci,%u,Rsrp,%u,Rsrq,%u,Tac,%u,Earfcn,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v86), "LSM", 68, "lsim15_12HandleMobileInfo", *((unsigned __int16 *)v85 - 8), *((unsigned __int16 *)v85 - 7), *(v85 - 3), *((unsigned __int16 *)v85 - 4), *((unsigned __int8 *)v85 - 6), *((unsigned __int8 *)v85 - 5), *(v85 - 1), *v85);
                    LbsOsaTrace_WriteLog(0xCu, __str, v87, 5, 1);
                  }
                  ++v83;
                  v85 += 5;
                }
                while (v83 < *(unsigned __int8 *)(v84 + 26));
              }
              goto LABEL_79;
            default:
              v96 = v5;
              v97 = v0;
              if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v25 = mach_continuous_time();
                v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CellType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "LSM", 73, "lsim15_12HandleMobileInfo", 515, *v22);
                LbsOsaTrace_WriteLog(0xCu, __str, v26, 4, 1);
              }
LABEL_79:
              *(_QWORD *)__str = 0;
              v102 = -1;
              memset_s(v103, 0x1840uLL, 0, 0x1840uLL);
              v88 = lsim05_37FillSuplLocIdFromLsimLocId(__str, v96, *(_DWORD *)(v97 + 6232));
              v24 = 0;
              if (v88)
              {
                if (GN_SUPL_Mobile_Info_Ind_In((uint64_t)__str))
                {
                  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
                  {
                    bzero(v100, 0x410uLL);
                    v89 = mach_continuous_time();
                    v90 = snprintf(v100, 0x40FuLL, "%10u %s%c %s: GN_SUPL_Mobile_Info_Ind_In successful\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v89), "LSM", 68, "lsim15_12HandleMobileInfo");
                    LbsOsaTrace_WriteLog(0xCu, v100, v90, 5, 1);
                  }
                  GN_SUPL_Handler();
                  v24 = 1;
                }
                else
                {
                  IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
                  v24 = 0;
                  if (IsLoggingAllowed)
                  {
                    bzero(v100, 0x410uLL);
                    v92 = mach_continuous_time();
                    v93 = snprintf(v100, 0x40FuLL, "%10u %s%c %s: GN_SUPL_Mobile_Info_Ind_In failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v92), "LSM", 87, "lsim15_12HandleMobileInfo");
                    LbsOsaTrace_WriteLog(0xCu, v100, v93, 2, 1);
                    v24 = 0;
                  }
                }
              }
              v23 = *(_DWORD *)(v97 + 6232);
LABEL_87:
              lsim15_06SendMobInfoApiStatus(v23, v24, 0);
              if (!LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
                return 0;
              bzero(__str, 0x410uLL);
              v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              break;
          }
          goto LABEL_89;
        }
      }
      v8 = v6;
      goto LABEL_29;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v95 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SimId,%u\n", v95);
      goto LABEL_24;
    }
LABEL_25:
    lsim15_06SendMobInfoApiStatus(*(_DWORD *)(v0 + 6232), 2, 0);
LABEL_26:
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
LABEL_89:
      v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v17, "LSM", 73, "lsim15_12HandleMobileInfo");
      goto LABEL_90;
    }
    return 0;
  }
  memset_s(&g_LsimMobInfo, 0x10uLL, 0, 0x10uLL);
  g_LsimMobInfo = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v13 = mach_continuous_time();
    v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MobInfoType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "LSM", 87, "lsim15_12HandleMobileInfo", 515, *(_DWORD *)(v0 + 6232));
    LbsOsaTrace_WriteLog(0xCu, __str, v14, 2, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v15, "LSM", 73, "lsim15_12HandleMobileInfo");
LABEL_90:
    LbsOsaTrace_WriteLog(0xCu, __str, v16, 4, 1);
  }
  return 0;
}

void lsim15_06SendMobInfoApiStatus(int a1, int a2, int a3)
{
  _DWORD *v5;
  void *v6;
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v10;
  unsigned __int16 v11;
  char __str[1040];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (a1 == 1)
  {
    v5 = gnssOsa_Calloc("lsim15_06SendMobInfoApiStatus", 116, 1, 8uLL);
    if (v5)
    {
      v6 = v5;
      *v5 = a3;
      v5[1] = a2;
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v7 = mach_continuous_time();
        v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:API_STATUS =>CiCB,Api,%u,Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "LSM", 73, "lsim15_06SendMobInfoApiStatus", a3, a2);
        LbsOsaTrace_WriteLog(0xCu, __str, v8, 4, 1);
      }
      GNS_ExecuteCiCb(1, 8, (uint64_t)v6);
      free(v6);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v10 = mach_continuous_time();
    v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 87, "lsim15_06SendMobInfoApiStatus", 515, a1);
    LbsOsaTrace_WriteLog(0xCu, __str, v11, 2, 1);
  }
}

uint64_t lsim15_13HandleImsiInfo(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v4;
  unsigned __int16 v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  unsigned __int16 v11;
  int v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  uint64_t v20;
  unsigned __int16 v21;
  std::string v23;
  char __str[1040];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim15_13HandleImsiInfo");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v4 = mach_continuous_time();
    v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNS_LSIM_IMSI_INFO_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "lsim15_13HandleImsiInfo");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (a1)
  {
    if (*(unsigned __int8 *)(a1 + 40) == 255)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v13 = mach_continuous_time();
        v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SimId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "LSM", 87, "lsim15_13HandleImsiInfo", 515, *(unsigned __int8 *)(a1 + 40));
        LbsOsaTrace_WriteLog(0xCu, __str, v14, 2, 1);
      }
      lsim15_06SendMobInfoApiStatus(1, 2, 1);
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
        goto LABEL_34;
    }
    else if (*(char *)(a1 + 39) < 0 && *(_QWORD *)(a1 + 24) >= 0x100uLL)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
        if (*(char *)(a1 + 39) < 0)
          v7 = *(_QWORD *)(a1 + 24);
        else
          v7 = *(unsigned __int8 *)(a1 + 39);
        v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ImsiLength,%lu\n", (unint64_t)v6, "LSM", 87, "lsim15_13HandleImsiInfo", 514, v7);
        LbsOsaTrace_WriteLog(0xCu, __str, v19, 2, 1);
      }
      lsim15_06SendMobInfoApiStatus(1, 2, 1);
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
LABEL_34:
        bzero(__str, 0x410uLL);
        v20 = mach_continuous_time();
        v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "LSM", 73, "lsim15_13HandleImsiInfo");
        LbsOsaTrace_WriteLog(0xCu, __str, v21, 4, 1);
      }
    }
    else
    {
      memset(&v23, 0, sizeof(v23));
      std::string::operator=(&v23, (const std::string *)(a1 + 16));
      if (GN_SUPL_Set_SetIdParams((uint64_t)&v23, *(unsigned __int8 *)(a1 + 40)))
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v10 = mach_continuous_time();
          v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_Set_SetIdParams Imsi Success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 68, "lsim15_13HandleImsiInfo");
          LbsOsaTrace_WriteLog(0xCu, __str, v11, 5, 1);
        }
        v12 = 1;
      }
      else
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v15 = mach_continuous_time();
          v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GN_SUPL_Set_SetIdParams Imsi Rejected\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 87, "lsim15_13HandleImsiInfo");
          LbsOsaTrace_WriteLog(0xCu, __str, v16, 2, 1);
        }
        v12 = 0;
      }
      lsim15_06SendMobInfoApiStatus(1, v12, 1);
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v17 = mach_continuous_time();
        v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "LSM", 73, "lsim15_13HandleImsiInfo");
        LbsOsaTrace_WriteLog(0xCu, __str, v18, 4, 1);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v8 = mach_continuous_time();
      v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Imsi\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 69, "lsim15_13HandleImsiInfo", 517);
      LbsOsaTrace_WriteLog(0xCu, __str, v9, 0, 1);
    }
    lsim15_06SendMobInfoApiStatus(1, 2, 1);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      goto LABEL_34;
  }
  return 0;
}

void sub_21E54CA0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_BYTE *lsim15_21InitMobileInfo(void)
{
  _BYTE *result;

  g_LsimMobInfo = 0;
  result = gnssOsa_Calloc("lsim15_21InitMobileInfo", 477, 2, 0x184CuLL);
  qword_25401F518 = (uint64_t)result;
  if (result)
  {
    *result = -1;
    result[6220] = -1;
  }
  return result;
}

size_t lsim15_23CiCbInit(size_t result)
{
  uint64_t (*v1)(_QWORD, _QWORD, _QWORD);
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v4;
  unsigned __int16 v5;
  char __str[1040];
  uint64_t v7;

  v1 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))result;
  v7 = *MEMORY[0x24BDAC8D0];
  if (result)
    goto LABEL_2;
  if (g_GnsCellInfoCallback)
  {
    result = LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v2 = mach_continuous_time();
      v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DeRegistering\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "lsim15_23CiCbInit", 513);
      result = LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
    }
LABEL_2:
    g_GnsCellInfoCallback = v1;
    return result;
  }
  result = LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0);
  if ((_DWORD)result)
  {
    bzero(__str, 0x410uLL);
    v4 = mach_continuous_time();
    v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CbPtr\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 87, "lsim15_23CiCbInit", 513);
    return LbsOsaTrace_WriteLog(0xCu, __str, v5, 2, 1);
  }
  return result;
}

BOOL GNS_CellInfoInitialize(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  unsigned __int16 v7;
  char __str[1040];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 73, "GNS_CellInfoInitialize");
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 4, 1);
  }
  v4 = gnssOsa_Calloc("GNS_CellInfoInitialize", 526, 1, 0x18uLL);
  v5 = v4;
  if (v4)
  {
    v4[3] = 10;
    *((_QWORD *)v4 + 2) = a1;
    AgpsSendFsmMsg(131, 131, 8635139, v4);
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v6 = mach_continuous_time();
      v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "LSM", 73, "GNS_CellInfoInitialize");
      LbsOsaTrace_WriteLog(0xCu, __str, v7, 4, 1);
    }
  }
  return v5 != 0;
}

uint64_t GNS_CellInfo(const void *a1, char a2)
{
  uint64_t v4;
  unsigned __int16 v5;
  uint64_t v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  unsigned __int16 v13;
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 v17;
  char __str[1040];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v4 = mach_continuous_time();
    v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "GNS_CellInfo");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (a1)
  {
    v6 = 1;
    v7 = (char *)gnssOsa_Calloc("GNS_CellInfo", 587, 1, 0x185CuLL);
    if (v7)
    {
      v8 = v7;
      *((_DWORD *)v7 + 1558) = 1;
      v7[12] = a2;
      v9 = v7 + 12;
      memcpy_s("GNS_CellInfo", 599, v7 + 12, 0x184Cu, a1, 0x184CuLL);
      *v9 = a2;
      AgpsSendFsmMsg(131, 131, 8621571, v8);
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v10 = mach_continuous_time();
        v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "LSM", 73, "GNS_CellInfo");
        LbsOsaTrace_WriteLog(0xCu, __str, v11, 4, 1);
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v16 = mach_continuous_time();
        v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "LSM", 73, "GNS_CellInfo");
        LbsOsaTrace_WriteLog(0xCu, __str, v17, 4, 1);
      }
      return 6;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v12 = mach_continuous_time();
      v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MobileInfo\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "LSM", 87, "GNS_CellInfo", 513);
      LbsOsaTrace_WriteLog(0xCu, __str, v13, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v14 = mach_continuous_time();
      v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "LSM", 73, "GNS_CellInfo");
      LbsOsaTrace_WriteLog(0xCu, __str, v15, 4, 1);
    }
    return 2;
  }
  return v6;
}

uint64_t GNS_SetImsi(uint64_t a1, char a2)
{
  uint64_t v4;
  unsigned __int16 v5;
  char *v6;
  _BYTE *v7;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  unsigned __int16 v16;
  char __str[1040];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v4 = mach_continuous_time();
    v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "LSM", 73, "GNS_SetImsi");
    LbsOsaTrace_WriteLog(0xCu, __str, v5, 4, 1);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(_QWORD *)(a1 + 8))
    {
LABEL_5:
      v6 = (char *)gnssOsa_Calloc("GNS_SetImsi", 628, 1, 0x30uLL);
      if (v6)
      {
        v7 = v6;
        std::string::operator=((std::string *)(v6 + 16), (const std::string *)a1);
        v7[40] = a2;
        AgpsSendFsmMsg(131, 131, 8636675, v7);
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v8 = mach_continuous_time();
          v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "LSM", 73, "GNS_SetImsi");
          v10 = 1;
          LbsOsaTrace_WriteLog(0xCu, __str, v9, 4, 1);
        }
        else
        {
          return 1;
        }
      }
      else
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v15 = mach_continuous_time();
          v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "LSM", 73, "GNS_SetImsi");
          LbsOsaTrace_WriteLog(0xCu, __str, v16, 4, 1);
        }
        return 6;
      }
      return v10;
    }
  }
  else if (*(_BYTE *)(a1 + 23))
  {
    goto LABEL_5;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v11 = mach_continuous_time();
    v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Imsi\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "LSM", 87, "GNS_SetImsi", 513);
    LbsOsaTrace_WriteLog(0xCu, __str, v12, 2, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v13 = mach_continuous_time();
    v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "LSM", 73, "GNS_SetImsi");
    LbsOsaTrace_WriteLog(0xCu, __str, v14, 4, 1);
  }
  return 2;
}

uint64_t asn1PD_PosMethod(uint64_t a1, unsigned __int8 *a2)
{
  int BitFromBuffer;
  uint64_t v5;
  unsigned __int8 v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v7 = 0;
  BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (!*(_BYTE *)(a1 + 16))
  {
    if (BitFromBuffer)
    {
      v5 = Asn1Coder::DecodeEnumerationExtension(a1, &v7);
      v7 += 10;
      if ((_DWORD)v5)
        return v5;
    }
    else
    {
      v5 = Asn1Coder::DecodeInteger(a1, 0, 9u, &v7);
      if ((_DWORD)v5)
        return v5;
    }
    if (v7 > 0x10u)
    {
      v5 = 4;
      *(_BYTE *)(a1 + 16) = 4;
      SuplAsn1Logger::TraceError(4u, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
    }
    else
    {
      v5 = 0;
      *a2 = v7;
    }
  }
  return v5;
}

uint64_t asn1PD_QoP(uint64_t a1, uint64_t a2)
{
  int BitFromBuffer;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;

  BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_11:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  v9 = BitFromBuffer;
  *(_BYTE *)a2 = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_11;
  }
  *(_BYTE *)(a2 + 1) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_11;
  }
  *(_BYTE *)(a2 + 2) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_11;
  }
  v8 = Asn1Coder::DecodeInteger(a1, 0, 0x7Fu, (_BYTE *)(a2 + 3));
  if ((_DWORD)v8)
  {
    v5 = v8;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_11;
  }
  if (*(_BYTE *)a2)
  {
    v8 = Asn1Coder::DecodeInteger(a1, 0, 0x7Fu, (_BYTE *)(a2 + 4));
    if ((_DWORD)v8)
    {
      v5 = v8;
      v6 = *(_DWORD *)(a1 + 8);
      v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_11;
    }
  }
  if (*(_BYTE *)(a2 + 1))
  {
    v8 = Asn1Coder::DecodeInteger(a1, 0, 0xFFFFu, (_DWORD *)(a2 + 8));
    if ((_DWORD)v8)
    {
      v5 = v8;
      v6 = *(_DWORD *)(a1 + 8);
      v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_11;
    }
  }
  if (*(_BYTE *)(a2 + 2))
  {
    v8 = Asn1Coder::DecodeInteger(a1, 0, 7u, (_BYTE *)(a2 + 12));
    if ((_DWORD)v8)
    {
      v5 = v8;
      v6 = *(_DWORD *)(a1 + 8);
      v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_11;
    }
  }
  if (!v9)
    return 0;
  return Asn1Coder::SkipSequenceExtension(a1);
}

uint64_t asn1PE_UTCTime(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = Asn1Coder::EncodeVisibleString7(a1, 0, 255, *(_DWORD *)(a2 + 8) - *(_DWORD *)a2, (_QWORD *)a2, 0);
  v4 = v3;
  if ((_DWORD)v3)
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  return v4;
}

uint64_t asn1PD_UTCTime(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  Asn1Coder::DecodeInteger(a1, 0, 0xFFu, &v6);
  Asn1Coder::GetVisibleStringFromBuffer(a1, 7 * v6, 7, a2);
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  return v4;
}

uint64_t asn1PE_PositionEstimate_uncertainty(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v4 = Asn1Coder::EncodeInteger(a1, 0, 127, *a2);
  if ((_DWORD)v4)
  {
    v5 = v4;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
LABEL_5:
    SuplAsn1Logger::TraceError(v4, v6, v7);
    return v5;
  }
  v4 = Asn1Coder::EncodeInteger(a1, 0, 127, a2[1]);
  if ((_DWORD)v4)
  {
    v5 = v4;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_5;
  }
  return Asn1Coder::EncodeInteger(a1, 0, 180, a2[2]);
}

uint64_t asn1PD_PositionEstimate_uncertainty(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v4 = Asn1Coder::DecodeInteger(a1, 0, 0x7Fu, a2);
  if ((_DWORD)v4)
  {
    v5 = v4;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
LABEL_5:
    SuplAsn1Logger::TraceError(v4, v6, v7);
    return v5;
  }
  v4 = Asn1Coder::DecodeInteger(a1, 0, 0x7Fu, a2 + 1);
  if ((_DWORD)v4)
  {
    v5 = v4;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_5;
  }
  return Asn1Coder::DecodeInteger(a1, 0, 0xB4u, a2 + 2);
}

uint64_t asn1PE_AltitudeInfo(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
LABEL_12:
    SuplAsn1Logger::TraceError(v7, v5, v6);
    return v4;
  }
  v8 = *a2;
  if (v8 >= 2)
  {
    if (v8 == 255)
    {
      v4 = 1;
      *(_BYTE *)(a1 + 16) = 1;
      v9 = *(_DWORD *)(a1 + 8);
      v10 = *(_DWORD *)(a1 + 12);
      v11 = 1;
    }
    else
    {
      v4 = 4;
      *(_BYTE *)(a1 + 16) = 4;
      v9 = *(_DWORD *)(a1 + 8);
      v10 = *(_DWORD *)(a1 + 12);
      v11 = 4;
    }
    SuplAsn1Logger::TraceError(v11, v9, v10);
    goto LABEL_11;
  }
  v4 = Asn1Coder::EncodeInteger(a1, 0, 1, v8);
  if ((_DWORD)v4)
  {
LABEL_11:
    SuplAsn1Logger::TraceError(v4, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = v4;
    goto LABEL_12;
  }
  v7 = Asn1Coder::EncodeInteger(a1, 0, 0x7FFF, *((unsigned __int16 *)a2 + 1));
  if ((_DWORD)v7)
  {
    v4 = v7;
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_12;
  }
  return Asn1Coder::EncodeInteger(a1, 0, 127, a2[4]);
}

uint64_t asn1PD_AltitudeInfo(uint64_t a1, uint64_t a2)
{
  int BitFromBuffer;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_10:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  v9 = BitFromBuffer;
  v14 = 0;
  v10 = Asn1Coder::DecodeInteger(a1, 0, 1u, &v14);
  if ((_DWORD)v10)
  {
    v5 = v10;
    v11 = *(_DWORD *)(a1 + 8);
    v12 = *(_DWORD *)(a1 + 12);
LABEL_9:
    SuplAsn1Logger::TraceError(v10, v11, v12);
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = v5;
    goto LABEL_10;
  }
  if (v14 >= 2u)
  {
    v5 = 4;
    *(_BYTE *)(a1 + 16) = 4;
    v11 = *(_DWORD *)(a1 + 8);
    v12 = *(_DWORD *)(a1 + 12);
    LODWORD(v10) = 4;
    goto LABEL_9;
  }
  *(_BYTE *)a2 = v14;
  v8 = Asn1Coder::DecodeInteger(a1, 0, 0x7FFFu, (_WORD *)(a2 + 2));
  if ((_DWORD)v8)
  {
    v5 = v8;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_10;
  }
  v8 = Asn1Coder::DecodeInteger(a1, 0, 0x7Fu, (_BYTE *)(a2 + 4));
  if ((_DWORD)v8)
  {
    v5 = v8;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_10;
  }
  if (!v9)
    return 0;
  return Asn1Coder::SkipSequenceExtension(a1);
}

uint64_t asn1PE_PositionEstimate_latitudeSign(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;

  if (a2 >= 2u)
  {
    if (a2 == 255)
    {
      v3 = 1;
      *(_BYTE *)(a1 + 16) = 1;
      v4 = *(_DWORD *)(a1 + 8);
      v5 = *(_DWORD *)(a1 + 12);
      v6 = 1;
    }
    else
    {
      v3 = 4;
      *(_BYTE *)(a1 + 16) = 4;
      v4 = *(_DWORD *)(a1 + 8);
      v5 = *(_DWORD *)(a1 + 12);
      v6 = 4;
    }
    SuplAsn1Logger::TraceError(v6, v4, v5);
  }
  else
  {
    v3 = Asn1Coder::EncodeInteger(a1, 0, 1, a2);
    if (!(_DWORD)v3)
      return v3;
  }
  SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  return v3;
}

uint64_t asn1PD_PositionEstimate_latitudeSign(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned __int8 v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v4 = Asn1Coder::DecodeInteger(a1, 0, 1u, &v9);
  if ((_DWORD)v4)
  {
    v5 = v4;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
LABEL_6:
    SuplAsn1Logger::TraceError(v4, v6, v7);
    return v5;
  }
  if (v9 > 1u)
  {
    v5 = 4;
    *(_BYTE *)(a1 + 16) = 4;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v4) = 4;
    goto LABEL_6;
  }
  v5 = 0;
  *a2 = v9;
  return v5;
}

uint64_t asn1PE_PositionEstimate(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;

  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
LABEL_15:
    SuplAsn1Logger::TraceError(v7, v5, v6);
    return v4;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *a2);
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[1]);
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[2]);
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  v7 = asn1PE_PositionEstimate_latitudeSign(a1, a2[3]);
  if ((_DWORD)v7)
  {
    v4 = v7;
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  v7 = Asn1Coder::EncodeInteger(a1, 0, 0x7FFFFF, *((_DWORD *)a2 + 1));
  if ((_DWORD)v7)
  {
    v4 = v7;
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  v7 = Asn1Coder::EncodeInteger(a1, -8388608, 0x7FFFFF, *((_DWORD *)a2 + 2));
  if ((_DWORD)v7)
  {
    v4 = v7;
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  if (*a2)
  {
    v7 = asn1PE_PositionEstimate_uncertainty(a1, a2 + 12);
    if ((_DWORD)v7)
    {
      v4 = v7;
      v5 = *(_DWORD *)(a1 + 8);
      v6 = *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
  }
  if (a2[1])
  {
    v7 = Asn1Coder::EncodeInteger(a1, 0, 100, a2[15]);
    if ((_DWORD)v7)
    {
      v4 = v7;
      v5 = *(_DWORD *)(a1 + 8);
      v6 = *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
  }
  if (!a2[2])
    return 0;
  return asn1PE_AltitudeInfo(a1, a2 + 16);
}

uint64_t asn1PD_PositionEstimate(uint64_t a1, uint64_t a2)
{
  int BitFromBuffer;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;

  BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_15:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  v9 = BitFromBuffer;
  *(_BYTE *)a2 = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  *(_BYTE *)(a2 + 1) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  *(_BYTE *)(a2 + 2) = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  v8 = asn1PD_PositionEstimate_latitudeSign(a1, (unsigned __int8 *)(a2 + 3));
  if ((_DWORD)v8)
  {
    v5 = v8;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  v8 = Asn1Coder::DecodeInteger(a1, 0, 0x7FFFFFu, (_DWORD *)(a2 + 4));
  if ((_DWORD)v8)
  {
    v5 = v8;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  v8 = Asn1Coder::DecodeInteger(a1, -8388608, 0x7FFFFF, (_DWORD *)(a2 + 8));
  if ((_DWORD)v8)
  {
    v5 = v8;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  if (*(_BYTE *)a2)
  {
    v8 = asn1PD_PositionEstimate_uncertainty(a1, (_BYTE *)(a2 + 12));
    if ((_DWORD)v8)
    {
      v5 = v8;
      v6 = *(_DWORD *)(a1 + 8);
      v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
  }
  if (*(_BYTE *)(a2 + 1))
  {
    v8 = Asn1Coder::DecodeInteger(a1, 0, 0x64u, (_BYTE *)(a2 + 15));
    if ((_DWORD)v8)
    {
      v5 = v8;
      v6 = *(_DWORD *)(a1 + 8);
      v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
  }
  if (*(_BYTE *)(a2 + 2))
  {
    v8 = asn1PD_AltitudeInfo(a1, a2 + 16);
    if ((_DWORD)v8)
    {
      v5 = v8;
      v6 = *(_DWORD *)(a1 + 8);
      v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
  }
  if (!v9)
    return 0;
  return Asn1Coder::SkipSequenceExtension(a1);
}

uint64_t asn1PD_Horvel_bearing(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;

  Asn1Coder::GetBitStringFromBuffer(a1, 9u, a2, 0);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  return v3;
}

uint64_t asn1PD_Horvel_horspeed(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;

  Asn1Coder::GetBitStringFromBuffer(a1, 0x10u, a2, 0);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  return v3;
}

uint64_t asn1PD_Horvel(uint64_t a1, unint64_t *a2)
{
  int BitFromBuffer;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;

  BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_7:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  v9 = BitFromBuffer;
  v8 = asn1PD_Horvel_bearing(a1, a2);
  if ((_DWORD)v8)
  {
    v5 = v8;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_7;
  }
  v8 = asn1PD_Horvel_horspeed(a1, a2 + 3);
  if ((_DWORD)v8)
  {
    v5 = v8;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_7;
  }
  if (!v9)
    return 0;
  return Asn1Coder::SkipSequenceExtension(a1);
}

uint64_t asn1PD_Horandvervel_verdirect(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;

  Asn1Coder::GetBitStringFromBuffer(a1, 1u, a2, 0);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  return v3;
}

uint64_t asn1PD_Horandvervel_bearing(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;

  Asn1Coder::GetBitStringFromBuffer(a1, 9u, a2, 0);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  return v3;
}

uint64_t asn1PD_Horandvervel_horspeed(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;

  Asn1Coder::GetBitStringFromBuffer(a1, 0x10u, a2, 0);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  return v3;
}

uint64_t asn1PD_Horandvervel_verspeed(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;

  Asn1Coder::GetBitStringFromBuffer(a1, 8u, a2, 0);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  return v3;
}

uint64_t asn1PD_Horandvervel(uint64_t a1, unint64_t *a2)
{
  int BitFromBuffer;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;

  BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_11:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  v9 = BitFromBuffer;
  v8 = asn1PD_Horandvervel_verdirect(a1, a2);
  if ((_DWORD)v8)
  {
    v5 = v8;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_11;
  }
  v8 = asn1PD_Horandvervel_bearing(a1, a2 + 3);
  if ((_DWORD)v8)
  {
    v5 = v8;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_11;
  }
  v8 = asn1PD_Horandvervel_horspeed(a1, a2 + 6);
  if ((_DWORD)v8)
  {
    v5 = v8;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_11;
  }
  v8 = asn1PD_Horandvervel_verspeed(a1, a2 + 9);
  if ((_DWORD)v8)
  {
    v5 = v8;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_11;
  }
  if (!v9)
    return 0;
  return Asn1Coder::SkipSequenceExtension(a1);
}

uint64_t asn1PD_Horveluncert_bearing(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;

  Asn1Coder::GetBitStringFromBuffer(a1, 9u, a2, 0);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  return v3;
}

uint64_t asn1PD_Horveluncert_horspeed(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;

  Asn1Coder::GetBitStringFromBuffer(a1, 0x10u, a2, 0);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  return v3;
}

uint64_t asn1PD_Horveluncert_uncertspeed(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;

  Asn1Coder::GetBitStringFromBuffer(a1, 8u, a2, 0);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  return v3;
}

uint64_t asn1PD_Horveluncert(uint64_t a1, unint64_t *a2)
{
  int BitFromBuffer;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;

  BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_9:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  v9 = BitFromBuffer;
  v8 = asn1PD_Horveluncert_bearing(a1, a2);
  if ((_DWORD)v8)
  {
    v5 = v8;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_9;
  }
  v8 = asn1PD_Horveluncert_horspeed(a1, a2 + 3);
  if ((_DWORD)v8)
  {
    v5 = v8;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_9;
  }
  v8 = asn1PD_Horveluncert_uncertspeed(a1, a2 + 6);
  if ((_DWORD)v8)
  {
    v5 = v8;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_9;
  }
  if (!v9)
    return 0;
  return Asn1Coder::SkipSequenceExtension(a1);
}

uint64_t asn1PD_Horandveruncert_verspeed(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;

  Asn1Coder::GetBitStringFromBuffer(a1, 8u, a2, 0);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  return v3;
}

uint64_t asn1PD_Horandveruncert_horuncertspeed(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;

  Asn1Coder::GetBitStringFromBuffer(a1, 8u, a2, 0);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  return v3;
}

uint64_t asn1PD_Horandveruncert_veruncertspeed(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;

  Asn1Coder::GetBitStringFromBuffer(a1, 8u, a2, 0);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  return v3;
}

uint64_t asn1PD_Horandveruncert(uint64_t a1, unint64_t *a2)
{
  int BitFromBuffer;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;

  BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_14:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  v9 = BitFromBuffer;
  Asn1Coder::GetBitStringFromBuffer(a1, 1u, a2, 0);
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16)
    || (Asn1Coder::GetBitStringFromBuffer(a1, 9u, a2 + 3, 0), v5 = *(unsigned __int8 *)(a1 + 16), *(_BYTE *)(a1 + 16))
    || (Asn1Coder::GetBitStringFromBuffer(a1, 0x10u, a2 + 6, 0),
        v5 = *(unsigned __int8 *)(a1 + 16),
        *(_BYTE *)(a1 + 16)))
  {
    SuplAsn1Logger::TraceError(*(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = v5;
    goto LABEL_14;
  }
  v8 = asn1PD_Horandveruncert_verspeed(a1, a2 + 9);
  if ((_DWORD)v8)
  {
    v5 = v8;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_14;
  }
  v8 = asn1PD_Horandveruncert_horuncertspeed(a1, a2 + 12);
  if ((_DWORD)v8)
  {
    v5 = v8;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_14;
  }
  v8 = asn1PD_Horandveruncert_veruncertspeed(a1, a2 + 15);
  if ((_DWORD)v8)
  {
    v5 = v8;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_14;
  }
  if (!v9)
    return 0;
  return Asn1Coder::SkipSequenceExtension(a1);
}

void asn1PD_Velocity(uint64_t a1, uint64_t a2)
{
  int BitFromBuffer;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  __int16 v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    v7 = *(unsigned __int8 *)(a1 + 16);
  }
  else
  {
    if (BitFromBuffer)
    {
      Asn1Coder::SkipChoiceExtension(a1);
      return;
    }
    v14 = 0;
    v7 = Asn1Coder::DecodeInteger(a1, 0, 3u, &v14);
    if (v7)
    {
      v5 = *(_DWORD *)(a1 + 8);
      v6 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      v8 = v14;
      *(_BYTE *)a2 = v14;
      switch(v8)
      {
        case 0:
          v9 = asn1PD_Horvel(a1, (unint64_t *)(a2 + 8));
          goto LABEL_18;
        case 1:
          v9 = asn1PD_Horandvervel(a1, (unint64_t *)(a2 + 56));
          goto LABEL_18;
        case 2:
          v9 = asn1PD_Horveluncert(a1, (unint64_t *)(a2 + 152));
          goto LABEL_18;
        case 3:
          v9 = asn1PD_Horandveruncert(a1, (unint64_t *)(a2 + 224));
LABEL_18:
          v10 = v9;
          if (v9)
            goto LABEL_19;
          return;
        default:
          if (v8 == 255)
          {
            v10 = 1;
            *(_BYTE *)(a1 + 16) = 1;
            v11 = *(_DWORD *)(a1 + 8);
            v12 = *(_DWORD *)(a1 + 12);
            v13 = 1;
          }
          else
          {
            v10 = 4;
            *(_BYTE *)(a1 + 16) = 4;
            v11 = *(_DWORD *)(a1 + 8);
            v12 = *(_DWORD *)(a1 + 12);
            v13 = 4;
          }
          SuplAsn1Logger::TraceError(v13, v11, v12);
LABEL_19:
          v5 = *(_DWORD *)(a1 + 8);
          v6 = *(_DWORD *)(a1 + 12);
          v7 = v10;
          break;
      }
    }
  }
  SuplAsn1Logger::TraceError(v7, v5, v6);
}

uint64_t asn1PE_Position(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;

  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
LABEL_7:
    SuplAsn1Logger::TraceError(v7, v5, v6);
    return v4;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *a2);
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_7;
  }
  v7 = asn1PE_UTCTime(a1, (uint64_t)(a2 + 8));
  if ((_DWORD)v7)
  {
    v4 = v7;
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_7;
  }
  return asn1PE_PositionEstimate(a1, a2 + 32);
}

uint64_t asn1PD_Position(uint64_t a1, uint64_t a2)
{
  int BitFromBuffer;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;

  BitFromBuffer = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
LABEL_9:
    SuplAsn1Logger::TraceError(v8, v6, v7);
    return v5;
  }
  v9 = BitFromBuffer;
  *(_BYTE *)a2 = Asn1Coder::GetBitFromBuffer((uint64_t **)a1);
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_9;
  }
  v8 = asn1PD_UTCTime(a1, (unint64_t *)(a2 + 8));
  if ((_DWORD)v8)
  {
    v5 = v8;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_9;
  }
  v8 = asn1PD_PositionEstimate(a1, a2 + 32);
  if ((_DWORD)v8)
  {
    v5 = v8;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_9;
  }
  if (*(_BYTE *)a2)
  {
    asn1PD_Velocity(a1, a2 + 56);
    if ((_DWORD)v8)
    {
      v5 = v8;
      v6 = *(_DWORD *)(a1 + 8);
      v7 = *(_DWORD *)(a1 + 12);
      goto LABEL_9;
    }
  }
  if (!v9)
    return 0;
  return Asn1Coder::SkipSequenceExtension(a1);
}

_LPP_TRANSACTION *lpp_transaction_start(uint64_t a1, _DWORD *a2, int a3)
{
  void *v5;
  char v6;
  int v7;
  int v8;
  int v9;
  _LPP_TRANSACTION *v10;
  _LPP_TRANSACTION *v12;
  uint64_t v13;
  int v14;
  _LPP_TRANSACTION **v15;
  _LPP_TRANSACTION **v16;
  uint64_t v17;
  unsigned __int16 v18;
  char __str[1040];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v7 = 2;
    v8 = 16426;
    v9 = 445;
LABEL_12:
    ms_report_exception(v7, v8, v9, "lpp_transaction_start");
    return 0;
  }
  if (!a2)
  {
    v7 = 2;
    v8 = 16427;
    v9 = 451;
    goto LABEL_12;
  }
  if (*a2 != 1)
  {
    if (!*a2)
    {
      v5 = 0;
      v6 = a3;
      switch(a3)
      {
        case 0:
          goto LABEL_21;
        case 1:
          goto LABEL_17;
        case 2:
          v6 = 4;
          v5 = lpp_transaction_location_information_abort;
          goto LABEL_21;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
          v7 = 2;
          v8 = 16390;
          v9 = 483;
          goto LABEL_12;
        default:
          goto LABEL_14;
      }
    }
    v7 = 1;
    v8 = 16436;
    v9 = 524;
    goto LABEL_12;
  }
  v5 = 0;
  v6 = 1;
  switch(a3)
  {
    case 0:
    case 2:
    case 3:
    case 4:
    case 8:
      v7 = 2;
      v8 = 16390;
      v9 = 518;
      goto LABEL_12;
    case 1:
      ++*(_BYTE *)(a1 + 24);
LABEL_17:
      v6 = 3;
      goto LABEL_19;
    case 5:
      goto LABEL_21;
    case 6:
      v6 = 2;
LABEL_19:
      v5 = lpp_transaction_assistance_data_abort;
      goto LABEL_21;
    case 7:
      v5 = 0;
      v6 = 5;
LABEL_21:
      v12 = (_LPP_TRANSACTION *)operator new(0x1E8uLL, MEMORY[0x24BEDB6B8]);
      v10 = v12;
      if (v12)
      {
        _LPP_TRANSACTION::_LPP_TRANSACTION(v12);
        v13 = *(_QWORD *)a2;
        *((_QWORD *)v10 + 2) = *(_QWORD *)a2;
        if ((_DWORD)v13 == 1)
        {
          v14 = *(unsigned __int8 *)(a1 + 24);
          *((_DWORD *)v10 + 5) = v14;
          *(_BYTE *)(a1 + 24) = v14 + 1;
        }
        *((_BYTE *)v10 + 24) = v6;
        *(_QWORD *)((char *)v10 + 28) = *(_QWORD *)(a1 + 16);
        *((_BYTE *)v10 + 25) = 0;
        *((_QWORD *)v10 + 60) = v5;
        v15 = *(_LPP_TRANSACTION ***)(a1 + 40);
        if (v15)
        {
          v16 = (_LPP_TRANSACTION **)*v15;
          *v15 = v10;
          *(_QWORD *)v10 = v16;
          *((_QWORD *)v10 + 1) = 0;
          if (v16)
            v15 = v16;
          v15[1] = v10;
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v17 = mach_continuous_time();
          v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Transaction Data,Type,%hhu,SessionId,%u,CurState,%u,NextState,Initial\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "PSP", 68, "lpp_transaction_start", *((unsigned __int8 *)v10 + 24), *((_DWORD *)v10 + 8), *((unsigned __int8 *)v10 + 25));
          LbsOsaTrace_WriteLog(0x13u, __str, v18, 5, 1);
        }
      }
      else
      {
        ms_report_exception(2, 12288, 538, "lpp_transaction_start");
      }
      break;
    default:
LABEL_14:
      v10 = 0;
      break;
  }
  return v10;
}

void sub_21E54F778(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void lpp_transaction_assistance_data_abort(unsigned __int8 *a1)
{
  unsigned int v1;
  int v2;
  int v3;

  v1 = a1[24];
  if (v1 <= 6)
  {
    if (((1 << v1) & 0x73) != 0)
    {
      v2 = 16409;
      v3 = 2107;
LABEL_4:
      ms_report_exception(2, v2, v3, "lpp_transaction_assistance_data_abort");
      return;
    }
    if (!lpp_session_detect(a1 + 28))
    {
      v2 = 16388;
      v3 = 2097;
      goto LABEL_4;
    }
    a1[25] = 2;
  }
}

void lpp_transaction_location_information_abort(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v3;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  _BYTE *v9;
  _DWORD *v10;
  _DWORD *v11;
  _BYTE v12[8];
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 6)
  {
    if (v3 == 4)
    {
      v6 = lpp_session_detect((unsigned __int8 *)(a1 + 28));
      if (v6)
      {
        if (*(_BYTE *)(a1 + 48) == 1)
        {
          v7 = v6;
          if (a3 == 1)
          {
            v8 = 0;
            v12[0] = 0;
            do
            {
              v9 = &v12[v8];
              *((_QWORD *)v9 + 5) = 0;
              *((_DWORD *)v9 + 12) = 0;
              *((_QWORD *)v9 + 2) = 0;
              *((_QWORD *)v9 + 3) = 0;
              *((_QWORD *)v9 + 1) = 0;
              v8 += 48;
              *((_DWORD *)v9 + 8) = 0;
            }
            while (v8 != 288);
            v10 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x578uLL);
            v14 = v10;
            v10[12] = 6;
            v10[14] = 0;
            v10[16] = 0;
            *((_BYTE *)v10 + 76) = 1;
            v10[18] = 2;
            v12[0] = 1;
            *(_QWORD *)v10 = *(_QWORD *)(a1 + 16);
            v11 = v14;
            *((_WORD *)v14 + 4) = 257;
            *((_BYTE *)v11 + 1392) = 1;
            lpp_transaction_send_uplink_message(a1, (uint64_t)&v13);
          }
          *(_BYTE *)(a1 + 48) = 4;
          *(uint64_t *)((char *)v7 + 68) = 0x10000000000;
        }
        *(_BYTE *)(a1 + 25) = 2;
        lpp_transaction_location_information_cleanup((_LPP_TRANSACTION *)a1);
      }
      else
      {
        ms_report_exception(2, 16388, 1996, "lpp_transaction_location_information_abort");
      }
    }
    else
    {
      ms_report_exception(2, 16409, 2010, "lpp_transaction_location_information_abort");
    }
  }
}

uint64_t *lpp_lazy_transaction_detect(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t *i;
  int v6;

  for (i = **(uint64_t ***)(a1 + 40); i; i = (uint64_t *)*i)
  {
    if (*((_DWORD *)i + 4) == *a2)
    {
      v6 = *((unsigned __int8 *)i + 24);
      if (v6 == lpp_transaction_get_transaction_type(a3) && *((_BYTE *)i + 25) == 2)
        break;
    }
  }
  return i;
}

uint64_t lpp_transaction_get_transaction_type(int a1)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      result = 0;
      break;
    case 1:
      result = 3;
      break;
    case 2:
      result = 4;
      break;
    case 3:
    case 4:
    case 8:
      ms_report_exception(2, 16390, 689, "lpp_transaction_get_transaction_type");
      goto LABEL_3;
    case 5:
      result = 1;
      break;
    case 6:
      result = 2;
      break;
    case 7:
      result = 5;
      break;
    default:
LABEL_3:
      result = 6;
      break;
  }
  return result;
}

size_t lpp_transaction_abort(uint64_t a1)
{
  int v2;
  void (*v3)(uint64_t);
  size_t result;
  uint64_t v5;
  unsigned __int16 v6;
  char __str[1040];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned __int8 *)(a1 + 25);
  if (v2 == 1)
  {
    v3 = *(void (**)(uint64_t))(a1 + 480);
    if (v3)
    {
      v3(a1);
      *(_QWORD *)(a1 + 480) = 0;
      SendStatusReport(*(_DWORD *)(a1 + 32), 4, 0, 0, 0, 255);
    }
  }
  *(_BYTE *)(a1 + 25) = 2;
  result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
  if ((_DWORD)result)
  {
    bzero(__str, 0x410uLL);
    v5 = mach_continuous_time();
    v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Transaction Data,Type,%hhu,SessionId,%u,CurState,%u,NextState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "PSP", 68, "lpp_transaction_abort", *(unsigned __int8 *)(a1 + 24), *(_DWORD *)(a1 + 32), v2, *(unsigned __int8 *)(a1 + 25));
    return LbsOsaTrace_WriteLog(0x13u, __str, v6, 5, 1);
  }
  return result;
}

uint64_t lpp_transaction_process_downlink_message(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  _LPP_TRANSACTION *v9;
  int v10;
  int v11;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v10 = 16426;
    v11 = 762;
    goto LABEL_23;
  }
  if (!a2 || (v3 = *(_QWORD *)(a2 + 16)) == 0)
  {
    v10 = 16444;
    v11 = 768;
LABEL_23:
    ms_report_exception(2, v10, v11, "lpp_transaction_process_downlink_message");
    return 0;
  }
  v5 = lpp_transaction_convert_air_msg_to_event_type(*(_DWORD *)(v3 + 48));
  v6 = *(_DWORD **)(a2 + 16);
  v7 = **(_DWORD ***)(a1 + 40);
  if (v7)
  {
    while (v7[4] != *v6 || v7[5] != v6[1])
    {
      v7 = *(_DWORD **)v7;
      if (!v7)
        goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    v7 = lpp_lazy_transaction_detect(a1, v6, v5);
    if (!v7)
      goto LABEL_11;
  }
  if (*((_BYTE *)v7 + 25) != 2)
  {
LABEL_12:
    v8 = *((unsigned __int8 *)v7 + 24);
    if (*((_BYTE *)v7 + 24))
    {
      if (!*(_BYTE *)(a1 + 84) && *(_BYTE *)(a1 + 16) != 1)
      {
        v13[0] = 0x10000000001;
        v9 = lpp_transaction_start(a1, v13, 5);
        if (v9)
        {
          lpp_transaction_act((uint64_t)v9, 5u, 0);
          *(_BYTE *)(a1 + 84) = 1;
        }
        v8 = *((unsigned __int8 *)v7 + 24);
      }
      if (v8 == 3)
      {
        *((_BYTE *)v7 + 40) = *(_BYTE *)(*(_QWORD *)(a2 + 16) + 9);
      }
      else if (v8 == 2)
      {
        *((_BYTE *)v7 + 41) = *(_BYTE *)(*(_QWORD *)(a2 + 16) + 9);
      }
    }
    else
    {
      *(_BYTE *)(a1 + 84) = 1;
    }
    lpp_transaction_act((uint64_t)v7, v5, (_BYTE *)(*(_QWORD *)(a2 + 16) + 48));
    return 5;
  }
  lpp_transaction_delete((uint64_t)v7);
LABEL_11:
  v7 = lpp_transaction_start(a1, *(_DWORD **)(a2 + 16), v5);
  if (v7)
    goto LABEL_12;
  return 5;
}

uint64_t lpp_transaction_convert_air_msg_to_event_type(int a1)
{
  uint64_t result;
  int v3;
  int v4;
  int v5;

  result = 0;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
    case 2:
    case 5:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      v3 = 2;
      v4 = 16390;
      v5 = 1012;
      goto LABEL_3;
    case 3:
      result = 1;
      break;
    case 4:
      result = 2;
      break;
    case 6:
      result = 4;
      break;
    case 7:
      result = 3;
      break;
    default:
      v3 = 1;
      v4 = 16436;
      v5 = 1015;
LABEL_3:
      ms_report_exception(v3, v4, v5, "lpp_transaction_convert_air_msg_to_event_type");
      result = 8;
      break;
  }
  return result;
}

uint64_t lpp_transaction_delete(uint64_t result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  if (result)
  {
    v1 = (uint64_t *)result;
    v2 = lpp_session_detect((unsigned __int8 *)(result + 28));
    lpp_transaction_abort((uint64_t)v1);
    if (v2)
    {
      v3 = v2[5];
      if (v3)
      {
        v5 = *v1;
        v4 = v1[1];
        if (v4)
          v6 = (uint64_t *)v1[1];
        else
          v6 = (uint64_t *)v2[5];
        *v6 = v5;
        if (v5)
          v3 = v5;
        *(_QWORD *)(v3 + 8) = v4;
        *v1 = 0;
        v1[1] = 0;
      }
    }
    memset_s(v1, 0x1E8uLL, 0, 0x1E8uLL);
    JUMPOUT(0x2207AFDF0);
  }
  return result;
}

void lpp_transaction_act(uint64_t a1, unsigned int a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v8;
  int v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned __int16 v13;
  unsigned int v14;
  unint64_t v15;
  unsigned __int8 *v16;
  _BYTE *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  int v22;
  char __str[1040];
  unsigned __int8 v24[8];
  _BYTE v25[16];
  _BYTE *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    ms_report_exception(2, 16425, 884, "lpp_transaction_act");
    return;
  }
  v4 = *(unsigned __int8 *)(a1 + 24);
  if (v4 == 6)
  {
    ms_report_exception(2, 16390, 890, "lpp_transaction_act");
    return;
  }
  v5 = 0;
  v24[0] = 0;
  do
  {
    v6 = &v24[v5];
    *((_QWORD *)v6 + 5) = 0;
    *((_DWORD *)v6 + 12) = 0;
    *((_QWORD *)v6 + 2) = 0;
    *((_QWORD *)v6 + 3) = 0;
    *((_QWORD *)v6 + 1) = 0;
    v5 += 48;
    *((_DWORD *)v6 + 8) = 0;
  }
  while (v5 != 288);
  v7 = *(unsigned __int8 *)(a1 + 25);
  v8 = *((unsigned __int8 *)*(&LPP_EVENT_TABLE + v4) + 8 * v7 + a2);
  if (v8 == 2)
  {
    ms_report_exception(2, 16432, 935, "lpp_transaction_act");
LABEL_18:
    v9 = 0;
    goto LABEL_19;
  }
  if (v8 != 1)
  {
    if (!v8)
    {
      if (!*(_BYTE *)(a1 + 25))
        *(_BYTE *)(a1 + 25) = 1;
      if (a2 <= 7)
      {
        switch(a2)
        {
          case 0u:
            v9 = 1;
            v24[0] = 1;
            lpp_transaction_process_request_capabilities(a1, (uint64_t)a3, (uint64_t)v25);
            goto LABEL_19;
          case 1u:
            v24[0] = 1;
            lpp_transaction_process_provide_assistance_data((unsigned __int8 *)a1, (uint64_t)a3);
            goto LABEL_18;
          case 2u:
            v24[0] = 1;
            v22 = lpp_transaction_process_request_location_information(a1, (uint64_t)a3, (uint64_t)v25);
            goto LABEL_42;
          case 3u:
          case 4u:
            lpp_transaction_abort(a1);
            goto LABEL_18;
          case 5u:
            v9 = 1;
            v24[0] = 1;
            lpp_transaction_process_provide_capabilities(a1, (uint64_t)v25);
            goto LABEL_19;
          case 6u:
            v9 = 1;
            v24[0] = 1;
            lpp_transaction_process_request_assistance_data(a1, (uint64_t)a3, (uint64_t)v25);
            goto LABEL_19;
          case 7u:
            v22 = lpp_transaction_process_provide_location_information(a1, a3, v24);
LABEL_42:
            v9 = v22;
            break;
          default:
            goto LABEL_18;
        }
        goto LABEL_19;
      }
    }
    goto LABEL_18;
  }
  v9 = 1;
  lpp_transaction_abort(a1);
  v10 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x578uLL);
  v26 = v10;
  v10[8] = 1;
  *(_QWORD *)v10 = *(_QWORD *)(a1 + 16);
  v11 = v26;
  v26[32] = 0;
  v11[9] = 0;
  v11[1392] = 1;
  *((_DWORD *)v11 + 10) = 0;
  *((_DWORD *)v11 + 12) = 7;
  *((_DWORD *)v11 + 14) = 0;
  v11[68] = 1;
  *((_DWORD *)v11 + 16) = 0;
  v24[0] = 1;
LABEL_19:
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v12 = mach_continuous_time();
    v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Transaction Data,Type,%hhu,SessionId,%u,CurState,%u,NextState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "PSP", 68, "lpp_transaction_act", *(unsigned __int8 *)(a1 + 24), *(_DWORD *)(a1 + 32), v7, *(unsigned __int8 *)(a1 + 25));
    LbsOsaTrace_WriteLog(0x13u, __str, v13, 5, 1);
  }
  v14 = v24[0];
  if (v9 == 1)
  {
    if (v24[0])
    {
      v15 = 0;
      v16 = (unsigned __int8 *)(a1 + 28);
      v17 = v25;
      do
      {
        v18 = lpp_session_detect(v16);
        if (v18)
          ((void (*)(uint64_t *, _BYTE *))v18[7])(v18, v17);
        ++v15;
        v17 += 48;
      }
      while (v15 < v24[0]);
    }
  }
  else
  {
    if (v24[0])
    {
      v19 = 0;
      v20 = 24;
      do
      {
        v21 = *(void **)&v24[v20];
        if (v21)
        {
          free(v21);
          *(_QWORD *)&v24[v20] = 0;
          v14 = v24[0];
        }
        ++v19;
        v20 += 48;
      }
      while (v19 < v14);
    }
    if (*(_BYTE *)(a1 + 25) == 2)
      lpp_transaction_delete(a1);
  }
}

void lpp_transaction_send_uplink_message(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  int v4;
  int v5;

  if (!a1)
  {
    v4 = 16425;
    v5 = 857;
LABEL_7:
    ms_report_exception(2, v4, v5, "lpp_transaction_send_uplink_message");
    return;
  }
  if (!a2)
  {
    v4 = 16442;
    v5 = 863;
    goto LABEL_7;
  }
  v3 = lpp_session_detect((unsigned __int8 *)(a1 + 28));
  if (v3)
    ((void (*)(uint64_t *, uint64_t))v3[7])(v3, a2);
}

size_t lpp_transaction_process_request_capabilities(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  size_t result;
  uint64_t v10;
  unsigned __int16 v11;
  char __str[1040];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v6 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x578uLL);
  *(_QWORD *)(a3 + 16) = v6;
  v6[1392] = 1;
  *((_DWORD *)v6 + 10) = 0;
  *((_DWORD *)v6 + 12) = 1;
  v7 = *(_QWORD *)(a3 + 16);
  *(_BYTE *)(v7 + 8) = 1;
  *(_QWORD *)v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a3 + 16);
  *(_BYTE *)(v8 + 9) = 1;
  *(_BYTE *)(v8 + 32) = 1;
  *(_BYTE *)(v8 + 20) = 1;
  *(_BYTE *)(v8 + 28) = 0;
  if (*(_DWORD *)(a2 + 8))
  {
    *(_DWORD *)(v8 + 56) = 1;
  }
  else
  {
    *(_DWORD *)(v8 + 56) = 0;
    if (*(_DWORD *)(a2 + 16))
    {
      *(_DWORD *)(v8 + 64) = 1;
    }
    else
    {
      *(_DWORD *)(v8 + 64) = 0;
      *(_BYTE *)(v8 + 76) = 0;
      if (*((_BYTE *)GetStaticLppPrivate() + 2) == 1 && *(_BYTE *)(a2 + 32) == 1)
      {
        *(_BYTE *)(v8 + 240) = 1;
        *(_BYTE *)(v8 + 224) = *(_BYTE *)(a2 + 30);
        *(_BYTE *)(v8 + 104) = *(_BYTE *)(a2 + 29);
        if ((*((_BYTE *)GetStaticLppPrivate() + 3) & 6) != 0 && *(_BYTE *)(a2 + 31) == 1)
        {
          *(_BYTE *)(v8 + 232) = 1;
          *(_BYTE *)(v8 + 237) = 1;
        }
        else
        {
          *(_BYTE *)(v8 + 232) = 0;
          *(_BYTE *)(v8 + 237) = 0;
        }
      }
      else
      {
        *(_BYTE *)(v8 + 240) = 0;
      }
      *(_BYTE *)(v8 + 408) = 0;
      lpp_transaction_add_provideCapabilities_r9((_BYTE *)(v8 + 72));
    }
  }
  result = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
  if ((_DWORD)result)
  {
    bzero(__str, 0x410uLL);
    v10 = mach_continuous_time();
    v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Transaction Data,Type,%hhu,SessionId,%u,CurState,%u,NextState,Terminated\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "PSP", 68, "lpp_transaction_process_request_capabilities", *(unsigned __int8 *)(a1 + 24), *(_DWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 25));
    result = LbsOsaTrace_WriteLog(0x13u, __str, v11, 5, 1);
  }
  *(_BYTE *)(a1 + 25) = 2;
  return result;
}

_BYTE *lpp_transaction_add_provideCapabilities_r9(_BYTE *result)
{
  _BYTE *v1;

  v1 = result;
  if (result[168] == 1)
    result = lpp_transaction_add_provideCapabilities_a_gnss((uint64_t)(result + 8));
  if (v1[424] == 1)
    return (_BYTE *)lpp_transaction_add_provideCapabilities_wlan(v1 + 392);
  return result;
}

uint64_t lpp_transaction_process_provide_capabilities(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;
  char __str[1040];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x578uLL);
  *(_QWORD *)(a2 + 16) = v4;
  v4[1392] = 1;
  *((_DWORD *)v4 + 12) = 1;
  v5 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v5 + 8) = 1;
  *(_QWORD *)v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v6 + 9) = 1;
  *(_BYTE *)(v6 + 32) = 1;
  *(_BYTE *)(v6 + 20) = 1;
  *(_BYTE *)(v6 + 28) = 0;
  *(_DWORD *)(v6 + 40) = 0;
  *(_DWORD *)(v6 + 48) = 1;
  *(_DWORD *)(v6 + 56) = 0;
  *(_DWORD *)(v6 + 64) = 0;
  *(_BYTE *)(v6 + 76) = 0;
  if (*((_BYTE *)GetStaticLppPrivate() + 2) == 1)
  {
    *(_BYTE *)(v6 + 240) = 1;
    *(_BYTE *)(v6 + 224) = 1;
    *(_BYTE *)(v6 + 104) = 1;
    if ((*((_BYTE *)GetStaticLppPrivate() + 3) & 6) != 0)
    {
      *(_BYTE *)(v6 + 232) = 1;
      *(_BYTE *)(v6 + 237) = 1;
    }
    else
    {
      *(_BYTE *)(v6 + 232) = 0;
      *(_BYTE *)(v6 + 237) = 0;
    }
  }
  else
  {
    *(_BYTE *)(v6 + 240) = 0;
  }
  *(_BYTE *)(v6 + 408) = 0;
  *(_BYTE *)(v6 + 496) = *((_BYTE *)GetStaticLppPrivate() + 4) == 1;
  lpp_transaction_add_provideCapabilities_r9((_BYTE *)(v6 + 72));
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v7 = mach_continuous_time();
    v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Transaction Data,Type,%hhu,SessionId,%u,CurState,%u,NextState,Terminated\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "PSP", 68, "lpp_transaction_process_provide_capabilities", *(unsigned __int8 *)(a1 + 24), *(_DWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 25));
    LbsOsaTrace_WriteLog(0x13u, __str, v8, 5, 1);
  }
  *(_BYTE *)(a1 + 25) = 2;
  return 1;
}

uint64_t lpp_transaction_process_request_assistance_data(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *StaticLppPrivate;
  _QWORD *v12;
  void *v13;
  _BYTE *v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  unsigned int v25;
  _DWORD *v26;
  unint64_t v27;
  _BYTE *v28;
  char v29;
  __int16 v30;
  _DWORD *v31;
  char v32;
  char *v33;
  char *v34;
  _BYTE *v35;
  _QWORD *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  __int16 v42;
  char v43;
  char v44;

  v6 = (char *)gnssOsa_Calloc("posp_alloc", 18, 1, 0x578uLL);
  *(_QWORD *)(a3 + 16) = v6;
  v7 = v6;
  if (*(_DWORD *)(a1 + 20) == 256)
  {
LABEL_4:
    v7[1392] = 1;
    *((_DWORD *)v7 + 10) = 0;
    v8 = 2;
    *((_DWORD *)v7 + 12) = 2;
    v9 = *(_QWORD *)(a3 + 16);
    *(_BYTE *)(v9 + 8) = 1;
    *(_QWORD *)v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_QWORD *)(a3 + 16);
    if (*(_DWORD *)(a1 + 20) == 256)
      *(_DWORD *)(v10 + 4) = 0;
    *(_BYTE *)(v10 + 9) = 0;
    *((_DWORD *)v6 + 10) = 0;
    *((_DWORD *)v6 + 12) = 2;
    *((_DWORD *)v6 + 14) = 0;
    *((_DWORD *)v6 + 16) = 0;
    v6[144] = 1;
    v6[136] = 1;
    StaticLppPrivate = GetStaticLppPrivate();
    lpp_fill_in_bitstr_from_ulong(StaticLppPrivate[6], 0x1CuLL, (uint64_t)(v6 + 120));
    *((_QWORD *)v6 + 11) = 0x100000003;
    v12 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x10uLL);
    *v12 = 0;
    *((_QWORD *)v6 + 9) = v12;
    *((_QWORD *)v6 + 10) = v12;
    do
    {
      v13 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x10uLL);
      **((_QWORD **)v6 + 10) = v13;
      *((_QWORD *)v6 + 10) = v13;
      --v8;
    }
    while (v8);
    v14 = GetStaticLppPrivate();
    v15 = v14[22] == 1;
    if (v14[22] == 1)
      v16 = 3;
    else
      v16 = 2;
    *((_DWORD *)v6 + 28) = v16;
    *((_DWORD *)v6 + 29) = 1;
    if (v15)
      v17 = 3;
    else
      v17 = 2;
    v18 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x10uLL);
    *v18 = 0;
    *((_QWORD *)v6 + 12) = v18;
    *((_QWORD *)v6 + 13) = v18;
    v19 = v17 - 1;
    do
    {
      v20 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x10uLL);
      **((_QWORD **)v6 + 13) = v20;
      *((_QWORD *)v6 + 13) = v20;
      --v19;
    }
    while (v19);
    v21 = (char *)GetStaticLppPrivate();
    v22 = *(unsigned int *)(v21 + 18) | ((unint64_t)*((unsigned __int16 *)v21 + 11) << 32);
    v23 = *((_QWORD *)v6 + 9);
    v24 = (_DWORD *)*((_QWORD *)v6 + 12);
    v25 = (unsigned __int16)*(_DWORD *)(v21 + 18) / 0x64u;
    *(_DWORD *)(v23 + 8) = v25;
    LOBYTE(v25) = v22 - 100 * v25;
    v26 = *(_DWORD **)v23;
    v26[2] = v25 / 0xAu;
    *(_DWORD *)(*(_QWORD *)v26 + 8) = v25 % 0xAu;
    if ((v22 & 0xFF00000000) == 0x100000000)
    {
      v27 = (v22 & 0xFFFFFFFFFFFFLL) >> 16;
      v24[2] = (unsigned __int16)v27 / 0x64u;
      LOWORD(v27) = (unsigned __int16)v27 % 0x64u;
      v24 = *(_DWORD **)v24;
    }
    else
    {
      v27 = v22 >> 16;
    }
    v24[2] = (unsigned __int16)v27 / 0xAu;
    *(_DWORD *)(*(_QWORD *)v24 + 8) = (unsigned __int16)v27 % 0xAu;
    if (*(_BYTE *)a2)
      goto LABEL_20;
    v29 = *(_BYTE *)(a2 + 64);
    if (*((_BYTE *)GetStaticLppPrivate() + 2) && (v29 & 1) != 0)
    {
      *(_BYTE *)(a1 + 40) |= 1u;
      v6[288] = 1;
      v30 = *(_WORD *)(a2 + 16);
      if ((v30 & 0x64) != 0)
      {
        v6[248] = 1;
        v6[184] = 0;
        if ((v30 & 0x40) != 0)
        {
          *((_QWORD *)v6 + 21) = 0x100000001;
          v31 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x10uLL);
          *(_QWORD *)v31 = 0;
          *((_QWORD *)v6 + 19) = v31;
          *((_QWORD *)v6 + 20) = v31;
          v30 = *(_WORD *)(a2 + 16);
          if ((v30 & 0x40) != 0)
          {
            v6[184] = 1;
            v31[2] = 0;
            *((_WORD *)v6 + 88) = 257;
            v6[179] = 0;
          }
        }
        v6[192] = (v30 & 0x20) != 0;
        if ((v30 & 4) != 0)
        {
          v6[224] = 0;
          v6[216] = 0;
          v32 = 1;
        }
        else
        {
          v32 = 0;
        }
        v6[232] = v32;
        v6[240] = 0;
        v30 = *(_WORD *)(a2 + 16);
      }
      else
      {
        v6[248] = 0;
      }
      if ((v30 & 0x19B) != 0)
      {
        v6[280] = 1;
        *((_QWORD *)v6 + 34) = 0x100000001;
        v33 = (char *)gnssOsa_Calloc("posp_alloc", 18, 1, 0x150uLL);
        v34 = v33;
        *(_QWORD *)v33 = 0;
        *((_QWORD *)v6 + 32) = v33;
        *((_QWORD *)v6 + 33) = v33;
        *((_DWORD *)v33 + 2) = 0;
        v33[16] = 0;
        v33[48] = 0;
        v33[80] = 0;
        if ((*(_BYTE *)(a2 + 16) & 8) != 0)
        {
          v33[176] = 1;
          *((_DWORD *)v33 + 22) = 0;
          *((_DWORD *)v33 + 24) = *(unsigned __int16 *)(a2 + 18);
          *((_DWORD *)v33 + 25) = *(unsigned __int8 *)(a2 + 20);
          *((_DWORD *)v33 + 26) = *(unsigned __int8 *)(a2 + 22);
          v35 = v33 + 136;
          if (*(_BYTE *)(a2 + 21))
          {
            *v35 = 1;
            if (*(_BYTE *)(a2 + 21))
            {
              *((_DWORD *)v33 + 33) = 1;
              *((_DWORD *)v33 + 32) = *(unsigned __int8 *)(a2 + 21);
              v36 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x30uLL);
              *((_QWORD *)v34 + 14) = v36;
              v37 = v34 + 112;
              *v36 = 0;
              *((_QWORD *)v34 + 15) = *((_QWORD *)v34 + 14);
              LODWORD(v38) = *(unsigned __int8 *)(a2 + 21);
              if (v38 >= 2)
              {
                v39 = 1;
                do
                {
                  **((_QWORD **)v34 + 15) = gnssOsa_Calloc("posp_alloc", 18, 1, 0x30uLL);
                  *((_QWORD *)v34 + 15) = **((_QWORD **)v34 + 15);
                  ++v39;
                  v38 = *(unsigned __int8 *)(a2 + 21);
                }
                while (v39 < v38);
              }
              if ((_DWORD)v38)
              {
                v40 = 0;
                do
                {
                  v37 = *(char **)v37;
                  *((_DWORD *)v37 + 2) = *(unsigned __int8 *)(a2 + v40 + 31);
                  lpp_fill_in_bitstr_from_byte(v37 + 16, 0xBuLL, *(unsigned __int8 *)(a2 + v40 + 47));
                  v37[36] = 1;
                  *((_DWORD *)v37 + 8) = 2;
                  v37[44] = 1;
                  *((_DWORD *)v37 + 10) = 2;
                  ++v40;
                }
                while (v40 < *(unsigned __int8 *)(a2 + 21));
              }
            }
            goto LABEL_50;
          }
        }
        else
        {
          v35 = v33 + 176;
        }
        *v35 = 0;
LABEL_50:
        v41 = 0;
        v42 = *(_WORD *)(a2 + 16);
        v34[184] = HIBYTE(v42) & 1;
        v34[256] = 0;
        if ((v42 & 0x80) != 0)
        {
          *((_DWORD *)v34 + 65) = 0;
          v41 = 1;
        }
        v34[264] = v41;
        if ((v42 & 1) != 0)
        {
          v43 = 1;
          v34[272] = 1;
          *((_DWORD *)v34 + 67) = 2;
        }
        else
        {
          v43 = 0;
        }
        v34[276] = v43;
        if ((v42 & 2) != 0)
        {
          v44 = 1;
          *((_DWORD *)v34 + 70) = 1;
          v34[284] = 1;
        }
        else
        {
          v44 = 0;
        }
        v34[288] = v44;
        v28 = v34 + 296;
        goto LABEL_59;
      }
    }
    else
    {
      if (!*(_BYTE *)(a1 + 40))
      {
LABEL_20:
        v28 = v6 + 288;
LABEL_59:
        *v28 = 0;
        v6[328] = 0;
        return 1;
      }
      v6[288] = 1;
      v6[248] = 0;
    }
    v28 = v6 + 280;
    goto LABEL_59;
  }
  if (lpp_session_detect((unsigned __int8 *)(a1 + 28)))
  {
    v7 = *(char **)(a3 + 16);
    goto LABEL_4;
  }
  ms_report_exception(2, 16388, 1209, "lpp_transaction_process_request_assistance_data");
  if (v6)
    free(v6);
  return 1;
}

void lpp_transaction_process_provide_assistance_data(unsigned __int8 *a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int16 v7;
  int v8;
  uint64_t v9;
  unsigned __int16 v10;
  char __str[1040];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = a1[24];
  if (v4 == 3)
  {
    v5 = a1[40];
  }
  else if (v4 == 2)
  {
    v5 = a1[41];
  }
  else
  {
    v5 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v6 = mach_continuous_time();
      v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx transaction type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "PSP", 69, "lpp_transaction_process_provide_assistance_data", 770, a1[24]);
      LbsOsaTrace_WriteLog(0x13u, __str, v7, 0, 1);
      v5 = 0;
    }
  }
  if (*(_DWORD *)a2 == 3
    && !*(_DWORD *)(a2 + 8)
    && !*(_DWORD *)(a2 + 16)
    && *((_BYTE *)GetStaticLppPrivate() + 2) == 1
    && *(_BYTE *)(a2 + 424) == 1)
  {
    if (*(_BYTE *)(a2 + 352) == 1)
      lpp_transaction_process_provide_assistance_data_a_gnss_common(a2 + 32, (uint64_t)a1);
    if (*(_BYTE *)(a2 + 384) == 1)
      lpp_transaction_process_provide_assistance_data_a_gnss_generic((uint64_t *)(a2 + 360), (uint64_t)a1);
    v8 = a1[24];
    if (v8 == 3)
    {
      v5 = a1[40];
    }
    else if (v8 == 2)
    {
      v5 = a1[41];
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx transaction type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "PSP", 69, "lpp_transaction_process_provide_assistance_data", 770, a1[24]);
      LbsOsaTrace_WriteLog(0x13u, __str, v10, 0, 1);
    }
    if (*(_BYTE *)(a2 + 420) == 1 && v5 == 1)
      lpp_transaction_process_provide_assistance_data_a_gnss_error((_DWORD *)(a2 + 388), (uint64_t)a1);
  }
  if (a1[25] == 1 && v5 == 1)
    a1[25] = 2;
}

void lpp_transaction_process_provide_assistance_data_a_gnss_common(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  char *v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  int *v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  _BYTE *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned __int16 v18;
  unsigned int v19;
  uint64_t v20;
  unsigned __int16 v21;
  unsigned int v22;
  uint64_t v23;
  unsigned __int16 v24;
  unsigned int v25;
  uint64_t v26;
  unsigned __int16 v27;
  unsigned int v28;
  uint64_t v29;
  unsigned __int16 v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned __int16 v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  int v42;
  unint64_t v43;
  unsigned __int8 v44;
  unsigned int v45;
  uint64_t v46;
  unsigned __int16 v47;
  char *v48;
  int v49;
  uint64_t v50;
  unsigned __int16 v51;
  unsigned int v52;
  uint64_t v53;
  unsigned __int16 v54;
  BOOL v55;
  unsigned int v56;
  uint64_t v57;
  unsigned __int16 v58;
  uint64_t v59;
  int v60;
  char *v61;
  char *v62;
  int v63;
  unsigned __int8 *v64;
  uint64_t v65;
  int v66;
  _WORD *v67;
  int v68;
  unint64_t v69;
  uint64_t *v70;
  unsigned __int8 v71;
  int v72;
  char *v73;
  unint64_t v74;
  unsigned __int8 v75;
  uint64_t *v76;
  _WORD *v77;
  int v78;
  int v79;
  uint64_t v80;
  unsigned __int16 v81;
  uint64_t v82;
  unsigned __int16 v83;
  uint64_t ref_loc_bitmap;
  uint64_t v85;
  unsigned __int16 v86;
  int v87;
  uint64_t v88;
  unsigned __int16 v89;
  uint64_t v90;
  unsigned __int16 v91;
  uint64_t v92;
  unsigned __int16 v93;
  uint64_t v94;
  unsigned __int16 v95;
  uint64_t v96;
  unsigned __int16 v97;
  uint64_t v98;
  unsigned __int16 v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int16 v102;
  uint64_t v103;
  unsigned __int16 v104;
  uint64_t v105;
  unsigned __int16 v106;
  uint64_t v107;
  unsigned __int16 v108;
  uint64_t v109;
  unsigned __int16 v110;
  uint64_t v111;
  unsigned __int16 v112;
  uint64_t v113;
  unsigned __int16 v114;
  uint64_t v115;
  unsigned __int16 v116;
  unsigned __int8 v117;
  int v118;
  unint64_t v119;
  int v120;
  _OWORD v121[7];
  int v122[4];
  __int128 v123;
  __int128 v124;
  __int128 v125;
  _OWORD v126[2];
  __int128 v127;
  char v128;
  char *v129;
  char v130;
  unint64_t __s;
  int v132;
  char __str[1040];
  uint64_t v134;

  v134 = *MEMORY[0x24BDAC8D0];
  v117 = *(_BYTE *)(a2 + 28);
  v118 = *(_DWORD *)(a2 + 32);
  if (*(_BYTE *)(a1 + 120) != 1)
    goto LABEL_105;
  for (i = 0; i != 128; i += 8)
  {
    v5 = (char *)&__s + i;
    *v5 = -1;
    *(_DWORD *)(v5 + 2) = -1;
    v5[6] = -1;
  }
  memset_s(&__s, 0x80uLL, 0, 0x80uLL);
  if (*(_DWORD *)a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v6 = mach_continuous_time();
      v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GNSS ID\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "PSP", 69, "lpp_transaction_process_provide_assistance_data_a_gnss_common", 770);
      LbsOsaTrace_WriteLog(0x13u, __str, v7, 0, 1);
    }
    goto LABEL_105;
  }
  if (*((_BYTE *)GetStaticLppPrivate() + 2) != 1)
    goto LABEL_105;
  LOWORD(v122[0]) = -1;
  BYTE2(v122[0]) = -1;
  v122[1] = -1;
  LOWORD(v122[2]) = 255;
  T_UTRAN_GPS_TIME_s::T_UTRAN_GPS_TIME_s((T_UTRAN_GPS_TIME_s *)&v122[3]);
  v8 = 0;
  DWORD2(v124) = 2;
  WORD6(v124) = 32512;
  BYTE14(v124) = 0;
  LOWORD(v125) = -1;
  BYTE2(v125) = -1;
  DWORD1(v125) = -1;
  WORD4(v125) = -1;
  BYTE12(v125) = 0;
  do
  {
    v9 = &v122[v8];
    *((_BYTE *)v9 + 62) = -1;
    v9[16] = -1;
    *((_BYTE *)v9 + 68) = -1;
    v8 += 2;
  }
  while (v8 != 32);
  v128 = -1;
  v129 = 0;
  v130 = -1;
  memset_s(v122, 0xD0uLL, 0, 0xD0uLL);
  v10 = *(_DWORD *)(a1 + 4);
  v11 = *(_DWORD *)(a1 + 8);
  v12 = (v10 / 7) & 0x3FF;
  if (v10 / -7 >= 0)
    v12 = -((v10 / -7) & 0x3FF);
  LOWORD(v122[0]) = v12;
  v122[1] = 86400000 * (v10 % 7) + 1000 * v11;
  if (*(_BYTE *)(a1 + 16) == 1)
    v122[1] = *(_DWORD *)(a1 + 12) + 86400000 * (v10 % 7) + 1000 * v11;
  memset_s((char *)&v125 + 14, 0x80uLL, 0, 0x80uLL);
  if (*(_BYTE *)(a1 + 72) == 1 && (*(_DWORD *)(a1 + 64) - 1) <= 0x3F)
  {
    v13 = 0;
    v14 = (uint64_t *)(a1 + 48);
    v15 = (char *)v126 + 4;
    do
    {
      v14 = (uint64_t *)*v14;
      v16 = *((_DWORD *)v14 + 2);
      if (v16 > 0xFF)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v17 = mach_continuous_time();
          v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatID,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceTime", 772, *((_DWORD *)v14 + 2));
          LbsOsaTrace_WriteLog(0x13u, __str, v18, 0, 1);
        }
      }
      else
      {
        *(v15 - 6) = v16 - 1;
      }
      v19 = *((_DWORD *)v14 + 3);
      if (HIWORD(v19))
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v20 = mach_continuous_time();
          v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx tlmWord,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceTime", 772, *((_DWORD *)v14 + 3));
          LbsOsaTrace_WriteLog(0x13u, __str, v21, 0, 1);
        }
      }
      else
      {
        *((_WORD *)v15 - 2) = v19;
      }
      v22 = *((_DWORD *)v14 + 4);
      if (v22 > 0xFF)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v23 = mach_continuous_time();
          v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx antiSpoof,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceTime", 772, *((_DWORD *)v14 + 4));
          LbsOsaTrace_WriteLog(0x13u, __str, v24, 0, 1);
        }
      }
      else
      {
        *(v15 - 2) = v22;
      }
      v25 = *((_DWORD *)v14 + 5);
      if (v25 > 0xFF)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v26 = mach_continuous_time();
          v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx alert,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceTime", 772, *((_DWORD *)v14 + 5));
          LbsOsaTrace_WriteLog(0x13u, __str, v27, 0, 1);
        }
      }
      else
      {
        *(v15 - 1) = v25;
      }
      v28 = *((_DWORD *)v14 + 6);
      if (v28 > 0xFF)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v29 = mach_continuous_time();
          v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx tlmRsvdBits,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceTime", 772, *((_DWORD *)v14 + 6));
          LbsOsaTrace_WriteLog(0x13u, __str, v30, 0, 1);
        }
      }
      else
      {
        *v15 = v28;
      }
      v31 = v13 + 1;
      if (v13 > 0xE)
        break;
      v15 += 8;
      ++v13;
    }
    while (v31 < *(int *)(a1 + 64));
  }
  else
  {
    LOBYTE(v31) = 0;
  }
  BYTE12(v125) = v31;
  if (*(_BYTE *)(a1 + 84) == 1)
  {
    v32 = *(_DWORD *)(a1 + 80);
    if (v32 > 0xFF)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v33 = mach_continuous_time();
        v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx referenceTimeUnc,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceTime", 772, *(_DWORD *)(a1 + 80));
        LbsOsaTrace_WriteLog(0x13u, __str, v34, 0, 1);
      }
      goto LABEL_47;
    }
  }
  else
  {
    LOBYTE(v32) = -1;
  }
  LOBYTE(v122[2]) = v32;
LABEL_47:
  BYTE2(v122[0]) = -1;
  if (*(_BYTE *)(a1 + 112) == 1)
  {
    v35 = *(unsigned int *)(a1 + 104);
    if ((v35 - 1) <= 0xE)
    {
      v36 = *(uint64_t **)(a1 + 88);
      v37 = (char *)operator new[](32 * v35, MEMORY[0x24BEDB6B8]);
      if (v37)
      {
        v38 = v37;
        v39 = v37;
        v40 = &v37[32 * v35];
        do
        {
          *(_WORD *)v39 = -1;
          *((_DWORD *)v39 + 1) = -1;
          *((_WORD *)v39 + 4) = -129;
          v41 = v39 + 12;
          v39[10] = 0;
          memset_s(v39 + 12, 0x14uLL, 0, 0x14uLL);
          v39 = v41 + 20;
        }
        while (v41 + 20 != v40);
        v42 = *(_DWORD *)(a1 + 104);
        if (v42)
        {
          v43 = 0;
          v44 = 0;
          do
          {
            if (!*((_DWORD *)v36 + 6))
            {
              v45 = *((_DWORD *)v36 + 2);
              if (HIWORD(v45))
              {
                if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  v46 = mach_continuous_time();
                  v47 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx secondsFromFrameStructureStart,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v46), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceTime", 772, *((_DWORD *)v36 + 2));
                  LbsOsaTrace_WriteLog(0x13u, __str, v47, 0, 1);
                }
              }
              else
              {
                *(_WORD *)&v38[32 * v44] = v45;
              }
              v48 = &v38[32 * v44];
              *((_DWORD *)v48 + 1) = *((_DWORD *)v36 + 3);
              v49 = *((_DWORD *)v36 + 4);
              if (v49 == (char)v49)
              {
                v48[8] = v49;
              }
              else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v50 = mach_continuous_time();
                v51 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx frameDrift,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v50), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceTime", 772, *((_DWORD *)v36 + 4));
                LbsOsaTrace_WriteLog(0x13u, __str, v51, 0, 1);
              }
              v52 = *((_DWORD *)v36 + 32);
              if (v52 > 0xFF)
              {
                if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  v53 = mach_continuous_time();
                  v54 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx referenceTimeUnc,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v53), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceTime", 772, *((_DWORD *)v36 + 32));
                  LbsOsaTrace_WriteLog(0x13u, __str, v54, 0, 1);
                }
              }
              else
              {
                v48[9] = v52;
              }
              v55 = *((_BYTE *)v36 + 136) == 1 && !*((_DWORD *)v36 + 33);
              v48[10] = v55;
              v56 = *((_DWORD *)v36 + 8);
              if (HIWORD(v56))
              {
                if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  v57 = mach_continuous_time();
                  v58 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx physCellId,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v57), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceTime", 772, *((_DWORD *)v36 + 8));
                  LbsOsaTrace_WriteLog(0x13u, __str, v58, 0, 1);
                }
              }
              else
              {
                *(_WORD *)&v38[32 * v44 + 12] = v56;
              }
              v59 = 120;
              if (*((_BYTE *)v36 + 124) != 1)
                v59 = 116;
              v60 = *(_DWORD *)((char *)v36 + v59);
              v61 = &v38[32 * v44];
              *((_DWORD *)v61 + 4) = v60;
              if (*((_BYTE *)v36 + 112) == 1 && !*((_DWORD *)v36 + 22))
              {
                v62 = &v38[32 * v44];
                v62[20] = 1;
                if (*((_BYTE *)v36 + 100))
                {
                  v63 = 0;
                  *((_DWORD *)v62 + 7) = 0;
                  v64 = (unsigned __int8 *)v36[13];
                  v65 = 28;
                  do
                  {
                    v66 = *v64++;
                    v63 |= v66 << --v65;
                    *((_DWORD *)v62 + 7) = v63;
                  }
                  while (v65);
                }
                *((_WORD *)v62 + 11) = 0;
                v67 = v62 + 22;
                if (*((_DWORD *)v36 + 14))
                {
                  v68 = 0;
                  v69 = 0;
                  v70 = v36 + 5;
                  v71 = 100;
                  do
                  {
                    v70 = (uint64_t *)*v70;
                    v68 += *((_DWORD *)v70 + 2) * v71;
                    *v67 = v68;
                    v71 /= 0xAu;
                    ++v69;
                  }
                  while (v69 < *((int *)v36 + 14));
                }
                else
                {
                  v71 = 100;
                }
                v72 = *((_DWORD *)v36 + 20);
                v73 = &v38[32 * v44];
                v73[26] = v72 != 2;
                if (*((_DWORD *)v36 + 20))
                {
                  v74 = 0;
                  if (v72 == 2)
                    v75 = 10;
                  else
                    v75 = v71;
                  v76 = v36 + 8;
                  v79 = *((unsigned __int16 *)v73 + 12);
                  v77 = v73 + 24;
                  v78 = v79;
                  do
                  {
                    v76 = (uint64_t *)*v76;
                    v78 += *((_DWORD *)v76 + 2) * v75;
                    *v77 = v78;
                    v75 /= 0xAu;
                    ++v74;
                  }
                  while (v74 < *((int *)v36 + 20));
                }
              }
              else
              {
                v61[20] = 0;
              }
              ++v44;
              v42 = *(_DWORD *)(a1 + 104);
            }
            v36 = (uint64_t *)*v36;
            ++v43;
          }
          while (v43 < v42);
        }
        else
        {
          v44 = 0;
        }
        v128 = v44;
        v129 = v38;
      }
      else
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v80 = mach_continuous_time();
          v81 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx gnss ref time allocation failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v80), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceTime", 1537);
          LbsOsaTrace_WriteLog(0x13u, __str, v81, 0, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v82 = mach_continuous_time();
          v83 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v82), "PSP", 68, "lpp_transaction_add_ProvideGnssReferenceTime");
          LbsOsaTrace_WriteLog(0x13u, __str, v83, 5, 1);
        }
      }
    }
  }
  v130 = v117;
  v119 = ((unint64_t)v117 << 32) | 2;
  v120 = v118;
  lpm_map_transaction_id((const _LPP_TRANSACTION *)a2, __str);
  gps_set_gps_time((uint64_t)v122, 0, (uint64_t)&v119);
LABEL_105:
  if (*(_BYTE *)(a1 + 164) == 1)
  {
    T_GNSS_POSITION_s::T_GNSS_POSITION_s((T_GNSS_POSITION_s *)v122);
    memset_s(v122, 0x70uLL, 0, 0x70uLL);
    ref_loc_bitmap = lpp_transaction_get_ref_loc_bitmap((_LPP_TRANSACTION *)a2);
    LOWORD(v122[0]) = 0;
    *(_QWORD *)&v122[2] = 0;
    DWORD1(v126[0]) = 0;
    LODWORD(v123) = 590335;
    if (*(_DWORD *)(a1 + 124) > 0xFFu)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v85 = mach_continuous_time();
        v86 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx latitudeSign,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v85), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceLocation", 772, *(_DWORD *)(a1 + 124));
        LbsOsaTrace_WriteLog(0x13u, __str, v86, 0, 1);
      }
    }
    else
    {
      BYTE4(v123) = *(_DWORD *)(a1 + 124);
    }
    v87 = *(_DWORD *)(a1 + 132);
    *((_QWORD *)&v123 + 1) = *(int *)(a1 + 128);
    LODWORD(v124) = v87;
    if (*(_DWORD *)(a1 + 144) > 0xFFu)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v88 = mach_continuous_time();
        v89 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx uncertaintySemiMajor,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v88), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceLocation", 772, *(_DWORD *)(a1 + 144));
        LbsOsaTrace_WriteLog(0x13u, __str, v89, 0, 1);
      }
    }
    else
    {
      BYTE4(v124) = *(_DWORD *)(a1 + 144);
    }
    if (*(_DWORD *)(a1 + 148) > 0xFFu)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v90 = mach_continuous_time();
        v91 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx uncertaintySemiMinor,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v90), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceLocation", 772, *(_DWORD *)(a1 + 148));
        LbsOsaTrace_WriteLog(0x13u, __str, v91, 0, 1);
      }
    }
    else
    {
      BYTE5(v124) = *(_DWORD *)(a1 + 148);
    }
    if (*(_DWORD *)(a1 + 152) > 0xFFu)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v92 = mach_continuous_time();
        v93 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx orientationMajorAxis,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v92), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceLocation", 772, *(_DWORD *)(a1 + 152));
        LbsOsaTrace_WriteLog(0x13u, __str, v93, 0, 1);
      }
    }
    else
    {
      BYTE6(v124) = *(_DWORD *)(a1 + 152);
    }
    if (*(_DWORD *)(a1 + 136) > 0xFFu)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v94 = mach_continuous_time();
        v95 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx altitudeDirection,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v94), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceLocation", 772, *(_DWORD *)(a1 + 136));
        LbsOsaTrace_WriteLog(0x13u, __str, v95, 0, 1);
      }
    }
    else
    {
      BYTE7(v124) = *(_DWORD *)(a1 + 136);
    }
    *((_QWORD *)&v124 + 1) = *(int *)(a1 + 140);
    if (*(_DWORD *)(a1 + 156) > 0xFFu)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v96 = mach_continuous_time();
        v97 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx uncertaintyAltitude,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v96), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceLocation", 772, *(_DWORD *)(a1 + 156));
        LbsOsaTrace_WriteLog(0x13u, __str, v97, 0, 1);
      }
    }
    else
    {
      LOBYTE(v125) = *(_DWORD *)(a1 + 156);
    }
    if (*(_DWORD *)(a1 + 160) > 0xFFu)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v98 = mach_continuous_time();
        v99 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx confidence,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v98), "PSP", 69, "lpp_transaction_add_ProvideGnssReferenceLocation", 772, *(_DWORD *)(a1 + 160));
        LbsOsaTrace_WriteLog(0x13u, __str, v99, 0, 1);
      }
    }
    else
    {
      BYTE1(v125) = *(_DWORD *)(a1 + 160);
    }
    BYTE2(v125) = 0;
    BYTE13(v127) = v117;
    v121[4] = v126[0];
    v121[5] = v126[1];
    v121[0] = *(_OWORD *)v122;
    v121[1] = v123;
    v121[2] = v124;
    v121[3] = v125;
    v121[6] = v127;
    __s = ((unint64_t)v117 << 32) | 2;
    v132 = v118;
    lpm_map_transaction_id((const _LPP_TRANSACTION *)a2, __str);
    gps_set_gnss_ref_loc((uint64_t)v121, ref_loc_bitmap, 0, (uint64_t)&__s);
  }
  if (*(_BYTE *)(a1 + 280) == 1 && *(_BYTE *)(a1 + 216) == 1)
  {
    LOWORD(v122[0]) = -256;
    *(_QWORD *)((char *)v122 + 2) = 0x7F7F7F7F7F7F7F7FLL;
    BYTE2(v122[2]) = -1;
    memset_s(v122, 0xBuLL, 0, 0xBuLL);
    v100 = lpp_transaction_get_ref_loc_bitmap((_LPP_TRANSACTION *)a2);
    LOBYTE(v122[0]) = 1;
    BYTE1(v122[0]) = **(_BYTE **)(a1 + 176);
    if (*(_DWORD *)(a1 + 184) == (char)*(_DWORD *)(a1 + 184))
    {
      BYTE2(v122[0]) = *(_DWORD *)(a1 + 184);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v101 = mach_continuous_time();
      v102 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx alfa0,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v101), "PSP", 69, "lpp_transaction_add_ProvideGnssIonosphericModel", 772, *(_DWORD *)(a1 + 184));
      LbsOsaTrace_WriteLog(0x13u, __str, v102, 0, 1);
    }
    if (*(_DWORD *)(a1 + 188) == (char)*(_DWORD *)(a1 + 188))
    {
      HIBYTE(v122[0]) = *(_DWORD *)(a1 + 188);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v103 = mach_continuous_time();
      v104 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx alfa1,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v103), "PSP", 69, "lpp_transaction_add_ProvideGnssIonosphericModel", 772, *(_DWORD *)(a1 + 188));
      LbsOsaTrace_WriteLog(0x13u, __str, v104, 0, 1);
    }
    if (*(_DWORD *)(a1 + 192) == (char)*(_DWORD *)(a1 + 192))
    {
      LOBYTE(v122[1]) = *(_DWORD *)(a1 + 192);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v105 = mach_continuous_time();
      v106 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx alfa2,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v105), "PSP", 69, "lpp_transaction_add_ProvideGnssIonosphericModel", 772, *(_DWORD *)(a1 + 192));
      LbsOsaTrace_WriteLog(0x13u, __str, v106, 0, 1);
    }
    if (*(_DWORD *)(a1 + 196) == (char)*(_DWORD *)(a1 + 196))
    {
      BYTE1(v122[1]) = *(_DWORD *)(a1 + 196);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v107 = mach_continuous_time();
      v108 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx alfa3,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v107), "PSP", 69, "lpp_transaction_add_ProvideGnssIonosphericModel", 772, *(_DWORD *)(a1 + 196));
      LbsOsaTrace_WriteLog(0x13u, __str, v108, 0, 1);
    }
    if (*(_DWORD *)(a1 + 200) == (char)*(_DWORD *)(a1 + 200))
    {
      BYTE2(v122[1]) = *(_DWORD *)(a1 + 200);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v109 = mach_continuous_time();
      v110 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx beta0,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v109), "PSP", 69, "lpp_transaction_add_ProvideGnssIonosphericModel", 772, *(_DWORD *)(a1 + 200));
      LbsOsaTrace_WriteLog(0x13u, __str, v110, 0, 1);
    }
    if (*(_DWORD *)(a1 + 204) == (char)*(_DWORD *)(a1 + 204))
    {
      HIBYTE(v122[1]) = *(_DWORD *)(a1 + 204);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v111 = mach_continuous_time();
      v112 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx beta1,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v111), "PSP", 69, "lpp_transaction_add_ProvideGnssIonosphericModel", 772, *(_DWORD *)(a1 + 204));
      LbsOsaTrace_WriteLog(0x13u, __str, v112, 0, 1);
    }
    if (*(_DWORD *)(a1 + 208) == (char)*(_DWORD *)(a1 + 208))
    {
      LOBYTE(v122[2]) = *(_DWORD *)(a1 + 208);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v113 = mach_continuous_time();
      v114 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx beta2,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v113), "PSP", 69, "lpp_transaction_add_ProvideGnssIonosphericModel", 772, *(_DWORD *)(a1 + 208));
      LbsOsaTrace_WriteLog(0x13u, __str, v114, 0, 1);
    }
    if (*(_DWORD *)(a1 + 212) == (char)*(_DWORD *)(a1 + 212))
    {
      BYTE1(v122[2]) = *(_DWORD *)(a1 + 212);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v115 = mach_continuous_time();
      v116 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx beta3,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v115), "PSP", 69, "lpp_transaction_add_ProvideGnssIonosphericModel", 772, *(_DWORD *)(a1 + 212));
      LbsOsaTrace_WriteLog(0x13u, __str, v116, 0, 1);
    }
    BYTE2(v122[2]) = v117;
    send_to_lpi_gnss_iono_model_req(*(uint64_t *)v122, LOWORD(v122[2]) | (v117 << 16), v100, ((unint64_t)v117 << 32) | 2, v118, (_LPP_TRANSACTION *)a2);
  }
}

void sub_21E552944(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2207AFDC0](v1, MEMORY[0x24BEDB6B8]);
  _Unwind_Resume(a1);
}

void lpp_transaction_process_provide_assistance_data_a_gnss_generic(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  const std::nothrow_t *v4;
  uint64_t *v5;
  _BYTE *v6;
  _BYTE *v7;
  unsigned int v8;
  uint64_t v9;
  size_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int16 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  size_t v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned __int16 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t *v40;
  char *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned __int16 v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned __int8 *v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  unsigned __int16 v55;
  int v56;
  uint64_t v57;
  unsigned __int16 v58;
  int v59;
  uint64_t v60;
  unsigned __int16 v61;
  int v62;
  uint64_t v63;
  unsigned __int16 v64;
  unsigned int v65;
  uint64_t v66;
  unsigned __int16 v67;
  unsigned int v68;
  uint64_t v69;
  unsigned __int16 v70;
  unsigned int v71;
  uint64_t v72;
  unsigned __int16 v73;
  int v74;
  uint64_t v75;
  unsigned __int16 v76;
  int v77;
  uint64_t v78;
  unsigned __int16 v79;
  int v80;
  uint64_t v81;
  unsigned __int16 v82;
  int v83;
  uint64_t v84;
  unsigned __int16 v85;
  int v86;
  uint64_t v87;
  unsigned __int16 v88;
  int v89;
  uint64_t v90;
  unsigned __int16 v91;
  int v92;
  uint64_t v93;
  unsigned __int16 v94;
  int v95;
  uint64_t v96;
  unsigned __int16 v97;
  unsigned int v98;
  uint64_t v99;
  unsigned __int16 v100;
  unsigned int v101;
  uint64_t v102;
  unsigned __int16 v103;
  unsigned int v104;
  uint64_t v105;
  unsigned __int16 v106;
  uint64_t v107;
  unsigned __int16 v108;
  uint64_t v109;
  unsigned __int16 v110;
  int v111;
  uint64_t v112;
  uint64_t *v113;
  int v114;
  uint64_t v115;
  unsigned __int16 v116;
  uint64_t v117;
  unsigned __int16 v118;
  uint64_t v119;
  unsigned __int16 v120;
  uint64_t v121;
  unsigned __int16 v122;
  uint64_t v123;
  unsigned __int16 v124;
  uint64_t v125;
  unsigned __int16 v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t *v130;
  BOOL v131;
  uint64_t v132;
  unsigned __int16 v133;
  _BYTE *v134;
  unint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v141;
  int v142;
  uint64_t v143;
  int v144;
  __int128 __s;
  uint64_t v146;
  char __str[16];
  uint64_t v148;
  uint64_t v149;

  v149 = *MEMORY[0x24BDAC8D0];
  if ((*((_DWORD *)a1 + 4) - 1) > 0xF)
    return;
  v3 = 0;
  v137 = *(unsigned __int8 *)(a2 + 28);
  v139 = (v137 << 32) | 2;
  v4 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  v138 = *(_DWORD *)(a2 + 32);
  v5 = a1;
  do
  {
    v5 = (uint64_t *)*v5;
    if (*((_BYTE *)v5 + 328) != 1)
      goto LABEL_13;
    if (*((_DWORD *)v5 + 2) || *((_BYTE *)GetStaticLppPrivate() + 2) != 1)
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        goto LABEL_13;
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GNSS ID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "PSP", 69, "lpp_transaction_provide_almanac_assistance", 770, *((_DWORD *)v5 + 2));
      v11 = 0;
      goto LABEL_12;
    }
    v6 = operator new(0x18uLL, v4);
    if (!v6)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v13 = mach_continuous_time();
        v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SessionList allocation failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "PSP", 69, "lpp_transaction_provide_gps_almanac_assistance", 1537);
        LbsOsaTrace_WriteLog(0x13u, __str, v14, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
      {
LABEL_18:
        bzero(__str, 0x410uLL);
        v15 = mach_continuous_time();
        v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "PSP", 68, "lpp_transaction_provide_gps_almanac_assistance");
        v11 = 5;
LABEL_12:
        LbsOsaTrace_WriteLog(0x13u, __str, v10, v11, 1);
        goto LABEL_13;
      }
      goto LABEL_13;
    }
    v7 = v6;
    *(_WORD *)v6 = 255;
    v6[2] = 0;
    *((_QWORD *)v6 + 1) = 0;
    v6[16] = -1;
    if (*((_BYTE *)v5 + 268) == 1)
    {
      v8 = *((_DWORD *)v5 + 66);
      if (v8 > 0xFF)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v16 = mach_continuous_time();
          v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx weekNumber,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "PSP", 69, "lpp_transaction_provide_gps_almanac_assistance", 772, *((_DWORD *)v5 + 66));
          LbsOsaTrace_WriteLog(0x13u, __str, v17, 0, 1);
        }
      }
      else
      {
        *v6 = v8;
      }
    }
    if (*((_BYTE *)v5 + 276) == 1)
    {
      v18 = *((_DWORD *)v5 + 68);
      if (v18 <= 0xFF)
        goto LABEL_26;
      LOBYTE(v18) = 0;
      if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        goto LABEL_26;
      bzero(__str, 0x410uLL);
      v19 = mach_continuous_time();
      v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx toa,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "PSP", 69, "lpp_transaction_provide_gps_almanac_assistance", 772, *((_DWORD *)v5 + 68));
      LbsOsaTrace_WriteLog(0x13u, __str, v20, 0, 1);
    }
    LOBYTE(v18) = 0;
LABEL_26:
    v7[1] = *((_BYTE *)v5 + 285);
    v7[2] = 0;
    *((_QWORD *)v7 + 1) = 0;
    v21 = *((unsigned int *)v5 + 76);
    if ((v21 - 1) > 0x3F)
    {
      ms_report_exception(2, 16399, 3118, "lpp_transaction_provide_gps_almanac_assistance");
      goto LABEL_53;
    }
    v22 = 0;
    v23 = *((unsigned int *)v5 + 76);
    v24 = v5 + 36;
    do
    {
      v24 = (uint64_t *)*v24;
      if (*((_DWORD *)v24 + 2) == 1)
        ++v22;
      --v23;
    }
    while (v23);
    if (!v22)
      goto LABEL_52;
    if ((int)v21 < 0)
      v25 = -1;
    else
      v25 = 32 * v21;
    v26 = (char *)operator new[](v25, v4);
    if (v26)
    {
      v27 = v26;
      v28 = v26;
      do
      {
        *v28 = -1;
        *((_WORD *)v28 + 1) = -1;
        v28[4] = -1;
        *(_DWORD *)(v28 + 6) = 2147450879;
        v28[10] = -1;
        *(_OWORD *)(v28 + 12) = xmmword_21E7F9430;
        *((_DWORD *)v28 + 7) = 2147450879;
        v28 += 32;
      }
      while (v28 != &v26[32 * v21]);
      v29 = 0;
      *((_QWORD *)v7 + 1) = v26;
      v30 = v5 + 36;
      do
      {
        v30 = (uint64_t *)*v30;
        if (*(_DWORD *)(v5[36] + 8) == 1)
        {
          *v27 = *((_DWORD *)v30 + 4);
          *((_WORD *)v27 + 1) = *((_DWORD *)v30 + 5);
          v27[4] = v18;
          *((_WORD *)v27 + 3) = *((_DWORD *)v30 + 6);
          *((_WORD *)v27 + 4) = *((_DWORD *)v30 + 7);
          v27[10] = *((_DWORD *)v30 + 8);
          *(_OWORD *)(v27 + 12) = *(_OWORD *)((char *)v30 + 36);
          *((_WORD *)v27 + 14) = *((_DWORD *)v30 + 13);
          *((_WORD *)v27 + 15) = *((_DWORD *)v30 + 14);
          ++v7[2];
          v27 += 32;
        }
        else
        {
          ms_report_exception(2, 16398, 3101, "lpp_transaction_provide_gps_almanac_assistance");
          LODWORD(v21) = *((_DWORD *)v5 + 76);
        }
        ++v29;
      }
      while (v29 < (int)v21);
      if (v7[2])
      {
        *(_OWORD *)__str = *(_OWORD *)v7;
        v148 = *((_QWORD *)v7 + 2);
        v141 = (v137 << 32) | 2;
        v142 = v138;
        lpm_map_transaction_id((const _LPP_TRANSACTION *)a2, &__s);
        gps_set_almanac_aid((uint64_t)__str, 0, (uint64_t)&v141);
        v4 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
      }
      else
      {
        v33 = *((_QWORD *)v7 + 1);
        v4 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
        if (v33)
          MEMORY[0x2207AFDCC](v33, 0x1000C800FACD818);
LABEL_52:
        *((_QWORD *)v7 + 1) = 0;
      }
LABEL_53:
      MEMORY[0x2207AFDF0](v7, 0x1020C40D0709D06);
      goto LABEL_13;
    }
    *((_QWORD *)v7 + 1) = 0;
    if ((LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0) & 1) != 0)
    {
      bzero(__str, 0x410uLL);
      v31 = mach_continuous_time();
      v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Almanac list allocation failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "PSP", 69, "lpp_transaction_provide_gps_almanac_assistance", 1537);
      LbsOsaTrace_WriteLog(0x13u, __str, v32, 0, 1);
    }
    MEMORY[0x2207AFDF0](v7, 0x1020C40D0709D06);
    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
      goto LABEL_18;
LABEL_13:
    ++v3;
    v12 = *((int *)a1 + 4);
  }
  while (v3 < v12);
  if ((_DWORD)v12)
  {
    v34 = 0;
    v35 = a1;
    do
    {
      v35 = (uint64_t *)*v35;
      if (*((_BYTE *)v35 + 128) == 1 && !*((_DWORD *)v35 + 2) && *((_BYTE *)GetStaticLppPrivate() + 2) == 1)
      {
        if (*((int *)v35 + 30) < 1)
        {
          ms_report_exception(2, 16401, 3455, "lpp_transaction_provide_gps_navigation_assistance");
        }
        else
        {
          LOBYTE(__s) = 0;
          *((_QWORD *)&__s + 1) = 0;
          LOBYTE(v146) = -1;
          memset_s(&__s, 0x18uLL, 0, 0x18uLL);
          LOBYTE(__s) = 0;
          v36 = *((_DWORD *)v35 + 30);
          if (v36 >= 16)
            LOBYTE(v36) = 16;
          v37 = v36;
          v38 = (char *)operator new[](100 * v36, MEMORY[0x24BEDB6B8]);
          if (v38)
          {
            if ((_DWORD)v37)
            {
              v39 = v38;
              v40 = v35 + 13;
              v41 = v38;
              do
              {
                *(_WORD *)v41 = 255;
                *((_WORD *)v41 + 4) = -1;
                v41[10] = -1;
                *(_DWORD *)(v41 + 2) = -1;
                v41[6] = -1;
                *(_QWORD *)(v41 + 12) = -1;
                *(_QWORD *)(v41 + 20) = -1;
                *(_QWORD *)(v41 + 28) = 0x7FFF7FFFFFFF7FFFLL;
                *(_QWORD *)(v41 + 36) = 0x7FFF7FFF7FFFFFFFLL;
                *((_DWORD *)v41 + 11) = 0x7FFFFFFF;
                *((_WORD *)v41 + 24) = 0x7FFF;
                *((_DWORD *)v41 + 13) = -1;
                *((_WORD *)v41 + 28) = 0x7FFF;
                *(_QWORD *)(v41 + 60) = -1;
                *((_WORD *)v41 + 34) = 0x7FFF;
                *((_DWORD *)v41 + 18) = 0x7FFFFFFF;
                *((_WORD *)v41 + 38) = 0x7FFF;
                *((_DWORD *)v41 + 20) = 0x7FFFFFFF;
                *((_WORD *)v41 + 42) = 0x7FFF;
                *((_QWORD *)v41 + 11) = 0x8000000080000000;
                *((_WORD *)v41 + 48) = 0x7FFF;
                v41 += 100;
              }
              while (v41 != &v38[100 * v37]);
              v42 = 0;
              *((_QWORD *)&__s + 1) = v38;
              do
              {
                v40 = (uint64_t *)*v40;
                v43 = *((_DWORD *)v40 + 2);
                if (v43 > 0xFF)
                {
                  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    v44 = mach_continuous_time();
                    v45 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SatID,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v44), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 2));
                    LbsOsaTrace_WriteLog(0x13u, __str, v45, 0, 1);
                  }
                }
                else
                {
                  *v39 = v43;
                }
                *((_WORD *)v39 + 1) = 0;
                v39[1] = 0;
                if (*((_BYTE *)v40 + 20))
                {
                  v46 = 0;
                  v47 = 0;
                  v39[6] = 0;
                  v48 = 7;
                  do
                  {
                    v46 |= *(unsigned __int8 *)(v40[3] + v47) << v48;
                    v39[6] = v46;
                    ++v47;
                    --v48;
                  }
                  while (v47 != 8);
                }
                else
                {
                  LOBYTE(v46) = v39[6];
                }
                v39[6] = v46 >> 2;
                if (*((_BYTE *)v40 + 36))
                {
                  v49 = 0;
                  *((_WORD *)v39 + 4) = 0;
                  v50 = (unsigned __int8 *)v40[5];
                  v51 = 11;
                  do
                  {
                    v52 = *v50++;
                    v49 |= v52 << --v51;
                    *((_WORD *)v39 + 4) = v49;
                  }
                  while (v51);
                }
                if (*((_DWORD *)v40 + 12) == 1 && *((_DWORD *)v40 + 36) == 1)
                {
                  v53 = *((_DWORD *)v40 + 14);
                  if (HIWORD(v53))
                  {
                    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                    {
                      bzero(__str, 0x410uLL);
                      v54 = mach_continuous_time();
                      v55 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navToc,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v54), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 14));
                      LbsOsaTrace_WriteLog(0x13u, __str, v55, 0, 1);
                    }
                  }
                  else
                  {
                    *((_WORD *)v39 + 15) = v53;
                  }
                  v56 = *((_DWORD *)v40 + 15);
                  if (v56 == (__int16)v56)
                  {
                    *((_WORD *)v39 + 16) = v56;
                  }
                  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    v57 = mach_continuous_time();
                    v58 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navaf2,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v57), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 15));
                    LbsOsaTrace_WriteLog(0x13u, __str, v58, 0, 1);
                  }
                  v59 = *((_DWORD *)v40 + 16);
                  if (v59 == (__int16)v59)
                  {
                    *((_WORD *)v39 + 17) = v59;
                  }
                  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    v60 = mach_continuous_time();
                    v61 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navaf1,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v60), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 16));
                    LbsOsaTrace_WriteLog(0x13u, __str, v61, 0, 1);
                  }
                  *((_DWORD *)v39 + 9) = *((_DWORD *)v40 + 17);
                  v62 = *((_DWORD *)v40 + 18);
                  if (v62 == (__int16)v62)
                  {
                    *((_WORD *)v39 + 14) = v62;
                  }
                  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    v63 = mach_continuous_time();
                    v64 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navTgd,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v63), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 18));
                    LbsOsaTrace_WriteLog(0x13u, __str, v64, 0, 1);
                  }
                  v65 = *((_DWORD *)v40 + 38);
                  if (v65 > 0xFF)
                  {
                    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                    {
                      bzero(__str, 0x410uLL);
                      v66 = mach_continuous_time();
                      v67 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navURA,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v66), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 38));
                      LbsOsaTrace_WriteLog(0x13u, __str, v67, 0, 1);
                    }
                  }
                  else
                  {
                    v39[5] = v65;
                  }
                  v68 = *((_DWORD *)v40 + 39);
                  if (v68 > 0xFF)
                  {
                    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                    {
                      bzero(__str, 0x410uLL);
                      v69 = mach_continuous_time();
                      v70 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navFitFlag,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v69), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 39));
                      LbsOsaTrace_WriteLog(0x13u, __str, v70, 0, 1);
                    }
                  }
                  else
                  {
                    v39[66] = v68;
                  }
                  v71 = *((_DWORD *)v40 + 40);
                  if (HIWORD(v71))
                  {
                    if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                    {
                      bzero(__str, 0x410uLL);
                      v72 = mach_continuous_time();
                      v73 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navToe,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v72), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 40));
                      LbsOsaTrace_WriteLog(0x13u, __str, v73, 0, 1);
                    }
                  }
                  else
                  {
                    *((_WORD *)v39 + 32) = v71;
                  }
                  *((_DWORD *)v39 + 22) = *((_DWORD *)v40 + 41);
                  v74 = *((_DWORD *)v40 + 42);
                  if (v74 == (__int16)v74)
                  {
                    *((_WORD *)v39 + 21) = v74;
                  }
                  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    v75 = mach_continuous_time();
                    v76 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navDeltaN,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v75), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 42));
                    LbsOsaTrace_WriteLog(0x13u, __str, v76, 0, 1);
                  }
                  *((_DWORD *)v39 + 11) = *((_DWORD *)v40 + 43);
                  *((_DWORD *)v39 + 23) = *((_DWORD *)v40 + 44);
                  *((_DWORD *)v39 + 13) = *((_DWORD *)v40 + 45);
                  v77 = *((_DWORD *)v40 + 46);
                  if (v77 == (__int16)v77)
                  {
                    *((_WORD *)v39 + 48) = v77;
                  }
                  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    v78 = mach_continuous_time();
                    v79 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navIDot,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v78), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 46));
                    LbsOsaTrace_WriteLog(0x13u, __str, v79, 0, 1);
                  }
                  *((_DWORD *)v39 + 15) = *((_DWORD *)v40 + 47);
                  *((_DWORD *)v39 + 20) = *((_DWORD *)v40 + 48);
                  *((_DWORD *)v39 + 18) = *((_DWORD *)v40 + 49);
                  v80 = *((_DWORD *)v40 + 50);
                  if (v80 == (__int16)v80)
                  {
                    *((_WORD *)v39 + 20) = v80;
                  }
                  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    v81 = mach_continuous_time();
                    v82 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navCrs,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v81), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 50));
                    LbsOsaTrace_WriteLog(0x13u, __str, v82, 0, 1);
                  }
                  v83 = *((_DWORD *)v40 + 51);
                  if (v83 == (__int16)v83)
                  {
                    *((_WORD *)v39 + 38) = v83;
                  }
                  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    v84 = mach_continuous_time();
                    v85 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navCis,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v84), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 51));
                    LbsOsaTrace_WriteLog(0x13u, __str, v85, 0, 1);
                  }
                  v86 = *((_DWORD *)v40 + 52);
                  if (v86 == (__int16)v86)
                  {
                    *((_WORD *)v39 + 28) = v86;
                  }
                  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    v87 = mach_continuous_time();
                    v88 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navCus,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v87), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 52));
                    LbsOsaTrace_WriteLog(0x13u, __str, v88, 0, 1);
                  }
                  v89 = *((_DWORD *)v40 + 53);
                  if (v89 == (__int16)v89)
                  {
                    *((_WORD *)v39 + 42) = v89;
                  }
                  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    v90 = mach_continuous_time();
                    v91 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navCrc,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v90), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 53));
                    LbsOsaTrace_WriteLog(0x13u, __str, v91, 0, 1);
                  }
                  v92 = *((_DWORD *)v40 + 54);
                  if (v92 == (__int16)v92)
                  {
                    *((_WORD *)v39 + 34) = v92;
                  }
                  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    v93 = mach_continuous_time();
                    v94 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navCic,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v93), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 54));
                    LbsOsaTrace_WriteLog(0x13u, __str, v94, 0, 1);
                  }
                  v95 = *((_DWORD *)v40 + 55);
                  if (v95 == (__int16)v95)
                  {
                    *((_WORD *)v39 + 24) = v95;
                  }
                  else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    v96 = mach_continuous_time();
                    v97 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx navCuc,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v96), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 55));
                    LbsOsaTrace_WriteLog(0x13u, __str, v97, 0, 1);
                  }
                  if (*((_BYTE *)v40 + 252) == 1)
                  {
                    v98 = *((_DWORD *)v40 + 56);
                    if (v98 > 0xFF)
                    {
                      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                      {
                        bzero(__str, 0x410uLL);
                        v99 = mach_continuous_time();
                        v100 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ephemCodeOnL2,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v99), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 56));
                        LbsOsaTrace_WriteLog(0x13u, __str, v100, 0, 1);
                      }
                    }
                    else
                    {
                      v39[4] = v98;
                    }
                    v101 = *((_DWORD *)v40 + 57);
                    if (v101 > 0xFF)
                    {
                      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                      {
                        bzero(__str, 0x410uLL);
                        v102 = mach_continuous_time();
                        v103 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ephemL2Pflag,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v102), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 57));
                        LbsOsaTrace_WriteLog(0x13u, __str, v103, 0, 1);
                      }
                    }
                    else
                    {
                      v39[10] = v101;
                    }
                    v104 = *((_DWORD *)v40 + 62);
                    if (v104 > 0xFF)
                    {
                      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
                      {
                        bzero(__str, 0x410uLL);
                        v105 = mach_continuous_time();
                        v106 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ephemAODA,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v105), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 772, *((_DWORD *)v40 + 62));
                        LbsOsaTrace_WriteLog(0x13u, __str, v106, 0, 1);
                      }
                    }
                    else
                    {
                      v39[67] = v104;
                    }
                    *(_OWORD *)(v39 + 12) = *(_OWORD *)(v40 + 29);
                  }
                  else
                  {
                    v39[4] = 0;
                    v39[10] = 0;
                    v39[67] = 0;
                    *(_QWORD *)(v39 + 20) = 0;
                    *(_QWORD *)(v39 + 12) = 0;
                  }
                  LOBYTE(__s) = __s + 1;
                  v39 += 100;
                }
                else
                {
                  ms_report_exception(2, 16400, 3441, "lpp_transaction_provide_gps_navigation_assistance");
                }
                ++v42;
              }
              while (v42 != v37);
              if ((_BYTE)__s)
              {
                LOBYTE(v146) = v137;
                *(_OWORD *)__str = __s;
                v148 = v146;
                v143 = (v137 << 32) | 2;
                v144 = v138;
                lpm_map_transaction_id((const _LPP_TRANSACTION *)a2, &v141);
                gps_set_based_aid((unsigned __int8 *)__str, 0, (uint64_t)&v143);
              }
            }
          }
          else
          {
            *((_QWORD *)&__s + 1) = 0;
            if ((LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0) & 1) != 0)
            {
              bzero(__str, 0x410uLL);
              v107 = mach_continuous_time();
              v108 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NAvData allocation failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v107), "PSP", 69, "lpp_transaction_provide_gps_navigation_assistance", 1537);
              LbsOsaTrace_WriteLog(0x13u, __str, v108, 0, 1);
            }
            if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v109 = mach_continuous_time();
              v110 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v109), "PSP", 68, "lpp_transaction_provide_gps_navigation_assistance");
              LbsOsaTrace_WriteLog(0x13u, __str, v110, 5, 1);
            }
          }
        }
      }
      ++v34;
    }
    while (v34 < *((int *)a1 + 4));
  }
  *(_QWORD *)&__s = 0x8000000080000000;
  DWORD2(__s) = 0x800000;
  WORD6(__s) = 32639;
  memset_s(&__s, 0x10uLL, 0, 0x10uLL);
  if (*((_DWORD *)a1 + 4))
  {
    v111 = 0;
    v112 = 0;
    v113 = a1;
    while (1)
    {
      v113 = (uint64_t *)*v113;
      if (*((_BYTE *)v113 + 400) == 1)
      {
        if (*((_DWORD *)v113 + 2) || *((_BYTE *)GetStaticLppPrivate() + 2) != 1)
        {
          v114 = 3684;
LABEL_176:
          ms_report_exception(2, 16404, v114, "lpp_transaction_provide_utc_model_assistance");
          goto LABEL_177;
        }
        if (*((_DWORD *)v113 + 84) | v111)
        {
          v114 = 3679;
          goto LABEL_176;
        }
        *(_QWORD *)&__s = v113[43];
        if (*((_DWORD *)v113 + 88) > 0xFFu)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            v115 = mach_continuous_time();
            v116 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx gnss_Utc_Tot,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v115), "PSP", 69, "lpp_transaction_provide_utc_model_assistance", 772, *((_DWORD *)v113 + 88));
            LbsOsaTrace_WriteLog(0x13u, __str, v116, 0, 1);
          }
        }
        else
        {
          BYTE8(__s) = *((_DWORD *)v113 + 88);
        }
        if (*((_DWORD *)v113 + 89) > 0xFFu)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            v117 = mach_continuous_time();
            v118 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx gnss_Utc_WNt,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v117), "PSP", 69, "lpp_transaction_provide_utc_model_assistance", 772, *((_DWORD *)v113 + 89));
            LbsOsaTrace_WriteLog(0x13u, __str, v118, 0, 1);
          }
        }
        else
        {
          BYTE9(__s) = *((_DWORD *)v113 + 89);
        }
        if (*((_DWORD *)v113 + 90) > 0xFFu)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            v119 = mach_continuous_time();
            v120 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx gnss_Utc_DeltaTls,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v119), "PSP", 69, "lpp_transaction_provide_utc_model_assistance", 772, *((_DWORD *)v113 + 90));
            LbsOsaTrace_WriteLog(0x13u, __str, v120, 0, 1);
          }
        }
        else
        {
          BYTE10(__s) = *((_DWORD *)v113 + 90);
        }
        if (*((_DWORD *)v113 + 91) > 0xFFu)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            v121 = mach_continuous_time();
            v122 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx gnss_Utc_WNlsf,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v121), "PSP", 69, "lpp_transaction_provide_utc_model_assistance", 772, *((_DWORD *)v113 + 91));
            LbsOsaTrace_WriteLog(0x13u, __str, v122, 0, 1);
          }
        }
        else
        {
          BYTE11(__s) = *((_DWORD *)v113 + 91);
        }
        if (*((_DWORD *)v113 + 92) == (char)*((_DWORD *)v113 + 92))
        {
          BYTE12(__s) = *((_DWORD *)v113 + 92);
        }
        else if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v123 = mach_continuous_time();
          v124 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx gnss_Utc_DN,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v123), "PSP", 69, "lpp_transaction_provide_utc_model_assistance", 772, *((_DWORD *)v113 + 92));
          LbsOsaTrace_WriteLog(0x13u, __str, v124, 0, 1);
        }
        if (*((_DWORD *)v113 + 93) == (char)*((_DWORD *)v113 + 93))
        {
          BYTE13(__s) = *((_DWORD *)v113 + 93);
LABEL_202:
          v111 = 1;
          goto LABEL_177;
        }
        if (!LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
          goto LABEL_202;
        bzero(__str, 0x410uLL);
        v125 = mach_continuous_time();
        v126 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx gnss_Utc_DeltaTlsf,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v125), "PSP", 69, "lpp_transaction_provide_utc_model_assistance", 772, *((_DWORD *)v113 + 93));
        v111 = 1;
        LbsOsaTrace_WriteLog(0x13u, __str, v126, 0, 1);
      }
LABEL_177:
      if (++v112 >= (unint64_t)*((int *)a1 + 4))
      {
        if (v111)
          send_to_lpi_gps_utc_model_req(__s, *((uint64_t *)&__s + 1), v139, v138, (_LPP_TRANSACTION *)a2);
        break;
      }
    }
  }
  LOBYTE(__s) = 0;
  *((_QWORD *)&__s + 1) = 0;
  memset_s(&__s, 0x10uLL, 0, 0x10uLL);
  if (*((_DWORD *)a1 + 4))
  {
    v127 = 0;
    v128 = 0;
    v129 = 0;
    v130 = a1;
    do
    {
      v130 = (uint64_t *)*v130;
      if (*((_BYTE *)v130 + 160) == 1)
      {
        if (!*((_DWORD *)v130 + 2)
          && (*((_BYTE *)GetStaticLppPrivate() + 2) == 1 ? (v131 = v128 == 0) : (v131 = 0), v131))
        {
          if (*((int *)v130 + 38) > 255)
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v132 = mach_continuous_time();
              v133 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Length,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v132), "PSP", 69, "lpp_transaction_provide_realtime_integrity_assistance", 772, *((_DWORD *)v130 + 38));
              LbsOsaTrace_WriteLog(0x13u, __str, v133, 0, 1);
            }
          }
          else
          {
            LOBYTE(__s) = *((_DWORD *)v130 + 38);
          }
          v134 = gnssOsa_Calloc("posp_alloc", 18, 1, __s);
          v127 = (uint64_t)v134;
          if ((_BYTE)__s)
          {
            v135 = 0;
            v136 = v130 + 17;
            do
            {
              v136 = (uint64_t *)*v136;
              v134[v135++] = *((_DWORD *)v136 + 2);
            }
            while (v135 < __s);
          }
          v128 = 1;
        }
        else
        {
          ms_report_exception(2, 16402, 3553, "lpp_transaction_provide_realtime_integrity_assistance");
        }
      }
      ++v129;
    }
    while (v129 < *((int *)a1 + 4));
  }
  else
  {
    v127 = 0;
  }
  if ((_BYTE)__s)
  {
    *((_QWORD *)&__s + 1) = v127;
    send_to_lpi_gps_real_time_integrity_req(__s, v127, v139, v138, (_LPP_TRANSACTION *)a2);
  }
}

uint64_t lpp_transaction_process_provide_assistance_data_a_gnss_error(_DWORD *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;
  _BYTE v8[20];
  uint64_t v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned __int8 *)(a2 + 28);
  v4 = *(_DWORD *)(a2 + 32);
  if (*a1)
  {
    v5 = 1;
  }
  else
  {
    v6 = a1[1];
    if ((v6 - 1) >= 3)
    {
      v5 = 1;
      ms_report_exception(1, 16436, 5886, "lpp_transaction_map_location_server_error_cause");
    }
    else
    {
      v5 = v6 + 1;
    }
  }
  v9 = (v3 << 32) | 2;
  v10 = v4;
  lpm_map_transaction_id((const _LPP_TRANSACTION *)a2, v8);
  return gps_set_gnss_assist_data_error_req(v5, (uint64_t)&v9);
}

uint64_t lpp_transaction_handle_request_location_error(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, int a5, int a6, unsigned int *a7, uint64_t a8, uint64_t a9, int a10)
{
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  char __str[1040];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (*a3 == 1 || a3[1] == 1)
  {
    if (a6 == 1)
      send_to_lpi_pos_loc_info_req(a7, a9, a10, (_LPP_TRANSACTION *)a1);
    return 0;
  }
  else
  {
    v15 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x578uLL);
    *(_QWORD *)(a2 + 16) = v15;
    v15[8] = 1;
    *(_QWORD *)v15 = *(_QWORD *)(a1 + 16);
    v15[1392] = 1;
    *((_DWORD *)v15 + 10) = 0;
    *((_DWORD *)v15 + 12) = 5;
    v16 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(v16 + 9) = 1;
    *(_BYTE *)(v16 + 32) = 1;
    *(_BYTE *)(v16 + 28) = 0;
    *(_BYTE *)(v16 + 20) = 1;
    *(_DWORD *)(v16 + 56) = 0;
    *(_DWORD *)(v16 + 64) = 0;
    *(_BYTE *)(v16 + 216) = 1;
    *(_BYTE *)(v16 + 160) = 1;
    *(_DWORD *)(v16 + 156) = a5;
    if (a5 != 1)
      SendStatusReport(*(_DWORD *)(a4 + 20), 31, 0, 0, 0, 255);
    if (*(_BYTE *)(a1 + 25) == 1 && LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v17 = mach_continuous_time();
      v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Transaction Data,Type,%hhu,SessionId,%u,CurState,%u,NextState,Terminated\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "PSP", 68, "lpp_transaction_handle_request_location_error", *(unsigned __int8 *)(a1 + 24), *(_DWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 25));
      LbsOsaTrace_WriteLog(0x13u, __str, v18, 5, 1);
    }
    *(_BYTE *)(a1 + 25) = 2;
    lpp_transaction_location_information_cleanup((_LPP_TRANSACTION *)a1);
    return 1;
  }
}

void lpp_transaction_location_information_cleanup(_LPP_TRANSACTION *a1)
{
  unsigned int v2;
  int v3;
  int v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  void *v12;

  if (a1)
  {
    v2 = *((unsigned __int8 *)a1 + 24);
    if (v2 <= 6)
    {
      if (v2 != 4)
      {
        v3 = 16409;
        v4 = 2069;
LABEL_5:
        ms_report_exception(2, v3, v4, "lpp_transaction_location_information_cleanup");
        return;
      }
      if (*((_BYTE *)a1 + 25) != 2)
      {
        v3 = 16414;
        v4 = 2055;
        goto LABEL_5;
      }
      v5 = *((_QWORD *)a1 + 12);
      if (v5)
        MEMORY[0x2207AFDF0](v5, 0x1000C40605036ACLL);
      *((_QWORD *)a1 + 12) = 0;
      v6 = (void *)*((_QWORD *)a1 + 8);
      if (v6)
      {
        free(v6);
        *((_QWORD *)a1 + 8) = 0;
      }
      v7 = (_QWORD *)*((_QWORD *)a1 + 9);
      if (v7)
      {
        GenericFreeSort(v7, (uint64_t)&ySDL_T_LASN_A_GNSS_ProvideLocationInformation);
        v8 = (void *)*((_QWORD *)a1 + 9);
        if (v8)
          free(v8);
        *((_QWORD *)a1 + 9) = 0;
      }
      v9 = (_QWORD *)*((_QWORD *)a1 + 11);
      if (v9)
      {
        GenericFreeSort(v9, (uint64_t)&ySDL_T_LASN_A_GNSS_ProvideLocationInformation);
        v10 = (void *)*((_QWORD *)a1 + 11);
        if (v10)
          free(v10);
        *((_QWORD *)a1 + 11) = 0;
      }
      v11 = (_QWORD *)*((_QWORD *)a1 + 10);
      if (v11)
      {
        GenericFreeSort(v11, (uint64_t)&ySDL_T_LASN_WLAN_ProvideLocationInformation_r13);
        v12 = (void *)*((_QWORD *)a1 + 10);
        if (v12)
          free(v12);
        *((_QWORD *)a1 + 10) = 0;
      }
      *((_BYTE *)a1 + 40) = 0;
    }
  }
}

uint64_t lpp_transaction_process_request_location_information(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  _BYTE *v25;
  int v26;
  int v27;
  _BOOL4 v28;
  char *v29;
  uint64_t v30;
  unsigned __int16 v31;
  uint64_t v32;
  unsigned __int16 v33;
  int IsLoggingAllowed;
  uint64_t v35;
  unsigned __int16 v36;
  uint64_t v37;
  int v38;
  unsigned int __src;
  char v40;
  int v41;
  __int16 v42;
  char v43;
  int v44;
  char v45;
  uint64_t v46;
  int v47;
  _QWORD v48[2];
  int v49;
  char v50;
  char __str[1040];
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 24) != 4)
  {
    v13 = 16409;
    v14 = 1471;
LABEL_17:
    ms_report_exception(2, v13, v14, "lpp_transaction_process_request_location_information");
    return 0;
  }
  if (*(_DWORD *)a2 != 4)
  {
    v13 = 16390;
    v14 = 1479;
    goto LABEL_17;
  }
  *(_BYTE *)(a1 + 112) = 0;
  v6 = lpp_session_detect((unsigned __int8 *)(a1 + 28));
  if (!v6)
  {
    v13 = 16388;
    v14 = 1491;
    goto LABEL_17;
  }
  v8 = v6;
  __src = 0x7FFF;
  v9 = (_BYTE *)(a1 + 48);
  v40 = -1;
  v41 = 255;
  v42 = -256;
  v43 = 0;
  v44 = 255;
  v45 = -1;
  v46 = 0x200000003;
  v10 = -1;
  v47 = -1;
  v49 = 0;
  v48[0] = 0;
  *(_QWORD *)((char *)v48 + 6) = 0;
  v50 = -1;
  if (*(_DWORD *)a2 != 4)
  {
    v11 = 0;
    v12 = 0;
    goto LABEL_21;
  }
  if (*(_DWORD *)(a2 + 8) || *(_DWORD *)(a2 + 16) || *(_BYTE *)(a2 + 128) != 1)
  {
LABEL_13:
    v11 = 0;
    v12 = 0;
    v10 = -1;
LABEL_21:
    v16 = 0xFF000000FFLL;
LABEL_22:
    v37 = v16;
    v38 = v10;
    v17 = a1;
    v18 = a3;
    v19 = (_BYTE *)(a1 + 48);
    v20 = (uint64_t)v8;
    v21 = v12;
    return lpp_transaction_handle_request_location_error(v17, v18, v19, v20, v21, v11, &__src, v7, v37, v38);
  }
  if (*(_BYTE *)(a2 + 160) == 1)
  {
    *v9 = 1;
    if (!*((_BYTE *)GetStaticLppPrivate() + 2))
      *v9 = 2;
  }
  else if (!*(_BYTE *)(a2 + 160) && !*(_BYTE *)(a2 + 162) && !*(_BYTE *)(a2 + 184) && !*(_BYTE *)(a2 + 240))
  {
    goto LABEL_13;
  }
  if (*(_BYTE *)(a2 + 240) == 1)
  {
    *(_BYTE *)(a1 + 49) = 1;
    if (!*((_BYTE *)GetStaticLppPrivate() + 4))
      *(_BYTE *)(a1 + 49) = 2;
  }
  if (*v9 != 1 && *(_BYTE *)(a1 + 49) != 1)
  {
    SendStatusReport(*((_DWORD *)v8 + 5), 22, 0, 0, 0, 255);
    v37 = 0xFF000000FFLL;
    v38 = -1;
    v17 = a1;
    v18 = a3;
    v19 = (_BYTE *)(a1 + 48);
    v20 = (uint64_t)v8;
    v21 = 1;
LABEL_55:
    v11 = 0;
    return lpp_transaction_handle_request_location_error(v17, v18, v19, v20, v21, v11, &__src, v7, v37, v38);
  }
  v22 = lpp_transaction_process_request_location_information_a_pos(a2 + 24, a1 + 48, (uint64_t)&__src, *((_DWORD *)v8 + 5));
  v21 = v22;
  v23 = *v9;
  if (v23 != 1)
  {
    v12 = 0;
    v25 = (_BYTE *)(a1 + 49);
    if (*(_BYTE *)(a1 + 49) == 1)
      goto LABEL_41;
LABEL_50:
    if (!v22)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v30 = mach_continuous_time();
        v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Req Loc Info location failure cause,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "PSP", 73, "lpp_transaction_process_request_location_information", v12);
        LbsOsaTrace_WriteLog(0x13u, __str, v31, 4, 1);
      }
      v21 = v12;
    }
    v37 = 0xFF000000FFLL;
    v38 = -1;
    v17 = a1;
    v18 = a3;
    v19 = (_BYTE *)(a1 + 48);
    v20 = (uint64_t)v8;
    goto LABEL_55;
  }
  v24 = *((_DWORD *)v8 + 18);
  if (v24 != 256 && v24 != *(_DWORD *)(a1 + 20))
  {
    v25 = (_BYTE *)(a1 + 49);
    v26 = *(unsigned __int8 *)(a1 + 49);
    v12 = 2;
    *(_BYTE *)(a1 + 48) = 2;
    if (v26 == 1)
    {
      v23 = 2;
      goto LABEL_41;
    }
    goto LABEL_50;
  }
  v12 = 0;
  v25 = (_BYTE *)(a1 + 49);
  if (*(_BYTE *)(a1 + 49) != 1)
  {
LABEL_47:
    if (*(_DWORD *)(a1 + 56) != 2)
    {
      v28 = 1;
      goto LABEL_57;
    }
    goto LABEL_48;
  }
LABEL_41:
  v27 = *((_DWORD *)v8 + 20);
  if (v27 != 256 && v27 != *(_DWORD *)(a1 + 20))
  {
    v12 = 2;
    *v25 = 2;
    if (v23 == 1)
      goto LABEL_47;
    goto LABEL_50;
  }
  if (v23 == 1)
    goto LABEL_47;
  if (*(_DWORD *)(a1 + 56) != 2)
  {
    v28 = 0;
LABEL_57:
    v10 = *((_DWORD *)v8 + 5);
    v16 = ((unint64_t)*((unsigned __int8 *)v8 + 16) << 32) | 2;
    __src *= 1000;
    if (v28)
      *(uint64_t *)((char *)v8 + 68) = *(_QWORD *)(a1 + 16);
    if (*v25 == 1)
      *(uint64_t *)((char *)v8 + 76) = *(_QWORD *)(a1 + 16);
    v11 = 1;
    goto LABEL_22;
  }
LABEL_48:
  *(_BYTE *)(a1 + 104) = 1;
  v29 = (char *)operator new(0x3CuLL, MEMORY[0x24BEDB6B8]);
  if (v29)
  {
    *(_DWORD *)v29 = 0x7FFF;
    v29[4] = -1;
    *((_DWORD *)v29 + 2) = 255;
    *((_WORD *)v29 + 6) = -256;
    v29[14] = 0;
    *((_DWORD *)v29 + 4) = 255;
    v29[20] = -1;
    *((_QWORD *)v29 + 3) = 0x200000003;
    *((_DWORD *)v29 + 8) = -1;
    *((_DWORD *)v29 + 13) = 0;
    *(_QWORD *)(v29 + 36) = 0;
    *(_QWORD *)(v29 + 42) = 0;
    v29[56] = -1;
    *(_QWORD *)(a1 + 96) = v29;
    memcpy_s("lpp_transaction_process_request_location_information", 1611, v29, 0x3Cu, &__src, 0x3CuLL);
    v40 = __src;
    __src = 0;
    v28 = *(unsigned __int8 *)(a1 + 48) == 1;
    goto LABEL_57;
  }
  *(_QWORD *)(a1 + 96) = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v32 = mach_continuous_time();
    v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Location request allocation failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "PSP", 69, "lpp_transaction_process_request_location_information", 1537);
    LbsOsaTrace_WriteLog(0x13u, __str, v33, 0, 1);
  }
  IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0);
  result = 0;
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    v35 = mach_continuous_time();
    v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "PSP", 68, "lpp_transaction_process_request_location_information");
    LbsOsaTrace_WriteLog(0x13u, __str, v36, 5, 1);
    return 0;
  }
  return result;
}

uint64_t lpp_transaction_process_request_location_information_a_pos(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  char v8;
  int v9;
  _DWORD *v10;
  int v11;
  _BYTE *v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t result;
  int v20;
  int v21;
  uint64_t v22;
  unsigned __int16 v23;
  unsigned int v24;
  uint64_t v25;
  unsigned __int16 v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int16 v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int16 v33;
  char v34;
  char v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char __str[1040];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  switch(*(_DWORD *)a1)
  {
    case 0:
    case 2:
      if (*(_BYTE *)(a1 + 136) != 1)
        goto LABEL_55;
      v8 = 1;
      *(_BYTE *)(a3 + 56) = 1;
      if (*(_BYTE *)(a1 + 216) == 1)
      {
        *(_BYTE *)(a1 + 216) = 0;
        *(_BYTE *)(a2 + 1) = 0;
      }
      v9 = 2;
      goto LABEL_12;
    case 1:
    case 3:
      *(_BYTE *)(a3 + 56) = 0;
      if (*(_BYTE *)(a1 + 136) == 1)
      {
        if (*(_BYTE *)(a1 + 216) == 1)
        {
          SendStatusReport(a4, 22, 0, 0, 0, 255);
LABEL_9:
          *(_WORD *)a2 = 514;
          return 1;
        }
        v8 = 0;
        v9 = 1;
LABEL_12:
        *(_DWORD *)(a3 + 40) = 0;
        v10 = (_DWORD *)(a3 + 40);
        *(_DWORD *)(a3 + 36) = v9;
        if (*(_DWORD *)(a1 + 112))
        {
          if (**(_BYTE **)(a1 + 120))
          {
            *(_BYTE *)(a2 + 3) = 1;
            if (*((_BYTE *)GetStaticLppPrivate() + 2) == 1
              && ((*((unsigned __int8 *)GetStaticLppPrivate() + 3) >> v8) & 1) != 0)
            {
              *(_BYTE *)(a2 + 5) = 1;
              *(_WORD *)(a3 + 44) |= 1u;
              *(_DWORD *)(a3 + 40) |= 1u;
            }
          }
        }
      }
      else
      {
        v8 = 0;
        v10 = (_DWORD *)(a3 + 40);
        *(_QWORD *)(a3 + 36) = 1;
      }
      if (*(_BYTE *)(a1 + 216))
      {
        *(_BYTE *)(a2 + 4) = 1;
        if (*((_BYTE *)GetStaticLppPrivate() + 4) == 1
          && ((*((unsigned __int8 *)GetStaticLppPrivate() + 5) >> v8) & 1) != 0)
        {
          *(_BYTE *)(a2 + 6) = 1;
          *v10 |= 2u;
        }
      }
      v11 = *(unsigned __int8 *)(a2 + 5);
      if (*(_BYTE *)(a2 + 5))
      {
        v12 = (_BYTE *)(a2 + 6);
        if (*(_BYTE *)(a2 + 6))
        {
          LOBYTE(v13) = *(_BYTE *)(a3 + 56);
          goto LABEL_31;
        }
      }
      else
      {
        if (*(_BYTE *)(a2 + 3) == 1)
          *(_BYTE *)a2 = 2;
        v12 = (_BYTE *)(a2 + 6);
        if (*(_BYTE *)(a2 + 6))
        {
          *(_BYTE *)(a2 + 2) = *(_BYTE *)(a3 + 56);
          goto LABEL_33;
        }
      }
      if (*(_BYTE *)(a2 + 4) == 1)
        *(_BYTE *)(a2 + 1) = 2;
      v13 = *(unsigned __int8 *)(a3 + 56);
      if (!v11)
      {
        *(_BYTE *)a2 = 2;
        if (v13 == 1)
        {
LABEL_55:
          v20 = a4;
          v21 = 23;
        }
        else
        {
          if (v13)
            return 1;
          v20 = a4;
          v21 = 22;
        }
        SendStatusReport(v20, v21, 0, 0, 0, 255);
        return 1;
      }
LABEL_31:
      *(_BYTE *)(a2 + 2) = v13;
      if (v11 == 1)
      {
        *(_BYTE *)(a3 + 49) = *(_BYTE *)(a1 + 131);
        *(_WORD *)(a3 + 46) = 0;
      }
LABEL_33:
      if (*(_BYTE *)(a1 + 80) == 1 && *(_BYTE *)(a1 + 76) == 1)
      {
        v14 = *(unsigned __int8 *)(a1 + 28);
        *(_DWORD *)a3 = 0;
        *(_BYTE *)(a3 + 34) = 0;
        if (v14 != 1)
        {
          *(_DWORD *)(a2 + 8) = 0;
          v15 = *(_DWORD *)(a1 + 64);
          if (v15 > 0xFF)
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v22 = mach_continuous_time();
              v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx time,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "PSP", 69, "lpp_transaction_process_request_location_information_a_pos", 772, *(_DWORD *)(a1 + 64));
              LbsOsaTrace_WriteLog(0x13u, __str, v23, 0, 1);
            }
          }
          else
          {
            *(_BYTE *)(a3 + 4) = v15;
          }
          if (*(_BYTE *)(a1 + 72) == 1 && (v24 = *(_DWORD *)(a1 + 68), *(_DWORD *)(a1 + 64) > (signed int)v24))
          {
            if (v24 > 0xFF)
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v25 = mach_continuous_time();
                v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx responseTimeEarlyFix_r12,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "PSP", 69, "lpp_transaction_process_request_location_information_a_pos", 772, *(_DWORD *)(a1 + 68));
                LbsOsaTrace_WriteLog(0x13u, __str, v26, 0, 1);
              }
            }
            else
            {
              *(_BYTE *)(a3 + 35) = v24;
            }
            *(_WORD *)(a2 + 64) = 1025;
          }
          else
          {
            *(_BYTE *)(a3 + 35) = -1;
            *(_BYTE *)(a2 + 64) = 0;
          }
LABEL_70:
          *(_DWORD *)(a3 + 28) = 0;
          if (*(_BYTE *)(a1 + 36) == 1)
            *(_DWORD *)(a3 + 28) = *(_DWORD *)(a1 + 32);
          if (*(_BYTE *)(a1 + 48) == 1)
          {
            *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 40);
            v27 = *(_DWORD *)(a1 + 44);
            if (v27 > 0xFF)
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v28 = mach_continuous_time();
                v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx confidence,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "PSP", 69, "lpp_transaction_process_request_location_information_a_pos", 772, *(_DWORD *)(a1 + 44));
                LbsOsaTrace_WriteLog(0x13u, __str, v29, 0, 1);
              }
            }
            else
            {
              *(_BYTE *)(a3 + 13) = v27;
            }
          }
          v30 = *(unsigned __int8 *)(a1 + 49);
          *(_BYTE *)(a3 + 14) = v30;
          if (v30 == 1 && *(_BYTE *)(a1 + 60) == 1)
          {
            *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 52);
            v31 = *(_DWORD *)(a1 + 56);
            if (v31 > 0xFF)
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v32 = mach_continuous_time();
                v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx confidence,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "PSP", 69, "lpp_transaction_process_request_location_information_a_pos", 772, *(_DWORD *)(a1 + 56));
                LbsOsaTrace_WriteLog(0x13u, __str, v33, 0, 1);
              }
            }
            else
            {
              *(_BYTE *)(a3 + 20) = v31;
            }
          }
          *(_BYTE *)(a3 + 12) = *(_BYTE *)(a1 + 77);
          *(_BYTE *)(a3 + 48) = 0;
          *(_DWORD *)(a3 + 24) = 2;
          if (*(_BYTE *)(a1 + 88) == 1)
            *(_DWORD *)(a3 + 24) = *(_DWORD *)(a1 + 84);
          *(_BYTE *)(a3 + 32) = -1;
          if (*(_BYTE *)(a1 + 96) == 1)
          {
            v34 = *(_BYTE *)(a1 + 89) == 1;
            *(_BYTE *)(a3 + 32) = v34;
            if (*(_BYTE *)(a1 + 90) == 1)
            {
              v34 |= 2u;
              *(_BYTE *)(a3 + 32) = v34;
            }
            if (*(_BYTE *)(a1 + 91) == 1)
            {
              v34 |= 4u;
              *(_BYTE *)(a3 + 32) = v34;
            }
            if (*(_BYTE *)(a1 + 92) == 1)
            {
              v34 |= 8u;
              *(_BYTE *)(a3 + 32) = v34;
            }
            if (*(_BYTE *)(a1 + 93) == 1)
            {
              v34 |= 0x10u;
              *(_BYTE *)(a3 + 32) = v34;
            }
            if (*(_BYTE *)(a1 + 94) == 1)
            {
              v34 |= 0x20u;
              *(_BYTE *)(a3 + 32) = v34;
            }
            if (*(_BYTE *)(a1 + 95) == 1)
              *(_BYTE *)(a3 + 32) = v34 | 0x40;
          }
          *(_BYTE *)(a3 + 33) = -1;
          if (*(_BYTE *)(a1 + 101) == 1)
          {
            v35 = *(_BYTE *)(a1 + 97) == 1;
            *(_BYTE *)(a3 + 33) = v35;
            if (*(_BYTE *)(a1 + 98) == 1)
            {
              v35 |= 2u;
              *(_BYTE *)(a3 + 33) = v35;
            }
            if (*(_BYTE *)(a1 + 99) == 1)
            {
              v35 |= 4u;
              *(_BYTE *)(a3 + 33) = v35;
            }
            if (*(_BYTE *)(a1 + 100) == 1)
              *(_BYTE *)(a3 + 33) = v35 | 8;
          }
          if (*v12 != 1)
            return 0;
          *(_DWORD *)(a3 + 52) = 0;
          v36 = *(unsigned int *)(a1 + 200);
          if (!(_DWORD)v36)
            return 0;
          v37 = 0;
          v38 = 0;
          v39 = *(_QWORD *)(a1 + 208);
          do
          {
            v37 |= (*(_BYTE *)(v39 + v38) & 1) << v38;
            *(_DWORD *)(a3 + 52) = v37;
            ++v38;
          }
          while (v36 != v38);
          if ((v37 & 2) == 0
            && ((v37 & 1) == 0 || ((*((unsigned __int8 *)GetStaticLppPrivate() + 6) >> *(_DWORD *)(a3 + 52)) & 1) != 0))
          {
            return 0;
          }
          *(_BYTE *)(a2 + 1) = 2;
          return 1;
        }
      }
      else
      {
        if (*(_BYTE *)(a1 + 28) != 1)
        {
          result = 0;
          *(_WORD *)a2 = 514;
          return result;
        }
        *(_DWORD *)a3 = 0;
        *(_BYTE *)(a3 + 34) = 0;
      }
      v16 = *(_DWORD *)(a1 + 24);
      if (v16)
      {
        v17 = *(_DWORD *)(a1 + 16);
        if (v17)
        {
          if (v16 >= 0xA)
          {
            ms_report_exception(1, 16436, 256, "lpp_convert_reporting_interval");
            *(_DWORD *)a3 = 0;
          }
          else
          {
            *(_DWORD *)a3 = dword_21E7F93D8[v16 - 1];
            *(_DWORD *)(a2 + 8) = 2;
            if (v17 == 7)
              LOBYTE(v18) = -1;
            else
              v18 = 1 << v17;
            if (*(_BYTE *)(a1 + 20) != 1)
              LOBYTE(v18) = -1;
            *(_BYTE *)(a2 + 57) = v18;
            *(_BYTE *)(a2 + 58) = 0;
            *(_BYTE *)(a3 + 34) = v18;
          }
          goto LABEL_70;
        }
      }
      result = 2;
      if (*(_BYTE *)a2 == 1)
        *(_BYTE *)a2 = 2;
      return result;
    default:
      goto LABEL_9;
  }
}

uint64_t lpp_transaction_process_provide_location_information(uint64_t a1, _BYTE *a2, unsigned __int8 *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  _BYTE *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v15;
  int v16;
  unsigned __int8 v17;
  _DWORD *v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned __int16 v30;
  _BYTE *v31;
  int v32;
  unint64_t v33;
  void **v34;
  uint64_t v35;
  char *v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD *v44;
  _OWORD *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _OWORD *v49;
  _OWORD *v50;
  _BYTE *v51;
  char __str[1040];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  if (*(_BYTE *)(a1 + 24) != 4)
  {
    v11 = 16409;
    v12 = 1759;
LABEL_13:
    ms_report_exception(2, v11, v12, "lpp_transaction_process_provide_location_information");
    return 0;
  }
  v6 = lpp_session_detect((unsigned __int8 *)(a1 + 28));
  if (!v6)
  {
    v11 = 16388;
    v12 = 1769;
    goto LABEL_13;
  }
  v7 = v6;
  v8 = (_BYTE *)(a1 + 48);
  if (*a2 != 1)
    goto LABEL_22;
  if (*v8 != 1 && *(_BYTE *)(a1 + 49) != 1)
  {
    v15 = 16413;
    v16 = 1831;
LABEL_17:
    ms_report_exception(2, v15, v16, "lpp_transaction_process_provide_location_information");
    goto LABEL_22;
  }
  v9 = a2[8];
  v10 = *(unsigned __int8 *)(a1 + 50);
  if (v9 != v10 && ((v10 - 1) | (v9 - 1)) > 1u)
  {
    v15 = 16412;
    v16 = 1825;
    goto LABEL_17;
  }
  if (*(_BYTE *)(a1 + 112) == 1)
  {
    if (a2[280] == 1)
    {
      *(_BYTE *)(a1 + 113) = 2;
    }
    else
    {
      *(_BYTE *)(a1 + 113) = 3;
      lpp_transaction_add_provide_location_information_a_pos(a1 + 48, (uint64_t)a2, 1);
    }
  }
  if (!*(_BYTE *)(a1 + 40))
    *(_BYTE *)(a1 + 40) = 1;
  lpp_transaction_add_provide_location_information_a_pos(a1 + 48, (uint64_t)a2, 0);
LABEL_22:
  if (*(_DWORD *)(a1 + 56))
  {
    ms_report_exception(1, 16436, 1744, "lpp_transaction_process_provide_location_information_trigger_type");
LABEL_24:
    v17 = 1;
    v18 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x578uLL);
    *((_QWORD *)a3 + 3) = v18;
    v19 = 6;
    v18[12] = 6;
    v18[14] = 0;
    v18[16] = 0;
    *((_BYTE *)v18 + 76) = 1;
    v18[18] = 2;
    *a3 = 1;
    goto LABEL_25;
  }
  v25 = *(_QWORD *)(a1 + 72);
  if (v25 && (!*(_BYTE *)(a1 + 112) || *(_BYTE *)(a1 + 112) == 1 && *(_BYTE *)(a1 + 113) == 3) && *v8 == 1)
    *v8 = 5;
  v26 = *(_QWORD *)(a1 + 80);
  if (v26 && *(_BYTE *)(a1 + 49) == 1)
    *(_BYTE *)(a1 + 49) = 5;
  if (*v8 != 1 && *(_BYTE *)(a1 + 49) != 1)
  {
    if (*(_BYTE *)(a1 + 112) == 1)
    {
LABEL_62:
      v31 = *(_BYTE **)(a1 + 64);
      if (!v31)
      {
        v31 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x90uLL);
        *(_QWORD *)(a1 + 64) = v31;
      }
      v32 = *(unsigned __int8 *)(a1 + 113);
      if (v32 == 3)
      {
        v31[96] = 1;
        *((_DWORD *)v31 + 23) = 0;
      }
      else if (v32 == 2)
      {
        v31[96] = 1;
        *((_DWORD *)v31 + 23) = 1;
        if (*(_BYTE *)(a1 + 112) == 1)
          *(_BYTE *)(a1 + 113) = 4;
      }
      else
      {
        v31[96] = 1;
      }
      goto LABEL_76;
    }
    if (!*(_QWORD *)(a1 + 64))
    {
      if (v25)
      {
        if (*(_BYTE *)(v25 + 352) == 1 || *(_BYTE *)(v25 + 176) == 1)
          goto LABEL_76;
        if (!v26)
          goto LABEL_105;
      }
      else if (!v26)
      {
        goto LABEL_24;
      }
      if (*(_BYTE *)(v26 + 48) != 1)
      {
LABEL_105:
        v51 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x90uLL);
        *(_QWORD *)(a1 + 64) = v51;
        v51[48] = 0;
        v51[80] = 0;
        v51[88] = 1;
        *((_DWORD *)v51 + 21) = 2;
      }
    }
LABEL_76:
    if (*(_BYTE *)(a1 + 40))
    {
      v33 = 0;
      v34 = (void **)(a1 + 64);
      v35 = 24;
      do
      {
        v36 = (char *)gnssOsa_Calloc("posp_alloc", 18, 1, 0x578uLL);
        *(_QWORD *)&a3[v35] = v36;
        memset_s(v36 + 48, 0x540uLL, 0, 0x540uLL);
        *((_DWORD *)v36 + 12) = 5;
        *((_DWORD *)v36 + 14) = 0;
        *((_DWORD *)v36 + 16) = 0;
        if (*v34)
        {
          v36[216] = 1;
          v37 = *v34;
          *(_OWORD *)(v36 + 72) = *(_OWORD *)*v34;
          v38 = v37[1];
          v39 = v37[2];
          v40 = v37[3];
          *(_OWORD *)(v36 + 136) = v37[4];
          *(_OWORD *)(v36 + 120) = v40;
          *(_OWORD *)(v36 + 104) = v39;
          *(_OWORD *)(v36 + 88) = v38;
          v41 = v37[5];
          v42 = v37[6];
          v43 = v37[7];
          *(_OWORD *)(v36 + 200) = v37[8];
          *(_OWORD *)(v36 + 184) = v43;
          *(_OWORD *)(v36 + 168) = v42;
          *(_OWORD *)(v36 + 152) = v41;
          if (*v34)
            free(*v34);
          *v34 = 0;
        }
        if (v34[1])
        {
          v36[616] = 1;
          memcpy(v36 + 224, v34[1], 0x188uLL);
          v44 = v34[1];
          if (v44)
            free(v44);
          v34[1] = 0;
        }
        else if (v34[3] && *((_BYTE *)v34 + 49) == 3)
        {
          v36[616] = 1;
          memcpy(v36 + 224, v34[3], 0x188uLL);
          v50 = v34[3];
          if (v50)
            free(v50);
          v34[3] = 0;
        }
        else if (*((_BYTE *)v34 - 16) == 2)
        {
          v36[616] = 1;
          v36[612] = 1;
          *(_QWORD *)(v36 + 580) = 1;
        }
        if (v34[2])
        {
          v36[1304] = 1;
          v45 = v34[2];
          *(_OWORD *)(v36 + 1224) = *v45;
          v46 = v45[1];
          v47 = v45[2];
          v48 = v45[3];
          *(_OWORD *)(v36 + 1288) = v45[4];
          *(_OWORD *)(v36 + 1272) = v48;
          *(_OWORD *)(v36 + 1256) = v47;
          *(_OWORD *)(v36 + 1240) = v46;
          v49 = v34[2];
          if (v49)
          {
            free(v49);
            v34[2] = 0;
          }
        }
        else if (*((_BYTE *)v34 - 15) == 2)
        {
          v36[1304] = 1;
          v36[1300] = 1;
          *(_QWORD *)(v36 + 1276) = 1;
        }
        v17 = *a3 + 1;
        *a3 = v17;
        ++v33;
        v34 += 9;
        v35 += 48;
      }
      while (v33 < *(unsigned __int8 *)(a1 + 40));
      v8 = (_BYTE *)(a1 + 48);
    }
    else
    {
      v17 = *a3;
    }
    if (!v17)
      goto LABEL_32;
    v19 = 5;
LABEL_25:
    v20 = 0;
    v21 = v17;
    v22 = 24;
    do
    {
      v23 = *(_QWORD *)&a3[v22];
      *(_WORD *)(v23 + 8) = 1;
      *(_QWORD *)v23 = *(_QWORD *)(a1 + 16);
      if (*(_BYTE *)(a1 + 48) != 1 && *(_BYTE *)(a1 + 49) != 1)
        *(_BYTE *)(v23 + 9) = v20 == v21 - 1;
      *(_BYTE *)(v23 + 1392) = 1;
      *(_DWORD *)(v23 + 40) = 0;
      *(_DWORD *)(v23 + 48) = v19;
      v24 = *(_QWORD *)&a3[v22];
      if ((*(_DWORD *)(v24 + 48) - 5) <= 1)
      {
        *(_BYTE *)(v24 + 32) = 1;
        *(_BYTE *)(v24 + 28) = 0;
        *(_BYTE *)(v24 + 20) = 1;
      }
      ++v20;
      v21 = *a3;
      v22 += 48;
    }
    while (v20 < v21);
LABEL_32:
    v13 = 1;
    goto LABEL_47;
  }
  if (*(_BYTE *)(a1 + 112) == 1 && *(_BYTE *)(a1 + 113) != 4)
    goto LABEL_62;
  ms_report_exception(2, 16433, 1917, "lpp_transaction_process_provide_location_information");
  v13 = 0;
LABEL_47:
  v27 = *v8;
  if (v27 == 1)
  {
    if (*(_BYTE *)(a1 + 49) == 1)
      return v13;
    v28 = *(_DWORD *)(a1 + 16);
    goto LABEL_54;
  }
  v28 = *(_DWORD *)(a1 + 16);
  if (*((_DWORD *)v7 + 17) == v28 && *((_DWORD *)v7 + 18) == *(_DWORD *)(a1 + 20))
    *(uint64_t *)((char *)v7 + 68) = 0x10000000000;
  if (*(_BYTE *)(a1 + 49) != 1)
  {
LABEL_54:
    if (*((_DWORD *)v7 + 19) == v28 && *((_DWORD *)v7 + 20) == *(_DWORD *)(a1 + 20))
      *(uint64_t *)((char *)v7 + 76) = 0x10000000000;
    if (v27 != 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x13u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v29 = mach_continuous_time();
        v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Transaction Data,Type,%hhu,SessionId,%u,CurState,%u,NextState,Terminated\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "PSP", 68, "lpp_transaction_process_provide_location_information", *(unsigned __int8 *)(a1 + 24), *(_DWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 25));
        LbsOsaTrace_WriteLog(0x13u, __str, v30, 5, 1);
      }
      *(_BYTE *)(a1 + 25) = 2;
      lpp_transaction_location_information_cleanup((_LPP_TRANSACTION *)a1);
    }
  }
  return v13;
}

void lpp_transaction_add_provide_location_information_a_pos(uint64_t a1, uint64_t a2, int a3)
{
  void *v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  _QWORD *v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  _BYTE *v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  void *v27;
  void *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  char __str[4];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    v6 = *(void **)(a1 + 16);
    if (v6)
    {
      free(v6);
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a3 == 1)
      v7 = 40;
    else
      v7 = 24;
    v8 = *(void **)(a1 + v7);
    if (v8)
    {
      free(v8);
      *(_QWORD *)(a1 + v7) = 0;
    }
    v9 = *(unsigned __int8 *)(a2 + 8);
    if (v9 > 1)
    {
      if (v9 == 255)
      {
        ms_report_exception(2, 16417, 5215, "lpp_transaction_add_provide_location_information_a_pos");
        return;
      }
      if (v9 == 2)
      {
        ms_report_exception(2, 16407, 5203, "lpp_transaction_add_provide_location_information_a_pos");
        goto LABEL_17;
      }
    }
    else
    {
      if (*(_BYTE *)(a2 + 8))
      {
        if (v9 != 1)
          return;
LABEL_17:
        lpp_transaction_add_provide_location_information_a_gnss_ue_based((char *)a1, a2 + 8, a3);
        return;
      }
      if (*(_DWORD *)(a2 + 284))
      {
        *(_WORD *)a1 = 1028;
      }
      else if ((*(_BYTE *)(a2 + 128) & 2) != 0)
      {
        v10 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x50uLL);
        *(_QWORD *)(a1 + 32) = v10;
        memset_s(v10, 0x50uLL, 0, 0x50uLL);
        if (*(_BYTE *)(a2 + 276))
        {
          v11 = *(unsigned __int8 *)(a2 + 269);
          v12 = *(_DWORD *)(a2 + 272);
          v13 = *(unsigned __int8 *)(a2 + 268);
          *((_BYTE *)v10 + 76) = 1;
          *((_DWORD *)v10 + 13) = 1;
          if (v13 == 1)
            *((_BYTE *)v10 + 64) = 1;
          if (v11 == 1)
            *((_BYTE *)v10 + 72) = 1;
          if (v12 == 2 || v12 == 1)
          {
            *((_DWORD *)v10 + 14) = v12;
          }
          else if (v12)
          {
            ms_report_exception(1, 16436, 3897, "lpp_transaction_add_provide_location_information_a_wlan_ue_assisted");
          }
          else
          {
            *((_DWORD *)v10 + 14) = 0;
          }
        }
        else
        {
          v14 = *(unsigned __int8 *)(a2 + 226);
          v15 = *(_QWORD *)(a2 + 232);
          v16 = *(unsigned __int16 *)(a2 + 240);
          v17 = *(unsigned __int16 *)(a2 + 242);
          v18 = *(unsigned __int16 *)(a2 + 244);
          v19 = *(unsigned __int16 *)(a2 + 246);
          v20 = *(unsigned __int16 *)(a2 + 248);
          v21 = *(unsigned __int16 *)(a2 + 250);
          v22 = *(unsigned __int8 *)(a2 + 264);
          *((_BYTE *)v10 + 48) = 1;
          if (v22 == 1)
          {
            *((_BYTE *)v10 + 8) = 1;
            v31 = v20;
            v32 = v21;
            v30 = v19;
            v23 = gnssOsa_Calloc("posp_alloc", 18, 1, 0xEuLL);
            *(_DWORD *)__str = 0;
            snprintf(__str, 2uLL, "%.1d", (unsigned __int16)v16 % 0xAu);
            snprintf(&__str[2], 2uLL, "%.1d", (unsigned __int16)((unsigned __int16)v16 / 0xAu - 10* ((6554 * ((52429 * v16) >> 19)) >> 16)));
            *v23 = __str[2];
            v23[1] = __str[0];
            snprintf(__str, 2uLL, "%.1d", (unsigned __int16)v17 % 0xAu);
            snprintf(&__str[2], 2uLL, "%.1d", (unsigned __int16)((unsigned __int16)v17 / 0xAu - 10* ((6554 * ((52429 * v17) >> 19)) >> 16)));
            v23[2] = __str[2];
            v23[3] = __str[0];
            snprintf(__str, 2uLL, "%.1d", (unsigned __int16)v18 % 0xAu);
            snprintf(&__str[2], 2uLL, "%.1d", (unsigned __int16)((unsigned __int16)v18 / 0xAu - 10* ((6554 * ((52429 * v18) >> 19)) >> 16)));
            v23[4] = __str[2];
            v23[5] = __str[0];
            snprintf(__str, 2uLL, "%.1d", (unsigned __int16)v30 % 0xAu);
            snprintf(&__str[2], 2uLL, "%.1d", (unsigned __int16)((unsigned __int16)v30 / 0xAu - 10* ((6554 * ((52429 * v30) >> 19)) >> 16)));
            v23[6] = __str[2];
            v23[7] = __str[0];
            snprintf(__str, 2uLL, "%.1d", (unsigned __int16)v31 % 0xAu);
            snprintf(&__str[2], 2uLL, "%.1d", (unsigned __int16)((unsigned __int16)v31 / 0xAu - 10* ((6554 * ((52429 * v31) >> 19)) >> 16)));
            v23[8] = __str[2];
            v23[9] = __str[0];
            snprintf(__str, 2uLL, "%.1d", (unsigned __int16)v32 % 0xAu);
            snprintf(&__str[2], 2uLL, "%.1d", (unsigned __int16)((unsigned __int16)v32 / 0xAu - 10* ((6554 * ((52429 * v32) >> 19)) >> 16)));
            v23[10] = __str[2];
            v23[11] = __str[0];
            *((_WORD *)v23 + 6) = 90;
            *v10 = v23;
          }
          if ((_DWORD)v14)
          {
            *((_BYTE *)v10 + 40) = 1;
            *((_DWORD *)v10 + 8) = v14;
            *((_DWORD *)v10 + 9) = 1;
            v24 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x58uLL);
            v10[2] = v24;
            v25 = v10 + 2;
            *v24 = 0;
            v10[3] = v24;
            if ((_DWORD)v14 != 1)
            {
              v26 = v14 - 1;
              do
              {
                v27 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x58uLL);
                *(_QWORD *)v10[3] = v27;
                v10[3] = v27;
                --v26;
              }
              while (v26);
            }
            if (v14 <= 1)
              v14 = 1;
            do
            {
              v25 = (_QWORD *)*v25;
              *((_BYTE *)v25 + 12) = 1;
              *((_DWORD *)v25 + 2) = 6;
              v28 = gnssOsa_Calloc("posp_alloc", 18, 1, 6uLL);
              v25[2] = v28;
              memcpy_s("lpp_transaction_add_provide_location_information_a_wlan_ue_assisted", 3819, v28, *((_DWORD *)v25 + 2), (const void *)v15, 6uLL);
              if (*(_BYTE *)(v15 + 6) == 1)
              {
                *((_BYTE *)v25 + 52) = 1;
                *((_DWORD *)v25 + 12) = *(__int16 *)(v15 + 8);
              }
              if (*(_BYTE *)(v15 + 10) == 1)
              {
                *((_BYTE *)v25 + 72) = 1;
                v29 = *(_DWORD *)(v15 + 24);
                *((_DWORD *)v25 + 14) = *(_QWORD *)(v15 + 16);
                *((_DWORD *)v25 + 15) = v29;
                if (*(_BYTE *)(v15 + 29) == 1)
                {
                  *((_BYTE *)v25 + 68) = 1;
                  *((_DWORD *)v25 + 16) = *(unsigned __int8 *)(v15 + 28);
                }
              }
              if (*(_BYTE *)(v15 + 32) == 1)
              {
                *((_BYTE *)v25 + 80) = 1;
                *((_DWORD *)v25 + 19) = *(unsigned __int16 *)(v15 + 34);
              }
              if (*(_BYTE *)(v15 + 36) == 1)
              {
                *((_BYTE *)v25 + 82) = 1;
                *((_BYTE *)v25 + 81) = *(_BYTE *)(v15 + 37);
              }
              v15 += 40;
              --v14;
            }
            while (v14);
          }
        }
      }
    }
  }
}

uint64_t lpp_transaction_get_ref_loc_bitmap(_LPP_TRANSACTION *a1)
{
  int v1;

  v1 = *((unsigned __int8 *)a1 + 24);
  if (v1 == 2)
    return *((unsigned __int8 *)a1 + 40);
  if (v1 == 3)
    return *((unsigned __int8 *)GetStaticLppPrivate() + 2) == 1;
  ms_report_exception(2, 16409, 2979, "lpp_transaction_get_ref_loc_bitmap");
  return 0;
}

void *lpp_fill_location_source(uint64_t a1, unsigned int a2)
{
  void *result;
  uint64_t v5;

  *(_DWORD *)a1 = 5;
  *(_BYTE *)(a1 + 4) = 1;
  result = gnssOsa_Calloc("posp_alloc", 18, 1, 5uLL);
  v5 = 0;
  *(_QWORD *)(a1 + 8) = result;
  do
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 8) + v5) = (a2 >> v5) & 1;
    ++v5;
  }
  while (v5 != 5);
  return result;
}

char *lpp_transaction_add_provide_location_information_a_gnss_ue_based(char *result, uint64_t a2, int a3)
{
  char *v5;
  uint64_t v6;
  unsigned __int16 v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  char v17;
  int v18;
  int v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  char __str[1040];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v5 = result;
  switch(*(_WORD *)(a2 + 8))
  {
    case 0:
      result = (char *)gnssOsa_Calloc("posp_alloc", 18, 1, 0x188uLL);
      v8 = result;
      v9 = 24;
      if (a3 == 1)
        v9 = 40;
      *(_QWORD *)&v5[v9] = result;
      if (v5[5] != 1 || (*(_BYTE *)(a2 + 116) & 1) == 0)
      {
        if (!*(_BYTE *)(a2 + 118))
        {
          result[388] = 1;
          result[352] = 0;
          result[176] = 0;
          *(_QWORD *)(result + 356) = 1;
        }
        goto LABEL_51;
      }
      v11 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x90uLL);
      *((_QWORD *)v5 + 2) = v11;
      v12 = *(unsigned __int8 *)(a2 + 58);
      v11[80] = v12;
      if (v12 != 1)
        goto LABEL_24;
      if (*(_BYTE *)(a2 + 66) == 1)
      {
        if (*(_BYTE *)(a2 + 73) == 1)
        {
          *((_DWORD *)v11 + 13) = 3;
          *((_DWORD *)v11 + 14) = *(unsigned __int16 *)(a2 + 60);
          *(_DWORD *)(*((_QWORD *)v5 + 2) + 60) = *(unsigned __int16 *)(a2 + 62);
          *(_DWORD *)(*((_QWORD *)v5 + 2) + 68) = *(unsigned __int8 *)(a2 + 72);
          *(_DWORD *)(*((_QWORD *)v5 + 2) + 64) = *(_DWORD *)(a2 + 68);
          *(_DWORD *)(*((_QWORD *)v5 + 2) + 72) = *(unsigned __int8 *)(a2 + 65);
          *(_DWORD *)(*((_QWORD *)v5 + 2) + 76) = *(unsigned __int8 *)(a2 + 74);
          goto LABEL_24;
        }
        *((_DWORD *)v11 + 13) = 1;
        *((_DWORD *)v11 + 14) = *(unsigned __int16 *)(a2 + 60);
        *(_DWORD *)(*((_QWORD *)v5 + 2) + 60) = *(unsigned __int16 *)(a2 + 62);
        *(_DWORD *)(*((_QWORD *)v5 + 2) + 68) = *(unsigned __int8 *)(a2 + 72);
        v13 = *(_DWORD *)(a2 + 68);
        goto LABEL_22;
      }
      if (*(_BYTE *)(a2 + 64) == 1)
      {
        *((_DWORD *)v11 + 13) = 2;
        *((_DWORD *)v11 + 14) = *(unsigned __int16 *)(a2 + 60);
        *(_DWORD *)(*((_QWORD *)v5 + 2) + 60) = *(unsigned __int16 *)(a2 + 62);
        v13 = *(unsigned __int8 *)(a2 + 65);
LABEL_22:
        *(_DWORD *)(*((_QWORD *)v5 + 2) + 64) = v13;
        goto LABEL_24;
      }
      *((_DWORD *)v11 + 13) = 0;
      *((_DWORD *)v11 + 14) = *(unsigned __int16 *)(a2 + 60);
      *(_DWORD *)(*((_QWORD *)v5 + 2) + 60) = *(unsigned __int16 *)(a2 + 62);
LABEL_24:
      v14 = *((_QWORD *)v5 + 2);
      if (v14)
      {
        *(_BYTE *)(v14 + 88) = 0;
        *(_BYTE *)(v14 + 48) = 1;
        switch(*(_WORD *)(a2 + 26))
        {
          case 0:
            *(_DWORD *)v14 = 0;
            *(_DWORD *)(v14 + 8) = *(unsigned __int8 *)(a2 + 28);
            *(_DWORD *)(*((_QWORD *)v5 + 2) + 12) = *(_QWORD *)(a2 + 32);
            *(_DWORD *)(*((_QWORD *)v5 + 2) + 16) = *(_DWORD *)(a2 + 40);
            break;
          case 1:
            *(_DWORD *)v14 = 1;
            *(_DWORD *)(v14 + 8) = *(unsigned __int8 *)(a2 + 28);
            *(_DWORD *)(*((_QWORD *)v5 + 2) + 12) = *(_QWORD *)(a2 + 32);
            *(_DWORD *)(*((_QWORD *)v5 + 2) + 16) = *(_DWORD *)(a2 + 40);
            *(_DWORD *)(*((_QWORD *)v5 + 2) + 20) = *(unsigned __int8 *)(a2 + 56);
            break;
          case 3:
            *(_DWORD *)v14 = 2;
            *(_DWORD *)(v14 + 8) = *(unsigned __int8 *)(a2 + 28);
            *(_DWORD *)(*((_QWORD *)v5 + 2) + 12) = *(_QWORD *)(a2 + 32);
            *(_DWORD *)(*((_QWORD *)v5 + 2) + 16) = *(_DWORD *)(a2 + 40);
            *(_DWORD *)(*((_QWORD *)v5 + 2) + 20) = *(unsigned __int8 *)(a2 + 44);
            *(_DWORD *)(*((_QWORD *)v5 + 2) + 24) = *(unsigned __int8 *)(a2 + 45);
            *(_DWORD *)(*((_QWORD *)v5 + 2) + 28) = *(unsigned __int8 *)(a2 + 46);
            *(_DWORD *)(*((_QWORD *)v5 + 2) + 32) = *(unsigned __int8 *)(a2 + 57);
            break;
          case 5:
            v15 = 3;
            goto LABEL_34;
          case 8:
            *(_DWORD *)v14 = 4;
            *(_DWORD *)(v14 + 8) = *(unsigned __int8 *)(a2 + 28);
            *(_DWORD *)(*((_QWORD *)v5 + 2) + 12) = *(_QWORD *)(a2 + 32);
            *(_DWORD *)(*((_QWORD *)v5 + 2) + 16) = *(_DWORD *)(a2 + 40);
            *(_DWORD *)(*((_QWORD *)v5 + 2) + 20) = *(unsigned __int8 *)(a2 + 47);
            *(_DWORD *)(*((_QWORD *)v5 + 2) + 24) = *(_QWORD *)(a2 + 48);
            break;
          case 9:
            *(_DWORD *)v14 = 5;
            *(_DWORD *)(v14 + 8) = *(unsigned __int8 *)(a2 + 28);
            *(_DWORD *)(*((_QWORD *)v5 + 2) + 12) = *(_QWORD *)(a2 + 32);
            *(_DWORD *)(*((_QWORD *)v5 + 2) + 16) = *(_DWORD *)(a2 + 40);
            *(_DWORD *)(*((_QWORD *)v5 + 2) + 20) = *(unsigned __int8 *)(a2 + 47);
            *(_DWORD *)(*((_QWORD *)v5 + 2) + 24) = *(_QWORD *)(a2 + 48);
            *(_DWORD *)(*((_QWORD *)v5 + 2) + 28) = *(unsigned __int8 *)(a2 + 44);
            *(_DWORD *)(*((_QWORD *)v5 + 2) + 32) = *(unsigned __int8 *)(a2 + 45);
            *(_DWORD *)(*((_QWORD *)v5 + 2) + 36) = *(unsigned __int8 *)(a2 + 46);
            *(_DWORD *)(*((_QWORD *)v5 + 2) + 40) = *(unsigned __int8 *)(a2 + 56);
            *(_DWORD *)(*((_QWORD *)v5 + 2) + 44) = *(unsigned __int8 *)(a2 + 57);
            break;
          case 0xA:
            v15 = 6;
LABEL_34:
            *(_DWORD *)v14 = v15;
            break;
          default:
            ms_report_exception(1, 16436, 5693, "lpp_map_gnss_location_estimate");
            break;
        }
      }
      v8[388] = 0;
      v8[176] = 0;
      v8[352] = 1;
      if (v5[5] == 1 && (*(_BYTE *)(a2 + 116) & 1) != 0)
      {
        v8[340] = 1;
        *((_DWORD *)v8 + 84) = 1;
        v16 = gnssOsa_Calloc("posp_alloc", 18, 1, 1uLL);
        *((_QWORD *)v8 + 43) = v16;
        if ((*(_BYTE *)(a2 + 116) & 1) != 0)
          *v16 = 1;
      }
      if (*(_DWORD *)(a2 + 112) == 5)
      {
        v17 = 0;
        *((_DWORD *)v8 + 46) = *(_QWORD *)(a2 + 16) % 0x36EE80uLL;
        v8[192] = 0;
        v18 = *(unsigned __int8 *)(a2 + 24);
        if (v18 == 255)
          goto LABEL_48;
      }
      else
      {
        *((_DWORD *)v8 + 46) = *(_DWORD *)(a2 + 104);
        v19 = *(unsigned __int16 *)(a2 + 108);
        if (v19 == 0xFFFF)
        {
          v20 = 0;
        }
        else
        {
          *((_DWORD *)v8 + 47) = v19;
          v20 = 1;
        }
        v8[192] = v20;
        v18 = *(unsigned __int8 *)(a2 + 110);
        if (v18 == 255)
        {
          v17 = 0;
          goto LABEL_48;
        }
      }
      *((_DWORD *)v8 + 49) = v18;
      v17 = 1;
LABEL_48:
      v8[200] = v17;
      *((_DWORD *)v8 + 51) = 0;
      v8[328] = 0;
      result = (char *)GetStaticLppPrivate();
      if (result[7] == 1)
      {
        v21 = *(unsigned __int8 *)(a2 + 280);
        if (*(_BYTE *)(a2 + 280))
        {
          v22 = *((_QWORD *)v5 + 2);
          *(_BYTE *)(v22 + 120) = 1;
          return (char *)lpp_fill_location_source(v22 + 104, v21);
        }
      }
LABEL_51:
      *(_BYTE *)(*((_QWORD *)v5 + 2) + 120) = 0;
      return result;
    case 1:
    case 5:
      if (*(_BYTE *)(a2 + 118))
        goto LABEL_3;
      result = (char *)gnssOsa_Calloc("posp_alloc", 18, 1, 0x188uLL);
      v10 = 24;
      if (a3 == 1)
        v10 = 40;
      *(_QWORD *)&v5[v10] = result;
      result[388] = 1;
      result[352] = 0;
      result[176] = 0;
      *((_DWORD *)result + 89) = 1;
      *((_DWORD *)result + 90) = 1;
      return result;
    case 4:
      *result = 4;
      return result;
    default:
LABEL_3:
      result = (char *)LbsOsaTrace_IsLoggingAllowed(0x13u, 0, 0, 0);
      if ((_DWORD)result)
      {
        bzero(__str, 0x410uLL);
        v6 = mach_continuous_time();
        v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Location Info Response\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "PSP", 69, "lpp_transaction_add_provide_location_information_a_gnss_ue_based", 770);
        return (char *)LbsOsaTrace_WriteLog(0x13u, __str, v7, 0, 1);
      }
      return result;
  }
}

_BYTE *lpp_transaction_add_provideCapabilities_a_gnss(uint64_t a1)
{
  _BYTE *result;
  int v3;
  _DWORD *v5;
  unsigned __int8 *StaticLppPrivate;
  _DWORD *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  char v12;
  _BYTE *v13;

  result = GetStaticLppPrivate();
  v3 = result[2];
  if (v3 == 1 && *(_BYTE *)(a1 + 24) == 1)
  {
    *(_QWORD *)(a1 + 16) = 0x100000001;
    v5 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x70uLL);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v5;
    result = GetStaticLppPrivate();
    if (result[2] == 1)
    {
      v5[2] = 0;
      *((_BYTE *)v5 + 32) = 0;
      StaticLppPrivate = (unsigned __int8 *)GetStaticLppPrivate();
      lpp_fill_in_bitstr_from_byte((_BYTE *)v5 + 40, 3uLL, StaticLppPrivate[3]);
      result = (_BYTE *)lpp_fill_in_bitstr_from_byte((_BYTE *)v5 + 56, 8uLL, 0x80u);
      *((_WORD *)v5 + 52) = 0;
      *((_BYTE *)v5 + 106) = 1;
    }
  }
  if (*(_BYTE *)(a1 + 144) == 1)
  {
    *(_BYTE *)(a1 + 72) = 1;
    result = GetStaticLppPrivate();
    if (v3 == 1 && result[2] == 1)
    {
      *(_BYTE *)(a1 + 36) = 1;
      *(_DWORD *)(a1 + 32) = 1;
      *(_QWORD *)(a1 + 40) = gnssOsa_Calloc("posp_alloc", 18, 1, 1uLL);
      if (*((_BYTE *)GetStaticLppPrivate() + 2) == 1)
        **(_BYTE **)(a1 + 40) = 1;
      *(_BYTE *)(a1 + 64) = 0;
      lpp_fill_in_bitstr_from_byte((_BYTE *)(a1 + 48), 1uLL, 1u);
      *(_BYTE *)(a1 + 80) = 1;
      *(_BYTE *)(a1 + 104) = 1;
      lpp_fill_in_bitstr_from_byte((_BYTE *)(a1 + 88), 1uLL, 1u);
      *(_BYTE *)(a1 + 112) = 0;
      *(_QWORD *)(a1 + 136) = 0x100000001;
      v8 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x100uLL);
      *(_QWORD *)v8 = 0;
      *(_QWORD *)(a1 + 120) = v8;
      *(_QWORD *)(a1 + 128) = v8;
      result = GetStaticLppPrivate();
      if (result[2] == 1)
      {
        v8[2] = 0;
        *((_BYTE *)v8 + 16) = 0;
        *((_BYTE *)v8 + 24) = 0;
        *((_BYTE *)v8 + 56) = 0;
        *((_BYTE *)v8 + 112) = 1;
        *((_BYTE *)v8 + 80) = 1;
        v9 = gnssOsa_Calloc("posp_alloc", 18, 1, 2uLL);
        *((_QWORD *)v8 + 9) = v9;
        *((_BYTE *)v8 + 68) = 1;
        v8[16] = 2;
        v9[1] |= 1u;
        *((_BYTE *)v8 + 104) = 1;
        v10 = gnssOsa_Calloc("posp_alloc", 18, 1, 2uLL);
        *((_QWORD *)v8 + 12) = v10;
        *((_BYTE *)v8 + 92) = 1;
        v8[22] = 2;
        v10[1] |= 1u;
        *((_BYTE *)v8 + 128) = 0;
        v11 = GetStaticLppPrivate();
        v12 = 0;
        if ((v11[3] & 1) != 0)
        {
          v12 = 1;
          *((_BYTE *)v8 + 136) = 1;
          *((_BYTE *)v8 + 144) = 1;
        }
        *((_BYTE *)v8 + 148) = v12;
        *((_BYTE *)v8 + 176) = 1;
        *((_BYTE *)v8 + 168) = 1;
        v13 = gnssOsa_Calloc("posp_alloc", 18, 1, 2uLL);
        *((_QWORD *)v8 + 20) = v13;
        *((_BYTE *)v8 + 156) = 1;
        v8[38] = 2;
        v13[1] |= 1u;
        *((_BYTE *)v8 + 208) = 1;
        *((_BYTE *)v8 + 200) = 1;
        result = gnssOsa_Calloc("posp_alloc", 18, 1, 1uLL);
        *((_QWORD *)v8 + 24) = result;
        *((_BYTE *)v8 + 188) = 1;
        v8[46] = 1;
        *result |= 1u;
        *((_BYTE *)v8 + 120) = 1;
        *((_BYTE *)v8 + 216) = 0;
      }
      if (*(_BYTE *)(a1 + 152) == 1)
      {
        *(_DWORD *)(a1 + 145) = 0;
        *(_WORD *)(a1 + 149) = 256;
        *(_BYTE *)(a1 + 151) = 0;
      }
      if (*(_BYTE *)(a1 + 157) == 1)
        *(_DWORD *)(a1 + 153) = 0;
    }
  }
  return result;
}

uint64_t lpp_transaction_add_provideCapabilities_wlan(_BYTE *a1)
{
  unsigned __int8 *StaticLppPrivate;
  unsigned int v3;

  StaticLppPrivate = (unsigned __int8 *)GetStaticLppPrivate();
  lpp_fill_in_bitstr_from_byte(a1, 2uLL, StaticLppPrivate[5]);
  v3 = *((unsigned __int8 *)GetStaticLppPrivate() + 6);
  return lpp_fill_in_bitstr_from_byte(a1 + 16, 2uLL, v3);
}

void lpp_transaction_pos_aid_req(_BYTE *a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _LPP_TRANSACTION *v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = lpp_session_detect(a2);
  if (v3)
  {
    v4 = (uint64_t)v3;
    memset_s(&v6, 8uLL, 0, 8uLL);
    v6 = 1;
    v5 = lpp_transaction_start(v4, &v6, 6);
    if (v5)
      lpp_transaction_act((uint64_t)v5, 6u, a1);
    else
      ms_report_exception(2, 16425, 5850, "lpp_transaction_pos_aid_req");
  }
  else
  {
    ms_report_exception(2, 16426, 5837, "lpp_transaction_pos_aid_req");
  }
}

void _LPP_TRANSACTION::_LPP_TRANSACTION(_LPP_TRANSACTION *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_WORD *)this + 12) = 6;
  *((_BYTE *)this + 28) = -1;
  *((_DWORD *)this + 8) = -1;
  *((_QWORD *)this + 60) = 0;
  memset_s((char *)this + 40, 0x1B8uLL, 0, 0x1B8uLL);
  memset_s((char *)this + 16, 8uLL, 0, 8uLL);
}

void T_UTRAN_GPS_TIME_s::T_UTRAN_GPS_TIME_s(T_UTRAN_GPS_TIME_s *this)
{
  *((_DWORD *)this + 2) = -1;
  *((_BYTE *)this + 12) = 0;
  memset_s((char *)this + 16, 0xCuLL, 0, 0xCuLL);
  memset_s(this, 8uLL, 0, 8uLL);
}

void T_GNSS_POSITION_s::T_GNSS_POSITION_s(T_GNSS_POSITION_s *this)
{
  *(_DWORD *)this = -1;
  *((_QWORD *)this + 1) = -1;
  *(_QWORD *)((char *)this + 13) = -1;
  *((_QWORD *)this + 3) = -1;
  *((_QWORD *)this + 4) = -1;
  *((_QWORD *)this + 5) = -1;
  *((_WORD *)this + 24) = -1;
  *((_BYTE *)this + 50) = 0;
  *((_DWORD *)this + 13) = -1;
  *((_WORD *)this + 28) = -256;
  *((_BYTE *)this + 58) = 0;
  *((_DWORD *)this + 15) = 255;
  *((_WORD *)this + 32) = 255;
  *((_BYTE *)this + 66) = -1;
  *((_DWORD *)this + 17) = 4;
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 26) = 5;
  *((_WORD *)this + 54) = -1;
  *((_BYTE *)this + 110) = 0;
  memset_s((char *)this + 72, 0x18uLL, 0, 0x18uLL);
}

BOOL Is_BDS_IntEph_Same(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a1 + 16) == *(unsigned __int16 *)(a2 + 16)
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(unsigned __int8 *)(a1 + 18) == *(unsigned __int8 *)(a2 + 18)
      && *(unsigned __int8 *)(a1 + 19) == *(unsigned __int8 *)(a2 + 19)
      && *(unsigned __int8 *)(a1 + 20) == *(unsigned __int8 *)(a2 + 20)
      && *(unsigned __int8 *)(a1 + 21) == *(unsigned __int8 *)(a2 + 21)
      && *(unsigned __int8 *)(a1 + 22) == *(unsigned __int8 *)(a2 + 22)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
      && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36)
      && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)
      && *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44)
      && *(unsigned __int16 *)(a1 + 48) == *(unsigned __int16 *)(a2 + 48)
      && *(unsigned __int16 *)(a1 + 50) == *(unsigned __int16 *)(a2 + 50)
      && *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52)
      && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56)
      && *(_DWORD *)(a1 + 60) == *(_DWORD *)(a2 + 60)
      && *(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64)
      && *(_DWORD *)(a1 + 68) == *(_DWORD *)(a2 + 68)
      && *(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72)
      && *(_DWORD *)(a1 + 76) == *(_DWORD *)(a2 + 76)
      && *(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 80)
      && *(_DWORD *)(a1 + 84) == *(_DWORD *)(a2 + 84)
      && *(unsigned __int16 *)(a1 + 88) == *(unsigned __int16 *)(a2 + 88)
      && *(unsigned __int16 *)(a1 + 90) == *(unsigned __int16 *)(a2 + 90)
      && *(unsigned __int16 *)(a1 + 92) == *(unsigned __int16 *)(a2 + 92);
}

uint64_t GN_AGAL_Set_Eph_El(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  double v6;
  unsigned int v7;
  double v8;
  unsigned int v9;
  double v10;
  __int16 v11;
  int v12;
  double v13;
  int v14;
  int v15;
  __int16 v16;
  unsigned int v17;
  __int16 v18;
  __int16 v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int *v35;
  uint64_t v36;
  uint64_t v37;

  if (!Is_GN_API_Set_Allowed("GN_AGAL_Set_Eph"))
    return 0;
  if (*(_DWORD *)a1 > 0x93A7Fu)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: TOW = %d >604800, Out of range!");
    return 0;
  }
  v2 = *(unsigned __int16 *)(a1 + 4);
  if (v2 >= 0x1000)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: Week = %d >=4096, Out of range!");
    return 0;
  }
  v3 = *(unsigned __int8 *)(a1 + 6);
  if (v3 >= 0x40)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: SVid = %d >=64, Out of range!");
    return 0;
  }
  if (v3 >= 0x25)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: SVid = %d >36, Unrealistic value!");
    return 0;
  }
  v4 = *(unsigned __int16 *)(a1 + 8);
  if (v4 >= 0x400)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: IODnav = %d >=1024, Out of range!");
    return 0;
  }
  v5 = *(unsigned __int16 *)(a1 + 10);
  if (v5 >> 5 >= 0x13B)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: toe = %d >=10080, Out of range!");
    return 0;
  }
  v6 = 0.25;
  if (((v3 - 14) & 0xFB) != 0)
    v6 = 0.03;
  v7 = *(_DWORD *)(a1 + 16);
  v8 = (double)v7 * 1.16415322e-10;
  if (v8 < 0.0)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: e = %g < %g, Unrealistic value!");
    return 0;
  }
  if (v8 > v6)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: e = %g > %g, Unrealistic value!");
    return 0;
  }
  v9 = *(_DWORD *)(a1 + 20);
  v10 = (double)v9 * 0.00000190734863;
  if (v10 < 4800.0)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: sqrtA = %g < %g, Unrealistic value!");
    return 0;
  }
  if (v10 > 5800.0)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: sqrtA = %g > %g, Unrealistic value!");
    return 0;
  }
  v11 = *(_WORD *)(a1 + 40);
  if ((unsigned __int16)((unsigned __int16)(v11 - 0x2000) >> 14) <= 2u)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: IDot = %d <-2^13 or >=2^13, Out of range!");
    return 0;
  }
  v12 = *(_DWORD *)(a1 + 36);
  if ((v12 - 0x800000) >> 24 != 255)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: OmegaDot = %d <-2^23 or >=2^23, Out of range!");
    return 0;
  }
  v13 = (double)v12 * 3.57157734e-13;
  if (v13 < -0.00000198862815)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: OmegaDot = %g < %g, Unrealistic value!");
    return 0;
  }
  v37 = *(unsigned __int8 *)(a1 + 6);
  if (v13 > 0.0)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: OmegaDot = %g > %g, Unrealistic value!");
    return 0;
  }
  v14 = *(_DWORD *)(a1 + 56);
  if (v14 - 0x40000000 >= 0)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: af0 = %d <-2^30 or >=2^30, Out of range!");
    return 0;
  }
  v15 = *(_DWORD *)(a1 + 60);
  if ((v15 - 0x100000) >> 21 != 2047)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: af1 = %d <-2^20 or >=2^20, Out of range!");
    return 0;
  }
  v16 = *(_WORD *)(a1 + 64);
  if ((unsigned __int16)((unsigned __int16)(v16 - 32) >> 6) <= 0x3FEu)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: af2 = %d <-2^5 or >=2^5, Out of range!");
    return 0;
  }
  v17 = *(unsigned __int16 *)(a1 + 66);
  if (v17 >> 5 >= 0x13B)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: toc = %d >=10080, Out of range!");
    return 0;
  }
  v18 = *(_WORD *)(a1 + 68);
  if ((unsigned __int16)((unsigned __int16)(v18 - 512) >> 10) <= 0x3Eu)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: bgdE1E5b = %d <-2^9 or >=2^9, Out of range!");
    return 0;
  }
  v19 = *(_WORD *)(a1 + 70);
  if ((unsigned __int16)((unsigned __int16)(v19 - 512) >> 10) <= 0x3Eu)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: bgdE1E5a = %d <-2^9 or >=2^9, Out of range!");
    return 0;
  }
  v20 = *(unsigned __int8 *)(a1 + 72);
  if (v20 >= 2)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: Model_ID = %d >1, Out of range!");
    return 0;
  }
  v21 = *(unsigned __int8 *)(a1 + 73);
  if (v21 >= 2)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: E5a_Nav_DVS = %d >1, Out of range!");
    return 0;
  }
  v22 = *(unsigned __int8 *)(a1 + 74);
  if (v22 >= 2)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: E5b_Nav_DVS = %d >1, Out of range!");
    return 0;
  }
  v23 = *(unsigned __int8 *)(a1 + 75);
  if (v23 >= 2)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: E1B_Nav_DVS = %d >1, Out of range!");
    return 0;
  }
  v24 = *(unsigned __int8 *)(a1 + 76);
  if (v24 >= 4)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: E5a_Sig_HS = %d >3, Out of range!");
    return 0;
  }
  v25 = *(unsigned __int8 *)(a1 + 77);
  if (v25 >= 4)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: E5b_Sig_HS = %d >3, Out of range!");
    return 0;
  }
  v26 = *(unsigned __int8 *)(a1 + 78);
  if (v26 >= 4)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: E1B_Sig_HS = %d >3, Out of range!");
    return 0;
  }
  v27 = (v37 - 1);
  if (v27 > 0x23)
  {
    EvCrt_v("GN_AGAL_Set_Eph: FAILED: SVid = %d <%d or >%d, Out of range!");
    return 0;
  }
  v28 = p_NA;
  v29 = p_NA + 88 * v27;
  *(_DWORD *)(v29 + 5408) = *(_DWORD *)a1;
  *(_WORD *)(v29 + 5412) = v2;
  *(_BYTE *)(v29 + 5414) = v37;
  *(_BYTE *)(v29 + 5415) = *(_BYTE *)(a1 + 7);
  *(_WORD *)(v29 + 5416) = v4;
  *(_WORD *)(v29 + 5418) = v5;
  *(_DWORD *)(v29 + 5420) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(v29 + 5424) = v7;
  *(_DWORD *)(v29 + 5428) = v9;
  *(_QWORD *)(v29 + 5432) = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v29 + 5440) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v29 + 5444) = v12;
  *(_WORD *)(v29 + 5448) = v11;
  *(_QWORD *)(v29 + 5450) = *(_QWORD *)(a1 + 42);
  *(_WORD *)(v29 + 5458) = *(_WORD *)(a1 + 50);
  *(_DWORD *)(v29 + 5460) = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(v29 + 5464) = v14;
  *(_DWORD *)(v29 + 5468) = v15;
  *(_WORD *)(v29 + 5472) = v16;
  *(_WORD *)(v29 + 5474) = v17;
  *(_WORD *)(v29 + 5476) = v18;
  *(_WORD *)(v29 + 5478) = v19;
  *(_BYTE *)(v29 + 5480) = v20;
  *(_BYTE *)(v29 + 5481) = v21;
  *(_BYTE *)(v29 + 5482) = v22;
  *(_BYTE *)(v29 + 5483) = v23;
  *(_BYTE *)(v29 + 5484) = v24;
  *(_BYTE *)(v29 + 5485) = v25;
  *(_BYTE *)(v29 + 5486) = v26;
  if (*(_BYTE *)(a1 + 79))
    v30 = 5;
  else
    v30 = 3;
  *(_DWORD *)(v29 + 5404) = v30;
  *(_BYTE *)(v28 + v27 + 150) = 1;
  v31 = *(_QWORD *)(p_api + 48);
  if (*(_BYTE *)(v31 + 5) && *(int *)v31 >= 3)
    v32 = 604800 * *(__int16 *)(v31 + 16) + (int)*(double *)(v31 + 24);
  else
    v32 = 0;
  v35 = (int *)(p_NA + 88 * v27 + 5400);
  *v35 = v32;
  v33 = 1;
  Debug_Log_GAL_Eph(1, (uint64_t)v35);
  if ((unsigned __int16)g_Enable_Event_Log >= 3u)
    EvLog_nd("GN_AGAL_Set_Eph: ", 2, v36, v37, *(unsigned int *)(p_NA + 88 * v27 + 5400));
  return v33;
}

uint64_t GN_AGAL_Set_Alm_El(unsigned __int8 *a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  __int16 v6;
  double v7;
  unsigned int v8;
  double v9;
  double v10;
  __int16 v11;
  double v12;
  __int16 v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int *v26;
  uint64_t v27;
  uint64_t v28;

  if (!Is_GN_API_Set_Allowed("GN_AGAL_Set_Alm"))
    return 0;
  v2 = *a1;
  if (v2 >= 0x40)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: SVid = %d >=64, Out of range!");
    return 0;
  }
  if (v2 >= 0x25)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: SVid = %d >36, Unrealistic value!");
    return 0;
  }
  v3 = a1[1];
  if (v3 >= 0x10)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: IODa = %d > 15, Out of range!");
    return 0;
  }
  v4 = a1[2];
  if (v4 >= 4)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: WNa = %d > 3, Out of range!");
    return 0;
  }
  v5 = *((unsigned __int16 *)a1 + 2);
  if (v5 >= 0x400)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: toa = %d > 1023, Out of range!");
    return 0;
  }
  v6 = *((_WORD *)a1 + 3);
  if ((unsigned __int16)(v6 - 4097) <= 0xDFFEu)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: dsqrtA = %d <-2^12 or >=2^12, Out of range!");
    return 0;
  }
  v7 = (double)v6 * 0.001953125;
  if (v7 < -640.588203)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: dsqrtA = %g < %g, Unrealistic value!");
    return 0;
  }
  if (v7 > 359.411797)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: dsqrtA = %g > %g, Unrealistic value!");
    return 0;
  }
  v8 = *((unsigned __int16 *)a1 + 4);
  if (v8 >= 0x800)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: e = %d >= 2^11, Out of range!");
    return 0;
  }
  v9 = 0.25;
  if (((v2 - 14) & 0xFB) != 0)
    v9 = 0.03;
  v10 = (double)v8 * 0.0000152587891;
  if (v10 < 0.0)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: e = %g < %g, Unrealistic value!");
    return 0;
  }
  if (v10 > v9)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: e = %g > %g, Unrealistic value!");
    return 0;
  }
  if ((unsigned __int16)(*((_WORD *)a1 + 5) - 1025) <= 0xF7FEu)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: di0 = %d <-2^10 or >2^10, Out of range!");
    return 0;
  }
  v28 = *a1;
  v11 = *((_WORD *)a1 + 7);
  if ((unsigned __int16)(v11 - 1025) <= 0xF7FEu)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: OmegaDot = %d <-2^10 or >2^10, Out of range!");
    return 0;
  }
  v12 = (double)v11 * 3.6572952e-10;
  if (v12 < -0.00000198862815)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: OmegaDot = %e < %e, Unrealistic value!");
    return 0;
  }
  if (v12 > 0.0)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: OmegaDot = %e > %e, Unrealistic value!");
    return 0;
  }
  v13 = *((_WORD *)a1 + 11);
  if ((unsigned __int16)((unsigned __int16)(v13 - 4096) >> 13) <= 6u)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: af1 = %d <-2^12 or >=2^12, Out of range!");
    return 0;
  }
  v14 = a1[24];
  if (v14 >= 4)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: E5a_Sig_HS = %d >3, Out of range!");
    return 0;
  }
  v15 = a1[25];
  if (v15 >= 4)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: E5b_Sig_HS = %d >3, Out of range!");
    return 0;
  }
  v16 = a1[26];
  if (v16 >= 4)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: E1B_Sig_HS = %d >3, Out of range!");
    return 0;
  }
  v17 = (v28 - 1);
  if (v17 > 0x23)
  {
    EvCrt_v("GN_AGAL_Set_Alm: FAILED: SVid = %d <%d or >%d, Out of range!");
    return 0;
  }
  v18 = *((_WORD *)a1 + 5);
  v19 = p_NA;
  v20 = p_NA + 36 * v17;
  *(_BYTE *)(v20 + 8576) = v28;
  *(_BYTE *)(v20 + 8577) = v3;
  *(_WORD *)(v20 + 8578) = v4;
  *(_WORD *)(v20 + 8580) = v5;
  *(_WORD *)(v20 + 8582) = v6;
  *(_WORD *)(v20 + 8584) = v8;
  *(_WORD *)(v20 + 8586) = v18;
  *(_WORD *)(v20 + 8588) = *((_WORD *)a1 + 6);
  *(_WORD *)(v20 + 8590) = v11;
  *(_WORD *)(v20 + 8592) = *((_WORD *)a1 + 8);
  *(_DWORD *)(v20 + 8594) = *(_DWORD *)(a1 + 18);
  *(_WORD *)(v20 + 8598) = v13;
  *(_BYTE *)(v20 + 8600) = v14;
  *(_BYTE *)(v20 + 8601) = v15;
  *(_BYTE *)(v20 + 8602) = v16;
  if (a1[27])
    v21 = 5;
  else
    v21 = 3;
  *(_DWORD *)(v20 + 8572) = v21;
  *(_BYTE *)(v19 + v17 + 186) = 1;
  v22 = *(_QWORD *)(p_api + 48);
  if (*(_BYTE *)(v22 + 5) && *(int *)v22 >= 3)
    v23 = (int)*(double *)(v22 + 24) + 604800 * *(__int16 *)(v22 + 16);
  else
    v23 = 0;
  v26 = (int *)(p_NA + 36 * v17 + 8568);
  *v26 = v23;
  v24 = 1;
  Debug_Log_GAL_Alm(1, (uint64_t)v26);
  if ((unsigned __int16)g_Enable_Event_Log >= 3u)
    EvLog_nd("GN_AGAL_Set_Alm: ", 2, v27, v28, *(unsigned int *)(p_NA + 36 * v17 + 8568));
  return v24;
}

uint64_t GN_AGAL_Set_GGTO(__int16 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!Is_GN_API_Set_Allowed("GN_AGAL_Set_GGTO"))
    return 0;
  if ((unsigned __int16)(a1[1] - 2049) <= 0xEFFEu)
  {
    EvCrt_v("GN_AGAL_Set_BGTO: FAILED: A1G = %d < -2^11 or >= 2^11, Out of range!");
    return 0;
  }
  if (*((unsigned __int8 *)a1 + 5) >= 0x40u)
  {
    EvCrt_v("GN_AGAL_Set_BGTO: FAILED: WNoG = %d > 63, Out of range!");
    return 0;
  }
  v5 = *(_QWORD *)(p_api + 48);
  if (*(_BYTE *)(v5 + 5) && *(int *)v5 >= 3)
    v6 = (int)*(double *)(v5 + 24) + 604800 * *(__int16 *)(v5 + 16);
  else
    v6 = 0;
  v7 = p_NA;
  v8 = (_BYTE *)(p_NA + 5396);
  *(_DWORD *)(p_NA + 5384) = v6;
  if (*((_BYTE *)a1 + 6))
    v9 = 5;
  else
    v9 = 3;
  *(_DWORD *)(v7 + 5388) = v9;
  v10 = *a1;
  *(_WORD *)(v7 + 5392) = v10;
  v11 = a1[1];
  *(_WORD *)(v7 + 5394) = v11;
  v12 = *((unsigned __int8 *)a1 + 4);
  *v8 = v12;
  v13 = *((unsigned __int8 *)a1 + 5);
  v8[1] = v13;
  v3 = 1;
  *(_BYTE *)(v7 + 149) = 1;
  EvLog_nd("GN_AGAL_Set_GGTO: ", 4, v2, v10, v11, v12, v13);
  return v3;
}

void Gnm32_10SendPltCfgGnc(void)
{
  char *v0;
  char *v1;
  __int16 v2;
  __int128 v3;
  uint64_t v4;
  unsigned __int16 v5;
  char v6;
  char __str[1040];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v0 = (char *)gnssOsa_Calloc("Gnm32_10SendPltCfgGnc", 108, 1, 0x50uLL);
  if (!v0)
    return;
  v1 = v0;
  *((_DWORD *)v0 + 3) = 4;
  *(_DWORD *)(v0 + 26) = -65281;
  v0[30] = -1;
  v2 = dword_253FFE6A4;
  if ((dword_253FFE6A4 & 0x100) == 0)
  {
    if ((dword_253FFE6A4 & 0x400) == 0)
      goto LABEL_4;
LABEL_13:
    *((_WORD *)v0 + 14) = word_253FFE7BC;
    if ((v2 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = dword_253FFE7B8;
  if (dword_253FFE7B8 > 0xFF)
    v6 = 0;
  v0[30] = v6;
  if ((v2 & 0x400) != 0)
    goto LABEL_13;
LABEL_4:
  if ((v2 & 0x1000) != 0)
  {
LABEL_5:
    *((_DWORD *)v0 + 3) = 260;
    v3 = xmmword_253FFE7D0;
    *(_OWORD *)(v0 + 56) = *(_OWORD *)&qword_253FFE7E0;
    *(_OWORD *)(v0 + 40) = v3;
  }
LABEL_6:
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v4 = mach_continuous_time();
    v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_CFG_UPDATE_IND =>GNCP CfgMask,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm32_10SendPltCfgGnc", *((_DWORD *)v1 + 3));
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
  }
  AgpsSendFsmMsg(128, 134, 8394499, v1);
}

void Gnm32_11SendPltCfgLsim(void)
{
  _QWORD *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  unsigned __int16 v4;
  char __str[1040];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v0 = gnssOsa_Calloc("Gnm32_11SendPltCfgLsim", 156, 1, 0x20uLL);
  if (v0)
  {
    v1 = v0;
    v0[2] = 0;
    v2 = (char *)gnssOsa_Calloc("Gnm32_11SendPltCfgLsim", 164, 1, 0x1CuLL);
    v1[3] = v2;
    if (v2)
    {
      *v2 = dword_253FFE6C0;
      *(_DWORD *)(v2 + 2) = qword_253FFE6A8;
      *(int16x4_t *)(v2 + 6) = vuzp1_s16(*(int16x4_t *)((char *)&qword_253FFE6A8 + 4), (int16x4_t)vext_s8(*(int8x8_t *)((char *)&qword_253FFE6A8 + 4), *(int8x8_t *)((char *)&qword_253FFE6A8 + 4), 6uLL));
      v2[14] = BYTE1(dword_253FFE6C0);
      *((_DWORD *)v2 + 4) = qword_253FFE6B4;
      *(int16x4_t *)(v2 + 20) = vuzp1_s16(*(int16x4_t *)((char *)&qword_253FFE6B4 + 4), (int16x4_t)vext_s8(*(int8x8_t *)((char *)&qword_253FFE6B4 + 4), *(int8x8_t *)((char *)&qword_253FFE6B4 + 4), 6uLL));
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v3 = mach_continuous_time();
        v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_LSIM_LSIM_CONFIG_IND =>LSIM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 73, "Gnm32_11SendPltCfgLsim");
        LbsOsaTrace_WriteLog(0xBu, __str, v4, 4, 1);
      }
      AgpsSendFsmMsg(128, 131, 8594435, v1);
    }
    else
    {
      free(v1);
    }
  }
}

size_t Gnm32_00PrintPltfmCfg(const char *a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v4;
  unsigned __int16 v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  unsigned __int16 v13;
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 v17;
  uint64_t v18;
  unsigned __int16 v19;
  uint64_t v20;
  unsigned __int16 v21;
  uint64_t v22;
  unsigned __int16 v23;
  double v24;
  uint64_t v25;
  unsigned __int16 v26;
  uint64_t v27;
  unsigned __int16 v28;
  uint64_t v29;
  unsigned __int16 v30;
  uint64_t v31;
  unsigned __int16 v32;
  uint64_t v33;
  unsigned __int16 v34;
  uint64_t v35;
  unsigned __int16 v36;
  uint64_t v37;
  unsigned __int16 v38;
  size_t result;
  uint64_t v40;
  unsigned __int16 v41;
  char __str[1040];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if ((int)strnlen((const char *)&g_PltfmConfig, 0xCuLL) <= 11
    && LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:%s Version,%s \n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm32_00PrintPltfmCfg", a1, (const char *)&g_PltfmConfig);
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v4 = mach_continuous_time();
    v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:ConfigMask,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm32_00PrintPltfmCfg", dword_253FFE6A4);
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v6 = mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:CommonMSAMask,0x%02X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm32_00PrintPltfmCfg", dword_253FFE6C0);
    LbsOsaTrace_WriteLog(0xBu, __str, v7, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v8 = mach_continuous_time();
    v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:CommonMSBMask,0x%02X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm32_00PrintPltfmCfg", BYTE1(dword_253FFE6C0));
    LbsOsaTrace_WriteLog(0xBu, __str, v9, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v10 = mach_continuous_time();
    v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:GPS  MSAMask,0x%04X,MSBMask,0x%04X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm32_00PrintPltfmCfg", (unsigned __int16)qword_253FFE6A8, (unsigned __int16)qword_253FFE6B4);
    LbsOsaTrace_WriteLog(0xBu, __str, v11, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v12 = mach_continuous_time();
    v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:GLON MSAMask,0x%04X,MSBMask,0x%04X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 73, "Gnm32_00PrintPltfmCfg", WORD1(qword_253FFE6A8), WORD1(qword_253FFE6B4));
    LbsOsaTrace_WriteLog(0xBu, __str, v13, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v14 = mach_continuous_time();
    v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:BDS  MSAMask,0x%04X,MSBMask,0x%04X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 73, "Gnm32_00PrintPltfmCfg", WORD2(qword_253FFE6A8), WORD2(qword_253FFE6B4));
    LbsOsaTrace_WriteLog(0xBu, __str, v15, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v16 = mach_continuous_time();
    v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:GAL  MSAMask,0x%04X,MSBMask,0x%04X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNM", 73, "Gnm32_00PrintPltfmCfg", HIWORD(qword_253FFE6A8), HIWORD(qword_253FFE6B4));
    LbsOsaTrace_WriteLog(0xBu, __str, v17, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v18 = mach_continuous_time();
    v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:SBAS MSAMask,0x%04X,MSBMask,0x%04X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNM", 73, "Gnm32_00PrintPltfmCfg", (unsigned __int16)dword_253FFE6B0, (unsigned __int16)dword_253FFE6BC);
    LbsOsaTrace_WriteLog(0xBu, __str, v19, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v20 = mach_continuous_time();
    v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:QZSS MSAMask,0x%04X,MSBMask,0x%04X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "GNM", 73, "Gnm32_00PrintPltfmCfg", HIWORD(dword_253FFE6B0), HIWORD(dword_253FFE6BC));
    LbsOsaTrace_WriteLog(0xBu, __str, v21, 4, 1);
  }
  if ((int)strnlen(byte_253FFE6C8, 0xF0uLL) <= 239 && LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v22 = mach_continuous_time();
    v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:DeviceName,%s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "GNM", 73, "Gnm32_00PrintPltfmCfg", byte_253FFE6C8);
    LbsOsaTrace_WriteLog(0xBu, __str, v23, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v24 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v25 = 89;
    if ((dword_253FFE6A4 & 0x80) == 0)
      v25 = 78;
    v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:DynamicSSF,%c\n", (unint64_t)v24, "GNM", 73, "Gnm32_00PrintPltfmCfg", v25);
    LbsOsaTrace_WriteLog(0xBu, __str, v26, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v27 = mach_continuous_time();
    v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:SleepTO,%us\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "GNM", 73, "Gnm32_00PrintPltfmCfg", dword_253FFE7B8);
    LbsOsaTrace_WriteLog(0xBu, __str, v28, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v29 = mach_continuous_time();
    v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:GuardTimeVal,%ums\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "GNM", 73, "Gnm32_00PrintPltfmCfg", HIWORD(dword_253FFE6C0));
    LbsOsaTrace_WriteLog(0xBu, __str, v30, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v31 = mach_continuous_time();
    v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:MeasDelay,%ums\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "GNM", 73, "Gnm32_00PrintPltfmCfg", (unsigned __int16)word_253FFE7BC);
    LbsOsaTrace_WriteLog(0xBu, __str, v32, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v33 = mach_continuous_time();
    v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:XCOR SigThreshold,%fdBHz\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "GNM", 73, "Gnm32_00PrintPltfmCfg", *(double *)&xmmword_253FFE7D0);
    LbsOsaTrace_WriteLog(0xBu, __str, v34, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v35 = mach_continuous_time();
    v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:XCOR MarginL1,%fdBHz\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "GNM", 73, "Gnm32_00PrintPltfmCfg", *((double *)&xmmword_253FFE7D0 + 1));
    LbsOsaTrace_WriteLog(0xBu, __str, v36, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v37 = mach_continuous_time();
    v38 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:XCOR MarginE1,%fdBHz\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "GNM", 73, "Gnm32_00PrintPltfmCfg", *(double *)&qword_253FFE7E0);
    LbsOsaTrace_WriteLog(0xBu, __str, v38, 4, 1);
  }
  result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
  if ((_DWORD)result)
  {
    bzero(__str, 0x410uLL);
    v40 = mach_continuous_time();
    v41 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PLTCFG:XCOR MarginB1,%fdBHz\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v40), "GNM", 73, "Gnm32_00PrintPltfmCfg", *(double *)&qword_253FFE7E8);
    return LbsOsaTrace_WriteLog(0xBu, __str, v41, 4, 1);
  }
  return result;
}

uint64_t Gnm32_13UpdatePltfmCfg(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v9;
  unsigned __int16 v10;
  __int128 v11;
  char __str[1040];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_SET_PLTFM_CONFIG\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm32_13UpdatePltfmCfg");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    v4 = *(_DWORD *)(a1 + 28);
    dword_253FFE6A4 |= v4;
    v5 = v4 & 1;
    if ((v4 & 1) != 0)
    {
      LOBYTE(dword_253FFE6C0) = *(_BYTE *)(a1 + 56);
      qword_253FFE6A8 = *(_QWORD *)(a1 + 32);
      dword_253FFE6B0 = *(_DWORD *)(a1 + 40);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 0x40) == 0)
          goto LABEL_7;
        goto LABEL_19;
      }
    }
    else if ((v4 & 2) == 0)
    {
      goto LABEL_6;
    }
    BYTE1(dword_253FFE6C0) = *(_BYTE *)(a1 + 57);
    qword_253FFE6B4 = *(_QWORD *)(a1 + 44);
    dword_253FFE6BC = *(_DWORD *)(a1 + 52);
    v4 = *(_DWORD *)(a1 + 28);
    v5 = 1;
    if ((v4 & 0x40) == 0)
    {
LABEL_7:
      if ((v4 & 0x100) == 0)
        goto LABEL_8;
      goto LABEL_22;
    }
LABEL_19:
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: HWCfg changed BaudRate,%u,DeviceName,%s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 73, "Gnm32_13UpdatePltfmCfg", *(_DWORD *)(a1 + 60), (const char *)(a1 + 64));
      LbsOsaTrace_WriteLog(0xBu, __str, v10, 4, 1);
    }
    dword_253FFE6C4 = *(_DWORD *)(a1 + 60);
    memcpy_s("Gnm32_13UpdatePltfmCfg", 314, byte_253FFE6C8, 0xF0u, (const void *)(a1 + 64), 0xF0uLL);
    v4 = *(_DWORD *)(a1 + 28);
    if ((v4 & 0x100) == 0)
    {
LABEL_8:
      if ((v4 & 0x400) == 0)
        goto LABEL_9;
      goto LABEL_23;
    }
LABEL_22:
    dword_253FFE7B8 = *(_DWORD *)(a1 + 304);
    if ((v4 & 0x400) == 0)
    {
LABEL_9:
      if ((v4 & 0x200) == 0)
        goto LABEL_10;
      goto LABEL_24;
    }
LABEL_23:
    word_253FFE7BC = *(_WORD *)(a1 + 308);
    if ((v4 & 0x200) == 0)
    {
LABEL_10:
      if ((v4 & 0x1000) == 0)
        goto LABEL_11;
      goto LABEL_25;
    }
LABEL_24:
    HIWORD(dword_253FFE6C0) = *(_WORD *)(a1 + 58);
    if ((v4 & 0x1000) == 0)
    {
LABEL_11:
      if (!v5)
      {
LABEL_13:
        Gnm32_10SendPltCfgGnc();
        Gnm32_00PrintPltfmCfg("UPDATED");
        return 0;
      }
LABEL_12:
      Gnm32_11SendPltCfgLsim();
      goto LABEL_13;
    }
LABEL_25:
    v11 = *(_OWORD *)(a1 + 344);
    xmmword_253FFE7D0 = *(_OWORD *)(a1 + 328);
    *(_OWORD *)&qword_253FFE7E0 = v11;
    if (!v5)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v6 = mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 69, "Gnm32_13UpdatePltfmCfg", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v7, 0, 1);
  }
  return 0;
}

uint64_t Gnm32_14GetPltfmCfg(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, int *))
{
  uint64_t v4;
  unsigned __int16 v5;
  char __str[789];
  int __s;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  char v15[9];
  int v16;
  __int16 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  memset_s(&__s, 0x270uLL, 0, 0x270uLL);
  __s = dword_253FFE6A4;
  v11 = qword_253FFE6B4;
  v12 = dword_253FFE6BC;
  v13 = dword_253FFE6C0;
  v9 = qword_253FFE6A8;
  v10 = dword_253FFE6B0;
  v16 = dword_253FFE7B8;
  v17 = word_253FFE7BC;
  v19 = *(_OWORD *)&qword_253FFE7E0;
  v18 = xmmword_253FFE7D0;
  if ((dword_253FFE6A4 & 0x40) != 0)
  {
    v14 = dword_253FFE6C4;
    strncpy(v15, byte_253FFE6C8, 0xF0uLL);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v4 = mach_continuous_time();
    v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GetCfgCB returned PltfmCfg\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm32_14GetPltfmCfg");
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
  }
  return a2(a1, 2, &__s);
}

_DWORD *Gnm32_21GetHwConfig(_DWORD *result)
{
  _DWORD *v1;
  int v2;

  v1 = result;
  if ((dword_253FFE6A4 & 0x40) != 0
    && ((v2 = dword_253FFE6C4) != 0 || (result = (_DWORD *)strnlen(byte_253FFE6C8, 0xF0uLL), (_DWORD)result)))
  {
    *(_BYTE *)v1 = 1;
    v1[2] = v2;
    return memcpy_s("Gnm32_21GetHwConfig", 424, v1 + 3, 0xF0u, byte_253FFE6C8, 0xF0uLL);
  }
  else
  {
    *(_BYTE *)v1 = 0;
  }
  return result;
}

void INS_CalcGlobalParameters(uint64_t a1)
{
  double v2;
  double v3;
  __double2 v4;
  double v5;
  unint64_t v6;
  double v7;
  double G_0;
  _OWORD v9[2];
  __int128 v10;
  double v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *(double *)(a1 + 528);
  if (*(_BYTE *)(a1 + 552) || v2 - *(double *)(a1 + 544) > *(double *)(a1 + 536))
  {
    v10 = 0u;
    *(_OWORD *)v11 = 0u;
    memset(v9, 0, sizeof(v9));
    *(_BYTE *)(a1 + 552) = 0;
    *(double *)(a1 + 544) = v2;
    v3 = InsUtil_ECEF2Geo_Iterative((double *)(a1 + 376), (uint64_t)&v10, *(double *)(a1 + 408));
    *(double *)(a1 + 408) = v3;
    v4 = __sincos_stret(v11[0]);
    v5 = v4.__cosval * v4.__cosval + v4.__sinval * v4.__sinval * 0.986656055;
    if (v5 < 0.0)
    {
      if ((g_FPE_LogSeverity & 1) != 0)
      {
        v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU)
          v7 = *(double *)(g_TCU + 8);
        else
          v7 = 0.0;
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "INS_CalcGlobalParameters", 90, v6, v7, v5);
        v3 = *(double *)(a1 + 408);
      }
      g_FPE_AssertFlag = 1;
      v5 = 1.0;
    }
    *(double *)(a1 + 488) = v3 * sqrt(v5);
    G_0 = CreateG_0((uint64_t)&v10);
    *(double *)(a1 + 480) = G_0;
    VecSet_3x1((const char *)3, (uint64_t)v9, 0.0, 0.0, G_0 * (v11[1] * v11[1] * 3.0 / 4.06806316e13 + (v11[1] + v11[1]) * -1.0068026 / 6378137.0 + 1.0));
    CreateC_e_n((uint64_t)&v10, (int *)(a1 + 168));
    Mult_MatT_Mat(9, a1 + 168, 3, (uint64_t)v9, 3, a1 + 248);
  }
}

const char *LC_LOG_SEVERITY_GENERIC(const char *__format, ...)
{
  int v1;
  char **v2;
  char v3;
  char *v4;
  unsigned __int8 *v5;
  int v6;
  char *v7;
  char v8;
  uint64_t v9;
  char __str;
  _BYTE v11[2007];
  va_list va;

  va_start(va, __format);
  *(_QWORD *)&v11[1999] = *MEMORY[0x24BDAC8D0];
  if (g_p_CB_LCD_SA_Dbg)
  {
    v1 = vsnprintf(&__str, 0x7D0uLL, __format, va);
    strcpy(&v11[v1 - 1], "\r\n");
    v2 = (char **)g_p_CB_LCD_SA_Dbg;
    v3 = __str;
    if (__str)
    {
      v4 = *(char **)g_p_CB_LCD_SA_Dbg;
      v5 = v11;
      do
      {
        *v2 = v4 + 1;
        *v4 = v3;
        v4 = *v2;
        if (*v2 >= v2[3])
        {
          v4 = v2[2];
          *v2 = v4;
        }
        v6 = *v5++;
        v3 = v6;
      }
      while (v6);
      v2 = (char **)g_p_CB_LCD_SA_Dbg;
    }
    if (v1 == 2000)
    {
      v7 = *v2;
      v8 = 114;
      v9 = 1u;
      do
      {
        *v2 = v7 + 1;
        *v7 = v8;
        v7 = *v2;
        if (*v2 >= v2[3])
        {
          v7 = v2[2];
          *v2 = v7;
        }
        v8 = str_3_0[v9++];
      }
      while (v9 != 29);
      v2 = (char **)g_p_CB_LCD_SA_Dbg;
    }
    return (const char *)LCD_SA_Debug_Flush_Check((uint64_t)v2);
  }
  return __format;
}

const char *INS_Init(uint64_t a1, char a2, int a3, double *a4, double a5)
{
  double v10;
  const char *result;

  if (!*(_BYTE *)(a1 + 1048))
  {
    *(_BYTE *)(a1 + 1048) = 1;
    *(_QWORD *)(a1 + 408) = 0xC0C3878000000000;
    *(int64x2_t *)(a1 + 480) = vdupq_n_s64(0xC0C3878000000000);
    *(_DWORD *)(a1 + 784) = 2;
    Set_Mat_Const((const char *)3, 3u, (const char *)9, (int *)(a1 + 8), 0.0);
    Set_Mat_Const((const char *)3, 3u, (const char *)9, (int *)(a1 + 88), 0.0);
    Set_Mat_Const((const char *)3, 3u, (const char *)9, (int *)(a1 + 168), 0.0);
    Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 248), 0.0);
    Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 280), 0.0);
    Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 312), 0.0);
    Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 344), 0.0);
    Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 376), 0.0);
    Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 496), 0.0);
    Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 560), 0.0);
    Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 592), 0.0);
    Set_Mat_Const((const char *)3, 3u, (const char *)9, (int *)(a1 + 624), 0.0);
    Set_Mat_Const((const char *)3, 3u, (const char *)9, (int *)(a1 + 704), 0.0);
    VecSet_3x1((const char *)3, a1 + 792, a4[1], a4[2], a4[3]);
    VecSet_3x1((const char *)3, a1 + 824, a4[4], a4[5], a4[6]);
    VecSet_3x1((const char *)3, a1 + 856, a4[7], a4[8], a4[9]);
    VecSet_3x1((const char *)3, a1 + 888, a4[10], a4[11], a4[12]);
    VecSet_3x1((const char *)3, a1 + 920, a4[13], a4[14], a4[15]);
    VecSet_3x1((const char *)3, a1 + 952, a4[16], a4[17], a4[18]);
    VecSet_3x1((const char *)3, a1 + 984, a4[19], a4[20], a4[21]);
    VecSet_3x1((const char *)3, a1 + 1016, a4[22], a4[23], a4[24]);
    *(_BYTE *)a1 = a2;
    if (a3)
      v10 = 0.0;
    else
      v10 = a5;
    *(double *)(a1 + 536) = v10;
  }
  *(_QWORD *)(a1 + 528) = 0xC0C3878000000000;
  *(_QWORD *)(a1 + 544) = 0xC0C3878000000000;
  Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 416), 0.0);
  result = Set_Mat_Const((const char *)3, 1u, (const char *)3, (int *)(a1 + 448), 0.0);
  *(_BYTE *)(a1 + 552) = 1;
  return result;
}

void INS_InitAfterLeveling(uint64_t a1, double *a2, int *a3, double *a4, int *a5, _DWORD *a6)
{
  uint64_t v10;
  unsigned int v11;
  int *v12;
  int *v14;
  _OWORD v16[2];
  _OWORD v17[2];
  _OWORD v18[2];
  _OWORD __x[5];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  memset(__x, 0, sizeof(__x));
  memset(v18, 0, sizeof(v18));
  memset(v17, 0, sizeof(v17));
  memset(v16, 0, sizeof(v16));
  VecSet_3x1((const char *)3, (uint64_t)v16, 0.0, 0.0, 0.0000729211515);
  skewSimMat((double *)v16, (int *)(a1 + 704));
  *(double *)(a1 + 408) = InsUtil_ECEF2Geo_Iterative(a4, (uint64_t)v17, 6378137.0);
  CreateC_e_n((uint64_t)v17, (int *)(a1 + 168));
  CreateC_b_n(a2, (int *)__x);
  Mult_MatT_Mat(9, a1 + 168, 9, (uint64_t)__x, 9, a1 + 8);
  VecSet_3x1((const char *)3, a1 + 1064, 0.0, 0.0, 0.0);
  v10 = DWORD1(__x[0]);
  v11 = DWORD1(__x[0]);
  *(long double *)(a1 + 1072) = atan2(*((long double *)__x + ((2 * DWORD1(__x[0])) | 1u) + 1), *((long double *)__x + (2 * DWORD1(__x[0]) + 2) + 1))* 57.2957795;
  *(long double *)(a1 + 1080) = asin(*((long double *)&__x[v11] + 1)) * 57.2957795;
  *(long double *)(a1 + 1088) = atan2(*((long double *)__x + v10 + 1), *((long double *)__x + 1)) * 57.2957795;
  VecSet_3x1((const char *)3, a1 + 1096, 0.0, 0.0, 0.0);
  VecSet_3x1((const char *)3, (uint64_t)v18, 0.0, 0.0, 0.0);
  Mult_Mat_Mat(9, a1 + 8, 3, (uint64_t)v18, 3, a1 + 280);
  Copy_Mat(3, (int *)a4, (const char *)3, (int *)(a1 + 344));
  Copy_Mat(9, (int *)(a1 + 8), (const char *)9, (int *)(a1 + 88));
  Copy_Mat(3, (int *)(a1 + 280), (const char *)3, (int *)(a1 + 312));
  v14 = (int *)(a1 + 376);
  Copy_Mat(3, (int *)(a1 + 344), (const char *)3, (int *)(a1 + 376));
  Copy_Mat(3, (int *)a4, (const char *)3, (int *)(a1 + 560));
  v12 = (int *)(a1 + 592);
  Set_Mat_Const((const char *)2, 1u, (const char *)3, (int *)(a1 + 592), 0.0);
  Copy_Mat(9, (int *)(a1 + 8), (const char *)9, (int *)(a1 + 624));
  *(_QWORD *)(a1 + 1056) = 0x4010000000000000;
  Sub_Mat(3, (int *)(a1 + 448), 3, a3, (const char *)3, (int *)(a1 + 448));
  if (*(double *)&a6[2 * (a6[1] * *a6 - 1) + 2] != 0.0)
  {
    v22 = 0u;
    v23 = 0u;
    Copy_SubMat_from_Mat(1.0, 6, a6, 0, 0, 3, 1u, 3, (int *)&v22);
    INS_CalcGlobalParameters(a1);
    v20 = 0u;
    v21 = 0u;
    Mult_MatT_Mat(9, a1 + 8, 3, a1 + 248, 3, (uint64_t)&v20);
    Add_Mat(3, (int *)&v22, 3, (int *)&v20, (const char *)3, (int *)&v20);
    Mult_Mat_scalar(-1.0, 3, (int *)&v20, (const char *)3, (int *)(a1 + 416));
  }
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v22 = 0u;
  v20 = 0u;
  v21 = 0u;
  Mult_Mat_scalar(-1.0, 3, (int *)(a1 + 792), (const char *)3, (int *)&v20);
  CreateC_b_n((double *)&v20, (int *)&v22);
  Mult_Mat_Mat(9, (uint64_t)&v22, 9, a1 + 8, 9, a1 + 8);
  Sub_Mat(3, (int *)(a1 + 280), 3, (int *)(a1 + 824), (const char *)3, (int *)(a1 + 280));
  Sub_Mat(3, (int *)(a1 + 344), 3, (int *)(a1 + 856), (const char *)3, (int *)(a1 + 344));
  Sub_Mat(3, (int *)(a1 + 416), 3, (int *)(a1 + 888), (const char *)3, (int *)(a1 + 416));
  Sub_Mat(3, (int *)(a1 + 448), 3, (int *)(a1 + 920), (const char *)3, (int *)(a1 + 448));
  Copy_Mat(3, (int *)(a1 + 344), (const char *)3, (int *)(a1 + 560));
  Copy_Mat(9, (int *)(a1 + 8), (const char *)9, (int *)(a1 + 624));
  Copy_Mat(9, (int *)(a1 + 8), (const char *)9, (int *)(a1 + 88));
  Copy_Mat(3, (int *)(a1 + 280), (const char *)3, (int *)(a1 + 312));
  Copy_Mat(3, (int *)(a1 + 344), (const char *)3, v14);
  Copy_Mat(3, a5, (const char *)3, (int *)(a1 + 312));
  Copy_Mat(3, a5, (const char *)3, (int *)(a1 + 280));
  Copy_Mat(3, a5, (const char *)3, v12);
  Set_Mat_Size((const char *)3, v12, 2, 1);
  Add_Mat_ScalarMult(-0.4, 3, v14, 3, a5, (const char *)3, (int *)(a1 + 560));
}

void INS_IntegrationStep(uint64_t a1, uint64_t a2, double *a3, double a4)
{
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  int *v11;
  int *v12;
  _OWORD v13[2];
  _OWORD v14[2];
  _OWORD v15[5];
  _OWORD v16[5];
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  memset(v17, 0, sizeof(v17));
  skewSimMat(a3, (int *)v17);
  if (*(_BYTE *)a1)
  {
    v7 = (int *)(a1 + 88);
    v8 = (int *)(a1 + 8);
    Copy_Mat(9, (int *)(a1 + 88), (const char *)9, (int *)(a1 + 8));
    v9 = (int *)(a1 + 312);
    v10 = (int *)(a1 + 280);
    Copy_Mat(3, (int *)(a1 + 312), (const char *)3, (int *)(a1 + 280));
  }
  else
  {
    memset(v16, 0, sizeof(v16));
    Copy_Mat(9, (int *)v17, (const char *)9, (int *)v16);
    Mult_Mat_Mat(9, (uint64_t)v16, 9, (uint64_t)v16, 9, (uint64_t)v16);
    memset(v15, 0, sizeof(v15));
    Set_Mat_I((const char *)3, (const char *)9, (int *)v15, 1.0);
    Add_Mat_ScalarMult(a4, 9, (int *)v15, 9, (int *)v17, (const char *)9, (int *)v15);
    Add_Mat_ScalarMult(a4 * a4 * 0.5, 9, (int *)v15, 9, (int *)v16, (const char *)9, (int *)v15);
    v7 = (int *)(a1 + 88);
    Mult_Mat_Mat(9, a1 + 88, 9, (uint64_t)v15, 9, (uint64_t)v15);
    Mult_Mat_Mat(9, a1 + 704, 9, a1 + 88, 9, (uint64_t)v16);
    v8 = (int *)(a1 + 8);
    Add_Mat_ScalarMult(-a4, 9, (int *)v15, 9, (int *)v16, (const char *)9, (int *)(a1 + 8));
    memset(v14, 0, sizeof(v14));
    Add_Mat(9, (int *)(a1 + 88), 9, (int *)(a1 + 8), (const char *)9, (int *)v16);
    Mult_Mat_Mat(9, (uint64_t)v16, 3, a2, 3, (uint64_t)v14);
    Mult_Mat_scalar(0.5, 3, (int *)v14, (const char *)3, (int *)v14);
    memset(v13, 0, sizeof(v13));
    v9 = (int *)(a1 + 312);
    Mult_Mat_Mat(9, a1 + 704, 3, a1 + 312, 3, (uint64_t)v13);
    Mult_Mat_scalar(-2.0, 3, (int *)v13, (const char *)3, (int *)v13);
    Add_Mat(3, (int *)v13, 3, (int *)(a1 + 248), (const char *)3, (int *)v13);
    Add_Mat(3, (int *)v13, 3, (int *)v14, (const char *)3, (int *)v13);
    Mult_Mat_scalar(a4, 3, (int *)v13, (const char *)3, (int *)v13);
    v10 = (int *)(a1 + 280);
    Add_Mat(3, (int *)(a1 + 312), 3, (int *)v13, (const char *)3, (int *)(a1 + 280));
  }
  v11 = (int *)(a1 + 344);
  Add_Mat(3, v9, 3, v10, (const char *)3, (int *)(a1 + 344));
  Mult_Mat_scalar(a4 * 0.5, 3, (int *)(a1 + 344), (const char *)3, (int *)(a1 + 344));
  v12 = (int *)(a1 + 376);
  Add_Mat(3, v12, 3, v11, (const char *)3, v11);
  Copy_Mat(9, v8, (const char *)9, v7);
  Copy_Mat(3, v10, (const char *)3, v9);
  Copy_Mat(3, v11, (const char *)3, v12);
}

void INS_ApplyImuSample(uint64_t a1, int *a2, double a3)
{
  double v6;
  _OWORD v7[2];
  _OWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  memset(v8, 0, sizeof(v8));
  Add_Mat(3, a2, 3, (int *)(a1 + 416), (const char *)3, (int *)v8);
  Copy_Mat(3, (int *)v8, (const char *)3, (int *)(a1 + 496));
  memset(v7, 0, sizeof(v7));
  Add_Mat(3, a2 + 8, 3, (int *)(a1 + 448), (const char *)3, (int *)v7);
  v6 = a3 - *(double *)(a1 + 528);
  *(double *)(a1 + 528) = a3;
  INS_CalcGlobalParameters(a1);
  INS_IntegrationStep(a1, (uint64_t)v8, (double *)v7, v6);
}

void INS_ApplyCorrectionsFromKalman(uint64_t a1, uint64_t a2)
{
  int v4;
  double v5;
  unint64_t v6;
  double v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[3];
  uint64_t v14;
  _OWORD v15[2];
  _OWORD v16[5];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  memset(v16, 0, sizeof(v16));
  memset(v15, 0, sizeof(v15));
  Copy_SubMat_from_Mat(-1.0, 32, (_DWORD *)a2, 0, 0, 3, 1u, 3, (int *)v15);
  CreateC_b_n((double *)v15, (int *)v16);
  Mult_Mat_Mat(9, (uint64_t)v16, 9, a1 + 8, 9, a1 + 8);
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v4 = *(_DWORD *)(a1 + 784);
  if (v4)
  {
    if (v4 == 2)
    {
      InsUtil_mat2quat(a1 + 8, (uint64_t)v13);
      v5 = Norma_Vec(6, (int *)v13);
      Mult_Mat_scalar(1.0 / v5, 6, (int *)v13, (const char *)6, (int *)v13);
      InsUtil_quat2mat((double *)v13, (int *)(a1 + 8));
    }
    else if (v4 == 1)
    {
      v8 = 0uLL;
      v9 = 0uLL;
      extractOfromC_b_n(a1 + 8, (uint64_t)&v8);
      CreateC_b_n((double *)&v8, (int *)(a1 + 8));
    }
    else
    {
      if ((g_FPE_LogSeverity & 1) != 0)
      {
        v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        if (g_TCU)
          v7 = *(double *)(g_TCU + 8);
        else
          v7 = 0.0;
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f not a valid eulerCorretion parameter", "INS_ApplyCorrectionsFromKalman", 765, v6, v7);
      }
      g_FPE_AssertFlag = 1;
    }
  }
  Copy_SubMat_from_Mat(1.0, 32, (_DWORD *)a2, 3, 0, 3, 1u, 3, (int *)v15);
  Sub_Mat(3, (int *)(a1 + 280), 3, (int *)v15, (const char *)3, (int *)(a1 + 280));
  Copy_SubMat_from_Mat(1.0, 32, (_DWORD *)a2, 6, 0, 3, 1u, 3, (int *)v15);
  Sub_Mat(3, (int *)(a1 + 344), 3, (int *)v15, (const char *)3, (int *)(a1 + 344));
  Copy_SubMat_from_Mat(1.0, 32, (_DWORD *)a2, 9, 0, 3, 1u, 3, (int *)v15);
  Sub_Mat(3, (int *)(a1 + 416), 3, (int *)v15, (const char *)3, (int *)(a1 + 416));
  Copy_SubMat_from_Mat(1.0, 32, (_DWORD *)a2, 12, 0, 3, 1u, 3, (int *)v15);
  Sub_Mat(3, (int *)(a1 + 448), 3, (int *)v15, (const char *)3, (int *)(a1 + 448));
  Copy_SubMat_from_Mat(1.0, 32, (_DWORD *)a2, 15, 0, 3, 1u, 3, (int *)v15);
  Sub_Mat(3, (int *)(a1 + 560), 3, (int *)v15, (const char *)3, (int *)(a1 + 560));
  Copy_SubMat_from_Mat(1.0, 32, (_DWORD *)a2, 21, 0, 2, 1u, 3, (int *)v15);
  Sub_Mat(3, (int *)(a1 + 592), 3, (int *)v15, (const char *)3, (int *)(a1 + 592));
  *(double *)(a1 + 1056) = *(double *)(a1 + 1056) - *(double *)(a2 + 192);
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v8 = 0u;
  Copy_SubMat_from_Mat(-1.0, 32, (_DWORD *)a2, 18, 0, 3, 1u, 3, (int *)v15);
  CreateC_b_n((double *)v15, (int *)&v8);
  Mult_Mat_Mat(9, (uint64_t)&v8, 9, a1 + 624, 9, a1 + 624);
  Copy_Mat(9, (int *)(a1 + 8), (const char *)9, (int *)(a1 + 88));
  Copy_Mat(3, (int *)(a1 + 280), (const char *)3, (int *)(a1 + 312));
  Copy_Mat(3, (int *)(a1 + 344), (const char *)3, (int *)(a1 + 376));
}

uint64_t lsim00_01IgnoreMessage(unsigned __int8 *a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  char __str[1040];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0xCu, 1, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx FSM:Msg,%u,Src,%u,Dest,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "LSM", 65, "lsim00_01IgnoreMessage", 520, *((_DWORD *)a1 + 1), *a1, a1[1]);
    LbsOsaTrace_WriteLog(0xCu, __str, v3, 1, 1);
  }
  return 0;
}

uint64_t Gnm51_01EarlyStartStartInd(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v4;
  unsigned __int16 v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v11;
  unsigned __int16 v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned __int16 v16;
  _WORD *v17;
  _DWORD *v18;
  uint64_t v19;
  unsigned __int16 v20;
  uint64_t v21;
  unsigned __int16 v22;
  uint64_t v23;
  char __str[1040];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 3, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_EARLYSTART_START_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 77, "Gnm51_01EarlyStartStartInd");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 3, 1);
  }
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
    {
LABEL_11:
      v6 = 0;
LABEL_12:
      Gnm51_07SendEarlyStartStartRsp(v6);
      return 0;
    }
    bzero(__str, 0x410uLL);
    v7 = mach_continuous_time();
    v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 69, "Gnm51_01EarlyStartStartInd", 517);
    v9 = 0;
LABEL_10:
    LbsOsaTrace_WriteLog(0xBu, __str, v8, v9, 1);
    goto LABEL_11;
  }
  if (Gnm02_39GetEarlyStartInstn())
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v4 = mach_continuous_time();
      v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ESTART:Session Ongoing\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 87, "Gnm51_01EarlyStartStartInd", 1028);
      LbsOsaTrace_WriteLog(0xBu, __str, v5, 2, 1);
    }
    v6 = 13;
    goto LABEL_12;
  }
  if (Gnm02_54IsEmerSessionOngoing())
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v11 = mach_continuous_time();
      v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ESTART:EmerSession Ongoing\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 87, "Gnm51_01EarlyStartStartInd", 1028);
      LbsOsaTrace_WriteLog(0xBu, __str, v12, 2, 1);
    }
    v6 = 10;
    goto LABEL_12;
  }
  v13 = Gnm02_11ReqNewInstn();
  if (!v13)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      goto LABEL_11;
    bzero(__str, 0x410uLL);
    v23 = mach_continuous_time();
    v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "GNM", 87, "Gnm51_01EarlyStartStartInd", 2049);
    v9 = 2;
    goto LABEL_10;
  }
  v14 = v13;
  if ((Gnm02_15AddEarlyStartParams(v13) & 1) == 0
    || (v15 = *((_QWORD *)v14 + 1),
        v16 = *v14,
        (v17 = gnssOsa_Calloc("Gnm51_03EarlyStartSendPosStart", 136, 1, 0x38uLL)) == 0))
  {
    Gnm02_21DeleteInstn(v14);
    goto LABEL_11;
  }
  v18 = v17;
  v17[6] = v16;
  v17[7] = 0;
  *((_DWORD *)v17 + 5) = 0;
  *((_DWORD *)v17 + 6) = *(unsigned __int8 *)(v15 + 4);
  v17[14] = 0;
  *((_BYTE *)v17 + 48) = 2;
  *((_BYTE *)v17 + 50) = 1;
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v19 = mach_continuous_time();
    v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ESTART:SessId,%u,StartTime,%u,StopTime,%u,PosOutput,%u,ConstRep,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNM", 73, "Gnm51_03EarlyStartSendPosStart", *((unsigned __int16 *)v18 + 6), v18[5], v18[6], *((unsigned __int8 *)v18 + 48), *((unsigned __int8 *)v18 + 50));
    LbsOsaTrace_WriteLog(0xBu, __str, v20, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v21 = mach_continuous_time();
    v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_START_POS_REQ =>GNCS Id,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "GNM", 73, "Gnm51_03EarlyStartSendPosStart", *((unsigned __int16 *)v18 + 6));
    LbsOsaTrace_WriteLog(0xBu, __str, v22, 4, 1);
  }
  AgpsSendFsmMsg(128, 130, 8519680, v18);
  Gnm02_24AbortAllNafSessions(8);
  return 0;
}

void Gnm51_07SendEarlyStartStartRsp(int a1)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  unsigned __int16 v5;
  char __str[1040];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = gnssOsa_Calloc("Gnm51_07SendEarlyStartStartRsp", 264, 1, 0x10uLL);
  if (v2)
  {
    v3 = v2;
    *((_DWORD *)v2 + 3) = a1;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v4 = mach_continuous_time();
      v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_EARLYSTART_START_RSP =>LSIM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm51_07SendEarlyStartStartRsp");
      LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
    }
    AgpsSendFsmMsg(128, 131, 8603908, v3);
  }
}

uint64_t Gnm51_02EarlyStartStopInd(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  int v4;
  uint64_t EarlyStartInstn;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  unsigned __int16 v11;
  int v12;
  char v13;
  unsigned __int16 v14;
  char __str[1040];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 3, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_EARLYSTART_STOP_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 77, "Gnm51_02EarlyStartStopInd");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 3, 1);
  }
  if (!a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v10 = mach_continuous_time();
      v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 69, "Gnm51_02EarlyStartStopInd", 517);
      LbsOsaTrace_WriteLog(0xBu, __str, v11, 0, 1);
    }
    v12 = 0;
    v13 = 0;
    goto LABEL_20;
  }
  v4 = *(unsigned __int8 *)(a1 + 12);
  EarlyStartInstn = Gnm02_39GetEarlyStartInstn();
  if (!EarlyStartInstn)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      goto LABEL_19;
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ESTART:Session not active\n");
LABEL_18:
    LbsOsaTrace_WriteLog(0xBu, __str, v14, 2, 1);
    goto LABEL_19;
  }
  v6 = (unsigned __int16 *)EarlyStartInstn;
  v7 = *(_QWORD *)(EarlyStartInstn + 8);
  if (!v7)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      goto LABEL_19;
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ESTART:InstnInfo\n");
    goto LABEL_18;
  }
  *(_BYTE *)(v7 + 5) = v4;
  if (!Gnm10_28StopPositioning((unsigned __int16 *)EarlyStartInstn))
  {
    Gnm02_21DeleteInstn(v6);
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ESTART:Stop Send Failure\n");
      goto LABEL_18;
    }
LABEL_19:
    v13 = v4 != 0;
    v12 = 4;
LABEL_20:
    Gnm51_08SendEarlyStartStopRsp(v12, v13);
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v8 = mach_continuous_time();
    v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ESTART:Session Stop sent\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm51_04EarlyStartSessionStop");
    LbsOsaTrace_WriteLog(0xBu, __str, v9, 4, 1);
  }
  return 0;
}

void Gnm51_08SendEarlyStartStopRsp(int a1, char a2)
{
  _DWORD *v4;
  _DWORD *v5;
  double v6;
  uint64_t v7;
  unsigned __int16 v8;
  char __str[1040];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = gnssOsa_Calloc("Gnm51_08SendEarlyStartStopRsp", 289, 1, 0x14uLL);
  if (v4)
  {
    v5 = v4;
    v4[3] = a1;
    *((_BYTE *)v4 + 16) = a2;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      v7 = 84;
      if (!*((_BYTE *)v5 + 16))
        v7 = 70;
      v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:LSIM_GNM_EARLYSTART_STOP_RSP =>LSIM Result,%u,ApiStatus,%c\n", (unint64_t)v6, "GNM", 73, "Gnm51_08SendEarlyStartStopRsp", v5[3], v7);
      LbsOsaTrace_WriteLog(0xBu, __str, v8, 4, 1);
    }
    AgpsSendFsmMsg(128, 131, 8604164, v5);
  }
}

void Gnm51_05StartPosResp(unsigned __int16 *a1, int a2)
{
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v5;
  unsigned __int16 v6;
  uint64_t v7;
  unsigned __int16 v8;
  char __str[1040];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v2 = mach_continuous_time();
      v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ESTART:Success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm51_05StartPosResp");
      LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
    }
    Gnm51_07SendEarlyStartStartRsp(1);
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v5 = mach_continuous_time();
      v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ESTART:Failure\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 87, "Gnm51_05StartPosResp");
      LbsOsaTrace_WriteLog(0xBu, __str, v6, 2, 1);
    }
    Gnm51_07SendEarlyStartStartRsp(0);
    if (a1)
    {
      Gnm02_21DeleteInstn(a1);
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v7 = mach_continuous_time();
      v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Instn\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNM", 87, "Gnm51_05StartPosResp", 513);
      LbsOsaTrace_WriteLog(0xBu, __str, v8, 2, 1);
    }
  }
}

BOOL Gnm51_06StopPosResp(uint64_t a1, int a2)
{
  uint64_t v3;
  unsigned __int16 v4;
  int v5;
  uint64_t v6;
  unsigned __int16 v7;
  char __str[1040];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v3 = mach_continuous_time();
      v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ESTART:Success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 73, "Gnm51_06StopPosResp");
      v5 = 1;
      LbsOsaTrace_WriteLog(0xBu, __str, v4, 4, 1);
    }
    else
    {
      v5 = 1;
    }
  }
  else
  {
    v5 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v6 = mach_continuous_time();
      v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ESTART:Failure\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm51_06StopPosResp");
      LbsOsaTrace_WriteLog(0xBu, __str, v7, 2, 1);
      v5 = 0;
    }
  }
  Gnm51_08SendEarlyStartStopRsp(v5, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 5));
  return Gnm02_21DeleteInstn((unsigned __int16 *)a1);
}

uint64_t decode_asn1_message(int a1, uint64_t a2, uint64_t a3, int a4, void *a5, _DWORD *a6)
{
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  _QWORD v15[4];

  v15[3] = *MEMORY[0x24BDAC8D0];
  v15[0] = a3;
  v15[1] = a4;
  v15[2] = a4;
  v14 = 0;
  BaseBufInitBufWithMemory((uint64_t)&v14, 0, (uint64_t)v15);
  v9 = v14;
  v15[0] = v14;
  (*(void (**)(uint64_t))(v14 + 920))(v14);
  *(_QWORD *)(v9 + 1056) = 2064;
  if (a1 == 1)
  {
    memset_s(a5, 0x528uLL, 0, 0x528uLL);
    v10 = (unsigned __int8 *)&yASN1_T_RASN_PDU;
LABEL_5:
    v11 = PERDecode((unsigned int *)v9, v10, (int *)a5);
    if (a6)
    {
      v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 840))(v9, 3);
LABEL_9:
      *a6 = v12;
      goto LABEL_10;
    }
    goto LABEL_10;
  }
  if (!a1)
  {
    memset_s(a5, 0x578uLL, 0, 0x578uLL);
    v10 = (unsigned __int8 *)&yASN1_T_LASN_LPP_Message;
    goto LABEL_5;
  }
  v11 = 15;
  if (a6)
  {
    v12 = 0;
    goto LABEL_9;
  }
LABEL_10:
  (*(void (**)(uint64_t))(v9 + 928))(v9);
  (*(void (**)(_QWORD *))(v9 + 816))(v15);
  return v11;
}

uint64_t encode_asn1_message(int a1, uint64_t a2, uint64_t *a3, _DWORD *a4, _DWORD *a5, int *a6)
{
  unsigned int *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int *v16;
  unsigned int *v17;
  int64x2_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (!a6)
    return 15;
  *a3 = 0;
  if (a5)
    *a5 = 0;
  if (a4)
    *a4 = 0;
  if (a1 != 1)
  {
    if (!a1)
    {
      v16 = 0;
      v17 = (unsigned int *)&asn1_encoded_data_small;
      v18 = vdupq_n_s64(0x1000uLL);
      BaseBufInitBufWithMemory((uint64_t)&v16, 0, (uint64_t)&v17);
      v10 = v16;
      v17 = v16;
      (*((void (**)(unsigned int *))v16 + 113))(v16);
      v11 = (unsigned __int8 *)&yASN1_T_LASN_LPP_Message;
      goto LABEL_11;
    }
    return 15;
  }
  v16 = 0;
  v17 = (unsigned int *)&asn1_encoded_data_small;
  v18 = vdupq_n_s64(0x1000uLL);
  BaseBufInitBufWithMemory((uint64_t)&v16, 0, (uint64_t)&v17);
  v10 = v16;
  v17 = v16;
  (*((void (**)(unsigned int *))v16 + 113))(v16);
  v11 = (unsigned __int8 *)&yASN1_T_RASN_PDU;
LABEL_11:
  v12 = PEREncode(v10, v11, a6);
  (*((void (**)(unsigned int *))v10 + 114))(v10);
  if (a5 && !(_DWORD)v12)
  {
    (*((void (**)(unsigned int *))v10 + 115))(v10);
    if (a4)
      *a4 = (*((uint64_t (**)(unsigned int *, uint64_t))v10 + 105))(v10, 1);
    v13 = (*((uint64_t (**)(unsigned int *, _QWORD))v10 + 105))(v10, 0);
    *a5 = v13;
    v14 = (*((uint64_t (**)(unsigned int *, _QWORD))v10 + 121))(v10, v13);
    if (*a5 && v14)
      *a3 = v14;
    (*((void (**)(unsigned int *))v10 + 116))(v10);
  }
  (*((void (**)(unsigned int **))v10 + 102))(&v17);
  return v12;
}

BOOL umeas(_BOOL8 result, unsigned int a2, double a3, double *a4, double *a5, double *a6, double *a7, double a8)
{
  uint64_t v10;
  const double *v11;
  unsigned int v12;
  double *v13;
  double *v14;
  double *v17;
  double *v18;
  double *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  double v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  double *v38;
  double v39;
  double v40;
  unsigned int v41;
  double v42;
  double v43;
  double v44;
  double *v45;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  double *v53;
  double v54;
  unsigned int v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  unsigned int v59;
  double v60;
  uint64_t v61;
  double *v62;
  unsigned int v63;
  double v64[2];

  v64[1] = *(double *)MEMORY[0x24BDAC8D0];
  v10 = result - 8;
  v11 = a4 - 1;
  v12 = a2 + 1;
  v63 = ((a2 + 1) * a2) >> 1;
  if (a2)
  {
    v13 = a6;
    v14 = a5;
    v17 = (double *)result;
    v61 = a2 + 1;
    v62 = a7;
    v18 = a6 - 1;
    v19 = a5 - 1;
    v20 = 1;
    while (1)
    {
      v64[0] = 0.0;
      result = R8_EQ(&v11[v20], v64);
      if (!result)
        break;
      if (++v20 > a2)
        goto LABEL_18;
    }
    if (!v20)
    {
LABEL_18:
      v12 = v61;
      a7 = v62;
      if (v61 <= 2)
        v31 = 2;
      else
        v31 = v61;
      v32 = v31 - 1;
      do
      {
        *v13++ = 0.0;
        *v14++ = 0.0;
        --v32;
      }
      while (v32);
      goto LABEL_23;
    }
    if (a2 < 2)
    {
      v21 = 0;
    }
    else
    {
      if (v20 <= 2)
        v21 = 2;
      else
        v21 = v20;
      if (v21 <= a2)
      {
        v22 = a2;
        v23 = v63;
        v24 = v63 - a2 + 1;
        v25 = 1 - a2;
        do
        {
          v26 = v11[v22];
          v27 = v22 - 1;
          if ((_DWORD)v22 != 1)
          {
            v28 = 0;
            do
            {
              v26 = v26 + *(double *)(v10 + 8 * (v24 + v28)) * a4[v28];
              v29 = (v28++ + 2);
            }
            while (v29 != v22);
          }
          v19[v22] = v26;
          v30 = *(double *)(v10 + 8 * v23);
          v23 -= v22;
          v18[v22] = v26 * v30;
          v24 += v25++;
          --v22;
        }
        while (v21 <= v27);
      }
    }
    if (v20 == 1)
    {
      v33 = *a4;
      *v14 = *a4;
      *v13 = v33 * *v17;
      v34 = v63;
    }
    else
    {
      v35 = v20;
      if (v20 <= 2uLL)
        v35 = 2;
      v36 = v35 - 1;
      v37 = v14;
      v38 = v13;
      v34 = v63;
      do
      {
        *v37++ = 0.0;
        *v38++ = 0.0;
        --v36;
      }
      while (v36);
    }
    if (a8 >= 0.0)
    {
      v39 = 0.0;
      v40 = a3;
      if (v20 <= a2)
      {
        v41 = v20;
        v40 = a3;
        do
        {
          v40 = v40 + v19[v41] * v18[v41];
          v39 = v39 + v11[v41] * *(double *)(v10 + 8 * (v34 + v41));
          ++v41;
        }
        while (v41 <= a2);
      }
      v42 = v11[v61] - v39;
      *(double *)(v10 + 8 * (v34 + v61)) = v42;
      if (a3 >= 0.0 && v42 * v42 > v40 * a8)
      {
        a3 = -v40;
        a7 = v62;
        goto LABEL_26;
      }
    }
    if (v20 == 1)
    {
      v43 = a3 + *v13 * *v14;
      if (fabs(v43) <= 6.0e-38)
        v44 = 0.0;
      else
        v44 = 1.0 / v43;
      *v17 = *v17 * (v44 * a3);
      v45 = v62;
      if (a2 == 1)
      {
LABEL_63:
        *v45 = v43;
        if (a8 > 0.0)
        {
          v57 = v44 * *(double *)(v10 + 8 * (v63 + v61));
          v19[v61] = v57;
          v58 = v61 - 1;
          v59 = v63 + 1;
          do
          {
            v60 = *v13++;
            *(double *)(v10 + 8 * v59) = *(double *)(v10 + 8 * v59) + v60 * v57;
            ++v59;
            --v58;
          }
          while (v58);
        }
        return result;
      }
      v46 = 2;
    }
    else
    {
      v46 = (((v20 - 1) * v20) >> 1) + 1;
      v44 = 0.0;
      v43 = a3;
      if (fabs(a3) > 6.0e-38)
        v44 = 1.0 / a3;
      v45 = v62;
    }
    if (v21 <= a2)
    {
      do
      {
        v47 = v43;
        v48 = v18[v21];
        v49 = v19[v21];
        v50 = v21;
        if (v21 >= 2)
        {
          v51 = v21 - 1;
          v52 = -(v49 * v44);
          v53 = v13;
          do
          {
            v54 = *(double *)(v10 + 8 * v46);
            *(double *)(v10 + 8 * v46) = v54 + v52 * *v53;
            *v53 = *v53 + v48 * v54;
            ++v53;
            ++v46;
            --v51;
          }
          while (v51);
          v49 = v19[v50];
        }
        v43 = v43 + v48 * v49;
        if (fabs(v43) > 6.0e-38)
        {
          v44 = 1.0 / v43;
          *(double *)(v10 + 8 * v46) = v47 * (1.0 / v43) * *(double *)(v10 + 8 * v46);
        }
        v64[0] = 0.0;
        result = R8_EQ((const double *)(v10 + 8 * v46), v64);
        if ((_DWORD)v50 && result)
        {
          v55 = v46;
          v56 = v50;
          do
          {
            *(_QWORD *)(v10 + 8 * v55--) = 0;
            --v56;
          }
          while (v56);
        }
        ++v46;
        v21 = v50 + 1;
      }
      while ((int)v50 + 1 <= a2);
    }
    goto LABEL_63;
  }
LABEL_23:
  if (fabs(a3) > 6.0e-38 && a8 >= 0.0)
    *(double *)(v10 + 8 * (v63 + v12)) = v11[v12] / a3;
LABEL_26:
  *a7 = a3;
  return result;
}

uint64_t GN_AGPS_Qual_Pos(_DWORD *a1, unsigned __int8 *a2)
{
  int v3;
  BOOL v4;
  unint64_t v5;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  if (a1)
  {
    v3 = *(_DWORD *)(*(_QWORD *)(p_api + 88) + 36);
    if (*a1)
      v4 = *a1 == v3;
    else
      v4 = 0;
    if (v4)
      return 0;
    *a1 = v3;
  }
  if (!a2)
  {
    EvCrt_v("GN_AGPS_Qual_Pos: Implementation error - the p_GAD_QoP structure is NULL which is not valid");
    return 0;
  }
  if (!*a2)
  {
    if (*((_DWORD *)a2 + 1))
    {
      v5 = 0xFFFFFFFFLL;
      goto LABEL_20;
    }
LABEL_15:
    v7 = (((pow(1.1, (double)*a2) + -1.0) * 10.0 + 0.5) * 0.671591672);
    if (v7 <= 4)
      v7 = 4;
    if (v7 >= 0x21)
      v5 = 33;
    else
      v5 = v7;
    goto LABEL_20;
  }
  if (((char)*a2 & 0x80000000) == 0)
    goto LABEL_15;
  v5 = 33;
LABEL_20:
  v8 = 100;
  if (((char)a2[1] & 0x80000000) == 0)
  {
    v9 = (((pow(1.025, (double)a2[1]) + -1.0) * 45.0 + 0.5) * 1.02669405);
    if (v9 <= 8)
      v9 = 8;
    if (v9 >= 0x64)
      v8 = 100;
    else
      v8 = v9;
  }
  return API_Qual_Pos("GN_AGPS", 1, v5, v8, *((unsigned int *)a2 + 1));
}

uint64_t Get_GPS_secs(unsigned int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  v1 = *(_QWORD *)(p_api + 48);
  if (!*(_BYTE *)(v1 + 5) || *(int *)v1 < 3)
    return 0;
  result = ((int)*(double *)(v1 + 24) + 604800 * *(__int16 *)(v1 + 16));
  if ((_DWORD)result && a1)
  {
    v4 = 604800 * ((a1 >> 19) & 0x3FF) + ((3 * (a1 & 0x7FFFF)) >> 1);
    if ((int)result - (int)v4 < 1)
      return v4;
    else
      return (v4 + 604800 * (((int)result - (int)v4 + 302400) / 604800));
  }
  return result;
}

uint64_t GN_AGPS_Set_Eph_El(unsigned __int8 *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _DWORD v12[2];
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int16 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[31];
  _QWORD v23[16];

  v23[15] = *MEMORY[0x24BDAC8D0];
  if (!Is_GN_API_Set_Allowed("GN_AGPS_Set_Eph_El"))
    return 0;
  v2 = *(_QWORD *)(p_api + 48);
  if (*(_BYTE *)(v2 + 5) && *(int *)v2 >= 3)
    v3 = (int)*(double *)(v2 + 24) + 604800 * *(__int16 *)(v2 + 16);
  else
    v3 = 0;
  v16 = *((_WORD *)a1 + 17);
  if (a1[68])
    v4 = 5;
  else
    v4 = 3;
  v13 = *(_QWORD *)(a1 + 1);
  v14 = *(_OWORD *)(a1 + 10);
  v15 = *(_QWORD *)(a1 + 26);
  v17 = *(_OWORD *)(a1 + 36);
  v18 = *(_OWORD *)(a1 + 52);
  v12[0] = v3;
  v12[1] = v4;
  if ((unsigned __int16)g_Enable_Event_Log >= 5u)
    EvLog_GPS_IntEph("GN_AGPS_Set_Eph_El: ", *a1, (uint64_t)v12);
  v5 = *a1;
  if (!Is_GPS_IntEph_Valid((uint64_t)"GN_AGPS_Set_Eph_El: ", v5, (uint64_t)v12))
    return 0;
  memset(v23, 0, 108);
  GPS_EphInt2Bin((uint64_t)v12, (uint64_t)v23);
  v20 = 0u;
  v21 = 0u;
  memset(v22, 0, sizeof(v22));
  v19 = v23[0];
  LOBYTE(v20) = v23[1];
  *(_WORD *)((char *)&v20 + 1) = *(_WORD *)((char *)&v23[1] + 1);
  v6 = 21;
  v7 = 11;
  v8 = 24;
  do
  {
    v9 = (char *)&v19 + v7;
    *v9 = *((_BYTE *)v23 + v8);
    *(_WORD *)(v9 + 1) = *(_WORD *)((char *)v23 + v8 + 1);
    --v6;
    v7 += 3;
    v8 += 4;
  }
  while (v6 > 1);
  v10 = API_Set_GPS_CBinEph("GN_AGPS_Set_Eph_El: ", v5, (unsigned int *)&v19);
  if ((_DWORD)v10)
    Debug_Log_GPS_Eph(1, v5, (uint64_t)&v19);
  return v10;
}

uint64_t GN_AGPS_Set_Alm(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned __int8 v5;
  int v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  __int16 v19;
  signed int v20;
  signed int v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  __int16 v31;
  signed int v32;
  signed int v33;
  uint64_t v34;

  result = Is_GN_API_Set_Allowed("GN_AGPS_Set_Alm");
  if (!(_DWORD)result)
    return result;
  if ((((_DWORD)a1 - 1) & 0xE0) != 0)
    v5 = 0;
  else
    v5 = a1 - 1;
  if ((a1 + 63) >= 0xAu)
    v6 = (a1 - 1) < 0x20;
  else
    v6 = 5;
  if ((a1 + 63) >= 0xAu)
    v7 = v5;
  else
    v7 = a1 + 63;
  if (!v6)
  {
    EvCrt_v("GN_AGPS_Set_Alm:  FAILED:  SV = %d, Out of range !", a1);
    return 0;
  }
  if (v6 != 1)
  {
    v8 = p_NA;
    v9 = v7;
LABEL_31:
    v22 = v8 + 36 * v9;
    v23 = *(_OWORD *)(a2 + 6);
    *(_QWORD *)(v22 + 5050) = *(_QWORD *)(a2 + 22);
    *(_OWORD *)(v22 + 5034) = v23;
    *(_DWORD *)(v22 + 5024) = Get_GPS_secs(*(_DWORD *)a2);
    *(_WORD *)(v22 + 5032) = *(_WORD *)(a2 + 4);
    if (*(_BYTE *)(a2 + 30))
      v24 = 5;
    else
      v24 = 3;
    *(_DWORD *)(v22 + 5028) = v24;
    Debug_Log_GPS_Alm(1, a1, v22 + 5024);
    if ((unsigned __int16)g_Enable_Event_Log >= 3u)
      EvLog_nd("GN_AGPS_Set_Alm: ", 2, v25, a1, *(unsigned int *)(p_NA + 36 * v9 + 5024));
    v26 = *(unsigned __int16 *)(a2 + 4);
    if (v26 <= 0x3FF)
    {
      if (v26 < 0x100)
      {
        v27 = *(__int16 *)(*(_QWORD *)(p_api + 72) + 1026);
        v28 = *(_QWORD *)(p_api + 48);
        if (*(_BYTE *)(v28 + 5)
          && *(int *)v28 >= 3
          && (v29 = (int)*(double *)(v28 + 24) + 604800 * *(__int16 *)(v28 + 16), v29 > 619315199))
        {
          v30 = v29 / 0x93A80u;
        }
        else
        {
          v30 = v27 + 128;
        }
        v31 = (v27 + (v27 >> 23)) & 0xFF00;
        v32 = v26 + v31;
        v33 = v30 - 128;
        if (v32 > v33)
          LOWORD(v33) = v26 + v31;
        LOWORD(v26) = v31 + v26 + ((v33 - v32 + 255) & 0xFF00);
      }
      else
      {
        LOWORD(v26) = Complete_WeekNo(v26);
      }
    }
    v34 = p_NA;
    *(_WORD *)(p_NA + 36 * v9 + 5032) = v26;
    result = 1;
    *(_BYTE *)(v34 + v9 + 89) = 1;
    return result;
  }
  v9 = v7;
  v10 = p_NA + 36 * v7;
  v11 = *(_QWORD *)(a2 + 22);
  *(_OWORD *)(v10 + 3162) = *(_OWORD *)(a2 + 6);
  *(_QWORD *)(v10 + 3178) = v11;
  *(_DWORD *)(v10 + 3152) = Get_GPS_secs(*(_DWORD *)a2);
  *(_WORD *)(v10 + 3160) = *(_WORD *)(a2 + 4);
  if (*(_BYTE *)(a2 + 30))
    v12 = 5;
  else
    v12 = 3;
  *(_DWORD *)(v10 + 3156) = v12;
  Debug_Log_GPS_Alm(1, a1, v10 + 3152);
  if ((unsigned __int16)g_Enable_Event_Log >= 3u)
    EvLog_nd("GN_AGPS_Set_Alm: ", 2, v13, a1, *(unsigned int *)(p_NA + 36 * v9 + 3152));
  v14 = *(unsigned __int16 *)(a2 + 4);
  if (v14 <= 0x3FF)
  {
    if (v14 < 0x100)
    {
      v15 = *(__int16 *)(*(_QWORD *)(p_api + 72) + 1026);
      v16 = *(_QWORD *)(p_api + 48);
      if (*(_BYTE *)(v16 + 5)
        && *(int *)v16 >= 3
        && (v17 = (int)*(double *)(v16 + 24) + 604800 * *(__int16 *)(v16 + 16), v17 > 619315199))
      {
        v18 = v17 / 0x93A80u;
      }
      else
      {
        v18 = v15 + 128;
      }
      v19 = (v15 + (v15 >> 23)) & 0xFF00;
      v20 = v14 + v19;
      v21 = v18 - 128;
      if (v20 > v21)
        LOWORD(v21) = v14 + v19;
      LOWORD(v14) = v19 + v14 + ((v21 - v20 + 255) & 0xFF00);
    }
    else
    {
      LOWORD(v14) = Complete_WeekNo(v14);
    }
  }
  v8 = p_NA;
  *(_WORD *)(p_NA + 36 * v9 + 3160) = v14;
  result = 1;
  *(_BYTE *)(v8 + v9 + 47) = 1;
  if ((a1 + 63) <= 9u)
    goto LABEL_31;
  return result;
}

uint64_t Complete_WeekNo(unsigned int a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  int v4;
  unsigned __int16 v5;

  if (a1 > 0x3FF)
  {
    v5 = a1;
  }
  else
  {
    v1 = *(_QWORD *)(p_api + 48);
    if (*(_BYTE *)(v1 + 5)
      && *(int *)v1 >= 3
      && (v2 = (int)*(double *)(v1 + 24) + 604800 * *(__int16 *)(v1 + 16), v2 > 619315199))
    {
      v3 = v2 / 0x93A80u;
    }
    else
    {
      v3 = *(__int16 *)(*(_QWORD *)(p_api + 72) + 1026) + 512;
    }
    v4 = v3 - 512;
    do
    {
      v5 = a1;
      a1 += 1024;
    }
    while (v4 > v5);
  }
  return (__int16)v5;
}

uint64_t GN_AGPS_Set_Ion(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  int GPS_secs;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  if (!Is_GN_API_Set_Allowed("GN_AGPS_Set_Ion"))
    return 0;
  v3 = *((char *)a1 + 4);
  v4 = *((char *)a1 + 5);
  v5 = *((_BYTE *)a1 + 6);
  if (!(v3 | v4))
  {
    if (!*((_BYTE *)a1 + 6))
    {
      if (!*((_BYTE *)a1 + 7)
        && !*((_BYTE *)a1 + 8)
        && !*((_BYTE *)a1 + 9)
        && !*((_BYTE *)a1 + 10)
        && !*((_BYTE *)a1 + 11))
      {
        v9 = "GN_AGPS_Set_Ion: Rejected: ALL ZERO";
        goto LABEL_14;
      }
      v5 = 0;
    }
    v4 = 0;
  }
  EvLog_nd("GN_AGPS_Set_Ion: ", 10, v2, *a1, v3, v4, v5, *((char *)a1 + 7), *((char *)a1 + 8), *((char *)a1 + 9), *((char *)a1 + 10), *((char *)a1 + 11), *((unsigned __int8 *)a1 + 12));
  GPS_secs = Get_GPS_secs(*a1);
  v7 = p_NA;
  *(_DWORD *)(p_NA + 808) = GPS_secs;
  *(_QWORD *)(v7 + 816) = *(_QWORD *)(a1 + 1);
  if (!*((_BYTE *)a1 + 12))
  {
    v9 = "GN_AGPS_Set_Ion: Rejected: Assisted source not allowed";
LABEL_14:
    EvLog(v9);
    return 0;
  }
  *(_DWORD *)(v7 + 812) = 5;
  v8 = 1;
  Debug_Log_GPS_Klob(1, v7 + 808);
  *(_BYTE *)(p_NA + 13) = 1;
  return v8;
}

uint64_t GN_AGPS_Set_UTC(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  int GPS_secs;
  uint64_t v15;
  char *v16;

  if (!Is_GN_API_Set_Allowed("GN_AGPS_Set_UTC"))
    return 0;
  v3 = *((unsigned __int8 *)a1 + 12);
  if (v3 < 0x94)
  {
    v4 = *((char *)a1 + 14);
    if (v4 >= 0x21)
    {
      EvCrt_v("GN_AGPS_Set_UTC: FAILED: dtLS = %d <0 or >32, Unrealistic value!");
      return 0;
    }
    v5 = *((unsigned __int8 *)a1 + 16);
    if (v5 >= 8)
    {
      EvCrt_v("GN_AGPS_Set_UTC: FAILED: DN = %d >7, Out of range!");
      return 0;
    }
    v6 = *((char *)a1 + 17);
    if (v6 >= 0x21)
    {
      EvCrt_v("GN_AGPS_Set_UTC: FAILED: dtLSF = %d <0 or >32, Unrealistic value!");
      return 0;
    }
    if ((int)v6 - (int)v4 >= 0)
      v7 = v6 - v4;
    else
      v7 = v4 - v6;
    if (v7 >= 2)
    {
      EvCrt_v("GN_AGPS_Set_UTC: FAILED: (dtLSF-dtLS) = %d <-1 or >+1, Unrealistic difference!");
      return 0;
    }
    if ((_DWORD)v6 != (_DWORD)v4)
    {
      v8 = *(_QWORD *)(p_api + 48);
      if (*(_BYTE *)(v8 + 5) && *(int *)v8 >= 3)
      {
        v9 = 1861606989 * ((int)*(double *)(v8 + 24) + 604800 * *(__int16 *)(v8 + 16));
        v10 = (v9 >> 50) + ((unint64_t)v9 >> 63);
      }
      else
      {
        v10 = 0;
      }
      if (Is_Future_Leap_Sec_Date_Not_Valid(v10, 1, *((unsigned __int8 *)a1 + 15), *((_BYTE *)a1 + 16)))
      {
        EvCrt_v("GN_AGPS_Set_UTC: FAILED: Invalid UTC Future Leap Second date %d  %d %d %d");
        return 0;
      }
    }
    v13 = a1[2];
    if (!*(_QWORD *)(a1 + 1))
    {
      if (!((v4 | v3) | v6)
        && !*((_BYTE *)a1 + 13)
        && !(*((unsigned __int8 *)a1 + 15) | v5))
      {
        v16 = "GN_AGPS_Set_UTC: Rejected: ALL ZERO";
LABEL_32:
        EvLog(v16);
        return 0;
      }
      v13 = 0;
    }
    EvLog_nd("GN_AGPS_Set_UTC: ", 10, v2, *a1, a1[1], v13, v3, *((unsigned __int8 *)a1 + 13), v4, *((unsigned __int8 *)a1 + 15), v5, v6, *((unsigned __int8 *)a1 + 18));
    GPS_secs = Get_GPS_secs(*a1);
    v15 = p_NA;
    *(_DWORD *)(p_NA + 824) = GPS_secs;
    *(_QWORD *)(v15 + 832) = *(_QWORD *)(a1 + 1);
    *(_DWORD *)(v15 + 840) = a1[3];
    *(_WORD *)(v15 + 844) = *((_WORD *)a1 + 8);
    if (*((_BYTE *)a1 + 18))
    {
      *(_DWORD *)(v15 + 828) = 5;
      v11 = 1;
      Debug_Log_GPS_UTC(1, v15 + 824);
      *(_BYTE *)(p_NA + 14) = 1;
      return v11;
    }
    v16 = "GN_AGPS_Set_UTC: Rejected: Assisted source not allowed";
    goto LABEL_32;
  }
  EvCrt_v("GN_AGPS_Set_UTC: FAILED: Tot = %d >=148, >604800s, Out of range!");
  return 0;
}

BOOL GN_AGPS_Get_UTC(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  __int16 v4;
  uint64_t v5;
  int v6;

  v1 = *(_QWORD *)(p_api + 56);
  v2 = *(_DWORD *)(v1 + 8444);
  if (v2)
  {
    v3 = *(_DWORD *)(v1 + 8440);
    v4 = *(_WORD *)(v1 + 8460);
    v5 = *(_QWORD *)(v1 + 8448);
    v6 = *(_DWORD *)(v1 + 8456);
    *(_DWORD *)a1 = (2 * (v3 % 604800) / 3) | ((v3 / 604800) << 19);
    *(_QWORD *)(a1 + 4) = v5;
    *(_DWORD *)(a1 + 12) = v6;
    *(_WORD *)(a1 + 16) = v4;
    *(_BYTE *)(a1 + 18) = v2 == 5;
  }
  return v2 != 0;
}

uint64_t GN_AGPS_Set_Ref_Time(unsigned int *a1)
{
  uint64_t result;
  unsigned int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;

  result = Is_GN_API_Set_Allowed("GN_AGPS_Set_Ref_Time");
  if ((_DWORD)result)
  {
    EvLog_v("GN_AGPS_Set_Ref_Time:  %u  %u  %d  %d", *a1, a1[1], *((unsigned __int16 *)a1 + 4), *((unsigned __int16 *)a1 + 5));
    v3 = *a1;
    v4 = p_NA;
    *(_DWORD *)(p_NA + 412) = *a1;
    v5 = Complete_WeekNo(*((unsigned __int16 *)a1 + 4));
    v6 = a1[1];
    *(_WORD *)(v4 + 424) = v5;
    *(double *)(v4 + 416) = (double)v6 * 0.001;
    v7 = *((unsigned __int16 *)a1 + 5);
    *(double *)(v4 + 432) = (double)v7 * 0.001;
    *(_BYTE *)(v4 + 2) = 1;
    if (v3)
    {
      if (v6 <= 0x240C83FF)
      {
        if (v5 > 1023)
        {
          if (v7)
          {
            if ((int)((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v3) < 180001)
            {
              API_Set_Ref_Time(*(_DWORD *)(p_NA + 412), *(double *)(p_NA + 416), *(_WORD *)(p_NA + 424), *(double *)(p_NA + 432));
              Debug_Log_AGPS_Ref_Time(a1);
              return 1;
            }
            *(_BYTE *)(p_NA + 2) = 0;
            EvCrt_v("GN_AGPS_Set_Ref_Time: FAILED: OS_Time_ms = %u, too old by %d ms");
          }
          else
          {
            *(_BYTE *)(v4 + 2) = 0;
            EvCrt_v("GN_AGPS_Set_Ref_Time: FAILED: RMS_ms = %d ==0, Out of range!");
          }
        }
        else
        {
          *(_BYTE *)(v4 + 2) = 0;
          EvCrt_v("GN_AGPS_Set_Ref_Time: FAILED: WeekNo = %d <1024, Out of range!");
        }
      }
      else
      {
        *(_BYTE *)(v4 + 2) = 0;
        EvCrt_v("GN_AGPS_Set_Ref_Time: FAILED: TOW_ms = %d >%d, Out of range!");
      }
    }
    else
    {
      *(_BYTE *)(v4 + 2) = 0;
      EvCrt_v("GN_AGPS_Set_Ref_Time: FAILED: OS_Time_ms = %u ==0, Out of range!");
    }
    return 0;
  }
  return result;
}

uint64_t GN_AGPS_Set_EFSP_Time(double *a1)
{
  uint64_t result;
  int v3;
  double v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  double v10;
  unsigned int v11;
  double v12;
  uint64_t v13;
  uint64_t v14;

  result = Is_GN_API_Set_Allowed("GN_AGPS_Set_EFSP_Time");
  if (!(_DWORD)result)
    return result;
  EvLog_v("GN_AGPS_Set_EFSP_Time:  %g  %d  %d  %d  %u  %d", *a1, *((unsigned __int16 *)a1 + 4), *((_DWORD *)a1 + 3), *((_DWORD *)a1 + 4), *((_DWORD *)a1 + 5), *((unsigned __int8 *)a1 + 24));
  v3 = *((_DWORD *)a1 + 5);
  if (!v3)
  {
    EvCrt_v("GN_AGPS_Set_EFSP_Time:  FAILED:  OS_Time_ms = %u  ==0, Out of range !");
    return 0;
  }
  if (!*((_DWORD *)a1 + 3))
  {
    EvCrt_v("GN_AGPS_Set_EFSP_Time:  FAILED:  Abs_RMS_us = %d  ==0, Out of range !");
    return 0;
  }
  if (!*((_DWORD *)a1 + 4))
  {
    EvCrt_v("GN_AGPS_Set_EFSP_Time:  FAILED:  Rel_RMS_ns = %d  ==0, Out of range !");
    return 0;
  }
  v4 = *a1;
  if (*a1 < 0.0 || v4 >= 604800.0)
  {
    EvCrt_v("GN_AGPS_Set_EFSP_Time:  FAILED:  TOW = %g  <0.0 or >=604800.0, Out of range !");
    return 0;
  }
  v5 = *((unsigned __int8 *)a1 + 24);
  v6 = p_NA;
  *(_BYTE *)(p_NA + 7) = v5;
  if (v5)
  {
    *(_BYTE *)(v6 + 6) = *(_BYTE *)(v6 + 5);
    *(_DWORD *)(v6 + 556) = *(_DWORD *)(v6 + 552);
    *(_QWORD *)(v6 + 504) = *(_QWORD *)(v6 + 496);
    *(_WORD *)(v6 + 514) = *(_WORD *)(v6 + 512);
    *(_QWORD *)(v6 + 528) = *(_QWORD *)(v6 + 520);
    *(_QWORD *)(v6 + 544) = *(_QWORD *)(v6 + 536);
    v3 = *((_DWORD *)a1 + 5);
    v4 = *a1;
  }
  *(_DWORD *)(v6 + 552) = v3;
  *(double *)(v6 + 496) = v4;
  v7 = *((unsigned __int16 *)a1 + 4);
  if (v7 <= 0x3FF)
  {
    EvLog_v("GN_AGPS_Set_EFSP_Time:  WARNING:  WeekNo = %d  <1024", *((unsigned __int16 *)a1 + 4));
    v7 = *((unsigned __int16 *)a1 + 4);
    v6 = p_NA;
  }
  v8 = Complete_WeekNo(v7);
  *(_WORD *)(v6 + 512) = v8;
  v9 = *((_DWORD *)a1 + 3);
  v10 = (double)v9 * 0.000001;
  if (v9 == -1)
    v10 = 0.0;
  *(double *)(v6 + 520) = v10;
  v11 = *((_DWORD *)a1 + 4);
  v12 = (double)v11 * 0.000000001;
  if (v11 == -1)
    v12 = 0.0;
  *(double *)(v6 + 536) = v12;
  *(_BYTE *)(v6 + 5) = 1;
  if (v8 > 1023)
  {
    v13 = *(_QWORD *)(p_api + 48);
    if (!*(_BYTE *)(v13 + 5) || *(int *)v13 < 3 || !(604800 * *(__int16 *)(v13 + 16) + (int)*(double *)(v13 + 24)))
    {
      API_Set_Ref_Time(*(_DWORD *)(v6 + 552), *(double *)(v6 + 496), v8, 0.9);
      v14 = p_NA;
      *(_DWORD *)(p_NA + 412) = *(_DWORD *)(p_NA + 552);
      *(_WORD *)(v14 + 424) = *(_WORD *)(v14 + 512);
      *(_QWORD *)(v14 + 416) = *(_QWORD *)(v14 + 496);
      *(_QWORD *)(v14 + 432) = 0x3FECCCCCCCCCCCCDLL;
      *(_BYTE *)(v14 + 2) = 1;
    }
    Debug_Log_AGPS_EFSP_Time(a1);
    return 1;
  }
  else
  {
    result = 0;
    *(_BYTE *)(v6 + 5) = 0;
  }
  return result;
}

uint64_t GN_AGPS_Set_TOW_Assist(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;

  if (!Is_GN_API_Set_Allowed("GN_AGPS_Set_TOW_Assist"))
    return 0;
  EvLog_nd("GN_AGPS_Set_TOW_Assist: ", 2, v2, *a1, *((unsigned __int8 *)a1 + 4));
  if ((unsigned __int16)g_Enable_Event_Log >= 4u && *((_BYTE *)a1 + 4))
  {
    v4 = 0;
    v5 = (unsigned __int8 *)a1 + 11;
    do
    {
      v6 = *(v5 - 5);
      v7 = *(v5 - 4);
      v8 = *(unsigned __int16 *)(v5 - 3);
      v9 = *(v5 - 1);
      v10 = *v5;
      v5 += 6;
      EvLog_nd("GN_AGPS_TOW_Assist: ", 6, v3, v4++, v6, v7, v8, v9, v10);
    }
    while (v4 < *((unsigned __int8 *)a1 + 4));
  }
  if (*a1 >= 0x240C8400)
  {
    EvCrt_v("GN_AGPS_Set_TOW_Assist: FAILED: TOW_ms = %d >=604800000, Out of range!");
    return 0;
  }
  v11 = *((unsigned __int8 *)a1 + 4);
  if (!*((_BYTE *)a1 + 4) || v11 >= 0x19 && (_DWORD)v11 != 32)
  {
    EvCrt_v("GN_AGPS_Set_TOW_Assist: FAILED: Num_TOWA = %d ==0 or >24, Out of range!");
    return 0;
  }
  v14 = 0;
  v15 = (unsigned __int8 *)a1 + 11;
  do
  {
    if (*(v15 - 5) - 33 <= 0xFFFFFFDF)
    {
      EvCrt_v("GN_AGPS_Set_TOW_Assist: FAILED: SatID[%d] = %d ==0 or >32, Out of range!");
      return 0;
    }
    if (*(v15 - 4) >= 4u)
    {
      EvCrt_v("GN_AGPS_Set_TOW_Assist: FAILED: TLM_Reserved[%d] = %d >3, Out of range!");
      return 0;
    }
    if (*(unsigned __int16 *)(v15 - 3) >= 0x4000u)
    {
      EvCrt_v("GN_AGPS_Set_TOW_Assist: FAILED: TLM_Word[%d] = %d >16383, Out of range!");
      return 0;
    }
    if (*(v15 - 1) >= 2u)
    {
      EvCrt_v("GN_AGPS_Set_TOW_Assist: FAILED: Anti_Spoof_flag[%d] = %d >1, Out of range!");
      return 0;
    }
    if (*v15 >= 2u)
    {
      EvCrt_v("GN_AGPS_Set_TOW_Assist: FAILED: Alert_flag[%d] = %d >1, Out of range!");
      return 0;
    }
    v15 += 6;
    ++v14;
  }
  while (v11 != v14);
  v16 = p_NA;
  *(_DWORD *)(p_NA + 19020) = *a1;
  *(_OWORD *)(v16 + 19024) = 0u;
  *(_OWORD *)(v16 + 19040) = 0u;
  *(_OWORD *)(v16 + 19056) = 0u;
  *(_OWORD *)(v16 + 19072) = 0u;
  *(_OWORD *)(v16 + 19088) = 0u;
  *(_OWORD *)(v16 + 19104) = 0u;
  *(_OWORD *)(v16 + 19120) = 0u;
  *(_OWORD *)(v16 + 19136) = 0u;
  v17 = *((unsigned __int8 *)a1 + 4);
  if (*((_BYTE *)a1 + 4))
  {
    v18 = (unsigned __int8 *)a1 + 11;
    do
    {
      *(_DWORD *)(v16 + 4 * *(v18 - 5) + 19020) = DW_Parity_Encode((*(unsigned __int16 *)(v18 - 3) << 8) | (*(v18 - 4) << 6) | 0x22C00000u, 0) & 0x3FFFFF | (*v18 << 23) | (*(v18 - 1) << 22);
      v18 += 6;
      --v17;
    }
    while (v17);
  }
  v12 = 1;
  *(_BYTE *)(v16 + 298) = 1;
  Debug_Log_AGPS_TOW_Assist((uint64_t)a1);
  return v12;
}

uint64_t GN_AGPS_Set_Ref_Pos(uint64_t a1)
{
  uint64_t result;
  double v3;
  double v4;
  int v5;
  double v6;
  unsigned int v7;
  unsigned int v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  long double v15;
  long double v16;
  double v17;
  long double v18;
  double v19;
  int v20;
  double v21;
  double v22;
  double v23;
  signed int v24;
  BOOL v25;
  int v26;
  int v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  int v39;
  unint64_t v40;
  int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  double v53[2];

  v53[1] = *(double *)MEMORY[0x24BDAC8D0];
  result = Is_GN_API_Set_Allowed("GN_AGPS_Set_Ref_Pos");
  if (!(_DWORD)result)
    return result;
  EvLog_v("GN_AGPS_Set_Ref_Pos: %u LL %g %g Sigma %d %d %d Ht %d %g %d C %d  S %d 0x%X", *(_DWORD *)a1, *(double *)(a1 + 8), *(double *)(a1 + 16), (int)*(double *)(a1 + 24), (int)*(double *)(a1 + 32), *(__int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 42), *(double *)(a1 + 48), (int)*(double *)(a1 + 56), *(_DWORD *)(a1 + 64), *(_DWORD *)(a1 + 68), *(_QWORD *)(a1 + 72));
  v3 = *(double *)(a1 + 8);
  if (v3 < -90.0 || v3 > 90.0)
  {
    EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: Latitude = %g <-90.0 or >90.0, Out of range!");
    return 0;
  }
  v4 = *(double *)(a1 + 16);
  if (v4 < -180.0 || v4 > 360.0)
  {
    EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: Longitude = %g <-180.0 or >360.0, Out of range!");
    return 0;
  }
  v53[0] = 0.0;
  if (R8_EQ((const double *)(a1 + 24), v53))
  {
    EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: RMS_SMaj = %g ==0, Out of range!");
    return 0;
  }
  v53[0] = 0.0;
  if (R8_EQ((const double *)(a1 + 32), v53))
  {
    EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: RMS_SMin = %g ==0, Out of range!");
    return 0;
  }
  if ((unsigned __int16)(*(_WORD *)(a1 + 40) - 361) <= 0xFDE2u)
  {
    EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: RMS_SMajBrg = %d <-180 or >+360, Out of range!");
    return 0;
  }
  v5 = *(unsigned __int8 *)(a1 + 42);
  if (*(_BYTE *)(a1 + 42))
  {
    v6 = *(double *)(a1 + 48);
    if (v6 < -500.0 || v6 > 6000.0)
    {
      EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: Height = %g <%d or >%d, Out of range!");
      return 0;
    }
    if (*(double *)(a1 + 56) <= 0.0)
    {
      EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: RMS_Height = %g <=0, Invalid value!");
      return 0;
    }
  }
  v7 = *(_DWORD *)(a1 + 64);
  if (v7 >= 5)
  {
    EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: Trust = %d <GN_AGPS_TRUST_UNKNOWN or >GN_AGPS_TRUST_HIGH, Out of range!");
    return 0;
  }
  v8 = *(_DWORD *)(a1 + 68);
  if (v8 >= 9)
  {
    EvCrt_v("GN_AGPS_Set_Ref_Pos: FAILED: Source = %d <GN_AGPS_SRC_UNKNOWN or >GN_AGPS_SRC_EXT, Out of range!");
    return 0;
  }
  v9 = v3 * 0.0174532925;
  v10 = v4 * 0.0174532925;
  v11 = *(double *)(a1 + 24);
  v12 = v11 * v11;
  v13 = p_NA;
  LODWORD(v14) = *(_DWORD *)a1;
  if (!*(_BYTE *)(p_NA + 10))
    goto LABEL_50;
  v15 = *(double *)(p_NA + 616);
  v16 = (v9 - v15) * 6378137.0;
  v17 = (v10 - *(double *)(p_NA + 624)) * 6378137.0;
  v18 = cos(v15);
  v19 = v18 * v17 * (v18 * v17) + v16 * v16;
  v20 = v14 - *(_DWORD *)(v13 + 608);
  v21 = *(double *)(v13 + 664);
  v22 = v21 + (double)v20 * 0.015 * ((double)v20 * 0.015);
  v23 = (v12 + v22) * 9.0;
  if (v7 <= 2)
  {
    v24 = *(_DWORD *)(v13 + 700);
    if ((int)v7 < v24)
    {
      EvCrt_v("GN_AGPS_Set_Ref_Pos: Ignored: Trust %d worse than existing, %d dAge %d dPos %f Sig %f %f %f", v7, v24, v20, sqrt(v19), v11, sqrt(v21), sqrt(v22));
      v25 = v19 < 160000.0 && v19 < v23;
      if (!v25 || *(int *)(a1 + 64) <= 1 || !*(_BYTE *)(a1 + 42))
        goto LABEL_64;
      goto LABEL_41;
    }
  }
  if (v12 <= v22)
  {
LABEL_50:
    *(_BYTE *)(v13 + 10) = 1;
    if (!(_DWORD)v14)
    {
      v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      v13 = p_NA;
    }
    *(_DWORD *)(v13 + 608) = v14;
    *(double *)(v13 + 616) = v9;
    *(double *)(v13 + 624) = v10;
    *(double *)(v13 + 640) = v12;
    v37 = *(double *)(a1 + 32) * *(double *)(a1 + 32);
    *(double *)(v13 + 648) = v37;
    v38 = (double)*(__int16 *)(a1 + 40) * 0.0174532925;
    *(double *)(v13 + 656) = v38;
    *(double *)(v13 + 664) = v12;
    *(double *)(v13 + 672) = v37;
    *(double *)(v13 + 680) = v38;
    if (*(_BYTE *)(a1 + 42))
    {
      *(_BYTE *)(v13 + 11) = 1;
      *(_QWORD *)(v13 + 632) = *(_QWORD *)(a1 + 48);
      *(double *)(v13 + 688) = *(double *)(a1 + 56) * *(double *)(a1 + 56);
    }
    v39 = *(_DWORD *)(a1 + 64);
    if (!**((_DWORD **)&xmmword_254011288 + 1))
    {
      v40 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      v41 = v40 - *(_DWORD *)a1;
      v13 = p_NA;
      *(_DWORD *)(p_NA + 608) = v40;
      *(float64x2_t *)(v13 + 640) = vaddq_f64(*(float64x2_t *)(v13 + 640), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v41 * 0.015 * ((double)v41 * 0.015)), 0));
      *(double *)(v13 + 688) = (double)v41 * 0.0005 * ((double)v41 * 0.0005) + *(double *)(v13 + 688);
      v42 = v41 >= 0 ? v41 : -v41;
      if (v42 >= 0x249F1 && v39 >= 2)
      {
        EvCrt_v("GN_AGPS_Set_Ref_Pos: Very old Reference Position demoted to Very Low Trust, Age_ms %d", v41);
        v13 = p_NA;
        v39 = 1;
      }
    }
    *(_DWORD *)(v13 + 696) = v39;
    *(_DWORD *)(v13 + 700) = v39;
    v43 = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(v13 + 704) = v43;
    *(_QWORD *)(v13 + 712) = *(_QWORD *)(a1 + 72);
    if (v43 == 7)
      *(_BYTE *)(v13 + 720) = 0;
    else
      *(_BYTE *)(v13 + 720) = 2;
    goto LABEL_64;
  }
  if (v19 >= v23)
  {
    if ((v8 == 4 || v8 == 2) && *(_DWORD *)(v13 + 704) == 7)
    {
      EvCrt_v("GN_AGPS_Set_Ref_Pos: E911 Ref Pos replacing inconsistent OS Ref Pos, dAge %d dPos %f Sig %f %f %f", v20, sqrt(v19), v11, sqrt(v21), sqrt(v22));
      v13 = p_NA;
      LODWORD(v14) = *(_DWORD *)a1;
    }
    goto LABEL_50;
  }
  EvCrt_v("GN_AGPS_Set_Ref_Pos: Ignored: Worse but consistent, dAge %d dPos %f Sig %f %f %f", v20, sqrt(v19), v11, sqrt(v21), sqrt(v22));
  if (!v5 || v19 >= 160000.0)
    goto LABEL_64;
LABEL_41:
  if (!*(_BYTE *)(p_NA + 11))
    goto LABEL_73;
  v26 = *(_DWORD *)(a1 + 68);
  if (v26 != 7)
    goto LABEL_65;
  v27 = *(_DWORD *)a1 - *(_DWORD *)(p_NA + 608);
  v28 = *(double *)(p_NA + 688);
  v29 = v28 + (double)v27 * 0.0005 * ((double)v27 * 0.0005);
  v30 = *(double *)(a1 + 56);
  if (v30 * v30 <= v29)
    goto LABEL_72;
  v31 = *(double *)(a1 + 48) - *(double *)(p_NA + 632);
  v32 = v31 * v31;
  v33 = (v30 * v30 + v29) * 9.0;
  v34 = sqrt(v32);
  v35 = sqrt(v28);
  v36 = sqrt(v29);
  if (v32 >= v33)
  {
    EvCrt_v("GN_AGPS_Set_Ref_Pos: New Altitude replacing inconsistent Prev Altitude, dAge %d dAlt %f Sig %f %f %f", v27, v34, v30, v35, v36);
    if (*(_BYTE *)(p_NA + 11))
    {
LABEL_72:
      EvCrt_v("GN_AGPS_Set_Ref_Pos: New Altitude replacing previous one, PrevAlt %f Sig %f CurrentAlt %f Sig %f");
LABEL_74:
      v52 = p_NA;
      *(_BYTE *)(p_NA + 11) = 1;
      *(_QWORD *)(v52 + 632) = *(_QWORD *)(a1 + 48);
      *(double *)(v52 + 688) = *(double *)(a1 + 56) * *(double *)(a1 + 56);
      goto LABEL_64;
    }
LABEL_73:
    EvCrt_v("GN_AGPS_Set_Ref_Pos: New Altitude replacing previously missing one, CurrentAlt %f Sig %f");
    goto LABEL_74;
  }
  EvCrt_v("GN_AGPS_Set_Ref_Pos: New Altitude Ignored: Worse but consistent, dAge %d dAlt %f Sig %f %f %f", v27, v34, v30, v35, v36);
LABEL_64:
  v26 = *(_DWORD *)(a1 + 68);
LABEL_65:
  if (v26 == 4 || v26 == 2)
  {
    v44 = p_NA;
    *(_OWORD *)(p_NA + 728) = *(_OWORD *)a1;
    v45 = *(_OWORD *)(a1 + 16);
    v46 = *(_OWORD *)(a1 + 32);
    v47 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v44 + 776) = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v44 + 792) = v47;
    *(_OWORD *)(v44 + 744) = v45;
    *(_OWORD *)(v44 + 760) = v46;
    *(_BYTE *)(v44 + 12) = 1;
    v26 = *(_DWORD *)(a1 + 68);
  }
  if (v26 == 7)
  {
    v48 = p_NA;
    *(_BYTE *)(p_NA + 372) = *(_BYTE *)(p_NA + 371);
    *(_DWORD *)(v48 + 368) = *(_DWORD *)(v48 + 367);
    memmove((void *)(v48 + 21080), (const void *)(v48 + 21000), 0x190uLL);
    *(_BYTE *)(v48 + 367) = 1;
    ++*(_WORD *)(v48 + 376);
    *(_OWORD *)(v48 + 21000) = *(_OWORD *)a1;
    v49 = *(_OWORD *)(a1 + 64);
    v51 = *(_OWORD *)(a1 + 16);
    v50 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v48 + 21048) = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v48 + 21064) = v49;
    *(_OWORD *)(v48 + 21016) = v51;
    *(_OWORD *)(v48 + 21032) = v50;
  }
  Debug_Log_AGPS_Ref_Pos(a1);
  return 1;
}

uint64_t GN_AGPS_Set_GAD_Ref_Pos(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  double v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  char v16;
  double v17;
  double v18;
  double v19;
  unsigned int v20;
  __int16 v21;
  double v22;
  unsigned int v23;
  unsigned int v24;
  double v25;
  double v26;
  double v27;
  char v28;
  double v29;
  double v30;
  double v31;
  double v32;
  _OWORD v33[3];
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  result = Is_GN_API_Set_Allowed("GN_AGPS_Set_GAD_Ref_Pos");
  if (!(_DWORD)result)
    return result;
  EvLog_nd("GN_AGPS_Set_GAD_Ref_Pos: ", 19, *((unsigned __int8 *)a1 + 31), *a1, *((unsigned __int8 *)a1 + 4), a1[2], a1[3], *((char *)a1 + 16), *((unsigned __int16 *)a1 + 9), *((unsigned __int8 *)a1 + 20), *((unsigned __int8 *)a1 + 21), *((unsigned __int8 *)a1 + 22), *((unsigned __int8 *)a1 + 23), *((unsigned __int8 *)a1 + 24), *((char *)a1 + 25), *((__int16 *)a1 + 13), *((__int16 *)a1 + 14), *((char *)a1 + 30), *((unsigned __int8 *)a1 + 31),
    *((unsigned __int8 *)a1 + 32),
    a2,
    a3);
  v34 = 0u;
  v35 = 0u;
  memset(v33, 0, sizeof(v33));
  LODWORD(v7) = *a1;
  if (!*a1)
    v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  LODWORD(v33[0]) = v7;
  if (!*((_BYTE *)a1 + 20))
  {
    *((_BYTE *)a1 + 20) = -1;
    EvLog("GN_AGPS_Set_GAD_Ref_Pos: WARNING: suncertaintySemiMajor = 0, Treated as not set!");
  }
  if (!*((_BYTE *)a1 + 21))
  {
    *((_BYTE *)a1 + 21) = -1;
    EvLog("GN_AGPS_Set_GAD_Ref_Pos: WARNING: suncertaintySemiMinor = 0, Treated as not set!");
  }
  if (!*((_BYTE *)a1 + 24) || (*((_BYTE *)a1 + 24) + 1) >= 0x66u)
  {
    *((_BYTE *)a1 + 24) = -1;
    EvLog("GN_AGPS_Set_GAD_Ref_Pos: WARNING: confidence = 0 or > 100, Treated as not set!");
  }
  if (!*((_BYTE *)a1 + 23))
  {
    *((_BYTE *)a1 + 23) = -1;
    EvLog("GN_AGPS_Set_GAD_Ref_Pos: WARNING: uncertaintyAltitude = 0, Treated as not set!");
    if (!*((_WORD *)a1 + 9))
    {
      *((_BYTE *)a1 + 16) = -1;
      EvLog("GN_AGPS_Set_GAD_Ref_Pos: WARNING: altitude = 0 when uncertaintyAltitude = 0, Treated as not set!");
    }
  }
  v8 = *((unsigned __int8 *)a1 + 20);
  v9 = *((unsigned __int8 *)a1 + 21);
  if (v8 < v9)
  {
    EvCrt_v("GN_AGPS_Set_GAD_Ref_Pos: FAILED: semi-major < semi-minor %d %d");
    return 0;
  }
  v10 = a1[2];
  if (v10 >= 0x800000)
  {
    EvCrt_v("GN_AGPS_Set_GAD_Ref_Pos: FAILED: latitude = %d >8388607, Out of range!");
    return 0;
  }
  v11 = (double)v10 * 0.0000107288373;
  *((double *)v33 + 1) = v11;
  v12 = *((unsigned __int8 *)a1 + 4);
  if (v12 >= 2)
  {
    EvCrt_v("GN_AGPS_Set_GAD_Ref_Pos: FAILED: latitudeSign = %d >1, Out of range!");
    return 0;
  }
  if (v12 == 1)
    *((double *)v33 + 1) = -v11;
  v13 = a1[3];
  if ((v13 - 0x800000) >> 24 != 255)
  {
    EvCrt_v("GN_AGPS_Set_GAD_Ref_Pos: FAILED: longitude = %d <-8388608 or >8388607, Out of range!");
    return 0;
  }
  *(double *)&v33[1] = (double)v13 * 0.0000214576721;
  v14 = *((unsigned __int16 *)a1 + 9);
  if ((v14 & 0x8000) != 0)
  {
    EvCrt_v("GN_AGPS_Set_GAD_Ref_Pos: FAILED: altitude = %d >32767, Out of range!");
    return 0;
  }
  v15 = *((unsigned __int8 *)a1 + 16);
  if (v15 == 255)
  {
    BYTE10(v33[2]) = 0;
    v16 = 1;
    v17 = 0.0;
  }
  else if (v15 == 1)
  {
    v16 = 0;
    BYTE10(v33[2]) = 1;
    v17 = (double)-v14;
  }
  else
  {
    if (*((_BYTE *)a1 + 16))
    {
      EvCrt_v("GN_AGPS_Set_GAD_Ref_Pos: FAILED: altitudeDirection = %d <-1 or >1, Out of range!");
      return 0;
    }
    v16 = 0;
    BYTE10(v33[2]) = 1;
    v17 = (double)v14;
  }
  *(double *)&v34 = v17;
  if ((v8 & 0x80) != 0)
  {
    if (v8 != 255)
    {
      EvCrt_v("GN_AGPS_Set_GAD_Ref_Pos: FAILED: uncertaintySemiMajor = %d >127 && !=255, Out of range!");
      return 0;
    }
    EvCrt_v("GN_AGPS_Set_GAD_Ref_Pos: WARNING: Unknown uncertaintySemiMajor replaced with default = %f m", 15000.0);
    v9 = *((unsigned __int8 *)a1 + 21);
    v18 = 15000.0;
    if ((v9 & 0x80) == 0)
      goto LABEL_34;
LABEL_51:
    v19 = v18;
    if (v9 != 255)
    {
      EvCrt_v("GN_AGPS_Set_GAD_Ref_Pos: FAILED: uncertaintySemiMinor = %d >127 && !=255, Out of range!");
      return 0;
    }
    goto LABEL_35;
  }
  v18 = (pow(1.1, (double)v8) + -1.0) * 10.0;
  if ((v9 & 0x80) != 0)
    goto LABEL_51;
LABEL_34:
  v19 = (pow(1.1, (double)v9) + -1.0) * 10.0;
LABEL_35:
  v20 = *((unsigned __int8 *)a1 + 22);
  if (v20 > 0x59)
  {
    if (v20 != 255)
    {
      EvCrt_v("GN_AGPS_Set_GAD_Ref_Pos: FAILED: orientationMajorAxis = %d >=90 && !=255, Out of range!");
      return 0;
    }
    v21 = 0;
  }
  else
  {
    v21 = 2 * v20;
  }
  WORD4(v33[2]) = v21;
  v22 = 0.0;
  if ((v16 & 1) == 0)
  {
    v23 = *((unsigned __int8 *)a1 + 23);
    if (*((char *)a1 + 23) < 0)
    {
      if (v23 != 255)
      {
        EvCrt_v("GN_AGPS_Set_GAD_Ref_Pos: FAILED: uncertaintyAltitude = %d >127 && !=255, Out of range!");
        return 0;
      }
      v22 = dbl_21E7F9640[*(_DWORD *)(*((_QWORD *)&xmmword_254011288 + 1) + 52) < 5u];
      EvCrt_v("GN_AGPS_Set_GAD_Ref_Pos: WARNING: Unknown uncertaintyAltitude replaced with default = %f m", v22);
    }
    else
    {
      v22 = (pow(1.025, (double)v23) + -1.0) * 45.0;
    }
  }
  if ((int)a2 >= 5)
  {
    EvCrt_v("GN_AGPS_Set_GAD_Ref_Pos: FAILED: Trust = %d > GN_AGPS_TRUST_HIGH, Out of range!");
    return 0;
  }
  if ((int)a3 >= 9)
  {
    EvCrt_v("GN_AGPS_Set_GAD_Ref_Pos: FAILED: Source = %d > GN_AGPS_SRC_EXT, Out of range!");
    return 0;
  }
  v35 = __PAIR64__(a3, a2);
  v24 = *((unsigned __int8 *)a1 + 24);
  if (v24 > 0x64)
    v24 = 39;
  if (v19 < 500.0 || v24 < 0x33)
  {
    v28 = v24 - 97;
    if ((v24 - 97) >= 4u)
    {
      if (v24 <= 0x5E)
      {
        if (v24 <= 0x59)
        {
          if (v24 <= 0x54)
          {
            if (v24 <= 0x4F)
            {
              if (v24 <= 0x4A)
              {
                if (v24 <= 0x45)
                {
                  if (v24 <= 0x42)
                  {
                    if (v24 <= 0x40)
                    {
                      if (v24 <= 0x3B)
                      {
                        if (v24 <= 0x31)
                        {
                          if (v24 <= 0x26)
                          {
                            if (v24 <= 0x1D)
                            {
                              if (v24 <= 0x13)
                              {
                                v26 = dbl_21E7F9650[v24 > 9];
                                v27 = 2.17864924;
                                if (v24 <= 9)
                                  v27 = 3.125;
                              }
                              else
                              {
                                v27 = 1.49700599;
                                v26 = 3.95256917;
                              }
                            }
                            else
                            {
                              v27 = 1.18343195;
                              v26 = 2.5974026;
                            }
                          }
                          else
                          {
                            v27 = 1.0;
                            v26 = 1.90839695;
                          }
                        }
                        else
                        {
                          v27 = 0.849617672;
                          v26 = 1.48367953;
                        }
                      }
                      else
                      {
                        v27 = 0.738552437;
                        v26 = 1.18764846;
                      }
                    }
                    else
                    {
                      v27 = 0.690131125;
                      v26 = 1.06951872;
                    }
                  }
                  else
                  {
                    v27 = 0.671591672;
                    v26 = 1.02669405;
                  }
                }
                else
                {
                  v27 = 0.644329897;
                  v26 = 0.965250965;
                }
              }
              else
              {
                v27 = 0.600600601;
                v26 = 0.869565217;
              }
            }
            else
            {
              v27 = 0.557413601;
              v26 = 0.780640125;
            }
          }
          else
          {
            v27 = 0.513347023;
            v26 = 0.694927033;
          }
        }
        else
        {
          v27 = 0.465983225;
          v26 = 0.607902736;
        }
      }
      else
      {
        v27 = 0.408496732;
        v26 = 0.510204082;
      }
    }
    else
    {
      v26 = dbl_21E7F96A0[v28];
      v27 = dbl_21E7F96C0[v28];
    }
  }
  else
  {
    if (v24 >= 0x5A)
      v24 = 90;
    v25 = 90.0 / (double)v24;
    v26 = v25 * 0.333333333;
    v27 = sqrt(v25) * 0.333333333;
  }
  v29 = v18 * v27;
  v30 = v19 * v27;
  *((double *)&v33[1] + 1) = v29;
  *(double *)&v33[2] = v30;
  v31 = v22 * v26;
  *((double *)&v34 + 1) = v31;
  if (a3 >= 7)
  {
    if ((a3 - 7) >= 2)
      EvCrt_Illegal_Default("GN_AGPS_Set_GAD_Ref_Pos", 0x9C9u);
  }
  else
  {
    v32 = 1000.0;
    if (v31 > 1000.0 || (v32 = 10.0, v31 < 10.0))
      *((double *)&v34 + 1) = v32;
    if (v30 < 500.0)
    {
      *(double *)&v33[2] = v29;
      if (v29 < 500.0)
        *(int64x2_t *)((char *)&v33[1] + 8) = vdupq_n_s64(0x407F400000000000uLL);
      WORD4(v33[2]) = 0;
    }
  }
  return GN_AGPS_Set_Ref_Pos((uint64_t)v33);
}

uint64_t GN_AGPS_Set_Acq_Ass(unsigned int *a1)
{
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  char *v36;
  int v37;
  unint64_t v38;
  int v39;
  char v40;
  char *v41;
  _BYTE *v42;
  int v43;
  __int16 v44;
  unsigned int v45;
  int v46;
  int v47;
  __int16 v48;
  char *v49;
  _BYTE *v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  int v55;
  unsigned __int8 v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char v76;
  uint64_t i;
  uint64_t v78;
  char v79;
  int v80;
  unsigned int v81;
  unsigned __int8 *v82;
  uint64_t v83;
  int v84;
  unsigned __int8 *v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  char *v89;
  uint64_t v90;
  int v91;
  int v92;
  char *v93;
  __int16 v94;
  __int16 v95;
  _DWORD *v96;
  char *v97;
  unsigned int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  unsigned __int8 *v104;
  unsigned __int16 v105;
  unsigned int v106;
  __int16 v107;
  unsigned int v108;
  int v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  __int128 v113;
  _DWORD v114[6];
  uint64_t v115;
  __int128 v116;
  _WORD v117[12];
  __int128 v118;
  _OWORD v119[13];
  uint64_t v120;
  uint64_t v121;

  v121 = *MEMORY[0x24BDAC8D0];
  if (!Is_GN_API_Set_Allowed("GN_AGPS_Set_Acq_Ass"))
    return 0;
  EvLog_nd("GN_AGPS_Set_Acq_Ass: ", 2, v2, *a1, *((unsigned __int8 *)a1 + 4));
  if ((unsigned __int16)g_Enable_Event_Log >= 4u && *((_BYTE *)a1 + 4))
  {
    v3 = 0;
    v4 = (unsigned __int8 *)a1 + 18;
    do
    {
      v5 = *(v4 - 12);
      v6 = *((__int16 *)v4 - 5);
      v7 = *(v4 - 8);
      v8 = *(v4 - 7);
      v9 = *((unsigned __int16 *)v4 - 3);
      v10 = *(v4 - 4);
      v11 = *(v4 - 3);
      v12 = *(v4 - 2);
      v13 = *(v4 - 1);
      v14 = *v4;
      v4 += 14;
      EvLog_v("GN_AGPS_AA_El: %2d %2d   %5d %5d %2d %d   %4d %2d %d %2d   %2d %d", v3++, v5, v6, 5 * v6 / 2, v7, v8, v9, v10, v11, v12, v13, v14);
    }
    while (v3 < *((unsigned __int8 *)a1 + 4));
  }
  if (*a1 > 0x240C83FF)
  {
    *(_BYTE *)(p_NA + 297) = 0;
    EvCrt_v("GN_AGPS_Set_Acq_Ass: FAILED: Ref_GPS_TOW = %d >=604800000, Out of range!");
    return 0;
  }
  if (*((unsigned __int8 *)a1 + 4) - 17 < 0xFFFFFFF0)
  {
    *(_BYTE *)(p_NA + 297) = 0;
    EvCrt_v("GN_AGPS_Set_Acq_Ass: FAILED: Num_AA = %d ==0 or >16, Out of range!");
    return 0;
  }
  v17 = 0;
  v18 = (unsigned __int8 *)a1 + 18;
  do
  {
    v19 = *(v18 - 12);
    if (v19 - 65 <= 0xFFFFFFBF)
    {
      *(_BYTE *)(p_NA + 297) = 0;
      EvCrt_v("GN_AGPS_Set_Acq_Ass: FAILED: Sat_ID[%d] = %d ==0 or >64, Out of range!");
      return 0;
    }
    if (v19 >= 0x21)
    {
      *(_BYTE *)(p_NA + 297) = 0;
      EvCrt_v("GN_AGPS_Set_Acq_Ass: WARNING: Sat_ID[%d] = %d >32, Modernized GPS, Ignored!", v17, v19);
    }
    if ((unsigned __int16)((unsigned __int16)(*((_WORD *)v18 - 5) - 2048) >> 12) <= 0xEu)
    {
      *(_BYTE *)(p_NA + 297) = 0;
      EvCrt_v("GN_AGPS_Set_Acq_Ass: FAILED: Doppler_0[%d] = %d <-2048 or >2047, Out of range!");
      return 0;
    }
    if (*(v18 - 8) >= 0x40u)
    {
      *(_BYTE *)(p_NA + 297) = 0;
      EvCrt_v("GN_AGPS_Set_Acq_Ass: FAILED: Doppler_1[%d] = %d >63, Out of range!");
      return 0;
    }
    if (*(v18 - 7) >= 5u)
    {
      *(_BYTE *)(p_NA + 297) = 0;
      EvCrt_v("GN_AGPS_Set_Acq_Ass: FAILED: Doppler_Unc[%d] = %d >4, Out of range!");
      return 0;
    }
    if (*((unsigned __int16 *)v18 - 3) >= 0x3FFu)
    {
      *(_BYTE *)(p_NA + 297) = 0;
      EvCrt_v("GN_AGPS_Set_Acq_Ass: FAILED: Code_Phase[%d] = %d >1022, Out of range!");
      return 0;
    }
    if (*(v18 - 4) >= 0x14u)
    {
      *(_BYTE *)(p_NA + 297) = 0;
      EvCrt_v("GN_AGPS_Set_Acq_Ass: FAILED: Int_Code_Phase[%d] = %d >19, Out of range!");
      return 0;
    }
    if (*(v18 - 3) >= 4u)
    {
      *(_BYTE *)(p_NA + 297) = 0;
      EvCrt_v("GN_AGPS_Set_Acq_Ass: FAILED: GPS_Bit_Num[%d] = %d >3, Out of range!");
      return 0;
    }
    if (*(v18 - 2) >= 0x10u)
    {
      *(_BYTE *)(p_NA + 297) = 0;
      EvCrt_v("GN_AGPS_Set_Acq_Ass: FAILED: Code_Window[%d] = %d >15, Out of range!");
      return 0;
    }
    if (*(v18 - 1) >= 0x20u)
    {
      *(_BYTE *)(p_NA + 297) = 0;
      EvCrt_v("GN_AGPS_Set_Acq_Ass: FAILED: Azimuth[%d] = %d >31, Out of range!");
      return 0;
    }
    if (*v18 >= 8u)
    {
      *(_BYTE *)(p_NA + 297) = 0;
      EvCrt_v("GN_AGPS_Set_Acq_Ass: FAILED: Elevation[%d] = %d >7, Out of range!");
      return 0;
    }
    ++v17;
    v18 += 14;
  }
  while (v17 < *((unsigned __int8 *)a1 + 4));
  v20 = *((_OWORD *)a1 + 13);
  v119[11] = *((_OWORD *)a1 + 12);
  v119[12] = v20;
  v120 = *((_QWORD *)a1 + 28);
  v21 = *((_OWORD *)a1 + 9);
  v119[7] = *((_OWORD *)a1 + 8);
  v119[8] = v21;
  v22 = *((_OWORD *)a1 + 11);
  v119[9] = *((_OWORD *)a1 + 10);
  v119[10] = v22;
  v23 = *((_OWORD *)a1 + 5);
  v119[3] = *((_OWORD *)a1 + 4);
  v119[4] = v23;
  v24 = *((_OWORD *)a1 + 7);
  v119[5] = *((_OWORD *)a1 + 6);
  v119[6] = v24;
  v25 = *((_OWORD *)a1 + 1);
  v118 = *(_OWORD *)a1;
  v119[0] = v25;
  v26 = *((_OWORD *)a1 + 3);
  v119[1] = *((_OWORD *)a1 + 2);
  v119[2] = v26;
  v27 = p_NA;
  LODWORD(v28) = v118;
  if (*(_BYTE *)(p_NA + 297))
  {
    v29 = v118 - *(_DWORD *)(p_NA + 17664);
    if (v29 <= 4999)
    {
      v110 = v118;
      LODWORD(v115) = 0;
      BYTE4(v115) = 0;
      v116 = 0u;
      memset(v117, 0, 21);
      LODWORD(v112) = 0;
      BYTE4(v112) = 0;
      v113 = 0u;
      memset(v114, 0, 21);
      EvLog_v("GN_AGPS_Set_Acq_Ass: %d records from only %d ms ago, merging.", *(unsigned __int8 *)(p_NA + 17672), v29);
      v31 = p_NA;
      if (*(_BYTE *)(p_NA + 17672))
      {
        v32 = 0;
        v33 = v118;
        v109 = v118 + 79;
        v34 = BYTE4(v118);
        do
        {
          if (*((unsigned __int8 *)&v119[-1] + 14 * v32 + 6) <= 0x20u)
          {
            v35 = v34 + 1;
            v36 = (char *)&v118 + 6;
            while (1)
            {
              v37 = *v36;
              v36 += 14;
              if (*(unsigned __int8 *)(v31 + 28 * v32 + 17678) == v37)
                break;
              if (!--v35)
              {
                LODWORD(v115) = *(_DWORD *)(v31 + 17664);
                BYTE4(v115) = 1;
                LODWORD(v116) = *(_DWORD *)(v31 + 28 * v32 + 17676);
                v38 = v31 + 28 * v32;
                WORD5(v116) = *(_WORD *)(v38 + 17686);
                HIDWORD(v116) = *(_DWORD *)(v38 + 17688);
                v117[1] = *(_WORD *)(v38 + 17692);
                *(_QWORD *)&v117[2] = *(_QWORD *)(v38 + 17696);
                LODWORD(v112) = v33;
                Comp_Cur_Acq_Aid((uint64_t)&v115, (uint64_t)&v112);
                v39 = v34++;
                v40 = BYTE2(v113);
                v41 = (char *)&v119[-1] + 14 * v39;
                v41[11] = 0;
                v42 = v41 + 11;
                *(v42 - 5) = v40;
                v43 = 42000 * SWORD6(v113);
                if (v43 < 0)
                  BYTE2(v43) = (v43 + 0xFFFF) >> 16;
                *(v42 - 1) = BYTE2(v43) + 42;
                if (SHIWORD(v113) >= 1)
                  v44 = HIWORD(v113) + 1;
                else
                  v44 = HIWORD(v113) - 1;
                HIWORD(v113) = v44;
                *(_WORD *)(v42 - 3) = ((unint64_t)(3435973838 * v44) >> 33)
                                    + ((unint64_t)(3435973838 * v44) >> 63);
                v45 = 4u;
                while (WORD5(v113) > Acq_Ass_Table_Doppler_Unc[v45])
                {
                  if (--v45 == -1)
                    goto LABEL_44;
                }
                *v42 = v45;
LABEL_44:
                v47 = v114[1];
                v46 = v114[2];
                v48 = 1023 * (v114[2] / 1023) - LOWORD(v114[2]) + 1023;
                v49 = (char *)&v119[-1] + 14 * v39;
                v49[16] = 0;
                v50 = v49 + 16;
                *((_WORD *)v50 - 2) = v48;
                v51 = ((int)(((unint64_t)(2145384445 * v46) >> 32) - v46) >> 9)
                    + ((((unint64_t)(2145384445 * v46) >> 32) - v46) >> 31);
                v33 = v110;
                v52 = 5
                    * ((((v51 + (_DWORD)v110 - 1500 * v47) & ~((int)(v51 + v110 - 1500 * v47) >> 31))
                      - (v51
                       + (_DWORD)v110
                       - 1500 * v47)
                      + ((int)(v51 + v110 - 1500 * v47) >> 31))
                     / 0x50
                     + ((v51 + v110 - 1500 * v47) >> 31));
                v53 = 1500 * v47;
                v54 = v51 + v110 + 16 * v52;
                v55 = v54 - v53;
                if (v54 - v53 >= 79)
                  v55 = 79;
                v56 = v53 - v54 - -80 * ((v109 + v51 + 16 * v52 - v53 - v55) / 0x50) + 80;
                *(v50 - 1) = v56 / 0x14u;
                *(v50 - 2) = v56 % 0x14u;
                v57 = 1;
                while (HIWORD(v114[0]) > Acq_Ass_Table_Code_Window[v57])
                {
                  if (++v57 == 16)
                    goto LABEL_51;
                }
                *v50 = v57;
LABEL_51:
                v31 = p_NA;
                v58 = p_NA + 28 * v32 + 17676;
                v59 = (char *)&v119[-1] + 14 * v39;
                v59[17] = (char)(4 * *(_WORD *)(p_NA + 28 * v32 + 17682) + 24) / 45;
                LODWORD(v58) = (unint64_t)(3054198967 * (4 * *(char *)(v58 + 5) + 24)) >> 32;
                v59[18] = (v58 >> 5) + ((int)v58 < 0);
                break;
              }
            }
          }
          ++v32;
        }
        while (v32 < *(unsigned __int8 *)(v31 + 17672));
        v28 = v33;
        BYTE4(v118) = v34;
      }
      else
      {
        v28 = v118;
        v34 = BYTE4(v118);
      }
      EvLog_nd("GN_AGPS_Set_Acq_Ass: (merged) ", 2, v30, v28, v34);
      if (v34 && (unsigned __int16)g_Enable_Event_Log >= 4u)
      {
        v61 = 0;
        v62 = (unsigned __int8 *)v119 + 2;
        do
        {
          v63 = *(v62 - 12);
          v64 = *((__int16 *)v62 - 5);
          v65 = *(v62 - 8);
          v66 = *(v62 - 7);
          v67 = *((unsigned __int16 *)v62 - 3);
          v68 = *(v62 - 4);
          v69 = *(v62 - 3);
          v70 = *(v62 - 2);
          v71 = *(v62 - 1);
          v72 = *v62;
          v62 += 14;
          EvLog_nd("GN_AGPS_AA_El: (merged) ", 12, v60, v61++, v63, v64, (5 * (int)v64 / 2), v65, v66, v67, v68, v69, v70, v71, v72);
        }
        while (v34 != v61);
      }
      v27 = p_NA;
    }
  }
  *(_DWORD *)(v27 + 17664) = v28;
  *(_DWORD *)(v27 + 17668) = 0;
  v73 = BYTE4(v118);
  *(_BYTE *)(v27 + 17672) = BYTE4(v118);
  v115 = 0;
  *(_QWORD *)&v116 = 0;
  v112 = 0;
  *(_QWORD *)&v113 = 0;
  if ((_DWORD)v73)
  {
    v74 = 0;
    v75 = (char *)v119 + 2;
    do
    {
      v76 = *v75;
      v75 += 14;
      *((_BYTE *)&v112 + v74++) = v76;
    }
    while (v73 != v74);
    for (i = 0; i != v73; ++i)
    {
      v78 = 0;
      v79 = -1;
      v80 = -1;
      do
      {
        if (*((char *)&v112 + v78) > v79)
        {
          v79 = *((_BYTE *)&v112 + v78);
          v80 = v78;
        }
        ++v78;
      }
      while (v73 != v78);
      *((_BYTE *)&v115 + i) = v80;
      if (v80 != -1)
        *((_BYTE *)&v112 + v80) = -99;
    }
    v81 = 0;
    v82 = (unsigned __int8 *)v119;
    v83 = v73;
    do
    {
      v84 = *v82;
      v82 += 14;
      v81 += Acq_Ass_Table_Code_Window[v84];
      --v83;
    }
    while (v83);
    v111 = (v81 / v73 + 2) / 3 + 4;
    bzero((void *)(v27 + 17676), 0x540uLL);
    v85 = (unsigned __int8 *)&v115;
    v86 = 17700;
    while (1)
    {
      v88 = *v85++;
      v87 = v88;
      v89 = (char *)&v119[-1] + 14 * v88;
      v90 = v27 + v86;
      *(_BYTE *)(v90 - 22) = v89[6];
      *(_BYTE *)(v90 - 24) = 1;
      *(_WORD *)(v90 - 10) = 5 * *((__int16 *)v89 + 4) / 2;
      v91 = v89[10];
      if (v91)
      {
        *(_WORD *)(v90 - 12) = v91 - 42;
        v92 = *((unsigned __int8 *)&v119[-1] + 14 * v87 + 11);
      }
      else
      {
        v93 = (char *)&v119[-1] + 14 * v87;
        if (v93[11])
          v94 = -42;
        else
          v94 = -16;
        *(_WORD *)(v90 - 12) = v94;
        v92 = v93[11];
        v95 = v111;
        if (!v92)
          goto LABEL_91;
      }
      v95 = Acq_Ass_Table_Doppler_Unc[v92];
LABEL_91:
      v96 = (_DWORD *)(v27 + v86);
      *(_WORD *)(v27 + v86 - 14) = v95;
      v97 = (char *)&v119[-1] + 14 * v87;
      v98 = v97[14] + 20 * v97[15];
      if (v98 <= 0x28)
        v99 = -80;
      else
        v99 = -160;
      v100 = v98 + *(_DWORD *)(v27 + 17664) + v99;
      v101 = v100 - 604800000;
      if (v100 <= 604800000)
        v101 = v100;
      if (v100 >= 0)
        v102 = v101;
      else
        v102 = v100 + 604800000;
      *(v96 - 1) = v102 / 1500;
      *v96 = 1023 * (v102 % 1500);
      v103 = *((unsigned __int16 *)v97 + 6);
      if (v103)
      {
        Inc_CA_Chips((1023 - v103), (int *)(v27 + v86), v96 - 1);
        v27 = p_NA;
      }
      v104 = (unsigned __int8 *)&v119[-1] + 14 * v87;
      v105 = Acq_Ass_Table_Code_Window[v104[16]];
      *((_WORD *)v96 - 4) = v105;
      *((_WORD *)v96 - 8) = 16 * v105;
      v106 = v104[17];
      if (v106 <= 0x1F)
        v107 = (45 * v106) >> 2;
      else
        v107 = 0;
      *((_WORD *)v96 - 9) = v107;
      v108 = (45 * v104[18]) >> 2;
      if (v108 >= 0x5A)
        LOBYTE(v108) = 90;
      *((_BYTE *)v96 - 19) = v108;
      v86 += 28;
      if (!--v73)
        goto LABEL_109;
    }
  }
  bzero((void *)(v27 + 17676), 0x540uLL);
LABEL_109:
  v15 = 1;
  *(_BYTE *)(v27 + 297) = 1;
  Debug_Log_AGPS_Acq_Ass((uint64_t)a1);
  return v15;
}

unint64_t GN_AGPS_Mark_Response_Sent(unsigned int a1, unsigned int a2)
{
  char *v4;
  char v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  char *v10;
  unint64_t result;
  unint64_t *v12;
  int v13;
  unint64_t v14;
  _BYTE *v15;
  int v16;
  int v17;
  BOOL v18;
  unint64_t *v19;
  int v20;
  unint64_t v21;
  _BYTE *v22;
  int v23;
  int v24;
  unint64_t *v25;
  int v26;
  unint64_t v27;
  _BYTE *v28;
  int v29;
  int v30;
  char *v31;
  _BYTE *v32;
  char *v33;
  char *v34;
  _BYTE __src[100];
  _BYTE v36[50];
  __int16 v37;
  __int16 v38;
  __int16 v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  GNSS_Write_GNB_Ctrl((char *)xmmword_2540113A8);
  GNSS_GNB_Debug_Ctl(xmmword_2540113C8);
  GNSS_Event_Log_Ctl(*((uint64_t *)&xmmword_2540113B8 + 1));
  GNSS_Nav_Debug_Ctl(xmmword_2540113B8);
  v4 = __src;
  v33 = __src;
  v34 = v36;
  v32 = __src;
  v5 = 10;
  v6 = 1u;
  do
  {
    v31 = v4 + 1;
    *v4 = v5;
    v4 = v31;
    if (v31 >= v34)
    {
      v4 = v33;
      v31 = v33;
    }
    v5 = str_117[v6++];
  }
  while (v6 != 35);
  sprintf_10u(&v31, a1);
  v7 = v31++;
  *v7 = 32;
  if (v31 >= v34)
    v31 = v33;
  sprintf_10u(&v31, a2);
  v8 = 0;
  v9 = 32;
  v10 = v31;
  do
  {
    v31 = v10 + 1;
    *v10 = v9;
    v10 = v31;
    if (v31 >= v34)
    {
      v10 = v33;
      v31 = v33;
    }
    v9 = str_118[++v8];
  }
  while (v8 != 8);
  result = API_Query_Config((uint64_t)v36);
  if (v38)
  {
    v12 = (unint64_t *)xmmword_2540113C8;
    v13 = (unsigned __int16)((_WORD)v31 - (_WORD)v32);
    v14 = *(_QWORD *)(xmmword_2540113C8 + 24);
    result = *(_QWORD *)xmmword_2540113C8;
    v15 = __src;
    do
    {
      v16 = v14 - result;
      if (v13 >= v16)
        v17 = v16;
      else
        v17 = v13;
      memcpy((void *)result, v15, v17);
      result = *v12 + v17;
      *v12 = result;
      v14 = v12[3];
      if (result >= v14)
      {
        result = v12[2];
        *v12 = result;
      }
      v15 += v17;
      v18 = __OFSUB__(v13, v17);
      v13 -= v17;
    }
    while (!((v13 < 0) ^ v18 | (v13 == 0)));
  }
  if (v39)
  {
    v19 = (unint64_t *)*((_QWORD *)&xmmword_2540113B8 + 1);
    v20 = (unsigned __int16)((_WORD)v31 - (_WORD)v32);
    v21 = *(_QWORD *)(*((_QWORD *)&xmmword_2540113B8 + 1) + 24);
    result = **((_QWORD **)&xmmword_2540113B8 + 1);
    v22 = __src;
    do
    {
      v23 = v21 - result;
      if (v20 >= v23)
        v24 = v23;
      else
        v24 = v20;
      memcpy((void *)result, v22, v24);
      result = *v19 + v24;
      *v19 = result;
      v21 = v19[3];
      if (result >= v21)
      {
        result = v19[2];
        *v19 = result;
      }
      v22 += v24;
      v18 = __OFSUB__(v20, v24);
      v20 -= v24;
    }
    while (!((v20 < 0) ^ v18 | (v20 == 0)));
  }
  if (v37)
  {
    v25 = (unint64_t *)xmmword_2540113B8;
    v26 = (unsigned __int16)((_WORD)v31 - (_WORD)v32);
    v27 = *(_QWORD *)(xmmword_2540113B8 + 24);
    result = *(_QWORD *)xmmword_2540113B8;
    v28 = __src;
    do
    {
      v29 = v27 - result;
      if (v26 >= v29)
        v30 = v29;
      else
        v30 = v26;
      memcpy((void *)result, v28, v30);
      result = *v25 + v30;
      *v25 = result;
      v27 = v25[3];
      if (result >= v27)
      {
        result = v25[2];
        *v25 = result;
      }
      v28 += v30;
      v18 = __OFSUB__(v26, v30);
      v26 -= v30;
    }
    while (!((v26 < 0) ^ v18 | (v26 == 0)));
  }
  return result;
}

double Register_PatchFunc(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  unsigned __int16 v7;
  double result;
  uint64_t v9;
  unsigned __int16 v10;
  char v11[1024];
  char __str[1040];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0xDu, 1, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v6 = mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "HAL", 65, "Register_PatchFunc", "8cd9669 CP 0.0.20 b673 3f12 ME 0.0.76 0882 106e CFG 0c27");
    LbsOsaTrace_WriteLog(0xDu, __str, v7, 1, 1);
  }
  if (a2 != 2 || a3 != 1)
  {
    snprintf(v11, 0x400uLL, "ASSERT: %s %d Hardware version Not Supported %d,%d", "Register_PatchFunc", 40, a2, a3);
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "OSA", 69, "Register_PatchFunc", v11);
      LbsOsaTrace_WriteLog(0xEu, __str, v10, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("Register_PatchFunc", "gnssPatchesMain.cpp", 41, "false && \"HW version Not Supported\"");
  }
  *(_QWORD *)a1 = Get_PatchContent_CpCpuPtc;
  *(_QWORD *)(a1 + 8) = Get_PatchContent_CpCpuSsf;
  *(_QWORD *)(a1 + 24) = Get_PatchContent_MECpuNormPtc;
  *(_QWORD *)(a1 + 32) = Get_PatchContent_MECpuSsf;
  *(_QWORD *)(a1 + 64) = Get_PatchContent_Config;
  *(_QWORD *)(a1 + 88) = 0x41400002E70;
  *(_QWORD *)&result = 0x83AB00024100;
  *(_QWORD *)(a1 + 100) = 0x83AB00024100;
  *(_DWORD *)(a1 + 120) = 1092;
  return result;
}

uint64_t gnss::GnssAdaptDevice::decodeSuplInit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int16 v6;
  unsigned __int8 *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int16 v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  uint64_t v18;
  unsigned __int16 v19;
  int v20;
  uint64_t v21;
  unsigned __int16 v22;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[25];
  _DWORD v44[66];
  _BYTE v45[261];
  char v46;
  int v47;
  __int16 v48;
  __int16 v49;
  int v50;
  char v51;
  int v52;
  char __str[1040];
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v5 = mach_continuous_time();
    v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 68, "decodeSuplInit");
    LbsOsaTrace_WriteLog(0x18u, __str, v6, 5, 1);
  }
  if ((gnss::GnssAdaptDevice::Ga11_16ValidateSuplInit((char **)a2) & 1) != 0)
  {
    gnss::GnssAdaptDevice::Ga11_09TraceBuffer((_QWORD *)a2);
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    memset(v43, 0, sizeof(v43));
    memset(v44, 0, 261);
    memset(v45, 0, sizeof(v45));
    v49 = -1;
    v50 = -1;
    v51 = -1;
    v7 = *(unsigned __int8 **)a2;
    v8 = *(_DWORD *)(a2 + 8) - *(_QWORD *)a2;
    v52 = 0;
    v9 = GNS_SuplDecodeInit(0, v7, v8, &v26) != 1 || BYTE4(v26) == 0;
    v10 = !v9;
    if (v9)
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        goto LABEL_39;
      bzero(__str, 0x410uLL);
      v24 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SuplDecodeInit,%u\n", v24);
      goto LABEL_20;
    }
    gnss::GnssAdaptDevice::Ga11_10ConvertGNSPosMethodToE911PosMethod(v28, (int *)a3);
    if (HIBYTE(v48))
    {
      *(_BYTE *)(a3 + 4) = 1;
      *(_WORD *)(a3 + 5) = v49;
      *(_WORD *)(a3 + 8) = v50;
      *(_BYTE *)(a3 + 10) = v51;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: HAcc,%u,VAcc,%u,LocAge,%u,Delay,%u\n", v11, "ADP");
LABEL_23:
        LbsOsaTrace_WriteLog(0x18u, __str, v12, 4, 1);
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: No Qop vals\n");
      goto LABEL_23;
    }
    if (*(_DWORD *)&v45[256])
      gnss::GnssAdaptDevice::Ga11_11ConvertGNSSlpAddressToE911SlpAddress((uint64_t)v45, a3 + 16);
    if (v46)
    {
      *(_WORD *)(a3 + 72) = 257;
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v18 = mach_continuous_time();
      v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Not an emergency session\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 73, "decodeSuplInit");
      LbsOsaTrace_WriteLog(0x18u, __str, v19, 4, 1);
    }
    if (v44[64])
      gnss::GnssAdaptDevice::Ga11_11ConvertGNSSlpAddressToE911SlpAddress((uint64_t)v44, a3 + 80);
    switch(v52)
    {
      case 0:
        *(_DWORD *)(a3 + 136) = 0;
        goto LABEL_39;
      case 1:
        v20 = 2;
        goto LABEL_38;
      case 2:
        v20 = 1;
LABEL_38:
        *(_DWORD *)(a3 + 136) = v20;
        goto LABEL_39;
    }
    *(_DWORD *)(a3 + 136) = 0;
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
LABEL_39:
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v21 = mach_continuous_time();
        v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 68, "decodeSuplInit");
        LbsOsaTrace_WriteLog(0x18u, __str, v22, 5, 1);
      }
      return v10;
    }
    bzero(__str, 0x410uLL);
    v25 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Trigger type,%u\n", v25);
LABEL_20:
    LbsOsaTrace_WriteLog(0x18u, __str, v17, 0, 1);
    goto LABEL_39;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v13 = mach_continuous_time();
    v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SUPL INIT\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 69, "decodeSuplInit", 257);
    LbsOsaTrace_WriteLog(0x18u, __str, v14, 0, 1);
  }
  v10 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v15 = mach_continuous_time();
    v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 68, "decodeSuplInit");
    LbsOsaTrace_WriteLog(0x18u, __str, v16, 5, 1);
    return 0;
  }
  return v10;
}

uint64_t gnss::GnssAdaptDevice::Ga11_16ValidateSuplInit(char **a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  int64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  uint64_t v13;
  unsigned __int16 v14;
  unint64_t v15;
  unsigned __int16 v16;
  char __str[1040];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 68, "Ga11_16ValidateSuplInit");
    LbsOsaTrace_WriteLog(0x18u, __str, v3, 5, 1);
  }
  v4 = a1[1] - *a1;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v5 = mach_continuous_time();
    v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SUPL INIT len,%zd\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 68, "Ga11_16ValidateSuplInit", v4);
    LbsOsaTrace_WriteLog(0x18u, __str, v6, 5, 1);
  }
  if ((unint64_t)(v4 - 0x10000) > 0xFFFFFFFFFFFF0004)
  {
    v10 = __rev16(*(unsigned __int16 *)*a1);
    if (v4 == v10)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v11 = mach_continuous_time();
        v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "Ga11_16ValidateSuplInit");
        v9 = 1;
        LbsOsaTrace_WriteLog(0x18u, __str, v12, 5, 1);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v13 = mach_continuous_time();
        v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SuplInit Len,%zd mismatches SuplInitHadrLen,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 69, "Ga11_16ValidateSuplInit", 770, v4, v10);
        LbsOsaTrace_WriteLog(0x18u, __str, v14, 0, 1);
      }
      v9 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        goto LABEL_16;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v7 = mach_continuous_time();
      v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SUPL INIT\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "Ga11_16ValidateSuplInit", 514);
      LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
    }
    v9 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
LABEL_16:
      bzero(__str, 0x410uLL);
      v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v15, "ADP", 68, "Ga11_16ValidateSuplInit");
      LbsOsaTrace_WriteLog(0x18u, __str, v16, 5, 1);
      return 0;
    }
  }
  return v9;
}

void gnss::GnssAdaptDevice::Ga11_09TraceBuffer(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  std::string::size_type v4;
  const std::string::value_type *p_p;
  std::string::size_type v6;
  std::string *v7;
  void *v8;
  char v9;
  std::string::size_type v10;
  int v11;
  size_t v12;
  unint64_t v13;
  std::string *p_str;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  void *v23;
  char v24;
  double v25;
  const char *v26;
  unsigned __int16 v27;
  std::string::size_type v28;
  std::string::size_type v29;
  std::string::size_type v30;
  void *__p;
  __int128 v32;
  std::string v33;
  uint64_t v34;
  _BYTE v35[48];
  void *v36;
  char v37;
  uint64_t v38;
  __int128 v39;
  unsigned __int8 v40;
  _QWORD v41[2];
  std::string __str;
  _QWORD v43[10];
  char v44;
  _QWORD v45[116];

  v45[114] = *MEMORY[0x24BDAC8D0];
  if (a1[1] != *a1)
  {
    v2 = 0;
    __p = 0;
    v32 = 0uLL;
    v28 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v29 = *MEMORY[0x24BEDB7F0];
    v30 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v3 = MEMORY[0x24BEDB848] + 16;
    do
    {
      if (a1[1] - *a1 <= v2)
        break;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__str);
      v4 = __str.__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v43 + *(_QWORD *)(__str.__r_.__value_.__r.__words[2] - 24)) = *(_DWORD *)((_BYTE *)v43
                                                                                                  + *(_QWORD *)(__str.__r_.__value_.__r.__words[2] - 24)) & 0xFFFFFFB5 | 8;
      *(_QWORD *)((char *)&v43[2] + *(_QWORD *)(v4 - 24)) = 2;
      v33.__r_.__value_.__s.__data_[0] = 48;
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&__str.__r_.__value_.__r.__words[2], (char *)&v33);
      std::ostream::operator<<();
      std::stringbuf::str();
      if (v32 >= 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if (v32 >= 0)
        v6 = HIBYTE(v32);
      else
        v6 = v32;
      v7 = std::string::insert(&v33, 0, p_p, v6);
      v8 = (void *)v7->__r_.__value_.__r.__words[0];
      *(_QWORD *)&v39 = v7->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)&v39 + 7) = *(std::string::size_type *)((char *)&v7->__r_.__value_.__r.__words[1] + 7);
      v9 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v32) < 0)
        operator delete(__p);
      __p = v8;
      *(_QWORD *)&v32 = v39;
      *(_QWORD *)((char *)&v32 + 7) = *(_QWORD *)((char *)&v39 + 7);
      HIBYTE(v32) = v9;
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      __str.__r_.__value_.__r.__words[0] = v29;
      *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + *(_QWORD *)(v29 - 24)) = v28;
      __str.__r_.__value_.__r.__words[2] = v30;
      v43[0] = v3;
      if (v44 < 0)
        operator delete((void *)v43[8]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x2207AFD84](v45);
      ++v2;
    }
    while (v2 != 5);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v33);
    v10 = v33.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)&v33.__r_.__value_.__r + *(_QWORD *)(v33.__r_.__value_.__r.__words[2] - 24) + 24) = *(_DWORD *)((char *)&v33.__r_.__value_.__r + *(_QWORD *)(v33.__r_.__value_.__r.__words[2] - 24) + 24) & 0xFFFFFFB5 | 8;
    *(_QWORD *)&v35[*(_QWORD *)(v10 - 24)] = 2;
    __str.__r_.__value_.__s.__data_[0] = 48;
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v33.__r_.__value_.__r.__words[2], (char *)&__str);
    std::ostream::operator<<();
    v11 = SHIBYTE(v32);
    if (v32 >= 0)
      v12 = HIBYTE(v32);
    else
      v12 = v32;
    v13 = v12 + 3;
    if (v12 + 3 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v13 >= 0x17)
    {
      v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v17 = v13 | 7;
      v18 = v17 + 1;
      p_str = (std::string *)operator new(v17 + 1);
      __str.__r_.__value_.__l.__size_ = v12 + 3;
      __str.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
    }
    else
    {
      memset(&__str, 0, sizeof(__str));
      p_str = &__str;
      *((_BYTE *)&__str.__r_.__value_.__s + 23) = v12 + 3;
      if (!v12)
      {
LABEL_33:
        *(_DWORD *)((char *)&p_str->__r_.__value_.__l.__data_ + v12) = 3026478;
        std::stringbuf::str();
        if ((v40 & 0x80u) == 0)
          v20 = (const std::string::value_type *)&v39;
        else
          v20 = (const std::string::value_type *)v39;
        if ((v40 & 0x80u) == 0)
          v21 = v40;
        else
          v21 = *((_QWORD *)&v39 + 1);
        v22 = std::string::append(&__str, v20, v21);
        v23 = (void *)v22->__r_.__value_.__r.__words[0];
        v41[0] = v22->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v41 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
        v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v32) < 0)
          operator delete(__p);
        __p = v23;
        *(_QWORD *)&v32 = v41[0];
        *(_QWORD *)((char *)&v32 + 7) = *(_QWORD *)((char *)v41 + 7);
        HIBYTE(v32) = v24;
        if ((char)v40 < 0)
          operator delete((void *)v39);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(&__str, 0x410uLL);
          v25 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
          v26 = (const char *)&__p;
          if (v32 < 0)
            v26 = (const char *)__p;
          v27 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: Len,%lu,bufContents,%s\n", (unint64_t)v25, "ADP", 68, "Ga11_09TraceBuffer", a1[1] - *a1, v26);
          LbsOsaTrace_WriteLog(0x18u, (char *)&__str, v27, 5, 1);
        }
        v33.__r_.__value_.__r.__words[0] = v29;
        *(std::string::size_type *)((char *)v33.__r_.__value_.__r.__words + *(_QWORD *)(v29 - 24)) = v28;
        v33.__r_.__value_.__r.__words[2] = v30;
        v34 = MEMORY[0x24BEDB848] + 16;
        if (v37 < 0)
          operator delete(v36);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x2207AFD84](&v38);
        if (SHIBYTE(v32) < 0)
          operator delete(__p);
        return;
      }
    }
    if (v11 >= 0)
      v19 = &__p;
    else
      v19 = __p;
    memmove(p_str, v19, v12);
    goto LABEL_33;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(&__str, 0x410uLL);
    v15 = mach_continuous_time();
    v16 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: #%04hx buffer is empty\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 69, "Ga11_09TraceBuffer", 513);
    LbsOsaTrace_WriteLog(0x18u, (char *)&__str, v16, 0, 1);
  }
}

void sub_21E560264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

size_t gnss::GnssAdaptDevice::Ga11_10ConvertGNSPosMethodToE911PosMethod(int a1, int *a2)
{
  uint64_t v4;
  unsigned __int16 v5;
  uint64_t v6;
  unsigned __int16 v7;
  int v8;
  uint64_t v9;
  unsigned __int16 v10;
  size_t result;
  uint64_t v12;
  unsigned __int16 v13;
  char __str[1040];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v4 = mach_continuous_time();
    v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "Ga11_10ConvertGNSPosMethodToE911PosMethod");
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 5, 1);
  }
  switch(a1)
  {
    case 0:
      break;
    case 1:
      *a2 = 0;
      break;
    case 2:
      v8 = 1;
      goto LABEL_23;
    case 3:
      v8 = 2;
      goto LABEL_23;
    case 4:
      v8 = 3;
      goto LABEL_23;
    case 5:
      v8 = 4;
      goto LABEL_23;
    case 6:
      v8 = 9;
      goto LABEL_23;
    case 7:
      v8 = 11;
      goto LABEL_23;
    case 8:
      v8 = 12;
      goto LABEL_23;
    case 9:
      v8 = 13;
      goto LABEL_23;
    case 10:
      v8 = 14;
      goto LABEL_23;
    case 11:
      v8 = 15;
      goto LABEL_23;
    case 12:
      v8 = 5;
      goto LABEL_23;
    case 13:
      v8 = 6;
      goto LABEL_23;
    case 14:
      v8 = 7;
      goto LABEL_23;
    case 15:
      v8 = 8;
      goto LABEL_23;
    case 16:
      v8 = 10;
      goto LABEL_23;
    case 17:
      v8 = 16;
LABEL_23:
      *a2 = v8;
      break;
    default:
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v6 = mach_continuous_time();
        v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Pos Method,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "Ga11_10ConvertGNSPosMethodToE911PosMethod", 515, a1);
        LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
      }
      break;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v9 = mach_continuous_time();
    v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: E911PosMethod,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 73, "Ga11_10ConvertGNSPosMethodToE911PosMethod", *a2);
    LbsOsaTrace_WriteLog(0x18u, __str, v10, 4, 1);
  }
  result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if ((_DWORD)result)
  {
    bzero(__str, 0x410uLL);
    v12 = mach_continuous_time();
    v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "Ga11_10ConvertGNSPosMethodToE911PosMethod");
    return LbsOsaTrace_WriteLog(0x18u, __str, v13, 5, 1);
  }
  return result;
}

size_t gnss::GnssAdaptDevice::Ga11_11ConvertGNSSlpAddressToE911SlpAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int16 v5;
  int v6;
  uint64_t v7;
  unsigned __int16 v8;
  size_t result;
  uint64_t v10;
  unsigned __int16 v11;
  void **v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  unsigned __int16 v16;
  char __str[16];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v4 = mach_continuous_time();
    v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "Ga11_11ConvertGNSSlpAddressToE911SlpAddress");
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 5, 1);
  }
  if (a1)
  {
    v6 = strnlen((const char *)a1, 0x100uLL);
    if ((v6 & 0xFFFFFEFF) == 0)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v7 = mach_continuous_time();
        v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GSM serving cell info,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "Ga11_11ConvertGNSSlpAddressToE911SlpAddress", 772, v6);
        LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
      }
      result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if ((_DWORD)result)
        goto LABEL_21;
      return result;
    }
    switch(*(_DWORD *)(a1 + 256))
    {
      case 0:
        break;
      case 1:
        *(_DWORD *)(a2 + 4) = 1;
        gnss::GnssAdaptDevice::Ga11_15ConvertStringIPtoVect((const char *)a1, (unint64_t *)(a2 + 32));
        *(_BYTE *)a2 = 1;
        break;
      case 2:
        *(_DWORD *)(a2 + 4) = 2;
        gnss::GnssAdaptDevice::Ga11_15ConvertStringIPtoVect((const char *)a1, (unint64_t *)(a2 + 32));
        goto LABEL_17;
      case 3:
        *(_DWORD *)(a2 + 4) = 3;
        std::string::basic_string[abi:ne180100]<0>(__str, (char *)a1);
        v12 = (void **)(a2 + 8);
        if (*(char *)(a2 + 31) < 0)
          operator delete(*v12);
        *(_OWORD *)v12 = *(_OWORD *)__str;
        *(_QWORD *)(a2 + 24) = v18;
LABEL_17:
        *(_BYTE *)a2 = 1;
        break;
      default:
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v10 = mach_continuous_time();
          v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Addresstype not set,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 68, "Ga11_11ConvertGNSSlpAddressToE911SlpAddress", *(_DWORD *)(a1 + 256));
          LbsOsaTrace_WriteLog(0x18u, __str, v11, 5, 1);
        }
        break;
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v13 = mach_continuous_time();
    v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SLPType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 73, "Ga11_11ConvertGNSSlpAddressToE911SlpAddress", *(_DWORD *)(a2 + 4));
    LbsOsaTrace_WriteLog(0x18u, __str, v14, 4, 1);
  }
  result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if ((_DWORD)result)
  {
LABEL_21:
    bzero(__str, 0x410uLL);
    v15 = mach_continuous_time();
    v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 68, "Ga11_11ConvertGNSSlpAddressToE911SlpAddress");
    return LbsOsaTrace_WriteLog(0x18u, __str, v16, 5, 1);
  }
  return result;
}

void gnss::GnssAdaptDevice::setSuplInit(uint64_t a1, uint64_t a2, __int16 *a3, uint64_t a4)
{
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  unsigned __int16 v11;
  NSObject *v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t v16;
  __int16 v17;
  std::string v18;
  char v19;
  std::string v20;
  __int128 v21;
  uint64_t v22;
  void *v23;
  _BYTE *v24;
  uint64_t v25;
  _QWORD block[5];
  _BYTE v27[24];
  _BYTE *v28;
  __int16 v29;
  std::string v30;
  char v31;
  std::string v32;
  __int128 v33;
  uint64_t v34;
  void *__p;
  void *v36;
  uint64_t v37;
  char __str[1040];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v8 = mach_continuous_time();
    v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "setSuplInit");
    LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
  }
  if (*(_QWORD *)(a4 + 24))
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v23, *(const void **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
    v17 = *a3;
    if (*((char *)a3 + 31) < 0)
      std::string::__init_copy_ctor_external(&v18, *((const std::string::value_type **)a3 + 1), *((_QWORD *)a3 + 2));
    else
      v18 = *(std::string *)(a3 + 4);
    v19 = *((_BYTE *)a3 + 32);
    if (*((char *)a3 + 63) < 0)
      std::string::__init_copy_ctor_external(&v20, *((const std::string::value_type **)a3 + 5), *((_QWORD *)a3 + 6));
    else
      v20 = *(std::string *)(a3 + 20);
    v21 = *((_OWORD *)a3 + 4);
    v22 = *((_QWORD *)a3 + 10);
    v12 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice11setSuplInitERKNSt3__16vectorIhNS1_9allocatorIhEEEERKNS_9Emergency4Supl7ContextENS1_8functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp;
    block[4] = a1;
    v13 = v27;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v27, a4);
    v29 = v17;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v30, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
    else
      v30 = v18;
    v31 = v19;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v32, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
    else
      v32 = v20;
    v33 = v21;
    v34 = v22;
    __p = 0;
    v36 = 0;
    v37 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v23, (uint64_t)v24, v24 - (_BYTE *)v23);
    dispatch_async(v12, block);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v14 = mach_continuous_time();
      v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 68, "setSuplInit");
      LbsOsaTrace_WriteLog(0x18u, __str, v15, 5, 1);
    }
    if (__p)
    {
      v36 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (v28 == v27)
    {
      v16 = 4;
    }
    else
    {
      if (!v28)
      {
LABEL_31:
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v20.__r_.__value_.__l.__data_);
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v18.__r_.__value_.__l.__data_);
        if (v23)
        {
          v24 = v23;
          operator delete(v23);
        }
        return;
      }
      v16 = 5;
      v13 = v28;
    }
    (*(void (**)(_QWORD *))(*v13 + 8 * v16))(v13);
    goto LABEL_31;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v10 = mach_continuous_time();
    v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "setSuplInit", 513);
    LbsOsaTrace_WriteLog(0x18u, __str, v11, 0, 1);
  }
}

void sub_21E560E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,_QWORD *a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56)
{
  _QWORD *v56;
  uint64_t v58;

  if (a47 < 0)
    operator delete(__p);
  if (a40 == v56)
  {
    v58 = 4;
  }
  else
  {
    if (!a40)
      goto LABEL_8;
    v58 = 5;
    v56 = a40;
  }
  (*(void (**)(_QWORD *))(*v56 + 8 * v58))(v56);
LABEL_8:
  gnss::Emergency::Supl::Context::~Context(&a15);
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN4gnss15GnssAdaptDevice11setSuplInitERKNSt3__16vectorIhNS1_9allocatorIhEEEERKNS_9Emergency4Supl7ContextENS1_8functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  uint64_t result;
  uint64_t v19;
  unsigned __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 v27;
  uint64_t v28;
  unsigned __int16 v29;
  uint64_t v30;
  unsigned __int16 v31;
  uint64_t v32;
  unsigned __int16 v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int16 v37;
  uint64_t v38;
  unsigned __int16 v39;
  uint64_t v40;
  unsigned __int16 v41;
  uint64_t v42;
  unsigned __int16 v43;
  char v44;
  uint64_t v45;
  unsigned __int16 v46;
  uint64_t v47;
  unsigned __int16 v48;
  const char *v49;
  const char **v50;
  double v51;
  const char *v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  unsigned __int16 v56;
  uint64_t v57;
  _BYTE *v58;
  int v59;
  uint64_t v60;
  unsigned __int16 v61;
  double v62;
  uint64_t v63;
  unsigned __int16 v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  unsigned __int16 v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int16 v72;
  uint64_t v73;
  unsigned __int16 v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int16 v78;
  uint64_t v79;
  unsigned __int16 v80;
  uint64_t v81;
  unsigned __int16 v82;
  uint64_t v83;
  unsigned __int16 v84;
  uint64_t v85;
  unsigned __int16 v86;
  unsigned int v87;
  uint64_t v88;
  unsigned __int16 v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  uint64_t v94;
  unsigned __int16 v95;
  uint64_t v96;
  unsigned __int16 v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned __int16 v101;
  int v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  unsigned __int16 v108;
  std::string v109;
  _BYTE v110[24];
  _BYTE *v111;
  _BYTE v112[24];
  _BYTE *v113;
  _BYTE v114[24];
  _BYTE *v115;
  _BYTE v116[8];
  int v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE v121[32];
  char v122[259];
  unsigned __int16 v123;
  int v124;
  _QWORD v125[2];
  double v126;
  _BYTE v127[24];
  _BYTE *v128;
  _BYTE v129[24];
  _BYTE *v130;
  _BYTE v131[24];
  _BYTE *v132;
  _BYTE v133[24];
  _BYTE *v134;
  _BYTE v135[24];
  _BYTE *v136;
  char __str[1040];
  _BYTE v138[24];
  _BYTE *v139;
  uint64_t v140;

  v140 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 88))
  {
    if (*(_BYTE *)(v2 + 89) && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v3 = mach_continuous_time();
      v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PVTM req active\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 87, "setSuplInit_block_invoke", 2056);
      LbsOsaTrace_WriteLog(0x18u, __str, v4, 2, 1);
    }
    if (*(char *)(a1 + 103) < 0)
    {
      if (*(_QWORD *)(a1 + 88))
      {
LABEL_7:
        v5 = *(unsigned __int8 *)(a1 + 135);
        if (*(char *)(a1 + 135) < 0)
        {
          if (*(_QWORD *)(a1 + 120))
            goto LABEL_9;
        }
        else if (*(_BYTE *)(a1 + 135))
        {
LABEL_9:
          if ((*(_BYTE *)(a1 + 103) & 0x80) != 0 && *(_QWORD *)(a1 + 88) >= 0x100uLL)
          {
            std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v131, a1 + 40);
            gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v131, (uint64_t)"setSuplInit_block_invoke");
            v6 = v132;
            if (v132 == v131)
            {
              v7 = 4;
              v6 = v131;
            }
            else
            {
              if (!v132)
              {
LABEL_125:
                if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  v81 = mach_continuous_time();
                  v82 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SLP AddLen,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v81), "ADP", 69, "setSuplInit_block_invoke", 515, 256);
                  LbsOsaTrace_WriteLog(0x18u, __str, v82, 0, 1);
                }
                result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
                if ((_DWORD)result)
                {
                  bzero(__str, 0x410uLL);
                  v83 = mach_continuous_time();
                  v84 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v83), "ADP", 68, "setSuplInit_block_invoke");
                  return LbsOsaTrace_WriteLog(0x18u, __str, v84, 5, 1);
                }
                return result;
              }
              v7 = 5;
            }
            (*(void (**)(void))(*v6 + 8 * v7))();
            goto LABEL_125;
          }
          if ((v5 & 0x80) != 0)
            v5 = *(_QWORD *)(a1 + 120);
          if (v5 >= 0x10)
          {
            std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v129, a1 + 40);
            gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v129, (uint64_t)"setSuplInit_block_invoke");
            v12 = v130;
            if (v130 == v129)
            {
              v13 = 4;
              v12 = v129;
            }
            else
            {
              if (!v130)
              {
LABEL_61:
                if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  v36 = mach_continuous_time();
                  v37 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx IMSI Len,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "ADP", 69, "setSuplInit_block_invoke", 515, 16);
                  LbsOsaTrace_WriteLog(0x18u, __str, v37, 0, 1);
                }
                result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
                if ((_DWORD)result)
                {
                  bzero(__str, 0x410uLL);
                  v38 = mach_continuous_time();
                  v39 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v38), "ADP", 68, "setSuplInit_block_invoke");
                  return LbsOsaTrace_WriteLog(0x18u, __str, v39, 5, 1);
                }
                return result;
              }
              v13 = 5;
            }
            (*(void (**)(void))(*v12 + 8 * v13))();
            goto LABEL_61;
          }
          if ((gnss::GnssAdaptDevice::Ga11_16ValidateSuplInit((char **)(a1 + 160)) & 1) != 0)
          {
            v22 = *(_QWORD *)(a1 + 160);
            v21 = *(_QWORD *)(a1 + 168);
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v23 = mach_continuous_time();
              v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SUPL INIT Len,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 68, "setSuplInit_block_invoke", v21 - v22);
              LbsOsaTrace_WriteLog(0x18u, __str, v24, 5, 1);
            }
            gnss::GnssAdaptDevice::Ga11_09TraceBuffer((_QWORD *)(a1 + 160));
            if (*(_BYTE *)(a1 + 136))
            {
              if (*(_BYTE *)(a1 + 137))
                v25 = 0x100000003;
              else
                v25 = 3;
            }
            else
            {
              v25 = 0;
            }
            v44 = *(_BYTE *)(a1 + 138);
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v45 = mach_continuous_time();
              v46 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: WLAN PosMode(1,SA,2,Assisted),%u,MeasMask(1,RSSI),%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v45), "ADP", 73, "setSuplInit_block_invoke", v25, HIDWORD(v25));
              LbsOsaTrace_WriteLog(0x18u, __str, v46, 4, 1);
            }
            if (GNS_WlCapabilities(v25, v44) != 1
              && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v47 = mach_continuous_time();
              v48 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx WLAN CAPS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v47), "ADP", 87, "setSuplInit_block_invoke", 257);
              LbsOsaTrace_WriteLog(0x18u, __str, v48, 2, 1);
            }
            v49 = (const char *)(a1 + 80);
            v50 = (const char **)(a1 + 112);
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
            {
              bzero(__str, 0x410uLL);
              v51 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
              v52 = (const char *)(a1 + 80);
              if (*(char *)(a1 + 103) < 0)
                v52 = *(const char **)v49;
              if (*(_BYTE *)(a1 + 104))
                v53 = 84;
              else
                v53 = 70;
              v54 = (const char *)(a1 + 112);
              if (*(char *)(a1 + 135) < 0)
                v54 = *v50;
              v55 = 84;
              if (!*(_BYTE *)(a1 + 144))
                v55 = 70;
              v56 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SLP,%s,%u,MSA,%c,IMSI,%s,HeloEnabled,%c\n", (unint64_t)v51, "ADP", 68, "setSuplInit_block_invoke", v52, *(unsigned __int16 *)(a1 + 72), v53, v54, v55);
              LbsOsaTrace_WriteLog(0x18u, __str, v56, 5, 1);
            }
            bzero(v116, 0x270uLL);
            v118 = 2;
            v119 = 0;
            *(_QWORD *)v121 = 0;
            v120 = 0;
            *(_QWORD *)&v121[7] = 0;
            memset(&v121[17], 0, 13);
            v57 = 62;
            do
            {
              v58 = &v116[v57];
              *v58 = 0;
              *(_WORD *)&v122[v57 + 194] = 0;
              *((_WORD *)v58 + 130) = -1;
              v57 += 262;
            }
            while (v58 + 262 != (_BYTE *)&v124);
            v124 = 0;
            v126 = 0.0;
            *(_QWORD *)((char *)v125 + 7) = 0;
            v125[0] = 0;
            v117 = 32;
            *(_DWORD *)&v121[25] = 4;
            v59 = *(char *)(a1 + 103);
            if (v59 < 0)
            {
              LOBYTE(v59) = *(_BYTE *)(a1 + 88);
              v49 = *(const char **)(a1 + 80);
            }
            v122[257] = v59;
            v121[31] = 0;
            v122[256] = 1;
            strncpy_s(v122, 0x100u, v49, v59);
            v123 = *(_WORD *)(a1 + 72);
            if (v123 - 7275 >= 2 && LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v60 = mach_continuous_time();
              v61 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Non Standard Port, %u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v60), "ADP", 87, "setSuplInit_block_invoke", 770, v123);
              LbsOsaTrace_WriteLog(0x18u, __str, v61, 2, 1);
            }
            *(_DWORD *)&v121[21] = *(_DWORD *)&v121[21] & 0xFFFFFFBF | ((*(_BYTE *)(a1 + 104) == 0) << 6);
            *(_DWORD *)&v121[17] |= 0x40u;
            v117 |= 0x1000u;
            v62 = *(double *)(a1 + 152);
            if (v62 == -1.0)
              v62 = 0.0;
            v126 = v62;
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v63 = mach_continuous_time();
              v64 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: targetE911VerticalAccM,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v63), "ADP", 73, "setSuplInit_block_invoke", v126);
              LbsOsaTrace_WriteLog(0x18u, __str, v64, 4, 1);
            }
            v65 = Gnm_SetUserConfig((uint64_t)v116);
            if (v65)
            {
              v66 = gnss::GnssAdaptDevice::Ga07_12MapGnmRespToGnssResult(v2, v65);
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v67 = mach_continuous_time();
                v68 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetUsrCfg,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v67), "ADP", 69, "setSuplInit_block_invoke", 257, v66);
                LbsOsaTrace_WriteLog(0x18u, __str, v68, 0, 1);
              }
              std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v114, a1 + 40);
              gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, v66, (uint64_t)v114, (uint64_t)"setSuplInit_block_invoke");
              v69 = v115;
              if (v115 == v114)
              {
                v70 = 4;
                v69 = v114;
              }
              else
              {
                if (!v115)
                  goto LABEL_131;
                v70 = 5;
              }
              (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_131:
              result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
              if ((_DWORD)result)
              {
                bzero(__str, 0x410uLL);
                v85 = mach_continuous_time();
                v86 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v85), "ADP", 68, "setSuplInit_block_invoke");
                return LbsOsaTrace_WriteLog(0x18u, __str, v86, 5, 1);
              }
              return result;
            }
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v71 = mach_continuous_time();
              v72 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SetUsrCfg success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v71), "ADP", 73, "setSuplInit_block_invoke");
              LbsOsaTrace_WriteLog(0x18u, __str, v72, 4, 1);
            }
            if (!gnss::GnssAdaptDevice::Ga10_11SetGuardTimeOut((gnss::GnssAdaptDevice *)v2)
              && LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v73 = mach_continuous_time();
              v74 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetGuardTimeOut\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v73), "ADP", 69, "setSuplInit_block_invoke", 257);
              LbsOsaTrace_WriteLog(0x18u, __str, v74, 0, 1);
            }
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v75 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
              if (*(_BYTE *)(a1 + 144))
                v76 = 84;
              else
                v76 = 70;
              if (*(_BYTE *)(a1 + 145))
                v77 = 84;
              else
                v77 = 70;
              v78 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: EarlyReturnEanbled,%c,HELO-Enabled,%c\n", (unint64_t)v75, "ADP", 73, "setSuplInit_block_invoke", v77, v76);
              LbsOsaTrace_WriteLog(0x18u, __str, v78, 4, 1);
            }
            if (!gnss::GnssAdaptDevice::Ga10_12SetEarlyReturn((gnss::GnssAdaptDevice *)v2, *(unsigned __int8 *)(a1 + 145))&& LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v79 = mach_continuous_time();
              v80 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetEarlyReturn\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v79), "ADP", 69, "setSuplInit_block_invoke", 257);
              LbsOsaTrace_WriteLog(0x18u, __str, v80, 0, 1);
            }
            if (*(char *)(a1 + 135) < 0)
            {
              std::string::__init_copy_ctor_external(&v109, *(const std::string::value_type **)(a1 + 112), *(_QWORD *)(a1 + 120));
            }
            else
            {
              *(_OWORD *)&v109.__r_.__value_.__l.__data_ = *(_OWORD *)v50;
              v109.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 128);
            }
            v87 = GNS_SetImsi((uint64_t)&v109, 0);
            if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v109.__r_.__value_.__l.__data_);
            if (v87 == 1)
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v88 = mach_continuous_time();
                v89 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CellInfo success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v88), "ADP", 73, "setSuplInit_block_invoke");
                LbsOsaTrace_WriteLog(0x18u, __str, v89, 4, 1);
              }
              std::function<void ()(gnss::Result)>::operator=((_QWORD *)(v2 + 536), a1 + 40);
              v90 = GNS_DcSuplInit(*(unsigned __int8 **)(a1 + 160), *(_DWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160), 0);
              if (v90 == 1)
              {
                v91 = *(_QWORD *)(v2 + 152);
                v92 = *(_QWORD *)(v2 + 160);
                v93 = (unint64_t *)(v2 + 152);
                if ((unint64_t)(v92 - v91) <= 3)
                  std::vector<gnss::AgnssSuplCfg>::push_back[abi:ne180100](v93, *(_BYTE *)(a1 + 144));
                result = LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0);
                if ((_DWORD)result)
                {
                  bzero(__str, 0x410uLL);
                  v94 = mach_continuous_time();
                  v95 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: DcSuplInit success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v94), "ADP", 73, "setSuplInit_block_invoke");
                  return LbsOsaTrace_WriteLog(0x18u, __str, v95, 4, 1);
                }
                return result;
              }
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v100 = mach_continuous_time();
                v101 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DcSuplInit,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v100), "ADP", 69, "setSuplInit_block_invoke", 257, v90);
                LbsOsaTrace_WriteLog(0x18u, __str, v101, 0, 1);
              }
              v102 = gnss::GnssAdaptDevice::Ga07_16MapGnsRespToGnssResult(v2, v90);
              std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v110, a1 + 40);
              gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, v102, (uint64_t)v110, (uint64_t)"setSuplInit_block_invoke");
              v103 = v111;
              if (v111 == v110)
              {
                v104 = 4;
                v103 = v110;
              }
              else
              {
                if (!v111)
                  goto LABEL_160;
                v104 = 5;
              }
              (*(void (**)(void))(*v103 + 8 * v104))();
LABEL_160:
              v105 = *(_QWORD **)(v2 + 560);
              *(_QWORD *)(v2 + 560) = 0;
              if (v105 == (_QWORD *)(v2 + 536))
              {
                v106 = 4;
                v105 = (_QWORD *)(v2 + 536);
              }
              else
              {
                if (!v105)
                  goto LABEL_165;
                v106 = 5;
              }
              (*(void (**)(void))(*v105 + 8 * v106))();
LABEL_165:
              result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
              if (!(_DWORD)result)
                return result;
              goto LABEL_166;
            }
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v96 = mach_continuous_time();
              v97 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx IMSI push failed,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v96), "ADP", 69, "setSuplInit_block_invoke", 257, v87);
              LbsOsaTrace_WriteLog(0x18u, __str, v97, 0, 1);
            }
            std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v112, a1 + 40);
            gnss::GnssAdaptDevice::Ga07_15AdaptGnsEarlyResponse(v2, v87, (uint64_t)v112, "setSuplInit_block_invoke");
            v98 = v113;
            if (v113 == v112)
            {
              v99 = 4;
              v98 = v112;
            }
            else
            {
              if (!v113)
                goto LABEL_156;
              v99 = 5;
            }
            (*(void (**)(void))(*v98 + 8 * v99))();
LABEL_156:
            result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
            if (!(_DWORD)result)
              return result;
LABEL_166:
            bzero(__str, 0x410uLL);
            v107 = mach_continuous_time();
            v108 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v107), "ADP", 68, "setSuplInit_block_invoke");
            return LbsOsaTrace_WriteLog(0x18u, __str, v108, 5, 1);
          }
          std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v127, a1 + 40);
          gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v127, (uint64_t)"setSuplInit_block_invoke");
          v34 = v128;
          if (v128 == v127)
          {
            v35 = 4;
            v34 = v127;
          }
          else
          {
            if (!v128)
            {
LABEL_67:
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v40 = mach_continuous_time();
                v41 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SUPL INIT\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v40), "ADP", 69, "setSuplInit_block_invoke", 257);
                LbsOsaTrace_WriteLog(0x18u, __str, v41, 0, 1);
              }
              result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
              if ((_DWORD)result)
              {
                bzero(__str, 0x410uLL);
                v42 = mach_continuous_time();
                v43 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v42), "ADP", 68, "setSuplInit_block_invoke");
                return LbsOsaTrace_WriteLog(0x18u, __str, v43, 5, 1);
              }
              return result;
            }
            v35 = 5;
          }
          (*(void (**)(void))(*v34 + 8 * v35))();
          goto LABEL_67;
        }
        std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v133, a1 + 40);
        gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v133, (uint64_t)"setSuplInit_block_invoke");
        v14 = v134;
        if (v134 == v133)
        {
          v15 = 4;
          v14 = v133;
        }
        else
        {
          if (!v134)
          {
LABEL_52:
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v30 = mach_continuous_time();
              v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx IMSI not provisioned\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "ADP", 69, "setSuplInit_block_invoke", 515);
              LbsOsaTrace_WriteLog(0x18u, __str, v31, 0, 1);
            }
            result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
            if ((_DWORD)result)
            {
              bzero(__str, 0x410uLL);
              v32 = mach_continuous_time();
              v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "ADP", 68, "setSuplInit_block_invoke");
              return LbsOsaTrace_WriteLog(0x18u, __str, v33, 5, 1);
            }
            return result;
          }
          v15 = 5;
        }
        (*(void (**)(void))(*v14 + 8 * v15))();
        goto LABEL_52;
      }
    }
    else if (*(_BYTE *)(a1 + 103))
    {
      goto LABEL_7;
    }
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v135, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v135, (uint64_t)"setSuplInit_block_invoke");
    v10 = v136;
    if (v136 == v135)
    {
      v11 = 4;
      v10 = v135;
    }
    else
    {
      if (!v136)
      {
LABEL_46:
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v26 = mach_continuous_time();
          v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SLP Address not provisioned\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "ADP", 69, "setSuplInit_block_invoke", 515);
          LbsOsaTrace_WriteLog(0x18u, __str, v27, 0, 1);
        }
        result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if ((_DWORD)result)
        {
          bzero(__str, 0x410uLL);
          v28 = mach_continuous_time();
          v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "ADP", 68, "setSuplInit_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v29, 5, 1);
        }
        return result;
      }
      v11 = 5;
    }
    (*(void (**)(void))(*v10 + 8 * v11))();
    goto LABEL_46;
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v138, a1 + 40);
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v138, (uint64_t)"setSuplInit_block_invoke");
  v8 = v139;
  if (v139 == v138)
  {
    v9 = 4;
    v8 = v138;
    goto LABEL_32;
  }
  if (v139)
  {
    v9 = 5;
LABEL_32:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v16 = mach_continuous_time();
    v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 69, "setSuplInit_block_invoke", 1302);
    LbsOsaTrace_WriteLog(0x18u, __str, v17, 0, 1);
  }
  result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if ((_DWORD)result)
  {
    bzero(__str, 0x410uLL);
    v19 = mach_continuous_time();
    v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 68, "setSuplInit_block_invoke");
    return LbsOsaTrace_WriteLog(0x18u, __str, v20, 5, 1);
  }
  return result;
}

void sub_21E56268C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  _QWORD *v27;
  uint64_t v28;

  v27 = (_QWORD *)a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *std::function<void ()(gnss::Result)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(gnss::Result)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::vector<gnss::AgnssSuplCfg>::push_back[abi:ne180100](unint64_t *a1, char a2)
{
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  char v15;

  v5 = (_BYTE *)a1[1];
  v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = &v5[-*a1];
    v9 = (unint64_t)(v8 + 1);
    if ((uint64_t)(v8 + 1) < 0)
      std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
    v10 = v4 - v7;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (unint64_t)operator new(v11);
    else
      v12 = 0;
    v13 = (char *)(v12 + v11);
    v8[v12] = a2;
    v6 = (uint64_t)&v8[v12 + 1];
    if (v5 == (_BYTE *)v7)
    {
      v12 += (unint64_t)v8;
    }
    else
    {
      v14 = &v5[~v7];
      do
      {
        v15 = *--v5;
        (v14--)[v12] = v15;
      }
      while (v5 != (_BYTE *)v7);
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = (unint64_t)v13;
    if (v7)
      operator delete((void *)v7);
  }
  else
  {
    *v5 = a2;
    v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
}

_QWORD *__copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c34_ZTSN4gnss9Emergency4Supl7ContextE160c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  if (*(char *)(a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = v4;
  }
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v5 = (std::string *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 112), *(_QWORD *)(a2 + 120));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *(_OWORD *)(a2 + 136);
  v8 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = v8;
  *(_OWORD *)(a1 + 136) = v7;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(a1 + 160), *(const void **)(a2 + 160), *(_QWORD *)(a2 + 168), *(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160));
}

void sub_21E562A80(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  void **v3;
  _QWORD *v5;
  uint64_t v6;

  if (*(char *)(v2 + 103) < 0)
    operator delete(*v3);
  v5 = *(_QWORD **)(v2 + 64);
  if (v5 == v1)
  {
    v6 = 4;
    v5 = v1;
  }
  else
  {
    if (!v5)
      goto LABEL_8;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_8:
  _Unwind_Resume(exception_object);
}

void gnss::Emergency::Supl::Context::~Context(void **this)
{
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

_QWORD *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c34_ZTSN4gnss9Emergency4Supl7ContextE160c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(uint64_t a1)
{
  void *v2;
  _QWORD *result;
  uint64_t v4;

  v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(_QWORD *)(a1 + 168) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  result = *(_QWORD **)(a1 + 64);
  if (result == (_QWORD *)(a1 + 40))
  {
    v4 = 4;
    result = (_QWORD *)(a1 + 40);
  }
  else
  {
    if (!result)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

_QWORD *gnss::GnssAdaptDevice::setSuplLocationIdNeededReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  _QWORD block[5];
  _BYTE v12[24];
  _BYTE *v13;
  _BYTE v14[24];
  _BYTE *v15;
  char __str[1040];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a3 + 24))
  {
    result = (_QWORD *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v8 = mach_continuous_time();
      v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "setSuplLocationIdNeededReport", 513);
      return (_QWORD *)LbsOsaTrace_WriteLog(0x18u, __str, v9, 0, 1);
    }
    return result;
  }
  v4 = *(NSObject **)(a1 + 288);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZN4gnss15GnssAdaptDevice29setSuplLocationIdNeededReportENSt3__18functionIFNS_6ResultEvEEENS2_IFvS3_EEE_block_invoke;
  block[3] = &__block_descriptor_tmp_31;
  block[4] = a1;
  v5 = v12;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v12, a2);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v14, a3);
  dispatch_async(v4, block);
  result = v15;
  if (v15 == v14)
  {
    v7 = 4;
    result = v14;
    goto LABEL_8;
  }
  if (v15)
  {
    v7 = 5;
LABEL_8:
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
  if (v13 == v12)
  {
    v10 = 4;
  }
  else
  {
    if (!v13)
      return result;
    v10 = 5;
    v5 = v13;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v10))(v5);
}

void sub_21E562DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

size_t ___ZN4gnss15GnssAdaptDevice29setSuplLocationIdNeededReportENSt3__18functionIFNS_6ResultEvEEENS2_IFvS3_EEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  size_t result;
  uint64_t v13;
  unsigned __int16 v14;
  _BYTE v15[24];
  _BYTE *v16;
  char __str[24];
  char *v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v3 = mach_continuous_time();
    v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setSuplLocationIdNeededReport_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)__str, a1 + 40);
  v5 = v2 + 920;
  if (__str != (char *)(v2 + 920))
  {
    v6 = v18;
    v7 = *(_QWORD *)(v2 + 944);
    if (v18 == __str)
    {
      if (v7 == v5)
      {
        (*(void (**)(char *, _QWORD *))(*(_QWORD *)__str + 24))(__str, v19);
        (*(void (**)(char *))(*(_QWORD *)v18 + 32))(v18);
        v18 = 0;
        (*(void (**)(_QWORD, char *))(**(_QWORD **)(v2 + 944) + 24))(*(_QWORD *)(v2 + 944), __str);
        (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 944) + 32))(*(_QWORD *)(v2 + 944));
        *(_QWORD *)(v2 + 944) = 0;
        v18 = __str;
        (*(void (**)(_QWORD *, uint64_t))(v19[0] + 24))(v19, v2 + 920);
        (*(void (**)(_QWORD *))(v19[0] + 32))(v19);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(*(_QWORD *)__str + 24))(__str, v2 + 920);
        (*(void (**)(char *))(*(_QWORD *)v18 + 32))(v18);
        v18 = *(char **)(v2 + 944);
      }
      *(_QWORD *)(v2 + 944) = v5;
    }
    else if (v7 == v5)
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 24))(v2 + 920, __str);
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 944) + 32))(*(_QWORD *)(v2 + 944));
      *(_QWORD *)(v2 + 944) = v18;
      v18 = __str;
    }
    else
    {
      v18 = *(char **)(v2 + 944);
      *(_QWORD *)(v2 + 944) = v6;
    }
  }
  v8 = v18;
  if (v18 == __str)
  {
    v9 = 4;
    v8 = __str;
  }
  else
  {
    if (!v18)
      goto LABEL_17;
    v9 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
LABEL_17:
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v15, a1 + 72);
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v15, (uint64_t)"setSuplLocationIdNeededReport_block_invoke");
  v10 = v16;
  if (v16 == v15)
  {
    v11 = 4;
    v10 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_22;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_22:
  result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if ((_DWORD)result)
  {
    bzero(__str, 0x410uLL);
    v13 = mach_continuous_time();
    v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 68, "setSuplLocationIdNeededReport_block_invoke");
    return LbsOsaTrace_WriteLog(0x18u, __str, v14, 5, 1);
  }
  return result;
}

void sub_21E563140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18functionIFN4gnss6ResultEvEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1, uint64_t a2)
{
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 72, a2 + 72);
}

void sub_21E563208(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  v3 = v2;
  v5 = *(_QWORD **)(v3 + 64);
  if (v5 == v1)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v1 = v5;
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v6))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFN4gnss6ResultEvEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 5;
  v3 = a1 + 9;
  v4 = (_QWORD *)a1[12];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  result = (_QWORD *)a1[8];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void gnss::GnssAdaptDevice::setSuplLocationId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  _QWORD block[5];
  _BYTE v15[24];
  _BYTE *v16;
  int v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *__p;
  void *v25;
  uint64_t v26;
  char __str[8];
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a3 + 24))
  {
    *(_DWORD *)__str = *(_DWORD *)a2;
    v29 = 0;
    v30 = 0;
    v28 = 0;
    std::vector<gnss::Emergency::Supl::LteCellInfo>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::LteCellInfo*,gnss::Emergency::Supl::LteCellInfo*>(&v28, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2));
    v31 = 0;
    v32 = 0;
    v33 = 0;
    std::vector<gnss::Emergency::Supl::GsmCellInfo>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::GsmCellInfo*,gnss::Emergency::Supl::GsmCellInfo*>(&v31, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 4);
    v34 = 0;
    v35 = 0;
    v36 = 0;
    std::vector<gnss::Emergency::Supl::WcdmaCellInfo>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::WcdmaCellInfo*,gnss::Emergency::Supl::WcdmaCellInfo*>(&v34, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 5);
    v6 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice17setSuplLocationIdERKNS_9Emergency4Supl10LocationIdENSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_41;
    block[4] = a1;
    v7 = v15;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v15, a3);
    v17 = *(_DWORD *)__str;
    v19 = 0;
    v20 = 0;
    v18 = 0;
    v8 = v28;
    std::vector<gnss::Emergency::Supl::LteCellInfo>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::LteCellInfo*,gnss::Emergency::Supl::LteCellInfo*>(&v18, v28, v29, 0x6DB6DB6DB6DB6DB7 * ((v29 - (uint64_t)v28) >> 2));
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v9 = v31;
    std::vector<gnss::Emergency::Supl::GsmCellInfo>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::GsmCellInfo*,gnss::Emergency::Supl::GsmCellInfo*>(&v21, v31, v32, (v32 - (uint64_t)v31) >> 4);
    __p = 0;
    v25 = 0;
    v26 = 0;
    v10 = v34;
    std::vector<gnss::Emergency::Supl::WcdmaCellInfo>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::WcdmaCellInfo*,gnss::Emergency::Supl::WcdmaCellInfo*>(&__p, v34, v35, (v35 - (uint64_t)v34) >> 5);
    dispatch_async(v6, block);
    if (__p)
    {
      v25 = __p;
      operator delete(__p);
    }
    if (v21)
    {
      v22 = v21;
      operator delete(v21);
    }
    if (v18)
    {
      v19 = v18;
      operator delete(v18);
    }
    if (v16 == v15)
    {
      v11 = 4;
    }
    else
    {
      if (!v16)
      {
LABEL_15:
        if (v10)
          operator delete(v10);
        if (v9)
          operator delete(v9);
        if (v8)
          operator delete(v8);
        return;
      }
      v11 = 5;
      v7 = v16;
    }
    (*(void (**)(_QWORD *))(*v7 + 8 * v11))(v7);
    goto LABEL_15;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v12 = mach_continuous_time();
    v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 69, "setSuplLocationId", 513);
    LbsOsaTrace_WriteLog(0x18u, __str, v13, 0, 1);
  }
}

void sub_21E5635F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,void *a35,uint64_t a36,uint64_t a37,void *a38)
{
  _QWORD *v38;
  uint64_t v40;

  if (__p)
    operator delete(__p);
  if (a25)
    operator delete(a25);
  if (a23 == v38)
  {
    v40 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_10;
    v40 = 5;
    v38 = a23;
  }
  (*(void (**)(_QWORD *))(*v38 + 8 * v40))(v38);
LABEL_10:
  gnss::Emergency::Supl::LocationId::~LocationId((gnss::Emergency::Supl::LocationId *)&a34);
  _Unwind_Resume(a1);
}

void sub_21E5657C0(_Unwind_Exception *a1)
{
  unint64_t *v2;
  uint64_t v3;

  v2 = (unint64_t *)STACK[0x19D8];
  if ((unint64_t *)STACK[0x19D8] == &STACK[0x19C0])
  {
    v3 = 4;
    v2 = &STACK[0x19C0];
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c38_ZTSN4gnss9Emergency4Supl10LocationIdE(uint64_t a1, uint64_t a2)
{
  int v4;

  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
  v4 = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 72) = v4;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<gnss::Emergency::Supl::LteCellInfo>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::LteCellInfo*,gnss::Emergency::Supl::LteCellInfo*>((_QWORD *)(a1 + 80), *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2));
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<gnss::Emergency::Supl::GsmCellInfo>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::GsmCellInfo*,gnss::Emergency::Supl::GsmCellInfo*>((_QWORD *)(a1 + 104), *(const void **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 4);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  return std::vector<gnss::Emergency::Supl::WcdmaCellInfo>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::WcdmaCellInfo*,gnss::Emergency::Supl::WcdmaCellInfo*>((_QWORD *)(a1 + 128), *(const void **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 5);
}

void sub_21E565A64(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;

  v6 = *v4;
  if (*v4)
  {
    v2[14] = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    v2[11] = v7;
    operator delete(v7);
  }
  v8 = (_QWORD *)v2[8];
  if (v8 == v1)
  {
    v9 = 4;
    v8 = v1;
  }
  else
  {
    if (!v8)
      goto LABEL_10;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_10:
  _Unwind_Resume(exception_object);
}

_QWORD *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c38_ZTSN4gnss9Emergency4Supl10LocationIdE(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *result;
  uint64_t v6;

  v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[13];
  if (v3)
  {
    a1[14] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[10];
  if (v4)
  {
    a1[11] = v4;
    operator delete(v4);
  }
  result = (_QWORD *)a1[8];
  if (result == a1 + 5)
  {
    v6 = 4;
    result = a1 + 5;
  }
  else
  {
    if (!result)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void gnss::Emergency::Supl::LocationId::~LocationId(gnss::Emergency::Supl::LocationId *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
}

_QWORD *gnss::GnssAdaptDevice::abortSuplSession(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  _QWORD block[5];
  _BYTE v8[24];
  _BYTE *v9;
  char __str[1040];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice16abortSuplSessionENSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_44;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v8, a2);
    dispatch_async(v2, block);
    result = v9;
    if (v9 == v8)
    {
      v4 = 4;
      result = v8;
    }
    else
    {
      if (!v9)
        return result;
      v4 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
  }
  else
  {
    result = (_QWORD *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v5 = mach_continuous_time();
      v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "abortSuplSession", 513);
      return (_QWORD *)LbsOsaTrace_WriteLog(0x18u, __str, v6, 0, 1);
    }
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice16abortSuplSessionENSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t result;
  uint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 v19;
  _BYTE v20[24];
  _BYTE *v21;
  char __str[1040];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v3 = mach_continuous_time();
    v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "abortSuplSession_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  std::function<void ()(gnss::Result)>::operator=((_QWORD *)(v2 + 568), a1 + 40);
  v5 = GNS_SuplAbortSession(*(_DWORD *)(v2 + 1016));
  if (v5 == 1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v6 = mach_continuous_time();
      v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SuplAbortSession success\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 73, "abortSuplSession_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v7, 4, 1);
    }
    result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 68, "abortSuplSession_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v10, 5, 1);
    }
    return result;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v11 = mach_continuous_time();
    v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SuplAbortSession,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "abortSuplSession_block_invoke", 257, v5);
    LbsOsaTrace_WriteLog(0x18u, __str, v12, 0, 1);
  }
  v13 = gnss::GnssAdaptDevice::Ga07_16MapGnsRespToGnssResult(v2, v5);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v20, a1 + 40);
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, v13, (uint64_t)v20, (uint64_t)"abortSuplSession_block_invoke");
  v14 = v21;
  if (v21 == v20)
  {
    v15 = 4;
    v14 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_15;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_15:
  v16 = *(_QWORD **)(v2 + 592);
  *(_QWORD *)(v2 + 592) = 0;
  if (v16 == (_QWORD *)(v2 + 568))
  {
    v17 = 4;
    v16 = (_QWORD *)(v2 + 568);
  }
  else
  {
    if (!v16)
      goto LABEL_20;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_20:
  result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if ((_DWORD)result)
  {
    bzero(__str, 0x410uLL);
    v18 = mach_continuous_time();
    v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 68, "abortSuplSession_block_invoke");
    return LbsOsaTrace_WriteLog(0x18u, __str, v19, 5, 1);
  }
  return result;
}

void sub_21E566148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

_QWORD *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

_QWORD *gnss::GnssAdaptDevice::setSuplSessionStatusReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  _QWORD block[5];
  _BYTE v12[24];
  _BYTE *v13;
  _BYTE v14[24];
  _BYTE *v15;
  char __str[1040];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a3 + 24))
  {
    result = (_QWORD *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v8 = mach_continuous_time();
      v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "setSuplSessionStatusReport", 513);
      return (_QWORD *)LbsOsaTrace_WriteLog(0x18u, __str, v9, 0, 1);
    }
    return result;
  }
  v4 = *(NSObject **)(a1 + 288);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZN4gnss15GnssAdaptDevice26setSuplSessionStatusReportENSt3__18functionIFvRKNS_9Emergency4Supl13SessionStatusEEEENS2_IFvNS_6ResultEEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_46;
  block[4] = a1;
  v5 = v12;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v12, a2);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v14, a3);
  dispatch_async(v4, block);
  result = v15;
  if (v15 == v14)
  {
    v7 = 4;
    result = v14;
    goto LABEL_8;
  }
  if (v15)
  {
    v7 = 5;
LABEL_8:
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
  if (v13 == v12)
  {
    v10 = 4;
  }
  else
  {
    if (!v13)
      return result;
    v10 = 5;
    v5 = v13;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v10))(v5);
}

void sub_21E56641C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

size_t ___ZN4gnss15GnssAdaptDevice26setSuplSessionStatusReportENSt3__18functionIFvRKNS_9Emergency4Supl13SessionStatusEEEENS2_IFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 v4;
  uint64_t v5;
  unsigned __int16 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  size_t result;
  uint64_t v15;
  unsigned __int16 v16;
  _BYTE v17[24];
  _BYTE *v18;
  char __str[24];
  char *v20;
  _QWORD v21[4];

  v21[3] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v3 = mach_continuous_time();
    v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setSuplSessionStatusReport_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (!*(_QWORD *)(a1 + 64) && LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v5 = mach_continuous_time();
    v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StatusRep\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "setSuplSessionStatusReport_block_invoke", 258);
    LbsOsaTrace_WriteLog(0x18u, __str, v6, 0, 1);
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)__str, a1 + 40);
  v7 = v2 + 984;
  if (__str != (char *)(v2 + 984))
  {
    v8 = v20;
    v9 = *(_QWORD *)(v2 + 1008);
    if (v20 == __str)
    {
      if (v9 == v7)
      {
        (*(void (**)(char *, _QWORD *))(*(_QWORD *)__str + 24))(__str, v21);
        (*(void (**)(char *))(*(_QWORD *)v20 + 32))(v20);
        v20 = 0;
        (*(void (**)(_QWORD, char *))(**(_QWORD **)(v2 + 1008) + 24))(*(_QWORD *)(v2 + 1008), __str);
        (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 1008) + 32))(*(_QWORD *)(v2 + 1008));
        *(_QWORD *)(v2 + 1008) = 0;
        v20 = __str;
        (*(void (**)(_QWORD *, uint64_t))(v21[0] + 24))(v21, v2 + 984);
        (*(void (**)(_QWORD *))(v21[0] + 32))(v21);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(*(_QWORD *)__str + 24))(__str, v2 + 984);
        (*(void (**)(char *))(*(_QWORD *)v20 + 32))(v20);
        v20 = *(char **)(v2 + 1008);
      }
      *(_QWORD *)(v2 + 1008) = v7;
    }
    else if (v9 == v7)
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 24))(v2 + 984, __str);
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 1008) + 32))(*(_QWORD *)(v2 + 1008));
      *(_QWORD *)(v2 + 1008) = v20;
      v20 = __str;
    }
    else
    {
      v20 = *(char **)(v2 + 1008);
      *(_QWORD *)(v2 + 1008) = v8;
    }
  }
  v10 = v20;
  if (v20 == __str)
  {
    v11 = 4;
    v10 = __str;
  }
  else
  {
    if (!v20)
      goto LABEL_20;
    v11 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v10 + 8 * v11))();
LABEL_20:
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v17, a1 + 72);
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v17, (uint64_t)"setSuplSessionStatusReport_block_invoke");
  v12 = v18;
  if (v18 == v17)
  {
    v13 = 4;
    v12 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_25;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_25:
  result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if ((_DWORD)result)
  {
    bzero(__str, 0x410uLL);
    v15 = mach_continuous_time();
    v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 68, "setSuplSessionStatusReport_block_invoke");
    return LbsOsaTrace_WriteLog(0x18u, __str, v16, 5, 1);
  }
  return result;
}

void sub_21E56680C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c65_ZTSNSt3__18functionIFvRKN4gnss9Emergency4Supl13SessionStatusEEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1, uint64_t a2)
{
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 72, a2 + 72);
}

void sub_21E5668D4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  v3 = v2;
  v5 = *(_QWORD **)(v3 + 64);
  if (v5 == v1)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v1 = v5;
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v6))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *__destroy_helper_block_e8_40c65_ZTSNSt3__18functionIFvRKN4gnss9Emergency4Supl13SessionStatusEEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 5;
  v3 = a1 + 9;
  v4 = (_QWORD *)a1[12];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  result = (_QWORD *)a1[8];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

_QWORD *gnss::GnssAdaptDevice::setSuplWlanMeasurementNeededReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[5];
  _BYTE v14[24];
  _BYTE *v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = *(NSObject **)(a1 + 288);
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 1174405120;
  v13[2] = ___ZN4gnss15GnssAdaptDevice34setSuplWlanMeasurementNeededReportENSt3__18functionIFNS_6ResultERKNS_9Emergency4Supl22WlanMeasurementRequestEEEENS2_IFvS3_EEE_block_invoke;
  v13[3] = &__block_descriptor_tmp_47;
  v13[4] = a1;
  v5 = v14;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v14, a3);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
  dispatch_async(v4, v13);
  result = v17;
  if (v17 == v16)
  {
    v11 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v11 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*result + 8 * v11))(result, v6, v7, v8, v9);
LABEL_6:
  if (v15 == v14)
  {
    v12 = 4;
  }
  else
  {
    if (!v15)
      return result;
    v12 = 5;
    v5 = v15;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v12))(v5);
}

void sub_21E566B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  _QWORD *v17;
  uint64_t v19;

  if (a17 == v17)
  {
    v19 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
    v17 = a17;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN4gnss15GnssAdaptDevice34setSuplWlanMeasurementNeededReportENSt3__18functionIFNS_6ResultERKNS_9Emergency4Supl22WlanMeasurementRequestEEEENS2_IFvS3_EEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  _BYTE v18[24];
  _BYTE *v19;
  char __str[24];
  char *v21;
  _QWORD v22[4];

  v22[3] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v3 = mach_continuous_time();
    v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "setSuplWlanMeasurementNeededReport_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*(_QWORD *)(a1 + 64))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)__str, a1 + 72);
    v5 = v2 + 952;
    if (__str != (char *)(v2 + 952))
    {
      v6 = v21;
      v7 = *(_QWORD *)(v2 + 976);
      if (v21 == __str)
      {
        if (v7 == v5)
        {
          (*(void (**)(char *, _QWORD *))(*(_QWORD *)__str + 24))(__str, v22);
          (*(void (**)(char *))(*(_QWORD *)v21 + 32))(v21);
          v21 = 0;
          (*(void (**)(_QWORD, char *))(**(_QWORD **)(v2 + 976) + 24))(*(_QWORD *)(v2 + 976), __str);
          (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 976) + 32))(*(_QWORD *)(v2 + 976));
          *(_QWORD *)(v2 + 976) = 0;
          v21 = __str;
          (*(void (**)(_QWORD *, uint64_t))(v22[0] + 24))(v22, v2 + 952);
          (*(void (**)(_QWORD *))(v22[0] + 32))(v22);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(*(_QWORD *)__str + 24))(__str, v2 + 952);
          (*(void (**)(char *))(*(_QWORD *)v21 + 32))(v21);
          v21 = *(char **)(v2 + 976);
        }
        *(_QWORD *)(v2 + 976) = v5;
      }
      else if (v7 == v5)
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 24))(v2 + 952, __str);
        (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 976) + 32))(*(_QWORD *)(v2 + 976));
        *(_QWORD *)(v2 + 976) = v21;
        v21 = __str;
      }
      else
      {
        v21 = *(char **)(v2 + 976);
        *(_QWORD *)(v2 + 976) = v6;
      }
    }
    v11 = a1 + 40;
    v12 = v21;
    if (v21 == __str)
    {
      v13 = 4;
      v12 = __str;
    }
    else
    {
      if (!v21)
        goto LABEL_20;
      v13 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
LABEL_20:
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v18, v11);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v18, (uint64_t)"setSuplWlanMeasurementNeededReport_block_invoke");
    v14 = v19;
    if (v19 == v18)
    {
      v15 = 4;
      v14 = v18;
    }
    else
    {
      if (!v19)
        goto LABEL_25;
      v15 = 5;
    }
    (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_25:
    result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v16 = mach_continuous_time();
      v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 68, "setSuplWlanMeasurementNeededReport_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v17, 5, 1);
    }
    return result;
  }
  result = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
  if ((_DWORD)result)
  {
    bzero(__str, 0x410uLL);
    v9 = mach_continuous_time();
    v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 69, "setSuplWlanMeasurementNeededReport_block_invoke", 513);
    return LbsOsaTrace_WriteLog(0x18u, __str, v10, 0, 1);
  }
  return result;
}

void sub_21E566EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c85_ZTSNSt3__18functionIFN4gnss6ResultERKNS1_9Emergency4Supl22WlanMeasurementRequestEEEE(uint64_t a1, uint64_t a2)
{
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 72, a2 + 72);
}

void sub_21E566FC0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  v3 = v2;
  v5 = *(_QWORD **)(v3 + 64);
  if (v5 == v1)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v1 = v5;
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v6))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c85_ZTSNSt3__18functionIFN4gnss6ResultERKNS1_9Emergency4Supl22WlanMeasurementRequestEEEE(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 5;
  v3 = a1 + 9;
  v4 = (_QWORD *)a1[12];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  result = (_QWORD *)a1[8];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void gnss::GnssAdaptDevice::setSuplWlanMeasurements(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  _QWORD block[5];
  _BYTE v12[24];
  _BYTE *v13;
  int v14;
  void *__p;
  void *v16;
  uint64_t v17;
  char __str[8];
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a3 + 24))
  {
    *(_DWORD *)__str = *(_DWORD *)a2;
    v20 = 0;
    v21 = 0;
    v19 = 0;
    std::vector<gnss::Emergency::Supl::WlanMeasurementElement>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::WlanMeasurementElement*,gnss::Emergency::Supl::WlanMeasurementElement*>(&v19, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2));
    v5 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice23setSuplWlanMeasurementsERKNS_9Emergency4Supl19WlanMeasurementListENSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_53;
    block[4] = a1;
    v6 = v12;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v12, a3);
    v14 = *(_DWORD *)__str;
    v16 = 0;
    v17 = 0;
    __p = 0;
    v7 = v19;
    std::vector<gnss::Emergency::Supl::WlanMeasurementElement>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::WlanMeasurementElement*,gnss::Emergency::Supl::WlanMeasurementElement*>(&__p, v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 2));
    dispatch_async(v5, block);
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
    if (v13 == v12)
    {
      v8 = 4;
    }
    else
    {
      if (!v13)
        goto LABEL_11;
      v8 = 5;
      v6 = v13;
    }
    (*(void (**)(_QWORD *))(*v6 + 8 * v8))(v6);
LABEL_11:
    if (v7)
      operator delete(v7);
    return;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v9 = mach_continuous_time();
    v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 69, "setSuplWlanMeasurements", 513);
    LbsOsaTrace_WriteLog(0x18u, __str, v10, 0, 1);
  }
}

void sub_21E5672DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  void *v29;
  _QWORD *v30;
  uint64_t v32;

  if (a23 == v30)
  {
    v32 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v32 = 5;
    v30 = a23;
  }
  (*(void (**)(_QWORD *))(*v30 + 8 * v32))(v30);
LABEL_6:
  if (v29)
    operator delete(v29);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN4gnss15GnssAdaptDevice23setSuplWlanMeasurementsERKNS_9Emergency4Supl19WlanMeasurementListENSt3__18functionIFvNS_6ResultEEEE_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int16 v2;
  uint64_t v3;
  char *v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t result;
  uint64_t v11;
  unsigned __int16 v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  unint64_t i;
  uint64_t v19;
  unsigned __int16 v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  _WORD *v27;
  int v28;
  uint64_t v29;
  unsigned __int16 v30;
  uint64_t v31;
  unsigned int v32;
  _OWORD *v33;
  char *v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int16 v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int16 v43;
  uint64_t v44;
  unsigned __int16 v45;
  uint64_t v46;
  _BYTE v47[24];
  _BYTE *v48;
  _BYTE v49[24];
  _BYTE *v50;
  char v51[1040];
  char __str[4];
  _QWORD v53[2];
  uint64_t v54;
  unsigned __int8 v55;
  _OWORD v56[192];
  _BYTE v57[24];
  _BYTE *v58;
  uint64_t v59;

  v0 = MEMORY[0x24BDAC7A8]();
  v59 = *MEMORY[0x24BDAC8D0];
  v46 = *(_QWORD *)(v0 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v1 = mach_continuous_time();
    v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "ADP", 68, "setSuplWlanMeasurements_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v2, 5, 1);
  }
  if (*(_BYTE *)(v46 + 88))
  {
    __str[0] = 0;
    v53[0] = 0;
    *(_QWORD *)((char *)v53 + 6) = 0;
    v54 = 0;
    v3 = 32;
    v55 = 0;
    do
    {
      v4 = &__str[v3];
      *(_QWORD *)(v4 + 31) = 0;
      *(_OWORD *)v4 = 0uLL;
      *((_OWORD *)v4 + 1) = 0uLL;
      *((_QWORD *)v4 + 5) = 4294934527;
      v3 += 48;
    }
    while (v4 + 48 != v57);
    switch(*(_DWORD *)(v0 + 72))
    {
      case 0:
        v5 = 0;
        HIDWORD(v54) = 14;
        break;
      case 1:
        v5 = 1;
        goto LABEL_22;
      case 2:
        v5 = 2;
LABEL_22:
        HIDWORD(v54) = v5;
        break;
      case 3:
        HIDWORD(v54) = 11;
        v5 = 3;
        break;
      case 4:
        HIDWORD(v54) = 7;
        v5 = 4;
        break;
      default:
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(v51, 0x410uLL);
          v13 = mach_continuous_time();
          v14 = snprintf(v51, 0x40FuLL, "%10u %s%c %s: #%04hx result,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 69, "setSuplWlanMeasurements_block_invoke", 515, *(_DWORD *)(v0 + 72));
          LbsOsaTrace_WriteLog(0x18u, v51, v14, 0, 1);
        }
        v5 = *(_DWORD *)(v0 + 72);
        break;
    }
    if (*(_QWORD *)(v0 + 88) == *(_QWORD *)(v0 + 80))
    {
      if (v5 != 1)
        goto LABEL_32;
    }
    else if (v5 == 1)
    {
      goto LABEL_32;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
    {
      bzero(v51, 0x410uLL);
      v15 = mach_continuous_time();
      v16 = snprintf(v51, 0x40FuLL, "%10u %s%c %s: #%04hx WLAN Measurements\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 87, "setSuplWlanMeasurements_block_invoke", 515);
      LbsOsaTrace_WriteLog(0x18u, v51, v16, 2, 1);
    }
    HIDWORD(v54) = 2;
LABEL_32:
    if (HIDWORD(v54) == 1 && *(_QWORD *)(v0 + 88) != *(_QWORD *)(v0 + 80))
    {
      v17 = 0;
      for (i = 0; i < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v0 + 88) - *(_QWORD *)(v0 + 80)) >> 2); ++i)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
        {
          bzero(v51, 0x410uLL);
          v19 = mach_continuous_time();
          v20 = snprintf(v51, 0x40FuLL, "%10u %s%c %s: result,%u,apChFreqNum,%hu,rssiDbm,%hi,srvFlag,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 73, "setSuplWlanMeasurements_block_invoke", *(_DWORD *)(v0 + 72), *(unsigned __int16 *)(*(_QWORD *)(v0 + 80) + 12 * i + 8), *(__int16 *)(*(_QWORD *)(v0 + 80) + 12 * i + 10), *(unsigned __int8 *)(*(_QWORD *)(v0 + 80) + 12 * i + 7));
          LbsOsaTrace_WriteLog(0x18u, v51, v20, 4, 1);
        }
        v21 = *(_QWORD *)(v0 + 80);
        v22 = v21 + 12 * i;
        v24 = *(unsigned __int16 *)(v22 + 8);
        v23 = (_WORD *)(v22 + 8);
        if (v24 <= 0x100
          && ((v25 = v21 + 12 * i,
               v28 = *(unsigned __int16 *)(v25 + 10),
               v27 = (_WORD *)(v25 + 10),
               v26 = v28,
               v28 == 0x7FFF)
           || (v26 - 128) >> 8 >= 0xFF))
        {
          v31 = 0;
          v32 = v55;
          v33 = &v56[3 * v55];
          do
          {
            *((_BYTE *)v33 + v31) = *(_BYTE *)(v21 + v17 + v31);
            ++v31;
          }
          while (v31 != 6);
          v34 = &__str[48 * v32];
          *((_WORD *)v34 + 36) = *v27;
          *((_WORD *)v34 + 37) = *v23;
          if (*(_BYTE *)(v21 + 12 * i + 6))
          {
            if (*(_BYTE *)(v21 + 12 * i + 7))
              v35 = 1;
            else
              v35 = 2;
            HIDWORD(v56[3 * v32 + 2]) = v35;
          }
          v55 = v32 + 1;
          if ((v32 + 1) > 0x3Fu)
            break;
        }
        else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
        {
          bzero(v51, 0x410uLL);
          v29 = mach_continuous_time();
          v30 = snprintf(v51, 0x40FuLL, "%10u %s%c %s: #%04hx WLAN Measurement\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "ADP", 87, "setSuplWlanMeasurements_block_invoke", 772);
          LbsOsaTrace_WriteLog(0x18u, v51, v30, 2, 1);
        }
        v17 += 12;
      }
    }
    if (GNS_WlMeas(0, __str) == 1)
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v47, v0 + 40);
      gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v46, 1, (uint64_t)v47, (uint64_t)"setSuplWlanMeasurements_block_invoke");
      v36 = v48;
      if (v48 == v47)
      {
        v37 = 4;
        v36 = v47;
      }
      else
      {
        if (!v48)
          goto LABEL_62;
        v37 = 5;
      }
      (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_62:
      result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if ((_DWORD)result)
      {
        bzero(v51, 0x410uLL);
        v42 = mach_continuous_time();
        v43 = snprintf(v51, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v42), "ADP", 68, "setSuplWlanMeasurements_block_invoke");
        return LbsOsaTrace_WriteLog(0x18u, v51, v43, 5, 1);
      }
      return result;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(v51, 0x410uLL);
      v38 = mach_continuous_time();
      v39 = snprintf(v51, 0x40FuLL, "%10u %s%c %s: #%04hx WLAN Measurements not Set\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v38), "ADP", 69, "setSuplWlanMeasurements_block_invoke", 257);
      LbsOsaTrace_WriteLog(0x18u, v51, v39, 0, 1);
    }
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v49, v0 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v46, 8, (uint64_t)v49, (uint64_t)"setSuplWlanMeasurements_block_invoke");
    v40 = v50;
    if (v50 == v49)
    {
      v41 = 4;
      v40 = v49;
    }
    else
    {
      if (!v50)
        goto LABEL_66;
      v41 = 5;
    }
    (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_66:
    result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if ((_DWORD)result)
    {
      bzero(v51, 0x410uLL);
      v44 = mach_continuous_time();
      v45 = snprintf(v51, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v44), "ADP", 68, "setSuplWlanMeasurements_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, v51, v45, 5, 1);
    }
    return result;
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v57, v0 + 40);
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v46, 7, (uint64_t)v57, (uint64_t)"setSuplWlanMeasurements_block_invoke");
  v6 = v58;
  if (v58 == v57)
  {
    v7 = 4;
    v6 = v57;
    goto LABEL_12;
  }
  if (v58)
  {
    v7 = 5;
LABEL_12:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v8 = mach_continuous_time();
    v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "setSuplWlanMeasurements_block_invoke", 1302);
    LbsOsaTrace_WriteLog(0x18u, __str, v9, 0, 1);
  }
  result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if ((_DWORD)result)
  {
    bzero(__str, 0x410uLL);
    v11 = mach_continuous_time();
    v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "setSuplWlanMeasurements_block_invoke");
    return LbsOsaTrace_WriteLog(0x18u, __str, v12, 5, 1);
  }
  return result;
}

void sub_21E567C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  char *v26;
  char *v28;
  uint64_t v29;

  v28 = a26;
  if (a26 == v26)
  {
    v29 = 4;
    v28 = &a23;
  }
  else
  {
    if (!a26)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *__copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c47_ZTSN4gnss9Emergency4Supl19WlanMeasurementListE(uint64_t a1, uint64_t a2)
{
  int v4;

  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
  v4 = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 72) = v4;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  return std::vector<gnss::Emergency::Supl::WlanMeasurementElement>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::WlanMeasurementElement*,gnss::Emergency::Supl::WlanMeasurementElement*>((_QWORD *)(a1 + 80), *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2));
}

void sub_21E567D34(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 64);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 64);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c47_ZTSN4gnss9Emergency4Supl19WlanMeasurementListE(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *result;
  uint64_t v5;

  v2 = a1 + 5;
  v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  result = (_QWORD *)a1[8];
  if (result == v2)
  {
    v5 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

uint64_t gnss::GnssAdaptDevice::Ga11_00InitializeSUPL_GNS_CBs(gnss::GnssAdaptDevice *this)
{
  uint64_t v1;
  unsigned __int16 v2;
  _BOOL8 v3;
  uint64_t v4;
  unsigned __int16 v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 v9;
  char __str[1040];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v1 = mach_continuous_time();
    v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "ADP", 68, "Ga11_00InitializeSUPL_GNS_CBs");
    LbsOsaTrace_WriteLog(0x18u, __str, v2, 5, 1);
  }
  if (!GNS_CellInfoInitialize((uint64_t)gnss::GnssAdaptDevice::Ga11_01GnsCellInfoCallback))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      goto LABEL_21;
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CellInfoInitialize\n");
    goto LABEL_20;
  }
  if (!GNS_DcInitialize((uint64_t)gnss::GnssAdaptDevice::Ga11_02DataClientCallback))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      goto LABEL_21;
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DcInitialize\n");
    goto LABEL_20;
  }
  if (!GNS_SimsInfoInitialize((void (*)(void))gnss::GnssAdaptDevice::Ga11_03SimInfoCallback))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      goto LABEL_21;
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SimsInfoInitialize\n");
    goto LABEL_20;
  }
  if (!GNS_SuplInitialize((uint64_t)gnss::GnssAdaptDevice::Ga11_17SuplAsyncEventCB))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      goto LABEL_21;
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SuplInitialize\n");
    goto LABEL_20;
  }
  v3 = GNS_WlInitialize((uint64_t)gnss::GnssAdaptDevice::Ga11_21GnsWlanInfoCB);
  if (v3)
  {
    gnss::GnssAdaptDevice::Ga11_08ProvideDefaultSimInfo((gnss::GnssAdaptDevice *)v3);
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      return 1;
    bzero(__str, 0x410uLL);
    v4 = mach_continuous_time();
    v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "Ga11_00InitializeSUPL_GNS_CBs");
    v6 = 1;
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 5, 1);
    return v6;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx WlanMeasReq\n");
LABEL_20:
    LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
  }
LABEL_21:
  v6 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v8 = mach_continuous_time();
    v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "Ga11_00InitializeSUPL_GNS_CBs");
    LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
    return 0;
  }
  return v6;
}

size_t gnss::GnssAdaptDevice::Ga11_01GnsCellInfoCallback(int a1, uint64_t a2, _DWORD *a3)
{
  gnss::GnssAdaptDevice *IsLoggingAllowed;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t DeviceInstance;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  unsigned __int16 v13;
  NSObject *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  unsigned __int16 v22;
  uint64_t v23;
  unsigned __int16 v24;
  uint64_t v25;
  unsigned __int16 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 v31;
  size_t result;
  uint64_t v33;
  unsigned __int16 v34;
  uint64_t block;
  uint64_t v36;
  void *v37;
  void *v38;
  _QWORD v39[3];
  _QWORD *v40;
  char __str[24];
  char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if ((_DWORD)IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    v6 = mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 68, "Ga11_01GnsCellInfoCallback");
    IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_WriteLog(0x18u, __str, v7, 5, 1);
  }
  DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(IsLoggingAllowed);
  if (DeviceInstance)
  {
    v9 = DeviceInstance;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v10 = mach_continuous_time();
      v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 68, "Ga11_05HandleGnsCellInfoCallback");
      LbsOsaTrace_WriteLog(0x18u, __str, v11, 5, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v12 = mach_continuous_time();
      v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: msgType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 73, "Ga11_05HandleGnsCellInfoCallback", a1);
      LbsOsaTrace_WriteLog(0x18u, __str, v13, 4, 1);
    }
    if (a1 != 1)
    {
      if (a1)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v21 = mach_continuous_time();
          v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GNS SUPL MsgType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 69, "Ga11_05HandleGnsCellInfoCallback", 770, a1);
          LbsOsaTrace_WriteLog(0x18u, __str, v22, 0, 1);
        }
        goto LABEL_35;
      }
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)__str, v9 + 920);
      v14 = *(NSObject **)(v9 + 296);
      block = MEMORY[0x24BDAC760];
      v36 = 1174405120;
      v37 = ___ZN4gnss15GnssAdaptDevice32Ga11_05HandleGnsCellInfoCallbackE15e_gnsCI_MsgTypeP15u_gnsCI_MsgData_block_invoke;
      v38 = &__block_descriptor_tmp_62;
      v15 = v39;
      v16 = (uint64_t)v42;
      if (v42)
      {
        if (v42 == __str)
        {
          v40 = v39;
          (*(void (**)(char *, _QWORD *))(*(_QWORD *)__str + 24))(__str, v39);
LABEL_25:
          dispatch_async(v14, &block);
          if (v40 == v39)
          {
            v27 = 4;
          }
          else
          {
            if (!v40)
              goto LABEL_30;
            v27 = 5;
            v15 = v40;
          }
          (*(void (**)(_QWORD *))(*v15 + 8 * v27))(v15);
LABEL_30:
          v28 = v42;
          if (v42 == __str)
          {
            v29 = 4;
            v28 = __str;
          }
          else
          {
            if (!v42)
              goto LABEL_35;
            v29 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_35:
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
          {
            bzero(__str, 0x410uLL);
            v30 = mach_continuous_time();
            v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "ADP", 68, "Ga11_05HandleGnsCellInfoCallback");
            LbsOsaTrace_WriteLog(0x18u, __str, v31, 5, 1);
          }
          goto LABEL_37;
        }
        v16 = (*(uint64_t (**)(void))(*(_QWORD *)v42 + 16))();
      }
      v40 = (_QWORD *)v16;
      goto LABEL_25;
    }
    if (a3)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v17 = mach_continuous_time();
        v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: API,%u,status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 73, "Ga11_05HandleGnsCellInfoCallback", *a3, a3[1]);
        LbsOsaTrace_WriteLog(0x18u, __str, v18, 4, 1);
      }
      v19 = *(_QWORD *)a3;
      v20 = *(NSObject **)(v9 + 288);
      block = MEMORY[0x24BDAC760];
      v36 = 0x40000000;
      v37 = ___ZN4gnss15GnssAdaptDevice32Ga11_05HandleGnsCellInfoCallbackE15e_gnsCI_MsgTypeP15u_gnsCI_MsgData_block_invoke_65;
      v38 = &__block_descriptor_tmp_71;
      v39[0] = v9;
      v39[1] = v19;
      dispatch_async(v20, &block);
      goto LABEL_35;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v23 = mach_continuous_time();
      v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MsgData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 69, "Ga11_05HandleGnsCellInfoCallback", 770);
      LbsOsaTrace_WriteLog(0x18u, __str, v24, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v25 = mach_continuous_time();
      v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "ADP", 68, "Ga11_05HandleGnsCellInfoCallback");
      LbsOsaTrace_WriteLog(0x18u, __str, v26, 5, 1);
    }
  }
LABEL_37:
  result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if ((_DWORD)result)
  {
    bzero(__str, 0x410uLL);
    v33 = mach_continuous_time();
    v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "ADP", 68, "Ga11_01GnsCellInfoCallback");
    return LbsOsaTrace_WriteLog(0x18u, __str, v34, 5, 1);
  }
  return result;
}

void sub_21E5688A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  char *v28;
  uint64_t v29;

  v28 = a27;
  if (a27 == &a24)
  {
    v29 = 4;
    v28 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

size_t gnss::GnssAdaptDevice::Ga11_02DataClientCallback(int a1, uint64_t a2, _DWORD *a3)
{
  gnss::GnssAdaptDevice *IsLoggingAllowed;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t DeviceInstance;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  unsigned __int16 v13;
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 v17;
  __int16 v18;
  int v19;
  NSObject *v20;
  uint64_t v21;
  unsigned __int16 v22;
  uint64_t v23;
  unsigned __int16 v24;
  uint64_t v25;
  unsigned __int16 v26;
  const void *v27;
  size_t v28;
  size_t v29;
  int v30;
  NSObject *v31;
  void *v32;
  std::string::size_type v33;
  NSObject *v34;
  uint64_t v35;
  unsigned __int16 v36;
  uint64_t v37;
  unsigned __int16 v38;
  NSObject *v39;
  uint64_t v40;
  unsigned __int16 v41;
  uint64_t v42;
  unsigned __int16 v43;
  size_t result;
  uint64_t v45;
  unsigned __int16 v46;
  void *__dst;
  _BYTE *v48;
  uint64_t block;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  std::string __p;
  int v55;
  __int16 v56;
  std::string __str[43];
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if ((_DWORD)IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    v6 = mach_continuous_time();
    v7 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 68, "Ga11_02DataClientCallback");
    IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_WriteLog(0x18u, (char *)__str, v7, 5, 1);
  }
  DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(IsLoggingAllowed);
  if (DeviceInstance)
  {
    v9 = DeviceInstance;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v10 = mach_continuous_time();
      v11 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 68, "Ga11_06HandleDataClientCallback");
      LbsOsaTrace_WriteLog(0x18u, (char *)__str, v11, 5, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v12 = mach_continuous_time();
      v13 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: msgType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 73, "Ga11_06HandleDataClientCallback", a1);
      LbsOsaTrace_WriteLog(0x18u, (char *)__str, v13, 4, 1);
    }
    if (a3)
    {
      if (a1 != 3)
      {
        if (a1 == 1)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
          {
            bzero(__str, 0x410uLL);
            v25 = mach_continuous_time();
            v26 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Send Data req,%u,size,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "ADP", 68, "Ga11_06HandleDataClientCallback", *a3, a3[4]);
            LbsOsaTrace_WriteLog(0x18u, (char *)__str, v26, 5, 1);
          }
          v27 = (const void *)*((_QWORD *)a3 + 1);
          v28 = a3[4];
          memset(__str, 0, 24);
          std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(__str, v27, (uint64_t)v27 + v28, v28);
          gnss::GnssAdaptDevice::Ga11_09TraceBuffer(__str);
          std::vector<unsigned char>::vector(&__dst, a3[4]);
          v29 = a3[4];
          if ((_DWORD)v29)
            memmove(__dst, *((const void **)a3 + 1), v29);
          v30 = *a3;
          v31 = *(NSObject **)(v9 + 288);
          block = MEMORY[0x24BDAC760];
          v50 = 1174405120;
          v51 = ___ZN4gnss15GnssAdaptDevice31Ga11_06HandleDataClientCallbackE15e_gnsDC_MsgTypeP15u_gnsDC_MsgData_block_invoke_86;
          v52 = &__block_descriptor_tmp_90;
          v53 = v9;
          memset(&__p, 0, sizeof(__p));
          std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, __dst, (uint64_t)v48, v48 - (_BYTE *)__dst);
          v55 = v30;
          dispatch_async(v31, &block);
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (__dst)
          {
            v48 = __dst;
            operator delete(__dst);
          }
          v32 = (void *)__str[0].__r_.__value_.__r.__words[0];
          if (!__str[0].__r_.__value_.__r.__words[0])
            goto LABEL_48;
          __str[0].__r_.__value_.__l.__size_ = __str[0].__r_.__value_.__r.__words[0];
        }
        else
        {
          if (a1)
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v35 = mach_continuous_time();
              v36 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx GNS DC Msg Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "ADP", 69, "Ga11_06HandleDataClientCallback", 770, a1);
              LbsOsaTrace_WriteLog(0x18u, (char *)__str, v36, 0, 1);
            }
            goto LABEL_48;
          }
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            v14 = mach_continuous_time();
            v15 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: LinkReq Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 73, "Ga11_06HandleDataClientCallback", *a3);
            LbsOsaTrace_WriteLog(0x18u, (char *)__str, v15, 4, 1);
          }
          if (*a3 == 1)
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
            {
              bzero(__str, 0x410uLL);
              v37 = mach_continuous_time();
              v38 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Link Close Hdl,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "ADP", 68, "Ga11_06HandleDataClientCallback", a3[1]);
              LbsOsaTrace_WriteLog(0x18u, (char *)__str, v38, 5, 1);
            }
            *(_DWORD *)(v9 + 1020) = a3[1];
            v39 = *(NSObject **)(v9 + 96);
            if (v39)
            {
              dispatch_source_cancel(v39);
              *(_QWORD *)(v9 + 96) = 0;
            }
            goto LABEL_48;
          }
          if (*a3)
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v40 = mach_continuous_time();
              v41 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx Link req Type,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v40), "ADP", 69, "Ga11_06HandleDataClientCallback", 257, *a3);
              LbsOsaTrace_WriteLog(0x18u, (char *)__str, v41, 0, 1);
            }
            goto LABEL_48;
          }
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            v16 = mach_continuous_time();
            v17 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Open Link Req hdl,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 73, "Ga11_06HandleDataClientCallback", a3[1]);
            LbsOsaTrace_WriteLog(0x18u, (char *)__str, v17, 4, 1);
          }
          std::string::basic_string[abi:ne180100]<0>(__str, (char *)a3 + 13);
          v18 = *((_WORD *)a3 + 139);
          v19 = a3[1];
          v20 = *(NSObject **)(v9 + 288);
          block = MEMORY[0x24BDAC760];
          v50 = 1174405120;
          v51 = ___ZN4gnss15GnssAdaptDevice31Ga11_06HandleDataClientCallbackE15e_gnsDC_MsgTypeP15u_gnsDC_MsgData_block_invoke;
          v52 = &__block_descriptor_tmp_82;
          v53 = v9;
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&__p, __str[0].__r_.__value_.__l.__data_, __str[0].__r_.__value_.__l.__size_);
          else
            __p = __str[0];
          v56 = v18;
          v55 = v19;
          dispatch_async(v20, &block);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_48:
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v42 = mach_continuous_time();
              v43 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v42), "ADP", 68, "Ga11_06HandleDataClientCallback");
              LbsOsaTrace_WriteLog(0x18u, (char *)__str, v43, 5, 1);
            }
            goto LABEL_50;
          }
          v32 = (void *)__str[0].__r_.__value_.__r.__words[0];
        }
        operator delete(v32);
        goto LABEL_48;
      }
      v33 = *(_QWORD *)a3;
      LODWORD(__p.__r_.__value_.__r.__words[1]) = a3[2];
      block = MEMORY[0x24BDAC760];
      v51 = ___ZN4gnss15GnssAdaptDevice31Ga11_06HandleDataClientCallbackE15e_gnsDC_MsgTypeP15u_gnsDC_MsgData_block_invoke_91;
      v52 = &__block_descriptor_tmp_96;
      v34 = *(NSObject **)(v9 + 288);
      v50 = 0x40000000;
      v53 = v9;
      __p.__r_.__value_.__r.__words[0] = v33;
      dispatch_async(v34, &block);
      goto LABEL_48;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v21 = mach_continuous_time();
      v22 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx GNS DC Response\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 69, "Ga11_06HandleDataClientCallback", 770);
      LbsOsaTrace_WriteLog(0x18u, (char *)__str, v22, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v23 = mach_continuous_time();
      v24 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 68, "Ga11_06HandleDataClientCallback");
      LbsOsaTrace_WriteLog(0x18u, (char *)__str, v24, 5, 1);
    }
  }
LABEL_50:
  result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if ((_DWORD)result)
  {
    bzero(__str, 0x410uLL);
    v45 = mach_continuous_time();
    v46 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v45), "ADP", 68, "Ga11_02DataClientCallback");
    return LbsOsaTrace_WriteLog(0x18u, (char *)__str, v46, 5, 1);
  }
  return result;
}

void sub_21E569270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

size_t gnss::GnssAdaptDevice::Ga11_03SimInfoCallback(gnss::GnssAdaptDevice *this)
{
  gnss::GnssAdaptDevice *IsLoggingAllowed;
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t DeviceInstance;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 v7;
  NSObject *v8;
  uint64_t v9;
  unsigned __int16 v10;
  size_t result;
  uint64_t v12;
  unsigned __int16 v13;
  _QWORD block[5];
  char __str[1040];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if ((_DWORD)IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 68, "Ga11_03SimInfoCallback");
    IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_WriteLog(0x18u, __str, v3, 5, 1);
  }
  DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(IsLoggingAllowed);
  if (DeviceInstance)
  {
    v5 = DeviceInstance;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v6 = mach_continuous_time();
      v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 68, "Ga11_07HandleSimInfoCallback");
      LbsOsaTrace_WriteLog(0x18u, __str, v7, 5, 1);
    }
    v8 = *(NSObject **)(v5 + 288);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = ___ZN4gnss15GnssAdaptDevice28Ga11_07HandleSimInfoCallbackEv_block_invoke;
    block[3] = &__block_descriptor_tmp_98;
    block[4] = v5;
    dispatch_async(v8, block);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 68, "Ga11_07HandleSimInfoCallback");
      LbsOsaTrace_WriteLog(0x18u, __str, v10, 5, 1);
    }
  }
  result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if ((_DWORD)result)
  {
    bzero(__str, 0x410uLL);
    v12 = mach_continuous_time();
    v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 68, "Ga11_03SimInfoCallback");
    return LbsOsaTrace_WriteLog(0x18u, __str, v13, 5, 1);
  }
  return result;
}

size_t gnss::GnssAdaptDevice::Ga11_17SuplAsyncEventCB(int a1, uint64_t a2, __int128 *a3)
{
  gnss::GnssAdaptDevice *IsLoggingAllowed;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t DeviceInstance;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  char v16;
  __int128 v17;
  char v18;
  char v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  __int16 v25;
  char v26;
  uint64_t v27;
  char v28;
  __int16 v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int16 v32;
  uint64_t v33;
  NSObject *v34;
  char *v35;
  __int128 *v36;
  __int128 v37;
  __int128 v38;
  _OWORD *v39;
  uint64_t v40;
  __int128 *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  NSObject *v48;
  uint64_t v49;
  unsigned __int16 v50;
  uint64_t v51;
  unsigned __int16 v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  __int128 *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  size_t result;
  uint64_t v71;
  unsigned __int16 v72;
  uint64_t v73;
  unsigned __int16 v74;
  void *v75;
  uint64_t v76;
  unsigned __int16 v77;
  char v78;
  __int16 v79;
  __int16 v80;
  char v81;
  __int16 v82;
  char v83;
  __int16 v84;
  char v85;
  __int128 v86;
  __int128 v87;
  _BYTE v88[48];
  __int128 v89;
  _BYTE v90[56];
  _BYTE v91[12];
  _BYTE v92[22];
  uint64_t __str;
  uint64_t v94;
  void *v95;
  void *v96;
  __int128 *v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  int v102;
  char v103;
  char v104;
  __int16 v105;
  __int128 v106;
  _BYTE v107[22];
  char v108;
  char v109;
  char v110;
  __int16 v111;
  char v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  __int16 v116;
  __int16 v117;
  char v118;
  uint64_t v119;
  int v120;
  __int16 v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  char v126;
  __int16 v127;
  unint64_t v128;
  uint64_t v129;
  _BYTE v130[22];
  char v131;
  char v132;
  char v133;
  __int16 v134;
  char v135;
  int v136;
  uint64_t v137;
  int v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  _OWORD v145[42];
  uint64_t v146;

  v146 = *MEMORY[0x24BDAC8D0];
  IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if ((_DWORD)IsLoggingAllowed)
  {
    bzero(&__str, 0x410uLL);
    v6 = mach_continuous_time();
    v7 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 68, "Ga11_17SuplAsyncEventCB");
    IsLoggingAllowed = (gnss::GnssAdaptDevice *)LbsOsaTrace_WriteLog(0x18u, (char *)&__str, v7, 5, 1);
  }
  DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(IsLoggingAllowed);
  if (DeviceInstance)
  {
    v9 = DeviceInstance;
    switch(a1)
    {
      case 0:
      case 2:
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(&__str, 0x410uLL);
          v10 = mach_continuous_time();
          v11 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: #%04hx Supl Msg,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "Ga11_18HandleSuplAsyncEventCB", 770, a1);
          LbsOsaTrace_WriteLog(0x18u, (char *)&__str, v11, 0, 1);
        }
        break;
      case 1:
        if (a3)
        {
          *(_QWORD *)v92 = 0;
          *(_QWORD *)&v92[8] = 0;
          *(_QWORD *)&v92[14] = 0;
          v12 = -1;
          *(_QWORD *)&v91[1] = -1;
          *(_DWORD *)&v91[8] = -1;
          v13 = *((_QWORD *)a3 + 1);
          if (v13)
          {
            v14 = *(_DWORD *)v13;
            v15 = *(_BYTE *)(v13 + 4);
            v16 = *(_BYTE *)(v13 + 5);
            v79 = *(_WORD *)(v13 + 6);
            v17 = *(_OWORD *)(v13 + 8);
            *(_OWORD *)v92 = *(_OWORD *)(v13 + 24);
            *(_QWORD *)&v92[14] = *(_QWORD *)(v13 + 38);
            v18 = *(_BYTE *)(v13 + 46);
            v19 = *(_BYTE *)(v13 + 47);
            v20 = *(_BYTE *)(v13 + 48);
            v84 = *(_WORD *)(v13 + 49);
            v85 = *(_BYTE *)(v13 + 51);
            v21 = *(_DWORD *)(v13 + 52);
            v22 = *(_QWORD *)(v13 + 56);
            v23 = *(_QWORD *)(v13 + 64);
            v24 = *(_WORD *)(v13 + 72);
            v25 = *(_WORD *)(v13 + 74);
            v26 = *(_BYTE *)(v13 + 76);
            *(_DWORD *)&v91[8] = *(_DWORD *)(v13 + 85);
            *(_QWORD *)v91 = *(_QWORD *)(v13 + 77);
            v83 = *(_BYTE *)(v13 + 91);
            v82 = *(_WORD *)(v13 + 89);
            v12 = *(_QWORD *)(v13 + 92);
            v27 = *(_QWORD *)(v13 + 100);
            v28 = *(_BYTE *)(v13 + 108);
            v78 = *(_BYTE *)(v13 + 109);
            v29 = *(_WORD *)(v13 + 110);
            v30 = *(_QWORD *)(v13 + 112);
          }
          else
          {
            v28 = 0;
            v21 = 0;
            v20 = 0;
            v16 = 0;
            v15 = 0;
            v30 = 0xFFFFFFFF7FFFFFFFLL;
            v27 = 0x7FFFFFFFLL;
            v23 = 0;
            v17 = xmmword_21E7F9A80;
            v14 = -1;
            v26 = -1;
            v29 = -1;
            v25 = -1;
            v24 = -1;
            v22 = -1;
            v19 = -1;
            v18 = -1;
          }
          memset(&v90[32], 0, 22);
          v53 = *((_QWORD *)a3 + 3);
          if (v53)
          {
            v54 = *(_QWORD *)v53;
            *(_OWORD *)&v90[32] = *(_OWORD *)(v53 + 8);
            *(_QWORD *)&v90[46] = *(_QWORD *)(v53 + 22);
            v55 = *(_BYTE *)(v53 + 30);
            v56 = *(_BYTE *)(v53 + 31);
            v57 = *(_BYTE *)(v53 + 32);
            v80 = *(_WORD *)(v53 + 33);
            v81 = *(_BYTE *)(v53 + 35);
            v58 = *(_DWORD *)(v53 + 36);
            v59 = *(_QWORD *)(v53 + 40);
            LODWORD(v53) = *(_DWORD *)(v53 + 48);
          }
          else
          {
            v58 = 0;
            v57 = 0;
            v54 = 0x700000000;
            v59 = -1;
            v56 = -1;
            v55 = -1;
          }
          LODWORD(v86) = 0;
          WORD2(v86) = -1;
          DWORD2(v86) = 0x7FFFFFFF;
          WORD6(v86) = 0;
          LODWORD(v87) = -1;
          v60 = 22;
          BYTE4(v87) = 0;
          do
          {
            v61 = (char *)&v86 + v60;
            *v61 = -1;
            *(_DWORD *)(v61 + 1) = 0;
            v61[5] = 0;
            v60 += 6;
          }
          while (v61 + 6 != &v90[22]);
          *(_DWORD *)&v90[24] = 0;
          v62 = (__int128 *)*((_QWORD *)a3 + 2);
          if (v62)
          {
            v63 = *v62;
            v64 = v62[1];
            v65 = v62[3];
            *(_OWORD *)v88 = v62[2];
            *(_OWORD *)&v88[16] = v65;
            v86 = v63;
            v87 = v64;
            v66 = v62[4];
            v67 = v62[5];
            v68 = v62[6];
            *(_OWORD *)&v90[12] = *(__int128 *)((char *)v62 + 108);
            v89 = v67;
            *(_OWORD *)v90 = v68;
            *(_OWORD *)&v88[32] = v66;
          }
          v34 = *(NSObject **)(v9 + 288);
          __str = MEMORY[0x24BDAC760];
          v94 = 0x40000000;
          v95 = ___ZN4gnss15GnssAdaptDevice29Ga11_18HandleSuplAsyncEventCBE13e_gnsSUPL_MsgP17u_gnsSUPL_MsgData_block_invoke_2_151;
          v96 = &__block_descriptor_tmp_152;
          v97 = (__int128 *)v9;
          v69 = a3[1];
          v98 = *a3;
          v99 = v69;
          v100 = a3[2];
          v101 = *((_QWORD *)a3 + 6);
          v102 = v14;
          v103 = v15;
          v104 = v16;
          v105 = v79;
          *(_QWORD *)&v107[14] = *(_QWORD *)&v92[14];
          v106 = v17;
          *(_OWORD *)v107 = *(_OWORD *)v92;
          v108 = v18;
          v109 = v19;
          v110 = v20;
          v112 = v85;
          v111 = v84;
          v113 = v21;
          v114 = v22;
          v115 = v23;
          v116 = v24;
          v117 = v25;
          v118 = v26;
          v120 = *(_DWORD *)&v91[8];
          v119 = *(_QWORD *)v91;
          v122 = v83;
          v121 = v82;
          v123 = v12;
          v124 = v27;
          v125 = v28;
          v126 = v78;
          v127 = v29;
          v128 = v30;
          v129 = v54;
          *(_QWORD *)&v130[14] = *(_QWORD *)&v90[46];
          *(_OWORD *)v130 = *(_OWORD *)&v90[32];
          v131 = v55;
          v132 = v56;
          v133 = v57;
          v135 = v81;
          v134 = v80;
          v137 = v59;
          v136 = v58;
          v138 = v53;
          v141 = *(_OWORD *)v88;
          v142 = *(_OWORD *)&v88[16];
          v139 = v86;
          v140 = v87;
          *(_OWORD *)((char *)v145 + 12) = *(_OWORD *)&v90[12];
          v144 = v89;
          v145[0] = *(_OWORD *)v90;
          v143 = *(_OWORD *)&v88[32];
          goto LABEL_40;
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          goto LABEL_30;
        break;
      case 3:
        if (a3)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
          {
            bzero(&__str, 0x410uLL);
            v31 = mach_continuous_time();
            v32 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: API,%u,Id,%u,Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "ADP", 73, "Ga11_18HandleSuplAsyncEventCB", *((_DWORD *)a3 + 1), *(_DWORD *)a3, *((_DWORD *)a3 + 2));
            LbsOsaTrace_WriteLog(0x18u, (char *)&__str, v32, 4, 1);
          }
          v33 = *(_QWORD *)a3;
          DWORD2(v98) = *((_DWORD *)a3 + 2);
          __str = MEMORY[0x24BDAC760];
          v95 = ___ZN4gnss15GnssAdaptDevice29Ga11_18HandleSuplAsyncEventCBE13e_gnsSUPL_MsgP17u_gnsSUPL_MsgData_block_invoke;
          v96 = &__block_descriptor_tmp_145;
          v34 = *(NSObject **)(v9 + 288);
          v94 = 0x40000000;
          v97 = (__int128 *)v9;
          *(_QWORD *)&v98 = v33;
LABEL_40:
          dispatch_async(v34, &__str);
        }
        else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          goto LABEL_30;
        }
        break;
      case 4:
        if (a3)
        {
          *(_QWORD *)&v86 = 0;
          *((_QWORD *)&v86 + 1) = &v86;
          *(_QWORD *)&v87 = 0x5002000000;
          *((_QWORD *)&v87 + 1) = __Block_byref_object_copy_;
          *(_QWORD *)v88 = __Block_byref_object_dispose_;
          *(_OWORD *)&v88[8] = *a3;
          *(_OWORD *)&v88[24] = a3[1];
          *(_QWORD *)&v88[40] = *((_QWORD *)a3 + 4);
          if (*((_QWORD *)a3 + 1))
          {
            v35 = (char *)gnssOsa_Calloc("Ga11_18HandleSuplAsyncEventCB", 1667, 1, 0x28uLL);
            *(_QWORD *)(*((_QWORD *)&v86 + 1) + 48) = v35;
            if (!v35)
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
              {
                bzero(&__str, 0x410uLL);
                v73 = mach_continuous_time();
                v74 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: #%04hx v_SummaryReport.p_PosReq\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v73), "ADP", 69, "Ga11_18HandleSuplAsyncEventCB", 1537);
                LbsOsaTrace_WriteLog(0x18u, (char *)&__str, v74, 0, 1);
              }
              goto LABEL_22;
            }
            v36 = (__int128 *)*((_QWORD *)a3 + 1);
            v37 = *v36;
            v38 = v36[1];
            *(_QWORD *)(v35 + 31) = *(_QWORD *)((char *)v36 + 31);
            *(_OWORD *)v35 = v37;
            *((_OWORD *)v35 + 1) = v38;
          }
          if (*((_QWORD *)a3 + 2))
          {
            v39 = gnssOsa_Calloc("Ga11_18HandleSuplAsyncEventCB", 1677, 1, 0x78uLL);
            v40 = *((_QWORD *)&v86 + 1);
            *(_QWORD *)(*((_QWORD *)&v86 + 1) + 56) = v39;
            if (!v39)
            {
              v75 = *(void **)(v40 + 48);
              if (v75)
              {
                free(v75);
                v40 = *((_QWORD *)&v86 + 1);
              }
              *(_QWORD *)(v40 + 48) = 0;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
              {
                bzero(&__str, 0x410uLL);
                v76 = mach_continuous_time();
                v77 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: #%04hx v_SummaryReport.p_PosResp\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v76), "ADP", 69, "Ga11_18HandleSuplAsyncEventCB", 1537);
                LbsOsaTrace_WriteLog(0x18u, (char *)&__str, v77, 0, 1);
              }
              goto LABEL_22;
            }
            v41 = (__int128 *)*((_QWORD *)a3 + 2);
            v42 = *v41;
            v43 = v41[1];
            v44 = v41[3];
            v39[2] = v41[2];
            v39[3] = v44;
            *v39 = v42;
            v39[1] = v43;
            v45 = v41[4];
            v46 = v41[5];
            v47 = v41[6];
            *((_QWORD *)v39 + 14) = *((_QWORD *)v41 + 14);
            v39[5] = v46;
            v39[6] = v47;
            v39[4] = v45;
          }
          v48 = *(NSObject **)(v9 + 288);
          __str = MEMORY[0x24BDAC760];
          v94 = 0x40000000;
          v95 = ___ZN4gnss15GnssAdaptDevice29Ga11_18HandleSuplAsyncEventCBE13e_gnsSUPL_MsgP17u_gnsSUPL_MsgData_block_invoke_148;
          v96 = &unk_24E2B1498;
          v97 = &v86;
          *(_QWORD *)&v98 = v9;
          dispatch_async(v48, &__str);
LABEL_22:
          _Block_object_dispose(&v86, 8);
          break;
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
LABEL_30:
          bzero(&__str, 0x410uLL);
          v51 = mach_continuous_time();
          v52 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: #%04hx MsgData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v51), "ADP", 69, "Ga11_18HandleSuplAsyncEventCB", 770);
          LbsOsaTrace_WriteLog(0x18u, (char *)&__str, v52, 0, 1);
        }
        break;
      default:
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(&__str, 0x410uLL);
          v49 = mach_continuous_time();
          v50 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: #%04hx MsgType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v49), "ADP", 69, "Ga11_18HandleSuplAsyncEventCB", 515, a1);
          LbsOsaTrace_WriteLog(0x18u, (char *)&__str, v50, 0, 1);
        }
        break;
    }
  }
  result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if ((_DWORD)result)
  {
    bzero(&__str, 0x410uLL);
    v71 = mach_continuous_time();
    v72 = snprintf((char *)&__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v71), "ADP", 68, "Ga11_17SuplAsyncEventCB");
    return LbsOsaTrace_WriteLog(0x18u, (char *)&__str, v72, 5, 1);
  }
  return result;
}

void sub_21E56A04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *gnss::GnssAdaptDevice::Ga11_21GnsWlanInfoCB(gnss::GnssAdaptDevice *a1, uint64_t a2, int *a3)
{
  int v4;
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  unsigned __int16 v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int16 v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  double v18;
  uint64_t v19;
  unsigned __int16 v20;
  NSObject *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  uint64_t v26;
  unsigned __int16 v27;
  uint64_t v28;
  unsigned __int16 v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[3];
  _QWORD *v33;
  _QWORD v34[3];
  _QWORD *v35;
  char __str[8];
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  void *v39;
  _BYTE v40[24];
  _BYTE *v41;
  int v42;
  uint64_t v43;

  v4 = (int)a1;
  v43 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(a1);
  if (!result)
    return result;
  v6 = result;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v7 = mach_continuous_time();
    v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: msgType(0,CapReq,1,MeasReq),%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 73, "Ga11_22HandleGnsWlanInfoCB", v4);
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 4, 1);
  }
  if (v4 != 1)
  {
    result = (_QWORD *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v12 = mach_continuous_time();
      v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GNS WLAN MsgType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 69, "Ga11_22HandleGnsWlanInfoCB", 770, v4);
      return (_QWORD *)LbsOsaTrace_WriteLog(0x18u, __str, v13, 0, 1);
    }
    return result;
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v32, (uint64_t)(v6 + 119));
  v35 = 0;
  v9 = v33;
  if (!v33)
    goto LABEL_45;
  v10 = operator new(0x28uLL);
  v11 = v10;
  *v10 = &off_24E2B1548;
  if (v9 != v32)
  {
    v10[4] = v9;
    v33 = 0;
    v35 = v10;
    goto LABEL_15;
  }
  v10[4] = v10 + 1;
  (*(void (**)(_QWORD *))(v32[0] + 24))(v32);
  v14 = v33;
  v35 = v11;
  if (v33 == v32)
  {
    v15 = 4;
    v14 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_15;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  if (!v35)
  {
LABEL_45:
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v24 = mach_continuous_time();
      v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx WLAN Meas ReqCb\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 69, "Ga11_22HandleGnsWlanInfoCB", 258);
      LbsOsaTrace_WriteLog(0x18u, __str, v25, 0, 1);
    }
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      goto LABEL_38;
LABEL_27:
    bzero(__str, 0x410uLL);
    v26 = mach_continuous_time();
    v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "ADP", 68, "Ga11_22HandleGnsWlanInfoCB");
    LbsOsaTrace_WriteLog(0x18u, __str, v27, 5, 1);
    goto LABEL_38;
  }
LABEL_15:
  if (!a3)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v28 = mach_continuous_time();
      v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx p_MsgData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "ADP", 69, "Ga11_22HandleGnsWlanInfoCB", 513);
      LbsOsaTrace_WriteLog(0x18u, __str, v29, 0, 1);
    }
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      goto LABEL_38;
    goto LABEL_27;
  }
  v16 = *a3;
  v17 = a3[2] / 0x3E8u;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v18 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v19 = 84;
    if ((v16 & 1) == 0)
      v19 = 70;
    v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: WLAN MEAS REQ RspTime,%u,isRssiRequested,%c\n", (unint64_t)v18, "ADP", 73, "Ga11_22HandleGnsWlanInfoCB", (unsigned __int16)v17, v19);
    LbsOsaTrace_WriteLog(0x18u, __str, v20, 4, 1);
  }
  v21 = v6[37];
  *(_QWORD *)__str = MEMORY[0x24BDAC760];
  v37 = 1174405120;
  v38 = ___ZN4gnss15GnssAdaptDevice26Ga11_22HandleGnsWlanInfoCBE11e_gnsWL_MsgP15u_gnsWL_MsgData_block_invoke;
  v39 = &__block_descriptor_tmp_171;
  v22 = v40;
  v23 = (uint64_t)v35;
  if (v35)
  {
    if (v35 == v34)
    {
      v41 = v40;
      (*(void (**)(_QWORD *, _BYTE *))(v34[0] + 24))(v34, v40);
      goto LABEL_33;
    }
    v23 = (*(uint64_t (**)(void))(*v35 + 16))();
  }
  v41 = (_BYTE *)v23;
LABEL_33:
  v42 = (unsigned __int16)v17 | ((v16 & 1) << 16);
  dispatch_async(v21, __str);
  if (v41 == v40)
  {
    v30 = 4;
    goto LABEL_37;
  }
  if (v41)
  {
    v30 = 5;
    v22 = v41;
LABEL_37:
    (*(void (**)(_QWORD *))(*v22 + 8 * v30))(v22);
  }
LABEL_38:
  result = v35;
  if (v35 == v34)
  {
    v31 = 4;
    result = v34;
  }
  else
  {
    if (!v35)
      return result;
    v31 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v31))();
}

void sub_21E56A678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v24;
  uint64_t v25;

  v24 = a23;
  if (a23 == &a20)
  {
    v25 = 4;
    v24 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(char *))(*(_QWORD *)v24 + 8 * v25))(v24);
LABEL_6:
  _Unwind_Resume(exception_object);
}

size_t gnss::GnssAdaptDevice::Ga11_08ProvideDefaultSimInfo(gnss::GnssAdaptDevice *this)
{
  uint64_t v1;
  unsigned __int16 v2;
  size_t result;
  uint64_t v4;
  unsigned __int16 v5;
  int v6;
  char v7;
  char __str[1040];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v1 = mach_continuous_time();
    v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "ADP", 68, "Ga11_08ProvideDefaultSimInfo");
    LbsOsaTrace_WriteLog(0x18u, __str, v2, 5, 1);
  }
  v6 = 16711681;
  v7 = 0;
  GNS_SimsInfoInd(&v6);
  result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if ((_DWORD)result)
  {
    bzero(__str, 0x410uLL);
    v4 = mach_continuous_time();
    v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "Ga11_08ProvideDefaultSimInfo");
    return LbsOsaTrace_WriteLog(0x18u, __str, v5, 5, 1);
  }
  return result;
}

size_t ___ZN4gnss15GnssAdaptDevice32Ga11_05HandleGnsCellInfoCallbackE15e_gnsCI_MsgTypeP15u_gnsCI_MsgData_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v4;
  size_t result;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 v9;
  char __str[1040];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 56))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v2 = mach_continuous_time();
      v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Requesting LOCID from FW\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 73, "Ga11_05HandleGnsCellInfoCallback_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v3, 4, 1);
    }
    v4 = *(_QWORD *)(a1 + 56);
    if (!v4)
      std::__throw_bad_function_call[abi:ne180100]();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v6 = mach_continuous_time();
      v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LocationIdCb\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 69, "Ga11_05HandleGnsCellInfoCallback_block_invoke", 258);
      LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    }
    result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v8 = mach_continuous_time();
      v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "Ga11_05HandleGnsCellInfoCallback_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
    }
  }
  return result;
}

uint64_t __copy_helper_block_e8_32c40_ZTSNSt3__18functionIFN4gnss6ResultEvEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_e8_32c40_ZTSNSt3__18functionIFN4gnss6ResultEvEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_21E56AF04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  char *v28;
  uint64_t v29;

  v28 = a27;
  if (a27 == &a24)
  {
    v29 = 4;
    v28 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN4gnss15GnssAdaptDevice32Ga11_05HandleGnsCellInfoCallbackE15e_gnsCI_MsgTypeP15u_gnsCI_MsgData_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a1 + 64);
  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

uint64_t __copy_helper_block_e8_32c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_e8_32c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

size_t ___ZN4gnss15GnssAdaptDevice31Ga11_06HandleDataClientCallbackE15e_gnsDC_MsgTypeP15u_gnsDC_MsgData_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t (***v3)(_QWORD, std::string *, _QWORD);
  const char *v4;
  int v5;
  double v6;
  const char *v7;
  unsigned __int16 v8;
  uint64_t v9;
  unsigned __int16 v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned __int16 v14;
  int v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 v20;
  uint64_t v21;
  unsigned __int16 v22;
  size_t result;
  int v24;
  uint64_t v25;
  unsigned __int16 v26;
  uint64_t v27;
  unsigned __int16 v28;
  std::string v29;
  _QWORD v30[6];
  _QWORD handler[128];
  char __str[1040];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(uint64_t (****)(_QWORD, std::string *, _QWORD))(v2 + 48);
  v4 = (const char *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else
  {
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    v29.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 56);
  }
  v5 = (**v3)(v3, &v29, *(unsigned __int16 *)(a1 + 68));
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
  {
    bzero(__str, 0x410uLL);
    v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    if (*(char *)(a1 + 63) < 0)
      v4 = *(const char **)v4;
    v7 = "FAILURE";
    if (v5 == -2)
      v7 = "SUCCESS";
    v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Connection fqdn,%s,%u,status,%s\n", (unint64_t)v6, "ADP", 68, "Ga11_06HandleDataClientCallback_block_invoke", v4, *(unsigned __int16 *)(a1 + 68), v7);
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v9 = mach_continuous_time();
    v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Connection status,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 73, "Ga11_06HandleDataClientCallback_block_invoke", v5);
    LbsOsaTrace_WriteLog(0x18u, __str, v10, 4, 1);
  }
  v11 = 1;
  v12 = 4;
  switch(v5)
  {
    case -5:
      break;
    case -4:
      v12 = 6;
      break;
    case -3:
      goto LABEL_26;
    case -2:
      *(_DWORD *)(v2 + 1016) = *(_DWORD *)(a1 + 64);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v13 = mach_continuous_time();
        v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 68, "Ga11_04ReadSocketData");
        LbsOsaTrace_WriteLog(0x18u, __str, v14, 5, 1);
      }
      v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 48) + 32))(*(_QWORD *)(v2 + 48));
      v16 = dispatch_source_create(MEMORY[0x24BDACA00], v15, 0, *(dispatch_queue_t *)(v2 + 304));
      if (!v16)
      {
        snprintf((char *)handler, 0x400uLL, "ASSERT,%s,%d,%s", "Ga11_04ReadSocketData", 1037, "DISPC SUPL Socket read failed");
        if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v27 = mach_continuous_time();
          v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "OSA", 69, "Ga11_04ReadSocketData", (const char *)handler);
          LbsOsaTrace_WriteLog(0xEu, __str, v28, 0, 1);
        }
        gnssOsa_FlushLog();
        __assert_rtn("Ga11_04ReadSocketData", "ga11AgnssSuplPos.cpp", 1037, "false && \"DISPC SUPL Socket read failed\"");
      }
      v17 = v16;
      *(_QWORD *)(v2 + 96) = v16;
      v18 = MEMORY[0x24BDAC760];
      handler[0] = MEMORY[0x24BDAC760];
      handler[1] = 0x40000000;
      handler[2] = ___ZN4gnss15GnssAdaptDevice21Ga11_04ReadSocketDataEv_block_invoke;
      handler[3] = &__block_descriptor_tmp_110;
      handler[4] = v2;
      handler[5] = v16;
      dispatch_source_set_event_handler(v16, handler);
      v30[0] = v18;
      v30[1] = 0x40000000;
      v30[2] = ___ZN4gnss15GnssAdaptDevice21Ga11_04ReadSocketDataEv_block_invoke_2;
      v30[3] = &__block_descriptor_tmp_113;
      v30[4] = v2;
      v30[5] = v17;
      dispatch_source_set_cancel_handler(v17, v30);
      dispatch_resume(v17);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v19 = mach_continuous_time();
        v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 68, "Ga11_04ReadSocketData");
        LbsOsaTrace_WriteLog(0x18u, __str, v20, 5, 1);
      }
      v11 = 0;
      v12 = 14;
      break;
    case -1:
      v12 = 0;
      break;
    default:
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v21 = mach_continuous_time();
        v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConnStatus,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 87, "Ga11_06HandleDataClientCallback_block_invoke", 770, v5);
        LbsOsaTrace_WriteLog(0x18u, __str, v22, 2, 1);
      }
      v11 = 1;
LABEL_26:
      v12 = 2;
      break;
  }
  result = GNS_DcLinkRsp(v11, *(_DWORD *)(a1 + 64), v12);
  v24 = result;
  if ((_DWORD)result != 1)
  {
    result = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v25 = mach_continuous_time();
      v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DcLinkRsp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "ADP", 69, "Ga11_06HandleDataClientCallback_block_invoke", 257, v24);
      return LbsOsaTrace_WriteLog(0x18u, __str, v26, 0, 1);
    }
  }
  return result;
}

void sub_21E56B6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

uint64_t ___ZN4gnss15GnssAdaptDevice31Ga11_06HandleDataClientCallbackE15e_gnsDC_MsgTypeP15u_gnsDC_MsgData_block_invoke_86(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  size_t v15;
  int v16;
  uint64_t v17;
  char __str[1040];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v2 + 48) + 32))(*(_QWORD *)(v2 + 48)) == -3)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v3 = mach_continuous_time();
      v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Invalid Socket during Write\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 69, "Ga11_06HandleDataClientCallback_block_invoke", 2055);
      LbsOsaTrace_WriteLog(0x18u, __str, v4, 0, 1);
    }
    v5 = *(_DWORD *)(v2 + 1016);
    v6 = 11;
  }
  else
  {
    v7 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 48) + 16))(*(_QWORD *)(v2 + 48), a1 + 40);
    if (v7 == -3)
    {
      v9 = 9;
    }
    else
    {
      v8 = v7;
      if (v7 != -4)
      {
        result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1);
        if (!(_DWORD)result)
          return result;
        bzero(__str, 0x410uLL);
        v17 = mach_continuous_time();
        v15 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Byte written,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 68, "Ga11_06HandleDataClientCallback_block_invoke", v8);
        v16 = 5;
        return LbsOsaTrace_WriteLog(0x18u, __str, v15, v16, 1);
      }
      v9 = 10;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v10 = mach_continuous_time();
      v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Socket write,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "Ga11_06HandleDataClientCallback_block_invoke", 1796, v9);
      LbsOsaTrace_WriteLog(0x18u, __str, v11, 0, 1);
    }
    v5 = *(_DWORD *)(a1 + 64);
    v6 = v9;
  }
  result = GNS_DcLinkRsp(4, v5, v6);
  if ((_DWORD)result != 1)
  {
    v13 = result;
    result = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v14 = mach_continuous_time();
      v15 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DcLinkRsp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 69, "Ga11_06HandleDataClientCallback_block_invoke", 257, v13);
      v16 = 0;
      return LbsOsaTrace_WriteLog(0x18u, __str, v15, v16, 1);
    }
  }
  return result;
}

_QWORD *__copy_helper_block_e8_40c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = (_QWORD *)(a1 + 40);
  v2[2] = 0;
  return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v2, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40));
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void sub_21E56BF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char *a29)
{
  char *v30;
  uint64_t v31;

  v30 = a29;
  if (a29 == &a26)
  {
    v31 = 4;
    v30 = &a26;
  }
  else
  {
    if (!a29)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN4gnss15GnssAdaptDevice31Ga11_06HandleDataClientCallbackE15e_gnsDC_MsgTypeP15u_gnsDC_MsgData_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a1 + 64);
  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

size_t ___ZN4gnss15GnssAdaptDevice28Ga11_07HandleSimInfoCallbackEv_block_invoke(gnss::GnssAdaptDevice *this)
{
  return gnss::GnssAdaptDevice::Ga11_08ProvideDefaultSimInfo(this);
}

void ___ZN4gnss15GnssAdaptDevice21Ga11_04ReadSocketDataEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uintptr_t data;
  uintptr_t v3;
  uint64_t v4;
  unsigned __int16 v5;
  int v6;
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  unsigned __int16 v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned __int16 v15;
  int v16;
  uint64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  unsigned __int16 v20;
  uint64_t v21;
  unsigned __int16 v22;
  int v23;
  uint64_t v24;
  unsigned __int16 v25;
  void *__p;
  void *v27;
  uint64_t v28;
  char __str[1040];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  data = dispatch_source_get_data(*(dispatch_source_t *)(a1 + 40));
  if (!data)
    return;
  v3 = data;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v1 + 48) + 32))(*(_QWORD *)(v1 + 48)) == -3)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v4 = mach_continuous_time();
      v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Invalid Session while Reading\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "Ga11_04ReadSocketData_block_invoke", 2055);
      LbsOsaTrace_WriteLog(0x18u, __str, v5, 0, 1);
    }
    v6 = GNS_DcLinkRsp(4, *(_DWORD *)(v1 + 1016), 11);
    if (v6 != 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v7 = mach_continuous_time();
        v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DcLinkRsp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "Ga11_04ReadSocketData_block_invoke", 257, v6);
        LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
      }
    }
    return;
  }
  __p = 0;
  v27 = 0;
  v28 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v9 = mach_continuous_time();
    v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Bytes on Sock,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 73, "Ga11_04ReadSocketData_block_invoke", v3);
    LbsOsaTrace_WriteLog(0x18u, __str, v10, 4, 1);
  }
  v11 = (*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(v1 + 48) + 8))(*(_QWORD *)(v1 + 48), &__p);
  v12 = v11;
  if (v11 == -4)
  {
    v13 = 8;
  }
  else
  {
    if (v11 != -3)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
      {
        bzero(__str, 0x410uLL);
        v19 = mach_continuous_time();
        v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Bytes read,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 68, "Ga11_04ReadSocketData_block_invoke", v12);
        LbsOsaTrace_WriteLog(0x18u, __str, v20, 5, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v21 = mach_continuous_time();
        v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Socket read buf size,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 73, "Ga11_04ReadSocketData_block_invoke", (_DWORD)v27 - (_DWORD)__p);
        LbsOsaTrace_WriteLog(0x18u, __str, v22, 4, 1);
      }
      gnss::GnssAdaptDevice::Ga11_09TraceBuffer(&__p);
      v23 = GNS_DcSuplPdu(*(_DWORD *)(v1 + 1016), (unsigned __int8 *)__p, ((_DWORD)v27 - (_DWORD)__p));
      if (v23 != 1 && LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v24 = mach_continuous_time();
        v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DcSuplPdu,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 69, "Ga11_04ReadSocketData_block_invoke", 257, v23);
        LbsOsaTrace_WriteLog(0x18u, __str, v25, 0, 1);
      }
      goto LABEL_26;
    }
    v13 = 7;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v14 = mach_continuous_time();
    v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Socket read,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 69, "Ga11_04ReadSocketData_block_invoke", 1797, v13);
    LbsOsaTrace_WriteLog(0x18u, __str, v15, 0, 1);
  }
  v16 = GNS_DcLinkRsp(4, *(_DWORD *)(v1 + 1016), v13);
  if (v16 != 1 && LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v17 = mach_continuous_time();
    v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DcLinkRsp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 69, "Ga11_04ReadSocketData_block_invoke", 257, v16);
    LbsOsaTrace_WriteLog(0x18u, __str, v18, 0, 1);
  }
LABEL_26:
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
}

void sub_21E56C5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN4gnss15GnssAdaptDevice21Ga11_04ReadSocketDataEv_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 v4;
  NSObject *v5;
  _QWORD block[5];
  char __str[1040];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v3 = mach_continuous_time();
    v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: dispatch_source_set_cancel_handler\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga11_04ReadSocketData_block_invoke_2");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  v5 = *(NSObject **)(v2 + 288);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZN4gnss15GnssAdaptDevice21Ga11_04ReadSocketDataEv_block_invoke_3;
  block[3] = &__block_descriptor_tmp_112;
  block[4] = v2;
  dispatch_async(v5, block);
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
}

size_t ___ZN4gnss15GnssAdaptDevice21Ga11_04ReadSocketDataEv_block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  int v4;
  size_t result;
  int v6;
  uint64_t v7;
  unsigned __int16 v8;
  char __str[1040];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v1 + 1016) = 0;
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 48) + 24))(*(_QWORD *)(v1 + 48));
  if (v2 <= 0xFFFFFFFD)
    v3 = 13;
  else
    v3 = 15;
  if (v2 <= 0xFFFFFFFD)
    v4 = 4;
  else
    v4 = 2;
  result = GNS_DcLinkRsp(v4, *(_DWORD *)(v1 + 1020), v3);
  *(_DWORD *)(v1 + 1020) = -1;
  if ((_DWORD)result != 1)
  {
    v6 = result;
    result = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v7 = mach_continuous_time();
      v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DcLinkRsp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "Ga11_04ReadSocketData_block_invoke_3", 257, v6);
      return LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
    }
  }
  return result;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_21E56C9B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x2207AFD84](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::operator<<[abi:ne180100]<std::char_traits<char>>(_QWORD *a1, char *a2)
{
  char *v3;
  int v4;
  const std::locale::facet *v5;
  int v6;
  std::locale v8[2];

  v8[1] = *(std::locale *)MEMORY[0x24BDAC8D0];
  v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v5 = std::locale::use_facet(v8, MEMORY[0x24BEDB350]);
    v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_21E56CA98(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2207AFD84](a1 + 128);
  return a1;
}

uint64_t gnss::GnssAdaptDevice::Ga11_15ConvertStringIPtoVect(const char *a1, unint64_t *a2)
{
  uint64_t v4;
  unsigned __int16 v5;
  int v6;
  _BYTE *v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  char v19;
  int v20;
  uint64_t v21;
  unsigned __int16 v22;
  uint64_t result;
  uint64_t v24;
  unsigned __int16 v25;
  uint64_t v26;
  unsigned __int16 v27;
  uint64_t v28;
  unsigned __int16 v29;
  char __str[1040];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v4 = mach_continuous_time();
    v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "Ga11_15ConvertStringIPtoVect");
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 5, 1);
  }
  if (a1 && (v6 = strnlen(a1, 0x100uLL), (v6 & 0xFFFFFEFF) == 0))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v26 = mach_continuous_time();
      v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Wrong IP address len,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "ADP", 69, "Ga11_15ConvertStringIPtoVect", 257, v6);
      LbsOsaTrace_WriteLog(0x18u, __str, v27, 0, 1);
    }
    result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v28 = mach_continuous_time();
      v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "ADP", 68, "Ga11_15ConvertStringIPtoVect");
      return LbsOsaTrace_WriteLog(0x18u, __str, v29, 5, 1);
    }
  }
  else
  {
    v7 = (_BYTE *)a2[1];
    do
    {
      v8 = a2[2];
      if ((unint64_t)v7 >= v8)
      {
        v10 = *a2;
        v11 = &v7[-*a2];
        v12 = (unint64_t)(v11 + 1);
        if ((uint64_t)(v11 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v13 = v8 - v10;
        if (2 * v13 > v12)
          v12 = 2 * v13;
        if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
          v14 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
          v15 = (char *)operator new(v14);
        else
          v15 = 0;
        v16 = &v11[(_QWORD)v15];
        v17 = &v11[(_QWORD)v15];
        *v17 = 0;
        v9 = v17 + 1;
        if (v7 != (_BYTE *)v10)
        {
          v18 = &v7[~v10];
          do
          {
            v19 = *--v7;
            (v18--)[(_QWORD)v15] = v19;
          }
          while (v7 != (_BYTE *)v10);
          v7 = (_BYTE *)*a2;
          v16 = v15;
        }
        *a2 = (unint64_t)v16;
        a2[1] = (unint64_t)v9;
        a2[2] = (unint64_t)&v15[v14];
        if (v7)
          operator delete(v7);
      }
      else
      {
        *v7 = 0;
        v9 = v7 + 1;
      }
      a2[1] = (unint64_t)v9;
      v20 = *(unsigned __int8 *)a1++;
      v7 = v9;
    }
    while (v20);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v21 = mach_continuous_time();
      v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: IPVectorSize,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 68, "Ga11_15ConvertStringIPtoVect", *((_DWORD *)a2 + 2) - *(_DWORD *)a2);
      LbsOsaTrace_WriteLog(0x18u, __str, v22, 5, 1);
    }
    result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v24 = mach_continuous_time();
      v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 68, "Ga11_15ConvertStringIPtoVect");
      return LbsOsaTrace_WriteLog(0x18u, __str, v25, 5, 1);
    }
  }
  return result;
}

void sub_21E56D2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char *a29)
{
  char *v30;
  uint64_t v31;

  v30 = a29;
  if (a29 == &a26)
  {
    v31 = 4;
    v30 = &a26;
  }
  else
  {
    if (!a29)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN4gnss15GnssAdaptDevice29Ga11_18HandleSuplAsyncEventCBE13e_gnsSUPL_MsgP17u_gnsSUPL_MsgData_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a1 + 64);
  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

__n128 __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 40);
  v3 = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v3;
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void ___ZN4gnss15GnssAdaptDevice29Ga11_18HandleSuplAsyncEventCBE13e_gnsSUPL_MsgP17u_gnsSUPL_MsgData_block_invoke_148(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int *v7;
  int v8;
  BOOL v9;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  unsigned __int16 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  int *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  char __str[1040];
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(_DWORD *)(v3 + 68);
  if (v4 == 2)
  {
    v5 = *(_QWORD *)(v3 + 56);
    if (!v5)
      goto LABEL_20;
    v6 = *(_DWORD *)(v5 + 20);
    if (v6 == 1)
      goto LABEL_20;
    if (v6 == 9)
    {
      v4 = 3;
      goto LABEL_21;
    }
    v7 = *(int **)(v3 + 48);
    if (!v7)
      goto LABEL_20;
    v8 = *v7;
    if ((*v7 - 2) < 2)
    {
      v9 = (v7[9] & 1) == 0;
      v10 = 19;
LABEL_12:
      if (v9)
        v4 = 2;
      else
        v4 = v10;
      goto LABEL_21;
    }
    if (v8)
    {
      if (v8 == 1)
      {
        v9 = (v7[9] & 1) == 0;
        v10 = 18;
        goto LABEL_12;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        v12 = **(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
        v13 = 515;
        goto LABEL_19;
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      v12 = **(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
      v13 = 770;
LABEL_19:
      v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LocInfoType,%u\n", v11, "ADP", 69, "Ga11_18HandleSuplAsyncEventCB_block_invoke", v13, v12);
      LbsOsaTrace_WriteLog(0x18u, __str, v14, 0, 1);
    }
LABEL_20:
    v4 = 2;
  }
LABEL_21:
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v16 = *(_DWORD *)(v15 + 40);
  v17 = *(_QWORD *)(v2 + 128);
  v18 = *(_QWORD *)(v2 + 136) - v17;
  if (v18)
  {
    v19 = (unsigned __int128)(v18 * (__int128)0x5397829CBC14E5E1) >> 64;
    v20 = (v19 >> 6) + ((unint64_t)v19 >> 63);
    if (v20 <= 1)
      v21 = 1;
    else
      v21 = (v19 >> 6) + ((unint64_t)v19 >> 63);
    if (*(_DWORD *)(v17 + 56) == v16)
    {
      v22 = 0;
LABEL_27:
      if (v22 < v20)
      {
        v23 = *(__int128 **)(v15 + 48);
        if (v23)
        {
          v24 = v17 + 196 * v22;
          v25 = *v23;
          v26 = v23[1];
          *(_QWORD *)(v24 + 31) = *(_QWORD *)((char *)v23 + 31);
          *(_OWORD *)v24 = v25;
          *(_OWORD *)(v24 + 16) = v26;
          v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
          v17 = *(_QWORD *)(v2 + 128);
        }
        v27 = *(__int128 **)(v15 + 56);
        if (v27)
        {
          v28 = v17 + 196 * v22;
          v29 = *v27;
          v30 = v27[1];
          v31 = v27[3];
          *(_OWORD *)(v28 + 96) = v27[2];
          *(_OWORD *)(v28 + 112) = v31;
          *(_OWORD *)(v28 + 64) = v29;
          *(_OWORD *)(v28 + 80) = v30;
          v32 = v27[4];
          v33 = v27[5];
          v34 = v27[6];
          *(_QWORD *)(v28 + 176) = *((_QWORD *)v27 + 14);
          *(_OWORD *)(v28 + 144) = v33;
          *(_OWORD *)(v28 + 160) = v34;
          *(_OWORD *)(v28 + 128) = v32;
          v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
          v17 = *(_QWORD *)(v2 + 128);
        }
        *(_DWORD *)(v17 + 196 * v22 + 184) = *(_DWORD *)(v15 + 64);
        v35 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        if (*(_DWORD *)(v35 + 68) == 2)
        {
          v36 = *(_DWORD *)(v17 + 196 * v22 + 188);
          if (v36 == 22)
            v37 = 23;
          else
            v37 = v4;
          if (v36 == 28)
            v4 = 22;
          else
            v4 = v37;
        }
        v38 = *(_DWORD *)(v35 + 72) - 1;
        if (v38 >= 3)
          v38 = -1;
        *(_DWORD *)(v17 + 196 * v22 + 44) = v38;
        v16 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
      }
    }
    else
    {
      v22 = 0;
      v39 = (int *)(v17 + 252);
      v40 = v21 - 1;
      while (v40 != v22)
      {
        v41 = *v39;
        v39 += 49;
        ++v22;
        if (v41 == v16)
        {
          if (v22 < v20)
            goto LABEL_27;
          break;
        }
      }
    }
  }
  gnss::GnssAdaptDevice::Ga10_05SendSessionSummaryReport(v2, v16, 1, v4);
  v42 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v43 = *(void **)(v42 + 48);
  if (v43)
  {
    free(v43);
    v42 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  }
  *(_QWORD *)(v42 + 48) = 0;
  v44 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v45 = *(void **)(v44 + 56);
  if (v45)
  {
    free(v45);
    v44 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  }
  *(_QWORD *)(v44 + 56) = 0;
}

void sub_21E56EC34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,char *a61)
{
  char *v62;
  uint64_t v63;

  v62 = a61;
  if (a61 == &a58)
  {
    v63 = 4;
    v62 = &a58;
  }
  else
  {
    if (!a61)
      goto LABEL_6;
    v63 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v62 + 8 * v63))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::vector<gnss::AgnssSummaryReport>::push_back[abi:ne180100](void **a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= (unint64_t)v6)
  {
    v18 = 0x7D6343EB1A1F58D1 * ((uint64_t)(v7 - (_QWORD)*a1) >> 2);
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) > 0x14E5E0A72F05397)
      std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
    v20 = 0x7D6343EB1A1F58D1 * ((v5 - (_BYTE *)*a1) >> 2);
    if (2 * v20 > v19)
      v19 = 2 * v20;
    if (v20 >= 0xA72F05397829CBLL)
      v21 = 0x14E5E0A72F05397;
    else
      v21 = v19;
    if (v21)
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<gnss::AgnssSummaryReport>>(v4, v21);
    else
      v22 = 0;
    v23 = &v22[196 * v18];
    v24 = &v22[196 * v21];
    *(_OWORD *)v23 = *(_OWORD *)a2;
    v25 = *(_OWORD *)(a2 + 16);
    v26 = *(_OWORD *)(a2 + 32);
    v27 = *(_OWORD *)(a2 + 64);
    *((_OWORD *)v23 + 3) = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v23 + 4) = v27;
    *((_OWORD *)v23 + 1) = v25;
    *((_OWORD *)v23 + 2) = v26;
    v28 = *(_OWORD *)(a2 + 80);
    v29 = *(_OWORD *)(a2 + 96);
    v30 = *(_OWORD *)(a2 + 128);
    *((_OWORD *)v23 + 7) = *(_OWORD *)(a2 + 112);
    *((_OWORD *)v23 + 8) = v30;
    *((_OWORD *)v23 + 5) = v28;
    *((_OWORD *)v23 + 6) = v29;
    v31 = *(_OWORD *)(a2 + 144);
    v32 = *(_OWORD *)(a2 + 160);
    v33 = *(_OWORD *)(a2 + 176);
    *((_DWORD *)v23 + 48) = *(_DWORD *)(a2 + 192);
    *((_OWORD *)v23 + 10) = v32;
    *((_OWORD *)v23 + 11) = v33;
    *((_OWORD *)v23 + 9) = v31;
    v17 = v23 + 196;
    v35 = (char *)*a1;
    v34 = (char *)a1[1];
    if (v34 != *a1)
    {
      do
      {
        *(_OWORD *)(v23 - 196) = *(_OWORD *)(v34 - 196);
        v36 = *(_OWORD *)(v34 - 180);
        v37 = *(_OWORD *)(v34 - 164);
        v38 = *(_OWORD *)(v34 - 148);
        *(_OWORD *)(v23 - 132) = *(_OWORD *)(v34 - 132);
        *(_OWORD *)(v23 - 148) = v38;
        *(_OWORD *)(v23 - 164) = v37;
        *(_OWORD *)(v23 - 180) = v36;
        v39 = *(_OWORD *)(v34 - 116);
        v40 = *(_OWORD *)(v34 - 100);
        v41 = *(_OWORD *)(v34 - 84);
        *(_OWORD *)(v23 - 68) = *(_OWORD *)(v34 - 68);
        *(_OWORD *)(v23 - 84) = v41;
        *(_OWORD *)(v23 - 100) = v40;
        *(_OWORD *)(v23 - 116) = v39;
        v42 = *(_OWORD *)(v34 - 52);
        v43 = *(_OWORD *)(v34 - 36);
        v44 = *(_OWORD *)(v34 - 20);
        *((_WORD *)v23 - 2) = *((_WORD *)v34 - 2);
        *(_OWORD *)(v23 - 20) = v44;
        *(_OWORD *)(v23 - 36) = v43;
        *(_OWORD *)(v23 - 52) = v42;
        v23 -= 196;
        v34 -= 196;
      }
      while (v34 != v35);
      v34 = (char *)*a1;
    }
    *a1 = v23;
    a1[1] = v17;
    a1[2] = v24;
    if (v34)
      operator delete(v34);
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v8 = *(_OWORD *)(a2 + 16);
    v9 = *(_OWORD *)(a2 + 32);
    v10 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v7 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v7 + 64) = v10;
    *(_OWORD *)(v7 + 16) = v8;
    *(_OWORD *)(v7 + 32) = v9;
    v11 = *(_OWORD *)(a2 + 80);
    v12 = *(_OWORD *)(a2 + 96);
    v13 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(v7 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(v7 + 128) = v13;
    *(_OWORD *)(v7 + 80) = v11;
    *(_OWORD *)(v7 + 96) = v12;
    v14 = *(_OWORD *)(a2 + 144);
    v15 = *(_OWORD *)(a2 + 160);
    v16 = *(_OWORD *)(a2 + 176);
    *(_DWORD *)(v7 + 192) = *(_DWORD *)(a2 + 192);
    *(_OWORD *)(v7 + 160) = v15;
    *(_OWORD *)(v7 + 176) = v16;
    *(_OWORD *)(v7 + 144) = v14;
    v17 = (char *)(v7 + 196);
  }
  a1[1] = v17;
}

size_t ___ZN4gnss15GnssAdaptDevice23Ga11_20SendStatusReportERK19s_gnsSUPL_StatusRep_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 v4;
  size_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  char __str[1040];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, a1 + 64);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 1))
  {
    bzero(__str, 0x410uLL);
    v3 = mach_continuous_time();
    v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Lat,%.7lf,Long,%.7lf,Alt,%.2lf,SemMaj,%f,SemMin,%f,UncAlt,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga11_20SendStatusReport_block_invoke", *(double *)(a1 + 88), *(double *)(a1 + 96), *(double *)(a1 + 104), *(double *)(a1 + 112), *(double *)(a1 + 120), *(double *)(a1 + 128));
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  result = LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0);
  if ((_DWORD)result)
  {
    bzero(__str, 0x410uLL);
    v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (*(_BYTE *)(a1 + 138))
      v7 = 84;
    else
      v7 = 70;
    if (*(_BYTE *)(a1 + 137))
      v8 = 84;
    else
      v8 = 70;
    if (*(_BYTE *)(a1 + 136))
      v9 = 84;
    else
      v9 = 70;
    v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SuplStatusReport PosMethod,%u,Status,%u,SessionId,%u,endCause,%u,HACC,%f,ephProvided,%c,refTimeProvided,%c,refLocProvided,%c\n", v6, "ADP", 73, "Ga11_20SendStatusReport_block_invoke", *(_DWORD *)(a1 + 68), *(_DWORD *)(a1 + 72), *(_DWORD *)(a1 + 64), *(_DWORD *)(a1 + 76), *(double *)(a1 + 80), v9, v8, v7);
    return LbsOsaTrace_WriteLog(0x18u, __str, v10, 4, 1);
  }
  return result;
}

uint64_t __copy_helper_block_e8_32c65_ZTSNSt3__18functionIFvRKN4gnss9Emergency4Supl13SessionStatusEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_e8_32c65_ZTSNSt3__18functionIFvRKN4gnss9Emergency4Supl13SessionStatusEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t ___ZN4gnss15GnssAdaptDevice26Ga11_22HandleGnsWlanInfoCBE11e_gnsWL_MsgP15u_gnsWL_MsgData_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v4;
  char __str[1040];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Requesting WLAN Measurements from FW\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 73, "Ga11_22HandleGnsWlanInfoCB_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v3, 4, 1);
  }
  *(_DWORD *)__str = *(_DWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v4 + 48))(v4, __str);
}

uint64_t __copy_helper_block_e8_32c83_ZTSNSt3__18functionIFN4gnss6ResultENS1_9Emergency4Supl22WlanMeasurementRequestEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 56);
  if (result)
  {
    if (result == a2 + 32)
    {
      *(_QWORD *)(a1 + 56) = a1 + 32;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 56) + 24))(*(_QWORD *)(a2 + 56), a1 + 32);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a1 + 56) = result;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 56) = 0;
  }
  return result;
}

_QWORD *__destroy_helper_block_e8_32c83_ZTSNSt3__18functionIFN4gnss6ResultENS1_9Emergency4Supl22WlanMeasurementRequestEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

_QWORD *std::vector<gnss::Emergency::Supl::LteCellInfo>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::LteCellInfo*,gnss::Emergency::Supl::LteCellInfo*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x924924924924925)
      std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
    result = operator new(28 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = (char *)result + 28 * a4;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v5[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_21E56F46C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

_QWORD *std::vector<gnss::Emergency::Supl::GsmCellInfo>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::GsmCellInfo*,gnss::Emergency::Supl::GsmCellInfo*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v5 = result;
    if (a4 >> 60)
      std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
    result = operator new(16 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[2 * a4];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v5[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_21E56F5B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<gnss::Emergency::Supl::WcdmaCellInfo>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::WcdmaCellInfo*,gnss::Emergency::Supl::WcdmaCellInfo*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v5 = result;
    if (a4 >> 59)
      std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
    result = operator new(32 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[4 * a4];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v5[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_21E56F688(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<gnss::Emergency::Supl::WlanMeasurementElement>::__init_with_size[abi:ne180100]<gnss::Emergency::Supl::WlanMeasurementElement*,gnss::Emergency::Supl::WlanMeasurementElement*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x1555555555555556)
      std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
    result = operator new(12 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = (char *)result + 12 * a4;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v5[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_21E56F770(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
}

{
  std::exception::~exception(this);
  JUMPOUT(0x2207AFDF0);
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_21E56F900(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

uint64_t std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *std::__function::__value_func<void ()(gnss::Result)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_21E56FC04(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_21E56FD7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<gnss::AgnssSummaryReport>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x14E5E0A72F05398)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(196 * a2);
}

_QWORD *std::__function::__func<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>,std::allocator<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>>,gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24E2B1548;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>,std::allocator<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>>,gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24E2B1548;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x2207AFDF0);
}

_QWORD *std::__function::__func<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>,std::allocator<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>>,gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_24E2B1548;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21E56FFB8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>,std::allocator<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>>,gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24E2B1548;
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>,std::allocator<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>>,gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>,std::allocator<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>>,gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>,std::allocator<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>>,gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t std::__function::__func<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>,std::allocator<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>>,gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>,std::allocator<std::function<gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest const&)>>,gnss::Result ()(gnss::Emergency::Supl::WlanMeasurementRequest)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

uint64_t NK_Check_Num_SV_Res(uint64_t result, _DWORD *a2, unsigned int a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10)
{
  uint64_t v10;
  _OWORD *v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  uint8x16_t v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint64_t v19;
  _OWORD *v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  uint8x16_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint64_t v28;
  _OWORD *v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  uint8x16_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  int v37;
  unsigned int v38;
  BOOL v39;
  BOOL v40;

  v10 = 0;
  v11 = (_OWORD *)(a7 + 152);
  v12 = 0uLL;
  v13 = 0uLL;
  v14 = 0uLL;
  v15 = 0uLL;
  do
  {
    v16 = (uint8x16_t)v11[v10];
    v17 = vmovl_u8(*(uint8x8_t *)v16.i8);
    v18 = vmovl_high_u8(v16);
    v15 = (int32x4_t)vaddw_high_u16((uint32x4_t)v15, v18);
    v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v18.i8);
    v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v17);
    v12 = (int32x4_t)vaddw_u16((uint32x4_t)v12, *(uint16x4_t *)v17.i8);
    ++v10;
  }
  while (v10 != 3);
  v19 = 0;
  *(_BYTE *)(a7 + 3) = vaddvq_s32(vaddq_s32(vaddq_s32(v12, v14), vaddq_s32(v13, v15)));
  v20 = (_OWORD *)(a10 + 152);
  v21 = 0uLL;
  v22 = 0uLL;
  v23 = 0uLL;
  v24 = 0uLL;
  do
  {
    v25 = (uint8x16_t)v20[v19];
    v26 = vmovl_u8(*(uint8x8_t *)v25.i8);
    v27 = vmovl_high_u8(v25);
    v24 = (int32x4_t)vaddw_high_u16((uint32x4_t)v24, v27);
    v23 = (int32x4_t)vaddw_u16((uint32x4_t)v23, *(uint16x4_t *)v27.i8);
    v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v26);
    v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v26.i8);
    ++v19;
  }
  while (v19 != 3);
  v28 = 0;
  *(_BYTE *)(a10 + 3) = vaddvq_s32(vaddq_s32(vaddq_s32(v21, v23), vaddq_s32(v22, v24)));
  v29 = (_OWORD *)(a8 + 152);
  v30 = 0uLL;
  v31 = 0uLL;
  v32 = 0uLL;
  v33 = 0uLL;
  do
  {
    v34 = (uint8x16_t)v29[v28];
    v35 = vmovl_u8(*(uint8x8_t *)v34.i8);
    v36 = vmovl_high_u8(v34);
    v33 = (int32x4_t)vaddw_high_u16((uint32x4_t)v33, v36);
    v32 = (int32x4_t)vaddw_u16((uint32x4_t)v32, *(uint16x4_t *)v36.i8);
    v31 = (int32x4_t)vaddw_high_u16((uint32x4_t)v31, v35);
    v30 = (int32x4_t)vaddw_u16((uint32x4_t)v30, *(uint16x4_t *)v35.i8);
    ++v28;
  }
  while (v28 != 3);
  LOBYTE(v37) = vaddvq_s32(vaddq_s32(vaddq_s32(v30, v32), vaddq_s32(v31, v33)));
  *(_BYTE *)(a8 + 3) = v37;
  v38 = *(unsigned __int8 *)(a7 + 3);
  if (v38 < a3 || v38 <= 2 && (a4 & 1) == 0 && (!(_DWORD)result || !a6 && *a2))
  {
    *(_BYTE *)(a7 + 3) = 0;
    *v11 = 0u;
    *(_OWORD *)(a7 + 168) = 0u;
    *(_OWORD *)(a7 + 184) = 0u;
    v37 = *(unsigned __int8 *)(a8 + 3);
    if (v37 + *(unsigned __int8 *)(a10 + 3) < 3
      || (a9 <= 100000000.0 ? (v39 = a4 == 0) : (v39 = 1), !v39 ? (v40 = a5 <= 2) : (v40 = 1), v40))
    {
      LOBYTE(v37) = 0;
      *(_BYTE *)(a10 + 3) = 0;
      *v20 = 0uLL;
      *(_OWORD *)(a10 + 168) = 0uLL;
      *(_OWORD *)(a10 + 184) = 0uLL;
      *(_BYTE *)(a8 + 3) = 0;
      *v29 = 0uLL;
      *(_OWORD *)(a8 + 168) = 0uLL;
      *(_OWORD *)(a8 + 184) = 0uLL;
    }
  }
  if (a3 > (*(_BYTE *)(a10 + 3) + v37))
  {
    *(_BYTE *)(a10 + 3) = 0;
    *v20 = 0u;
    *(_OWORD *)(a10 + 168) = 0u;
    *(_OWORD *)(a10 + 184) = 0u;
    *(_BYTE *)(a8 + 3) = 0;
    *v29 = 0u;
    *(_OWORD *)(a8 + 168) = 0u;
    *(_OWORD *)(a8 + 184) = 0u;
  }
  return result;
}

uint64_t ARP_Calc(uint64_t result)
{
  unsigned int v1;
  double v2;
  float64x2_t v3;
  float64x2_t v4;

  if (*(char *)(result + 88) < 1)
  {
    v3 = (float64x2_t)vdupq_n_s64(0x416312D000000000uLL);
    v4 = v3;
  }
  else
  {
    v1 = *(unsigned __int8 *)(result + 88) - 1;
    if (v1 >= 9)
      v1 = 9;
    v2 = g_ARP_cBiasP_Table[v1 + 10];
    v3 = vmulq_n_f64(vsqrtq_f64(*(float64x2_t *)(result + 8)), v2);
    v4 = vmulq_n_f64(vsqrtq_f64(*(float64x2_t *)(result + 24)), v2);
  }
  *(float64x2_t *)(result + 40) = v3;
  *(float64x2_t *)(result + 56) = v4;
  return result;
}

void Gnm31_05SendUserCfgGnc(void)
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _WORD *v9;
  _DWORD *v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  int v17;
  char v18;
  uint64_t v19;
  unsigned __int16 v20;
  uint64_t v21;
  unsigned __int16 v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  char __str[1040];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v30 = BYTE1(xmmword_253FFD8C0);
  v31 = xmmword_253FFD8C0;
  v28 = BYTE5(xmmword_253FFD8C0);
  v29 = BYTE2(xmmword_253FFD8C0);
  v26 = BYTE7(xmmword_253FFD8C0);
  v27 = BYTE6(xmmword_253FFD8C0);
  v24 = BYTE11(xmmword_253FFD8C0);
  v25 = BYTE10(xmmword_253FFD8C0);
  v23 = BYTE12(xmmword_253FFD8C0);
  v0 = HIBYTE(xmmword_253FFD8C0);
  v1 = byte_253FFD8D0;
  v2 = byte_253FFD8D1;
  v3 = dword_253FFD8D4;
  v4 = BYTE1(dword_253FFD8D4);
  v5 = BYTE2(dword_253FFD8D4);
  v6 = byte_253FFD8D9;
  v7 = byte_253FFD8DA;
  v8 = byte_253FFD8DB;
  v9 = gnssOsa_Calloc("Gnm31_05SendUserCfgGnc", 507, 1, 0x50uLL);
  if (!v9)
    return;
  v10 = v9;
  if (v28 | v27 | v26)
    v11 = ((v31 | v30 | v29) != 0) | 0x20;
  else
    v11 = (v31 | v30 | v29) != 0;
  if (v25 | v24 | v23)
    v12 = v11 | 4;
  else
    v12 = v11;
  if (v0 | v1 | v2)
    v13 = v12 | 0x10;
  else
    v13 = v12;
  if (v3 | v4 | v5)
    v14 = v13 | 2;
  else
    v14 = v13;
  if (v6 | v7 | v8)
    v15 = v14 | 0x40;
  else
    v15 = v14;
  v9[16] = v15;
  *((_BYTE *)v9 + 16) = BYTE1(dword_253FFD8AC);
  *((_BYTE *)v9 + 17) = dword_253FFD8AC;
  *((_BYTE *)v9 + 18) = BYTE2(dword_253FFD8AC);
  v9[10] = 1;
  v16 = dword_253FFD8A8;
  if ((dword_253FFD8A8 & 0x200) == 0)
  {
    v17 = 19;
    if ((dword_253FFD8A8 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_21;
  }
  *((_BYTE *)v9 + 23) = dword_253FFD8B0;
  v9[12] = HIWORD(dword_253FFD8B0);
  v17 = 51;
  if ((v16 & 0x800) != 0)
  {
LABEL_21:
    v17 |= 0x80u;
    v9[17] = word_253FFD8B4;
  }
LABEL_22:
  *((_DWORD *)v9 + 3) = v17 | 0x200;
  *((_BYTE *)v9 + 72) = (dword_253FFD8A4 & 0x40000) != 0;
  v18 = HIBYTE(dword_253FFD8AC);
  switch(HIBYTE(dword_253FFD8AC))
  {
    case 0:
    case 2:
    case 3:
      goto LABEL_30;
    case 1:
      Gnm17_12SendClearNv(0x10000);
      break;
    case 4:
      v18 = 5;
      goto LABEL_30;
    case 5:
      v18 = 1;
      goto LABEL_30;
    case 6:
      v18 = 4;
      goto LABEL_30;
    case 7:
      v18 = 6;
LABEL_30:
      *((_BYTE *)v9 + 22) = v18;
      *((_DWORD *)v9 + 3) = v17 | 0x208;
      break;
    default:
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v19 = mach_continuous_time();
        v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StartMode,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNM", 87, "Gnm31_05SendUserCfgGnc", 515, HIBYTE(dword_253FFD8AC));
        LbsOsaTrace_WriteLog(0xBu, __str, v20, 2, 1);
      }
      break;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v21 = mach_continuous_time();
    v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_CFG_UPDATE_IND =>GNCP CfgMask,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "GNM", 73, "Gnm31_05SendUserCfgGnc", v10[3]);
    LbsOsaTrace_WriteLog(0xBu, __str, v22, 4, 1);
  }
  AgpsSendFsmMsg(128, 134, 8394499, v10);
}

void Gnm31_06SendUserCfgLsim(void)
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  char v4;
  char v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned __int16 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned __int16 v16;
  unsigned int v17;
  const float *v18;
  uint32x4_t v19;
  int8x16_t v20;
  int8x8_t v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  unsigned __int16 v25;
  char __str[1040];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v0 = gnssOsa_Calloc("Gnm31_06SendUserCfgLsim", 601, 1, 0x20uLL);
  if (v0)
  {
    v1 = v0;
    v0[3] = 0;
    v2 = gnssOsa_Calloc("Gnm31_06SendUserCfgLsim", 609, 1, 0x244uLL);
    v1[2] = v2;
    if (v2)
    {
      v3 = 0;
      v4 = 1;
      do
      {
        v5 = v4;
        v6 = (char *)&g_UsrConfig + 262 * v3;
        v7 = v1[2];
        *(_BYTE *)(v7 + 268 * v3) = v6[82];
        v8 = v6[339];
        switch(v6[339])
        {
          case 0:
            goto LABEL_11;
          case 1:
            goto LABEL_7;
          case 2:
            v8 = 2;
            goto LABEL_7;
          case 3:
            v8 = 3;
LABEL_7:
            v9 = v7 + 268 * v3;
            *(_DWORD *)(v9 + 4) = v8;
            v10 = (char *)&g_UsrConfig + 262 * v3;
            *(_WORD *)(v9 + 264) = *((_WORD *)v10 + 171);
            strncpy_s((char *)(v9 + 8), 0x100u, v10 + 83, v10[340]);
            break;
          default:
            if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v11 = mach_continuous_time();
              v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx AddrType,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 87, "Gnm31_06SendUserCfgLsim", 770, v6[339]);
              LbsOsaTrace_WriteLog(0xBu, __str, v12, 2, 1);
            }
            v7 = v1[2];
LABEL_11:
            *(_DWORD *)(v7 + 268 * v3 + 4) = 0;
            break;
        }
        v4 = 0;
        v3 = 1;
      }
      while ((v5 & 1) != 0);
      v13 = v1[2];
      *(_DWORD *)(v13 + 536) = 0;
      v14 = byte_253FFD8E8;
      if (byte_253FFD8E8 && byte_253FFD8E8 != 1 && byte_253FFD8E8 != 2)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v15 = mach_continuous_time();
          v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PrefPosMethod,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNM", 87, "Gnm31_06SendUserCfgLsim", 770, byte_253FFD8E8);
          LbsOsaTrace_WriteLog(0xBu, __str, v16, 2, 1);
        }
        v13 = v1[2];
        v14 = 3;
      }
      *(_DWORD *)(v13 + 556) = v14;
      v17 = (dword_253FFD8A4 << 10) & 0x30000 | (8 * (dword_253FFD8A4 & 0xF)) & 0x7E | (((dword_253FFD8A4 >> 5) & 1) << 14) & 0xFFFBFFFF | (dword_253FFD8A4 >> 11) & 1 | (((dword_253FFD8A4 >> 4) & 1) << 7) & 0xFFFBFFFF | (((dword_253FFD8A4 >> 14) & 1) << 18);
      if ((dword_253FFD8A4 & 1) != 0)
      {
        v18 = (const float *)&dword_253FFD8E0;
        v19 = (uint32x4_t)vld1q_dup_f32(v18);
        v20 = vandq_s8((int8x16_t)vshlq_u32(v19, (uint32x4_t)xmmword_21E7F9D70), (int8x16_t)xmmword_21E7F9D80);
        v21 = vorr_s8(*(int8x8_t *)v20.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
        v17 |= v21.i32[0] | v21.i32[1];
      }
      v22 = (unsigned __int16)((_WORD)dword_253FFD8A8 << 9) & (unsigned __int16)((_WORD)dword_253FFDAFC << 15) & 0x8000 | v17;
      if ((dword_253FFD8A8 & 0x20) != 0)
      {
        v23 = dword_253FFD8E4;
        if ((dword_253FFD8E4 & 0x40) != 0)
          *(_WORD *)(v13 + 560) = dword_253FFDAF6;
        if ((v23 & 0x100) != 0)
          *(_WORD *)(v13 + 562) = HIWORD(dword_253FFDAF6);
      }
      *(_BYTE *)(v13 + 568) = xmmword_253FFD8C0;
      *(int32x2_t *)(v13 + 569) = vzip1_s32(*(int32x2_t *)((char *)&xmmword_253FFD8C0 + 1), *(int32x2_t *)&byte_253FFD8D9);
      *(_BYTE *)(v13 + 577) = byte_253FFD8DD;
      *(_DWORD *)(v13 + 564) = v22;
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v24 = mach_continuous_time();
        v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_LSIM_LSIM_CONFIG_IND =>LSIM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "GNM", 73, "Gnm31_06SendUserCfgLsim");
        LbsOsaTrace_WriteLog(0xBu, __str, v25, 4, 1);
      }
      AgpsSendFsmMsg(128, 131, 8594435, v1);
    }
    else
    {
      free(v1);
    }
  }
}

size_t Gnm31_10InitUserCfg(void)
{
  uint64_t v0;
  char *v1;
  _OWORD *v2;
  char *v3;
  _OWORD __src[39];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  bzero(__src, 0x270uLL);
  BYTE5(__src[1]) = 2;
  BYTE14(__src[1]) = 30;
  memset(&__src[2], 0, 38);
  LOBYTE(__src[5]) = 2;
  v0 = 82;
  do
  {
    v1 = (char *)__src + v0;
    *v1 = -1;
    *(_OWORD *)(v1 + 17) = 0uLL;
    *(_OWORD *)(v1 + 33) = 0uLL;
    *(_OWORD *)(v1 + 49) = 0uLL;
    *(_OWORD *)(v1 + 65) = 0uLL;
    *(_OWORD *)(v1 + 81) = 0uLL;
    *(_OWORD *)(v1 + 97) = 0uLL;
    *(_OWORD *)(v1 + 113) = 0uLL;
    *(_OWORD *)(v1 + 129) = 0uLL;
    *(_OWORD *)(v1 + 145) = 0uLL;
    *(_OWORD *)(v1 + 161) = 0uLL;
    *(_OWORD *)(v1 + 177) = 0uLL;
    *(_OWORD *)(v1 + 193) = 0uLL;
    *(_OWORD *)(v1 + 209) = 0uLL;
    *(_OWORD *)(v1 + 225) = 0uLL;
    *(_OWORD *)(v1 + 241) = 0uLL;
    *((_WORD *)v1 + 130) = -1;
    v2 = (_OWORD *)((char *)&__src[16] + v0 + 6);
    *(_OWORD *)(v1 + 1) = 0uLL;
    v3 = (char *)__src + v0 + 1;
    v0 += 262;
    *((_WORD *)v3 + 128) = 0;
  }
  while (v2 != (_OWORD *)((char *)&__src[37] + 14));
  *(_DWORD *)((char *)&__src[37] + 14) = 0;
  *(_QWORD *)((char *)&__src[38] + 4) = 0;
  memcpy(&g_UsrConfig, __src, 0x26CuLL);
  g_UsrConfig = 0x332E352E322E76;
  *(_QWORD *)&dword_253FFD8A4 = 0x47F0000181FLL;
  dword_253FFD8AC = 512;
  byte_253FFD8B6 = 30;
  LODWORD(xmmword_253FFD8C0) = 16843009;
  *(__int128 *)((char *)&xmmword_253FFD8C0 + 4) = xmmword_21E7F9D90;
  dword_253FFD8D4 = 16777217;
  byte_253FFD8D8 = 0;
  *(_DWORD *)&byte_253FFD8D9 = 16843009;
  byte_253FFD8DD = 0;
  *(_QWORD *)&dword_253FFD8E0 = 0x10000001ELL;
  byte_253FFD8E8 = 2;
  dword_253FFDAFC = 1;
  return Gnm31_00PrintUsrCfg("INITIALIZED DEFAULT VALUE");
}

size_t Gnm31_00PrintUsrCfg(const char *a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v4;
  unsigned __int16 v5;
  double v6;
  uint64_t v7;
  unsigned __int16 v8;
  double v9;
  uint64_t v10;
  unsigned __int16 v11;
  double v12;
  uint64_t v13;
  unsigned __int16 v14;
  double v15;
  uint64_t v16;
  unsigned __int16 v17;
  double v18;
  uint64_t v19;
  unsigned __int16 v20;
  double v21;
  uint64_t v22;
  unsigned __int16 v23;
  double v24;
  uint64_t v25;
  unsigned __int16 v26;
  double v27;
  uint64_t v28;
  unsigned __int16 v29;
  double v30;
  uint64_t v31;
  unsigned __int16 v32;
  double v33;
  uint64_t v34;
  unsigned __int16 v35;
  double v36;
  uint64_t v37;
  unsigned __int16 v38;
  double v39;
  uint64_t v40;
  unsigned __int16 v41;
  double v42;
  uint64_t v43;
  unsigned __int16 v44;
  double v45;
  uint64_t v46;
  unsigned __int16 v47;
  double v48;
  uint64_t v49;
  unsigned __int16 v50;
  double v51;
  uint64_t v52;
  unsigned __int16 v53;
  double v54;
  uint64_t v55;
  unsigned __int16 v56;
  double v57;
  uint64_t v58;
  unsigned __int16 v59;
  uint64_t v60;
  unsigned __int16 v61;
  uint64_t v62;
  unsigned __int16 v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int16 v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int16 v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int16 v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int16 v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int16 v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int16 v105;
  uint64_t v106;
  unsigned __int16 v107;
  double v108;
  uint64_t v109;
  unsigned __int16 v110;
  double v111;
  uint64_t v112;
  unsigned __int16 v113;
  double v114;
  uint64_t v115;
  unsigned __int16 v116;
  double v117;
  uint64_t v118;
  unsigned __int16 v119;
  double v120;
  uint64_t v121;
  unsigned __int16 v122;
  double v123;
  uint64_t v124;
  unsigned __int16 v125;
  double v126;
  uint64_t v127;
  unsigned __int16 v128;
  uint64_t v129;
  unsigned __int16 v130;
  uint64_t v131;
  char v132;
  int v133;
  char v134;
  uint64_t v135;
  unsigned __int16 v136;
  char *v137;
  const char *v138;
  int v139;
  uint64_t v140;
  unsigned __int16 v141;
  uint64_t v142;
  unsigned __int16 v143;
  uint64_t v144;
  unsigned __int16 v145;
  uint64_t v146;
  unsigned __int16 v147;
  double v148;
  uint64_t v149;
  unsigned __int16 v150;
  double v151;
  uint64_t v152;
  unsigned __int16 v153;
  double v154;
  uint64_t v155;
  unsigned __int16 v156;
  uint64_t v157;
  unsigned __int16 v158;
  uint64_t v159;
  unsigned __int16 v160;
  size_t result;
  uint64_t v162;
  unsigned __int16 v163;
  char __str[1040];
  uint64_t v165;

  v165 = *MEMORY[0x24BDAC8D0];
  if ((int)strnlen((const char *)&g_UsrConfig, 0xCuLL) <= 11
    && LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:%s Version,%s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm31_00PrintUsrCfg", a1, (const char *)&g_UsrConfig);
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v4 = mach_continuous_time();
    v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:ConfigMask,0x%X,Config2Mask,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm31_00PrintUsrCfg", dword_253FFD8A4, dword_253FFD8A8);
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v6 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v7 = 89;
    if ((dword_253FFD8A4 & 1) == 0)
      v7 = 78;
    v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:UPAllowed,%c\n", (unint64_t)v6, "GNM", 68, "Gnm31_00PrintUsrCfg", v7);
    LbsOsaTrace_WriteLog(0xBu, __str, v8, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v9 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v10 = 89;
    if ((dword_253FFD8A4 & 2) == 0)
      v10 = 78;
    v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:CPAllowed,%c\n", (unint64_t)v9, "GNM", 68, "Gnm31_00PrintUsrCfg", v10);
    LbsOsaTrace_WriteLog(0xBu, __str, v11, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v12 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v13 = 89;
    if ((dword_253FFD8A4 & 4) == 0)
      v13 = 78;
    v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:UPoverCP,%c\n", (unint64_t)v12, "GNM", 68, "Gnm31_00PrintUsrCfg", v13);
    LbsOsaTrace_WriteLog(0xBu, __str, v14, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v15 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v16 = 89;
    if ((dword_253FFD8A4 & 8) == 0)
      v16 = 78;
    v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:MoAllowed,%c\n", (unint64_t)v15, "GNM", 68, "Gnm31_00PrintUsrCfg", v16);
    LbsOsaTrace_WriteLog(0xBu, __str, v17, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v18 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v19 = 89;
    if ((dword_253FFD8A4 & 0x10) == 0)
      v19 = 78;
    v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:NIAllowed,%c\n", (unint64_t)v18, "GNM", 68, "Gnm31_00PrintUsrCfg", v19);
    LbsOsaTrace_WriteLog(0xBu, __str, v20, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v21 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v22 = 89;
    if ((dword_253FFD8A4 & 0x20) == 0)
      v22 = 78;
    v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:FAAllowed,%c\n", (unint64_t)v21, "GNM", 68, "Gnm31_00PrintUsrCfg", v22);
    LbsOsaTrace_WriteLog(0xBu, __str, v23, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v24 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v25 = 89;
    if ((dword_253FFD8A4 & 0x40) == 0)
      v25 = 78;
    v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:Wi-FiAid,%c\n", (unint64_t)v24, "GNM", 68, "Gnm31_00PrintUsrCfg", v25);
    LbsOsaTrace_WriteLog(0xBu, __str, v26, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v27 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v28 = 89;
    if ((dword_253FFD8A4 & 0x80) == 0)
      v28 = 78;
    v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SNTPRefTime,%c\n", (unint64_t)v27, "GNM", 68, "Gnm31_00PrintUsrCfg", v28);
    LbsOsaTrace_WriteLog(0xBu, __str, v29, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v30 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v31 = 89;
    if ((dword_253FFD8A4 & 0x100) == 0)
      v31 = 78;
    v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SensorAid,%c\n", (unint64_t)v30, "GNM", 68, "Gnm31_00PrintUsrCfg", v31);
    LbsOsaTrace_WriteLog(0xBu, __str, v32, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v33 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v34 = 89;
    if ((dword_253FFD8A4 & 0x200) == 0)
      v34 = 78;
    v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:HotStartReady,%c\n", (unint64_t)v33, "GNM", 68, "Gnm31_00PrintUsrCfg", v34);
    LbsOsaTrace_WriteLog(0xBu, __str, v35, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v36 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v37 = 89;
    if ((dword_253FFD8A4 & 0x400) == 0)
      v37 = 78;
    v38 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:PositionReady,%c\n", (unint64_t)v36, "GNM", 68, "Gnm31_00PrintUsrCfg", v37);
    LbsOsaTrace_WriteLog(0xBu, __str, v38, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v39 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v40 = 89;
    if ((dword_253FFD8A4 & 0x800) == 0)
      v40 = 78;
    v41 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:GNSSEnabled,%c\n", (unint64_t)v39, "GNM", 68, "Gnm31_00PrintUsrCfg", v40);
    LbsOsaTrace_WriteLog(0xBu, __str, v41, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v42 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v43 = 89;
    if ((dword_253FFD8A4 & 0x8000) == 0)
      v43 = 78;
    v44 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:LTLAgeingEnabled,%c\n", (unint64_t)v42, "GNM", 68, "Gnm31_00PrintUsrCfg", v43);
    LbsOsaTrace_WriteLog(0xBu, __str, v44, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v45 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v46 = 89;
    if ((dword_253FFD8A4 & 0x10000) == 0)
      v46 = 78;
    v47 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:STLDivIgnore,%c\n", (unint64_t)v45, "GNM", 68, "Gnm31_00PrintUsrCfg", v46);
    LbsOsaTrace_WriteLog(0xBu, __str, v47, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v48 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v49 = 89;
    if ((dword_253FFD8A4 & 0x20000) == 0)
      v49 = 78;
    v50 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:CLTLearningsEnabled,%c\n", (unint64_t)v48, "GNM", 68, "Gnm31_00PrintUsrCfg", v49);
    LbsOsaTrace_WriteLog(0xBu, __str, v50, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v51 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v52 = 89;
    if ((dword_253FFD8A4 & 0x1000) == 0)
      v52 = 78;
    v53 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:EarlyReturn,%c\n", (unint64_t)v51, "GNM", 68, "Gnm31_00PrintUsrCfg", v52);
    LbsOsaTrace_WriteLog(0xBu, __str, v53, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v54 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v55 = 89;
    if ((dword_253FFD8A4 & 0x4000) == 0)
      v55 = 78;
    v56 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:NwPeriodicOverride,%c\n", (unint64_t)v54, "GNM", 68, "Gnm31_00PrintUsrCfg", v55);
    LbsOsaTrace_WriteLog(0xBu, __str, v56, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v57 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v58 = 89;
    if ((dword_253FFD8A4 & 0x40000) == 0)
      v58 = 78;
    v59 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:UseBrdNavMsgDisbld,%c\n", (unint64_t)v57, "GNM", 68, "Gnm31_00PrintUsrCfg", v58);
    LbsOsaTrace_WriteLog(0xBu, __str, v59, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v60 = mach_continuous_time();
    v61 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SensitivityTTFF,%hhu,SensitivityMode,%hhu,PowerPref,%hhu,ColdStartMode,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v60), "GNM", 73, "Gnm31_00PrintUsrCfg", dword_253FFD8AC, BYTE1(dword_253FFD8AC), BYTE2(dword_253FFD8AC), HIBYTE(dword_253FFD8AC));
    LbsOsaTrace_WriteLog(0xBu, __str, v61, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v62 = mach_continuous_time();
    v63 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:Constel Auto Msb Msa PredEph SaEph\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v62), "GNM", 73, "Gnm31_00PrintUsrCfg");
    LbsOsaTrace_WriteLog(0xBu, __str, v63, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v64 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v65 = 89;
    if (BYTE4(xmmword_253FFD8C0))
      v66 = 89;
    else
      v66 = 78;
    if (BYTE3(xmmword_253FFD8C0))
      v67 = 89;
    else
      v67 = 78;
    if (BYTE2(xmmword_253FFD8C0))
      v68 = 89;
    else
      v68 = 78;
    if (BYTE1(xmmword_253FFD8C0))
      v69 = 89;
    else
      v69 = 78;
    if (!(_BYTE)xmmword_253FFD8C0)
      v65 = 78;
    v70 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:GPS  %c %c %c %c %c\n", (unint64_t)v64, "GNM", 73, "Gnm31_00PrintUsrCfg", v65, v69, v68, v67, v66);
    LbsOsaTrace_WriteLog(0xBu, __str, v70, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v71 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v72 = 89;
    if (BYTE9(xmmword_253FFD8C0))
      v73 = 89;
    else
      v73 = 78;
    if (BYTE8(xmmword_253FFD8C0))
      v74 = 89;
    else
      v74 = 78;
    if (BYTE7(xmmword_253FFD8C0))
      v75 = 89;
    else
      v75 = 78;
    if (BYTE6(xmmword_253FFD8C0))
      v76 = 89;
    else
      v76 = 78;
    if (!BYTE5(xmmword_253FFD8C0))
      v72 = 78;
    v77 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:GLON %c %c %c %c %c\n", (unint64_t)v71, "GNM", 73, "Gnm31_00PrintUsrCfg", v72, v76, v75, v74, v73);
    LbsOsaTrace_WriteLog(0xBu, __str, v77, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v78 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v79 = 89;
    if (BYTE14(xmmword_253FFD8C0))
      v80 = 89;
    else
      v80 = 78;
    if (BYTE13(xmmword_253FFD8C0))
      v81 = 89;
    else
      v81 = 78;
    if (BYTE12(xmmword_253FFD8C0))
      v82 = 89;
    else
      v82 = 78;
    if (BYTE11(xmmword_253FFD8C0))
      v83 = 89;
    else
      v83 = 78;
    if (!BYTE10(xmmword_253FFD8C0))
      v79 = 78;
    v84 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SBAS %c %c %c %c %c\n", (unint64_t)v78, "GNM", 73, "Gnm31_00PrintUsrCfg", v79, v83, v82, v81, v80);
    LbsOsaTrace_WriteLog(0xBu, __str, v84, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v85 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v86 = 89;
    if (byte_253FFD8D3)
      v87 = 89;
    else
      v87 = 78;
    if (byte_253FFD8D2)
      v88 = 89;
    else
      v88 = 78;
    if (byte_253FFD8D1)
      v89 = 89;
    else
      v89 = 78;
    if (byte_253FFD8D0)
      v90 = 89;
    else
      v90 = 78;
    if (!HIBYTE(xmmword_253FFD8C0))
      v86 = 78;
    v91 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:QZSS %c %c %c %c %c\n", (unint64_t)v85, "GNM", 73, "Gnm31_00PrintUsrCfg", v86, v90, v89, v88, v87);
    LbsOsaTrace_WriteLog(0xBu, __str, v91, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v92 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v93 = 89;
    if (byte_253FFD8D8)
      v94 = 89;
    else
      v94 = 78;
    if (HIBYTE(dword_253FFD8D4))
      v95 = 89;
    else
      v95 = 78;
    if (BYTE2(dword_253FFD8D4))
      v96 = 89;
    else
      v96 = 78;
    if (BYTE1(dword_253FFD8D4))
      v97 = 89;
    else
      v97 = 78;
    if (!(_BYTE)dword_253FFD8D4)
      v93 = 78;
    v98 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:GAL  %c %c %c %c %c\n", (unint64_t)v92, "GNM", 73, "Gnm31_00PrintUsrCfg", v93, v97, v96, v95, v94);
    LbsOsaTrace_WriteLog(0xBu, __str, v98, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v99 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v100 = 89;
    if (byte_253FFD8DD)
      v101 = 89;
    else
      v101 = 78;
    if (byte_253FFD8DC)
      v102 = 89;
    else
      v102 = 78;
    if (byte_253FFD8DB)
      v103 = 89;
    else
      v103 = 78;
    if (byte_253FFD8DA)
      v104 = 89;
    else
      v104 = 78;
    if (!byte_253FFD8D9)
      v100 = 78;
    v105 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:BDS  %c %c %c %c %c\n", (unint64_t)v99, "GNM", 73, "Gnm31_00PrintUsrCfg", v100, v104, v103, v102, v101);
    LbsOsaTrace_WriteLog(0xBu, __str, v105, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v106 = mach_continuous_time();
    v107 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SUPL ConfigMask,0x%X,Config2Mask,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v106), "GNM", 73, "Gnm31_00PrintUsrCfg", dword_253FFD8E0, dword_253FFD8E4);
    LbsOsaTrace_WriteLog(0xBu, __str, v107, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v108 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v109 = 89;
    if ((dword_253FFD8E0 & 1) == 0)
      v109 = 78;
    v110 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SUPL MultiSessn,%c\n", (unint64_t)v108, "GNM", 68, "Gnm31_00PrintUsrCfg", v109);
    LbsOsaTrace_WriteLog(0xBu, __str, v110, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v111 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v112 = 89;
    if ((dword_253FFD8E0 & 2) == 0)
      v112 = 78;
    v113 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SUPL SecureTLS,%c\n", (unint64_t)v111, "GNM", 68, "Gnm31_00PrintUsrCfg", v112);
    LbsOsaTrace_WriteLog(0xBu, __str, v113, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v114 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v115 = 89;
    if ((dword_253FFD8E0 & 4) == 0)
      v115 = 78;
    v116 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SUPL PosTechECID,%c\n", (unint64_t)v114, "GNM", 68, "Gnm31_00PrintUsrCfg", v115);
    LbsOsaTrace_WriteLog(0xBu, __str, v116, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v117 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v118 = 89;
    if ((dword_253FFD8E0 & 8) == 0)
      v118 = 78;
    v119 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SUPL Ver2Support,%c\n", (unint64_t)v117, "GNM", 68, "Gnm31_00PrintUsrCfg", v118);
    LbsOsaTrace_WriteLog(0xBu, __str, v119, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v120 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v121 = 89;
    if ((dword_253FFD8E0 & 0x10) == 0)
      v121 = 78;
    v122 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SUPL LPPPDUs,%c\n", (unint64_t)v120, "GNM", 68, "Gnm31_00PrintUsrCfg", v121);
    LbsOsaTrace_WriteLog(0xBu, __str, v122, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v123 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v124 = 89;
    if ((dword_253FFD8E0 & 0x20) == 0)
      v124 = 78;
    v125 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SUPL Ver2SHA1,%c\n", (unint64_t)v123, "GNM", 68, "Gnm31_00PrintUsrCfg", v124);
    LbsOsaTrace_WriteLog(0xBu, __str, v125, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v126 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v127 = 89;
    if ((dword_253FFD8E0 & 0x40) == 0)
      v127 = 78;
    v128 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SUPL MSAdisabl,%c\n", (unint64_t)v126, "GNM", 68, "Gnm31_00PrintUsrCfg", v127);
    LbsOsaTrace_WriteLog(0xBu, __str, v128, 5, 1);
  }
  if ((LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0) & 1) != 0)
  {
    bzero(__str, 0x410uLL);
    v129 = mach_continuous_time();
    v130 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SUPL PrefPosMeth,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v129), "GNM", 73, "Gnm31_00PrintUsrCfg", byte_253FFD8E8);
    LbsOsaTrace_WriteLog(0xBu, __str, v130, 4, 1);
  }
  v131 = 0;
  v132 = 1;
  v133 = 1;
  do
  {
    v134 = v132;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v135 = mach_continuous_time();
      v136 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SUPL SIMNo,%u,SIMId,%u,SLPAddrType,%hhu,PortNum,%u,SLPAddrLen,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v135), "GNM", 73, "Gnm31_00PrintUsrCfg", v133, *((unsigned __int8 *)&g_UsrConfig + 262 * v131 + 82), *((unsigned __int8 *)&g_UsrConfig + 262 * v131 + 339), *((unsigned __int16 *)&g_UsrConfig + 131 * v131 + 171), *((unsigned __int8 *)&g_UsrConfig + 262 * v131 + 340));
      LbsOsaTrace_WriteLog(0xBu, __str, v136, 4, 1);
    }
    v137 = (char *)&g_UsrConfig + 262 * v131;
    v139 = v137[83];
    v138 = v137 + 83;
    if (v139 && (int)strnlen(v138, 0x100uLL) <= 255 && LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v140 = mach_continuous_time();
      v141 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SUPL SIMNo,%u,SLPAddress,%s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v140), "GNM", 73, "Gnm31_00PrintUsrCfg", v133, v138);
      LbsOsaTrace_WriteLog(0xBu, __str, v141, 4, 1);
    }
    v132 = 0;
    v133 = 2;
    v131 = 1;
  }
  while ((v134 & 1) != 0);
  if ((LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0) & 1) != 0)
  {
    bzero(__str, 0x410uLL);
    v142 = mach_continuous_time();
    v143 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SUPL UT2Timer,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v142), "GNM", 73, "Gnm31_00PrintUsrCfg", dword_253FFDAF6);
    LbsOsaTrace_WriteLog(0xBu, __str, v143, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v144 = mach_continuous_time();
    v145 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SUPL UT3Timer,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v144), "GNM", 73, "Gnm31_00PrintUsrCfg", BYTE1(dword_253FFDAF6));
    LbsOsaTrace_WriteLog(0xBu, __str, v145, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v146 = mach_continuous_time();
    v147 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SUPL SessinTO,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v146), "GNM", 73, "Gnm31_00PrintUsrCfg", HIWORD(dword_253FFDAF6));
    LbsOsaTrace_WriteLog(0xBu, __str, v147, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v148 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v149 = 89;
    if ((dword_253FFDAFC & 1) == 0)
      v149 = 78;
    v150 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:CP SemiAutoPos,%c\n", (unint64_t)v148, "GNM", 73, "Gnm31_00PrintUsrCfg", v149);
    LbsOsaTrace_WriteLog(0xBu, __str, v150, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v151 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v152 = 89;
    if (!(_BYTE)dword_253FFD8B0)
      v152 = 78;
    v153 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:SimulatedMode,%c\n", (unint64_t)v151, "GNM", 68, "Gnm31_00PrintUsrCfg", v152);
    LbsOsaTrace_WriteLog(0xBu, __str, v153, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v154 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v155 = 89;
    if (!BYTE1(dword_253FFD8B0))
      v155 = 78;
    v156 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:ExternalClock,%c\n", (unint64_t)v154, "GNM", 68, "Gnm31_00PrintUsrCfg", v155);
    LbsOsaTrace_WriteLog(0xBu, __str, v156, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v157 = mach_continuous_time();
    v158 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:EarliestGpsWkNo,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v157), "GNM", 73, "Gnm31_00PrintUsrCfg", HIWORD(dword_253FFD8B0));
    LbsOsaTrace_WriteLog(0xBu, __str, v158, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v159 = mach_continuous_time();
    v160 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:EarlyStartTO,%us\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v159), "GNM", 73, "Gnm31_00PrintUsrCfg", byte_253FFD8B6);
    LbsOsaTrace_WriteLog(0xBu, __str, v160, 4, 1);
  }
  result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
  if ((_DWORD)result)
  {
    bzero(__str, 0x410uLL);
    v162 = mach_continuous_time();
    v163 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: USRCFG:E911TargetVertAccM,%fm\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v162), "GNM", 73, "Gnm31_00PrintUsrCfg", *(double *)&qword_253FFD8B8);
    return LbsOsaTrace_WriteLog(0xBu, __str, v163, 4, 1);
  }
  return result;
}

uint64_t Gnm31_12UpdateUserCfg(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v4;
  unsigned __int16 v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int16 v9;
  __int16 v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  char *v22;
  __int16 v23;
  __int16 v24;
  char __str[1040];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_SET_USER_CONFIG\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm31_12UpdateUserCfg");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v4 = mach_continuous_time();
      v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Update received\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm31_03HandleUserCfg");
      LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
    }
    v6 = *(_DWORD *)(a1 + 12);
    if ((v6 & 1) != 0)
    {
      dword_253FFD8A4 = dword_253FFD8A4 & 0xFFFFFFFE | *(_DWORD *)(a1 + 28) & 1;
      if ((v6 & 2) == 0)
      {
LABEL_8:
        if ((v6 & 4) == 0)
          goto LABEL_9;
        goto LABEL_37;
      }
    }
    else if ((v6 & 2) == 0)
    {
      goto LABEL_8;
    }
    dword_253FFD8A4 = dword_253FFD8A4 & 0xFFFFFFFD | (2 * ((*(_DWORD *)(a1 + 28) >> 1) & 1));
    if ((v6 & 4) == 0)
    {
LABEL_9:
      if ((v6 & 8) == 0)
        goto LABEL_10;
      goto LABEL_38;
    }
LABEL_37:
    dword_253FFD8A4 = dword_253FFD8A4 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(a1 + 28) >> 2) & 1));
    if ((v6 & 8) == 0)
    {
LABEL_10:
      if ((v6 & 0x20) == 0)
        goto LABEL_11;
      goto LABEL_39;
    }
LABEL_38:
    dword_253FFD8A4 = dword_253FFD8A4 & 0xFFFFFFF7 | (8 * ((*(_DWORD *)(a1 + 28) >> 3) & 1));
    if ((v6 & 0x20) == 0)
    {
LABEL_11:
      if ((v6 & 0x40) == 0)
        goto LABEL_12;
      goto LABEL_40;
    }
LABEL_39:
    dword_253FFD8A4 = dword_253FFD8A4 & 0xFFFFFFDF | (32 * ((*(_DWORD *)(a1 + 28) >> 5) & 1));
    if ((v6 & 0x40) == 0)
    {
LABEL_12:
      if ((v6 & 0x80) == 0)
        goto LABEL_13;
      goto LABEL_41;
    }
LABEL_40:
    dword_253FFD8A4 = dword_253FFD8A4 & 0xFFFFFFBF | (((*(_DWORD *)(a1 + 28) >> 6) & 1) << 6);
    if ((v6 & 0x80) == 0)
    {
LABEL_13:
      if ((v6 & 0x100) == 0)
        goto LABEL_14;
      goto LABEL_42;
    }
LABEL_41:
    dword_253FFD8A4 = dword_253FFD8A4 & 0xFFFFFF7F | (((*(_DWORD *)(a1 + 28) >> 7) & 1) << 7);
    if ((v6 & 0x100) == 0)
    {
LABEL_14:
      if ((v6 & 0x800) == 0)
        goto LABEL_15;
      goto LABEL_43;
    }
LABEL_42:
    dword_253FFD8A4 = dword_253FFD8A4 & 0xFFFFFEFF | (((*(_DWORD *)(a1 + 28) >> 8) & 1) << 8);
    if ((v6 & 0x800) == 0)
    {
LABEL_15:
      if ((v6 & 0x8000) == 0)
        goto LABEL_16;
      goto LABEL_44;
    }
LABEL_43:
    dword_253FFD8A4 = dword_253FFD8A4 & 0xFFFFF7FF | (((*(_DWORD *)(a1 + 28) >> 11) & 1) << 11);
    if ((v6 & 0x8000) == 0)
    {
LABEL_16:
      if ((v6 & 0x10000) == 0)
        goto LABEL_17;
      goto LABEL_45;
    }
LABEL_44:
    dword_253FFD8A4 = dword_253FFD8A4 & 0xFFFF7FFF | (((*(_DWORD *)(a1 + 28) >> 15) & 1) << 15);
    if ((v6 & 0x10000) == 0)
    {
LABEL_17:
      if ((v6 & 0x20000) == 0)
        goto LABEL_18;
      goto LABEL_46;
    }
LABEL_45:
    dword_253FFD8A4 = dword_253FFD8A4 & 0xFFFEFFFF | ((HIWORD(*(_DWORD *)(a1 + 28)) & 1) << 16);
    if ((v6 & 0x20000) == 0)
    {
LABEL_18:
      if ((v6 & 0x1000) == 0)
        goto LABEL_19;
      goto LABEL_47;
    }
LABEL_46:
    dword_253FFD8A4 = dword_253FFD8A4 & 0xFFFDFFFF | (((*(_DWORD *)(a1 + 28) >> 17) & 1) << 17);
    if ((v6 & 0x1000) == 0)
    {
LABEL_19:
      if ((v6 & 0x40000) == 0)
        goto LABEL_21;
      goto LABEL_20;
    }
LABEL_47:
    dword_253FFD8A4 = dword_253FFD8A4 & 0xFFFFEFFF | (((*(_DWORD *)(a1 + 28) >> 12) & 1) << 12);
    if ((v6 & 0x40000) == 0)
    {
LABEL_21:
      v7 = *(_DWORD *)(a1 + 32);
      if ((v7 & 0x200) != 0)
      {
        LOBYTE(dword_253FFD8B0) = *(_BYTE *)(a1 + 40);
        v10 = dword_253FFD8B0;
        BYTE1(dword_253FFD8B0) = *(_BYTE *)(a1 + 41);
        if ((_BYTE)dword_253FFD8B0)
          v10 = *(_WORD *)(a1 + 42);
        HIWORD(dword_253FFD8B0) = v10;
        dword_253FFD8A8 |= 0x200u;
        if ((v6 & 0x4000) == 0)
        {
LABEL_23:
          if ((v7 & 1) == 0)
            goto LABEL_24;
          goto LABEL_53;
        }
      }
      else if ((v6 & 0x4000) == 0)
      {
        goto LABEL_23;
      }
      dword_253FFD8A4 = dword_253FFD8A4 & 0xFFFFBFFF | (((*(_DWORD *)(a1 + 28) >> 14) & 1) << 14);
      if ((v7 & 1) == 0)
      {
LABEL_24:
        if ((v7 & 2) == 0)
          goto LABEL_25;
        goto LABEL_54;
      }
LABEL_53:
      dword_253FFD8A8 |= 1u;
      LOBYTE(dword_253FFD8AC) = *(_BYTE *)(a1 + 36);
      if ((v7 & 2) == 0)
      {
LABEL_25:
        if ((v7 & 4) == 0)
          goto LABEL_26;
        goto LABEL_55;
      }
LABEL_54:
      dword_253FFD8A8 |= 2u;
      BYTE2(dword_253FFD8AC) = *(_BYTE *)(a1 + 38);
      if ((v7 & 4) == 0)
      {
LABEL_26:
        if ((v7 & 8) == 0)
          goto LABEL_27;
        goto LABEL_56;
      }
LABEL_55:
      dword_253FFD8A8 |= 4u;
      BYTE1(dword_253FFD8AC) = *(_BYTE *)(a1 + 37);
      if ((v7 & 8) == 0)
      {
LABEL_27:
        if ((v7 & 0x400) == 0)
          goto LABEL_28;
        goto LABEL_59;
      }
LABEL_56:
      dword_253FFD8A8 |= 8u;
      v11 = *(unsigned __int8 *)(a1 + 39);
      if (v11 > 7)
        LOBYTE(v11) = 0;
      HIBYTE(dword_253FFD8AC) = v11;
      if ((v7 & 0x400) == 0)
      {
LABEL_28:
        if ((v7 & 0x1000) == 0)
          goto LABEL_29;
        goto LABEL_60;
      }
LABEL_59:
      dword_253FFD8A8 |= 0x400u;
      byte_253FFD8B6 = *(_BYTE *)(a1 + 46);
      if ((v7 & 0x1000) == 0)
      {
LABEL_29:
        if ((v7 & 0x800) == 0)
          goto LABEL_30;
        goto LABEL_61;
      }
LABEL_60:
      dword_253FFD8A8 |= 0x1000u;
      qword_253FFD8B8 = *(_QWORD *)(a1 + 48);
      if ((v7 & 0x800) == 0)
      {
LABEL_30:
        if ((v7 & 0x10) == 0)
          goto LABEL_31;
        goto LABEL_62;
      }
LABEL_61:
      dword_253FFD8A8 |= 0x800u;
      word_253FFD8B4 = *(_WORD *)(a1 + 44);
      if ((v7 & 0x10) == 0)
      {
LABEL_31:
        if ((v7 & 0x20) == 0)
          goto LABEL_98;
LABEL_63:
        dword_253FFD8A8 |= 0x20u;
        v12 = *(_DWORD *)(a1 + 640);
        if ((v12 & 1) != 0)
        {
          dword_253FFD8E0 = dword_253FFD8E0 & 0xFFFFFFFE | *(_DWORD *)(a1 + 88) & 1;
          if ((v12 & 2) == 0)
          {
LABEL_65:
            if ((v12 & 4) == 0)
              goto LABEL_66;
            goto LABEL_85;
          }
        }
        else if ((v12 & 2) == 0)
        {
          goto LABEL_65;
        }
        dword_253FFD8E0 = dword_253FFD8E0 & 0xFFFFFFFD | (2 * ((*(_DWORD *)(a1 + 88) >> 1) & 1));
        if ((v12 & 4) == 0)
        {
LABEL_66:
          if ((v12 & 8) == 0)
            goto LABEL_67;
          goto LABEL_86;
        }
LABEL_85:
        dword_253FFD8E0 = dword_253FFD8E0 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(a1 + 88) >> 2) & 1));
        if ((v12 & 8) == 0)
        {
LABEL_67:
          if ((v12 & 0x10) == 0)
            goto LABEL_68;
          goto LABEL_87;
        }
LABEL_86:
        dword_253FFD8E0 = dword_253FFD8E0 & 0xFFFFFFF7 | (8 * ((*(_DWORD *)(a1 + 88) >> 3) & 1));
        if ((v12 & 0x10) == 0)
        {
LABEL_68:
          if ((v12 & 0x20) == 0)
            goto LABEL_70;
          goto LABEL_69;
        }
LABEL_87:
        dword_253FFD8E0 = dword_253FFD8E0 & 0xFFFFFFEF | (16 * ((*(_DWORD *)(a1 + 88) >> 4) & 1));
        if ((v12 & 0x20) == 0)
        {
LABEL_70:
          v13 = *(_DWORD *)(a1 + 92);
          if ((v13 & 1) != 0)
          {
            dword_253FFD8E4 |= 1u;
            byte_253FFD8E8 = *(_BYTE *)(a1 + 96);
          }
          if ((v12 & 0x40) != 0)
            dword_253FFD8E0 = dword_253FFD8E0 & 0xFFFFFFBF | (((*(_DWORD *)(a1 + 88) >> 6) & 1) << 6);
          if (byte_253FFD8E8 == 1 && (dword_253FFD8E0 & 0x40) != 0)
          {
            if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v14 = mach_continuous_time();
              v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DisableMSA,true,PrefPosMeth,eMSA\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 87, "Gnm31_03HandleUserCfg", 770);
              LbsOsaTrace_WriteLog(0xBu, __str, v15, 2, 1);
            }
            byte_253FFD8E8 = 2;
            v13 = *(_DWORD *)(a1 + 92);
          }
          if ((v13 & 0x40) != 0)
          {
            dword_253FFD8E4 |= 0x40u;
            LOWORD(dword_253FFDAF6) = *(_WORD *)(a1 + 622);
            if ((v13 & 0x100) == 0)
            {
LABEL_81:
              if ((v13 & 4) == 0)
              {
LABEL_98:
                v24 = dword_253FFD8A8;
                if ((*(_BYTE *)(a1 + 32) & 0x40) != 0)
                {
                  v24 = dword_253FFD8A8 | 0x40;
                  dword_253FFD8A8 |= 0x40u;
                  if ((*(_BYTE *)(a1 + 644) & 1) != 0)
                    dword_253FFDAFC = dword_253FFDAFC & 0xFFFFFFFE | *(_DWORD *)(a1 + 628) & 1;
                }
                if ((v24 & 0x800) != 0)
                {
                  Gnm53_15InitLtlRefTime(604800 * (unsigned __int16)word_253FFD8B4);
                  v24 = dword_253FFD8A8;
                }
                if ((v24 & 0x200) != 0 && BYTE1(dword_253FFD8B0))
                  Gnm53_58SetLtlExtHWClk();
                Gnm31_05SendUserCfgGnc();
                Gnm31_06SendUserCfgLsim();
                Gnm31_00PrintUsrCfg("UPDATED");
                return 0;
              }
LABEL_91:
              v16 = 0;
              dword_253FFD8E4 |= 4u;
              v17 = 1;
              do
              {
                v18 = v17;
                v19 = a1 + 262 * v16;
                if (*(_BYTE *)(v19 + 355))
                {
                  v20 = a1 + 262 * v16;
                  v21 = *(unsigned __int8 *)(v20 + 356);
                  if (*(_BYTE *)(v20 + 356))
                  {
                    v22 = (char *)&g_UsrConfig + 262 * v16;
                    v22[339] = *(_BYTE *)(v19 + 355);
                    v22[340] = v21;
                    v22[82] = *(_BYTE *)(v19 + 98);
                    memcpy_s("Gnm31_03HandleUserCfg", 442, v22 + 83, 0x100u, (const void *)(a1 + 262 * v16 + 99), v21);
                    v22[v22[340] + 83] = 0;
                  }
                }
                v17 = 0;
                v23 = *(_WORD *)(a1 + 262 * v16 + 358);
                if (!v23)
                  v23 = 7275;
                *((_WORD *)&g_UsrConfig + 131 * v16 + 171) = v23;
                v16 = 1;
              }
              while ((v18 & 1) != 0);
              goto LABEL_98;
            }
          }
          else if ((v13 & 0x100) == 0)
          {
            goto LABEL_81;
          }
          dword_253FFD8E4 |= 0x100u;
          HIWORD(dword_253FFDAF6) = *(_WORD *)(a1 + 624);
          if ((v13 & 4) == 0)
            goto LABEL_98;
          goto LABEL_91;
        }
LABEL_69:
        dword_253FFD8E0 = dword_253FFD8E0 & 0xFFFFFFDF | (32 * ((*(_DWORD *)(a1 + 88) >> 5) & 1));
        goto LABEL_70;
      }
LABEL_62:
      dword_253FFD8A8 |= 0x10u;
      xmmword_253FFD8C0 = *(_OWORD *)(a1 + 56);
      *(__int128 *)((char *)&xmmword_253FFD8C0 + 14) = *(_OWORD *)(a1 + 70);
      if ((*(_DWORD *)(a1 + 32) & 0x20) == 0)
        goto LABEL_98;
      goto LABEL_63;
    }
LABEL_20:
    dword_253FFD8A4 = dword_253FFD8A4 & 0xFFFBFFFF | (((*(_DWORD *)(a1 + 28) >> 18) & 1) << 18);
    goto LABEL_21;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v8 = mach_continuous_time();
    v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 69, "Gnm31_12UpdateUserCfg", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v9, 0, 1);
  }
  return 0;
}

uint64_t Gnm31_14GetUserCfg(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, _DWORD *))
{
  char v4;
  uint8x8_t v5;
  int16x8_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  char *v11;
  char v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  char __str[801];
  _DWORD __s[2];
  int v20;
  unsigned __int32 v21;
  _OWORD v22[2];
  int v23;
  int v24;
  int v25;
  char v26;
  int v27;
  int v28;
  int v29;
  int v30;
  __int16 v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  memset_s(__s, 0x270uLL, 0, 0x270uLL);
  v4 = dword_253FFD8A8;
  __s[0] = -1;
  __s[1] = dword_253FFD8A4;
  v20 = dword_253FFD8A8;
  v5.i32[0] = dword_253FFD8AC;
  v6 = (int16x8_t)vmovl_u8(v5);
  *(int16x4_t *)v6.i8 = vuzp1_s16(*(int16x4_t *)v6.i8, vrev32_s16(*(int16x4_t *)v6.i8));
  v21 = vmovn_s16(v6).u32[0];
  v32 = byte_253FFD8B6;
  v33 = qword_253FFD8B8;
  v31 = word_253FFD8B4;
  v30 = dword_253FFD8B0;
  if ((dword_253FFD8A8 & 0x10) != 0)
  {
    v22[0] = xmmword_253FFD8C0;
    *(_OWORD *)((char *)v22 + 14) = *(__int128 *)((char *)&xmmword_253FFD8C0 + 14);
  }
  if ((dword_253FFD8A8 & 0x20) != 0)
  {
    v24 = dword_253FFD8E0;
    v23 = -1;
    v25 = dword_253FFD8E4;
    v26 = byte_253FFD8E8;
    v27 = dword_253FFDAF6;
    if ((dword_253FFD8E4 & 4) != 0)
    {
      v7 = 0;
      v8 = 1;
      do
      {
        v9 = v8;
        v10 = 262 * v7;
        v11 = (char *)&g_UsrConfig + v10;
        v12 = *((_BYTE *)&g_UsrConfig + v10 + 82);
        v13 = (char *)__s + v10;
        v13[62] = v12;
        v14 = v11[340];
        v13[320] = v14;
        v13[319] = v11[339];
        *((_WORD *)v13 + 161) = *((_WORD *)v11 + 171);
        strncpy_s(v13 + 63, 0x100u, v11 + 83, v14);
        v8 = 0;
        v7 = 1;
      }
      while ((v9 & 1) != 0);
      v4 = v20;
    }
  }
  if ((v4 & 0x40) != 0)
  {
    v28 = -1;
    v29 = dword_253FFDAFC;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v15 = mach_continuous_time();
    v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GetCfgCB returned UserCfg\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNM", 73, "Gnm31_14GetUserCfg");
    LbsOsaTrace_WriteLog(0xBu, __str, v16, 4, 1);
  }
  return a2(a1, 1, __s);
}

uint64_t gnssTest::ZxHandler::Ga23_00GetZxBufAsStr(uint64_t a1, _QWORD *a2, std::string *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v21;
  std::string __p;
  _QWORD v24[2];
  uint64_t v25;
  _QWORD v26[8];
  std::string v27;
  _QWORD v28[21];

  v28[19] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v5 = MEMORY[0x24BEDB858];
  v6 = MEMORY[0x24BEDB858] + 104;
  v28[0] = MEMORY[0x24BEDB858] + 104;
  v7 = MEMORY[0x24BEDB858] + 64;
  v8 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  v25 = MEMORY[0x24BEDB858] + 64;
  v24[0] = v9;
  *(_QWORD *)((char *)v24 + *(_QWORD *)(v9 - 24)) = v10;
  v24[1] = 0;
  v11 = (std::ios_base *)((char *)v24 + *(_QWORD *)(v24[0] - 24));
  std::ios_base::init(v11, v26);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v12 = v8[5];
  v25 = v8[4];
  *(_QWORD *)((char *)&v26[-1] + *(_QWORD *)(v25 - 24)) = v12;
  v24[0] = v8[1];
  *(_QWORD *)((char *)v24 + *(_QWORD *)(v24[0] - 24)) = v8[6];
  v28[0] = v6;
  v24[0] = v5 + 24;
  v25 = v7;
  std::stringbuf::basic_stringbuf[abi:ne180100]((uint64_t)v26, &__p, 24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (a2[1] != *a2)
  {
    v13 = 1;
    do
    {
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"0x", 2);
      __p.__r_.__value_.__s.__data_[0] = 48;
      v15 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, (char *)&__p);
      v16 = *v15;
      *(uint64_t *)((char *)v15 + *(_QWORD *)(*v15 - 24) + 24) = 2;
      *(_DWORD *)((char *)v15 + *(_QWORD *)(v16 - 24) + 8) = *(_DWORD *)((_BYTE *)v15 + *(_QWORD *)(v16 - 24) + 8) & 0xFFFFFFB5 | 8;
      v17 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", ", 2);
      std::stringbuf::str();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::string::append(a3, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      memset(&__p, 0, sizeof(__p));
      std::string::operator=(&v27, &__p);
      std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v26);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    while (a2[1] - *a2 > (unint64_t)v13++);
  }
  v24[0] = *MEMORY[0x24BEDB7F0];
  v21 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v24 + *(_QWORD *)(v24[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v25 = v21;
  v26[0] = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2207AFD84](v28);
}

void sub_21E5737BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::iostream::~basic_iostream();
  MEMORY[0x2207AFD84](a10);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_01GetZxTestType(uint64_t a1, unsigned __int8 **a2, char *a3)
{
  unsigned __int8 *v4;
  int v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unsigned __int16 v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  int v17;
  char __str[1040];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = (*a2)[8];
  if (v5 != 32 && v5 != 83)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Test status\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 69, "Ga23_01GetZxTestType", 776);
      LbsOsaTrace_WriteLog(0x18u, __str, v10, 0, 1);
    }
    v7 = 0;
    v8 = -1;
    goto LABEL_11;
  }
  v6 = v4[2];
  if (v6 == 84)
  {
    v11 = v4[3];
    if (v11 == 71)
    {
      if (v4[4] == 77)
      {
        v7 = 0;
        v8 = 21;
        goto LABEL_11;
      }
    }
    else if (v11 == 76)
    {
      v12 = v4[4];
      if (v12 == 77 || v12 == 32)
      {
        v7 = 0;
        v8 = 22;
        goto LABEL_11;
      }
    }
    else if (v11 == 80 && v4[4] == 77)
    {
      v7 = 0;
      v8 = v4[9];
      goto LABEL_11;
    }
  }
  else if (v6 == 88 && v4[3] == 86 && v4[4] == 77)
  {
    v7 = 0;
    v8 = 5;
LABEL_11:
    *a3 = v8;
    return v7;
  }
  *(_DWORD *)a3 = 1024;
  v13 = *a2;
  if ((*a2)[8] == 32)
  {
    if (v13[2] == 84)
    {
      HIDWORD(v14) = v13[3];
      LODWORD(v14) = (HIDWORD(v14) << 24) - 1107296256;
      v7 = 3;
      switch((v14 >> 25))
      {
        case 0u:
          if (v13[4] == 32)
          {
            *a3 = 0;
            goto LABEL_37;
          }
          break;
        case 2u:
          if (v13[4] == 32)
          {
            *a3 = 3;
            goto LABEL_37;
          }
          break;
        case 3u:
          if (v13[4] == 32)
          {
            v7 = 2;
            *a3 = 2;
          }
          break;
        case 4u:
          v17 = v13[4];
          if (v17 == 80 || v17 == 77)
          {
            *a3 = 1;
LABEL_37:
            v7 = 2;
          }
          break;
        case 7u:
          if (v13[4] == 80)
          {
            *(_DWORD *)a3 = v13[9];
            return 1;
          }
          break;
        default:
          return v7;
      }
    }
    else
    {
      return 3;
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v15 = mach_continuous_time();
    v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Test status\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 69, "Ga23_01GetZxTestType", 257);
    v7 = 1;
    LbsOsaTrace_WriteLog(0x18u, __str, v16, 0, 1);
  }
  else
  {
    return 1;
  }
  return v7;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_03BuildZxCpRomCSProdMsg(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;
  unsigned __int16 v4;
  unint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  _BYTE *v15;
  char v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  unint64_t v24;
  char *v25;
  _BYTE *v26;
  char v27;
  unint64_t v28;
  _BYTE *v29;
  unint64_t v30;
  _BYTE *v31;
  unint64_t v32;
  unint64_t v33;
  size_t v34;
  unint64_t v35;
  char *v36;
  _BYTE *v37;
  char v38;
  unint64_t v39;
  _BYTE *v40;
  unint64_t v41;
  _BYTE *v42;
  unint64_t v43;
  unint64_t v44;
  size_t v45;
  unint64_t v46;
  char *v47;
  _BYTE *v48;
  char v49;
  unint64_t v50;
  _BYTE *v51;
  unint64_t v52;
  _BYTE *v53;
  unint64_t v54;
  unint64_t v55;
  size_t v56;
  unint64_t v57;
  char *v58;
  _BYTE *v59;
  char v60;
  unint64_t v61;
  _BYTE *v62;
  unint64_t v63;
  _BYTE *v64;
  unint64_t v65;
  unint64_t v66;
  size_t v67;
  unint64_t v68;
  char *v69;
  _BYTE *v70;
  char v71;
  unint64_t v72;
  _BYTE *v73;
  unint64_t v74;
  _BYTE *v75;
  unint64_t v76;
  unint64_t v77;
  size_t v78;
  unint64_t v79;
  char *v80;
  _BYTE *v81;
  char v82;
  unint64_t v83;
  _BYTE *v84;
  unint64_t v85;
  _BYTE *v86;
  unint64_t v87;
  unint64_t v88;
  size_t v89;
  unint64_t v90;
  char *v91;
  _BYTE *v92;
  char v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _BYTE *v97;
  unint64_t v98;
  unint64_t v99;
  size_t v100;
  unint64_t v101;
  char *v102;
  _BYTE *v103;
  char v104;
  unint64_t v105;
  uint64_t v106;
  unsigned __int16 v107;
  uint64_t result;
  uint64_t v109;
  unsigned __int16 v110;
  __int16 v111;
  uint64_t v112;
  int v113;
  uint8x8_t v114;
  unint64_t v115;
  _BYTE *v116;
  _BYTE *v117;
  unint64_t v118;
  _BYTE *v119;
  unint64_t v120;
  unint64_t v121;
  size_t v122;
  unint64_t v123;
  char *v124;
  _BYTE *v125;
  char v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  _BYTE *v130;
  unint64_t v131;
  unint64_t v132;
  size_t v133;
  unint64_t v134;
  char *v135;
  _BYTE *v136;
  char v137;
  unint64_t v138;
  uint64_t v139;
  unsigned __int16 v140;
  char v141;
  unint64_t v142;
  _BYTE *v143;
  uint64_t v144;
  uint64_t v145;
  unsigned __int16 v146;
  uint64_t v147;
  unsigned __int16 v148;
  unint64_t v149;
  _BYTE *v150;
  unint64_t v151;
  unint64_t v152;
  size_t v153;
  unint64_t v154;
  char *v155;
  _BYTE *v156;
  char v157;
  uint64_t v158;
  unsigned __int16 v159;
  void *__p;
  _BYTE *v161;
  uint64_t v162;
  char __str[1040];
  uint64_t v164;

  v164 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v3 = mach_continuous_time();
    v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga23_03BuildZxCpRomCSProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  v6 = (_BYTE *)a2[1];
  v5 = a2[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *a2;
    v9 = &v6[-*a2];
    v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v11 = v5 - v8;
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (unint64_t)operator new(v12);
    else
      v13 = 0;
    v14 = (char *)(v13 + v12);
    v9[v13] = 122;
    v7 = &v9[v13 + 1];
    if (v6 == (_BYTE *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      v15 = &v6[~v8];
      do
      {
        v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (_BYTE *)v8);
      v6 = (_BYTE *)*a2;
    }
    *a2 = v13;
    a2[1] = (unint64_t)v7;
    a2[2] = (unint64_t)v14;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = 122;
    v7 = v6 + 1;
  }
  a2[1] = (unint64_t)v7;
  v17 = a2[2];
  if ((unint64_t)v7 < v17)
  {
    *v7 = 120;
    v18 = v7 + 1;
    goto LABEL_39;
  }
  v19 = *a2;
  v20 = &v7[-*a2];
  v21 = (unint64_t)(v20 + 1);
  if ((uint64_t)(v20 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v22 = v17 - v19;
  if (2 * v22 > v21)
    v21 = 2 * v22;
  if (v22 >= 0x3FFFFFFFFFFFFFFFLL)
    v23 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v23 = v21;
  if (v23)
    v24 = (unint64_t)operator new(v23);
  else
    v24 = 0;
  v25 = (char *)(v24 + v23);
  v20[v24] = 120;
  v18 = &v20[v24 + 1];
  if (v7 == (_BYTE *)v19)
  {
    *a2 = (unint64_t)&v20[v24];
    a2[1] = (unint64_t)v18;
    a2[2] = (unint64_t)v25;
LABEL_38:
    operator delete(v7);
    goto LABEL_39;
  }
  v26 = &v7[~v19];
  do
  {
    v27 = *--v7;
    (v26--)[v24] = v27;
  }
  while (v7 != (_BYTE *)v19);
  v7 = (_BYTE *)*a2;
  *a2 = v24;
  a2[1] = (unint64_t)v18;
  a2[2] = (unint64_t)v25;
  if (v7)
    goto LABEL_38;
LABEL_39:
  a2[1] = (unint64_t)v18;
  v28 = a2[2];
  if ((unint64_t)v18 < v28)
  {
    *v18 = 84;
    v29 = v18 + 1;
    goto LABEL_57;
  }
  v30 = *a2;
  v31 = &v18[-*a2];
  v32 = (unint64_t)(v31 + 1);
  if ((uint64_t)(v31 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v33 = v28 - v30;
  if (2 * v33 > v32)
    v32 = 2 * v33;
  if (v33 >= 0x3FFFFFFFFFFFFFFFLL)
    v34 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v34 = v32;
  if (v34)
    v35 = (unint64_t)operator new(v34);
  else
    v35 = 0;
  v36 = (char *)(v35 + v34);
  v31[v35] = 84;
  v29 = &v31[v35 + 1];
  if (v18 == (_BYTE *)v30)
  {
    *a2 = (unint64_t)&v31[v35];
    a2[1] = (unint64_t)v29;
    a2[2] = (unint64_t)v36;
LABEL_56:
    operator delete(v18);
    goto LABEL_57;
  }
  v37 = &v18[~v30];
  do
  {
    v38 = *--v18;
    (v37--)[v35] = v38;
  }
  while (v18 != (_BYTE *)v30);
  v18 = (_BYTE *)*a2;
  *a2 = v35;
  a2[1] = (unint64_t)v29;
  a2[2] = (unint64_t)v36;
  if (v18)
    goto LABEL_56;
LABEL_57:
  a2[1] = (unint64_t)v29;
  v39 = a2[2];
  if ((unint64_t)v29 < v39)
  {
    *v29 = 112;
    v40 = v29 + 1;
    goto LABEL_75;
  }
  v41 = *a2;
  v42 = &v29[-*a2];
  v43 = (unint64_t)(v42 + 1);
  if ((uint64_t)(v42 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v44 = v39 - v41;
  if (2 * v44 > v43)
    v43 = 2 * v44;
  if (v44 >= 0x3FFFFFFFFFFFFFFFLL)
    v45 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v45 = v43;
  if (v45)
    v46 = (unint64_t)operator new(v45);
  else
    v46 = 0;
  v47 = (char *)(v46 + v45);
  v42[v46] = 112;
  v40 = &v42[v46 + 1];
  if (v29 == (_BYTE *)v41)
  {
    *a2 = (unint64_t)&v42[v46];
    a2[1] = (unint64_t)v40;
    a2[2] = (unint64_t)v47;
LABEL_74:
    operator delete(v29);
    goto LABEL_75;
  }
  v48 = &v29[~v41];
  do
  {
    v49 = *--v29;
    (v48--)[v46] = v49;
  }
  while (v29 != (_BYTE *)v41);
  v29 = (_BYTE *)*a2;
  *a2 = v46;
  a2[1] = (unint64_t)v40;
  a2[2] = (unint64_t)v47;
  if (v29)
    goto LABEL_74;
LABEL_75:
  a2[1] = (unint64_t)v40;
  v50 = a2[2];
  if ((unint64_t)v40 < v50)
  {
    *v40 = 80;
    v51 = v40 + 1;
    goto LABEL_93;
  }
  v52 = *a2;
  v53 = &v40[-*a2];
  v54 = (unint64_t)(v53 + 1);
  if ((uint64_t)(v53 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v55 = v50 - v52;
  if (2 * v55 > v54)
    v54 = 2 * v55;
  if (v55 >= 0x3FFFFFFFFFFFFFFFLL)
    v56 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v56 = v54;
  if (v56)
    v57 = (unint64_t)operator new(v56);
  else
    v57 = 0;
  v58 = (char *)(v57 + v56);
  v53[v57] = 80;
  v51 = &v53[v57 + 1];
  if (v40 == (_BYTE *)v52)
  {
    *a2 = (unint64_t)&v53[v57];
    a2[1] = (unint64_t)v51;
    a2[2] = (unint64_t)v58;
LABEL_92:
    operator delete(v40);
    goto LABEL_93;
  }
  v59 = &v40[~v52];
  do
  {
    v60 = *--v40;
    (v59--)[v57] = v60;
  }
  while (v40 != (_BYTE *)v52);
  v40 = (_BYTE *)*a2;
  *a2 = v57;
  a2[1] = (unint64_t)v51;
  a2[2] = (unint64_t)v58;
  if (v40)
    goto LABEL_92;
LABEL_93:
  a2[1] = (unint64_t)v51;
  v61 = a2[2];
  if ((unint64_t)v51 < v61)
  {
    *v51 = 0;
    v62 = v51 + 1;
    goto LABEL_111;
  }
  v63 = *a2;
  v64 = &v51[-*a2];
  v65 = (unint64_t)(v64 + 1);
  if ((uint64_t)(v64 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v66 = v61 - v63;
  if (2 * v66 > v65)
    v65 = 2 * v66;
  if (v66 >= 0x3FFFFFFFFFFFFFFFLL)
    v67 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v67 = v65;
  if (v67)
    v68 = (unint64_t)operator new(v67);
  else
    v68 = 0;
  v69 = (char *)(v68 + v67);
  v64[v68] = 0;
  v62 = &v64[v68 + 1];
  if (v51 == (_BYTE *)v63)
  {
    *a2 = (unint64_t)&v64[v68];
    a2[1] = (unint64_t)v62;
    a2[2] = (unint64_t)v69;
LABEL_110:
    operator delete(v51);
    goto LABEL_111;
  }
  v70 = &v51[~v63];
  do
  {
    v71 = *--v51;
    (v70--)[v68] = v71;
  }
  while (v51 != (_BYTE *)v63);
  v51 = (_BYTE *)*a2;
  *a2 = v68;
  a2[1] = (unint64_t)v62;
  a2[2] = (unint64_t)v69;
  if (v51)
    goto LABEL_110;
LABEL_111:
  a2[1] = (unint64_t)v62;
  v72 = a2[2];
  if ((unint64_t)v62 < v72)
  {
    *v62 = 0;
    v73 = v62 + 1;
    goto LABEL_129;
  }
  v74 = *a2;
  v75 = &v62[-*a2];
  v76 = (unint64_t)(v75 + 1);
  if ((uint64_t)(v75 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v77 = v72 - v74;
  if (2 * v77 > v76)
    v76 = 2 * v77;
  if (v77 >= 0x3FFFFFFFFFFFFFFFLL)
    v78 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v78 = v76;
  if (v78)
    v79 = (unint64_t)operator new(v78);
  else
    v79 = 0;
  v80 = (char *)(v79 + v78);
  v75[v79] = 0;
  v73 = &v75[v79 + 1];
  if (v62 == (_BYTE *)v74)
  {
    *a2 = (unint64_t)&v75[v79];
    a2[1] = (unint64_t)v73;
    a2[2] = (unint64_t)v80;
LABEL_128:
    operator delete(v62);
    goto LABEL_129;
  }
  v81 = &v62[~v74];
  do
  {
    v82 = *--v62;
    (v81--)[v79] = v82;
  }
  while (v62 != (_BYTE *)v74);
  v62 = (_BYTE *)*a2;
  *a2 = v79;
  a2[1] = (unint64_t)v73;
  a2[2] = (unint64_t)v80;
  if (v62)
    goto LABEL_128;
LABEL_129:
  a2[1] = (unint64_t)v73;
  v83 = a2[2];
  if ((unint64_t)v73 < v83)
  {
    *v73 = 0;
    v84 = v73 + 1;
    goto LABEL_147;
  }
  v85 = *a2;
  v86 = &v73[-*a2];
  v87 = (unint64_t)(v86 + 1);
  if ((uint64_t)(v86 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v88 = v83 - v85;
  if (2 * v88 > v87)
    v87 = 2 * v88;
  if (v88 >= 0x3FFFFFFFFFFFFFFFLL)
    v89 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v89 = v87;
  if (v89)
    v90 = (unint64_t)operator new(v89);
  else
    v90 = 0;
  v91 = (char *)(v90 + v89);
  v86[v90] = 0;
  v84 = &v86[v90 + 1];
  if (v73 == (_BYTE *)v85)
  {
    *a2 = (unint64_t)&v86[v90];
    a2[1] = (unint64_t)v84;
    a2[2] = (unint64_t)v91;
LABEL_146:
    operator delete(v73);
    goto LABEL_147;
  }
  v92 = &v73[~v85];
  do
  {
    v93 = *--v73;
    (v92--)[v90] = v93;
  }
  while (v73 != (_BYTE *)v85);
  v73 = (_BYTE *)*a2;
  *a2 = v90;
  a2[1] = (unint64_t)v84;
  a2[2] = (unint64_t)v91;
  if (v73)
    goto LABEL_146;
LABEL_147:
  a2[1] = (unint64_t)v84;
  v94 = a2[2];
  if ((unint64_t)v84 < v94)
  {
    *v84 = 2;
    v95 = (uint64_t)(v84 + 1);
    goto LABEL_165;
  }
  v96 = *a2;
  v97 = &v84[-*a2];
  v98 = (unint64_t)(v97 + 1);
  if ((uint64_t)(v97 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v99 = v94 - v96;
  if (2 * v99 > v98)
    v98 = 2 * v99;
  if (v99 >= 0x3FFFFFFFFFFFFFFFLL)
    v100 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v100 = v98;
  if (v100)
    v101 = (unint64_t)operator new(v100);
  else
    v101 = 0;
  v102 = (char *)(v101 + v100);
  v97[v101] = 2;
  v95 = (uint64_t)&v97[v101 + 1];
  if (v84 == (_BYTE *)v96)
  {
    *a2 = (unint64_t)&v97[v101];
    a2[1] = v95;
    a2[2] = (unint64_t)v102;
LABEL_164:
    operator delete(v84);
    goto LABEL_165;
  }
  v103 = &v84[~v96];
  do
  {
    v104 = *--v84;
    (v103--)[v101] = v104;
  }
  while (v84 != (_BYTE *)v96);
  v84 = (_BYTE *)*a2;
  *a2 = v101;
  a2[1] = v95;
  a2[2] = (unint64_t)v102;
  if (v84)
    goto LABEL_164;
LABEL_165:
  a2[1] = v95;
  v161 = 0;
  v162 = 0;
  __p = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (const void *)*a2, v95, v95 - *a2);
  v105 = ~*a2 + a2[1];
  if (v105 < 8 || v105 > 0x7FF || v161 - (_BYTE *)__p <= v105)
  {
    if (__p)
    {
      v161 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v111 = 0;
    v112 = 8;
    v113 = 8;
    do
    {
      v111 += *((unsigned __int8 *)__p + v112);
      v112 = ++v113;
    }
    while (v105 >= v113);
    v161 = __p;
    operator delete(__p);
    if (v111 != -1)
    {
      v116 = (_BYTE *)a2[1];
      v115 = a2[2];
      if ((unint64_t)v116 >= v115)
      {
        v118 = *a2;
        v119 = &v116[-*a2];
        v120 = (unint64_t)(v119 + 1);
        if ((uint64_t)(v119 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v121 = v115 - v118;
        if (2 * v121 > v120)
          v120 = 2 * v121;
        if (v121 >= 0x3FFFFFFFFFFFFFFFLL)
          v122 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v122 = v120;
        if (v122)
          v123 = (unint64_t)operator new(v122);
        else
          v123 = 0;
        v124 = (char *)(v123 + v122);
        v119[v123] = v111;
        v117 = &v119[v123 + 1];
        if (v116 == (_BYTE *)v118)
        {
          v123 += (unint64_t)v119;
        }
        else
        {
          v125 = &v116[~v118];
          do
          {
            v126 = *--v116;
            (v125--)[v123] = v126;
          }
          while (v116 != (_BYTE *)v118);
          v116 = (_BYTE *)*a2;
        }
        *a2 = v123;
        a2[1] = (unint64_t)v117;
        a2[2] = (unint64_t)v124;
        if (v116)
          operator delete(v116);
      }
      else
      {
        *v116 = v111;
        v117 = v116 + 1;
      }
      a2[1] = (unint64_t)v117;
      v127 = a2[2];
      if ((unint64_t)v117 < v127)
      {
        *v117 = HIBYTE(v111);
        v128 = (uint64_t)(v117 + 1);
        goto LABEL_214;
      }
      v129 = *a2;
      v130 = &v117[-*a2];
      v131 = (unint64_t)(v130 + 1);
      if ((uint64_t)(v130 + 1) < 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v132 = v127 - v129;
      if (2 * v132 > v131)
        v131 = 2 * v132;
      if (v132 >= 0x3FFFFFFFFFFFFFFFLL)
        v133 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v133 = v131;
      if (v133)
        v134 = (unint64_t)operator new(v133);
      else
        v134 = 0;
      v135 = (char *)(v134 + v133);
      v130[v134] = HIBYTE(v111);
      v128 = (uint64_t)&v130[v134 + 1];
      if (v117 == (_BYTE *)v129)
      {
        *a2 = (unint64_t)&v130[v134];
        a2[1] = v128;
        a2[2] = (unint64_t)v135;
      }
      else
      {
        v136 = &v117[~v129];
        do
        {
          v137 = *--v117;
          (v136--)[v134] = v137;
        }
        while (v117 != (_BYTE *)v129);
        v117 = (_BYTE *)*a2;
        *a2 = v134;
        a2[1] = v128;
        a2[2] = (unint64_t)v135;
        if (!v117)
        {
LABEL_214:
          a2[1] = v128;
          v138 = v128 - *a2;
          if (v138 < 0x10000)
          {
            *(_WORD *)(*a2 + 5) = v138 - 8;
            v114.i32[0] = *(_DWORD *)(*a2 + 2);
            v141 = vaddv_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v114)) + *(_BYTE *)(*a2 + 6);
            if (v141)
            {
              *(_BYTE *)(*a2 + 7) = v141;
              v143 = (_BYTE *)a2[1];
              v142 = a2[2];
              if ((unint64_t)v143 >= v142)
              {
                v149 = *a2;
                v150 = &v143[-*a2];
                v151 = (unint64_t)(v150 + 1);
                if ((uint64_t)(v150 + 1) < 0)
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                v152 = v142 - v149;
                if (2 * v152 > v151)
                  v151 = 2 * v152;
                if (v152 >= 0x3FFFFFFFFFFFFFFFLL)
                  v153 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v153 = v151;
                if (v153)
                  v154 = (unint64_t)operator new(v153);
                else
                  v154 = 0;
                v155 = (char *)(v154 + v153);
                v150[v154] = 10;
                v144 = (uint64_t)&v150[v154 + 1];
                if (v143 == (_BYTE *)v149)
                {
                  v154 += (unint64_t)v150;
                }
                else
                {
                  v156 = &v143[~v149];
                  do
                  {
                    v157 = *--v143;
                    (v156--)[v154] = v157;
                  }
                  while (v143 != (_BYTE *)v149);
                  v143 = (_BYTE *)*a2;
                }
                *a2 = v154;
                a2[1] = v144;
                a2[2] = (unint64_t)v155;
                if (v143)
                  operator delete(v143);
              }
              else
              {
                *v143 = 10;
                v144 = (uint64_t)(v143 + 1);
              }
              a2[1] = v144;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v158 = mach_continuous_time();
                v159 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v158), "ADP", 68, "Ga23_03BuildZxCpRomCSProdMsg");
                LbsOsaTrace_WriteLog(0x18u, __str, v159, 5, 1);
              }
              return 1;
            }
            else
            {
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v145 = mach_continuous_time();
                v146 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CpRom\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v145), "ADP", 69, "Ga23_03BuildZxCpRomCSProdMsg", 781);
                LbsOsaTrace_WriteLog(0x18u, __str, v146, 0, 1);
              }
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v147 = mach_continuous_time();
                v148 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v147), "ADP", 68, "Ga23_03BuildZxCpRomCSProdMsg");
                LbsOsaTrace_WriteLog(0x18u, __str, v148, 5, 1);
              }
              result = 0;
              a2[1] = *a2;
            }
          }
          else
          {
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v139 = mach_continuous_time();
              v140 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CpRomRange\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v139), "ADP", 69, "Ga23_03BuildZxCpRomCSProdMsg", 772);
              LbsOsaTrace_WriteLog(0x18u, __str, v140, 0, 1);
            }
            result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
            if ((_DWORD)result)
              goto LABEL_171;
          }
          return result;
        }
      }
      operator delete(v117);
      goto LABEL_214;
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v106 = mach_continuous_time();
    v107 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CpRomCs\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v106), "ADP", 69, "Ga23_03BuildZxCpRomCSProdMsg", 781);
    LbsOsaTrace_WriteLog(0x18u, __str, v107, 0, 1);
  }
  result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if ((_DWORD)result)
  {
LABEL_171:
    bzero(__str, 0x410uLL);
    v109 = mach_continuous_time();
    v110 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v109), "ADP", 68, "Ga23_03BuildZxCpRomCSProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v110, 5, 1);
    return 0;
  }
  return result;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_04ParseZxCpRomCSProdMsg(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned __int16 v4;
  _BYTE *v5;
  unint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 v10;
  size_t v11;
  int v12;
  uint64_t v13;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  unsigned __int16 v18;
  unint64_t v19;
  unsigned __int8 __dst;
  char __str[1040];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v3 = mach_continuous_time();
    v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga23_04ParseZxCpRomCSProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if ((gnssTest::ZxHandler::Ga23_03IsCheckSumValid((uint64_t)a2) & 1) == 0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      goto LABEL_10;
    goto LABEL_8;
  }
  v5 = (_BYTE *)*a2;
  v6 = a2[1] - *a2;
  if (v6 <= 8)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      goto LABEL_10;
LABEL_8:
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CpRom\n");
LABEL_9:
    LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    goto LABEL_10;
  }
  if (v5[2] != 84 || v5[3] != 80 || v5[4] != 80)
  {
    v8 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v13 = mach_continuous_time();
      v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MsgType\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 69, "Ga23_04ParseZxCpRomCSProdMsg", 770);
      v12 = 0;
      goto LABEL_22;
    }
    return v8;
  }
  if (v5[8] != 32)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CpRom status\n");
      goto LABEL_9;
    }
    goto LABEL_10;
  }
  if (v6 <= 0xA)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CpRomCS\n");
      goto LABEL_9;
    }
LABEL_10:
    v8 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v9, "ADP", 68, "Ga23_04ParseZxCpRomCSProdMsg");
LABEL_12:
      v11 = v10;
      v12 = 5;
LABEL_22:
      LbsOsaTrace_WriteLog(0x18u, __str, v11, v12, 1);
      return 0;
    }
    return v8;
  }
  __dst = 0;
  memcpy_s("Ga23_04ParseZxCpRomCSProdMsg", 398, &__dst, 1u, v5 + 10, 1uLL);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v15 = mach_continuous_time();
    v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CpStatus,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 73, "Ga23_04ParseZxCpRomCSProdMsg", __dst);
    LbsOsaTrace_WriteLog(0x18u, __str, v16, 4, 1);
  }
  if (__dst != 112)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      return 0;
    bzero(__str, 0x410uLL);
    v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v19, "ADP", 68, "Ga23_04ParseZxCpRomCSProdMsg");
    goto LABEL_12;
  }
  if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    return 1;
  bzero(__str, 0x410uLL);
  v17 = mach_continuous_time();
  v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 68, "Ga23_04ParseZxCpRomCSProdMsg");
  v8 = 1;
  LbsOsaTrace_WriteLog(0x18u, __str, v18, 5, 1);
  return v8;
}

uint64_t gnssTest::ZxHandler::Ga23_03IsCheckSumValid(uint64_t a1)
{
  __int16 v2;
  uint64_t i;
  const void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  uint64_t v13;
  int v14;
  void *__p;
  _BYTE *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  char __str[1040];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v19 = 0;
  v20 = 0;
  v18 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v18, *(const void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8) - *(_QWORD *)a1);
  if ((unint64_t)(v19 - v18) >= 7)
  {
    v2 = 0;
    for (i = 2; i != 7; ++i)
      v2 += v18[i];
  }
  else
  {
    if (!v18)
    {
LABEL_17:
      result = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
      if (!(_DWORD)result)
        return result;
      bzero(__str, 0x410uLL);
      v10 = mach_continuous_time();
      v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Invalid CS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 69, "Ga23_03IsCheckSumValid", 784);
      LbsOsaTrace_WriteLog(0x18u, __str, v11, 0, 1);
      return 0;
    }
    v2 = -1;
  }
  v19 = v18;
  operator delete(v18);
  if (v2 == -1)
    goto LABEL_17;
  v4 = *(const void **)a1;
  if (*(unsigned __int8 *)(*(_QWORD *)a1 + 7) != v2)
    goto LABEL_17;
  __p = 0;
  v16 = 0;
  v17 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v4, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8) - (_QWORD)v4);
  v5 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1 - 4;
  if (v5 >= 8 && (v5 <= 0x7FF ? (v6 = v16 - (_BYTE *)__p > v5) : (v6 = 0), v6))
  {
    v12 = 0;
    v13 = 8;
    v14 = 8;
    do
    {
      v12 += *((unsigned __int8 *)__p + v13);
      v13 = ++v14;
    }
    while (v5 >= v14);
    v16 = __p;
    operator delete(__p);
    if (v12 != 0xFFFF && *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) - 3) == v12)
      return 1;
  }
  else if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  result = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
  if ((_DWORD)result)
  {
    bzero(__str, 0x410uLL);
    v8 = mach_continuous_time();
    v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CS Comp. err\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "Ga23_03IsCheckSumValid", 784);
    LbsOsaTrace_WriteLog(0x18u, __str, v9, 0, 1);
    return 0;
  }
  return result;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_05BuildZxMeRomCSProdMsg(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;
  unsigned __int16 v4;
  unint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  _BYTE *v15;
  char v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  unint64_t v24;
  char *v25;
  _BYTE *v26;
  char v27;
  unint64_t v28;
  _BYTE *v29;
  unint64_t v30;
  _BYTE *v31;
  unint64_t v32;
  unint64_t v33;
  size_t v34;
  unint64_t v35;
  char *v36;
  _BYTE *v37;
  char v38;
  unint64_t v39;
  _BYTE *v40;
  unint64_t v41;
  _BYTE *v42;
  unint64_t v43;
  unint64_t v44;
  size_t v45;
  unint64_t v46;
  char *v47;
  _BYTE *v48;
  char v49;
  unint64_t v50;
  _BYTE *v51;
  unint64_t v52;
  _BYTE *v53;
  unint64_t v54;
  unint64_t v55;
  size_t v56;
  unint64_t v57;
  char *v58;
  _BYTE *v59;
  char v60;
  unint64_t v61;
  _BYTE *v62;
  unint64_t v63;
  _BYTE *v64;
  unint64_t v65;
  unint64_t v66;
  size_t v67;
  unint64_t v68;
  char *v69;
  _BYTE *v70;
  char v71;
  unint64_t v72;
  _BYTE *v73;
  unint64_t v74;
  _BYTE *v75;
  unint64_t v76;
  unint64_t v77;
  size_t v78;
  unint64_t v79;
  char *v80;
  _BYTE *v81;
  char v82;
  unint64_t v83;
  _BYTE *v84;
  unint64_t v85;
  _BYTE *v86;
  unint64_t v87;
  unint64_t v88;
  size_t v89;
  unint64_t v90;
  char *v91;
  _BYTE *v92;
  char v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _BYTE *v97;
  unint64_t v98;
  unint64_t v99;
  size_t v100;
  unint64_t v101;
  char *v102;
  _BYTE *v103;
  char v104;
  unint64_t v105;
  uint64_t v106;
  unsigned __int16 v107;
  uint64_t result;
  uint64_t v109;
  unsigned __int16 v110;
  __int16 v111;
  uint64_t v112;
  int v113;
  uint8x8_t v114;
  unint64_t v115;
  _BYTE *v116;
  _BYTE *v117;
  unint64_t v118;
  _BYTE *v119;
  unint64_t v120;
  unint64_t v121;
  size_t v122;
  unint64_t v123;
  char *v124;
  _BYTE *v125;
  char v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  _BYTE *v130;
  unint64_t v131;
  unint64_t v132;
  size_t v133;
  unint64_t v134;
  char *v135;
  _BYTE *v136;
  char v137;
  _BYTE *v138;
  unint64_t v139;
  uint64_t v140;
  unsigned __int16 v141;
  __int16 v142;
  _BYTE *v143;
  char v144;
  unint64_t v145;
  _BYTE *v146;
  uint64_t v147;
  uint64_t v148;
  unsigned __int16 v149;
  unint64_t v150;
  _BYTE *v151;
  unint64_t v152;
  unint64_t v153;
  size_t v154;
  unint64_t v155;
  char *v156;
  _BYTE *v157;
  char v158;
  uint64_t v159;
  unsigned __int16 v160;
  void *__p;
  _BYTE *v162;
  uint64_t v163;
  char __str[1040];
  uint64_t v165;

  v165 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v3 = mach_continuous_time();
    v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga23_05BuildZxMeRomCSProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  v6 = (_BYTE *)a2[1];
  v5 = a2[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *a2;
    v9 = &v6[-*a2];
    v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v11 = v5 - v8;
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (unint64_t)operator new(v12);
    else
      v13 = 0;
    v14 = (char *)(v13 + v12);
    v9[v13] = 122;
    v7 = &v9[v13 + 1];
    if (v6 == (_BYTE *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      v15 = &v6[~v8];
      do
      {
        v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (_BYTE *)v8);
      v6 = (_BYTE *)*a2;
    }
    *a2 = v13;
    a2[1] = (unint64_t)v7;
    a2[2] = (unint64_t)v14;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = 122;
    v7 = v6 + 1;
  }
  a2[1] = (unint64_t)v7;
  v17 = a2[2];
  if ((unint64_t)v7 < v17)
  {
    *v7 = 120;
    v18 = v7 + 1;
    goto LABEL_39;
  }
  v19 = *a2;
  v20 = &v7[-*a2];
  v21 = (unint64_t)(v20 + 1);
  if ((uint64_t)(v20 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v22 = v17 - v19;
  if (2 * v22 > v21)
    v21 = 2 * v22;
  if (v22 >= 0x3FFFFFFFFFFFFFFFLL)
    v23 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v23 = v21;
  if (v23)
    v24 = (unint64_t)operator new(v23);
  else
    v24 = 0;
  v25 = (char *)(v24 + v23);
  v20[v24] = 120;
  v18 = &v20[v24 + 1];
  if (v7 == (_BYTE *)v19)
  {
    *a2 = (unint64_t)&v20[v24];
    a2[1] = (unint64_t)v18;
    a2[2] = (unint64_t)v25;
LABEL_38:
    operator delete(v7);
    goto LABEL_39;
  }
  v26 = &v7[~v19];
  do
  {
    v27 = *--v7;
    (v26--)[v24] = v27;
  }
  while (v7 != (_BYTE *)v19);
  v7 = (_BYTE *)*a2;
  *a2 = v24;
  a2[1] = (unint64_t)v18;
  a2[2] = (unint64_t)v25;
  if (v7)
    goto LABEL_38;
LABEL_39:
  a2[1] = (unint64_t)v18;
  v28 = a2[2];
  if ((unint64_t)v18 < v28)
  {
    *v18 = 84;
    v29 = v18 + 1;
    goto LABEL_57;
  }
  v30 = *a2;
  v31 = &v18[-*a2];
  v32 = (unint64_t)(v31 + 1);
  if ((uint64_t)(v31 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v33 = v28 - v30;
  if (2 * v33 > v32)
    v32 = 2 * v33;
  if (v33 >= 0x3FFFFFFFFFFFFFFFLL)
    v34 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v34 = v32;
  if (v34)
    v35 = (unint64_t)operator new(v34);
  else
    v35 = 0;
  v36 = (char *)(v35 + v34);
  v31[v35] = 84;
  v29 = &v31[v35 + 1];
  if (v18 == (_BYTE *)v30)
  {
    *a2 = (unint64_t)&v31[v35];
    a2[1] = (unint64_t)v29;
    a2[2] = (unint64_t)v36;
LABEL_56:
    operator delete(v18);
    goto LABEL_57;
  }
  v37 = &v18[~v30];
  do
  {
    v38 = *--v18;
    (v37--)[v35] = v38;
  }
  while (v18 != (_BYTE *)v30);
  v18 = (_BYTE *)*a2;
  *a2 = v35;
  a2[1] = (unint64_t)v29;
  a2[2] = (unint64_t)v36;
  if (v18)
    goto LABEL_56;
LABEL_57:
  a2[1] = (unint64_t)v29;
  v39 = a2[2];
  if ((unint64_t)v29 < v39)
  {
    *v29 = 112;
    v40 = v29 + 1;
    goto LABEL_75;
  }
  v41 = *a2;
  v42 = &v29[-*a2];
  v43 = (unint64_t)(v42 + 1);
  if ((uint64_t)(v42 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v44 = v39 - v41;
  if (2 * v44 > v43)
    v43 = 2 * v44;
  if (v44 >= 0x3FFFFFFFFFFFFFFFLL)
    v45 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v45 = v43;
  if (v45)
    v46 = (unint64_t)operator new(v45);
  else
    v46 = 0;
  v47 = (char *)(v46 + v45);
  v42[v46] = 112;
  v40 = &v42[v46 + 1];
  if (v29 == (_BYTE *)v41)
  {
    *a2 = (unint64_t)&v42[v46];
    a2[1] = (unint64_t)v40;
    a2[2] = (unint64_t)v47;
LABEL_74:
    operator delete(v29);
    goto LABEL_75;
  }
  v48 = &v29[~v41];
  do
  {
    v49 = *--v29;
    (v48--)[v46] = v49;
  }
  while (v29 != (_BYTE *)v41);
  v29 = (_BYTE *)*a2;
  *a2 = v46;
  a2[1] = (unint64_t)v40;
  a2[2] = (unint64_t)v47;
  if (v29)
    goto LABEL_74;
LABEL_75:
  a2[1] = (unint64_t)v40;
  v50 = a2[2];
  if ((unint64_t)v40 < v50)
  {
    *v40 = 77;
    v51 = v40 + 1;
    goto LABEL_93;
  }
  v52 = *a2;
  v53 = &v40[-*a2];
  v54 = (unint64_t)(v53 + 1);
  if ((uint64_t)(v53 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v55 = v50 - v52;
  if (2 * v55 > v54)
    v54 = 2 * v55;
  if (v55 >= 0x3FFFFFFFFFFFFFFFLL)
    v56 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v56 = v54;
  if (v56)
    v57 = (unint64_t)operator new(v56);
  else
    v57 = 0;
  v58 = (char *)(v57 + v56);
  v53[v57] = 77;
  v51 = &v53[v57 + 1];
  if (v40 == (_BYTE *)v52)
  {
    *a2 = (unint64_t)&v53[v57];
    a2[1] = (unint64_t)v51;
    a2[2] = (unint64_t)v58;
LABEL_92:
    operator delete(v40);
    goto LABEL_93;
  }
  v59 = &v40[~v52];
  do
  {
    v60 = *--v40;
    (v59--)[v57] = v60;
  }
  while (v40 != (_BYTE *)v52);
  v40 = (_BYTE *)*a2;
  *a2 = v57;
  a2[1] = (unint64_t)v51;
  a2[2] = (unint64_t)v58;
  if (v40)
    goto LABEL_92;
LABEL_93:
  a2[1] = (unint64_t)v51;
  v61 = a2[2];
  if ((unint64_t)v51 < v61)
  {
    *v51 = 0;
    v62 = v51 + 1;
    goto LABEL_111;
  }
  v63 = *a2;
  v64 = &v51[-*a2];
  v65 = (unint64_t)(v64 + 1);
  if ((uint64_t)(v64 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v66 = v61 - v63;
  if (2 * v66 > v65)
    v65 = 2 * v66;
  if (v66 >= 0x3FFFFFFFFFFFFFFFLL)
    v67 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v67 = v65;
  if (v67)
    v68 = (unint64_t)operator new(v67);
  else
    v68 = 0;
  v69 = (char *)(v68 + v67);
  v64[v68] = 0;
  v62 = &v64[v68 + 1];
  if (v51 == (_BYTE *)v63)
  {
    *a2 = (unint64_t)&v64[v68];
    a2[1] = (unint64_t)v62;
    a2[2] = (unint64_t)v69;
LABEL_110:
    operator delete(v51);
    goto LABEL_111;
  }
  v70 = &v51[~v63];
  do
  {
    v71 = *--v51;
    (v70--)[v68] = v71;
  }
  while (v51 != (_BYTE *)v63);
  v51 = (_BYTE *)*a2;
  *a2 = v68;
  a2[1] = (unint64_t)v62;
  a2[2] = (unint64_t)v69;
  if (v51)
    goto LABEL_110;
LABEL_111:
  a2[1] = (unint64_t)v62;
  v72 = a2[2];
  if ((unint64_t)v62 < v72)
  {
    *v62 = 0;
    v73 = v62 + 1;
    goto LABEL_129;
  }
  v74 = *a2;
  v75 = &v62[-*a2];
  v76 = (unint64_t)(v75 + 1);
  if ((uint64_t)(v75 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v77 = v72 - v74;
  if (2 * v77 > v76)
    v76 = 2 * v77;
  if (v77 >= 0x3FFFFFFFFFFFFFFFLL)
    v78 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v78 = v76;
  if (v78)
    v79 = (unint64_t)operator new(v78);
  else
    v79 = 0;
  v80 = (char *)(v79 + v78);
  v75[v79] = 0;
  v73 = &v75[v79 + 1];
  if (v62 == (_BYTE *)v74)
  {
    *a2 = (unint64_t)&v75[v79];
    a2[1] = (unint64_t)v73;
    a2[2] = (unint64_t)v80;
LABEL_128:
    operator delete(v62);
    goto LABEL_129;
  }
  v81 = &v62[~v74];
  do
  {
    v82 = *--v62;
    (v81--)[v79] = v82;
  }
  while (v62 != (_BYTE *)v74);
  v62 = (_BYTE *)*a2;
  *a2 = v79;
  a2[1] = (unint64_t)v73;
  a2[2] = (unint64_t)v80;
  if (v62)
    goto LABEL_128;
LABEL_129:
  a2[1] = (unint64_t)v73;
  v83 = a2[2];
  if ((unint64_t)v73 < v83)
  {
    *v73 = 0;
    v84 = v73 + 1;
    goto LABEL_147;
  }
  v85 = *a2;
  v86 = &v73[-*a2];
  v87 = (unint64_t)(v86 + 1);
  if ((uint64_t)(v86 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v88 = v83 - v85;
  if (2 * v88 > v87)
    v87 = 2 * v88;
  if (v88 >= 0x3FFFFFFFFFFFFFFFLL)
    v89 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v89 = v87;
  if (v89)
    v90 = (unint64_t)operator new(v89);
  else
    v90 = 0;
  v91 = (char *)(v90 + v89);
  v86[v90] = 0;
  v84 = &v86[v90 + 1];
  if (v73 == (_BYTE *)v85)
  {
    *a2 = (unint64_t)&v86[v90];
    a2[1] = (unint64_t)v84;
    a2[2] = (unint64_t)v91;
LABEL_146:
    operator delete(v73);
    goto LABEL_147;
  }
  v92 = &v73[~v85];
  do
  {
    v93 = *--v73;
    (v92--)[v90] = v93;
  }
  while (v73 != (_BYTE *)v85);
  v73 = (_BYTE *)*a2;
  *a2 = v90;
  a2[1] = (unint64_t)v84;
  a2[2] = (unint64_t)v91;
  if (v73)
    goto LABEL_146;
LABEL_147:
  a2[1] = (unint64_t)v84;
  v94 = a2[2];
  if ((unint64_t)v84 < v94)
  {
    *v84 = 2;
    v95 = (uint64_t)(v84 + 1);
    goto LABEL_165;
  }
  v96 = *a2;
  v97 = &v84[-*a2];
  v98 = (unint64_t)(v97 + 1);
  if ((uint64_t)(v97 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v99 = v94 - v96;
  if (2 * v99 > v98)
    v98 = 2 * v99;
  if (v99 >= 0x3FFFFFFFFFFFFFFFLL)
    v100 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v100 = v98;
  if (v100)
    v101 = (unint64_t)operator new(v100);
  else
    v101 = 0;
  v102 = (char *)(v101 + v100);
  v97[v101] = 2;
  v95 = (uint64_t)&v97[v101 + 1];
  if (v84 == (_BYTE *)v96)
  {
    *a2 = (unint64_t)&v97[v101];
    a2[1] = v95;
    a2[2] = (unint64_t)v102;
LABEL_164:
    operator delete(v84);
    goto LABEL_165;
  }
  v103 = &v84[~v96];
  do
  {
    v104 = *--v84;
    (v103--)[v101] = v104;
  }
  while (v84 != (_BYTE *)v96);
  v84 = (_BYTE *)*a2;
  *a2 = v101;
  a2[1] = v95;
  a2[2] = (unint64_t)v102;
  if (v84)
    goto LABEL_164;
LABEL_165:
  a2[1] = v95;
  v162 = 0;
  v163 = 0;
  __p = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (const void *)*a2, v95, v95 - *a2);
  v105 = ~*a2 + a2[1];
  if (v105 < 8 || v105 > 0x7FF || v162 - (_BYTE *)__p <= v105)
  {
    if (__p)
    {
      v162 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v111 = 0;
    v112 = 8;
    v113 = 8;
    do
    {
      v111 += *((unsigned __int8 *)__p + v112);
      v112 = ++v113;
    }
    while (v105 >= v113);
    v162 = __p;
    operator delete(__p);
    if (v111 != -1)
    {
      v116 = (_BYTE *)a2[1];
      v115 = a2[2];
      if ((unint64_t)v116 >= v115)
      {
        v118 = *a2;
        v119 = &v116[-*a2];
        v120 = (unint64_t)(v119 + 1);
        if ((uint64_t)(v119 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v121 = v115 - v118;
        if (2 * v121 > v120)
          v120 = 2 * v121;
        if (v121 >= 0x3FFFFFFFFFFFFFFFLL)
          v122 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v122 = v120;
        if (v122)
          v123 = (unint64_t)operator new(v122);
        else
          v123 = 0;
        v124 = (char *)(v123 + v122);
        v119[v123] = v111;
        v117 = &v119[v123 + 1];
        if (v116 == (_BYTE *)v118)
        {
          v123 += (unint64_t)v119;
        }
        else
        {
          v125 = &v116[~v118];
          do
          {
            v126 = *--v116;
            (v125--)[v123] = v126;
          }
          while (v116 != (_BYTE *)v118);
          v116 = (_BYTE *)*a2;
        }
        *a2 = v123;
        a2[1] = (unint64_t)v117;
        a2[2] = (unint64_t)v124;
        if (v116)
          operator delete(v116);
      }
      else
      {
        *v116 = v111;
        v117 = v116 + 1;
      }
      a2[1] = (unint64_t)v117;
      v127 = a2[2];
      if ((unint64_t)v117 < v127)
      {
        *v117 = HIBYTE(v111);
        v128 = (uint64_t)(v117 + 1);
        goto LABEL_214;
      }
      v129 = *a2;
      v130 = &v117[-*a2];
      v131 = (unint64_t)(v130 + 1);
      if ((uint64_t)(v130 + 1) < 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v132 = v127 - v129;
      if (2 * v132 > v131)
        v131 = 2 * v132;
      if (v132 >= 0x3FFFFFFFFFFFFFFFLL)
        v133 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v133 = v131;
      if (v133)
        v134 = (unint64_t)operator new(v133);
      else
        v134 = 0;
      v135 = (char *)(v134 + v133);
      v130[v134] = HIBYTE(v111);
      v128 = (uint64_t)&v130[v134 + 1];
      if (v117 == (_BYTE *)v129)
      {
        *a2 = (unint64_t)&v130[v134];
        a2[1] = v128;
        a2[2] = (unint64_t)v135;
      }
      else
      {
        v136 = &v117[~v129];
        do
        {
          v137 = *--v117;
          (v136--)[v134] = v137;
        }
        while (v117 != (_BYTE *)v129);
        v117 = (_BYTE *)*a2;
        *a2 = v134;
        a2[1] = v128;
        a2[2] = (unint64_t)v135;
        if (!v117)
        {
LABEL_214:
          a2[1] = v128;
          v138 = (_BYTE *)*a2;
          v139 = v128 - *a2;
          if (v139 < 0x10000)
          {
            v142 = v139 - 8;
            v138[5] = v142;
            *(_BYTE *)(*a2 + 6) = HIBYTE(v142);
            v143 = (_BYTE *)*a2;
            v114.i32[0] = *(_DWORD *)(*a2 + 2);
            v144 = vaddv_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v114)) + *(_BYTE *)(*a2 + 6);
            if (v144)
            {
              v143[7] = v144;
              v146 = (_BYTE *)a2[1];
              v145 = a2[2];
              if ((unint64_t)v146 >= v145)
              {
                v150 = *a2;
                v151 = &v146[-*a2];
                v152 = (unint64_t)(v151 + 1);
                if ((uint64_t)(v151 + 1) < 0)
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                v153 = v145 - v150;
                if (2 * v153 > v152)
                  v152 = 2 * v153;
                if (v153 >= 0x3FFFFFFFFFFFFFFFLL)
                  v154 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v154 = v152;
                if (v154)
                  v155 = (unint64_t)operator new(v154);
                else
                  v155 = 0;
                v156 = (char *)(v155 + v154);
                v151[v155] = 10;
                v147 = (uint64_t)&v151[v155 + 1];
                if (v146 == (_BYTE *)v150)
                {
                  v155 += (unint64_t)v151;
                }
                else
                {
                  v157 = &v146[~v150];
                  do
                  {
                    v158 = *--v146;
                    (v157--)[v155] = v158;
                  }
                  while (v146 != (_BYTE *)v150);
                  v146 = (_BYTE *)*a2;
                }
                *a2 = v155;
                a2[1] = v147;
                a2[2] = (unint64_t)v156;
                if (v146)
                  operator delete(v146);
              }
              else
              {
                *v146 = 10;
                v147 = (uint64_t)(v146 + 1);
              }
              a2[1] = v147;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v159 = mach_continuous_time();
                v160 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v159), "ADP", 68, "Ga23_05BuildZxMeRomCSProdMsg");
                LbsOsaTrace_WriteLog(0x18u, __str, v160, 5, 1);
              }
              return 1;
            }
            else
            {
              a2[1] = (unint64_t)v143;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v148 = mach_continuous_time();
                v149 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MeRom\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v148), "ADP", 69, "Ga23_05BuildZxMeRomCSProdMsg", 781);
                LbsOsaTrace_WriteLog(0x18u, __str, v149, 0, 1);
              }
              result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
              if ((_DWORD)result)
                goto LABEL_171;
            }
          }
          else
          {
            a2[1] = (unint64_t)v138;
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v140 = mach_continuous_time();
              v141 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MeRomRange\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v140), "ADP", 69, "Ga23_05BuildZxMeRomCSProdMsg", 772);
              LbsOsaTrace_WriteLog(0x18u, __str, v141, 0, 1);
            }
            result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
            if ((_DWORD)result)
              goto LABEL_171;
          }
          return result;
        }
      }
      operator delete(v117);
      goto LABEL_214;
    }
  }
  a2[1] = *a2;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v106 = mach_continuous_time();
    v107 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MeRom\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v106), "ADP", 69, "Ga23_05BuildZxMeRomCSProdMsg", 784);
    LbsOsaTrace_WriteLog(0x18u, __str, v107, 0, 1);
  }
  result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if ((_DWORD)result)
  {
LABEL_171:
    bzero(__str, 0x410uLL);
    v109 = mach_continuous_time();
    v110 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v109), "ADP", 68, "Ga23_05BuildZxMeRomCSProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v110, 5, 1);
    return 0;
  }
  return result;
}

BOOL gnssTest::ZxFactoryHandler::Ga23_06ParseZxMeRomCSProdMsg(uint64_t a1, _QWORD *a2)
{
  _BYTE *v3;
  unint64_t v4;
  int v5;
  _BOOL8 result;
  int IsLoggingAllowed;
  uint64_t v8;
  size_t v9;
  int v10;
  int v11;
  int v12;
  unsigned __int16 v13;
  int v14;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  unsigned __int8 __dst[8];
  char __str[1040];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if ((gnssTest::ZxHandler::Ga23_03IsCheckSumValid((uint64_t)a2) & 1) == 0)
  {
    IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    result = 0;
    if (!IsLoggingAllowed)
      return result;
    goto LABEL_15;
  }
  v3 = (_BYTE *)*a2;
  v4 = a2[1] - *a2;
  if (v4 <= 8)
  {
    v5 = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    result = 0;
    if (!v5)
      return result;
LABEL_15:
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MeRom\n");
LABEL_16:
    LbsOsaTrace_WriteLog(0x18u, __str, v13, 0, 1);
    return 0;
  }
  if (v3[2] != 84 || v3[3] != 80 || v3[4] != 77)
  {
    v12 = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    result = 0;
    if (!v12)
      return result;
    goto LABEL_15;
  }
  if (v3[8] == 32)
  {
    if (v4 > 0x10)
    {
      *(_DWORD *)&__dst[3] = 0;
      *(_DWORD *)__dst = 0;
      memcpy_s("Ga23_06ParseZxMeRomCSProdMsg", 525, __dst, 7u, v3 + 10, 7uLL);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v15 = mach_continuous_time();
        v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MeStatus,%u,MeResp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 73, "Ga23_06ParseZxMeRomCSProdMsg", __dst[0], __dst[1]);
        LbsOsaTrace_WriteLog(0x18u, __str, v16, 4, 1);
      }
      v10 = 0;
      if (__dst[0] != 99 || __dst[1] == 112)
        return v10 == 0;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v17 = mach_continuous_time();
        v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: MeRom Resp Failed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 73, "Ga23_06ParseZxMeRomCSProdMsg");
        v10 = 1;
        v11 = 4;
        goto LABEL_26;
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v8 = mach_continuous_time();
      v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MeRom\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "Ga23_06ParseZxMeRomCSProdMsg", 770);
      v10 = 1;
      v11 = 0;
LABEL_26:
      LbsOsaTrace_WriteLog(0x18u, __str, v9, v11, 1);
      return v10 == 0;
    }
    v10 = 1;
    return v10 == 0;
  }
  v14 = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
  result = 0;
  if (v14)
  {
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MeRom status\n");
    goto LABEL_16;
  }
  return result;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_07BuildZxMeCwModProdMsg(uint64_t a1, unint64_t *a2, int a3, int a4, int a5, unsigned __int16 a6, double a7)
{
  uint64_t v14;
  unsigned __int16 v15;
  unint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  unint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  unint64_t v24;
  char *v25;
  _BYTE *v26;
  char v27;
  unint64_t v28;
  _BYTE *v29;
  unint64_t v30;
  _BYTE *v31;
  unint64_t v32;
  unint64_t v33;
  size_t v34;
  unint64_t v35;
  char *v36;
  _BYTE *v37;
  char v38;
  unint64_t v39;
  _BYTE *v40;
  unint64_t v41;
  _BYTE *v42;
  unint64_t v43;
  unint64_t v44;
  size_t v45;
  unint64_t v46;
  char *v47;
  _BYTE *v48;
  char v49;
  unint64_t v50;
  _BYTE *v51;
  unint64_t v52;
  _BYTE *v53;
  unint64_t v54;
  unint64_t v55;
  size_t v56;
  unint64_t v57;
  char *v58;
  _BYTE *v59;
  char v60;
  unint64_t v61;
  _BYTE *v62;
  unint64_t v63;
  _BYTE *v64;
  unint64_t v65;
  unint64_t v66;
  size_t v67;
  unint64_t v68;
  char *v69;
  _BYTE *v70;
  char v71;
  unint64_t v72;
  _BYTE *v73;
  unint64_t v74;
  _BYTE *v75;
  unint64_t v76;
  unint64_t v77;
  size_t v78;
  unint64_t v79;
  char *v80;
  _BYTE *v81;
  char v82;
  unint64_t v83;
  _BYTE *v84;
  unint64_t v85;
  _BYTE *v86;
  unint64_t v87;
  unint64_t v88;
  size_t v89;
  unint64_t v90;
  char *v91;
  _BYTE *v92;
  char v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _BYTE *v97;
  unint64_t v98;
  unint64_t v99;
  size_t v100;
  unint64_t v101;
  char *v102;
  _BYTE *v103;
  char v104;
  uint64_t v105;
  unsigned __int16 v106;
  char v107;
  int v108;
  unsigned __int8 v109;
  uint64_t v110;
  unsigned __int16 v111;
  uint64_t v112;
  unsigned __int16 v113;
  unsigned int v114;
  uint64_t v115;
  unsigned __int16 v116;
  uint64_t v117;
  unsigned __int16 v118;
  unint64_t v119;
  _BYTE *v120;
  _BYTE *v121;
  uint64_t result;
  uint64_t v123;
  unsigned __int16 v124;
  unint64_t v125;
  _BYTE *v126;
  unint64_t v127;
  unint64_t v128;
  size_t v129;
  unint64_t v130;
  char *v131;
  _BYTE *v132;
  char v133;
  unint64_t v134;
  _BYTE *v135;
  unint64_t v136;
  _BYTE *v137;
  unint64_t v138;
  unint64_t v139;
  size_t v140;
  unint64_t v141;
  char *v142;
  _BYTE *v143;
  char v144;
  unint64_t v145;
  _BYTE *v146;
  unint64_t v147;
  _BYTE *v148;
  unint64_t v149;
  unint64_t v150;
  size_t v151;
  unint64_t v152;
  char *v153;
  _BYTE *v154;
  char v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  _BYTE *v159;
  unint64_t v160;
  unint64_t v161;
  size_t v162;
  unint64_t v163;
  char *v164;
  _BYTE *v165;
  char v166;
  unint64_t v167;
  _BYTE *v168;
  _BYTE *v169;
  unint64_t v170;
  _BYTE *v171;
  unint64_t v172;
  unint64_t v173;
  size_t v174;
  unint64_t v175;
  char *v176;
  _BYTE *v177;
  char v178;
  unint64_t v179;
  _BYTE *v180;
  unint64_t v181;
  _BYTE *v182;
  unint64_t v183;
  unint64_t v184;
  size_t v185;
  unint64_t v186;
  char *v187;
  _BYTE *v188;
  char v189;
  unint64_t v190;
  _BYTE *v191;
  unint64_t v192;
  _BYTE *v193;
  unint64_t v194;
  unint64_t v195;
  size_t v196;
  unint64_t v197;
  char *v198;
  _BYTE *v199;
  char v200;
  unint64_t v201;
  _BYTE *v202;
  unint64_t v203;
  _BYTE *v204;
  unint64_t v205;
  unint64_t v206;
  size_t v207;
  unint64_t v208;
  char *v209;
  _BYTE *v210;
  char v211;
  unint64_t v212;
  _BYTE *v213;
  unint64_t v214;
  _BYTE *v215;
  unint64_t v216;
  unint64_t v217;
  size_t v218;
  unint64_t v219;
  char *v220;
  _BYTE *v221;
  char v222;
  unint64_t v223;
  _BYTE *v224;
  unint64_t v225;
  _BYTE *v226;
  unint64_t v227;
  unint64_t v228;
  size_t v229;
  unint64_t v230;
  char *v231;
  _BYTE *v232;
  char v233;
  unint64_t v234;
  _BYTE *v235;
  unint64_t v236;
  _BYTE *v237;
  unint64_t v238;
  unint64_t v239;
  size_t v240;
  unint64_t v241;
  char *v242;
  _BYTE *v243;
  char v244;
  unint64_t v245;
  _BYTE *v246;
  unint64_t v247;
  _BYTE *v248;
  unint64_t v249;
  unint64_t v250;
  size_t v251;
  unint64_t v252;
  char *v253;
  _BYTE *v254;
  char v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  _BYTE *v259;
  unint64_t v260;
  unint64_t v261;
  size_t v262;
  unint64_t v263;
  char *v264;
  _BYTE *v265;
  char v266;
  unint64_t v267;
  uint64_t v268;
  unsigned __int16 v269;
  uint64_t v270;
  unsigned __int16 v271;
  __int16 v272;
  uint64_t v273;
  int v274;
  uint8x8_t v275;
  unint64_t v276;
  _BYTE *v277;
  _BYTE *v278;
  unint64_t v279;
  _BYTE *v280;
  unint64_t v281;
  unint64_t v282;
  size_t v283;
  unint64_t v284;
  char *v285;
  _BYTE *v286;
  char v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  _BYTE *v291;
  unint64_t v292;
  unint64_t v293;
  size_t v294;
  unint64_t v295;
  char *v296;
  _BYTE *v297;
  char v298;
  _BYTE *v299;
  unint64_t v300;
  uint64_t v301;
  unsigned __int16 v302;
  __int16 v303;
  _BYTE *v304;
  char v305;
  unint64_t v306;
  _BYTE *v307;
  uint64_t v308;
  uint64_t v309;
  unsigned __int16 v310;
  unint64_t v311;
  _BYTE *v312;
  unint64_t v313;
  unint64_t v314;
  size_t v315;
  unint64_t v316;
  char *v317;
  _BYTE *v318;
  char v319;
  uint64_t v320;
  unsigned __int16 v321;
  void *__p;
  _BYTE *v323;
  uint64_t v324;
  char __str[1040];
  uint64_t v326;

  v326 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v14 = mach_continuous_time();
    v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 68, "Ga23_07BuildZxMeCwModProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v15, 5, 1);
  }
  v17 = (_BYTE *)a2[1];
  v16 = a2[2];
  if ((unint64_t)v17 >= v16)
  {
    v19 = *a2;
    v20 = &v17[-*a2];
    v21 = (unint64_t)(v20 + 1);
    if ((uint64_t)(v20 + 1) < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v22 = v16 - v19;
    if (2 * v22 > v21)
      v21 = 2 * v22;
    if (v22 >= 0x3FFFFFFFFFFFFFFFLL)
      v23 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
      v24 = (unint64_t)operator new(v23);
    else
      v24 = 0;
    v25 = (char *)(v24 + v23);
    v20[v24] = 122;
    v18 = &v20[v24 + 1];
    if (v17 == (_BYTE *)v19)
    {
      v24 += (unint64_t)v20;
    }
    else
    {
      v26 = &v17[~v19];
      do
      {
        v27 = *--v17;
        (v26--)[v24] = v27;
      }
      while (v17 != (_BYTE *)v19);
      v17 = (_BYTE *)*a2;
    }
    *a2 = v24;
    a2[1] = (unint64_t)v18;
    a2[2] = (unint64_t)v25;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v17 = 122;
    v18 = v17 + 1;
  }
  a2[1] = (unint64_t)v18;
  v28 = a2[2];
  if ((unint64_t)v18 < v28)
  {
    *v18 = 120;
    v29 = v18 + 1;
    goto LABEL_39;
  }
  v30 = *a2;
  v31 = &v18[-*a2];
  v32 = (unint64_t)(v31 + 1);
  if ((uint64_t)(v31 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v33 = v28 - v30;
  if (2 * v33 > v32)
    v32 = 2 * v33;
  if (v33 >= 0x3FFFFFFFFFFFFFFFLL)
    v34 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v34 = v32;
  if (v34)
    v35 = (unint64_t)operator new(v34);
  else
    v35 = 0;
  v36 = (char *)(v35 + v34);
  v31[v35] = 120;
  v29 = &v31[v35 + 1];
  if (v18 == (_BYTE *)v30)
  {
    *a2 = (unint64_t)&v31[v35];
    a2[1] = (unint64_t)v29;
    a2[2] = (unint64_t)v36;
LABEL_38:
    operator delete(v18);
    goto LABEL_39;
  }
  v37 = &v18[~v30];
  do
  {
    v38 = *--v18;
    (v37--)[v35] = v38;
  }
  while (v18 != (_BYTE *)v30);
  v18 = (_BYTE *)*a2;
  *a2 = v35;
  a2[1] = (unint64_t)v29;
  a2[2] = (unint64_t)v36;
  if (v18)
    goto LABEL_38;
LABEL_39:
  a2[1] = (unint64_t)v29;
  v39 = a2[2];
  if ((unint64_t)v29 < v39)
  {
    *v29 = 84;
    v40 = v29 + 1;
    goto LABEL_57;
  }
  v41 = *a2;
  v42 = &v29[-*a2];
  v43 = (unint64_t)(v42 + 1);
  if ((uint64_t)(v42 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v44 = v39 - v41;
  if (2 * v44 > v43)
    v43 = 2 * v44;
  if (v44 >= 0x3FFFFFFFFFFFFFFFLL)
    v45 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v45 = v43;
  if (v45)
    v46 = (unint64_t)operator new(v45);
  else
    v46 = 0;
  v47 = (char *)(v46 + v45);
  v42[v46] = 84;
  v40 = &v42[v46 + 1];
  if (v29 == (_BYTE *)v41)
  {
    *a2 = (unint64_t)&v42[v46];
    a2[1] = (unint64_t)v40;
    a2[2] = (unint64_t)v47;
LABEL_56:
    operator delete(v29);
    goto LABEL_57;
  }
  v48 = &v29[~v41];
  do
  {
    v49 = *--v29;
    (v48--)[v46] = v49;
  }
  while (v29 != (_BYTE *)v41);
  v29 = (_BYTE *)*a2;
  *a2 = v46;
  a2[1] = (unint64_t)v40;
  a2[2] = (unint64_t)v47;
  if (v29)
    goto LABEL_56;
LABEL_57:
  a2[1] = (unint64_t)v40;
  v50 = a2[2];
  if ((unint64_t)v40 < v50)
  {
    *v40 = 112;
    v51 = v40 + 1;
    goto LABEL_75;
  }
  v52 = *a2;
  v53 = &v40[-*a2];
  v54 = (unint64_t)(v53 + 1);
  if ((uint64_t)(v53 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v55 = v50 - v52;
  if (2 * v55 > v54)
    v54 = 2 * v55;
  if (v55 >= 0x3FFFFFFFFFFFFFFFLL)
    v56 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v56 = v54;
  if (v56)
    v57 = (unint64_t)operator new(v56);
  else
    v57 = 0;
  v58 = (char *)(v57 + v56);
  v53[v57] = 112;
  v51 = &v53[v57 + 1];
  if (v40 == (_BYTE *)v52)
  {
    *a2 = (unint64_t)&v53[v57];
    a2[1] = (unint64_t)v51;
    a2[2] = (unint64_t)v58;
LABEL_74:
    operator delete(v40);
    goto LABEL_75;
  }
  v59 = &v40[~v52];
  do
  {
    v60 = *--v40;
    (v59--)[v57] = v60;
  }
  while (v40 != (_BYTE *)v52);
  v40 = (_BYTE *)*a2;
  *a2 = v57;
  a2[1] = (unint64_t)v51;
  a2[2] = (unint64_t)v58;
  if (v40)
    goto LABEL_74;
LABEL_75:
  a2[1] = (unint64_t)v51;
  v61 = a2[2];
  if ((unint64_t)v51 < v61)
  {
    *v51 = 77;
    v62 = v51 + 1;
    goto LABEL_93;
  }
  v63 = *a2;
  v64 = &v51[-*a2];
  v65 = (unint64_t)(v64 + 1);
  if ((uint64_t)(v64 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v66 = v61 - v63;
  if (2 * v66 > v65)
    v65 = 2 * v66;
  if (v66 >= 0x3FFFFFFFFFFFFFFFLL)
    v67 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v67 = v65;
  if (v67)
    v68 = (unint64_t)operator new(v67);
  else
    v68 = 0;
  v69 = (char *)(v68 + v67);
  v64[v68] = 77;
  v62 = &v64[v68 + 1];
  if (v51 == (_BYTE *)v63)
  {
    *a2 = (unint64_t)&v64[v68];
    a2[1] = (unint64_t)v62;
    a2[2] = (unint64_t)v69;
LABEL_92:
    operator delete(v51);
    goto LABEL_93;
  }
  v70 = &v51[~v63];
  do
  {
    v71 = *--v51;
    (v70--)[v68] = v71;
  }
  while (v51 != (_BYTE *)v63);
  v51 = (_BYTE *)*a2;
  *a2 = v68;
  a2[1] = (unint64_t)v62;
  a2[2] = (unint64_t)v69;
  if (v51)
    goto LABEL_92;
LABEL_93:
  a2[1] = (unint64_t)v62;
  v72 = a2[2];
  if ((unint64_t)v62 < v72)
  {
    *v62 = 0;
    v73 = v62 + 1;
    goto LABEL_111;
  }
  v74 = *a2;
  v75 = &v62[-*a2];
  v76 = (unint64_t)(v75 + 1);
  if ((uint64_t)(v75 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v77 = v72 - v74;
  if (2 * v77 > v76)
    v76 = 2 * v77;
  if (v77 >= 0x3FFFFFFFFFFFFFFFLL)
    v78 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v78 = v76;
  if (v78)
    v79 = (unint64_t)operator new(v78);
  else
    v79 = 0;
  v80 = (char *)(v79 + v78);
  v75[v79] = 0;
  v73 = &v75[v79 + 1];
  if (v62 == (_BYTE *)v74)
  {
    *a2 = (unint64_t)&v75[v79];
    a2[1] = (unint64_t)v73;
    a2[2] = (unint64_t)v80;
LABEL_110:
    operator delete(v62);
    goto LABEL_111;
  }
  v81 = &v62[~v74];
  do
  {
    v82 = *--v62;
    (v81--)[v79] = v82;
  }
  while (v62 != (_BYTE *)v74);
  v62 = (_BYTE *)*a2;
  *a2 = v79;
  a2[1] = (unint64_t)v73;
  a2[2] = (unint64_t)v80;
  if (v62)
    goto LABEL_110;
LABEL_111:
  a2[1] = (unint64_t)v73;
  v83 = a2[2];
  if ((unint64_t)v73 < v83)
  {
    *v73 = 0;
    v84 = v73 + 1;
    goto LABEL_129;
  }
  v85 = *a2;
  v86 = &v73[-*a2];
  v87 = (unint64_t)(v86 + 1);
  if ((uint64_t)(v86 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v88 = v83 - v85;
  if (2 * v88 > v87)
    v87 = 2 * v88;
  if (v88 >= 0x3FFFFFFFFFFFFFFFLL)
    v89 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v89 = v87;
  if (v89)
    v90 = (unint64_t)operator new(v89);
  else
    v90 = 0;
  v91 = (char *)(v90 + v89);
  v86[v90] = 0;
  v84 = &v86[v90 + 1];
  if (v73 == (_BYTE *)v85)
  {
    *a2 = (unint64_t)&v86[v90];
    a2[1] = (unint64_t)v84;
    a2[2] = (unint64_t)v91;
LABEL_128:
    operator delete(v73);
    goto LABEL_129;
  }
  v92 = &v73[~v85];
  do
  {
    v93 = *--v73;
    (v92--)[v90] = v93;
  }
  while (v73 != (_BYTE *)v85);
  v73 = (_BYTE *)*a2;
  *a2 = v90;
  a2[1] = (unint64_t)v84;
  a2[2] = (unint64_t)v91;
  if (v73)
    goto LABEL_128;
LABEL_129:
  a2[1] = (unint64_t)v84;
  v94 = a2[2];
  if ((unint64_t)v84 < v94)
  {
    *v84 = 0;
    v95 = (uint64_t)(v84 + 1);
    goto LABEL_147;
  }
  v96 = *a2;
  v97 = &v84[-*a2];
  v98 = (unint64_t)(v97 + 1);
  if ((uint64_t)(v97 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v99 = v94 - v96;
  if (2 * v99 > v98)
    v98 = 2 * v99;
  if (v99 >= 0x3FFFFFFFFFFFFFFFLL)
    v100 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v100 = v98;
  if (v100)
    v101 = (unint64_t)operator new(v100);
  else
    v101 = 0;
  v102 = (char *)(v101 + v100);
  v97[v101] = 0;
  v95 = (uint64_t)&v97[v101 + 1];
  if (v84 == (_BYTE *)v96)
  {
    *a2 = (unint64_t)&v97[v101];
    a2[1] = v95;
    a2[2] = (unint64_t)v102;
LABEL_146:
    operator delete(v84);
    goto LABEL_147;
  }
  v103 = &v84[~v96];
  do
  {
    v104 = *--v84;
    (v103--)[v101] = v104;
  }
  while (v84 != (_BYTE *)v96);
  v84 = (_BYTE *)*a2;
  *a2 = v101;
  a2[1] = v95;
  a2[2] = (unint64_t)v102;
  if (v84)
    goto LABEL_146;
LABEL_147:
  a2[1] = v95;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v105 = mach_continuous_time();
    v106 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v105), "ADP", 68, "Ga23_09MapFramCwModParamToCoreParams");
    LbsOsaTrace_WriteLog(0x18u, __str, v106, 5, 1);
  }
  v107 = 0;
  switch(a3)
  {
    case 0:
      goto LABEL_155;
    case 1:
    case 2:
    case 3:
      a3 = 0;
      v107 = 1;
      if (!a5)
        goto LABEL_175;
      goto LABEL_156;
    case 4:
      *(_DWORD *)(a1 + 4) = a4;
      LOBYTE(a3) = 3;
      if (a5)
        v109 = a4 + 8;
      else
        v109 = 0;
      if (a5)
        v108 = 0;
      else
        v108 = a4 + 8;
      v107 = 1;
      goto LABEL_176;
    case 5:
    case 7:
      v107 = 1;
      a3 = 5;
      if (!a5)
        goto LABEL_175;
      goto LABEL_156;
    case 8:
    case 9:
      v107 = 1;
      a3 = 4;
LABEL_155:
      if (a5)
        goto LABEL_156;
      goto LABEL_175;
    default:
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v112 = mach_continuous_time();
        v113 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Band,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v112), "ADP", 87, "Ga23_09MapFramCwModParamToCoreParams", 770, a3);
        LbsOsaTrace_WriteLog(0x18u, __str, v113, 2, 1);
      }
      a3 = 0;
      v107 = 0;
      if (a5)
      {
LABEL_156:
        if (a3 == 5)
        {
          v108 = 0;
          v109 = a4 ^ 0x80;
        }
        else if (a3 == 4)
        {
          v108 = 0;
          v109 = a4 + 64;
        }
        else if (a3)
        {
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            v110 = mach_continuous_time();
            v111 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Constel,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v110), "ADP", 69, "Ga23_09MapFramCwModParamToCoreParams", 770, a3);
            LbsOsaTrace_WriteLog(0x18u, __str, v111, 0, 1);
          }
          v109 = 0;
          v108 = 0;
          v107 = 0;
        }
        else
        {
          v108 = 0;
          v109 = a4;
        }
      }
      else
      {
LABEL_175:
        v109 = 0;
        v108 = 0;
      }
LABEL_176:
      v114 = vcvtpd_s64_f64(a7);
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v115 = mach_continuous_time();
        v116 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SvId,%u,TimeForTestMs,%u,Bw,%u,NumOfChannels,%u,Signalsource,%u,CenterDopplerFreq,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v115), "ADP", 68, "Ga23_09MapFramCwModParamToCoreParams", v109, a6, v114, 1, 0, v108);
        LbsOsaTrace_WriteLog(0x18u, __str, v116, 5, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v117 = mach_continuous_time();
        v118 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v117), "ADP", 68, "Ga23_09MapFramCwModParamToCoreParams");
        LbsOsaTrace_WriteLog(0x18u, __str, v118, 5, 1);
      }
      if ((v107 & 1) == 0)
      {
        a2[1] = *a2;
        result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if (!(_DWORD)result)
          return result;
        bzero(__str, 0x410uLL);
        v123 = mach_continuous_time();
        v124 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v123), "ADP", 68, "Ga23_07BuildZxMeCwModProdMsg");
        LbsOsaTrace_WriteLog(0x18u, __str, v124, 5, 1);
        return 0;
      }
      v120 = (_BYTE *)a2[1];
      v119 = a2[2];
      if ((unint64_t)v120 >= v119)
      {
        v125 = *a2;
        v126 = &v120[-*a2];
        v127 = (unint64_t)(v126 + 1);
        if ((uint64_t)(v126 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v128 = v119 - v125;
        if (2 * v128 > v127)
          v127 = 2 * v128;
        if (v128 >= 0x3FFFFFFFFFFFFFFFLL)
          v129 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v129 = v127;
        if (v129)
          v130 = (unint64_t)operator new(v129);
        else
          v130 = 0;
        v131 = (char *)(v130 + v129);
        v126[v130] = 1;
        v121 = &v126[v130 + 1];
        if (v120 == (_BYTE *)v125)
        {
          v130 += (unint64_t)v126;
        }
        else
        {
          v132 = &v120[~v125];
          do
          {
            v133 = *--v120;
            (v132--)[v130] = v133;
          }
          while (v120 != (_BYTE *)v125);
          v120 = (_BYTE *)*a2;
        }
        *a2 = v130;
        a2[1] = (unint64_t)v121;
        a2[2] = (unint64_t)v131;
        if (v120)
          operator delete(v120);
      }
      else
      {
        *v120 = 1;
        v121 = v120 + 1;
      }
      a2[1] = (unint64_t)v121;
      v134 = a2[2];
      if ((unint64_t)v121 < v134)
      {
        *v121 = a3;
        v135 = v121 + 1;
        goto LABEL_219;
      }
      v136 = *a2;
      v137 = &v121[-*a2];
      v138 = (unint64_t)(v137 + 1);
      if ((uint64_t)(v137 + 1) < 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v139 = v134 - v136;
      if (2 * v139 > v138)
        v138 = 2 * v139;
      if (v139 >= 0x3FFFFFFFFFFFFFFFLL)
        v140 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v140 = v138;
      if (v140)
        v141 = (unint64_t)operator new(v140);
      else
        v141 = 0;
      v142 = (char *)(v141 + v140);
      v137[v141] = a3;
      v135 = &v137[v141 + 1];
      if (v121 == (_BYTE *)v136)
      {
        *a2 = (unint64_t)&v137[v141];
        a2[1] = (unint64_t)v135;
        a2[2] = (unint64_t)v142;
LABEL_218:
        operator delete(v121);
        goto LABEL_219;
      }
      v143 = &v121[~v136];
      do
      {
        v144 = *--v121;
        (v143--)[v141] = v144;
      }
      while (v121 != (_BYTE *)v136);
      v121 = (_BYTE *)*a2;
      *a2 = v141;
      a2[1] = (unint64_t)v135;
      a2[2] = (unint64_t)v142;
      if (v121)
        goto LABEL_218;
LABEL_219:
      a2[1] = (unint64_t)v135;
      v145 = a2[2];
      if ((unint64_t)v135 < v145)
      {
        *v135 = 0;
        v146 = v135 + 1;
        goto LABEL_237;
      }
      v147 = *a2;
      v148 = &v135[-*a2];
      v149 = (unint64_t)(v148 + 1);
      if ((uint64_t)(v148 + 1) < 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v150 = v145 - v147;
      if (2 * v150 > v149)
        v149 = 2 * v150;
      if (v150 >= 0x3FFFFFFFFFFFFFFFLL)
        v151 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v151 = v149;
      if (v151)
        v152 = (unint64_t)operator new(v151);
      else
        v152 = 0;
      v153 = (char *)(v152 + v151);
      v148[v152] = 0;
      v146 = &v148[v152 + 1];
      if (v135 == (_BYTE *)v147)
      {
        *a2 = (unint64_t)&v148[v152];
        a2[1] = (unint64_t)v146;
        a2[2] = (unint64_t)v153;
LABEL_236:
        operator delete(v135);
        goto LABEL_237;
      }
      v154 = &v135[~v147];
      do
      {
        v155 = *--v135;
        (v154--)[v152] = v155;
      }
      while (v135 != (_BYTE *)v147);
      v135 = (_BYTE *)*a2;
      *a2 = v152;
      a2[1] = (unint64_t)v146;
      a2[2] = (unint64_t)v153;
      if (v135)
        goto LABEL_236;
LABEL_237:
      a2[1] = (unint64_t)v146;
      v156 = a2[2];
      if ((unint64_t)v146 < v156)
      {
        *v146 = 0;
        v157 = (uint64_t)(v146 + 1);
        goto LABEL_255;
      }
      v158 = *a2;
      v159 = &v146[-*a2];
      v160 = (unint64_t)(v159 + 1);
      if ((uint64_t)(v159 + 1) < 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v161 = v156 - v158;
      if (2 * v161 > v160)
        v160 = 2 * v161;
      if (v161 >= 0x3FFFFFFFFFFFFFFFLL)
        v162 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v162 = v160;
      if (v162)
        v163 = (unint64_t)operator new(v162);
      else
        v163 = 0;
      v164 = (char *)(v163 + v162);
      v159[v163] = 0;
      v157 = (uint64_t)&v159[v163 + 1];
      if (v146 == (_BYTE *)v158)
      {
        *a2 = (unint64_t)&v159[v163];
        a2[1] = v157;
        a2[2] = (unint64_t)v164;
LABEL_254:
        operator delete(v146);
        goto LABEL_255;
      }
      v165 = &v146[~v158];
      do
      {
        v166 = *--v146;
        (v165--)[v163] = v166;
      }
      while (v146 != (_BYTE *)v158);
      v146 = (_BYTE *)*a2;
      *a2 = v163;
      a2[1] = v157;
      a2[2] = (unint64_t)v164;
      if (v146)
        goto LABEL_254;
LABEL_255:
      a2[1] = v157;
      *(_WORD *)(*a2 + 10) = a6;
      v168 = (_BYTE *)a2[1];
      v167 = a2[2];
      if ((unint64_t)v168 >= v167)
      {
        v170 = *a2;
        v171 = &v168[-*a2];
        v172 = (unint64_t)(v171 + 1);
        if ((uint64_t)(v171 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v173 = v167 - v170;
        if (2 * v173 > v172)
          v172 = 2 * v173;
        if (v173 >= 0x3FFFFFFFFFFFFFFFLL)
          v174 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v174 = v172;
        if (v174)
          v175 = (unint64_t)operator new(v174);
        else
          v175 = 0;
        v176 = (char *)(v175 + v174);
        v171[v175] = v109;
        v169 = &v171[v175 + 1];
        if (v168 == (_BYTE *)v170)
        {
          v175 += (unint64_t)v171;
        }
        else
        {
          v177 = &v168[~v170];
          do
          {
            v178 = *--v168;
            (v177--)[v175] = v178;
          }
          while (v168 != (_BYTE *)v170);
          v168 = (_BYTE *)*a2;
        }
        *a2 = v175;
        a2[1] = (unint64_t)v169;
        a2[2] = (unint64_t)v176;
        if (v168)
          operator delete(v168);
      }
      else
      {
        *v168 = v109;
        v169 = v168 + 1;
      }
      a2[1] = (unint64_t)v169;
      v179 = a2[2];
      if ((unint64_t)v169 < v179)
      {
        *v169 = v108;
        v180 = v169 + 1;
        goto LABEL_291;
      }
      v181 = *a2;
      v182 = &v169[-*a2];
      v183 = (unint64_t)(v182 + 1);
      if ((uint64_t)(v182 + 1) < 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v184 = v179 - v181;
      if (2 * v184 > v183)
        v183 = 2 * v184;
      if (v184 >= 0x3FFFFFFFFFFFFFFFLL)
        v185 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v185 = v183;
      if (v185)
        v186 = (unint64_t)operator new(v185);
      else
        v186 = 0;
      v187 = (char *)(v186 + v185);
      v182[v186] = v108;
      v180 = &v182[v186 + 1];
      if (v169 == (_BYTE *)v181)
      {
        *a2 = (unint64_t)&v182[v186];
        a2[1] = (unint64_t)v180;
        a2[2] = (unint64_t)v187;
LABEL_290:
        operator delete(v169);
        goto LABEL_291;
      }
      v188 = &v169[~v181];
      do
      {
        v189 = *--v169;
        (v188--)[v186] = v189;
      }
      while (v169 != (_BYTE *)v181);
      v169 = (_BYTE *)*a2;
      *a2 = v186;
      a2[1] = (unint64_t)v180;
      a2[2] = (unint64_t)v187;
      if (v169)
        goto LABEL_290;
LABEL_291:
      a2[1] = (unint64_t)v180;
      v190 = a2[2];
      if ((unint64_t)v180 < v190)
      {
        *v180 = BYTE1(v108);
        v191 = v180 + 1;
        goto LABEL_309;
      }
      v192 = *a2;
      v193 = &v180[-*a2];
      v194 = (unint64_t)(v193 + 1);
      if ((uint64_t)(v193 + 1) < 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v195 = v190 - v192;
      if (2 * v195 > v194)
        v194 = 2 * v195;
      if (v195 >= 0x3FFFFFFFFFFFFFFFLL)
        v196 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v196 = v194;
      if (v196)
        v197 = (unint64_t)operator new(v196);
      else
        v197 = 0;
      v198 = (char *)(v197 + v196);
      v193[v197] = BYTE1(v108);
      v191 = &v193[v197 + 1];
      if (v180 == (_BYTE *)v192)
      {
        *a2 = (unint64_t)&v193[v197];
        a2[1] = (unint64_t)v191;
        a2[2] = (unint64_t)v198;
LABEL_308:
        operator delete(v180);
        goto LABEL_309;
      }
      v199 = &v180[~v192];
      do
      {
        v200 = *--v180;
        (v199--)[v197] = v200;
      }
      while (v180 != (_BYTE *)v192);
      v180 = (_BYTE *)*a2;
      *a2 = v197;
      a2[1] = (unint64_t)v191;
      a2[2] = (unint64_t)v198;
      if (v180)
        goto LABEL_308;
LABEL_309:
      a2[1] = (unint64_t)v191;
      v201 = a2[2];
      if ((unint64_t)v191 < v201)
      {
        *v191 = BYTE2(v108);
        v202 = v191 + 1;
        goto LABEL_327;
      }
      v203 = *a2;
      v204 = &v191[-*a2];
      v205 = (unint64_t)(v204 + 1);
      if ((uint64_t)(v204 + 1) < 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v206 = v201 - v203;
      if (2 * v206 > v205)
        v205 = 2 * v206;
      if (v206 >= 0x3FFFFFFFFFFFFFFFLL)
        v207 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v207 = v205;
      if (v207)
        v208 = (unint64_t)operator new(v207);
      else
        v208 = 0;
      v209 = (char *)(v208 + v207);
      v204[v208] = BYTE2(v108);
      v202 = &v204[v208 + 1];
      if (v191 == (_BYTE *)v203)
      {
        *a2 = (unint64_t)&v204[v208];
        a2[1] = (unint64_t)v202;
        a2[2] = (unint64_t)v209;
LABEL_326:
        operator delete(v191);
        goto LABEL_327;
      }
      v210 = &v191[~v203];
      do
      {
        v211 = *--v191;
        (v210--)[v208] = v211;
      }
      while (v191 != (_BYTE *)v203);
      v191 = (_BYTE *)*a2;
      *a2 = v208;
      a2[1] = (unint64_t)v202;
      a2[2] = (unint64_t)v209;
      if (v191)
        goto LABEL_326;
LABEL_327:
      a2[1] = (unint64_t)v202;
      v212 = a2[2];
      if ((unint64_t)v202 < v212)
      {
        *v202 = HIBYTE(v108);
        v213 = v202 + 1;
        goto LABEL_345;
      }
      v214 = *a2;
      v215 = &v202[-*a2];
      v216 = (unint64_t)(v215 + 1);
      if ((uint64_t)(v215 + 1) < 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v217 = v212 - v214;
      if (2 * v217 > v216)
        v216 = 2 * v217;
      if (v217 >= 0x3FFFFFFFFFFFFFFFLL)
        v218 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v218 = v216;
      if (v218)
        v219 = (unint64_t)operator new(v218);
      else
        v219 = 0;
      v220 = (char *)(v219 + v218);
      v215[v219] = HIBYTE(v108);
      v213 = &v215[v219 + 1];
      if (v202 == (_BYTE *)v214)
      {
        *a2 = (unint64_t)&v215[v219];
        a2[1] = (unint64_t)v213;
        a2[2] = (unint64_t)v220;
LABEL_344:
        operator delete(v202);
        goto LABEL_345;
      }
      v221 = &v202[~v214];
      do
      {
        v222 = *--v202;
        (v221--)[v219] = v222;
      }
      while (v202 != (_BYTE *)v214);
      v202 = (_BYTE *)*a2;
      *a2 = v219;
      a2[1] = (unint64_t)v213;
      a2[2] = (unint64_t)v220;
      if (v202)
        goto LABEL_344;
LABEL_345:
      a2[1] = (unint64_t)v213;
      v223 = a2[2];
      if ((unint64_t)v213 < v223)
      {
        *v213 = v114;
        v224 = v213 + 1;
        goto LABEL_363;
      }
      v225 = *a2;
      v226 = &v213[-*a2];
      v227 = (unint64_t)(v226 + 1);
      if ((uint64_t)(v226 + 1) < 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v228 = v223 - v225;
      if (2 * v228 > v227)
        v227 = 2 * v228;
      if (v228 >= 0x3FFFFFFFFFFFFFFFLL)
        v229 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v229 = v227;
      if (v229)
        v230 = (unint64_t)operator new(v229);
      else
        v230 = 0;
      v231 = (char *)(v230 + v229);
      v226[v230] = v114;
      v224 = &v226[v230 + 1];
      if (v213 == (_BYTE *)v225)
      {
        *a2 = (unint64_t)&v226[v230];
        a2[1] = (unint64_t)v224;
        a2[2] = (unint64_t)v231;
LABEL_362:
        operator delete(v213);
        goto LABEL_363;
      }
      v232 = &v213[~v225];
      do
      {
        v233 = *--v213;
        (v232--)[v230] = v233;
      }
      while (v213 != (_BYTE *)v225);
      v213 = (_BYTE *)*a2;
      *a2 = v230;
      a2[1] = (unint64_t)v224;
      a2[2] = (unint64_t)v231;
      if (v213)
        goto LABEL_362;
LABEL_363:
      a2[1] = (unint64_t)v224;
      v234 = a2[2];
      if ((unint64_t)v224 < v234)
      {
        *v224 = BYTE1(v114);
        v235 = v224 + 1;
        goto LABEL_381;
      }
      v236 = *a2;
      v237 = &v224[-*a2];
      v238 = (unint64_t)(v237 + 1);
      if ((uint64_t)(v237 + 1) < 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v239 = v234 - v236;
      if (2 * v239 > v238)
        v238 = 2 * v239;
      if (v239 >= 0x3FFFFFFFFFFFFFFFLL)
        v240 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v240 = v238;
      if (v240)
        v241 = (unint64_t)operator new(v240);
      else
        v241 = 0;
      v242 = (char *)(v241 + v240);
      v237[v241] = BYTE1(v114);
      v235 = &v237[v241 + 1];
      if (v224 == (_BYTE *)v236)
      {
        *a2 = (unint64_t)&v237[v241];
        a2[1] = (unint64_t)v235;
        a2[2] = (unint64_t)v242;
LABEL_380:
        operator delete(v224);
        goto LABEL_381;
      }
      v243 = &v224[~v236];
      do
      {
        v244 = *--v224;
        (v243--)[v241] = v244;
      }
      while (v224 != (_BYTE *)v236);
      v224 = (_BYTE *)*a2;
      *a2 = v241;
      a2[1] = (unint64_t)v235;
      a2[2] = (unint64_t)v242;
      if (v224)
        goto LABEL_380;
LABEL_381:
      a2[1] = (unint64_t)v235;
      v245 = a2[2];
      if ((unint64_t)v235 < v245)
      {
        *v235 = 1;
        v246 = v235 + 1;
        goto LABEL_399;
      }
      v247 = *a2;
      v248 = &v235[-*a2];
      v249 = (unint64_t)(v248 + 1);
      if ((uint64_t)(v248 + 1) < 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v250 = v245 - v247;
      if (2 * v250 > v249)
        v249 = 2 * v250;
      if (v250 >= 0x3FFFFFFFFFFFFFFFLL)
        v251 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v251 = v249;
      if (v251)
        v252 = (unint64_t)operator new(v251);
      else
        v252 = 0;
      v253 = (char *)(v252 + v251);
      v248[v252] = 1;
      v246 = &v248[v252 + 1];
      if (v235 == (_BYTE *)v247)
      {
        *a2 = (unint64_t)&v248[v252];
        a2[1] = (unint64_t)v246;
        a2[2] = (unint64_t)v253;
LABEL_398:
        operator delete(v235);
        goto LABEL_399;
      }
      v254 = &v235[~v247];
      do
      {
        v255 = *--v235;
        (v254--)[v252] = v255;
      }
      while (v235 != (_BYTE *)v247);
      v235 = (_BYTE *)*a2;
      *a2 = v252;
      a2[1] = (unint64_t)v246;
      a2[2] = (unint64_t)v253;
      if (v235)
        goto LABEL_398;
LABEL_399:
      a2[1] = (unint64_t)v246;
      v256 = a2[2];
      if ((unint64_t)v246 < v256)
      {
        *v246 = 0;
        v257 = (uint64_t)(v246 + 1);
        goto LABEL_417;
      }
      v258 = *a2;
      v259 = &v246[-*a2];
      v260 = (unint64_t)(v259 + 1);
      if ((uint64_t)(v259 + 1) < 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v261 = v256 - v258;
      if (2 * v261 > v260)
        v260 = 2 * v261;
      if (v261 >= 0x3FFFFFFFFFFFFFFFLL)
        v262 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v262 = v260;
      if (v262)
        v263 = (unint64_t)operator new(v262);
      else
        v263 = 0;
      v264 = (char *)(v263 + v262);
      v259[v263] = 0;
      v257 = (uint64_t)&v259[v263 + 1];
      if (v246 == (_BYTE *)v258)
      {
        *a2 = (unint64_t)&v259[v263];
        a2[1] = v257;
        a2[2] = (unint64_t)v264;
LABEL_416:
        operator delete(v246);
        goto LABEL_417;
      }
      v265 = &v246[~v258];
      do
      {
        v266 = *--v246;
        (v265--)[v263] = v266;
      }
      while (v246 != (_BYTE *)v258);
      v246 = (_BYTE *)*a2;
      *a2 = v263;
      a2[1] = v257;
      a2[2] = (unint64_t)v264;
      if (v246)
        goto LABEL_416;
LABEL_417:
      a2[1] = v257;
      v323 = 0;
      v324 = 0;
      __p = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (const void *)*a2, v257, v257 - *a2);
      v267 = ~*a2 + a2[1];
      if (v267 < 8 || v267 > 0x7FF || v323 - (_BYTE *)__p <= v267)
      {
        if (__p)
        {
          v323 = __p;
          operator delete(__p);
        }
      }
      else
      {
        v272 = 0;
        v273 = 8;
        v274 = 8;
        do
        {
          v272 += *((unsigned __int8 *)__p + v273);
          v273 = ++v274;
        }
        while (v267 >= v274);
        v323 = __p;
        operator delete(__p);
        if (v272 != -1)
        {
          v277 = (_BYTE *)a2[1];
          v276 = a2[2];
          if ((unint64_t)v277 >= v276)
          {
            v279 = *a2;
            v280 = &v277[-*a2];
            v281 = (unint64_t)(v280 + 1);
            if ((uint64_t)(v280 + 1) < 0)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v282 = v276 - v279;
            if (2 * v282 > v281)
              v281 = 2 * v282;
            if (v282 >= 0x3FFFFFFFFFFFFFFFLL)
              v283 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v283 = v281;
            if (v283)
              v284 = (unint64_t)operator new(v283);
            else
              v284 = 0;
            v285 = (char *)(v284 + v283);
            v280[v284] = v272;
            v278 = &v280[v284 + 1];
            if (v277 == (_BYTE *)v279)
            {
              v284 += (unint64_t)v280;
            }
            else
            {
              v286 = &v277[~v279];
              do
              {
                v287 = *--v277;
                (v286--)[v284] = v287;
              }
              while (v277 != (_BYTE *)v279);
              v277 = (_BYTE *)*a2;
            }
            *a2 = v284;
            a2[1] = (unint64_t)v278;
            a2[2] = (unint64_t)v285;
            if (v277)
              operator delete(v277);
          }
          else
          {
            *v277 = v272;
            v278 = v277 + 1;
          }
          a2[1] = (unint64_t)v278;
          v288 = a2[2];
          if ((unint64_t)v278 < v288)
          {
            *v278 = HIBYTE(v272);
            v289 = (uint64_t)(v278 + 1);
            goto LABEL_467;
          }
          v290 = *a2;
          v291 = &v278[-*a2];
          v292 = (unint64_t)(v291 + 1);
          if ((uint64_t)(v291 + 1) < 0)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v293 = v288 - v290;
          if (2 * v293 > v292)
            v292 = 2 * v293;
          if (v293 >= 0x3FFFFFFFFFFFFFFFLL)
            v294 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v294 = v292;
          if (v294)
            v295 = (unint64_t)operator new(v294);
          else
            v295 = 0;
          v296 = (char *)(v295 + v294);
          v291[v295] = HIBYTE(v272);
          v289 = (uint64_t)&v291[v295 + 1];
          if (v278 == (_BYTE *)v290)
          {
            *a2 = (unint64_t)&v291[v295];
            a2[1] = v289;
            a2[2] = (unint64_t)v296;
          }
          else
          {
            v297 = &v278[~v290];
            do
            {
              v298 = *--v278;
              (v297--)[v295] = v298;
            }
            while (v278 != (_BYTE *)v290);
            v278 = (_BYTE *)*a2;
            *a2 = v295;
            a2[1] = v289;
            a2[2] = (unint64_t)v296;
            if (!v278)
            {
LABEL_467:
              a2[1] = v289;
              v299 = (_BYTE *)*a2;
              v300 = v289 - *a2;
              if (v300 < 0x10000)
              {
                v303 = v300 - 8;
                v299[5] = v303;
                *(_BYTE *)(*a2 + 6) = HIBYTE(v303);
                v304 = (_BYTE *)*a2;
                v275.i32[0] = *(_DWORD *)(*a2 + 2);
                v305 = vaddv_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v275)) + *(_BYTE *)(*a2 + 6);
                if (v305)
                {
                  v304[7] = v305;
                  v307 = (_BYTE *)a2[1];
                  v306 = a2[2];
                  if ((unint64_t)v307 >= v306)
                  {
                    v311 = *a2;
                    v312 = &v307[-*a2];
                    v313 = (unint64_t)(v312 + 1);
                    if ((uint64_t)(v312 + 1) < 0)
                      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                    v314 = v306 - v311;
                    if (2 * v314 > v313)
                      v313 = 2 * v314;
                    if (v314 >= 0x3FFFFFFFFFFFFFFFLL)
                      v315 = 0x7FFFFFFFFFFFFFFFLL;
                    else
                      v315 = v313;
                    if (v315)
                      v316 = (unint64_t)operator new(v315);
                    else
                      v316 = 0;
                    v317 = (char *)(v316 + v315);
                    v312[v316] = 10;
                    v308 = (uint64_t)&v312[v316 + 1];
                    if (v307 == (_BYTE *)v311)
                    {
                      v316 += (unint64_t)v312;
                    }
                    else
                    {
                      v318 = &v307[~v311];
                      do
                      {
                        v319 = *--v307;
                        (v318--)[v316] = v319;
                      }
                      while (v307 != (_BYTE *)v311);
                      v307 = (_BYTE *)*a2;
                    }
                    *a2 = v316;
                    a2[1] = v308;
                    a2[2] = (unint64_t)v317;
                    if (v307)
                      operator delete(v307);
                  }
                  else
                  {
                    *v307 = 10;
                    v308 = (uint64_t)(v307 + 1);
                  }
                  a2[1] = v308;
                  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    v320 = mach_continuous_time();
                    v321 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v320), "ADP", 68, "Ga23_07BuildZxMeCwModProdMsg");
                    LbsOsaTrace_WriteLog(0x18u, __str, v321, 5, 1);
                  }
                  return 1;
                }
                else
                {
                  a2[1] = (unint64_t)v304;
                  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                  {
                    bzero(__str, 0x410uLL);
                    v309 = mach_continuous_time();
                    v310 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MeCw or Mod\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v309), "ADP", 69, "Ga23_07BuildZxMeCwModProdMsg", 781);
                    LbsOsaTrace_WriteLog(0x18u, __str, v310, 0, 1);
                  }
                  result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
                  if ((_DWORD)result)
                    goto LABEL_423;
                }
              }
              else
              {
                a2[1] = (unint64_t)v299;
                if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  v301 = mach_continuous_time();
                  v302 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CwModRange\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v301), "ADP", 69, "Ga23_07BuildZxMeCwModProdMsg", 772);
                  LbsOsaTrace_WriteLog(0x18u, __str, v302, 0, 1);
                }
                result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
                if ((_DWORD)result)
                  goto LABEL_423;
              }
              return result;
            }
          }
          operator delete(v278);
          goto LABEL_467;
        }
      }
      a2[1] = *a2;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v268 = mach_continuous_time();
        v269 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CwMod\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v268), "ADP", 69, "Ga23_07BuildZxMeCwModProdMsg", 784);
        LbsOsaTrace_WriteLog(0x18u, __str, v269, 0, 1);
      }
      result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if ((_DWORD)result)
      {
LABEL_423:
        bzero(__str, 0x410uLL);
        v270 = mach_continuous_time();
        v271 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v270), "ADP", 68, "Ga23_07BuildZxMeCwModProdMsg");
        LbsOsaTrace_WriteLog(0x18u, __str, v271, 5, 1);
        return 0;
      }
      return result;
  }
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_08ParseZxMeCwModProdMsg(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  unsigned __int16 v9;
  _BYTE *v10;
  uint64_t v11;
  unsigned __int16 v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t result;
  uint64_t v16;
  unsigned __int16 v17;
  uint64_t v18;
  unsigned __int16 v19;
  uint64_t v20;
  unsigned __int16 v21;
  char v22;
  uint64_t v23;
  unsigned __int16 v24;
  char v25;
  int v26;
  uint64_t v27;
  unsigned __int16 v28;
  double v29;
  uint64_t v30;
  unsigned __int16 v31;
  uint64_t v32;
  unsigned __int16 v33;
  uint64_t v34;
  unsigned __int16 v35;
  uint64_t v36;
  unsigned __int16 v37;
  _QWORD __dst[3];
  char __str[1040];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v8 = mach_continuous_time();
    v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "Ga23_08ParseZxMeCwModProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
  }
  v10 = (_BYTE *)*a2;
  if (*(_BYTE *)(*a2 + 2) != 84 || v10[3] != 80 || v10[4] != 77)
  {
    a2[1] = v10;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v13 = mach_continuous_time();
      v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Msg Type\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 69, "Ga23_08ParseZxMeCwModProdMsg", 770);
      LbsOsaTrace_WriteLog(0x18u, __str, v14, 0, 1);
    }
    result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (!(_DWORD)result)
      return result;
LABEL_15:
    bzero(__str, 0x410uLL);
    v16 = mach_continuous_time();
    v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "ADP", 68, "Ga23_08ParseZxMeCwModProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v17, 5, 1);
    return 0;
  }
  if (v10[8] != 32)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v18 = mach_continuous_time();
      v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CW or Mod status\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 69, "Ga23_08ParseZxMeCwModProdMsg", 770);
      LbsOsaTrace_WriteLog(0x18u, __str, v19, 0, 1);
    }
    result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if (!(_DWORD)result)
      return result;
    goto LABEL_15;
  }
  memset(__dst, 0, 17);
  if (a2[1] - (_QWORD)v10 <= 0x1AuLL)
  {
    a2[1] = v10;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v11 = mach_continuous_time();
      v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ZxMsg\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "Ga23_08ParseZxMeCwModProdMsg", 770);
      LbsOsaTrace_WriteLog(0x18u, __str, v12, 0, 1);
    }
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      return 0;
    goto LABEL_15;
  }
  memcpy_s("Ga23_08ParseZxMeCwModProdMsg", 686, __dst, 0x11u, v10 + 10, 0x11uLL);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v20 = mach_continuous_time();
    v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 68, "Ga23_10MapCoreParamsToFramCwModParams");
    LbsOsaTrace_WriteLog(0x18u, __str, v21, 5, 1);
  }
  switch(BYTE1(__dst[0]))
  {
    case 0:
      v22 = 1;
      *(_BYTE *)a3 = 1;
      break;
    case 3:
      *(_BYTE *)a3 = 4;
      *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
      goto LABEL_33;
    case 4:
      v25 = 8;
      goto LABEL_32;
    case 5:
      v25 = 5;
LABEL_32:
      *(_BYTE *)a3 = v25;
LABEL_33:
      v22 = 1;
      break;
    default:
      *(_BYTE *)a3 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v23 = mach_continuous_time();
        v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Defalt CW Constel,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 69, "Ga23_10MapCoreParamsToFramCwModParams", 515, BYTE1(__dst[0]));
        LbsOsaTrace_WriteLog(0x18u, __str, v24, 0, 1);
      }
      v22 = 0;
      break;
  }
  if (a4 == 1)
  {
    switch(BYTE1(__dst[0]))
    {
      case 0:
        v26 = BYTE4(__dst[0]);
        goto LABEL_43;
      case 3:
        v26 = BYTE4(__dst[0]) - 8;
        goto LABEL_43;
      case 4:
        v26 = BYTE4(__dst[0]) - 64;
        goto LABEL_43;
      case 5:
        v26 = BYTE4(__dst[0]) - 128;
LABEL_43:
        *(_DWORD *)(a3 + 4) = v26;
        break;
      default:
        *(_DWORD *)(a3 + 4) = 0;
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v27 = mach_continuous_time();
          v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Default Mod Constel,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "ADP", 69, "Ga23_10MapCoreParamsToFramCwModParams", 515, BYTE1(__dst[0]));
          LbsOsaTrace_WriteLog(0x18u, __str, v28, 0, 1);
        }
        v22 = 0;
        break;
    }
  }
  v29 = (double)*(__int16 *)((char *)&__dst[1] + 7) * 0.0625;
  *(double *)(a3 + 8) = (double)*(__int16 *)((char *)__dst + 7) * 0.00390625;
  *(double *)(a3 + 16) = v29;
  *(double *)(a3 + 24) = (double)*(__int16 *)((char *)__dst + 5);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v30 = mach_continuous_time();
    v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "ADP", 68, "Ga23_10MapCoreParamsToFramCwModParams");
    LbsOsaTrace_WriteLog(0x18u, __str, v31, 5, 1);
  }
  if ((v22 & 1) == 0)
  {
    a2[1] = *a2;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v36 = mach_continuous_time();
      v37 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "ADP", 68, "Ga23_08ParseZxMeCwModProdMsg");
      LbsOsaTrace_WriteLog(0x18u, __str, v37, 5, 1);
    }
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v32 = mach_continuous_time();
    v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Const,%u,Jnr,%d,KVal,%d,MeasState,%d,NoOfTrack,%u,ResStatus,%u,Cn0,%d,TrackChannelId,%u,Rssi,%d,BasebandFreqOffset,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "ADP", 68, "Ga23_08ParseZxMeCwModProdMsg", BYTE1(__dst[0]), SBYTE1(__dst[1]), SBYTE2(__dst[1]), *(__int16 *)((char *)&__dst[1] + 3), BYTE2(__dst[0]), LOBYTE(__dst[0]), *(__int16 *)((char *)__dst + 7), BYTE3(__dst[0]), *(__int16 *)((char *)&__dst[1] + 7), *(__int16 *)((char *)&__dst[1] + 5));
    LbsOsaTrace_WriteLog(0x18u, __str, v33, 5, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v34 = mach_continuous_time();
    v35 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), "ADP", 68, "Ga23_08ParseZxMeCwModProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v35, 5, 1);
  }
  return 1;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_11BuildZxMePowerProdMsg(uint64_t a1, unint64_t *a2, unsigned int a3, int a4)
{
  uint64_t v7;
  unsigned __int16 v8;
  unint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  unint64_t v17;
  char *v18;
  _BYTE *v19;
  char v20;
  unint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  char *v29;
  _BYTE *v30;
  char v31;
  unint64_t v32;
  _BYTE *v33;
  unint64_t v34;
  _BYTE *v35;
  unint64_t v36;
  unint64_t v37;
  size_t v38;
  unint64_t v39;
  char *v40;
  _BYTE *v41;
  char v42;
  unint64_t v43;
  _BYTE *v44;
  unint64_t v45;
  _BYTE *v46;
  unint64_t v47;
  unint64_t v48;
  size_t v49;
  unint64_t v50;
  char *v51;
  _BYTE *v52;
  char v53;
  unint64_t v54;
  _BYTE *v55;
  unint64_t v56;
  _BYTE *v57;
  unint64_t v58;
  unint64_t v59;
  size_t v60;
  unint64_t v61;
  char *v62;
  _BYTE *v63;
  char v64;
  unint64_t v65;
  _BYTE *v66;
  unint64_t v67;
  _BYTE *v68;
  unint64_t v69;
  unint64_t v70;
  size_t v71;
  unint64_t v72;
  char *v73;
  _BYTE *v74;
  char v75;
  unint64_t v76;
  _BYTE *v77;
  unint64_t v78;
  _BYTE *v79;
  unint64_t v80;
  unint64_t v81;
  size_t v82;
  unint64_t v83;
  char *v84;
  _BYTE *v85;
  char v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _BYTE *v90;
  unint64_t v91;
  unint64_t v92;
  size_t v93;
  unint64_t v94;
  char *v95;
  _BYTE *v96;
  char v97;
  uint64_t v98;
  unsigned __int16 v99;
  _BOOL4 v100;
  int v101;
  uint64_t v102;
  unsigned __int16 v103;
  uint64_t v104;
  unsigned __int16 v105;
  uint64_t v106;
  unsigned __int16 v107;
  unint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  unint64_t v111;
  _BYTE *v112;
  unint64_t v113;
  unint64_t v114;
  size_t v115;
  unint64_t v116;
  char *v117;
  _BYTE *v118;
  char v119;
  int v120;
  uint64_t v121;
  unsigned __int16 v122;
  unint64_t v123;
  _BYTE *v124;
  _BYTE *v125;
  unint64_t v126;
  _BYTE *v127;
  unint64_t v128;
  unint64_t v129;
  size_t v130;
  unint64_t v131;
  char *v132;
  _BYTE *v133;
  char v134;
  unint64_t v135;
  _BYTE *v136;
  unint64_t v137;
  _BYTE *v138;
  unint64_t v139;
  unint64_t v140;
  size_t v141;
  unint64_t v142;
  char *v143;
  _BYTE *v144;
  char v145;
  unint64_t v146;
  unint64_t v147;
  _BYTE *v148;
  unint64_t v149;
  unint64_t v150;
  size_t v151;
  unint64_t v152;
  _BYTE *v153;
  _BYTE *v154;
  char *v155;
  char *v156;
  _BYTE *v157;
  char v158;
  unint64_t v159;
  _BYTE *v160;
  unint64_t v161;
  unint64_t v162;
  size_t v163;
  unint64_t v164;
  _BYTE *v165;
  unint64_t v166;
  unint64_t v167;
  size_t v168;
  _BYTE *v169;
  char v170;
  _BYTE *v171;
  char v172;
  unint64_t v173;
  _BYTE *v174;
  unint64_t v175;
  _BYTE *v176;
  unint64_t v177;
  unint64_t v178;
  size_t v179;
  unint64_t v180;
  char *v181;
  _BYTE *v182;
  char v183;
  unint64_t v184;
  _BYTE *v185;
  unint64_t v186;
  _BYTE *v187;
  unint64_t v188;
  unint64_t v189;
  size_t v190;
  unint64_t v191;
  char *v192;
  _BYTE *v193;
  char v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  _BYTE *v198;
  unint64_t v199;
  unint64_t v200;
  size_t v201;
  unint64_t v202;
  char *v203;
  _BYTE *v204;
  char v205;
  unint64_t v206;
  uint64_t v207;
  unsigned __int16 v208;
  uint64_t result;
  uint64_t v210;
  unsigned __int16 v211;
  __int16 v212;
  uint64_t v213;
  int v214;
  uint8x8_t v215;
  unint64_t v216;
  _BYTE *v217;
  _BYTE *v218;
  unint64_t v219;
  _BYTE *v220;
  unint64_t v221;
  unint64_t v222;
  size_t v223;
  unint64_t v224;
  char *v225;
  _BYTE *v226;
  char v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  _BYTE *v231;
  unint64_t v232;
  unint64_t v233;
  size_t v234;
  unint64_t v235;
  char *v236;
  _BYTE *v237;
  char v238;
  _BYTE *v239;
  unint64_t v240;
  uint64_t v241;
  unsigned __int16 v242;
  __int16 v243;
  _BYTE *v244;
  char v245;
  unint64_t v246;
  _BYTE *v247;
  uint64_t v248;
  uint64_t v249;
  unsigned __int16 v250;
  unint64_t v251;
  _BYTE *v252;
  unint64_t v253;
  unint64_t v254;
  size_t v255;
  unint64_t v256;
  char *v257;
  _BYTE *v258;
  char v259;
  uint64_t v260;
  unsigned __int16 v261;
  void *__p;
  _BYTE *v263;
  uint64_t v264;
  char __str[1040];
  uint64_t v266;

  v266 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v7 = mach_continuous_time();
    v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 68, "Ga23_11BuildZxMePowerProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 5, 1);
  }
  v10 = (_BYTE *)a2[1];
  v9 = a2[2];
  if ((unint64_t)v10 >= v9)
  {
    v12 = *a2;
    v13 = &v10[-*a2];
    v14 = (unint64_t)(v13 + 1);
    if ((uint64_t)(v13 + 1) < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v15 = v9 - v12;
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
      v16 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
      v17 = (unint64_t)operator new(v16);
    else
      v17 = 0;
    v18 = (char *)(v17 + v16);
    v13[v17] = 122;
    v11 = &v13[v17 + 1];
    if (v10 == (_BYTE *)v12)
    {
      v17 += (unint64_t)v13;
    }
    else
    {
      v19 = &v10[~v12];
      do
      {
        v20 = *--v10;
        (v19--)[v17] = v20;
      }
      while (v10 != (_BYTE *)v12);
      v10 = (_BYTE *)*a2;
    }
    *a2 = v17;
    a2[1] = (unint64_t)v11;
    a2[2] = (unint64_t)v18;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *v10 = 122;
    v11 = v10 + 1;
  }
  a2[1] = (unint64_t)v11;
  v21 = a2[2];
  if ((unint64_t)v11 < v21)
  {
    *v11 = 120;
    v22 = v11 + 1;
    goto LABEL_39;
  }
  v23 = *a2;
  v24 = &v11[-*a2];
  v25 = (unint64_t)(v24 + 1);
  if ((uint64_t)(v24 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v26 = v21 - v23;
  if (2 * v26 > v25)
    v25 = 2 * v26;
  if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
    v27 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v27 = v25;
  if (v27)
    v28 = (unint64_t)operator new(v27);
  else
    v28 = 0;
  v29 = (char *)(v28 + v27);
  v24[v28] = 120;
  v22 = &v24[v28 + 1];
  if (v11 == (_BYTE *)v23)
  {
    *a2 = (unint64_t)&v24[v28];
    a2[1] = (unint64_t)v22;
    a2[2] = (unint64_t)v29;
LABEL_38:
    operator delete(v11);
    goto LABEL_39;
  }
  v30 = &v11[~v23];
  do
  {
    v31 = *--v11;
    (v30--)[v28] = v31;
  }
  while (v11 != (_BYTE *)v23);
  v11 = (_BYTE *)*a2;
  *a2 = v28;
  a2[1] = (unint64_t)v22;
  a2[2] = (unint64_t)v29;
  if (v11)
    goto LABEL_38;
LABEL_39:
  a2[1] = (unint64_t)v22;
  v32 = a2[2];
  if ((unint64_t)v22 < v32)
  {
    *v22 = 84;
    v33 = v22 + 1;
    goto LABEL_57;
  }
  v34 = *a2;
  v35 = &v22[-*a2];
  v36 = (unint64_t)(v35 + 1);
  if ((uint64_t)(v35 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v37 = v32 - v34;
  if (2 * v37 > v36)
    v36 = 2 * v37;
  if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
    v38 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v38 = v36;
  if (v38)
    v39 = (unint64_t)operator new(v38);
  else
    v39 = 0;
  v40 = (char *)(v39 + v38);
  v35[v39] = 84;
  v33 = &v35[v39 + 1];
  if (v22 == (_BYTE *)v34)
  {
    *a2 = (unint64_t)&v35[v39];
    a2[1] = (unint64_t)v33;
    a2[2] = (unint64_t)v40;
LABEL_56:
    operator delete(v22);
    goto LABEL_57;
  }
  v41 = &v22[~v34];
  do
  {
    v42 = *--v22;
    (v41--)[v39] = v42;
  }
  while (v22 != (_BYTE *)v34);
  v22 = (_BYTE *)*a2;
  *a2 = v39;
  a2[1] = (unint64_t)v33;
  a2[2] = (unint64_t)v40;
  if (v22)
    goto LABEL_56;
LABEL_57:
  a2[1] = (unint64_t)v33;
  v43 = a2[2];
  if ((unint64_t)v33 < v43)
  {
    *v33 = 103;
    v44 = v33 + 1;
    goto LABEL_75;
  }
  v45 = *a2;
  v46 = &v33[-*a2];
  v47 = (unint64_t)(v46 + 1);
  if ((uint64_t)(v46 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v48 = v43 - v45;
  if (2 * v48 > v47)
    v47 = 2 * v48;
  if (v48 >= 0x3FFFFFFFFFFFFFFFLL)
    v49 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v49 = v47;
  if (v49)
    v50 = (unint64_t)operator new(v49);
  else
    v50 = 0;
  v51 = (char *)(v50 + v49);
  v46[v50] = 103;
  v44 = &v46[v50 + 1];
  if (v33 == (_BYTE *)v45)
  {
    *a2 = (unint64_t)&v46[v50];
    a2[1] = (unint64_t)v44;
    a2[2] = (unint64_t)v51;
LABEL_74:
    operator delete(v33);
    goto LABEL_75;
  }
  v52 = &v33[~v45];
  do
  {
    v53 = *--v33;
    (v52--)[v50] = v53;
  }
  while (v33 != (_BYTE *)v45);
  v33 = (_BYTE *)*a2;
  *a2 = v50;
  a2[1] = (unint64_t)v44;
  a2[2] = (unint64_t)v51;
  if (v33)
    goto LABEL_74;
LABEL_75:
  a2[1] = (unint64_t)v44;
  v54 = a2[2];
  if ((unint64_t)v44 < v54)
  {
    *v44 = 77;
    v55 = v44 + 1;
    goto LABEL_93;
  }
  v56 = *a2;
  v57 = &v44[-*a2];
  v58 = (unint64_t)(v57 + 1);
  if ((uint64_t)(v57 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v59 = v54 - v56;
  if (2 * v59 > v58)
    v58 = 2 * v59;
  if (v59 >= 0x3FFFFFFFFFFFFFFFLL)
    v60 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v60 = v58;
  if (v60)
    v61 = (unint64_t)operator new(v60);
  else
    v61 = 0;
  v62 = (char *)(v61 + v60);
  v57[v61] = 77;
  v55 = &v57[v61 + 1];
  if (v44 == (_BYTE *)v56)
  {
    *a2 = (unint64_t)&v57[v61];
    a2[1] = (unint64_t)v55;
    a2[2] = (unint64_t)v62;
LABEL_92:
    operator delete(v44);
    goto LABEL_93;
  }
  v63 = &v44[~v56];
  do
  {
    v64 = *--v44;
    (v63--)[v61] = v64;
  }
  while (v44 != (_BYTE *)v56);
  v44 = (_BYTE *)*a2;
  *a2 = v61;
  a2[1] = (unint64_t)v55;
  a2[2] = (unint64_t)v62;
  if (v44)
    goto LABEL_92;
LABEL_93:
  a2[1] = (unint64_t)v55;
  v65 = a2[2];
  if ((unint64_t)v55 < v65)
  {
    *v55 = 0;
    v66 = v55 + 1;
    goto LABEL_111;
  }
  v67 = *a2;
  v68 = &v55[-*a2];
  v69 = (unint64_t)(v68 + 1);
  if ((uint64_t)(v68 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v70 = v65 - v67;
  if (2 * v70 > v69)
    v69 = 2 * v70;
  if (v70 >= 0x3FFFFFFFFFFFFFFFLL)
    v71 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v71 = v69;
  if (v71)
    v72 = (unint64_t)operator new(v71);
  else
    v72 = 0;
  v73 = (char *)(v72 + v71);
  v68[v72] = 0;
  v66 = &v68[v72 + 1];
  if (v55 == (_BYTE *)v67)
  {
    *a2 = (unint64_t)&v68[v72];
    a2[1] = (unint64_t)v66;
    a2[2] = (unint64_t)v73;
LABEL_110:
    operator delete(v55);
    goto LABEL_111;
  }
  v74 = &v55[~v67];
  do
  {
    v75 = *--v55;
    (v74--)[v72] = v75;
  }
  while (v55 != (_BYTE *)v67);
  v55 = (_BYTE *)*a2;
  *a2 = v72;
  a2[1] = (unint64_t)v66;
  a2[2] = (unint64_t)v73;
  if (v55)
    goto LABEL_110;
LABEL_111:
  a2[1] = (unint64_t)v66;
  v76 = a2[2];
  if ((unint64_t)v66 < v76)
  {
    *v66 = 0;
    v77 = v66 + 1;
    goto LABEL_129;
  }
  v78 = *a2;
  v79 = &v66[-*a2];
  v80 = (unint64_t)(v79 + 1);
  if ((uint64_t)(v79 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v81 = v76 - v78;
  if (2 * v81 > v80)
    v80 = 2 * v81;
  if (v81 >= 0x3FFFFFFFFFFFFFFFLL)
    v82 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v82 = v80;
  if (v82)
    v83 = (unint64_t)operator new(v82);
  else
    v83 = 0;
  v84 = (char *)(v83 + v82);
  v79[v83] = 0;
  v77 = &v79[v83 + 1];
  if (v66 == (_BYTE *)v78)
  {
    *a2 = (unint64_t)&v79[v83];
    a2[1] = (unint64_t)v77;
    a2[2] = (unint64_t)v84;
LABEL_128:
    operator delete(v66);
    goto LABEL_129;
  }
  v85 = &v66[~v78];
  do
  {
    v86 = *--v66;
    (v85--)[v83] = v86;
  }
  while (v66 != (_BYTE *)v78);
  v66 = (_BYTE *)*a2;
  *a2 = v83;
  a2[1] = (unint64_t)v77;
  a2[2] = (unint64_t)v84;
  if (v66)
    goto LABEL_128;
LABEL_129:
  a2[1] = (unint64_t)v77;
  v87 = a2[2];
  if ((unint64_t)v77 < v87)
  {
    *v77 = 0;
    v88 = (uint64_t)(v77 + 1);
    goto LABEL_147;
  }
  v89 = *a2;
  v90 = &v77[-*a2];
  v91 = (unint64_t)(v90 + 1);
  if ((uint64_t)(v90 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v92 = v87 - v89;
  if (2 * v92 > v91)
    v91 = 2 * v92;
  if (v92 >= 0x3FFFFFFFFFFFFFFFLL)
    v93 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v93 = v91;
  if (v93)
    v94 = (unint64_t)operator new(v93);
  else
    v94 = 0;
  v95 = (char *)(v94 + v93);
  v90[v94] = 0;
  v88 = (uint64_t)&v90[v94 + 1];
  if (v77 == (_BYTE *)v89)
  {
    *a2 = (unint64_t)&v90[v94];
    a2[1] = v88;
    a2[2] = (unint64_t)v95;
LABEL_146:
    operator delete(v77);
    goto LABEL_147;
  }
  v96 = &v77[~v89];
  do
  {
    v97 = *--v77;
    (v96--)[v94] = v97;
  }
  while (v77 != (_BYTE *)v89);
  v77 = (_BYTE *)*a2;
  *a2 = v94;
  a2[1] = v88;
  a2[2] = (unint64_t)v95;
  if (v77)
    goto LABEL_146;
LABEL_147:
  a2[1] = v88;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v98 = mach_continuous_time();
    v99 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v98), "ADP", 68, "Ga23_13MapFramPowerParamToCorePowerParams");
    LbsOsaTrace_WriteLog(0x18u, __str, v99, 5, 1);
  }
  if (a3 >= 5)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v102 = mach_continuous_time();
      v103 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PwrMode,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v102), "ADP", 87, "Ga23_13MapFramPowerParamToCorePowerParams", 770, a3);
      LbsOsaTrace_WriteLog(0x18u, __str, v103, 2, 1);
    }
    v100 = 0;
    v101 = 0;
  }
  else
  {
    v100 = (a3 & 0x1F) == 4;
    v101 = (0x4FFFFFF00uLL >> (8 * a3));
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v104 = mach_continuous_time();
    v105 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MePwrMode,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v104), "ADP", 73, "Ga23_13MapFramPowerParamToCorePowerParams", v101);
    LbsOsaTrace_WriteLog(0x18u, __str, v105, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v106 = mach_continuous_time();
    v107 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v106), "ADP", 68, "Ga23_13MapFramPowerParamToCorePowerParams");
    LbsOsaTrace_WriteLog(0x18u, __str, v107, 5, 1);
  }
  v109 = (_BYTE *)a2[1];
  v108 = a2[2];
  if ((unint64_t)v109 >= v108)
  {
    v111 = *a2;
    v112 = &v109[-*a2];
    v113 = (unint64_t)(v112 + 1);
    if ((uint64_t)(v112 + 1) < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v114 = v108 - v111;
    if (2 * v114 > v113)
      v113 = 2 * v114;
    if (v114 >= 0x3FFFFFFFFFFFFFFFLL)
      v115 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v115 = v113;
    if (v115)
      v116 = (unint64_t)operator new(v115);
    else
      v116 = 0;
    v117 = (char *)(v116 + v115);
    v112[v116] = v101;
    v110 = (uint64_t)&v112[v116 + 1];
    if (v109 == (_BYTE *)v111)
    {
      v116 += (unint64_t)v112;
    }
    else
    {
      v118 = &v109[~v111];
      do
      {
        v119 = *--v109;
        (v118--)[v116] = v119;
      }
      while (v109 != (_BYTE *)v111);
      v109 = (_BYTE *)*a2;
    }
    *a2 = v116;
    a2[1] = v110;
    a2[2] = (unint64_t)v117;
    if (v109)
      operator delete(v109);
  }
  else
  {
    *v109 = v101;
    v110 = (uint64_t)(v109 + 1);
  }
  a2[1] = v110;
  if ((v101 & 0xFE) == 2)
    v120 = 5;
  else
    v120 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v121 = mach_continuous_time();
    v122 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PwrTimeOut,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v121), "ADP", 73, "Ga23_11BuildZxMePowerProdMsg", v120);
    LbsOsaTrace_WriteLog(0x18u, __str, v122, 4, 1);
  }
  v124 = (_BYTE *)a2[1];
  v123 = a2[2];
  if ((unint64_t)v124 >= v123)
  {
    v126 = *a2;
    v127 = &v124[-*a2];
    v128 = (unint64_t)(v127 + 1);
    if ((uint64_t)(v127 + 1) < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v129 = v123 - v126;
    if (2 * v129 > v128)
      v128 = 2 * v129;
    if (v129 >= 0x3FFFFFFFFFFFFFFFLL)
      v130 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v130 = v128;
    if (v130)
      v131 = (unint64_t)operator new(v130);
    else
      v131 = 0;
    v132 = (char *)(v131 + v130);
    v127[v131] = v120;
    v125 = &v127[v131 + 1];
    if (v124 == (_BYTE *)v126)
    {
      v131 += (unint64_t)v127;
    }
    else
    {
      v133 = &v124[~v126];
      do
      {
        v134 = *--v124;
        (v133--)[v131] = v134;
      }
      while (v124 != (_BYTE *)v126);
      v124 = (_BYTE *)*a2;
    }
    *a2 = v131;
    a2[1] = (unint64_t)v125;
    a2[2] = (unint64_t)v132;
    if (v124)
      operator delete(v124);
  }
  else
  {
    *v124 = v120;
    v125 = v124 + 1;
  }
  a2[1] = (unint64_t)v125;
  v135 = a2[2];
  if ((unint64_t)v125 < v135)
  {
    *v125 = 0;
    v136 = v125 + 1;
    goto LABEL_217;
  }
  v137 = *a2;
  v138 = &v125[-*a2];
  v139 = (unint64_t)(v138 + 1);
  if ((uint64_t)(v138 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v140 = v135 - v137;
  if (2 * v140 > v139)
    v139 = 2 * v140;
  if (v140 >= 0x3FFFFFFFFFFFFFFFLL)
    v141 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v141 = v139;
  if (v141)
    v142 = (unint64_t)operator new(v141);
  else
    v142 = 0;
  v143 = (char *)(v142 + v141);
  v138[v142] = 0;
  v136 = &v138[v142 + 1];
  if (v125 == (_BYTE *)v137)
  {
    *a2 = (unint64_t)&v138[v142];
    a2[1] = (unint64_t)v136;
    a2[2] = (unint64_t)v143;
LABEL_216:
    operator delete(v125);
    goto LABEL_217;
  }
  v144 = &v125[~v137];
  do
  {
    v145 = *--v125;
    (v144--)[v142] = v145;
  }
  while (v125 != (_BYTE *)v137);
  v125 = (_BYTE *)*a2;
  *a2 = v142;
  a2[1] = (unint64_t)v136;
  a2[2] = (unint64_t)v143;
  if (v125)
    goto LABEL_216;
LABEL_217:
  a2[1] = (unint64_t)v136;
  v146 = a2[2];
  if (a4)
  {
    if ((unint64_t)v136 >= v146)
    {
      v147 = *a2;
      v148 = &v136[-*a2];
      v149 = (unint64_t)(v148 + 1);
      if ((uint64_t)(v148 + 1) < 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v150 = v146 - v147;
      if (2 * v150 > v149)
        v149 = 2 * v150;
      if (v150 >= 0x3FFFFFFFFFFFFFFFLL)
        v151 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v151 = v149;
      if (v151)
        v152 = (unint64_t)operator new(v151);
      else
        v152 = 0;
      v155 = &v148[v152];
      v156 = (char *)(v152 + v151);
      v148[v152] = 1;
      v154 = &v148[v152 + 1];
      if (v136 != (_BYTE *)v147)
      {
        v157 = &v136[~v147];
        do
        {
          v158 = *--v136;
          (v157--)[v152] = v158;
        }
        while (v136 != (_BYTE *)v147);
        goto LABEL_263;
      }
LABEL_265:
      *a2 = (unint64_t)v155;
      a2[1] = (unint64_t)v154;
      a2[2] = (unint64_t)v156;
      goto LABEL_266;
    }
    goto LABEL_231;
  }
  if (v100)
  {
    if ((unint64_t)v136 < v146)
    {
      *v136 = 0;
      v153 = v136 + 1;
LABEL_232:
      v154 = v153;
      goto LABEL_267;
    }
    v159 = *a2;
    v160 = &v136[-*a2];
    v161 = (unint64_t)(v160 + 1);
    if ((uint64_t)(v160 + 1) < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v162 = v146 - v159;
    if (2 * v162 > v161)
      v161 = 2 * v162;
    if (v162 >= 0x3FFFFFFFFFFFFFFFLL)
      v163 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v163 = v161;
    if (v163)
      v152 = (unint64_t)operator new(v163);
    else
      v152 = 0;
    v155 = &v160[v152];
    v156 = (char *)(v152 + v163);
    v160[v152] = 0;
    v154 = &v160[v152 + 1];
    if (v136 == (_BYTE *)v159)
      goto LABEL_265;
    v169 = &v136[~v159];
    do
    {
      v170 = *--v136;
      (v169--)[v152] = v170;
    }
    while (v136 != (_BYTE *)v159);
  }
  else
  {
    if ((unint64_t)v136 < v146)
    {
LABEL_231:
      *v136 = 1;
      v153 = v136 + 1;
      goto LABEL_232;
    }
    v164 = *a2;
    v165 = &v136[-*a2];
    v166 = (unint64_t)(v165 + 1);
    if ((uint64_t)(v165 + 1) < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v167 = v146 - v164;
    if (2 * v167 > v166)
      v166 = 2 * v167;
    if (v167 >= 0x3FFFFFFFFFFFFFFFLL)
      v168 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v168 = v166;
    if (v168)
      v152 = (unint64_t)operator new(v168);
    else
      v152 = 0;
    v155 = &v165[v152];
    v156 = (char *)(v152 + v168);
    v165[v152] = 1;
    v154 = &v165[v152 + 1];
    if (v136 == (_BYTE *)v164)
      goto LABEL_265;
    v171 = &v136[~v164];
    do
    {
      v172 = *--v136;
      (v171--)[v152] = v172;
    }
    while (v136 != (_BYTE *)v164);
  }
LABEL_263:
  v136 = (_BYTE *)*a2;
  *a2 = v152;
  a2[1] = (unint64_t)v154;
  a2[2] = (unint64_t)v156;
  if (v136)
LABEL_266:
    operator delete(v136);
LABEL_267:
  a2[1] = (unint64_t)v154;
  v173 = a2[2];
  if ((unint64_t)v154 < v173)
  {
    *v154 = 0;
    v174 = v154 + 1;
    goto LABEL_285;
  }
  v175 = *a2;
  v176 = &v154[-*a2];
  v177 = (unint64_t)(v176 + 1);
  if ((uint64_t)(v176 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v178 = v173 - v175;
  if (2 * v178 > v177)
    v177 = 2 * v178;
  if (v178 >= 0x3FFFFFFFFFFFFFFFLL)
    v179 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v179 = v177;
  if (v179)
    v180 = (unint64_t)operator new(v179);
  else
    v180 = 0;
  v181 = (char *)(v180 + v179);
  v176[v180] = 0;
  v174 = &v176[v180 + 1];
  if (v154 == (_BYTE *)v175)
  {
    *a2 = (unint64_t)&v176[v180];
    a2[1] = (unint64_t)v174;
    a2[2] = (unint64_t)v181;
LABEL_284:
    operator delete(v154);
    goto LABEL_285;
  }
  v182 = &v154[~v175];
  do
  {
    v183 = *--v154;
    (v182--)[v180] = v183;
  }
  while (v154 != (_BYTE *)v175);
  v154 = (_BYTE *)*a2;
  *a2 = v180;
  a2[1] = (unint64_t)v174;
  a2[2] = (unint64_t)v181;
  if (v154)
    goto LABEL_284;
LABEL_285:
  a2[1] = (unint64_t)v174;
  v184 = a2[2];
  if ((unint64_t)v174 < v184)
  {
    *v174 = 0;
    v185 = v174 + 1;
    goto LABEL_303;
  }
  v186 = *a2;
  v187 = &v174[-*a2];
  v188 = (unint64_t)(v187 + 1);
  if ((uint64_t)(v187 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v189 = v184 - v186;
  if (2 * v189 > v188)
    v188 = 2 * v189;
  if (v189 >= 0x3FFFFFFFFFFFFFFFLL)
    v190 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v190 = v188;
  if (v190)
    v191 = (unint64_t)operator new(v190);
  else
    v191 = 0;
  v192 = (char *)(v191 + v190);
  v187[v191] = 0;
  v185 = &v187[v191 + 1];
  if (v174 == (_BYTE *)v186)
  {
    *a2 = (unint64_t)&v187[v191];
    a2[1] = (unint64_t)v185;
    a2[2] = (unint64_t)v192;
LABEL_302:
    operator delete(v174);
    goto LABEL_303;
  }
  v193 = &v174[~v186];
  do
  {
    v194 = *--v174;
    (v193--)[v191] = v194;
  }
  while (v174 != (_BYTE *)v186);
  v174 = (_BYTE *)*a2;
  *a2 = v191;
  a2[1] = (unint64_t)v185;
  a2[2] = (unint64_t)v192;
  if (v174)
    goto LABEL_302;
LABEL_303:
  a2[1] = (unint64_t)v185;
  v195 = a2[2];
  if ((unint64_t)v185 < v195)
  {
    *v185 = 0;
    v196 = (uint64_t)(v185 + 1);
    goto LABEL_321;
  }
  v197 = *a2;
  v198 = &v185[-*a2];
  v199 = (unint64_t)(v198 + 1);
  if ((uint64_t)(v198 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v200 = v195 - v197;
  if (2 * v200 > v199)
    v199 = 2 * v200;
  if (v200 >= 0x3FFFFFFFFFFFFFFFLL)
    v201 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v201 = v199;
  if (v201)
    v202 = (unint64_t)operator new(v201);
  else
    v202 = 0;
  v203 = (char *)(v202 + v201);
  v198[v202] = 0;
  v196 = (uint64_t)&v198[v202 + 1];
  if (v185 == (_BYTE *)v197)
  {
    *a2 = (unint64_t)&v198[v202];
    a2[1] = v196;
    a2[2] = (unint64_t)v203;
LABEL_320:
    operator delete(v185);
    goto LABEL_321;
  }
  v204 = &v185[~v197];
  do
  {
    v205 = *--v185;
    (v204--)[v202] = v205;
  }
  while (v185 != (_BYTE *)v197);
  v185 = (_BYTE *)*a2;
  *a2 = v202;
  a2[1] = v196;
  a2[2] = (unint64_t)v203;
  if (v185)
    goto LABEL_320;
LABEL_321:
  a2[1] = v196;
  v263 = 0;
  v264 = 0;
  __p = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (const void *)*a2, v196, v196 - *a2);
  v206 = ~*a2 + a2[1];
  if (v206 < 8 || v206 > 0x7FF || v263 - (_BYTE *)__p <= v206)
  {
    if (__p)
    {
      v263 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v212 = 0;
    v213 = 8;
    v214 = 8;
    do
    {
      v212 += *((unsigned __int8 *)__p + v213);
      v213 = ++v214;
    }
    while (v206 >= v214);
    v263 = __p;
    operator delete(__p);
    if (v212 != -1)
    {
      v217 = (_BYTE *)a2[1];
      v216 = a2[2];
      if ((unint64_t)v217 >= v216)
      {
        v219 = *a2;
        v220 = &v217[-*a2];
        v221 = (unint64_t)(v220 + 1);
        if ((uint64_t)(v220 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v222 = v216 - v219;
        if (2 * v222 > v221)
          v221 = 2 * v222;
        if (v222 >= 0x3FFFFFFFFFFFFFFFLL)
          v223 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v223 = v221;
        if (v223)
          v224 = (unint64_t)operator new(v223);
        else
          v224 = 0;
        v225 = (char *)(v224 + v223);
        v220[v224] = v212;
        v218 = &v220[v224 + 1];
        if (v217 == (_BYTE *)v219)
        {
          v224 += (unint64_t)v220;
        }
        else
        {
          v226 = &v217[~v219];
          do
          {
            v227 = *--v217;
            (v226--)[v224] = v227;
          }
          while (v217 != (_BYTE *)v219);
          v217 = (_BYTE *)*a2;
        }
        *a2 = v224;
        a2[1] = (unint64_t)v218;
        a2[2] = (unint64_t)v225;
        if (v217)
          operator delete(v217);
      }
      else
      {
        *v217 = v212;
        v218 = v217 + 1;
      }
      a2[1] = (unint64_t)v218;
      v228 = a2[2];
      if ((unint64_t)v218 < v228)
      {
        *v218 = HIBYTE(v212);
        v229 = (uint64_t)(v218 + 1);
        goto LABEL_370;
      }
      v230 = *a2;
      v231 = &v218[-*a2];
      v232 = (unint64_t)(v231 + 1);
      if ((uint64_t)(v231 + 1) < 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v233 = v228 - v230;
      if (2 * v233 > v232)
        v232 = 2 * v233;
      if (v233 >= 0x3FFFFFFFFFFFFFFFLL)
        v234 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v234 = v232;
      if (v234)
        v235 = (unint64_t)operator new(v234);
      else
        v235 = 0;
      v236 = (char *)(v235 + v234);
      v231[v235] = HIBYTE(v212);
      v229 = (uint64_t)&v231[v235 + 1];
      if (v218 == (_BYTE *)v230)
      {
        *a2 = (unint64_t)&v231[v235];
        a2[1] = v229;
        a2[2] = (unint64_t)v236;
      }
      else
      {
        v237 = &v218[~v230];
        do
        {
          v238 = *--v218;
          (v237--)[v235] = v238;
        }
        while (v218 != (_BYTE *)v230);
        v218 = (_BYTE *)*a2;
        *a2 = v235;
        a2[1] = v229;
        a2[2] = (unint64_t)v236;
        if (!v218)
        {
LABEL_370:
          a2[1] = v229;
          v239 = (_BYTE *)*a2;
          v240 = v229 - *a2;
          if (v240 < 0x10000)
          {
            v243 = v240 - 8;
            v239[5] = v243;
            *(_BYTE *)(*a2 + 6) = HIBYTE(v243);
            v244 = (_BYTE *)*a2;
            v215.i32[0] = *(_DWORD *)(*a2 + 2);
            v245 = vaddv_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v215)) + *(_BYTE *)(*a2 + 6);
            if (v245)
            {
              v244[7] = v245;
              v247 = (_BYTE *)a2[1];
              v246 = a2[2];
              if ((unint64_t)v247 >= v246)
              {
                v251 = *a2;
                v252 = &v247[-*a2];
                v253 = (unint64_t)(v252 + 1);
                if ((uint64_t)(v252 + 1) < 0)
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                v254 = v246 - v251;
                if (2 * v254 > v253)
                  v253 = 2 * v254;
                if (v254 >= 0x3FFFFFFFFFFFFFFFLL)
                  v255 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v255 = v253;
                if (v255)
                  v256 = (unint64_t)operator new(v255);
                else
                  v256 = 0;
                v257 = (char *)(v256 + v255);
                v252[v256] = 10;
                v248 = (uint64_t)&v252[v256 + 1];
                if (v247 == (_BYTE *)v251)
                {
                  v256 += (unint64_t)v252;
                }
                else
                {
                  v258 = &v247[~v251];
                  do
                  {
                    v259 = *--v247;
                    (v258--)[v256] = v259;
                  }
                  while (v247 != (_BYTE *)v251);
                  v247 = (_BYTE *)*a2;
                }
                *a2 = v256;
                a2[1] = v248;
                a2[2] = (unint64_t)v257;
                if (v247)
                  operator delete(v247);
              }
              else
              {
                *v247 = 10;
                v248 = (uint64_t)(v247 + 1);
              }
              a2[1] = v248;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v260 = mach_continuous_time();
                v261 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v260), "ADP", 68, "Ga23_11BuildZxMePowerProdMsg");
                LbsOsaTrace_WriteLog(0x18u, __str, v261, 5, 1);
              }
              return 1;
            }
            else
            {
              a2[1] = (unint64_t)v244;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v249 = mach_continuous_time();
                v250 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PwrProd\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v249), "ADP", 69, "Ga23_11BuildZxMePowerProdMsg", 781);
                LbsOsaTrace_WriteLog(0x18u, __str, v250, 0, 1);
              }
              result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
              if ((_DWORD)result)
                goto LABEL_327;
            }
          }
          else
          {
            a2[1] = (unint64_t)v239;
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v241 = mach_continuous_time();
              v242 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PowerRange\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v241), "ADP", 69, "Ga23_11BuildZxMePowerProdMsg", 772);
              LbsOsaTrace_WriteLog(0x18u, __str, v242, 0, 1);
            }
            result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
            if ((_DWORD)result)
              goto LABEL_327;
          }
          return result;
        }
      }
      operator delete(v218);
      goto LABEL_370;
    }
  }
  a2[1] = *a2;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v207 = mach_continuous_time();
    v208 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Power\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v207), "ADP", 69, "Ga23_11BuildZxMePowerProdMsg", 784);
    LbsOsaTrace_WriteLog(0x18u, __str, v208, 0, 1);
  }
  result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if ((_DWORD)result)
  {
LABEL_327:
    bzero(__str, 0x410uLL);
    v210 = mach_continuous_time();
    v211 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v210), "ADP", 68, "Ga23_11BuildZxMePowerProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v211, 5, 1);
    return 0;
  }
  return result;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_12ParseZxMePowerProdMsg(uint64_t a1, _QWORD *a2, _DWORD *a3, int a4)
{
  uint64_t v7;
  unsigned __int16 v8;
  _BYTE *v9;
  unsigned __int16 v10;
  int IsLoggingAllowed;
  unsigned __int16 v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t v17;
  unsigned __int16 v18;
  unint64_t v19;
  char __str[1040];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v7 = mach_continuous_time();
    v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 68, "Ga23_12ParseZxMePowerProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 5, 1);
  }
  if ((gnssTest::ZxHandler::Ga23_03IsCheckSumValid((uint64_t)a2) & 1) == 0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      goto LABEL_19;
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MePwr Resp\n");
    goto LABEL_18;
  }
  v9 = (_BYTE *)*a2;
  if (a2[1] - *a2 <= 8uLL)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      goto LABEL_19;
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MePwr\n");
    goto LABEL_18;
  }
  if (v9[2] != 84 || v9[3] != 71 || v9[4] != 77)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      goto LABEL_19;
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MesgType\n");
    goto LABEL_18;
  }
  if (v9[8] == 32)
  {
    *a3 = gnssTest::ZxFactoryHandler::Ga23_14MapCorePowerParamsToFramPowerParam(v9[9]);
    IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0);
    if (a4)
    {
      if (!IsLoggingAllowed)
        goto LABEL_27;
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PwrMode PCIe,0x%x\n");
    }
    else
    {
      if (!IsLoggingAllowed)
        goto LABEL_27;
      bzero(__str, 0x410uLL);
      v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PwrMode,0x%x,UART LP,0x%x\n", v19);
    }
    LbsOsaTrace_WriteLog(0x18u, __str, v12, 4, 1);
LABEL_27:
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      return 1;
    bzero(__str, 0x410uLL);
    v17 = mach_continuous_time();
    v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 68, "Ga23_12ParseZxMePowerProdMsg");
    v13 = 1;
    LbsOsaTrace_WriteLog(0x18u, __str, v18, 5, 1);
    return v13;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MePwr status\n");
LABEL_18:
    LbsOsaTrace_WriteLog(0x18u, __str, v10, 0, 1);
  }
LABEL_19:
  v13 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v14 = mach_continuous_time();
    v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "ADP", 68, "Ga23_12ParseZxMePowerProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v15, 5, 1);
    return 0;
  }
  return v13;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_14MapCorePowerParamsToFramPowerParam(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  unsigned __int16 v10;
  char __str[1040];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 68, "Ga23_14MapCorePowerParamsToFramPowerParam");
    LbsOsaTrace_WriteLog(0x18u, __str, v3, 5, 1);
  }
  v4 = 0;
  if ((int)a1 <= 3)
  {
    if ((a1 - 1) >= 3)
    {
      if (!(_DWORD)a1)
        goto LABEL_14;
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if ((_DWORD)a1 == 255)
  {
LABEL_10:
    v4 = 4;
    goto LABEL_11;
  }
  if ((_DWORD)a1 == 4)
  {
    a1 = 4;
    goto LABEL_14;
  }
LABEL_11:
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v5 = mach_continuous_time();
    v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MePwrMode,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 87, "Ga23_14MapCorePowerParamsToFramPowerParam", 770, a1);
    LbsOsaTrace_WriteLog(0x18u, __str, v6, 2, 1);
  }
  a1 = v4;
LABEL_14:
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v7 = mach_continuous_time();
    v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PwrMode,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 73, "Ga23_14MapCorePowerParamsToFramPowerParam", a1);
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v9 = mach_continuous_time();
    v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 68, "Ga23_14MapCorePowerParamsToFramPowerParam");
    LbsOsaTrace_WriteLog(0x18u, __str, v10, 5, 1);
  }
  return a1;
}

BOOL gnssTest::ZxFactoryHandler::Ga23_15ParseZxProdModeIndProdMsg(uint64_t a1, _QWORD *a2)
{
  _BYTE *v3;
  int v4;
  _BOOL8 result;
  int IsLoggingAllowed;
  unsigned __int16 v7;
  int v8;
  uint64_t v9;
  unsigned __int16 v10;
  int v11;
  int v12;
  char __str[1040];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if ((gnssTest::ZxHandler::Ga23_03IsCheckSumValid((uint64_t)a2) & 1) == 0)
  {
    IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    result = 0;
    if (!IsLoggingAllowed)
      return result;
    goto LABEL_6;
  }
  v3 = (_BYTE *)*a2;
  if (a2[1] - *a2 <= 8uLL)
  {
    v4 = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    result = 0;
    if (!v4)
      return result;
LABEL_6:
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ProdInd\n");
LABEL_16:
    LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    return 0;
  }
  if (v3[2] != 84 || v3[3] != 66 || v3[4] != 32)
  {
    v11 = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    result = 0;
    if (!v11)
      return result;
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MesgType\n");
    goto LABEL_16;
  }
  if (v3[8] == 32)
  {
    v8 = v3[9];
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ProdInd,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 73, "Ga23_15ParseZxProdModeIndProdMsg", v8);
      LbsOsaTrace_WriteLog(0x18u, __str, v10, 4, 1);
    }
    return v8 == 1;
  }
  else
  {
    v12 = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    result = 0;
    if (v12)
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ProdInd status err\n");
      goto LABEL_16;
    }
  }
  return result;
}

BOOL gnssTest::ZxFactoryHandler::Ga23_16BuildZxPingProdMsg(uint64_t a1, unint64_t *a2, int a3)
{
  uint8x8_t v5;
  uint64_t v6;
  unsigned __int16 v7;
  unint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  char *v17;
  _BYTE *v18;
  char v19;
  unint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  unint64_t v27;
  char *v28;
  _BYTE *v29;
  char v30;
  unint64_t v31;
  _BYTE *v32;
  unint64_t v33;
  _BYTE *v34;
  unint64_t v35;
  unint64_t v36;
  size_t v37;
  unint64_t v38;
  char *v39;
  _BYTE *v40;
  char v41;
  unint64_t v42;
  _BYTE *v43;
  unint64_t v44;
  _BYTE *v45;
  unint64_t v46;
  unint64_t v47;
  size_t v48;
  unint64_t v49;
  char *v50;
  _BYTE *v51;
  char v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  unint64_t v59;
  unint64_t v60;
  size_t v61;
  unint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  unint64_t v65;
  unint64_t v66;
  size_t v67;
  char *v68;
  char *v69;
  _BYTE *v70;
  char v71;
  _BYTE *v72;
  char v73;
  unint64_t v74;
  _BYTE *v75;
  unint64_t v76;
  _BYTE *v77;
  unint64_t v78;
  unint64_t v79;
  size_t v80;
  unint64_t v81;
  char *v82;
  _BYTE *v83;
  char v84;
  unint64_t v85;
  _BYTE *v86;
  unint64_t v87;
  _BYTE *v88;
  unint64_t v89;
  unint64_t v90;
  size_t v91;
  unint64_t v92;
  char *v93;
  _BYTE *v94;
  char v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _BYTE *v99;
  unint64_t v100;
  unint64_t v101;
  size_t v102;
  unint64_t v103;
  char *v104;
  _BYTE *v105;
  char v106;
  char v107;
  unint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned __int16 v112;
  unint64_t v113;
  _BYTE *v114;
  unint64_t v115;
  unint64_t v116;
  size_t v117;
  unint64_t v118;
  char *v119;
  _BYTE *v120;
  char v121;
  uint64_t v122;
  unsigned __int16 v123;
  char __str[1040];
  uint64_t v126;

  v126 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v6 = mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 68, "Ga23_16BuildZxPingProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v7, 5, 1);
  }
  v9 = (_BYTE *)a2[1];
  v8 = a2[2];
  if ((unint64_t)v9 >= v8)
  {
    v11 = *a2;
    v12 = &v9[-*a2];
    v13 = (unint64_t)(v12 + 1);
    if ((uint64_t)(v12 + 1) < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v14 = v8 - v11;
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
      v16 = (unint64_t)operator new(v15);
    else
      v16 = 0;
    v17 = (char *)(v16 + v15);
    v12[v16] = 122;
    v10 = &v12[v16 + 1];
    if (v9 == (_BYTE *)v11)
    {
      v16 += (unint64_t)v12;
    }
    else
    {
      v18 = &v9[~v11];
      do
      {
        v19 = *--v9;
        (v18--)[v16] = v19;
      }
      while (v9 != (_BYTE *)v11);
      v9 = (_BYTE *)*a2;
    }
    *a2 = v16;
    a2[1] = (unint64_t)v10;
    a2[2] = (unint64_t)v17;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v9 = 122;
    v10 = v9 + 1;
  }
  a2[1] = (unint64_t)v10;
  v20 = a2[2];
  if ((unint64_t)v10 < v20)
  {
    *v10 = 120;
    v21 = v10 + 1;
    goto LABEL_39;
  }
  v22 = *a2;
  v23 = &v10[-*a2];
  v24 = (unint64_t)(v23 + 1);
  if ((uint64_t)(v23 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v25 = v20 - v22;
  if (2 * v25 > v24)
    v24 = 2 * v25;
  if (v25 >= 0x3FFFFFFFFFFFFFFFLL)
    v26 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v26 = v24;
  if (v26)
    v27 = (unint64_t)operator new(v26);
  else
    v27 = 0;
  v28 = (char *)(v27 + v26);
  v23[v27] = 120;
  v21 = &v23[v27 + 1];
  if (v10 == (_BYTE *)v22)
  {
    *a2 = (unint64_t)&v23[v27];
    a2[1] = (unint64_t)v21;
    a2[2] = (unint64_t)v28;
LABEL_38:
    operator delete(v10);
    goto LABEL_39;
  }
  v29 = &v10[~v22];
  do
  {
    v30 = *--v10;
    (v29--)[v27] = v30;
  }
  while (v10 != (_BYTE *)v22);
  v10 = (_BYTE *)*a2;
  *a2 = v27;
  a2[1] = (unint64_t)v21;
  a2[2] = (unint64_t)v28;
  if (v10)
    goto LABEL_38;
LABEL_39:
  a2[1] = (unint64_t)v21;
  v31 = a2[2];
  if ((unint64_t)v21 < v31)
  {
    *v21 = 84;
    v32 = v21 + 1;
    goto LABEL_57;
  }
  v33 = *a2;
  v34 = &v21[-*a2];
  v35 = (unint64_t)(v34 + 1);
  if ((uint64_t)(v34 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v36 = v31 - v33;
  if (2 * v36 > v35)
    v35 = 2 * v36;
  if (v36 >= 0x3FFFFFFFFFFFFFFFLL)
    v37 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v37 = v35;
  if (v37)
    v38 = (unint64_t)operator new(v37);
  else
    v38 = 0;
  v39 = (char *)(v38 + v37);
  v34[v38] = 84;
  v32 = &v34[v38 + 1];
  if (v21 == (_BYTE *)v33)
  {
    *a2 = (unint64_t)&v34[v38];
    a2[1] = (unint64_t)v32;
    a2[2] = (unint64_t)v39;
LABEL_56:
    operator delete(v21);
    goto LABEL_57;
  }
  v40 = &v21[~v33];
  do
  {
    v41 = *--v21;
    (v40--)[v38] = v41;
  }
  while (v21 != (_BYTE *)v33);
  v21 = (_BYTE *)*a2;
  *a2 = v38;
  a2[1] = (unint64_t)v32;
  a2[2] = (unint64_t)v39;
  if (v21)
    goto LABEL_56;
LABEL_57:
  a2[1] = (unint64_t)v32;
  v42 = a2[2];
  if ((unint64_t)v32 < v42)
  {
    *v32 = 106;
    v43 = v32 + 1;
    goto LABEL_75;
  }
  v44 = *a2;
  v45 = &v32[-*a2];
  v46 = (unint64_t)(v45 + 1);
  if ((uint64_t)(v45 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v47 = v42 - v44;
  if (2 * v47 > v46)
    v46 = 2 * v47;
  if (v47 >= 0x3FFFFFFFFFFFFFFFLL)
    v48 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v48 = v46;
  if (v48)
    v49 = (unint64_t)operator new(v48);
  else
    v49 = 0;
  v50 = (char *)(v49 + v48);
  v45[v49] = 106;
  v43 = &v45[v49 + 1];
  if (v32 == (_BYTE *)v44)
  {
    *a2 = (unint64_t)&v45[v49];
    a2[1] = (unint64_t)v43;
    a2[2] = (unint64_t)v50;
LABEL_74:
    operator delete(v32);
    goto LABEL_75;
  }
  v51 = &v32[~v44];
  do
  {
    v52 = *--v32;
    (v51--)[v49] = v52;
  }
  while (v32 != (_BYTE *)v44);
  v32 = (_BYTE *)*a2;
  *a2 = v49;
  a2[1] = (unint64_t)v43;
  a2[2] = (unint64_t)v50;
  if (v32)
    goto LABEL_74;
LABEL_75:
  a2[1] = (unint64_t)v43;
  if (a3 == 1)
  {
    v55 = a2[2];
    if ((unint64_t)v43 < v55)
    {
      v54 = 77;
      goto LABEL_81;
    }
    v63 = *a2;
    v64 = &v43[-*a2];
    v65 = (unint64_t)(v64 + 1);
    if ((uint64_t)(v64 + 1) < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v66 = v55 - v63;
    if (2 * v66 > v65)
      v65 = 2 * v66;
    if (v66 >= 0x3FFFFFFFFFFFFFFFLL)
      v67 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v67 = v65;
    if (v67)
      v62 = (unint64_t)operator new(v67);
    else
      v62 = 0;
    v68 = &v64[v62];
    v69 = (char *)(v62 + v67);
    v64[v62] = 77;
    v56 = (uint64_t)&v64[v62 + 1];
    if (v43 != (_BYTE *)v63)
    {
      v72 = &v43[~v63];
      do
      {
        v73 = *--v43;
        (v72--)[v62] = v73;
      }
      while (v43 != (_BYTE *)v63);
LABEL_107:
      v43 = (_BYTE *)*a2;
      *a2 = v62;
      a2[1] = v56;
      a2[2] = (unint64_t)v69;
      if (!v43)
        goto LABEL_111;
      goto LABEL_110;
    }
LABEL_109:
    *a2 = (unint64_t)v68;
    a2[1] = v56;
    a2[2] = (unint64_t)v69;
LABEL_110:
    operator delete(v43);
    goto LABEL_111;
  }
  if (a3)
    goto LABEL_112;
  v53 = a2[2];
  if ((unint64_t)v43 >= v53)
  {
    v57 = *a2;
    v58 = &v43[-*a2];
    v59 = (unint64_t)(v58 + 1);
    if ((uint64_t)(v58 + 1) < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v60 = v53 - v57;
    if (2 * v60 > v59)
      v59 = 2 * v60;
    if (v60 >= 0x3FFFFFFFFFFFFFFFLL)
      v61 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v61 = v59;
    if (v61)
      v62 = (unint64_t)operator new(v61);
    else
      v62 = 0;
    v68 = &v58[v62];
    v69 = (char *)(v62 + v61);
    v58[v62] = 80;
    v56 = (uint64_t)&v58[v62 + 1];
    if (v43 != (_BYTE *)v57)
    {
      v70 = &v43[~v57];
      do
      {
        v71 = *--v43;
        (v70--)[v62] = v71;
      }
      while (v43 != (_BYTE *)v57);
      goto LABEL_107;
    }
    goto LABEL_109;
  }
  v54 = 80;
LABEL_81:
  *v43 = v54;
  v56 = (uint64_t)(v43 + 1);
LABEL_111:
  a2[1] = v56;
  v43 = (_BYTE *)v56;
LABEL_112:
  v74 = a2[2];
  if ((unint64_t)v43 < v74)
  {
    *v43 = 0;
    v75 = v43 + 1;
    goto LABEL_130;
  }
  v76 = *a2;
  v77 = &v43[-*a2];
  v78 = (unint64_t)(v77 + 1);
  if ((uint64_t)(v77 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v79 = v74 - v76;
  if (2 * v79 > v78)
    v78 = 2 * v79;
  if (v79 >= 0x3FFFFFFFFFFFFFFFLL)
    v80 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v80 = v78;
  if (v80)
    v81 = (unint64_t)operator new(v80);
  else
    v81 = 0;
  v82 = (char *)(v81 + v80);
  v77[v81] = 0;
  v75 = &v77[v81 + 1];
  if (v43 == (_BYTE *)v76)
  {
    *a2 = (unint64_t)&v77[v81];
    a2[1] = (unint64_t)v75;
    a2[2] = (unint64_t)v82;
LABEL_129:
    operator delete(v43);
    goto LABEL_130;
  }
  v83 = &v43[~v76];
  do
  {
    v84 = *--v43;
    (v83--)[v81] = v84;
  }
  while (v43 != (_BYTE *)v76);
  v43 = (_BYTE *)*a2;
  *a2 = v81;
  a2[1] = (unint64_t)v75;
  a2[2] = (unint64_t)v82;
  if (v43)
    goto LABEL_129;
LABEL_130:
  a2[1] = (unint64_t)v75;
  v85 = a2[2];
  if ((unint64_t)v75 < v85)
  {
    *v75 = 0;
    v86 = v75 + 1;
    goto LABEL_148;
  }
  v87 = *a2;
  v88 = &v75[-*a2];
  v89 = (unint64_t)(v88 + 1);
  if ((uint64_t)(v88 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v90 = v85 - v87;
  if (2 * v90 > v89)
    v89 = 2 * v90;
  if (v90 >= 0x3FFFFFFFFFFFFFFFLL)
    v91 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v91 = v89;
  if (v91)
    v92 = (unint64_t)operator new(v91);
  else
    v92 = 0;
  v93 = (char *)(v92 + v91);
  v88[v92] = 0;
  v86 = &v88[v92 + 1];
  if (v75 == (_BYTE *)v87)
  {
    *a2 = (unint64_t)&v88[v92];
    a2[1] = (unint64_t)v86;
    a2[2] = (unint64_t)v93;
LABEL_147:
    operator delete(v75);
    goto LABEL_148;
  }
  v94 = &v75[~v87];
  do
  {
    v95 = *--v75;
    (v94--)[v92] = v95;
  }
  while (v75 != (_BYTE *)v87);
  v75 = (_BYTE *)*a2;
  *a2 = v92;
  a2[1] = (unint64_t)v86;
  a2[2] = (unint64_t)v93;
  if (v75)
    goto LABEL_147;
LABEL_148:
  a2[1] = (unint64_t)v86;
  v96 = a2[2];
  if ((unint64_t)v86 < v96)
  {
    *v86 = 0;
    v97 = (uint64_t)(v86 + 1);
    goto LABEL_166;
  }
  v98 = *a2;
  v99 = &v86[-*a2];
  v100 = (unint64_t)(v99 + 1);
  if ((uint64_t)(v99 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v101 = v96 - v98;
  if (2 * v101 > v100)
    v100 = 2 * v101;
  if (v101 >= 0x3FFFFFFFFFFFFFFFLL)
    v102 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v102 = v100;
  if (v102)
    v103 = (unint64_t)operator new(v102);
  else
    v103 = 0;
  v104 = (char *)(v103 + v102);
  v99[v103] = 0;
  v97 = (uint64_t)&v99[v103 + 1];
  if (v86 == (_BYTE *)v98)
  {
    *a2 = (unint64_t)&v99[v103];
    a2[1] = v97;
    a2[2] = (unint64_t)v104;
LABEL_165:
    operator delete(v86);
    goto LABEL_166;
  }
  v105 = &v86[~v98];
  do
  {
    v106 = *--v86;
    (v105--)[v103] = v106;
  }
  while (v86 != (_BYTE *)v98);
  v86 = (_BYTE *)*a2;
  *a2 = v103;
  a2[1] = v97;
  a2[2] = (unint64_t)v104;
  if (v86)
    goto LABEL_165;
LABEL_166:
  a2[1] = v97;
  *(_BYTE *)(*a2 + 5) = 0;
  *(_BYTE *)(*a2 + 6) = 0;
  v5.i32[0] = *(_DWORD *)(*a2 + 2);
  v107 = vaddv_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v5)) + *(_BYTE *)(*a2 + 6);
  if (v107)
  {
    *(_BYTE *)(*a2 + 7) = v107;
    v109 = (_BYTE *)a2[1];
    v108 = a2[2];
    if ((unint64_t)v109 >= v108)
    {
      v113 = *a2;
      v114 = &v109[-*a2];
      v115 = (unint64_t)(v114 + 1);
      if ((uint64_t)(v114 + 1) < 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v116 = v108 - v113;
      if (2 * v116 > v115)
        v115 = 2 * v116;
      if (v116 >= 0x3FFFFFFFFFFFFFFFLL)
        v117 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v117 = v115;
      if (v117)
        v118 = (unint64_t)operator new(v117);
      else
        v118 = 0;
      v119 = (char *)(v118 + v117);
      v114[v118] = 10;
      v110 = (uint64_t)&v114[v118 + 1];
      if (v109 == (_BYTE *)v113)
      {
        v118 += (unint64_t)v114;
      }
      else
      {
        v120 = &v109[~v113];
        do
        {
          v121 = *--v109;
          (v120--)[v118] = v121;
        }
        while (v109 != (_BYTE *)v113);
        v109 = (_BYTE *)*a2;
      }
      *a2 = v118;
      a2[1] = v110;
      a2[2] = (unint64_t)v119;
      if (v109)
        operator delete(v109);
    }
    else
    {
      *v109 = 10;
      v110 = (uint64_t)(v109 + 1);
    }
    a2[1] = v110;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
LABEL_190:
      bzero(__str, 0x410uLL);
      v122 = mach_continuous_time();
      v123 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v122), "ADP", 68, "Ga23_16BuildZxPingProdMsg");
      LbsOsaTrace_WriteLog(0x18u, __str, v123, 5, 1);
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v111 = mach_continuous_time();
      v112 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Ping\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v111), "ADP", 69, "Ga23_16BuildZxPingProdMsg", 781);
      LbsOsaTrace_WriteLog(0x18u, __str, v112, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      goto LABEL_190;
  }
  return v107 != 0;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_21ParseZxPingProdMsg(uint64_t a1, _QWORD *a2, uint64_t a3, char *a4)
{
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int16 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  unsigned __int16 v18;
  uint64_t result;
  uint64_t v20;
  unsigned __int16 v21;
  uint64_t v22;
  unsigned __int16 v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int16 v28;
  uint64_t v29;
  unsigned __int16 v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int16 v38;
  std::string *v39;
  std::string::size_type v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  std::string::size_type v44;
  std::string *v45;
  std::string::size_type v46;
  double v47;
  const char *v48;
  unsigned __int16 v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  std::string::size_type v53;
  std::string *v54;
  std::string::size_type v55;
  std::string *v56;
  std::string::size_type v57;
  std::string *v58;
  std::string::size_type v59;
  std::string *v60;
  std::string::size_type v61;
  std::string *v62;
  std::string::size_type v63;
  std::string *v64;
  std::string::size_type v65;
  std::string *v66;
  std::string::size_type v67;
  double v68;
  std::string *v69;
  unsigned __int16 v70;
  uint64_t v71;
  unsigned __int16 v72;
  char v73;
  uint64_t v74;
  unsigned __int16 v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int16 v83;
  std::string *v84;
  std::string::size_type size;
  std::string *v86;
  std::string::size_type v87;
  double v88;
  const char *v89;
  unsigned __int16 v90;
  std::string *v91;
  std::string::size_type v92;
  std::string *v93;
  std::string::size_type v94;
  std::string *v95;
  std::string::size_type v96;
  std::string *v97;
  std::string::size_type v98;
  std::string *v99;
  std::string::size_type v100;
  std::string *v101;
  std::string::size_type v102;
  std::string *v103;
  std::string::size_type v104;
  std::string *v105;
  std::string::size_type v106;
  double v107;
  std::string *v108;
  unsigned __int16 v109;
  uint64_t v110;
  unsigned __int16 v111;
  uint64_t v112;
  unsigned __int16 v113;
  uint64_t v114;
  unsigned __int16 v115;
  uint64_t v116;
  unsigned __int16 v117;
  uint64_t v118;
  unsigned __int16 v119;
  uint64_t v120;
  unsigned __int16 v121;
  uint64_t v122;
  unsigned __int16 v123;
  uint64_t v124;
  unsigned __int16 v125;
  uint64_t v126;
  unsigned __int16 v127;
  uint64_t v128;
  unsigned __int16 v129;
  uint64_t v130;
  unsigned __int16 v131;
  uint64_t v132;
  unsigned __int16 v133;
  std::string v134;
  _OWORD __s[4];
  std::string __str[43];
  uint64_t v137;

  v137 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v7 = mach_continuous_time();
    v8 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 68, "Ga23_21ParseZxPingProdMsg");
    LbsOsaTrace_WriteLog(0x18u, (char *)__str, v8, 5, 1);
  }
  v9 = *a2;
  if (*(_BYTE *)(*a2 + 2) != 84 || *(_BYTE *)(v9 + 3) != 74)
  {
LABEL_14:
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v17 = mach_continuous_time();
      v18 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx Ping Parse\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 69, "Ga23_21ParseZxPingProdMsg", 770);
      LbsOsaTrace_WriteLog(0x18u, (char *)__str, v18, 0, 1);
    }
    result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if ((_DWORD)result)
      goto LABEL_17;
    return result;
  }
  v10 = *(unsigned __int8 *)(v9 + 4);
  if (v10 == 80)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v22 = mach_continuous_time();
      v23 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "ADP", 68, "Ga23_17ParseZxCpPingProdMsg");
      LbsOsaTrace_WriteLog(0x18u, (char *)__str, v23, 5, 1);
    }
    v25 = a2;
    v24 = *a2;
    v26 = v25[1] - v24;
    if (v26 > 8)
    {
      if (*(_BYTE *)(v24 + 8) == 32)
      {
        memset(__s, 0, 58);
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v74 = mach_continuous_time();
          v75 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v74), "ADP", 68, "Ga23_18ProcessCpPingRsp");
          LbsOsaTrace_WriteLog(0x18u, (char *)__str, v75, 5, 1);
        }
        if ((unsigned __int16)v26 > 0x2Du)
        {
          v76 = *(unsigned __int8 *)(v24 + 9);
          LOBYTE(__s[0]) = v76 & 3;
          BYTE1(__s[0]) = (v76 >> 2) & 3;
          BYTE2(__s[0]) = v76 & 0x10;
          v77 = *(unsigned __int8 *)(v24 + 12);
          BYTE3(__s[0]) = *(_BYTE *)(v24 + 11);
          BYTE4(__s[0]) = v77 & 0xF;
          BYTE5(__s[0]) = v77 & 0x10;
          BYTE6(__s[0]) = v77 >> 7;
          v78 = *(unsigned __int8 *)(v24 + 13);
          BYTE7(__s[0]) = v78 & 0xF;
          BYTE8(__s[0]) = v78 >> 4;
          v79 = *(_DWORD *)(v24 + 14);
          HIDWORD(__s[0]) = *(_DWORD *)(v24 + 17);
          *(_DWORD *)((char *)__s + 9) = v79;
          LOBYTE(__s[1]) = 0;
          *(_DWORD *)((char *)&__s[1] + 1) = *(_DWORD *)(v24 + 21);
          DWORD1(__s[1]) = *(_DWORD *)(v24 + 24);
          BYTE8(__s[1]) = 0;
          v80 = *(_QWORD *)(v24 + 28);
          *(_WORD *)((char *)&__s[2] + 1) = *(unsigned __int8 *)(v24 + 36);
          *(_QWORD *)((char *)&__s[1] + 9) = v80;
          v81 = *(_QWORD *)(v24 + 37);
          *(_WORD *)((char *)&__s[2] + 11) = *(unsigned __int8 *)(v24 + 45);
          *(_QWORD *)((char *)&__s[2] + 3) = v81;
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
          {
            bzero(__str, 0x410uLL);
            v82 = mach_continuous_time();
            v83 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v82), "ADP", 68, "Ga23_18ProcessCpPingRsp");
            LbsOsaTrace_WriteLog(0x18u, (char *)__str, v83, 5, 1);
          }
          std::string::append((std::string *)a3, "CP,");
          std::to_string(__str, BYTE1(__s[0]));
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v84 = __str;
          else
            v84 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
          else
            size = __str[0].__r_.__value_.__l.__size_;
          std::string::append((std::string *)a3, (const std::string::value_type *)v84, size);
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str[0].__r_.__value_.__l.__data_);
          std::string::append((std::string *)a3, ".");
          std::to_string(__str, LOBYTE(__s[0]));
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v86 = __str;
          else
            v86 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v87 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
          else
            v87 = __str[0].__r_.__value_.__l.__size_;
          std::string::append((std::string *)a3, (const std::string::value_type *)v86, v87);
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str[0].__r_.__value_.__l.__data_);
          std::string::append((std::string *)a3, ",");
          std::string::append((std::string *)a3, "FW,");
          std::string::append((std::string *)a3, (const std::string::value_type *)((unint64_t)__s | 9));
          std::string::append((std::string *)a3, ",");
          std::string::append((std::string *)a3, "CPPatch,");
          std::string::append((std::string *)a3, (const std::string::value_type *)&__s[1] + 1);
          std::string::append((std::string *)a3, ",");
          std::string::append((std::string *)a3, "SW_Build_Date,");
          std::string::append((std::string *)a3, (const std::string::value_type *)&__s[1] + 9);
          std::string::append((std::string *)a3, ",");
          std::string::append((std::string *)a3, "SW_Build_Time,");
          std::string::append((std::string *)a3, (const std::string::value_type *)&__s[2] + 3);
          std::string::append((std::string *)a3, ",");
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            v88 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
            if (*(char *)(a3 + 23) >= 0)
              v89 = (const char *)a3;
            else
              v89 = *(const char **)a3;
            v90 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Version,%s\n", (unint64_t)v88, "ADP", 73, "Ga23_17ParseZxCpPingProdMsg", v89);
            LbsOsaTrace_WriteLog(0x18u, (char *)__str, v90, 4, 1);
          }
          memset(&v134, 0, sizeof(v134));
          std::string::append(&v134, "FW,");
          std::string::append(&v134, (const std::string::value_type *)((unint64_t)__s | 9));
          std::string::append(&v134, ",");
          std::string::append(&v134, "CP,");
          std::to_string(__str, BYTE1(__s[0]));
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v91 = __str;
          else
            v91 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v92 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
          else
            v92 = __str[0].__r_.__value_.__l.__size_;
          std::string::append(&v134, (const std::string::value_type *)v91, v92);
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str[0].__r_.__value_.__l.__data_);
          std::string::append(&v134, ".");
          std::to_string(__str, LOBYTE(__s[0]));
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v93 = __str;
          else
            v93 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v94 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
          else
            v94 = __str[0].__r_.__value_.__l.__size_;
          std::string::append(&v134, (const std::string::value_type *)v93, v94);
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str[0].__r_.__value_.__l.__data_);
          std::string::append(&v134, ",");
          std::string::append(&v134, "Patch,");
          std::string::append(&v134, (const std::string::value_type *)&__s[1] + 1);
          std::string::append(&v134, ",");
          std::string::append(&v134, "SW_Build_Date,");
          std::string::append(&v134, (const std::string::value_type *)&__s[1] + 9);
          std::string::append(&v134, ",");
          std::string::append(&v134, "SW_Build_Time,");
          std::string::append(&v134, (const std::string::value_type *)&__s[2] + 3);
          std::string::append(&v134, ",");
          std::string::append(&v134, "v_ChipDash,");
          std::to_string(__str, BYTE8(__s[0]));
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v95 = __str;
          else
            v95 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v96 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
          else
            v96 = __str[0].__r_.__value_.__l.__size_;
          std::string::append(&v134, (const std::string::value_type *)v95, v96);
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str[0].__r_.__value_.__l.__data_);
          std::string::append(&v134, ",");
          std::string::append(&v134, "v_ChipStep,");
          std::to_string(__str, BYTE7(__s[0]));
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v97 = __str;
          else
            v97 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v98 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
          else
            v98 = __str[0].__r_.__value_.__l.__size_;
          std::string::append(&v134, (const std::string::value_type *)v97, v98);
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str[0].__r_.__value_.__l.__data_);
          std::string::append(&v134, ",");
          std::string::append(&v134, "v_ExtProdId,");
          std::to_string(__str, BYTE2(__s[0]));
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v99 = __str;
          else
            v99 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v100 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
          else
            v100 = __str[0].__r_.__value_.__l.__size_;
          std::string::append(&v134, (const std::string::value_type *)v99, v100);
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str[0].__r_.__value_.__l.__data_);
          std::string::append(&v134, ",");
          std::string::append(&v134, "v_IsOTPProg,");
          std::to_string(__str, SBYTE6(__s[0]));
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v101 = __str;
          else
            v101 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v102 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
          else
            v102 = __str[0].__r_.__value_.__l.__size_;
          std::string::append(&v134, (const std::string::value_type *)v101, v102);
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str[0].__r_.__value_.__l.__data_);
          std::string::append(&v134, ",");
          std::string::append(&v134, "v_KeyType,");
          std::to_string(__str, BYTE5(__s[0]));
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v103 = __str;
          else
            v103 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v104 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
          else
            v104 = __str[0].__r_.__value_.__l.__size_;
          std::string::append(&v134, (const std::string::value_type *)v103, v104);
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str[0].__r_.__value_.__l.__data_);
          std::string::append(&v134, ",");
          std::string::append(&v134, "v_ProdType,");
          std::to_string(__str, *(unsigned __int16 *)((char *)__s + 3));
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v105 = __str;
          else
            v105 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v106 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
          else
            v106 = __str[0].__r_.__value_.__l.__size_;
          std::string::append(&v134, (const std::string::value_type *)v105, v106);
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str[0].__r_.__value_.__l.__data_);
          std::string::append(&v134, ",");
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
          {
            bzero(__str, 0x410uLL);
            v107 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
            if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v108 = &v134;
            else
              v108 = (std::string *)v134.__r_.__value_.__r.__words[0];
            v109 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: TestOutput,%s\n", (unint64_t)v107, "ADP", 68, "Ga23_17ParseZxCpPingProdMsg", (const char *)v108);
            LbsOsaTrace_WriteLog(0x18u, (char *)__str, v109, 5, 1);
          }
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
          {
            bzero(__str, 0x410uLL);
            v110 = mach_continuous_time();
            v111 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v110), "ADP", 68, "Ga23_17ParseZxCpPingProdMsg");
            LbsOsaTrace_WriteLog(0x18u, (char *)__str, v111, 5, 1);
          }
          if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v134.__r_.__value_.__l.__data_);
          v73 = 0;
          goto LABEL_252;
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v126 = mach_continuous_time();
          v127 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx CpPingResponse\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v126), "ADP", 69, "Ga23_18ProcessCpPingRsp", 770);
          LbsOsaTrace_WriteLog(0x18u, (char *)__str, v127, 0, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v128 = mach_continuous_time();
          v129 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v128), "ADP", 68, "Ga23_18ProcessCpPingRsp");
          LbsOsaTrace_WriteLog(0x18u, (char *)__str, v129, 5, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v130 = mach_continuous_time();
          v131 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx CpPing Resp\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v130), "ADP", 69, "Ga23_17ParseZxCpPingProdMsg", 257);
          LbsOsaTrace_WriteLog(0x18u, (char *)__str, v131, 0, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
          goto LABEL_280;
      }
      else
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v116 = mach_continuous_time();
          v117 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx Ping CP Status\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v116), "ADP", 69, "Ga23_17ParseZxCpPingProdMsg", 770);
          LbsOsaTrace_WriteLog(0x18u, (char *)__str, v117, 0, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
          goto LABEL_280;
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v27 = mach_continuous_time();
        v28 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx Parse Ping CP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "ADP", 69, "Ga23_17ParseZxCpPingProdMsg", 783);
        LbsOsaTrace_WriteLog(0x18u, (char *)__str, v28, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
LABEL_280:
        bzero(__str, 0x410uLL);
        v132 = mach_continuous_time();
        v133 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v132), "ADP", 68, "Ga23_17ParseZxCpPingProdMsg");
        LbsOsaTrace_WriteLog(0x18u, (char *)__str, v133, 5, 1);
      }
    }
    result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if ((_DWORD)result)
      goto LABEL_17;
    return result;
  }
  if (v10 != 77)
    goto LABEL_14;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v11 = mach_continuous_time();
    v12 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "Ga23_19ParseZxMePingProdMsg");
    LbsOsaTrace_WriteLog(0x18u, (char *)__str, v12, 5, 1);
  }
  v13 = *a2;
  v14 = a2[1] - *a2;
  if (v14 > 8)
  {
    if (*(_BYTE *)(v13 + 8) != 32)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v114 = mach_continuous_time();
        v115 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx MePing Status\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v114), "ADP", 69, "Ga23_19ParseZxMePingProdMsg", 770);
        LbsOsaTrace_WriteLog(0x18u, (char *)__str, v115, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        goto LABEL_270;
      goto LABEL_271;
    }
    memset(__s, 0, 62);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v29 = mach_continuous_time();
      v30 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "ADP", 68, "Ga23_20ProcessMePingRsp");
      LbsOsaTrace_WriteLog(0x18u, (char *)__str, v30, 5, 1);
    }
    if ((unsigned __int16)v14 <= 0x2Du)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v118 = mach_continuous_time();
        v119 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx CpPingResponse\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v118), "ADP", 69, "Ga23_20ProcessMePingRsp", 770);
        LbsOsaTrace_WriteLog(0x18u, (char *)__str, v119, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v120 = mach_continuous_time();
        v121 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v120), "ADP", 68, "Ga23_20ProcessMePingRsp");
        LbsOsaTrace_WriteLog(0x18u, (char *)__str, v121, 5, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v122 = mach_continuous_time();
        v123 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx MePing Resp\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v122), "ADP", 69, "Ga23_19ParseZxMePingProdMsg", 257);
        LbsOsaTrace_WriteLog(0x18u, (char *)__str, v123, 0, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
        goto LABEL_270;
      goto LABEL_271;
    }
    memset_s(__s, 0x3EuLL, 0, 0x3EuLL);
    v31 = *(unsigned __int8 *)(v13 + 9);
    LOBYTE(__s[0]) = v31 & 3;
    BYTE1(__s[0]) = (v31 >> 2) & 3;
    v32 = *(unsigned __int8 *)(v13 + 10);
    BYTE2(__s[0]) = v32 & 0xF;
    BYTE3(__s[0]) = v32 >> 4;
    BYTE11(__s[0]) = *(_BYTE *)(v13 + 11);
    BYTE12(__s[0]) = *(_BYTE *)(v13 + 13);
    v33 = *(_DWORD *)(v13 + 17);
    *(_DWORD *)((char *)__s + 13) = *(_DWORD *)(v13 + 14);
    LODWORD(__s[1]) = v33;
    BYTE4(__s[1]) = 0;
    v34 = *(_DWORD *)(v13 + 21);
    DWORD2(__s[1]) = *(_DWORD *)(v13 + 24);
    *(_DWORD *)((char *)&__s[1] + 5) = v34;
    BYTE12(__s[1]) = 0;
    v35 = *(_QWORD *)(v13 + 28);
    *(_WORD *)((char *)&__s[2] + 5) = *(unsigned __int8 *)(v13 + 36);
    *(_QWORD *)((char *)&__s[1] + 13) = v35;
    v36 = *(_QWORD *)(v13 + 37);
    *(_WORD *)((char *)&__s[2] + 15) = *(unsigned __int8 *)(v13 + 45);
    *(_QWORD *)((char *)&__s[2] + 7) = v36;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v37 = mach_continuous_time();
      v38 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v37), "ADP", 68, "Ga23_20ProcessMePingRsp");
      LbsOsaTrace_WriteLog(0x18u, (char *)__str, v38, 5, 1);
    }
    std::string::append((std::string *)a3, "ME,");
    std::to_string(__str, BYTE1(__s[0]));
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v39 = __str;
    else
      v39 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    else
      v40 = __str[0].__r_.__value_.__l.__size_;
    std::string::append((std::string *)a3, (const std::string::value_type *)v39, v40);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str[0].__r_.__value_.__l.__data_);
    std::string::append((std::string *)a3, ".");
    std::to_string(__str, LOBYTE(__s[0]));
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = __str;
    else
      v41 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    else
      v42 = __str[0].__r_.__value_.__l.__size_;
    std::string::append((std::string *)a3, (const std::string::value_type *)v41, v42);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str[0].__r_.__value_.__l.__data_);
    std::string::append((std::string *)a3, ",");
    std::string::append((std::string *)a3, "BB,");
    std::to_string(__str, BYTE3(__s[0]));
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v43 = __str;
    else
      v43 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v44 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    else
      v44 = __str[0].__r_.__value_.__l.__size_;
    std::string::append((std::string *)a3, (const std::string::value_type *)v43, v44);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str[0].__r_.__value_.__l.__data_);
    std::string::append((std::string *)a3, ".");
    std::to_string(__str, BYTE2(__s[0]));
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = __str;
    else
      v45 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v46 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    else
      v46 = __str[0].__r_.__value_.__l.__size_;
    std::string::append((std::string *)a3, (const std::string::value_type *)v45, v46);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str[0].__r_.__value_.__l.__data_);
    std::string::append((std::string *)a3, ",");
    std::string::append((std::string *)a3, "MEPatch,");
    std::string::append((std::string *)a3, (const std::string::value_type *)&__s[1] + 5);
    std::string::append((std::string *)a3, ",");
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v47 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if (*(char *)(a3 + 23) >= 0)
        v48 = (const char *)a3;
      else
        v48 = *(const char **)a3;
      v49 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Version,%s\n", (unint64_t)v47, "ADP", 73, "Ga23_19ParseZxMePingProdMsg", v48);
      LbsOsaTrace_WriteLog(0x18u, (char *)__str, v49, 4, 1);
    }
    memset(&v134, 0, sizeof(v134));
    std::string::append(&v134, "ME,");
    std::to_string(__str, BYTE1(__s[0]));
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v50 = __str;
    else
      v50 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v51 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    else
      v51 = __str[0].__r_.__value_.__l.__size_;
    std::string::append(&v134, (const std::string::value_type *)v50, v51);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str[0].__r_.__value_.__l.__data_);
    std::string::append(&v134, ".");
    std::to_string(__str, LOBYTE(__s[0]));
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = __str;
    else
      v52 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    else
      v53 = __str[0].__r_.__value_.__l.__size_;
    std::string::append(&v134, (const std::string::value_type *)v52, v53);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str[0].__r_.__value_.__l.__data_);
    std::string::append(&v134, ",");
    std::string::append(&v134, "BB,");
    std::to_string(__str, BYTE3(__s[0]));
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = __str;
    else
      v54 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v55 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    else
      v55 = __str[0].__r_.__value_.__l.__size_;
    std::string::append(&v134, (const std::string::value_type *)v54, v55);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str[0].__r_.__value_.__l.__data_);
    std::string::append(&v134, ".");
    std::to_string(__str, BYTE2(__s[0]));
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v56 = __str;
    else
      v56 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v57 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    else
      v57 = __str[0].__r_.__value_.__l.__size_;
    std::string::append(&v134, (const std::string::value_type *)v56, v57);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str[0].__r_.__value_.__l.__data_);
    std::string::append(&v134, ",");
    std::string::append(&v134, "MMCU,");
    std::to_string(__str, BYTE11(__s[0]));
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v58 = __str;
    else
      v58 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v59 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    else
      v59 = __str[0].__r_.__value_.__l.__size_;
    std::string::append(&v134, (const std::string::value_type *)v58, v59);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str[0].__r_.__value_.__l.__data_);
    std::string::append(&v134, ",");
    std::string::append(&v134, "RF,");
    std::to_string(__str, BYTE12(__s[0]));
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v60 = __str;
    else
      v60 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v61 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    else
      v61 = __str[0].__r_.__value_.__l.__size_;
    std::string::append(&v134, (const std::string::value_type *)v60, v61);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str[0].__r_.__value_.__l.__data_);
    std::string::append(&v134, ",");
    std::string::append(&v134, "v_IsRemovable,");
    std::to_string(__str, SBYTE7(__s[0]));
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v62 = __str;
    else
      v62 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v63 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    else
      v63 = __str[0].__r_.__value_.__l.__size_;
    std::string::append(&v134, (const std::string::value_type *)v62, v63);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str[0].__r_.__value_.__l.__data_);
    std::string::append(&v134, ",");
    std::string::append(&v134, "v_LnaType,");
    std::to_string(__str, BYTE5(__s[0]));
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v64 = __str;
    else
      v64 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v65 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    else
      v65 = __str[0].__r_.__value_.__l.__size_;
    std::string::append(&v134, (const std::string::value_type *)v64, v65);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str[0].__r_.__value_.__l.__data_);
    std::string::append(&v134, ",");
    std::string::append(&v134, "v_XOType,");
    std::to_string(__str, BYTE6(__s[0]));
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v66 = __str;
    else
      v66 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    else
      v67 = __str[0].__r_.__value_.__l.__size_;
    std::string::append(&v134, (const std::string::value_type *)v66, v67);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str[0].__r_.__value_.__l.__data_);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v68 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v69 = &v134;
      else
        v69 = (std::string *)v134.__r_.__value_.__r.__words[0];
      v70 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: TestOutput,%s\n", (unint64_t)v68, "ADP", 68, "Ga23_19ParseZxMePingProdMsg", (const char *)v69);
      LbsOsaTrace_WriteLog(0x18u, (char *)__str, v70, 5, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v71 = mach_continuous_time();
      v72 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v71), "ADP", 68, "Ga23_19ParseZxMePingProdMsg");
      LbsOsaTrace_WriteLog(0x18u, (char *)__str, v72, 5, 1);
    }
    if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v134.__r_.__value_.__l.__data_);
    v73 = 1;
LABEL_252:
    *a4 = v73;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v112 = mach_continuous_time();
      v113 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v112), "ADP", 68, "Ga23_21ParseZxPingProdMsg");
      LbsOsaTrace_WriteLog(0x18u, (char *)__str, v113, 5, 1);
    }
    return 1;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v15 = mach_continuous_time();
    v16 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: #%04hx MePing\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 69, "Ga23_19ParseZxMePingProdMsg", 783);
    LbsOsaTrace_WriteLog(0x18u, (char *)__str, v16, 0, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
LABEL_270:
    bzero(__str, 0x410uLL);
    v124 = mach_continuous_time();
    v125 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v124), "ADP", 68, "Ga23_19ParseZxMePingProdMsg");
    LbsOsaTrace_WriteLog(0x18u, (char *)__str, v125, 5, 1);
  }
LABEL_271:
  result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if ((_DWORD)result)
  {
LABEL_17:
    bzero(__str, 0x410uLL);
    v20 = mach_continuous_time();
    v21 = snprintf((char *)__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 68, "Ga23_21ParseZxPingProdMsg");
    LbsOsaTrace_WriteLog(0x18u, (char *)__str, v21, 5, 1);
    return 0;
  }
  return result;
}

void sub_21E57D6EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_22BuildZxApSignalGpioProdMsg(_BYTE *a1, unint64_t *a2, char a3)
{
  uint64_t v6;
  unsigned __int16 v7;
  unint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  char *v17;
  _BYTE *v18;
  char v19;
  unint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  unint64_t v27;
  char *v28;
  _BYTE *v29;
  char v30;
  unint64_t v31;
  _BYTE *v32;
  unint64_t v33;
  _BYTE *v34;
  unint64_t v35;
  unint64_t v36;
  size_t v37;
  unint64_t v38;
  char *v39;
  _BYTE *v40;
  char v41;
  unint64_t v42;
  _BYTE *v43;
  unint64_t v44;
  _BYTE *v45;
  unint64_t v46;
  unint64_t v47;
  size_t v48;
  unint64_t v49;
  char *v50;
  _BYTE *v51;
  char v52;
  unint64_t v53;
  _BYTE *v54;
  unint64_t v55;
  _BYTE *v56;
  unint64_t v57;
  unint64_t v58;
  size_t v59;
  unint64_t v60;
  char *v61;
  _BYTE *v62;
  char v63;
  unint64_t v64;
  _BYTE *v65;
  unint64_t v66;
  _BYTE *v67;
  unint64_t v68;
  unint64_t v69;
  size_t v70;
  unint64_t v71;
  char *v72;
  _BYTE *v73;
  char v74;
  unint64_t v75;
  _BYTE *v76;
  unint64_t v77;
  _BYTE *v78;
  unint64_t v79;
  unint64_t v80;
  size_t v81;
  unint64_t v82;
  char *v83;
  _BYTE *v84;
  char v85;
  unint64_t v86;
  _BYTE *v87;
  unint64_t v88;
  _BYTE *v89;
  unint64_t v90;
  unint64_t v91;
  size_t v92;
  unint64_t v93;
  char *v94;
  _BYTE *v95;
  char v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  _BYTE *v100;
  unint64_t v101;
  unint64_t v102;
  size_t v103;
  unint64_t v104;
  char *v105;
  _BYTE *v106;
  char v107;
  unint64_t v108;
  uint64_t v109;
  unsigned __int16 v110;
  uint64_t result;
  uint64_t v112;
  unsigned __int16 v113;
  __int16 v114;
  uint64_t v115;
  int v116;
  uint8x8_t v117;
  unint64_t v118;
  _BYTE *v119;
  _BYTE *v120;
  unint64_t v121;
  _BYTE *v122;
  unint64_t v123;
  unint64_t v124;
  size_t v125;
  unint64_t v126;
  char *v127;
  _BYTE *v128;
  char v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  _BYTE *v133;
  unint64_t v134;
  unint64_t v135;
  size_t v136;
  unint64_t v137;
  char *v138;
  _BYTE *v139;
  char v140;
  _BYTE *v141;
  unint64_t v142;
  uint64_t v143;
  unsigned __int16 v144;
  __int16 v145;
  _BYTE *v146;
  char v147;
  unint64_t v148;
  _BYTE *v149;
  uint64_t v150;
  uint64_t v151;
  unsigned __int16 v152;
  unint64_t v153;
  _BYTE *v154;
  unint64_t v155;
  unint64_t v156;
  size_t v157;
  unint64_t v158;
  char *v159;
  _BYTE *v160;
  char v161;
  uint64_t v162;
  unsigned __int16 v163;
  void *__p;
  _BYTE *v165;
  uint64_t v166;
  char __str[1040];
  uint64_t v168;

  v168 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v6 = mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 68, "Ga23_22BuildZxApSignalGpioProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v7, 5, 1);
  }
  v9 = (_BYTE *)a2[1];
  v8 = a2[2];
  if ((unint64_t)v9 >= v8)
  {
    v11 = *a2;
    v12 = &v9[-*a2];
    v13 = (unint64_t)(v12 + 1);
    if ((uint64_t)(v12 + 1) < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v14 = v8 - v11;
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
      v16 = (unint64_t)operator new(v15);
    else
      v16 = 0;
    v17 = (char *)(v16 + v15);
    v12[v16] = 122;
    v10 = &v12[v16 + 1];
    if (v9 == (_BYTE *)v11)
    {
      v16 += (unint64_t)v12;
    }
    else
    {
      v18 = &v9[~v11];
      do
      {
        v19 = *--v9;
        (v18--)[v16] = v19;
      }
      while (v9 != (_BYTE *)v11);
      v9 = (_BYTE *)*a2;
    }
    *a2 = v16;
    a2[1] = (unint64_t)v10;
    a2[2] = (unint64_t)v17;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v9 = 122;
    v10 = v9 + 1;
  }
  a2[1] = (unint64_t)v10;
  v20 = a2[2];
  if ((unint64_t)v10 < v20)
  {
    *v10 = 120;
    v21 = v10 + 1;
    goto LABEL_39;
  }
  v22 = *a2;
  v23 = &v10[-*a2];
  v24 = (unint64_t)(v23 + 1);
  if ((uint64_t)(v23 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v25 = v20 - v22;
  if (2 * v25 > v24)
    v24 = 2 * v25;
  if (v25 >= 0x3FFFFFFFFFFFFFFFLL)
    v26 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v26 = v24;
  if (v26)
    v27 = (unint64_t)operator new(v26);
  else
    v27 = 0;
  v28 = (char *)(v27 + v26);
  v23[v27] = 120;
  v21 = &v23[v27 + 1];
  if (v10 == (_BYTE *)v22)
  {
    *a2 = (unint64_t)&v23[v27];
    a2[1] = (unint64_t)v21;
    a2[2] = (unint64_t)v28;
LABEL_38:
    operator delete(v10);
    goto LABEL_39;
  }
  v29 = &v10[~v22];
  do
  {
    v30 = *--v10;
    (v29--)[v27] = v30;
  }
  while (v10 != (_BYTE *)v22);
  v10 = (_BYTE *)*a2;
  *a2 = v27;
  a2[1] = (unint64_t)v21;
  a2[2] = (unint64_t)v28;
  if (v10)
    goto LABEL_38;
LABEL_39:
  a2[1] = (unint64_t)v21;
  v31 = a2[2];
  if ((unint64_t)v21 < v31)
  {
    *v21 = 84;
    v32 = v21 + 1;
    goto LABEL_57;
  }
  v33 = *a2;
  v34 = &v21[-*a2];
  v35 = (unint64_t)(v34 + 1);
  if ((uint64_t)(v34 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v36 = v31 - v33;
  if (2 * v36 > v35)
    v35 = 2 * v36;
  if (v36 >= 0x3FFFFFFFFFFFFFFFLL)
    v37 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v37 = v35;
  if (v37)
    v38 = (unint64_t)operator new(v37);
  else
    v38 = 0;
  v39 = (char *)(v38 + v37);
  v34[v38] = 84;
  v32 = &v34[v38 + 1];
  if (v21 == (_BYTE *)v33)
  {
    *a2 = (unint64_t)&v34[v38];
    a2[1] = (unint64_t)v32;
    a2[2] = (unint64_t)v39;
LABEL_56:
    operator delete(v21);
    goto LABEL_57;
  }
  v40 = &v21[~v33];
  do
  {
    v41 = *--v21;
    (v40--)[v38] = v41;
  }
  while (v21 != (_BYTE *)v33);
  v21 = (_BYTE *)*a2;
  *a2 = v38;
  a2[1] = (unint64_t)v32;
  a2[2] = (unint64_t)v39;
  if (v21)
    goto LABEL_56;
LABEL_57:
  a2[1] = (unint64_t)v32;
  v42 = a2[2];
  if ((unint64_t)v32 < v42)
  {
    *v32 = 104;
    v43 = v32 + 1;
    goto LABEL_75;
  }
  v44 = *a2;
  v45 = &v32[-*a2];
  v46 = (unint64_t)(v45 + 1);
  if ((uint64_t)(v45 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v47 = v42 - v44;
  if (2 * v47 > v46)
    v46 = 2 * v47;
  if (v47 >= 0x3FFFFFFFFFFFFFFFLL)
    v48 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v48 = v46;
  if (v48)
    v49 = (unint64_t)operator new(v48);
  else
    v49 = 0;
  v50 = (char *)(v49 + v48);
  v45[v49] = 104;
  v43 = &v45[v49 + 1];
  if (v32 == (_BYTE *)v44)
  {
    *a2 = (unint64_t)&v45[v49];
    a2[1] = (unint64_t)v43;
    a2[2] = (unint64_t)v50;
LABEL_74:
    operator delete(v32);
    goto LABEL_75;
  }
  v51 = &v32[~v44];
  do
  {
    v52 = *--v32;
    (v51--)[v49] = v52;
  }
  while (v32 != (_BYTE *)v44);
  v32 = (_BYTE *)*a2;
  *a2 = v49;
  a2[1] = (unint64_t)v43;
  a2[2] = (unint64_t)v50;
  if (v32)
    goto LABEL_74;
LABEL_75:
  a2[1] = (unint64_t)v43;
  v53 = a2[2];
  if ((unint64_t)v43 < v53)
  {
    *v43 = 32;
    v54 = v43 + 1;
    goto LABEL_93;
  }
  v55 = *a2;
  v56 = &v43[-*a2];
  v57 = (unint64_t)(v56 + 1);
  if ((uint64_t)(v56 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v58 = v53 - v55;
  if (2 * v58 > v57)
    v57 = 2 * v58;
  if (v58 >= 0x3FFFFFFFFFFFFFFFLL)
    v59 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v59 = v57;
  if (v59)
    v60 = (unint64_t)operator new(v59);
  else
    v60 = 0;
  v61 = (char *)(v60 + v59);
  v56[v60] = 32;
  v54 = &v56[v60 + 1];
  if (v43 == (_BYTE *)v55)
  {
    *a2 = (unint64_t)&v56[v60];
    a2[1] = (unint64_t)v54;
    a2[2] = (unint64_t)v61;
LABEL_92:
    operator delete(v43);
    goto LABEL_93;
  }
  v62 = &v43[~v55];
  do
  {
    v63 = *--v43;
    (v62--)[v60] = v63;
  }
  while (v43 != (_BYTE *)v55);
  v43 = (_BYTE *)*a2;
  *a2 = v60;
  a2[1] = (unint64_t)v54;
  a2[2] = (unint64_t)v61;
  if (v43)
    goto LABEL_92;
LABEL_93:
  a2[1] = (unint64_t)v54;
  v64 = a2[2];
  if ((unint64_t)v54 < v64)
  {
    *v54 = 0;
    v65 = v54 + 1;
    goto LABEL_111;
  }
  v66 = *a2;
  v67 = &v54[-*a2];
  v68 = (unint64_t)(v67 + 1);
  if ((uint64_t)(v67 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v69 = v64 - v66;
  if (2 * v69 > v68)
    v68 = 2 * v69;
  if (v69 >= 0x3FFFFFFFFFFFFFFFLL)
    v70 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v70 = v68;
  if (v70)
    v71 = (unint64_t)operator new(v70);
  else
    v71 = 0;
  v72 = (char *)(v71 + v70);
  v67[v71] = 0;
  v65 = &v67[v71 + 1];
  if (v54 == (_BYTE *)v66)
  {
    *a2 = (unint64_t)&v67[v71];
    a2[1] = (unint64_t)v65;
    a2[2] = (unint64_t)v72;
LABEL_110:
    operator delete(v54);
    goto LABEL_111;
  }
  v73 = &v54[~v66];
  do
  {
    v74 = *--v54;
    (v73--)[v71] = v74;
  }
  while (v54 != (_BYTE *)v66);
  v54 = (_BYTE *)*a2;
  *a2 = v71;
  a2[1] = (unint64_t)v65;
  a2[2] = (unint64_t)v72;
  if (v54)
    goto LABEL_110;
LABEL_111:
  a2[1] = (unint64_t)v65;
  v75 = a2[2];
  if ((unint64_t)v65 < v75)
  {
    *v65 = 0;
    v76 = v65 + 1;
    goto LABEL_129;
  }
  v77 = *a2;
  v78 = &v65[-*a2];
  v79 = (unint64_t)(v78 + 1);
  if ((uint64_t)(v78 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v80 = v75 - v77;
  if (2 * v80 > v79)
    v79 = 2 * v80;
  if (v80 >= 0x3FFFFFFFFFFFFFFFLL)
    v81 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v81 = v79;
  if (v81)
    v82 = (unint64_t)operator new(v81);
  else
    v82 = 0;
  v83 = (char *)(v82 + v81);
  v78[v82] = 0;
  v76 = &v78[v82 + 1];
  if (v65 == (_BYTE *)v77)
  {
    *a2 = (unint64_t)&v78[v82];
    a2[1] = (unint64_t)v76;
    a2[2] = (unint64_t)v83;
LABEL_128:
    operator delete(v65);
    goto LABEL_129;
  }
  v84 = &v65[~v77];
  do
  {
    v85 = *--v65;
    (v84--)[v82] = v85;
  }
  while (v65 != (_BYTE *)v77);
  v65 = (_BYTE *)*a2;
  *a2 = v82;
  a2[1] = (unint64_t)v76;
  a2[2] = (unint64_t)v83;
  if (v65)
    goto LABEL_128;
LABEL_129:
  a2[1] = (unint64_t)v76;
  v86 = a2[2];
  if ((unint64_t)v76 < v86)
  {
    *v76 = 0;
    v87 = v76 + 1;
    goto LABEL_147;
  }
  v88 = *a2;
  v89 = &v76[-*a2];
  v90 = (unint64_t)(v89 + 1);
  if ((uint64_t)(v89 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v91 = v86 - v88;
  if (2 * v91 > v90)
    v90 = 2 * v91;
  if (v91 >= 0x3FFFFFFFFFFFFFFFLL)
    v92 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v92 = v90;
  if (v92)
    v93 = (unint64_t)operator new(v92);
  else
    v93 = 0;
  v94 = (char *)(v93 + v92);
  v89[v93] = 0;
  v87 = &v89[v93 + 1];
  if (v76 == (_BYTE *)v88)
  {
    *a2 = (unint64_t)&v89[v93];
    a2[1] = (unint64_t)v87;
    a2[2] = (unint64_t)v94;
LABEL_146:
    operator delete(v76);
    goto LABEL_147;
  }
  v95 = &v76[~v88];
  do
  {
    v96 = *--v76;
    (v95--)[v93] = v96;
  }
  while (v76 != (_BYTE *)v88);
  v76 = (_BYTE *)*a2;
  *a2 = v93;
  a2[1] = (unint64_t)v87;
  a2[2] = (unint64_t)v94;
  if (v76)
    goto LABEL_146;
LABEL_147:
  a2[1] = (unint64_t)v87;
  v97 = a2[2];
  if ((unint64_t)v87 < v97)
  {
    *v87 = a3;
    v98 = (uint64_t)(v87 + 1);
    goto LABEL_165;
  }
  v99 = *a2;
  v100 = &v87[-*a2];
  v101 = (unint64_t)(v100 + 1);
  if ((uint64_t)(v100 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v102 = v97 - v99;
  if (2 * v102 > v101)
    v101 = 2 * v102;
  if (v102 >= 0x3FFFFFFFFFFFFFFFLL)
    v103 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v103 = v101;
  if (v103)
    v104 = (unint64_t)operator new(v103);
  else
    v104 = 0;
  v105 = (char *)(v104 + v103);
  v100[v104] = a3;
  v98 = (uint64_t)&v100[v104 + 1];
  if (v87 == (_BYTE *)v99)
  {
    *a2 = (unint64_t)&v100[v104];
    a2[1] = v98;
    a2[2] = (unint64_t)v105;
LABEL_164:
    operator delete(v87);
    goto LABEL_165;
  }
  v106 = &v87[~v99];
  do
  {
    v107 = *--v87;
    (v106--)[v104] = v107;
  }
  while (v87 != (_BYTE *)v99);
  v87 = (_BYTE *)*a2;
  *a2 = v104;
  a2[1] = v98;
  a2[2] = (unint64_t)v105;
  if (v87)
    goto LABEL_164;
LABEL_165:
  a2[1] = v98;
  *a1 = a3;
  v165 = 0;
  v166 = 0;
  __p = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (const void *)*a2, v98, v98 - *a2);
  v108 = ~*a2 + a2[1];
  if (v108 < 8 || v108 > 0x7FF || v165 - (_BYTE *)__p <= v108)
  {
    if (__p)
    {
      v165 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v114 = 0;
    v115 = 8;
    v116 = 8;
    do
    {
      v114 += *((unsigned __int8 *)__p + v115);
      v115 = ++v116;
    }
    while (v108 >= v116);
    v165 = __p;
    operator delete(__p);
    if (v114 != -1)
    {
      v119 = (_BYTE *)a2[1];
      v118 = a2[2];
      if ((unint64_t)v119 >= v118)
      {
        v121 = *a2;
        v122 = &v119[-*a2];
        v123 = (unint64_t)(v122 + 1);
        if ((uint64_t)(v122 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v124 = v118 - v121;
        if (2 * v124 > v123)
          v123 = 2 * v124;
        if (v124 >= 0x3FFFFFFFFFFFFFFFLL)
          v125 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v125 = v123;
        if (v125)
          v126 = (unint64_t)operator new(v125);
        else
          v126 = 0;
        v127 = (char *)(v126 + v125);
        v122[v126] = v114;
        v120 = &v122[v126 + 1];
        if (v119 == (_BYTE *)v121)
        {
          v126 += (unint64_t)v122;
        }
        else
        {
          v128 = &v119[~v121];
          do
          {
            v129 = *--v119;
            (v128--)[v126] = v129;
          }
          while (v119 != (_BYTE *)v121);
          v119 = (_BYTE *)*a2;
        }
        *a2 = v126;
        a2[1] = (unint64_t)v120;
        a2[2] = (unint64_t)v127;
        if (v119)
          operator delete(v119);
      }
      else
      {
        *v119 = v114;
        v120 = v119 + 1;
      }
      a2[1] = (unint64_t)v120;
      v130 = a2[2];
      if ((unint64_t)v120 < v130)
      {
        *v120 = HIBYTE(v114);
        v131 = (uint64_t)(v120 + 1);
        goto LABEL_214;
      }
      v132 = *a2;
      v133 = &v120[-*a2];
      v134 = (unint64_t)(v133 + 1);
      if ((uint64_t)(v133 + 1) < 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v135 = v130 - v132;
      if (2 * v135 > v134)
        v134 = 2 * v135;
      if (v135 >= 0x3FFFFFFFFFFFFFFFLL)
        v136 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v136 = v134;
      if (v136)
        v137 = (unint64_t)operator new(v136);
      else
        v137 = 0;
      v138 = (char *)(v137 + v136);
      v133[v137] = HIBYTE(v114);
      v131 = (uint64_t)&v133[v137 + 1];
      if (v120 == (_BYTE *)v132)
      {
        *a2 = (unint64_t)&v133[v137];
        a2[1] = v131;
        a2[2] = (unint64_t)v138;
      }
      else
      {
        v139 = &v120[~v132];
        do
        {
          v140 = *--v120;
          (v139--)[v137] = v140;
        }
        while (v120 != (_BYTE *)v132);
        v120 = (_BYTE *)*a2;
        *a2 = v137;
        a2[1] = v131;
        a2[2] = (unint64_t)v138;
        if (!v120)
        {
LABEL_214:
          a2[1] = v131;
          v141 = (_BYTE *)*a2;
          v142 = v131 - *a2;
          if (v142 < 0x10000)
          {
            v145 = v142 - 8;
            v141[5] = v145;
            *(_BYTE *)(*a2 + 6) = HIBYTE(v145);
            v146 = (_BYTE *)*a2;
            v117.i32[0] = *(_DWORD *)(*a2 + 2);
            v147 = vaddv_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v117)) + *(_BYTE *)(*a2 + 6);
            if (v147)
            {
              v146[7] = v147;
              v149 = (_BYTE *)a2[1];
              v148 = a2[2];
              if ((unint64_t)v149 >= v148)
              {
                v153 = *a2;
                v154 = &v149[-*a2];
                v155 = (unint64_t)(v154 + 1);
                if ((uint64_t)(v154 + 1) < 0)
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                v156 = v148 - v153;
                if (2 * v156 > v155)
                  v155 = 2 * v156;
                if (v156 >= 0x3FFFFFFFFFFFFFFFLL)
                  v157 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v157 = v155;
                if (v157)
                  v158 = (unint64_t)operator new(v157);
                else
                  v158 = 0;
                v159 = (char *)(v158 + v157);
                v154[v158] = 10;
                v150 = (uint64_t)&v154[v158 + 1];
                if (v149 == (_BYTE *)v153)
                {
                  v158 += (unint64_t)v154;
                }
                else
                {
                  v160 = &v149[~v153];
                  do
                  {
                    v161 = *--v149;
                    (v160--)[v158] = v161;
                  }
                  while (v149 != (_BYTE *)v153);
                  v149 = (_BYTE *)*a2;
                }
                *a2 = v158;
                a2[1] = v150;
                a2[2] = (unint64_t)v159;
                if (v149)
                  operator delete(v149);
              }
              else
              {
                *v149 = 10;
                v150 = (uint64_t)(v149 + 1);
              }
              a2[1] = v150;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v162 = mach_continuous_time();
                v163 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v162), "ADP", 68, "Ga23_22BuildZxApSignalGpioProdMsg");
                LbsOsaTrace_WriteLog(0x18u, __str, v163, 5, 1);
              }
              return 1;
            }
            else
            {
              a2[1] = (unint64_t)v146;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v151 = mach_continuous_time();
                v152 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GpioProd\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v151), "ADP", 69, "Ga23_22BuildZxApSignalGpioProdMsg", 781);
                LbsOsaTrace_WriteLog(0x18u, __str, v152, 0, 1);
              }
              result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
              if ((_DWORD)result)
                goto LABEL_171;
            }
          }
          else
          {
            a2[1] = (unint64_t)v141;
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v143 = mach_continuous_time();
              v144 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GpioRange\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v143), "ADP", 69, "Ga23_22BuildZxApSignalGpioProdMsg", 772);
              LbsOsaTrace_WriteLog(0x18u, __str, v144, 0, 1);
            }
            result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
            if ((_DWORD)result)
              goto LABEL_171;
          }
          return result;
        }
      }
      operator delete(v120);
      goto LABEL_214;
    }
  }
  a2[1] = *a2;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v109 = mach_continuous_time();
    v110 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GpioProd\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v109), "ADP", 69, "Ga23_22BuildZxApSignalGpioProdMsg", 784);
    LbsOsaTrace_WriteLog(0x18u, __str, v110, 0, 1);
  }
  result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if ((_DWORD)result)
  {
LABEL_171:
    bzero(__str, 0x410uLL);
    v112 = mach_continuous_time();
    v113 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v112), "ADP", 68, "Ga23_22BuildZxApSignalGpioProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v113, 5, 1);
    return 0;
  }
  return result;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_23ParseZxApSignalGpioProdMsg(unsigned __int8 *a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned __int16 v5;
  _BYTE *v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  char __str[1040];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v4 = mach_continuous_time();
    v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 68, "Ga23_23ParseZxApSignalGpioProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 5, 1);
  }
  if ((gnssTest::ZxHandler::Ga23_03IsCheckSumValid((uint64_t)a2) & 1) == 0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      goto LABEL_21;
    goto LABEL_8;
  }
  v6 = (_BYTE *)*a2;
  if (a2[1] - *a2 <= 8uLL)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      goto LABEL_21;
LABEL_8:
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GpioProd\n");
LABEL_9:
    LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
    goto LABEL_21;
  }
  if (v6[2] == 84 && v6[3] == 72 && v6[4] == 32)
  {
    if (v6[8] == 32)
    {
      if (v6[9] == *a1)
      {
        if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
          return 1;
        bzero(__str, 0x410uLL);
        v8 = mach_continuous_time();
        v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "Ga23_23ParseZxApSignalGpioProdMsg");
        v10 = 1;
        LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
        return v10;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Time mismatch\n");
        goto LABEL_9;
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GpioProd status\n");
      goto LABEL_9;
    }
  }
LABEL_21:
  v10 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v11 = mach_continuous_time();
    v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 68, "Ga23_23ParseZxApSignalGpioProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v12, 5, 1);
    return 0;
  }
  return v10;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_24BuildZxTimeMarkProdMsg(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;
  unsigned __int16 v4;
  unint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  _BYTE *v15;
  char v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  unint64_t v24;
  char *v25;
  _BYTE *v26;
  char v27;
  unint64_t v28;
  _BYTE *v29;
  unint64_t v30;
  _BYTE *v31;
  unint64_t v32;
  unint64_t v33;
  size_t v34;
  unint64_t v35;
  char *v36;
  _BYTE *v37;
  char v38;
  unint64_t v39;
  _BYTE *v40;
  unint64_t v41;
  _BYTE *v42;
  unint64_t v43;
  unint64_t v44;
  size_t v45;
  unint64_t v46;
  char *v47;
  _BYTE *v48;
  char v49;
  unint64_t v50;
  _BYTE *v51;
  unint64_t v52;
  _BYTE *v53;
  unint64_t v54;
  unint64_t v55;
  size_t v56;
  unint64_t v57;
  char *v58;
  _BYTE *v59;
  char v60;
  unint64_t v61;
  _BYTE *v62;
  unint64_t v63;
  _BYTE *v64;
  unint64_t v65;
  unint64_t v66;
  size_t v67;
  unint64_t v68;
  char *v69;
  _BYTE *v70;
  char v71;
  unint64_t v72;
  _BYTE *v73;
  unint64_t v74;
  _BYTE *v75;
  unint64_t v76;
  unint64_t v77;
  size_t v78;
  unint64_t v79;
  char *v80;
  _BYTE *v81;
  char v82;
  unint64_t v83;
  _BYTE *v84;
  unint64_t v85;
  _BYTE *v86;
  unint64_t v87;
  unint64_t v88;
  size_t v89;
  unint64_t v90;
  char *v91;
  _BYTE *v92;
  char v93;
  unint64_t v94;
  _BYTE *v95;
  unint64_t v96;
  _BYTE *v97;
  unint64_t v98;
  unint64_t v99;
  size_t v100;
  unint64_t v101;
  char *v102;
  _BYTE *v103;
  char v104;
  unint64_t v105;
  _BYTE *v106;
  unint64_t v107;
  _BYTE *v108;
  unint64_t v109;
  unint64_t v110;
  size_t v111;
  unint64_t v112;
  char *v113;
  _BYTE *v114;
  char v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _BYTE *v119;
  unint64_t v120;
  unint64_t v121;
  size_t v122;
  unint64_t v123;
  char *v124;
  _BYTE *v125;
  char v126;
  unint64_t v127;
  uint64_t v128;
  unsigned __int16 v129;
  uint64_t result;
  uint64_t v131;
  unsigned __int16 v132;
  __int16 v133;
  uint64_t v134;
  int v135;
  uint8x8_t v136;
  unint64_t v137;
  _BYTE *v138;
  _BYTE *v139;
  unint64_t v140;
  _BYTE *v141;
  unint64_t v142;
  unint64_t v143;
  size_t v144;
  unint64_t v145;
  char *v146;
  _BYTE *v147;
  char v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  _BYTE *v152;
  unint64_t v153;
  unint64_t v154;
  size_t v155;
  unint64_t v156;
  char *v157;
  _BYTE *v158;
  char v159;
  _BYTE *v160;
  unint64_t v161;
  uint64_t v162;
  unsigned __int16 v163;
  __int16 v164;
  _BYTE *v165;
  char v166;
  unint64_t v167;
  _BYTE *v168;
  uint64_t v169;
  uint64_t v170;
  unsigned __int16 v171;
  unint64_t v172;
  _BYTE *v173;
  unint64_t v174;
  unint64_t v175;
  size_t v176;
  unint64_t v177;
  char *v178;
  _BYTE *v179;
  char v180;
  uint64_t v181;
  unsigned __int16 v182;
  void *__p;
  _BYTE *v184;
  uint64_t v185;
  char __str[1040];
  uint64_t v187;

  v187 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v3 = mach_continuous_time();
    v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga23_24BuildZxTimeMarkProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  v6 = (_BYTE *)a2[1];
  v5 = a2[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *a2;
    v9 = &v6[-*a2];
    v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v11 = v5 - v8;
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (unint64_t)operator new(v12);
    else
      v13 = 0;
    v14 = (char *)(v13 + v12);
    v9[v13] = 122;
    v7 = &v9[v13 + 1];
    if (v6 == (_BYTE *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      v15 = &v6[~v8];
      do
      {
        v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (_BYTE *)v8);
      v6 = (_BYTE *)*a2;
    }
    *a2 = v13;
    a2[1] = (unint64_t)v7;
    a2[2] = (unint64_t)v14;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = 122;
    v7 = v6 + 1;
  }
  a2[1] = (unint64_t)v7;
  v17 = a2[2];
  if ((unint64_t)v7 < v17)
  {
    *v7 = 120;
    v18 = v7 + 1;
    goto LABEL_39;
  }
  v19 = *a2;
  v20 = &v7[-*a2];
  v21 = (unint64_t)(v20 + 1);
  if ((uint64_t)(v20 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v22 = v17 - v19;
  if (2 * v22 > v21)
    v21 = 2 * v22;
  if (v22 >= 0x3FFFFFFFFFFFFFFFLL)
    v23 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v23 = v21;
  if (v23)
    v24 = (unint64_t)operator new(v23);
  else
    v24 = 0;
  v25 = (char *)(v24 + v23);
  v20[v24] = 120;
  v18 = &v20[v24 + 1];
  if (v7 == (_BYTE *)v19)
  {
    *a2 = (unint64_t)&v20[v24];
    a2[1] = (unint64_t)v18;
    a2[2] = (unint64_t)v25;
LABEL_38:
    operator delete(v7);
    goto LABEL_39;
  }
  v26 = &v7[~v19];
  do
  {
    v27 = *--v7;
    (v26--)[v24] = v27;
  }
  while (v7 != (_BYTE *)v19);
  v7 = (_BYTE *)*a2;
  *a2 = v24;
  a2[1] = (unint64_t)v18;
  a2[2] = (unint64_t)v25;
  if (v7)
    goto LABEL_38;
LABEL_39:
  a2[1] = (unint64_t)v18;
  v28 = a2[2];
  if ((unint64_t)v18 < v28)
  {
    *v18 = 84;
    v29 = v18 + 1;
    goto LABEL_57;
  }
  v30 = *a2;
  v31 = &v18[-*a2];
  v32 = (unint64_t)(v31 + 1);
  if ((uint64_t)(v31 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v33 = v28 - v30;
  if (2 * v33 > v32)
    v32 = 2 * v33;
  if (v33 >= 0x3FFFFFFFFFFFFFFFLL)
    v34 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v34 = v32;
  if (v34)
    v35 = (unint64_t)operator new(v34);
  else
    v35 = 0;
  v36 = (char *)(v35 + v34);
  v31[v35] = 84;
  v29 = &v31[v35 + 1];
  if (v18 == (_BYTE *)v30)
  {
    *a2 = (unint64_t)&v31[v35];
    a2[1] = (unint64_t)v29;
    a2[2] = (unint64_t)v36;
LABEL_56:
    operator delete(v18);
    goto LABEL_57;
  }
  v37 = &v18[~v30];
  do
  {
    v38 = *--v18;
    (v37--)[v35] = v38;
  }
  while (v18 != (_BYTE *)v30);
  v18 = (_BYTE *)*a2;
  *a2 = v35;
  a2[1] = (unint64_t)v29;
  a2[2] = (unint64_t)v36;
  if (v18)
    goto LABEL_56;
LABEL_57:
  a2[1] = (unint64_t)v29;
  v39 = a2[2];
  if ((unint64_t)v29 < v39)
  {
    *v29 = 108;
    v40 = v29 + 1;
    goto LABEL_75;
  }
  v41 = *a2;
  v42 = &v29[-*a2];
  v43 = (unint64_t)(v42 + 1);
  if ((uint64_t)(v42 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v44 = v39 - v41;
  if (2 * v44 > v43)
    v43 = 2 * v44;
  if (v44 >= 0x3FFFFFFFFFFFFFFFLL)
    v45 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v45 = v43;
  if (v45)
    v46 = (unint64_t)operator new(v45);
  else
    v46 = 0;
  v47 = (char *)(v46 + v45);
  v42[v46] = 108;
  v40 = &v42[v46 + 1];
  if (v29 == (_BYTE *)v41)
  {
    *a2 = (unint64_t)&v42[v46];
    a2[1] = (unint64_t)v40;
    a2[2] = (unint64_t)v47;
LABEL_74:
    operator delete(v29);
    goto LABEL_75;
  }
  v48 = &v29[~v41];
  do
  {
    v49 = *--v29;
    (v48--)[v46] = v49;
  }
  while (v29 != (_BYTE *)v41);
  v29 = (_BYTE *)*a2;
  *a2 = v46;
  a2[1] = (unint64_t)v40;
  a2[2] = (unint64_t)v47;
  if (v29)
    goto LABEL_74;
LABEL_75:
  a2[1] = (unint64_t)v40;
  v50 = a2[2];
  if ((unint64_t)v40 < v50)
  {
    *v40 = 77;
    v51 = v40 + 1;
    goto LABEL_93;
  }
  v52 = *a2;
  v53 = &v40[-*a2];
  v54 = (unint64_t)(v53 + 1);
  if ((uint64_t)(v53 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v55 = v50 - v52;
  if (2 * v55 > v54)
    v54 = 2 * v55;
  if (v55 >= 0x3FFFFFFFFFFFFFFFLL)
    v56 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v56 = v54;
  if (v56)
    v57 = (unint64_t)operator new(v56);
  else
    v57 = 0;
  v58 = (char *)(v57 + v56);
  v53[v57] = 77;
  v51 = &v53[v57 + 1];
  if (v40 == (_BYTE *)v52)
  {
    *a2 = (unint64_t)&v53[v57];
    a2[1] = (unint64_t)v51;
    a2[2] = (unint64_t)v58;
LABEL_92:
    operator delete(v40);
    goto LABEL_93;
  }
  v59 = &v40[~v52];
  do
  {
    v60 = *--v40;
    (v59--)[v57] = v60;
  }
  while (v40 != (_BYTE *)v52);
  v40 = (_BYTE *)*a2;
  *a2 = v57;
  a2[1] = (unint64_t)v51;
  a2[2] = (unint64_t)v58;
  if (v40)
    goto LABEL_92;
LABEL_93:
  a2[1] = (unint64_t)v51;
  v61 = a2[2];
  if ((unint64_t)v51 < v61)
  {
    *v51 = 0;
    v62 = v51 + 1;
    goto LABEL_111;
  }
  v63 = *a2;
  v64 = &v51[-*a2];
  v65 = (unint64_t)(v64 + 1);
  if ((uint64_t)(v64 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v66 = v61 - v63;
  if (2 * v66 > v65)
    v65 = 2 * v66;
  if (v66 >= 0x3FFFFFFFFFFFFFFFLL)
    v67 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v67 = v65;
  if (v67)
    v68 = (unint64_t)operator new(v67);
  else
    v68 = 0;
  v69 = (char *)(v68 + v67);
  v64[v68] = 0;
  v62 = &v64[v68 + 1];
  if (v51 == (_BYTE *)v63)
  {
    *a2 = (unint64_t)&v64[v68];
    a2[1] = (unint64_t)v62;
    a2[2] = (unint64_t)v69;
LABEL_110:
    operator delete(v51);
    goto LABEL_111;
  }
  v70 = &v51[~v63];
  do
  {
    v71 = *--v51;
    (v70--)[v68] = v71;
  }
  while (v51 != (_BYTE *)v63);
  v51 = (_BYTE *)*a2;
  *a2 = v68;
  a2[1] = (unint64_t)v62;
  a2[2] = (unint64_t)v69;
  if (v51)
    goto LABEL_110;
LABEL_111:
  a2[1] = (unint64_t)v62;
  v72 = a2[2];
  if ((unint64_t)v62 < v72)
  {
    *v62 = 0;
    v73 = v62 + 1;
    goto LABEL_129;
  }
  v74 = *a2;
  v75 = &v62[-*a2];
  v76 = (unint64_t)(v75 + 1);
  if ((uint64_t)(v75 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v77 = v72 - v74;
  if (2 * v77 > v76)
    v76 = 2 * v77;
  if (v77 >= 0x3FFFFFFFFFFFFFFFLL)
    v78 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v78 = v76;
  if (v78)
    v79 = (unint64_t)operator new(v78);
  else
    v79 = 0;
  v80 = (char *)(v79 + v78);
  v75[v79] = 0;
  v73 = &v75[v79 + 1];
  if (v62 == (_BYTE *)v74)
  {
    *a2 = (unint64_t)&v75[v79];
    a2[1] = (unint64_t)v73;
    a2[2] = (unint64_t)v80;
LABEL_128:
    operator delete(v62);
    goto LABEL_129;
  }
  v81 = &v62[~v74];
  do
  {
    v82 = *--v62;
    (v81--)[v79] = v82;
  }
  while (v62 != (_BYTE *)v74);
  v62 = (_BYTE *)*a2;
  *a2 = v79;
  a2[1] = (unint64_t)v73;
  a2[2] = (unint64_t)v80;
  if (v62)
    goto LABEL_128;
LABEL_129:
  a2[1] = (unint64_t)v73;
  v83 = a2[2];
  if ((unint64_t)v73 < v83)
  {
    *v73 = 0;
    v84 = v73 + 1;
    goto LABEL_147;
  }
  v85 = *a2;
  v86 = &v73[-*a2];
  v87 = (unint64_t)(v86 + 1);
  if ((uint64_t)(v86 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v88 = v83 - v85;
  if (2 * v88 > v87)
    v87 = 2 * v88;
  if (v88 >= 0x3FFFFFFFFFFFFFFFLL)
    v89 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v89 = v87;
  if (v89)
    v90 = (unint64_t)operator new(v89);
  else
    v90 = 0;
  v91 = (char *)(v90 + v89);
  v86[v90] = 0;
  v84 = &v86[v90 + 1];
  if (v73 == (_BYTE *)v85)
  {
    *a2 = (unint64_t)&v86[v90];
    a2[1] = (unint64_t)v84;
    a2[2] = (unint64_t)v91;
LABEL_146:
    operator delete(v73);
    goto LABEL_147;
  }
  v92 = &v73[~v85];
  do
  {
    v93 = *--v73;
    (v92--)[v90] = v93;
  }
  while (v73 != (_BYTE *)v85);
  v73 = (_BYTE *)*a2;
  *a2 = v90;
  a2[1] = (unint64_t)v84;
  a2[2] = (unint64_t)v91;
  if (v73)
    goto LABEL_146;
LABEL_147:
  a2[1] = (unint64_t)v84;
  v94 = a2[2];
  if ((unint64_t)v84 < v94)
  {
    *v84 = 0;
    v95 = v84 + 1;
    goto LABEL_165;
  }
  v96 = *a2;
  v97 = &v84[-*a2];
  v98 = (unint64_t)(v97 + 1);
  if ((uint64_t)(v97 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v99 = v94 - v96;
  if (2 * v99 > v98)
    v98 = 2 * v99;
  if (v99 >= 0x3FFFFFFFFFFFFFFFLL)
    v100 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v100 = v98;
  if (v100)
    v101 = (unint64_t)operator new(v100);
  else
    v101 = 0;
  v102 = (char *)(v101 + v100);
  v97[v101] = 0;
  v95 = &v97[v101 + 1];
  if (v84 == (_BYTE *)v96)
  {
    *a2 = (unint64_t)&v97[v101];
    a2[1] = (unint64_t)v95;
    a2[2] = (unint64_t)v102;
LABEL_164:
    operator delete(v84);
    goto LABEL_165;
  }
  v103 = &v84[~v96];
  do
  {
    v104 = *--v84;
    (v103--)[v101] = v104;
  }
  while (v84 != (_BYTE *)v96);
  v84 = (_BYTE *)*a2;
  *a2 = v101;
  a2[1] = (unint64_t)v95;
  a2[2] = (unint64_t)v102;
  if (v84)
    goto LABEL_164;
LABEL_165:
  a2[1] = (unint64_t)v95;
  v105 = a2[2];
  if ((unint64_t)v95 < v105)
  {
    *v95 = 0;
    v106 = v95 + 1;
    goto LABEL_183;
  }
  v107 = *a2;
  v108 = &v95[-*a2];
  v109 = (unint64_t)(v108 + 1);
  if ((uint64_t)(v108 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v110 = v105 - v107;
  if (2 * v110 > v109)
    v109 = 2 * v110;
  if (v110 >= 0x3FFFFFFFFFFFFFFFLL)
    v111 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v111 = v109;
  if (v111)
    v112 = (unint64_t)operator new(v111);
  else
    v112 = 0;
  v113 = (char *)(v112 + v111);
  v108[v112] = 0;
  v106 = &v108[v112 + 1];
  if (v95 == (_BYTE *)v107)
  {
    *a2 = (unint64_t)&v108[v112];
    a2[1] = (unint64_t)v106;
    a2[2] = (unint64_t)v113;
LABEL_182:
    operator delete(v95);
    goto LABEL_183;
  }
  v114 = &v95[~v107];
  do
  {
    v115 = *--v95;
    (v114--)[v112] = v115;
  }
  while (v95 != (_BYTE *)v107);
  v95 = (_BYTE *)*a2;
  *a2 = v112;
  a2[1] = (unint64_t)v106;
  a2[2] = (unint64_t)v113;
  if (v95)
    goto LABEL_182;
LABEL_183:
  a2[1] = (unint64_t)v106;
  v116 = a2[2];
  if ((unint64_t)v106 < v116)
  {
    *v106 = 0;
    v117 = (uint64_t)(v106 + 1);
    goto LABEL_201;
  }
  v118 = *a2;
  v119 = &v106[-*a2];
  v120 = (unint64_t)(v119 + 1);
  if ((uint64_t)(v119 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v121 = v116 - v118;
  if (2 * v121 > v120)
    v120 = 2 * v121;
  if (v121 >= 0x3FFFFFFFFFFFFFFFLL)
    v122 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v122 = v120;
  if (v122)
    v123 = (unint64_t)operator new(v122);
  else
    v123 = 0;
  v124 = (char *)(v123 + v122);
  v119[v123] = 0;
  v117 = (uint64_t)&v119[v123 + 1];
  if (v106 == (_BYTE *)v118)
  {
    *a2 = (unint64_t)&v119[v123];
    a2[1] = v117;
    a2[2] = (unint64_t)v124;
LABEL_200:
    operator delete(v106);
    goto LABEL_201;
  }
  v125 = &v106[~v118];
  do
  {
    v126 = *--v106;
    (v125--)[v123] = v126;
  }
  while (v106 != (_BYTE *)v118);
  v106 = (_BYTE *)*a2;
  *a2 = v123;
  a2[1] = v117;
  a2[2] = (unint64_t)v124;
  if (v106)
    goto LABEL_200;
LABEL_201:
  a2[1] = v117;
  v184 = 0;
  v185 = 0;
  __p = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (const void *)*a2, v117, v117 - *a2);
  v127 = ~*a2 + a2[1];
  if (v127 < 8 || v127 > 0x7FF || v184 - (_BYTE *)__p <= v127)
  {
    if (__p)
    {
      v184 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v133 = 0;
    v134 = 8;
    v135 = 8;
    do
    {
      v133 += *((unsigned __int8 *)__p + v134);
      v134 = ++v135;
    }
    while (v127 >= v135);
    v184 = __p;
    operator delete(__p);
    if (v133 != -1)
    {
      v138 = (_BYTE *)a2[1];
      v137 = a2[2];
      if ((unint64_t)v138 >= v137)
      {
        v140 = *a2;
        v141 = &v138[-*a2];
        v142 = (unint64_t)(v141 + 1);
        if ((uint64_t)(v141 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v143 = v137 - v140;
        if (2 * v143 > v142)
          v142 = 2 * v143;
        if (v143 >= 0x3FFFFFFFFFFFFFFFLL)
          v144 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v144 = v142;
        if (v144)
          v145 = (unint64_t)operator new(v144);
        else
          v145 = 0;
        v146 = (char *)(v145 + v144);
        v141[v145] = v133;
        v139 = &v141[v145 + 1];
        if (v138 == (_BYTE *)v140)
        {
          v145 += (unint64_t)v141;
        }
        else
        {
          v147 = &v138[~v140];
          do
          {
            v148 = *--v138;
            (v147--)[v145] = v148;
          }
          while (v138 != (_BYTE *)v140);
          v138 = (_BYTE *)*a2;
        }
        *a2 = v145;
        a2[1] = (unint64_t)v139;
        a2[2] = (unint64_t)v146;
        if (v138)
          operator delete(v138);
      }
      else
      {
        *v138 = v133;
        v139 = v138 + 1;
      }
      a2[1] = (unint64_t)v139;
      v149 = a2[2];
      if ((unint64_t)v139 < v149)
      {
        *v139 = HIBYTE(v133);
        v150 = (uint64_t)(v139 + 1);
        goto LABEL_250;
      }
      v151 = *a2;
      v152 = &v139[-*a2];
      v153 = (unint64_t)(v152 + 1);
      if ((uint64_t)(v152 + 1) < 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v154 = v149 - v151;
      if (2 * v154 > v153)
        v153 = 2 * v154;
      if (v154 >= 0x3FFFFFFFFFFFFFFFLL)
        v155 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v155 = v153;
      if (v155)
        v156 = (unint64_t)operator new(v155);
      else
        v156 = 0;
      v157 = (char *)(v156 + v155);
      v152[v156] = HIBYTE(v133);
      v150 = (uint64_t)&v152[v156 + 1];
      if (v139 == (_BYTE *)v151)
      {
        *a2 = (unint64_t)&v152[v156];
        a2[1] = v150;
        a2[2] = (unint64_t)v157;
      }
      else
      {
        v158 = &v139[~v151];
        do
        {
          v159 = *--v139;
          (v158--)[v156] = v159;
        }
        while (v139 != (_BYTE *)v151);
        v139 = (_BYTE *)*a2;
        *a2 = v156;
        a2[1] = v150;
        a2[2] = (unint64_t)v157;
        if (!v139)
        {
LABEL_250:
          a2[1] = v150;
          v160 = (_BYTE *)*a2;
          v161 = v150 - *a2;
          if (v161 < 0x10000)
          {
            v164 = v161 - 8;
            v160[5] = v164;
            *(_BYTE *)(*a2 + 6) = HIBYTE(v164);
            v165 = (_BYTE *)*a2;
            v136.i32[0] = *(_DWORD *)(*a2 + 2);
            v166 = vaddv_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v136)) + *(_BYTE *)(*a2 + 6);
            if (v166)
            {
              v165[7] = v166;
              v168 = (_BYTE *)a2[1];
              v167 = a2[2];
              if ((unint64_t)v168 >= v167)
              {
                v172 = *a2;
                v173 = &v168[-*a2];
                v174 = (unint64_t)(v173 + 1);
                if ((uint64_t)(v173 + 1) < 0)
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                v175 = v167 - v172;
                if (2 * v175 > v174)
                  v174 = 2 * v175;
                if (v175 >= 0x3FFFFFFFFFFFFFFFLL)
                  v176 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v176 = v174;
                if (v176)
                  v177 = (unint64_t)operator new(v176);
                else
                  v177 = 0;
                v178 = (char *)(v177 + v176);
                v173[v177] = 10;
                v169 = (uint64_t)&v173[v177 + 1];
                if (v168 == (_BYTE *)v172)
                {
                  v177 += (unint64_t)v173;
                }
                else
                {
                  v179 = &v168[~v172];
                  do
                  {
                    v180 = *--v168;
                    (v179--)[v177] = v180;
                  }
                  while (v168 != (_BYTE *)v172);
                  v168 = (_BYTE *)*a2;
                }
                *a2 = v177;
                a2[1] = v169;
                a2[2] = (unint64_t)v178;
                if (v168)
                  operator delete(v168);
              }
              else
              {
                *v168 = 10;
                v169 = (uint64_t)(v168 + 1);
              }
              a2[1] = v169;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v181 = mach_continuous_time();
                v182 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v181), "ADP", 68, "Ga23_24BuildZxTimeMarkProdMsg");
                LbsOsaTrace_WriteLog(0x18u, __str, v182, 5, 1);
              }
              return 1;
            }
            else
            {
              a2[1] = (unint64_t)v165;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v170 = mach_continuous_time();
                v171 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TimeMark\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v170), "ADP", 69, "Ga23_24BuildZxTimeMarkProdMsg", 781);
                LbsOsaTrace_WriteLog(0x18u, __str, v171, 0, 1);
              }
              result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
              if ((_DWORD)result)
                goto LABEL_207;
            }
          }
          else
          {
            a2[1] = (unint64_t)v160;
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v162 = mach_continuous_time();
              v163 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TimemarkRange\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v162), "ADP", 69, "Ga23_24BuildZxTimeMarkProdMsg", 772);
              LbsOsaTrace_WriteLog(0x18u, __str, v163, 0, 1);
            }
            result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
            if ((_DWORD)result)
              goto LABEL_207;
          }
          return result;
        }
      }
      operator delete(v139);
      goto LABEL_250;
    }
  }
  a2[1] = *a2;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v128 = mach_continuous_time();
    v129 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TimeMark\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v128), "ADP", 69, "Ga23_24BuildZxTimeMarkProdMsg", 784);
    LbsOsaTrace_WriteLog(0x18u, __str, v129, 0, 1);
  }
  result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if ((_DWORD)result)
  {
LABEL_207:
    bzero(__str, 0x410uLL);
    v131 = mach_continuous_time();
    v132 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v131), "ADP", 68, "Ga23_24BuildZxTimeMarkProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v132, 5, 1);
    return 0;
  }
  return result;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_25ParseZxTimeMarkProdMsg(uint64_t a1, uint64_t *a2, _DWORD *a3, unsigned __int16 *a4)
{
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  unsigned __int16 v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 v19;
  char __str[1040];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v7 = mach_continuous_time();
    v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 68, "Ga23_25ParseZxTimeMarkProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v8, 5, 1);
  }
  if ((gnssTest::ZxHandler::Ga23_03IsCheckSumValid((uint64_t)a2) & 1) == 0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      goto LABEL_24;
    goto LABEL_8;
  }
  v9 = *a2;
  if ((unint64_t)(a2[1] - *a2) <= 8)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      goto LABEL_24;
LABEL_8:
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TimeMark\n");
LABEL_23:
    LbsOsaTrace_WriteLog(0x18u, __str, v10, 0, 1);
    goto LABEL_24;
  }
  if (*(_BYTE *)(v9 + 2) != 84
    || *(_BYTE *)(v9 + 3) != 76
    || (v11 = *(unsigned __int8 *)(v9 + 4), v11 != 77) && v11 != 32)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      goto LABEL_24;
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Invalid zx resp\n");
    goto LABEL_23;
  }
  v12 = *(unsigned __int8 *)(v9 + 8);
  if (v12 != 32 && v12 != 83)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TimeMark status\n");
      goto LABEL_23;
    }
LABEL_24:
    v17 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v18 = mach_continuous_time();
      v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 68, "Ga23_25ParseZxTimeMarkProdMsg");
      LbsOsaTrace_WriteLog(0x18u, __str, v19, 5, 1);
      return 0;
    }
    return v17;
  }
  if (!a3 || !a4)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TTick\n");
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  *a3 = *(_DWORD *)(v9 + 9);
  *a4 = (4 * *(unsigned __int8 *)(v9 + 13)) | (*(unsigned __int8 *)(v9 + 14) << 10);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v13 = mach_continuous_time();
    v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TTick,%u,TTickMs,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 73, "Ga23_25ParseZxTimeMarkProdMsg", *a3, *a4);
    LbsOsaTrace_WriteLog(0x18u, __str, v14, 4, 1);
  }
  if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    return 1;
  bzero(__str, 0x410uLL);
  v15 = mach_continuous_time();
  v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 68, "Ga23_25ParseZxTimeMarkProdMsg");
  v17 = 1;
  LbsOsaTrace_WriteLog(0x18u, __str, v16, 5, 1);
  return v17;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_24BuildZxStopProdMsg(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;
  unsigned __int16 v4;
  unint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  _BYTE *v15;
  char v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  unint64_t v24;
  char *v25;
  _BYTE *v26;
  char v27;
  unint64_t v28;
  _BYTE *v29;
  unint64_t v30;
  _BYTE *v31;
  unint64_t v32;
  unint64_t v33;
  size_t v34;
  unint64_t v35;
  char *v36;
  _BYTE *v37;
  char v38;
  unint64_t v39;
  _BYTE *v40;
  unint64_t v41;
  _BYTE *v42;
  unint64_t v43;
  unint64_t v44;
  size_t v45;
  unint64_t v46;
  char *v47;
  _BYTE *v48;
  char v49;
  unint64_t v50;
  _BYTE *v51;
  unint64_t v52;
  _BYTE *v53;
  unint64_t v54;
  unint64_t v55;
  size_t v56;
  unint64_t v57;
  char *v58;
  _BYTE *v59;
  char v60;
  unint64_t v61;
  _BYTE *v62;
  unint64_t v63;
  _BYTE *v64;
  unint64_t v65;
  unint64_t v66;
  size_t v67;
  unint64_t v68;
  char *v69;
  _BYTE *v70;
  char v71;
  unint64_t v72;
  _BYTE *v73;
  unint64_t v74;
  _BYTE *v75;
  unint64_t v76;
  unint64_t v77;
  size_t v78;
  unint64_t v79;
  char *v80;
  _BYTE *v81;
  char v82;
  unint64_t v83;
  _BYTE *v84;
  unint64_t v85;
  _BYTE *v86;
  unint64_t v87;
  unint64_t v88;
  size_t v89;
  unint64_t v90;
  char *v91;
  _BYTE *v92;
  char v93;
  unint64_t v94;
  _BYTE *v95;
  unint64_t v96;
  _BYTE *v97;
  unint64_t v98;
  unint64_t v99;
  size_t v100;
  unint64_t v101;
  char *v102;
  _BYTE *v103;
  char v104;
  unint64_t v105;
  _BYTE *v106;
  unint64_t v107;
  _BYTE *v108;
  unint64_t v109;
  unint64_t v110;
  size_t v111;
  unint64_t v112;
  char *v113;
  _BYTE *v114;
  char v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _BYTE *v119;
  unint64_t v120;
  unint64_t v121;
  size_t v122;
  unint64_t v123;
  char *v124;
  _BYTE *v125;
  char v126;
  unint64_t v127;
  uint64_t v128;
  unsigned __int16 v129;
  uint64_t result;
  uint64_t v131;
  unsigned __int16 v132;
  __int16 v133;
  uint64_t v134;
  int v135;
  uint8x8_t v136;
  unint64_t v137;
  _BYTE *v138;
  _BYTE *v139;
  unint64_t v140;
  _BYTE *v141;
  unint64_t v142;
  unint64_t v143;
  size_t v144;
  unint64_t v145;
  char *v146;
  _BYTE *v147;
  char v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  _BYTE *v152;
  unint64_t v153;
  unint64_t v154;
  size_t v155;
  unint64_t v156;
  char *v157;
  _BYTE *v158;
  char v159;
  _BYTE *v160;
  unint64_t v161;
  uint64_t v162;
  unsigned __int16 v163;
  __int16 v164;
  _BYTE *v165;
  char v166;
  unint64_t v167;
  _BYTE *v168;
  uint64_t v169;
  uint64_t v170;
  unsigned __int16 v171;
  unint64_t v172;
  _BYTE *v173;
  unint64_t v174;
  unint64_t v175;
  size_t v176;
  unint64_t v177;
  char *v178;
  _BYTE *v179;
  char v180;
  uint64_t v181;
  unsigned __int16 v182;
  void *__p;
  _BYTE *v184;
  uint64_t v185;
  char __str[1040];
  uint64_t v187;

  v187 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v3 = mach_continuous_time();
    v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga23_24BuildZxStopProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  v6 = (_BYTE *)a2[1];
  v5 = a2[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *a2;
    v9 = &v6[-*a2];
    v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v11 = v5 - v8;
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (unint64_t)operator new(v12);
    else
      v13 = 0;
    v14 = (char *)(v13 + v12);
    v9[v13] = 122;
    v7 = &v9[v13 + 1];
    if (v6 == (_BYTE *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      v15 = &v6[~v8];
      do
      {
        v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (_BYTE *)v8);
      v6 = (_BYTE *)*a2;
    }
    *a2 = v13;
    a2[1] = (unint64_t)v7;
    a2[2] = (unint64_t)v14;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = 122;
    v7 = v6 + 1;
  }
  a2[1] = (unint64_t)v7;
  v17 = a2[2];
  if ((unint64_t)v7 < v17)
  {
    *v7 = 120;
    v18 = v7 + 1;
    goto LABEL_39;
  }
  v19 = *a2;
  v20 = &v7[-*a2];
  v21 = (unint64_t)(v20 + 1);
  if ((uint64_t)(v20 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v22 = v17 - v19;
  if (2 * v22 > v21)
    v21 = 2 * v22;
  if (v22 >= 0x3FFFFFFFFFFFFFFFLL)
    v23 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v23 = v21;
  if (v23)
    v24 = (unint64_t)operator new(v23);
  else
    v24 = 0;
  v25 = (char *)(v24 + v23);
  v20[v24] = 120;
  v18 = &v20[v24 + 1];
  if (v7 == (_BYTE *)v19)
  {
    *a2 = (unint64_t)&v20[v24];
    a2[1] = (unint64_t)v18;
    a2[2] = (unint64_t)v25;
LABEL_38:
    operator delete(v7);
    goto LABEL_39;
  }
  v26 = &v7[~v19];
  do
  {
    v27 = *--v7;
    (v26--)[v24] = v27;
  }
  while (v7 != (_BYTE *)v19);
  v7 = (_BYTE *)*a2;
  *a2 = v24;
  a2[1] = (unint64_t)v18;
  a2[2] = (unint64_t)v25;
  if (v7)
    goto LABEL_38;
LABEL_39:
  a2[1] = (unint64_t)v18;
  v28 = a2[2];
  if ((unint64_t)v18 < v28)
  {
    *v18 = 84;
    v29 = v18 + 1;
    goto LABEL_57;
  }
  v30 = *a2;
  v31 = &v18[-*a2];
  v32 = (unint64_t)(v31 + 1);
  if ((uint64_t)(v31 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v33 = v28 - v30;
  if (2 * v33 > v32)
    v32 = 2 * v33;
  if (v33 >= 0x3FFFFFFFFFFFFFFFLL)
    v34 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v34 = v32;
  if (v34)
    v35 = (unint64_t)operator new(v34);
  else
    v35 = 0;
  v36 = (char *)(v35 + v34);
  v31[v35] = 84;
  v29 = &v31[v35 + 1];
  if (v18 == (_BYTE *)v30)
  {
    *a2 = (unint64_t)&v31[v35];
    a2[1] = (unint64_t)v29;
    a2[2] = (unint64_t)v36;
LABEL_56:
    operator delete(v18);
    goto LABEL_57;
  }
  v37 = &v18[~v30];
  do
  {
    v38 = *--v18;
    (v37--)[v35] = v38;
  }
  while (v18 != (_BYTE *)v30);
  v18 = (_BYTE *)*a2;
  *a2 = v35;
  a2[1] = (unint64_t)v29;
  a2[2] = (unint64_t)v36;
  if (v18)
    goto LABEL_56;
LABEL_57:
  a2[1] = (unint64_t)v29;
  v39 = a2[2];
  if ((unint64_t)v29 < v39)
  {
    *v29 = 102;
    v40 = v29 + 1;
    goto LABEL_75;
  }
  v41 = *a2;
  v42 = &v29[-*a2];
  v43 = (unint64_t)(v42 + 1);
  if ((uint64_t)(v42 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v44 = v39 - v41;
  if (2 * v44 > v43)
    v43 = 2 * v44;
  if (v44 >= 0x3FFFFFFFFFFFFFFFLL)
    v45 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v45 = v43;
  if (v45)
    v46 = (unint64_t)operator new(v45);
  else
    v46 = 0;
  v47 = (char *)(v46 + v45);
  v42[v46] = 102;
  v40 = &v42[v46 + 1];
  if (v29 == (_BYTE *)v41)
  {
    *a2 = (unint64_t)&v42[v46];
    a2[1] = (unint64_t)v40;
    a2[2] = (unint64_t)v47;
LABEL_74:
    operator delete(v29);
    goto LABEL_75;
  }
  v48 = &v29[~v41];
  do
  {
    v49 = *--v29;
    (v48--)[v46] = v49;
  }
  while (v29 != (_BYTE *)v41);
  v29 = (_BYTE *)*a2;
  *a2 = v46;
  a2[1] = (unint64_t)v40;
  a2[2] = (unint64_t)v47;
  if (v29)
    goto LABEL_74;
LABEL_75:
  a2[1] = (unint64_t)v40;
  v50 = a2[2];
  if ((unint64_t)v40 < v50)
  {
    *v40 = 32;
    v51 = v40 + 1;
    goto LABEL_93;
  }
  v52 = *a2;
  v53 = &v40[-*a2];
  v54 = (unint64_t)(v53 + 1);
  if ((uint64_t)(v53 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v55 = v50 - v52;
  if (2 * v55 > v54)
    v54 = 2 * v55;
  if (v55 >= 0x3FFFFFFFFFFFFFFFLL)
    v56 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v56 = v54;
  if (v56)
    v57 = (unint64_t)operator new(v56);
  else
    v57 = 0;
  v58 = (char *)(v57 + v56);
  v53[v57] = 32;
  v51 = &v53[v57 + 1];
  if (v40 == (_BYTE *)v52)
  {
    *a2 = (unint64_t)&v53[v57];
    a2[1] = (unint64_t)v51;
    a2[2] = (unint64_t)v58;
LABEL_92:
    operator delete(v40);
    goto LABEL_93;
  }
  v59 = &v40[~v52];
  do
  {
    v60 = *--v40;
    (v59--)[v57] = v60;
  }
  while (v40 != (_BYTE *)v52);
  v40 = (_BYTE *)*a2;
  *a2 = v57;
  a2[1] = (unint64_t)v51;
  a2[2] = (unint64_t)v58;
  if (v40)
    goto LABEL_92;
LABEL_93:
  a2[1] = (unint64_t)v51;
  v61 = a2[2];
  if ((unint64_t)v51 < v61)
  {
    *v51 = 0;
    v62 = v51 + 1;
    goto LABEL_111;
  }
  v63 = *a2;
  v64 = &v51[-*a2];
  v65 = (unint64_t)(v64 + 1);
  if ((uint64_t)(v64 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v66 = v61 - v63;
  if (2 * v66 > v65)
    v65 = 2 * v66;
  if (v66 >= 0x3FFFFFFFFFFFFFFFLL)
    v67 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v67 = v65;
  if (v67)
    v68 = (unint64_t)operator new(v67);
  else
    v68 = 0;
  v69 = (char *)(v68 + v67);
  v64[v68] = 0;
  v62 = &v64[v68 + 1];
  if (v51 == (_BYTE *)v63)
  {
    *a2 = (unint64_t)&v64[v68];
    a2[1] = (unint64_t)v62;
    a2[2] = (unint64_t)v69;
LABEL_110:
    operator delete(v51);
    goto LABEL_111;
  }
  v70 = &v51[~v63];
  do
  {
    v71 = *--v51;
    (v70--)[v68] = v71;
  }
  while (v51 != (_BYTE *)v63);
  v51 = (_BYTE *)*a2;
  *a2 = v68;
  a2[1] = (unint64_t)v62;
  a2[2] = (unint64_t)v69;
  if (v51)
    goto LABEL_110;
LABEL_111:
  a2[1] = (unint64_t)v62;
  v72 = a2[2];
  if ((unint64_t)v62 < v72)
  {
    *v62 = 0;
    v73 = v62 + 1;
    goto LABEL_129;
  }
  v74 = *a2;
  v75 = &v62[-*a2];
  v76 = (unint64_t)(v75 + 1);
  if ((uint64_t)(v75 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v77 = v72 - v74;
  if (2 * v77 > v76)
    v76 = 2 * v77;
  if (v77 >= 0x3FFFFFFFFFFFFFFFLL)
    v78 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v78 = v76;
  if (v78)
    v79 = (unint64_t)operator new(v78);
  else
    v79 = 0;
  v80 = (char *)(v79 + v78);
  v75[v79] = 0;
  v73 = &v75[v79 + 1];
  if (v62 == (_BYTE *)v74)
  {
    *a2 = (unint64_t)&v75[v79];
    a2[1] = (unint64_t)v73;
    a2[2] = (unint64_t)v80;
LABEL_128:
    operator delete(v62);
    goto LABEL_129;
  }
  v81 = &v62[~v74];
  do
  {
    v82 = *--v62;
    (v81--)[v79] = v82;
  }
  while (v62 != (_BYTE *)v74);
  v62 = (_BYTE *)*a2;
  *a2 = v79;
  a2[1] = (unint64_t)v73;
  a2[2] = (unint64_t)v80;
  if (v62)
    goto LABEL_128;
LABEL_129:
  a2[1] = (unint64_t)v73;
  v83 = a2[2];
  if ((unint64_t)v73 < v83)
  {
    *v73 = 0;
    v84 = v73 + 1;
    goto LABEL_147;
  }
  v85 = *a2;
  v86 = &v73[-*a2];
  v87 = (unint64_t)(v86 + 1);
  if ((uint64_t)(v86 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v88 = v83 - v85;
  if (2 * v88 > v87)
    v87 = 2 * v88;
  if (v88 >= 0x3FFFFFFFFFFFFFFFLL)
    v89 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v89 = v87;
  if (v89)
    v90 = (unint64_t)operator new(v89);
  else
    v90 = 0;
  v91 = (char *)(v90 + v89);
  v86[v90] = 0;
  v84 = &v86[v90 + 1];
  if (v73 == (_BYTE *)v85)
  {
    *a2 = (unint64_t)&v86[v90];
    a2[1] = (unint64_t)v84;
    a2[2] = (unint64_t)v91;
LABEL_146:
    operator delete(v73);
    goto LABEL_147;
  }
  v92 = &v73[~v85];
  do
  {
    v93 = *--v73;
    (v92--)[v90] = v93;
  }
  while (v73 != (_BYTE *)v85);
  v73 = (_BYTE *)*a2;
  *a2 = v90;
  a2[1] = (unint64_t)v84;
  a2[2] = (unint64_t)v91;
  if (v73)
    goto LABEL_146;
LABEL_147:
  a2[1] = (unint64_t)v84;
  v94 = a2[2];
  if ((unint64_t)v84 < v94)
  {
    *v84 = 1;
    v95 = v84 + 1;
    goto LABEL_165;
  }
  v96 = *a2;
  v97 = &v84[-*a2];
  v98 = (unint64_t)(v97 + 1);
  if ((uint64_t)(v97 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v99 = v94 - v96;
  if (2 * v99 > v98)
    v98 = 2 * v99;
  if (v99 >= 0x3FFFFFFFFFFFFFFFLL)
    v100 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v100 = v98;
  if (v100)
    v101 = (unint64_t)operator new(v100);
  else
    v101 = 0;
  v102 = (char *)(v101 + v100);
  v97[v101] = 1;
  v95 = &v97[v101 + 1];
  if (v84 == (_BYTE *)v96)
  {
    *a2 = (unint64_t)&v97[v101];
    a2[1] = (unint64_t)v95;
    a2[2] = (unint64_t)v102;
LABEL_164:
    operator delete(v84);
    goto LABEL_165;
  }
  v103 = &v84[~v96];
  do
  {
    v104 = *--v84;
    (v103--)[v101] = v104;
  }
  while (v84 != (_BYTE *)v96);
  v84 = (_BYTE *)*a2;
  *a2 = v101;
  a2[1] = (unint64_t)v95;
  a2[2] = (unint64_t)v102;
  if (v84)
    goto LABEL_164;
LABEL_165:
  a2[1] = (unint64_t)v95;
  v105 = a2[2];
  if ((unint64_t)v95 < v105)
  {
    *v95 = 0;
    v106 = v95 + 1;
    goto LABEL_183;
  }
  v107 = *a2;
  v108 = &v95[-*a2];
  v109 = (unint64_t)(v108 + 1);
  if ((uint64_t)(v108 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v110 = v105 - v107;
  if (2 * v110 > v109)
    v109 = 2 * v110;
  if (v110 >= 0x3FFFFFFFFFFFFFFFLL)
    v111 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v111 = v109;
  if (v111)
    v112 = (unint64_t)operator new(v111);
  else
    v112 = 0;
  v113 = (char *)(v112 + v111);
  v108[v112] = 0;
  v106 = &v108[v112 + 1];
  if (v95 == (_BYTE *)v107)
  {
    *a2 = (unint64_t)&v108[v112];
    a2[1] = (unint64_t)v106;
    a2[2] = (unint64_t)v113;
LABEL_182:
    operator delete(v95);
    goto LABEL_183;
  }
  v114 = &v95[~v107];
  do
  {
    v115 = *--v95;
    (v114--)[v112] = v115;
  }
  while (v95 != (_BYTE *)v107);
  v95 = (_BYTE *)*a2;
  *a2 = v112;
  a2[1] = (unint64_t)v106;
  a2[2] = (unint64_t)v113;
  if (v95)
    goto LABEL_182;
LABEL_183:
  a2[1] = (unint64_t)v106;
  v116 = a2[2];
  if ((unint64_t)v106 < v116)
  {
    *v106 = 0;
    v117 = (uint64_t)(v106 + 1);
    goto LABEL_201;
  }
  v118 = *a2;
  v119 = &v106[-*a2];
  v120 = (unint64_t)(v119 + 1);
  if ((uint64_t)(v119 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v121 = v116 - v118;
  if (2 * v121 > v120)
    v120 = 2 * v121;
  if (v121 >= 0x3FFFFFFFFFFFFFFFLL)
    v122 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v122 = v120;
  if (v122)
    v123 = (unint64_t)operator new(v122);
  else
    v123 = 0;
  v124 = (char *)(v123 + v122);
  v119[v123] = 0;
  v117 = (uint64_t)&v119[v123 + 1];
  if (v106 == (_BYTE *)v118)
  {
    *a2 = (unint64_t)&v119[v123];
    a2[1] = v117;
    a2[2] = (unint64_t)v124;
LABEL_200:
    operator delete(v106);
    goto LABEL_201;
  }
  v125 = &v106[~v118];
  do
  {
    v126 = *--v106;
    (v125--)[v123] = v126;
  }
  while (v106 != (_BYTE *)v118);
  v106 = (_BYTE *)*a2;
  *a2 = v123;
  a2[1] = v117;
  a2[2] = (unint64_t)v124;
  if (v106)
    goto LABEL_200;
LABEL_201:
  a2[1] = v117;
  v184 = 0;
  v185 = 0;
  __p = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (const void *)*a2, v117, v117 - *a2);
  v127 = ~*a2 + a2[1];
  if (v127 < 8 || v127 > 0x7FF || v184 - (_BYTE *)__p <= v127)
  {
    if (__p)
    {
      v184 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v133 = 0;
    v134 = 8;
    v135 = 8;
    do
    {
      v133 += *((unsigned __int8 *)__p + v134);
      v134 = ++v135;
    }
    while (v127 >= v135);
    v184 = __p;
    operator delete(__p);
    if (v133 != -1)
    {
      v138 = (_BYTE *)a2[1];
      v137 = a2[2];
      if ((unint64_t)v138 >= v137)
      {
        v140 = *a2;
        v141 = &v138[-*a2];
        v142 = (unint64_t)(v141 + 1);
        if ((uint64_t)(v141 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v143 = v137 - v140;
        if (2 * v143 > v142)
          v142 = 2 * v143;
        if (v143 >= 0x3FFFFFFFFFFFFFFFLL)
          v144 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v144 = v142;
        if (v144)
          v145 = (unint64_t)operator new(v144);
        else
          v145 = 0;
        v146 = (char *)(v145 + v144);
        v141[v145] = v133;
        v139 = &v141[v145 + 1];
        if (v138 == (_BYTE *)v140)
        {
          v145 += (unint64_t)v141;
        }
        else
        {
          v147 = &v138[~v140];
          do
          {
            v148 = *--v138;
            (v147--)[v145] = v148;
          }
          while (v138 != (_BYTE *)v140);
          v138 = (_BYTE *)*a2;
        }
        *a2 = v145;
        a2[1] = (unint64_t)v139;
        a2[2] = (unint64_t)v146;
        if (v138)
          operator delete(v138);
      }
      else
      {
        *v138 = v133;
        v139 = v138 + 1;
      }
      a2[1] = (unint64_t)v139;
      v149 = a2[2];
      if ((unint64_t)v139 < v149)
      {
        *v139 = HIBYTE(v133);
        v150 = (uint64_t)(v139 + 1);
        goto LABEL_250;
      }
      v151 = *a2;
      v152 = &v139[-*a2];
      v153 = (unint64_t)(v152 + 1);
      if ((uint64_t)(v152 + 1) < 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v154 = v149 - v151;
      if (2 * v154 > v153)
        v153 = 2 * v154;
      if (v154 >= 0x3FFFFFFFFFFFFFFFLL)
        v155 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v155 = v153;
      if (v155)
        v156 = (unint64_t)operator new(v155);
      else
        v156 = 0;
      v157 = (char *)(v156 + v155);
      v152[v156] = HIBYTE(v133);
      v150 = (uint64_t)&v152[v156 + 1];
      if (v139 == (_BYTE *)v151)
      {
        *a2 = (unint64_t)&v152[v156];
        a2[1] = v150;
        a2[2] = (unint64_t)v157;
      }
      else
      {
        v158 = &v139[~v151];
        do
        {
          v159 = *--v139;
          (v158--)[v156] = v159;
        }
        while (v139 != (_BYTE *)v151);
        v139 = (_BYTE *)*a2;
        *a2 = v156;
        a2[1] = v150;
        a2[2] = (unint64_t)v157;
        if (!v139)
        {
LABEL_250:
          a2[1] = v150;
          v160 = (_BYTE *)*a2;
          v161 = v150 - *a2;
          if (v161 < 0x10000)
          {
            v164 = v161 - 8;
            v160[5] = v164;
            *(_BYTE *)(*a2 + 6) = HIBYTE(v164);
            v165 = (_BYTE *)*a2;
            v136.i32[0] = *(_DWORD *)(*a2 + 2);
            v166 = vaddv_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v136)) + *(_BYTE *)(*a2 + 6);
            if (v166)
            {
              v165[7] = v166;
              v168 = (_BYTE *)a2[1];
              v167 = a2[2];
              if ((unint64_t)v168 >= v167)
              {
                v172 = *a2;
                v173 = &v168[-*a2];
                v174 = (unint64_t)(v173 + 1);
                if ((uint64_t)(v173 + 1) < 0)
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                v175 = v167 - v172;
                if (2 * v175 > v174)
                  v174 = 2 * v175;
                if (v175 >= 0x3FFFFFFFFFFFFFFFLL)
                  v176 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v176 = v174;
                if (v176)
                  v177 = (unint64_t)operator new(v176);
                else
                  v177 = 0;
                v178 = (char *)(v177 + v176);
                v173[v177] = 10;
                v169 = (uint64_t)&v173[v177 + 1];
                if (v168 == (_BYTE *)v172)
                {
                  v177 += (unint64_t)v173;
                }
                else
                {
                  v179 = &v168[~v172];
                  do
                  {
                    v180 = *--v168;
                    (v179--)[v177] = v180;
                  }
                  while (v168 != (_BYTE *)v172);
                  v168 = (_BYTE *)*a2;
                }
                *a2 = v177;
                a2[1] = v169;
                a2[2] = (unint64_t)v178;
                if (v168)
                  operator delete(v168);
              }
              else
              {
                *v168 = 10;
                v169 = (uint64_t)(v168 + 1);
              }
              a2[1] = v169;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v181 = mach_continuous_time();
                v182 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v181), "ADP", 68, "Ga23_24BuildZxStopProdMsg");
                LbsOsaTrace_WriteLog(0x18u, __str, v182, 5, 1);
              }
              return 1;
            }
            else
            {
              a2[1] = (unint64_t)v165;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v170 = mach_continuous_time();
                v171 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StopPod\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v170), "ADP", 69, "Ga23_24BuildZxStopProdMsg", 781);
                LbsOsaTrace_WriteLog(0x18u, __str, v171, 0, 1);
              }
              result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
              if ((_DWORD)result)
                goto LABEL_207;
            }
          }
          else
          {
            a2[1] = (unint64_t)v160;
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v162 = mach_continuous_time();
              v163 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StopRange\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v162), "ADP", 69, "Ga23_24BuildZxStopProdMsg", 772);
              LbsOsaTrace_WriteLog(0x18u, __str, v163, 0, 1);
            }
            result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
            if ((_DWORD)result)
              goto LABEL_207;
          }
          return result;
        }
      }
      operator delete(v139);
      goto LABEL_250;
    }
  }
  a2[1] = *a2;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v128 = mach_continuous_time();
    v129 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StopProd\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v128), "ADP", 69, "Ga23_24BuildZxStopProdMsg", 781);
    LbsOsaTrace_WriteLog(0x18u, __str, v129, 0, 1);
  }
  result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if ((_DWORD)result)
  {
LABEL_207:
    bzero(__str, 0x410uLL);
    v131 = mach_continuous_time();
    v132 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v131), "ADP", 68, "Ga23_24BuildZxStopProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v132, 5, 1);
    return 0;
  }
  return result;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_33CalcIntegrationTime(double a1, uint64_t a2, int a3)
{
  uint64_t v5;
  unsigned __int16 v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v13;
  unsigned __int16 v14;
  char __str[1040];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v5 = mach_continuous_time();
    v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 68, "Ga23_33CalcIntegrationTime");
    LbsOsaTrace_WriteLog(0x18u, __str, v6, 5, 1);
  }
  switch(a3)
  {
    case 1:
    case 2:
    case 3:
    case 4:
      v7 = 5 * (a1 / 0x3E8) + 1985;
      break;
    case 5:
    case 7:
      v8 = a1 / 0x3E8;
      v9 = 10;
      goto LABEL_7;
    case 8:
    case 9:
      v8 = a1 / 0x3E8;
      v9 = 340;
LABEL_7:
      v7 = v8 * v9 + 1985;
      break;
    default:
      v7 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v13 = mach_continuous_time();
        v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Band,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 69, "Ga23_33CalcIntegrationTime", 770, a3);
        LbsOsaTrace_WriteLog(0x18u, __str, v14, 0, 1);
        v7 = 0;
      }
      break;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v10 = mach_continuous_time();
    v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 68, "Ga23_33CalcIntegrationTime");
    LbsOsaTrace_WriteLog(0x18u, __str, v11, 5, 1);
  }
  return v7;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_34BuildZxProdIndProdMsg(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;
  unsigned __int16 v4;
  unint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  _BYTE *v15;
  char v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  unint64_t v24;
  char *v25;
  _BYTE *v26;
  char v27;
  unint64_t v28;
  _BYTE *v29;
  unint64_t v30;
  _BYTE *v31;
  unint64_t v32;
  unint64_t v33;
  size_t v34;
  unint64_t v35;
  char *v36;
  _BYTE *v37;
  char v38;
  unint64_t v39;
  _BYTE *v40;
  unint64_t v41;
  _BYTE *v42;
  unint64_t v43;
  unint64_t v44;
  size_t v45;
  unint64_t v46;
  char *v47;
  _BYTE *v48;
  char v49;
  unint64_t v50;
  _BYTE *v51;
  unint64_t v52;
  _BYTE *v53;
  unint64_t v54;
  unint64_t v55;
  size_t v56;
  unint64_t v57;
  char *v58;
  _BYTE *v59;
  char v60;
  unint64_t v61;
  _BYTE *v62;
  unint64_t v63;
  _BYTE *v64;
  unint64_t v65;
  unint64_t v66;
  size_t v67;
  unint64_t v68;
  char *v69;
  _BYTE *v70;
  char v71;
  unint64_t v72;
  _BYTE *v73;
  unint64_t v74;
  _BYTE *v75;
  unint64_t v76;
  unint64_t v77;
  size_t v78;
  unint64_t v79;
  char *v80;
  _BYTE *v81;
  char v82;
  unint64_t v83;
  _BYTE *v84;
  unint64_t v85;
  _BYTE *v86;
  unint64_t v87;
  unint64_t v88;
  size_t v89;
  unint64_t v90;
  char *v91;
  _BYTE *v92;
  char v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _BYTE *v97;
  unint64_t v98;
  unint64_t v99;
  size_t v100;
  unint64_t v101;
  char *v102;
  _BYTE *v103;
  char v104;
  unint64_t v105;
  uint64_t v106;
  unsigned __int16 v107;
  uint64_t result;
  uint64_t v109;
  unsigned __int16 v110;
  __int16 v111;
  uint64_t v112;
  int v113;
  uint8x8_t v114;
  unint64_t v115;
  _BYTE *v116;
  _BYTE *v117;
  unint64_t v118;
  _BYTE *v119;
  unint64_t v120;
  unint64_t v121;
  size_t v122;
  unint64_t v123;
  char *v124;
  _BYTE *v125;
  char v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  _BYTE *v130;
  unint64_t v131;
  unint64_t v132;
  size_t v133;
  unint64_t v134;
  char *v135;
  _BYTE *v136;
  char v137;
  _BYTE *v138;
  unint64_t v139;
  uint64_t v140;
  unsigned __int16 v141;
  __int16 v142;
  _BYTE *v143;
  char v144;
  unint64_t v145;
  _BYTE *v146;
  uint64_t v147;
  uint64_t v148;
  unsigned __int16 v149;
  unint64_t v150;
  _BYTE *v151;
  unint64_t v152;
  unint64_t v153;
  size_t v154;
  unint64_t v155;
  char *v156;
  _BYTE *v157;
  char v158;
  uint64_t v159;
  unsigned __int16 v160;
  void *__p;
  _BYTE *v162;
  uint64_t v163;
  char __str[1040];
  uint64_t v165;

  v165 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v3 = mach_continuous_time();
    v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga23_34BuildZxProdIndProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  v6 = (_BYTE *)a2[1];
  v5 = a2[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *a2;
    v9 = &v6[-*a2];
    v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v11 = v5 - v8;
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (unint64_t)operator new(v12);
    else
      v13 = 0;
    v14 = (char *)(v13 + v12);
    v9[v13] = 122;
    v7 = &v9[v13 + 1];
    if (v6 == (_BYTE *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      v15 = &v6[~v8];
      do
      {
        v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (_BYTE *)v8);
      v6 = (_BYTE *)*a2;
    }
    *a2 = v13;
    a2[1] = (unint64_t)v7;
    a2[2] = (unint64_t)v14;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = 122;
    v7 = v6 + 1;
  }
  a2[1] = (unint64_t)v7;
  v17 = a2[2];
  if ((unint64_t)v7 < v17)
  {
    *v7 = 120;
    v18 = v7 + 1;
    goto LABEL_39;
  }
  v19 = *a2;
  v20 = &v7[-*a2];
  v21 = (unint64_t)(v20 + 1);
  if ((uint64_t)(v20 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v22 = v17 - v19;
  if (2 * v22 > v21)
    v21 = 2 * v22;
  if (v22 >= 0x3FFFFFFFFFFFFFFFLL)
    v23 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v23 = v21;
  if (v23)
    v24 = (unint64_t)operator new(v23);
  else
    v24 = 0;
  v25 = (char *)(v24 + v23);
  v20[v24] = 120;
  v18 = &v20[v24 + 1];
  if (v7 == (_BYTE *)v19)
  {
    *a2 = (unint64_t)&v20[v24];
    a2[1] = (unint64_t)v18;
    a2[2] = (unint64_t)v25;
LABEL_38:
    operator delete(v7);
    goto LABEL_39;
  }
  v26 = &v7[~v19];
  do
  {
    v27 = *--v7;
    (v26--)[v24] = v27;
  }
  while (v7 != (_BYTE *)v19);
  v7 = (_BYTE *)*a2;
  *a2 = v24;
  a2[1] = (unint64_t)v18;
  a2[2] = (unint64_t)v25;
  if (v7)
    goto LABEL_38;
LABEL_39:
  a2[1] = (unint64_t)v18;
  v28 = a2[2];
  if ((unint64_t)v18 < v28)
  {
    *v18 = 84;
    v29 = v18 + 1;
    goto LABEL_57;
  }
  v30 = *a2;
  v31 = &v18[-*a2];
  v32 = (unint64_t)(v31 + 1);
  if ((uint64_t)(v31 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v33 = v28 - v30;
  if (2 * v33 > v32)
    v32 = 2 * v33;
  if (v33 >= 0x3FFFFFFFFFFFFFFFLL)
    v34 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v34 = v32;
  if (v34)
    v35 = (unint64_t)operator new(v34);
  else
    v35 = 0;
  v36 = (char *)(v35 + v34);
  v31[v35] = 84;
  v29 = &v31[v35 + 1];
  if (v18 == (_BYTE *)v30)
  {
    *a2 = (unint64_t)&v31[v35];
    a2[1] = (unint64_t)v29;
    a2[2] = (unint64_t)v36;
LABEL_56:
    operator delete(v18);
    goto LABEL_57;
  }
  v37 = &v18[~v30];
  do
  {
    v38 = *--v18;
    (v37--)[v35] = v38;
  }
  while (v18 != (_BYTE *)v30);
  v18 = (_BYTE *)*a2;
  *a2 = v35;
  a2[1] = (unint64_t)v29;
  a2[2] = (unint64_t)v36;
  if (v18)
    goto LABEL_56;
LABEL_57:
  a2[1] = (unint64_t)v29;
  v39 = a2[2];
  if ((unint64_t)v29 < v39)
  {
    *v29 = 98;
    v40 = v29 + 1;
    goto LABEL_75;
  }
  v41 = *a2;
  v42 = &v29[-*a2];
  v43 = (unint64_t)(v42 + 1);
  if ((uint64_t)(v42 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v44 = v39 - v41;
  if (2 * v44 > v43)
    v43 = 2 * v44;
  if (v44 >= 0x3FFFFFFFFFFFFFFFLL)
    v45 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v45 = v43;
  if (v45)
    v46 = (unint64_t)operator new(v45);
  else
    v46 = 0;
  v47 = (char *)(v46 + v45);
  v42[v46] = 98;
  v40 = &v42[v46 + 1];
  if (v29 == (_BYTE *)v41)
  {
    *a2 = (unint64_t)&v42[v46];
    a2[1] = (unint64_t)v40;
    a2[2] = (unint64_t)v47;
LABEL_74:
    operator delete(v29);
    goto LABEL_75;
  }
  v48 = &v29[~v41];
  do
  {
    v49 = *--v29;
    (v48--)[v46] = v49;
  }
  while (v29 != (_BYTE *)v41);
  v29 = (_BYTE *)*a2;
  *a2 = v46;
  a2[1] = (unint64_t)v40;
  a2[2] = (unint64_t)v47;
  if (v29)
    goto LABEL_74;
LABEL_75:
  a2[1] = (unint64_t)v40;
  v50 = a2[2];
  if ((unint64_t)v40 < v50)
  {
    *v40 = 32;
    v51 = v40 + 1;
    goto LABEL_93;
  }
  v52 = *a2;
  v53 = &v40[-*a2];
  v54 = (unint64_t)(v53 + 1);
  if ((uint64_t)(v53 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v55 = v50 - v52;
  if (2 * v55 > v54)
    v54 = 2 * v55;
  if (v55 >= 0x3FFFFFFFFFFFFFFFLL)
    v56 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v56 = v54;
  if (v56)
    v57 = (unint64_t)operator new(v56);
  else
    v57 = 0;
  v58 = (char *)(v57 + v56);
  v53[v57] = 32;
  v51 = &v53[v57 + 1];
  if (v40 == (_BYTE *)v52)
  {
    *a2 = (unint64_t)&v53[v57];
    a2[1] = (unint64_t)v51;
    a2[2] = (unint64_t)v58;
LABEL_92:
    operator delete(v40);
    goto LABEL_93;
  }
  v59 = &v40[~v52];
  do
  {
    v60 = *--v40;
    (v59--)[v57] = v60;
  }
  while (v40 != (_BYTE *)v52);
  v40 = (_BYTE *)*a2;
  *a2 = v57;
  a2[1] = (unint64_t)v51;
  a2[2] = (unint64_t)v58;
  if (v40)
    goto LABEL_92;
LABEL_93:
  a2[1] = (unint64_t)v51;
  v61 = a2[2];
  if ((unint64_t)v51 < v61)
  {
    *v51 = 0;
    v62 = v51 + 1;
    goto LABEL_111;
  }
  v63 = *a2;
  v64 = &v51[-*a2];
  v65 = (unint64_t)(v64 + 1);
  if ((uint64_t)(v64 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v66 = v61 - v63;
  if (2 * v66 > v65)
    v65 = 2 * v66;
  if (v66 >= 0x3FFFFFFFFFFFFFFFLL)
    v67 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v67 = v65;
  if (v67)
    v68 = (unint64_t)operator new(v67);
  else
    v68 = 0;
  v69 = (char *)(v68 + v67);
  v64[v68] = 0;
  v62 = &v64[v68 + 1];
  if (v51 == (_BYTE *)v63)
  {
    *a2 = (unint64_t)&v64[v68];
    a2[1] = (unint64_t)v62;
    a2[2] = (unint64_t)v69;
LABEL_110:
    operator delete(v51);
    goto LABEL_111;
  }
  v70 = &v51[~v63];
  do
  {
    v71 = *--v51;
    (v70--)[v68] = v71;
  }
  while (v51 != (_BYTE *)v63);
  v51 = (_BYTE *)*a2;
  *a2 = v68;
  a2[1] = (unint64_t)v62;
  a2[2] = (unint64_t)v69;
  if (v51)
    goto LABEL_110;
LABEL_111:
  a2[1] = (unint64_t)v62;
  v72 = a2[2];
  if ((unint64_t)v62 < v72)
  {
    *v62 = 0;
    v73 = v62 + 1;
    goto LABEL_129;
  }
  v74 = *a2;
  v75 = &v62[-*a2];
  v76 = (unint64_t)(v75 + 1);
  if ((uint64_t)(v75 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v77 = v72 - v74;
  if (2 * v77 > v76)
    v76 = 2 * v77;
  if (v77 >= 0x3FFFFFFFFFFFFFFFLL)
    v78 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v78 = v76;
  if (v78)
    v79 = (unint64_t)operator new(v78);
  else
    v79 = 0;
  v80 = (char *)(v79 + v78);
  v75[v79] = 0;
  v73 = &v75[v79 + 1];
  if (v62 == (_BYTE *)v74)
  {
    *a2 = (unint64_t)&v75[v79];
    a2[1] = (unint64_t)v73;
    a2[2] = (unint64_t)v80;
LABEL_128:
    operator delete(v62);
    goto LABEL_129;
  }
  v81 = &v62[~v74];
  do
  {
    v82 = *--v62;
    (v81--)[v79] = v82;
  }
  while (v62 != (_BYTE *)v74);
  v62 = (_BYTE *)*a2;
  *a2 = v79;
  a2[1] = (unint64_t)v73;
  a2[2] = (unint64_t)v80;
  if (v62)
    goto LABEL_128;
LABEL_129:
  a2[1] = (unint64_t)v73;
  v83 = a2[2];
  if ((unint64_t)v73 < v83)
  {
    *v73 = 0;
    v84 = v73 + 1;
    goto LABEL_147;
  }
  v85 = *a2;
  v86 = &v73[-*a2];
  v87 = (unint64_t)(v86 + 1);
  if ((uint64_t)(v86 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v88 = v83 - v85;
  if (2 * v88 > v87)
    v87 = 2 * v88;
  if (v88 >= 0x3FFFFFFFFFFFFFFFLL)
    v89 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v89 = v87;
  if (v89)
    v90 = (unint64_t)operator new(v89);
  else
    v90 = 0;
  v91 = (char *)(v90 + v89);
  v86[v90] = 0;
  v84 = &v86[v90 + 1];
  if (v73 == (_BYTE *)v85)
  {
    *a2 = (unint64_t)&v86[v90];
    a2[1] = (unint64_t)v84;
    a2[2] = (unint64_t)v91;
LABEL_146:
    operator delete(v73);
    goto LABEL_147;
  }
  v92 = &v73[~v85];
  do
  {
    v93 = *--v73;
    (v92--)[v90] = v93;
  }
  while (v73 != (_BYTE *)v85);
  v73 = (_BYTE *)*a2;
  *a2 = v90;
  a2[1] = (unint64_t)v84;
  a2[2] = (unint64_t)v91;
  if (v73)
    goto LABEL_146;
LABEL_147:
  a2[1] = (unint64_t)v84;
  v94 = a2[2];
  if ((unint64_t)v84 < v94)
  {
    *v84 = 1;
    v95 = (uint64_t)(v84 + 1);
    goto LABEL_165;
  }
  v96 = *a2;
  v97 = &v84[-*a2];
  v98 = (unint64_t)(v97 + 1);
  if ((uint64_t)(v97 + 1) < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v99 = v94 - v96;
  if (2 * v99 > v98)
    v98 = 2 * v99;
  if (v99 >= 0x3FFFFFFFFFFFFFFFLL)
    v100 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v100 = v98;
  if (v100)
    v101 = (unint64_t)operator new(v100);
  else
    v101 = 0;
  v102 = (char *)(v101 + v100);
  v97[v101] = 1;
  v95 = (uint64_t)&v97[v101 + 1];
  if (v84 == (_BYTE *)v96)
  {
    *a2 = (unint64_t)&v97[v101];
    a2[1] = v95;
    a2[2] = (unint64_t)v102;
LABEL_164:
    operator delete(v84);
    goto LABEL_165;
  }
  v103 = &v84[~v96];
  do
  {
    v104 = *--v84;
    (v103--)[v101] = v104;
  }
  while (v84 != (_BYTE *)v96);
  v84 = (_BYTE *)*a2;
  *a2 = v101;
  a2[1] = v95;
  a2[2] = (unint64_t)v102;
  if (v84)
    goto LABEL_164;
LABEL_165:
  a2[1] = v95;
  v162 = 0;
  v163 = 0;
  __p = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (const void *)*a2, v95, v95 - *a2);
  v105 = ~*a2 + a2[1];
  if (v105 < 8 || v105 > 0x7FF || v162 - (_BYTE *)__p <= v105)
  {
    if (__p)
    {
      v162 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v111 = 0;
    v112 = 8;
    v113 = 8;
    do
    {
      v111 += *((unsigned __int8 *)__p + v112);
      v112 = ++v113;
    }
    while (v105 >= v113);
    v162 = __p;
    operator delete(__p);
    if (v111 != -1)
    {
      v116 = (_BYTE *)a2[1];
      v115 = a2[2];
      if ((unint64_t)v116 >= v115)
      {
        v118 = *a2;
        v119 = &v116[-*a2];
        v120 = (unint64_t)(v119 + 1);
        if ((uint64_t)(v119 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v121 = v115 - v118;
        if (2 * v121 > v120)
          v120 = 2 * v121;
        if (v121 >= 0x3FFFFFFFFFFFFFFFLL)
          v122 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v122 = v120;
        if (v122)
          v123 = (unint64_t)operator new(v122);
        else
          v123 = 0;
        v124 = (char *)(v123 + v122);
        v119[v123] = v111;
        v117 = &v119[v123 + 1];
        if (v116 == (_BYTE *)v118)
        {
          v123 += (unint64_t)v119;
        }
        else
        {
          v125 = &v116[~v118];
          do
          {
            v126 = *--v116;
            (v125--)[v123] = v126;
          }
          while (v116 != (_BYTE *)v118);
          v116 = (_BYTE *)*a2;
        }
        *a2 = v123;
        a2[1] = (unint64_t)v117;
        a2[2] = (unint64_t)v124;
        if (v116)
          operator delete(v116);
      }
      else
      {
        *v116 = v111;
        v117 = v116 + 1;
      }
      a2[1] = (unint64_t)v117;
      v127 = a2[2];
      if ((unint64_t)v117 < v127)
      {
        *v117 = HIBYTE(v111);
        v128 = (uint64_t)(v117 + 1);
        goto LABEL_214;
      }
      v129 = *a2;
      v130 = &v117[-*a2];
      v131 = (unint64_t)(v130 + 1);
      if ((uint64_t)(v130 + 1) < 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v132 = v127 - v129;
      if (2 * v132 > v131)
        v131 = 2 * v132;
      if (v132 >= 0x3FFFFFFFFFFFFFFFLL)
        v133 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v133 = v131;
      if (v133)
        v134 = (unint64_t)operator new(v133);
      else
        v134 = 0;
      v135 = (char *)(v134 + v133);
      v130[v134] = HIBYTE(v111);
      v128 = (uint64_t)&v130[v134 + 1];
      if (v117 == (_BYTE *)v129)
      {
        *a2 = (unint64_t)&v130[v134];
        a2[1] = v128;
        a2[2] = (unint64_t)v135;
      }
      else
      {
        v136 = &v117[~v129];
        do
        {
          v137 = *--v117;
          (v136--)[v134] = v137;
        }
        while (v117 != (_BYTE *)v129);
        v117 = (_BYTE *)*a2;
        *a2 = v134;
        a2[1] = v128;
        a2[2] = (unint64_t)v135;
        if (!v117)
        {
LABEL_214:
          a2[1] = v128;
          v138 = (_BYTE *)*a2;
          v139 = v128 - *a2;
          if (v139 < 0x10000)
          {
            v142 = v139 - 8;
            v138[5] = v142;
            *(_BYTE *)(*a2 + 6) = HIBYTE(v142);
            v143 = (_BYTE *)*a2;
            v114.i32[0] = *(_DWORD *)(*a2 + 2);
            v144 = vaddv_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v114)) + *(_BYTE *)(*a2 + 6);
            if (v144)
            {
              v143[7] = v144;
              v146 = (_BYTE *)a2[1];
              v145 = a2[2];
              if ((unint64_t)v146 >= v145)
              {
                v150 = *a2;
                v151 = &v146[-*a2];
                v152 = (unint64_t)(v151 + 1);
                if ((uint64_t)(v151 + 1) < 0)
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                v153 = v145 - v150;
                if (2 * v153 > v152)
                  v152 = 2 * v153;
                if (v153 >= 0x3FFFFFFFFFFFFFFFLL)
                  v154 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v154 = v152;
                if (v154)
                  v155 = (unint64_t)operator new(v154);
                else
                  v155 = 0;
                v156 = (char *)(v155 + v154);
                v151[v155] = 10;
                v147 = (uint64_t)&v151[v155 + 1];
                if (v146 == (_BYTE *)v150)
                {
                  v155 += (unint64_t)v151;
                }
                else
                {
                  v157 = &v146[~v150];
                  do
                  {
                    v158 = *--v146;
                    (v157--)[v155] = v158;
                  }
                  while (v146 != (_BYTE *)v150);
                  v146 = (_BYTE *)*a2;
                }
                *a2 = v155;
                a2[1] = v147;
                a2[2] = (unint64_t)v156;
                if (v146)
                  operator delete(v146);
              }
              else
              {
                *v146 = 10;
                v147 = (uint64_t)(v146 + 1);
              }
              a2[1] = v147;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v159 = mach_continuous_time();
                v160 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v159), "ADP", 68, "Ga23_34BuildZxProdIndProdMsg");
                LbsOsaTrace_WriteLog(0x18u, __str, v160, 5, 1);
              }
              return 1;
            }
            else
            {
              a2[1] = (unint64_t)v143;
              if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v148 = mach_continuous_time();
                v149 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ProdIndReq\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v148), "ADP", 69, "Ga23_34BuildZxProdIndProdMsg", 781);
                LbsOsaTrace_WriteLog(0x18u, __str, v149, 0, 1);
              }
              result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
              if ((_DWORD)result)
                goto LABEL_171;
            }
          }
          else
          {
            a2[1] = (unint64_t)v138;
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v140 = mach_continuous_time();
              v141 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ProdIndReq\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v140), "ADP", 69, "Ga23_34BuildZxProdIndProdMsg", 772);
              LbsOsaTrace_WriteLog(0x18u, __str, v141, 0, 1);
            }
            result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
            if ((_DWORD)result)
              goto LABEL_171;
          }
          return result;
        }
      }
      operator delete(v117);
      goto LABEL_214;
    }
  }
  a2[1] = *a2;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v106 = mach_continuous_time();
    v107 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ProdIndReq\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v106), "ADP", 69, "Ga23_34BuildZxProdIndProdMsg", 784);
    LbsOsaTrace_WriteLog(0x18u, __str, v107, 0, 1);
  }
  result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if ((_DWORD)result)
  {
LABEL_171:
    bzero(__str, 0x410uLL);
    v109 = mach_continuous_time();
    v110 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v109), "ADP", 68, "Ga23_34BuildZxProdIndProdMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v110, 5, 1);
    return 0;
  }
  return result;
}

uint64_t gnssTest::ZxFactoryHandler::Ga23_35ParseLtlRespMsg(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned __int16 v4;
  _BYTE *v5;
  unsigned __int16 v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  unsigned __int16 v11;
  char __str[1040];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v3 = mach_continuous_time();
    v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga23_35ParseLtlRespMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if ((gnssTest::ZxHandler::Ga23_03IsCheckSumValid((uint64_t)a2) & 1) == 0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      goto LABEL_10;
    goto LABEL_8;
  }
  v5 = (_BYTE *)*a2;
  if (a2[1] - *a2 <= 8uLL)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      goto LABEL_10;
LABEL_8:
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LTL Resp\n");
LABEL_9:
    LbsOsaTrace_WriteLog(0x18u, __str, v6, 0, 1);
    goto LABEL_10;
  }
  if (v5[2] != 88 || v5[3] != 86 || v5[4] != 77 || v5[8] == 32)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
      return 1;
    bzero(__str, 0x410uLL);
    v10 = mach_continuous_time();
    v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 68, "Ga23_35ParseLtlRespMsg");
    v7 = 1;
    LbsOsaTrace_WriteLog(0x18u, __str, v11, 5, 1);
    return v7;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx LTL Resp status\n");
    goto LABEL_9;
  }
LABEL_10:
  v7 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v8 = mach_continuous_time();
    v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 68, "Ga23_35ParseLtlRespMsg");
    LbsOsaTrace_WriteLog(0x18u, __str, v9, 5, 1);
    return 0;
  }
  return v7;
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_21E5825E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x2207AFCDC](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x2207AFCE8](v13);
  return a1;
}

void sub_21E58287C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
  _QWORD *v11;

  if (a2)
  {
    MEMORY[0x2207AFCE8](&a9);
    __cxa_begin_catch(exception_object);
    std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
    __cxa_end_catch();
    JUMPOUT(0x21E582840);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;
  uint64_t v19;

  v6 = a1;
  v19 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_21E582A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t GM_Get_Best_ASSS(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4;
  int v6;
  _WORD *v7;
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;

  v4 = (a4 - 1);
  if (a4 - 1 < 0)
    return 0xFFFFFFFFLL;
  v6 = 0;
  v7 = (_WORD *)(a1 + 36 * v4 + 8);
  v8 = (_BYTE *)(a2 + 48 * v4 + 12);
  v9 = 0xFFFFFFFFLL;
  do
  {
    if (Is_Legal(*((_DWORD *)v7 - 2)))
    {
      v10 = *((unsigned __int8 *)v7 - 4);
      if (v10 >= a3 && (*v7 & 0x308) == 0x208)
      {
        if (*(v8 - 8))
        {
          if (*v8)
            v11 = 70;
          else
            v11 = 64;
          v10 += v11;
          if (v8[3])
            v10 += 128;
        }
        if ((int)v10 <= v6)
        {
          v9 = v9;
        }
        else
        {
          v6 = v10;
          v9 = v4;
        }
      }
    }
    v7 -= 18;
    v8 -= 48;
  }
  while (v4-- > 0);
  return v9;
}

void *SV_Gen_Meas(int *a1, char *__dst, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int *v12;
  int *v13;
  _BYTE *v14;
  _BYTE *v15;
  int UTC_Cor;
  double v17;
  double v18;
  int v19;
  int v20;
  int v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  int *v28;
  uint64_t v29;
  int *v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  double v35;
  int v36;
  int *v37;
  _OWORD *v38;
  int v39;
  int *v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  size_t v46;
  size_t v47;
  uint64_t v48;
  int v49;
  __int128 v50;
  uint64_t v51;
  _WORD *v52;
  int v53;
  BOOL v54;
  BOOL v55;
  uint64_t v56;
  unsigned __int8 v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unsigned __int8 v61;
  unsigned __int8 v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  int v66;
  int v67;
  char v68;
  int v69;
  uint64_t v70;
  double v71;
  uint64_t v72;
  char *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  unsigned int v79;
  char *v81;
  int v82;
  int v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  char *v88;
  uint64_t v89;
  double v90;
  double v91;
  double v92;
  double v93;
  int v94;
  signed int v95;
  int v96;
  __int16 v97;
  unsigned __int16 v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  unsigned int Min_SNR;
  char *v103;
  uint64_t v104;
  uint64_t j;
  uint64_t v106;
  int v107;
  _WORD *v108;
  __int16 v109;
  int v110;
  int v111;
  BOOL v112;
  char *v113;
  int v114;
  double v115;
  double v116;
  double v117;
  int v118;
  char *v119;
  uint64_t v120;
  _WORD *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  unint64_t v125;
  char *v126;
  int v127;
  int v128;
  BOOL v129;
  int v130;
  int v131;
  int *v132;
  int v133;
  int v134;
  int v135;
  _BYTE *v136;
  int v137;
  int v138;
  double v139;
  int v140;
  unsigned int v141;
  __int16 v142;
  __int16 v143;
  __int16 v144;
  double v145;
  int v146;
  double v147;
  double v148;
  double v149;
  int v150;
  unsigned int v151;
  _BOOL4 v153;
  uint64_t v154;
  char *v155;
  uint64_t k;
  _OWORD *v157;
  unsigned int v158;
  int v159;
  char *v160;
  unsigned int v161;
  int v162;
  double v163;
  double v164;
  int v165;
  __int16 v166;
  int v167;
  int v168;
  char Pos_LLH;
  char v170;
  BOOL v171;
  uint64_t v172;
  int *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  unsigned __int8 v177;
  int v178;
  int v179;
  unint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  unint64_t v186;
  int v187;
  int v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int *v199;
  int *v200;
  int v201;
  int v202;
  uint64_t v203;
  int *v204;
  char v205;
  int v206;
  unsigned int v207;
  unsigned int v208;
  int v209;
  int v210;
  int v211;
  unsigned int v212;
  int v213;
  char *v214;
  int v215;
  _BOOL4 v216;
  double v217;
  double *v218;
  double v219;
  unsigned int v220;
  double v221;
  int *v222;
  double v223;
  unint64_t v224;
  char v225;
  double v226;
  int v227;
  int *v228;
  int v229;
  int v230;
  int v232;
  int v234;
  int v235;
  int v236;
  double v238;
  int v239;
  int v240;
  _BOOL4 v241;
  int v242;
  double v243;
  double v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  int v249;
  int v250;
  int v251;
  __int16 v252;
  double v253;
  uint64_t v254;
  char v255;
  int v256;
  uint64_t v257;
  char *v258;
  unsigned __int8 *v259;
  uint64_t v260;
  _BYTE *v261;
  _WORD *v262;
  const void *v263;
  const void *v264;
  const void *v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  char *v275;
  void *result;
  int v277;
  uint64_t v278;
  unsigned int Best_NSSS;
  _BOOL4 v280;
  void *__src;
  char *v282;
  int v283;
  double *v284;
  char v285;
  uint64_t v286;
  int v288;
  int *v289;
  __int16 *v290;
  unsigned int v291;
  __int16 *v292;
  int v293;
  char v294;
  int v295;
  double *v296;
  unsigned int v297;
  int *v298;
  int v299;
  int v300;
  int v301;
  uint64_t v302;
  char *v303;
  int v305;
  double *v306;
  int v307;
  uint64_t v308;
  char v309;
  unsigned __int8 v310;
  char v311;
  int *v314;
  unsigned int v317;
  int v318;
  int v319;
  unsigned __int8 v321[8];
  double v322;
  unsigned int v323;
  __int16 v324;
  int v325;
  uint64_t v326;
  __int128 __dsta;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  double v339[3];
  _BYTE v340[56];
  uint64_t v341;

  v12 = (int *)__dst;
  v13 = a1;
  v341 = *MEMORY[0x24BDAC8D0];
  v14 = __dst + 4420;
  v15 = (_BYTE *)(a5 + 7456);
  v326 = 0;
  v325 = 0;
  v303 = __dst + 4420;
  if (!*(_BYTE *)(a5 + 7456))
  {
    *(_QWORD *)&__dsta = 0;
    UTC_Cor = API_Get_UTC_Cor(1, (double *)&__dsta);
    v17 = -0.5;
    if (*(double *)&__dsta > 0.0)
      v17 = 0.5;
    v18 = *(double *)&__dsta + v17;
    if (v18 <= 2147483650.0)
    {
      if (v18 >= -2147483650.0)
        v19 = (int)v18;
      else
        LOBYTE(v19) = 0;
    }
    else
    {
      LOBYTE(v19) = -1;
    }
    v12 = (int *)__dst;
    if (UTC_Cor)
    {
      v20 = (char)v15[1];
      v21 = (char)v19 - v20;
      if ((char)v19 != v20)
      {
        v22 = (double)v21 * 1023000.0;
        v23 = -0.5;
        if (v22 > 0.0)
          v23 = 0.5;
        v24 = v22 + v23;
        v309 = v19;
        if (v24 <= 2147483650.0)
        {
          if (v24 >= -2147483650.0)
            v25 = (int)v24;
          else
            v25 = 0x80000000;
        }
        else
        {
          v25 = 0x7FFFFFFFLL;
        }
        v26 = a5 + 32;
        for (i = 2722; i != 4450; i += 36)
        {
          if (*(_BYTE *)(a5 + i - 2) == 2 && (*(_DWORD *)v26 || *(_DWORD *)(v26 + 4) || *(_WORD *)(v26 + 8)))
          {
            Inc_CA_Chips(v25, (int *)(v26 + 4), (int *)v26);
            EvLog_v("SV_Gen_Meas: Adj GLO ZC&CP  Con %d  SV %2d  dUTC %3d  Chip_Inc %6d", *(unsigned __int8 *)(a5 + i - 2), *(unsigned __int8 *)(a5 + i), v21, (int)v25 / 1000);
            v12 = (int *)__dst;
          }
          v26 += 56;
        }
        v15[1] = v309;
        v13 = a1;
        v14 = v303;
      }
      *v15 = 1;
    }
  }
  v307 = *(_DWORD *)a5;
  v299 = *(_DWORD *)(a5 + 4);
  v28 = v12;
  memcpy(v12, (const void *)(a5 + 2720), 0x6C0uLL);
  v286 = (uint64_t)(v28 + 432);
  memcpy(v28 + 432, (const void *)(a5 + 32), 0xA80uLL);
  v29 = 0;
  *v14 = *v15;
  v28[1104] = *(_DWORD *)(a5 + 17);
  memset(v340, 0, 48);
  v30 = v28;
  do
  {
    v31 = *v30;
    if (Is_Legal(*v30))
      v34 = v31 == 3;
    else
      v34 = 0;
    if (!v34 || (v30[2] & 8) == 0)
      goto LABEL_45;
    LOBYTE(v32) = *((_BYTE *)v30 + 4);
    LOBYTE(v33) = *((_BYTE *)v30 + 18);
    v35 = (double)v32 + (double)v33 * 0.0625;
    v36 = BYTE2(v31) - 1;
    v37 = &v13[14 * v36];
    v38 = v37 + 64;
    v39 = *(_DWORD *)a5;
    v40 = v37 + 75;
    v41 = v37[75];
    if (v41)
      v42 = *(_DWORD *)a5 - v41 < 60001;
    else
      v42 = 1;
    if (!v42)
    {
      *(_OWORD *)((char *)v38 + 40) = 0u;
      *(_OWORD *)((char *)v38 + 24) = 0u;
      *(_OWORD *)((char *)v38 + 8) = 0u;
      v44 = &v13[14 * v36 + 74];
LABEL_41:
      *v40 = v39;
      *(double *)v38 = v35;
      LODWORD(v45) = 1;
      *v44 = 1;
      v46 = 8;
      v47 = 32;
      goto LABEL_42;
    }
    v44 = &v13[14 * v36 + 74];
    v43 = *v44;
    if (v43 >= 6)
    {
      *(_OWORD *)((char *)v38 + 40) = 0u;
      *(_OWORD *)((char *)v38 + 24) = 0u;
      *(_OWORD *)((char *)v38 + 8) = 0u;
      goto LABEL_41;
    }
    *v40 = v39;
    if ((_DWORD)v43 == 5)
    {
      v50 = *(_OWORD *)((char *)v38 + 24);
      *v38 = *(_OWORD *)((char *)v38 + 8);
      v38[1] = v50;
      *((double *)v38 + 4) = v35;
      v46 = 40;
    }
    else
    {
      *((double *)v38 + v43) = v35;
      v45 = v43 + 1;
      *v44 = v43 + 1;
      v46 = 8 * (v43 + 1);
      if (v43 < 4)
      {
        v47 = 40 - 8 * v45;
        goto LABEL_42;
      }
    }
    v47 = 0;
    LODWORD(v45) = 5;
LABEL_42:
    bzero((char *)&__dsta + v46, v47);
    memcpy(&__dsta, v38, v46);
    VecMedian8((double *)&__dsta, v45);
    v13 = a1;
    *(_QWORD *)&a1[14 * v36 + 76] = v48;
    v49 = *((unsigned __int8 *)v30 + 2) - 1;
    if (!a1[14 * v49 + 74] || *(double *)&a1[14 * v49 + 76] < 14.0)
    {
      *((_WORD *)v30 + 4) &= ~8u;
      v340[v29] = 1;
    }
LABEL_45:
    ++v29;
    v30 += 9;
  }
  while (v29 != 48);
  v51 = 0;
  v52 = __dst + 8;
  do
  {
    v53 = *((_DWORD *)v52 - 2);
    if (Is_Legal(v53))
      v54 = v53 == 4;
    else
      v54 = 0;
    if (v54)
    {
      v55 = *(_DWORD *)a6 && BYTE2(v53) - 1 > 4;
      if (!v55 && (*v52 & 8) != 0)
      {
        *v52 &= ~8u;
        v340[v51] = 1;
      }
    }
    ++v51;
    v52 += 18;
  }
  while (v51 != 48);
  v56 = 0;
  v57 = 0;
  v58 = __dst;
  do
  {
    v59 = v58;
    if (Is_Legal(*(_DWORD *)&v58[v56]))
    {
      v58 = v59;
      if ((*(_WORD *)&v59[v56 + 8] & 8) != 0 && v59[v56 + 4] > v57)
        v57 = v59[v56 + 4];
    }
    else
    {
      v58 = v59;
    }
    v56 += 36;
  }
  while (v56 != 1728);
  if (v57 >= 0x1Eu)
  {
    v60 = 0;
    v61 = v57 - 21;
    v62 = v57 - 24;
    v63 = a5 + 32;
    v64 = v340;
    while (1)
    {
      v65 = (uint64_t)&v58[v60];
      v66 = *(_DWORD *)&v58[v60];
      v67 = Is_Legal(v66);
      v58 = __dst;
      if (!v67 || (*(_WORD *)(v65 + 8) & 8) == 0 || *v64 || __dst[v60 + 4] >= v61)
        goto LABEL_86;
      if (v66 == 5)
        break;
      if (v66 == 4)
      {
        if (BYTE2(v66) < 6u)
          goto LABEL_86;
        v69 = GM_CrossCorr_Protection(4, v62, v65, v63, a7);
        v58 = __dst;
        if (!v69)
          goto LABEL_86;
LABEL_85:
        *v64 = 1;
        goto LABEL_86;
      }
      if (v66 == 1)
        break;
LABEL_86:
      v60 += 36;
      ++v64;
      v63 += 56;
      if (v60 == 1728)
        goto LABEL_87;
    }
    v68 = GM_CrossCorr_Protection(6, v62, v65, v63, a7);
    v58 = __dst;
    if ((v68 & 1) == 0)
      goto LABEL_86;
    goto LABEL_85;
  }
LABEL_87:
  *((_DWORD *)v58 + 1682) = *(_DWORD *)a9;
  v303[2356] = *(_BYTE *)(a9 + 4);
  v303[2312] = *(_BYTE *)(a9 + 5);
  v70 = *(_QWORD *)(a9 + 8);
  *((_QWORD *)v58 + 846) = v70;
  v292 = (__int16 *)(v58 + 6734);
  *((_WORD *)v58 + 3367) = *(_WORD *)(a9 + 16);
  v306 = (double *)(v58 + 6736);
  *((_QWORD *)v58 + 842) = *(_QWORD *)(a9 + 24);
  v71 = *(double *)(a9 + 32);
  v284 = (double *)(v58 + 6784);
  *((_DWORD *)v58 + 1686) = *(_DWORD *)(a9 + 60);
  *((_WORD *)v58 + 3374) = *(_WORD *)(a9 + 66);
  v303[2330] = *(_BYTE *)(a9 + 64);
  v290 = (__int16 *)(v58 + 6752);
  *((_WORD *)v58 + 3376) = *(_WORD *)(a9 + 68);
  v296 = (double *)(v58 + 6760);
  *((_QWORD *)v58 + 845) = *(_QWORD *)(a9 + 72);
  *((double *)v58 + 848) = v71 + *(double *)(a9 + 40) * ((double)(v307 - (int)v70) * 0.001);
  v72 = -2304;
  do
  {
    v73 = &v58[v72 + 6728];
    *(_OWORD *)(v73 + 29) = 0uLL;
    *(_OWORD *)v73 = 0uLL;
    *((_OWORD *)v73 + 1) = 0uLL;
    v72 += 48;
  }
  while (v72);
  v310 = 0;
  v74 = 47;
  v75 = 1728;
  v76 = 6695;
  v77 = 6680;
  while (2)
  {
    v78 = &v58[v75];
    v79 = v58[v75 - 36];
    if (v79 <= 6 && v79 != 0)
    {
      if (v79 == 2)
      {
        v81 = &v58[v75];
        v82 = *(_DWORD *)(a8 + 4 * v58[v75 - 33] + 16460);
        if (v82 != 2139062143)
        {
          *(v81 - 34) = v82;
          if (!(_BYTE)v82)
            goto LABEL_108;
          goto LABEL_105;
        }
        *(v81 - 34) = 0;
        if ((*((_WORD *)v81 - 14) & 0x200) != 0)
          *((_WORD *)v81 - 14) &= 0xFCFFu;
LABEL_108:
        if (*(v78 - 36) != 2 && (unsigned __int16)g_Enable_Event_Log >= 3u)
        {
          EvLog_d("SV_Gen_Meas: index fail", v74);
          v58 = __dst;
        }
      }
      else if (v79 != 6)
      {
        if (!v58[v75 - 34])
          goto LABEL_108;
LABEL_105:
        v83 = GNSS_Id_To_Num_Prn_Idx(*((_DWORD *)v78 - 9));
        if (*(char *)(a7 + v83 + 3996) < 0)
        {
          v58 = __dst;
        }
        else
        {
          v58 = __dst;
          v84 = &__dst[v77];
          v85 = a7 + 48 * *(unsigned __int8 *)(a7 + v83 + 3996);
          v86 = *(_OWORD *)(v85 + 60);
          v87 = *(_OWORD *)(v85 + 92);
          *((_OWORD *)v84 + 1) = *(_OWORD *)(v85 + 76);
          *((_OWORD *)v84 + 2) = v87;
          *(_OWORD *)v84 = v86;
          if (__dst[v76 - 11])
            v310 |= __dst[v76] != 0;
        }
        if ((*(_WORD *)&v58[v75 - 28] & 0x200) != 0 && (!*(_BYTE *)(a8 + v83 + 33605) || *(_BYTE *)(a6 + v83 + 253)))
          *(_WORD *)&v58[v75 - 28] &= 0xFCFFu;
      }
    }
    --v74;
    v76 -= 48;
    v77 -= 48;
    v75 -= 36;
    if (v75)
      continue;
    break;
  }
  v88 = v58 + 6796;
  *(_OWORD *)(v58 + 6956) = 0u;
  *(_OWORD *)(v58 + 6972) = 0u;
  *(_OWORD *)(v58 + 6924) = 0u;
  *(_OWORD *)(v58 + 6940) = 0u;
  *(_OWORD *)(v58 + 6892) = 0u;
  *(_OWORD *)(v58 + 6908) = 0u;
  *(_OWORD *)(v58 + 6860) = 0u;
  *(_OWORD *)(v58 + 6876) = 0u;
  *(_OWORD *)(v58 + 6828) = 0u;
  *(_OWORD *)(v58 + 6844) = 0u;
  *(_OWORD *)(v58 + 6796) = 0u;
  *(_OWORD *)(v58 + 6812) = 0u;
  __src = v58 + 6992;
  bzero(v58 + 6992, 0x600uLL);
  GM_Inc_Local_Time(v307, (uint64_t)__dst);
  v89 = (uint64_t)__dst;
  *((_DWORD *)__dst + 1693) = v299;
  v90 = *((double *)__dst + 848);
  if (fabs(v90) > 0.00055)
    *((_BYTE *)a1 + 4) = 1;
  if (v303[2312] && *((_BYTE *)a1 + 4))
  {
    v91 = v90 * 1000.0;
    v92 = -0.5;
    if (v91 > 0.0)
      v92 = 0.5;
    v93 = v91 + v92;
    if (v93 <= 2147483650.0)
    {
      if (v93 >= -2147483650.0)
        v94 = (int)v93;
      else
        v94 = 0x80000000;
    }
    else
    {
      v94 = 0x7FFFFFFF;
    }
    Inc_Local_Time(-v94, 86400, v296, v290);
    v95 = *((__int16 *)__dst + 3376);
    v96 = *((unsigned __int16 *)__dst + 3374);
    if (v95 >= 1462)
    {
      if (v95 >= 2922)
        v97 = 2922;
      else
        v97 = *((_WORD *)__dst + 3376);
      v98 = v95 - v97 + 1460;
      v95 = v95 - 1461 * (v98 / 0x5B5u) - 1461;
      v96 += v98 / 0x5B5u + 1;
      *((_WORD *)__dst + 3376) = v95;
      *((_WORD *)__dst + 3374) = v96;
    }
    if ((__int16)v95 <= 0)
    {
      if ((__int16)v95 <= -1460)
        v142 = -1460;
      else
        v142 = v95;
      v143 = (unsigned __int16)(v142 - v95 - ((__int16)v95 < -1460)) / 0x5B5u;
      if ((__int16)v95 < -1460)
        ++v143;
      v144 = v96 + ~v143;
      *((_WORD *)__dst + 3376) = v95 + 1461 * v143 + 1461;
      *((_WORD *)__dst + 3374) = v144;
      if (v144 < 0)
        goto LABEL_202;
    }
    else
    {
      if ((v96 & 0x8000) == 0)
        goto LABEL_135;
LABEL_202:
      *((_WORD *)__dst + 3374) = 0;
    }
LABEL_135:
    GM_Apply_LT_Slew(v284, v292, v306, (_WORD *)a1 + 2);
    v89 = (uint64_t)__dst;
    if (*((_BYTE *)a1 + 5) && *((_WORD *)a1 + 3))
    {
      v99 = 0;
      v100 = -1575420 * *((__int16 *)a1 + 3);
      v101 = (uint64_t)a1 + 255;
      do
      {
        if (*(_BYTE *)(v101 + v99))
          *(_DWORD *)(v101 + 4 * v99 - 51) += v100;
        --v99;
      }
      while (v99 != -48);
    }
  }
  else
  {
    *((_WORD *)a1 + 3) = 0;
    *((_BYTE *)a1 + 5) = 0;
  }
  v282 = v88;
  Min_SNR = GM_Get_Min_SNR(v89, 48);
  v103 = __dst + 4424;
  GM_Prop_AAD(*((unsigned int *)__dst + 1692), 48, (uint64_t)(__dst + 4424));
  v104 = (uint64_t)__dst;
  if (v303[2312] && *((int *)__dst + 1682) >= 7 && *(_BYTE *)(a4 + 1) && *(_DWORD *)(a4 + 12) == 3)
  {
    for (j = 0; j != 48; ++j)
    {
      v106 = v104 + 36 * j;
      v107 = GM_Gen_SV_Meas_QI(v106);
      v108 = (_WORD *)(v106 + 8);
      v109 = *(_WORD *)(v106 + 8);
      v110 = *(_DWORD *)v106;
      v111 = Is_Legal(v110);
      v104 = (uint64_t)__dst;
      if (v111)
        v112 = v107 < 8;
      else
        v112 = 1;
      if (!v112 && (v109 & 0x300u) >= 0x200 && __dst[48 * j + 4428] && __dst[48 * j + 4439])
      {
        v113 = &__dst[56 * j];
        v114 = *((_DWORD *)v113 + 432);
        LODWORD(v113) = (unint64_t)(2149582851 * *((int *)v113 + 433)) >> 32;
        v115 = (double)(int)(((int)v113 >> 9) + (v113 >> 31) + 1500 * v114) * 0.001;
        v116 = *((double *)__dst + 842);
        v117 = v116 - v115;
        if (v110 == 2)
        {
          while (v117 >= 43200.0)
          {
            v115 = v115 + 86400.0;
            v117 = v116 - v115;
          }
          while (v117 < -43200.0)
          {
            v115 = v115 + -86400.0;
            v117 = v116 - v115;
          }
        }
        if (v117 >= 302400.0)
        {
          v117 = v117 + -604800.0;
        }
        else if (v117 < -302400.0)
        {
          v117 = v117 + 604800.0;
        }
        if (fabs(v117) > 3.0)
        {
          *v108 = v109 & 0xFCFF;
          EvLog_v("SV_Gen_Meas: SF Sync Rej ! Ch %d, SF Sync %d, d_TOW %g", j, (unsigned __int16)(v109 & 0x300) >> 8, v117);
          v104 = (uint64_t)__dst;
        }
      }
    }
  }
  GM_Cross_Constell(v104, a8);
  GM_Get_Best_SyncSV(v286, (uint64_t)__dst, (uint64_t)v103, Min_SNR, 48, (_DWORD *)&v326 + 1, &v326);
  Best_NSSS = GM_Get_Best_NSSS((uint64_t)__dst, (uint64_t)v103, Min_SNR, 48);
  v118 = GM_Adjust_AAD(v326, Best_NSSS, v286, 48, (uint64_t)v103);
  v119 = __dst;
  v120 = 0;
  *((_DWORD *)__dst + 1698) = v118;
  v121 = (_WORD *)(a3 + 96);
  v122 = -2304;
  v123 = 1732;
  do
  {
    v124 = Is_Legal(*(_DWORD *)&v119[v120]);
    v119 = __dst;
    if (v124)
    {
      v126 = &__dst[v123];
      v127 = *(_DWORD *)&__dst[v123];
      v128 = *(_DWORD *)&__dst[v122 + 6760];
      v129 = __OFSUB__(v127, v128);
      v130 = v127 - v128;
      if (v130 < 0 != v129)
        v130 += 1534500;
      v131 = v130 % 1023;
      if (v131 > 512)
        LOWORD(v131) = v131 - 1023;
      *(v121 - 48) = v131;
      *v121 = *((_DWORD *)v126 + 2) / 256 - *(_WORD *)&__dst[v122 + 6750];
      v121[48] = *((_DWORD *)v126 + 3) / 256 - *(_WORD *)&__dst[v122 + 6750];
    }
    v120 += 36;
    v123 += 56;
    v122 += 48;
    ++v121;
  }
  while (v120 != 1728);
  v325 = 0;
  v132 = a1;
  v133 = a1[3];
  v134 = *((_DWORD *)__dst + 1682);
  if (v133 <= 4)
    v135 = v133 > 2;
  else
    v135 = 2;
  v283 = v135;
  if (v133 <= 4)
  {
    v136 = v303;
    if (v133 >= 3 && v134 < 9)
      goto LABEL_181;
LABEL_184:
    if (v134 == 11)
    {
      v280 = 0;
      v136[2356] = 1;
      a1[3] = 6;
    }
    else
    {
      if (v133 <= 4 && (v326 & 0x8000000000000000) == 0)
        goto LABEL_188;
      v137 = v326;
      if (v133 <= 2 && (v326 & 0x80000000) == 0)
        goto LABEL_190;
      if ((Best_NSSS & 0x80000000) == 0 && !v133)
        goto LABEL_189;
      v280 = *((__int16 *)__dst + 3367) > *(__int16 *)(a9 + 16);
    }
  }
  else
  {
    v136 = v303;
    if (v134 >= 9)
      goto LABEL_184;
LABEL_181:
    v136[2356] = 0;
    a1[3] = 2;
    if (v326 < 0)
    {
      v137 = v326;
      if ((v326 & 0x80000000) != 0)
        goto LABEL_268;
      goto LABEL_190;
    }
LABEL_188:
    v137 = v326;
LABEL_189:
    if (v137 < 0)
    {
      if ((Best_NSSS & 0x80000000) != 0)
        goto LABEL_268;
      GM_Set_MSec_TOW_NSSS((uint64_t)&__dst[56 * Best_NSSS + 1728], (uint64_t)&__dst[48 * Best_NSSS + 4424], v306, &v325, 604800.0);
      v119 = __dst;
      v136[2356] = 0;
      v280 = 1;
      a1[3] = 1;
    }
    else
    {
LABEL_190:
      v138 = v137;
      if (__dst[48 * v137 + 4428])
      {
        LOWORD(v125) = *(_WORD *)&__dst[48 * v137 + 4440];
        v139 = (double)v125 * 0.5;
      }
      else
      {
        v140 = *(_DWORD *)&__dst[36 * v137];
        switch(*(_DWORD *)&__dst[36 * v138])
        {
          case 2u:
            v141 = 73;
            break;
          case 3u:
            v141 = 87;
            break;
          case 4u:
            if ((v140 & 0xFF0000u) <= 0xA0000)
              v141 = 129;
            else
              v141 = 81;
            break;
          case 5u:
          case 6u:
            v141 = 129;
            break;
          default:
            v141 = 77;
            break;
        }
        v139 = (double)v141;
      }
      GM_Set_MSec_TOT_SSS((uint64_t)&__dst[56 * v138 + 1728], v139, 604800.0, *((double *)__dst + 842));
      v119 = __dst;
      v146 = *((_DWORD *)__dst + 1682);
      if (!v146)
      {
        if (v145 >= 0.0)
        {
          if (v145 >= 604800.0)
            v145 = v145 + -604800.0;
        }
        else
        {
          v145 = v145 + 604800.0;
        }
      }
      v147 = (v145 - *v306) * 1000.0;
      v148 = -0.5;
      if (v147 > 0.0)
        v148 = 0.5;
      v149 = v147 + v148;
      if (v149 <= 2147483650.0)
      {
        if (v149 >= -2147483650.0)
          v150 = (int)v149;
        else
          v150 = 0x80000000;
      }
      else
      {
        v150 = 0x7FFFFFFF;
      }
      v325 = v150;
      *v306 = v145;
      if (v150 >= 0)
        v151 = v150;
      else
        v151 = -v150;
      v153 = v146 > 1 && v151 > 0xEA60;
      if (v153)
      {
        v154 = 0;
        *((_DWORD *)__dst + 1686) = 0;
        do
        {
          v155 = &__dst[v154 + 4424];
          *(_OWORD *)(v155 + 29) = 0uLL;
          *(_OWORD *)v155 = 0uLL;
          *((_OWORD *)v155 + 1) = 0uLL;
          v154 += 48;
        }
        while (v154 != 2304);
        for (k = 60; k != 3996; k += 48)
        {
          v157 = (_OWORD *)(a7 + k);
          *(_OWORD *)((char *)v157 + 29) = 0uLL;
          *v157 = 0uLL;
          v157[1] = 0uLL;
        }
        v310 = 0;
      }
      v158 = (unsigned __int16)g_Enable_Event_Log;
      if ((unsigned __int16)g_Enable_Event_Log >= 3u)
      {
        EvLog_v("GLO_TIM: SV_Gen_Meas GPS set %g   TOW_adjust %d ms", *v306, v150);
        v119 = __dst;
        v158 = (unsigned __int16)g_Enable_Event_Log;
      }
      v159 = v326;
      if (v158 >= 2 && (v326 & 0x80000000) == 0)
      {
        v160 = &v119[36 * v326];
        if (*v160 == 4)
        {
          v161 = v160[2];
          if (v161 >= 0x1F)
          {
            EvLog_v("SV_Gen_Meas: Warning, BestASSS  BDS SV%d", v161);
            v119 = __dst;
            v159 = v326;
          }
        }
      }
      if (((v119[48 * v159 + 4428] == 0) & v310) != 0)
        v162 = 8;
      else
        v162 = 9;
      *((_DWORD *)v119 + 1682) = v162;
      if (v119[36 * v159] == 2)
      {
        *(_QWORD *)&__dsta = 0;
        API_Get_UTC_Cor(1, (double *)&__dsta);
        v163 = -86400.0;
        v164 = *v306 + floor(*v306 / 86400.0) * -86400.0 + 10800.0 - *(double *)&__dsta;
        *v296 = v164;
        if (v164 >= 86400.0 || (v163 = 86400.0, v164 < 0.0))
        {
          v164 = v164 + v163;
          *v296 = v164;
        }
        v119 = __dst;
        v162 = *((_DWORD *)__dst + 1682);
        if (*((_DWORD *)__dst + 1686) < v162 && (*(_DWORD *)(a8 + 8444) - 2) <= 4)
          *((_DWORD *)__dst + 1686) = v162;
        if ((unsigned __int16)g_Enable_Event_Log >= 3u)
        {
          EvLog_v("GLO_TIM: SV_Gen_Meas GPS-Glon set %g", v164);
          v119 = __dst;
          v162 = *((_DWORD *)__dst + 1682);
        }
      }
      if (v162 == 9)
      {
        if (v326 < 0 || HIDWORD(v326) != (_DWORD)v326)
        {
          a1[3] = 3;
          v136[2356] = 0;
          v283 = 1;
          goto LABEL_268;
        }
        a1[3] = 5;
        v280 = 1;
        v136[2356] = 1;
        v283 = 2;
      }
      else
      {
        if (!v153)
        {
          GM_Prop_AAD((*((_DWORD *)v119 + 1692) + v150), 48, (uint64_t)v103);
          v119 = __dst;
          v325 = 0;
        }
LABEL_268:
        v280 = 1;
      }
    }
  }
  if (v136[2312])
  {
    v165 = *((_DWORD *)v119 + 1682);
    if (v165 >= 1 && v165 >= *((_DWORD *)v119 + 1686))
    {
      LODWORD(v339[0]) = 0;
      LODWORD(v322) = 0;
      *(_QWORD *)&__dsta = 0;
      API_Get_UTC_Cor(1, (double *)&__dsta);
      GPS_To_Glon_Time(0, *v292, *v306, *(double *)&__dsta, (int *)&v322, (int *)v339, v296);
      v119 = __dst;
      v166 = LOWORD(v339[0]);
      if (!v136[2330] || LODWORD(v339[0]) != *v290)
      {
        if ((unsigned __int16)g_Enable_Event_Log >= 3u)
        {
          EvLog_v("SV_Gen_Meas: GPS_GLO %d %d ", *v290, LODWORD(v339[0]));
          v119 = __dst;
        }
        *((_WORD *)v119 + 3374) = LOWORD(v322);
        *((_WORD *)v119 + 3376) = v166;
        v136[2330] = 1;
      }
      v167 = *((_DWORD *)v119 + 1682);
      if (*((_DWORD *)v119 + 1686) < v167 && (*(_DWORD *)(a8 + 8444) - 2) <= 4)
        *((_DWORD *)v119 + 1686) = v167;
    }
  }
  *(_BYTE *)(a6 + 47) = 0;
  v168 = *a1;
  v324 = 0;
  v323 = 0;
  *(_QWORD *)v321 = 0;
  v322 = 0.0;
  Pos_LLH = Core_Get_Pos_LLH(*((_DWORD *)v119 + 1692), 150000, 0, (int *)&v323, (uint64_t)&__dsta, (uint64_t)v339, (uint64_t *)&v322, (_BYTE *)&v324 + 1, &v324, (int *)v321, (int *)&v321[4]);
  if ((*(_DWORD *)&v321[4] - 3) < 2)
    v170 = Pos_LLH;
  else
    v170 = 0;
  v285 = v170;
  v171 = 1;
  if (!*(_DWORD *)(a7 + 48))
  {
    if (*(_DWORD *)(a6 + 52) <= 4u)
    {
      v172 = 0;
      v337 = 0u;
      v338 = 0u;
      v335 = 0u;
      v336 = 0u;
      v333 = 0u;
      v334 = 0u;
      v331 = 0u;
      v332 = 0u;
      v329 = 0u;
      v330 = 0u;
      v173 = (int *)__dst;
      __dsta = 0u;
      v328 = 0u;
      do
      {
        if (Is_Legal(*v173))
          *(_DWORD *)((char *)&__dsta + v172) = GM_Gen_SV_Meas_QI((uint64_t)v173);
        v172 += 4;
        v173 += 9;
      }
      while (v172 != 192);
      GM_Reject_Rep_SV((uint64_t)__dst, 0x30u, (uint64_t)&__dsta);
      v174 = __dst;
      v175 = 0;
      v176 = 0;
      v177 = 0;
      v178 = 0;
      v179 = 0;
      LOWORD(v180) = *(_WORD *)(a7 + 26);
      v181 = (int)((double)v180 * 1.57542);
      if (v181 <= 50)
        v181 = 50;
      v317 = v181;
      v182 = 4446;
      v183 = 1740;
      v184 = 4428;
      do
      {
        if (Is_Legal(*(_DWORD *)&v174[v175]) && *(int *)((char *)&__dsta + v176) >= 10)
        {
          v174 = __dst;
          if (*(unsigned __int16 *)&__dst[v175 + 12] >= 0x3E8u && __dst[v184])
          {
            v185 = *(_DWORD *)&__dst[v183] / 256 - *(__int16 *)&__dst[v182];
            if (v185 < 0)
              v185 = *(__int16 *)&__dst[v182] - *(_DWORD *)&__dst[v183] / 256;
            if (v185 > v317)
              ++v179;
            ++v178;
            if (__dst[v175 + 4] > v177)
              v177 = __dst[v175 + 4];
          }
        }
        else
        {
          v174 = __dst;
        }
        v176 += 4;
        v175 += 36;
        v182 += 48;
        v183 += 56;
        v184 += 48;
      }
      while (v176 != 192);
      v171 = v179 < 1;
      if (v179 <= 0)
      {
        if (v178 < 1)
          goto LABEL_317;
        v339[0] = 0.0;
        v322 = 0.0;
        if ((Core_Get_Clk_Drift(*((_DWORD *)v174 + 1692), 300, &v323, v339, &v322, &v321[4]) & 1) == 0)
          goto LABEL_317;
        v186 = 0x43ABC16D674EC800;
        v187 = (int)(v339[0] * 1000000000.0) - *(__int16 *)(a7 + 24);
        LOWORD(v186) = *(_WORD *)(a7 + 26);
        v188 = (int)sqrt(v322 * 1.0e18 + (double)v186 * 0.333333333 * ((double)v186 * 0.333333333));
        if (v187 < 0)
          v187 = *(__int16 *)(a7 + 24) - (int)(v339[0] * 1000000000.0);
        if (v187 <= 3 * v188)
          goto LABEL_317;
LABEL_314:
        *(_BYTE *)(p_NA + 8) = 0;
        v189 = *(unsigned __int16 *)(a6 + 248);
        if (*(_WORD *)(a6 + 248))
        {
          *(_QWORD *)(a6 + 992) = 0;
          *(double *)(a6 + 1000) = (double)v189 * 0.000000001;
        }
        EvCrt_v("SV_Gen_Meas: eFA GOH Triggered: #Dopp %d #DoppDiscrp %d loud_SNR %d oscFrqUnc %d ", v178, v179, v177, v317);
      }
      else
      {
        if (v177 > 0x18u || v179 != 1)
          goto LABEL_314;
LABEL_317:
        v171 = 1;
      }
    }
    v132 = a1;
  }
  v190 = 0;
  v191 = 0;
  v192 = 0;
  v291 = 0;
  v305 = v307 - v168;
  v328 = 0u;
  v329 = 0u;
  v193 = v132 + 52;
  v278 = a11 + 416;
  __dsta = 0u;
  v194 = 1748;
  v195 = 1699;
  v196 = 4424;
  v197 = 4446;
  v311 = !v171;
  v198 = 4428;
  v199 = (int *)__dst;
  v314 = v193;
  while (2)
  {
    v200 = &v199[v190];
    v201 = v340[v192];
    if (v340[v192])
    {
      v202 = 8;
      goto LABEL_346;
    }
    v318 = v340[v192];
    v203 = v196;
    v204 = &v199[v190];
    v202 = GM_Gen_SV_Meas_QI((uint64_t)v200);
    v205 = v311;
    if (v202 < 11)
      v205 = 1;
    if ((v205 & 1) != 0)
      goto LABEL_344;
    v193 = v314;
    v199 = (int *)__dst;
    v196 = v203;
    v201 = v318;
    v200 = v204;
    if (*(_DWORD *)(a6 + 52) <= 4u && __dst[v198] && ((v285 & 1) != 0 || *(_DWORD *)a6 == 1))
    {
      v206 = *(_DWORD *)&__dst[v191 * 4 + 1740] / 256;
      v207 = *(unsigned __int16 *)&__dst[v197 - 4];
      v208 = 3 * v207;
      if (v207 < 0xB8)
        v208 = 550;
      if (*(_BYTE *)(a6 + 1132) && (v209 = *(_DWORD *)&__dst[v191 * 4 + 1744]) != 0)
      {
        v210 = *(_DWORD *)&__dst[v191 * 4 + 1744] / 256;
        v211 = v206 - v210;
      }
      else
      {
        v210 = 0;
        v211 = 0;
      }
      v212 = v211 >= 0 ? v211 : -v211;
      if (v212 > v208 || (v213 = *(__int16 *)&__dst[v197], v206 > (int)(v208 + v213)) || v206 < (int)(v213 - v208))
      {
        v288 = v211;
        v293 = v210;
        v297 = v208;
        v300 = *(_DWORD *)&__dst[v191 * 4 + 1740] / 256;
        if (Is_Legal(*v204))
        {
          *(_BYTE *)(a11 + v192 + 365) |= 1u;
          *(_DWORD *)(v278 + 4 * v192) = *((_DWORD *)__dst + 1692);
          EvCrt_v("ChanReset %d : SVGM %d %d   Dopp %d %d %d AA %d %d", v192, __dst[v190 * 4 + 2], __dst[v190 * 4], v300, v293, v288, *(__int16 *)&__dst[v197], v297);
          v199 = (int *)__dst;
          v202 = 4;
LABEL_345:
          v193 = v314;
          v196 = v203;
          v201 = v318;
          v200 = v204;
          goto LABEL_346;
        }
        v202 = 4;
LABEL_344:
        v199 = (int *)__dst;
        goto LABEL_345;
      }
    }
LABEL_346:
    if (v202 >= 4 && *(_BYTE *)v200 == 6)
      ++*(_BYTE *)(a6 + 47);
    v214 = (char *)&v199[v190];
    v215 = v199[v190 + 2] & 0x308;
    v216 = v215 == 776;
    *((_BYTE *)&__dsta + v192) = v216;
    v217 = 0.00390625;
    v218 = (double *)&v199[v194];
    v218[48] = (double)v199[v191 + 435] * 0.00390625;
    v219 = (double)v199[v191 + 436];
    v339[0] = 0.0;
    v218[96] = v219 * 0.00390625;
    v220 = LOBYTE(v199[v190]);
    v221 = 0.0;
    if (v220 <= 6 && LOBYTE(v199[v190]) && v220 != 6)
    {
      v308 = v196;
      if (v202 < 11)
        goto LABEL_412;
      v298 = v200;
      v319 = v201;
      v222 = &v199[v191 + 432];
      v223 = *v306;
      if (v215 == 776)
      {
        v294 = 0;
        v301 = 1;
      }
      else
      {
        v302 = (uint64_t)v199 + v196;
        v289 = &v199[v191 + 432];
        if ((GM_Aid_NSSS_Meas((uint64_t)v199 + v196, 3u, v222) & 1) != 0)
        {
          v294 = 0;
          v301 = 1;
          v199 = (int *)__dst;
          v222 = v289;
        }
        else
        {
          v222 = v289;
          if ((Best_NSSS & 0x80000000) != 0
            || a1[3] < 1
            || (v225 = GM_Aid_NSSS_Meas(v302, 0, v289), v222 = v289, (v225 & 1) == 0))
          {
            if ((*((_WORD *)v214 + 4) & 0x308) != 0x208)
            {
              v216 = 0;
              v199 = (int *)__dst;
              LOWORD(v224) = *(_WORD *)&__dst[v191 * 4 + 1736];
              v244 = (double)(1023 * (*(_DWORD *)&__dst[v191 * 4 + 1732] / 1023)
                            - *(_DWORD *)&__dst[v191 * 4 + 1732]
                            + 1023)
                   + (double)v224 * -0.0000152587891;
              v217 = 293.052256;
              v221 = v244 * 293.052256;
              v339[0] = v244 * 293.052256;
              *((_BYTE *)&__dsta + v192) = 0;
              goto LABEL_372;
            }
            v301 = 0;
            v294 = 1;
          }
          else
          {
            v294 = 0;
            v301 = 1;
          }
          v199 = (int *)__dst;
        }
      }
      v226 = Comp_Sig_TOT(*v222, v199[v191 + 433], LOWORD(v199[v191 + 434]), v223, 604800.0);
      v216 = v301;
      *((_BYTE *)&__dsta + v192) = v301;
      v217 = -1.0;
      if (v226 < -1.0)
      {
        v199 = (int *)__dst;
LABEL_372:
        v193 = v314;
        v196 = v308;
        v201 = v319;
        goto LABEL_412;
      }
      v217 = *v306;
      v221 = (*v306 - v226) * 299792458.0;
      v339[0] = v221;
      if (fabs(v221) >= 2130706430.0)
        v227 = 2130706432;
      else
        v227 = (int)v221;
      v228 = v298;
      v229 = *(unsigned __int8 *)v298;
      v193 = v314;
      v201 = v319;
      if (v229 == 5)
      {
        v230 = 60000000;
        v199 = (int *)__dst;
        v196 = v308;
        if ((v294 & 1) != 0)
          goto LABEL_393;
      }
      else
      {
        v199 = (int *)__dst;
        v196 = v308;
        if (v229 != 4 || (v230 = 50000000, __dst[v190 * 4 + 2] >= 0xBu))
          v230 = 40000000;
        if ((v294 & 1) != 0)
          goto LABEL_393;
      }
      if (v283 && v303[2312] && (v227 < 5000000 || v227 > v230))
      {
        ++v291;
        v339[0] = 0.0;
        v232 = v326;
        v221 = 0.0;
        if ((v326 & 0x80000000) != 0 || !LOBYTE(v199[12 * v326 + 1107]))
        {
          v202 = 6;
        }
        else
        {
          v295 = v227;
          if (Is_Legal(*v298))
          {
            *(_BYTE *)(a11 + v192 + 365) |= 1u;
            *(_DWORD *)(v278 + 4 * v192) = *((_DWORD *)__dst + 1692);
            v277 = v232;
            v202 = 6;
            EvCrt_v("ChanReset %d : SVGM %d %d   PR %d %d %d %d  iBest %d %d %d", v192, __dst[v190 * 4 + 2], __dst[v190 * 4], 6, v301, v283, v295, HIDWORD(v326), v277, Best_NSSS);
            v227 = v295;
            v228 = v298;
            v216 = v301;
            v199 = (int *)__dst;
            v193 = v314;
            v196 = v308;
            v201 = v319;
          }
          else
          {
            v202 = 6;
            v199 = (int *)__dst;
            v193 = v314;
            v196 = v308;
            v201 = v319;
            v227 = v295;
            v228 = v298;
            v216 = v301;
          }
        }
        goto LABEL_398;
      }
LABEL_393:
      if (v227 < 5000000 || v227 > v230)
      {
        ++v291;
        v339[0] = 0.0;
        v202 = 7;
        v221 = 0.0;
      }
LABEL_398:
      v234 = *(unsigned __int8 *)v228;
      if (v234 == 5)
      {
        v235 = 20000000;
      }
      else
      {
        if (v234 != 4 || BYTE2(v199[v190]) >= 0xBu)
        {
          v236 = 27000000;
          v235 = 18000000;
          goto LABEL_405;
        }
        v235 = 30000000;
      }
      v236 = 50000000;
LABEL_405:
      if (v303[2312] && v199[1682] >= 9 && (v227 < v235 || v227 > v236))
        *((_BYTE *)a1 + 4) = 1;
LABEL_412:
      if (v305 > HIWORD(v199[v190 + 3]))
        *((_BYTE *)v193 + v192) = 0;
      if (v202 < 15)
      {
        if (v202 < 11)
          goto LABEL_352;
        if (!v216)
          goto LABEL_426;
      }
      else
      {
        LOWORD(v217) = v199[v191 + 437];
        v238 = (double)v199[v191 + 438] + (double)*(unint64_t *)&v217 * 0.0000152587891;
        if (*((_BYTE *)v193 + v192))
        {
          v239 = a1[v192 + 4];
        }
        else
        {
          v243 = v221 + 8993773.74;
          if (v221 > 329771.704)
            v243 = v221;
          v239 = (int)-(v238 - v243 * 5.25503547);
          a1[v192 + 4] = v239;
          *((_BYTE *)v193 + v192) = 1;
        }
        *(double *)&v199[v194 + 288] = v238 + (double)v239;
        if (!v216)
        {
LABEL_426:
          v242 = 10;
          goto LABEL_427;
        }
      }
      v322 = 0.0;
      v240 = v201;
      v241 = R8_EQ(v339, &v322);
      v201 = v240;
      v196 = v308;
      v193 = v314;
      v199 = (int *)__dst;
      if (v241)
        v242 = 8;
      else
        v242 = v202;
LABEL_427:
      v199[v195] = v242;
      *(double *)&v199[v194] = v221;
      if (v201)
        goto LABEL_355;
      goto LABEL_356;
    }
LABEL_352:
    v199[v195] = v202;
    *(double *)&v199[v194] = v221;
    if (v202 <= 1)
    {
      v218[48] = 0.0;
      v218[96] = 0.0;
    }
    if (v201)
LABEL_355:
      *((_WORD *)v214 + 4) |= 8u;
LABEL_356:
    ++v192;
    v194 += 2;
    ++v195;
    v191 += 14;
    v196 += 48;
    v190 += 9;
    v197 += 48;
    v198 += 48;
    if (v192 != 48)
      continue;
    break;
  }
  GM_Reject_Rep_SV((uint64_t)v199, 0x30u, (uint64_t)v282);
  GM_Conv_Lock_Units(48, (uint64_t)__dst, v286);
  GM_Cross_Check_Meas_Aiding(__dst);
  v245 = __dst;
  v246 = 1746;
  v247 = 51;
  v248 = v280;
  do
  {
    if (*(int *)&__dst[4 * v246] > 14)
    {
      if (!*((_BYTE *)&__dsta + v246 - 1699))
      {
        a1[v247] = 0;
        *((_BYTE *)a1 + v246 - 1491) = 0;
        *(_DWORD *)&__dst[4 * v246] = 15;
      }
    }
    else
    {
      a1[v247] = 0;
      *((_BYTE *)a1 + v246 - 1491) = 0;
    }
    --v246;
    --v247;
  }
  while (v246 != 1698);
  v249 = *((_DWORD *)__dst + 1682);
  if (v291 >= 3)
  {
    if (v249 >= 4)
    {
      v249 = 3;
      *((_DWORD *)__dst + 1682) = 3;
      v248 = 1;
    }
    a1[3] = 0;
    *((_BYTE *)a1 + 4) = 1;
  }
  v250 = *((_DWORD *)__dst + 1692);
  *(_DWORD *)(a9 + 8) = v250;
  v251 = *((_DWORD *)__dst + 1693);
  *(_DWORD *)(a9 + 12) = v251;
  v252 = *((_WORD *)__dst + 3367);
  *(_WORD *)(a9 + 16) = v252;
  v253 = *((double *)__dst + 842);
  *(double *)(a9 + 24) = v253;
  v254 = *((_QWORD *)__dst + 848);
  *(_QWORD *)(a9 + 32) = v254;
  *(_DWORD *)a9 = v249;
  v255 = v303[2356];
  *(_BYTE *)(a9 + 4) = v255;
  v256 = v303[2312];
  *(_BYTE *)(a9 + 5) = v256;
  *(_DWORD *)(a9 + 60) = *((_DWORD *)__dst + 1686);
  *(_BYTE *)(a9 + 64) = v303[2330];
  *(_WORD *)(a9 + 66) = *((_WORD *)__dst + 3374);
  *(_WORD *)(a9 + 68) = *((_WORD *)__dst + 3376);
  *(_QWORD *)(a9 + 72) = *((_QWORD *)__dst + 845);
  if (v248 && v249 >= 7)
  {
    Core_Save_ApxTime(v256 != 0, v249, v252, v251, v253);
    v245 = __dst;
    v250 = *((_DWORD *)__dst + 1692);
    v251 = *((_DWORD *)__dst + 1693);
    v249 = *((_DWORD *)__dst + 1682);
    LOBYTE(v256) = v303[2312];
    v252 = *((_WORD *)__dst + 3367);
    v255 = v303[2356];
    v253 = *((double *)__dst + 842);
    v254 = *((_QWORD *)__dst + 848);
  }
  *(_DWORD *)a10 = v250;
  *(_DWORD *)(a10 + 4) = v251;
  *(_DWORD *)(a10 + 8) = v249;
  *(_BYTE *)(a10 + 14) = v256;
  *(_WORD *)(a10 + 16) = v252;
  *(_BYTE *)(a10 + 12) = v255;
  *(double *)(a10 + 24) = v253;
  *(_QWORD *)(a10 + 32) = v254;
  if (v325)
    *(_DWORD *)(a10 + 40) += v325;
  if (*((_BYTE *)a1 + 5))
    *(_DWORD *)(a10 + 44) = *((__int16 *)a1 + 3);
  v257 = 0;
  *(_BYTE *)(a10 + 13) = v283;
  *(_DWORD *)(a10 + 48) = *((_DWORD *)v245 + 1686);
  *(_BYTE *)(a10 + 52) = v303[2330];
  *(_WORD *)(a10 + 54) = *((_WORD *)v245 + 3374);
  *(_WORD *)(a10 + 56) = *((_WORD *)v245 + 3376);
  *(_QWORD *)(a10 + 64) = *((_QWORD *)v245 + 845);
  *(_DWORD *)(a10 + 72) = *((_DWORD *)v245 + 1104);
  v258 = v245 + 10;
  v259 = (unsigned __int8 *)(v245 + 1769);
  v260 = 3008;
  do
  {
    *(_DWORD *)(a10 + 4 * v257 + 76) = *(_DWORD *)(v258 - 10);
    v261 = (_BYTE *)(a10 + v257);
    v261[604] = *(v258 - 6);
    v261[652] = v258[8];
    v261[700] = *(v258 - 5);
    v261[748] = v258[9];
    v262 = (_WORD *)(a10 + 2 * v257);
    v262[518] = *((_WORD *)v258 + 2);
    v262[422] = *(_WORD *)v258;
    v262[470] = *((_WORD *)v258 + 1);
    v261[2864] = *(v258 - 3);
    v261[268] = *(v258 - 4);
    v262[158] = *((_WORD *)v258 - 1);
    v261[796] = *(v259 - 3);
    v262[566] = *(_WORD *)(v259 - 7);
    v261[2912] = *(v259 - 2);
    v261[2960] = *(v259 - 1);
    *(_WORD *)(a10 + v260) = *v259;
    if (*(_WORD *)(v259 - 5))
      *(_WORD *)(a10 + v260 - 240) = *(_WORD *)(v259 - 5);
    v258 += 36;
    v259 += 56;
    ++v257;
    v260 += 2;
  }
  while (v257 != 48);
  v263 = v245 + 8144;
  v264 = v245 + 7760;
  v265 = v245 + 7376;
  v266 = *(_OWORD *)v282;
  v267 = *((_OWORD *)v282 + 1);
  v268 = *((_OWORD *)v282 + 3);
  *(_OWORD *)(a10 + 444) = *((_OWORD *)v282 + 2);
  *(_OWORD *)(a10 + 460) = v268;
  *(_OWORD *)(a10 + 412) = v266;
  *(_OWORD *)(a10 + 428) = v267;
  v269 = *((_OWORD *)v282 + 4);
  v270 = *((_OWORD *)v282 + 5);
  v271 = *((_OWORD *)v282 + 7);
  *(_OWORD *)(a10 + 508) = *((_OWORD *)v282 + 6);
  *(_OWORD *)(a10 + 524) = v271;
  *(_OWORD *)(a10 + 476) = v269;
  *(_OWORD *)(a10 + 492) = v270;
  v272 = *((_OWORD *)v282 + 8);
  v273 = *((_OWORD *)v282 + 9);
  v274 = *((_OWORD *)v282 + 11);
  *(_OWORD *)(a10 + 572) = *((_OWORD *)v282 + 10);
  *(_OWORD *)(a10 + 588) = v274;
  *(_OWORD *)(a10 + 540) = v272;
  *(_OWORD *)(a10 + 556) = v273;
  v275 = v245;
  memcpy((void *)(a10 + 1232), __src, 0x180uLL);
  memcpy((void *)(a10 + 1616), v265, 0x180uLL);
  memcpy((void *)(a10 + 2000), v264, 0x180uLL);
  result = memcpy((void *)(a10 + 2384), v263, 0x180uLL);
  *a1 = *((_DWORD *)v275 + 1692);
  return result;
}

uint64_t GM_CrossCorr_Protection(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t result;
  uint64_t v7;
  char *v8;
  unsigned __int8 v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v5 = a1 - 1;
  result = 0;
  v7 = 39;
  switch(v5)
  {
    case 0:
    case 1:
    case 2:
    case 4:
      return result;
    case 3:
      v7 = 5;
      goto LABEL_3;
    case 5:
LABEL_3:
      v8 = (char *)((int)Num_Prn[v5] + a5 + 3996);
      break;
    default:
      EvCrt_Illegal_Default("GM_CrossCorr_Protection", 0x83Du);
      return 0;
  }
  while (1)
  {
    v10 = *v8++;
    v9 = v10;
    if ((v10 & 0x80000000) == 0)
    {
      v11 = (*(__int16 *)(a5 + 48 * v9 + 82) - *(_DWORD *)(a4 + 12) / 256) % 1000;
      v12 = v11 + 1000;
      if (v11 >= -500)
        v12 = v11;
      v13 = v11 <= 499 ? v12 : v11 - 1000;
      if (v13 < 0)
        v13 = -v13;
      if (v13 < 0xF || v13 <= 0x18 && *(unsigned __int8 *)(a3 + 4) < a2)
        break;
    }
    if (!--v7)
      return 0;
  }
  *(_WORD *)(a3 + 8) &= ~8u;
  return 1;
}

size_t Gnm34_00PrintTaTraceCfg(const char *a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v4;
  unsigned __int16 v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  unsigned __int16 v11;
  size_t result;
  uint64_t v13;
  unsigned __int16 v14;
  char __str[1040];
  uint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  v16 = 0x332E352E322E76;
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TA TRACECFG:%s Version,%s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm34_00PrintTaTraceCfg", a1, (const char *)&v16);
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v4 = mach_continuous_time();
    v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TA TRACECFG:CpCpuSys Sev,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 73, "Gnm34_00PrintTaTraceCfg", dword_253FFE08C);
    LbsOsaTrace_WriteLog(0xBu, __str, v5, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v6 = mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TA TRACECFG:CpCpuHostIf Sev,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm34_00PrintTaTraceCfg", BYTE1(dword_253FFE08C));
    LbsOsaTrace_WriteLog(0xBu, __str, v7, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v8 = mach_continuous_time();
    v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TA TRACECFG:CpCpuDspi Sev,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm34_00PrintTaTraceCfg", BYTE2(dword_253FFE08C));
    LbsOsaTrace_WriteLog(0xBu, __str, v9, 4, 1);
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v10 = mach_continuous_time();
    v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TA TRACECFG:MEExDLog Sev,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm34_00PrintTaTraceCfg", HIBYTE(dword_253FFE08C));
    LbsOsaTrace_WriteLog(0xBu, __str, v11, 4, 1);
  }
  result = LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
  if ((_DWORD)result)
  {
    bzero(__str, 0x410uLL);
    v13 = mach_continuous_time();
    v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TA TRACECFG:MECpuInfra Sev,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNM", 73, "Gnm34_00PrintTaTraceCfg", qword_253FFE090);
    return LbsOsaTrace_WriteLog(0xBu, __str, v14, 4, 1);
  }
  return result;
}

uint64_t Gnm34_12UpdateTaTraceCfg(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  __int128 v4;
  uint64_t v5;
  unsigned __int16 v6;
  char __str[1040];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v2 = mach_continuous_time();
      v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_SET_TA_TRACE_CONFIG\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm34_12UpdateTaTraceCfg");
      LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
    }
    v4 = *(_OWORD *)(a1 + 12);
    qword_253FFE090 = *(_QWORD *)(a1 + 28);
    g_TaLogConfig = v4;
    Gnm34_00PrintTaTraceCfg("UPDATED");
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v5 = mach_continuous_time();
    v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 69, "Gnm34_12UpdateTaTraceCfg", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v6, 0, 1);
  }
  return 0;
}

uint64_t Gnm34_15GetTaTraceCfg(int a1)
{
  uint64_t result;
  int IsLoggingAllowed;
  uint64_t v4;
  unsigned __int16 v5;
  char __str[1040];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  switch(a1)
  {
    case 1:
      result = dword_253FFE08C;
      break;
    case 2:
      result = BYTE1(dword_253FFE08C);
      break;
    case 3:
      result = BYTE2(dword_253FFE08C);
      break;
    case 4:
      result = HIBYTE(dword_253FFE08C);
      break;
    case 5:
      result = qword_253FFE090;
      break;
    default:
      IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
      result = 0;
      if (IsLoggingAllowed)
      {
        bzero(__str, 0x410uLL);
        v4 = mach_continuous_time();
        v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Module,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 87, "Gnm34_15GetTaTraceCfg", 770, a1);
        LbsOsaTrace_WriteLog(0xBu, __str, v5, 2, 1);
        result = 0;
      }
      break;
  }
  return result;
}

uint64_t GnssDbgMgr_DebugClassInd(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  unsigned int v5;
  size_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  int v15;
  unsigned __int16 v16;
  void *v17;
  char __str[1040];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2 || *(unsigned __int16 *)(v2 + 5) > 0x7F7u)
    return 0;
  if ((g_CurrentPlatform - 1) >= 4)
  {
    if (!g_CurrentPlatform)
    {
      v9 = *(unsigned __int16 *)(a1 + 24);
      *(_BYTE *)(v9 + v2 - 1) = 0;
      v10 = *(unsigned __int8 *)(v2 + 3) - 66;
      if (v10 <= 0x18)
      {
        if (((1 << v10) & 0x1004042) != 0)
        {
          if ((v9 - 9) >= 0x11 && *(unsigned __int8 *)(v2 + 8) == 228)
          {
            v11 = *(char *)(v2 + 9);
            *(_BYTE *)(v2 + 8 + (*(_BYTE *)(v2 + 11) + 2) + 3) = 0;
            v12 = v11 > 3 ? 4 : dword_21E7F9E70[v11];
            if (LbsOsaTrace_IsLoggingAllowed(5u, v12, 1, 0))
            {
              bzero(__str, 0x410uLL);
              v13 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
              if (v11 > 3)
              {
                v15 = 4;
                v14 = 73;
              }
              else
              {
                v14 = dword_21E7F9E50[v11];
                v15 = dword_21E7F9E70[v11];
              }
              v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s\n", (unint64_t)v13, "GZR", v14, (const char *)(v2 + 13));
              LbsOsaTrace_WriteLog(5u, __str, v16, v15, 1);
            }
          }
          goto LABEL_23;
        }
        if (*(_BYTE *)(v2 + 3) == 66)
        {
          v6 = v2 + 8;
          v8 = (unsigned __int16)(v9 - 9);
          v5 = 4;
          v7 = 227;
          goto LABEL_7;
        }
      }
    }
  }
  else
  {
    v3 = *(unsigned __int16 *)(a1 + 24);
    *(_BYTE *)(v3 + v2 - 1) = 0;
    v4 = *(_BYTE *)(v2 + 3) - 65;
    if (v4 <= 3u)
    {
      v5 = dword_21E7F9E60[(char)v4];
      v6 = v2 + 8;
      v7 = (0xE4E4E3E3 >> (8 * v4));
      v8 = (unsigned __int16)(v3 + (0xFFF9FFFBFFF9FFFBLL >> (16 * v4)));
LABEL_7:
      GnssDbgMgr_HandleBinaryLogs(v6, v8, v5, v7);
    }
  }
LABEL_23:
  v17 = *(void **)(a1 + 16);
  if (v17)
    free(v17);
  *(_QWORD *)(a1 + 16) = 0;
  return 0;
}

uint64_t GnssDbgMgr_SetPlatformHandler(uint64_t a1)
{
  if (a1)
    g_CurrentPlatform = *(_DWORD *)(a1 + 12);
  return 0;
}

uint64_t GnssDbgMgr_DefaultMsgHandler()
{
  return 0;
}

size_t GnssDbgMgr_HandleBinaryLogs(size_t result, unsigned int a2, unsigned int a3, int a4)
{
  unsigned int v4;
  unsigned int v6;
  size_t v7;
  unsigned __int16 v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 v13;
  int *v14;
  unsigned __int8 LogSeverityCP;
  int v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  double v23;
  char *v24;
  uint64_t v25;
  void **v26;
  unsigned __int16 v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  char *v35;
  uint64_t v36;
  void **v37;
  unsigned __int16 v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *__p[2];
  char v45;
  _QWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[48];
  void *v50;
  char v51;
  _BYTE v52[152];
  char __str[1040];
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    v4 = a2;
    if (a2 >= 8)
    {
      v6 = a3;
      v7 = result;
      v8 = 0;
      v43 = *MEMORY[0x24BEDB7F0];
      v41 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      v42 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v39 = MEMORY[0x24BEDB848] + 16;
      while (1)
      {
        v9 = (unsigned __int8 *)(v7 + v8);
        if (*v9 != a4)
          goto LABEL_10;
        v10 = v9[3];
        LODWORD(v11) = v4;
        if ((int)v10 + 6 <= (unsigned __int16)v4)
          break;
LABEL_11:
        v4 -= v11;
        v8 += v11;
        if ((unsigned __int16)v4 <= 7u)
          return result;
      }
      if (v9[v10 + 5] - 48 <= 0x4A)
      {
        v12 = *(unsigned __int16 *)(v9 + 1);
        if (a4 == 227)
        {
          v13 = gnssdbg_GetLogSeverityME(v12, g_CurrentPlatform) - 1;
          if (v13 < 6u)
          {
            v14 = (int *)((char *)&unk_21E7F9E80 + 4 * (char)v13);
            goto LABEL_15;
          }
LABEL_16:
          v16 = 4;
        }
        else
        {
          LogSeverityCP = gnssdbg_GetLogSeverityCP(v12, g_CurrentPlatform);
          if (LogSeverityCP >= 4u)
            goto LABEL_16;
          v14 = (int *)((char *)&unk_21E7F9E70 + 4 * (char)LogSeverityCP);
LABEL_15:
          v16 = *v14;
        }
        v17 = v16;
        v11 = (v10 + 7);
        if (LbsOsaTrace_IsLoggingAllowed(v6, v16, 0, 0))
        {
          result = LbsOsaTrace_PrintBinaryBuf(v6, v17, 0, (const void *)(v7 + v8), (v10 + 7));
        }
        else
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v46);
          v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"DisAllow Severity TAGID ", 24);
          v19 = *v18;
          *(_DWORD *)((char *)v18 + *(_QWORD *)(*v18 - 24) + 8) = *(_DWORD *)((_BYTE *)v18 + *(_QWORD *)(*v18 - 24) + 8) & 0xFFFFFFB5 | 8;
          *(_DWORD *)((char *)v18 + *(_QWORD *)(v19 - 24) + 8) |= 0x4000u;
          __str[0] = 48;
          v20 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, __str);
          *(_QWORD *)((char *)v20 + *(_QWORD *)(*v20 - 24) + 24) = 4;
          v21 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" ", 1);
          bzero(__str, 0x410uLL);
          v22 = mach_continuous_time();
          v23 = *(double *)&g_MacClockTicksToMsRelation;
          v24 = LbsOsaTrace_ModuleString(v6);
          if (v17 > 5)
            v25 = 32;
          else
            v25 = dword_21E7F9E98[v17];
          std::stringbuf::str();
          v26 = __p;
          if (v45 < 0)
            v26 = (void **)__p[0];
          v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s\n", (unint64_t)(v23 * (double)v22), v24, v25, (const char *)v26);
          if (v45 < 0)
            operator delete(__p[0]);
          v6 = a3;
          LbsOsaTrace_WriteLog(a3, __str, v27, v17, 1);
          v46[0] = v43;
          *(_QWORD *)((char *)v46 + *(_QWORD *)(v43 - 24)) = v42;
          v47 = v41;
          v48 = MEMORY[0x24BEDB848] + 16;
          if (v51 < 0)
            operator delete(v50);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          result = MEMORY[0x2207AFD84](v52);
        }
        if ((v17 & 5) == 0)
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v46);
          v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"TAGID ", 6);
          v29 = *v28;
          *(_DWORD *)((char *)v28 + *(_QWORD *)(*v28 - 24) + 8) = *(_DWORD *)((_BYTE *)v28 + *(_QWORD *)(*v28 - 24) + 8) & 0xFFFFFFB5 | 8;
          *(_DWORD *)((char *)v28 + *(_QWORD *)(v29 - 24) + 8) |= 0x4000u;
          __str[0] = 48;
          v30 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v28, __str);
          *(_QWORD *)((char *)v30 + *(_QWORD *)(*v30 - 24) + 24) = 4;
          v31 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" ", 1);
          if ((_DWORD)v11)
          {
            v32 = v11;
            do
            {
              *(_QWORD *)&v49[*(_QWORD *)(v47 - 24)] = 2;
              ++v9;
              std::ostream::operator<<();
              --v32;
            }
            while (v32);
          }
          if (LbsOsaTrace_IsLoggingAllowed(v6, v17, 0, 0))
          {
            bzero(__str, 0x410uLL);
            v33 = mach_continuous_time();
            v34 = *(double *)&g_MacClockTicksToMsRelation;
            v35 = LbsOsaTrace_ModuleString(v6);
            v36 = dword_21E7F9E98[v17];
            std::stringbuf::str();
            v37 = __p;
            if (v45 < 0)
              v37 = (void **)__p[0];
            v38 = snprintf(__str, 0x40FuLL, "%10u %s%c %s\n", (unint64_t)(v34 * (double)v33), v35, v36, (const char *)v37);
            if (v45 < 0)
              operator delete(__p[0]);
            LbsOsaTrace_WriteLog(v6, __str, v38, v17, 1);
          }
          v46[0] = v43;
          *(_QWORD *)((char *)v46 + *(_QWORD *)(v43 - 24)) = v42;
          v47 = v41;
          v48 = v39;
          if (v51 < 0)
            operator delete(v50);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          result = MEMORY[0x2207AFD84](v52);
        }
        goto LABEL_11;
      }
LABEL_10:
      LODWORD(v11) = 1;
      goto LABEL_11;
    }
  }
  return result;
}

void sub_21E585E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void GnssDbgMgr_DestMissingHandler(uint64_t a1)
{
  void *v2;

  if (*(_DWORD *)(a1 + 4) == 8650752)
  {
    v2 = *(void **)(a1 + 16);
    if (v2)
      free(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

void GnssDbgMgr_SetPlatform(int a1)
{
  _DWORD *v2;

  v2 = gnssOsa_Calloc("GnssDbgMgr_SetPlatform", 402, 1, 0x10uLL);
  if (v2)
  {
    v2[3] = a1;
    AgpsSendFsmMsg(132, 132, 8651008, v2);
  }
}

void GnssDbgMgr_WriteLog(size_t a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  if (a2)
  {
    if (a1 >= 0xA)
    {
      v4 = gnssOsa_Calloc("GnssDbgMgr_WriteLog", 440, 1, 0x20uLL);
      if (v4)
      {
        v5 = v4;
        v6 = gnssOsa_Calloc("GnssDbgMgr_WriteLog", 447, 1, a1);
        v5[2] = v6;
        if (v6)
        {
          *((_WORD *)v5 + 12) = a1;
          memcpy_s("GnssDbgMgr_WriteLog", 457, v6, a1, a2, a1);
          AgpsSendFsmMsg(132, 132, 8650752, v5);
        }
        else
        {
          free(v5);
        }
      }
    }
  }
}

_QWORD *gnss::Device::Device(_QWORD *result)
{
  *result = &off_24E2B16D8;
  return result;
}

void *gnss::GnssAdaptDevice::getHalExtensions(gnss::GnssAdaptDevice *this)
{
  const void *v1;
  void *result;

  v1 = (const void *)*((_QWORD *)this + 5);
  if (!v1
  {
    gnssOsa_FlushLog();
    __assert_rtn("getHalExtensions", "gaGnssAdaptDevice.h", 341, "false && \"Failed to dynamic cast HalExtensions\"");
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDeviceC2ENSt3__110unique_ptrIN7GnssHal4GpioENS1_14default_deleteIS4_EEEENS2_INS3_4CommENS5_IS8_EEEENS2_INS3_6LoggerENS5_ISB_EEEENS2_INS3_9NvStorageENS5_ISE_EEEENS2_INS3_10ExtensionsENS5_ISH_EEEENS2_INS_9Emergency4Supl17ConnectionManagerENS5_ISM_EEEENS1_8functionIFvNS_6ResultEEEE_block_invoke(uint64_t result)
{
  gp_GnssAdaptDeviceInstance = *(_QWORD *)(result + 32);
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDeviceC2ENSt3__110unique_ptrIN7GnssHal4GpioENS1_14default_deleteIS4_EEEENS2_INS3_4CommENS5_IS8_EEEENS2_INS3_6LoggerENS5_ISB_EEEENS2_INS3_9NvStorageENS5_ISE_EEEENS2_INS3_10ExtensionsENS5_ISH_EEEENS2_INS_9Emergency4Supl17ConnectionManagerENS5_ISM_EEEENS1_8functionIFvNS_6ResultEEEE_block_invoke_2(uint64_t a1)
{
  gnss::GnssAdaptDevice *v1;
  uint64_t v2;
  uint64_t v4;
  _BOOL4 v5;
  int v6;
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v1 = *(gnss::GnssAdaptDevice **)(a1 + 32);
  std::function<void ()(gnss::Result)>::operator=((_QWORD *)v1 + 7, a1 + 40);
  v8 = 0;
  gnss::GnssAdaptDevice::Ga05_04GetPlatformType(v1, &v8);
  v2 = *((_QWORD *)v1 + 1);
  if (v8 - 4 <= 0xFFFFFFFC && v2 == 0)
  {
    gnssOsa_FlushLog();
    __assert_rtn("GnssAdaptDevice_block_invoke_2", "ga00GnssDevice.cpp", 92, "false && \"Invalid GPIO pointer\"");
  }
  gp_Comm = gnss::GnssAdaptDevice::getComm(*((_QWORD *)v1 + 2));
  gp_Gpio = v2;
  g_GpioNotifCB = 0;
  v4 = *((_QWORD *)v1 + 3);
  gnss::GnssAdaptDevice::getLogger(v4);
  v9 = 0;
  gnss::GnssAdaptDevice::Ga05_04GetPlatformType(v1, &v9);
  v5 = v9 == 0;
  gp_Logger = v4;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  gnssOsaSetConfigLogLevel(v6, v5);
  gp_NvStorage = gnss::GnssAdaptDevice::getNvStore(*((_QWORD *)v1 + 4));
  return gnss::GnssAdaptDevice::Ga00_04HandleDeviceInit((uint64_t)v1, 0);
}

uint64_t gnss::GnssAdaptDevice::getComm(uint64_t this)
{
  if (!this)
  {
    gnssOsa_FlushLog();
    __assert_rtn("getComm", "gaGnssAdaptDevice.h", 335, "false && \"Comm null\"");
  }
  return this;
}

uint64_t gnss::GnssAdaptDevice::getLogger(uint64_t this)
{
  if (!this)
  {
    gnssOsa_FlushLog();
    __assert_rtn("getLogger", "gaGnssAdaptDevice.h", 336, "false && \"Logger null\"");
  }
  return this;
}

uint64_t gnss::GnssAdaptDevice::getNvStore(uint64_t this)
{
  if (!this)
  {
    gnssOsa_FlushLog();
    __assert_rtn("getNvStore", "gaGnssAdaptDevice.h", 337, "false && \"NvStorage null\"");
  }
  return this;
}

uint64_t gnss::GnssAdaptDevice::Ga00_04HandleDeviceInit(uint64_t a1, int a2)
{
  uint64_t v3;
  _BOOL4 v4;
  int v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  unsigned __int16 v13;
  NSObject *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD block[4];
  _BYTE v20[24];
  _BYTE *v21;
  char __str[24];
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (a2 == 1)
    {
      *(_BYTE *)(a1 + 88) = 0;
      *(_BYTE *)(a1 + 90) = 1;
      if ((gnss::GnssAdaptDevice::Ga00_02GnssDeInit((NSObject **)a1) & 1) != 0)
      {
        v3 = *(_QWORD *)(a1 + 24);
        gnss::GnssAdaptDevice::getLogger(v3);
        __str[0] = 0;
        gnss::GnssAdaptDevice::Ga05_04GetPlatformType((gnss::GnssAdaptDevice *)a1, (unsigned __int8 *)__str);
        v4 = __str[0] == 0;
        gp_Logger = v3;
        v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
        gnssOsaSetConfigLogLevel(v5, v4);
        __str[0] = 0;
        gnss::GnssAdaptDevice::Ga05_04GetPlatformType((gnss::GnssAdaptDevice *)a1, (unsigned __int8 *)__str);
        v6 = *(_QWORD *)(a1 + 8);
        if (__str[0] - 4 <= 0xFFFFFFFC && !v6)
        {
          gnssOsa_FlushLog();
          __assert_rtn("Ga00_03GnssReset", "ga00GnssDevice.cpp", 619, "false && \"Invalid GPIO pointer\"");
        }
        gp_Comm = gnss::GnssAdaptDevice::getComm(*(_QWORD *)(a1 + 16));
        gp_Gpio = v6;
        g_GpioNotifCB = 0;
        gp_NvStorage = gnss::GnssAdaptDevice::getNvStore(*(_QWORD *)(a1 + 32));
        result = gnss::GnssAdaptDevice::Ga00_01GnssInit((gnss::GnssAdaptDevice *)a1);
        if ((result & 1) != 0)
          return result;
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v8 = mach_continuous_time();
          v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "Ga00_03GnssReset", 1293);
          LbsOsaTrace_WriteLog(0x18u, __str, v9, 0, 1);
        }
      }
      else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v12 = mach_continuous_time();
        v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 69, "Ga00_03GnssReset", 1296);
        LbsOsaTrace_WriteLog(0x18u, __str, v13, 0, 1);
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v10 = mach_continuous_time();
      v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InitType\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "ADP", 87, "Ga00_04HandleDeviceInit", 770);
      LbsOsaTrace_WriteLog(0x18u, __str, v11, 2, 1);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 0;
    result = gnss::GnssAdaptDevice::Ga00_01GnssInit((gnss::GnssAdaptDevice *)a1);
    if ((result & 1) != 0)
      return result;
  }
  gnss::GnssAdaptDevice::Ga07_06SetDefaultState((gnss::GnssAdaptDevice *)a1, 0);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)__str, a1 + 56);
  v14 = *(NSObject **)(a1 + 296);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZN4gnss15GnssAdaptDevice23Ga00_04HandleDeviceInitENS_17e_Ga_GnssInitTypeE_block_invoke;
  block[3] = &__block_descriptor_tmp_65;
  v15 = v20;
  v16 = (uint64_t)v23;
  if (!v23)
    goto LABEL_18;
  if (v23 != __str)
  {
    v16 = (*(uint64_t (**)(void))(*(_QWORD *)v23 + 16))();
LABEL_18:
    v21 = (_BYTE *)v16;
    goto LABEL_20;
  }
  v21 = v20;
  (*(void (**)(char *, _BYTE *))(*(_QWORD *)__str + 24))(__str, v20);
LABEL_20:
  dispatch_async(v14, block);
  if (v21 == v20)
  {
    v17 = 4;
    goto LABEL_24;
  }
  if (v21)
  {
    v17 = 5;
    v15 = v21;
LABEL_24:
    (*(void (**)(_QWORD *))(*v15 + 8 * v17))(v15);
  }
  result = (uint64_t)v23;
  if (v23 == __str)
  {
    v18 = 4;
    result = (uint64_t)__str;
  }
  else
  {
    if (!v23)
      return result;
    v18 = 5;
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v18))();
}

void sub_21E586900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v26;
  uint64_t v27;

  v26 = a25;
  if (a25 == &a22)
  {
    v27 = 4;
    v26 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void gnss::s_StatusCB::~s_StatusCB(gnss::s_StatusCB *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  gnss::s_StatusCB *v5;
  uint64_t v6;

  v2 = (char *)this + 32;
  v3 = (char *)*((_QWORD *)this + 7);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (gnss::s_StatusCB *)*((_QWORD *)this + 3);
  if (v5 == this)
  {
    v6 = 4;
    v5 = this;
  }
  else
  {
    if (!v5)
      return;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
}

void gnss::GnssAdaptDevice::~GnssAdaptDevice(gnss::GnssAdaptDevice *this)
{
  uint64_t v2;
  unsigned __int16 v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  gnss::GnssAdaptDevice *v8;
  uint64_t v9;
  gnss::GnssAdaptDevice *v10;
  uint64_t v11;
  gnss::GnssAdaptDevice *v12;
  uint64_t v13;
  gnss::GnssAdaptDevice *v14;
  uint64_t v15;
  gnss::GnssAdaptDevice *v16;
  uint64_t v17;
  gnss::GnssAdaptDevice *v18;
  uint64_t v19;
  gnss::GnssAdaptDevice *v20;
  uint64_t v21;
  gnss::GnssAdaptDevice *v22;
  uint64_t v23;
  gnss::GnssAdaptDevice *v24;
  uint64_t v25;
  gnss::GnssAdaptDevice *v26;
  uint64_t v27;
  gnss::GnssAdaptDevice *v28;
  uint64_t v29;
  gnss::GnssAdaptDevice *v30;
  uint64_t v31;
  gnss::GnssAdaptDevice *v32;
  uint64_t v33;
  gnss::GnssAdaptDevice *v34;
  uint64_t v35;
  gnss::GnssAdaptDevice *v36;
  uint64_t v37;
  gnss::GnssAdaptDevice *v38;
  uint64_t v39;
  gnss::GnssAdaptDevice *v40;
  uint64_t v41;
  gnss::GnssAdaptDevice *v42;
  uint64_t v43;
  gnss::GnssAdaptDevice *v44;
  uint64_t v45;
  gnss::GnssAdaptDevice *v46;
  uint64_t v47;
  gnss::GnssAdaptDevice *v48;
  uint64_t v49;
  gnss::GnssAdaptDevice *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  gnss::GnssAdaptDevice *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD block[5];
  char __str[1040];
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24E2B18C0;
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 1, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Destructor\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 65, "~GnssAdaptDevice");
    LbsOsaTrace_WriteLog(0x18u, __str, v3, 1, 1);
  }
  v4 = *((_QWORD *)this + 36);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZN4gnss15GnssAdaptDeviceD2Ev_block_invoke;
  block[3] = &__block_descriptor_tmp_5;
  block[4] = this;
  dispatch_sync(v4, block);
  dispatch_sync((dispatch_queue_t)g_GnssGlobalStaticQueue, &__block_literal_global);
  v5 = *((_QWORD *)this + 37);
  if (v5)
  {
    dispatch_release(v5);
    *((_QWORD *)this + 37) = 0;
  }
  if (g_GnssGlobalStaticQueue)
  {
    dispatch_release((dispatch_object_t)g_GnssGlobalStaticQueue);
    g_GnssGlobalStaticQueue = 0;
  }
  v6 = *((_QWORD *)this + 36);
  if (v6)
  {
    dispatch_release(v6);
    *((_QWORD *)this + 36) = 0;
  }
  v7 = *((_QWORD *)this + 38);
  if (v7)
  {
    dispatch_release(v7);
    *((_QWORD *)this + 38) = 0;
  }
  v8 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 126);
  if (v8 == (gnss::GnssAdaptDevice *)((char *)this + 984))
  {
    v9 = 4;
    v8 = (gnss::GnssAdaptDevice *)((char *)this + 984);
  }
  else
  {
    if (!v8)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
LABEL_16:
  v10 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 122);
  if (v10 == (gnss::GnssAdaptDevice *)((char *)this + 952))
  {
    v11 = 4;
    v10 = (gnss::GnssAdaptDevice *)((char *)this + 952);
  }
  else
  {
    if (!v10)
      goto LABEL_21;
    v11 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v10 + 8 * v11))();
LABEL_21:
  v12 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 118);
  if (v12 == (gnss::GnssAdaptDevice *)((char *)this + 920))
  {
    v13 = 4;
    v12 = (gnss::GnssAdaptDevice *)((char *)this + 920);
  }
  else
  {
    if (!v12)
      goto LABEL_26;
    v13 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
LABEL_26:
  v14 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 114);
  if (v14 == (gnss::GnssAdaptDevice *)((char *)this + 888))
  {
    v15 = 4;
    v14 = (gnss::GnssAdaptDevice *)((char *)this + 888);
  }
  else
  {
    if (!v14)
      goto LABEL_31;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_31:
  v16 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 110);
  if (v16 == (gnss::GnssAdaptDevice *)((char *)this + 856))
  {
    v17 = 4;
    v16 = (gnss::GnssAdaptDevice *)((char *)this + 856);
  }
  else
  {
    if (!v16)
      goto LABEL_36;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_36:
  v18 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 106);
  if (v18 == (gnss::GnssAdaptDevice *)((char *)this + 824))
  {
    v19 = 4;
    v18 = (gnss::GnssAdaptDevice *)((char *)this + 824);
  }
  else
  {
    if (!v18)
      goto LABEL_41;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_41:
  v20 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 102);
  if (v20 == (gnss::GnssAdaptDevice *)((char *)this + 792))
  {
    v21 = 4;
    v20 = (gnss::GnssAdaptDevice *)((char *)this + 792);
  }
  else
  {
    if (!v20)
      goto LABEL_46;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_46:
  v22 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 98);
  if (v22 == (gnss::GnssAdaptDevice *)((char *)this + 760))
  {
    v23 = 4;
    v22 = (gnss::GnssAdaptDevice *)((char *)this + 760);
  }
  else
  {
    if (!v22)
      goto LABEL_51;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_51:
  v24 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 94);
  if (v24 == (gnss::GnssAdaptDevice *)((char *)this + 728))
  {
    v25 = 4;
    v24 = (gnss::GnssAdaptDevice *)((char *)this + 728);
  }
  else
  {
    if (!v24)
      goto LABEL_56;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_56:
  v26 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 90);
  if (v26 == (gnss::GnssAdaptDevice *)((char *)this + 696))
  {
    v27 = 4;
    v26 = (gnss::GnssAdaptDevice *)((char *)this + 696);
  }
  else
  {
    if (!v26)
      goto LABEL_61;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_61:
  v28 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 86);
  if (v28 == (gnss::GnssAdaptDevice *)((char *)this + 664))
  {
    v29 = 4;
    v28 = (gnss::GnssAdaptDevice *)((char *)this + 664);
  }
  else
  {
    if (!v28)
      goto LABEL_66;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_66:
  v30 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 82);
  if (v30 == (gnss::GnssAdaptDevice *)((char *)this + 632))
  {
    v31 = 4;
    v30 = (gnss::GnssAdaptDevice *)((char *)this + 632);
  }
  else
  {
    if (!v30)
      goto LABEL_71;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_71:
  v32 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 78);
  if (v32 == (gnss::GnssAdaptDevice *)((char *)this + 600))
  {
    v33 = 4;
    v32 = (gnss::GnssAdaptDevice *)((char *)this + 600);
  }
  else
  {
    if (!v32)
      goto LABEL_76;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_76:
  v34 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 74);
  if (v34 == (gnss::GnssAdaptDevice *)((char *)this + 568))
  {
    v35 = 4;
    v34 = (gnss::GnssAdaptDevice *)((char *)this + 568);
  }
  else
  {
    if (!v34)
      goto LABEL_81;
    v35 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
LABEL_81:
  v36 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 70);
  if (v36 == (gnss::GnssAdaptDevice *)((char *)this + 536))
  {
    v37 = 4;
    v36 = (gnss::GnssAdaptDevice *)((char *)this + 536);
  }
  else
  {
    if (!v36)
      goto LABEL_86;
    v37 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v36 + 8 * v37))();
LABEL_86:
  v38 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 66);
  if (v38 == (gnss::GnssAdaptDevice *)((char *)this + 504))
  {
    v39 = 4;
    v38 = (gnss::GnssAdaptDevice *)((char *)this + 504);
  }
  else
  {
    if (!v38)
      goto LABEL_91;
    v39 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v38 + 8 * v39))();
LABEL_91:
  v40 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 62);
  if (v40 == (gnss::GnssAdaptDevice *)((char *)this + 472))
  {
    v41 = 4;
    v40 = (gnss::GnssAdaptDevice *)((char *)this + 472);
  }
  else
  {
    if (!v40)
      goto LABEL_96;
    v41 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v40 + 8 * v41))();
LABEL_96:
  v42 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 58);
  if (v42 == (gnss::GnssAdaptDevice *)((char *)this + 440))
  {
    v43 = 4;
    v42 = (gnss::GnssAdaptDevice *)((char *)this + 440);
  }
  else
  {
    if (!v42)
      goto LABEL_101;
    v43 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v42 + 8 * v43))();
LABEL_101:
  v44 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 54);
  if (v44 == (gnss::GnssAdaptDevice *)((char *)this + 408))
  {
    v45 = 4;
    v44 = (gnss::GnssAdaptDevice *)((char *)this + 408);
  }
  else
  {
    if (!v44)
      goto LABEL_106;
    v45 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v44 + 8 * v45))();
LABEL_106:
  v46 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 50);
  if (v46 == (gnss::GnssAdaptDevice *)((char *)this + 376))
  {
    v47 = 4;
    v46 = (gnss::GnssAdaptDevice *)((char *)this + 376);
  }
  else
  {
    if (!v46)
      goto LABEL_111;
    v47 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v46 + 8 * v47))();
LABEL_111:
  v48 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 46);
  if (v48 == (gnss::GnssAdaptDevice *)((char *)this + 344))
  {
    v49 = 4;
    v48 = (gnss::GnssAdaptDevice *)((char *)this + 344);
  }
  else
  {
    if (!v48)
      goto LABEL_116;
    v49 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v48 + 8 * v49))();
LABEL_116:
  v50 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 42);
  if (v50 == (gnss::GnssAdaptDevice *)((char *)this + 312))
  {
    v51 = 4;
    v50 = (gnss::GnssAdaptDevice *)((char *)this + 312);
  }
  else
  {
    if (!v50)
      goto LABEL_121;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
LABEL_121:
  std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy((uint64_t)this + 256, *((_QWORD **)this + 33));
  std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::destroy((uint64_t)this + 232, *((_QWORD **)this + 30));
  std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy((uint64_t)this + 208, *((_QWORD **)this + 27));
  std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy((uint64_t)this + 184, *((_QWORD **)this + 24));
  v52 = (void *)*((_QWORD *)this + 19);
  if (v52)
  {
    *((_QWORD *)this + 20) = v52;
    operator delete(v52);
  }
  v53 = (void *)*((_QWORD *)this + 16);
  if (v53)
  {
    *((_QWORD *)this + 17) = v53;
    operator delete(v53);
  }
  v54 = (gnss::GnssAdaptDevice *)*((_QWORD *)this + 10);
  if (v54 == (gnss::GnssAdaptDevice *)((char *)this + 56))
  {
    v55 = 4;
    v54 = (gnss::GnssAdaptDevice *)((char *)this + 56);
  }
  else
  {
    if (!v54)
      goto LABEL_130;
    v55 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v54 + 8 * v55))();
LABEL_130:
  v56 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 48))(v56);
  v57 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  v60 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
}

{
  gnss::GnssAdaptDevice::~GnssAdaptDevice(this);
}

{
  gnss::GnssAdaptDevice::~GnssAdaptDevice(this);
  JUMPOUT(0x2207AFDF0);
}

void sub_21E5870A0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t ___ZN4gnss15GnssAdaptDeviceD2Ev_block_invoke(uint64_t a1)
{
  return gnss::GnssAdaptDevice::Ga00_02GnssDeInit(*(NSObject ***)(a1 + 32));
}

uint64_t gnss::GnssAdaptDevice::Ga00_02GnssDeInit(NSObject **this)
{
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t result;
  uint64_t v5;
  unsigned __int16 v6;
  char __str[8];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  gnss::GnssAdaptDevice::Ga01_06GnssReportPower(this, 0);
  gnss::GnssAdaptDevice::Ga00_08GnssStopPositioning((uint64_t)this, 1);
  GNS_EaInitialize(0);
  GNS_SenInitialize(0);
  GNS_EeInitialize(0);
  Gnm_RegisterApiStatusCb(0);
  Gnm_RegisterPowerReportCb(0);
  GNS_XOSetCallback(0);
  if (!gnssOsa_DeinitCountingSem(this + 129) && LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StopSem\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 69, "Ga00_02GnssDeInit", 1540);
    LbsOsaTrace_WriteLog(0x18u, __str, v3, 0, 1);
  }
  if (g_GnsInit && (g_GnsInit = 0, (AgpsShutdownAllFsm() & 1) != 0))
  {
    *(_QWORD *)__str = this + 35;
    v8 = 0;
    std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,8ul>>((uint64_t)__str, 8uLL);
    return 1;
  }
  else
  {
    result = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v5 = mach_continuous_time();
      v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "Ga00_02GnssDeInit", 1296);
      LbsOsaTrace_WriteLog(0x18u, __str, v6, 0, 1);
      return 0;
    }
  }
  return result;
}

void sub_21E5872E8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ___ZN4gnss15GnssAdaptDeviceD2Ev_block_invoke_2()
{
  gp_GnssAdaptDeviceInstance = 0;
}

_QWORD *gnss::GnssAdaptDevice::reset(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  _QWORD block[5];
  _BYTE v8[24];
  _BYTE *v9;
  char __str[1040];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice5resetENSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_10;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v8, a2);
    dispatch_async(v2, block);
    result = v9;
    if (v9 == v8)
    {
      v4 = 4;
      result = v8;
    }
    else
    {
      if (!v9)
        return result;
      v4 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
  }
  else
  {
    result = (_QWORD *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v5 = mach_continuous_time();
      v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "reset", 513);
      return (_QWORD *)LbsOsaTrace_WriteLog(0x18u, __str, v6, 0, 1);
    }
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice5resetENSt3__18functionIFvNS_6ResultEEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v3 = 0;
  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

_QWORD *gnss::GnssAdaptDevice::clear(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  _QWORD block[5];
  _BYTE v8[24];
  _BYTE *v9;
  char __str[1040];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice5clearENSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_17;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v8, a2);
    dispatch_async(v2, block);
    result = v9;
    if (v9 == v8)
    {
      v4 = 4;
      result = v8;
    }
    else
    {
      if (!v9)
        return result;
      v4 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
  }
  else
  {
    result = (_QWORD *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v5 = mach_continuous_time();
      v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "ADP", 69, "clear", 513);
      return (_QWORD *)LbsOsaTrace_WriteLog(0x18u, __str, v6, 0, 1);
    }
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice5clearENSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  uint64_t result;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  unsigned __int16 v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int16 v25;
  uint64_t v26;
  unsigned __int16 v27;
  uint64_t v28;
  unsigned __int16 v29;
  uint64_t v30;
  unsigned __int16 v31;
  _BYTE v32[24];
  _BYTE *v33;
  _BYTE v34[24];
  _BYTE *v35;
  _BYTE v36[24];
  _BYTE *v37;
  _BYTE v38[24];
  _BYTE *v39;
  char __str[1040];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v3 = mach_continuous_time();
    v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "clear_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (!*(_BYTE *)(v2 + 88))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v38, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v38, (uint64_t)"clear_block_invoke");
    v8 = v39;
    if (v39 == v38)
    {
      v9 = 4;
      v8 = v38;
    }
    else
    {
      if (!v39)
      {
LABEL_22:
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v17 = mach_continuous_time();
          v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 69, "clear_block_invoke", 1302);
          LbsOsaTrace_WriteLog(0x18u, __str, v18, 0, 1);
        }
        result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if ((_DWORD)result)
        {
          bzero(__str, 0x410uLL);
          v19 = mach_continuous_time();
          v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 68, "clear_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v20, 5, 1);
        }
        return result;
      }
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
    goto LABEL_22;
  }
  v5 = a1 + 40;
  if (*(_BYTE *)(v2 + 89))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v36, v5);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 0, (uint64_t)v36, (uint64_t)"clear_block_invoke");
    v6 = v37;
    if (v37 == v36)
    {
      v7 = 4;
      v6 = v36;
    }
    else
    {
      if (!v37)
      {
LABEL_16:
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v12 = mach_continuous_time();
          v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 69, "clear_block_invoke", 2056);
          LbsOsaTrace_WriteLog(0x18u, __str, v13, 0, 1);
        }
        result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if ((_DWORD)result)
        {
          bzero(__str, 0x410uLL);
          v15 = mach_continuous_time();
          v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 68, "clear_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v16, 5, 1);
        }
        return result;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_16;
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v32, v5);
  v35 = 0;
  gnss::GnssAdaptDevice::Ga07_10AddRespHndlToGnmLUT(v2, 16, (uint64_t)v32);
  v10 = v35;
  if (v35 == v34)
  {
    v11 = 4;
    v10 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_28;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_28:
  v21 = v33;
  if (v33 == v32)
  {
    v22 = 4;
    v21 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_33;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_33:
  v23 = Gnm_ClearGNSSCache(0x10000);
  if (v23)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v24 = mach_continuous_time();
      v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ClearCache,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 69, "clear_block_invoke", 257, v23);
      LbsOsaTrace_WriteLog(0x18u, __str, v25, 0, 1);
    }
    gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(v2, v23, 0x10u);
    result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if ((_DWORD)result)
    {
LABEL_46:
      bzero(__str, 0x410uLL);
      v30 = mach_continuous_time();
      v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "ADP", 68, "clear_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v31, 5, 1);
    }
  }
  else if (gnssOsa_SemWaitTimeOut(*(NSObject **)(v2 + 1032), 0x1F4u))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v26 = mach_continuous_time();
      v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ClearCache\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "ADP", 69, "clear_block_invoke", 257);
      LbsOsaTrace_WriteLog(0x18u, __str, v27, 0, 1);
    }
    gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(v2, 0xBu, 0x10u);
    result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if ((_DWORD)result)
      goto LABEL_46;
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v28 = mach_continuous_time();
      v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: COLD\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "ADP", 73, "clear_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v29, 4, 1);
    }
    result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if ((_DWORD)result)
      goto LABEL_46;
  }
  return result;
}

void sub_21E588028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  gnss::s_StatusCB::~s_StatusCB((gnss::s_StatusCB *)va);
  _Unwind_Resume(a1);
}

_QWORD *gnss::GnssAdaptDevice::start(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  _QWORD *v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  _QWORD block[5];
  _BYTE v13[24];
  _BYTE *v14;
  _BYTE v15[24];
  _BYTE *v16;
  char __str[1040];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a3 + 24))
  {
    result = (_QWORD *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (!(_DWORD)result)
      return result;
    goto LABEL_7;
  }
  if (!*(_QWORD *)(a4 + 24))
  {
    result = (_QWORD *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (!(_DWORD)result)
      return result;
LABEL_7:
    bzero(__str, 0x410uLL);
    v9 = mach_continuous_time();
    v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 69, "start", 513);
    return (_QWORD *)LbsOsaTrace_WriteLog(0x18u, __str, v10, 0, 1);
  }
  v5 = *(NSObject **)(a1 + 288);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZN4gnss15GnssAdaptDevice5startEyNSt3__18functionIFvNS_6ResultEEEES5__block_invoke;
  block[3] = &__block_descriptor_tmp_21;
  block[4] = a1;
  v6 = v13;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v13, a3);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v15, a4);
  dispatch_async(v5, block);
  result = v16;
  if (v16 == v15)
  {
    v8 = 4;
    result = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_12;
    v8 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
LABEL_12:
  if (v14 == v13)
  {
    v11 = 4;
  }
  else
  {
    if (!v14)
      return result;
    v11 = 5;
    v6 = v14;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 8 * v11))(v6);
}

void sub_21E5882E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN4gnss15GnssAdaptDevice5startEyNSt3__18functionIFvNS_6ResultEEEES5__block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  uint64_t result;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  unsigned __int16 v20;
  _BOOL4 v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  uint64_t v26;
  unsigned __int16 v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned __int16 v32;
  unint64_t v33;
  unsigned __int16 v34;
  uint64_t v35;
  unsigned __int16 v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[24];
  _BYTE *v42;
  _BYTE v43[24];
  _BYTE *v44;
  _BYTE v45[24];
  _BYTE *v46;
  _BYTE v47[24];
  _BYTE *v48;
  _BYTE v49[24];
  _BYTE *v50;
  char __str[1040];
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v3 = mach_continuous_time();
    v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "start_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (!*(_BYTE *)(v2 + 88))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v49, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v49, (uint64_t)"start_block_invoke");
    v7 = v50;
    if (v50 == v49)
    {
      v8 = 4;
      v7 = v49;
    }
    else
    {
      if (!v50)
      {
LABEL_23:
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v17 = mach_continuous_time();
          v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 69, "start_block_invoke", 1302);
          LbsOsaTrace_WriteLog(0x18u, __str, v18, 0, 1);
        }
        result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if ((_DWORD)result)
        {
          bzero(__str, 0x410uLL);
          v19 = mach_continuous_time();
          v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 68, "start_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v20, 5, 1);
        }
        return result;
      }
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
    goto LABEL_23;
  }
  if (*(_BYTE *)(v2 + 89))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v47, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 0, (uint64_t)v47, (uint64_t)"start_block_invoke");
    v5 = v48;
    if (v48 == v47)
    {
      v6 = 4;
      v5 = v47;
    }
    else
    {
      if (!v48)
      {
LABEL_17:
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v12 = mach_continuous_time();
          v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "ADP", 69, "start_block_invoke", 2056);
          LbsOsaTrace_WriteLog(0x18u, __str, v13, 0, 1);
        }
        result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if ((_DWORD)result)
        {
          bzero(__str, 0x410uLL);
          v15 = mach_continuous_time();
          v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 68, "start_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v16, 5, 1);
        }
        return result;
      }
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
    goto LABEL_17;
  }
  v9 = *(_QWORD *)(v2 + 280);
  if ((v9 & 0x40) == 0)
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v45, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 8, (uint64_t)v45, (uint64_t)"start_block_invoke");
    v10 = v46;
    if (v46 == v45)
    {
      v11 = 4;
      v10 = v45;
    }
    else
    {
      if (!v46)
      {
LABEL_32:
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v24 = mach_continuous_time();
          v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Invalid PVTM Config\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "ADP", 87, "start_block_invoke", 258);
          LbsOsaTrace_WriteLog(0x18u, __str, v25, 2, 1);
        }
        result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if ((_DWORD)result)
        {
          bzero(__str, 0x410uLL);
          v26 = mach_continuous_time();
          v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "ADP", 68, "start_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v27, 5, 1);
        }
        return result;
      }
      v11 = 5;
    }
    (*(void (**)(void))(*v10 + 8 * v11))();
    goto LABEL_32;
  }
  v21 = (*(_QWORD *)(v2 + 280) & 0x3ALL) != 0;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v41, a1 + 40);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v43, a1 + 72);
  gnss::GnssAdaptDevice::Ga07_10AddRespHndlToGnmLUT(v2, 2, (uint64_t)v41);
  v22 = v44;
  if (v44 == v43)
  {
    v23 = 4;
    v22 = v43;
  }
  else
  {
    if (!v44)
      goto LABEL_38;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_38:
  v28 = v42;
  if (v42 == v41)
  {
    v29 = 4;
    v28 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_43;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_43:
  v37 = 0;
  v38 = 1000;
  v40 = 0;
  v39 = 0;
  v30 = Gnm_RegisterPeriodicFix(0, 0, (uint64_t)gnss::GnssAdaptDevice::Ga06_00GnssPeriodicFixCB, (2 * (v9 & 1)) | (4 * v21), (unsigned int *)&v37);
  if (v30)
  {
    gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(v2, v30, 2u);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v31 = mach_continuous_time();
      v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RegPeriodicFix,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "ADP", 69, "start_block_invoke", 257, v30);
      LbsOsaTrace_WriteLog(0x18u, __str, v32, 0, 1);
    }
    result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if ((_DWORD)result)
    {
LABEL_51:
      bzero(__str, 0x410uLL);
      v35 = mach_continuous_time();
      v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "ADP", 68, "start_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v36, 5, 1);
    }
  }
  else
  {
    *(_BYTE *)(v2 + 89) = 1;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 3, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v33 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      snprintf(getVersionString::a_Version, 0x200uLL, "host,%s,FW,%s", "1e996c9bd release/1942", ga_HwVersion);
      v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GNSS Version,%s ReportType,%u,Resp,%u\n", v33, "ADP", 77, "start_block_invoke", getVersionString::a_Version, (2 * (v9 & 1)) | (4 * v21), 0);
      LbsOsaTrace_WriteLog(0x18u, __str, v34, 3, 1);
    }
    result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if ((_DWORD)result)
      goto LABEL_51;
  }
  return result;
}

void sub_21E588B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  gnss::s_StatusCB::~s_StatusCB((gnss::s_StatusCB *)va);
  _Unwind_Resume(a1);
}

char *getVersionString()
{
  snprintf(getVersionString::a_Version, 0x200uLL, "host,%s,FW,%s", "1e996c9bd release/1942", ga_HwVersion);
  return getVersionString::a_Version;
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(uint64_t a1, uint64_t a2)
{
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
  return std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](a1 + 72, a2 + 72);
}

void sub_21E588D24(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  v3 = v2;
  v5 = *(_QWORD **)(v3 + 64);
  if (v5 == v1)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v1 = v5;
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v6))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *__destroy_helper_block_e8_40c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE72c40_ZTSNSt3__18functionIFvN4gnss6ResultEEEE(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 5;
  v3 = a1 + 9;
  v4 = (_QWORD *)a1[12];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  result = (_QWORD *)a1[8];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

_QWORD *gnss::GnssAdaptDevice::stop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  _QWORD block[5];
  _BYTE v12[24];
  _BYTE *v13;
  _BYTE v14[24];
  _BYTE *v15;
  char __str[1040];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a2 + 24))
  {
    result = (_QWORD *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (!(_DWORD)result)
      return result;
    goto LABEL_7;
  }
  if (!*(_QWORD *)(a3 + 24))
  {
    result = (_QWORD *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if (!(_DWORD)result)
      return result;
LABEL_7:
    bzero(__str, 0x410uLL);
    v8 = mach_continuous_time();
    v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "ADP", 69, "stop", 513);
    return (_QWORD *)LbsOsaTrace_WriteLog(0x18u, __str, v9, 0, 1);
  }
  v4 = *(NSObject **)(a1 + 288);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZN4gnss15GnssAdaptDevice4stopENSt3__18functionIFvNS_6ResultEEEES5__block_invoke;
  block[3] = &__block_descriptor_tmp_24;
  block[4] = a1;
  v5 = v12;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v12, a2);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v14, a3);
  dispatch_async(v4, block);
  result = v15;
  if (v15 == v14)
  {
    v7 = 4;
    result = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_12;
    v7 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
LABEL_12:
  if (v13 == v12)
  {
    v10 = 4;
  }
  else
  {
    if (!v13)
      return result;
    v10 = 5;
    v5 = v13;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v10))(v5);
}

void sub_21E589084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  uint64_t v25;

  if (a23 == v23)
  {
    v25 = 4;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v25 = 5;
    v23 = a23;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v25))(v23);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN4gnss15GnssAdaptDevice4stopENSt3__18functionIFvNS_6ResultEEEES5__block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t result;
  uint64_t v18;
  unsigned __int16 v19;
  uint64_t v20;
  unsigned __int16 v21;
  uint64_t v22;
  unsigned __int16 v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 v27;
  uint64_t v28;
  unsigned __int16 v29;
  _BYTE v30[24];
  _BYTE *v31;
  _BYTE v32[24];
  _BYTE *v33;
  _BYTE v34[24];
  _BYTE *v35;
  _BYTE v36[24];
  _BYTE *v37;
  _BYTE v38[24];
  _BYTE *v39;
  char __str[1040];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v3 = mach_continuous_time();
    v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "stop_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (*(_BYTE *)(v2 + 88))
  {
    v5 = a1 + 40;
    if (*(_BYTE *)(v2 + 89))
    {
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v30, v5);
      std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v32, a1 + 72);
      gnss::GnssAdaptDevice::Ga07_10AddRespHndlToGnmLUT(v2, 1, (uint64_t)v30);
      v6 = v33;
      if (v33 == v32)
      {
        v7 = 4;
        v6 = v32;
      }
      else
      {
        if (!v33)
          goto LABEL_16;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_16:
      v12 = v31;
      if (v31 == v30)
      {
        v13 = 4;
        v12 = v30;
      }
      else
      {
        if (!v31)
        {
LABEL_21:
          v14 = gnss::GnssAdaptDevice::Ga00_08GnssStopPositioning(v2, 0);
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 3, 0, 0))
          {
            bzero(__str, 0x410uLL);
            v15 = mach_continuous_time();
            v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: StopResp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 77, "stop_block_invoke", v14);
            LbsOsaTrace_WriteLog(0x18u, __str, v16, 3, 1);
          }
          result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
          if ((_DWORD)result)
          {
            bzero(__str, 0x410uLL);
            v18 = mach_continuous_time();
            v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "ADP", 68, "stop_block_invoke");
            return LbsOsaTrace_WriteLog(0x18u, __str, v19, 5, 1);
          }
          return result;
        }
        v13 = 5;
      }
      (*(void (**)(void))(*v12 + 8 * v13))();
      goto LABEL_21;
    }
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v36, v5);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v36, (uint64_t)"stop_block_invoke");
    v10 = v37;
    if (v37 == v36)
    {
      v11 = 4;
      v10 = v36;
    }
    else
    {
      if (!v37)
        goto LABEL_33;
      v11 = 5;
    }
    (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_33:
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v34, a1 + 72);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 1, (uint64_t)v34, (uint64_t)"stop_block_invoke");
    v24 = v35;
    if (v35 == v34)
    {
      v25 = 4;
      v24 = v34;
    }
    else
    {
      if (!v35)
      {
LABEL_38:
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v26 = mach_continuous_time();
          v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Stop Rcvd,session inactive\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "ADP", 73, "stop_block_invoke");
          LbsOsaTrace_WriteLog(0x18u, __str, v27, 4, 1);
        }
        result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if ((_DWORD)result)
        {
          bzero(__str, 0x410uLL);
          v28 = mach_continuous_time();
          v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "ADP", 68, "stop_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v29, 5, 1);
        }
        return result;
      }
      v25 = 5;
    }
    (*(void (**)(void))(*v24 + 8 * v25))();
    goto LABEL_38;
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v38, a1 + 40);
  gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v38, (uint64_t)"stop_block_invoke");
  v8 = v39;
  if (v39 == v38)
  {
    v9 = 4;
    v8 = v38;
    goto LABEL_26;
  }
  if (v39)
  {
    v9 = 5;
LABEL_26:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v20 = mach_continuous_time();
    v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "ADP", 69, "stop_block_invoke", 1302);
    LbsOsaTrace_WriteLog(0x18u, __str, v21, 0, 1);
  }
  result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
  if ((_DWORD)result)
  {
    bzero(__str, 0x410uLL);
    v22 = mach_continuous_time();
    v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "ADP", 68, "stop_block_invoke");
    return LbsOsaTrace_WriteLog(0x18u, __str, v23, 5, 1);
  }
  return result;
}

void sub_21E589664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  char *v33;
  char *v35;
  uint64_t v36;

  v35 = a25;
  if (a25 == v33)
  {
    v36 = 4;
    v35 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v36 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t gnss::GnssAdaptDevice::Ga00_08GnssStopPositioning(uint64_t a1, int a2)
{
  uint64_t v3;
  unsigned __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 v12;
  char __str[1040];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 89))
    return 14;
  if (a2 == 1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v3 = mach_continuous_time();
      v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Internal Stop Request\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "Ga00_08GnssStopPositioning");
      LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
    }
    atomic_store(1u, (unsigned __int8 *)(a1 + 91));
  }
  v5 = Gnm_StopPosnReq(0);
  if ((_DWORD)v5)
  {
    v6 = v5;
    gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(a1, v5, 1u);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v7 = mach_continuous_time();
      v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StopPosReq,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "Ga00_08GnssStopPositioning", 257, v6);
      LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Processed\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "ADP", 73, "Ga00_08GnssStopPositioning");
      LbsOsaTrace_WriteLog(0x18u, __str, v10, 4, 1);
    }
    if (gnssOsa_SemWaitTimeOut(*(NSObject **)(a1 + 1032), 0x1F4u))
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v11 = mach_continuous_time();
        v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StopReq\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 69, "Ga00_08GnssStopPositioning", 257);
        LbsOsaTrace_WriteLog(0x18u, __str, v12, 0, 1);
      }
      v6 = 11;
    }
    else
    {
      v6 = 0;
    }
    *(_BYTE *)(a1 + 89) = 0;
  }
  return v6;
}

_QWORD *gnss::GnssAdaptDevice::deleteGnssData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;
  _QWORD block[5];
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;
  char __str[1040];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a3 + 24))
  {
    v4 = *(NSObject **)(a1 + 288);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZN4gnss15GnssAdaptDevice14deleteGnssDataEyNSt3__18functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_42;
    block[4] = a1;
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v10, a3);
    v12 = a2;
    dispatch_async(v4, block);
    result = v11;
    if (v11 == v10)
    {
      v6 = 4;
      result = v10;
    }
    else
    {
      if (!v11)
        return result;
      v6 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
  }
  else
  {
    result = (_QWORD *)LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v7 = mach_continuous_time();
      v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RespCB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "ADP", 69, "deleteGnssData", 513);
      return (_QWORD *)LbsOsaTrace_WriteLog(0x18u, __str, v8, 0, 1);
    }
  }
  return result;
}

uint64_t ___ZN4gnss15GnssAdaptDevice14deleteGnssDataEyNSt3__18functionIFvNS_6ResultEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  unsigned __int16 v20;
  uint64_t v21;
  unsigned __int16 v22;
  uint64_t v23;
  unsigned __int16 v24;
  uint64_t v25;
  unsigned __int16 v26;
  uint64_t v27;
  unsigned __int16 v28;
  uint64_t v29;
  unsigned __int16 v30;
  uint64_t v31;
  unsigned __int16 v32;
  uint64_t v33;
  unsigned __int16 v34;
  uint64_t v35;
  unsigned __int16 v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int16 v40;
  uint64_t v41;
  unsigned __int16 v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned __int16 v49;
  uint64_t result;
  uint64_t v51;
  unsigned __int16 v52;
  uint64_t v53;
  unsigned __int16 v54;
  uint64_t v55;
  unsigned __int16 v56;
  uint64_t v57;
  unsigned __int16 v58;
  uint64_t v59;
  unsigned __int16 v60;
  uint64_t v61;
  unsigned __int16 v62;
  _BYTE v63[24];
  _BYTE *v64;
  _BYTE v65[24];
  _BYTE *v66;
  _BYTE v67[24];
  _BYTE *v68;
  _BYTE v69[24];
  _BYTE *v70;
  char __str[1040];
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v3 = mach_continuous_time();
    v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "ADP", 68, "deleteGnssData_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v4, 5, 1);
  }
  if (!*(_BYTE *)(v2 + 88))
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v69, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 7, (uint64_t)v69, (uint64_t)"deleteGnssData_block_invoke");
    v9 = v70;
    if (v70 == v69)
    {
      v10 = 4;
      v9 = v69;
    }
    else
    {
      if (!v70)
      {
LABEL_81:
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v53 = mach_continuous_time();
          v54 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v53), "ADP", 69, "deleteGnssData_block_invoke", 1302);
          LbsOsaTrace_WriteLog(0x18u, __str, v54, 0, 1);
        }
        result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if ((_DWORD)result)
        {
          bzero(__str, 0x410uLL);
          v55 = mach_continuous_time();
          v56 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v55), "ADP", 68, "deleteGnssData_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v56, 5, 1);
        }
        return result;
      }
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
    goto LABEL_81;
  }
  v5 = *(_QWORD *)(a1 + 72);
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 3, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v6 = mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Flags,%llu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "ADP", 77, "deleteGnssData_block_invoke", v5);
    LbsOsaTrace_WriteLog(0x18u, __str, v7, 3, 1);
  }
  if ((v5 & 1) == 0)
  {
    v8 = 0;
    if ((v5 & 2) == 0)
      goto LABEL_17;
    goto LABEL_15;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v11 = mach_continuous_time();
    v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Eph\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "ADP", 73, "deleteGnssData_block_invoke");
    LbsOsaTrace_WriteLog(0x18u, __str, v12, 4, 1);
  }
  v8 = 1;
  if ((v5 & 2) != 0)
  {
LABEL_15:
    v8 |= 2u;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v13 = mach_continuous_time();
      v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Alm\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "ADP", 73, "deleteGnssData_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v14, 4, 1);
    }
  }
LABEL_17:
  if ((v5 & 4) != 0)
  {
    v8 |= 4u;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v15 = mach_continuous_time();
      v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Pos\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "ADP", 73, "deleteGnssData_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v16, 4, 1);
    }
  }
  if ((v5 & 8) != 0)
  {
    v8 |= 8u;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v17 = mach_continuous_time();
      v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Time\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "ADP", 73, "deleteGnssData_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v18, 4, 1);
    }
  }
  if ((v5 & 0x10) != 0)
  {
    v8 |= 0x10u;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v19 = mach_continuous_time();
      v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Iono\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "ADP", 73, "deleteGnssData_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v20, 4, 1);
    }
  }
  if ((v5 & 0x20) != 0)
  {
    v8 |= 0x20u;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v21 = mach_continuous_time();
      v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: UTC\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "ADP", 73, "deleteGnssData_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v22, 4, 1);
    }
  }
  if ((v5 & 0x40) != 0)
  {
    v8 |= 0x40u;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v23 = mach_continuous_time();
      v24 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SvHealth\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v23), "ADP", 73, "deleteGnssData_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v24, 4, 1);
    }
  }
  if ((v5 & 0x80) != 0)
  {
    v8 |= 0x100u;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v25 = mach_continuous_time();
      v26 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TsxCurve\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v25), "ADP", 73, "deleteGnssData_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v26, 4, 1);
    }
  }
  if ((v5 & 0x400) != 0)
  {
    v8 |= 0x10000u;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v27 = mach_continuous_time();
      v28 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Cold\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "ADP", 73, "deleteGnssData_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v28, 4, 1);
    }
  }
  if ((v5 & 0x800) != 0)
  {
    v8 |= 0x20000u;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v29 = mach_continuous_time();
      v30 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Warm\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v29), "ADP", 73, "deleteGnssData_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v30, 4, 1);
    }
  }
  if ((v5 & 0x1000) != 0)
  {
    v8 |= 0x40000u;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v31 = mach_continuous_time();
      v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Factory\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "ADP", 73, "deleteGnssData_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v32, 4, 1);
    }
  }
  if ((v5 & 0x100) != 0)
  {
    v8 |= 0x200u;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v33 = mach_continuous_time();
      v34 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: RTI\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v33), "ADP", 73, "deleteGnssData_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v34, 4, 1);
    }
  }
  if ((v5 & 0x200) != 0)
  {
    v8 |= 0x400u;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v35 = mach_continuous_time();
      v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ORB\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "ADP", 73, "deleteGnssData_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v36, 4, 1);
    }
  }
  if ((v5 & 0x2000) != 0)
  {
    v8 |= 0x800u;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v39 = mach_continuous_time();
      v40 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ME_TTICK\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v39), "ADP", 73, "deleteGnssData_block_invoke");
      LbsOsaTrace_WriteLog(0x18u, __str, v40, 4, 1);
    }
  }
  else if (!v8)
  {
    std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v67, a1 + 40);
    gnss::GnssAdaptDevice::Ga07_07AdaptResponse(v2, 4, (uint64_t)v67, (uint64_t)"deleteGnssData_block_invoke");
    v37 = v68;
    if (v68 == v67)
    {
      v38 = 4;
      v37 = v67;
    }
    else
    {
      if (!v68)
      {
LABEL_89:
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v59 = mach_continuous_time();
          v60 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx field 0\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v59), "ADP", 87, "deleteGnssData_block_invoke", 770);
          LbsOsaTrace_WriteLog(0x18u, __str, v60, 2, 1);
        }
        result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
        if ((_DWORD)result)
        {
          bzero(__str, 0x410uLL);
          v61 = mach_continuous_time();
          v62 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v61), "ADP", 68, "deleteGnssData_block_invoke");
          return LbsOsaTrace_WriteLog(0x18u, __str, v62, 5, 1);
        }
        return result;
      }
      v38 = 5;
    }
    (*(void (**)(void))(*v37 + 8 * v38))();
    goto LABEL_89;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0x18u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v41 = mach_continuous_time();
    v42 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Fields,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v41), "ADP", 73, "deleteGnssData_block_invoke", v8);
    LbsOsaTrace_WriteLog(0x18u, __str, v42, 4, 1);
  }
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v63, a1 + 40);
  v66 = 0;
  gnss::GnssAdaptDevice::Ga07_10AddRespHndlToGnmLUT(v2, 16, (uint64_t)v63);
  v43 = v66;
  if (v66 == v65)
  {
    v44 = 4;
    v43 = v65;
  }
  else
  {
    if (!v66)
      goto LABEL_64;
    v44 = 5;
  }
  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_64:
  v45 = v64;
  if (v64 == v63)
  {
    v46 = 4;
    v45 = v63;
  }
  else
  {
    if (!v64)
      goto LABEL_69;
    v46 = 5;
  }
  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_69:
  v47 = Gnm_ClearGNSSCache(v8);
  if (v47)
  {
    gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(v2, v47, 0x10u);
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v48 = mach_continuous_time();
      v49 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ClearCache,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v48), "ADP", 69, "deleteGnssData_block_invoke", 257, v47);
      LbsOsaTrace_WriteLog(0x18u, __str, v49, 0, 1);
    }
    result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if ((_DWORD)result)
      goto LABEL_86;
  }
  else
  {
    if (!gnssOsa_SemWaitTimeOut(*(NSObject **)(v2 + 1032), 0x1F4u))
    {
      result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
      if (!(_DWORD)result)
        return result;
      goto LABEL_86;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v51 = mach_continuous_time();
      v52 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ClearCache\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v51), "ADP", 69, "deleteGnssData_block_invoke", 257);
      LbsOsaTrace_WriteLog(0x18u, __str, v52, 0, 1);
    }
    gnss::GnssAdaptDevice::Ga07_11HandleGnmStatusResponses(v2, 0xBu, 0x10u);
    result = LbsOsaTrace_IsLoggingAllowed(0x18u, 5, 0, 0);
    if ((_DWORD)result)
    {
LABEL_86:
      bzero(__str, 0x410uLL);
      v57 = mach_continuous_time();
      v58 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v57), "ADP", 68, "deleteGnssData_block_invoke");
      return LbsOsaTrace_WriteLog(0x18u, __str, v58, 5, 1);
    }
  }
  return result;
}

void sub_21E58AB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char *a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  char *v31;
  char *v33;
  uint64_t v34;

  v33 = a27;
  if (a27 == v31)
  {
    v34 = 4;
    v33 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_6;
    v34 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v33 + 8 * v34))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(gnss::GnssAdaptDevice *this)
{
  uint64_t v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = 0;
  v5 = &v4;
  v6 = 0x2000000000;
  v7 = 0;
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 0x40000000;
  v3[2] = ___ZN4gnss15GnssAdaptDevice24Ga00_00GetDeviceInstanceEv_block_invoke;
  v3[3] = &unk_24E2B1C70;
  v3[4] = &v4;
  dispatch_sync((dispatch_queue_t)g_GnssGlobalStaticQueue, v3);
  v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

uint64_t ___ZN4gnss15GnssAdaptDevice24Ga00_00GetDeviceInstanceEv_block_invoke(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = gp_GnssAdaptDeviceInstance;
  return result;
}

uint64_t gnss::GnssAdaptDevice::Ga00_01GnssInit(gnss::GnssAdaptDevice *this)
{
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v4;
  unsigned __int16 v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t Logger;
  int v10;
  unint64_t v11;
  unsigned __int16 v12;
  uint64_t v13;
  unsigned __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  char v25[1024];
  char __str[1040];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (!GNS_Initialize())
    return 0;
  if (!gnss::GnssAdaptDevice::Ga01_00SetMSBMandatoryMask(this)
    && LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetMSBMandatoryMask\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "ADP", 69, "Ga00_01GnssInit", 257);
    LbsOsaTrace_WriteLog(0x18u, __str, v3, 0, 1);
  }
  if (!gnss::GnssAdaptDevice::Ga01_01SetMSAMandatoryMask(this)
    && LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v4 = mach_continuous_time();
    v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SetMSAMandatoryMask\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "Ga00_01GnssInit", 257);
    LbsOsaTrace_WriteLog(0x18u, __str, v5, 0, 1);
  }
  if (GNS_EaInitialize((uint64_t)gnss::GnssAdaptDevice::Ga03_00RegisterGnsEaStatusResponse) == 1)
  {
    if (GNS_SenInitialize((uint64_t)gnss::GnssAdaptDevice::Ga02_00RegisterGnsSensStatusResponse) == 1)
    {
      if (GNS_EeInitialize((uint64_t)gnss::GnssAdaptDevice::Ga04_00RegisterGnsEeStatusResponse) == 1)
      {
        v24 = 0;
        if ((gnss::GnssAdaptDevice::Ga05_04GetPlatformType(this, (unsigned __int8 *)&v24) & 1) != 0)
        {
          if (Gnm_HwInitialize(v24, 1, (uint64_t)gnss::GnssAdaptDevice::Ga00_07RegisterHWStatusInd, (uint64_t)gnss::GnssAdaptDevice::Ga05_06RegBbResetCallback))
          {
            v6 = 0;
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InitStatusCb Resp,%u\n", v15);
LABEL_23:
              LbsOsaTrace_WriteLog(0x18u, __str, v7, 0, 1);
              return 0;
            }
          }
          else
          {
            if (Gnm_RegisterApiStatusCb((uint64_t)gnss::GnssAdaptDevice::Ga07_17RegisterGnmStatusResponse))
            {
              v6 = 0;
              if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                return v6;
              bzero(__str, 0x410uLL);
              v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ApiStatusCb Resp,%u\n", v19);
              goto LABEL_23;
            }
            if (Gnm_RegisterPowerReportCb((uint64_t)gnss::GnssAdaptDevice::Ga01_02PowerReportCB))
            {
              v6 = 0;
              if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                return v6;
              bzero(__str, 0x410uLL);
              v20 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PowerRepCb Resp,%u\n", v20);
              goto LABEL_23;
            }
            if (!gnssOsa_SemInit((dispatch_semaphore_s **)this + 129, 0))
            {
              snprintf(v25, 0x400uLL, "ASSERT,%s,%d,%s", "Ga00_01GnssInit", 521, "Semaphore creation failed");
              if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v13 = mach_continuous_time();
                v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "OSA", 69, "Ga00_01GnssInit", v25);
                LbsOsaTrace_WriteLog(0xEu, __str, v14, 0, 1);
              }
              gnssOsa_FlushLog();
              __assert_rtn("Ga00_01GnssInit", "ga00GnssDevice.cpp", 521, "false && \"Semaphore creation failed\"");
            }
            if (gnss::GnssAdaptDevice::getHalExtensions(this)
              && GNS_XOSetCallback((uint64_t)gnss::GnssAdaptDevice::Ga05_00RegisterGnsXoCallback) != 1)
            {
              v6 = 0;
              if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                return v6;
              bzero(__str, 0x410uLL);
              v22 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XoInit Resp,%u\n", v22);
              goto LABEL_23;
            }
            if (GNS_CpInitialize((uint64_t)gnss::GnssAdaptDevice::Ga10_13RegisterGnsCpStatusResponse) != 1)
            {
              v6 = 0;
              if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                return v6;
              bzero(__str, 0x410uLL);
              v21 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CpInit,%u\n", v21);
              goto LABEL_23;
            }
            if (GNS_FtaInitialize((uint64_t)gnss::GnssAdaptDevice::Ga10_14RegisterGnsFtaStatusResponse) != 1)
            {
              v6 = 0;
              if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                return v6;
              bzero(__str, 0x410uLL);
              v23 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx FtaInit Resp,%u\n", v23);
              goto LABEL_23;
            }
            if (GNS_EcallInitialize((uint64_t)gnss::GnssAdaptDevice::Ga10_05CPECallAsyncEventCB) != 1)
            {
              v6 = 0;
              if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                return v6;
              bzero(__str, 0x410uLL);
              mach_continuous_time();
              v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EcallInit\n");
              goto LABEL_23;
            }
            if ((gnss::GnssAdaptDevice::Ga11_00InitializeSUPL_GNS_CBs(this) & 1) == 0)
            {
              v6 = 0;
              if (!LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
                return v6;
              bzero(__str, 0x410uLL);
              mach_continuous_time();
              v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SuplInit\n");
              goto LABEL_23;
            }
            Logger = gnss::GnssAdaptDevice::getLogger(*((_QWORD *)this + 3));
            v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Logger + 64))(Logger);
            gnss::GnssAdaptDevice::Ga01_07SetSecondaryLogConfig((uint64_t)this, v10);
            v6 = 1;
            if (LbsOsaTrace_IsLoggingAllowed(0x18u, 1, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              snprintf(getVersionString::a_Version, 0x200uLL, "host,%s,FW,%s", "1e996c9bd release/1942", ga_HwVersion);
              v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GNSS Version,%s,Init Success\n", v11, "ADP", 65, "Ga00_01GnssInit", getVersionString::a_Version);
              v6 = 1;
              LbsOsaTrace_WriteLog(0x18u, __str, v12, 1, 1);
            }
          }
        }
        else
        {
          v6 = 0;
          if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            mach_continuous_time();
            v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Invalid Pltfm Type\n");
            goto LABEL_23;
          }
        }
      }
      else
      {
        v6 = 0;
        if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v18 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EeInit Resp,%u\n", v18);
          goto LABEL_23;
        }
      }
    }
    else
    {
      v6 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SensInit Resp,%u\n", v17);
        goto LABEL_23;
      }
    }
  }
  else
  {
    v6 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx EaInit Resp,%u\n", v16);
      goto LABEL_23;
    }
  }
  return v6;
}

void gnss::GnssAdaptDevice::Ga00_07RegisterHWStatusInd(gnss::GnssAdaptDevice *a1, int a2, char *a3)
{
  char v5;
  uint64_t DeviceInstance;

  v5 = (char)a1;
  DeviceInstance = gnss::GnssAdaptDevice::Ga00_00GetDeviceInstance(a1);
  if (DeviceInstance)
    gnss::GnssAdaptDevice::Ga07_05HandleGnssHwStatusInd(DeviceInstance, v5, a2, a3);
}

uint64_t ___ZN4gnss15GnssAdaptDevice23Ga00_04HandleDeviceInitENS_17e_Ga_GnssInitTypeE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v3 = 8;
  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

size_t gnss::GnssAdaptDevice::Ga00_10GnssSetHwVersionInfo(gnss::GnssAdaptDevice *a1, const char *a2)
{
  size_t result;
  uint64_t v4;
  unsigned __int16 v5;
  unsigned __int8 v6;
  char __str[1040];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  result = gnss::GnssAdaptDevice::Ga05_04GetPlatformType(a1, &v6);
  if (v6 == 1)
    return snprintf(ga_HwVersion, 0x200uLL, "CP Fw,%s,Patch,%s,date,%s,time,%s ME Fw,%s,Patch,%s,date,%s,time,%s", a2 + 6, a2 + 26, a2 + 46, a2 + 66, a2 + 86, a2 + 106, a2 + 126, a2 + 146);
  if (v6)
  {
    result = LbsOsaTrace_IsLoggingAllowed(0x18u, 0, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v4 = mach_continuous_time();
      v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Invalid Pltfm,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "ADP", 69, "Ga00_10GnssSetHwVersionInfo", 770, v6);
      return LbsOsaTrace_WriteLog(0x18u, __str, v5, 0, 1);
    }
  }
  else
  {
    strcpy(ga_HwVersion, "8cd9669 CP 0.0.20 b673 3f12 ME 0.0.76 0882 106e CFG 0c27");
  }
  return result;
}

uint64_t newGnssDevice(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *HalExtensions;
  unsigned int v15;
  NSObject *v16;
  dispatch_queue_t v17;
  uint64_t v18;
  NSObject *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD block[5];
  int v27;
  _QWORD v28[3];
  _QWORD *v29;
  _QWORD v30[5];
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (!*a1)
    return 0;
  v6 = operator new();
  v7 = *(_QWORD *)(*a1 + 8);
  *(_QWORD *)(*a1 + 8) = 0;
  v8 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)(*a1 + 16) = 0;
  v9 = *(_QWORD *)(*a1 + 32);
  *(_QWORD *)(*a1 + 32) = 0;
  v10 = *(_QWORD *)(*a1 + 40);
  *(_QWORD *)(*a1 + 40) = 0;
  v11 = *a1;
  v12 = *(_QWORD *)(*a1 + 48);
  *(_QWORD *)(v11 + 48) = 0;
  v13 = *a2;
  *a2 = 0;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v28, a3);
  *(_QWORD *)v6 = &off_24E2B18C0;
  *(_QWORD *)(v6 + 8) = v7;
  *(_QWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 24) = v9;
  *(_QWORD *)(v6 + 32) = v10;
  *(_QWORD *)(v6 + 40) = v12;
  *(_QWORD *)(v6 + 48) = v13;
  *(_QWORD *)(v6 + 85) = 0;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 96) = 0;
  *(_QWORD *)(v6 + 104) = 130861;
  *(_QWORD *)(v6 + 112) = 0;
  *(_BYTE *)(v6 + 120) = 1;
  *(_QWORD *)(v6 + 200) = 0;
  *(_QWORD *)(v6 + 192) = 0;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_QWORD *)(v6 + 184) = v6 + 192;
  *(_QWORD *)(v6 + 216) = 0;
  *(_BYTE *)(v6 + 176) = 0;
  *(_QWORD *)(v6 + 208) = v6 + 216;
  *(_QWORD *)(v6 + 224) = 0;
  *(_QWORD *)(v6 + 240) = 0;
  *(_QWORD *)(v6 + 232) = v6 + 240;
  *(_QWORD *)(v6 + 248) = 0;
  *(_QWORD *)(v6 + 264) = 0;
  *(_QWORD *)(v6 + 256) = v6 + 264;
  *(_QWORD *)(v6 + 272) = 0;
  *(_QWORD *)(v6 + 336) = 0;
  *(_QWORD *)(v6 + 368) = 0;
  *(_QWORD *)(v6 + 400) = 0;
  *(_QWORD *)(v6 + 432) = 0;
  *(_QWORD *)(v6 + 464) = 0;
  *(_QWORD *)(v6 + 496) = 0;
  *(_QWORD *)(v6 + 528) = 0;
  *(_QWORD *)(v6 + 560) = 0;
  *(_QWORD *)(v6 + 592) = 0;
  *(_QWORD *)(v6 + 624) = 0;
  *(_QWORD *)(v6 + 656) = 0;
  *(_QWORD *)(v6 + 688) = 0;
  *(_QWORD *)(v6 + 720) = 0;
  *(_QWORD *)(v6 + 752) = 0;
  *(_QWORD *)(v6 + 784) = 0;
  *(_QWORD *)(v6 + 816) = 0;
  *(_QWORD *)(v6 + 848) = 0;
  *(_QWORD *)(v6 + 880) = 0;
  *(_QWORD *)(v6 + 912) = 0;
  *(_QWORD *)(v6 + 944) = 0;
  *(_QWORD *)(v6 + 976) = 0;
  *(_QWORD *)(v6 + 1008) = 0;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)(v6 + 296) = 0u;
  *(_QWORD *)(v6 + 1016) = 0xFFFFFFFF00000000;
  *(_BYTE *)(v6 + 1024) = 0;
  *(_QWORD *)(v6 + 1032) = 0;
  if (v29)
  {
    HalExtensions = gnss::GnssAdaptDevice::getHalExtensions((gnss::GnssAdaptDevice *)v6);
    if ((*(unsigned int (**)(void *))(*(_QWORD *)HalExtensions + 112))(HalExtensions))
      v15 = 3;
    else
      v15 = 1;
    atomic_store(v15, (unsigned int *)&gnss::GnssAdaptDevice::s_EnableInertialFusionSetting);
    v16 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
    *(_QWORD *)(v6 + 288) = dispatch_queue_create("com.gnss.AdapterMainQueue", v16);
    g_GnssGlobalStaticQueue = (uint64_t)dispatch_queue_create("com.gnss.AdaptGlobalStaticQueue", v16);
    *(_QWORD *)(v6 + 296) = dispatch_queue_create("com.gnss.AdaptOutQueue", v16);
    v17 = dispatch_queue_create("com.gnss.AdaptSuplSocketReadQ", v16);
    *(_QWORD *)(v6 + 304) = v17;
    if (!*(_QWORD *)(v6 + 288) || !*(_QWORD *)(v6 + 296) || !g_GnssGlobalStaticQueue || !v17)
    {
      v27 = 2;
      if (!v29)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_QWORD *, int *))(*v29 + 48))(v29, &v27);
      goto LABEL_23;
    }
    v18 = MEMORY[0x24BDAC760];
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = ___ZN4gnss15GnssAdaptDeviceC2ENSt3__110unique_ptrIN7GnssHal4GpioENS1_14default_deleteIS4_EEEENS2_INS3_4CommENS5_IS8_EEEENS2_INS3_6LoggerENS5_ISB_EEEENS2_INS3_9NvStorageENS5_ISE_EEEENS2_INS3_10ExtensionsENS5_ISH_EEEENS2_INS_9Emergency4Supl17ConnectionManagerENS5_ISM_EEEENS1_8functionIFvNS_6ResultEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_0;
    block[4] = v6;
    dispatch_sync((dispatch_queue_t)g_GnssGlobalStaticQueue, block);
    v19 = *(NSObject **)(v6 + 288);
    v30[0] = v18;
    v30[1] = 1174405120;
    v30[2] = ___ZN4gnss15GnssAdaptDeviceC2ENSt3__110unique_ptrIN7GnssHal4GpioENS1_14default_deleteIS4_EEEENS2_INS3_4CommENS5_IS8_EEEENS2_INS3_6LoggerENS5_ISB_EEEENS2_INS3_9NvStorageENS5_ISE_EEEENS2_INS3_10ExtensionsENS5_ISH_EEEENS2_INS_9Emergency4Supl17ConnectionManagerENS5_ISM_EEEENS1_8functionIFvNS_6ResultEEEE_block_invoke_2;
    v30[3] = &__block_descriptor_tmp_3;
    v30[4] = v6;
    v20 = v31;
    v21 = (uint64_t)v29;
    if (v29)
    {
      if (v29 == v28)
      {
        v32 = v31;
        (*(void (**)(_QWORD *, _BYTE *))(v28[0] + 24))(v28, v31);
LABEL_18:
        dispatch_async(v19, v30);
        if (v32 == v31)
        {
          v22 = 4;
        }
        else
        {
          if (!v32)
          {
LABEL_23:
            v23 = v29;
            if (v29 == v28)
            {
              v24 = 4;
              v23 = v28;
              goto LABEL_27;
            }
            if (v29)
            {
              v24 = 5;
LABEL_27:
              (*(void (**)(void))(*v23 + 8 * v24))();
              return v6;
            }
            return v6;
          }
          v22 = 5;
          v20 = v32;
        }
        (*(void (**)(_QWORD *))(*v20 + 8 * v22))(v20);
        goto LABEL_23;
      }
      v21 = (*(uint64_t (**)(void))(*v29 + 16))();
    }
    v32 = (_BYTE *)v21;
    goto LABEL_18;
  }
  return v6;
}

void sub_21E58BD40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  _QWORD **v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;

  v28 = *(_QWORD **)(v21 + 1008);
  if (v28 == (_QWORD *)(v22 + 800))
  {
    v29 = 4;
    v28 = (_QWORD *)(v22 + 800);
  }
  else
  {
    if (!v28)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_6:
  v30 = *(_QWORD **)(v21 + 976);
  if (v30 == (_QWORD *)(v22 + 768))
  {
    v31 = 4;
    v30 = (_QWORD *)(v22 + 768);
  }
  else
  {
    if (!v30)
      goto LABEL_11;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_11:
  v32 = *(_QWORD **)(v21 + 944);
  if (v32 == (_QWORD *)(v22 + 736))
  {
    v33 = 4;
    v32 = (_QWORD *)(v22 + 736);
  }
  else
  {
    if (!v32)
      goto LABEL_16;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_16:
  v34 = *(_QWORD **)(v21 + 912);
  if (v34 == (_QWORD *)(v22 + 704))
  {
    v35 = 4;
    v34 = (_QWORD *)(v22 + 704);
  }
  else
  {
    if (!v34)
      goto LABEL_21;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_21:
  v36 = *(_QWORD **)(v21 + 880);
  if (v36 == (_QWORD *)(v22 + 672))
  {
    v37 = 4;
    v36 = (_QWORD *)(v22 + 672);
  }
  else
  {
    if (!v36)
      goto LABEL_26;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_26:
  v38 = *(_QWORD **)(v21 + 848);
  if (v38 == (_QWORD *)(v22 + 640))
  {
    v39 = 4;
    v38 = (_QWORD *)(v22 + 640);
  }
  else
  {
    if (!v38)
      goto LABEL_31;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_31:
  v40 = *(_QWORD **)(v21 + 816);
  if (v40 == (_QWORD *)(v22 + 608))
  {
    v41 = 4;
    v40 = (_QWORD *)(v22 + 608);
  }
  else
  {
    if (!v40)
      goto LABEL_36;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_36:
  v42 = *(_QWORD **)(v21 + 784);
  if (v42 == (_QWORD *)(v22 + 576))
  {
    v43 = 4;
    v42 = (_QWORD *)(v22 + 576);
  }
  else
  {
    if (!v42)
      goto LABEL_41;
    v43 = 5;
  }
  (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_41:
  v44 = *(_QWORD **)(v21 + 752);
  if (v44 == (_QWORD *)(v22 + 544))
  {
    v45 = 4;
    v44 = (_QWORD *)(v22 + 544);
  }
  else
  {
    if (!v44)
      goto LABEL_46;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_46:
  gnss::s_StatusCB::~s_StatusCB((gnss::s_StatusCB *)(v22 + 480));
  gnss::s_StatusCB::~s_StatusCB((gnss::s_StatusCB *)(v22 + 416));
  v46 = *(_QWORD **)(v21 + 592);
  if (v46 == (_QWORD *)(v22 + 384))
  {
    v47 = 4;
    v46 = (_QWORD *)(v22 + 384);
  }
  else
  {
    if (!v46)
      goto LABEL_51;
    v47 = 5;
  }
  (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_51:
  v48 = *(_QWORD **)(v21 + 560);
  if (v48 == (_QWORD *)(v22 + 352))
  {
    v49 = 4;
    v48 = (_QWORD *)(v22 + 352);
  }
  else
  {
    if (!v48)
      goto LABEL_56;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_56:
  v50 = *(_QWORD **)(v21 + 528);
  if (v50 == (_QWORD *)(v22 + 320))
  {
    v51 = 4;
    v50 = (_QWORD *)(v22 + 320);
  }
  else
  {
    if (!v50)
      goto LABEL_61;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_61:
  v52 = *(_QWORD **)(v21 + 496);
  if (v52 == (_QWORD *)(v22 + 288))
  {
    v53 = 4;
    v52 = (_QWORD *)(v22 + 288);
  }
  else
  {
    if (!v52)
      goto LABEL_66;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_66:
  v54 = *(_QWORD **)(v21 + 464);
  if (v54 == (_QWORD *)(v22 + 256))
  {
    v55 = 4;
    v54 = (_QWORD *)(v22 + 256);
  }
  else
  {
    if (!v54)
      goto LABEL_71;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_71:
  v56 = *(_QWORD **)(v21 + 432);
  if (v56 == (_QWORD *)(v22 + 224))
  {
    v57 = 4;
    v56 = (_QWORD *)(v22 + 224);
  }
  else
  {
    if (!v56)
      goto LABEL_76;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_76:
  v58 = *(_QWORD **)(v21 + 400);
  if (v58 == (_QWORD *)(v22 + 192))
  {
    v59 = 4;
    v58 = (_QWORD *)(v22 + 192);
  }
  else
  {
    if (!v58)
      goto LABEL_81;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_81:
  v60 = *(_QWORD **)(v21 + 368);
  if (v60 == (_QWORD *)(v22 + 160))
  {
    v61 = 4;
    v60 = (_QWORD *)(v22 + 160);
  }
  else
  {
    if (!v60)
      goto LABEL_86;
    v61 = 5;
  }
  (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_86:
  v62 = *(_QWORD **)(v21 + 336);
  if (v62 == (_QWORD *)(v22 + 128))
  {
    v63 = 4;
    v62 = (_QWORD *)(v22 + 128);
  }
  else
  {
    if (!v62)
      goto LABEL_91;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_91:
  std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy(v25, *(_QWORD **)(v21 + 264));
  std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::destroy(v24, *(_QWORD **)(v21 + 240));
  std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy(v23, *(_QWORD **)(v21 + 216));
  std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy(v22, *(_QWORD **)(v21 + 192));
  v64 = *(void **)(v21 + 152);
  if (v64)
  {
    *(_QWORD *)(v21 + 160) = v64;
    operator delete(v64);
  }
  v65 = *v26;
  if (*v26)
  {
    *(_QWORD *)(v21 + 136) = v65;
    operator delete(v65);
  }
  v66 = *v27;
  if (*v27 == (_QWORD *)(v22 - 128))
  {
    v67 = 4;
    v66 = (_QWORD *)(v22 - 128);
  }
  else
  {
    if (!v66)
      goto LABEL_100;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_100:
  v68 = *(_QWORD *)(v21 + 48);
  *(_QWORD *)(v21 + 48) = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 48))(v68);
  v69 = *(_QWORD *)(v21 + 40);
  *(_QWORD *)(v21 + 40) = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  v70 = *(_QWORD *)(v21 + 32);
  *(_QWORD *)(v21 + 32) = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  v71 = *(_QWORD *)(v21 + 24);
  *(_QWORD *)(v21 + 24) = 0;
  if (v71)
    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  v72 = *(_QWORD *)(v21 + 16);
  *(_QWORD *)(v21 + 16) = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  v73 = *(_QWORD *)(v21 + 8);
  *(_QWORD *)(v21 + 8) = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = a21;
  if (a21 == &a18)
  {
    v75 = 4;
    v74 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_117;
    v75 = 5;
  }
  (*(void (**)(char *))(*(_QWORD *)v74 + 8 * v75))(v74);
LABEL_117:
  MEMORY[0x2207AFDF0](v21, 0x10A1C40F7A34654);
  _Unwind_Resume(a1);
}

uint64_t getGnssDeviceVersion()
{
  return 2502;
}

uint64_t gnss::Device::getObjectVersionNumber(gnss::Device *this)
{
  return 2502;
}

uint64_t gnss::Device::setEmergencyConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v5 = 7;
  v3 = *(_QWORD *)(a3 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v3 + 48))(v3, &v5);
}

uint64_t gnss::Device::startEmergencyPositionRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v5 = 7;
  v3 = *(_QWORD *)(a3 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v3 + 48))(v3, &v5);
}

uint64_t gnss::Device::setSuplInit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v5 = 7;
  v3 = *(_QWORD *)(a3 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v3 + 48))(v3, &v5);
}

void std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;

  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::function<void ()(gnss::Result)>>>>::destroy(a1, a2[1]);
    v4 = (_QWORD *)a2[8];
    if (v4 == a2 + 5)
    {
      v5 = 4;
      v4 = a2 + 5;
    }
    else
    {
      if (!v4)
      {
LABEL_8:
        operator delete(a2);
        return;
      }
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
    goto LABEL_8;
  }
}

void std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::__map_value_compare<e_Gnm_Api,std::__value_type<e_Gnm_Api,gnss::s_StatusCB>,std::less<e_Gnm_Api>,true>,std::allocator<std::__value_type<e_Gnm_Api,gnss::s_StatusCB>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<e_Gnm_Api const,gnss::s_StatusCB>,0>(a2 + 4);
    operator delete(a2);
  }
}

_QWORD *std::__destroy_at[abi:ne180100]<std::pair<e_Gnm_Api const,gnss::s_StatusCB>,0>(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 5;
  v4 = (_QWORD *)a1[8];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void std::__fill_n[abi:ne180100]<false,std::__bitset<1ul,8ul>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

BOOL KFSt_Meas_Update(unsigned int a1, unsigned int a2, unsigned __int8 *a3, double *a4, _WORD *a5, double a6)
{
  double v9;
  double v10;
  double v11;
  int v12;
  double v14;
  _OWORD v15[16];
  uint64_t v16;
  double v17[32];
  double v18[34];

  v18[33] = *(double *)MEMORY[0x24BDAC8D0];
  if (*((int *)a3 + 1) < 1)
    return 0;
  a3[16] = 0;
  if (*a3)
  {
    v9 = *((double *)a3 + 4);
    v10 = a6 - *((double *)a3 + 3);
    memset(v15, 0, sizeof(v15));
    v14 = 0.0;
    *((double *)a3 + 6) = v10;
    v16 = 0;
    *((_QWORD *)v15 + a1) = 0x3FF0000000000000;
    *((double *)v15 + a2) = v10;
    umeas((_BOOL8)a4, a2, v9, (double *)v15, v18, v17, &v14, *((double *)a3 + 7));
    v11 = v14;
    if (v14 <= 0.0)
    {
      v12 = 0;
      *a3 = 0;
      a3[16] = 1;
      ++*a5;
    }
    else
    {
      v11 = *((double *)a3 + 4) * (v14 * (v18[a2] * v18[a2]));
      v12 = *a3;
    }
    *((double *)a3 + 8) = v11;
  }
  else
  {
    v12 = 0;
  }
  return v12 != 0;
}

uint64_t Taylor_sin_cos(uint64_t result, int *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;

  if ((int)result < 1)
  {
    if ((int)result >= -51472)
    {
      v11 = (unsigned __int16)(1029 - result) / 0x80Bu;
      v12 = g_Table_sinQ15[v11];
      v9 = g_Table_sinQ15[25 - v11];
      v6 = result + ((16471 * v11) >> 3);
      v4 = -v12;
      goto LABEL_9;
    }
    v7 = ((int)result + 103973) / 2059;
    v8 = g_Table_sinQ15[v7];
    v5 = g_Table_sinQ15[25 - v7];
    v6 = result + 103973 - ((16471 * v7) >> 3) - 1029;
    v4 = -v8;
  }
  else
  {
    if (result <= 0xC910)
    {
      v10 = (result + 1029) / 0x80BuLL;
      v4 = g_Table_sinQ15[v10];
      v9 = g_Table_sinQ15[(25 - v10)];
      v6 = result - ((16471 * v10) >> 3);
      goto LABEL_9;
    }
    v3 = (103973 - (int)result) / 2059;
    v4 = g_Table_sinQ15[v3];
    v5 = g_Table_sinQ15[25 - v3];
    v6 = result + ((16471 * v3) >> 3) - 102944;
  }
  v9 = -v5;
LABEL_9:
  v13 = (v6 * v6) >> 16;
  *a2 = v4 + ((int)(v6 * v9 - v13 * v4) >> 15);
  *a3 = v9 - ((int)(v6 * v4 + v13 * v9) >> 15);
  return result;
}

const char *formatAndWriteData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v7;
  char v8;
  int v9;
  double v10;
  int v11;
  unint64_t v12;
  double v13;
  unint64_t v14;
  double v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  int v38;
  _BOOL4 v39;
  uint64_t v40;
  double v41;
  _BOOL4 v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  const char *result;
  unint64_t v47;
  double v48;
  _BOOL4 v49;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[24];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _QWORD v63[4];
  _QWORD v64[4];
  __int128 v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  TCU_UpdateTime((const char *)a4, *(_DWORD *)a1, *(_DWORD *)(a1 + 16), *(_BYTE *)(a1 + 20), *(__int16 *)(a1 + 22), *(_DWORD *)(a1 + 4), *(double *)(a1 + 8));
  *(_DWORD *)(a3 + 16) = 2;
  v7 = *(double *)(a4 + 40);
  *(double *)(a3 + 8) = v7;
  Set_Mat_Size((const char *)3, (int *)(a3 + 152), 3, 1);
  *(_QWORD *)(a3 + 160) = *(_QWORD *)(a1 + 832);
  *(_QWORD *)(a3 + 168) = *(_QWORD *)(a1 + 840);
  *(_QWORD *)(a3 + 176) = *(_QWORD *)(a1 + 848);
  Set_Mat_Size((const char *)3, (int *)(a3 + 24), 3, 1);
  *(_QWORD *)(a3 + 32) = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a3 + 40) = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a3 + 48) = *(_QWORD *)(a1 + 144);
  Set_Mat_Size((const char *)3, (int *)(a3 + 56), 3, 1);
  *(_QWORD *)(a3 + 64) = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a3 + 72) = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(a1 + 168);
  Set_Mat_Size((const char *)3, (int *)(a3 + 184), 3, 1);
  *(_QWORD *)(a3 + 192) = *(_QWORD *)(a1 + 856);
  *(_QWORD *)(a3 + 200) = *(_QWORD *)(a1 + 864);
  *(_QWORD *)(a3 + 208) = *(_QWORD *)(a1 + 872);
  v8 = *(_BYTE *)(a1 + 784);
  if (v8)
    v8 = *(double *)(a1 + 200) < 200.0;
  *(_BYTE *)(a3 + 216) = v8;
  *(_QWORD *)(a3 + 88) = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a3 + 96) = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a3 + 104) = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a3 + 136) = *(_QWORD *)(a1 + 120);
  *(double *)(a3 + 144) = (double)*(int *)(a1 + 24) * 0.001 * 299792458.0;
  memset(v55, 0, sizeof(v55));
  ud2var(a1 + 256, 0xBu, 1, 3u, (double *)v55);
  *(_OWORD *)(a3 + 112) = *(_OWORD *)v55;
  *(_QWORD *)(a3 + 128) = *(_QWORD *)&v55[16];
  *(_BYTE *)(a3 + 217) = *(_BYTE *)(a1 + 1080);
  *(_BYTE *)(a3 + 219) = *(_BYTE *)(a1 + 1096);
  *(_BYTE *)(a3 + 218) = *(_BYTE *)(a1 + 1176);
  v49 = MeasSyncher_applyNewRecord(1, (_DWORD *)(a3 + 8), a2);
  v52 = 0;
  v53 = 0;
  v54 = 0;
  if (*(_BYTE *)(a3 + 4))
  {
    v9 = *(_DWORD *)(a1 + 4) - *(_DWORD *)a3;
    v10 = 1.0;
    if (v9 != 1000)
    {
      v11 = v9 - 1000;
      if (v9 < 1000)
        v11 = 1000 - v9;
      if (v11 > 500)
      {
        v10 = -1.0;
        if ((g_FPE_LogSeverity & 4) != 0)
        {
          v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU)
            v15 = *(double *)(g_TCU + 8);
          else
            v15 = 0.0;
          LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f ttick_diff=%d very far from 1000ms, ignoring DR", "DR_norm_factor", 309, v14, v15, v9);
        }
      }
      else
      {
        if ((g_FPE_LogSeverity & 4) != 0)
        {
          v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          if (g_TCU)
            v13 = *(double *)(g_TCU + 8);
          else
            v13 = 0.0;
          LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f ttick_diff=%d close to 1000ms, normalizing DR", "DR_norm_factor", 303, v12, v13, v9);
        }
        v10 = 1000.0 / (double)v9;
      }
    }
  }
  else
  {
    *(_BYTE *)(a3 + 4) = 1;
    v10 = 1.0;
  }
  v16 = 0;
  v17 = 0;
  *(_DWORD *)a3 = *(_DWORD *)(a1 + 4);
  v18 = *(_QWORD *)(a4 + 40);
  v19 = 48;
  v51 = 1;
  do
  {
    v20 = a1 + v16;
    v21 = *(_DWORD *)(a1 + v16 + 1208);
    if (((Is_Legal(v21) ^ (v21 == 0)) & 1) == 0 && (g_FPE_LogSeverity & 2) != 0)
    {
      v22 = mach_continuous_time();
      if (g_TCU)
        v23 = *(double *)(g_TCU + 8);
      else
        v23 = 0.0;
      LC_LOG_SEVERITY_GENERIC("ERR:[%s() #%d] TT = %d, %0.3f %s", "constructSvMeasurements", 348, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), v23, "c legality check is different than matlab legality check!");
      v21 = *(_DWORD *)(v20 + 1208);
    }
    if (!Is_Legal(v21))
      goto LABEL_78;
    ++*((_DWORD *)&v52 + v21 - 1);
    v24 = a1 + v16;
    if (*(double *)(a1 + v16 + 1288) <= 0.0)
      goto LABEL_78;
    v25 = (v21 < 6u) & (0x2Eu >> v21);
    if (*(double *)(v24 + 1304) <= 0.0)
    {
      if (*(double *)(a1 + v16 + 1296) <= 0.0)
        LOBYTE(v25) = 0;
      if ((v25 & 1) == 0)
        goto LABEL_78;
    }
    else if (!v25)
    {
      goto LABEL_78;
    }
    v65 = 0u;
    memset(v64, 0, sizeof(v64));
    v62 = 0u;
    memset(v63, 0, sizeof(v63));
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    *(_OWORD *)&v55[8] = 0u;
    *(_QWORD *)v55 = v18;
    v26 = *(_DWORD *)(a3 + 224);
    *(_DWORD *)&v55[8] = 1;
    DWORD2(v62) = BYTE2(v21);
    Set_Mat_Size((const char *)3, (int *)v63, 3, 1);
    *(_OWORD *)&v63[1] = *(_OWORD *)(a1 + v16 + 1216);
    v63[3] = *(_QWORD *)(a1 + v16 + 1232);
    Set_Mat_Size((const char *)3, (int *)v64, 3, 1);
    *(_OWORD *)&v64[1] = *(_OWORD *)(a1 + v16 + 1240);
    v64[3] = *(_QWORD *)(a1 + v16 + 1256);
    Set_Mat_Const((const char *)2, 1u, (const char *)6, (int *)&v55[16], 0.0);
    *(_QWORD *)&v56 = *(_QWORD *)(a1 + v16 + 1264);
    Set_Mat_Const((const char *)2, 1u, (const char *)6, (int *)&v59, 0.0);
    v27 = *(double *)(v24 + 1288);
    if (v27 < 0.0)
    {
      if ((g_FPE_LogSeverity & 1) != 0)
      {
        v28 = mach_continuous_time();
        if (g_TCU)
          v29 = *(double *)(g_TCU + 8);
        else
          v29 = 0.0;
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "svMeasSetData", 236, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), v29, v27);
      }
      g_FPE_AssertFlag = 1;
      v27 = 1.0;
    }
    *((_QWORD *)&v59 + 1) = sqrt(v27);
    if (v10 > 0.0 && *(_BYTE *)(a1 + v16 + 1314))
    {
      v30 = -(*(double *)(a1 + v16 + 1280) * v10);
      v31 = v10 * (v10 * *(double *)(v24 + 1304));
      goto LABEL_48;
    }
    v30 = *(double *)(a1 + v16 + 1272);
    if (*(_BYTE *)(a1 + v16 + 1313))
    {
      v31 = *(double *)(a1 + v16 + 1296);
LABEL_48:
      if (v31 < 0.0)
      {
        if ((g_FPE_LogSeverity & 1) != 0)
        {
          v32 = mach_continuous_time();
          if (g_TCU)
            v33 = *(double *)(g_TCU + 8);
          else
            v33 = 0.0;
          LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Trying to sqrt a negative number %f", "svMeasSetData", 260, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), v33, v31);
        }
        g_FPE_AssertFlag = 1;
        v31 = 1.0;
      }
      goto LABEL_61;
    }
    if ((g_FPE_LogSeverity & 4) != 0)
    {
      v34 = mach_continuous_time();
      if (g_TCU)
        v35 = *(double *)(g_TCU + 8);
      else
        v35 = 0.0;
      LC_LOG_SEVERITY_GENERIC("WRN:[%s() #%d] TT = %d, %0.3f %s", "svMeasSetData", 255, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v34), v35, "DO and DR are not valid");
    }
    v31 = 100000000.0;
LABEL_61:
    if (v26 <= 7 && ((1 << v26) & 0xC1) != 0)
      v36 = sqrt(v31) * 10.0;
    else
      v36 = sqrt(v31) * 5.0;
    v37 = 1.0;
    if (v36 > 1.0)
      v37 = v36;
    *((double *)&v56 + 1) = -v30;
    *(double *)&v60 = v37;
    switch(*(_BYTE *)(v20 + 1208))
    {
      case 1:
        HIDWORD(v62) = 0;
        goto LABEL_76;
      case 2:
        v38 = 1;
        goto LABEL_75;
      case 3:
        v38 = 2;
        goto LABEL_75;
      case 4:
        HIDWORD(v62) = 3;
        goto LABEL_76;
      case 5:
        v38 = 4;
LABEL_75:
        HIDWORD(v62) = v38;
        goto LABEL_76;
      case 6:
        goto LABEL_77;
      default:
        HIDWORD(v62) = 7;
        if ((g_FPE_LogSeverity & 1) == 0)
        {
          g_FPE_AssertFlag = 1;
LABEL_76:
          v39 = MeasSyncher_applyNewRecord(1, v55, a2);
          v51 &= v39;
          goto LABEL_77;
        }
        v40 = mach_continuous_time();
        if (g_TCU)
          v41 = *(double *)(g_TCU + 8);
        else
          v41 = 0.0;
        LC_LOG_SEVERITY_GENERIC("CRIT:[%s() #%d] TT = %d, %0.3f Unknown constellation %d", "svMeasSetConstellation", 200, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v40), v41, *(unsigned __int8 *)(v20 + 1208));
        g_FPE_AssertFlag = 1;
        if (HIDWORD(v62) != 5)
          goto LABEL_76;
LABEL_77:
        ++v17;
        break;
    }
LABEL_78:
    v16 += 144;
    --v19;
  }
  while (v19);
  *(_OWORD *)&v55[8] = 0u;
  v65 = 0u;
  memset(v64, 0, sizeof(v64));
  memset(v63, 0, sizeof(v63));
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  *(_QWORD *)v55 = v18;
  *(_DWORD *)&v55[8] = 3;
  *(_DWORD *)&v55[16] = v17;
  v42 = MeasSyncher_applyNewRecord(1, v55, a2);
  v45 = v51 & v42;
  if ((g_FPE_LogSeverity & 0x200) != 0)
  {
    LODWORD(v44) = *(_DWORD *)a1;
    LODWORD(v43) = *(_DWORD *)(a1 + 4);
    LC_LOG_NMEA_GENERIC("%s,EPOCH,%.3f,%.3f,%d,%10.3f,%d,%d,%d,%d,%d,%d", "$PFPEX", (double)v43 * 0.001, (double)v44 * 0.001, *(__int16 *)(a1 + 22), *(double *)(a1 + 8), *(_DWORD *)(a1 + 16), v52, HIDWORD(v52), v53, HIDWORD(v53), 3);
  }
  *(_OWORD *)&v55[8] = 0u;
  v65 = 0u;
  memset(v64, 0, sizeof(v64));
  memset(v63, 0, sizeof(v63));
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  *(_DWORD *)&v55[8] = 4;
  *(double *)v55 = v7 + 0.6;
  result = (const char *)MeasSyncher_applyNewRecord(1, v55, a2);
  if (((v49 & v45) != 1 || (result & 1) == 0) && (g_FPE_LogSeverity & 2) != 0)
  {
    v47 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    if (g_TCU)
      v48 = *(double *)(g_TCU + 8);
    else
      v48 = 0.0;
    return LC_LOG_SEVERITY_GENERIC("ERR:[%s() #%d] TT = %d, %0.3f %s", "formatAndWriteData", 440, v47, v48, "GnssGen formatAndWriteData: error in applying measurements to syncher!");
  }
  return result;
}

const char *LC_LOG_NMEA_GENERIC(const char *__format, ...)
{
  uint64_t v1;
  char *v2;
  int v3;
  BOOL v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 v8;
  char *v9;
  char v10;
  va_list va;

  va_start(va, __format);
  if (g_DBfd)
  {
    v1 = *(unsigned int *)g_DBfd;
    v2 = (char *)(g_DBfd + v1 + 4);
    __format = (const char *)vsnprintf(v2, (10240 - v1), __format, va);
    if ((int)__format < 1
      || ((v3 = (_DWORD)__format + 4, (_DWORD)__format != 300)
        ? (v4 = ((_DWORD)__format + 4 + v1) > 0x27FE)
        : (v4 = 1),
          v4))
    {
      if (v1 >> 4 > 0x27E)
        return __format;
      strcpy(v2, "$PFPEX,ERR1*03\n");
      v5 = (_DWORD *)g_DBfd;
      v3 = *(_DWORD *)g_DBfd;
      v6 = 15;
    }
    else
    {
      v7 = ((_DWORD)__format - 1);
      if ((_DWORD)__format != 1)
      {
        v8 = 0;
        v9 = v2 + 1;
        do
        {
          v10 = *v9++;
          v8 ^= v10;
          --v7;
        }
        while (v7);
        LODWORD(v7) = v8;
      }
      __format = (const char *)sprintf(&v2[__format], "*%02X\n", v7);
      v5 = (_DWORD *)g_DBfd;
      v6 = *(_DWORD *)g_DBfd;
    }
    *v5 = v3 + v6;
  }
  return __format;
}

uint64_t numOfMeasInNextEpoch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  double v18;
  _QWORD __dst[7];
  char v20;
  _BYTE v21[744];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[200];
  uint64_t v28;
  char v29;
  int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  uint64_t v36;
  char v37;
  __int16 v38;
  int v39;
  _BYTE v40[176];
  uint64_t v41;

  v6 = MEMORY[0x24BDAC7A8](a1, a2, a3, a4, a5, a6);
  v8 = (uint64_t)v7;
  v9 = v6;
  v41 = *MEMORY[0x24BDAC8D0];
  if (Cyc_Record_IsEmpty(v7, v6))
    return 3;
  v28 = 0;
  v29 = 0;
  memset(&v27[128], 0, 65);
  v36 = 0;
  v37 = 0;
  v30 = 0;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0;
  v38 = 0;
  v39 = 0;
  memset(__dst, 0, 21);
  memset((char *)&__dst[2] + 6, 0, 11);
  __dst[5] = 0;
  __dst[6] = 0;
  v20 = 0;
  bzero(v21, 0x2D1uLL);
  v26 = 0u;
  memset(v27, 0, 26);
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  *(_OWORD *)&v21[728] = 0u;
  memset(&v27[32], 0, 92);
  v11 = 151;
  do
  {
    v12 = &__dst[v11];
    *(_DWORD *)v12 = 0;
    *((_BYTE *)v12 + 4) = 0;
    *(_OWORD *)(v12 + 1) = 0uLL;
    *(_OWORD *)(v12 + 3) = 0uLL;
    *(_OWORD *)(v12 + 5) = 0uLL;
    *(_OWORD *)(v12 + 7) = 0uLL;
    *(_OWORD *)(v12 + 9) = 0uLL;
    *(_OWORD *)(v12 + 11) = 0uLL;
    *(_OWORD *)((char *)v12 + 97) = 0uLL;
    v11 += 18;
    v12[15] = 0;
    v12[16] = 0;
    *(_DWORD *)((char *)v12 + 135) = 0;
  }
  while (v12 + 18 != (_QWORD *)v40);
  memset(v40, 0, 172);
  Cyc_Record_Peek(v8, v9, 0, __dst);
  v13 = 0;
  v14 = -6912;
  do
  {
    v15 = *(_DWORD *)&v40[v14];
    v16 = Is_Legal(v15);
    if (((v16 ^ (v15 == 0)) & 1) == 0 && (g_FPE_LogSeverity & 2) != 0)
    {
      v17 = mach_continuous_time();
      if (g_TCU)
        v18 = *(double *)(g_TCU + 8);
      else
        v18 = 0.0;
      LC_LOG_SEVERITY_GENERIC("ERR:[%s() #%d] TT = %d, %0.3f %s", "numOfMeasInNextEpoch", 478, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), v18, "c legality check is different than matlab legality check!");
      v16 = Is_Legal(*(_DWORD *)&v40[v14]);
    }
    v13 += v16;
    v14 += 144;
  }
  while (v14);
  return (v13 + 3);
}

uint64_t GnssGen_run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t result;
  unsigned int v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE __dst[21];
  _WORD v25[17];
  char v26;
  _BYTE v27[744];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[200];
  uint64_t v34;
  char v35;
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;
  uint64_t v42;
  char v43;
  __int16 v44;
  int v45;
  _BYTE v46[172];
  uint64_t v47;

  v21 = MEMORY[0x24BDAC7A8](a1, a2, a3, a4, a5, a6);
  v22 = v6;
  v23 = v7;
  v9 = v8;
  v47 = *MEMORY[0x24BDAC8D0];
  v11 = (_DWORD *)(v10 + 52688);
  result = numOfMeasInNextEpoch(v8, v10 + 52688, v10, v7, v6, v12);
  if ((_DWORD)result)
  {
    v14 = result;
    do
    {
      result = Cyc_Record_Count_Free(*(_DWORD **)(v23 + 128024), 1u);
      if (result <= v14)
        break;
      result = Cyc_Record_Count_Occupied(v11, v9);
      if (!(_DWORD)result)
        break;
      v34 = 0;
      v35 = 0;
      memset(&v33[128], 0, 65);
      v42 = 0;
      v43 = 0;
      v36 = 0;
      v37 = 0u;
      v38 = 0u;
      v39 = 0u;
      v40 = 0u;
      v41 = 0;
      v44 = 0;
      v45 = 0;
      memset(__dst, 0, sizeof(__dst));
      *(_DWORD *)((char *)&v25[3] + 1) = 0;
      *(_QWORD *)v25 = 0;
      *(_QWORD *)&v25[9] = 0;
      *(_QWORD *)&v25[13] = 0;
      v26 = 0;
      bzero(v27, 0x2D1uLL);
      v32 = 0u;
      memset(v33, 0, 26);
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      *(_OWORD *)&v27[728] = 0u;
      memset(&v33[32], 0, 92);
      v15 = 1208;
      do
      {
        v16 = &__dst[v15];
        *(_DWORD *)v16 = 0;
        v16[4] = 0;
        *(_OWORD *)(v16 + 8) = 0uLL;
        *(_OWORD *)(v16 + 24) = 0uLL;
        *(_OWORD *)(v16 + 40) = 0uLL;
        *(_OWORD *)(v16 + 56) = 0uLL;
        *(_OWORD *)(v16 + 72) = 0uLL;
        *(_OWORD *)(v16 + 88) = 0uLL;
        *(_OWORD *)(v16 + 97) = 0uLL;
        v15 += 144;
        *((_QWORD *)v16 + 15) = 0;
        *((_QWORD *)v16 + 16) = 0;
        *(_DWORD *)(v16 + 135) = 0;
      }
      while (v16 + 144 != v46);
      memset(v46, 0, sizeof(v46));
      Cyc_Record_Read((uint64_t)v11, v9, __dst);
      formatAndWriteData((uint64_t)__dst, v23, v21, v22);
      result = numOfMeasInNextEpoch(v9, (uint64_t)v11, v17, v18, v19, v20);
      v14 = result;
    }
    while ((_DWORD)result);
  }
  return result;
}

BOOL HswUtil_AddNmeaCS(char *a1, unsigned int a2, unsigned __int16 *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v7;
  uint64_t v8;
  char *v9;
  char v10;

  v4 = *a3;
  v5 = v4 + 4;
  if ((int)v4 + 4 <= a2)
  {
    if (v4 < 2)
    {
      v7 = 0;
    }
    else
    {
      LOBYTE(v7) = 0;
      v8 = v4 - 1;
      v9 = a1 + 1;
      do
      {
        v10 = *v9++;
        LOBYTE(v7) = v10 ^ v7;
        --v8;
      }
      while (v8);
      v7 = v7;
    }
    snprintf(&a1[v4], a2 - v4, "*%02x\n", v7);
    *a3 += 4;
  }
  return v5 <= a2;
}

void Pre_Positioning(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, unsigned int *a8, unsigned int *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v13;
  double v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  double v25;
  double *v26;
  double v27;
  double v28;
  double *v29;
  double v30;
  double *v31;
  __int128 v32;
  double v33;
  double v34;
  double v35;
  float64x2_t v36;
  float64_t v37;
  int v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  unint64_t v42;
  double v43;
  int v44;
  double v45;
  float64x2_t v46;
  double v47;
  double v48;
  uint64_t v49;
  int32x2_t v50;
  int64x2_t v51;
  double *v52;
  double v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;
  uint64_t v57;
  unsigned int v58;
  double v59;
  int v61;
  double v62;
  int v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  int v80;
  _BOOL4 v81;
  double v82;
  double v83;
  double v84;
  double v85;
  int v86;
  int v87;
  double v88;
  double v89;
  int v90;
  uint64_t v91;
  double v92;
  int v93;
  double v94;
  unsigned int v95;
  int v96;
  __int16 v98;
  unsigned int v99;
  unsigned int v100;
  unsigned __int16 v101;
  uint64_t v102;
  _BOOL4 v103;
  uint64_t v104;
  unsigned int *v105;
  int v106;
  int v107;
  unsigned int *v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  unint64_t v119;
  double v120;
  double v121;
  double v122;
  double v123;
  __int16 v124;
  int v125;
  int v126;
  double v127;
  double v128;
  int v129;
  uint64_t v130;
  double v131;
  double v132;
  double v133;
  double v134;
  __int16 v135;
  __int16 v136;
  double v137;
  double v138;
  double v139;
  __int16 v140;
  __int16 v141;
  double v142;
  double v143;
  int v144;
  int v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  unsigned __int8 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  int v158;
  unsigned int v159;
  int v160;
  char v161;
  int v162;
  int v163;
  uint64_t v164;
  _BYTE *v165;
  uint64_t v166;
  _WORD *v167;
  _OWORD *v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  int v175;
  unsigned int v176;
  int v177;
  int v178;
  unsigned int v179;
  int v180;
  unsigned int v181;
  unsigned __int8 v182;
  __int16 v183;
  char v184;
  int v185;
  char v186;
  BOOL v187;
  unsigned int v188;
  uint64_t v189;
  _WORD *v190;
  __int16 *v191;
  __int16 v192;
  uint64_t v193;
  int v194;
  int v195;
  BOOL v196;
  char v197;
  uint64_t i;
  _OWORD *v199;
  uint64_t v200;
  int Constell_Prn;
  int v202;
  unsigned int v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  _BYTE *v215;
  __int128 v216;
  uint64_t v217;
  _OWORD *v218;
  double v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  _OWORD *v223;
  int v224;
  int v225;
  int v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  uint64_t v233;
  double v234;
  double v235;
  uint64_t v236;
  double v237;
  int v238;
  unsigned __int8 v239;
  unsigned int v240;
  _BOOL4 v241;
  BOOL v242;
  unsigned __int8 v243;
  uint64_t v244;
  __int128 v245;
  __int128 v246;
  int v247;
  uint64_t v248;
  double v249;
  unint64_t v250;
  uint64_t v251;
  _DWORD *v252;
  int v253;
  __int16 v254;
  __int16 v255;
  int v256;
  BOOL v257;
  BOOL v258;
  unsigned int v259;
  int v260;
  unsigned __int8 *v261;
  char v262;
  __int128 v263;
  const float *v264;
  float32x4_t v265;
  uint64_t j;
  uint64_t k;
  unsigned int *v268;
  unsigned __int8 *v269;
  int v270;
  const float *v271;
  float32x4_t v272;
  uint64_t m;
  unsigned __int8 *v274;
  uint64_t v275;
  __int16 v276;
  unsigned int v277;
  unsigned __int8 *v278;
  uint64_t v279;
  int v280;
  unsigned __int8 v281;
  unint64_t v282;
  _DWORD *v283;
  unint64_t v284;
  _WORD *v285;
  __int16 v286;
  uint64_t v287;
  unsigned __int8 *v288;
  uint64_t v289;
  int v290;
  uint64_t n;
  uint64_t v292;
  int v293;
  uint64_t v294;
  int v295;
  uint64_t v296;
  int v297;
  int v298;
  int v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unsigned __int16 *v310;
  __int16 v311;
  int v312;
  int v313;
  int v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  _DWORD *v321;
  uint64_t v322;
  char v323;
  int v324;
  _BOOL4 v325;
  _BOOL4 v326;
  int v327;
  __int128 v328;
  double *v329;
  _DWORD *v330;
  uint64_t v331;
  _BOOL4 v332;
  uint64_t v333;
  float64x2_t *v334;
  __int16 v335;
  unsigned __int8 v336;
  _BYTE *v337;
  int v338;
  int v339;
  _BYTE *v340;
  int v341;
  int __dst;
  void *__dsta;
  _DWORD *v347;
  unsigned __int8 *v348;
  uint64_t v350;
  double v351;
  char v352;
  int v353;
  __int16 v354;
  double v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int16 v367;
  __int128 v368;
  double v369[2];
  _OWORD v370[8];
  int v371;
  char v372;
  _BYTE v373[48];
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  _OWORD v383[11];
  __int16 v384;
  unsigned __int8 v385[16];
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int16 v396;
  _OWORD v397[11];
  __int16 v398;
  double __src[89];
  _OWORD __b[89];
  uint64_t v401;

  v11 = a4;
  v13 = a2;
  v401 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a2 + 292) = 0;
  __dst = *(__int16 *)(a1 + 6);
  v15 = *(double *)(a1 + 16);
  v368 = *(_OWORD *)(a1 + 24);
  v369[0] = *(double *)(a1 + 40);
  v16 = *a5;
  *(_BYTE *)a1 = *(_BYTE *)(a4 + 19);
  *(_WORD *)(a1 + 6) = *(_WORD *)(a4 + 54);
  *(_DWORD *)(a2 + 284) = *(_DWORD *)(a4 + 48);
  *(_DWORD *)(a2 + 176) = *(_DWORD *)(a4 + 32);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a4 + 40);
  *(_DWORD *)(a2 + 288) = *(_DWORD *)(a4 + 180);
  v17 = *(_OWORD *)(a4 + 208);
  v18 = *(_QWORD *)(a4 + 224);
  v19 = *(_OWORD *)(a4 + 72);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a4 + 88);
  *(_OWORD *)(a1 + 24) = v19;
  v20 = *(_QWORD *)(a4 + 112);
  *(_OWORD *)a2 = *(_OWORD *)(a4 + 96);
  *(_QWORD *)(a2 + 16) = v20;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a4 + 240);
  v22 = *(_OWORD *)(a4 + 272);
  v21 = *(_OWORD *)(a4 + 288);
  v23 = *(_QWORD *)(a4 + 304);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a4 + 256);
  *(_QWORD *)(a2 + 168) = v23;
  *(_OWORD *)(a2 + 152) = v21;
  *(_OWORD *)(a2 + 136) = v22;
  v24 = *(_OWORD *)(a4 + 320);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a4 + 336);
  *(_OWORD *)(a2 + 24) = v24;
  v25 = *(double *)(a4 + 160);
  *(double *)(a2 + 88) = v25;
  v26 = (double *)(a2 + 88);
  *(_QWORD *)v373 = 0;
  __b[0] = v17;
  *(_QWORD *)&__b[1] = v18;
  v27 = *(double *)(a4 + 344);
  *(double *)(a2 + 48) = v27;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a4 + 960);
  v28 = *(double *)(a4 + 144);
  *(double *)(a2 + 64) = v28;
  v29 = (double *)(a2 + 64);
  v30 = *(double *)(a4 + 152);
  *(double *)(a2 + 80) = v30;
  v31 = (double *)(a2 + 80);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a4 + 168);
  __src[0] = 0.0;
  if (R8_EQ((const double *)(a2 + 64), __src))
  {
    __src[0] = 0.0;
    if (R8_EQ(v31, __src))
    {
      __src[0] = 0.0;
      v30 = 0.0;
      if (!R8_EQ(v26, __src))
      {
        *(double *)v373 = v25;
        v30 = v25;
      }
    }
    else
    {
      *(double *)v373 = v30;
    }
  }
  else
  {
    *(double *)v373 = v28;
    v30 = v28;
  }
  __src[0] = 0.0;
  if (!R8_EQ((const double *)v373, __src))
  {
    __src[0] = 0.0;
    if (R8_EQ(v29, __src))
    {
      *v29 = v30;
      v28 = v30;
    }
    __src[0] = 0.0;
    if (R8_EQ(v31, __src))
      *v31 = v30;
    __src[0] = 0.0;
    if (R8_EQ(v26, __src))
      *v26 = v30;
  }
  v32 = *(_OWORD *)(v11 + 840);
  *(_OWORD *)(v13 + 184) = v32;
  v33 = *(double *)(v11 + 896);
  *(double *)(v13 + 200) = v33;
  *(_QWORD *)(v13 + 208) = *(_QWORD *)(v11 + 824);
  v34 = *(double *)(v11 + 888);
  v35 = *(double *)(v11 + 872);
  v36.f64[0] = *(float64_t *)(v11 + 856);
  v37 = *(double *)(v11 + 864);
  *(_QWORD *)(v13 + 248) = *(_QWORD *)(v11 + 880);
  v38 = *(_DWORD *)(v11 + 12);
  *(_DWORD *)(v13 + 264) = v38;
  v39 = *(_QWORD *)(v11 + 20);
  *(_QWORD *)(v13 + 272) = v39;
  if (*(_BYTE *)(v11 + 372))
  {
    v40 = 0.0;
    v41 = 17;
    do
    {
      v40 = v40 + *(double *)(v11 + 8 * v41) * *(double *)(v11 + 8 * v41);
      v42 = v41 - 14;
      --v41;
    }
    while (v42 > 1);
    v43 = sqrt(v40) * *(double *)(v11 + 64);
    v35 = v35 + v43;
    v36.f64[0] = v36.f64[0] + v43;
  }
  *(_BYTE *)(v13 + 293) = *(_BYTE *)(v11 + 18);
  v44 = *(_DWORD *)(a1 + 8);
  if (!v44)
  {
    v44 = *(_DWORD *)(v13 + 176);
    *(_DWORD *)(a1 + 8) = v44;
  }
  *(_DWORD *)(v13 + 296) = v44;
  *(double *)(a1 + 16) = *(double *)(v13 + 96) - v28;
  v45 = *(double *)(a3 + 1000) * 99930819.3;
  if (*(_DWORD *)a3 || *(_DWORD *)(a3 + 8))
  {
    v46 = (float64x2_t)xmmword_21E7FA000;
    v47 = 10.0;
    v48 = 5.0;
    switch((int)v39)
    {
      case 0:
      case 1:
        goto LABEL_31;
      case 2:
        break;
      case 3:
        v46 = (float64x2_t)xmmword_21E7FA050;
        v47 = 15.0;
        break;
      case 4:
        v46 = (float64x2_t)xmmword_21E7FA040;
        v47 = 25.0;
        break;
      case 5:
        v46 = (float64x2_t)xmmword_21E7FA030;
        *(double *)&v49 = 50.0;
        goto LABEL_28;
      case 6:
        v46 = (float64x2_t)xmmword_21E7FA020;
        *(double *)&v49 = 200.0;
LABEL_28:
        v47 = *(double *)&v49;
        break;
      case 7:
        v46 = (float64x2_t)xmmword_21E7FA010;
        v47 = 350.0;
        break;
      case 8:
        v46 = (float64x2_t)vdupq_n_s64(0x412E848000000000uLL);
        v47 = 1000000.0;
        break;
      default:
        v48 = 1000000.0;
LABEL_31:
        v50 = vdup_n_s32(v39 < 2);
        v51.i64[0] = v50.u32[0];
        v51.i64[1] = v50.u32[1];
        v46 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v51, 0x3FuLL)), (int8x16_t)xmmword_21E7F9FF0, (int8x16_t)vdupq_n_s64(0x412E848000000000uLL));
        v47 = v48;
        break;
    }
  }
  else
  {
    v46 = (float64x2_t)xmmword_21E7F9FF0;
    v47 = 5.0;
  }
  v329 = v26;
  v52 = v26 + 613;
  if (v34 > v45)
  {
    *(_QWORD *)(v13 + 72) = *(_QWORD *)(a3 + 992);
    v34 = v45;
  }
  v334 = (float64x2_t *)(a1 + 24);
  *(double *)(v13 + 224) = v34 * 5.25503547;
  if (v35 > v47)
  {
    if (v39 < 4 || v27 < v47 + v47)
    {
      *(_QWORD *)(v13 + 48) = 0;
      *(_OWORD *)(v13 + 16) = 0u;
      *(_OWORD *)(v13 + 32) = 0u;
      *(_OWORD *)v13 = 0u;
    }
    v35 = v47;
  }
  v53 = sqrt(v35 * v35 + 0.0 + v34 * v34) * 5.25503547;
  if (v53 <= 1.0)
    v53 = 1.0;
  *(double *)(v13 + 216) = v53;
  v36.f64[1] = v37;
  *(float64x2_t *)(v13 + 232) = vmulq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v36, v46), (int8x16_t)v46, (int8x16_t)v36), (float64x2_t)vdupq_n_s64(0x4015052804935343uLL));
  if (v53 < 21840.0)
    v54 = (int)(v53 * 3.0) + 1;
  else
    v54 = -1;
  *(_WORD *)(v13 + 256) = v54;
  if (v34 < 4156.01381)
    v55 = (int)(v34 * 15.7651064) + 1;
  else
    v55 = -1;
  *(_WORD *)(v13 + 258) = v55;
  if (v35 < 4156.01381)
    v56 = (int)(v35 * 15.7651064) + 1;
  else
    v56 = -1;
  *(_WORD *)(v13 + 260) = v56;
  *(_BYTE *)(v13 + 268) = 0;
  *(int64x2_t *)(v13 + 4976) = vdupq_n_s64(0xC023CCCCCCCCCCCDLL);
  *(_QWORD *)(v13 + 4960) = v32;
  *(double *)(v13 + 4968) = v33;
  *(_WORD *)v52 = 0;
  v350 = a3;
  if (v33 > 1000.0 || *(double *)&v32 > 1000.0 || v16 || (v332 = 0, v38 <= 2))
  {
    v354 = 0;
    v353 = 0;
    v352 = 0;
    *(_QWORD *)&v397[0] = 0;
    *(_QWORD *)v385 = 0;
    *(_QWORD *)&v383[0] = 0;
    *(_QWORD *)&v356 = 0;
    v332 = 0;
    if (Core_Get_GPS_TimePos(*(_DWORD *)(v13 + 176), (_BYTE *)&v354 + 1, &v354, &v353, &v352, (double *)v397, (double *)v385, (uint64_t)__src, (double *)v383, (double *)&v356))
    {
      v57 = v11;
      *(_QWORD *)&v370[0] = 0;
      v355 = 0.0;
      v58 = v353 - 3;
      v332 = (v353 - 3) < 2;
      v59 = *(double *)v385;
      if (*(double *)v385 <= 0.0005 || HIBYTE(v354) == 0)
        v61 = HIBYTE(v354);
      else
        v61 = 0;
      v62 = *(double *)v383;
      if (*(double *)v383 <= 150000.0 || v354 == 0)
        v64 = v354;
      else
        v64 = 0;
      if (*(int *)(v13 + 264) <= 2 && *(unsigned __int8 *)(a1 + 4) <= 0x63u && v64 && *(double *)(v13 + 200) < 1000.0)
      {
        if (v16)
        {
          *(_BYTE *)(v13 + 292) = 1;
LABEL_81:
          *(_QWORD *)(v13 + 200) = 0x4163125300000000;
          *(_QWORD *)(v13 + 184) = 0x4163125300000000;
          goto LABEL_82;
        }
        if (v58 <= 1)
        {
          v65 = Horiz_Diff_Sqd((double *)__b, __src);
          if (v65 > 193229.156)
          {
            v66 = v62 * (v62 * 4.0);
            if (v66 <= *(double *)(v13 + 200) * (*(double *)(v13 + 200) * 9.0))
              v66 = *(double *)(v13 + 200) * (*(double *)(v13 + 200) * 9.0);
            if (v65 > v66)
            {
              *(_BYTE *)(v13 + 292) = 1;
              EvCrt_v("PrePos:  PosDisc = TRUE    Between Nav Pos and Ref Pos");
            }
          }
        }
        if (*(_BYTE *)(v13 + 292))
          goto LABEL_81;
      }
LABEL_82:
      if (v352 && v59 < 0.001 && v61 && v64)
      {
        v67 = v59 * 99930819.3;
        *(double *)v370 = v59 * 99930819.3;
        v68 = v62 / 3.0;
        v355 = v62 / 3.0;
        *(double *)(v13 + 4976) = v59 * 99930819.3;
        *(double *)(v13 + 4984) = v62 / 3.0;
        if (v59 * 99930819.3 + v62 / 3.0 >= (*(double *)(v13 + 184) + *(double *)(v13 + 200)) * 1.5)
        {
          *(_QWORD *)&v370[0] = 0;
          v355 = 0.0;
          v68 = 0.0;
          v67 = 0.0;
        }
        else
        {
          *(_BYTE *)(v13 + 268) = 1;
        }
      }
      else
      {
        v69 = *(double *)(v13 + 184);
        v68 = 0.0;
        v67 = 0.0;
        if (v69 > 1000.0)
        {
          if (v61)
          {
            if (v59 < 0.001)
            {
              v67 = v59 * 99930819.3;
              *(double *)v370 = v59 * 99930819.3;
              *(double *)(v13 + 4976) = v59 * 99930819.3;
              *(_QWORD *)(v13 + 4984) = 0xBFF199999999999ALL;
              if (v59 * 99930819.3 >= v69 * 1.5)
              {
                *(_QWORD *)&v370[0] = 0;
                v67 = 0.0;
              }
            }
          }
        }
        if (v58 <= 1)
        {
          v70 = *(double *)(v13 + 200);
          if (v70 > 1000.0)
          {
            if (v64)
            {
              v355 = v62 / 3.0;
              *(_QWORD *)(v13 + 4976) = 0xBFF199999999999ALL;
              *(double *)(v13 + 4984) = v62 / 3.0;
              if (v62 / 3.0 >= v70 * 1.5)
                v355 = 0.0;
              else
                v68 = v62 / 3.0;
            }
          }
        }
      }
      v11 = v57;
      v351 = 0.0;
      if (R8_EQ((const double *)v370, &v351))
        goto LABEL_111;
      v71 = *(double *)(v13 + 96);
      v72 = (*(double *)v397 - v71) * 1000.0;
      v73 = -0.5;
      if (v72 > 0.0)
        v73 = 0.5;
      v74 = v72 + v73;
      v75 = 2147483650.0;
      if (v74 <= 2147483650.0)
      {
        v75 = -2147483650.0;
        if (v74 >= -2147483650.0)
          v75 = (double)(int)v74;
      }
      v76 = v71 + v75 / 1000.0 - *(double *)v397;
      v77 = *v29 - v76;
      if (v77 <= 0.0005)
      {
        if (v77 >= -0.0005)
        {
LABEL_110:
          *(double *)(v13 + 64) = v76;
          *(double *)(v13 + 184) = v67;
          *(_BYTE *)v52 = 1;
LABEL_111:
          v351 = 0.0;
          if (!R8_EQ(&v355, &v351))
          {
            Geo2ECEF((uint64_t)__src, (uint64_t)&WGS84_Datum, v334->f64);
            v79 = *(double *)&v356 / 3.0;
            *(double *)(v13 + 200) = v68;
            *(double *)(v13 + 208) = v79;
            *((_BYTE *)v52 + 1) = 1;
          }
          goto LABEL_113;
        }
        v78 = -0.001;
      }
      else
      {
        v78 = 0.001;
      }
      v76 = v76 + v78;
      goto LABEL_110;
    }
  }
LABEL_113:
  v80 = *(_DWORD *)(v13 + 284);
  v81 = v80 >= 1 && *(__int16 *)(a1 + 6) >= 1024 && *(_BYTE *)a1 != 0;
  *(_DWORD *)a10 = *(_DWORD *)(v13 + 176);
  v82 = *(double *)(a1 + 16) * 1000.0;
  v83 = -0.5;
  if (v82 <= 0.0)
    v84 = -0.5;
  else
    v84 = 0.5;
  v85 = v82 + v84;
  if (v85 >= -2147483650.0)
    v86 = (int)v85;
  else
    v86 = 0x80000000;
  if (v85 <= 2147483650.0)
    v87 = v86;
  else
    v87 = 0x7FFFFFFF;
  *(_DWORD *)(a10 + 32) = v87;
  *(_DWORD *)(a10 + 36) = v80;
  v88 = (*(double *)(v11 + 192) - *(double *)(v11 + 152)) * 1000.0;
  if (v88 > 0.0)
    v83 = 0.5;
  v89 = v88 + v83;
  if (v89 <= 2147483650.0)
  {
    if (v89 >= -2147483650.0)
      v90 = (int)v89;
    else
      v90 = 0x80000000;
  }
  else
  {
    v90 = 0x7FFFFFFF;
  }
  v91 = a1;
  *(_DWORD *)(a10 + 40) = v90;
  *(_QWORD *)&__b[0] = 0;
  API_Get_UTC_Cor(1, (double *)__b);
  *(_BYTE *)(a10 + 44) = (int)*(double *)__b;
  v92 = *(double *)(v13 + 72);
  if (fabs(v92) >= 0.0000207995328)
    LOWORD(v93) = 0;
  else
    LOWORD(v93) = (int)(v92 * 1575420000.0);
  *(_WORD *)(v13 + 280) = v93;
  v94 = *(double *)(v13 + 216);
  v331 = v11;
  if (v94 >= 20500.0)
  {
    *(_WORD *)(v13 + 282) = -536;
  }
  else
  {
    v95 = *(_DWORD *)(v13 + 176);
    v96 = *(_DWORD *)(v13 + 296);
    if (v95 <= v96 + 60000 && v95 >= v96 + 3000)
      v98 = 1600;
    else
      v98 = 3941;
    v99 = (unsigned __int16)(v98 + (int)(v94 * 3.0));
    if (v99 <= 0xDAC)
      v100 = 3500;
    else
      v100 = v99;
    *(_WORD *)(v13 + 282) = v100;
    if (v100 <= 0xFA0)
    {
      v101 = *(_WORD *)(v13 + 258);
      v102 = v350;
      goto LABEL_177;
    }
  }
  v103 = v81;
  v104 = 0;
  v105 = a8 + 404;
  v106 = 999999;
  v107 = -999999;
  do
  {
    v108 = &v105[v104];
    v109 = *(v108 - 385);
    if (Is_Legal(v109)
      && (int)*(v108 - 301) >= 10
      && (v109 != 4 || *(_DWORD *)v350)
      && !*(_BYTE *)(v350 + (int)GNSS_Id_To_Num_Prn_Idx(v109) + 253))
    {
      v110 = (int)*(double *)&v105[2 * v104];
      if (v106 >= v110)
        v106 = (int)*(double *)&v105[2 * v104];
      if (v107 <= v110)
        v107 = (int)*(double *)&v105[2 * v104];
    }
    ++v104;
  }
  while (v104 != 48);
  v111 = *(__int16 *)(v13 + 280);
  LOWORD(v93) = *(_WORD *)(v13 + 280);
  v100 = *(unsigned __int16 *)(v13 + 282);
  v101 = *(_WORD *)(v13 + 258);
  v91 = a1;
  if (v106 == 999999)
  {
    v102 = v350;
    v81 = v103;
  }
  else
  {
    v102 = v350;
    v81 = v103;
    if (v107 != -999999)
    {
      if (v107 - 8000 <= (signed int)-(v111 + v100))
        v112 = -(v111 + v100);
      else
        v112 = v107 - 8000;
      v113 = v100 - v111;
      v114 = v106 + 8000;
      if (v113 < v106 + 8000)
        v114 = v113;
      if (v114 - v112 + 1 >= 0)
        v115 = v114 - v112 + 1;
      else
        v115 = v114 - v112 + 2;
      v100 = v115 >> 1;
      *(_WORD *)(v13 + 282) = v100;
      v116 = v112 + v114;
      if (v116 < 0)
        v117 = ~v116;
      else
        v117 = -v116;
      v93 = v117 >> 1;
      v118 = v93 - v111;
      *(_WORD *)(v13 + 280) = v93;
      if (v118 < 0)
        v118 = -v118;
      v101 += v118;
      *(_WORD *)(v13 + 258) = v101;
    }
  }
LABEL_177:
  *(_WORD *)(a10 + 24) = (int)((double)(__int16)v93 * 0.634751368);
  *(_WORD *)(a10 + 4) = (int)((double)(unsigned __int16)v100 * 0.190293673);
  *(_DWORD *)(a10 + 48) = *(_DWORD *)v102;
  *(_QWORD *)(a10 + 52) = *(_QWORD *)(v13 + 272);
  *(double *)&v119 = (double)v101 * 0.634751368;
  *(_WORD *)(a10 + 26) = (int)*(double *)&v119;
  LOWORD(v119) = *(_WORD *)(v13 + 260);
  *(_WORD *)(a10 + 14) = (int)((double)v119 * 19.0293673);
  v120 = *(double *)(v13 + 192) * 0.0100069229;
  v121 = -0.5;
  if (v120 <= 0.0)
    v122 = -0.5;
  else
    v122 = 0.5;
  v123 = v120 + v122;
  if (v123 <= 2147483650.0)
  {
    if (v123 < -2147483650.0 || ((int)v123 >= 0xFFFF ? (v124 = -1) : (v124 = (int)v123), (int)v123 <= 0))
      v124 = 1;
  }
  else
  {
    v124 = -1;
  }
  *(_WORD *)(a10 + 6) = v124;
  v125 = 3 * (int)*(double *)(v13 + 200) / 5;
  if (v125 >= 65534)
    LOWORD(v125) = -2;
  *(_WORD *)(a10 + 8) = v125 + 1;
  v126 = 3 * (int)*(double *)(v13 + 208);
  if (v126 >= 65534)
    LOWORD(v126) = -2;
  *(_WORD *)(a10 + 10) = v126 + 1;
  v127 = *(double *)(v13 + 48) * 100.0;
  if (v127 > 0.0)
    v121 = 0.5;
  v128 = v127 + v121;
  if (v128 <= 2147483650.0)
  {
    if (v128 < -2147483650.0)
    {
      v129 = 0x80000000;
      goto LABEL_199;
    }
    v129 = (int)v128;
    if ((int)v128 < 0xFFFF)
    {
LABEL_199:
      if (v129 <= 1)
        LOWORD(v129) = 1;
      goto LABEL_201;
    }
  }
  LOWORD(v129) = -1;
  *(_WORD *)(a10 + 14) = -1;
LABEL_201:
  v130 = a10 + 6132;
  *(_WORD *)(a10 + 12) = v129;
  v131 = *(double *)(v13 + 24) * 100.0;
  v132 = -0.5;
  if (v131 <= 0.0)
    v133 = -0.5;
  else
    v133 = 0.5;
  v134 = v131 + v133;
  if (v134 >= -2147483650.0)
    v135 = (int)v134;
  else
    v135 = 0;
  if (v134 <= 2147483650.0)
    v136 = v135;
  else
    v136 = -1;
  *(_WORD *)(a10 + 18) = v136;
  v137 = *(double *)(v13 + 32) * 100.0;
  if (v137 <= 0.0)
    v138 = -0.5;
  else
    v138 = 0.5;
  v139 = v137 + v138;
  if (v139 >= -2147483650.0)
    v140 = (int)v139;
  else
    v140 = 0;
  if (v139 <= 2147483650.0)
    v141 = v140;
  else
    v141 = -1;
  *(_WORD *)(a10 + 16) = v141;
  v142 = *(double *)(v13 + 40) * 100.0;
  if (v142 > 0.0)
    v132 = 0.5;
  v143 = v142 + v132;
  if (v143 <= 2147483650.0)
  {
    if (v143 >= -2147483650.0)
      v144 = (int)v143;
    else
      LOWORD(v144) = 0;
  }
  else
  {
    LOWORD(v144) = -1;
  }
  *(_WORD *)(a10 + 20) = v144;
  *(_BYTE *)(a10 + 22) = *(double *)(v13 + 56) >> 1;
  v145 = 3 * (int)*(double *)(v13 + 248);
  if (v145 >= 254)
    LOBYTE(v145) = -2;
  *(_BYTE *)(a10 + 23) = v145 + 1;
  PP_Acq_Ass_Update_AA(v91, v13, a8, a9);
  v348 = (unsigned __int8 *)(a10 + 6132);
  if (!v81)
  {
    for (i = 60; i != 3996; i += 48)
    {
      v199 = (_OWORD *)(a10 + i);
      *(_OWORD *)((char *)v199 + 29) = 0uLL;
      *v199 = 0uLL;
      v199[1] = 0uLL;
    }
    *(_OWORD *)(a10 + 5386) = 0u;
    *(_OWORD *)(a10 + 5402) = 0u;
    *(_OWORD *)(a10 + 5354) = 0u;
    *(_OWORD *)(a10 + 5370) = 0u;
    *(_OWORD *)(a10 + 5322) = 0u;
    *(_OWORD *)(a10 + 5338) = 0u;
    *(_OWORD *)(a10 + 5290) = 0u;
    *(_OWORD *)(a10 + 5306) = 0u;
    *(_OWORD *)(a10 + 5258) = 0u;
    *(_OWORD *)(a10 + 5274) = 0u;
    *(_OWORD *)(a10 + 5242) = 0u;
    *(_WORD *)(a10 + 5418) = 0;
    memset((void *)(a10 + 3996), 255, 0x4DEuLL);
    *(_DWORD *)(a10 + 6132) = 0;
    *(_BYTE *)(a10 + 6136) = 0;
    Get_SS_Order((uint64_t)__b);
    v200 = 0;
    while (1)
    {
      Constell_Prn = Get_Constell_Prn(v200);
      switch(Constell_Prn)
      {
        case 1:
          v202 = *(unsigned __int8 *)(v102 + 31);
          goto LABEL_334;
        case 2:
          if (!*(_BYTE *)(v102 + 32))
          {
            v203 = v200;
LABEL_344:
            ++*(_BYTE *)(a10 + 6134);
            v205 = v203;
            goto LABEL_345;
          }
          v204 = 1;
          v203 = v200;
LABEL_336:
          v205 = v203;
          if (!*(_BYTE *)(a6 + v203 + 33605) || *(_BYTE *)(v102 + v203 + 253))
          {
            if (((*(_BYTE *)(v102 + v203 + 480) == 0) & ~v204) != 0)
            {
              v206 = *(unsigned __int8 *)(a10 + 6135);
              *(_WORD *)(a10 + 2 * v206 + 4886) = v203 + 1;
              *(_BYTE *)(a10 + 6135) = v206 + 1;
              v207 = 3;
              goto LABEL_346;
            }
            goto LABEL_344;
          }
          if (Constell_Prn != 4 || *(_DWORD *)v102)
          {
            v207 = 0;
            v208 = *(unsigned __int8 *)(a10 + 6133);
            *(_WORD *)(a10 + 2 * v208 + 4530) = v203 + 1;
            *(_BYTE *)(a10 + 6133) = v208 + 1;
            goto LABEL_346;
          }
          ++*(_BYTE *)(a10 + 6134);
LABEL_345:
          v207 = 2;
LABEL_346:
          *(_DWORD *)(a10 + 4 * v205 + 5420) = v207;
LABEL_347:
          if (++v200 == 178)
          {
            *(_WORD *)(a11 + 176) = -25187;
            *(_QWORD *)&v246 = 0x9D9D9D9D9D9D9D9DLL;
            *((_QWORD *)&v246 + 1) = 0x9D9D9D9D9D9D9D9DLL;
            *(_OWORD *)(a11 + 144) = v246;
            *(_OWORD *)(a11 + 160) = v246;
            *(_OWORD *)(a11 + 112) = v246;
            *(_OWORD *)(a11 + 128) = v246;
            *(_OWORD *)(a11 + 80) = v246;
            *(_OWORD *)(a11 + 96) = v246;
            *(_OWORD *)(a11 + 48) = v246;
            *(_OWORD *)(a11 + 64) = v246;
            *(_OWORD *)(a11 + 16) = v246;
            *(_OWORD *)(a11 + 32) = v246;
            *(_OWORD *)a11 = v246;
            memset_pattern16((void *)(a11 + 178), &unk_21E7FA080, 0x164uLL);
            *(_BYTE *)(a11 + 534) = 0;
            *(_WORD *)(v91 + 2) = -1;
            *(_BYTE *)v91 = 0;
            goto LABEL_442;
          }
          break;
        case 3:
          v202 = *(unsigned __int8 *)(v102 + 36);
          goto LABEL_334;
        case 4:
          v202 = *(unsigned __int8 *)(v102 + 35);
          goto LABEL_334;
        case 5:
          v202 = *(unsigned __int8 *)(v102 + 33);
LABEL_334:
          v203 = *((unsigned __int8 *)__b + v200) - 1;
          if (!v202)
            goto LABEL_344;
          v204 = 0;
          goto LABEL_336;
        case 6:
          goto LABEL_347;
        default:
          v203 = *((unsigned __int8 *)__b + v200) - 1;
          goto LABEL_344;
      }
    }
  }
  v367 = 0;
  v365 = 0u;
  v366 = 0u;
  v363 = 0u;
  v364 = 0u;
  v361 = 0u;
  v362 = 0u;
  v359 = 0u;
  v360 = 0u;
  v357 = 0u;
  v358 = 0u;
  v356 = 0u;
  if (!*(_BYTE *)v130 && !*(_BYTE *)(a10 + 6134) || *(_BYTE *)(a11 + 535) || *(__int16 *)(v91 + 2) == -1)
    goto LABEL_232;
  v247 = (int)v15 - (int)*(double *)(v91 + 16) + 604800 * (__dst - *(__int16 *)(v91 + 6));
  if (v247 < 0)
    v247 = -v247;
  if (v247 > 4)
    goto LABEL_232;
  v248 = 0;
  v249 = 0.0;
  do
  {
    v249 = v249 + (v369[v248] - *(double *)(v91 + 40 + 8 * v248)) * (v369[v248] - *(double *)(v91 + 40 + 8 * v248));
    v250 = v248 + 3;
    --v248;
  }
  while (v250 > 1);
  if (v249 > 1.0e10)
  {
LABEL_232:
    *(_BYTE *)(a11 + 535) = 0;
    *(_QWORD *)&v146 = 0x101010101010101;
    *((_QWORD *)&v146 + 1) = 0x101010101010101;
    v356 = v146;
    v357 = v146;
    v358 = v146;
    v359 = v146;
    v360 = v146;
    v361 = v146;
    v362 = v146;
    v363 = v146;
    v364 = v146;
    v365 = v146;
    v366 = v146;
    v367 = 257;
    *(_WORD *)(v91 + 2) = 178;
  }
  else
  {
    v251 = 0;
    v252 = (_DWORD *)(a7 + 184);
    do
    {
      if ((*(_DWORD *)(a10 + 5420 + 4 * v251) - 1) >= 2
        && *v252
        && *(_BYTE *)(a6 + 33605 + v251)
        && !*(_BYTE *)(v350 + v251 + 253))
      {
        *((_BYTE *)&v356 + v251) = 1;
      }
      ++v251;
      v252 += 48;
    }
    while (v251 != 139);
    v253 = 48;
    do
    {
      v254 = *(_WORD *)(a1 + 2);
      if ((__int16)(v254 + 1) <= 177)
        v255 = v254 + 1;
      else
        v255 = 0;
      *(_WORD *)(a1 + 2) = v255;
      v256 = Get_Constell_Prn(v255);
      if (*(_BYTE *)(v350 + 31))
        v257 = 0;
      else
        v257 = v256 == 1;
      if (v257)
      {
        *(_WORD *)(a1 + 2) = 31;
      }
      else
      {
        if (*(_BYTE *)(v350 + 32))
          v258 = 0;
        else
          v258 = v256 == 2;
        if (v258)
        {
          *(_WORD *)(a1 + 2) = 55;
        }
        else if (*(_BYTE *)(v350 + 36) || v256 != 3)
        {
          if (*(_BYTE *)(v350 + 35) || v256 != 4)
          {
            if (*(_BYTE *)(v350 + 33) || v256 != 5)
            {
              if (*(_BYTE *)(v350 + 34) || v256 != 6)
              {
                if (v256 != 4 || *(_DWORD *)v350)
                  *((_BYTE *)&v356 + *(__int16 *)(a1 + 2)) = 1;
              }
              else
              {
                *(_WORD *)(a1 + 2) = 177;
              }
            }
            else
            {
              *(_WORD *)(a1 + 2) = 138;
            }
          }
          else
          {
            *(_WORD *)(a1 + 2) = 128;
          }
        }
        else
        {
          *(_WORD *)(a1 + 2) = 91;
        }
      }
      --v253;
    }
    while (v253);
  }
  LODWORD(v355) = 0;
  memset(__b, 255, sizeof(__b));
  memset_pattern16(__src, &unk_21E7FA060, 0x2C8uLL);
  v398 = 0;
  memset(v397, 0, sizeof(v397));
  v396 = 0;
  v395 = 0u;
  v394 = 0u;
  v393 = 0u;
  v392 = 0u;
  v391 = 0u;
  v390 = 0u;
  v389 = 0u;
  v388 = 0u;
  v387 = 0u;
  *(_OWORD *)v385 = 0u;
  v386 = 0u;
  Get_SS_Order((uint64_t)v385);
  v102 = v350;
  if (!*(_BYTE *)(v350 + 31))
  {
    *(_QWORD *)&v147 = 0x9D9D9D9D9D9D9D9DLL;
    *((_QWORD *)&v147 + 1) = 0x9D9D9D9D9D9D9D9DLL;
    *(_OWORD *)a11 = v147;
    *(_OWORD *)(a11 + 16) = v147;
    memset_pattern16((void *)(a11 + 178), &unk_21E7FA080, 0x40uLL);
  }
  if (!*(_BYTE *)(v350 + 32))
  {
    memset((void *)(a11 + 32), 157, 24);
    memset_pattern16((void *)(a11 + 242), &unk_21E7FA080, 0x30uLL);
  }
  if (!*(_BYTE *)(v350 + 36))
  {
    *(_DWORD *)(a11 + 88) = -1650614883;
    *(_QWORD *)&v148 = 0x9D9D9D9D9D9D9D9DLL;
    *((_QWORD *)&v148 + 1) = 0x9D9D9D9D9D9D9D9DLL;
    *(_OWORD *)(a11 + 72) = v148;
    *(_OWORD *)(a11 + 56) = v148;
    memset_pattern16((void *)(a11 + 290), &unk_21E7FA080, 0x48uLL);
  }
  v130 = a10 + 6132;
  if (!*(_BYTE *)(v350 + 35))
  {
    *(_QWORD *)(a11 + 121) = 0x9D9D9D9D9D9D9D9DLL;
    *(_QWORD *)&v149 = 0x9D9D9D9D9D9D9D9DLL;
    *((_QWORD *)&v149 + 1) = 0x9D9D9D9D9D9D9D9DLL;
    *(_OWORD *)(a11 + 108) = v149;
    *(_OWORD *)(a11 + 92) = v149;
    memset_pattern16((void *)(a11 + 362), &unk_21E7FA080, 0x4AuLL);
  }
  if (!*(_BYTE *)(v350 + 33))
  {
    *(_QWORD *)(a11 + 129) = 0x9D9D9D9D9D9D9D9DLL;
    *(_WORD *)(a11 + 137) = -25187;
    memset_pattern16((void *)(a11 + 436), &unk_21E7FA080, 0x14uLL);
  }
  v330 = (_DWORD *)(a6 + 24372);
  if (!*(_BYTE *)(v350 + 34))
  {
    *(_QWORD *)(a11 + 170) = 0x9D9D9D9D9D9D9D9DLL;
    *(_QWORD *)&v150 = 0x9D9D9D9D9D9D9D9DLL;
    *((_QWORD *)&v150 + 1) = 0x9D9D9D9D9D9D9D9DLL;
    *(_OWORD *)(a11 + 155) = v150;
    *(_OWORD *)(a11 + 139) = v150;
    memset_pattern16((void *)(a11 + 456), &unk_21E7FA080, 0x4EuLL);
  }
  v151 = 0;
  v339 = 0;
  v152 = 0;
  v336 = 0;
  v153 = *(_OWORD *)(a11 + 144);
  v383[8] = *(_OWORD *)(a11 + 128);
  v383[9] = v153;
  v383[10] = *(_OWORD *)(a11 + 160);
  v384 = *(_WORD *)(a11 + 176);
  v154 = *(_OWORD *)(a11 + 80);
  v383[4] = *(_OWORD *)(a11 + 64);
  v383[5] = v154;
  v155 = *(_OWORD *)(a11 + 112);
  v383[6] = *(_OWORD *)(a11 + 96);
  v383[7] = v155;
  v156 = *(_OWORD *)(a11 + 16);
  v383[0] = *(_OWORD *)a11;
  v383[1] = v156;
  v157 = *(_OWORD *)(a11 + 48);
  v383[2] = *(_OWORD *)(a11 + 32);
  v383[3] = v157;
  while (2)
  {
    v158 = Get_Constell_Prn(v152);
    switch(v158)
    {
      case 1:
        if (*(_BYTE *)(v102 + 31))
          goto LABEL_257;
        goto LABEL_309;
      case 2:
        if (*(_BYTE *)(v102 + 32))
        {
          LongPrnIdx_To_ShortPrnIdx(v151, 0);
          v159 = v151;
          goto LABEL_258;
        }
        goto LABEL_309;
      case 3:
        if (*(_BYTE *)(v102 + 36))
        {
          v159 = v385[v151] - 1;
          LongPrnIdx_To_ShortPrnIdx(v159, 0);
          goto LABEL_258;
        }
        goto LABEL_309;
      case 4:
        if (*(_BYTE *)(v102 + 35))
        {
          v160 = v385[v151];
          v159 = v160 - 1;
          if (*(_DWORD *)v102)
            goto LABEL_258;
          *(_BYTE *)(a11 + v159) = -99;
          *(_WORD *)(a11 + 2 * v159 + 178) = -400;
          v161 = BYTE2(v355);
          *((_WORD *)&__b[44] + BYTE2(v355) + 4) = v160;
          BYTE2(v355) = v161 + 1;
          *((_DWORD *)__src + v159) = 2;
        }
        goto LABEL_309;
      case 5:
        if (!*(_BYTE *)(v102 + 33))
          goto LABEL_309;
LABEL_257:
        v159 = v385[v151] - 1;
LABEL_258:
        v162 = *(unsigned __int8 *)(a6 + v159 + 33605);
        v163 = *(unsigned __int8 *)(v102 + v159 + 253);
        v164 = v159;
        if (*((_BYTE *)&v356 + v159))
        {
          v165 = (_BYTE *)(a11 + v159);
          *v165 = -99;
          v166 = a11 + 2 * v159;
          *(_WORD *)(v166 + 178) = -400;
          v167 = (_WORD *)(v166 + 178);
          if (v162)
          {
            if (!v163)
            {
              if (*(_DWORD *)(a7 + 192 * v164 + 184))
              {
                v371 = 0;
                v372 = 0;
                v168 = (_OWORD *)(a7 + 192 * v164);
                memset(v370, 0, 126);
                v169 = v168[9];
                v379 = v168[8];
                v380 = v169;
                v170 = v168[11];
                v381 = v168[10];
                v382 = v170;
                v171 = v168[5];
                v375 = v168[4];
                v376 = v171;
                v172 = v168[7];
                v377 = v168[6];
                v378 = v172;
                v173 = v168[1];
                *(_OWORD *)v373 = *v168;
                *(_OWORD *)&v373[16] = v173;
                v174 = v168[3];
                *(_OWORD *)&v373[32] = v168[2];
                v374 = v174;
                if (Comp_CurrState(0x258u, *(__int16 *)(a1 + 6), (uint64_t)v373, (uint64_t)v370, *(double *)(a1 + 16), 22000000.0))
                {
                  Comp_AzEl((uint64_t)v334, v13 + 104, (uint64_t)v370, v165, v167, (_QWORD *)(a11 + 8 * v164 + 536), (_QWORD *)(a11 + 8 * v164 + 1960));
                  goto LABEL_266;
                }
              }
            }
          }
LABEL_265:
          if (!v162)
            goto LABEL_284;
          goto LABEL_266;
        }
        if (*(_DWORD *)(a7 + 192 * v159 + 184))
          goto LABEL_265;
        *(_BYTE *)(a11 + v159) = -99;
        if (!v162)
        {
LABEL_284:
          v183 = v164 + 1;
          v102 = v350;
          v130 = a10 + 6132;
          if (v158 == 2 || *(_BYTE *)(v350 + v164 + 480))
          {
            v186 = BYTE2(v355);
            *((_WORD *)&__b[44] + BYTE2(v355) + 4) = v183;
            BYTE2(v355) = v186 + 1;
            v185 = 2;
          }
          else
          {
            v184 = BYTE3(v355);
            *((_WORD *)&__b[66] + BYTE3(v355) + 6) = v183;
            BYTE3(v355) = v184 + 1;
            v185 = 3;
          }
          *((_DWORD *)__src + v164) = v185;
          goto LABEL_309;
        }
LABEL_266:
        if (v163)
          goto LABEL_284;
        v175 = *(char *)(a11 + v164);
        v130 = a10 + 6132;
        if (v175 < -90)
        {
          *((_WORD *)__b + v336++) = v164 + 1;
          *((_DWORD *)__src + v164) = 0;
          v102 = v350;
        }
        else
        {
          v176 = *(unsigned __int8 *)(a11 + v164);
          v177 = (char)v175;
          v178 = v339;
          if (v177 > 1)
            v178 = v339 + 1;
          v339 = v178;
          if (v177 > 1)
            v179 = 1;
          else
            v179 = 2;
          v102 = v350;
          if (v177 >= 2)
          {
            v180 = *(_DWORD *)(a7 + 192 * v164 + 184);
            if (v158 == 2)
              v181 = 15;
            else
              v181 = 10;
            if (v180 == 2)
            {
              if (*(_BYTE *)(a10 + v164 + 5242))
                v187 = v181 > v176;
              else
                v187 = 0;
              if (v187)
                v182 = *(_BYTE *)(a11 + v164);
              else
                v182 = v176 + 9;
            }
            else if (v180 == 1)
            {
              if (v181 > v176 && *(_BYTE *)(a10 + v164 + 5242))
                v182 = v176 + 9;
              else
                v182 = v176 + 100;
            }
            else
            {
              v182 = 0;
            }
            *((_BYTE *)v397 + v164) = v182;
            v188 = BYTE1(v355);
            if (BYTE1(v355))
            {
              v189 = 0;
              while (*((unsigned __int8 *)v397 + *((__int16 *)&__b[22] + v189 + 2) - 1) >= v182)
              {
                if (BYTE1(v355) == ++v189)
                  goto LABEL_307;
              }
            }
            else
            {
              LODWORD(v189) = 0;
            }
            if (v189 < BYTE1(v355))
            {
              v190 = (_WORD *)&__b[22] + BYTE1(v355) + 2;
              v191 = (__int16 *)&__b[22] + BYTE1(v355) + 1;
              do
              {
                v192 = *v191--;
                *v190-- = v192;
                --v188;
              }
              while (v189 < v188);
              v188 = v189;
            }
LABEL_307:
            *((_WORD *)&__b[22] + v188 + 2) = v164 + 1;
          }
          ++*((_BYTE *)&v355 + v179);
          *((_DWORD *)__src + v164) = v179;
        }
LABEL_309:
        ++v151;
        ++v152;
        if (v151 != 178)
          continue;
        v193 = 0;
        while (2)
        {
          v194 = *((char *)v383 + v193);
          if (v194 < -90 || ((v195 = *(char *)(a11 + v193), v195 >= -90) ? (v196 = v194 < v195) : (v196 = 1), v196))
          {
            v197 = 0;
            goto LABEL_318;
          }
          if (v194 > v195)
          {
            v197 = 1;
LABEL_318:
            *(_BYTE *)(a10 + 5242 + v193) = v197;
          }
          if (++v193 != 178)
            continue;
          break;
        }
        memcpy((void *)(a10 + 5420), __src, 0x2C8uLL);
        memcpy((void *)(a10 + 4886), (char *)&__b[66] + 12, 0x164uLL);
        memcpy((void *)(a10 + 4530), __b, 0x164uLL);
        memcpy((void *)(a10 + 4174), (char *)&__b[22] + 4, 0x164uLL);
        v214 = BYTE1(v355);
        *(_BYTE *)v130 = BYTE1(v355);
        *(_WORD *)(v130 + 2) = WORD1(v355);
        v215 = (_BYTE *)(v130 + 2);
        *(_BYTE *)(v130 + 1) = v336;
        *(_BYTE *)(a11 + 534) = v339;
        if (!v214 && !*(_BYTE *)(v130 + 4))
        {
          *(_WORD *)(a10 + 4172) = -1;
          *(_QWORD *)&v328 = -1;
          *((_QWORD *)&v328 + 1) = -1;
          *(_OWORD *)(a10 + 4140) = v328;
          *(_OWORD *)(a10 + 4156) = v328;
          *(_OWORD *)(a10 + 4108) = v328;
          *(_OWORD *)(a10 + 4124) = v328;
          *(_OWORD *)(a10 + 4076) = v328;
          *(_OWORD *)(a10 + 4092) = v328;
          *(_OWORD *)(a10 + 4044) = v328;
          *(_OWORD *)(a10 + 4060) = v328;
          *(_OWORD *)(a10 + 4012) = v328;
          *(_OWORD *)(a10 + 4028) = v328;
          *(_OWORD *)(a10 + 3996) = v328;
          goto LABEL_441;
        }
        v337 = (_BYTE *)(v130 + 3);
        LOBYTE(__src[0]) = 0;
        __src[3] = 0.0;
        LODWORD(__src[4]) = 0;
        *(double *)((char *)&__src[1] + 4) = 0.0;
        *(double *)((char *)__src + 4) = 0.0;
        memset(&__src[5], 0, 20);
        DWORD2(__b[11]) = 0;
        memset(__b, 0, 176);
        *(_QWORD *)&v216 = -1;
        *((_QWORD *)&v216 + 1) = -1;
        *(_OWORD *)(a10 + 3996) = v216;
        *(_OWORD *)(a10 + 4012) = v216;
        *(_OWORD *)(a10 + 4028) = v216;
        *(_OWORD *)(a10 + 4044) = v216;
        *(_OWORD *)(a10 + 4060) = v216;
        *(_OWORD *)(a10 + 4076) = v216;
        *(_OWORD *)(a10 + 4092) = v216;
        *(_OWORD *)(a10 + 4108) = v216;
        *(_OWORD *)(a10 + 4124) = v216;
        *(_OWORD *)(a10 + 4140) = v216;
        *(_OWORD *)(a10 + 4156) = v216;
        *(_WORD *)(a10 + 4172) = -1;
        v217 = 60;
        *(_QWORD *)((char *)&__b[10] + 13) = 0;
        do
        {
          v218 = (_OWORD *)(a10 + v217);
          *(_OWORD *)((char *)v218 + 29) = 0uLL;
          *v218 = 0uLL;
          v218[1] = 0uLL;
          v217 += 48;
        }
        while (v217 != 3996);
        *(_BYTE *)(v130 + 4) = 0;
        v219 = 0.0;
        __dsta = (void *)(a10 + 5420);
        if ((*v330 - 2) <= 4 && *(_BYTE *)(v13 + 293))
        {
          if (*(unsigned __int16 *)(a6 + 24412) - *(__int16 *)(a1 + 6) >= 0)
            v220 = -((*(unsigned __int16 *)(a6 + 24412) - *(__int16 *)(a1 + 6)) & 0x3F);
          else
            v220 = (*(_WORD *)(a1 + 6) - *(_WORD *)(a6 + 24412)) & 0x3F;
          if (v220 > 31)
            v220 -= 64;
          v219 = *(double *)(a6 + 24392)
               + *(double *)(a6 + 24400) * (double)((int)*(double *)(a1 + 16) - *(_DWORD *)(a6 + 24408) + 604800 * v220);
        }
        v340 = (_BYTE *)(v130 + 1);
        v221 = 0;
        v222 = a6 + 37344;
        v223 = (_OWORD *)a7;
        while (2)
        {
          LODWORD(v397[0]) = 0;
          v224 = Get_Constell_Prn(v221);
          LODWORD(v397[0]) = v224;
          if (v224 == 6 || (v225 = v224, v224 == 4) && !*(_DWORD *)(a10 + 48))
          {
LABEL_392:
            ++v221;
            v223 += 12;
            if (v221 == 139)
              goto LABEL_440;
            continue;
          }
          break;
        }
        if (*(unsigned __int8 *)(a10 + 6136) <= 0x51u)
        {
          v226 = *(char *)(a11 + v221);
          if (v226 >= 2)
          {
            v227 = v223[9];
            __b[8] = v223[8];
            __b[9] = v227;
            v228 = v223[11];
            __b[10] = v223[10];
            __b[11] = v228;
            v229 = v223[5];
            __b[4] = v223[4];
            __b[5] = v229;
            v230 = v223[7];
            __b[6] = v223[6];
            __b[7] = v230;
            v231 = v223[1];
            __b[0] = *v223;
            __b[1] = v231;
            v232 = v223[3];
            __b[2] = v223[2];
            __b[3] = v232;
            if (DWORD2(__b[11]))
            {
              v233 = *(unsigned int *)(v13 + 284);
              v234 = *(double *)(v13 + 192);
              if (v225 == 4)
              {
                v235 = *v329;
              }
              else
              {
                v235 = *(double *)(v13 + 64);
                if (v225 == 3)
                {
                  if ((*v330 - 2) <= 4)
                  {
                    v237 = -0.0;
                    if (*(_BYTE *)(v13 + 293))
                      v237 = v219;
                    v235 = v235 + v237;
                  }
                }
                else if (v225 == 2)
                {
                  v235 = *(double *)(v13 + 80);
                  v236 = *(unsigned int *)(v13 + 288);
                  if ((int)v236 < (int)v233)
                  {
                    v234 = sqrt((g_TOW_Stat_Var99_Table[v233] * -299792458.0 + g_TOW_Stat_Var99_Table[v236] * 299792458.0)* 299792458.0+ v234 * v234);
                    LODWORD(v233) = *(_DWORD *)(v13 + 288);
                  }
                }
              }
              v238 = Comp_PrePos(v233, *(__int16 *)(a1 + 6), (uint64_t)__b, v334, v13, v226, *(unsigned __int8 *)(v13 + 268), (uint64_t)__src, v235, *(double *)(v13 + 72), *(double *)(v13 + 184), v234, *(double *)(v13 + 200), *(double *)(v13 + 208), *(double *)(v13 + 224), *(double *)(v13 + 232), *(double *)(v13 + 240), *(double *)(a1 + 16));
              LOBYTE(__src[0]) = v238;
              if (v238)
              {
                *(_DWORD *)v373 = 0;
                v373[4] = 0;
                memset(&v373[8], 0, 37);
                v239 = LongPrnIdx_To_Prn(v221, (int *)v397);
                v373[10] = v239;
                v373[8] = v397[0];
                if (LODWORD(v397[0]) == 2)
                {
                  v373[11] = *(_DWORD *)(*(_QWORD *)(a10 + 6216) + 4 * v239 - 4);
                  v373[10] = v373[11];
                }
                v373[42] = -1;
                v373[44] = -1;
                v373[43] = *(_BYTE *)(a11 + v221);
                v240 = *(unsigned __int16 *)(a11 + 2 * v221 + 178);
                if (v240 <= 0x168)
                  v373[44] = v240 >> 1;
                v241 = Comp_AcqAid(*(_DWORD *)(v13 + 176), *(_WORD *)(v13 + 280), *(unsigned __int16 *)(v13 + 282), (unsigned __int8 *)__src, (uint64_t)v373, *(double *)(v13 + 96));
                v373[4] = v241;
                if (*(_BYTE *)(v222 + v221))
                  v242 = 1;
                else
                  v242 = *(_BYTE *)(v222 + v221 + 178) != 0;
                v373[12] = v242;
                v373[13] = *(_BYTE *)(v222 + v221 + 356);
                if (*(int *)(v13 + 264) <= 1 && v373[14] >= 2u)
                  v373[14] = 1;
                if (v241)
                {
                  v243 = *(_BYTE *)(a10 + 6136);
                  v244 = a10 + 48 * v243;
                  v245 = *(_OWORD *)&v373[16];
                  *(_OWORD *)(v244 + 60) = *(_OWORD *)v373;
                  *(_OWORD *)(v244 + 76) = v245;
                  *(_OWORD *)(v244 + 92) = *(_OWORD *)&v373[32];
                  *(_BYTE *)(a10 + 3996 + v221) = v243;
                  ++*(_BYTE *)(a10 + 6136);
                }
              }
            }
          }
          goto LABEL_392;
        }
        gn_report_assertion_failure("PP_Update_AcqAid: num_AA overflow caught");
LABEL_440:
        v130 = a10 + 6132;
        PP_BDS_D2_Set_Not_Visible(v348, v215, a10 + 4174, (uint64_t)__dsta);
        PP_BDS_D2_Set_Not_Visible(v340, v215, a10 + 4530, (uint64_t)__dsta);
        PP_BDS_D2_Set_Not_Visible(v337, v215, a10 + 4886, (uint64_t)__dsta);
LABEL_441:
        v91 = a1;
LABEL_442:
        if (*(_BYTE *)(v13 + 292))
        {
          v259 = *(unsigned __int8 *)(v91 + 4);
          if (v259 <= 0xC7)
            *(_BYTE *)(v91 + 4) = v259 + 1;
          if (*a5)
          {
            *(_BYTE *)(v13 + 292) = 0;
            goto LABEL_447;
          }
          v262 = 0;
          v261 = a5 + 4;
          v260 = *((_DWORD *)a5 + 1);
LABEL_450:
          if (*(_BYTE *)v130 || *(_BYTE *)(v130 + 4))
          {
            if (!v332)
              v262 = 1;
            if (v260 == 2 || (v262 & 1) == 0)
            {
              a5[412] = 1;
              *(_QWORD *)&v263 = 0x101010101010101;
              *((_QWORD *)&v263 + 1) = 0x101010101010101;
              *(_OWORD *)(a5 + 380) = v263;
              *(_OWORD *)(a5 + 396) = v263;
              *(_OWORD *)(a5 + 364) = v263;
              v264 = (const float *)(v13 + 176);
              v265 = vld1q_dup_f32(v264);
              for (j = 592; j != 400; j -= 16)
                *(float32x4_t *)&a5[j] = v265;
              EvCrt_v("ChanReset ALL : PrePos2 BN %d PD %d NP %d ND %d ", v260, *(unsigned __int8 *)(v13 + 292), *(unsigned __int8 *)(v91 + 4), *a5);
              v260 = *((_DWORD *)a5 + 1);
            }
            if (v260 && *(_BYTE *)(v13 + 292) && !v332)
            {
              for (k = 0; k != 48; ++k)
              {
                v268 = &a8[k];
                v270 = v268[19];
                v269 = (unsigned __int8 *)(v268 + 19);
                if (Is_Legal(v270) && *((unsigned __int8 *)a8 + k + 604) <= 0x18u)
                {
                  a5[k + 365] |= 1u;
                  v271 = (const float *)(v13 + 176);
                  v272 = vld1q_dup_f32(v271);
                  for (m = 592; m != 400; m -= 16)
                    *(float32x4_t *)&a5[m] = v272;
                  EvCrt_v("ChanReset %d : PrePos3 %d %d %d   NP %d ND %d ", k, v269[2], *v269, *((unsigned __int8 *)a8 + k + 604), *(unsigned __int8 *)(v91 + 4), *a5);
                }
              }
            }
LABEL_496:
            if (*(_DWORD *)v261)
            {
              *((_QWORD *)v261 + 44) = 0;
              *((_OWORD *)v261 + 20) = 0u;
              *((_OWORD *)v261 + 21) = 0u;
              *((_OWORD *)v261 + 18) = 0u;
              *((_OWORD *)v261 + 19) = 0u;
              *((_OWORD *)v261 + 16) = 0u;
              *((_OWORD *)v261 + 17) = 0u;
              *((_OWORD *)v261 + 14) = 0u;
              *((_OWORD *)v261 + 15) = 0u;
              *((_OWORD *)v261 + 12) = 0u;
              *((_OWORD *)v261 + 13) = 0u;
              *((_OWORD *)v261 + 10) = 0u;
              *((_OWORD *)v261 + 11) = 0u;
              *((_OWORD *)v261 + 8) = 0u;
              *((_OWORD *)v261 + 9) = 0u;
              *((_OWORD *)v261 + 6) = 0u;
              *((_OWORD *)v261 + 7) = 0u;
              *((_OWORD *)v261 + 4) = 0u;
              *((_OWORD *)v261 + 5) = 0u;
              *((_OWORD *)v261 + 2) = 0u;
              *((_OWORD *)v261 + 3) = 0u;
              *(_OWORD *)v261 = 0u;
              *((_OWORD *)v261 + 1) = 0u;
            }
            if (*(_BYTE *)(v13 + 292))
              *a5 = 1;
            goto LABEL_500;
          }
          memcpy(__b, (const void *)(a10 + 4530), 0x164uLL);
          v274 = a5;
          v275 = 0;
          v276 = 0;
          v277 = 0;
          v341 = *(_DWORD *)(v13 + 176);
          v338 = -*(unsigned __int16 *)(v13 + 280);
          v335 = *(_WORD *)(v13 + 282);
          v333 = v13;
          while (2)
          {
            v278 = &v274[v275 + 8];
            if (*v278)
            {
              v279 = a10 + 4 * v275;
              if (*(_DWORD *)(v279 + 5420) || v277 > 0x2F)
              {
                v102 = v350;
                goto LABEL_493;
              }
              LODWORD(__src[0]) = 0;
              v280 = LongPrnIdx_To_Prn(v275, (int *)__src);
              v281 = LOBYTE(__src[0]);
              if (LODWORD(__src[0]) == 2)
                v280 = *(_DWORD *)(*(_QWORD *)(a10 + 6216) + 4 * (v280 - 1));
              v282 = 0;
              v283 = (_DWORD *)(v279 + 5420);
              v102 = v350;
              do
              {
                if ((__int16)(v275 + 1) == *((__int16 *)__b + v282))
                {
                  if (v282 <= 0xB0)
                  {
                    v284 = v282;
                    do
                    {
                      v285 = (_WORD *)__b + v284++;
                      *v285 = v285[1];
                    }
                    while (v284 != 177);
                  }
                  WORD1(__b[22]) = -1;
                }
                ++v282;
              }
              while (v282 != 178);
              v347 = v283;
              switch(v281)
              {
                case 2u:
                  v286 = 146;
                  break;
                case 3u:
                  v286 = 174;
                  break;
                case 4u:
                  if (v280 <= 0xAu)
                    v286 = 258;
                  else
                    v286 = 162;
                  break;
                case 5u:
                case 6u:
                  v286 = 258;
                  break;
                default:
                  v286 = 154;
                  break;
              }
              v287 = a10 + 48 * v277;
              *(_DWORD *)(v287 + 60) = v341;
              *(_BYTE *)(v287 + 64) = 1;
              *(_DWORD *)(v287 + 68) = v281 | (v280 << 16);
              *(_DWORD *)(v287 + 72) = 0;
              *(_WORD *)(v287 + 76) = v286;
              *(_WORD *)(v287 + 78) = v335;
              *(_WORD *)(v287 + 80) = 0;
              *(_WORD *)(v287 + 82) = v338;
              *(_DWORD *)(v287 + 84) = 33562616;
              *(_QWORD *)(v287 + 88) = 0;
              *(_QWORD *)(v287 + 94) = 0;
              *(_WORD *)(v287 + 102) = -25089;
              *(_BYTE *)(v287 + 104) = 0;
              memcpy((void *)(a10 + 4530), __b, 0x164uLL);
              *(_BYTE *)(a10 + v275 + 3996) = v277;
              *(_WORD *)(a10 + 2 * v277 + 4174) = v276 + 1;
              *v347 = 1;
              *(_BYTE *)(a10 + 6136) = ++v277;
              *v348 = v277;
              --*(_BYTE *)(a10 + 6133);
              v274 = a5;
              v13 = v333;
              if (*v278)
              {
LABEL_493:
                v288 = &v274[v274[v275 + 186]];
                v288[365] |= 1u;
                *(_DWORD *)&v274[4 * v274[v275 + 186] + 416] = *(_DWORD *)(v13 + 176);
                EvCrt_v("ChanReset %d : PrePos1 BN %d PD %d NP %d ND %d", v274[v275 + 186], *((_DWORD *)v274 + 1), *(unsigned __int8 *)(v13 + 292), *(unsigned __int8 *)(a1 + 4), *v274);
                v274 = a5;
              }
            }
            ++v275;
            ++v276;
            if (v275 == 178)
            {
              v91 = a1;
              v130 = a10 + 6132;
              goto LABEL_496;
            }
            continue;
          }
        }
LABEL_447:
        v261 = a5 + 4;
        v260 = *((_DWORD *)a5 + 1);
        if (v260)
        {
          v262 = 1;
          goto LABEL_450;
        }
LABEL_500:
        *(_QWORD *)(a10 + 6360) = 0;
        if ((*(_DWORD *)(v13 + 300) & 0x80000000) == 0)
        {
          if (*(_BYTE *)v130)
            PP_Acq_Ass_Merge_AA(v13, a10, a11, v209, v210, v211, v212, v213);
          else
            PP_Acq_Ass_Replace_AA(v13, (_BYTE *)v102, a10, a11);
        }
        if (*(_BYTE *)(v102 + 32))
        {
          v289 = 0;
          *(_BYTE *)(a10 + 6212) = 0;
          *(_OWORD *)(a10 + 6196) = 0u;
          do
          {
            if (!*(_BYTE *)(*(_QWORD *)(v102 + 440) + v289))
            {
              v290 = 0;
              *(_BYTE *)(v130 + 79) = 14;
              goto LABEL_511;
            }
            ++v289;
          }
          while (v289 != 24);
          v290 = 2;
LABEL_511:
          for (n = 0; n != 56; n += 4)
            *(_DWORD *)(a10 + 6140 + n) = v290;
          v292 = 0;
          while (2)
          {
            LODWORD(__b[0]) = 0;
            v293 = *(__int16 *)(a10 + 2 * v292 + 4174);
            v294 = (v293 - 1);
            if (v293 >= 1)
            {
              v295 = LongPrnIdx_To_ShortPrnIdx((v293 - 1), __b);
              if (LODWORD(__b[0]) == 2)
              {
                v297 = v295;
                v298 = *(_DWORD *)(*(_QWORD *)(a10 + 6216) + 4 * v295);
                if (v298 != 2139062143)
                {
                  v299 = v298 + 7;
                  v300 = a10 + 4 * v294;
                  v301 = *(_DWORD *)(v300 + 5420);
                  if (v301 == 3)
                  {
                    v306 = a10 + 4 * v299;
                    if (!*(_DWORD *)(v306 + 6140))
                      --*(_BYTE *)(a10 + 6211);
                    ++*(_BYTE *)(a10 + 6212);
                    *(_DWORD *)(v306 + 6140) = 3;
                    *(_DWORD *)(*(_QWORD *)(a10 + 6224) + 4 * v299) = v295 + 1;
                    v305 = a6 + 4 * v299;
LABEL_527:
                    *(_DWORD *)(v305 + 16488) = 3;
                  }
                  else if (v301 == 1)
                  {
                    v302 = a10 + 4 * v299;
                    v303 = *(_DWORD *)(v302 + 6140);
                    if (v303 != 1)
                    {
                      v304 = *(char *)(a10 + 6210);
                      if (v304 <= 13)
                      {
                        if (!v303)
                          --*(_BYTE *)(a10 + 6211);
                        *(_BYTE *)(a10 + v304 + 6196) = v298;
                        ++*(_BYTE *)(a10 + 6210);
                        *(_DWORD *)(v302 + 6140) = 1;
                        *(_DWORD *)(*(_QWORD *)(a10 + 6224) + 4 * v299) = v295 + 1;
                        v305 = a6 + 4 * v299;
                        goto LABEL_527;
                      }
                    }
                    *(_DWORD *)(v300 + 5420) = 2;
                    v307 = *v348;
                    if ((_DWORD)v307 == *(unsigned __int8 *)(a10 + 6136))
                    {
                      EvLog_v("PP_Update_Glonass: num_viz & num_AA miss-match,  %d  %d   FrqId %d   Slot %d", *v348, v307, v299, v295 + 1);
                      v307 = *v348;
                    }
                    v308 = 0;
                    if ((_DWORD)v307)
                    {
                      v309 = v307;
                      v310 = (unsigned __int16 *)(a10 + 4174);
                      do
                      {
                        v312 = *v310++;
                        v311 = v312;
                        if (v312 != (unsigned __int16)v293)
                        {
                          *(_WORD *)(a10 + 2 * v308 + 4174) = v311;
                          v308 = (v308 + 1);
                        }
                        --v309;
                      }
                      while (v309);
                    }
                    if ((_DWORD)v308 != (v307 - 1))
                      EvLog_nd("PP_Update_Glonass: num_vis not decremented", 2, v296, v308, v307);
                    *(_WORD *)(a10 + 2 * v308 + 4174) = -1;
                    *v348 = v308;
                    v313 = *(unsigned __int8 *)(a10 + 6136) - 1;
                    if (v313 == v308)
                    {
                      v314 = *(char *)(a10 + v294 + 3996);
                      *(_BYTE *)(a10 + 6136) = v313;
                      if ((v314 & 0x80000000) == 0)
                      {
                        v315 = a10 + 48 * v314;
                        *(_OWORD *)(v315 + 89) = 0u;
                        *(_OWORD *)(v315 + 76) = 0u;
                        *(_OWORD *)(v315 + 60) = 0u;
                        *(_BYTE *)(a10 + v294 + 3996) = -1;
                      }
                      EvCrt_v("PP_Update_Glonass:  Error:  Two Glonass SVs visible on same freq,  FrqId %d  Slot %d", v299, v297 + 1);
                    }
                  }
                }
              }
            }
            if (++v292 != 178)
              continue;
            break;
          }
          v316 = 0;
          v317 = a10 + 5548;
          v102 = v350;
          v91 = a1;
          while (2)
          {
            v318 = a10 + 4 * v316;
            if (!*(_DWORD *)(v318 + 6140))
            {
              v319 = 0;
              v320 = 0;
              v321 = (_DWORD *)(v318 + 6140);
              v322 = *(_QWORD *)(a10 + 6216);
              v323 = 1;
              do
              {
                v324 = *(_DWORD *)(v322 + 4 * v319);
                if (v324 == (_DWORD)v316 - 7)
                  *((_DWORD *)__b + v320++) = v319;
                else
                  v323 &= v324 != 2139062143;
                if (v319 > 0x16)
                  break;
                ++v319;
              }
              while ((int)v320 < 2);
              if (v320 == 2 && *(int *)(v317 + 4 * SLODWORD(__b[0])) >= 2)
              {
                v325 = *(_DWORD *)(v317 + 4 * SDWORD1(__b[0])) > 1;
                if ((v323 & 1) == 0)
                {
LABEL_558:
                  v326 = 0;
                  goto LABEL_560;
                }
              }
              else
              {
                v325 = 0;
                if ((v323 & 1) == 0)
                  goto LABEL_558;
              }
              if (v320 == 1)
              {
                v326 = *(_DWORD *)(v317 + 4 * SLODWORD(__b[0])) > 1;
LABEL_560:
                if (v325 || v326)
                {
                  *v321 = 2;
                  --*(_BYTE *)(a10 + 6211);
                  if (v320 == 2 && (v323 & 1) != 0)
                  {
                    v327 = __b[0];
                    if (*(char *)(SLODWORD(__b[0]) + a11 + 32) < *(char *)(SDWORD1(__b[0]) + a11 + 32))
                      v327 = DWORD1(__b[0]);
                    *(_DWORD *)(*(_QWORD *)(a10 + 6224) + 4 * v316) = v327 + 1;
                    *(_DWORD *)(a6 + 4 * v316 + 16488) = 3;
                  }
                }
              }
              else
              {
                if (v320)
                  goto LABEL_558;
                *v321 = 2;
                --*(_BYTE *)(a10 + 6211);
              }
            }
            if (++v316 == 14)
              goto LABEL_566;
            continue;
          }
        }
        *(_WORD *)(v130 + 78) = 0;
        memset_pattern16((void *)(a10 + 6140), &unk_21E7FA070, 0x38uLL);
LABEL_566:
        SB_SBAS_PrePos(v91, v13, v102, v331, a7, a10, a11, (uint64_t)a9, a6);
        return;
      default:
        goto LABEL_309;
    }
  }
}

_BYTE *PP_BDS_D2_Set_Not_Visible(_BYTE *result, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v7;
  unint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    if (a2)
    {
      if (a3)
      {
        if (a4)
        {
          v7 = result;
          if (*result)
          {
            v8 = 0;
            v9 = 0;
            do
            {
              v18 = 0;
              v10 = *(unsigned __int16 *)(a3 + 2 * v8);
              if ((__int16)v10 >= 1)
              {
                v11 = v10 - 1;
                result = (_BYTE *)LongPrnIdx_To_Prn(v10 - 1, &v18);
                v12 = v18 != 4 || (_DWORD)result == 0;
                if (!v12 && (int)result <= 5)
                {
                  *(_WORD *)(a3 + 2 * v8) = -1;
                  *(_DWORD *)(a4 + 4 * v11) = 2;
                  ++v9;
                }
              }
              ++v8;
              v14 = *v7;
            }
            while (v8 < v14);
            if (v9)
            {
              if (*v7)
              {
                v15 = 0;
                LODWORD(v16) = 0;
                do
                {
                  v17 = *(__int16 *)(a3 + 2 * v15);
                  if (v17 >= 1)
                  {
                    *(_WORD *)(a3 + 2 * v16) = v17;
                    LODWORD(v16) = v16 + 1;
                    LOBYTE(v14) = *v7;
                  }
                  ++v15;
                }
                while (v15 < v14);
              }
              else
              {
                LODWORD(v16) = 0;
              }
              if (v16 < v14)
              {
                v16 = v16;
                do
                {
                  if (*(__int16 *)(a3 + 2 * v16) >= 1)
                  {
                    *(_WORD *)(a3 + 2 * v16) = -1;
                    LOBYTE(v14) = *v7;
                  }
                  ++v16;
                }
                while (v16 < v14);
              }
              *v7 = v14 - v9;
              *a2 += v9;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t NK_VVel_Aiding_Required(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  int v9;
  _BOOL4 v10;
  unsigned __int8 v11;
  double v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  BOOL v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23[2];
  double v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v6 = a2 + 23192;
  if ((!*(_DWORD *)(a1 + 11048) || *(int *)(a2 + 12) < 8 || *(_BYTE *)(a1 + 233)) && *(_BYTE *)v6
    || (v7 = *(_DWORD *)(a1 + 20), (v7 - 5) < 4)
    || v7 == 4 && *(double *)(a2 + 936) > 50.0)
  {
    result = 0;
    *(_BYTE *)a3 = 0;
    return result;
  }
  v23[0] = 0.0;
  v23[1] = 0.0;
  v24 = 0.0;
  Comp_NEDvar_UDU(a1 + 872, 0xBu, 8, (double (*)[3])(a2 + 832), v23);
  v9 = *(_DWORD *)(a1 + 11048);
  v10 = v9 && !*(_BYTE *)(a1 + 233) && (*(_DWORD *)(a1 + 20) & 0xFFFFFFFE) == 2 && *(double *)(a2 + 944) < 2.0;
  if (*(int *)(a2 + 12) > 8)
    v11 = 4;
  else
    v11 = 5;
  if (*(_DWORD *)(v6 + 1640) == 1 && *(double *)(a2 + 23224) < 4.0)
  {
    v11 = 0;
  }
  else if (v10 && *(unsigned __int8 *)(v6 + 1588) < 4u)
  {
    v11 = 48;
  }
  else if (*(_DWORD *)(v6 + 1624) == 1 && *(double *)(a2 + 22952) < 1.0e-16)
  {
    --v11;
  }
  v12 = v24;
  if ((*(unsigned __int8 *)(v6 + 1589) < v11
     || *(double *)(a2 + 8424) + *(double *)(a2 + 14000) < 1.5
     || ((v13 = *(int *)(a1 + 20), v13 > 8) ? (v14 = 1000000.0) : (v14 = dbl_21E7FA180[v13]), v24 > v14))
    && (*(_BYTE *)(v6 + 1589)
     || *(_DWORD *)(v6 + 1644)
     || *(_DWORD *)(v6 + 1652)
     || *(_DWORD *)(v6 + 1668)
     || *(_DWORD *)(v6 + 1672)))
  {
    *(_BYTE *)a3 = 1;
  }
  else if (!*(_BYTE *)a3)
  {
    return 0;
  }
  if (v9 && !*(_BYTE *)(a1 + 233))
  {
    v17 = *(double *)(a2 + 928);
    *(double *)(a3 + 24) = -v17;
    if (v10
      && ((v18 = *(double *)(a2 + 944), v18 < 1.0) ? (v19 = *(unsigned __int8 *)(v6 + 1588) >= 3u) : (v19 = 1),
          !v19 || v18 < 0.2)
      || v17 * v17 > v12 * 9.0)
    {
      *(_QWORD *)(a3 + 24) = 0;
    }
    v20 = *(int *)(a1 + 20);
    if (v20 > 8)
      v21 = 9000000.0;
    else
      v21 = dbl_21E7FA0F0[v20];
    if (v12 <= v21)
    {
      if (v20 > 8)
        v21 = 250000.0;
      else
        v21 = dbl_21E7FA138[v20];
      if (v12 >= v21)
        goto LABEL_64;
    }
    else
    {
      *(_QWORD *)(a3 + 24) = 0;
    }
    v12 = v21;
LABEL_64:
    if (v20 > 8)
      v22 = 1000000.0;
    else
      v22 = dbl_21E7FA180[v20];
    v16 = v12 + v22;
    goto LABEL_68;
  }
  *(_QWORD *)(a3 + 24) = 0;
  v15 = *(int *)(a1 + 20);
  if (v15 >= 9)
    v16 = 1000000.0;
  else
    v16 = dbl_21E7FA180[v15];
LABEL_68:
  *(double *)(a3 + 32) = v16;
  *(_DWORD *)(a3 + 4) = 2;
  *(_DWORD *)(a3 + 20) = *(_DWORD *)a2;
  *(_BYTE *)(a3 + 16) = 0;
  *(_OWORD *)(a3 + 48) = xmmword_21E7FA0E0;
  *(_QWORD *)(a3 + 64) = 0;
  return 1;
}

uint64_t Extract_GAL_INAV_ALM(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v6;
  unsigned int v7;
  unsigned __int16 v8;
  unsigned __int16 v9;
  unint64_t v10;
  int v11;
  unsigned __int16 v12;
  unint64_t v13;

  v3 = *a1;
  v4 = *a2;
  if ((((unsigned __int16)v4 ^ (unsigned __int16)v3) & 0x3C0) != 0)
    return 0;
  v6 = v3 >> 10;
  v7 = v4 >> 10;
  if (v3 >> 10 != 9)
  {
    if (v6 == 8)
    {
      if (v7 == 9)
      {
        *(_WORD *)(a3 + 8) = v4;
        v12 = a2[1];
        *(_WORD *)(a3 + 10) = v12;
        *(_WORD *)(a3 + 10) = v12 & 0xFC00 | (32 * (a1[2] & 0x1F)) | (a1[3] >> 11);
        HIDWORD(v13) = a1[3];
        LODWORD(v13) = a1[4] << 16;
        *(_WORD *)(a3 + 12) = v13 >> 27;
        HIDWORD(v13) = a1[4];
        LODWORD(v13) = a1[5] << 16;
        *(_WORD *)(a3 + 14) = v13 >> 27;
        HIDWORD(v13) = a1[5];
        LODWORD(v13) = a1[6] << 16;
        *(_WORD *)(a3 + 16) = v13 >> 27;
        HIDWORD(v13) = a1[6];
        LODWORD(v13) = a1[7] << 16;
        *(_WORD *)(a3 + 18) = v13 >> 27;
        *(_WORD *)(a3 + 20) = (32 * a1[7]) & 0xFFC0 | (a2[1] >> 4) & 0x3F;
        HIDWORD(v13) = a2[1];
        LODWORD(v13) = a2[2] << 16;
        *(_WORD *)(a3 + 22) = v13 >> 20;
        HIDWORD(v13) = a2[2];
        LODWORD(v13) = a2[3] << 16;
        *(_WORD *)(a3 + 24) = v13 >> 20;
        HIDWORD(v13) = a2[3];
        LODWORD(v13) = a2[4] << 16;
        v8 = v13 >> 20;
        goto LABEL_12;
      }
    }
    else if (v6 == 7 && v7 == 8)
    {
      *(_OWORD *)(a3 + 8) = *(_OWORD *)a1;
      *(_WORD *)(a3 + 22) = *(_WORD *)(a3 + 22) & 0xFFC0 | *a2 & 0x3F;
      *(_WORD *)(a3 + 24) = a2[1];
      v8 = a2[2];
LABEL_12:
      LOWORD(v11) = v8 & 0xFFE0;
      goto LABEL_13;
    }
    return 0;
  }
  if (v7 != 10)
    return 0;
  *(_WORD *)(a3 + 8) = v3;
  v9 = a1[1];
  *(_WORD *)(a3 + 10) = v9;
  *(_WORD *)(a3 + 10) = v9 & 0xFC00 | (2 * (a1[4] & 0x1FF)) | (a1[5] >> 15);
  HIDWORD(v10) = a1[5];
  LODWORD(v10) = a1[6] << 16;
  *(_WORD *)(a3 + 12) = v10 >> 31;
  HIDWORD(v10) = a1[6];
  LODWORD(v10) = a1[7] << 16;
  *(_WORD *)(a3 + 14) = v10 >> 31;
  *(_WORD *)(a3 + 16) = (2 * a1[7]) | (*a2 >> 5) & 1;
  HIDWORD(v10) = *a2;
  LODWORD(v10) = a2[1] << 16;
  *(_WORD *)(a3 + 18) = v10 >> 21;
  HIDWORD(v10) = a2[1];
  LODWORD(v10) = a2[2] << 16;
  *(_WORD *)(a3 + 20) = v10 >> 21;
  HIDWORD(v10) = a2[2];
  LODWORD(v10) = a2[3] << 16;
  *(_WORD *)(a3 + 22) = v10 >> 21;
  HIDWORD(v10) = a2[3];
  LODWORD(v10) = a2[4] << 16;
  *(_WORD *)(a3 + 24) = v10 >> 21;
  v11 = (a2[5] >> 5) & 0x7E0 | (a2[4] << 11);
LABEL_13:
  *(_WORD *)(a3 + 26) = v11;
  *(_DWORD *)(a3 + 28) = 0;
  return 1;
}

uint64_t Gnm37_03HandleSbConfigTimeout(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v4;
  unsigned __int16 v5;
  uint64_t v6;
  unsigned __int16 v7;
  char __str[1040];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_SB_CONFIG_TIMER\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm37_03HandleSbConfigTimeout");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v4 = mach_continuous_time();
      v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ActiveReqId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 87, "Gnm37_03HandleSbConfigTimeout", g_SbState);
      LbsOsaTrace_WriteLog(0xBu, __str, v5, 2, 1);
    }
    Gnm10_29SendFwActivity(3, 0);
    HIWORD(g_SbState) = 2817;
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v6 = mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 69, "Gnm37_03HandleSbConfigTimeout", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v7, 0, 1);
  }
  return 0;
}

uint64_t Gnm37_11HandleSbCfgReq(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  _BOOL4 v4;
  uint64_t v5;
  unsigned __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned __int16 v12;
  uint64_t v13;
  unsigned __int16 v14;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int16 v20;
  uint64_t v21;
  unsigned __int16 v22;
  unsigned __int16 v23;
  int v24;
  char v25;
  uint64_t v26;
  unsigned __int16 v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  uint64_t v31;
  unsigned __int16 v32;
  int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE v41[13];
  char __str[1040];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNM_SET_SB_CONFIG\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm37_11HandleSbCfgReq");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    v4 = qword_253FFD7D4 == 848;
    if (!g_HWStatus)
      v4 = g_GnssHw == 4;
    if (v4)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v5 = mach_continuous_time();
        v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NA\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 87, "Gnm37_11HandleSbCfgReq", 264);
        LbsOsaTrace_WriteLog(0xBu, __str, v6, 2, 1);
      }
      v7 = *(unsigned __int8 *)(a1 + 12);
      v8 = 2;
LABEL_18:
      Gnm11_00ApiStatusCB(v8, 1, v7, 14);
      return 0;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v11 = mach_continuous_time();
      v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ReqId,%u,CfgValidityMask,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 73, "Gnm37_11HandleSbCfgReq", *(unsigned __int8 *)(a1 + 12), *(_DWORD *)(a1 + 16));
      LbsOsaTrace_WriteLog(0xBu, __str, v12, 4, 1);
    }
    if (g_SbState != 255)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v13 = mach_continuous_time();
        v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Request OnGoing ReqId:%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNM", 69, "Gnm37_11HandleSbCfgReq", g_SbState);
        LbsOsaTrace_WriteLog(0xBu, __str, v14, 0, 1);
      }
      v7 = *(unsigned __int8 *)(a1 + 12);
      v8 = 11;
      goto LABEL_18;
    }
    v16 = *(_DWORD *)(a1 + 16);
    v17 = *(unsigned int *)(a1 + 28);
    v18 = v17 | ((unint64_t)*(unsigned __int8 *)(a1 + 32) << 32);
    if ((v16 & 0x200) != 0 && BYTE1(v17))
    {
      if (g_HWStatus)
      {
        if (qword_253FFD7D4 == 0x200000D67 && dword_253FFD7DC == 1)
          goto LABEL_25;
      }
      else if (!g_GnssHw)
      {
LABEL_25:
        if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
        {
LABEL_28:
          if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            v21 = mach_continuous_time();
            v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "GNM", 87, "Gnm37_11HandleSbCfgReq", 514);
            LbsOsaTrace_WriteLog(0xBu, __str, v22, 2, 1);
          }
          v7 = *(unsigned __int8 *)(a1 + 12);
          v8 = 1;
          goto LABEL_18;
        }
        bzero(__str, 0x410uLL);
        v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HW,Bright,CfgValMask,0x%X,ForceFilter,%u\n", v19);
LABEL_27:
        LbsOsaTrace_WriteLog(0xBu, __str, v20, 2, 1);
        goto LABEL_28;
      }
      v33 = (BYTE2(v17) != 0) & (v16 >> 10);
      if (v33 == 1 && (BYTE2(v17) > 8u || ((1 << SBYTE2(v17)) & 0x116) == 0))
      {
        if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
          goto LABEL_28;
        bzero(__str, 0x410uLL);
        v39 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CfgValMask,0x%X,GpsGalBds3FiltMsk,%u\n", v39);
        goto LABEL_27;
      }
      if ((v16 & 0x800) != 0)
      {
        v34 = BYTE3(v17);
        if (v34)
        {
          v33 = 1;
          if (v34 != 2 && v34 != 8)
          {
            if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
              goto LABEL_28;
            bzero(__str, 0x410uLL);
            v38 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
            v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CfgValMask,0x%X,GloFiltMsk,%u\n", v38);
            goto LABEL_27;
          }
        }
      }
      if ((v16 & 0x1000) != 0 && *(_BYTE *)(a1 + 32))
      {
        if (HIDWORD(v18) > 8 || ((1 << SBYTE4(v18)) & 0x114) == 0)
        {
          if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
            goto LABEL_28;
          bzero(__str, 0x410uLL);
          v35 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CfgValMask,0x%X,Bds2FiltMsk,%u\n", v35);
          goto LABEL_27;
        }
      }
      else if (!v33)
      {
        if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
          goto LABEL_28;
        bzero(__str, 0x410uLL);
        v37 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx CfgValMask,0x%X,GpsGalBds3FiltMsk,%u,GloFiltMsk,%u,Bds2FiltMsk,%u\n", v37, "GNM");
        goto LABEL_27;
      }
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v36 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CfgValMask,0x%X,GpsGalBds3FiltMsk,%u,GloFiltMsk,%u,Bds2FiltMsk,%u\n", v36, "GNM");
        goto LABEL_33;
      }
    }
    else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v40 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Mask,%u,ForceFilter,%u\n", v40);
LABEL_33:
      LbsOsaTrace_WriteLog(0xBu, __str, v23, 4, 1);
    }
    *(_QWORD *)v41 = qword_253FFE7BE;
    *(_QWORD *)&v41[5] = *(uint64_t *)((char *)&qword_253FFE7BE + 5);
    v24 = *(_DWORD *)(a1 + 16);
    if ((v24 & 1) != 0 && v41[0] != *(unsigned __int8 *)(a1 + 20))
    {
      v41[0] = *(_BYTE *)(a1 + 20);
      v25 = 1;
      if ((v24 & 2) == 0)
        goto LABEL_41;
    }
    else
    {
      v25 = 0;
      if ((v24 & 2) == 0)
        goto LABEL_41;
    }
    if (v41[1] != *(unsigned __int8 *)(a1 + 21))
    {
      v41[1] = *(_BYTE *)(a1 + 21);
      v25 = 1;
    }
LABEL_41:
    if ((v24 & 4) != 0 && v41[2] != *(unsigned __int8 *)(a1 + 22))
    {
      v41[2] = *(_BYTE *)(a1 + 22);
      v25 = 1;
    }
    if ((v24 & 8) != 0 && v41[3] != *(unsigned __int8 *)(a1 + 23))
    {
      v41[3] = *(_BYTE *)(a1 + 23);
      v25 = 1;
    }
    if ((v24 & 0x10) != 0 && v41[4] != *(unsigned __int8 *)(a1 + 24))
    {
      v41[4] = *(_BYTE *)(a1 + 24);
      v25 = 1;
    }
    if ((v24 & 0x20) != 0 && v41[5] != *(unsigned __int8 *)(a1 + 25))
    {
      v41[5] = *(_BYTE *)(a1 + 25);
      v25 = 1;
    }
    if ((v24 & 0x40) != 0 && v41[6] != *(unsigned __int8 *)(a1 + 26))
    {
      v41[6] = *(_BYTE *)(a1 + 26);
      v25 = 1;
    }
    if ((v24 & 0x80) != 0 && v41[7] != *(unsigned __int8 *)(a1 + 27))
    {
      v41[7] = *(_BYTE *)(a1 + 27);
      v25 = 1;
    }
    if ((v24 & 0x100) != 0 && v41[8] != *(unsigned __int8 *)(a1 + 28))
    {
      v41[8] = *(_BYTE *)(a1 + 28);
      v25 = 1;
    }
    if ((v24 & 0x200) != 0 && v41[9] != *(unsigned __int8 *)(a1 + 29))
    {
      v41[9] = *(_BYTE *)(a1 + 29);
      v25 = 1;
    }
    if ((v24 & 0x400) != 0 && v41[10] != *(unsigned __int8 *)(a1 + 30))
    {
      v41[10] = *(_BYTE *)(a1 + 30);
      v25 = 1;
    }
    if ((v24 & 0x800) != 0 && v41[11] != *(unsigned __int8 *)(a1 + 31))
    {
      v41[11] = *(_BYTE *)(a1 + 31);
      v25 = 1;
    }
    if ((v24 & 0x1000) != 0 && v41[12] != *(unsigned __int8 *)(a1 + 32))
    {
      v41[12] = *(_BYTE *)(a1 + 32);
    }
    else if ((v25 & 1) == 0)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v26 = mach_continuous_time();
        v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Chip Config matches Requested Config\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "GNM", 73, "Gnm37_11HandleSbCfgReq");
        LbsOsaTrace_WriteLog(0xBu, __str, v27, 4, 1);
      }
      v28 = *(unsigned __int8 *)(a1 + 12);
      v29 = 0;
LABEL_82:
      Gnm11_00ApiStatusCB(v29, 1, v28, 14);
      g_SbState = 234881279;
      return 0;
    }
    v30 = *(unsigned __int8 *)(a1 + 12);
    if (!AgpsFsmStartTimer(0x802C06u, 0xFAu))
    {
      Gnm10_29SendFwActivity(3, 1);
      Gnm38_12SendSBCfg(v30, 0x53u, (uint64_t)v41);
      qword_253FFE7BE = *(_QWORD *)v41;
      *(uint64_t *)((char *)&qword_253FFE7BE + 5) = *(_QWORD *)&v41[5];
      LOBYTE(g_SbState) = *(_BYTE *)(a1 + 12);
      BYTE1(g_SbState) = 1;
      return 0;
    }
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v31 = mach_continuous_time();
      v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "GNM", 69, "Gnm37_04ChkSendSbRequest", 1544);
      LbsOsaTrace_WriteLog(0xBu, __str, v32, 0, 1);
    }
    v29 = 11;
    v28 = v30;
    goto LABEL_82;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v9 = mach_continuous_time();
    v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 69, "Gnm37_11HandleSbCfgReq", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v10, 0, 1);
  }
  return 0;
}

size_t Gnm37_12HandleSbConfigRsp(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t v6;
  unsigned __int16 v7;
  unint64_t v8;
  unsigned __int16 v9;
  size_t result;
  uint64_t v11;
  unsigned __int16 v12;
  int v13;
  unsigned __int16 v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  char __str[1040];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    if ((LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0) & 1) != 0)
    {
      bzero(__str, 0x410uLL);
      v6 = mach_continuous_time();
      v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SbCfgRsp SeqNum,%u,Status,%c\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm37_12HandleSbConfigRsp", a2, a1);
      LbsOsaTrace_WriteLog(0xBu, __str, v7, 4, 1);
    }
    if (a2 == 239)
    {
      if ((_DWORD)a1 != 32)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GetStatusError,%c\n");
          goto LABEL_19;
        }
LABEL_20:
        result = Gnm10_29SendFwActivity(3, 0);
        BYTE2(g_SbState) = 1;
        return result;
      }
LABEL_12:
      Gnm37_01UpdateSbCfgFromChip(a3);
      goto LABEL_20;
    }
    if (a2 == 236)
    {
      if ((_DWORD)a1 != 32)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v8 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SBDfltCfg SeqNo,%X,Status,%c\n", v8, "GNM");
LABEL_19:
          LbsOsaTrace_WriteLog(0xBu, __str, v9, 0, 1);
          goto LABEL_20;
        }
        goto LABEL_20;
      }
      goto LABEL_12;
    }
    v13 = g_SbState;
    if (g_SbState == a2)
    {
      if (!AgpsFsmStopTimer(8399878) || !LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
LABEL_24:
        if ((_DWORD)a1 == 32)
        {
          Gnm37_01UpdateSbCfgFromChip(a3);
          HIBYTE(g_SbState) = 0;
          result = Gnm10_29SendFwActivity(3, 0);
          BYTE2(g_SbState) = 1;
        }
        else
        {
          result = LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0);
          if ((_DWORD)result)
          {
            bzero(__str, 0x410uLL);
            v16 = mach_continuous_time();
            v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SBDReqErr SeqNo,%X,Status,%c\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNM", 69, "Gnm37_12HandleSbConfigRsp", 770, a2, a1);
            result = LbsOsaTrace_WriteLog(0xBu, __str, v17, 0, 1);
          }
          HIBYTE(g_SbState) = 11;
          if (v13 == a2)
            return Gnm38_12SendSBCfg(0xEFuLL, 0x47u, 0);
        }
        return result;
      }
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
    }
    else
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
        goto LABEL_24;
      bzero(__str, 0x410uLL);
      v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ActiveId,%u,ReqId,%u\n", v15);
    }
    LbsOsaTrace_WriteLog(0xBu, __str, v14, 2, 1);
    goto LABEL_24;
  }
  result = LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0);
  if ((_DWORD)result)
  {
    bzero(__str, 0x410uLL);
    v11 = mach_continuous_time();
    v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SbCfgRsp\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 69, "Gnm37_12HandleSbConfigRsp", 513);
    return LbsOsaTrace_WriteLog(0xBu, __str, v12, 0, 1);
  }
  return result;
}

unsigned __int8 *Gnm37_01UpdateSbCfgFromChip(unsigned __int8 *result)
{
  unsigned __int8 *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  unsigned __int16 v13;
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 v17;
  uint64_t v18;
  unsigned __int16 v19;
  uint64_t v20;
  unsigned __int16 v21;
  uint64_t v22;
  unsigned __int16 v23;
  uint64_t v24;
  unsigned __int16 v25;
  uint64_t v26;
  unsigned __int16 v27;
  uint64_t v28;
  unsigned __int16 v29;
  uint64_t v30;
  unsigned __int16 v31;
  uint64_t v32;
  unsigned __int16 v33;
  char v34;
  uint64_t v35;
  unsigned __int16 v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  char __str[1040];
  uint64_t v43;

  v1 = result;
  v43 = *MEMORY[0x24BDAC8D0];
  v2 = qword_253FFE7BE;
  v3 = BYTE1(qword_253FFE7BE);
  v4 = BYTE2(qword_253FFE7BE);
  v5 = BYTE3(qword_253FFE7BE);
  v6 = BYTE4(qword_253FFE7BE);
  v7 = BYTE5(qword_253FFE7BE);
  v8 = BYTE6(qword_253FFE7BE);
  v9 = HIBYTE(qword_253FFE7BE);
  v41 = byte_253FFE7C6;
  v40 = byte_253FFE7C7;
  v39 = byte_253FFE7C8;
  v38 = byte_253FFE7C9;
  v37 = byte_253FFE7CA;
  if (qword_253FFE7BE != *result)
  {
    result = (unsigned __int8 *)LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v10 = mach_continuous_time();
      v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LegacyFta Host,%u,Chip,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm37_01UpdateSbCfgFromChip", v2, *v1);
      result = (unsigned __int8 *)LbsOsaTrace_WriteLog(0xBu, __str, v11, 4, 1);
    }
    LOBYTE(v2) = *v1;
  }
  if (v3 != v1[1])
  {
    result = (unsigned __int8 *)LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v12 = mach_continuous_time();
      v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: EFA Host,%u,Chip,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNM", 73, "Gnm37_01UpdateSbCfgFromChip", v3, v1[1]);
      result = (unsigned __int8 *)LbsOsaTrace_WriteLog(0xBu, __str, v13, 4, 1);
    }
    LOBYTE(v3) = v1[1];
  }
  if (v4 != v1[2])
  {
    result = (unsigned __int8 *)LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v14 = mach_continuous_time();
      v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: StatSpurCanclCfg Host,%u,Chip,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 73, "Gnm37_01UpdateSbCfgFromChip", v4, v1[2]);
      result = (unsigned __int8 *)LbsOsaTrace_WriteLog(0xBu, __str, v15, 4, 1);
    }
    LOBYTE(v4) = v1[2];
  }
  if (v5 != v1[3])
  {
    result = (unsigned __int8 *)LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v16 = mach_continuous_time();
      v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: DynSpurCanclCfg Host,%u,Chip,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNM", 73, "Gnm37_01UpdateSbCfgFromChip", v5, v1[3]);
      result = (unsigned __int8 *)LbsOsaTrace_WriteLog(0xBu, __str, v17, 4, 1);
    }
    LOBYTE(v5) = v1[3];
  }
  if (v6 != v1[4])
  {
    result = (unsigned __int8 *)LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v18 = mach_continuous_time();
      v19 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: JammerDetect Host,%u,Chip,%u \n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v18), "GNM", 73, "Gnm37_01UpdateSbCfgFromChip", v6, v1[4]);
      result = (unsigned __int8 *)LbsOsaTrace_WriteLog(0xBu, __str, v19, 4, 1);
    }
    LOBYTE(v6) = v1[4];
  }
  if (v7 != v1[5])
  {
    result = (unsigned __int8 *)LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v20 = mach_continuous_time();
      v21 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: LegacyBlanking Host,%u,Chip,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "GNM", 73, "Gnm37_01UpdateSbCfgFromChip", v7, v1[5]);
      result = (unsigned __int8 *)LbsOsaTrace_WriteLog(0xBu, __str, v21, 4, 1);
    }
    LOBYTE(v7) = v1[5];
  }
  if (v8 != v1[6])
  {
    result = (unsigned __int8 *)LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v22 = mach_continuous_time();
      v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: EBlankGpsGalBds3 Host,%u,Chip,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v22), "GNM", 73, "Gnm37_01UpdateSbCfgFromChip", v8, v1[6]);
      result = (unsigned __int8 *)LbsOsaTrace_WriteLog(0xBu, __str, v23, 4, 1);
    }
    LOBYTE(v8) = v1[6];
  }
  if (v9 != v1[7])
  {
    result = (unsigned __int8 *)LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v24 = mach_continuous_time();
      v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: EBlankGlo Host,%u,Chip,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "GNM", 73, "Gnm37_01UpdateSbCfgFromChip", v9, v1[7]);
      result = (unsigned __int8 *)LbsOsaTrace_WriteLog(0xBu, __str, v25, 4, 1);
    }
    LOBYTE(v9) = v1[7];
  }
  if (v41 != v1[8])
  {
    result = (unsigned __int8 *)LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v26 = mach_continuous_time();
      v27 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: EBlankBds2 Host,0x%X,Chip,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v26), "GNM", 73, "Gnm37_01UpdateSbCfgFromChip", v41, v1[8]);
      result = (unsigned __int8 *)LbsOsaTrace_WriteLog(0xBu, __str, v27, 4, 1);
    }
    LOBYTE(v41) = v1[8];
  }
  if (v40 != v1[9])
  {
    result = (unsigned __int8 *)LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v28 = mach_continuous_time();
      v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ForceFilter Host,%u,Chip,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "GNM", 73, "Gnm37_01UpdateSbCfgFromChip", v40, v1[9]);
      result = (unsigned __int8 *)LbsOsaTrace_WriteLog(0xBu, __str, v29, 4, 1);
    }
    LOBYTE(v40) = v1[9];
  }
  if (v39 != v1[10])
  {
    result = (unsigned __int8 *)LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v30 = mach_continuous_time();
      v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GpsGalBds3FiltMsk Host,0x%X,Chip,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "GNM", 73, "Gnm37_01UpdateSbCfgFromChip", v39, v1[10]);
      result = (unsigned __int8 *)LbsOsaTrace_WriteLog(0xBu, __str, v31, 4, 1);
    }
    LOBYTE(v39) = v1[10];
  }
  if (v38 != v1[11])
  {
    result = (unsigned __int8 *)LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v32 = mach_continuous_time();
      v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GloFiltMsk Host,0x%X,Chip,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "GNM", 73, "Gnm37_01UpdateSbCfgFromChip", v38, v1[11]);
      result = (unsigned __int8 *)LbsOsaTrace_WriteLog(0xBu, __str, v33, 4, 1);
    }
    LOBYTE(v38) = v1[11];
  }
  v34 = v37;
  if (v37 != v1[12])
  {
    result = (unsigned __int8 *)LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v35 = mach_continuous_time();
      v36 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Bds2FiltMsk Host,0x%X,Chip,0x%X\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v35), "GNM", 73, "Gnm37_01UpdateSbCfgFromChip", v37, v1[12]);
      result = (unsigned __int8 *)LbsOsaTrace_WriteLog(0xBu, __str, v36, 4, 1);
    }
    v34 = v1[12];
  }
  LOBYTE(qword_253FFE7BE) = v2;
  BYTE1(qword_253FFE7BE) = v3;
  BYTE2(qword_253FFE7BE) = v4;
  BYTE3(qword_253FFE7BE) = v5;
  BYTE4(qword_253FFE7BE) = v6;
  BYTE5(qword_253FFE7BE) = v7;
  BYTE6(qword_253FFE7BE) = v8;
  HIBYTE(qword_253FFE7BE) = v9;
  byte_253FFE7C6 = v41;
  byte_253FFE7C7 = v40;
  byte_253FFE7C8 = v39;
  byte_253FFE7C9 = v38;
  byte_253FFE7CA = v34;
  return result;
}

uint64_t Gnm37_13HandleSbStopFwActResp(uint64_t result)
{
  char v1;
  uint64_t v2;
  unsigned __int16 v3;
  char __str[1040];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (BYTE2(g_SbState))
  {
    v1 = result;
    if (BYTE1(g_SbState))
      result = Gnm11_00ApiStatusCB(HIBYTE(g_SbState), 1, g_SbState, 14);
    if ((v1 & 1) == 0)
    {
      result = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
      if ((_DWORD)result)
      {
        bzero(__str, 0x410uLL);
        v2 = mach_continuous_time();
        v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FW activity Stop Failure Id,%u,AsyncRsp,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 87, "Gnm37_13HandleSbStopFwActResp", g_SbState, HIBYTE(g_SbState));
        result = LbsOsaTrace_WriteLog(0xBu, __str, v3, 2, 1);
      }
    }
    g_SbState = 234881279;
  }
  return result;
}

BOOL Gnm37_25MapSbCfgGnmToPlcBright(uint64_t a1, uint64_t a2)
{
  int v4;
  _BOOL8 result;
  char v6;
  char v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 5);
  v4 = *(unsigned __int8 *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = v4;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 10);
  *(_WORD *)(a1 + 13) = *(_WORD *)(a2 + 11);
  result = Gnm37_20GetPlcEBlankingCfg((_BYTE *)a2);
  *(_BYTE *)(a1 + 3) = result;
  v6 = *(_BYTE *)(a2 + 6) != 0;
  if (*(_BYTE *)(a2 + 7))
    v6 |= 2u;
  if (*(_BYTE *)(a2 + 8))
    v6 |= 4u;
  *(_BYTE *)(a1 + 11) = v6;
  v7 = *(_BYTE *)(a2 + 2) != 0;
  if (v4)
    v7 |= 2u;
  *(_BYTE *)(a1 + 15) = v7;
  *(_BYTE *)(a1 + 1) = 0;
  *(_WORD *)(a1 + 6) = 0;
  return result;
}

BOOL Gnm37_20GetPlcEBlankingCfg(_BYTE *a1)
{
  return a1[6] || a1[7] || a1[8] || a1[10] || a1[11] || a1[12];
}

BOOL Gnm37_26MapSbCfgGnmToPlcSunshine(uint64_t a1, uint64_t a2, uint8x8_t a3)
{
  int16x8_t v5;
  _BOOL8 result;
  char v7;
  char v8;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_WORD *)(a1 + 3) = *(_WORD *)(a2 + 4);
  a3.i32[0] = *(_DWORD *)(a2 + 9);
  v5 = (int16x8_t)vmovl_u8(a3);
  *(int8x8_t *)v5.i8 = vext_s8(*(int8x8_t *)v5.i8, *(int8x8_t *)v5.i8, 2uLL);
  *(_DWORD *)(a1 + 6) = vmovn_s16(v5).u32[0];
  result = Gnm37_20GetPlcEBlankingCfg((_BYTE *)a2);
  *(_BYTE *)(a1 + 10) = result;
  v7 = *(_BYTE *)(a2 + 6) != 0;
  if (*(_BYTE *)(a2 + 7))
    v7 |= 2u;
  if (*(_BYTE *)(a2 + 8))
    v7 |= 4u;
  *(_BYTE *)(a1 + 5) = v7;
  v8 = *(_BYTE *)(a2 + 2) != 0;
  if (*(_BYTE *)(a2 + 3))
    v8 |= 2u;
  *(_BYTE *)(a1 + 2) = v8;
  *(_BYTE *)(a1 + 11) = 0;
  return result;
}

uint64_t Gnm37_27MapSbCfgPlcToGnmBright(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;

  *(_BYTE *)result = *(_BYTE *)a2;
  *(_BYTE *)(result + 1) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(result + 4) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(result + 5) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(result + 10) = *(_BYTE *)(a2 + 12);
  *(_WORD *)(result + 11) = *(_WORD *)(a2 + 13);
  v2 = *(_BYTE *)(a2 + 15);
  if ((v2 & 1) != 0)
    *(_BYTE *)(result + 2) = 1;
  if ((v2 & 2) != 0)
    *(_BYTE *)(result + 3) = 1;
  v3 = *(_BYTE *)(a2 + 11);
  if ((v3 & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 11) & 2) == 0)
      goto LABEL_7;
LABEL_11:
    *(_BYTE *)(result + 7) = 1;
    if ((v3 & 4) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  *(_BYTE *)(result + 6) = 1;
  if ((v3 & 2) != 0)
    goto LABEL_11;
LABEL_7:
  if ((v3 & 4) != 0)
LABEL_8:
    *(_BYTE *)(result + 8) = 1;
LABEL_9:
  *(_BYTE *)(result + 9) = 0;
  return result;
}

uint64_t Gnm37_28MapSbCfgPlcToGnmSunshine(uint64_t result, uint64_t a2, uint8x8_t a3)
{
  int16x8_t v3;
  char v4;
  char v5;

  *(_WORD *)result = *(_WORD *)a2;
  *(_WORD *)(result + 4) = *(_WORD *)(a2 + 3);
  a3.i32[0] = *(_DWORD *)(a2 + 6);
  v3 = (int16x8_t)vmovl_u8(a3);
  *(int8x8_t *)v3.i8 = vext_s8(*(int8x8_t *)v3.i8, *(int8x8_t *)v3.i8, 6uLL);
  *(_DWORD *)(result + 9) = vmovn_s16(v3).u32[0];
  v4 = *(_BYTE *)(a2 + 2);
  if ((v4 & 1) != 0)
    *(_BYTE *)(result + 2) = 1;
  if ((v4 & 2) != 0)
    *(_BYTE *)(result + 3) = 1;
  v5 = *(_BYTE *)(a2 + 5);
  if ((v5 & 1) != 0)
  {
    *(_BYTE *)(result + 6) = 1;
    if ((v5 & 2) == 0)
    {
LABEL_7:
      if ((v5 & 4) == 0)
        return result;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(a2 + 5) & 2) == 0)
  {
    goto LABEL_7;
  }
  *(_BYTE *)(result + 7) = 1;
  if ((v5 & 4) == 0)
    return result;
LABEL_8:
  *(_BYTE *)(result + 8) = 1;
  return result;
}

__n128 GN_GPS_Get_LibVersion(char *a1)
{
  unsigned int v2;
  unsigned int v3;
  char v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;
  _QWORD v17[2];
  uint64_t v18;
  unint64_t v19;
  _BYTE v20[15];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned __int16 *)(xmmword_2540112E8 + 472);
  v3 = *(_DWORD *)(xmmword_2540112E8 + 476);
  v4 = *(_BYTE *)(xmmword_2540112E8 + 480);
  v5 = *(_BYTE *)(xmmword_2540112E8 + 481);
  v6 = (uint64_t *)xmmword_254011368;
  if (__PAIR64__(*(_DWORD *)(xmmword_254011368 + 12), *(unsigned __int16 *)(xmmword_254011368 + 8)) != __PAIR64__(v3, v2))
  {
    *(_WORD *)(xmmword_254011368 + 8) = v2;
    *((_DWORD *)v6 + 3) = v3;
    *((_BYTE *)v6 + 16) = v4;
    *((_BYTE *)v6 + 17) = v5;
    v7 = *v6 + 18;
    v18 = *v6;
    v19 = v7;
    v17[0] = v18;
    v17[1] = v18;
    sprintf_03d((uint64_t)v17, v2);
    v8 = (_BYTE *)v17[0]++;
    *v8 = 45;
    if (v17[0] >= v19)
      v17[0] = v18;
    v9 = *((unsigned int *)v6 + 3);
    v20[0] = hexTABLE[v9 >> 28];
    v20[1] = hexTABLE[(v9 >> 24) & 0xF];
    hex6((uint64_t)v17, v9, v20, 2);
    v10 = (_BYTE *)v17[0]++;
    *v10 = 45;
    if (v17[0] >= v19)
      v17[0] = v18;
    sprintf_02d(v17, *((unsigned __int8 *)v6 + 16));
    v11 = (_BYTE *)v17[0]++;
    *v11 = 46;
    if (v17[0] >= v19)
      v17[0] = v18;
    sprintf_02d(v17, *((unsigned __int8 *)v6 + 17));
  }
  v12 = *(_OWORD *)((char *)v6 + 18);
  v13 = *(_OWORD *)((char *)v6 + 50);
  *((_OWORD *)a1 + 1) = *(_OWORD *)((char *)v6 + 34);
  *((_OWORD *)a1 + 2) = v13;
  *(_OWORD *)a1 = v12;
  result = *(__n128 *)((char *)v6 + 66);
  v15 = *(_OWORD *)((char *)v6 + 82);
  v16 = *(_OWORD *)((char *)v6 + 98);
  *((_DWORD *)a1 + 24) = *(_DWORD *)((char *)v6 + 114);
  *((_OWORD *)a1 + 4) = v15;
  *((_OWORD *)a1 + 5) = v16;
  *((__n128 *)a1 + 3) = result;
  return result;
}

uint64_t GN_GPS_Initialise(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  gnss::GnssAdaptDevice *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  __int16 v24;
  uint64_t i;
  char *v26;
  uint64_t j;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  _OWORD *v36;
  uint64_t v37;
  _OWORD *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _OWORD __src[1434];
  __int128 v73;
  _BYTE v74[28];
  char v75[15];
  uint64_t v76;

  MEMORY[0x24BDAC7A8](a1, a2, a3, a4, a5, a6);
  v76 = *MEMORY[0x24BDAC8D0];
  v6 = (gnss::GnssAdaptDevice *)mach_continuous_time();
  v7 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)(unint64_t)v6);
  v8 = 10;
  do
  {
    *(_DWORD *)&v74[4 * v8 - 16] = v7;
    v9 = v8-- + 1;
  }
  while (v9 > 1);
  Last_Published_Nav_Data_TTag = 0;
  Last_Published_Raw_Meas_TTag = 0;
  _MergedGlobals_1 = 0;
  inited = GNSS_Init_p_list(v6);
  GNSS_Clear_DataAreas((uint64_t)inited, v11, v12, v13, v14, v15);
  v16 = *((_QWORD *)&g_GN_GPS_Data_p_list + 1);
  **((_QWORD **)&g_GN_GPS_Data_p_list + 1) = 0;
  *(_QWORD *)(v16 + 8) = 0;
  *(_DWORD *)(v16 + 16) = 0;
  GNSS_HL_Data_Bases_Clear();
  EvCrt_v("GN_GPS_Initialise: ");
  g_Enable_Nav_Debug = 4;
  v17 = 1;
  g_Enable_GNB_Debug = 1;
  g_Enable_Event_Log = 2;
  g_Enable_LCD_Debug = 515;
  v18 = xmmword_254011368;
  *(_WORD *)(xmmword_254011368 + 8) = 0;
  *(_DWORD *)(v18 + 12) = 0;
  *(_DWORD *)(v18 + 21) = 1717660783;
  *(_DWORD *)(v18 + 18) = 1868720492;
  *((_QWORD *)&__src[1] + 1) = v18 + 34;
  LOBYTE(v19) = 32;
  *(_BYTE *)(v18 + 25) = 32;
  v20 = (_BYTE *)(v18 + 25);
  *(_QWORD *)&__src[1] = v18 + 25;
  *((_QWORD *)&__src[0] + 1) = v18 + 25;
  if ((unint64_t)(v18 + 26) < *((_QWORD *)&__src[1] + 1))
    v20 = (_BYTE *)(v18 + 26);
  strcpy(v75, " 2");
  do
  {
    *(_QWORD *)&__src[0] = v20 + 1;
    *v20 = v19;
    v20 = *(_BYTE **)&__src[0];
    if (*(_QWORD *)&__src[0] >= *((_QWORD *)&__src[1] + 1))
    {
      v20 = *(_BYTE **)&__src[1];
      *(_QWORD *)&__src[0] = *(_QWORD *)&__src[1];
    }
    v19 = v75[v17++];
  }
  while (v19);
  *(_QWORD *)&__src[0] = v20 + 1;
  *v20 = 46;
  if (*(_QWORD *)&__src[0] >= *((_QWORD *)&__src[1] + 1))
    *(_QWORD *)&__src[0] = *(_QWORD *)&__src[1];
  digit2((uint64_t)__src, 4u, v75, 0, 0);
  v21 = (_BYTE *)(*(_QWORD *)&__src[0])++;
  *v21 = 46;
  if (*(_QWORD *)&__src[0] >= *((_QWORD *)&__src[1] + 1))
    v22 = *(_BYTE **)&__src[1];
  else
    v22 = *(_BYTE **)&__src[0];
  *(_QWORD *)&__src[0] = v22 + 1;
  *v22 = 73;
  if (*(_QWORD *)&__src[0] >= *((_QWORD *)&__src[1] + 1))
    v23 = *(_BYTE **)&__src[1];
  else
    v23 = *(_BYTE **)&__src[0];
  *(_QWORD *)&__src[0] = v23 + 1;
  *v23 = 45;
  strcpy((char *)(v18 + 34), "230302-000-00000000-00.00 Aug  3 2024 06:14:45");
  *(_QWORD *)v18 = v18 + 41;
  *(_BYTE *)(v18 + 118) = 0;
  *(_DWORD *)&word_2540216C6 = 0;
  if (byte_2540216C4 == 1)
  {
    v24 = word_2540216CA + 1;
  }
  else
  {
    v24 = 1;
    byte_2540216C4 = 1;
  }
  word_2540216CA = v24;
  GNSS_Mark_Restart(0);
  DWORD1(v73) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  EvLog("GN_GPS_Initialise:  Read NV_Store NO Data");
  bzero(__src, 0x59A0uLL);
  for (i = 184; i != 1976; i += 56)
  {
    v26 = (char *)__src + i;
    *((_DWORD *)v26 + 12) = 0;
    *((_OWORD *)v26 + 1) = 0uLL;
    *((_OWORD *)v26 + 2) = 0uLL;
    *(_OWORD *)v26 = 0uLL;
  }
  for (j = 1976; j != 5816; j += 120)
  {
    v28 = (char *)__src + j;
    *((_DWORD *)v28 + 28) = 0;
    *((_OWORD *)v28 + 5) = 0uLL;
    *((_OWORD *)v28 + 6) = 0uLL;
    *((_OWORD *)v28 + 3) = 0uLL;
    *((_OWORD *)v28 + 4) = 0uLL;
    *((_OWORD *)v28 + 1) = 0uLL;
    *((_OWORD *)v28 + 2) = 0uLL;
    *(_OWORD *)v28 = 0uLL;
  }
  *((_QWORD *)&__src[363] + 1) = 0;
  *(_QWORD *)&__src[364] = 0;
  v29 = -560;
  *(_QWORD *)((char *)&__src[364] + 6) = 0;
  do
  {
    v30 = (char *)__src + v29;
    *((_DWORD *)v30 + 1612) = 0;
    *((_OWORD *)v30 + 402) = 0uLL;
    *((_OWORD *)v30 + 401) = 0uLL;
    *((_OWORD *)v30 + 400) = 0uLL;
    v29 += 56;
  }
  while (v29);
  v31 = -1200;
  do
  {
    v32 = (char *)__src + v31;
    *((_DWORD *)v32 + 1928) = 0;
    *((_OWORD *)v32 + 481) = 0uLL;
    *((_OWORD *)v32 + 480) = 0uLL;
    *((_OWORD *)v32 + 479) = 0uLL;
    *((_OWORD *)v32 + 478) = 0uLL;
    *((_OWORD *)v32 + 477) = 0uLL;
    *((_OWORD *)v32 + 476) = 0uLL;
    *((_OWORD *)v32 + 475) = 0uLL;
    v31 += 120;
  }
  while (v31);
  memset(&__src[475], 0, 70);
  v33 = 0xFFFFFFFFFFFFF94;
  do
  {
    v34 = (_OWORD *)((char *)&__src[v33 + 587] + 8);
    *(_OWORD *)((char *)v34 + 27) = 0uLL;
    *v34 = 0uLL;
    v34[1] = 0uLL;
    v33 += 3;
  }
  while (v33 * 16);
  v35 = 0xFFFFFFFFFFFFF28;
  do
  {
    v36 = (_OWORD *)((char *)&__src[v35 + 803] + 8);
    *(_OWORD *)((char *)v36 + 79) = 0uLL;
    v36[3] = 0uLL;
    v36[4] = 0uLL;
    v36[1] = 0uLL;
    v36[2] = 0uLL;
    *v36 = 0uLL;
    v35 += 6;
  }
  while (v35 * 16);
  BYTE8(__src[806]) = 0;
  *(_OWORD *)((char *)&__src[804] + 8) = 0u;
  *(_OWORD *)((char *)&__src[805] + 8) = 0u;
  *(_OWORD *)((char *)&__src[803] + 8) = 0u;
  memset(&__src[807], 0, 28);
  v37 = -2072;
  do
  {
    *(_DWORD *)((char *)&__src[941] + v37 + 8) = 0;
    v38 = (_OWORD *)((char *)&__src[938] + v37 + 8);
    v38[1] = 0uLL;
    v38[2] = 0uLL;
    *v38 = 0uLL;
    v37 += 56;
  }
  while (v37);
  do
  {
    v39 = (char *)__src + v37;
    *((_DWORD *)v39 + 3780) = 0;
    v40 = (char *)&__src[938] + v37 + 8;
    v41 = (char *)&__src[940] + v37 + 8;
    *(_OWORD *)v41 = 0uLL;
    *((_OWORD *)v41 + 1) = 0uLL;
    *((_OWORD *)v41 + 2) = 0uLL;
    *((_OWORD *)v41 + 3) = 0uLL;
    *(_QWORD *)(v41 + 62) = 0;
    *((_QWORD *)v39 + 1877) = 0;
    *((_QWORD *)v39 + 1879) = 0;
    *((_QWORD *)v39 + 1878) = 0;
    v37 += 112;
    *(_QWORD *)(v40 + 23) = 0;
  }
  while (v37 != 4144);
  v42 = 0;
  DWORD2(__src[1199]) = 0;
  *(_OWORD *)((char *)&__src[1197] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1198] + 8) = 0u;
  DWORD1(__src[1201]) = 0;
  BYTE8(__src[1201]) = 0;
  HIDWORD(__src[1201]) = 0;
  LOBYTE(__src[1202]) = 0;
  memset(&__src[1200], 0, 18);
  do
  {
    v43 = (char *)&__src[v42 + 1202] + 8;
    v44 = (char *)&__src[v42 + 1203] + 12;
    *((_QWORD *)v44 + 2) = 0;
    *(_OWORD *)v44 = 0uLL;
    *(_OWORD *)v43 = 0uLL;
    *((_WORD *)v43 + 8) = 0;
    v42 += 3;
  }
  while (v42 != 72);
  v45 = -1728;
  do
  {
    v46 = (char *)&__src[1382] + v45 + 8;
    *(_QWORD *)(v46 + 62) = 0;
    *((_OWORD *)v46 + 2) = 0uLL;
    *((_OWORD *)v46 + 3) = 0uLL;
    *(_OWORD *)v46 = 0uLL;
    *((_OWORD *)v46 + 1) = 0uLL;
    v45 += 72;
  }
  while (v45);
  v47 = 0xFFFFFFFFFFFFFECLL;
  do
  {
    *((_QWORD *)&__src[v47 + 1403] + 1) = 0;
    v48 = (char *)&__src[v47 + 1402] + 8;
    *((_DWORD *)v48 + 6) = 0;
    *(_OWORD *)v48 = 0uLL;
    v47 += 2;
  }
  while (v47 * 16);
  *(_QWORD *)((char *)&__src[1403] + 14) = 0;
  *(_QWORD *)((char *)&__src[1427] + 6) = 0;
  *((_QWORD *)&__src[1403] + 1) = 0;
  *(_OWORD *)((char *)&__src[1402] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1404] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1405] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1406] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1407] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1408] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1409] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1410] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1411] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1412] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1413] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1414] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1415] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1416] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1417] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1418] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1419] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1420] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1421] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1422] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1423] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1424] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1425] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1426] + 8) = 0u;
  memset(&__src[1428], 0, 20);
  *(_OWORD *)((char *)&__src[1429] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1430] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1431] + 8) = 0u;
  *(_OWORD *)((char *)&__src[1432] + 8) = 0u;
  DWORD2(__src[1433]) = 0;
  v49 = xmmword_254011388;
  memcpy((void *)xmmword_254011388, __src, 0x599CuLL);
  NV_Ram_Init(v49, xmmword_254011398, v50);
  Debug_Log_NonVol(0, xmmword_254011388);
  v71 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  DWORD2(v73) = v71;
  NA_Ram_Init(*((uint64_t *)&xmmword_254011388 + 1), v51, v52, v53, v54, v55);
  GNSS_HL_Data_Bases_Init();
  *(_DWORD *)(*((_QWORD *)&xmmword_254011288 + 1) + 944) = -1169279272;
  Nav_Kalman_Update_Init();
  v70 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  HIDWORD(v73) = v70;
  API_Query_Config(*((uint64_t *)&xmmword_254011368 + 1));
  g_GN_GNSS_Nav_Debug_Port = 1;
  v69 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  *(_DWORD *)v74 = v69;
  v56 = xmmword_2540112E8;
  v57 = *(_DWORD *)(xmmword_2540112E8 + 448);
  *(_DWORD *)(xmmword_2540112E8 + 504) = v57;
  *(_DWORD *)(v56 + 496) = 0;
  EvLog_v("GN_GPS_Initialise:  GNB ROM %d 0x%x %u", *(unsigned __int16 *)(v56 + 472), *(_DWORD *)(v56 + 476), v57);
  v58 = *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 1019);
  v67 = *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 1133);
  v68 = *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 1134);
  v65 = *(unsigned int *)(*((_QWORD *)&xmmword_254011288 + 1) + 1124);
  v66 = *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 1132);
  v64 = *(__int16 *)(*((_QWORD *)&xmmword_254011288 + 1) + 1028);
  EvLog_nd("GN_GPS_Initialise: ", 47, v58, *(unsigned int *)(*((_QWORD *)&xmmword_254011288 + 1) + 4), *(unsigned int *)(*((_QWORD *)&xmmword_254011288 + 1) + 68), *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 73), *(unsigned int *)(*((_QWORD *)&xmmword_254011288 + 1) + 24), *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 28), *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 72), *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 31), *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 32), *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 33), *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 34), *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 35), *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 36), *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 37), *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 38), *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 39), *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 40),
    *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 41),
    *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 42),
    *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 43),
    *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 46),
    *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 66),
    *(unsigned int *)(*((_QWORD *)&xmmword_254011288 + 1) + 948),
    *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 1012),
    *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 1013),
    *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 1014),
    *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 1015),
    *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 1016),
    *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 1017),
    *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 1018),
    v58,
    *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 1020),
    *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 1021),
    *(unsigned int *)(*((_QWORD *)&xmmword_254011288 + 1) + 1060),
    *(unsigned int *)(*((_QWORD *)&xmmword_254011288 + 1) + 1052),
    *(unsigned int *)(*((_QWORD *)&xmmword_254011288 + 1) + 16),
    (int)*(double *)(*((_QWORD *)&xmmword_254011288 + 1) + 960),
    (int)*(double *)(*((_QWORD *)&xmmword_254011288 + 1) + 968),
    (int)*(double *)(*((_QWORD *)&xmmword_254011288 + 1) + 976),
    (int)*(double *)(*((_QWORD *)&xmmword_254011288 + 1) + 984),
    *(__int16 *)(*((_QWORD *)&xmmword_254011288 + 1) + 1024),
    *(__int16 *)(*((_QWORD *)&xmmword_254011288 + 1) + 1026),
    v64,
    *(unsigned int *)(*((_QWORD *)&xmmword_254011288 + 1) + 1120),
    v65,
    v66,
    v67,
    v68);
  v59 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  *(_DWORD *)&v74[4] = v59;
  *(_DWORD *)&v74[8] = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  EvLog_v("GN_GPS_Initialise: OS Time Waypoints: %u %d %d %d %d %d %d", (_DWORD)v73, DWORD1(v73) - (_DWORD)v73, v71 - (_DWORD)v73, v70 - (_DWORD)v73, v69 - (_DWORD)v73, v59 - (_DWORD)v73, *(_DWORD *)&v74[8] - (_DWORD)v73);
  v60 = *((_QWORD *)&xmmword_254011288 + 1);
  v61 = *((_QWORD *)&xmmword_254011288 + 1) + 1072;
  v62 = *(_OWORD *)v74;
  *(_OWORD *)(*((_QWORD *)&xmmword_254011288 + 1) + 1072) = v73;
  *(_OWORD *)(v60 + 1088) = v62;
  *(_OWORD *)(v61 + 28) = *(_OWORD *)&v74[12];
  return GNSS_Event_Log_Ctl(*((uint64_t *)&xmmword_2540113B8 + 1));
}

void GNSS_Mark_Restart(int a1)
{
  _BOOL4 v2;
  char **v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char v7;
  char v8;
  unsigned __int8 *v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char v30;
  char v31;
  unsigned __int8 *v32;
  int v33;
  char v34;
  uint64_t v35;
  char v36;
  unsigned __int8 *v37;
  int v38;
  uint64_t v39;
  char v40;
  int v41;
  char *v42;
  char v43;
  _BYTE v44[99];
  char v45[36];
  uint64_t v46;
  char v47;
  char v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  GNSS_Write_NMEA(*((_QWORD **)&xmmword_2540113A8 + 1));
  GNSS_Write_GNB_Ctrl((char *)xmmword_2540113A8);
  GNSS_GNB_Debug_Ctl(xmmword_2540113C8);
  GNSS_Event_Log_Ctl(*((uint64_t *)&xmmword_2540113B8 + 1));
  GNSS_Nav_Debug_Ctl(xmmword_2540113B8);
  LCD_SA_Debug_Ctl(*((uint64_t *)&xmmword_2540113C8 + 1));
  API_Query_Config((uint64_t)v45);
  v2 = 1;
  if (!v46 && !v47)
    v2 = v48 != 0;
  v3 = (char **)xmmword_2540113A8;
  v4 = *(char **)(xmmword_2540113A8 + 16);
  *(_QWORD *)xmmword_2540113A8 = v4;
  v3[1] = v4;
  if (a1 == 2)
  {
    GN_GPS_Get_LibVersion(&v43);
    v5 = 0;
    v6 = *v3;
    v7 = 10;
    do
    {
      *v3 = v6 + 1;
      *v6 = v7;
      v6 = *v3;
      if (*v3 >= v3[3])
      {
        v6 = v3[2];
        *v3 = v6;
      }
      v7 = aPeGnLibVer[++v5];
    }
    while (v5 != 16);
    v8 = v43;
    if (v43)
    {
      v9 = v44;
      do
      {
        *v3 = v6 + 1;
        *v6 = v8;
        v6 = *v3;
        if (*v3 >= v3[3])
        {
          v6 = v3[2];
          *v3 = v6;
        }
        v10 = *v9++;
        v8 = v10;
      }
      while (v10);
    }
    v11 = 32;
    v12 = 1u;
    do
    {
      *v3 = v6 + 1;
      *v6 = v11;
      v6 = *v3;
      if (*v3 >= v3[3])
      {
        v6 = v3[2];
        *v3 = v6;
      }
      v11 = aOsms[v12++];
    }
    while (v12 != 7);
    v13 = mach_continuous_time();
    sprintf_10u(v3, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13));
    v14 = *v3;
    goto LABEL_58;
  }
  v15 = 10;
  v16 = 1u;
  do
  {
    *v3 = v4 + 1;
    *v4 = v15;
    v4 = *v3;
    if (*v3 >= v3[3])
    {
      v4 = v3[2];
      *v3 = v4;
    }
    v15 = asc_21E7A30F7[v16++];
  }
  while (v16 != 46);
  switch(a1)
  {
    case 0:
      v20 = 71;
      v21 = 1u;
      do
      {
        *v3 = v4 + 1;
        *v4 = v20;
        v4 = *v3;
        if (*v3 >= v3[3])
        {
          v4 = v3[2];
          *v3 = v4;
        }
        v20 = aGnGpsInitialis_3[v21++];
      }
      while (v21 != 19);
      v19 = (unsigned __int16)word_2540216CA;
      goto LABEL_41;
    case 1:
      v22 = 0;
      v23 = 82;
      do
      {
        *v3 = v4 + 1;
        *v4 = v23;
        v4 = *v3;
        if (*v3 >= v3[3])
        {
          v4 = v3[2];
          *v3 = v4;
        }
        v23 = aRestart[++v22];
      }
      while (v22 != 8);
      v19 = (unsigned __int16)word_2540216C6;
      goto LABEL_41;
    case 3:
      v17 = 87;
      v18 = 1u;
      do
      {
        *v3 = v4 + 1;
        *v4 = v17;
        v4 = *v3;
        if (*v3 >= v3[3])
        {
          v4 = v3[2];
          *v3 = v4;
        }
        v17 = aWake[v18++];
      }
      while (v18 != 6);
      v19 = (unsigned __int16)word_2540216C8;
LABEL_41:
      sprintf1da(v3, v19, &v43, 0, 0);
      goto LABEL_43;
  }
  EvCrt_Illegal_Default("GNSS_Mark_Restart", 0xC12u);
LABEL_43:
  v24 = *v3;
  v25 = 32;
  v26 = 1u;
  do
  {
    *v3 = v24 + 1;
    *v24 = v25;
    v24 = *v3;
    if (*v3 >= v3[3])
    {
      v24 = v3[2];
      *v3 = v24;
    }
    v25 = asc_21E7A3159[v26++];
  }
  while (v26 != 45);
  v27 = mach_continuous_time();
  sprintf_10u(v3, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27));
  v28 = (*v3)++;
  *v28 = 10;
  if (*v3 >= v3[3])
    *v3 = v3[2];
  GN_GPS_Get_LibVersion(&v43);
  v29 = 0;
  v14 = *v3;
  v30 = 10;
  do
  {
    *v3 = v14 + 1;
    *v14 = v30;
    v14 = *v3;
    if (*v3 >= v3[3])
    {
      v14 = v3[2];
      *v3 = v14;
    }
    v30 = aPeGnLibVer[++v29];
  }
  while (v29 != 16);
  v31 = v43;
  if (v43)
  {
    v32 = v44;
    do
    {
      *v3 = v14 + 1;
      *v14 = v31;
      v14 = *v3;
      if (*v3 >= v3[3])
      {
        v14 = v3[2];
        *v3 = v14;
      }
      v33 = *v32++;
      v31 = v33;
    }
    while (v33);
  }
LABEL_58:
  if (*(_BYTE *)(xmmword_254011368 + 118))
  {
    v34 = 10;
    v35 = 1u;
    do
    {
      *v3 = v14 + 1;
      *v14 = v34;
      v14 = *v3;
      if (*v3 >= v3[3])
      {
        v14 = v3[2];
        *v3 = v14;
      }
      v34 = aHostversion[v35++];
    }
    while (v35 != 15);
    v36 = *(_BYTE *)(xmmword_254011368 + 118);
    if (v36)
    {
      v37 = (unsigned __int8 *)(xmmword_254011368 + 119);
      do
      {
        *v3 = v14 + 1;
        *v14 = v36;
        v14 = *v3;
        if (*v3 >= v3[3])
        {
          v14 = v3[2];
          *v3 = v14;
        }
        v38 = *v37++;
        v36 = v38;
      }
      while (v38);
    }
  }
  v39 = 0;
  v40 = 10;
  do
  {
    *v3 = v14 + 1;
    *v14 = v40;
    v14 = *v3;
    if (*v3 >= v3[3])
    {
      v14 = v3[2];
      *v3 = v14;
    }
    v40 = asc_21E7A31AD[++v39];
  }
  while (v39 != 2);
  v41 = *((_DWORD *)v3 + 2);
  if (v2)
    GNSS_Write_NMEA(v3);
  v42 = v3[2];
  if (v50)
  {
    GN_GPS_Write_GNB_Debug((unsigned __int16)((_WORD)v14 - v41), v42);
    v42 = v3[2];
  }
  if (v51)
  {
    GN_GPS_Write_Event_Log((unsigned __int16)((_WORD)v14 - v41), v42);
    v42 = v3[2];
  }
  if (v49)
  {
    GN_GPS_Write_Nav_Debug((unsigned __int16)((_WORD)v14 - v41), v42);
    v42 = v3[2];
  }
  if (v52)
  {
    GN_GPS_Write_LCD_Debug((unsigned __int16)((_WORD)v14 - v41), v42);
    v42 = v3[2];
  }
  *v3 = v42;
  v3[1] = v42;
  if (a1)
    GNSS_Nav_Debug_InitWrite((uint64_t)&g_GN_GPS_Data_p_list);
}

char *GN_GPS_Update(void)
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char *result;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  double v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  char **v21;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  int v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned __int8 *v56;
  int8x16_t v57;
  __int16 v58;
  __int16 v59;
  char v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v0 = *((_QWORD *)&xmmword_254011288 + 1);
  v1 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  v2 = 278;
  do
  {
    *(_DWORD *)(v0 + 4 * v2) = v1;
    v3 = v2 - 267;
    --v2;
  }
  while (v3 > 1);
  if ((_DWORD)g_GN_GPS_Data_p_list == 1)
    return EvCrt_v("GN_GPS_Update:  ERROR:  Called while in PowerOff !");
  if (*(_BYTE *)(*((_QWORD *)&xmmword_254011288 + 1) + 46))
  {
    if ((_DWORD)g_GN_GPS_Data_p_list)
    {
      if ((_DWORD)g_GN_GPS_Data_p_list == 7 || (_DWORD)g_GN_GPS_Data_p_list == 4)
      {
        *(_DWORD *)(v0 + 1076) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                  * (double)mach_continuous_time());
        GNSS_Write_GNB_Ctrl((char *)xmmword_2540113A8);
        GNSS_Event_Log_Ctl(*((uint64_t *)&xmmword_2540113B8 + 1));
        LCD_SA_Debug_Ctl(*((uint64_t *)&xmmword_2540113C8 + 1));
        *(_DWORD *)(v0 + 1080) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                  * (double)mach_continuous_time());
        return EvLog_v("Sensor in Sleep or Coma Mode: OS Time Waypoints, %u %d %d");
      }
      goto LABEL_22;
    }
LABEL_20:
    if (*(_DWORD *)(*((_QWORD *)&xmmword_254011288 + 1) + 944) != -1169279272)
      EvCrt_v("GN_GPS_Update:  WARNING:  Called with unexpected GNSS_INVALID_EXE_STATE");
    goto LABEL_22;
  }
  if (!(_DWORD)g_GN_GPS_Data_p_list)
    goto LABEL_20;
  if ((_DWORD)g_GN_GPS_Data_p_list == 7 || (_DWORD)g_GN_GPS_Data_p_list == 4)
    return EvCrt_v("GN_GPS_Update:  ERROR:  Called while in Sleep/Coma !");
LABEL_22:
  G5K_Read_GNB_Meas(*((char ***)&xmmword_254011398 + 1));
  *(_DWORD *)(v0 + 1084) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
  G5K_ME_Decode_Meas(*((unsigned __int8 ***)&xmmword_254011398 + 1), (char *)xmmword_2540112E8);
  v7 = (_DWORD *)xmmword_2540112E8;
  *(_DWORD *)(xmmword_2540112E8 + 508) = 0;
  if ((_DWORD)g_GN_GPS_Data_p_list == 5 || (_DWORD)g_GN_GPS_Data_p_list == 8)
  {
    v8 = v7[126];
    v9 = *((_QWORD *)&xmmword_254011288 + 1);
    if (v8)
      v7[127] = *(_DWORD *)(*((_QWORD *)&xmmword_254011288 + 1) + 948) + v8;
    v7[134] = 0;
    if (!*(_DWORD *)(v9 + 1144))
    {
      if (*(_BYTE *)(v9 + 1135))
      {
        *(_BYTE *)(v9 + 1135) = 0;
        *(_DWORD *)(v9 + 1144) = *(_DWORD *)(v9 + 1148);
      }
      else
      {
        v10 = mach_continuous_time();
        v9 = *((_QWORD *)&xmmword_254011288 + 1);
        *(_DWORD *)(*((_QWORD *)&xmmword_254011288 + 1) + 1144) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                                                     * (double)v10);
        v7 = (_DWORD *)xmmword_2540112E8;
      }
    }
  }
  else
  {
    v9 = *((_QWORD *)&xmmword_254011288 + 1);
  }
  v60 = 0;
  if (!G5K_ME_Poll_New_Meas((uint64_t)v7, v9, *((_DWORD **)&g_GN_GPS_Data_p_list + 1), qword_254011258, (_DWORD *)qword_254011260, &v60))
  {
    if (*(_QWORD *)(xmmword_2540113A8 + 8) != *(_QWORD *)xmmword_2540113A8)
      GNSS_Write_GNB_Ctrl((char *)xmmword_2540113A8);
    if (*(_QWORD *)(*((_QWORD *)&xmmword_2540113A8 + 1) + 8) != **((_QWORD **)&xmmword_2540113A8 + 1))
      GNSS_Write_NMEA(*((_QWORD **)&xmmword_2540113A8 + 1));
    if (*(_QWORD *)(xmmword_2540113B8 + 8) != *(_QWORD *)xmmword_2540113B8)
      GNSS_Nav_Debug_Ctl(xmmword_2540113B8);
    if (*(_QWORD *)(*((_QWORD *)&xmmword_2540113B8 + 1) + 8) != **((_QWORD **)&xmmword_2540113B8 + 1))
      GNSS_Event_Log_Ctl(*((uint64_t *)&xmmword_2540113B8 + 1));
    if (*(_QWORD *)(*((_QWORD *)&xmmword_2540113C8 + 1) + 8) != **((_QWORD **)&xmmword_2540113C8 + 1))
      LCD_SA_Debug_Ctl(*((uint64_t *)&xmmword_2540113C8 + 1));
    ++_MergedGlobals_1;
    v15 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v16 = (unint64_t)v15;
    v17 = *(_DWORD *)(qword_254011258 + 4);
    v18 = (unint64_t)v15 - v17;
    _MergedGlobals_1 = 0;
    v19 = *(_DWORD *)(*((_QWORD *)&xmmword_254011288 + 1) + 948);
    if (g_GN_GPS_Data_p_list <= 8 && ((1 << g_GN_GPS_Data_p_list) & 0x124) != 0)
    {
      v20 = *(_DWORD *)(xmmword_2540112E8 + 496);
      if (v20 && (int)v16 - v20 < 501)
        goto LABEL_69;
      if (v18 >= 5 * v19)
      {
        EvLog_v("GN_GPS_Hard_Reset_GNB:  %d > 5*Fix_Int gap!, >>>POWEROFF_WAKE_UP  (%u)", (unint64_t)v15 - v17, v17);
        LODWORD(g_GN_GPS_Data_p_list) = 2;
        GN_GPS_Hard_Reset_GNB();
        *(_DWORD *)(qword_254011258 + 4) = v16;
        v37 = xmmword_2540112E8;
        *(_DWORD *)(xmmword_2540112E8 + 476) = 0;
        *(_WORD *)(v37 + 482) = 0;
        goto LABEL_69;
      }
      EvLog_v("No valid comms :  %u  %d", v17, (unint64_t)v15 - v17);
      v21 = (char **)xmmword_2540113A8;
    }
    else
    {
      if (v18 < 3 * v19)
      {
LABEL_69:
        GNSS_Event_Log_Ctl(*((uint64_t *)&xmmword_2540113B8 + 1));
        return (char *)GNSS_GNB_Debug_Ctl(xmmword_2540113C8);
      }
      EvLog_v("GN_GPS_Update:  Lost BB Coms for %d > 3*Fix_Int, >>>SLEEP_WAKE_UP  (%u)", (unint64_t)v15 - v17, v17);
      LODWORD(g_GN_GPS_Data_p_list) = 8;
      v21 = (char **)xmmword_2540113A8;
    }
    G5K_ME_Send_WakeUp(v21);
    goto LABEL_69;
  }
  v11 = *((_QWORD *)&xmmword_254011388 + 1);
  v12 = xmmword_254011288;
  *(_BYTE *)(xmmword_254011288 + 412) = 0;
  *(_OWORD *)(v12 + 364) = 0u;
  *(_OWORD *)(v12 + 380) = 0u;
  *(_OWORD *)(v12 + 396) = 0u;
  GNSS_GNB_Debug_Ctl(xmmword_2540113C8);
  if ((_DWORD)g_GN_GPS_Data_p_list != 11)
    EvCrt_d("GN_GPS_Update: GNSS_Exe_State = ", g_GN_GPS_Data_p_list);
  if (v60)
  {
    *(_BYTE *)(v11 + 8) = 0;
    *(_WORD *)(v11 + 10) = 0;
    *(_DWORD *)(v11 + 2) = 0;
    *(_BYTE *)(v11 + 6) = 0;
    EvLog("GN_GPS_Update:  Cleared NA data because ME_Reset_Detected");
    v13 = xmmword_2540112E8;
    if (v60)
    {
      v14 = 1;
LABEL_58:
      LODWORD(g_GN_GPS_Data_p_list) = 3;
      *(_WORD *)(v13 + 394) = 0;
      *(_DWORD *)(v13 + 536) = 0;
      v25 = *((_QWORD *)&xmmword_254011288 + 1);
      *(_DWORD *)(*((_QWORD *)&xmmword_254011288 + 1) + 1284) = 3;
      *(_BYTE *)(v25 + 1280) = v14;
      goto LABEL_59;
    }
  }
  else
  {
    v13 = xmmword_2540112E8;
    v22 = *(_DWORD *)(xmmword_2540112E8 + 512);
    v23 = *(_DWORD *)(xmmword_2540112E8 + 536);
    if (v22 + 10 < v23 && v22 + 10000 < v23)
      return EvLog_v("GN_GPS_Update:  Warning - possible throughput problem  %u  %u  %u  %u");
  }
  v24 = g_GN_GPS_Data_p_list;
  if ((_DWORD)g_GN_GPS_Data_p_list == 2)
  {
    v14 = 0;
    goto LABEL_58;
  }
  v36 = *(_DWORD *)(v13 + 460);
  if ((_DWORD)g_GN_GPS_Data_p_list == 5 || v36)
  {
    if ((_DWORD)g_GN_GPS_Data_p_list != 5)
    {
      EvLog_v("GN_GPS_Update:  Unexpected Coma_Ticks (%d) > 0 for GNSS_Exe_State (%d)", v36, (_DWORD)g_GN_GPS_Data_p_list);
      DbgLog_v(1, "GN_GPS_Update:  Unexpected Coma_Ticks (%d) > 0 for GNSS_Exe_State (%d)", *(_DWORD *)(xmmword_2540112E8 + 460), (_DWORD)g_GN_GPS_Data_p_list);
      v36 = *(_DWORD *)(xmmword_2540112E8 + 460);
    }
    if (!v36)
    {
      EvCrt_v("GN_GPS_Update: WARNING Coma Ticks = 0 even though Coma wakeup %d", (_DWORD)g_GN_GPS_Data_p_list);
      DbgLog_v(1, "GN_GPS_Update: WARNING Coma Ticks = 0 even though Coma wakeup %d", (_DWORD)g_GN_GPS_Data_p_list);
    }
    v24 = 6;
    goto LABEL_75;
  }
  if ((_DWORD)g_GN_GPS_Data_p_list == 8)
  {
    v24 = 9;
LABEL_75:
    LODWORD(g_GN_GPS_Data_p_list) = v24;
    v38 = *((_QWORD *)&xmmword_254011288 + 1);
    *(_DWORD *)(*((_QWORD *)&xmmword_254011288 + 1) + 1284) = v24;
    *(_BYTE *)(v38 + 1280) = v60;
    goto LABEL_76;
  }
  v25 = *((_QWORD *)&xmmword_254011288 + 1);
  *(_DWORD *)(*((_QWORD *)&xmmword_254011288 + 1) + 1284) = g_GN_GPS_Data_p_list;
  *(_BYTE *)(v25 + 1280) = 0;
  if (v24 == 3)
  {
LABEL_59:
    if (*(_DWORD *)(v25 + 944) == -1169279272)
    {
      EvLog("GN_GPS_Update: Starting after initialisation");
      GNSS_Mark_Restart(2);
      v26 = *(_WORD *)(xmmword_2540112E8 + 472);
      v27 = *(_DWORD *)(xmmword_2540112E8 + 476);
      v28 = *(_DWORD *)(xmmword_2540112E8 + 448);
      *(_DWORD *)(*((_QWORD *)&xmmword_254011288 + 1) + 1064) = v28;
      v29 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      v30 = *((_QWORD *)&xmmword_254011288 + 1);
      *(_DWORD *)(*((_QWORD *)&xmmword_254011288 + 1) + 1068) = (unint64_t)v29;
      *(_DWORD *)(v30 + 1116) = (unint64_t)v29;
      *(_DWORD *)(qword_254011278 + 100) = v28;
      GNSS_HL_System_Start_Up((uint64_t)&g_GN_GPS_Data_p_list, 0, v31, v32, v33, v34);
      v35 = xmmword_2540112E8;
      *(_WORD *)(xmmword_2540112E8 + 472) = v26;
      *(_DWORD *)(v35 + 476) = v27;
      API_Set_Config(*((uint64_t *)&xmmword_254011368 + 1));
      LODWORD(g_GN_GPS_Data_p_list) = 11;
      goto LABEL_85;
    }
    goto LABEL_84;
  }
LABEL_76:
  if (v24 == 6 || v24 == 9)
  {
    API_Set_Config(*((uint64_t *)&xmmword_254011368 + 1));
    GNSS_HL_System_Re_Start((uint64_t)&g_GN_GPS_Data_p_list);
    g_GN_GNSS_Nav_Debug_Port = 1;
    ++word_2540216C8;
    GNSS_Mark_Restart(3);
    v39 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v40 = *((_QWORD *)&xmmword_254011288 + 1);
    *(_DWORD *)(*((_QWORD *)&xmmword_254011288 + 1) + 1068) = v39;
    *(_DWORD *)(v40 + 1116) = v39;
    goto LABEL_85;
  }
  if (v24 == 11)
  {
    GNSS_Nav_Debug_InitWrite((uint64_t)&g_GN_GPS_Data_p_list);
    API_Set_Config(*((uint64_t *)&xmmword_254011368 + 1));
    GNSS_HL_System_Run_Update((uint64_t)&g_GN_GPS_Data_p_list);
    goto LABEL_85;
  }
  EvLog_d("GN_GPS_Update: Unexpected GNSS_Exe_State state - restarting ", v24);
LABEL_84:
  GNSS_Starting_NotInitialised();
LABEL_85:
  *(_DWORD *)(*((_QWORD *)&xmmword_254011288 + 1) + 944) = 0;
  result = (char *)mach_continuous_time();
  *(_DWORD *)(v0 + 1096) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)(unint64_t)result);
  if ((_DWORD)g_GN_GPS_Data_p_list == 11)
  {
    G5K_ME_Send_Ctrl(xmmword_2540113A8, xmmword_2540112E8, *((uint64_t *)&xmmword_254011288 + 1), qword_254011270, xmmword_254011288);
    if (!*(_DWORD *)(*((_QWORD *)&xmmword_254011288 + 1) + 1116))
      goto LABEL_96;
    v42 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
    v43 = (unint64_t)v42;
    v44 = *(unsigned int *)(*((_QWORD *)&xmmword_254011288 + 1) + 1116);
    v45 = (unint64_t)v42 - v44;
    if ((unint64_t)v42 < v44)
    {
      EvCrt_nd("GN_GPS_Update: Detected OS ms Time has gone backwards", 2, v41, (unint64_t)v42, v44);
      *(_DWORD *)(*((_QWORD *)&xmmword_254011288 + 1) + 1116) = 0;
      goto LABEL_96;
    }
    v46 = v45 / 1000;
    if (v45 / 1000 >= (uint64_t)*(unsigned int *)(*((_QWORD *)&xmmword_254011288 + 1) + 1120))
    {
      v47 = *(_DWORD *)(*((_QWORD *)&xmmword_254011288 + 1) + 1128);
      if (v47)
      {
        v48 = ((int)v43 - v47) / 1000;
        if (v48 >= v46 && v48 < (uint64_t)*(unsigned int *)(*((_QWORD *)&xmmword_254011288 + 1) + 1124))
          goto LABEL_96;
      }
      else
      {
        v48 = 0;
      }
      GncP16_34HandleRestartAcq();
      v49 = *((_QWORD *)&xmmword_254011288 + 1);
      *(_DWORD *)(*((_QWORD *)&xmmword_254011288 + 1) + 1128) = v43;
      *(_DWORD *)(v49 + 1116) = 0;
      EvCrt_v("GN_GPS_Restart_Acquisition(): API call due to No Fix within %d s; Time since last call %d s", v46, v48);
    }
LABEL_96:
    result = (char *)mach_continuous_time();
    *(_DWORD *)(v0 + 1100) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                              * (double)(unint64_t)result);
    if (*(double *)(*(_QWORD *)(p_api + 88) + 344) <= 600.0)
    {
      if (API_Get_Nav_Data(xmmword_254011378, *((uint64_t *)&xmmword_254011378 + 1), v50, v51, v52, v53))
      {
        v57 = vqtbl1q_s8((int8x16_t)vmovl_u8(*(uint8x8_t *)(v0 + 1012)), (int8x16_t)xmmword_21E7FA1E0);
        v58 = *(unsigned __int8 *)(v0 + 1020);
        v59 = *(unsigned __int8 *)(v0 + 1021);
        NMEA_Encode(*((char ***)&xmmword_2540113A8 + 1), v57.i16, xmmword_254011378, *((uint64_t *)&xmmword_254011378 + 1));
        GNSS_Write_NMEA(*((_QWORD **)&xmmword_2540113A8 + 1));
        *(_DWORD *)(v0 + 1104) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                  * (double)mach_continuous_time());
        v54 = *(_DWORD *)(v0 + 1052);
        if (v54)
        {
          v55 = *(_DWORD *)(v0 + 948) + *(_DWORD *)(v0 + 1056);
          *(_DWORD *)(v0 + 1056) = v55;
          if (v55 >= v54)
          {
            v56 = (unsigned __int8 *)xmmword_254011388;
            if (p_NV_Sect)
              *(_BYTE *)(p_NV_Sect + 193) = -1;
            if (g_GncPStateInfo != 8)
              GncP07_08WriteNVStore(0x59A0uLL, v56);
            EvLog("GN_GPS_Write_NV_Store:  1");
            *(_DWORD *)(v0 + 1056) = 0;
          }
        }
        *(_DWORD *)(v0 + 1108) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                  * (double)mach_continuous_time());
      }
      GNSS_Nav_Debug_Screens(&g_GN_GPS_Data_p_list);
      GNSS_Event_Log_Ctl(*((uint64_t *)&xmmword_2540113B8 + 1));
      GNSS_GNB_Debug_Ctl(xmmword_2540113C8);
      result = (char *)mach_continuous_time();
      *(_DWORD *)(v0 + 1112) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                * (double)(unint64_t)result);
    }
  }
  if ((unsigned __int16)g_Enable_Event_Log >= 3u)
    return EvLog_v("OS Time Waypoints: %u %u %d %d %d %d %d %d %d %d %d %d %d", *(unsigned int *)xmmword_254011378, *(unsigned int *)(xmmword_2540112E8 + 468), (*(_DWORD *)(v0 + 1072) - *(_DWORD *)(xmmword_2540112E8 + 468)));
  return result;
}

BOOL GNSS_Starting_NotInitialised(void)
{
  __int16 v0;
  int v1;
  int v2;
  __int16 v3;
  char v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;

  EvLog("GN_GPS_Update: Starting from Power Off but without having been initialised");
  g_GN_GNSS_Nav_Debug_Port = 1;
  ++word_2540216C6;
  word_2540216C8 = 0;
  GNSS_Mark_Restart(1);
  v0 = *(_WORD *)(xmmword_2540112E8 + 472);
  v1 = *(_DWORD *)(xmmword_2540112E8 + 476);
  v2 = *(_DWORD *)(xmmword_2540112E8 + 448);
  v3 = *(_WORD *)(*((_QWORD *)&xmmword_254011288 + 1) + 1048);
  v4 = *(_BYTE *)(*((_QWORD *)&xmmword_254011288 + 1) + 1280);
  v5 = *(_DWORD *)(*((_QWORD *)&xmmword_254011288 + 1) + 1284);
  v6 = *(_BYTE *)(qword_254011280 + 39302);
  v7 = *(_QWORD *)(*((_QWORD *)&xmmword_254011288 + 1) + 1144);
  GNSS_HL_System_Start_Up((uint64_t)&g_GN_GPS_Data_p_list, 1, v8, v9, v10, v11);
  v12 = xmmword_2540112E8;
  *(_WORD *)(xmmword_2540112E8 + 472) = v0;
  *(_DWORD *)(v12 + 476) = v1;
  v13 = *((_QWORD *)&xmmword_254011288 + 1);
  *(_WORD *)(*((_QWORD *)&xmmword_254011288 + 1) + 1048) = v3;
  *(_QWORD *)(v13 + 1144) = v7;
  *(_BYTE *)(v13 + 1280) = v4;
  *(_DWORD *)(v13 + 1284) = v5;
  *(_BYTE *)(qword_254011280 + 39302) = v6;
  *(_DWORD *)(v13 + 1064) = v2;
  v14 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  v15 = *((_QWORD *)&xmmword_254011288 + 1);
  *(_DWORD *)(*((_QWORD *)&xmmword_254011288 + 1) + 1068) = (unint64_t)v14;
  *(_DWORD *)(v15 + 1116) = (unint64_t)v14;
  return API_Set_Config(*((uint64_t *)&xmmword_254011368 + 1));
}

uint64_t GN_GPS_Shutdown(void)
{
  unsigned __int8 *v0;
  uint64_t v1;

  EvLog("GN_GPS_Shutdown: ");
  if (g_GN_GPS_Data_p_list > 0xB)
  {
    EvCrt_Illegal_Default("GN_GPS_Shutdown", 0x4C4u);
  }
  else if (((1 << g_GN_GPS_Data_p_list) & 0xF6D) == 0)
  {
    EvLog_d("GN_GPS_Shutdown: GNSS already Idle or Off ", g_GN_GPS_Data_p_list);
    return GNSS_Event_Log_Ctl(*((uint64_t *)&xmmword_2540113B8 + 1));
  }
  G5K_ME_Send_Sleep((char *)xmmword_2540113A8, (char **)xmmword_2540113C8, 0, 0xFFFFu, *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 1134));
  EvLog("GN_GPS_Shutdown: Send ME to Coma ");
  *(_DWORD *)(*((_QWORD *)&xmmword_254011288 + 1) + 1056) = 0;
  *(_DWORD *)(xmmword_2540112E8 + 496) = 0;
  LODWORD(g_GN_GPS_Data_p_list) = 4;
  v0 = (unsigned __int8 *)xmmword_254011388;
  if (p_NV_Sect)
    *(_BYTE *)(p_NV_Sect + 193) = -1;
  if (g_GncPStateInfo != 8)
  {
    GncP07_08WriteNVStore(0x59A0uLL, v0);
    v0 = (unsigned __int8 *)xmmword_254011388;
  }
  Debug_Log_NonVol(1, (uint64_t)v0);
  EvLog_nd("GN_GPS_Shutdown: GN_GPS_Write_NV_Store ", 4, v1, *(unsigned int *)(xmmword_254011388 + 4), *(unsigned int *)(xmmword_254011388 + 22936), 22944, 14);
  return GNSS_Event_Log_Ctl(*((uint64_t *)&xmmword_2540113B8 + 1));
}

uint64_t GN_GPS_WakeUp(void)
{
  uint64_t i;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v9[3] = *MEMORY[0x24BDAC8D0];
  EvCrt_v("GN_GPS_WakeUp: ");
  *(_DWORD *)(xmmword_2540112E8 + 504) = *(_DWORD *)(xmmword_2540112E8 + 448);
  G5K_ME_Flush_Data();
  if ((_DWORD)g_GN_GPS_Data_p_list != 11)
  {
    *(_DWORD *)qword_254011258 = 0;
    *(_DWORD *)(qword_254011258 + 4) = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation
                                                        * (double)mach_continuous_time());
    for (i = 2720; i != 4448; i += 36)
    {
      v1 = qword_254011258 + i;
      *(_BYTE *)(v1 + 32) = 0;
      *(_OWORD *)v1 = 0uLL;
      *(_OWORD *)(v1 + 16) = 0uLL;
    }
    v2 = *((_QWORD *)&xmmword_254011398 + 1);
    v3 = *(_QWORD *)(*((_QWORD *)&xmmword_254011398 + 1) + 16);
    **((_QWORD **)&xmmword_254011398 + 1) = v3;
    *(_QWORD *)(v2 + 8) = v3;
    G5K_Read_GNB_Meas((char **)v2);
    v4 = **((_QWORD **)&xmmword_254011398 + 1) - *(_QWORD *)(*((_QWORD *)&xmmword_254011398 + 1) + 8);
    if (v4)
    {
      EvLog_v("%s: Flushed bytes  %d", "GN_GPS_WakeUp", v4);
      v5 = *((_QWORD *)&xmmword_254011398 + 1);
      v6 = *(_QWORD *)(*((_QWORD *)&xmmword_254011398 + 1) + 16);
      **((_QWORD **)&xmmword_254011398 + 1) = v6;
      *(_QWORD *)(v5 + 8) = v6;
    }
  }
  G5K_ME_Send_WakeUp((char **)xmmword_2540113A8);
  EvLog_v("%s:  Read NV_Store NO Data", "GN_GPS_WakeUp");
  Debug_Log_NonVol(1, xmmword_254011388);
  memset(v9, 0, 24);
  Debug_Log_ApxTime((unsigned __int16 *)v9);
  _MergedGlobals_1 = 0;
  if ((g_GN_GPS_Data_p_list - 4) < 3)
  {
    LODWORD(g_GN_GPS_Data_p_list) = 5;
    if (*(int *)qword_254011278 >= 11)
      *(_DWORD *)qword_254011278 = 10;
  }
  else if ((g_GN_GPS_Data_p_list - 7) > 2)
  {
    LODWORD(g_GN_GPS_Data_p_list) = 2;
    v7 = qword_254011278;
    *(_DWORD *)qword_254011278 = 0;
    *(_BYTE *)(v7 + 5) = 0;
  }
  else
  {
    LODWORD(g_GN_GPS_Data_p_list) = 8;
  }
  *(_WORD *)(*((_QWORD *)&xmmword_254011388 + 1) + 5) = 0;
  return GNSS_Event_Log_Ctl(*((uint64_t *)&xmmword_2540113B8 + 1));
}

uint64_t GN_GPS_Sleep(unsigned int a1, unsigned int a2, uint64_t a3)
{
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = a1;
  EvCrt_nd("GN_GPS_Sleep: ", 2, a3, a1, a2);
  if (v4 >= 0x3D)
  {
    v4 = 60;
    EvLog_v("GN_GPS_Sleep:  SleepModeTimeOut limited to %d s", 60);
  }
  if (g_GN_GPS_Data_p_list > 0xB)
  {
LABEL_14:
    LODWORD(g_GN_GPS_Data_p_list) = 1;
    EvCrt_Illegal_Default("GN_GPS_Sleep", 0x5F3u);
    goto LABEL_15;
  }
  if (((1 << g_GN_GPS_Data_p_list) & 0xF80) == 0)
  {
    if (((1 << g_GN_GPS_Data_p_list) & 0xE) != 0)
    {
      v5 = 1;
      goto LABEL_11;
    }
    if (((1 << g_GN_GPS_Data_p_list) & 0x70) != 0)
    {
      v5 = 4;
LABEL_11:
      LODWORD(g_GN_GPS_Data_p_list) = v5;
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (v4)
    v6 = 7;
  else
    v6 = 4;
  LODWORD(g_GN_GPS_Data_p_list) = v6;
  DWORD1(g_GN_GPS_Data_p_list) = DWORD1(g_GN_GPS_Data_p_list) != 0;
LABEL_15:
  G5K_ME_Send_Sleep((char *)xmmword_2540113A8, (char **)xmmword_2540113C8, v4, a2, *(unsigned __int8 *)(*((_QWORD *)&xmmword_254011288 + 1) + 1134));
  v8 = xmmword_254011388;
  if (p_NV_Sect)
    *(_BYTE *)(p_NV_Sect + 193) = -1;
  if (g_GncPStateInfo != 8)
  {
    GncP07_08WriteNVStore(0x59A0uLL, (unsigned __int8 *)v8);
    v8 = xmmword_254011388;
  }
  *(_DWORD *)(*((_QWORD *)&xmmword_254011288 + 1) + 1056) = 0;
  *(_DWORD *)(xmmword_2540112E8 + 496) = 0;
  EvLog_nd("GN_GPS_Sleep:  GN_GPS_Write_NV_Store ", 4, v7, *(unsigned int *)(v8 + 4), *(unsigned int *)(v8 + 22936), 22944, 14);
  if (*(_QWORD *)(*((_QWORD *)&xmmword_2540113A8 + 1) + 8) != **((_QWORD **)&xmmword_2540113A8 + 1))
    GNSS_Write_NMEA(*((_QWORD **)&xmmword_2540113A8 + 1));
  if (*(_QWORD *)(*((_QWORD *)&xmmword_2540113B8 + 1) + 8) != **((_QWORD **)&xmmword_2540113B8 + 1))
    GNSS_Event_Log_Ctl(*((uint64_t *)&xmmword_2540113B8 + 1));
  if (*(_QWORD *)(xmmword_2540113B8 + 8) != *(_QWORD *)xmmword_2540113B8)
    GNSS_Nav_Debug_Ctl(xmmword_2540113B8);
  if (*(_QWORD *)(xmmword_2540113A8 + 8) != *(_QWORD *)xmmword_2540113A8)
    GNSS_Write_GNB_Ctrl((char *)xmmword_2540113A8);
  result = *((_QWORD *)&xmmword_2540113C8 + 1);
  if (*(_QWORD *)(*((_QWORD *)&xmmword_2540113C8 + 1) + 8) != **((_QWORD **)&xmmword_2540113C8 + 1))
    return LCD_SA_Debug_Ctl(*((uint64_t *)&xmmword_2540113C8 + 1));
  return result;
}

_QWORD *EvLog_GN_GNSS_Config(_QWORD *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a2[8] * 1000000.0;
  v3 = -0.5;
  if (v2 <= 0.0)
    v4 = -0.5;
  else
    v4 = 0.5;
  v5 = v2 + v4;
  if (v5 <= 2147483650.0)
  {
    if (v5 >= -2147483650.0)
      v6 = (int)v5;
    else
      v6 = 0x80000000;
  }
  else
  {
    v6 = 0x7FFFFFFFLL;
  }
  v7 = a2[9] * 1000000.0;
  if (v7 > 0.0)
    v3 = 0.5;
  v8 = v7 + v3;
  if (v8 <= 2147483650.0)
  {
    if (v8 >= -2147483650.0)
      v9 = (int)v8;
    else
      v9 = 0x80000000;
  }
  else
  {
    v9 = 0x7FFFFFFFLL;
  }
  v11 = a2[10];
  v12 = -0.5;
  if (v11 > 0.0)
    v12 = 0.5;
  v13 = v11 + v12;
  if (v13 <= 2147483650.0)
  {
    if (v13 >= -2147483650.0)
      v17 = (int)v13;
    else
      v17 = 0x80000000;
  }
  else
  {
    v17 = 0x7FFFFFFFLL;
  }
  v10 = *((unsigned __int8 *)a2 + 40);
  v14 = *((unsigned __int16 *)a2 + 27);
  v15 = *((unsigned __int16 *)a2 + 28);
  v16 = *((__int16 *)a2 + 29);
  return EvLog_nd(a1, 49, v14, *(unsigned int *)a2, *((unsigned int *)a2 + 1), *((unsigned int *)a2 + 2), *((unsigned int *)a2 + 3), *((unsigned __int8 *)a2 + 16), *((unsigned __int8 *)a2 + 17), *((unsigned __int8 *)a2 + 18), *((unsigned __int8 *)a2 + 19), *((unsigned __int8 *)a2 + 20), *((unsigned __int8 *)a2 + 21), *((unsigned __int8 *)a2 + 22), *((unsigned __int8 *)a2 + 23), *((unsigned __int8 *)a2 + 24), *((unsigned __int8 *)a2 + 25), *((unsigned __int8 *)a2 + 26), *((unsigned __int8 *)a2 + 27),
           *((unsigned __int8 *)a2 + 28),
           *((unsigned __int8 *)a2 + 29),
           *((unsigned __int8 *)a2 + 30),
           *((unsigned __int8 *)a2 + 31),
           *((unsigned __int8 *)a2 + 32),
           *((unsigned __int16 *)a2 + 17),
           *((unsigned __int8 *)a2 + 36),
           *((unsigned __int8 *)a2 + 37),
           *((unsigned __int8 *)a2 + 38),
           *((unsigned __int8 *)a2 + 39),
           v10,
           *((unsigned __int8 *)a2 + 41),
           *((unsigned __int8 *)a2 + 42),
           *((unsigned __int8 *)a2 + 43),
           *((unsigned __int8 *)a2 + 44),
           *((unsigned __int8 *)a2 + 45),
           *((unsigned __int8 *)a2 + 46),
           *((unsigned __int16 *)a2 + 24),
           *((unsigned __int16 *)a2 + 25),
           *((unsigned __int16 *)a2 + 26),
           v14,
           v15,
           v16,
           *((unsigned __int16 *)a2 + 30),
           *((unsigned __int16 *)a2 + 31),
           v6,
           v9,
           v17,
           *((unsigned int *)a2 + 22),
           *((unsigned int *)a2 + 23),
           *((unsigned __int8 *)a2 + 96),
           *((unsigned __int8 *)a2 + 97),
           *((unsigned __int8 *)a2 + 98));
}

uint64_t GN_GPS_Set_Config(uint64_t a1)
{
  __int16 v2;
  double v3;
  double v4;
  double v5;

  if (!a1)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: No changes applied");
    return 0;
  }
  v2 = g_Enable_Event_Log;
  g_Enable_Event_Log = -1;
  EvLog_GN_GNSS_Config("GN_GPS_Set_Config: ", (double *)a1);
  if (*(int *)a1 >= 3)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: SensMode = %d >%d, Out of range!");
    return 0;
  }
  if (*(int *)(a1 + 4) >= 3)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: ColdTTFF = %d >%d, Out of range!");
    return 0;
  }
  if (*(int *)(a1 + 8) >= 3)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: PowerPerf = %d >%d, Out of range!");
    return 0;
  }
  if (*(int *)(a1 + 12) > 3)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: AntSel = %d >%d, Out of range!");
    return 0;
  }
  if (*(unsigned __int16 *)(a1 + 62) > 0x2000u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: Birth_GPS_WeekNo = %d > %d, Out of range!");
    return 0;
  }
  if (*(unsigned __int16 *)(a1 + 34) <= 0x63u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: FixInterval = %d <100, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 36) >= 0x79u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: GPGLL_Rate = %d >120, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 37) >= 0x79u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: GPGGA_Rate = %d >120, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 38) >= 0x79u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: GPGSA_Rate = %d >120, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 39) >= 0x79u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: GPGST_Rate = %d >120, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 40) >= 0x79u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: GPGSV_Rate = %d >120, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 41) >= 0x79u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: GPRMC_Rate = %d >120, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 42) >= 0x79u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: GPVTG_Rate = %d >120, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 43) >= 0x79u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: GPZCD_Rate = %d >120, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 44) >= 0x79u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: GPZDA_Rate = %d >120, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 45) >= 0x79u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: PDBG__Rate = %d >120, Out of range!");
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 46) == 255)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: ForceCold_Timeout = %d ==255, Out of range!");
    return 0;
  }
  if (*(unsigned __int16 *)(a1 + 60) >= 0x2000u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: Earliest_GPS_WeekNo = %d > 8191, Out of range!");
    return 0;
  }
  v3 = *(double *)(a1 + 64);
  if (v3 < -90.0 || v3 > 90.0)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: Reference_LLH[0] = %g <-90.0 or >90.0, Out of range!");
    return 0;
  }
  v4 = *(double *)(a1 + 72);
  if (v4 < -180.0 || v4 > 360.0)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: Reference_LLH[1] = %g <-180.0 or >360.0, Out of range!");
    return 0;
  }
  v5 = *(double *)(a1 + 80);
  if (v5 < -1000.0 || v5 > 20000.0)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: Reference_LLH[2] = %g <-1000.0 or >20000.0, Out of range!");
    return 0;
  }
  if (*(_DWORD *)(a1 + 88) >= 0xE11u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: NoFixTime_to_RestartAcq_s = %d >SECS_IN_HOUR, Out of range!");
    return 0;
  }
  if (*(_DWORD *)(a1 + 92) >= 0xE11u)
  {
    EvCrt_v("GN_GPS_Set_Config: FAILED: ReAcq_Call_Interval_s = %d >SECS_IN_HOUR, Out of range!");
    return 0;
  }
  if (!*(_BYTE *)(a1 + 18))
    EvCrt_v("GN_GPS_Set_Config: WARNING: GPS has been disabled");
  if (!*(_BYTE *)(a1 + 19))
    EvCrt_v("GN_GPS_Set_Config: WARNING: Glonass has been disabled");
  if (!*(_BYTE *)(a1 + 22))
    EvCrt_v("GN_GPS_Set_Config: WARNING: BeiDou has been disabled");
  if (!*(_BYTE *)(a1 + 23))
    EvCrt_v("GN_GPS_Set_Config: WARNING: Galileo has been disabled");
  if (!*(_BYTE *)(a1 + 20))
    EvCrt_v("GN_GPS_Set_Config: WARNING: QZSS has been disabled");
  if (!*(_BYTE *)(a1 + 21))
    EvCrt_v("GN_GPS_Set_Config: WARNING: SBAS has been disabled");
  if (!*(_WORD *)(a1 + 50))
    EvCrt_v("GN_GPS_Set_Config: WARNING: Nav Debug has been disabled");
  if (!*(_WORD *)(a1 + 52))
    EvCrt_v("GN_GPS_Set_Config: WARNING: GNB Debug has been disabled");
  if (!*(_WORD *)(a1 + 54))
    EvCrt_v("GN_GPS_Set_Config: WARNING: Event Log has been disabled");
  if (!*(_WORD *)(a1 + 56))
    EvCrt_v("GN_GPS_Set_Config: WARNING: LCD Debug Log has been disabled");
  if (!*(_BYTE *)(a1 + 96))
    EvCrt_v("GN_GPS_Set_Config: WARNING: Avg Doppler Usage has been disabled");
  if (*(_BYTE *)(a1 + 97))
    EvCrt_v("GN_GPS_Set_Config: WARNING: Broadcast Navigation Message Data Use disabled to test XOF Data");
  if (!*(_BYTE *)(a1 + 98))
    EvLog_v("GN_GPS_Set_Config: INFO: Sending {cS message to ME on Sleep has been disabled");
  g_Enable_Event_Log = v2;
  if (API_Set_Config(a1))
    API_Query_Config(*((uint64_t *)&xmmword_254011368 + 1));
  else
    EvCrt_v("GN_GPS_Set_Config: API_Set_Config() FAILED");
  GNSS_Event_Log_Ctl(*((uint64_t *)&xmmword_2540113B8 + 1));
  return 1;
}

uint64_t GN_GPS_Set_FixInterval(unsigned int a1)
{
  uint64_t result;
  uint64_t v2;
  int v3;

  if (a1 > 0x63)
  {
    result = API_Set_FixInterval(a1);
    if ((_DWORD)result)
    {
      v2 = *(_QWORD *)(p_api + 72);
      v3 = *(_DWORD *)(v2 + 952);
      if (!v3)
        v3 = *(_DWORD *)(v2 + 948);
      *(_WORD *)(*((_QWORD *)&xmmword_254011368 + 1) + 34) = v3;
      return 1;
    }
  }
  else
  {
    EvCrt_v("GN_GPS_Set_FixInterval:  FAILED:  FixInterval = %d  < 100, Out of range !", a1);
    return 0;
  }
  return result;
}

uint64_t GN_GPS_Set_CrossCorr_Params(double *a1)
{
  BOOL v2;
  double v3;
  BOOL v4;
  double v5;
  BOOL v6;
  double v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t result;
  double v13[2];

  v13[1] = *(double *)MEMORY[0x24BDAC8D0];
  v2 = *a1 >= 6.0 && *a1 <= 60.0;
  if (v2 || (v13[0] = 0.0, R8_EQ(a1, v13)))
  {
    v3 = a1[1];
    v4 = v3 >= 6.0 && v3 <= 60.0;
    if (v4 || (v13[0] = 0.0, R8_EQ(a1 + 1, v13)))
    {
      v5 = a1[2];
      v6 = v5 >= 6.0 && v5 <= 60.0;
      if (v6 || (v13[0] = 0.0, R8_EQ(a1 + 2, v13)))
      {
        v7 = a1[3];
        v8 = v7 >= 6.0 && v7 <= 60.0;
        if (v8 || (v13[0] = 0.0, R8_EQ(a1 + 3, v13)))
        {
          v9 = *((_QWORD *)&xmmword_254011288 + 1);
          v10 = *((_QWORD *)&xmmword_254011288 + 1) + 1352;
          v11 = *((_OWORD *)a1 + 1);
          *(_OWORD *)(*((_QWORD *)&xmmword_254011288 + 1) + 1352) = *(_OWORD *)a1;
          *(_OWORD *)(v10 + 16) = v11;
          result = 1;
          *(_BYTE *)(v9 + 1384) = 1;
          return result;
        }
        EvCrt_v("GN_GPS_Set_CrossCorr_Params: FAILED: XCorr_Margin_BDS_B1 = %f [0, 6..60 dB], Out of range!");
      }
      else
      {
        EvCrt_v("GN_GPS_Set_CrossCorr_Params: FAILED: XCorr_Margin_GAL_E1 = %f [0, 6..60 dB], Out of range!");
      }
    }
    else
    {
      EvCrt_v("GN_GPS_Set_CrossCorr_Params: FAILED: XCorr_Margin_GPS_L1 = %f [0, 6..60 dB], Out of range!");
    }
  }
  else
  {
    EvCrt_v("GN_GPS_Set_CrossCorr_Params: FAILED: Strong_Signal_Threshold = %f [0, 6..60 dBHz], Out of range!");
  }
  return 0;
}

uint64_t GN_GPS_Set_XOF_Time(unsigned int a1, unsigned int a2)
{
  EvLog_v("GN_GPS_Set_XOF_Time: %u %u", a1, a2);
  if (a1 >= 0x2000)
  {
    EvCrt_v("GN_GPS_Set_XOF_Time: FAILED: XOF_GPS_WeekNo = %d >8191, Out of range!");
    return 0;
  }
  if (a2 > 0x93A7F)
  {
    EvCrt_v("GN_GPS_Set_XOF_Time: FAILED: XOF_GPS_TOW = %d >604799, Out of range!");
    return 0;
  }
  *(_DWORD *)(*((_QWORD *)&xmmword_254011288 + 1) + 1032) = 604800 * a1 + a2;
  return 1;
}

uint64_t GN_GPS_Set_RTI_Time(unsigned int a1, unsigned int a2)
{
  EvLog_v("GN_GPS_Set_RTI_Time: %u %u", a1, a2);
  if (a1 >= 0x2000)
  {
    EvCrt_v("GN_GPS_Set_RTI_Time: FAILED: RTI_GPS_WeekNo = %d >8191, Out of range!");
    return 0;
  }
  if (a2 > 0x93A7F)
  {
    EvCrt_v("GN_GPS_Set_RTI_Time: FAILED: RTI_GPS_TOW = %d >604799, Out of range!");
    return 0;
  }
  *(_DWORD *)(*((_QWORD *)&xmmword_254011288 + 1) + 1036) = 604800 * a1 + a2;
  return 1;
}

uint64_t GN_GPS_Set_EE_Start_Time(uint64_t a1, unsigned int a2)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  EvLog_v("GN_GPS_Set_EE_Start_Time: %u %u", a1, a2);
  if (a1 >= 0x2000)
  {
    EvCrt_v("GN_GPS_Set_EE_Start_Time: FAILED: EE_Start_GPS_WeekNo = %d >8191, Out of range!");
    return 0;
  }
  if (a2 >= 0x93A80)
  {
    EvCrt_v("GN_GPS_Set_EE_Start_Time: FAILED: EE_Start_GPS_TOW = %d >604799, Out of range!");
    return 0;
  }
  v5 = *((_QWORD *)&xmmword_254011288 + 1);
  v6 = a2 + 604800 * a1;
  Debug_Log_GPS_EE_Start_Time(a1, a2);
  if (v6 != *(_QWORD *)(v5 + 1040))
  {
    v7 = *(_OWORD *)(v5 + 397);
    v8 = *(_OWORD *)(v5 + 413);
    v9 = *(_OWORD *)(v5 + 365);
    *(_OWORD *)(v5 + 840) = *(_OWORD *)(v5 + 381);
    *(_OWORD *)(v5 + 856) = v7;
    *(_OWORD *)(v5 + 872) = v8;
    v10 = *(_OWORD *)(v5 + 333);
    v11 = *(_OWORD *)(v5 + 349);
    v12 = *(_OWORD *)(v5 + 301);
    *(_OWORD *)(v5 + 776) = *(_OWORD *)(v5 + 317);
    *(_OWORD *)(v5 + 792) = v10;
    v13 = *(_OWORD *)(v5 + 253);
    *(_OWORD *)(v5 + 808) = v11;
    *(_OWORD *)(v5 + 824) = v9;
    v14 = *(_OWORD *)(v5 + 269);
    v15 = *(_OWORD *)(v5 + 285);
    *(_OWORD *)(v5 + 712) = v13;
    *(_OWORD *)(v5 + 728) = v14;
    *(_QWORD *)(v5 + 1040) = v6;
    *(_WORD *)(v5 + 888) = *(_WORD *)(v5 + 429);
    *(_OWORD *)(v5 + 744) = v15;
    *(_OWORD *)(v5 + 760) = v12;
    Core_Save_Inhib_EE((BOOL *)(v5 + 712), v6);
  }
  return 1;
}

uint64_t GN_GPS_Encode_NMEA(unsigned int a1, char *a2, int a3, _DWORD *a4, _DWORD *a5)
{
  unsigned __int16 v5;
  char *v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v5 = 0;
  v15 = *MEMORY[0x24BDAC8D0];
  if (a1 >= 4 && a2)
  {
    if (a5 && (*a5 != *a4 || a5[1] != a4[1]))
    {
      EvCrt_v("GN_GPS_Encode_NMEA:  FAILED:  Incompatible Nav & Debug Data Local_TTag or OS_Time_ms");
      return 0;
    }
    if (!a3)
    {
      v5 = 0;
      *a2 = 0;
      return v5;
    }
    v13 = a2;
    v14 = &a2[a1];
    v11 = a2;
    v12 = a2;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    if ((a3 & 1) != 0)
    {
      WORD1(v8) = 1;
      if ((a3 & 2) == 0)
      {
LABEL_9:
        if ((a3 & 4) == 0)
          goto LABEL_10;
        goto LABEL_24;
      }
    }
    else if ((a3 & 2) == 0)
    {
      goto LABEL_9;
    }
    LOWORD(v8) = 1;
    if ((a3 & 4) == 0)
    {
LABEL_10:
      if ((a3 & 8) == 0)
        goto LABEL_11;
      goto LABEL_25;
    }
LABEL_24:
    WORD2(v8) = 1;
    if ((a3 & 8) == 0)
    {
LABEL_11:
      if ((a3 & 0x10) == 0)
        goto LABEL_12;
      goto LABEL_26;
    }
LABEL_25:
    HIWORD(v8) = 1;
    if ((a3 & 0x10) == 0)
    {
LABEL_12:
      if ((a3 & 0x20) == 0)
        goto LABEL_13;
      goto LABEL_27;
    }
LABEL_26:
    LOWORD(v9) = 1;
    if ((a3 & 0x20) == 0)
    {
LABEL_13:
      if ((a3 & 0x40) == 0)
        goto LABEL_14;
      goto LABEL_28;
    }
LABEL_27:
    WORD1(v9) = 1;
    if ((a3 & 0x40) == 0)
    {
LABEL_14:
      if ((a3 & 0x80) == 0)
        goto LABEL_15;
      goto LABEL_29;
    }
LABEL_28:
    WORD2(v9) = 1;
    if ((a3 & 0x80) == 0)
    {
LABEL_15:
      if ((a3 & 0x100) == 0)
        goto LABEL_16;
      goto LABEL_30;
    }
LABEL_29:
    HIWORD(v9) = 1;
    if ((a3 & 0x100) == 0)
    {
LABEL_16:
      if ((a3 & 0x200) == 0)
      {
LABEL_18:
        NMEA_Encode(&v11, (__int16 *)&v8, (uint64_t)a4, (uint64_t)a5);
        v6 = v11;
        v5 = (_WORD)v11++ - (_WORD)v12;
        *v6 = 0;
        return v5;
      }
LABEL_17:
      HIWORD(v10) = 1;
      goto LABEL_18;
    }
LABEL_30:
    LOWORD(v10) = 1;
    if ((a3 & 0x200) == 0)
      goto LABEL_18;
    goto LABEL_17;
  }
  return v5;
}

void *GN_GPS_Mark_Single_Pos_Used(int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  char *v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char v17;
  char *v18;
  _QWORD *v19;
  int v20;
  unint64_t v21;
  void *v22;
  _BYTE *v23;
  int v24;
  int v25;
  BOOL v26;
  _QWORD *v27;
  int v28;
  unint64_t v29;
  void *v30;
  _BYTE *v31;
  int v32;
  int v33;
  _QWORD *v34;
  int v35;
  unint64_t v36;
  void *result;
  _BYTE *v38;
  int v39;
  int v40;
  char *v41;
  _BYTE *v42;
  char *v43;
  char *v44;
  _BYTE __src[100];
  _BYTE v46[104];
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  GNSS_Write_GNB_Ctrl((char *)xmmword_2540113A8);
  GNSS_GNB_Debug_Ctl(xmmword_2540113C8);
  GNSS_Event_Log_Ctl(*((uint64_t *)&xmmword_2540113B8 + 1));
  GNSS_Nav_Debug_Ctl(xmmword_2540113B8);
  LCD_SA_Debug_Ctl(*((uint64_t *)&xmmword_2540113C8 + 1));
  v8 = __src;
  v43 = __src;
  v44 = v46;
  v42 = __src;
  v9 = 10;
  v10 = 1u;
  do
  {
    v41 = v8 + 1;
    *v8 = v9;
    v8 = v41;
    v11 = (unint64_t)v44;
    if (v41 >= v44)
    {
      v8 = v43;
      v41 = v43;
    }
    v9 = str_100[v10++];
  }
  while (v10 != 36);
  if (a1)
    v12 = 70;
  else
    v12 = 66;
  *v8 = v12;
  v13 = v8 + 1;
  if ((unint64_t)v13 >= v11)
    v13 = v43;
  v41 = v13 + 1;
  *v13 = 32;
  if ((unint64_t)(v13 + 1) >= v11)
    v41 = v43;
  sprintf_2d(&v41, a2);
  v14 = v41++;
  *v14 = 32;
  if (v41 >= v44)
    v41 = v43;
  sprintf_10u(&v41, a3);
  v15 = v41++;
  *v15 = 32;
  if (v41 >= v44)
    v41 = v43;
  sprintf_10u(&v41, a4);
  v16 = 0;
  v17 = 32;
  v18 = v41;
  do
  {
    v41 = v18 + 1;
    *v18 = v17;
    v18 = v41;
    if (v41 >= v44)
    {
      v18 = v43;
      v41 = v43;
    }
    v17 = str_101[++v16];
  }
  while (v16 != 8);
  API_Query_Config((uint64_t)v46);
  v19 = (_QWORD *)xmmword_2540113C8;
  v20 = (unsigned __int16)((_WORD)v41 - (_WORD)v42);
  v21 = *(_QWORD *)(xmmword_2540113C8 + 24);
  v22 = *(void **)xmmword_2540113C8;
  v23 = __src;
  do
  {
    v24 = v21 - (_DWORD)v22;
    if (v20 >= v24)
      v25 = v24;
    else
      v25 = v20;
    memcpy(v22, v23, v25);
    v22 = (void *)(*v19 + v25);
    *v19 = v22;
    v21 = v19[3];
    if ((unint64_t)v22 >= v21)
    {
      v22 = (void *)v19[2];
      *v19 = v22;
    }
    v23 += v25;
    v26 = __OFSUB__(v20, v25);
    v20 -= v25;
  }
  while (!((v20 < 0) ^ v26 | (v20 == 0)));
  v27 = (_QWORD *)*((_QWORD *)&xmmword_2540113B8 + 1);
  v28 = (unsigned __int16)((_WORD)v41 - (_WORD)v42);
  v29 = *(_QWORD *)(*((_QWORD *)&xmmword_2540113B8 + 1) + 24);
  v30 = (void *)**((_QWORD **)&xmmword_2540113B8 + 1);
  v31 = __src;
  do
  {
    v32 = v29 - (_DWORD)v30;
    if (v28 >= v32)
      v33 = v32;
    else
      v33 = v28;
    memcpy(v30, v31, v33);
    v30 = (void *)(*v27 + v33);
    *v27 = v30;
    v29 = v27[3];
    if ((unint64_t)v30 >= v29)
    {
      v30 = (void *)v27[2];
      *v27 = v30;
    }
    v31 += v33;
    v26 = __OFSUB__(v28, v33);
    v28 -= v33;
  }
  while (!((v28 < 0) ^ v26 | (v28 == 0)));
  v34 = (_QWORD *)xmmword_2540113B8;
  v35 = (unsigned __int16)((_WORD)v41 - (_WORD)v42);
  v36 = *(_QWORD *)(xmmword_2540113B8 + 24);
  result = *(void **)xmmword_2540113B8;
  v38 = __src;
  do
  {
    v39 = v36 - (_DWORD)result;
    if (v35 >= v39)
      v40 = v39;
    else
      v40 = v35;
    memcpy(result, v38, v40);
    result = (void *)(*v34 + v40);
    *v34 = result;
    v36 = v34[3];
    if ((unint64_t)result >= v36)
    {
      result = (void *)v34[2];
      *v34 = result;
    }
    v38 += v40;
    v26 = __OFSUB__(v35, v40);
    v35 -= v40;
  }
  while (!((v35 < 0) ^ v26 | (v35 == 0)));
  return result;
}

uint64_t GN_GPS_Set_TM_FSP_OS_Time_ms(uint64_t a1, unsigned int a2)
{
  double v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;

  EvLog_v("GN_GPS_Set_TM_FSP_OS_Time_ms: %u %u %d", a1, a2, a1 - a2);
  Debug_Log_TM_FCP_OS_Time_ms(a1, a2);
  v4 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
  if ((int)((unint64_t)v4 - a1) >= 0)
    v5 = (unint64_t)v4 - a1;
  else
    v5 = a1 - (unint64_t)v4;
  if (v5 < 0x1389)
  {
    result = Is_GN_API_Set_Allowed("API_Set_TM_FSP_OS_Time_ms");
    if ((_DWORD)result)
    {
      v7 = *(_QWORD *)(p_api + 328);
      result = 1;
      *(_BYTE *)v7 = 1;
      *(_DWORD *)(v7 + 400) = a1;
      *(_DWORD *)(v7 + 404) = a2;
    }
  }
  else
  {
    EvLog_v("GN_GPS_Set_TM_FSP_OS_Time_ms: REJECTED: OS_Time too different %d", (unint64_t)v4 - a1);
    return 0;
  }
  return result;
}

uint64_t GN_GPS_Set_RTI_Bad_SV_List(uint64_t a1, int *a2, unsigned __int8 *a3)
{
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v22[16];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int16 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  *(_OWORD *)v22 = 0u;
  v6 = Is_GN_API_Set_Allowed("GN_GPS_Set_RTI_Bad_SV_List");
  result = 0;
  if (!v6)
    return result;
  Debug_Log_GPS_RTI_Bad_SV_List(a1, a2, a3);
  if (a1 > 0xB2)
  {
    EvCrt_v("GN_GPS_Set_RTI_Bad_SV_List: FAILED: RTI_Num_Bad_SV = %d >%d, Out of range!");
    return 0;
  }
  if (!(_DWORD)a1)
  {
    v19 = 0;
    v18 = 0;
    v17 = 0;
    v16 = 0;
    v15 = 0;
LABEL_36:
    EvLog_v("GN_GPS_Set_RTI_Bad_SV_List: G %d R %d Q %d S %d B %d E %d", a1, v19, v17, v18, v15, v16);
    return API_Set_RTI_Bad_SV_List(v22);
  }
  v8 = 0;
  v9 = a1;
  while (2)
  {
    v10 = a2[v8];
    v11 = 0;
    v12 = 32;
    switch(v10)
    {
      case 1u:
        goto LABEL_15;
      case 2u:
        v12 = 24;
        v11 = 1;
        v10 = 1;
        goto LABEL_15;
      case 3u:
      case 5u:
      case 6u:
      case 7u:
        goto LABEL_11;
      case 4u:
        v12 = 202;
        v10 = 193;
        v11 = 4;
        goto LABEL_15;
      case 8u:
        v12 = 158;
        v10 = 120;
        v11 = 5;
        goto LABEL_15;
      default:
        if (v10 != 32)
        {
          if (v10 == 16)
          {
            v12 = 36;
            v10 = 1;
            v11 = 2;
            goto LABEL_15;
          }
LABEL_11:
          EvCrt_v("GN_GPS_Set_RTI_Bad_SV_List: FAILED: RTI_Bad_SV_Type_List[%d] = 0x%x, Out of range!", v8, v10);
LABEL_21:
          if (a1 == ++v8)
          {
            v15 = 0;
            v16 = 0;
            v17 = 0;
            v18 = 0;
            v19 = 0;
            LODWORD(a1) = 0;
            do
            {
              v21 = *a2++;
              v20 = v21;
              switch(v21)
              {
                case 1:
                  LODWORD(a1) = a1 + 1;
                  break;
                case 2:
                  ++v19;
                  break;
                case 3:
                case 5:
                case 6:
                case 7:
                  goto LABEL_28;
                case 4:
                  ++v17;
                  break;
                case 8:
                  ++v18;
                  break;
                default:
                  if (v20 == 16)
                  {
                    ++v16;
                  }
                  else if (v20 == 32)
                  {
                    ++v15;
                  }
                  else
                  {
LABEL_28:
                    EvCrt_Illegal_Default("GN_GPS_Set_RTI_Bad_SV_List", 0xD84u);
                  }
                  break;
              }
              --v9;
            }
            while (v9);
            goto LABEL_36;
          }
          continue;
        }
        v12 = 37;
        v10 = 1;
        v11 = 3;
LABEL_15:
        v13 = a3[v8];
        if (v13 >= v10 && v12 >= v13)
        {
          v22[v13 - v10 + Num_Prn[v11]] = 1;
          goto LABEL_21;
        }
        EvCrt_v("GN_GPS_Set_RTI_Bad_SV_List: FAILED: RTI_Bad_SV_Id_List[%d] = %d <%d or >%d, Out of range!");
        return 0;
    }
  }
}

void GncP25_02StopTimemarkSessTimer(void)
{
  uint64_t v0;
  unsigned __int16 v1;
  char __str[1040];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  if (g_TimemarkTimerStatus == 1)
  {
    if (AgpsFsmStopTimer(8790278))
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v0 = mach_continuous_time();
        v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 87, "GncP25_02StopTimemarkSessTimer", 1545);
        LbsOsaTrace_WriteLog(8u, __str, v1, 2, 1);
      }
    }
    else
    {
      g_TimemarkTimerStatus = 0;
    }
  }
}

unint64_t GncP25_04HandleTimeMarkEvent(unsigned __int8 *a1, int a2)
{
  unint64_t result;
  unsigned __int16 v3;
  char *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned __int16 v11;
  unint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  double v22;
  double v23;
  char v24;
  char v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unsigned __int16 v29;
  uint64_t v30;
  unsigned __int16 v31;
  uint64_t v32;
  unsigned __int16 v33;
  unint64_t v34;
  char __str[1040];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (g_TimeMarkState == 1)
  {
    result = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    if (!(_DWORD)result)
      return result;
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Pulse not processed\n");
    return LbsOsaTrace_WriteLog(8u, __str, v3, 2, 1);
  }
  if (a2 != 18)
  {
    result = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    if (!(_DWORD)result)
      return result;
    goto LABEL_41;
  }
  if (a1[8] != 83)
  {
    result = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    if (!(_DWORD)result)
      return result;
    bzero(__str, 0x410uLL);
    v34 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Status,%u\n", v34);
    return LbsOsaTrace_WriteLog(8u, __str, v3, 2, 1);
  }
  if (g_GncP_PEUpdate[0])
    v5 = g_GncP_PEUpdate;
  else
    v5 = 0;
  if (!g_GncP_PEUpdate[0])
  {
    result = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    if (!(_DWORD)result)
      return result;
LABEL_41:
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
    return LbsOsaTrace_WriteLog(8u, __str, v3, 2, 1);
  }
  result = (unint64_t)gnssOsa_Calloc("GncP25_04HandleTimeMarkEvent", 188, 1, 0x40uLL);
  if (result)
  {
    v6 = result;
    v7 = *(_DWORD *)(a1 + 9);
    v8 = a1[14];
    v9 = a1[13] | (v8 << 8);
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v10 = mach_continuous_time();
      v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TMEvent BBTICK,%u,SubMs,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 73, "GncP25_04HandleTimeMarkEvent", v7, v9);
      LbsOsaTrace_WriteLog(8u, __str, v11, 4, 1);
    }
    if (byte_253FAAA01)
    {
      *(double *)&v12 = (double)v9;
      LODWORD(v12) = dword_253FAA9F8;
      v13 = (double)v7 + (double)v9 * 0.0000152587891 - (double)v12;
      v14 = v13 * (*(double *)&qword_253FAAA30 + 1.0);
      v15 = v14 + *(double *)&qword_253FAAA18 * 1000.0;
      v16 = sqrt(*(double *)&qword_253FAAAA0 * (v14 * (v14 * *(double *)&qword_253FAAAA0))+ *(double *)&qword_253FAAA90 * 1000.0 * (*(double *)&qword_253FAAA90 * 1000.0));
      if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v17 = mach_continuous_time();
        v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: DeltaToW,%.12f,DeltaTick,%.12f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNC", 68, "GncP25_06CalculateTOW", v14, v13);
        LbsOsaTrace_WriteLog(8u, __str, v18, 5, 1);
      }
      v19 = 0;
      v20 = 0;
      v21 = word_253FAAA10;
      v22 = v15 + -604800000.0;
      if (v15 < 604800000.0)
        v22 = v15;
      else
        v21 = word_253FAAA10 + 1;
      *(_WORD *)(v6 + 18) = v21;
      *(_BYTE *)(v6 + 16) = 1;
      *(double *)(v6 + 24) = v22;
      *(double *)(v6 + 32) = v16;
      v23 = *(double *)&qword_253FAAA38;
      if (!byte_253FAA9F1)
        v23 = 0.0;
      *(_BYTE *)(v6 + 40) = byte_253FAA9F1;
      *(double *)(v6 + 48) = v23;
      if (dword_253FAAB20 == 4)
        v24 = 5;
      else
        v24 = 0;
      if (dword_253FAAB20 == 2)
        v25 = 3;
      else
        v25 = v24;
      v26 = v5 + 332;
      v27 = v5 + 6096;
      *(_BYTE *)(v6 + 60) = v25;
      do
      {
        if (v27[v19])
        {
          switch(*(_DWORD *)&v26[4 * v19])
          {
            case 1:
              v20 |= 1u;
              break;
            case 2:
              v20 |= 0x20u;
              break;
            case 3:
              v20 |= 0x10u;
              break;
            case 4:
              v20 |= 4u;
              break;
            case 5:
              v20 |= 0x40u;
              break;
            case 6:
              v20 |= 2u;
              break;
            default:
              if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v28 = mach_continuous_time();
                v29 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Const,%u,Idx,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v28), "GNC", 87, "GncP25_05GetConstellationUsed", 770, *(_DWORD *)&v26[4 * v19], v19);
                LbsOsaTrace_WriteLog(8u, __str, v29, 2, 1);
              }
              break;
          }
        }
        ++v19;
      }
      while (v19 != 128);
      *(_WORD *)(v6 + 62) = v20;
    }
    else
    {
      *(_OWORD *)(v6 + 32) = 0u;
      *(_OWORD *)(v6 + 48) = 0u;
      *(_OWORD *)(v6 + 16) = 0u;
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v30 = mach_continuous_time();
        v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GpsTime NotAvail\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "GNC", 73, "GncP25_04HandleTimeMarkEvent");
        LbsOsaTrace_WriteLog(8u, __str, v31, 4, 1);
      }
    }
    *(_DWORD *)(v6 + 56) = v7;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v32 = mach_continuous_time();
      v33 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_TIMEMARK_EVENT_IND =>GNM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "GNC", 73, "GncP25_04HandleTimeMarkEvent");
      LbsOsaTrace_WriteLog(8u, __str, v33, 4, 1);
    }
    AgpsSendFsmMsg(134, 128, 8784643, (_BYTE *)v6);
    return GncP25_09UpdateTimeMarkInfo(0, 1, 0, v7 + (v8 >> 7));
  }
  return result;
}

unint64_t GncP25_09UpdateTimeMarkInfo(unint64_t result, int a2, int a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  size_t v9;
  int v10;
  uint64_t v11;
  char __str[1040];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if ((_DWORD)result)
  {
    _MergedGlobals_2 = a3;
    GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidOSTime = 1;
  }
  if (a2)
  {
    dword_2540216D0 = a4;
    result = mach_continuous_time();
    dword_2540216D4 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)result);
    GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidBBTick = 1;
  }
  else if (GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidBBTick != 1)
  {
    return result;
  }
  if (GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidOSTime == 1)
  {
    GncP25_02StopTimemarkSessTimer();
    v4 = _MergedGlobals_2;
    if ((unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time()) - v4 > 0x1F3
      || (v5 = dword_2540216D4,
          (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time())
        - v5 > 0x1F3))
    {
      result = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
      if (!(_DWORD)result)
      {
LABEL_17:
        GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidOSTime = 0;
        GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidBBTick = 0;
        g_TimeMarkState = 1;
        return result;
      }
      bzero(__str, 0x410uLL);
      v11 = mach_continuous_time();
      v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Invalid OStime %u,BBtick,%u,BBTickRx,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 87, "GncP25_09UpdateTimeMarkInfo", _MergedGlobals_2, dword_2540216D0, dword_2540216D4);
      v10 = 2;
    }
    else
    {
      if ((GN_GPS_Set_TM_FSP_OS_Time_ms(_MergedGlobals_2, dword_2540216D0) & 1) == 0)
      {
        if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v6 = mach_continuous_time();
          v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GN_GPS_Set_TM_FSP_OS_Time_ms\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 87, "GncP25_09UpdateTimeMarkInfo", 257);
          LbsOsaTrace_WriteLog(8u, __str, v7, 2, 1);
        }
      }
      result = LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0);
      if (!(_DWORD)result)
        goto LABEL_17;
      bzero(__str, 0x410uLL);
      v8 = mach_continuous_time();
      v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: TMInfo OStime %u,BBtick,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 73, "GncP25_09UpdateTimeMarkInfo", _MergedGlobals_2, dword_2540216D0);
      v10 = 4;
    }
    result = LbsOsaTrace_WriteLog(8u, __str, v9, v10, 1);
    goto LABEL_17;
  }
  return result;
}

uint64_t GncP25_01HandleStartTimeMarkReq(uint64_t a1)
{
  uint64_t v1;
  unsigned __int16 v2;
  _BYTE *v3;
  _BYTE *v4;
  int v5;
  int IsLoggingAllowed;
  uint64_t v7;
  unsigned __int16 v8;
  int v9;
  int v10;
  unsigned __int16 v11;
  uint64_t v12;
  unsigned __int16 v13;
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 v17;
  uint64_t v19;
  unsigned __int16 v20;
  uint64_t v21;
  unsigned __int16 v22;
  unint64_t v23;
  char __str[1040];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v1 = mach_continuous_time();
      v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_START_TIMEMARK_REQ\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 73, "GncP25_01HandleStartTimeMarkReq");
      LbsOsaTrace_WriteLog(8u, __str, v2, 4, 1);
    }
    v3 = gnssOsa_Calloc("GncP25_01HandleStartTimeMarkReq", 326, 1, 0x10uLL);
    if (v3)
    {
      v4 = v3;
      if ((g_TimeMarkState & 1) == 0)
      {
        v3[12] = 0;
        if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v14 = mach_continuous_time();
          v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 87, "GncP25_01HandleStartTimeMarkReq", 2056);
          LbsOsaTrace_WriteLog(8u, __str, v15, 2, 1);
        }
        goto LABEL_20;
      }
      v5 = g_GncPStateInfo;
      IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0);
      if (v5 == 7)
      {
        if (IsLoggingAllowed)
        {
          bzero(__str, 0x410uLL);
          v7 = mach_continuous_time();
          v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TM started ME ON\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 73, "GncP25_03HandleStartTimeMark");
          LbsOsaTrace_WriteLog(8u, __str, v8, 4, 1);
        }
        v9 = byte_253FA9F83;
        v10 = LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0);
        if (!v9)
        {
          if (v10)
          {
            bzero(__str, 0x410uLL);
            v19 = mach_continuous_time();
            v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ME duty cycle disabled\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNC", 73, "GncP25_03HandleStartTimeMark");
            LbsOsaTrace_WriteLog(8u, __str, v20, 4, 1);
          }
          g_TimeMarkState = 0;
          GncP25_02StopTimemarkSessTimer();
          if (AgpsFsmStartTimer(0x862106u, 0x3E8u))
          {
            if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v21 = mach_continuous_time();
              v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Dur,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "GNC", 87, "GncP25_03StartTimemarkSessTimer", 1544, 1000);
              LbsOsaTrace_WriteLog(8u, __str, v22, 2, 1);
            }
          }
          else
          {
            g_TimemarkTimerStatus = 1;
          }
          Hal_TriggerTimeMarkPulse((void (*)(unsigned int, BOOL))GncP25_07TimeMarkPulseCb);
          v4[12] = 1;
          goto LABEL_20;
        }
        if (v10)
        {
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ME duty cycle allowed\n");
LABEL_18:
          LbsOsaTrace_WriteLog(8u, __str, v11, 4, 1);
        }
      }
      else if (IsLoggingAllowed)
      {
        bzero(__str, 0x410uLL);
        v23 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx TM ReqRejected MEState,%hhu\n", v23);
        goto LABEL_18;
      }
      g_TimeMarkState = 1;
      v4[12] = 0;
LABEL_20:
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v16 = mach_continuous_time();
        v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_START_TIMEMARK_RSP =>GNM Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNC", 73, "GncP25_01HandleStartTimeMarkReq", v4[12]);
        LbsOsaTrace_WriteLog(8u, __str, v17, 4, 1);
      }
      AgpsSendFsmMsg(134, 128, 8390916, v4);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v12 = mach_continuous_time();
    v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 69, "GncP25_01HandleStartTimeMarkReq", 517);
    LbsOsaTrace_WriteLog(8u, __str, v13, 0, 1);
  }
  return 0;
}

void GncP25_07TimeMarkPulseCb(int a1, int a2)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  unsigned __int16 v6;
  uint64_t v7;
  unsigned __int16 v8;
  char __str[1040];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = gnssOsa_Calloc("GncP25_07TimeMarkPulseCb", 369, 1, 0x10uLL);
    if (v3)
    {
      v4 = v3;
      *((_DWORD *)v3 + 3) = a1;
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v5 = mach_continuous_time();
        v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_TIMEMARK_PULSE_IND =>GNCP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 73, "GncP25_07TimeMarkPulseCb");
        LbsOsaTrace_WriteLog(8u, __str, v6, 4, 1);
      }
      AgpsSendFsmMsg(134, 134, 8791299, v4);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v7 = mach_continuous_time();
    v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: TimeMark Trig fail\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 87, "GncP25_07TimeMarkPulseCb");
    LbsOsaTrace_WriteLog(8u, __str, v8, 2, 1);
  }
}

uint64_t GncP25_08HandleTimeMarkPulseInd(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v4;
  size_t v5;
  int v6;
  uint64_t v7;
  char __str[1040];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v2 = mach_continuous_time();
      v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_TIMEMARK_PULSE_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP25_08HandleTimeMarkPulseInd");
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    if ((g_TimeMarkState & 1) == 0)
    {
      GncP25_09UpdateTimeMarkInfo(1uLL, 0, *(_DWORD *)(a1 + 12), 0);
      return 0;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v4 = mach_continuous_time();
      v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Session Stopped\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 87, "GncP25_08HandleTimeMarkPulseInd", 262);
      v6 = 2;
LABEL_9:
      LbsOsaTrace_WriteLog(8u, __str, v5, v6, 1);
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v7 = mach_continuous_time();
    v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 69, "GncP25_08HandleTimeMarkPulseInd", 517);
    v6 = 0;
    goto LABEL_9;
  }
  return 0;
}

void GncP25_10TimemarkSessTimerExpiry(void)
{
  _OWORD *v0;
  _BYTE *v1;
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v4;
  unsigned __int16 v5;
  char __str[1040];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  g_TimemarkTimerStatus = 0;
  GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidOSTime = 0;
  GncP25_09UpdateTimeMarkInfo(BOOL,BOOL,BOOL,unsigned int,unsigned int)::v_IsValidBBTick = 0;
  g_TimeMarkState = 1;
  v0 = gnssOsa_Calloc("GncP25_10TimemarkSessTimerExpiry", 473, 1, 0x40uLL);
  if (v0)
  {
    v1 = v0;
    v0[2] = 0u;
    v0[3] = 0u;
    v0[1] = 0u;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v2 = mach_continuous_time();
      v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GpsTime NotAvail\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP25_10TimemarkSessTimerExpiry");
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v4 = mach_continuous_time();
      v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_TIMEMARK_EVENT_IND =>GNM\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 73, "GncP25_10TimemarkSessTimerExpiry");
      LbsOsaTrace_WriteLog(8u, __str, v5, 4, 1);
    }
    AgpsSendFsmMsg(134, 128, 8784643, v1);
  }
}

uint64_t sprintf_eR8(_QWORD *a1, double a2)
{
  double v3;
  unsigned int i;
  unsigned int v5;
  double v6;
  double v7;
  double v8;
  int v9;
  _BYTE *v10;

  v3 = -a2;
  if (a2 >= 0.0)
    v3 = a2;
  if (v3 <= 0.0)
  {
    i = 0;
    v5 = 0;
  }
  else
  {
    for (i = 0; v3 < 0.00001; v3 = v3 * 10000.0)
      i -= 4;
    for (; v3 < 0.1; v3 = v3 * 10.0)
      --i;
    for (; v3 > 10000.0; v3 = v3 * 0.0001)
      i += 4;
    while (v3 > 10.0)
    {
      ++i;
      v3 = v3 * 0.1;
    }
    v6 = v3 * 10000000.0;
    v7 = -0.5;
    if (v6 > 0.0)
      v7 = 0.5;
    v8 = v6 + v7;
    if (v8 <= 2147483650.0)
    {
      if (v8 >= -2147483650.0)
        v9 = (int)v8;
      else
        v9 = 0x80000000;
    }
    else
    {
      v9 = 0x7FFFFFFF;
    }
    if (a2 >= 0.0)
      v5 = v9;
    else
      v5 = -v9;
  }
  sprintf_9f((uint64_t)a1, v5, 8);
  v10 = (_BYTE *)(*a1)++;
  *v10 = 101;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  return sprintf_03d((uint64_t)a1, i);
}

_QWORD *sprintf_gR8(_QWORD *a1, double a2)
{
  double v2;
  _BYTE *v3;
  double v4;
  double v5;
  double v6;
  unsigned int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  unsigned int v26;

  v2 = fabs(a2);
  v3 = (_BYTE *)(*a1)++;
  *v3 = 32;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  if (v2 < 99.0)
  {
    v4 = a2 * 1000000.0;
    v5 = -0.5;
    if (v4 > 0.0)
      v5 = 0.5;
    v6 = v4 + v5;
    if (v6 <= 2147483650.0)
    {
      if (v6 >= -2147483650.0)
        v7 = (int)v6;
      else
        v7 = 0x80000000;
    }
    else
    {
      v7 = 0x7FFFFFFF;
    }
    v14 = 7;
    return (_QWORD *)sprintf_9f((uint64_t)a1, v7, v14);
  }
  if (v2 < 999.0)
  {
    v8 = a2 * 100000.0;
    v9 = -0.5;
    if (v8 > 0.0)
      v9 = 0.5;
    v10 = v8 + v9;
    if (v10 <= 2147483650.0)
    {
      if (v10 >= -2147483650.0)
        v7 = (int)v10;
      else
        v7 = 0x80000000;
    }
    else
    {
      v7 = 0x7FFFFFFF;
    }
    v14 = 6;
    return (_QWORD *)sprintf_9f((uint64_t)a1, v7, v14);
  }
  if (v2 < 9999.0)
  {
    v11 = a2 * 10000.0;
    v12 = -0.5;
    if (v11 > 0.0)
      v12 = 0.5;
    v13 = v11 + v12;
    if (v13 <= 2147483650.0)
    {
      if (v13 >= -2147483650.0)
        v7 = (int)v13;
      else
        v7 = 0x80000000;
    }
    else
    {
      v7 = 0x7FFFFFFF;
    }
    v14 = 5;
    return (_QWORD *)sprintf_9f((uint64_t)a1, v7, v14);
  }
  if (v2 < 99999.0)
  {
    v15 = a2 * 1000.0;
    v16 = -0.5;
    if (v15 > 0.0)
      v16 = 0.5;
    v17 = v15 + v16;
    if (v17 <= 2147483650.0)
    {
      if (v17 >= -2147483650.0)
        v7 = (int)v17;
      else
        v7 = 0x80000000;
    }
    else
    {
      v7 = 0x7FFFFFFF;
    }
    v14 = 4;
    return (_QWORD *)sprintf_9f((uint64_t)a1, v7, v14);
  }
  if (v2 < 999999.0)
  {
    v18 = a2 * 100.0;
    v19 = -0.5;
    if (v18 > 0.0)
      v19 = 0.5;
    v20 = v18 + v19;
    if (v20 <= 2147483650.0)
    {
      if (v20 >= -2147483650.0)
        v7 = (int)v20;
      else
        v7 = 0x80000000;
    }
    else
    {
      v7 = 0x7FFFFFFF;
    }
    v14 = 3;
    return (_QWORD *)sprintf_9f((uint64_t)a1, v7, v14);
  }
  if (v2 < 9999999.0)
  {
    v21 = a2 * 10.0;
    v22 = -0.5;
    if (v21 > 0.0)
      v22 = 0.5;
    v23 = v21 + v22;
    if (v23 <= 2147483650.0)
    {
      if (v23 >= -2147483650.0)
        v7 = (int)v23;
      else
        v7 = 0x80000000;
    }
    else
    {
      v7 = 0x7FFFFFFF;
    }
    v14 = 2;
    return (_QWORD *)sprintf_9f((uint64_t)a1, v7, v14);
  }
  if (v2 >= 99999999.0)
    return (_QWORD *)sprintf_eR8(a1, a2);
  v24 = -0.5;
  if (a2 > 0.0)
    v24 = 0.5;
  v25 = v24 + a2;
  if (v25 <= 2147483650.0)
  {
    if (v25 >= -2147483650.0)
      v26 = (int)v25;
    else
      v26 = 0x80000000;
  }
  else
  {
    v26 = 0x7FFFFFFF;
  }
  return sprintf_10d(a1, v26);
}

_QWORD *sprintf_seR8(_QWORD *a1, double a2)
{
  double v3;
  unsigned int i;
  unsigned int v5;
  double v6;
  double v7;
  double v8;
  int v9;
  _BYTE *v10;

  v3 = -a2;
  if (a2 >= 0.0)
    v3 = a2;
  if (v3 <= 0.0)
  {
    i = 0;
    v5 = 0;
  }
  else
  {
    for (i = 0; v3 < 0.0001; v3 = v3 * 1000.0)
      i -= 3;
    for (; v3 < 0.1; v3 = v3 * 10.0)
      --i;
    for (; v3 > 1000.0; v3 = v3 * 0.001)
      i += 3;
    while (v3 > 9.999)
    {
      ++i;
      v3 = v3 * 0.1;
    }
    v6 = v3 * 1000.0;
    v7 = -0.5;
    if (v6 > 0.0)
      v7 = 0.5;
    v8 = v6 + v7;
    if (v8 <= 2147483650.0)
    {
      if (v8 >= -2147483650.0)
        v9 = (int)v8;
      else
        v9 = 0x80000000;
    }
    else
    {
      v9 = 0x7FFFFFFF;
    }
    if (a2 >= 0.0)
      v5 = v9;
    else
      v5 = -v9;
  }
  sprintf_5f((uint64_t)a1, v5, 4);
  v10 = (_BYTE *)(*a1)++;
  *v10 = 101;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  return sprintf_02d(a1, i);
}

_QWORD *sprintf_sgR8(_QWORD *a1, double a2)
{
  double v2;
  _BYTE *v3;
  double v4;
  double v5;
  double v6;
  unsigned int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int v14;
  double v15;
  double v16;
  unsigned int v17;

  v2 = fabs(a2);
  v3 = (_BYTE *)(*a1)++;
  *v3 = 32;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  if (v2 < 99.0)
  {
    v4 = a2 * 1000.0;
    v5 = -0.5;
    if (v4 > 0.0)
      v5 = 0.5;
    v6 = v4 + v5;
    if (v6 <= 2147483650.0)
    {
      if (v6 >= -2147483650.0)
        v7 = (int)v6;
      else
        v7 = 0x80000000;
    }
    else
    {
      v7 = 0x7FFFFFFF;
    }
    v14 = 4;
    return (_QWORD *)sprintf_6f((uint64_t)a1, v7, v14);
  }
  if (v2 < 999.0)
  {
    v8 = a2 * 100.0;
    v9 = -0.5;
    if (v8 > 0.0)
      v9 = 0.5;
    v10 = v8 + v9;
    if (v10 <= 2147483650.0)
    {
      if (v10 >= -2147483650.0)
        v7 = (int)v10;
      else
        v7 = 0x80000000;
    }
    else
    {
      v7 = 0x7FFFFFFF;
    }
    v14 = 3;
    return (_QWORD *)sprintf_6f((uint64_t)a1, v7, v14);
  }
  if (v2 < 9999.0)
  {
    v11 = a2 * 10.0;
    v12 = -0.5;
    if (v11 > 0.0)
      v12 = 0.5;
    v13 = v11 + v12;
    if (v13 <= 2147483650.0)
    {
      if (v13 >= -2147483650.0)
        v7 = (int)v13;
      else
        v7 = 0x80000000;
    }
    else
    {
      v7 = 0x7FFFFFFF;
    }
    v14 = 2;
    return (_QWORD *)sprintf_6f((uint64_t)a1, v7, v14);
  }
  if (v2 >= 99999.0)
    return sprintf_seR8(a1, a2);
  v15 = -0.5;
  if (a2 > 0.0)
    v15 = 0.5;
  v16 = v15 + a2;
  if (v16 <= 2147483650.0)
  {
    if (v16 >= -2147483650.0)
      v17 = (int)v16;
    else
      v17 = 0x80000000;
  }
  else
  {
    v17 = 0x7FFFFFFF;
  }
  return sprintf_7d(a1, v17);
}

_QWORD *sprintf_sgR8F(_QWORD *a1, double a2)
{
  double v2;
  _BYTE *v3;
  double v4;
  double v5;
  double v6;
  unsigned int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int v14;
  double v15;
  double v16;
  unsigned int v17;

  v2 = fabs(a2);
  v3 = (_BYTE *)(*a1)++;
  *v3 = 32;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  if (v2 < 99.0)
  {
    v4 = a2 * 1000.0;
    v5 = -0.5;
    if (v4 > 0.0)
      v5 = 0.5;
    v6 = v4 + v5;
    if (v6 <= 2147483650.0)
    {
      if (v6 >= -2147483650.0)
        v7 = (int)v6;
      else
        v7 = 0x80000000;
    }
    else
    {
      v7 = 0x7FFFFFFF;
    }
    v14 = 4;
    return (_QWORD *)sprintf_8f((uint64_t)a1, v7, v14);
  }
  if (v2 < 999.0)
  {
    v8 = a2 * 100.0;
    v9 = -0.5;
    if (v8 > 0.0)
      v9 = 0.5;
    v10 = v8 + v9;
    if (v10 <= 2147483650.0)
    {
      if (v10 >= -2147483650.0)
        v7 = (int)v10;
      else
        v7 = 0x80000000;
    }
    else
    {
      v7 = 0x7FFFFFFF;
    }
    v14 = 3;
    return (_QWORD *)sprintf_8f((uint64_t)a1, v7, v14);
  }
  if (v2 < 9999.0)
  {
    v11 = a2 * 10.0;
    v12 = -0.5;
    if (v11 > 0.0)
      v12 = 0.5;
    v13 = v11 + v12;
    if (v13 <= 2147483650.0)
    {
      if (v13 >= -2147483650.0)
        v7 = (int)v13;
      else
        v7 = 0x80000000;
    }
    else
    {
      v7 = 0x7FFFFFFF;
    }
    v14 = 2;
    return (_QWORD *)sprintf_8f((uint64_t)a1, v7, v14);
  }
  if (v2 >= 99999.0)
    return sprintf_seR8(a1, a2);
  v15 = -0.5;
  if (a2 > 0.0)
    v15 = 0.5;
  v16 = v15 + a2;
  if (v16 <= 2147483650.0)
  {
    if (v16 >= -2147483650.0)
      v17 = (int)v16;
    else
      v17 = 0x80000000;
  }
  else
  {
    v17 = 0x7FFFFFFF;
  }
  return sprintf_9d(a1, v17);
}

char **sprintf_ACC(char **result, double a2)
{
  char *v2;
  char v3;
  uint64_t v4;
  double v5;
  double v6;
  unsigned int v7;
  double v8;
  double v9;
  double v10;
  unsigned int v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  int v18;

  if (a2 <= 99999.0)
  {
    if (a2 <= 9.9)
    {
      if (a2 <= 0.99)
      {
        if (a2 <= 0.099)
        {
          v15 = a2 * 1000.0;
          v16 = -0.5;
          if (v15 > 0.0)
            v16 = 0.5;
          v17 = v15 + v16;
          if (v17 <= 2147483650.0)
          {
            if (v17 >= -2147483650.0)
              v11 = (int)v17;
            else
              v11 = 0x80000000;
          }
          else
          {
            v11 = 0x7FFFFFFF;
          }
          v18 = 4;
        }
        else
        {
          v12 = a2 * 100.0;
          v13 = -0.5;
          if (v12 > 0.0)
            v13 = 0.5;
          v14 = v12 + v13;
          if (v14 <= 2147483650.0)
          {
            if (v14 >= -2147483650.0)
              v11 = (int)v14;
            else
              v11 = 0x80000000;
          }
          else
          {
            v11 = 0x7FFFFFFF;
          }
          v18 = 3;
        }
      }
      else
      {
        v8 = a2 * 10.0;
        v9 = -0.5;
        if (v8 > 0.0)
          v9 = 0.5;
        v10 = v8 + v9;
        if (v10 <= 2147483650.0)
        {
          if (v10 >= -2147483650.0)
            v11 = (int)v10;
          else
            v11 = 0x80000000;
        }
        else
        {
          v11 = 0x7FFFFFFF;
        }
        v18 = 2;
      }
      return (char **)sprintf_4f((uint64_t)result, v11, v18);
    }
    else
    {
      v5 = -0.5;
      if (a2 > 0.0)
        v5 = 0.5;
      v6 = v5 + a2;
      if (v6 <= 2147483650.0)
      {
        if (v6 >= -2147483650.0)
          v7 = (int)v6;
        else
          v7 = 0x80000000;
      }
      else
      {
        v7 = 0x7FFFFFFF;
      }
      return (char **)sprintf_5d(result, v7);
    }
  }
  else
  {
    v2 = *result;
    v3 = 57;
    v4 = 1u;
    do
    {
      *result = v2 + 1;
      *v2 = v3;
      v2 = *result;
      if (*result >= result[3])
      {
        v2 = result[2];
        *result = v2;
      }
      v3 = str_11[v4++];
    }
    while (v4 != 6);
  }
  return result;
}

uint64_t sprintf_v(uint64_t result, char *a2, _DWORD *a3)
{
  char **v3;
  unsigned __int8 v4;
  char *v5;
  char v6;
  char *v7;
  int v8;
  _DWORD *v9;
  char *v10;
  int v11;
  unsigned int *v12;
  unint64_t *v13;
  int *v14;
  int v15;
  unsigned int v16;
  double *v17;
  double *v18;
  double *v19;
  _BYTE **v20;
  _BYTE *v21;
  char v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  unsigned int *v26;
  char *v27;
  char *v28;
  char v29;
  char *v30;
  char v32[15];
  uint64_t v33;

  v3 = (char **)result;
  v33 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (*a2)
  {
    v5 = a2;
    v6 = 0;
    do
    {
      if (v4 == 37 || (v6 & 1) != 0)
      {
        if ((v6 & 1) == 0)
        {
          v8 = *++v5;
          v4 = v8;
          if (!v8)
            return result;
        }
        if ((char)v4 <= 114)
        {
          switch(v4)
          {
            case 'c':
              v9 = a3;
              a3 += 2;
              LODWORD(v9) = *v9;
              v10 = (*v3)++;
              *v10 = (char)v9;
              goto LABEL_6;
            case 'd':
              v14 = a3;
              a3 += 2;
              v15 = *v14;
              if (v15 >= 0)
                v16 = v15;
              else
                v16 = -v15;
              result = (uint64_t)sprintf1da(v3, v16, v32, 0, v15 >> 31);
              goto LABEL_7;
            case 'e':
              v17 = (double *)a3;
              a3 += 2;
              result = sprintf_eR8(v3, *v17);
              goto LABEL_7;
            case 'f':
              v18 = (double *)a3;
              a3 += 2;
              result = (uint64_t)sprintf_sgR8(v3, *v18);
              goto LABEL_7;
            case 'g':
              v19 = (double *)a3;
              a3 += 2;
              result = (uint64_t)sprintf_gR8(v3, *v19);
              goto LABEL_7;
            default:
              if (v4 != 88)
                goto LABEL_36;
              v13 = (unint64_t *)a3;
              a3 += 2;
              result = (uint64_t)sprintf_1X(v3, *v13);
              break;
          }
          goto LABEL_7;
        }
        switch(v4)
        {
          case 's':
            v20 = (_BYTE **)a3;
            a3 += 2;
            v21 = *v20;
            v22 = *v21;
            if (*v21)
            {
              v23 = *v3;
              v24 = v21 + 1;
              do
              {
                *v3 = v23 + 1;
                *v23 = v22;
                v23 = *v3;
                if (*v3 >= v3[3])
                {
                  v23 = v3[2];
                  *v3 = v23;
                }
                v25 = *v24++;
                v22 = v25;
              }
              while (v25);
            }
            goto LABEL_7;
          case 'u':
            v26 = a3;
            a3 += 2;
            result = (uint64_t)sprintf_1u(v3, *v26);
            goto LABEL_7;
          case 'x':
            v12 = a3;
            a3 += 2;
            result = (uint64_t)sprintf_1x(v3, *v12);
            goto LABEL_7;
        }
LABEL_36:
        if ((v4 - 48) < 0xAu || v4 <= 0x2Eu && ((1 << v4) & 0x680800000000) != 0)
        {
          v6 = 1;
          goto LABEL_14;
        }
        v27 = (*v3)++;
        *v27 = 37;
        v28 = *v3;
        if (*v3 >= v3[3])
        {
          v28 = v3[2];
          *v3 = v28;
        }
        v29 = *v5;
        *v3 = v28 + 1;
        *v28 = v29;
      }
      else
      {
        v7 = (*v3)++;
        *v7 = v4;
      }
LABEL_6:
      if (*v3 >= v3[3])
      {
        v6 = 0;
        *v3 = v3[2];
        goto LABEL_14;
      }
LABEL_7:
      v6 = 0;
LABEL_14:
      v11 = *++v5;
      v4 = v11;
    }
    while (v11);
  }
  v30 = (*v3)++;
  *v30 = 10;
  if (*v3 >= v3[3])
    *v3 = v3[2];
  return result;
}

uint64_t GncP04_05HandlePosEventInd(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  int v4;
  int v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  unint64_t v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  size_t v15;
  int v16;
  uint64_t v17;
  char v18;
  char v19;
  char *v20;
  char *v21;
  int v22;
  unsigned __int16 v23;
  uint64_t v24;
  size_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  unsigned __int16 *v29;
  unsigned __int8 *v30;
  _DWORD *v31;
  unsigned __int16 *v32;
  unsigned __int16 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned __int16 v37;
  uint64_t v38;
  unsigned __int16 v39;
  char v40;
  char v41;
  uint64_t v42;
  size_t v43;
  int v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  char v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  unsigned __int8 *v60;
  char __str[1040];
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v2 = mach_continuous_time();
      v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_POS_EVENT SMClient,%hhu,Ses,%u,PosOp,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP04_05HandlePosEventInd", *(unsigned __int8 *)(a1 + 12), *(unsigned __int16 *)(a1 + 14), *(unsigned __int8 *)(a1 + 16));
      LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
    }
    v4 = *(unsigned __int8 *)(a1 + 12);
    v5 = *(unsigned __int16 *)(a1 + 14);
    if (*(_BYTE *)(a1 + 16))
    {
      v6 = 0;
      v7 = 1;
      while (1)
      {
        v8 = v7;
        if (*((_BYTE *)&g_GncPCntxtInfo + 36 * v6 + 8) == 1
          && *((unsigned __int8 *)&g_GncPCntxtInfo + 36 * v6 + 4) == v4
          && *((unsigned __int16 *)&g_GncPCntxtInfo + 18 * v6 + 3) == v5)
        {
          break;
        }
        v7 = 0;
        v6 = 1;
        if ((v8 & 1) == 0)
        {
          v6 = 0;
          v9 = 1;
          while (1)
          {
            v10 = v9;
            if (!*((_BYTE *)&g_GncPCntxtInfo + 36 * v6 + 8))
              break;
            v9 = 0;
            v6 = 1;
            if ((v10 & 1) == 0)
            {
              if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
                goto LABEL_47;
              bzero(__str, 0x410uLL);
              v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              v57 = *(unsigned __int16 *)(a1 + 14);
              v58 = *(unsigned __int8 *)(a1 + 16);
              v55 = 2054;
              v56 = *(unsigned __int8 *)(a1 + 12);
              v12 = "GncP04_07ProcessPosEvent";
              v13 = "%10u %s%c %s: #%04hx Client,%hhu,ID,%u,PosOp,%u\n";
LABEL_25:
              v23 = snprintf(__str, 0x40FuLL, v13, v11, "GNC", 87, v12, v55, v56, v57, v58);
LABEL_46:
              LbsOsaTrace_WriteLog(8u, __str, v23, 2, 1);
              goto LABEL_47;
            }
          }
          if (BYTE2(g_GncPCntxtInfo) < 2u)
          {
            ++BYTE2(g_GncPCntxtInfo);
            if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v27 = mach_continuous_time();
              v25 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Instance,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v27), "GNC", 73, "GncP04_03IncreaseInstnCount", BYTE2(g_GncPCntxtInfo));
              v26 = 4;
LABEL_31:
              LbsOsaTrace_WriteLog(8u, __str, v25, v26, 1);
            }
          }
          else if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            v24 = mach_continuous_time();
            v25 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Count,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "GNC", 87, "GncP04_03IncreaseInstnCount", 770, BYTE2(g_GncPCntxtInfo));
            v26 = 2;
            goto LABEL_31;
          }
          v59 = 0;
          goto LABEL_34;
        }
      }
      v59 = 1;
LABEL_34:
      v28 = (char *)&g_GncPCntxtInfo + 36 * v6;
      v28[8] = 1;
      v28[4] = *(_BYTE *)(a1 + 12);
      v60 = (unsigned __int8 *)(v28 + 4);
      *((_WORD *)v28 + 3) = *(_WORD *)(a1 + 14);
      v29 = (unsigned __int16 *)(v28 + 6);
      v28[9] = *(_BYTE *)(a1 + 16);
      v30 = (unsigned __int8 *)(v28 + 9);
      *(_OWORD *)(v28 + 12) = *(_OWORD *)(a1 + 20);
      v31 = v28 + 12;
      *((_WORD *)v28 + 14) = *(_WORD *)(a1 + 36);
      v32 = (unsigned __int16 *)(v28 + 28);
      *(_DWORD *)(v28 + 30) = *(_DWORD *)(a1 + 38);
      v33 = (unsigned __int16 *)(v28 + 30);
      *(_DWORD *)(v28 + 34) = *(_DWORD *)(a1 + 42);
      v34 = (unsigned __int8 *)(v28 + 34);
      v28[38] = *(_BYTE *)(a1 + 46);
      v35 = (unsigned __int8 *)(v28 + 38);
      if (LbsOsaTrace_IsLoggingAllowed(8u, 3, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v36 = mach_continuous_time();
        v37 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Client,%hhu,ID,%u,Output,%u,ReqRcvd,%u,Deadline,%u,Emergency,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v36), "GNC", 77, "GncP04_07ProcessPosEvent", 2057, *v60, *v29, *v30, *v31, *((_DWORD *)&g_GncPCntxtInfo + 9 * v6 + 4), *((unsigned __int8 *)&g_GncPCntxtInfo + 36 * v6 + 37));
        LbsOsaTrace_WriteLog(8u, __str, v37, 3, 1);
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 3, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v38 = mach_continuous_time();
        v39 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StartTime,%u,Int,%u,HAcc,%u,Vacc,%u,ConstMask,%u,PrefFtaMeasTime,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v38), "GNC", 77, "GncP04_07ProcessPosEvent", 2057, *(_DWORD *)(v35 - 18), *(_DWORD *)(v35 - 14), *v32, *v33, *v34, *v35);
        LbsOsaTrace_WriteLog(8u, __str, v39, 3, 1);
      }
      if (*v60 == 1)
      {
        GncP16_23UpdateStateFGSession(1);
        v40 = v59;
        if ((*(_BYTE *)(a1 + 16) & 4) == 0)
          v40 = 1;
        if ((v40 & 1) == 0)
          GncP12_10ClearPeRtiInfo();
      }
      else if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Invalid ClientID,%hhu\n");
        goto LABEL_46;
      }
LABEL_47:
      switch((char)g_GncPStateInfo)
      {
        case 0:
        case 5:
        case 10:
        case 11:
        case 16:
          return 0;
        case 1:
        case 3:
          v41 = 2;
          goto LABEL_58;
        case 2:
        case 4:
          v41 = 3;
          goto LABEL_58;
        case 6:
          v41 = 7;
          goto LABEL_58;
        case 7:
        case 8:
        case 9:
        case 14:
        case 15:
          if (*(_BYTE *)(a1 + 16))
            v41 = 6;
          else
            v41 = 1;
LABEL_58:
          GncP04_19SendPosEvntResp(v41);
          return 0;
        default:
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
            return 0;
          bzero(__str, 0x410uLL);
          v46 = mach_continuous_time();
          v15 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v46), "GNC", 87, "GncP04_05HandlePosEventInd", 770);
          v16 = 2;
          break;
      }
      goto LABEL_17;
    }
    v17 = 0;
    v18 = 1;
    while (1)
    {
      v19 = v18;
      if (*((_BYTE *)&g_GncPCntxtInfo + 36 * v17 + 8) == 1)
      {
        v20 = (char *)&g_GncPCntxtInfo + 36 * v17;
        v22 = v20[4];
        v21 = v20 + 4;
        if (v22 == v4 && *((unsigned __int16 *)&g_GncPCntxtInfo + 18 * v17 + 3) == v5)
          break;
      }
      v18 = 0;
      v17 = 1;
      if ((v19 & 1) == 0)
      {
        if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          v57 = *(unsigned __int16 *)(a1 + 14);
          v58 = *(unsigned __int8 *)(a1 + 16);
          v55 = 2050;
          v56 = *(unsigned __int8 *)(a1 + 12);
          v12 = "GncP04_06HandleStopPosEvent";
          v13 = "%10u %s%c %s: #%04hx Client,%hhu,Ses,%u,PosOp,%u\n";
          goto LABEL_25;
        }
        goto LABEL_47;
      }
    }
    if (v4 != 1)
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v54 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        v23 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ClientID,%hhu\n", v54);
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    *(_DWORD *)(v21 + 31) = 0;
    *(_OWORD *)v21 = 0u;
    *((_OWORD *)v21 + 1) = 0u;
    if ((BYTE2(g_GncPCntxtInfo) - 3) > 0xFDu)
    {
      --BYTE2(g_GncPCntxtInfo);
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        goto LABEL_67;
      bzero(__str, 0x410uLL);
      v47 = mach_continuous_time();
      v43 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Instance,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v47), "GNC", 73, "GncP04_04DecreaseInstnCount", BYTE2(g_GncPCntxtInfo));
      v44 = 4;
    }
    else
    {
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        goto LABEL_67;
      bzero(__str, 0x410uLL);
      v42 = mach_continuous_time();
      v43 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Count,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v42), "GNC", 87, "GncP04_04DecreaseInstnCount", 770, BYTE2(g_GncPCntxtInfo));
      v44 = 2;
    }
    LbsOsaTrace_WriteLog(8u, __str, v43, v44, 1);
LABEL_67:
    v48 = 0;
    v49 = 1;
    while (1)
    {
      v50 = v49;
      if (*((_BYTE *)&g_GncPCntxtInfo + 36 * v48 + 8) == 1 && !*((_BYTE *)&g_GncPCntxtInfo + 36 * v48 + 36))
        break;
      v49 = 0;
      v48 = 1;
      if ((v50 & 1) == 0)
      {
        GncP16_23UpdateStateFGSession(0);
        break;
      }
    }
    v51 = 0;
    v52 = 1;
    do
    {
      v53 = v52;
      if (*((_BYTE *)&g_GncPCntxtInfo + 36 * v51 + 8) == 1 && (*((_BYTE *)&g_GncPCntxtInfo + 36 * v51 + 9) & 8) != 0)
        goto LABEL_47;
      v52 = 0;
      v51 = 1;
    }
    while ((v53 & 1) != 0);
    if (qword_253FAC988)
      free((void *)qword_253FAC988);
    qword_253FAC988 = 0;
    goto LABEL_47;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v14 = mach_continuous_time();
    v15 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 69, "GncP04_05HandlePosEventInd", 517);
    v16 = 0;
LABEL_17:
    LbsOsaTrace_WriteLog(8u, __str, v15, v16, 1);
  }
  return 0;
}

void GncP04_19SendPosEvntResp(char a1)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  unsigned __int16 v5;
  char __str[1040];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = gnssOsa_Calloc("GncP04_19SendPosEvntResp", 496, 1, 0x10uLL);
  if (v2)
  {
    v3 = v2;
    v2[12] = a1;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v4 = mach_continuous_time();
      v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_POS_EVENT_RSP =>GNCS Status,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 73, "GncP04_19SendPosEvntResp", v3[12]);
      LbsOsaTrace_WriteLog(8u, __str, v5, 4, 1);
    }
    AgpsSendFsmMsg(134, 130, 8784387, v3);
  }
}

uint64_t GncP04_08GetNextSessInstn(unsigned int a1, void *a2, unsigned __int8 a3)
{
  uint64_t v3;
  int v4;
  char v5;
  char v6;
  uint64_t v7;
  int IsLoggingAllowed;
  uint64_t v9;
  unsigned __int16 v10;
  char __str[1040];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = 0;
    v4 = 0;
    v5 = 1;
    while (1)
    {
      v6 = v5;
      if (*((_BYTE *)&g_GncPCntxtInfo + 36 * v3 + 8) == 1
        && (*((_BYTE *)&g_GncPCntxtInfo + 36 * v3 + 9) & a3) != 0
        && a1 < ++v4)
      {
        break;
      }
      v5 = 0;
      v7 = 0;
      v3 = 1;
      if ((v6 & 1) == 0)
        return v7;
    }
    memcpy_s("GncP04_08GetNextSessInstn", 391, a2, 0x24u, (char *)&g_GncPCntxtInfo + 36 * v3 + 4, 0x24uLL);
    return 1;
  }
  else
  {
    IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    v7 = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 87, "GncP04_08GetNextSessInstn", 513);
      LbsOsaTrace_WriteLog(8u, __str, v10, 2, 1);
      return 0;
    }
  }
  return v7;
}

uint64_t GncP04_18ChkAnyFGSessQualMet(void)
{
  uint64_t v0;
  char v1;
  char v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v6;
  unsigned __int16 v7;
  char __str[1040];
  uint64_t v9;

  v0 = 0;
  v9 = *MEMORY[0x24BDAC8D0];
  v1 = 1;
  while (1)
  {
    v2 = v1;
    v3 = (unsigned __int8 *)&g_GncPCntxtInfo + 36 * v0;
    if (v3[8] == 1 && v3[4] == 1 && GncP01_33CheckSessionQualMet(v3 + 4))
      break;
    v1 = 0;
    v4 = 0;
    v0 = 1;
    if ((v2 & 1) == 0)
      return v4;
  }
  if (!LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    return 1;
  bzero(__str, 0x410uLL);
  v6 = mach_continuous_time();
  v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SesId,%u,Output,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 73, "GncP04_18ChkAnyFGSessQualMet", *((unsigned __int16 *)&g_GncPCntxtInfo + 18 * v0 + 3), *((unsigned __int8 *)&g_GncPCntxtInfo + 36 * v0 + 9));
  v4 = 1;
  LbsOsaTrace_WriteLog(8u, __str, v7, 4, 1);
  return v4;
}

void GncP04_21SendClearGnssAck(char a1)
{
  int v1;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  unsigned __int16 v6;
  char __str[1040];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v1 = g_GnssDataClrMask;
  if (g_GnssDataClrMask)
  {
    v3 = gnssOsa_Calloc("GncP04_21SendClearGnssAck", 524, 1, 0x14uLL);
    if (v3)
    {
      v4 = v3;
      v3[12] = a1;
      *((_DWORD *)v3 + 4) = v1;
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v5 = mach_continuous_time();
        v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_CLEAR_GNSS_RSP =>GNM Status,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 73, "GncP04_21SendClearGnssAck", v4[12]);
        LbsOsaTrace_WriteLog(8u, __str, v6, 4, 1);
      }
      AgpsSendFsmMsg(134, 128, 8786436, v4);
      g_GnssDataClrMask = 0;
    }
  }
}

BOOL GncP04_24Is3GPPMeasFTAPrefReq(void)
{
  uint64_t v0;
  int v1;
  int v2;
  _BOOL8 result;
  int v4;

  v0 = 0;
  v1 = 1;
  do
  {
    while (1)
    {
      v2 = v1;
      if (*((_BYTE *)&g_GncPCntxtInfo + 36 * v0 + 8) == 1 && (*((_BYTE *)&g_GncPCntxtInfo + 36 * v0 + 9) & 4) != 0)
        break;
      v1 = 0;
      result = 0;
      v0 = 1;
      if ((v2 & 1) == 0)
        return result;
    }
    v4 = *((unsigned __int8 *)&g_GncPCntxtInfo + 36 * v0 + 38);
    result = v4 != 0;
    if (v4)
      break;
    v1 = 0;
    v0 = 1;
  }
  while (((v2 ^ 1) & 1) == 0);
  return result;
}

BOOL GncP04_25Is3GPPMeasGPSPrefReq(void)
{
  uint64_t v0;
  int v1;
  int v2;
  _BOOL8 result;
  int v4;

  v0 = 0;
  v1 = 1;
  do
  {
    while (1)
    {
      v2 = v1;
      if (*((_BYTE *)&g_GncPCntxtInfo + 36 * v0 + 8) == 1 && (*((_BYTE *)&g_GncPCntxtInfo + 36 * v0 + 9) & 4) != 0)
        break;
      v1 = 0;
      result = 0;
      v0 = 1;
      if ((v2 & 1) == 0)
        return result;
    }
    v4 = *((unsigned __int8 *)&g_GncPCntxtInfo + 36 * v0 + 38);
    result = v4 == 0;
    if (!v4)
      break;
    v1 = 0;
    v0 = 1;
  }
  while (((v2 ^ 1) & 1) == 0);
  return result;
}

uint64_t GncP04_30HandleNmeaDataReq(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  __int16 v4;
  uint64_t v5;
  size_t v6;
  int v7;
  uint64_t v8;
  char __str[1040];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
      return 0;
    bzero(__str, 0x410uLL);
    v5 = mach_continuous_time();
    v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 69, "GncP04_30HandleNmeaDataReq", 517);
    v7 = 0;
LABEL_11:
    LbsOsaTrace_WriteLog(8u, __str, v6, v7, 1);
    return 0;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_NMEA_DATA_REQ Req,%u,Mask,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "GncP04_30HandleNmeaDataReq", *(unsigned __int8 *)(a1 + 12), *(unsigned __int16 *)(a1 + 14));
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  v4 = *(unsigned __int8 *)(a1 + 12);
  if (*(_BYTE *)(a1 + 12))
  {
    v4 = *(_WORD *)(a1 + 14);
    if (!v4)
    {
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        return 0;
      bzero(__str, 0x410uLL);
      v8 = mach_continuous_time();
      v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "GncP04_30HandleNmeaDataReq", 515);
      v7 = 2;
      goto LABEL_11;
    }
  }
  LOWORD(g_GncPCntxtInfo) = v4;
  GncP03_12SendUpdtCfg((unsigned __int16 *)&g_GncPCntxtInfo, 0);
  return 0;
}

char *NK_IntConstel_TO_IntMeas(char *result, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v4;
  int v5;
  double v6;
  unsigned int v7;
  int v8;
  double v9;
  unsigned int v10;
  double v11;
  unsigned int v12;
  double v13;
  _WORD *v14;
  unsigned int v15;
  double v16;
  unsigned int v17;
  int v18;
  int v19;
  _OWORD v20[3];
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned __int8 *)(a2 + 23264);
  v22 = 0;
  v21 = 0u;
  memset(v20, 0, sizeof(v20));
  v5 = *(unsigned __int8 *)(a2 + 23264);
  if (v5 == 4)
  {
    if (*(int *)(a3 + 33548) >= 1 && *(_WORD *)(a3 + 33556) && *(_WORD *)(a3 + 33564))
    {
      v8 = *(_DWORD *)(a2 + 23268);
      if (v8 == 5)
      {
        v16 = *(double *)(a2 + 24) + -14.0;
        if (v16 < 0.0)
          v16 = v16 + 604800.0;
        v6 = ((double)*(__int16 *)(a3 + 33564) * 0.1 + (double)*(__int16 *)(a3 + 33566) * 0.1 * v16)
           * 0.000000001
           * 299792458.0;
        if ((int)v6 >= 0)
          v17 = (int)v6;
        else
          v17 = -(int)v6;
        if (v17 >= 0x12D)
          return EvLog_v(" NK_IntConstel_TO_IntMeas: Large BDS-GLO Tim Off: %d");
        v13 = *(double *)(a2 + 752) - *(double *)(a2 + 744);
        v14 = result + 10996;
        v11 = 10.0;
        v12 = 1;
        goto LABEL_35;
      }
      if (v8 != 4)
        return result;
      v9 = *(double *)(a2 + 24) + -14.0;
      if (v9 < 0.0)
        v9 = v9 + 604800.0;
      v6 = ((double)*(__int16 *)(a3 + 33556) * 0.1 + (double)*(__int16 *)(a3 + 33558) * 0.1 * v9)
         * 0.000000001
         * 299792458.0;
      if ((int)v6 >= 0)
        v10 = (int)v6;
      else
        v10 = -(int)v6;
      if (v10 >= 0x1F)
        return EvLog_v(" NK_IntConstel_TO_IntMeas: Large BDS-GPS Tim Off: %d");
      *((double *)result + 915) = v6;
      *((_QWORD *)result + 916) = 0x4024000000000000;
      v11 = 10.0;
    }
    else
    {
      if (*((_DWORD *)result + 2762) || *(_DWORD *)(a2 + 23268) != 4)
        return result;
      v11 = 30.0;
      v6 = 0.0;
    }
    v12 = 0;
    v13 = *(double *)(a2 + 752) - *(double *)(a2 + 736);
    v14 = result + 10994;
LABEL_35:
    v15 = 2;
LABEL_36:
    *((double *)&v20[1] + 1) = v6;
    *(double *)&v20[2] = v11 * v11;
    LOBYTE(v20[0]) = 1;
    DWORD1(v20[0]) = 2;
    *((_QWORD *)&v21 + 1) = 0x4415AF1D78B58C40;
    result = (char *)KFSt_DMeas_Update(v15, v12, 0xBu, (unsigned __int8 *)v20, (double *)result + 109, v14, v13 * 299792458.0);
    if ((_DWORD)result)
    {
      v18 = *v4;
      if (v18 == 4)
      {
        *((_DWORD *)v4 + 387) = DWORD1(v20[0]);
        v19 = *((_DWORD *)v4 + 1);
        if (v19 == 5)
        {
          v4[1608] = 1;
        }
        else if (v19 == 4)
        {
          v4[1607] = 1;
          v4[32] = 1;
          *(_OWORD *)(v4 + 40) = *(_OWORD *)((char *)&v20[1] + 8);
        }
      }
      else if (v18 == 2)
      {
        *((_DWORD *)v4 + 386) = DWORD1(v20[0]);
        v4[1606] = 1;
        v4[8] = 1;
        *(_OWORD *)(a2 + 23280) = *(_OWORD *)((char *)&v20[1] + 8);
      }
      if ((unsigned __int16)g_Enable_Event_Log >= 6u)
        return EvLog_v(" NK_IntConstel_TO_IntMeas: Time Offset applied: %d %d ");
    }
    return result;
  }
  if (v5 == 2 && *(_BYTE *)(a3 + 16296))
  {
    v6 = (double)*(int *)(a3 + 16236) * 9.31322575e-10 * 299792458.0;
    if ((int)v6 >= 0)
      v7 = (int)v6;
    else
      v7 = -(int)v6;
    if (v7 >= 0x12D)
      return EvLog_v(" NK_IntConstel_TO_IntMeas: Large GGTO: %d");
    *((double *)result + 911) = v6;
    *((_QWORD *)result + 912) = 0x4024000000000000;
    if (*(_DWORD *)(a2 + 23268) == 1)
    {
      v12 = 0;
      v13 = *(double *)(a2 + 744) - *(double *)(a2 + 736);
      v14 = result + 10992;
      v11 = 10.0;
      v15 = 1;
      goto LABEL_36;
    }
  }
  return result;
}

unsigned __int16 *Gnm02_11ReqNewInstn(void)
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int16 v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  unsigned __int16 v5;
  unint64_t v6;
  BOOL v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned __int16 v10;
  char __str[1040];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = 2u;
  while (*(_QWORD *)&g_GnmInstances[v0])
  {
    v0 += 2;
    if (v0 == 8)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v1 = mach_continuous_time();
        v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNM", 87, "Gnm02_11ReqNewInstn", 2054);
        LbsOsaTrace_WriteLog(0xBu, __str, v2, 2, 1);
      }
      return 0;
    }
  }
  v4 = (unsigned __int16 *)gnssOsa_Calloc("Gnm02_11ReqNewInstn", 186, 1, 0x10uLL);
  v3 = v4;
  *(_QWORD *)&g_GnmInstances[v0] = v4;
  if (v4)
  {
    v5 = g_GnmInstances[0];
    do
    {
      v6 = 0;
      v7 = 0;
      if ((unsigned __int16)(v5 >> 2) < 0xFFFu)
        ++v5;
      else
        v5 = 1;
      do
      {
        v8 = *(unsigned __int16 **)&g_GnmInstances[2 * v6 + 2];
        if (v8 && *v8 == v5)
          break;
        v7 = v6++ > 1;
      }
      while (v6 != 3);
    }
    while (!v7);
    g_GnmInstances[0] = __PAIR32__(HIWORD(g_GnmInstances[0]), v5) + 0x10000;
    *v4 = v5;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 73, "Gnm02_11ReqNewInstn", 2057, *v3);
      LbsOsaTrace_WriteLog(0xBu, __str, v10, 4, 1);
    }
  }
  return v3;
}

unsigned __int16 *Gnm02_12ReqAssistInstn(int a1, const char *a2, int a3, _BYTE *a4)
{
  char v5;
  uint64_t InstnFromAssistId;
  unsigned __int16 *v9;
  uint64_t v10;
  unsigned __int16 v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  unsigned __int16 v18;
  _DWORD *v20;
  uint64_t v21;
  unsigned __int16 v22;
  char __str[1040];
  uint64_t v24;

  v5 = a3;
  v24 = *MEMORY[0x24BDAC8D0];
  InstnFromAssistId = Gnm02_33GetInstnFromAssistId(a1, a3);
  if (InstnFromAssistId)
  {
    v9 = (unsigned __int16 *)InstnFromAssistId;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v10 = mach_continuous_time();
      v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MODIFY %s GNMInstn,%u,AssistInstn,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 73, "Gnm02_12ReqAssistInstn", 2057, a2, *v9, **((_DWORD **)v9 + 1));
      LbsOsaTrace_WriteLog(0xBu, __str, v11, 4, 1);
    }
    if (a4)
      *a4 = 1;
    return v9;
  }
  v12 = Gnm02_11ReqNewInstn();
  if (v12)
  {
    v9 = v12;
    v13 = 2u;
    while (*(unsigned __int16 **)&g_GnmInstances[v13] != v12)
    {
      v13 += 2;
      if (v13 == 8)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Instn\n");
          goto LABEL_20;
        }
LABEL_21:
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v17 = mach_continuous_time();
          v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NewAssistInstn %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNM", 87, "Gnm02_12ReqAssistInstn", 2049, a2);
          LbsOsaTrace_WriteLog(0xBu, __str, v18, 2, 1);
        }
        Gnm02_21DeleteInstn(v9);
        return 0;
      }
    }
    if (*((_BYTE *)v12 + 2))
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
        goto LABEL_21;
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnType\n");
LABEL_20:
      LbsOsaTrace_WriteLog(0xBu, __str, v14, 2, 1);
      goto LABEL_21;
    }
    if (*((_QWORD *)v12 + 1))
    {
      if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
        goto LABEL_21;
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
      goto LABEL_20;
    }
    v20 = gnssOsa_Calloc("Gnm02_03AddAssistParams", 107, 1, 0x50uLL);
    *((_QWORD *)v9 + 1) = v20;
    if (!v20)
      goto LABEL_21;
    *((_BYTE *)v9 + 2) = 2;
    *v20 = a1;
    *(_BYTE *)(*((_QWORD *)v9 + 1) + 5) = v5;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v21 = mach_continuous_time();
      v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SETUP %s GNMInstn,%u,AssistInstn,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "GNM", 73, "Gnm02_12ReqAssistInstn", 2057, a2, *v9, **((_DWORD **)v9 + 1));
      LbsOsaTrace_WriteLog(0xBu, __str, v22, 4, 1);
    }
    if (a4)
      *a4 = 0;
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v15 = mach_continuous_time();
      v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NewInstn %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNM", 87, "Gnm02_12ReqAssistInstn", 2049, a2);
      LbsOsaTrace_WriteLog(0xBu, __str, v16, 2, 1);
    }
    return 0;
  }
  return v9;
}

uint64_t Gnm02_33GetInstnFromAssistId(int a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v9;
  unsigned __int16 v10;
  char __str[1040];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = 2u;
  while (1)
  {
    v4 = *(_QWORD *)&g_GnmInstances[v3];
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        if (*(_BYTE *)(v4 + 2) == 2 && *(unsigned __int8 *)(v5 + 5) == a2 && *(_DWORD *)v5 == a1)
          break;
      }
    }
    v3 += 2;
    if (v3 == 8)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v6 = mach_continuous_time();
        v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx AsstId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm02_33GetInstnFromAssistId", 2052, a1);
        LbsOsaTrace_WriteLog(0xBu, __str, v7, 2, 1);
      }
      return 0;
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v9 = mach_continuous_time();
    v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GNMInstn,%u,AsstId,%u found\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 73, "Gnm02_33GetInstnFromAssistId", **(unsigned __int16 **)&g_GnmInstances[v3], a1);
    LbsOsaTrace_WriteLog(0xBu, __str, v10, 4, 1);
  }
  return *(_QWORD *)&g_GnmInstances[v3];
}

BOOL Gnm02_21DeleteInstn(unsigned __int16 *a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;
  unsigned __int16 v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned __int16 v11;
  void *v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  char __str[1040];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
LABEL_5:
    v3 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v4 = mach_continuous_time();
      v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Instn\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 87, "Gnm02_21DeleteInstn", 2050);
      LbsOsaTrace_WriteLog(0xBu, __str, v5, 2, 1);
      return 0;
    }
    return v3;
  }
  v2 = 2u;
  while (*(unsigned __int16 **)&g_GnmInstances[v2] != a1)
  {
    v2 += 2;
    if (v2 == 8)
      goto LABEL_5;
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v6 = mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Deleted GNMInstn,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm02_21DeleteInstn", *a1);
    LbsOsaTrace_WriteLog(0xBu, __str, v7, 4, 1);
  }
  v8 = *((_QWORD *)a1 + 1);
  if (v8)
  {
    v9 = *((unsigned __int8 *)a1 + 2);
    if ((v9 - 2) >= 2)
    {
      if (v9 == 1)
      {
        v12 = *(void **)(v8 + 72);
        if (v12)
          free(v12);
        *(_QWORD *)(v8 + 72) = 0;
        v3 = (*(_BYTE *)(v8 + 4) & 7) != 0;
      }
      else
      {
        v3 = 0;
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v13 = mach_continuous_time();
          v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnType,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNM", 87, "Gnm02_21DeleteInstn", 2050, *((unsigned __int8 *)a1 + 2));
          LbsOsaTrace_WriteLog(0xBu, __str, v14, 2, 1);
          v3 = 0;
        }
      }
      v8 = *((_QWORD *)a1 + 1);
      if (!v8)
        goto LABEL_22;
    }
    else
    {
      v3 = 1;
    }
    free((void *)v8);
LABEL_22:
    *((_QWORD *)a1 + 1) = 0;
    *((_BYTE *)a1 + 2) = 0;
    goto LABEL_23;
  }
  v3 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v10 = mach_continuous_time();
    v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnInfo\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNM", 87, "Gnm02_21DeleteInstn", 2050);
    LbsOsaTrace_WriteLog(0xBu, __str, v11, 2, 1);
    v3 = 0;
  }
LABEL_23:
  v15 = 2u;
  while (*(unsigned __int16 **)&g_GnmInstances[v15] != a1)
  {
    v15 += 2;
    if (v15 == 8)
      return v3;
  }
  free(a1);
  *(_QWORD *)&g_GnmInstances[v15] = 0;
  if (HIWORD(g_GnmInstances[0]))
    --HIWORD(g_GnmInstances[0]);
  return v3;
}

unsigned __int16 *Gnm02_13ReqNewNafInstn(int a1, const char *a2)
{
  unsigned __int16 v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  unsigned __int16 v10;
  _DWORD *v12;
  uint64_t v13;
  unsigned __int16 v14;
  unint64_t v15;
  unint64_t v16;
  char __str[1040];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (Gnm02_32GetInstnFromNafId(a1))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      return 0;
    bzero(__str, 0x410uLL);
    v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx %s\n", v15);
LABEL_4:
    LbsOsaTrace_WriteLog(0xBu, __str, v4, 2, 1);
    return 0;
  }
  v5 = Gnm02_11ReqNewInstn();
  if (!v5)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      return 0;
    bzero(__str, 0x410uLL);
    v16 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NewInstn %s\n", v16);
    goto LABEL_4;
  }
  v6 = v5;
  v7 = 2u;
  while (*(unsigned __int16 **)&g_GnmInstances[v7] != v5)
  {
    v7 += 2;
    if (v7 == 8)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Instn\n");
        goto LABEL_19;
      }
LABEL_20:
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v9 = mach_continuous_time();
        v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NewNafInst %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 87, "Gnm02_13ReqNewNafInstn", 2049, a2);
        LbsOsaTrace_WriteLog(0xBu, __str, v10, 2, 1);
      }
      Gnm02_21DeleteInstn(v6);
      return 0;
    }
  }
  if (*((_BYTE *)v5 + 2))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      goto LABEL_20;
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnType\n");
LABEL_19:
    LbsOsaTrace_WriteLog(0xBu, __str, v8, 2, 1);
    goto LABEL_20;
  }
  if (*((_QWORD *)v5 + 1))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      goto LABEL_20;
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
    goto LABEL_19;
  }
  v12 = gnssOsa_Calloc("Gnm02_04AddNafParams", 147, 1, 0x50uLL);
  *((_QWORD *)v6 + 1) = v12;
  if (!v12)
    goto LABEL_20;
  *((_BYTE *)v6 + 2) = 1;
  *v12 = a1;
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v13 = mach_continuous_time();
    v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx %s GNMInstn,%u,NaftInstn,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNM", 73, "Gnm02_13ReqNewNafInstn", 2057, a2, *v6, a1);
    LbsOsaTrace_WriteLog(0xBu, __str, v14, 4, 1);
  }
  return v6;
}

uint64_t Gnm02_32GetInstnFromNafId(int a1)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned __int16 v6;
  uint64_t v8;
  unsigned __int16 v9;
  char __str[1040];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = 2u;
  while (1)
  {
    v3 = *(_QWORD *)&g_GnmInstances[v2];
    if (v3)
    {
      v4 = *(_DWORD **)(v3 + 8);
      if (v4)
      {
        if (*(_BYTE *)(v3 + 2) == 1 && *v4 == a1)
          break;
      }
    }
    v2 += 2;
    if (v2 == 8)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v5 = mach_continuous_time();
        v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx NafId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 68, "Gnm02_32GetInstnFromNafId", 2052, a1);
        LbsOsaTrace_WriteLog(0xBu, __str, v6, 5, 1);
      }
      return 0;
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v8 = mach_continuous_time();
    v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GNMInstn,%u,NafInstn,%u found\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm02_32GetInstnFromNafId", **(unsigned __int16 **)&g_GnmInstances[v2], a1);
    LbsOsaTrace_WriteLog(0xBu, __str, v9, 4, 1);
  }
  return *(_QWORD *)&g_GnmInstances[v2];
}

uint64_t Gnm02_15AddEarlyStartParams(unsigned __int16 *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 v4;
  _DWORD *v6;
  char v7;
  uint64_t v8;
  unsigned __int16 v9;
  char __str[1040];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v2 = 2u;
    while (*(unsigned __int16 **)&g_GnmInstances[v2] != a1)
    {
      v2 += 2;
      if (v2 == 8)
        goto LABEL_5;
    }
    if (*((_BYTE *)a1 + 2))
    {
      v3 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnType\n");
        goto LABEL_13;
      }
    }
    else if (*((_QWORD *)a1 + 1))
    {
      v3 = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n");
        goto LABEL_13;
      }
    }
    else
    {
      v6 = gnssOsa_Calloc("Gnm02_15AddEarlyStartParams", 361, 1, 0x50uLL);
      *((_QWORD *)a1 + 1) = v6;
      if (!v6)
        return 0;
      *((_BYTE *)a1 + 2) = 3;
      *v6 = *a1;
      v7 = byte_253FFD8B6;
      if ((dword_253FFD8A8 & 0x400) == 0)
        v7 = 30;
      *(_BYTE *)(*((_QWORD *)a1 + 1) + 4) = v7;
      *(_BYTE *)(*((_QWORD *)a1 + 1) + 5) = 0;
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v8 = mach_continuous_time();
        v9 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GNMInstn,%u,EarlyStartInstn,%u,Timeout,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNM", 73, "Gnm02_15AddEarlyStartParams", *a1, **((_DWORD **)a1 + 1), *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + 4));
        v3 = 1;
        LbsOsaTrace_WriteLog(0xBu, __str, v9, 4, 1);
      }
      else
      {
        return 1;
      }
    }
  }
  else
  {
LABEL_5:
    v3 = 0;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Instn\n");
LABEL_13:
      LbsOsaTrace_WriteLog(0xBu, __str, v4, 2, 1);
      return 0;
    }
  }
  return v3;
}

BOOL Gnm02_23StopNafSession(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  _BOOL8 result;
  int IsLoggingAllowed;
  uint64_t v11;
  unsigned __int16 v12;
  char __str[1040];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v3 = mach_continuous_time();
    v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Clearing Instance NafID,%u,PosnType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNM", 73, "Gnm02_23StopNafSession", *(_DWORD *)v2, *(unsigned __int8 *)(v2 + 4));
    LbsOsaTrace_WriteLog(0xBu, __str, v4, 4, 1);
  }
  v5 = *(unsigned __int8 *)(v2 + 4);
  v6 = v5 > 4;
  v7 = (1 << v5) & 0x16;
  if (!v6 && v7 != 0)
    return Gnm10_28StopPositioning((unsigned __int16 *)a1);
  IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
  result = 0;
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    v11 = mach_continuous_time();
    v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PosnType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 87, "Gnm02_23StopNafSession", 770, *(unsigned __int8 *)(v2 + 4));
    LbsOsaTrace_WriteLog(0xBu, __str, v12, 2, 1);
    return 0;
  }
  return result;
}

uint64_t Gnm02_24AbortAllNafSessions(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  void (*v7)(uint64_t, uint64_t, _QWORD *);
  uint64_t v8;
  _QWORD v9[2];
  int v10;
  char v11;
  char __str[1040];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Aborting all NAF sessions\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm02_24AbortAllNafSessions");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  v4 = 2u;
  do
  {
    result = *(_QWORD *)&g_GnmInstances[v4];
    if (result)
    {
      v6 = *(unsigned int **)(result + 8);
      if (v6)
      {
        if (*(_BYTE *)(result + 2) == 1)
        {
          if ((v6[1] & 7) != 0 && *((_BYTE *)v6 + 64) == 1)
          {
            v7 = (void (*)(uint64_t, uint64_t, _QWORD *))*((_QWORD *)v6 + 7);
            v8 = *v6;
            v9[0] = 0;
            v9[1] = 0;
            v10 = 0;
            v11 = 1;
            v7(a1, v8, v9);
            result = *(_QWORD *)&g_GnmInstances[v4];
          }
          Gnm02_23StopNafSession(result);
          result = Gnm02_21DeleteInstn(*(unsigned __int16 **)&g_GnmInstances[v4]);
        }
      }
    }
    v4 += 2;
  }
  while (v4 != 8);
  return result;
}

uint64_t Gnm02_26AbortAllAssistSessions(void)
{
  uint64_t v0;
  unsigned __int16 v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  char __str[1040];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if ((LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0) & 1) != 0)
  {
    bzero(__str, 0x410uLL);
    v0 = mach_continuous_time();
    v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Aborting all assist sessions\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNM", 73, "Gnm02_26AbortAllAssistSessions");
    LbsOsaTrace_WriteLog(0xBu, __str, v1, 4, 1);
  }
  v2 = 2u;
  do
  {
    result = *(_QWORD *)&g_GnmInstances[v2];
    if (result)
    {
      v4 = *(_QWORD *)(result + 8);
      if (v4)
      {
        if (*(_BYTE *)(result + 2) == 2 && *(_BYTE *)(v4 + 5) == 1)
        {
          if ((*(_BYTE *)(v4 + 6) & 4) != 0)
          {
            result = Gnm13_09SendAsstGadData(result, 0, 1);
          }
          else if ((*(_BYTE *)(v4 + 6) & 2) != 0)
          {
            result = Gnm13_11SendAsstGnssMeas(result, 0, 1);
          }
          else
          {
            result = LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0);
            if ((_DWORD)result)
            {
              bzero(__str, 0x410uLL);
              v5 = mach_continuous_time();
              v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ReqType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 87, "Gnm02_26AbortAllAssistSessions", 770, *(unsigned __int8 *)(v4 + 6));
              result = LbsOsaTrace_WriteLog(0xBu, __str, v6, 2, 1);
            }
          }
        }
      }
    }
    v2 += 2;
  }
  while (v2 != 8);
  return result;
}

unsigned __int16 *Gnm02_31GetInstnFromInstnId(int a1)
{
  uint64_t v2;
  unsigned __int16 *result;
  uint64_t v4;
  unsigned __int16 v5;
  char __str[1040];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = 2u;
  while (1)
  {
    result = *(unsigned __int16 **)&g_GnmInstances[v2];
    if (result)
    {
      if (*result == a1)
        break;
    }
    v2 += 2;
    if (v2 == 8)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v4 = mach_continuous_time();
        v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 68, "Gnm02_31GetInstnFromInstnId", 2052, a1);
        LbsOsaTrace_WriteLog(0xBu, __str, v5, 5, 1);
      }
      return 0;
    }
  }
  return result;
}

uint64_t Gnm02_37GetInstnAssistReq(void)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned __int16 v5;
  uint64_t v6;
  unsigned __int16 v7;
  unsigned __int16 v10;
  unint64_t v12;
  unint64_t v13;
  char __str[1040];
  uint64_t v15;

  v0 = 2u;
  v15 = *MEMORY[0x24BDAC8D0];
  do
  {
    v1 = *(_QWORD *)&g_GnmInstances[v0];
    if (v1)
    {
      v2 = *(_QWORD *)(v1 + 8);
      if (v2)
      {
        v3 = *(unsigned __int8 *)(v1 + 2);
        if (v3 != 3)
        {
          if (v3 == 2)
          {
            if (*(_BYTE *)(v2 + 59))
            {
              if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
                return *(_QWORD *)&g_GnmInstances[v0];
              bzero(__str, 0x410uLL);
              v13 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GNMInstn,%u,AsstInstn,%u found requiring Asst\n", v13);
              goto LABEL_22;
            }
          }
          else if (v3 == 1)
          {
            if (*(_BYTE *)(v2 + 5))
            {
              if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
                return *(_QWORD *)&g_GnmInstances[v0];
              bzero(__str, 0x410uLL);
              v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
              v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: GNMInstn,%u,NafInstn,%u found requiring Asst\n", v12);
LABEL_22:
              LbsOsaTrace_WriteLog(0xBu, __str, v10, 4, 1);
              return *(_QWORD *)&g_GnmInstances[v0];
            }
          }
          else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
          {
            bzero(__str, 0x410uLL);
            v4 = mach_continuous_time();
            v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnType,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNM", 87, "Gnm02_37GetInstnAssistReq", 770, *(unsigned __int8 *)(*(_QWORD *)&g_GnmInstances[v0] + 2));
            LbsOsaTrace_WriteLog(0xBu, __str, v5, 2, 1);
          }
        }
      }
    }
    v0 += 2;
  }
  while (v0 != 8);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v6 = mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 87, "Gnm02_37GetInstnAssistReq", 2052);
    LbsOsaTrace_WriteLog(0xBu, __str, v7, 2, 1);
  }
  return 0;
}

uint64_t Gnm02_39GetEarlyStartInstn(void)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v5;
  unsigned __int16 v6;
  char __str[1040];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v0 = 2u;
  while (1)
  {
    v1 = *(_QWORD *)&g_GnmInstances[v0];
    if (v1)
    {
      if (*(_QWORD *)(v1 + 8) && *(_BYTE *)(v1 + 2) == 3)
        break;
    }
    v0 += 2;
    if (v0 == 8)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v2 = mach_continuous_time();
        v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm02_39GetEarlyStartInstn", 2052);
        LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
      }
      return 0;
    }
  }
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v5 = mach_continuous_time();
    v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ECALL:GNMInstn,%u,EarlyStartInstn,%u found\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNM", 73, "Gnm02_39GetEarlyStartInstn", **(unsigned __int16 **)&g_GnmInstances[v0], **(_DWORD **)(*(_QWORD *)&g_GnmInstances[v0] + 8));
    LbsOsaTrace_WriteLog(0xBu, __str, v6, 4, 1);
  }
  return *(_QWORD *)&g_GnmInstances[v0];
}

unsigned __int16 *Gnm02_52DeInitializeInstances(void)
{
  uint64_t v0;
  unsigned __int16 *result;

  v0 = 2u;
  do
  {
    result = *(unsigned __int16 **)&g_GnmInstances[v0];
    if (result)
      result = (unsigned __int16 *)Gnm02_21DeleteInstn(result);
    v0 += 2;
  }
  while (v0 != 8);
  g_GnmInstances[0] = 0;
  return result;
}

BOOL Gnm02_54IsEmerSessionOngoing(void)
{
  unint64_t v0;
  BOOL v1;
  uint64_t v2;
  uint64_t v3;

  v0 = 0;
  v1 = 1;
  do
  {
    v2 = *(_QWORD *)&g_GnmInstances[2 * v0 + 2];
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        if (*(_BYTE *)(v2 + 2) == 2 && *(_BYTE *)(v3 + 8))
          break;
      }
    }
    v1 = v0++ < 2;
  }
  while (v0 != 3);
  return v1;
}

uint64_t BaseBufInitBufWithMemory(uint64_t a1, int a2, uint64_t a3)
{
  char *v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  int v10;

  if (!a3)
    return 6;
  v6 = (char *)gnssOsa_Calloc("posp_alloc", 18, 1, 0x470uLL);
  *(_QWORD *)a1 = v6;
  if (v6)
  {
    if (a2 == 1)
    {
      v7 = v6 + 752;
      v8 = &UserBuffer;
      goto LABEL_9;
    }
    if (!a2)
    {
      v7 = v6 + 752;
      v8 = &SmallBuffer;
LABEL_9:
      memcpy(v7, v8, 0x120uLL);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 824))(a1, a3);
    }
    v6[196] = 0;
    v9 = 3;
    v10 = 3;
  }
  else
  {
    v9 = 1;
    v10 = 1;
  }
  CUCFErrorHandler((uint64_t)v6, v10);
  return v9;
}

double GAL_EphReal2Kep(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  char v3;
  char v4;
  int v5;
  uint64_t v6;
  double result;
  uint64_t v8;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_DWORD *)(a2 + 8) = 3;
  *(_BYTE *)(a2 + 12) = *(_BYTE *)(a1 + 14);
  v2 = *(unsigned __int8 *)(a1 + 15);
  if (v2 <= 0x31)
  {
    if (!*(_BYTE *)(a1 + 15))
    {
      v3 = -14;
      goto LABEL_41;
    }
    if (v2 <= 4)
    {
      v3 = v2 - 15;
LABEL_41:
      *(_BYTE *)(a2 + 15) = v3;
      goto LABEL_42;
    }
    if (v2 <= 6)
    {
      v3 = -11;
      goto LABEL_41;
    }
    if (v2 <= 8)
    {
      v3 = -10;
      goto LABEL_41;
    }
    if (v2 <= 0xB)
    {
      v3 = -9;
      goto LABEL_41;
    }
    if (v2 <= 0xF)
    {
      v3 = -8;
      goto LABEL_41;
    }
    if (v2 <= 0x15)
    {
      v3 = -7;
      goto LABEL_41;
    }
    if (v2 <= 0x1E)
    {
      v3 = -6;
      goto LABEL_41;
    }
    if (v2 <= 0x2B)
    {
      v3 = -5;
      goto LABEL_41;
    }
LABEL_7:
    v3 = -4;
    goto LABEL_41;
  }
  if (v2 <= 0x4A)
  {
    if (v2 <= 0x37)
      goto LABEL_7;
    if (v2 <= 0x43)
    {
      v3 = -3;
      goto LABEL_41;
    }
LABEL_20:
    v3 = -2;
    goto LABEL_41;
  }
  if (v2 > 0x63)
  {
    if (v2 > 0x7D)
    {
      if (v2 == 255)
        v3 = 15;
      else
        v3 = 14;
      goto LABEL_41;
    }
    if (v2 > 0x66)
    {
      if (v2 > 0x6C)
      {
        if (v2 > 0x75)
          v3 = 3;
        else
          v3 = 2;
      }
      else
      {
        v3 = 1;
      }
      goto LABEL_41;
    }
  }
  else
  {
    if (v2 <= 0x50)
      goto LABEL_20;
    if (v2 <= 0x5C)
    {
      v3 = -1;
      goto LABEL_41;
    }
  }
  *(_BYTE *)(a2 + 15) = 0;
LABEL_42:
  *(_BYTE *)(a2 + 14) = 0;
  v4 = v2 == 255;
  *(_BYTE *)(a2 + 13) = v4 << 6;
  *(_BYTE *)(a2 + 13) = *(_BYTE *)(a1 + 201) | (4 * *(_BYTE *)(a1 + 198)) | (8 * *(_BYTE *)(a1 + 200)) | (32 * *(_BYTE *)(a1 + 197)) | (v4 << 6);
  *(_WORD *)(a2 + 16) = *(_WORD *)(a1 + 194);
  *(_WORD *)(a2 + 18) = *(_WORD *)(a1 + 12) + 1024;
  v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(a1 + 144);
  *(_DWORD *)(a2 + 24) = v5;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 168);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 152) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 160) = v6;
  *(_OWORD *)(a2 + 168) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 184) = *(_OWORD *)(a1 + 56);
  result = *(double *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 72);
  *(double *)(a2 + 200) = result;
  *(_QWORD *)(a2 + 208) = v8;
  return result;
}

double *NK_Comp_DOPS(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  double *v19;
  double v20;
  double *result;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28[5];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  double v34;
  _OWORD v35[8];
  int8x16_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = 0;
  v38 = *MEMORY[0x24BDAC8D0];
  memset(v35, 0, sizeof(v35));
  v5 = a1 + 7173;
  do
  {
    *(_QWORD *)((char *)v35 + v4) = 0x40D3880000000000;
    v4 += 40;
  }
  while (v4 != 160);
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  memset(&v28[1], 0, 32);
  v6 = 1.99960002e14;
  if (*(_BYTE *)(a1 + 7174))
    v6 = *(double *)(a1 + 7200) + fabs((double)(*(_DWORD *)a2 - *(_DWORD *)(a1 + 7192)) * 0.001);
  *(double *)&v29 = v6;
  v28[0] = v6;
  v7 = 1.99960002e14;
  if (*(_BYTE *)(a1 + 7175))
    v7 = *(double *)(a1 + 7216) + fabs((double)(*(_DWORD *)a2 - *(_DWORD *)(a1 + 7208)) * 0.001);
  *((double *)&v31 + 1) = v7;
  v8 = 1.99960002e14;
  if (*(_BYTE *)v5)
    v8 = *(double *)(a1 + 7184) + fabs((double)(*(_DWORD *)a2 - *(_DWORD *)(a1 + 7176)) * 0.001);
  v9 = 0;
  v34 = v8;
  do
  {
    if (v28[v9] > 1.99960002e14)
      v28[v9] = 1.99960002e14;
    v9 += 5;
  }
  while (v9 != 20);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0.0;
  v14 = 6696;
  v15 = 6312;
  v16 = 1656;
  v17 = 1176;
  do
  {
    if (*(_BYTE *)(a1 + v14))
    {
      v18 = (int8x16_t)vmulq_n_f64(*(float64x2_t *)(a1 + v10 + 4016), *(double *)(a1 + v10 + 2104));
      v36 = vextq_s8(v18, v18, 8uLL);
      v37 = *(_QWORD *)(a1 + v10 + 2096);
      v19 = (double *)(*(_BYTE *)(a2 + v17) ? a2 + v16 : a1 + v15);
      v20 = *v19 >= 0.0001 ? *v19 : 0.0001;
      DOP4_Upd_W_Meas((double *)v36.i64, v20, (double (*)[4])v28);
      if (v20 < 800000.0)
      {
        ++v11;
        v13 = v13 + v20;
        if (*(_BYTE *)(a2 + v14 - 3736))
        {
          DOP4_Upd_U_Meas((uint64_t)&v36, (double (*)[4])v35);
          ++v12;
        }
      }
    }
    v10 += 40;
    v15 += 8;
    v16 += 8;
    ++v17;
    ++v14;
  }
  while (v10 != 1920);
  if (v12 <= 3)
    DOP4_Upd_U_Elem(2, (double (*)[4])v35);
  result = DOP4_Calc_U((double *)v35, (double *)(a2 + 24600));
  if (v11)
    v22 = v13 / (double)v11;
  else
    v22 = 0.0;
  *(double *)(a1 + 6744) = v22;
  v23 = v34 * 8.0;
  *(double *)(a1 + 7248) = v34 * 8.0;
  v24 = *(double *)&v29;
  v25 = *((double *)&v31 + 1) * 8.0;
  *(double *)(a1 + 7272) = *((double *)&v31 + 1) * 8.0;
  v26 = v28[1];
  v27 = v28[0] + v28[0];
  *(double *)(a1 + 7256) = v28[0] + v28[0];
  *(double *)(a1 + 7264) = v24 + v24;
  *(double *)(a1 + 7280) = v26 + v26;
  if (v23 > 3600.0)
    *(_QWORD *)(a1 + 7248) = 0x40AC200000000000;
  if (v25 > 3600.0)
    *(_QWORD *)(a1 + 7272) = 0x40AC200000000000;
  if (v27 > 900.0 || v24 + v24 > 900.0)
  {
    *(int64x2_t *)(v5 + 83) = vdupq_n_s64(0x408C200000000000uLL);
    *(_QWORD *)(a1 + 7280) = 0;
  }
  return result;
}

uint64_t NK_Get_Ext_Time(uint64_t result, uint64_t a2, uint64_t a3)
{
  __int16 *v3;
  double v4;
  int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  int v17;
  double v18;
  int v19;
  double v20;
  __int16 v21;
  double v22;
  unsigned __int8 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = (__int16 *)(a2 + 22758);
  *(_BYTE *)(a2 + 22776) = 0;
  *(_BYTE *)(a2 + 22792) = 0;
  *(_BYTE *)(a2 + 22848) = 0;
  *(_BYTE *)(a2 + 22864) = 0;
  v4 = *(double *)(a2 + 24);
  if (v4 > 3.0 && v4 < 604797.0)
  {
    v7 = result;
    v23 = 0;
    result = Get_FSP_Time(result, (__int16 *)(a2 + 22758), (double *)(a2 + 22760), (double *)(a2 + 22768), &v23);
    if ((_DWORD)result)
    {
      v8 = *(double *)(a2 + 22760);
      v9 = *(double *)(a2 + 632);
      v10 = v8 - (v9 - *(double *)(a2 + 736));
      *(double *)(a2 + 26152) = v10;
      v11 = *(double *)(a2 + 22768);
      v12 = *(unsigned int *)(a2 + 12);
      if (v11 < g_TOW_Stat_Var99_Table[v12])
      {
        v13 = v10 * 1000.0;
        v14 = -0.5;
        if (v13 > 0.0)
          v14 = 0.5;
        v15 = v13 + v14;
        v16 = 2147483650.0;
        if (v15 <= 2147483650.0)
        {
          v16 = -2147483650.0;
          if (v15 >= -2147483650.0)
            v16 = (double)(int)v15;
        }
        *((_BYTE *)v3 + 18) = 1;
        *(_DWORD *)(v3 + 11) = 1;
        *(_DWORD *)(v3 + 19) = v7;
        *(double *)(a2 + 22800) = v16;
        *(double *)(a2 + 22808) = v11 * 1000000.0;
        v17 = *(unsigned __int8 *)(a3 + 233);
        v18 = 36.0;
        if (*(_BYTE *)(a3 + 233))
          v18 = 1.0e20;
        *(double *)(a2 + 22832) = v18;
        v19 = v23;
        *(_DWORD *)(v3 + 15) = v23;
        if (v11 <= 0.00000025 || (int)v12 <= 8)
        {
          *((_BYTE *)v3 + 90) = 1;
          *(_DWORD *)(v3 + 47) = 1;
          *(_DWORD *)(v3 + 55) = v7;
          *(double *)(a2 + 22872) = (v9 + v16 * 0.001 - v8) * 299792458.0;
          *(double *)(a2 + 22880) = v11 * 8.98755179e16;
          v20 = 16.0;
          if (v17)
            v20 = 1.0e20;
          *(double *)(a2 + 22904) = v20;
          *(_DWORD *)(v3 + 51) = v19;
        }
        v21 = *v3;
        *(_WORD *)(a2 + 646) = *v3;
        *(_WORD *)(a2 + 18) = v21;
      }
    }
    if (*((_BYTE *)v3 + 90) && (v22 = *(double *)(a2 + 22880), v22 < 2.25e10))
    {
      *(_BYTE *)(a3 + 7173) = 1;
      *(_DWORD *)(a3 + 7176) = *(_DWORD *)(v3 + 55);
      *(double *)(a3 + 7184) = v22;
    }
    else if (*(_BYTE *)(a3 + 7173))
    {
      if ((v7 - *(_DWORD *)(a3 + 7176)) >= 0x1D4C1)
        *(_BYTE *)(a3 + 7173) = 0;
    }
  }
  return result;
}

uint64_t NK_Prop_Cov_Mat(double a1, double *a2)
{
  unsigned __int8 v3;
  int v4;
  char v5;
  unsigned __int8 v6[4];
  __int16 v7;
  unsigned __int8 v8[4];
  __int16 v9;
  double v10[12];

  v10[11] = *(double *)MEMORY[0x24BDAC8D0];
  v3 = 1;
  v10[0] = a1;
  v10[1] = a1;
  v4 = 16843009;
  v5 = 1;
  v10[2] = a1;
  v10[3] = a1;
  *(_DWORD *)v6 = 100860417;
  *(_DWORD *)v8 = 151258116;
  v7 = 2055;
  v9 = 2826;
  v10[4] = a1;
  v10[5] = a1;
  return stphiu((uint64_t)a2, 0xBu, v10, v8, 6, v6, &v3);
}

void *Cyc_Record_Write(uint64_t a1, const void *a2)
{
  void *result;
  unint64_t v4;
  uint64_t i;

  result = memcpy(*(void **)a1, a2, *(unsigned int *)(a1 + 72));
  v4 = *(_QWORD *)a1 + *(unsigned int *)(a1 + 72);
  *(_QWORD *)a1 = v4;
  if (v4 >= *(_QWORD *)(a1 + 64))
  {
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)a1 = v4;
  }
  for (i = 0; i != 6; ++i)
    *(_BYTE *)(a1 + 84 + i) = v4 == *(_QWORD *)(a1 + 84 + 8 * i - 76);
  return result;
}

void *Cyc_Record_Read(uint64_t a1, unsigned int a2, void *__dst)
{
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  unint64_t *v7;
  const void *v8;
  void *result;
  unint64_t v10;

  if (a2 >= 6)
    __assert_rtn("Cyc_Record_Read", "cyc_record_buf.cpp", 144, "Consumer_Idx < MAX_READER_NUM");
  v4 = a2;
  v5 = a1 + 8 * a2;
  v8 = *(const void **)(v5 + 8);
  v7 = (unint64_t *)(v5 + 8);
  v6 = v8;
  if (v8 == *(const void **)a1 && !*(_BYTE *)(a1 + v4 + 84))
    __assert_rtn("Cyc_Record_Read", "cyc_record_buf.cpp", 148, "p_CRB->Next_Read[Consumer_Idx] != p_CRB->Next_Write || p_CRB->Full_Flag[Consumer_Idx]");
  *(_BYTE *)(a1 + v4 + 84) = 0;
  result = memcpy(__dst, v6, *(unsigned int *)(a1 + 72));
  v10 = *v7 + *(unsigned int *)(a1 + 72);
  *v7 = v10;
  if (v10 >= *(_QWORD *)(a1 + 64))
    *v7 = *(_QWORD *)(a1 + 56);
  return result;
}

void *Cyc_Record_Peek(uint64_t a1, unsigned int a2, int a3, void *__dst)
{
  uint64_t v5;
  size_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;

  if (a2 >= 6)
    __assert_rtn("Cyc_Record_Peek", "cyc_record_buf.cpp", 182, "Consumer_Idx < MAX_READER_NUM");
  v5 = *(_QWORD *)(a1 + 8 * a2 + 8);
  if (v5 == *(_QWORD *)a1 && !*(_BYTE *)(a1 + a2 + 84))
    __assert_rtn("Cyc_Record_Peek", "cyc_record_buf.cpp", 186, "p_CRB->Next_Read[Consumer_Idx] != p_CRB->Next_Write || p_CRB->Full_Flag[Consumer_Idx]");
  v6 = *(unsigned int *)(a1 + 72);
  v7 = (char *)(v5 + (v6 * a3));
  v8 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)v7 < v8)
    v7 += *(unsigned int *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)v7 >= v9)
    v7 -= *(unsigned int *)(a1 + 80);
  if ((unint64_t)v7 < v8 || (unint64_t)v7 > v9)
    __assert_rtn("Cyc_Record_Peek", "cyc_record_buf.cpp", 202, "p_Rec_Peek >= p_CRB->Start_Buf && p_Rec_Peek <= p_CRB->End_Buf");
  return memcpy(__dst, v7, v6);
}

BOOL Cyc_Record_IsEmpty(_QWORD *a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  if (a2 >= 6)
    __assert_rtn("Cyc_Record_IsEmpty", "cyc_record_buf.cpp", 225, "Consumer_Idx < MAX_READER_NUM");
  v2 = a1[a2 + 1];
  v3 = *a1;
  if (*((_BYTE *)a1 + a2 + 84))
    v4 = v2 == v3;
  else
    v4 = 1;
  if (!v4)
    __assert_rtn("Cyc_Record_IsEmpty", "cyc_record_buf.cpp", 231, "p_CRB->Next_Read[Consumer_Idx] == p_CRB->Next_Write");
  return !*((_BYTE *)a1 + a2 + 84) && v2 == v3;
}

uint64_t Cyc_Record_Count_Occupied(_DWORD *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t result;

  if (a2 >= 6)
    __assert_rtn("Cyc_Record_Count_Occupied", "cyc_record_buf.cpp", 270, "Consumer_Idx < MAX_READER_NUM");
  v2 = a1[2 * a2 + 2];
  v3 = *a1 - v2;
  if (*a1 == v2)
  {
    if (!*((_BYTE *)a1 + a2 + 84))
      return 0;
  }
  else if (v3 >= 1)
  {
    v4 = a1[20];
    goto LABEL_7;
  }
  v4 = a1[20];
  v3 += v4;
  if (v3 < 1)
    goto LABEL_11;
LABEL_7:
  if (v3 > v4)
LABEL_11:
    __assert_rtn("Cyc_Record_Count_Occupied", "cyc_record_buf.cpp", 290, "Diff > 0 && Diff <= (I4)p_CRB->Buf_Len");
  v5 = a1[18];
  result = v3 / v5;
  if (v3 % v5)
    __assert_rtn("Cyc_Record_Count_Occupied", "cyc_record_buf.cpp", 293, "( Diff % p_CRB->Rec_Size) == 0");
  return result;
}

uint64_t Cyc_Record_Count_Free(_DWORD *a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  uint64_t result;

  if (a2 >= 6)
    __assert_rtn("Cyc_Record_Count_Free", "cyc_record_buf.cpp", 311, "Consumer_Idx < MAX_READER_NUM");
  v3 = Cyc_Record_Count_Occupied(a1, a2);
  v4 = a1[19];
  v5 = v4 >= v3;
  result = v4 - v3;
  if (!v5)
    __assert_rtn("Cyc_Record_Count_Free", "cyc_record_buf.cpp", 317, "Occupied_Records <= p_CRB->Rec_Num");
  return result;
}

uint64_t ltl_least_squares_polynom(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  float32x4_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  float v12;
  uint64_t i;
  uint64_t v14;
  float v15;
  float v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float *v22;
  float v23;
  float v24;
  uint64_t v25;
  float *v26;
  float v27;
  float v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  unint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t j;
  int k;
  unint64_t v40;
  uint64_t result;
  float *v42;
  int *p_s;
  float32x4_t *v44;
  float *v45;
  float *v46;
  float *v47;
  float *v48;
  float *v49;
  unint64_t v50;
  uint64_t v51;
  float *v52;
  float32x4_t *v53;
  float *v54;
  float *v55;
  unint64_t v56;
  float *v57;
  float *v58;
  unint64_t v59;
  float *v60;
  float v61;
  _DWORD *v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float *v74;
  float *v75;
  unint64_t m;
  float v77;
  float v78;
  float *v79;
  float *v80;
  uint64_t v81;
  float v82;
  float v83;
  float *v84;
  float *v85;
  unint64_t v86;
  float v87;
  float v88;
  uint64_t n;
  float v90;
  float v91;
  uint64_t v92;
  float v93;
  float *v94;
  float v95;
  float v96;
  uint64_t v97;
  float v98;
  float v99;
  float v100;
  float v101;
  uint64_t v102;
  int *v103;
  uint64_t v104;
  float v105;
  float *v106;
  float v107;
  uint64_t ii;
  uint64_t v109;
  int *v110;
  uint64_t v111;
  float v112;
  _BYTE v115[40];
  int __s;
  float32x4_t v117;
  _OWORD v118[2];
  uint64_t v119;
  __int16 v120;
  float v121[5];
  _QWORD v122[2];
  int v123;
  _BYTE v124[20];
  _QWORD v125[2];
  int v126;
  _DWORD v127[26];
  uint64_t v128;

  v6 = 0;
  v128 = *MEMORY[0x24BDAC8D0];
  memset(v127, 0, 100);
  v125[0] = 0;
  v125[1] = 0;
  v126 = 0;
  *(_OWORD *)v124 = xmmword_21E7FA320;
  *(_DWORD *)&v124[16] = 0;
  v122[0] = 0;
  v122[1] = 0;
  v123 = 0;
  v118[0] = xmmword_21E7FA2E0;
  v118[1] = xmmword_21E7FA2F0;
  v120 = 14;
  v119 = 0x2000000D3;
  do
  {
    *(float *)((char *)v122 + v6) = (float)*(int *)((char *)v118 + v6) * 0.000061035;
    v6 += 4;
  }
  while (v6 != 20);
  memset_pattern16(&v124[8], &unk_21E7FA300, 0xCuLL);
  if (a2)
  {
    v7 = 0;
    v8 = vcvtq_f32_s32(*(int32x4_t *)&v124[4]);
    do
    {
      v9 = a1 + 8 * v7;
      v10 = *(unsigned __int16 *)(v9 + 4);
      v11 = *(_DWORD *)v9;
      __s = 1065353216;
      v12 = 1.0;
      for (i = 4; i != 20; i += 4)
      {
        v12 = (float)((float)((float)((float)(int)v7 * 0.5) + -30.0) + -30.0) * v12;
        *(float *)((char *)&__s + i) = v12;
      }
      v14 = 0;
      v15 = (float)v11;
      v117 = vmulq_f32(v117, v8);
      v16 = (float)v10 * 0.000005421;
      v17 = v127;
      v18 = 1;
      do
      {
        v19 = 0;
        v20 = *((float *)&__s + v14);
        do
        {
          *(float *)&v17[v19] = *(float *)&v17[v19] + (float)((float)(v20 * *((float *)&__s + v19)) * v16);
          ++v19;
        }
        while (v18 != v19);
        *((float *)v125 + v14) = *((float *)v125 + v14) + (float)((float)(v16 * v20) * v15);
        ++v14;
        ++v18;
        v17 += 5;
      }
      while (v14 != 5);
      ++v7;
    }
    while (v7 != a2);
  }
  v21 = 0;
  v22 = (float *)v127;
  do
  {
    v23 = (float)*(unsigned int *)((char *)&v118[1] + v21 + 4) * 0.000061035;
    v24 = 1.0 / (float)(v23 * v23);
    *v22 = *v22 + v24;
    v22 += 6;
    *(float *)((char *)v125 + v21) = *(float *)((char *)v125 + v21) + (float)(v24 * *(float *)((char *)v122 + v21));
    v21 += 4;
  }
  while (v21 != 20);
  v25 = 0;
  v26 = (float *)v127;
  do
  {
    v27 = *v26;
    v26 += 6;
    v28 = 1.0 / sqrtf(v27);
    v121[v25] = v28;
    *(float *)((char *)v125 + v25 * 4) = *(float *)((char *)v125 + v25 * 4) * v28;
    ++v25;
  }
  while (v25 != 5);
  v29 = 0;
  v30 = v127;
  v31 = 1;
  do
  {
    v32 = 0;
    v33 = v121[v29];
    do
    {
      *(float *)&v30[v32] = *(float *)&v30[v32] * (float)(v33 * v121[v32]);
      ++v32;
    }
    while (v31 != v32);
    ++v29;
    ++v31;
    v30 += 5;
  }
  while (v29 != 5);
  v34 = 0;
  v35 = v127;
  do
  {
    if (v34 <= 3)
    {
      v36 = 5;
      v37 = 1;
      do
      {
        v35[v37++] = v35[v36];
        v36 += 5;
      }
      while (v34 + v37 != 5);
    }
    ++v34;
    v35 += 6;
  }
  while (v34 != 5);
  memset_s(&__s, 0x64uLL, 0, 0x64uLL);
  for (j = 0; j != 120; j += 24)
    *(int *)((char *)&__s + j) = 1065353216;
  for (k = 1; k != 11; ++k)
  {
    v40 = 0;
    result = 0;
    v42 = (float *)v127;
    p_s = &__s;
    v44 = &v117;
    v45 = (float *)&v127[2];
    v47 = (float *)&v127[7];
    v46 = (float *)&v127[6];
    v48 = (float *)&v127[1];
    v49 = (float *)&v127[1];
    v50 = 1;
    do
    {
      v51 = 0;
      v52 = (float *)&v127[5 * v40 + v40];
      v53 = v44;
      v54 = v45;
      v55 = v47;
      v56 = v40;
      v57 = v46;
      v58 = v49;
      v59 = v50;
      do
      {
        v60 = (float *)&v127[5 * v40 + v59];
        v61 = *v60;
        if (*v60 != 0.0)
        {
          v62 = &v127[5 * v59];
          v63 = *(float *)&v62[v59];
          v64 = *v52;
          v65 = (float)(v63 - *v52) / (float)(v61 + v61);
          if (v65 <= 0.0)
            v66 = -1.0;
          else
            v66 = 1.0;
          v67 = v66 / (float)(fabsf(v65) + sqrtf((float)(v65 * v65) + 1.0));
          v68 = 1.0 / sqrtf((float)(v67 * v67) + 1.0);
          v69 = v67 * v68;
          v70 = (float)(v67 * v68) / (float)(v68 + 1.0);
          *v52 = v64 - (float)(v67 * v61);
          v71 = *(float *)&v62[v59] + (float)(v67 * v61);
          *(float *)&v62[v59] = v71;
          if (vabds_f32(*v52, v64) > 0.00000011921)
            LODWORD(result) = result + 1;
          *v60 = 0.0;
          v62[v40] = 0;
          if (vabds_f32(v71, v63) <= 0.00000011921)
            result = result;
          else
            result = (result + 1);
          v72 = -(float)(v67 * v68);
          v73 = -v70;
          v74 = v42;
          v75 = v58;
          for (m = v40; m; --m)
          {
            v77 = *v74;
            v78 = *v75;
            *v74 = *v74 + (float)(v72 * (float)(*v75 + (float)(v70 * *v74)));
            v74 += 5;
            *v75 = *v75 + (float)(v69 * (float)(v77 + (float)(v73 * v78)));
            v75 += 5;
          }
          v79 = v48;
          v80 = v57;
          v81 = v51;
          if (v50 < v59)
          {
            do
            {
              v82 = *v79;
              v83 = *v80;
              *v79 = *v79 + (float)(v72 * (float)(*v80 + (float)(v70 * *v79)));
              ++v79;
              *v80 = *v80 + (float)(v69 * (float)(v82 + (float)(v73 * v83)));
              v80 += 5;
              --v81;
            }
            while (v81);
          }
          v84 = v54;
          v85 = v55;
          v86 = v56;
          if (v59 <= 3)
          {
            do
            {
              v87 = *v84;
              v88 = *v85;
              *v84 = *v84 + (float)(v72 * (float)(*v85 + (float)(v70 * *v84)));
              ++v84;
              *v85 = *v85 + (float)(v69 * (float)(v87 + (float)(v73 * v88)));
              ++v85;
              ++v86;
            }
            while (v86 < 3);
          }
          for (n = 0; n != 25; n += 5)
          {
            v90 = *(float *)&p_s[n];
            v91 = v53->f32[n];
            *(float *)&p_s[n] = v90 + (float)(v72 * (float)(v91 + (float)(v70 * v90)));
            v53->f32[n] = v53->f32[n] + (float)(v69 * (float)(v90 + (float)(v73 * v91)));
          }
        }
        ++v59;
        ++v58;
        ++v51;
        ++v57;
        ++v56;
        v55 += 6;
        ++v54;
        v53 = (float32x4_t *)((char *)v53 + 4);
      }
      while (v59 != 5);
      ++v40;
      ++v50;
      ++v49;
      ++v42;
      v46 += 6;
      v48 += 6;
      v47 += 6;
      v45 += 6;
      v44 = (float32x4_t *)((char *)v44 + 4);
      ++p_s;
    }
    while (v40 != 4);
    if (!(_DWORD)result)
      break;
  }
  v92 = 0;
  v93 = 0.0;
  v94 = (float *)v127;
  do
  {
    v95 = *v94;
    v94 += 6;
    *(float *)&v115[v92 + 20] = v95;
    v96 = fabsf(v95);
    if (v96 > v93)
      v93 = v96;
    v92 += 4;
  }
  while (v92 != 20);
  v97 = 0;
  v98 = v93 * 0.000001;
  do
  {
    v99 = *(float *)&v115[v97 + 20];
    v100 = fabsf(v99);
    v101 = 1.0 / v99;
    if (v100 < v98)
      v101 = 0.0;
    *(float *)&v115[v97 + 20] = v101;
    v97 += 4;
  }
  while (v97 != 20);
  v102 = 0;
  v103 = &__s;
  do
  {
    v104 = 0;
    v105 = 0.0;
    v106 = (float *)v103;
    do
    {
      v107 = *v106;
      v106 += 5;
      v105 = v105 + (float)(v107 * *(float *)((char *)v125 + v104));
      v104 += 4;
    }
    while (v104 != 20);
    *(float *)&v115[4 * v102++] = v105;
    ++v103;
  }
  while (v102 != 5);
  for (ii = 0; ii != 20; ii += 4)
    *(float *)&v115[ii] = *(float *)&v115[ii + 20] * *(float *)&v115[ii];
  if (a4)
  {
    v109 = 0;
    v110 = &__s;
    do
    {
      v111 = 0;
      v112 = 0.0;
      do
      {
        v112 = v112 + (float)(*(float *)&v110[v111] * *(float *)&v115[v111 * 4]);
        ++v111;
      }
      while (v111 != 5);
      *(_DWORD *)(a3 + 4 * v109) = vcvtms_s32_f32((float)((float)(v112 * v121[v109]) * 16384.0) + 0.5);
      ++v109;
      v110 += 5;
    }
    while (v109 != a4);
  }
  return result;
}

uint64_t ltl_least_squares_set(uint64_t result, int a2, int *a3, unsigned int a4)
{
  uint64_t i;
  float v5;
  float v6;
  int *v7;
  uint64_t v8;
  float v9;
  int v10;

  if (a2)
  {
    for (i = 0; i != a2; *(_DWORD *)(result + 8 * i++) = vcvtms_s32_f32((float)(v6 * 0.000061035) + 0.5))
    {
      v5 = (float)((float)((float)(int)i * 0.5) + -30.0) + -30.0;
      v6 = (float)*a3 + (float)(v5 * (float)a3[1]);
      v7 = a3 + 2;
      v8 = a4 - 2;
      v9 = v5;
      if (a4 >= 3)
      {
        do
        {
          v9 = v5 * v9;
          v10 = *v7++;
          v6 = v6 + (float)(v9 * (float)v10);
          --v8;
        }
        while (v8);
      }
    }
  }
  return result;
}

void PEREncVal(size_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v6;
  unsigned int v7;
  const char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  unsigned __int8 v15;
  int v16;
  unint64_t v17;
  int v18;
  unsigned __int8 v19;
  const char *v20;
  void *v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  const char *v30;
  void *v31;
  unint64_t v32;
  unsigned __int8 v33;
  int v34;
  unsigned __int8 v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int8 v38;
  unsigned __int8 *v39;
  unint64_t v40;
  unsigned __int8 v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  unint64_t v47;
  BOOL v48;
  unint64_t v49;
  unsigned int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  unsigned __int8 v70;
  uint64_t v71;
  unint64_t v72;
  BOOL v73;
  uint64_t v74;
  unint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  int v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  int v90;
  unsigned int *v91;
  int v92;
  unint64_t v93;
  int v94;
  int v95;
  size_t v96;
  unint64_t v97;
  unint64_t v98;
  int v99;
  int v100;
  unsigned __int8 *v101;
  size_t v102;
  uint64_t v103;
  const char *v104;
  unsigned int v105;
  size_t v106;
  unint64_t v107;
  unsigned int v108;
  unsigned __int8 v109;
  unsigned __int8 v110;
  unint64_t v111;
  unsigned __int8 v112;
  unint64_t v113;
  uint64_t (*v114)(uint64_t, uint64_t, uint64_t);
  unint64_t v115;
  int v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  int v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  size_t v128;
  int v129;
  int v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  _DWORD *v137;
  unint64_t v138;
  int v139;
  unint64_t v140;
  int v141;
  int v142;
  unint64_t v143;
  unsigned int v144;
  void *v145;
  unint64_t v146;
  uint64_t v147;
  unsigned int v148;
  _OWORD v149[3];
  uint64_t v150;

  v150 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v6 = *(_QWORD *)(a1 + 1040);
    *(_QWORD *)(a1 + 1040) = a2;
    v7 = *a2;
    if (v7 <= 0x3F)
    {
      switch(*a2)
      {
        case 1u:
          PERPutBit(a1, *(_BYTE *)a3 != 0);
          goto LABEL_347;
        case 2u:
          v51 = *a3;
          if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
          {
            v52 = *(unsigned __int8 *)(a1 + 1105);
            if (v52 != 7)
            {
              *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v52;
              *(_BYTE *)(a1 + 1105) = 7;
            }
          }
          *(_QWORD *)&v149[0] = 0;
          goto LABEL_190;
        case 3u:
          v53 = *a3;
          if (!(_DWORD)v53)
            goto LABEL_138;
          *(_QWORD *)&v149[0] = *((_QWORD *)a3 + 1);
          *((_QWORD *)&v149[0] + 1) = v53;
          goto LABEL_195;
        case 4u:
          v54 = *a3;
          if (!(_DWORD)v54)
            goto LABEL_138;
          *(_QWORD *)&v149[0] = *((_QWORD *)a3 + 1);
          *((_QWORD *)&v149[0] + 1) = v54;
          goto LABEL_206;
        case 5u:
          goto LABEL_347;
        case 6u:
          if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
          {
            v55 = *(unsigned __int8 *)(a1 + 1105);
            if (v55 != 7)
            {
              *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v55;
              *(_BYTE *)(a1 + 1105) = 7;
            }
          }
          v56 = *(_QWORD *)(a1 + 1096);
          v57 = *(_QWORD *)(a1 + 1088);
          PERSkipBytes(a1, 1);
          v58 = a3[4];
          v59 = *(const char **)a3;
          if (*(_QWORD *)a3)
            v59 = (const char *)*((int *)v59 + 2);
          v60 = 0;
          v61 = v56 - v57;
          v62 = 40 * (_QWORD)v59;
          v63 = a3;
          while (1)
          {
            v63 = *(int **)v63;
            if (!v63)
              break;
            v64 = v60;
            v60 = 1;
            if ((v64 & 1) != 0)
            {
              v59 = (const char *)v63[2];
              break;
            }
          }
          v65 = (unint64_t)&v59[v62];
          if (((unint64_t)&v59[v62] & 0xFFFFFF80) != 0)
            EPErrorHandler(a1, 28);
          PERPutByte(a1, v65);
          if (v58 >= 3)
          {
            v66 = 2;
            v67 = 3;
            do
            {
              v68 = *(const char **)a3;
              v69 = v67;
              if (*(_QWORD *)a3)
              {
                while (--v69)
                {
                  v68 = *(const char **)v68;
                  if (!v68)
                    goto LABEL_116;
                }
                v65 = *((int *)v68 + 2);
              }
LABEL_116:
              if (v65 >= 0x80)
              {
                v71 = 0;
                v72 = v65;
                do
                {
                  v71 += 7;
                  v73 = v72 >= 0x4000;
                  v72 >>= 7;
                }
                while (v73);
                for (; v71; v71 -= 7)
                  PERPutByte(a1, (v65 >> v71) | 0x80);
                v70 = v65 & 0x7F;
              }
              else
              {
                v70 = v65;
              }
              PERPutByte(a1, v70);
              ++v66;
              ++v67;
            }
            while (v66 != v58);
          }
          v74 = *(_QWORD *)(a1 + 1088);
          v75 = *(_QWORD *)(a1 + 1096) - v74 + ~v61;
          if (v75 > 0x7F)
          {
            if (*(_BYTE *)(a1 + 1105) == 7)
              PEROctetsFragmentation(a1, v75);
            else
              PEROctetsFragmentationWithOffset(a1, v75);
          }
          else
          {
            v76 = (_BYTE *)(v74 + v61);
            v77 = *(unsigned __int8 *)(a1 + 1105);
            if (v77 == 7)
            {
              *v76 = v75;
            }
            else
            {
              *v76 |= v75 >> (7 - v77);
              v76[1] |= v75 << (*(_BYTE *)(a1 + 1105) + 1);
            }
          }
          goto LABEL_347;
        case 7u:
        case 8u:
        case 9u:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0xEu:
        case 0xFu:
        case 0x14u:
        case 0x15u:
        case 0x19u:
        case 0x1Bu:
        case 0x1Cu:
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
          goto LABEL_88;
        case 0xAu:
          v78 = *a3;
          if (*((_QWORD *)a2 + 5) <= (unint64_t)*a3)
            EPErrorHandler(a1, 21);
          v79 = *((_QWORD *)a2 + 3);
          if (v79 == -1)
          {
            LODWORD(v145) = v78;
            v80 = *((_DWORD *)a2 + 10);
            goto LABEL_181;
          }
          if (v79 > v78)
          {
            PERPutBit(a1, 0);
            LODWORD(v145) = v78;
            v80 = *((_DWORD *)a2 + 6);
LABEL_181:
            LODWORD(v149[0]) = v80 - 1;
            v91 = (unsigned int *)&v145;
            goto LABEL_288;
          }
          PERPutBit(a1, 1);
          PEREncodeNormallySmallNonNegativeWholeNumber(a1, v78 - *((_QWORD *)a2 + 3));
          goto LABEL_347;
        case 0x10u:
        case 0x11u:
          PEREncodeStruct(a1, (uint64_t)a2, (uint64_t)a3);
          goto LABEL_347;
        case 0x12u:
        case 0x13u:
        case 0x16u:
        case 0x17u:
        case 0x18u:
        case 0x1Au:
          *((_QWORD *)&v149[1] + 1) = 0;
          if (v7 <= 0x1A && ((1 << v7) & 0x5CC0000) != 0)
          {
            v8 = *(const char **)a3;
            if (*(_QWORD *)a3)
            {
              v9 = strnlen(*(const char **)a3, 0x400uLL);
              v10 = v9 - 1;
              if (v9 == 1)
              {
LABEL_138:
                if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
                {
                  v85 = *(unsigned __int8 *)(a1 + 1105);
                  if (v85 != 7)
                  {
                    *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v85;
                    *(_BYTE *)(a1 + 1105) = 7;
                  }
                }
                PERPutByte(a1, 0);
                goto LABEL_347;
              }
            }
            else
            {
              v10 = -2;
            }
            *(_QWORD *)&v149[0] = v8 + 1;
            *((_QWORD *)&v149[0] + 1) = v10;
            if (v7 == 18)
            {
              v27 = 4;
              v28 = 1;
              v29 = 11;
              v30 = " 0123456789";
            }
            else
            {
              v28 = 0;
              v30 = 0;
              v29 = 0;
              if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
                v27 = 8;
              else
                v27 = 7;
            }
            BYTE9(v149[1]) = v28;
            *(_QWORD *)&v149[2] = v30;
            *((_QWORD *)&v149[2] + 1) = v29;
            BYTE8(v149[1]) = v27;
            v31 = PEREncodePrimCHARACTER_STRING;
            goto LABEL_207;
          }
          CUCFErrorHandler(a1, 15);
          goto LABEL_138;
        case 0x20u:
          v81 = *((_QWORD *)a2 + 1);
          switch(*(_DWORD *)(v81 + 40))
          {
            case 1:
              v82 = *(unsigned __int8 *)a3;
              break;
            case 2:
              v82 = *(__int16 *)a3;
              break;
            default:
              v82 = *a3;
              break;
          }
          v131 = *((_QWORD *)a2 + 5);
          if (v131)
          {
            v132 = *((_QWORD *)a2 + 5);
            v133 = (uint64_t *)*((_QWORD *)a2 + 4);
            while (*((_BYTE *)v133 + 16) == 5 || v133[3] != v82)
            {
              v133 += 4;
              if (!--v132)
              {
                v133 = (uint64_t *)*((_QWORD *)a2 + 4);
                break;
              }
            }
            v134 = (char *)a3 + *(unsigned int *)(v81 + 36);
            v135 = (uint64_t)v133 - *((_QWORD *)a2 + 4);
            v137 = a2 + 24;
            v136 = *((_QWORD *)a2 + 3);
            if (v136 == -1)
            {
              if (v131 >= 2)
              {
                LODWORD(v145) = (unint64_t)v135 >> 5;
                v139 = v131 - 1;
                goto LABEL_324;
              }
LABEL_342:
              v143 = *(_QWORD *)(a1 + 712);
              if (v143 >= 0x40)
              {
                CUCFErrorHandler(a1, 15);
                v143 = *(_QWORD *)(a1 + 712);
              }
              *(_QWORD *)(a1 + 200 + 8 * v143) = v133;
              *(_QWORD *)(a1 + 712) = v143 + 1;
              PEREncVal(a1, *v133, v134);
              goto LABEL_345;
            }
            v138 = v135 >> 5;
          }
          else
          {
            v134 = (char *)a3 + *(unsigned int *)(v81 + 36);
            v137 = a2 + 24;
            v136 = *((_QWORD *)a2 + 3);
            if (v136 == -1)
            {
              v133 = (uint64_t *)*((_QWORD *)a2 + 4);
              goto LABEL_342;
            }
            v138 = 0;
            v133 = (uint64_t *)*((_QWORD *)a2 + 4);
          }
          if (v138 < v136)
          {
            PERPutBit(a1, 0);
            if (*((_QWORD *)a2 + 5) >= 2uLL)
            {
              LODWORD(v145) = v138;
              v139 = *v137 - 1;
LABEL_324:
              LODWORD(v149[0]) = v139;
              PEREncodeConstrainedWholeNumberFunc(a1, (unsigned int *)v149, (unsigned int *)&v145);
              goto LABEL_342;
            }
            goto LABEL_342;
          }
          PERPutBit(a1, 1);
          if (*((_QWORD *)a2 + 5) >= 2uLL)
            PEREncodeNormallySmallNonNegativeWholeNumber(a1, v138 - *(_QWORD *)v137);
          v140 = *(_QWORD *)(a1 + 712);
          if (v140 >= 0x40)
          {
            CUCFErrorHandler(a1, 15);
            v140 = *(_QWORD *)(a1 + 712);
          }
          *(_QWORD *)(a1 + 200 + 8 * v140) = v133;
          *(_QWORD *)(a1 + 712) = v140 + 1;
          v127 = *v133;
          v128 = a1;
          v126 = (uint64_t)v134;
LABEL_321:
          PEREncodeOPENTypeField(v128, v127, v126);
          goto LABEL_345;
        default:
          if (v7 != 48)
          {
            if (v7 != 49)
              goto LABEL_88;
            v149[2] = (unint64_t)a2;
            v25 = a3[4];
            *(_QWORD *)&v149[0] = a3;
            *((_QWORD *)&v149[0] + 1) = v25;
            *((_QWORD *)&v149[1] + 1) = 0;
            v26 = *(_QWORD *)(a1 + 712);
            if (v26 >= 0x40)
            {
              CUCFErrorHandler(a1, 15);
              v26 = *(_QWORD *)(a1 + 712);
            }
            *(_QWORD *)(a1 + 8 * v26 + 200) = (char *)&v149[1] + 8;
            *(_QWORD *)(a1 + 712) = v26 + 1;
            goto LABEL_248;
          }
          memset((char *)v149 + 8, 0, 40);
          v83 = **((_DWORD **)a2 + 1);
          if (v83 == 181)
          {
            v84 = a3[4];
          }
          else
          {
            if (v83 != 182)
            {
              CUCFErrorHandler(a1, 15);
              goto LABEL_265;
            }
            v84 = *a3;
          }
          *((_QWORD *)&v149[0] + 1) = v84;
LABEL_265:
          *(_QWORD *)&v149[0] = a3;
          *((_QWORD *)&v149[1] + 1) = 0;
          *(_QWORD *)&v149[2] = a2;
          v122 = *(_QWORD *)(a1 + 712);
          if (v122 >= 0x40)
          {
            CUCFErrorHandler(a1, 15);
            v122 = *(_QWORD *)(a1 + 712);
          }
          *(_QWORD *)(a1 + 8 * v122 + 200) = (char *)&v149[1] + 8;
          *(_QWORD *)(a1 + 712) = v122 + 1;
          goto LABEL_268;
      }
    }
    if (*a2 <= 0x59u)
    {
      switch(*a2)
      {
        case '@':
          v11 = *((_QWORD *)a2 + 1);
          v13 = (uint64_t *)*((_QWORD *)a2 + 4);
          v12 = *((_QWORD *)a2 + 5);
          switch(*(_DWORD *)(v11 + 40))
          {
            case 1:
              v14 = *(unsigned __int8 *)a3;
              break;
            case 2:
              v14 = *(__int16 *)a3;
              break;
            default:
              v14 = *a3;
              break;
          }
          if (!v12)
            goto LABEL_280;
          while (v13[3] != v14)
          {
            v13 += 4;
            if (!--v12)
            {
LABEL_280:
              v13 = 0;
              break;
            }
          }
          v124 = *(unsigned int *)(v11 + 36);
          v125 = *(_QWORD *)(a1 + 712);
          if (v125 >= 0x40)
          {
            CUCFErrorHandler(a1, 15);
            v125 = *(_QWORD *)(a1 + 712);
          }
          *(_QWORD *)(a1 + 200 + 8 * v125) = v13;
          *(_QWORD *)(a1 + 712) = v125 + 1;
          if (!v13)
            goto LABEL_346;
          v126 = (uint64_t)a3 + v124;
          v127 = *v13;
          v128 = a1;
          goto LABEL_321;
        case 'A':
          goto LABEL_88;
        case 'B':
          v33 = a2[24];
          v34 = *a3;
          LODWORD(v145) = *a3;
          if (a2[25] == 1)
          {
            if ((v33 & 0x20) != 0 && *((_QWORD *)a2 + 4) > v34 || (v33 & 8) != 0 && *((_QWORD *)a2 + 5) < v34)
            {
              PERPutBit(a1, 1);
              goto LABEL_186;
            }
            v90 = v33 & 0x20;
            PERPutBit(a1, 0);
          }
          else
          {
            CUCFCheckINTEGERConstraint(a1, (uint64_t)a2, (int *)&v145);
            v90 = v33 & 0x20;
          }
          if (v90)
          {
            if ((v33 & 0x80) != 0)
            {
              v129 = *((_DWORD *)a2 + 8);
              v148 = (_DWORD)v145 - v129;
              LODWORD(v149[0]) = *((_DWORD *)a2 + 10) - v129;
              v91 = &v148;
LABEL_288:
              PEREncodeConstrainedWholeNumberFunc(a1, (unsigned int *)v149, v91);
            }
            else
            {
              LODWORD(v149[0]) = (_DWORD)v145 - *((_DWORD *)a2 + 8);
              PEREncodeSemiConstrainedWholeNumberFunc(a1, (unsigned int *)v149);
            }
            goto LABEL_347;
          }
LABEL_186:
          if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
          {
            v92 = *(unsigned __int8 *)(a1 + 1105);
            if (v92 != 7)
            {
              *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v92;
              *(_BYTE *)(a1 + 1105) = 7;
            }
          }
          *(_QWORD *)&v149[0] = 0;
          v51 = (int)v145;
LABEL_190:
          LOBYTE(v149[0]) = v51 < 0;
          DWORD1(v149[0]) = v51 ^ (v51 >> 31);
          PEREncodeUnconstrainedWholeNumberFunc(a1, (uint64_t)v149);
          goto LABEL_347;
        case 'C':
          memset(v149, 0, 24);
          v35 = a2[24];
          v36 = *((_QWORD *)a3 + 1);
          v37 = *a3;
          if (a2[25] == 1)
          {
            if (*((_QWORD *)a2 + 4) > v37 || (a2[24] & 0x80) != 0 && *((_QWORD *)a2 + 5) < v37)
            {
              PERPutBit(a1, 1);
              *(_QWORD *)&v149[0] = v36;
              *((_QWORD *)&v149[0] + 1) = v37;
LABEL_195:
              v31 = PEREncodePrimBIT_STRING;
              goto LABEL_207;
            }
            PERPutBit(a1, 0);
          }
          else
          {
            CUCFCheckStringConstraint(a1, (uint64_t)a2, *a3);
          }
          *(_QWORD *)&v149[0] = v36;
          *((_QWORD *)&v149[0] + 1) = v37;
          if ((v35 & 0x80) == 0)
            goto LABEL_195;
          if ((v35 & 2) == 0)
          {
            v93 = *((_QWORD *)a2 + 5);
            if (v93 >> 16)
              goto LABEL_195;
            v94 = *((_DWORD *)a2 + 8);
            v148 = v37 - v94;
            LODWORD(v145) = v93 - v94;
            PEREncodeConstrainedWholeNumberFunc(a1, (unsigned int *)&v145, &v148);
            if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
            {
              v95 = *(unsigned __int8 *)(a1 + 1105);
              if (v95 != 7)
              {
                *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v95;
                *(_BYTE *)(a1 + 1105) = 7;
              }
            }
            v96 = a1;
            v97 = v37;
            goto LABEL_332;
          }
          v97 = *((_QWORD *)a2 + 4);
          if (v97)
          {
            if (v97 > 0x10)
            {
              if (v97 >> 16)
                goto LABEL_195;
              if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
              {
                v141 = *(unsigned __int8 *)(a1 + 1105);
                if (v141 != 7)
                {
                  *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v141;
                  *(_BYTE *)(a1 + 1105) = 7;
                  v97 = *((_QWORD *)a2 + 4);
                }
              }
            }
            v96 = a1;
LABEL_332:
            PEREncodePrimBIT_STRING(v96, v97, (char **)v149);
            goto LABEL_347;
          }
          goto LABEL_347;
        case 'D':
          memset(v149, 0, 24);
          v38 = a2[24];
          v39 = (unsigned __int8 *)*((_QWORD *)a3 + 1);
          v40 = *a3;
          if (a2[25] == 1)
          {
            if (*((_QWORD *)a2 + 4) > v40 || (a2[24] & 0x80) != 0 && *((_QWORD *)a2 + 5) < v40)
            {
              PERPutBit(a1, 1);
              *(_QWORD *)&v149[0] = v39;
              *((_QWORD *)&v149[0] + 1) = v40;
              goto LABEL_206;
            }
            PERPutBit(a1, 0);
          }
          else
          {
            CUCFCheckStringConstraint(a1, (uint64_t)a2, *a3);
          }
          *(_QWORD *)&v149[0] = v39;
          *((_QWORD *)&v149[0] + 1) = v40;
          if ((v38 & 0x80) == 0)
            goto LABEL_206;
          if ((v38 & 2) == 0)
          {
            v98 = *((_QWORD *)a2 + 5);
            if (!(v98 >> 16))
            {
              v99 = *((_DWORD *)a2 + 8);
              v148 = v40 - v99;
              LODWORD(v145) = v98 - v99;
              PEREncodeConstrainedWholeNumberFunc(a1, (unsigned int *)&v145, &v148);
              if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
              {
                v100 = *(unsigned __int8 *)(a1 + 1105);
                if (v100 != 7)
                {
                  *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v100;
                  *(_BYTE *)(a1 + 1105) = 7;
                }
              }
              v102 = *((_QWORD *)&v149[0] + 1);
              v101 = *(unsigned __int8 **)&v149[0];
              v103 = a1;
              goto LABEL_340;
            }
LABEL_206:
            v31 = PEREncodePrimOCTET_STRING;
LABEL_207:
            *(_QWORD *)&v149[1] = v31;
            PERConstructedEncode(a1, (uint64_t)v149);
            goto LABEL_347;
          }
          v102 = *((_QWORD *)a2 + 4);
          if (!v102)
            goto LABEL_347;
          if (v102 > 2)
          {
            if (v102 >> 16)
              goto LABEL_206;
            if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
            {
              v142 = *(unsigned __int8 *)(a1 + 1105);
              if (v142 != 7)
              {
                *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v142;
                *(_BYTE *)(a1 + 1105) = 7;
                v102 = *((_QWORD *)a2 + 4);
                v39 = *(unsigned __int8 **)&v149[0];
              }
            }
          }
          v103 = a1;
          v101 = v39;
LABEL_340:
          PERPutSeg(v103, v101, v102);
          goto LABEL_347;
        default:
          if (v7 - 82 >= 2 && v7 != 86)
            goto LABEL_88;
          goto LABEL_27;
      }
    }
    if (*a2 > 0x70u)
    {
      if (*a2 <= 0x9Fu)
      {
        if (v7 != 113)
        {
          if (v7 != 128)
            goto LABEL_88;
LABEL_36:
          PEREncVal(a1, *((_QWORD *)a2 + 3), a3);
LABEL_347:
          *(_QWORD *)(a1 + 1040) = v6;
          return;
        }
        memset(&v149[1], 0, 32);
        v41 = a2[32];
        v42 = a3[4];
        *(_QWORD *)&v149[0] = a3;
        *((_QWORD *)&v149[0] + 1) = v42;
        *(_QWORD *)&v149[2] = a2;
        if (a2[33] == 1)
        {
          if (*((_QWORD *)a2 + 5) > v42 || (v41 & 0x80) != 0 && *((_QWORD *)a2 + 6) < v42)
          {
            PERPutBit(a1, 1);
            v41 = 0;
          }
          else
          {
            PERPutBit(a1, 0);
          }
        }
        else
        {
          CUCFCheckStructOfConstraint(a1, (uint64_t)a2, v42);
        }
        v113 = *(_QWORD *)(a1 + 712);
        if (v113 >= 0x40)
        {
          CUCFErrorHandler(a1, 15);
          v113 = *(_QWORD *)(a1 + 712);
        }
        *(_QWORD *)(a1 + 200 + 8 * v113) = (char *)&v149[1] + 8;
        *(_QWORD *)(a1 + 712) = v113 + 1;
        if ((v41 & 0x80) == 0)
          goto LABEL_248;
        if ((v41 & 2) != 0)
        {
          v117 = *((_QWORD *)a2 + 5);
          if (!(v117 >> 16))
            goto LABEL_297;
        }
        else
        {
          v115 = *((_QWORD *)a2 + 6);
          if (!(v115 >> 16))
          {
            v116 = *((_DWORD *)a2 + 10);
            v148 = v42 - v116;
            LODWORD(v145) = v115 - v116;
            PEREncodeConstrainedWholeNumberFunc(a1, (unsigned int *)&v145, &v148);
            v117 = *((_QWORD *)&v149[0] + 1);
LABEL_297:
            PEREncodePrimSET_OF(a1, v117, (uint64_t)v149);
            goto LABEL_345;
          }
        }
LABEL_248:
        v114 = PEREncodePrimSET_OF;
LABEL_269:
        *(_QWORD *)&v149[1] = v114;
        PERConstructedEncode(a1, (uint64_t)v149);
        goto LABEL_345;
      }
      if (v7 == 160)
        goto LABEL_36;
      if (v7 == 162)
      {
        v23 = a2[24];
        if (v23 == 3)
        {
          v104 = *(const char **)a3;
          if ((unint64_t)(*(_QWORD *)a3 - 0x100000000) < 0xFFFFFFFE00000000)
            EPErrorHandler(a1, 18);
          v24 = (uint64_t)(v104 + 0x100000000);
          if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
            goto LABEL_233;
        }
        else
        {
          if (v23 == 2)
          {
            v24 = *a3;
LABEL_219:
            if ((*(_BYTE *)(a1 + 1056) & 0x40) == 0)
              goto LABEL_232;
LABEL_233:
            if (v23 < 3)
              v109 = 2;
            else
              v109 = 3;
            if (v24 < 1)
            {
              v110 = 0;
              v112 = 1;
            }
            else
            {
              v110 = 0;
              v111 = v24;
              do
              {
                ++v110;
                v48 = v111 > 1;
                v111 >>= 1;
              }
              while (v48);
              if ((v110 & 7) != 0)
                v112 = (v110 >> 3) + 1;
              else
                v112 = v110 >> 3;
            }
            PERPutBits(a1, v112 - 1, v109);
            v130 = *(unsigned __int8 *)(a1 + 1105);
            if (v130 != 7)
            {
              *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v130;
              *(_BYTE *)(a1 + 1105) = 7;
            }
            if (v110 >= 0x21u)
            {
              PERPutBits(a1, v24 >> 32, 8u);
              --v112;
            }
            v108 = 8 * (v112 & 0x1F);
            v106 = a1;
            v107 = v24;
            goto LABEL_295;
          }
          if (v23 == 1)
          {
            v24 = *a3 + 0x80000000;
            goto LABEL_219;
          }
          v24 = *(_QWORD *)a3;
          if (v23 == 4 && (unint64_t)v24 >> 33 || v23 == 16 && (unint64_t)v24 >> 39)
            EPErrorHandler(a1, 18);
          if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
            goto LABEL_233;
          if (v23 < 3)
          {
LABEL_232:
            v106 = a1;
            v107 = v24;
            v108 = 32;
LABEL_295:
            PERPutBits(v106, v107, v108);
            goto LABEL_347;
          }
        }
        if (v23 == 16)
          v105 = 7;
        else
          v105 = 1;
        PERPutBits(a1, v24 >> 32, v105);
        goto LABEL_232;
      }
LABEL_88:
      CUCFErrorHandler(a1, 16);
      goto LABEL_347;
    }
    if (v7 != 90)
    {
      if (v7 == 96)
        goto LABEL_36;
      if (v7 != 112)
        goto LABEL_88;
      memset((char *)v149 + 8, 0, 40);
      v15 = a2[32];
      v16 = **((_DWORD **)a2 + 1);
      if (v16 == 181)
      {
        v17 = a3[4];
      }
      else
      {
        if (v16 != 182)
        {
          CUCFErrorHandler(a1, 15);
          v17 = 0;
LABEL_176:
          *(_QWORD *)&v149[0] = a3;
          *((_QWORD *)&v149[1] + 1) = 0;
          *(_QWORD *)&v149[2] = a2;
          if (a2[33] == 1)
          {
            if (v17 < *((_QWORD *)a2 + 5) || (char)a2[32] < 0 && *((_QWORD *)a2 + 6) < v17)
            {
              PERPutBit(a1, 1);
              v15 = 0;
            }
            else
            {
              PERPutBit(a1, 0);
            }
          }
          else
          {
            CUCFCheckStructOfConstraint(a1, (uint64_t)a2, v17);
          }
          v118 = *(_QWORD *)(a1 + 712);
          if (v118 >= 0x40)
          {
            CUCFErrorHandler(a1, 15);
            v118 = *(_QWORD *)(a1 + 712);
          }
          *(_QWORD *)(a1 + 200 + 8 * v118) = (char *)&v149[1] + 8;
          *(_QWORD *)(a1 + 712) = v118 + 1;
          if ((v15 & 0x80) != 0)
          {
            if ((v15 & 2) != 0)
            {
              v121 = *((_QWORD *)a2 + 5);
              if (!v121)
                goto LABEL_345;
              if (!(v121 >> 16))
              {
LABEL_300:
                PEREncodePrimSEQUENCE_OF(a1, v121, (uint64_t)v149);
LABEL_345:
                v125 = *(_QWORD *)(a1 + 712) - 1;
LABEL_346:
                *(_QWORD *)(a1 + 712) = v125;
                goto LABEL_347;
              }
            }
            else
            {
              v119 = *((_QWORD *)a2 + 6);
              if (!(v119 >> 16))
              {
                v120 = *((_DWORD *)a2 + 10);
                v148 = v17 - v120;
                LODWORD(v145) = v119 - v120;
                PEREncodeConstrainedWholeNumberFunc(a1, (unsigned int *)&v145, &v148);
                v121 = *((_QWORD *)&v149[0] + 1);
                goto LABEL_300;
              }
            }
          }
LABEL_268:
          v114 = PEREncodePrimSEQUENCE_OF;
          goto LABEL_269;
        }
        v17 = *a3;
      }
      *((_QWORD *)&v149[0] + 1) = v17;
      goto LABEL_176;
    }
LABEL_27:
    v145 = 0;
    v146 = 0;
    v147 = 0;
    memset(v149, 0, sizeof(v149));
    v18 = (v7 & 0x1F) - 18;
    v19 = a2[40];
    switch(v18)
    {
      case 0:
      case 1:
      case 4:
      case 5:
      case 6:
      case 8:
        v20 = *(const char **)a3;
        v21 = (void *)(*(_QWORD *)a3 + 1);
        v145 = v21;
        if (v20)
          v22 = strnlen(v20, 0x400uLL);
        else
          v22 = -1;
        v32 = v22 - 1;
        v146 = v32;
        LOBYTE(v147) = 1;
        break;
      default:
        CUCFErrorHandler(a1, 15);
        v21 = 0;
        v32 = 0;
        break;
    }
    if (a2[41] == 1)
    {
      if (v32 < *((_QWORD *)a2 + 6) || (char)a2[40] < 0 && *((_QWORD *)a2 + 7) < v32)
      {
        PERPutBit(a1, 1);
        v19 = 0;
        *(_QWORD *)&v149[0] = v21;
        *((_QWORD *)&v149[0] + 1) = v32;
        goto LABEL_84;
      }
      PERPutBit(a1, 0);
    }
    else
    {
      CUCFCheckCHARACTER_STRINGConstraint(a1, (uint64_t)a2, &v145);
      v21 = v145;
      v32 = v146;
    }
    *(_QWORD *)&v149[0] = v21;
    *((_QWORD *)&v149[0] + 1) = v32;
    v43 = *((_QWORD *)a2 + 4);
    if (v43)
    {
      v44 = *((_QWORD *)a2 + 3);
      *(_QWORD *)&v149[2] = v44;
      *((_QWORD *)&v149[2] + 1) = v43;
      v45 = v43 - 1;
      if (v43 == 1)
      {
        LOBYTE(v46) = 0;
        BYTE8(v149[1]) = 0;
        if ((*(_BYTE *)(a1 + 1056) & 0x40) == 0)
          goto LABEL_148;
        v46 = 0;
        v50 = 1;
      }
      else
      {
        LOBYTE(v46) = 0;
        v47 = v45;
        do
        {
          LOBYTE(v46) = v46 + 1;
          v48 = v47 > 1;
          v47 >>= 1;
        }
        while (v48);
        BYTE8(v149[1]) = v46;
        if ((*(_BYTE *)(a1 + 1056) & 0x40) == 0)
          goto LABEL_148;
        v49 = v46;
        LOBYTE(v50) = 1;
        do
        {
          LOBYTE(v50) = 2 * v50;
          v48 = v49 > 1;
          v49 >>= 1;
        }
        while (v48);
        v50 = v50;
        v46 = v46;
      }
      if (v50 >> 1 >= v46)
        LOBYTE(v46) = v50 >> 1;
      else
        LOBYTE(v46) = v50;
      BYTE8(v149[1]) = v46;
LABEL_148:
      if (*(unsigned __int8 *)(v44 + v45) > ~(-1 << v46))
      {
        BYTE9(v149[1]) = 1;
        goto LABEL_151;
      }
LABEL_150:
      BYTE9(v149[1]) = 0;
LABEL_151:
      if ((v19 & 0x80) == 0)
      {
LABEL_152:
        *(_QWORD *)&v149[1] = PEREncodePrimCHARACTER_STRING;
        PERConstructedEncode(a1, (uint64_t)v149);
LABEL_153:
        if (!(_BYTE)v147 && v146 && v145)
          free(v145);
        goto LABEL_347;
      }
      if ((v19 & 2) != 0)
      {
        v89 = *((_QWORD *)a2 + 6);
        if (!v89)
          goto LABEL_153;
        if (v89 > 2)
        {
          if (v89 >> 16)
            goto LABEL_152;
          if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0 && v89 * v46 >= 0x11)
          {
            v123 = *(unsigned __int8 *)(a1 + 1105);
            if (v123 != 7)
            {
              *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v123;
              *(_BYTE *)(a1 + 1105) = 7;
              v89 = *((_QWORD *)a2 + 6);
            }
          }
        }
      }
      else
      {
        v86 = *((_QWORD *)a2 + 6);
        v87 = *((_QWORD *)a2 + 7) - v86;
        if ((unint64_t)(v87 + 1) >> 16)
          goto LABEL_152;
        v144 = v32 - v86;
        v148 = v87;
        PEREncodeConstrainedWholeNumberFunc(a1, &v148, &v144);
        if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
        {
          v88 = *(unsigned __int8 *)(a1 + 1105);
          if (v88 != 7)
          {
            *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v88;
            *(_BYTE *)(a1 + 1105) = 7;
          }
        }
        v89 = v146;
      }
      PEREncodePrimCHARACTER_STRING(a1, v89, (char **)v149);
      goto LABEL_153;
    }
    if ((*a2 & 0x1F) == 0x12)
    {
      *(_QWORD *)&v149[2] = " 0123456789";
      *((_QWORD *)&v149[2] + 1) = 11;
      WORD4(v149[1]) = 260;
      LOBYTE(v46) = 4;
      goto LABEL_151;
    }
LABEL_84:
    v149[2] = 0uLL;
    if ((*(_QWORD *)(a1 + 1056) & 0x40) != 0)
      LOBYTE(v46) = 8;
    else
      LOBYTE(v46) = 7;
    BYTE8(v149[1]) = v46;
    goto LABEL_150;
  }
}

void PEREncodeStruct(size_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  int v30;
  _BYTE *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  unsigned int v53;
  BOOL v54;
  unsigned __int8 v55;
  unint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unint64_t v69;
  size_t v70;
  _QWORD *v71;
  _QWORD v72[3];
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v4 = (_QWORD *)a2;
  v76 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 48) & 1) == 0)
  {
    v6 = *(_QWORD *)(a2 + 80);
    if (v6)
    {
      v73 = 0;
      v74 = 0;
      v75 = 0;
      if (v6 >> 16)
        PERSkipConsBitField(a1, (uint64_t)&v73, v6);
      else
        PERSkipPrimBitField(a1, (uint64_t)&v73, v6);
      PEREncodeStructRootWithOptDef(a1, (uint64_t)&v73, v4, a3);
    }
    else
    {
      PEREncodeStructRoot(a1, (_QWORD *)a2, a3);
    }
    return;
  }
  v7 = *(_QWORD *)(a1 + 1096);
  v8 = *(_QWORD *)(a1 + 1088);
  v9 = *(_BYTE *)(a1 + 1105);
  PERPutBit(a1, 0);
  v10 = v4[10];
  if (v10)
  {
    v73 = 0;
    v74 = 0;
    v75 = 0;
    if (v10 >> 16)
      PERSkipConsBitField(a1, (uint64_t)&v73, v10);
    else
      PERSkipPrimBitField(a1, (uint64_t)&v73, v10);
    PEREncodeStructRootWithOptDef(a1, (uint64_t)&v73, v4, a3);
  }
  else
  {
    PEREncodeStructRoot(a1, v4, a3);
  }
  v11 = v4[11];
  if (v11)
  {
    memset(v72, 0, sizeof(v72));
    v60 = *(_QWORD *)(a1 + 1088);
    v61 = *(_QWORD *)(a1 + 1096);
    v62 = *(_BYTE *)(a1 + 1105);
    v65 = v7;
    v64 = v9;
    if (v11 < 0x41)
    {
      PERPutBits(a1, v11 - 1, 7u);
      PERSkipPrimBitField(a1, (uint64_t)v72, v4[11]);
    }
    else
    {
      PERPutBit(a1, 1);
      PERSkipConsBitField(a1, (uint64_t)v72, v4[11]);
    }
    v63 = v8;
    v12 = v4[8];
    if (v12)
    {
      v13 = 0;
      v14 = 0;
      v15 = (_QWORD *)v4[4];
      v70 = a1 + 200;
      v71 = v4;
      while (1)
      {
        switch(*((_BYTE *)v15 + 16))
        {
          case 0:
          case 1:
            v16 = *(_QWORD *)(v4[1] + 24);
            v17 = v15[3];
            if (*(_BYTE *)(a3 + **(unsigned int **)(v16 + 24 * v17 + 16)) != 1)
              goto LABEL_34;
            v18 = *(unsigned int *)(v16 + 24 * v17 + 8);
            PERSetBitToBitField(a1, (uint64_t)v72, 1);
            v19 = *(_QWORD *)(a1 + 712);
            if (v19 >= 0x40)
            {
              CUCFErrorHandler(a1, 15);
              v19 = *(_QWORD *)(a1 + 712);
            }
            *(_QWORD *)(v70 + 8 * v19) = v15;
            *(_QWORD *)(a1 + 712) = v19 + 1;
            PEREncodeOPENTypeField(a1, *v15, a3 + v18);
            --*(_QWORD *)(a1 + 712);
            ++v14;
            goto LABEL_33;
          case 2:
            v20 = *(_QWORD *)(v4[1] + 24);
            v21 = v15[3];
            if (*(_BYTE *)(a3 + **(unsigned int **)(v20 + 24 * v21 + 16)) != 1)
              goto LABEL_34;
            v22 = *(unsigned int *)(v20 + 24 * v21 + 8);
            PERSetBitToBitField(a1, (uint64_t)v72, 1);
            v23 = *(_QWORD *)(a1 + 712);
            if (v23 >= 0x40)
              goto LABEL_31;
            goto LABEL_32;
          case 3:
            v24 = *(_QWORD *)(v4[1] + 24);
            v25 = v15[3];
            if (*(_BYTE *)(a3 + **(unsigned int **)(v24 + 24 * v25 + 16)) != 1)
              goto LABEL_34;
            v22 = *(unsigned int *)(v24 + 24 * v25 + 8);
            PERSetBitToBitField(a1, (uint64_t)v72, 1);
            v23 = *(_QWORD *)(a1 + 712);
            if (v23 >= 0x40)
            {
LABEL_31:
              CUCFErrorHandler(a1, 15);
              v23 = *(_QWORD *)(a1 + 712);
            }
LABEL_32:
            *(_QWORD *)(v70 + 8 * v23) = v15;
            *(_QWORD *)(a1 + 712) = v23 + 1;
            PEREncodeOPENTypeField(a1, *v15, a3 + v22);
            --*(_QWORD *)(a1 + 712);
            ++v13;
LABEL_33:
            v4 = v71;
            goto LABEL_35;
          case 4:
            v67 = v13;
            v26 = v15[3];
            v73 = 0;
            v74 = 0;
            v75 = 0;
            v27 = 0;
            if (v26)
            {
              v28 = (unsigned __int8 *)(v15 + 6);
              v29 = v26;
              do
              {
                v30 = *v28;
                v28 += 32;
                if (v30)
                  ++v27;
                --v29;
              }
              while (v29);
            }
            if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
            {
              v32 = *(unsigned __int8 *)(a1 + 1105);
              v31 = *(_BYTE **)(a1 + 1096);
              v68 = 7;
              if (v32 != 7)
              {
                *v31 &= 510 << v32;
                v31 = (_BYTE *)(*(_QWORD *)(a1 + 1096) + 1);
                *(_QWORD *)(a1 + 1096) = v31;
                *(_BYTE *)(a1 + 1105) = 7;
              }
            }
            else
            {
              v31 = *(_BYTE **)(a1 + 1096);
              v68 = *(unsigned __int8 *)(a1 + 1105);
            }
            v33 = *(_QWORD *)(a1 + 1088);
            PERSkipBytes(a1, 1);
            if (v27 >> 16)
              PERSkipConsBitField(a1, (uint64_t)&v73, v27);
            else
              PERSkipPrimBitField(a1, (uint64_t)&v73, v27);
            v12 -= v26;
            v69 = (unint64_t)&v31[-v33];
            v34 = v15[3];
            if (!v34)
              goto LABEL_77;
            v66 = v14;
            v35 = 0;
            v36 = 0;
            v37 = 0;
            v38 = 0;
            v39 = v15 + 4;
            do
            {
              switch(*((_BYTE *)v39 + 16))
              {
                case 0:
                case 1:
                  v40 = *(_QWORD *)(v4[1] + 24);
                  v41 = v39[3];
                  if (*(_BYTE *)(a3 + **(unsigned int **)(v40 + 24 * v41 + 16)) == 1)
                  {
                    v42 = *(unsigned int *)(v40 + 24 * v41 + 8);
                    v43 = *(_QWORD *)(a1 + 712);
                    if (v43 >= 0x40)
                    {
                      CUCFErrorHandler(a1, 15);
                      v43 = *(_QWORD *)(a1 + 712);
                    }
                    *(_QWORD *)(v70 + 8 * v43) = v39;
                    *(_QWORD *)(a1 + 712) = v43 + 1;
                    PEREncVal(a1, *v39, a3 + v42);
                    --*(_QWORD *)(a1 + 712);
                    if (*((_BYTE *)v39 + 16) == 1)
                      PERSetBitToBitField(a1, (uint64_t)&v73, 1);
                    ++v36;
                    goto LABEL_65;
                  }
                  ++v37;
                  break;
                case 2:
                  v44 = *(_QWORD *)(v4[1] + 24);
                  v45 = v39[3];
                  if (*(_BYTE *)(a3 + **(unsigned int **)(v44 + 24 * v45 + 16)) != 1)
                    goto LABEL_66;
                  v46 = *(unsigned int *)(v44 + 24 * v45 + 8);
                  PERSetBitToBitField(a1, (uint64_t)&v73, 1);
                  v47 = *(_QWORD *)(a1 + 712);
                  if (v47 < 0x40)
                    goto LABEL_64;
                  goto LABEL_63;
                case 3:
                  v48 = *(_QWORD *)(v4[1] + 24);
                  v49 = v39[3];
                  if (*(_BYTE *)(a3 + **(unsigned int **)(v48 + 24 * v49 + 16)) != 1)
                    goto LABEL_66;
                  v46 = *(unsigned int *)(v48 + 24 * v49 + 8);
                  PERSetBitToBitField(a1, (uint64_t)&v73, 1);
                  v47 = *(_QWORD *)(a1 + 712);
                  if (v47 >= 0x40)
                  {
LABEL_63:
                    CUCFErrorHandler(a1, 15);
                    v47 = *(_QWORD *)(a1 + 712);
                  }
LABEL_64:
                  *(_QWORD *)(v70 + 8 * v47) = v39;
                  *(_QWORD *)(a1 + 712) = v47 + 1;
                  PEREncVal(a1, *v39, a3 + v46);
                  --*(_QWORD *)(a1 + 712);
                  ++v35;
LABEL_65:
                  v4 = v71;
                  break;
                case 5:
LABEL_66:
                  PERSetBitToBitField(a1, (uint64_t)&v73, 0);
                  break;
                default:
                  CUCFErrorHandler(a1, 15);
                  break;
              }
              ++v38;
              v39 += 4;
            }
            while (v38 < v15[3]);
            LODWORD(v34) = v35 != 0;
            v15 = v39 - 4;
            if (!v37)
            {
              v14 = v66;
              if (v36)
                goto LABEL_79;
LABEL_77:
              if (!(_DWORD)v34)
              {
                v50 = *(_QWORD *)(a1 + 1088);
                *(_QWORD *)(a1 + 1096) = v50 + v69;
                *(_BYTE *)(a1 + 1105) = v68;
                *(_BYTE *)(v50 + v69) &= -2 << v68;
                PERSetBitToBitField(a1, (uint64_t)v72, 0);
                v13 = v67;
                goto LABEL_35;
              }
              goto LABEL_79;
            }
            if (v35)
            {
              EPErrorHandler(a1, 33);
              v14 = v66;
              goto LABEL_79;
            }
            v14 = v66;
            if (!v36)
              goto LABEL_77;
LABEL_79:
            v51 = *(_QWORD *)(a1 + 1096);
            v52 = (_BYTE *)(v51 - *(_QWORD *)(a1 + 1088));
            v53 = *(unsigned __int8 *)(a1 + 1105);
            v54 = v53 >= v68;
            v55 = v53 - v68;
            if (v54)
            {
              v56 = (unint64_t)&v52[~v69];
              if (!v56)
                goto LABEL_87;
              PERPutBits(a1, 0, v55);
            }
            else
            {
              PERPutBits(a1, 0, (v55 + 8));
              v56 = (unint64_t)&v52[-v69];
              if (v52 == (_BYTE *)v69)
              {
                v51 = *(_QWORD *)(a1 + 1096);
LABEL_87:
                v4 = v71;
                *(_QWORD *)(a1 + 1096) = v51 - 1;
                PERPutBits(a1, 0x100uLL, 0x10u);
                goto LABEL_92;
              }
            }
            v4 = v71;
            if (v56 > 0x7F)
            {
              if (*(_BYTE *)(a1 + 1105) == 7)
                PEROctetsFragmentation(a1, v56);
              else
                PEROctetsFragmentationWithOffset(a1, v56);
            }
            else
            {
              v57 = (_BYTE *)(*(_QWORD *)(a1 + 1088) + v69);
              v58 = *(unsigned __int8 *)(a1 + 1105);
              if (v58 == 7)
              {
                *v57 = v56;
              }
              else
              {
                *v57 |= v56 >> (7 - v58);
                v57[1] |= v56 << (*(_BYTE *)(a1 + 1105) + 1);
              }
            }
LABEL_92:
            PERSetBitToBitField(a1, (uint64_t)v72, 1);
            v13 = v67 + 1;
LABEL_35:
            v15 += 4;
            if (!--v12)
              goto LABEL_94;
            break;
          case 5:
LABEL_34:
            PERSetBitToBitField(a1, (uint64_t)v72, 0);
            goto LABEL_35;
          default:
            CUCFErrorHandler(a1, 15);
            goto LABEL_35;
        }
      }
    }
    v14 = 0;
    v13 = 0;
LABEL_94:
    if (v14 | v13)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 1088) + v65 - v63) |= 1 << v64;
    }
    else
    {
      v59 = *(_QWORD *)(a1 + 1088);
      *(_QWORD *)(a1 + 1096) = v59 + v61 - v60;
      *(_BYTE *)(a1 + 1105) = v62;
      *(_BYTE *)(v59 + v61 - v60) &= -2 << v62;
    }
  }
}

void PERDecVal(size_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  char v12;
  void *v13;
  unsigned __int8 **v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  char v19;
  _BYTE *v20;
  rsize_t v21;
  unint64_t v22;
  int v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  char v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 v28;
  BOOL v29;
  unint64_t v30;
  unsigned __int8 v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned __int8 v37;
  unint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  rsize_t v40;
  _BYTE *v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  int v44;
  int v45;
  int v46;
  void *v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  _QWORD *v53;
  int v54;
  void *v55;
  __int128 v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  rsize_t v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  rsize_t v67;
  unint64_t v68;
  unsigned __int8 v69;
  unsigned int v70;
  void *v71;
  int v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  _BYTE *v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  int v91;
  uint64_t v92;
  int v93;
  unint64_t v94;
  int v95;
  unint64_t v96;
  size_t v97;
  int v98;
  unint64_t v99;
  size_t v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  int v123;
  unint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  int v132;
  __int128 v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  unsigned int v138;
  uint64_t v139;

  v139 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v8 = *(_QWORD *)(a1 + 1040);
    *(_QWORD *)(a1 + 1040) = a2;
    v9 = *a2;
    if (v9 <= 0x3F)
    {
      switch(*a2)
      {
        case 1u:
          *(_BYTE *)a3 = PERGetBit(a1) != 0;
          goto LABEL_278;
        case 2u:
          if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
          {
            v54 = *(unsigned __int8 *)(a1 + 1105);
            if (v54 != 7)
            {
              *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v54;
              *(_BYTE *)(a1 + 1105) = 7;
            }
          }
          *(_QWORD *)&v135 = 0;
          PERDecodeUnconstrainedWholeNumberFunc(a1, (uint64_t)&v135);
          if (*(_DWORD *)(*((_QWORD *)a2 + 1) + 8) == 4)
          {
            *(_DWORD *)a3 = DWORD1(v135);
          }
          else
          {
            v34 = SDWORD1(v135);
LABEL_60:
            *(_QWORD *)a3 = v34;
          }
          goto LABEL_278;
        case 3u:
          v135 = 0uLL;
          v55 = PERDecodePrimBIT_STRING;
          goto LABEL_118;
        case 4u:
          v135 = 0uLL;
          v55 = PERDecodePrimOCTET_STRING;
LABEL_118:
          *(_QWORD *)&v136 = v55;
          PERConstructedDecode(a1, (uint64_t)&v135);
          v56 = v135;
          *(_QWORD *)(a1 + 1112) = 0;
          if (*((_QWORD *)&v56 + 1))
          {
            *(_QWORD *)(a3 + 8) = v56;
            *(_DWORD *)a3 = DWORD2(v56);
            *(_BYTE *)(a3 + 4) = 8;
          }
          else
          {
            memset_s((void *)a3, 0x10uLL, 0, 0x10uLL);
          }
          goto LABEL_278;
        case 5u:
          *(_DWORD *)a3 = 0;
          goto LABEL_278;
        case 6u:
          memset_s((void *)a3, 0x18uLL, 0, 0x18uLL);
          if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
          {
            v57 = *(unsigned __int8 *)(a1 + 1105);
            if (v57 != 7)
            {
              *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v57;
              *(_BYTE *)(a1 + 1105) = 7;
            }
          }
          v58 = PERGetByte(a1);
          if (v58 >= 0xC1)
          {
            --*(_QWORD *)(a1 + 1096);
            v59 = *(unsigned __int8 *)(a1 + 1105);
            if (v59 == 7)
            {
              v60 = PEROctetsDefragmentation(a1);
              PERDecodeOBJECT_IDENTIFIERComps(a1, v60, a3);
              if (*(unsigned __int8 *)(a1 + 1105) <= 6u)
              {
                ++*(_QWORD *)(a1 + 1096);
                *(_BYTE *)(a1 + 1105) = 7;
              }
              PEROctetsFragmentation(a1, v60);
            }
            else
            {
              v115 = PEROctetsDefragmentationWithOffset(a1);
              PERDecodeOBJECT_IDENTIFIERComps(a1, v115, a3);
              if (*(unsigned __int8 *)(a1 + 1105) < v59)
                ++*(_QWORD *)(a1 + 1096);
              *(_BYTE *)(a1 + 1105) = v59;
              PEROctetsFragmentationWithOffset(a1, v115);
            }
            goto LABEL_278;
          }
          if ((v58 & 0xC0) == 0x80)
          {
            v87 = PERGetByte(a1) & 0xFFFF80FF | ((v58 & 0x7F) << 8);
            v88 = a1;
LABEL_245:
            PERDecodeOBJECT_IDENTIFIERComps(v88, v87, a3);
            goto LABEL_278;
          }
          if ((v58 & 0x80) == 0)
          {
            v116 = v58 & 0x7F;
            if ((v58 & 0x7F) == 0)
              EPErrorHandler(a1, 26);
            v88 = a1;
            v87 = v116;
            goto LABEL_245;
          }
          v92 = a1;
          v93 = 26;
          goto LABEL_265;
        case 7u:
        case 8u:
        case 9u:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0xEu:
        case 0xFu:
        case 0x14u:
        case 0x15u:
        case 0x19u:
        case 0x1Bu:
        case 0x1Cu:
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
          goto LABEL_109;
        case 0xAu:
          *(_QWORD *)&v133 = 0;
          if (*((_QWORD *)a2 + 3) == -1)
          {
            v138 = 0;
            LODWORD(v135) = *((_DWORD *)a2 + 10) - 1;
            PERDecodeConstrainedWholeNumberFunc(a1, (unsigned int *)&v135, (int *)&v138);
            v61 = v138;
            if (*((_QWORD *)a2 + 5) <= (unint64_t)v138)
              EPErrorHandler(a1, 21);
          }
          else if (PERGetBit(a1) == 1)
          {
            PERDecodeNormallySmallNonNegativeWholeNumber(a1, &v133);
            v61 = v133 + *((_DWORD *)a2 + 6);
          }
          else
          {
            v138 = 0;
            LODWORD(v135) = *((_DWORD *)a2 + 6) - 1;
            PERDecodeConstrainedWholeNumberFunc(a1, (unsigned int *)&v135, (int *)&v138);
            v61 = v138;
            if (*((_QWORD *)a2 + 5) <= (unint64_t)v138)
              EPErrorHandler(a1, 21);
          }
          *(_DWORD *)a3 = v61;
          goto LABEL_278;
        case 0x10u:
        case 0x11u:
          v40 = *(unsigned int *)(*((_QWORD *)a2 + 1) + 8);
          memset_s((void *)a3, v40, 0, v40);
          PERDecodeStruct(a1, (uint64_t)a2, a3, (void **)a4);
          goto LABEL_278;
        case 0x12u:
        case 0x13u:
        case 0x16u:
        case 0x17u:
        case 0x18u:
        case 0x1Au:
          v136 = 0u;
          v137 = 0u;
          v135 = 0u;
          if (v9 == 18)
          {
            BYTE8(v136) = 4;
            *(_QWORD *)&v136 = PERDecodePrimCHARACTER_STRING;
            PERConstructedDecode(a1, (uint64_t)&v135);
            v10 = *((_QWORD *)&v135 + 1);
            if (*((_QWORD *)&v135 + 1))
            {
              v11 = (char *)v135;
              do
              {
                if (*v11)
                  v12 = *v11 + 47;
                else
                  v12 = 32;
                *v11++ = v12;
                --v10;
              }
              while (v10);
            }
          }
          else
          {
            if ((*(_QWORD *)(a1 + 1056) & 0x40) != 0)
              v32 = 8;
            else
              v32 = 7;
            BYTE8(v136) = v32;
            *(_QWORD *)&v136 = PERDecodePrimCHARACTER_STRING;
            PERConstructedDecode(a1, (uint64_t)&v135);
          }
          v33 = v135;
          *(_QWORD *)(a1 + 1112) = 0;
          switch(*a2 & 0x1F)
          {
            case 0x12:
            case 0x13:
            case 0x16:
            case 0x17:
            case 0x18:
            case 0x1A:
              if (*((_QWORD *)&v33 + 1))
              {
                *(_BYTE *)(v33 + *((_QWORD *)&v33 + 1)) = 0;
                v34 = v33 - 1;
                goto LABEL_60;
              }
              v41 = gnssOsa_Calloc("posp_alloc", 18, 1, 2uLL);
              *(_QWORD *)a3 = v41;
              *v41 = 86;
              *(_BYTE *)(*(_QWORD *)a3 + 1) = 0;
              break;
            default:
              CUCFErrorHandler(a1, 15);
              if (*((_QWORD *)&v33 + 1) && (_QWORD)v33)
              {
                v71 = (void *)v33;
                goto LABEL_179;
              }
              break;
          }
          goto LABEL_278;
        case 0x20u:
          v62 = *((_QWORD *)a2 + 4);
          *(_QWORD *)&v135 = 0;
          v63 = *(unsigned int *)(*((_QWORD *)a2 + 1) + 8);
          memset_s((void *)a3, v63, 0, v63);
          if (*((_QWORD *)a2 + 3) == -1)
          {
            v94 = *((_QWORD *)a2 + 5);
            if (v94 >= 2)
            {
              v138 = 0;
              v95 = v94 - 1;
LABEL_248:
              LODWORD(v133) = v95;
              PERDecodeConstrainedWholeNumberFunc(a1, (unsigned int *)&v133, (int *)&v138);
              v117 = v138;
LABEL_250:
              v118 = v117;
              if (*((_QWORD *)a2 + 5) <= (unint64_t)v117)
                EPErrorHandler(a1, 37);
              v119 = v62 + 32 * v118;
              if (*(_BYTE *)(v119 + 16) == 5)
                goto LABEL_264;
              v120 = *((_QWORD *)a2 + 1);
              GenericSetValue(*(unsigned int *)(v120 + 40), (_BYTE *)a3, *(_DWORD *)(v119 + 24));
              v121 = a3 + *(unsigned int *)(v120 + 36);
              v122 = *(_QWORD *)(a1 + 712);
              if (v122 >= 0x40)
              {
                CUCFErrorHandler(a1, 15);
                v122 = *(_QWORD *)(a1 + 712);
              }
              *(_QWORD *)(a1 + 200 + 8 * v122) = v119;
              *(_QWORD *)(a1 + 712) = v122 + 1;
              PERDecVal(a1, *(_QWORD *)v119, v121, a4);
LABEL_143:
              --*(_QWORD *)(a1 + 712);
              goto LABEL_278;
            }
          }
          else
          {
            v64 = PERGetBit(a1);
            v65 = *((_QWORD *)a2 + 5);
            if (v64)
            {
              if (v65 < 2)
              {
                v66 = 0;
              }
              else
              {
                PERDecodeNormallySmallNonNegativeWholeNumber(a1, &v135);
                v65 = *((_QWORD *)a2 + 5);
                v66 = v135;
              }
              v124 = *((_QWORD *)a2 + 3) + v66;
              if (v124 >= v65)
              {
                if (v65 == 1)
                  PERDecodeNormallySmallNonNegativeWholeNumber(a1, &v135);
LABEL_21:
                PERSkipOPENTypeField(a1);
                goto LABEL_278;
              }
              v125 = v62 + 32 * v124;
              if (*(_BYTE *)(v125 + 16) == 5)
              {
LABEL_264:
                v92 = a1;
                v93 = 37;
                goto LABEL_265;
              }
              v129 = *((_QWORD *)a2 + 1);
              GenericSetValue(*(unsigned int *)(v129 + 40), (_BYTE *)a3, *(_DWORD *)(v125 + 24));
              v130 = a3 + *(unsigned int *)(v129 + 36);
              v131 = *(_QWORD *)(a1 + 712);
              if (v131 >= 0x40)
              {
                CUCFErrorHandler(a1, 15);
                v131 = *(_QWORD *)(a1 + 712);
              }
              *(_QWORD *)(a1 + 200 + 8 * v131) = v125;
              *(_QWORD *)(a1 + 712) = v131 + 1;
              v111 = *(_QWORD *)v125;
              v112 = a1;
              v113 = v130;
              v114 = a4;
LABEL_303:
              PERDecodeOPENTypeField(v112, v111, v113, v114);
              goto LABEL_143;
            }
            if (v65 >= 2)
            {
              v138 = 0;
              v95 = *((_DWORD *)a2 + 6) - 1;
              goto LABEL_248;
            }
          }
          v117 = 0;
          goto LABEL_250;
        default:
          if (v9 == 48)
          {
            v67 = *(unsigned int *)(*((_QWORD *)a2 + 1) + 8);
            memset_s((void *)a3, v67, 0, v67);
            v135 = (unint64_t)a3;
            *((_QWORD *)&v136 + 1) = 0;
            *(_QWORD *)&v137 = a2;
            *((_QWORD *)&v137 + 1) = a4;
            v68 = *(_QWORD *)(a1 + 712);
            if (v68 >= 0x40)
            {
              CUCFErrorHandler(a1, 15);
              v68 = *(_QWORD *)(a1 + 712);
            }
            *(_QWORD *)(a1 + 8 * v68 + 200) = (char *)&v136 + 8;
            *(_QWORD *)(a1 + 712) = v68 + 1;
            v39 = PERDecodePrimSEQUENCE_OF;
          }
          else
          {
            if (v9 != 49)
              goto LABEL_109;
            memset_s((void *)a3, 0x18uLL, 0, 0x18uLL);
            v135 = (unint64_t)a3;
            *((_QWORD *)&v136 + 1) = 0;
            *(_QWORD *)&v137 = a2;
            *((_QWORD *)&v137 + 1) = a4;
            v38 = *(_QWORD *)(a1 + 712);
            if (v38 >= 0x40)
            {
              CUCFErrorHandler(a1, 15);
              v38 = *(_QWORD *)(a1 + 712);
            }
            *(_QWORD *)(a1 + 8 * v38 + 200) = (char *)&v136 + 8;
            *(_QWORD *)(a1 + 712) = v38 + 1;
            v39 = PERDecodePrimSET_OF;
          }
          *(_QWORD *)&v136 = v39;
          PERConstructedDecode(a1, (uint64_t)&v135);
          goto LABEL_143;
      }
    }
    if (*a2 <= 0x59u)
    {
      switch(*a2)
      {
        case '@':
          if (!a4)
            goto LABEL_20;
          v13 = *(void **)a4;
          if (!*(_QWORD *)a4)
            goto LABEL_20;
          while (1)
          {
            v14 = (unsigned __int8 **)(a2 + 24);
            do
            {
              v15 = *v14;
              v16 = *v14;
              v17 = *v16;
              v14 = (unsigned __int8 **)(v16 + 24);
            }
            while (v17 == 128);
            if (v15 == *(unsigned __int8 **)v13)
              break;
            v13 = (void *)*((_QWORD *)v13 + 2);
            if (!v13)
            {
LABEL_20:
              v18 = *(_QWORD *)(a1 + 1096);
              v19 = *(_BYTE *)(a1 + 1105);
              v20 = MMSAlloc(a1, 0x28uLL);
              *(_QWORD *)v20 = v18;
              v20[8] = v19;
              *((_QWORD *)v20 + 2) = a2;
              *((_QWORD *)v20 + 3) = a3;
              *((_QWORD *)v20 + 4) = *(_QWORD *)(a4 + 8);
              *(_QWORD *)(a4 + 8) = v20;
              goto LABEL_21;
            }
          }
          *(_QWORD *)&v135 = 0;
          v106 = CUCFGetOpenTypeObject(a1, (uint64_t)a2, *((unsigned __int8 **)v13 + 1), &v135);
          if (!v106)
          {
            v92 = a1;
            v93 = 39;
            goto LABEL_265;
          }
          v107 = (uint64_t *)v106;
          v108 = *((_QWORD *)a2 + 1);
          GenericSetValue(*(unsigned int *)(v108 + 40), (_BYTE *)a3, *(_DWORD *)(v106 + 24));
          v109 = a3 + *(unsigned int *)(v108 + 36);
          v110 = *(_QWORD *)(a1 + 712);
          if (v110 >= 0x40)
          {
            CUCFErrorHandler(a1, 15);
            v110 = *(_QWORD *)(a1 + 712);
          }
          *(_QWORD *)(a1 + 200 + 8 * v110) = v107;
          *(_QWORD *)(a1 + 712) = v110 + 1;
          v111 = *v107;
          v112 = a1;
          v113 = v109;
          v114 = 0;
          goto LABEL_303;
        case 'A':
          goto LABEL_109;
        case 'B':
          v42 = a2[24];
          v43 = v42;
          if (a2[25] != 1)
            goto LABEL_83;
          if (PERGetBit(a1) == 1)
            goto LABEL_308;
          v43 = a2[24];
LABEL_83:
          if ((v43 & 0x20) != 0)
          {
            if ((v43 & 0x80) != 0)
            {
              v138 = 0;
              LODWORD(v135) = *((_DWORD *)a2 + 10) - *((_DWORD *)a2 + 8);
              PERDecodeConstrainedWholeNumberFunc(a1, (unsigned int *)&v135, (int *)&v138);
              v89 = *((_DWORD *)a2 + 8);
              v90 = v138;
            }
            else
            {
              LODWORD(v135) = 0;
              PERDecodeSemiConstrainedWholeNumberFunc(a1, &v135);
              v89 = *((_DWORD *)a2 + 8);
              v90 = v135;
            }
            v45 = v90 + v89;
          }
          else
          {
LABEL_308:
            if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
            {
              v44 = *(unsigned __int8 *)(a1 + 1105);
              if (v44 != 7)
              {
                *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v44;
                *(_BYTE *)(a1 + 1105) = 7;
              }
            }
            *(_QWORD *)&v135 = 0;
            PERDecodeUnconstrainedWholeNumberFunc(a1, (uint64_t)&v135);
            v45 = DWORD1(v135);
          }
          LODWORD(v133) = v45;
          v126 = *(_DWORD *)(*((_QWORD *)a2 + 1) + 8);
          if ((v42 & 1) != 0)
          {
            if (v126 != 4)
              goto LABEL_275;
          }
          else if (v126 != 4)
          {
LABEL_275:
            *(_QWORD *)a3 = v45;
LABEL_276:
            if (!a2[25])
              CUCFCheckINTEGERConstraint(a1, (uint64_t)a2, (int *)&v133);
            goto LABEL_278;
          }
          *(_DWORD *)a3 = v45;
          goto LABEL_276;
        case 'C':
          v135 = 0uLL;
          *(_QWORD *)&v136 = 0;
          if (a2[25] == 1 && PERGetBit(a1) == 1)
            goto LABEL_91;
          v46 = (char)a2[24];
          if ((v46 & 0x80000000) == 0)
            goto LABEL_91;
          if ((v46 & 2) != 0)
          {
            v97 = *((_QWORD *)a2 + 4);
            if (!v97)
              goto LABEL_97;
            if (v97 <= 0x10)
            {
LABEL_286:
              PERDecodePrimBIT_STRING(a1, v97, (uint64_t)&v135);
LABEL_97:
              v50 = *((_QWORD *)&v135 + 1);
              v49 = v135;
              *(_QWORD *)(a1 + 1112) = 0;
              if (v50)
              {
                *(_QWORD *)(a3 + 8) = v49;
                *(_DWORD *)a3 = v50;
                *(_BYTE *)(a3 + 4) = 8;
              }
              else
              {
                memset_s((void *)a3, 0x10uLL, 0, 0x10uLL);
              }
              if (!a2[25])
                CUCFCheckStringConstraint(a1, (uint64_t)a2, v50);
              goto LABEL_278;
            }
            if (!(v97 >> 16))
            {
              if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
              {
                v127 = *(unsigned __int8 *)(a1 + 1105);
                if (v127 != 7)
                {
                  *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v127;
                  *(_BYTE *)(a1 + 1105) = 7;
                  v97 = *((_QWORD *)a2 + 4);
                }
              }
              goto LABEL_286;
            }
          }
          else
          {
            v96 = *((_QWORD *)a2 + 5);
            if (!(v96 >> 16))
            {
              v138 = 0;
              LODWORD(v133) = v96 - *((_DWORD *)a2 + 8);
              PERDecodeConstrainedWholeNumberFunc(a1, (unsigned int *)&v133, (int *)&v138);
              v97 = v138 + *((_DWORD *)a2 + 8);
              *((_QWORD *)&v135 + 1) = v97;
              if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
              {
                v98 = *(unsigned __int8 *)(a1 + 1105);
                if (v98 != 7)
                {
                  *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v98;
                  *(_BYTE *)(a1 + 1105) = 7;
                  v97 = *((_QWORD *)&v135 + 1);
                }
              }
              goto LABEL_286;
            }
          }
LABEL_91:
          v47 = PERDecodePrimBIT_STRING;
          goto LABEL_96;
        case 'D':
          v135 = 0uLL;
          *(_QWORD *)&v136 = 0;
          if (a2[25] == 1 && PERGetBit(a1) == 1)
            goto LABEL_95;
          v48 = (char)a2[24];
          if ((v48 & 0x80000000) == 0)
            goto LABEL_95;
          if ((v48 & 2) != 0)
          {
            v100 = *((_QWORD *)a2 + 4);
            if (!v100)
              goto LABEL_97;
            if (v100 <= 2)
              goto LABEL_293;
            if (!(v100 >> 16))
            {
              if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
              {
                v128 = *(unsigned __int8 *)(a1 + 1105);
                if (v128 != 7)
                {
                  *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v128;
                  *(_BYTE *)(a1 + 1105) = 7;
                  v100 = *((_QWORD *)a2 + 4);
                }
              }
              goto LABEL_293;
            }
          }
          else
          {
            v99 = *((_QWORD *)a2 + 5);
            if (!(v99 >> 16))
            {
              v138 = 0;
              LODWORD(v133) = v99 - *((_DWORD *)a2 + 8);
              PERDecodeConstrainedWholeNumberFunc(a1, (unsigned int *)&v133, (int *)&v138);
              v100 = v138 + *((_DWORD *)a2 + 8);
              *((_QWORD *)&v135 + 1) = v100;
              if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
              {
                v101 = *(unsigned __int8 *)(a1 + 1105);
                if (v101 != 7)
                {
                  *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v101;
                  *(_BYTE *)(a1 + 1105) = 7;
                  v100 = *((_QWORD *)&v135 + 1);
                }
              }
LABEL_293:
              PERDecodePrimOCTET_STRING(a1, v100, (uint64_t)&v135);
              goto LABEL_97;
            }
          }
LABEL_95:
          v47 = PERDecodePrimOCTET_STRING;
LABEL_96:
          *(_QWORD *)&v136 = v47;
          PERConstructedDecode(a1, (uint64_t)&v135);
          goto LABEL_97;
        default:
          if (v9 - 82 >= 2 && v9 != 86)
            goto LABEL_109;
          goto LABEL_39;
      }
    }
    if (*a2 > 0x70u)
    {
      if (*a2 <= 0x9Fu)
      {
        if (v9 != 113)
        {
          if (v9 != 128)
            goto LABEL_109;
          goto LABEL_70;
        }
        v136 = 0uLL;
        memset_s((void *)a3, 0x18uLL, 0, 0x18uLL);
        v135 = (unint64_t)a3;
        *(_QWORD *)&v137 = a2;
        *((_QWORD *)&v137 + 1) = a4;
        v51 = *(_QWORD *)(a1 + 712);
        if (v51 >= 0x40)
        {
          CUCFErrorHandler(a1, 15);
          v51 = *(_QWORD *)(a1 + 712);
        }
        *(_QWORD *)(a1 + 200 + 8 * v51) = (char *)&v136 + 8;
        *(_QWORD *)(a1 + 712) = v51 + 1;
        if (a2[33] == 1 && PERGetBit(a1) == 1)
          goto LABEL_104;
        v52 = (char)a2[32];
        if ((v52 & 0x80000000) == 0)
          goto LABEL_104;
        if ((v52 & 2) != 0)
        {
          v105 = *((_QWORD *)a2 + 5);
          if (!v105)
            goto LABEL_106;
          if (!(v105 >> 16))
          {
LABEL_299:
            PERDecodePrimSET_OF(a1, v105, (uint64_t)&v135);
LABEL_106:
            --*(_QWORD *)(a1 + 712);
            if (!a2[33])
              CUCFCheckStructOfConstraint(a1, (uint64_t)a2, *((unint64_t *)&v136 + 1));
            goto LABEL_278;
          }
        }
        else
        {
          v104 = *((_QWORD *)a2 + 6);
          if (!(v104 >> 16))
          {
            v138 = 0;
            LODWORD(v133) = v104 - *((_DWORD *)a2 + 10);
            PERDecodeConstrainedWholeNumberFunc(a1, (unsigned int *)&v133, (int *)&v138);
            v105 = v138 + *((_DWORD *)a2 + 10);
            *((_QWORD *)&v135 + 1) = v105;
            goto LABEL_299;
          }
        }
LABEL_104:
        v24 = PERDecodePrimSET_OF;
        goto LABEL_105;
      }
      if (v9 == 160)
      {
LABEL_70:
        PERDecVal(a1, *((_QWORD *)a2 + 3), a3, a4);
        goto LABEL_278;
      }
      if (v9 == 162)
      {
        v35 = a2[24];
        if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
        {
          if (v35 < 3)
            v82 = 2;
          else
            v82 = 3;
          v83 = PERGetBits(a1, v82);
          v84 = *(unsigned __int8 *)(a1 + 1105);
          if (v84 != 7)
          {
            *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v84;
            *(_BYTE *)(a1 + 1105) = 7;
          }
          if (v83 == 4)
          {
            PERGetByte(a1);
            LOBYTE(v83) = 3;
          }
          v37 = 8 * v83 + 8;
        }
        else
        {
          if (v35 >= 3)
          {
            if (v35 == 16)
              v36 = 7;
            else
              v36 = 1;
            PERGetBits(a1, v36);
          }
          v37 = 32;
        }
        v85 = PERGetBits(a1, v37);
        if (v35 == 3)
        {
          v86 = *(_QWORD *)&v85 | 0xFFFFFFFF00000000;
        }
        else
        {
          v86 = v85;
          if (v35 == 1)
            v86 = v85 - 0x80000000;
        }
        v91 = a2[24];
        if (v91 != 3 && (v91 == 2 || v91 == 1))
          *(_DWORD *)a3 = v86;
        else
          *(_QWORD *)a3 = v86;
        if ((v35 != 4 || !(v86 >> 33)) && (v35 != 16 || !(v86 >> 39)))
          goto LABEL_278;
        v92 = a1;
        v93 = 18;
LABEL_265:
        EPErrorHandler(v92, v93);
LABEL_278:
        *(_QWORD *)(a1 + 1040) = v8;
        return;
      }
LABEL_109:
      CUCFErrorHandler(a1, 16);
      goto LABEL_278;
    }
    if (v9 != 90)
    {
      if (v9 == 96)
      {
        PERDecVal(a1, *((_QWORD *)a2 + 3), a3, 0);
        v53 = MMSAlloc(a1, 0x18uLL);
        *v53 = a2;
        v53[1] = a3;
        v53[2] = *(_QWORD *)a4;
        *(_QWORD *)a4 = v53;
        goto LABEL_278;
      }
      if (v9 != 112)
        goto LABEL_109;
      v136 = 0uLL;
      v21 = *(unsigned int *)(*((_QWORD *)a2 + 1) + 8);
      memset_s((void *)a3, v21, 0, v21);
      v135 = (unint64_t)a3;
      *(_QWORD *)&v137 = a2;
      *((_QWORD *)&v137 + 1) = a4;
      v22 = *(_QWORD *)(a1 + 712);
      if (v22 >= 0x40)
      {
        CUCFErrorHandler(a1, 15);
        v22 = *(_QWORD *)(a1 + 712);
      }
      *(_QWORD *)(a1 + 200 + 8 * v22) = (char *)&v136 + 8;
      *(_QWORD *)(a1 + 712) = v22 + 1;
      if (a2[33] == 1 && PERGetBit(a1) == 1 || (v23 = (char)a2[32], (v23 & 0x80000000) == 0))
      {
LABEL_38:
        v24 = PERDecodePrimSEQUENCE_OF;
LABEL_105:
        *(_QWORD *)&v136 = v24;
        PERConstructedDecode(a1, (uint64_t)&v135);
        goto LABEL_106;
      }
      if ((v23 & 2) != 0)
      {
        v103 = *((_QWORD *)a2 + 5);
        if (!v103)
          goto LABEL_106;
        if (v103 >> 16)
          goto LABEL_38;
      }
      else
      {
        v102 = *((_QWORD *)a2 + 6);
        if (v102 >> 16)
          goto LABEL_38;
        v138 = 0;
        LODWORD(v133) = v102 - *((_DWORD *)a2 + 10);
        PERDecodeConstrainedWholeNumberFunc(a1, (unsigned int *)&v133, (int *)&v138);
        v103 = v138 + *((_DWORD *)a2 + 10);
        *((_QWORD *)&v135 + 1) = v103;
      }
      PERDecodePrimSEQUENCE_OF(a1, v103, (uint64_t)&v135);
      goto LABEL_106;
    }
LABEL_39:
    v134 = 0;
    v136 = 0u;
    v137 = 0u;
    v135 = 0u;
    if (a2[41] == 1 && PERGetBit(a1) == 1)
    {
      *((_QWORD *)&v137 + 1) = 0;
      if ((*(_QWORD *)(a1 + 1056) & 0x40) != 0)
        v25 = 8;
      else
        v25 = 7;
      BYTE8(v136) = v25;
      goto LABEL_158;
    }
    v26 = *((_QWORD *)a2 + 4);
    if (v26)
    {
      *(_QWORD *)&v137 = *((_QWORD *)a2 + 3);
      *((_QWORD *)&v137 + 1) = v26;
      v27 = v26 - 1;
      if (v26 == 1)
      {
        v28 = 0;
        BYTE8(v136) = 0;
        if ((*(_BYTE *)(a1 + 1056) & 0x40) == 0)
          goto LABEL_157;
        v31 = 1;
      }
      else
      {
        v28 = 0;
        do
        {
          ++v28;
          v29 = v27 > 1;
          v27 >>= 1;
        }
        while (v29);
        BYTE8(v136) = v28;
        if ((*(_BYTE *)(a1 + 1056) & 0x40) == 0)
        {
LABEL_157:
          v72 = (char)a2[40];
          if ((v72 & 0x80000000) == 0)
          {
LABEL_158:
            *(_QWORD *)&v136 = PERDecodePrimCHARACTER_STRING;
            PERConstructedDecode(a1, (uint64_t)&v135);
            goto LABEL_159;
          }
          if ((v72 & 2) != 0)
          {
            v80 = *((_QWORD *)a2 + 6);
            if (!v80)
              goto LABEL_159;
            if (v80 > 2)
            {
              if (v80 >> 16)
                goto LABEL_158;
              if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0 && v80 * v28 >= 0x11)
              {
                v123 = *(unsigned __int8 *)(a1 + 1105);
                if (v123 != 7)
                {
                  *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v123;
                  *(_BYTE *)(a1 + 1105) = 7;
                  v80 = *((_QWORD *)a2 + 6);
                }
              }
            }
          }
          else
          {
            v79 = *((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6);
            if ((unint64_t)(v79 + 1) >> 16)
              goto LABEL_158;
            v132 = 0;
            v138 = v79;
            PERDecodeConstrainedWholeNumberFunc(a1, &v138, &v132);
            v80 = (v132 + *((_DWORD *)a2 + 12));
            *((_QWORD *)&v135 + 1) = v80;
            if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
            {
              v81 = *(unsigned __int8 *)(a1 + 1105);
              if (v81 != 7)
              {
                *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v81;
                *(_BYTE *)(a1 + 1105) = 7;
                v80 = *((_QWORD *)&v135 + 1);
              }
            }
          }
          PERDecodePrimCHARACTER_STRING(a1, v80, (uint64_t *)&v135);
LABEL_159:
          if (*((_QWORD *)&v137 + 1))
          {
            if (*(unsigned __int8 *)(*((_QWORD *)&v137 + 1) + v137 - 1) > ~(-1 << SBYTE8(v136)))
            {
              v73 = *((_QWORD *)&v135 + 1);
              if (*((_QWORD *)&v135 + 1))
              {
                v74 = (_BYTE *)v135;
                do
                {
                  *v74 = *(_BYTE *)(v137 + (char)*v74);
                  ++v74;
                  --v73;
                }
                while (v73);
              }
            }
          }
          v76 = *((_QWORD *)&v135 + 1);
          v75 = v135;
          v133 = v135;
          *(_QWORD *)(a1 + 1112) = 0;
          switch(*a2 & 0x1F)
          {
            case 0x12:
            case 0x13:
            case 0x16:
            case 0x17:
            case 0x18:
            case 0x1A:
              if (v76)
              {
                *(_BYTE *)(v75 + v76) = 0;
                *(_QWORD *)a3 = v75 - 1;
                v77 = 1;
                LOBYTE(v134) = 1;
              }
              else
              {
                v78 = gnssOsa_Calloc("posp_alloc", 18, 1, 2uLL);
                v77 = 0;
                *(_QWORD *)a3 = v78;
                *v78 = 86;
                *(_BYTE *)(*(_QWORD *)a3 + 1) = 0;
                LOBYTE(v134) = 0;
              }
              break;
            default:
              CUCFErrorHandler(a1, 15);
              v77 = 0;
              break;
          }
          if (!a2[41])
          {
            CUCFCheckCHARACTER_STRINGConstraint(a1, (uint64_t)a2, &v133);
            v77 = v134;
            v76 = *((_QWORD *)&v133 + 1);
          }
          if (!v77)
          {
            if (v76)
            {
              v71 = (void *)v133;
              if ((_QWORD)v133)
LABEL_179:
                free(v71);
            }
          }
          goto LABEL_278;
        }
        v30 = v28;
        v31 = 1;
        do
        {
          v31 *= 2;
          v29 = v30 > 1;
          v30 >>= 1;
        }
        while (v29);
      }
      v69 = v31;
      v70 = v31 >> 1;
      if (v70 >= v28)
        v28 = v70;
      else
        v28 = v69;
    }
    else if ((*a2 & 0x1F) == 0x12)
    {
      *(_QWORD *)&v137 = " 0123456789";
      *((_QWORD *)&v137 + 1) = 11;
      v28 = 4;
    }
    else
    {
      *((_QWORD *)&v137 + 1) = 0;
      if ((*(_QWORD *)(a1 + 1056) & 0x40) != 0)
        v28 = 8;
      else
        v28 = 7;
    }
    BYTE8(v136) = v28;
    goto LABEL_157;
  }
}

void PERDecodeStruct(size_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  char v7;
  void **v8;
  unint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  char v27;
  char v28;
  unsigned int v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  char v48;
  char v49;
  unsigned int v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  void **v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  char v71;
  char v72;
  unint64_t v73;
  unsigned __int8 *v74;
  char v75;
  char v76;
  unsigned __int8 *v77;
  char v78;
  char v79;
  unsigned __int8 *v80;
  char v81;
  char v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unint64_t v103;
  unsigned __int8 *v104;
  int v105;
  int v106;
  unsigned int v107;
  int v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  int v114;
  unint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  unsigned int v121;
  char v122;
  char v123;
  unsigned int v124;
  char v125;
  char v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  BOOL v139;
  unint64_t v140;
  unsigned __int8 *v141;
  int v142;
  unsigned int v143;
  int v144;
  void **v145;
  int v146;
  void *v147;
  void *v148;
  unsigned __int8 **v149;
  unsigned __int8 *v150;
  unsigned __int8 *v151;
  int v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  unint64_t v160;
  void **v161;
  _QWORD *v162;
  _QWORD *v163;
  void *v164;
  unint64_t v165;
  unint64_t v166;
  char v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v171;
  int v172;
  size_t v173;
  unsigned __int8 *v174;
  uint64_t v175;
  unint64_t v176;
  void *v177;
  void *v178;
  unsigned __int8 *v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;

  v182 = *MEMORY[0x24BDAC8D0];
  v177 = 0;
  v178 = 0;
  v7 = *(_BYTE *)(a2 + 48);
  v8 = a4;
  if ((v7 & 0x10) != 0)
  {
    if (a4)
      v177 = *a4;
    v8 = &v177;
  }
  if ((v7 & 1) != 0)
    v172 = PERGetBit(a1);
  else
    v172 = 0;
  v9 = *(_QWORD *)(a2 + 80);
  if (v9)
  {
    v179 = 0;
    v180 = 0;
    v181 = 0;
    if (v9 >> 16)
    {
      PERGetConsBitField(a1, (uint64_t)&v179);
    }
    else
    {
      v179 = *(unsigned __int8 **)(a1 + 1096);
      LOWORD(v180) = *(unsigned __int8 *)(a1 + 1105);
      v181 = v9 + 1;
      PERGetSkipBytes(a1, v9 >> 3);
      PERGetBits(a1, v9 & 7);
    }
    v23 = *(_QWORD *)(a2 + 56);
    if (v23)
    {
      v24 = *(_QWORD *)(a2 + 24);
      while (2)
      {
        switch(*(_BYTE *)(v24 + 16))
        {
          case 0:
            goto LABEL_41;
          case 1:
            if ((_BYTE)v180)
            {
              v25 = v180 - 1;
            }
            else
            {
              ++v179;
              v25 = 7;
            }
            LOBYTE(v180) = v25;
            --v181;
LABEL_41:
            v36 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 24 * *(_QWORD *)(v24 + 24) + 8);
            v37 = *(_QWORD *)(a1 + 712);
            if (v37 >= 0x40)
              goto LABEL_46;
            goto LABEL_47;
          case 2:
            v26 = *v179;
            v27 = v180;
            if ((_BYTE)v180)
            {
              v28 = v180 - 1;
            }
            else
            {
              ++v179;
              v28 = 7;
            }
            LOBYTE(v180) = v28;
            --v181;
            v33 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24);
            v34 = *(_QWORD *)(v24 + 24);
            if (((v26 >> v27) & 1) == 0)
            {
              *(_BYTE *)(a3 + **(unsigned int **)(v33 + 24 * v34 + 16)) = 0;
              goto LABEL_51;
            }
            v35 = v33 + 24 * v34;
            v36 = *(unsigned int *)(v35 + 8);
            *(_BYTE *)(a3 + **(unsigned int **)(v35 + 16)) = 1;
            v37 = *(_QWORD *)(a1 + 712);
            if (v37 < 0x40)
              goto LABEL_47;
            goto LABEL_46;
          case 3:
            v29 = *v179;
            v30 = v180;
            if ((_BYTE)v180)
            {
              v31 = v180 - 1;
            }
            else
            {
              ++v179;
              v31 = 7;
            }
            LOBYTE(v180) = v31;
            --v181;
            v38 = *(_QWORD *)(a2 + 8);
            v39 = *(_QWORD *)(v38 + 24);
            v40 = *(_QWORD *)(v24 + 24);
            if (((v29 >> v30) & 1) != 0)
            {
              v41 = v39 + 24 * v40;
              v36 = *(unsigned int *)(v41 + 8);
              *(_BYTE *)(a3 + **(unsigned int **)(v41 + 16)) = 1;
              v37 = *(_QWORD *)(a1 + 712);
              if (v37 >= 0x40)
              {
LABEL_46:
                CUCFErrorHandler(a1, 15);
                v37 = *(_QWORD *)(a1 + 712);
              }
LABEL_47:
              *(_QWORD *)(a1 + 200 + 8 * v37) = v24;
              *(_QWORD *)(a1 + 712) = v37 + 1;
              PERDecVal(a1, *(_QWORD *)v24, a3 + v36, v8);
              --*(_QWORD *)(a1 + 712);
            }
            else
            {
              *(_BYTE *)(a3 + **(unsigned int **)(v39 + 24 * v40 + 16)) = 0;
              v42 = *(_QWORD *)(v38 + 24) + 24 * *(_QWORD *)(v24 + 24);
              GenericAssignSort(a3 + *(unsigned int *)(v42 + 8), *(int **)(*(_QWORD *)(v42 + 16) + 8), 10, *(_QWORD *)v42);
            }
LABEL_51:
            if (v181)
              v43 = 0;
            else
              v43 = BYTE1(v180) == 1;
            if (v43)
              PERSetBitFieldLength(&v179);
            v24 += 32;
            if (!--v23)
              break;
            continue;
          case 5:
            if ((_BYTE)v180)
            {
              v32 = v180 - 1;
            }
            else
            {
              ++v179;
              v32 = 7;
            }
            LOBYTE(v180) = v32;
            --v181;
            goto LABEL_51;
          default:
            goto LABEL_51;
        }
        break;
      }
    }
    v44 = *(_QWORD *)(a2 + 72);
    if (v44)
    {
      v45 = *(_QWORD *)(a2 + 40);
      while (2)
      {
        switch(*(_BYTE *)(v45 + 16))
        {
          case 0:
            goto LABEL_76;
          case 1:
            if ((_BYTE)v180)
            {
              v46 = v180 - 1;
            }
            else
            {
              ++v179;
              v46 = 7;
            }
            LOBYTE(v180) = v46;
            --v181;
LABEL_76:
            v57 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 24 * *(_QWORD *)(v45 + 24) + 8);
            v58 = *(_QWORD *)(a1 + 712);
            if (v58 >= 0x40)
              goto LABEL_81;
            goto LABEL_82;
          case 2:
            v47 = *v179;
            v48 = v180;
            if ((_BYTE)v180)
            {
              v49 = v180 - 1;
            }
            else
            {
              ++v179;
              v49 = 7;
            }
            LOBYTE(v180) = v49;
            --v181;
            v54 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24);
            v55 = *(_QWORD *)(v45 + 24);
            if (((v47 >> v48) & 1) == 0)
            {
              *(_BYTE *)(a3 + **(unsigned int **)(v54 + 24 * v55 + 16)) = 0;
              goto LABEL_86;
            }
            v56 = v54 + 24 * v55;
            v57 = *(unsigned int *)(v56 + 8);
            *(_BYTE *)(a3 + **(unsigned int **)(v56 + 16)) = 1;
            v58 = *(_QWORD *)(a1 + 712);
            if (v58 < 0x40)
              goto LABEL_82;
            goto LABEL_81;
          case 3:
            v50 = *v179;
            v51 = v180;
            if ((_BYTE)v180)
            {
              v52 = v180 - 1;
            }
            else
            {
              ++v179;
              v52 = 7;
            }
            LOBYTE(v180) = v52;
            --v181;
            v59 = *(_QWORD *)(a2 + 8);
            v60 = *(_QWORD *)(v59 + 24);
            v61 = *(_QWORD *)(v45 + 24);
            if (((v50 >> v51) & 1) != 0)
            {
              v62 = v60 + 24 * v61;
              v57 = *(unsigned int *)(v62 + 8);
              *(_BYTE *)(a3 + **(unsigned int **)(v62 + 16)) = 1;
              v58 = *(_QWORD *)(a1 + 712);
              if (v58 >= 0x40)
              {
LABEL_81:
                CUCFErrorHandler(a1, 15);
                v58 = *(_QWORD *)(a1 + 712);
              }
LABEL_82:
              *(_QWORD *)(a1 + 200 + 8 * v58) = v45;
              *(_QWORD *)(a1 + 712) = v58 + 1;
              PERDecVal(a1, *(_QWORD *)v45, a3 + v57, v8);
              --*(_QWORD *)(a1 + 712);
            }
            else
            {
              *(_BYTE *)(a3 + **(unsigned int **)(v60 + 24 * v61 + 16)) = 0;
              v63 = *(_QWORD *)(v59 + 24) + 24 * *(_QWORD *)(v45 + 24);
              GenericAssignSort(a3 + *(unsigned int *)(v63 + 8), *(int **)(*(_QWORD *)(v63 + 16) + 8), 10, *(_QWORD *)v63);
            }
LABEL_86:
            if (v181)
              v64 = 0;
            else
              v64 = BYTE1(v180) == 1;
            if (v64)
              PERSetBitFieldLength(&v179);
            v45 += 32;
            if (!--v44)
              break;
            continue;
          case 5:
            if ((_BYTE)v180)
            {
              v53 = v180 - 1;
            }
            else
            {
              ++v179;
              v53 = 7;
            }
            LOBYTE(v180) = v53;
            --v181;
            goto LABEL_86;
          default:
            goto LABEL_86;
        }
        break;
      }
    }
  }
  else
  {
    v10 = *(_QWORD *)(a2 + 56);
    v11 = v8;
    if (v10)
    {
      v12 = *(uint64_t **)(a2 + 24);
      v13 = *(_QWORD *)(a1 + 712);
      do
      {
        v14 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 24 * v12[3] + 8);
        if (v13 >= 0x40)
        {
          CUCFErrorHandler(a1, 15);
          v13 = *(_QWORD *)(a1 + 712);
        }
        v15 = a3 + v14;
        *(_QWORD *)(a1 + 200 + 8 * v13) = v12;
        *(_QWORD *)(a1 + 712) = v13 + 1;
        v16 = *v12;
        v12 += 4;
        v8 = v11;
        PERDecVal(a1, v16, v15, v11);
        v13 = *(_QWORD *)(a1 + 712) - 1;
        *(_QWORD *)(a1 + 712) = v13;
        --v10;
      }
      while (v10);
    }
    v17 = *(_QWORD *)(a2 + 72);
    if (v17)
    {
      v18 = *(uint64_t **)(a2 + 40);
      v19 = *(_QWORD *)(a1 + 712);
      do
      {
        v20 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 24 * v18[3] + 8);
        if (v19 >= 0x40)
        {
          CUCFErrorHandler(a1, 15);
          v19 = *(_QWORD *)(a1 + 712);
        }
        v21 = a3 + v20;
        *(_QWORD *)(a1 + 200 + 8 * v19) = v18;
        *(_QWORD *)(a1 + 712) = v19 + 1;
        v22 = *v18;
        v18 += 4;
        v8 = v11;
        PERDecVal(a1, v22, v21, v11);
        v19 = *(_QWORD *)(a1 + 712) - 1;
        *(_QWORD *)(a1 + 712) = v19;
        --v17;
      }
      while (v17);
    }
  }
  if (v172 != 1)
  {
    v65 = *(_QWORD *)(a2 + 64);
    v66 = a4;
    if (v65)
      PERInitAbsentStructExtAdd(a1, (_QWORD *)a2, v65, a3);
    goto LABEL_231;
  }
  v174 = 0;
  v175 = 0;
  v176 = 0;
  if (PERGetBit(a1) == 1)
  {
    PERGetConsBitField(a1, (uint64_t)&v174);
  }
  else
  {
    v67 = PERGetBits(a1, 6u);
    v174 = *(unsigned __int8 **)(a1 + 1096);
    LOWORD(v175) = *(unsigned __int8 *)(a1 + 1105);
    v176 = v67 + 1;
    PERGetSkipBytes(a1, v176 >> 3);
    PERGetBits(a1, v176 & 7);
  }
  if (!*(_QWORD *)(a2 + 88))
    goto LABEL_217;
  v68 = *(_QWORD *)(a2 + 64);
  if (!v68)
    goto LABEL_217;
  v169 = 0;
  v69 = *(_QWORD *)(a2 + 32);
  v171 = 0;
  v173 = a1 + 200;
  while (2)
  {
    switch(*(_BYTE *)(v69 + 16))
    {
      case 0:
      case 1:
        v70 = v174;
        v71 = v175;
        if ((_BYTE)v175)
        {
          v72 = v175 - 1;
        }
        else
        {
          ++v174;
          v72 = 7;
        }
        v84 = *v70;
        LOBYTE(v175) = v72;
        v73 = --v176;
        v85 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24);
        v86 = *(_QWORD *)(v69 + 24);
        if (((v84 >> v71) & 1) != 0)
        {
          v87 = v85 + 24 * v86;
          v88 = *(unsigned int *)(v87 + 8);
          *(_BYTE *)(a3 + **(unsigned int **)(v87 + 16)) = 1;
          v89 = *(_QWORD *)(a1 + 712);
          if (v89 >= 0x40)
          {
            CUCFErrorHandler(a1, 15);
            v89 = *(_QWORD *)(a1 + 712);
          }
          *(_QWORD *)(v173 + 8 * v89) = v69;
          *(_QWORD *)(a1 + 712) = v89 + 1;
          PERDecodeOPENTypeField(a1, *(_QWORD *)v69, a3 + v88, (uint64_t)v8);
          --*(_QWORD *)(a1 + 712);
        }
        else
        {
          *(_BYTE *)(a3 + **(unsigned int **)(v85 + 24 * v86 + 16)) = 0;
          ++v169;
        }
        goto LABEL_206;
      case 2:
        v74 = v174;
        v75 = v175;
        if ((_BYTE)v175)
        {
          v76 = v175 - 1;
        }
        else
        {
          ++v174;
          v76 = 7;
        }
        v90 = *v74;
        LOBYTE(v175) = v76;
        v73 = --v176;
        v91 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24);
        v92 = *(_QWORD *)(v69 + 24);
        if (((v90 >> v75) & 1) != 0)
        {
          v93 = v91 + 24 * v92;
          v94 = *(unsigned int *)(v93 + 8);
          *(_BYTE *)(a3 + **(unsigned int **)(v93 + 16)) = 1;
          v95 = *(_QWORD *)(a1 + 712);
          if (v95 < 0x40)
            goto LABEL_128;
          goto LABEL_127;
        }
        *(_BYTE *)(a3 + **(unsigned int **)(v91 + 24 * v92 + 16)) = 0;
        goto LABEL_206;
      case 3:
        v77 = v174;
        v78 = v175;
        if ((_BYTE)v175)
        {
          v79 = v175 - 1;
        }
        else
        {
          ++v174;
          v79 = 7;
        }
        v96 = *v77;
        LOBYTE(v175) = v79;
        v73 = --v176;
        v97 = *(_QWORD *)(a2 + 8);
        v98 = *(_QWORD *)(v97 + 24);
        v99 = *(_QWORD *)(v69 + 24);
        if (((v96 >> v78) & 1) != 0)
        {
          v100 = v98 + 24 * v99;
          v94 = *(unsigned int *)(v100 + 8);
          *(_BYTE *)(a3 + **(unsigned int **)(v100 + 16)) = 1;
          v95 = *(_QWORD *)(a1 + 712);
          if (v95 >= 0x40)
          {
LABEL_127:
            CUCFErrorHandler(a1, 15);
            v95 = *(_QWORD *)(a1 + 712);
          }
LABEL_128:
          *(_QWORD *)(v173 + 8 * v95) = v69;
          *(_QWORD *)(a1 + 712) = v95 + 1;
          PERDecodeOPENTypeField(a1, *(_QWORD *)v69, a3 + v94, (uint64_t)v8);
          --*(_QWORD *)(a1 + 712);
          ++v171;
        }
        else
        {
          *(_BYTE *)(a3 + **(unsigned int **)(v98 + 24 * v99 + 16)) = 0;
          v109 = *(_QWORD *)(v97 + 24) + 24 * *(_QWORD *)(v69 + 24);
          GenericAssignSort(a3 + *(unsigned int *)(v109 + 8), *(int **)(*(_QWORD *)(v109 + 16) + 8), 10, *(_QWORD *)v109);
        }
        goto LABEL_206;
      case 4:
        v80 = v174;
        v81 = v175;
        if ((_BYTE)v175)
        {
          v82 = v175 - 1;
        }
        else
        {
          ++v174;
          v82 = 7;
        }
        v101 = *(_QWORD *)(v69 + 24);
        v68 -= v101;
        v102 = *v80;
        LOBYTE(v175) = v82;
        v73 = --v176;
        if (((v102 >> v81) & 1) != 0)
        {
          v179 = 0;
          v180 = 0;
          v181 = 0;
          v103 = 0;
          if (v101)
          {
            v104 = (unsigned __int8 *)(v69 + 48);
            do
            {
              v105 = *v104;
              v104 += 32;
              if (v105)
                ++v103;
              --v101;
            }
            while (v101);
          }
          if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
          {
            v106 = *(unsigned __int8 *)(a1 + 1105);
            if (v106 != 7)
            {
              *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v106;
              *(_BYTE *)(a1 + 1105) = 7;
            }
          }
          v107 = PERGetByte(a1);
          if (v107 < 0xC1)
          {
            if ((v107 & 0xC0) == 0x80)
            {
              v113 = v107;
              v114 = PERGetByte(a1);
              v108 = 0;
              v166 = v114 & 0xFFFF80FF | ((v113 & 0x7F) << 8);
              v115 = *(_QWORD *)(a1 + 1096) + v166;
            }
            else
            {
              if ((v107 & 0x80) != 0)
              {
                v167 = v107;
                EPErrorHandler(a1, 26);
                v108 = 0;
                v165 = 0;
                v166 = 0;
                goto LABEL_161;
              }
              v108 = 0;
              v166 = v107 & 0x7F;
              v115 = *(_QWORD *)(a1 + 1096) + v166;
            }
            v165 = v115;
            v167 = *(_BYTE *)(a1 + 1105);
          }
          else
          {
            v167 = v107;
            --*(_QWORD *)(a1 + 1096);
            if (*(_BYTE *)(a1 + 1105) == 7)
            {
              v165 = 0;
              v166 = PEROctetsDefragmentation(a1);
              v108 = 255;
            }
            else
            {
              v116 = *(unsigned __int8 *)(a1 + 1105);
              v117 = PEROctetsDefragmentationWithOffset(a1);
              v108 = v116;
              v165 = 0;
              v166 = v117;
            }
          }
LABEL_161:
          v168 = v108;
          if (v103 >> 16)
          {
            PERGetConsBitField(a1, (uint64_t)&v179);
          }
          else
          {
            v179 = *(unsigned __int8 **)(a1 + 1096);
            LOWORD(v180) = *(unsigned __int8 *)(a1 + 1105);
            v181 = v103 + 1;
            PERGetSkipBytes(a1, v103 >> 3);
            PERGetBits(a1, v103 & 7);
          }
          v118 = *(_QWORD *)(v69 + 24);
          if (v118)
          {
            v119 = v69 + 32;
            while (2)
            {
              switch(*(_BYTE *)(v119 + 16))
              {
                case 0:
                  goto LABEL_177;
                case 1:
                  if ((_BYTE)v180)
                  {
                    v120 = v180 - 1;
                  }
                  else
                  {
                    ++v179;
                    v120 = 7;
                  }
                  LOBYTE(v180) = v120;
                  --v181;
LABEL_177:
                  v128 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 24 * *(_QWORD *)(v119 + 24);
                  v129 = *(unsigned int *)(v128 + 8);
                  *(_BYTE *)(a3 + **(unsigned int **)(v128 + 16)) = 1;
                  v130 = *(_QWORD *)(a1 + 712);
                  if (v130 >= 0x40)
                    goto LABEL_186;
                  goto LABEL_187;
                case 2:
                  v121 = *v179;
                  v122 = v180;
                  if ((_BYTE)v180)
                  {
                    v123 = v180 - 1;
                  }
                  else
                  {
                    ++v179;
                    v123 = 7;
                  }
                  LOBYTE(v180) = v123;
                  --v181;
                  v131 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24);
                  v132 = *(_QWORD *)(v119 + 24);
                  if (((v121 >> v122) & 1) == 0)
                  {
                    *(_BYTE *)(a3 + **(unsigned int **)(v131 + 24 * v132 + 16)) = 0;
                    goto LABEL_192;
                  }
                  v133 = v131 + 24 * v132;
                  v129 = *(unsigned int *)(v133 + 8);
                  *(_BYTE *)(a3 + **(unsigned int **)(v133 + 16)) = 1;
                  v130 = *(_QWORD *)(a1 + 712);
                  if (v130 < 0x40)
                    goto LABEL_187;
                  goto LABEL_186;
                case 3:
                  v124 = *v179;
                  v125 = v180;
                  if ((_BYTE)v180)
                  {
                    v126 = v180 - 1;
                  }
                  else
                  {
                    ++v179;
                    v126 = 7;
                  }
                  LOBYTE(v180) = v126;
                  --v181;
                  v134 = *(_QWORD *)(a2 + 8);
                  v135 = *(_QWORD *)(v134 + 24);
                  v136 = *(_QWORD *)(v119 + 24);
                  if (((v124 >> v125) & 1) != 0)
                  {
                    v137 = v135 + 24 * v136;
                    v129 = *(unsigned int *)(v137 + 8);
                    *(_BYTE *)(a3 + **(unsigned int **)(v137 + 16)) = 1;
                    v130 = *(_QWORD *)(a1 + 712);
                    if (v130 >= 0x40)
                    {
LABEL_186:
                      CUCFErrorHandler(a1, 15);
                      v130 = *(_QWORD *)(a1 + 712);
                    }
LABEL_187:
                    *(_QWORD *)(v173 + 8 * v130) = v119;
                    *(_QWORD *)(a1 + 712) = v130 + 1;
                    PERDecVal(a1, *(_QWORD *)v119, a3 + v129, v8);
                    --*(_QWORD *)(a1 + 712);
                  }
                  else
                  {
                    *(_BYTE *)(a3 + **(unsigned int **)(v135 + 24 * v136 + 16)) = 0;
                    v138 = *(_QWORD *)(v134 + 24) + 24 * *(_QWORD *)(v119 + 24);
                    GenericAssignSort(a3 + *(unsigned int *)(v138 + 8), *(int **)(*(_QWORD *)(v138 + 16) + 8), 10, *(_QWORD *)v138);
                  }
LABEL_192:
                  if (v181)
                    v139 = 0;
                  else
                    v139 = BYTE1(v180) == 1;
                  if (v139)
                    PERSetBitFieldLength(&v179);
                  v119 += 32;
                  if (--v118)
                    continue;
                  v69 = v119 - 32;
                  break;
                case 5:
                  if ((_BYTE)v180)
                  {
                    v127 = v180 - 1;
                  }
                  else
                  {
                    ++v179;
                    v127 = 7;
                  }
                  LOBYTE(v180) = v127;
                  --v181;
                  goto LABEL_192;
                default:
                  goto LABEL_192;
              }
              break;
            }
          }
          if (v168)
          {
            if (*(unsigned __int8 *)(a1 + 1105) < v168)
              ++*(_QWORD *)(a1 + 1096);
            *(_BYTE *)(a1 + 1105) = v168;
            PEROctetsFragmentationWithOffset(a1, v166);
          }
          else
          {
            *(_QWORD *)(a1 + 1096) = v165;
            *(_BYTE *)(a1 + 1105) = v167;
          }
          ++v171;
          goto LABEL_206;
        }
        for (; v101; --v101)
        {
          v110 = *(unsigned __int8 *)(v69 + 48);
          if (v110 >= 3)
          {
            if (v110 == 3)
            {
              v111 = *(_QWORD *)(a2 + 8);
              *(_BYTE *)(a3 + **(unsigned int **)(*(_QWORD *)(v111 + 24) + 24 * *(_QWORD *)(v69 + 56) + 16)) = 0;
              v112 = *(_QWORD *)(v111 + 24) + 24 * *(_QWORD *)(v69 + 56);
              GenericAssignSort(a3 + *(unsigned int *)(v112 + 8), *(int **)(*(_QWORD *)(v112 + 16) + 8), 10, *(_QWORD *)v112);
            }
            else if (v110 != 5)
            {
              CUCFErrorHandler(a1, 15);
            }
          }
          else
          {
            *(_BYTE *)(a3
                     + **(unsigned int **)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 24 * *(_QWORD *)(v69 + 56) + 16)) = 0;
          }
          v69 += 32;
        }
LABEL_206:
        --v68;
        if (!v73)
        {
          if (BYTE1(v175) != 1)
            goto LABEL_212;
          PERSetBitFieldLength(&v174);
        }
        v69 += 32;
        if (v68)
          continue;
LABEL_212:
        if (v169 && v171)
          EPErrorHandler(a1, 33);
        if (v68)
        {
          PERInitAbsentStructExtAdd(a1, (_QWORD *)a2, v68, a3);
          goto LABEL_230;
        }
LABEL_217:
        v140 = v176;
        if (v176)
        {
          if (!BYTE1(v175))
          {
LABEL_219:
            v141 = v174;
            v142 = v175;
            do
            {
              v143 = *v141;
              if ((_BYTE)v142)
              {
                v144 = v142 - 1;
              }
              else
              {
                ++v141;
                v144 = 7;
              }
              if (((v143 >> v142) & 1) != 0)
                PERSkipOPENTypeField(a1);
              v142 = v144;
              --v140;
            }
            while (v140);
          }
        }
        else if (BYTE1(v175) == 1)
        {
          PERSetBitFieldLength(&v174);
          v140 = v176;
          if (v176)
          {
            if (!BYTE1(v175))
              goto LABEL_219;
          }
        }
LABEL_230:
        v66 = a4;
LABEL_231:
        if ((*(_BYTE *)(a2 + 48) & 0x10) == 0)
          return;
        v145 = (void **)v178;
        if (!v178)
        {
          if (v66)
            goto LABEL_261;
          goto LABEL_266;
        }
        v146 = 0;
        v147 = v178;
        do
        {
          do
          {
LABEL_234:
            v148 = v177;
            v149 = (unsigned __int8 **)((char *)v145[2] + 24);
            do
            {
              v150 = *v149;
              v151 = *v149;
              v152 = *v151;
              v149 = (unsigned __int8 **)(v151 + 24);
            }
            while (v152 == 128);
            if (!v177)
              goto LABEL_245;
            while (v150 != *(unsigned __int8 **)v148)
            {
LABEL_240:
              v148 = (void *)*((_QWORD *)v148 + 2);
              if (!v148)
                goto LABEL_245;
            }
            v179 = 0;
            v153 = CUCFGetOpenTypeObject(a1, (uint64_t)v145[2], *((unsigned __int8 **)v148 + 1), &v179);
            if (!v153)
            {
              EPErrorHandler(a1, 39);
              goto LABEL_240;
            }
            v154 = (uint64_t *)v153;
            v155 = *(_QWORD *)(a1 + 1096);
            v156 = *(_BYTE *)(a1 + 1105);
            *(_QWORD *)(a1 + 1096) = *v145;
            *(_BYTE *)(a1 + 1105) = *((_BYTE *)v145 + 8);
            v157 = *((_QWORD *)v145[2] + 1);
            GenericSetValue(*(unsigned int *)(v157 + 40), v145[3], *(_DWORD *)(v153 + 24));
            v158 = v145[3];
            v159 = *(unsigned int *)(v157 + 36);
            v160 = *(_QWORD *)(a1 + 712);
            if (v160 >= 0x40)
            {
              CUCFErrorHandler(a1, 15);
              v160 = *(_QWORD *)(a1 + 712);
            }
            *(_QWORD *)(a1 + 200 + 8 * v160) = v154;
            *(_QWORD *)(a1 + 712) = v160 + 1;
            PERDecodeOPENTypeField(a1, *v154, (uint64_t)v158 + v159, 0);
            --*(_QWORD *)(a1 + 712);
            *(_QWORD *)(a1 + 1096) = v155;
            *(_BYTE *)(a1 + 1105) = v156;
            *v145 = 0;
LABEL_245:
            if (*v145)
            {
              v147 = v145;
              v145 = (void **)v145[4];
              if (!v145)
                break;
              goto LABEL_234;
            }
            if (v145 != v178)
            {
              *((_QWORD *)v147 + 4) = v145[4];
              MMSFree(a1, v145, (void *)0x28);
              v145 = (void **)*((_QWORD *)v147 + 4);
              v146 = 1;
              if (!v145)
                break;
              goto LABEL_234;
            }
            v178 = v145[4];
            MMSFree(a1, v145, (void *)0x28);
            v146 = 1;
            v147 = v178;
            v145 = (void **)v178;
          }
          while (v178);
          v145 = (void **)v178;
          if (!v146)
            break;
          v146 = 0;
          v147 = v178;
        }
        while (v178);
        v66 = a4;
        if (!a4)
        {
          if (v178)
            EPErrorHandler(a1, 38);
LABEL_266:
          while (1)
          {
            v164 = v177;
            if (!v177)
              break;
            v177 = (void *)*((_QWORD *)v177 + 2);
            MMSFree(a1, v164, (void *)0x18);
          }
          return;
        }
        if (v178)
        {
          v161 = a4 + 1;
          v162 = a4[1];
          if (v162)
          {
            do
            {
              v163 = v162;
              v162 = (_QWORD *)v162[4];
            }
            while (v162);
            v161 = (void **)(v163 + 4);
          }
          *v161 = v178;
        }
LABEL_261:
        if (!*v66)
          *v66 = v177;
        return;
      case 5:
        if ((_BYTE)v175)
        {
          v83 = v175 - 1;
        }
        else
        {
          ++v174;
          v83 = 7;
        }
        LOBYTE(v175) = v83;
        v73 = --v176;
        goto LABEL_206;
      default:
        CUCFErrorHandler(a1, 15);
        v73 = v176;
        goto LABEL_206;
    }
  }
}

size_t PEREncodeUnconstrainedWholeNumberFunc(size_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  v4 = *(_DWORD *)(a2 + 4);
  if (v4 >= 0x80)
  {
    if (v4 >= 0x8000)
    {
      if (v4 >= 0x800000)
      {
        PERPutByte(a1, 4u);
        v5 = *(_DWORD *)(a2 + 4);
        if (*(_BYTE *)a2)
        {
          v5 = ~v5;
          *(_DWORD *)(a2 + 4) = v5;
        }
      }
      else
      {
        if (*(_BYTE *)a2)
        {
          v4 = 0xFFFFFF - v4;
          *(_DWORD *)(a2 + 4) = v4;
        }
        v5 = v4 | 0x3000000;
      }
      v6 = 32;
    }
    else
    {
      if (*(_BYTE *)a2)
      {
        v4 = 0xFFFF - v4;
        *(_DWORD *)(a2 + 4) = v4;
      }
      v5 = v4 | 0x20000;
      v6 = 24;
    }
  }
  else
  {
    if (*(_BYTE *)a2)
    {
      v4 = 255 - v4;
      *(_DWORD *)(a2 + 4) = v4;
    }
    v5 = v4 | 0x100;
    v6 = 16;
  }
  return PERPutBits(a1, v5, v6);
}

unint64_t PERDecodeUnconstrainedWholeNumberFunc(uint64_t a1, uint64_t a2)
{
  int v4;
  char v5;
  unint64_t result;

  v4 = PERGetByte(a1);
  if ((v4 - 5) <= 0xFFFFFFFB)
    EPErrorHandler(a1, 24);
  v5 = 8 * v4;
  result = PERGetBits(a1, (8 * v4));
  *(_DWORD *)(a2 + 4) = result;
  if ((v4 - 1) <= 2 && ((result >> (v5 - 8)) & 0x80) != 0)
    *(_DWORD *)(a2 + 4) = (-1 << v5) | result;
  return result;
}

uint64_t PEREncodeConstrainedWholeNumberFunc(uint64_t result, unsigned int *a2, unsigned int *a3)
{
  size_t v4;
  unsigned int v5;
  unsigned __int8 v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  _BYTE *v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  unsigned __int8 v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned int v24;
  unsigned __int8 v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;

  v4 = result;
  v5 = *a2;
  if ((*(_BYTE *)(result + 1056) & 0x40) == 0)
  {
    v6 = 0;
    if (!v5)
    {
LABEL_10:
      v9 = *a3;
      v10 = v6;
      return PERPutBits(v4, v9, v10);
    }
    do
    {
      v7 = v5;
      ++v6;
      v5 >>= 1;
    }
    while (v7 > 1);
LABEL_9:
    *a2 = v5;
    goto LABEL_10;
  }
  if (v5)
  {
    if (v5 <= 0xFE)
    {
      v6 = 0;
      do
      {
        v8 = v5;
        ++v6;
        v5 >>= 1;
      }
      while (v8 > 1);
      goto LABEL_9;
    }
    if (v5 == 255)
    {
      v11 = *(unsigned __int8 *)(result + 1105);
      if (v11 == 7)
      {
        v12 = *(_BYTE **)(result + 1096);
      }
      else
      {
        **(_BYTE **)(result + 1096) &= 510 << v11;
        v12 = (_BYTE *)(*(_QWORD *)(result + 1096) + 1);
        *(_QWORD *)(result + 1096) = v12;
        *(_BYTE *)(result + 1105) = 7;
      }
      if (v12 == *(_BYTE **)(result + 1080))
      {
        v15 = *(_QWORD *)(result + 1072);
        v16 = *(_QWORD *)(result + 1088) - v15;
        v17 = &v12[-v15];
        result = (*(uint64_t (**)(uint64_t, uint64_t))(result + 856))(result, 1);
        *(_QWORD *)(v4 + 1072) = result;
        v12 = &v17[result];
        *(_QWORD *)(v4 + 1080) = &v17[result + 1];
        *(_QWORD *)(v4 + 1088) = result + v16;
        *(_QWORD *)(v4 + 1096) = &v17[result];
      }
      *v12 = *a3;
LABEL_39:
      ++*(_QWORD *)(v4 + 1096);
      return result;
    }
    if (!HIWORD(v5))
    {
      v13 = *(unsigned __int8 *)(result + 1105);
      if (v13 == 7)
      {
        v14 = *(_BYTE **)(result + 1096);
      }
      else
      {
        **(_BYTE **)(result + 1096) &= 510 << v13;
        v14 = (_BYTE *)(*(_QWORD *)(result + 1096) + 1);
        *(_QWORD *)(result + 1096) = v14;
        *(_BYTE *)(result + 1105) = 7;
      }
      v28 = *(_QWORD *)(result + 1080);
      if (v28 - (uint64_t)v14 <= 1)
      {
        v29 = 2 - (v28 - (_QWORD)v14);
        v30 = *(_QWORD *)(result + 1072);
        v31 = *(_QWORD *)(result + 1088) - v30;
        v32 = &v14[-v30];
        v33 = v28 - v30;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(result + 856))(result, v29);
        *(_QWORD *)(v4 + 1072) = result;
        *(_QWORD *)(v4 + 1080) = result + v33 + v29;
        *(_QWORD *)(v4 + 1088) = result + v31;
        v14 = &v32[result];
        *(_QWORD *)(v4 + 1096) = &v32[result];
      }
      *v14 = BYTE1(*a3);
      v34 = *(_QWORD *)(v4 + 1096);
      *(_QWORD *)(v4 + 1096) = v34 + 1;
      *(_BYTE *)(v34 + 1) = *a3;
      goto LABEL_39;
    }
    v18 = 0;
    v19 = *a3;
    do
    {
      v20 = v5;
      ++v18;
      v5 >>= 1;
    }
    while (v20 > 1);
    *a2 = v5;
    v21 = v18 >> 3;
    if ((v18 & 7) != 0)
      ++v21;
    v22 = v21 - 1;
    if (v21 == 1)
    {
      v23 = 0;
      if (v19)
      {
LABEL_30:
        v25 = 0;
        do
        {
          ++v25;
          v26 = v19 > 1;
          v19 >>= 1;
        }
        while (v26);
        if ((v25 & 7) != 0)
          v27 = (v25 >> 3) + 1;
        else
          v27 = v25 >> 3;
        goto LABEL_43;
      }
    }
    else
    {
      v23 = 0;
      do
      {
        ++v23;
        v24 = v22;
        v22 >>= 1;
      }
      while (v24 >= 2);
      if (v19)
        goto LABEL_30;
    }
    v27 = 1;
LABEL_43:
    PERPutBits(result, v27 - 1, v23);
    v35 = *(unsigned __int8 *)(v4 + 1105);
    if (v35 != 7)
    {
      *(_BYTE *)(*(_QWORD *)(v4 + 1096))++ &= 510 << v35;
      *(_BYTE *)(v4 + 1105) = 7;
    }
    v9 = *a3;
    v10 = 8 * (v27 & 0x1F);
    return PERPutBits(v4, v9, v10);
  }
  return result;
}

size_t PEREncodeSemiConstrainedWholeNumberFunc(size_t a1, unsigned int *a2)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
  {
    v4 = *(unsigned __int8 *)(a1 + 1105);
    if (v4 != 7)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v4;
      *(_BYTE *)(a1 + 1105) = 7;
    }
  }
  v5 = *a2;
  if (*a2 >= 0x100)
  {
    if (v5 >= 0x10000)
    {
      if (HIBYTE(v5))
      {
        PERPutByte(a1, 4u);
        v6 = *a2;
      }
      else
      {
        v6 = v5 | 0x3000000;
      }
      v7 = 32;
    }
    else
    {
      v6 = v5 | 0x20000;
      v7 = 24;
    }
  }
  else
  {
    v6 = v5 | 0x100;
    v7 = 16;
  }
  return PERPutBits(a1, v6, v7);
}

void PERDecodeConstrainedWholeNumberFunc(uint64_t a1, unsigned int *a2, int *a3)
{
  unsigned int v5;
  unsigned __int8 v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 v16;
  unsigned int v17;
  int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;

  v5 = *a2;
  if ((*(_BYTE *)(a1 + 1056) & 0x40) == 0)
  {
    v6 = 0;
    if (!v5)
    {
LABEL_10:
      v9 = v6;
LABEL_11:
      *a3 = PERGetBits(a1, v9);
      return;
    }
    do
    {
      v7 = v5;
      ++v6;
      v5 >>= 1;
    }
    while (v7 > 1);
LABEL_9:
    *a2 = v5;
    goto LABEL_10;
  }
  if (v5)
  {
    if (v5 <= 0xFE)
    {
      v6 = 0;
      do
      {
        v8 = v5;
        ++v6;
        v5 >>= 1;
      }
      while (v8 > 1);
      goto LABEL_9;
    }
    if (v5 == 255)
    {
      v10 = *(unsigned __int8 *)(a1 + 1105);
      if (v10 == 7)
      {
        v11 = *(unsigned __int8 **)(a1 + 1096);
      }
      else
      {
        **(_BYTE **)(a1 + 1096) &= 510 << v10;
        v11 = (unsigned __int8 *)(*(_QWORD *)(a1 + 1096) + 1);
        *(_QWORD *)(a1 + 1096) = v11;
        *(_BYTE *)(a1 + 1105) = 7;
      }
      if (v11 == *(unsigned __int8 **)(a1 + 1088))
      {
        PERAppendData(a1, 1uLL);
        v11 = *(unsigned __int8 **)(a1 + 1096);
      }
      v15 = *v11;
      v14 = v11 + 1;
      *a3 = v15;
    }
    else
    {
      if (v5 >= 0x10000)
      {
        v16 = 0;
        do
        {
          v17 = v5;
          ++v16;
          v5 >>= 1;
        }
        while (v17 > 1);
        *a2 = v5;
        v18 = v16 >> 3;
        if ((v16 & 7) != 0)
          ++v18;
        v19 = v18 - 1;
        if (v18 == 1)
        {
          v20 = 0;
        }
        else
        {
          v20 = 0;
          do
          {
            ++v20;
            v21 = v19;
            v19 >>= 1;
          }
          while (v21 > 1);
        }
        v24 = PERGetBits(a1, v20);
        *a3 = v24;
        v25 = *(unsigned __int8 *)(a1 + 1105);
        if (v25 != 7)
        {
          *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v25;
          *(_BYTE *)(a1 + 1105) = 7;
          v24 = *a3;
        }
        v9 = (8 * v24 + 8) & 0xF8;
        goto LABEL_11;
      }
      v12 = *(unsigned __int8 *)(a1 + 1105);
      if (v12 == 7)
      {
        v13 = *(unsigned __int8 **)(a1 + 1096);
      }
      else
      {
        **(_BYTE **)(a1 + 1096) &= 510 << v12;
        v13 = (unsigned __int8 *)(*(_QWORD *)(a1 + 1096) + 1);
        *(_QWORD *)(a1 + 1096) = v13;
        *(_BYTE *)(a1 + 1105) = 7;
      }
      v22 = *(_QWORD *)(a1 + 1088) - (_QWORD)v13;
      if (v22 <= 1)
      {
        PERAppendData(a1, 2 - v22);
        v13 = *(unsigned __int8 **)(a1 + 1096);
      }
      v23 = *v13;
      *a3 = v23 << 8;
      *(_QWORD *)(a1 + 1096) = v13 + 1;
      *a3 = v13[1] | (v23 << 8);
      v14 = v13 + 2;
    }
    *(_QWORD *)(a1 + 1096) = v14;
  }
  else
  {
    *a3 = 0;
  }
}

unint64_t PERDecodeSemiConstrainedWholeNumberFunc(uint64_t a1, _DWORD *a2)
{
  int v4;
  char v5;
  unint64_t result;

  if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
  {
    v4 = *(unsigned __int8 *)(a1 + 1105);
    if (v4 != 7)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v4;
      *(_BYTE *)(a1 + 1105) = 7;
    }
  }
  v5 = PERGetByte(a1);
  if ((v5 - 5) <= 0xFBu)
    EPErrorHandler(a1, 24);
  result = PERGetBits(a1, 8 * (v5 & 0x1Fu));
  *a2 = result;
  return result;
}

size_t PEREncodePrimBIT_STRING(size_t result, unint64_t a2, char **a3)
{
  size_t v4;
  unsigned int v5;
  char *v6;
  char *v7;
  unint64_t v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _BYTE *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  _BYTE *v42;

  v4 = result;
  v5 = a2 & 7;
  v6 = *a3;
  v7 = *a3;
  if (a2 >= 8)
  {
    v9 = a2 >> 3;
    v10 = *(unsigned __int8 *)(result + 1105);
    v11 = *(_BYTE **)(result + 1096);
    v12 = &v11[a2 >> 3];
    if (v10 == 7)
    {
      v13 = *(_QWORD *)(result + 1080);
      if ((unint64_t)v12 > v13)
      {
        v14 = &v11[v9 - v13];
        v15 = *(_QWORD *)(result + 1072);
        v16 = *(_QWORD *)(result + 1088) - v15;
        v17 = &v11[-v15];
        v18 = v13 - v15;
        result = (*(uint64_t (**)(size_t, _BYTE *))(result + 856))(result, v14);
        *(_QWORD *)(v4 + 1072) = result;
        *(_QWORD *)(v4 + 1080) = &v14[v18 + result];
        *(_QWORD *)(v4 + 1088) = result + v16;
        v11 = &v17[result];
        *(_QWORD *)(v4 + 1096) = &v17[result];
      }
      v19 = 0;
      if (v9 <= 1)
        v20 = 1;
      else
        v20 = a2 >> 3;
      do
      {
        *v11 = 0;
        v21 = 8;
        do
        {
          v22 = *v7++;
          **(_BYTE **)(v4 + 1096) |= v22 << --v21;
        }
        while (v21);
        ++v19;
        v11 = (_BYTE *)(*(_QWORD *)(v4 + 1096) + 1);
        *(_QWORD *)(v4 + 1096) = v11;
      }
      while (v19 != v20);
    }
    else
    {
      v23 = v12 + 1;
      v24 = *(_QWORD *)(result + 1080);
      if ((unint64_t)v23 > v24)
      {
        v25 = (uint64_t)&v11[v9 - v24 + 1];
        v26 = *(_QWORD *)(result + 1072);
        v27 = *(_QWORD *)(result + 1088) - v26;
        v42 = &v11[-v26];
        v28 = v24 - v26;
        result = (*(uint64_t (**)(size_t, uint64_t))(result + 856))(result, v25);
        *(_QWORD *)(v4 + 1072) = result;
        *(_QWORD *)(v4 + 1080) = result + v28 + v25;
        *(_QWORD *)(v4 + 1088) = result + v27;
        v11 = &v42[result];
        *(_QWORD *)(v4 + 1096) = &v42[result];
        v10 = *(unsigned __int8 *)(v4 + 1105);
      }
      v29 = 0;
      v30 = 1;
      do
      {
        v31 = *v7++;
        v29 |= v31 << (v30-- + 6);
      }
      while (-(uint64_t)v10 != v30);
      v7 = &v6[v10 + 1];
      *v11 |= v29 >> (7 - v10);
      v32 = (_BYTE *)(*(_QWORD *)(v4 + 1096) + 1);
      *(_QWORD *)(v4 + 1096) = v32;
      if (v9 != 1)
      {
        v33 = 0;
        do
        {
          *v32 = 0;
          v34 = 8;
          do
          {
            v35 = *v7++;
            **(_BYTE **)(v4 + 1096) |= v35 << --v34;
          }
          while (v34);
          ++v33;
          v32 = (_BYTE *)(*(_QWORD *)(v4 + 1096) + 1);
          *(_QWORD *)(v4 + 1096) = v32;
        }
        while (v33 != v9 - 1);
      }
      *v32 = 0;
      if (*(_BYTE *)(v4 + 1105) != 7)
      {
        v36 = 0;
        v37 = 7;
        do
          **(_BYTE **)(v4 + 1096) |= v7[v36++] << v37--;
        while (v36 < 7 - (unint64_t)*(unsigned __int8 *)(v4 + 1105));
        v7 += v36;
      }
    }
    v38 = (unint64_t)&a3[1][-a2];
    *a3 += a2;
    a3[1] = (char *)v38;
  }
  if (v5)
  {
    if ((a2 & 7) != 0)
    {
      v39 = 0;
      v40 = 0;
      do
      {
        v41 = *v7++;
        v40 |= (v41 << (v39-- + 7));
      }
      while (-(uint64_t)(a2 & 7) != v39);
    }
    else
    {
      v40 = 0;
    }
    return PERPutBits(v4, v40 >> (8 - v5), v5);
  }
  return result;
}

uint64_t PERDecodePrimBIT_STRING(uint64_t result, size_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  size_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  _BYTE *v14;
  size_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  size_t v27;
  uint64_t v28;
  unsigned int v29;
  char v30;
  uint64x2_t v31;
  _BYTE *v32;
  uint64_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int32x2_t v36;

  if (a2)
  {
    v5 = result;
    v6 = *(unsigned __int8 *)(result + 1104);
    if (v6 == 7)
      v7 = *(unsigned __int8 *)(result + 1105) + 8 * (*(_QWORD *)(result + 1088) - *(_QWORD *)(result + 1096)) - 7;
    else
      v7 = *(unsigned __int8 *)(result + 1105) - v6 + 8 * (~*(_QWORD *)(result + 1096) + *(_QWORD *)(result + 1088));
    v8 = a2 >= v7;
    v9 = a2 - v7;
    if (v9 != 0 && v8)
    {
      if ((v9 & 7) != 0)
        v10 = (v9 >> 3) + 1;
      else
        v10 = v9 >> 3;
      PERAppendData(result, v10);
    }
    v11 = *(void **)a3;
    if (*(_QWORD *)a3)
    {
      v12 = gnssOsa_Calloc("posp_alloc", 18, 1, *(_QWORD *)(a3 + 8) + a2);
      *(_QWORD *)a3 = v12;
      memcpy_s("posp_memcpy", 29, v12, *(_DWORD *)(a3 + 8), v11, *(unsigned int *)(a3 + 8));
      free(v11);
      result = *(_QWORD *)a3;
      v13 = *(_QWORD *)(a3 + 8);
      v14 = (_BYTE *)(*(_QWORD *)a3 + v13);
      v15 = v13 + a2;
    }
    else
    {
      result = (uint64_t)gnssOsa_Calloc("posp_alloc", 18, 1, a2);
      *(_QWORD *)a3 = result;
      v15 = a2;
      v14 = (_BYTE *)result;
    }
    *(_QWORD *)(a3 + 8) = v15;
    *(_QWORD *)(v5 + 1112) = result;
    if (a2 >= 8)
    {
      v16 = a2 >> 3;
      v17 = *(unsigned __int8 *)(v5 + 1105);
      if (v17 == 7)
      {
        do
        {
          v18 = 8;
          do
            *v14++ = (**(unsigned __int8 **)(v5 + 1096) >> --v18) & 1;
          while (v18);
          ++*(_QWORD *)(v5 + 1096);
          --v16;
        }
        while (v16);
      }
      else
      {
        v19 = 0;
        v20 = 7;
        v21 = (**(unsigned __int8 **)(v5 + 1096) << (7 - v17));
        do
        {
          v14[v19] = (v21 >> v20) & 1;
          v22 = v19 + 1;
          v23 = *(unsigned __int8 *)(v5 + 1105);
          --v20;
          v8 = v19++ >= v23;
        }
        while (!v8);
        ++*(_QWORD *)(v5 + 1096);
        v14 += v22;
        if (a2 >= 0x10)
        {
          do
          {
            v24 = 8;
            do
              *v14++ = (**(unsigned __int8 **)(v5 + 1096) >> --v24) & 1;
            while (v24);
            --v16;
            ++*(_QWORD *)(v5 + 1096);
          }
          while (v16 > 1);
          LODWORD(v23) = *(unsigned __int8 *)(v5 + 1105);
        }
        if ((_DWORD)v23 != 7)
        {
          v25 = 0;
          v26 = 7;
          do
            v14[v25++] = (**(unsigned __int8 **)(v5 + 1096) >> v26--) & 1;
          while (v25 < 7 - (unint64_t)*(unsigned __int8 *)(v5 + 1105));
          v14 += v25;
        }
      }
    }
    if ((a2 & 7) != 0)
    {
      result = PERGetBits(v5, a2 & 7);
      v27 = a2 & 7;
      v28 = 0;
      v29 = ((_DWORD)result << (8 - (a2 & 7))) & 0xFE;
      v30 = v27 + 1;
      v31 = (uint64x2_t)vdupq_n_s64(v27 - 1);
      v32 = v14 + 1;
      v33 = -(uint64_t)(v30 & 0xE);
      v34 = (int64x2_t)xmmword_21E7FA450;
      v35 = vdupq_n_s64(2uLL);
      do
      {
        v36 = vmovn_s64((int64x2_t)vcgeq_u64(v31, (uint64x2_t)v34));
        if ((v36.i8[0] & 1) != 0)
          *(v32 - 1) = (v29 >> (v28 + 7)) & 1;
        if ((v36.i8[4] & 1) != 0)
          *v32 = (v29 >> (v28 + 6)) & 1;
        v34 = vaddq_s64(v34, v35);
        v32 += 2;
        v28 -= 2;
      }
      while (v33 != v28);
    }
  }
  return result;
}

uint64_t PEREncodePrimOCTET_STRING(uint64_t a1, size_t a2, uint64_t a3)
{
  uint64_t result;
  size_t v6;

  result = PERPutSeg(a1, *(unsigned __int8 **)a3, a2);
  v6 = *(_QWORD *)(a3 + 8) - a2;
  *(_QWORD *)a3 += a2;
  *(_QWORD *)(a3 + 8) = v6;
  return result;
}

void PERDecodePrimOCTET_STRING(uint64_t a1, size_t a2, uint64_t a3)
{
  size_t v3;
  char *v6;
  uint64_t v7;
  char *v8;
  const void *v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  unsigned __int8 *v13;

  v3 = a2;
  if (a2 - 1 > 0x1FFE)
  {
    if (a2 > 0x2000)
      EPErrorHandler(a1, 28);
  }
  else
  {
    if (*(_QWORD *)a3)
    {
      v6 = (char *)gnssOsa_Calloc("posp_alloc", 18, 1, *(_QWORD *)(a3 + 8) + a2);
      memcpy_s("posp_memcpy", 29, v6, *(_DWORD *)(a3 + 8) + v3, *(const void **)a3, *(unsigned int *)(a3 + 8));
      if (*(_QWORD *)a3)
        free(*(void **)a3);
      v7 = *(_QWORD *)(a3 + 8);
      v8 = &v6[v7];
      *(_QWORD *)a3 = v6;
      *(_QWORD *)(a3 + 8) = v7 + v3;
    }
    else
    {
      v6 = (char *)gnssOsa_Calloc("posp_alloc", 18, 1, a2);
      *(_QWORD *)a3 = v6;
      *(_QWORD *)(a3 + 8) = v3;
      v8 = v6;
    }
    *(_QWORD *)(a1 + 1112) = v6;
    v9 = *(const void **)(a1 + 1096);
    v10 = *(_QWORD *)(a1 + 1088) - (_QWORD)v9;
    if (*(_BYTE *)(a1 + 1105) == 7)
    {
      if (v3 > v10)
      {
        PERAppendData(a1, v3 - v10);
        v9 = *(const void **)(a1 + 1096);
      }
      memcpy_s("posp_memcpy", 29, v8, v3, v9, v3);
      *(_QWORD *)(a1 + 1096) += v3;
    }
    else
    {
      v11 = v3 >= v10;
      v12 = v3 - v10;
      if (v11)
        PERAppendData(a1, v12 + 1);
      do
      {
        *v8 = **(unsigned __int8 **)(a1 + 1096) << (7 - *(_BYTE *)(a1 + 1105));
        v13 = (unsigned __int8 *)(*(_QWORD *)(a1 + 1096) + 1);
        *(_QWORD *)(a1 + 1096) = v13;
        *v8++ |= *v13 >> (*(_BYTE *)(a1 + 1105) + 1);
        --v3;
      }
      while (v3);
    }
  }
}

_DWORD *PERDecodeOBJECT_IDENTIFIERComps(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *result;
  char v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;

  v6 = PERGetByte(a1);
  if ((v6 & 0x80) != 0)
    EPErrorHandler(a1, 28);
  v7 = gnssOsa_Calloc("posp_alloc", 18, 1, 0x10uLL);
  v7[2] = v6 / 0x28u;
  *(_QWORD *)v7 = 0;
  if (*(_QWORD *)a3)
  {
    **(_QWORD **)(a3 + 8) = v7;
    ++*(_DWORD *)(a3 + 16);
  }
  else
  {
    *(_QWORD *)a3 = v7;
    *(_DWORD *)(a3 + 16) = 1;
  }
  v8 = a2 - 1;
  *(_QWORD *)(a3 + 8) = v7;
  *(_BYTE *)(a3 + 20) = 8;
  result = gnssOsa_Calloc("posp_alloc", 18, 1, 0x10uLL);
  result[2] = v6 % 0x28u;
  *(_QWORD *)result = 0;
  if (*(_QWORD *)a3)
  {
    **(_QWORD **)(a3 + 8) = result;
    ++*(_DWORD *)(a3 + 16);
  }
  else
  {
    *(_QWORD *)a3 = result;
    *(_DWORD *)(a3 + 16) = 1;
  }
  *(_QWORD *)(a3 + 8) = result;
  *(_BYTE *)(a3 + 20) = 8;
  if (a2 != 1)
  {
    do
    {
      v10 = PERGetByte(a1);
      v11 = v10 & 0x7F;
      if (v10 < 0)
      {
        v13 = 1;
        do
        {
          v14 = PERGetByte(a1);
          v11 = v14 & 0x7F | (v11 << 7);
          v12 = v13 + 1;
          if ((v14 & 0x80) == 0)
            break;
        }
        while (v13++ < 5);
      }
      else
      {
        v12 = 1;
      }
      result = gnssOsa_Calloc("posp_alloc", 18, 1, 0x10uLL);
      result[2] = v11;
      *(_QWORD *)result = 0;
      if (*(_QWORD *)a3)
      {
        **(_QWORD **)(a3 + 8) = result;
        v16 = *(_DWORD *)(a3 + 16) + 1;
      }
      else
      {
        *(_QWORD *)a3 = result;
        v16 = 1;
      }
      *(_DWORD *)(a3 + 16) = v16;
      *(_QWORD *)(a3 + 8) = result;
      *(_BYTE *)(a3 + 20) = 8;
      v8 -= v12;
    }
    while (v8);
  }
  return result;
}

size_t PEREncodePrimCHARACTER_STRING(size_t result, uint64_t a2, char **a3)
{
  uint64_t v4;
  size_t v5;
  char *v6;
  char *v7;
  int v8;
  unint64_t v9;
  char *v10;
  unsigned __int8 *v11;
  int v12;
  char *v13;

  v4 = a2;
  v5 = result;
  if (*((_BYTE *)a3 + 25) == 1)
  {
    if (a2)
    {
      v6 = *a3;
      do
      {
        v7 = a3[4];
        v8 = *v6;
        if (*v7 == v8)
        {
          v9 = 0;
        }
        else
        {
          v10 = 0;
          v11 = (unsigned __int8 *)(v7 + 1);
          while (a3[5] != v10)
          {
            v9 = (unint64_t)(v10 + 1);
            v12 = (v10++)[(_QWORD)v11];
            if (v12 == v8)
              goto LABEL_11;
          }
          v9 = (unint64_t)a3[5];
        }
LABEL_11:
        result = PERPutBits(v5, v9, *((unsigned __int8 *)a3 + 24));
        v6 = *a3 + 1;
        *a3 = v6;
        --v4;
      }
      while (v4);
    }
  }
  else if (a2)
  {
    v13 = *a3;
    do
    {
      result = PERPutBits(v5, *v13, *((unsigned __int8 *)a3 + 24));
      v13 = *a3 + 1;
      *a3 = v13;
      --v4;
    }
    while (v4);
  }
  return result;
}

unint64_t PERDecodePrimCHARACTER_STRING(unint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;

  if (a2)
  {
    v4 = a2;
    v5 = result;
    if (*a3)
    {
      v6 = (void *)(*a3 - 1);
      v7 = gnssOsa_Calloc("posp_alloc", 18, 1, a2 + a3[1] + 2);
      *a3 = (uint64_t)v7;
      memcpy_s("posp_memcpy", 29, v7, *((_DWORD *)a3 + 2) + v4 + 2, v6, *((unsigned int *)a3 + 2));
      free(v6);
      v8 = *a3;
      v9 = a3[1];
      v10 = *a3 + 1;
      v11 = (_BYTE *)(v10 + v9);
      *a3 = v10;
      a3[1] = v9 + v4;
    }
    else
    {
      v12 = gnssOsa_Calloc("posp_alloc", 18, 1, a2 + 2);
      *a3 = (uint64_t)v12;
      *v12 = 86;
      v8 = *a3;
      v11 = (_BYTE *)(*a3 + 1);
      *a3 = (uint64_t)v11;
      a3[1] = v4;
    }
    *(_QWORD *)(v5 + 1112) = v8;
    do
    {
      result = PERGetBits(v5, *((unsigned __int8 *)a3 + 24));
      *v11++ = result;
      --v4;
    }
    while (v4);
  }
  return result;
}

size_t PEREncodeNormallySmallNonNegativeWholeNumber(size_t a1, unint64_t a2)
{
  unsigned int v2;
  unsigned int v5;
  uint64_t v6;

  v2 = a2;
  v6 = *MEMORY[0x24BDAC8D0];
  if (a2 <= 0x3E)
    return PERPutBits(a1, a2, 7u);
  PERPutBit(a1, 1);
  v5 = v2;
  return PEREncodeSemiConstrainedWholeNumberFunc(a1, &v5);
}

unint64_t PERDecodeNormallySmallNonNegativeWholeNumber(uint64_t a1, _QWORD *a2)
{
  unint64_t result;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (PERGetBit(a1))
  {
    v6 = 0;
    result = PERDecodeSemiConstrainedWholeNumberFunc(a1, &v6);
    v5 = v6;
  }
  else
  {
    result = PERGetBits(a1, 6u);
    v5 = result;
  }
  *a2 = v5;
  return result;
}

size_t PERSkipPrimBitField(size_t a1, uint64_t a2, unint64_t a3)
{
  char v3;

  v3 = a3;
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 1096) - *(_QWORD *)(a1 + 1088);
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(a1 + 1105);
  *(_QWORD *)(a2 + 16) = a3 + 1;
  PERSkipBytes(a1, a3 >> 3);
  return PERPutBits(a1, 0, v3 & 7);
}

size_t PERSkipConsBitField(size_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a3;
  if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
  {
    v6 = *(unsigned __int8 *)(a1 + 1105);
    if (v6 != 7)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v6;
      *(_BYTE *)(a1 + 1105) = 7;
    }
  }
  *(_QWORD *)(a2 + 16) = 0;
  if (a3 >= 0x10000)
  {
    do
    {
      PERPutByte(a1, 0xC4u);
      if (!*(_QWORD *)(a2 + 16))
      {
        *(_QWORD *)a2 = *(_QWORD *)(a1 + 1096) - *(_QWORD *)(a1 + 1088);
        *(_BYTE *)(a2 + 8) = *(_BYTE *)(a1 + 1105);
        *(_QWORD *)(a2 + 16) = 0x10000;
      }
      PERSkipBytes(a1, 0x2000);
      v3 -= 0x10000;
    }
    while (v3 >> 16);
  }
  v7 = v3 - 49152;
  if (v3 > 0xC000)
  {
    PERPutByte(a1, 0xC3u);
    if (!*(_QWORD *)(a2 + 16))
    {
      *(_QWORD *)a2 = *(_QWORD *)(a1 + 1096) - *(_QWORD *)(a1 + 1088);
      *(_BYTE *)(a2 + 8) = *(_BYTE *)(a1 + 1105);
      *(_QWORD *)(a2 + 16) = 49152;
    }
    v8 = a1;
    v9 = 6144;
LABEL_20:
    PERSkipBytes(v8, v9);
    v3 = v7;
    goto LABEL_21;
  }
  if (v3 >= 0x8000)
  {
    PERPutByte(a1, 0xC2u);
    if (!*(_QWORD *)(a2 + 16))
    {
      *(_QWORD *)a2 = *(_QWORD *)(a1 + 1096) - *(_QWORD *)(a1 + 1088);
      *(_BYTE *)(a2 + 8) = *(_BYTE *)(a1 + 1105);
      *(_QWORD *)(a2 + 16) = 0x8000;
    }
    PERSkipBytes(a1, 4096);
    v3 -= 0x8000;
  }
  v7 = v3 - 0x4000;
  if (v3 >= 0x4000)
  {
    PERPutByte(a1, 0xC1u);
    if (!*(_QWORD *)(a2 + 16))
    {
      *(_QWORD *)a2 = *(_QWORD *)(a1 + 1096) - *(_QWORD *)(a1 + 1088);
      *(_BYTE *)(a2 + 8) = *(_BYTE *)(a1 + 1105);
      *(_QWORD *)(a2 + 16) = 0x4000;
    }
    v8 = a1;
    v9 = 2048;
    goto LABEL_20;
  }
LABEL_21:
  if (v3 > 0x7F)
    PERPutBits(a1, v3 | 0x8000, 0x10u);
  else
    PERPutByte(a1, v3);
  if (!*(_QWORD *)(a2 + 16))
  {
    *(_QWORD *)a2 = *(_QWORD *)(a1 + 1096) - *(_QWORD *)(a1 + 1088);
    *(_BYTE *)(a2 + 8) = *(_BYTE *)(a1 + 1105);
    *(_QWORD *)(a2 + 16) = v3;
  }
  PERSkipBytes(a1, v3 >> 3);
  return PERPutBits(a1, 0, v3 & 7);
}

void PEREncodeStructRootWithOptDef(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = a3[7];
  if (v8)
  {
    v9 = a3[3];
    do
    {
      switch(*(_BYTE *)(v9 + 16))
      {
        case 0:
          goto LABEL_5;
        case 1:
          PERSetBitToBitField(a1, a2, 1);
LABEL_5:
          v10 = *(unsigned int *)(*(_QWORD *)(a3[1] + 24) + 24 * *(_QWORD *)(v9 + 24) + 8);
          v11 = *(_QWORD *)(a1 + 712);
          if (v11 >= 0x40)
            goto LABEL_6;
          goto LABEL_7;
        case 2:
          v12 = *(_QWORD *)(a3[1] + 24);
          v13 = *(_QWORD *)(v9 + 24);
          if (*(_BYTE *)(a4 + **(unsigned int **)(v12 + 24 * v13 + 16)) != 1)
            goto LABEL_14;
          v10 = *(unsigned int *)(v12 + 24 * v13 + 8);
          PERSetBitToBitField(a1, a2, 1);
          v11 = *(_QWORD *)(a1 + 712);
          if (v11 >= 0x40)
            goto LABEL_6;
          goto LABEL_7;
        case 3:
          v14 = *(_QWORD *)(a3[1] + 24);
          v15 = *(_QWORD *)(v9 + 24);
          if (*(_BYTE *)(a4 + **(unsigned int **)(v14 + 24 * v15 + 16)) != 1)
            goto LABEL_14;
          v10 = *(unsigned int *)(v14 + 24 * v15 + 8);
          PERSetBitToBitField(a1, a2, 1);
          v11 = *(_QWORD *)(a1 + 712);
          if (v11 >= 0x40)
          {
LABEL_6:
            CUCFErrorHandler(a1, 15);
            v11 = *(_QWORD *)(a1 + 712);
          }
LABEL_7:
          *(_QWORD *)(a1 + 200 + 8 * v11) = v9;
          *(_QWORD *)(a1 + 712) = v11 + 1;
          PEREncVal(a1, *(_QWORD *)v9, a4 + v10);
          --*(_QWORD *)(a1 + 712);
          break;
        case 5:
LABEL_14:
          PERSetBitToBitField(a1, a2, 0);
          break;
        default:
          break;
      }
      v9 += 32;
      --v8;
    }
    while (v8);
  }
  v16 = a3[9];
  if (v16)
  {
    v17 = a3[5];
    do
    {
      switch(*(_BYTE *)(v17 + 16))
      {
        case 0:
          goto LABEL_20;
        case 1:
          PERSetBitToBitField(a1, a2, 1);
LABEL_20:
          v18 = *(unsigned int *)(*(_QWORD *)(a3[1] + 24) + 24 * *(_QWORD *)(v17 + 24) + 8);
          v19 = *(_QWORD *)(a1 + 712);
          if (v19 >= 0x40)
            goto LABEL_21;
          goto LABEL_22;
        case 2:
          v20 = *(_QWORD *)(a3[1] + 24);
          v21 = *(_QWORD *)(v17 + 24);
          if (*(_BYTE *)(a4 + **(unsigned int **)(v20 + 24 * v21 + 16)) != 1)
            goto LABEL_29;
          v18 = *(unsigned int *)(v20 + 24 * v21 + 8);
          PERSetBitToBitField(a1, a2, 1);
          v19 = *(_QWORD *)(a1 + 712);
          if (v19 >= 0x40)
            goto LABEL_21;
          goto LABEL_22;
        case 3:
          v22 = *(_QWORD *)(a3[1] + 24);
          v23 = *(_QWORD *)(v17 + 24);
          if (*(_BYTE *)(a4 + **(unsigned int **)(v22 + 24 * v23 + 16)) != 1)
            goto LABEL_29;
          v18 = *(unsigned int *)(v22 + 24 * v23 + 8);
          PERSetBitToBitField(a1, a2, 1);
          v19 = *(_QWORD *)(a1 + 712);
          if (v19 >= 0x40)
          {
LABEL_21:
            CUCFErrorHandler(a1, 15);
            v19 = *(_QWORD *)(a1 + 712);
          }
LABEL_22:
          *(_QWORD *)(a1 + 200 + 8 * v19) = v17;
          *(_QWORD *)(a1 + 712) = v19 + 1;
          PEREncVal(a1, *(_QWORD *)v17, a4 + v18);
          --*(_QWORD *)(a1 + 712);
          break;
        case 5:
LABEL_29:
          PERSetBitToBitField(a1, a2, 0);
          break;
        default:
          break;
      }
      v17 += 32;
      --v16;
    }
    while (v16);
  }
}

uint64_t PEREncodeStructRoot(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = result;
  v6 = a2[7];
  if (v6)
  {
    v7 = (uint64_t *)a2[3];
    v8 = *(_QWORD *)(result + 712);
    do
    {
      v9 = *(unsigned int *)(*(_QWORD *)(a2[1] + 24) + 24 * v7[3] + 8);
      if (v8 >= 0x40)
      {
        CUCFErrorHandler(v5, 15);
        v8 = *(_QWORD *)(v5 + 712);
      }
      *(_QWORD *)(v5 + 200 + 8 * v8) = v7;
      *(_QWORD *)(v5 + 712) = v8 + 1;
      v10 = *v7;
      v7 += 4;
      result = PEREncVal(v5, v10, a3 + v9);
      v8 = *(_QWORD *)(v5 + 712) - 1;
      *(_QWORD *)(v5 + 712) = v8;
      --v6;
    }
    while (v6);
  }
  v11 = a2[9];
  if (v11)
  {
    v12 = (uint64_t *)a2[5];
    v13 = *(_QWORD *)(v5 + 712);
    do
    {
      v14 = *(unsigned int *)(*(_QWORD *)(a2[1] + 24) + 24 * v12[3] + 8);
      if (v13 >= 0x40)
      {
        CUCFErrorHandler(v5, 15);
        v13 = *(_QWORD *)(v5 + 712);
      }
      *(_QWORD *)(v5 + 200 + 8 * v13) = v12;
      *(_QWORD *)(v5 + 712) = v13 + 1;
      v15 = *v12;
      v12 += 4;
      result = PEREncVal(v5, v15, a3 + v14);
      v13 = *(_QWORD *)(v5 + 712) - 1;
      *(_QWORD *)(v5 + 712) = v13;
      --v11;
    }
    while (v11);
  }
  return result;
}

void PERSetBitToBitField(uint64_t a1, uint64_t a2, char a3)
{
  char v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  *(_BYTE *)(*(_QWORD *)(a1 + 1088) + *(_QWORD *)a2) |= a3 << *(_BYTE *)(a2 + 8);
  v3 = *(_BYTE *)(a2 + 8);
  if (v3)
  {
    v4 = (uint64_t *)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a2 + 8) = v3 - 1;
    *(_QWORD *)(a2 + 16) = --v5;
    if (v5)
      return;
    v6 = (v3 - 1);
    v7 = *(_QWORD *)a2;
    if ((v3 - 1) != 7)
    {
      v8 = 0;
      v9 = *(_QWORD *)(a1 + 1088);
      v10 = *(unsigned __int8 *)(v9 + v7) << (8 - v3);
      v11 = v7 + 1;
      *(_QWORD *)a2 = v11;
      v12 = (*(unsigned __int8 *)(v9 + v11) >> v3) | v10;
      goto LABEL_7;
    }
  }
  else
  {
    v7 = *(_QWORD *)a2 + 1;
    *(_QWORD *)a2 = v7;
    *(_BYTE *)(a2 + 8) = 7;
    v4 = (uint64_t *)(a2 + 16);
    v13 = *(_QWORD *)(a2 + 16) - 1;
    *(_QWORD *)(a2 + 16) = v13;
    if (v13)
      return;
  }
  v9 = *(_QWORD *)(a1 + 1088);
  LOBYTE(v12) = *(_BYTE *)(v9 + v7);
  v11 = v7 + 1;
  *(_QWORD *)a2 = v11;
  LOBYTE(v6) = 7;
  v8 = 1;
LABEL_7:
  switch((char)v12)
  {
    case -63:
      v14 = 0x4000;
      goto LABEL_19;
    case -62:
      v14 = 0x8000;
      goto LABEL_19;
    case -61:
      v14 = 49152;
      goto LABEL_19;
    case -60:
      v14 = 0x10000;
      goto LABEL_19;
    default:
      if ((v12 & 0xC0) == 0x80)
      {
        v15 = (v12 & 0x7F) << 8;
        *v4 = v15;
        v16 = *(unsigned __int8 *)(v9 + v11);
        if (v8)
        {
          *(_QWORD *)a2 = v11 + 1;
        }
        else
        {
          v17 = v11 + 1;
          *(_QWORD *)a2 = v17;
          v16 = (*(unsigned __int8 *)(v9 + v17) >> (v6 + 1)) | (v16 << (7 - v6));
        }
        v14 = v16 | (unint64_t)v15;
        goto LABEL_19;
      }
      if ((v12 & 0x80) == 0)
      {
        v14 = v12 & 0x7F;
LABEL_19:
        *v4 = v14;
        return;
      }
      EPErrorHandler(a1, 26);
      break;
  }
}

void *PEREncodeOPENTypeField(size_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  unsigned __int8 v13;
  void *result;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;

  v6 = *(unsigned __int8 *)(a1 + 1105);
  v7 = v6;
  if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
  {
    v7 = 7;
    if (v6 != 7)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v6;
      *(_BYTE *)(a1 + 1105) = 7;
    }
  }
  v8 = *(_QWORD *)(a1 + 1096) - *(_QWORD *)(a1 + 1088);
  PERSkipBytes(a1, 1);
  PEREncVal(a1, a2, a3);
  v9 = *(_QWORD *)(a1 + 1096);
  v10 = v9 - *(_QWORD *)(a1 + 1088);
  v11 = *(unsigned __int8 *)(a1 + 1105);
  v12 = v11 >= v7;
  v13 = v11 - v7;
  if (v12)
  {
    v15 = v10 + ~v8;
    if (!v15)
      goto LABEL_12;
    result = (void *)PERPutBits(a1, 0, v13);
  }
  else
  {
    result = (void *)PERPutBits(a1, 0, (v13 + 8));
    v15 = v10 - v8;
    if (!v15)
    {
      v9 = *(_QWORD *)(a1 + 1096);
LABEL_12:
      *(_QWORD *)(a1 + 1096) = v9 - 1;
      return (void *)PERPutBits(a1, 0x100uLL, 0x10u);
    }
  }
  if (v15 > 0x7F)
  {
    if (*(_BYTE *)(a1 + 1105) == 7)
      return PEROctetsFragmentation(a1, v15);
    else
      return PEROctetsFragmentationWithOffset(a1, v15);
  }
  else
  {
    v16 = (_BYTE *)(*(_QWORD *)(a1 + 1088) + v8);
    v17 = *(unsigned __int8 *)(a1 + 1105);
    if (v17 == 7)
    {
      *v16 = v15;
    }
    else
    {
      *v16 |= v15 >> (7 - v17);
      v16[1] |= v15 << (*(_BYTE *)(a1 + 1105) + 1);
    }
  }
  return result;
}

void PERGetConsBitField(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  char v6;
  char v7;
  int v8;
  unint64_t v9;

  if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
  {
    v4 = *(unsigned __int8 *)(a1 + 1105);
    if (v4 != 7)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v4;
      *(_BYTE *)(a1 + 1105) = 7;
    }
  }
  v5 = 0;
  *(_QWORD *)(a2 + 16) = 0;
  do
  {
    v6 = PERGetByte(a1);
    if ((v6 + 63) >= 4u)
    {
      v7 = v6;
      if ((v6 & 0xC0) == 0x80)
      {
        v8 = PERGetByte(a1);
        v5 = v8 & 0xFFFF80FF | ((v7 & 0x7F) << 8);
        if (!*(_QWORD *)(a2 + 16))
        {
          *(_QWORD *)a2 = *(_QWORD *)(a1 + 1096);
          *(_WORD *)(a2 + 8) = *(unsigned __int8 *)(a1 + 1105);
          *(_QWORD *)(a2 + 16) = v5;
        }
        PERGetBits(a1, v8 & 7);
      }
      else if (v6 < 0)
      {
        EPErrorHandler(a1, 26);
      }
      else
      {
        v9 = v6 & 0x7F;
        if (!*(_QWORD *)(a2 + 16))
        {
          *(_QWORD *)a2 = *(_QWORD *)(a1 + 1096);
          *(_WORD *)(a2 + 8) = *(unsigned __int8 *)(a1 + 1105);
          *(_QWORD *)(a2 + 16) = v9;
        }
        PERGetBits(a1, v6 & 7);
        v5 = v9 >> 3;
      }
    }
    else
    {
      v5 = ((unint64_t)(v6 + 63) << 11) + 2048;
    }
    if (!*(_QWORD *)(a2 + 16))
    {
      *(_QWORD *)a2 = *(_QWORD *)(a1 + 1096);
      *(_BYTE *)(a2 + 8) = *(_BYTE *)(a1 + 1105);
      *(_BYTE *)(a2 + 9) = 1;
      *(_QWORD *)(a2 + 16) = 8 * v5;
    }
    PERGetSkipBytes(a1, v5);
  }
  while (v5 > 0x7FF);
}

size_t PERInitAbsentStructExtAdd(size_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  v5 = a3;
  v7 = result;
  v8 = (_QWORD *)(a2[4] - 32 * a3 + 32 * a2[8] + 24);
  do
  {
    v9 = *((unsigned __int8 *)v8 - 8);
    if (v9 < 3)
    {
      *(_BYTE *)(a4 + **(unsigned int **)(*(_QWORD *)(a2[1] + 24) + 24 * *v8 + 16)) = 0;
    }
    else if (v9 - 4 >= 2)
    {
      if (v9 == 3)
      {
        v10 = a2[1];
        *(_BYTE *)(a4 + **(unsigned int **)(*(_QWORD *)(v10 + 24) + 24 * *v8 + 16)) = 0;
        v11 = *(_QWORD *)(v10 + 24) + 24 * *v8;
        result = GenericAssignSort(a4 + *(unsigned int *)(v11 + 8), *(int **)(*(_QWORD *)(v11 + 16) + 8), 10, *(_QWORD *)v11);
      }
      else
      {
        result = CUCFErrorHandler(v7, 15);
      }
    }
    v8 += 4;
    --v5;
  }
  while (v5);
  return result;
}

unsigned __int8 **PERSetBitFieldLength(unsigned __int8 **result)
{
  int v1;
  unsigned __int8 *v2;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unsigned __int8 *v8;
  int v9;

  v1 = *((unsigned __int8 *)result + 8);
  if (v1 == 7)
  {
    v2 = *result + 1;
    LOBYTE(v3) = **result;
    *result = v2;
  }
  else
  {
    v4 = **result << (7 - v1);
    v2 = *result + 1;
    *result = v2;
    v3 = (*v2 >> (v1 + 1)) | v4;
  }
  switch((char)v3)
  {
    case -63:
      v5 = 0x4000;
      goto LABEL_12;
    case -62:
      v5 = 0x8000;
      goto LABEL_12;
    case -61:
      v5 = 49152;
      goto LABEL_12;
    case -60:
      v5 = 0x10000;
LABEL_12:
      result[2] = (unsigned __int8 *)v5;
      break;
    default:
      if ((v3 & 0xC0) == 0x80)
      {
        v6 = (v3 & 0x7F) << 8;
        result[2] = (unsigned __int8 *)v6;
        if (v1 == 7)
        {
          LOBYTE(v7) = *v2;
          *result = v2 + 1;
        }
        else
        {
          v9 = *v2 << (7 - v1);
          *result = v2 + 1;
          v7 = (v2[1] >> (v1 + 1)) | v9;
        }
        v8 = (unsigned __int8 *)(v7 | v6);
      }
      else
      {
        v8 = (unsigned __int8 *)(v3 & 0x7F);
      }
      result[2] = v8;
      *((_BYTE *)result + 9) = 0;
      break;
  }
  return result;
}

void PERDecodeOPENTypeField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;

  if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
  {
    v8 = *(unsigned __int8 *)(a1 + 1105);
    if (v8 != 7)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v8;
      *(_BYTE *)(a1 + 1105) = 7;
    }
  }
  v9 = PERGetByte(a1);
  if (v9 < 0xC1)
  {
    if ((v9 & 0xC0) == 0x80)
    {
      v12 = *(_QWORD *)(a1 + 1096) + (PERGetByte(a1) & 0xFFFF80FF | ((v9 & 0x7F) << 8));
    }
    else
    {
      if ((v9 & 0x80) != 0)
      {
        EPErrorHandler(a1, 26);
        return;
      }
      v12 = *(_QWORD *)(a1 + 1096) + (v9 & 0x7F);
    }
    v14 = *(_BYTE *)(a1 + 1105);
    PERDecVal(a1, a2, a3, a4);
    *(_QWORD *)(a1 + 1096) = v12;
    *(_BYTE *)(a1 + 1105) = v14;
    return;
  }
  --*(_QWORD *)(a1 + 1096);
  v10 = *(unsigned __int8 *)(a1 + 1105);
  if (v10 == 7)
  {
    v11 = PEROctetsDefragmentation(a1);
    PERDecVal(a1, a2, a3, a4);
    if (*(unsigned __int8 *)(a1 + 1105) <= 6u)
    {
      ++*(_QWORD *)(a1 + 1096);
      *(_BYTE *)(a1 + 1105) = 7;
    }
    PEROctetsFragmentation(a1, v11);
  }
  else
  {
    v13 = PEROctetsDefragmentationWithOffset(a1);
    PERDecVal(a1, a2, a3, a4);
    if (*(unsigned __int8 *)(a1 + 1105) < v10)
      ++*(_QWORD *)(a1 + 1096);
    *(_BYTE *)(a1 + 1105) = v10;
    PEROctetsFragmentationWithOffset(a1, v13);
  }
}

void PERSkipOPENTypeField(uint64_t a1)
{
  unint64_t v2;
  int v3;
  char v4;

  v2 = 0;
  while (1)
  {
    if ((*(_BYTE *)(a1 + 1056) & 0x40) != 0)
    {
      v3 = *(unsigned __int8 *)(a1 + 1105);
      if (v3 != 7)
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 1096))++ &= 510 << v3;
        *(_BYTE *)(a1 + 1105) = 7;
      }
    }
    v4 = PERGetByte(a1);
    if ((v4 + 63) >= 4u)
      break;
    v2 = ((unint64_t)(v4 + 63) << 14) + 0x4000;
LABEL_11:
    PERGetSkipBytes(a1, v2);
    if (!(v2 >> 14))
      return;
  }
  if ((v4 & 0xC0) == 0x80)
  {
    v2 = PERGetByte(a1) & 0xFFFF80FF | ((v4 & 0x7F) << 8);
    goto LABEL_11;
  }
  if (v4 < 0)
  {
    EPErrorHandler(a1, 26);
    goto LABEL_11;
  }
  PERGetSkipBytes(a1, v4 & 0x7F);
}

uint64_t PEREncodePrimSEQUENCE_OF(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  unint64_t v12;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = v5 + a2;
  if (v5 < v5 + a2)
  {
    v7 = result;
    do
    {
      v8 = *(_QWORD *)(a3 + 32);
      v9 = *(_QWORD *)(v8 + 8);
      if (*(_DWORD *)v9 == 181)
      {
        v11 = **(_QWORD ***)a3;
        if (v11)
        {
          v12 = v5 + 1;
          while (--v12)
          {
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_10;
          }
          v10 = (char *)v11 + *(unsigned int *)(v9 + 36);
        }
        else
        {
LABEL_10:
          v10 = 0;
        }
      }
      else if (*(_DWORD *)v9 == 182)
      {
        v10 = (char *)(*(_QWORD *)a3 + *(unsigned int *)(v9 + 36) + v5 * *(unsigned int *)(*(_QWORD *)(v9 + 24) + 8));
      }
      else
      {
        CUCFErrorHandler(v7, 15);
        v10 = 0;
        v8 = *(_QWORD *)(a3 + 32);
      }
      result = PEREncVal(v7, *(_QWORD *)(v8 + 24), v10);
      v5 = *(_QWORD *)(a3 + 24) + 1;
      *(_QWORD *)(a3 + 24) = v5;
    }
    while (v5 < v6);
  }
  *(_QWORD *)(a3 + 8) -= a2;
  return result;
}

void PERDecodePrimSEQUENCE_OF(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  void **v7;
  uint64_t v8;
  _DWORD *v9;
  char *v10;
  _QWORD *v11;
  rsize_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  char *v22;
  _QWORD *v23;
  rsize_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a3 + 24);
  v6 = v5 + a2;
  v7 = *(void ***)(a3 + 40);
  if (v7)
  {
    v27 = 0;
    v26 = *v7;
    if (v5 < v6)
    {
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 8);
        if (*(_DWORD *)v8 == 181)
        {
          v11 = gnssOsa_Calloc("posp_alloc", 18, 1, *(unsigned int *)(v8 + 32));
          *v11 = 0;
          v12 = *(unsigned int *)(*(_QWORD *)(v8 + 24) + 8);
          memset_s((char *)v11 + *(unsigned int *)(v8 + 36), v12, 0, v12);
          v13 = *(_QWORD **)a3;
          if (**(_QWORD **)a3)
          {
            *(_QWORD *)v13[1] = v11;
            ++*((_DWORD *)v13 + 4);
          }
          else
          {
            *v13 = v11;
            *((_DWORD *)v13 + 4) = 1;
          }
          v13[1] = v11;
          v10 = (char *)v11 + *(unsigned int *)(v8 + 36);
          *((_BYTE *)v13 + 20) = 8;
        }
        else if (*(_DWORD *)v8 == 182)
        {
          v9 = *(_DWORD **)a3;
          *v9 = **(_DWORD **)a3 + 1;
          v10 = (char *)v9 + *(unsigned int *)(v8 + 36) + v5 * *(unsigned int *)(*(_QWORD *)(v8 + 24) + 8);
        }
        else
        {
          CUCFErrorHandler(a1, 15);
          v10 = 0;
        }
        PERDecVal(a1, *(_QWORD *)(*(_QWORD *)(a3 + 32) + 24), v10, &v26);
        while (1)
        {
          v14 = v26;
          v15 = *(_QWORD *)(a3 + 40);
          if (v26 == *(void **)v15)
            break;
          v26 = (void *)*((_QWORD *)v26 + 2);
          MMSFree(a1, v14, (void *)0x18);
        }
        v5 = *(_QWORD *)(a3 + 24) + 1;
        *(_QWORD *)(a3 + 24) = v5;
      }
      while (v5 < v6);
      if (v27)
      {
        v18 = *(_QWORD *)(v15 + 8);
        v16 = (_QWORD *)(v15 + 8);
        v17 = v18;
        if (v18)
        {
          do
          {
            v19 = v17;
            v17 = *(_QWORD *)(v17 + 32);
          }
          while (v17);
          v16 = (_QWORD *)(v19 + 32);
        }
        *v16 = v27;
      }
    }
  }
  else
  {
    for (; v5 < v6; *(_QWORD *)(a3 + 24) = v5)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 8);
      if (*(_DWORD *)v20 == 181)
      {
        v23 = gnssOsa_Calloc("posp_alloc", 18, 1, *(unsigned int *)(v20 + 32));
        *v23 = 0;
        v24 = *(unsigned int *)(*(_QWORD *)(v20 + 24) + 8);
        memset_s((char *)v23 + *(unsigned int *)(v20 + 36), v24, 0, v24);
        v25 = *(_QWORD **)a3;
        if (**(_QWORD **)a3)
        {
          *(_QWORD *)v25[1] = v23;
          ++*((_DWORD *)v25 + 4);
        }
        else
        {
          *v25 = v23;
          *((_DWORD *)v25 + 4) = 1;
        }
        v25[1] = v23;
        v22 = (char *)v23 + *(unsigned int *)(v20 + 36);
        *((_BYTE *)v25 + 20) = 8;
      }
      else if (*(_DWORD *)v20 == 182)
      {
        v21 = *(_DWORD **)a3;
        *v21 = **(_DWORD **)a3 + 1;
        v22 = (char *)v21 + *(unsigned int *)(v20 + 36) + v5 * *(unsigned int *)(*(_QWORD *)(v20 + 24) + 8);
      }
      else
      {
        CUCFErrorHandler(a1, 15);
        v22 = 0;
      }
      PERDecVal(a1, *(_QWORD *)(*(_QWORD *)(a3 + 32) + 24), v22, 0);
      v5 = *(_QWORD *)(a3 + 24) + 1;
    }
  }
}

uint64_t PEREncodePrimSET_OF(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = v5 + a2;
  if (v5 < v5 + a2)
  {
    v7 = result;
    do
    {
      v8 = *(_QWORD *)(a3 + 32);
      v9 = **(_QWORD ***)a3;
      if (v9)
      {
        v10 = 0;
        while (1)
        {
          v11 = v9[1];
          if (v11 >= 1)
            break;
LABEL_10:
          v9 = (_QWORD *)*v9;
          if (!v9)
            goto LABEL_11;
        }
        v12 = v11 + v10;
        v13 = v5 - v10;
        while (v13)
        {
          --v13;
          if (!--v11)
          {
            v10 = v12;
            goto LABEL_10;
          }
        }
        v14 = (char *)v9 + *(unsigned int *)(*(_QWORD *)(v8 + 8) + 36);
      }
      else
      {
LABEL_11:
        v14 = 0;
      }
      result = PEREncVal(v7, *(_QWORD *)(v8 + 24), v14);
      v5 = *(_QWORD *)(a3 + 24) + 1;
      *(_QWORD *)(a3 + 24) = v5;
    }
    while (v5 < v6);
  }
  *(_QWORD *)(a3 + 8) -= a2;
  return result;
}

void PERDecodePrimSET_OF(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  rsize_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  rsize_t v21;
  _QWORD *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a3 + 24);
  v6 = v5 + a2;
  v7 = *(void ***)(a3 + 40);
  if (v7)
  {
    v25 = 0;
    v24 = *v7;
    if (v5 < v6)
    {
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 8);
        v9 = gnssOsa_Calloc("posp_alloc", 18, 1, *(unsigned int *)(*(_QWORD *)(v8 + 24) + 8) + 20);
        *v9 = 0;
        v9[1] = 1;
        v10 = *(unsigned int *)(*(_QWORD *)(v8 + 24) + 8);
        memset_s((char *)v9 + *(unsigned int *)(v8 + 36), v10, 0, v10);
        v11 = *(_QWORD **)a3;
        if (**(_QWORD **)a3)
        {
          *(_QWORD *)v11[1] = v9;
          ++*((_DWORD *)v11 + 4);
        }
        else
        {
          *v11 = v9;
          *((_DWORD *)v11 + 4) = 1;
        }
        v11[1] = v9;
        PERDecVal(a1, *(_QWORD *)(*(_QWORD *)(a3 + 32) + 24), (char *)v9 + *(unsigned int *)(v8 + 36), &v24);
        while (1)
        {
          v12 = v24;
          v13 = *(_QWORD *)(a3 + 40);
          if (v24 == *(void **)v13)
            break;
          v24 = (void *)*((_QWORD *)v24 + 2);
          MMSFree(a1, v12, (void *)0x18);
        }
        v14 = *(_QWORD *)(a3 + 24) + 1;
        *(_QWORD *)(a3 + 24) = v14;
      }
      while (v14 < v6);
      if (v25)
      {
        v17 = *(_QWORD *)(v13 + 8);
        v15 = (_QWORD *)(v13 + 8);
        v16 = v17;
        if (v17)
        {
          do
          {
            v18 = v16;
            v16 = *(_QWORD *)(v16 + 32);
          }
          while (v16);
          v15 = (_QWORD *)(v18 + 32);
        }
        *v15 = v25;
      }
    }
  }
  else if (v5 < v6)
  {
    do
    {
      v19 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 8);
      v20 = gnssOsa_Calloc("posp_alloc", 18, 1, *(unsigned int *)(*(_QWORD *)(v19 + 24) + 8) + 20);
      *v20 = 0;
      v20[1] = 1;
      v21 = *(unsigned int *)(*(_QWORD *)(v19 + 24) + 8);
      memset_s((char *)v20 + *(unsigned int *)(v19 + 36), v21, 0, v21);
      v22 = *(_QWORD **)a3;
      if (**(_QWORD **)a3)
      {
        *(_QWORD *)v22[1] = v20;
        ++*((_DWORD *)v22 + 4);
      }
      else
      {
        *v22 = v20;
        *((_DWORD *)v22 + 4) = 1;
      }
      v22[1] = v20;
      PERDecVal(a1, *(_QWORD *)(*(_QWORD *)(a3 + 32) + 24), (char *)v20 + *(unsigned int *)(v19 + 36), 0);
      v23 = *(_QWORD *)(a3 + 24) + 1;
      *(_QWORD *)(a3 + 24) = v23;
    }
    while (v23 < v6);
  }
}

void Gnm14_03SendPosEstimateReq(void)
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  unsigned __int16 v3;
  char __str[1040];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v0 = gnssOsa_Calloc("Gnm14_03SendPosEstimateReq", 64, 1, 0xCuLL);
  if (v0)
  {
    v1 = v0;
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v2 = mach_continuous_time();
      v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_NO_COST_POS_REQ =>GNCS\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm14_03SendPosEstimateReq");
      LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
    }
    AgpsSendFsmMsg(128, 130, 8521216, v1);
  }
}

uint64_t Gnm14_11HandleStartPosResp(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int16 v7;
  unsigned __int16 *InstnFromInstnId;
  unsigned __int16 *v9;
  int v10;
  uint64_t v11;
  size_t v12;
  int v13;
  uint64_t v14;
  unsigned __int16 v15;
  unint64_t v17;
  unint64_t v18;
  char __str[1040];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_START_POS_RSP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm14_11HandleStartPosResp");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
      return 0;
    bzero(__str, 0x410uLL);
    v11 = mach_continuous_time();
    v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 69, "Gnm14_11HandleStartPosResp", 517);
    v13 = 0;
LABEL_16:
    LbsOsaTrace_WriteLog(0xBu, __str, v12, v13, 1);
    return 0;
  }
  v4 = *(unsigned __int8 *)(a1 + 14);
  v5 = *(unsigned __int16 *)(a1 + 12);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v6 = mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SessId,%u,RespCode,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm14_11HandleStartPosResp", v5, *(unsigned __int8 *)(a1 + 14));
    LbsOsaTrace_WriteLog(0xBu, __str, v7, 4, 1);
  }
  InstnFromInstnId = Gnm02_31GetInstnFromInstnId(v5);
  if (!InstnFromInstnId)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      return 0;
    bzero(__str, 0x410uLL);
    v14 = mach_continuous_time();
    v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Instn SessId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 87, "Gnm14_11HandleStartPosResp", 2052, v5);
    v13 = 2;
    goto LABEL_16;
  }
  v9 = InstnFromInstnId;
  if (!*((_QWORD *)InstnFromInstnId + 1))
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnInfo SessId,%u\n", v17);
LABEL_23:
      LbsOsaTrace_WriteLog(0xBu, __str, v15, 2, 1);
    }
LABEL_24:
    Gnm02_21DeleteInstn(v9);
    return 0;
  }
  v10 = *((unsigned __int8 *)InstnFromInstnId + 2);
  if (v10 == 1)
  {
    Gnm11_07StartPosResp((uint64_t)InstnFromInstnId, v4 == 255);
    return 0;
  }
  if (v10 == 3)
  {
    Gnm51_05StartPosResp(InstnFromInstnId, v4 == 255);
    return 0;
  }
  if (v10 != 2)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v18 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnType,%hhu\n", v18);
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  Gnm13_15StartPosResp(InstnFromInstnId, v4 == 255);
  return 0;
}

uint64_t Gnm14_12HandleStopPosResp(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int16 v7;
  unsigned __int16 *InstnFromInstnId;
  unsigned __int16 *v9;
  int v10;
  uint64_t v11;
  size_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  unsigned __int16 v18;
  char __str[1040];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_STOP_POS_RSP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm14_12HandleStopPosResp");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (!a1)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
      return 0;
    bzero(__str, 0x410uLL);
    v11 = mach_continuous_time();
    v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNM", 69, "Gnm14_12HandleStopPosResp", 517);
    v13 = 0;
LABEL_16:
    LbsOsaTrace_WriteLog(0xBu, __str, v12, v13, 1);
    return 0;
  }
  v4 = *(unsigned __int8 *)(a1 + 14);
  v5 = *(unsigned __int16 *)(a1 + 12);
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v6 = mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SessId,%u,RespCode,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNM", 73, "Gnm14_12HandleStopPosResp", v5, *(unsigned __int8 *)(a1 + 14));
    LbsOsaTrace_WriteLog(0xBu, __str, v7, 4, 1);
  }
  InstnFromInstnId = Gnm02_31GetInstnFromInstnId(v5);
  if (!InstnFromInstnId)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
      return 0;
    bzero(__str, 0x410uLL);
    v14 = mach_continuous_time();
    v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Instn SessId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNM", 87, "Gnm14_12HandleStopPosResp", 2052, v5);
    v13 = 2;
    goto LABEL_16;
  }
  v9 = InstnFromInstnId;
  if (*((_QWORD *)InstnFromInstnId + 1))
  {
    v10 = *((unsigned __int8 *)InstnFromInstnId + 2);
    switch(v10)
    {
      case 1:
        Gnm11_08StopPosResp((uint64_t)InstnFromInstnId, v4 == 255);
        break;
      case 3:
        Gnm51_06StopPosResp((uint64_t)InstnFromInstnId, v4 == 255);
        break;
      case 2:
        Gnm13_16StopPosResp((uint64_t)InstnFromInstnId, v4 == 255);
        break;
      default:
        if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v17 = mach_continuous_time();
          v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnType,%hhu\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNM", 87, "Gnm14_12HandleStopPosResp", 770, *((unsigned __int8 *)v9 + 2));
          LbsOsaTrace_WriteLog(0xBu, __str, v18, 2, 1);
        }
        Gnm02_21DeleteInstn(v9);
        break;
    }
    gnssOsa_flushNv();
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v15 = mach_continuous_time();
      v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx InstnInfo SessId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNM", 87, "Gnm14_12HandleStopPosResp", 2052, v5);
      LbsOsaTrace_WriteLog(0xBu, __str, v16, 2, 1);
    }
    Gnm02_21DeleteInstn(v9);
  }
  return 0;
}

uint64_t Gnm14_13HandleClearGNSSRsp(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  int v4;
  double v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  char __str[1040];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_CLEAR_GNSS_RSP\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNM", 73, "Gnm14_13HandleClearGNSSRsp");
    LbsOsaTrace_WriteLog(0xBu, __str, v3, 4, 1);
  }
  if (a1)
  {
    v4 = *(unsigned __int8 *)(a1 + 12);
    if (LbsOsaTrace_IsLoggingAllowed(0xBu, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v5 = *(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time();
      v6 = 89;
      if (!v4)
        v6 = 78;
      v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Status,%c,Mask0x%X\n", (unint64_t)v5, "GNM", 73, "Gnm14_13HandleClearGNSSRsp", v6, *(_DWORD *)(a1 + 16));
      LbsOsaTrace_WriteLog(0xBu, __str, v7, 4, 1);
    }
    if (v4
      && ((Gnm13_17SendClearCacheInd(*(_DWORD *)(a1 + 16)), (*(_DWORD *)(a1 + 16) & 0x40100) == 0)
       || (Gnm53_26ClearVarMENv() & 1) != 0))
    {
      if (byte_2554408EB)
      {
        byte_2554408EB = 0;
        v8 = 0;
LABEL_17:
        Gnm11_00ApiStatusCB(v8, 0, 0, 16);
      }
    }
    else if (byte_2554408EB)
    {
      byte_2554408EB = 0;
      v8 = 11;
      goto LABEL_17;
    }
  }
  else if (LbsOsaTrace_IsLoggingAllowed(0xBu, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v9 = mach_continuous_time();
    v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNM", 69, "Gnm14_13HandleClearGNSSRsp", 517);
    LbsOsaTrace_WriteLog(0xBu, __str, v10, 0, 1);
  }
  return 0;
}

uint64_t gnssdbg_GetLogSeverityCP(int a1, int a2)
{
  uint64_t result;
  char v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;

  if (a2 != 1)
    return 2;
  result = 0;
  if (a1 > 1791)
  {
    switch(a1)
    {
      case 1792:
      case 1793:
      case 1794:
      case 1795:
      case 1796:
      case 1797:
      case 1798:
      case 1799:
      case 1800:
      case 1801:
      case 1802:
      case 1803:
      case 1804:
      case 1805:
      case 1806:
      case 1807:
      case 1808:
      case 1809:
      case 1810:
      case 1811:
      case 1812:
      case 1813:
      case 1814:
      case 1815:
      case 1816:
      case 1817:
      case 1818:
      case 1819:
      case 1820:
      case 1821:
      case 1822:
      case 1823:
      case 1824:
      case 1825:
      case 1826:
      case 1827:
      case 1828:
      case 1829:
      case 1830:
      case 1831:
      case 1832:
      case 1833:
      case 1834:
      case 1835:
      case 1836:
      case 1837:
      case 1838:
      case 1839:
      case 1840:
      case 1841:
      case 1842:
      case 1843:
      case 1844:
      case 1845:
      case 1846:
      case 1847:
      case 1848:
      case 1849:
      case 1850:
      case 1851:
      case 1852:
      case 1853:
      case 1854:
      case 1855:
      case 1856:
      case 1857:
      case 1858:
      case 1859:
      case 1860:
      case 1861:
      case 1862:
      case 1863:
      case 1864:
      case 1865:
      case 1866:
      case 1867:
      case 1868:
      case 1869:
      case 1870:
      case 1871:
      case 1872:
      case 1873:
      case 1874:
      case 1875:
      case 1901:
      case 1918:
      case 1922:
      case 1923:
        return result;
      case 1876:
      case 1877:
      case 1878:
      case 1879:
      case 1880:
      case 1881:
      case 1882:
      case 1883:
      case 1884:
      case 1885:
      case 1886:
      case 1887:
      case 1888:
      case 1889:
      case 1890:
      case 1891:
      case 1892:
      case 1893:
      case 1894:
      case 1895:
      case 1896:
      case 1897:
      case 1898:
      case 1899:
      case 1900:
      case 1902:
      case 1903:
      case 1904:
      case 1905:
      case 1906:
      case 1907:
      case 1908:
      case 1909:
      case 1910:
      case 1911:
      case 1912:
      case 1913:
      case 1914:
      case 1915:
      case 1916:
      case 1917:
      case 1919:
      case 1920:
      case 1921:
        return 2;
      default:
        if (a1 != 2048 && a1 != 2057)
          return 2;
        break;
    }
    return result;
  }
  if (a1 <= 1051)
  {
    if ((a1 - 768) <= 0x31)
    {
      if (((1 << a1) & 0x287A00404FFFFLL) != 0)
        return result;
      if (((1 << a1) & 0x404188000000) != 0)
        return 1;
    }
    v5 = (a1 - 258);
    if (v5 <= 0x27)
    {
      if (((1 << (a1 - 2)) & 0x363FA6A8F7) != 0)
        return result;
      if (v5 == 39)
        return 1;
    }
    v6 = a1 - 512;
    if (v6 <= 0xA)
    {
      v7 = 1 << v6;
      if ((v7 & 0x7C6) != 0)
        return result;
      if ((v7 & 0x11) != 0)
        return 1;
    }
    return 2;
  }
  if ((a1 - 1280) <= 0x19)
  {
    if (((1 << a1) & 0x22C01F7) != 0)
      return result;
    if (a1 == 1283)
      return 1;
  }
  v4 = a1 - 7;
  if ((a1 - 1543) > 0x34)
    goto LABEL_24;
  if (((1 << v4) & 0xCC0400000101) != 0)
    return 1;
  if (((1 << v4) & 0x18204000C00000) == 0)
  {
LABEL_24:
    v8 = a1 - 1052;
    if (v8 <= 0x1E)
    {
      if (((1 << v8) & 0x70020081) != 0)
        return result;
      if (v8 == 19)
        return 1;
    }
    return 2;
  }
  return result;
}

double Comp_AzEl(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, _WORD *a5, _QWORD *a6, _QWORD *a7)
{
  double result;
  uint64_t i;
  double v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  double *v21;
  double v22;
  double v23;
  double v24;
  __int16 v25;
  int v26;
  unsigned int v27;
  int v28;
  __int128 v29;
  __int128 v30;
  int v31;
  __int128 v32;
  __int128 v33;
  double v34[3];
  _QWORD v35[4];

  v35[3] = *MEMORY[0x24BDAC8D0];
  v31 = 0;
  result = 0.0;
  v32 = 0u;
  v33 = 0u;
  v28 = 0;
  v29 = 0u;
  v30 = 0u;
  if (*(_DWORD *)(a3 + 120))
  {
    for (i = 0; i != 3; ++i)
      *(double *)&v35[i] = *(double *)(a3 + 8 + i * 8) - *(double *)(a1 + i * 8);
    v13 = 0.0;
    v14 = 2;
    do
    {
      v13 = v13 + *(double *)&v35[v14] * *(double *)&v35[v14];
      v15 = v14-- + 1;
    }
    while (v15 > 1);
    v16 = 0;
    v17 = sqrt(v13);
    do
    {
      *(double *)&v35[v16] = *(double *)&v35[v16] / v17;
      ++v16;
    }
    while (v16 != 3);
    v18 = 0;
    v19 = *(double *)v35;
    v20 = *(double *)&v35[1];
    v21 = (double *)(a2 + 16);
    v22 = *(double *)&v35[2];
    do
    {
      v23 = *(v21 - 1) * v20 + *(v21 - 2) * v19;
      v24 = *v21;
      v21 += 3;
      v34[v18++] = v23 + v24 * v22;
    }
    while (v18 != 3);
    AzEl_SinCos(v34, (uint64_t)&v28, (uint64_t)&v31);
    AzEl_RadDeg((uint64_t)&v28, (uint64_t)&v31);
    v25 = v28;
    if (v28 < 0)
    {
      if (v28 <= -360)
        v26 = -360;
      else
        v26 = v28;
      v27 = (v26 - v28 - (v28 < 0xFFFFFE98)) / 0x168;
      if (v28 < 0xFFFFFE98)
        LOWORD(v27) = v27 + 1;
      v25 = v28 + 360 * v27 + 360;
    }
    *a4 = v31;
    *a5 = v25;
    *a6 = v33;
    result = *(double *)&v30;
    *a7 = v30;
  }
  return result;
}

int8x8_t Decode_GPS_Health_From_AS_Subfr(const unsigned int *a1, int8x8_t *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint8x8_t v4;
  uint16x8_t v5;
  uint32x4_t v6;
  int64x2_t v7;
  int64x2_t v8;
  uint32x4_t v9;
  uint64x2_t v10;
  int8x8_t result;

  v2 = a1[8];
  v3 = a1[9];
  v4.i8[0] = a1[7] & 0x1F;
  v4.i8[1] = (v2 >> 18) & 0x1F;
  v4.i8[2] = (v2 >> 12) & 0x1F;
  v4.i8[3] = (v2 >> 6) & 0x1F;
  v4.i8[4] = v2 & 0x1F;
  v4.i8[5] = (v3 >> 18) & 0x1F;
  v4.i8[6] = (v3 >> 12) & 0x1F;
  v4.i8[7] = (v3 >> 6) & 0x1F;
  v5 = vmovl_u8(v4);
  v6 = vmovl_high_u16(v5);
  v7.i64[0] = v6.u32[0];
  v7.i64[1] = v6.u32[1];
  v8 = v7;
  v9 = vmovl_u16(*(uint16x4_t *)v5.i8);
  v7.i64[0] = v9.u32[0];
  v7.i64[1] = v9.u32[1];
  v10 = (uint64x2_t)vdupq_n_s64(0xE4FE7F3uLL);
  result = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v10, (uint64x2_t)vnegq_s64(v7)), (int32x4_t)vshlq_u64(v10, vsubw_high_u32((uint64x2_t)0, v9))), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v10, (uint64x2_t)vnegq_s64(v8)), (int32x4_t)vshlq_u64(v10, vsubw_high_u32((uint64x2_t)0, v6))))), (int8x8_t)0x101010101010101);
  *a2 = result;
  return result;
}

uint64_t Comp_AGNSS_PR_Sigma(unsigned int a1)
{
  int v1;
  unsigned int v2;
  int v3;

  if (a1 <= 0x1116FF)
  {
    if (a1 >> 3 < 0x271)
    {
      LOBYTE(v1) = 0;
    }
    else
    {
      v2 = 9375;
      if (a1 >= 0x249F)
      {
        v3 = 0;
        do
        {
          v2 *= 2;
          ++v3;
        }
        while (v2 <= a1);
      }
      else
      {
        v3 = 0;
      }
      return (8 * v3 - (v2 - a1) / (625 << v3) + 7);
    }
  }
  else
  {
    LOBYTE(v1) = 63;
  }
  return v1;
}

double *Comp_Track_velLOS(double a1, double a2, double *result, double *a4)
{
  double v9;
  double v10;

  if (fabs(a1) > 0.0001 || fabs(a2) > 0.0001)
  {
    v10 = 57.2957795 / (a1 * a1 + a2 * a2);
    *a4 = v10 * (result[3] * a1 - *result * a2);
    a4[1] = v10 * (result[4] * a1 - result[1] * a2);
    v9 = v10 * -(result[2] * a2);
  }
  else
  {
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)a4 = _Q0;
    v9 = 1.0;
  }
  a4[2] = v9;
  return result;
}

uint64_t GN_ABDS_Set_Eph_El(unsigned __int16 *a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned __int16 v8;
  int v9;
  int v10;
  int v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;

  if (!Is_GN_API_Set_Allowed("GN_ABDS_Set_Eph_El"))
    return 0;
  if ((unsigned __int16)g_Enable_Event_Log >= 5u)
    EvLog_ABDS_Eph_El(a1);
  v2 = *a1;
  if (v2 >= 0x2000)
  {
    EvCrt_v("GN_ABDS_Set_Eph: FAILED: Week = %d >=8191, Out of range!");
    return 0;
  }
  v3 = *((_DWORD *)a1 + 1);
  if (v3 > 0x1274F)
  {
    EvCrt_v("GN_ABDS_Set_Eph: FAILED: toc = %d > 75599, Out of range!");
    return 0;
  }
  v4 = *((_DWORD *)a1 + 2);
  if (v4 > 0x1274F)
  {
    EvCrt_v("GN_ABDS_Set_Eph: FAILED: toe = %d > 75599, Out of range!");
    return 0;
  }
  v5 = *((unsigned __int8 *)a1 + 12);
  if (v5 >= 0x20)
  {
    EvCrt_v("GN_ABDS_Set_Eph: FAILED: AODE = %d >31, Out of range!");
    return 0;
  }
  v6 = *((unsigned __int8 *)a1 + 13);
  if (v6 >= 0x20)
  {
    EvCrt_v("GN_ABDS_Set_Eph: FAILED: AODC = %d >31, Out of range!");
    return 0;
  }
  if (*((unsigned __int8 *)a1 + 14) - 38 <= 0xFFFFFFDA)
  {
    EvCrt_v("GN_ABDS_Set_Eph: FAILED: SVid = %d < 1 or >37, Out of range!");
    return 0;
  }
  v7 = *((unsigned __int8 *)a1 + 15);
  if (v7 >= 0x10)
  {
    EvCrt_v("GN_ABDS_Set_Eph: FAILED: URA = %d >15, Out of range!");
    return 0;
  }
  v8 = a1[22];
  if ((unsigned __int16)((unsigned __int16)(v8 - 0x2000) >> 14) <= 2u)
  {
    EvCrt_v("GN_ABDS_Set_Eph: FAILED: IDot = %d < -2^13 or >= 2^13, Out of range!");
    return 0;
  }
  v9 = *((_DWORD *)a1 + 12);
  if ((v9 - 0x800000) >> 24 != 255)
  {
    EvCrt_v("GN_ABDS_Set_Eph: FAILED: OmegaDot = %d <-2^23 or >=2^23, Out of range!");
    return 0;
  }
  v10 = *((_DWORD *)a1 + 19);
  if ((v10 - 0x800000) >> 24 != 255)
  {
    EvCrt_v("GN_ABDS_Set_Eph: FAILED: af0 = %d <-2^23 or >=2^23, Out of range!");
    return 0;
  }
  v11 = *((_DWORD *)a1 + 20);
  if ((v11 - 0x200000) >> 22 != 1023)
  {
    EvCrt_v("GN_ABDS_Set_Eph: FAILED: af1 = %d <-2^21 or >=2^21, Out of range!");
    return 0;
  }
  v12 = a1[42];
  if ((unsigned __int16)((unsigned __int16)(v12 - 1024) >> 11) <= 0x1Eu)
  {
    EvCrt_v("GN_ABDS_Set_Eph: FAILED: af2 = %d <-2^10 or >=2^10, Out of range!");
    return 0;
  }
  v13 = a1[43];
  if ((unsigned __int16)((unsigned __int16)(v13 - 512) >> 10) <= 0x3Eu)
  {
    EvCrt_v("GN_ABDS_Set_Eph: FAILED: TGD1 = %d <-2^9 or >=2^9, Out of range!");
    return 0;
  }
  v26 = *((unsigned __int8 *)a1 + 14);
  v14 = a1[44];
  if ((unsigned __int16)((unsigned __int16)(v14 - 512) >> 10) <= 0x3Eu)
  {
    EvCrt_v("GN_ABDS_Set_Eph: FAILED: TGD2 = %d <-2^9 or >=2^9, Out of range!");
    return 0;
  }
  v17 = (v26 - 1);
  v18 = p_NA;
  v19 = p_NA + 100 * v17;
  *(_DWORD *)(v19 + 9892) = v3;
  *(_DWORD *)(v19 + 9896) = v4;
  *(_WORD *)(v19 + 9900) = v2;
  *(_BYTE *)(v19 + 9902) = v5;
  *(_BYTE *)(v19 + 9903) = v6;
  *(_BYTE *)(v19 + 9904) = v26;
  *(_BYTE *)(v19 + 9905) = v7;
  *(_BYTE *)(v19 + 9906) = *((_BYTE *)a1 + 16);
  *(_OWORD *)(v19 + 9908) = *(_OWORD *)(a1 + 10);
  *(_QWORD *)(v19 + 9924) = *(_QWORD *)(a1 + 18);
  *(_WORD *)(v19 + 9932) = v8;
  *(_WORD *)(v19 + 9934) = a1[23];
  *(_DWORD *)(v19 + 9936) = v9;
  *(_OWORD *)(v19 + 9940) = *(_OWORD *)(a1 + 26);
  *(_QWORD *)(v19 + 9956) = *(_QWORD *)(a1 + 34);
  *(_DWORD *)(v19 + 9964) = v10;
  *(_DWORD *)(v19 + 9968) = v11;
  *(_WORD *)(v19 + 9972) = v12;
  *(_WORD *)(v19 + 9974) = v13;
  *(_WORD *)(v19 + 9976) = v14;
  if (*((_BYTE *)a1 + 90))
    v20 = 5;
  else
    v20 = 3;
  *(_DWORD *)(v19 + 9888) = v20;
  if (v26 <= 5)
    v21 = -1;
  else
    v21 = 0x7FFFFFF;
  *(_DWORD *)(v19 + 9980) = v21;
  *(_BYTE *)(v18 + v17 + 223) = 1;
  v22 = *(_QWORD *)(p_api + 48);
  if (*(_BYTE *)(v22 + 5) && *(int *)v22 >= 3)
    v23 = (int)*(double *)(v22 + 24) + 604800 * *(__int16 *)(v22 + 16);
  else
    v23 = 0;
  v24 = (int *)(p_NA + 100 * v17 + 9884);
  *v24 = v23;
  v15 = 1;
  Debug_Log_BDS_Eph(1, (uint64_t)v24);
  if ((unsigned __int16)g_Enable_Event_Log >= 3u)
    EvLog_nd("GN_ABDS_Set_Eph: ", 2, v25, v26, *(unsigned int *)(p_NA + 100 * v17 + 9884));
  return v15;
}

uint64_t GN_ABDS_Set_BGTO(__int16 *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  int v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _WORD *v13;
  int v14;
  int v15;
  int v16;
  int v17;

  if (!Is_GN_API_Set_Allowed("GN_ABDS_Set_BGTO"))
    return 0;
  v3 = *a1;
  if ((_DWORD)v3 != 0x7FFF && (unsigned __int16)((unsigned __int16)(*a1 - 0x2000) >> 14) <= 2u)
  {
    EvCrt_v("GN_ABDS_Set_BGTO: FAILED: A0G = %d < -2^13 or >= 2^13, Out of range!");
    return 0;
  }
  v5 = a1[4];
  if (v5 != 0x7FFF && (unsigned __int16)((unsigned __int16)(v5 - 0x2000) >> 14) <= 2u)
  {
    EvCrt_v("GN_ABDS_Set_BGTO: FAILED: A0R = %d < -2^13 or >= 2^13, Out of range!");
    return 0;
  }
  v6 = a1[2];
  if (v6 != 0x7FFF && (unsigned __int16)((unsigned __int16)(v6 - 0x2000) >> 14) <= 2u)
  {
    EvCrt_v("GN_ABDS_Set_BGTO: FAILED: A0E = %d < -2^13 or >= 2^13, Out of range!");
    return 0;
  }
  v9 = (unsigned __int16)*a1;
  v10 = *(_QWORD *)(p_api + 48);
  if (*(_BYTE *)(v10 + 5) && *(int *)v10 >= 3)
    v11 = (int)*(double *)(v10 + 24) + 604800 * *(__int16 *)(v10 + 16);
  else
    v11 = 0;
  v12 = p_NA;
  v13 = (_WORD *)(p_NA + 9872);
  *(_DWORD *)(p_NA + 9864) = v11;
  if (v9 == 0x7FFF || (v14 = (unsigned __int16)a1[1], v14 == 0x7FFF))
  {
    if ((unsigned __int16)v6 == 0x7FFF || (v15 = (unsigned __int16)a1[3], v15 == 0x7FFF))
    {
      if ((unsigned __int16)v5 != 0x7FFF)
      {
        v16 = (unsigned __int16)a1[5];
        if (v16 != 0x7FFF)
        {
          v13[4] = v5;
          v13[5] = v16;
        }
      }
    }
    else
    {
      v13[2] = v6;
      v13[3] = v15;
    }
  }
  else
  {
    *v13 = v3;
    v13[1] = v14;
  }
  if (*((_BYTE *)a1 + 12))
    v17 = 5;
  else
    v17 = 3;
  *(_DWORD *)(v12 + 9868) = v17;
  v7 = 1;
  *(_BYTE *)(v12 + 222) = 1;
  EvLog_nd("GN_ABDS_Set_BGTO: ", 6, v2, v3, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return v7;
}

uint64_t stphiu(uint64_t result, unsigned int a2, const double *a3, const unsigned __int8 *a4, int a5, const unsigned __int8 *a6, const unsigned __int8 *a7)
{
  int v7;
  uint64_t v8;
  const double *v9;
  const unsigned __int8 *v10;
  const unsigned __int8 *v11;
  const unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  double v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;

  if (a2 >= 2 && a5)
  {
    v7 = 0;
    v8 = result - 8;
    v9 = a3 - 1;
    v10 = a4 - 1;
    v11 = a6 - 1;
    v12 = a7 - 1;
    if ((a5 + 1) > 2)
      v13 = (a5 + 1);
    else
      v13 = 2;
    v14 = 1;
    do
    {
      v15 = v12[v14];
      if (v12[v14])
      {
        result = v11[v14];
        v16 = 1;
        v17 = v7;
        do
        {
          v18 = v9[++v17];
          v19 = v10[v17];
          v20 = (v19 - 1) * v19;
          v21 = result + (v20 >> 1);
          *(double *)(v8 + 8 * v21) = v18 + *(double *)(v8 + 8 * v21);
          if (v19 < a2)
          {
            v22 = (v20 >> 1) + v19;
            do
            {
              v21 += v19;
              v22 += v19;
              *(double *)(v8 + 8 * v21) = *(double *)(v8 + 8 * v21) + v18 * *(double *)(v8 + 8 * v22);
              ++v19;
            }
            while (a2 != v19);
          }
        }
        while (v16++ != v15);
      }
      v7 += v15;
      ++v14;
    }
    while (v14 != v13);
  }
  return result;
}

uint64_t SuplProvider::GetInstance(SuplProvider *this)
{
  uint64_t result;
  uint64_t v2;
  unsigned __int16 v3;
  char __str[1040];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (SuplProvider::GetInstance(void)::pred_suplProvider != -1)
    dispatch_once(&SuplProvider::GetInstance(void)::pred_suplProvider, &__block_literal_global_0);
  result = SuplProvider::m_supl_provider;
  if (!SuplProvider::m_supl_provider)
  {
    if (LbsOsaTrace_IsLoggingAllowed(0xEu, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v2 = mach_continuous_time();
      v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: %s\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "OSA", 69, "GetInstance", "GetInstance");
      LbsOsaTrace_WriteLog(0xEu, __str, v3, 0, 1);
    }
    gnssOsa_FlushLog();
    __assert_rtn("GetInstance", "SuplProvider.cpp", 60, "false && \"Memory allocation failure\"");
  }
  return result;
}

uint64_t SuplProvider::AbortLocationReq(SuplUtils *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t Instance;
  SuplPosPayloadHandler *v7;
  LcsSuplGlueLayer *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 v15;
  char __str[1040];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 4);
  if (v5)
  {
    while (*(_DWORD *)v5 != *(_DWORD *)(a3 + 4))
    {
      v5 = *(_QWORD *)(v5 + 8);
      if (!v5)
        goto LABEL_4;
    }
    SuplSession::ProcessAbortRequest((SuplSession *)(v5 - 8), a4);
  }
  else
  {
LABEL_4:
    Instance = SuplUtils::GetInstance(a1);
    v7 = (SuplPosPayloadHandler *)SuplUtils::DeleteSuplInitRecd(Instance, *(_DWORD *)(a3 + 4));
    v8 = (LcsSuplGlueLayer *)SuplPosPayloadHandler::GetInstance(v7);
    v9 = *(unsigned int *)(a3 + 4);
    v10 = LcsSuplGlueLayer::GetInstance(v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 8))(v10, v9, 3, 0);
    v11 = SuplPosPayloadHandler::ResetLppParams((uint64_t *)v8);
    v12 = LcsSuplGlueLayer::GetInstance((LcsSuplGlueLayer *)v11);
    if (v12)
      v13 = v12 + 8;
    else
      v13 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 8))(v13, *(unsigned int *)(a3 + 4));
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v14 = mach_continuous_time();
      v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "SPL", 69, "AbortLocationReq", 513);
      LbsOsaTrace_WriteLog(0x12u, __str, v15, 0, 1);
    }
  }
  return 0;
}

uint64_t SuplProvider::InitSessionNode(uint64_t a1, int a2, int a3, uint64_t *a4, int a5)
{
  SuplSession *v10;
  SuplSession *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  char __str[1040];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v10 = (SuplSession *)operator new(0x218uLL, MEMORY[0x24BEDB6B8]);
  if (v10)
  {
    v11 = v10;
    SuplSession::SuplSession((uint64_t)v10, a2, a3, a4);
    v12 = (_QWORD *)((char *)v11 + 8);
    v13 = *(_QWORD *)(a1 + 32);
    while (v13)
    {
      v14 = v13;
      v13 = *(_QWORD *)(v13 + 8);
      if (!v13)
      {
        *(_QWORD *)(v14 + 8) = v12;
        *((_QWORD *)v11 + 2) = 0;
        if (!a5)
          return 0;
        goto LABEL_11;
      }
    }
    *((_QWORD *)v11 + 2) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    if (!a5)
      return 0;
LABEL_11:
    SuplSession::InitializeResources(v11);
    SuplSession::ProcessSuplRequest(v11);
    return 0;
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v15 = mach_continuous_time();
      v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "SPL", 69, "InitSessionNode", 1537);
      LbsOsaTrace_WriteLog(0x12u, __str, v16, 0, 1);
    }
    return -2;
  }
}

void sub_21E5A7054(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

size_t SuplProvider::DeleteSessionInfo(SuplProvider *this, int a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  size_t result;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  char __str[1040];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = (char *)this + 16;
    v4 = v2;
    while (*(_DWORD *)v4 != a2)
    {
      v4 = *(_QWORD *)(v4 + 8);
      if (!v4)
        goto LABEL_5;
    }
    v8 = v4 - 8;
    while (*(_DWORD *)v2 != a2)
    {
      v2 = *(_QWORD *)(v2 + 8);
      if (!v2)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    LcsLinkedList::Remove((uint64_t)v3, v2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  else
  {
LABEL_5:
    result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v6 = mach_continuous_time();
      v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "SPL", 69, "DeleteSessionInfo", 513);
      return LbsOsaTrace_WriteLog(0x12u, __str, v7, 0, 1);
    }
  }
  return result;
}

uint64_t SuplProvider::ConnectInd(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 v5;
  char __str[1040];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(result + 32);
  if (v3)
  {
    while (*(_DWORD *)v3 != a2)
    {
      v3 = *(_QWORD *)(v3 + 8);
      if (!v3)
        goto LABEL_4;
    }
    if ((_DWORD)a3 == 6 && *(_BYTE *)(v3 + 48))
      *(_DWORD *)(v3 + 520) = 6;
    else
      return SuplSession::ConnectInd((int *)(v3 - 8), a3);
  }
  else
  {
LABEL_4:
    result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v4 = mach_continuous_time();
      v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "SPL", 69, "ConnectInd", 513);
      return LbsOsaTrace_WriteLog(0x12u, __str, v5, 0, 1);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'SuplProvider::ConnectInd(uint64_t a1, int a2, uint64_t a3)
{
  return SuplProvider::ConnectInd(a1 - 8, a2, a3);
}

uint64_t SuplProvider::DisconnectInd(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unsigned __int16 v6;
  char __str[1040];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    while (*(_DWORD *)v3 != a2)
    {
      v3 = *(_QWORD *)(v3 + 8);
      if (!v3)
        goto LABEL_4;
    }
    return SuplSession::DisconnectInd(v3 - 8, a3);
  }
  else
  {
LABEL_4:
    result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v5 = mach_continuous_time();
      v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 69, "DisconnectInd", 513);
      return LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'SuplProvider::DisconnectInd(uint64_t a1, int a2, uint64_t a3)
{
  return SuplProvider::DisconnectInd(a1 - 8, a2, a3);
}

void SuplProvider::ReceiveDataInd(uint64_t a1, int a2, char **a3)
{
  uint64_t v3;
  uint64_t v5;
  unsigned __int16 v6;
  char *v7;
  const void *v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  unsigned __int16 v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  unsigned __int16 v23;
  void *v24;
  void *v25;
  uint64_t v26;
  __int16 v27;
  _QWORD v28[2];
  char v29;
  char __str[8];
  unsigned __int16 v31;
  void *v32;
  void *v33;
  void *__p;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    while (*(_DWORD *)v3 != a2)
    {
      v3 = *(_QWORD *)(v3 + 8);
      if (!v3)
        goto LABEL_4;
    }
    v7 = a3[1];
    if (*a3 == v7)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v15 = mach_continuous_time();
        v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "SPL", 69, "ReceiveDataInd", 514);
        LbsOsaTrace_WriteLog(0x12u, __str, v16, 0, 1);
      }
    }
    else
    {
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(a1 + 40, *(char **)(a1 + 48), *a3, v7, v7 - *a3);
      v8 = *(const void **)(a1 + 40);
      v9 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)(v9 - (_QWORD)v8) >= 2)
      {
        v23 = 0;
        SuplProvider::DecodeMessageLength(v8, v9, &v23);
        v10 = *(const void **)(a1 + 40);
        v11 = *(_QWORD *)(a1 + 48);
        v12 = v11 - (_QWORD)v10;
        if (v11 - (uint64_t)v10 >= (unint64_t)v23)
        {
          if (v12 < 0xBB9)
          {
            v24 = 0;
            v25 = 0;
            v26 = 0;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v24, v10, v11, v12);
            SuplProvider::DecodeMessageLength(v24, (uint64_t)v25, &v27);
            v28[0] = &v24;
            v28[1] = 5;
            v29 = 0;
            ASN1T_SessionID::ASN1T_SessionID((ASN1T_SessionID *)__str);
            v17 = asn1PD_SessionID((uint64_t)v28, (uint64_t)__str);
            v18 = __str[0];
            if (v17)
              v19 = 0;
            else
              v19 = v31;
            if (v52)
            {
              v53 = v52;
              operator delete(v52);
            }
            if (v50)
            {
              v51 = v50;
              operator delete(v50);
            }
            if (v48)
            {
              v49 = v48;
              operator delete(v48);
            }
            if (v46)
            {
              v47 = v46;
              operator delete(v46);
            }
            if (v44)
            {
              v45 = v44;
              operator delete(v44);
            }
            if (v42)
            {
              v43 = v42;
              operator delete(v42);
            }
            if (v40)
            {
              v41 = v40;
              operator delete(v40);
            }
            if (v38)
            {
              v39 = v38;
              operator delete(v38);
            }
            if (v36)
            {
              v37 = v36;
              operator delete(v36);
            }
            if (__p)
            {
              v35 = __p;
              operator delete(__p);
            }
            if (v32)
            {
              v33 = v32;
              operator delete(v32);
            }
            if (v24)
            {
              v25 = v24;
              operator delete(v24);
            }
            if (!v17 && v18)
            {
              v20 = *(_QWORD *)(a1 + 32);
              if (v20)
              {
                while (*(_DWORD *)v20 != v19)
                {
                  v20 = *(_QWORD *)(v20 + 8);
                  if (!v20)
                    goto LABEL_46;
                }
                v3 = v20;
              }
              else
              {
LABEL_46:
                if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
                {
                  bzero(__str, 0x410uLL);
                  v21 = mach_continuous_time();
                  v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "SPL", 69, "ReceiveDataInd", 513);
                  LbsOsaTrace_WriteLog(0x12u, __str, v22, 0, 1);
                }
              }
            }
            SuplSession::ReceiveDataInd(v3 - 8, (_QWORD *)(a1 + 40));
          }
          else if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            v13 = mach_continuous_time();
            v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "SPL", 69, "ReceiveDataInd", 514);
            LbsOsaTrace_WriteLog(0x12u, __str, v14, 0, 1);
          }
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 40);
        }
      }
    }
  }
  else
  {
LABEL_4:
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v5 = mach_continuous_time();
      v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 69, "ReceiveDataInd", 513);
      LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
    }
  }
}

void sub_21E5A793C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  ASN1T_SessionID::~ASN1T_SessionID((ASN1T_SessionID *)&a22);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void SuplProvider::DecodeMessageLength(const void *a1, uint64_t a2, _WORD *a3)
{
  void *__p;
  void *v5;
  uint64_t v6;
  _QWORD v7[2];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v5 = 0;
  v6 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, a1, a2, a2 - (_QWORD)a1);
  v7[0] = &__p;
  v7[1] = 0;
  v8 = 0;
  Asn1Coder::DecodeInteger((uint64_t)v7, 0, 0xFFFFu, a3);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
}

void sub_21E5A7A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'SuplProvider::ReceiveDataInd(uint64_t a1, int a2, char **a3)
{
  SuplProvider::ReceiveDataInd(a1 - 8, a2, a3);
}

void SuplProvider::OnTimerEvent(SuplProvider *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  char __str[4];
  unsigned int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  LcsUtils::GetInstance(this);
  if (a2 > 0xFFFE)
  {
    __str[0] = 0;
    v8 = a2 - 0xFFFF;
    (**(void (***)(SuplProvider *, _QWORD, char *, uint64_t))this)(this, 0, __str, 1);
  }
  else
  {
    v4 = *((_QWORD *)this + 4);
    if (v4)
    {
      while (*(_DWORD *)v4 != a2)
      {
        v4 = *(_QWORD *)(v4 + 8);
        if (!v4)
          goto LABEL_5;
      }
      SuplSession::OnTimerEvent((SuplSession *)(v4 - 8));
    }
    else
    {
LABEL_5:
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v5 = mach_continuous_time();
        v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 69, "OnTimerEvent", 513);
        LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
      }
    }
  }
}

void `non-virtual thunk to'SuplProvider::OnTimerEvent(SuplProvider *this, unsigned int a2)
{
  SuplProvider::OnTimerEvent((SuplProvider *)((char *)this - 8), a2);
}

LcsSuplGlueLayer *SuplProvider::SuplEndIndication(LcsSuplGlueLayer *result, __int16 a2, uint64_t a3)
{
  uint64_t v3;
  LcsSuplGlueLayer *v5;
  uint64_t (***Instance)(_QWORD, __int16 *, _WORD *, uint64_t);
  _WORD v7[11];
  char v8;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  __int16 v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = -1;
  v12 = a2;
  v3 = *((_QWORD *)result + 4);
  if (v3)
  {
    v5 = result;
    while (*(_DWORD *)v3 != (_DWORD)a3)
    {
      v3 = *(_QWORD *)(v3 + 8);
      if (!v3)
        return result;
    }
    *(_DWORD *)v7 = -1;
    memset(&v7[2], 0, 14);
    *(_DWORD *)&v7[9] = -1;
    v8 = 0;
    v10 = 0;
    v11 = 0;
    v9[0] = 0;
    *(_DWORD *)((char *)v9 + 3) = 0;
    Instance = (uint64_t (***)(_QWORD, __int16 *, _WORD *, uint64_t))LcsSuplGlueLayer::GetInstance(result);
    result = (LcsSuplGlueLayer *)(**Instance)(Instance, &v12, v7, a3);
    *((_QWORD *)v5 + 6) = *((_QWORD *)v5 + 5);
  }
  return result;
}

uint64_t SuplProvider::Connect(SuplProvider *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  uint64_t v7;
  uint64_t Instance;
  int SlpFqdn;
  __int16 v10;
  uint64_t v11;
  unsigned __int16 v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int16 v16;
  std::string *v17;
  uint64_t v18;
  uint64_t (***v19)(_QWORD, uint64_t, _BYTE *);
  _BYTE v21[8];
  _BYTE __p[27];
  int v23;
  _BYTE v24[8];
  std::string v25;
  __int16 v26;
  char __str[1040];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    while (*(_DWORD *)v4 != (_DWORD)a2)
    {
      v4 = *(_QWORD *)(v4 + 8);
      if (!v4)
        goto LABEL_4;
    }
    v24[0] = 0;
    memset(&v25, 0, sizeof(v25));
    v26 = 7275;
    Instance = SimUtils::GetInstance(this);
    SlpFqdn = SimUtils::GetSlpFqdn(Instance, (uint64_t)v24, a2, *(_DWORD *)(v4 + 524));
    v10 = SlpFqdn;
    if (SlpFqdn)
    {
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v11 = mach_continuous_time();
        v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "SPL", 69, "Connect", 770);
        LbsOsaTrace_WriteLog(0x12u, __str, v12, 0, 1);
      }
      SuplProvider::SuplEndIndication(this, v10, a2);
      SuplProvider::DeleteSessionInfo(this, a2);
      v7 = 0;
    }
    else
    {
      v21[0] = 0;
      v23 = 0;
      memset(__p, 0, sizeof(__p));
      v13 = (v24[0] - 1);
      if (v13 >= 4)
      {
        if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v15 = mach_continuous_time();
          v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "SPL", 69, "Connect", 515);
          LbsOsaTrace_WriteLog(0x12u, __str, v16, 0, 1);
        }
        LOBYTE(v14) = 0;
      }
      else
      {
        v14 = 0x2030301u >> (8 * v13);
      }
      v21[0] = v14;
      v17 = std::string::operator=((std::string *)__p, &v25);
      *(_WORD *)&__p[24] = v26;
      __p[26] = 0;
      v23 = *(_DWORD *)(v4 + 524);
      v18 = LcsSuplGlueLayer::GetInstance((LcsSuplGlueLayer *)v17);
      if (v18)
        v19 = (uint64_t (***)(_QWORD, uint64_t, _BYTE *))(v18 + 8);
      else
        v19 = 0;
      v7 = (**v19)(v19, a2, v21);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
  }
  else
  {
LABEL_4:
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v5 = mach_continuous_time();
      v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 69, "Connect", 2305);
      LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
    }
    SuplProvider::SuplEndIndication(this, -17, a2);
    SuplProvider::DeleteSessionInfo(this, a2);
    return 0;
  }
  return v7;
}

void sub_21E5A805C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

size_t SuplProvider::Disconnect(SuplProvider *this, uint64_t a2)
{
  uint64_t v2;
  size_t result;
  uint64_t v5;
  unsigned __int16 v6;
  SuplVersionNegotiation::Instance *v7;
  unsigned __int8 *v8;
  uint64_t Instance;
  uint64_t v10;
  char __str[1040];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    while (*(_DWORD *)v2 != (_DWORD)a2)
    {
      v2 = *(_QWORD *)(v2 + 8);
      if (!v2)
        goto LABEL_4;
    }
    v7 = (SuplVersionNegotiation::Instance *)SuplProvider::DeleteSessionInfo(this, *(_DWORD *)(v2 + 368));
    v8 = SuplVersionNegotiation::Instance::Reset(v7);
    Instance = LcsSuplGlueLayer::GetInstance((LcsSuplGlueLayer *)v8);
    if (Instance)
      v10 = Instance + 8;
    else
      v10 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 8))(v10, a2);
  }
  else
  {
LABEL_4:
    result = LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0);
    if ((_DWORD)result)
    {
      bzero(__str, 0x410uLL);
      v5 = mach_continuous_time();
      v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 69, "Disconnect", 513);
      return LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
    }
  }
  return result;
}

uint64_t SuplProvider::SendSuplPdu(LcsSuplGlueLayer *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t Instance;
  uint64_t v10;
  char __str[1040];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)a1 + 4);
  if (v3)
  {
    while (*(_DWORD *)v3 != (_DWORD)a2)
    {
      v3 = *(_QWORD *)(v3 + 8);
      if (!v3)
        goto LABEL_4;
    }
    Instance = LcsSuplGlueLayer::GetInstance(a1);
    if (Instance)
      v10 = Instance + 8;
    else
      v10 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, a2, a3);
  }
  else
  {
LABEL_4:
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v6 = mach_continuous_time();
      v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "SPL", 69, "SendSuplPdu", 513);
      LbsOsaTrace_WriteLog(0x12u, __str, v7, 0, 1);
    }
    return 0;
  }
}

void ASN1T_SessionID::~ASN1T_SessionID(ASN1T_SessionID *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 36);
  if (v2)
  {
    *((_QWORD *)this + 37) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 33);
  if (v3)
  {
    *((_QWORD *)this + 34) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 30);
  if (v4)
  {
    *((_QWORD *)this + 31) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 25);
  if (v5)
  {
    *((_QWORD *)this + 26) = v5;
    operator delete(v5);
  }
  ASN1T_SETId::U::~U((ASN1T_SessionID *)((char *)this + 24));
}

uint64_t SuplProvider::UpdateAidMask(SuplProvider *this, int a2, const SuplAsstDataNeededInfo *a3)
{
  uint64_t v3;
  uint64_t v5;
  unsigned __int16 v6;
  void *v8;
  char __str[8];
  void *v11[2];
  __int128 v12;
  void *__p[126];

  __p[125] = *(void **)MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    while (*(_DWORD *)v3 != a2)
    {
      v3 = *(_QWORD *)(v3 + 8);
      if (!v3)
        goto LABEL_4;
    }
    v12 = 0u;
    memset(__p, 0, 25);
    *(_OWORD *)v11 = 0u;
    if (a3)
    {
      *(_WORD *)__str = *(_WORD *)a3;
      v8 = (void *)*((_QWORD *)a3 + 1);
      v11[0] = v8;
      if (__str != (char *)a3)
      {
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v11[1], *((char **)a3 + 2), *((char **)a3 + 3), *((_QWORD *)a3 + 3) - *((_QWORD *)a3 + 2));
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(__p, *((char **)a3 + 5), *((char **)a3 + 6), *((_QWORD *)a3 + 6) - *((_QWORD *)a3 + 5));
        LODWORD(v8) = v11[0];
      }
      LOBYTE(__p[3]) = *((_BYTE *)a3 + 64);
    }
    else
    {
      LODWORD(v8) = 0;
    }
    *(_WORD *)__str = 1;
    LODWORD(v11[0]) = v8 | 1;
    SuplSession::SetAidMask((SuplSession *)(v3 - 8), (SuplAsstDataNeededInfo *)__str);
    SuplSession::InitializeResources((SuplSession *)(v3 - 8));
    SuplSession::ProcessSuplRequest((SuplSession *)(v3 - 8));
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v11[1])
    {
      *(void **)&v12 = v11[1];
      operator delete(v11[1]);
    }
    return 0;
  }
  else
  {
LABEL_4:
    if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v5 = mach_continuous_time();
      v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "SPL", 69, "UpdateAidMask", 513);
      LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
    }
    return -3;
  }
}

void sub_21E5A85A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  _Unwind_Resume(exception_object);
}

void SuplAsstDataNeededInfo::~SuplAsstDataNeededInfo(SuplAsstDataNeededInfo *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
}

void SuplProvider::ProcessRRLPResponse(SuplPosPayloadHandler *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  int v5;
  unsigned __int16 v6;
  uint64_t Instance;
  char __str[1040];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      return;
    bzero(__str, 0x410uLL);
    v4 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v5 = 515;
    goto LABEL_9;
  }
  v2 = *((_QWORD *)a1 + 4);
  if (!v2)
  {
LABEL_5:
    if (!LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      return;
    bzero(__str, 0x410uLL);
    v4 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v5 = 513;
LABEL_9:
    v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", v4, "SPL", 69, "ProcessRRLPResponse", v5);
    LbsOsaTrace_WriteLog(0x12u, __str, v6, 0, 1);
    return;
  }
  while (*(_DWORD *)v2 != *(_DWORD *)(a2 + 28))
  {
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
      goto LABEL_5;
  }
  *(_BYTE *)(v2 + 400) = *(_BYTE *)(a2 + 32);
  Instance = SuplPosPayloadHandler::GetInstance(a1);
  SuplPosPayloadHandler::ProcessPosResponse(Instance, (char **)a2, *(unsigned __int8 *)(a2 + 24), (SuplSession *)(v2 - 8));
}

LcsSuplGlueLayer *SuplProvider::AbortAllSessionsOnPriority(SuplProvider *this)
{
  uint64_t v1;
  SuplProvider *v2;
  uint64_t v3;
  LcsSuplGlueLayer *Instance;
  _BYTE v6[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    v2 = this;
    do
    {
      v3 = *(_QWORD *)(v1 + 8);
      v6[0] = 0;
      v7 = *(_DWORD *)(v1 + 368);
      this = (SuplProvider *)(**(uint64_t (***)(SuplProvider *, _QWORD, _BYTE *, _QWORD))v2)(v2, 0, v6, 0);
      v1 = v3;
    }
    while (v3);
  }
  Instance = (LcsSuplGlueLayer *)SuplUtils::GetInstance(this);
  return SuplUtils::AbortAllStoredSuplInits(Instance);
}

void ASN1T_SETId::U::~U(ASN1T_SETId::U *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 17) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 12);
  if (v4)
  {
    *((_QWORD *)this + 13) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 9);
  if (v5)
  {
    *((_QWORD *)this + 10) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 6);
  if (v6)
  {
    *((_QWORD *)this + 7) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 3);
  if (v7)
  {
    *((_QWORD *)this + 4) = v7;
    operator delete(v7);
  }
  v8 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v8;
    operator delete(v8);
  }
}

_QWORD *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](v7, v11);
    v9 = (char *)v7[1];
    goto LABEL_17;
  }
  v12 = (_BYTE *)result[1];
  v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    v16 = a3 - __src;
    if (v16)
      result = memmove(v9, __src, v16);
    v15 = &v9[v16];
    goto LABEL_20;
  }
  v14 = &__src[v13];
  if (v12 != v9)
  {
    result = memmove((void *)*result, __src, v13);
    v9 = (char *)v7[1];
  }
  if (a3 != v14)
    result = memmove(v9, v14, a3 - v14);
  v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

char *std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  int64_t v24;
  char v25;
  char *v26;
  char *v27;
  char *v28;
  char v29;
  char *v30;
  char *v31;
  char *v32;
  char v33;
  char *v34;
  char *v35;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v6 = a5;
  v7 = __src;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
      v16 = operator new(v15);
    else
      v16 = 0;
    v26 = &v13[(_QWORD)v16];
    v27 = &v13[(_QWORD)v16 + v6];
    v28 = v26;
    do
    {
      v29 = *v7++;
      *v28++ = v29;
      --v6;
    }
    while (v6);
    v30 = *(char **)a1;
    if (*(char **)a1 == v5)
    {
      v32 = v26;
    }
    else
    {
      v31 = v5;
      v32 = v26;
      do
      {
        v33 = *--v31;
        *--v32 = v33;
      }
      while (v31 != v30);
      v10 = *(char **)(a1 + 8);
    }
    v34 = (char *)v16 + v15;
    if (v10 != v5)
      memmove(v27, v5, v10 - v5);
    v35 = *(char **)a1;
    *(_QWORD *)a1 = v32;
    *(_QWORD *)(a1 + 8) = &v27[v10 - v5];
    *(_QWORD *)(a1 + 16) = v34;
    if (v35)
      operator delete(v35);
    return v26;
  }
  v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v18 = &__src[a5];
    v20 = *(char **)(a1 + 8);
LABEL_17:
    v21 = &v5[v6];
    v22 = &v20[-v6];
    v23 = v20;
    if (&v20[-v6] < v10)
    {
      v24 = &v10[v6] - v20;
      v23 = v20;
      do
      {
        v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(&v5[v6], v5, v20 - v21);
    if (v18 != v7)
      memmove(v5, v7, v18 - v7);
    return v5;
  }
  v18 = &__src[v17];
  v19 = a4 - &__src[v17];
  if (a4 != &__src[v17])
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  v20 = &v10[v19];
  *(_QWORD *)(a1 + 8) = &v10[v19];
  if (v17 >= 1)
    goto LABEL_17;
  return v5;
}

unsigned __int16 *Debug_Log_ApxTime(unsigned __int16 *result)
{
  unsigned __int16 *v1;
  char *v2;
  char v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  _BYTE *v9;
  unsigned int v10;
  _BYTE *v11;
  unsigned int v12;
  _BYTE *v13;
  unsigned int v14;
  _BYTE *v15;
  unsigned int v16;
  _BYTE *v17;
  unsigned int v18;
  _BYTE *v19;
  unsigned int v20;
  _BYTE *v21;
  _BYTE *v22;

  if (g_Enable_GNB_Debug)
  {
    v1 = result;
    v2 = (char *)g_CB_GDbg;
    v3 = 36;
    v4 = 1u;
    do
    {
      g_CB_GDbg = (uint64_t)(v2 + 1);
      *v2 = v3;
      v2 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      {
        v2 = (char *)qword_253FFEED0;
        g_CB_GDbg = qword_253FFEED0;
      }
      v3 = str_17[v4++];
    }
    while (v4 != 6);
    v5 = *result;
    g_CB_GDbg = (uint64_t)(v2 + 1);
    *v2 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v5);
    v6 = v1[1];
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v6);
    v8 = v1[2];
    v9 = (_BYTE *)g_CB_GDbg++;
    *v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v8);
    v10 = v1[3];
    v11 = (_BYTE *)g_CB_GDbg++;
    *v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v10);
    v12 = v1[4];
    v13 = (_BYTE *)g_CB_GDbg++;
    *v13 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v12);
    v14 = v1[5];
    v15 = (_BYTE *)g_CB_GDbg++;
    *v15 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v14);
    v16 = v1[6];
    v17 = (_BYTE *)g_CB_GDbg++;
    *v17 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v16);
    v18 = *((_DWORD *)v1 + 4);
    v19 = (_BYTE *)g_CB_GDbg++;
    *v19 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v18);
    v20 = *((_DWORD *)v1 + 5);
    v21 = (_BYTE *)g_CB_GDbg++;
    *v21 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v20);
    v22 = (_BYTE *)g_CB_GDbg++;
    *v22 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return (unsigned __int16 *)GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_NonVol(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  char v10;
  char *v11;
  unint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  signed int v21;
  unsigned int v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  BOOL *v29;
  signed int v30;
  unsigned int v31;
  uint64_t v32;
  char *v33;
  char *v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  BOOL *v38;
  unsigned int v39;
  unsigned int v40;
  _BYTE *v41;
  unsigned int v42;
  _BYTE *v43;
  unsigned int v44;
  _BYTE *v45;
  unsigned int v46;
  _BYTE *v47;
  unsigned int v48;
  _BYTE *v49;
  unsigned int v50;
  _BYTE *v51;
  _BYTE *v52;
  int v53;
  unsigned int v54;
  _BYTE *v55;
  unsigned int v56;
  _BYTE *v57;
  unsigned int v58;
  _BYTE *v59;
  unsigned int v60;
  _BYTE *v61;
  unsigned int v62;
  _BYTE *v63;
  _BYTE *v64;
  int v65;
  unsigned int v66;
  _BYTE *v67;
  unsigned int v68;
  _BYTE *v69;
  unsigned int v70;
  _BYTE *v71;
  unsigned int v72;
  _BYTE *v73;
  unsigned int v74;
  _BYTE *v75;
  unsigned int v76;
  _BYTE *v77;
  unsigned int v78;
  _BYTE *v79;
  _BYTE *v80;
  int v81;
  uint64_t v82;
  double v83;
  unsigned int v84;
  char v85;
  char *v86;
  _BYTE *v87;
  _BYTE *v88;
  __int128 v89;
  _QWORD v90[3];
  BOOL v91[32];
  BOOL v92[16];
  _DWORD v93[7];
  _OWORD v94[7];
  BOOL v95[16];
  __int128 v96;
  __int16 v97;
  int v98[18];
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  if (g_Enable_GNB_Debug)
  {
    v2 = result;
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 4);
    v5 = *(_DWORD *)(a2 + 22936);
    v6 = *(_QWORD *)(a2 + 22848);
    v8 = *(_DWORD *)(a2 + 22856);
    v7 = *(_DWORD *)(a2 + 22860);
    v9 = *(_DWORD *)(a2 + 22864);
    v10 = 36;
    v11 = (char *)g_CB_GDbg;
    do
    {
      g_CB_GDbg = (uint64_t)(v11 + 1);
      *v11 = v10;
      v11 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      {
        v11 = (char *)qword_253FFEED0;
        g_CB_GDbg = qword_253FFEED0;
      }
      v10 = aNg[++v3];
    }
    while (v3 != 4);
    v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v13 = (_BYTE *)g_CB_GDbg++;
    *v13 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v12);
    v14 = (_BYTE *)g_CB_GDbg++;
    *v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v4);
    v15 = (_BYTE *)g_CB_GDbg++;
    *v15 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v5);
    v16 = (_BYTE *)g_CB_GDbg++;
    *v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v6);
    v17 = (_BYTE *)g_CB_GDbg++;
    *v17 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v8);
    v18 = (_BYTE *)g_CB_GDbg++;
    *v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v7);
    v19 = (_BYTE *)g_CB_GDbg++;
    *v19 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v9);
    v20 = (_BYTE *)g_CB_GDbg++;
    *v20 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    GNB_Debug_Flush_Check();
    if (v2)
    {
      memset(&v98[2], 0, 63);
      v97 = 0;
      *(_OWORD *)v95 = 0u;
      v96 = 0u;
      memset(v94, 0, 108);
      *(_OWORD *)v92 = 0u;
      memset(v93, 0, sizeof(v93));
      memset(v90, 0, sizeof(v90));
      v21 = 1;
      v89 = 0uLL;
      do
      {
        if (Core_Load_GPS_Eph(v21, v94) && SLODWORD(v94[0]) >= 1)
        {
          *(_QWORD *)v98 = *(_QWORD *)&v94[0];
          LOBYTE(v98[2]) = BYTE8(v94[0]);
          *(_WORD *)((char *)&v98[2] + 1) = *(_WORD *)((char *)v94 + 9);
          v22 = 21;
          v23 = 11;
          v24 = (char *)&v94[1] + 8;
          do
          {
            v25 = (char *)v98 + v23;
            *v25 = *v24;
            *(_WORD *)(v25 + 1) = *(_WORD *)(v24 + 1);
            v24 += 4;
            --v22;
            v23 += 3;
          }
          while (v22 > 1);
          Debug_Log_GPS_Eph(0, v21, (uint64_t)v98);
        }
        if (Core_Load_GPS_Alm(v21, v92) && *(int *)v92 >= 1)
        {
          *(_DWORD *)v95 = *(_DWORD *)v92;
          *(_DWORD *)&v95[4] = *(_DWORD *)&v92[4];
          *(_WORD *)&v95[8] = *(_WORD *)&v92[10];
          v26 = 9;
          v27 = 10;
          v28 = (unint64_t)v92 | 0xC;
          do
          {
            v29 = &v95[v27];
            *v29 = *(_BYTE *)v28;
            *(_WORD *)(v29 + 1) = *(_WORD *)(v28 + 1);
            v28 += 4;
            --v26;
            v27 += 3;
          }
          while (v26 > 1);
          Debug_Log_GPS_Alm(0, v21, (uint64_t)v95);
        }
        ++v21;
      }
      while (v21 != 33);
      if (Core_Load_GPS_Health(v91))
        Debug_Log_GNSS_Health(0, 1, (unsigned __int8 *)v91);
      if (Core_Load_GPS_UTC((uint64_t)v90) && SLODWORD(v90[0]) >= 1)
        Debug_Log_GPS_UTC(0, (uint64_t)v90);
      if (Core_Load_GPS_Klob(&v89) && (int)v89 >= 1)
        Debug_Log_GPS_Klob(0, (uint64_t)&v89);
      memset(&v98[2], 0, 63);
      *(_QWORD *)&v95[8] = 0;
      v96 = 0uLL;
      v97 = 0;
      memset(v94, 0, 108);
      v30 = 193;
      *(_OWORD *)v92 = 0u;
      memset(v93, 0, sizeof(v93));
      do
      {
        if (Core_Load_QZSS_Eph(v30, v94) && SLODWORD(v94[0]) >= 1)
        {
          *(_QWORD *)v98 = *(_QWORD *)&v94[0];
          LOBYTE(v98[2]) = BYTE8(v94[0]);
          *(_WORD *)((char *)&v98[2] + 1) = *(_WORD *)((char *)v94 + 9);
          v31 = 21;
          v32 = 11;
          v33 = (char *)&v94[1] + 8;
          do
          {
            v34 = (char *)v98 + v32;
            *v34 = *v33;
            *(_WORD *)(v34 + 1) = *(_WORD *)(v33 + 1);
            v33 += 4;
            --v31;
            v32 += 3;
          }
          while (v31 > 1);
          Debug_Log_GPS_Eph(0, v30, (uint64_t)v98);
        }
        if (Core_Load_QZSS_Alm(v30, v92) && *(int *)v92 >= 1)
        {
          *(_DWORD *)v95 = *(_DWORD *)v92;
          *(_DWORD *)&v95[4] = *(_DWORD *)&v92[4];
          *(_WORD *)&v95[8] = *(_WORD *)&v92[10];
          v35 = 9;
          v36 = 10;
          v37 = (unint64_t)v92 | 0xC;
          do
          {
            v38 = &v95[v36];
            *v38 = *(_BYTE *)v37;
            *(_WORD *)(v38 + 1) = *(_WORD *)(v37 + 1);
            v37 += 4;
            --v35;
            v36 += 3;
          }
          while (v35 > 1);
          Debug_Log_GPS_Alm(0, v30, (uint64_t)v95);
        }
        ++v30;
      }
      while (v30 != 203);
      if (Core_Load_QZSS_Health(v91))
        Debug_Log_GNSS_Health(0, 3, (unsigned __int8 *)v91);
      memset(v94, 0, 62);
      *(_QWORD *)v98 = 0;
      LOWORD(v98[2]) = 0;
      memset(&v98[3], 0, 24);
      *(_QWORD *)v92 = 0;
      *(_WORD *)&v92[8] = 0;
      *(_DWORD *)&v92[12] = 0;
      LOBYTE(v93[0]) = 0;
      v93[1] = 0;
      v39 = 1;
      LOBYTE(v93[2]) = 0;
      do
      {
        if (Core_Load_GLON_Eph(v39, v94) && SLODWORD(v94[0]) >= 1)
          Debug_Log_GLO_Eph(0, v39, (uint64_t)v94);
        if (Core_Load_GLON_Alm(v39, (uint64_t)v98) && v98[0] >= 1)
          Debug_Log_GLO_Alm(0, v39, (uint64_t)v98);
        ++v39;
      }
      while (v39 != 25);
      if (Core_Load_GLON_Health(v95))
        Debug_Log_GNSS_Health(0, 2, (unsigned __int8 *)v95);
      if (Core_Load_GLON_Clk1(v92))
      {
        v40 = *(_DWORD *)v92;
        if (*(int *)v92 >= 1)
        {
          if (g_Enable_GNB_Debug)
          {
            sprintf_NA_x_header(0, "C-");
            v41 = (_BYTE *)g_CB_GDbg++;
            *v41 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
              g_CB_GDbg = qword_253FFEED0;
            sprintf_2d(&g_CB_GDbg, v40);
            v42 = *(unsigned __int16 *)&v92[8];
            v43 = (_BYTE *)g_CB_GDbg++;
            *v43 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
              g_CB_GDbg = qword_253FFEED0;
            sprintf_2d(&g_CB_GDbg, v42);
            v44 = *(_DWORD *)&v92[12];
            v45 = (_BYTE *)g_CB_GDbg++;
            *v45 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
              g_CB_GDbg = qword_253FFEED0;
            sprintf_2d(&g_CB_GDbg, v44);
            v46 = LOBYTE(v93[0]);
            v47 = (_BYTE *)g_CB_GDbg++;
            *v47 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
              g_CB_GDbg = qword_253FFEED0;
            sprintf_2d(&g_CB_GDbg, v46);
            v48 = v93[1];
            v49 = (_BYTE *)g_CB_GDbg++;
            *v49 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
              g_CB_GDbg = qword_253FFEED0;
            sprintf_2d(&g_CB_GDbg, v48);
            v50 = LOBYTE(v93[2]);
            v51 = (_BYTE *)g_CB_GDbg++;
            *v51 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
              g_CB_GDbg = qword_253FFEED0;
            sprintf_2d(&g_CB_GDbg, v50);
            sprintf_sp1d(&g_CB_GDbg, *(int *)&v92[4]);
            v52 = (_BYTE *)g_CB_GDbg++;
            *v52 = 10;
            if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
              g_CB_GDbg = qword_253FFEED0;
            GNB_Debug_Flush_Check();
          }
        }
      }
      memset(v94, 0, 87);
      memset(v98, 0, 35);
      *(_QWORD *)&v95[6] = 0;
      v53 = 1;
      *(_QWORD *)v95 = 0;
      do
      {
        if (Core_Load_GAL_Eph(v53, (uint64_t)v94) && SLODWORD(v94[0]) >= 1)
          Debug_Log_GAL_Eph(0, (uint64_t)v94);
        if (Core_Load_GAL_Alm(v53, (uint64_t)v98) && v98[0] >= 1)
          Debug_Log_GAL_Alm(0, (uint64_t)v98);
        ++v53;
      }
      while (v53 != 37);
      if (Core_Load_GAL_Health(v92))
        Debug_Log_GNSS_Health(0, 6, (unsigned __int8 *)v92);
      if (Core_Load_GAL_GGTO(v95))
      {
        v54 = *(_DWORD *)v95;
        if (*(int *)v95 >= 1)
        {
          if (g_Enable_GNB_Debug)
          {
            sprintf_NA_x_header(0, "OE");
            v55 = (_BYTE *)g_CB_GDbg++;
            *v55 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
              g_CB_GDbg = qword_253FFEED0;
            sprintf_2d(&g_CB_GDbg, v54);
            v56 = *(__int16 *)&v95[8];
            v57 = (_BYTE *)g_CB_GDbg++;
            *v57 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
              g_CB_GDbg = qword_253FFEED0;
            sprintf_2d(&g_CB_GDbg, v56);
            v58 = *(__int16 *)&v95[10];
            v59 = (_BYTE *)g_CB_GDbg++;
            *v59 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
              g_CB_GDbg = qword_253FFEED0;
            sprintf_2d(&g_CB_GDbg, v58);
            v60 = v95[12];
            v61 = (_BYTE *)g_CB_GDbg++;
            *v61 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
              g_CB_GDbg = qword_253FFEED0;
            sprintf_2d(&g_CB_GDbg, v60);
            v62 = v95[13];
            v63 = (_BYTE *)g_CB_GDbg++;
            *v63 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
              g_CB_GDbg = qword_253FFEED0;
            sprintf_2d(&g_CB_GDbg, v62);
            sprintf_sp1d(&g_CB_GDbg, *(int *)&v95[4]);
            v64 = (_BYTE *)g_CB_GDbg++;
            *v64 = 10;
            if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
              g_CB_GDbg = qword_253FFEED0;
            GNB_Debug_Flush_Check();
          }
        }
      }
      LODWORD(v94[6]) = 0;
      memset(v94, 0, 23);
      memset((char *)&v94[1] + 8, 0, 64);
      *(_QWORD *)((char *)&v94[5] + 6) = 0;
      memset(v98, 0, 44);
      memset(v95, 0, sizeof(v95));
      v65 = 1;
      LODWORD(v96) = 0;
      do
      {
        if (Core_Load_BDS_Eph(v65, (uint64_t)v94) && SLODWORD(v94[0]) >= 1)
          Debug_Log_BDS_Eph(0, (uint64_t)v94);
        if (Core_Load_BDS_Alm(v65, v98) && v98[0] >= 1)
          Debug_Log_BDS_Alm(0, (uint64_t)v98);
        ++v65;
      }
      while (v65 != 38);
      if (Core_Load_BDS_Health(v92))
        Debug_Log_GNSS_Health(0, 5, (unsigned __int8 *)v92);
      if (Core_Load_BDS_BGTO((uint64_t)v95))
      {
        v66 = *(_DWORD *)v95;
        if (*(int *)v95 >= 1)
        {
          if (g_Enable_GNB_Debug)
          {
            sprintf_NA_x_header(0, "OB");
            v67 = (_BYTE *)g_CB_GDbg++;
            *v67 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
              g_CB_GDbg = qword_253FFEED0;
            sprintf_2d(&g_CB_GDbg, v66);
            v68 = *(__int16 *)&v95[8];
            v69 = (_BYTE *)g_CB_GDbg++;
            *v69 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
              g_CB_GDbg = qword_253FFEED0;
            sprintf_2d(&g_CB_GDbg, v68);
            v70 = *(__int16 *)&v95[10];
            v71 = (_BYTE *)g_CB_GDbg++;
            *v71 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
              g_CB_GDbg = qword_253FFEED0;
            sprintf_2d(&g_CB_GDbg, v70);
            v72 = *(__int16 *)&v95[12];
            v73 = (_BYTE *)g_CB_GDbg++;
            *v73 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
              g_CB_GDbg = qword_253FFEED0;
            sprintf_2d(&g_CB_GDbg, v72);
            v74 = *(__int16 *)&v95[14];
            v75 = (_BYTE *)g_CB_GDbg++;
            *v75 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
              g_CB_GDbg = qword_253FFEED0;
            sprintf_2d(&g_CB_GDbg, v74);
            v76 = (__int16)v96;
            v77 = (_BYTE *)g_CB_GDbg++;
            *v77 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
              g_CB_GDbg = qword_253FFEED0;
            sprintf_2d(&g_CB_GDbg, v76);
            v78 = SWORD1(v96);
            v79 = (_BYTE *)g_CB_GDbg++;
            *v79 = 32;
            if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
              g_CB_GDbg = qword_253FFEED0;
            sprintf_2d(&g_CB_GDbg, v78);
            sprintf_sp1d(&g_CB_GDbg, *(int *)&v95[4]);
            v80 = (_BYTE *)g_CB_GDbg++;
            *v80 = 10;
            if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
              g_CB_GDbg = qword_253FFEED0;
            GNB_Debug_Flush_Check();
          }
        }
      }
      DWORD2(v94[0]) = 0;
      *(_QWORD *)&v94[0] = 0;
      v81 = 120;
      v98[0] = 0;
      do
      {
        if (Core_Load_SBAS_Apx(v81, v98, (int *)v94) && v98[0] >= 1)
          Debug_Log_SBA_Alm(0, v81, v98[0], (unsigned int *)v94);
        ++v81;
      }
      while (v81 != 159);
      v98[0] = 0;
      *(_QWORD *)&v94[0] = 0;
      if (Core_Load_Clk_Drift(v98, (double *)v94) && g_Enable_GNB_Debug)
      {
        v82 = 0;
        v83 = *(double *)v94;
        v84 = v98[0];
        v85 = 36;
        v86 = (char *)g_CB_GDbg;
        do
        {
          g_CB_GDbg = (uint64_t)(v86 + 1);
          *v86 = v85;
          v86 = (char *)g_CB_GDbg;
          if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
          {
            v86 = (char *)qword_253FFEED0;
            g_CB_GDbg = qword_253FFEED0;
          }
          v85 = aNd[++v82];
        }
        while (v82 != 4);
        g_CB_GDbg = (uint64_t)(v86 + 1);
        *v86 = 32;
        if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
          g_CB_GDbg = qword_253FFEED0;
        sprintf_2d(&g_CB_GDbg, v84);
        v87 = (_BYTE *)g_CB_GDbg++;
        *v87 = 32;
        if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
          g_CB_GDbg = qword_253FFEED0;
        sprintf_11f9(&g_CB_GDbg, v83 * 1000000.0);
        v88 = (_BYTE *)g_CB_GDbg++;
        *v88 = 10;
        if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
          g_CB_GDbg = qword_253FFEED0;
        GNB_Debug_Flush_Check();
      }
    }
    return Debug_Log_NV_End();
  }
  return result;
}

uint64_t Debug_Log_NV_End(void)
{
  char *v0;
  char v1;
  uint64_t v2;
  uint64_t result;

  if (g_Enable_GNB_Debug)
  {
    v0 = (char *)g_CB_GDbg;
    v1 = 36;
    v2 = 1u;
    do
    {
      g_CB_GDbg = (uint64_t)(v0 + 1);
      *v0 = v1;
      v0 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      {
        v0 = (char *)qword_253FFEED0;
        g_CB_GDbg = qword_253FFEED0;
      }
      v1 = aN[v2++];
    }
    while (v2 != 6);
    g_CB_GDbg = (uint64_t)(v0 + 1);
    *v0 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_GPS_Eph(uint64_t result, signed int a2, uint64_t a3)
{
  char v5;
  _BYTE *v6;
  unsigned int v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t i;
  _BYTE *v11;

  if (g_Enable_GNB_Debug)
  {
    if (a2 <= 192)
      v5 = 71;
    else
      v5 = 81;
    sprintf_NA_E_header(result, v5);
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, a2);
    v7 = *(_DWORD *)a3;
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v7);
    v9 = (_BYTE *)g_CB_GDbg++;
    *v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    for (i = 0; i != 63; ++i)
      sprintf_02x((char **)&g_CB_GDbg, *(unsigned __int8 *)(a3 + 8 + i));
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a3 + 4));
    v11 = (_BYTE *)g_CB_GDbg++;
    *v11 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_GPS_Alm(uint64_t result, signed int a2, uint64_t a3)
{
  char v5;
  _BYTE *v6;
  unsigned int v7;
  _BYTE *v8;
  unsigned int v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t i;
  _BYTE *v13;

  if (g_Enable_GNB_Debug)
  {
    if (a2 <= 192)
      v5 = 71;
    else
      v5 = 81;
    sprintf_NA_A_header(result, v5);
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, a2);
    v7 = *(_DWORD *)a3;
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v7);
    v9 = *(__int16 *)(a3 + 8);
    v10 = (_BYTE *)g_CB_GDbg++;
    *v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v9);
    v11 = (_BYTE *)g_CB_GDbg++;
    *v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    for (i = 0; i != 24; ++i)
      sprintf_02x((char **)&g_CB_GDbg, *(unsigned __int8 *)(a3 + 10 + i));
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a3 + 4));
    v13 = (_BYTE *)g_CB_GDbg++;
    *v13 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_GNSS_Health(uint64_t result, int a2, unsigned __int8 *a3)
{
  unsigned int v5;
  int v6;
  char v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  unsigned int v12;
  _BYTE v13[15];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (g_Enable_GNB_Debug)
  {
    sprintf_NA_x_header(result, "H");
    v5 = 32;
    v6 = 1;
    v7 = 71;
    switch(a2)
    {
      case 1:
        break;
      case 2:
        v5 = 24;
        v7 = 82;
        break;
      case 3:
        v5 = 10;
        v7 = 81;
        break;
      case 5:
        v5 = 37;
        v7 = 66;
        break;
      case 6:
        v5 = 36;
        v7 = 69;
        break;
      default:
        v6 = 0;
        v5 = 0;
        v7 = 88;
        break;
    }
    v8 = (char *)g_CB_GDbg++;
    *v8 = v7;
    v9 = (_BYTE *)g_CB_GDbg;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      v9 = (_BYTE *)qword_253FFEED0;
    g_CB_GDbg = (uint64_t)(v9 + 1);
    *v9 = 32;
    v10 = (_BYTE *)g_CB_GDbg;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
    {
      v10 = (_BYTE *)qword_253FFEED0;
      g_CB_GDbg = qword_253FFEED0;
    }
    if (v6)
    {
      if (v5 <= 1)
        v11 = 1;
      else
        v11 = v5;
      do
      {
        v12 = *a3++;
        sprintf1da(&g_CB_GDbg, v12, v13, 0, 0);
        --v11;
      }
      while (v11);
      v10 = (_BYTE *)g_CB_GDbg;
    }
    g_CB_GDbg = (uint64_t)(v10 + 1);
    *v10 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_GPS_UTC(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  _BYTE *v4;
  unsigned int v5;
  _BYTE *v6;
  unsigned int v7;
  _BYTE *v8;
  unsigned int v9;
  _BYTE *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  _BYTE *v21;

  if (g_Enable_GNB_Debug)
  {
    sprintf_NA_x_header(result, "UG");
    v3 = *(_DWORD *)a2;
    v4 = (_BYTE *)g_CB_GDbg++;
    *v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v3);
    v5 = *(_DWORD *)(a2 + 8);
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v5);
    v7 = *(_DWORD *)(a2 + 12);
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v7);
    v9 = *(unsigned __int8 *)(a2 + 16);
    v10 = (_BYTE *)g_CB_GDbg++;
    *v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v9);
    v11 = *(unsigned __int8 *)(a2 + 17);
    v12 = (_BYTE *)g_CB_GDbg++;
    *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v11);
    v13 = *(char *)(a2 + 18);
    v14 = (_BYTE *)g_CB_GDbg++;
    *v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v13);
    v15 = *(unsigned __int8 *)(a2 + 19);
    v16 = (_BYTE *)g_CB_GDbg++;
    *v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v15);
    v17 = *(unsigned __int8 *)(a2 + 20);
    v18 = (_BYTE *)g_CB_GDbg++;
    *v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v17);
    v19 = *(char *)(a2 + 21);
    v20 = (_BYTE *)g_CB_GDbg++;
    *v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v19);
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a2 + 4));
    v21 = (_BYTE *)g_CB_GDbg++;
    *v21 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_GPS_Klob(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  _BYTE *v4;
  unsigned int v5;
  _BYTE *v6;
  unsigned int v7;
  _BYTE *v8;
  unsigned int v9;
  _BYTE *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  _BYTE *v21;

  if (g_Enable_GNB_Debug)
  {
    sprintf_NA_x_header(result, "KG");
    v3 = *(_DWORD *)a2;
    v4 = (_BYTE *)g_CB_GDbg++;
    *v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v3);
    v5 = *(char *)(a2 + 8);
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v5);
    v7 = *(char *)(a2 + 9);
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v7);
    v9 = *(char *)(a2 + 10);
    v10 = (_BYTE *)g_CB_GDbg++;
    *v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v9);
    v11 = *(char *)(a2 + 11);
    v12 = (_BYTE *)g_CB_GDbg++;
    *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v11);
    v13 = *(char *)(a2 + 12);
    v14 = (_BYTE *)g_CB_GDbg++;
    *v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v13);
    v15 = *(char *)(a2 + 13);
    v16 = (_BYTE *)g_CB_GDbg++;
    *v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v15);
    v17 = *(char *)(a2 + 14);
    v18 = (_BYTE *)g_CB_GDbg++;
    *v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v17);
    v19 = *(char *)(a2 + 15);
    v20 = (_BYTE *)g_CB_GDbg++;
    *v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v19);
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a2 + 4));
    v21 = (_BYTE *)g_CB_GDbg++;
    *v21 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_GLO_Eph(uint64_t result, unsigned int a2, uint64_t a3)
{
  _BYTE *v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  _BYTE *v9;
  unsigned int v10;
  _BYTE *v11;
  uint64_t i;
  _BYTE *v13;
  unint64_t v14;
  _BYTE *v15;
  _BYTE v16[15];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (g_Enable_GNB_Debug)
  {
    sprintf_NA_E_header(result, 82);
    v5 = (_BYTE *)g_CB_GDbg++;
    *v5 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, a2);
    v6 = *(_DWORD *)a3;
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v6);
    v8 = *(_DWORD *)(a3 + 8);
    v9 = (_BYTE *)g_CB_GDbg++;
    *v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v8);
    v10 = *(unsigned __int16 *)(a3 + 60);
    v11 = (_BYTE *)g_CB_GDbg++;
    *v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v10);
    for (i = 12; i != 60; i += 4)
    {
      v13 = (_BYTE *)g_CB_GDbg++;
      *v13 = 32;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
        g_CB_GDbg = qword_253FFEED0;
      v14 = *(unsigned int *)(a3 + i);
      v16[0] = hexTABLE[v14 >> 28];
      v16[1] = hexTABLE[(v14 >> 24) & 0xF];
      hex6((uint64_t)&g_CB_GDbg, v14, v16, 2);
    }
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a3 + 4));
    v15 = (_BYTE *)g_CB_GDbg++;
    *v15 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_GLO_Alm(uint64_t result, unsigned int a2, uint64_t a3)
{
  _BYTE *v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  _BYTE *v9;
  uint64_t i;
  _BYTE *v11;
  unint64_t v12;
  _BYTE *v13;
  _BYTE v14[15];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (g_Enable_GNB_Debug)
  {
    sprintf_NA_A_header(result, 82);
    v5 = (_BYTE *)g_CB_GDbg++;
    *v5 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, a2);
    v6 = *(_DWORD *)a3;
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v6);
    v8 = *(unsigned __int16 *)(a3 + 8);
    v9 = (_BYTE *)g_CB_GDbg++;
    *v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v8);
    for (i = 0; i != 24; i += 4)
    {
      v11 = (_BYTE *)g_CB_GDbg++;
      *v11 = 32;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
        g_CB_GDbg = qword_253FFEED0;
      v12 = *(unsigned int *)(a3 + 12 + i);
      v14[0] = hexTABLE[v12 >> 28];
      v14[1] = hexTABLE[(v12 >> 24) & 0xF];
      hex6((uint64_t)&g_CB_GDbg, v12, v14, 2);
    }
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a3 + 4));
    v13 = (_BYTE *)g_CB_GDbg++;
    *v13 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_GAL_Eph(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  _BYTE *v4;
  unsigned int v5;
  _BYTE *v6;
  unsigned int v7;
  _BYTE *v8;
  unsigned int v9;
  _BYTE *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  unsigned int v21;
  _BYTE *v22;
  unsigned int v23;
  _BYTE *v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned int v27;
  _BYTE *v28;
  unsigned int v29;
  _BYTE *v30;
  unsigned int v31;
  _BYTE *v32;
  unsigned int v33;
  _BYTE *v34;
  unsigned int v35;
  _BYTE *v36;
  unsigned int v37;
  _BYTE *v38;
  unsigned int v39;
  _BYTE *v40;
  unsigned int v41;
  _BYTE *v42;
  unsigned int v43;
  _BYTE *v44;
  unsigned int v45;
  _BYTE *v46;
  unsigned int v47;
  _BYTE *v48;
  unsigned int v49;
  _BYTE *v50;
  unsigned int v51;
  _BYTE *v52;
  unsigned int v53;
  _BYTE *v54;
  unsigned int v55;
  _BYTE *v56;
  unsigned int v57;
  _BYTE *v58;
  unsigned int v59;
  _BYTE *v60;
  unsigned int v61;
  _BYTE *v62;
  unsigned int v63;
  _BYTE *v64;
  unsigned int v65;
  _BYTE *v66;
  unsigned int v67;
  _BYTE *v68;
  _BYTE *v69;

  if (g_Enable_GNB_Debug)
  {
    sprintf_NA_E_header(result, 69);
    v3 = *(_DWORD *)a2;
    v4 = (_BYTE *)g_CB_GDbg++;
    *v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v3);
    v5 = *(_DWORD *)(a2 + 8);
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v5);
    v7 = *(__int16 *)(a2 + 12);
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v7);
    v9 = *(unsigned __int8 *)(a2 + 14);
    v10 = (_BYTE *)g_CB_GDbg++;
    *v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v9);
    v11 = *(unsigned __int8 *)(a2 + 15);
    v12 = (_BYTE *)g_CB_GDbg++;
    *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v11);
    v13 = *(unsigned __int16 *)(a2 + 16);
    v14 = (_BYTE *)g_CB_GDbg++;
    *v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v13);
    v15 = *(unsigned __int16 *)(a2 + 18);
    v16 = (_BYTE *)g_CB_GDbg++;
    *v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v15);
    v17 = *(_DWORD *)(a2 + 20);
    v18 = (_BYTE *)g_CB_GDbg++;
    *v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v17);
    sprintf_sp1u(&g_CB_GDbg, *(_DWORD *)(a2 + 24));
    sprintf_sp1u(&g_CB_GDbg, *(_DWORD *)(a2 + 28));
    v19 = *(_DWORD *)(a2 + 32);
    v20 = (_BYTE *)g_CB_GDbg++;
    *v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v19);
    v21 = *(_DWORD *)(a2 + 36);
    v22 = (_BYTE *)g_CB_GDbg++;
    *v22 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v21);
    v23 = *(_DWORD *)(a2 + 40);
    v24 = (_BYTE *)g_CB_GDbg++;
    *v24 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v23);
    v25 = *(_DWORD *)(a2 + 44);
    v26 = (_BYTE *)g_CB_GDbg++;
    *v26 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v25);
    v27 = *(__int16 *)(a2 + 48);
    v28 = (_BYTE *)g_CB_GDbg++;
    *v28 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v27);
    v29 = *(__int16 *)(a2 + 50);
    v30 = (_BYTE *)g_CB_GDbg++;
    *v30 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v29);
    v31 = *(__int16 *)(a2 + 52);
    v32 = (_BYTE *)g_CB_GDbg++;
    *v32 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v31);
    v33 = *(__int16 *)(a2 + 54);
    v34 = (_BYTE *)g_CB_GDbg++;
    *v34 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v33);
    v35 = *(__int16 *)(a2 + 56);
    v36 = (_BYTE *)g_CB_GDbg++;
    *v36 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v35);
    v37 = *(__int16 *)(a2 + 58);
    v38 = (_BYTE *)g_CB_GDbg++;
    *v38 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v37);
    v39 = *(__int16 *)(a2 + 60);
    v40 = (_BYTE *)g_CB_GDbg++;
    *v40 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v39);
    v41 = *(__int16 *)(a2 + 62);
    v42 = (_BYTE *)g_CB_GDbg++;
    *v42 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v41);
    v43 = *(_DWORD *)(a2 + 64);
    v44 = (_BYTE *)g_CB_GDbg++;
    *v44 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v43);
    v45 = *(_DWORD *)(a2 + 68);
    v46 = (_BYTE *)g_CB_GDbg++;
    *v46 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v45);
    v47 = *(__int16 *)(a2 + 72);
    v48 = (_BYTE *)g_CB_GDbg++;
    *v48 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v47);
    v49 = *(unsigned __int16 *)(a2 + 74);
    v50 = (_BYTE *)g_CB_GDbg++;
    *v50 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v49);
    v51 = *(__int16 *)(a2 + 76);
    v52 = (_BYTE *)g_CB_GDbg++;
    *v52 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v51);
    v53 = *(__int16 *)(a2 + 78);
    v54 = (_BYTE *)g_CB_GDbg++;
    *v54 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v53);
    v55 = *(unsigned __int8 *)(a2 + 80);
    v56 = (_BYTE *)g_CB_GDbg++;
    *v56 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v55);
    v57 = *(unsigned __int8 *)(a2 + 81);
    v58 = (_BYTE *)g_CB_GDbg++;
    *v58 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v57);
    v59 = *(unsigned __int8 *)(a2 + 82);
    v60 = (_BYTE *)g_CB_GDbg++;
    *v60 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v59);
    v61 = *(unsigned __int8 *)(a2 + 83);
    v62 = (_BYTE *)g_CB_GDbg++;
    *v62 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v61);
    v63 = *(unsigned __int8 *)(a2 + 84);
    v64 = (_BYTE *)g_CB_GDbg++;
    *v64 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v63);
    v65 = *(unsigned __int8 *)(a2 + 85);
    v66 = (_BYTE *)g_CB_GDbg++;
    *v66 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v65);
    v67 = *(unsigned __int8 *)(a2 + 86);
    v68 = (_BYTE *)g_CB_GDbg++;
    *v68 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v67);
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a2 + 4));
    v69 = (_BYTE *)g_CB_GDbg++;
    *v69 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_GAL_Alm(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  _BYTE *v4;
  unsigned int v5;
  _BYTE *v6;
  unsigned int v7;
  _BYTE *v8;
  unsigned int v9;
  _BYTE *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  unsigned int v21;
  _BYTE *v22;
  unsigned int v23;
  _BYTE *v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned int v27;
  _BYTE *v28;
  unsigned int v29;
  _BYTE *v30;
  unsigned int v31;
  _BYTE *v32;
  unsigned int v33;
  _BYTE *v34;
  unsigned int v35;
  _BYTE *v36;
  _BYTE *v37;

  if (g_Enable_GNB_Debug)
  {
    sprintf_NA_A_header(result, 69);
    v3 = *(_DWORD *)a2;
    v4 = (_BYTE *)g_CB_GDbg++;
    *v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v3);
    v5 = *(unsigned __int8 *)(a2 + 8);
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v5);
    v7 = *(unsigned __int8 *)(a2 + 9);
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v7);
    v9 = *(__int16 *)(a2 + 10);
    v10 = (_BYTE *)g_CB_GDbg++;
    *v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v9);
    v11 = *(unsigned __int16 *)(a2 + 12);
    v12 = (_BYTE *)g_CB_GDbg++;
    *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v11);
    v13 = *(__int16 *)(a2 + 14);
    v14 = (_BYTE *)g_CB_GDbg++;
    *v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v13);
    v15 = *(unsigned __int16 *)(a2 + 16);
    v16 = (_BYTE *)g_CB_GDbg++;
    *v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v15);
    v17 = *(__int16 *)(a2 + 18);
    v18 = (_BYTE *)g_CB_GDbg++;
    *v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v17);
    v19 = *(__int16 *)(a2 + 20);
    v20 = (_BYTE *)g_CB_GDbg++;
    *v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v19);
    v21 = *(__int16 *)(a2 + 22);
    v22 = (_BYTE *)g_CB_GDbg++;
    *v22 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v21);
    v23 = *(__int16 *)(a2 + 24);
    v24 = (_BYTE *)g_CB_GDbg++;
    *v24 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v23);
    v25 = *(__int16 *)(a2 + 26);
    v26 = (_BYTE *)g_CB_GDbg++;
    *v26 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v25);
    v27 = *(__int16 *)(a2 + 28);
    v28 = (_BYTE *)g_CB_GDbg++;
    *v28 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v27);
    v29 = *(__int16 *)(a2 + 30);
    v30 = (_BYTE *)g_CB_GDbg++;
    *v30 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v29);
    v31 = *(unsigned __int8 *)(a2 + 32);
    v32 = (_BYTE *)g_CB_GDbg++;
    *v32 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v31);
    v33 = *(unsigned __int8 *)(a2 + 33);
    v34 = (_BYTE *)g_CB_GDbg++;
    *v34 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v33);
    v35 = *(unsigned __int8 *)(a2 + 34);
    v36 = (_BYTE *)g_CB_GDbg++;
    *v36 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v35);
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a2 + 4));
    v37 = (_BYTE *)g_CB_GDbg++;
    *v37 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_BDS_Eph(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  _BYTE *v4;
  unsigned int v5;
  _BYTE *v6;
  unsigned int v7;
  _BYTE *v8;
  unsigned int v9;
  _BYTE *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  unsigned int v21;
  _BYTE *v22;
  unsigned int v23;
  _BYTE *v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned int v27;
  _BYTE *v28;
  unsigned int v29;
  _BYTE *v30;
  unsigned int v31;
  _BYTE *v32;
  unsigned int v33;
  _BYTE *v34;
  unsigned int v35;
  _BYTE *v36;
  unsigned int v37;
  _BYTE *v38;
  unsigned int v39;
  _BYTE *v40;
  unsigned int v41;
  _BYTE *v42;
  unsigned int v43;
  _BYTE *v44;
  unsigned int v45;
  _BYTE *v46;
  unsigned int v47;
  _BYTE *v48;
  unsigned int v49;
  _BYTE *v50;
  unsigned int v51;
  _BYTE *v52;
  unsigned int v53;
  _BYTE *v54;
  unsigned int v55;
  _BYTE *v56;
  unsigned int v57;
  _BYTE *v58;
  _BYTE *v59;

  if (g_Enable_GNB_Debug)
  {
    sprintf_NA_E_header(result, 66);
    v3 = *(_DWORD *)a2;
    v4 = (_BYTE *)g_CB_GDbg++;
    *v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v3);
    v5 = *(_DWORD *)(a2 + 8);
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v5);
    v7 = *(_DWORD *)(a2 + 12);
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v7);
    v9 = *(__int16 *)(a2 + 16);
    v10 = (_BYTE *)g_CB_GDbg++;
    *v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v9);
    v11 = *(unsigned __int8 *)(a2 + 18);
    v12 = (_BYTE *)g_CB_GDbg++;
    *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v11);
    v13 = *(unsigned __int8 *)(a2 + 19);
    v14 = (_BYTE *)g_CB_GDbg++;
    *v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v13);
    v15 = *(unsigned __int8 *)(a2 + 20);
    v16 = (_BYTE *)g_CB_GDbg++;
    *v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v15);
    v17 = *(unsigned __int8 *)(a2 + 21);
    v18 = (_BYTE *)g_CB_GDbg++;
    *v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v17);
    v19 = *(unsigned __int8 *)(a2 + 22);
    v20 = (_BYTE *)g_CB_GDbg++;
    *v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v19);
    v21 = *(_DWORD *)(a2 + 24);
    v22 = (_BYTE *)g_CB_GDbg++;
    *v22 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v21);
    sprintf_sp1u(&g_CB_GDbg, *(_DWORD *)(a2 + 28));
    sprintf_sp1u(&g_CB_GDbg, *(_DWORD *)(a2 + 32));
    v23 = *(_DWORD *)(a2 + 36);
    v24 = (_BYTE *)g_CB_GDbg++;
    *v24 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v23);
    v25 = *(_DWORD *)(a2 + 40);
    v26 = (_BYTE *)g_CB_GDbg++;
    *v26 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v25);
    v27 = *(_DWORD *)(a2 + 44);
    v28 = (_BYTE *)g_CB_GDbg++;
    *v28 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v27);
    v29 = *(__int16 *)(a2 + 48);
    v30 = (_BYTE *)g_CB_GDbg++;
    *v30 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v29);
    v31 = *(__int16 *)(a2 + 50);
    v32 = (_BYTE *)g_CB_GDbg++;
    *v32 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v31);
    v33 = *(_DWORD *)(a2 + 52);
    v34 = (_BYTE *)g_CB_GDbg++;
    *v34 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v33);
    v35 = *(_DWORD *)(a2 + 56);
    v36 = (_BYTE *)g_CB_GDbg++;
    *v36 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v35);
    v37 = *(_DWORD *)(a2 + 60);
    v38 = (_BYTE *)g_CB_GDbg++;
    *v38 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v37);
    v39 = *(_DWORD *)(a2 + 64);
    v40 = (_BYTE *)g_CB_GDbg++;
    *v40 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v39);
    v41 = *(_DWORD *)(a2 + 68);
    v42 = (_BYTE *)g_CB_GDbg++;
    *v42 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v41);
    v43 = *(_DWORD *)(a2 + 72);
    v44 = (_BYTE *)g_CB_GDbg++;
    *v44 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v43);
    v45 = *(_DWORD *)(a2 + 76);
    v46 = (_BYTE *)g_CB_GDbg++;
    *v46 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v45);
    v47 = *(_DWORD *)(a2 + 80);
    v48 = (_BYTE *)g_CB_GDbg++;
    *v48 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v47);
    v49 = *(_DWORD *)(a2 + 84);
    v50 = (_BYTE *)g_CB_GDbg++;
    *v50 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v49);
    v51 = *(__int16 *)(a2 + 88);
    v52 = (_BYTE *)g_CB_GDbg++;
    *v52 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v51);
    v53 = *(__int16 *)(a2 + 90);
    v54 = (_BYTE *)g_CB_GDbg++;
    *v54 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v53);
    v55 = *(__int16 *)(a2 + 92);
    v56 = (_BYTE *)g_CB_GDbg++;
    *v56 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v55);
    v57 = *(_DWORD *)(a2 + 96);
    v58 = (_BYTE *)g_CB_GDbg++;
    *v58 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v57);
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a2 + 4));
    v59 = (_BYTE *)g_CB_GDbg++;
    *v59 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_BDS_Alm(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  _BYTE *v4;
  unsigned int v5;
  _BYTE *v6;
  unsigned int v7;
  _BYTE *v8;
  unsigned int v9;
  _BYTE *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  unsigned int v21;
  _BYTE *v22;
  unsigned int v23;
  _BYTE *v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned int v27;
  _BYTE *v28;
  unsigned int v29;
  _BYTE *v30;
  unsigned int v31;
  _BYTE *v32;
  _BYTE *v33;

  if (g_Enable_GNB_Debug)
  {
    sprintf_NA_A_header(result, 66);
    v3 = *(_DWORD *)a2;
    v4 = (_BYTE *)g_CB_GDbg++;
    *v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v3);
    v5 = *(__int16 *)(a2 + 8);
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v5);
    v7 = *(unsigned __int8 *)(a2 + 10);
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v7);
    v9 = *(unsigned __int8 *)(a2 + 11);
    v10 = (_BYTE *)g_CB_GDbg++;
    *v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v9);
    v11 = *(_DWORD *)(a2 + 12);
    v12 = (_BYTE *)g_CB_GDbg++;
    *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v11);
    v13 = *(_DWORD *)(a2 + 16);
    v14 = (_BYTE *)g_CB_GDbg++;
    *v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v13);
    v15 = *(_DWORD *)(a2 + 20);
    v16 = (_BYTE *)g_CB_GDbg++;
    *v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v15);
    v17 = *(_DWORD *)(a2 + 24);
    v18 = (_BYTE *)g_CB_GDbg++;
    *v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v17);
    v19 = *(_DWORD *)(a2 + 28);
    v20 = (_BYTE *)g_CB_GDbg++;
    *v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v19);
    v21 = *(_DWORD *)(a2 + 32);
    v22 = (_BYTE *)g_CB_GDbg++;
    *v22 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v21);
    v23 = *(__int16 *)(a2 + 36);
    v24 = (_BYTE *)g_CB_GDbg++;
    *v24 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v23);
    v25 = *(__int16 *)(a2 + 38);
    v26 = (_BYTE *)g_CB_GDbg++;
    *v26 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v25);
    v27 = *(__int16 *)(a2 + 40);
    v28 = (_BYTE *)g_CB_GDbg++;
    *v28 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v27);
    v29 = *(unsigned __int8 *)(a2 + 42);
    v30 = (_BYTE *)g_CB_GDbg++;
    *v30 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v29);
    v31 = *(unsigned __int8 *)(a2 + 43);
    v32 = (_BYTE *)g_CB_GDbg++;
    *v32 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v31);
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a2 + 4));
    v33 = (_BYTE *)g_CB_GDbg++;
    *v33 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_SBA_Alm(uint64_t result, unsigned int a2, unsigned int a3, unsigned int *a4)
{
  _BYTE *v7;
  _BYTE *v8;
  unsigned int v9;
  _BYTE *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  _BYTE *v14;
  _BYTE *v15;

  if (g_Enable_GNB_Debug)
  {
    sprintf_NA_A_header(result, 83);
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, a2);
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, a3);
    v9 = *a4;
    v10 = (_BYTE *)g_CB_GDbg++;
    *v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v9);
    v11 = a4[1];
    v12 = (_BYTE *)g_CB_GDbg++;
    *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v11);
    v13 = a4[2];
    v14 = (_BYTE *)g_CB_GDbg++;
    *v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v13);
    v15 = (_BYTE *)g_CB_GDbg++;
    *v15 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t sprintf_NA_x_header(uint64_t result, _BYTE *a2)
{
  _BYTE *v2;
  char *v3;
  char v4;
  _BYTE *v5;
  char v6;
  unsigned __int8 *v7;
  int v8;

  v2 = (_BYTE *)g_CB_GDbg++;
  *v2 = 36;
  v3 = (char *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
    v3 = (char *)qword_253FFEED0;
  if ((_DWORD)result)
    v4 = 65;
  else
    v4 = 78;
  g_CB_GDbg = (uint64_t)(v3 + 1);
  *v3 = v4;
  v5 = (_BYTE *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
  {
    v5 = (_BYTE *)qword_253FFEED0;
    g_CB_GDbg = qword_253FFEED0;
  }
  v6 = *a2;
  if (*a2)
  {
    v7 = a2 + 1;
    do
    {
      g_CB_GDbg = (uint64_t)(v5 + 1);
      *v5 = v6;
      v5 = (_BYTE *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      {
        v5 = (_BYTE *)qword_253FFEED0;
        g_CB_GDbg = qword_253FFEED0;
      }
      v8 = *v7++;
      v6 = v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sprintf_NA_E_header(uint64_t result, char a2)
{
  _BYTE *v2;
  char *v3;
  char v4;
  _BYTE *v5;
  _BYTE *v6;

  v2 = (_BYTE *)g_CB_GDbg++;
  *v2 = 36;
  v3 = (char *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
    v3 = (char *)qword_253FFEED0;
  if ((_DWORD)result == 1)
    v4 = 65;
  else
    v4 = 69;
  if (!(_DWORD)result)
    v4 = 78;
  g_CB_GDbg = (uint64_t)(v3 + 1);
  *v3 = v4;
  v5 = (_BYTE *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
    v5 = (_BYTE *)qword_253FFEED0;
  g_CB_GDbg = (uint64_t)(v5 + 1);
  *v5 = 69;
  v6 = (_BYTE *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
    v6 = (_BYTE *)qword_253FFEED0;
  g_CB_GDbg = (uint64_t)(v6 + 1);
  *v6 = a2;
  if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
    g_CB_GDbg = qword_253FFEED0;
  return result;
}

uint64_t Debug_Log_SBA_Eph(uint64_t result, unsigned int a2, unsigned int a3, uint64_t a4)
{
  _BYTE *v7;
  _BYTE *v8;
  unsigned int v9;
  _BYTE *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  unsigned int v21;
  _BYTE *v22;
  unsigned int v23;
  _BYTE *v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned int v27;
  _BYTE *v28;
  unsigned int v29;
  _BYTE *v30;
  unsigned int v31;
  _BYTE *v32;
  unsigned int v33;
  _BYTE *v34;
  unsigned int v35;
  _BYTE *v36;
  _BYTE *v37;

  if (g_Enable_GNB_Debug)
  {
    sprintf_NA_E_header(result, 83);
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, a2);
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, a3);
    v9 = *(_DWORD *)a4;
    v10 = (_BYTE *)g_CB_GDbg++;
    *v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v9);
    v11 = *(unsigned __int16 *)(a4 + 8);
    v12 = (_BYTE *)g_CB_GDbg++;
    *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v11);
    v13 = *(unsigned __int8 *)(a4 + 10);
    v14 = (_BYTE *)g_CB_GDbg++;
    *v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v13);
    v15 = *(_DWORD *)(a4 + 12);
    v16 = (_BYTE *)g_CB_GDbg++;
    *v16 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v15);
    v17 = *(_DWORD *)(a4 + 16);
    v18 = (_BYTE *)g_CB_GDbg++;
    *v18 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v17);
    v19 = *(_DWORD *)(a4 + 20);
    v20 = (_BYTE *)g_CB_GDbg++;
    *v20 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v19);
    v21 = *(_DWORD *)(a4 + 24);
    v22 = (_BYTE *)g_CB_GDbg++;
    *v22 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v21);
    v23 = *(_DWORD *)(a4 + 28);
    v24 = (_BYTE *)g_CB_GDbg++;
    *v24 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v23);
    v25 = *(_DWORD *)(a4 + 32);
    v26 = (_BYTE *)g_CB_GDbg++;
    *v26 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v25);
    v27 = *(_DWORD *)(a4 + 36);
    v28 = (_BYTE *)g_CB_GDbg++;
    *v28 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v27);
    v29 = *(_DWORD *)(a4 + 40);
    v30 = (_BYTE *)g_CB_GDbg++;
    *v30 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v29);
    v31 = *(_DWORD *)(a4 + 44);
    v32 = (_BYTE *)g_CB_GDbg++;
    *v32 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v31);
    v33 = *(_DWORD *)(a4 + 48);
    v34 = (_BYTE *)g_CB_GDbg++;
    *v34 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v33);
    v35 = *(_DWORD *)(a4 + 52);
    v36 = (_BYTE *)g_CB_GDbg++;
    *v36 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v35);
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(a4 + 4));
    v37 = (_BYTE *)g_CB_GDbg++;
    *v37 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t sprintf_NA_A_header(uint64_t result, char a2)
{
  _BYTE *v2;
  char *v3;
  char v4;
  _BYTE *v5;
  _BYTE *v6;

  v2 = (_BYTE *)g_CB_GDbg++;
  *v2 = 36;
  v3 = (char *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
    v3 = (char *)qword_253FFEED0;
  if ((_DWORD)result)
    v4 = 65;
  else
    v4 = 78;
  g_CB_GDbg = (uint64_t)(v3 + 1);
  *v3 = v4;
  v5 = (_BYTE *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
    v5 = (_BYTE *)qword_253FFEED0;
  g_CB_GDbg = (uint64_t)(v5 + 1);
  *v5 = 65;
  v6 = (_BYTE *)g_CB_GDbg;
  if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
    v6 = (_BYTE *)qword_253FFEED0;
  g_CB_GDbg = (uint64_t)(v6 + 1);
  *v6 = a2;
  if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
    g_CB_GDbg = qword_253FFEED0;
  return result;
}

uint64_t Debug_Log_TM_FCP_OS_Time_ms(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  char *v4;
  char v5;
  _BYTE *v6;

  if (g_Enable_GNB_Debug)
  {
    v3 = 0;
    v4 = (char *)g_CB_GDbg;
    v5 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v4 + 1);
      *v4 = v5;
      v4 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      {
        v4 = (char *)qword_253FFEED0;
        g_CB_GDbg = qword_253FFEED0;
      }
      v5 = str_8_1[++v3];
    }
    while (v3 != 4);
    sprintf_sp1u(&g_CB_GDbg, result);
    sprintf_sp1u(&g_CB_GDbg, a2);
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

unsigned int *Debug_Log_AGPS_Ref_Time(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  char *v3;
  char v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  _BYTE *v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  if (g_Enable_GNB_Debug)
  {
    v1 = result;
    v2 = 0;
    v3 = (char *)g_CB_GDbg;
    v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *v3 = v4;
      v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      {
        v3 = (char *)qword_253FFEED0;
        g_CB_GDbg = qword_253FFEED0;
      }
      v4 = str_9_5[++v2];
    }
    while (v2 != 4);
    v5 = *result;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v5);
    v6 = v1[1];
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v6);
    v8 = *((unsigned __int16 *)v1 + 4);
    v9 = (_BYTE *)g_CB_GDbg++;
    *v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v8);
    v10 = *((unsigned __int16 *)v1 + 5);
    v11 = (_BYTE *)g_CB_GDbg++;
    *v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v10);
    v12 = (_BYTE *)g_CB_GDbg++;
    *v12 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return (unsigned int *)GNB_Debug_Flush_Check();
  }
  return result;
}

double *Debug_Log_AGPS_EFSP_Time(double *result)
{
  double *v1;
  char *v2;
  char v3;
  uint64_t v4;
  unsigned int v5;
  _BYTE *v6;
  unsigned int v7;
  _BYTE *v8;
  unsigned int v9;
  _BYTE *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  _BYTE *v14;
  _BYTE *v15;

  if (g_Enable_GNB_Debug)
  {
    v1 = result;
    v2 = (char *)g_CB_GDbg;
    v3 = 36;
    v4 = 1u;
    do
    {
      g_CB_GDbg = (uint64_t)(v2 + 1);
      *v2 = v3;
      v2 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      {
        v2 = (char *)qword_253FFEED0;
        g_CB_GDbg = qword_253FFEED0;
      }
      v3 = str_10_3[v4++];
    }
    while (v4 != 6);
    sprintf_11f9(&g_CB_GDbg, *result);
    v5 = *((unsigned __int16 *)v1 + 4);
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v5);
    v7 = *((_DWORD *)v1 + 3);
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v7);
    v9 = *((_DWORD *)v1 + 4);
    v10 = (_BYTE *)g_CB_GDbg++;
    *v10 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v9);
    v11 = *((_DWORD *)v1 + 5);
    v12 = (_BYTE *)g_CB_GDbg++;
    *v12 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v11);
    v13 = *((unsigned __int8 *)v1 + 24);
    v14 = (_BYTE *)g_CB_GDbg++;
    *v14 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v13);
    v15 = (_BYTE *)g_CB_GDbg++;
    *v15 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return (double *)GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_AGPS_TOW_Assist(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  char *v8;
  char v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned int v12;
  _BYTE *v13;
  _BYTE v14[15];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (g_Enable_GNB_Debug)
  {
    v1 = result;
    v2 = *(unsigned __int8 *)(result + 4);
    if (*(_BYTE *)(result + 4))
    {
      v3 = 0;
      v4 = 0;
      if (v2 >= 0xD)
        v5 = 12;
      else
        v5 = *(unsigned __int8 *)(result + 4);
      if (v2 < 0xD)
        v6 = 1;
      else
        v6 = 2;
      do
      {
        v7 = 0;
        v8 = (char *)g_CB_GDbg;
        v9 = 36;
        do
        {
          g_CB_GDbg = (uint64_t)(v8 + 1);
          *v8 = v9;
          v8 = (char *)g_CB_GDbg;
          if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
          {
            v8 = (char *)qword_253FFEED0;
            g_CB_GDbg = qword_253FFEED0;
          }
          v9 = str_11_2[++v7];
        }
        while (v7 != 4);
        ++v3;
        sprintf_sp1d(&g_CB_GDbg, v6);
        sprintf_sp1d(&g_CB_GDbg, v3);
        sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)v1);
        sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(v1 + 4));
        v10 = v5 - v4;
        if (v5 > v4)
        {
          v11 = (unsigned __int8 *)(v1 + 11 + 6 * v4);
          do
          {
            sprintf_sp1d(&g_CB_GDbg, *(v11 - 5));
            sprintf_sp1d(&g_CB_GDbg, *(unsigned __int16 *)(v11 - 3));
            sprintf_sp1d(&g_CB_GDbg, *(v11 - 4));
            sprintf1da(&g_CB_GDbg, *(v11 - 1), v14, 0, 0);
            v12 = *v11;
            v11 += 6;
            sprintf1da(&g_CB_GDbg, v12, v14, 0, 0);
            --v10;
          }
          while (v10);
          v4 = v5;
        }
        v13 = (_BYTE *)g_CB_GDbg++;
        *v13 = 10;
        if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
          g_CB_GDbg = qword_253FFEED0;
        result = GNB_Debug_Flush_Check();
        v5 = *(unsigned __int8 *)(v1 + 4);
      }
      while (v3 != v6);
    }
  }
  return result;
}

uint64_t Debug_Log_AGPS_Ref_Pos(uint64_t result)
{
  uint64_t v1;
  char *v2;
  char v3;
  uint64_t v4;
  unsigned int v5;
  _BYTE *v6;
  unsigned int v7;
  _BYTE *v8;
  char *v9;
  char v10;
  uint64_t v11;
  _BYTE *v12;

  if (g_Enable_GNB_Debug)
  {
    v1 = result;
    v2 = (char *)g_CB_GDbg;
    v3 = 36;
    v4 = 1u;
    do
    {
      g_CB_GDbg = (uint64_t)(v2 + 1);
      *v2 = v3;
      v2 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      {
        v2 = (char *)qword_253FFEED0;
        g_CB_GDbg = qword_253FFEED0;
      }
      v3 = str_13_1[v4++];
    }
    while (v4 != 6);
    sprintf_gR8(&g_CB_GDbg, *(double *)(result + 8));
    sprintf_gR8(&g_CB_GDbg, *(double *)(v1 + 16));
    sprintf_gR8(&g_CB_GDbg, *(double *)(v1 + 24));
    sprintf_gR8(&g_CB_GDbg, *(double *)(v1 + 32));
    v5 = *(__int16 *)(v1 + 40);
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v5);
    v7 = *(unsigned __int8 *)(v1 + 42);
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v7);
    sprintf_gR8(&g_CB_GDbg, *(double *)(v1 + 48));
    sprintf_gR8(&g_CB_GDbg, *(double *)(v1 + 56));
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(v1 + 64));
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(v1 + 68));
    sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)v1);
    v9 = (char *)g_CB_GDbg;
    v10 = 32;
    v11 = 1u;
    do
    {
      g_CB_GDbg = (uint64_t)(v9 + 1);
      *v9 = v10;
      v9 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      {
        v9 = (char *)qword_253FFEED0;
        g_CB_GDbg = qword_253FFEED0;
      }
      v10 = str_14_1[v11++];
    }
    while (v11 != 4);
    sprintf_1X((char **)&g_CB_GDbg, *(_QWORD *)(v1 + 72));
    v12 = (_BYTE *)g_CB_GDbg++;
    *v12 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_AGPS_Acq_Ass(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  char *v8;
  char v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  _BYTE *v13;
  uint64_t v15;

  if (g_Enable_GNB_Debug)
  {
    v1 = result;
    v2 = *(unsigned __int8 *)(result + 4);
    if (*(_BYTE *)(result + 4))
    {
      v3 = 0;
      v4 = 0;
      v5 = (v2 - 1) >> 2;
      if (v2 >= 4)
        v6 = 4;
      else
        v6 = *(unsigned __int8 *)(result + 4);
      v15 = result + 18;
      do
      {
        v7 = 0;
        v8 = (char *)g_CB_GDbg;
        v9 = 36;
        do
        {
          g_CB_GDbg = (uint64_t)(v8 + 1);
          *v8 = v9;
          v8 = (char *)g_CB_GDbg;
          if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
          {
            v8 = (char *)qword_253FFEED0;
            g_CB_GDbg = qword_253FFEED0;
          }
          v9 = str_15_1[++v7];
        }
        while (v7 != 4);
        sprintf_sp1d(&g_CB_GDbg, v5 + 1);
        sprintf_sp1d(&g_CB_GDbg, v3 + 1);
        sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)v1);
        sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(v1 + 4));
        v10 = v6 - v4;
        if (v6 > v4)
        {
          v11 = (unsigned __int8 *)(v15 + 14 * v4);
          do
          {
            sprintf_sp1d(&g_CB_GDbg, *(v11 - 12));
            sprintf_sp1d(&g_CB_GDbg, *((__int16 *)v11 - 5));
            sprintf_sp1d(&g_CB_GDbg, *(v11 - 8));
            sprintf_sp1d(&g_CB_GDbg, *(v11 - 7));
            sprintf_sp1d(&g_CB_GDbg, *((unsigned __int16 *)v11 - 3));
            sprintf_sp1d(&g_CB_GDbg, *(v11 - 4));
            sprintf_sp1d(&g_CB_GDbg, *(v11 - 3));
            sprintf_sp1d(&g_CB_GDbg, *(v11 - 2));
            sprintf_sp1d(&g_CB_GDbg, *(v11 - 1));
            v12 = *v11;
            v11 += 14;
            sprintf_sp1d(&g_CB_GDbg, v12);
            --v10;
          }
          while (v10);
          v4 = v6;
        }
        v13 = (_BYTE *)g_CB_GDbg++;
        *v13 = 10;
        if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
          g_CB_GDbg = qword_253FFEED0;
        result = GNB_Debug_Flush_Check();
        if (v6 + 4 >= *(unsigned __int8 *)(v1 + 4))
          v6 = *(unsigned __int8 *)(v1 + 4);
        else
          v6 += 4;
      }
      while (v3++ != v5);
    }
  }
  return result;
}

unsigned int *Debug_Log_AGNSS_Ref_Time(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  char *v3;
  char v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  _BYTE *v9;
  unsigned int v10;
  _BYTE *v11;
  unsigned int v12;
  _BYTE *v13;
  _BYTE *v14;

  if (g_Enable_GNB_Debug)
  {
    v1 = result;
    v2 = 0;
    v3 = (char *)g_CB_GDbg;
    v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *v3 = v4;
      v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      {
        v3 = (char *)qword_253FFEED0;
        g_CB_GDbg = qword_253FFEED0;
      }
      v4 = str_16_0[++v2];
    }
    while (v2 != 4);
    v5 = *result;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v5);
    v6 = v1[1];
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v6);
    v8 = *((unsigned __int16 *)v1 + 4);
    v9 = (_BYTE *)g_CB_GDbg++;
    *v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v8);
    v10 = v1[3];
    v11 = (_BYTE *)g_CB_GDbg++;
    *v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v10);
    v12 = *((unsigned __int16 *)v1 + 8);
    v13 = (_BYTE *)g_CB_GDbg++;
    *v13 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v12);
    v14 = (_BYTE *)g_CB_GDbg++;
    *v14 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return (unsigned int *)GNB_Debug_Flush_Check();
  }
  return result;
}

unsigned int *Debug_Log_AGNSS_Time_Model(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  char *v3;
  char v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  _BYTE *v9;
  unsigned int v10;
  _BYTE *v11;
  unsigned int v12;
  _BYTE *v13;
  unsigned int v14;
  _BYTE *v15;
  unsigned int v16;
  _BYTE *v17;
  unsigned int v18;
  _BYTE *v19;
  _BYTE *v20;

  if (g_Enable_GNB_Debug)
  {
    v1 = result;
    v2 = 0;
    v3 = (char *)g_CB_GDbg;
    v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *v3 = v4;
      v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      {
        v3 = (char *)qword_253FFEED0;
        g_CB_GDbg = qword_253FFEED0;
      }
      v4 = str_18_0[++v2];
    }
    while (v2 != 4);
    v5 = *result;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v5);
    v6 = v1[1];
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v6);
    v8 = *((unsigned __int16 *)v1 + 4);
    v9 = (_BYTE *)g_CB_GDbg++;
    *v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v8);
    v10 = v1[3];
    v11 = (_BYTE *)g_CB_GDbg++;
    *v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v10);
    v12 = v1[4];
    v13 = (_BYTE *)g_CB_GDbg++;
    *v13 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v12);
    v14 = *((char *)v1 + 20);
    v15 = (_BYTE *)g_CB_GDbg++;
    *v15 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v14);
    v16 = *((char *)v1 + 21);
    v17 = (_BYTE *)g_CB_GDbg++;
    *v17 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v16);
    v18 = v1[6];
    v19 = (_BYTE *)g_CB_GDbg++;
    *v19 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v18);
    sprintf_sp1d(&g_CB_GDbg, *((unsigned __int8 *)v1 + 28));
    v20 = (_BYTE *)g_CB_GDbg++;
    *v20 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return (unsigned int *)GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_AGNSS_Acq_Ass(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  char *v8;
  char v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  _BYTE *v13;
  uint64_t v15;

  if (g_Enable_GNB_Debug)
  {
    v1 = result;
    v2 = *(unsigned __int8 *)(result + 13);
    if (*(_BYTE *)(result + 13))
    {
      v3 = 0;
      v4 = 0;
      v5 = (v2 - 1) >> 2;
      if (v2 >= 4)
        v6 = 4;
      else
        v6 = *(unsigned __int8 *)(result + 13);
      v15 = result + 32;
      do
      {
        v7 = 0;
        v8 = (char *)g_CB_GDbg;
        v9 = 36;
        do
        {
          g_CB_GDbg = (uint64_t)(v8 + 1);
          *v8 = v9;
          v8 = (char *)g_CB_GDbg;
          if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
          {
            v8 = (char *)qword_253FFEED0;
            g_CB_GDbg = qword_253FFEED0;
          }
          v9 = str_19_0[++v7];
        }
        while (v7 != 4);
        sprintf_sp1d(&g_CB_GDbg, v5 + 1);
        sprintf_sp1d(&g_CB_GDbg, v3 + 1);
        sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)v1);
        sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(v1 + 4));
        sprintf_sp1d(&g_CB_GDbg, *(_DWORD *)(v1 + 8));
        sprintf_sp1d(&g_CB_GDbg, *(unsigned __int8 *)(v1 + 13));
        v10 = v6 - v4;
        if (v6 > v4)
        {
          v11 = (unsigned __int8 *)(v15 + 20 * v4);
          do
          {
            sprintf_sp1d(&g_CB_GDbg, *((_DWORD *)v11 - 4));
            sprintf_sp1d(&g_CB_GDbg, *(v11 - 12));
            sprintf_sp1d(&g_CB_GDbg, *((__int16 *)v11 - 5));
            sprintf_sp1d(&g_CB_GDbg, *(v11 - 8));
            sprintf_sp1d(&g_CB_GDbg, *(v11 - 7));
            sprintf_sp1d(&g_CB_GDbg, *((unsigned __int16 *)v11 - 3));
            sprintf_sp1d(&g_CB_GDbg, *(v11 - 4));
            sprintf_sp1d(&g_CB_GDbg, *(v11 - 3));
            sprintf_sp1d(&g_CB_GDbg, *((unsigned __int16 *)v11 - 1));
            v12 = *v11;
            v11 += 20;
            sprintf_sp1d(&g_CB_GDbg, v12);
            --v10;
          }
          while (v10);
          v4 = v6;
        }
        v13 = (_BYTE *)g_CB_GDbg++;
        *v13 = 10;
        if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
          g_CB_GDbg = qword_253FFEED0;
        result = GNB_Debug_Flush_Check();
        if (v6 + 4 >= *(unsigned __int8 *)(v1 + 13))
          v6 = *(unsigned __int8 *)(v1 + 13);
        else
          v6 += 4;
      }
      while (v3++ != v5);
    }
  }
  return result;
}

uint64_t Debug_Log_AGNSS_Bad_SV_List(uint64_t result, int *a2, unsigned __int8 *a3)
{
  unsigned int v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  int v12;
  int v13;
  char v14;
  unsigned int v15;
  _BYTE *v16;
  _BYTE v17[15];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (g_Enable_GNB_Debug)
  {
    v5 = result;
    v6 = 0;
    v7 = (char *)g_CB_GDbg;
    v8 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v7 + 1);
      *v7 = v8;
      v7 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      {
        v7 = (char *)qword_253FFEED0;
        g_CB_GDbg = qword_253FFEED0;
      }
      v8 = str_20_0[++v6];
    }
    while (v6 != 4);
    sprintf_sp1d(&g_CB_GDbg, result);
    if (v5)
    {
      v9 = v5;
      do
      {
        v10 = (_BYTE *)g_CB_GDbg++;
        *v10 = 32;
        v11 = (char *)g_CB_GDbg;
        if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
        {
          v11 = (char *)qword_253FFEED0;
          g_CB_GDbg = qword_253FFEED0;
        }
        v12 = *a2;
        if (*a2 > 15)
        {
          switch(v12)
          {
            case 16:
              v14 = 81;
              break;
            case 32:
              v14 = 82;
              break;
            case 64:
              v14 = 66;
              break;
            default:
LABEL_21:
              EvCrt_Illegal_Default("Debug_Log_AGNSS_Bad_SV_List", 0x6E8u);
              v11 = (char *)g_CB_GDbg;
              v14 = 88;
              break;
          }
        }
        else
        {
          v13 = v12 - 1;
          v14 = 71;
          switch(v13)
          {
            case 0:
              break;
            case 1:
              v14 = 69;
              break;
            case 3:
              v14 = 83;
              break;
            case 7:
              v14 = 77;
              break;
            default:
              goto LABEL_21;
          }
        }
        g_CB_GDbg = (uint64_t)(v11 + 1);
        *v11 = v14;
        if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
          g_CB_GDbg = qword_253FFEED0;
        v15 = *a3++;
        sprintf1da(&g_CB_GDbg, v15, v17, 0, 0);
        ++a2;
        --v9;
      }
      while (v9);
    }
    v16 = (_BYTE *)g_CB_GDbg++;
    *v16 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_AGNSS_Not_Brd_SV_List(uint64_t result, int *a2, unsigned __int8 *a3)
{
  unsigned int v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  int v12;
  int v13;
  char v14;
  unsigned int v15;
  _BYTE *v16;
  _BYTE v17[15];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (g_Enable_GNB_Debug)
  {
    v5 = result;
    v6 = 0;
    v7 = (char *)g_CB_GDbg;
    v8 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v7 + 1);
      *v7 = v8;
      v7 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      {
        v7 = (char *)qword_253FFEED0;
        g_CB_GDbg = qword_253FFEED0;
      }
      v8 = str_21_0[++v6];
    }
    while (v6 != 4);
    sprintf_sp1d(&g_CB_GDbg, result);
    if (v5)
    {
      v9 = v5;
      do
      {
        v10 = (_BYTE *)g_CB_GDbg++;
        *v10 = 32;
        v11 = (char *)g_CB_GDbg;
        if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
        {
          v11 = (char *)qword_253FFEED0;
          g_CB_GDbg = qword_253FFEED0;
        }
        v12 = *a2;
        if (*a2 > 15)
        {
          switch(v12)
          {
            case 16:
              v14 = 81;
              break;
            case 32:
              v14 = 82;
              break;
            case 64:
              v14 = 66;
              break;
            default:
LABEL_21:
              EvCrt_Illegal_Default("Debug_Log_AGNSS_Not_Brd_SV_List", 0x71Au);
              v11 = (char *)g_CB_GDbg;
              v14 = 88;
              break;
          }
        }
        else
        {
          v13 = v12 - 1;
          v14 = 71;
          switch(v13)
          {
            case 0:
              break;
            case 1:
              v14 = 69;
              break;
            case 3:
              v14 = 83;
              break;
            case 7:
              v14 = 77;
              break;
            default:
              goto LABEL_21;
          }
        }
        g_CB_GDbg = (uint64_t)(v11 + 1);
        *v11 = v14;
        if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
          g_CB_GDbg = qword_253FFEED0;
        v15 = *a3++;
        sprintf1da(&g_CB_GDbg, v15, v17, 0, 0);
        ++a2;
        --v9;
      }
      while (v9);
    }
    v16 = (_BYTE *)g_CB_GDbg++;
    *v16 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_GPS_RTI_Bad_SV_List(uint64_t result, _DWORD *a2, unsigned __int8 *a3)
{
  unsigned int v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char v12;
  unsigned int v13;
  _BYTE *v14;
  _BYTE v15[15];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (g_Enable_GNB_Debug)
  {
    v5 = result;
    v6 = 0;
    v7 = (char *)g_CB_GDbg;
    v8 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v7 + 1);
      *v7 = v8;
      v7 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      {
        v7 = (char *)qword_253FFEED0;
        g_CB_GDbg = qword_253FFEED0;
      }
      v8 = str_22_0[++v6];
    }
    while (v6 != 4);
    sprintf_sp1d(&g_CB_GDbg, result);
    if (v5)
    {
      v9 = v5;
      do
      {
        v10 = (_BYTE *)g_CB_GDbg++;
        *v10 = 32;
        v11 = (char *)g_CB_GDbg;
        if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
        {
          v11 = (char *)qword_253FFEED0;
          g_CB_GDbg = qword_253FFEED0;
        }
        v12 = 71;
        switch(*a2)
        {
          case 1:
            break;
          case 2:
            v12 = 82;
            break;
          case 4:
            v12 = 81;
            break;
          case 8:
            v12 = 83;
            break;
          default:
            EvCrt_Illegal_Default("Debug_Log_GPS_RTI_Bad_SV_List", 0x74Bu);
            v11 = (char *)g_CB_GDbg;
            v12 = 88;
            break;
        }
        g_CB_GDbg = (uint64_t)(v11 + 1);
        *v11 = v12;
        if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
          g_CB_GDbg = qword_253FFEED0;
        v13 = *a3++;
        sprintf1da(&g_CB_GDbg, v13, v15, 0, 0);
        ++a2;
        --v9;
      }
      while (v9);
    }
    v14 = (_BYTE *)g_CB_GDbg++;
    *v14 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_GPS_EE_Start_Time(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  char *v4;
  char v5;
  _BYTE *v6;
  _BYTE *v7;

  if (g_Enable_GNB_Debug)
  {
    v3 = 0;
    v4 = (char *)g_CB_GDbg;
    v5 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v4 + 1);
      *v4 = v5;
      v4 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      {
        v4 = (char *)qword_253FFEED0;
        g_CB_GDbg = qword_253FFEED0;
      }
      v5 = str_23_1[++v3];
    }
    while (v3 != 4);
    g_CB_GDbg = (uint64_t)(v4 + 1);
    *v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, result);
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, a2);
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_AGLON_ChanNum(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  char *v4;
  char v5;
  _BYTE *v6;
  _BYTE *v7;

  if (g_Enable_GNB_Debug)
  {
    v3 = 0;
    v4 = (char *)g_CB_GDbg;
    v5 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v4 + 1);
      *v4 = v5;
      v4 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      {
        v4 = (char *)qword_253FFEED0;
        g_CB_GDbg = qword_253FFEED0;
      }
      v5 = str_24[++v3];
    }
    while (v3 != 4);
    g_CB_GDbg = (uint64_t)(v4 + 1);
    *v4 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, result);
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, a2);
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

unsigned int *Debug_Log_ExtA_DMS(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  char *v3;
  char v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  _BYTE *v9;
  _BYTE *v10;

  if (g_Enable_GNB_Debug)
  {
    v1 = result;
    v2 = 0;
    v3 = (char *)g_CB_GDbg;
    v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *v3 = v4;
      v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      {
        v3 = (char *)qword_253FFEED0;
        g_CB_GDbg = qword_253FFEED0;
      }
      v4 = str_25_0[++v2];
    }
    while (v2 != 4);
    v5 = *result;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v5);
    v6 = v1[1];
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v6);
    v8 = v1[2];
    v9 = (_BYTE *)g_CB_GDbg++;
    *v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v8);
    v10 = (_BYTE *)g_CB_GDbg++;
    *v10 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return (unsigned int *)GNB_Debug_Flush_Check();
  }
  return result;
}

unsigned int *Debug_Log_ExtA_UAC(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  char *v3;
  char v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  _BYTE *v9;
  _BYTE *v10;

  if (g_Enable_GNB_Debug)
  {
    v1 = result;
    v2 = 0;
    v3 = (char *)g_CB_GDbg;
    v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *v3 = v4;
      v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      {
        v3 = (char *)qword_253FFEED0;
        g_CB_GDbg = qword_253FFEED0;
      }
      v4 = str_26_0[++v2];
    }
    while (v2 != 4);
    v5 = *result;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v5);
    v6 = v1[1];
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v6);
    v8 = v1[2];
    v9 = (_BYTE *)g_CB_GDbg++;
    *v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v8);
    v10 = (_BYTE *)g_CB_GDbg++;
    *v10 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return (unsigned int *)GNB_Debug_Flush_Check();
  }
  return result;
}

unsigned int *Debug_Log_ExtA_FIV(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  char *v3;
  char v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  _BYTE *v9;
  _BYTE *v10;

  if (g_Enable_GNB_Debug)
  {
    v1 = result;
    v2 = 0;
    v3 = (char *)g_CB_GDbg;
    v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *v3 = v4;
      v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      {
        v3 = (char *)qword_253FFEED0;
        g_CB_GDbg = qword_253FFEED0;
      }
      v4 = str_27_0[++v2];
    }
    while (v2 != 4);
    v5 = *result;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v5);
    v6 = v1[1];
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v6);
    v8 = v1[2];
    v9 = (_BYTE *)g_CB_GDbg++;
    *v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v8);
    v10 = (_BYTE *)g_CB_GDbg++;
    *v10 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return (unsigned int *)GNB_Debug_Flush_Check();
  }
  return result;
}

uint64_t Debug_Log_ExtA_SES(uint64_t result)
{
  uint64_t v1;
  char *v2;
  char v3;
  _BYTE *v4;

  if (g_Enable_GNB_Debug)
  {
    v1 = 0;
    v2 = (char *)g_CB_GDbg;
    v3 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v2 + 1);
      *v2 = v3;
      v2 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      {
        v2 = (char *)qword_253FFEED0;
        g_CB_GDbg = qword_253FFEED0;
      }
      v3 = str_28_1[++v1];
    }
    while (v1 != 4);
    g_CB_GDbg = (uint64_t)(v2 + 1);
    *v2 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, result);
    v4 = (_BYTE *)g_CB_GDbg++;
    *v4 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return GNB_Debug_Flush_Check();
  }
  return result;
}

unsigned int *Debug_Log_ExtA_Alt(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  char *v3;
  char v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  if (g_Enable_GNB_Debug)
  {
    v1 = result;
    v2 = 0;
    v3 = (char *)g_CB_GDbg;
    v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *v3 = v4;
      v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      {
        v3 = (char *)qword_253FFEED0;
        g_CB_GDbg = qword_253FFEED0;
      }
      v4 = str_29_2[++v2];
    }
    while (v2 != 4);
    v5 = *result;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v5);
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 1));
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 2));
    v6 = v1[6];
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v6);
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return (unsigned int *)GNB_Debug_Flush_Check();
  }
  return result;
}

unsigned int *Debug_Log_ExtA_MapV(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  char *v3;
  char v4;
  unsigned int v5;
  uint64_t i;
  _BYTE *v7;
  unsigned int v8;
  _BYTE *v9;
  unsigned int v10;
  _BYTE *v11;
  unsigned int v12;
  _BYTE *v13;
  unsigned int v14;
  _BYTE *v15;
  unsigned int v16;
  _BYTE *v17;
  unsigned int v18;
  _BYTE *v19;
  _BYTE *v20;

  if (g_Enable_GNB_Debug)
  {
    v1 = result;
    v2 = 0;
    v3 = (char *)g_CB_GDbg;
    v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *v3 = v4;
      v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      {
        v3 = (char *)qword_253FFEED0;
        g_CB_GDbg = qword_253FFEED0;
      }
      v4 = str_30_2[++v2];
    }
    while (v2 != 4);
    v5 = *result;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v5);
    for (i = 2; i != 8; i += 2)
    {
      v7 = (_BYTE *)g_CB_GDbg++;
      *v7 = 32;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
        g_CB_GDbg = qword_253FFEED0;
      sprintf_11f9(&g_CB_GDbg, *(double *)&v1[i]);
    }
    v8 = *((unsigned __int8 *)v1 + 32);
    v9 = (_BYTE *)g_CB_GDbg++;
    *v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v8);
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 5));
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 6));
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 7));
    v10 = *((unsigned __int8 *)v1 + 64);
    v11 = (_BYTE *)g_CB_GDbg++;
    *v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v10);
    v12 = *((unsigned __int8 *)v1 + 65);
    v13 = (_BYTE *)g_CB_GDbg++;
    *v13 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v12);
    v14 = *((unsigned __int8 *)v1 + 66);
    v15 = (_BYTE *)g_CB_GDbg++;
    *v15 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v14);
    v16 = *((unsigned __int8 *)v1 + 67);
    v17 = (_BYTE *)g_CB_GDbg++;
    *v17 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v16);
    v18 = *((unsigned __int8 *)v1 + 68);
    v19 = (_BYTE *)g_CB_GDbg++;
    *v19 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v18);
    v20 = (_BYTE *)g_CB_GDbg++;
    *v20 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return (unsigned int *)GNB_Debug_Flush_Check();
  }
  return result;
}

unsigned int *Debug_Log_ExtA_SpdC(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  char *v3;
  char v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  if (g_Enable_GNB_Debug)
  {
    v1 = result;
    v2 = 0;
    v3 = (char *)g_CB_GDbg;
    v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *v3 = v4;
      v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      {
        v3 = (char *)qword_253FFEED0;
        g_CB_GDbg = qword_253FFEED0;
      }
      v4 = str_31_1[++v2];
    }
    while (v2 != 4);
    v5 = *result;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v5);
    v6 = v1[1];
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v6);
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 1));
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 2));
    v8 = (_BYTE *)g_CB_GDbg++;
    *v8 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return (unsigned int *)GNB_Debug_Flush_Check();
  }
  return result;
}

unsigned int *Debug_Log_ExtA_AT_Vel(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  char *v3;
  char v4;
  unsigned int v5;
  _BYTE *v6;

  if (g_Enable_GNB_Debug)
  {
    v1 = result;
    v2 = 0;
    v3 = (char *)g_CB_GDbg;
    v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *v3 = v4;
      v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      {
        v3 = (char *)qword_253FFEED0;
        g_CB_GDbg = qword_253FFEED0;
      }
      v4 = str_32_2[++v2];
    }
    while (v2 != 4);
    v5 = *result;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v5);
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 1));
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 2));
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return (unsigned int *)GNB_Debug_Flush_Check();
  }
  return result;
}

unsigned int *Debug_Log_ExtA_V_Vel(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  char *v3;
  char v4;
  unsigned int v5;
  _BYTE *v6;

  if (g_Enable_GNB_Debug)
  {
    v1 = result;
    v2 = 0;
    v3 = (char *)g_CB_GDbg;
    v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *v3 = v4;
      v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      {
        v3 = (char *)qword_253FFEED0;
        g_CB_GDbg = qword_253FFEED0;
      }
      v4 = str_33_0[++v2];
    }
    while (v2 != 4);
    v5 = *result;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v5);
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 1));
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 2));
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return (unsigned int *)GNB_Debug_Flush_Check();
  }
  return result;
}

unsigned int *Debug_Log_ExtA_Heading(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  char *v3;
  char v4;
  unsigned int v5;
  _BYTE *v6;

  if (g_Enable_GNB_Debug)
  {
    v1 = result;
    v2 = 0;
    v3 = (char *)g_CB_GDbg;
    v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *v3 = v4;
      v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      {
        v3 = (char *)qword_253FFEED0;
        g_CB_GDbg = qword_253FFEED0;
      }
      v4 = str_34_0[++v2];
    }
    while (v2 != 4);
    v5 = *result;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v5);
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 1));
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 2));
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return (unsigned int *)GNB_Debug_Flush_Check();
  }
  return result;
}

unsigned int *Debug_Log_ExtA_Tunnel_End_Point(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  char *v3;
  char v4;
  unsigned int v5;
  _BYTE *v6;
  _BYTE *v7;
  unsigned int v8;
  _BYTE *v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  if (g_Enable_GNB_Debug)
  {
    v1 = result;
    v2 = 0;
    v3 = (char *)g_CB_GDbg;
    v4 = 36;
    do
    {
      g_CB_GDbg = (uint64_t)(v3 + 1);
      *v3 = v4;
      v3 = (char *)g_CB_GDbg;
      if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      {
        v3 = (char *)qword_253FFEED0;
        g_CB_GDbg = qword_253FFEED0;
      }
      v4 = str_35_1[++v2];
    }
    while (v2 != 4);
    v5 = *result;
    g_CB_GDbg = (uint64_t)(v3 + 1);
    *v3 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v5);
    v6 = (_BYTE *)g_CB_GDbg++;
    *v6 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_11f9(&g_CB_GDbg, *((double *)v1 + 1));
    v7 = (_BYTE *)g_CB_GDbg++;
    *v7 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_11f9(&g_CB_GDbg, *((double *)v1 + 2));
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 3));
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 4));
    v8 = *((__int16 *)v1 + 20);
    v9 = (_BYTE *)g_CB_GDbg++;
    *v9 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v8);
    v10 = *((unsigned __int8 *)v1 + 42);
    v11 = (_BYTE *)g_CB_GDbg++;
    *v11 = 32;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    sprintf_2d(&g_CB_GDbg, v10);
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 6));
    sprintf_gR8(&g_CB_GDbg, *((double *)v1 + 7));
    v12 = (_BYTE *)g_CB_GDbg++;
    *v12 = 10;
    if (g_CB_GDbg >= (unint64_t)qword_253FFEED8)
      g_CB_GDbg = qword_253FFEED0;
    return (unsigned int *)GNB_Debug_Flush_Check();
  }
  return result;
}

void SB_SBAS_PrePos(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64x2_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  int *v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t i;
  unsigned int v47;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v55;
  int v56;
  _OWORD v57[2];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _OWORD v62[2];
  int v63;
  char v64;
  int v65[4];
  _BYTE v66[48];
  _BYTE v67[48];
  _BYTE v68[40];
  uint64_t v69;

  v9 = a7;
  v69 = *MEMORY[0x24BDAC8D0];
  v10 = (unsigned __int8 *)(a6 + 6355);
  if (*(_BYTE *)(a3 + 34))
  {
    v11 = a1;
    if (*(_DWORD *)(a2 + 176) == *(_DWORD *)(a3 + 1064))
      *(_BYTE *)(a1 + 48) = 0;
    v56 = (int)*(double *)(a1 + 16) + 604800 * *(__int16 *)(a1 + 6);
    v12 = (unsigned __int8 *)(a6 + 6232);
    *(_OWORD *)(a6 + 6232) = 0u;
    *(_OWORD *)(a6 + 6248) = 0u;
    *(_OWORD *)(a6 + 6264) = 0u;
    *(_OWORD *)(a6 + 6280) = 0u;
    *(_OWORD *)(a6 + 6296) = 0u;
    *(_OWORD *)(a6 + 6312) = 0u;
    *(_OWORD *)(a6 + 6328) = 0u;
    *(_OWORD *)(a6 + 6343) = 0u;
    memset(v68, 0, 39);
    memset(v67, 0, 39);
    memset(v66, 0, 39);
    v13 = 6;
    do
    {
      *(_OWORD *)(a6 + 3737) = 0uLL;
      *(_OWORD *)(a6 + 3708) = 0uLL;
      *(_OWORD *)(a6 + 3724) = 0uLL;
      --v13;
    }
    while (v13);
    v55 = (unsigned __int8 *)(a6 + 6356);
    v14 = (unsigned __int8 *)(a6 + 6238);
    *(_QWORD *)(a6 + 4166) = -1;
    *(_QWORD *)&v15 = -1;
    *((_QWORD *)&v15 + 1) = -1;
    *(_OWORD *)(a6 + 4151) = v15;
    *(_OWORD *)(a6 + 4135) = v15;
    v51 = a1 + 24;
    v50 = a2 + 104;
    v16 = a5 + 26688;
    v17 = 10;
    do
    {
      if (*v10 > 5u)
        break;
      if (*(_DWORD *)(v16 + 184) == 1)
      {
        v18 = *(unsigned __int8 *)(v16 + 180);
        v19 = (v18 - 120);
        if (v19 <= 0x26)
        {
          v63 = 0;
          v64 = 0;
          memset(v57, 0, sizeof(v57));
          v58 = 0u;
          v59 = 0u;
          v60 = 0u;
          v61 = 0u;
          memset(v62, 0, 30);
          if (Comp_CurrState(0x93A80u, *(__int16 *)(v11 + 6), v16, (uint64_t)v57, *(double *)(v11 + 16), 42290000.0))
          {
            v20 = v9;
            v21 = v18 + 19;
            DWORD2(v62[1]) = 1;
            v22 = v20;
            v23 = (_BYTE *)(v20 + v18 + 19);
            v24 = *v23;
            if (v24 == 157 || (_DWORD)v19 == *(unsigned __int8 *)(v11 + 48))
            {
              Comp_AzEl(v51, v50, (uint64_t)v57, v23, (_WORD *)(v22 + 2 * v21 + 178), (_QWORD *)(v22 + 8 * v21 + 536), (_QWORD *)(v22 + 8 * v21 + 1960));
              LOBYTE(v24) = *(_BYTE *)(v22 + v21);
              v11 = a1;
            }
            v25 = v24;
            if ((char)v24 < 1)
            {
              ++v10[3];
              v67[v19] = 1;
              v9 = v22;
            }
            else
            {
              v26 = v22 + 2 * v21;
              v9 = v22;
              Comp_AA((uint64_t)v57, v25, *(__int16 *)(v26 + 178), v11, a2, a6, v18);
              v68[v19] = 1;
            }
          }
          else
          {
            EvLog_d("SBAS_PrePos: SBAS ephemeris timed-out: ", *(unsigned __int8 *)(v16 + 180));
            *(_DWORD *)(v16 + 184) = 0;
            *(_BYTE *)(v16 + 180) = 0;
            *(_DWORD *)(v16 + 176) = 0;
          }
        }
      }
      v16 += 192;
      --v17;
    }
    while (v17);
    v27 = 0;
    v28 = 0;
    v29 = 456;
    do
    {
      if (*v10 > 5u)
        break;
      if (!v68[v28] && !v67[v28] && Core_Load_SBAS_Apx((v28 + 120), &v56, v65))
      {
        v64 = 0;
        *(_QWORD *)&v57[0] = 0;
        v58 = 0u;
        v59 = 0u;
        v60 = 0u;
        v61 = 0u;
        memset(v62, 0, 30);
        v30.i64[0] = v65[0];
        v30.i64[1] = v65[1];
        *(float64x2_t *)((char *)v57 + 8) = vcvtq_f64_s64(v30);
        v63 = 0;
        DWORD2(v62[1]) = 2;
        *((double *)&v57[1] + 1) = (double)v65[2];
        v31 = *(unsigned __int8 *)(v9 + v28 + 139);
        if (v31 == 157 || v28 == *(unsigned __int8 *)(a1 + 48))
        {
          Comp_AzEl(v51, v50, (uint64_t)v57, (_BYTE *)(v9 + v28 + 139), (_WORD *)(v9 + v29), (_QWORD *)(v9 + v27 + 1648), (_QWORD *)(v9 + v27 + 3072));
          LOBYTE(v31) = *(_BYTE *)(v9 + v28 + 139);
        }
        if ((char)v31 < 1)
        {
          v67[v28] = 1;
          ++v10[3];
        }
        else
        {
          Comp_AA((uint64_t)v57, v31, *(__int16 *)(v9 + 2 * v28 + 456), a1, a2, a6, (v28 + 120));
          v68[v28] = 1;
        }
      }
      ++v28;
      v27 += 8;
      v29 += 2;
    }
    while (v28 != 39);
    v32 = 0;
    v33 = a3 + 392;
    do
    {
      if (!*(_BYTE *)(a9 + 33744 + v32) || *(_BYTE *)(v33 + v32))
      {
        if (*(_BYTE *)(v33 + v32 + 227))
        {
          ++v10[3];
          v34 = v67;
        }
        else
        {
          *(_BYTE *)(a6 + v10[2]++ + 6277) = v32 + 120;
          v34 = v66;
        }
        v34[v32] = 1;
      }
      if (v67[v32] || v66[v32])
      {
        SB_SBAS_Remove_SV_in_List(v32 + 120, v10, v12, 6u);
        SB_SBAS_Remove_SV_in_List(v32 + 120, v55, v14, 0x27u);
      }
      ++v32;
    }
    while (v32 != 39);
    if (*(unsigned __int8 *)(a3 + 47) < 3u)
    {
      if ((*(_DWORD *)(a2 + 176) - *(_DWORD *)(a3 + 1064)) >> 6 >= 0x753)
      {
        for (i = 0; i != 39; ++i)
        {
          if (!v68[i] && !v67[i] && !v66[i])
            *(_BYTE *)(a6 + (*v55)++ + 6238) = i + 120;
        }
      }
      else
      {
        v41 = *v10;
        v42 = v10[1];
        if ((v42 + v41) <= 0x13)
        {
          v43 = 0;
          do
          {
            if (v42 <= 0x26u)
            {
              v44 = SBAS_PRIORITY[v43];
              v45 = (v44 - 120);
              if (!v68[v45] && !v67[v45] && !v66[v45])
              {
                *(_BYTE *)(a6 + v42 + 6238) = v44;
                LOBYTE(v42) = v10[1] + 1;
                v10[1] = v42;
                v41 = *v10;
              }
            }
            if (v43 > 0x12)
              break;
            ++v43;
          }
          while (v41 + v42 < 0x14);
        }
      }
    }
    else
    {
      v35 = 0;
      v36 = 0;
      *v55 = 0;
      v37 = a8 + 2720;
      do
      {
        v38 = (int *)(v37 + v35);
        if (*(_BYTE *)(v37 + v35) == 6)
        {
          v39 = *v38;
          if (Is_Legal(*v38))
          {
            if ((int)GM_Gen_SV_Meas_QI(v37 + v35) >= 11)
            {
              v40 = BYTE2(v39) - 120;
              if (BYTE2(v39) >= 0x78u && v36 <= 0x26u && !v68[v40] && !v67[v40] && !v66[v40])
              {
                *(_BYTE *)(a6 + v36 + 6238) = BYTE2(v39);
                v36 = *v55 + 1;
                *v55 = v36;
              }
            }
          }
        }
        v35 += 36;
      }
      while (v35 != 1728);
    }
    v47 = (*(_BYTE *)(a1 + 48) + 1);
    if (v47 >= 0x27)
      LOBYTE(v47) = 39;
    *(_BYTE *)(a1 + 48) = v47;
  }
  else
  {
    *(_DWORD *)v10 = 0;
    *(_WORD *)(a7 + 147) = -25187;
    *(_QWORD *)(a7 + 139) = 0x9D9D9D9D9D9D9D9DLL;
    memset_pattern16((void *)(a7 + 456), &unk_21E7FA080, 0x14uLL);
  }
}

void Comp_AA(uint64_t a1, char a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  int v13;
  _BYTE *v14;
  unsigned int v15;
  double v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  double v32;
  _DWORD *v33;
  uint64_t v34;
  unsigned int v35;
  char v36;
  uint64_t v37;
  double v38[3];
  float64x2_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v13 = *(_DWORD *)(a1 + 120);
  v14 = (_BYTE *)(a6 + 6355);
  v15 = *(unsigned __int8 *)(a6 + 6355) + 76;
  v16 = Comp_SVrange_Sag_Corr(&v39, v38, (float64x2_t *)(a4 + 24), (float64x2_t *)(a1 + 8));
  v17 = 0;
  v18 = (int)((*(double *)(a5 + 64) - *(double *)(a1 + 56)) * 299792458.0);
  do
  {
    v38[v17 + 2] = *(double *)(a1 + 48 + 8 * v17) - *(double *)(a5 + 16 + 8 * v17);
    v19 = v17 + 3;
    --v17;
  }
  while (v19 > 1);
  v20 = 0;
  v21 = (int)v16;
  v22 = 0.0;
  do
  {
    v22 = v22 + v39.f64[v20] * v38[v20];
    ++v20;
  }
  while (v20 != 3);
  v23 = a6 + 48 * v15;
  v24 = (v22 + (*(double *)(a5 + 72) - *(double *)(a1 + 64)) * 299792458.0) / -0.190293673;
  v25 = (double)(v18 + v21) / 299792458.0;
  v26 = *(double *)(a5 + 96) - v25;
  *(_DWORD *)(v23 + 60) = *(_DWORD *)(a5 + 176);
  *(_BYTE *)(v23 + 64) = 1;
  *(_BYTE *)(v23 + 70) = a7;
  *(_BYTE *)(v23 + 68) = 6;
  *(_BYTE *)(v23 + 72) = v13 == 1;
  *(_BYTE *)(v23 + 73) = v13 == 2;
  *(_WORD *)(v23 + 74) = 256;
  *(_WORD *)(v23 + 76) = (int)(v25 * 2000.0 + 0.5);
  *(_DWORD *)(v23 + 96) = (int)(v25 * 1000000000.0);
  *(_DWORD *)(v23 + 78) = 200;
  v27 = -0.5;
  if (v24 > 0.0)
    v27 = 0.5;
  v28 = v24 + v27;
  v29 = (int)v28;
  if (v28 < -2147483650.0)
    LOWORD(v29) = 0;
  if (v28 <= 2147483650.0)
    v30 = v29;
  else
    v30 = -1;
  v31 = a6 + 48 * v15;
  v32 = v26 / 1.5;
  if (v26 / 1.5 <= 0.0)
    v32 = v26 / 1.5 + -1.0;
  *(_DWORD *)(v31 + 88) = (int)v32;
  v33 = (_DWORD *)(v31 + 88);
  *((_WORD *)v33 - 3) = v30;
  *(v33 - 1) = 33562616;
  v33[1] = (int)((v26 + (double)(int)v32 * -1.5) * 1023000.0);
  if ((int)v32 < 0)
    *v33 = (int)v32 + 403200;
  v34 = a6 + 48 * v15;
  *(_WORD *)(v34 + 100) = 0;
  *(_BYTE *)(v34 + 102) = -1;
  *(_BYTE *)(v34 + 103) = a2;
  v35 = a3 >> 1;
  if (a3 >= 0x169)
    LOBYTE(v35) = -1;
  *(_BYTE *)(v34 + 104) = v35;
  if (a7 >= 0x78)
  {
    if (v13 == 1)
      v36 = 1;
    else
      v36 = 2;
    *(_BYTE *)(a6 + a7 - 120 + 6316) += v36;
    v37 = *v14;
    *(_BYTE *)(a6 + a7 + 19 + 3996) = v37 + 76;
    *(_BYTE *)(a6 + v37 + 6232) = a7;
    ++*v14;
  }
}

uint64_t SB_SBAS_Remove_SV_in_List(uint64_t result, unsigned __int8 *a2, unsigned __int8 *a3, unsigned int a4)
{
  unsigned int v4;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 v11;

  if (a2 && a3)
  {
    v4 = *a2;
    if (*a2 && v4 <= a4)
    {
      v6 = 0;
      v7 = 0;
      do
      {
        while (a3[v6] == (_DWORD)result)
        {
          a3[v6] = 0;
          v8 = *a2;
          ++v6;
          v7 = 1;
          LOBYTE(v4) = *a2;
          if (v6 >= v8)
            goto LABEL_14;
        }
        ++v6;
      }
      while (v6 < v4);
      LOBYTE(v8) = v4;
      if ((v7 & 1) == 0)
        return result;
LABEL_14:
      if ((_BYTE)v8)
      {
        v9 = 0;
        LODWORD(v10) = 0;
        v11 = v8;
        do
        {
          if (a3[v9])
          {
            a3[v10] = a3[v9];
            LODWORD(v10) = v10 + 1;
            v11 = *a2;
          }
          ++v9;
        }
        while (v9 < v11);
      }
      else
      {
        v11 = 0;
        LODWORD(v10) = 0;
      }
      if (v10 < v11)
      {
        v10 = v10;
        do
        {
          if (a3[v10])
          {
            a3[v10] = 0;
            v11 = *a2;
          }
          ++v10;
        }
        while (v10 < v11);
      }
      *a2 = v11 - 1;
    }
  }
  return result;
}

uint64_t asn1PE_Status(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;

  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    v7 = *(unsigned __int8 *)(a1 + 16);
  }
  else
  {
    v8 = *a2;
    if (v8 >= 3)
    {
      v4 = 4;
      *(_BYTE *)(a1 + 16) = 4;
      SuplAsn1Logger::TraceError(4u, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
    }
    else
    {
      v4 = Asn1Coder::EncodeInteger(a1, 0, 2, v8);
      if (!(_DWORD)v4)
        return v4;
    }
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    v7 = v4;
  }
  SuplAsn1Logger::TraceError(v7, v5, v6);
  return v4;
}

uint64_t asn1PE_UARFCN(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = Asn1Coder::EncodeInteger(a1, 0, 0x3FFF, a2);
  v4 = v3;
  if ((_DWORD)v3)
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  return v4;
}

uint64_t asn1PE_FrequencyInfo(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;

  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    v7 = *(unsigned __int8 *)(a1 + 16);
  }
  else
  {
    Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
    v4 = *(unsigned __int8 *)(a1 + 16);
    if (*(_BYTE *)(a1 + 16))
    {
      v8 = *(_DWORD *)(a1 + 8);
      v9 = *(_DWORD *)(a1 + 12);
      LODWORD(v10) = *(unsigned __int8 *)(a1 + 16);
    }
    else
    {
      v10 = Asn1Coder::EncodeInteger(a1, 0, 1, *a2);
      if ((_DWORD)v10)
      {
        v4 = v10;
        v8 = *(_DWORD *)(a1 + 8);
        v9 = *(_DWORD *)(a1 + 12);
      }
      else
      {
        if (*a2 == 1)
        {
          Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
          v4 = *(unsigned __int8 *)(a1 + 16);
          if (*(_BYTE *)(a1 + 16))
          {
            v11 = *(_DWORD *)(a1 + 8);
            v12 = *(_DWORD *)(a1 + 12);
            LODWORD(v13) = *(unsigned __int8 *)(a1 + 16);
          }
          else
          {
            v13 = asn1PE_UARFCN(a1, *((_WORD *)a2 + 4));
            v4 = v13;
            if (!(_DWORD)v13)
              return v4;
            v11 = *(_DWORD *)(a1 + 8);
            v12 = *(_DWORD *)(a1 + 12);
          }
        }
        else if (*a2)
        {
          v4 = 4;
          *(_BYTE *)(a1 + 16) = 4;
          v11 = *(_DWORD *)(a1 + 8);
          v12 = *(_DWORD *)(a1 + 12);
          LODWORD(v13) = 4;
        }
        else
        {
          Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
          v4 = *(unsigned __int8 *)(a1 + 16);
          if (*(_BYTE *)(a1 + 16))
          {
            v11 = *(_DWORD *)(a1 + 8);
            v12 = *(_DWORD *)(a1 + 12);
            LODWORD(v13) = *(unsigned __int8 *)(a1 + 16);
          }
          else
          {
            Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[2]);
            v4 = *(unsigned __int8 *)(a1 + 16);
            if (*(_BYTE *)(a1 + 16))
            {
              v11 = *(_DWORD *)(a1 + 8);
              v12 = *(_DWORD *)(a1 + 12);
              LODWORD(v13) = *(unsigned __int8 *)(a1 + 16);
            }
            else if (a2[2] && (v13 = asn1PE_UARFCN(a1, *((_WORD *)a2 + 2)), (_DWORD)v13))
            {
              v4 = v13;
              v11 = *(_DWORD *)(a1 + 8);
              v12 = *(_DWORD *)(a1 + 12);
            }
            else
            {
              v13 = asn1PE_UARFCN(a1, *((_WORD *)a2 + 3));
              v4 = v13;
              if (!(_DWORD)v13)
                return v4;
              v11 = *(_DWORD *)(a1 + 8);
              v12 = *(_DWORD *)(a1 + 12);
            }
          }
        }
        SuplAsn1Logger::TraceError(v13, v11, v12);
        v8 = *(_DWORD *)(a1 + 8);
        v9 = *(_DWORD *)(a1 + 12);
        LODWORD(v10) = v4;
      }
    }
    SuplAsn1Logger::TraceError(v10, v8, v9);
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    v7 = v4;
  }
  SuplAsn1Logger::TraceError(v7, v5, v6);
  return v4;
}

uint64_t asn1PE_CPICH_Ec_N0(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = Asn1Coder::EncodeInteger(a1, 0, 63, a2);
  v4 = v3;
  if ((_DWORD)v3)
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  return v4;
}

uint64_t asn1PE_CPICH_RSCP(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = Asn1Coder::EncodeInteger(a1, 0, 127, a2);
  v4 = v3;
  if ((_DWORD)v3)
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  return v4;
}

uint64_t asn1PE_Pathloss(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = Asn1Coder::EncodeInteger(a1, 46, 173, a2);
  v4 = v3;
  if ((_DWORD)v3)
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  return v4;
}

uint64_t asn1PE_CellParametersID(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = Asn1Coder::EncodeInteger(a1, 0, 127, a2);
  v4 = v3;
  if ((_DWORD)v3)
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  return v4;
}

uint64_t asn1PE_TGSN(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = Asn1Coder::EncodeInteger(a1, 0, 14, a2);
  v4 = v3;
  if ((_DWORD)v3)
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  return v4;
}

uint64_t asn1PE_PrimaryCCPCH_RSCP(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = Asn1Coder::EncodeInteger(a1, 0, 127, a2);
  v4 = v3;
  if ((_DWORD)v3)
    SuplAsn1Logger::TraceError(v3, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  return v4;
}

uint64_t asn1PE_TimeslotISCP_List(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v4 = Asn1Coder::EncodeInteger(a1, 1, 14, a2[2] - *a2);
  if ((_DWORD)v4)
  {
    v5 = v4;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
  }
  else
  {
    v8 = *(_QWORD *)a2;
    if (*((_QWORD *)a2 + 1) == *(_QWORD *)a2)
      return 0;
    v9 = 0;
    while (1)
    {
      v10 = Asn1Coder::EncodeInteger(a1, 0, 127, *(unsigned __int8 *)(v8 + v9));
      if ((_DWORD)v10)
        break;
      ++v9;
      v8 = *(_QWORD *)a2;
      if (v9 >= *((_QWORD *)a2 + 1) - *(_QWORD *)a2)
        return 0;
    }
    v5 = v10;
    SuplAsn1Logger::TraceError(v10, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v4) = v5;
  }
  SuplAsn1Logger::TraceError(v4, v6, v7);
  return v5;
}

uint64_t asn1PE_MeasuredResultsList(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v43;
  int v44;

  v4 = Asn1Coder::EncodeInteger(a1, 1, 8, -858993459 * ((unint64_t)(a2[1] - *a2) >> 3));
  if ((_DWORD)v4)
  {
    v5 = v4;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_84;
  }
  v8 = *a2;
  if (a2[1] == *a2)
    return 0;
  v9 = 0;
  while (1)
  {
    v10 = (unsigned __int8 *)(v8 + 40 * v9);
    Asn1Coder::AddBitToBuffer((uint64_t **)a1, *v10);
    v5 = *(unsigned __int8 *)(a1 + 16);
    if (*(_BYTE *)(a1 + 16))
    {
      v38 = *(_DWORD *)(a1 + 8);
      v39 = *(_DWORD *)(a1 + 12);
      LODWORD(v11) = *(unsigned __int8 *)(a1 + 16);
      goto LABEL_83;
    }
    Asn1Coder::AddBitToBuffer((uint64_t **)a1, v10[1]);
    v5 = *(unsigned __int8 *)(a1 + 16);
    if (*(_BYTE *)(a1 + 16))
    {
      v38 = *(_DWORD *)(a1 + 8);
      v39 = *(_DWORD *)(a1 + 12);
      LODWORD(v11) = *(unsigned __int8 *)(a1 + 16);
      goto LABEL_83;
    }
    Asn1Coder::AddBitToBuffer((uint64_t **)a1, v10[2]);
    v5 = *(unsigned __int8 *)(a1 + 16);
    if (*(_BYTE *)(a1 + 16))
    {
      v38 = *(_DWORD *)(a1 + 8);
      v39 = *(_DWORD *)(a1 + 12);
      LODWORD(v11) = *(unsigned __int8 *)(a1 + 16);
      goto LABEL_83;
    }
    if (*v10)
    {
      v11 = asn1PE_FrequencyInfo(a1, (unsigned __int8 *)(v8 + 40 * v9 + 4));
      if ((_DWORD)v11)
      {
        v5 = v11;
        v38 = *(_DWORD *)(a1 + 8);
        v39 = *(_DWORD *)(a1 + 12);
        goto LABEL_83;
      }
    }
    if (v10[1])
    {
      v12 = Asn1Coder::EncodeInteger(a1, 0, 127, *(unsigned __int8 *)(v8 + 40 * v9 + 14));
      if ((_DWORD)v12)
      {
        v5 = v12;
        SuplAsn1Logger::TraceError(v12, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
        v38 = *(_DWORD *)(a1 + 8);
        v39 = *(_DWORD *)(a1 + 12);
        LODWORD(v11) = v5;
        goto LABEL_83;
      }
    }
    if (v10[2])
    {
      v13 = v8 + 40 * v9;
      v14 = *(_QWORD *)(v13 + 16);
      v15 = *(_QWORD *)(v13 + 24);
      v16 = (uint64_t *)(v13 + 16);
      v17 = Asn1Coder::EncodeInteger(a1, 1, 32, 954437177 * ((unint64_t)(v15 - v14) >> 3));
      if ((_DWORD)v17)
      {
        v5 = v17;
        v40 = *(_DWORD *)(a1 + 8);
        v41 = *(_DWORD *)(a1 + 12);
        goto LABEL_82;
      }
      v18 = *v16;
      if (v16[1] != *v16)
        break;
    }
LABEL_53:
    v5 = 0;
    ++v9;
    v8 = *a2;
    if (v9 >= 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3))
      return v5;
  }
  v19 = 0;
  v20 = 24;
  while (1)
  {
    Asn1Coder::AddBitToBuffer((uint64_t **)a1, *(unsigned __int8 *)(v18 + v20 - 24));
    v5 = *(unsigned __int8 *)(a1 + 16);
    if (*(_BYTE *)(a1 + 16))
    {
      v34 = *(_DWORD *)(a1 + 8);
      v35 = *(_DWORD *)(a1 + 12);
      LODWORD(v21) = *(unsigned __int8 *)(a1 + 16);
      goto LABEL_81;
    }
    if (*(_BYTE *)(v18 + v20 - 24))
    {
      v21 = Asn1Coder::EncodeInteger(a1, 0, 0xFFFFFFF, *(_DWORD *)(v18 + v20 - 20));
      if ((_DWORD)v21)
      {
        v5 = v21;
        v34 = *(_DWORD *)(a1 + 8);
        v35 = *(_DWORD *)(a1 + 12);
        goto LABEL_81;
      }
    }
    v22 = v18 + v20;
    v23 = Asn1Coder::EncodeInteger(a1, 0, 1, *(char *)(v18 + v20 - 16));
    if ((_DWORD)v23)
    {
      v5 = v23;
      v36 = *(_DWORD *)(a1 + 8);
      v37 = *(_DWORD *)(a1 + 12);
      goto LABEL_80;
    }
    v24 = *(unsigned __int8 *)(v22 - 16);
    if (!*(_BYTE *)(v22 - 16))
    {
      v29 = v18 + v20;
      Asn1Coder::AddBitToBuffer((uint64_t **)a1, *(unsigned __int8 *)(v18 + v20 - 8));
      v5 = *(unsigned __int8 *)(a1 + 16);
      if (*(_BYTE *)(a1 + 16))
      {
        v43 = *(_DWORD *)(a1 + 8);
        v44 = *(_DWORD *)(a1 + 12);
        LODWORD(v28) = *(unsigned __int8 *)(a1 + 16);
        goto LABEL_78;
      }
      Asn1Coder::AddBitToBuffer((uint64_t **)a1, *(unsigned __int8 *)(v29 - 7));
      v5 = *(unsigned __int8 *)(a1 + 16);
      if (*(_BYTE *)(a1 + 16))
      {
        v43 = *(_DWORD *)(a1 + 8);
        v44 = *(_DWORD *)(a1 + 12);
        LODWORD(v28) = *(unsigned __int8 *)(a1 + 16);
        goto LABEL_78;
      }
      v30 = v18 + v20;
      Asn1Coder::AddBitToBuffer((uint64_t **)a1, *(unsigned __int8 *)(v18 + v20 - 6));
      v5 = *(unsigned __int8 *)(a1 + 16);
      if (*(_BYTE *)(a1 + 16))
      {
        v43 = *(_DWORD *)(a1 + 8);
        v44 = *(_DWORD *)(a1 + 12);
        LODWORD(v28) = *(unsigned __int8 *)(a1 + 16);
        goto LABEL_78;
      }
      v31 = Asn1Coder::EncodeInteger(a1, 0, 511, *(unsigned __int16 *)(v30 - 4));
      if ((_DWORD)v31)
      {
        v5 = v31;
        SuplAsn1Logger::TraceError(v31, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
        v43 = *(_DWORD *)(a1 + 8);
        v44 = *(_DWORD *)(a1 + 12);
        LODWORD(v28) = v5;
        goto LABEL_78;
      }
      if (*(_BYTE *)(v29 - 8))
      {
        v28 = asn1PE_CPICH_Ec_N0(a1, *(_WORD *)(v18 + v20 - 2));
        if ((_DWORD)v28)
        {
          v5 = v28;
          v43 = *(_DWORD *)(a1 + 8);
          v44 = *(_DWORD *)(a1 + 12);
          goto LABEL_78;
        }
      }
      if (*(_BYTE *)(v29 - 7))
      {
        v28 = asn1PE_CPICH_RSCP(a1, *(_WORD *)(v18 + v20));
        if ((_DWORD)v28)
        {
          v5 = v28;
          v43 = *(_DWORD *)(a1 + 8);
          v44 = *(_DWORD *)(a1 + 12);
          goto LABEL_78;
        }
      }
      if (*(_BYTE *)(v30 - 6))
      {
        v28 = asn1PE_Pathloss(a1, *(_BYTE *)(v18 + v20 + 2));
        if ((_DWORD)v28)
        {
          v5 = v28;
          v43 = *(_DWORD *)(a1 + 8);
          v44 = *(_DWORD *)(a1 + 12);
          goto LABEL_78;
        }
      }
      goto LABEL_52;
    }
    if (v24 != 1)
      break;
    v25 = v18 + v20;
    Asn1Coder::AddBitToBuffer((uint64_t **)a1, *(unsigned __int8 *)(v18 + v20 + 8));
    v5 = *(unsigned __int8 *)(a1 + 16);
    if (*(_BYTE *)(a1 + 16))
    {
      v43 = *(_DWORD *)(a1 + 8);
      v44 = *(_DWORD *)(a1 + 12);
      LODWORD(v28) = *(unsigned __int8 *)(a1 + 16);
      goto LABEL_78;
    }
    Asn1Coder::AddBitToBuffer((uint64_t **)a1, *(unsigned __int8 *)(v25 + 9));
    v5 = *(unsigned __int8 *)(a1 + 16);
    if (*(_BYTE *)(a1 + 16))
    {
      v43 = *(_DWORD *)(a1 + 8);
      v44 = *(_DWORD *)(a1 + 12);
      LODWORD(v28) = *(unsigned __int8 *)(a1 + 16);
      goto LABEL_78;
    }
    v26 = v18 + v20;
    Asn1Coder::AddBitToBuffer((uint64_t **)a1, *(unsigned __int8 *)(v18 + v20 + 10));
    v5 = *(unsigned __int8 *)(a1 + 16);
    if (*(_BYTE *)(a1 + 16))
    {
      v43 = *(_DWORD *)(a1 + 8);
      v44 = *(_DWORD *)(a1 + 12);
      LODWORD(v28) = *(unsigned __int8 *)(a1 + 16);
      goto LABEL_78;
    }
    Asn1Coder::AddBitToBuffer((uint64_t **)a1, *(unsigned __int8 *)(v26 + 11));
    v5 = *(unsigned __int8 *)(a1 + 16);
    if (*(_BYTE *)(a1 + 16))
    {
      v43 = *(_DWORD *)(a1 + 8);
      v44 = *(_DWORD *)(a1 + 12);
      LODWORD(v28) = *(unsigned __int8 *)(a1 + 16);
      goto LABEL_78;
    }
    v27 = asn1PE_CellParametersID(a1, *(_BYTE *)(v18 + v20 + 12));
    v5 = v27;
    if ((_DWORD)v27 || !*(_BYTE *)(v25 + 8))
    {
      v32 = *(_DWORD *)(a1 + 8);
      v33 = *(_DWORD *)(a1 + 12);
      goto LABEL_51;
    }
    v27 = asn1PE_TGSN(a1, *(_BYTE *)(v18 + v20 + 13));
    v5 = v27;
    if ((_DWORD)v27 || !*(_BYTE *)(v25 + 9))
    {
      v32 = *(_DWORD *)(a1 + 8);
      v33 = *(_DWORD *)(a1 + 12);
      goto LABEL_51;
    }
    v27 = asn1PE_PrimaryCCPCH_RSCP(a1, *(_WORD *)(v18 + v20 + 14));
    v5 = v27;
    if ((_DWORD)v27 || !*(_BYTE *)(v26 + 10))
    {
      v32 = *(_DWORD *)(a1 + 8);
      v33 = *(_DWORD *)(a1 + 12);
      goto LABEL_51;
    }
    v27 = asn1PE_Pathloss(a1, *(_BYTE *)(v18 + v20 + 16));
    v5 = v27;
    if ((_DWORD)v27 || !*(_BYTE *)(v26 + 11))
    {
      v32 = *(_DWORD *)(a1 + 8);
      v33 = *(_DWORD *)(a1 + 12);
LABEL_51:
      SuplAsn1Logger::TraceError(v27, v32, v33);
      if ((_DWORD)v5)
        goto LABEL_79;
      goto LABEL_52;
    }
    v28 = asn1PE_TimeslotISCP_List(a1, (_DWORD *)(v18 + v20 + 24));
    if ((_DWORD)v28)
    {
      v5 = v28;
      v43 = *(_DWORD *)(a1 + 8);
      v44 = *(_DWORD *)(a1 + 12);
      goto LABEL_78;
    }
LABEL_52:
    ++v19;
    v18 = *v16;
    v20 += 72;
    if (v19 >= 0x8E38E38E38E38E39 * ((v16[1] - *v16) >> 3))
      goto LABEL_53;
  }
  if (v24 == 255)
  {
    v5 = 1;
    *(_BYTE *)(a1 + 16) = 1;
    v43 = *(_DWORD *)(a1 + 8);
    v44 = *(_DWORD *)(a1 + 12);
    LODWORD(v28) = 1;
  }
  else
  {
    v5 = 4;
    *(_BYTE *)(a1 + 16) = 4;
    v43 = *(_DWORD *)(a1 + 8);
    v44 = *(_DWORD *)(a1 + 12);
    LODWORD(v28) = 4;
  }
LABEL_78:
  SuplAsn1Logger::TraceError(v28, v43, v44);
LABEL_79:
  v36 = *(_DWORD *)(a1 + 8);
  v37 = *(_DWORD *)(a1 + 12);
  LODWORD(v23) = v5;
LABEL_80:
  SuplAsn1Logger::TraceError(v23, v36, v37);
  v34 = *(_DWORD *)(a1 + 8);
  v35 = *(_DWORD *)(a1 + 12);
  LODWORD(v21) = v5;
LABEL_81:
  SuplAsn1Logger::TraceError(v21, v34, v35);
  v40 = *(_DWORD *)(a1 + 8);
  v41 = *(_DWORD *)(a1 + 12);
  LODWORD(v17) = v5;
LABEL_82:
  SuplAsn1Logger::TraceError(v17, v40, v41);
  v38 = *(_DWORD *)(a1 + 8);
  v39 = *(_DWORD *)(a1 + 12);
  LODWORD(v11) = v5;
LABEL_83:
  SuplAsn1Logger::TraceError(v11, v38, v39);
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12);
  LODWORD(v4) = v5;
LABEL_84:
  SuplAsn1Logger::TraceError(v4, v6, v7);
  return v5;
}

uint64_t asn1PE_WcdmaCellInformation(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;

  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
LABEL_15:
    SuplAsn1Logger::TraceError(v7, v5, v6);
    return v4;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *a2);
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[1]);
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, a2[2]);
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  v7 = Asn1Coder::EncodeInteger(a1, 0, 999, *((unsigned __int16 *)a2 + 2));
  if ((_DWORD)v7)
  {
    v4 = v7;
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  v7 = Asn1Coder::EncodeInteger(a1, 0, 999, *((unsigned __int16 *)a2 + 3));
  if ((_DWORD)v7)
  {
    v4 = v7;
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  v7 = Asn1Coder::EncodeInteger(a1, 0, 0xFFFFFFF, *((_DWORD *)a2 + 2));
  if ((_DWORD)v7)
  {
    v4 = v7;
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  if (*a2)
  {
    v7 = asn1PE_FrequencyInfo(a1, a2 + 12);
    if ((_DWORD)v7)
    {
      v4 = v7;
      v5 = *(_DWORD *)(a1 + 8);
      v6 = *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
  }
  if (a2[1])
  {
    v7 = Asn1Coder::EncodeInteger(a1, 0, 511, *((unsigned __int16 *)a2 + 11));
    if ((_DWORD)v7)
    {
      v4 = v7;
      v5 = *(_DWORD *)(a1 + 8);
      v6 = *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
  }
  if (!a2[2])
    return 0;
  v7 = asn1PE_MeasuredResultsList(a1, (uint64_t *)a2 + 3);
  v4 = v7;
  if ((_DWORD)v7)
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  return v4;
}

uint64_t asn1PE_NMR(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;

  v4 = Asn1Coder::EncodeInteger(a1, 1, 15, -1431655765 * ((unint64_t)(a2[1] - *a2) >> 2));
  if ((_DWORD)v4)
  {
    v5 = v4;
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
LABEL_16:
    SuplAsn1Logger::TraceError(v4, v6, v7);
    return v5;
  }
  v8 = *a2;
  if (a2[1] != *a2)
  {
    v9 = 0;
    v10 = 0;
    while (1)
    {
      Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
      v5 = *(unsigned __int8 *)(a1 + 16);
      if (*(_BYTE *)(a1 + 16))
      {
        v13 = *(_DWORD *)(a1 + 8);
        v14 = *(_DWORD *)(a1 + 12);
        LODWORD(v11) = *(unsigned __int8 *)(a1 + 16);
        goto LABEL_15;
      }
      v11 = Asn1Coder::EncodeInteger(a1, 0, 1023, *(_DWORD *)(v8 + v9));
      if ((_DWORD)v11)
      {
        v5 = v11;
        v13 = *(_DWORD *)(a1 + 8);
        v14 = *(_DWORD *)(a1 + 12);
        goto LABEL_15;
      }
      v12 = v8 + v9;
      v11 = Asn1Coder::EncodeInteger(a1, 0, 63, *(_DWORD *)(v12 + 4));
      if ((_DWORD)v11)
      {
        v5 = v11;
        v13 = *(_DWORD *)(a1 + 8);
        v14 = *(_DWORD *)(a1 + 12);
        goto LABEL_15;
      }
      v11 = Asn1Coder::EncodeInteger(a1, 0, 63, *(_DWORD *)(v12 + 8));
      if ((_DWORD)v11)
        break;
      ++v10;
      v8 = *a2;
      v9 += 12;
      if (v10 >= 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2))
        return 0;
    }
    v5 = v11;
    v13 = *(_DWORD *)(a1 + 8);
    v14 = *(_DWORD *)(a1 + 12);
LABEL_15:
    SuplAsn1Logger::TraceError(v11, v13, v14);
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v4) = v5;
    goto LABEL_16;
  }
  return 0;
}

uint64_t asn1PE_GsmCellInformation(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;

  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
LABEL_15:
    SuplAsn1Logger::TraceError(v7, v5, v6);
    return v4;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *(unsigned __int8 *)a2);
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, *((unsigned __int8 *)a2 + 1));
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
    goto LABEL_15;
  }
  v7 = Asn1Coder::EncodeInteger(a1, 0, 999, *((unsigned __int16 *)a2 + 1));
  if ((_DWORD)v7)
  {
    v4 = v7;
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  v7 = Asn1Coder::EncodeInteger(a1, 0, 999, *((unsigned __int16 *)a2 + 2));
  if ((_DWORD)v7)
  {
    v4 = v7;
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  v7 = Asn1Coder::EncodeInteger(a1, 0, 0xFFFF, *((unsigned __int16 *)a2 + 3));
  if ((_DWORD)v7)
  {
    v4 = v7;
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  v7 = Asn1Coder::EncodeInteger(a1, 0, 0xFFFF, *((unsigned __int16 *)a2 + 4));
  if ((_DWORD)v7)
  {
    v4 = v7;
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  if (*(_BYTE *)a2)
  {
    v7 = asn1PE_NMR(a1, a2 + 2);
    if ((_DWORD)v7)
    {
      v4 = v7;
      v5 = *(_DWORD *)(a1 + 8);
      v6 = *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
  }
  if (!*((_BYTE *)a2 + 1))
    return 0;
  v7 = Asn1Coder::EncodeInteger(a1, 0, 255, *((unsigned __int8 *)a2 + 40));
  v4 = v7;
  if ((_DWORD)v7)
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  return v4;
}

void ASN1T_CellInfo::~ASN1T_CellInfo(ASN1T_CellInfo *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void **v8[2];

  v8[1] = *(void ***)MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)this == 4)
  {
    v2 = *((_QWORD *)this + 16);
    if (v2)
    {
      v8[0] = (void **)(v2 + 136);
      std::vector<ASN1T_MeasResultEUTRA>::__destroy_vector::operator()[abi:ne180100](v8);
      v3 = *(void **)(v2 + 104);
      if (v3)
      {
        *(_QWORD *)(v2 + 112) = v3;
        operator delete(v3);
      }
      v4 = *(void **)(v2 + 72);
      if (v4)
      {
        *(_QWORD *)(v2 + 80) = v4;
        operator delete(v4);
      }
      v5 = *(void **)(v2 + 48);
      if (v5)
      {
        *(_QWORD *)(v2 + 56) = v5;
        operator delete(v5);
      }
      v6 = *(void **)(v2 + 24);
      if (v6)
      {
        *(_QWORD *)(v2 + 32) = v6;
        operator delete(v6);
      }
      MEMORY[0x2207AFDF0](v2, 0x1030C40AD30468BLL);
      *((_QWORD *)this + 16) = 0;
    }
  }
  v8[0] = (void **)((char *)this + 80);
  std::vector<ASN1T_MeasuredResults>::__destroy_vector::operator()[abi:ne180100](v8);
  v7 = (void *)*((_QWORD *)this + 3);
  if (v7)
  {
    *((_QWORD *)this + 4) = v7;
    operator delete(v7);
  }
}

uint64_t asn1PE_CellInfo(uint64_t a1, unsigned __int8 *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;

  v4 = *a2;
  Asn1Coder::AddBitToBuffer((uint64_t **)a1, v4 == 4);
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    LODWORD(v8) = *(unsigned __int8 *)(a1 + 16);
  }
  else if (v4 == 4)
  {
    if (*((_QWORD *)a2 + 16))
    {
      v8 = asn1PE_CellInfo_VER2(a1, (uint64_t)a2);
      v5 = v8;
      if (!(_DWORD)v8)
        return v5;
      v6 = *(_DWORD *)(a1 + 8);
      v7 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      v6 = *(_DWORD *)(a1 + 8);
      v7 = *(_DWORD *)(a1 + 12);
      v5 = 1;
      LODWORD(v8) = 1;
    }
  }
  else
  {
    v8 = Asn1Coder::EncodeInteger(a1, 0, 2, *a2 - 1);
    if ((_DWORD)v8)
    {
      v5 = v8;
      v6 = *(_DWORD *)(a1 + 8);
      v7 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      v5 = 0;
      switch(*a2)
      {
        case 0u:
          v5 = 1;
          *(_BYTE *)(a1 + 16) = 1;
          v10 = *(_DWORD *)(a1 + 8);
          v11 = *(_DWORD *)(a1 + 12);
          v12 = 1;
          goto LABEL_17;
        case 1u:
          v13 = asn1PE_GsmCellInformation(a1, (uint64_t *)a2 + 1);
          goto LABEL_19;
        case 2u:
          v13 = asn1PE_WcdmaCellInformation(a1, a2 + 56);
LABEL_19:
          v5 = v13;
          if ((_DWORD)v13)
            goto LABEL_20;
          return v5;
        case 3u:
          v5 = 1;
          *(_BYTE *)(a1 + 16) = 1;
          v10 = *(_DWORD *)(a1 + 8);
          v11 = *(_DWORD *)(a1 + 12);
          v12 = 1;
          goto LABEL_17;
        case 4u:
          return v5;
        default:
          v5 = 4;
          *(_BYTE *)(a1 + 16) = 4;
          v10 = *(_DWORD *)(a1 + 8);
          v11 = *(_DWORD *)(a1 + 12);
          v12 = 4;
LABEL_17:
          SuplAsn1Logger::TraceError(v12, v10, v11);
LABEL_20:
          v6 = *(_DWORD *)(a1 + 8);
          v7 = *(_DWORD *)(a1 + 12);
          LODWORD(v8) = v5;
          break;
      }
    }
  }
  SuplAsn1Logger::TraceError(v8, v6, v7);
  return v5;
}

uint64_t asn1PE_LocationId(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;

  Asn1Coder::AddBitToBuffer((uint64_t **)a1, 0);
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    LODWORD(v7) = *(unsigned __int8 *)(a1 + 16);
LABEL_7:
    SuplAsn1Logger::TraceError(v7, v5, v6);
    return v4;
  }
  v7 = asn1PE_CellInfo(a1, a2);
  if ((_DWORD)v7)
  {
    v4 = v7;
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_7;
  }
  v7 = asn1PE_Status(a1, a2 + 136);
  v4 = v7;
  if ((_DWORD)v7)
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
    goto LABEL_7;
  }
  return v4;
}

uint64_t ASN1T_LocationId::operator=(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  unsigned __int16 v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  _BYTE *v39;
  size_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void **v45;
  uint64_t v46;
  _BYTE *v47;
  char *v48;
  void *v49;
  char *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void **v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  void *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  _DWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *i;
  char __str[8];
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)a1 == 4)
  {
    v4 = *(_QWORD **)(a1 + 128);
    if (v4)
    {
      *(_QWORD *)__str = v4 + 17;
      std::vector<ASN1T_MeasResultEUTRA>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
      v5 = (void *)v4[13];
      if (v5)
      {
        v4[14] = v5;
        operator delete(v5);
      }
      v6 = (void *)v4[9];
      if (v6)
      {
        v4[10] = v6;
        operator delete(v6);
      }
      v7 = (void *)v4[6];
      if (v7)
      {
        v4[7] = v7;
        operator delete(v7);
      }
      v8 = (void *)v4[3];
      if (v8)
      {
        v4[4] = v8;
        operator delete(v8);
      }
      MEMORY[0x2207AFDF0](v4, 0x1030C40AD30468BLL);
      *(_QWORD *)(a1 + 128) = 0;
    }
  }
  *(_BYTE *)a1 = *(_BYTE *)a2;
  switch(*(_BYTE *)a2)
  {
    case 0:
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
        goto LABEL_14;
      return a1;
    case 1:
      v35 = *(_QWORD *)(a2 + 8);
      *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v35;
      if (a1 == a2)
        goto LABEL_60;
      v36 = *(_QWORD *)(a1 + 40);
      v37 = *(char **)(a1 + 24);
      v38 = *(char **)(a2 + 24);
      v39 = *(_BYTE **)(a2 + 32);
      v40 = v39 - v38;
      v41 = 0xAAAAAAAAAAAAAAABLL * ((v39 - v38) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * ((v36 - (uint64_t)v37) >> 2) < v41)
      {
        if (v37)
        {
          *(_QWORD *)(a1 + 32) = v37;
          operator delete(v37);
          v36 = 0;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 40) = 0;
        }
        if (v41 > 0x1555555555555555)
          std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
        v42 = 0xAAAAAAAAAAAAAAABLL * (v36 >> 2);
        v43 = 2 * v42;
        if (2 * v42 <= v41)
          v43 = 0xAAAAAAAAAAAAAAABLL * ((v39 - v38) >> 2);
        if (v42 >= 0xAAAAAAAAAAAAAAALL)
          v44 = 0x1555555555555555;
        else
          v44 = v43;
        if (v44 > 0x1555555555555555)
          std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ASN1T_NMRelement>>(a1 + 40, v44);
        *(_QWORD *)(a1 + 32) = v37;
        v45 = (void **)(a1 + 32);
        *(_QWORD *)(a1 + 24) = v37;
        *(_QWORD *)(a1 + 40) = &v37[12 * v46];
        goto LABEL_56;
      }
      v45 = (void **)(a1 + 32);
      v47 = *(_BYTE **)(a1 + 32);
      if (0xAAAAAAAAAAAAAAABLL * ((v47 - v37) >> 2) >= v41)
      {
LABEL_56:
        if (v39 == v38)
          goto LABEL_59;
        v49 = v37;
        v50 = v38;
        goto LABEL_58;
      }
      v48 = &v38[4 * ((v47 - v37) >> 2)];
      if (v47 != v37)
      {
        memmove(*(void **)(a1 + 24), *(const void **)(a2 + 24), v47 - v37);
        v37 = (char *)*v45;
      }
      v40 = v39 - v48;
      if (v39 != v48)
      {
        v49 = v37;
        v50 = v48;
LABEL_58:
        memmove(v49, v50, v40);
      }
LABEL_59:
      *v45 = &v37[v40];
LABEL_60:
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      return a1;
    case 2:
      v17 = *(_WORD *)(a2 + 56);
      v18 = *(unsigned __int8 *)(a2 + 58);
      *(_BYTE *)(a1 + 58) = v18;
      *(_WORD *)(a1 + 56) = v17;
      *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
      v19 = *(_QWORD *)(a2 + 68);
      *(_WORD *)(a1 + 76) = *(_WORD *)(a2 + 76);
      *(_QWORD *)(a1 + 68) = v19;
      *(_WORD *)(a1 + 78) = *(_WORD *)(a2 + 78);
      if (a1 == a2 || v18 != 1)
        return a1;
      v20 = *(_QWORD *)(a1 + 96);
      v21 = (void **)(a1 + 80);
      v22 = *(_QWORD *)(a1 + 80);
      v24 = *(uint64_t **)(a2 + 80);
      v23 = *(uint64_t **)(a2 + 88);
      v25 = 0xCCCCCCCCCCCCCCCDLL * (v23 - v24);
      if (0xCCCCCCCCCCCCCCCDLL * ((v20 - v22) >> 3) < v25)
      {
        if (v22)
        {
          v26 = *(_QWORD *)(a1 + 88);
          v27 = *(void **)(a1 + 80);
          if (v26 != v22)
          {
            do
            {
              v28 = v26 - 40;
              *(_QWORD *)__str = v26 - 24;
              std::vector<ASN1T_CellMeasuredResults>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
              v26 = v28;
            }
            while (v28 != v22);
            v27 = *v21;
          }
          *(_QWORD *)(a1 + 88) = v22;
          operator delete(v27);
          v20 = 0;
          *v21 = 0;
          *(_QWORD *)(a1 + 88) = 0;
          *(_QWORD *)(a1 + 96) = 0;
        }
        if (v25 > 0x666666666666666)
          std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
        v29 = 0xCCCCCCCCCCCCCCCDLL * (v20 >> 3);
        v30 = 2 * v29;
        if (2 * v29 <= v25)
          v30 = 0xCCCCCCCCCCCCCCCDLL * (v23 - v24);
        if (v29 >= 0x333333333333333)
          v31 = 0x666666666666666;
        else
          v31 = v30;
        if (v31 > 0x666666666666666)
          std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
        v32 = std::__allocate_at_least[abi:ne180100]<std::allocator<ASN1T_MeasuredResults>>(a1 + 96, v31);
        *(_QWORD *)(a1 + 80) = v32;
        *(_QWORD *)(a1 + 88) = v32;
        *(_QWORD *)(a1 + 96) = &v32[5 * v33];
        v34 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ASN1T_MeasuredResults>,ASN1T_MeasuredResults*,ASN1T_MeasuredResults*,ASN1T_MeasuredResults*>(a1 + 96, v24, v23, v32);
        goto LABEL_63;
      }
      if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 88) - v22) >> 3) < v25)
      {
        v51 = &v24[(*(_QWORD *)(a1 + 88) - v22) >> 3];
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ASN1T_MeasuredResults *,ASN1T_MeasuredResults *,ASN1T_MeasuredResults *>(v24, v51, *(uint64_t **)(a1 + 80));
        v34 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ASN1T_MeasuredResults>,ASN1T_MeasuredResults*,ASN1T_MeasuredResults*,ASN1T_MeasuredResults*>(a1 + 96, v51, v23, *(_QWORD **)(a1 + 88));
LABEL_63:
        *(_QWORD *)(a1 + 88) = v34;
        return a1;
      }
      v52 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ASN1T_MeasuredResults *,ASN1T_MeasuredResults *,ASN1T_MeasuredResults *>(v24, v23, *(uint64_t **)(a1 + 80));
      v53 = *(uint64_t **)(a1 + 88);
      if (v53 != v52)
      {
        do
        {
          v54 = v53 - 5;
          *(_QWORD *)__str = v53 - 3;
          std::vector<ASN1T_CellMeasuredResults>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
          v53 = v54;
        }
        while (v54 != v52);
      }
      *(_QWORD *)(a1 + 88) = v52;
      return a1;
    case 3:
      if (LbsOsaTrace_IsLoggingAllowed(0x12u, 0, 0, 0))
      {
LABEL_14:
        bzero(__str, 0x410uLL);
        v9 = mach_continuous_time();
        v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "SPL", 69, "operator=", 515);
        LbsOsaTrace_WriteLog(0x12u, __str, v10, 0, 1);
      }
      return a1;
    case 4:
      v11 = (char *)operator new(0xA0uLL, MEMORY[0x24BEDB6B8]);
      if (!v11)
      {
        *(_QWORD *)(a1 + 128) = 0;
        return a1;
      }
      v12 = v11;
      *((_DWORD *)v11 + 2) = 0;
      v11[16] = 0;
      *(_OWORD *)(v11 + 24) = 0u;
      v13 = v11 + 24;
      *((_QWORD *)v12 + 18) = 0;
      *((_QWORD *)v12 + 19) = 0;
      *((_QWORD *)v12 + 17) = 0;
      *(_OWORD *)(v12 + 40) = 0u;
      *(_OWORD *)(v12 + 56) = 0u;
      *(_OWORD *)(v12 + 72) = 0u;
      *(_OWORD *)(v12 + 82) = 0u;
      *((_QWORD *)v12 + 14) = 0;
      *((_QWORD *)v12 + 15) = 0;
      *((_QWORD *)v12 + 13) = 0;
      *((_DWORD *)v12 + 32) = 0;
      *(_WORD *)v12 = -1;
      *(_QWORD *)(a1 + 128) = v12;
      v14 = *(_QWORD *)(a2 + 128);
      if (!v14)
        return a1;
      *(_WORD *)v12 = *(_WORD *)v14;
      *((_DWORD *)v12 + 2) = *(_DWORD *)(v14 + 8);
      v12[16] = *(_BYTE *)(v14 + 16);
      v15 = v12;
      if (v12 != (char *)v14)
      {
        std::vector<ASN1T_MCC_MNC_Digit>::__assign_with_size[abi:ne180100]<ASN1T_MCC_MNC_Digit*,ASN1T_MCC_MNC_Digit*>(v13, *(char **)(v14 + 24), *(char **)(v14 + 32), *(_QWORD *)(v14 + 32) - *(_QWORD *)(v14 + 24));
        std::vector<ASN1T_MCC_MNC_Digit>::__assign_with_size[abi:ne180100]<ASN1T_MCC_MNC_Digit*,ASN1T_MCC_MNC_Digit*>((_QWORD *)v12 + 6, *(char **)(v14 + 48), *(char **)(v14 + 56), *(_QWORD *)(v14 + 56) - *(_QWORD *)(v14 + 48));
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)v12 + 9, *(char **)(v14 + 72), *(char **)(v14 + 80), *(_QWORD *)(v14 + 80) - *(_QWORD *)(v14 + 72));
        v12 = *(char **)(a2 + 128);
        v16 = *(_QWORD *)(a1 + 128);
        *(_WORD *)(v16 + 96) = *((_WORD *)v12 + 48);
        if ((char *)v16 == v12)
        {
          v15 = v12;
        }
        else
        {
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v16 + 104), *((char **)v12 + 13), *((char **)v12 + 14), *((_QWORD *)v12 + 14) - *((_QWORD *)v12 + 13));
          v15 = *(char **)(a2 + 128);
          v12 = *(char **)(a1 + 128);
        }
      }
      v12[128] = v15[128];
      v55 = *(_QWORD *)(a2 + 128);
      v56 = *(_QWORD *)(a1 + 128);
      *(_WORD *)(v56 + 130) = *(_WORD *)(v55 + 130);
      if (v56 == v55)
        return a1;
      v57 = *(_QWORD *)(v56 + 152);
      v58 = (void **)(v56 + 136);
      v59 = *(_QWORD **)(v56 + 136);
      v61 = *(_QWORD *)(v55 + 136);
      v60 = *(_QWORD *)(v55 + 144);
      v62 = 0xEEEEEEEEEEEEEEEFLL * ((v60 - v61) >> 3);
      if (0xEEEEEEEEEEEEEEEFLL * ((v57 - (uint64_t)v59) >> 3) < v62)
      {
        if (v59)
        {
          v63 = *(_QWORD **)(v56 + 144);
          v64 = *(void **)(v56 + 136);
          if (v63 != v59)
          {
            do
            {
              v63 -= 15;
              std::allocator<ASN1T_MeasResultEUTRA>::destroy[abi:ne180100](v56 + 152, v63);
            }
            while (v63 != v59);
            v64 = *v58;
          }
          *(_QWORD *)(v56 + 144) = v59;
          operator delete(v64);
          v57 = 0;
          *v58 = 0;
          *(_QWORD *)(v56 + 144) = 0;
          *(_QWORD *)(v56 + 152) = 0;
        }
        if (v62 > 0x222222222222222)
          std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
        v65 = 0xEEEEEEEEEEEEEEEFLL * (v57 >> 3);
        v66 = 2 * v65;
        if (2 * v65 <= v62)
          v66 = 0xEEEEEEEEEEEEEEEFLL * ((v60 - v61) >> 3);
        if (v65 >= 0x111111111111111)
          v67 = 0x222222222222222;
        else
          v67 = v66;
        if (v67 > 0x222222222222222)
          std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
        v68 = std::__allocate_at_least[abi:ne180100]<std::allocator<ASN1T_MeasResultEUTRA>>(v56 + 152, v67);
        *(_QWORD *)(v56 + 136) = v68;
        *(_QWORD *)(v56 + 144) = v68;
        *(_QWORD *)(v56 + 152) = &v68[30 * v69];
        v70 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ASN1T_MeasResultEUTRA>,ASN1T_MeasResultEUTRA*,ASN1T_MeasResultEUTRA*,ASN1T_MeasResultEUTRA*>(v56 + 152, v61, v60, v68);
        goto LABEL_85;
      }
      if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(v56 + 144) - (_QWORD)v59) >> 3) < v62)
      {
        v71 = v61 + 8 * ((uint64_t)(*(_QWORD *)(v56 + 144) - (_QWORD)v59) >> 3);
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ASN1T_MeasResultEUTRA *,ASN1T_MeasResultEUTRA *,ASN1T_MeasResultEUTRA *>(v61, v71, *(_QWORD *)(v56 + 136));
        v70 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ASN1T_MeasResultEUTRA>,ASN1T_MeasResultEUTRA*,ASN1T_MeasResultEUTRA*,ASN1T_MeasResultEUTRA*>(v56 + 152, v71, v60, *(_DWORD **)(v56 + 144));
LABEL_85:
        *(_QWORD *)(v56 + 144) = v70;
        return a1;
      }
      v72 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ASN1T_MeasResultEUTRA *,ASN1T_MeasResultEUTRA *,ASN1T_MeasResultEUTRA *>(v61, v60, *(_QWORD *)(v56 + 136));
      for (i = *(_QWORD **)(v56 + 144);
            i != (_QWORD *)v72;
            std::allocator<ASN1T_MeasResultEUTRA>::destroy[abi:ne180100](v56 + 152, i))
      {
        i -= 15;
      }
      *(_QWORD *)(v56 + 144) = v72;
      return a1;
    default:
      return a1;
  }
}

void sub_21E5B28A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 144) = v1;
  _Unwind_Resume(a1);
}

void sub_21E5B28AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 144) = v1;
  _Unwind_Resume(a1);
}

void sub_21E5B28B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 88) = v2;
  _Unwind_Resume(a1);
}

void sub_21E5B28BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 88) = v2;
  _Unwind_Resume(a1);
}

void std::vector<ASN1T_MeasResultEUTRA>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 15;
        std::allocator<ASN1T_MeasResultEUTRA>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<ASN1T_MeasResultEUTRA>::destroy[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = (void *)a2[11];
  if (v3)
  {
    a2[12] = v3;
    operator delete(v3);
  }
  v4 = (void *)a2[8];
  if (v4)
  {
    a2[9] = v4;
    operator delete(v4);
  }
  v5 = (void *)a2[5];
  if (v5)
  {
    a2[6] = v5;
    operator delete(v5);
  }
  v6 = (void *)a2[2];
  if (v6)
  {
    a2[3] = v6;
    operator delete(v6);
  }
}

void std::vector<ASN1T_MeasuredResults>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7[2];

  v7[1] = *(void ***)MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 40;
        v7[0] = (void **)(v4 - 24);
        std::vector<ASN1T_CellMeasuredResults>::__destroy_vector::operator()[abi:ne180100](v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<ASN1T_CellMeasuredResults>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<ASN1T_CellMeasuredResults>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<ASN1T_CellMeasuredResults>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 72)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ASN1T_NMRelement>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(12 * a2);
}

_QWORD *std::vector<ASN1T_MCC_MNC_Digit>::__assign_with_size[abi:ne180100]<ASN1T_MCC_MNC_Digit*,ASN1T_MCC_MNC_Digit*>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<ASN1T_MCC_MNC_Digit>::__vallocate[abi:ne180100](v7, v11);
    v9 = (char *)v7[1];
    goto LABEL_17;
  }
  v12 = (_BYTE *)result[1];
  v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    v16 = a3 - __src;
    if (v16)
      result = memmove(v9, __src, v16);
    v15 = &v9[v16];
    goto LABEL_20;
  }
  v14 = &__src[v13];
  if (v12 != v9)
  {
    result = memmove((void *)*result, __src, v13);
    v9 = (char *)v7[1];
  }
  if (a3 != v14)
    result = memmove(v9, v14, a3 - v14);
  v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

char *std::vector<ASN1T_MCC_MNC_Digit>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

_DWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ASN1T_MeasResultEUTRA>,ASN1T_MeasResultEUTRA*,ASN1T_MeasResultEUTRA*,ASN1T_MeasResultEUTRA*>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  _DWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v9;
  _QWORD v10[4];
  char v11;
  uint64_t v12;

  v4 = a4;
  v12 = *MEMORY[0x24BDAC8D0];
  v9 = a4;
  v10[0] = a4;
  v10[1] = a1;
  v10[2] = &v9;
  v10[3] = v10;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2 + 8;
    do
    {
      v7 = v6 - 8;
      *v4 = *(_DWORD *)(v6 - 8);
      ASN1T_cgi_Info::ASN1T_cgi_Info((uint64_t)(v4 + 2), (char *)v6);
      v4[28] = *(_DWORD *)(v6 + 104);
      v4 = (_DWORD *)(v10[0] + 120);
      v10[0] += 120;
      v6 += 120;
    }
    while (v7 + 120 != a3);
  }
  return v4;
}

void sub_21E5B2EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ASN1T_MeasResultEUTRA>,ASN1T_MeasResultEUTRA*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ASN1T_cgi_Info::ASN1T_cgi_Info(uint64_t a1, char *a2)
{
  char v4;

  v4 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<ASN1T_MCC_MNC_Digit>::__init_with_size[abi:ne180100]<ASN1T_MCC_MNC_Digit*,ASN1T_MCC_MNC_Digit*>((_QWORD *)(a1 + 8), *((const void **)a2 + 1), *((_QWORD *)a2 + 2), *((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<ASN1T_MCC_MNC_Digit>::__init_with_size[abi:ne180100]<ASN1T_MCC_MNC_Digit*,ASN1T_MCC_MNC_Digit*>((_QWORD *)(a1 + 32), *((const void **)a2 + 4), *((_QWORD *)a2 + 5), *((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4));
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(a1 + 56), *((const void **)a2 + 7), *((_QWORD *)a2 + 8), *((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(a1 + 80), *((const void **)a2 + 10), *((_QWORD *)a2 + 11), *((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10));
  return a1;
}

void sub_21E5B2FD8(_Unwind_Exception *a1)
{
  gnss::Emergency::Supl::LocationId *v1;

  gnss::Emergency::Supl::LocationId::~LocationId(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<ASN1T_MCC_MNC_Digit>::__init_with_size[abi:ne180100]<ASN1T_MCC_MNC_Digit*,ASN1T_MCC_MNC_Digit*>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<ASN1T_MCC_MNC_Digit>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_21E5B30AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ASN1T_MeasResultEUTRA>,ASN1T_MeasResultEUTRA*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  _QWORD **v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD **)(a1 + 8);
    v2 = *(_QWORD ***)(a1 + 16);
    v4 = *v2;
    v5 = (_QWORD *)*v3;
    if (*v2 != (_QWORD *)*v3)
    {
      v6 = *(_QWORD *)a1;
      do
      {
        v4 -= 15;
        std::allocator<ASN1T_MeasResultEUTRA>::destroy[abi:ne180100](v6, v4);
      }
      while (v4 != v5);
    }
  }
  return a1;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ASN1T_MeasResultEUTRA *,ASN1T_MeasResultEUTRA *,ASN1T_MeasResultEUTRA *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      v8 = a1 + v6;
      *(_DWORD *)v7 = *(_DWORD *)(a1 + v6);
      *(_BYTE *)(v7 + 8) = *(_BYTE *)(a1 + v6 + 8);
      if (a3 != a1)
      {
        std::vector<ASN1T_MCC_MNC_Digit>::__assign_with_size[abi:ne180100]<ASN1T_MCC_MNC_Digit*,ASN1T_MCC_MNC_Digit*>((_QWORD *)(v7 + 16), *(char **)(v8 + 16), *(char **)(v8 + 24), *(_QWORD *)(v8 + 24) - *(_QWORD *)(v8 + 16));
        std::vector<ASN1T_MCC_MNC_Digit>::__assign_with_size[abi:ne180100]<ASN1T_MCC_MNC_Digit*,ASN1T_MCC_MNC_Digit*>((_QWORD *)(v7 + 40), *(char **)(v8 + 40), *(char **)(v8 + 48), *(_QWORD *)(v8 + 48) - *(_QWORD *)(v8 + 40));
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v7 + 64), *(char **)(v8 + 64), *(char **)(v8 + 72), *(_QWORD *)(v8 + 72) - *(_QWORD *)(v8 + 64));
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v7 + 88), *(char **)(v8 + 88), *(char **)(v8 + 96), *(_QWORD *)(v8 + 96) - *(_QWORD *)(v8 + 88));
      }
      *(_DWORD *)(v7 + 112) = *(_DWORD *)(v8 + 112);
      v6 += 120;
    }
    while (v8 + 120 != a2);
    a3 += v6;
  }
  return a3;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ASN1T_MeasResultEUTRA>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x222222222222223)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(120 * a2);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ASN1T_MeasuredResults>,ASN1T_MeasuredResults*,ASN1T_MeasuredResults*,ASN1T_MeasuredResults*>(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD v11[3];
  char v12;
  uint64_t v13;

  v4 = a4;
  v13 = *MEMORY[0x24BDAC8D0];
  v9 = a4;
  v10 = a4;
  v11[0] = a1;
  v11[1] = &v9;
  v11[2] = &v10;
  v12 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = *v6;
      *(_QWORD *)((char *)v4 + 7) = *(uint64_t *)((char *)v6 + 7);
      *v4 = v7;
      v4[3] = 0;
      v4[4] = 0;
      v4[2] = 0;
      std::vector<ASN1T_CellMeasuredResults>::__init_with_size[abi:ne180100]<ASN1T_CellMeasuredResults*,ASN1T_CellMeasuredResults*>(v4 + 2, v6[2], v6[3], 0x8E38E38E38E38E39 * ((v6[3] - v6[2]) >> 3));
      v4 = v10 + 5;
      v10 += 5;
      v6 += 5;
    }
    while (v6 != a3);
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ASN1T_MeasuredResults>,ASN1T_MeasuredResults*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_21E5B33B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ASN1T_MeasuredResults>,ASN1T_MeasuredResults*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<ASN1T_CellMeasuredResults>::__init_with_size[abi:ne180100]<ASN1T_CellMeasuredResults*,ASN1T_CellMeasuredResults*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<ASN1T_CellMeasuredResults>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ASN1T_CellMeasuredResults>,ASN1T_CellMeasuredResults*,ASN1T_CellMeasuredResults*,ASN1T_CellMeasuredResults*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_21E5B3458(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  std::vector<ASN1T_CellMeasuredResults>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

char *std::vector<ASN1T_CellMeasuredResults>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x38E38E38E38E38FLL)
    std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ASN1T_CellMeasuredResults>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ASN1T_CellMeasuredResults>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(72 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ASN1T_CellMeasuredResults>,ASN1T_CellMeasuredResults*,ASN1T_CellMeasuredResults*,ASN1T_CellMeasuredResults*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  char v15;
  uint64_t v16;

  v4 = a4;
  v16 = *MEMORY[0x24BDAC8D0];
  v12 = a4;
  v13 = a4;
  v14[0] = a1;
  v14[1] = &v12;
  v14[2] = &v13;
  v15 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = *(_QWORD *)v6;
      *(_BYTE *)(v4 + 8) = *(_BYTE *)(v6 + 8);
      v7 = *(_QWORD *)(v6 + 16);
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      *(_QWORD *)(v4 + 16) = v7;
      v8 = *(_QWORD *)(v6 + 32);
      v9 = *(_BYTE *)(v6 + 40);
      *(_QWORD *)(v4 + 48) = 0;
      v10 = (_QWORD *)(v4 + 48);
      *((_BYTE *)v10 - 8) = v9;
      *(v10 - 2) = v8;
      v10[1] = 0;
      v10[2] = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v10, *(const void **)(v6 + 48), *(_QWORD *)(v6 + 56), *(_QWORD *)(v6 + 56) - *(_QWORD *)(v6 + 48));
      v4 = v13 + 72;
      v13 += 72;
      v6 += 72;
    }
    while (v6 != a3);
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ASN1T_CellMeasuredResults>,ASN1T_CellMeasuredResults*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v4;
}

void sub_21E5B3670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ASN1T_CellMeasuredResults>,ASN1T_CellMeasuredResults*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ASN1T_CellMeasuredResults>,ASN1T_CellMeasuredResults*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<ASN1T_CellMeasuredResults>,ASN1T_CellMeasuredResults*>::operator()[abi:ne180100](a1);
  return a1;
}

void sub_21E5B36E8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ASN1T_CellMeasuredResults>,ASN1T_CellMeasuredResults*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 - 24);
    if (v3)
    {
      *(_QWORD *)(v1 - 16) = v3;
      operator delete(v3);
    }
    v1 -= 72;
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ASN1T_MeasuredResults>,ASN1T_MeasuredResults*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v6[2];

  v6[1] = *(void ***)MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 8);
    v3 = **(_QWORD **)(a1 + 16);
    if (v3 != v2)
    {
      do
      {
        v4 = v3 - 40;
        v6[0] = (void **)(v3 - 24);
        std::vector<ASN1T_CellMeasuredResults>::__destroy_vector::operator()[abi:ne180100](v6);
        v3 = v4;
      }
      while (v4 != v2);
    }
  }
  return a1;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ASN1T_MeasuredResults *,ASN1T_MeasuredResults *,ASN1T_MeasuredResults *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char **v17;
  uint64_t v18;
  uint64_t j;
  void *v20;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 5)
    {
      v6 = *i;
      *(uint64_t *)((char *)a3 + 7) = *(uint64_t *)((char *)i + 7);
      *a3 = v6;
      if (a3 != i)
      {
        v8 = (void **)(a3 + 2);
        v7 = a3[2];
        v10 = i[2];
        v9 = i[3];
        v11 = 0x8E38E38E38E38E39 * ((v9 - v10) >> 3);
        v12 = a3[4];
        if (0x8E38E38E38E38E39 * ((v12 - v7) >> 3) >= v11)
        {
          if (0x8E38E38E38E38E39 * ((a3[3] - v7) >> 3) >= v11)
          {
            v18 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ASN1T_CellMeasuredResults *,ASN1T_CellMeasuredResults *,ASN1T_CellMeasuredResults *>((char **)i[2], (char **)i[3], v7);
            for (j = a3[3]; j != v18; j -= 72)
            {
              v20 = *(void **)(j - 24);
              if (v20)
              {
                *(_QWORD *)(j - 16) = v20;
                operator delete(v20);
              }
            }
            a3[3] = v18;
            goto LABEL_22;
          }
          v17 = (char **)(v10 + 8 * ((a3[3] - v7) >> 3));
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ASN1T_CellMeasuredResults *,ASN1T_CellMeasuredResults *,ASN1T_CellMeasuredResults *>((char **)i[2], v17, v7);
          v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ASN1T_CellMeasuredResults>,ASN1T_CellMeasuredResults*,ASN1T_CellMeasuredResults*,ASN1T_CellMeasuredResults*>((uint64_t)(a3 + 4), (uint64_t)v17, v9, a3[3]);
        }
        else
        {
          if (v7)
          {
            std::vector<ASN1T_CellMeasuredResults>::__clear[abi:ne180100](a3 + 2);
            operator delete(*v8);
            v12 = 0;
            *v8 = 0;
            a3[3] = 0;
            a3[4] = 0;
          }
          if (v11 > 0x38E38E38E38E38ELL)
            std::vector<gnss::Emergency::Supl::LteCellInfo>::__throw_length_error[abi:ne180100]();
          v13 = 0x8E38E38E38E38E39 * (v12 >> 3);
          v14 = 2 * v13;
          if (2 * v13 <= v11)
            v14 = 0x8E38E38E38E38E39 * ((v9 - v10) >> 3);
          if (v13 >= 0x1C71C71C71C71C7)
            v15 = 0x38E38E38E38E38ELL;
          else
            v15 = v14;
          std::vector<ASN1T_CellMeasuredResults>::__vallocate[abi:ne180100](a3 + 2, v15);
          v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ASN1T_CellMeasuredResults>,ASN1T_CellMeasuredResults*,ASN1T_CellMeasuredResults*,ASN1T_CellMeasuredResults*>((uint64_t)(a3 + 4), v10, v9, a3[3]);
        }
        a3[3] = v16;
      }
LABEL_22:
      a3 += 5;
    }
  }
  return a3;
}

void sub_21E5B3A0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

void sub_21E5B3A14(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ASN1T_CellMeasuredResults *,ASN1T_CellMeasuredResults *,ASN1T_CellMeasuredResults *>(char **a1, char **a2, uint64_t a3)
{
  char **v5;
  char **v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    v5 = a1 + 7;
    do
    {
      v6 = v5 - 7;
      *(_QWORD *)a3 = *(v5 - 7);
      *(_BYTE *)(a3 + 8) = *((_BYTE *)v5 - 48);
      v7 = (uint64_t)*(v5 - 5);
      *(_DWORD *)(a3 + 23) = *(_DWORD *)((char *)v5 - 33);
      *(_QWORD *)(a3 + 16) = v7;
      v8 = (uint64_t)*(v5 - 3);
      *(_BYTE *)(a3 + 40) = *((_BYTE *)v5 - 16);
      *(_QWORD *)(a3 + 32) = v8;
      if ((char **)a3 != v5 - 7)
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(a3 + 48), *(v5 - 1), *v5, *v5 - *(v5 - 1));
      a3 += 72;
      v5 += 9;
    }
    while (v6 + 9 != a2);
  }
  return a3;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ASN1T_MeasuredResults>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

char *GNSS_Write_GNB_Ctrl(char *result)
{
  char *v1;
  char *v2;
  uint64_t v3;
  unsigned __int16 v4;
  unsigned int v5;
  char *v6;
  unsigned int v7;
  uint64_t v8;

  if (result)
  {
    v1 = result;
    v3 = *(_QWORD *)result;
    v2 = (char *)*((_QWORD *)result + 1);
    if (v2 != *(char **)result)
    {
      if ((unint64_t)v2 > *(_QWORD *)result)
        v3 = *((_QWORD *)result + 3);
      v4 = v3 - (_WORD)v2;
      v5 = GN_GPS_Write_GNB_Ctrl((unsigned __int16)(v3 - (_WORD)v2), v2);
      result = GNB_Debug_BlockMove(*((char **)v1 + 1), v5);
      v6 = (char *)(*((_QWORD *)v1 + 1) + v5);
      *((_QWORD *)v1 + 1) = v6;
      if ((unint64_t)v6 >= *((_QWORD *)v1 + 3))
      {
        v6 = (char *)*((_QWORD *)v1 + 2);
        *((_QWORD *)v1 + 1) = v6;
        if (v5 == v4)
        {
          v7 = GN_GPS_Write_GNB_Ctrl((unsigned __int16)(*(_WORD *)v1 - (_WORD)v6), v6);
          result = GNB_Debug_BlockMove(*((char **)v1 + 1), v7);
          v6 = (char *)(*((_QWORD *)v1 + 1) + v7);
          *((_QWORD *)v1 + 1) = v6;
        }
      }
      if (v6 == *(char **)v1)
      {
        v8 = *((_QWORD *)v1 + 2);
        *(_QWORD *)v1 = v8;
        *((_QWORD *)v1 + 1) = v8;
      }
    }
  }
  return result;
}

char *G5K_ME_Send_WakeUp(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int i;
  char v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unsigned __int8 v16;
  char v17;
  char v18;
  unint64_t v19;
  char *v20;
  char *v21;

  v2 = (*a1)++;
  *v2 = 10;
  v3 = *a1;
  if (*a1 >= a1[3])
    v3 = a1[2];
  *a1 = v3 + 1;
  *v3 = 35;
  v4 = *a1;
  if (*a1 >= a1[3])
    v4 = a1[2];
  v5 = 0;
  v6 = 87;
  v7 = v4;
  do
  {
    *a1 = v7 + 1;
    *v7 = v6;
    v7 = *a1;
    if (*a1 >= a1[3])
    {
      v7 = a1[2];
      *a1 = v7;
    }
    v6 = str_18[++v5];
  }
  while (v5 != 4);
  v8 = mach_continuous_time();
  sprintf_sp1u(a1, (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8));
  v9 = (*a1)++;
  *v9 = 32;
  v10 = *a1;
  if (*a1 >= a1[3])
    v10 = a1[2];
  for (i = 0; i != 10; ++i)
  {
    v12 = 91;
    v13 = 1u;
    do
    {
      *a1 = v10 + 1;
      *v10 = v12;
      v10 = *a1;
      if (*a1 >= a1[3])
      {
        v10 = a1[2];
        *a1 = v10;
      }
      v12 = str_1_7[v13++];
    }
    while (v13 != 10);
  }
  *a1 = v10 + 1;
  *v10 = 32;
  v14 = *a1;
  v15 = (unint64_t)a1[3];
  if ((unint64_t)*a1 >= v15)
  {
    v14 = a1[2];
    *a1 = v14;
  }
  if (v4 == v14)
  {
    v19 = 0;
  }
  else
  {
    v16 = 0;
    do
    {
      v18 = *v4++;
      v17 = v18;
      if ((unint64_t)v4 >= v15)
        v4 = a1[2];
      v16 += v17;
    }
    while (v4 != v14);
    v19 = v16;
  }
  *a1 = v14 + 1;
  *v14 = 38;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  sprintf_02x(a1, v19);
  v20 = (*a1)++;
  *v20 = 10;
  v21 = *a1;
  if (*a1 >= a1[3])
    v21 = a1[2];
  *a1 = v21 + 1;
  *v21 = 10;
  if (*a1 >= a1[3])
    *a1 = a1[2];
  return GNSS_Write_GNB_Ctrl((char *)a1);
}

uint64_t G5K_ME_Send_Sleep(char *a1, char **a2, unsigned int a3, unsigned int a4, int a5)
{
  char *v10;
  char *v11;
  char v12;
  uint64_t v13;
  char *v14;
  unsigned __int8 v16[4];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  GNSS_Write_GNB_Ctrl(a1);
  GNSS_GNB_Debug_Ctl((uint64_t)a2);
  if (g_Enable_GNB_Debug)
  {
    v10 = (*a2)++;
    *v10 = 10;
    v11 = *a2;
    if (*a2 >= a2[3])
      v11 = a2[2];
    v12 = 35;
    v13 = 1u;
    do
    {
      *a2 = v11 + 1;
      *v11 = v12;
      v11 = *a2;
      if (*a2 >= a2[3])
      {
        v11 = a2[2];
        *a2 = v11;
      }
      v12 = str_2_5[v13++];
    }
    while (v13 != 8);
    sprintf_sp1u(a2, a3);
    sprintf_sp1u(a2, a4);
    v14 = (*a2)++;
    *v14 = 10;
    if (*a2 >= a2[3])
      *a2 = a2[2];
  }
  if (a5)
  {
    v17 = 0;
    v16[0] = BYTE1(a3);
    v16[1] = a3;
    v16[2] = BYTE1(a4);
    v16[3] = a4;
    STEU_Encode_c((char **)a1, 83, 12, v16);
  }
  GNSS_Write_GNB_Ctrl(a1);
  return GNSS_GNB_Debug_Ctl((uint64_t)a2);
}

char *G5K_ME_Send_Ctrl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  double i;
  double v19;
  double v20;
  double v21;
  double v22;
  int v23;
  int v24;
  double v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t j;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  unsigned int v46;
  unsigned __int8 v47;
  char v48;
  double v49;
  uint64_t v50;
  double v51;
  double v52;
  double k;
  unsigned __int8 v54;
  uint64_t v55;
  BOOL v56;
  _WORD *v57;
  double v58;
  double v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  unint64_t v69;
  unsigned __int8 v70;
  unsigned __int8 v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  int Constell_Prn;
  unint64_t v75;
  unsigned __int8 v76;
  unsigned __int8 v77;
  unsigned __int8 v78;
  int v79;
  unint64_t v80;
  char v81;
  char v82;
  int v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  _BYTE *v89;
  char v90;
  char **v91;
  uint64_t v92;
  unint64_t v93;
  _BYTE *v94;
  char v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  _BYTE *v103;
  unsigned __int8 *v104;
  unint64_t v105;
  char v106;
  unint64_t v107;
  _BYTE *v108;
  char v109;
  unint64_t v110;
  _BYTE *v111;
  char v112;
  unsigned __int8 *v113;
  unint64_t v114;
  char v115;
  unint64_t v116;
  _BYTE *v117;
  char v118;
  unsigned __int8 v119;
  unint64_t v120;
  _BYTE *v121;
  char v122;
  unint64_t v123;
  char v124;
  unint64_t v125;
  _BYTE *v126;
  char v127;
  unint64_t v128;
  _BYTE *v129;
  char v130;
  unsigned int v131;
  _BYTE *v132;
  uint64_t v133;
  unint64_t v134;
  int v135;
  unsigned int v136;
  int v137;
  unsigned __int8 v138;
  uint64_t v139;
  int32x4_t v140;
  int8x16_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  uint8x16_t v145;
  uint16x8_t v146;
  uint16x8_t v147;
  int v148;
  int v149;
  int v150;
  uint64_t v151;
  int v152;
  BOOL v153;
  char v154;
  char v155;
  float64x2_t v156;
  float64x2_t v157;
  int8x8_t v158;
  int16x8_t v159;
  char *v160;
  uint64_t v162;
  _BYTE *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v167;
  unsigned __int8 v168;
  unsigned __int8 v169;
  unsigned __int8 v170;
  unsigned __int8 v171;
  unsigned __int8 v172;
  char **v173;
  char v174;
  char v175;
  unsigned __int8 v177;
  unint64_t v178;
  unsigned __int8 v179;
  unsigned int __b[4];
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  _BYTE v188[14];
  _BYTE v189[6];
  __int16 v190;
  unsigned int v191;
  __int16 v192;
  int v193;
  char v194;
  char v195;
  char v196;
  int v197;
  char v198;
  int v199;
  char v200;
  _BYTE v201[127];

  *(_QWORD *)&v201[103] = *MEMORY[0x24BDAC8D0];
  v8 = (_BYTE *)(*(_QWORD *)a1)++;
  *v8 = 10;
  if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 24))
    *(_QWORD *)a1 = *(_QWORD *)(a1 + 16);
  v9 = (char *)(a4 + 6132);
  v10 = *(unsigned int *)(a3 + 952);
  v11 = *(_DWORD *)(a3 + 948);
  if ((_DWORD)v10)
  {
    EvLog_nd("G5K_ME_Send_Ctrl: Fix_Int Updated ", 2, a3, *(unsigned int *)(a3 + 948), v10);
    v11 = *(_DWORD *)(a3 + 952);
    *(_QWORD *)(a3 + 948) = v11;
  }
  v12 = *(_DWORD *)(*(_QWORD *)(p_api + 88) + 32);
  if (v11 >= 0x1F4)
    v13 = 100;
  else
    v13 = 50;
  v14 = -(int)API_Get_Est_ME_TTick();
  do
    v12 += v11;
  while (v14 + v12 <= v13);
  v15 = *(_DWORD *)(a3 + 948);
  HIDWORD(v16) = 652835029 * v15;
  LODWORD(v16) = 652835029 * v15;
  if ((v16 >> 3) <= 0x418937)
  {
    v17 = *(_QWORD *)(p_api + 88);
    for (i = *(double *)(v17 + 40) - *(double *)(v17 + 144); i >= 604800.0; i = i + -604800.0)
      ;
    v19 = *(double *)(v17 + 168);
    while (i < 0.0)
      i = i + 604800.0;
    v20 = *(double *)(v17 + 848) / 299792458.0;
    v21 = i + (double)*(__int16 *)(a3 + 1024) * 0.000000001;
    v22 = v21 - (double)(int)v21;
    v23 = (int)v11 / 1000;
    if (v22 >= 0.7)
      ++v23;
    v24 = *(_DWORD *)(v17 + 32);
    v25 = (v19 + 1.0) * ((double)v23 - v22) * 1000.0;
    v26 = vcvtd_n_u64_f64(v25 - (double)(int)v25, 0x10uLL);
    LOWORD(v165) = v26;
    HIDWORD(v165) = v24 + (int)v25;
    if (v20 < 0.004)
    {
      v27 = v24 + (int)v25 - v12 + (v26 >> 15);
      v28 = v12 - v11 - ((int)v25 + v24 + (v26 >> 15));
      do
      {
        v29 = v27;
        v27 -= v11;
        v28 += v11;
      }
      while (v29 > 10);
      v30 = 1 - v11;
      if (v29 > (int)(1 - v11))
        v30 = v29;
      v31 = v30 + v28;
      if (v11 <= 1)
        v32 = 1;
      else
        v32 = v11;
      v56 = v31 == 0;
      v33 = (v31 - (v31 != 0)) / v32;
      if (!v56)
        ++v33;
      v34 = v29 + v33 * v11;
      if (v34 <= -50)
        v34 = -50;
      if (v34 >= 0)
        v35 = v34;
      else
        v35 = -v34;
      if (v35 <= 2 && v20 >= 0.0001)
        v34 = 0;
      v12 += v34;
    }
  }
  else
  {
    v165 = 0;
  }
  *(_DWORD *)(a2 + 536) = v12;
  G5K_ME_enc_n((char **)a1, v12, v15);
  *(_DWORD *)v188 = *(_DWORD *)a4;
  *(_WORD *)&v188[4] = *(_WORD *)(a4 + 4);
  *(_QWORD *)&v188[6] = *(_QWORD *)(a4 + 6);
  *(_DWORD *)v189 = *(_DWORD *)(a4 + 16);
  *(_WORD *)&v189[4] = *(_WORD *)(a4 + 20);
  v190 = *(_WORD *)(a4 + 14);
  v191 = *(_DWORD *)(a4 + 22);
  v192 = *(_WORD *)(a4 + 26);
  v37 = *(_DWORD *)(a4 + 32);
  v193 = *(_DWORD *)(a4 + 28);
  v38 = *(_DWORD *)(a4 + 48);
  v194 = *(_DWORD *)(a4 + 52);
  v195 = v38;
  v196 = *v9;
  v197 = v37;
  v39 = *(_DWORD *)(a4 + 40);
  v198 = *(_DWORD *)(a4 + 36);
  v199 = v39;
  v200 = *(_BYTE *)(a4 + 44);
  *(_QWORD *)__b = v201;
  STEU_Encode((char **)a1, 97, v188, (unint64_t *)__b);
  if (*(_QWORD *)__b - (_QWORD)v188 != 45)
    gn_report_assertion_failure("ME_enc_a: Wrong Length!");
  v167 = a3;
  v173 = (char **)a1;
  v179 = 0;
  v40 = *((_QWORD *)&xmmword_254011288 + 1);
  if ((Core_Get_GPS_TOWAss(__b) & 1) == 0)
  {
    v186 = 0u;
    v187 = 0u;
    v184 = 0u;
    v185 = 0u;
    v182 = 0u;
    v183 = 0u;
    *(_OWORD *)__b = 0u;
    v181 = 0u;
  }
  for (j = 0; j != 178; ++j)
  {
    if (*(__int16 *)(a4 + 2 * j + 4174) >= 1
      && (*(char *)(a4 + *(unsigned __int16 *)(a4 + 2 * j + 4174) - 1 + 3996) & 0x80000000) == 0)
    {
      v42 = *(unsigned __int8 *)(a4 + *(unsigned __int16 *)(a4 + 2 * j + 4174) - 1 + 3996);
      if (*(_BYTE *)(a4
                    + 48
                    * *(unsigned __int8 *)(a4 + *(unsigned __int16 *)(a4 + 2 * j + 4174) - 1 + 3996)
                    + 64))
      {
        v43 = a4 + 48 * *(unsigned __int8 *)(a4 + *(unsigned __int16 *)(a4 + 2 * j + 4174) - 1 + 3996);
        v46 = *(unsigned __int8 *)(v43 + 68);
        v45 = (int *)(v43 + 68);
        v44 = v46;
        v47 = *((_BYTE *)v45 + 6);
        if (*((_BYTE *)v45 + 4))
          v47 |= 0x10u;
        if (*((_BYTE *)v45 + 5))
          v48 = v47 | 0x20;
        else
          v48 = v47;
        v49 = (double)v45[6] * 0.000000977517107 + (double)v45[5] * 1.5;
        if ((_DWORD)v44 == 2)
        {
          v50 = *((char *)v45 + 2);
          if ((*((_BYTE *)v45 + 2) - 7) < 0xF2u)
            continue;
          v49 = v49
              + (double)(10800 - *(char *)(a4 + 44))
              + *(double *)(v40 + 8 * (v50 + 7) + 1152) * -0.00000000333564095;
          v51 = 86400.0;
        }
        else
        {
          v50 = *((unsigned __int8 *)v45 + 2);
          if ((_DWORD)v44 == 4)
            v49 = v49 + -14.0 + *(double *)(v40 + 1264) * -0.00000000333564095;
          v51 = 604800.0;
        }
        v52 = -0.0;
        if (v49 < 0.0)
          v52 = v51;
        for (k = v49 + v52; k > v51; k = k - v51)
          ;
        v54 = Encode_SVid_STE(v44, v50, (char *)&v179);
        if (v179)
          v56 = v54 == 0;
        else
          v56 = 1;
        if (v56)
        {
          EvCrt_nd("ME_enc_s: Invalid Constel / SV ID ", 2, v55, v179, v54);
        }
        else
        {
          v188[0] = v179;
          v188[1] = v54;
          v57 = (_WORD *)(a4 + 48 * v42);
          v58 = (double)(__int16)v57[41];
          v188[2] = v48;
          *(_WORD *)&v188[3] = (int)(v58 * 48.7151802);
          v188[5] = (int)(v58 * 48.7151802) >> 16;
          v178 = (unint64_t)&v188[6];
          *(_WORD *)&v188[6] = (k * 1000.0);
          v188[8] = (k * 1000.0) >> 16;
          v59 = k * 1000.0 - (double)(k * 1000.0);
          v188[9] = (k * 1000.0) >> 24;
          *(_WORD *)&v188[10] = vcvtd_n_s64_f64(v59, 0x10uLL);
          LOWORD(v59) = v57[39];
          *(_WORD *)&v188[12] = (int)((double)*(unint64_t *)&v59 * 1.90293673);
          v60 = (unsigned __int16)v57[43];
          if (v60 < 0x200)
          {
            v63 = (v60 << 16) / 0x3FF;
            v64 = (v60 << 16) / 0x3FF00;
            v61 = *(unsigned __int8 *)v45;
          }
          else
          {
            v61 = *(unsigned __int8 *)v45;
            if (v61 == 3)
              v62 = 65280;
            else
              v62 = 0x8000;
            if (v61 == 3)
              LOBYTE(v63) = -1;
            else
              LOBYTE(v63) = 0;
            v64 = v62 >> 8;
          }
          v65 = 0;
          v189[0] = v63;
          v189[1] = v64;
          v189[2] = 0;
          v66 = a4 + 48 * v42;
          *(double *)&v67 = (double)*(__int16 *)(v66 + 100) * 0.475734182;
          *(_WORD *)&v189[3] = (int)*(double *)&v67;
          LOBYTE(v67) = *(_BYTE *)(v66 + 102);
          v68 = ((double)v67 * 1.90293673);
          if (v68 >= 0xFF)
            LOBYTE(v68) = -1;
          v189[5] = v68;
          v190 = *(_WORD *)(v66 + 103);
          if (v61 == 1)
            v65 = __b[*((unsigned __int8 *)v45 + 2) - 1];
          v191 = v65;
          LOBYTE(v192) = 0;
          v178 = (unint64_t)&v192 + 1;
          STEU_Encode(v173, 115, v188, &v178);
          if (v178 - (_QWORD)v188 != 27)
            gn_report_assertion_failure("ME_enc_s: Wrong Length!");
        }
      }
    }
  }
  LODWORD(v178) = 0;
  if (*v9)
  {
    v69 = 0;
    v70 = 0;
    v71 = 0;
    v72 = 0;
    v73 = 0;
    do
    {
      Constell_Prn = Get_Constell_Prn((*(_WORD *)(a4 + 4174 + 2 * v69) - 1));
      switch(Constell_Prn)
      {
        case 1:
          ++v73;
          break;
        case 3:
          ++v72;
          break;
        case 4:
          ++v71;
          break;
        case 5:
          ++v70;
          break;
        default:
          break;
      }
      ++v69;
    }
    while (v69 < *v9);
    LODWORD(v178) = Constell_Prn;
  }
  else
  {
    v73 = 0;
    v72 = 0;
    v71 = 0;
    v70 = 0;
  }
  v169 = v72;
  v171 = v71;
  if (v9[1])
  {
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v177 = 0;
    v78 = 0;
    do
    {
      v79 = Get_Constell_Prn((*(_WORD *)(a4 + 4530 + 2 * v75) - 1));
      switch(v79)
      {
        case 1:
          ++v78;
          break;
        case 3:
          ++v177;
          break;
        case 4:
          ++v77;
          break;
        case 5:
          ++v76;
          break;
        default:
          break;
      }
      ++v75;
    }
    while (v75 < v9[1]);
    LODWORD(v178) = v79;
  }
  else
  {
    v78 = 0;
    v177 = 0;
    v77 = 0;
    v76 = 0;
  }
  v170 = v77;
  v168 = v70;
  v172 = v76;
  if (v9[3])
  {
    v80 = 0;
    v174 = 0;
    v175 = 0;
    v81 = 0;
    v82 = 0;
    do
    {
      v83 = Get_Constell_Prn((*(_WORD *)(a4 + 4886 + 2 * v80) - 1));
      switch(v83)
      {
        case 1:
          ++v82;
          break;
        case 3:
          ++v81;
          break;
        case 4:
          ++v174;
          break;
        case 5:
          ++v175;
          break;
        default:
          break;
      }
      ++v80;
    }
    while (v80 < v9[3]);
    LODWORD(v178) = v83;
  }
  else
  {
    v82 = 0;
    v81 = 0;
    v174 = 0;
    v175 = 0;
  }
  v188[0] = 1;
  v188[1] = v73;
  v84 = &v188[2];
  *(_QWORD *)__b = &v188[2];
  v85 = &v188[2];
  if (*v9)
  {
    v86 = 0;
    v85 = *(unsigned __int8 **)__b;
    do
    {
      v87 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a4 + 4174 + 2 * v86) - 1), &v178);
      if ((_DWORD)v178 == 1)
        *v85++ = v87 + 1;
      ++v86;
    }
    while (v86 < *v9);
    *(_QWORD *)__b = v85;
  }
  *v85 = v78;
  ++*(_QWORD *)__b;
  if (v9[1])
  {
    v88 = 0;
    v89 = *(_BYTE **)__b;
    do
    {
      v90 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a4 + 4530 + 2 * v88) - 1), &v178);
      if ((_DWORD)v178 == 1)
        *v89++ = v90 + 1;
      ++v88;
    }
    while (v88 < v9[1]);
    *(_QWORD *)__b = v89;
  }
  if (v73 | v78)
  {
    **(_BYTE **)__b = v82;
    ++*(_QWORD *)__b;
    v91 = v173;
    v92 = v167;
    if (v9[3])
    {
      v93 = 0;
      v94 = *(_BYTE **)__b;
      do
      {
        v95 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a4 + 4886 + 2 * v93) - 1), &v178);
        if ((_DWORD)v178 == 1)
          *v94++ = v95 + 1;
        ++v93;
      }
      while (v93 < v9[3]);
      *(_QWORD *)__b = v94;
    }
  }
  else
  {
    **(_BYTE **)__b = 0;
    ++*(_QWORD *)__b;
    v91 = v173;
    v92 = v167;
  }
  STEU_Encode(v91, 118, v188, (unint64_t *)__b);
  if ((uint64_t)(*(_QWORD *)__b - (_QWORD)v188) >= 70)
    gn_report_assertion_failure("ME_enc_v: G Too Long!");
  v188[0] = 4;
  v188[1] = v9[78];
  *(_QWORD *)__b = &v188[2];
  v96 = &v188[2];
  if (v188[1] >= 1)
  {
    v97 = 0;
    v98 = *(_QWORD *)__b;
    v99 = &v188[2];
    do
    {
      *v99 = *(_BYTE *)(a4 + 6196 + v97++) + 8;
      v99 = (_BYTE *)(v97 + v98);
    }
    while (v97 < v9[78]);
    v96 = (_BYTE *)(v98 + v97);
    *(_QWORD *)__b = v96;
  }
  v100 = 0;
  *v96 = v9[79];
  v101 = (_BYTE *)++*(_QWORD *)__b;
  do
  {
    if (!*(_DWORD *)(a4 + 6140 + 4 * v100))
    {
      *v101 = v100 + 1;
      v101 = (_BYTE *)++*(_QWORD *)__b;
    }
    ++v100;
  }
  while (v100 != 14);
  if (v9[78] || v9[79])
  {
    v102 = 0;
    *v101 = v9[80];
    v103 = (_BYTE *)++*(_QWORD *)__b;
    do
    {
      if (*(_DWORD *)(a4 + 6140 + 4 * v102) == 3)
      {
        *v103 = v102 + 1;
        v103 = (_BYTE *)++*(_QWORD *)__b;
      }
      ++v102;
    }
    while (v102 != 14);
  }
  else
  {
    *v101 = 0;
    ++*(_QWORD *)__b;
  }
  STEU_Encode(v91, 118, v188, (unint64_t *)__b);
  if ((uint64_t)(*(_QWORD *)__b - (_QWORD)v188) >= 70)
    gn_report_assertion_failure("ME_enc_v: R Too Long!");
  v188[0] = 5;
  v188[1] = v169;
  *(_QWORD *)__b = &v188[2];
  v104 = &v188[2];
  if (*v9)
  {
    v105 = 0;
    v104 = *(unsigned __int8 **)__b;
    do
    {
      v106 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a4 + 4174 + 2 * v105) - 1), &v178);
      if ((_DWORD)v178 == 3)
        *v104++ = v106 + 65;
      ++v105;
    }
    while (v105 < *v9);
    *(_QWORD *)__b = v104;
  }
  *v104 = v177;
  ++*(_QWORD *)__b;
  if (v9[1])
  {
    v107 = 0;
    v108 = *(_BYTE **)__b;
    do
    {
      v109 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a4 + 4530 + 2 * v107) - 1), &v178);
      if ((_DWORD)v178 == 3)
        *v108++ = v109 + 65;
      ++v107;
    }
    while (v107 < v9[1]);
    *(_QWORD *)__b = v108;
  }
  if (v169 | v177)
  {
    **(_BYTE **)__b = v81;
    ++*(_QWORD *)__b;
    if (v9[3])
    {
      v110 = 0;
      v111 = *(_BYTE **)__b;
      do
      {
        v112 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a4 + 4886 + 2 * v110) - 1), &v178);
        if ((_DWORD)v178 == 3)
          *v111++ = v112 + 65;
        ++v110;
      }
      while (v110 < v9[3]);
      *(_QWORD *)__b = v111;
    }
  }
  else
  {
    **(_BYTE **)__b = 0;
    ++*(_QWORD *)__b;
  }
  STEU_Encode(v91, 118, v188, (unint64_t *)__b);
  if ((uint64_t)(*(_QWORD *)__b - (_QWORD)v188) >= 70)
    gn_report_assertion_failure("ME_enc_v: E Too Long!");
  v188[0] = 6;
  v188[1] = v171;
  *(_QWORD *)__b = &v188[2];
  v113 = &v188[2];
  if (*v9)
  {
    v114 = 0;
    v113 = *(unsigned __int8 **)__b;
    do
    {
      v115 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a4 + 4174 + 2 * v114) - 1), &v178);
      if ((_DWORD)v178 == 4)
        *v113++ = v115 - 127;
      ++v114;
    }
    while (v114 < *v9);
    *(_QWORD *)__b = v113;
  }
  *v113 = v170;
  ++*(_QWORD *)__b;
  if (v9[1])
  {
    v116 = 0;
    v117 = *(_BYTE **)__b;
    do
    {
      v118 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a4 + 4530 + 2 * v116) - 1), &v178);
      if ((_DWORD)v178 == 4)
        *v117++ = v118 - 127;
      ++v116;
    }
    while (v116 < v9[1]);
    *(_QWORD *)__b = v117;
  }
  if (!(v171 | v170))
  {
    **(_BYTE **)__b = 0;
    ++*(_QWORD *)__b;
    goto LABEL_196;
  }
  **(_BYTE **)__b = v174;
  ++*(_QWORD *)__b;
  v119 = v168;
  if (v9[3])
  {
    v120 = 0;
    v121 = *(_BYTE **)__b;
    do
    {
      v122 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a4 + 4886 + 2 * v120) - 1), &v178);
      if ((_DWORD)v178 == 4)
        *v121++ = v122 - 127;
      ++v120;
    }
    while (v120 < v9[3]);
    *(_QWORD *)__b = v121;
LABEL_196:
    v119 = v168;
  }
  STEU_Encode(v91, 118, v188, (unint64_t *)__b);
  if ((uint64_t)(*(_QWORD *)__b - (_QWORD)v188) >= 70)
    gn_report_assertion_failure("ME_enc_v: B Too Long!");
  v188[0] = 3;
  v188[1] = v119;
  *(_QWORD *)__b = &v188[2];
  if (*v9)
  {
    v123 = 0;
    v84 = *(unsigned __int8 **)__b;
    do
    {
      v124 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a4 + 4174 + 2 * v123) - 1), &v178);
      if ((_DWORD)v178 == 5)
        *v84++ = v124 - 63;
      ++v123;
    }
    while (v123 < *v9);
    *(_QWORD *)__b = v84;
  }
  *v84 = v172;
  ++*(_QWORD *)__b;
  if (v9[1])
  {
    v125 = 0;
    v126 = *(_BYTE **)__b;
    do
    {
      v127 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a4 + 4530 + 2 * v125) - 1), &v178);
      if ((_DWORD)v178 == 5)
        *v126++ = v127 - 63;
      ++v125;
    }
    while (v125 < v9[1]);
    *(_QWORD *)__b = v126;
    v119 = v168;
  }
  if (v119 | v172)
  {
    **(_BYTE **)__b = v175;
    ++*(_QWORD *)__b;
    if (v9[3])
    {
      v128 = 0;
      v129 = *(_BYTE **)__b;
      do
      {
        v130 = LongPrnIdx_To_ShortPrnIdx((*(__int16 *)(a4 + 4886 + 2 * v128) - 1), &v178);
        if ((_DWORD)v178 == 5)
          *v129++ = v130 - 63;
        ++v128;
      }
      while (v128 < v9[3]);
      *(_QWORD *)__b = v129;
    }
  }
  else
  {
    **(_BYTE **)__b = 0;
    ++*(_QWORD *)__b;
  }
  STEU_Encode(v91, 118, v188, (unint64_t *)__b);
  if ((uint64_t)(*(_QWORD *)__b - (_QWORD)v188) >= 70)
    gn_report_assertion_failure("ME_enc_v: Q Too Long!");
  LODWORD(v178) = 0;
  v179 = 0;
  v188[0] = *v9;
  v131 = v188[0];
  v132 = &v188[1];
  *(_QWORD *)__b = &v188[1];
  if (v188[0])
  {
    v133 = 0;
    v134 = 0;
    while (*(__int16 *)(a4 + 4174 + 2 * v133) < 1)
    {
LABEL_238:
      if (++v133 >= (unint64_t)v131)
      {
        *(_QWORD *)__b = v132;
        v91 = v173;
        v92 = v167;
        goto LABEL_240;
      }
    }
    v135 = LongPrnIdx_To_ShortPrnIdx(*(unsigned __int16 *)(a4 + 4174 + 2 * v133) - 1, &v178);
    if ((_DWORD)v178 == 2)
    {
      if (v134 > 0xD)
      {
        v136 = 0;
        v179 = 0;
      }
      else
      {
        v136 = *(char *)(a4 + v134 + 6196) + 8;
        v179 = 4;
        ++v134;
LABEL_232:
        if (v136 >= 0x100)
        {
          EvLog_d("ME_enc_o: STE SV ID out of range", v136);
          v136 = 0;
        }
      }
      v138 = v179;
      if (!v136 && !v179)
      {
        EvLog("ME_enc_o: Illegal [0,0] STE Constel & SV ID");
        v138 = v179;
      }
      *v132 = v136;
      v132[1] = v138;
      v132 += 2;
      v131 = *v9;
      goto LABEL_238;
    }
    if ((int)v178 > 6)
      v137 = 0;
    else
      v137 = Prn_Offset[v178];
    v136 = Encode_SVid_STE(v178, (v137 + v135), (char *)&v179);
    goto LABEL_232;
  }
LABEL_240:
  STEU_Encode(v91, 111, v188, (unint64_t *)__b);
  if ((uint64_t)(*(_QWORD *)__b - (_QWORD)v188) >= 130)
    gn_report_assertion_failure("ME_enc_o: Too long!");
  if (*(_BYTE *)(a5 + 364))
    goto LABEL_246;
  v139 = 0;
  v140 = 0uLL;
  v141.i64[0] = 0x100000001;
  v141.i64[1] = 0x100000001;
  v142 = 0uLL;
  v143 = 0uLL;
  v144 = 0uLL;
  do
  {
    v145 = (uint8x16_t)vtstq_s8(*(int8x16_t *)(a5 + 365 + v139), *(int8x16_t *)(a5 + 365 + v139));
    v146 = vmovl_u8(*(uint8x8_t *)v145.i8);
    v147 = vmovl_high_u8(v145);
    v144 = vaddq_s32(v144, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v147), v141));
    v143 = vaddq_s32(v143, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v147.i8), v141));
    v142 = vaddq_s32(v142, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v146), v141));
    v140 = vaddq_s32(v140, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v146.i8), v141));
    v139 += 16;
  }
  while (v139 != 48);
  v148 = vaddvq_s32(vaddq_s32(vaddq_s32(v140, v143), vaddq_s32(v142, v144)));
  if (v148 == 48)
  {
LABEL_246:
    v188[0] = -1;
    *(_QWORD *)__b = &v188[1];
    goto LABEL_247;
  }
  if ((v148 - 1) <= 0x2E)
  {
    v162 = 0;
    v188[0] = v148;
    v163 = &v188[1];
    v164 = a5 + 365;
    do
    {
      if (*(_BYTE *)(v164 + v162))
      {
        *v163 = v162;
        v163[1] = *(_BYTE *)(v164 + v162);
        v163 += 2;
      }
      ++v162;
    }
    while (v162 != 48);
    *(_QWORD *)__b = v163;
    if (v163 > v188)
    {
LABEL_247:
      STEU_Encode(v91, 105, v188, (unint64_t *)__b);
      if ((uint64_t)(*(_QWORD *)__b - (_QWORD)v188) >= 100)
        gn_report_assertion_failure("ME_enc_i: Too long!");
    }
  }
  if (!*(_BYTE *)(v92 + 20))
  {
    v149 = *(_DWORD *)(v92 + 16);
    *(_DWORD *)&v188[8] = 0;
    *(_QWORD *)&v188[1] = 0;
    if (v149 >= 3)
    {
      EvLog_d("ME_Send_PowUsage: Out of range: ", v149);
      LOBYTE(v149) = 1;
    }
    v188[0] = v149;
    STEU_Encode_c(v91, 80, 12, v188);
  }
  if (HIDWORD(v165))
  {
    *(_WORD *)&v188[10] = 0;
    *(_DWORD *)&v188[6] = 0;
    v188[0] = HIBYTE(v165);
    v188[1] = BYTE6(v165);
    v188[2] = BYTE5(v165);
    v188[3] = BYTE4(v165);
    v188[4] = BYTE1(v165);
    v188[5] = v165;
    STEU_Encode_c(v91, 79, 12, v188);
  }
  v188[11] = 0;
  *(_QWORD *)&v188[3] = 0;
  v188[0] = *(_DWORD *)(v92 + 12);
  v150 = *(_DWORD *)(v92 + 4);
  v188[1] = v150;
  if (v150 == 2)
  {
    if (*(_DWORD *)(a4 + 52) < 3u || !*(_DWORD *)v92)
    {
      v151 = 0;
      v188[1] = 0;
      v152 = 82;
      while (1)
      {
        if (!*(_BYTE *)(a4 + v151 + 72)
          || !*(_BYTE *)(a4 + v151 + 64)
          || (*(_DWORD *)(a4 + v151 + 68) ? (v153 = *(_DWORD *)(a4 + v151 + 68) == 6) : (v153 = 1), v153))
        {
          if (--v152 < 6)
            break;
        }
        v151 += 48;
        if (v151 == 3936)
        {
          LOBYTE(v150) = 0;
          goto LABEL_270;
        }
      }
    }
    LOBYTE(v150) = 1;
    v188[1] = 1;
  }
LABEL_270:
  *(_DWORD *)(v92 + 8) = v150;
  v188[2] = *(_DWORD *)(v92 + 68);
  v154 = *(_BYTE *)(v92 + 31);
  if (v154)
  {
    v154 = 1;
    v188[3] = 1;
  }
  if (*(_BYTE *)(v92 + 34))
  {
    v154 |= 2u;
    v188[3] = v154;
  }
  if (*(_BYTE *)(v92 + 33))
  {
    v154 |= 4u;
    v188[3] = v154;
  }
  if (*(_BYTE *)(v92 + 32))
  {
    v154 |= 8u;
    v188[3] = v154;
  }
  if (*(_BYTE *)(v92 + 36))
  {
    v154 |= 0x10u;
    v188[3] = v154;
  }
  if (*(_BYTE *)(v92 + 35))
    v188[3] = v154 | 0x20;
  v155 = *(_BYTE *)(v92 + 37);
  if (v155)
  {
    v155 = 1;
    v188[4] = 1;
  }
  if (*(_BYTE *)(v92 + 40))
  {
    v155 |= 2u;
    v188[4] = v155;
  }
  if (*(_BYTE *)(v92 + 39))
  {
    v155 |= 4u;
    v188[4] = v155;
  }
  if (*(_BYTE *)(v92 + 38))
  {
    v155 |= 8u;
    v188[4] = v155;
  }
  if (*(_BYTE *)(v92 + 42))
  {
    v155 |= 0x10u;
    v188[4] = v155;
  }
  if (*(_BYTE *)(v92 + 41))
    v188[4] = v155 | 0x20;
  switch(*(_DWORD *)(v92 + 24))
  {
    case 0:
    case 1:
    case 3:
      v188[5] = 0;
      break;
    case 2:
      v188[5] = 1;
      break;
    default:
      v188[5] = 0;
      EvCrt_Illegal_Default("G5K_ME_enc_cC", 0x778u);
      break;
  }
  v188[6] = *(_BYTE *)(v92 + 28);
  v188[7] = *(_BYTE *)(v92 + 72);
  v188[8] = 1;
  STEU_Encode_c(v91, 67, 12, v188);
  *(_QWORD *)&v188[3] = 0;
  v188[11] = 0;
  *(_WORD *)v188 = -1;
  v188[2] = -1;
  STEU_Encode_c(v91, 65, 12, v188);
  *(_DWORD *)&v188[8] = 0;
  *(_QWORD *)&v188[1] = 0;
  v188[0] = *(_BYTE *)(v92 + 29);
  STEU_Encode_c(v91, 68, 12, v188);
  if (*(_BYTE *)(v92 + 1384))
  {
    *(_QWORD *)&v188[4] = 0;
    v156 = *(float64x2_t *)(v92 + 1352);
    v157 = *(float64x2_t *)(v92 + 1368);
    v158 = (int8x8_t)vmovn_s32(vuzp1q_s32((int32x4_t)vcgtzq_f64(v156), (int32x4_t)vcgtzq_f64(v157)));
    v159 = (int16x8_t)vcvtq_n_s64_f64(v156, 2uLL);
    *(int8x8_t *)v159.i8 = vorn_s8(vand_s8((int8x8_t)vuzp1_s16((int16x4_t)vmovn_s64((int64x2_t)v159), (int16x4_t)vmovn_s64(vcvtq_n_s64_f64(v157, 2uLL))), v158), v158);
    *(_QWORD *)v188 = vmovn_s16(v159).u32[0];
    STEU_Encode_c(v91, 90, 12, v188);
  }
  *(_DWORD *)&v188[8] = 0;
  *(_QWORD *)&v188[1] = 0;
  v188[0] = *(_BYTE *)(v92 + 30);
  STEU_Encode_c(v91, 69, 12, v188);
  v160 = (*v91)++;
  *v160 = 10;
  if (*v91 >= v91[3])
    *v91 = v91[2];
  return GNSS_Write_GNB_Ctrl((char *)v91);
}

char **G5K_ME_enc_n(char **a1, int a2, __int16 a3)
{
  char **result;
  _BYTE *v4;
  int v5;
  __int16 v6;
  _BYTE v7[150];

  *(_QWORD *)&v7[142] = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v4 = v7;
  result = STEU_Encode(a1, 110, (unsigned __int8 *)&v5, (unint64_t *)&v4);
  if (v4 - (_BYTE *)&v5 != 6)
    return (char **)gn_report_assertion_failure("ME_enc_n: Wrong Length!");
  return result;
}

uint64_t GncS02_09UpdatedPosAval(uint64_t a1)
{
  uint64_t v1;
  unsigned __int16 v2;
  uint64_t v3;
  unsigned __int16 v4;
  char __str[1040];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v1 = mach_continuous_time();
      v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_UPDT_POS_AVAL_IND\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 73, "GncS02_09UpdatedPosAval");
      LbsOsaTrace_WriteLog(8u, __str, v2, 4, 1);
    }
    GncS04_72SendUpdates();
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v3 = mach_continuous_time();
    v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 69, "GncS02_09UpdatedPosAval", 517);
    LbsOsaTrace_WriteLog(8u, __str, v4, 0, 1);
  }
  return 0;
}

uint64_t GncS02_21FGSchedTimExp(uint64_t a1)
{
  uint64_t v1;
  unsigned __int16 v2;
  uint64_t v3;
  unsigned __int16 v4;
  char __str[1040];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v1 = mach_continuous_time();
      v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_FG_SCHED_TIMER_EXPIRY\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 68, "GncS02_21FGSchedTimExp");
      LbsOsaTrace_WriteLog(8u, __str, v2, 5, 1);
    }
    GncS04_73FGPosTimerExpiry();
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v3 = mach_continuous_time();
    v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 69, "GncS02_21FGSchedTimExp", 517);
    LbsOsaTrace_WriteLog(8u, __str, v4, 0, 1);
  }
  return 0;
}

uint64_t GncS02_22SessStopAckTimExp(uint64_t a1)
{
  uint64_t v1;
  unsigned __int16 v2;
  uint64_t v3;
  unsigned __int16 v4;
  char __str[1040];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v1 = mach_continuous_time();
      v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_SESS_STOP_ACK_TIMER_EXPIRY\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 68, "GncS02_22SessStopAckTimExp");
      LbsOsaTrace_WriteLog(8u, __str, v2, 5, 1);
    }
    GncS04_33SessStopAckTimrExpiry();
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v3 = mach_continuous_time();
    v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 69, "GncS02_22SessStopAckTimExp", 517);
    LbsOsaTrace_WriteLog(8u, __str, v4, 0, 1);
  }
  return 0;
}

uint64_t GncS02_23SessStartAckTimExp(uint64_t a1)
{
  uint64_t v1;
  unsigned __int16 v2;
  uint64_t v3;
  unsigned __int16 v4;
  char __str[1040];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v1 = mach_continuous_time();
      v2 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCS_SESS_START_ACK_TIMER_EXPIRY\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v1), "GNC", 68, "GncS02_23SessStartAckTimExp");
      LbsOsaTrace_WriteLog(8u, __str, v2, 5, 1);
    }
    GncS04_36SessStartAckTimrExp();
  }
  else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v3 = mach_continuous_time();
    v4 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v3), "GNC", 69, "GncS02_23SessStartAckTimExp", 517);
    LbsOsaTrace_WriteLog(8u, __str, v4, 0, 1);
  }
  return 0;
}

uint64_t xofScvs_Init(void)
{
  uint64_t v0;
  unsigned __int16 v1;
  char __str[1040];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  g_XofBceParseState = 0;
  g_XofEeParseState = 0;
  g_RtiParseState = 0;
  g_Header = 0u;
  unk_254011428 = 0u;
  xmmword_254011438 = 0u;
  unk_254011448 = 0u;
  xmmword_254011458 = 0u;
  unk_254011468 = 0u;
  xmmword_254011478 = 0u;
  *(_OWORD *)&dword_254011488 = 0u;
  g_PayLoad = 0u;
  unk_25401E918 = 0u;
  xmmword_25401E928 = 0u;
  *(_OWORD *)&dword_25401E938 = 0u;
  xmmword_25401E948 = 0u;
  *(_OWORD *)&dword_25401E958 = 0u;
  xmmword_25401E968 = 0u;
  *(_OWORD *)&qword_25401E978 = 0u;
  xmmword_25401E988 = 0u;
  *(_OWORD *)&qword_25401E998 = 0u;
  xmmword_25401E9A8 = 0u;
  *(_OWORD *)&qword_25401E9B8 = 0u;
  xmmword_25401E9C8 = 0u;
  *(_OWORD *)&qword_25401E9D8 = 0u;
  xmmword_25401E9E8 = 0u;
  unk_25401E9F8 = 0u;
  xmmword_25401EA08 = 0u;
  unk_25401EA18 = 0u;
  xmmword_25401EA28 = 0u;
  *(_OWORD *)&qword_25401EA38 = 0u;
  xmmword_25401EA48 = 0u;
  xmmword_25401EAD8 = 0u;
  unk_25401EAE8 = 0u;
  xmmword_25401EAB8 = 0u;
  unk_25401EAC8 = 0u;
  xmmword_25401EA98 = 0u;
  unk_25401EAA8 = 0u;
  xmmword_25401EA78 = 0u;
  unk_25401EA88 = 0u;
  g_RtiRawData = 0u;
  unk_25401EA68 = 0u;
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v0 = mach_continuous_time();
    v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GCP ORB MjrVer,%u,MinVer,%u RTI MjrVer,%u,MinVer,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 73, "xofScvs_Init", 0, 2, 5, 1, 3);
    LbsOsaTrace_WriteLog(8u, __str, v1, 4, 1);
  }
  return 1;
}

uint64_t xofSvcs_Deinit(void)
{
  g_XofBceParseState = 0;
  g_XofEeParseState = 0;
  g_RtiParseState = 0;
  if (qword_25401E978)
    free((void *)qword_25401E978);
  qword_25401E978 = 0;
  if (qword_25401E980)
    free((void *)qword_25401E980);
  qword_25401E980 = 0;
  if ((_QWORD)xmmword_25401E988)
    free((void *)xmmword_25401E988);
  *(_QWORD *)&xmmword_25401E988 = 0;
  if (*((_QWORD *)&xmmword_25401E988 + 1))
    free(*((void **)&xmmword_25401E988 + 1));
  *((_QWORD *)&xmmword_25401E988 + 1) = 0;
  if (qword_25401E998)
    free((void *)qword_25401E998);
  qword_25401E998 = 0;
  if (qword_25401E9A0)
    free((void *)qword_25401E9A0);
  qword_25401E9A0 = 0;
  if ((_QWORD)xmmword_25401E9A8)
    free((void *)xmmword_25401E9A8);
  *(_QWORD *)&xmmword_25401E9A8 = 0;
  if (*((_QWORD *)&xmmword_25401E9A8 + 1))
    free(*((void **)&xmmword_25401E9A8 + 1));
  *((_QWORD *)&xmmword_25401E9A8 + 1) = 0;
  if (qword_25401E9B8)
    free((void *)qword_25401E9B8);
  qword_25401E9B8 = 0;
  if (qword_25401E9C0)
    free((void *)qword_25401E9C0);
  qword_25401E9C0 = 0;
  if ((_QWORD)xmmword_25401E9C8)
    free((void *)xmmword_25401E9C8);
  *(_QWORD *)&xmmword_25401E9C8 = 0;
  if (*((_QWORD *)&xmmword_25401E9C8 + 1))
    free(*((void **)&xmmword_25401E9C8 + 1));
  *((_QWORD *)&xmmword_25401E9C8 + 1) = 0;
  if (qword_25401E9D8)
    free((void *)qword_25401E9D8);
  qword_25401E9D8 = 0;
  if (qword_25401E9E0)
    free((void *)qword_25401E9E0);
  qword_25401E9E0 = 0;
  if ((_QWORD)xmmword_25401E9E8)
    free((void *)xmmword_25401E9E8);
  *(_QWORD *)&xmmword_25401E9E8 = 0;
  if (*((_QWORD *)&xmmword_25401E9E8 + 1))
    free(*((void **)&xmmword_25401E9E8 + 1));
  xmmword_254011478 = 0u;
  *(_OWORD *)&dword_254011488 = 0u;
  xmmword_254011458 = 0u;
  unk_254011468 = 0u;
  xmmword_254011438 = 0u;
  unk_254011448 = 0u;
  g_Header = 0u;
  unk_254011428 = 0u;
  g_PayLoad = 0u;
  unk_25401E918 = 0u;
  xmmword_25401E928 = 0u;
  *(_OWORD *)&dword_25401E938 = 0u;
  xmmword_25401E948 = 0u;
  *(_OWORD *)&dword_25401E958 = 0u;
  xmmword_25401E968 = 0u;
  *(_OWORD *)&qword_25401E978 = 0u;
  xmmword_25401E988 = 0u;
  *(_OWORD *)&qword_25401E998 = 0u;
  xmmword_25401E9A8 = 0u;
  *(_OWORD *)&qword_25401E9B8 = 0u;
  xmmword_25401E9C8 = 0u;
  *(_OWORD *)&qword_25401E9D8 = 0u;
  xmmword_25401E9E8 = 0u;
  unk_25401E9F8 = 0u;
  xmmword_25401EA08 = 0u;
  unk_25401EA18 = 0u;
  xmmword_25401EA28 = 0u;
  *(_OWORD *)&qword_25401EA38 = 0u;
  xmmword_25401EA48 = 0u;
  xmmword_25401EAD8 = 0u;
  unk_25401EAE8 = 0u;
  xmmword_25401EAB8 = 0u;
  unk_25401EAC8 = 0u;
  xmmword_25401EA98 = 0u;
  unk_25401EAA8 = 0u;
  xmmword_25401EA78 = 0u;
  unk_25401EA88 = 0u;
  g_RtiRawData = 0u;
  unk_25401EA68 = 0u;
  return 1;
}

uint64_t xofScvs_InjectOrbitData(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned __int16 v17;
  uint64_t v19;
  unsigned __int16 v20;
  uint64_t v21;
  unsigned int v22;
  char __str[1040];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v6 = mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 68, "xofScvs_InjectOrbitData");
    LbsOsaTrace_WriteLog(8u, __str, v7, 5, 1);
  }
  if ((a2 - 427673) < 0xFFF979E7 || !a1 || !a3)
  {
    v9 = 8;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
      return v9;
    bzero(__str, 0x410uLL);
    v12 = mach_continuous_time();
    v13 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DataLen,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 69, "xofScvs_InjectOrbitData", 515, a2);
    v9 = 8;
LABEL_17:
    v15 = 0;
LABEL_18:
    LbsOsaTrace_WriteLog(8u, __str, v13, v15, 1);
    return v9;
  }
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = xofSvcs00_19ParseHeader(a1, a2);
  if ((_DWORD)v8 != 1)
  {
    v9 = v8;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
      return v9;
    bzero(__str, 0x410uLL);
    v14 = mach_continuous_time();
    v13 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Header parse failed XOF cache not updated,RetVal,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 69, "xofScvs_InjectOrbitData", 770, v9);
    goto LABEL_17;
  }
  memcpy_s("xofScvs_InjectOrbitData", 136, &g_Header, 0x80u, a1, 0x80uLL);
  v22 = 0;
  v9 = xofSvcs00_20ParsePayLoad((signed __int8 *)a1, a2, 0x80u, &v22);
  if ((_DWORD)v9 == 1 && v22 == dword_254011488)
  {
    g_XofEeParseState = 1;
    g_XofBceParseState = 1;
    *(_BYTE *)a3 = 1;
    v10 = HIDWORD(g_Header) + 604800 * WORD5(g_Header);
    *(_QWORD *)(a3 + 8) = v10;
    if (byte_25401142C | byte_25401142A)
    {
      v11 = byte_25401142D * (unint64_t)byte_25401142C;
      if (v11 <= 4)
        LODWORD(v11) = 4;
      *(_QWORD *)(a3 + 16) = v10 + 3600 * v11;
    }
    else if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v19 = mach_continuous_time();
      v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx \n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNC", 69, "xofScvs_InjectOrbitData", 770);
      LbsOsaTrace_WriteLog(8u, __str, v20, 0, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v21 = mach_continuous_time();
      v13 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "GNC", 68, "xofScvs_InjectOrbitData");
      v15 = 5;
      goto LABEL_18;
    }
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v16 = mach_continuous_time();
      v17 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Payload parse failed,RetVal,%u,ProcessedPayloadBytes,%u,Header.PayloadLen,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v16), "GNC", 69, "xofScvs_InjectOrbitData", 770, v9, v22, dword_254011488);
      LbsOsaTrace_WriteLog(8u, __str, v17, 0, 1);
    }
    g_XofEeParseState = 2;
    g_XofBceParseState = 2;
  }
  return v9;
}

uint64_t xofScvs_InjectRtiData(signed __int8 *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char __str[1040];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v6 = mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 68, "xofScvs_InjectRtiData");
    LbsOsaTrace_WriteLog(8u, __str, v7, 5, 1);
  }
  if (a2 != 160 || !a1 || !a3)
  {
    v9 = 8;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
      return v9;
    bzero(__str, 0x410uLL);
    v13 = mach_continuous_time();
    v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx DataLen,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 69, "xofScvs_InjectRtiData", 515, a2);
    v9 = 8;
LABEL_13:
    v12 = 0;
    goto LABEL_14;
  }
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v8 = xofSvcs00_10ParseRtiData(a1, 160);
  if ((_DWORD)v8 != 1)
  {
    v9 = v8;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
      return v9;
    bzero(__str, 0x410uLL);
    v14 = mach_continuous_time();
    v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Parse failed,Rti cache not updated,RetVal,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v14), "GNC", 69, "xofScvs_InjectRtiData", 770, v9);
    goto LABEL_13;
  }
  memcpy_s("xofScvs_InjectRtiData", 216, &g_RtiRawData, 0xA0u, a1, 0xA0uLL);
  v9 = 1;
  g_RtiParseState = 1;
  *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 8) = DWORD1(g_RtiRawData) + 604800 * WORD1(g_RtiRawData);
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v10 = mach_continuous_time();
    v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 68, "xofScvs_InjectRtiData");
    v9 = 1;
    v12 = 5;
LABEL_14:
    LbsOsaTrace_WriteLog(8u, __str, v11, v12, 1);
  }
  return v9;
}

uint64_t xofSvcs_GetIonoModel(void *a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  char __str[1040];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetIonoModel");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_XofBceParseState == 1)
    {
      memcpy_s("xofSvcs_GetIonoModel", 249, a1, 8u, &g_PayLoad, 8uLL);
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
        return 1;
      bzero(__str, 0x410uLL);
      v4 = mach_continuous_time();
      v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "xofSvcs_GetIonoModel");
      v6 = 1;
      v7 = 5;
      goto LABEL_9;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 87, "xofSvcs_GetIonoModel", 769, g_XofBceParseState);
      LbsOsaTrace_WriteLog(8u, __str, v10, 2, 1);
    }
    if (g_XofBceParseState)
      return 5;
    else
      return 6;
  }
  else
  {
    v6 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v8 = mach_continuous_time();
      v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx IonoModel\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 69, "xofSvcs_GetIonoModel", 513);
      v7 = 0;
LABEL_9:
      LbsOsaTrace_WriteLog(8u, __str, v5, v7, 1);
    }
  }
  return v6;
}

uint64_t xofSvcs_GetGpsUTCModel(void *a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  char __str[1040];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetGpsUTCModel");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_XofBceParseState == 1)
    {
      memcpy_s("xofSvcs_GetGpsUTCModel", 274, a1, 0x14u, (char *)&g_PayLoad + 8, 0x14uLL);
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
        return 1;
      bzero(__str, 0x410uLL);
      v4 = mach_continuous_time();
      v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "xofSvcs_GetGpsUTCModel");
      v6 = 1;
      v7 = 5;
      goto LABEL_9;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 87, "xofSvcs_GetGpsUTCModel", 769, g_XofBceParseState);
      LbsOsaTrace_WriteLog(8u, __str, v10, 2, 1);
    }
    if (g_XofBceParseState)
      return 5;
    else
      return 6;
  }
  else
  {
    v6 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v8 = mach_continuous_time();
      v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GpsUtcModel\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 69, "xofSvcs_GetGpsUTCModel", 513);
      v7 = 0;
LABEL_9:
      LbsOsaTrace_WriteLog(8u, __str, v5, v7, 1);
    }
  }
  return v6;
}

uint64_t xofSvcs_GetGloChanMap(int a1, unsigned __int8 *a2)
{
  uint64_t v4;
  unsigned __int16 v5;
  unint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  unsigned __int16 v16;
  int v18;
  uint64_t v19;
  unsigned __int16 v20;
  unint64_t v21;
  unsigned __int16 v22;
  unint64_t v23;
  uint64_t v24;
  char __str[1040];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v4 = mach_continuous_time();
    v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "xofSvcs_GetGloChanMap");
    LbsOsaTrace_WriteLog(8u, __str, v5, 5, 1);
  }
  if ((a1 - 25) >= 0xFFFFFFE8 && a2)
  {
    if (g_XofBceParseState == 1)
    {
      if (!byte_25401146B && !byte_254011469 && !byte_25401146A)
      {
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
          return 6;
LABEL_10:
        bzero(__str, 0x410uLL);
        v6 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v6, "GNC", 68, "xofSvcs_GetGloChanMap");
        LbsOsaTrace_WriteLog(8u, __str, v7, 5, 1);
        return 6;
      }
      memcpy_s("xofSvcs_GetGloChanMap", 309, a2, 2u, (char *)&g_PayLoad + 2 * (a1 - 1) + 240, 2uLL);
      if (*a2 == a1)
      {
        v18 = a2[1];
        if (v18 == 99)
        {
          if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
          {
            bzero(__str, 0x410uLL);
            v19 = mach_continuous_time();
            v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SV,%u,ChanNum not known,%d\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNC", 73, "xofSvcs_GetGloChanMap", 0, *a2, (char)a2[1]);
            LbsOsaTrace_WriteLog(8u, __str, v20, 4, 1);
          }
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
            return 6;
          goto LABEL_10;
        }
        if ((v18 - 7) > 0xF1)
        {
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
            return 1;
          bzero(__str, 0x410uLL);
          v24 = mach_continuous_time();
          v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "GNC", 68, "xofSvcs_GetGloChanMap");
          v8 = 1;
          goto LABEL_16;
        }
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
          goto LABEL_34;
        bzero(__str, 0x410uLL);
        v23 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SvId,%u,ChanNum,%d\n", v23);
      }
      else
      {
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
          goto LABEL_34;
        bzero(__str, 0x410uLL);
        v21 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ReqSvId,%u,XofSvId,%u\n", v21);
      }
      LbsOsaTrace_WriteLog(8u, __str, v22, 2, 1);
LABEL_34:
      v8 = 8;
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
        return v8;
      goto LABEL_15;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v13 = mach_continuous_time();
      v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 87, "xofSvcs_GetGloChanMap", 769, g_XofBceParseState);
      LbsOsaTrace_WriteLog(8u, __str, v14, 2, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v15 = mach_continuous_time();
      v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 68, "xofSvcs_GetGloChanMap");
      LbsOsaTrace_WriteLog(8u, __str, v16, 5, 1);
    }
    if (g_XofBceParseState)
      return 5;
    else
      return 6;
  }
  else
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GloChanMap,SvId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 69, "xofSvcs_GetGloChanMap", 515, a1);
      LbsOsaTrace_WriteLog(8u, __str, v10, 0, 1);
    }
    v8 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
LABEL_15:
      bzero(__str, 0x410uLL);
      v11 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      v12 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v11, "GNC", 68, "xofSvcs_GetGloChanMap");
LABEL_16:
      LbsOsaTrace_WriteLog(8u, __str, v12, 5, 1);
    }
  }
  return v8;
}

uint64_t xofSvcs_GetTimeModel(int a1, void *a2)
{
  uint64_t v4;
  unsigned __int16 v5;
  unsigned __int16 v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  int v10;
  uint64_t v11;
  unsigned __int16 v12;
  uint64_t v13;
  char *v15;
  int v16;
  uint64_t v17;
  char __str[1040];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v4 = mach_continuous_time();
    v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "xofSvcs_GetTimeModel");
    LbsOsaTrace_WriteLog(8u, __str, v5, 5, 1);
  }
  if (a2)
  {
    if (g_XofBceParseState == 1)
    {
      switch(a1)
      {
        case 2:
          if (!BYTE1(xmmword_254011438) && __PAIR16__(BYTE2(xmmword_254011438), 0) == BYTE3(xmmword_254011438))
            goto LABEL_51;
          if ((_QWORD)xmmword_25401E928 || BYTE8(xmmword_25401E928))
          {
            v15 = (char *)&unk_25401E924;
            v16 = 381;
            goto LABEL_58;
          }
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
            goto LABEL_51;
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Sbas,TA0,0,TA1,0,TA2,0\n");
          goto LABEL_50;
        case 3:
          if (!byte_254011449 && !byte_25401144A && !byte_25401144B)
            goto LABEL_51;
          if (dword_25401E938 || dword_25401E93C || byte_25401E940)
          {
            v15 = (char *)&xmmword_25401E928 + 12;
            v16 = 404;
            goto LABEL_58;
          }
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
            goto LABEL_51;
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Qzss,TA0,0,TA1,0,TA2,0\n");
          goto LABEL_50;
        case 4:
          if (!BYTE1(xmmword_254011458) && __PAIR16__(BYTE2(xmmword_254011458), 0) == BYTE3(xmmword_254011458))
            goto LABEL_51;
          if ((_QWORD)xmmword_25401E948 || BYTE8(xmmword_25401E948))
          {
            v15 = (char *)&unk_25401E944;
            v16 = 427;
            goto LABEL_58;
          }
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
            goto LABEL_51;
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Gal,TA0,0,TA1,0,TA2,0\n");
          goto LABEL_50;
        case 5:
          if (!byte_254011469 && !byte_25401146A && !byte_25401146B)
            goto LABEL_51;
          if (dword_25401E958 || dword_25401E95C || byte_25401E960)
          {
            v15 = (char *)&xmmword_25401E948 + 12;
            v16 = 450;
            goto LABEL_58;
          }
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
            goto LABEL_51;
          bzero(__str, 0x410uLL);
          mach_continuous_time();
          v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Glo,TA0,0,TA1,0,TA2,0\n");
          goto LABEL_50;
        case 6:
          if (!BYTE1(xmmword_254011478) && __PAIR16__(BYTE2(xmmword_254011478), 0) == BYTE3(xmmword_254011478))
            goto LABEL_51;
          if ((_QWORD)xmmword_25401E968 || BYTE8(xmmword_25401E968))
          {
            v15 = (char *)&unk_25401E964;
            v16 = 473;
LABEL_58:
            memcpy_s("xofSvcs_GetTimeModel", v16, a2, 0x10u, v15, 0x10uLL);
            if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v17 = mach_continuous_time();
              v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNC", 68, "xofSvcs_GetTimeModel");
              v7 = 1;
              v10 = 5;
              goto LABEL_14;
            }
            v7 = 1;
          }
          else
          {
            if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              mach_continuous_time();
              v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Bds,TA0,0,TA1,0,TA2,0\n");
LABEL_50:
              LbsOsaTrace_WriteLog(8u, __str, v6, 4, 1);
            }
LABEL_51:
            v7 = 6;
          }
          break;
        default:
          v7 = 8;
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
            return v7;
          bzero(__str, 0x410uLL);
          v13 = mach_continuous_time();
          v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstelType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 87, "xofSvcs_GetTimeModel", 515, a1);
          v10 = 2;
          goto LABEL_14;
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v11 = mach_continuous_time();
        v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 87, "xofSvcs_GetTimeModel", 769, g_XofBceParseState);
        LbsOsaTrace_WriteLog(8u, __str, v12, 2, 1);
      }
      if (g_XofBceParseState)
        return 5;
      else
        return 6;
    }
  }
  else
  {
    v7 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v8 = mach_continuous_time();
      v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstelType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 69, "xofSvcs_GetTimeModel", 515, a1);
      v10 = 0;
LABEL_14:
      LbsOsaTrace_WriteLog(8u, __str, v9, v10, 1);
    }
  }
  return v7;
}

uint64_t xofSvcs_GetGpsSvOrbData(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  size_t v16;
  int v17;
  uint64_t v19;
  unsigned int v20;
  char __str[1040];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v6 = mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 68, "xofSvcs_GetGpsSvOrbData");
    LbsOsaTrace_WriteLog(8u, __str, v7, 5, 1);
  }
  if ((a2 - 33) >= 0xE0u && a3)
  {
    if (g_XofEeParseState == 1)
    {
      if (*((_QWORD *)&xmmword_25401E9C8 + 1) && xofSvcs01_02GetExtEphSvIndex(1, a2, a1, &v20) == 1)
      {
        memcpy_s("xofSvcs_GetGpsSvOrbData", 645, a3, 0x40u, (const void *)(*((_QWORD *)&xmmword_25401E9C8 + 1) + ((unint64_t)v20 << 6)), 0x40uLL);
        if (*a3 == a2)
        {
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
            return 1;
          bzero(__str, 0x410uLL);
          v8 = mach_continuous_time();
          v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 68, "xofSvcs_GetGpsSvOrbData");
          v10 = 1;
          v11 = 5;
          goto LABEL_13;
        }
        v10 = 0;
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
          return v10;
        bzero(__str, 0x410uLL);
        v19 = mach_continuous_time();
        v16 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Req Svid,%u,Resp Svid,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNC", 69, "xofSvcs_GetGpsSvOrbData", 770, a2, *a3);
        v17 = 0;
      }
      else
      {
        v10 = 0;
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
          return v10;
        bzero(__str, 0x410uLL);
        v15 = mach_continuous_time();
        v16 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SvId,%u,WeekN,%u,Tow,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 68, "xofSvcs_GetGpsSvOrbData", 769, a2, (unsigned __int16)a1, HIDWORD(a1));
        v17 = 5;
      }
      LbsOsaTrace_WriteLog(8u, __str, v16, v17, 1);
      return 0;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v13 = mach_continuous_time();
      v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofEeParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 87, "xofSvcs_GetGpsSvOrbData", 769, g_XofEeParseState);
      LbsOsaTrace_WriteLog(8u, __str, v14, 2, 1);
    }
    if (g_XofEeParseState)
      return 5;
    else
      return 6;
  }
  else
  {
    v10 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v12 = mach_continuous_time();
      v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GpsExtEphData,SvId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 69, "xofSvcs_GetGpsSvOrbData", 515, a2);
      v11 = 0;
LABEL_13:
      LbsOsaTrace_WriteLog(8u, __str, v9, v11, 1);
    }
  }
  return v10;
}

uint64_t xofSvcs01_02GetExtEphSvIndex(int a1, int a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int16 v11;
  unint64_t v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  size_t v15;
  int v16;
  unsigned int BlckLen;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  size_t v22;
  int v23;
  uint64_t result;
  int StartSv;
  unsigned int v26;
  int EeNumSats;
  unint64_t v28;
  int IsLoggingAllowed;
  uint64_t v30;
  unsigned __int16 v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int8 v34;
  char __str[1040];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v34 = 0;
  if (!xofSvcs00_23GetEeNumSats(a1) || (xofSvcs00_02SvIncluded(a1, a2) & 1) == 0)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v12 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstellType,%u,SvId,%u\n", v12, "GNC", 68, "xofSvcs01_02GetExtEphSvIndex", 769, a1, a2);
LABEL_22:
      v22 = v13;
      v23 = 5;
LABEL_23:
      LbsOsaTrace_WriteLog(8u, __str, v22, v23, 1);
    }
    return 6;
  }
  if (!xofSvcs00_23GetEeNumSats(a1))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
      goto LABEL_20;
    bzero(__str, 0x410uLL);
    v33 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstellType,%u\n", v33);
    goto LABEL_11;
  }
  v8 = HIDWORD(g_Header) + 604800 * WORD5(g_Header);
  v9 = HIDWORD(a3) + 604800 * (unsigned __int16)a3;
  if (v9 < v8)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      goto LABEL_20;
    bzero(__str, 0x410uLL);
    v10 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx StartTime,%llu,ReqTime,%llu,ConstellType,%u\n", v10, "GNC", 87);
LABEL_16:
    v15 = v11;
    v16 = 2;
    goto LABEL_19;
  }
  BlckLen = xofSvcs00_24GetBlckLen(a1);
  if (!BlckLen)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
      goto LABEL_20;
    bzero(__str, 0x410uLL);
    v20 = mach_continuous_time();
    v15 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstellType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v20), "GNC", 69, "xofSvcs01_01GetExtEphBlockNum", 515, a1);
    v16 = 0;
    goto LABEL_19;
  }
  v18 = (v9 - v8) / (3600 * (unint64_t)BlckLen);
  if (v18 >= 0x2B)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      goto LABEL_20;
    bzero(__str, 0x410uLL);
    v19 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ReqTime,%llu,ConstellType,%u,BlockNum,%llu\n", v19, "GNC", 87);
    goto LABEL_16;
  }
  if (v18 >= xofSvcs00_25GetEeNumBlks(a1))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
LABEL_20:
      if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v21 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
        v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstellType,%u,SvId,%u\n", v21, "GNC", 68, "xofSvcs01_02GetExtEphSvIndex", 769, a1, a2);
        goto LABEL_22;
      }
      return 6;
    }
    bzero(__str, 0x410uLL);
    v28 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ReqTime,%llu,ConstellType,%u,BlockNum,%llu\n", v28, "GNC", 68);
LABEL_11:
    v15 = v14;
    v16 = 5;
LABEL_19:
    LbsOsaTrace_WriteLog(8u, __str, v15, v16, 1);
    goto LABEL_20;
  }
  if (XofSvcs00_03GetSvIndexCrr(a1, a2, &v34) != 1)
    goto LABEL_20;
  StartSv = xofSvcs02_04GetStartSv(a1);
  if (StartSv)
  {
    v26 = xofSvcs00_23GetEeNumSats(a1) * v18 - (StartSv + v34) + a2;
    *a4 = v26;
    EeNumSats = xofSvcs00_23GetEeNumSats(a1);
    if (v26 < xofSvcs00_25GetEeNumBlks(a1) * EeNumSats)
      return 1;
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
      return 6;
    bzero(__str, 0x410uLL);
    v32 = mach_continuous_time();
    v22 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SvIndex,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v32), "GNC", 69, "xofSvcs01_02GetExtEphSvIndex", 772, *a4);
    v23 = 0;
    goto LABEL_23;
  }
  IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0);
  result = 0;
  if (IsLoggingAllowed)
  {
    bzero(__str, 0x410uLL);
    v30 = mach_continuous_time();
    v31 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstellType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v30), "GNC", 69, "xofSvcs01_02GetExtEphSvIndex", 515, a1);
    LbsOsaTrace_WriteLog(8u, __str, v31, 0, 1);
    return 0;
  }
  return result;
}

uint64_t xofSvcs_GetGloSvOrbData(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  size_t v16;
  int v17;
  uint64_t v19;
  unsigned int v20;
  char __str[1040];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v6 = mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 68, "xofSvcs_GetGloSvOrbData");
    LbsOsaTrace_WriteLog(8u, __str, v7, 5, 1);
  }
  if ((a2 - 25) >= 0xE8u && a3)
  {
    if (g_XofEeParseState == 1)
    {
      if ((_QWORD)xmmword_25401E9E8 && xofSvcs01_02GetExtEphSvIndex(5, a2, a1, &v20) == 1)
      {
        memcpy_s("xofSvcs_GetGloSvOrbData", 687, a3, 0x40u, (const void *)(xmmword_25401E9E8 + ((unint64_t)v20 << 6)), 0x40uLL);
        if (*a3 == a2)
        {
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
            return 1;
          bzero(__str, 0x410uLL);
          v8 = mach_continuous_time();
          v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 68, "xofSvcs_GetGloSvOrbData");
          v10 = 1;
          v11 = 5;
          goto LABEL_13;
        }
        v10 = 0;
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
          return v10;
        bzero(__str, 0x410uLL);
        v19 = mach_continuous_time();
        v16 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Req SvId,%u,Resp Svid,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNC", 69, "xofSvcs_GetGloSvOrbData", 770, a2, *a3);
        v17 = 0;
      }
      else
      {
        v10 = 0;
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
          return v10;
        bzero(__str, 0x410uLL);
        v15 = mach_continuous_time();
        v16 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SvId,%u,WeekN,%u,Tow%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 68, "xofSvcs_GetGloSvOrbData", 769, a2, (unsigned __int16)a1, HIDWORD(a1));
        v17 = 5;
      }
      LbsOsaTrace_WriteLog(8u, __str, v16, v17, 1);
      return 0;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v13 = mach_continuous_time();
      v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofEeParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 87, "xofSvcs_GetGloSvOrbData", 769, g_XofEeParseState);
      LbsOsaTrace_WriteLog(8u, __str, v14, 2, 1);
    }
    if (g_XofEeParseState)
      return 5;
    else
      return 6;
  }
  else
  {
    v10 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v12 = mach_continuous_time();
      v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GloExtEphData,SvId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 69, "xofSvcs_GetGloSvOrbData", 515, a2);
      v11 = 0;
LABEL_13:
      LbsOsaTrace_WriteLog(8u, __str, v9, v11, 1);
    }
  }
  return v10;
}

uint64_t xofSvcs_GetQzssSvOrbData(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  unsigned __int16 v18;
  unsigned int v20;
  char __str[1040];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v6 = mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 68, "xofSvcs_GetQzssSvOrbData");
    LbsOsaTrace_WriteLog(8u, __str, v7, 5, 1);
  }
  if ((a2 + 53) >= 0xF6u && a3)
  {
    if (g_XofEeParseState == 1)
    {
      if (qword_25401E9D8 && xofSvcs01_02GetExtEphSvIndex(3, a2, a1, &v20) == 1)
      {
        memcpy_s("xofSvcs_GetQzssSvOrbData", 729, a3, 0x40u, (const void *)(qword_25401E9D8 + ((unint64_t)v20 << 6)), 0x40uLL);
        if (*a3 == a2)
        {
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
            return 1;
          bzero(__str, 0x410uLL);
          v8 = mach_continuous_time();
          v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 68, "xofSvcs_GetQzssSvOrbData");
          v10 = 1;
          v11 = 5;
          goto LABEL_13;
        }
        if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v17 = mach_continuous_time();
          v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Req SvId,%u,Resp SvId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNC", 69, "xofSvcs_GetQzssSvOrbData", 770, a2, *a3);
          LbsOsaTrace_WriteLog(8u, __str, v18, 0, 1);
        }
        memset_s(a3, 0x40uLL, 0, 0x40uLL);
      }
      else
      {
        v10 = 0;
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
          return v10;
        bzero(__str, 0x410uLL);
        v15 = mach_continuous_time();
        v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SvId,%u,WeekNo,%u,Tow,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 68, "xofSvcs_GetQzssSvOrbData", 769, a2, (unsigned __int16)a1, HIDWORD(a1));
        LbsOsaTrace_WriteLog(8u, __str, v16, 5, 1);
      }
      return 0;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v13 = mach_continuous_time();
      v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofEeParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 87, "xofSvcs_GetQzssSvOrbData", 769, g_XofEeParseState);
      LbsOsaTrace_WriteLog(8u, __str, v14, 2, 1);
    }
    if (g_XofEeParseState)
      return 5;
    else
      return 6;
  }
  else
  {
    v10 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v12 = mach_continuous_time();
      v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx QzssExtEphData,SvId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 69, "xofSvcs_GetQzssSvOrbData", 513, a2);
      v11 = 0;
LABEL_13:
      LbsOsaTrace_WriteLog(8u, __str, v9, v11, 1);
    }
  }
  return v10;
}

uint64_t xofSvcs_GetGalSvOrbData(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  unsigned __int16 v18;
  unsigned int v20;
  char __str[1040];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v6 = mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 68, "xofSvcs_GetGalSvOrbData");
    LbsOsaTrace_WriteLog(8u, __str, v7, 5, 1);
  }
  if ((a2 - 37) >= 0xDCu && a3)
  {
    if (g_XofEeParseState == 1)
    {
      v20 = 0;
      if (qword_25401E9E0 && xofSvcs01_02GetExtEphSvIndex(4, a2, a1, &v20) == 1)
      {
        memcpy_s("xofSvcs_GetGalSvOrbData", 773, a3, 0x44u, (const void *)(qword_25401E9E0 + 68 * v20), 0x44uLL);
        if (*a3 == a2)
        {
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
            return 1;
          bzero(__str, 0x410uLL);
          v8 = mach_continuous_time();
          v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 68, "xofSvcs_GetGalSvOrbData");
          v10 = 1;
          v11 = 5;
          goto LABEL_13;
        }
        if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v17 = mach_continuous_time();
          v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Req SvId,%u,Resp SvId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNC", 69, "xofSvcs_GetGalSvOrbData", 770, a2, *a3);
          LbsOsaTrace_WriteLog(8u, __str, v18, 0, 1);
        }
        memset_s(a3, 0x44uLL, 0, 0x44uLL);
      }
      else
      {
        v10 = 0;
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
          return v10;
        bzero(__str, 0x410uLL);
        v15 = mach_continuous_time();
        v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SvId,%u,WeekNo,%u,Tow,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 68, "xofSvcs_GetGalSvOrbData", 769, a2, (unsigned __int16)a1, HIDWORD(a1));
        LbsOsaTrace_WriteLog(8u, __str, v16, 5, 1);
      }
      return 0;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v13 = mach_continuous_time();
      v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofEeParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 87, "xofSvcs_GetGalSvOrbData", 769, g_XofEeParseState);
      LbsOsaTrace_WriteLog(8u, __str, v14, 2, 1);
    }
    if (g_XofEeParseState)
      return 5;
    else
      return 6;
  }
  else
  {
    v10 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v12 = mach_continuous_time();
      v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GalExtEphData,SvId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 69, "xofSvcs_GetGalSvOrbData", 513, a2);
      v11 = 0;
LABEL_13:
      LbsOsaTrace_WriteLog(8u, __str, v9, v11, 1);
    }
  }
  return v10;
}

uint64_t xofSvcs_GetBdsSvOrbData(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  unsigned __int16 v18;
  unsigned int v20;
  char __str[1040];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v6 = mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v6), "GNC", 68, "xofSvcs_GetBdsSvOrbData");
    LbsOsaTrace_WriteLog(8u, __str, v7, 5, 1);
  }
  if ((a2 - 38) >= 0xDBu && a3)
  {
    if (g_XofEeParseState == 1)
    {
      if (*((_QWORD *)&xmmword_25401E9E8 + 1) && xofSvcs01_02GetExtEphSvIndex(6, a2, a1, &v20) == 1)
      {
        memcpy_s("xofSvcs_GetBdsSvOrbData", 817, a3, 0x54u, (const void *)(*((_QWORD *)&xmmword_25401E9E8 + 1) + 84 * v20), 0x54uLL);
        if (*a3 == a2)
        {
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
            return 1;
          bzero(__str, 0x410uLL);
          v8 = mach_continuous_time();
          v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 68, "xofSvcs_GetBdsSvOrbData");
          v10 = 1;
          v11 = 5;
          goto LABEL_13;
        }
        if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v17 = mach_continuous_time();
          v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Req SvId,%u,Resp SvId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNC", 69, "xofSvcs_GetBdsSvOrbData", 770, a2, *a3);
          LbsOsaTrace_WriteLog(8u, __str, v18, 0, 1);
        }
        memset_s(a3, 0x54uLL, 0, 0x54uLL);
      }
      else
      {
        v10 = 0;
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
          return v10;
        bzero(__str, 0x410uLL);
        v15 = mach_continuous_time();
        v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SvId,%u,WeekNo,%u,Tow,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 68, "xofSvcs_GetBdsSvOrbData", 769, a2, (unsigned __int16)a1, HIDWORD(a1));
        LbsOsaTrace_WriteLog(8u, __str, v16, 5, 1);
      }
      return 0;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v13 = mach_continuous_time();
      v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofEeParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 87, "xofSvcs_GetBdsSvOrbData", 769, g_XofEeParseState);
      LbsOsaTrace_WriteLog(8u, __str, v14, 2, 1);
    }
    if (g_XofEeParseState)
      return 5;
    else
      return 6;
  }
  else
  {
    v10 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v12 = mach_continuous_time();
      v9 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx BdsExtEphData,SvId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 69, "xofSvcs_GetBdsSvOrbData", 513, a2);
      v11 = 0;
LABEL_13:
      LbsOsaTrace_WriteLog(8u, __str, v9, v11, 1);
    }
  }
  return v10;
}

uint64_t xofSvcs_GetRtiData(int a1, int *a2)
{
  uint64_t v4;
  unsigned __int16 v5;
  void *v6;
  __int128 *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  int v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  char __str[1040];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v4 = mach_continuous_time();
    v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "xofSvcs_GetRtiData");
    LbsOsaTrace_WriteLog(8u, __str, v5, 5, 1);
  }
  if (a2)
  {
    if ((g_RtiParseState & 1) != 0)
    {
      *a2 = a1;
      switch(a1)
      {
        case 1:
          v6 = a2 + 1;
          v7 = (__int128 *)((char *)&g_RtiRawData + 8);
          v8 = 855;
          goto LABEL_21;
        case 2:
          v6 = a2 + 1;
          v7 = &xmmword_25401EA78;
          v8 = 860;
          goto LABEL_21;
        case 3:
          v6 = a2 + 1;
          v7 = (__int128 *)&unk_25401EA90;
          v8 = 865;
          goto LABEL_21;
        case 4:
          v6 = a2 + 1;
          v7 = (__int128 *)&unk_25401EAA8;
          v8 = 875;
          goto LABEL_21;
        case 5:
          v6 = a2 + 1;
          v7 = (__int128 *)((char *)&xmmword_25401EAB8 + 8);
          v8 = 870;
          goto LABEL_21;
        case 6:
          v6 = a2 + 1;
          v7 = &xmmword_25401EAD8;
          v8 = 881;
LABEL_21:
          memcpy_s("xofSvcs_GetRtiData", v8, v6, 0x18u, v7, 0x18uLL);
          if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
          {
            bzero(__str, 0x410uLL);
            v17 = mach_continuous_time();
            v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNC", 68, "xofSvcs_GetRtiData");
            v9 = 1;
            v12 = 5;
            goto LABEL_23;
          }
          v9 = 1;
          break;
        default:
          v9 = 0;
          if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
          {
            bzero(__str, 0x410uLL);
            v15 = mach_continuous_time();
            v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Constel,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 69, "xofSvcs_GetRtiData", 514, a1);
            LbsOsaTrace_WriteLog(8u, __str, v16, 0, 1);
            return 0;
          }
          return v9;
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v13 = mach_continuous_time();
        v14 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RtiParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 87, "xofSvcs_GetRtiData", 769, g_RtiParseState);
        LbsOsaTrace_WriteLog(8u, __str, v14, 2, 1);
      }
      if (g_RtiParseState)
        return 5;
      else
        return 6;
    }
  }
  else
  {
    v9 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v10 = mach_continuous_time();
      v11 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RtiData,ConstellType,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 69, "xofSvcs_GetRtiData", 515, a1);
      v12 = 0;
LABEL_23:
      LbsOsaTrace_WriteLog(8u, __str, v11, v12, 1);
    }
  }
  return v9;
}

uint64_t xofSvcs_GetGpsAlmData(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  void *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  unsigned __int16 v13;
  char __str[1040];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetGpsAlmData");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_XofBceParseState == 1)
    {
      if (!byte_254011429)
        return 6;
      if (qword_25401E978)
      {
        v4 = gnssOsa_Calloc("xofSvcs_GetGpsAlmData", 933, byte_254011429, 0x20uLL);
        *(_QWORD *)(a1 + 8) = v4;
        if (!v4)
          return 7;
        memcpy_s("xofSvcs_GetGpsAlmData", 941, v4, 32 * byte_254011429, (const void *)qword_25401E978, 32 * byte_254011429);
        *(_BYTE *)a1 = byte_254011429;
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
          return 1;
        bzero(__str, 0x410uLL);
        v5 = mach_continuous_time();
        v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "xofSvcs_GetGpsAlmData");
        v7 = 1;
        v8 = 5;
        goto LABEL_12;
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v12 = mach_continuous_time();
        v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GPS Alm data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "xofSvcs_GetGpsAlmData", 769);
        LbsOsaTrace_WriteLog(8u, __str, v13, 2, 1);
      }
      return 9;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v10 = mach_continuous_time();
        v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "xofSvcs_GetGpsAlmData", 769, g_XofBceParseState);
        LbsOsaTrace_WriteLog(8u, __str, v11, 2, 1);
      }
      if (g_XofBceParseState)
        return 5;
      else
        return 6;
    }
  }
  else
  {
    v7 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GpsAlmData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 69, "xofSvcs_GetGpsAlmData", 513);
      v8 = 0;
LABEL_12:
      LbsOsaTrace_WriteLog(8u, __str, v6, v8, 1);
    }
  }
  return v7;
}

uint64_t xofSvcs_GetQzssAlmData(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  void *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  unsigned __int16 v13;
  char __str[1040];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetQzssAlmData");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_XofBceParseState == 1)
    {
      if (!byte_254011449)
        return 6;
      if (qword_25401E980)
      {
        v4 = gnssOsa_Calloc("xofSvcs_GetQzssAlmData", 982, byte_254011449, 0x20uLL);
        *(_QWORD *)(a1 + 8) = v4;
        if (!v4)
          return 7;
        memcpy_s("xofSvcs_GetQzssAlmData", 990, v4, 32 * byte_254011449, (const void *)qword_25401E980, 32 * byte_254011449);
        *(_BYTE *)a1 = byte_254011449;
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
          return 1;
        bzero(__str, 0x410uLL);
        v5 = mach_continuous_time();
        v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "xofSvcs_GetQzssAlmData");
        v7 = 1;
        v8 = 5;
        goto LABEL_12;
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v12 = mach_continuous_time();
        v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Qzss Alm data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "xofSvcs_GetQzssAlmData", 769);
        LbsOsaTrace_WriteLog(8u, __str, v13, 2, 1);
      }
      return 9;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v10 = mach_continuous_time();
        v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "xofSvcs_GetQzssAlmData", 769, g_XofBceParseState);
        LbsOsaTrace_WriteLog(8u, __str, v11, 2, 1);
      }
      if (g_XofBceParseState)
        return 5;
      else
        return 6;
    }
  }
  else
  {
    v7 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx QzssAlmData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 69, "xofSvcs_GetQzssAlmData", 513);
      v8 = 0;
LABEL_12:
      LbsOsaTrace_WriteLog(8u, __str, v6, v8, 1);
    }
  }
  return v7;
}

size_t xofSvcs_ClrOrbData(void)
{
  uint64_t v0;
  unsigned __int16 v1;
  uint64_t v2;
  unsigned __int16 v3;
  size_t result;
  uint64_t v5;
  unsigned __int16 v6;
  char __str[1040];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v0 = mach_continuous_time();
    v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 68, "xofSvcs_ClrOrbData");
    LbsOsaTrace_WriteLog(8u, __str, v1, 5, 1);
  }
  g_XofEeParseState = 0;
  g_XofBceParseState = 0;
  if (qword_25401E978)
    free((void *)qword_25401E978);
  qword_25401E978 = 0;
  if (qword_25401E980)
    free((void *)qword_25401E980);
  qword_25401E980 = 0;
  if ((_QWORD)xmmword_25401E988)
    free((void *)xmmword_25401E988);
  *(_QWORD *)&xmmword_25401E988 = 0;
  if (*((_QWORD *)&xmmword_25401E988 + 1))
    free(*((void **)&xmmword_25401E988 + 1));
  *((_QWORD *)&xmmword_25401E988 + 1) = 0;
  if (qword_25401E998)
    free((void *)qword_25401E998);
  qword_25401E998 = 0;
  if (qword_25401E9A0)
    free((void *)qword_25401E9A0);
  qword_25401E9A0 = 0;
  if ((_QWORD)xmmword_25401E9A8)
    free((void *)xmmword_25401E9A8);
  *(_QWORD *)&xmmword_25401E9A8 = 0;
  if (*((_QWORD *)&xmmword_25401E9A8 + 1))
    free(*((void **)&xmmword_25401E9A8 + 1));
  *((_QWORD *)&xmmword_25401E9A8 + 1) = 0;
  if (qword_25401E9B8)
    free((void *)qword_25401E9B8);
  qword_25401E9B8 = 0;
  if (qword_25401E9C0)
    free((void *)qword_25401E9C0);
  qword_25401E9C0 = 0;
  if ((_QWORD)xmmword_25401E9C8)
    free((void *)xmmword_25401E9C8);
  *(_QWORD *)&xmmword_25401E9C8 = 0;
  if (*((_QWORD *)&xmmword_25401E9C8 + 1))
    free(*((void **)&xmmword_25401E9C8 + 1));
  *((_QWORD *)&xmmword_25401E9C8 + 1) = 0;
  if (qword_25401E9D8)
    free((void *)qword_25401E9D8);
  qword_25401E9D8 = 0;
  if (qword_25401E9E0)
    free((void *)qword_25401E9E0);
  qword_25401E9E0 = 0;
  if ((_QWORD)xmmword_25401E9E8)
    free((void *)xmmword_25401E9E8);
  *(_QWORD *)&xmmword_25401E9E8 = 0;
  if (*((_QWORD *)&xmmword_25401E9E8 + 1))
    free(*((void **)&xmmword_25401E9E8 + 1));
  xmmword_254011478 = 0u;
  *(_OWORD *)&dword_254011488 = 0u;
  xmmword_254011458 = 0u;
  unk_254011468 = 0u;
  xmmword_254011438 = 0u;
  unk_254011448 = 0u;
  g_Header = 0u;
  unk_254011428 = 0u;
  g_PayLoad = 0u;
  unk_25401E918 = 0u;
  xmmword_25401E928 = 0u;
  *(_OWORD *)&dword_25401E938 = 0u;
  xmmword_25401E948 = 0u;
  *(_OWORD *)&dword_25401E958 = 0u;
  xmmword_25401E968 = 0u;
  *(_OWORD *)&qword_25401E978 = 0u;
  xmmword_25401E988 = 0u;
  *(_OWORD *)&qword_25401E998 = 0u;
  xmmword_25401E9A8 = 0u;
  *(_OWORD *)&qword_25401E9B8 = 0u;
  xmmword_25401E9C8 = 0u;
  *(_OWORD *)&qword_25401E9D8 = 0u;
  xmmword_25401E9E8 = 0u;
  unk_25401E9F8 = 0u;
  xmmword_25401EA08 = 0u;
  unk_25401EA18 = 0u;
  xmmword_25401EA28 = 0u;
  *(_OWORD *)&qword_25401EA38 = 0u;
  xmmword_25401EA48 = 0u;
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Orb data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "xofSvcs_ClrOrbData", 0);
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  result = LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0);
  if ((_DWORD)result)
  {
    bzero(__str, 0x410uLL);
    v5 = mach_continuous_time();
    v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "xofSvcs_ClrOrbData");
    return LbsOsaTrace_WriteLog(8u, __str, v6, 5, 1);
  }
  return result;
}

size_t xofSvcs_ClrRtiData(void)
{
  uint64_t v0;
  unsigned __int16 v1;
  uint64_t v2;
  unsigned __int16 v3;
  size_t result;
  uint64_t v5;
  unsigned __int16 v6;
  char __str[1040];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v0 = mach_continuous_time();
    v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 68, "xofSvcs_ClrRtiData");
    LbsOsaTrace_WriteLog(8u, __str, v1, 5, 1);
  }
  xmmword_25401EAD8 = 0u;
  unk_25401EAE8 = 0u;
  xmmword_25401EAB8 = 0u;
  unk_25401EAC8 = 0u;
  xmmword_25401EA98 = 0u;
  unk_25401EAA8 = 0u;
  xmmword_25401EA78 = 0u;
  unk_25401EA88 = 0u;
  g_RtiRawData = 0u;
  unk_25401EA68 = 0u;
  g_RtiParseState = 0;
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Rti data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "xofSvcs_ClrRtiData", 0);
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  result = LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0);
  if ((_DWORD)result)
  {
    bzero(__str, 0x410uLL);
    v5 = mach_continuous_time();
    v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "xofSvcs_ClrRtiData");
    return LbsOsaTrace_WriteLog(8u, __str, v6, 5, 1);
  }
  return result;
}

size_t xofSvcs_ClrBceOrbData(void)
{
  uint64_t v0;
  unsigned __int16 v1;
  uint64_t v2;
  unsigned __int16 v3;
  size_t result;
  uint64_t v5;
  unsigned __int16 v6;
  char __str[1040];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v0 = mach_continuous_time();
    v1 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v0), "GNC", 68, "xofSvcs_ClrBceOrbData");
    LbsOsaTrace_WriteLog(8u, __str, v1, 5, 1);
  }
  if (qword_25401E978)
    free((void *)qword_25401E978);
  qword_25401E978 = 0;
  if (qword_25401E980)
    free((void *)qword_25401E980);
  qword_25401E980 = 0;
  if ((_QWORD)xmmword_25401E988)
    free((void *)xmmword_25401E988);
  *(_QWORD *)&xmmword_25401E988 = 0;
  if (*((_QWORD *)&xmmword_25401E988 + 1))
    free(*((void **)&xmmword_25401E988 + 1));
  *((_QWORD *)&xmmword_25401E988 + 1) = 0;
  if (qword_25401E998)
    free((void *)qword_25401E998);
  qword_25401E998 = 0;
  if (qword_25401E9A0)
    free((void *)qword_25401E9A0);
  qword_25401E9A0 = 0;
  if ((_QWORD)xmmword_25401E9A8)
    free((void *)xmmword_25401E9A8);
  *(_QWORD *)&xmmword_25401E9A8 = 0;
  if (*((_QWORD *)&xmmword_25401E9A8 + 1))
    free(*((void **)&xmmword_25401E9A8 + 1));
  *((_QWORD *)&xmmword_25401E9A8 + 1) = 0;
  if (qword_25401E9B8)
    free((void *)qword_25401E9B8);
  qword_25401E9B8 = 0;
  if (qword_25401E9C0)
    free((void *)qword_25401E9C0);
  qword_25401E9C0 = 0;
  if ((_QWORD)xmmword_25401E9C8)
    free((void *)xmmword_25401E9C8);
  *(_QWORD *)&xmmword_25401E9C8 = 0;
  g_PayLoad = 0u;
  unk_25401E918 = 0u;
  xmmword_25401E928 = 0u;
  *(_OWORD *)&dword_25401E938 = 0u;
  xmmword_25401E948 = 0u;
  *(__int128 *)((char *)&xmmword_25401E948 + 12) = 0u;
  memset_s(&unk_25401E9F8, 0x30uLL, 0, 0x30uLL);
  g_XofBceParseState = 0;
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx BCE data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 73, "xofSvcs_ClrBceOrbData", 0);
    LbsOsaTrace_WriteLog(8u, __str, v3, 4, 1);
  }
  result = LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0);
  if ((_DWORD)result)
  {
    bzero(__str, 0x410uLL);
    v5 = mach_continuous_time();
    v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "xofSvcs_ClrBceOrbData");
    return LbsOsaTrace_WriteLog(8u, __str, v6, 5, 1);
  }
  return result;
}

uint64_t xofSvcs_GetGloAlmData(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  void *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  unsigned __int16 v13;
  char __str[1040];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetGloAlmData");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_XofBceParseState == 1)
    {
      if (!byte_254011469)
        return 6;
      if ((_QWORD)xmmword_25401E988)
      {
        v4 = gnssOsa_Calloc("xofSvcs_GetGloAlmData", 1125, byte_254011469, 0x24uLL);
        *(_QWORD *)(a1 + 8) = v4;
        if (!v4)
          return 7;
        memcpy_s("xofSvcs_GetGloAlmData", 1133, v4, 36 * byte_254011469, (const void *)xmmword_25401E988, 36 * byte_254011469);
        *(_BYTE *)a1 = byte_254011469;
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
          return 1;
        bzero(__str, 0x410uLL);
        v5 = mach_continuous_time();
        v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "xofSvcs_GetGloAlmData");
        v7 = 1;
        v8 = 5;
        goto LABEL_12;
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v12 = mach_continuous_time();
        v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GLONASS Alm data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "xofSvcs_GetGloAlmData", 769);
        LbsOsaTrace_WriteLog(8u, __str, v13, 2, 1);
      }
      return 9;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v10 = mach_continuous_time();
        v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "xofSvcs_GetGloAlmData", 769, g_XofBceParseState);
        LbsOsaTrace_WriteLog(8u, __str, v11, 2, 1);
      }
      if (g_XofBceParseState)
        return 5;
      else
        return 6;
    }
  }
  else
  {
    v7 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GloAlmData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 69, "xofSvcs_GetGloAlmData", 513);
      v8 = 0;
LABEL_12:
      LbsOsaTrace_WriteLog(8u, __str, v6, v8, 1);
    }
  }
  return v7;
}

uint64_t xofSvcs_GetGalAlmData(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  void *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  unsigned __int16 v13;
  char __str[1040];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetGalAlmData");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_XofBceParseState == 1)
    {
      if (!BYTE1(xmmword_254011458))
        return 6;
      if (*((_QWORD *)&xmmword_25401E988 + 1))
      {
        v4 = gnssOsa_Calloc("xofSvcs_GetGalAlmData", 1173, BYTE1(xmmword_254011458), 0x1CuLL);
        *(_QWORD *)(a1 + 8) = v4;
        if (!v4)
          return 7;
        memcpy_s("xofSvcs_GetGalAlmData", 1181, v4, 28 * BYTE1(xmmword_254011458), *((const void **)&xmmword_25401E988 + 1), 28 * BYTE1(xmmword_254011458));
        *(_BYTE *)a1 = BYTE1(xmmword_254011458);
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
          return 1;
        bzero(__str, 0x410uLL);
        v5 = mach_continuous_time();
        v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "xofSvcs_GetGalAlmData");
        v7 = 1;
        v8 = 5;
        goto LABEL_12;
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v12 = mach_continuous_time();
        v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GAL Alm data\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "xofSvcs_GetGalAlmData", 769);
        LbsOsaTrace_WriteLog(8u, __str, v13, 2, 1);
      }
      return 9;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v10 = mach_continuous_time();
        v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "xofSvcs_GetGalAlmData", 769, g_XofBceParseState);
        LbsOsaTrace_WriteLog(8u, __str, v11, 2, 1);
      }
      if (g_XofBceParseState)
        return 5;
      else
        return 6;
    }
  }
  else
  {
    v7 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GalAlmData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 69, "xofSvcs_GetGalAlmData", 513);
      v8 = 0;
LABEL_12:
      LbsOsaTrace_WriteLog(8u, __str, v6, v8, 1);
    }
  }
  return v7;
}

uint64_t xofSvcs_GetGpsBrdCstEphData(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  void *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  unsigned __int16 v13;
  char __str[1040];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetGpsBrdCstEphData");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_XofBceParseState == 1)
    {
      if (!byte_25401142A)
        return 6;
      if (qword_25401E9A0)
      {
        v4 = gnssOsa_Calloc("xofSvcs_GetGpsBrdCstEphData", 1272, byte_25401142A, 0x40uLL);
        *(_QWORD *)(a1 + 8) = v4;
        if (!v4)
          return 7;
        memcpy_s("xofSvcs_GetGpsBrdCstEphData", 1280, v4, byte_25401142A << 6, (const void *)qword_25401E9A0, byte_25401142A << 6);
        *(_BYTE *)a1 = byte_25401142A;
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
          return 1;
        bzero(__str, 0x410uLL);
        v5 = mach_continuous_time();
        v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "xofSvcs_GetGpsBrdCstEphData");
        v7 = 1;
        v8 = 5;
        goto LABEL_12;
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v12 = mach_continuous_time();
        v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GPS BCE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "xofSvcs_GetGpsBrdCstEphData", 769);
        LbsOsaTrace_WriteLog(8u, __str, v13, 2, 1);
      }
      return 9;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v10 = mach_continuous_time();
        v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "xofSvcs_GetGpsBrdCstEphData", 769, g_XofBceParseState);
        LbsOsaTrace_WriteLog(8u, __str, v11, 2, 1);
      }
      if (g_XofBceParseState)
        return 5;
      else
        return 6;
    }
  }
  else
  {
    v7 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GpsBrdCstEphData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 69, "xofSvcs_GetGpsBrdCstEphData", 513);
      v8 = 0;
LABEL_12:
      LbsOsaTrace_WriteLog(8u, __str, v6, v8, 1);
    }
  }
  return v7;
}

uint64_t xofSvcs_GetQzssBrdCstEphData(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  void *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  unsigned __int16 v13;
  char __str[1040];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetQzssBrdCstEphData");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_XofBceParseState == 1)
    {
      if (!byte_25401144A)
        return 6;
      if (*((_QWORD *)&xmmword_25401E9A8 + 1))
      {
        v4 = gnssOsa_Calloc("xofSvcs_GetQzssBrdCstEphData", 1321, byte_25401144A, 0x40uLL);
        *(_QWORD *)(a1 + 8) = v4;
        if (!v4)
          return 7;
        memcpy_s("xofSvcs_GetQzssBrdCstEphData", 1329, v4, byte_25401144A << 6, *((const void **)&xmmword_25401E9A8 + 1), byte_25401144A << 6);
        *(_BYTE *)a1 = byte_25401144A;
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
          return 1;
        bzero(__str, 0x410uLL);
        v5 = mach_continuous_time();
        v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "xofSvcs_GetQzssBrdCstEphData");
        v7 = 1;
        v8 = 5;
        goto LABEL_12;
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v12 = mach_continuous_time();
        v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Qzss BCE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "xofSvcs_GetQzssBrdCstEphData", 769);
        LbsOsaTrace_WriteLog(8u, __str, v13, 2, 1);
      }
      return 9;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v10 = mach_continuous_time();
        v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "xofSvcs_GetQzssBrdCstEphData", 769, g_XofBceParseState);
        LbsOsaTrace_WriteLog(8u, __str, v11, 2, 1);
      }
      if (g_XofBceParseState)
        return 5;
      else
        return 6;
    }
  }
  else
  {
    v7 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx QzssBrdCstEphData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 69, "xofSvcs_GetQzssBrdCstEphData", 513);
      v8 = 0;
LABEL_12:
      LbsOsaTrace_WriteLog(8u, __str, v6, v8, 1);
    }
  }
  return v7;
}

uint64_t xofSvcs_GetGloBrdCstEphData(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  void *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  unsigned __int16 v13;
  char __str[1040];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetGloBrdCstEphData");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_XofBceParseState == 1)
    {
      if (!byte_25401146A)
        return 6;
      if (qword_25401E9C0)
      {
        v4 = gnssOsa_Calloc("xofSvcs_GetGloBrdCstEphData", 1369, byte_25401146A, 0x2CuLL);
        *(_QWORD *)(a1 + 8) = v4;
        if (!v4)
          return 7;
        memcpy_s("xofSvcs_GetGloBrdCstEphData", 1377, v4, 44 * byte_25401146A, (const void *)qword_25401E9C0, 44 * byte_25401146A);
        *(_BYTE *)a1 = byte_25401146A;
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
          return 1;
        bzero(__str, 0x410uLL);
        v5 = mach_continuous_time();
        v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "xofSvcs_GetGloBrdCstEphData");
        v7 = 1;
        v8 = 5;
        goto LABEL_12;
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v12 = mach_continuous_time();
        v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GLONASS BCE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "xofSvcs_GetGloBrdCstEphData", 769);
        LbsOsaTrace_WriteLog(8u, __str, v13, 2, 1);
      }
      return 9;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v10 = mach_continuous_time();
        v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "xofSvcs_GetGloBrdCstEphData", 769, g_XofBceParseState);
        LbsOsaTrace_WriteLog(8u, __str, v11, 2, 1);
      }
      if (g_XofBceParseState)
        return 5;
      else
        return 6;
    }
  }
  else
  {
    v7 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GloBrdCstEphData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 69, "xofSvcs_GetGloBrdCstEphData", 513);
      v8 = 0;
LABEL_12:
      LbsOsaTrace_WriteLog(8u, __str, v6, v8, 1);
    }
  }
  return v7;
}

uint64_t xofSvcs_GetGalBrdCstEphData(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  void *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  unsigned __int16 v13;
  char __str[1040];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetGalBrdCstEphData");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_XofBceParseState == 1)
    {
      if (!BYTE2(xmmword_254011458))
        return 6;
      if (qword_25401E9B8)
      {
        v4 = gnssOsa_Calloc("xofSvcs_GetGalBrdCstEphData", 1417, BYTE2(xmmword_254011458), 0x44uLL);
        *(_QWORD *)(a1 + 8) = v4;
        if (!v4)
          return 7;
        memcpy_s("xofSvcs_GetGalBrdCstEphData", 1425, v4, 68 * BYTE2(xmmword_254011458), (const void *)qword_25401E9B8, 68 * BYTE2(xmmword_254011458));
        *(_BYTE *)a1 = BYTE2(xmmword_254011458);
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
          return 1;
        bzero(__str, 0x410uLL);
        v5 = mach_continuous_time();
        v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "xofSvcs_GetGalBrdCstEphData");
        v7 = 1;
        v8 = 5;
        goto LABEL_12;
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v12 = mach_continuous_time();
        v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GAL BCE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "xofSvcs_GetGalBrdCstEphData", 769);
        LbsOsaTrace_WriteLog(8u, __str, v13, 2, 1);
      }
      return 9;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v10 = mach_continuous_time();
        v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "xofSvcs_GetGalBrdCstEphData", 769, g_XofBceParseState);
        LbsOsaTrace_WriteLog(8u, __str, v11, 2, 1);
      }
      if (g_XofBceParseState)
        return 5;
      else
        return 6;
    }
  }
  else
  {
    v7 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx GalBrdCstEphData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 69, "xofSvcs_GetGalBrdCstEphData", 513);
      v8 = 0;
LABEL_12:
      LbsOsaTrace_WriteLog(8u, __str, v6, v8, 1);
    }
  }
  return v7;
}

uint64_t xofSvcs_GetBdsBrdCstEphData(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  void *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  unsigned __int16 v13;
  char __str[1040];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetBdsBrdCstEphData");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_XofBceParseState == 1)
    {
      if (!BYTE2(xmmword_254011478))
        return 6;
      if ((_QWORD)xmmword_25401E9C8)
      {
        v4 = gnssOsa_Calloc("xofSvcs_GetBdsBrdCstEphData", 1466, BYTE2(xmmword_254011478), 0x54uLL);
        *(_QWORD *)(a1 + 8) = v4;
        if (!v4)
          return 7;
        memcpy_s("xofSvcs_GetBdsBrdCstEphData", 1474, v4, 84 * BYTE2(xmmword_254011478), (const void *)xmmword_25401E9C8, 84 * BYTE2(xmmword_254011478));
        *(_BYTE *)a1 = BYTE2(xmmword_254011478);
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
          return 1;
        bzero(__str, 0x410uLL);
        v5 = mach_continuous_time();
        v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "xofSvcs_GetBdsBrdCstEphData");
        v7 = 1;
        v8 = 5;
        goto LABEL_12;
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v12 = mach_continuous_time();
        v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx BDS BCE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "xofSvcs_GetBdsBrdCstEphData", 769);
        LbsOsaTrace_WriteLog(8u, __str, v13, 2, 1);
      }
      return 9;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v10 = mach_continuous_time();
        v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "xofSvcs_GetBdsBrdCstEphData", 769, g_XofBceParseState);
        LbsOsaTrace_WriteLog(8u, __str, v11, 2, 1);
      }
      if (g_XofBceParseState)
        return 5;
      else
        return 6;
    }
  }
  else
  {
    v7 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx BdsBrdCstEphData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 69, "xofSvcs_GetBdsBrdCstEphData", 513);
      v8 = 0;
LABEL_12:
      LbsOsaTrace_WriteLog(8u, __str, v6, v8, 1);
    }
  }
  return v7;
}

uint64_t xofSvcs_GetSbasBrdCstEphData(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  void *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  unsigned __int16 v13;
  char __str[1040];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetSbasBrdCstEphData");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_XofBceParseState == 1)
    {
      if (!BYTE2(xmmword_254011438))
        return 6;
      if ((_QWORD)xmmword_25401E9A8)
      {
        v4 = gnssOsa_Calloc("xofSvcs_GetSbasBrdCstEphData", 1515, BYTE2(xmmword_254011438), 0x28uLL);
        *(_QWORD *)(a1 + 8) = v4;
        if (!v4)
          return 7;
        memcpy_s("xofSvcs_GetSbasBrdCstEphData", 1523, v4, 40 * BYTE2(xmmword_254011438), (const void *)xmmword_25401E9A8, 40 * BYTE2(xmmword_254011438));
        *(_BYTE *)a1 = BYTE2(xmmword_254011438);
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
          return 1;
        bzero(__str, 0x410uLL);
        v5 = mach_continuous_time();
        v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "xofSvcs_GetSbasBrdCstEphData");
        v7 = 1;
        v8 = 5;
        goto LABEL_12;
      }
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v12 = mach_continuous_time();
        v13 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SBAS BCE\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 87, "xofSvcs_GetSbasBrdCstEphData", 769);
        LbsOsaTrace_WriteLog(8u, __str, v13, 2, 1);
      }
      return 9;
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v10 = mach_continuous_time();
        v11 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v10), "GNC", 87, "xofSvcs_GetSbasBrdCstEphData", 769, g_XofBceParseState);
        LbsOsaTrace_WriteLog(8u, __str, v11, 2, 1);
      }
      if (g_XofBceParseState)
        return 5;
      else
        return 6;
    }
  }
  else
  {
    v7 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v6 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SbasBrdCstEphData\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 69, "xofSvcs_GetSbasBrdCstEphData", 513);
      v8 = 0;
LABEL_12:
      LbsOsaTrace_WriteLog(8u, __str, v6, v8, 1);
    }
  }
  return v7;
}

uint64_t xofSvcs_GetBlockLen(int a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t BlckLen;
  uint64_t v5;
  unsigned __int16 v6;
  uint64_t v7;
  unsigned __int16 v8;
  char __str[1040];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetBlockLen");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (g_XofEeParseState == 1)
  {
    BlckLen = xofSvcs00_24GetBlckLen(a1);
    if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v5 = mach_continuous_time();
      v6 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5), "GNC", 68, "xofSvcs_GetBlockLen");
      LbsOsaTrace_WriteLog(8u, __str, v6, 5, 1);
    }
  }
  else
  {
    BlckLen = 0;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v7 = mach_continuous_time();
      v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofEeParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 87, "xofSvcs_GetBlockLen", 769, g_XofEeParseState);
      LbsOsaTrace_WriteLog(8u, __str, v8, 2, 1);
      return 0;
    }
  }
  return BlckLen;
}

uint64_t xofSvcs_GetXofInjctTime(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  char __str[1040];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetXofInjctTime");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_XofBceParseState == 1)
    {
      *(_WORD *)a1 = WORD1(g_Header);
      *(_DWORD *)(a1 + 4) = DWORD1(g_Header);
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
        return 1;
      bzero(__str, 0x410uLL);
      v4 = mach_continuous_time();
      v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "xofSvcs_GetXofInjctTime");
      v6 = 1;
      v7 = 5;
      goto LABEL_9;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 87, "xofSvcs_GetXofInjctTime", 769, g_XofBceParseState);
      LbsOsaTrace_WriteLog(8u, __str, v10, 2, 1);
    }
    return 9;
  }
  else
  {
    v6 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v8 = mach_continuous_time();
      v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofInjctTime\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "xofSvcs_GetXofInjctTime", 513);
      v7 = 2;
LABEL_9:
      LbsOsaTrace_WriteLog(8u, __str, v5, v7, 1);
    }
  }
  return v6;
}

uint64_t xofSvcs_GetRtiInjctTime(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  char __str[1040];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetRtiInjctTime");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if ((g_RtiParseState & 1) != 0)
    {
      *(_WORD *)a1 = WORD1(g_RtiRawData);
      *(_DWORD *)(a1 + 4) = DWORD1(g_RtiRawData);
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
        return 1;
      bzero(__str, 0x410uLL);
      v4 = mach_continuous_time();
      v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "xofSvcs_GetRtiInjctTime");
      v6 = 1;
      v7 = 5;
      goto LABEL_9;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RtiParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 87, "xofSvcs_GetRtiInjctTime", 769, g_RtiParseState);
      LbsOsaTrace_WriteLog(8u, __str, v10, 2, 1);
    }
    return 9;
  }
  else
  {
    v6 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v8 = mach_continuous_time();
      v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx RtiInjctTime\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "xofSvcs_GetRtiInjctTime", 513);
      v7 = 2;
LABEL_9:
      LbsOsaTrace_WriteLog(8u, __str, v5, v7, 1);
    }
  }
  return v6;
}

uint64_t xofSvcs_GetXofEEStartTime(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  char __str[1040];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v2 = mach_continuous_time();
    v3 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v2), "GNC", 68, "xofSvcs_GetXofEEStartTime");
    LbsOsaTrace_WriteLog(8u, __str, v3, 5, 1);
  }
  if (a1)
  {
    if (g_XofBceParseState == 1)
    {
      *(_WORD *)a1 = WORD5(g_Header);
      *(_DWORD *)(a1 + 4) = HIDWORD(g_Header);
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
        return 1;
      bzero(__str, 0x410uLL);
      v4 = mach_continuous_time();
      v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "xofSvcs_GetXofEEStartTime");
      v6 = 1;
      v7 = 5;
      goto LABEL_9;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v9 = mach_continuous_time();
      v10 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 87, "xofSvcs_GetXofEEStartTime", 769, g_XofBceParseState);
      LbsOsaTrace_WriteLog(8u, __str, v10, 2, 1);
    }
    return 6;
  }
  else
  {
    v6 = 8;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v8 = mach_continuous_time();
      v5 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofEeStartTime\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v8), "GNC", 87, "xofSvcs_GetXofEEStartTime", 513);
      v7 = 2;
LABEL_9:
      LbsOsaTrace_WriteLog(8u, __str, v5, v7, 1);
    }
  }
  return v6;
}

uint64_t xofSvcs_GetXofBrdSvBitMask(int a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned __int16 v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int16 v15;
  unint64_t v17;
  char __str[1040];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v4 = mach_continuous_time();
    v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Entry\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 68, "xofSvcs_GetXofBrdSvBitMask");
    LbsOsaTrace_WriteLog(8u, __str, v5, 5, 1);
  }
  if (a2)
  {
    if (g_XofBceParseState == 1)
    {
      switch(a1)
      {
        case 1:
          if (!byte_25401142E)
            goto LABEL_32;
          v6 = xmmword_25401EA28;
          goto LABEL_29;
        case 2:
          if (!BYTE6(xmmword_254011438))
            goto LABEL_32;
          v6 = *((_QWORD *)&xmmword_25401EA28 + 1);
          goto LABEL_29;
        case 3:
          if (!byte_25401144E)
            goto LABEL_32;
          v6 = qword_25401EA38;
          goto LABEL_29;
        case 4:
          if (!BYTE6(xmmword_254011458))
            goto LABEL_32;
          v6 = qword_25401EA40;
          goto LABEL_29;
        case 5:
          if (!byte_25401146E)
            goto LABEL_32;
          v6 = xmmword_25401EA48;
          goto LABEL_29;
        case 6:
          if (BYTE6(xmmword_254011478))
          {
            v6 = *((_QWORD *)&xmmword_25401EA48 + 1);
LABEL_29:
            *a2 = v6;
            if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v13 = mach_continuous_time();
              v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v13), "GNC", 68, "xofSvcs_GetXofBrdSvBitMask");
              v8 = 1;
              goto LABEL_31;
            }
            return 1;
          }
LABEL_32:
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
            return 6;
          break;
        default:
          if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
            goto LABEL_11;
          bzero(__str, 0x410uLL);
          v17 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
          v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstelType,%u\n", v17);
          goto LABEL_10;
      }
    }
    else
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v11 = mach_continuous_time();
        v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx XofBceParseState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 87, "xofSvcs_GetXofBrdSvBitMask", 769, g_XofBceParseState);
        LbsOsaTrace_WriteLog(8u, __str, v12, 2, 1);
      }
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
        return 6;
    }
    bzero(__str, 0x410uLL);
    v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v15 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", v14, "GNC", 68, "xofSvcs_GetXofBrdSvBitMask");
    LbsOsaTrace_WriteLog(8u, __str, v15, 5, 1);
    return 6;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
  {
    bzero(__str, 0x410uLL);
    mach_continuous_time();
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx BrdSvBitMask\n");
LABEL_10:
    LbsOsaTrace_WriteLog(8u, __str, v7, 2, 1);
  }
LABEL_11:
  v8 = 8;
  if (LbsOsaTrace_IsLoggingAllowed(8u, 5, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v9 = mach_continuous_time();
    v10 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: Exit\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v9), "GNC", 68, "xofSvcs_GetXofBrdSvBitMask");
LABEL_31:
    LbsOsaTrace_WriteLog(8u, __str, v10, 5, 1);
  }
  return v8;
}

void GncP26_05HandlePowerRepMsg(unsigned __int8 *a1, _DWORD *a2)
{
  uint64_t v4;
  unsigned __int16 v5;
  unsigned int PlcHwType;
  unsigned __int16 v7;
  size_t v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  unsigned __int16 v20;
  uint64_t v21;
  unsigned __int16 v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64x2_t v28;
  int8x16_t v29;
  int8x16_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  double v38;
  unsigned int v39;
  unsigned __int8 v40;
  BOOL v41;
  int v42;
  double v43;
  uint64_t v44;
  unsigned __int16 v45;
  uint64_t v46;
  unsigned __int16 v47;
  uint64_t v48;
  unsigned __int16 v49;
  uint64_t v50;
  unsigned __int16 v51;
  unint64_t v52;
  uint64_t v53;
  unsigned __int16 v54;
  uint64_t v55;
  uint64_t v56;
  uint64x2_t v57;
  int8x16_t v58;
  int8x16_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  double v64;
  unint64_t v65;
  double v66;
  unint64_t v67;
  double v68;
  double v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  double v73;
  uint64_t v74;
  unsigned __int16 v75;
  double v76;
  double v77;
  uint64_t v78;
  unsigned __int16 v79;
  unsigned int v80;
  unsigned int v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  uint64_t v87;
  unsigned __int16 v88;
  uint64_t v89;
  unsigned __int16 v90;
  uint64_t v91;
  unsigned __int16 v92;
  uint64_t v93;
  unsigned __int16 v94;
  unsigned int v95;
  uint64_t v96;
  unsigned __int16 v97;
  uint64_t v98;
  unsigned __int16 v99;
  unsigned int v100;
  unsigned int v101;
  double v102;
  double v103;
  double v104;
  uint64_t v105;
  unsigned __int16 v106;
  double *v107;
  double *v108;
  unsigned int v109;
  double v110;
  uint64_t v111;
  unsigned __int16 v112;
  uint64_t v113;
  unsigned __int16 v114;
  uint64_t v115;
  unsigned __int16 v116;
  unsigned int v117;
  unsigned int v118;
  double v119;
  double v120;
  double v121;
  uint64_t v122;
  unsigned __int16 v123;
  uint64_t v124;
  unsigned __int16 v125;
  double v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  unsigned __int16 v130;
  uint64_t v131;
  unsigned __int16 v132;
  uint64_t v133;
  unsigned __int16 v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char __str[1040];
  uint64_t v139;

  v139 = *MEMORY[0x24BDAC8D0];
  if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
  {
    bzero(__str, 0x410uLL);
    v4 = mach_continuous_time();
    v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Rx ZX%c%c%c\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 73, "GncP26_05HandlePowerRepMsg", *a1, a1[1], a1[2]);
    LbsOsaTrace_WriteLog(8u, __str, v5, 4, 1);
  }
  PlcHwType = GncP05_62GetPlcHwType();
  if (PlcHwType > 5)
    return;
  if (((1 << PlcHwType) & 0x35) != 0)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      return;
    bzero(__str, 0x410uLL);
    v136 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx PoweRep GCPU,HwType,%hhu\n", v136);
    goto LABEL_7;
  }
  if (PlcHwType == 1)
  {
    v10 = a1[2];
    if (v10 == 77)
    {
      if (a2[1])
      {
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v15 = mach_continuous_time();
          v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Strt,%u,MeasInt,%u,ActInt,%u,RunTm,%u,BBTick,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 73, "GncP26_01MePowerRptV1", *a2, a2[1], a2[2], a2[5], a2[24]);
          LbsOsaTrace_WriteLog(8u, __str, v16, 4, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v17 = mach_continuous_time();
          v18 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SlpTm,%u,CpuTm,%u,SrchTm,%u,TrkTm,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v17), "GNC", 73, "GncP26_01MePowerRptV1", a2[7], a2[8], a2[10], a2[11]);
          LbsOsaTrace_WriteLog(8u, __str, v18, 4, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v19 = mach_continuous_time();
          v20 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ClkFrq,%u,SE,%u,TEAcc,%u,TETde,%u,QE,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v19), "GNC", 73, "GncP26_01MePowerRptV1", a2[13], a2[14], a2[15], a2[16], a2[17]);
          LbsOsaTrace_WriteLog(8u, __str, v20, 4, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v21 = mach_continuous_time();
          v22 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: RF,%u,PreBnd,%u,AGC,%u,Notch,%u,Scan,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v21), "GNC", 73, "GncP26_01MePowerRptV1", *((unsigned __int16 *)a2 + 36), *((unsigned __int8 *)a2 + 74), *((unsigned __int8 *)a2 + 75), *((unsigned __int16 *)a2 + 38), *((unsigned __int16 *)a2 + 39));
          LbsOsaTrace_WriteLog(8u, __str, v22, 4, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v24 = mach_continuous_time();
          v25 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PME,%u,Viterbi,%u,Dspi,%u,Dwb,%u,Spur,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v24), "GNC", 73, "GncP26_01MePowerRptV1", *((unsigned __int16 *)a2 + 42), *((unsigned __int16 *)a2 + 43), *((unsigned __int16 *)a2 + 44), *((unsigned __int16 *)a2 + 45), *((unsigned __int16 *)a2 + 46));
          LbsOsaTrace_WriteLog(8u, __str, v25, 4, 1);
        }
        LODWORD(v23) = a2[1];
        *(double *)&v26 = (double)v23;
        v27 = *((_QWORD *)a2 + 7);
        v28.i64[0] = v27;
        v28.i64[1] = HIDWORD(v27);
        v29 = (int8x16_t)vdivq_f64(vmulq_f64(vcvtq_f64_u64(v28), (float64x2_t)xmmword_21E7FA5F0), (float64x2_t)vdupq_lane_s64(v26, 0));
        v30 = vextq_s8(v29, v29, 8uLL);
        *(int8x16_t *)&qword_25401F5F0 = v30;
        v30.i32[0] = a2[17];
        v31 = 0x3F7CCCCCCCCCCCCDLL;
        LOWORD(v31) = *((_WORD *)a2 + 38);
        v32 = 0x3FC47AE147AE147BLL;
        *(double *)&qword_25401F5E8 = (double)v31 * 0.16 / *(double *)&v26;
        LOWORD(v32) = *((_WORD *)a2 + 39);
        v33 = 0x4010666666666666;
        *(double *)&qword_25401F5E0 = (double)v32 * 4.1 / *(double *)&v26;
        LOWORD(v33) = *((_WORD *)a2 + 42);
        v34 = 0x3FE947AE147AE148;
        LOWORD(v34) = *((_WORD *)a2 + 43);
        v35 = 0x3FD3333333333333;
        *(double *)&qword_25401F5D0 = (double)v34 * 0.3 / *(double *)&v26;
        *(double *)&qword_25401F5D8 = (double)v33 * 0.79 / *(double *)&v26;
        LOWORD(v35) = *((_WORD *)a2 + 46);
        HIDWORD(v36) = 1071770501;
        *(double *)&qword_25401F5C0 = (double)v30.u64[0] * 0.00703125 / *(double *)&v26;
        *(double *)&qword_25401F5C8 = (double)v35 * 0.56 / *(double *)&v26;
        LODWORD(v36) = a2[8];
        HIDWORD(v37) = 1075485081;
        *(double *)&qword_25401F5B8 = (double)v36 * 6.65 / *(double *)&v26;
        LODWORD(v37) = a2[2];
        *(double *)&qword_25401F600 = (double)v37 * 6.7 / *(double *)&v26;
        v38 = *(double *)&qword_25401F5B8
            + *(double *)&qword_25401F5C8
            + *(double *)&qword_25401F5D0
            + *(double *)&qword_25401F5D8
            + *(double *)&qword_25401F5E0
            + *(double *)&qword_25401F5E8
            + *(double *)&qword_25401F5C0
            + *(double *)&v29.i64[1]
            + *(double *)v29.i64
            + *(double *)&qword_25401F600;
        v39 = *((unsigned __int8 *)a2 + 74);
        if (*((_BYTE *)a2 + 74))
        {
          v40 = 0;
          do
          {
            v40 += v39 & 1;
            v41 = v39 > 1;
            v39 >>= 1;
          }
          while (v41);
          v42 = v40;
          if (v40 >= 3u)
          {
            v43 = 9.2;
            if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v124 = mach_continuous_time();
              v125 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NumConst,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v124), "GNC", 73, "GncP26_01MePowerRptV1", v42);
              LbsOsaTrace_WriteLog(8u, __str, v125, 4, 1);
            }
          }
          else
          {
            v43 = dbl_21E7FA6B8[(char)v40];
          }
        }
        else
        {
          v42 = 0;
          v43 = 0.0;
        }
        v126 = v38 + v43;
        v128 = a2[1];
        v127 = a2[2];
        *(double *)&qword_25401F5B0 = (double)v127 * 15.5 / (double)v128;
        *(double *)&qword_25401F638 = v126 / 1.1 + *(double *)&qword_25401F5B0 * 1.25;
        dword_25401F62C = a2[24];
        unk_25401F630 = v128;
        dword_25401F634 = v127;
        dword_25401F598 = a2[7];
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v129 = mach_continuous_time();
          v130 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: IdleCur,%.2f,MECPU,%.2f,SE,%.2f,TEACC,%.2f,QE,%.2f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v129), "GNC", 73, "GncP26_01MePowerRptV1", *(double *)&qword_25401F600, *(double *)&qword_25401F5B8, *(double *)&qword_25401F5F8, *(double *)&qword_25401F5F0, *(double *)&qword_25401F5C0);
          LbsOsaTrace_WriteLog(8u, __str, v130, 4, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v131 = mach_continuous_time();
          v132 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Notch,%.2f,Scan,%.2f,PME,%.2f,Viterbi,%.2f,Spur,%.2f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v131), "GNC", 73, "GncP26_01MePowerRptV1", *(double *)&qword_25401F5E8, *(double *)&qword_25401F5E0, *(double *)&qword_25401F5D8, *(double *)&qword_25401F5D0, *(double *)&qword_25401F5C8);
          LbsOsaTrace_WriteLog(8u, __str, v132, 4, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v133 = mach_continuous_time();
          v134 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: RF,%.2f,NumConst,%u,Band,%.2f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v133), "GNC", 73, "GncP26_01MePowerRptV1", *(double *)&qword_25401F5B0, v42, v43);
          LbsOsaTrace_WriteLog(8u, __str, v134, 4, 1);
        }
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v135 = mach_continuous_time();
          v8 = (unsigned __int16)snprintf(__str, 0x40FuLL, "%10u %s%c %s: MENonRf,%f,TotMEPow,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v135), "GNC", 73, "GncP26_01MePowerRptV1", v126, *(double *)&qword_25401F638);
          v9 = 4;
          goto LABEL_8;
        }
        return;
      }
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        return;
      goto LABEL_72;
    }
    if (v10 == 80)
    {
      if (dword_25401F62C)
      {
        v11 = a2[1];
        if (v11)
        {
          if (a2[2] <= v11)
          {
            if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v96 = mach_continuous_time();
              v97 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Strt,%u,MeasInt,%u,ActInt,%u,ClkFrq,%u,Tsk1,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v96), "GNC", 73, "GncP26_02CpPowerRptV1", *a2, a2[1], a2[2], *((unsigned __int16 *)a2 + 6), a2[4]);
              LbsOsaTrace_WriteLog(8u, __str, v97, 4, 1);
            }
            if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v98 = mach_continuous_time();
              v99 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Tsk2,%u,Tsk3,%u,Tsk4,%u,Tsk5,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v98), "GNC", 73, "GncP26_02CpPowerRptV1", a2[5], a2[6], a2[7], a2[8]);
              LbsOsaTrace_WriteLog(8u, __str, v99, 4, 1);
            }
            v101 = a2[1];
            v100 = a2[2];
            v102 = (double)v100 / (double)v101 * 2.5;
            v103 = (double)(v101 - v100) / (double)v101 * 0.64;
            v104 = (v102 + v103) / 1.1;
            if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
            {
              bzero(__str, 0x410uLL);
              v105 = mach_continuous_time();
              v106 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CPCPU ActCur,%f,IdlCur,%f,Pow,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v105), "GNC", 73, "GncP26_02CpPowerRptV1", v102, v103, (v102 + v103) / 1.1);
              LbsOsaTrace_WriteLog(8u, __str, v106, 4, 1);
            }
            v107 = (double *)gnssOsa_Calloc("GncP26_02CpPowerRptV1", 422, 1, 0x20uLL);
            if (v107)
            {
              v108 = v107;
              *((_DWORD *)v107 + 3) = dword_25401F62C;
              v109 = unk_25401F630;
              *((_QWORD *)v107 + 2) = unk_25401F630;
              v110 = v104 + *(double *)&qword_25401F638;
              v107[3] = v104 + *(double *)&qword_25401F638;
              word_25401F59C = *((_WORD *)a2 + 6);
              *(_QWORD *)&dword_25401F5A0 = *(_QWORD *)(a2 + 1);
              *(double *)&qword_25401F608 = v110 / 0.85;
              *(double *)&qword_25401F610 = v110 / 0.85 * (double)v109 * 0.001;
              *(double *)&qword_25401F618 = v110 / 0.85 / 3.7;
              if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
              {
                bzero(__str, 0x410uLL);
                v111 = mach_continuous_time();
                v112 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_POW_REP_IND =>GNM Tick,%u,MeasInt,%u,ActInt,%u,Pow,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v111), "GNC", 73, "GncP26_02CpPowerRptV1", *((_DWORD *)v108 + 3), *((_DWORD *)v108 + 4), *((_DWORD *)v108 + 5), v108[3]);
                LbsOsaTrace_WriteLog(8u, __str, v112, 4, 1);
              }
              AgpsSendFsmMsg(134, 128, 8786179, v108);
              GncP26_06SndNmeaDebugPowerMsg();
            }
          }
          else if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
          {
            goto LABEL_24;
          }
          return;
        }
        if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
          return;
LABEL_72:
        bzero(__str, 0x410uLL);
        mach_continuous_time();
        v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MeasIntMs,0\n");
        goto LABEL_7;
      }
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        return;
LABEL_59:
      bzero(__str, 0x410uLL);
      mach_continuous_time();
      v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NO ME Power Report\n");
      goto LABEL_7;
    }
LABEL_25:
    if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v137 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
      v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ZXOP Extn,%u\n", v137);
      goto LABEL_7;
    }
    return;
  }
  v12 = a1[2];
  if (v12 == 77)
  {
    if (!a2[1])
    {
      if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
        return;
      goto LABEL_72;
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v44 = mach_continuous_time();
      v45 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Strt,%u,MeasInt,%u,ActInt,%u,RunTm,%u,BBTick,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v44), "GNC", 73, "GncP26_04MePowerRptV2", *a2, a2[1], a2[2], a2[5], a2[24]);
      LbsOsaTrace_WriteLog(8u, __str, v45, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v46 = mach_continuous_time();
      v47 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: SlpTm,%u,CpuTm,%u,SrchTm,%u,TrkTm,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v46), "GNC", 73, "GncP26_04MePowerRptV2", a2[7], a2[8], a2[10], a2[11]);
      LbsOsaTrace_WriteLog(8u, __str, v47, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v48 = mach_continuous_time();
      v49 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: ClkFrq,%u,SE,%u,TEAcc,%u,TETde,%u,QE,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v48), "GNC", 73, "GncP26_04MePowerRptV2", a2[13], a2[14], a2[15], a2[16], a2[17]);
      LbsOsaTrace_WriteLog(8u, __str, v49, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v50 = mach_continuous_time();
      v51 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: RF,%u,PreBnd,%u,AGC,%u,Notch,%u,Scan,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v50), "GNC", 73, "GncP26_04MePowerRptV2", *((unsigned __int16 *)a2 + 36), *((unsigned __int8 *)a2 + 74), *((unsigned __int8 *)a2 + 75), *((unsigned __int16 *)a2 + 38), *((unsigned __int16 *)a2 + 39));
      LbsOsaTrace_WriteLog(8u, __str, v51, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v53 = mach_continuous_time();
      v54 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: PME,%u,Viterbi,%u,Dspi,%u,Dwb,%u,Spur,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v53), "GNC", 73, "GncP26_04MePowerRptV2", *((unsigned __int16 *)a2 + 42), *((unsigned __int16 *)a2 + 43), *((unsigned __int16 *)a2 + 44), *((unsigned __int16 *)a2 + 45), *((unsigned __int16 *)a2 + 46));
      LbsOsaTrace_WriteLog(8u, __str, v54, 4, 1);
    }
    LODWORD(v52) = a2[1];
    *(double *)&v55 = (double)v52;
    v56 = *((_QWORD *)a2 + 7);
    v57.i64[0] = v56;
    v57.i64[1] = HIDWORD(v56);
    v58 = (int8x16_t)vdivq_f64(vmulq_f64(vcvtq_f64_u64(v57), (float64x2_t)xmmword_21E7FA5E0), (float64x2_t)vdupq_lane_s64(v55, 0));
    v59 = vextq_s8(v58, v58, 8uLL);
    *(int8x16_t *)&qword_25401F5F0 = v59;
    v59.i16[0] = *((_WORD *)a2 + 38);
    v60 = 0x3FC1EB851EB851ECLL;
    *(double *)&qword_25401F5E8 = (double)v59.u64[0] * 0.14 / *(double *)&v55;
    LOWORD(v60) = *((_WORD *)a2 + 39);
    v61 = 0x400CCCCCCCCCCCCDLL;
    *(double *)&qword_25401F5E0 = (double)v60 * 3.6 / *(double *)&v55;
    LOWORD(v61) = *((_WORD *)a2 + 42);
    v62 = 0.25;
    LOWORD(v62) = *((_WORD *)a2 + 43);
    *(double *)&v63 = (double)v62 * 0.3;
    v64 = *(double *)&v63 / *(double *)&v55;
    LOWORD(v63) = *((_WORD *)a2 + 46);
    *(double *)&v65 = (double)v63 * 0.45;
    v66 = *(double *)&v65 / *(double *)&v55;
    qword_25401F5D0 = *(_QWORD *)&v64;
    *(double *)&qword_25401F5D8 = (double)v61 * 0.25 / *(double *)&v55;
    *(double *)&qword_25401F5C8 = *(double *)&v65 / *(double *)&v55;
    LODWORD(v65) = a2[8];
    *(double *)&v67 = (double)v65 * 11.2;
    v68 = *(double *)&v67 / *(double *)&v55;
    *(double *)&qword_25401F5B8 = *(double *)&v67 / *(double *)&v55;
    LODWORD(v67) = a2[2];
    *(double *)&qword_25401F600 = (double)v67 * 2.4 / *(double *)&v55;
    v69 = *(double *)&qword_25401F5D8
        + *(double *)&qword_25401F5E0
        + *(double *)&qword_25401F5E8
        + *(double *)&v58.i64[1]
        + *(double *)v58.i64
        + *(double *)&qword_25401F600;
    v70 = *((unsigned __int8 *)a2 + 74);
    v71 = ((v70 >> 1) & 1) + (v70 & 1) + ((v70 & 4) >> 2);
    v72 = ((v70 >> 4) & 1) + ((v70 >> 5) & 1);
    if (v71 >= 3)
    {
      v73 = 8.2;
      if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v74 = mach_continuous_time();
        v75 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NumL1Const,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v74), "GNC", 73, "GncP26_04MePowerRptV2", ((v70 >> 1) & 1) + (v70 & 1) + ((v70 & 4) >> 2));
        LbsOsaTrace_WriteLog(8u, __str, v75, 4, 1);
      }
    }
    else
    {
      v73 = dbl_21E7FA6D0[v71];
    }
    v76 = v64 + v69;
    if (v72)
    {
      if (v72 == 1)
      {
        v77 = 6.5;
      }
      else
      {
        v77 = 7.8;
        if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
        {
          bzero(__str, 0x410uLL);
          v78 = mach_continuous_time();
          v79 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: NumL5Const,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v78), "GNC", 73, "GncP26_04MePowerRptV2", v72);
          LbsOsaTrace_WriteLog(8u, __str, v79, 4, 1);
        }
      }
    }
    else
    {
      v77 = 0.0;
    }
    v80 = a2[2];
    v81 = a2[1];
    if ((v70 & 4) != 0)
      v82 = (double)v80 * 12.1 / (double)v81;
    else
      v82 = (double)(11 * v80 / v81);
    if (v72)
      v83 = (double)(5 * v80 / v81);
    else
      v83 = 0.0;
    v84 = (double)v80 * 0.5 / (double)v81;
    v85 = v68 + v66 + v76 + v73 + v77;
    v86 = v82 + v83;
    *(double *)&qword_25401F5B0 = v84 + v86;
    *(double *)&qword_25401F638 = v86 * 1.15 + v85 * 0.9 + v84 * 1.8;
    dword_25401F62C = a2[24];
    unk_25401F630 = v81;
    dword_25401F634 = v80;
    dword_25401F598 = a2[7];
    g_PowerMeas = 1000 * (*a2 / 0x249F000u);
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v87 = mach_continuous_time();
      v88 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: StartTmMs,%u,IdleCur,%.2f,MECPU,%.2f,SE,%.2f,TEACC,%.2f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v87), "GNC", 73, "GncP26_04MePowerRptV2", g_PowerMeas, *(double *)&qword_25401F600, *(double *)&qword_25401F5B8, *(double *)&qword_25401F5F8, *(double *)&qword_25401F5F0);
      LbsOsaTrace_WriteLog(8u, __str, v88, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v89 = mach_continuous_time();
      v90 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Notch,%.2f,Scan,%.2f,PME,%.2f,Viterbi,%.2f,Spur,%.2f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v89), "GNC", 73, "GncP26_04MePowerRptV2", *(double *)&qword_25401F5E8, *(double *)&qword_25401F5E0, *(double *)&qword_25401F5D8, *(double *)&qword_25401F5D0, *(double *)&qword_25401F5C8);
      LbsOsaTrace_WriteLog(8u, __str, v90, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v91 = mach_continuous_time();
      v92 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: RF,%.2f,NumConst,%u,NumL5Const,%u,BdsUsed,%u,PreBand,%.2f,PreBandL5,%.2f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v91), "GNC", 73, "GncP26_04MePowerRptV2", *(double *)&qword_25401F5B0, v71, v72, (v70 >> 2) & 1, v73, v77);
      LbsOsaTrace_WriteLog(8u, __str, v92, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v93 = mach_continuous_time();
      v94 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: MENonRf,%f,TotMEPow,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v93), "GNC", 73, "GncP26_04MePowerRptV2", v85, *(double *)&qword_25401F638);
      LbsOsaTrace_WriteLog(8u, __str, v94, 4, 1);
    }
    v95 = g_PowerMeas - dword_25401F594;
LABEL_109:
    if (v95 <= 0x31)
      GncP26_07SndPowerRptV2();
    return;
  }
  if (v12 != 80)
    goto LABEL_25;
  if (!dword_25401F62C)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      return;
    goto LABEL_59;
  }
  v13 = a2[1];
  if (!v13)
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      return;
    goto LABEL_72;
  }
  if (a2[2] <= v13)
  {
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v113 = mach_continuous_time();
      v114 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Strt,%u,MeasInt,%u,ActInt,%u,ClkFrq,%u,Tsk1,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v113), "GNC", 73, "GncP26_03CpPowerRptV2", *a2, a2[1], a2[2], *((unsigned __int16 *)a2 + 6), a2[4]);
      LbsOsaTrace_WriteLog(8u, __str, v114, 4, 1);
    }
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v115 = mach_continuous_time();
      v116 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: Tsk2,%u,Tsk3,%u,Tsk4,%u,Tsk5,%u,Tsk6,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v115), "GNC", 73, "GncP26_03CpPowerRptV2", a2[5], a2[6], a2[7], a2[8], a2[9]);
      LbsOsaTrace_WriteLog(8u, __str, v116, 4, 1);
    }
    v118 = a2[1];
    v117 = a2[2];
    v119 = 1.0 / (double)v118;
    v120 = v119 * (double)v117 * 2.2;
    v121 = v119 * (double)(v118 - v117) * 0.64;
    *(double *)&qword_25401F5A8 = (v120 + v121) * 0.9;
    word_25401F59C = *((_WORD *)a2 + 6);
    dword_25401F5A0 = v118;
    unk_25401F5A4 = v117;
    dword_25401F594 = 1000 * (*a2 / 0x249F000u);
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v122 = mach_continuous_time();
      v123 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: CPCPU StartTmMs,%u,ActCur,%f,IdlCur,%f,Pow,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v122), "GNC", 73, "GncP26_03CpPowerRptV2", dword_25401F594, v120, v121, *(double *)&qword_25401F5A8);
      LbsOsaTrace_WriteLog(8u, __str, v123, 4, 1);
    }
    v95 = dword_25401F594 - g_PowerMeas;
    goto LABEL_109;
  }
  if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
  {
LABEL_24:
    bzero(__str, 0x410uLL);
    v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v7 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Strt,%u,MeasInt,%u,ActInt,%u\n", v14, "GNC");
LABEL_7:
    v8 = v7;
    v9 = 2;
LABEL_8:
    LbsOsaTrace_WriteLog(8u, __str, v8, v9, 1);
  }
}

void GncP26_06SndNmeaDebugPowerMsg(void)
{
  __int16 v0;
  int IsLoggingAllowed;
  uint64_t v2;
  unsigned __int16 v3;
  const char *v4;
  uint64_t v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  unsigned __int16 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  char v19[1040];
  char __str[1024];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v0 = g_GncPCntxtInfo;
  IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(1u, 4, 0, 0);
  if ((IsLoggingAllowed & 1) == 0 && (v0 & 0x200) == 0)
    return;
  bzero(__str, 0x400uLL);
  v18 = snprintf(__str, 0x400uLL, "$PDPMT,%u,%u,%u,%u", dword_25401F62C, unk_25401F630, dword_25401F634, dword_25401F598);
  if (!HswUtil_AddNmeaCS(__str, 0x400u, &v18))
  {
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
      return;
    bzero(v19, 0x410uLL);
    v5 = mach_continuous_time();
    v16 = v18;
    v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v5);
    v4 = "%10u %s%c %s: #%04hx BytesWritten,%u\n";
    goto LABEL_13;
  }
  v2 = v18;
  if (v18 >= 0x400u)
    goto LABEL_9;
  v3 = 1024 - v18;
  v18 = snprintf(&__str[v18], 1024 - v18, "$PDPMC,%u,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f", dword_25401F62C, *(double *)&qword_25401F600, *(double *)&qword_25401F5F8, *(double *)&qword_25401F5F0, *(double *)&qword_25401F5E8, *(double *)&qword_25401F5E0, *(double *)&qword_25401F5D8, *(double *)&qword_25401F5D0, *(double *)&qword_25401F5C8, *(double *)&qword_25401F5C0, *(double *)&qword_25401F5B8, *(double *)&qword_25401F5B0);
  if (!HswUtil_AddNmeaCS(&__str[v2], v3, &v18))
    goto LABEL_28;
  v2 = (unsigned __int16)(v18 + v2);
  if (v2 >= 0x400)
  {
LABEL_9:
    if (!LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
      return;
    bzero(v19, 0x410uLL);
    v16 = v2;
    v15 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v4 = "%10u %s%c %s: #%04hx NmeaLen,%u\n";
LABEL_13:
    v6 = snprintf(v19, 0x40FuLL, v4, v15, "GNC", 69, "GncP26_06SndNmeaDebugPowerMsg", 772, v16, v17);
LABEL_14:
    LbsOsaTrace_WriteLog(8u, v19, v6, 0, 1);
    return;
  }
  v18 = snprintf(&__str[v2], (1024 - v2), "$PDPGT,%u,%u,%u,%u,%u", dword_25401F62C, dword_25401F5A0, unk_25401F5A4, dword_25401F5A0 - unk_25401F5A4, (unsigned __int16)word_25401F59C);
  if (HswUtil_AddNmeaCS(&__str[v2], (unsigned __int16)(1024 - v2), &v18))
  {
    v2 = (unsigned __int16)(v18 + v2);
    if (v2 >= 0x400)
      goto LABEL_9;
    v18 = snprintf(&__str[v2], (1024 - v2), "$PDPTM,%u,%u,%u,%.3f,%.3f,%.3f", dword_25401F62C, unk_25401F630, dword_25401F634, *(double *)&qword_25401F618, *(double *)&qword_25401F608, *(double *)&qword_25401F610);
    if (HswUtil_AddNmeaCS(&__str[v2], (unsigned __int16)(1024 - v2), &v18))
    {
      v7 = v18 + v2;
      if (v7 < 0x401u)
        v8 = IsLoggingAllowed;
      else
        v8 = 0;
      if (v8 == 1)
        LbsOsaTrace_PrintAsciiBuf(1u, 4u, 0, (uint64_t)__str, v7);
      if ((v0 & 0x200) != 0)
      {
        v9 = gnssOsa_Calloc("GncP26_06SndNmeaDebugPowerMsg", 218, 1, 0x18uLL);
        if (v9)
        {
          v10 = v9;
          v11 = gnssOsa_Calloc("GncP26_06SndNmeaDebugPowerMsg", 227, (unsigned __int16)(v7 + 1), 1uLL);
          v10[2] = v11;
          if (v11)
          {
            memcpy_s("GncP26_06SndNmeaDebugPowerMsg", 234, v11, (unsigned __int16)(v7 + 1), __str, v7);
            *((_WORD *)v10 + 6) = v7;
            if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
            {
              bzero(v19, 0x410uLL);
              v12 = mach_continuous_time();
              v13 = snprintf(v19, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_NMEA_DATA_IND =>GNM Len,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v12), "GNC", 73, "GncP26_06SndNmeaDebugPowerMsg", *((unsigned __int16 *)v10 + 6));
              LbsOsaTrace_WriteLog(8u, v19, v13, 4, 1);
            }
            AgpsSendFsmMsg(134, 128, 8786691, v10);
          }
          else
          {
            free(v10);
          }
        }
      }
      return;
    }
  }
LABEL_28:
  if (LbsOsaTrace_IsLoggingAllowed(8u, 0, 0, 0))
  {
    bzero(v19, 0x410uLL);
    v14 = (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)mach_continuous_time());
    v6 = snprintf(v19, 0x40FuLL, "%10u %s%c %s: #%04hx NmeaLen,%u,BytesWritten,%u\n", v14);
    goto LABEL_14;
  }
}

void GncP26_07SndPowerRptV2(void)
{
  double *v0;
  double *v1;
  unsigned int v2;
  double v3;
  uint64_t v4;
  unsigned __int16 v5;
  char __str[1040];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v0 = (double *)gnssOsa_Calloc("GncP26_07SndPowerRptV2", 253, 1, 0x20uLL);
  if (v0)
  {
    v1 = v0;
    *((_DWORD *)v0 + 3) = dword_25401F62C;
    v2 = unk_25401F630;
    *((_QWORD *)v0 + 2) = unk_25401F630;
    v3 = *(double *)&qword_25401F638 + *(double *)&qword_25401F5A8;
    v0[3] = *(double *)&qword_25401F638 + *(double *)&qword_25401F5A8;
    *(double *)&qword_25401F608 = v3 / 0.85;
    *(double *)&qword_25401F610 = v3 / 0.85 * (double)v2 * 0.001;
    *(double *)&qword_25401F618 = v3 / 0.85 / 3.7;
    if (LbsOsaTrace_IsLoggingAllowed(8u, 4, 0, 0))
    {
      bzero(__str, 0x410uLL);
      v4 = mach_continuous_time();
      v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: FSM:GNCP_POW_REP_IND =>GNM Tick,%u,MeasInt,%u,ActInt,%u,Pow,%f\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 73, "GncP26_07SndPowerRptV2", *((_DWORD *)v1 + 3), *((_DWORD *)v1 + 4), *((_DWORD *)v1 + 5), v1[3]);
      LbsOsaTrace_WriteLog(8u, __str, v5, 4, 1);
    }
    AgpsSendFsmMsg(134, 128, 8786179, v1);
    GncP26_06SndNmeaDebugPowerMsg();
  }
}

uint64_t GM_Prop_AAD(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v9[3];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = (a2 - 1);
  if (a2 - 1 >= 0)
  {
    v4 = result;
    v5 = v3 + 1;
    v6 = a3 + 48 * v3;
    do
    {
      if (*(_BYTE *)(v6 + 8))
      {
        if (*(_BYTE *)(v6 + 4))
        {
          v7 = *(_OWORD *)(v6 + 16);
          v9[0] = *(_OWORD *)v6;
          v9[1] = v7;
          v9[2] = *(_OWORD *)(v6 + 32);
          *(_DWORD *)v6 = v4;
          result = Comp_Cur_Acq_Aid((uint64_t)v9, v6);
        }
      }
      v6 -= 48;
    }
    while (v5-- > 1);
  }
  return result;
}

double Nav_Kalman_Update_Init()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  unsigned int v9;
  int64x2_t v10;
  double v11;
  __double2 v12;
  double v13;
  double v14;
  double v15;
  double result;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21[2];
  _QWORD v22[2];
  uint64_t v23;
  _OWORD v24[1693];
  uint64_t v25;

  v0 = MEMORY[0x24BDAC7A8]();
  v18 = v2;
  v19 = v1;
  v3 = v0;
  v25 = *MEMORY[0x24BDAC8D0];
  v17 = (_BYTE *)(v0 + 11528);
  v20 = v0 + 7172;
  bzero(v22, 0x69F0uLL);
  v23 = 0x500000002;
  BYTE1(v24[0]) = 0;
  *((_QWORD *)&v24[6] + 1) = 0;
  v24[7] = 0uLL;
  *(_QWORD *)((char *)&v24[8] + 4) = 0;
  *(_QWORD *)((char *)&v24[8] + 12) = 0;
  *(_QWORD *)((char *)&v24[9] + 1) = 0;
  *(_QWORD *)((char *)&v24[16] + 12) = 0;
  *(_QWORD *)((char *)&v24[17] + 4) = 0;
  HIDWORD(v24[17]) = 0;
  *(_QWORD *)((char *)&v24[18] + 4) = 0;
  *(_QWORD *)((char *)&v24[18] + 12) = 0;
  DWORD1(v24[19]) = 0;
  *(_OWORD *)((char *)v24 + 4) = 0u;
  *(_OWORD *)((char *)&v24[1] + 4) = 0u;
  *(_OWORD *)((char *)&v24[2] + 4) = 0u;
  *(_OWORD *)((char *)&v24[3] + 4) = 0u;
  *(_OWORD *)((char *)&v24[4] + 4) = 0u;
  *(_OWORD *)((char *)&v24[5] + 4) = 0u;
  BYTE4(v24[6]) = 0;
  *(_QWORD *)((char *)&v24[12] + 10) = 0;
  *(_OWORD *)((char *)&v24[11] + 12) = 0u;
  *(_OWORD *)((char *)&v24[10] + 12) = 0u;
  *(_OWORD *)((char *)&v24[9] + 12) = 0u;
  *(_OWORD *)((char *)&v24[13] + 4) = 0u;
  *(_OWORD *)((char *)&v24[14] + 4) = 0u;
  *(_OWORD *)((char *)&v24[15] + 4) = 0u;
  DWORD1(v24[16]) = 0;
  bzero((char *)&v24[19] + 12, 0x498uLL);
  *(_QWORD *)((char *)&v24[94] + 4) = 0;
  *(_QWORD *)((char *)&v24[93] + 12) = 0;
  *(_QWORD *)((char *)&v24[95] + 12) = 0;
  *(_QWORD *)((char *)&v24[95] + 4) = 0;
  DWORD1(v24[93]) = 1;
  HIDWORD(v24[94]) = 0;
  LOBYTE(v24[95]) = 0;
  *(_OWORD *)((char *)&v24[96] + 4) = 0u;
  *(_OWORD *)((char *)&v24[97] + 4) = 0u;
  *(_OWORD *)((char *)&v24[98] + 4) = 0u;
  BYTE4(v24[99]) = 0;
  DWORD1(v24[100]) = 1;
  *(_OWORD *)((char *)&v24[100] + 12) = 0u;
  *(_OWORD *)((char *)&v24[101] + 12) = 0u;
  *(_OWORD *)((char *)&v24[102] + 12) = 0u;
  *(_DWORD *)((char *)&v24[103] + 11) = 0;
  *(_OWORD *)((char *)&v24[126] + 12) = 0u;
  *(_OWORD *)((char *)&v24[127] + 12) = 0u;
  *(_OWORD *)((char *)&v24[124] + 12) = 0u;
  *(_OWORD *)((char *)&v24[125] + 12) = 0u;
  *(_OWORD *)((char *)&v24[122] + 12) = 0u;
  *(_OWORD *)((char *)&v24[123] + 12) = 0u;
  *(_OWORD *)((char *)&v24[120] + 12) = 0u;
  *(_OWORD *)((char *)&v24[121] + 12) = 0u;
  *(_OWORD *)((char *)&v24[118] + 12) = 0u;
  *(_OWORD *)((char *)&v24[119] + 12) = 0u;
  *(_OWORD *)((char *)&v24[116] + 12) = 0u;
  *(_OWORD *)((char *)&v24[117] + 12) = 0u;
  *(_OWORD *)((char *)&v24[114] + 12) = 0u;
  *(_OWORD *)((char *)&v24[115] + 12) = 0u;
  *(_OWORD *)((char *)&v24[112] + 12) = 0u;
  *(_OWORD *)((char *)&v24[113] + 12) = 0u;
  *(_OWORD *)((char *)&v24[110] + 12) = 0u;
  *(_OWORD *)((char *)&v24[111] + 12) = 0u;
  *(_OWORD *)((char *)&v24[108] + 12) = 0u;
  *(_OWORD *)((char *)&v24[109] + 12) = 0u;
  *(_OWORD *)((char *)&v24[106] + 12) = 0u;
  *(_OWORD *)((char *)&v24[107] + 12) = 0u;
  *(_OWORD *)((char *)&v24[104] + 12) = 0u;
  *(_OWORD *)((char *)&v24[105] + 12) = 0u;
  v4 = 261;
  BYTE5(v24[104]) = 0;
  do
  {
    v5 = &v22[v4];
    *(_DWORD *)v5 = 0;
    *(_OWORD *)(v5 + 1) = 0uLL;
    *(_OWORD *)(v5 + 3) = 0uLL;
    v4 += 5;
  }
  while (v5 + 5 != (_QWORD *)((char *)&v24[248] + 12));
  v6 = 501;
  do
  {
    v7 = &v22[v6];
    *(_DWORD *)v7 = 0;
    *(_OWORD *)(v7 + 1) = 0uLL;
    *(_OWORD *)(v7 + 3) = 0uLL;
    v6 += 5;
  }
  while (v7 + 5 != (_QWORD *)((char *)&v24[368] + 12));
  *(_QWORD *)((char *)&v24[447] + 4) = 0;
  HIDWORD(v24[447]) = 0;
  *(_QWORD *)((char *)&v24[448] + 4) = 0;
  HIDWORD(v24[448]) = 0;
  bzero((char *)&v24[368] + 12, 0x4E4uLL);
  *(_OWORD *)((char *)&v24[456] + 4) = 0u;
  *(_OWORD *)((char *)&v24[455] + 4) = 0u;
  *(_OWORD *)((char *)&v24[454] + 4) = 0u;
  *(_OWORD *)((char *)&v24[453] + 4) = 0u;
  *(_OWORD *)((char *)&v24[452] + 4) = 0u;
  *(_OWORD *)((char *)&v24[451] + 4) = 0u;
  *(_OWORD *)((char *)&v24[450] + 4) = 0u;
  *(_OWORD *)((char *)&v24[449] + 4) = 0u;
  DWORD1(v24[457]) = -1;
  *(_QWORD *)((char *)&v24[515] + 12) = 0;
  BYTE4(v24[516]) = 0;
  *(_QWORD *)((char *)&v24[693] + 12) = 0;
  DWORD1(v24[694]) = 0;
  *(_QWORD *)((char *)&v24[700] + 12) = 0;
  DWORD1(v24[701]) = 0;
  *(_QWORD *)((char *)&v24[718] + 4) = 0;
  BYTE12(v24[718]) = 0;
  *(_OWORD *)((char *)&v24[713] + 12) = 0u;
  *(_OWORD *)((char *)&v24[714] + 12) = 0u;
  *(_OWORD *)((char *)&v24[715] + 12) = 0u;
  *(_OWORD *)((char *)&v24[716] + 12) = 0u;
  BYTE12(v24[717]) = 0;
  *(_QWORD *)((char *)&v24[724] + 4) = 0;
  BYTE12(v24[724]) = 0;
  DWORD1(v24[719]) = 0;
  *(_OWORD *)((char *)&v24[719] + 12) = 0u;
  *(_OWORD *)((char *)&v24[720] + 12) = 0u;
  *(_OWORD *)((char *)&v24[721] + 12) = 0u;
  *(_OWORD *)((char *)&v24[722] + 12) = 0u;
  BYTE12(v24[723]) = 0;
  BYTE4(v24[725]) = 0;
  BYTE12(v24[1680]) = 0;
  *((_QWORD *)&v24[1685] + 1) = 0;
  *((_QWORD *)&v24[1692] + 1) = 0;
  bzero((char *)&v24[457] + 8, 0x39FuLL);
  bzero((char *)&v24[516] + 12, 0xAA6uLL);
  DWORD1(v24[689]) = 0;
  *(_OWORD *)((char *)&v24[688] + 4) = 0u;
  *(_OWORD *)((char *)&v24[687] + 4) = 0u;
  BYTE4(v24[691]) = 0;
  *(_QWORD *)((char *)&v24[689] + 12) = 0;
  *(_OWORD *)((char *)&v24[690] + 4) = 0u;
  *(_OWORD *)((char *)&v24[691] + 8) = 0u;
  *(_OWORD *)((char *)&v24[692] + 8) = 0u;
  *(_OWORD *)((char *)&v24[694] + 12) = 0u;
  *(_DWORD *)((char *)&v24[695] + 11) = 0;
  memset(&v24[696], 0, 22);
  *((_QWORD *)&v24[698] + 1) = 0;
  *(_OWORD *)((char *)&v24[697] + 8) = 0u;
  BYTE4(v24[700]) = 0;
  *(_OWORD *)((char *)&v24[699] + 4) = 0u;
  *(_OWORD *)((char *)&v24[701] + 12) = 0u;
  *(_OWORD *)((char *)&v24[702] + 12) = 0u;
  *(_OWORD *)((char *)&v24[703] + 12) = 0u;
  *(_OWORD *)((char *)&v24[704] + 12) = 0u;
  *(_OWORD *)((char *)&v24[705] + 12) = 0u;
  *(_OWORD *)((char *)&v24[706] + 12) = 0u;
  *(_OWORD *)((char *)&v24[707] + 12) = 0u;
  *(_OWORD *)((char *)&v24[708] + 12) = 0u;
  *(_OWORD *)((char *)&v24[709] + 12) = 0u;
  *(_OWORD *)((char *)&v24[710] + 12) = 0u;
  *(_OWORD *)((char *)&v24[711] + 12) = 0u;
  *(_OWORD *)((char *)&v24[712] + 8) = 0u;
  bzero((char *)&v24[725] + 8, 0x3B6CuLL);
  BYTE4(v24[1685]) = 0;
  *(_OWORD *)((char *)&v24[1684] + 4) = 0u;
  *(_OWORD *)((char *)&v24[1683] + 4) = 0u;
  *(_OWORD *)((char *)&v24[1682] + 4) = 0u;
  *(_OWORD *)((char *)&v24[1681] + 4) = 0u;
  BYTE4(v24[1692]) = 0;
  *(_OWORD *)((char *)&v24[1686] + 4) = 0u;
  *(_OWORD *)((char *)&v24[1687] + 4) = 0u;
  *(_OWORD *)((char *)&v24[1688] + 4) = 0u;
  *(_OWORD *)((char *)&v24[1689] + 4) = 0u;
  *(_OWORD *)((char *)&v24[1690] + 4) = 0u;
  *(_OWORD *)((char *)&v24[1691] + 4) = 0u;
  *(_QWORD *)v3 = v22[0];
  *(_QWORD *)(v3 + 20) = v23;
  memcpy((void *)(v3 + 28), v24, 0x69D0uLL);
  *(_DWORD *)v3 = 167849989;
  *(_WORD *)(v3 + 4) = 284;
  *(_QWORD *)(v3 + 8) = 0x10001000105DCLL;
  *(_DWORD *)(v3 + 16) = 655366;
  v8 = *(_DWORD *)(v18 + 52);
  *(_DWORD *)(v3 + 20) = v8;
  v9 = *(_DWORD *)(v18 + 56);
  *(_DWORD *)(v3 + 24) = v9;
  v21[0] = v8;
  v21[1] = v9;
  NK_Set_Dynamics(v21, v3 + 32);
  *(_BYTE *)(v3 + 128) = 1;
  *(_DWORD *)(v3 + 132) = 1;
  *(_DWORD *)(v3 + 152) = -1;
  *(_WORD *)(v20 + 3989) = 1;
  *(_DWORD *)(v3 + 11136) = -1;
  *(_DWORD *)(v3 + 11440) = -1;
  *(_QWORD *)(v3 + 11480) = 0x416312D000000000;
  v10 = vdupq_n_s64(0x416312D000000000uLL);
  *(int64x2_t *)(v3 + 11488) = v10;
  *(_QWORD *)(v3 + 11504) = 0x416312D000000000;
  *v17 = -1;
  *(_DWORD *)(v3 + 11536) = -1;
  *(_QWORD *)(v3 + 11576) = 0x416312D000000000;
  *(int64x2_t *)(v3 + 11584) = v10;
  *(_QWORD *)(v3 + 11600) = 0x416312D000000000;
  v17[96] = -1;
  *(_QWORD *)(v3 + 272) = *(_QWORD *)(v19 + 224);
  v11 = dbl_21E7F9640[*(_DWORD *)(v18 + 52) < 5u];
  *(double *)(v3 + 280) = v11;
  if (*(_BYTE *)(v19 + 19))
    *(double *)(v3 + 280) = v11 * 0.5;
  *(_QWORD *)(v3 + 328) = 0x4163125300000000;
  *(_QWORD *)(v3 + 304) = 0x4163125300000000;
  *(_BYTE *)(v3 + 1696) = 1;
  *(_BYTE *)v20 = 18;
  *(_WORD *)(v3 + 233) = 513;
  *(_WORD *)(v3 + 236) = 5;
  *(_QWORD *)(v3 + 27032) = 0;
  *(_QWORD *)(v3 + 27048) = 0;
  *(_QWORD *)(v3 + 27040) = 0;
  Geo2ECEF(v3 + 27032, (uint64_t)&WGS84_Datum, (double *)(v3 + 27008));
  v12 = __sincos_stret(*(double *)(v3 + 27032));
  *(__double2 *)(v3 + 27056) = v12;
  v13 = 1.0 / sqrt(v12.__sinval * v12.__sinval * -0.00669437999 + 1.0);
  v14 = *(double *)(v3 + 27048);
  v15 = v12.__cosval * (v14 + v13 * 6378137.0);
  if (v15 < 1.0)
    v15 = 1.0;
  *(double *)(v3 + 27080) = v15;
  result = v14 + v13 * (v13 * v13) * 6335439.33;
  *(double *)(v3 + 27072) = result;
  return result;
}

unsigned int *NK_Set_Dynamics(unsigned int *result, uint64_t a2)
{
  unsigned int v2;
  int64x2_t v3;
  double v4;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v17;

  *(_OWORD *)a2 = xmmword_21E7FA740;
  *(_OWORD *)(a2 + 16) = xmmword_21E7FA750;
  *(_QWORD *)(a2 + 32) = 0x3F978D4FDF3B645ALL;
  v2 = *result;
  v3 = vdupq_n_s64(0x3FA47AE147AE147CuLL);
  v4 = 25.0;
  __asm { FMOV            V6.2D, #25.0 }
  v10 = 0.25;
  v11 = 0;
  v12 = 400.0;
  v13 = 0.04;
  v14 = 0.0204081633;
  switch(*result)
  {
    case 0u:
    case 1u:
      goto LABEL_4;
    case 2u:
      goto LABEL_11;
    case 3u:
      v3 = vdupq_n_s64(0x3FB9B9A5A89B951DuLL);
      v10 = 4.0;
      v13 = 0.100489;
      v14 = 0.01;
      goto LABEL_11;
    case 4u:
      v3 = vdupq_n_s64(0x3FB9B9A5A89B951DuLL);
      v10 = 9.0;
      v13 = 0.100489;
      v14 = 0.00694444444;
LABEL_11:
      *(int64x2_t *)(a2 + 40) = v3;
      *(_QWORD *)(a2 + 56) = 0x3FF0000000000000;
      *(double *)(a2 + 72) = v10;
      *(double *)(a2 + 88) = v14;
      goto LABEL_20;
    case 5u:
      *(int64x2_t *)(a2 + 40) = vdupq_n_s64(0x3FB9B9A5A89B951DuLL);
      *(_QWORD *)(a2 + 56) = 0x3FF0000000000000;
      *(_QWORD *)(a2 + 72) = 0x4039000000000000;
      *(_QWORD *)(a2 + 88) = 0x3FB0000000000000;
      v15 = 25.0;
      v14 = 0.0625;
      goto LABEL_24;
    case 6u:
      __asm { FMOV            V0.2D, #1.0; jumptable 000000021E5C03E8 case 6 }
      *(_OWORD *)(a2 + 40) = _Q0;
      *(_QWORD *)(a2 + 56) = 0x3FF0000000000000;
      *(double *)&v17 = 100.0;
      *(_QWORD *)(a2 + 72) = 0x4059000000000000;
      *(_QWORD *)(a2 + 88) = 0x3FD0000000000000;
      v14 = 0.25;
      goto LABEL_22;
    case 7u:
      goto LABEL_15;
    case 8u:
      _Q6 = vdupq_n_s64(0x4202A05F20000000uLL);
      v12 = 1000000.0;
      v4 = 1.0e10;
LABEL_15:
      *(int64x2_t *)(a2 + 40) = _Q6;
      *(_QWORD *)(a2 + 56) = 0x3FF0000000000000;
      v13 = v4;
      break;
    default:
      v11 = 0x4202A05F20000000;
LABEL_4:
      if (v2 >= 2)
        v13 = 1.0e10;
      else
        v13 = 0.0;
      *(_QWORD *)(a2 + 40) = v11;
      *(double *)(a2 + 48) = v13;
      *(_QWORD *)(a2 + 56) = 0x3FF0000000000000;
      if (v2 >= 2)
        v12 = 1000000.0;
      else
        v12 = 0.0;
      break;
  }
  *(double *)(a2 + 72) = v12;
  *(_QWORD *)(a2 + 88) = 0x3FF0000000000000;
  v10 = 0.0;
  v14 = 1.0;
  if (v2 < 2)
  {
LABEL_20:
    *(double *)(a2 + 80) = v14 * v10;
    *(double *)(a2 + 64) = v14;
    *(double *)(a2 + 48) = v13 * 0.5;
  }
  else
  {
    if (v2 == 7)
    {
      *(double *)&v17 = 400.0;
LABEL_22:
      v15 = *(double *)&v17;
    }
    else
    {
      if (v2 == 8)
      {
        *(_QWORD *)(a2 + 80) = 0x412E848000000000;
        *(_QWORD *)(a2 + 64) = 0x3FF0000000000000;
        *(_OWORD *)(a2 + 24) = xmmword_21E7FA760;
        return result;
      }
      v15 = 1000000.0;
    }
LABEL_24:
    *(double *)(a2 + 80) = v14 * v15;
    *(double *)(a2 + 64) = v14;
  }
  return result;
}

uint64_t NK_Set_XO_PN(uint64_t result, uint64_t a2)
{
  int v2;
  int8x16_t v3;
  int32x2_t v4;
  int64x2_t v5;

  *(_OWORD *)(a2 + 24) = xmmword_21E7FA770;
  if (*(_WORD *)(result + 248))
  {
    *(_OWORD *)(a2 + 24) = xmmword_21E7FA780;
    v2 = (int)*(double *)(result + 80);
    if ((v2 - 71) <= 0xFFFFFFAE)
    {
      if ((v2 - 101) >= 0xFFFFFF73)
      {
        if ((v2 - 96) >= 0xFFFFFF7D)
        {
          if ((v2 - 91) >= 0xFFFFFF87)
          {
            if ((v2 - 86) >= 0xFFFFFF91)
            {
              if ((v2 - 81) >= 0xFFFFFF9B)
              {
                v4 = vdup_n_s32((v2 - 76) < 0xFFFFFFA5);
                v5.i64[0] = v4.u32[0];
                v5.i64[1] = v4.u32[1];
                v3 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v5, 0x3FuLL)), (int8x16_t)xmmword_21E7FA7F0, (int8x16_t)xmmword_21E7FA7E0);
              }
              else
              {
                v3 = (int8x16_t)xmmword_21E7FA7D0;
              }
            }
            else
            {
              v3 = (int8x16_t)xmmword_21E7FA7C0;
            }
          }
          else
          {
            v3 = (int8x16_t)xmmword_21E7FA7B0;
          }
        }
        else
        {
          v3 = (int8x16_t)xmmword_21E7FA7A0;
        }
      }
      else
      {
        v3 = (int8x16_t)xmmword_21E7FA790;
      }
      *(int8x16_t *)(a2 + 24) = v3;
    }
  }
  return result;
}

void s_Nav_Kalman_SD::s_Nav_Kalman_SD(s_Nav_Kalman_SD *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;

  v2 = (char *)this + 26920;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v3 = (char *)this + 8288;
  *((_DWORD *)this + 4) = 0;
  *(_QWORD *)((char *)this + 20) = 0x500000002;
  *((_WORD *)this + 14) = 0;
  *((_BYTE *)this + 30) = 0;
  *(_QWORD *)((char *)this + 132) = 0;
  *(_QWORD *)((char *)this + 148) = 0;
  *(_QWORD *)((char *)this + 140) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *(_QWORD *)((char *)this + 173) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_DWORD *)this + 78) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_DWORD *)this + 84) = 0;
  *((_BYTE *)this + 128) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_QWORD *)((char *)this + 230) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_DWORD *)this + 72) = 0;
  bzero((char *)this + 344, 0x498uLL);
  *((_QWORD *)this + 192) = 0;
  *((_QWORD *)this + 191) = 0;
  *((_QWORD *)this + 195) = 0;
  *((_QWORD *)this + 194) = 0;
  *((_DWORD *)this + 380) = 1;
  *((_DWORD *)this + 386) = 0;
  *((_BYTE *)this + 1548) = 0;
  *((_OWORD *)this + 98) = 0u;
  *((_OWORD *)this + 99) = 0u;
  *((_OWORD *)this + 100) = 0u;
  *((_BYTE *)this + 1616) = 0;
  *((_QWORD *)this + 203) = 0;
  *((_DWORD *)this + 408) = 1;
  *(_OWORD *)((char *)this + 1640) = 0u;
  *(_OWORD *)((char *)this + 1656) = 0u;
  *(_OWORD *)((char *)this + 1672) = 0u;
  *(_DWORD *)((char *)this + 1687) = 0;
  *(_OWORD *)((char *)this + 1704) = 0u;
  *(_OWORD *)((char *)this + 1720) = 0u;
  *(_OWORD *)((char *)this + 1736) = 0u;
  *(_OWORD *)((char *)this + 1752) = 0u;
  *(_OWORD *)((char *)this + 1768) = 0u;
  *(_OWORD *)((char *)this + 1784) = 0u;
  *(_OWORD *)((char *)this + 1800) = 0u;
  *(_OWORD *)((char *)this + 1816) = 0u;
  *(_OWORD *)((char *)this + 1832) = 0u;
  *(_OWORD *)((char *)this + 1848) = 0u;
  *(_OWORD *)((char *)this + 1864) = 0u;
  *(_OWORD *)((char *)this + 1880) = 0u;
  *(_OWORD *)((char *)this + 1896) = 0u;
  *(_OWORD *)((char *)this + 1912) = 0u;
  *(_OWORD *)((char *)this + 1928) = 0u;
  *(_OWORD *)((char *)this + 1944) = 0u;
  *(_OWORD *)((char *)this + 1960) = 0u;
  *(_OWORD *)((char *)this + 1976) = 0u;
  *(_OWORD *)((char *)this + 1992) = 0u;
  *(_OWORD *)((char *)this + 2008) = 0u;
  *(_OWORD *)((char *)this + 2024) = 0u;
  *(_OWORD *)((char *)this + 2040) = 0u;
  *(_OWORD *)((char *)this + 2056) = 0u;
  *(_OWORD *)((char *)this + 2072) = 0u;
  v4 = 2088;
  *((_WORD *)this + 848) = 0;
  do
  {
    v5 = (char *)this + v4;
    *(_DWORD *)v5 = 0;
    *(_OWORD *)(v5 + 8) = 0uLL;
    *(_OWORD *)(v5 + 24) = 0uLL;
    v4 += 40;
  }
  while (v5 + 40 != (char *)this + 4008);
  v6 = (char *)this + 5928;
  v7 = 4008;
  do
  {
    v8 = (char *)this + v7;
    *(_DWORD *)v8 = 0;
    *(_OWORD *)(v8 + 8) = 0uLL;
    *(_OWORD *)(v8 + 24) = 0uLL;
    v7 += 40;
  }
  while (v8 + 40 != v6);
  *((_QWORD *)this + 898) = 0;
  *((_DWORD *)this + 1798) = 0;
  *((_QWORD *)this + 900) = 0;
  *((_DWORD *)this + 1802) = 0;
  bzero(v6, 0x4E4uLL);
  *((_OWORD *)this + 458) = 0u;
  *((_OWORD *)this + 457) = 0u;
  *((_OWORD *)this + 456) = 0u;
  *((_OWORD *)this + 455) = 0u;
  *((_OWORD *)this + 454) = 0u;
  *((_OWORD *)this + 453) = 0u;
  *((_OWORD *)this + 452) = 0u;
  *((_OWORD *)this + 451) = 0u;
  *((_DWORD *)this + 1836) = -1;
  *((_QWORD *)this + 1035) = 0;
  *v3 = 0;
  *((_QWORD *)this + 1391) = 0;
  *((_DWORD *)this + 2784) = 0;
  *((_QWORD *)this + 1405) = 0;
  *((_DWORD *)this + 2812) = 0;
  *((_QWORD *)this + 1440) = 0;
  v3[3240] = 0;
  *(_OWORD *)((char *)this + 11448) = 0u;
  *(_OWORD *)((char *)this + 11464) = 0u;
  *(_OWORD *)((char *)this + 11480) = 0u;
  *(_OWORD *)((char *)this + 11496) = 0u;
  *((_BYTE *)this + 11512) = 0;
  *((_QWORD *)this + 1452) = 0;
  v3[3336] = 0;
  *((_DWORD *)this + 2884) = 0;
  *(_OWORD *)((char *)this + 11544) = 0u;
  *(_OWORD *)((char *)this + 11560) = 0u;
  *(_OWORD *)((char *)this + 11576) = 0u;
  *(_OWORD *)((char *)this + 11592) = 0u;
  *((_BYTE *)this + 11608) = 0;
  v3[3344] = 0;
  *v2 = 0;
  *(_QWORD *)(v2 + 76) = 0;
  *(_QWORD *)(v2 + 188) = 0;
  bzero((char *)this + 7348, 0x39FuLL);
  bzero((char *)this + 8296, 0xAA6uLL);
  *((_DWORD *)this + 2764) = 0;
  *((_OWORD *)this + 690) = 0u;
  *((_OWORD *)this + 689) = 0u;
  *((_QWORD *)this + 1383) = 0;
  *((_OWORD *)this + 692) = 0u;
  *((_BYTE *)this + 11088) = 0;
  *(_OWORD *)((char *)this + 11092) = 0u;
  *(_OWORD *)((char *)this + 11108) = 0u;
  *(_OWORD *)((char *)this + 11144) = 0u;
  *(_DWORD *)((char *)this + 11159) = 0;
  *(_OWORD *)((char *)this + 11164) = 0u;
  *(_QWORD *)((char *)this + 11178) = 0;
  *(_QWORD *)((char *)this + 11204) = 0;
  *(_OWORD *)((char *)this + 11188) = 0u;
  *((_OWORD *)this + 701) = 0u;
  *((_BYTE *)this + 11232) = 0;
  *(_OWORD *)((char *)this + 11256) = 0u;
  *(_OWORD *)((char *)this + 11272) = 0u;
  *(_OWORD *)((char *)this + 11288) = 0u;
  *(_OWORD *)((char *)this + 11304) = 0u;
  *(_OWORD *)((char *)this + 11320) = 0u;
  *(_OWORD *)((char *)this + 11336) = 0u;
  *(_OWORD *)((char *)this + 11352) = 0u;
  *(_OWORD *)((char *)this + 11368) = 0u;
  *(_OWORD *)((char *)this + 11384) = 0u;
  *(_OWORD *)((char *)this + 11400) = 0u;
  *(_OWORD *)((char *)this + 11416) = 0u;
  *(_OWORD *)((char *)this + 11428) = 0u;
  bzero((char *)this + 11636, 0x3B6CuLL);
  *((_BYTE *)this + 26992) = 0;
  *((_OWORD *)this + 1686) = 0u;
  *((_OWORD *)this + 1685) = 0u;
  *((_OWORD *)this + 1684) = 0u;
  *((_OWORD *)this + 1683) = 0u;
  *((_OWORD *)this + 1688) = 0u;
  *((_OWORD *)this + 1689) = 0u;
  *((_OWORD *)this + 1690) = 0u;
  *((_OWORD *)this + 1691) = 0u;
  *((_OWORD *)this + 1692) = 0u;
  *((_OWORD *)this + 1693) = 0u;
  *((_BYTE *)this + 27104) = 0;
}

_BYTE *BDS_D1_EphBin2Int(_BYTE *result, unsigned int *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  __int16 v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  __int16 v18;

  if (*result)
  {
    v3 = *a2;
    v4 = a2[1];
    *(_BYTE *)(a3 + 22) = (*a2 & 0x200) != 0;
    *(_BYTE *)(a3 + 19) = (v3 >> 4) & 0x1F;
    *(_BYTE *)(a3 + 21) = v3 & 0xF;
    *(_WORD *)(a3 + 16) = (v4 >> 9) & 0x1FFF;
    *(_DWORD *)(a3 + 8) = ((v4 & 0x1FF) << 8) | (a2[2] >> 14);
    v5 = a2[2];
    *(_WORD *)(a3 + 90) = ((__int16)(4 * v5) >> 15) & 0xFC00 | (v5 >> 4) & 0x3FF;
    if ((v5 & 8) != 0)
      v6 = *((_WORD *)a2 + 7) & 0x3F | ((v5 & 0xF) << 6) | 0xFC00;
    else
      v6 = *((_WORD *)a2 + 7) & 0x3F | ((v5 & 0xF) << 6);
    *(_WORD *)(a3 + 92) = v6;
    if ((a2[6] & 0x40) != 0)
      v7 = ((a2[6] & 0x7F) << 17) | (a2[7] >> 5) & 0x1FFFF | 0xFF000000;
    else
      v7 = ((a2[6] & 0x7F) << 17) | (a2[7] >> 5) & 0x1FFFF;
    *(_DWORD *)(a3 + 80) = v7;
    if ((a2[7] & 0x10) != 0)
      v8 = ((a2[7] & 0x1F) << 17) | (a2[8] >> 5) & 0x1FFFF | 0xFFC00000;
    else
      v8 = ((a2[7] & 0x1F) << 17) | (a2[8] >> 5) & 0x1FFFF;
    *(_DWORD *)(a3 + 84) = v8;
    *(_WORD *)(a3 + 88) = ((__int16)(a2[6] >> 2) >> 15) & 0xF800 | (a2[6] >> 7) & 0x7FF;
    *(_BYTE *)(a3 + 18) = a2[8] & 0x1F;
  }
  if (result[1])
  {
    v9 = a2[10];
    *(_WORD *)(a3 + 50) = (*((_WORD *)a2 + 18) << 6) | BYTE2(v9) & 0x3F;
    v10 = (4 * (unsigned __int16)v9) | (a2[11] >> 20) & 3;
    if ((v9 & 0x8000) != 0)
      v10 |= 0xFFFC0000;
    *(_DWORD *)(a3 + 56) = v10;
    *(_DWORD *)(a3 + 24) = (a2[11] << 12) | (a2[12] >> 10) & 0xFFF;
    *(_DWORD *)(a3 + 28) = a2[13] & 0x3FFFFF | ((unsigned __int16)a2[12] << 22);
    *(_DWORD *)(a3 + 60) = ((int)(a2[14] << 10) >> 31) & 0xFFFC0000 | (a2[14] >> 4) & 0x3FFFF;
    if ((a2[14] & 8) != 0)
      v11 = ((a2[14] & 0xF) << 14) | (a2[15] >> 8) & 0x3FFF | 0xFFFC0000;
    else
      v11 = ((a2[14] & 0xF) << 14) | (a2[15] >> 8) & 0x3FFF;
    *(_DWORD *)(a3 + 64) = v11;
    if ((a2[15] & 0x80) != 0)
      v12 = (a2[15] << 10) | (a2[16] >> 12) & 0x3FF | 0xFFFC0000;
    else
      v12 = (a2[15] << 10) | (a2[16] >> 12) & 0x3FF;
    *(_DWORD *)(a3 + 68) = v12;
    *(_DWORD *)(a3 + 32) = (a2[16] << 20) | (a2[17] >> 2) & 0xFFFFF;
  }
  if (result[2])
  {
    if (result[1])
      *(_DWORD *)(a3 + 12) = ((a2[17] & 3) << 15) | (32 * (a2[18] & 0x3FF)) | (a2[19] >> 17) & 0x1F;
    *(_DWORD *)(a3 + 40) = (a2[19] << 15) | (a2[20] >> 7) & 0x7FFF;
    if ((a2[20] & 0x40) != 0)
      v13 = ((a2[20] & 0x7F) << 11) | (a2[21] >> 11) & 0x7FF | 0xFFFC0000;
    else
      v13 = ((a2[20] & 0x7F) << 11) | (a2[21] >> 11) & 0x7FF;
    *(_DWORD *)(a3 + 72) = v13;
    if ((a2[21] & 0x400) != 0)
      v14 = ((a2[21] & 0x7FF) << 13) | (a2[22] >> 9) & 0x1FFF | 0xFF000000;
    else
      v14 = ((a2[21] & 0x7FF) << 13) | (a2[22] >> 9) & 0x1FFF;
    *(_DWORD *)(a3 + 52) = v14;
    if ((a2[22] & 0x100) != 0)
      v15 = ((a2[22] & 0x1FF) << 9) | (a2[23] >> 13) & 0x1FF | 0xFFFC0000;
    else
      v15 = ((a2[22] & 0x1FF) << 9) | (a2[23] >> 13) & 0x1FF;
    *(_DWORD *)(a3 + 76) = v15;
    v16 = a2[23];
    v17 = a2[24];
    if ((v16 & 0x1000) != 0)
      v18 = (2 * (v16 & 0x1FFF)) | (v17 >> 21) & 1 | 0xC000;
    else
      v18 = (2 * (v16 & 0x1FFF)) | (v17 >> 21) & 1;
    *(_WORD *)(a3 + 48) = v18;
    *(_DWORD *)(a3 + 36) = (v17 << 11) | (a2[25] >> 11) & 0x7FF;
    *(_DWORD *)(a3 + 44) = (a2[25] << 21) | (a2[26] >> 1) & 0x1FFFFF;
  }
  return result;
}

BOOL STEU_Checksum_OK(char *a1)
{
  unsigned __int8 v1;
  int v2;
  int v3;
  int v4;
  int v6;
  _BOOL8 result;
  unsigned __int8 v8;
  char v9[2];
  uint64_t v10;

  v1 = 0;
  v10 = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  v3 = 3;
  do
  {
    if (!v2)
      return 0;
    v4 = a1[v3 - 1];
    if (v4 == 10 || v4 == 13)
      return 0;
    v1 += v2;
    ++v3;
    v2 = v4;
  }
  while (v4 != 125);
  v8 = 0;
  v9[0] = a1[v3 - 1];
  v9[1] = a1[v3];
  v6 = AscToU1((uint64_t)v9, &v8);
  result = 0;
  if (v6)
    return v8 == v1;
  return result;
}

uint64_t Comp_NEDvar_UDU(uint64_t result, unsigned int a2, int a3, double (*a4)[3], double *a5)
{
  uint64_t v5;
  int v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned int v13;
  double v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  double *v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  double v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  double v30;
  unsigned int v31;
  uint64_t v32;
  double v33;
  double (*v34)[3];
  uint64_t v35;
  _QWORD *v36;
  double v37;
  uint64_t v38;
  double v39;
  uint64_t i;
  _QWORD v41[10];

  v5 = 0;
  v41[9] = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  do
  {
    v7 = v6++;
    v8 = (v7 * v7 + v7) >> 1;
    v9 = (v5 + a3);
    v10 = (v9 * v9 + v9) >> 1;
    v11 = v5;
    v12 = v6;
    do
    {
      v13 = (v11 + a3);
      if (v5 == v11)
      {
        v14 = *(double *)(result + 8 * (v10 + (v5 + a3)));
        v15 = v13 + 1;
      }
      else
      {
        v15 = v13 + 1;
        v16 = v9 + (((v13 + 1) * v13) >> 1);
        if (v9 >= v13)
          v16 = v10 + v13;
        v14 = *(double *)(result + 8 * (v13 + ((v15 * v13) >> 1))) * *(double *)(result + 8 * v16);
      }
      v17 = v12;
      v18 = (double *)&v41[3 * v5 + v11];
      *v18 = v14;
      if (a2 > v15)
      {
        v19 = v12;
        v20 = v19 * v19 + v12;
        v21 = 2 * v19 + 2;
        v22 = (v15 * v7) >> 1;
        v23 = v17;
        do
        {
          v24 = v23 + v23 * v23;
          v25 = v8 + v23;
          if (v23 > v9)
            v25 = v9 + (v24 >> 1);
          v26 = *(double *)(result + 8 * v25);
          v27 = v22 + v23;
          v28 = v23 > v13;
          v29 = v23 + 1;
          v30 = *(double *)(result + 8 * (v23 + ((unint64_t)v20 >> 1))) * v26;
          v31 = v13 + (v24 >> 1);
          if (!v28)
            v31 = v27;
          v14 = v14 + v30 * *(double *)(result + 8 * v31);
          v20 += v21;
          v21 += 2;
          v23 = v29;
        }
        while (v29 < a2);
        *v18 = v14;
      }
      *(double *)&v41[3 * v11++ + v5] = v14;
      v12 = v17 + 1;
      ++v7;
    }
    while (v11 != 3);
    ++v5;
  }
  while (v5 != 3);
  v32 = 0;
  v33 = 0.0;
  v34 = a4;
  do
  {
    v35 = 0;
    v36 = v41;
    v37 = 0.0;
    do
    {
      v38 = 0;
      v39 = 0.0;
      do
      {
        v39 = v39 + *(double *)&v36[v38] * (*v34)[v38];
        ++v38;
      }
      while (v38 != 3);
      if (!v32)
        v33 = v33 + v39 * (*a4)[v35 + 3];
      v37 = v37 + v39 * (*a4)[3 * v32 + v35++];
      v36 += 3;
    }
    while (v35 != 3);
    a5[v32++] = v37;
    ++v34;
  }
  while (v32 != 3);
  for (i = 0; i != 3; ++i)
  {
    if (a5[i] <= 0.00000001)
      a5[i] = 0.00000001;
  }
  return result;
}

uint64_t GM_Get_Best_NSSS(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4;
  int v6;
  _WORD *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;

  v4 = (a4 - 1);
  if (a4 - 1 < 0)
    return 0xFFFFFFFFLL;
  v6 = 0;
  v7 = (_WORD *)(a1 + 36 * v4 + 8);
  v8 = (unsigned __int8 *)(a2 + 48 * v4 + 12);
  v9 = 0xFFFFFFFFLL;
  do
  {
    if (Is_Legal(*((_DWORD *)v7 - 2)))
    {
      v10 = *((unsigned __int8 *)v7 - 4);
      if (v10 >= a3 && (*v7 & 8) != 0 && (*v7 & 0x300) != 0x300 && *(v8 - 8) && v8[3])
      {
        v11 = v10 + 6 * *v8;
        if (v11 <= v6)
        {
          v9 = v9;
        }
        else
        {
          v6 = v11;
          v9 = v4;
        }
      }
    }
    v7 -= 18;
    v8 -= 48;
  }
  while (v4-- > 0);
  return v9;
}

uint64_t GncP27_30PopulateRawMeas(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int IsLoggingAllowed;
  uint64_t result;
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int16 v12;
  void *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int16 v16;
  void *v17;
  void *v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  char v27;
  unsigned int v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned __int16 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  int v43;
  uint64_t v44;
  unsigned __int16 v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  int v49;
  uint64_t v50;
  unsigned __int16 v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  int v64;
  unsigned __int16 *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  int v73;
  uint64_t v74;
  unsigned __int16 v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  void *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int16 *v83;
  uint64_t v84;
  char __str[1040];
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned __int16 *)(a1 + 64);
  if (*(_WORD *)(a1 + 64))
  {
    if (v4 >= 0x101)
    {
      IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
      result = 0;
      if (IsLoggingAllowed)
      {
        bzero(__str, 0x410uLL);
        v7 = mach_continuous_time();
        v8 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SigMeas Cnt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v7), "GNC", 87, "GncP27_30PopulateRawMeas", 514, *(unsigned __int16 *)(a1 + 64));
        LbsOsaTrace_WriteLog(8u, __str, v8, 2, 1);
        return 0;
      }
      return result;
    }
    result = (uint64_t)gnssOsa_Calloc("GncP27_30PopulateRawMeas", 403, v4, 0xB0uLL);
    *(_QWORD *)(a2 + 72) = result;
    if (!result)
      return result;
  }
  v9 = a1 + 51272;
  v10 = *(unsigned __int16 *)(a1 + 51432);
  if (*(_WORD *)(a1 + 51432))
  {
    if (v10 >= 0x101)
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v11 = mach_continuous_time();
        v12 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SvUsg Cnt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v11), "GNC", 87, "GncP27_30PopulateRawMeas", 514, *(unsigned __int16 *)(a1 + 51432));
        LbsOsaTrace_WriteLog(8u, __str, v12, 2, 1);
      }
      goto LABEL_15;
    }
    v13 = gnssOsa_Calloc("GncP27_30PopulateRawMeas", 421, v10, 0x68uLL);
    *(_QWORD *)(a2 + 248) = v13;
    if (!v13)
    {
LABEL_15:
      v17 = *(void **)(a2 + 72);
      if (v17)
        free(v17);
      result = 0;
      *(_QWORD *)(a2 + 72) = 0;
      return result;
    }
  }
  v14 = *(unsigned __int16 *)(a1 + 78064);
  if (*(_WORD *)(a1 + 78064))
  {
    if (v14 >= 0x101)
    {
      if (LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0))
      {
        bzero(__str, 0x410uLL);
        v15 = mach_continuous_time();
        v16 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SvUsg Cnt,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v15), "GNC", 87, "GncP27_30PopulateRawMeas", 514, *(unsigned __int16 *)(a1 + 78064));
        LbsOsaTrace_WriteLog(8u, __str, v16, 2, 1);
      }
      goto LABEL_60;
    }
    v18 = gnssOsa_Calloc("GncP27_30PopulateRawMeas", 441, v14, 0x138uLL);
    *(_QWORD *)(a2 + 264) = v18;
    if (!v18)
    {
LABEL_60:
      v79 = *(void **)(a2 + 72);
      if (v79)
        free(v79);
      *(_QWORD *)(a2 + 72) = 0;
      v80 = *(void **)(a2 + 248);
      if (v80)
        free(v80);
      result = 0;
      *(_QWORD *)(a2 + 248) = 0;
      return result;
    }
  }
  v82 = a1;
  v83 = (unsigned __int16 *)(a1 + 78064);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  v19 = *(unsigned __int16 *)(a1 + 64);
  *(_WORD *)(a2 + 64) = v19;
  if (v19)
  {
    v20 = 0;
    v21 = 172;
    v22 = a1;
    do
    {
      v23 = *(_QWORD *)(a2 + 72);
      v24 = v23 + v21;
      *(_WORD *)(v23 + v21 - 172) = *(_WORD *)(v22 + 72);
      *(_BYTE *)(v24 - 170) = GncP07_01PopulateSigId(*(_DWORD *)(v22 + 76));
      *(_BYTE *)(v24 - 169) = GncP07_09PopulateConstellId(*(_DWORD *)(v22 + 80));
      *(_WORD *)(v24 - 168) = *(_WORD *)(v22 + 84);
      *(_OWORD *)(v24 - 164) = *(_OWORD *)(v22 + 88);
      *(_QWORD *)(v24 - 148) = *(_QWORD *)(v22 + 104);
      *(_BYTE *)(v24 - 140) = *(_BYTE *)(v22 + 112);
      *(_OWORD *)(v24 - 132) = *(_OWORD *)(v22 + 120);
      *(_QWORD *)(v24 - 116) = *(_QWORD *)(v22 + 136);
      *(_QWORD *)(v24 - 108) = *(_QWORD *)(v22 + 152);
      *(_BYTE *)(v24 - 100) = *(_BYTE *)(v22 + 160);
      *(_WORD *)(v24 - 98) = *(_WORD *)(v22 + 162);
      *(_OWORD *)(v24 - 92) = *(_OWORD *)(v22 + 168);
      *(_OWORD *)(v24 - 76) = *(_OWORD *)(v22 + 184);
      *(_BYTE *)(v24 - 60) = GncP07_02PopulateMeasMdl(*(_DWORD *)(v22 + 200));
      *(_BYTE *)(v24 - 59) = GncP07_02PopulateMeasMdl(*(_DWORD *)(v22 + 204));
      *(_DWORD *)(v24 - 58) = *(_DWORD *)(v22 + 208);
      *(_BYTE *)(v24 - 54) = *(_BYTE *)(v22 + 212);
      *(_QWORD *)(v24 - 52) = *(_QWORD *)(v22 + 216);
      v25 = *(_DWORD *)(v22 + 224);
      if (v25 == 1)
        v26 = 1;
      else
        v26 = 2;
      if (v25)
        v27 = v26;
      else
        v27 = 0;
      *(_BYTE *)(v24 - 44) = v27;
      *(_OWORD *)(v24 - 36) = *(_OWORD *)(v22 + 232);
      *(_OWORD *)(v24 - 20) = *(_OWORD *)(v22 + 248);
      v28 = *(_DWORD *)(v22 + 264);
      if (v28 >= 3)
      {
        v30 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
        LOBYTE(v29) = 0;
        if (v30)
        {
          bzero(__str, 0x410uLL);
          v31 = mach_continuous_time();
          v32 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MPath,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v31), "GNC", 87, "GncP07_04PopulateMPath", 770, v28);
          LbsOsaTrace_WriteLog(8u, __str, v32, 2, 1);
          LOBYTE(v29) = 0;
        }
      }
      else
      {
        v29 = *(_DWORD *)(v22 + 264);
      }
      v33 = v23 + v21;
      *(_BYTE *)(v33 - 4) = v29;
      *(_DWORD *)(v33 - 2) = *(_DWORD *)(v22 + 268);
      if (v20 > 0xFE)
        break;
      ++v20;
      v21 += 176;
      v22 += 200;
    }
    while (v20 < *(unsigned __int16 *)(a2 + 64));
  }
  *(_DWORD *)(a2 + 80) = *(_DWORD *)v9;
  *(_BYTE *)(a2 + 84) = *(_BYTE *)(v9 + 4);
  *(_DWORD *)(a2 + 86) = *(_DWORD *)(v9 + 6);
  *(_BYTE *)(a2 + 94) = *(_BYTE *)(v9 + 14);
  *(_QWORD *)(a2 + 144) = *(_QWORD *)(v9 + 64);
  *(_QWORD *)(a2 + 200) = *(_QWORD *)(v9 + 120);
  *(_OWORD *)(a2 + 208) = *(_OWORD *)(v9 + 128);
  *(_OWORD *)(a2 + 224) = *(_OWORD *)(v9 + 144);
  *(_WORD *)(a2 + 90) = *(_WORD *)(v9 + 10);
  *(_BYTE *)(a2 + 92) = *(_BYTE *)(v9 + 12);
  *(_BYTE *)(a2 + 93) = *(_BYTE *)(v9 + 13);
  *(_WORD *)(a2 + 96) = *(_WORD *)(v9 + 16);
  *(_DWORD *)(a2 + 100) = *(_DWORD *)(v9 + 20);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(v82 + 51296);
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(v9 + 40);
  *(_WORD *)(a2 + 128) = *(_WORD *)(v9 + 48);
  *(_BYTE *)(a2 + 130) = *(_BYTE *)(v9 + 50);
  *(_QWORD *)(a2 + 136) = *(_QWORD *)(v9 + 56);
  *(_WORD *)(a2 + 152) = *(_WORD *)(v9 + 72);
  *(_DWORD *)(a2 + 156) = *(_DWORD *)(v9 + 76);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(v9 + 80);
  *(_WORD *)(a2 + 176) = *(_WORD *)(v9 + 96);
  *(_DWORD *)(a2 + 180) = *(_DWORD *)(v9 + 100);
  *(_OWORD *)(a2 + 184) = *(_OWORD *)(v82 + 51376);
  v34 = *(unsigned __int16 *)(v9 + 160);
  *(_WORD *)(a2 + 240) = v34;
  if (v34)
  {
    v35 = 0;
    v36 = 0;
    v37 = v82 + 51440;
    v38 = v82 + 51464;
    v39 = v82 + 51444;
    do
    {
      v40 = *(_QWORD *)(a2 + 248);
      *(_WORD *)(v40 + v35) = *(_WORD *)(v37 + v35);
      v41 = *(_DWORD *)(v39 + v35);
      if (v41 >= 5)
      {
        v43 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
        LOBYTE(v42) = 0;
        if (v43)
        {
          bzero(__str, 0x410uLL);
          v44 = mach_continuous_time();
          v45 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx Glon SlotSrc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v44), "GNC", 87, "GncP07_05PopulateGLOSloNSrc", 770, v41);
          LbsOsaTrace_WriteLog(8u, __str, v45, 2, 1);
          LOBYTE(v42) = 0;
        }
      }
      else
      {
        v42 = *(_DWORD *)(v39 + v35);
      }
      v46 = v40 + v35;
      *(_BYTE *)(v46 + 2) = v42;
      *(_OWORD *)(v46 + 8) = *(_OWORD *)(v82 + 51448 + v35);
      v47 = *(_DWORD *)(v38 + v35);
      if (v47 >= 5)
      {
        v49 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
        LOBYTE(v48) = 0;
        if (v49)
        {
          bzero(__str, 0x410uLL);
          v50 = mach_continuous_time();
          v51 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SVtimeSrc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v50), "GNC", 87, "GncP07_06PopulateSVTimeSrc", 770, v47);
          LbsOsaTrace_WriteLog(8u, __str, v51, 2, 1);
          LOBYTE(v48) = 0;
        }
      }
      else
      {
        v48 = *(_DWORD *)(v38 + v35);
      }
      v52 = v40 + v35;
      *(_BYTE *)(v52 + 24) = v48;
      *(_BYTE *)(v52 + 25) = *(_BYTE *)(v37 + v35 + 28);
      *(_OWORD *)(v52 + 32) = *(_OWORD *)(v82 + v35 + 51472);
      *(_OWORD *)(v52 + 48) = *(_OWORD *)(v82 + v35 + 51488);
      *(_OWORD *)(v52 + 64) = *(_OWORD *)(v82 + v35 + 51504);
      *(_OWORD *)(v52 + 80) = *(_OWORD *)(v82 + v35 + 51520);
      *(_QWORD *)(v52 + 96) = *(_QWORD *)(v82 + 51536 + v35);
      if (v36 > 0xFE)
        break;
      ++v36;
      v35 += 104;
    }
    while (v36 < *(unsigned __int16 *)(a2 + 240));
  }
  v53 = *v83;
  *(_WORD *)(a2 + 256) = v53;
  if (!v53)
    return 1;
  v84 = 0;
  v54 = 0;
  v55 = v82;
  v56 = v82 + 78268;
  v57 = v82 + 78352;
  v58 = v82 + 78168;
  v59 = 48;
  v81 = a2;
  do
  {
    v60 = v55 + 344 * v54 + 78072;
    v61 = *(_QWORD *)(a2 + 264);
    v62 = v61 + 312 * v54;
    *(_BYTE *)v62 = GncP07_09PopulateConstellId(*(_DWORD *)v60);
    *(_WORD *)(v62 + 2) = *(_WORD *)(v60 + 4);
    *(_BYTE *)(v62 + 4) = *(_BYTE *)(v60 + 6);
    *(_OWORD *)(v62 + 144) = *(_OWORD *)(v60 + 144);
    *(_BYTE *)(v62 + 160) = GncP07_07PopulateHIState(*(_DWORD *)(v60 + 160));
    *(_BYTE *)(v62 + 161) = GncP07_07PopulateHIState(*(_DWORD *)(v60 + 164));
    *(_BYTE *)(v62 + 162) = GncP07_07PopulateHIState(*(_DWORD *)(v60 + 168));
    *(_BYTE *)(v62 + 163) = GncP07_07PopulateHIState(*(_DWORD *)(v60 + 172));
    v63 = GncP07_07PopulateHIState(*(_DWORD *)(v60 + 176));
    v64 = *(unsigned __int16 *)(v60 + 192);
    *(_WORD *)(v62 + 176) = v64;
    v65 = (unsigned __int16 *)(v62 + 176);
    *((_BYTE *)v65 - 12) = v63;
    *((_QWORD *)v65 - 1) = *(_QWORD *)(v60 + 184);
    if (v64)
    {
      v66 = 0;
      v67 = 0;
      v68 = v61 + v84;
      do
      {
        *(_BYTE *)(v68 + v67 + 178) = GncP07_01PopulateSigId(*(_DWORD *)(v56 + 4 * v67));
        v69 = (_QWORD *)(v68 + v66);
        v69[23] = *(_QWORD *)(v57 + v66 - 64);
        v69[27] = *(_QWORD *)(v57 + v66 - 32);
        v69[31] = *(_QWORD *)(v57 + v66);
        v69[35] = *(_QWORD *)(v57 + v66 + 32);
        if (v67 > 2)
          break;
        ++v67;
        v66 += 8;
      }
      while (v67 < *v65);
    }
    v55 = v82;
    v70 = v82 + 344 * v54;
    v71 = *(_DWORD *)(v70 + 78080);
    if (v71 >= 5)
    {
      v73 = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
      LOBYTE(v72) = 0;
      if (v73)
      {
        bzero(__str, 0x410uLL);
        v74 = mach_continuous_time();
        v75 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SVPosSrc,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v74), "GNC", 87, "GncP07_08PopulateSvPosSrc", 770, v71);
        LbsOsaTrace_WriteLog(8u, __str, v75, 2, 1);
        LOBYTE(v72) = 0;
      }
    }
    else
    {
      v72 = *(_DWORD *)(v70 + 78080);
    }
    v76 = v61 + 312 * v54;
    *(_BYTE *)(v76 + 8) = v72;
    *(_QWORD *)(v76 + 16) = *(_QWORD *)(v82 + 344 * v54 + 78088);
    *(_OWORD *)(v76 + 120) = *(_OWORD *)(v82 + 344 * v54 + 78192);
    *(_QWORD *)(v76 + 136) = *(_QWORD *)(v82 + 344 * v54 + 78208);
    v77 = -24;
    a2 = v81;
    do
    {
      v78 = (_QWORD *)(v61 + v59 + v77);
      *v78 = *(_QWORD *)(v58 + v77 - 48);
      v78[3] = *(_QWORD *)(v58 + v77 - 24);
      v78[6] = *(_QWORD *)(v58 + v77);
      v78[9] = *(_QWORD *)(v58 + v77 + 24);
      v77 += 8;
    }
    while (v77);
    result = 1;
    if (v54 > 0xFE)
      break;
    ++v54;
    v56 += 344;
    v84 += 312;
    v57 += 344;
    v59 += 312;
    v58 += 344;
  }
  while (v54 < *(unsigned __int16 *)(v81 + 256));
  return result;
}

uint64_t GncP07_01PopulateSigId(unsigned int a1)
{
  unsigned __int8 v2;
  int IsLoggingAllowed;
  uint64_t v4;
  unsigned __int16 v5;
  char __str[1040];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (a1 >= 0xA)
  {
    IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    v2 = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      v4 = mach_continuous_time();
      v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx SigID,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 87, "GncP07_01PopulateSigId", 770, a1);
      LbsOsaTrace_WriteLog(8u, __str, v5, 2, 1);
      return 0;
    }
  }
  else
  {
    return a1;
  }
  return v2;
}

uint64_t GncP07_09PopulateConstellId(unsigned int a1)
{
  unsigned __int8 v2;
  int IsLoggingAllowed;
  uint64_t v4;
  unsigned __int16 v5;
  char __str[1040];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (a1 >= 7)
  {
    IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    v2 = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      v4 = mach_continuous_time();
      v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx ConstelId,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 87, "GncP07_09PopulateConstellId", 770, a1);
      LbsOsaTrace_WriteLog(8u, __str, v5, 2, 1);
      return 0;
    }
  }
  else
  {
    return a1;
  }
  return v2;
}

uint64_t GncP07_02PopulateMeasMdl(unsigned int a1)
{
  unsigned __int8 v2;
  int IsLoggingAllowed;
  uint64_t v4;
  unsigned __int16 v5;
  char __str[1040];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (a1 >= 5)
  {
    IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    v2 = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      v4 = mach_continuous_time();
      v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx MeasModel,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 87, "GncP07_02PopulateMeasMdl", 770, a1);
      LbsOsaTrace_WriteLog(8u, __str, v5, 2, 1);
      return 0;
    }
  }
  else
  {
    return a1;
  }
  return v2;
}

uint64_t GncP07_07PopulateHIState(unsigned int a1)
{
  unsigned __int8 v2;
  int IsLoggingAllowed;
  uint64_t v4;
  unsigned __int16 v5;
  char __str[1040];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (a1 >= 3)
  {
    IsLoggingAllowed = LbsOsaTrace_IsLoggingAllowed(8u, 2, 0, 0);
    v2 = 0;
    if (IsLoggingAllowed)
    {
      bzero(__str, 0x410uLL);
      v4 = mach_continuous_time();
      v5 = snprintf(__str, 0x40FuLL, "%10u %s%c %s: #%04hx HIState,%u\n", (unint64_t)(*(double *)&g_MacClockTicksToMsRelation * (double)v4), "GNC", 87, "GncP07_07PopulateHIState", 770, a1);
      LbsOsaTrace_WriteLog(8u, __str, v5, 2, 1);
      return 0;
    }
  }
  else
  {
    return a1;
  }
  return v2;
}

