__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  if (a1 >= 0x100)
    return ___toupper(a1);
  v2 = __locale_key;
  v3 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (!v3)
    v3 = &__global_locale;
  return *(_DWORD *)(*(_QWORD *)(v3[166] + 120) + 4 * a1 + 2108);
}

uint64_t __memmove_chk(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  if (a4 < a3)
    __chk_fail_overflow();
  return _platform_memmove();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  if (a1 >= 0x100)
    return ___tolower(a1);
  v2 = __locale_key;
  v3 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (!v3)
    v3 = &__global_locale;
  return *(_DWORD *)(*(_QWORD *)(v3[166] + 120) + 4 * a1 + 1084);
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  size_t v7;
  char *v10;
  int v11;
  unint64_t v12;

  if (!__nel)
    return 0;
  v7 = __nel;
  while (1)
  {
    v10 = (char *)__base + (v7 >> 1) * __width;
    v11 = ((uint64_t (*)(const void *, char *))__compar)(__key, v10);
    if (!v11)
      break;
    if (v11 > 0)
      __base = &v10[__width];
    v12 = v7 - (v11 > 0);
    v7 = v12 >> 1;
    if (v12 <= 1)
      return 0;
  }
  return v10;
}

uint64_t __memcpy_chk(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  if (a4 < a3)
    __chk_fail_overflow();
  return _platform_memmove();
}

size_t strcspn(const char *__s, const char *__charset)
{
  unsigned int v2;
  const char *v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[4];

  if (!*__s)
    return 0;
  v8[0] = 1;
  memset(&v8[1], 0, 24);
  v2 = *(unsigned __int8 *)__charset;
  if (*__charset)
  {
    v3 = __charset + 1;
    do
    {
      v8[v2 >> 6] |= 1 << v2;
      v4 = *(unsigned __int8 *)v3++;
      v2 = v4;
    }
    while (v4);
  }
  v5 = 0;
  do
    v6 = __s[v5++];
  while (((*(_QWORD *)((char *)v8 + ((v6 >> 3) & 0x18)) >> v6) & 1) == 0);
  return v5 - 1;
}

int uuid_is_null(const uuid_t uu)
{
  uint64_t v1;

  v1 = 0;
  while (!uu[v1])
  {
    if ((_DWORD)++v1 == 16)
      return 1;
  }
  return 0;
}

size_t strspn(const char *__s, const char *__charset)
{
  unsigned int v2;
  const char *v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  _OWORD v8[2];

  if (!*__s)
    return 0;
  memset(v8, 0, sizeof(v8));
  v2 = *(unsigned __int8 *)__charset;
  if (*__charset)
  {
    v3 = __charset + 1;
    do
    {
      *((_QWORD *)v8 + (v2 >> 6)) |= 1 << v2;
      v4 = *(unsigned __int8 *)v3++;
      v2 = v4;
    }
    while (v4);
  }
  v5 = 0;
  do
    v6 = __s[v5++];
  while (((*(_QWORD *)((char *)v8 + ((v6 >> 3) & 0x18)) >> v6) & 1) != 0);
  return v5 - 1;
}

char *__cdecl strndup(const char *__s1, size_t __n)
{
  size_t v2;
  char *v3;

  v2 = 0;
  if (__n)
  {
    while (__s1[v2])
    {
      if (__n == ++v2)
      {
        v2 = __n;
        break;
      }
    }
  }
  v3 = (char *)malloc_type_malloc(v2 + 1, 0x66D67095uLL);
  if (v3)
  {
    _platform_memmove();
    v3[v2] = 0;
  }
  return v3;
}

char *__cdecl strncat(char *__s1, const char *__s2, size_t __n)
{
  uint64_t v5;
  unint64_t v6;

  v5 = _platform_strlen();
  v6 = _platform_strnlen();
  if (v6 < __n)
    __n = v6;
  _platform_memmove();
  __s1[__n + v5] = 0;
  return __s1;
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  rsize_t v4;
  errno_t v5;

  if (!__s)
    return 22;
  if ((__smax & 0x8000000000000000) != 0)
    return 7;
  if ((__n & 0x8000000000000000) == 0)
    v4 = __n;
  else
    v4 = __smax;
  if (v4 <= __smax)
    v5 = ((uint64_t)__n >> 63) & 7;
  else
    v5 = 84;
  _platform_memset();
  return v5;
}

dirent *__cdecl readdir(DIR *a1)
{
  pthread_mutex_t *p_dd_lock;
  dirent *v3;

  p_dd_lock = &a1->__dd_lock;
  pthread_mutex_lock(&a1->__dd_lock);
  v3 = (dirent *)_readdir_unlocked((uint64_t)a1, 1);
  pthread_mutex_unlock(p_dd_lock);
  return v3;
}

char *__cdecl strdup(const char *__s1)
{
  uint64_t v1;
  char *v2;

  v1 = _platform_strlen();
  v2 = (char *)malloc_type_malloc(v1 + 1, 0x89005E5CuLL);
  if (v2)
    _platform_memmove();
  return v2;
}

int snprintf_l(char *a1, size_t a2, locale_t a3, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  return vsnprintf_l(a1, a2, a3, a4, va);
}

uint64_t _vsnprintf(pthread_mutex_t *a1, pthread_rwlock_t *a2, _BYTE *a3, uint64_t a4, unsigned int *a5, unsigned __int8 *a6, __int16 *a7)
{
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BYTE *v11;
  uint64_t result;
  _BYTE *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[2];
  _QWORD v25[2];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v22 = 0u;
  v23 = 0u;
  v19 = 0u;
  v21 = 0;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v14 = 0u;
  v20 = v25;
  v26 = 0u;
  v27 = 0u;
  v8 = a4 - 1;
  if (!a4)
    v8 = 0;
  v28 = 0uLL;
  v9 = 0x7FFFFFFFLL;
  if (v8 < 0x7FFFFFFF)
    v9 = v8;
  v25[0] = 0;
  v25[1] = 850045858;
  if (v9)
    v10 = v9;
  else
    v10 = 1;
  v11 = v24;
  if (v9)
    v11 = a3;
  v29 = 0;
  if (a4 && !v9)
  {
    *a3 = 0;
    v11 = v24;
    v10 = 1;
  }
  v13 = v11;
  *(_QWORD *)&v15 = v11;
  *(_QWORD *)((char *)&v14 + 4) = v10 | 0xFFFF020800000000;
  DWORD2(v15) = v10;
  v30 = 0;
  v31 = 0uLL;
  v32 = 0uLL;
  v33 = 0uLL;
  v34 = 0uLL;
  v35 = 0uLL;
  v36 = 0uLL;
  v37 = 0uLL;
  v38 = 0uLL;
  result = __v2printf(a1, a2, (uint64_t)&v13, a5, a6, a7);
  if (a4)
    *v13 = 0;
  return result;
}

uint64_t __v2printf(pthread_mutex_t *a1, pthread_rwlock_t *a2, uint64_t a3, unsigned int *a4, unsigned __int8 *a5, __int16 *a6)
{
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _xlocale *v16;
  _xlocale *v17;
  unsigned int *v19;
  int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  void (*v26)(unsigned int *);
  int v27;
  unsigned int v28;
  unsigned int v29;
  void (*v30)(unsigned int *);
  _OWORD v31[5];
  void *v32[2];
  void *v33[2];
  void *v34[2];

  if (off_1EDF54E08)
    off_1EDF54E08(a4, 1472);
  if (off_1EDF54E10)
    off_1EDF54E10(a5);
  if (((*(_WORD *)(a3 + 16) & 8) == 0 || (*(_WORD *)(a3 + 16) & 0x200) == 0 && !*(_QWORD *)(a3 + 24))
    && __swsetup(a3))
  {
    v12 = __error();
    v13 = 9;
LABEL_10:
    *v12 = v13;
    return 0xFFFFFFFFLL;
  }
  v15 = *(_QWORD *)(a3 + 104);
  if ((*(_BYTE *)(v15 + 72) & 7) != 0)
  {
    if (a1)
      goto LABEL_14;
LABEL_22:
    if (!a2)
    {
      v12 = __error();
      v13 = 22;
      goto LABEL_10;
    }
    pthread_once(&__xprintf_domain_once, (void (*)(void))__xprintf_domain_init);
    memset(v31, 0, 64);
    *(_OWORD *)v32 = 0u;
    *(_OWORD *)v33 = 0u;
    *(_OWORD *)v34 = 0u;
    v31[4] = (unint64_t)a5;
    if (a4)
    {
      if (a4 == (unsigned int *)-1)
        v19 = (unsigned int *)&__global_locale;
      else
        v19 = a4;
    }
    else
    {
      v21 = __locale_key;
      v22 = *(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v21);
      if (v22)
        v19 = v22;
      else
        v19 = (unsigned int *)&__global_locale;
    }
    do
      v23 = __ldaxr(v19);
    while (__stlxr(v23 + 1, v19));
    v32[0] = v19;
    pthread_rwlock_rdlock(a2);
    if ((__printf_comp((uint64_t)v31, (uint64_t)a2) & 0x80000000) != 0)
    {
      v27 = *__error();
      pthread_rwlock_unlock(a2);
      do
      {
        v28 = __ldaxr(v19);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v19));
      if (!v29)
      {
        v30 = (void (*)(unsigned int *))*((_QWORD *)v19 + 1);
        if (v30)
          v30(v19);
      }
      *__error() = v27;
      return 0xFFFFFFFFLL;
    }
    v14 = __printf_exec((uint64_t)v31, a3, a6);
    v20 = *__error();
    pthread_rwlock_unlock(a2);
    do
    {
      v24 = __ldaxr(v19);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v19));
    if (!v25)
    {
      v26 = (void (*)(unsigned int *))*((_QWORD *)v19 + 1);
      if (v26)
        v26(v19);
    }
    free(v32[1]);
    free(v33[1]);
    free(v34[0]);
LABEL_40:
    *__error() = v20;
    return v14;
  }
  *(_BYTE *)(v15 + 72) |= 7u;
  if (!a1)
    goto LABEL_22;
LABEL_14:
  if (a1 != (pthread_mutex_t *)-1)
  {
    pthread_mutex_lock(a1);
    pthread_rwlock_rdlock(*(pthread_rwlock_t **)a1[1].__opaque);
    v14 = __printf_exec((uint64_t)a1, a3, a6);
    v20 = *__error();
    pthread_rwlock_unlock(*(pthread_rwlock_t **)a1[1].__opaque);
    pthread_mutex_unlock(a1);
    goto LABEL_40;
  }
  v16 = (_xlocale *)&__global_locale;
  if (a4 != (unsigned int *)-1)
    v16 = (_xlocale *)a4;
  if (a4)
    v17 = v16;
  else
    v17 = (_xlocale *)&__c_locale;
  return __vfprintf(a3, v17, a5, (int *)a6);
}

int vsnprintf_l(char *a1, size_t a2, locale_t a3, const char *a4, va_list a5)
{
  return _vsnprintf((pthread_mutex_t *)0xFFFFFFFFFFFFFFFFLL, 0, a1, a2, (unsigned int *)a3, (unsigned __int8 *)a4, (__int16 *)a5);
}

char *__cdecl strnstr(const char *__big, const char *__little, size_t __len)
{
  int v4;
  unint64_t v6;
  size_t i;

  v4 = *(unsigned __int8 *)__little;
  if (*__little)
  {
    v6 = _platform_strlen();
    for (i = __len - 1; i != -1 && *__big; --i)
    {
      if (*(unsigned __int8 *)__big == v4)
      {
        if (v6 > i)
          return 0;
        if (!_platform_strncmp())
          return (char *)__big;
      }
      ++__big;
    }
    return 0;
  }
  return (char *)__big;
}

uint64_t __vfprintf(uint64_t a1, locale_t a2, unsigned __int8 *a3, int *a4)
{
  lconv *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *i;
  int v14;
  int v15;
  int v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  _BOOL4 arguments;
  unsigned int v31;
  unsigned int v32;
  int v33;
  _DWORD *v34;
  uint64_t v35;
  int v36;
  int v37;
  int *v38;
  int *v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  _DWORD *v43;
  uint64_t v44;
  int v45;
  int v46;
  int *v47;
  int *v48;
  int v49;
  uint64_t *v50;
  uint64_t **v51;
  __int16 v52;
  BOOL only;
  char v54;
  void *v55;
  char v56;
  __int16 v57;
  double v58;
  uint64_t v59;
  __int16 v60;
  __int16 v61;
  double v62;
  int v63;
  uint64_t v64;
  double v65;
  int v66;
  unint64_t v67;
  const char *v68;
  void *v69;
  char *v70;
  size_t v71;
  double *v72;
  unsigned int v73;
  double *v74;
  unsigned int v75;
  __int16 v76;
  uint64_t v77;
  double v78;
  __int16 v79;
  __int32 v80;
  unint64_t v81;
  const char **v82;
  unint64_t v83;
  unint64_t v84;
  char **v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t *v88;
  int v89;
  unint64_t *v90;
  unint64_t *v91;
  unint64_t v92;
  __int32 v93;
  size_t v94;
  char *v96;
  size_t v97;
  char *v98;
  size_t v99;
  double *v100;
  uint64_t v101;
  int *v102;
  unint64_t *v103;
  double *v104;
  char *v105;
  const char *v106;
  char v107;
  uint64_t v108;
  char v109;
  unsigned int v110;
  char v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  char *v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  const char *v119;
  int v120;
  uint64_t v121;
  char *v122;
  int64_t v123;
  BOOL v124;
  uint64_t v125;
  uint64_t v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  __int32 *v130;
  size_t v131;
  uint64_t *v132;
  unint64_t *v133;
  unint64_t *v134;
  unint64_t *v135;
  int v136;
  uint64_t v137;
  __int16 v138;
  __int16 v139;
  int v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  char v146;
  __int128 v147;
  _OWORD *v148;
  char *v149;
  mbstate_t *v150;
  mbstate_t *v151;
  int v152;
  int v153;
  int v154;
  int v155;
  uint64_t v156;
  _QWORD *v157;
  int v158;
  BOOL v159;
  int v160;
  int v161;
  _QWORD *v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  char *v168;
  char *v169;
  int v170;
  int v171;
  uint64_t v172;
  char v173;
  int v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  _QWORD *v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  uint64_t v190;
  _QWORD *v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  uint64_t v197;
  _QWORD *v198;
  int v199;
  int v200;
  int v201;
  _QWORD *v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  _QWORD *v210;
  int v211;
  int v212;
  int v213;
  _QWORD *v214;
  int v215;
  int v216;
  int v217;
  int v218;
  int v219;
  _QWORD *v220;
  int v221;
  int v222;
  uint64_t v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  _QWORD *v229;
  int v230;
  int v231;
  int v232;
  float *v233;
  uint64_t v234;
  int v235;
  int v236;
  _QWORD *v237;
  int v238;
  int v239;
  uint64_t v240;
  int v241;
  int v242;
  int v243;
  _QWORD *v244;
  int v245;
  int v246;
  int v247;
  uint64_t v248;
  int v249;
  int v250;
  _QWORD *v251;
  int v252;
  int v253;
  _QWORD *v254;
  int v255;
  int v256;
  int v257;
  int v258;
  int v259;
  _QWORD *v260;
  int v261;
  int v262;
  int v263;
  float *v264;
  uint64_t v265;
  int v266;
  int v267;
  _QWORD *v268;
  int v269;
  int v270;
  uint64_t v271;
  int v272;
  int v273;
  int v274;
  _QWORD *v275;
  int v276;
  int v277;
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  _QWORD *v283;
  int v284;
  int v285;
  int v286;
  float *v287;
  uint64_t v288;
  int v289;
  int v290;
  _QWORD *v291;
  int v292;
  int v293;
  uint64_t v294;
  int v295;
  int v296;
  int v297;
  _QWORD *v298;
  int v299;
  int v300;
  int v301;
  _QWORD *v302;
  int v303;
  int v304;
  int v305;
  _QWORD *v306;
  int v307;
  int v308;
  int v309;
  uint64_t v310;
  _QWORD *v311;
  int v312;
  _QWORD *v313;
  int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  _QWORD *v320;
  int v321;
  int v322;
  int v323;
  float *v324;
  uint64_t v325;
  int v326;
  int v327;
  _QWORD *v328;
  int v329;
  int v330;
  uint64_t v331;
  int v332;
  int v333;
  int v334;
  _QWORD *v335;
  int v336;
  int v337;
  int v338;
  int v339;
  int v340;
  int v341;
  uint64_t v342;
  _QWORD *v343;
  int v344;
  int v345;
  int v346;
  int v347;
  int v348;
  uint64_t v349;
  _QWORD *v350;
  int v351;
  int v352;
  int v353;
  _QWORD *v354;
  int v355;
  int v356;
  int v357;
  int v358;
  int v359;
  _QWORD *v360;
  int v361;
  int v362;
  int v363;
  int v364;
  int v365;
  int v366;
  uint64_t v367;
  _QWORD *v368;
  int v369;
  int v370;
  int v371;
  int v372;
  int v373;
  uint64_t v374;
  _QWORD *v375;
  int v376;
  int v377;
  __int16 v378;
  unint64_t v379;
  __int16 v381;
  char v382;
  char *decimal_point;
  unsigned __int8 *v384;
  int v385;
  unint64_t v386;
  uint64_t v387;
  int v388;
  unint64_t v389;
  void *v390;
  char *v392;
  char v393;
  char *v394;
  uint64_t v395;
  __int16 v396;
  __int16 v397;
  __int16 v398;
  uint64_t v399;
  int v400;
  _xlocale *v401;
  uint64_t v402;
  char *v403;
  _BYTE *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  void *v412;
  char v413;
  char v414;
  uint64_t v415;
  _QWORD v416[18];
  char v417;
  __int128 v418;
  char *v419;
  int v420;
  double v421;
  int v422;
  __int128 v423;
  __int128 v424;
  uint64_t v425;
  unsigned __int8 v426;
  int *v427;
  __int32 *v428;
  char v429[6];
  char v430[136];
  char v431[30];
  _BYTE v433[2];
  char v434;
  _BYTE v435[5];
  mbstate_t v436;

  v427 = a4;
  v426 = 0;
  v425 = 0;
  v423 = 0u;
  v424 = 0u;
  v422 = 0;
  v421 = 0.0;
  v420 = 0;
  v419 = 0;
  v418 = 0uLL;
  v417 = 0;
  v412 = 0;
  v416[0] = &v416[2];
  memset(&v416[1], 0, 136);
  v415 = a1;
  v6 = localeconv_l(a2);
  v401 = a2;
  decimal_point = v6->decimal_point;
  if (v6->decimal_point[1])
    v7 = _platform_strlen();
  else
    v7 = 1;
  v389 = 0;
  v390 = 0;
  v394 = 0;
  v395 = 0;
  v388 = 0;
  v393 = 0;
  v382 = 0;
  v8 = 0;
  v386 = 0;
  v387 = v7;
  v392 = 0;
  v385 = 0;
  v400 = 1;
  v384 = a3;
LABEL_5:
  v9 = (uint64_t)a3;
LABEL_6:
  v10 = 0;
  v11 = 0;
  v12 = ~v9;
  for (i = (char *)v9; ; ++i)
  {
    v14 = *(unsigned __int8 *)(v9 + v11);
    if (!*(_BYTE *)(v9 + v11) || v14 == 37)
      break;
    ++v11;
    v10 += 0x100000000;
    --v12;
  }
  if (!v11)
  {
    v399 = v8;
    goto LABEL_17;
  }
  v399 = v8 + v11;
  if (v8 + v11 >= 0x7FFFFFFF)
    goto LABEL_862;
  v15 = v416[1];
  v16 = HIDWORD(v416[1]);
  v17 = &v416[2 * SLODWORD(v416[1]) - 1];
  v17[3] = v9;
  v17[4] = v10 >> 32;
  HIDWORD(v416[1]) = v16 + v11;
  LODWORD(v416[1]) = v15 + 1;
  if (v15 < 7)
    goto LABEL_17;
  if (v16 + (_DWORD)v11)
  {
    v18 = __sfvwrite(v415, (uint64_t)v416);
    v416[1] = 0;
    if (v18)
      goto LABEL_868;
LABEL_17:
    if (!v14)
      goto LABEL_864;
    goto LABEL_18;
  }
  LODWORD(v416[1]) = 0;
  if (!v14)
  {
LABEL_864:
    if (HIDWORD(v416[1]))
    {
      __sfvwrite(v415, (uint64_t)v416);
      HIDWORD(v416[1]) = 0;
    }
    LODWORD(v416[1]) = 0;
    goto LABEL_867;
  }
LABEL_18:
  v19 = 0;
  v20 = 0;
  *(_QWORD *)&v424 = 0;
  v426 = 0;
  a3 = (unsigned __int8 *)(v9 + v11 + 1);
  v414 = 0;
  v417 = 88;
  v407 = -1;
  v402 = v9;
LABEL_19:
  while (2)
  {
    v22 = (char)*a3++;
    v21 = v22;
LABEL_20:
    v23 = v19;
    while (1)
    {
      v19 = v23;
      if (v21 - 49 >= 9)
        break;
      v23 = 0;
      do
      {
        v23 = v21 - 48 + 10 * v23;
        v24 = (char)*a3++;
        v21 = v24;
      }
      while (v24 - 48 < 0xA);
      if (v21 == 36)
      {
        v400 = v23;
        if (!v412)
        {
          v412 = v430;
          v29 = v20;
          arguments = __find_arguments(v384, a4, (_DWORD **)&v412);
          v20 = v29;
          v400 = v23;
          if (arguments)
            goto LABEL_863;
        }
        goto LABEL_19;
      }
    }
    switch(v21)
    {
      case ' ':
        if (!v426)
          v426 = 32;
        continue;
      case '#':
        v20 = v20 | 1;
        continue;
      case '\'':
        v20 = v20 | 0x200;
        continue;
      case '*':
        v31 = (char)*a3 - 48;
        if (v31 > 9)
        {
          v32 = 0;
          v33 = *a3;
          v402 = (uint64_t)a3;
        }
        else
        {
          v32 = 0;
          v402 = (uint64_t)a3;
          do
          {
            v32 = 10 * v32 + v31;
            v33 = *(char *)++v402;
            v31 = v33 - 48;
          }
          while ((v33 - 48) < 0xA);
          v33 = v33;
        }
        v34 = v412;
        if (v33 != 36)
        {
          if (v412)
          {
            v37 = v400;
            v36 = *((_DWORD *)v412 + 4 * v400);
          }
          else
          {
            v38 = v427;
            v427 += 2;
            v36 = *v38;
            v37 = v400;
          }
          v400 = v37 + 1;
LABEL_69:
          v19 = v36;
          if (v36 < 0)
          {
            v19 = -(uint64_t)v36;
LABEL_71:
            v20 = v20 | 4;
          }
          continue;
        }
        if (v412)
          goto LABEL_63;
        v35 = v20;
        v412 = v430;
        if (!__find_arguments(v384, a4, (_DWORD **)&v412))
        {
          v34 = v412;
          v20 = v35;
          if (v412)
          {
LABEL_63:
            v36 = v34[4 * v32];
          }
          else
          {
            v39 = v427;
            v427 += 2;
            v36 = *v39;
          }
          a3 = (unsigned __int8 *)++v402;
          goto LABEL_69;
        }
        goto LABEL_863;
      case '+':
        v426 = 43;
        continue;
      case ',':
      case ':':
      case ';':
      case '_':
        v417 = v21;
        continue;
      case '-':
        goto LABEL_71;
      case '.':
        v25 = (char)*a3++;
        v21 = v25;
        if (v25 != 42)
        {
          v407 = 0;
          v26 = v21 - 48;
          if (v21 - 48 <= 9)
          {
            v27 = 0;
            do
            {
              v27 = 10 * v27 + v26;
              v28 = (char)*a3++;
              v21 = v28;
              v26 = v28 - 48;
            }
            while (v28 - 48 < 0xA);
            v407 = v27;
          }
          goto LABEL_20;
        }
        v40 = (char)*a3 - 48;
        if (v40 > 9)
        {
          v41 = 0;
          v42 = *a3;
          v402 = (uint64_t)a3;
        }
        else
        {
          v41 = 0;
          v402 = (uint64_t)a3;
          do
          {
            v41 = 10 * v41 + v40;
            v42 = *(char *)++v402;
            v40 = v42 - 48;
          }
          while ((v42 - 48) < 0xA);
          v42 = v42;
        }
        v43 = v412;
        if (v42 != 36)
        {
          if (v412)
          {
            v46 = v400;
            v45 = *((_DWORD *)v412 + 4 * v400);
          }
          else
          {
            v47 = v427;
            v427 += 2;
            v45 = *v47;
            v46 = v400;
          }
          v400 = v46 + 1;
LABEL_88:
          v407 = v45;
          continue;
        }
        if (v412)
          goto LABEL_82;
        v44 = v20;
        v412 = v430;
        if (!__find_arguments(v384, a4, (_DWORD **)&v412))
        {
          v43 = v412;
          v20 = v44;
          if (v412)
          {
LABEL_82:
            v45 = v43[4 * v41];
          }
          else
          {
            v48 = v427;
            v427 += 2;
            v45 = *v48;
          }
          a3 = (unsigned __int8 *)++v402;
          goto LABEL_88;
        }
        goto LABEL_863;
      case '0':
        v20 = v20 | 0x80;
        continue;
      case 'A':
      case 'a':
        if ((v20 & 0x4000) != 0)
          goto LABEL_140;
        if (v21 == 97)
          v54 = 120;
        else
          v54 = 88;
        if (v21 == 97)
          v55 = &__vfprintf_xdigs_lower;
        else
          v55 = &__vfprintf_xdigs_upper;
        v390 = v55;
        if (v21 == 97)
          v56 = 112;
        else
          v56 = 80;
        v393 = v56;
        v414 = v54;
        if (v394)
        {
          v57 = v20;
          __freedtoa((uint64_t)v394);
          LOWORD(v20) = v57;
        }
        v381 = v20;
        if ((v20 & 8) != 0)
        {
          if (v412)
          {
            v78 = *((double *)v412 + 2 * v400);
          }
          else
          {
            v104 = (double *)v427;
            v427 += 2;
            v78 = *v104;
          }
          v421 = v78;
          v101 = __hldtoa(v390, v407 + (v407 >= 0), &v420, &v422, &v419);
        }
        else
        {
          if (v412)
          {
            v58 = *((double *)v412 + 2 * v400);
          }
          else
          {
            v100 = (double *)v427;
            v427 += 2;
            v58 = *v100;
          }
          v421 = v58;
          v101 = (uint64_t)__hdtoa((uint64_t)v390, v407 + (v407 >= 0), &v420, &v422, &v419, v58);
        }
        v394 = (char *)v101;
        v105 = &v419[-v101];
        if (v407 + (v407 >= 0) >= 0)
          v105 = (char *)(v407 + (v407 >= 0));
        v408 = (uint64_t)v105;
        if (v420 == 0x7FFFFFFF)
          v414 = 0;
        v76 = v381;
        goto LABEL_273;
      case 'C':
        LOWORD(v20) = v20 | 0x10;
        goto LABEL_145;
      case 'D':
        LOWORD(v20) = v20 | 0x10;
        goto LABEL_150;
      case 'E':
      case 'e':
        if ((v20 & 0x4000) != 0)
          goto LABEL_140;
        if (v407 >= 0)
          v59 = v407 + 1;
        else
          v59 = 7;
        v393 = v21;
        goto LABEL_133;
      case 'F':
      case 'f':
        if ((v20 & 0x4000) != 0)
          goto LABEL_140;
        v393 = 0;
        v59 = v407;
        goto LABEL_133;
      case 'G':
      case 'g':
        if ((v20 & 0x4000) != 0)
        {
LABEL_140:
          v63 = 0;
          LOWORD(v20) = v20 | 0x100;
          goto LABEL_141;
        }
        v393 = v21 - 2;
        v59 = v407;
        if ((unint64_t)v407 <= 1)
          v59 = 1;
LABEL_133:
        if (v59 < 0)
          v59 = 6;
        v408 = v59;
        if (v394)
        {
          v60 = v20;
          __freedtoa((uint64_t)v394);
          LOWORD(v20) = v60;
        }
        v61 = v20;
        if ((v20 & 8) != 0)
        {
          if (v412)
          {
            v65 = *((double *)v412 + 2 * v400);
          }
          else
          {
            v74 = (double *)v427;
            v427 += 2;
            v65 = *v74;
          }
          v421 = v65;
          if (v393)
            v75 = 2;
          else
            v75 = 3;
          v394 = __ldtoa(&v421, v75, v408, &v420, &v422, &v419);
        }
        else
        {
          if (v412)
          {
            v62 = *((double *)v412 + 2 * v400);
          }
          else
          {
            v72 = (double *)v427;
            v427 += 2;
            v62 = *v72;
          }
          v421 = v62;
          if (v393)
            v73 = 2;
          else
            v73 = 3;
          v394 = __dtoa(v73, v408, &v420, &v422, &v419, v62);
          if (v420 == 9999)
            v420 = 0x7FFFFFFF;
        }
        v76 = v61;
LABEL_273:
        if (v422)
          v426 = 45;
        ++v400;
        if (v420 != 0x7FFFFFFF)
        {
          v397 = v76 | 0x100;
          v388 = (_DWORD)v419 - (_DWORD)v394;
          if ((v21 & 0xFFFFFFDF) != 0x47)
            goto LABEL_285;
          v107 = v393;
          if (v420 >= -3 && (v108 = v408 - v420, v408 >= v420))
          {
            v120 = v76 & 1;
            if ((v76 & 1) == 0)
              v108 = v388 - v420;
            v121 = v108 & ~(v108 >> 63);
          }
          else
          {
            if ((v76 & 1) == 0)
            {
              v408 = v388;
LABEL_285:
              v107 = v393;
            }
            if (v107)
            {
              v109 = v107;
              v110 = v420 - 1;
              v433[0] = v109;
              if (v420 >= 1)
                v111 = 43;
              else
                v111 = 45;
              if (v420 - 1 < 0)
                v110 = 1 - v420;
              v433[1] = v111;
              if (v110 < 0xA)
              {
                v122 = &v434;
                v64 = v408;
                if ((v109 & 0xDF) == 0x45)
                {
                  v434 = 48;
                  v122 = v435;
                }
                *v122 = v110 + 48;
                v115 = v122 + 1;
              }
              else
              {
                v112 = 0;
                do
                {
                  v113 = v110;
                  v114 = v110;
                  v110 /= 0xAu;
                  v436.__mbstate8[v112-- + 5] = (v114 % 0xA) | 0x30;
                }
                while (v113 > 0x63);
                v436.__mbstate8[v112 + 5] = v110 + 48;
                v115 = &v434;
                v64 = v408;
                if (v112 + 7 <= 7)
                {
                  v116 = v112 + 5;
                  v404 = &v433[-v112 - 2];
                  v117 = v76;
                  _platform_memmove();
                  LOBYTE(v76) = v117;
                  v118 = 5;
                  if (v116 > 5)
                    v118 = v116;
                  v64 = v408;
                  v115 = &v404[v118];
                }
              }
              v63 = 0;
              v123 = v115 - v433;
              v124 = (v76 & 1) == 0 && v64 < 2;
              v125 = v387;
              if (v124)
                v125 = 0;
              v395 = v64 + (int)v123 + v125;
              v385 = v123;
              v402 = (uint64_t)v394;
LABEL_328:
              LOWORD(v20) = v397;
              goto LABEL_414;
            }
            v120 = v76 & 1;
            v121 = v408;
          }
          v393 = 0;
          v63 = 0;
          if (v420 <= 0)
            v126 = 1;
          else
            v126 = v420;
          if (v120)
            v127 = 0;
          else
            v127 = v121 == 0;
          v409 = v121;
          v128 = v121 + v387;
          if (v127)
            v128 = 0;
          v129 = v128 + v126;
          if ((v76 & 0x200) != 0 && v420 >= 1)
          {
            v63 = 0;
            v393 = 0;
            v129 += (int)grouping_init((uint64_t)&v423, v420, v401);
          }
          v395 = v129;
          v402 = (uint64_t)v394;
          v64 = v409;
          goto LABEL_328;
        }
        if (*v394 == 78)
        {
          v106 = "NAN";
          if (v21 > 0x60)
            v106 = "nan";
          v402 = (uint64_t)v106;
          v426 = 0;
        }
        else
        {
          v119 = "INF";
          if (v21 > 0x60)
            v119 = "inf";
          v402 = (uint64_t)v119;
        }
        v64 = v408;
        v63 = 0;
        LOWORD(v20) = v76 & 0xFF7F;
        v395 = 3;
        goto LABEL_414;
      case 'L':
        v20 = v20 | 8;
        continue;
      case 'O':
        LOWORD(v20) = v20 | 0x10;
        goto LABEL_156;
      case 'S':
        LOWORD(v20) = v20 | 0x10;
        goto LABEL_161;
      case 'U':
        LOWORD(v20) = v20 | 0x10;
        goto LABEL_165;
      case 'X':
        v69 = &__vfprintf_xdigs_upper;
        goto LABEL_174;
      case 'c':
LABEL_145:
        v64 = v407;
        if ((v20 & 0x4000) != 0)
          goto LABEL_178;
        if ((v20 & 0x10) != 0)
        {
          v79 = v20;
          memset(&v436, 0, sizeof(v436));
          if (v412)
          {
            v80 = *((_DWORD *)v412 + 4 * v400);
          }
          else
          {
            v130 = v427;
            v427 += 2;
            v80 = *v130;
          }
          v131 = wcrtomb_l(v431, v80, &v436, v401);
          if (v131 == -1)
            goto LABEL_881;
          v395 = (int)v131;
          LOWORD(v20) = v79;
        }
        else
        {
          if (v412)
          {
            v66 = *((_DWORD *)v412 + 4 * v400);
          }
          else
          {
            v102 = v427;
            v427 += 2;
            v66 = *v102;
          }
          v431[0] = v66;
          v395 = 1;
        }
        v63 = 0;
        ++v400;
        v426 = 0;
        v402 = (uint64_t)v431;
        goto LABEL_414;
      case 'd':
      case 'i':
LABEL_150:
        v64 = v407;
        if ((v20 & 0x4000) != 0)
          goto LABEL_178;
        if ((v20 & 0x1C20) != 0)
        {
          if (v412)
          {
            v67 = *((_QWORD *)v412 + 2 * v400);
            if ((v67 & 0x8000000000000000) == 0)
              goto LABEL_375;
          }
          else
          {
            v87 = (unint64_t *)v427;
            v427 += 2;
            v67 = *v87;
            if ((*v87 & 0x8000000000000000) == 0)
              goto LABEL_375;
          }
          v67 = -(uint64_t)v67;
        }
        else
        {
          if ((v20 & 0x10) != 0)
          {
            if (v412)
            {
              v77 = *((_QWORD *)v412 + 2 * v400);
            }
            else
            {
              v132 = (uint64_t *)v427;
              v427 += 2;
              v77 = *v132;
            }
          }
          else if ((v20 & 0x40) != 0)
          {
            if (v412)
            {
              LODWORD(v77) = *((_DWORD *)v412 + 4 * v400);
            }
            else
            {
              v77 = (uint64_t)v427;
              v427 += 2;
              LODWORD(v77) = *(_DWORD *)v77;
            }
            v77 = (__int16)v77;
          }
          else if ((v20 & 0x2000) != 0)
          {
            if (v412)
            {
              LODWORD(v77) = *((_DWORD *)v412 + 4 * v400);
            }
            else
            {
              v77 = (uint64_t)v427;
              v427 += 2;
              LODWORD(v77) = *(_DWORD *)v77;
            }
            v77 = (char)v77;
          }
          else
          {
            if (v412)
            {
              LODWORD(v77) = *((_DWORD *)v412 + 4 * v400);
            }
            else
            {
              v77 = (uint64_t)v427;
              v427 += 2;
              LODWORD(v77) = *(_DWORD *)v77;
            }
            v77 = (int)v77;
          }
          v67 = v389;
          if ((v77 & 0x8000000000000000) == 0)
          {
            v386 = v77;
            goto LABEL_375;
          }
          v386 = -v77;
        }
        v426 = 45;
LABEL_375:
        v89 = 10;
        goto LABEL_398;
      case 'h':
        if ((v20 & 0x40) != 0)
          v20 = v20 & 0xFFFFDFBF | 0x2000;
        else
          v20 = v20 | 0x40;
        continue;
      case 'j':
        v20 = v20 | 0x1000;
        continue;
      case 'l':
        if ((v20 & 0x10) != 0)
          v20 = v20 & 0xFFFFFFCF | 0x20;
        else
          v20 = v20 | 0x10;
        continue;
      case 'n':
        if (v412)
        {
          v49 = v400;
          v50 = (uint64_t *)*((_QWORD *)v412 + 2 * v400);
        }
        else
        {
          v51 = (uint64_t **)v427;
          v427 += 2;
          v50 = *v51;
          v49 = v400;
        }
        v400 = v49 + 1;
        v8 = v399;
        v9 = (uint64_t)a3;
        if (!v50)
          goto LABEL_6;
        if ((v382 & 1) == 0)
        {
          v52 = v20;
          only = __printf_is_memory_read_only((vm_address_t)v384);
          LOWORD(v20) = v52;
          if (!only)
            __vfprintf_cold_1((uint64_t *)&v428, &v436);
        }
        if ((v20 & 0x20) != 0 || (v20 & 0x400) != 0 || (v20 & 0x800) != 0 || (v20 & 0x1000) != 0 || (v20 & 0x10) != 0)
        {
          if (off_1EDF54E20)
            off_1EDF54E20(v50, 8);
          v8 = v399;
          *v50 = v399;
        }
        else if ((v20 & 0x40) != 0)
        {
          if (off_1EDF54E20)
            off_1EDF54E20(v50, 2);
          v8 = v399;
          *(_WORD *)v50 = v399;
        }
        else if ((v20 & 0x2000) != 0)
        {
          if (off_1EDF54E20)
            off_1EDF54E20(v50, 1);
          v8 = v399;
          *(_BYTE *)v50 = v399;
        }
        else
        {
          if (off_1EDF54E20)
            off_1EDF54E20(v50, 4);
          v8 = v399;
          *(_DWORD *)v50 = v399;
        }
        v382 = 1;
        goto LABEL_5;
      case 'o':
LABEL_156:
        v64 = v407;
        if ((v20 & 0x4000) != 0)
          goto LABEL_178;
        if ((v20 & 0x1C20) != 0)
        {
          if (v412)
          {
            v67 = *((_QWORD *)v412 + 2 * v400);
          }
          else
          {
            v88 = (unint64_t *)v427;
            v427 += 2;
            v67 = *v88;
          }
          v89 = 8;
          goto LABEL_397;
        }
        if ((v20 & 0x10) != 0)
        {
          if (v412)
          {
            v81 = *((_QWORD *)v412 + 2 * v400);
          }
          else
          {
            v133 = (unint64_t *)v427;
            v427 += 2;
            v81 = *v133;
          }
        }
        else if ((v20 & 0x40) != 0)
        {
          if (v412)
          {
            LOWORD(v81) = *((_WORD *)v412 + 8 * v400);
          }
          else
          {
            v81 = (unint64_t)v427;
            v427 += 2;
            LODWORD(v81) = *(_DWORD *)v81;
          }
          v81 = (unsigned __int16)v81;
        }
        else if ((v20 & 0x2000) != 0)
        {
          if (v412)
          {
            LOBYTE(v81) = *((_BYTE *)v412 + 16 * v400);
          }
          else
          {
            v81 = (unint64_t)v427;
            v427 += 2;
            LODWORD(v81) = *(_DWORD *)v81;
          }
          v81 = v81;
        }
        else
        {
          if (v412)
          {
            LODWORD(v81) = *((_DWORD *)v412 + 4 * v400);
          }
          else
          {
            v81 = (unint64_t)v427;
            v427 += 2;
            LODWORD(v81) = *(_DWORD *)v81;
          }
          v81 = v81;
        }
        v386 = v81;
        v89 = 8;
        goto LABEL_388;
      case 'p':
        if ((v20 & 0x4000) == 0)
        {
          v64 = v407;
          if (v412)
          {
            v67 = *((_QWORD *)v412 + 2 * v400);
          }
          else
          {
            v103 = (unint64_t *)v427;
            v427 += 2;
            v67 = *v103;
          }
          LOWORD(v20) = v20 | 0x1000;
          v414 = 120;
          v89 = 16;
          v390 = &__vfprintf_xdigs_lower;
          goto LABEL_397;
        }
        v63 = 0;
        v21 = 112;
LABEL_141:
        v64 = v407;
        goto LABEL_414;
      case 'q':
        v20 = v20 | 0x20;
        continue;
      case 's':
LABEL_161:
        v396 = v20;
        if ((v20 & 0x10) == 0)
        {
          v64 = v407;
          if (v412)
          {
            v68 = (const char *)*((_QWORD *)v412 + 2 * v400);
          }
          else
          {
            v82 = (const char **)v427;
            v427 += 2;
            v68 = *v82;
          }
          if (!v68)
            v68 = "(null)";
LABEL_233:
          v402 = (uint64_t)v68;
          if ((v64 & 0x8000000000000000) == 0)
            goto LABEL_234;
          goto LABEL_255;
        }
        free(v392);
        v64 = v407;
        if (v412)
        {
          v70 = (char *)*((_QWORD *)v412 + 2 * v400);
          if (!v70)
            goto LABEL_232;
        }
        else
        {
          v85 = (char **)v427;
          v427 += 2;
          v70 = *v85;
          if (!*v85)
          {
LABEL_232:
            v392 = 0;
            v68 = "(null)";
            goto LABEL_233;
          }
        }
        memset(&v436, 0, sizeof(v436));
        v428 = 0;
        v403 = v70;
        if ((v407 & 0x80000000) != 0)
        {
          v428 = (__int32 *)v70;
          memset(&v436, 0, sizeof(v436));
          v71 = wcsrtombs_l(0, (const __int32 **)&v428, 0, &v436, v401);
          if (v71 == -1)
            goto LABEL_880;
        }
        else if (v407 > 0x7F)
        {
          v92 = 0;
          v428 = (__int32 *)v70;
          memset(&v436, 0, sizeof(v436));
          do
          {
            v71 = v92;
            v93 = *v428++;
            v94 = wcrtomb_l(v429, v93, &v436, v401);
            v92 = v94 + v71;
          }
          while (v94 + 1 >= 2 && v92 <= v407);
        }
        else
        {
          v71 = v407;
        }
        v96 = (char *)malloc_type_malloc(v71 + 1, 0xFA50CE1uLL);
        if (!v96)
          goto LABEL_880;
        v428 = (__int32 *)v403;
        memset(&v436, 0, sizeof(v436));
        v97 = v71;
        v98 = v96;
        v99 = wcsrtombs_l(v96, (const __int32 **)&v428, v97, &v436, v401);
        if (v99 == -1)
        {
          free(v98);
LABEL_880:
          v392 = 0;
LABEL_881:
          *(_WORD *)(a1 + 16) |= 0x40u;
LABEL_867:
          v8 = v399;
          goto LABEL_868;
        }
        v98[v99] = 0;
        v392 = v98;
        v402 = (uint64_t)v98;
        v64 = v407;
        if ((v407 & 0x8000000000000000) == 0)
        {
LABEL_234:
          v86 = _platform_strnlen();
          goto LABEL_256;
        }
LABEL_255:
        v86 = _platform_strlen();
LABEL_256:
        v395 = v86;
        LOWORD(v20) = v396;
        if (v86 > 0x7FFFFFFE)
          goto LABEL_863;
        if (off_1EDF54E08)
        {
          off_1EDF54E08(v402, v86);
          LOWORD(v20) = v396;
        }
        v63 = 0;
        ++v400;
        v426 = 0;
LABEL_414:
        v410 = v64;
        if ((v20 & 0x4000) == 0)
        {
          v398 = v20;
          v141 = v395;
          if (v63 > v395)
            v141 = v63;
          v142 = v426;
          if (v426)
            ++v141;
          if (v414)
            v143 = v141 + 2;
          else
            v143 = v141;
          if (v19 <= v143)
            v144 = v143;
          else
            v144 = v19;
          v8 = v144 + v399;
          if (v144 + v399 >= 0x7FFFFFFF)
          {
LABEL_862:
            *__error() = 84;
LABEL_863:
            v8 = -1;
            goto LABEL_868;
          }
          v145 = v20 & 0x84;
          if ((v20 & 0x84) == 0)
          {
            v152 = v19 - v143;
            if ((int)v19 - (int)v143 >= 1)
            {
              v153 = v416[1];
              v154 = HIDWORD(v416[1]);
              do
              {
                v155 = v153;
                if (v152 >= 16)
                  v156 = 16;
                else
                  v156 = v152;
                v157 = &v416[2 * v153 - 1];
                v157[3] = &blanks;
                v157[4] = v156;
                v154 += v156;
                v153 = v155 + 1;
                HIDWORD(v416[1]) = v154;
                LODWORD(v416[1]) = v155 + 1;
                if (v155 >= 7)
                {
                  if (v154)
                  {
                    v158 = __sfvwrite(v415, (uint64_t)v416);
                    v154 = 0;
                    v153 = 0;
                    v416[1] = 0;
                    if (v158)
                      goto LABEL_867;
                  }
                  else
                  {
                    v153 = 0;
                    LODWORD(v416[1]) = 0;
                  }
                }
                v159 = __OFSUB__(v152, (_DWORD)v156);
                v152 -= v156;
              }
              while (!((v152 < 0) ^ v159 | (v152 == 0)));
              v142 = v426;
            }
          }
          if (v142)
          {
            v160 = v416[1];
            v161 = HIDWORD(v416[1]);
            v162 = &v416[2 * SLODWORD(v416[1]) - 1];
            v162[3] = &v426;
            v162[4] = 1;
            v163 = v161 + 1;
            HIDWORD(v416[1]) = v163;
            LODWORD(v416[1]) = v160 + 1;
            if (v160 >= 7)
            {
              if (v163)
              {
                v164 = __sfvwrite(v415, (uint64_t)v416);
                v416[1] = 0;
                if (v164)
                  goto LABEL_867;
              }
              else
              {
                LODWORD(v416[1]) = 0;
              }
            }
          }
          if (v414)
          {
            v413 = 48;
            v181 = v416[1];
            v182 = HIDWORD(v416[1]);
            v183 = &v416[2 * SLODWORD(v416[1]) - 1];
            v183[3] = &v413;
            v183[4] = 2;
            v184 = v182 + 2;
            HIDWORD(v416[1]) = v184;
            LODWORD(v416[1]) = v181 + 1;
            if (v181 >= 7)
            {
              if (v184)
              {
                v185 = __sfvwrite(v415, (uint64_t)v416);
                v416[1] = 0;
                if (v185)
                  goto LABEL_867;
              }
              else
              {
                LODWORD(v416[1]) = 0;
              }
            }
          }
          if (v145 == 128)
          {
            v186 = v19 - v143;
            if ((int)v19 - (int)v143 >= 1)
            {
              v187 = v416[1];
              v188 = HIDWORD(v416[1]);
              do
              {
                v189 = v187;
                if (v186 >= 16)
                  v190 = 16;
                else
                  v190 = v186;
                v191 = &v416[2 * v187 - 1];
                v191[3] = "0000000000000000";
                v191[4] = v190;
                v188 += v190;
                v187 = v189 + 1;
                HIDWORD(v416[1]) = v188;
                LODWORD(v416[1]) = v189 + 1;
                if (v189 >= 7)
                {
                  if (v188)
                  {
                    v192 = __sfvwrite(v415, (uint64_t)v416);
                    v188 = 0;
                    v187 = 0;
                    v416[1] = 0;
                    if (v192)
                      goto LABEL_867;
                  }
                  else
                  {
                    v187 = 0;
                    LODWORD(v416[1]) = 0;
                  }
                }
                v159 = __OFSUB__(v186, (_DWORD)v190);
                v186 -= v190;
              }
              while (!((v186 < 0) ^ v159 | (v186 == 0)));
            }
          }
          if ((v398 & 0x100) == 0)
          {
            v193 = v63 - v395;
            if (v63 - (int)v395 >= 1)
            {
              v194 = v416[1];
              v195 = HIDWORD(v416[1]);
              do
              {
                v196 = v194;
                if (v193 >= 16)
                  v197 = 16;
                else
                  v197 = v193;
                v198 = &v416[2 * v194 - 1];
                v198[3] = "0000000000000000";
                v198[4] = v197;
                v195 += v197;
                v194 = v196 + 1;
                HIDWORD(v416[1]) = v195;
                LODWORD(v416[1]) = v196 + 1;
                if (v196 >= 7)
                {
                  if (v195)
                  {
                    v199 = __sfvwrite(v415, (uint64_t)v416);
                    v195 = 0;
                    v194 = 0;
                    v416[1] = 0;
                    if (v199)
                      goto LABEL_867;
                  }
                  else
                  {
                    v194 = 0;
                    LODWORD(v416[1]) = 0;
                  }
                }
                v159 = __OFSUB__(v193, (_DWORD)v197);
                v193 -= v197;
              }
              while (!((v193 < 0) ^ v159 | (v193 == 0)));
            }
            if ((_QWORD)v424)
            {
              if ((grouping_print((uint64_t)&v423, (uint64_t)&v415, v402, (unint64_t)v433) & 0x80000000) != 0)
                goto LABEL_867;
              goto LABEL_839;
            }
            v208 = v416[1];
            v209 = HIDWORD(v416[1]);
            v210 = &v416[2 * SLODWORD(v416[1]) - 1];
            v210[3] = v402;
            v210[4] = (int)v395;
            v211 = v209 + v395;
            HIDWORD(v416[1]) = v211;
            LODWORD(v416[1]) = v208 + 1;
            if (v208 < 7)
              goto LABEL_839;
            if (!v211)
            {
LABEL_544:
              LODWORD(v416[1]) = 0;
              goto LABEL_839;
            }
LABEL_728:
            v315 = __sfvwrite(v415, (uint64_t)v416);
            v416[1] = 0;
            if (v315)
              goto LABEL_867;
            goto LABEL_839;
          }
          if (v393)
          {
            if (v410 > 1 || (v398 & 1) != 0)
            {
              v212 = v416[1];
              v213 = HIDWORD(v416[1]);
              v214 = &v416[2 * SLODWORD(v416[1]) - 1];
              v214[3] = v402;
              v214[4] = 1;
              v215 = v213 + 1;
              v216 = v212 + 1;
              HIDWORD(v416[1]) = v215;
              LODWORD(v416[1]) = v212 + 1;
              if (v212 >= 7)
              {
                if (v215)
                {
                  v217 = __sfvwrite(v415, (uint64_t)v416);
                  v215 = 0;
                  v216 = 0;
                  v416[1] = 0;
                  if (v217)
                    goto LABEL_867;
                }
                else
                {
                  v216 = 0;
                }
              }
              v302 = &v416[2 * v216 - 1];
              v302[3] = decimal_point;
              v302[4] = v387;
              v303 = v215 + v387;
              v304 = v216 + 1;
              HIDWORD(v416[1]) = v303;
              LODWORD(v416[1]) = v216 + 1;
              if (v216 >= 7)
              {
                if (v303)
                {
                  v305 = __sfvwrite(v415, (uint64_t)v416);
                  v303 = 0;
                  v304 = 0;
                  v416[1] = 0;
                  if (v305)
                    goto LABEL_867;
                }
                else
                {
                  v304 = 0;
                }
              }
              v306 = &v416[2 * v304 - 1];
              v306[3] = v402 + 1;
              v306[4] = v388 - 1;
              v203 = v303 + v388 - 1;
              v204 = v304 + 1;
              HIDWORD(v416[1]) = v203;
              LODWORD(v416[1]) = v304 + 1;
              if (v304 >= 7)
              {
                if (v203)
                {
                  v307 = __sfvwrite(v415, (uint64_t)v416);
                  v203 = 0;
                  v204 = 0;
                  v416[1] = 0;
                  if (v307)
                    goto LABEL_867;
                }
                else
                {
                  v204 = 0;
                }
              }
              v308 = v410 - v388;
              if ((int)v410 - v388 >= 1)
              {
                do
                {
                  v309 = v204;
                  if (v308 >= 16)
                    v310 = 16;
                  else
                    v310 = v308;
                  v311 = &v416[2 * v204 - 1];
                  v311[3] = "0000000000000000";
                  v311[4] = v310;
                  v203 += v310;
                  v204 = v309 + 1;
                  HIDWORD(v416[1]) = v203;
                  LODWORD(v416[1]) = v309 + 1;
                  if (v309 >= 7)
                  {
                    if (v203)
                    {
                      v312 = __sfvwrite(v415, (uint64_t)v416);
                      v203 = 0;
                      v204 = 0;
                      v416[1] = 0;
                      if (v312)
                        goto LABEL_867;
                    }
                    else
                    {
                      v204 = 0;
                      LODWORD(v416[1]) = 0;
                    }
                  }
                  v159 = __OFSUB__(v308, (_DWORD)v310);
                  v308 -= v310;
                }
                while (!((v308 < 0) ^ v159 | (v308 == 0)));
              }
            }
            else
            {
              v200 = v416[1];
              v201 = HIDWORD(v416[1]);
              v202 = &v416[2 * SLODWORD(v416[1]) - 1];
              v202[3] = v402;
              v202[4] = 1;
              v203 = v201 + 1;
              v204 = v200 + 1;
              HIDWORD(v416[1]) = v203;
              LODWORD(v416[1]) = v200 + 1;
              if (v200 >= 7)
              {
                if (v203)
                {
                  v205 = __sfvwrite(v415, (uint64_t)v416);
                  v203 = 0;
                  v204 = 0;
                  v416[1] = 0;
                  if (v205)
                    goto LABEL_867;
                }
                else
                {
                  v204 = 0;
                }
              }
            }
            v313 = &v416[2 * v204 - 1];
            v313[3] = v433;
            v313[4] = v385;
            v314 = v203 + v385;
            HIDWORD(v416[1]) = v314;
            LODWORD(v416[1]) = v204 + 1;
            if (v204 < 7)
              goto LABEL_839;
            if (!v314)
              goto LABEL_544;
            goto LABEL_728;
          }
          v206 = v420;
          if (v420 > 0)
          {
            if ((_QWORD)v424)
            {
              v207 = grouping_print((uint64_t)&v423, (uint64_t)&v415, v402, (unint64_t)v419);
              if (v207 < 0)
                goto LABEL_867;
            }
            else
            {
              if ((int)v419 - (int)v402 >= v420)
                v248 = v420;
              else
                v248 = ((_DWORD)v419 - v402);
              if ((int)v248 < 1)
              {
                LODWORD(v248) = 0;
              }
              else
              {
                v249 = v416[1];
                v250 = HIDWORD(v416[1]);
                v251 = &v416[2 * SLODWORD(v416[1]) - 1];
                v251[3] = v402;
                v251[4] = v248;
                v252 = v250 + v248;
                HIDWORD(v416[1]) = v252;
                LODWORD(v416[1]) = v249 + 1;
                if (v249 >= 7)
                {
                  if (v252)
                  {
                    v253 = __sfvwrite(v415, (uint64_t)v416);
                    v416[1] = 0;
                    if (v253)
                      goto LABEL_867;
                  }
                  else
                  {
                    LODWORD(v416[1]) = 0;
                  }
                }
              }
              v345 = v206 - v248;
              if (v345 >= 1)
              {
                v346 = v416[1];
                v347 = HIDWORD(v416[1]);
                do
                {
                  v348 = v346;
                  if (v345 >= 16)
                    v349 = 16;
                  else
                    v349 = v345;
                  v350 = &v416[2 * v346 - 1];
                  v350[3] = "0000000000000000";
                  v350[4] = v349;
                  v347 += v349;
                  v346 = v348 + 1;
                  HIDWORD(v416[1]) = v347;
                  LODWORD(v416[1]) = v348 + 1;
                  if (v348 >= 7)
                  {
                    if (v347)
                    {
                      v351 = __sfvwrite(v415, (uint64_t)v416);
                      v347 = 0;
                      v346 = 0;
                      v416[1] = 0;
                      if (v351)
                        goto LABEL_867;
                    }
                    else
                    {
                      v346 = 0;
                      LODWORD(v416[1]) = 0;
                    }
                  }
                  v159 = __OFSUB__(v345, (_DWORD)v349);
                  v345 -= v349;
                }
                while (!((v345 < 0) ^ v159 | (v345 == 0)));
              }
              v207 = v420;
            }
            v402 += v207;
            LODWORD(v223) = v410;
            if (v410 || (v398 & 1) != 0)
            {
              v352 = v416[1];
              v353 = HIDWORD(v416[1]);
              v354 = &v416[2 * SLODWORD(v416[1]) - 1];
              v354[3] = decimal_point;
              v354[4] = v387;
              v355 = v353 + v387;
              HIDWORD(v416[1]) = v355;
              LODWORD(v416[1]) = v352 + 1;
              if (v352 >= 7)
              {
                if (v355)
                {
                  v356 = __sfvwrite(v415, (uint64_t)v416);
                  v416[1] = 0;
                  if (v356)
                    goto LABEL_867;
                }
                else
                {
                  LODWORD(v416[1]) = 0;
                }
              }
            }
            else
            {
              LODWORD(v223) = 0;
            }
            goto LABEL_817;
          }
          v218 = v416[1];
          v219 = HIDWORD(v416[1]);
          v220 = &v416[2 * SLODWORD(v416[1]) - 1];
          v220[3] = "0000000000000000";
          v220[4] = 1;
          v221 = v219 + 1;
          v222 = v218 + 1;
          HIDWORD(v416[1]) = v221;
          LODWORD(v416[1]) = v218 + 1;
          if (v218 < 7)
          {
            v223 = v410;
            goto LABEL_613;
          }
          v223 = v410;
          if (v221)
          {
            v224 = __sfvwrite(v415, (uint64_t)v416);
            v221 = 0;
            v222 = 0;
            v416[1] = 0;
            if (v224)
              goto LABEL_867;
LABEL_613:
            if (v223)
              goto LABEL_615;
            goto LABEL_614;
          }
          v222 = 0;
          LODWORD(v416[1]) = 0;
          if (v410)
          {
LABEL_615:
            v254 = &v416[2 * v222 - 1];
            v254[3] = decimal_point;
            v254[4] = v387;
            v221 += v387;
            HIDWORD(v416[1]) = v221;
            LODWORD(v416[1]) = v222 + 1;
            if (v222 < 7)
            {
              ++v222;
            }
            else if (v221)
            {
              v255 = __sfvwrite(v415, (uint64_t)v416);
              v221 = 0;
              v222 = 0;
              v416[1] = 0;
              if (v255)
                goto LABEL_867;
            }
            else
            {
              v222 = 0;
              LODWORD(v416[1]) = 0;
            }
            goto LABEL_781;
          }
LABEL_614:
          if ((v398 & 1) != 0)
            goto LABEL_615;
LABEL_781:
          v339 = v420;
          if (v420 < 0)
          {
            v340 = -v420;
            do
            {
              v341 = v222;
              if (v340 >= 16)
                v342 = 16;
              else
                v342 = v340;
              v343 = &v416[2 * v222 - 1];
              v343[3] = "0000000000000000";
              v343[4] = v342;
              v221 += v342;
              v222 = v341 + 1;
              HIDWORD(v416[1]) = v221;
              LODWORD(v416[1]) = v341 + 1;
              if (v341 >= 7)
              {
                if (v221)
                {
                  v344 = __sfvwrite(v415, (uint64_t)v416);
                  v221 = 0;
                  v222 = 0;
                  v416[1] = 0;
                  if (v344)
                    goto LABEL_867;
                }
                else
                {
                  v222 = 0;
                  LODWORD(v416[1]) = 0;
                }
              }
              v159 = __OFSUB__(v340, (_DWORD)v342);
              v340 -= v342;
            }
            while (!((v340 < 0) ^ v159 | (v340 == 0)));
            v339 = v420;
            LODWORD(v223) = v410;
          }
          LODWORD(v223) = v223 + v339;
LABEL_817:
          v357 = v223;
          if ((int)v419 - (int)v402 >= (int)v223)
            v223 = v223;
          else
            v223 = ((_DWORD)v419 - v402);
          if ((int)v223 < 1)
          {
            LODWORD(v223) = 0;
          }
          else
          {
            v358 = v416[1];
            v359 = HIDWORD(v416[1]);
            v360 = &v416[2 * SLODWORD(v416[1]) - 1];
            v360[3] = v402;
            v360[4] = v223;
            v361 = v359 + v223;
            HIDWORD(v416[1]) = v361;
            LODWORD(v416[1]) = v358 + 1;
            if (v358 >= 7)
            {
              if (v361)
              {
                v362 = __sfvwrite(v415, (uint64_t)v416);
                v416[1] = 0;
                if (v362)
                  goto LABEL_867;
              }
              else
              {
                LODWORD(v416[1]) = 0;
              }
            }
          }
          v363 = v357 - v223;
          if (v363 >= 1)
          {
            v364 = v416[1];
            v365 = HIDWORD(v416[1]);
            do
            {
              v366 = v364;
              if (v363 >= 16)
                v367 = 16;
              else
                v367 = v363;
              v368 = &v416[2 * v364 - 1];
              v368[3] = "0000000000000000";
              v368[4] = v367;
              v365 += v367;
              v364 = v366 + 1;
              HIDWORD(v416[1]) = v365;
              LODWORD(v416[1]) = v366 + 1;
              if (v366 >= 7)
              {
                if (v365)
                {
                  v369 = __sfvwrite(v415, (uint64_t)v416);
                  v365 = 0;
                  v364 = 0;
                  v416[1] = 0;
                  if (v369)
                    goto LABEL_867;
                }
                else
                {
                  v364 = 0;
                  LODWORD(v416[1]) = 0;
                }
              }
              v159 = __OFSUB__(v363, (_DWORD)v367);
              v363 -= v367;
            }
            while (!((v363 < 0) ^ v159 | (v363 == 0)));
          }
LABEL_839:
          if ((v398 & 4) != 0)
          {
            v370 = v19 - v143;
            if (v370 >= 1)
            {
              v371 = v416[1];
              v372 = HIDWORD(v416[1]);
              do
              {
                v373 = v371;
                if (v370 >= 16)
                  v374 = 16;
                else
                  v374 = v370;
                v375 = &v416[2 * v371 - 1];
                v375[3] = &blanks;
                v375[4] = v374;
                v372 += v374;
                v371 = v373 + 1;
                HIDWORD(v416[1]) = v372;
                LODWORD(v416[1]) = v373 + 1;
                if (v373 >= 7)
                {
                  if (v372)
                  {
                    v376 = __sfvwrite(v415, (uint64_t)v416);
                    v372 = 0;
                    v371 = 0;
                    v416[1] = 0;
                    if (v376)
                      goto LABEL_867;
                  }
                  else
                  {
                    v371 = 0;
                    LODWORD(v416[1]) = 0;
                  }
                }
                v159 = __OFSUB__(v370, (_DWORD)v374);
                v370 -= v374;
              }
              while (!((v370 < 0) ^ v159 | (v370 == 0)));
            }
          }
          if (HIDWORD(v416[1]))
          {
            v377 = __sfvwrite(v415, (uint64_t)v416);
            v416[1] = 0;
            if (v377)
              goto LABEL_868;
          }
          else
          {
            LODWORD(v416[1]) = 0;
          }
          goto LABEL_5;
        }
        v146 = v20;
        v428 = 0;
        if (v412)
        {
          v147 = *((_OWORD *)v412 + v400);
        }
        else
        {
          v148 = (_OWORD *)(((unint64_t)v427 + 15) & 0xFFFFFFFFFFFFFFF0);
          v427 = (int *)(v148 + 1);
          v147 = *v148;
        }
        v418 = v147;
        v149 = (char *)&a3[-v9 - v11];
        if ((unint64_t)(v149 + 1) >= 0x22)
        {
          v405 = v147;
          v151 = (mbstate_t *)malloc_type_malloc((size_t)(v149 + 2), 0xF743125DuLL);
          *(_QWORD *)&v147 = v405;
          v150 = v151;
        }
        else
        {
          v150 = &v436;
        }
        if (v417 == 88)
        {
          if (v21 == 99)
            v417 = 0;
          else
            v417 = 32;
        }
        if ((uint64_t)(v149 - 1) < 1)
        {
          v167 = 0;
          v166 = 0;
          v165 = 0;
          if ((v146 & 0x40) != 0)
            goto LABEL_474;
LABEL_469:
          if ((v146 & 0x10) == 0)
          {
            v173 = v21 - 65;
            if (v21 - 65 > 0x2F)
              goto LABEL_550;
            if (((1 << v173) & 0x7100000051) != 0)
            {
              v174 = 6;
LABEL_480:
              v175 = 4;
              goto LABEL_484;
            }
            if (((1 << v173) & 0x800400000000) == 0)
            {
LABEL_550:
              *(_WORD *)&v150->__mbstate8[v167] = 26728;
              v167 += 2;
            }
            if (v21 == 112)
              v174 = 3;
            else
              v174 = 0;
            v175 = 16;
            goto LABEL_484;
          }
          if (v21 == 112)
            v174 = 5;
          else
            v174 = 2;
          goto LABEL_480;
        }
        v165 = 0;
        v166 = 0;
        v167 = 0;
        v168 = (char *)&a3[v12];
        v169 = i;
        while (2)
        {
          v171 = *v169++;
          v170 = v171;
          v172 = (v171 - 42);
          if (v172 <= 0x3E)
          {
            if (((1 << v172) & 0x4020000000030004) != 0)
              goto LABEL_467;
            if (!v172)
            {
              if (*(i - 1) == 46)
                v165 = 1;
              else
                v166 = 1;
              goto LABEL_466;
            }
          }
          if (v170 != 108 && v170 != 118)
LABEL_466:
            v150->__mbstate8[v167++] = v170;
LABEL_467:
          i = v169;
          if (--v168)
            continue;
          break;
        }
        if ((v146 & 0x40) == 0)
          goto LABEL_469;
LABEL_474:
        if (v21 != 99)
        {
          if (v21 == 112)
          {
            v174 = 4;
            goto LABEL_483;
          }
          v150->__mbstate8[v167++] = 104;
        }
        v174 = 1;
LABEL_483:
        v175 = 8;
LABEL_484:
        v406 = v175;
        v176 = &v150->__mbstate8[v167];
        *v176 = v21;
        v176[1] = 0;
        if (v166)
        {
          if (v165)
          {
            switch(v174)
            {
              case 0:
                v177 = v147;
                goto LABEL_564;
              case 1:
                v177 = (unsigned __int16)v147;
                goto LABEL_564;
              case 2:
                v226 = asprintf_l((char **)&v428, v401, v150->__mbstate8, v19, v410, (_QWORD)v147);
                goto LABEL_571;
              case 3:
                v177 = v147;
                goto LABEL_564;
              case 4:
                v177 = (unsigned __int16)v147;
                goto LABEL_564;
              case 5:
                v177 = v147;
LABEL_564:
                v226 = asprintf_l((char **)&v428, v401, v150->__mbstate8, v19, v410, v177);
                goto LABEL_571;
              case 6:
                v226 = asprintf_l((char **)&v428, v401, v150->__mbstate8, v19, v410, *(float *)&v147);
LABEL_571:
                v225 = v226;
                break;
              default:
                v225 = 0;
                break;
            }
            v8 = v399 + v225;
            v227 = v416[1];
            v228 = HIDWORD(v416[1]);
            v229 = &v416[2 * SLODWORD(v416[1]) - 1];
            v229[3] = v428;
            v229[4] = v225;
            v230 = v228 + v225;
            HIDWORD(v416[1]) = v228 + v225;
            LODWORD(v416[1]) = v227 + 1;
            if (v227 < 7)
            {
              if (!v230)
                goto LABEL_579;
              v232 = __sfvwrite(v415, (uint64_t)v416);
              v416[1] = 0;
              if (v232)
                goto LABEL_868;
            }
            else
            {
              if (v230)
              {
                v231 = __sfvwrite(v415, (uint64_t)v416);
                v416[1] = 0;
                if (v231)
                  goto LABEL_868;
              }
LABEL_579:
              LODWORD(v416[1]) = 0;
            }
            free(v428);
            v233 = (float *)&v418 + 1;
            v234 = 1;
            while (2)
            {
              if (v417)
              {
                v235 = v416[1];
                v236 = HIDWORD(v416[1]);
                v237 = &v416[2 * SLODWORD(v416[1]) - 1];
                v237[3] = &v417;
                v237[4] = 1;
                v238 = v236 + 1;
                HIDWORD(v416[1]) = v238;
                LODWORD(v416[1]) = v235 + 1;
                if (v235 >= 7)
                {
                  if (v238)
                  {
                    v239 = __sfvwrite(v415, (uint64_t)v416);
                    v416[1] = 0;
                    if (v239)
                      goto LABEL_868;
                  }
                  else
                  {
                    LODWORD(v416[1]) = 0;
                  }
                }
              }
              switch(v174)
              {
                case 0:
                case 3:
                  v240 = *((unsigned __int8 *)&v418 + v234);
                  goto LABEL_591;
                case 1:
                case 4:
                  v240 = *((unsigned __int16 *)&v418 + v234);
                  goto LABEL_591;
                case 2:
                case 5:
                  v240 = *(unsigned int *)v233;
LABEL_591:
                  v241 = asprintf_l((char **)&v428, v401, v150->__mbstate8, v19, v410, v240);
                  goto LABEL_592;
                case 6:
                  v241 = asprintf_l((char **)&v428, v401, v150->__mbstate8, v19, v410, *v233);
LABEL_592:
                  v225 = v241;
                  break;
                default:
                  break;
              }
              v8 += v225;
              v242 = v416[1];
              v243 = HIDWORD(v416[1]);
              v244 = &v416[2 * SLODWORD(v416[1]) - 1];
              v244[3] = v428;
              v244[4] = v225;
              v245 = v243 + v225;
              HIDWORD(v416[1]) = v243 + v225;
              LODWORD(v416[1]) = v242 + 1;
              if (v242 < 7)
              {
                if (!v245)
                  goto LABEL_600;
                v247 = __sfvwrite(v415, (uint64_t)v416);
                v416[1] = 0;
                if (v247)
                  goto LABEL_868;
              }
              else
              {
                if (v245)
                {
                  v246 = __sfvwrite(v415, (uint64_t)v416);
                  v416[1] = 0;
                  if (v246)
                    goto LABEL_868;
                }
LABEL_600:
                LODWORD(v416[1]) = 0;
              }
              free(v428);
              ++v234;
              ++v233;
              if (v406 == v234)
                goto LABEL_770;
              continue;
            }
          }
          switch(v174)
          {
            case 0:
              v179 = v147;
              goto LABEL_663;
            case 1:
              v179 = (unsigned __int16)v147;
              goto LABEL_663;
            case 2:
              v280 = asprintf_l((char **)&v428, v401, v150->__mbstate8, v19, (_QWORD)v147);
              goto LABEL_670;
            case 3:
              v179 = v147;
              goto LABEL_663;
            case 4:
              v179 = (unsigned __int16)v147;
              goto LABEL_663;
            case 5:
              v179 = v147;
LABEL_663:
              v280 = asprintf_l((char **)&v428, v401, v150->__mbstate8, v19, v179);
              goto LABEL_670;
            case 6:
              v280 = asprintf_l((char **)&v428, v401, v150->__mbstate8, v19, *(float *)&v147);
LABEL_670:
              v279 = v280;
              break;
            default:
              v279 = 0;
              break;
          }
          v8 = v399 + v279;
          v281 = v416[1];
          v282 = HIDWORD(v416[1]);
          v283 = &v416[2 * SLODWORD(v416[1]) - 1];
          v283[3] = v428;
          v283[4] = v279;
          v284 = v282 + v279;
          HIDWORD(v416[1]) = v282 + v279;
          LODWORD(v416[1]) = v281 + 1;
          if (v281 < 7)
          {
            if (!v284)
              goto LABEL_678;
            v286 = __sfvwrite(v415, (uint64_t)v416);
            v416[1] = 0;
            if (v286)
              goto LABEL_868;
          }
          else
          {
            if (v284)
            {
              v285 = __sfvwrite(v415, (uint64_t)v416);
              v416[1] = 0;
              if (v285)
                goto LABEL_868;
            }
LABEL_678:
            LODWORD(v416[1]) = 0;
          }
          free(v428);
          v287 = (float *)&v418 + 1;
          v288 = 1;
          while (2)
          {
            if (v417)
            {
              v289 = v416[1];
              v290 = HIDWORD(v416[1]);
              v291 = &v416[2 * SLODWORD(v416[1]) - 1];
              v291[3] = &v417;
              v291[4] = 1;
              v292 = v290 + 1;
              HIDWORD(v416[1]) = v292;
              LODWORD(v416[1]) = v289 + 1;
              if (v289 >= 7)
              {
                if (v292)
                {
                  v293 = __sfvwrite(v415, (uint64_t)v416);
                  v416[1] = 0;
                  if (v293)
                    goto LABEL_868;
                }
                else
                {
                  LODWORD(v416[1]) = 0;
                }
              }
            }
            switch(v174)
            {
              case 0:
              case 3:
                v294 = *((unsigned __int8 *)&v418 + v288);
                goto LABEL_690;
              case 1:
              case 4:
                v294 = *((unsigned __int16 *)&v418 + v288);
                goto LABEL_690;
              case 2:
              case 5:
                v294 = *(unsigned int *)v287;
LABEL_690:
                v295 = asprintf_l((char **)&v428, v401, v150->__mbstate8, v19, v294);
                goto LABEL_691;
              case 6:
                v295 = asprintf_l((char **)&v428, v401, v150->__mbstate8, v19, *v287);
LABEL_691:
                v279 = v295;
                break;
              default:
                break;
            }
            v8 += v279;
            v296 = v416[1];
            v297 = HIDWORD(v416[1]);
            v298 = &v416[2 * SLODWORD(v416[1]) - 1];
            v298[3] = v428;
            v298[4] = v279;
            v299 = v297 + v279;
            HIDWORD(v416[1]) = v297 + v279;
            LODWORD(v416[1]) = v296 + 1;
            if (v296 < 7)
            {
              if (!v299)
                goto LABEL_699;
              v301 = __sfvwrite(v415, (uint64_t)v416);
              v416[1] = 0;
              if (v301)
                goto LABEL_868;
            }
            else
            {
              if (v299)
              {
                v300 = __sfvwrite(v415, (uint64_t)v416);
                v416[1] = 0;
                if (v300)
                  goto LABEL_868;
              }
LABEL_699:
              LODWORD(v416[1]) = 0;
            }
            free(v428);
            ++v288;
            ++v287;
            if (v406 == v288)
              goto LABEL_770;
            continue;
          }
        }
        if (v165)
        {
          switch(v174)
          {
            case 0:
              v178 = v147;
              goto LABEL_621;
            case 1:
              v178 = (unsigned __int16)v147;
              goto LABEL_621;
            case 2:
              v257 = asprintf_l((char **)&v428, v401, v150->__mbstate8, v410, (_QWORD)v147);
              goto LABEL_628;
            case 3:
              v178 = v147;
              goto LABEL_621;
            case 4:
              v178 = (unsigned __int16)v147;
              goto LABEL_621;
            case 5:
              v178 = v147;
LABEL_621:
              v257 = asprintf_l((char **)&v428, v401, v150->__mbstate8, v410, v178);
              goto LABEL_628;
            case 6:
              v257 = asprintf_l((char **)&v428, v401, v150->__mbstate8, v410, *(float *)&v147);
LABEL_628:
              v256 = v257;
              break;
            default:
              v256 = 0;
              break;
          }
          v8 = v399 + v256;
          v258 = v416[1];
          v259 = HIDWORD(v416[1]);
          v260 = &v416[2 * SLODWORD(v416[1]) - 1];
          v260[3] = v428;
          v260[4] = v256;
          v261 = v259 + v256;
          HIDWORD(v416[1]) = v259 + v256;
          LODWORD(v416[1]) = v258 + 1;
          if (v258 < 7)
          {
            if (!v261)
              goto LABEL_636;
            v263 = __sfvwrite(v415, (uint64_t)v416);
            v416[1] = 0;
            if (v263)
              goto LABEL_868;
          }
          else
          {
            if (v261)
            {
              v262 = __sfvwrite(v415, (uint64_t)v416);
              v416[1] = 0;
              if (v262)
                goto LABEL_868;
            }
LABEL_636:
            LODWORD(v416[1]) = 0;
          }
          free(v428);
          v264 = (float *)&v418 + 1;
          v265 = 1;
          while (2)
          {
            if (v417)
            {
              v266 = v416[1];
              v267 = HIDWORD(v416[1]);
              v268 = &v416[2 * SLODWORD(v416[1]) - 1];
              v268[3] = &v417;
              v268[4] = 1;
              v269 = v267 + 1;
              HIDWORD(v416[1]) = v269;
              LODWORD(v416[1]) = v266 + 1;
              if (v266 >= 7)
              {
                if (v269)
                {
                  v270 = __sfvwrite(v415, (uint64_t)v416);
                  v416[1] = 0;
                  if (v270)
                    goto LABEL_868;
                }
                else
                {
                  LODWORD(v416[1]) = 0;
                }
              }
            }
            switch(v174)
            {
              case 0:
              case 3:
                v271 = *((unsigned __int8 *)&v418 + v265);
                goto LABEL_648;
              case 1:
              case 4:
                v271 = *((unsigned __int16 *)&v418 + v265);
                goto LABEL_648;
              case 2:
              case 5:
                v271 = *(unsigned int *)v264;
LABEL_648:
                v272 = asprintf_l((char **)&v428, v401, v150->__mbstate8, v410, v271);
                goto LABEL_649;
              case 6:
                v272 = asprintf_l((char **)&v428, v401, v150->__mbstate8, v410, *v264);
LABEL_649:
                v256 = v272;
                break;
              default:
                break;
            }
            v8 += v256;
            v273 = v416[1];
            v274 = HIDWORD(v416[1]);
            v275 = &v416[2 * SLODWORD(v416[1]) - 1];
            v275[3] = v428;
            v275[4] = v256;
            v276 = v274 + v256;
            HIDWORD(v416[1]) = v274 + v256;
            LODWORD(v416[1]) = v273 + 1;
            if (v273 < 7)
            {
              if (!v276)
                goto LABEL_657;
              v278 = __sfvwrite(v415, (uint64_t)v416);
              v416[1] = 0;
              if (v278)
                goto LABEL_868;
            }
            else
            {
              if (v276)
              {
                v277 = __sfvwrite(v415, (uint64_t)v416);
                v416[1] = 0;
                if (v277)
                  goto LABEL_868;
              }
LABEL_657:
              LODWORD(v416[1]) = 0;
            }
            free(v428);
            ++v265;
            ++v264;
            if (v406 == v265)
              goto LABEL_770;
            continue;
          }
        }
        switch(v174)
        {
          case 0:
            v180 = v147;
            goto LABEL_736;
          case 1:
            v180 = (unsigned __int16)v147;
            goto LABEL_736;
          case 2:
            v317 = asprintf_l((char **)&v428, v401, v150->__mbstate8, (_QWORD)v147);
            goto LABEL_737;
          case 3:
            v180 = v147;
            goto LABEL_736;
          case 4:
            v180 = (unsigned __int16)v147;
            goto LABEL_736;
          case 5:
            v180 = v147;
LABEL_736:
            v317 = asprintf_l((char **)&v428, v401, v150->__mbstate8, v180);
            goto LABEL_737;
          case 6:
            v317 = asprintf_l((char **)&v428, v401, v150->__mbstate8, *(float *)&v147);
LABEL_737:
            v316 = v317;
            break;
          default:
            v316 = 0;
            break;
        }
        v8 = v399 + v316;
        v318 = v416[1];
        v319 = HIDWORD(v416[1]);
        v320 = &v416[2 * SLODWORD(v416[1]) - 1];
        v320[3] = v428;
        v320[4] = v316;
        v321 = v319 + v316;
        HIDWORD(v416[1]) = v319 + v316;
        LODWORD(v416[1]) = v318 + 1;
        if (v318 < 7)
        {
          if (v321)
          {
            v323 = __sfvwrite(v415, (uint64_t)v416);
            v416[1] = 0;
            if (v323)
              goto LABEL_868;
            goto LABEL_746;
          }
LABEL_745:
          LODWORD(v416[1]) = 0;
LABEL_746:
          free(v428);
          v324 = (float *)&v418 + 1;
          v325 = 1;
          while (1)
          {
            if (v417)
            {
              v326 = v416[1];
              v327 = HIDWORD(v416[1]);
              v328 = &v416[2 * SLODWORD(v416[1]) - 1];
              v328[3] = &v417;
              v328[4] = 1;
              v329 = v327 + 1;
              HIDWORD(v416[1]) = v329;
              LODWORD(v416[1]) = v326 + 1;
              if (v326 >= 7)
              {
                if (v329)
                {
                  v330 = __sfvwrite(v415, (uint64_t)v416);
                  v416[1] = 0;
                  if (v330)
                    goto LABEL_868;
                }
                else
                {
                  LODWORD(v416[1]) = 0;
                }
              }
            }
            switch(v174)
            {
              case 0:
              case 3:
                v331 = *((unsigned __int8 *)&v418 + v325);
                goto LABEL_757;
              case 1:
              case 4:
                v331 = *((unsigned __int16 *)&v418 + v325);
                goto LABEL_757;
              case 2:
              case 5:
                v331 = *(unsigned int *)v324;
LABEL_757:
                v332 = asprintf_l((char **)&v428, v401, v150->__mbstate8, v331);
                goto LABEL_758;
              case 6:
                v332 = asprintf_l((char **)&v428, v401, v150->__mbstate8, *v324);
LABEL_758:
                v316 = v332;
                break;
              default:
                break;
            }
            v8 += v316;
            v333 = v416[1];
            v334 = HIDWORD(v416[1]);
            v335 = &v416[2 * SLODWORD(v416[1]) - 1];
            v335[3] = v428;
            v335[4] = v316;
            v336 = v334 + v316;
            HIDWORD(v416[1]) = v334 + v316;
            LODWORD(v416[1]) = v333 + 1;
            if (v333 < 7)
            {
              if (v336)
              {
                v338 = __sfvwrite(v415, (uint64_t)v416);
                v416[1] = 0;
                if (v338)
                  goto LABEL_868;
                goto LABEL_767;
              }
            }
            else if (v336)
            {
              v337 = __sfvwrite(v415, (uint64_t)v416);
              v416[1] = 0;
              if (v337)
                goto LABEL_868;
            }
            LODWORD(v416[1]) = 0;
LABEL_767:
            free(v428);
            ++v325;
            ++v324;
            if (v406 == v325)
            {
LABEL_770:
              if (v150 != &v436)
                free(v150);
              ++v400;
              goto LABEL_5;
            }
          }
        }
        if (!v321)
          goto LABEL_745;
        v322 = __sfvwrite(v415, (uint64_t)v416);
        v416[1] = 0;
        if (!v322)
          goto LABEL_745;
LABEL_868:
        if (v394)
          __freedtoa((uint64_t)v394);
        free(v392);
        v378 = *(_WORD *)(a1 + 16);
        if (v412 && v412 != v430)
          free(v412);
        if ((v378 & 0x40) != 0)
          v379 = -1;
        else
          v379 = v8;
        if (v379 > 0x7FFFFFFE)
          return 0xFFFFFFFFLL;
        else
          return v379;
      case 't':
        v20 = v20 | 0x800;
        continue;
      case 'u':
LABEL_165:
        v64 = v407;
        if ((v20 & 0x4000) != 0)
          goto LABEL_178;
        if ((v20 & 0x1C20) != 0)
        {
          if (v412)
          {
            v67 = *((_QWORD *)v412 + 2 * v400);
          }
          else
          {
            v90 = (unint64_t *)v427;
            v427 += 2;
            v67 = *v90;
          }
          v89 = 10;
        }
        else
        {
          if ((v20 & 0x10) != 0)
          {
            if (v412)
            {
              v83 = *((_QWORD *)v412 + 2 * v400);
            }
            else
            {
              v134 = (unint64_t *)v427;
              v427 += 2;
              v83 = *v134;
            }
          }
          else if ((v20 & 0x40) != 0)
          {
            if (v412)
            {
              LOWORD(v83) = *((_WORD *)v412 + 8 * v400);
            }
            else
            {
              v83 = (unint64_t)v427;
              v427 += 2;
              LODWORD(v83) = *(_DWORD *)v83;
            }
            v83 = (unsigned __int16)v83;
          }
          else if ((v20 & 0x2000) != 0)
          {
            if (v412)
            {
              LOBYTE(v83) = *((_BYTE *)v412 + 16 * v400);
            }
            else
            {
              v83 = (unint64_t)v427;
              v427 += 2;
              LODWORD(v83) = *(_DWORD *)v83;
            }
            v83 = v83;
          }
          else
          {
            if (v412)
            {
              LODWORD(v83) = *((_DWORD *)v412 + 4 * v400);
            }
            else
            {
              v83 = (unint64_t)v427;
              v427 += 2;
              LODWORD(v83) = *(_DWORD *)v83;
            }
            v83 = v83;
          }
          v386 = v83;
          v89 = 10;
LABEL_388:
          v67 = v389;
        }
        goto LABEL_397;
      case 'v':
        v20 = v20 | 0x4000;
        continue;
      case 'x':
        v69 = &__vfprintf_xdigs_lower;
LABEL_174:
        v390 = v69;
        v64 = v407;
        if ((v20 & 0x4000) != 0)
        {
LABEL_178:
          v63 = 0;
          goto LABEL_414;
        }
        if ((v20 & 0x1C20) != 0)
        {
          if (v412)
          {
            v67 = *((_QWORD *)v412 + 2 * v400);
          }
          else
          {
            v91 = (unint64_t *)v427;
            v427 += 2;
            v67 = *v91;
          }
        }
        else
        {
          if ((v20 & 0x10) != 0)
          {
            if (v412)
            {
              v84 = *((_QWORD *)v412 + 2 * v400);
            }
            else
            {
              v135 = (unint64_t *)v427;
              v427 += 2;
              v84 = *v135;
            }
          }
          else if ((v20 & 0x40) != 0)
          {
            if (v412)
            {
              LOWORD(v84) = *((_WORD *)v412 + 8 * v400);
            }
            else
            {
              v84 = (unint64_t)v427;
              v427 += 2;
              LODWORD(v84) = *(_DWORD *)v84;
            }
            v84 = (unsigned __int16)v84;
          }
          else if ((v20 & 0x2000) != 0)
          {
            if (v412)
            {
              LOBYTE(v84) = *((_BYTE *)v412 + 16 * v400);
            }
            else
            {
              v84 = (unint64_t)v427;
              v427 += 2;
              LODWORD(v84) = *(_DWORD *)v84;
            }
            v84 = v84;
          }
          else
          {
            if (v412)
            {
              LODWORD(v84) = *((_DWORD *)v412 + 4 * v400);
            }
            else
            {
              v84 = (unint64_t)v427;
              v427 += 2;
              LODWORD(v84) = *(_DWORD *)v84;
            }
            v84 = v84;
          }
          v386 = v84;
          v67 = v389;
        }
        if ((v20 & 1) == 0)
          goto LABEL_396;
        if ((v20 & 0x1C20) != 0)
        {
          if (!v67)
            goto LABEL_396;
LABEL_395:
          v414 = v21;
          goto LABEL_396;
        }
        if (v386)
          goto LABEL_395;
LABEL_396:
        LOWORD(v20) = v20 & 0xFDFF;
        v89 = 16;
LABEL_397:
        v426 = 0;
LABEL_398:
        if ((int)v64 >= 0)
          LOWORD(v20) = v20 & 0xFF7F;
        v136 = v20 & 1;
        v389 = v67;
        if ((v20 & 0x1C20) != 0)
        {
          if (v67 | v64)
            goto LABEL_406;
          v402 = (uint64_t)v433;
          if (v89 == 8)
          {
            v402 = (uint64_t)v433;
            if ((v20 & 1) != 0)
            {
              v137 = v64;
              v138 = v20;
              v136 = 1;
LABEL_407:
              v402 = (uint64_t)__ultoa(v67, v433, v89, v136, (uint64_t)v390);
              LOWORD(v20) = v138;
              v64 = v137;
            }
          }
        }
        else
        {
          v67 = v386;
          if (v386 | v64)
          {
LABEL_406:
            v137 = v64;
            v138 = v20;
            goto LABEL_407;
          }
          v402 = (uint64_t)v433;
          if (v89 == 8)
          {
            v402 = (uint64_t)v433;
            if ((v20 & 1) != 0)
            {
              v137 = v64;
              v138 = v20;
              v136 = 1;
              v67 = v386;
              goto LABEL_407;
            }
          }
        }
        v395 = (uint64_t)&v433[-v402];
        if ((uint64_t)&v433[-v402] >= 33)
          abort_report_np((uint64_t)"%s:%s:%u: size (%zd) > BUF (%d)");
        ++v400;
        if ((v20 & 0x200) != 0)
        {
          if (v395)
          {
            v139 = v20;
            v140 = grouping_init((uint64_t)&v423, v395, v401);
            LOWORD(v20) = v139;
            v395 += v140;
          }
          v64 = v407;
        }
        v63 = v64;
        goto LABEL_414;
      case 'z':
        v20 = v20 | 0x400;
        continue;
      default:
        if (!v21)
          goto LABEL_864;
        v63 = 0;
        v431[0] = v21;
        v426 = 0;
        v402 = (uint64_t)v431;
        v395 = 1;
        goto LABEL_141;
    }
  }
}

uint64_t __sfvwrite(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  void *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v30;

  if (!*(_DWORD *)(a2 + 12))
    return 0;
  v4 = *(_WORD *)(a1 + 16);
  if ((v4 & 8) != 0 && ((*(_WORD *)(a1 + 16) & 0x200) != 0 || *(_QWORD *)(a1 + 24)))
    goto LABEL_7;
  if (!__swsetup(a1))
  {
    v4 = *(_WORD *)(a1 + 16);
LABEL_7:
    v6 = **(_QWORD **)a2;
    v5 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    v7 = *(_QWORD *)a2 + 16;
    if ((v4 & 2) == 0)
    {
      if ((v4 & 1) == 0)
      {
        while (1)
        {
          if (!v5)
          {
            do
            {
              v5 = *(_QWORD *)(v7 + 8);
              v7 += 16;
            }
            while (!v5);
            v6 = *(_QWORD *)(v7 - 16);
          }
          v8 = *(unsigned __int16 *)(a1 + 16);
          v9 = *(_DWORD *)(a1 + 12);
          if ((~v8 & 0x4200) == 0 && v5 > v9)
          {
            v11 = *(void **)(a1 + 24);
            v12 = *(_QWORD *)a1 - (_QWORD)v11;
            *(_DWORD *)(a1 + 12) = v5 + 128;
            *(_DWORD *)(a1 + 32) = v12 + v5 + 128;
            v13 = (char *)reallocf(v11, (int)v12 + (int)v5 + 129);
            *(_QWORD *)(a1 + 24) = v13;
            if (!v13)
              goto LABEL_76;
            *(_QWORD *)a1 = &v13[v12];
            v9 = *(_DWORD *)(a1 + 12);
            if ((*(_WORD *)(a1 + 16) & 0x200) != 0)
            {
LABEL_23:
              if (v5 >= v9)
                v14 = v9;
              else
                v14 = v5;
              if ((int)v14 < 1)
              {
                v9 = v5;
                goto LABEL_38;
              }
              _platform_memmove();
              v15 = v14;
              goto LABEL_30;
            }
          }
          else if ((v8 & 0x200) != 0)
          {
            goto LABEL_23;
          }
          if (*(_QWORD *)a1 > *(_QWORD *)(a1 + 24) && v5 > v9)
          {
            _platform_memmove();
            *(_QWORD *)a1 += v9;
            if (__fflush(a1))
              goto LABEL_76;
            goto LABEL_38;
          }
          v16 = *(int *)(a1 + 32);
          if (v5 < v16)
          {
            v15 = (int)v5;
            _platform_memmove();
            LODWORD(v14) = v5;
LABEL_30:
            v9 = v5;
            *(_DWORD *)(a1 + 12) -= v14;
            *(_QWORD *)a1 += v15;
            goto LABEL_38;
          }
          if ((_DWORD)v16)
          {
            v17 = v5 / v16 * v16;
            if (v17 >= 0x7FFFFFFF)
              v18 = 0x7FFFFFFFLL;
            else
              v18 = v17;
          }
          else
          {
            v18 = 0;
          }
          v9 = _swrite(a1, v6, v18);
          if (v9 < 1)
            goto LABEL_76;
LABEL_38:
          v6 += v9;
          v5 -= v9;
          v19 = *(_DWORD *)(a2 + 12) - v9;
          *(_DWORD *)(a2 + 12) = v19;
          if (!v19)
            return 0;
        }
      }
      v23 = 0;
      v24 = 0;
      while (1)
      {
        if (v5)
        {
          if (v23)
            goto LABEL_58;
        }
        else
        {
          do
          {
            v5 = *(_QWORD *)(v7 + 8);
            v7 += 16;
          }
          while (!v5);
          v6 = *(_QWORD *)(v7 - 16);
        }
        v25 = _platform_memchr();
        if (v25)
          v24 = v25 - v6 + 1;
        else
          v24 = v5 + 1;
LABEL_58:
        if (v5 >= v24)
          v26 = v24;
        else
          v26 = v5;
        v27 = *(int *)(a1 + 32);
        v28 = v27 + *(int *)(a1 + 12);
        if (*(_QWORD *)a1 > *(_QWORD *)(a1 + 24) && (int)v28 < v26)
        {
          _platform_memmove();
          *(_QWORD *)a1 += v28;
          if (__fflush(a1))
            goto LABEL_76;
        }
        else if ((int)v27 <= v26)
        {
          LODWORD(v28) = _swrite(a1, v6, v27);
          if ((int)v28 < 1)
            goto LABEL_76;
        }
        else
        {
          _platform_memmove();
          *(_DWORD *)(a1 + 12) -= v26;
          *(_QWORD *)a1 += v26;
          LODWORD(v28) = v26;
        }
        v24 -= v28;
        if (v24)
        {
          v23 = 1;
        }
        else
        {
          if (__fflush(a1))
            goto LABEL_76;
          v23 = 0;
        }
        v6 += (int)v28;
        v5 -= (int)v28;
        v30 = *(_DWORD *)(a2 + 12) - v28;
        *(_DWORD *)(a2 + 12) = v30;
        if (!v30)
          return 0;
      }
    }
    while (1)
    {
      if (!v5)
      {
        do
        {
          v5 = *(_QWORD *)(v7 + 8);
          v7 += 16;
        }
        while (!v5);
        v6 = *(_QWORD *)(v7 - 16);
      }
      v20 = v5 >= 0x7FFFFFFF ? 0x7FFFFFFFLL : v5;
      v21 = _swrite(a1, v6, v20);
      if (v21 < 1)
        break;
      v6 += v21;
      v5 -= v21;
      v22 = *(_DWORD *)(a2 + 12) - v21;
      *(_DWORD *)(a2 + 12) = v22;
      if (!v22)
        return 0;
    }
LABEL_76:
    *(_WORD *)(a1 + 16) |= 0x40u;
  }
  return 0xFFFFFFFFLL;
}

lconv *__cdecl localeconv_l(locale_t a1)
{
  locale_t v1;
  locale_t v2;
  _UNKNOWN **current_monetary_locale;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  char **current_numeric_locale;
  __int128 v12;

  v1 = (locale_t)&__global_locale;
  if (a1 != (locale_t)-1)
    v1 = a1;
  if (a1)
    v2 = v1;
  else
    v2 = (locale_t)&__c_locale;
  os_unfair_lock_lock((os_unfair_lock_t)v2 + 324);
  if (*((_BYTE *)v2 + 1316))
  {
    current_monetary_locale = __get_current_monetary_locale((uint64_t)v2);
    *(_OWORD *)((char *)v2 + 1400) = *(_OWORD *)current_monetary_locale;
    *(_OWORD *)((char *)v2 + 1416) = *((_OWORD *)current_monetary_locale + 1);
    *(_OWORD *)((char *)v2 + 1432) = *((_OWORD *)current_monetary_locale + 2);
    v4 = current_monetary_locale[7];
    *((_QWORD *)v2 + 181) = current_monetary_locale[6];
    *((_BYTE *)v2 + 1456) = *v4;
    v5 = current_monetary_locale[9];
    *((_BYTE *)v2 + 1457) = *(_BYTE *)current_monetary_locale[8];
    *((_BYTE *)v2 + 1458) = *v5;
    v6 = current_monetary_locale[11];
    *((_BYTE *)v2 + 1459) = *(_BYTE *)current_monetary_locale[10];
    *((_BYTE *)v2 + 1460) = *v6;
    v7 = current_monetary_locale[13];
    *((_BYTE *)v2 + 1461) = *(_BYTE *)current_monetary_locale[12];
    *((_BYTE *)v2 + 1462) = *v7;
    v8 = current_monetary_locale[15];
    *((_BYTE *)v2 + 1463) = *(_BYTE *)current_monetary_locale[14];
    *((_BYTE *)v2 + 1464) = *v8;
    v9 = current_monetary_locale[17];
    *((_BYTE *)v2 + 1465) = *(_BYTE *)current_monetary_locale[16];
    *((_BYTE *)v2 + 1466) = *v9;
    v10 = current_monetary_locale[19];
    *((_BYTE *)v2 + 1467) = *(_BYTE *)current_monetary_locale[18];
    *((_BYTE *)v2 + 1468) = *v10;
    *((_BYTE *)v2 + 1469) = *(_BYTE *)current_monetary_locale[20];
    *((_BYTE *)v2 + 1316) = 0;
  }
  if (*((_BYTE *)v2 + 1317))
  {
    current_numeric_locale = __get_current_numeric_locale((uint64_t)v2);
    v12 = *(_OWORD *)current_numeric_locale;
    *((_OWORD *)v2 + 86) = *(_OWORD *)current_numeric_locale;
    *((_QWORD *)v2 + 174) = current_numeric_locale[2];
    *((_BYTE *)v2 + 1317) = 0;
    if (!(_QWORD)v12)
      localeconv_l_cold_2();
  }
  os_unfair_lock_unlock((os_unfair_lock_t)v2 + 324);
  if (!*((_QWORD *)v2 + 172))
    localeconv_l_cold_1();
  return (lconv *)((char *)v2 + 1376);
}

_BYTE *__ultoa(unint64_t a1, _BYTE *a2, int a3, int a4, uint64_t a5)
{
  BOOL v5;
  _BYTE *v6;
  int v7;
  BOOL v8;

  switch(a3)
  {
    case 8:
      v6 = a2 - 1;
      do
      {
        v7 = a1 & 7 | 0x30;
        *v6-- = a1 & 7 | 0x30;
        v8 = a1 > 7;
        a1 >>= 3;
      }
      while (v8);
      a2 = v6 + 1;
      if (a4 && v7 != 48)
      {
        *v6 = 48;
        return v6;
      }
      break;
    case 10:
      if (a1 > 9)
      {
        if ((a1 & 0x8000000000000000) != 0)
        {
          *--a2 = (a1 % 0xA) | 0x30;
          a1 /= 0xAuLL;
        }
        do
        {
          *--a2 = (a1 % 0xA) | 0x30;
          v5 = a1 >= 0xA;
          a1 /= 0xAuLL;
        }
        while (v5);
      }
      else
      {
        *--a2 = a1 + 48;
      }
      break;
    case 16:
      do
      {
        *--a2 = *(_BYTE *)(a5 + (a1 & 0xF));
        v5 = a1 >= 0x10;
        a1 >>= 4;
      }
      while (v5);
      break;
    default:
      abort_report_np((uint64_t)"%s:%s:%u: __ultoa: invalid base=%d");
  }
  return a2;
}

_DWORD *__ultoa_0(unint64_t a1, _DWORD *a2, int a3, int a4, uint64_t a5)
{
  BOOL v5;
  _DWORD *v6;
  int v7;
  BOOL v8;

  switch(a3)
  {
    case 8:
      v6 = a2 - 1;
      do
      {
        v7 = a1 & 7 | 0x30;
        *v6-- = v7;
        v8 = a1 > 7;
        a1 >>= 3;
      }
      while (v8);
      a2 = v6 + 1;
      if (a4 && v7 != 48)
      {
        *v6 = 48;
        return v6;
      }
      break;
    case 10:
      if (a1 > 9)
      {
        if ((a1 & 0x8000000000000000) != 0)
        {
          *--a2 = (a1 % 0xA) | 0x30;
          a1 /= 0xAuLL;
        }
        do
        {
          *--a2 = (a1 % 0xA) | 0x30;
          v5 = a1 >= 0xA;
          a1 /= 0xAuLL;
        }
        while (v5);
      }
      else
      {
        *--a2 = a1 + 48;
      }
      break;
    case 16:
      do
      {
        *--a2 = *(char *)(a5 + (a1 & 0xF));
        v5 = a1 >= 0x10;
        a1 >>= 4;
      }
      while (v5);
      break;
    default:
      abort_report_np((uint64_t)"%s:%s:%u: __ultoa: invalid base=%d");
  }
  return a2;
}

unint64_t _readdir_unlocked(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t result;
  uint64_t v14;
  int v15;

  v4 = 0;
  v5 = *(_QWORD *)(a1 + 8);
  while (1)
  {
    if (v5 >= *(_QWORD *)(a1 + 16))
    {
      v7 = *(_DWORD *)(a1 + 56);
      if ((v7 & 0x28) != 0)
        return 0;
      v6 = v7 & 0xFFFFFFEF;
      *(_DWORD *)(a1 + 56) = v6;
      *(_QWORD *)(a1 + 8) = 0;
      v4 = v5;
    }
    else
    {
      v6 = *(_DWORD *)(a1 + 56);
      if (v5)
        goto LABEL_20;
    }
    if ((v6 & 0x38) != 0)
    {
      v5 = 0;
      goto LABEL_20;
    }
    v8 = *(_DWORD *)(a1 + 32);
    if (v8 == 2048)
    {
      v9 = (char *)malloc_type_malloc(0x2000uLL, 0xAFA3A964uLL);
      v10 = *(char **)(a1 + 24);
      if (v9)
      {
        free(v10);
        *(_QWORD *)(a1 + 24) = v9;
        v8 = 0x2000;
        *(_DWORD *)(a1 + 32) = 0x2000;
        v10 = v9;
      }
      else
      {
        v8 = *(_DWORD *)(a1 + 32);
      }
    }
    else
    {
      v10 = *(char **)(a1 + 24);
    }
    v11 = &v10[v8];
    *((_DWORD *)v11 - 1) = 0;
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 16);
    result = __getdirentries64();
    *(_QWORD *)(a1 + 16) = result;
    if ((result & 0x8000000000000000) != 0)
      return 0;
    if (result <= *(int *)(a1 + 32) - 4)
    {
      if ((*(v11 - 4) & 1) != 0)
        *(_DWORD *)(a1 + 56) |= 0x20u;
      if (!result)
        return result;
    }
    _fixtelldir(a1, v12, v4);
    v6 = *(_DWORD *)(a1 + 56);
    v5 = *(_QWORD *)(a1 + 8);
LABEL_20:
    *(_DWORD *)(a1 + 56) = v6 & 0xFFFFFFEF;
    result = *(_QWORD *)(a1 + 24) + v5;
    if ((result & 3) != 0)
      return 0;
    v14 = *(unsigned __int16 *)(result + 16);
    if (!*(_WORD *)(result + 16) || *(int *)(a1 + 32) - v5 + 1 < v14)
      return 0;
    v5 += v14;
    *(_QWORD *)(a1 + 8) = v5;
    if (!a2 || *(_QWORD *)result)
    {
      v15 = v6 & 1;
      if (*(_BYTE *)(result + 20) != 14 || v15 == 0)
        return result;
    }
  }
}

void __freedtoa(uint64_t a1)
{
  int *v1;
  int v2;

  v2 = *(_DWORD *)(a1 - 4);
  v1 = (int *)(a1 - 4);
  v1[2] = v2;
  v1[3] = 1 << v2;
  __Bfree_D2A(v1);
}

_DWORD *__nrv_alloc_D2A(unsigned __int8 *a1, _QWORD *a2, unsigned int a3)
{
  _DWORD *result;
  int v6;
  _DWORD *v7;
  unsigned __int8 *v8;
  int v9;

  result = __rv_alloc_D2A(a3);
  v6 = *a1;
  *(_BYTE *)result = v6;
  v7 = result;
  if (v6)
  {
    v8 = a1 + 1;
    v7 = result;
    do
    {
      v9 = *v8++;
      *((_BYTE *)v7 + 1) = v9;
      v7 = (_DWORD *)((char *)v7 + 1);
    }
    while (v9);
  }
  if (a2)
    *a2 = v7;
  return result;
}

uint64_t _fixtelldir(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(uint64_t **)(result + 128);
  v4 = *v3;
  if (*v3 && *(_QWORD *)(v4 + 32) == a3 && *(_QWORD *)(v4 + 24) == a2)
  {
    v5 = *(_QWORD *)(result + 8);
    *(_QWORD *)(v4 + 24) = v3[2];
    *(_QWORD *)(v4 + 32) = v5;
  }
  return result;
}

void localeconv_l_cold_1()
{
  _os_crash((uint64_t)"loc->decimal_point is NULL");
  __break(1u);
}

char **__get_current_numeric_locale(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1314))
    return (char **)(*(_QWORD *)(a1 + 1344) + 72);
  else
    return &_C_numeric_locale;
}

_UNKNOWN **__get_current_monetary_locale(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1313))
    return (_UNKNOWN **)(*(_QWORD *)(a1 + 1336) + 72);
  else
    return &_C_monetary_locale;
}

uint64_t __swsetup(uint64_t a1)
{
  __int16 v2;
  uint64_t result;
  void *v4;
  int v5;

  pthread_once(&__sdidinit, __sinit);
  v2 = *(_WORD *)(a1 + 16);
  if ((v2 & 8) == 0)
  {
    if ((v2 & 0x10) == 0)
    {
      *__error() = 9;
      *(_WORD *)(a1 + 16) |= 0x40u;
      return 0xFFFFFFFFLL;
    }
    if ((v2 & 4) != 0)
    {
      v4 = *(void **)(a1 + 88);
      if (v4)
      {
        if (v4 != (void *)(a1 + 116))
        {
          free(v4);
          v2 = *(_WORD *)(a1 + 16);
        }
        *(_QWORD *)(a1 + 88) = 0;
      }
      v2 &= 0xFFDBu;
      *(_DWORD *)(a1 + 8) = 0;
      *(_QWORD *)a1 = *(_QWORD *)(a1 + 24);
    }
    v2 |= 8u;
    *(_WORD *)(a1 + 16) = v2;
  }
  if (!*(_QWORD *)(a1 + 24))
  {
    __smakebuf(a1);
    v2 = *(_WORD *)(a1 + 16);
    if ((v2 & 1) == 0)
      goto LABEL_13;
LABEL_16:
    result = 0;
    *(_DWORD *)(a1 + 12) = 0;
    *(_DWORD *)(a1 + 40) = -*(_DWORD *)(a1 + 32);
    return result;
  }
  if ((v2 & 1) != 0)
    goto LABEL_16;
LABEL_13:
  if ((v2 & 2) != 0)
    v5 = 0;
  else
    v5 = *(_DWORD *)(a1 + 32);
  result = 0;
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

int fprintf(FILE *a1, const char *a2, ...)
{
  uint64_t v3;
  _xlocale *v4;
  _xlocale *v5;
  va_list va;

  va_start(va, a2);
  v3 = __locale_key;
  v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__global_locale;
  return vfprintf_l(a1, v5, a2, va);
}

int vfprintf_l(FILE *a1, locale_t a2, const char *a3, va_list a4)
{
  int v5;

  if (off_1EDF54E20)
    off_1EDF54E20(a1, 152);
  flockfile(a1);
  v5 = __xvprintf((pthread_mutex_t *)0xFFFFFFFFFFFFFFFFLL, 0, (uint64_t)a1);
  funlockfile(a1);
  return v5;
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  int v4;

  if (off_1EDF54E20)
    off_1EDF54E20(a1, 152);
  flockfile(a1);
  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v4 = __xvprintf((pthread_mutex_t *)0xFFFFFFFFFFFFFFFFLL, 0, (uint64_t)a1);
  funlockfile(a1);
  return v4;
}

uint64_t __xvprintf(pthread_mutex_t *a1, int a2, uint64_t a3)
{
  __int16 v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _BYTE *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[1024];
  _QWORD v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v4 = *(_WORD *)(a3 + 16);
  if ((v4 & 0x1A) != 0xA)
    return __v2printf(a1, a2, a3);
  v5 = *(__int16 *)(a3 + 18);
  if (v5 < 0)
    return __v2printf(a1, a2, a3);
  v25 = 0u;
  v24 = 0u;
  v23 = 0;
  v21 = 0u;
  v20 = 0u;
  v19 = 0u;
  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  v31 = 0;
  v32 = 0;
  v22 = v27;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27[0] = 0;
  v27[1] = 850045858;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  WORD4(v16) = v4 & 0xFFFD;
  WORD5(v16) = v5;
  *((_QWORD *)&v18 + 1) = *(_QWORD *)(a3 + 48);
  *((_QWORD *)&v20 + 1) = *(_QWORD *)(a3 + 80);
  v6 = *(_QWORD *)(a3 + 104);
  LOBYTE(v32) = *(_BYTE *)(v6 + 72) & 7;
  v7 = *(_OWORD *)(v6 + 80);
  v8 = *(_OWORD *)(v6 + 96);
  v9 = *(_OWORD *)(v6 + 128);
  v35 = *(_OWORD *)(v6 + 112);
  v36 = v9;
  v33 = v7;
  v34 = v8;
  v10 = *(_OWORD *)(v6 + 144);
  v11 = *(_OWORD *)(v6 + 160);
  v12 = *(_OWORD *)(v6 + 192);
  v39 = *(_OWORD *)(v6 + 176);
  v40 = v12;
  v37 = v10;
  v38 = v11;
  v15 = v26;
  *(_QWORD *)&v17 = v26;
  DWORD1(v16) = 1024;
  DWORD2(v17) = 1024;
  LODWORD(v18) = 0;
  v13 = __v2printf(a1, a2, (int)&v15);
  if ((v13 & 0x80000000) == 0)
  {
    if (__fflush((uint64_t)&v15))
      v13 = 0xFFFFFFFFLL;
    else
      v13 = v13;
  }
  if ((BYTE8(v16) & 0x40) != 0)
    *(_WORD *)(a3 + 16) = v4 | 0x40;
  return v13;
}

uint64_t __fflush(uint64_t a1)
{
  if (!a1)
    return _fwalk((unsigned int (*)(uint64_t))sflush_locked);
  if ((*(_WORD *)(a1 + 16) & 0x18) != 0)
    return __sflush(a1);
  return 0;
}

void uuid_clear(uuid_t uu)
{
  *(_QWORD *)uu = 0;
  *((_QWORD *)uu + 1) = 0;
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  uint64_t v3;
  _xlocale *v4;
  _xlocale *v5;

  v3 = __locale_key;
  v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__global_locale;
  return strncasecmp_l(a1, a2, a3, v5);
}

int __snprintf_chk(char *a1, size_t a2, int a3, size_t a4, const char *a5, ...)
{
  va_list va;

  va_start(va, a5);
  if (a4 < a2)
    __chk_fail_overflow();
  return vsnprintf(a1, a2, a5, va);
}

int __sprintf_chk(char *a1, int a2, size_t a3, const char *a4, ...)
{
  int result;
  va_list va;

  va_start(va, a4);
  if (a3 >> 31)
    return vsprintf(a1, a4, va);
  result = vsnprintf(a1, a3, a4, va);
  if ((result & 0x80000000) == 0 && result >= a3)
    __chk_fail_overflow();
  return result;
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;

  v4 = __locale_key;
  v5 = *(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (v5)
    v6 = v5;
  else
    v6 = (unsigned int *)&__global_locale;
  return _vsnprintf((pthread_mutex_t *)0xFFFFFFFFFFFFFFFFLL, 0, __str, __size, v6, (unsigned __int8 *)__format, (__int16 *)a4);
}

int rand(void)
{
  unint64_t v0;
  int64_t v1;

  v0 = next;
  if (!next)
    v0 = 123459876;
  v1 = 16807 * (v0 % 0x1F31D) - 2836 * (v0 / 0x1F31D);
  next = v1 + (v1 < 0 ? 0x7FFFFFFFuLL : 0);
  return next & 0x7FFFFFFF;
}

time_t time(time_t *a1)
{
  time_t tv_sec;
  fenv_t v4;
  timeval v5;

  v5.tv_sec = 0;
  *(_QWORD *)&v5.tv_usec = 0;
  v4.__fpsr = 0;
  v4.__fpcr = 0;
  fegetenv(&v4);
  if (gettimeofday(&v5, 0) < 0)
    tv_sec = -1;
  else
    tv_sec = v5.tv_sec;
  if (a1)
    *a1 = tv_sec;
  fesetenv(&v4);
  return tv_sec;
}

uint64_t _mach_boottime_usec(uint64_t *a1, timeval *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  while (1)
  {
    v4 = mach_boottime_usec();
    if (!v4)
      v4 = _boottime_fallback_usec();
    __dmb(0xBu);
    v5 = gettimeofday(a2, 0);
    if ((_DWORD)v5)
      break;
    __dmb(0xBu);
    v6 = mach_boottime_usec();
    if (!v6)
      v6 = _boottime_fallback_usec();
    if (v4 == v6)
    {
      *a1 = v4;
      return v5;
    }
  }
  return v5;
}

int clock_gettime(clockid_t __clock_id, timespec *__tp)
{
  __uint64_t v3;
  __uint64_t v4;
  int result;
  unint64_t tv_sec;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  rusage v11;
  unint64_t v12;

  switch(__clock_id)
  {
    case _CLOCK_REALTIME:
      v11.ru_utime = 0uLL;
      result = gettimeofday(&v11.ru_utime, 0);
      tv_sec = v11.ru_utime.tv_sec;
      v7 = 1000 * v11.ru_utime.tv_usec;
      goto LABEL_15;
    case _CLOCK_MONOTONIC_RAW:
    case _CLOCK_MONOTONIC_RAW_APPROX:
    case _CLOCK_UPTIME_RAW:
    case _CLOCK_UPTIME_RAW_APPROX:
    case _CLOCK_THREAD_CPUTIME_ID:
      v3 = clock_gettime_nsec_np(__clock_id);
      if (!v3)
        goto LABEL_6;
      v4 = v3;
      result = 0;
      __tp->tv_sec = v4 / 0x3B9ACA00;
      __tp->tv_nsec = v4 % 0x3B9ACA00;
      break;
    case _CLOCK_MONOTONIC:
      v11.ru_utime = 0uLL;
      v12 = 0;
      result = _mach_boottime_usec((uint64_t *)&v12, &v11.ru_utime);
      v8 = v11.ru_utime.tv_usec + 1000000 * (v12 / 0xF4240) - v12;
      if (v8 < 0)
        v9 = v8 + 1000000;
      else
        v9 = v11.ru_utime.tv_usec + 1000000 * (v12 / 0xF4240) - v12;
      tv_sec = v11.ru_utime.tv_sec - v12 / 0xF4240 + (v8 >> 31);
      LODWORD(v7) = 1000 * v9;
      goto LABEL_14;
    case _CLOCK_PROCESS_CPUTIME_ID:
      memset(&v11, 0, sizeof(v11));
      result = getrusage(0, &v11);
      tv_sec = v11.ru_stime.tv_sec + v11.ru_utime.tv_sec;
      v10 = v11.ru_stime.tv_usec + v11.ru_utime.tv_usec;
      if (v11.ru_stime.tv_usec + v11.ru_utime.tv_usec > 999999)
      {
        v10 = v11.ru_stime.tv_usec + v11.ru_utime.tv_usec - 1000000;
        ++tv_sec;
      }
      LODWORD(v7) = 1000 * v10;
LABEL_14:
      v7 = (int)v7;
LABEL_15:
      __tp->tv_sec = tv_sec;
      __tp->tv_nsec = v7;
      break;
    default:
      *__error() = 22;
LABEL_6:
      result = -1;
      break;
  }
  return result;
}

int gettimeofday(timeval *a1, void *a2)
{
  timeval *v3;
  int tm_isdst;
  int v5;
  int result;
  tm *v7;
  unint64_t v8;
  _QWORD v9[2];

  v3 = a1;
  if (!a1)
  {
    if (!a2)
      return 0;
    v3 = (timeval *)v9;
  }
  v9[0] = 0;
  v9[1] = 0;
  if (__commpage_gettimeofday() && (__gettimeofday() & 0x80000000) != 0)
    return -1;
  if (!a2)
    return 0;
  if (gettimeofday_validtz == 1)
  {
    tm_isdst = gettimeofday_cached_tz_1;
    v5 = gettimeofday_cached_tz_0;
  }
  else
  {
    v7 = localtime(&v3->tv_sec);
    tm_isdst = v7->tm_isdst;
    gettimeofday_cached_tz_1 = tm_isdst;
    v8 = ((unsigned __int128)(v7->tm_gmtoff * (__int128)0x7777777777777777) >> 64) - v7->tm_gmtoff;
    v5 = (v8 >> 5) + (v8 >> 63) + 60 * tm_isdst;
    gettimeofday_cached_tz_0 = v5;
    gettimeofday_validtz = 1;
  }
  result = 0;
  *(_DWORD *)a2 = v5;
  *((_DWORD *)a2 + 1) = tm_isdst;
  return result;
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  int v2;
  __uint64_t result;
  int v4;
  kern_return_t v5;
  uint64_t v6;
  int *v7;
  rusage v8;
  uint64_t v9;

  if (__clock_id == _CLOCK_PROCESS_CPUTIME_ID)
  {
    memset(&v8, 0, sizeof(v8));
    if (getrusage(0, &v8))
      return 0;
    else
      return 1000000000 * (v8.ru_stime.tv_sec + v8.ru_utime.tv_sec)
           + 1000 * (v8.ru_stime.tv_usec + (uint64_t)v8.ru_utime.tv_usec);
  }
  else if (__clock_id == _CLOCK_MONOTONIC)
  {
    v8.ru_utime = 0uLL;
    v9 = 0;
    v4 = _mach_boottime_usec(&v9, &v8.ru_utime);
    result = 0;
    if (!v4)
      return 1000000000 * v8.ru_utime.tv_sec - 1000 * v9 + 1000 * v8.ru_utime.tv_usec;
  }
  else if (__clock_id)
  {
    v8.ru_utime.tv_sec = 0;
    v5 = mach_timebase_info((mach_timebase_info_t)&v8);
    result = 0;
    if (!v5)
    {
      switch(__clock_id)
      {
        case _CLOCK_MONOTONIC_RAW:
          v6 = mach_continuous_time();
          goto LABEL_20;
        case _CLOCK_MONOTONIC_RAW_APPROX:
          v6 = mach_continuous_approximate_time();
          goto LABEL_20;
        case _CLOCK_MONOTONIC:
        case _CLOCK_MONOTONIC_RAW_APPROX|0x2:
          goto LABEL_16;
        case _CLOCK_UPTIME_RAW:
          v6 = mach_absolute_time();
          goto LABEL_20;
        case _CLOCK_UPTIME_RAW_APPROX:
          v6 = mach_approximate_time();
          goto LABEL_20;
        default:
          if (__clock_id == _CLOCK_THREAD_CPUTIME_ID)
          {
            v6 = __thread_selfusage();
LABEL_20:
            result = v6 * LODWORD(v8.ru_utime.tv_sec) / HIDWORD(v8.ru_utime.tv_sec);
          }
          else
          {
LABEL_16:
            v7 = __error();
            result = 0;
            *v7 = 22;
          }
          break;
      }
    }
  }
  else
  {
    v8.ru_utime = 0uLL;
    v2 = gettimeofday(&v8.ru_utime, 0);
    result = 0;
    if (!v2)
      return 1000000000 * v8.ru_utime.tv_sec + 1000 * v8.ru_utime.tv_usec;
  }
  return result;
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  uint64_t v3;
  _xlocale *v4;
  _xlocale *v5;

  v3 = __locale_key;
  v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__global_locale;
  return strtoll_l(__str, __endptr, __base, v5);
}

uint64_t atol(const char *a1)
{
  uint64_t v1;
  _xlocale *v2;
  _xlocale *v3;

  v1 = __locale_key;
  v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2)
    v3 = v2;
  else
    v3 = (_xlocale *)&__global_locale;
  return strtol_l(a1, 0, 10, v3);
}

const char *getprogname(void)
{
  return *_NSGetProgname();
}

char **_NSGetProgname(void)
{
  return (char **)__progname_pointer;
}

uint64_t __glob(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  _xlocale *v7;
  _xlocale *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  const char *v20;
  size_t v21;
  uint64_t result;
  int v23;
  unint64_t v24;
  uint64_t v25;
  __int32 v26;
  _OWORD v27[2];
  uint64_t v28;
  mbstate_t v29;
  _QWORD v30[1024];

  v2 = MEMORY[0x1E0C86820](a1, a2);
  v4 = v3;
  v5 = (const char *)v2;
  v28 = 0;
  v6 = __locale_key;
  v7 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v6);
  memset(v27, 0, sizeof(v27));
  if (v7)
    v8 = v7;
  else
    v8 = (_xlocale *)&__global_locale;
  v9 = *(int *)(*((_QWORD *)v8 + 166) + 64);
  v10 = *(_DWORD *)(v3 + 24);
  if ((v10 & 1) == 0)
  {
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 32) = 0;
    if ((v10 & 2) == 0)
      *(_QWORD *)(v3 + 16) = 0;
  }
  if ((v10 & 0x1000) != 0)
  {
    v11 = *(_DWORD *)(v3 + 8);
    if (!v11)
      v11 = 1024;
    *((_QWORD *)&v27[0] + 1) = v11;
  }
  v26 = 0;
  *(_DWORD *)(v3 + 8) = 0;
  memset(&v29, 0, sizeof(v29));
  if ((v10 & 0x2000) == 0)
  {
    if ((int)v9 <= 1023)
    {
      v12 = v30;
      v13 = 8176;
      v14 = (const char *)v2;
      while (1)
      {
        if (*v14 == 92)
        {
          if (!*(unsigned __int8 *)++v14)
          {
            *v12 = 92;
            goto LABEL_21;
          }
          v16 = 0x4000000000;
        }
        else
        {
          v16 = 0;
        }
        v17 = mbrtowc_l(&v26, v14, 6uLL, &v29, v8);
        if (v17 >= 0xFFFFFFFFFFFFFFFELL)
          goto LABEL_29;
        if (!v17)
          goto LABEL_33;
        *v12 = v16 | v26;
        v14 += v17;
LABEL_21:
        ++v12;
        v18 = v9 <= v13 >> 3;
        v13 -= 8;
        if (!v18)
          goto LABEL_29;
      }
    }
    goto LABEL_29;
  }
  if ((int)v9 > 1023)
  {
LABEL_29:
    if ((*(_DWORD *)(v4 + 24) & 0x10) != 0 || (*(_DWORD *)(v4 + 24) & 0x300) == 0x200)
      return __gl_globextend(0, v4, (uint64_t)v27, v5, v8);
    else
      return 4294967293;
  }
  v12 = v30;
  v19 = 8176;
  v20 = (const char *)v2;
  while (1)
  {
    v21 = mbrtowc_l(&v26, v20, 6uLL, &v29, v8);
    if (v21 >= 0xFFFFFFFFFFFFFFFELL)
      goto LABEL_29;
    if (!v21)
      break;
    *v12++ = v26;
    v20 += v21;
    v18 = v9 <= v19 >> 3;
    v19 -= 8;
    if (!v18)
      goto LABEL_29;
  }
LABEL_33:
  *v12 = 0;
  v23 = *(_DWORD *)(v4 + 24);
  if ((v23 & 0x80) == 0)
    return glob0((uint64_t)v30, v4);
  if (v30[0] == 123 && v30[1] == 125 && !v30[2])
  {
    if ((v23 & 0x1000) != 0)
    {
      v24 = (*(_QWORD *)&v27[0])++;
      if (v24 >= 0x80)
      {
        *__error() = 7;
        return 0xFFFFFFFFLL;
      }
    }
    return glob0((uint64_t)v30, v4);
  }
  v25 = *(_QWORD *)v4;
  result = globexp1((uint64_t)v30, v4);
  if (!(_DWORD)result)
    return globfinal(v4, (uint64_t)v27, v25, v5, v8);
  return result;
}

uint64_t glob2(__int32 *a1, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, _xlocale *a7)
{
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int i;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  int v25;
  dirent *(__cdecl *v27)(DIR *);
  unint64_t v28;
  const char *v29;
  int v30;
  uint64_t *v31;
  size_t v32;
  __int32 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  dirent *(__cdecl *v40)(DIR *);
  DIR *v41;
  stat v42;
  __int32 v43;
  mbstate_t v44;
  char v45[1029];

  memset(&v42, 0, sizeof(v42));
  v13 = *a4;
  if (!*a4)
  {
LABEL_17:
    *a2 = 0;
    if (__gl_g_Ctoc(a1, v45, 0x405uLL, a7))
    {
      v20 = __error();
      v21 = 0;
      v22 = 63;
LABEL_19:
      *v20 = v22;
      return v21;
    }
    if ((*(_BYTE *)(a5 + 24) & 0x40) != 0)
    {
      if ((*(unsigned int (**)(char *, stat *))(a5 + 72))(v45, &v42))
        return 0;
    }
    else if (lstat(v45, &v42))
    {
      return 0;
    }
    v23 = *(_DWORD *)(a5 + 24);
    if ((v23 & 0x1000) != 0)
    {
      v24 = *(_QWORD *)(a6 + 24);
      *(_QWORD *)(a6 + 24) = v24 + 1;
      if (v24 >= 0x80)
        goto LABEL_39;
    }
    if ((v23 & 8) != 0 && (*(a2 - 1) & 0xFFFFFFBFFFFFFFFFLL) != 0x2F)
    {
      v25 = v42.st_mode & 0xF000;
      if (v25 == 0x4000 || v25 == 40960 && !g_stat(a1, &v42, a5, a7) && (v42.st_mode & 0xF000) == 0x4000)
      {
        if ((unint64_t)(a2 + 1) > a3)
          goto LABEL_39;
        *(_OWORD *)a2 = xmmword_18A0E5B40;
      }
    }
    ++*(_DWORD *)(a5 + 8);
    return __gl_globextend(a1, a5, a6, 0, a7);
  }
  v14 = a4;
  while (1)
  {
    v15 = 0;
    for (i = 0; v13; ++v15)
    {
      if (v13 == 47 || v13 == 0x400000002FLL)
        break;
      if ((unint64_t)&a2[v15 + 1] > a3)
        goto LABEL_39;
      if ((v13 & 0x8000000000) != 0)
        i = 1;
      a2[v15] = v13;
      v13 = v14[v15 + 1];
    }
    v17 = &v14[v15];
    if (i)
    {
      if ((unint64_t)a2 > a3)
        goto LABEL_39;
      *a2 = 0;
      if (*(_QWORD *)(a5 + 40))
      {
        if (__gl_g_Ctoc(a1, v45, 0x405uLL, a7))
          goto LABEL_39;
      }
      v39 = *__error();
      *__error() = 0;
      v41 = g_opendir(a1, a5, a7);
      if (v41)
      {
        if ((*(_BYTE *)(a5 + 24) & 0x40) != 0)
          v27 = *(dirent *(__cdecl **)(DIR *))(a5 + 56);
        else
          v27 = readdir;
        *__error() = 0;
        v21 = ((uint64_t (*)(DIR *))v27)(v41);
        if (v21)
        {
          v40 = v27;
          while (1)
          {
            v43 = 0;
            memset(&v44, 0, sizeof(v44));
            if ((*(_BYTE *)(a5 + 25) & 0x10) != 0)
            {
              v28 = *(_QWORD *)(a6 + 16);
              *(_QWORD *)(a6 + 16) = v28 + 1;
              if (v28 >> 14)
                break;
            }
            v30 = *(unsigned __int8 *)(v21 + 21);
            v29 = (const char *)(v21 + 21);
            if (v30 != 46 || (*v14 & 0xFFFFFFBFFFFFFFFFLL) == 0x2E)
            {
              v31 = a2;
              memset(&v44, 0, sizeof(v44));
              while (1)
              {
                v32 = mbrtowc_l(&v43, v29, 6uLL, &v44, a7);
                if (v32 < 0xFFFFFFFFFFFFFFFELL)
                {
                  v33 = v43;
                }
                else
                {
                  v33 = *(unsigned __int8 *)v29;
                  v43 = v33;
                  memset(&v44, 0, sizeof(v44));
                  v32 = 1;
                }
                *v31 = v33;
                if (!v33)
                  break;
                ++v31;
                v29 += v32;
                if ((unint64_t)v31 > a3)
                {
                  v34 = err_aborted(a5, (uint64_t)v45);
                  if ((_DWORD)v34)
                  {
                    v21 = v34;
                    v37 = 63;
                    goto LABEL_72;
                  }
                  goto LABEL_68;
                }
              }
              if (!__gl_match(a2, v14, v17, a7))
              {
LABEL_68:
                *a2 = 0;
                v27 = v40;
                goto LABEL_69;
              }
              if (!*__error())
                *__error() = v39;
              v35 = glob2(a1, v31, a3, v17, a5, a6, a7);
              v27 = v40;
              if ((_DWORD)v35)
              {
                v21 = v35;
                goto LABEL_73;
              }
            }
LABEL_69:
            *__error() = 0;
            v21 = ((uint64_t (*)(DIR *))v27)(v41);
            if (!v21)
              goto LABEL_70;
          }
          v21 = 0xFFFFFFFFLL;
          v37 = 7;
LABEL_72:
          *__error() = v37;
LABEL_73:
          v36 = 0;
        }
        else
        {
LABEL_70:
          v36 = 1;
        }
        v38 = *__error();
        if ((*(_BYTE *)(a5 + 24) & 0x40) != 0)
          (*(void (**)(DIR *))(a5 + 48))(v41);
        else
          closedir(v41);
        *__error() = v38;
        if ((_DWORD)v21)
          return v21;
        if (v36)
        {
          if (*__error())
          {
            __error();
            v21 = err_aborted(a5, (uint64_t)v45);
            if ((_DWORD)v21)
              return v21;
          }
        }
        if (*__error())
          return 0;
        v20 = __error();
        v21 = 0;
LABEL_83:
        v22 = v39;
        goto LABEL_19;
      }
      if (*__error() != 2 && *__error() != 20)
      {
        __error();
        v21 = err_aborted(a5, (uint64_t)v45);
        if (*__error())
          return v21;
        v20 = __error();
        goto LABEL_83;
      }
      return 0;
    }
    v18 = &a2[v15];
    if ((v13 & 0xFFFFFFBFFFFFFFFFLL) == 0x2F)
      break;
    a2 = v18;
LABEL_16:
    v14 = v17;
    if (!v13)
      goto LABEL_17;
  }
  while (1)
  {
    a2 = v18 + 1;
    if ((unint64_t)(v18 + 1) > a3)
      break;
    *v18 = v13;
    v19 = v17[1];
    ++v17;
    v13 = v19;
    ++v18;
    if ((v19 & 0xFFFFFFBFFFFFFFFFLL) != 0x2F)
      goto LABEL_16;
  }
LABEL_39:
  *__error() = 7;
  return 0xFFFFFFFFLL;
}

int fnmatch(const char *a1, const char *a2, int a3)
{
  const char *v5;
  uint64_t v6;
  _xlocale *v7;
  _xlocale *v8;
  size_t v9;
  int result;
  size_t v11;
  const char *v12;
  const char *v13;
  size_t v14;
  const char *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  __darwin_ct_rune_t v22;
  __darwin_ct_rune_t v23;
  size_t v24;
  __darwin_ct_rune_t v25;
  const char *v26;
  __darwin_ct_rune_t v27[2];
  const char *v28;
  const char *v29;
  mbstate_t v30;
  mbstate_t v31;
  mbstate_t v32;
  mbstate_t v33;

  v5 = a1;
  v6 = __locale_key;
  v7 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v6);
  memset(&v31._mbstateL + 10, 0, 32);
  if (v7)
    v8 = v7;
  else
    v8 = (_xlocale *)&__global_locale;
  memset(&v31, 0, 80);
  memset(&v30, 0, sizeof(v30));
  memset(&v33, 0, sizeof(v33));
  memset(&v32, 0, sizeof(v32));
  *((_OWORD *)&v31._mbstateL + 7) = 0uLL;
  *(_QWORD *)v27 = 0;
  v9 = mbrtowc_l(&v27[1], a1, 6uLL, &v31, v8);
  if (v9 > 0xFFFFFFFFFFFFFFFDLL)
    return 2;
  v11 = v9;
  v12 = 0;
  v13 = 0;
  v28 = 0;
  v29 = 0;
  v26 = a2;
  while (1)
  {
    v14 = mbrtowc_l(v27, a2, 6uLL, &v30, v8);
    if (v14 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v27[0] = *(unsigned __int8 *)a2;
      memset(&v30, 0, sizeof(v30));
      v14 = 1;
    }
    v15 = &v5[v11];
    result = v27[1];
    if (v27[1] > 62)
    {
      if (v27[1] == 63)
      {
        if (v27[0] == 47)
        {
          if ((a3 & 2) == 0)
            goto LABEL_50;
        }
        else
        {
          if (!v27[0])
            return 1;
          if ((a3 & 4) == 0 || v27[0] != 46 || a2 != v26 && ((a3 & 2) == 0 || *(a2 - 1) != 47))
          {
LABEL_50:
            a2 += v14;
            goto LABEL_79;
          }
        }
        goto LABEL_70;
      }
      if (v27[1] != 91)
      {
        if (v27[1] == 92)
        {
          if ((a3 & 1) != 0)
          {
            result = 92;
          }
          else
          {
            v16 = mbrtowc_l(&v27[1], &v5[v11], 6uLL, &v31, v8);
            if (v16 > 0xFFFFFFFFFFFFFFFDLL)
              return 2;
            v17 = v16;
            if (v16)
            {
              result = v27[1];
            }
            else
            {
              result = 92;
              v27[1] = 92;
            }
            v15 += v17;
          }
        }
LABEL_61:
        a2 += v14;
        v21 = v27[0];
        if (result == v27[0])
          goto LABEL_79;
        if ((a3 & 0x10) != 0)
        {
          if (result > 0x7F)
          {
            v22 = ___tolower_l(result, v8);
            v21 = v27[0];
          }
          else
          {
            v22 = _DefaultRuneLocale.__maplower[result];
          }
          v23 = v21 > 0x7F ? ___tolower_l(v21, v8) : _DefaultRuneLocale.__maplower[v21];
          if (v22 == v23)
            goto LABEL_79;
        }
LABEL_70:
        if (!v13)
          return 1;
        v24 = mbrtowc(v27, v12, 6uLL, &v32);
        if (v24 < 0xFFFFFFFFFFFFFFFELL)
        {
          v25 = v27[0];
        }
        else
        {
          v25 = *(unsigned __int8 *)v12;
          v27[0] = v25;
          memset(&v32, 0, sizeof(v32));
          v24 = 1;
        }
        if (v25 == 47)
        {
          if ((a3 & 2) != 0)
            return 1;
        }
        else if (!v25)
        {
          return 1;
        }
        a2 = &v12[v24];
        v31 = v33;
        v30 = v32;
        v15 = v13;
        v12 += v24;
        goto LABEL_79;
      }
      if (v27[0] == 47)
      {
        if ((a3 & 2) != 0)
          goto LABEL_70;
      }
      else
      {
        if (!v27[0])
          return 1;
        if ((a3 & 4) != 0 && v27[0] == 46 && (a2 == v26 || (a3 & 2) != 0 && *(a2 - 1) == 47))
          goto LABEL_70;
      }
      v20 = rangematch(&v5[v11], v27[0], &a2[v14], a3, &v29, &v28, &v31, &v30, v8);
      if (v20)
      {
        if (v20 == 1)
        {
          a2 = v28;
          v15 = v29;
        }
        else if (v20 == -1)
        {
          return 2;
        }
        goto LABEL_79;
      }
      goto LABEL_70;
    }
    if (!v27[1])
    {
      if (((v27[0] == 47) & (a3 >> 3)) != 0 || !v27[0])
        return result;
      goto LABEL_70;
    }
    if (v27[1] != 42)
      goto LABEL_61;
    v15 = &v5[v11 - 1];
    do
    {
      v19 = *(unsigned __int8 *)++v15;
      v18 = v19;
    }
    while (v19 == 42);
    if ((a3 & 4) != 0 && v27[0] == 46 && (a2 == v26 || (a3 & 2) != 0 && *(a2 - 1) == 47))
      goto LABEL_70;
    if (v18 != 47)
      break;
    if ((a3 & 2) == 0)
      goto LABEL_57;
    a2 = (const char *)_platform_strchr();
    if (!a2)
      return 1;
LABEL_79:
    v11 = mbrtowc_l(&v27[1], v15, 6uLL, &v31, v8);
    v5 = v15;
    if (v11 >= 0xFFFFFFFFFFFFFFFELL)
      return 2;
  }
  if (v18)
  {
LABEL_57:
    v33 = v31;
    v32 = v30;
    v13 = v15;
    v12 = a2;
    goto LABEL_79;
  }
  return (a3 & 0xA) == 2 && _platform_strchr() != 0;
}

uint64_t _none_mbrtowc(_DWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  int v3;

  if (!a2)
    return 0;
  if (!a3)
    return -2;
  v3 = *a2;
  if (a1)
    *a1 = v3;
  return v3 != 0;
}

size_t mbrtowc_l(__int32 *a1, const char *a2, size_t a3, mbstate_t *a4, locale_t a5)
{
  locale_t v5;
  locale_t v6;

  v5 = (locale_t)&__global_locale;
  if (a5 != (locale_t)-1)
    v5 = a5;
  if (a5)
    v6 = v5;
  else
    v6 = (locale_t)&__c_locale;
  if (!a4)
    a4 = (mbstate_t *)((char *)v6 + 272);
  return (*(uint64_t (**)(__int32 *, const char *, size_t, mbstate_t *))(*((_QWORD *)v6 + 166) + 72))(a1, a2, a3, a4);
}

void rewinddir(DIR *a1)
{
  pthread_mutex_t *p_dd_lock;
  int dd_flags;

  p_dd_lock = &a1->__dd_lock;
  pthread_mutex_lock(&a1->__dd_lock);
  dd_flags = a1->__dd_flags;
  a1->__dd_flags = dd_flags & 0xFFFFFFCF;
  if ((dd_flags & 8) != 0)
  {
    _filldir((uint64_t)a1, 0);
  }
  else
  {
    lseek(a1->__dd_fd, 0, 0);
    *((_QWORD *)a1->__dd_td + 2) = 0;
  }
  a1->__dd_loc = 0;
  _reclaim_telldir((uint64_t)a1);
  pthread_mutex_unlock(p_dd_lock);
}

int closedir(DIR *a1)
{
  pthread_mutex_t *p_dd_lock;

  p_dd_lock = &a1->__dd_lock;
  pthread_mutex_lock(&a1->__dd_lock);
  a1->__dd_fd = -1;
  a1->__dd_loc = 0;
  free(a1->__dd_buf);
  _reclaim_telldir((uint64_t)a1);
  pthread_mutex_unlock(p_dd_lock);
  pthread_mutex_destroy(p_dd_lock);
  free(a1);
  return close_NOCANCEL();
}

_QWORD *_reclaim_telldir(uint64_t a1)
{
  _QWORD **v2;
  _QWORD *result;
  _QWORD *v4;

  v2 = *(_QWORD ***)(a1 + 128);
  result = *v2;
  if (*v2)
  {
    do
    {
      v4 = (_QWORD *)*result;
      free(result);
      result = v4;
    }
    while (v4);
    v2 = *(_QWORD ***)(a1 + 128);
  }
  *v2 = 0;
  return result;
}

uint64_t __gl_g_Ctoc(__int32 *a1, char *a2, unint64_t a3, _xlocale *a4)
{
  unint64_t v4;
  unint64_t v6;
  size_t v9;
  mbstate_t v11;

  v4 = *(int *)(*((_QWORD *)a4 + 166) + 64);
  memset(&v11, 0, sizeof(v11));
  if (v4 > a3)
    return 1;
  v6 = a3;
  while (1)
  {
    v9 = wcrtomb_l(a2, *a1, &v11, a4);
    if (v9 == -1)
    {
      *a2 = *(_QWORD *)a1;
      memset(&v11, 0, sizeof(v11));
      v9 = 1;
    }
    if (!*a1)
      break;
    a1 += 2;
    a2 += v9;
    v6 -= v9;
    if (v6 < v4)
      return 1;
  }
  return 0;
}

size_t wcrtomb_l(char *a1, __int32 a2, mbstate_t *a3, locale_t a4)
{
  locale_t v4;
  locale_t v5;

  v4 = (locale_t)&__global_locale;
  if (a4 != (locale_t)-1)
    v4 = a4;
  if (a4)
    v5 = v4;
  else
    v5 = (locale_t)&__c_locale;
  if (!a3)
    a3 = (mbstate_t *)((char *)v5 + 784);
  return (*(uint64_t (**)(char *, _QWORD, mbstate_t *))(*((_QWORD *)v5 + 166) + 96))(a1, *(_QWORD *)&a2, a3);
}

uint64_t _none_wcrtomb(_BYTE *a1, unsigned int a2)
{
  if (!a1)
    return 1;
  if (a2 < 0x100)
  {
    *a1 = a2;
    return 1;
  }
  else
  {
    *__error() = 92;
    return -1;
  }
}

uint64_t __gl_match(uint64_t *a1, uint64_t *a2, uint64_t *a3, _xlocale *a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v24;

  v7 = 0;
  v24 = 0;
  while (1)
  {
    if (a2 < a3)
    {
      v8 = a2;
      while (1)
      {
        v10 = *v8++;
        v9 = v10;
        v11 = v10 & 0xFFFFFFFFFFLL;
        if ((v10 & 0xFFFFFFFFFFLL) == 0x800000005BLL)
          break;
        if (v11 == 0x800000003FLL)
        {
          if (!*a1++)
            goto LABEL_37;
        }
        else if (v11 == 0x800000002ALL)
        {
          if (v8 == a3)
            return 1;
          if (!*a1)
            return 0;
          v7 = a1 + 1;
          v24 = a2;
        }
        else
        {
          v21 = *a1++;
          if (v21 != v9)
            goto LABEL_37;
        }
LABEL_35:
        a2 = v8;
        if (v8 >= a3)
          goto LABEL_36;
      }
      v13 = *a1++;
      v12 = v13;
      if (!v13)
        goto LABEL_37;
      v14 = a2[1] & 0xFFFFFFFFFFLL;
      v15 = v14 == 0x8000000021;
      v16 = 1;
      if (v14 == 0x8000000021)
      {
        v16 = 2;
        v17 = a2 + 2;
      }
      else
      {
        v17 = v8;
      }
      v8 = v17 + 1;
      v18 = a2[v16];
      if ((v18 & 0xFFFFFFFFFFLL) == 0x800000005DLL)
      {
        v19 = 0;
LABEL_34:
        if (v19 == v15)
          goto LABEL_37;
        goto LABEL_35;
      }
      v19 = 0;
      while (1)
      {
        if ((v17[1] & 0xFFFFFFFFFFLL) != 0x800000002DLL)
        {
          if (v18 == v12)
            v19 = 1;
          v18 = v17[1];
          v17 = v8;
          goto LABEL_33;
        }
        if (*(_BYTE *)(*((_QWORD *)a4 + 165) + 64))
        {
          if (v12 < (unint64_t)v18
            || v12 > (unint64_t)*((unsigned int *)v17 + 4))
          {
            goto LABEL_32;
          }
        }
        else if ((int)__collate_range_cmp(v18, v12, a4) > 0
               || (int)__collate_range_cmp(v12, *((_DWORD *)v17 + 4), a4) > 0)
        {
          goto LABEL_32;
        }
        v19 = 1;
LABEL_32:
        v22 = v17[3];
        v17 += 3;
        v18 = v22;
LABEL_33:
        v8 = v17 + 1;
        if ((v18 & 0xFFFFFFFFFFLL) == 0x800000005DLL)
          goto LABEL_34;
      }
    }
LABEL_36:
    if (!*a1)
      return 1;
LABEL_37:
    a2 = v24;
    a1 = v7;
    if (!v7)
      return 0;
  }
}

uint64_t __gl_globextend(__int32 *a1, uint64_t a2, uint64_t a3, const char *a4, _xlocale *a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;

  if ((*(_BYTE *)(a2 + 25) & 0x10) != 0 && *(_QWORD *)(a3 + 8) < (unint64_t)*(int *)(a2 + 8))
    goto LABEL_17;
  v10 = reallocarray_DARWIN_EXTSN();
  if (!v10)
    return 0xFFFFFFFFLL;
  v11 = v10;
  if (!*(_QWORD *)(a2 + 32) && *(_QWORD *)(a2 + 16))
    _platform_bzero();
  *(_QWORD *)(a2 + 32) = v11;
  if (!a4)
  {
    v13 = 0;
    do
    {
      v14 = *(_QWORD *)&a1[v13];
      v13 += 2;
    }
    while (v14);
    v15 = ((v13 * 4) >> 3) * *(int *)(*((_QWORD *)a5 + 166) + 64);
    v16 = (char *)malloc_type_malloc(v15, 0x2653AAEDuLL);
    if (!v16)
      goto LABEL_19;
    v12 = v16;
    if (__gl_g_Ctoc(a1, v16, v15, a5))
      goto LABEL_16;
    goto LABEL_14;
  }
  v12 = strdup(a4);
  if (v12)
  {
LABEL_14:
    v17 = _platform_strlen() + *(_QWORD *)(a3 + 32) + 1;
    *(_QWORD *)(a3 + 32) = v17;
    if ((*(_BYTE *)(a2 + 25) & 0x10) == 0 || v17 < 0x10000)
    {
      result = 0;
      v19 = *(_QWORD *)(a2 + 16);
      v20 = (*(_QWORD *)a2)++;
      *(_QWORD *)(v11 + 8 * (v20 + v19)) = v12;
      goto LABEL_21;
    }
LABEL_16:
    free(v12);
LABEL_17:
    *__error() = 7;
    return 0xFFFFFFFFLL;
  }
LABEL_19:
  result = 0xFFFFFFFFLL;
LABEL_21:
  *(_QWORD *)(v11 + 8 * (*(_QWORD *)a2 + *(_QWORD *)(a2 + 16))) = 0;
  return result;
}

uint64_t glob0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _xlocale *v3;
  _xlocale *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int32 *v11;
  uint64_t v12;
  uint64_t *v13;
  __int32 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24[1024];
  uint64_t v25[1023];
  uint64_t v26;

  v2 = MEMORY[0x1E0C86820](a1, a2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = __gl_globtilde(v2, (uint64_t)v24);
  if (!v11)
  {
    *__error() = 7;
    return 0xFFFFFFFFLL;
  }
  v12 = *(_QWORD *)v10;
  v13 = v24;
LABEL_3:
  v14 = v11 + 2;
  while (1)
  {
    v11 = v14;
    v15 = *((_QWORD *)v14 - 1);
    if (v15 != 42)
      break;
    *(_DWORD *)(v10 + 24) |= 0x100u;
    if (v13 != v24)
    {
      v14 = v11 + 2;
      if (*(v13 - 1) == 0x800000002ALL)
        continue;
    }
    *v13 = 0x800000002ALL;
    goto LABEL_35;
  }
  if (v15)
  {
    if (v15 == 63)
    {
      *(_DWORD *)(v10 + 24) |= 0x100u;
      v15 = 0x800000003FLL;
      goto LABEL_34;
    }
    if (v15 != 91)
    {
      v15 = v15;
      goto LABEL_34;
    }
    v16 = (uint64_t)(v11 + 2);
    v17 = *(_QWORD *)v11;
    if (*(_QWORD *)v11 != 33)
      v16 = (uint64_t)v11;
    if (!*(_QWORD *)v16)
    {
LABEL_17:
      *v13 = 91;
      if (v17 == 33)
        v20 = -1;
      else
        v20 = 0;
      v11 = (__int32 *)(v16 + 8 * v20);
      goto LABEL_35;
    }
    v11 = (__int32 *)(v16 + 8);
    v18 = 8;
    while (1)
    {
      v19 = *(_QWORD *)(v16 + v18);
      if (v19 == 93)
        break;
      v18 += 8;
      if (!v19)
        goto LABEL_17;
    }
    *v13 = 0x800000005BLL;
    if (v17 == 33)
    {
      v13[1] = 0x8000000021;
      v13 += 2;
    }
    else
    {
      ++v13;
    }
    LODWORD(v16) = *(_DWORD *)v16;
    while (1)
    {
      *v13 = v16;
      v16 = *(_QWORD *)v11;
      if (*(_QWORD *)v11 == 45)
      {
        v21 = *((_QWORD *)v11 + 1);
        if (v21 != 93)
        {
          v13[1] = 0x800000002DLL;
          v13[2] = v21;
          v13 += 3;
          v22 = *((_QWORD *)v11 + 2);
          v11 += 4;
          v16 = v22;
          goto LABEL_32;
        }
        v16 = 45;
      }
      ++v13;
LABEL_32:
      v11 += 2;
      if (v16 == 93)
      {
        *(_DWORD *)(v10 + 24) |= 0x100u;
        v15 = 0x800000005DLL;
LABEL_34:
        *v13 = v15;
LABEL_35:
        ++v13;
        goto LABEL_3;
      }
    }
  }
  *v13 = 0;
  if (!v24[0] || (result = glob2((__int32 *)v25, v25, (unint64_t)&v26, v24, v10, v8, v4), !(_DWORD)result))
  {
    if (v6)
      return globfinal(v10, v8, v12, v6, v4);
    else
      return 0;
  }
  return result;
}

uint64_t globfinal(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, _xlocale *a5)
{
  int v5;

  v5 = *(_DWORD *)(a1 + 24);
  if (*(_QWORD *)a1 == a3)
  {
    if ((v5 & 0x10) != 0 || (*(_DWORD *)(a1 + 24) & 0x300) == 0x200)
      return __gl_globextend(0, a1, a2, a4, a5);
    else
      return 4294967293;
  }
  else
  {
    if ((v5 & 0x20) == 0)
      qsort((void *)(*(_QWORD *)(a1 + 32) + 8 * *(_QWORD *)(a1 + 16) + 8 * a3), *(_QWORD *)a1 - a3, 8uLL, (int (__cdecl *)(const void *, const void *))__gl_compare);
    return 0;
  }
}

void psort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
  _QWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  __int128 v14;
  void *v15[2];
  __int128 v16;
  dispatch_group_t group[2];
  uint64_t v18;

  if (__nel >= 0x7D0
    && (_get_cpu_capabilities() & 0xFE0000) != 0
    && (v18 = 0, v16 = 0u, *(_OWORD *)group = 0u, v14 = 0u, *(_OWORD *)v15 = 0u, (v8 = getargs((uint64_t)&v14)) != 0))
  {
    v9 = (uint64_t)v8;
    *(_QWORD *)&v14 = "psort_b";
    v15[1] = __compar;
    *(_QWORD *)&v16 = __width;
    group[0] = dispatch_get_global_queue(0, 0);
    group[1] = dispatch_group_create();
    *(_QWORD *)(v9 + 8) = __base;
    *(_QWORD *)(v9 + 16) = __nel;
    *(_DWORD *)(v9 + 24) = 2 * flsl(__nel) - 2;
    *(_QWORD *)v9 = &v14;
    v10 = flsl(__nel);
    if (v10 >= 0)
      v11 = v10;
    else
      v11 = v10 + 1;
    *((_QWORD *)&v16 + 1) = ((1 << (v11 >> 1)) + (__nel >> (v11 >> 1))) >> 1;
    _psort_parallel_0(v9);
    dispatch_group_wait(group[1], 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(group[1]);
    v12 = v15[0];
    if (v15[0])
    {
      do
      {
        v13 = (_QWORD *)*v12;
        munmap(v12, 0x1000uLL);
        v12 = v13;
      }
      while (v13);
    }
  }
  else
  {
    qsort_b(__base, __nel, __width, __compar);
  }
}

void qsort_r(void *__base, size_t __nel, size_t __width, void *a4, int (__cdecl *__compar)(void *, const void *, const void *))
{
  int v10;

  v10 = 2 * flsl(__nel) - 2;
  _qsort_0((char *)__base, __nel, __width, (uint64_t)a4, (uint64_t (*)(uint64_t, char *, char *))__compar, v10);
}

void qsort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
  qsort_r(__base, __nel, __width, __compar, *((int (__cdecl **)(void *, const void *, const void *))__compar + 2));
}

void psort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  _QWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  __int128 v14;
  void *v15[2];
  __int128 v16;
  dispatch_group_t group[2];
  uint64_t v18;

  if (__nel >= 0x7D0
    && (_get_cpu_capabilities() & 0xFE0000) != 0
    && (v18 = 0, v16 = 0u, *(_OWORD *)group = 0u, v14 = 0u, *(_OWORD *)v15 = 0u, (v8 = getargs((uint64_t)&v14)) != 0))
  {
    v9 = (uint64_t)v8;
    *(_QWORD *)&v14 = "psort";
    v15[1] = __compar;
    *(_QWORD *)&v16 = __width;
    group[0] = dispatch_get_global_queue(0, 0);
    group[1] = dispatch_group_create();
    *(_QWORD *)(v9 + 8) = __base;
    *(_QWORD *)(v9 + 16) = __nel;
    *(_DWORD *)(v9 + 24) = 2 * flsl(__nel) - 2;
    *(_QWORD *)v9 = &v14;
    v10 = flsl(__nel);
    if (v10 >= 0)
      v11 = v10;
    else
      v11 = v10 + 1;
    *((_QWORD *)&v16 + 1) = ((1 << (v11 >> 1)) + (__nel >> (v11 >> 1))) >> 1;
    _psort_parallel(v9);
    dispatch_group_wait(group[1], 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(group[1]);
    v12 = v15[0];
    if (v15[0])
    {
      do
      {
        v13 = (_QWORD *)*v12;
        munmap(v12, 0x1000uLL);
        v12 = v13;
      }
      while (v13);
    }
  }
  else
  {
    qsort(__base, __nel, __width, __compar);
  }
}

uint64_t _isort(unint64_t a1, uint64_t a2, unint64_t a3, int (*a4)(char *, _DWORD *), int a5, int a6, int a7)
{
  int v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v28;
  unint64_t v29;
  _DWORD *v30;

  if ((uint64_t)(a3 * a2) > (uint64_t)a3)
  {
    v10 = 0;
    v28 = a1 + a3 * a2;
    v11 = (_DWORD *)(a1 + a3);
    v12 = -(uint64_t)a3;
    v13 = a3 >> 2;
    v14 = a3 >> 3;
    v15 = a1;
    do
    {
      v29 = v15;
      v30 = v11;
      if ((unint64_t)v11 > a1)
      {
        do
        {
          v16 = (_DWORD *)((char *)v11 + v12);
          if (a4((char *)v11 + v12, v11) < 1)
            break;
          if (a6)
          {
            if (a7)
            {
              if (a6 > 1)
              {
                if (a7 >= 2)
                {
                  v24 = 0;
                  v25 = v15 + a3;
                  do
                  {
                    v26 = *(_BYTE *)(v25 + v24);
                    *(_BYTE *)(v25 + v24) = *(_BYTE *)(v15 + v24);
                    *(_BYTE *)(v15 + v24++) = v26;
                  }
                  while (a3 != v24);
                }
                else
                {
                  v22 = 0;
                  do
                  {
                    v23 = v11[v22];
                    v11[v22] = *(_DWORD *)(v15 + 4 * v22);
                    *(_DWORD *)(v15 + 4 * v22++) = v23;
                  }
                  while (v13 != v22);
                }
              }
              else
              {
                v17 = 0;
                v18 = v15 + a3;
                do
                {
                  v19 = *(_QWORD *)(v18 + 8 * v17);
                  *(_QWORD *)(v18 + 8 * v17) = *(_QWORD *)(v15 + 8 * v17);
                  *(_QWORD *)(v15 + 8 * v17++) = v19;
                }
                while (v14 != v17);
              }
            }
            else
            {
              v21 = *v11;
              *v11 = *v16;
              *v16 = v21;
            }
          }
          else
          {
            v20 = *(_QWORD *)v11;
            *(_QWORD *)v11 = *(_QWORD *)v16;
            *(_QWORD *)v16 = v20;
          }
          if (a5)
          {
            if (v10 >= a5)
              return 0;
            ++v10;
          }
          v15 += v12;
          v11 = (_DWORD *)((char *)v11 + v12);
        }
        while ((unint64_t)v16 > a1);
      }
      v11 = (_DWORD *)((char *)v30 + a3);
      v15 = v29 + a3;
    }
    while ((unint64_t)v30 + a3 < v28);
  }
  return 1;
}

uint64_t _isort_0(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int (*a5)(uint64_t, char *, _DWORD *), int a6, int a7, int a8)
{
  int v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v29;
  unint64_t v30;
  _DWORD *v31;

  if ((uint64_t)(a3 * a2) > (uint64_t)a3)
  {
    v11 = 0;
    v29 = a1 + a3 * a2;
    v12 = (_DWORD *)(a1 + a3);
    v13 = -(uint64_t)a3;
    v14 = a3 >> 2;
    v15 = a3 >> 3;
    v16 = a1;
    do
    {
      v30 = v16;
      v31 = v12;
      if ((unint64_t)v12 > a1)
      {
        do
        {
          v17 = (_DWORD *)((char *)v12 + v13);
          if (a5(a4, (char *)v12 + v13, v12) < 1)
            break;
          if (a7)
          {
            if (a8)
            {
              if (a7 > 1)
              {
                if (a8 >= 2)
                {
                  v25 = 0;
                  v26 = v16 + a3;
                  do
                  {
                    v27 = *(_BYTE *)(v26 + v25);
                    *(_BYTE *)(v26 + v25) = *(_BYTE *)(v16 + v25);
                    *(_BYTE *)(v16 + v25++) = v27;
                  }
                  while (a3 != v25);
                }
                else
                {
                  v23 = 0;
                  do
                  {
                    v24 = v12[v23];
                    v12[v23] = *(_DWORD *)(v16 + 4 * v23);
                    *(_DWORD *)(v16 + 4 * v23++) = v24;
                  }
                  while (v14 != v23);
                }
              }
              else
              {
                v18 = 0;
                v19 = v16 + a3;
                do
                {
                  v20 = *(_QWORD *)(v19 + 8 * v18);
                  *(_QWORD *)(v19 + 8 * v18) = *(_QWORD *)(v16 + 8 * v18);
                  *(_QWORD *)(v16 + 8 * v18++) = v20;
                }
                while (v15 != v18);
              }
            }
            else
            {
              v22 = *v12;
              *v12 = *v17;
              *v17 = v22;
            }
          }
          else
          {
            v21 = *(_QWORD *)v12;
            *(_QWORD *)v12 = *(_QWORD *)v17;
            *(_QWORD *)v17 = v21;
          }
          if (a6)
          {
            if (v11 >= a6)
              return 0;
            ++v11;
          }
          v16 += v13;
          v12 = (_DWORD *)((char *)v12 + v13);
        }
        while ((unint64_t)v17 > a1);
      }
      v12 = (_DWORD *)((char *)v31 + a3);
      v16 = v30 + a3;
    }
    while ((unint64_t)v31 + a3 < v29);
  }
  return 1;
}

uint64_t _qsort(unint64_t a1, size_t a2, size_t a3, int (__cdecl *a4)(const void *, const void *), int a5)
{
  char *v7;
  int v8;
  int v9;
  int v10;
  size_t v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  int v18;
  char *v19;
  char *v20;
  int v21;
  size_t v22;
  char *v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  uint64_t result;
  char *v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  size_t v39;
  char *v40;
  int v41;
  size_t v42;
  char *v43;
  char v44;
  int v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  char v73;
  size_t v74;
  unint64_t v75;
  char *v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  int v82;
  uint64_t v83;
  char *v84;
  char v85;
  BOOL v86;
  char *v87;
  size_t v88;
  size_t v89;
  char *v90;
  size_t v91;
  uint64_t v92;
  size_t v93;
  int v94;
  uint64_t v95;
  char v96;
  size_t v97;
  char *v98;
  size_t v99;
  char v100;
  int v101;
  BOOL v102;
  int v103;
  _BOOL4 v104;
  _BOOL4 v105;
  size_t v106;
  char *v107;
  unint64_t v108;
  int v109;
  char *v110;
  char *v111;
  unsigned int v112;
  BOOL v113;
  BOOL v114;
  int v115;
  int v116;
  uint64_t v117;

  v7 = (char *)a1;
  v8 = a3 != 4;
  if (a5 < 1)
    return heapsort(v7, a2, a3, a4);
  v9 = a5;
  v117 = -(uint64_t)a3;
  v113 = ((a1 | a3) & 3) == 0;
  v104 = a3 != 4;
  v105 = a3 != 8;
  if (((a1 | a3) & 3) != 0)
    v8 = 2;
  v114 = ((a1 | a3) & 7) == 0;
  v115 = v8;
  if (((a1 | a3) & 7) != 0)
    v10 = 2;
  else
    v10 = a3 != 8;
  v116 = v10;
  v11 = a3 >> 2;
  v12 = a3 >> 3;
  while (a2 > 7)
  {
    v13 = &v7[(a2 >> 1) * a3];
    v14 = &v7[(a2 - 1) * a3];
    v108 = a2;
    v109 = v9;
    if (a2 < 0x29)
    {
      v24 = &v7[(a2 - 1) * a3];
      v25 = v7;
      goto LABEL_40;
    }
    v15 = (a2 >> 3) * a3;
    v16 = &v7[v15];
    v106 = v15;
    v17 = &v7[2 * v15];
    v18 = ((uint64_t (*)(char *, char *))a4)(v7, &v7[v15]);
    v110 = v16;
    v19 = v16;
    v20 = v17;
    v21 = ((uint64_t (*)(char *, char *))a4)(v19, v17);
    if (v18 < 0)
    {
      v22 = v106;
      if ((v21 & 0x80000000) == 0)
      {
        if (((int (*)(char *, char *))a4)(v7, v20) >= 0)
          v23 = v7;
        else
          v23 = v20;
        goto LABEL_20;
      }
    }
    else
    {
      v22 = v106;
      if (v21 <= 0)
      {
        if (((int (*)(char *, char *))a4)(v7, v20) >= 0)
          v23 = v20;
        else
          v23 = v7;
LABEL_20:
        v110 = v23;
      }
    }
    v107 = &v13[-v22];
    v26 = ((uint64_t (*)(void))a4)();
    v27 = ((uint64_t (*)(char *, char *))a4)(v13, &v13[v22]);
    if (v26 < 0)
    {
      if ((v27 & 0x80000000) == 0)
      {
        if (((int (*)(char *, char *))a4)(v107, &v13[v22]) >= 0)
          v13 -= v22;
        else
          v13 += v22;
      }
    }
    else if (v27 <= 0)
    {
      if (((int (*)(char *, char *))a4)(v107, &v13[v22]) >= 0)
        v13 += v22;
      else
        v13 -= v22;
    }
    v28 = -(uint64_t)v22;
    v29 = &v14[-2 * v22];
    v24 = &v14[v28];
    v30 = ((uint64_t (*)(char *, char *))a4)(v29, &v14[v28]);
    v31 = ((uint64_t (*)(char *, char *))a4)(v24, v14);
    if (v30 < 0)
    {
      if ((v31 & 0x80000000) == 0)
      {
        if (((int (*)(char *, char *))a4)(v29, v14) >= 0)
          v24 = v29;
        else
          v24 = v14;
      }
    }
    else if (v31 <= 0)
    {
      if (((int (*)(char *, char *))a4)(v29, v14) >= 0)
        v24 = v14;
      else
        v24 = v29;
    }
    v9 = v109;
    v25 = v110;
LABEL_40:
    v111 = v25;
    v32 = ((uint64_t (*)(void))a4)();
    result = ((uint64_t (*)(char *, char *))a4)(v13, v24);
    if (v32 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        result = ((uint64_t (*)(char *, char *))a4)(v111, v24);
        if ((int)result >= 0)
          v13 = v111;
        else
          v13 = v24;
      }
    }
    else if ((int)result <= 0)
    {
      result = ((uint64_t (*)(char *, char *))a4)(v111, v24);
      if ((int)result >= 0)
        v13 = v24;
      else
        v13 = v111;
    }
    if (v116)
    {
      if (v115)
      {
        if (v114)
        {
          v34 = v7;
          v35 = a3 >> 3;
          do
          {
            v36 = *(_QWORD *)v34;
            *(_QWORD *)v34 = *(_QWORD *)v13;
            v34 += 8;
            *(_QWORD *)v13 = v36;
            v13 += 8;
            --v35;
          }
          while (v35);
        }
        else if (v113)
        {
          v39 = a3 >> 2;
          v40 = v7;
          do
          {
            v41 = *(_DWORD *)v40;
            *(_DWORD *)v40 = *(_DWORD *)v13;
            v40 += 4;
            *(_DWORD *)v13 = v41;
            v13 += 4;
            --v39;
          }
          while (v39);
        }
        else
        {
          v42 = a3;
          v43 = v7;
          do
          {
            v44 = *v43;
            *v43++ = *v13;
            *v13++ = v44;
            --v42;
          }
          while (v42);
        }
      }
      else
      {
        v38 = *(_DWORD *)v7;
        *(_DWORD *)v7 = *(_DWORD *)v13;
        *(_DWORD *)v13 = v38;
      }
    }
    else
    {
      v37 = *(_QWORD *)v7;
      *(_QWORD *)v7 = *(_QWORD *)v13;
      *(_QWORD *)v13 = v37;
    }
    v45 = 0;
    v112 = v9 - 1;
    v46 = v14;
    v47 = &v7[a3];
    v48 = &v7[a3];
LABEL_64:
    while (v48 <= v46)
    {
      result = ((uint64_t (*)(char *, char *))a4)(v48, v7);
      if ((int)result > 0)
        break;
      if (!(_DWORD)result)
      {
        if (v116)
        {
          if (v115)
          {
            if (v114)
            {
              v49 = 0;
              do
              {
                v50 = *(_QWORD *)&v47[8 * v49];
                *(_QWORD *)&v47[8 * v49] = *(_QWORD *)&v48[8 * v49];
                *(_QWORD *)&v48[8 * v49++] = v50;
              }
              while (v12 != v49);
            }
            else if (v113)
            {
              v64 = 0;
              do
              {
                v65 = *(_DWORD *)&v47[4 * v64];
                *(_DWORD *)&v47[4 * v64] = *(_DWORD *)&v48[4 * v64];
                *(_DWORD *)&v48[4 * v64++] = v65;
              }
              while (v11 != v64);
            }
            else
            {
              v66 = 0;
              do
              {
                v67 = v47[v66];
                v47[v66] = v48[v66];
                v48[v66++] = v67;
              }
              while (a3 != v66);
            }
          }
          else
          {
            v63 = *(_DWORD *)v47;
            *(_DWORD *)v47 = *(_DWORD *)v48;
            *(_DWORD *)v48 = v63;
          }
        }
        else
        {
          v62 = *(_QWORD *)v47;
          *(_QWORD *)v47 = *(_QWORD *)v48;
          *(_QWORD *)v48 = v62;
        }
        v47 += a3;
        v45 = 1;
      }
      v48 += a3;
    }
    while (v48 <= v46)
    {
      result = ((uint64_t (*)(char *, char *))a4)(v46, v7);
      if ((result & 0x80000000) != 0)
      {
        if (v116)
        {
          if (v115)
          {
            if (v114)
            {
              v60 = 0;
              do
              {
                v61 = *(_QWORD *)&v48[8 * v60];
                *(_QWORD *)&v48[8 * v60] = *(_QWORD *)&v46[8 * v60];
                *(_QWORD *)&v46[8 * v60++] = v61;
              }
              while (v12 != v60);
            }
            else if (v113)
            {
              v70 = 0;
              do
              {
                v71 = *(_DWORD *)&v48[4 * v70];
                *(_DWORD *)&v48[4 * v70] = *(_DWORD *)&v46[4 * v70];
                *(_DWORD *)&v46[4 * v70++] = v71;
              }
              while (v11 != v70);
            }
            else
            {
              v72 = 0;
              do
              {
                v73 = v48[v72];
                v48[v72] = v46[v72];
                v46[v72++] = v73;
              }
              while (a3 != v72);
            }
          }
          else
          {
            v69 = *(_DWORD *)v48;
            *(_DWORD *)v48 = *(_DWORD *)v46;
            *(_DWORD *)v46 = v69;
          }
        }
        else
        {
          v68 = *(_QWORD *)v48;
          *(_QWORD *)v48 = *(_QWORD *)v46;
          *(_QWORD *)v46 = v68;
        }
        v48 += a3;
        v46 += v117;
        v45 = 1;
        goto LABEL_64;
      }
      if ((_DWORD)result)
      {
        v51 = v117;
      }
      else
      {
        if (v116)
        {
          if (v115)
          {
            if (v114)
            {
              v52 = 0;
              do
              {
                v53 = *(_QWORD *)&v46[8 * v52];
                *(_QWORD *)&v46[8 * v52] = *(_QWORD *)&v14[8 * v52];
                *(_QWORD *)&v14[8 * v52++] = v53;
              }
              while (v12 != v52);
            }
            else if (v113)
            {
              v56 = 0;
              do
              {
                v57 = *(_DWORD *)&v46[4 * v56];
                *(_DWORD *)&v46[4 * v56] = *(_DWORD *)&v14[4 * v56];
                *(_DWORD *)&v14[4 * v56++] = v57;
              }
              while (v11 != v56);
            }
            else
            {
              v58 = 0;
              do
              {
                v59 = v46[v58];
                v46[v58] = v14[v58];
                v14[v58++] = v59;
              }
              while (a3 != v58);
            }
          }
          else
          {
            v55 = *(_DWORD *)v46;
            *(_DWORD *)v46 = *(_DWORD *)v14;
            *(_DWORD *)v14 = v55;
          }
        }
        else
        {
          v54 = *(_QWORD *)v46;
          *(_QWORD *)v46 = *(_QWORD *)v14;
          *(_QWORD *)v14 = v54;
        }
        v51 = v117;
        v14 += v117;
        v45 = 1;
      }
      v46 += v51;
    }
    v74 = v48 - v47;
    if (v47 - v7 >= v48 - v47)
      v75 = v48 - v47;
    else
      v75 = v47 - v7;
    if (v75)
    {
      v76 = &v48[-v75];
      if (v114)
      {
        v77 = v75 >> 3;
        v78 = v7;
        do
        {
          v79 = *(_QWORD *)v78;
          *(_QWORD *)v78 = *(_QWORD *)v76;
          v78 += 8;
          *(_QWORD *)v76 = v79;
          v76 += 8;
          --v77;
        }
        while (v77);
      }
      else if (v113)
      {
        v80 = v75 >> 2;
        v81 = v7;
        do
        {
          v82 = *(_DWORD *)v81;
          *(_DWORD *)v81 = *(_DWORD *)v76;
          v81 += 4;
          *(_DWORD *)v76 = v82;
          v76 += 4;
          --v80;
        }
        while (v80);
      }
      else
      {
        v83 = -(uint64_t)v75;
        v84 = v7;
        do
        {
          v85 = *v84;
          *v84++ = v48[v83];
          v48[v83] = v85;
          v86 = __CFADD__(v83++, 1);
        }
        while (!v86);
      }
    }
    v87 = &v7[v108 * a3];
    v88 = v14 - v46;
    if (v88 >= v87 - &v14[a3])
      v89 = v87 - &v14[a3];
    else
      v89 = v88;
    if (v89)
    {
      v90 = &v87[-v89];
      if (v114)
      {
        v91 = v89 >> 3;
        do
        {
          v92 = *(_QWORD *)v48;
          *(_QWORD *)v48 = *(_QWORD *)v90;
          v48 += 8;
          *(_QWORD *)v90 = v92;
          v90 += 8;
          --v91;
        }
        while (v91);
      }
      else if (v113)
      {
        v93 = v89 >> 2;
        do
        {
          v94 = *(_DWORD *)v48;
          *(_DWORD *)v48 = *(_DWORD *)v90;
          v48 += 4;
          *(_DWORD *)v90 = v94;
          v90 += 4;
          --v93;
        }
        while (v93);
      }
      else
      {
        v95 = -(uint64_t)v89;
        do
        {
          v96 = *v48;
          *v48++ = v87[v95];
          v87[v95] = v96;
          v86 = __CFADD__(v95++, 1);
        }
        while (!v86);
      }
    }
    v9 = v112;
    if (!v45)
    {
      v97 = v74;
      result = _isort((unint64_t)v7, v108, a3, (int (*)(char *, _DWORD *))a4, (v108 >> 2) + 1, v116, v115);
      v74 = v97;
      if ((result & 1) != 0)
        return result;
    }
    if (v74 <= v88)
    {
      if (v74 > a3)
        result = _qsort(v7, v74 / a3, a3, a4, v112);
      if (v88 <= a3)
        return result;
      v7 = &v87[-v88];
      v100 = ((_BYTE)v87 - v88) | a3;
      v101 = v105;
      if ((v100 & 7) != 0)
        v101 = 2;
      v102 = (v100 & 3) == 0;
      v113 = v102;
      v114 = (v100 & 7) == 0;
      v103 = v104;
      if (!v102)
        v103 = 2;
      v115 = v103;
      v116 = v101;
      a2 = v88 / a3;
      if (v109 < 2)
        return heapsort(v7, a2, a3, a4);
    }
    else
    {
      if (v88 > a3)
      {
        v98 = &v87[-v88];
        v99 = v74;
        result = _qsort(v98, v88 / a3, a3, a4, v112);
        v74 = v99;
      }
      if (v74 <= a3)
        return result;
      a2 = v74 / a3;
      if (v109 < 2)
        return heapsort(v7, a2, a3, a4);
    }
  }
  return _isort((unint64_t)v7, a2, a3, (int (*)(char *, _DWORD *))a4, 0, v116, v115);
}

uint64_t _qsort_0(char *a1, unint64_t a2, size_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, char *, char *), int a6)
{
  char *v8;
  int v9;
  int v10;
  int v11;
  size_t v12;
  size_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  unint64_t v26;
  char *v27;
  int v28;
  int v29;
  int v30;
  uint64_t result;
  char *v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  size_t v37;
  char *v38;
  int v39;
  size_t v40;
  char *v41;
  char v42;
  int v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  char v71;
  size_t v72;
  unint64_t v73;
  char *v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  int v80;
  uint64_t v81;
  char *v82;
  char v83;
  BOOL v84;
  char *v85;
  size_t v86;
  size_t v87;
  char *v88;
  size_t v89;
  uint64_t v90;
  size_t v91;
  int v92;
  uint64_t v93;
  char v94;
  size_t v95;
  size_t v96;
  char v98;
  int v99;
  BOOL v100;
  int v101;
  _BOOL4 v102;
  _BOOL4 v103;
  char *v104;
  int v105;
  char *v106;
  unint64_t v107;
  char *v108;
  unint64_t v109;
  char *v110;
  char *v111;
  unsigned int v112;
  int v113;
  BOOL v114;
  BOOL v115;
  int v116;
  int v117;
  uint64_t v118;

  v8 = a1;
  v9 = a3 != 4;
  if (a6 < 1)
    return __heapsort_r(v8, a2, a3, a4, a5);
  v10 = a6;
  v118 = -(uint64_t)a3;
  v114 = (((unint64_t)a1 | a3) & 3) == 0;
  v102 = a3 != 4;
  v103 = a3 != 8;
  if ((((unint64_t)a1 | a3) & 3) != 0)
    v9 = 2;
  v115 = ((a1 | a3) & 7) == 0;
  v116 = v9;
  if (((a1 | a3) & 7) != 0)
    v11 = 2;
  else
    v11 = a3 != 8;
  v117 = v11;
  v12 = a3 >> 2;
  v13 = a3 >> 3;
  while (2)
  {
    v113 = v10;
    while (1)
    {
      if (a2 <= 7)
        return _isort_0((unint64_t)v8, a2, a3, a4, (int (*)(uint64_t, char *, _DWORD *))a5, 0, v117, v116);
      v14 = &v8[(a2 >> 1) * a3];
      v15 = &v8[(a2 - 1) * a3];
      v109 = a2;
      if (a2 < 0x29)
      {
        v22 = &v8[(a2 - 1) * a3];
        v23 = v8;
        goto LABEL_41;
      }
      v16 = (a2 >> 3) * a3;
      v17 = &v8[v16];
      v107 = v16;
      v18 = &v8[2 * v16];
      v105 = a5(a4, v8, &v8[v16]);
      v110 = v17;
      v19 = a5(a4, v17, v18);
      if (v105 < 0)
      {
        v20 = v107;
        if ((v19 & 0x80000000) == 0)
        {
          if ((int)a5(a4, v8, v18) >= 0)
            v21 = v8;
          else
            v21 = v18;
          goto LABEL_21;
        }
      }
      else
      {
        v20 = v107;
        if (v19 <= 0)
        {
          if ((int)a5(a4, v8, v18) >= 0)
            v21 = v18;
          else
            v21 = v8;
LABEL_21:
          v110 = v21;
        }
      }
      v106 = &v14[-v20];
      v24 = ((uint64_t (*)(uint64_t))a5)(a4);
      v104 = &v14[v20];
      v25 = a5(a4, v14, &v14[v20]);
      if (v24 < 0)
      {
        v26 = v107;
        if ((v25 & 0x80000000) == 0)
        {
          if ((int)a5(a4, v106, v104) >= 0)
            v14 -= v20;
          else
            v14 += v20;
        }
      }
      else
      {
        v26 = v107;
        if (v25 <= 0)
        {
          if ((int)a5(a4, v106, v104) >= 0)
            v14 += v20;
          else
            v14 -= v20;
        }
      }
      v27 = &v15[-2 * v26];
      v22 = &v15[-v26];
      v108 = v27;
      v28 = ((uint64_t (*)(uint64_t))a5)(a4);
      v29 = a5(a4, v22, v15);
      if (v28 < 0)
      {
        if ((v29 & 0x80000000) == 0)
        {
          if ((int)a5(a4, v108, v15) >= 0)
            v22 = v108;
          else
            v22 = v15;
        }
      }
      else if (v29 <= 0)
      {
        if ((int)a5(a4, v108, v15) >= 0)
          v22 = v15;
        else
          v22 = v108;
      }
      v23 = v110;
LABEL_41:
      v111 = v23;
      v30 = ((uint64_t (*)(uint64_t))a5)(a4);
      result = a5(a4, v14, v22);
      if (v30 < 0)
      {
        if ((result & 0x80000000) == 0)
        {
          result = a5(a4, v111, v22);
          if ((int)result >= 0)
            v14 = v111;
          else
            v14 = v22;
        }
      }
      else if ((int)result <= 0)
      {
        result = a5(a4, v111, v22);
        if ((int)result >= 0)
          v14 = v22;
        else
          v14 = v111;
      }
      if (v117)
      {
        if (v116)
        {
          if (v115)
          {
            v32 = v8;
            v33 = a3 >> 3;
            do
            {
              v34 = *(_QWORD *)v32;
              *(_QWORD *)v32 = *(_QWORD *)v14;
              v32 += 8;
              *(_QWORD *)v14 = v34;
              v14 += 8;
              --v33;
            }
            while (v33);
          }
          else if (v114)
          {
            v37 = a3 >> 2;
            v38 = v8;
            do
            {
              v39 = *(_DWORD *)v38;
              *(_DWORD *)v38 = *(_DWORD *)v14;
              v38 += 4;
              *(_DWORD *)v14 = v39;
              v14 += 4;
              --v37;
            }
            while (v37);
          }
          else
          {
            v40 = a3;
            v41 = v8;
            do
            {
              v42 = *v41;
              *v41++ = *v14;
              *v14++ = v42;
              --v40;
            }
            while (v40);
          }
        }
        else
        {
          v36 = *(_DWORD *)v8;
          *(_DWORD *)v8 = *(_DWORD *)v14;
          *(_DWORD *)v14 = v36;
        }
      }
      else
      {
        v35 = *(_QWORD *)v8;
        *(_QWORD *)v8 = *(_QWORD *)v14;
        *(_QWORD *)v14 = v35;
      }
      v43 = 0;
      v112 = v113 - 1;
      v44 = v15;
      v45 = &v8[a3];
      v46 = &v8[a3];
LABEL_65:
      while (v46 <= v44)
      {
        result = a5(a4, v46, v8);
        if ((int)result > 0)
          break;
        if (!(_DWORD)result)
        {
          if (v117)
          {
            if (v116)
            {
              if (v115)
              {
                v47 = 0;
                do
                {
                  v48 = *(_QWORD *)&v45[8 * v47];
                  *(_QWORD *)&v45[8 * v47] = *(_QWORD *)&v46[8 * v47];
                  *(_QWORD *)&v46[8 * v47++] = v48;
                }
                while (v13 != v47);
              }
              else if (v114)
              {
                v62 = 0;
                do
                {
                  v63 = *(_DWORD *)&v45[4 * v62];
                  *(_DWORD *)&v45[4 * v62] = *(_DWORD *)&v46[4 * v62];
                  *(_DWORD *)&v46[4 * v62++] = v63;
                }
                while (v12 != v62);
              }
              else
              {
                v64 = 0;
                do
                {
                  v65 = v45[v64];
                  v45[v64] = v46[v64];
                  v46[v64++] = v65;
                }
                while (a3 != v64);
              }
            }
            else
            {
              v61 = *(_DWORD *)v45;
              *(_DWORD *)v45 = *(_DWORD *)v46;
              *(_DWORD *)v46 = v61;
            }
          }
          else
          {
            v60 = *(_QWORD *)v45;
            *(_QWORD *)v45 = *(_QWORD *)v46;
            *(_QWORD *)v46 = v60;
          }
          v45 += a3;
          v43 = 1;
        }
        v46 += a3;
      }
      while (v46 <= v44)
      {
        result = a5(a4, v44, v8);
        if ((result & 0x80000000) != 0)
        {
          if (v117)
          {
            if (v116)
            {
              if (v115)
              {
                v58 = 0;
                do
                {
                  v59 = *(_QWORD *)&v46[8 * v58];
                  *(_QWORD *)&v46[8 * v58] = *(_QWORD *)&v44[8 * v58];
                  *(_QWORD *)&v44[8 * v58++] = v59;
                }
                while (v13 != v58);
              }
              else if (v114)
              {
                v68 = 0;
                do
                {
                  v69 = *(_DWORD *)&v46[4 * v68];
                  *(_DWORD *)&v46[4 * v68] = *(_DWORD *)&v44[4 * v68];
                  *(_DWORD *)&v44[4 * v68++] = v69;
                }
                while (v12 != v68);
              }
              else
              {
                v70 = 0;
                do
                {
                  v71 = v46[v70];
                  v46[v70] = v44[v70];
                  v44[v70++] = v71;
                }
                while (a3 != v70);
              }
            }
            else
            {
              v67 = *(_DWORD *)v46;
              *(_DWORD *)v46 = *(_DWORD *)v44;
              *(_DWORD *)v44 = v67;
            }
          }
          else
          {
            v66 = *(_QWORD *)v46;
            *(_QWORD *)v46 = *(_QWORD *)v44;
            *(_QWORD *)v44 = v66;
          }
          v46 += a3;
          v44 += v118;
          v43 = 1;
          goto LABEL_65;
        }
        if ((_DWORD)result)
        {
          v49 = v118;
        }
        else
        {
          if (v117)
          {
            if (v116)
            {
              if (v115)
              {
                v50 = 0;
                do
                {
                  v51 = *(_QWORD *)&v44[8 * v50];
                  *(_QWORD *)&v44[8 * v50] = *(_QWORD *)&v15[8 * v50];
                  *(_QWORD *)&v15[8 * v50++] = v51;
                }
                while (v13 != v50);
              }
              else if (v114)
              {
                v54 = 0;
                do
                {
                  v55 = *(_DWORD *)&v44[4 * v54];
                  *(_DWORD *)&v44[4 * v54] = *(_DWORD *)&v15[4 * v54];
                  *(_DWORD *)&v15[4 * v54++] = v55;
                }
                while (v12 != v54);
              }
              else
              {
                v56 = 0;
                do
                {
                  v57 = v44[v56];
                  v44[v56] = v15[v56];
                  v15[v56++] = v57;
                }
                while (a3 != v56);
              }
            }
            else
            {
              v53 = *(_DWORD *)v44;
              *(_DWORD *)v44 = *(_DWORD *)v15;
              *(_DWORD *)v15 = v53;
            }
          }
          else
          {
            v52 = *(_QWORD *)v44;
            *(_QWORD *)v44 = *(_QWORD *)v15;
            *(_QWORD *)v15 = v52;
          }
          v49 = v118;
          v15 += v118;
          v43 = 1;
        }
        v44 += v49;
      }
      v72 = v46 - v45;
      if (v45 - v8 >= v46 - v45)
        v73 = v46 - v45;
      else
        v73 = v45 - v8;
      if (v73)
      {
        v74 = &v46[-v73];
        if (v115)
        {
          v75 = v73 >> 3;
          v76 = v8;
          do
          {
            v77 = *(_QWORD *)v76;
            *(_QWORD *)v76 = *(_QWORD *)v74;
            v76 += 8;
            *(_QWORD *)v74 = v77;
            v74 += 8;
            --v75;
          }
          while (v75);
        }
        else if (v114)
        {
          v78 = v73 >> 2;
          v79 = v8;
          do
          {
            v80 = *(_DWORD *)v79;
            *(_DWORD *)v79 = *(_DWORD *)v74;
            v79 += 4;
            *(_DWORD *)v74 = v80;
            v74 += 4;
            --v78;
          }
          while (v78);
        }
        else
        {
          v81 = -(uint64_t)v73;
          v82 = v8;
          do
          {
            v83 = *v82;
            *v82++ = v46[v81];
            v46[v81] = v83;
            v84 = __CFADD__(v81++, 1);
          }
          while (!v84);
        }
      }
      v85 = &v8[v109 * a3];
      v86 = v15 - v44;
      if (v86 >= v85 - &v15[a3])
        v87 = v85 - &v15[a3];
      else
        v87 = v86;
      v10 = v113 - 1;
      if (v87)
      {
        v88 = &v85[-v87];
        if (v115)
        {
          v89 = v87 >> 3;
          do
          {
            v90 = *(_QWORD *)v46;
            *(_QWORD *)v46 = *(_QWORD *)v88;
            v46 += 8;
            *(_QWORD *)v88 = v90;
            v88 += 8;
            --v89;
          }
          while (v89);
        }
        else if (v114)
        {
          v91 = v87 >> 2;
          do
          {
            v92 = *(_DWORD *)v46;
            *(_DWORD *)v46 = *(_DWORD *)v88;
            v46 += 4;
            *(_DWORD *)v88 = v92;
            v88 += 4;
            --v91;
          }
          while (v91);
        }
        else
        {
          v93 = -(uint64_t)v87;
          do
          {
            v94 = *v46;
            *v46++ = v85[v93];
            v85[v93] = v94;
            v84 = __CFADD__(v93++, 1);
          }
          while (!v84);
        }
      }
      if (!v43)
      {
        v95 = v72;
        result = _isort_0((unint64_t)v8, v109, a3, a4, (int (*)(uint64_t, char *, _DWORD *))a5, (v109 >> 2) + 1, v117, v116);
        v72 = v95;
        if ((result & 1) != 0)
          return result;
      }
      if (v72 <= v86)
        break;
      if (v86 > a3)
      {
        v96 = v72;
        result = _qsort_0(&v85[-v86], v86 / a3, a3, a4, a5, v112);
        v72 = v96;
      }
      if (v72 <= a3)
        return result;
      a2 = v72 / a3;
      if (v113-- < 2)
        return __heapsort_r(v8, a2, a3, a4, a5);
    }
    if (v72 > a3)
      result = _qsort_0(v8, v72 / a3, a3, a4, a5, v112);
    if (v86 > a3)
    {
      v8 = &v85[-v86];
      v98 = ((_BYTE)v85 - v86) | a3;
      v99 = v103;
      if ((v98 & 7) != 0)
        v99 = 2;
      v100 = (v98 & 3) == 0;
      v114 = v100;
      v115 = (v98 & 7) == 0;
      v101 = v102;
      if (!v100)
        v101 = 2;
      v116 = v101;
      v117 = v99;
      a2 = v86 / a3;
      if (v113 < 2)
        return __heapsort_r(v8, a2, a3, a4, a5);
      continue;
    }
    return result;
  }
}

int strcasecmp_l(const char *a1, const char *a2, locale_t a3)
{
  locale_t v5;
  _xlocale *v6;
  uint64_t v7;
  __darwin_ct_rune_t v8;
  uint64_t v9;
  __darwin_ct_rune_t v10;
  uint64_t v13;
  __darwin_ct_rune_t v14;
  uint64_t v15;
  __darwin_ct_rune_t v16;

  v5 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1)
    v5 = a3;
  if (a3)
    v6 = v5;
  else
    v6 = (_xlocale *)&__c_locale;
  while (1)
  {
    v7 = *(unsigned __int8 *)a1;
    v8 = *a1 < 0 ? ___tolower_l(v7, v6) : _DefaultRuneLocale.__maplower[v7];
    v9 = *(unsigned __int8 *)a2;
    v10 = *a2 < 0 ? ___tolower_l(v9, v6) : _DefaultRuneLocale.__maplower[v9];
    if (v8 != v10)
      break;
    ++a2;
    if (!*(unsigned __int8 *)a1++)
      return 0;
  }
  v13 = *(unsigned __int8 *)a1;
  if (*a1 < 0)
    v14 = ___tolower_l(v13, v6);
  else
    v14 = _DefaultRuneLocale.__maplower[v13];
  v15 = *(unsigned __int8 *)a2;
  if (*a2 < 0)
    v16 = ___tolower_l(v15, v6);
  else
    v16 = _DefaultRuneLocale.__maplower[v15];
  return v14 - v16;
}

int strcasecmp(const char *a1, const char *a2)
{
  uint64_t v2;
  _xlocale *v3;
  _xlocale *v4;

  v2 = __locale_key;
  v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3)
    v4 = v3;
  else
    v4 = (_xlocale *)&__global_locale;
  return strcasecmp_l(a1, a2, v4);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  int v8;

  v8 = 2 * flsl(__nel) - 2;
  _qsort((unint64_t)__base, __nel, __width, __compar, v8);
}

int heapsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  size_t v7;
  _BYTE *v9;
  _BYTE *v10;
  char *v11;
  size_t v12;
  unint64_t v13;
  size_t v14;
  char *v15;
  int v16;
  unint64_t v17;
  char *v18;
  size_t v19;
  char v20;
  char *i;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  int v29;
  unint64_t v30;
  char *v31;
  size_t v32;
  char v33;
  char *v34;
  int v35;
  size_t v36;
  char *v37;
  char v38;
  uint64_t v39;
  char *v40;
  size_t v41;
  int (__cdecl *v42)(const void *, const void *);

  if (__nel < 2)
    return 0;
  if (!__width)
  {
    *__error() = 22;
    return -1;
  }
  v7 = __nel;
  v9 = malloc_type_malloc(__width, 0x3778CCC5uLL);
  if (!v9)
    return -1;
  v10 = v9;
  v40 = (char *)__base;
  v11 = (char *)__base - __width;
  v12 = v7 >> 1;
  do
  {
    v41 = v12;
    v13 = 2 * v12;
    if (2 * v12 <= v7)
    {
      v14 = v12;
      do
      {
        v15 = &v11[v13 * __width];
        if (v13 >= v7)
        {
          v17 = v13;
        }
        else
        {
          v16 = ((uint64_t (*)(char *, char *))__compar)(&v11[v13 * __width], &v15[__width]);
          v17 = v13 | (v16 >> 31);
          if (v16 < 0)
            v15 += __width;
        }
        v18 = &v11[v14 * __width];
        if (((int (*)(char *, char *))__compar)(v15, v18) < 1)
          break;
        v19 = __width;
        do
        {
          v20 = *v18;
          *v18++ = *v15;
          *v15++ = v20;
          --v19;
        }
        while (v19);
        v13 = 2 * v17;
        v14 = v17;
      }
      while (2 * v17 <= v7);
    }
    v12 = v41 - 1;
  }
  while (v41 != 1);
  i = v40;
  v22 = &v40[__width * (v7 - 1)];
  v42 = __compar;
  do
  {
    v23 = 0;
    do
    {
      v10[v23] = v22[v23];
      ++v23;
    }
    while (__width != v23);
    v24 = 0;
    do
    {
      v22[v24] = i[v24];
      ++v24;
    }
    while (__width != v24);
    --v7;
    v25 = i;
    if (v7 >= 2)
    {
      v26 = 2;
      v27 = 1;
      do
      {
        v28 = &v11[v26 * __width];
        if (v26 >= v7)
        {
          v30 = v26;
        }
        else
        {
          v29 = ((uint64_t (*)(char *, char *))v42)(&v11[v26 * __width], &v28[__width]);
          v30 = v26 | (v29 >> 31);
          if (v29 < 0)
            v28 += __width;
        }
        v31 = &v11[v27 * __width];
        v32 = __width;
        do
        {
          v33 = *v28++;
          *v31++ = v33;
          --v32;
        }
        while (v32);
        v26 = 2 * v30;
        v27 = v30;
      }
      while (2 * v30 <= v7);
      v25 = &v11[v30 * __width];
      v34 = v25;
      for (i = v40; v30 != 1; v25 = &v11[v30 * __width])
      {
        v25 = v34;
        v30 >>= 1;
        v34 = &v11[v30 * __width];
        v35 = ((uint64_t (*)(_BYTE *, char *))v42)(v10, v34);
        v36 = __width;
        v37 = v34;
        if (v35 < 0)
          break;
        do
        {
          v38 = *v37++;
          *v25++ = v38;
          --v36;
        }
        while (v36);
      }
    }
    v39 = 0;
    do
    {
      v25[v39] = v10[v39];
      ++v39;
    }
    while (__width != v39);
    v22 -= __width;
  }
  while (v7 > 1);
  free(v10);
  return 0;
}

int strcoll_l(const char *a1, const char *a2, locale_t a3)
{
  locale_t v4;
  _xlocale *v5;
  __int32 *v6;
  int v7;
  __int32 *v9;
  __int32 *v10;
  int v11;
  int v12;

  v4 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1)
    v4 = a3;
  if (a3)
    v5 = v4;
  else
    v5 = (_xlocale *)&__c_locale;
  if (*(_BYTE *)(*((_QWORD *)v5 + 165) + 64))
  {
    v6 = 0;
LABEL_8:
    v7 = *__error();
    free(v6);
    *__error() = v7;
    return _platform_strcmp();
  }
  v6 = __collate_mbstowcs((char *)a1, v5);
  if (!v6)
    goto LABEL_8;
  v9 = __collate_mbstowcs((char *)a2, v5);
  if (!v9)
    goto LABEL_8;
  v10 = v9;
  v11 = wcscoll_l(v6, v9, v5);
  v12 = *__error();
  free(v6);
  free(v10);
  *__error() = v12;
  return v11;
}

int strcoll(const char *__s1, const char *__s2)
{
  uint64_t v2;
  _xlocale *v3;
  _xlocale *v4;

  v2 = __locale_key;
  v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3)
    v4 = v3;
  else
    v4 = (_xlocale *)&__global_locale;
  return strcoll_l(__s1, __s2, v4);
}

int alphasort(const dirent **a1, const dirent **a2)
{
  return strcoll((*a1)->d_name, (*a2)->d_name);
}

uint64_t __gl_compare(const char **a1, const char **a2)
{
  return strcoll(*a1, *a2);
}

DIR *g_opendir(__int32 *a1, uint64_t a2, locale_t a3)
{
  int *v4;
  DIR *result;
  char v6[1030];

  if (*(_QWORD *)a1)
  {
    if (__gl_g_Ctoc(a1, v6, 0x405uLL, a3))
    {
      v4 = __error();
      result = 0;
      *v4 = 63;
      return result;
    }
  }
  else
  {
    strcpy(v6, ".");
  }
  if ((*(_BYTE *)(a2 + 24) & 0x40) != 0)
    return (DIR *)(*(uint64_t (**)(char *))(a2 + 64))(v6);
  else
    return opendir(v6);
}

DIR *__cdecl opendir(const char *a1)
{
  return __opendir2(a1, 3);
}

DIR *__cdecl fdopendir(int a1)
{
  DIR *result;
  int *v3;
  stat v4;

  memset(&v4, 0, sizeof(v4));
  if (fstat(a1, &v4))
    return 0;
  if ((v4.st_mode & 0xF000) == 0x4000)
  {
    if (fcntl_NOCANCEL() == -1)
      return 0;
    return (DIR *)__opendir_common(a1, 3, 1);
  }
  else
  {
    v3 = __error();
    result = 0;
    *v3 = 20;
  }
  return result;
}

DIR *__cdecl __opendir2(const char *a1, int a2)
{
  DIR *result;
  int v4;
  int v5;
  int *v6;

  if ((a2 & 0x18) != 0)
    return 0;
  v4 = open_NOCANCEL();
  if (v4 == -1)
    return 0;
  result = (DIR *)__opendir_common(v4, a2, 0);
  if (!result)
  {
    v5 = *__error();
    close_NOCANCEL();
    v6 = __error();
    result = 0;
    *v6 = v5;
  }
  return result;
}

uint64_t __opendir_common(int a1, int a2, int a3)
{
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  int v15;
  statfs v16;

  v6 = (char *)malloc_type_malloc(0xA0uLL, 0x7AC59056uLL);
  v7 = (uint64_t)v6;
  if (!v6)
    return v7;
  *((_QWORD *)v6 + 3) = 0;
  *(_DWORD *)v6 = a1;
  *((_DWORD *)v6 + 14) = a2;
  *((_QWORD *)v6 + 1) = 0;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *((_QWORD *)v6 + 8) = 850045863;
  *((_QWORD *)v6 + 17) = 0;
  *((_QWORD *)v6 + 15) = 0;
  *((_QWORD *)v6 + 16) = v6 + 136;
  *((_QWORD *)v6 + 18) = 0;
  if ((a2 & 2) != 0)
  {
    if (__kernel_supports_unionfs_kernel_supports_unionfs == 255)
    {
      v15 = 0;
      *(_QWORD *)&v16.f_bsize = 4;
      sysctlbyname("kern.secure_kernel", &v15, (size_t *)&v16.f_bsize, 0, 0);
      __kernel_supports_unionfs_kernel_supports_unionfs = v15 == 0;
      if (v15)
        goto LABEL_9;
    }
    else if (!__kernel_supports_unionfs_kernel_supports_unionfs)
    {
      goto LABEL_9;
    }
    memset(&v16, 0, 512);
    if (fstatfs(a1, &v16) < 0)
    {
LABEL_19:
      v13 = *__error();
      free(*(void **)(v7 + 24));
      free((void *)v7);
      v7 = 0;
      *__error() = v13;
      return v7;
    }
    if ((v16.f_flags & 0x20) != 0)
    {
      if (_filldir(v7, a3))
      {
        v12 = *(_DWORD *)(v7 + 56) | 8;
LABEL_22:
        *(_DWORD *)(v7 + 56) = v12;
        return v7;
      }
      goto LABEL_19;
    }
  }
LABEL_9:
  *(_DWORD *)(v7 + 32) = 2048;
  v8 = (char *)malloc_type_malloc(0x800uLL, 0xDA37278AuLL);
  *(_QWORD *)(v7 + 24) = v8;
  if (!v8)
    goto LABEL_19;
  if (a3)
  {
    v9 = &v8[*(int *)(v7 + 32)];
    *((_DWORD *)v9 - 1) = 0;
    v10 = __getdirentries64();
    *(_QWORD *)(v7 + 16) = v10;
    if ((v10 & 0x8000000000000000) == 0)
    {
      if (v10 <= *(int *)(v7 + 32) - 4)
        v11 = (32 * (*((_DWORD *)v9 - 1) & 1)) | *(_DWORD *)(v7 + 56);
      else
        v11 = *(_DWORD *)(v7 + 56);
      v12 = v11 | 0x10;
      goto LABEL_22;
    }
    if (*__error() == 22)
      *__error() = 20;
    goto LABEL_19;
  }
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(*(_QWORD *)(v7 + 128) + 16) = 0;
  return v7;
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  int result;

  _platform_strlen();
  result = __sysctl();
  if ((result & 0x80000000) == 0)
    return __sysctl();
  return result;
}

__int32 *__gl_globtilde(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  __int32 *v3;
  uint64_t v4;
  uint64_t v5;
  _xlocale *v6;
  _QWORD *v7;
  __int32 *v8;
  uint64_t v9;
  __int32 *v10;
  uint64_t *v11;
  __int32 *v12;
  uint64_t v13;
  BOOL v15;
  passwd *v16;
  char *v17;
  uid_t v18;
  char *pw_dir;
  uint64_t v20;
  size_t v21;
  __int32 v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v27;
  __int32 v28;
  mbstate_t v29;
  char v30[4096];

  v2 = (_QWORD *)MEMORY[0x1E0C86820](a1, a2);
  v7 = v2;
  if (*v2 != 126 || (*(_BYTE *)(v5 + 25) & 8) == 0)
    return (__int32 *)v7;
  v8 = v3;
  v9 = v4 - 1;
  v10 = &v3[2 * v4 - 2];
  v11 = v2 + 1;
  if (v4 - 1 < 1)
  {
    v12 = v3;
LABEL_13:
    v13 = *v11;
  }
  else
  {
    v12 = v3;
    while (1)
    {
      v13 = *v11;
      if (!*v11)
        break;
      if (v13 == 47 || v13 == 0x400000002FLL)
        break;
      *(_QWORD *)v12 = v13;
      v12 += 2;
      ++v11;
      if (v12 >= v10)
        goto LABEL_13;
    }
  }
  if (v13)
    v15 = v13 == 0x400000002FLL;
  else
    v15 = 1;
  if (!v15 && v13 != 47)
    return 0;
  v28 = 0;
  *(_QWORD *)v12 = 0;
  if (*(_QWORD *)v3)
  {
    if (__gl_g_Ctoc(v3, v30, 0x1000uLL, v6))
      return 0;
    v16 = getpwnam(v30);
    if (!v16)
      return (__int32 *)v7;
  }
  else
  {
    if (!issetugid())
    {
      pw_dir = getenv("HOME");
      if (pw_dir)
        goto LABEL_28;
    }
    v17 = getlogin();
    if (!v17 || (v16 = getpwnam(v17)) == 0)
    {
      v18 = getuid();
      v16 = getpwuid(v18);
      if (!v16)
        return (__int32 *)v7;
    }
  }
  pw_dir = v16->pw_dir;
LABEL_28:
  v20 = 0;
  memset(&v29, 0, sizeof(v29));
  while (1)
  {
    v21 = mbrtowc(&v28, pw_dir, 6uLL, &v29);
    if (v21 < 0xFFFFFFFFFFFFFFFELL)
    {
      v22 = v28;
    }
    else
    {
      v22 = *pw_dir;
      v28 = v22;
      memset(&v29, 0, sizeof(v29));
      v21 = 1;
    }
    *(_DWORD *)&v30[v20] = v22;
    if (!v22)
      break;
    pw_dir += v21;
    v20 += 4;
    if (v20 == 4096)
      return 0;
  }
  v23 = v30;
  v24 = (uint64_t *)v8;
  if (v9 >= 1)
  {
    do
    {
      v25 = *(int *)v23;
      if (!(_DWORD)v25)
        goto LABEL_43;
      v23 += 4;
      *v24++ = v25 | 0x4000000000;
    }
    while (v24 < (uint64_t *)v10);
  }
  if (*(_DWORD *)v23)
    return 0;
LABEL_43:
  if (*v11)
  {
    while (v24 <= (uint64_t *)v10)
    {
      v27 = *v11++;
      *v24++ = v27;
      if (!v27)
        return v8;
    }
    return 0;
  }
  *v24 = 0;
  return v8;
}

unint64_t __strlcpy_chk(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (a4 < a3)
    __chk_fail_overflow();
  v7 = _platform_strlcpy();
  v8 = v7;
  if (v7 < a3)
    v9 = v7 + 1;
  else
    v9 = a3;
  __chk_overlap(a1, v9, a2, v9);
  return v8;
}

unint64_t __strcpy_chk(unint64_t a1, const char *a2, unint64_t a3)
{
  char *v6;

  v6 = &stpcpy((char *)a1, a2)[-a1 + 1];
  if ((unint64_t)v6 > a3)
    __chk_fail_overflow();
  if (__chk_assert_no_overlap)
    __chk_overlap(a1, (uint64_t)v6, (unint64_t)a2, (uint64_t)v6);
  return a1;
}

char *__strncpy_chk(char *a1, const char *a2, size_t a3, size_t a4)
{
  char *v7;
  uint64_t v8;

  if (a4 < a3)
    __chk_fail_overflow();
  v7 = stpncpy(a1, a2, a3);
  if (__chk_assert_no_overlap)
  {
    if (v7 - a1 == a3)
      v8 = v7 - a1;
    else
      v8 = v7 - a1 + 1;
    __chk_overlap((unint64_t)a1, v8, (unint64_t)a2, v8);
  }
  return a1;
}

char *__cdecl stpncpy(char *__dst, const char *__src, size_t __n)
{
  size_t v5;
  size_t v6;
  char *v7;

  v5 = _platform_strnlen();
  if (__n <= v5)
  {
    _platform_memmove();
    return &__dst[__n];
  }
  else
  {
    v6 = v5;
    _platform_memmove();
    v7 = &__dst[v6];
    _platform_bzero();
  }
  return v7;
}

unint64_t __strlcat_chk(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  if (a4 < a3)
    __chk_fail_overflow();
  v7 = _platform_strlen();
  v8 = _platform_strnlen();
  v9 = a3 - v8;
  if (a3 == v8)
  {
    v10 = a3;
  }
  else
  {
    v10 = v8;
    if (v7 >= v9)
    {
      __chk_overlap(a1, a3, a2, v9 - 1);
      _platform_memmove();
      *(_BYTE *)(a3 + a1 - 1) = 0;
    }
    else
    {
      __chk_overlap(a1, v7 + 1 + v8, a2, v7 + 1);
      _platform_memmove();
    }
  }
  return v10 + v7;
}

unint64_t __chk_overlap(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2 && a4)
  {
    if (result == a3)
      goto LABEL_6;
    if (result >= a3)
    {
      if (a3 + a4 > result)
LABEL_6:
        __chk_fail_overlap();
    }
    else if (result + a2 > a3)
    {
      goto LABEL_6;
    }
  }
  return result;
}

char *__cdecl stpcpy(char *__dst, const char *__src)
{
  uint64_t v3;

  v3 = _platform_strlen();
  _platform_memmove();
  return &__dst[v3];
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  return _vasprintf((pthread_mutex_t *)0xFFFFFFFFFFFFFFFFLL, 0, (void **)a1);
}

char *__cdecl mkdtemp(char *a1)
{
  if (find_temp_path(4294967294, a1, 0, 1, (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mkdtemp_action, 0, 0))return a1;
  else
    return 0;
}

int mkstemps(char *a1, int a2)
{
  int v3;

  v3 = 0;
  if (find_temp_path(4294967294, a1, a2, 1, (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mkostemps_action, 0, (uint64_t)&v3))return v3;
  else
    return -1;
}

int mkstemp(char *a1)
{
  int v2;

  v2 = 0;
  if (find_temp_path(4294967294, a1, 0, 1, (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mkostemps_action, 0, (uint64_t)&v2))return v2;
  else
    return -1;
}

int mkostempsat_np(int dfd, char *path, int slen, int oflags)
{
  int v5;
  int v6;

  v6 = oflags;
  v5 = 0;
  if ((oflags & 0xFEFFFFC7) != 0)
  {
    *__error() = 22;
    return -1;
  }
  else if (find_temp_path(*(uint64_t *)&dfd, path, slen, 1, (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mkostemps_action, (uint64_t)&v6, (uint64_t)&v5))
  {
    return v5;
  }
  else
  {
    return -1;
  }
}

_QWORD *rb_tree_removal_rebalance(_QWORD *result, unint64_t a2, unsigned int a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = result;
  while (1)
  {
    v6 = *(_QWORD *)(a2 + 8 * a3);
    if (v6)
    {
      if ((*(_BYTE *)(v6 + 16) & 1) != 0)
        return result;
    }
    v7 = a3 ^ 1;
    result = *(_QWORD **)(a2 + 8 * v7);
    v8 = *(_QWORD *)(a2 + 16);
    if ((v8 & 1) != 0)
    {
      v12 = (_QWORD **)(a2 + 8 * v7);
      goto LABEL_15;
    }
    if (*result && (*(_BYTE *)(*result + 16) & 1) != 0 || (v9 = result[1]) != 0 && (*(_BYTE *)(v9 + 16) & 1) != 0)
    {
      v12 = (_QWORD **)(a2 + 8 * v7);
      goto LABEL_23;
    }
    v10 = result[2];
    if ((v10 & 1) != 0)
    {
      v12 = (_QWORD **)(a2 + 8 * v7);
      rb_tree_reparent_nodes(a2, a3 ^ 1);
      result = *v12;
      v8 = *(_QWORD *)(a2 + 16);
      if ((v8 & 1) == 0)
      {
LABEL_23:
        v14 = result[v7];
        if (!v14 || (v15 = *(_QWORD *)(v14 + 16), (v15 & 1) == 0))
        {
          rb_tree_reparent_nodes((uint64_t)result, a3);
          v14 = (*v12)[v7];
          v15 = *(_QWORD *)(v14 + 16);
        }
        *(_QWORD *)(v14 + 16) = v15 & 0xFFFFFFFFFFFFFFFELL;
        return (_QWORD *)rb_tree_reparent_nodes(a2, a3 ^ 1);
      }
LABEL_15:
      if ((!result || (result[2] & 1) == 0) && (!*result || (*(_BYTE *)(*result + 16) & 1) == 0))
      {
        v13 = result[1];
        if (!v13 || (*(_BYTE *)(v13 + 16) & 1) == 0)
        {
          *(_QWORD *)(a2 + 16) = v8 & 0xFFFFFFFFFFFFFFFELL;
          result[2] |= 1uLL;
          return result;
        }
      }
      goto LABEL_23;
    }
    result[2] = v10 | 1;
    if (*v5 == a2)
      return result;
    v11 = *(_QWORD *)(a2 + 16);
    a3 = (v11 >> 1) & 1;
    a2 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  }
}

void *__cdecl rb_tree_insert_node(rb_tree_t *a1, void *a2)
{
  void *v2;
  rb_tree_t *v4;
  _QWORD *v5;
  unint64_t *v6;
  uint64_t (*v7)(_QWORD, char *, void *);
  rb_tree_t *v8;
  char *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void **v17;
  unint64_t **v18;
  rb_tree_t *v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  _BOOL8 v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = a2;
  v4 = (rb_tree_t *)a1->opaque[0];
  v5 = a1->opaque[1];
  v6 = (unint64_t *)((char *)a2 + v5[2]);
  if (a1->opaque[0])
  {
    v7 = (uint64_t (*)(_QWORD, char *, void *))*v5;
    do
    {
      v8 = v4;
      v9 = (char *)v4 - v5[2];
      v10 = v7(v5[3], v9, v2);
      if (!v10)
        return v9;
      v11 = v10 >> 31;
      v4 = (rb_tree_t *)v8->opaque[v10 >> 31];
    }
    while (v4);
    v12 = v6 + 2;
    v13 = (unint64_t)v8 & 0xFFFFFFFFFFFFFFFDLL;
    if ((v10 & 0x80000000) == 0)
      goto LABEL_8;
    v14 = 2;
  }
  else
  {
    v11 = 0;
    v12 = v6 + 2;
    v13 = (unint64_t)a1 & 0xFFFFFFFFFFFFFFFDLL;
    v8 = a1;
LABEL_8:
    v14 = 0;
  }
  v15 = v14 | v13;
  if (v8 == a1)
  {
    v21 = 0;
    v20 = v15 & 0xFFFFFFFFFFFFFFFELL;
    v6[2] = v20;
    a1->opaque[2] = v6;
    a1->opaque[3] = v6;
    v16 = v11;
  }
  else
  {
    v16 = v11;
    v17 = &a1->opaque[v11];
    v19 = (rb_tree_t *)v17[2];
    v18 = (unint64_t **)(v17 + 2);
    if (v8 == v19)
      *v18 = v6;
    v20 = v15 | 1;
    *v12 = v20;
    v21 = (uint64_t)v8->opaque[2] & 1;
  }
  *v6 = (unint64_t)v8->opaque[v16];
  v6[1] = (unint64_t)v8->opaque[v16];
  v8->opaque[v16] = v6;
  ++a1->opaque[4];
  if (v21)
  {
    v22 = v20 & 0xFFFFFFFFFFFFFFFCLL;
    v23 = (_QWORD *)((v20 & 0xFFFFFFFFFFFFFFFCLL) + 16);
    v24 = *v23 & 0xFFFFFFFFFFFFFFFCLL;
    v25 = *(_QWORD *)(v24 + 8);
    v26 = v25 == (v20 & 0xFFFFFFFFFFFFFFFCLL);
    v27 = v25 != (v20 & 0xFFFFFFFFFFFFFFFCLL);
    v28 = *(_QWORD *)(v24 + 8 * v27);
    if (v28 && (v31 = *(_QWORD *)(v28 + 16), v29 = (unint64_t *)(v28 + 16), v30 = v31, (v31 & 1) != 0))
    {
      v33 = a1->opaque[0];
      while (1)
      {
        *v29 = v30 & 0xFFFFFFFFFFFFFFFELL;
        *v23 &= ~1uLL;
        if (v33 == (void *)v24)
          break;
        v6 = (unint64_t *)v24;
        v34 = *(_QWORD *)(v24 + 16);
        *(_QWORD *)(v24 + 16) = v34 | 1;
        v22 = v34 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v34 & 0xFFFFFFFFFFFFFFFCLL) == 0)
          break;
        v23 = (_QWORD *)(v22 + 16);
        v35 = *(_QWORD *)(v22 + 16);
        if ((v35 & 1) == 0)
          break;
        v24 = v35 & 0xFFFFFFFFFFFFFFFCLL;
        v36 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFFFCLL) + 8);
        v26 = v36 == v22;
        v27 = v36 != v22;
        v37 = *(_QWORD *)(v24 + 8 * v27);
        if (v37)
        {
          v38 = *(_QWORD *)(v37 + 16);
          v29 = (unint64_t *)(v37 + 16);
          v30 = v38;
          if ((v38 & 1) != 0)
            continue;
        }
        goto LABEL_18;
      }
    }
    else
    {
LABEL_18:
      if (v6 == *(unint64_t **)(v22 + 8 * v27))
        rb_tree_reparent_nodes(v22, v27);
      rb_tree_reparent_nodes(v24, v26);
      *((_QWORD *)a1->opaque[0] + 2) &= ~1uLL;
    }
  }
  return v2;
}

uint64_t rb_tree_reparent_nodes(uint64_t result, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 16);
  v3 = *(_QWORD *)(result + 8 * a2);
  *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFCLL) + 8 * ((v2 >> 1) & 1)) = v3;
  *(_QWORD *)(result + 8 * a2) = *(_QWORD *)(v3 + 8 * (a2 ^ 1));
  *(_QWORD *)(v3 + 8 * (a2 ^ 1)) = result;
  *(_QWORD *)(v3 + 16) = v2 & 0xFFFFFFFFFFFFFFFCLL | *(_QWORD *)(v3 + 16) & 3;
  v4 = *(_QWORD *)(result + 16) & 3 | v3;
  *(_QWORD *)(result + 16) = v4;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = (v5 ^ v4) & 3;
  *(_QWORD *)(v3 + 16) = v6 ^ v5;
  *(_QWORD *)(result + 16) = (*(_QWORD *)(result + 16) ^ v6) & 0xFFFFFFFFFFFFFFFDLL | (2 * (a2 != 1));
  v7 = *(_QWORD *)(result + 8 * a2);
  if (v7)
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(v7 + 16) & 1 | result & 0xFFFFFFFFFFFFFFFDLL | (2 * (a2 != 0));
  return result;
}

char *__cdecl mktemp(char *a1)
{
  if (find_temp_path(4294967294, a1, 0, 0, (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mktemp_action, 0, 0))return a1;
  else
    return 0;
}

int mkstemp_dprotected_np(char *path, int dpclass, int dpflags)
{
  int v4;
  _DWORD v5[2];

  v4 = 0;
  v5[0] = dpclass;
  v5[1] = dpflags;
  if (find_temp_path(4294967294, path, 0, 1, (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mkstemp_dprotected_np_action, (uint64_t)v5, (uint64_t)&v4))return v4;
  else
    return -1;
}

uint32_t arc4random(void)
{
  uint32_t v1;

  v1 = 0;
  arc4_init();
  (*(void (**)(uint64_t, uint64_t, uint32_t *))rng)(rng, 4, &v1);
  return v1;
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  uint64_t v4;
  int v5;
  const char *__attribute__((__org_typedef(uuid_string_t))) v6;
  uint64_t i;
  __int16 v8;
  char __str[2];
  char v11;
  int v12;
  __int16 v13;
  __int16 v14;
  uint64_t v15;

  if (_platform_strlen() != 36)
    return -1;
  v4 = 0;
  do
  {
    if (v4 > 0x24)
      goto LABEL_11;
    if (((1 << v4) & 0x842100) != 0)
    {
      if (in[v4] != 45)
        return -1;
      goto LABEL_13;
    }
    if (v4 == 36)
    {
      v5 = in[v4];
      if (!in[v4])
        break;
      if ((v5 & 0x80) != 0)
        return -1;
    }
    else
    {
LABEL_11:
      v5 = in[v4];
      if ((v5 & 0x80) != 0)
        return -1;
    }
    if ((_DefaultRuneLocale.__runetype[v5] & 0x10000) == 0)
      return -1;
LABEL_13:
    ++v4;
  }
  while ((_DWORD)v4 != 37);
  v12 = strtoul(in, 0, 16);
  v13 = strtoul(in + 9, 0, 16);
  v14 = strtoul(in + 14, 0, 16);
  v15 = (unsigned __int16)strtoul(in + 19, 0, 16);
  v6 = in + 24;
  v11 = 0;
  for (i = 10; i != 16; ++i)
  {
    v8 = *(_WORD *)v6;
    v6 += 2;
    *(_WORD *)__str = v8;
    *((_BYTE *)&v12 + i) = strtoul(__str, 0, 16);
  }
  uuid_pack((uint64_t)&v12, (uint64_t)uu);
  return 0;
}

unint64_t strtoul_l(const char *a1, char **a2, int a3, locale_t a4)
{
  locale_t v6;
  locale_t v7;
  const char *v8;
  int v9;
  int v10;
  _RuneLocale *v11;
  char v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  _BOOL4 v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unsigned __int8 v21;
  int v22;
  char v23;
  int v24;
  char *v25;
  int *v27;

  v6 = (locale_t)&__global_locale;
  if (a4 == (locale_t)-1)
    v7 = (locale_t)&__global_locale;
  else
    v7 = a4;
  if (!a4)
    v7 = (locale_t)&__c_locale;
  if (v7 != (locale_t)-1)
    v6 = v7;
  if (!v7)
    v6 = (locale_t)&__c_locale;
  v8 = a1;
  do
  {
    v10 = *v8++;
    v9 = v10;
    v11 = &_DefaultRuneLocale;
    if (v10 < 0)
      v11 = *(_RuneLocale **)(*((_QWORD *)v6 + 166) + 120);
  }
  while ((v11->__runetype[v9] & 0x4000) != 0);
  if (v9 == 43 || v9 == 45)
  {
    v13 = *v8++;
    v12 = v13;
  }
  else
  {
    v12 = v9;
  }
  if ((a3 & 0xFFFFFFEF) != 0 || v12 != 48)
  {
    v16 = a3 == 0;
    if (v12 != 48)
    {
      v17 = 10;
      goto LABEL_29;
    }
  }
  else
  {
    if ((*(unsigned __int8 *)v8 | 0x20) == 0x78)
    {
      v12 = v8[1];
      if ((v12 - 48) < 0xAu
        || (v14 = *((unsigned __int8 *)v8 + 1) - 65, v14 <= 0x25) && ((1 << v14) & 0x3F0000003FLL) != 0)
      {
        v8 += 2;
        v15 = 16;
        goto LABEL_34;
      }
    }
    v16 = a3 == 0;
    v12 = 48;
  }
  v17 = 8;
LABEL_29:
  if (v16)
    v15 = v17;
  else
    v15 = a3;
  if (v15 - 37 < 0xFFFFFFDD)
  {
    v18 = 0;
    goto LABEL_54;
  }
LABEL_34:
  v18 = 0;
  v19 = 0;
  v20 = 0xFFFFFFFFFFFFFFFFLL / v15;
  while (1)
  {
    v21 = v12 - 48;
    if ((v12 - 48) >= 0xAu)
    {
      if ((v12 - 65) > 0x19u)
      {
        if ((v12 - 97) > 0x19u)
          break;
        v21 = v12 - 87;
      }
      else
      {
        v21 = v12 - 55;
      }
    }
    if ((int)v15 <= v21)
      break;
    v22 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v20)
    {
      if (v18 == v20 && v21 > (int)~(v20 * v15))
      {
        v18 = 0xFFFFFFFFFFFFFFFFLL / v15;
      }
      else
      {
        v18 = v18 * v15 + v21;
        v22 = 1;
      }
    }
    v23 = *v8++;
    v12 = v23;
    v19 = v22;
  }
  if (v19 < 0)
  {
    v27 = __error();
    v24 = 0;
    *v27 = 34;
    v18 = -1;
    if (!a2)
      return v18;
    goto LABEL_55;
  }
  if (!v19)
  {
LABEL_54:
    *__error() = 22;
    v24 = 1;
    if (!a2)
      return v18;
    goto LABEL_55;
  }
  v24 = 0;
  if (v9 == 45)
    v18 = -(uint64_t)v18;
  if (a2)
  {
LABEL_55:
    v25 = (char *)(v8 - 1);
    if (v24)
      v25 = (char *)a1;
    *a2 = v25;
  }
  return v18;
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  uint64_t v3;
  _xlocale *v4;
  _xlocale *v5;

  v3 = __locale_key;
  v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__global_locale;
  return strtoul_l(__str, __endptr, __base, v5);
}

uint64_t find_temp_path(uint64_t a1, const char *a2, unsigned int a3, int a4, uint64_t (*a5)(uint64_t, const char *, uint64_t, uint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  int *v15;
  uint64_t result;
  int v17;
  const char *v18;
  char *v19;
  const char *v20;
  int v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  int v26;
  const char *v27;
  stat v28;
  char v29;

  memset(&v28, 0, sizeof(v28));
  if ((a3 & 0x80000000) != 0)
    goto LABEL_8;
  v13 = 0;
  while (a2[v13++])
    ;
  if (v13 - 1 >= 1024)
  {
    v15 = __error();
    result = 0;
    v17 = 63;
LABEL_9:
    *v15 = v17;
    return result;
  }
  v18 = &a2[v13 - a3];
  v19 = (char *)(v18 - 2);
  if (v18 - 2 < a2 || (v20 = v18 - 1, _platform_strchr()))
  {
LABEL_8:
    v15 = __error();
    result = 0;
    v17 = 22;
    goto LABEL_9;
  }
  do
  {
    if (*v19 != 88)
      break;
    *v19-- = padchar[arc4random_uniform(0x3Eu)];
  }
  while (v19 >= a2);
  v27 = v19 + 1;
  _platform_memmove();
  if (v19 <= a2 || !a4)
  {
LABEL_17:
    v21 = a5(a1, a2, a6, a7);
    if (!v21)
      return 1;
    if (v21 == 2)
      return 0;
    if (v20 == v27)
    {
LABEL_27:
      v15 = __error();
      result = 0;
      v17 = 17;
    }
    else
    {
      v22 = &v29;
      v23 = (char *)v27;
      while (1)
      {
        v24 = _platform_memchr();
        if (!v24)
          break;
        if (*(_BYTE *)(v24 + 1))
          v25 = *(unsigned __int8 *)(v24 + 1);
        else
          v25 = 48;
        *v23 = v25;
        if (v25 != *v22)
          goto LABEL_17;
        ++v23;
        ++v22;
        if (v20 == v23)
          goto LABEL_27;
      }
      v15 = __error();
      result = 0;
      v17 = 5;
    }
    goto LABEL_9;
  }
  while (*v19 != 47)
  {
    if (--v19 <= a2)
      goto LABEL_17;
  }
  *v19 = 0;
  v26 = fstatat(a1, a2, &v28, 0);
  result = 0;
  *v19 = 47;
  if (!v26)
  {
    if ((v28.st_mode & 0xF000) != 0x4000)
    {
      v15 = __error();
      result = 0;
      v17 = 20;
      goto LABEL_9;
    }
    goto LABEL_17;
  }
  return result;
}

void *__cdecl rb_tree_find_node(rb_tree_t *a1, const void *a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t (*v5)(_QWORD, char *, const void *);
  char *v6;
  unsigned int v7;

  v2 = a1->opaque[0];
  if (!a1->opaque[0])
    return 0;
  v4 = a1->opaque[1];
  v5 = (uint64_t (*)(_QWORD, char *, const void *))v4[1];
  while (1)
  {
    v6 = (char *)v2 - v4[2];
    v7 = v5(v4[3], v6, a2);
    if (!v7)
      break;
    v2 = (_QWORD *)v2[v7 >> 31];
    if (!v2)
      return 0;
  }
  return v6;
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  arc4_init();
  ccrng_uniform();
  return 0;
}

void uuid_generate_random(uuid_t out)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD __buf[2];

  __buf[0] = 0;
  __buf[1] = 0;
  v2 = 0;
  v3 = 0;
  arc4random_buf(__buf, 0x10uLL);
  uuid_unpack((uint64_t)__buf, (uint64_t)&v2);
  LOWORD(v3) = v3 & 0x3FFF | 0x8000;
  HIWORD(v2) = HIWORD(v2) & 0xFFF | 0x4000;
  uuid_pack((uint64_t)&v2, (uint64_t)out);
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  BOOL v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  v8 = 0;
  v9 = 0;
  uuid_unpack((uint64_t)uu1, (uint64_t)&v10);
  uuid_unpack((uint64_t)uu2, (uint64_t)&v8);
  v3 = v10 >= v8;
  if ((_DWORD)v10 == (_DWORD)v8)
  {
    v3 = WORD2(v10) >= WORD2(v8);
    if (WORD2(v10) == WORD2(v8))
    {
      v3 = HIWORD(v10) >= HIWORD(v8);
      if (HIWORD(v10) == HIWORD(v8))
      {
        v3 = (unsigned __int16)v11 >= (unsigned __int16)v9;
        if ((unsigned __int16)v11 == (unsigned __int16)v9)
        {
          v4 = bswap32(*(unsigned int *)((char *)&v11 + 2));
          v5 = bswap32(*(unsigned int *)((char *)&v9 + 2));
          if (v4 == v5)
          {
            v4 = bswap32(HIWORD(v11)) >> 16;
            v6 = bswap32(HIWORD(v9));
            if (v4 == HIWORD(v6))
              return 0;
            v5 = HIWORD(v6);
          }
          v3 = v4 >= v5;
        }
      }
    }
  }
  if (v3)
    return 1;
  else
    return -1;
}

uint64_t uuid_unpack(uint64_t result, uint64_t a2)
{
  int v2;

  *(_DWORD *)a2 = bswap32(*(_DWORD *)result);
  *(_WORD *)(a2 + 4) = bswap32(*(unsigned __int16 *)(result + 4)) >> 16;
  *(_WORD *)(a2 + 6) = bswap32(*(unsigned __int16 *)(result + 6)) >> 16;
  *(_WORD *)(a2 + 8) = bswap32(*(unsigned __int16 *)(result + 8)) >> 16;
  v2 = *(_DWORD *)(result + 10);
  *(_WORD *)(a2 + 14) = *(_WORD *)(result + 14);
  *(_DWORD *)(a2 + 10) = v2;
  return result;
}

uint64_t uuid_pack(uint64_t result, uint64_t a2)
{
  int v2;

  *(_DWORD *)a2 = bswap32(*(_DWORD *)result);
  *(_WORD *)(a2 + 4) = bswap32(*(unsigned __int16 *)(result + 4)) >> 16;
  *(_WORD *)(a2 + 6) = bswap32(*(unsigned __int16 *)(result + 6)) >> 16;
  *(_WORD *)(a2 + 8) = bswap32(*(unsigned __int16 *)(result + 8)) >> 16;
  v2 = *(_DWORD *)(result + 10);
  *(_WORD *)(a2 + 14) = *(_WORD *)(result + 14);
  *(_DWORD *)(a2 + 10) = v2;
  return result;
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
  arc4_init();
  (*(void (**)(uint64_t, size_t, void *))rng)(rng, __nbytes, __buf);
}

void arc4_init()
{
  uint64_t v0;
  int v1;
  _OWORD v2[5];

  if (!rng)
  {
    v1 = 0;
    rng = ccrng();
    if (!rng)
      arc4_init_cold_1(&v0, v2);
  }
}

uint64_t _mkstemp_dprotected_np_action(int a1, char *a2, int *a3, int *a4)
{
  int v5;
  int v6;
  uint64_t result;

  if (a1 != -2)
    _mkstemp_dprotected_np_action_cold_1();
  v5 = open_dprotected_np(a2, 2562, *a3, a3[1], 384);
  if (v5 < 0)
  {
    if (*__error() == 17)
      return 1;
    else
      return 2;
  }
  else
  {
    v6 = v5;
    result = 0;
    *a4 = v6;
  }
  return result;
}

uint64_t _mktemp_action(int a1, const char *a2)
{
  stat v3;

  memset(&v3, 0, sizeof(v3));
  if (fstatat(a1, a2, &v3, 32))
    return 2 * (*__error() != 2);
  else
    return 1;
}

uint64_t _mkostemps_action(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int v5;
  int v6;
  uint64_t result;

  v5 = openat_NOCANCEL();
  if (v5 < 0)
  {
    if (*__error() == 17)
      return 1;
    else
      return 2;
  }
  else
  {
    v6 = v5;
    result = 0;
    *a4 = v6;
  }
  return result;
}

uint64_t _mkdtemp_action(int a1, const char *a2)
{
  uint64_t result;

  result = mkdirat(a1, a2, 0x1C0u);
  if ((_DWORD)result)
  {
    if (*__error() == 17)
      return 1;
    else
      return 2;
  }
  return result;
}

ssize_t recv(int a1, void *a2, size_t a3, int a4)
{
  return __recvfrom();
}

void uuid_unparse_upper(const uuid_t uu, uuid_string_t out)
{
  uint64_t v2;

  v2 = 0;
  do
  {
    if (v2 <= 0xA && ((1 << v2) & 0x550) != 0)
      *out++ = 45;
    *out = a0123456789abcd_0[(unint64_t)uu[v2] >> 4];
    out[1] = a0123456789abcd_0[uu[v2] & 0xF];
    out += 2;
    ++v2;
  }
  while ((_DWORD)v2 != 16);
  *out = 0;
}

uint64_t __memset_chk(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  if (a4 < a3)
    __chk_fail_overflow();
  return _platform_memset();
}

int putchar(int a1)
{
  FILE *v2;
  int w;
  int v4;
  unsigned __int8 *v5;

  v2 = __stdoutp;
  flockfile(__stdoutp);
  w = v2->_w;
  v2->_w = w - 1;
  v4 = a1;
  if (w < 1 && (a1 == 10 || w <= v2->_lbfsize))
  {
    v4 = __swbuf(a1, v2);
  }
  else
  {
    v5 = v2->_p++;
    *v5 = a1;
  }
  funlockfile(v2);
  return v4;
}

int fputc(int a1, FILE *a2)
{
  int w;
  int v5;
  unsigned __int8 *v6;

  flockfile(a2);
  w = a2->_w;
  a2->_w = w - 1;
  v5 = a1;
  if (w < 1 && (a1 == 10 || w <= a2->_lbfsize))
  {
    v5 = __swbuf(a1, a2);
  }
  else
  {
    v6 = a2->_p++;
    *v6 = a1;
  }
  funlockfile(a2);
  return v5;
}

FILE *__cdecl funopen(const void *a1, int (__cdecl *a2)(void *, char *, int), int (__cdecl *a3)(void *, const char *, int), fpos_t (__cdecl *a4)(void *, fpos_t, int), int (__cdecl *a5)(void *))
{
  __int16 v10;
  FILE *result;
  int *v12;

  if (a2)
  {
    if (a3)
      v10 = 16;
    else
      v10 = 4;
  }
  else
  {
    if (!a3)
    {
      v12 = __error();
      result = 0;
      *v12 = 22;
      return result;
    }
    v10 = 8;
  }
  result = (FILE *)__sfp(0);
  if (result)
  {
    result->_flags = v10;
    result->_file = -1;
    result->_seek = a4;
    result->_write = a3;
    result->_close = a5;
    result->_read = a2;
    result->_cookie = (void *)a1;
  }
  return result;
}

FILE *__cdecl fdopen(int a1, const char *a2)
{
  int *v4;
  FILE *result;
  int v6;
  int v7;
  __int16 v8;
  int v9;
  char v10;
  int v11;

  if (off_1EDF54E10)
    off_1EDF54E10(a2);
  v11 = 0;
  if (a1 >= 0x8000)
  {
    v4 = __error();
    result = 0;
    v6 = 24;
LABEL_5:
    *v4 = v6;
    return result;
  }
  v7 = __sflags((char *)a2, &v11);
  if (!v7)
    return 0;
  v8 = v7;
  v9 = fcntl_NOCANCEL();
  if (v9 < 0)
    return 0;
  v10 = v9;
  if ((v9 & 3) != 2 && (v9 & 3) != (v11 & 3))
  {
    v4 = __error();
    result = 0;
    v6 = 22;
    goto LABEL_5;
  }
  result = (FILE *)__sfp(1);
  if (result)
  {
    result->_flags = v8;
    if ((v10 & 8) == 0 && (v11 & 8) != 0)
      result->_flags = v8 | 0x100;
    result->_file = a1;
    result->_write = (int (__cdecl *)(void *, const char *, int))__swrite;
    result->_read = (int (__cdecl *)(void *, char *, int))__sread;
    result->_seek = (fpos_t (__cdecl *)(void *, fpos_t, int))__sseek;
    result->_cookie = result;
    result->_close = (int (__cdecl *)(void *))__sclose;
  }
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  int v3;
  __int16 v4;
  FILE *v5;
  unsigned int v6;
  int v8;

  if (off_1EDF54E10)
  {
    off_1EDF54E10(__filename);
    if (off_1EDF54E10)
      off_1EDF54E10(__mode);
  }
  v8 = 0;
  v3 = __sflags((char *)__mode, &v8);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (FILE *)__sfp(1);
  if (!v5)
    return v5;
  v6 = open_NOCANCEL();
  if ((v6 & 0x80000000) != 0)
  {
    __sfprelease((uint64_t)v5);
    return 0;
  }
  if (v6 < 0x8000)
  {
    v5->_file = v6;
    v5->_flags = v4;
    v5->_write = (int (__cdecl *)(void *, const char *, int))__swrite;
    v5->_read = (int (__cdecl *)(void *, char *, int))__sread;
    v5->_seek = (fpos_t (__cdecl *)(void *, fpos_t, int))__sseek;
    v5->_cookie = v5;
    v5->_close = (int (__cdecl *)(void *))__sclose;
    if ((v8 & 8) != 0)
      _sseek((uint64_t)v5, 0, 2);
  }
  else
  {
    v5->_flags = 0;
    close_NOCANCEL();
    v5 = 0;
    *__error() = 24;
  }
  return v5;
}

uint64_t __sfp(int a1)
{
  uint64_t v2;
  unint64_t v3;
  int *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t *v8;
  int v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  _OWORD *v14;
  unint64_t v16;

  pthread_once(&__sdidinit, __sinit);
  if (a1)
  {
    do
      v2 = __ldxr((unint64_t *)&__scounted);
    while (__stxr(v2 + 1, (unint64_t *)&__scounted));
    if (v2 >= sysconf(26))
    {
      do
        v7 = __ldxr((unint64_t *)&__scounted);
      while (__stxr(v7 - 1, (unint64_t *)&__scounted));
      v4 = __error();
      v5 = 0;
      v6 = 24;
      goto LABEL_9;
    }
    if (v2 <= -2)
    {
      do
        v3 = __ldxr((unint64_t *)&__scounted);
      while (__stxr(v3 - 1, (unint64_t *)&__scounted));
      v4 = __error();
      v5 = 0;
      v6 = 84;
LABEL_9:
      *v4 = v6;
      return v5;
    }
  }
  pthread_mutex_lock(&filelist_lock);
  v8 = &__sglue;
  do
  {
    v9 = *((_DWORD *)v8 + 2);
    if (v9 >= 1)
    {
      v5 = v8[2];
      v10 = v9 + 1;
      while (*(_WORD *)(v5 + 16))
      {
        v5 += 152;
        if (--v10 <= 1)
          goto LABEL_15;
      }
      goto LABEL_18;
    }
LABEL_15:
    v8 = (uint64_t *)*v8;
  }
  while (v8);
  pthread_mutex_unlock(&filelist_lock);
  v11 = (uint64_t *)moreglue(1);
  if (v11)
  {
    v12 = v11;
    pthread_mutex_lock(&filelist_lock);
    *lastglue = (uint64_t)v12;
    lastglue = v12;
    v5 = v12[2];
LABEL_18:
    *(_WORD *)(v5 + 16) = 1;
    pthread_mutex_unlock(&filelist_lock);
    *(_QWORD *)(v5 + 24) = 0;
    *(_DWORD *)(v5 + 32) = 0;
    *(_DWORD *)(v5 + 40) = 0;
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_WORD *)(v5 + 18) = -1;
    *(_QWORD *)(v5 + 88) = 0;
    *(_DWORD *)(v5 + 96) = 0;
    *(_QWORD *)(v5 + 120) = 0;
    *(_DWORD *)(v5 + 128) = 0;
    v13 = *(_QWORD *)(v5 + 104);
    *(_QWORD *)v13 = 0;
    *(_QWORD *)(v13 + 8) = 850045858;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_QWORD *)(v13 + 64) = 0;
    *(_BYTE *)(*(_QWORD *)(v5 + 104) + 72) &= 0xF8u;
    v14 = *(_OWORD **)(v5 + 104);
    v14[5] = 0u;
    v14[6] = 0u;
    v14[7] = 0u;
    v14[8] = 0u;
    v14[9] = 0u;
    v14[10] = 0u;
    v14[11] = 0u;
    v14[12] = 0u;
    *(_BYTE *)(*(_QWORD *)(v5 + 104) + 72) &= ~8u;
    *(_BYTE *)(*(_QWORD *)(v5 + 104) + 72) = *(_BYTE *)(*(_QWORD *)(v5 + 104) + 72) & 0xF7 | (8 * (a1 != 0));
    return v5;
  }
  if (!a1)
    return 0;
  v5 = 0;
  do
    v16 = __ldxr((unint64_t *)&__scounted);
  while (__stxr(v16 - 1, (unint64_t *)&__scounted));
  return v5;
}

uint64_t __sflags(char *a1, int *a2)
{
  int v3;
  char *v4;
  int v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int *v12;

  v4 = a1 + 1;
  v3 = *a1;
  switch(v3)
  {
    case 'a':
      v5 = 520;
      break;
    case 'r':
      v6 = 0;
      v5 = 0;
      result = 4;
      goto LABEL_8;
    case 'w':
      v5 = 1536;
      break;
    default:
      v12 = __error();
      result = 0;
      *v12 = 22;
      return result;
  }
  v6 = 1;
  result = 8;
LABEL_8:
  v8 = 1;
  if (a1[1] == 98)
  {
    v8 = 2;
    v4 = a1 + 2;
  }
  v9 = a1[v8];
  if (v9 == 43)
  {
    v10 = 1;
    if (v4[1] == 98)
      v10 = 2;
    v9 = v4[v10];
    v6 = 2;
    result = 16;
  }
  if (v9 == 120)
    v11 = v5 | 0x800;
  else
    v11 = v5;
  *a2 = v11 | v6;
  return result;
}

_DWORD *moreglue(int a1)
{
  _DWORD *result;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  _OWORD *v6;

  result = malloc_type_malloc(360 * a1 + 32, 0xA7ED9476uLL);
  if (result)
  {
    v3 = (unint64_t)(result + 6);
    *(_QWORD *)result = 0;
    if (((unint64_t)(result + 6) & 7) != 0)
      v3 = ((unint64_t)(result + 6) & 0xFFFFFFFFFFFFFFF8) + 8;
    result[2] = a1;
    *((_QWORD *)result + 2) = v3;
    if (a1 >= 1)
    {
      v4 = v3 + 152 * a1;
      v5 = a1 + 1;
      do
      {
        *(_QWORD *)(v3 + 144) = 0;
        *(_OWORD *)(v3 + 112) = 0uLL;
        *(_OWORD *)(v3 + 128) = 0uLL;
        *(_OWORD *)(v3 + 80) = 0uLL;
        *(_OWORD *)(v3 + 96) = 0uLL;
        *(_OWORD *)(v3 + 48) = 0uLL;
        *(_OWORD *)(v3 + 64) = 0uLL;
        *(_OWORD *)(v3 + 16) = 0uLL;
        *(_OWORD *)(v3 + 32) = 0uLL;
        *(_OWORD *)v3 = 0uLL;
        *(_QWORD *)(v3 + 104) = v4;
        *(_QWORD *)v4 = 0;
        *(_QWORD *)(v4 + 8) = 850045858;
        *(_QWORD *)(v4 + 64) = 0;
        *(_OWORD *)(v4 + 32) = 0uLL;
        *(_OWORD *)(v4 + 48) = 0uLL;
        *(_OWORD *)(v4 + 16) = 0uLL;
        *(_BYTE *)(*(_QWORD *)(v3 + 104) + 72) &= 0xF8u;
        v6 = *(_OWORD **)(v3 + 104);
        v6[11] = 0uLL;
        v6[12] = 0uLL;
        v6[9] = 0uLL;
        v6[10] = 0uLL;
        v6[7] = 0uLL;
        v6[8] = 0uLL;
        v6[5] = 0uLL;
        v6[6] = 0uLL;
        *(_BYTE *)(*(_QWORD *)(v3 + 104) + 72) &= ~8u;
        --v5;
        v3 += 152;
        v4 += 208;
      }
      while (v5 > 1);
    }
  }
  return result;
}

void rewind(FILE *a1)
{
  int v2;
  int v3;

  v2 = *__error();
  pthread_once(&__sdidinit, __sinit);
  flockfile(a1);
  _fseeko((uint64_t)a1, 0, 0);
  if (!v3)
    *__error() = v2;
  a1->_flags &= 0xFF9Fu;
  funlockfile(a1);
}

int fputs(const char *a1, FILE *a2)
{
  const char *v4;
  int v5;
  __sFILEX *extra;
  int v7;
  const char *v9;
  uint64_t v10;
  const char **v11;
  int v12;
  int v13;

  if (off_1EDF54E10)
    off_1EDF54E10(a1);
  if (off_1EDF54E20)
    off_1EDF54E20(a2, 152);
  if (a1)
    v4 = a1;
  else
    v4 = "(null)";
  v9 = v4;
  v5 = _platform_strlen();
  v10 = v5;
  v11 = &v9;
  v12 = 1;
  v13 = v5;
  flockfile(a2);
  extra = a2->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0)
    *((_BYTE *)extra + 72) |= 7u;
  v7 = __sfvwrite((uint64_t)a2, (uint64_t)&v11);
  funlockfile(a2);
  if (v7)
    return v7;
  else
    return v10;
}

int fgetpos(FILE *a1, fpos_t *a2)
{
  off_t v3;

  v3 = ftello(a1);
  *a2 = v3;
  if (v3 == -1)
    return -1;
  else
    return 0;
}

int feof(FILE *a1)
{
  int v2;

  flockfile(a1);
  v2 = ((unsigned __int16)a1->_flags >> 5) & 1;
  funlockfile(a1);
  return v2;
}

int fflush(FILE *a1)
{
  int v2;

  if (!a1)
    return _fwalk((unsigned int (*)(uint64_t))sflush_locked);
  if (off_1EDF54E20)
    off_1EDF54E20(a1, 152);
  flockfile(a1);
  v2 = __sflush((uint64_t)a1);
  funlockfile(a1);
  return v2;
}

int fileno(FILE *a1)
{
  int file;

  flockfile(a1);
  file = a1->_file;
  funlockfile(a1);
  return file;
}

int fclose(FILE *a1)
{
  int v2;
  int v3;
  int (__cdecl *close)(void *);
  FILE *base;
  unsigned __int8 *v6;

  if (off_1EDF54E20)
    off_1EDF54E20(a1, 152);
  pthread_once(&__sdidinit, __sinit);
  if (!a1)
  {
    v2 = -1;
    v3 = 14;
LABEL_22:
    *__error() = v3;
    return v2;
  }
  if (!a1->_flags)
  {
    v2 = -1;
    v3 = 9;
    goto LABEL_22;
  }
  flockfile(a1);
  v2 = __sflush((uint64_t)a1);
  if (v2 < 0)
    v3 = *__error();
  else
    v3 = 0;
  close = a1->_close;
  if (close && (((uint64_t (*)(void *))close)(a1->_cookie) & 0x80000000) != 0)
  {
    v3 = *__error();
    v2 = -1;
  }
  if ((a1->_flags & 0x80) != 0)
    free(a1->_bf._base);
  base = (FILE *)a1->_ub._base;
  if (base)
  {
    if (base != (FILE *)a1->_ubuf)
      free(base);
    a1->_ub._base = 0;
  }
  v6 = a1->_lb._base;
  if (v6)
  {
    free(v6);
    a1->_lb._base = 0;
  }
  a1->_file = -1;
  *(_QWORD *)&a1->_r = 0;
  funlockfile(a1);
  __sfprelease((uint64_t)a1);
  if (v3)
    goto LABEL_22;
  return v2;
}

uint64_t __sflush(uint64_t a1)
{
  unint64_t v1;
  __int16 v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  _OWORD *v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  __int16 v13;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
    return 0;
  v3 = *(_WORD *)(a1 + 16);
  if ((v3 & 4) != 0)
  {
    if (*(_QWORD *)(a1 + 72))
    {
      v6 = *(int *)(a1 + 8);
      if ((int)v6 >= 1)
      {
        if (_sseek(a1, -v6, 1) == -1)
        {
          if (*__error() == 29)
            return 0;
          else
            return 0xFFFFFFFFLL;
        }
        else
        {
          v7 = *(void **)(a1 + 88);
          if (v7)
          {
            if (v7 != (void *)(a1 + 116))
              free(v7);
            *(_QWORD *)(a1 + 88) = 0;
          }
          result = 0;
          *(_QWORD *)a1 = *(_QWORD *)(a1 + 24);
          *(_WORD *)(a1 + 16) &= ~0x20u;
          *(_DWORD *)(a1 + 8) = 0;
          v9 = *(_OWORD **)(a1 + 104);
          v9[11] = 0u;
          v9[12] = 0u;
          v9[9] = 0u;
          v9[10] = 0u;
          v9[7] = 0u;
          v9[8] = 0u;
          v9[5] = 0u;
          v9[6] = 0u;
        }
        return result;
      }
    }
    return 0;
  }
  if ((v3 & 8) == 0)
    return 0;
  v4 = (*(_DWORD *)a1 - v1);
  *(_QWORD *)a1 = v1;
  v5 = (v3 & 3) != 0 ? 0 : *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 12) = v5;
  if ((int)v4 < 1)
    return 0;
  while (1)
  {
    v10 = _swrite(a1, v1, v4);
    if (v10 <= 0)
      break;
    v1 += v10;
    v11 = __OFSUB__((_DWORD)v4, v10);
    v4 = (v4 - v10);
    if (((int)v4 < 0) ^ v11 | ((_DWORD)v4 == 0))
      return 0;
  }
  v12 = *(_QWORD *)a1;
  if (v1 > *(_QWORD *)a1)
  {
    _platform_memmove();
    v12 = *(_QWORD *)a1;
  }
  *(_QWORD *)a1 = v12 + v4;
  v13 = *(_WORD *)(a1 + 16);
  if ((v13 & 2) == 0)
    *(_DWORD *)(a1 + 12) -= v4;
  *(_WORD *)(a1 + 16) = v13 | 0x40;
  return 0xFFFFFFFFLL;
}

uint64_t __sfprelease(uint64_t a1)
{
  uint64_t v2;
  char v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = *(_BYTE *)(v2 + 72);
  if ((v3 & 8) != 0)
  {
    do
      v4 = __ldxr((unint64_t *)&__scounted);
    while (__stxr(v4 - 1, (unint64_t *)&__scounted));
    *(_BYTE *)(v2 + 72) = v3 & 0xF7;
    v2 = *(_QWORD *)(a1 + 104);
  }
  pthread_mutex_destroy((pthread_mutex_t *)(v2 + 8));
  pthread_mutex_lock(&filelist_lock);
  *(_WORD *)(a1 + 16) = 0;
  return pthread_mutex_unlock(&filelist_lock);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  size_t v4;
  size_t v6;
  __sFILEX *extra;
  size_t v10;
  int v11;
  uint64_t v12;
  const void *v14;
  uint64_t v15;
  const void **v16;
  int v17;
  int v18;

  v4 = __nitems * __size;
  if (!(__nitems * __size))
    return 0;
  v6 = __nitems;
  v14 = 0;
  v15 = 0;
  v16 = &v14;
  v17 = 1;
  if (off_1EDF54E20)
    off_1EDF54E20(__stream, 152);
  flockfile(__stream);
  extra = __stream->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0)
    *((_BYTE *)extra + 72) |= 7u;
  v10 = v4;
  while (1)
  {
    v11 = v10 >> 31 ? 2147482624 : v10;
    v12 = v11;
    v14 = __ptr;
    v15 = v11;
    v18 = v11;
    if (off_1EDF54E08)
      off_1EDF54E08(__ptr, v11);
    if (__sfvwrite((uint64_t)__stream, (uint64_t)&v16))
      break;
    __ptr = (char *)__ptr + v12;
    v10 -= v12;
    if (!v10)
      goto LABEL_17;
  }
  v6 = (v4 + v12 - (v10 + v18)) / __size;
LABEL_17:
  funlockfile(__stream);
  return v6;
}

int fseeko(FILE *__stream, off_t a2, int __whence)
{
  uint64_t v3;
  int v6;
  int v7;
  int v8;

  v3 = *(_QWORD *)&__whence;
  v6 = *__error();
  pthread_once(&__sdidinit, __sinit);
  flockfile(__stream);
  _fseeko((uint64_t)__stream, a2, v3);
  v8 = v7;
  funlockfile(__stream);
  if (!v8)
    *__error() = v6;
  return v8;
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  char *v5;
  __sFILEX *extra;
  char *v7;
  unsigned int v8;
  unsigned int r;
  unsigned __int8 *p;
  signed int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2 < 1)
    return 0;
  v5 = a1;
  if (off_1EDF54E20)
  {
    off_1EDF54E20(a1, a2);
    if (off_1EDF54E20)
      off_1EDF54E20(a3, 152);
  }
  flockfile(a3);
  extra = a3->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0)
    *((_BYTE *)extra + 72) |= 7u;
  v7 = v5;
  v8 = a2 - 1;
  if (a2 == 1)
    goto LABEL_20;
  v7 = v5;
  while (1)
  {
    r = a3->_r;
    if (r)
      goto LABEL_12;
    if (__srefill((uint64_t)a3))
      break;
    r = a3->_r;
LABEL_12:
    p = a3->_p;
    if (r >= v8)
      v11 = v8;
    else
      v11 = r;
    v12 = v11;
    v13 = _platform_memchr();
    if (v13)
    {
      v14 = v13 + 1 - (_QWORD)p;
      a3->_r = r - v14;
      a3->_p = (unsigned __int8 *)(v13 + 1);
      _platform_memmove();
      v7 += v14;
      goto LABEL_20;
    }
    a3->_r = r - v12;
    a3->_p = &p[v12];
    _platform_memmove();
    v7 += v12;
    v8 -= v12;
    if (!v8)
      goto LABEL_20;
  }
  if (v7 != v5)
  {
LABEL_20:
    *v7 = 0;
    goto LABEL_21;
  }
  v5 = 0;
LABEL_21:
  funlockfile(a3);
  return v5;
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v6;
  int v7;
  int v8;

  v3 = *(_QWORD *)&a3;
  v6 = *__error();
  pthread_once(&__sdidinit, __sinit);
  flockfile(a1);
  _fseeko((uint64_t)a1, a2, v3);
  v8 = v7;
  funlockfile(a1);
  if (!v8)
    *__error() = v6;
  return v8;
}

off_t ftello(FILE *__stream)
{
  int v2;
  off_t result;
  off_t v4;

  v4 = 0;
  flockfile(__stream);
  v2 = _ftello((uint64_t)__stream, &v4);
  funlockfile(__stream);
  if (v2)
    return -1;
  result = v4;
  if (v4 < 0)
  {
    *__error() = 29;
    return -1;
  }
  return result;
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  size_t v8;

  if (off_1EDF54E20)
    off_1EDF54E20(__stream, 152);
  flockfile(__stream);
  v8 = __fread((uint64_t)__ptr, __size, __nitems, (uint64_t)__stream);
  funlockfile(__stream);
  return v8;
}

void funlockfile(FILE *a1)
{
  int v2;

  v2 = *__error();
  pthread_mutex_unlock((pthread_mutex_t *)((char *)a1->_extra + 8));
  *__error() = v2;
}

void flockfile(FILE *a1)
{
  int v2;

  v2 = *__error();
  pthread_mutex_lock((pthread_mutex_t *)((char *)a1->_extra + 8));
  *__error() = v2;
}

unint64_t __fread(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;

  v7 = a1;
  v8 = a3 * a2;
  v9 = a3 * a2;
  if (off_1EDF54E20)
    off_1EDF54E20(a1, a3 * a2);
  if (!v9)
    return 0;
  v10 = *(_QWORD *)(a4 + 104);
  if ((*(_BYTE *)(v10 + 72) & 7) == 0)
    *(_BYTE *)(v10 + 72) |= 7u;
  v24 = v8;
  v25 = a3;
  if ((*(_DWORD *)(a4 + 8) & 0x80000000) != 0)
    *(_DWORD *)(a4 + 8) = 0;
  v11 = (__int128 *)(a4 + 24);
  while (2)
  {
    if (v9 >> 31)
      v12 = 2147482624;
    else
      v12 = v9;
    v13 = v12;
    v14 = v7;
    while (1)
    {
      v15 = *(int *)(a4 + 8);
      if (v13 <= (int)v15)
        break;
      v16 = *(_QWORD *)a4;
      _platform_memmove();
      *(_QWORD *)a4 = v16 + v15;
      v14 += v15;
      v13 -= v15;
      v17 = __srefill0(a4);
      if (v17 > 0)
        break;
      if (v17)
      {
LABEL_26:
        if (v13)
          return (v24 - v9 + v12 - v13) / a2;
        goto LABEL_30;
      }
    }
    if ((*(_WORD *)(a4 + 16) & 0x82) != 0 && v13 > *(_DWORD *)(a4 + 32))
    {
      v26 = *v11;
      *(_QWORD *)(a4 + 24) = v14;
      *(_DWORD *)(a4 + 32) = v13;
      if (v13 < 1)
      {
LABEL_23:
        *v11 = v26;
        v21 = v13 - (v13 - 1) / *(_DWORD *)(a4 + 32) * *(_DWORD *)(a4 + 32);
        _platform_memmove();
        *(_QWORD *)a4 = *(_QWORD *)(a4 + 24) + v21;
        *(_DWORD *)(a4 + 8) = 0;
      }
      else
      {
        while (!__srefill1(a4))
        {
          v18 = *(int *)(a4 + 8);
          *(_QWORD *)(a4 + 24) += v18;
          v19 = *(_DWORD *)(a4 + 32);
          v20 = __OFSUB__(v19, (_DWORD)v18);
          LODWORD(v18) = v19 - v18;
          *(_DWORD *)(a4 + 32) = v18;
          if (((int)v18 < 0) ^ v20 | ((_DWORD)v18 == 0))
            goto LABEL_23;
        }
        v13 = *(_DWORD *)(a4 + 32);
        *v11 = v26;
        *(_QWORD *)a4 = *(_QWORD *)(a4 + 24);
        if (v13)
          return (v24 - v9 + v12 - v13) / a2;
      }
    }
    else
    {
      while (1)
      {
        v22 = *(int *)(a4 + 8);
        if (v13 <= (int)v22)
          break;
        _platform_memmove();
        *(_QWORD *)a4 += v22;
        v14 += v22;
        v13 -= v22;
        if (__srefill1(a4))
          goto LABEL_26;
      }
      _platform_memmove();
      *(_DWORD *)(a4 + 8) -= v13;
      *(_QWORD *)a4 += v13;
    }
LABEL_30:
    v7 += v12;
    v9 -= v12;
    if (v9)
      continue;
    return v25;
  }
}

double _fseeko(uint64_t a1, uint64_t a2, uint64_t a3)
{
  off_t (*v3)(uint64_t, off_t, int);
  uint64_t v4;
  uint64_t v5;
  double result;
  int v8;
  int *v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  _OWORD *v26;
  stat v27;
  unint64_t v28;

  v28 = 0;
  memset(&v27, 0, sizeof(v27));
  v3 = *(off_t (**)(uint64_t, off_t, int))(a1 + 72);
  if (!v3)
    goto LABEL_11;
  v4 = a3;
  v5 = a2;
  if (!(_DWORD)a3)
  {
    if (a2 < 0)
      goto LABEL_36;
    goto LABEL_13;
  }
  if ((_DWORD)a3 == 2)
  {
LABEL_13:
    v28 = 0;
    v8 = 1;
    goto LABEL_14;
  }
  if ((_DWORD)a3 != 1)
    goto LABEL_36;
  if (_ftello(a1, (int64_t *)&v28))
    return result;
  if ((v28 & 0x8000000000000000) != 0)
  {
LABEL_11:
    v9 = __error();
    v10 = 29;
LABEL_37:
    *v9 = v10;
    return result;
  }
  if (v5 >= 1 && v28 > (v5 ^ 0x7FFFFFFFFFFFFFFFuLL))
  {
LABEL_29:
    v9 = __error();
    v10 = 84;
    goto LABEL_37;
  }
  v5 += v28;
  if (v5 < 0)
    goto LABEL_36;
  v4 = 0;
  v8 = 0;
LABEL_14:
  if (!*(_QWORD *)(a1 + 24))
    __smakebuf(a1);
  v11 = *(_WORD *)(a1 + 16);
  if ((v11 & 0x81A) != 0)
    goto LABEL_57;
  if ((*(_WORD *)(a1 + 16) & 0x400) == 0)
  {
    if (v3 != __sseek || *(__int16 *)(a1 + 18) < 0)
      goto LABEL_19;
    if (fstat(*(unsigned __int16 *)(a1 + 18), &v27))
    {
      v11 = *(_WORD *)(a1 + 16);
LABEL_19:
      *(_WORD *)(a1 + 16) = v11 | 0x800;
      goto LABEL_57;
    }
    v11 = *(_WORD *)(a1 + 16);
    if ((v27.st_mode & 0xF000) != 0x8000)
      goto LABEL_19;
    *(_DWORD *)(a1 + 136) = v27.st_blksize;
    *(_WORD *)(a1 + 16) = v11 | 0x400;
  }
  v12 = v5;
  if ((_DWORD)v4)
  {
    if (fstat(*(__int16 *)(a1 + 18), &v27))
      goto LABEL_57;
    if (v5 >= 1 && v27.st_size > (v5 ^ 0x7FFFFFFFFFFFFFFFLL))
      goto LABEL_29;
    v12 = v27.st_size + v5;
    if (v27.st_size + v5 < 0)
    {
LABEL_36:
      v9 = __error();
      v10 = 22;
      goto LABEL_37;
    }
  }
  if (!v8 || !_ftello(a1, (int64_t *)&v28))
  {
    v13 = *(_WORD *)(a1 + 16);
    if ((v13 & 0x2000) == 0)
    {
      v14 = *(void **)(a1 + 88);
      v15 = *(_QWORD *)(a1 + 24);
      if (v14)
      {
        v16 = **(_QWORD **)(a1 + 104) - v15;
        v17 = v28 + *(int *)(a1 + 8) - v16;
        v18 = (int *)(a1 + 112);
      }
      else
      {
        v16 = *(_QWORD *)a1 - v15;
        v17 = v28 - v16;
        v18 = (int *)(a1 + 8);
      }
      v19 = *v18;
      v28 = v17;
      v20 = v12 - v17;
      if (v12 >= v17)
      {
        v21 = v16 + v19;
        if (v12 < (unint64_t)(v17 + v21))
        {
          *(_QWORD *)a1 = v15 + v20;
          *(_DWORD *)(a1 + 8) = v21 - v20;
          if (v14)
          {
            if (v14 != (void *)(a1 + 116))
            {
              free(v14);
              v13 = *(_WORD *)(a1 + 16);
            }
            *(_QWORD *)(a1 + 88) = 0;
          }
          goto LABEL_54;
        }
      }
    }
    v28 = v12 & -*(_DWORD *)(a1 + 136);
    if (_sseek(a1, v28, 0) == -1)
      goto LABEL_57;
    *(_DWORD *)(a1 + 8) = 0;
    *(_QWORD *)a1 = *(_QWORD *)(a1 + 24);
    v22 = *(void **)(a1 + 88);
    if (v22)
    {
      if (v22 != (void *)(a1 + 116))
        free(v22);
      *(_QWORD *)(a1 + 88) = 0;
    }
    v23 = v12 - v28;
    if (!v23)
    {
LABEL_53:
      v13 = *(_WORD *)(a1 + 16);
LABEL_54:
      *(_WORD *)(a1 + 16) = v13 & 0xFFDF;
LABEL_64:
      v26 = *(_OWORD **)(a1 + 104);
      result = 0.0;
      v26[11] = 0u;
      v26[12] = 0u;
      v26[9] = 0u;
      v26[10] = 0u;
      v26[7] = 0u;
      v26[8] = 0u;
      v26[5] = 0u;
      v26[6] = 0u;
      return result;
    }
    if (!__srefill(a1))
    {
      v24 = *(int *)(a1 + 8);
      if (v23 <= v24)
      {
        *(_QWORD *)a1 += v23;
        *(_DWORD *)(a1 + 8) = v24 - v23;
        goto LABEL_53;
      }
    }
  }
LABEL_57:
  if (!__sflush(a1) && _sseek(a1, v5, v4) != -1)
  {
    v25 = *(void **)(a1 + 88);
    if (v25)
    {
      if (v25 != (void *)(a1 + 116))
        free(v25);
      *(_QWORD *)(a1 + 88) = 0;
    }
    *(_QWORD *)a1 = *(_QWORD *)(a1 + 24);
    *(_WORD *)(a1 + 16) &= ~0x20u;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_64;
  }
  return result;
}

uint64_t _ftello(uint64_t a1, int64_t *a2)
{
  int64_t v4;
  int *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_QWORD *)(a1 + 72))
  {
    if (__ftell_conformance_fix)
    {
      if ((*(_WORD *)(a1 + 16) & 0xC) == 8
        && *(_QWORD *)a1
        && (*(_WORD *)(a1 + 16) & 0x100) != 0
        && (uint64_t)(*(_QWORD *)a1 - *(_QWORD *)(a1 + 24)) >= 1)
      {
        v4 = _sseek(a1, 0, 2);
        if (v4 == -1)
          return 1;
LABEL_18:
        v8 = *(_WORD *)(a1 + 16);
        if ((v8 & 4) != 0)
        {
          v10 = *(_QWORD *)(a1 + 88);
          v11 = 112;
          if (!v10)
            v11 = 8;
          v4 -= *(int *)(a1 + v11);
          if (v4 < 0)
          {
            *(_WORD *)(a1 + 16) = v8 | 0x40;
            v5 = __error();
            v6 = 5;
            goto LABEL_10;
          }
          if (v10)
            v4 -= *(int *)(a1 + 8);
        }
        else if ((v8 & 8) != 0)
        {
          if (*(_QWORD *)a1)
          {
            v9 = *(_QWORD *)a1 - *(_QWORD *)(a1 + 24);
            if (!__ftell_conformance_fix || v9)
            {
              if (v4 > (v9 ^ 0x7FFFFFFFFFFFFFFFuLL))
              {
                v5 = __error();
                v6 = 84;
                goto LABEL_10;
              }
              v4 += v9;
            }
          }
        }
        v7 = 0;
        *a2 = v4;
        return v7;
      }
      if ((*(_WORD *)(a1 + 16) & 0x1000) == 0)
      {
LABEL_12:
        v7 = 1;
        v4 = _sseek(a1, 0, 1);
        if (v4 == -1)
          return v7;
        goto LABEL_18;
      }
    }
    else
    {
      if (__sflush(a1))
        return 1;
      if ((*(_WORD *)(a1 + 16) & 0x1000) == 0)
        goto LABEL_12;
    }
    v4 = *(_QWORD *)(a1 + 144);
    goto LABEL_18;
  }
  v5 = __error();
  v6 = 29;
LABEL_10:
  *v5 = v6;
  return 1;
}

uint64_t _sseek(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  void *v10;

  v6 = *__error();
  *__error() = 0;
  v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a1 + 72))(*(_QWORD *)(a1 + 48), a2, a3);
  v8 = *__error();
  if (*__error())
  {
    if ((v7 & 0x8000000000000000) == 0)
      goto LABEL_3;
  }
  else
  {
    *__error() = v6;
    if ((v7 & 0x8000000000000000) == 0)
    {
LABEL_3:
      if ((*(_WORD *)(a1 + 16) & 0x400) != 0)
      {
        *(_WORD *)(a1 + 16) |= 0x1000u;
        *(_QWORD *)(a1 + 144) = v7;
      }
      return v7;
    }
  }
  if (v8 == 29)
  {
    *(_WORD *)(a1 + 16) &= ~0x100u;
  }
  else if (!v8)
  {
    if (a2 || (_DWORD)a3 != 1)
    {
      v10 = *(void **)(a1 + 88);
      if (v10)
      {
        if (v10 != (void *)(a1 + 116))
          free(v10);
        *(_QWORD *)(a1 + 88) = 0;
      }
      *(_QWORD *)a1 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 8) = 0;
      v9 = *(_WORD *)(a1 + 16) & 0xFFDF;
    }
    else
    {
      v9 = *(_WORD *)(a1 + 16);
    }
    *(_WORD *)(a1 + 16) = v9 | 0x40;
    *__error() = 22;
  }
  *(_WORD *)(a1 + 16) &= ~0x1000u;
  return -1;
}

off_t __sseek(uint64_t a1, off_t a2, int a3)
{
  return lseek(*(__int16 *)(a1 + 18), a2, a3);
}

uint64_t __srefill1(uint64_t a1)
{
  int v2;
  __int16 v3;
  __int16 v5;

  *(_QWORD *)a1 = *(_QWORD *)(a1 + 24);
  v2 = _sread(a1);
  *(_DWORD *)(a1 + 8) = v2;
  v3 = *(_WORD *)(a1 + 16) & 0xDFFF;
  *(_WORD *)(a1 + 16) = v3;
  if (v2 > 0)
    return 0;
  if (v2)
  {
    *(_DWORD *)(a1 + 8) = 0;
    v5 = 64;
  }
  else
  {
    v5 = 32;
  }
  *(_WORD *)(a1 + 16) = v3 | v5;
  return 0xFFFFFFFFLL;
}

uint64_t _sread(uint64_t a1)
{
  uint64_t result;
  __int16 v3;
  uint64_t v4;

  result = (*(uint64_t (**)(_QWORD))(a1 + 64))(*(_QWORD *)(a1 + 48));
  if ((int)result < 1)
  {
    if ((result & 0x80000000) == 0)
      return result;
    v3 = *(_WORD *)(a1 + 16);
  }
  else
  {
    v3 = *(_WORD *)(a1 + 16);
    if ((v3 & 0x1000) == 0)
      return result;
    v4 = *(_QWORD *)(a1 + 144);
    if (v4 <= (result ^ 0x7FFFFFFFFFFFFFFFLL))
    {
      *(_QWORD *)(a1 + 144) = v4 + result;
      return result;
    }
  }
  *(_WORD *)(a1 + 16) = v3 & 0xEFFF;
  return result;
}

uint64_t __sread()
{
  return read_NOCANCEL();
}

uint64_t __srefill(uint64_t a1)
{
  uint64_t result;

  result = __srefill0(a1);
  if ((int)result >= 1)
    return __srefill1(a1);
  return result;
}

uint64_t __srefill0(uint64_t a1)
{
  uint64_t v2;
  __int16 v3;
  void *v4;
  int v5;
  uint64_t result;
  __int16 v7;
  int v8;

  pthread_once(&__sdidinit, __sinit);
  v2 = *(_QWORD *)(a1 + 104);
  if ((*(_BYTE *)(v2 + 72) & 7) == 0)
    *(_BYTE *)(v2 + 72) |= 7u;
  *(_DWORD *)(a1 + 8) = 0;
  v3 = *(_WORD *)(a1 + 16);
  if ((v3 & 0x20) != 0)
    return 0xFFFFFFFFLL;
  if ((v3 & 4) != 0)
  {
    v4 = *(void **)(a1 + 88);
    if (v4)
    {
      if (v4 != (void *)(a1 + 116))
        free(v4);
      *(_QWORD *)(a1 + 88) = 0;
      v5 = *(_DWORD *)(a1 + 112);
      *(_DWORD *)(a1 + 8) = v5;
      if (v5)
      {
        result = 0;
        *(_QWORD *)a1 = **(_QWORD **)(a1 + 104);
        return result;
      }
    }
  }
  else
  {
    if ((v3 & 0x10) == 0)
    {
      *__error() = 9;
      *(_WORD *)(a1 + 16) |= 0x40u;
      return 0xFFFFFFFFLL;
    }
    if ((v3 & 8) != 0)
    {
      if (__sflush(a1))
        return 0xFFFFFFFFLL;
      v3 = *(_WORD *)(a1 + 16) & 0xFFF7;
      *(_DWORD *)(a1 + 12) = 0;
      *(_DWORD *)(a1 + 40) = 0;
    }
    *(_WORD *)(a1 + 16) = v3 | 4;
  }
  if (!*(_QWORD *)(a1 + 24))
    __smakebuf(a1);
  v7 = *(_WORD *)(a1 + 16);
  if ((v7 & 3) != 0)
  {
    *(_WORD *)(a1 + 16) = v7 | 0x8000;
    _fwalk((unsigned int (*)(uint64_t))lflush);
    v8 = *(unsigned __int16 *)(a1 + 16);
    *(_WORD *)(a1 + 16) = v8 & 0x7FFF;
    if ((~v8 & 9) == 0)
      __sflush(a1);
  }
  return 1;
}

uint64_t __sclose()
{
  return close_NOCANCEL();
}

uint64_t __smakebuf(uint64_t result)
{
  uint64_t v1;
  __int16 v2;
  int v3;
  char *v4;
  char v5;
  unsigned int v6;
  __int16 v8;
  int v9;
  unint64_t v10;
  int v11;
  __int16 v12;
  size_t v13;
  size_t v14;
  int v15;
  size_t v16;
  int v17;
  size_t size;

  v1 = result;
  if ((*(_WORD *)(result + 16) & 2) != 0)
    goto LABEL_56;
  size = 0;
  v17 = 0;
  result = __swhatbuf(result, (uint64_t *)&size, &v17);
  v2 = result;
  v3 = *(unsigned __int16 *)(v1 + 18);
  if ((v3 & 0x8000) != 0)
    goto LABEL_48;
  if (__getevp_predicate != -1)
    result = _os_once();
  switch(v3)
  {
    case 2:
      v4 = &__stderr_evp;
      goto LABEL_11;
    case 1:
      v4 = &__stdout_evp;
LABEL_11:
      v5 = *v4;
      if (*v4)
        goto LABEL_13;
      break;
    case 0:
      v4 = &__stdin_evp;
      goto LABEL_11;
  }
  v4 = &__fallback_evp;
  v5 = __fallback_evp;
  if (!__fallback_evp)
    goto LABEL_40;
LABEL_13:
  v6 = v5 - 66;
  if (v6 <= 0x33)
  {
    if (((1 << v6) & 0x1000000011) != 0)
    {
      v8 = 0;
      ++v4;
      goto LABEL_23;
    }
    if (((1 << v6) & 0x40000000400) != 0)
    {
      ++v4;
      v8 = 1;
      goto LABEL_23;
    }
    if (((1 << v6) & 0x8000000080000) != 0)
      goto LABEL_18;
  }
  if (v5 == 48)
  {
LABEL_18:
    if (!*++v4)
    {
      v8 = 2;
      goto LABEL_23;
    }
LABEL_40:
    v12 = 0;
    goto LABEL_44;
  }
  v8 = 0;
LABEL_23:
  v9 = *v4;
  if ((v9 - 48) > 9)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v10 = 10 * v10 + (char)v9 - 48;
      v11 = *++v4;
      LOBYTE(v9) = v11;
    }
    while ((v11 - 48) < 0xA);
  }
  v12 = 0;
  if ((char)v9 <= 74)
  {
    if ((_BYTE)v9 && (char)v9 != 66)
      goto LABEL_44;
  }
  else if ((char)v9 == 75 || (char)v9 == 107)
  {
    ++v4;
    v10 <<= 10;
  }
  else
  {
    if ((char)v9 != 77)
      goto LABEL_44;
    ++v4;
    v10 <<= 20;
  }
  if (*v4 == 66)
    ++v4;
  if (*v4)
    goto LABEL_40;
  v17 = 0;
  v13 = 4096;
  if (v10 < 0x1000)
    v13 = v10;
  size = v13;
  v12 = v8;
LABEL_44:
  v2 |= v12;
  if ((v2 & 2) == 0)
  {
    v14 = size;
    if (!size)
      v14 = 1024;
    size = v14;
LABEL_48:
    if (v17)
    {
      v15 = isatty(*(__int16 *)(v1 + 18));
      v16 = size;
      if (v15)
      {
        v2 |= 1u;
        if (size > 0x1000)
        {
          v16 = 4096;
          *(_DWORD *)(v1 + 136) = 4096;
        }
      }
    }
    else
    {
      v16 = size;
    }
    result = (uint64_t)malloc_type_malloc(v16, 0x1F05CC72uLL);
    if (result)
    {
      __cleanup = 1;
      *(_QWORD *)v1 = result;
      *(_QWORD *)(v1 + 24) = result;
      *(_DWORD *)(v1 + 32) = v16;
      *(_WORD *)(v1 + 16) |= v2 | 0x80;
      return result;
    }
  }
  *(_WORD *)(v1 + 16) |= 2u;
LABEL_56:
  *(_QWORD *)v1 = v1 + 119;
  *(_QWORD *)(v1 + 24) = v1 + 119;
  *(_DWORD *)(v1 + 32) = 1;
  return result;
}

uint64_t __swhatbuf(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  int v5;
  int v7;
  uint64_t st_blksize;
  uint64_t result;
  stat v10;

  v5 = *(__int16 *)(a1 + 18);
  if (v5 < 0 || (memset(&v10, 0, sizeof(v10)), fstat((unsigned __int16)v5, &v10) < 0))
  {
    *a3 = 0;
    goto LABEL_12;
  }
  v7 = v10.st_mode & 0xF000;
  *a3 = v7 == 0x2000;
  if (v10.st_blksize <= 0)
  {
LABEL_12:
    *a2 = 1024;
    return 2048;
  }
  if (v10.st_blksize >= 4096)
    st_blksize = 4096;
  else
    st_blksize = v10.st_blksize;
  *a2 = st_blksize;
  *(_DWORD *)(a1 + 136) = st_blksize;
  result = 2048;
  if (v7 == 0x8000)
  {
    if (*(off_t (**)(uint64_t, off_t, int))(a1 + 72) == __sseek)
      return 1024;
    else
      return 2048;
  }
  return result;
}

uint64_t _swrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t result;
  int v8;
  uint64_t v9;

  if ((*(_WORD *)(a1 + 16) & 0x100) != 0)
  {
    v6 = *__error();
    if (_sseek(a1, 0, 2) == -1 && (*(_WORD *)(a1 + 16) & 0x400) != 0)
      return 0xFFFFFFFFLL;
    *__error() = v6;
  }
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a1 + 80))(*(_QWORD *)(a1 + 48), a2, a3);
  v8 = *(unsigned __int16 *)(a1 + 16);
  if ((result & 0x80000000) != 0
    || (~v8 & 0x1100) != 0
    || (v9 = *(_QWORD *)(a1 + 144), v9 > (result ^ 0x7FFFFFFFFFFFFFFFLL)))
  {
    *(_WORD *)(a1 + 16) = v8 & 0xEFFF;
  }
  else
  {
    *(_QWORD *)(a1 + 144) = v9 + result;
  }
  return result;
}

uint64_t __swrite()
{
  return write_NOCANCEL();
}

uint64_t eofread()
{
  return 0;
}

uint64_t eofread_0()
{
  return 0;
}

int isatty(int a1)
{
  int result;
  int *v3;
  int v4;
  termios v5;

  v4 = 0;
  memset(&v5, 0, sizeof(v5));
  if (ioctl(a1, 0x4004667AuLL, &v4) == -1)
    return tcgetattr(a1, &v5) != -1;
  if (v4 == 3)
    return 1;
  v3 = __error();
  result = 0;
  *v3 = 25;
  return result;
}

int fsetpos(FILE *a1, const fpos_t *a2)
{
  return fseeko(a1, *a2, 0);
}

_DWORD *__mult_D2A(_DWORD *a1, _DWORD *a2)
{
  int v2;
  int v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  BOOL v21;

  v2 = a1[5];
  v3 = a2[5];
  if (v2 >= v3)
    v4 = a1;
  else
    v4 = a2;
  if (v2 >= v3)
    v5 = a2;
  else
    v5 = a1;
  v6 = (int)v4[5];
  v7 = (int)v5[5];
  v8 = v7 + v6;
  if ((int)v7 + (int)v6 <= v4[3])
    v9 = v4[2];
  else
    v9 = v4[2] + 1;
  v10 = __Balloc_D2A(v9);
  v11 = v10 + 6;
  if (v8 >= 1)
    _platform_bzero();
  if ((int)v7 >= 1)
  {
    v12 = v4 + 6;
    v13 = v5 + 6;
    do
    {
      v15 = *v13++;
      v14 = v15;
      if (v15)
      {
        v16 = 0;
        v17 = 0;
        do
        {
          v18 = v17 + v11[v16] + v12[v16] * (unint64_t)v14;
          v17 = HIDWORD(v18);
          v11[v16++] = v18;
        }
        while (&v12[v16] < &v4[v6 + 6]);
        v11[v16] = HIDWORD(v18);
      }
      ++v11;
    }
    while (v13 < &v5[v7 + 6]);
  }
  if (v8 >= 1)
  {
    v19 = &v10[v8 + 5];
    while (!*v19--)
    {
      v21 = __OFSUB__(v8--, 1);
      if ((v8 < 0) ^ v21 | (v8 == 0))
      {
        v8 = 0;
        break;
      }
    }
  }
  v10[5] = v8;
  return v10;
}

int *__pow5mult_D2A(int *a1, int a2)
{
  int *v3;
  int v5;
  _DWORD *v6;
  _DWORD *v7;
  int *v8;

  v3 = a1;
  if ((a2 & 3) != 0)
    v3 = __multadd_D2A(a1, __pow5mult_D2A_p05[(a2 & 3) - 1], 0);
  if (a2 >= 4)
  {
    v5 = a2 >> 2;
    v6 = (_DWORD *)p5s;
    if (p5s)
      goto LABEL_10;
    os_unfair_lock_lock(&stru_1ECCE7BCC);
    v6 = (_DWORD *)p5s;
    if (!p5s)
    {
      v6 = __Balloc_D2A(1);
      *(_QWORD *)(v6 + 5) = 0x27100000001;
      p5s = (uint64_t)v6;
LABEL_8:
      *(_QWORD *)v6 = 0;
    }
LABEL_9:
    os_unfair_lock_unlock(&stru_1ECCE7BCC);
    while (1)
    {
LABEL_10:
      v7 = v6;
      if ((v5 & 1) != 0)
      {
        v8 = __mult_D2A(v3, v6);
        __Bfree_D2A(v3);
        v3 = v8;
      }
      if (v5 < 2)
        break;
      v5 >>= 1;
      v6 = *(_DWORD **)v7;
      if (!*(_QWORD *)v7)
      {
        os_unfair_lock_lock(&stru_1ECCE7BCC);
        v6 = *(_DWORD **)v7;
        if (*(_QWORD *)v7)
          goto LABEL_9;
        v6 = __mult_D2A(v7, v7);
        *(_QWORD *)v7 = v6;
        goto LABEL_8;
      }
    }
  }
  return v3;
}

_DWORD *__i2b_D2A(int a1)
{
  _DWORD *result;

  result = __Balloc_D2A(1);
  result[5] = 1;
  result[6] = a1;
  return result;
}

_DWORD *__lshift_D2A(int *a1, int a2)
{
  int v4;
  int v5;
  int v6;
  BOOL v7;
  _DWORD *v8;
  int *v9;
  int v10;
  int *v11;
  unint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;

  v4 = a1[5] + (a2 >> 5);
  v5 = a1[2];
  v6 = a1[3];
  if (v4 >= v6)
  {
    do
    {
      ++v5;
      v7 = v4 < 2 * v6;
      v6 *= 2;
    }
    while (!v7);
  }
  v8 = __Balloc_D2A(v5);
  v9 = v8 + 6;
  if (a2 >= 32)
  {
    if (a2 >> 5 <= 1)
      v10 = 1;
    else
      v10 = a2 >> 5;
    _platform_bzero();
    v9 = &v8[v10 - 1 + 7];
  }
  v11 = a1 + 6;
  v12 = (unint64_t)&a1[a1[5] + 6];
  v13 = a2 & 0x1F;
  if ((a2 & 0x1F) != 0)
  {
    v14 = 0;
    do
    {
      *v9++ = (*v11 << v13) | v14;
      v15 = *v11++;
      v14 = v15 >> (32 - v13);
    }
    while ((unint64_t)v11 < v12);
    *v9 = v14;
    if (v14)
      ++v4;
  }
  else
  {
    do
    {
      v16 = *v11++;
      *v9++ = v16;
    }
    while ((unint64_t)v11 < v12);
  }
  v8[5] = v4;
  __Bfree_D2A(a1);
  return v8;
}

char *__dtoa(unsigned int a1, int a2, _DWORD *a3, _DWORD *a4, char **a5, double a6)
{
  char **v6;
  int StatusReg;
  double v10;
  double v11;
  uint64_t v12;
  char *v13;
  char **v14;
  unsigned int v15;
  signed int v18;
  int v19;
  int *v20;
  unsigned int v21;
  uint64_t v22;
  signed int v23;
  double v25;
  int v26;
  _BOOL4 v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  int v39;
  BOOL v40;
  int v41;
  unsigned int v42;
  int v43;
  double v44;
  double v45;
  double v46;
  double *v47;
  BOOL v48;
  int v49;
  double v50;
  double v51;
  double v52;
  char *v53;
  int v54;
  double v55;
  double v56;
  int v57;
  int v58;
  double v59;
  int v60;
  _DWORD *v61;
  char *v62;
  double v63;
  char **v64;
  int *v65;
  int *v66;
  double v67;
  double v68;
  BOOL v69;
  uint64_t v70;
  double v71;
  int v72;
  unsigned int v73;
  double *v74;
  int v75;
  double v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  double v83;
  double v84;
  char v85;
  double v86;
  int v87;
  int v88;
  int *v89;
  char *v91;
  char *v92;
  int v93;
  char v94;
  int v95;
  int *v96;
  _BOOL4 v100;
  int v101;
  int v102;
  int v103;
  char v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  int *v110;
  int v111;
  int v112;
  int v113;
  char v114;
  int v115;
  int *v116;
  int v117;
  int *v118;
  uint64_t v119;
  int v120;
  int v121;
  int *v122;
  int *v123;
  int v124;
  int *v125;
  int v126;
  int v127;
  int v128;
  char v129;
  int v130;
  char *v131;
  char *v132;
  char v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  char **v141;
  int *v142;
  _DWORD *v143;
  int v144;
  int v145;
  char *v146;
  int v147;
  int *v148;
  int v149;
  int v150;
  unsigned int v151;
  uint64_t v152;

  v6 = a5;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0));
  v10 = fabs(a6);
  if (a6 >= 0.0)
    v11 = a6;
  else
    v11 = v10;
  *a4 = *(_QWORD *)&a6 >> 63;
  v12 = HIDWORD(*(_QWORD *)&a6) & 0x7FFFFFFFLL;
  if ((~(_DWORD)v12 & 0x7FF00000) == 0)
  {
    *a3 = 9999;
    if (LODWORD(a6) || (HIDWORD(a6) & 0xFFFFF) != 0)
    {
      v13 = "NaN";
      v14 = a5;
      v15 = 3;
    }
    else
    {
      v13 = "Infinity";
      v14 = a5;
      v15 = 8;
    }
    return (char *)__nrv_alloc_D2A((unsigned __int8 *)v13, v14, v15);
  }
  if (v11 == 0.0)
  {
    *a3 = 1;
    v13 = "0";
    v14 = a5;
    v15 = 1;
    return (char *)__nrv_alloc_D2A((unsigned __int8 *)v13, v14, v15);
  }
  v18 = ((StatusReg + 0x400000) >> 22) & 3;
  v19 = 2 * (v18 == 2);
  if (a6 < 0.0)
    v19 = 2 * (v18 != 2);
  if (v18 >= 2)
    v18 = v19;
  v149 = v18;
  v152 = 0;
  v20 = __d2b_D2A(&v152, (_DWORD *)&v152 + 1, v11);
  v143 = a3;
  if (v12 >= 0x100000)
  {
    v22 = *(_QWORD *)&a6 & 0xFFFFFFFFFFFFFLL | 0x3FF0000000000000;
    v23 = (v12 >> 20) - 1023;
  }
  else
  {
    v21 = LODWORD(a6) << (-18 - (v152 + BYTE4(v152)));
    if ((int)v152 + HIDWORD(v152) >= -1041)
      v21 = ((_DWORD)v12 << (14 - (v152 + BYTE4(v152)))) | (LODWORD(a6) >> (v152 + BYTE4(v152) + 18));
    v22 = COERCE__INT64((double)v21) - 0x1F0000000000000;
    v23 = v152 + HIDWORD(v152) - 1;
  }
  v25 = (*(double *)&v22 + -1.5) * 0.289529655 + 0.176091259 + (double)v23 * 0.301029996;
  v26 = (int)v25;
  v27 = v25 < 0.0;
  if (v25 == (double)(int)v25)
    v27 = 0;
  v28 = v26 - v27;
  if ((v26 - v27) <= 0x16)
  {
    v29 = v26 - v27;
    if (v11 < __tens_D2A[v28])
      v29 = v28 - 1;
  }
  else
  {
    v29 = v26 - v27;
  }
  v30 = HIDWORD(v152) + ~v23;
  if (v30 < 0)
    v31 = -v30;
  else
    v31 = 0;
  v32 = v30 & ~(v30 >> 31);
  if (v29 >= 0)
  {
    v33 = 0;
  }
  else
  {
    v31 -= v29;
    v33 = -v29;
  }
  if (v29 >= 0)
    v34 = v32 + v29;
  else
    v34 = v32;
  if (v29 >= 0)
    v35 = v29;
  else
    v35 = 0;
  if (a1 <= 9)
    v36 = a1;
  else
    v36 = 0;
  if (v36 >= 6)
    v37 = v36 - 4;
  else
    v37 = v36;
  v38 = 1;
  v150 = v29;
  v151 = v37;
  v138 = v31;
  v140 = v35;
  v136 = v33;
  switch(v37)
  {
    case 0u:
    case 1u:
      a2 = 0;
      v144 = -1;
      v23 = 18;
      goto LABEL_48;
    case 2u:
      v38 = 0;
      goto LABEL_50;
    case 3u:
      v38 = 0;
      goto LABEL_54;
    case 4u:
LABEL_50:
      if (a2 <= 1)
        a2 = 1;
      v23 = a2;
      v144 = a2;
      v147 = a2;
      break;
    case 5u:
LABEL_54:
      v144 = v29 + a2 + 1;
      v147 = v29 + a2;
      if (v144 > 1)
        v23 = v29 + a2 + 1;
      else
        v23 = 1;
      break;
    default:
      v144 = -1;
LABEL_48:
      v147 = -1;
      break;
  }
  v146 = (char *)__rv_alloc_D2A(v23);
  v39 = v150;
  v40 = v149 != 1 && v151 > 1;
  if (v40)
    v38 = 0;
  if (v36 > 5 || v144 > 0xE || v149 != 1)
    goto LABEL_123;
  v41 = v150 - 1;
  if (v150 < 1)
  {
    if (v150)
    {
      v45 = v11 * __tens_D2A[-v150 & 0xF];
      if (-v150 >= 0x10)
      {
        v73 = -v150 >> 4;
        v43 = 2;
        v74 = (double *)&__bigtens_D2A;
        do
        {
          if ((v73 & 1) != 0)
          {
            ++v43;
            v45 = v45 * *v74;
          }
          ++v74;
          v40 = v73 > 1;
          v73 >>= 1;
        }
        while (v40);
      }
      else
      {
        v43 = 2;
      }
    }
    else
    {
      v43 = 2;
      v45 = v11;
    }
  }
  else
  {
    if ((v150 & 0x100) != 0)
    {
      v42 = v150 >> 4;
      v44 = v11 / 1.0e256;
      v43 = 3;
    }
    else
    {
      v42 = v150 >> 4;
      v43 = 2;
      v44 = v11;
    }
    v46 = __tens_D2A[v150 & 0xF];
    if (v42)
    {
      v47 = (double *)&__bigtens_D2A;
      do
      {
        if ((v42 & 1) != 0)
        {
          ++v43;
          v46 = v46 * *v47;
        }
        ++v47;
        v40 = v42 > 1;
        v42 >>= 1;
      }
      while (v40);
    }
    v45 = v44 / v46;
  }
  if (v28 < 0x17 || (v45 < 1.0 ? (v48 = v144 < 1) : (v48 = 1), v48))
  {
    v49 = v144;
    v41 = v150;
  }
  else
  {
    if (v147 < 1)
      goto LABEL_123;
    v45 = v45 * 10.0;
    ++v43;
    v49 = v147;
  }
  *(_QWORD *)&v50 = COERCE__INT64((double)v43 * v45 + 7.0) - 0x340000000000000;
  v51 = v50;
  if (!v49)
  {
    v63 = v45 + -5.0;
    if (v63 > v50)
    {
      v64 = v6;
      v65 = 0;
      v66 = 0;
      v39 = v41;
      goto LABEL_209;
    }
    if (v63 < -v50)
    {
      v64 = v6;
      v65 = 0;
      v66 = 0;
      goto LABEL_263;
    }
LABEL_123:
    if (v150 > 14 || (v152 & 0x80000000) != 0)
    {
      v135 = a2;
      if (v38)
      {
        v77 = v152 + 1075;
        if (v12 >= 0x100000)
          v77 = 54 - HIDWORD(v152);
        v78 = v138;
        v79 = v77 + v138;
        v80 = v77 + v34;
        v142 = __i2b_D2A(1);
      }
      else
      {
        v80 = v34;
        v142 = 0;
        v78 = v138;
        v79 = v138;
      }
      if (v78 >= 1 && v80 >= 1)
      {
        if (v78 >= v80)
          v87 = v80;
        else
          v87 = v78;
        v79 -= v87;
        v78 -= v87;
        v80 -= v87;
      }
      v139 = v79;
      if (v136 >= 1)
      {
        if (v38)
        {
          v142 = __pow5mult_D2A(v142, v136);
          v88 = v38;
          v89 = __mult_D2A(v142, v20);
          __Bfree_D2A(v20);
          v20 = v89;
          v38 = v88;
        }
        else
        {
          v20 = __pow5mult_D2A(v20, v136);
        }
      }
      v95 = v147;
      v96 = __i2b_D2A(1);
      if (v140 >= 1)
        v96 = __pow5mult_D2A(v96, v140);
      v148 = v96;
      v137 = v38;
      v100 = ((int)v151 < 2 || v38 != 0) && v149 == 1 && (v12 & 0xFFFFF | LODWORD(a6)) == 0 && (v12 & 0x7FE00000) != 0;
      v101 = v80 + v100;
      if (v140)
        v102 = 32 - __hi0bits_D2A(v96[v96[5] + 5]);
      else
        LOBYTE(v102) = 1;
      a2 = v135;
      v103 = v139 + v100;
      v104 = v102 + v101;
      if ((v104 & 0x1F) != 0)
        v105 = 32 - (v104 & 0x1F);
      else
        v105 = 0;
      if (v105 < 5)
      {
        v107 = v144;
        if (v105 != 4)
        {
          v108 = v105 + 28;
          v103 += v108;
          v78 += v108;
          v101 += v108;
        }
      }
      else
      {
        v106 = v105 - 4;
        v103 += v106;
        v78 += v106;
        v101 += v106;
        v107 = v144;
      }
      if (v103 >= 1)
        v20 = __lshift_D2A(v20, v103);
      if (v101 >= 1)
        v148 = __lshift_D2A(v148, v101);
      v109 = v151;
      if (v28 < 0x17)
      {
        v95 = v107;
      }
      else
      {
        if ((__cmp_D2A((uint64_t)v20, (uint64_t)v148) & 0x80000000) != 0)
        {
          --v150;
          v20 = __multadd_D2A(v20, 10, 0);
          if (v137)
            v142 = __multadd_D2A(v142, 10, 0);
        }
        else
        {
          v95 = v107;
        }
        v109 = v151;
      }
      if (v95 > 0 || v109 != 5 && v109 != 3)
      {
        if (v137)
        {
          if (v78 < 1)
          {
            v110 = v142;
          }
          else
          {
            v110 = __lshift_D2A(v142, v78);
            v142 = v110;
          }
          v141 = v6;
          if (v100)
          {
            v116 = __Balloc_D2A(v110[2]);
            _platform_memmove();
            v142 = __lshift_D2A(v116, 1);
          }
          v145 = LOBYTE(a6) & 1;
          v117 = v95 - 1;
          v53 = v146 + 1;
          v118 = v142;
          v119 = (uint64_t)v148;
          while (1)
          {
            v120 = __quorem_D2A((uint64_t)v20, v119);
            v121 = __cmp_D2A((uint64_t)v20, (uint64_t)v110);
            v122 = v118;
            v123 = __diff_D2A(v119, (uint64_t)v118);
            if (v123[4])
              v124 = 1;
            else
              v124 = __cmp_D2A((uint64_t)v20, (uint64_t)v123);
            v114 = v120 + 48;
            __Bfree_D2A(v123);
            v115 = v149;
            if (!v145 && v151 != 1 && !v124 && v149 >= 1)
            {
              if (v120 == 9)
              {
                v127 = v150;
                v62 = v146;
                v66 = v148;
                v65 = v122;
                v6 = v141;
                goto LABEL_276;
              }
              v129 = v120 + 49;
              if (v121 <= 0)
                v129 = v120 + 48;
              *(v53 - 1) = v129;
              v64 = v141;
              v62 = v146;
              v66 = v148;
              v65 = v122;
              goto LABEL_282;
            }
            if ((v121 & 0x80000000) == 0 && (v151 == 1 || v121 | v145))
            {
              if (v124 >= 1)
              {
                v64 = v141;
                if (v149)
                {
                  v65 = v122;
                  v66 = v148;
                  if (v120 == 9)
                    goto LABEL_275;
                  *(v53 - 1) = v120 + 49;
                  v62 = v146;
                  goto LABEL_282;
                }
                goto LABEL_252;
              }
            }
            else
            {
              if (!v20[6] && v20[5] < 2)
                goto LABEL_251;
              if (v151 < 2)
                goto LABEL_244;
              if (v149 != 2)
              {
                if (v149)
                {
LABEL_244:
                  if (v124 >= 1)
                  {
                    v20 = __lshift_D2A(v20, 1);
                    v66 = v148;
                    v126 = __cmp_D2A((uint64_t)v20, (uint64_t)v148);
                    v64 = v141;
                    v65 = v122;
                    if (v126 > 0 || !v126 && (v120 & 1) != 0)
                    {
                      if (v120 != 9)
                      {
                        v114 = v120 + 49;
                        goto LABEL_250;
                      }
LABEL_275:
                      v127 = v150;
                      v62 = v146;
                      v6 = v64;
LABEL_276:
                      *(v53 - 1) = 57;
LABEL_277:
                      v131 = v53;
                      v132 = v53;
                      while (1)
                      {
                        v134 = *--v132;
                        v133 = v134;
                        if (v134 != 57)
                          break;
                        v131 = v132;
                        if (v132 == v62)
                        {
                          v64 = v6;
                          v150 = v127 + 1;
                          *v62 = 49;
                          v53 = v62 + 1;
                          goto LABEL_282;
                        }
                      }
                      v64 = v6;
                      *(v131 - 1) = v133 + 1;
                      v53 = v131;
                      goto LABEL_282;
                    }
LABEL_250:
                    v62 = v146;
LABEL_253:
                    *(v53 - 1) = v114;
                    goto LABEL_282;
                  }
                }
LABEL_251:
                v64 = v141;
LABEL_252:
                v62 = v146;
                v66 = v148;
                v65 = v122;
                goto LABEL_253;
              }
            }
            *(v53 - 1) = v114;
            if (!v117)
              break;
            v20 = __multadd_D2A(v20, 10, 0);
            v125 = __multadd_D2A(v110, 10, 0);
            v118 = v125;
            v119 = (uint64_t)v148;
            if (v110 != v122)
              v118 = __multadd_D2A(v122, 10, 0);
            --v117;
            ++v53;
            v110 = v125;
          }
          v62 = v146;
          v66 = v148;
          v65 = v122;
          v6 = v141;
        }
        else
        {
          if (v95 <= 1)
            v112 = 1;
          else
            v112 = v95;
          v113 = v112 - 1;
          v62 = v146;
          v66 = v148;
          v53 = v146 + 1;
          v65 = v142;
          while (1)
          {
            v114 = __quorem_D2A((uint64_t)v20, (uint64_t)v148) + 48;
            *(v53 - 1) = v114;
            if (!v20[6] && v20[5] < 2)
            {
              v64 = v6;
              v110 = 0;
              goto LABEL_282;
            }
            if (!v113)
              break;
            v20 = __multadd_D2A(v20, 10, 0);
            --v113;
            ++v53;
          }
          v110 = 0;
          v115 = v149;
        }
        if (v115)
        {
          if (v115 == 2 || (v20 = __lshift_D2A(v20, 1), v128 = __cmp_D2A((uint64_t)v20, (uint64_t)v66), v128 > 0))
          {
            v127 = v150;
            goto LABEL_277;
          }
          if (!v128)
          {
            v127 = v150;
            if ((v114 & 1) != 0)
              goto LABEL_277;
          }
        }
        v64 = v6;
        ++v53;
        do
        {
          v130 = *(v53 - 2);
          --v53;
        }
        while (v130 == 48);
LABEL_282:
        __Bfree_D2A(v66);
        if (v65)
        {
          if (v110 && v110 != v65)
            __Bfree_D2A(v110);
          __Bfree_D2A(v65);
        }
        v61 = v143;
        v6 = v64;
        goto LABEL_288;
      }
      v64 = v6;
      if (v95 < 0)
      {
        v65 = v142;
        v66 = v148;
      }
      else
      {
        v66 = __multadd_D2A(v148, 5, 0);
        v111 = __cmp_D2A((uint64_t)v20, (uint64_t)v66);
        v39 = v150;
        v65 = v142;
        if (v111 > 0)
          goto LABEL_209;
      }
    }
    else
    {
      v76 = __tens_D2A[v150];
      if ((a2 & 0x80000000) == 0 || v144 >= 1)
      {
        v81 = v144 - 1;
        v62 = v146;
        v53 = v146 + 1;
        v61 = v143;
        while (1)
        {
          v82 = (int)(v11 / v76);
          v83 = v11 - (double)v82 * v76;
          v84 = -0.0;
          if (v83 < 0.0)
            v84 = v76;
          v85 = v82 - (v83 < 0.0);
          v86 = v83 + v84;
          *(v53 - 1) = v85 + 48;
          if (v86 == 0.0)
            goto LABEL_288;
          if (!v81)
          {
            if (v151 < 2)
              goto LABEL_157;
            if (!v149)
              goto LABEL_288;
            if (v149 != 2)
            {
LABEL_157:
              if (v86 + v86 <= v76 && (v86 + v86 != v76 || (v85 & 1) == 0))
                goto LABEL_288;
            }
            goto LABEL_158;
          }
          v11 = v86 * 10.0;
          --v81;
          ++v53;
        }
      }
      v65 = 0;
      v64 = v6;
      if ((v144 & 0x80000000) == 0)
      {
        v66 = 0;
        if (v11 <= v76 * 5.0)
          goto LABEL_263;
LABEL_209:
        v110 = 0;
        v62 = v146;
        *v146 = 49;
        v53 = v146 + 1;
        v150 = v39 + 1;
        goto LABEL_282;
      }
      v66 = 0;
    }
LABEL_263:
    v110 = 0;
    v150 = ~a2;
    v62 = v146;
    v53 = v146;
    goto LABEL_282;
  }
  v52 = __tens_D2A[v49 - 1];
  v53 = v146 + 1;
  v54 = (int)v45;
  if (!v38)
  {
    v67 = v52 * v51;
    v68 = v45 - (double)v54;
    *v146 = v54 + 48;
    v69 = v68 == 0.0 || v49 == 1;
    if (!v69)
    {
      v70 = 0;
      do
      {
        v71 = v68 * 10.0;
        v72 = (int)v71;
        v68 = v71 - (double)(int)v71;
        if (v68 == 0.0)
          v49 = v70 + 2;
        v53[v70++] = v72 + 48;
      }
      while ((_DWORD)v70 + 1 != v49);
      v53 += v70;
    }
    if (v68 > v67 + 0.5)
    {
LABEL_110:
      v39 = v41;
      v61 = v143;
      v62 = v146;
LABEL_158:
      v91 = v62 + 1;
      v92 = v53 - 1;
      while (1)
      {
        v93 = *v92;
        if (v93 != 57)
          break;
        v69 = v92-- == v62;
        if (v69)
        {
          v150 = v39 + 1;
          *v62 = 48;
          v94 = 49;
          v92 = v62;
          goto LABEL_197;
        }
      }
      v150 = v39;
      v94 = v93 + 1;
      v91 = v92 + 1;
LABEL_197:
      *v92 = v94;
      v53 = v91;
      goto LABEL_288;
    }
    if (v68 < 0.5 - v67)
    {
      ++v53;
      v61 = v143;
      do
      {
        v75 = *(v53 - 2);
        --v53;
      }
      while (v75 == 48);
      v150 = v41;
      goto LABEL_97;
    }
    goto LABEL_123;
  }
  v55 = 0.5 / v52 - v51;
  v56 = v45 - (double)v54;
  *v146 = v54 + 48;
  if (v56 >= v55)
  {
    if (v49 <= 1)
      v57 = 1;
    else
      v57 = v49;
    v58 = v57 - 1;
    while (1.0 - v56 >= v55)
    {
      if (!v58)
        goto LABEL_123;
      v55 = v55 * 10.0;
      v59 = v56 * 10.0;
      v60 = (int)v59;
      v56 = v59 - (double)(int)v59;
      *v53++ = v60 + 48;
      --v58;
      if (v56 < v55)
        goto LABEL_96;
    }
    goto LABEL_110;
  }
LABEL_96:
  v150 = v41;
  v61 = v143;
LABEL_97:
  v62 = v146;
LABEL_288:
  __Bfree_D2A(v20);
  *v53 = 0;
  *v61 = v150 + 1;
  if (v6)
    *v6 = v53;
  return v62;
}

void __Bfree_D2A(int *a1)
{
  pthread_key_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (a1)
  {
    if (a1[2] < 10)
    {
      if (gdtoa_tsd_key)
        v2 = 14;
      else
        v2 = -1;
      v3 = pthread_getspecific(v2);
      v4 = a1[2];
      *(_QWORD *)a1 = v3[v4];
      v3[v4] = a1;
    }
    else
    {
      free(a1);
    }
  }
}

int *__multadd_D2A(int *a1, int a2, int a3)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int *v8;
  unint64_t v9;
  int *v10;

  v3 = a1;
  v4 = 0;
  v5 = a1[5];
  v6 = a3;
  if ((int)v5 <= 1)
    v7 = 1;
  else
    v7 = a1[5];
  do
  {
    v8 = &a1[v4];
    v9 = v6 + v8[6] * (uint64_t)a2;
    v6 = HIDWORD(v9);
    v8[6] = v9;
    ++v4;
  }
  while (v7 != (_DWORD)v4);
  if (v6)
  {
    if ((int)v5 >= a1[3])
    {
      v10 = __Balloc_D2A(a1[2] + 1);
      _platform_memmove();
      __Bfree_D2A(v3);
      v3 = v10;
    }
    v3[v5 + 6] = v6;
    v3[5] = v5 + 1;
  }
  return v3;
}

uint64_t __quorem_D2A(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int *v5;
  int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  unsigned int *v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;

  v2 = *(_DWORD *)(a2 + 20);
  if (*(_DWORD *)(a1 + 20) < v2)
    return 0;
  v5 = (unsigned int *)(a2 + 24);
  v6 = v2 - 1;
  v7 = (unsigned int *)(a2 + 24 + 4 * (v2 - 1));
  v8 = (unsigned int *)(a1 + 24);
  v9 = (unsigned int *)(a1 + 24 + 4 * (v2 - 1));
  v10 = *v7 + 1;
  v3 = *v9 / v10;
  if (v10 <= *v9)
  {
    v11 = 0;
    v12 = 0;
    v13 = (_DWORD *)(a1 + 24);
    v14 = (unsigned int *)(a2 + 24);
    do
    {
      v15 = *v14++;
      v16 = v12 + v15 * (unint64_t)v3;
      v12 = HIDWORD(v16);
      v17 = v11 - v16 + *v13;
      v11 = v17 >> 32;
      *v13++ = v17;
    }
    while (v14 <= v7);
    if (!*v9)
    {
      while (--v9 > v8 && !*v9)
        --v6;
      *(_DWORD *)(a1 + 20) = v6;
    }
  }
  if ((__cmp_D2A(a1, a2) & 0x80000000) == 0)
  {
    v18 = 0;
    v19 = v8;
    do
    {
      v20 = *v5++;
      v21 = v18 - v20 + *v19;
      v18 = v21 >> 32;
      *v19++ = v21;
    }
    while (v5 <= v7);
    v3 = (v3 + 1);
    v22 = &v8[v6];
    if (!*v22)
    {
      while (--v22 > v8 && !*v22)
        --v6;
      *(_DWORD *)(a1 + 20) = v6;
    }
  }
  return v3;
}

uint64_t __cmp_D2A(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;

  v3 = *(_DWORD *)(a1 + 20);
  v4 = *(int *)(a2 + 20);
  result = (v3 - v4);
  if (v3 == (_DWORD)v4)
  {
    v6 = a1 + 24;
    v7 = v6 + 4 * v4;
    v8 = (unsigned int *)(a2 + 4 * v4 + 20);
    while (1)
    {
      v10 = *(_DWORD *)(v7 - 4);
      v7 -= 4;
      v9 = v10;
      v11 = *v8--;
      v12 = v9 >= v11;
      if (v9 != v11)
        break;
      if (v7 <= v6)
        return 0;
    }
    if (v12)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  return result;
}

_DWORD *__rv_alloc_D2A(unsigned int a1)
{
  int v1;
  int v2;
  _DWORD *v3;

  if (a1 >= 0x1C)
  {
    v1 = 0;
    v2 = 4;
    do
    {
      ++v1;
      v2 *= 2;
    }
    while (v2 + 24 <= (unint64_t)(int)a1);
  }
  else
  {
    v1 = 0;
  }
  v3 = __Balloc_D2A(v1);
  *v3 = v1;
  return v3 + 1;
}

_DWORD *__Balloc_D2A(int a1)
{
  pthread_key_t v2;
  _OWORD *v3;
  pthread_key_t v4;
  _DWORD *result;

  if ((gdtoa_tsd_key & 1) != 0)
  {
    v2 = 14;
  }
  else
  {
    pthread_mutex_lock(&gdtoa_tsd_lock);
    if ((gdtoa_tsd_key & 1) == 0)
    {
      gdtoa_tsd_key = 1;
      pthread_key_init_np();
    }
    pthread_mutex_unlock(&gdtoa_tsd_lock);
    if (gdtoa_tsd_key)
      v2 = 14;
    else
      v2 = -1;
  }
  v3 = pthread_getspecific(v2);
  if (!v3)
  {
    v3 = malloc_type_malloc(0x50uLL, 0x2004093837F09uLL);
    *v3 = 0u;
    v3[1] = 0u;
    v3[2] = 0u;
    v3[3] = 0u;
    v3[4] = 0u;
    if (gdtoa_tsd_key)
      v4 = 14;
    else
      v4 = -1;
    pthread_setspecific(v4, v3);
  }
  if (a1 <= 9 && (result = (_DWORD *)*((_QWORD *)v3 + a1)) != 0)
  {
    *((_QWORD *)v3 + a1) = *(_QWORD *)result;
  }
  else
  {
    result = malloc_type_malloc(4 * ((1 << a1) - 1) + 32, 0x8AE3CDFAuLL);
    result[2] = a1;
    result[3] = 1 << a1;
  }
  *((_QWORD *)result + 2) = 0;
  return result;
}

_DWORD *__d2b_D2A(_DWORD *a1, _DWORD *a2, double a3)
{
  int v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v17;
  unsigned int v18;

  v6 = 1;
  v7 = __Balloc_D2A(1);
  v8 = (*(_QWORD *)&a3 >> 52) & 0x7FFLL;
  if (((*(_QWORD *)&a3 >> 52) & 0x7FF) != 0)
    v9 = HIDWORD(a3) & 0xFFFFF | 0x100000;
  else
    v9 = HIDWORD(a3) & 0xFFFFF;
  v17 = v9;
  v18 = LODWORD(a3);
  if (LODWORD(a3))
  {
    v10 = __lo0bits_D2A(&v18);
    v11 = v9 << -(char)v10;
    v12 = v9 >> v10;
    if (!v10)
      v11 = 0;
    v7[6] = v18 | v11;
    v7[7] = v12;
    if (v12)
      v6 = 2;
    else
      v6 = 1;
    v7[5] = v6;
    if ((_DWORD)v8)
      goto LABEL_11;
LABEL_13:
    *a1 = v10 - 1074;
    v13 = 32 * v6 - __hi0bits_D2A(v7[v6 - 1 + 6]);
    goto LABEL_14;
  }
  v14 = __lo0bits_D2A(&v17);
  v15 = v17;
  v7[5] = 1;
  v7[6] = v15;
  v10 = v14 + 32;
  if (!(_DWORD)v8)
    goto LABEL_13;
LABEL_11:
  *a1 = v8 + v10 - 1075;
  v13 = 53 - v10;
LABEL_14:
  *a2 = v13;
  return v7;
}

uint64_t __lo0bits_D2A(unsigned int *a1)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;

  v1 = *a1;
  if ((*a1 & 7) != 0)
  {
    if ((v1 & 1) == 0)
    {
      v2 = v1 >> 2;
      if ((v1 & 2) != 0)
      {
        v2 = v1 >> 1;
        v3 = 1;
      }
      else
      {
        v3 = 2;
      }
      goto LABEL_25;
    }
    return 0;
  }
  else
  {
    if (!(unsigned __int16)*a1)
      v1 >>= 16;
    v4 = (16 * ((unsigned __int16)*a1 == 0)) | 8;
    if ((_BYTE)v1)
      v4 = 16 * ((unsigned __int16)*a1 == 0);
    else
      v1 >>= 8;
    v5 = v4 | 4;
    if ((v1 & 0xF) != 0)
    {
      v5 = v4;
      v6 = v1;
    }
    else
    {
      v6 = v1 >> 4;
    }
    LODWORD(v3) = v5 | 2;
    if ((v6 & 3) != 0)
      v3 = v5;
    else
      v3 = v3;
    if ((v6 & 3) != 0)
      v2 = v6;
    else
      v2 = v6 >> 2;
    if ((v2 & 1) != 0)
      goto LABEL_25;
    if (v2 >= 2)
    {
      v3 = (v3 + 1);
      v2 >>= 1;
LABEL_25:
      *a1 = v2;
      return v3;
    }
    return 32;
  }
}

_DWORD *__diff_D2A(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  _DWORD *result;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  int v27;
  char *v28;
  int v29;

  v2 = *(int *)(a2 + 20);
  v3 = *(_DWORD *)(a1 + 20) - v2;
  if (!v3)
  {
    v4 = a1 + 24 + 4 * v2;
    v5 = (unsigned int *)(a2 + 4 * v2 + 20);
    while (1)
    {
      v7 = *(_DWORD *)(v4 - 4);
      v4 -= 4;
      v6 = v7;
      v8 = *v5--;
      v9 = v6 >= v8;
      if (v6 != v8)
        break;
      if (v4 <= a1 + 24)
      {
        result = __Balloc_D2A(0);
        *(_QWORD *)(result + 5) = 1;
        return result;
      }
    }
    if (v9)
      v3 = 1;
    else
      v3 = -1;
  }
  if (v3 >= 0)
    v11 = a1;
  else
    v11 = a2;
  if (v3 >= 0)
    v12 = a2;
  else
    v12 = a1;
  v13 = v3 >> 31;
  result = __Balloc_D2A(*(_DWORD *)(v11 + 8));
  v14 = 0;
  v15 = 0;
  v16 = result + 6;
  result[4] = v13;
  v17 = *(int *)(v11 + 20);
  v18 = v12 + 24;
  v19 = v12 + 24 + 4 * *(int *)(v12 + 20);
  do
  {
    v20 = *(unsigned int *)(v11 + v14 + 24) - (v15 + *(unsigned int *)(v18 + v14));
    v15 = HIDWORD(v20) & 1;
    v16[v14 / 4] = v20;
    v14 += 4;
  }
  while (v18 + v14 < v19);
  v21 = v11 + 24 + 4 * v17;
  if (v11 + v14 + 24 >= v21)
  {
    v26 = (char *)&v16[v14 / 4];
  }
  else
  {
    v22 = 0;
    do
    {
      v23 = *(unsigned int *)(v11 + v22 + v14 + 24) - v15;
      v16[v22 / 4 + v14 / 4] = v23;
      v15 = HIDWORD(v23) & 1;
      v24 = v22 + 4;
      v25 = v11 + v14 + v22 + 28;
      v22 += 4;
    }
    while (v25 < v21);
    v26 = (char *)&v16[v14 / 4] + v24;
  }
  v27 = v17 + 1;
  v28 = v26 - 4;
  do
  {
    v29 = *(_DWORD *)v28;
    v28 -= 4;
    --v27;
  }
  while (!v29);
  result[5] = v27;
  return result;
}

uint64_t __hi0bits_D2A(unsigned int a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;

  v1 = a1 << 16;
  if (a1 >= 0x10000)
    v1 = a1;
  v2 = v1 << 8;
  if (HIBYTE(v1))
  {
    v2 = v1;
    v3 = 16 * (a1 < 0x10000);
  }
  else
  {
    v3 = (16 * (a1 < 0x10000)) | 8;
  }
  v4 = v2 >> 28;
  if (!(v2 >> 28))
    v2 *= 16;
  if (!v4)
    v3 |= 4u;
  v5 = v2 >> 30;
  if (!(v2 >> 30))
    v2 *= 4;
  if (v5)
    result = v3;
  else
    result = v3 | 2;
  if ((v2 & 0x80000000) == 0)
  {
    if ((v2 & 0x40000000) != 0)
      return (result + 1);
    else
      return 32;
  }
  return result;
}

int atexit_b(void *a1)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)&v2 = 3;
  v3 = 0;
  v4 = 0;
  *((_QWORD *)&v2 + 1) = _Block_copy(a1);
  return atexit_register(&v2);
}

int atexit(void (*a1)(void))
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  *((_QWORD *)&v2 + 1) = a1;
  *(_QWORD *)&v2 = 1;
  v3 = 0;
  v4 = 0;
  return atexit_register(&v2);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  __int128 v4;
  void *v5;
  void *v6;

  *((_QWORD *)&v4 + 1) = lpfunc;
  *(_QWORD *)&v4 = 2;
  v5 = obj;
  v6 = lpdso_handle;
  return atexit_register(&v4);
}

uint64_t atexit_register(_OWORD *a1)
{
  _DWORD *v1;
  int v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v7;
  __int128 v8;

  v1 = (_DWORD *)__atexit;
  if (!__atexit)
    atexit_register_cold_1();
  pthread_mutex_lock(&atexit_mutex);
  v3 = v1[2];
  if (v3 >= 32)
  {
    v4 = __atexit;
    while (1)
    {
      pthread_mutex_unlock(&atexit_mutex);
      v5 = malloc_type_malloc(0x410uLL, 0x10A00403E527AF6uLL);
      if (!v5)
        return 0xFFFFFFFFLL;
      v1 = v5;
      pthread_mutex_lock(&atexit_mutex);
      if (v4 == __atexit)
        break;
      pthread_mutex_unlock(&atexit_mutex);
      free(v1);
      pthread_mutex_lock(&atexit_mutex);
      v4 = __atexit;
      v3 = *(_DWORD *)(__atexit + 8);
      if (v3 <= 31)
      {
        v1 = (_DWORD *)__atexit;
        goto LABEL_10;
      }
    }
    v3 = 0;
    v1[2] = 0;
    *(_QWORD *)v1 = v4;
    __atexit = (uint64_t)v1;
  }
LABEL_10:
  v1[2] = v3 + 1;
  v7 = &v1[8 * v3];
  v8 = a1[1];
  *((_OWORD *)v7 + 1) = *a1;
  *((_OWORD *)v7 + 2) = v8;
  __atexit_new_registration = 1;
  pthread_mutex_unlock(&atexit_mutex);
  return 0;
}

int isxdigit(int _c)
{
  if (_c <= 0xFF)
    return HIWORD(_DefaultRuneLocale.__runetype[_c]) & 1;
  else
    return 0;
}

size_t mbrtowc(__int32 *a1, const char *a2, size_t a3, mbstate_t *a4)
{
  uint64_t v4;
  char *v5;
  char *v6;

  v4 = __locale_key;
  v5 = *(char **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (!v5)
    v5 = (char *)&__global_locale;
  if (v5 == (char *)-1)
    v6 = (char *)&__global_locale;
  else
    v6 = v5;
  if (!a4)
    a4 = (mbstate_t *)(v6 + 272);
  return (*(uint64_t (**)(__int32 *, const char *, size_t, mbstate_t *))(*((_QWORD *)v6 + 166) + 72))(a1, a2, a3, a4);
}

int asprintf(char **a1, const char *a2, ...)
{
  uint64_t v3;
  _xlocale *v4;
  _xlocale *v5;
  va_list va;

  va_start(va, a2);
  v3 = __locale_key;
  v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__global_locale;
  return vasprintf_l(a1, v5, a2, va);
}

uint64_t _vasprintf(pthread_mutex_t *a1, int a2, void **a3)
{
  uint64_t result;
  _BYTE *v7;
  __int128 v8;
  void *v9[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v17 = 0u;
  v16 = 0u;
  v15 = 0;
  v13 = 0u;
  v12 = 0u;
  v11 = 0u;
  v10 = 0u;
  *(_OWORD *)v9 = 0u;
  v8 = 0u;
  v14 = v18;
  v22 = 0;
  v23 = 0;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18[0] = 0;
  v18[1] = 850045858;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  DWORD2(v8) = -48632;
  v7 = malloc_type_malloc(0x80uLL, 0x33A8D23uLL);
  v9[0] = v7;
  if (v7)
  {
    DWORD1(v8) = 127;
    LODWORD(v9[1]) = 127;
    LOBYTE(v23) = v23 & 0xF8;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    result = __v2printf(a1, a2, (int)&v7);
    if ((result & 0x80000000) == 0)
    {
      *v7 = 0;
      *a3 = v9[0];
      return result;
    }
    free(v9[0]);
  }
  *a3 = 0;
  *__error() = 12;
  return 0xFFFFFFFFLL;
}

int vasprintf_l(char **a1, locale_t a2, const char *a3, va_list a4)
{
  return _vasprintf((pthread_mutex_t *)0xFFFFFFFFFFFFFFFFLL, 0, (void **)a1);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  uint64_t v3;
  _xlocale *v4;
  _xlocale *v5;

  v3 = __locale_key;
  v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__global_locale;
  return strtol_l(__str, __endptr, __base, v5);
}

char *__cdecl strsep(char **__stringp, const char *__delim)
{
  char *result;
  char *v4;
  char *v5;
  int v6;
  int v7;
  const char *v8;
  int v9;

  result = *__stringp;
  if (result)
  {
    v4 = result;
    v5 = result;
LABEL_3:
    v7 = *v5++;
    v6 = v7;
    v8 = __delim;
    while (1)
    {
      v9 = *(unsigned __int8 *)v8;
      if (v9 == v6)
        break;
      ++v8;
      if (!v9)
      {
        v4 = v5;
        goto LABEL_3;
      }
    }
    if (v6)
      *v4 = 0;
    else
      v5 = 0;
    *__stringp = v5;
  }
  return result;
}

lldiv_t div(uint64_t __x, uint64_t __y)
{
  int v2;
  unint64_t v3;
  lldiv_t result;

  if ((int)__x >= 0 && (int)__x % (int)__y < 0)
    v2 = __y;
  else
    v2 = 0;
  v3 = ((int)__x / (int)__y + ((int)__x >= 0 && (int)__x % (int)__y < 0)) | ((unint64_t)((int)__x % (int)__y - v2) << 32);
  result.rem = __y;
  result.quot = v3;
  return result;
}

int readdir_r(DIR *a1, dirent *a2, dirent **a3)
{
  int v6;
  pthread_mutex_t *p_dd_lock;
  unint64_t v8;
  int result;
  dirent *v10;

  v6 = *__error();
  *__error() = 0;
  p_dd_lock = &a1->__dd_lock;
  pthread_mutex_lock(&a1->__dd_lock);
  v8 = _readdir_unlocked((uint64_t)a1, 1);
  if (v8)
    _platform_memmove();
  pthread_mutex_unlock(p_dd_lock);
  if (*__error())
  {
    if (!v8)
      return *__error();
  }
  else
  {
    *__error() = v6;
  }
  result = 0;
  if (v8)
    v10 = a2;
  else
    v10 = 0;
  *a3 = v10;
  return result;
}

ssize_t send(int a1, const void *a2, size_t a3, int a4)
{
  return __sendto();
}

double atof_l(const char *a1, locale_t a2)
{
  return strtod_l(a1, 0, a2);
}

int atoi(const char *a1)
{
  uint64_t v1;
  _xlocale *v2;
  _xlocale *v3;

  v1 = __locale_key;
  v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2)
    v3 = v2;
  else
    v3 = (_xlocale *)&__global_locale;
  return strtol_l(a1, 0, 10, v3);
}

uint64_t strtol_l(const char *a1, char **a2, int a3, locale_t a4)
{
  locale_t v6;
  locale_t v7;
  const char *v8;
  int v9;
  int v10;
  _RuneLocale *v11;
  char v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  _BOOL4 v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 v22;
  int v23;
  char v24;
  int v25;
  char *v26;
  int *v28;

  v6 = (locale_t)&__global_locale;
  if (a4 == (locale_t)-1)
    v7 = (locale_t)&__global_locale;
  else
    v7 = a4;
  if (!a4)
    v7 = (locale_t)&__c_locale;
  if (v7 != (locale_t)-1)
    v6 = v7;
  if (!v7)
    v6 = (locale_t)&__c_locale;
  v8 = a1;
  do
  {
    v10 = *v8++;
    v9 = v10;
    v11 = &_DefaultRuneLocale;
    if (v10 < 0)
      v11 = *(_RuneLocale **)(*((_QWORD *)v6 + 166) + 120);
  }
  while ((v11->__runetype[v9] & 0x4000) != 0);
  if (v9 == 43 || v9 == 45)
  {
    v13 = *v8++;
    v12 = v13;
  }
  else
  {
    v12 = v9;
  }
  if ((a3 & 0xFFFFFFEF) != 0 || v12 != 48)
  {
    v16 = a3 == 0;
    if (v12 != 48)
    {
      v17 = 10;
      goto LABEL_29;
    }
  }
  else
  {
    if ((*(unsigned __int8 *)v8 | 0x20) == 0x78)
    {
      v12 = v8[1];
      if ((v12 - 48) < 0xAu
        || (v14 = *((unsigned __int8 *)v8 + 1) - 65, v14 <= 0x25) && ((1 << v14) & 0x3F0000003FLL) != 0)
      {
        v8 += 2;
        v15 = 16;
        goto LABEL_34;
      }
    }
    v16 = a3 == 0;
    v12 = 48;
  }
  v17 = 8;
LABEL_29:
  if (v16)
    v15 = v17;
  else
    v15 = a3;
  if (v15 - 37 < 0xFFFFFFDD)
  {
    v18 = 0;
LABEL_58:
    *__error() = 22;
    v25 = 1;
    v20 = v18;
    if (!a2)
      return v20;
    goto LABEL_59;
  }
LABEL_34:
  v18 = 0;
  v19 = 0;
  if (v9 == 45)
    v20 = 0x8000000000000000;
  else
    v20 = 0x7FFFFFFFFFFFFFFFLL;
  v21 = v20 / v15;
  while (1)
  {
    v22 = v12 - 48;
    if ((v12 - 48) >= 0xAu)
    {
      if ((v12 - 65) > 0x19u)
      {
        if ((v12 - 97) > 0x19u)
          break;
        v22 = v12 - 87;
      }
      else
      {
        v22 = v12 - 55;
      }
    }
    if ((int)v15 <= v22)
      break;
    v23 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v21)
    {
      if (v18 == v21 && v22 > (int)(v20 % v15))
      {
        v18 = v20 / v15;
      }
      else
      {
        v18 = v18 * v15 + v22;
        v23 = 1;
      }
    }
    v24 = *v8++;
    v12 = v24;
    v19 = v23;
  }
  if ((v19 & 0x80000000) == 0)
  {
    if (v19)
    {
      v25 = 0;
      if (v9 == 45)
        v20 = -(uint64_t)v18;
      else
        v20 = v18;
      if (!a2)
        return v20;
      goto LABEL_59;
    }
    goto LABEL_58;
  }
  v28 = __error();
  v25 = 0;
  *v28 = 34;
  if (!a2)
    return v20;
LABEL_59:
  v26 = (char *)(v8 - 1);
  if (v25)
    v26 = (char *)a1;
  *a2 = v26;
  return v20;
}

void *__cdecl bsearch_b(const void *__key, const void *__base, size_t __nel, size_t __width, void *__compar)
{
  size_t v7;
  char *v10;
  int v11;
  unint64_t v12;

  if (!__nel)
    return 0;
  v7 = __nel;
  while (1)
  {
    v10 = (char *)__base + (v7 >> 1) * __width;
    v11 = (*((uint64_t (**)(void *, const void *, char *))__compar + 2))(__compar, __key, v10);
    if (!v11)
      break;
    if (v11 > 0)
      __base = &v10[__width];
    v12 = v7 - (v11 > 0);
    v7 = v12 >> 1;
    if (v12 <= 1)
      return 0;
  }
  return v10;
}

uint64_t _mkpath_np(char *a1, mode_t a2, char **a3)
{
  return _mkpath(-2, a1, a2, a3);
}

int digittoint(int _c)
{
  int v1;
  uint64_t v2;
  _QWORD *v3;

  if (_c < 0x100)
  {
    v2 = __locale_key;
    v3 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
    if (!v3)
      v3 = &__global_locale;
    v1 = *(_DWORD *)(*(_QWORD *)(v3[166] + 120) + 4 * _c + 60);
  }
  else
  {
    LOBYTE(v1) = ___runetype(_c);
  }
  return v1 & 0xF;
}

mach_header_64 *_NSGetMachExecuteHeader(void)
{
  return (mach_header_64 *)_mh_execute_header_pointer;
}

int sscanf_l(const char *a1, locale_t a2, const char *a3, ...)
{
  va_list va;

  va_start(va, a3);
  return vsscanf_l(a1, a2, a3, va);
}

int sscanf(const char *a1, const char *a2, ...)
{
  uint64_t v3;
  _xlocale *v4;
  _xlocale *v5;
  va_list va;

  va_start(va, a2);
  v3 = __locale_key;
  v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__global_locale;
  return vsscanf_l(a1, v5, a2, va);
}

int vsscanf_l(const char *a1, locale_t a2, const char *a3, va_list a4)
{
  char v8;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v20 = 0u;
  v19 = 0u;
  v18 = 0;
  v16 = 0u;
  v15 = 0u;
  v14 = 0u;
  v13 = 0u;
  v12 = 0u;
  v11 = 0u;
  v17 = v21;
  v25 = 0;
  v26 = 0;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21[0] = 0;
  v21[1] = 850045858;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  if (off_1EDF54E10)
  {
    off_1EDF54E10(a1);
    v8 = v26 & 0xF8;
  }
  else
  {
    v8 = 0;
  }
  DWORD2(v11) = -65532;
  v10 = (char *)a1;
  *(_QWORD *)&v12 = a1;
  LODWORD(v11) = _platform_strlen();
  DWORD2(v12) = v11;
  *((_QWORD *)&v14 + 1) = eofread;
  *(_QWORD *)&v16 = 0;
  *(_QWORD *)&v19 = 0;
  LOBYTE(v26) = v8;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  return __svfscanf_l(&v10, a2, (unsigned __int8 *)a3, (wint_t **)a4);
}

uint64_t __svfscanf_l(char **a1, _xlocale *a2, unsigned __int8 *a3, wint_t **a4)
{
  _xlocale *v7;
  _xlocale *v8;
  _xlocale *v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _RuneLocale *v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  wint_t **v22;
  wint_t *v23;
  void (*v24)(wint_t *, uint64_t);
  int v25;
  char *v26;
  _RuneLocale *v27;
  int v28;
  char *v29;
  _RuneLocale *v30;
  char *v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  char *v37;
  _RuneLocale *v38;
  int v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  char **v45;
  char *v46;
  char *v47;
  char *v48;
  char v49;
  char *v50;
  int v51;
  uint64_t v52;
  char **v53;
  char *v54;
  char *v55;
  _RuneLocale *v56;
  char v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  char *v65;
  int v66;
  int v67;
  BOOL v68;
  char *decimal_point;
  size_t v70;
  char *v71;
  uint64_t v72;
  BOOL v73;
  char *v74;
  char *k;
  int v76;
  char *v77;
  int v78;
  uintmax_t v79;
  float **v80;
  float *v81;
  float v82;
  __int32 **v83;
  __int32 *v84;
  wint_t **v85;
  wint_t *v86;
  __int32 **v87;
  __int32 *v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  __uint32_t *v95;
  int v96;
  uint64_t v97;
  __uint32_t *v98;
  __uint32_t *v99;
  char v100;
  _BOOL4 v101;
  __uint32_t *v102;
  char *v103;
  char *v104;
  char *v105;
  int v106;
  uint64_t v107;
  char *v108;
  unint64_t v109;
  int v110;
  BOOL v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t j;
  char *v119;
  _RuneLocale *v120;
  int v121;
  int v122;
  uint64_t v123;
  int v124;
  size_t v125;
  int v126;
  uint64_t v127;
  int v128;
  size_t v129;
  int v130;
  uint64_t v131;
  int v132;
  size_t v133;
  int v134;
  char *v135;
  uintmax_t v136;
  wint_t **v137;
  wint_t *v138;
  double v139;
  char v140;
  unsigned __int8 *v141;
  unsigned int v142;
  unsigned int v143;
  uint64_t i;
  wint_t v145;
  double v146;
  uint64_t v147;
  uint64_t v149;
  int v152;
  uint64_t v153;
  char *v154;
  size_t v155;
  char *v156;
  unsigned int v157;
  unsigned int v158;
  int base[2];
  char *v160;
  int v161;
  _xlocale *v162;
  locale_t v163;
  wint_t v164;
  wint_t v165;
  wint_t **v166;
  char *v167;
  wint_t **v168;
  mbstate_t v169;
  char nptr[513];
  _OWORD v171[14];
  int8x16_t v172;
  int8x16_t v173;

  v168 = a4;
  if (off_1EDF54E20)
    off_1EDF54E20(a2, 1472);
  if (off_1EDF54E10)
    off_1EDF54E10(a3);
  memset(&v169, 0, sizeof(v169));
  v7 = (_xlocale *)&__global_locale;
  if (a2 == (_xlocale *)-1)
    v8 = (_xlocale *)&__global_locale;
  else
    v8 = a2;
  if (a2)
    v9 = v8;
  else
    v9 = (_xlocale *)&__c_locale;
  v161 = *(_DWORD *)(*((_QWORD *)v9 + 166) + 64);
  v10 = a1[13];
  if ((v10[72] & 7) == 0)
    v10[72] |= 7u;
  v166 = v168;
  v167 = 0;
  v11 = *a3;
  if (!*a3)
    return 0;
  v12 = 0;
  v163 = v9;
  v164 = 0;
  if (v9 != (_xlocale *)-1)
    v7 = v9;
  v162 = v7;
  *(_QWORD *)base = 0;
LABEL_17:
  v13 = a3;
  while (1)
  {
    a3 = v13;
LABEL_19:
    v14 = &_DefaultRuneLocale;
    if ((v11 & 0x80) != 0)
      v14 = *(_RuneLocale **)(*((_QWORD *)v162 + 166) + 120);
    v13 = a3 + 1;
    if ((v14->__runetype[v11] & 0x4000) != 0)
    {
      v28 = *((_DWORD *)a1 + 2);
      while (v28 > 0 || !__srefill((uint64_t)a1))
      {
        v29 = *a1;
        v30 = &_DefaultRuneLocale;
        if (**a1 < 0)
          v30 = *(_RuneLocale **)(*((_QWORD *)v162 + 166) + 120);
        if ((v30->__runetype[**a1] & 0x4000) == 0)
          break;
        ++v164;
        v28 = *((_DWORD *)a1 + 2) - 1;
        *((_DWORD *)a1 + 2) = v28;
        *a1 = v29 + 1;
      }
      goto LABEL_89;
    }
    if (v11 == 37)
      break;
    if (*((int *)a1 + 2) <= 0 && __srefill((uint64_t)a1))
      goto LABEL_476;
LABEL_87:
    v31 = *a1;
    if (v11 != **a1)
      return v12;
    --*((_DWORD *)a1 + 2);
    *a1 = v31 + 1;
    ++v164;
LABEL_89:
    v11 = *v13;
    if (!*v13)
      return v12;
  }
  v15 = 0;
  v16 = 0;
  while (2)
  {
    a3 = v13 + 1;
    switch(*v13)
    {
      case '$':
        if ((v16 - 10) < 0xFFFFFFF7 || *(v13 - 2) != 37)
          goto LABEL_476;
        v17 = v16;
        v16 = 0;
        v168 = v166;
        ++v13;
        if (v17 < 2)
          continue;
        v18 = v17 + 1;
        do
        {
          ++v168;
          --v18;
        }
        while (v18 > 2);
        v16 = 0;
        goto LABEL_26;
      case '%':
        v25 = *((_DWORD *)a1 + 2);
        while (2)
        {
          if (v25 <= 0 && __srefill((uint64_t)a1))
            goto LABEL_476;
          v26 = *a1;
          if (**a1 < 0)
            v27 = *(_RuneLocale **)(*((_QWORD *)v162 + 166) + 120);
          else
            v27 = &_DefaultRuneLocale;
          if ((v27->__runetype[**a1] & 0x4000) != 0)
          {
            ++v164;
            v25 = *((_DWORD *)a1 + 2) - 1;
            *((_DWORD *)a1 + 2) = v25;
            *a1 = v26 + 1;
            continue;
          }
          break;
        }
        v11 = 37;
        ++v13;
        goto LABEL_87;
      case '&':
      case '\'':
      case '(':
      case ')':
      case '+':
      case ',':
      case '-':
      case '.':
      case '/':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '?':
      case '@':
      case 'B':
      case 'D':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'Y':
      case 'Z':
      case '\\':
      case ']':
      case '^':
      case '_':
      case 'b':
      case 'k':
      case 'm':
      case 'r':
      case 'v':
      case 'w':
      case 'y':
        return v12;
      case '*':
        v15 |= 8u;
        goto LABEL_26;
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        v16 = *v13 + 10 * v16 - 48;
        goto LABEL_26;
      case 'A':
      case 'E':
      case 'F':
      case 'G':
      case 'a':
      case 'e':
      case 'f':
      case 'g':
        v32 = 4;
        goto LABEL_106;
      case 'C':
        v15 |= 1u;
        goto LABEL_94;
      case 'L':
        v15 |= 2u;
        goto LABEL_26;
      case 'S':
        v15 |= 1u;
        goto LABEL_96;
      case 'X':
      case 'x':
        v33 = 33024;
        goto LABEL_102;
      case '[':
        v34 = v13[1];
        if (v34 == 94)
        {
          a3 = v13 + 3;
          v34 = v13[2];
          v35 = 1;
        }
        else
        {
          v35 = 0;
          a3 = v13 + 2;
        }
        v172 = vdupq_n_s8(v35);
        v173 = v172;
        v171[12] = v172;
        v171[13] = v172;
        v171[10] = v172;
        v171[11] = v172;
        v171[8] = v172;
        v171[9] = v172;
        v171[6] = v172;
        v171[7] = v172;
        v171[4] = v172;
        v171[5] = v172;
        v171[2] = v172;
        v171[3] = v172;
        v171[0] = v172;
        v171[1] = v172;
        if (!v34)
        {
          --a3;
          goto LABEL_436;
        }
        v140 = v35 ^ 1;
        v158 = v12;
LABEL_409:
        while (2)
        {
          *((_BYTE *)v171 + v34) = v140;
          v141 = a3;
          v142 = v34;
          while (2)
          {
            a3 = v141 + 1;
            v34 = *v141;
            if (v34 == 45)
            {
              v143 = *a3;
              if (v143 != 93)
              {
                if (*(_BYTE *)(*((_QWORD *)v163 + 165) + 64))
                {
                  if (v142 <= v143)
                  {
                    v141 += 2;
                    goto LABEL_417;
                  }
                }
                else if ((__collate_range_cmp(*a3, v142, v163) & 0x80000000) == 0)
                {
                  v141 += 2;
                  if (!*(_BYTE *)(*((_QWORD *)v163 + 165) + 64))
                  {
                    for (i = 0; i != 256; ++i)
                    {
                      if ((__collate_range_cmp(v142, i, v163) & 0x80000000) != 0
                        && (int)__collate_range_cmp(i, v143, v163) <= 0)
                      {
                        *((_BYTE *)v171 + i) = v140;
                      }
                    }
                    goto LABEL_418;
                  }
LABEL_417:
                  _platform_memset();
LABEL_418:
                  v142 = v143;
                  continue;
                }
              }
              v34 = 45;
              goto LABEL_409;
            }
            break;
          }
          v12 = v158;
          if (*v141)
          {
            if (v34 == 93)
              goto LABEL_436;
            continue;
          }
          break;
        }
        a3 = v141;
LABEL_436:
        v15 |= 0x20u;
        v32 = 1;
LABEL_106:
        if (*((int *)a1 + 2) <= 0 && __srefill((uint64_t)a1))
          goto LABEL_476;
        if ((v15 & 0x20) == 0)
        {
          while (1)
          {
            v37 = *a1;
            v38 = **a1 < 0 ? *(_RuneLocale **)(*((_QWORD *)v162 + 166) + 120) : &_DefaultRuneLocale;
            if ((v38->__runetype[**a1] & 0x4000) == 0)
              break;
            v39 = *((_DWORD *)a1 + 2);
            *((_DWORD *)a1 + 2) = v39 - 1;
            if (v39 < 2)
            {
              if (__srefill((uint64_t)a1))
                goto LABEL_476;
            }
            else
            {
              *a1 = v37 + 1;
            }
            ++v164;
          }
        }
        break;
      case 'c':
LABEL_94:
        v32 = 0;
        v15 |= 0x20u;
        goto LABEL_106;
      case 'd':
        goto LABEL_104;
      case 'h':
        v19 = v15 & 0xFFFFBFFB | 0x4000;
        v20 = v15 | 4;
        v21 = (v15 & 4) == 0;
        goto LABEL_38;
      case 'i':
        *(_QWORD *)base = 0;
        v32 = 3;
        goto LABEL_106;
      case 'j':
        v15 |= 0x800u;
        goto LABEL_26;
      case 'l':
        v19 = v15 & 0xFFFFFBFE | 0x400;
        v20 = v15 | 1;
        v21 = (v15 & 1) == 0;
LABEL_38:
        if (v21)
          v15 = v20;
        else
          v15 = v19;
        goto LABEL_26;
      case 'n':
        if ((v15 & 8) != 0)
          goto LABEL_66;
        v22 = v168++;
        v23 = *v22;
        if (!*v22)
          goto LABEL_66;
        if ((v15 & 0x4000) != 0)
        {
          if (off_1EDF54E20)
            off_1EDF54E20(v23, 1);
          *(_BYTE *)v23 = v164;
        }
        else if ((v15 & 4) != 0)
        {
          if (off_1EDF54E20)
            off_1EDF54E20(v23, 2);
          *(_WORD *)v23 = v164;
        }
        else
        {
          if ((v15 & 1) != 0 || (v15 & 0x400) != 0 || (v15 & 0x800) != 0 || (v15 & 0x2000) != 0)
          {
            v24 = (void (*)(wint_t *, uint64_t))off_1EDF54E20;
          }
          else
          {
            v24 = (void (*)(wint_t *, uint64_t))off_1EDF54E20;
            if ((v15 & 0x1000) == 0)
            {
              if (off_1EDF54E20)
                off_1EDF54E20(v23, 4);
              *v23 = v164;
              goto LABEL_66;
            }
          }
          if (v24)
            v24(v23, 8);
          *(_QWORD *)v23 = v164;
        }
LABEL_66:
        v11 = *a3;
        if (!*a3)
          return v12;
        goto LABEL_19;
      case 'o':
        v15 |= 0x8000u;
        v32 = 3;
        v36 = 8;
        goto LABEL_105;
      case 'p':
        v33 = 33040;
LABEL_102:
        v15 |= v33;
        v32 = 3;
        v36 = 16;
        goto LABEL_105;
      case 'q':
        v15 |= 0x400u;
        goto LABEL_26;
      case 's':
LABEL_96:
        v32 = 2;
        goto LABEL_106;
      case 't':
        v15 |= 0x1000u;
        goto LABEL_26;
      case 'u':
        v15 |= 0x8000u;
LABEL_104:
        v32 = 3;
        v36 = 10;
LABEL_105:
        *(_QWORD *)base = v36;
        goto LABEL_106;
      case 'z':
        v15 |= 0x2000u;
LABEL_26:
        v13 = a3;
        continue;
      default:
        if (!*v13)
          return 0xFFFFFFFFLL;
        return v12;
    }
    break;
  }
  switch(v32)
  {
    case 0:
      if (v16 <= 1)
        v40 = 1;
      else
        v40 = v16;
      v41 = v15 & 8;
      if ((v15 & 1) != 0)
      {
        v157 = v12;
        if ((v15 & 8) != 0)
        {
          v84 = 0;
        }
        else
        {
          v83 = v168++;
          v84 = *v83;
        }
        v122 = 0;
        while (1)
        {
          if (v122 == v161)
            goto LABEL_475;
          v123 = (uint64_t)(*a1 + 1);
          v124 = v122 + 1;
          nptr[v122] = **a1;
          *a1 = (char *)v123;
          --*((_DWORD *)a1 + 2);
          memset(&v169, 0, sizeof(v169));
          v125 = mbrtowc_l(v84, nptr, v122 + 1, &v169, v163);
          if (v125 == -2)
          {
            ++v122;
          }
          else
          {
            if (v125)
            {
              if (v125 == -1)
                goto LABEL_475;
            }
            else if ((v15 & 8) == 0)
            {
              *v84 = 0;
            }
            v122 = 0;
            v164 += v124;
            --v40;
            v84 += v41 == 0;
          }
          if (*((int *)a1 + 2) <= 0 && __srefill((uint64_t)a1))
            break;
          if (!v40)
            goto LABEL_451;
        }
        if (v122)
          goto LABEL_475;
LABEL_451:
        v12 = ((v41 >> 3) ^ 1) + v157;
        goto LABEL_469;
      }
      if ((v15 & 8) != 0)
      {
        v112 = 0;
        do
        {
          v113 = *((int *)a1 + 2);
          if (v40 <= v113)
          {
            LODWORD(v112) = v40 + v112;
            *((_DWORD *)a1 + 2) = v113 - v40;
            *a1 += v40;
            goto LABEL_431;
          }
          v112 += v113;
          *a1 += v113;
          v40 -= v113;
        }
        while (!__srefill((uint64_t)a1));
        if (!v112)
          goto LABEL_476;
LABEL_431:
        v145 = v164 + v112;
        goto LABEL_468;
      }
      v42 = (uint64_t *)v168++;
      v43 = __fread(*v42, 1uLL, v40, (uint64_t)a1);
      if (!v43)
        goto LABEL_476;
      v164 += v43;
      goto LABEL_464;
    case 1:
      if (v16)
        v44 = v16;
      else
        v44 = -1;
      if ((v15 & 1) == 0)
      {
        if ((v15 & 8) == 0)
        {
          v45 = (char **)v168++;
          v46 = *v45;
          v167 = v46;
          v47 = *a1;
          v48 = v46;
          if (*((_BYTE *)v171 + **a1))
          {
            while (1)
            {
              --*((_DWORD *)a1 + 2);
              *a1 = v47 + 1;
              v49 = *v47;
              v50 = v167++;
              *v50 = v49;
              if (!--v44)
              {
LABEL_135:
                v48 = v167;
                goto LABEL_136;
              }
              if (*((int *)a1 + 2) <= 0 && __srefill((uint64_t)a1))
                break;
              v47 = *a1;
              if (!*((_BYTE *)v171 + **a1))
                goto LABEL_135;
            }
            v48 = v167;
            if (v167 == v46)
              goto LABEL_476;
          }
LABEL_136:
          v51 = (_DWORD)v48 - (_DWORD)v46;
          if ((_DWORD)v48 != (_DWORD)v46)
          {
            *v48 = 0;
            v12 = (v12 + 1);
            if (off_1EDF54E10)
              off_1EDF54E10(v46);
            goto LABEL_445;
          }
          return v12;
        }
        v114 = *a1;
        if (!*((_BYTE *)v171 + **a1))
          return v12;
        v51 = 0;
        v115 = 1;
        while (1)
        {
          v116 = v115;
          v117 = *((_DWORD *)a1 + 2);
          *((_DWORD *)a1 + 2) = v117 - 1;
          *a1 = ++v114;
          if (v44 == v116)
            break;
          ++v51;
          if (v117 <= 1)
          {
            if (__srefill((uint64_t)a1))
              goto LABEL_445;
            v114 = *a1;
          }
          v115 = v116 + 1;
          if (!*((_BYTE *)v171 + *v114))
          {
            v51 = v116;
            goto LABEL_445;
          }
        }
        v51 = v44;
LABEL_445:
        v145 = v51 + v164;
        goto LABEL_468;
      }
      v165 = 0;
      v157 = v12;
      if ((v15 & 8) != 0)
      {
        v86 = &v165;
      }
      else
      {
        v85 = v168++;
        v86 = *v85;
      }
      v126 = 0;
      v51 = 0;
      while (2)
      {
        if (v126 == v161)
          goto LABEL_475;
        v127 = (uint64_t)(*a1 + 1);
        v128 = v126 + 1;
        nptr[v126] = **a1;
        *a1 = (char *)v127;
        --*((_DWORD *)a1 + 2);
        memset(&v169, 0, sizeof(v169));
        v129 = mbrtowc_l(&v165, nptr, v126 + 1, &v169, v163);
        if (v129 == -2)
        {
          ++v126;
          goto LABEL_363;
        }
        if (v129)
        {
          if (v129 == -1)
            goto LABEL_475;
          LODWORD(v129) = v165;
        }
        else
        {
          v165 = 0;
        }
        if (wctob_l(v129, v163) == -1 || *((_BYTE *)v171 + wctob_l(v165, v163)))
        {
          if ((v15 & 8) == 0)
            *v86++ = v165;
          v126 = 0;
          v164 += v128;
          --v44;
          ++v51;
LABEL_363:
          if (*((int *)a1 + 2) <= 0 && __srefill((uint64_t)a1) || !v44)
          {
            if (!v126)
              goto LABEL_367;
            goto LABEL_475;
          }
          continue;
        }
        break;
      }
      if (v126 != -1)
      {
        v149 = v126 + 1 - 1;
        do
          __ungetc(nptr[v149], (uint64_t)a1);
        while ((_DWORD)v149--);
      }
LABEL_367:
      if (v51)
      {
        v12 = v157;
        if ((v15 & 8) == 0)
        {
          *v86 = 0;
          v12 = v157 + 1;
        }
        goto LABEL_445;
      }
      return v157;
    case 2:
      if (v16)
        v52 = v16;
      else
        v52 = -1;
      if ((v15 & 1) == 0)
      {
        if ((v15 & 8) == 0)
        {
          v53 = (char **)v168++;
          v54 = *v53;
          v167 = *v53;
          do
          {
            --v52;
            v55 = *a1;
            if (**a1 < 0)
              v56 = *(_RuneLocale **)(*((_QWORD *)v162 + 166) + 120);
            else
              v56 = &_DefaultRuneLocale;
            if ((v56->__runetype[**a1] & 0x4000) != 0)
              break;
            --*((_DWORD *)a1 + 2);
            *a1 = v55 + 1;
            v57 = *v55;
            v58 = v167++;
            *v58 = v57;
            if (!v52)
              break;
          }
          while (*((int *)a1 + 2) > 0 || !__srefill((uint64_t)a1));
          *v167 = 0;
          v164 += (_DWORD)v167 - (_DWORD)v54;
          v12 = (v12 + 1);
          if (off_1EDF54E10)
            off_1EDF54E10(v54);
          goto LABEL_469;
        }
        for (j = 0; ; ++j)
        {
          v119 = *a1;
          if (**a1 < 0)
            v120 = *(_RuneLocale **)(*((_QWORD *)v162 + 166) + 120);
          else
            v120 = &_DefaultRuneLocale;
          if ((v120->__runetype[**a1] & 0x4000) != 0)
          {
            LODWORD(v52) = j;
            goto LABEL_467;
          }
          v121 = *((_DWORD *)a1 + 2);
          *((_DWORD *)a1 + 2) = v121 - 1;
          *a1 = v119 + 1;
          if (v52 - 1 == j)
            goto LABEL_467;
          if (v121 <= 1 && __srefill((uint64_t)a1))
            break;
        }
        LODWORD(v52) = j + 1;
LABEL_467:
        v145 = v52 + v164;
        goto LABEL_468;
      }
      v165 = 0;
      v157 = v12;
      if ((v15 & 8) != 0)
      {
        v88 = &v165;
      }
      else
      {
        v87 = v168++;
        v88 = *v87;
      }
      v130 = 0;
      while (1)
      {
        if (v130 == v161)
          goto LABEL_475;
        v131 = (uint64_t)(*a1 + 1);
        v132 = v130 + 1;
        nptr[v130] = **a1;
        *a1 = (char *)v131;
        --*((_DWORD *)a1 + 2);
        memset(&v169, 0, sizeof(v169));
        v133 = mbrtowc_l(v88, nptr, v130 + 1, &v169, v163);
        if (v133 == -2)
        {
          ++v130;
          goto LABEL_385;
        }
        if (!v133)
          break;
        if (v133 == -1)
          goto LABEL_475;
        v133 = *v88;
        if (v133 <= 0x7F)
          goto LABEL_381;
        if (v133 < 0x100)
        {
          v135 = (char *)(*(_QWORD *)(*((_QWORD *)v162 + 166) + 120) + 4 * v133);
          goto LABEL_382;
        }
        LOWORD(v134) = ___runetype_l(v133, v163);
LABEL_383:
        if ((v134 & 0x4000) != 0)
        {
          if (v130 != -1)
          {
            v147 = v130 + 1 - 1;
            do
              __ungetc(nptr[v147], (uint64_t)a1);
            while ((_DWORD)v147--);
          }
LABEL_462:
          if ((v15 & 8) != 0)
          {
            v12 = v12;
          }
          else
          {
            *v88 = 0;
LABEL_464:
            v12 = (v12 + 1);
          }
          goto LABEL_469;
        }
        v130 = 0;
        v164 += v132;
        --v52;
        v88 += (v15 & 8) == 0;
LABEL_385:
        if (*((int *)a1 + 2) <= 0 && __srefill((uint64_t)a1))
        {
          if (!v130)
            goto LABEL_462;
LABEL_475:
          *((_WORD *)a1 + 8) |= 0x40u;
          LODWORD(v12) = v157;
LABEL_476:
          if ((_DWORD)v12)
            return v12;
          else
            return 0xFFFFFFFFLL;
        }
        if (!v52)
          goto LABEL_462;
      }
      *v88 = 0;
LABEL_381:
      v135 = &_DefaultRuneLocale.__magic[4 * v133];
LABEL_382:
      v134 = *((_DWORD *)v135 + 15);
      goto LABEL_383;
    case 3:
      v59 = v16 - 1;
      if (v16 - 1 >= 0x1FF)
        v59 = 511;
      v60 = v59 + 1;
      v61 = v15 | 0x2C0;
      v167 = nptr;
      v62 = *(_QWORD *)base;
      while (2)
      {
        v63 = **a1;
        switch(**a1)
        {
          case '+':
          case '-':
            if ((v61 & 0x40) != 0)
            {
              v61 = v61 & 0xFFFEFFBF | 0x10000;
              goto LABEL_165;
            }
            goto LABEL_193;
          case ',':
          case '.':
          case '/':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'G':
          case 'H':
          case 'I':
          case 'J':
          case 'K':
          case 'L':
          case 'M':
          case 'N':
          case 'O':
          case 'P':
          case 'Q':
          case 'R':
          case 'S':
          case 'T':
          case 'U':
          case 'V':
          case 'W':
          case 'Y':
          case 'Z':
          case '[':
          case '\\':
          case ']':
          case '^':
          case '_':
            goto LABEL_193;
          case '0':
            v67 = v61 | 0x100;
            v68 = (_DWORD)v62 == 0;
            if ((_DWORD)v62)
              v62 = v62;
            else
              v62 = 8;
            if (!v68)
              v67 = v61;
            if ((v67 & 0x200) != 0)
              v61 = v67 & 0xFFFFFD3F;
            else
              v61 = v67 & 0xFFFFFE3F;
            goto LABEL_165;
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
            v62 = __svfscanf_l_basefix[(int)v62];
            goto LABEL_164;
          case '8':
          case '9':
            v64 = (int)v62;
            v62 = __svfscanf_l_basefix[(int)v62];
            if ((unint64_t)(v64 - 1) >= 8)
              goto LABEL_164;
            goto LABEL_193;
          case 'A':
          case 'B':
          case 'C':
          case 'D':
          case 'E':
          case 'F':
          case 'a':
          case 'b':
          case 'c':
          case 'd':
          case 'e':
          case 'f':
            if ((int)v62 < 11)
              goto LABEL_193;
LABEL_164:
            v61 &= 0xFFFFFE3F;
            goto LABEL_165;
          case 'X':
            goto LABEL_172;
          default:
            if (v63 != 120)
              goto LABEL_193;
LABEL_172:
            if ((v61 & 0x100) == 0 || v167 != &nptr[(HIWORD(v61) & 1) + 1])
              goto LABEL_193;
            v61 &= ~0x100u;
            v62 = 16;
LABEL_165:
            v65 = v167++;
            *v65 = v63;
            v66 = *((_DWORD *)a1 + 2);
            *((_DWORD *)a1 + 2) = v66 - 1;
            if (v66 >= 2)
            {
              ++*a1;
              if (!--v60)
                goto LABEL_193;
              continue;
            }
            if (!__srefill((uint64_t)a1))
            {
              if (--v60)
                continue;
            }
LABEL_193:
            v77 = v167;
            if ((v61 & 0x80) != 0)
            {
              if (v167 > nptr)
              {
                --v167;
                __ungetc(*(v77 - 1), (uint64_t)a1);
              }
              return v12;
            }
            v78 = *(v167 - 1);
            if ((v78 & 0xFFFFFFDF) == 0x58)
            {
              --v167;
              __ungetc(v78, (uint64_t)a1);
              v77 = v167;
            }
            *(_QWORD *)base = v62;
            if ((v61 & 8) != 0)
              goto LABEL_460;
            *v77 = 0;
            if ((v61 & 0x8000) != 0)
              v79 = strtoumax_l(nptr, 0, v62, v163);
            else
              v79 = strtoimax_l(nptr, 0, v62, v163);
            v136 = v79;
            v137 = v168++;
            v138 = *v137;
            if ((v61 & 0x10) != 0)
              goto LABEL_402;
            if ((v61 & 0x4000) != 0)
            {
              if (off_1EDF54E20)
                off_1EDF54E20(v138, 1);
              *(_BYTE *)v138 = v136;
            }
            else if ((v61 & 4) != 0)
            {
              if (off_1EDF54E20)
                off_1EDF54E20(v138, 2);
              *(_WORD *)v138 = v136;
            }
            else if ((v61 & 1) != 0
                   || (v61 & 0x400) != 0
                   || (v61 & 0x800) != 0
                   || (v61 & 0x1000) != 0
                   || (v61 & 0x2000) != 0)
            {
LABEL_402:
              if (off_1EDF54E20)
                off_1EDF54E20(v138, 8);
              *(_QWORD *)v138 = v136;
            }
            else
            {
              if (off_1EDF54E20)
                off_1EDF54E20(v138, 4);
              *v138 = v136;
            }
            v12 = (v12 + 1);
            LODWORD(v77) = (_DWORD)v167;
LABEL_460:
            v164 += (_DWORD)v77 - nptr;
            break;
        }
        goto LABEL_469;
      }
    case 4:
      decimal_point = localeconv_l(v163)->decimal_point;
      if (v16)
        v70 = v16 + 1;
      else
        v70 = 513;
      v71 = (char *)__parsefloat_buf(v70);
      if (!v71)
        return v12;
      v72 = v70 - 1;
      v160 = v71 - 1;
      v73 = (uint64_t)(v70 - 1) > 0;
      v156 = v71;
      if (v16 && v72 < 1)
      {
        v74 = v71;
        goto LABEL_190;
      }
      v154 = decimal_point;
      v155 = v70;
      v89 = 0;
      v90 = 0;
      v91 = 0;
      v92 = 0;
      v152 = 0;
      v93 = (unint64_t)&v71[v72];
      v74 = v71;
      v157 = v12;
      break;
    default:
      goto LABEL_469;
  }
LABEL_213:
  v94 = **a1;
  v95 = &_DefaultRuneLocale.__runetype[v94];
  v96 = v94 & 0xFFFFFFDF;
  v97 = v90;
  while (2)
  {
    switch(v91)
    {
      case 0:
        v91 = 1;
        goto LABEL_233;
      case 1:
        v91 = 6;
        if ((int)v94 <= 77)
        {
          if ((_DWORD)v94 == 48)
          {
            v91 = 5;
LABEL_278:
            v160 = v74;
LABEL_291:
            v90 = v97;
            if (!v73)
              goto LABEL_292;
            goto LABEL_294;
          }
          if ((_DWORD)v94 == 73)
            goto LABEL_249;
        }
        else
        {
          switch((_DWORD)v94)
          {
            case 'N':
              goto LABEL_241;
            case 'i':
LABEL_249:
              v91 = 2;
              goto LABEL_291;
            case 'n':
LABEL_241:
              v91 = 3;
              goto LABEL_291;
          }
        }
        continue;
      case 2:
        if (v152 > 6 || (_DWORD)v94 != aNfinity[v152] && (_DWORD)v94 != aNfinity_0[v152])
          goto LABEL_190;
        if (v152 == 6 || v152 == 1)
          v160 = v74;
        ++v152;
        goto LABEL_249;
      case 3:
        if (v152 != 2)
        {
          if (v152 == 1)
          {
            if (v96 != 78)
              goto LABEL_190;
            v91 = 3;
          }
          else
          {
            if (!v152)
            {
              if (v96 != 65)
                goto LABEL_190;
LABEL_284:
              v91 = 3;
LABEL_290:
              ++v152;
              goto LABEL_291;
            }
            if ((_DWORD)v94 != 41)
            {
              if ((v94 & 0x80) != 0)
                v95 = (__uint32_t *)(*(_QWORD *)(*((_QWORD *)v162 + 166) + 120) + 4 * v94 + 60);
              v91 = 3;
              if ((*((_BYTE *)v95 + 1) & 5) == 0 && (_DWORD)v94 != 95)
                goto LABEL_190;
              goto LABEL_290;
            }
            v91 = 4;
          }
          v160 = v74;
          goto LABEL_290;
        }
        if ((_DWORD)v94 != 40)
          goto LABEL_190;
        goto LABEL_284;
      case 4:
        goto LABEL_190;
      case 5:
        v97 = 1;
        v91 = 6;
        if (v96 == 88)
          goto LABEL_305;
        continue;
      case 6:
        if ((v89 & 1) != 0)
        {
          v98 = &_DefaultRuneLocale.__runetype[**a1];
          if ((v94 & 0x80) != 0)
            v98 = (__uint32_t *)(*(_QWORD *)(*((_QWORD *)v162 + 166) + 120) + 4 * v94 + 60);
          if ((*((_BYTE *)v98 + 2) & 1) != 0)
          {
            v90 = 1;
            v91 = 6;
LABEL_304:
            v160 = v74;
LABEL_305:
            v89 = 1;
            if (!v73)
            {
LABEL_292:
              v153 = v92;
              v104 = v74;
              v105 = (char *)__parsefloat_buf(v155 + 513);
              if (!v105)
                return v157;
              v93 = (unint64_t)&v105[v155 + 512];
              v74 = &v105[v104 - v156];
              v160 = &v105[v160 - v156];
              v155 += 513;
              v156 = v105;
              v12 = v157;
              v92 = v153;
              decimal_point = v154;
              v90 = v90;
            }
LABEL_294:
            *v74++ = v94;
            v106 = *((_DWORD *)a1 + 2);
            *((_DWORD *)a1 + 2) = v106 - 1;
            if (v106 < 2)
            {
              v107 = v92;
              v108 = v74;
              v109 = v93;
              v110 = __srefill((uint64_t)a1);
              v74 = v108;
              v73 = (unint64_t)v108 < v109;
              v111 = v16 == 0;
              if ((unint64_t)v108 < v109)
                v111 = 1;
              if (v110)
              {
                v12 = v157;
                goto LABEL_190;
              }
              v93 = v109;
              decimal_point = v154;
              v92 = v107;
              v12 = v157;
              if (!v111)
                goto LABEL_190;
              goto LABEL_213;
            }
            ++*a1;
            v73 = (unint64_t)v74 < v93;
            if (v16 && (unint64_t)v74 >= v93)
            {
LABEL_190:
              for (k = v74 - 1; v160 < k; --k)
              {
                v76 = *k;
                __ungetc(v76, (uint64_t)a1);
              }
              v160[1] = 0;
              if ((_DWORD)v160 + 1 == (_DWORD)v156)
                return v12;
              if ((v15 & 8) == 0)
              {
                v80 = (float **)v168++;
                v81 = *v80;
                if ((v15 & 2) != 0)
                {
                  v139 = strtold_l(v156, &v167, v163);
                }
                else
                {
                  if ((v15 & 1) == 0)
                  {
                    v82 = strtof_l(v156, &v167, v163);
                    if (off_1EDF54E20)
                      off_1EDF54E20(v81, 4);
                    *v81 = v82;
                    goto LABEL_441;
                  }
                  v139 = strtod_l(v156, &v167, v163);
                }
                v146 = v139;
                if (off_1EDF54E20)
                  off_1EDF54E20(v81, 8);
                *(double *)v81 = v146;
LABEL_441:
                v12 = (v12 + 1);
              }
              v145 = v164 + (_DWORD)v160 + 1 - (_DWORD)v156;
LABEL_468:
              v164 = v145;
LABEL_469:
              v11 = *a3;
              if (!*a3)
                return v12;
              goto LABEL_17;
            }
            goto LABEL_213;
          }
        }
        v99 = &_DefaultRuneLocale.__runetype[**a1];
        if ((v94 & 0x80) != 0)
          v99 = (__uint32_t *)(*(_QWORD *)(*((_QWORD *)v162 + 166) + 120) + 4 * v94 + 60);
        v91 = 7;
        if ((*((_BYTE *)v99 + 1) & 4) != 0)
        {
          v90 = 1;
          v91 = 6;
LABEL_275:
          v160 = v74;
          if (!v73)
            goto LABEL_292;
          goto LABEL_294;
        }
        continue;
      case 7:
        if ((_DWORD)v94 == decimal_point[(int)v92])
        {
          if (decimal_point[(int)v92 + 1])
            v91 = 7;
          else
            v91 = 8;
          v103 = v160;
          if (((decimal_point[(int)v92 + 1] == 0) & v97) != 0)
            v103 = v74;
          v160 = v103;
          v92 = (int)v92 + 1;
          goto LABEL_291;
        }
        v91 = 8;
        if ((_DWORD)v92)
          goto LABEL_190;
        continue;
      case 8:
        v100 = (v96 != 69) | v89;
        v101 = v96 == 80;
        if ((v100 & 1) == 0 || (v101 & v89) != 0)
        {
          if ((v97 & 1) != 0)
          {
            v90 = 1;
            v91 = 9;
            if (!v73)
              goto LABEL_292;
            goto LABEL_294;
          }
          goto LABEL_190;
        }
        if ((v89 & 1) != 0)
        {
          v102 = &_DefaultRuneLocale.__runetype[**a1];
          if ((v94 & 0x80) != 0)
            v102 = (__uint32_t *)(*(_QWORD *)(*((_QWORD *)v162 + 166) + 120) + 4 * v94 + 60);
          if ((*((_BYTE *)v102 + 2) & 1) != 0)
          {
            v90 = 1;
            v91 = 8;
            goto LABEL_304;
          }
        }
        if ((v94 & 0x80) != 0)
          v95 = (__uint32_t *)(*(_QWORD *)(*((_QWORD *)v162 + 166) + 120) + 4 * v94 + 60);
        if ((*((_BYTE *)v95 + 1) & 4) == 0)
          goto LABEL_190;
        v90 = 1;
        v91 = 8;
        goto LABEL_275;
      case 9:
        v91 = 10;
LABEL_233:
        if ((_DWORD)v94 == 43 || (_DWORD)v94 == 45)
          goto LABEL_291;
        continue;
      case 10:
        if ((v94 & 0x80) != 0)
          v95 = (__uint32_t *)(*(_QWORD *)(*((_QWORD *)v162 + 166) + 120) + 4 * v94 + 60);
        if ((*((_BYTE *)v95 + 1) & 4) == 0)
          goto LABEL_190;
        v91 = 10;
        goto LABEL_278;
      default:
        abort_report_np((uint64_t)"%s:%s:%u: unknown state %d");
    }
  }
}

intmax_t strtoimax_l(const char *nptr, char **endptr, int base, locale_t a4)
{
  locale_t v6;
  locale_t v7;
  const char *v8;
  int v9;
  int v10;
  _RuneLocale *v11;
  char v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  _BOOL4 v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 v22;
  int v23;
  char v24;
  int v25;
  char *v26;
  int *v28;

  v6 = (locale_t)&__global_locale;
  if (a4 == (locale_t)-1)
    v7 = (locale_t)&__global_locale;
  else
    v7 = a4;
  if (!a4)
    v7 = (locale_t)&__c_locale;
  if (v7 != (locale_t)-1)
    v6 = v7;
  if (!v7)
    v6 = (locale_t)&__c_locale;
  v8 = nptr;
  do
  {
    v10 = *v8++;
    v9 = v10;
    v11 = &_DefaultRuneLocale;
    if (v10 < 0)
      v11 = *(_RuneLocale **)(*((_QWORD *)v6 + 166) + 120);
  }
  while ((v11->__runetype[v9] & 0x4000) != 0);
  if (v9 == 43 || v9 == 45)
  {
    v13 = *v8++;
    v12 = v13;
  }
  else
  {
    v12 = v9;
  }
  if ((base & 0xFFFFFFEF) != 0 || v12 != 48)
  {
    v16 = base == 0;
    if (v12 != 48)
    {
      v17 = 10;
      goto LABEL_29;
    }
  }
  else
  {
    if ((*(unsigned __int8 *)v8 | 0x20) == 0x78)
    {
      v12 = v8[1];
      if ((v12 - 48) < 0xAu
        || (v14 = *((unsigned __int8 *)v8 + 1) - 65, v14 <= 0x25) && ((1 << v14) & 0x3F0000003FLL) != 0)
      {
        v8 += 2;
        v15 = 16;
        goto LABEL_34;
      }
    }
    v16 = base == 0;
    v12 = 48;
  }
  v17 = 8;
LABEL_29:
  if (v16)
    v15 = v17;
  else
    v15 = base;
  if (v15 - 37 < 0xFFFFFFDD)
  {
    v18 = 0;
LABEL_58:
    *__error() = 22;
    v25 = 1;
    v20 = v18;
    if (!endptr)
      return v20;
    goto LABEL_59;
  }
LABEL_34:
  v18 = 0;
  v19 = 0;
  if (v9 == 45)
    v20 = 0x8000000000000000;
  else
    v20 = 0x7FFFFFFFFFFFFFFFLL;
  v21 = v20 / v15;
  while (1)
  {
    v22 = v12 - 48;
    if ((v12 - 48) >= 0xAu)
    {
      if ((v12 - 65) > 0x19u)
      {
        if ((v12 - 97) > 0x19u)
          break;
        v22 = v12 - 87;
      }
      else
      {
        v22 = v12 - 55;
      }
    }
    if ((int)v15 <= v22)
      break;
    v23 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v21)
    {
      if (v18 == v21 && v22 > (int)(v20 % v15))
      {
        v18 = v20 / v15;
      }
      else
      {
        v18 = v18 * v15 + v22;
        v23 = 1;
      }
    }
    v24 = *v8++;
    v12 = v24;
    v19 = v23;
  }
  if ((v19 & 0x80000000) == 0)
  {
    if (v19)
    {
      v25 = 0;
      if (v9 == 45)
        v20 = -(uint64_t)v18;
      else
        v20 = v18;
      if (!endptr)
        return v20;
      goto LABEL_59;
    }
    goto LABEL_58;
  }
  v28 = __error();
  v25 = 0;
  *v28 = 34;
  if (!endptr)
    return v20;
LABEL_59:
  v26 = (char *)(v8 - 1);
  if (v25)
    v26 = (char *)nptr;
  *endptr = v26;
  return v20;
}

uintmax_t strtoumax_l(const char *nptr, char **endptr, int base, locale_t a4)
{
  locale_t v6;
  locale_t v7;
  const char *v8;
  int v9;
  int v10;
  _RuneLocale *v11;
  char v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  _BOOL4 v16;
  int v17;
  uintmax_t v18;
  int v19;
  unint64_t v20;
  unsigned __int8 v21;
  int v22;
  char v23;
  int v24;
  char *v25;
  int *v27;

  v6 = (locale_t)&__global_locale;
  if (a4 == (locale_t)-1)
    v7 = (locale_t)&__global_locale;
  else
    v7 = a4;
  if (!a4)
    v7 = (locale_t)&__c_locale;
  if (v7 != (locale_t)-1)
    v6 = v7;
  if (!v7)
    v6 = (locale_t)&__c_locale;
  v8 = nptr;
  do
  {
    v10 = *v8++;
    v9 = v10;
    v11 = &_DefaultRuneLocale;
    if (v10 < 0)
      v11 = *(_RuneLocale **)(*((_QWORD *)v6 + 166) + 120);
  }
  while ((v11->__runetype[v9] & 0x4000) != 0);
  if (v9 == 43 || v9 == 45)
  {
    v13 = *v8++;
    v12 = v13;
  }
  else
  {
    v12 = v9;
  }
  if ((base & 0xFFFFFFEF) != 0 || v12 != 48)
  {
    v16 = base == 0;
    if (v12 != 48)
    {
      v17 = 10;
      goto LABEL_29;
    }
  }
  else
  {
    if ((*(unsigned __int8 *)v8 | 0x20) == 0x78)
    {
      v12 = v8[1];
      if ((v12 - 48) < 0xAu
        || (v14 = *((unsigned __int8 *)v8 + 1) - 65, v14 <= 0x25) && ((1 << v14) & 0x3F0000003FLL) != 0)
      {
        v8 += 2;
        v15 = 16;
        goto LABEL_34;
      }
    }
    v16 = base == 0;
    v12 = 48;
  }
  v17 = 8;
LABEL_29:
  if (v16)
    v15 = v17;
  else
    v15 = base;
  if (v15 - 37 < 0xFFFFFFDD)
  {
    v18 = 0;
    goto LABEL_54;
  }
LABEL_34:
  v18 = 0;
  v19 = 0;
  v20 = 0xFFFFFFFFFFFFFFFFLL / v15;
  while (1)
  {
    v21 = v12 - 48;
    if ((v12 - 48) >= 0xAu)
    {
      if ((v12 - 65) > 0x19u)
      {
        if ((v12 - 97) > 0x19u)
          break;
        v21 = v12 - 87;
      }
      else
      {
        v21 = v12 - 55;
      }
    }
    if ((int)v15 <= v21)
      break;
    v22 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v20)
    {
      if (v18 == v20 && v21 > (int)~(v20 * v15))
      {
        v18 = 0xFFFFFFFFFFFFFFFFLL / v15;
      }
      else
      {
        v18 = v18 * v15 + v21;
        v22 = 1;
      }
    }
    v23 = *v8++;
    v12 = v23;
    v19 = v22;
  }
  if (v19 < 0)
  {
    v27 = __error();
    v24 = 0;
    *v27 = 34;
    v18 = -1;
    if (!endptr)
      return v18;
    goto LABEL_55;
  }
  if (!v19)
  {
LABEL_54:
    *__error() = 22;
    v24 = 1;
    if (!endptr)
      return v18;
    goto LABEL_55;
  }
  v24 = 0;
  if (v9 == 45)
    v18 = -(uint64_t)v18;
  if (endptr)
  {
LABEL_55:
    v25 = (char *)(v8 - 1);
    if (v24)
      v25 = (char *)nptr;
    *endptr = v25;
  }
  return v18;
}

float strtof(const char *a1, char **a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  float v6;

  v6 = 0.0;
  v2 = __locale_key;
  v3 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3)
    v4 = v3;
  else
    v4 = &__global_locale;
  _ffpp_strtoencf32_l(&v6, (uint64_t)a1, (uint64_t)a2, (unint64_t)v4);
  return v6;
}

double strtod(const char *a1, char **a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  double v6;

  v6 = 0.0;
  v2 = __locale_key;
  v3 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3)
    v4 = v3;
  else
    v4 = &__global_locale;
  _ffpp_strtoencf64_l(&v6, (uint64_t)a1, (uint64_t)a2, (unint64_t)v4);
  return v6;
}

float strtof_l(const char *a1, char **a2, locale_t a3)
{
  float v4;

  v4 = 0.0;
  _ffpp_strtoencf32_l(&v4, (uint64_t)a1, (uint64_t)a2, (unint64_t)a3);
  return v4;
}

uint64_t _ffpp_strtoencf32_l(float *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;
  __int16 v5;
  int v6;
  int v7;
  float v8;
  float v9;
  uint64_t v10;
  unsigned int v11;
  __int16 v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33[32];

  v24 = xmmword_18A0E4A70;
  v25 = 0x28FFFFFFD2;
  v26 = 113;
  v27 = a1;
  v28 = a2;
  v29 = a3;
  v30 = a4;
  v31 = 0uLL;
  v32 = 0uLL;
  result = fastParse64((uint64_t)&v24);
  if ((_DWORD)result)
  {
    v5 = WORD2(v32);
    v6 = v31;
    if ((DWORD1(v32) + 10) > 0x14 || (int)v31 > 7)
    {
      result = fegetround();
      if (v6 >= 20)
        v10 = 36;
      else
        v10 = 4;
      v11 = __clz(*((unint64_t *)&v30 + 1));
      if (v11 >= 5 && v6 >= 20)
        _ffpp_strtoencf32_l_cold_1();
      v12 = v6 + v5 - 19;
      if (v6 < 20)
        v12 = v5;
      v13 = (powersOf10_Float[v12 + 70] * (unsigned __int128)(unint64_t)(*((_QWORD *)&v30 + 1) << v11)) >> 64;
      v14 = __clz(v13);
      if (v14 >= 2)
        _ffpp_strtoencf32_l_cold_2();
      v15 = (unint64_t)(55732705 * v12) >> 24;
      v16 = v13 << v14;
      v17 = v16 + v10;
      HIDWORD(v19) = result;
      LODWORD(v19) = result;
      v18 = v19 >> 22;
      if (v18 == 1)
      {
        if (!BYTE8(v32))
        {
          v16 += 0xFFFFFFFFFFLL;
          v17 += 0x10000000000;
        }
      }
      else if (v18 != 3)
      {
        if (v18 == 2)
        {
          v17 += 0x10000000000;
          if (BYTE8(v32))
            v16 += 0xFFFFFFFFFFLL;
          else
            v17 = v16 + 4;
        }
        else
        {
          v16 += 0x7FFFFFFFFFLL;
          v17 += 0x8000000000;
        }
      }
      v20 = v16 >> 40;
      v21 = v15 - v11 - v14;
      if (!(_DWORD)v20)
        ++v21;
      v22 = v21 + 65;
      if (v22 >= 129)
        return overflow((uint64_t)&v24);
      if (v22 > -126)
      {
        if (v17 >> 40 == (_DWORD)v20)
        {
          *(_DWORD *)v27 = (((v17 >> 40) & 0x7FFFFF | ((unsigned __int16)v22 << 23)) + 1056964608) | ((BYTE8(v32) != 0) << 31);
          return result;
        }
      }
      else if (v22 <= 0xFFFFFF6A)
      {
        return underflow((uint64_t)&v24);
      }
      v23 = fegetround();
      return generalSlowpath((uint64_t)&v24, v23, v33, 32);
    }
    else
    {
      if (BYTE8(v32))
        v7 = -DWORD2(v30);
      else
        v7 = DWORD2(v30);
      v8 = (float)v7;
      if ((DWORD1(v32) & 0x80000000) != 0)
        v9 = v8 / _ffpp_strtoencf32_l_floatPowerOf10[-DWORD1(v32)];
      else
        v9 = v8 * _ffpp_strtoencf32_l_floatPowerOf10[DWORD1(v32)];
      *v27 = v9;
    }
  }
  return result;
}

double strtod_l(const char *a1, char **a2, locale_t a3)
{
  double v4;

  v4 = 0.0;
  _ffpp_strtoencf64_l(&v4, (uint64_t)a1, (uint64_t)a2, (unint64_t)a3);
  return v4;
}

uint64_t _ffpp_strtoencf64_l(double *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;
  __int16 v5;
  int v6;
  double *v7;
  double v8;
  double v9;
  uint64_t v10;
  unsigned int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  _BOOL4 v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  double v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int v43[164];

  v34 = xmmword_18A0E4A80;
  v35 = 0x136FFFFFEBBLL;
  v36 = 768;
  v37 = a1;
  v38 = a2;
  v39 = a3;
  v40 = a4;
  v41 = 0uLL;
  v42 = 0uLL;
  result = fastParse64((uint64_t)&v34);
  if (!(_DWORD)result)
    return result;
  v5 = WORD2(v42);
  if ((DWORD1(v42) + 22) >= 0x29)
  {
    v6 = v41;
    goto LABEL_10;
  }
  if ((DWORD1(v42) & 0x80000000) != 0)
  {
    v6 = v41;
    if ((int)v41 <= 15)
    {
      v26 = *((_QWORD *)&v40 + 1);
      v7 = v37;
      if (BYTE8(v42))
        v26 = -*((_QWORD *)&v40 + 1);
      v9 = (double)v26 / _ffpp_strtoencf64_l_doublePowerOf10[-DWORD1(v42)];
      goto LABEL_44;
    }
  }
  else
  {
    v6 = v41;
    if (!DWORD1(v42))
    {
      if ((int)v41 > 19)
        goto LABEL_10;
      if (BYTE8(v42))
      {
        if ((*((_QWORD *)&v40 + 1) & 0x8000000000000000) != 0)
          goto LABEL_10;
        v27 = (double)(uint64_t)-*((_QWORD *)&v40 + 1);
      }
      else
      {
        v27 = (double)*((unint64_t *)&v40 + 1);
      }
      *v37 = v27;
      return result;
    }
    if ((int)v41 <= 19)
    {
      v7 = v37;
      v8 = _ffpp_strtoencf64_l_doublePowerOf10[DWORD1(v42)];
      if (BYTE8(v42))
        v8 = -v8;
      v9 = (double)(WORD4(v40) & 0x7FF) * v8 + (double)(*((_QWORD *)&v40 + 1) & 0xFFFFFFFFFFFFF800) * v8;
LABEL_44:
      *v7 = v9;
      return result;
    }
  }
LABEL_10:
  result = fegetround();
  if (v6 >= 20)
    v10 = 80;
  else
    v10 = 12;
  v11 = __clz(*((unint64_t *)&v40 + 1));
  if (v11 >= 5 && v6 >= 20)
    _ffpp_strtoencf64_l_cold_1();
  v12 = v5 + v6 - 19;
  if (v6 < 20)
    v12 = v5;
  v13 = (585 * v12 + 256) >> 14;
  v14 = v12 - 28 * v13;
  v15 = (((powersOf10_Float[v14 + 70] * (unsigned __int128)powersOf10_CoarseBinary64[(__int16)v13 + 15]) >> 64)
       * (unint64_t)(*((_QWORD *)&v40 + 1) << v11)) >> 64;
  v16 = __clz(v15);
  if (v16 >= 3)
    _ffpp_strtoencf64_l_cold_2();
  v17 = v15 << v16;
  v18 = ((unint64_t)(55732705 * (__int16)(28 * v13)) >> 24)
      - v11
      + ((unint64_t)(55732705 * v14) >> 24)
      - v16
      + 66;
  v19 = BYTE8(v42) != 0;
  HIDWORD(v21) = result;
  LODWORD(v21) = result;
  v20 = v21 >> 22;
  if (v20 == 3)
  {
    v22 = 0;
    v23 = v10;
    goto LABEL_30;
  }
  if (v20 != 2)
  {
    if (v20 != 1)
    {
      v23 = v10 | 0x400;
      v22 = 1023;
      goto LABEL_30;
    }
    v19 = BYTE8(v42) == 0;
  }
  if (v19)
    v22 = 2047;
  else
    v22 = 0;
  if (v19)
    v23 = v10 | 0x800;
  else
    v23 = v10;
LABEL_30:
  v24 = v22 + v17;
  if (v24 >= 0x800)
    v25 = v18;
  else
    v25 = v18 + 1;
  if (v25 >= 1025)
    return overflow((uint64_t)&v34);
  if (v25 > -1022)
  {
    if ((v17 + v23) >> 11 == v24 >> 11)
    {
      *(_QWORD *)v37 = ((unint64_t)(v25 + 1022) << 52) | ((unint64_t)(BYTE8(v42) != 0) << 63) | (v24 >> 11) & 0xFFFFFFFFFFFFFLL;
      return result;
    }
    return generalSlowpath((uint64_t)&v34, result, v43, 164);
  }
  if (v25 <= 0xFFFFFBCD)
    return underflow((uint64_t)&v34);
  if (v18 < -1073)
    return generalSlowpath((uint64_t)&v34, result, v43, 164);
  if (v18 >= -1010)
    _ffpp_strtoencf64_l_cold_3();
  v28 = 14 - v18;
  switch(v20)
  {
    case 3:
      goto LABEL_55;
    case 2:
      if (!BYTE8(v42))
        goto LABEL_55;
LABEL_59:
      v29 = ~(-1 << v28);
      v10 = v29 + v10;
      goto LABEL_61;
    case 1:
      if (BYTE8(v42))
      {
LABEL_55:
        v29 = 0;
        goto LABEL_61;
      }
      goto LABEL_59;
  }
  v30 = 1 << (13 - v18);
  v29 = v30 - 1;
  v10 = v30 + v10;
LABEL_61:
  v31 = (v29 + v17) >> v28;
  if ((v10 + v17) >> v28 != v31)
    return generalSlowpath((uint64_t)&v34, result, v43, 164);
  v32 = 1 << (v18 + 50);
  if (v31)
    v32 = v31;
  v33 = v32 | ((unint64_t)(BYTE8(v42) != 0) << 63);
  if (v33 != 0x10000000000000)
  {
    result = (uint64_t)__error();
    *(_DWORD *)result = 34;
  }
  *(_QWORD *)v37 = v33;
  return result;
}

uint64_t fastParse64(uint64_t a1)
{
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  unint64_t StatusReg;
  _RuneLocale *v6;
  _QWORD *v7;
  int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned __int8 **v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unint64_t v25;
  __int128 v26;
  unsigned int v27;
  int v29;
  int v30;
  unsigned int v31;
  _xlocale *v32;
  lconv *v33;
  int v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unsigned __int8 *v40;
  int v41;
  uint64_t v42;
  unsigned __int8 v43;
  int v44;
  int v45;
  _xlocale *v46;
  int v47;
  lconv *v48;
  int v49;
  uint64_t v50;
  int v51;
  int *v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  unsigned __int8 *v56;
  int v57;
  int v58;
  char v59;
  char v60;
  char v61;
  unsigned __int8 **v62;
  int v63;
  _xlocale *v64;
  lconv *v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  BOOL v69;
  unsigned __int8 *v70;
  int v71;
  _QWORD *v72;
  uint64_t result;
  unsigned int v74;
  __int128 v76;
  unsigned int v77;
  int v79;
  unsigned int v80;
  int v81;
  BOOL v82;
  uint64_t v83;
  unsigned __int8 *v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  unint64_t v91;
  int v92;
  unsigned int v93;
  unint64_t v94;
  int v95;
  BOOL v96;
  unint64_t v97;
  unint64_t v98;
  int v99;
  int v100;
  int v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  unint64_t v106;
  unsigned __int8 *v107;
  unsigned int v108;
  int v109;
  int v110;
  unsigned __int8 *v111;
  int v112;
  uint64_t v113;
  unsigned int v114;
  int v115;
  unsigned __int8 *v116;
  int v117;
  unsigned __int8 *v118;
  int v119;
  unsigned __int8 *v120;
  int v121;
  int v122;
  unsigned __int8 *v123;
  int v124;
  unsigned __int8 v125;
  int v126;
  uint64_t v127;
  int v128;
  unsigned __int8 **v129;
  unsigned int v130;
  int v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  _QWORD *v136;
  int v137;
  int v138;
  uint64_t *v139;
  int *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  int v144;

  v2 = *(unsigned __int8 **)(a1 + 40);
  *(_BYTE *)(a1 + 96) = 0;
  v3 = *v2;
  if ((v3 - 48) >= 0xA)
  {
    v4 = __locale_key;
    ++v2;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      if (v3 != 32)
      {
        if (v3 == 43)
          goto LABEL_15;
        if (v3 == 45)
        {
          *(_BYTE *)(a1 + 96) = 1;
          goto LABEL_15;
        }
        v6 = &_DefaultRuneLocale;
        if ((v3 & 0x80) != 0)
        {
          v7 = *(_QWORD **)(StatusReg + 8 * v4);
          if (!v7)
            v7 = &__global_locale;
          v6 = *(_RuneLocale **)(v7[166] + 120);
        }
        if ((v6->__runetype[v3] & 0x4000) == 0)
          break;
      }
      v8 = *v2++;
      v3 = v8;
      if ((v8 - 48) < 0xA)
      {
        --v2;
        goto LABEL_16;
      }
    }
    --v2;
LABEL_15:
    v3 = *v2;
  }
LABEL_16:
  if (v3 > 77)
  {
    if (v3 == 78)
    {
LABEL_20:
      if ((v2[1] | 0x20) == 0x61 && (v2[2] | 0x20) == 0x6E)
      {
        v141 = 0;
        v142 = 0;
        v143 = 0;
        v9 = v2 + 3;
        if (v2[3] == 40)
        {
          v11 = v2 + 4;
          v10 = v2[4];
          if (v10 == 48)
          {
            v12 = 5;
            if (v2[5] == 120)
            {
              v12 = 6;
              v11 = v2 + 6;
            }
            else
            {
              v11 = v2 + 5;
            }
            if (v2[5] == 120)
              v13 = 16;
            else
              v13 = 8;
            v10 = v2[v12];
          }
          else
          {
            v13 = 10;
          }
          v139 = &v141;
          v140 = &v143;
          if (v13 > hexdigit[v10])
          {
            do
            {
              v52 = (int *)v139;
              if (v139 < (uint64_t *)&v143)
              {
                v53 = 0;
                do
                {
                  v54 = v53 + *v52 * (unint64_t)v13;
                  *v52++ = v54;
                  v53 = HIDWORD(v54);
                }
                while (v52 < &v143);
                if (v53)
                {
                  v143 = v53;
                  v140 = &v144;
                }
              }
              addToMP((uint64_t)&v139, hexdigit[*v11]);
              v140 = &v143;
              v55 = *++v11;
              v10 = v55;
            }
            while (v13 > hexdigit[v55]);
          }
          if (v10 == 41)
          {
            v9 = v11 + 1;
          }
          else
          {
            v141 = 0;
            v142 = 0;
            v56 = v11 + 1;
            v143 = 0;
            while (1)
            {
              v57 = *(v56 - 1);
              if (!*(v56 - 1) || v57 == 41)
                break;
              ++v56;
            }
            if (v57 == 41)
              v9 = v56;
          }
        }
        _platform_memmove();
        v58 = *(_DWORD *)(a1 + 12);
        switch(v58)
        {
          case 8:
            *(_BYTE *)(*(_QWORD *)(a1 + 32) + 6) |= 0xF8u;
            if (*(_BYTE *)(a1 + 96))
              v60 = -1;
            else
              v60 = 127;
            *(_BYTE *)(*(_QWORD *)(a1 + 32) + 7) = v60;
            break;
          case 4:
            *(_BYTE *)(*(_QWORD *)(a1 + 32) + 2) |= 0xC0u;
            if (*(_BYTE *)(a1 + 96))
              v61 = -1;
            else
              v61 = 127;
            *(_BYTE *)(*(_QWORD *)(a1 + 32) + 3) = v61;
            break;
          case 2:
            if (*(_BYTE *)(a1 + 96))
              v59 = -2;
            else
              v59 = 126;
            *(_BYTE *)(*(_QWORD *)(a1 + 32) + 1) |= v59;
            break;
        }
        v62 = *(unsigned __int8 ***)(a1 + 48);
        if (v62)
          *v62 = v9;
        return 0;
      }
LABEL_150:
      v72 = *(_QWORD **)(a1 + 48);
      if (v72)
        *v72 = *(_QWORD *)(a1 + 40);
      _platform_bzero();
      return 0;
    }
    if (v3 != 105)
    {
      if (v3 == 110)
        goto LABEL_20;
      goto LABEL_61;
    }
LABEL_33:
    if ((v2[1] | 0x20) == 0x6E && (v2[2] | 0x20) == 0x66)
    {
      v14 = v2 + 3;
      if ((v2[3] | 0x20) == 0x69
        && (v2[4] | 0x20) == 0x6E
        && (v2[5] | 0x20) == 0x69
        && (v2[6] | 0x20) == 0x74
        && (v2[7] | 0x20) == 0x79)
      {
        v14 = v2 + 8;
      }
      v15 = *(unsigned __int8 ***)(a1 + 48);
      if (v15)
        *v15 = v14;
      infinity(a1);
      return 0;
    }
    goto LABEL_150;
  }
  if (v3 == 48)
  {
    v16 = v2 + 1;
    if ((v2[1] | 0x20) != 0x78)
    {
      v40 = v2 - 1;
      do
      {
        v41 = *++v40;
        v3 = v41;
      }
      while (v41 == 48);
      goto LABEL_72;
    }
    v19 = v2[2];
    v18 = v2 + 2;
    v17 = v19;
    v20 = hexdigit[v19];
    if (v20 > 0xF)
    {
      v21 = 0;
      v25 = 0;
      v30 = 0;
      v29 = 0;
      v22 = v18;
      goto LABEL_130;
    }
    v21 = 0;
    v22 = v18;
    do
    {
      v23 = *++v22;
      v17 = v23;
      v21 = 16 * v21 + v20;
      v20 = hexdigit[v23];
    }
    while (v20 <= 0xF && v21 >> 60 == 0);
    if (v20 > 0xF)
    {
      v25 = 0;
    }
    else
    {
      v25 = 0;
      do
      {
        *((_QWORD *)&v26 + 1) = v25;
        *(_QWORD *)&v26 = v21;
        v25 = v26 >> 60;
        v27 = *++v22;
        v17 = v27;
        v21 = 16 * v21 + v20;
        v20 = hexdigit[v27];
      }
      while (v20 <= 0xF && v25 >> 59 == 0);
      if (v20 <= 0xF)
      {
        v29 = 0;
        v30 = 0;
        do
        {
          v29 |= v20;
          v30 += 4;
          v31 = *++v22;
          v17 = v31;
          v20 = hexdigit[v31];
        }
        while (v20 < 0x10);
LABEL_130:
        v63 = (_DWORD)v22 - (_DWORD)v18;
        v64 = *(_xlocale **)(a1 + 56);
        if (v64)
        {
          v65 = localeconv_l(v64);
          v66 = *(unsigned __int8 *)v65->decimal_point;
          if (*v65->decimal_point)
          {
            v67 = 0;
            while (v22[v67] == v66)
            {
              v66 = v65->decimal_point[++v67];
              if (!v66)
              {
                v22 += v67;
                goto LABEL_138;
              }
            }
            v17 = *v22;
LABEL_168:
            if ((v17 | 0x20) == 0x70)
            {
              v81 = v22[1];
              v82 = v81 == 45 || v81 == 43;
              v83 = 1;
              if (v82)
              {
                v83 = 2;
                v84 = v22 + 2;
              }
              else
              {
                v84 = v22 + 1;
              }
              v85 = v22[v83];
              if ((v85 - 58) >= 0xFFFFFFF6)
              {
                v86 = 0;
                v87 = v85 - 48;
                v22 = v84;
                do
                {
                  v88 = v87 + 10 * v86;
                  if (v86 <= 99999999)
                    v86 = v88;
                  else
                    v86 = 99999999;
                  v89 = *++v22;
                  v87 = v89 - 48;
                }
                while ((v89 - 48) < 0xA);
                if (v81 == 45)
                  v90 = -v86;
                else
                  v90 = v86;
                v30 += v90;
              }
            }
            if (!(v21 | v25))
            {
              v91 = 0;
              if (!v63)
                v22 = v16;
              v92 = *(_DWORD *)(a1 + 4);
              goto LABEL_290;
            }
            if (!v25)
            {
              if ((v21 & 0x8000000000000000) != 0)
              {
                v25 = v21 >> 1;
                v21 <<= 63;
                v30 -= 63;
              }
              else
              {
                v30 -= 64;
                v25 = v21;
                v21 = 0;
              }
            }
            v93 = __clz(v25);
            v94 = v21 << (v93 - 1);
            v95 = v30 - (v93 - 1);
            v96 = v93 >= 2;
            if (v93 >= 2)
            {
              v97 = (v25 << (v93 - 1)) | (v21 >> (65 - v93));
            }
            else
            {
              v95 = v30;
              v97 = v25;
            }
            if (v96)
              v98 = v94;
            else
              v98 = v21;
            v92 = v95 + 127;
            v91 = v98 | (v29 != 0);
            if (v95 + 127 > *(_DWORD *)(a1 + 8))
              goto LABEL_290;
            v100 = *(_DWORD *)a1;
            v99 = *(_DWORD *)(a1 + 4);
            if (v92 <= v99 - *(_DWORD *)a1)
              goto LABEL_290;
            v101 = v99 - (v95 + v100);
            if (v92 <= v99)
              v102 = v101 + 1;
            else
              v102 = 127 - v100;
            if (v92 <= v99)
              v92 = *(_DWORD *)(a1 + 4);
            if (v102 > 63)
            {
              v104 = 0;
              v103 = (v97 << -(char)v102) | (v91 >> v102) | (v91 << -(char)v102 != 0);
              v91 = v97 >> v102;
            }
            else
            {
              v103 = v91 << -(char)v102;
              v91 = (v97 << -(char)v102) | (v91 >> v102);
              v104 = v97 >> v102;
            }
            HIDWORD(v106) = fegetround();
            LODWORD(v106) = HIDWORD(v106);
            v105 = v106 >> 22;
            switch(v105)
            {
              case 1:
                if (*(_BYTE *)(a1 + 96))
                  goto LABEL_279;
                break;
              case 3:
                goto LABEL_279;
              case 2:
                if (!*(_BYTE *)(a1 + 96))
                  goto LABEL_279;
                break;
              default:
                if (v103 <= 0x8000000000000000 && (v103 != 0x8000000000000000 || (v91 & 1) == 0))
                  goto LABEL_279;
                goto LABEL_277;
            }
            if (!v103)
              goto LABEL_279;
LABEL_277:
            v96 = __CFADD__(v91++, 1);
            if (v96)
              ++v104;
LABEL_279:
            v134 = *(_DWORD *)(a1 + 4);
            v135 = *(_DWORD *)a1 - (v92 == v134);
            if (v135 < 65)
            {
              if ((v135 != 64 || !v104) && (v135 > 63 || !(v104 | (v91 >> v135))))
              {
LABEL_287:
                if (v92 == v134 && v103)
                  *__error() = 34;
                goto LABEL_290;
              }
            }
            else if (!(v104 >> v135))
            {
              goto LABEL_287;
            }
            v91 >>= v92++ > v134;
LABEL_290:
            v136 = *(_QWORD **)(a1 + 48);
            if (v136)
              *v136 = v22;
            if (v92 > *(_DWORD *)(a1 + 8))
              goto LABEL_293;
            v137 = *(_DWORD *)(a1 + 4);
            if (v92 > v137 - *(_DWORD *)a1)
            {
              v138 = *(_DWORD *)(a1 + 12);
              switch(v138)
              {
                case 8:
                  result = 0;
                  **(_QWORD **)(a1 + 32) = v91 & 0xFFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)(v92 - v137) << 52) | ((unint64_t)(*(_BYTE *)(a1 + 96) != 0) << 63);
                  return result;
                case 4:
                  result = 0;
                  **(_DWORD **)(a1 + 32) = v91 & 0x7FFFFF | ((unsigned __int16)(v92 - v137) << 23) | ((*(_BYTE *)(a1 + 96) != 0) << 31);
                  return result;
                case 2:
                  result = 0;
                  **(_WORD **)(a1 + 32) = (*(unsigned __int8 *)(a1 + 96) << 15) | (((_WORD)v92 - (_WORD)v137) << 10) | v91 & 0x3FF;
                  return result;
              }
              return 0;
            }
LABEL_299:
            underflow(a1);
            return 0;
          }
        }
        else
        {
          if (v17 != 46)
            goto LABEL_168;
          ++v22;
        }
LABEL_138:
        v17 = *v22;
        v68 = hexdigit[*v22];
        if (!v25 && (v68 <= 0xF ? (v69 = v21 >> 60 == 0) : (v69 = 0), v69))
        {
          v70 = v22;
          do
          {
            v74 = *++v70;
            v17 = v74;
            v21 = 16 * v21 + v68;
            v68 = hexdigit[v74];
          }
          while (v68 <= 0xF && v21 >> 60 == 0);
        }
        else
        {
          v70 = v22;
        }
        while (v68 <= 0xF && v25 >> 59 == 0)
        {
          *((_QWORD *)&v76 + 1) = v25;
          *(_QWORD *)&v76 = v21;
          v25 = v76 >> 60;
          v77 = *++v70;
          v17 = v77;
          v21 = 16 * v21 + v68;
          v68 = hexdigit[v77];
        }
        v30 += 4 * ((_DWORD)v22 - (_DWORD)v70);
        v79 = (int)v70;
        if (v68 <= 0xF)
        {
          do
          {
            v29 |= v68;
            v80 = *++v70;
            v17 = v80;
            v68 = hexdigit[v80];
            ++v79;
          }
          while (v68 < 0x10);
        }
        v63 = v63 - (_DWORD)v22 + v79;
        v22 = v70;
        goto LABEL_168;
      }
    }
    v30 = 0;
    v29 = 0;
    goto LABEL_130;
  }
  if (v3 == 73)
    goto LABEL_33;
LABEL_61:
  if ((v3 - 58) <= 0xF5u)
  {
    v32 = *(_xlocale **)(a1 + 56);
    if (v32)
    {
      v33 = localeconv_l(v32);
      v34 = *(unsigned __int8 *)v33->decimal_point;
      if (v33->decimal_point[1])
      {
        if (*v33->decimal_point)
        {
          v35 = (unsigned __int8 *)(v33->decimal_point + 1);
          LOBYTE(v36) = 1;
          do
          {
            v37 = *v2++;
            v36 = v36 & (v37 == v34);
            v38 = *v35++;
            v34 = v38;
          }
          while (v38);
          if (!v36)
            goto LABEL_150;
        }
        v39 = *v2;
        goto LABEL_148;
      }
      if (v34 != *v2)
        goto LABEL_150;
    }
    else if (v3 != 46)
    {
      goto LABEL_150;
    }
    v71 = *++v2;
    v39 = v71;
LABEL_148:
    if ((v39 - 48) >= 0xA)
      goto LABEL_150;
    v42 = 0;
    goto LABEL_221;
  }
  v40 = v2;
LABEL_72:
  if ((v3 - 48) > 9)
  {
    v42 = 0;
    v45 = 0;
    v2 = v40;
  }
  else
  {
    v42 = (v3 - 48);
    v2 = v40 + 1;
    v3 = v40[1];
    v43 = v3 - 48;
    if ((v3 - 48) <= 9)
    {
      do
      {
        v42 = 10 * v42 + v43;
        v44 = *++v2;
        v3 = v44;
        v43 = v44 - 48;
      }
      while ((v44 - 48) < 0xA);
    }
    v45 = (_DWORD)v2 - (_DWORD)v40;
  }
  v46 = *(_xlocale **)(a1 + 56);
  if (v46)
  {
    v47 = 0;
    if (v3 > 68)
    {
      if (v3 == 69 || v3 == 101)
        goto LABEL_231;
    }
    else if (!v3 || v3 == 32)
    {
      goto LABEL_231;
    }
    v48 = localeconv_l(v46);
    v49 = *(unsigned __int8 *)v48->decimal_point;
    if (v48->decimal_point[1])
    {
      if (*v48->decimal_point)
      {
        v50 = 0;
        LOBYTE(v51) = 1;
        do
        {
          v51 = v51 & (v2[v50] == v49);
          v49 = v48->decimal_point[++v50];
        }
        while (v49);
        if (!v51)
        {
          v47 = 0;
          v3 = *v2;
          goto LABEL_231;
        }
        v2 += v50;
      }
    }
    else if (v49 == *v2)
    {
      ++v2;
    }
LABEL_216:
    if (v45)
    {
      v3 = *v2;
      if ((v3 - 48) > 9)
      {
        v107 = v2;
      }
      else
      {
        v42 = 10 * v42 + (v3 - 48);
        v107 = v2 + 1;
        v3 = v2[1];
        v108 = v3 - 48;
        if ((v3 - 48) <= 9)
        {
          do
          {
            v42 = 10 * v42 + v108;
            v109 = *++v107;
            v3 = v109;
            v108 = v109 - 48;
          }
          while ((v109 - 48) < 0xA);
        }
      }
      v45 += (_DWORD)v107 - (_DWORD)v2;
      goto LABEL_230;
    }
LABEL_221:
    v110 = (_DWORD)v2 - 1;
    v111 = v2;
    do
    {
      v112 = *v111++;
      v3 = v112;
      ++v110;
      v113 = (v112 - 48);
    }
    while (v112 == 48);
    v40 = v111 - 1;
    v107 = v111 - 1;
    if (v113 <= 9)
    {
      v3 = *v111;
      v114 = v3 - 48;
      if ((v3 - 48) <= 9)
      {
        do
        {
          v113 = 10 * v113 + v114;
          v115 = *++v111;
          v3 = v115;
          v114 = v115 - 48;
        }
        while ((v115 - 48) < 0xA);
      }
      v107 = v111;
      v42 = v113;
    }
    v45 = (_DWORD)v107 - v110;
LABEL_230:
    v47 = (_DWORD)v2 - (_DWORD)v107;
    v2 = v107;
    goto LABEL_231;
  }
  if (v3 == 46)
  {
    ++v2;
    goto LABEL_216;
  }
  v47 = 0;
LABEL_231:
  if ((v3 | 0x20) == 0x65
    && ((v116 = v2 + 1, v117 = v2[1], v117 == 45) ? (v118 = v2 + 2) : (v118 = v2 + 1),
        v117 == 45 ? (v119 = -1) : (v119 = 1),
        v117 != 43 ? (v120 = v118) : (v120 = v2 + 2),
        v117 != 43 ? (v121 = v119) : (v121 = 1),
        *v120 - 48 <= 9))
  {
    v122 = (*v120 - 48);
    v124 = v120[1];
    v123 = v120 + 1;
    v125 = v124 - 48;
    if ((v124 - 48) <= 9)
    {
      do
      {
        v122 = 10 * v122 + v125;
        v126 = *++v123;
        v125 = v126 - 48;
      }
      while ((v126 - 48) < 0xA);
    }
    if (v123 - v2 >= 10)
    {
      if (v117 == 45 || v117 == 43)
        v116 = v2 + 2;
      v127 = v123 - v116 + 1;
      do
      {
        v128 = *v116++;
        --v127;
      }
      while (v128 == 48);
      if (v127 > 8)
        v122 = 99999999;
    }
    v47 += v122 * v121;
  }
  else
  {
    v123 = v2;
  }
  v129 = *(unsigned __int8 ***)(a1 + 48);
  if (v129)
    *v129 = v123;
  if (!v45)
  {
    _platform_bzero();
    result = 0;
    *(_BYTE *)(*(int *)(a1 + 12) + *(_QWORD *)(a1 + 32) - 1) = (*(_BYTE *)(a1 + 96) != 0) << 7;
    return result;
  }
  if (v47 + v45 < *(_DWORD *)(a1 + 16))
    goto LABEL_299;
  if (v47 + v45 > *(_DWORD *)(a1 + 20))
  {
LABEL_293:
    overflow(a1);
    return 0;
  }
  if (v45 < 20)
  {
    v40 = 0;
    v133 = 0;
  }
  else
  {
    v130 = 0;
    v42 = 0;
    do
    {
      v131 = *v40++;
      v132 = (v131 - 48);
      if (v132 < 0xA)
      {
        v42 = v132 + 10 * v42;
        ++v130;
      }
    }
    while (v130 < 0x13);
    v133 = v45 - 19;
  }
  *(_DWORD *)(a1 + 72) = v45;
  *(_QWORD *)(a1 + 80) = v40;
  *(_QWORD *)(a1 + 64) = v42;
  result = 1;
  *(_DWORD *)(a1 + 88) = v133;
  *(_DWORD *)(a1 + 92) = v47;
  return result;
}

void *__parsefloat_buf(size_t a1)
{
  pthread_key_t v2;
  void *v3;
  void *v4;
  pthread_key_t v5;
  size_t v6;
  pthread_key_t v7;

  if ((__parsefloat_buf_parsefloat_tsd_key & 1) != 0)
  {
    v2 = 15;
  }
  else
  {
    pthread_mutex_lock(&__parsefloat_buf_parsefloat_tsd_lock);
    if ((__parsefloat_buf_parsefloat_tsd_key & 1) == 0)
    {
      __parsefloat_buf_parsefloat_tsd_key = 1;
      pthread_key_init_np();
    }
    pthread_mutex_unlock(&__parsefloat_buf_parsefloat_tsd_lock);
    if (__parsefloat_buf_parsefloat_tsd_key)
      v2 = 15;
    else
      v2 = -1;
  }
  v3 = pthread_getspecific(v2);
  if (v3)
  {
    v4 = v3;
    if (__parsefloat_buf_bsiz < a1)
    {
      v4 = reallocf(v3, a1);
      if (__parsefloat_buf_parsefloat_tsd_key)
        v5 = 15;
      else
        v5 = -1;
      pthread_setspecific(v5, v4);
      if (v4)
        __parsefloat_buf_bsiz = a1;
      else
        __parsefloat_buf_bsiz = 0;
    }
  }
  else
  {
    if (a1 <= 0x201)
      v6 = 513;
    else
      v6 = a1;
    __parsefloat_buf_bsiz = v6;
    v4 = malloc_type_malloc(v6, 0xB78CF628uLL);
    if (v4)
    {
      if (__parsefloat_buf_parsefloat_tsd_key)
        v7 = 15;
      else
        v7 = -1;
      pthread_setspecific(v7, v4);
    }
    else
    {
      __parsefloat_buf_bsiz = 0;
    }
  }
  return v4;
}

int statx_np(const char *a1, stat *a2, filesec_t a3)
{
  const char *v4;

  v4 = a1;
  if (a3)
    return statx1((uint64_t)&v4, (uint64_t (*)(uint64_t, uint64_t, _DWORD *, unint64_t *))statx_syscall, (uint64_t)a2, a3);
  else
    return stat(a1, a2);
}

int lstatx_np(const char *a1, stat *a2, filesec_t a3)
{
  const char *v4;

  v4 = a1;
  if (a3)
    return statx1((uint64_t)&v4, (uint64_t (*)(uint64_t, uint64_t, _DWORD *, unint64_t *))lstatx_syscall, (uint64_t)a2, a3);
  else
    return lstat(a1, a2);
}

int fstatx_np(int a1, stat *a2, filesec_t a3)
{
  int v4;

  v4 = a1;
  if (a3)
    return statx1((uint64_t)&v4, (uint64_t (*)(uint64_t, uint64_t, _DWORD *, unint64_t *))fstatx_syscall, (uint64_t)a2, a3);
  else
    return fstat(a1, a2);
}

uint64_t statx1(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, _DWORD *, unint64_t *), uint64_t a3, _filesec *a4)
{
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;

  v8 = malloc_type_malloc(0x1ACuLL, 0x7CF20430uLL);
  v18 = v8;
  if (!v8)
    return 12;
  v9 = v8;
  v17 = 428;
  v10 = a2(a1, a3, v8, &v17);
  if ((_DWORD)v10)
  {
    v11 = v10;
  }
  else
  {
    v13 = 428;
    while (v17 > v13)
    {
      v14 = malloc_type_realloc(v9, v17 + 48, 0x7A018A24uLL);
      v18 = v14;
      if (!v14)
      {
        v18 = v9;
        v11 = 0;
        *__error() = 12;
        goto LABEL_4;
      }
      v15 = v14;
      v13 = v17;
      v16 = a2(a1, a3, v14, &v17);
      v9 = v15;
      if ((_DWORD)v16)
      {
        v11 = v16;
        v9 = v15;
        goto LABEL_4;
      }
    }
    filesec_set_property(a4, FILESEC_OWNER, (const void *)(a3 + 16));
    filesec_set_property(a4, FILESEC_GROUP, (const void *)(a3 + 20));
    filesec_set_property(a4, FILESEC_MODE, (const void *)(a3 + 4));
    if (v17 < 0x44)
    {
      filesec_set_property(a4, FILESEC_UUID, 0);
      filesec_set_property(a4, FILESEC_GRPUUID, 0);
    }
    else
    {
      filesec_set_property(a4, FILESEC_UUID, v9 + 1);
      v9 = v18;
      filesec_set_property(a4, FILESEC_GRPUUID, v18 + 5);
      if (v9[9] != -1)
      {
        filesec_set_property(a4, FILESEC_ACL_ALLOCSIZE, &v17);
        filesec_set_property(a4, FILESEC_ACL_RAW, &v18);
        return 0;
      }
    }
    filesec_set_property(a4, FILESEC_ACL_ALLOCSIZE, 0);
    filesec_set_property(a4, FILESEC_ACL_RAW, 0);
    v11 = 0;
  }
LABEL_4:
  free(v9);
  return v11;
}

int filesec_set_property(filesec_t a1, filesec_property_t a2, const void *a3)
{
  int result;
  int v6;
  unsigned int v7;
  _acl *v8;
  ssize_t v9;
  ssize_t v10;
  void *v11;
  void *v12;
  int v13;

  switch(a2)
  {
    case FILESEC_OWNER:
      result = 0;
      if (!a3)
      {
        v7 = *(_DWORD *)a1 & 0xFFFFFFFE;
        goto LABEL_33;
      }
      v6 = *(_DWORD *)a3;
      *(_DWORD *)a1 |= 1u;
      *((_DWORD *)a1 + 1) = v6;
      return result;
    case FILESEC_GROUP:
      result = 0;
      if (a3)
      {
        *((_DWORD *)a1 + 2) = *(_DWORD *)a3;
        v7 = *(_DWORD *)a1 | 2;
      }
      else
      {
        v7 = *(_DWORD *)a1 & 0xFFFFFFFD;
      }
      goto LABEL_33;
    case FILESEC_UUID:
      if (a3)
      {
        uuid_copy((unsigned __int8 *)a1 + 12, (const unsigned __int8 *)a3);
        result = 0;
        v7 = *(_DWORD *)a1 | 4;
      }
      else
      {
        result = 0;
        v7 = *(_DWORD *)a1 & 0xFFFFFFFB;
      }
      goto LABEL_33;
    case FILESEC_MODE:
      result = 0;
      if (a3)
      {
        *((_WORD *)a1 + 22) = *(_WORD *)a3;
        v7 = *(_DWORD *)a1 | 0x10;
      }
      else
      {
        v7 = *(_DWORD *)a1 & 0xFFFFFFEF;
      }
      goto LABEL_33;
    case FILESEC_ACL:
      if (a3 == (const void *)1)
      {
        filesec_discard_aclbuf((unsigned int *)a1);
        result = 0;
        *((_QWORD *)a1 + 6) = 0;
        *((_QWORD *)a1 + 7) = 1;
        goto LABEL_32;
      }
      if (!a3)
      {
        filesec_discard_aclbuf((unsigned int *)a1);
        result = 0;
        v7 = *(_DWORD *)a1 & 0xFFFFFFDF;
        goto LABEL_33;
      }
      v8 = *(_acl **)a3;
      v9 = acl_size(*(acl_t *)a3);
      if ((v9 & 0x8000000000000000) == 0)
      {
        v10 = v9;
        v11 = malloc_type_malloc(v9, 0x7FAFF6C7uLL);
        if (v11)
        {
          v12 = v11;
          if ((acl_copy_ext_native(v11, v8, v10) & 0x8000000000000000) == 0)
          {
            filesec_discard_aclbuf((unsigned int *)a1);
            result = 0;
            *((_QWORD *)a1 + 6) = v10;
            *((_QWORD *)a1 + 7) = v12;
            goto LABEL_32;
          }
          free(v12);
          goto LABEL_37;
        }
      }
      v13 = *__error();
      if (v13)
        goto LABEL_38;
      return 0;
    case FILESEC_GRPUUID:
      if (a3)
      {
        uuid_copy((unsigned __int8 *)a1 + 28, (const unsigned __int8 *)a3);
        result = 0;
        v7 = *(_DWORD *)a1 | 8;
      }
      else
      {
        result = 0;
        v7 = *(_DWORD *)a1 & 0xFFFFFFF7;
      }
      goto LABEL_33;
    default:
      if (a2 == FILESEC_ACL_RAW)
      {
        filesec_discard_aclbuf((unsigned int *)a1);
        if (a3 && *(_QWORD *)a3)
        {
          result = 0;
          *((_QWORD *)a1 + 7) = *(_QWORD *)a3;
LABEL_32:
          v7 = *(_DWORD *)a1 | 0x20;
LABEL_33:
          *(_DWORD *)a1 = v7;
        }
        else
        {
          return 0;
        }
      }
      else if (a2 == FILESEC_ACL_ALLOCSIZE && a3)
      {
        result = 0;
        *((_QWORD *)a1 + 6) = *(_QWORD *)a3;
      }
      else
      {
LABEL_37:
        v13 = 22;
LABEL_38:
        *__error() = v13;
        return -1;
      }
      return result;
  }
}

void filesec_free(filesec_t a1)
{
  filesec_discard_aclbuf((unsigned int *)a1);
  free(a1);
}

void filesec_discard_aclbuf(unsigned int *a1)
{
  unsigned int v1;
  void *v3;

  v1 = *a1;
  if ((*a1 & 0x20) != 0)
  {
    v3 = (void *)*((_QWORD *)a1 + 7);
    if (v3 != (void *)1)
    {
      free(v3);
      v1 = *a1;
    }
    *((_QWORD *)a1 + 6) = 0;
    *((_QWORD *)a1 + 7) = 0;
    *a1 = v1 & 0xFFFFFFDF;
  }
}

uint64_t fstatx_syscall()
{
  return __fstat64_extended();
}

uint64_t statx_syscall()
{
  return __stat64_extended();
}

uint64_t lstatx_syscall()
{
  return __lstat64_extended();
}

ssize_t acl_copy_ext_native(void *buf_p, acl_t acl, ssize_t size)
{
  ssize_t v6;
  ssize_t v7;
  int v9;
  int v10;
  unint64_t v11;
  _DWORD *v12;
  char *v13;
  int v14;

  v6 = acl_size(acl);
  if (v6 < 0)
    return -1;
  v7 = v6;
  if (v6 > size)
  {
    *__error() = 34;
    return -1;
  }
  _platform_bzero();
  *(_DWORD *)buf_p = 19710317;
  if (acl == (acl_t)1)
  {
    *((_DWORD *)buf_p + 9) = -1;
  }
  else
  {
    v9 = *((_DWORD *)acl + 1);
    v10 = *((_DWORD *)acl + 3);
    *((_DWORD *)buf_p + 9) = v9;
    *((_DWORD *)buf_p + 10) = v10;
    if (v9)
    {
      v11 = 0;
      v12 = (char *)buf_p + 64;
      v13 = (char *)acl + 24;
      do
      {
        *(_OWORD *)(v12 - 5) = *(_OWORD *)v13;
        v14 = *((_DWORD *)v13 + 5);
        *(v12 - 1) = *((_DWORD *)v13 + 4) & 0xFFFFFFF0 | *((_DWORD *)v13 - 1) & 0xF;
        *v12 = v14;
        ++v11;
        v12 += 6;
        v13 += 32;
      }
      while (v11 < *((unsigned int *)acl + 1));
    }
  }
  return v7;
}

ssize_t acl_size(acl_t acl)
{
  if (acl == (acl_t)1)
    return 44;
  if (((uint64_t)acl > 16 || (uint64_t)acl <= -17) && *(_DWORD *)acl == -1407532798)
    return 24 * *((unsigned int *)acl + 1) + 44;
  *__error() = 22;
  return -1;
}

uint64_t _mkpath(int a1, char *a2, mode_t a3, char **a4)
{
  int v8;
  int v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  BOOL v18;
  int *v19;
  unsigned int v20;
  char *v21;
  int v22;
  char *v23;
  stat v25;
  stat v26;

  v8 = *__error();
  memset(&v26, 0, sizeof(v26));
  if (!mkdirat(a1, a2, a3))
  {
    if (!a4)
    {
      v10 = 0;
      v11 = 0;
      goto LABEL_27;
    }
    v13 = strdup(a2);
    v10 = 0;
    v11 = 0;
    goto LABEL_9;
  }
  v9 = *__error();
  switch(v9)
  {
    case 2:
      v10 = strdup(a2);
      if (!v10)
      {
        v11 = 0;
LABEL_32:
        v12 = 12;
        break;
      }
      v14 = &v10[_platform_strlen()];
      v15 = -1;
      v16 = -1;
      do
      {
        v17 = &v14[v15 - 1];
        if (v17 > v10)
        {
          v16 = v15;
          if (v14[v15] == 46)
          {
            if (*v17 == 47)
              v16 = v15 - 2;
            else
              v16 = v15;
          }
        }
        if (&v14[v16] > v10)
          v16 -= v14[v16] == 47;
        v18 = v16 < v15;
        v15 = v16;
      }
      while (v18);
      if (v16 > -2)
      {
        v11 = 0;
      }
      else
      {
        v14[v16 + 1] = 0;
        a2 = strdup(v10);
        v11 = a2;
        if (!a2)
          goto LABEL_32;
      }
      if (mkdirat(a1, a2, a3))
      {
        v20 = 1;
        while (1)
        {
          v21 = strrchr(v10, 47);
          if (!v21)
            goto LABEL_68;
          *v21 = 0;
          if (!mkdirat(a1, v10, 0x1FFu))
            break;
          if (*__error() == 17)
          {
            if (fstatat(a1, v10, &v26, 0) || (v26.st_mode & 0xF000) != 0x4000)
            {
              v12 = 20;
              goto LABEL_69;
            }
            if (a4)
            {
              v23 = strdup(v10);
              v22 = 0;
              goto LABEL_54;
            }
            v22 = 0;
            goto LABEL_55;
          }
          ++v20;
          if (*__error() != 2)
          {
LABEL_40:
            v19 = __error();
            goto LABEL_25;
          }
        }
        memset(&v25, 0, sizeof(v25));
        if (fstatat(a1, v10, &v25, 0) != -1)
        {
          if ((~v25.st_mode & 0xC0) == 0)
          {
            v22 = 0;
            goto LABEL_52;
          }
          v22 = v25.st_mode | 0xC0;
          if (fchmodat(a1, v10, v25.st_mode | 0xC0, 0) != -1)
          {
LABEL_52:
            if (a4)
            {
              v23 = strdup(v10);
LABEL_54:
              *a4 = v23;
            }
LABEL_55:
            if (v20 >= 2)
            {
              do
              {
                v10[_platform_strlen()] = 47;
                if (mkdirat(a1, v10, 0x1FFu) == -1)
                {
                  if (*__error() != 17)
                    goto LABEL_40;
                }
                else if (v22 && fchmodat(a1, v10, v22, 0) == -1)
                {
                  goto LABEL_68;
                }
                --v20;
              }
              while (v20 > 1);
            }
            if (mkdirat(a1, a2, a3) == -1)
            {
              v12 = *__error();
              if (*__error() == 17 && !fstatat(a1, a2, &v26, 0))
              {
                if ((v26.st_mode & 0xF000) == 0x4000)
                  v12 = v12;
                else
                  v12 = 20;
              }
              break;
            }
LABEL_27:
            v12 = 0;
            break;
          }
        }
LABEL_68:
        v12 = 2;
        break;
      }
      if (!a4)
        goto LABEL_27;
      v13 = strdup(a2);
LABEL_9:
      v12 = 0;
      *a4 = v13;
      break;
    case 21:
      v10 = 0;
      v11 = 0;
      v12 = 17;
      break;
    case 17:
      v10 = 0;
      v11 = 0;
      if (fstatat(a1, a2, &v26, 0))
      {
        v12 = 5;
      }
      else if ((v26.st_mode & 0xF000) == 0x4000)
      {
        v12 = 17;
      }
      else
      {
        v12 = 20;
      }
      break;
    default:
      v19 = __error();
      v10 = 0;
      v11 = 0;
LABEL_25:
      v12 = *v19;
      break;
  }
LABEL_69:
  free(v10);
  free(v11);
  *__error() = v8;
  return v12;
}

int fts_close(FTS *a1)
{
  _ftsent *fts_cur;
  _ftsent *fts_link;
  int fts_rfd;
  _ftsent *fts_child;
  _ftsent *v6;
  int (*fts_compar)(void);
  int v8;
  int v9;

  fts_cur = a1->fts_cur;
  if (fts_cur)
  {
    if (fts_cur->fts_level < 0)
    {
      fts_link = fts_cur;
    }
    else
    {
      do
      {
        fts_link = fts_cur->fts_link;
        if (!fts_link)
          fts_link = fts_cur->fts_parent;
        fts_free(fts_cur);
        fts_cur = fts_link;
      }
      while ((fts_link->fts_level & 0x80000000) == 0);
    }
    fts_free(fts_link);
  }
  if ((a1->fts_options & 4) != 0)
    fts_rfd = -1;
  else
    fts_rfd = a1->fts_rfd;
  fts_child = a1->fts_child;
  if (fts_child)
  {
    do
    {
      v6 = fts_child->fts_link;
      fts_free(fts_child);
      fts_child = v6;
    }
    while (v6);
  }
  free(a1->fts_array);
  a1->fts_array = 0;
  free(a1->fts_path);
  a1->fts_path = 0;
  if (a1->fts_options < 0)
  {
    fts_compar = a1->fts_compar;
    if (fts_compar)
      _Block_release(fts_compar);
  }
  if (fts_rfd == -1)
  {
    v9 = 0;
  }
  else
  {
    v8 = *__error();
    if (fts_fchdir((uint64_t)a1, fts_rfd))
    {
      v8 = *__error();
      v9 = -1;
    }
    else
    {
      v9 = 0;
    }
    if (close_NOCANCEL())
    {
      v8 = *__error();
      v9 = -1;
    }
    *__error() = v8;
  }
  free(a1);
  return v9;
}

FTSENT *__cdecl fts_read(FTS *a1)
{
  _ftsent *fts_cur;
  int fts_options;
  int fts_instr;
  int fts_info;
  unsigned __int16 *p_fts_info;
  int v7;
  int v8;
  _ftsent *v9;
  _ftsent *v10;
  _ftsent *v11;
  _ftsent *v12;
  int v13;
  int v14;
  int v15;
  _ftsent *fts_child;
  _ftsent *fts_link;
  unsigned __int16 fts_flags;
  _ftsent *v19;
  int v20;
  __int16 v22;
  _ftsent *fts_parent;
  uint64_t v24;
  BOOL v25;

  fts_cur = a1->fts_cur;
  if (!a1->fts_cur)
    return fts_cur;
  fts_options = a1->fts_options;
  if ((fts_options & 0x200) != 0)
    return 0;
  fts_instr = fts_cur->fts_instr;
  fts_cur->fts_instr = 3;
  if (fts_instr == 2)
  {
    p_fts_info = &fts_cur->fts_info;
    fts_info = fts_cur->fts_info;
    if ((fts_info & 0xFFFE) == 0xC)
    {
      v7 = fts_stat2((uint64_t)a1, (uint64_t)fts_cur, 1, -1, 0);
      fts_cur->fts_info = v7;
      if (v7 == 1 && (a1->fts_options & 4) == 0)
      {
        v8 = open_NOCANCEL();
        fts_cur->fts_symfd = v8;
        if (v8 < 0)
        {
          fts_cur->fts_errno = *__error();
          fts_cur->fts_info = 7;
        }
        else
        {
          fts_cur->fts_flags |= 2u;
        }
      }
      return fts_cur;
    }
    if (fts_info == 1)
      goto LABEL_15;
  }
  else
  {
    if (fts_instr == 1)
    {
      fts_cur->fts_info = fts_stat2((uint64_t)a1, (uint64_t)fts_cur, 0, -1, 0);
      return fts_cur;
    }
    p_fts_info = &fts_cur->fts_info;
    if (fts_cur->fts_info == 1)
    {
      if (fts_instr == 4)
      {
LABEL_33:
        if ((fts_cur->fts_flags & 2) != 0)
        {
          close_NOCANCEL();
          fts_cur->fts_symfd = -1;
        }
        fts_child = a1->fts_child;
        if (fts_child)
        {
          do
          {
            fts_link = fts_child->fts_link;
            fts_free(fts_child);
            fts_child = fts_link;
          }
          while (fts_link);
          a1->fts_child = 0;
        }
        *p_fts_info = 6;
        return fts_cur;
      }
LABEL_15:
      if ((fts_options & 0x40) != 0 && fts_cur->fts_dev != a1->fts_dev)
        goto LABEL_33;
      v9 = a1->fts_child;
      if (v9)
      {
        if ((fts_options & 0x100) == 0)
        {
          if (fts_safe_changedir((uint64_t)a1, (uint64_t)fts_cur, -1))
          {
            fts_cur->fts_errno = *__error();
            fts_cur->fts_flags |= 1u;
            v10 = a1->fts_child;
            if (v10)
            {
              v11 = a1->fts_child;
              do
              {
                v11->fts_accpath = v11->fts_parent->fts_accpath;
                v11 = v11->fts_link;
              }
              while (v11);
            }
          }
          else
          {
            v10 = a1->fts_child;
          }
          goto LABEL_62;
        }
        a1->fts_options = fts_options & 0xFFFFFEFF;
        do
        {
          v19 = v9->fts_link;
          fts_free(v9);
          v9 = v19;
        }
        while (v19);
        a1->fts_child = 0;
      }
      v10 = (_ftsent *)fts_build((uint64_t)a1, 3);
      a1->fts_child = v10;
      if (!v10)
      {
        if ((a1->fts_options & 0x200) != 0)
          return 0;
        return fts_cur;
      }
LABEL_62:
      a1->fts_child = 0;
      fts_cur = v10;
      goto LABEL_76;
    }
  }
  v12 = fts_cur;
  do
  {
    fts_cur = v12->fts_link;
    if (!fts_cur)
    {
      fts_cur = v12->fts_parent;
      fts_free(v12);
      if (fts_cur->fts_level == -1)
      {
        fts_free(fts_cur);
        fts_cur = 0;
        *__error() = 0;
        a1->fts_cur = 0;
        return fts_cur;
      }
      a1->fts_path[fts_cur->fts_pathlen] = 0;
      if (fts_cur->fts_level)
      {
        fts_flags = fts_cur->fts_flags;
        if ((fts_flags & 2) != 0)
        {
          if ((a1->fts_options & 4) != 0 || !fts_fchdir((uint64_t)a1, fts_cur->fts_symfd))
          {
            close_NOCANCEL();
            fts_cur->fts_symfd = -1;
            goto LABEL_70;
          }
          v20 = *__error();
          close_NOCANCEL();
          fts_cur->fts_symfd = -1;
          *__error() = v20;
        }
        else if ((fts_flags & 1) != 0 || !fts_safe_changedir((uint64_t)a1, (uint64_t)fts_cur, -1))
        {
          goto LABEL_70;
        }
      }
      else if ((a1->fts_options & 4) != 0 || !fts_fchdir((uint64_t)a1, a1->fts_rfd))
      {
LABEL_70:
        if (fts_cur->fts_errno)
          v22 = 7;
        else
          v22 = 6;
        fts_cur->fts_info = v22;
        goto LABEL_86;
      }
      a1->fts_options |= 0x200u;
      a1->fts_cur = fts_cur;
      return 0;
    }
    fts_free(v12);
    if (!fts_cur->fts_level)
    {
      a1->fts_cur = fts_cur;
      if ((a1->fts_options & 4) != 0 || !fts_fchdir((uint64_t)a1, a1->fts_rfd))
      {
        fts_load((uint64_t)a1, (uint64_t)fts_cur);
        return a1->fts_cur;
      }
      else
      {
        fts_cur = 0;
        a1->fts_options |= 0x200u;
      }
      return fts_cur;
    }
    v13 = fts_cur->fts_instr;
    v12 = fts_cur;
  }
  while (v13 == 4);
  if (v13 == 2)
  {
    v14 = fts_stat2((uint64_t)a1, (uint64_t)fts_cur, 1, -1, 0);
    fts_cur->fts_info = v14;
    if (v14 == 1 && (a1->fts_options & 4) == 0)
    {
      v15 = open_NOCANCEL();
      fts_cur->fts_symfd = v15;
      if (v15 < 0)
      {
        fts_cur->fts_errno = *__error();
        fts_cur->fts_info = 7;
      }
      else
      {
        fts_cur->fts_flags |= 2u;
      }
    }
    fts_cur->fts_instr = 3;
  }
LABEL_76:
  fts_parent = fts_cur->fts_parent;
  LODWORD(v24) = fts_parent->fts_pathlen;
  if (fts_parent->fts_level)
    v25 = 0;
  else
    v25 = (_DWORD)v24 == 1;
  if (v25)
  {
    if (*fts_parent->fts_path != 47)
    {
      LODWORD(v24) = 1;
      goto LABEL_84;
    }
    v24 = 0;
  }
  else
  {
LABEL_84:
    v24 = v24;
  }
  a1->fts_path[v24] = 47;
  _platform_memmove();
LABEL_86:
  a1->fts_cur = fts_cur;
  return fts_cur;
}

void fts_free(_DWORD *a1)
{
  int v2;

  if ((a1[15] & 0x80000000) == 0)
  {
    v2 = *__error();
    close_NOCANCEL();
    *__error() = v2;
  }
  free(a1);
}

uint64_t fts_load(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t result;
  __int16 v6;
  uint64_t v7;

  *(_WORD *)(a2 + 64) = *(_WORD *)(a2 + 66);
  v4 = (char *)(a2 + 104);
  _platform_memmove();
  result = (uint64_t)strrchr(v4, 47);
  if (result && ((char *)result != v4 || *(_BYTE *)(a2 + 105)))
  {
    v6 = _platform_strlen();
    result = _platform_memmove();
    *(_WORD *)(a2 + 66) = v6;
  }
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = v7;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 80);
  return result;
}

uint64_t fts_fchdir(uint64_t a1, int a2)
{
  if ((*(_BYTE *)(a1 + 65) & 4) != 0)
    JUMPOUT(0x18D767E20);
  return fchdir(a2);
}

void __sinit()
{
  __cleanup = 1;
  __scounted = 3;
}

uint64_t sysconf(int a1)
{
  const char *v1;
  uint64_t rlim_cur;
  int v3;
  int *v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v13;
  int v14;
  size_t v15;
  uint64_t v16;
  rlimit v17;
  int v18[4];

  v17.rlim_cur = 0;
  v17.rlim_max = 0;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v1 = "/var/db/timezone/zoneinfo";
  rlim_cur = 100;
  switch(a1)
  {
    case 1:
      v18[0] = 1;
      v3 = 8;
      goto LABEL_27;
    case 2:
      if (getrlimit(7, &v17))
        goto LABEL_2;
      rlim_cur = v17.rlim_cur;
      if (v17.rlim_cur == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_2;
      if ((v17.rlim_cur & 0x8000000000000000) == 0)
        return rlim_cur;
      v4 = __error();
      v5 = 84;
LABEL_39:
      *v4 = v5;
LABEL_2:
      rlim_cur = -1;
      break;
    case 3:
      return rlim_cur;
    case 4:
      v18[0] = 1;
      v3 = 18;
      goto LABEL_27;
    case 5:
    case 26:
      if (getrlimit(8, &v17))
        goto LABEL_2;
      if ((v17.rlim_cur & 0x8000000000000000) != 0)
        return -1;
      else
        return v17.rlim_cur;
    case 6:
    case 17:
    case 18:
    case 19:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 32:
    case 38:
    case 47:
    case 76:
    case 77:
    case 78:
    case 79:
    case 82:
    case 83:
    case 90:
    case 91:
    case 96:
    case 118:
      return 200112;
    case 7:
      *(_QWORD *)v18 = 0x1400000001;
      v15 = 4;
      if (sysctl(v18, 2u, &v14, &v15, 0, 0) == -1)
        goto LABEL_2;
      v6 = v14;
      v7 = v14 == 0;
LABEL_33:
      if (v7)
        return -1;
      return v6;
    case 8:
      v18[0] = 1;
      v3 = 17;
      goto LABEL_27;
    case 9:
    case 11:
      return 99;
    case 10:
    case 15:
      return 2048;
    case 12:
      return 1000;
    case 13:
      return 2;
    case 14:
    case 120:
    case 130:
      return 32;
    case 16:
    case 72:
    case 73:
      return 255;
    case 21:
    case 28:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 39:
    case 40:
    case 41:
    case 44:
    case 45:
    case 46:
    case 48:
    case 51:
    case 52:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 74:
    case 75:
    case 80:
    case 81:
    case 84:
    case 87:
    case 88:
    case 89:
    case 92:
    case 94:
    case 95:
    case 97:
    case 98:
    case 99:
    case 100:
    case 102:
    case 103:
    case 104:
    case 110:
    case 111:
    case 112:
    case 114:
    case 119:
    case 122:
    case 123:
      goto LABEL_2;
    case 27:
      goto LABEL_44;
    case 29:
      return getpagesize();
    case 42:
    case 43:
      v18[0] = 1;
      v3 = 46;
      goto LABEL_27;
    case 49:
      v15 = 4;
      v8 = sysctlbyname("kern.sysv.semmns", &v14, &v15, 0, 0);
      v6 = v14;
      v7 = v8 == -1;
      goto LABEL_33;
    case 50:
      return 0x7FFFLL;
    case 56:
      return 1024;
    case 57:
    case 58:
      v18[0] = 6;
      v3 = 3;
LABEL_27:
      v18[1] = v3;
      v15 = 4;
      if (sysctl(v18, 2u, &v14, &v15, 0, 0) == -1)
        goto LABEL_2;
      rlim_cur = v14;
      break;
    case 69:
    case 70:
    case 71:
      return 4096;
    case 85:
    case 121:
    case 126:
      return 4;
    case 86:
      return 512;
    case 93:
      return 0x4000;
    case 101:
      v1 = "/";
LABEL_44:
      v9 = *__error();
      *__error() = 0;
      rlim_cur = pathconf(v1, 4);
      if (rlim_cur == -1 && *__error())
        goto LABEL_2;
      *__error() = v9;
      break;
    case 105:
    case 106:
    case 108:
    case 109:
    case 115:
    case 124:
    case 125:
      return 1;
    case 107:
      return 0x7FFFFFFFLL;
    case 113:
      v10 = *__error();
      v15 = 8;
      v11 = sysctlbyname("kern.sysv.shmmin", &v16, &v15, 0, 0);
      *__error() = v10;
      if (v11 == -1)
        return -1;
      else
        return 1;
    case 116:
      return 600;
    case 127:
      return 30;
    case 128:
    case 129:
      return 8;
    case 131:
      return 128;
    case 200:
      *(_QWORD *)v18 = 0;
      v13 = 0;
      v15 = 8;
      if (sysctlbyname("hw.memsize", v18, &v15, 0, 0) == -1)
        goto LABEL_2;
      v15 = 8;
      if (sysctlbyname("hw.pagesize", &v13, &v15, 0, 0) == -1)
        goto LABEL_2;
      rlim_cur = *(_QWORD *)v18 / v13;
      break;
    default:
      v4 = __error();
      v5 = 22;
      goto LABEL_39;
  }
  return rlim_cur;
}

int getpagesize(void)
{
  int result;
  size_t v1;
  int v2[2];

  result = getpagesize_value;
  if (!getpagesize_value)
  {
    *(_QWORD *)v2 = 0x700000006;
    v1 = 4;
    if (sysctl(v2, 2u, &getpagesize_value, &v1, 0, 0) == -1)
      return -1;
    else
      return getpagesize_value;
  }
  return result;
}

char *_os_assumes_log()
{
  uint64_t v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *dli_fname;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const mach_header_64 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  pid_t v36;
  char *result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Dl_info v50;
  uint64_t v51;
  char v52[256];
  _BYTE v53[32];
  _BYTE v54[88];
  _BYTE v55[37];

  OUTLINED_FUNCTION_3(__stack_chk_guard);
  memset(&v50, 0, sizeof(v50));
  memset(v55, 0, sizeof(v55));
  v2 = dladdr(v1, &v50);
  if ((_DWORD)v2)
  {
    OUTLINED_FUNCTION_4(v2, v3, v4, v5, v6, v7, v8, v9, v38, v41, v44, v47, v48, v49, (uint64_t)v50.dli_fname, (uint64_t)v50.dli_fbase);
    OUTLINED_FUNCTION_7();
    dli_fname = v50.dli_fname;
    OUTLINED_FUNCTION_9((char *)v50.dli_fname);
    OUTLINED_FUNCTION_8();
  }
  else
  {
    v0 = 0;
    dli_fname = 0;
  }
  v11 = OUTLINED_FUNCTION_1(v2, v3, "%s:%lu");
  OUTLINED_FUNCTION_5(v11, v12, "0x%llx");
  v13 = OUTLINED_FUNCTION_11();
  v20 = OUTLINED_FUNCTION_2(v13, v14, "assertion failed: %s: %s + %lu [%s]: %s", v15, v16, v17, v18, v19, (uint64_t)v53, (uint64_t)dli_fname, v0, (uint64_t)v55, (uint64_t)v54, v49, (uint64_t)v50.dli_fname, (uint64_t)v50.dli_fbase, (uint64_t)v50.dli_sname, (uint64_t)v50.dli_saddr, v51,
          v52[0]);
  v28 = OUTLINED_FUNCTION_13(v20, v21, v22, v23, v24, v25, v26, v27, v39, v42, v45);
  if ((v28 & 1) == 0)
    OUTLINED_FUNCTION_12(v28, v29, v30, v31, v32, v33, v34, v35, v40, v43, v46);
  v36 = getpid();
  result = OUTLINED_FUNCTION_14(v36, "OS_ASSUMES_FATAL");
  if (result)
  {
    qword_1EDF533C0 = (uint64_t)v52;
    if (_os_crash_callback)
      _os_crash_callback(v52);
    __break(1u);
  }
  return result;
}

char *_os_assumes_log_ctx()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  pid_t v36;
  char *result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61[256];
  _BYTE v62[32];
  _BYTE v63[88];
  _BYTE v64[40];

  v1 = v0;
  v2 = OUTLINED_FUNCTION_3(__stack_chk_guard);
  v10 = OUTLINED_FUNCTION_0_0(v2, v3, v4, v5, v6, v7, v8, v9, v38, v41, v44, v47, v50, v52, v54, v57);
  if ((_DWORD)v10)
  {
    OUTLINED_FUNCTION_4(v10, v11, v12, v13, v14, v15, v16, v17, v39, v42, v45, v48, v51, v53, (uint64_t)v55, v56);
    OUTLINED_FUNCTION_7();
    v18 = (uint64_t)v55;
    OUTLINED_FUNCTION_9(v55);
    OUTLINED_FUNCTION_6();
  }
  else
  {
    v1 = 0;
    v18 = 0;
  }
  v19 = OUTLINED_FUNCTION_1(v10, v11, "%s:%lu");
  OUTLINED_FUNCTION_5(v19, v20, "0x%llx");
  v21 = OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_2(v21, v22, "assertion failed: %s: %s + %lu [%s]: %s", v23, v24, v25, v26, v27, (uint64_t)v62, v18, v1, (uint64_t)v64, (uint64_t)v63, v53, (uint64_t)v55, v56, v58, v59, v60,
    v61[0]);
  v28 = _simple_asl_msg_new();
  OUTLINED_FUNCTION_10(v28, v29, v30, v31, v32, v33, v34, v35, v40, v43, v46, v49);
  _simple_sfree();
  v36 = getpid();
  result = OUTLINED_FUNCTION_14(v36, "OS_ASSUMES_FATAL");
  if (result)
  {
    qword_1EDF533C0 = (uint64_t)v61;
    if (_os_crash_callback)
      _os_crash_callback(v61);
    __break(1u);
  }
  return result;
}

void _os_get_image_uuid(uint64_t a1, uuid_t dst)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v3)
  {
    v5 = 0;
    v6 = 32;
    while (1)
    {
      v7 = v6 + a1;
      if (*(_DWORD *)(v6 + a1) == 27)
        break;
      v6 += *(unsigned int *)(v7 + 4);
      if (v3 == ++v5)
        goto LABEL_9;
    }
    uuid_copy(dst, (const unsigned __int8 *)(v7 + 8));
    v8 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    v8 = 0;
    v5 = 0;
  }
  if (v5 == v8)
LABEL_9:
    uuid_clear(dst);
}

void backtrace_image_offsets(void *const *array, image_offset *image_offsets, int size)
{
  uint64_t v5;
  const unsigned __int8 *v6;
  uint64_t v7;

  v5 = size;
  MEMORY[0x1E0C86820](array, array);
  v6 = (const unsigned __int8 *)(&v7 - 4 * v5);
  _dyld_images_for_addresses();
  if (size >= 1)
  {
    do
    {
      uuid_copy(image_offsets->uuid, v6);
      image_offsets->offset = *((_QWORD *)v6 + 2);
      v6 += 32;
      ++image_offsets;
      --v5;
    }
    while (v5);
  }
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
  uint64_t v2;

  v2 = 0;
  do
  {
    dst[v2] = src[v2];
    ++v2;
  }
  while ((_DWORD)v2 != 16);
}

uint64_t _os_get_build(void *a1)
{
  uint64_t result;
  size_t v3;
  int v4[2];

  v3 = 32;
  *(_QWORD *)v4 = 0x4100000001;
  result = sysctl(v4, 2u, a1, &v3, 0, 0);
  if (!(_DWORD)result && v3 == 1)
    strcpy((char *)a1, "99Z999");
  return result;
}

void OUTLINED_FUNCTION_7()
{
  uint64_t v0;

  uuid_unparse((const unsigned __int8 *)(v0 - 176), (char *)(v0 - 112));
}

uint64_t OUTLINED_FUNCTION_5(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v3;

  return snprintf((char *)(v3 - 200), 0x18uLL, a3);
}

void OUTLINED_FUNCTION_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;

  *(_QWORD *)(v16 - 176) = 0;
  *(_QWORD *)(v16 - 168) = 0;
  _os_get_image_uuid(a16, (unsigned __int8 *)(v16 - 176));
}

uint64_t OUTLINED_FUNCTION_3@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = a1;
  return _platform_bzero();
}

size_t OUTLINED_FUNCTION_3_0(const void *a1, uint64_t a2, uint64_t a3, FILE *a4)
{
  return fwrite(a1, 2uLL, 1uLL, a4);
}

int uname(utsname *a1)
{
  int v2;
  int v3;
  int v6;
  char *version;
  int v8;
  size_t v9;
  size_t v11;
  int v12[2];

  *(_QWORD *)v12 = 0x100000001;
  v11 = 256;
  v2 = sysctl(v12, 2u, a1, &v11, 0, 0);
  *(_QWORD *)v12 = 0xA00000001;
  v11 = 256;
  v3 = sysctl(v12, 2u, a1->nodename, &v11, 0, 0);
  *(_QWORD *)v12 = 0x200000001;
  v11 = 256;
  v6 = sysctl(v12, 2u, a1->release, &v11, 0, 0) == -1 || v3 == -1 || v2 == -1;
  *(_QWORD *)v12 = 0x400000001;
  v11 = 256;
  version = a1->version;
  if (sysctl(v12, 2u, a1->version, &v11, 0, 0) == -1)
  {
    v8 = -1;
  }
  else
  {
    v8 = v6 << 31 >> 31;
    if (v11)
    {
      v9 = v11 - 1;
      do
      {
        if (*version - 9 <= 1)
          *version = 32 * (v9 > 1);
        ++version;
        --v9;
      }
      while (v9 != -1);
    }
  }
  *(_QWORD *)v12 = 0x100000006;
  v11 = 256;
  if (sysctl(v12, 2u, a1->machine, &v11, 0, 0) == -1)
    return -1;
  else
    return v8;
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  int v6;
  int result;
  int *v8;
  int v9;
  size_t v10;
  int v11;

  if (*a1 != 8)
  {
    if (a2 != 2 || *a1 != 1 || a1[1] != 45)
      return __sysctl();
    if (!a5)
    {
      if (a3)
      {
        if (!a4)
        {
          v8 = __error();
          v9 = 14;
          goto LABEL_13;
        }
        if (*a4 <= 1)
          goto LABEL_24;
        result = 0;
        *(_WORD *)a3 = 47;
      }
      else
      {
        result = 0;
        if (!a4)
          return result;
      }
      v10 = 2;
LABEL_32:
      *a4 = v10;
      return result;
    }
    goto LABEL_12;
  }
  if (a5)
  {
LABEL_12:
    v8 = __error();
    v9 = 1;
LABEL_13:
    *v8 = v9;
    return -1;
  }
  if (a2 != 2)
  {
LABEL_20:
    v8 = __error();
    v9 = 22;
    goto LABEL_13;
  }
  v6 = a1[1];
  if (v6 == 1)
  {
    if (a3)
    {
      if (*a4 > 0x1D)
      {
        result = 0;
        *a4 = 30;
        strcpy((char *)a3, "/usr/bin:/bin:/usr/sbin:/sbin");
        return result;
      }
      goto LABEL_24;
    }
    result = 0;
    v10 = 30;
    goto LABEL_32;
  }
  if (!a3)
  {
    result = 0;
    v10 = 4;
    goto LABEL_32;
  }
  if (*a4 <= 3)
  {
LABEL_24:
    v8 = __error();
    v9 = 12;
    goto LABEL_13;
  }
  *a4 = 4;
  switch(v6)
  {
    case 2:
    case 4:
      result = 0;
      v11 = 99;
      goto LABEL_41;
    case 3:
    case 8:
      result = 0;
      v11 = 2048;
      goto LABEL_41;
    case 5:
      result = 0;
      v11 = 1000;
      goto LABEL_41;
    case 6:
      result = 0;
      v11 = 2;
      goto LABEL_41;
    case 7:
      result = 0;
      v11 = 32;
      goto LABEL_41;
    case 9:
    case 20:
      result = 0;
      v11 = 255;
      goto LABEL_41;
    case 10:
      result = 0;
      v11 = 200112;
      goto LABEL_41;
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      result = 0;
      *(_DWORD *)a3 = 0;
      return result;
    case 19:
      result = 0;
      v11 = 20;
LABEL_41:
      *(_DWORD *)a3 = v11;
      break;
    default:
      goto LABEL_20;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2(int a1, int a2, const char *a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char __str)
{
  return snprintf(&__str, 0x100uLL, a3);
}

uint64_t OUTLINED_FUNCTION_2_0(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 16))(a1, v1);
}

uint64_t OUTLINED_FUNCTION_2_1()
{
  _opaque_pthread_t *v0;

  return pthread_kill(v0, 6);
}

char *OUTLINED_FUNCTION_0()
{
  return _os_assert_log();
}

uint64_t OUTLINED_FUNCTION_0_0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 a15, __int128 a16)
{
  const void *v16;
  uint64_t v17;

  a15 = 0u;
  a16 = 0u;
  *(_QWORD *)(v17 - 83) = 0;
  *(_OWORD *)(v17 - 112) = 0u;
  *(_OWORD *)(v17 - 96) = 0u;
  return dladdr(v16, (Dl_info *)&a15);
}

uint64_t OUTLINED_FUNCTION_0_1()
{
  return _simple_dprintf();
}

void OUTLINED_FUNCTION_0_2()
{
  char *v0;
  const char *v1;
  uint64_t v2;

  _e_visprintf(*(FILE **)(v2 + 3528), v1, v0);
}

uint64_t OUTLINED_FUNCTION_0_3@<X0>(int a1@<W8>, uint64_t a2, int a3, sigset_t a4, uint64_t a5, int a6)
{
  a6 = a1;
  a4 = -1;
  return sigprocmask(3, &a4, 0);
}

uint64_t _os_log_redirect(const mach_header_64 *a1, uint64_t a2)
{
  uint8_t *v3;
  BOOL v4;
  unint64_t size;

  size = 0;
  v3 = getsectiondata(a1, "__DATA", "__os_assumes_log", &size);
  if (v3)
    v4 = size > 7;
  else
    v4 = 0;
  if (v4 && *(_QWORD *)v3)
    return (*(uint64_t (**)(uint64_t))v3)(a2);
  else
    return 0;
}

uint64_t _os_debug_log_write(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if (*(_QWORD *)(MEMORY[0x1E0C87FA0] + 192) == -1)
    v3 = *(_QWORD *)(MEMORY[0x1E0C87FA0] + 200);
  else
    v3 = _os_alloc_once();
  v4 = *(_DWORD *)(v3 + 16);
  v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  if (v5)
  {
    result = v5(a2);
    if ((result & 1) != 0)
      return result;
  }
  if (v4 < 0)
    goto LABEL_13;
  v7 = _platform_strlen();
  v8 = 0;
  v9 = v7 + 1;
  *(_BYTE *)(a2 + v7) = 10;
  while (1)
  {
    result = write_NOCANCEL();
    if (result == -1)
      break;
LABEL_10:
    v8 += result;
    if (v8 >= v9)
      return result;
  }
  if (*__error() == 4)
  {
    result = 0;
    goto LABEL_10;
  }
  _os_debug_log_write_error();
  *(_DWORD *)(v3 + 16) = -1;
LABEL_13:
  dyld_image_header_containing_address();
  _dyld_get_image_uuid();
  if ((_dyld_get_shared_cache_uuid() & 1) != 0)
    _dyld_get_shared_cache_range();
  os_log_simple_type_from_asl();
  return __os_log_simple_offset();
}

uint64_t _os_debug_log_error_offset(uint64_t a1)
{
  return _os_debug_log_write(3, a1);
}

uint64_t OUTLINED_FUNCTION_1(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v3;

  return snprintf((char *)(v3 - 176), 0x40uLL, a3);
}

int *OUTLINED_FUNCTION_1_0()
{
  return __error();
}

uint64_t OUTLINED_FUNCTION_1_1()
{
  const sigset_t *v0;

  return pthread_sigmask(3, v0, 0);
}

char *__cdecl realpath(const char *a1, char *a2)
{
  _BYTE *v2;
  char *v3;
  _BYTE *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  stat *v9;
  unint64_t v10;
  int *v11;
  int v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t st_dev;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  int v24;
  char v25;
  dev_t v26;
  __darwin_ino64_t st_ino;
  char *v28;
  ssize_t v29;
  unint64_t v30;
  char *v31;
  int *v32;
  int v33;
  int v34;
  uint64_t v35;
  __darwin_ino64_t v36;
  unsigned int v37;
  stat v38;
  char __s[1024];
  statfs v40;
  char v41[1024];
  unsigned __int16 v42;
  unsigned __int8 v43;
  _BYTE v44[1024];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;

  v2 = (_BYTE *)MEMORY[0x1E0C86820](a1, a2);
  v76 = 0u;
  v75 = 0u;
  v74 = 0u;
  v73 = 0u;
  v72 = 0u;
  v71 = 0u;
  v70 = 0u;
  v69 = 0u;
  v68 = 0u;
  v67 = 0u;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  memset(&v38, 0, sizeof(v38));
  memset(&v40, 0, 512);
  if (!v2)
  {
    v11 = __error();
    v6 = 0;
    v12 = 22;
LABEL_14:
    *v11 = v12;
    return v6;
  }
  v4 = v2;
  if (!*v2)
  {
    v11 = __error();
    v6 = 0;
    v12 = 2;
    goto LABEL_14;
  }
  v5 = v3;
  v6 = v3;
  if (!v3)
  {
    v6 = (char *)malloc_type_malloc(0x400uLL, 0x2E12113EuLL);
    if (!v6)
      return v6;
  }
  if ((realpath_rootdev_inited & 1) == 0)
  {
    realpath_rootdev_inited = 1;
    if (stat("/", &v38) < 0)
      goto LABEL_86;
    realpath_rootdev = v38.st_dev;
  }
  __error();
  if (*v4 == 47)
  {
    *(_WORD *)v6 = 47;
    if (!v4[1])
      return v6;
    v7 = _platform_strlcpy();
    if (v7 >= 0x400)
      goto LABEL_83;
    v8 = v7;
    v9 = (stat *)&realpath_rootdev;
    v10 = 1;
  }
  else
  {
    if (!__private_getcwd(v6, 1024, 0))
    {
      *(_WORD *)v6 = 46;
      goto LABEL_86;
    }
    v10 = _platform_strlen();
    v14 = _platform_strlcpy();
    if (v14 > 0x3FF || v10 > 0x3FF)
      goto LABEL_83;
    v8 = v14;
    if (v10 < 2)
    {
      v9 = (stat *)&realpath_rootdev;
    }
    else
    {
      v9 = &v38;
      if (stat(v6, &v38) < 0)
        goto LABEL_86;
    }
  }
  if (!v8)
  {
    v17 = v10;
LABEL_90:
    if (v17 >= 2 && v6[v17 - 1] == 47)
      v6[v17 - 1] = 0;
    return v6;
  }
  v35 = 0;
  v36 = 0;
  LODWORD(v15) = 0;
  st_dev = v9->st_dev;
  while (2)
  {
    v37 = v15;
    v15 = st_dev;
    v17 = v10;
    while (1)
    {
      v18 = _platform_strchr();
      v19 = v18;
      v20 = v18 - (_QWORD)v44;
      if (v18)
        v21 = v18 - (_QWORD)v44;
      else
        v21 = v8;
      _platform_memmove();
      *((_BYTE *)&v42 + v21) = 0;
      if (v19)
      {
        _platform_memmove();
        v8 += ~v20;
      }
      else
      {
        v8 = 0;
        v44[0] = 0;
      }
      if (v6[v17 - 1] != 47)
      {
        if (v17 + 1 >= 0x400)
          goto LABEL_83;
        v6[v17] = 47;
        v6[++v17] = 0;
      }
      if (!(_BYTE)v42 || v42 == 46)
        goto LABEL_41;
      if (v42 ^ 0x2E2E | v43)
        break;
      if (v17 >= 2)
      {
        v6[v17 - 1] = 0;
        v22 = strrchr(v6, 47);
        v22[1] = 0;
        v17 = v22 + 1 - v6;
      }
LABEL_41:
      if (!v8)
        goto LABEL_90;
    }
    v23 = _platform_strlcat();
    if (v23 >= 0x400)
      goto LABEL_83;
    v10 = v23;
    if (!getattrlist(v6, &_rp_alist, &v45, 0x41CuLL, 1u))
    {
      v25 = 0;
      v26 = HIDWORD(v45);
      HIDWORD(v35) = v46 == 5;
      st_ino = DWORD1(v46);
      goto LABEL_52;
    }
    if (*__error() != 45 && *__error() != 22)
      goto LABEL_86;
    v24 = lstat(v6, &v38);
    if (!v24)
    {
      HIDWORD(v35) = (v38.st_mode & 0xF000) == 40960;
      v26 = v38.st_dev;
      v25 = 1;
      st_ino = v38.st_ino;
LABEL_52:
      v36 = st_ino;
LABEL_53:
      v37 = v26;
      if (v26 != (_DWORD)v15)
      {
        if (statfs(v6, &v40))
        {
          v15 = v37;
        }
        else
        {
          v15 = v37;
          if (!lstat(v40.f_mntonname, &v38) && v37 == v38.st_dev && v36 == v38.st_ino)
          {
            _platform_strcpy();
            do
            {
              v28 = strrchr(__s, 47);
              if (!v28)
                break;
              if (v28 <= __s)
              {
                v17 = _platform_strlcpy();
                goto LABEL_41;
              }
              *v28 = 0;
            }
            while ((lstat(__s, &v38) & 0x80000000) == 0 && (v38.st_mode & 0xF000) == 0x4000);
          }
        }
      }
      if (!HIDWORD(v35))
      {
        if ((v25 & 1) != 0)
        {
          st_dev = v15;
        }
        else
        {
          v6[v17] = 0;
          v10 = _platform_strlcat();
          st_dev = v15;
          if (v10 >= 0x400)
            goto LABEL_83;
        }
LABEL_81:
        v17 = v10;
        if (!v8)
          goto LABEL_90;
        continue;
      }
      if (v35 >= 0x21)
      {
        v32 = __error();
        v33 = 62;
        goto LABEL_85;
      }
      v29 = readlink(v6, v41, 0x400uLL);
      v30 = v29;
      if ((unint64_t)(v29 - 1024) <= 0xFFFFFFFFFFFFFC00)
      {
        if (v29 < 0)
          goto LABEL_86;
        v32 = __error();
        if (!v30)
        {
          v33 = 2;
          goto LABEL_85;
        }
        goto LABEL_84;
      }
      v41[v29] = 0;
      if (v41[0] == 47)
      {
        v6[1] = 0;
        st_dev = realpath_rootdev;
        v10 = 1;
      }
      else
      {
        v31 = strrchr(v6, 47);
        v31[1] = 0;
        v10 = v31 + 1 - v6;
        st_dev = v15;
      }
      if (!v19)
        goto LABEL_79;
      if (v41[v30 - 1] != 47)
      {
        if (v30 >= 0x3FF)
          goto LABEL_83;
        *(_WORD *)&v41[v30] = 47;
      }
      if ((unint64_t)_platform_strlcat() < 0x400)
      {
LABEL_79:
        LODWORD(v35) = v35 + 1;
        v8 = _platform_strlcpy();
        goto LABEL_81;
      }
LABEL_83:
      v32 = __error();
LABEL_84:
      v33 = 63;
LABEL_85:
      *v32 = v33;
      goto LABEL_86;
    }
    break;
  }
  if ((v24 & 0x80000000) == 0)
  {
    v25 = 0;
    v26 = v37;
    goto LABEL_53;
  }
LABEL_86:
  if (v5)
    return 0;
  v34 = *__error();
  free(v6);
  v6 = 0;
  *__error() = v34;
  return v6;
}

char *__cdecl inet_ntoa(in_addr a1)
{
  in_addr_t s_addr;

  s_addr = a1.s_addr;
  strcpy((char *)&inet_ntoa_ret, "[inet_ntoa error]");
  inet_ntop(2, &s_addr, (char *)&inet_ntoa_ret, 0x12u);
  return (char *)&inet_ntoa_ret;
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  if (a1 == 30 && a2)
    return (const char *)inet_ntop6((uint64_t)a2, (uint64_t)a3, a4);
  if (a1 == 2 && a2)
    return (const char *)inet_ntop4((unsigned __int8 *)a2, (uint64_t)a3, a4);
  *__error() = 47;
  return 0;
}

uint64_t inet_ntop4(unsigned __int8 *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  int v12;
  char __str[8];
  uint64_t v15;

  if (a1)
  {
    v3 = a2;
    if (a2)
    {
      *(_QWORD *)__str = 0;
      v15 = 0;
      v6 = __str;
      snprintf(__str, 4uLL, "%d", *a1);
      v7 = _platform_strlen();
      v8 = v7 + 4;
      v9 = 1;
      do
      {
        v10 = &v6[v7];
        *v10 = 46;
        v6 = v10 + 1;
        snprintf(v6, 4uLL, "%d", a1[v9]);
        v7 = _platform_strlen();
        v8 += v7;
        ++v9;
      }
      while ((_DWORD)v9 != 4);
      if (v8 <= a3)
      {
        _platform_memmove();
        return v3;
      }
      v11 = __error();
      v3 = 0;
    }
    else
    {
      v11 = __error();
    }
    v12 = 28;
  }
  else
  {
    v11 = __error();
    v3 = 0;
    v12 = 47;
  }
  *v11 = v12;
  return v3;
}

int inet_pton(int a1, const char *a2, void *a3)
{
  char *v4;
  char *v6;
  char *v7;
  char *v8;
  int *v9;
  int v10;
  int v11;
  char *v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  char *v19;
  int v20;
  uint64_t v21;
  const char *v22;
  int v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  int v34;
  __int128 v35;

  v4 = (char *)a2;
  if (a1 != 30)
  {
    if (a1 == 2)
      return inet_pton4(a2, a3);
    v9 = __error();
    v10 = 47;
    goto LABEL_9;
  }
  if (a2 && (v6 = strrchr((char *)a2, 37)) != 0)
  {
    v7 = v6;
    v8 = strdup(v4);
    if (!v8)
    {
      v9 = __error();
      v10 = 12;
LABEL_9:
      *v9 = v10;
      return -1;
    }
    v34 = 0;
    v32 = v7;
    v8[v7 - v4] = 0;
    v4 = v8;
  }
  else
  {
    v32 = 0;
    v34 = 1;
  }
  v35 = 0uLL;
  v11 = *v4;
  if (!*v4 || (v12 = v4, v11 == 58) && (v12 = v4 + 1, v4[1] != 58))
  {
LABEL_52:
    if ((v34 & 1) == 0)
      free(v4);
    return 0;
  }
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = (char *)&v35;
  while (2)
  {
    v30 = v12;
    v31 = v14;
    v33 = v15;
    v17 = (char *)&v35 + v15;
    ++v12;
    v18 = 1;
    v19 = v16;
    while (1)
    {
      v20 = (char)v11;
      v21 = _platform_memchr();
      if (!v21)
        break;
      v22 = "0123456789abcdef";
LABEL_20:
      v13 = (v21 - (_DWORD)v22) | (16 * v13);
      if (HIWORD(v13))
        goto LABEL_52;
      v18 = 0;
      v23 = *v12++;
      LOBYTE(v11) = v23;
      v19 = v17;
      if (!v23)
      {
        if (v33 > 14)
          goto LABEL_52;
        *(_WORD *)((char *)&v35 + v33) = bswap32(v13) >> 16;
        v15 = v33 + 2;
LABEL_34:
        v19 = v31;
        goto LABEL_35;
      }
    }
    v21 = _platform_memchr();
    if (v21)
    {
      v22 = "0123456789ABCDEF";
      goto LABEL_20;
    }
    if (v20 != 58)
    {
      if (v20 != 46 || v33 > 12 || (int)inet_pton4(v30, v19) <= 0)
        goto LABEL_52;
      v15 = v33 + 4;
      goto LABEL_34;
    }
    if ((v18 & 1) != 0)
    {
      if (v31)
        goto LABEL_52;
    }
    else
    {
      if (!*v12 || v33 > 14)
        goto LABEL_52;
      v24 = (char *)&v35 + v33;
      *v19 = BYTE1(v13);
      v33 += 2;
      v24[1] = v13;
      v19 = v31;
      v13 = 0;
    }
    v15 = v33;
    v16 = (char *)&v35 + v33;
    LOBYTE(v11) = *v12;
    v14 = v19;
    if (*v12)
      continue;
    break;
  }
LABEL_35:
  if (v19)
  {
    if (v15 == 16)
      goto LABEL_52;
    v25 = (char *)&v35 + v15;
    v26 = (char *)((char *)&v35 + v15 - v19);
    if ((int)v25 - (int)v19 >= 1)
    {
      v27 = ((_DWORD)v26 + 1) - 1;
      v28 = (char *)&v35 + 15;
      v29 = &v19[(int)v26 - 1];
      do
      {
        *v28-- = *v29;
        *v29-- = 0;
        --v27;
      }
      while (v27);
    }
  }
  else if (v15 != 16)
  {
    goto LABEL_52;
  }
  *(_OWORD *)a3 = v35;
  if ((v34 & 1) == 0)
  {
    free(v4);
    if (*(unsigned __int8 *)a3 == 254 && (*((_BYTE *)a3 + 1) & 0xC0) == 0x80)
      *((_WORD *)a3 + 1) = bswap32(if_nametoindex(v32 + 1)) >> 16;
  }
  return 1;
}

uint64_t inet_pton4(_BYTE *a1, _DWORD *a2)
{
  char v2;
  uint64_t v4;
  int v5;
  int v6;
  unsigned __int8 *v7;
  int *v8;
  uint64_t result;
  int v10;
  int v11;

  LOBYTE(v11) = 0;
  v2 = *a1;
  if (!*a1)
    return 0;
  LOBYTE(v4) = 0;
  v5 = 0;
  v6 = 0;
  v7 = a1 + 1;
  v8 = &v11;
  do
  {
    result = _platform_memchr();
    if (result)
    {
      v4 = result - (_QWORD)"0123456789" + 10 * v4;
      if ((v4 & 0xFFFFFF00) != 0)
        return 0;
      *(_BYTE *)v8 = v4;
      if (!v6)
      {
        if (v5 > 3)
          return 0;
        ++v5;
      }
      v6 = 1;
    }
    else
    {
      if (!v6 || v2 != 46 || v5 == 4)
        return result;
      LOBYTE(v4) = 0;
      v6 = 0;
      *((_BYTE *)v8 + 1) = 0;
      v8 = (int *)((char *)v8 + 1);
    }
    v10 = *v7++;
    v2 = v10;
  }
  while (v10);
  if (v5 < 4)
    return 0;
  *a2 = v11;
  return 1;
}

char **__cdecl backtrace_symbols(void *const *a1, int a2)
{
  uint64_t v4;
  char **v5;
  char **v6;
  size_t v7;
  uint64_t v8;
  const void **v9;
  size_t v10;
  char **v11;
  uint64_t v12;
  char **v13;
  char **v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  uint64_t v21;

  v4 = a2;
  v5 = (char **)malloc_type_calloc(a2, 0x20uLL, 0xD004058BC3203uLL);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = 8 * v4;
  if (a2 < 1)
  {
    v14 = (char **)malloc_type_malloc(v7, 0xB0A8E4A8uLL);
    if (!v14)
      goto LABEL_20;
    goto LABEL_21;
  }
  v8 = 0;
  v21 = a2;
  v9 = (const void **)a1;
  v10 = v7;
  do
  {
    v11 = &v6[v8];
    dladdr(*v9, (Dl_info *)&v6[v8]);
    if (v6[v8 + 2])
    {
      if (!_platform_strcmp())
      {
        v12 = 36;
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    if (*v11)
    {
      strrchr(*v11, 47);
LABEL_9:
      v12 = _platform_strlen();
      goto LABEL_10;
    }
    v12 = 18;
LABEL_10:
    v10 += 83 + v12;
    v8 += 4;
    ++v9;
  }
  while (4 * a2 != v8);
  v13 = (char **)malloc_type_malloc(v10, 0xB0A8E4A8uLL);
  v14 = v13;
  if (v13)
  {
    v15 = 0;
    v16 = (char *)v13 + v10;
    v17 = (char *)&v13[v7 / 8];
    v18 = (uint64_t)v6;
    while (1)
    {
      v19 = _backtrace_snprintf(v17, v16 - v17, v15, (uint64_t)a1[v15], v18);
      if (v19 < 0)
        break;
      v14[v15] = v17;
      v17 += (v19 + 1);
      ++v15;
      v18 += 32;
      if (v21 == v15)
        goto LABEL_21;
    }
  }
LABEL_20:
  free(v6);
  v6 = v14;
  v14 = 0;
LABEL_21:
  free(v6);
  return v14;
}

uint64_t _backtrace_snprintf(char *a1, size_t a2, int a3, uint64_t a4, uint64_t a5)
{
  const char *v10;
  const char *v11;
  _QWORD *v12;
  uint64_t v13;
  char out[44];
  char v16;
  unsigned __int8 uu[8];
  uint64_t v18;

  memset(out, 0, 37);
  if (*(_QWORD *)a5)
  {
    strrchr(*(char **)a5, 47);
    v10 = &v16;
    _platform_strlcpy();
  }
  else
  {
    v10 = "???";
  }
  v11 = *(const char **)(a5 + 16);
  if (v11)
  {
    *(_QWORD *)uu = 0;
    v18 = 0;
    if (!_platform_strcmp())
    {
      v12 = (_QWORD *)(a5 + 8);
      if ((_dyld_get_image_uuid() & 1) != 0)
      {
        v11 = out;
        uuid_unparse(uu, out);
LABEL_14:
        v13 = a4 - *v12;
        return snprintf(a1, a2, "%-4d%-35s 0x%016lx %s + %lu", a3, v10, a4, v11, v13);
      }
      v11 = *(const char **)(a5 + 16);
    }
    v12 = (_QWORD *)(a5 + 24);
    goto LABEL_14;
  }
  if (*(_QWORD *)a5)
  {
    v13 = a4 - *(_QWORD *)(a5 + 8);
    v11 = v10;
  }
  else if (snprintf((char *)uu, 0x13uLL, "0x%lx", *(_QWORD *)(a5 + 24)) < 1)
  {
    v11 = "0x0";
    v13 = a4;
  }
  else
  {
    v13 = a4 - *(_QWORD *)(a5 + 24);
    v11 = (const char *)uu;
  }
  return snprintf(a1, a2, "%-4d%-35s 0x%016lx %s + %lu", a3, v10, a4, v11, v13);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  uint64_t v4;
  _xlocale *v5;
  _xlocale *v6;
  va_list va;

  va_start(va, __format);
  v4 = __locale_key;
  v5 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (v5)
    v6 = v5;
  else
    v6 = (_xlocale *)&__global_locale;
  return vsnprintf_l(__str, __size, v6, __format, va);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
  uint64_t v2;

  v2 = 0;
  do
  {
    if (v2 <= 0xA && ((1 << v2) & 0x550) != 0)
      *out++ = 45;
    *out = a0123456789abcd_0[(unint64_t)uu[v2] >> 4];
    out[1] = a0123456789abcd_0[uu[v2] & 0xF];
    out += 2;
    ++v2;
  }
  while ((_DWORD)v2 != 16);
  *out = 0;
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  _BYTE *v2;
  char *v3;
  _BYTE *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  stat *v9;
  unint64_t v10;
  int *v11;
  int v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t st_dev;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  int v24;
  char v25;
  dev_t v26;
  __darwin_ino64_t st_ino;
  char *v28;
  ssize_t v29;
  unint64_t v30;
  char *v31;
  int *v32;
  int v33;
  int v34;
  uint64_t v35;
  __darwin_ino64_t v36;
  unsigned int v37;
  stat v38;
  char __s[1024];
  statfs v40;
  char v41[1024];
  unsigned __int16 v42;
  unsigned __int8 v43;
  _BYTE v44[1024];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;

  v2 = (_BYTE *)MEMORY[0x1E0C86820](a1, a2);
  v76 = 0u;
  v75 = 0u;
  v74 = 0u;
  v73 = 0u;
  v72 = 0u;
  v71 = 0u;
  v70 = 0u;
  v69 = 0u;
  v68 = 0u;
  v67 = 0u;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  memset(&v38, 0, sizeof(v38));
  memset(&v40, 0, 512);
  if (!v2)
  {
    v11 = __error();
    v6 = 0;
    v12 = 22;
LABEL_14:
    *v11 = v12;
    return v6;
  }
  v4 = v2;
  if (!*v2)
  {
    v11 = __error();
    v6 = 0;
    v12 = 2;
    goto LABEL_14;
  }
  v5 = v3;
  v6 = v3;
  if (!v3)
  {
    v6 = (char *)malloc_type_malloc(0x400uLL, 0x2E12113EuLL);
    if (!v6)
      return v6;
  }
  if ((realpath_DARWIN_EXTSN_rootdev_inited & 1) == 0)
  {
    realpath_DARWIN_EXTSN_rootdev_inited = 1;
    if (stat("/", &v38) < 0)
      goto LABEL_86;
    realpath_DARWIN_EXTSN_rootdev = v38.st_dev;
  }
  __error();
  if (*v4 == 47)
  {
    *(_WORD *)v6 = 47;
    if (!v4[1])
      return v6;
    v7 = _platform_strlcpy();
    if (v7 >= 0x400)
      goto LABEL_83;
    v8 = v7;
    v9 = (stat *)&realpath_DARWIN_EXTSN_rootdev;
    v10 = 1;
  }
  else
  {
    if (!__private_getcwd(v6, 1024, 1))
    {
      *(_WORD *)v6 = 46;
      goto LABEL_86;
    }
    v10 = _platform_strlen();
    v14 = _platform_strlcpy();
    if (v14 > 0x3FF || v10 > 0x3FF)
      goto LABEL_83;
    v8 = v14;
    if (v10 < 2)
    {
      v9 = (stat *)&realpath_DARWIN_EXTSN_rootdev;
    }
    else
    {
      v9 = &v38;
      if (stat(v6, &v38) < 0)
        goto LABEL_86;
    }
  }
  if (!v8)
  {
    v17 = v10;
LABEL_90:
    if (v17 >= 2 && v6[v17 - 1] == 47)
      v6[v17 - 1] = 0;
    return v6;
  }
  v35 = 0;
  v36 = 0;
  LODWORD(v15) = 0;
  st_dev = v9->st_dev;
  while (2)
  {
    v37 = v15;
    v15 = st_dev;
    v17 = v10;
    while (1)
    {
      v18 = _platform_strchr();
      v19 = v18;
      v20 = v18 - (_QWORD)v44;
      if (v18)
        v21 = v18 - (_QWORD)v44;
      else
        v21 = v8;
      _platform_memmove();
      *((_BYTE *)&v42 + v21) = 0;
      if (v19)
      {
        _platform_memmove();
        v8 += ~v20;
      }
      else
      {
        v8 = 0;
        v44[0] = 0;
      }
      if (v6[v17 - 1] != 47)
      {
        if (v17 + 1 >= 0x400)
          goto LABEL_83;
        v6[v17] = 47;
        v6[++v17] = 0;
      }
      if (!(_BYTE)v42 || v42 == 46)
        goto LABEL_41;
      if (v42 ^ 0x2E2E | v43)
        break;
      if (v17 >= 2)
      {
        v6[v17 - 1] = 0;
        v22 = strrchr(v6, 47);
        v22[1] = 0;
        v17 = v22 + 1 - v6;
      }
LABEL_41:
      if (!v8)
        goto LABEL_90;
    }
    v23 = _platform_strlcat();
    if (v23 >= 0x400)
      goto LABEL_83;
    v10 = v23;
    if (!getattrlist(v6, &_rp_alist, &v45, 0x41CuLL, 1u))
    {
      v25 = 0;
      v26 = HIDWORD(v45);
      HIDWORD(v35) = v46 == 5;
      st_ino = DWORD1(v46);
      goto LABEL_52;
    }
    if (*__error() != 45 && *__error() != 22)
      goto LABEL_86;
    v24 = lstat(v6, &v38);
    if (!v24)
    {
      HIDWORD(v35) = (v38.st_mode & 0xF000) == 40960;
      v26 = v38.st_dev;
      v25 = 1;
      st_ino = v38.st_ino;
LABEL_52:
      v36 = st_ino;
LABEL_53:
      v37 = v26;
      if (v26 != (_DWORD)v15)
      {
        if (statfs(v6, &v40))
        {
          v15 = v37;
        }
        else
        {
          v15 = v37;
          if (!lstat(v40.f_mntonname, &v38) && v37 == v38.st_dev && v36 == v38.st_ino)
          {
            _platform_strcpy();
            do
            {
              v28 = strrchr(__s, 47);
              if (!v28)
                break;
              if (v28 <= __s)
              {
                v17 = _platform_strlcpy();
                goto LABEL_41;
              }
              *v28 = 0;
            }
            while ((lstat(__s, &v38) & 0x80000000) == 0 && (v38.st_mode & 0xF000) == 0x4000);
          }
        }
      }
      if (!HIDWORD(v35))
      {
        if ((v25 & 1) != 0)
        {
          st_dev = v15;
        }
        else
        {
          v6[v17] = 0;
          v10 = _platform_strlcat();
          st_dev = v15;
          if (v10 >= 0x400)
            goto LABEL_83;
        }
LABEL_81:
        v17 = v10;
        if (!v8)
          goto LABEL_90;
        continue;
      }
      if (v35 >= 0x21)
      {
        v32 = __error();
        v33 = 62;
        goto LABEL_85;
      }
      v29 = readlink(v6, v41, 0x400uLL);
      v30 = v29;
      if ((unint64_t)(v29 - 1024) <= 0xFFFFFFFFFFFFFC00)
      {
        if (v29 < 0)
          goto LABEL_86;
        v32 = __error();
        if (!v30)
        {
          v33 = 2;
          goto LABEL_85;
        }
        goto LABEL_84;
      }
      v41[v29] = 0;
      if (v41[0] == 47)
      {
        v6[1] = 0;
        st_dev = realpath_DARWIN_EXTSN_rootdev;
        v10 = 1;
      }
      else
      {
        v31 = strrchr(v6, 47);
        v31[1] = 0;
        v10 = v31 + 1 - v6;
        st_dev = v15;
      }
      if (!v19)
        goto LABEL_79;
      if (v41[v30 - 1] != 47)
      {
        if (v30 >= 0x3FF)
          goto LABEL_83;
        *(_WORD *)&v41[v30] = 47;
      }
      if ((unint64_t)_platform_strlcat() < 0x400)
      {
LABEL_79:
        LODWORD(v35) = v35 + 1;
        v8 = _platform_strlcpy();
        goto LABEL_81;
      }
LABEL_83:
      v32 = __error();
LABEL_84:
      v33 = 63;
LABEL_85:
      *v32 = v33;
      goto LABEL_86;
    }
    break;
  }
  if ((v24 & 0x80000000) == 0)
  {
    v25 = 0;
    v26 = v37;
    goto LABEL_53;
  }
LABEL_86:
  if (v5)
    return 0;
  v34 = *__error();
  free(v6);
  v6 = 0;
  *__error() = v34;
  return v6;
}

char *__cdecl strrchr(char *__s, int __c)
{
  char *result;
  char *v4;
  int v5;
  int v6;

  result = 0;
  v4 = __s;
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((char)__c == v6)
      result = __s;
    __s = v4;
  }
  while (v5);
  return result;
}

lconv *localeconv(void)
{
  uint64_t v0;
  _xlocale *v1;

  v0 = __locale_key;
  v1 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v0);
  if (v1)
    return localeconv_l(v1);
  else
    return localeconv_l((locale_t)&__global_locale);
}

int mkpath_np(const char *path, mode_t omode)
{
  return _mkpath(-2, (char *)path, omode, 0);
}

double atof(const char *a1)
{
  uint64_t v1;
  _xlocale *v2;
  _xlocale *v3;

  v1 = __locale_key;
  v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2)
    v3 = v2;
  else
    v3 = (_xlocale *)&__global_locale;
  return strtod_l(a1, 0, v3);
}

uint64_t strtoll_l(const char *a1, char **a2, int a3, locale_t a4)
{
  locale_t v6;
  locale_t v7;
  const char *v8;
  int v9;
  int v10;
  _RuneLocale *v11;
  char v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  _BOOL4 v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 v22;
  int v23;
  char v24;
  int v25;
  char *v26;
  int *v28;

  v6 = (locale_t)&__global_locale;
  if (a4 == (locale_t)-1)
    v7 = (locale_t)&__global_locale;
  else
    v7 = a4;
  if (!a4)
    v7 = (locale_t)&__c_locale;
  if (v7 != (locale_t)-1)
    v6 = v7;
  if (!v7)
    v6 = (locale_t)&__c_locale;
  v8 = a1;
  do
  {
    v10 = *v8++;
    v9 = v10;
    v11 = &_DefaultRuneLocale;
    if (v10 < 0)
      v11 = *(_RuneLocale **)(*((_QWORD *)v6 + 166) + 120);
  }
  while ((v11->__runetype[v9] & 0x4000) != 0);
  if (v9 == 43 || v9 == 45)
  {
    v13 = *v8++;
    v12 = v13;
  }
  else
  {
    v12 = v9;
  }
  if ((a3 & 0xFFFFFFEF) != 0 || v12 != 48)
  {
    v16 = a3 == 0;
    if (v12 != 48)
    {
      v17 = 10;
      goto LABEL_29;
    }
  }
  else
  {
    if ((*(unsigned __int8 *)v8 | 0x20) == 0x78)
    {
      v12 = v8[1];
      if ((v12 - 48) < 0xAu
        || (v14 = *((unsigned __int8 *)v8 + 1) - 65, v14 <= 0x25) && ((1 << v14) & 0x3F0000003FLL) != 0)
      {
        v8 += 2;
        v15 = 16;
        goto LABEL_34;
      }
    }
    v16 = a3 == 0;
    v12 = 48;
  }
  v17 = 8;
LABEL_29:
  if (v16)
    v15 = v17;
  else
    v15 = a3;
  if (v15 - 37 < 0xFFFFFFDD)
  {
    v18 = 0;
LABEL_58:
    *__error() = 22;
    v25 = 1;
    v20 = v18;
    if (!a2)
      return v20;
    goto LABEL_59;
  }
LABEL_34:
  v18 = 0;
  v19 = 0;
  if (v9 == 45)
    v20 = 0x8000000000000000;
  else
    v20 = 0x7FFFFFFFFFFFFFFFLL;
  v21 = v20 / v15;
  while (1)
  {
    v22 = v12 - 48;
    if ((v12 - 48) >= 0xAu)
    {
      if ((v12 - 65) > 0x19u)
      {
        if ((v12 - 97) > 0x19u)
          break;
        v22 = v12 - 87;
      }
      else
      {
        v22 = v12 - 55;
      }
    }
    if ((int)v15 <= v22)
      break;
    v23 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v21)
    {
      if (v18 == v21 && v22 > (int)(v20 % v15))
      {
        v18 = v20 / v15;
      }
      else
      {
        v18 = v18 * v15 + v22;
        v23 = 1;
      }
    }
    v24 = *v8++;
    v12 = v24;
    v19 = v23;
  }
  if ((v19 & 0x80000000) == 0)
  {
    if (v19)
    {
      v25 = 0;
      if (v9 == 45)
        v20 = -(uint64_t)v18;
      else
        v20 = v18;
      if (!a2)
        return v20;
      goto LABEL_59;
    }
    goto LABEL_58;
  }
  v28 = __error();
  v25 = 0;
  *v28 = 34;
  if (!a2)
    return v20;
LABEL_59:
  v26 = (char *)(v8 - 1);
  if (v25)
    v26 = (char *)a1;
  *a2 = v26;
  return v20;
}

int usleep(useconds_t a1)
{
  timespec v2;

  v2.tv_sec = a1 / 0xF4240uLL;
  v2.tv_nsec = 1000 * (a1 % 0xF4240);
  return nanosleep(&v2, 0);
}

int nanosleep(const timespec *__rqtp, timespec *__rmtp)
{
  mach_error_t time;
  FILE *v5;
  char *v6;
  mach_error_t v8;
  FILE *v9;
  char *v10;
  clock_res_t v11;
  unsigned int tv_sec;
  unsigned int v13;
  clock_res_t tv_nsec;
  BOOL v15;
  int v16;
  int v17;
  mach_timespec_t cur_time;
  mach_timespec_t v19;

  if (!*MEMORY[0x1E0C88C20])
    *MEMORY[0x1E0C88C20] = 1;
  cur_time = 0;
  v19 = 0;
  pthread_testcancel();
  if (!__rqtp || __rqtp->tv_sec < 0 || __rqtp->tv_nsec >= 0x3B9ACA00uLL)
    goto LABEL_9;
  if (__rmtp)
  {
    time = clock_get_time(clock_port, &cur_time);
    if (time)
    {
      v5 = __stderrp;
      v6 = mach_error_string(time);
      fprintf(v5, "clock_get_time() failed: %s\n", v6);
      goto LABEL_9;
    }
  }
  if ((__semwait_signal() & 0x80000000) == 0)
    return -1;
  if (*__error() != 60)
  {
    if (*__error() == 4)
    {
      if (__rmtp)
      {
        v8 = clock_get_time(clock_port, &v19);
        if (!v8)
        {
          v11 = cur_time.tv_nsec + LODWORD(__rqtp->tv_nsec);
          if (v11 <= 999999999)
          {
            tv_sec = cur_time.tv_sec;
          }
          else
          {
            v11 -= 1000000000;
            tv_sec = cur_time.tv_sec + 1;
          }
          v13 = tv_sec + LODWORD(__rqtp->tv_sec);
          if (v13 <= v19.tv_sec)
          {
            if (v13 < v19.tv_sec || (tv_nsec = v19.tv_nsec, v11 <= v19.tv_nsec))
            {
              __rmtp->tv_sec = 0;
              __rmtp->tv_nsec = 0;
              return -1;
            }
          }
          else
          {
            tv_nsec = v19.tv_nsec;
          }
          v15 = __OFSUB__(v11, tv_nsec);
          v16 = v11 - tv_nsec;
          if (v16 < 0 != v15)
            v17 = v16 + 1000000000;
          else
            v17 = v16;
          __rmtp->tv_sec = v13 + (v16 >> 31) - v19.tv_sec;
          __rmtp->tv_nsec = v17;
          return -1;
        }
        v9 = __stderrp;
        v10 = mach_error_string(v8);
        fprintf(v9, "clock_get_time() failed: %s\n", v10);
      }
      return -1;
    }
LABEL_9:
    *__error() = 22;
    return -1;
  }
  return 0;
}

char *__cdecl ctime(const time_t *a1)
{
  char *result;

  result = (char *)localtime(a1);
  if (result)
    return asctime((const tm *)result);
  return result;
}

uint64_t inet_ntop6(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _BOOL4 v12;
  BOOL v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  _BOOL4 v20;
  BOOL v21;
  unsigned int v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int v32;
  __int128 v33;
  __int128 v34;
  char v35[46];

  v4 = 0;
  v5 = 0;
  v33 = 0u;
  v34 = 0u;
  do
  {
    *((_DWORD *)&v33 + (v5 >> 1)) |= *(unsigned __int8 *)(a1 + v5) << (~(_BYTE)v4 & 8);
    ++v5;
    v4 += 8;
  }
  while (v5 != 16);
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = -1;
  v10 = -1;
  do
  {
    v12 = v10 == -1 || v7 > v8;
    v13 = !v12;
    if (v12)
      v14 = v9;
    else
      v14 = v10;
    if (v13)
      v15 = v8;
    else
      v15 = v7;
    v16 = v9 == -1;
    if (v9 == -1)
    {
      v14 = v10;
      v15 = v8;
      v9 = v6;
    }
    if (v16)
      v17 = 1;
    else
      v17 = v7 + 1;
    if (*((_DWORD *)&v33 + v6))
    {
      v10 = v14;
      v8 = v15;
      v9 = -1;
    }
    else
    {
      v7 = v17;
    }
    ++v6;
  }
  while (v6 != 8);
  v18 = 0;
  v20 = v10 == -1 || v7 > v8;
  v21 = !v20;
  if (v20)
    v22 = v9;
  else
    v22 = v10;
  if (v21)
    v7 = v8;
  if (v9 == -1)
  {
    v22 = v10;
    v23 = v8;
  }
  else
  {
    v23 = v7;
  }
  if (v23 >= 2 || v22 == -1)
    v25 = v22;
  else
    v25 = 0xFFFFFFFFLL;
  v26 = (int)v25 + v23;
  v27 = v35;
  while (1)
  {
    if ((_DWORD)v25 != -1 && v18 >= (int)v25 && v18 < v26)
    {
      if (v25 == v18)
        *v27++ = 58;
      goto LABEL_61;
    }
    if (v18)
    {
      *v27++ = 58;
      if (!(_DWORD)v25 && v18 == 6 && (v23 == 6 || v23 == 7 && HIDWORD(v34) != 1 || v23 == 5 && DWORD1(v34) == 0xFFFF))
        break;
    }
    v27 += sprintf(v27, "%x", *((_DWORD *)&v33 + v18));
LABEL_61:
    if (++v18 == 8)
      goto LABEL_65;
  }
  v32 = *(_DWORD *)(a1 + 12);
  if (!inet_ntop4((unsigned __int8 *)&v32, (uint64_t)v27, v35 - v27 + 46))
    goto LABEL_69;
  v27 += _platform_strlen();
LABEL_65:
  if ((_DWORD)v25 != -1 && (_DWORD)v26 == 8)
    *v27++ = 58;
  *v27 = 0;
  if (v27 - v35 + 1 > a3)
  {
LABEL_69:
    v28 = 0;
    *__error() = 28;
    return v28;
  }
  v28 = a2;
  _platform_strcpy();
  return v28;
}

char *__cdecl ctime_r(const time_t *a1, char *a2)
{
  char *result;
  tm v4;

  memset(&v4, 0, sizeof(v4));
  result = (char *)localtime_r(a1, &v4);
  if (result)
    return asctime_r(&v4, a2);
  return result;
}

char *__cdecl asctime_r(const tm *a1, char *a2)
{
  uint64_t tm_wday;
  const char *v4;
  unint64_t v5;
  char v7[72];
  char v8[13];

  tm_wday = a1->tm_wday;
  if (tm_wday <= 6)
    v4 = (char *)&asctime_r_wday_name + 3 * tm_wday;
  else
    v4 = "???";
  strftime_l(v8, 0xDuLL, "%Y", a1, 0);
  if ((unint64_t)_platform_strlen() >= 5)
    sprintf(v7, "%.3s %.3s%3d %2.2d:%2.2d:%2.2d     %s\n", v4);
  else
    sprintf(v7, "%.3s %.3s%3d %2.2d:%2.2d:%2.2d %-4s\n", v4);
  v5 = _platform_strlen();
  if (a2 == (char *)&buf_asctime || v5 <= 0x19)
  {
    _platform_strcpy();
  }
  else
  {
    a2 = 0;
    *__error() = 84;
  }
  return a2;
}

tm *__cdecl localtime(const time_t *a1)
{
  int v2;
  pthread_key_t v4;
  void *v5;
  void *v6;
  pthread_key_t v7;
  tm *v8;

  pthread_once(&localtime_once, (void (*)(void))localtime_key_init);
  v2 = localtime_key_error;
  if (localtime_key_error)
  {
    *__error() = v2;
    return 0;
  }
  if (localtime_key)
    v4 = 12;
  else
    v4 = 0;
  v5 = pthread_getspecific(v4);
  if (!v5)
  {
    v6 = malloc_type_malloc(0x38uLL, 0x10100404E507D7FuLL);
    if (!v6)
      return 0;
    v5 = v6;
    if (localtime_key)
      v7 = 12;
    else
      v7 = 0;
    pthread_setspecific(v7, v5);
  }
  pthread_rwlock_rdlock(&lcl_rwlock);
  _st_tzset_basic(1);
  v8 = (tm *)_st_localsub((uint64_t *)a1, 0, (uint64_t)v5);
  pthread_rwlock_unlock(&lcl_rwlock);
  return v8;
}

size_t strftime_l(char *a1, size_t a2, const char *a3, const tm *a4, locale_t a5)
{
  locale_t v9;
  _xlocale *v10;
  char *v11;
  char *v12;
  char **current_time_locale;
  char *v14;
  const char *v15;
  const char *v16;
  int v18;

  v9 = (locale_t)&__global_locale;
  if (a5 != (locale_t)-1)
    v9 = a5;
  if (a5)
    v10 = v9;
  else
    v10 = (_xlocale *)&__c_locale;
  tzset();
  v18 = 0;
  if (a3)
    v11 = (char *)a3;
  else
    v11 = "%c";
  v12 = &a1[a2];
  current_time_locale = __get_current_time_locale((uint64_t)v10);
  v14 = _st_fmt(v11, (unsigned int *)a4, a1, v12, &v18, current_time_locale, v10);
  if (v18 && getenv("CHECK_STRFTIME_FORMATS_FOR_TWO_DIGIT_YEARS"))
  {
    fputs("\n", __stderrp);
    if (a3)
      fprintf_l(__stderrp, v10, "strftime format \"%s\" ", a3);
    else
      fputs("NULL strftime format ", __stderrp);
    fputs("yields only two digits of years in ", __stderrp);
    v15 = "all locales";
    if (v18 == 2)
      v15 = "the current locale";
    if (v18 == 1)
      v16 = "some locales";
    else
      v16 = v15;
    fputs(v16, __stderrp);
    fputs("\n", __stderrp);
  }
  if (v14 == v12)
    return 0;
  *v14 = 0;
  return v14 - a1;
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  tm *v4;

  pthread_rwlock_rdlock(&lcl_rwlock);
  _st_tzset_basic(1);
  v4 = (tm *)_st_localsub((uint64_t *)a1, 0, (uint64_t)a2);
  pthread_rwlock_unlock(&lcl_rwlock);
  return v4;
}

uint64_t _st_tzset_basic(int a1)
{
  char *v2;
  const char *v3;
  uint64_t result;
  unint64_t v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE v9[1025];

  v2 = getenv("TZ");
  if (!v2)
    return tzsetwall_basic(a1);
  v3 = v2;
  notify_check_tz((unsigned int *)&lcl_notify);
  if (!a1)
    pthread_rwlock_rdlock(&lcl_rwlock);
  if (dword_1ECCE6BCC < 1 || (result = _platform_strcmp(), (_DWORD)result))
  {
    pthread_rwlock_unlock(&lcl_rwlock);
    pthread_rwlock_wrlock(&lcl_rwlock);
    v5 = _platform_strlen();
    dword_1ECCE6BCC = v5 < 0x100;
    if (v5 <= 0xFF)
      _platform_strcpy();
    v6 = (char *)lclptr;
    if (lclptr || (v6 = (char *)malloc_type_calloc(1uLL, 0x4768uLL, 0x10000402151C985uLL), (lclptr = (uint64_t)v6) != 0))
    {
      if (*v3)
      {
        v7 = v9;
        if (tzload(v3, (uint64_t)v6, v9, 1))
        {
          if (*v3 == 58 || tzparse((unint64_t)v3, lclptr, 0))
          {
            v7 = v9;
            if (v9[0])
              v8 = 0;
            else
              v8 = v9;
            gmtload(lclptr, v8);
          }
          else
          {
            v7 = 0;
          }
        }
        notify_register_tz((unint64_t)v7, &lcl_notify);
      }
      else
      {
        *(_QWORD *)v6 = 0;
        *((_DWORD *)v6 + 2) = 0;
        *(_OWORD *)(v6 + 10824) = 0u;
        *((_DWORD *)v6 + 4242) = 4412501;
        if (*MEMORY[0x1E0C87FE0])
        {
          if ((lcl_notify & 0x80000000) == 0)
            notify_cancel(lcl_notify);
          lcl_notify = -1;
        }
      }
      settzname();
      result = pthread_rwlock_unlock(&lcl_rwlock);
      if (a1)
        return pthread_rwlock_rdlock(&lcl_rwlock);
    }
    else
    {
      settzname();
      result = pthread_rwlock_unlock(&lcl_rwlock);
      if (a1)
        return pthread_rwlock_rdlock(&lcl_rwlock);
    }
  }
  else if (!a1)
  {
    return pthread_rwlock_unlock(&lcl_rwlock);
  }
  return result;
}

char *__cdecl getenv(const char *a1)
{
  char **v2;
  char *v3;
  int v5;

  os_unfair_lock_lock_with_options();
  v2 = (char **)_NSGetEnviron();
  v3 = __findenv_locked(a1, &v5, *v2);
  os_unfair_lock_unlock((os_unfair_lock_t)&__environ_lock_obj);
  return v3;
}

char ***_NSGetEnviron(void)
{
  return (char ***)environ_pointer;
}

_BYTE *__findenv_locked(_BYTE *a1, _DWORD *a2, char *a3)
{
  _BYTE *v3;
  int v4;
  _BYTE *i;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  _BYTE *v12;

  v3 = 0;
  if (a1 && a3)
  {
    v4 = 1;
    for (i = a1; *i && *i != 61; ++i)
      --v4;
    v6 = *(_BYTE **)a3;
    if (*(_QWORD *)a3)
    {
      v7 = a3;
      do
      {
        if (v4 == 1)
        {
LABEL_16:
          if (*v6 == 61)
          {
            v3 = v6 + 1;
            *a2 = (unint64_t)(v7 - a3) >> 3;
            return v3;
          }
        }
        else
        {
          v8 = (uint64_t)&v6[-v4 + 1];
          v9 = v4 - 1;
          v10 = a1;
          while (*v6 && *v6 == *v10)
          {
            ++v6;
            ++v10;
            if (__CFADD__(v9++, 1))
            {
              v6 = (_BYTE *)v8;
              goto LABEL_16;
            }
          }
        }
        v12 = (_BYTE *)*((_QWORD *)v7 + 1);
        v7 += 8;
        v6 = v12;
      }
      while (v12);
    }
    return 0;
  }
  return v3;
}

uint64_t tzsetwall_basic(int a1)
{
  uint64_t result;
  void *v3;
  stat *v4;
  stat v5[7];

  if (*MEMORY[0x1E0C87FE0])
  {
    result = notify_check_tz((unsigned int *)&lcl_notify);
    if (!a1)
      goto LABEL_13;
LABEL_6:
    if (dword_1ECCE6BCC < 0)
      return result;
    goto LABEL_14;
  }
  memset(v5, 0, 144);
  result = lstat("/var/db/timezone/localtime", v5);
  if ((_DWORD)result)
  {
    if (!a1)
      goto LABEL_13;
    goto LABEL_6;
  }
  if (v5[0].st_mtimespec.tv_sec > (uint64_t)last_default_tzload_mtimespec
    || v5[0].st_mtimespec.tv_sec == (_QWORD)last_default_tzload_mtimespec
    && v5[0].st_mtimespec.tv_nsec > *((uint64_t *)&last_default_tzload_mtimespec + 1))
  {
    dword_1ECCE6BCC = 0;
  }
  last_default_tzload_mtimespec = (__int128)v5[0].st_mtimespec;
  if (a1)
    goto LABEL_6;
LABEL_13:
  pthread_rwlock_rdlock(&lcl_rwlock);
  if (dword_1ECCE6BCC < 0)
    return pthread_rwlock_unlock(&lcl_rwlock);
LABEL_14:
  pthread_rwlock_unlock(&lcl_rwlock);
  pthread_rwlock_wrlock(&lcl_rwlock);
  dword_1ECCE6BCC = -1;
  v3 = (void *)lclptr;
  if (lclptr || (v3 = malloc_type_calloc(1uLL, 0x4768uLL, 0x10000402151C985uLL), (lclptr = (uint64_t)v3) != 0))
  {
    if (tzload(0, (uint64_t)v3, v5, 1))
    {
      last_default_tzload_mtimespec = 0uLL;
      if (LOBYTE(v5[0].st_dev))
        v4 = 0;
      else
        v4 = v5;
      gmtload(lclptr, v4);
    }
    notify_register_tz((unint64_t)v5, &lcl_notify);
  }
  settzname();
  result = pthread_rwlock_unlock(&lcl_rwlock);
  if (a1)
    return pthread_rwlock_rdlock(&lcl_rwlock);
  return result;
}

uint64_t _st_localsub(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  int *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *a1;
  v25 = *a1;
  v5 = lclptr;
  if (!lclptr)
    return gmtsub(a1, a2, a3);
  if (*(_DWORD *)(lclptr + 16))
  {
    v6 = *(_QWORD *)(lclptr + 24);
    if (v4 < v6)
      goto LABEL_7;
  }
  v7 = *(_DWORD *)(lclptr + 4);
  if (*(_DWORD *)(lclptr + 20) && v4 > *(_QWORD *)(lclptr + 8 * (v7 - 1) + 24))
  {
    v6 = *(_QWORD *)(lclptr + 24);
LABEL_7:
    LODWORD(v8) = v6 - v4;
    if (v6 <= v4)
      v8 = v4 - *(_QWORD *)(lclptr + 8 * *(int *)(lclptr + 4) + 16);
    v9 = 400 * (((int)v8 - 1) / -262121088);
    v10 = 31556952 * (v9 + 400);
    if (v6 <= v4)
      v10 = -31556952 * (v9 + 400);
    v11 = v10 + v4;
    v24 = v11;
    if (v11 < v6 || v11 > *(_QWORD *)(lclptr + 8 * *(int *)(lclptr + 4) + 16))
      return 0;
    result = _st_localsub(&v24, a2, a3);
    if (result == a3)
    {
      v18 = v4 >= *(_QWORD *)(v5 + 24) ? v9 + 400 : -400 - v9;
      v19 = v18 + *(int *)(a3 + 20);
      *(_DWORD *)(a3 + 20) = v19;
      if (v19 != (int)v19)
        return 0;
    }
    return result;
  }
  if (v7 && v4 >= *(_QWORD *)(lclptr + 24))
  {
    if (v7 < 2)
    {
      v13 = 0;
    }
    else
    {
      v16 = 1;
      do
      {
        v17 = (v7 + v16) >> 1;
        if (v4 < *(_QWORD *)(lclptr + 8 * v17 + 24))
          v7 = (v7 + v16) >> 1;
        else
          v16 = v17 + 1;
      }
      while (v16 < v7);
      v13 = v16 - 1;
    }
    LODWORD(v13) = *(unsigned __int8 *)(lclptr + v13 + 9624);
  }
  else
  {
    v13 = 0;
    v14 = (int *)(lclptr + 10832);
    while (1)
    {
      v15 = *v14;
      v14 += 6;
      if (!v15)
        break;
      if (++v13 >= *(int *)(lclptr + 8))
      {
        LODWORD(v13) = 0;
        break;
      }
    }
  }
  v20 = v13;
  result = timesub(&v25, *(_QWORD *)(lclptr + 24 * v13 + 10824), (unsigned int *)lclptr, a3);
  if (result)
  {
    v21 = v5 + 24 * v20;
    v22 = *(int *)(v21 + 10832);
    *(_DWORD *)(a3 + 32) = v22;
    v23 = (char *)(v5 + 16968 + *(int *)(v21 + 10836));
    tzname[v22] = v23;
    *(_QWORD *)(a3 + 48) = v23;
  }
  return result;
}

uint64_t timesub(uint64_t *a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int16 v21;
  uint64_t v22;
  _BOOL4 v23;
  _BOOL4 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (a3)
    v4 = *a3;
  else
    v4 = 0;
  v5 = (v4 << 32) - 0x100000000;
  v6 = (uint64_t *)&a3[4 * v4 + 4372];
  do
  {
    if ((int)v4 < 1)
    {
      v10 = 0;
      v9 = 0;
      v7 = *a1;
      goto LABEL_13;
    }
    LODWORD(v4) = v4 - 1;
    v7 = *a1;
    v8 = *(v6 - 3);
    v5 -= 0x100000000;
    v6 -= 2;
  }
  while (*a1 < v8);
  if (*a1 == v8)
  {
    v10 = *v6;
    if ((_DWORD)v4 || v10 <= 0)
    {
      v32 = *(_QWORD *)((char *)a3 + (v5 >> 28) + 17488);
      v9 = v10 > v32;
      if ((v4 + 1) >= 2 && v10 > v32)
      {
        v33 = *(_QWORD *)&a3[4 * v4 + 4370];
        do
        {
          v34 = (v4 - 1);
          if (v33 != *(_QWORD *)&a3[4 * v34 + 4370] + 1)
            break;
          if (*(_QWORD *)&a3[4 * v4 + 4372] != *(_QWORD *)&a3[4 * v34 + 4372] + 1)
            break;
          ++v9;
          v33 = *(_QWORD *)&a3[4 * v34 + 4370];
          LODWORD(v4) = v4 - 1;
        }
        while ((v34 + 1) > 1);
      }
    }
    else
    {
      v9 = 1;
    }
  }
  else
  {
    v9 = 0;
    v10 = *v6;
  }
LABEL_13:
  v11 = v7 / 86400;
  v12 = v7 % 86400;
  v13 = a2 - v10 + v7 % 86400;
  if (v13 < 0)
  {
    v14 = v12 + a2;
    if (v13 <= -86400)
      v13 = -86400;
    v15 = v10 + v13;
    if (v15 == v14)
      v16 = v14;
    else
      v16 = v14 + 1;
    v17 = v15 - v16;
    if (v15 == v14)
      v18 = v17 / 0x15180;
    else
      v18 = v17 / 0x15180 + 1;
    v13 = v14 + 86400 * v18 + 86400 - v10;
    v11 += ~v18;
  }
  if (v13 > 86399)
  {
    v19 = 172799;
    if (v13 < 172799)
      v19 = v13;
    v20 = (~v19 + v13 + 86400) / 0x15180uLL;
    v13 = v13 - 86400 * v20 - 86400;
    v11 += v20 + 1;
  }
  *(_DWORD *)(a4 + 8) = v13 / 0xE10uLL;
  v21 = v13 % 0xE10uLL;
  *(_DWORD *)a4 = v9 + v21 % 0x3Cu;
  *(_DWORD *)(a4 + 4) = v21 / 0x3Cu;
  *(_DWORD *)(a4 + 24) = ((int)v11 + 4) % 7 + (((int)v11 + 4) % 7 < 0 ? 7 : 0);
  v22 = 1970;
  if (v11 < 0)
    goto LABEL_34;
  while (1)
  {
    if ((v22 & 3) != 0)
    {
      v23 = 0;
    }
    else
    {
      v24 = __ROR8__(0x8F5C28F5C28F5C29 * v22 + 0x51EB851EB851EB0, 4) < 0xA3D70A3D70A3D7uLL;
      v23 = __ROR8__(0x51EB851EB851EB8 - 0x70A3D70A3D70A3D7 * v22, 2) > 0x28F5C28F5C28F5CuLL || v24;
    }
    if (v11 < *((int *)&year_lengths + v23))
      break;
    do
    {
LABEL_34:
      v25 = v22 + v11 / 365 + (v11 >> 63);
      if (v25 < 1)
        v26 = -v25 / 0x190uLL + ((unint64_t)-v25 >> 2) - -v25 / 0x64uLL + 1;
      else
        v26 = (v25 - 1) / 0x64uLL - ((v25 - 1) / 0x190uLL + ((unint64_t)(v25 - 1) >> 2));
      if (v22 >= 1)
        v27 = (v22 - 1) / 0x190uLL - (v22 - 1) / 0x64uLL + ((unint64_t)(v22 - 1) >> 2);
      else
        v27 = ~(-v22 / 0x190uLL + ((unint64_t)-v22 >> 2)) + -v22 / 0x64uLL;
      v11 = v11 - 365 * (v11 / 365 + (v11 >> 63)) + v26 + v27;
      v22 = v25;
    }
    while (v11 < 0);
  }
  if ((unint64_t)(v22 - 2147485548) > 0xFFFFFFFEFFFFFFFFLL)
  {
    *(_DWORD *)(a4 + 20) = v22 - 1900;
    *(_DWORD *)(a4 + 28) = v11;
    v29 = (int)mon_lengths[12 * v23];
    if (v11 >= v29)
    {
      v30 = 0;
      do
      {
        v11 -= v29;
        v29 = (int)mon_lengths[12 * v23 + 1 + v30++];
      }
      while (v11 >= v29);
    }
    else
    {
      LODWORD(v30) = 0;
    }
    *(_DWORD *)(a4 + 12) = v11 + 1;
    *(_DWORD *)(a4 + 16) = v30;
    *(_DWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 40) = a2;
  }
  else
  {
    v28 = __error();
    a4 = 0;
    *v28 = 84;
  }
  return a4;
}

uint64_t notify_check_tz(unsigned int *a1)
{
  uint64_t result;
  int check;

  result = *a1;
  if ((result & 0x80000000) == 0)
  {
    check = 0;
    result = notify_check(result, &check);
    if (result | check)
      a1[1] = 0;
  }
  return result;
}

void tzset(void)
{
  _st_tzset_basic(0);
}

char **__get_current_time_locale(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1315))
    return (char **)(*(_QWORD *)(a1 + 1352) + 72);
  else
    return _C_time_locale;
}

_BYTE *_yconv(int a1, int a2, int a3, int a4, _BYTE *a5, _BYTE *a6, locale_t a7)
{
  _BYTE *v9;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  int v24;
  uint64_t v25;
  char *i;
  int v27;
  char v29[12];

  v9 = a5;
  v11 = 5243 * (__int16)(a2 % 100 + a1 % 100);
  v12 = (v11 >> 19) + (v11 >> 31);
  v13 = a2 / 100 + a1 / 100 + v12;
  v14 = a2 % 100 + a1 % 100 - 100 * v12;
  v15 = (__int16)(a2 % 100 + a1 % 100 - 100 * v12);
  if ((v14 & 0x8000) != 0 && (v16 = v13 - 1, v13 >= 1))
  {
    v17 = v15 + 100;
    if (!a3)
      goto LABEL_30;
  }
  else
  {
    if (v13 >= 0)
      v18 = v13;
    else
      v18 = v13 + 1;
    if (v13 < 0)
      v19 = v15 - 100;
    else
      v19 = v15;
    if (v15 >= 1)
      v16 = v18;
    else
      v16 = v13;
    if (v15 >= 1)
      v17 = v19;
    else
      v17 = v15;
    if (!a3)
      goto LABEL_30;
  }
  if (v16 || (v17 & 0x80000000) == 0)
  {
    sprintf_l(v29, a7, "%02d", v16);
    if (v9 < a6)
    {
      v21 = a6 - v9;
      v22 = v29;
      while (1)
      {
        v23 = *v22;
        *v9 = v23;
        if (!v23)
          break;
        ++v22;
        ++v9;
        if (!--v21)
        {
LABEL_29:
          v9 = a6;
          break;
        }
      }
    }
LABEL_30:
    if (!a4)
      return v9;
    goto LABEL_31;
  }
  if (a5 >= a6)
    goto LABEL_30;
  v20 = 0;
  while (1)
  {
    a5[v20] = a0_1[v20];
    if (v20 == 2)
      break;
    if (a6 - a5 == ++v20)
      goto LABEL_29;
  }
  v9 = a5 + 2;
  if (a4)
  {
LABEL_31:
    if (v17 >= 0)
      v24 = v17;
    else
      v24 = -v17;
    sprintf_l(v29, a7, "%02d", v24);
    if (v9 < a6)
    {
      v25 = a6 - v9;
      for (i = v29; ; ++i)
      {
        v27 = *i;
        *v9 = v27;
        if (!v27)
          break;
        ++v9;
        if (!--v25)
          return a6;
      }
    }
  }
  return v9;
}

_BYTE *_st_fmt(_BYTE *a1, unsigned int *a2, _BYTE *a3, _BYTE *a4, int *a5, _QWORD *a6, _xlocale *a7)
{
  _QWORD *v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  __int16 v28;
  int v30;
  int v31;
  int v32;
  int v33;
  __int16 v34;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  tm *v40;
  int tm_sec_low;
  const char *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  int v47;
  int v48;
  uint64_t v49;
  tm *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  tm *v54;
  int v55;
  uint64_t v56;
  tm *v57;
  int v58;
  uint64_t v59;
  tm *v60;
  int v61;
  uint64_t v62;
  tm *v63;
  int v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  tm *v68;
  int v69;
  unsigned __int8 *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  tm *v77;
  int v78;
  uint64_t v79;
  tm *v80;
  int v81;
  uint64_t v82;
  tm *v83;
  int v84;
  uint64_t v85;
  tm *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  tm *v90;
  int v91;
  uint64_t v92;
  tm *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 *v97;
  uint64_t v98;
  int v99;
  __int128 v100;
  time_t v101;
  uint64_t v102;
  char *v103;
  int v104;
  int v105;
  uint64_t v106;
  tm *v107;
  int v108;
  _BYTE *v109;
  uint64_t v110;
  tm *v111;
  int v112;
  int tm_sec;
  unsigned int v114;
  int timezone;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  BOOL v120;
  _QWORD *v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  unsigned int v126;
  char *v127;
  uint64_t v128;
  int v129;
  int v130;
  const char *v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  tm *v135;
  int v136;
  _QWORD *v138;
  char v139[22];
  tm v140;

  v138 = a6 + 44;
  v14 = a6 + 12;
  while (*a1 == 37)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 1;
    while (2)
    {
      switch(*++a1)
      {
        case '+':
          v42 = (const char *)a6[43];
          goto LABEL_173;
        case ',':
        case '.':
        case '/':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'J':
        case 'K':
        case 'L':
        case 'N':
        case 'P':
        case 'Q':
        case '[':
        case '\\':
        case ']':
        case '^':
        case 'f':
        case 'i':
        case 'o':
        case 'q':
          goto LABEL_4;
        case '-':
          if (v17)
            goto LABEL_4;
          v17 = 1;
          continue;
        case '0':
          if (v17)
            goto LABEL_4;
          v17 = 3;
          continue;
        case 'A':
          v43 = a2[6];
          if (v43 <= 6)
            v44 = (const char *)a6[v43 + 31];
          else
            v44 = "?";
          if (a3 >= a4)
            goto LABEL_243;
          v118 = a4 - a3;
          while (1)
          {
            v119 = *(unsigned __int8 *)v44;
            *a3 = v119;
            if (!v119)
              goto LABEL_243;
            ++v44;
            ++a3;
            if (!--v118)
              goto LABEL_242;
          }
        case 'B':
          v45 = a2[4];
          if (v45 <= 0xB)
          {
            v120 = (v18 & 1) == 0;
            v121 = v138;
            if (!v120)
              v121 = v14;
            v46 = (const char *)v121[v45];
          }
          else
          {
            v46 = "?";
          }
          if (a3 >= a4)
            goto LABEL_243;
          v122 = a4 - a3;
          while (1)
          {
            v123 = *(unsigned __int8 *)v46;
            *a3 = v123;
            if (!v123)
              goto LABEL_243;
            ++v46;
            ++a3;
            if (!--v122)
              goto LABEL_242;
          }
        case 'C':
          v23 = a2[5];
          v25 = 1900;
          v47 = 1;
          v48 = 0;
          goto LABEL_198;
        case 'D':
          v42 = "%m/%d/%y";
          goto LABEL_173;
        case 'E':
          v18 = 1;
          v19 = v15 | v16;
          v16 = 0;
          v15 = 1;
          if (v19)
            goto LABEL_4;
          continue;
        case 'F':
          v42 = "%Y-%m-%d";
          goto LABEL_173;
        case 'G':
        case 'V':
        case 'g':
          v21 = *a1;
          v22 = a2[7];
          v23 = a2[5];
          v24 = v23 % 400;
          v25 = 1901;
          while (2)
          {
            v26 = (v25 - 1) % 400 + v24;
            v27 = 365;
            if ((v26 & 3) == 0)
            {
              v28 = 23593 * v26;
              if ((unsigned __int16)(((v28 + 1296) << 12) | ((unsigned __int16)(v28 + 1296) >> 4)) < 0xA3u
                || (unsigned __int16)(((v28 + 1308) << 14) | ((unsigned __int16)(v28 + 1308) >> 2)) > 0x28Eu)
              {
                v27 = 366;
              }
              else
              {
                v27 = 365;
              }
            }
            v30 = (int)(v22 - a2[6] + 11) % 7 - 3;
            v31 = v30
                - (unsigned __int16)(v27
                                   - 7
                                   * ((((unsigned __int16)(v27 - ((9363 * (unsigned __int16)v27) >> 16)) >> 1)
                                     + ((9363 * (unsigned __int16)v27) >> 16)) >> 2));
            if (v31 < -3)
              v31 += 7;
            if (v22 >= v31 + v27)
            {
              v38 = 1;
            }
            else
            {
              if (v22 < v30)
              {
                v32 = (v25 - 2) % 400 + v24;
                v33 = 365;
                if ((v32 & 3) == 0)
                {
                  v34 = 23593 * v32;
                  if ((unsigned __int16)(((v34 + 1296) << 12) | ((unsigned __int16)(v34 + 1296) >> 4)) < 0xA3u
                    || (unsigned __int16)(((v34 + 1308) << 14) | ((unsigned __int16)(v34 + 1308) >> 2)) > 0x28Eu)
                  {
                    v33 = 366;
                  }
                  else
                  {
                    v33 = 365;
                  }
                }
                v22 += v33;
                --v25;
                continue;
              }
              v38 = ((v22 - v30) / 7 + 1);
              --v25;
            }
            break;
          }
          if (v21 == 103)
          {
            *a5 = 3;
LABEL_195:
            v47 = 0;
            goto LABEL_197;
          }
          if (v21 != 86)
          {
LABEL_196:
            v47 = 1;
LABEL_197:
            v48 = 1;
LABEL_198:
            v109 = _yconv(v23, v25, v47, v48, a3, a4, a7);
LABEL_199:
            a3 = v109;
            goto LABEL_243;
          }
          sprintf_l((char *)&v140, a7, fmt_padding[v17], v38);
          if (a3 >= a4)
            goto LABEL_243;
          v39 = a4 - a3;
          v40 = &v140;
          do
          {
            tm_sec_low = LOBYTE(v40->tm_sec);
            *a3 = tm_sec_low;
            if (!tm_sec_low)
              goto LABEL_243;
            v40 = (tm *)((char *)v40 + 1);
            ++a3;
            --v39;
          }
          while (v39);
LABEL_242:
          a3 = a4;
LABEL_243:
          ++a1;
          break;
        case 'H':
          sprintf_l((char *)&v140, a7, fmt_padding[v17], a2[2]);
          if (a3 >= a4)
            goto LABEL_243;
          v49 = a4 - a3;
          v50 = &v140;
          while (1)
          {
            v51 = LOBYTE(v50->tm_sec);
            *a3 = v51;
            if (!v51)
              goto LABEL_243;
            v50 = (tm *)((char *)v50 + 1);
            ++a3;
            if (!--v49)
              goto LABEL_242;
          }
        case 'I':
          LODWORD(v52) = (int)a2[2] % 12;
          if ((_DWORD)v52)
            v52 = v52;
          else
            v52 = 12;
          sprintf_l((char *)&v140, a7, fmt_padding[v17], v52);
          if (a3 >= a4)
            goto LABEL_243;
          v53 = a4 - a3;
          v54 = &v140;
          while (1)
          {
            v55 = LOBYTE(v54->tm_sec);
            *a3 = v55;
            if (!v55)
              goto LABEL_243;
            v54 = (tm *)((char *)v54 + 1);
            ++a3;
            if (!--v53)
              goto LABEL_242;
          }
        case 'M':
          sprintf_l((char *)&v140, a7, fmt_padding[v17], a2[1]);
          if (a3 >= a4)
            goto LABEL_243;
          v56 = a4 - a3;
          v57 = &v140;
          while (1)
          {
            v58 = LOBYTE(v57->tm_sec);
            *a3 = v58;
            if (!v58)
              goto LABEL_243;
            v57 = (tm *)((char *)v57 + 1);
            ++a3;
            if (!--v56)
              goto LABEL_242;
          }
        case 'O':
          v18 = 0;
          v20 = v15 | v16;
          v15 = 0;
          v16 = 1;
          if (v20)
            goto LABEL_4;
          continue;
        case 'R':
          v42 = "%H:%M";
          goto LABEL_173;
        case 'S':
          sprintf_l((char *)&v140, a7, fmt_padding[v17], *a2);
          if (a3 >= a4)
            goto LABEL_243;
          v59 = a4 - a3;
          v60 = &v140;
          while (1)
          {
            v61 = LOBYTE(v60->tm_sec);
            *a3 = v61;
            if (!v61)
              goto LABEL_243;
            v60 = (tm *)((char *)v60 + 1);
            ++a3;
            if (!--v59)
              goto LABEL_242;
          }
        case 'T':
          v42 = "%H:%M:%S";
          goto LABEL_173;
        case 'U':
          sprintf_l((char *)&v140, a7, fmt_padding[v17], ((int)(a2[7] - a2[6] + 7) / 7));
          if (a3 >= a4)
            goto LABEL_243;
          v62 = a4 - a3;
          v63 = &v140;
          while (1)
          {
            v64 = LOBYTE(v63->tm_sec);
            *a3 = v64;
            if (!v64)
              goto LABEL_243;
            v63 = (tm *)((char *)v63 + 1);
            ++a3;
            if (!--v62)
              goto LABEL_242;
          }
        case 'W':
          v65 = a2[6];
          if (v65)
            v66 = 1 - v65;
          else
            v66 = -6;
          sprintf_l((char *)&v140, a7, fmt_padding[v17], ((int)(a2[7] + v66 + 7) / 7));
          if (a3 >= a4)
            goto LABEL_243;
          v67 = a4 - a3;
          v68 = &v140;
          while (1)
          {
            v69 = LOBYTE(v68->tm_sec);
            *a3 = v69;
            if (!v69)
              goto LABEL_243;
            v68 = (tm *)((char *)v68 + 1);
            ++a3;
            if (!--v67)
              goto LABEL_242;
          }
        case 'X':
          v42 = (const char *)a6[38];
          goto LABEL_173;
        case 'Y':
          v23 = a2[5];
          v25 = 1900;
          goto LABEL_196;
        case 'Z':
          v70 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
          if (v70)
          {
            if (a3 >= a4)
              goto LABEL_243;
            v71 = a4 - a3;
            do
            {
              v72 = *v70;
              *a3 = v72;
              if (!v72)
                goto LABEL_243;
              ++v70;
              ++a3;
              --v71;
            }
            while (v71);
          }
          else
          {
            v126 = a2[8];
            if ((v126 & 0x80000000) != 0 || a3 >= a4)
              goto LABEL_243;
            v127 = tzname[v126 != 0];
            v128 = a4 - a3;
            do
            {
              v129 = *v127;
              *a3 = v129;
              if (!v129)
                goto LABEL_243;
              ++v127;
              ++a3;
              --v128;
            }
            while (v128);
          }
          goto LABEL_242;
        case '_':
          if (v17)
            goto LABEL_4;
          v17 = 2;
          continue;
        case 'a':
          v73 = a2[6];
          if (v73 <= 6)
            v74 = (const char *)a6[v73 + 24];
          else
            v74 = "?";
          if (a3 >= a4)
            goto LABEL_243;
          v124 = a4 - a3;
          while (1)
          {
            v125 = *(unsigned __int8 *)v74;
            *a3 = v125;
            if (!v125)
              goto LABEL_243;
            ++v74;
            ++a3;
            if (!--v124)
              goto LABEL_242;
          }
        case 'b':
        case 'h':
          v36 = a2[4];
          if (v36 <= 0xB)
            v37 = (const char *)a6[v36];
          else
            v37 = "?";
          if (a3 >= a4)
            goto LABEL_243;
          v116 = a4 - a3;
          while (1)
          {
            v117 = *(unsigned __int8 *)v37;
            *a3 = v117;
            if (!v117)
              goto LABEL_243;
            ++v37;
            ++a3;
            if (!--v116)
              goto LABEL_242;
          }
        case 'c':
          v140.tm_sec = 1;
          v75 = a6[40];
          goto LABEL_180;
        case 'd':
          sprintf_l((char *)&v140, a7, fmt_padding[v17], a2[3]);
          if (a3 >= a4)
            goto LABEL_243;
          v76 = a4 - a3;
          v77 = &v140;
          while (1)
          {
            v78 = LOBYTE(v77->tm_sec);
            *a3 = v78;
            if (!v78)
              goto LABEL_243;
            v77 = (tm *)((char *)v77 + 1);
            ++a3;
            if (!--v76)
              goto LABEL_242;
          }
        case 'e':
          sprintf_l((char *)&v140, a7, fmt_padding[v17 + 4], a2[3]);
          if (a3 >= a4)
            goto LABEL_243;
          v79 = a4 - a3;
          v80 = &v140;
          while (1)
          {
            v81 = LOBYTE(v80->tm_sec);
            *a3 = v81;
            if (!v81)
              goto LABEL_243;
            v80 = (tm *)((char *)v80 + 1);
            ++a3;
            if (!--v79)
              goto LABEL_242;
          }
        case 'j':
          sprintf_l((char *)&v140, a7, fmt_padding[v17 + 8], a2[7] + 1);
          if (a3 >= a4)
            goto LABEL_243;
          v82 = a4 - a3;
          v83 = &v140;
          while (1)
          {
            v84 = LOBYTE(v83->tm_sec);
            *a3 = v84;
            if (!v84)
              goto LABEL_243;
            v83 = (tm *)((char *)v83 + 1);
            ++a3;
            if (!--v82)
              goto LABEL_242;
          }
        case 'k':
          sprintf_l((char *)&v140, a7, fmt_padding[v17 + 4], a2[2]);
          if (a3 >= a4)
            goto LABEL_243;
          v85 = a4 - a3;
          v86 = &v140;
          while (1)
          {
            v87 = LOBYTE(v86->tm_sec);
            *a3 = v87;
            if (!v87)
              goto LABEL_243;
            v86 = (tm *)((char *)v86 + 1);
            ++a3;
            if (!--v85)
              goto LABEL_242;
          }
        case 'l':
          LODWORD(v88) = (int)a2[2] % 12;
          if ((_DWORD)v88)
            v88 = v88;
          else
            v88 = 12;
          sprintf_l((char *)&v140, a7, fmt_padding[v17 + 4], v88);
          if (a3 >= a4)
            goto LABEL_243;
          v89 = a4 - a3;
          v90 = &v140;
          while (1)
          {
            v91 = LOBYTE(v90->tm_sec);
            *a3 = v91;
            if (!v91)
              goto LABEL_243;
            v90 = (tm *)((char *)v90 + 1);
            ++a3;
            if (!--v89)
              goto LABEL_242;
          }
        case 'm':
          sprintf_l((char *)&v140, a7, fmt_padding[v17], a2[4] + 1);
          if (a3 >= a4)
            goto LABEL_243;
          v92 = a4 - a3;
          v93 = &v140;
          while (1)
          {
            v94 = LOBYTE(v93->tm_sec);
            *a3 = v94;
            if (!v94)
              goto LABEL_243;
            v93 = (tm *)((char *)v93 + 1);
            ++a3;
            if (!--v92)
              goto LABEL_242;
          }
        case 'n':
          if (a3 >= a4)
            goto LABEL_243;
          v95 = 0;
          while (1)
          {
            a3[v95] = asc_18A0E7C9D[v95];
            if (v95 == 1)
              goto LABEL_200;
            if (a4 - a3 == ++v95)
              goto LABEL_242;
          }
        case 'p':
          if (a3 >= a4)
            goto LABEL_243;
          v96 = 41;
          if ((int)a2[2] > 11)
            v96 = 42;
          v97 = (unsigned __int8 *)a6[v96];
          v98 = a4 - a3;
          while (1)
          {
            v99 = *v97;
            *a3 = v99;
            if (!v99)
              goto LABEL_243;
            ++v97;
            ++a3;
            if (!--v98)
              goto LABEL_242;
          }
        case 'r':
          v42 = (const char *)a6[57];
          goto LABEL_173;
        case 's':
          v100 = *((_OWORD *)a2 + 1);
          *(_OWORD *)&v140.tm_sec = *(_OWORD *)a2;
          *(_OWORD *)&v140.tm_mon = v100;
          *(_OWORD *)&v140.tm_isdst = *((_OWORD *)a2 + 2);
          v140.tm_zone = (char *)*((_QWORD *)a2 + 6);
          v101 = mktime(&v140);
          sprintf_l(v139, a7, "%ld", v101);
          if (a3 >= a4)
            goto LABEL_243;
          v102 = a4 - a3;
          v103 = v139;
          while (1)
          {
            v104 = *v103;
            *a3 = v104;
            if (!v104)
              goto LABEL_243;
            ++v103;
            ++a3;
            if (!--v102)
              goto LABEL_242;
          }
        case 't':
          if (a3 >= a4)
            goto LABEL_243;
          v95 = 0;
          while (1)
          {
            a3[v95] = asc_18A0EA2C2[v95];
            if (v95 == 1)
              break;
            if (a4 - a3 == ++v95)
              goto LABEL_242;
          }
LABEL_200:
          a3 += v95;
          goto LABEL_243;
        case 'u':
          v105 = a2[6];
          if (!v105)
            v105 = 7;
          sprintf_l((char *)&v140, a7, "%d", v105);
          if (a3 >= a4)
            goto LABEL_243;
          v106 = a4 - a3;
          v107 = &v140;
          while (1)
          {
            v108 = LOBYTE(v107->tm_sec);
            *a3 = v108;
            if (!v108)
              goto LABEL_243;
            v107 = (tm *)((char *)v107 + 1);
            ++a3;
            if (!--v106)
              goto LABEL_242;
          }
        case 'v':
          v42 = "%e-%b-%Y";
LABEL_173:
          v109 = (_BYTE *)_st_fmt(v42, a2, a3, a4, a5, a6, a7);
          goto LABEL_199;
        case 'w':
          sprintf_l((char *)&v140, a7, "%d", a2[6]);
          if (a3 >= a4)
            goto LABEL_243;
          v110 = a4 - a3;
          v111 = &v140;
          while (1)
          {
            v112 = LOBYTE(v111->tm_sec);
            *a3 = v112;
            if (!v112)
              goto LABEL_243;
            v111 = (tm *)((char *)v111 + 1);
            ++a3;
            if (!--v110)
              goto LABEL_242;
          }
        case 'x':
          v140.tm_sec = 1;
          v75 = a6[39];
LABEL_180:
          a3 = (_BYTE *)_st_fmt(v75, a2, a3, a4, &v140, a6, a7);
          tm_sec = v140.tm_sec;
          if (v140.tm_sec == 3)
            tm_sec = 2;
          if (tm_sec > *a5)
            *a5 = tm_sec;
          goto LABEL_243;
        case 'y':
          *a5 = 3;
          v23 = a2[5];
          v25 = 1900;
          goto LABEL_195;
        case 'z':
          v114 = a2[8];
          if ((v114 & 0x80000000) != 0)
            goto LABEL_243;
          if (v114)
            timezone = __darwin_altzone;
          else
            timezone = _st_get_timezone();
          if (timezone >= 0)
            v130 = timezone;
          else
            v130 = -timezone;
          if (a3 >= a4)
            goto LABEL_238;
          v131 = "+";
          if (timezone > 0)
            v131 = "-";
          v132 = a4 - a3;
          while (1)
          {
            v133 = *(unsigned __int8 *)v131;
            *a3 = v133;
            if (!v133)
              break;
            ++v131;
            ++a3;
            if (!--v132)
            {
              a3 = a4;
              break;
            }
          }
LABEL_238:
          sprintf_l((char *)&v140, a7, fmt_padding[v17 + 12], (v130 / 60 % 60 + 100 * (v130 / 3600)));
          if (a3 < a4)
          {
            v134 = a4 - a3;
            v135 = &v140;
            while (1)
            {
              v136 = LOBYTE(v135->tm_sec);
              *a3 = v136;
              if (!v136)
                break;
              v135 = (tm *)((char *)v135 + 1);
              ++a3;
              if (!--v134)
                goto LABEL_242;
            }
          }
          goto LABEL_243;
        default:
          if (!*a1)
            --a1;
          goto LABEL_4;
      }
      break;
    }
  }
  if (!*a1)
    return a3;
LABEL_4:
  if (a3 != a4)
  {
    *a3++ = *a1;
    goto LABEL_243;
  }
  return a4;
}

int sprintf_l(char *a1, locale_t a2, const char *a3, ...)
{
  va_list va;

  va_start(va, a3);
  return vsprintf_l(a1, a2, a3, va);
}

int sprintf(char *a1, const char *a2, ...)
{
  uint64_t v3;
  _xlocale *v4;
  _xlocale *v5;
  va_list va;

  va_start(va, a2);
  v3 = __locale_key;
  v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__global_locale;
  return vsprintf_l(a1, v5, a2, va);
}

int vsprintf_l(char *a1, locale_t a2, const char *a3, va_list a4)
{
  int result;
  char *v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v16 = 0u;
  v15 = 0u;
  v14 = 0;
  v12 = 0u;
  v11 = 0u;
  v10 = 0u;
  v9 = 0u;
  v6 = 0u;
  v13 = v17;
  v21 = 0;
  v22 = 0;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17[0] = 0;
  v17[1] = 850045858;
  v5 = a1;
  v7 = a1;
  *(_QWORD *)((char *)&v6 + 4) = 0xFFFF02087FFFFFFFLL;
  v8 = 0x7FFFFFFFLL;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  result = __v2printf((pthread_mutex_t *)0xFFFFFFFFFFFFFFFFLL, 0, (int)&v5);
  *v5 = 0;
  return result;
}

uint64_t _st_get_timezone()
{
  return timezone;
}

uint64_t tzparse(unint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned __int8 *v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  BOOL v18;
  const char *v19;
  int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  BOOL *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _BOOL4 v39;
  uint64_t v40;
  unsigned __int8 *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[3];
  _QWORD v52[3];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;

  v57 = 0;
  v58 = 0;
  v56 = 0;
  v54 = 0;
  if (a3)
  {
    v58 = a1;
    v5 = _platform_strlen();
    v6 = (char *)(a1 + v5);
    v7 = 511;
    if (v5 < 0x1FF)
      v7 = v5;
    v56 = v7;
    v54 = 0;
  }
  else
  {
    v10 = (unsigned __int8 *)getzname(a1, &v58, &v56);
    if (!*v10)
      return 0xFFFFFFFFLL;
    v6 = getoffset(v10, &v54);
    if (!v6)
      return 0xFFFFFFFFLL;
  }
  v8 = tzload("posixrules", a2, 0, 0);
  if (v8)
    *(_DWORD *)a2 = 0;
  v55 = 0;
  v53 = 0;
  if (!*v6)
  {
    v55 = 0;
    *(_QWORD *)(a2 + 4) = 0x100000000;
    *(_QWORD *)(a2 + 10824) = -v54;
    *(_QWORD *)(a2 + 10832) = 0;
    v11 = v56;
    v12 = v56 + 1;
    goto LABEL_67;
  }
  if (*v6 == 60)
  {
    v9 = 0;
    v57 = v6 + 1;
    while (v6[v9 + 1])
    {
      if (v6[v9 + 1] == 62)
      {
        v55 = v9;
        v13 = (unsigned __int8 *)&v6[v9 + 2];
        goto LABEL_19;
      }
      ++v9;
    }
    return 0xFFFFFFFFLL;
  }
  v57 = v6;
  v13 = (unsigned __int8 *)getzname((unint64_t)v6, (unint64_t *)&v57, &v55);
LABEL_19:
  v14 = *v13;
  v15 = v14 > 0x3B;
  v16 = (1 << v14) & 0x800100000000001;
  if (v15 || v16 == 0)
  {
    v13 = (unsigned __int8 *)getoffset(v13, &v53);
    if (!v13)
      return 0xFFFFFFFFLL;
  }
  else
  {
    v53 = v54 - 3600;
  }
  if (*v13)
    v18 = 1;
  else
    v18 = v8 == 0;
  v19 = ",M4.1.0,M10.5.0";
  if (v18)
    v19 = (const char *)v13;
  v20 = *(unsigned __int8 *)v19;
  if (v20 == 59 || v20 == 44)
  {
    memset(v52, 0, sizeof(v52));
    memset(v51, 0, sizeof(v51));
    v27 = getrule((char *)v19 + 1, (uint64_t)v52);
    if (v27)
    {
      if (*v27 == 44)
      {
        v28 = getrule(v27 + 1, (uint64_t)v51);
        if (v28)
        {
          if (!*v28)
          {
            v29 = 0;
            v30 = 0;
            v50 = v53;
            *(_QWORD *)(a2 + 10824) = -v53;
            *(_DWORD *)(a2 + 10832) = 1;
            v48 = v56;
            v12 = v56 + 1;
            *(_DWORD *)(a2 + 10836) = v56 + 1;
            v49 = v54;
            *(_QWORD *)(a2 + 10848) = -v54;
            *(_QWORD *)(a2 + 10856) = 0;
            v31 = (uint64_t *)(a2 + 24);
            v32 = (BOOL *)(a2 + 9624);
            *(_QWORD *)(a2 + 4) = 0x200000000;
            v33 = 1970;
            do
            {
              v34 = transtime(v30, v29 + 1970, (int *)v52, v49);
              v35 = transtime(v30, v29 + 1970, (int *)v51, v50);
              if (v34 <= v35)
                v36 = v34;
              else
                v36 = v35;
              if (v34 <= v35)
                v37 = v35;
              else
                v37 = v34;
              *v31 = v36;
              *v32 = v34 > v35;
              v31[1] = v37;
              v32[1] = v34 <= v35;
              v38 = *(_DWORD *)(a2 + 4);
              *(_DWORD *)(a2 + 4) = v38 + 2;
              if ((((_BYTE)v29 - 78) & 3) != 0)
                v39 = 0;
              else
                v39 = 100 * (v33 / 0x64) - 1970 != v29 || 400 * (v33 / 0x190) - 1970 == v29;
              v30 += 86400 * *((int *)&year_lengths + v39);
              ++v33;
              ++v29;
              v31 += 2;
              v32 += 2;
            }
            while (v38 < 1197);
            v11 = v48;
            goto LABEL_67;
          }
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (*v19)
    return 0xFFFFFFFFLL;
  v21 = *(unsigned int *)(a2 + 4);
  if ((int)v21 <= 0)
  {
    v40 = v54;
  }
  else
  {
    v22 = (unsigned __int8 *)(a2 + 9624);
    v23 = *(unsigned int *)(a2 + 4);
    while (1)
    {
      v25 = *v22++;
      v24 = v25;
      if (!*(_DWORD *)(a2 + 24 * v25 + 10832))
        break;
      if (!--v23)
      {
        v26 = 0;
        goto LABEL_60;
      }
    }
    v26 = -*(_QWORD *)(a2 + 24 * v24 + 10824);
LABEL_60:
    v41 = (unsigned __int8 *)(a2 + 9624);
    v40 = v54;
    v42 = (_QWORD *)(a2 + 24);
    do
    {
      v43 = a2 + 24 * *v41;
      *v41++ = *(_DWORD *)(v43 + 10832);
      if (!*(_DWORD *)(v43 + 10844))
        *v42 += v40 - v26;
      if (!*(_DWORD *)(v43 + 10832))
        v26 = -*(_QWORD *)(v43 + 10824);
      ++v42;
      --v21;
    }
    while (v21);
  }
  *(_QWORD *)(a2 + 10824) = -v40;
  *(_QWORD *)(a2 + 10832) = 0;
  *(_QWORD *)(a2 + 10848) = -v53;
  *(_DWORD *)(a2 + 10856) = 1;
  v11 = v56;
  v12 = v56 + 1;
  *(_DWORD *)(a2 + 10860) = v56 + 1;
  *(_DWORD *)(a2 + 8) = 2;
LABEL_67:
  *(_DWORD *)(a2 + 12) = v12;
  v44 = v55;
  if (v55)
  {
    v12 = v11 + v55 + 2;
    *(_DWORD *)(a2 + 12) = v12;
  }
  if (v12 > 0x200)
    return 0xFFFFFFFFLL;
  v46 = (_BYTE *)(_platform_strncpy() + v11);
  *v46 = 0;
  if (!v44)
    return 0;
  v47 = v46 + 1;
  _platform_strncpy();
  result = 0;
  v47[v44] = 0;
  return result;
}

uint64_t transtime(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  unsigned int v4;
  unint64_t v5;
  _BOOL4 v6;
  _BOOL4 v7;
  int v8;
  int v9;
  int v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;

  HIDWORD(v5) = -1030792151 * a2 + 85899344;
  LODWORD(v5) = HIDWORD(v5);
  v4 = v5 >> 2;
  LODWORD(v5) = HIDWORD(v5);
  v6 = (v5 >> 4) < 0xA3D70B;
  if (v4 > 0x28F5C28)
    v6 = 1;
  v7 = (a2 & 3) == 0 && v6;
  v8 = *a3;
  if (*a3)
  {
    if (v8 == 1)
    {
      v27 = a1 + 86400 * a3[1];
    }
    else if (v8 == 2)
    {
      v9 = a3[3];
      v10 = v9 - 1;
      if (v9 >= 2)
      {
        v11 = &mon_lengths[12 * v7];
        v12 = (v9 - 1);
        do
        {
          v13 = *v11++;
          a1 += 86400 * v13;
          --v12;
        }
        while (v12);
      }
      v14 = (v9 + 9) % 12;
      v15 = a2 - (v9 < 3);
      v16 = 1374389535 * v15;
      v17 = HIDWORD(v16);
      v16 >>= 63;
      v18 = (int)(((26215 * (__int16)(26 * v14 + 24)) >> 18)
                + ((26215 * (__int16)(26 * v14 + 24)) >> 31)
                + v16
                + ((int)v17 >> 7)
                + v15
                - 100 * (v16 + ((int)v17 >> 5))
                + 2 * (v15 / -100)
                + ((char)(v15
                        - 100 * (v16 + ((int)v17 >> 5))
                        + (((char)(v15 - 100 * (v16 + ((int)v17 >> 5))) >> 13) & 3)) >> 2)
                + 1)
          % 7;
      v19 = v18 + (v18 < 0 ? 7 : 0);
      v21 = a3[1];
      v20 = a3[2];
      v22 = __OFSUB__(v21, v19);
      v23 = v21 - v19;
      if (v23 < 0 != v22)
        v23 += 7;
      if (v20 >= 2)
      {
        v24 = mon_lengths[12 * v7 + v10];
        v25 = v23 - v20 + 8 * v20 - 7;
        v26 = v20 - 1;
        while (v23 + 7 < v24)
        {
          v23 += 7;
          if (!--v26)
          {
            v23 = v25;
            break;
          }
        }
      }
      v27 = a1 + 86400 * v23;
    }
    else
    {
      v27 = 0;
    }
  }
  else
  {
    v28 = a3[1];
    v29 = v28 > 59;
    v27 = a1 + 86400 * (v28 - 1);
    if (v7 && v29)
      v27 += 86400;
  }
  return v27 + a4 + *((_QWORD *)a3 + 2);
}

uint64_t getzname(unint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t result;
  char v8;
  int v10;

  if (*(_BYTE *)a1 == 60 && (v6 = _platform_strchr()) != 0)
  {
    *a2 = a1 + 1;
    *a3 = v6 + ~a1;
    return v6 + 1;
  }
  else
  {
    *a2 = a1;
    v8 = *(_BYTE *)a1;
    result = a1;
    if (*(_BYTE *)a1)
    {
      result = a1;
      do
      {
        if ((v8 - 46) > 0xFCu || (v8 - 58) > 0xFFFFFFF5)
          break;
        v10 = *(unsigned __int8 *)++result;
        v8 = v10;
      }
      while (v10);
    }
    *a3 = result - a1;
  }
  return result;
}

char *getrule(char *result, uint64_t a2)
{
  int v2;
  char v3;
  int v4;
  int v5;
  char v6;
  int v7;
  int v8;
  char v9;
  int v10;
  char v11;
  int v12;
  char v13;
  int v14;
  char v15;
  int v16;

  v2 = *result;
  if (v2 == 77)
  {
    *(_DWORD *)a2 = 2;
    if ((result[1] - 48) <= 9)
    {
      v8 = 0;
      v9 = result[1];
      result += 3;
      while (1)
      {
        v8 = 10 * v8 + v9 - 48;
        if (v8 > 12)
          break;
        v9 = *(result++ - 1);
        if ((v9 - 48) >= 0xA)
        {
          if (v8 >= 1)
          {
            *(_DWORD *)(a2 + 12) = v8;
            if (*(result - 2) == 46 && (*(result - 1) - 48) <= 9)
            {
              v10 = 0;
              v11 = *(result - 1);
              while (1)
              {
                v10 = 10 * v10 + v11 - 48;
                if (v10 > 5)
                  break;
                v12 = *result++;
                v11 = v12;
                if ((v12 - 48) >= 0xA)
                {
                  if (v10 >= 1)
                  {
                    *(_DWORD *)(a2 + 8) = v10;
                    if (*(result - 1) == 46 && (*result - 48) <= 9)
                    {
                      v5 = 0;
                      v13 = *result;
                      while (1)
                      {
                        v5 = 10 * v5 + v13 - 48;
                        if (v5 > 6)
                          break;
                        v14 = *++result;
                        v13 = v14;
                        if ((v14 - 48) >= 0xA)
                        {
LABEL_31:
                          if (v5 < 0)
                            return 0;
LABEL_32:
                          *(_DWORD *)(a2 + 4) = v5;
                          if (*result == 47)
                            return getsecs(result + 1, (uint64_t *)(a2 + 16));
                          *(_QWORD *)(a2 + 16) = 7200;
                          return result;
                        }
                      }
                    }
                  }
                  return 0;
                }
              }
            }
          }
          return 0;
        }
      }
    }
  }
  else if (v2 == 74)
  {
    *(_DWORD *)a2 = 0;
    v4 = *++result;
    v3 = v4;
    if ((v4 - 48) <= 9)
    {
      v5 = 0;
      v6 = v3;
      while (1)
      {
        v5 = 10 * v5 + v6 - 48;
        if (v5 > 365)
          break;
        v7 = *++result;
        v6 = v7;
        if ((v7 - 48) >= 0xA)
        {
          if (v5 >= 1)
            goto LABEL_32;
          return 0;
        }
      }
    }
  }
  else if (((char)v2 - 48) <= 9)
  {
    *(_DWORD *)a2 = 1;
    if ((*result - 48) <= 9)
    {
      v5 = 0;
      v15 = *result;
      while (1)
      {
        v5 = 10 * v5 + v15 - 48;
        if (v5 > 365)
          break;
        v16 = *++result;
        v15 = v16;
        if ((v16 - 48) >= 0xA)
          goto LABEL_31;
      }
    }
  }
  return 0;
}

uint64_t tzload(const char *a1, uint64_t a2, _BYTE *a3, int a4)
{
  const char *v7;
  int v8;
  char *v9;
  char *v10;
  const char *v11;
  const char *v12;
  _BOOL4 v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  int NOCANCEL;
  unsigned int v18;
  int v19;
  uint64_t i;
  int v21;
  uint64_t j;
  uint64_t v23;
  uint64_t k;
  uint64_t v25;
  uint64_t m;
  uint64_t v27;
  uint64_t n;
  uint64_t v29;
  uint64_t ii;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t jj;
  uint64_t kk;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  int v45;
  uint64_t v46;
  _BYTE *v47;
  char v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t mm;
  uint64_t nn;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  _BYTE *v68;
  char v69;
  BOOL v70;
  uint64_t v72;
  int *v73;
  int *v74;
  int v75;
  int v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  _QWORD *v95;
  stat v97;

  v7 = a1;
  *(_QWORD *)(a2 + 16) = 0;
  if (a1 && issetugid())
  {
    if ((v8 = *(unsigned __int8 *)v7, v8 == 47) || v8 == 58 && v7[1] == 47 || _platform_strchr())
      v7 = 0;
  }
  if (a3)
    *a3 = 0;
  memset(&v97, 0, sizeof(v97));
  v9 = (char *)malloc_type_malloc(0x401uLL, 0xC70EABD9uLL);
  if (!v9)
  {
    v14 = 0;
    goto LABEL_21;
  }
  v10 = v9;
  v11 = "/var/db/timezone/localtime";
  if (v7)
    v11 = v7;
  if (*v11 == 58)
    v12 = v11 + 1;
  else
    v12 = v11;
  if (*v12 == 47)
  {
    v13 = 1;
    if (!a3)
    {
LABEL_18:
      if (!v13)
        goto LABEL_28;
      goto LABEL_27;
    }
  }
  else
  {
    if ((unint64_t)(_platform_strlen() - 998) <= 0xFFFFFFFFFFFFFBFFLL)
      goto LABEL_121;
    strcpy(v10, "/var/db/timezone/zoneinfo");
    *(_WORD *)&v10[_platform_strlen()] = 47;
    strcat(v10, v12);
    v13 = _platform_strchr() != 0;
    v12 = v10;
    if (!a3)
      goto LABEL_18;
  }
  if ((unint64_t)_platform_strlen() > 0x400)
    return 0xFFFFFFFFLL;
  _platform_strcpy();
  if (v13)
  {
LABEL_27:
    if (!access(v12, 4))
      goto LABEL_28;
LABEL_121:
    free(v10);
    return 0xFFFFFFFFLL;
  }
LABEL_28:
  v16 = open_NOCANCEL();
  if (v16 == -1)
    goto LABEL_121;
  if (fstat(v16, &v97) < 0 || (v97.st_mode & 0xF000) != 0x8000)
  {
    free(v10);
    close_NOCANCEL();
    return 0xFFFFFFFFLL;
  }
  free(v10);
  v14 = malloc_type_malloc(0xA1E8uLL, 0x1000040BE76E700uLL);
  if (v14)
  {
    NOCANCEL = read_NOCANCEL();
    v15 = 0xFFFFFFFFLL;
    if ((close_NOCANCEL() & 0x80000000) != 0 || NOCANCEL < 1)
      goto LABEL_22;
    v18 = 4;
LABEL_35:
    v19 = (char)v14[24] >> 7;
    for (i = 24; i != 28; v19 = v14[i++] | (v19 << 8))
      ;
    v21 = (char)v14[20] >> 7;
    for (j = 20; j != 24; v21 = v14[j++] | (v21 << 8))
      ;
    LODWORD(v23) = (char)v14[28] >> 7;
    for (k = 28; k != 32; v23 = v14[k++] | ((_DWORD)v23 << 8))
      ;
    *(_DWORD *)a2 = v23;
    LODWORD(v25) = (char)v14[32] >> 7;
    for (m = 32; m != 36; v25 = v14[m++] | ((_DWORD)v25 << 8))
      ;
    *(_DWORD *)(a2 + 4) = v25;
    LODWORD(v27) = (char)v14[36] >> 7;
    for (n = 36; n != 40; v27 = v14[n++] | ((_DWORD)v27 << 8))
      ;
    *(_DWORD *)(a2 + 8) = v27;
    LODWORD(v29) = (char)v14[40] >> 7;
    for (ii = 40; ii != 44; v29 = v14[ii++] | ((_DWORD)v29 << 8))
      ;
    *(_DWORD *)(a2 + 12) = v29;
    v15 = 0xFFFFFFFFLL;
    if (v23 > 0x32
      || (v27 - 257) < 0xFFFFFF00
      || v25 > 0x4B0
      || (v29 & 0x80000000) != 0
      || (int)v29 > 50
      || v19 && (_DWORD)v27 != v19)
    {
      goto LABEL_22;
    }
    if (v21 && (_DWORD)v27 != v21)
      goto LABEL_22;
    if (NOCANCEL - 44 >= (int)(v21 + v19 + v23 * (v18 + 4) + v25 * (v18 | 1) + 6 * v27 + v29))
    {
      v31 = v14 + 44;
      if ((_DWORD)v25)
      {
        v32 = 0;
        v33 = v14 + 44;
        do
        {
          v34 = (uint64_t)*v33 >> 7;
          if (v18 == 4)
          {
            for (jj = 0; jj != 4; ++jj)
              v34 = v33[jj] | (unint64_t)(v34 << 8);
          }
          else
          {
            for (kk = 0; kk != 8; ++kk)
              v34 = v33[kk] | (unint64_t)(v34 << 8);
          }
          *(_QWORD *)(a2 + 8 * v32 + 24) = v34;
          v33 += v18;
          ++v32;
        }
        while (v32 != v25);
        v37 = 0;
        while (1)
        {
          v38 = v33[v37];
          *(_BYTE *)(a2 + 9624 + v37) = v38;
          if ((int)v27 <= v38)
            break;
          if (v25 == ++v37)
          {
            v31 = &v33[v37];
            if ((int)v27 >= 1)
              goto LABEL_70;
            v45 = 0;
LABEL_78:
            if ((int)v29 < 1)
            {
              LODWORD(v29) = 0;
            }
            else
            {
              v46 = v29;
              v47 = (_BYTE *)(a2 + 16968);
              do
              {
                v48 = *v31++;
                *v47++ = v48;
                --v46;
              }
              while (v46);
            }
            *(_BYTE *)(a2 + v29 + 16968) = 0;
            if ((int)v23 >= 1)
            {
              v49 = 0;
              v50 = &v31[v18];
              do
              {
                v51 = (uint64_t)*v31 >> 7;
                if (v18 == 4)
                {
                  for (mm = 0; mm != 4; ++mm)
                    v51 = v31[mm] | (unint64_t)(v51 << 8);
                }
                else
                {
                  for (nn = 0; nn != 8; ++nn)
                    v51 = v31[nn] | (unint64_t)(v51 << 8);
                }
                v54 = 0;
                *(_QWORD *)(a2 + 16 * v49 + 17480) = v51;
                v55 = &v31[v18];
                v56 = (uint64_t)*v55 >> 7;
                do
                  v56 = v50[v54++] | (unint64_t)(v56 << 8);
                while (v54 != 4);
                *(_QWORD *)(a2 + 16 * v49 + 17488) = v56;
                v31 = v55 + 4;
                ++v49;
                v50 += v18 + 4;
              }
              while (v49 != v23);
            }
            if (v45)
            {
              v57 = v27;
              v58 = (unsigned int *)(a2 + 10840);
              do
              {
                if (v19)
                {
                  v59 = *v31++;
                  *v58 = v59;
                  if (v59 > 1)
                    goto LABEL_21;
                }
                else
                {
                  *v58 = 0;
                }
                v58 += 6;
                --v57;
              }
              while (v57);
              v60 = (unsigned int *)(a2 + 10844);
              do
              {
                if (v21)
                {
                  v61 = *v31++;
                  *v60 = v61;
                  if (v61 > 1)
                    goto LABEL_21;
                }
                else
                {
                  *v60 = 0;
                }
                v60 += 6;
                --v27;
              }
              while (v27);
            }
            v62 = 0;
            if ((int)v25 <= 2)
              v63 = 2;
            else
              v63 = v25;
            v64 = (v63 - 2);
            while (v64 != v62)
            {
              v65 = a2 + 8 * v62++;
              if (*(_QWORD *)(v65 + 24) > *(_QWORD *)(v65 + 32))
              {
                *(_DWORD *)(a2 + 4) = v62;
                break;
              }
            }
            if (v14[4])
            {
              v66 = NOCANCEL + (_DWORD)v14 - (_DWORD)v31;
              if (v66 >= 1)
              {
                v67 = (NOCANCEL + (_DWORD)v14 - (_DWORD)v31);
                v68 = v14;
                do
                {
                  v69 = *v31++;
                  *v68++ = v69;
                  --v67;
                }
                while (v67);
              }
              NOCANCEL = v66;
              v70 = v18 >= 8;
              v18 *= 2;
              if (!v70)
                goto LABEL_35;
            }
            else
            {
              v66 = NOCANCEL;
            }
            if (a4)
            {
              if (v66 > 2 && *v14 == 10)
              {
                v72 = (v66 - 1);
                if (v14[v72] == 10 && *(int *)(a2 + 8) <= 254)
                {
                  v73 = (int *)malloc_type_malloc(0x4768uLL, 0x10000402151C985uLL);
                  if (!v73)
                    break;
                  v74 = v73;
                  v14[v72] = 0;
                  if (!tzparse((unint64_t)(v14 + 1), (uint64_t)v73, 0) && v74[2] == 2)
                  {
                    v75 = *(_DWORD *)(a2 + 12);
                    v76 = v74[3];
                    if (v76 + v75 <= 50)
                    {
                      v74[2709] += v75;
                      v74[2715] += v75;
                      if (v76 >= 1)
                      {
                        v77 = 0;
                        do
                        {
                          v78 = *((_BYTE *)v74 + v77 + 16968);
                          v79 = *(int *)(a2 + 12);
                          *(_DWORD *)(a2 + 12) = v79 + 1;
                          *(_BYTE *)(a2 + v79 + 16968) = v78;
                          ++v77;
                        }
                        while (v77 < v74[3]);
                      }
                      v80 = v74[1];
                      if ((int)v80 < 1)
                      {
                        LODWORD(v81) = 0;
                      }
                      else
                      {
                        v81 = 0;
                        while (*(_QWORD *)&v74[2 * v81 + 6] <= *(_QWORD *)(a2 + 8 * *(int *)(a2 + 4) + 16))
                        {
                          if (v80 == ++v81)
                            goto LABEL_148;
                        }
                      }
                      if ((int)v81 < (int)v80)
                      {
                        v82 = v81;
                        v83 = *(_DWORD *)(a2 + 4);
                        do
                        {
                          if (v83 > 1199)
                            break;
                          *(_QWORD *)(a2 + 8 * v83 + 24) = *(_QWORD *)&v74[2 * v82 + 6];
                          *(_BYTE *)(a2 + v83 + 9624) = *((_BYTE *)v74 + v82 + 9624) + *(_BYTE *)(a2 + 8);
                          v83 = *(_DWORD *)(a2 + 4) + 1;
                          *(_DWORD *)(a2 + 4) = v83;
                          ++v82;
                        }
                        while (v74[1] > (int)v82);
                      }
LABEL_148:
                      v84 = *(_DWORD *)(a2 + 8);
                      *(_DWORD *)(a2 + 8) = v84 + 1;
                      v85 = *(_OWORD *)(v74 + 2706);
                      v86 = a2 + 10824 + 24 * v84;
                      *(_QWORD *)(v86 + 16) = *((_QWORD *)v74 + 1355);
                      *(_OWORD *)v86 = v85;
                      LODWORD(v86) = *(_DWORD *)(a2 + 8);
                      *(_DWORD *)(a2 + 8) = v86 + 1;
                      v87 = a2 + 10824 + 24 * (int)v86;
                      v88 = *((_OWORD *)v74 + 678);
                      *(_QWORD *)(v87 + 16) = *((_QWORD *)v74 + 1358);
                      *(_OWORD *)v87 = v88;
                    }
                  }
                  free(v74);
                }
              }
            }
            v89 = *(unsigned int *)(a2 + 4);
            if ((int)v89 < 2)
            {
LABEL_162:
              v15 = 0;
            }
            else
            {
              v90 = 0;
              v91 = *(unsigned __int8 *)(a2 + 9624);
              while (!typesequiv(a2, *(unsigned __int8 *)(a2 + 9625 + v90), v91)
                   || *(_QWORD *)(a2 + 8 * v90 + 32) - *(_QWORD *)(a2 + 24) != 0x2F0605980)
              {
                if (v89 - 1 == ++v90)
                  goto LABEL_157;
              }
              *(_DWORD *)(a2 + 16) = 1;
LABEL_157:
              v92 = (v89 - 2);
              v93 = (int)v89 - 1;
              v94 = *(unsigned __int8 *)(a2 + 9624 + v93);
              v95 = (_QWORD *)(a2 + 8 * v93 + 24);
              while (!typesequiv(a2, v94, *(unsigned __int8 *)(a2 + 9624 + v92))
                   || *v95 - *(_QWORD *)(a2 + 8 * v92 + 24) != 0x2F0605980)
              {
                if (v92-- <= 0)
                  goto LABEL_162;
              }
              v15 = 0;
              *(_DWORD *)(a2 + 20) = 1;
            }
            goto LABEL_22;
          }
        }
      }
      else
      {
LABEL_70:
        v39 = 0;
        while (1)
        {
          v40 = 0;
          v41 = (uint64_t)*v31 >> 7;
          do
            v41 = v31[v40++] | (unint64_t)(v41 << 8);
          while (v40 != 4);
          v42 = a2 + 24 * v39;
          *(_QWORD *)(v42 + 10824) = v41;
          v43 = v31[4];
          *(_DWORD *)(v42 + 10832) = v43;
          if (v43 > 1)
            break;
          v44 = v31[5];
          *(_DWORD *)(a2 + 24 * v39 + 10836) = v44;
          if ((int)v29 < v44)
            break;
          v31 += 6;
          if (++v39 == v27)
          {
            v45 = 1;
            goto LABEL_78;
          }
        }
      }
    }
  }
LABEL_21:
  v15 = 0xFFFFFFFFLL;
LABEL_22:
  free(v14);
  return v15;
}

BOOL typesequiv(_BOOL8 result, unsigned int a2, unsigned int a3)
{
  int v3;
  BOOL v4;

  if (result)
  {
    v3 = *(_DWORD *)(result + 8);
    v4 = v3 <= (int)a2 || v3 <= (int)a3;
    return !v4
        && *(_QWORD *)(result + 10824 + 24 * a2) == *(_QWORD *)(result + 10824 + 24 * a3)
        && *(_DWORD *)(result + 10824 + 24 * a2 + 8) == *(_DWORD *)(result + 10824 + 24 * a3 + 8)
        && *(_DWORD *)(result + 10824 + 24 * a2 + 16) == *(_DWORD *)(result + 10824 + 24 * a3 + 16)
        && *(_DWORD *)(result + 10824 + 24 * a2 + 20) == *(_DWORD *)(result + 10824 + 24 * a3 + 20)
        && _platform_strcmp() == 0;
  }
  return result;
}

char *__cdecl strcat(char *__s1, const char *__s2)
{
  _platform_strlen();
  _platform_strlen();
  _platform_memmove();
  return __s1;
}

char *getoffset(unsigned __int8 *a1, uint64_t *a2)
{
  int v3;
  _BOOL8 v4;
  char *result;

  v3 = *a1;
  v4 = v3 == 43 || v3 == 45;
  result = getsecs((char *)&a1[v4], a2);
  if (v3 == 45 && result != 0)
    *a2 = -*a2;
  return result;
}

char *getsecs(char *result, uint64_t *a2)
{
  int v2;
  char v3;
  int v4;
  uint64_t v5;
  int v6;
  char *v7;
  char v8;
  int v9;
  uint64_t v10;
  int v11;
  char v12;
  int v13;

  if (result)
  {
    if ((*result - 48) <= 9)
    {
      v2 = 0;
      v3 = *result;
      while (1)
      {
        v2 = 10 * v2 + v3 - 48;
        if (v2 > 167)
          break;
        v4 = *++result;
        v3 = v4;
        if ((v4 - 48) >= 0xA)
        {
          if (v2 < 0)
            return 0;
          v5 = 3600 * v2;
          *a2 = v5;
          if (*result == 58)
          {
            if ((result[1] - 48) <= 9)
            {
              v6 = 0;
              v7 = result + 2;
              v8 = result[1];
              while (1)
              {
                v6 = 10 * v6 + v8 - 48;
                if (v6 > 59)
                  break;
                v9 = *v7++;
                v8 = v9;
                if ((v9 - 48) >= 0xA)
                {
                  if (v6 < 0)
                    return 0;
                  result = v7 - 1;
                  v10 = v5 + (60 * v6);
                  *a2 = v10;
                  if (*(v7 - 1) == 58)
                  {
                    if ((*v7 - 48) <= 9)
                    {
                      v11 = 0;
                      v12 = *v7;
                      while (1)
                      {
                        v11 = 10 * v11 + v12 - 48;
                        if (v11 > 60)
                          break;
                        v13 = *++v7;
                        v12 = v13;
                        if ((v13 - 48) >= 0xA)
                        {
                          if (v11 < 0)
                            return 0;
                          *a2 = v10 + v11;
                          return v7;
                        }
                      }
                    }
                    return 0;
                  }
                  return result;
                }
              }
            }
            return 0;
          }
          return result;
        }
      }
    }
    return 0;
  }
  return result;
}

unint64_t notify_register_tz(unint64_t result, int *a2)
{
  const char *v3;
  char *v4;
  char *v5;
  uint64_t v6;

  if (*MEMORY[0x1E0C87FE0])
  {
    v3 = (const char *)result;
    result = *a2;
    if ((result & 0x80000000) == 0)
      result = notify_cancel(result);
    if (!v3 || !*v3)
    {
      *a2 = -1;
      return result;
    }
    HIDWORD(v6) = 0;
    if (_platform_strcmp())
    {
      _platform_strlen();
      v4 = (char *)&v6 - ((MEMORY[0x1E0C86820]() + 42) & 0xFFFFFFFFFFFFFFF0);
      _platform_bzero();
      strcpy(v4, "com.apple.system.timezone");
      *(_WORD *)&v4[_platform_strlen()] = 46;
      v5 = strcat(v4, v3);
      result = notify_register_check(v5, a2);
      if ((_DWORD)result)
      {
LABEL_13:
        *(_QWORD *)a2 = 0xFFFFFFFFLL;
        return result;
      }
      if (v4 != "com.apple.system.timezone" && notify_monitor_file())
      {
        result = notify_cancel(*a2);
        goto LABEL_13;
      }
    }
    else
    {
      result = notify_register_check("com.apple.system.timezone", a2);
      if ((_DWORD)result)
        goto LABEL_13;
    }
    return notify_check(*a2, (int *)&v6 + 1);
  }
  return result;
}

unint64_t settzname()
{
  _DWORD *v0;
  unint64_t result;
  int v2;
  BOOL v3;
  int v4;
  const char *v5;
  int v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t i;
  int v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;

  v0 = (_DWORD *)lclptr;
  tzname[0] = (char *)&wildabbr;
  off_1ECCE6CA0 = &wildabbr;
  daylight = 0;
  result = _st_set_timezone(0);
  __darwin_altzone = 0;
  if (!v0)
  {
    tzname[0] = (char *)&gmt;
    off_1ECCE6CA0 = &gmt;
    return result;
  }
  v2 = v0[1];
  if (v2)
  {
    v3 = __OFSUB__(v2, 1);
    v4 = v2 - 1;
    if (v4 < 0 == v3)
    {
      v5 = (const char *)(v0 + 2406);
      goto LABEL_8;
    }
  }
  else if (v0[2] == 1)
  {
    v4 = 0;
    v5 = "";
LABEL_8:
    v6 = 7;
    v7 = v4;
    while (1)
    {
      v8 = v5[v7];
      if ((v6 & 4) != 0 && v0[6 * v5[v7] + 2708])
      {
        v6 &= ~4u;
        daylight = 1;
      }
      v9 = &v0[6 * v8 + 2706];
      if (v0[6 * v8 + 2708])
      {
        if ((v6 & 2) != 0)
        {
          v6 &= ~2u;
          off_1ECCE6CA0 = (_UNKNOWN *)((char *)v0 + v0[6 * v8 + 2709] + 16968);
          __darwin_altzone = -*v9;
        }
      }
      else if ((v6 & 1) != 0)
      {
        v6 &= ~1u;
        tzname[0] = (char *)v0 + v0[6 * v8 + 2709] + 16968;
        result = _st_set_timezone(-*v9);
      }
      if (!v7)
        break;
      v10 = v7-- < 1;
      if (v10 || !v6)
        goto LABEL_25;
    }
    if ((v6 & 2) != 0)
      __darwin_altzone = -*v9;
    if ((v6 & 1) != 0)
      result = _st_set_timezone(-*v9);
  }
LABEL_25:
  v11 = (int)v0[3];
  if ((int)v11 >= 1)
  {
    for (i = 0; i < v11; ++i)
    {
      result = _platform_memchr();
      if (!result)
        *((_BYTE *)v0 + i + 16968) = 95;
    }
  }
  v13 = v0[2];
  if (v13 >= 1)
  {
    v14 = 0;
    v15 = v0 + 2709;
    do
    {
      v16 = *v15;
      v15 += 6;
      v17 = (char *)v0 + v16 + 16968;
      result = _platform_strlen();
      if (result >= 0x100)
      {
        result = _platform_strcmp();
        if ((_DWORD)result)
        {
          v17[255] = 0;
          v13 = v0[2];
        }
      }
      ++v14;
    }
    while (v14 < v13);
  }
  return result;
}

uint64_t _st_set_timezone(uint64_t result)
{
  timezone = result;
  return result;
}

int timingsafe_bcmp(const void *__b1, const void *__b2, size_t __len)
{
  unsigned __int8 v3;
  char v4;
  char v5;
  char v6;

  if (!__len)
    return 0;
  v3 = 0;
  do
  {
    v5 = *(_BYTE *)__b1;
    __b1 = (char *)__b1 + 1;
    v4 = v5;
    v6 = *(_BYTE *)__b2;
    __b2 = (char *)__b2 + 1;
    v3 |= v6 ^ v4;
    --__len;
  }
  while (__len);
  return (v3 + 255) >> 8;
}

char *__cdecl basename_r(const char *a1, char *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  __int16 v8;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  if (!a1 || (v4 = *(unsigned __int8 *)a1, !*a1))
  {
    v8 = 46;
    goto LABEL_10;
  }
  v5 = _platform_strlen() - 1;
  do
  {
    v6 = v5;
    v7 = &a1[v5];
    if (&a1[v5] <= a1)
      break;
    --v5;
  }
  while (*v7 == 47);
  if (!v6 && v4 == 47)
  {
    v8 = 47;
LABEL_10:
    *(_WORD *)a2 = v8;
    return a2;
  }
  v10 = 1;
  do
  {
    v11 = v7;
    v12 = v10;
    if (v7 <= a1)
      break;
    --v7;
    ++v10;
  }
  while (*(v11 - 1) != 47);
  if (v12 < 0x400)
  {
    _platform_memmove();
    a2[v12] = 0;
  }
  else
  {
    a2 = 0;
    *__error() = 63;
  }
  return a2;
}

size_t wcslen(const __int32 *a1)
{
  uint64_t v1;

  v1 = 0;
  while (a1[v1++])
    ;
  return (v1 * 4 - 4) >> 2;
}

char *__cdecl dirname_r(const char *a1, char *a2)
{
  char *v2;
  int v4;
  const char *v5;
  int v6;
  int v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  int v11;
  char v12;

  v2 = a2;
  if (a1 && (v4 = *(unsigned __int8 *)a1, *a1))
  {
    v5 = &a1[_platform_strlen() - 1];
    while (v5 > a1)
    {
      v6 = *(unsigned __int8 *)v5--;
      if (v6 != 47)
      {
        while (v5 > a1)
        {
          v7 = *(unsigned __int8 *)v5--;
          if (v7 == 47)
          {
            ++v5;
            goto LABEL_12;
          }
        }
        goto LABEL_18;
      }
    }
LABEL_12:
    v8 = v5 - a1;
    if (v5 == a1)
    {
LABEL_18:
      if (v4 == 47)
        v12 = 47;
      else
        v12 = 46;
      *v2 = v12;
      v2[1] = 0;
      return v2;
    }
    v9 = v5 - 1;
    do
    {
      v10 = v8;
      if (v9 <= a1)
        break;
      v11 = *(unsigned __int8 *)v9--;
      --v8;
    }
    while (v11 == 47);
    if (v10 < 0x400)
    {
      _platform_memmove();
      v2[v10] = 0;
    }
    else
    {
      v2 = 0;
      *__error() = 63;
    }
  }
  else
  {
    *(_WORD *)a2 = 46;
  }
  return v2;
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  uint64_t v4;
  _xlocale *v5;
  _xlocale *v6;

  v4 = __locale_key;
  v5 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (v5)
    v6 = v5;
  else
    v6 = (_xlocale *)&__global_locale;
  return strftime_l(a1, a2, a3, a4, v6);
}

uint64_t recv_NOCANCEL()
{
  return __recvfrom_nocancel();
}

int rand_r(unsigned int *a1)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;

  v1 = *a1;
  if (!*a1)
    v1 = 123459876;
  v2 = 16807 * (v1 % 0x1F31D) - 2836 * (v1 / 0x1F31D);
  v3 = v2 + 0x7FFFFFFF;
  if (v2 >= 0)
    v3 = v2;
  *a1 = v3;
  return v3 & 0x7FFFFFFF;
}

char *__cdecl strcasestr(const char *__big, const char *__little)
{
  uint64_t v2;
  _xlocale *v3;
  _xlocale *v4;

  v2 = __locale_key;
  v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3)
    v4 = v3;
  else
    v4 = (_xlocale *)&__global_locale;
  return strcasestr_l(__big, __little, v4);
}

time_t mktime(tm *a1)
{
  int v2;
  time_t v3;

  v2 = *__error();
  pthread_rwlock_rdlock(&lcl_rwlock);
  _st_tzset_basic(1);
  v3 = _st_time1(a1, _st_localsub, 0, 1);
  pthread_rwlock_unlock(&lcl_rwlock);
  *__error() = v2;
  return v3;
}

char *__cdecl strptime_l(const char *a1, const char *a2, tm *a3, locale_t a4)
{
  locale_t v5;
  locale_t v6;
  char *v7;
  uint64_t v8;
  uint64_t tm_gmtoff;
  time_t v11;
  int v12;

  v5 = (locale_t)&__global_locale;
  if (a4 != (locale_t)-1)
    v5 = a4;
  if (a4)
    v6 = v5;
  else
    v6 = (locale_t)&__c_locale;
  v12 = 0;
  a3->tm_zone = 0;
  v7 = (char *)_strptime0((char *)a1, (unsigned __int8 *)a2, a3, &v12, (uint64_t)v6);
  if (v7)
  {
    v11 = 0;
    if (v12 == 2)
    {
      tm_gmtoff = a3->tm_gmtoff;
      a3->tm_gmtoff = 0;
      v8 = timeoff(a3, tm_gmtoff);
      goto LABEL_11;
    }
    if (v12 == 1)
    {
      v8 = timegm(a3);
LABEL_11:
      v11 = v8;
      localtime_r(&v11, a3);
    }
  }
  return v7;
}

uint64_t _st_time1(_DWORD *a1, uint64_t (*a2)(uint64_t *a1, uint64_t a2, uint64_t a3), uint64_t a3, int a4)
{
  uint64_t result;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  _DWORD v28[512];

  if (!a1)
  {
    *__error() = 22;
    return -1;
  }
  if ((int)a1[8] >= 2)
    a1[8] = 1;
  v27 = 0;
  result = time2((uint64_t)a1, a2, a3, &v27, a4);
  if (v27)
    return result;
  v9 = a1[8];
  if (v9 < 0)
  {
    v9 = 0;
    a1[8] = 0;
  }
  if (a2 == _st_localsub)
    v10 = &lclptr;
  else
    v10 = &gmtptr;
  v11 = *v10;
  if (!*v10)
    return -1;
  if (*(int *)(v11 + 8) >= 1)
    _platform_bzero();
  v12 = *(unsigned int *)(v11 + 4);
  if ((int)v12 < 1)
    return -1;
  v13 = 0;
  v14 = v12 + 1;
  do
  {
    v15 = *(unsigned __int8 *)(v11 + (v14 - 2) + 9624);
    if (!v28[v15 + 256])
    {
      v28[v15 + 256] = 1;
      v28[v13++] = v15;
    }
    --v14;
  }
  while (v14 > 1);
  if (v13 < 1)
    return -1;
  v26 = a4;
  v16 = 0;
  v24 = v13;
  v25 = a3;
  do
  {
    v17 = v11 + 24 * (int)v28[v16];
    if (*(_DWORD *)(v17 + 10832) == v9)
    {
      v18 = (_DWORD *)(v17 + 10824);
      v19 = v28;
      v20 = v24;
      do
      {
        v21 = *v19++;
        v22 = v11 + 24 * v21;
        if (*(_DWORD *)(v22 + 10832) != v9)
        {
          v23 = (_DWORD *)(v22 + 10824);
          *a1 += *(_DWORD *)(v22 + 10824) - *v18;
          a1[8] = v9 == 0;
          result = time2((uint64_t)a1, a2, v25, &v27, v26);
          if (v27)
            return result;
          *a1 += *v18 - *v23;
          v9 = a1[8] == 0;
          a1[8] = v9;
        }
        --v20;
      }
      while (v20);
    }
    ++v16;
    result = -1;
  }
  while (v16 != v24);
  return result;
}

uint64_t time2(uint64_t a1, uint64_t (*a2)(uint64_t *a1, uint64_t a2, uint64_t a3), uint64_t a3, _DWORD *a4, int a5)
{
  uint64_t result;

  result = time2sub(a1, a2, a3, a4, 0, a5);
  if (!*a4)
    return time2sub(a1, a2, a3, a4, 1, a5);
  return result;
}

uint64_t time2sub(uint64_t a1, uint64_t (*a2)(uint64_t *a1, uint64_t a2, uint64_t a3), uint64_t a3, _DWORD *a4, int a5, int a6)
{
  _DWORD *v7;
  __int128 v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  signed int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  _BOOL8 v24;
  uint64_t v25;
  _BOOL4 v26;
  _BOOL4 v27;
  int v28;
  BOOL v29;
  int v30;
  BOOL v31;
  uint64_t result;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  int v50;
  _DWORD *v51;
  _OWORD v52[2];
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v7 = a4;
  v60 = 0;
  v54 = 0;
  v53 = 0u;
  memset(v52, 0, sizeof(v52));
  *a4 = 0;
  v11 = *(_OWORD *)(a1 + 16);
  v55 = *(_OWORD *)a1;
  v56 = v11;
  v57 = *(_OWORD *)(a1 + 32);
  v58 = *(_QWORD *)(a1 + 48);
  if (a5)
  {
    if ((int)v55 < 0)
      v12 = ~(~(_DWORD)v55 / 0x3Cu);
    else
      v12 = v55 / 0x3C;
    LODWORD(v55) = v55 - 60 * v12;
    v13 = DWORD1(v55) + v12;
  }
  else
  {
    v13 = DWORD1(v55);
  }
  if (v13 < 0)
    v14 = ~(~v13 / 0x3Cu);
  else
    v14 = v13 / 0x3Cu;
  v15 = v13 - 60 * v14;
  v16 = DWORD2(v55) + v14;
  if (v16 < 0)
    v17 = ~(~v16 / 0x18u);
  else
    v17 = v16 / 0x18u;
  DWORD1(v55) = v15;
  DWORD2(v55) = v16 - 24 * v17;
  v18 = HIDWORD(v55) + v17;
  if ((int)v56 < 0)
    v19 = ~(~(_DWORD)v56 / 0xCu);
  else
    v19 = v56 / 0xC;
  v20 = v56 - 12 * v19;
  v21 = SDWORD1(v56) + (uint64_t)v19 + 1900;
  if (v18 <= 0)
  {
    do
    {
      v22 = (v20 > 1) + v21 - 1;
      if ((v22 & 3) != 0)
        v23 = 0;
      else
        v23 = __ROR8__(0x51EB851EB851EB8 - 0x70A3D70A3D70A3D7 * v22, 2) > 0x28F5C28F5C28F5CuLL
           || __ROR8__(0x51EB851EB851EB0 - 0x70A3D70A3D70A3D7 * v22, 4) < 0xA3D70A3D70A3D7uLL;
      v18 += year_lengths[v23];
      --v21;
    }
    while (v18 < 1);
  }
  if (v18 >= 0x16F)
  {
    v24 = v20 > 1;
    do
    {
      v25 = v24 + v21;
      if (((v24 + v21) & 3) != 0)
        v26 = 0;
      else
        v26 = __ROR8__(0x51EB851EB851EB8 - 0x70A3D70A3D70A3D7 * v25, 2) > 0x28F5C28F5C28F5CuLL
           || __ROR8__(0x51EB851EB851EB0 - 0x70A3D70A3D70A3D7 * v25, 4) < 0xA3D70A3D70A3D7uLL;
      v18 -= year_lengths[v26];
      ++v21;
    }
    while (v18 > 366);
  }
  while (1)
  {
    v27 = (v21 & 3) == 0
       && (__ROR8__(0x51EB851EB851EB8 - 0x70A3D70A3D70A3D7 * v21, 2) > 0x28F5C28F5C28F5CuLL
        || __ROR8__(0x51EB851EB851EB0 - 0x70A3D70A3D70A3D7 * v21, 4) < 0xA3D70A3D70A3D7uLL);
    v28 = mon_lengths[12 * v27 + v20];
    v29 = __OFSUB__(v18, v28);
    v30 = v18 - v28;
    if ((v30 < 0) ^ v29 | (v30 == 0))
      break;
    v31 = v20 <= 10;
    if (v20 <= 10)
      ++v20;
    else
      v20 = 0;
    if (!v31)
      ++v21;
    v18 = v30;
  }
  HIDWORD(v55) = v18;
  LODWORD(v56) = v20;
  DWORD1(v56) = v21 - 1900;
  result = -1;
  if ((unint64_t)(v21 - 2147485548) < 0xFFFFFFFF00000000 || (_DWORD)v21 - 1900 < 0)
    return result;
  v33 = v55;
  if (v55 >= 0x3C)
  {
    if (v21 > 1969)
    {
      LODWORD(v55) = 0;
    }
    else
    {
      v33 = v55 - 59;
      LODWORD(v55) = 59;
    }
  }
  else
  {
    v33 = 0;
  }
  v59 = 0;
  v34 = 0x7FFFFFFFFFFFFFFFLL;
  v35 = 0x8000000000000000;
  while (1)
  {
    v36 = v35 >= 0 ? v35 : v35 + 1;
    v37 = v34 >= 0 ? v34 : v34 + 1;
    v38 = (v37 >> 1) + (v36 >> 1);
    v59 = v38;
    if (v38 >= v35)
    {
      if (v38 > v34)
        v59 = v34;
    }
    else
    {
      v59 = v35;
    }
    if (a2(&v59, a3, (uint64_t)v52))
      break;
    v40 = v59;
    if (v59 > 0)
      v39 = 1;
    else
      v39 = -1;
LABEL_67:
    if (v40 == v35)
    {
      v40 = v35 + 1;
      v59 = ++v35;
    }
    else if (v40 == v34)
    {
      v40 = v34 - 1;
      v59 = --v34;
    }
    if (v35 > v34)
      return -1;
    if (v39 > 0)
      v34 = v40;
    else
      v35 = v40;
  }
  v39 = tmcomp(v52, &v55);
  if (v39)
  {
    v40 = v59;
    goto LABEL_67;
  }
  if (a2 == _st_localsub)
    v41 = &lclptr;
  else
    v41 = &gmtptr;
  v42 = *v41;
  if (!a6)
  {
    v44 = v57;
    if ((v57 & 0x80000000) == 0)
      goto LABEL_88;
LABEL_104:
    v59 += v33;
    v60 = v59;
    if (a2(&v59, a3, a1))
    {
      *v7 = 1;
      return v59;
    }
    return -1;
  }
  if ((int)v57 > 0 && *(_DWORD *)(v42 + 8) == 1)
    v44 = 0;
  else
    v44 = v57;
  LODWORD(v57) = v44;
  if (v44 < 0)
    goto LABEL_104;
LABEL_88:
  if ((_DWORD)v53 == v44)
    goto LABEL_104;
  if (v42)
  {
    v45 = *(unsigned int *)(v42 + 8);
    if ((int)v45 >= 1)
    {
      v50 = v33;
      v51 = v7;
      while (1)
      {
        v46 = v42 + 24 * (v45 - 1);
        if (*(_DWORD *)(v46 + 10832) == v44)
        {
          v47 = *(unsigned int *)(v42 + 8);
          if ((int)v47 >= 1)
            break;
        }
LABEL_100:
        result = -1;
        v31 = v45-- <= 1;
        if (v31)
          return result;
      }
      v48 = (_QWORD *)(v46 + 10824);
      v49 = v47 + 1;
      while (1)
      {
        if (*(_DWORD *)(v42 + 24 * (v49 - 2) + 10832) != v44)
        {
          v60 = *(_QWORD *)(v42 + 24 * (v49 - 2) + 10824) + v59 - *v48;
          if (a2(&v60, a3, (uint64_t)v52))
          {
            if (!tmcomp(v52, &v55) && (_DWORD)v53 == v44)
              break;
          }
        }
        if ((unint64_t)--v49 <= 1)
          goto LABEL_100;
      }
      v59 = v60;
      v7 = v51;
      v33 = v50;
      goto LABEL_104;
    }
  }
  return -1;
}

uint64_t tmcomp(_DWORD *a1, _DWORD *a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  uint64_t result;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v2 = a1[5];
  v3 = a2[5];
  if (v2 == v3)
  {
    v5 = a1[4];
    v6 = a2[4];
    result = (v5 - v6);
    if (v5 == v6)
    {
      v8 = a1[3];
      v9 = a2[3];
      result = (v8 - v9);
      if (v8 == v9)
      {
        v10 = a1[2];
        v11 = a2[2];
        result = (v10 - v11);
        if (v10 == v11)
        {
          v12 = a1[1];
          v13 = a2[1];
          result = (v12 - v13);
          if (v12 == v13)
            return (*a1 - *a2);
        }
      }
    }
  }
  else if (v2 > v3)
  {
    return 1;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t gmtsub(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  const char *v7;

  notify_check_tz((unsigned int *)&gmt_notify);
  pthread_once(&gmt_once, (void (*)(void))gmt_init);
  result = timesub(a1, a2, (unsigned int *)gmtptr, a3);
  if (result)
  {
    if (gmtptr)
      v7 = (const char *)(gmtptr + 16968);
    else
      v7 = "UTC";
    if (a2)
      v7 = (const char *)&wildabbr;
    *(_QWORD *)(a3 + 48) = v7;
  }
  return result;
}

uint64_t timeoff(_DWORD *a1, uint64_t a2)
{
  if (a1)
    a1[8] = 0;
  return _st_time1(a1, gmtsub, a2, 1);
}

uint64_t _strptime0(char *a1, unsigned __int8 *a2, tm *a3, _DWORD *a4, uint64_t a5)
{
  char **current_time_locale;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  _xlocale *v20;
  int v21;
  unsigned __int8 *v22;
  uint64_t result;
  int v24;
  _RuneLocale *v25;
  int v26;
  int v27;
  _RuneLocale *v28;
  int v29;
  _RuneLocale *v30;
  uint64_t i;
  const char *v32;
  int v33;
  const char *v34;
  _RuneLocale *v35;
  uint64_t v36;
  char **v37;
  const char *v38;
  int v39;
  const char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  int v45;
  _RuneLocale *v46;
  _RuneLocale *v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _RuneLocale *v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _RuneLocale *v57;
  int v58;
  _RuneLocale *v59;
  const char *v60;
  const char *v61;
  int v62;
  char *v63;
  _RuneLocale *v64;
  int v65;
  size_t v66;
  size_t v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  _RuneLocale *v71;
  _RuneLocale *v72;
  _RuneLocale *v73;
  const char *v74;
  const char *v75;
  size_t v76;
  int tm_hour;
  int v78;
  time_t v79;
  unsigned int v80;
  int v81;
  _RuneLocale *v82;
  uint64_t v83;
  _QWORD *v84;
  int v85;
  _RuneLocale *v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  _RuneLocale *v93;
  int v94;
  int v95;
  _BOOL4 v96;
  int v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  int v102;
  _RuneLocale *v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  _RuneLocale *v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  _RuneLocale *v113;
  _RuneLocale *v114;
  _RuneLocale *v115;
  _RuneLocale *v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  _RuneLocale *v121;
  int v122;
  int v123;
  unsigned int v124;
  _RuneLocale *v125;
  _RuneLocale *v126;
  _RuneLocale *v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  _RuneLocale *v131;
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  _RuneLocale *v136;
  int v137;
  int v138;
  unsigned int v139;
  int v140;
  int v141;
  tm *v142;
  int tm_year;
  _BOOL4 v144;
  int v145;
  int wday_of;
  int v147;
  unint64_t v148;
  int tm_wday;
  unint64_t v150;
  int v151;
  int tm_yday;
  int v153;
  unint64_t v154;
  unsigned int v155;
  _BOOL4 v157;
  int *v158;
  unsigned int v159;
  int v160;
  int v161;
  _BOOL4 v162;
  int v163;
  unint64_t v164;
  unint64_t v165;
  int v166;
  BOOL v167;
  int v169;
  int v170;
  int v171;
  char **v172;
  _QWORD *v175;
  int v176;
  int v177;
  _xlocale *v178;
  char v179;
  time_t v180;
  char *v181;

  current_time_locale = __get_current_time_locale(a5);
  v9 = *a2;
  if (!*a2)
    return (uint64_t)a1;
  v177 = 0;
  v10 = &__global_locale;
  if (a5 != -1)
    v10 = (_QWORD *)a5;
  v178 = (_xlocale *)a5;
  if (a5)
    v11 = v10;
  else
    v11 = &__c_locale;
  v176 = 1;
  v171 = 85;
  v172 = current_time_locale;
  v175 = v11;
  while (2)
  {
    ++a2;
    if (v9 != 37)
    {
      v25 = &_DefaultRuneLocale;
      if ((v9 & 0x80) != 0)
        v25 = *(_RuneLocale **)(v11[166] + 120);
      if ((v25->__runetype[v9] & 0x4000) != 0)
      {
        v27 = *a1;
        if (*a1)
        {
          do
          {
            v28 = &_DefaultRuneLocale;
            if ((v27 & 0x80) != 0)
              v28 = *(_RuneLocale **)(v11[166] + 120);
            if ((v28->__runetype[v27] & 0x4000) == 0)
              break;
            v29 = *++a1;
            v27 = v29;
          }
          while (v29);
        }
        goto LABEL_394;
      }
      v26 = *a1++;
      if (v9 == v26)
        goto LABEL_394;
      return 0;
    }
    v12 = 0;
    v13 = 0;
    v14 = 0;
    LOBYTE(v15) = *a2;
    v16 = 1;
LABEL_10:
    if (v15 == 48)
      goto LABEL_16;
    v17 = a2 + 1;
    if (v15 != 43)
      goto LABEL_17;
    v18 = *v17;
    v19 = 43;
    if (!*v17 || v18 == 37)
      goto LABEL_30;
    if ((char)v18 < 0)
    {
      if ((___runetype_l((char)v18, v178) & 0x4000) == 0)
        goto LABEL_16;
LABEL_30:
      LOBYTE(v15) = 43;
      v20 = v178;
      goto LABEL_31;
    }
    if ((_DefaultRuneLocale.__runetype[(char)v18] & 0x4000) != 0)
      goto LABEL_30;
LABEL_16:
    v17 = a2 + 2;
    LOBYTE(v15) = a2[1];
LABEL_17:
    v19 = (char)v15;
    v20 = v178;
    if ((v15 & 0x80) != 0)
    {
      if ((___runetype_l((char)v15, v178) & 0x400) == 0)
        goto LABEL_32;
      goto LABEL_19;
    }
LABEL_31:
    if ((_DefaultRuneLocale.__runetype[v19] & 0x400) == 0)
    {
LABEL_32:
      a2 = v17;
      goto LABEL_33;
    }
LABEL_19:
    v14 = v19 - 48;
    LOBYTE(v21) = *v17;
    if (!*v17)
    {
      LOBYTE(v15) = 0;
      goto LABEL_28;
    }
    while ((v21 & 0x80) == 0)
    {
      if ((_DefaultRuneLocale.__runetype[(char)v21] & 0x400) == 0)
        goto LABEL_27;
LABEL_24:
      v22 = v17 + 1;
      v21 = v17[1];
      v14 = (char)*v17++ + 10 * v14 - 48;
      if (!v21)
      {
        LOBYTE(v15) = 0;
        v17 = v22;
        goto LABEL_28;
      }
    }
    if ((___runetype_l((char)v21, v20) & 0x400) != 0)
      goto LABEL_24;
LABEL_27:
    LOBYTE(v15) = *v17;
LABEL_28:
    a2 = v17 + 1;
LABEL_33:
    result = 0;
    v24 = (char)v15;
    switch((char)v15)
    {
      case '%':
        v58 = *a1++;
        if (v58 != 37)
          return 0;
        goto LABEL_175;
      case '+':
        result = _strptime0(a1, v172[43], a3, a4, v178);
        if (!result)
          return result;
        a1 = (char *)result;
        v176 |= 0x36u;
        goto LABEL_175;
      case 'A':
      case 'a':
        v36 = 0;
        while (1)
        {
          v37 = &v172[v36];
          v38 = v37[31];
          v39 = _platform_strlen();
          if (!strncasecmp_l(a1, v38, v39, v178))
            break;
          v40 = v37[24];
          v39 = _platform_strlen();
          if (!strncasecmp_l(a1, v40, v39, v178))
            break;
          if (++v36 == 7)
            return 0;
        }
        v11 = v175;
        a1 += v39;
        a3->tm_wday = v36;
        v53 = v176 | 0x20;
        goto LABEL_393;
      case 'B':
      case 'b':
      case 'h':
        for (i = 0; i != 12; ++i)
        {
          if ((v16 & 1) != 0)
          {
            v32 = v172[i + 12];
          }
          else
          {
            if (v24 != 66)
              continue;
            v32 = v172[i + 44];
          }
          v33 = _platform_strlen();
          if (!strncasecmp_l(a1, v32, v33, v178))
          {
            v11 = v175;
            goto LABEL_101;
          }
        }
        if ((v13 & 1) != 0)
          return 0;
        i = 0;
        v11 = v175;
        while (1)
        {
          v34 = v172[i];
          v33 = _platform_strlen();
          if (!strncasecmp_l(a1, v34, v33, v178))
            break;
          if (++i == 12)
            return 0;
        }
LABEL_101:
        a3->tm_mon = i;
        a1 += v33;
LABEL_272:
        v53 = v176 | 4;
LABEL_393:
        v176 = v53;
LABEL_394:
        v9 = *a2;
        if (*a2)
          continue;
        v141 = v176;
        if ((v176 & 0xA) != 2)
        {
          v142 = a3;
          goto LABEL_411;
        }
        v142 = a3;
        if ((~v176 & 0x14) == 0)
        {
          tm_year = a3->tm_year;
          if ((tm_year & 3) != 0)
          {
            v144 = 0;
          }
          else
          {
            v147 = -1030792151 * (tm_year + 1900) + 85899344;
            HIDWORD(v148) = v147;
            LODWORD(v148) = v147;
            if ((v148 >> 2) <= 0x28F5C28)
            {
              HIDWORD(v150) = v147;
              LODWORD(v150) = v147;
              v144 = (v150 >> 4) < 0xA3D70B;
            }
            else
            {
              v144 = 1;
            }
          }
          v151 = _strptime0_start_of_month[13 * v144 + a3->tm_mon] + a3->tm_mday - 1;
          goto LABEL_410;
        }
        if ((v176 & 0x40) == 0)
        {
LABEL_411:
          if ((~v141 & 0xA) != 0)
            return (uint64_t)a1;
          if ((v141 & 4) != 0)
          {
            if ((v141 & 0x10) != 0)
              goto LABEL_424;
          }
          else
          {
            tm_yday = v142->tm_yday;
            v153 = v142->tm_year;
            HIDWORD(v154) = -1030792151 * v153 + 85899420;
            LODWORD(v154) = HIDWORD(v154);
            v167 = (v154 >> 2) > 0x28F5C28;
            LODWORD(v154) = HIDWORD(v154);
            v155 = v154 >> 4;
            v157 = (v167 || v155 < 0xA3D70B) && (v142->tm_year & 3) == 0;
            v158 = &_strptime0_start_of_month[13 * v157];
            v159 = -1;
            do
            {
              v160 = *v158++;
              ++v159;
            }
            while (tm_yday >= v160);
            if (v159 >= 0xD)
            {
              v142->tm_yday = tm_yday - _strptime0_start_of_month[13 * v157 + 12];
              v142->tm_year = v153 + 1;
              v159 = 1;
            }
            v142->tm_mon = v159 - 1;
            LOBYTE(v141) = v141 | 4;
            if ((v141 & 0x10) != 0)
            {
LABEL_424:
              if ((v141 & 0x20) == 0)
LABEL_425:
                v142->tm_wday = (int)(v142->tm_yday + first_wday_of(v142->tm_year + 1900)) % 7;
              return (uint64_t)a1;
            }
          }
          v161 = v142->tm_year;
          if ((v161 & 3) != 0)
          {
            v162 = 0;
          }
          else
          {
            v163 = -1030792151 * (v161 + 1900) + 85899344;
            HIDWORD(v164) = v163;
            LODWORD(v164) = v163;
            if ((v164 >> 2) <= 0x28F5C28)
            {
              HIDWORD(v165) = v163;
              LODWORD(v165) = v163;
              v162 = (v165 >> 4) < 0xA3D70B;
            }
            else
            {
              v162 = 1;
            }
          }
          v142->tm_mday = v142->tm_yday - _strptime0_start_of_month[13 * v162 + v142->tm_mon] + 1;
          if ((v141 & 0x20) != 0)
            return (uint64_t)a1;
          goto LABEL_425;
        }
        v145 = v171 != 85;
        wday_of = first_wday_of(a3->tm_year + 1900);
        if (!v177 && v145 == wday_of)
          return 0;
        if ((v176 & 0x20) != 0)
        {
          tm_wday = a3->tm_wday;
        }
        else
        {
          a3->tm_wday = v145;
          v141 = v176 | 0x20;
          tm_wday = v171 != 85;
        }
        v166 = (v145
                               - wday_of
                               + 7
                               - 7
                               * ((((v145
                                                    - wday_of
                                                    + 7
                                                    - ((unsigned __int16)(37 * (v145 - wday_of + 7)) >> 8)) >> 1)
                                 + ((37 * (v145 - wday_of + 7)) >> 8)) >> 2));
        v167 = wday_of >= 5 || wday_of <= 1;
        if (!v167 && v171 == 86)
          v166 -= 7;
        v169 = v166 - v177 + 8 * v177;
        if (v171 == 85)
          v170 = 7;
        else
          v170 = 6;
        v151 = v169 + (v170 + tm_wday) % 7 - 7;
        if (v151 >= 0)
        {
LABEL_410:
          a3->tm_yday = v151;
          v141 |= 8u;
          goto LABEL_411;
        }
        if ((v141 & 0x20) == 0)
        {
          v151 = 0;
          goto LABEL_410;
        }
        return 0;
      case 'C':
        if (*a1 < 0)
        {
          v11 = v175;
          v59 = *(_RuneLocale **)(v175[166] + 120);
        }
        else
        {
          v59 = &_DefaultRuneLocale;
          v11 = v175;
        }
        v98 = *a1;
        if ((v59->__runetype[*a1] & 0x400) != 0)
        {
          v99 = 0;
          if (v14)
            v100 = v14;
          else
            v100 = 2;
          if (v98 == 43)
            goto LABEL_306;
          if (v98 != 45)
            goto LABEL_307;
        }
        else
        {
          if (v98 != 45)
          {
            if (v98 != 43)
              return 0;
            v99 = 0;
            if (v14)
              v100 = v14;
            else
              v100 = 2;
LABEL_306:
            ++a1;
            if (!--v100)
            {
              v118 = 0;
              goto LABEL_316;
            }
LABEL_307:
            v118 = 0;
            v119 = (uint64_t)&a1[v100 - 1 + 1];
            do
            {
              v120 = *a1;
              if (!*a1)
                goto LABEL_316;
              v121 = (v120 & 0x80) != 0 ? *(_RuneLocale **)(v11[166] + 120) : &_DefaultRuneLocale;
              if ((v121->__runetype[v120] & 0x400) == 0)
                goto LABEL_316;
              v118 = (char)v120 + 10 * v118 - 48;
              ++a1;
              --v100;
            }
            while (v100);
            a1 = (char *)v119;
LABEL_316:
            if (v99)
              v122 = -v118;
            else
              v122 = v118;
            v123 = 100 * v122;
            if ((v176 & 0x200) != 0)
            {
              a3->tm_year = v123 + a3->tm_year % 100 - 1900;
              v124 = v176 & 0xFFFFFDFF;
            }
            else
            {
              a3->tm_year = v123 - 1900;
              v124 = v176 | 0x102;
            }
            v176 = v124;
            goto LABEL_394;
          }
          if (v14)
            v100 = v14;
          else
            v100 = 2;
        }
        v99 = 1;
        goto LABEL_306;
      case 'D':
        v60 = "%m/%d/%y";
        goto LABEL_171;
      case 'E':
        if (((v12 | v13) & 1) != 0)
          goto LABEL_175;
        v13 = 0;
        v15 = *a2;
        v12 = 1;
        v16 = 1;
        goto LABEL_38;
      case 'F':
        v60 = "%Y-%m-%d";
        goto LABEL_171;
      case 'H':
      case 'I':
      case 'k':
      case 'l':
        if (*a1 < 0)
        {
          v11 = v175;
          v30 = *(_RuneLocale **)(v175[166] + 120);
        }
        else
        {
          v30 = &_DefaultRuneLocale;
          v11 = v175;
        }
        if ((v30->__runetype[*a1] & 0x400) == 0)
          return 0;
        v48 = 0;
        if (v14)
          v49 = v14;
        else
          v49 = 2;
        v50 = (uint64_t)&a1[v49 - 1 + 1];
        do
        {
          v51 = *a1;
          if (!*a1)
            goto LABEL_95;
          v52 = (v51 & 0x80) != 0 ? *(_RuneLocale **)(v11[166] + 120) : &_DefaultRuneLocale;
          if ((v52->__runetype[v51] & 0x400) == 0)
            goto LABEL_95;
          v48 = (char)v51 + 10 * v48 - 48;
          ++a1;
          --v49;
        }
        while (v49);
        a1 = (char *)v50;
LABEL_95:
        if ((char)v15 == 107 || v15 == 72)
        {
          if (v48 > 23)
            return 0;
        }
        else if (v48 > 12)
        {
          return 0;
        }
        a3->tm_hour = v48;
        goto LABEL_394;
      case 'M':
      case 'S':
        v41 = *a1;
        if (!*a1)
          goto LABEL_175;
        v11 = v175;
        if ((v41 & 0x80) != 0)
          v42 = (char *)(*(_QWORD *)(v175[166] + 120) + 4 * v41);
        else
          v42 = &_DefaultRuneLocale.__magic[4 * v41];
        v88 = *((_DWORD *)v42 + 15);
        if ((v88 & 0x4000) != 0)
          goto LABEL_394;
        if ((v88 & 0x400) == 0)
          return 0;
        v89 = 0;
        if (v14)
          v90 = v14;
        else
          v90 = 2;
        v91 = (uint64_t)&a1[v90 - 1 + 1];
        do
        {
          v92 = *a1;
          if (!*a1)
            goto LABEL_212;
          v93 = (v92 & 0x80) != 0 ? *(_RuneLocale **)(v175[166] + 120) : &_DefaultRuneLocale;
          if ((v93->__runetype[v92] & 0x400) == 0)
            goto LABEL_212;
          v89 = (char)v92 + 10 * v89 - 48;
          ++a1;
          --v90;
        }
        while (v90);
        a1 = (char *)v91;
LABEL_212:
        if ((char)v15 == 77)
        {
          if (v89 <= 59)
          {
            a3->tm_min = v89;
            goto LABEL_394;
          }
        }
        else if (v89 <= 60)
        {
          a3->tm_sec = v89;
          goto LABEL_394;
        }
        return 0;
      case 'O':
        if (((v12 | v13) & 1) != 0)
          goto LABEL_175;
        v12 = 0;
        v16 = 0;
        v15 = *a2;
        v13 = 1;
LABEL_38:
        if (v15 == 37)
          return 0;
        goto LABEL_10;
      case 'R':
        v61 = "%H:%M";
        goto LABEL_165;
      case 'T':
        v61 = "%H:%M:%S";
        goto LABEL_165;
      case 'U':
      case 'V':
      case 'W':
        if (*a1 < 0)
        {
          v11 = v175;
          v35 = *(_RuneLocale **)(v175[166] + 120);
        }
        else
        {
          v35 = &_DefaultRuneLocale;
          v11 = v175;
        }
        if ((v35->__runetype[*a1] & 0x400) == 0)
          return 0;
        v177 = 0;
        if (v14)
          v54 = v14;
        else
          v54 = 2;
        v55 = (uint64_t)&a1[v54 - 1 + 1];
        do
        {
          v56 = *a1;
          if (!*a1)
            goto LABEL_117;
          v57 = (v56 & 0x80) != 0 ? *(_RuneLocale **)(v11[166] + 120) : &_DefaultRuneLocale;
          if ((v57->__runetype[v56] & 0x400) == 0)
            goto LABEL_117;
          v177 = (char)v56 + 10 * v177 - 48;
          ++a1;
          --v54;
        }
        while (v54);
        a1 = (char *)v55;
LABEL_117:
        if (v177 <= 53 && ((char)v15 != 86 || v177 >= 1))
        {
          v176 |= 0x40u;
          v171 = (char)v15;
          goto LABEL_394;
        }
        return 0;
      case 'X':
        v61 = v172[38];
        goto LABEL_165;
      case 'Y':
      case 'y':
        v43 = *a1;
        if (!*a1)
          goto LABEL_175;
        v11 = v175;
        if ((v43 & 0x80) != 0)
          v44 = (char *)(*(_QWORD *)(v175[166] + 120) + 4 * v43);
        else
          v44 = &_DefaultRuneLocale.__magic[4 * v43];
        v94 = *((_DWORD *)v44 + 15);
        if ((v94 & 0x4000) != 0)
          goto LABEL_394;
        if ((v94 & 0x400) != 0)
        {
          v95 = 0;
          v96 = (char)v15 == 89;
          if ((char)v15 == 89)
            v97 = 4;
          else
            v97 = 2;
          if (v14)
            v97 = v14;
          if ((_DWORD)v43 == 43)
            goto LABEL_366;
          if ((_DWORD)v43 != 45)
            goto LABEL_367;
        }
        else
        {
          if ((_DWORD)v43 != 45)
          {
            if ((_DWORD)v43 != 43)
              return 0;
            v95 = 0;
            v96 = (char)v15 == 89;
            if ((char)v15 == 89)
              v97 = 4;
            else
              v97 = 2;
            if (v14)
              v97 = v14;
LABEL_366:
            ++a1;
            if (!--v97)
            {
              v137 = 0;
              if (v96)
              {
LABEL_380:
                v137 -= 1900;
                v138 = 1;
                v139 = v176;
LABEL_390:
                a3->tm_year = v137;
                if (v138)
                  v53 = v139 & 0xFFFFFCFD | 2;
                else
                  v53 = v139 | 2;
                goto LABEL_393;
              }
LABEL_382:
              v139 = v176;
              if ((char)v15 == 121 && (v176 & 0x100) != 0)
              {
                v138 = 0;
                v137 = a3->tm_year + v137 % 100;
                v139 = v176 & 0xFFFFFEFF;
              }
              else
              {
                if (v137 >= 69)
                  v140 = v137;
                else
                  v140 = v137 + 100;
                v138 = 0;
                if ((char)v15 == 121)
                {
                  v139 = v176 | 0x200;
                  v137 = v140;
                }
              }
              goto LABEL_390;
            }
LABEL_367:
            v133 = 0;
            v134 = (uint64_t)&a1[v97 - 1 + 1];
            do
            {
              v135 = *a1;
              if (!*a1)
                goto LABEL_375;
              v136 = (v135 & 0x80) != 0 ? *(_RuneLocale **)(v175[166] + 120) : &_DefaultRuneLocale;
              if ((v136->__runetype[v135] & 0x400) == 0)
                goto LABEL_375;
              v133 = (char)v135 + 10 * v133 - 48;
              ++a1;
              --v97;
            }
            while (v97);
            a1 = (char *)v134;
LABEL_375:
            if (v133 < 0)
              return 0;
            if (v95)
              v137 = -v133;
            else
              v137 = v133;
            if (v96)
              goto LABEL_380;
            goto LABEL_382;
          }
          v96 = (char)v15 == 89;
          if ((char)v15 == 89)
            v132 = 4;
          else
            v132 = 2;
          if (v14)
            v97 = v14;
          else
            v97 = v132;
        }
        v95 = 1;
        goto LABEL_366;
      case 'Z':
        v62 = *a1;
        v63 = a1;
        v11 = v175;
        if (*a1)
        {
          do
          {
            if ((v62 & 0x80) != 0)
              v64 = *(_RuneLocale **)(v175[166] + 120);
            else
              v64 = &_DefaultRuneLocale;
            if ((v64->__runetype[v62] & 0x8000) == 0)
              break;
            v65 = *++v63;
            v62 = v65;
          }
          while (v65);
        }
        v66 = v63 - a1;
        if (v14)
          v67 = v14;
        else
          v67 = v66;
        if (v67 == 3 && !_platform_strncmp())
        {
          *a4 = 1;
          a1 += 3;
          goto LABEL_394;
        }
        tzset();
        if (v67 == _platform_strlen() && !_platform_strncmp())
        {
          a3->tm_isdst = 0;
        }
        else
        {
          if (v67 != _platform_strlen() || _platform_strncmp())
            return 0;
          a3->tm_isdst = 1;
        }
LABEL_358:
        a1 += v67;
        goto LABEL_394;
      case 'c':
        result = _strptime0(a1, v172[40], a3, a4, v178);
        if (!result)
          return result;
        a1 = (char *)result;
        v68 = v176 & 0xFFFFFCFF;
        v69 = 54;
        goto LABEL_173;
      case 'd':
        v11 = v175;
        goto LABEL_325;
      case 'e':
        v70 = *a1;
        if (*a1)
        {
          v11 = v175;
          if ((v70 & 0x80) != 0)
            v71 = *(_RuneLocale **)(v175[166] + 120);
          else
            v71 = &_DefaultRuneLocale;
          a1 += ((unint64_t)v71->__runetype[v70] >> 14) & 1;
LABEL_325:
          v101 = *a1;
          if (v14)
            v102 = v14;
          else
            v102 = 2;
          if (*a1 < 0)
            v103 = *(_RuneLocale **)(v11[166] + 120);
          else
            v103 = &_DefaultRuneLocale;
        }
        else
        {
          v101 = 0;
          if (v14)
            v102 = v14;
          else
            v102 = 2;
          v103 = &_DefaultRuneLocale;
          v11 = v175;
        }
        if ((v103->__runetype[v101] & 0x4000) != 0)
        {
          v125 = a1[1] < 0 ? *(_RuneLocale **)(v11[166] + 120) : &_DefaultRuneLocale;
          if ((v125->__runetype[a1[1]] & 0x400) != 0)
          {
            if (a1[2] < 0)
              v126 = *(_RuneLocale **)(v11[166] + 120);
            else
              v126 = &_DefaultRuneLocale;
            if ((v126->__runetype[a1[2]] & 0x400) == 0)
            {
              ++a1;
              v102 = 1;
            }
            v101 = *a1;
          }
        }
        if ((v101 & 0x80) != 0)
          v127 = *(_RuneLocale **)(v11[166] + 120);
        else
          v127 = &_DefaultRuneLocale;
        if ((v127->__runetype[v101] & 0x400) == 0)
          return 0;
        v128 = 0;
        v129 = (uint64_t)&a1[v102 - 1 + 1];
        do
        {
          v130 = *a1;
          if (!*a1)
            goto LABEL_355;
          v131 = (v130 & 0x80) != 0 ? *(_RuneLocale **)(v11[166] + 120) : &_DefaultRuneLocale;
          if ((v131->__runetype[v130] & 0x400) == 0)
            goto LABEL_355;
          v128 = (char)v130 + 10 * v128 - 48;
          ++a1;
          --v102;
        }
        while (v102);
        a1 = (char *)v129;
LABEL_355:
        if (v128 <= 31)
        {
          a3->tm_mday = v128;
          v53 = v176 | 0x10;
          goto LABEL_393;
        }
        return 0;
      case 'j':
        if (*a1 < 0)
        {
          v11 = v175;
          v72 = *(_RuneLocale **)(v175[166] + 120);
        }
        else
        {
          v72 = &_DefaultRuneLocale;
          v11 = v175;
        }
        if ((v72->__runetype[*a1] & 0x400) == 0)
          return 0;
        v104 = 0;
        if (v14)
          v105 = v14;
        else
          v105 = 3;
        v106 = (uint64_t)&a1[v105 - 1 + 1];
        do
        {
          v107 = *a1;
          if (!*a1)
            goto LABEL_255;
          v108 = (v107 & 0x80) != 0 ? *(_RuneLocale **)(v11[166] + 120) : &_DefaultRuneLocale;
          if ((v108->__runetype[v107] & 0x400) == 0)
            goto LABEL_255;
          v104 = (char)v107 + 10 * v104 - 48;
          ++a1;
          --v105;
        }
        while (v105);
        a1 = (char *)v106;
LABEL_255:
        if ((v104 - 367) >= 0xFFFFFE92)
        {
          a3->tm_yday = v104 - 1;
          v53 = v176 | 8;
          goto LABEL_393;
        }
        return 0;
      case 'm':
        if (*a1 < 0)
        {
          v11 = v175;
          v73 = *(_RuneLocale **)(v175[166] + 120);
        }
        else
        {
          v73 = &_DefaultRuneLocale;
          v11 = v175;
        }
        if ((v73->__runetype[*a1] & 0x400) == 0)
          return 0;
        v109 = 0;
        if (v14)
          v110 = v14;
        else
          v110 = 2;
        v111 = (uint64_t)&a1[v110 - 1 + 1];
        do
        {
          v112 = *a1;
          if (!*a1)
            goto LABEL_270;
          v113 = (v112 & 0x80) != 0 ? *(_RuneLocale **)(v11[166] + 120) : &_DefaultRuneLocale;
          if ((v113->__runetype[v112] & 0x400) == 0)
            goto LABEL_270;
          v109 = (char)v112 + 10 * v109 - 48;
          ++a1;
          --v110;
        }
        while (v110);
        a1 = (char *)v111;
LABEL_270:
        if ((v109 - 13) >= 0xFFFFFFF4)
        {
          a3->tm_mon = v109 - 1;
          goto LABEL_272;
        }
        return 0;
      case 'n':
      case 't':
        v45 = *a1;
        if (v45 < 0)
        {
          v83 = __locale_key;
          v84 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v83);
          if (!v84)
            v84 = &__global_locale;
          v46 = *(_RuneLocale **)(v84[166] + 120);
        }
        else
        {
          v46 = &_DefaultRuneLocale;
        }
        v11 = v175;
        if ((v46->__runetype[v45] & 0x4000) == 0)
          return 0;
        --a1;
        do
        {
          v85 = a1[1];
          if (v85 < 0)
            v86 = *(_RuneLocale **)(v175[166] + 120);
          else
            v86 = &_DefaultRuneLocale;
          ++a1;
        }
        while ((v86->__runetype[v85] & 0x4000) != 0);
        goto LABEL_394;
      case 'p':
        if (a3->tm_hour > 12)
          return 0;
        v74 = v172[41];
        v67 = (int)_platform_strlen();
        if (strncasecmp_l(a1, v74, v67, v178))
        {
          v75 = v172[42];
          v76 = (int)_platform_strlen();
          if (strncasecmp_l(a1, v75, v76, v178))
            return 0;
          tm_hour = a3->tm_hour;
          if (tm_hour != 12)
            a3->tm_hour = tm_hour + 12;
          a1 += v76;
LABEL_175:
          v11 = v175;
          goto LABEL_394;
        }
        v11 = v175;
        if (a3->tm_hour == 12)
          a3->tm_hour = 0;
        goto LABEL_358;
      case 'r':
        v61 = v172[57];
LABEL_165:
        result = _strptime0(a1, v61, a3, a4, v178);
        a1 = (char *)result;
        v11 = v175;
        if (!result)
          return result;
        goto LABEL_394;
      case 's':
        v181 = 0;
        v180 = 0;
        v78 = *__error();
        *__error() = 0;
        v79 = strtol_l(a1, &v181, 10, v178);
        if (*__error() == 34)
        {
          *__error() = v78;
          return 0;
        }
        v180 = v79;
        *__error() = v78;
        a1 = v181;
        if (!gmtime_r(&v180, a3))
          return 0;
        *a4 = 1;
        v80 = v176 & 0xFFFFFCC1 | 0x3E;
LABEL_174:
        v176 = v80;
        goto LABEL_175;
      case 'u':
      case 'w':
        if (*a1 < 0)
        {
          v11 = v175;
          v47 = *(_RuneLocale **)(v175[166] + 120);
        }
        else
        {
          v47 = &_DefaultRuneLocale;
          v11 = v175;
        }
        v87 = *a1;
        if ((v47->__runetype[v87] & 0x400) == 0
          || (v87 - 56) < 0xF8u
          || (char)v15 == 117 && v87 < 0x31
          || (char)v15 == 119 && v87 > 0x36)
        {
          return 0;
        }
        a3->tm_wday = ((char)v87 - 48) % 7u;
        v176 |= 0x20u;
        ++a1;
        goto LABEL_394;
      case 'x':
        v60 = v172[39];
LABEL_171:
        result = _strptime0(a1, v60, a3, a4, v178);
        if (!result)
          return result;
        a1 = (char *)result;
        v68 = v176 & 0xFFFFFCFF;
        v69 = 22;
LABEL_173:
        v80 = v68 | v69;
        goto LABEL_174;
      case 'z':
        v179 = 0;
        LODWORD(v181) = 0;
        LODWORD(v180) = 0;
        v81 = *a1;
        v11 = v175;
        if (v81 != 45 && v81 != 43)
          return 0;
        v82 = a1[1] < 0 ? *(_RuneLocale **)(v175[166] + 120) : &_DefaultRuneLocale;
        if ((v82->__runetype[a1[1]] & 0x400) == 0)
          return 0;
        v114 = a1[2] < 0 ? *(_RuneLocale **)(v175[166] + 120) : &_DefaultRuneLocale;
        if ((v114->__runetype[a1[2]] & 0x400) == 0)
          return 0;
        v115 = a1[3] < 0 ? *(_RuneLocale **)(v175[166] + 120) : &_DefaultRuneLocale;
        if ((v115->__runetype[a1[3]] & 0x400) == 0)
          return 0;
        v116 = a1[4] < 0 ? *(_RuneLocale **)(v175[166] + 120) : &_DefaultRuneLocale;
        if ((v116->__runetype[a1[4]] & 0x400) == 0)
          return 0;
        sscanf(a1, "%c%2d%2d", &v179, &v181, &v180);
        *a4 = 2;
        v117 = 60 * ((int)v180 + 60 * (int)v181);
        a3->tm_gmtoff = v117;
        if (v179 == 45)
          a3->tm_gmtoff = -v117;
        a1 += 5;
        goto LABEL_394;
      default:
        return result;
    }
  }
}

char *__cdecl strcasestr_l(const char *a1, const char *a2, locale_t a3)
{
  locale_t v4;
  _xlocale *v5;
  uint64_t v6;
  const char *v7;
  __darwin_rune_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  unsigned int v12;
  __darwin_rune_t v13;

  v4 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1)
    v4 = a3;
  if (a3)
    v5 = v4;
  else
    v5 = (_xlocale *)&__c_locale;
  v7 = a2 + 1;
  v6 = *(unsigned __int8 *)a2;
  if (!*a2)
    return (char *)a1;
  if ((v6 & 0x80) != 0)
    LOBYTE(v8) = ___tolower_l(v6, v5);
  else
    v8 = _DefaultRuneLocale.__maplower[v6];
  v10 = _platform_strlen();
  while (1)
  {
    v9 = (char *)a1;
    v12 = *(unsigned __int8 *)a1++;
    v11 = v12;
    if (!v12)
      break;
    if ((v11 & 0x80) != 0)
      LOBYTE(v13) = ___tolower_l(v11, v5);
    else
      v13 = _DefaultRuneLocale.__maplower[v11];
    if (v13 == v8 && !strncasecmp_l(a1, v7, v10, v5))
      return v9;
  }
  return 0;
}

int strncasecmp_l(const char *a1, const char *a2, size_t a3, locale_t a4)
{
  locale_t v4;
  _xlocale *v5;
  size_t v8;
  size_t v9;
  uint64_t v10;
  __darwin_ct_rune_t v11;
  uint64_t v12;
  __darwin_ct_rune_t v13;
  uint64_t v14;
  int result;
  __darwin_ct_rune_t v16;
  uint64_t v17;
  __darwin_ct_rune_t v18;

  v4 = (locale_t)&__global_locale;
  if (a4 != (locale_t)-1)
    v4 = a4;
  if (a4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__c_locale;
  if (!a3)
    return 0;
  v8 = a3 - 1;
  while (1)
  {
    v9 = v8;
    v10 = *(unsigned __int8 *)a1;
    v11 = *a1 < 0 ? ___tolower_l(v10, v5) : _DefaultRuneLocale.__maplower[v10];
    v12 = *(unsigned __int8 *)a2;
    v13 = *a2 < 0 ? ___tolower_l(v12, v5) : _DefaultRuneLocale.__maplower[v12];
    v14 = *(unsigned __int8 *)a1;
    if (v11 != v13)
      break;
    result = 0;
    if (*a1)
    {
      ++a1;
      v8 = v9 - 1;
      ++a2;
      if (v9)
        continue;
    }
    return result;
  }
  if ((v14 & 0x80) != 0)
    v16 = ___tolower_l(*(unsigned __int8 *)a1, v5);
  else
    v16 = _DefaultRuneLocale.__maplower[v14];
  v17 = *(unsigned __int8 *)a2;
  if (*a2 < 0)
    v18 = ___tolower_l(v17, v5);
  else
    v18 = _DefaultRuneLocale.__maplower[v17];
  return v16 - v18;
}

uint64_t signal__(int a1, __sigaction_u a2, int a3)
{
  int v3;
  sigaction v5;
  sigaction v6;

  v5.__sigaction_u.__sa_handler = 0;
  *(_QWORD *)&v5.sa_mask = 0;
  v6.__sigaction_u = a2;
  v3 = 1 << (a1 - 1);
  if (a1 > 32)
    v3 = 0;
  v6.sa_mask = 0;
  v6.sa_flags = 2 * ((_sigintr & v3) == 0);
  if (a3)
  {
    if ((sigaction(a1, &v6, &v5) & 0x80000000) == 0)
      return (uint64_t)v5.__sigaction_u.__sa_handler;
  }
  else if ((_sigaction_nobind() & 0x80000000) == 0)
  {
    return (uint64_t)v5.__sigaction_u.__sa_handler;
  }
  return -1;
}

unint64_t strtouq(const char *__str, char **__endptr, int __base)
{
  uint64_t v3;
  _xlocale *v4;
  _xlocale *v5;

  v3 = __locale_key;
  v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__global_locale;
  return strtoull_l(__str, __endptr, __base, v5);
}

uint64_t _libc_initializer(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t inited;
  uint64_t v7;

  _program_vars_init(a4);
  _libc_fork_init(a1);
  __confstr_init((uint64_t)a1);
  __atexit_init();
  inited = _init_clock_port();
  _arc4_fork_child(inited);
  __xlocale_init();
  __guard_setup(a3);
  v7 = _subsystem_init();
  return _arc4_fork_child(v7);
}

uint64_t _subsystem_init()
{
  uint64_t result;

  result = _simple_getenv();
  if (result)
    subsystem_root_path = result;
  return result;
}

uint64_t *_program_vars_init(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result[1];
  NXArgv_pointer = result[2];
  NXArgc_pointer = v1;
  v2 = result[4];
  environ_pointer = result[3];
  __progname_pointer = v2;
  _mh_execute_header_pointer = *result;
  return result;
}

_QWORD *_libc_fork_init(_QWORD *result)
{
  void *v1;
  uint64_t *v2;
  uint64_t *v3;
  void *v4;

  if (*result < 2uLL)
  {
    v4 = (void *)result[2];
    _libSystem_atfork_prepare = (_UNKNOWN *)result[1];
    _libSystem_atfork_parent = v4;
    v2 = result + 3;
    v3 = &_libSystem_atfork_child;
  }
  else
  {
    v1 = (void *)result[6];
    _libSystem_atfork_prepare_v2 = (_UNKNOWN *)result[5];
    _libSystem_atfork_parent_v2 = v1;
    v2 = result + 7;
    v3 = &_libSystem_atfork_child_v2;
  }
  *v3 = *v2;
  return result;
}

uint64_t _init_clock_port()
{
  host_t v0;
  ipc_space_t *v1;

  v0 = MEMORY[0x18D767C28]();
  if (host_get_clock_service(v0, 0, (clock_serv_t *)&clock_port)
    || (v1 = (ipc_space_t *)MEMORY[0x1E0C883F0], semaphore_create(*MEMORY[0x1E0C883F0], (semaphore_t *)&clock_sem, 0, 0)))
  {
    abort();
  }
  return mach_port_deallocate(*v1, v0);
}

uint64_t __xlocale_init()
{
  uint64_t result;

  if (__locale_key == -1)
  {
    __locale_key = 10;
    return pthread_key_init_np();
  }
  return result;
}

double __guard_setup(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  _BYTE *v3;
  uint64_t v5;
  double result;
  char __str[20];

  v1 = a1;
  if (a1 && *a1)
  {
    do
    {
      if (!_platform_strncmp())
      {
        if (_platform_strchr())
        {
          v2 = 0;
          do
          {
            _platform_strlcpy();
            v3 = (_BYTE *)_platform_strchr();
            if (v3)
              *v3 = 0;
            __stack_chk_guard[v2] = strtoull(__str, 0, 0);
            if (!_platform_strchr())
              break;
          }
          while (v2++ < 7);
        }
        _platform_strlen();
        _platform_bzero();
      }
      v5 = v1[1];
      ++v1;
    }
    while (v5);
  }
  if (open_NOCANCEL() != -1)
  {
    read_NOCANCEL();
    close_NOCANCEL();
  }
  *(_QWORD *)&result = 0xF5000000F5;
  LODWORD(__stack_chk_guard[0]) = 245;
  return result;
}

unint64_t strtoull_l(const char *a1, char **a2, int a3, locale_t a4)
{
  locale_t v6;
  locale_t v7;
  const char *v8;
  int v9;
  int v10;
  _RuneLocale *v11;
  char v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  _BOOL4 v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unsigned __int8 v21;
  int v22;
  char v23;
  int v24;
  char *v25;
  int *v27;

  v6 = (locale_t)&__global_locale;
  if (a4 == (locale_t)-1)
    v7 = (locale_t)&__global_locale;
  else
    v7 = a4;
  if (!a4)
    v7 = (locale_t)&__c_locale;
  if (v7 != (locale_t)-1)
    v6 = v7;
  if (!v7)
    v6 = (locale_t)&__c_locale;
  v8 = a1;
  do
  {
    v10 = *v8++;
    v9 = v10;
    v11 = &_DefaultRuneLocale;
    if (v10 < 0)
      v11 = *(_RuneLocale **)(*((_QWORD *)v6 + 166) + 120);
  }
  while ((v11->__runetype[v9] & 0x4000) != 0);
  if (v9 == 43 || v9 == 45)
  {
    v13 = *v8++;
    v12 = v13;
  }
  else
  {
    v12 = v9;
  }
  if ((a3 & 0xFFFFFFEF) != 0 || v12 != 48)
  {
    v16 = a3 == 0;
    if (v12 != 48)
    {
      v17 = 10;
      goto LABEL_29;
    }
  }
  else
  {
    if ((*(unsigned __int8 *)v8 | 0x20) == 0x78)
    {
      v12 = v8[1];
      if ((v12 - 48) < 0xAu
        || (v14 = *((unsigned __int8 *)v8 + 1) - 65, v14 <= 0x25) && ((1 << v14) & 0x3F0000003FLL) != 0)
      {
        v8 += 2;
        v15 = 16;
        goto LABEL_34;
      }
    }
    v16 = a3 == 0;
    v12 = 48;
  }
  v17 = 8;
LABEL_29:
  if (v16)
    v15 = v17;
  else
    v15 = a3;
  if (v15 - 37 < 0xFFFFFFDD)
  {
    v18 = 0;
    goto LABEL_54;
  }
LABEL_34:
  v18 = 0;
  v19 = 0;
  v20 = 0xFFFFFFFFFFFFFFFFLL / v15;
  while (1)
  {
    v21 = v12 - 48;
    if ((v12 - 48) >= 0xAu)
    {
      if ((v12 - 65) > 0x19u)
      {
        if ((v12 - 97) > 0x19u)
          break;
        v21 = v12 - 87;
      }
      else
      {
        v21 = v12 - 55;
      }
    }
    if ((int)v15 <= v21)
      break;
    v22 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v20)
    {
      if (v18 == v20 && v21 > (int)~(v20 * v15))
      {
        v18 = 0xFFFFFFFFFFFFFFFFLL / v15;
      }
      else
      {
        v18 = v18 * v15 + v21;
        v22 = 1;
      }
    }
    v23 = *v8++;
    v12 = v23;
    v19 = v22;
  }
  if (v19 < 0)
  {
    v27 = __error();
    v24 = 0;
    *v27 = 34;
    v18 = -1;
    if (!a2)
      return v18;
    goto LABEL_55;
  }
  if (!v19)
  {
LABEL_54:
    *__error() = 22;
    v24 = 1;
    if (!a2)
      return v18;
    goto LABEL_55;
  }
  v24 = 0;
  if (v9 == 45)
    v18 = -(uint64_t)v18;
  if (a2)
  {
LABEL_55:
    v25 = (char *)(v8 - 1);
    if (v24)
      v25 = (char *)a1;
    *a2 = v25;
  }
  return v18;
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  uint64_t v3;
  _xlocale *v4;
  _xlocale *v5;

  v3 = __locale_key;
  v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__global_locale;
  return strtoull_l(__str, __endptr, __base, v5);
}

uint64_t __confstr_init(uint64_t result)
{
  __dirhelper_func = *(_UNKNOWN **)(result + 32);
  return result;
}

uint64_t __atexit_init()
{
  uint64_t result;

  if (*(_QWORD *)(MEMORY[0x1E0C87FA0] + 32) == -1)
    result = *(_QWORD *)(MEMORY[0x1E0C87FA0] + 40);
  else
    result = _os_alloc_once();
  __atexit = result;
  return result;
}

char *__cdecl getcwd(char *a1, size_t a2)
{
  return __private_getcwd(a1, a2, 1);
}

uint64_t thread_stack_pcs(uint64_t a1, int a2, unsigned int *a3)
{
  return __thread_stack_pcs(a1, a2, a3, 0, 0, 0);
}

int backtrace(void **a1, int a2)
{
  int result;
  uint64_t v4;
  int v5;

  v5 = 0;
  backtrace_get_pcs_func((uint64_t)a1, a2, (unsigned int *)&v5, 1, 0);
  result = v5;
  if (v5)
  {
    while (1)
    {
      v4 = (result - 1);
      if (a1[v4])
        break;
      --result;
      if (!v4)
        return 0;
    }
  }
  return result;
}

uint64_t _thread_stack_pcs(uint64_t a1, int a2, unsigned int *a3, int a4, uintptr_t a5)
{
  return __thread_stack_pcs(a1, a2, a3, a4 + 1, a5, 0);
}

uint64_t thread_stack_async_pcs(uint64_t a1, int a2, unsigned int *a3)
{
  return __thread_stack_pcs(a1, a2, a3, 0, 0, 1);
}

uint64_t __thread_stack_pcs(uint64_t a1, int a2, unsigned int *a3, int a4, uintptr_t a5, int a6)
{
  _opaque_pthread_t *v11;
  void *stackaddr_np;
  size_t stacksize_np;
  uintptr_t v14;
  uint64_t v15;
  uintptr_t v16;
  uintptr_t v17;
  char *v18;
  uint64_t *v19;
  int v20;
  unint64_t StatusReg;
  uint64_t v22;
  uint64_t v23;
  uintptr_t v25;
  uint64_t v26;
  uintptr_t return_addr;
  uint64_t vars0;

  v11 = pthread_self();
  stackaddr_np = pthread_get_stackaddr_np(v11);
  stacksize_np = pthread_get_stacksize_np(v11);
  *a3 = 0;
  v14 = pthread_stack_frame_decode_np((uintptr_t)&vars0, 0);
  v15 = 0;
  if ((&vars0 & 1) == 0)
  {
    v16 = (uintptr_t)stackaddr_np - stacksize_np;
    if ((unint64_t)&vars0 >= v16)
    {
      v17 = v14;
      v18 = (char *)&vars0 + (_QWORD)stackaddr_np - v14;
      if (&vars0 <= (uint64_t *)v18)
      {
        v19 = &vars0;
        if (!a5)
          goto LABEL_7;
LABEL_5:
        if (v17 <= a5)
        {
          while (1)
          {
            v15 = 0;
            if (v16 > v17 || (unint64_t)v18 < v17 || (v17 & 1) != 0 || (unint64_t)v19 >= v17)
              break;
            v19 = (uint64_t *)v17;
            v17 = pthread_stack_frame_decode_np(v17, 0);
            if (a5)
              goto LABEL_5;
LABEL_7:
            if (!a4)
              goto LABEL_15;
            --a4;
          }
        }
        else
        {
LABEL_15:
          v15 = 0;
          if (a2)
          {
            v20 = 1 - a2;
            StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
            while (1)
            {
              return_addr = 0;
              if ((unint64_t)*v19 >> 60 == 1)
              {
                v22 = *(_QWORD *)(StatusReg + 824);
                if (v22)
                {
                  v23 = *(unsigned int *)(v22 + 36);
                  v15 = (_DWORD)v23 ? 1 : v15;
                  if ((_DWORD)v23 && a6 != 0)
                    break;
                }
              }
              v25 = pthread_stack_frame_decode_np((uintptr_t)v19, &return_addr);
              v26 = *a3;
              *(_QWORD *)(a1 + 8 * v26) = return_addr;
              *a3 = v26 + 1;
              if ((v25 & 1) == 0 && v16 <= v25 && (unint64_t)v18 >= v25 && (unint64_t)v19 < v25)
              {
                ++v20;
                v19 = (uint64_t *)v25;
                if (v20 != 1)
                  continue;
              }
              return v15;
            }
            __thread_stack_async_pcs(a1, -v20, a3, (uint64_t)v19);
            return v23;
          }
        }
      }
    }
  }
  return v15;
}

uintptr_t __thread_stack_async_pcs(uint64_t a1, int a2, _DWORD *a3, uint64_t a4)
{
  uintptr_t result;
  int v7;
  uint64_t v8;
  uintptr_t return_addr;

  result = *(_QWORD *)(a4 - 8);
  return_addr = 0;
  do
  {
    v7 = a2;
    result = pthread_stack_frame_decode_np(result, &return_addr);
    if (!return_addr)
      break;
    v8 = *a3;
    *(_QWORD *)(a1 + 8 * v8) = return_addr + 1;
    *a3 = v8 + 1;
    if (!result)
      break;
    if ((result & 1) != 0)
      break;
    a2 = v7 - 1;
  }
  while (v7);
  return result;
}

char *__cdecl strtok(char *__str, const char *__sep)
{
  return strtok_r(__str, __sep, &strtok_last);
}

filesec_t filesec_dup(filesec_t a1)
{
  _OWORD *v2;
  _QWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void *v7;

  v2 = malloc_type_malloc(0x40uLL, 0x108004043B192EBuLL);
  v3 = v2;
  if (v2)
  {
    v4 = *(_OWORD *)a1;
    v5 = *((_OWORD *)a1 + 1);
    v6 = *((_OWORD *)a1 + 3);
    v2[2] = *((_OWORD *)a1 + 2);
    v2[3] = v6;
    *v2 = v4;
    v2[1] = v5;
    if ((*(_BYTE *)a1 & 0x20) != 0 && *((_QWORD *)a1 + 7) != 1)
    {
      v7 = malloc_type_malloc(*((_QWORD *)a1 + 6), 0x30B50D75uLL);
      v3[7] = v7;
      if (v7)
      {
        _platform_memmove();
      }
      else
      {
        free(v3);
        return 0;
      }
    }
  }
  return (filesec_t)v3;
}

uint64_t send_NOCANCEL()
{
  return __sendto_nocancel();
}

char ***_NSGetArgv(void)
{
  return (char ***)NXArgv_pointer;
}

char *__cdecl l64a(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  unsigned int v3;
  char v4;
  char v5;
  uint64_t v6;

  v1 = l64a_buf;
  if ((_DWORD)a1)
  {
    v2 = 0;
    do
    {
      v3 = a1 & 0x3F;
      v4 = (a1 & 0x3F) + 59;
      if (v3 <= 0x25)
        v4 = (a1 & 0x3F) + 53;
      if (v3 <= 0xB)
        v4 = v3 + 46;
      if (v3 <= 1)
        v5 = v3 + 46;
      else
        v5 = v4;
      l64a_buf[v2] = v5;
      v6 = v2 + 1;
      if (a1 < 0x40)
        break;
      LODWORD(a1) = (int)a1 >> 6;
    }
    while (v2++ < 5);
    v1 = &l64a_buf[v6];
  }
  *v1 = 0;
  return l64a_buf;
}

int *_NSGetArgc(void)
{
  return (int *)NXArgc_pointer;
}

char *__cdecl strtok_r(char *__str, const char *__sep, char **__lasts)
{
  char *v3;
  int v4;
  int v5;
  const char *v6;
  int v7;
  char *v8;
  int v9;
  int v10;
  const char *v11;
  int v12;

  if (__str || (__str = *__lasts) != 0)
  {
    v3 = __str;
LABEL_4:
    v5 = *v3++;
    v4 = v5;
    v6 = __sep;
    while (1)
    {
      v7 = *(unsigned __int8 *)v6;
      if (!*v6)
        break;
      ++v6;
      if (v4 == v7)
      {
        __str = v3;
        goto LABEL_4;
      }
    }
    if (v4)
    {
      v8 = v3;
LABEL_10:
      v10 = *v8++;
      v9 = v10;
      v11 = __sep;
      while (1)
      {
        v12 = *(unsigned __int8 *)v11;
        if (v12 == v9)
          break;
        ++v11;
        if (!v12)
        {
          v3 = v8;
          goto LABEL_10;
        }
      }
      if (v9)
        *v3 = 0;
      else
        v8 = 0;
    }
    else
    {
      v8 = 0;
      __str = 0;
    }
    *__lasts = v8;
  }
  return __str;
}

void rb_tree_init(rb_tree_t *a1, const rb_tree_ops_t *a2)
{
  a1->opaque[0] = 0;
  a1->opaque[1] = (void *)a2;
  a1->opaque[3] = 0;
  a1->opaque[4] = 0;
  a1->opaque[2] = 0;
}

void *__cdecl rb_tree_iterate(rb_tree_t *a1, void *a2, const unsigned int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  unsigned int v10;

  v3 = a1->opaque[1];
  if (!a2)
  {
    if (a1->opaque[0])
      return (char *)a1->opaque[(a3 == 0) + 2] - v3[2];
    return 0;
  }
  v4 = a3 ^ 1;
  v5 = v3[2];
  v6 = (char *)a2 + v5;
  v7 = *(_QWORD **)((char *)a2 + 8 * a3 + v5);
  if (!v7)
  {
    while (a1->opaque[0] != v6)
    {
      v9 = v6[2];
      v10 = (v9 >> 1) & 1;
      v6 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
      if ((_DWORD)v4 == v10)
        return (char *)v6 - v5;
    }
    return 0;
  }
  do
  {
    v6 = v7;
    v7 = (_QWORD *)v7[v4];
  }
  while (v7);
  return (char *)v6 - v5;
}

void (__cdecl *__cdecl signal(int a1, __sigaction_u a2))(int)
{
  return (void (__cdecl *)(int))signal__(a1, a2, 1);
}

char *__cdecl rindex(const char *a1, int a2)
{
  char *result;
  const char *v4;
  int v5;
  int v6;

  result = 0;
  v4 = a1;
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((char)a2 == v6)
      result = (char *)a1;
    a1 = v4;
  }
  while (v5);
  return result;
}

void srandom(unsigned int a1)
{
  int *v1;
  int v2;
  unsigned int *v3;
  uint64_t v4;
  signed int v5;
  signed int v6;
  int v7;

  v1 = state;
  *state = a1;
  if (!rand_type)
  {
    v7 = 50;
    do
    {
LABEL_13:
      random();
      --v7;
    }
    while (v7);
    return;
  }
  v2 = rand_deg;
  if (rand_deg > 1)
  {
    v3 = (unsigned int *)(v1 + 1);
    v4 = rand_deg - 1;
    do
    {
      if (a1)
        v5 = a1;
      else
        v5 = 123459876;
      v6 = 16807 * (v5 % 127773) - 2836 * (v5 / 127773);
      a1 = v6 + 0x7FFFFFFF;
      if (v6 >= 0)
        a1 = v6;
      *v3++ = a1;
      --v4;
    }
    while (v4);
  }
  fptr = &v1[rand_sep];
  rptr[0] = v1;
  if (v2 >= 1)
  {
    v7 = 10 * v2;
    goto LABEL_13;
  }
}

uint64_t random(void)
{
  int *v0;
  int *v1;
  unsigned int v2;
  int *v3;
  unsigned int v4;
  int *v5;
  int v6;
  int v7;

  if (rand_type)
  {
    v0 = fptr;
    v1 = rptr[0] + 1;
    v2 = *fptr + *rptr[0];
    *fptr = v2;
    v3 = v0 + 1;
    v4 = v2 >> 1;
    if ((unint64_t)v1 >= end_ptr)
      v5 = state;
    else
      v5 = v1;
    if ((unint64_t)v3 < end_ptr)
      v1 = v5;
    else
      v3 = state;
    fptr = v3;
    rptr[0] = v1;
  }
  else
  {
    v6 = *state;
    if (!*state)
      v6 = 123459876;
    v7 = 16807 * (v6 % 127773) - 2836 * (v6 / 127773);
    if (v7 < 0)
      --v7;
    v4 = v7 & 0x7FFFFFFF;
    *state = v4;
  }
  return v4;
}

_BYTE *__unsetenv_locked(_BYTE *a1, char *a2, uint64_t a3)
{
  _BYTE *result;
  uint64_t v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v11 = 0;
  for (result = __findenv_locked(a1, (_DWORD *)&v11 + 1, a2); result; result = __findenv_locked(a1, (_DWORD *)&v11 + 1, a2))
  {
    v7 = SHIDWORD(v11);
    v8 = *(void **)&a2[8 * SHIDWORD(v11)];
    if (!_owned_ptr_search(a3, (unint64_t)v8, (int *)&v11))
    {
      if ((_DWORD)v11 && *(_DWORD *)(a3 + 8) > (int)v11)
      {
        _platform_memmove();
        --*(_DWORD *)(a3 + 8);
        v8 = *(void **)&a2[8 * SHIDWORD(v11)];
      }
      free(v8);
      v7 = SHIDWORD(v11);
    }
    v9 = &a2[8 * v7 + 8];
    do
    {
      v10 = *(_QWORD *)v9;
      *((_QWORD *)v9 - 1) = *(_QWORD *)v9;
      v9 += 8;
    }
    while (v10);
  }
  return result;
}

int unsetenv(const char *a1)
{
  char **v3;

  if (!a1 || !*a1 || _platform_strchr())
  {
    *__error() = 22;
    return -1;
  }
  environ_lock_np();
  if (!__env_owned)
  {
    __env_owned = (uint64_t)_owned_ptr_alloc();
    if (!__env_owned)
    {
      environ_unlock_np();
      return -1;
    }
  }
  v3 = (char **)_NSGetEnviron();
  __unsetenv_locked(a1, *v3, __env_owned);
  environ_unlock_np();
  return 0;
}

int setenv(const char *__name, const char *__value, int __overwrite)
{
  char **v7;
  int v8;

  if (!__name || !*__name || _platform_strchr())
  {
    *__error() = 22;
    return -1;
  }
  environ_lock_np();
  if (!__env_owned)
  {
    __env_owned = (uint64_t)_owned_ptr_alloc();
    if (!__env_owned)
    {
      environ_unlock_np();
      return -1;
    }
  }
  v7 = (char **)_NSGetEnviron();
  v8 = __setenv_locked((unsigned __int8 *)__name, (unsigned __int8 *)__value, __overwrite, 1, v7, __env_owned);
  environ_unlock_np();
  return v8;
}

void environ_unlock_np()
{
  os_unfair_lock_unlock((os_unfair_lock_t)&__environ_lock_obj);
}

uint64_t environ_lock_np()
{
  return os_unfair_lock_lock_with_options();
}

uint64_t __setenv_locked(unsigned __int8 *a1, unsigned __int8 *a2, int a3, int a4, char **a5, uint64_t a6)
{
  unsigned __int8 *v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  BOOL v18;
  char *v19;
  uint64_t v20;
  void *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  _BYTE *i;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t result;
  int v38;
  uint64_t v39;

  v11 = a1;
  v39 = 0;
  v12 = __findenv_locked(a1, (_DWORD *)&v39 + 1, *a5);
  if (!v12)
  {
    v19 = *a5;
    if (*(_QWORD *)*a5)
    {
      v20 = 0;
      while (*(_QWORD *)&v19[8 * v20++ + 8])
        ;
    }
    else
    {
      LODWORD(v20) = 0;
    }
    if (_owned_ptr_search(a6, (unint64_t)*a5, (int *)&v39))
    {
      v22 = malloc_type_malloc(8 * (v20 + 2), 0x899C0F62uLL);
      if (!v22)
        return 0xFFFFFFFFLL;
      v23 = (unint64_t)v22;
      _owned_ptr_add(a6, (unint64_t)v22);
      _platform_memmove();
    }
    else
    {
      v24 = (char *)malloc_type_realloc(v19, 8 * (v20 + 2), 0x22F4FA58uLL);
      if (!v24)
        return 0xFFFFFFFFLL;
      v23 = (unint64_t)v24;
      if (*a5 == v24)
        goto LABEL_28;
      if ((_DWORD)v39 && *(_DWORD *)(a6 + 8) > (int)v39)
      {
        _platform_memmove();
        --*(_DWORD *)(a6 + 8);
      }
      _owned_ptr_add(a6, v23);
    }
    *a5 = (char *)v23;
LABEL_28:
    *(_QWORD *)(v23 + 8 * (v20 + 1)) = 0;
    HIDWORD(v39) = v20;
    goto LABEL_29;
  }
  if (a3)
  {
    v13 = v12;
    v14 = *(char **)&(*a5)[8 * SHIDWORD(v39)];
    if (!_owned_ptr_search(a6, (unint64_t)v14, (int *)&v39))
    {
      if (a4 >= 1)
      {
        v15 = _platform_strlen();
        if (_platform_strlen() >= v15)
          goto LABEL_59;
        v16 = (char *)malloc_type_realloc(v14, v13 - v14 + v15 + 1, 0x66E2FC5EuLL);
        v17 = (unint64_t)v16;
        if (v16)
          v18 = v16 == v14;
        else
          v18 = 1;
        if (!v18)
        {
          *(_QWORD *)&(*a5)[8 * SHIDWORD(v39)] = v16;
          v13 = &v16[v13 - v14];
          if ((_DWORD)v39 && *(_DWORD *)(a6 + 8) > (int)v39)
          {
            _platform_memmove();
            --*(_DWORD *)(a6 + 8);
          }
          _owned_ptr_add(a6, v17);
          goto LABEL_55;
        }
        if (v16)
        {
LABEL_59:
          do
          {
LABEL_55:
            v38 = *a2++;
            *v13++ = v38;
          }
          while (v38);
          return 0;
        }
        return 0xFFFFFFFFLL;
      }
      if ((_DWORD)v39 && *(_DWORD *)(a6 + 8) > (int)v39)
      {
        _platform_memmove();
        --*(_DWORD *)(a6 + 8);
      }
      free(v14);
      goto LABEL_46;
    }
LABEL_29:
    if (a4 >= 1)
    {
      v25 = 0;
      for (i = v11; *i && *i != 61; ++i)
        v25 += 0x100000000;
      v27 = _platform_strlen();
      v28 = malloc_type_malloc(v27 + (v25 >> 32) + 2, 0x571A916FuLL);
      v29 = SHIDWORD(v39);
      *(_QWORD *)&(*a5)[8 * SHIDWORD(v39)] = v28;
      if (v28)
      {
        _owned_ptr_add(a6, *(_QWORD *)&(*a5)[8 * v29]);
        v30 = *(_QWORD *)&(*a5)[8 * SHIDWORD(v39)];
        while (1)
        {
          ++v30;
          v31 = *v11;
          *(_BYTE *)(v30 - 1) = v31;
          if (!v31 || v31 == 61)
            break;
          ++v11;
        }
        v32 = 0;
        *(_BYTE *)(v30 - 1) = 61;
        do
        {
          v33 = a2[v32];
          *(_BYTE *)(v30 + v32++) = v33;
        }
        while (v33);
        return 0;
      }
      return 0xFFFFFFFFLL;
    }
LABEL_46:
    if (a4 < 0)
    {
      v34 = _platform_strlen();
      v35 = (unsigned __int8 *)malloc_type_malloc(v34 + 1, 0xD68A719DuLL);
      if (!v35)
        return 0xFFFFFFFFLL;
      v36 = v35;
      _owned_ptr_add(a6, (unint64_t)v35);
      _platform_memmove();
      v11 = v36;
    }
    result = 0;
    *(_QWORD *)&(*a5)[8 * SHIDWORD(v39)] = v11;
    return result;
  }
  return 0;
}

uint64_t _owned_ptr_add(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;

  v8 = 0;
  result = _owned_ptr_search(a1, a2, &v8);
  if ((_DWORD)result)
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(int *)(a1 + 12);
    v7 = *(_QWORD **)a1;
    if (v5 >= (int)v6)
    {
      result = (uint64_t)malloc_type_realloc(*(void **)a1, 16 * v6, 0xC0040B8AA526DuLL);
      if (!result)
        return result;
      v7 = (_QWORD *)result;
      *(_QWORD *)a1 = result;
      *(_DWORD *)(a1 + 12) = 2 * v6;
    }
    result = _platform_memmove();
    v7[v8 + 1] = a2;
    *(_DWORD *)(a1 + 8) = v5 + 1;
  }
  return result;
}

uint64_t _owned_ptr_search(uint64_t a1, unint64_t a2, int *a3)
{
  int v3;
  int v4;
  unint64_t v5;
  uint64_t result;
  int v7;
  int v8;
  unint64_t v9;

  v3 = *(_DWORD *)(a1 + 8);
  v4 = v3 - 1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (v3 - 1));
  if (v5 < a2)
  {
    result = 0xFFFFFFFFLL;
    if (!a3)
      return result;
    goto LABEL_3;
  }
  if (v5 == a2)
  {
LABEL_14:
    result = 0;
    if (!a3)
      return result;
LABEL_3:
    *a3 = v4;
    return result;
  }
  if (v3 < 3)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v8 = v4;
    do
    {
      v4 = (v8 + v7) / 2;
      v9 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v4);
      if (v9 >= a2)
      {
        if (v9 <= a2)
          goto LABEL_14;
        v8 = (v8 + v7) / 2;
      }
      else
      {
        v7 = (v8 + v7) / 2;
      }
    }
    while (v8 - v7 > 1);
  }
  result = 0xFFFFFFFFLL;
  v4 = v7;
  if (a3)
    goto LABEL_3;
  return result;
}

_QWORD *_owned_ptr_alloc()
{
  _QWORD *v0;
  _QWORD *v1;
  int v2;

  v0 = malloc_type_malloc(0x10uLL, 0x1080040FC6463CFuLL);
  if (v0)
  {
    v1 = malloc_type_malloc(0x40uLL, 0xC0040B8AA526DuLL);
    *v0 = v1;
    if (v1)
    {
      *v1 = 0;
      v0[1] = 0x800000001;
    }
    else
    {
      v2 = *__error();
      free(v0);
      v0 = 0;
      *__error() = v2;
    }
  }
  return v0;
}

filesec_t filesec_init(void)
{
  filesec_t result;

  result = (filesec_t)malloc_type_malloc(0x40uLL, 0x108004043B192EBuLL);
  if (result)
    *(_DWORD *)result = 0;
  return result;
}

int inet_aton(const char *a1, in_addr *a2)
{
  return _inet_aton_check((unsigned __int8 *)a1, a2, 0);
}

lldiv_t lldiv(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  lldiv_t result;

  v2 = a1 / a2;
  v3 = (a1 >= 0) & (a1 % a2 < 0);
  if (a1 >= 0 && a1 % a2 < 0)
    v4 = a2;
  else
    v4 = 0;
  v5 = a1 % a2 - v4;
  v6 = v2 + v3;
  result.rem = v5;
  result.quot = v6;
  return result;
}

void uuid_unparse_lower(const uuid_t uu, uuid_string_t out)
{
  uint64_t v2;

  v2 = 0;
  do
  {
    if (v2 <= 0xA && ((1 << v2) & 0x550) != 0)
      *out++ = 45;
    *out = a0123456789abcd[(unint64_t)uu[v2] >> 4];
    out[1] = a0123456789abcd[uu[v2] & 0xF];
    out += 2;
    ++v2;
  }
  while ((_DWORD)v2 != 16);
  *out = 0;
}

in_addr_t inet_addr(const char *a1)
{
  in_addr_t v2;

  v2 = 0;
  if (_inet_aton_check((unsigned __int8 *)a1, &v2, 0))
    return v2;
  else
    return -1;
}

uint64_t _inet_aton_check(unsigned __int8 *a1, _DWORD *a2, int a3)
{
  int v3;
  unint64_t v4;
  int v5;
  unsigned __int8 v6;
  int v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char v12;
  __uint32_t v13;
  int v14;
  int v15;
  char v16;
  uint64_t v17;
  int v18;
  char v19;
  int v20;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;

  v3 = *a1;
  if ((v3 - 48) > 9)
    return 0;
  v4 = 0;
  while (2)
  {
    if (v3 == 48)
    {
      v3 = a1[1];
      if ((v3 & 0xFFFFFFDF) == 0x58)
      {
        v5 = 0;
        v6 = a1[2];
        a1 += 2;
        LOBYTE(v3) = v6;
        v7 = 1;
        v8 = 16;
      }
      else
      {
        v7 = 0;
        v5 = 1;
        ++a1;
        v8 = 8;
      }
    }
    else
    {
      v7 = 0;
      v5 = 0;
      v8 = 10;
    }
    v9 = (char)v3;
    v10 = 0;
    if ((v3 & 0x80) != 0)
    {
      v16 = 0;
      goto LABEL_26;
    }
    v11 = v5;
    while (1)
    {
      if (v3 - 48 <= 9)
      {
        if ((v3 & 0xFE) == 0x38)
          v12 = v5;
        else
          v12 = 0;
        if ((v12 & 1) != 0)
          return 0;
        v10 = v10 * v8 + v9 - 48;
        goto LABEL_22;
      }
      if (!v7)
        break;
      v13 = _DefaultRuneLocale.__runetype[v3];
      if ((v13 & 0x10000) == 0)
        break;
      if ((v13 & 0x1000) != 0)
        v14 = -97;
      else
        v14 = -65;
      v10 = (v9 + v14 + 10) | (16 * v10);
LABEL_22:
      v15 = (char)*++a1;
      v9 = v15;
      v11 = 1;
      LOBYTE(v3) = v15;
      if (v15 < 0)
      {
        v16 = 0;
        LOBYTE(v3) = v9;
        v5 = 1;
        goto LABEL_26;
      }
    }
    v16 = 1;
    v5 = v11;
LABEL_26:
    if (v3 != 46)
    {
      if ((_BYTE)v3)
      {
        v19 = v16 ^ 1;
        if (a3)
          v19 = 1;
        if ((v19 & 1) != 0)
          return 0;
        v17 = 0;
        if (!v5 || (_DefaultRuneLocale.__runetype[v9] & 0x4000) == 0)
          return v17;
      }
      else if (!v5)
      {
        return 0;
      }
      if ((_DWORD)v4 == 3)
      {
        if (v10 > 0xFF)
          return 0;
        v20 = (v22 << 24) | (v23 << 16) | (v24 << 8);
      }
      else
      {
        if ((_DWORD)v4 != 2)
        {
          if ((_DWORD)v4 == 1)
          {
            if (v10 >> 24)
              return 0;
            LODWORD(v10) = v10 | (v22 << 24);
          }
          goto LABEL_51;
        }
        if (v10 >> 16)
          return 0;
        v20 = (v22 << 24) | (v23 << 16);
      }
      LODWORD(v10) = v10 | v20;
LABEL_51:
      if (a2)
        *a2 = bswap32(v10);
      return 1;
    }
    v17 = 0;
    if (v4 <= 2 && v10 <= 0xFF)
    {
      *(&v22 + v4++) = v10;
      v18 = *++a1;
      LOBYTE(v3) = v18;
      if ((v18 - 48) >= 0xA)
        return 0;
      continue;
    }
    return v17;
  }
}

char *__cdecl strerror(int __errnum)
{
  char *result;
  char *v3;

  if ((__errnum & 0x80000000) == 0 && __errnum < 107)
    return (char *)sys_errlist[__errnum];
  v3 = (char *)__strerror_ebuf;
  if (__strerror_ebuf
    || (result = (char *)malloc_type_calloc(1uLL, 0x800uLL, 0x506FA8A7uLL),
        v3 = result,
        (__strerror_ebuf = (uint64_t)result) != 0))
  {
    if (strerror_r(__errnum, v3, 0x800uLL))
      *__error() = 22;
    return (char *)__strerror_ebuf;
  }
  return result;
}

int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen)
{
  if (__errnum < 0 || __errnum >= 107)
  {
    __errstr(__errnum);
    return 22;
  }
  else if (_platform_strlcpy() >= __buflen)
  {
    return 34;
  }
  else
  {
    return 0;
  }
}

uint64_t __errstr(int a1)
{
  unsigned int v1;
  _BYTE *v2;
  BOOL v3;
  BOOL v4;
  _BYTE v6[2];

  v6[1] = 0;
  if (a1 >= 0)
    v1 = a1;
  else
    v1 = -a1;
  v2 = v6;
  do
  {
    *v2-- = a0123456789[v1 % 0xA];
    v3 = v1 >= 9;
    v4 = v1 == 9;
    v1 /= 0xAu;
  }
  while (!v4 && v3);
  if (a1 < 0)
    *v2 = 45;
  else
    ++v2;
  *((_WORD *)v2 - 1) = 8250;
  _platform_strlcpy();
  return _platform_strlcat();
}

int sysctlnametomib(const char *a1, int *a2, size_t *a3)
{
  int result;

  *a3 *= 4;
  _platform_strlen();
  result = __sysctl();
  *a3 >>= 2;
  return result;
}

char *__evpinit()
{
  __loadevp("STDBUF");
  __loadevp("STDBUF0");
  __loadevp("STDBUF1");
  __loadevp("STDBUF2");
  __loadevp("_STDBUF_I");
  __loadevp("_STDBUF_O");
  return __loadevp("_STDBUF_E");
}

char *__loadevp(const char *a1)
{
  char *result;

  result = getenv(a1);
  if (result)
    return (char *)_platform_strlcpy();
  return result;
}

int fchmodx_np(int a1, filesec_t a2)
{
  int v3;

  v3 = a1;
  return chmodx1((uint64_t)&v3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))fchmodx_syscall, a2);
}

uint64_t chmodx1(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t), filesec_t a3)
{
  uint64_t v6;
  unint64_t v8;
  int v9;
  _OWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD v13[5];
  unint64_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  unsigned int v17;
  unsigned int v18;

  v17 = -101;
  v18 = -101;
  v15 = 0;
  v14 = 0;
  memset(v13, 0, 68);
  if (!a3)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  v16 = 0;
  if (filesec_get_property(a3, FILESEC_OWNER, &v18) && *__error() != 2
    || filesec_get_property(a3, FILESEC_GROUP, &v17) && *__error() != 2)
  {
    return 0xFFFFFFFFLL;
  }
  if (!filesec_get_property(a3, FILESEC_MODE, &v16))
  {
    v6 = v16;
    goto LABEL_13;
  }
  v6 = 0xFFFFFFFFLL;
  if (*__error() == 2)
  {
LABEL_13:
    if (!filesec_get_property(a3, FILESEC_ACL_RAW, &v14) && !filesec_get_property(a3, FILESEC_ACL_ALLOCSIZE, &v15)
      || *__error() == 2)
    {
      v8 = v14;
      if (v14 > 1)
      {
        v9 = 1;
        v10 = (_OWORD *)v14;
      }
      else
      {
        v9 = 0;
        memset((char *)&v13[2] + 4, 0, 32);
        memset((char *)v13 + 4, 0, 32);
        v10 = v13;
        v14 = (unint64_t)v13;
        LODWORD(v13[0]) = 19710317;
        DWORD1(v13[2]) = -1;
      }
      if (!filesec_get_property(a3, FILESEC_UUID, (char *)v10 + 4))
      {
        v9 = 1;
        v11 = v14;
        goto LABEL_23;
      }
      if (*__error() == 2)
      {
        v11 = v14;
        *(_QWORD *)(v14 + 12) = 0;
        *(_QWORD *)(v11 + 4) = 0;
LABEL_23:
        if (!filesec_get_property(a3, FILESEC_GRPUUID, (void *)(v11 + 20)))
        {
          v12 = v14;
          return a2(a1, v18, v17, v6, v12);
        }
        if (*__error() == 2)
        {
          v12 = v14;
          *(_QWORD *)(v14 + 28) = 0;
          *(_QWORD *)(v12 + 20) = 0;
          if (!v9)
          {
            if (v8 == 1)
            {
              v12 = 1;
              v14 = 1;
            }
            else
            {
              v12 = 0;
              v14 = 0;
            }
          }
          return a2(a1, v18, v17, v6, v12);
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
  return v6;
}

int filesec_get_property(filesec_t a1, filesec_property_t a2, void *a3)
{
  int result;
  int v6;
  uint64_t v7;
  const unsigned __int8 *v8;
  const void *v9;
  acl_t v10;
  int v11;

  switch(a2)
  {
    case FILESEC_OWNER:
      if ((*(_BYTE *)a1 & 1) == 0)
        goto LABEL_31;
      if (!a3)
        return 0;
      result = 0;
      v6 = *((_DWORD *)a1 + 1);
      goto LABEL_13;
    case FILESEC_GROUP:
      if ((*(_BYTE *)a1 & 2) == 0)
        goto LABEL_31;
      if (!a3)
        return 0;
      result = 0;
      v6 = *((_DWORD *)a1 + 2);
LABEL_13:
      *(_DWORD *)a3 = v6;
      return result;
    case FILESEC_UUID:
      if ((*(_BYTE *)a1 & 4) == 0)
        goto LABEL_31;
      if (!a3)
        return 0;
      v8 = (const unsigned __int8 *)a1 + 12;
      goto LABEL_29;
    case FILESEC_MODE:
      if ((*(_BYTE *)a1 & 0x10) == 0)
        goto LABEL_31;
      if (!a3)
        return 0;
      result = 0;
      *(_WORD *)a3 = *((_WORD *)a1 + 22);
      return result;
    case FILESEC_ACL:
      if ((*(_BYTE *)a1 & 0x20) == 0)
        goto LABEL_31;
      if (!a3)
        return 0;
      v9 = (const void *)*((_QWORD *)a1 + 7);
      if (v9 == (const void *)1)
      {
        result = 0;
        v7 = 1;
        goto LABEL_38;
      }
      v10 = acl_copy_int_native(v9);
      *(_QWORD *)a3 = v10;
      if (v10)
        return 0;
      v11 = *__error();
      if (!v11)
        return 0;
      goto LABEL_33;
    case FILESEC_GRPUUID:
      if ((*(_BYTE *)a1 & 8) == 0)
        goto LABEL_31;
      if (!a3)
        return 0;
      v8 = (const unsigned __int8 *)a1 + 28;
LABEL_29:
      uuid_copy((unsigned __int8 *)a3, v8);
      return 0;
    default:
      if (a2 == FILESEC_ACL_RAW)
      {
        if ((*(_BYTE *)a1 & 0x20) != 0)
        {
          if (a3)
          {
            result = 0;
            v7 = *((_QWORD *)a1 + 7);
            goto LABEL_38;
          }
          return 0;
        }
        goto LABEL_31;
      }
      if (a2 != FILESEC_ACL_ALLOCSIZE)
      {
        v11 = 22;
        goto LABEL_33;
      }
      if ((*(_BYTE *)a1 & 0x20) == 0)
      {
LABEL_31:
        v11 = 2;
LABEL_33:
        *__error() = v11;
        return -1;
      }
      if (!a3)
        return 0;
      result = 0;
      v7 = *((_QWORD *)a1 + 6);
LABEL_38:
      *(_QWORD *)a3 = v7;
      return result;
  }
}

uint64_t fchmodx_syscall()
{
  return __fchmod_extended();
}

int mergesort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  size_t j;
  char *v8;
  char *v9;
  size_t v10;
  int64_t v11;
  int v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  unsigned int v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char v27;
  char *v28;
  char *v29;
  size_t v30;
  char v31;
  char *v32;
  char *v33;
  size_t v34;
  char v35;
  int v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  _BOOL4 v49;
  _BOOL4 v50;
  BOOL v51;
  char *v52;
  int v53;
  int v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  size_t v60;
  char *v61;
  int v62;
  char *v63;
  char v64;
  uint64_t i;
  int v66;
  char v67;
  int v68;
  char v69;
  char v70;
  int v71;
  int v72;
  size_t v73;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  _BOOL4 v89;
  int (__cdecl *v90)(const void *, const void *);
  size_t v91;

  if (__width <= 3)
  {
    *__error() = 22;
    return -1;
  }
  if (__nel)
  {
    j = __width;
    v73 = __width * __nel;
    v8 = (char *)malloc_type_malloc(__width * __nel + 8, 0x8EFA8C07uLL);
    if (!v8)
      return -1;
    v9 = v8;
    v91 = j;
    if (__nel <= 5)
    {
      insertionsort((uint64_t)__base, __nel, j, (uint64_t (*)(unint64_t, unint64_t))__compar);
      *(_QWORD *)((unint64_t)(v9 + 7) & 0xFFFFFFFFFFFFFFF8) = &v9[v73];
LABEL_43:
      v37 = &v9[v73];
      if (*(char **)((unint64_t)(v9 + 7) & 0xFFFFFFFFFFFFFFF8) == &v9[v73])
      {
        v39 = (char *)__base;
      }
      else
      {
        v89 = 0;
        v87 = (__base | j) & 3;
        v81 = -(uint64_t)j;
        v38 = (char *)__base;
        v90 = __compar;
        do
        {
          v39 = v9;
          v9 = v38;
          if (v39 != v37)
          {
            v40 = v39;
            v41 = v38;
            v42 = v39;
            v76 = v37;
            v78 = v38;
            v75 = v39;
            do
            {
              v43 = *(char **)((unint64_t)(v40 + 7) & 0xFFFFFFFFFFFFFFF8);
              v44 = v37;
              if (v43 != v37)
                v44 = *(char **)((unint64_t)(v43 + 7) & 0xFFFFFFFFFFFFFFF8);
              v45 = v43 - v39;
              v46 = &v9[v43 - v39];
              v79 = v44;
              v80 = v41;
              v47 = v44 - v39;
              v48 = &v9[v44 - v39];
              v49 = v43 - v39 < v44 - v39;
              v50 = v41 < v46;
              v51 = v41 < v46 && v45 < v47;
              v52 = v46;
              if (v51)
              {
                v83 = (unint64_t)v48;
                v85 = (unint64_t)v46;
                do
                {
                  v53 = ((uint64_t (*)(char *, char *))__compar)(v41, v52);
                  if (v53 >= 1)
                    v54 = 0;
                  else
                    v54 = -1;
                  if (v53 >= 1)
                    v55 = v48;
                  else
                    v55 = v46;
                  if (v53 >= 1)
                    v56 = v52;
                  else
                    v56 = v41;
                  if (v53 >= 1)
                    v57 = v41;
                  else
                    v57 = v52;
                  if (v89)
                  {
LABEL_68:
                    v58 = &v56[j];
                    if (&v56[j] >= v55)
                    {
LABEL_85:
                      v61 = &v55[v81];
                      if (&v55[v81] <= v56)
                      {
                        v56 = v55;
                      }
                      else
                      {
                        v62 = ((uint64_t (*)(char *, char *))__compar)(v57, &v55[v81]);
                        if (v62 > v54)
                          v63 = v55;
                        else
                          v63 = &v55[v81];
                        if (v62 <= v54)
                          v61 = v56;
                        v56 = v63;
                      }
                      while (v56 > &v61[j])
                      {
                        if (((int (*)(char *, char *))__compar)(v57, &v61[(((v56 - v61) / j) >> 1) * j]) > v54)
                          v61 += (((v56 - v61) / j) >> 1) * j;
                        else
                          v56 = &v61[(((v56 - v61) / j) >> 1) * j];
                      }
                      v89 = 1;
                    }
                    else
                    {
                      while (((int (*)(char *, char *))__compar)(v57, v58) > v54)
                      {
                        v56 = v58;
                        v58 += 2 * j;
                        if (v58 >= v55)
                        {
                          j = v91;
                          goto LABEL_85;
                        }
                        j *= 2;
                      }
                      v89 = j != v91;
                      if (j > v91)
                      {
                        do
                        {
                          v60 = j >> 1;
                          if (((int (*)(char *, char *))v90)(v57, &v56[j >> 1]) > v54)
                            v56 += j >> 1;
                          else
                            v58 = &v56[j >> 1];
                          j >>= 1;
                        }
                        while (v60 > v91);
                      }
                      v56 = v58;
                      __compar = v90;
                      j = v91;
                    }
                  }
                  else
                  {
                    v59 = 6;
                    while (1)
                    {
                      v56 += j;
                      if (v56 >= v55 || ((int (*)(char *, char *))__compar)(v57, v56) <= v54)
                        break;
                      if (!--v59)
                        goto LABEL_68;
                    }
                    v89 = 0;
                  }
                  v48 = (char *)v83;
                  if (v57 == v41)
                  {
                    if (v87)
                    {
                      do
                      {
                        v67 = *v52++;
                        *v42++ = v67;
                      }
                      while (v52 < v56);
                      for (i = 0; i != j; ++i)
                        v42[i] = v41[i];
                    }
                    else
                    {
                      do
                      {
                        v68 = *(_DWORD *)v52;
                        v52 += 4;
                        *(_DWORD *)v42 = v68;
                        v42 += 4;
                      }
                      while (v52 < v56);
                      for (i = 0; i != j; i += 4)
                        *(_DWORD *)&v42[i] = *(_DWORD *)&v41[i];
                    }
                    v41 += i;
                  }
                  else
                  {
                    if (v87)
                    {
                      do
                      {
                        v64 = *v41++;
                        *v42++ = v64;
                      }
                      while (v41 < v56);
                      for (i = 0; i != j; ++i)
                        v42[i] = v52[i];
                    }
                    else
                    {
                      do
                      {
                        v66 = *(_DWORD *)v41;
                        v41 += 4;
                        *(_DWORD *)v42 = v66;
                        v42 += 4;
                      }
                      while (v41 < v56);
                      for (i = 0; i != j; i += 4)
                        *(_DWORD *)&v42[i] = *(_DWORD *)&v52[i];
                    }
                    v52 += i;
                  }
                  v42 += i;
                  v46 = (char *)v85;
                  v49 = (unint64_t)v52 < v83;
                  v50 = (unint64_t)v41 < v85;
                }
                while ((unint64_t)v41 < v85 && (unint64_t)v52 < v83);
              }
              if (v49)
              {
                v40 = v79;
                if (v87)
                {
                  v9 = v78;
                  v39 = v75;
                  do
                  {
                    v69 = *v52++;
                    *v42++ = v69;
                  }
                  while (v52 < v48);
                }
                else
                {
                  v9 = v78;
                  v39 = v75;
                  do
                  {
                    v71 = *(_DWORD *)v52;
                    v52 += 4;
                    *(_DWORD *)v42 = v71;
                    v42 += 4;
                  }
                  while (v52 < v48);
                }
              }
              else if (v50)
              {
                if (v87)
                {
                  v9 = v78;
                  v40 = v79;
                  v39 = v75;
                  do
                  {
                    v70 = *v41++;
                    *v42++ = v70;
                  }
                  while (v41 < v46);
                }
                else
                {
                  v9 = v78;
                  v40 = v79;
                  v39 = v75;
                  do
                  {
                    v72 = *(_DWORD *)v41;
                    v41 += 4;
                    *(_DWORD *)v42 = v72;
                    v42 += 4;
                  }
                  while (v41 < v46);
                }
              }
              else
              {
                v9 = v78;
                v40 = v79;
                v39 = v75;
              }
              *(_QWORD *)((unint64_t)(v80 + 7) & 0xFFFFFFFFFFFFFFF8) = v48;
              v41 = v48;
              v37 = v76;
            }
            while (v40 != v76);
          }
          v37 = &v9[v73];
          v38 = v39;
        }
        while (*(char **)((unint64_t)(v9 + 7) & 0xFFFFFFFFFFFFFFF8) != &v9[v73]);
      }
      if (v9 == __base)
      {
        _platform_memmove();
        v9 = v39;
      }
      free(v9);
      return 0;
    }
    v10 = __nel & 1 | 4;
    v11 = (__nel - v10) * j;
    insertionsort((uint64_t)__base + v11, v10, j, (uint64_t (*)(unint64_t, unint64_t))__compar);
    v82 = &v9[v73];
    *(_QWORD *)((unint64_t)&v9[v11 + 7] & 0xFFFFFFFFFFFFFFF8) = &v9[v73];
    v12 = ((uint64_t (*)(void *, char *))__compar)(__base, (char *)__base + j);
    if (v11 < 1)
      goto LABEL_43;
    v13 = (char *)__base + v11;
    v14 = 2 * j;
    v15 = v12 > 0;
    v16 = -(uint64_t)j;
    v17 = v9;
    v18 = (char *)__base;
    v86 = 3 * j;
    v88 = v13;
    v77 = v9;
    v84 = -(uint64_t)j;
    while (1)
    {
      v19 = &v18[v14];
      if (&v18[v14] < v13)
      {
        v20 = 2;
        v21 = v18;
        while (1)
        {
          v22 = &v21[v14];
          if ((v15 & 1) == ((int (*)(char *, char *))__compar)(&v21[v14], &v21[v86]) < 1)
            break;
          v20 += 2;
          v23 = &v22[v14];
          v21 = v22;
          if (&v22[v14] >= v88)
            goto LABEL_16;
        }
        v23 = v22;
LABEL_16:
        v16 = v84;
        if (v20 > 0xF)
        {
          for (j = v91; v19 < v23; v19 += v14)
          {
            v28 = &v19[v16];
            if (((v15 ^ (((int (*)(char *, char *))__compar)(v28, v19) < 1)) & 1) == 0)
            {
              *(_QWORD *)((unint64_t)(v17 + 7) & 0xFFFFFFFFFFFFFFF8) = &v77[v19 - (_BYTE *)__base];
              if ((v15 & 1) != 0)
              {
                v29 = v18 + 1;
                v30 = v91;
                while (1)
                {
                  v31 = *(v29 - 1);
                  *(v29 - 1) = *v28;
                  *v28++ = v31;
                  if (!--v30)
                  {
                    v28 -= v14;
                    v30 = v91;
                    if (v29 >= v28)
                      break;
                  }
                  ++v29;
                }
              }
              v18 = v19;
              v17 = &v77[v19 - (_BYTE *)__base];
            }
            v16 = v84;
          }
          v9 = v77;
          if ((v15 & 1) != 0)
          {
            v32 = &v19[v16];
            v33 = v18 + 1;
            v34 = v91;
            while (1)
            {
              v35 = *(v33 - 1);
              *(v33 - 1) = *v32;
              *v32++ = v35;
              if (!--v34)
              {
                v32 -= v14;
                v34 = v91;
                if (v33 >= v32)
                  break;
              }
              ++v33;
            }
          }
          if (v19 < v88
            || (v36 = ((uint64_t (*)(char *, char *))__compar)(&v19[v16], v19), v24 = v82, v36 >= 1))
          {
            v24 = &v77[v19 - (_BYTE *)__base];
          }
          *(_QWORD *)((unint64_t)(v17 + 7) & 0xFFFFFFFFFFFFFFF8) = v24;
          v18 = v19;
          goto LABEL_42;
        }
        v19 = v23;
        j = v91;
        v9 = v77;
      }
      do
      {
        v24 = &v9[&v18[v14] - (_BYTE *)__base];
        *(_QWORD *)((unint64_t)(v17 + 7) & 0xFFFFFFFFFFFFFFF8) = v24;
        if ((v15 & 1) != 0)
        {
          v25 = 0;
          v26 = &v18[j];
          do
          {
            v27 = v18[v25];
            v18[v25] = v26[v25];
            v26[v25++] = v27;
          }
          while (j != v25);
          v18 += v16 + v25;
        }
        v18 += v14;
        v17 = v24;
      }
      while (v18 < v19);
LABEL_42:
      v15 ^= 1u;
      v17 = v24;
      v13 = v88;
      if (v18 >= v88)
        goto LABEL_43;
    }
  }
  return 0;
}

int mergesort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
  size_t k;
  char *v8;
  char *v9;
  size_t v10;
  int64_t v11;
  int v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  unsigned int v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char v27;
  char *v28;
  char *v29;
  size_t v30;
  char v31;
  char *v32;
  char *v33;
  size_t v34;
  char v35;
  int v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  _BOOL4 v49;
  _BOOL4 v50;
  BOOL v51;
  char *v52;
  int v53;
  int v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  int i;
  uint64_t v61;
  size_t v62;
  char *v63;
  int v64;
  char *v65;
  char v66;
  uint64_t j;
  int v68;
  char v69;
  int v70;
  char v71;
  char v72;
  int v73;
  int v74;
  size_t v75;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BOOL4 v90;
  char *v91;
  char *v92;
  size_t v93;

  if (__width <= 3)
  {
    *__error() = 22;
    return -1;
  }
  if (__nel)
  {
    k = __width;
    v75 = __width * __nel;
    v8 = (char *)malloc_type_malloc(__width * __nel + 8, 0xEF852A90uLL);
    if (!v8)
      return -1;
    v9 = v8;
    v93 = k;
    if (__nel <= 5)
    {
      insertionsort_0((uint64_t)__base, __nel, k, (uint64_t)__compar);
      *(_QWORD *)((unint64_t)(v9 + 7) & 0xFFFFFFFFFFFFFFF8) = &v9[v75];
LABEL_43:
      v37 = &v9[v75];
      if (*(char **)((unint64_t)(v9 + 7) & 0xFFFFFFFFFFFFFFF8) == &v9[v75])
      {
        v39 = (char *)__base;
      }
      else
      {
        v90 = 0;
        v88 = (__base | k) & 3;
        v83 = -(uint64_t)k;
        v38 = (char *)__base;
        do
        {
          v39 = v9;
          v9 = v38;
          if (v39 != v37)
          {
            v40 = v39;
            v41 = v38;
            v42 = v39;
            v78 = v37;
            v80 = v38;
            v77 = v39;
            do
            {
              v43 = *(char **)((unint64_t)(v40 + 7) & 0xFFFFFFFFFFFFFFF8);
              v44 = v37;
              if (v43 != v37)
                v44 = *(char **)((unint64_t)(v43 + 7) & 0xFFFFFFFFFFFFFFF8);
              v45 = v43 - v39;
              v46 = &v9[v43 - v39];
              v81 = v44;
              v82 = v41;
              v47 = v44 - v39;
              v48 = &v9[v44 - v39];
              v49 = v43 - v39 < v44 - v39;
              v50 = v41 < v46;
              v51 = v41 < v46 && v45 < v47;
              v52 = v46;
              if (v51)
              {
                v84 = v48;
                v86 = (unint64_t)v46;
                do
                {
                  v53 = (*((uint64_t (**)(void *, char *, char *))__compar + 2))(__compar, v41, v52);
                  if (v53 >= 1)
                    v54 = 0;
                  else
                    v54 = -1;
                  if (v53 >= 1)
                    v55 = v48;
                  else
                    v55 = v46;
                  if (v53 >= 1)
                    v56 = v52;
                  else
                    v56 = v41;
                  if (v53 >= 1)
                    v57 = v41;
                  else
                    v57 = v52;
                  v58 = v57;
                  if (v90)
                  {
LABEL_68:
                    v59 = &v56[k];
                    if (&v56[k] >= v55)
                    {
LABEL_87:
                      v63 = &v55[v83];
                      if (&v55[v83] <= v56)
                      {
                        v56 = v55;
                      }
                      else
                      {
                        v64 = (*((uint64_t (**)(void *, char *, char *))__compar + 2))(__compar, v58, &v55[v83]);
                        v57 = v58;
                        if (v64 > v54)
                          v65 = v55;
                        else
                          v65 = &v55[v83];
                        if (v64 <= v54)
                          v63 = v56;
                        v56 = v65;
                      }
                      if (v56 > &v63[k])
                      {
                        do
                        {
                          if ((*((int (**)(void *, char *, char *))__compar + 2))(__compar, v58, &v63[(((v56 - v63) / k) >> 1) * k]) > v54)v63 += (((v56 - v63) / k) >> 1) * k;
                          else
                            v56 = &v63[(((v56 - v63) / k) >> 1) * k];
                        }
                        while (v56 > &v63[k]);
                        v57 = v58;
                      }
                      v90 = 1;
LABEL_102:
                      v48 = v84;
                    }
                    else
                    {
                      for (i = (*((uint64_t (**)(void *))__compar + 2))(__compar);
                            i > v54;
                            i = (*((uint64_t (**)(void *))__compar + 2))(__compar))
                      {
                        v56 = v59;
                        v59 += 2 * k;
                        if (v59 >= v55)
                        {
                          k = v93;
                          v57 = v58;
                          goto LABEL_87;
                        }
                        k *= 2;
                      }
                      v90 = k != v93;
                      v92 = v58;
                      if (k > v93)
                      {
                        do
                        {
                          v62 = k >> 1;
                          if ((*((int (**)(void *, char *, char *))__compar + 2))(__compar, v92, &v56[k >> 1]) > v54)v56 += k >> 1;
                          else
                            v59 = &v56[k >> 1];
                          k >>= 1;
                        }
                        while (v62 > v93);
                      }
                      v56 = v59;
                      k = v93;
                      v48 = v84;
                      v57 = v92;
                    }
                  }
                  else
                  {
                    v61 = 6;
                    while (1)
                    {
                      v56 += k;
                      if (v56 >= v55)
                      {
                        v90 = 0;
                        goto LABEL_102;
                      }
                      if ((*((int (**)(void *))__compar + 2))(__compar) <= v54)
                        break;
                      --v61;
                      v57 = v58;
                      if (!v61)
                        goto LABEL_68;
                    }
                    v90 = 0;
                    v48 = v84;
                    v57 = v58;
                  }
                  if (v57 == v41)
                  {
                    if (v88)
                    {
                      do
                      {
                        v69 = *v52++;
                        *v42++ = v69;
                      }
                      while (v52 < v56);
                      for (j = 0; j != k; ++j)
                        v42[j] = v41[j];
                    }
                    else
                    {
                      do
                      {
                        v70 = *(_DWORD *)v52;
                        v52 += 4;
                        *(_DWORD *)v42 = v70;
                        v42 += 4;
                      }
                      while (v52 < v56);
                      for (j = 0; j != k; j += 4)
                        *(_DWORD *)&v42[j] = *(_DWORD *)&v41[j];
                    }
                    v41 += j;
                  }
                  else
                  {
                    if (v88)
                    {
                      do
                      {
                        v66 = *v41++;
                        *v42++ = v66;
                      }
                      while (v41 < v56);
                      for (j = 0; j != k; ++j)
                        v42[j] = v52[j];
                    }
                    else
                    {
                      do
                      {
                        v68 = *(_DWORD *)v41;
                        v41 += 4;
                        *(_DWORD *)v42 = v68;
                        v42 += 4;
                      }
                      while (v41 < v56);
                      for (j = 0; j != k; j += 4)
                        *(_DWORD *)&v42[j] = *(_DWORD *)&v52[j];
                    }
                    v52 += j;
                  }
                  v42 += j;
                  v46 = (char *)v86;
                  v49 = v52 < v48;
                  v50 = (unint64_t)v41 < v86;
                }
                while ((unint64_t)v41 < v86 && v52 < v48);
              }
              if (v49)
              {
                v40 = v81;
                if (v88)
                {
                  v9 = v80;
                  v39 = v77;
                  do
                  {
                    v71 = *v52++;
                    *v42++ = v71;
                  }
                  while (v52 < v48);
                }
                else
                {
                  v9 = v80;
                  v39 = v77;
                  do
                  {
                    v73 = *(_DWORD *)v52;
                    v52 += 4;
                    *(_DWORD *)v42 = v73;
                    v42 += 4;
                  }
                  while (v52 < v48);
                }
              }
              else if (v50)
              {
                if (v88)
                {
                  v9 = v80;
                  v40 = v81;
                  v39 = v77;
                  do
                  {
                    v72 = *v41++;
                    *v42++ = v72;
                  }
                  while (v41 < v46);
                }
                else
                {
                  v9 = v80;
                  v40 = v81;
                  v39 = v77;
                  do
                  {
                    v74 = *(_DWORD *)v41;
                    v41 += 4;
                    *(_DWORD *)v42 = v74;
                    v42 += 4;
                  }
                  while (v41 < v46);
                }
              }
              else
              {
                v9 = v80;
                v40 = v81;
                v39 = v77;
              }
              *(_QWORD *)((unint64_t)(v82 + 7) & 0xFFFFFFFFFFFFFFF8) = v48;
              v41 = v48;
              v37 = v78;
            }
            while (v40 != v78);
          }
          v37 = &v9[v75];
          v38 = v39;
        }
        while (*(char **)((unint64_t)(v9 + 7) & 0xFFFFFFFFFFFFFFF8) != &v9[v75]);
      }
      if (v9 == __base)
      {
        _platform_memmove();
        v9 = v39;
      }
      free(v9);
      return 0;
    }
    v10 = __nel & 1 | 4;
    v11 = (__nel - v10) * k;
    insertionsort_0((uint64_t)__base + v11, v10, k, (uint64_t)__compar);
    v85 = &v9[v75];
    *(_QWORD *)((unint64_t)&v9[v11 + 7] & 0xFFFFFFFFFFFFFFF8) = &v9[v75];
    v12 = (*((uint64_t (**)(void *, void *, char *))__compar + 2))(__compar, __base, (char *)__base + k);
    if (v11 < 1)
      goto LABEL_43;
    v13 = (char *)__base + v11;
    v14 = 2 * k;
    v15 = v12 > 0;
    v16 = -(uint64_t)k;
    v17 = v9;
    v18 = (char *)__base;
    v89 = 3 * k;
    v91 = v13;
    v79 = v9;
    v87 = -(uint64_t)k;
    while (1)
    {
      v19 = &v18[v14];
      if (&v18[v14] < v13)
      {
        v20 = 2;
        v21 = v18;
        while (1)
        {
          v22 = &v21[v14];
          if ((v15 & 1) == (*((int (**)(void *, char *, char *))__compar + 2))(__compar, &v21[v14], &v21[v89]) < 1)break;
          v20 += 2;
          v23 = &v22[v14];
          v21 = v22;
          if (&v22[v14] >= v91)
            goto LABEL_16;
        }
        v23 = v22;
LABEL_16:
        v16 = v87;
        if (v20 > 0xF)
        {
          for (k = v93; v19 < v23; v19 += v14)
          {
            v28 = &v19[v16];
            if (((v15 ^ ((*((int (**)(void *, char *, char *))__compar + 2))(__compar, v28, v19) < 1)) & 1) == 0)
            {
              *(_QWORD *)((unint64_t)(v17 + 7) & 0xFFFFFFFFFFFFFFF8) = &v79[v19 - (_BYTE *)__base];
              if ((v15 & 1) != 0)
              {
                v29 = v18 + 1;
                v30 = v93;
                while (1)
                {
                  v31 = *(v29 - 1);
                  *(v29 - 1) = *v28;
                  *v28++ = v31;
                  if (!--v30)
                  {
                    v28 -= v14;
                    v30 = v93;
                    if (v29 >= v28)
                      break;
                  }
                  ++v29;
                }
              }
              v18 = v19;
              v17 = &v79[v19 - (_BYTE *)__base];
            }
            v16 = v87;
          }
          v9 = v79;
          if ((v15 & 1) != 0)
          {
            v32 = &v19[v16];
            v33 = v18 + 1;
            v34 = v93;
            while (1)
            {
              v35 = *(v33 - 1);
              *(v33 - 1) = *v32;
              *v32++ = v35;
              if (!--v34)
              {
                v32 -= v14;
                v34 = v93;
                if (v33 >= v32)
                  break;
              }
              ++v33;
            }
          }
          if (v19 < v91
            || (v36 = (*((uint64_t (**)(void *, char *, char *))__compar + 2))(__compar, &v19[v16], v19),
                v24 = v85,
                v36 >= 1))
          {
            v24 = &v79[v19 - (_BYTE *)__base];
          }
          *(_QWORD *)((unint64_t)(v17 + 7) & 0xFFFFFFFFFFFFFFF8) = v24;
          v18 = v19;
          goto LABEL_42;
        }
        v19 = v23;
        k = v93;
        v9 = v79;
      }
      do
      {
        v24 = &v9[&v18[v14] - (_BYTE *)__base];
        *(_QWORD *)((unint64_t)(v17 + 7) & 0xFFFFFFFFFFFFFFF8) = v24;
        if ((v15 & 1) != 0)
        {
          v25 = 0;
          v26 = &v18[k];
          do
          {
            v27 = v18[v25];
            v18[v25] = v26[v25];
            v26[v25++] = v27;
          }
          while (k != v25);
          v18 += v16 + v25;
        }
        v18 += v14;
        v17 = v24;
      }
      while (v18 < v19);
LABEL_42:
      v15 ^= 1u;
      v17 = v24;
      v13 = v91;
      if (v18 >= v91)
        goto LABEL_43;
    }
  }
  return 0;
}

uint64_t insertionsort(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(unint64_t, unint64_t))
{
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;

  v4 = a2 - 1;
  if (a2 != 1)
  {
    v7 = result;
    v8 = -a3;
    v9 = result;
    do
    {
      v10 = v9;
      v9 += a3;
      if (v9 > v7)
      {
        v11 = v9;
        do
        {
          v12 = v11 + v8;
          result = a4(v11 + v8, v11);
          if ((int)result < 1)
            break;
          v13 = 0;
          do
          {
            v14 = *(_BYTE *)(v10 + v13);
            *(_BYTE *)(v10 + v13) = *(_BYTE *)(v11 + v13);
            *(_BYTE *)(v11 + v13++) = v14;
          }
          while ((_DWORD)a3 != (_DWORD)v13);
          v10 += v8;
          v11 += v8;
        }
        while (v12 > v7);
      }
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t insertionsort_0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;

  v4 = a2 - 1;
  if (a2 != 1)
  {
    v7 = result;
    v8 = -a3;
    v9 = result;
    do
    {
      v10 = v9;
      v9 += a3;
      if (v9 > v7)
      {
        v11 = v9;
        do
        {
          v12 = v11 + v8;
          result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(a4 + 16))(a4, v11 + v8, v11);
          if ((int)result < 1)
            break;
          v13 = 0;
          do
          {
            v14 = *(_BYTE *)(v10 + v13);
            *(_BYTE *)(v10 + v13) = *(_BYTE *)(v11 + v13);
            *(_BYTE *)(v11 + v13++) = v14;
          }
          while ((_DWORD)a3 != (_DWORD)v13);
          v10 += v8;
          v11 += v8;
        }
        while (v12 > v7);
      }
      --v4;
    }
    while (v4);
  }
  return result;
}

void srand(unsigned int a1)
{
  next = a1;
}

FTS *__cdecl fts_open(char *const *a1, int a2, int (__cdecl *a3)(const FTSENT **, const FTSENT **))
{
  _QWORD *v7;

  if ((a2 & 0xFFFFF300) != 0)
  {
    *__error() = 22;
    return 0;
  }
  v7 = malloc_type_calloc(1uLL, 0x48uLL, 0x10B0040C1B4BCF7uLL);
  if (!v7)
    return 0;
  v7[7] = a3;
  *((_DWORD *)v7 + 16) = (a2 >> 8) & 8 | a2;
  return (FTS *)__fts_open((uint64_t *)a1, (uint64_t)v7);
}

char *__cdecl strpbrk(char *__s1, const char *__s2)
{
  int v2;
  char *v3;
  const char *i;
  int v5;

  while (1)
  {
    v2 = *__s1;
    if (!*__s1)
      break;
    v3 = __s1++;
    for (i = __s2; ; ++i)
    {
      v5 = *(unsigned __int8 *)i;
      if (!*i)
        break;
      if (v5 == v2)
        return v3;
    }
  }
  return 0;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = a2;
  if (a1 < 0x100)
  {
    v4 = __locale_key;
    v5 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
    if (!v5)
      v5 = &__global_locale;
    v3 = *(_DWORD *)(*(_QWORD *)(v5[166] + 120) + 4 * a1 + 60);
  }
  else
  {
    v3 = ___runetype(a1);
  }
  return v3 & v2;
}

unint64_t ___runetype_l(__darwin_ct_rune_t a1, locale_t a2)
{
  locale_t v2;
  locale_t v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  __darwin_ct_rune_t *v8;
  __darwin_ct_rune_t v9;
  unint64_t v11;
  uint64_t v13;

  if (a1 < 0)
    return 0;
  v2 = (locale_t)&__c_locale;
  v3 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1)
    v3 = a2;
  if (a2)
    v2 = v3;
  v4 = *(_QWORD *)(*((_QWORD *)v2 + 166) + 120);
  v5 = *(int *)(v4 + 3136);
  if (!(_DWORD)v5)
    return 0;
  v6 = *(_DWORD **)(v4 + 3144);
  while (1)
  {
    v7 = v5 >> 1;
    v8 = &v6[6 * (v5 >> 1)];
    v9 = v8[1];
    if (a1 >= *v8 && v9 >= a1)
      break;
    if (v9 < a1)
      v6 = v8 + 6;
    v11 = v5 - (v9 < a1);
    v5 = v11 >> 1;
    if (v11 <= 1)
      return 0;
  }
  v13 = *(_QWORD *)&v6[6 * v7 + 4];
  if (v13)
    return *(unsigned int *)(v13 + 4 * (a1 - *v8));
  else
    return (int)v6[6 * v7 + 2];
}

unint64_t ___runetype(__darwin_ct_rune_t a1)
{
  uint64_t v1;
  _xlocale *v2;
  _xlocale *v3;

  v1 = __locale_key;
  v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2)
    v3 = v2;
  else
    v3 = (_xlocale *)&__global_locale;
  return ___runetype_l(a1, v3);
}

void rb_tree_remove_node(rb_tree_t *a1, void *a2)
{
  rb_tree_t *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  char *v12;
  _BOOL4 v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  _BOOL4 v21;
  void **v22;
  char **v23;
  char *v24;
  unint64_t v25;
  _QWORD *v26;
  char *v27;
  unint64_t v28;
  void **v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void **v37;
  unint64_t *v38;
  char *v39;

  v2 = a1;
  v3 = *((_QWORD *)a1->opaque[1] + 2);
  v4 = (char *)a2 + v3;
  if (!((char *)a2 + v3))
  {
    v18 = MEMORY[0x10];
    v19 = MEMORY[0];
    goto LABEL_18;
  }
  v5 = *(_QWORD *)v4;
  v6 = *((_QWORD *)v4 + 1);
  if (!*(_QWORD *)v4)
  {
    if (v6)
      goto LABEL_25;
    v18 = *((_QWORD *)v4 + 2);
    if ((v18 & 1) != 0)
    {
      v19 = 0;
      v21 = 0;
      v20 = (char *)a1->opaque[0];
      goto LABEL_19;
    }
    v19 = 0;
LABEL_18:
    v20 = (char *)a1->opaque[0];
    v21 = a1->opaque[0] != v4;
LABEL_19:
    LODWORD(v10) = (v18 >> 1) & 1;
    v12 = (char *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
    *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFFCLL) + 8 * v10) = v19;
    --a1->opaque[4];
    v22 = &a1->opaque[(v18 >> 1) & 1];
    v24 = (char *)v22[2];
    v23 = (char **)(v22 + 2);
    if (v24 == v4)
    {
      *v23 = v12;
      if (v20 == v4)
        a1->opaque[3] = v12;
    }
    *((_QWORD *)v4 + 2) = v18 & 3;
    if (v21)
      goto LABEL_41;
    return;
  }
  if (!v6)
  {
LABEL_25:
    v25 = *((_QWORD *)v4 + 2);
    v26 = *(_QWORD **)&v4[8 * (v5 == 0)];
    v27 = (char *)a1->opaque[0];
    *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFFFCLL) + 8 * ((v25 >> 1) & 1)) = v26;
    v26[2] = v25;
    --a1->opaque[4];
    if (v27 == v4)
    {
      a1->opaque[(v5 != 0) + 2] = v26;
      v28 = *((_QWORD *)v4 + 2);
    }
    else
    {
      v28 = *((_QWORD *)v4 + 2);
      v29 = &a1->opaque[(v28 >> 1) & 1];
      v31 = (char *)v29[2];
      v30 = v29 + 2;
      if (v31 == v4)
        *v30 = v26;
    }
    *((_QWORD *)v4 + 2) = v28 & 3;
    return;
  }
  v7 = (char *)rb_tree_iterate(a1, a2, ((*((_DWORD *)v4 + 4) >> 1) & 1) == 0);
  v8 = (unint64_t)&v7[v3];
  v9 = *(_QWORD *)&v7[v3 + 16];
  v10 = (v9 >> 1) & 1;
  v11 = (v9 & 2) == 0;
  v12 = (char *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
  v14 = (v9 & 1) == 0 || v8 == 0;
  if (v12 == v4)
    v15 = (v9 >> 1) & 1;
  else
    v15 = (v9 & 2) == 0;
  v16 = *(_QWORD *)(v8 + 8 * v15);
  if (!v16 || (v17 = *(_QWORD *)(v16 + 16), (v17 & 1) == 0))
  {
    if (v12 == v4)
      goto LABEL_36;
LABEL_33:
    *(_QWORD *)&v12[8 * v10] = v16;
    v32 = *(_QWORD *)&v4[8 * ((v9 & 2) == 0)];
    *(_QWORD *)(v8 + 8 * ((v9 & 2) == 0)) = v32;
    *(_QWORD *)(v32 + 16) = *(_QWORD *)(v32 + 16) & 3 | v8;
    v11 = (v9 >> 1) & 1;
    goto LABEL_37;
  }
  *(_QWORD *)(v16 + 16) = v17 & 0xFFFFFFFFFFFFFFFELL;
  if (v12 != v4)
  {
    v14 = 0;
    *(_QWORD *)(v16 + 16) = v9 & 0xFFFFFFFFFFFFFFFELL;
    goto LABEL_33;
  }
  v14 = 0;
LABEL_36:
  v12 = &v7[v3];
LABEL_37:
  v33 = *(_QWORD *)&v4[8 * v11];
  *(_QWORD *)(v8 + 8 * v11) = v33;
  *(_QWORD *)(v33 + 16) = *(_QWORD *)(v33 + 16) & 3 | v8;
  v34 = *((_QWORD *)v4 + 2);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v8 + 16) & 0xFFFFFFFFFFFFFFFCLL | v34 & 3;
  v35 = *((_QWORD *)v4 + 2) & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(v8 + 16) = v35 | v34 & 3;
  *(_QWORD *)(v35 + 8 * ((v34 >> 1) & 1)) = v8;
  --v2->opaque[4];
  v36 = *((_QWORD *)v4 + 2);
  v37 = &v2->opaque[(v36 >> 1) & 1];
  v39 = (char *)v37[2];
  v38 = (unint64_t *)(v37 + 2);
  if (v39 == v4)
    *v38 = v36 & 0xFFFFFFFFFFFFFFFCLL;
  *((_QWORD *)v4 + 2) = v36 & 3;
  if (v14)
  {
    a1 = v2;
LABEL_41:
    rb_tree_removal_rebalance(a1, (unint64_t)v12, v10);
  }
}

int getmntinfo(statfs **a1, int a2)
{
  int result;

  result = getmntinfo_internal((uint64_t)&getmntinfo_vars, a2);
  *a1 = (statfs *)getmntinfo_vars;
  return result;
}

int getmntinfo_r_np(statfs **a1, int a2)
{
  int v3;
  int v4;
  void *v6[3];

  memset(v6, 0, sizeof(v6));
  v3 = getmntinfo_internal((uint64_t)v6, a2);
  if (v3)
  {
    *a1 = (statfs *)v6[0];
  }
  else
  {
    v4 = *__error();
    free(v6[0]);
    *__error() = v4;
  }
  return v3;
}

statfs *getmntinfo_internal(uint64_t a1, int a2)
{
  statfs *result;
  uint64_t v5;
  size_t v6;

  result = (statfs *)*(unsigned int *)(a1 + 8);
  if ((int)result <= 0)
  {
    result = (statfs *)getfsstat(0, 0, 2);
    *(_DWORD *)(a1 + 8) = (_DWORD)result;
    if ((result & 0x80000000) != 0)
      return 0;
  }
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= 1)
  {
    result = (statfs *)getfsstat(*(statfs **)a1, v5, a2);
    *(_DWORD *)(a1 + 8) = (_DWORD)result;
    if ((result & 0x80000000) != 0)
      return 0;
  }
  while (*(_QWORD *)(a1 + 16) <= 2168 * (unint64_t)result)
  {
    if (*(_QWORD *)a1)
    {
      free(*(void **)a1);
      LODWORD(result) = *(_DWORD *)(a1 + 8);
    }
    v6 = 2168 * ((int)result + 1);
    *(_QWORD *)(a1 + 16) = v6;
    result = (statfs *)malloc_type_malloc(v6, 0x94535F7uLL);
    *(_QWORD *)a1 = result;
    if (!result)
      break;
    result = (statfs *)getfsstat(result, *(_DWORD *)(a1 + 16), a2);
    *(_DWORD *)(a1 + 8) = (_DWORD)result;
    if ((result & 0x80000000) != 0)
      return 0;
  }
  return result;
}

int mbtowc_l(__int32 *a1, const char *a2, size_t a3, locale_t a4)
{
  locale_t v4;
  locale_t v5;
  unint64_t v6;

  v4 = (locale_t)&__global_locale;
  if (a4 != (locale_t)-1)
    v4 = a4;
  if (a4)
    v5 = v4;
  else
    v5 = (locale_t)&__c_locale;
  if (a2)
  {
    v6 = (*(uint64_t (**)(__int32 *, const char *, size_t, uint64_t))(*((_QWORD *)v5 + 166) + 72))(a1, a2, a3, (uint64_t)v5 + 656);
    if (v6 > 0xFFFFFFFFFFFFFFFDLL)
      LODWORD(v6) = -1;
  }
  else
  {
    LODWORD(v6) = 0;
    *((_OWORD *)v5 + 47) = 0u;
    *((_OWORD *)v5 + 48) = 0u;
    *((_OWORD *)v5 + 45) = 0u;
    *((_OWORD *)v5 + 46) = 0u;
    *((_OWORD *)v5 + 43) = 0u;
    *((_OWORD *)v5 + 44) = 0u;
    *((_OWORD *)v5 + 41) = 0u;
    *((_OWORD *)v5 + 42) = 0u;
  }
  return v6;
}

int regexec(const regex_t *a1, const char *a2, size_t a3, regmatch_t __pmatch[], int a5)
{
  return regnexec(a1, a2, 0xFFFFFFFFFFFFFFFFLL, a3, __pmatch, a5);
}

uint64_t lrand48(void)
{
  _rand48_seed = _rand48_add + _rand48_mult * _rand48_seed;
  return ((unint64_t)_rand48_seed >> 17) & 0x7FFFFFFF;
}

char *__cdecl asctime(const tm *a1)
{
  return asctime_r(a1, buf_asctime);
}

clock_t clock(void)
{
  rusage v1;

  memset(&v1, 0, sizeof(v1));
  if (getrusage(0, &v1))
    return -1;
  else
    return v1.ru_stime.tv_usec + (uint64_t)v1.ru_utime.tv_usec + 1000000 * (v1.ru_stime.tv_sec + v1.ru_utime.tv_sec);
}

_QWORD *__fts_open(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  int v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  int v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  int v25;
  int v26;
  __int16 v27;
  _DWORD *v28;
  int v29;
  int v30;
  uint64_t v31;

  v2 = (_QWORD *)a2;
  v4 = *(_DWORD *)(a2 + 64);
  if ((v4 & 2) != 0)
    *(_DWORD *)(a2 + 64) = v4 | 4;
  if (!*a1)
    goto LABEL_9;
  v5 = 0;
  v6 = a1 + 1;
  do
  {
    v7 = _platform_strlen();
    if (v7 > v5)
      v5 = v7;
  }
  while (*v6++);
  if (v5 + 1 >= 0x401)
  {
    v10 = 0;
    v11 = a1 + 1;
    do
    {
      v12 = _platform_strlen();
      if (v12 > v10)
        v10 = v12;
    }
    while (*v11++);
    v9 = v10 + 1;
  }
  else
  {
LABEL_9:
    v9 = 1024;
  }
  if (fts_palloc((uint64_t)v2, v9))
    goto LABEL_50;
  v14 = fts_alloc((uint64_t)v2, (uint64_t)"", 0);
  if (!v14)
  {
LABEL_49:
    free((void *)v2[4]);
LABEL_50:
    free(v2);
    return 0;
  }
  v15 = v14;
  *((_WORD *)v14 + 43) = -1;
  v16 = *a1;
  if (*a1)
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = a1 + 1;
    v21 = *a1;
    while (1)
    {
      v22 = _platform_strlen();
      v23 = fts_alloc((uint64_t)v2, v21, v22);
      if (!v23)
        break;
      v24 = v23;
      *((_WORD *)v23 + 43) = 0;
      *((_QWORD *)v23 + 1) = v15;
      *((_QWORD *)v23 + 5) = v23 + 26;
      if ((v2[8] & 0x400) != 0)
        v25 = -1;
      else
        v25 = v2[8] & 1;
      v26 = fts_stat2((uint64_t)v2, (uint64_t)v23, v25, -1, 0);
      if (v26 == 5)
        v27 = 1;
      else
        v27 = v26;
      *((_WORD *)v24 + 44) = v27;
      if (v2[7])
      {
        *((_QWORD *)v24 + 2) = v19;
        v19 = (uint64_t)v24;
      }
      else
      {
        *((_QWORD *)v24 + 2) = 0;
        if (v19)
          *((_QWORD *)v18 + 2) = v24;
        else
          v19 = (uint64_t)v24;
        v18 = v24;
      }
      v21 = v20[v17++];
      if (!v21)
      {
        if (v2[7] && (_DWORD)v17 != 1)
          v19 = fts_sort((uint64_t)v2, v19, v17);
        goto LABEL_37;
      }
    }
LABEL_46:
    if (v19)
    {
      do
      {
        v31 = *(_QWORD *)(v19 + 16);
        fts_free((_DWORD *)v19);
        v19 = v31;
      }
      while (v31);
    }
    fts_free(v15);
    goto LABEL_49;
  }
  v19 = 0;
LABEL_37:
  v28 = fts_alloc((uint64_t)v2, (uint64_t)"", 0);
  *v2 = v28;
  if (!v28)
    goto LABEL_46;
  *((_QWORD *)v28 + 2) = v19;
  *((_WORD *)v28 + 44) = 9;
  v29 = *((_DWORD *)v2 + 16);
  if ((v29 & 4) == 0)
  {
    v30 = open_NOCANCEL();
    *((_DWORD *)v2 + 10) = v30;
    v29 = *((_DWORD *)v2 + 16);
    if (v30 < 0)
    {
      v29 |= 4u;
      *((_DWORD *)v2 + 16) = v29;
    }
  }
  if ((v29 & 4) == 0 && getenv("FTS_USE_THREAD_FCHDIR"))
    *((_DWORD *)v2 + 16) = v29 | 0x400;
  if (!v16)
    fts_free(v15);
  return v2;
}

uint64_t fts_palloc(uint64_t a1, int a2)
{
  size_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t result;

  v3 = (a2 + *(_DWORD *)(a1 + 44) + 256);
  *(_DWORD *)(a1 + 44) = v3;
  v4 = *(void **)(a1 + 32);
  if (v3 < 0xFFFF)
  {
    v5 = malloc_type_realloc(v4, v3, 0x1F6B1213uLL);
    if (v5)
    {
      v6 = v5;
      result = 0;
      *(_QWORD *)(a1 + 32) = v6;
      return result;
    }
    free(*(void **)(a1 + 32));
    *(_QWORD *)(a1 + 32) = 0;
  }
  else
  {
    free(v4);
    *(_QWORD *)(a1 + 32) = 0;
    *__error() = 63;
  }
  return 1;
}

uint64_t fts_build(uint64_t a1, int a2)
{
  uint64_t v4;
  const char *v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  __int16 v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  dirent *v21;
  const char *d_name;
  uint64_t d_namlen;
  int v24;
  unsigned int *v25;
  int v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  uint64_t v31;
  int v32;
  int v33;
  __int16 v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  unint64_t v49;
  __int16 v50;
  __int16 v51;
  __int128 *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  _DWORD *v56;
  _DWORD *v57;
  uint64_t v58;
  _QWORD *i;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  _BOOL4 v70;
  int v71;
  char v72;
  unsigned int v73;
  int v74;
  _BYTE *v75;
  __int16 v76;
  int v77;
  DIR *dirp[2];
  __int128 v79;
  void *v80[2];
  int v81[4];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;

  v92 = 0;
  v90 = 0u;
  v91 = 0u;
  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  v4 = *(_QWORD *)a1;
  v5 = *(const char **)(*(_QWORD *)a1 + 40);
  *(_OWORD *)dirp = 0u;
  v79 = 0u;
  *(_OWORD *)v80 = 0u;
  *(_OWORD *)v81 = 0u;
  v6 = *(_DWORD *)(a1 + 64);
  v7 = (v6 >> 3) & 1;
  BYTE1(v81[1]) = (v6 & 8) != 0;
  HIBYTE(v81[1]) = (v6 & 0x20) != 0;
  BYTE2(v81[1]) = HIBYTE(v81[1]);
  v81[0] = open_NOCANCEL();
  if (v81[0] != -1)
  {
    v80[0] = malloc_type_malloc(0x8000uLL, 0x48B28C96uLL);
    if (!v80[0])
      goto LABEL_11;
    LOWORD(dirp[1]) = 5;
    if (v7)
      v8 = -2113929205;
    else
      v8 = -2113430005;
    if (v7)
      v9 = 1;
    else
      v9 = 557;
    HIDWORD(dirp[1]) = v8;
    DWORD2(v79) = v9;
    if ((advance_directory((uint64_t)dirp) & 1) != 0)
    {
LABEL_13:
      if (a2 == 2)
      {
        v70 = 0;
        v71 = 0;
        v77 = 0;
      }
      else
      {
        v10 = *(_DWORD *)(a1 + 64);
        if ((v10 & 0x800) != 0)
        {
          v11 = *(_DWORD *)(a1 + 64) & 0x10 ^ 0x50;
        }
        else if ((v10 & 8) != 0)
        {
          if ((v10 & 0x10) != 0)
            v11 = 48;
          else
            v11 = 16;
        }
        else
        {
          v11 = 32;
        }
        v71 = v11;
        v70 = a2 == 3;
        if (dirp[0])
          v13 = dirfd(dirp[0]);
        else
          v13 = v81[0];
        if (!fts_safe_changedir(a1, v4, v13))
        {
          v77 = 0;
          v72 = 0;
LABEL_32:
          v14 = *(_WORD *)(v4 + 86);
          v15 = *(unsigned __int16 *)(v4 + 64);
          if (!v14 && v15 == 1)
            v15 = **(unsigned __int8 **)(v4 + 48) != 47;
          if ((*(_BYTE *)(a1 + 64) & 4) != 0)
          {
            v16 = (_BYTE *)(*(_QWORD *)(a1 + 32) + v15);
            *v16 = 47;
            v75 = v16 + 1;
            v14 = *(_WORD *)(v4 + 86);
          }
          else
          {
            v75 = 0;
          }
          v12 = 0;
          v17 = 0;
          v18 = 0;
          v74 = 0;
          v19 = v15 + 1;
          v20 = *(_DWORD *)(a1 + 44) - v19;
          v76 = v14 + 1;
          v73 = v15 + 2;
          while (1)
          {
            if (dirp[0])
            {
              v21 = readdir(dirp[0]);
              if (!v21)
                goto LABEL_128;
              d_name = v21->d_name;
              d_namlen = v21->d_namlen;
              *(_QWORD *)&v82 = v21->d_name;
              *((_QWORD *)&v82 + 1) = d_namlen;
              LODWORD(v92) = v21->d_type;
              goto LABEL_83;
            }
            if (v81[0] == -1)
              goto LABEL_128;
            if (BYTE2(v81[1]))
              break;
            if (HIBYTE(v81[1]))
            {
              HIBYTE(v81[1]) = 0;
              d_name = "..";
              *(_QWORD *)&v82 = "..";
              *((_QWORD *)&v82 + 1) = 2;
              LODWORD(v92) = 4;
              LODWORD(d_namlen) = 2;
              goto LABEL_83;
            }
            v24 = v81[3];
            if (v81[3] == v81[2])
            {
              if (LOBYTE(v81[1]) || !advance_directory((uint64_t)dirp) || LOBYTE(v81[1]))
              {
LABEL_128:
                close_directory((uint64_t)dirp);
                if (v74)
                {
                  v58 = *(_QWORD *)(a1 + 32);
                  for (i = *(_QWORD **)(a1 + 8); i; i = (_QWORD *)i[2])
                  {
                    v60 = (_QWORD *)i[5];
                    if (v60 != i + 13)
                      i[5] = (char *)v60 + v58 - i[6];
                    i[6] = v58;
                  }
                  if ((*(__int16 *)(v12 + 86) & 0x80000000) == 0)
                  {
                    v61 = (_QWORD *)v12;
                    do
                    {
                      v62 = (_QWORD *)v61[5];
                      if (v62 != v61 + 13)
                        v61[5] = (char *)v62 + v58 - v61[6];
                      v61[6] = v58;
                      v63 = v61[2];
                      if (!v63)
                        v63 = v61[1];
                      v61 = (_QWORD *)v63;
                    }
                    while ((*(__int16 *)(v63 + 86) & 0x80000000) == 0);
                  }
                }
                if ((*(_BYTE *)(a1 + 64) & 4) != 0)
                {
                  v64 = (_DWORD)v19 == *(_DWORD *)(a1 + 44) || v17 == 0;
                  v65 = v64;
                  v75[-v65] = 0;
                }
                if ((v72 & 1) != 0)
                {
LABEL_149:
                  if (!v17)
                  {
                    if (!v70)
                      return 0;
                    v12 = 0;
                    *(_WORD *)(v4 + 88) = 6;
                    return v12;
                  }
                }
                else if (a2 == 1 || !v17)
                {
                  if (*(_WORD *)(v4 + 86))
                  {
                    if (!fts_safe_changedir(a1, v4, -1))
                      goto LABEL_149;
                  }
                  else if ((*(_BYTE *)(a1 + 64) & 4) != 0 || !fts_fchdir(a1, *(_DWORD *)(a1 + 40)))
                  {
                    goto LABEL_149;
                  }
                  v12 = 0;
                  *(_WORD *)(v4 + 88) = 7;
                  *(_DWORD *)(a1 + 64) |= 0x200u;
                  return v12;
                }
                if (*(_QWORD *)(a1 + 56) && v17 >= 2)
                  return fts_sort(a1, v12, v17);
                return v12;
              }
              v24 = v81[3];
            }
            v92 = 0;
            v90 = 0u;
            v91 = 0u;
            v88 = 0u;
            v89 = 0u;
            v86 = 0u;
            v87 = 0u;
            v84 = 0u;
            v85 = 0u;
            v82 = 0u;
            v83 = 0u;
            v25 = (unsigned int *)v80[1];
            v26 = v24 + 1;
            v81[3] = v26;
            if (BYTE1(v81[1]))
            {
              v27 = (unsigned int *)((char *)v80[1] + *(unsigned int *)v80[1]);
              v80[1] = v27;
              if (v26 != v81[2] && (char *)v27 + *v27 > (char *)v80[0] + 0x8000)
                fts_build_cold_1();
              v28 = v25[7];
              if (!(_DWORD)v28)
                fts_build_cold_1();
              d_name = (char *)v25 + (int)v25[6] + 24;
              LODWORD(d_namlen) = v28 - 1;
              *(_QWORD *)&v82 = d_name;
              *((_QWORD *)&v82 + 1) = (v28 - 1);
              if (&d_name[v28] > (char *)v80[0] + 0x8000)
                fts_build_cold_1();
              v29 = v25;
              v25 = 0;
            }
            else
            {
              v30 = (unsigned int *)((char *)v80[1] + *(unsigned int *)v80[1]);
              v80[1] = v30;
              if (v26 != v81[2] && (char *)v30 + *v30 > (char *)v80[0] + 0x8000)
                fts_build_cold_1();
              v31 = v25[7];
              if (!(_DWORD)v31)
                fts_build_cold_1();
              d_name = (char *)v25 + (int)v25[6] + 24;
              LODWORD(d_namlen) = v31 - 1;
              *(_QWORD *)&v82 = d_name;
              *((_QWORD *)&v82 + 1) = (v31 - 1);
              if (&d_name[v31] > (char *)v80[0] + 0x8000)
                fts_build_cold_1();
              v29 = 0;
            }
            if (!BYTE1(v81[1]))
              v29 = v25;
            v32 = v29[9] - 1;
            v33 = 4;
            v34 = 0x8000;
            v35 = 8;
            switch(v32)
            {
              case 0:
                goto LABEL_73;
              case 1:
                goto LABEL_68;
              case 2:
                v34 = 24576;
                v35 = 6;
                goto LABEL_73;
              case 3:
                v34 = 0x2000;
                v35 = 2;
                goto LABEL_73;
              case 4:
                v34 = -24576;
                v35 = 10;
                goto LABEL_73;
              case 5:
                v34 = -16384;
                v35 = 12;
                goto LABEL_73;
              case 6:
                v34 = 4096;
                v35 = 1;
LABEL_73:
                LODWORD(v92) = v35;
                if (BYTE1(v81[1]))
                  goto LABEL_83;
                BYTE4(v92) = 1;
                v36 = DWORD2(v79);
                if ((v35 | 4) != 6)
                {
                  v25[36] = 0;
                  v36 &= ~0x20u;
                }
                v37 = HIDWORD(dirp[1]);
                v38 = v25[1];
                if ((v38 & 0x200) == 0)
                {
                  v37 = HIDWORD(dirp[1]) & 0xFFFFFDFF;
                  *((_QWORD *)v25 + 5) = 0;
                  *((_QWORD *)v25 + 6) = 0;
                }
                if ((v37 & ~v38) != 0 || (v36 & ~v25[4]) != 0)
                  goto LABEL_83;
                LODWORD(v83) = v25[8];
                WORD3(v83) = v25[32];
                *((_QWORD *)&v83 + 1) = *((_QWORD *)v25 + 15);
                *(_QWORD *)&v84 = *((_QWORD *)v25 + 13);
                v39 = v25[35];
                DWORD2(v84) = v25[36];
                v85 = *(_OWORD *)(v25 + 22);
                v86 = *(_OWORD *)(v25 + 14);
                v87 = *(_OWORD *)(v25 + 18);
                v40 = *(_OWORD *)(v25 + 10);
                *(_QWORD *)&v89 = *(_QWORD *)(v25 + 37);
                v88 = v40;
                LODWORD(v90) = v39;
                DWORD1(v90) = v25[29];
                WORD2(v83) = v25[28] & 0xFFF | v34;
                v41 = *(_QWORD *)(v25 + 33);
                v64 = (v41 & 0x1FF) == 0;
                v42 = v41 / 512;
                if (!v64)
                  ++v42;
                *((_QWORD *)&v89 + 1) = v42;
                break;
              default:
                v33 = 0;
LABEL_68:
                LODWORD(v92) = v33;
                goto LABEL_83;
            }
LABEL_84:
            if ((*(_BYTE *)(a1 + 64) & 0x20) != 0 || *d_name != 46 || d_name[1] && (d_name[1] != 46 || d_name[2]))
            {
              v43 = fts_alloc(a1, (uint64_t)d_name, (int)d_namlen);
              if (!v43)
                goto LABEL_162;
              v44 = *((_QWORD *)&v82 + 1);
              if (*((_QWORD *)&v82 + 1) >= (unint64_t)v20)
              {
                v45 = *(_QWORD *)(a1 + 32);
                if (fts_palloc(a1, v73 + DWORD2(v82)))
                {
LABEL_162:
                  v66 = *__error();
                  fts_free(v43);
                  if (v12)
                  {
                    do
                    {
                      v67 = *(_QWORD *)(v12 + 16);
                      fts_free((_DWORD *)v12);
                      v12 = v67;
                    }
                    while (v67);
                  }
                  close_directory((uint64_t)dirp);
                  *(_WORD *)(v4 + 88) = 7;
                  *(_DWORD *)(a1 + 64) |= 0x200u;
                  v12 = 0;
                  *__error() = v66;
                  return v12;
                }
                v46 = *(_QWORD *)(a1 + 32);
                if (v45 != v46)
                {
                  v47 = (_BYTE *)(v46 + v19);
                  v48 = v75;
                  if ((*(_BYTE *)(a1 + 64) & 4) != 0)
                    v48 = v47;
                  v75 = v48;
                  v74 = 1;
                }
                v20 = *(_DWORD *)(a1 + 44) - v19;
                v44 = *((_QWORD *)&v82 + 1);
              }
              v49 = v44 + v19;
              if (v49 >= 0xFFFF)
              {
                fts_free(v43);
                if (v12)
                {
                  do
                  {
                    v68 = *(_QWORD *)(v12 + 16);
                    fts_free((_DWORD *)v12);
                    v12 = v68;
                  }
                  while (v68);
                }
                close_directory((uint64_t)dirp);
                *(_WORD *)(v4 + 88) = 7;
                *(_DWORD *)(a1 + 64) |= 0x200u;
                v12 = 0;
                *__error() = 63;
                return v12;
              }
              *((_WORD *)v43 + 43) = v76;
              *((_QWORD *)v43 + 1) = *(_QWORD *)a1;
              *((_WORD *)v43 + 32) = v49;
              if (v77)
              {
                if (a2 == 2)
                {
                  v50 = 11;
                }
                else
                {
                  v43[14] = v77;
                  v50 = 10;
                }
                *((_WORD *)v43 + 44) = v50;
                v56 = *(_DWORD **)(v4 + 40);
              }
              else
              {
                v51 = 3;
                switch(v92 | v71)
                {
                  case 0x10u:
                  case 0x14u:
                  case 0x1Au:
                  case 0x20u:
                  case 0x21u:
                  case 0x22u:
                  case 0x24u:
                  case 0x26u:
                  case 0x28u:
                  case 0x2Au:
                  case 0x2Cu:
                  case 0x2Eu:
                  case 0x30u:
                  case 0x34u:
                  case 0x40u:
                  case 0x44u:
                  case 0x50u:
                  case 0x54u:
                  case 0x5Au:
                    if ((*(_BYTE *)(a1 + 64) & 4) != 0)
                    {
                      *((_QWORD *)v43 + 5) = *((_QWORD *)v43 + 6);
                      _platform_memmove();
                      if (dirp[0])
                        v55 = dirfd(dirp[0]);
                      else
                        v55 = v81[0];
                      if (BYTE4(v92))
                        v52 = &v83;
                      else
                        v52 = 0;
                      v53 = a1;
                      v54 = (uint64_t)v43;
                    }
                    else
                    {
                      *((_QWORD *)v43 + 5) = v43 + 26;
                      if (BYTE4(v92))
                        v52 = &v83;
                      else
                        v52 = 0;
                      v53 = a1;
                      v54 = (uint64_t)v43;
                      v55 = -1;
                    }
                    *((_WORD *)v43 + 44) = fts_stat2(v53, v54, 0, v55, (uint64_t)v52);
                    goto LABEL_118;
                  case 0x41u:
                  case 0x42u:
                  case 0x46u:
                  case 0x4Cu:
                  case 0x51u:
                  case 0x52u:
                  case 0x56u:
                  case 0x5Cu:
                    goto LABEL_125;
                  case 0x48u:
                  case 0x58u:
                    v51 = 8;
                    goto LABEL_125;
                  case 0x4Au:
                    v51 = 12;
                    goto LABEL_125;
                  case 0x4Eu:
                  case 0x5Eu:
                    v51 = 14;
                    goto LABEL_125;
                  default:
                    v51 = 11;
LABEL_125:
                    *((_WORD *)v43 + 44) = v51;
                    if ((*(_BYTE *)(a1 + 64) & 4) != 0)
                      v56 = (_DWORD *)*((_QWORD *)v43 + 6);
                    else
                      v56 = v43 + 26;
                    break;
                }
              }
              *((_QWORD *)v43 + 5) = v56;
LABEL_118:
              *((_QWORD *)v43 + 2) = 0;
              v57 = v43;
              if (v12)
              {
                *((_QWORD *)v18 + 2) = v43;
                v57 = (_DWORD *)v12;
              }
              ++v17;
              v12 = (uint64_t)v57;
              v18 = v43;
            }
          }
          BYTE2(v81[1]) = 0;
          *(_QWORD *)&v82 = ".";
          *((_QWORD *)&v82 + 1) = 1;
          LODWORD(v92) = 4;
          LODWORD(d_namlen) = 1;
          d_name = ".";
LABEL_83:
          BYTE4(v92) = 0;
          goto LABEL_84;
        }
        if (a2 == 3)
          *(_DWORD *)(v4 + 56) = *__error();
        *(_WORD *)(v4 + 90) |= 1u;
        v77 = *__error();
        close_directory((uint64_t)dirp);
      }
      v72 = 1;
      goto LABEL_32;
    }
    if (v81[0] != -1)
LABEL_11:
      close_NOCANCEL();
  }
  v81[0] = -1;
  free(v80[0]);
  v80[0] = 0;
  dirp[0] = opendir(v5);
  if (dirp[0])
    goto LABEL_13;
  if (a2 != 3)
    return 0;
  *(_WORD *)(v4 + 88) = 4;
  v12 = 0;
  *(_DWORD *)(v4 + 56) = *__error();
  return v12;
}

_DWORD *fts_alloc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;

  v5 = 112;
  if ((*(_DWORD *)(a1 + 64) & 8) == 0)
    v5 = 263;
  v6 = malloc_type_calloc(1uLL, v5 + a3, 0x24C28641uLL);
  v7 = v6;
  if (v6)
  {
    v6[15] = -1;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a1 + 32);
    *((_WORD *)v6 + 33) = a3;
    *((_WORD *)v6 + 46) = 3;
    if ((*(_BYTE *)(a1 + 64) & 8) == 0)
      *((_QWORD *)v6 + 12) = ((unint64_t)v6 + a3 + 113) & 0xFFFFFFFFFFFFFFF8;
    _platform_memmove();
  }
  return v7;
}

uint64_t fts_stat2(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  int v7;
  const char *v8;
  stat *v9;
  int v10;
  int v11;
  uint64_t result;
  __int128 v13;
  timespec v14;
  timespec v15;
  timespec v16;
  __int128 v17;
  __int128 v18;
  int v19;
  dev_t st_dev;
  __darwin_ino64_t st_ino;
  uint64_t i;
  _OWORD v23[9];

  if (a4 == -1)
  {
    v8 = *(const char **)(a2 + 40);
    v7 = -2;
  }
  else
  {
    v7 = a4;
    v8 = (const char *)(a2 + 104);
  }
  if ((*(_DWORD *)(a1 + 64) & 8) != 0)
    v9 = (stat *)v23;
  else
    v9 = *(stat **)(a2 + 96);
  v10 = *(_DWORD *)(a1 + 64) & 2;
  memset(v23, 0, sizeof(v23));
  if (!a3 && a5 && (!v10 || (~*(unsigned __int16 *)(a5 + 4) & 0xA000) != 0))
  {
    *(_OWORD *)&v9->st_dev = *(_OWORD *)a5;
    v13 = *(_OWORD *)(a5 + 16);
    v14 = *(timespec *)(a5 + 32);
    v15 = *(timespec *)(a5 + 64);
    v9->st_mtimespec = *(timespec *)(a5 + 48);
    v9->st_ctimespec = v15;
    *(_OWORD *)&v9->st_uid = v13;
    v9->st_atimespec = v14;
    v16 = *(timespec *)(a5 + 80);
    v17 = *(_OWORD *)(a5 + 96);
    v18 = *(_OWORD *)(a5 + 128);
    *(_OWORD *)&v9->st_blksize = *(_OWORD *)(a5 + 112);
    *(_OWORD *)v9->st_qspare = v18;
    v9->st_birthtimespec = v16;
    *(_OWORD *)&v9->st_size = v17;
  }
  else
  {
    if (!(v10 | a3))
      goto LABEL_43;
    if (fstatat(v7, v8, v9, 0))
    {
      v11 = *__error();
      if (!fstatat(v7, v8, v9, 32))
      {
        if (v11 == 62)
          *(_DWORD *)(a2 + 56) = 62;
        *__error() = 0;
        return 13;
      }
LABEL_22:
      *(_DWORD *)(a2 + 56) = v11;
      *(_OWORD *)&v9->st_blksize = 0u;
      *(_OWORD *)v9->st_qspare = 0u;
      v9->st_birthtimespec = 0u;
      *(_OWORD *)&v9->st_size = 0u;
      v9->st_mtimespec = 0u;
      v9->st_ctimespec = 0u;
      *(_OWORD *)&v9->st_uid = 0u;
      v9->st_atimespec = 0u;
      result = 10;
      *(_OWORD *)&v9->st_dev = 0u;
      return result;
    }
    if (a3 == -1 && (v9->st_mode & 0xF000) != 0x4000)
    {
LABEL_43:
      if (fstatat(v7, v8, v9, 32))
      {
        v11 = *__error();
        goto LABEL_22;
      }
    }
  }
  v19 = v9->st_mode & 0xF000;
  if (v19 == 40960)
    return 12;
  if (v19 == 0x8000)
    return 8;
  if (v19 != 0x4000)
    return 3;
  st_dev = v9->st_dev;
  *(_DWORD *)(a2 + 80) = v9->st_dev;
  st_ino = v9->st_ino;
  *(_QWORD *)(a2 + 72) = st_ino;
  *(_WORD *)(a2 + 84) = v9->st_nlink;
  if (*(_BYTE *)(a2 + 104) == 46 && (!*(_BYTE *)(a2 + 105) || *(_BYTE *)(a2 + 105) == 46 && !*(_BYTE *)(a2 + 106)))
    return 5;
  for (i = *(_QWORD *)(a2 + 8); ; i = *(_QWORD *)(i + 8))
  {
    if (*(__int16 *)(i + 86) < 0)
      return 1;
    if (st_ino == *(_QWORD *)(i + 72) && st_dev == *(_DWORD *)(i + 80))
      break;
  }
  *(_QWORD *)a2 = i;
  return 2;
}

uint64_t advance_directory(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t result;
  int v5;
  int *v6;

  if (*(_BYTE *)(a1 + 52))
    return 1;
  v2 = *(_DWORD *)(a1 + 48);
  if (v2 == -1)
    fts_build_cold_1();
  v3 = getattrlistbulk(v2, (void *)(a1 + 8), *(void **)(a1 + 32), 0x8000uLL, 8uLL);
  *(_DWORD *)(a1 + 56) = v3;
  if (v3 != -1)
  {
    if (!v3)
      *(_BYTE *)(a1 + 52) = 1;
    *(_DWORD *)(a1 + 60) = 0;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
    return 1;
  }
  v5 = *__error();
  close_NOCANCEL();
  *(_DWORD *)(a1 + 48) = -1;
  v6 = __error();
  result = 0;
  *v6 = v5;
  return result;
}

uint64_t fts_safe_changedir(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  uint64_t v7;
  int v8;
  int v10;
  int v11;
  int v12;
  __int16 v13;
  stat v14;
  stat v15;

  if ((*(_BYTE *)(a1 + 64) & 4) != 0)
    return 0;
  v6 = a3;
  if (a3 < 0)
  {
    v6 = open_NOCANCEL();
    if (v6 < 0)
      return 0xFFFFFFFFLL;
  }
  memset(&v15, 0, sizeof(v15));
  if (fstat(v6, &v15))
    goto LABEL_5;
  if (a3 == -1)
  {
    if (_platform_strcmp() || (*(_WORD *)(a2 + 90) & 8) == 0)
      goto LABEL_23;
    close_NOCANCEL();
    v6 = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 60) = -1;
    v13 = *(_WORD *)(a2 + 90) & 0xFFF7;
    goto LABEL_22;
  }
  memset(&v14, 0, sizeof(v14));
  v10 = open_NOCANCEL();
  if ((v10 & 0x80000000) == 0)
  {
    v11 = v10;
    if (fstat(v10, &v14))
    {
      v12 = *__error();
      close_NOCANCEL();
      *__error() = v12;
      goto LABEL_5;
    }
    if (v15.st_dev == v14.st_dev)
    {
      close_NOCANCEL();
LABEL_23:
      v7 = fts_fchdir(a1, v6);
      goto LABEL_6;
    }
    *(_DWORD *)(a2 + 60) = v11;
    v13 = *(_WORD *)(a2 + 90) | 8;
LABEL_22:
    *(_WORD *)(a2 + 90) = v13;
    goto LABEL_23;
  }
LABEL_5:
  v7 = 0xFFFFFFFFLL;
LABEL_6:
  v8 = *__error();
  if (a3 < 0)
    close_NOCANCEL();
  *__error() = v8;
  return v7;
}

void close_directory(uint64_t a1)
{
  DIR *v2;

  v2 = *(DIR **)a1;
  if (v2)
  {
    closedir(v2);
    *(_QWORD *)a1 = 0;
  }
  if (*(_DWORD *)(a1 + 48) != -1)
  {
    close_NOCANCEL();
    *(_DWORD *)(a1 + 48) = -1;
  }
  free(*(void **)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
}

uint64_t sig_keycreate()
{
  uint64_t result;

  result = pthread_key_create((pthread_key_t *)&sig_key, (void (__cdecl *)(void *))MEMORY[0x1E0C88920]);
  sig_keycreated = result == 0;
  return result;
}

pid_t waitpid(pid_t a1, int *a2, int a3)
{
  if ((a3 & 0xFFFFFFEC) == 0)
    return __wait4();
  *__error() = 22;
  return -1;
}

tm *__cdecl gmtime(const time_t *a1)
{
  int v2;
  pthread_key_t v4;
  void *v5;
  void *v6;
  pthread_key_t v7;

  pthread_once(&gmtime_once, (void (*)(void))gmtime_key_init);
  v2 = gmtime_key_error;
  if (gmtime_key_error)
  {
    *__error() = v2;
    return 0;
  }
  if (gmtime_key)
    v4 = 13;
  else
    v4 = 0;
  v5 = pthread_getspecific(v4);
  if (!v5)
  {
    v6 = malloc_type_malloc(0x38uLL, 0x10100404E507D7FuLL);
    if (!v6)
      return 0;
    v5 = v6;
    if (gmtime_key)
      v7 = 13;
    else
      v7 = 0;
    pthread_setspecific(v7, v5);
  }
  return (tm *)gmtsub((uint64_t *)a1, 0, (uint64_t)v5);
}

double drand48(void)
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  _rand48_seed = _rand48_add + _rand48_mult * _rand48_seed;
  v0 = _rand48_seed & 0xFFFFFFFFFFFFLL;
  if ((_rand48_seed & 0xFFFFFFFFFFFFLL) == 0)
    return 0.0;
  v1 = 32 * v0;
  v2 = v0 >> 47;
  v3 = __clz(v1 & 0xFFFFFFFFFFFE0);
  v4 = v1 << (v3 - 11);
  v5 = 0x4090000000000000 - (v3 << 52);
  v6 = v2 == 0;
  if (v2)
    v7 = v1;
  else
    v7 = v4;
  if (v6)
    v8 = v5;
  else
    v8 = 0x3FE0000000000000;
  *(_QWORD *)&result = v8 | v7 & 0x800FFFFFFFFFFFE0;
  return result;
}

int fts_set(FTS *a1, FTSENT *a2, int a3)
{
  int result;

  if (a3 < 5)
  {
    result = 0;
    a2->fts_instr = a3;
  }
  else
  {
    *__error() = 22;
    return 1;
  }
  return result;
}

uint64_t (*backtrace_set_pcs_func(uint64_t (*result)(uint64_t a1, int a2, unsigned int *a3, int a4, uintptr_t a5)))(uint64_t a1, int a2, unsigned int *a3, int a4, uintptr_t a5)
{
  uint64_t (*v1)(uint64_t, int, unsigned int *, int, uintptr_t);

  v1 = _thread_stack_pcs;
  if (result)
    v1 = result;
  backtrace_get_pcs_func = v1;
  return result;
}

int raise(int a1)
{
  _opaque_pthread_t *v2;
  int v3;
  int v4;
  pid_t v5;

  v2 = pthread_self();
  v3 = pthread_kill(v2, a1);
  v4 = v3;
  if (v3)
  {
    if (v3 == 45)
    {
      v5 = getpid();
      return kill(v5, a1);
    }
    *__error() = v3;
    return -1;
  }
  return v4;
}

uint64_t atoll(const char *a1)
{
  uint64_t v1;
  _xlocale *v2;
  _xlocale *v3;

  v1 = __locale_key;
  v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2)
    v3 = v2;
  else
    v3 = (_xlocale *)&__global_locale;
  return strtoll_l(a1, 0, 10, v3);
}

size_t rb_tree_count(size_t result)
{
  if (result)
    return *(_QWORD *)(result + 32);
  return result;
}

uint64_t strtoq(const char *__str, char **__endptr, int __base)
{
  uint64_t v3;
  _xlocale *v4;
  _xlocale *v5;

  v3 = __locale_key;
  v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__global_locale;
  return strtoll_l(__str, __endptr, __base, v5);
}

uint64_t __heapsort_r(_BYTE *a1, unint64_t a2, size_t size, uint64_t a4, uint64_t (*a5)(uint64_t, char *, char *))
{
  unint64_t v9;
  _BYTE *v11;
  char *v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  char *v21;
  int v22;
  size_t v23;
  char v24;
  _BYTE *i;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;
  unint64_t v34;
  _BYTE *v35;
  size_t v36;
  char v37;
  _BYTE *v38;
  int v39;
  size_t v40;
  char *v41;
  char v42;
  uint64_t v43;
  _BYTE *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t (*v47)(uint64_t, char *, char *);
  uint64_t v48;

  if (a2 < 2)
    return 0;
  if (!size)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  v9 = a2;
  v11 = malloc_type_malloc(size, 0xC8BE12E2uLL);
  if (!v11)
    return 0xFFFFFFFFLL;
  v12 = v11;
  v48 = a4;
  v44 = a1;
  v13 = &a1[-size];
  v14 = v9 >> 1;
  v46 = v9;
  do
  {
    v45 = v14;
    v15 = 2 * v14;
    if (2 * v14 <= v9)
    {
      v16 = v14;
      do
      {
        v17 = &v13[v15 * size];
        if (v15 >= v9)
        {
          v20 = v15;
          v18 = v48;
        }
        else
        {
          v18 = v48;
          v19 = a5(v48, &v13[v15 * size], &v17[size]);
          v20 = v15 | (v19 >> 31);
          if (v19 < 0)
            v17 += size;
        }
        v21 = &v13[v16 * size];
        v22 = a5(v18, v17, v21);
        v9 = v46;
        if (v22 < 1)
          break;
        v23 = size;
        do
        {
          v24 = *v21;
          *v21++ = *v17;
          *v17++ = v24;
          --v23;
        }
        while (v23);
        v15 = 2 * v20;
        v16 = v20;
      }
      while (2 * v20 <= v46);
    }
    v14 = v45 - 1;
  }
  while (v45 != 1);
  i = v44;
  v26 = &v44[size * (v9 - 1)];
  v47 = a5;
  do
  {
    v27 = 0;
    do
    {
      v12[v27] = v26[v27];
      ++v27;
    }
    while (size != v27);
    v28 = 0;
    do
    {
      v26[v28] = i[v28];
      ++v28;
    }
    while (size != v28);
    --v9;
    v29 = i;
    if (v9 >= 2)
    {
      v30 = 2;
      v31 = 1;
      do
      {
        v32 = &v13[v30 * size];
        if (v30 >= v9)
        {
          v34 = v30;
        }
        else
        {
          v33 = v47(v48, &v13[v30 * size], &v32[size]);
          v34 = v30 | (v33 >> 31);
          if (v33 < 0)
            v32 += size;
        }
        v35 = &v13[v31 * size];
        v36 = size;
        do
        {
          v37 = *v32++;
          *v35++ = v37;
          --v36;
        }
        while (v36);
        v30 = 2 * v34;
        v31 = v34;
      }
      while (2 * v34 <= v9);
      v29 = &v13[v34 * size];
      v38 = v29;
      for (i = v44; v34 != 1; v29 = &v13[v34 * size])
      {
        v29 = v38;
        v34 >>= 1;
        v38 = &v13[v34 * size];
        v39 = v47(v48, v12, v38);
        v40 = size;
        v41 = v38;
        if (v39 < 0)
          break;
        do
        {
          v42 = *v41++;
          *v29++ = v42;
          --v40;
        }
        while (v40);
      }
    }
    v43 = 0;
    do
    {
      v29[v43] = v12[v43];
      ++v43;
    }
    while (size != v43);
    v26 -= size;
  }
  while (v9 > 1);
  free(v12);
  return 0;
}

size_t confstr(int a1, char *a2, size_t a3)
{
  size_t result;
  uint64_t (*v6)(uint64_t, _BYTE *, uint64_t);
  uint64_t v7;
  void *v8;
  int v9;
  char *v10;
  int *v11;
  int v12;
  int v13;
  int *v14;
  _BYTE v15[1032];
  size_t v16;
  int v17[2];

  v16 = 0;
  if (a1 >= 0x10000)
  {
    if (a1 != 0x10000)
    {
      if (a1 == 65537)
      {
        MEMORY[0x1E0C86820](*(_QWORD *)&a1, a2);
        _platform_bzero();
        if (__dirhelper_func && __dirhelper_func(1, v15, 1024))
          goto LABEL_3;
        v9 = *__error();
        v10 = getenv("TMPDIR");
        if (v10)
        {
          if (!access(v10, 2))
            goto LABEL_3;
        }
        if (!access("/var/tmp/", 2))
          goto LABEL_3;
        v11 = __error();
        if (v9 != 12)
        {
LABEL_34:
          result = 0;
          v12 = 5;
          goto LABEL_35;
        }
        result = 0;
        v12 = 12;
      }
      else
      {
        if (a1 == 65538)
        {
          MEMORY[0x1E0C86820](*(_QWORD *)&a1, a2);
          _platform_bzero();
          v6 = (uint64_t (*)(uint64_t, _BYTE *, uint64_t))__dirhelper_func;
          if (__dirhelper_func)
          {
            v7 = 2;
            goto LABEL_22;
          }
          goto LABEL_23;
        }
LABEL_32:
        v11 = __error();
        result = 0;
        v12 = 22;
      }
LABEL_35:
      *v11 = v12;
      return result;
    }
    MEMORY[0x1E0C86820](*(_QWORD *)&a1, a2);
    _platform_bzero();
    v6 = (uint64_t (*)(uint64_t, _BYTE *, uint64_t))__dirhelper_func;
    if (__dirhelper_func)
    {
      v7 = 0;
LABEL_22:
      if (!v6(v7, v15, 1024))
        goto LABEL_23;
LABEL_3:
      if (a2 && a3)
        _platform_strlcpy();
      return _platform_strlen() + 1;
    }
LABEL_23:
    if (*__error() == 12)
      return 0;
    v11 = __error();
    goto LABEL_34;
  }
  switch(a1)
  {
    case 1:
      *(_QWORD *)v17 = 0x100000008;
      if (sysctl(v17, 2u, 0, &v16, 0, 0) == -1)
        return 0;
      if (!a2 || !a3)
        goto LABEL_19;
      result = (size_t)malloc_type_malloc(v16, 0x63E3F025uLL);
      if (result)
      {
        v8 = (void *)result;
        if (sysctl(v17, 2u, (void *)result, &v16, 0, 0) == -1)
        {
          v13 = *__error();
          free(v8);
          v14 = __error();
          result = 0;
          *v14 = v13;
        }
        else
        {
          _platform_strncpy();
          a2[a3 - 1] = 0;
          free(v8);
LABEL_19:
          result = v16;
        }
      }
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
      goto LABEL_3;
    default:
      goto LABEL_32;
  }
  return result;
}

void srand48(uint64_t a1)
{
  _rand48_seed = ((unint64_t)a1 << 16) | 0x330E;
  _rand48_mult = 0x5DEECE66DLL;
  _rand48_add = 11;
}

int regnexec(const regex_t *a1, const char *a2, size_t a3, size_t a4, regmatch_t __pmatch[], int a6)
{
  re_guts *re_g;
  int v10;

  if (a1->re_magic != 62053)
    return 2;
  re_g = a1->re_g;
  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)re_g + 7) + 1328) + 64) == 1)
    v10 = 1;
  else
    v10 = 2;
  return tre_match((unsigned int *)re_g, (uint64_t)a2, a3, v10, a4, &__pmatch->rm_so, a6);
}

void gdtoa_freelist_free(_QWORD **a1)
{
  int v2;
  _QWORD **v3;
  _QWORD *v4;
  _QWORD *v5;

  if (a1)
  {
    v2 = 0;
    v3 = a1;
    do
    {
      v4 = *v3;
      if (*v3)
      {
        do
        {
          v5 = (_QWORD *)*v4;
          free(v4);
          v4 = v5;
        }
        while (v5);
      }
      ++v3;
      ++v2;
    }
    while (v2 != 10);
    free(a1);
  }
}

ldiv_t ldiv(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  ldiv_t result;

  v2 = a1 / a2;
  v3 = (a1 >= 0) & (a1 % a2 < 0);
  if (a1 >= 0 && a1 % a2 < 0)
    v4 = a2;
  else
    v4 = 0;
  v5 = a1 % a2 - v4;
  v6 = v2 + v3;
  result.rem = v5;
  result.quot = v6;
  return result;
}

uint64_t localtime_key_init()
{
  uint64_t result;

  localtime_key = 1;
  result = pthread_key_init_np();
  localtime_key_error = result;
  return result;
}

char *__cdecl setlocale(int a1, const char *a2)
{
  int *v2;
  char *result;
  const char *v4;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  int v9;
  __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  __int16 *v21;
  uint64_t v23;
  char v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  char *v28;
  char *i;
  unsigned int v30;
  unsigned int v31;
  void (*v32)(unsigned int *);
  int v33;
  int v34;
  char *v35;
  __int16 *v36;
  unsigned int v37;
  unsigned int v38;
  void (*v39)(unsigned int *);

  if (a1 >= 7)
  {
    v2 = __error();
    result = 0;
    *v2 = 22;
    return result;
  }
  v4 = a2;
  if (a2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1ECCE7828);
    v6 = 0x20u;
    do
    {
      _platform_strcpy();
      v6 += 32;
    }
    while (v6 != 224);
    if (*v4)
    {
      if (!a1)
      {
        v7 = _platform_strchr();
        if (v7)
        {
          v8 = (const char *)(v7 - 1);
          do
            v9 = *((unsigned __int8 *)v8++ + 2);
          while (v9 == 47);
          if (v9)
          {
            v10 = &word_1ECCE7A20;
            v11 = 1;
            v12 = 5;
            while (1)
            {
              v13 = v11;
              if ((int)v8 - (int)v4 >= 32)
                break;
              v14 = v10;
              v15 = v12;
              _platform_strlcpy();
              v4 = v8 - 1;
              do
              {
                v17 = *(unsigned __int8 *)++v4;
                v16 = v17;
              }
              while (v17 == 47);
              v11 = v13 + 1;
              v18 = v16;
              v8 = v4;
              if (v16)
              {
                do
                {
                  if (v18 == 47)
                    break;
                  v19 = *(unsigned __int8 *)++v8;
                  v18 = v19;
                }
                while (v19);
              }
              if (v16)
              {
                v10 = v14 + 16;
                v12 = v15 - 1;
                if (v13 != 6)
                  continue;
              }
              if (v13 <= 5)
              {
                do
                {
                  _platform_strcpy();
                  --v15;
                }
                while (v15);
              }
              goto LABEL_40;
            }
          }
        }
        else if ((unint64_t)_platform_strlen() <= 0x1F)
        {
          v23 = 0x20u;
          do
          {
            _platform_strcpy();
            v23 += 32;
          }
          while (v23 != 224);
LABEL_40:
          v24 = byte_1ECCE783E;
          v25 = (unsigned int *)off_1ECCE7870;
          if (off_1ECCE7870)
          {
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 + 1, v25));
          }
          v27 = 0;
          v28 = (char *)&unk_1EDF52E08;
          for (i = (char *)&unk_1ECCE7930; ; i += 32)
          {
            _platform_strcpy();
            if (!loadlocale((int)v27 + 1))
              break;
            ++v27;
            v28 += 32;
            if (v27 == 6)
            {
              if (v25)
              {
                do
                {
                  v30 = __ldaxr(v25);
                  v31 = v30 - 1;
                }
                while (__stlxr(v31, v25));
                if (!v31)
                {
                  v32 = (void (*)(unsigned int *))*((_QWORD *)v25 + 1);
                  if (v32)
                    v32(v25);
                }
              }
              os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ECCE7828);
              return (char *)currentlocale();
            }
          }
          v33 = *__error();
          if ((v27 + 1) >= 2)
          {
            v34 = 1;
            v35 = (char *)&unk_1ECCE7930;
            v36 = &word_1ECCE7A20;
            do
            {
              _platform_strcpy();
              if (!loadlocale(v34))
              {
                *v36 = 67;
                loadlocale(v34);
              }
              ++v34;
              v35 += 32;
              v36 += 16;
              --v27;
            }
            while (v27);
          }
          byte_1ECCE783E = v24;
          off_1ECCE7870 = v25;
          if (v25)
          {
            do
            {
              v37 = __ldaxr(v25);
              v38 = v37 - 1;
            }
            while (__stlxr(v38, v25));
            if (!v38)
            {
              v39 = (void (*)(unsigned int *))*((_QWORD *)v25 + 1);
              if (v39)
                v39(v25);
            }
          }
          *__error() = v33;
          goto LABEL_30;
        }
LABEL_29:
        *__error() = 22;
LABEL_30:
        os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ECCE7828);
        return 0;
      }
    }
    else
    {
      if (!a1)
      {
        v20 = -6;
        v21 = &word_1ECCE7A20;
        while (1)
        {
          __get_locale_env(v20 + 7);
          if ((unint64_t)_platform_strlen() >= 0x20)
            goto LABEL_29;
          _platform_strcpy();
          v21 += 16;
          if (__CFADD__(v20++, 1))
            goto LABEL_40;
        }
      }
      __get_locale_env(a1);
    }
    if ((unint64_t)_platform_strlen() >= 0x20)
      goto LABEL_29;
    _platform_strcpy();
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ECCE7828);
    return loadlocale(a1);
  }
  else if (a1)
  {
    return &current_categories[32 * a1];
  }
  else
  {
    return (char *)currentlocale();
  }
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  stat v4;

  memset(&v4, 0, sizeof(v4));
  if (lstat((const char *)__p, &v4) < 0)
    return -1;
  if ((v4.st_mode & 0xF000) == 0x4000)
    return rmdir((const char *)__p);
  return unlink((const char *)__p);
}

void exit(int a1)
{
  _tlv_exit();
  __cxa_finalize(0);
  if (__cleanup)
    _cleanup();
  __exit();
}

uint64_t __cxa_finalize_ranges(uint64_t a1, unsigned int a2)
{
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;

  pthread_mutex_lock(&atexit_mutex);
  for (i = __atexit; __atexit; i = __atexit)
  {
    while (1)
    {
      v5 = *(unsigned int *)(i + 8);
      if ((int)v5 >= 1)
        break;
LABEL_32:
      i = *(_QWORD *)i;
      if (!i)
        return pthread_mutex_unlock(&atexit_mutex);
    }
    while (1)
    {
      v6 = (v5 - 1);
      v7 = i + 32 * v6;
      v10 = *(_DWORD *)(v7 + 16);
      v8 = (_DWORD *)(v7 + 16);
      v9 = v10;
      if (v10)
      {
        if (!a2)
          break;
        switch(v9)
        {
          case 1:
            v16 = 0;
            v17 = *(_QWORD *)(i + 32 * v6 + 24);
            v13 = 1;
            v18 = (_QWORD *)(a1 + 8);
            do
            {
              v19 = *(v18 - 1);
              if (v19 <= v17 && *v18 + v19 > v17)
                break;
              v13 = ++v16 < (unint64_t)a2;
              v18 += 2;
            }
            while (a2 != v16);
            break;
          case 3:
            v20 = 0;
            v21 = *(_QWORD *)(*(_QWORD *)(i + 32 * v6 + 24) + 16);
            v13 = 1;
            v22 = (_QWORD *)(a1 + 8);
            do
            {
              v23 = *(v22 - 1);
              if (v23 <= v21 && *v22 + v23 > v21)
                break;
              v13 = ++v20 < (unint64_t)a2;
              v22 += 2;
            }
            while (a2 != v20);
            break;
          case 2:
            v11 = 0;
            v12 = *(_QWORD *)(i + 32 * v6 + 40);
            v13 = 1;
            v14 = (_QWORD *)(a1 + 8);
            do
            {
              v15 = *(v14 - 1);
              if (v15 <= v12 && *v14 + v15 > v12)
                break;
              v13 = ++v11 < (unint64_t)a2;
              v14 += 2;
            }
            while (a2 != v11);
            break;
          default:
            goto LABEL_23;
        }
        if (v13)
          break;
      }
LABEL_30:
      if (v5-- <= 1)
        goto LABEL_32;
    }
LABEL_23:
    *v8 = 0;
    __atexit_new_registration = 0;
    v24 = pthread_mutex_unlock(&atexit_mutex);
    switch(v9)
    {
      case 1:
        (*(void (**)(uint64_t))(i + 32 * v6 + 24))(v24);
        break;
      case 3:
        (*(void (**)(void))(*(_QWORD *)(i + 32 * v6 + 24) + 16))();
        break;
      case 2:
        (*(void (**)(_QWORD))(i + 32 * v6 + 24))(*(_QWORD *)(i + 32 * v6 + 32));
        break;
    }
    pthread_mutex_lock(&atexit_mutex);
    if ((__atexit_new_registration & 1) == 0)
      goto LABEL_30;
  }
  return pthread_mutex_unlock(&atexit_mutex);
}

int __cxa_finalize(void *a1)
{
  _QWORD v2[2];

  if (!a1)
    return __cxa_finalize_ranges(0, 0);
  v2[0] = a1;
  v2[1] = 1;
  return __cxa_finalize_ranges((uint64_t)v2, 1u);
}

char *__private_getcwd(char *a1, uint64_t a2, int a3)
{
  int *v4;
  char *v5;
  int v6;
  char *v7;
  char *v8;
  size_t v9;
  char *v10;
  DIR *v11;
  int v12;
  dev_t st_dev;
  __darwin_ino64_t st_ino;
  char v16;
  int v17;
  __darwin_ino64_t v18;
  dev_t v19;
  int v21;
  int v22;
  int v24;
  DIR *v25;
  int v26;
  dev_t v27;
  dirent *v28;
  dirent *v29;
  int v30;
  int v31;
  int v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t d_namlen;
  uint64_t i;
  char *v38;
  int64_t v39;
  int v40;
  __darwin_ino64_t v41;
  dev_t v42;
  char v43;
  stat v44;

  memset(&v44, 0, sizeof(v44));
  if (a1)
  {
    if (a2 == 1)
    {
      v4 = __error();
      v5 = 0;
      v6 = 34;
      goto LABEL_9;
    }
    if (!a2)
    {
      v4 = __error();
      v5 = 0;
      v6 = 22;
LABEL_9:
      *v4 = v6;
      return v5;
    }
    v5 = a1;
    v9 = 0;
    v8 = &a1[a2];
    if (!a3)
    {
LABEL_14:
      *(v8 - 1) = 0;
      v10 = v8 - 1;
      if (stat("/", &v44))
      {
LABEL_15:
        v11 = 0;
        goto LABEL_16;
      }
      st_dev = v44.st_dev;
      st_ino = v44.st_ino;
      v11 = 0;
      v16 = 0;
      *__error() = 0;
      v42 = st_dev;
      v41 = st_ino;
LABEL_23:
      v43 = v16;
      if (v11)
      {
        v17 = dirfd(v11);
        if (fstat(v17, &v44))
          goto LABEL_16;
        v18 = v44.st_ino;
        v19 = v44.st_dev;
        if (st_dev == v44.st_dev && st_ino == v44.st_ino)
        {
          *(v10 - 1) = 47;
          _platform_memmove();
          closedir(v11);
          return v5;
        }
        dirfd(v11);
        v21 = openat_NOCANCEL();
        if (v21 == -1)
          goto LABEL_16;
        v22 = v21;
        closedir(v11);
      }
      else
      {
        if (lstat(".", &v44))
          goto LABEL_15;
        v18 = v44.st_ino;
        v19 = v44.st_dev;
        if (st_dev == v44.st_dev && st_ino == v44.st_ino)
        {
          *(v10 - 1) = 47;
          _platform_memmove();
          return v5;
        }
        v24 = openat_NOCANCEL();
        if (v24 == -1)
          goto LABEL_15;
        v22 = v24;
      }
      v25 = fdopendir(v22);
      v11 = v25;
      if (!v25 || (v26 = dirfd(v25), fstat(v26, &v44)))
      {
        close_NOCANCEL();
      }
      else
      {
        v27 = v44.st_dev;
        v28 = readdir(v11);
        v29 = v28;
        if (v27 == v19)
        {
          if (v28)
          {
            v30 = 0;
            while (v29->d_ino != v18)
            {
              if ((v29->d_name[0] != 46 || v29->d_name[1] && (v29->d_name[1] != 46 || v29->d_name[2]))
                && v29->d_type == 4)
              {
                v31 = dirfd(v11);
                if (fstatat(v31, v29->d_name, &v44, 32))
                {
                  if (!v30)
                    v30 = *__error();
                  *__error() = 0;
                }
                else if (v44.st_dev == v19 && v44.st_ino == v18)
                {
                  break;
                }
              }
              v29 = readdir(v11);
              if (!v29)
                goto LABEL_88;
            }
LABEL_73:
            if ((v43 & 1) != 0)
              v34 = 2;
            else
              v34 = 1;
            v35 = v10 - v5;
            d_namlen = v29->d_namlen;
            for (i = v34 + d_namlen; ; i = v34 + d_namlen)
            {
              if (v35 >= i)
              {
                st_dev = v42;
                if ((v43 & 1) != 0)
                {
                  *--v10 = 47;
                  d_namlen = v29->d_namlen;
                }
                v10 -= d_namlen;
                _platform_memmove();
                v16 = 1;
                st_ino = v41;
                goto LABEL_23;
              }
              if (!v9)
                break;
              v9 *= 2;
              v38 = (char *)reallocf(v5, v9);
              v5 = v38;
              if (!v38)
                goto LABEL_16;
              v39 = v8 - v10;
              v8 = &v38[v9];
              v10 = &v38[v9 - v39];
              _platform_memmove();
              v35 = v10 - v5;
              d_namlen = v29->d_namlen;
            }
            *__error() = 34;
            v12 = *__error();
            if (v11)
              goto LABEL_19;
            goto LABEL_20;
          }
        }
        else if (v28)
        {
          v30 = 0;
          while (1)
          {
            if (v29->d_name[0] != 46 || v29->d_name[1] && (v29->d_name[1] != 46 || v29->d_name[2]))
            {
              v32 = dirfd(v11);
              if (fstatat(v32, v29->d_name, &v44, 32))
              {
                if (!v30)
                  v30 = *__error();
                *__error() = 0;
              }
              else if (v44.st_dev == v19 && v44.st_ino == v18)
              {
                goto LABEL_73;
              }
            }
            v29 = readdir(v11);
            if (!v29)
              goto LABEL_88;
          }
        }
        v30 = 0;
LABEL_88:
        if (!*__error())
        {
          if (v30)
            v40 = v30;
          else
            v40 = 2;
          *__error() = v40;
        }
      }
LABEL_16:
      v12 = *__error();
      if (v9)
        free(v5);
      if (v11)
LABEL_19:
        closedir(v11);
LABEL_20:
      v5 = 0;
      *__error() = v12;
      return v5;
    }
LABEL_11:
    if (!__getcwd(v5, v8 - v5))
      return v5;
    if (*__error() == 34)
      return 0;
    goto LABEL_14;
  }
  v7 = (char *)malloc_type_malloc(0x400uLL, 0xAA37A9FFuLL);
  v5 = v7;
  if (v7)
  {
    v8 = v7 + 1024;
    v9 = 1024;
    if (!a3)
      goto LABEL_14;
    goto LABEL_11;
  }
  return v5;
}

uint64_t __getcwd(const char *a1, unint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int *v12;
  int v13;
  uint64_t v15;
  stat v16;
  stat v17;

  v4 = open_NOCANCEL();
  if (v4 < 0)
    return 0xFFFFFFFFLL;
  memset(&v17, 0, sizeof(v17));
  memset(&v16, 0, sizeof(v16));
  v5 = fstat(v4, &v17);
  if ((v5 & 0x80000000) != 0)
  {
    v11 = *__error();
    close_NOCANCEL();
    *__error() = v11;
    return 0xFFFFFFFFLL;
  }
  if (!v17.st_dev || !v17.st_ino)
  {
    close_NOCANCEL();
    goto LABEL_11;
  }
  v7 = a1;
  if (a2 <= 0x3FF)
  {
    MEMORY[0x1E0C86820](v5, v6);
    v7 = (const char *)&v15;
    _platform_bzero();
  }
  v8 = fcntl_NOCANCEL();
  if (!(_DWORD)v8)
  {
    close_NOCANCEL();
    if (stat(v7, &v16) < 0)
      return 0xFFFFFFFFLL;
    if (v17.st_dev == v16.st_dev && v17.st_ino == v16.st_ino)
    {
      if (a2 > 0x3FF)
        return 0;
      if (_platform_strlen() < a2)
      {
        _platform_strcpy();
        return 0;
      }
      v12 = __error();
      v13 = 34;
      goto LABEL_12;
    }
LABEL_11:
    v12 = __error();
    v13 = 22;
LABEL_12:
    *v12 = v13;
    return 0xFFFFFFFFLL;
  }
  v9 = v8;
  v10 = *__error();
  close_NOCANCEL();
  *__error() = v10;
  return v9;
}

const char *__cdecl fmtcheck(const char *a1, const char *a2)
{
  const char *v3;
  int v4;
  int next_format;
  int v6;
  int v7;
  const char *v9;
  const char *v10;

  if (!a1)
    return a2;
  v3 = a1;
  v4 = 0;
  v9 = a2;
  v10 = a1;
  while (1)
  {
    next_format = get_next_format((unsigned __int8 **)&v10, v4);
    if (next_format == 23)
      break;
    v6 = next_format;
    if (next_format != 24)
    {
      v7 = get_next_format((unsigned __int8 **)&v9, v4);
      v4 = v6;
      if (v6 == v7)
        continue;
    }
    return a2;
  }
  return v3;
}

uint64_t get_next_format(unsigned __int8 **a1, int a2)
{
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  char v9;
  int v10;

  if (a2 == 22)
  {
    ++*a1;
    return get_next_format_from_precision(a1);
  }
  else
  {
    if (a2 == 21)
    {
      ++*a1;
      return get_next_format_from_width(a1);
    }
    do
    {
      v4 = _platform_strchr();
      if (!v4)
      {
        *a1 = 0;
        return 23;
      }
      v5 = *(unsigned __int8 *)(v4 + 1);
    }
    while (v5 == 37);
    if (*(_BYTE *)(v4 + 1))
    {
      v6 = (unsigned __int8 *)(v4 + 1);
      while (_platform_memchr())
      {
        v7 = *++v6;
        LOBYTE(v5) = v7;
        if (!v7)
          goto LABEL_18;
      }
      if (v5 == 42)
      {
        *a1 = v6;
        return 21;
      }
LABEL_18:
      v8 = v6 - 1;
      do
      {
        v10 = (char)*++v8;
        v9 = v10;
      }
      while ((v10 - 48) < 0xA);
      *a1 = v8;
      if (v9)
        return get_next_format_from_width(a1);
    }
    else
    {
      *a1 = (unsigned __int8 *)(v4 + 1);
    }
    return 24;
  }
}

uint64_t get_next_format_from_width(unsigned __int8 **a1)
{
  unsigned __int8 *v1;
  int v2;
  int v3;
  int v5;

  v1 = *a1;
  if (**a1 != 46)
    goto LABEL_7;
  v3 = (char)*++v1;
  v2 = v3;
  if (v3 == 42)
  {
    *a1 = v1;
    return 22;
  }
  if ((v2 - 48) <= 9)
  {
    do
    {
      v5 = (char)*++v1;
      LOBYTE(v2) = v5;
    }
    while ((v5 - 48) < 0xA);
  }
  if (!(_BYTE)v2)
  {
    *a1 = v1;
    return 24;
  }
  else
  {
LABEL_7:
    *a1 = v1;
    return get_next_format_from_precision(a1);
  }
}

uint64_t get_next_format_from_precision(unsigned __int8 **a1)
{
  int v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t result;
  BOOL v13;
  unsigned int v14;

  v2 = 0;
  v3 = *a1;
  v4 = *a1;
  v5 = (char)**a1;
  v6 = **a1;
  v7 = 1;
  if (v5 > 115)
  {
    if (v5 == 116)
    {
      v9 = 7;
    }
    else
    {
      if (v5 != 122)
        goto LABEL_16;
      v9 = 8;
    }
LABEL_14:
    v7 = 1;
LABEL_15:
    v4 = &v3[v7];
    v6 = v3[v7];
    v2 = v9;
    LODWORD(v7) = 0;
  }
  else
  {
    v8 = v5 - 104;
    v9 = 5;
    switch(v8)
    {
      case 0:
        v10 = *++v4;
        v6 = v10;
        v7 = 2;
        if (v10 == 104)
        {
          v9 = 1;
          goto LABEL_15;
        }
        if (!v6)
          goto LABEL_59;
        LODWORD(v7) = 0;
        v2 = 2;
        break;
      case 2:
        goto LABEL_15;
      case 4:
        v11 = *++v4;
        v6 = v11;
        if (v11 == 108)
        {
          v9 = 4;
          v7 = 2;
          goto LABEL_15;
        }
        if (!v6)
          goto LABEL_59;
        LODWORD(v7) = 0;
        v2 = 3;
        break;
      case 9:
        v9 = 4;
        goto LABEL_14;
      default:
        break;
    }
  }
LABEL_16:
  if (!v6)
    goto LABEL_59;
  if (_platform_memchr())
  {
    switch(v2)
    {
      case 0:
      case 1:
      case 2:
        goto LABEL_19;
      case 3:
        *a1 = v4;
        result = 4;
        break;
      case 4:
        *a1 = v4;
        result = 5;
        break;
      case 5:
        *a1 = v4;
        result = 6;
        break;
      case 7:
        *a1 = v4;
        result = 7;
        break;
      case 8:
        *a1 = v4;
        result = 8;
        break;
      default:
        goto LABEL_59;
    }
    return result;
  }
  if (v6 != 110)
  {
    if (_platform_memchr())
    {
      *a1 = v4;
      if ((_DWORD)v7)
        return 4;
      else
        return 24;
    }
    if (_platform_memchr())
    {
      if (!v2 || v2 == 3)
      {
        *a1 = v4;
        return 17;
      }
      goto LABEL_59;
    }
    if (v6 > 98)
    {
      if (v6 == 115)
      {
        if (!v2)
        {
          *a1 = v4;
          return 19;
        }
        if (v2 == 3)
        {
          *a1 = v4;
          return 20;
        }
        goto LABEL_59;
      }
      if (v6 != 112)
      {
        if (v6 == 99)
        {
          if (!v2)
          {
LABEL_19:
            *a1 = v4;
            return 2;
          }
          if (v2 == 3)
          {
            *a1 = v4;
            return 3;
          }
        }
        goto LABEL_59;
      }
      *a1 = v4;
      v13 = (_DWORD)v7 == 0;
      v14 = 4;
LABEL_63:
      if (v13)
        return 24;
      else
        return v14;
    }
    if (v6 == 67)
    {
      *a1 = v4;
      v13 = (_DWORD)v7 == 0;
      v14 = 3;
      goto LABEL_63;
    }
    if (v6 == 83)
    {
      *a1 = v4;
      v13 = (_DWORD)v7 == 0;
      v14 = 20;
      goto LABEL_63;
    }
LABEL_59:
    *a1 = v4;
    return 24;
  }
  switch(v2)
  {
    case 0:
      *a1 = v4;
      result = 11;
      break;
    case 1:
      *a1 = v4;
      result = 9;
      break;
    case 2:
      *a1 = v4;
      result = 10;
      break;
    case 3:
      *a1 = v4;
      result = 12;
      break;
    case 4:
      *a1 = v4;
      result = 13;
      break;
    case 5:
      *a1 = v4;
      result = 14;
      break;
    case 7:
      *a1 = v4;
      result = 15;
      break;
    case 8:
      *a1 = v4;
      result = 16;
      break;
    default:
      goto LABEL_59;
  }
  return result;
}

char *__cdecl strsignal(int __sig)
{
  BOOL v2;
  void *v3;
  int v4;
  void *v5;

  if (pthread_once(&sig_init_once, (void (*)(void))sig_keycreate))
    v2 = 1;
  else
    v2 = sig_keycreated == 0;
  if (v2)
    goto LABEL_6;
  v5 = pthread_getspecific(sig_key);
  v3 = v5;
  if (!v5)
  {
    v3 = malloc_type_malloc(0x800uLL, 0x100004077774924uLL);
    if (!v3)
      goto LABEL_7;
    if (!pthread_setspecific(sig_key, v3))
      goto LABEL_9;
    free(v3);
LABEL_6:
    v3 = 0;
LABEL_7:
    v4 = 12;
LABEL_11:
    *__error() = v4;
    return (char *)v3;
  }
LABEL_9:
  if (strsignal_r(__sig, (char *)v3, 0x800uLL))
  {
    v4 = 22;
    goto LABEL_11;
  }
  return (char *)v3;
}

int strsignal_r(int __sig, char *__strsignalbuf, size_t __buflen)
{
  unsigned int v6;
  uint64_t *v7;
  BOOL v8;
  int v9;
  unint64_t v10;
  size_t v11;
  int result;
  char *v13;
  _BYTE *v14;
  char v15;
  uint64_t v16;
  _QWORD v17[2];

  v16 = 0;
  v17[0] = 0;
  *(_QWORD *)((char *)v17 + 7) = 0;
  if (__sig >= 0)
    v6 = __sig;
  else
    v6 = -__sig;
  v7 = &v16;
  do
  {
    *(_BYTE *)v7 = a0123456789[v6 % 0xA];
    v7 = (uint64_t *)((char *)v7 + 1);
    v8 = v6 > 9;
    v6 /= 0xAu;
  }
  while (v8);
  if (__sig < 0)
  {
    *(_BYTE *)v7 = 45;
    v7 = (uint64_t *)((char *)v7 + 1);
  }
  v9 = _platform_strlen() + 2;
  if ((__sig - 1) > 0x1E)
  {
    v10 = _platform_strlcpy();
    v11 = __buflen - v9;
    result = 22;
  }
  else
  {
    v10 = _platform_strlcpy();
    v11 = __buflen - v9;
    if (v10 >= v11)
      result = 34;
    else
      result = 0;
  }
  if (v10 < v11)
  {
    v13 = &__strsignalbuf[v10];
    *(_WORD *)v13 = 8250;
    v14 = v13 + 2;
    do
    {
      v15 = *((_BYTE *)v7 - 1);
      v7 = (uint64_t *)((char *)v7 - 1);
      *v14++ = v15;
    }
    while (v7 > &v16);
    *v14 = 0;
  }
  return result;
}

int getopt_long_only(int a1, char *const *a2, const char *a3, const option *a4, int *a5)
{
  return getopt_internal(*(uint64_t *)&a1, (uint64_t)a2, (unsigned __int8 *)a3, a4, a5, 5u);
}

uint64_t _signal_nobind(int a1, __sigaction_u a2)
{
  return signal__(a1, a2, 0);
}

int vprintf(const char *a1, va_list a2)
{
  FILE *v4;
  uint64_t v5;
  _xlocale *v6;
  _xlocale *v7;

  v4 = __stdoutp;
  v5 = __locale_key;
  v6 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6)
    v7 = v6;
  else
    v7 = (_xlocale *)&__global_locale;
  return vfprintf_l(v4, v7, a1, a2);
}

int freelocale(locale_t a1)
{
  BOOL v1;
  BOOL v3;
  unsigned int v4;
  void (*v5)(void);

  if (a1 == (locale_t)-1)
  {
    v1 = 0;
  }
  else
  {
    if (!a1)
    {
LABEL_18:
      *__error() = 22;
      return -1;
    }
    v1 = *((_QWORD *)a1 + 163) != 0x786C6F63616C6530;
  }
  v3 = a1 == (locale_t)&__c_locale || (locale_t)((char *)a1 + 1) == 0 || a1 == (locale_t)&__global_locale;
  if (v3 || v1)
    goto LABEL_18;
  do
    v4 = __ldaxr((unsigned int *)a1);
  while (__stlxr(v4 - 1, (unsigned int *)a1));
  if (v4 == 1)
  {
    v5 = (void (*)(void))*((_QWORD *)a1 + 1);
    if (v5)
      v5();
  }
  return 0;
}

int sigaltstack(const stack_t *a1, stack_t *a2)
{
  if (!a1 || a1->ss_size >> 15)
    return __sigaltstack();
  *__error() = 12;
  return -1;
}

int setlogin(const char *a1)
{
  int v1;

  pthread_mutex_lock(&__logname_mutex);
  v1 = __setlogin();
  if (!v1 && __logname)
    *(_BYTE *)__logname = 0;
  pthread_mutex_unlock(&__logname_mutex);
  return v1;
}

locale_t newlocale(int a1, const char *a2, locale_t a3)
{
  char v5;
  int v6;
  _xlocale *v7;
  BOOL v8;
  BOOL v9;
  const char *v10;
  int v11;
  char *locale_env;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  void (*v27)(void);
  int v28;

  v5 = a1;
  if (a2
    && ((unint64_t)_platform_strlen() > 0x1F
     || *a2 == 46 && (!a2[1] || a2[1] == 46 && !a2[2])
     || _platform_strchr()))
  {
    goto LABEL_27;
  }
  v6 = v5 & 0x3F;
  if (v6 != 63)
  {
    if ((unint64_t)a3 + 1 < 2 || *((_QWORD *)a3 + 163) == 0x786C6F63616C6530)
      goto LABEL_11;
LABEL_27:
    v7 = 0;
    *__error() = 22;
    return v7;
  }
  a3 = (locale_t)&__c_locale;
LABEL_11:
  v7 = (_xlocale *)_duplocale((char *)a3);
  if (!v7)
    return v7;
  v8 = v6 == 63 && a2 == 0;
  v9 = v8;
  if ((v5 & 0x3F) == 0 || v9)
    return v7;
  if (a2)
    v10 = a2;
  else
    v10 = (const char *)&C;
  v11 = __detect_path_locale();
  if (v11)
  {
LABEL_24:
    *__error() = v11;
LABEL_25:
    freelocale(v7);
    return 0;
  }
  if (*v10)
    locale_env = (char *)v10;
  else
    locale_env = 0;
  v14 = 1;
  while (2)
  {
    if ((v14 & v6) == 0)
      goto LABEL_99;
    switch(v14)
    {
      case 1:
        if (!*v10)
        {
          locale_env = __get_locale_env(1);
          if (locale_env)
          {
            if ((unint64_t)_platform_strlen() > 0x1F)
              goto LABEL_121;
            if (*locale_env == 46)
            {
              v15 = locale_env[1];
              if (v15 == 46)
                v15 = locale_env[2];
              if (!v15)
                goto LABEL_121;
            }
            if (_platform_strchr())
              goto LABEL_121;
          }
        }
        if (!_platform_strcmp())
          goto LABEL_98;
        if (__collate_load_tables((int)locale_env, (uint64_t)v7) == -1)
          goto LABEL_25;
        if (*((_QWORD *)v7 + 165))
LABEL_98:
          _platform_strlcpy();
        goto LABEL_99;
      case 2:
        if (!*v10)
        {
          locale_env = __get_locale_env(2);
          if (locale_env)
          {
            if ((unint64_t)_platform_strlen() > 0x1F)
              goto LABEL_121;
            if (*locale_env == 46)
            {
              v16 = locale_env[1];
              if (v16 == 46)
                v16 = locale_env[2];
              if (!v16)
                goto LABEL_121;
            }
            if (_platform_strchr())
              goto LABEL_121;
          }
        }
        if (!_platform_strcmp())
          goto LABEL_99;
        v17 = __setrunelocale((uint64_t)locale_env, (uint64_t)v7);
        if (v17)
        {
          v11 = v17;
          goto LABEL_24;
        }
        if (*((_QWORD *)v7 + 166))
          _platform_strlcpy();
        if (*((_BYTE *)v7 + 1318) == 1)
          *((_BYTE *)v7 + 1318) = 0;
        goto LABEL_99;
      case 3:
      case 5:
      case 6:
      case 7:
        goto LABEL_99;
      case 4:
        if (!*v10)
        {
          locale_env = __get_locale_env(6);
          if (locale_env)
          {
            if ((unint64_t)_platform_strlen() > 0x1F)
              goto LABEL_121;
            if (*locale_env == 46)
            {
              v18 = locale_env[1];
              if (v18 == 46)
                v18 = locale_env[2];
              if (!v18)
                goto LABEL_121;
            }
            if (_platform_strchr())
              goto LABEL_121;
          }
        }
        v21 = _platform_strcmp();
        if (v21 && __messages_load_locale((uint64_t)locale_env, (uint64_t)v7) == -1)
          goto LABEL_25;
        if (!*((_QWORD *)v7 + 170))
          goto LABEL_99;
        goto LABEL_98;
      case 8:
        if (!*v10)
        {
          locale_env = __get_locale_env(3);
          if (locale_env)
          {
            if ((unint64_t)_platform_strlen() > 0x1F)
              goto LABEL_121;
            if (*locale_env == 46)
            {
              v19 = locale_env[1];
              if (v19 == 46)
                v19 = locale_env[2];
              if (!v19)
                goto LABEL_121;
            }
            if (_platform_strchr())
              goto LABEL_121;
          }
        }
        v22 = _platform_strcmp();
        if (v22 && __monetary_load_locale((uint64_t)locale_env, (uint64_t)v7) == -1)
          goto LABEL_25;
        if (*((_QWORD *)v7 + 167))
          goto LABEL_98;
        goto LABEL_99;
      default:
        if (v14 == 16)
        {
          if (!*v10)
          {
            locale_env = __get_locale_env(4);
            if (locale_env)
            {
              if ((unint64_t)_platform_strlen() > 0x1F)
                goto LABEL_121;
              if (*locale_env == 46)
              {
                v20 = locale_env[1];
                if (v20 == 46)
                  v20 = locale_env[2];
                if (!v20)
                  goto LABEL_121;
              }
              if (_platform_strchr())
                goto LABEL_121;
            }
          }
          if (_platform_strcmp())
          {
            if (__numeric_load_locale((uint64_t)locale_env, (uint64_t)v7) == -1)
              goto LABEL_25;
            if (*((_QWORD *)v7 + 168))
              _platform_strlcpy();
            *((_BYTE *)v7 + 1318) = 0;
            v24 = *((_QWORD *)v7 + 171);
            if (v24)
            {
              do
              {
                v25 = __ldaxr((unsigned int *)v24);
                v26 = v25 - 1;
              }
              while (__stlxr(v26, (unsigned int *)v24));
              if (!v26)
              {
                v27 = *(void (**)(void))(v24 + 8);
                if (v27)
                  v27();
              }
            }
            *((_QWORD *)v7 + 171) = 0;
          }
LABEL_99:
          v14 *= 2;
          if (v14 >= 33)
            return v7;
          continue;
        }
        if (v14 != 32)
          goto LABEL_99;
        if (!*v10)
        {
          locale_env = __get_locale_env(5);
          if (locale_env)
          {
            if ((unint64_t)_platform_strlen() > 0x1F
              || *locale_env == 46 && (!locale_env[1] || locale_env[1] == 46 && !locale_env[2])
              || _platform_strchr())
            {
LABEL_121:
              v11 = 22;
              goto LABEL_24;
            }
          }
        }
        v28 = _platform_strcmp();
        if (v28 && __time_load_locale((uint64_t)locale_env, (uint64_t)v7) == -1)
          goto LABEL_25;
        if (*((_QWORD *)v7 + 169))
          _platform_strlcpy();
        return v7;
    }
  }
}

_QWORD *_duplocale(char *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t i;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;

  v2 = malloc_type_malloc(0x5C0uLL, 0x10B0040F94CF6B0uLL);
  v3 = v2;
  if (v2)
  {
    *(_DWORD *)v2 = 1;
    v2[1] = destruct_locale;
    *((_DWORD *)v2 + 324) = 0;
    if (a1 == (char *)-1)
    {
      a1 = (char *)&__global_locale;
    }
    else if (a1)
    {
      if (a1 == (char *)&__c_locale)
      {
        _platform_memmove();
        *(_DWORD *)v3 = 1;
        v3[1] = destruct_locale;
        *((_DWORD *)v3 + 324) = 0;
        return v3;
      }
    }
    else
    {
      v4 = __locale_key;
      v5 = *(char **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
      if (v5)
        a1 = v5;
      else
        a1 = (char *)&__global_locale;
    }
    os_unfair_lock_lock((os_unfair_lock_t)a1 + 324);
    v6 = *(_OWORD *)(a1 + 1304);
    v7 = *(_OWORD *)(a1 + 1336);
    *(_OWORD *)(v3 + 165) = *(_OWORD *)(a1 + 1320);
    *(_OWORD *)(v3 + 167) = v7;
    *(_OWORD *)(v3 + 163) = v6;
    v8 = *(_OWORD *)(a1 + 1352);
    v9 = *(_OWORD *)(a1 + 1368);
    v10 = *(_OWORD *)(a1 + 1400);
    *(_OWORD *)(v3 + 173) = *(_OWORD *)(a1 + 1384);
    *(_OWORD *)(v3 + 175) = v10;
    *(_OWORD *)(v3 + 169) = v8;
    *(_OWORD *)(v3 + 171) = v9;
    v11 = *(_OWORD *)(a1 + 1416);
    v12 = *(_OWORD *)(a1 + 1432);
    v13 = *(_OWORD *)(a1 + 1448);
    v3[183] = *((_QWORD *)a1 + 183);
    *(_OWORD *)(v3 + 179) = v12;
    *(_OWORD *)(v3 + 181) = v13;
    *(_OWORD *)(v3 + 177) = v11;
    os_unfair_lock_unlock((os_unfair_lock_t)a1 + 324);
    _platform_bzero();
    for (i = 0; i != 6; ++i)
    {
      v15 = (unsigned int *)v3[i + 165];
      if (v15)
      {
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
      }
    }
    v17 = (unsigned int *)v3[171];
    if (v17)
    {
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
    }
  }
  return v3;
}

uint64_t __detect_path_locale()
{
  uint64_t result;
  char *v1;
  const char *v2;

  if (_PathLocale)
    return 0;
  v1 = getenv("PATH_LOCALE");
  if (v1 && (v2 = v1, !issetugid()))
  {
    if ((unint64_t)(_platform_strlen() - 980) >= 0xFFFFFFFFFFFFFC00)
    {
      _PathLocale = (uint64_t)strdup(v2);
      if (_PathLocale)
        return 0;
      if (*__error())
        return *__error();
      else
        return 12;
    }
    else
    {
      return 63;
    }
  }
  else
  {
    result = 0;
    _PathLocale = (uint64_t)"/usr/share/locale";
  }
  return result;
}

int statvfs(const char *a1, statvfs *a2)
{
  int result;
  unint64_t f_bsize;
  fsfilcnt_t f_ffree;
  unint64_t v6;
  char f_flags;
  unint64_t v8;
  statfs v9;

  memset(&v9, 0, 512);
  result = statfs(a1, &v9);
  if (!result)
  {
    f_bsize = v9.f_bsize;
    a2->f_bsize = v9.f_iosize;
    a2->f_frsize = f_bsize;
    *(int32x4_t *)&a2->f_blocks = vuzp1q_s32(*(int32x4_t *)&v9.f_blocks, *(int32x4_t *)&v9.f_bavail);
    f_ffree = v9.f_ffree;
    v6 = v9.f_fsid.val[0];
    a2->f_ffree = v9.f_ffree;
    a2->f_favail = f_ffree;
    a2->f_namemax = 255;
    f_flags = v9.f_flags;
    v8 = v9.f_flags & 1;
    a2->f_fsid = v6;
    a2->f_flag = v8;
    if ((f_flags & 8) != 0)
      a2->f_flag = v8 | 2;
  }
  return result;
}

int glob(const char *a1, int a2, int (__cdecl *a3)(const char *, int), glob_t *a4)
{
  a4->gl_flags = a2 & 0x7FFFFEFF;
  a4->gl_errfunc = a3;
  return __glob((uint64_t)a1, (uint64_t)a4);
}

char *__cdecl strptime(const char *a1, const char *a2, tm *a3)
{
  uint64_t v3;
  _xlocale *v4;
  _xlocale *v5;

  v3 = __locale_key;
  v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__global_locale;
  return strptime_l(a1, a2, a3, v5);
}

void _locale_lock_fork_prepare()
{
  uint64_t v0;
  os_unfair_lock_s *v1;

  v0 = __locale_key;
  v1 = *(os_unfair_lock_s **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v0);
  if (!v1)
    v1 = (os_unfair_lock_s *)&__global_locale;
  os_unfair_lock_lock(v1 + 324);
}

void _locale_lock_fork_parent()
{
  uint64_t v0;
  os_unfair_lock_s *v1;

  v0 = __locale_key;
  v1 = *(os_unfair_lock_s **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v0);
  if (!v1)
    v1 = (os_unfair_lock_s *)&__global_locale;
  os_unfair_lock_unlock(v1 + 324);
}

int printf(const char *a1, ...)
{
  FILE *v2;
  uint64_t v3;
  _xlocale *v4;
  _xlocale *v5;
  va_list va;

  va_start(va, a1);
  v2 = __stdoutp;
  v3 = __locale_key;
  v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__global_locale;
  return vfprintf_l(v2, v5, a1, va);
}

uint64_t _os_debug_log_init(uint64_t a1)
{
  char v2;
  uint64_t result;
  char v5;
  int v6;
  int v7;
  const char *v8;
  pid_t v9;
  mach_timebase_info info;
  timeval v11;

  v2 = *(_BYTE *)(a1 + 20);
  *(_BYTE *)(a1 + 20) = v2 & 0xFD;
  if ((unint64_t)_os_debug_log_redirect_func < (unint64_t)__toupper
    || (unint64_t)_Block_copy <= (unint64_t)_os_debug_log_redirect_func)
  {
    *(_QWORD *)(a1 + 8) = _os_debug_log_redirect_func;
  }
  if (getenv("LIBDISPATCH_LOG") || getenv("OS_DEBUG_LOG"))
    _platform_strcmp();
  result = _platform_strcmp();
  if (!(_DWORD)result)
  {
    *(_DWORD *)(a1 + 16) = -1;
    v5 = v2 | 2;
    goto LABEL_16;
  }
  result = _platform_strcmp();
  if (!(_DWORD)result)
  {
    *(_DWORD *)(a1 + 16) = -1;
    return result;
  }
  result = _platform_strcmp();
  if ((_DWORD)result)
  {
    result = _platform_strcmp();
    if ((_DWORD)result)
    {
      if (_platform_strcmp())
        result = open_NOCANCEL();
      else
        result = _os_debug_log_open_file(0);
      *(_DWORD *)(a1 + 16) = result;
      if ((_DWORD)result != -1)
      {
        if ((result & 0x80000000) != 0)
          return result;
        goto LABEL_21;
      }
      v5 = *(_BYTE *)(a1 + 20) | 2;
LABEL_16:
      *(_BYTE *)(a1 + 20) = v5;
      return result;
    }
    v6 = 1;
  }
  else
  {
    v6 = 2;
  }
  *(_DWORD *)(a1 + 16) = v6;
LABEL_21:
  if (!*(_QWORD *)(a1 + 8))
  {
    *(_BYTE *)(a1 + 20) |= 1u;
    v11.tv_sec = 0;
    *(_QWORD *)&v11.tv_usec = 0;
    gettimeofday(&v11, 0);
    *(_QWORD *)a1 = mach_absolute_time();
    v7 = *(_DWORD *)(a1 + 16);
    v8 = getprogname();
    v9 = getpid();
    dprintf(v7, "=== os_debug_log log file opened for %s[%u] at %ld.%06u", v8, v9, v11.tv_sec, v11.tv_usec);
    if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    {
      info = 0;
      if (!mach_timebase_info(&info))
        dprintf(*(_DWORD *)(a1 + 16), " [ns=ticks*%u/%u]", info.numer, info.denom);
    }
    return dprintf(*(_DWORD *)(a1 + 16), " ===\n");
  }
  return result;
}

int posix_spawnp(pid_t *a1, const char *a2, const posix_spawn_file_actions_t *a3, const posix_spawnattr_t *a4, char *const __argv[], char *const __envp[])
{
  const char *v9;
  uint64_t v10;
  char *v11;
  int v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  int v19;
  char *v20;
  int v21;
  uint64_t v22;
  _BYTE *v23;
  char *v24;
  _BYTE v25[4];
  int v26;
  const posix_spawn_file_actions_t *v27;
  const posix_spawnattr_t *v28;
  char *const *__attribute__((__org_arrdim(0,0))) v29;
  stat v30;
  char *v31;
  _BYTE v32[1024];

  v28 = a4;
  v29 = __envp;
  v27 = a3;
  memset(&v30, 0, sizeof(v30));
  getenv("PATH");
  if (_platform_strchr())
  {
    v26 = 0;
    v31 = 0;
    v9 = a2;
    while (1)
    {
      v16 = posix_spawn(a1, v9, v27, v28, __argv, v29);
      v12 = v16;
      if (v16 <= 0x3F)
      {
        if (((1 << v16) & 0xC000000000100004) != 0)
          goto LABEL_6;
        if (((1 << v16) & 0x4001080) != 0)
          return v12;
        if (v16 == 8)
        {
          v18 = 0;
          v19 = 1;
          do
          {
            v20 = __argv[v18];
            --v19;
            ++v18;
          }
          while (v20);
          if (-v19 != 1 && v19 != 0)
            v21 = -v19;
          else
            v21 = 1;
          MEMORY[0x1E0C86820](v16, 8 * (v21 + 2));
          v23 = &v25[-v22];
          _platform_bzero();
          if (v19)
          {
            v24 = *__argv;
            _platform_memmove();
          }
          else
          {
            *((_QWORD *)v23 + 2) = 0;
            v24 = "sh";
          }
          *(_QWORD *)v23 = v24;
          *((_QWORD *)v23 + 1) = v9;
          return posix_spawn(a1, "/bin/sh", v27, v28, (char *const *)v23, v29);
        }
      }
      if (!stat(v9, &v30))
      {
        v26 = 1;
        if (v12 != 13)
          return v12;
      }
LABEL_6:
      v13 = strsep(&v31, ":");
      if (!v13)
      {
        if (v26)
          return 13;
        else
          return 2;
      }
      v14 = 1;
      if (*v13)
        v14 = _platform_strlen();
      v15 = v14 + (uint64_t)(int)_platform_strlen();
      if ((v15 - 1023) < 0xFFFFFBFF)
        return 63;
      _platform_memmove();
      v32[v14] = 47;
      _platform_memmove();
      v32[v15 + 1] = 0;
    }
  }
  if (*a2)
  {
    v10 = _platform_strlen();
    v11 = &v25[-((MEMORY[0x1E0C86820](v10, v10 + 1) + 16) & 0xFFFFFFFFFFFFFFF0)];
    _platform_bzero();
    v31 = v11;
    _platform_strcpy();
    v26 = 0;
    v9 = v32;
    goto LABEL_6;
  }
  return 2;
}

uint64_t sleep_NOCANCEL(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  v1 = a1;
  if ((a1 & 0x80000000) != 0)
    return (_DWORD)a1 - 0x7FFFFFFF + sleep_NOCANCEL(0x7FFFFFFFLL);
  v3 = 0;
  v4 = 0;
  v5[0] = a1;
  v5[1] = 0;
  if (nanosleep_NOCANCEL(v5, &v3) != -1)
    return 0;
  if (*__error() == 4)
  {
    if (v4)
      return (v3 + 1);
    else
      return v3;
  }
  return v1;
}

uint64_t nanosleep_NOCANCEL(_QWORD *a1, _QWORD *a2)
{
  mach_error_t time;
  FILE *v5;
  char *v6;
  mach_error_t v8;
  FILE *v9;
  char *v10;
  clock_res_t v11;
  unsigned int tv_sec;
  unsigned int v13;
  clock_res_t tv_nsec;
  BOOL v15;
  int v16;
  int v17;
  mach_timespec_t cur_time;
  mach_timespec_t v19;

  if (!*MEMORY[0x1E0C88C20])
    *MEMORY[0x1E0C88C20] = 1;
  cur_time = 0;
  v19 = 0;
  if (!a1 || (*a1 & 0x8000000000000000) != 0 || a1[1] >= 0x3B9ACA00uLL)
    goto LABEL_9;
  if (a2)
  {
    time = clock_get_time(clock_port, &cur_time);
    if (time)
    {
      v5 = __stderrp;
      v6 = mach_error_string(time);
      fprintf(v5, "clock_get_time() failed: %s\n", v6);
      goto LABEL_9;
    }
  }
  if ((__semwait_signal_nocancel() & 0x80000000) == 0)
    return 0xFFFFFFFFLL;
  if (*__error() != 60)
  {
    if (*__error() == 4)
    {
      if (a2)
      {
        v8 = clock_get_time(clock_port, &v19);
        if (!v8)
        {
          v11 = cur_time.tv_nsec + *((_DWORD *)a1 + 2);
          if (v11 <= 999999999)
          {
            tv_sec = cur_time.tv_sec;
          }
          else
          {
            v11 -= 1000000000;
            tv_sec = cur_time.tv_sec + 1;
          }
          v13 = tv_sec + *(_DWORD *)a1;
          if (v13 <= v19.tv_sec)
          {
            if (v13 < v19.tv_sec || (tv_nsec = v19.tv_nsec, v11 <= v19.tv_nsec))
            {
              *a2 = 0;
              a2[1] = 0;
              return 0xFFFFFFFFLL;
            }
          }
          else
          {
            tv_nsec = v19.tv_nsec;
          }
          v15 = __OFSUB__(v11, tv_nsec);
          v16 = v11 - tv_nsec;
          if (v16 < 0 != v15)
            v17 = v16 + 1000000000;
          else
            v17 = v16;
          *a2 = v13 + (v16 >> 31) - v19.tv_sec;
          a2[1] = v17;
          return 0xFFFFFFFFLL;
        }
        v9 = __stderrp;
        v10 = mach_error_string(v8);
        fprintf(v9, "clock_get_time() failed: %s\n", v10);
      }
      return 0xFFFFFFFFLL;
    }
LABEL_9:
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  return 0;
}

void globfree(glob_t *a1)
{
  char **gl_pathv;
  size_t gl_pathc;
  void **v4;

  gl_pathv = a1->gl_pathv;
  if (gl_pathv)
  {
    gl_pathc = a1->gl_pathc;
    if (a1->gl_pathc)
    {
      v4 = (void **)&gl_pathv[a1->gl_offs];
      do
      {
        if (*v4)
          free(*v4);
        ++v4;
        --gl_pathc;
      }
      while (gl_pathc);
      gl_pathv = a1->gl_pathv;
    }
    free(gl_pathv);
    a1->gl_pathv = 0;
  }
}

int acl_free(void *obj_p)
{
  if (obj_p != (void *)1)
    free(obj_p);
  return 0;
}

void *gmt_init()
{
  void *result;
  _BYTE v1[1025];

  result = (void *)gmtptr;
  if (gmtptr || (result = malloc_type_calloc(1uLL, 0x4768uLL, 0x10000402151C985uLL), (gmtptr = (uint64_t)result) != 0))
  {
    gmtload((uint64_t)result, v1);
    return (void *)notify_register_tz((unint64_t)v1, (int *)&gmt_notify);
  }
  return result;
}

uint64_t gmtload(uint64_t a1, _BYTE *a2)
{
  uint64_t result;

  result = tzload("UTC", a1, a2, 1);
  if ((_DWORD)result)
    return tzparse((unint64_t)"UTC", a1, 1);
  return result;
}

void sranddev(void)
{
  uint64_t NOCANCEL;
  timeval v1;

  if ((open_NOCANCEL() & 0x80000000) != 0 || (NOCANCEL = read_NOCANCEL(), close_NOCANCEL(), NOCANCEL != 8))
  {
    v1.tv_sec = 0;
    *(_QWORD *)&v1.tv_usec = 0;
    gettimeofday(&v1, 0);
    next = LODWORD(v1.tv_sec) ^ (getpid() << 16) ^ v1.tv_usec;
  }
}

pid_t fork(void)
{
  pid_t v0;
  void (*v1)(_QWORD);
  void (*v2)(void);

  if (_libSystem_atfork_prepare_v2)
    _libSystem_atfork_prepare_v2(0);
  else
    _libSystem_atfork_prepare();
  v0 = __fork();
  if (v0)
  {
    v1 = (void (*)(_QWORD))_libSystem_atfork_parent_v2;
    if (!_libSystem_atfork_parent_v2)
    {
      v2 = (void (*)(void))_libSystem_atfork_parent;
LABEL_10:
      v2();
      return v0;
    }
  }
  else
  {
    v1 = (void (*)(_QWORD))_libSystem_atfork_child_v2;
    if (!_libSystem_atfork_child_v2)
    {
      v2 = (void (*)(void))_libSystem_atfork_child;
      goto LABEL_10;
    }
  }
  v1(0);
  return v0;
}

uint64_t tre_match(unsigned int *a1, uint64_t a2, uint64_t a3, int a4, unint64_t a5, uint64_t *a6, unsigned int a7)
{
  __int16 v7;
  unint64_t v9;
  int v11;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  int v28;
  unsigned int v29;

  v7 = a7;
  v9 = a5;
  v11 = a3;
  if (a6)
    v14 = (a7 >> 2) & 1;
  else
    v14 = 0;
  if (v14 != 1)
  {
    v28 = v14;
    v18 = 0;
    v15 = 0;
    goto LABEL_13;
  }
  v15 = *a6;
  if (*a6 < 0)
    return 16;
  if (a3 != -1 || (v16 = a6[1], v17 = 16, (v16 & 0x8000000000000000) == 0) && (v11 = v16 - v15, v16 >= v15))
  {
    v28 = 1;
    if (a4)
      v18 = *a6;
    else
      v18 = 4 * v15;
LABEL_13:
    v19 = 0;
    if (a5 && (v20 = a1[20], (int)v20 >= 1) && (v19 = (int *)malloc_type_malloc(16 * v20, 0x1000040451B5BE8uLL)) == 0)
    {
      return 12;
    }
    else
    {
      v29 = 0;
      v21 = (char *)(a2 + v18);
      if (a1[25] | v7 & 0x400)
        v22 = tre_tnfa_run_backtrack((uint64_t)a1, v21, v11, a4, (uint64_t)v19, v7, &v29);
      else
        v22 = tre_tnfa_run_parallel((uint64_t)a1, v21, v11, a4, v19, v7, &v29);
      v17 = v22;
      if (!(_DWORD)v22)
      {
        v17 = tre_fill_pmatch(v9, a6, a1[24], (uint64_t)a1, v19, v29);
        if (!(_DWORD)v17)
        {
          v23 = (a1[24] & 4) != 0 || v9 == 0;
          v24 = v28;
          if (v23)
            v24 = 0;
          if (v24 == 1)
          {
            v25 = a6 + 1;
            do
            {
              v26 = *(v25 - 1);
              if ((v26 & 0x8000000000000000) == 0)
                *(v25 - 1) = v26 + v15;
              if ((*v25 & 0x8000000000000000) == 0)
                *v25 += v15;
              v25 += 2;
              --v9;
            }
            while (v9);
          }
          v17 = 0;
        }
      }
      if (v19)
        free(v19);
    }
  }
  return v17;
}

uint64_t tre_tnfa_run_parallel(uint64_t a1, const char *a2, int a3, int a4, int *a5, char a6, unsigned int *a7)
{
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  int v36;
  unsigned int v37;
  char *v38;
  int v40;
  char *v41;
  int v42;
  unsigned int v43;
  int v44;
  char *v45;
  char v46;
  char *v47;
  char v48;
  char *v49;
  int v50;
  int v52;
  char *v53;
  __int32 v54;
  int *v55;
  uint64_t v56;
  int *v57;
  _BOOL4 v59;
  int v60;
  uint64_t v61;
  int *v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  _BOOL4 v67;
  __uint32_t v68;
  __uint32_t v69;
  _xlocale *v70;
  __uint32_t v71;
  _xlocale *v72;
  _QWORD *v73;
  _RuneLocale *v74;
  _xlocale *v75;
  _QWORD *v76;
  _RuneLocale *v77;
  _xlocale *v78;
  __uint32_t v79;
  _QWORD *v80;
  _xlocale *v81;
  __uint32_t v82;
  _QWORD *v83;
  int v84;
  _RuneLocale *v85;
  _xlocale *v86;
  __uint32_t v87;
  _QWORD *v88;
  unsigned int v89;
  _BOOL4 v90;
  __uint32_t v91;
  _xlocale *v92;
  _QWORD *v93;
  int v94;
  _RuneLocale *v95;
  _xlocale *v96;
  __uint32_t v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t *v101;
  unsigned int *v102;
  uint64_t v103;
  unsigned int *v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  unsigned int v108;
  int *v109;
  __int32 v110;
  int v111;
  uint64_t v112;
  _BOOL4 v114;
  int v115;
  char *v116;
  char *v117;
  uint64_t *v118;
  int v119;
  int v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  _BOOL4 v124;
  int v125;
  int v126;
  int v127;
  _xlocale *v128;
  int v129;
  _xlocale *v130;
  _QWORD *v131;
  _RuneLocale *v132;
  _xlocale *v133;
  _QWORD *v134;
  _RuneLocale *v135;
  _xlocale *v136;
  __uint32_t v137;
  _QWORD *v138;
  _xlocale *v139;
  __uint32_t v140;
  _QWORD *v141;
  int v142;
  _RuneLocale *v143;
  _xlocale *v144;
  __uint32_t v145;
  _QWORD *v146;
  char v147;
  unsigned int v148;
  uint64_t v149;
  BOOL v150;
  __darwin_ct_rune_t v151;
  int v152;
  uint64_t v153;
  _xlocale *v154;
  int v155;
  _xlocale *v156;
  _QWORD *v157;
  __darwin_ct_rune_t v158;
  _QWORD *v159;
  _QWORD *v160;
  int v161;
  _RuneLocale *v162;
  _xlocale *v163;
  __uint32_t v164;
  _QWORD *v165;
  char v166;
  int v167;
  int v168;
  uint64_t v169;
  int v170;
  int v171;
  int v172;
  _DWORD *v173;
  int v174;
  _DWORD *v175;
  int v176;
  int v177;
  int v178;
  _xlocale *v179;
  uint64_t v180;
  BOOL v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  int v186;
  int v187;
  uint64_t v188;
  int v189;
  uint64_t v191;
  _QWORD *v192;
  int v193;
  _xlocale *v194;
  int v195;
  unsigned int *v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int *v199;
  int v200;
  int *v201;
  unsigned int v202;
  unsigned int *v203;
  uint64_t v204;
  unsigned int *v205;
  uint64_t v206;
  int v207;
  unsigned int v208;
  int *v209;
  uint64_t v210;
  uint64_t v211;
  int *v212;
  int v213;
  unint64_t v214;
  int *v215;
  int **v216;
  int v217;
  int v218;
  int v219;
  int *v220;
  int v221;
  int v222;
  int v223;
  int *v224;
  int v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  size_t v230;
  size_t v231;
  char *v232;
  char *v233;
  int v234;
  unsigned int *v235;
  void *v236;
  size_t v238;
  __darwin_ct_rune_t *v239;
  __darwin_ct_rune_t *v240;
  char *v241;
  _xlocale *v243;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  char *v251;
  char *v252;
  int v253;
  char *v254;
  unsigned int v255;
  unsigned int v256;
  uint64_t v257;
  unsigned int v258;
  int v259;
  char v260;
  int v261;
  int v262;
  int v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int *v274;
  int v275;
  int v276;
  char *v277;
  unsigned int v278;
  _DWORD *v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  int v283;
  unsigned int v284;
  __uint32_t *v285;
  _BOOL4 v286;
  uint64_t v287;
  __int32 v288;
  uint64_t v289;
  unsigned int v290;
  mbstate_t v291;

  v288 = 0;
  v10 = *(_DWORD *)(a1 + 96);
  memset(&v291, 0, sizeof(v291));
  if (a5)
    v11 = *(_DWORD *)(a1 + 80);
  else
    v11 = 0;
  v12 = 16 * v11;
  v13 = *(int *)(a1 + 92);
  v14 = 16 * v13;
  v15 = 16 * v13 + 16;
  v16 = (char *)malloc_type_malloc(16 * v13 + v12 + 2 * (v15 + v12 * v13) + 28, 0x4C34470BuLL);
  if (!v16)
    return 12;
  v284 = v10;
  v235 = a7;
  v17 = v11;
  v280 = 16 * v11;
  v18 = &v16[v12];
  if (((unint64_t)&v16[v12] & 7) != 0)
    v19 = 8 - ((unint64_t)&v16[v12] & 7);
  else
    v19 = 0;
  v251 = &v18[v19];
  v20 = (uint64_t)&v18[v19 + v15];
  v21 = 8 - (v20 & 7);
  if ((v20 & 7) == 0)
    v21 = 0;
  v282 = v21;
  v22 = (char *)(v20 + v21);
  v23 = v20 + v21 + v15;
  if ((v23 & 7) != 0)
    v24 = 8 - (v23 & 7);
  else
    v24 = 0;
  v236 = v16;
  _platform_bzero();
  v279 = (_DWORD *)(v23 + v24);
  v287 = a1;
  v25 = *(unsigned int *)(a1 + 92);
  v26 = a4;
  if ((int)v25 >= 1)
  {
    if ((((_BYTE)v279 + (_BYTE)v14) & 7) != 0)
      v27 = 8 - (((_BYTE)v279 + (_BYTE)v14) & 7);
    else
      v27 = 0;
    v28 = (uint64_t)v236 + v280 + v282 + v14 + 24;
    v29 = (uint64_t)v236 + v280 + 8;
    v30 = v27 + v24 + v282 + 48 * (int)v13;
    v31 = (uint64_t)v236 + v280 + v30 + 32;
    v32 = 32 * v17;
    v33 = (uint64_t)v236 + 32 * v17 + v30 + 32;
    v34 = *(unsigned int *)(a1 + 92);
    do
    {
      *(_QWORD *)(v28 + v19) = v31 + v19;
      *(_QWORD *)(v29 + v19) = v33 + v19;
      v28 += 16;
      v29 += 16;
      v31 += v32;
      v33 += v32;
      --v34;
    }
    while (v34);
    v35 = v279;
    do
    {
      *v35 = -1;
      v35 += 4;
      --v25;
    }
    while (v25);
  }
  v36 = a3;
  if (a2)
  {
    v37 = *(_DWORD *)(a1 + 68);
    if ((v37 & 0x80000000) == 0)
    {
      if (a4 != 2)
      {
        if (a4 != 1)
        {
          v43 = 0;
          v38 = (char *)a2;
          goto LABEL_61;
        }
        if (a3 < 0)
        {
          v38 = (char *)_platform_strchr();
          if (!v38)
            goto LABEL_56;
        }
        else
        {
          v38 = (char *)_platform_memchr();
          if (!v38)
            goto LABEL_56;
        }
LABEL_58:
        if (v38 >= a2 + 1)
          v43 = *(v38 - 1);
        else
          v43 = 0;
LABEL_61:
        v288 = *v38;
        v50 = (_DWORD)v38 - (_DWORD)a2;
        if (a3 < 0 || v50 < a3)
          ++v38;
        v241 = v38;
        goto LABEL_84;
      }
      if (v37 <= 0x7F)
      {
        if (a3 < 0)
        {
          v46 = *a2;
          if (*a2)
          {
            v47 = (char *)a2;
            do
            {
              v241 = v47;
              if (v37 == v46)
                goto LABEL_57;
              if (v46 < 0)
                goto LABEL_68;
              ++v47;
              v46 = v241[1];
            }
            while (v46);
          }
        }
        else if (a3)
        {
          v40 = a3;
          v41 = (char *)a2;
          while (1)
          {
            v241 = v41;
            v42 = *v41;
            if (v37 == v42)
              break;
            if ((v42 & 0x80) != 0)
              goto LABEL_68;
            v41 = v241 + 1;
            if (!--v40)
              goto LABEL_56;
          }
LABEL_57:
          v38 = v241;
          goto LABEL_58;
        }
LABEL_56:
        free(v236);
        return 1;
      }
      if (a3 < 0)
      {
        v48 = *a2;
        if (!*a2)
          goto LABEL_56;
        v49 = (char *)a2;
        while (1)
        {
          v241 = v49;
          if (v48 < 0)
            break;
          ++v49;
          v48 = v241[1];
          if (!v48)
            goto LABEL_56;
        }
      }
      else
      {
        if (!a3)
          goto LABEL_56;
        v44 = a3;
        v45 = (char *)a2;
        while ((*v45 & 0x80000000) == 0)
        {
          ++v45;
          if (!--v44)
            goto LABEL_56;
        }
        v241 = v45;
      }
LABEL_68:
      if (v241 != a2)
      {
        v43 = *(v241 - 1);
        v288 = v43;
        v50 = (_DWORD)v241 - (_DWORD)a2;
        if (a3 < 0 || a3 > v50)
        {
          v52 = *v241;
          v53 = v251;
          if ((v52 & 0x80000000) == 0)
          {
            ++v241;
            v288 = v52;
            LODWORD(v238) = 1;
            goto LABEL_89;
          }
          v234 = a3 - v50;
          if (a3 < 0)
            v234 = 32;
          v231 = mbrtowc_l(&v288, v241, v234, &v291, *(locale_t *)(a1 + 56));
          if (v231 > 0xFFFFFFFFFFFFFFFDLL)
            return 17;
          if ((a3 & 0x80000000) == 0 && !v231)
          {
            v288 = 0;
            v232 = v241;
            goto LABEL_583;
          }
          v233 = v241;
          goto LABEL_585;
        }
        v288 = 0;
LABEL_84:
        LODWORD(v238) = 1;
        goto LABEL_88;
      }
    }
  }
  v43 = v288;
  if (a4)
  {
    if (a4 == 2)
    {
      if (a3)
      {
        if (*a2 < 0)
        {
          if (a3 < 0)
            v230 = 32;
          else
            v230 = a3;
          v231 = mbrtowc_l(&v288, a2, v230, &v291, *(locale_t *)(a1 + 56));
          if (v231 > 0xFFFFFFFFFFFFFFFDLL)
            return 17;
          if ((a3 & 0x80000000) == 0 && !v231)
          {
            v50 = 0;
            v288 = 0;
            v232 = (char *)a2;
LABEL_583:
            v241 = v232 + 1;
            LODWORD(v238) = 1;
LABEL_586:
            v26 = a4;
            v36 = a3;
            goto LABEL_88;
          }
          v50 = 0;
          v233 = (char *)a2;
LABEL_585:
          v241 = &v233[v231];
          LODWORD(v238) = v231;
          goto LABEL_586;
        }
        v50 = 0;
        v54 = *(unsigned __int8 *)a2;
        v241 = (char *)(a2 + 1);
        goto LABEL_83;
      }
    }
    else
    {
      if (a4 != 1)
      {
        v50 = 0;
LABEL_87:
        LODWORD(v238) = 1;
        v241 = (char *)a2;
        goto LABEL_88;
      }
      if (a3)
      {
        v50 = 0;
        v54 = *(unsigned __int8 *)a2;
        v241 = (char *)(a2 + 1);
LABEL_83:
        v288 = v54;
        goto LABEL_84;
      }
    }
LABEL_86:
    v50 = 0;
    v288 = 0;
    goto LABEL_87;
  }
  if (!a3)
    goto LABEL_86;
  v50 = 0;
  v241 = (char *)a2;
  v288 = *(_DWORD *)a2;
  a2 += 4;
  LODWORD(v238) = 1;
LABEL_88:
  v53 = v251;
LABEL_89:
  v275 = a6 & 2;
  v277 = v53;
  v266 = 1;
  v278 = -1;
  v276 = (v284 >> 3) & 1;
  v55 = (int *)v236;
  while (2)
  {
    v254 = v22;
    v252 = v53;
    if ((v278 & 0x80000000) == 0)
    {
      if ((_DWORD)v17 && v277 != v53)
      {
        if (v36 < 0)
          goto LABEL_244;
LABEL_94:
        v56 = v266;
        if (v50 < v36)
        {
          v43 = v288;
          goto LABEL_245;
        }
      }
LABEL_575:
      *v235 = v278;
      free(v236);
      return v278 >> 31;
    }
    v57 = *(int **)(v287 + 8);
    if (!*((_QWORD *)v57 + 1))
      goto LABEL_243;
    v59 = (a6 & 1) == 0 && v50 < 1;
    if (v43 == 10)
      v60 = v276;
    else
      v60 = 0;
    v61 = v43;
    v285 = &_DefaultRuneLocale.__runetype[v43];
    do
    {
      v62 = v57 + 10;
      while (v279[4 * *(v62 - 6)] < v50)
      {
        v63 = *v62;
        if (!*v62)
          goto LABEL_230;
        v64 = (v63 & 1) == 0 || v59;
        if ((v64 | v60) != 1)
          goto LABEL_220;
        if ((v63 & 2) != 0)
        {
          v65 = v276;
          if (v288 != 10)
            v65 = 0;
          if (v288 | v275 && !v65)
            goto LABEL_220;
        }
        if ((v63 & 8) != 0)
        {
          if (v43 == 95)
            goto LABEL_220;
          if (v43 > 0x7F)
          {
            v70 = *(_xlocale **)(v287 + 56);
            if (v43 < 0x100)
            {
              v73 = &__global_locale;
              if (v70 != (_xlocale *)-1)
                v73 = *(_QWORD **)(v287 + 56);
              if (!v70)
                v73 = &__c_locale;
              v68 = *(_DWORD *)(*(_QWORD *)(v73[166] + 120) + 4 * v61 + 60);
            }
            else
            {
              LOWORD(v68) = ___runetype_l(v43, v70);
            }
          }
          else
          {
            v68 = *v285;
          }
          if ((v68 & 0x500) != 0)
            goto LABEL_220;
          if (v288 != 95)
          {
            if (v288 <= 0x7F)
            {
              v74 = &_DefaultRuneLocale;
              goto LABEL_227;
            }
            v81 = *(_xlocale **)(v287 + 56);
            if (v288 < 0x100)
            {
              v100 = &__global_locale;
              if (v81 != (_xlocale *)-1)
                v100 = *(_QWORD **)(v287 + 56);
              if (!v81)
                v100 = &__c_locale;
              v74 = *(_RuneLocale **)(v100[166] + 120);
LABEL_227:
              v82 = v74->__runetype[v288];
            }
            else
            {
              LOWORD(v82) = ___runetype_l(v288, v81);
            }
            if ((v82 & 0x500) == 0)
              goto LABEL_220;
          }
        }
        if ((*v62 & 0x10) != 0)
        {
          if (v43 != 95)
          {
            if (v43 > 0x7F)
            {
              v72 = *(_xlocale **)(v287 + 56);
              if (v43 < 0x100)
              {
                v76 = &__global_locale;
                if (v72 != (_xlocale *)-1)
                  v76 = *(_QWORD **)(v287 + 56);
                if (!v72)
                  v76 = &__c_locale;
                v69 = *(_DWORD *)(*(_QWORD *)(v76[166] + 120) + 4 * v61 + 60);
              }
              else
              {
                LOWORD(v69) = ___runetype_l(v43, v72);
              }
            }
            else
            {
              v69 = *v285;
            }
            if ((v69 & 0x500) == 0)
              goto LABEL_220;
          }
          if (v288 == 95)
            goto LABEL_220;
          if (v288 <= 0x7F)
          {
            v77 = &_DefaultRuneLocale;
            goto LABEL_166;
          }
          v78 = *(_xlocale **)(v287 + 56);
          if (v288 < 0x100)
          {
            v80 = &__global_locale;
            if (v78 != (_xlocale *)-1)
              v80 = *(_QWORD **)(v287 + 56);
            if (!v78)
              v80 = &__c_locale;
            v77 = *(_RuneLocale **)(v80[166] + 120);
LABEL_166:
            v79 = v77->__runetype[v288];
          }
          else
          {
            LOWORD(v79) = ___runetype_l(v288, v78);
          }
          if ((v79 & 0x500) != 0)
            goto LABEL_220;
          if ((*v62 & 0x20) == 0)
            goto LABEL_191;
          goto LABEL_122;
        }
        if ((*v62 & 0x20) == 0)
          goto LABEL_191;
LABEL_122:
        if (!v50)
          goto LABEL_191;
        v66 = v288;
        if (!v288)
          goto LABEL_191;
        if (v43 == 95)
        {
          if (v288 == 95)
            goto LABEL_220;
          v67 = 1;
LABEL_180:
          if (v66 <= 0x7F)
          {
            v85 = &_DefaultRuneLocale;
            goto LABEL_189;
          }
          v86 = *(_xlocale **)(v287 + 56);
          if (v66 < 0x100)
          {
            v88 = &__global_locale;
            if (v86 != (_xlocale *)-1)
              v88 = *(_QWORD **)(v287 + 56);
            if (!v86)
              v88 = &__c_locale;
            v85 = *(_RuneLocale **)(v88[166] + 120);
LABEL_189:
            v87 = v85->__runetype[v66];
          }
          else
          {
            LOWORD(v87) = ___runetype_l(v66, v86);
          }
          if (v67 == ((v87 & 0x500) != 0))
            goto LABEL_220;
          goto LABEL_191;
        }
        if (v43 > 0x7F)
        {
          v75 = *(_xlocale **)(v287 + 56);
          if (v43 < 0x100)
          {
            v83 = &__global_locale;
            if (v75 != (_xlocale *)-1)
              v83 = *(_QWORD **)(v287 + 56);
            if (!v75)
              v83 = &__c_locale;
            v71 = *(_DWORD *)(*(_QWORD *)(v83[166] + 120) + 4 * v61 + 60);
          }
          else
          {
            LOWORD(v71) = ___runetype_l(v43, v75);
            v66 = v288;
          }
        }
        else
        {
          v71 = *v285;
        }
        v84 = v71 & 0x500;
        v67 = v84 != 0;
        if (v66 != 95)
          goto LABEL_180;
        if (v84)
          goto LABEL_220;
LABEL_191:
        if ((*(_BYTE *)v62 & 0x40) == 0)
          goto LABEL_230;
        if (!v50)
          goto LABEL_220;
        v89 = v288;
        if (!v288)
          goto LABEL_220;
        if (v43 == 95)
        {
          if (v288 == 95)
            goto LABEL_230;
          v90 = 1;
        }
        else
        {
          if (v43 > 0x7F)
          {
            v92 = *(_xlocale **)(v287 + 56);
            if (v43 < 0x100)
            {
              v93 = &__global_locale;
              if (v92 != (_xlocale *)-1)
                v93 = *(_QWORD **)(v287 + 56);
              if (!v92)
                v93 = &__c_locale;
              v91 = *(_DWORD *)(*(_QWORD *)(v93[166] + 120) + 4 * v61 + 60);
            }
            else
            {
              LOWORD(v91) = ___runetype_l(v43, v92);
              v89 = v288;
            }
          }
          else
          {
            v91 = *v285;
          }
          v94 = v91 & 0x500;
          v90 = v94 != 0;
          if (v89 == 95)
          {
            if (v94)
              goto LABEL_230;
            goto LABEL_220;
          }
        }
        if (v89 > 0x7F)
        {
          v96 = *(_xlocale **)(v287 + 56);
          if (v89 >= 0x100)
          {
            LOWORD(v97) = ___runetype_l(v89, v96);
            goto LABEL_219;
          }
          v98 = &__global_locale;
          if (v96 != (_xlocale *)-1)
            v98 = *(_QWORD **)(v287 + 56);
          if (!v96)
            v98 = &__c_locale;
          v95 = *(_RuneLocale **)(v98[166] + 120);
        }
        else
        {
          v95 = &_DefaultRuneLocale;
        }
        v97 = v95->__runetype[v89];
LABEL_219:
        if (v90 == ((v97 & 0x500) != 0))
        {
LABEL_230:
          *(_QWORD *)v277 = *((_QWORD *)v62 - 4);
          v101 = (uint64_t *)(v277 + 8);
          _platform_bzero();
          v102 = (unsigned int *)*((_QWORD *)v62 - 2);
          if (v102)
          {
            v103 = *v102;
            if ((v103 & 0x80000000) == 0)
            {
              v104 = v102 + 1;
              do
              {
                if ((int)v103 < (int)v17)
                {
                  v105 = *v101;
                  v106 = *(_DWORD *)(*v101 + 16 * v103);
                  *(_DWORD *)(*v101 + 16 * v103) = v106 + 1;
                  if (!v106)
                    *(_DWORD *)(v105 + 16 * v103 + 4) = v50;
                  v107 = v105 + 16 * v103;
                  *(_DWORD *)(v107 + 8) = v50;
                  *(_DWORD *)(v107 + 12) = v266;
                }
                v108 = *v104++;
                v103 = v108;
              }
              while ((v108 & 0x80000000) == 0);
            }
            v266 = (v266 + 1);
          }
          if (*(_QWORD *)v277 == *(_QWORD *)(v287 + 16))
          {
            _platform_memmove();
            v278 = v50;
          }
          v109 = &v279[4 * *(v62 - 6)];
          *v109 = v50;
          *((_QWORD *)v109 + 1) = v101;
          v277 += 16;
          v61 = v43;
          break;
        }
LABEL_220:
        v99 = *((_QWORD *)v62 + 3);
        v62 += 14;
        if (!v99)
          goto LABEL_243;
      }
      v57 = v62 + 4;
    }
    while (*((_QWORD *)v62 + 3));
LABEL_243:
    *(_QWORD *)v277 = 0;
    v26 = a4;
    v36 = a3;
    v53 = v252;
    if ((a3 & 0x80000000) == 0)
      goto LABEL_94;
LABEL_244:
    v43 = v288;
    v56 = v266;
    if (!v288)
      goto LABEL_575;
LABEL_245:
    if (!v26)
    {
      ++v50;
      if ((v36 & 0x80000000) == 0 && v50 >= v36)
        goto LABEL_253;
      v110 = *(_DWORD *)a2;
      a2 += 4;
LABEL_260:
      v288 = v110;
      goto LABEL_261;
    }
    if (v26 != 2)
    {
      if (v26 == 1)
      {
        ++v50;
        if (v36 < 0 || v50 < v36)
        {
          v110 = *v241++;
          goto LABEL_260;
        }
LABEL_253:
        v288 = 0;
      }
LABEL_261:
      v112 = *(_QWORD *)v53;
      if (!*(_QWORD *)v53)
      {
        v277 = v254;
LABEL_566:
        v266 = v56;
        *(_QWORD *)v277 = 0;
        v22 = v252;
        v53 = v254;
        v26 = a4;
        v36 = a3;
        continue;
      }
      v114 = (a6 & 1) == 0 && v50 < 1;
      v286 = v114;
      v115 = v276;
      if (v43 != 10)
        v115 = 0;
      v283 = v115;
      v116 = &_DefaultRuneLocale.__magic[4 * v43];
      v274 = (int *)(v116 + 60);
      v239 = (__darwin_ct_rune_t *)(v116 + 1084);
      v240 = (__darwin_ct_rune_t *)(v116 + 2108);
      v277 = v254;
      v117 = v53;
      while (1)
      {
        v118 = (uint64_t *)(v112 + 8);
        if (*(_QWORD *)(v112 + 8))
          break;
LABEL_563:
        v228 = *((_QWORD *)v117 + 2);
        v117 += 16;
        v112 = v228;
        if (!v228)
          goto LABEL_566;
      }
      v281 = v117;
      while (2)
      {
        if (*(_DWORD *)v112 > (signed int)v43 || *(_DWORD *)(v112 + 4) < (signed int)v43)
          goto LABEL_559;
        v119 = *(_DWORD *)(v112 + 40);
        if (!v119)
          goto LABEL_494;
        v120 = v286;
        if ((v119 & 1) == 0)
          v120 = 1;
        if ((v120 | v283) != 1)
          goto LABEL_559;
        if ((v119 & 2) != 0)
        {
          v125 = v276;
          if (v288 != 10)
            v125 = 0;
          if (v288 | v275 && !v125)
            goto LABEL_559;
        }
        if ((v119 & 8) != 0)
        {
          if (v43 == 95)
            goto LABEL_559;
          if (v43 > 0x7F)
          {
            v128 = *(_xlocale **)(v287 + 56);
            if (v43 < 0x100)
            {
              v131 = &__global_locale;
              if (v128 != (_xlocale *)-1)
                v131 = *(_QWORD **)(v287 + 56);
              if (!v128)
                v131 = &__c_locale;
              v126 = *(_DWORD *)(*(_QWORD *)(v131[166] + 120) + 4 * v43 + 60);
            }
            else
            {
              LOWORD(v126) = ___runetype_l(v43, v128);
            }
          }
          else
          {
            v126 = *v274;
          }
          if ((v126 & 0x500) != 0)
            goto LABEL_559;
          if (v288 != 95)
          {
            if (v288 <= 0x7F)
            {
              v132 = &_DefaultRuneLocale;
              goto LABEL_382;
            }
            v139 = *(_xlocale **)(v287 + 56);
            if (v288 < 0x100)
            {
              v157 = &__global_locale;
              if (v139 != (_xlocale *)-1)
                v157 = *(_QWORD **)(v287 + 56);
              if (!v139)
                v157 = &__c_locale;
              v132 = *(_RuneLocale **)(v157[166] + 120);
LABEL_382:
              v140 = v132->__runetype[v288];
            }
            else
            {
              LOWORD(v140) = ___runetype_l(v288, v139);
            }
            if ((v140 & 0x500) == 0)
              goto LABEL_559;
          }
        }
        v121 = *(_DWORD *)(v112 + 40);
        if ((v121 & 0x10) == 0)
        {
          if ((v121 & 0x20) != 0)
            goto LABEL_283;
LABEL_357:
          if ((*(_BYTE *)(v112 + 40) & 0x40) == 0)
          {
LABEL_358:
            if ((*(_BYTE *)(v112 + 40) & 4) == 0)
              goto LABEL_494;
            v265 = *(_QWORD *)(v112 + 48);
            v290 = v43;
            v289 = 0;
            v253 = *(_DWORD *)(v287 + 96);
            if ((v253 & 2) == 0)
            {
LABEL_360:
              v147 = 1;
              goto LABEL_417;
            }
            if (v43 < 0x80)
            {
              if ((*v274 & 0x1000) == 0)
              {
                if ((*v274 & 0x8000) == 0)
                  goto LABEL_360;
                HIDWORD(v289) = v43;
                v151 = *v239;
LABEL_416:
                v147 = 0;
                LODWORD(v289) = v151;
                goto LABEL_417;
              }
              LODWORD(v289) = v43;
              v158 = *v240;
LABEL_394:
              v147 = 0;
              HIDWORD(v289) = v158;
              goto LABEL_417;
            }
            v153 = v56;
            v154 = *(_xlocale **)(v287 + 56);
            if (v43 < 0x100)
            {
              v159 = &__global_locale;
              if (v154 != (_xlocale *)-1)
                v159 = *(_QWORD **)(v287 + 56);
              if (!v154)
                v159 = &__c_locale;
              v155 = *(_DWORD *)(*(_QWORD *)(v159[166] + 120) + 4 * v43 + 60);
              if ((v155 & 0x1000) == 0)
                goto LABEL_391;
            }
            else if ((___runetype_l(v43, *(locale_t *)(v287 + 56)) & 0x1000) == 0)
            {
              LOWORD(v155) = ___runetype_l(v43, v154);
LABEL_391:
              if ((v155 & 0x8000) != 0)
              {
                HIDWORD(v289) = v43;
                v151 = ___tolower_l(v43, v154);
                v56 = v153;
                v117 = v281;
                goto LABEL_416;
              }
              v147 = 1;
              v56 = v153;
              v117 = v281;
LABEL_417:
              v167 = *(_DWORD *)v265;
              if (*(int *)v265 < 1)
              {
                v168 = 0;
                v195 = 1;
                goto LABEL_490;
              }
              v267 = v56;
              v168 = 0;
              v169 = 0;
              v170 = 0;
              v171 = 0;
              v172 = 0;
              v173 = (_DWORD *)(v265 + 8);
              v259 = *(_DWORD *)v265;
              v260 = v147;
LABEL_419:
              switch(*v173)
              {
                case 1:
                  v174 = v173[1];
                  if ((v147 & 1) != 0)
                  {
                    if (v174 != v290)
                      goto LABEL_484;
                    goto LABEL_487;
                  }
                  v181 = v174 == HIDWORD(v289) || v174 == (_DWORD)v289;
                  if (v181)
                    goto LABEL_487;
                  goto LABEL_484;
                case 2:
                  if (++v172 >= v167)
                    goto LABEL_485;
                  v175 = v173 + 2;
                  if (v173[2] != 3)
                    goto LABEL_485;
                  v176 = v173[1];
                  v177 = v173[3];
                  if (v168)
                  {
                    if ((v147 & 1) == 0)
                      goto LABEL_461;
                  }
                  else
                  {
                    v248 = v176;
                    v185 = *(_QWORD *)(v287 + 56);
                    if ((v147 & 1) == 0)
                    {
                      v257 = *(_QWORD *)(v287 + 56);
                      v263 = v171;
                      v272 = __collate_equiv_value(v185, (const __int32 *)&v289 + 1, 1uLL);
                      v191 = __collate_equiv_value(v257, (const __int32 *)&v289, 1uLL);
                      v147 = v260;
                      v171 = v263;
                      v170 = v272;
                      v169 = v191;
                      v167 = v259;
                      v176 = v248;
LABEL_461:
                      if (v176 <= v170 && v170 <= v177)
                        goto LABEL_487;
                      v168 = 1;
                      if (v176 <= (int)v169 && (int)v169 <= v177)
                        goto LABEL_488;
                      goto LABEL_465;
                    }
                    v269 = v170;
                    v255 = v169;
                    v186 = __collate_equiv_value(v185, (const __int32 *)&v290, 1uLL);
                    v169 = v255;
                    v170 = v269;
                    v171 = v186;
                    v167 = v259;
                    v147 = v260;
                    v176 = v248;
                  }
                  v168 = 1;
                  if (v176 <= v171 && v171 <= v177)
                    goto LABEL_488;
LABEL_465:
                  v173 = v175;
                  goto LABEL_484;
                case 4:
                  v178 = v173[1];
                  v179 = *(_xlocale **)(v287 + 56);
                  if ((v147 & 1) != 0)
                  {
                    v180 = v290;
                  }
                  else
                  {
                    if (HIDWORD(v289) > 0x7F)
                    {
                      if (HIDWORD(v289) < 0x100)
                      {
                        v192 = &__global_locale;
                        if (v179 != (_xlocale *)-1)
                          v192 = *(_QWORD **)(v287 + 56);
                        if (!v179)
                          v192 = &__c_locale;
                        v187 = *(_DWORD *)(*(_QWORD *)(v192[166] + 120) + 4 * HIDWORD(v289) + 60);
                      }
                      else
                      {
                        v243 = *(_xlocale **)(v287 + 56);
                        v246 = v173[1];
                        v249 = v168;
                        v270 = v170;
                        v261 = v171;
                        v256 = v169;
                        v187 = ___runetype_l(SHIDWORD(v289), v179);
                        v179 = v243;
                        v178 = v246;
                        v168 = v249;
                        v169 = v256;
                        v147 = v260;
                        v171 = v261;
                        v170 = v270;
                        v167 = v259;
                      }
                      if ((v187 & v178) != 0)
                      {
LABEL_487:
                        v195 = 0;
                        v168 = 1;
                        goto LABEL_489;
                      }
                    }
                    else if ((_DefaultRuneLocale.__runetype[HIDWORD(v289)] & v178) != 0)
                    {
                      goto LABEL_487;
                    }
                    v180 = v289;
                  }
                  if (v180 > 0x7F)
                  {
                    if (v180 < 0x100)
                    {
                      v194 = (_xlocale *)&__global_locale;
                      if (v179 != (_xlocale *)-1)
                        v194 = v179;
                      if (!v179)
                        v194 = (_xlocale *)&__c_locale;
                      v193 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v194 + 166) + 120) + 4 * v180 + 60);
                    }
                    else
                    {
                      v247 = v178;
                      v250 = v168;
                      v273 = v170;
                      v264 = v171;
                      v258 = v169;
                      v193 = ___runetype_l(v180, v179);
                      v178 = v247;
                      v168 = v250;
                      v169 = v258;
                      v147 = v260;
                      v171 = v264;
                      v170 = v273;
                      v167 = v259;
                    }
                    if ((v193 & v178) != 0)
                      goto LABEL_487;
                  }
                  else if ((_DefaultRuneLocale.__runetype[v180] & v178) != 0)
                  {
                    goto LABEL_487;
                  }
                  goto LABEL_484;
                case 5:
                  if (v168)
                  {
                    if ((v147 & 1) == 0)
                      goto LABEL_454;
                  }
                  else
                  {
                    v182 = *(_QWORD *)(v287 + 56);
                    if ((v147 & 1) == 0)
                    {
                      v262 = v171;
                      v271 = __collate_equiv_value(*(_QWORD *)(v287 + 56), (const __int32 *)&v289 + 1, 1uLL);
                      v188 = __collate_equiv_value(v182, (const __int32 *)&v289, 1uLL);
                      v147 = v260;
                      v171 = v262;
                      v170 = v271;
                      v169 = v188;
                      v167 = v259;
LABEL_454:
                      v189 = v173[1];
                      v168 = 1;
                      if (v189 != v170 && v189 != (_DWORD)v169)
                        goto LABEL_484;
LABEL_488:
                      v195 = 0;
LABEL_489:
                      v56 = v267;
                      v117 = v281;
LABEL_490:
                      if ((*(_BYTE *)(v265 + 4) & 1) != 0)
                      {
                        if ((v253 & 8) != 0)
                        {
                          v168 = v195;
                          if (v290 == 10)
                            goto LABEL_559;
                          goto LABEL_493;
                        }
                        if (!v195)
                          goto LABEL_559;
                      }
                      else
                      {
LABEL_493:
                        if (!v168)
                          goto LABEL_559;
                      }
LABEL_494:
                      _platform_memmove();
                      v196 = *(unsigned int **)(v112 + 24);
                      if (v196)
                      {
                        v197 = *v196;
                        v198 = 16 * v17;
                        if ((v197 & 0x80000000) == 0)
                        {
                          v199 = v196 + 1;
                          do
                          {
                            if ((int)v197 < (int)v17)
                            {
                              v200 = v55[4 * v197];
                              v55[4 * v197] = v200 + 1;
                              if (!v200)
                                v55[4 * v197 + 1] = v50;
                              v201 = &v55[4 * v197];
                              v201[2] = v50;
                              v201[3] = v56;
                            }
                            v202 = *v199++;
                            v197 = v202;
                          }
                          while ((v202 & 0x80000000) == 0);
                        }
                        v56 = (v56 + 1);
                      }
                      else
                      {
                        v198 = 16 * v17;
                      }
                      if (*(_DWORD *)(v287 + 84))
                      {
                        if ((v278 & 0x80000000) == 0)
                        {
                          v203 = *(unsigned int **)(v287 + 40);
                          v204 = *v203;
                          if ((v204 & 0x80000000) == 0)
                          {
                            v205 = v203 + 2;
                            do
                            {
                              v206 = (int)*(v205 - 1);
                              if (a5[4 * v206] && v55[4 * v206] && a5[4 * v206 + 2] == v55[4 * v206 + 2])
                              {
                                v207 = v55[4 * v204];
                                if (a5[4 * v204])
                                {
                                  if (!v207)
                                    goto LABEL_559;
LABEL_513:
                                  if (v55[4 * v204 + 2] > a5[4 * v204 + 2])
                                    goto LABEL_559;
                                  goto LABEL_516;
                                }
                                if (!v207)
                                  goto LABEL_513;
                              }
LABEL_516:
                              v208 = *v205;
                              v205 += 2;
                              v204 = v208;
                            }
                            while ((v208 & 0x80000000) == 0);
                          }
                        }
                      }
                      v209 = &v279[4 * *(int *)(v112 + 16)];
                      if (*v209 < v50)
                      {
                        v210 = v56;
                        v211 = *v118;
                        v212 = (int *)*((_QWORD *)v277 + 1);
                        *(_QWORD *)v277 = *v118;
                        *((_QWORD *)v277 + 1) = v55;
                        *v209 = v50;
                        *((_QWORD *)v209 + 1) = v277 + 8;
                        if (v211 == *(_QWORD *)(v287 + 16))
                        {
                          if (v278 == -1
                            || (int)v17 >= 1
                            && (*v55 < 1 ? (v213 = -1) : (v213 = v55[2]),
                                *a5 < 1 ? (v226 = -1) : (v226 = a5[2]),
                                v213 <= v226))
                          {
                            _platform_memmove();
                            v278 = v50;
                          }
                        }
                        v277 += 16;
                        goto LABEL_557;
                      }
                      if ((int)v17 < 1)
                      {
LABEL_559:
                        v227 = *(_QWORD *)(v112 + 64);
                        v118 = (uint64_t *)(v112 + 64);
                        v112 += 56;
                        if (!v227)
                          goto LABEL_563;
                        continue;
                      }
                      v210 = v56;
                      v214 = 0;
                      v215 = *(int **)(v287 + 32);
                      v216 = (int **)*((_QWORD *)v209 + 1);
                      v212 = *v216;
                      while (1)
                      {
                        v218 = *v215++;
                        v217 = v218;
                        if (v218 == 2)
                        {
                          v221 = v55[v214 / 4];
                          v222 = v212[v214 / 4];
                          if (!v221)
                            goto LABEL_541;
                          if (!v222)
                            goto LABEL_548;
                          v223 = v212[v214 / 4 + 1];
                          v224 = &v55[v214 / 4];
                        }
                        else
                        {
                          if (v217 != 1)
                          {
                            if (v217)
                              goto LABEL_545;
                            v219 = v212[v214 / 4 + 2];
                            v220 = &v55[v214 / 4];
                            goto LABEL_539;
                          }
                          v221 = v55[v214 / 4];
                          v222 = v212[v214 / 4];
                          if (!v221)
                          {
LABEL_541:
                            if (v222)
                              v225 = -1;
                            else
                              v225 = 0;
                            if (v225)
                            {
LABEL_547:
                              if (v225 < 1)
                                goto LABEL_558;
LABEL_548:
                              *v216 = v55;
                              if (*v118 == *(_QWORD *)(v287 + 16))
                              {
                                _platform_memmove();
                                v278 = v50;
                              }
LABEL_557:
                              v55 = v212;
LABEL_558:
                              v56 = v210;
                              v117 = v281;
                              goto LABEL_559;
                            }
                            goto LABEL_545;
                          }
                          if (!v222)
                            goto LABEL_548;
                          v223 = v55[v214 / 4 + 1];
                          v224 = &v212[v214 / 4];
                        }
                        v225 = v223 - v224[1];
                        if (v225)
                          goto LABEL_547;
                        v225 = v222 - v221;
                        if (v222 != v221)
                          goto LABEL_547;
                        if (v221 != 1)
                        {
                          v219 = v55[v214 / 4 + 2];
                          v220 = &v212[v214 / 4];
LABEL_539:
                          v225 = v219 - v220[2];
                          if (v225)
                            goto LABEL_547;
                        }
LABEL_545:
                        v214 += 16;
                        if (v198 == v214)
                          goto LABEL_558;
                      }
                    }
                    v268 = v170;
                    v183 = v169;
                    v184 = __collate_equiv_value(*(_QWORD *)(v287 + 56), (const __int32 *)&v290, 1uLL);
                    v169 = v183;
                    v170 = v268;
                    v171 = v184;
                    v167 = v259;
                    v147 = v260;
                  }
                  v168 = 1;
                  if (v173[1] == v171)
                    goto LABEL_488;
LABEL_484:
                  ++v172;
                  v173 += 2;
                  if (v172 >= v167)
                  {
LABEL_485:
                    v168 = 0;
                    v195 = 1;
                    goto LABEL_489;
                  }
                  goto LABEL_419;
                default:
                  goto LABEL_484;
              }
            }
            LODWORD(v289) = v43;
            v158 = ___toupper_l(v43, v154);
            v56 = v153;
            v117 = v281;
            goto LABEL_394;
          }
          if (!v50)
            goto LABEL_559;
          v148 = v288;
          if (!v288)
            goto LABEL_559;
          if (v43 == 95)
          {
            if (v288 == 95)
              goto LABEL_358;
            v149 = v56;
            v150 = 1;
          }
          else
          {
            if (v43 > 0x7F)
            {
              v156 = *(_xlocale **)(v287 + 56);
              v149 = v56;
              if (v43 < 0x100)
              {
                v160 = &__global_locale;
                if (v156 != (_xlocale *)-1)
                  v160 = *(_QWORD **)(v287 + 56);
                if (!v156)
                  v160 = &__c_locale;
                v152 = *(_DWORD *)(*(_QWORD *)(v160[166] + 120) + 4 * v43 + 60);
              }
              else
              {
                LOWORD(v152) = ___runetype_l(v43, v156);
                v148 = v288;
              }
            }
            else
            {
              v149 = v56;
              v152 = *v274;
            }
            v161 = v152 & 0x500;
            v150 = v161 != 0;
            if (v148 == 95)
            {
              v56 = v149;
              v117 = v281;
              if (!v161)
                goto LABEL_559;
              goto LABEL_358;
            }
          }
          if (v148 > 0x7F)
          {
            v163 = *(_xlocale **)(v287 + 56);
            if (v148 >= 0x100)
            {
              LOWORD(v164) = ___runetype_l(v148, v163);
              goto LABEL_413;
            }
            v165 = &__global_locale;
            if (v163 != (_xlocale *)-1)
              v165 = *(_QWORD **)(v287 + 56);
            if (!v163)
              v165 = &__c_locale;
            v162 = *(_RuneLocale **)(v165[166] + 120);
          }
          else
          {
            v162 = &_DefaultRuneLocale;
          }
          v164 = v162->__runetype[v148];
LABEL_413:
          v166 = v150 ^ ((v164 & 0x500) != 0);
          v56 = v149;
          v117 = v281;
          if ((v166 & 1) != 0)
            goto LABEL_559;
          goto LABEL_358;
        }
        break;
      }
      if (v43 != 95)
      {
        if (v43 > 0x7F)
        {
          v130 = *(_xlocale **)(v287 + 56);
          if (v43 < 0x100)
          {
            v134 = &__global_locale;
            if (v130 != (_xlocale *)-1)
              v134 = *(_QWORD **)(v287 + 56);
            if (!v130)
              v134 = &__c_locale;
            v127 = *(_DWORD *)(*(_QWORD *)(v134[166] + 120) + 4 * v43 + 60);
          }
          else
          {
            LOWORD(v127) = ___runetype_l(v43, v130);
          }
        }
        else
        {
          v127 = *v274;
        }
        if ((v127 & 0x500) == 0)
          goto LABEL_559;
      }
      if (v288 == 95)
        goto LABEL_559;
      if (v288 > 0x7F)
      {
        v136 = *(_xlocale **)(v287 + 56);
        if (v288 >= 0x100)
        {
          LOWORD(v137) = ___runetype_l(v288, v136);
          goto LABEL_333;
        }
        v138 = &__global_locale;
        if (v136 != (_xlocale *)-1)
          v138 = *(_QWORD **)(v287 + 56);
        if (!v136)
          v138 = &__c_locale;
        v135 = *(_RuneLocale **)(v138[166] + 120);
      }
      else
      {
        v135 = &_DefaultRuneLocale;
      }
      v137 = v135->__runetype[v288];
LABEL_333:
      if ((v137 & 0x500) != 0)
        goto LABEL_559;
      if ((*(_DWORD *)(v112 + 40) & 0x20) == 0)
        goto LABEL_357;
LABEL_283:
      if (!v50)
        goto LABEL_357;
      v122 = v288;
      if (!v288)
        goto LABEL_357;
      if (v43 == 95)
      {
        if (v288 == 95)
          goto LABEL_559;
        v123 = v56;
        v124 = 1;
      }
      else
      {
        if (v43 > 0x7F)
        {
          v133 = *(_xlocale **)(v287 + 56);
          v123 = v56;
          if (v43 < 0x100)
          {
            v141 = &__global_locale;
            if (v133 != (_xlocale *)-1)
              v141 = *(_QWORD **)(v287 + 56);
            if (!v133)
              v141 = &__c_locale;
            v129 = *(_DWORD *)(*(_QWORD *)(v141[166] + 120) + 4 * v43 + 60);
          }
          else
          {
            LOWORD(v129) = ___runetype_l(v43, v133);
            v122 = v288;
          }
        }
        else
        {
          v123 = v56;
          v129 = *v274;
        }
        v142 = v129 & 0x500;
        v124 = v142 != 0;
        if (v122 == 95)
        {
          v56 = v123;
          v117 = v281;
          if (v142)
            goto LABEL_559;
          goto LABEL_357;
        }
      }
      if (v122 > 0x7F)
      {
        v144 = *(_xlocale **)(v287 + 56);
        if (v122 >= 0x100)
        {
          LOWORD(v145) = ___runetype_l(v122, v144);
          goto LABEL_356;
        }
        v146 = &__global_locale;
        if (v144 != (_xlocale *)-1)
          v146 = *(_QWORD **)(v287 + 56);
        if (!v144)
          v146 = &__c_locale;
        v143 = *(_RuneLocale **)(v146[166] + 120);
      }
      else
      {
        v143 = &_DefaultRuneLocale;
      }
      v145 = v143->__runetype[v122];
LABEL_356:
      v181 = v124 == ((v145 & 0x500) != 0);
      v56 = v123;
      v117 = v281;
      if (v181)
        goto LABEL_559;
      goto LABEL_357;
    }
    break;
  }
  v50 += v238;
  if ((v36 & 0x80000000) == 0 && v36 <= v50)
  {
    v288 = 0;
    goto LABEL_258;
  }
  v111 = *v241;
  if ((v111 & 0x80000000) == 0)
  {
    ++v241;
    v288 = v111;
    goto LABEL_258;
  }
  v229 = v36 - v50;
  if (v36 < 0)
    v229 = 32;
  v238 = mbrtowc_l(&v288, v241, v229, &v291, *(locale_t *)(v287 + 56));
  if (v238 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    if (v36 < 0 || v238)
    {
      v241 += v238;
      goto LABEL_261;
    }
    v288 = 0;
    ++v241;
LABEL_258:
    LODWORD(v238) = 1;
    goto LABEL_261;
  }
  return 17;
}

void srandomdev(void)
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t NOCANCEL;
  pid_t v4;
  timeval v5;

  v0 = rand_type;
  v1 = rand_deg;
  if ((open_NOCANCEL() & 0x80000000) != 0
    || (v0 ? (v2 = 4 * v1) : (v2 = 4), NOCANCEL = read_NOCANCEL(), close_NOCANCEL(), NOCANCEL != v2))
  {
    v5.tv_sec = 0;
    *(_QWORD *)&v5.tv_usec = 0;
    gettimeofday(&v5, 0);
    v4 = getpid();
    srandom(LODWORD(v5.tv_sec) ^ (v4 << 16) ^ v5.tv_usec);
  }
  else if (rand_type)
  {
    fptr = &state[rand_sep];
    rptr[0] = state;
  }
}

acl_t acl_copy_int_native(const void *buf_p)
{
  acl_t result;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  int *v6;
  int v7;
  int v8;
  int *v9;

  if (*(_DWORD *)buf_p == 19710317)
  {
    result = acl_init(*((_DWORD *)buf_p + 9));
    if (result)
    {
      v3 = *((unsigned int *)buf_p + 9);
      *((_DWORD *)result + 3) = *((_DWORD *)buf_p + 10);
      *((_DWORD *)result + 1) = v3;
      if ((_DWORD)v3)
      {
        v4 = 0;
        v5 = (char *)result + 24;
        v6 = (int *)((char *)buf_p + 64);
        do
        {
          *((_DWORD *)v5 - 2) = -1407532799;
          *(_OWORD *)v5 = *(_OWORD *)(v6 - 5);
          v7 = *(v6 - 1);
          *((_DWORD *)v5 - 1) = v7 & 0xF;
          v8 = *v6;
          v6 += 6;
          *((_DWORD *)v5 + 4) = v7 & 0xFFFFFFF0;
          *((_DWORD *)v5 + 5) = v8;
          ++v4;
          v5 += 32;
        }
        while (v4 < v3);
      }
    }
  }
  else
  {
    v9 = __error();
    result = 0;
    *v9 = 22;
  }
  return result;
}

acl_t acl_init(int count)
{
  int *v1;
  _acl *v2;
  int v3;

  if (count < 0)
  {
    v1 = __error();
    v2 = 0;
    v3 = 22;
    goto LABEL_5;
  }
  if (count >= 0x81)
  {
    v1 = __error();
    v2 = 0;
    v3 = 12;
LABEL_5:
    *v1 = v3;
    return v2;
  }
  v2 = (_acl *)malloc_type_malloc(0x1010uLL, 0x1000040A06A8C30uLL);
  if (v2)
  {
    _platform_bzero();
    *(_DWORD *)v2 = -1407532798;
    *((_DWORD *)v2 + 2) = -1;
  }
  return v2;
}

uint64_t getopt_internal(uint64_t a1, uint64_t a2, unsigned __int8 *a3, _QWORD *a4, int *a5, unsigned int a6)
{
  unsigned __int8 *v8;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  int v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  char **v20;
  char **v21;
  int v22;
  uint64_t v23;
  char **v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  char **v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char **v38;
  uint64_t v39;
  char **v40;
  char **v41;
  uint64_t v42;
  _BOOL4 v43;
  uint64_t v44;
  char **v45;
  char **v46;
  uint64_t v47;
  char *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  int v53;
  _QWORD *v55;
  _BYTE *v56;

  if (!a3)
    return 0xFFFFFFFFLL;
  v8 = a3;
  v11 = optind;
  v12 = &optreset;
  if (optind)
  {
    v13 = optreset;
    v14 = getopt_internal_posixly_correct;
    if (getopt_internal_posixly_correct != -1 && optreset == 0)
    {
      v13 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    v11 = 1;
    optreset = 1;
    optind = 1;
    v13 = 1;
  }
  v14 = getenv("POSIXLY_CORRECT") != 0;
  getopt_internal_posixly_correct = v14;
LABEL_11:
  v16 = *v8;
  if (v16 == 45)
  {
    v17 = a6 | 2;
LABEL_20:
    ++v8;
    goto LABEL_22;
  }
  if (v14)
    v18 = 1;
  else
    v18 = v16 == 43;
  v17 = a6 & 0xFFFFFFFE;
  if (v18)
    v19 = v17;
  else
    v19 = a6;
  if (v16 == 43)
    goto LABEL_20;
  v17 = v19;
LABEL_22:
  v55 = a4;
  v56 = v8;
  optarg = 0;
  v20 = &place;
  v21 = &place;
  if (v13)
  {
    v22 = -1;
    nonopt_end = -1;
    nonopt_start = -1;
    v23 = 0xFFFFFFFFLL;
  }
  else
  {
    v23 = nonopt_start;
    v22 = nonopt_end;
  }
  v24 = &place;
  v25 = place;
  v26 = &EMSG_0;
  if (!v13)
  {
LABEL_26:
    v27 = *v25;
    if (!*v25)
      goto LABEL_27;
    goto LABEL_48;
  }
  while (1)
  {
LABEL_27:
    *v12 = 0;
    if ((int)v11 >= (int)a1)
    {
      *v24 = v26;
      if (v22 == -1)
      {
        if ((_DWORD)v23 == -1)
        {
LABEL_58:
          v42 = 0xFFFFFFFFLL;
          *((_DWORD *)v21 + 213) = -1;
          *((_DWORD *)v20 + 214) = -1;
          return v42;
        }
      }
      else
      {
        v39 = a2;
        v40 = v20;
        v41 = v21;
        permute_args(v23, v22, v11, v39);
        v21 = v41;
        v20 = v40;
        LODWORD(v23) = v23 - v22 + optind;
      }
      optind = v23;
      goto LABEL_58;
    }
    v28 = *(char **)(a2 + 8 * (int)v11);
    *v24 = v28;
    if (*v28 == 45)
    {
      v27 = v28[1];
      if (v28[1])
        break;
    }
    *v24 = v26;
    if ((v17 & 2) != 0)
    {
      optind = v11 + 1;
      optarg = v28;
      return 1;
    }
    if ((v17 & 1) == 0)
      return 0xFFFFFFFFLL;
    if ((_DWORD)v23 == -1)
    {
      v29 = 0;
      *((_DWORD *)v20 + 214) = v11;
      v23 = v11;
    }
    else if (v22 == -1)
    {
      v29 = 0;
    }
    else
    {
      v30 = v11;
      v31 = a2;
      v11 = (uint64_t)v20;
      v32 = v17;
      v33 = v12;
      v34 = v24;
      v35 = a2;
      v36 = v26;
      v37 = a1;
      v38 = v21;
      permute_args(v23, v22, v30, v31);
      v21 = v38;
      a1 = v37;
      v26 = v36;
      a2 = v35;
      v24 = v34;
      v12 = v33;
      v17 = v32;
      v20 = (char **)v11;
      LODWORD(v11) = optind;
      v23 = (v23 - v22 + optind);
      *((_DWORD *)v20 + 214) = v23;
      *((_DWORD *)v21 + 213) = -1;
      v29 = *v12;
      v22 = -1;
    }
    v11 = (v11 + 1);
    optind = v11;
    v25 = v26;
    if (!v29)
      goto LABEL_26;
  }
  v25 = v28 + 1;
  if ((_DWORD)v23 != -1 && v22 == -1)
  {
    *((_DWORD *)v21 + 213) = v11;
    v22 = v11;
  }
  *v24 = v25;
  if (v27 == 45)
  {
    if (v28[2])
    {
      v27 = 45;
      goto LABEL_48;
    }
    optind = v11 + 1;
    *v24 = v26;
    if (v22 != -1)
    {
      v44 = a2;
      v45 = v20;
      v46 = v21;
      permute_args(v23, v22, v11 + 1, v44);
      v21 = v46;
      v20 = v45;
      optind += v23 - v22;
    }
    goto LABEL_58;
  }
LABEL_48:
  if (!v55 || v25 == *(char **)(a2 + 8 * (int)v11) || (v17 & 4) == 0 && v27 != 45)
    goto LABEL_66;
  dash_prefix = 0;
  if (v27 == 58)
  {
    v43 = 0;
LABEL_63:
    v47 = parse_long_options(a2, v56, v55, a5, v43, v17);
    if ((_DWORD)v47 != -1)
    {
      v42 = v47;
      *v24 = v26;
      return v42;
    }
    v25 = *v24;
LABEL_66:
    v48 = v25 + 1;
    *v24 = v25 + 1;
    v49 = *v25;
    v42 = (char)v49;
    if (v49 != 58)
    {
      if (v49 == 45)
      {
        if (!*v48)
        {
          v50 = _platform_strchr();
          if (!v50)
            return 0xFFFFFFFFLL;
LABEL_79:
          if (*(_BYTE *)(v50 + 1) == 58)
          {
            optarg = 0;
            if (*v48)
            {
              optarg = v48;
              v53 = optind;
            }
            else
            {
              v53 = optind;
              if (*(_BYTE *)(v50 + 2) != 58)
              {
                v53 = optind + 1;
                optind = v53;
                if (v53 >= (int)a1)
                {
                  *v24 = v26;
                  if (opterr && *v56 != 58)
                    warnx("option requires an argument -- %c", v42);
                  optopt = v42;
                  goto LABEL_106;
                }
                optarg = *(char **)(a2 + 8 * v53);
              }
            }
            *v24 = v26;
            optind = v53 + 1;
          }
          else if (!*v48)
          {
            ++optind;
          }
          return v42;
        }
LABEL_88:
        if (opterr && *v56 != 58)
          getopt_internal_cold_1();
        optopt = v42;
        return 63;
      }
      v50 = _platform_strchr();
      if (v50)
      {
        if (v55 && (_DWORD)v42 == 87 && *(_BYTE *)(v50 + 1) == 59)
        {
          if (!*v48)
          {
            v51 = optind + 1;
            optind = v51;
            if ((int)v51 >= (int)a1)
            {
              *v24 = v26;
              if (opterr && *v56 != 58)
                warnx("option requires an argument -- %c", 87);
              optopt = 87;
              goto LABEL_106;
            }
            *v24 = *(char **)(a2 + 8 * v51);
          }
          dash_prefix = 2;
          result = parse_long_options(a2, v56, v55, a5, 0, v17);
          *v24 = v26;
          return result;
        }
        goto LABEL_79;
      }
      if ((_DWORD)v42 == 45)
      {
        if (!*v48)
          return 0xFFFFFFFFLL;
        goto LABEL_88;
      }
    }
    if (!*v48)
      ++optind;
    goto LABEL_88;
  }
  if (v27 != 45)
  {
    v43 = _platform_strchr() != 0;
    goto LABEL_63;
  }
  *v24 = v25 + 1;
  if (v25[1])
  {
    v43 = 0;
    dash_prefix = 1;
    goto LABEL_63;
  }
LABEL_106:
  if (*v56 == 58)
    return 58;
  else
    return 63;
}

locale_t uselocale(locale_t a1)
{
  unsigned int *v1;
  BOOL v2;
  locale_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  void (*v7)(unsigned int *);
  locale_t result;
  int *v9;

  if (a1 == (locale_t)-1)
  {
LABEL_5:
    v2 = a1 == (locale_t)-1 || a1 == (locale_t)&__global_locale;
    if (v2)
      v3 = 0;
    else
      v3 = a1;
    if (!v2)
    {
      do
        v4 = __ldaxr((unsigned int *)a1);
      while (__stlxr(v4 + 1, (unsigned int *)a1));
    }
    v1 = (unsigned int *)pthread_getspecific(__locale_key);
    pthread_setspecific(__locale_key, v3);
    if (v1)
    {
      do
      {
        v5 = __ldaxr(v1);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v1));
      if (!v6)
      {
        v7 = (void (*)(unsigned int *))*((_QWORD *)v1 + 1);
        if (v7)
          v7(v1);
      }
    }
    goto LABEL_18;
  }
  if (a1)
  {
    if (*((_QWORD *)a1 + 163) != 0x786C6F63616C6530)
    {
      v9 = __error();
      result = 0;
      *v9 = 22;
      return result;
    }
    goto LABEL_5;
  }
  v1 = (unsigned int *)pthread_getspecific(__locale_key);
LABEL_18:
  if (v1)
    return (locale_t)v1;
  else
    return (locale_t)-1;
}

int timespec_get(timespec *ts, int base)
{
  return base == 1 && clock_gettime(_CLOCK_REALTIME, ts) != -1;
}

int *shiftRightMPWithRounding(int *result, unint64_t a2, unsigned int a3, int a4, char a5, int a6)
{
  int *v6;
  char v7;
  int v8;
  unsigned int *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  int v13;
  unint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  int *v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  int v23;
  int v24;
  char v25;
  unsigned int v26;
  int v27;
  unint64_t v28;
  int *v29;
  int v30;
  int v31;
  _QWORD v32[2];

  v6 = result;
  v32[0] = result;
  v32[1] = a2;
  if (!a3)
    return result;
  if ((a3 & 0x80000000) != 0)
  {
    shiftLeftMP((uint64_t)v32, -a3);
    return (int *)v32[0];
  }
  result += a3 >> 5;
  v7 = a3 & 0x1F;
  if ((a3 & 0x1F) == 0)
  {
    HIDWORD(v14) = a6;
    LODWORD(v14) = a6;
    v13 = v14 >> 22;
    if (v13 != 1)
    {
      if (v13 == 3)
        return result;
      if (v13 != 2)
      {
        v29 = result - 1;
        v30 = *(result - 1);
        if ((v30 & 0x80000000) == 0)
          return result;
        if (v30 == 0x80000000)
        {
          for (; v6 < v29; a4 |= v31)
            v31 = *v6++;
          if (!a4 && ((unint64_t)result >= a2 || (*(_BYTE *)result & 1) == 0))
            return result;
        }
LABEL_19:
        v17 = 1;
        v18 = result;
        do
        {
          if ((unint64_t)v18 >= a2)
            break;
          v19 = v17 + *v18;
          *v18++ = v19;
          v17 = HIDWORD(v19);
        }
        while (v17);
        goto LABEL_46;
      }
      a5 ^= 1u;
    }
    if (a3 >= 0x20)
    {
      do
      {
        v15 = *v6++;
        a4 |= v15;
      }
      while (v6 < result);
    }
    if (a4)
      v16 = a5;
    else
      v16 = 1;
    if ((v16 & 1) != 0)
      return result;
    goto LABEL_19;
  }
  v9 = (unsigned int *)(result + 1);
  v8 = *result;
  v10 = *result >> v7;
  if ((unint64_t)(result + 1) >= a2)
  {
    v12 = (unsigned int *)&v6[a3 >> 5];
  }
  else
  {
    do
    {
      v11 = (unint64_t)*v9 << (32 - v7);
      *(v9 - 1) = v11 | v10;
      v10 = HIDWORD(v11);
      ++v9;
    }
    while ((unint64_t)v9 < a2);
    v12 = v9 - 1;
  }
  if (v10)
    *v12 = v10;
  else
    a2 -= 4;
  v20 = v8 & ~(-1 << v7);
  HIDWORD(v22) = a6;
  LODWORD(v22) = a6;
  v21 = v22 >> 22;
  switch(v21)
  {
    case 1:
      goto LABEL_31;
    case 3:
      return result;
    case 2:
      a5 ^= 1u;
LABEL_31:
      v23 = v20 | a4;
      if (a3 >= 0x20)
      {
        do
        {
          v24 = *v6++;
          v23 |= v24;
        }
        while (v6 < result);
      }
      if (v23)
        v25 = a5;
      else
        v25 = 1;
      if ((v25 & 1) != 0)
        return result;
      goto LABEL_43;
  }
  v26 = 1 << (v7 - 1);
  if (v20 >= v26)
  {
    if (v20 > v26)
      goto LABEL_43;
    if (a3 >= 0x20)
    {
      do
      {
        v27 = *v6++;
        a4 |= v27;
      }
      while (v6 < result);
    }
    if (a4 || a2 > (unint64_t)result && (*(_BYTE *)result & 1) != 0)
    {
LABEL_43:
      v17 = 1;
      v18 = result;
      do
      {
        if ((unint64_t)v18 >= a2)
          break;
        v28 = v17 + *v18;
        *v18++ = v28;
        v17 = HIDWORD(v28);
      }
      while (v17);
LABEL_46:
      if (v17)
        *v18 = v17;
    }
  }
  return result;
}

uint64_t shiftLeftMP(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  _DWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = result;
  if (a2 <= 0)
    v3 = -(-a2 & 0x1F);
  else
    v3 = a2 & 0x1F;
  if (a2 >= 32)
  {
    v4 = a2 >> 5;
    _platform_memmove();
    result = _platform_bzero();
    *(_QWORD *)(v2 + 8) += 4 * v4;
  }
  if (v3 >= 1)
  {
    v5 = *(_DWORD **)v2;
    v6 = *(_QWORD *)(v2 + 8);
    if (*(_QWORD *)v2 < v6)
    {
      LODWORD(v7) = 0;
      do
      {
        v8 = (unint64_t)*v5 << v3;
        *v5++ = v8 | v7;
        v7 = HIDWORD(v8);
      }
      while ((unint64_t)v5 < v6);
      if (v7)
      {
        *v5 = HIDWORD(v8);
        *(_QWORD *)(v2 + 8) = v5 + 1;
      }
    }
  }
  return result;
}

_QWORD *multiplyByFiveToTheN(_QWORD *result, int a2)
{
  _DWORD *v2;
  _DWORD *v3;
  int v4;
  _DWORD *v5;
  unint64_t v6;
  unint64_t v7;
  signed __int128 v8;
  __int128 v9;
  unint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  signed __int128 v18;
  __int128 v19;
  unint64_t v20;
  BOOL v21;

  if (a2 >= 41)
  {
    v2 = (_DWORD *)*result;
    v3 = (_DWORD *)result[1];
    do
    {
      v4 = a2;
      v5 = v3;
      v3 = v2;
      if (v2 < v5)
      {
        v6 = 0;
        v7 = 0;
        v3 = v2;
        do
        {
          v8 = __PAIR128__(493038065, 0xC35CA4BFABB9F561) * *v3 + __PAIR128__(v7, v6);
          *v3++ = v8;
          v6 = v8 >> 32;
          v7 = HIDWORD(*((_QWORD *)&v8 + 1));
        }
        while (v3 < v5);
        if (*((_QWORD *)&v8 + 1) | DWORD1(v8))
        {
          do
          {
            *v3++ = v6;
            *((_QWORD *)&v9 + 1) = v7;
            *(_QWORD *)&v9 = v6;
            v6 = v9 >> 32;
            v10 = v6 | HIDWORD(v7);
            v7 >>= 32;
          }
          while (v10);
        }
      }
      a2 -= 40;
    }
    while (v4 > 80);
    result[1] = v3;
  }
  if (a2 >= 1)
  {
    v11 = (_DWORD *)*result;
    v12 = (_DWORD *)result[1];
    do
    {
      v13 = v12;
      if (a2 >= 27)
        v14 = 27;
      else
        v14 = a2;
      v12 = v11;
      if (v11 < v13)
      {
        v15 = 0;
        v16 = 0;
        v17 = powersOfFive[v14];
        v12 = v11;
        do
        {
          v18 = *v12 * (unsigned __int128)v17 + __PAIR128__(v16, v15);
          *v12++ = v18;
          v15 = v18 >> 32;
          v16 = HIDWORD(*((_QWORD *)&v18 + 1));
        }
        while (v12 < v13);
        if (*((_QWORD *)&v18 + 1) | DWORD1(v18))
        {
          do
          {
            *v12++ = v15;
            *((_QWORD *)&v19 + 1) = v16;
            *(_QWORD *)&v19 = v15;
            v15 = v19 >> 32;
            v20 = v15 | HIDWORD(v16);
            v16 >>= 32;
          }
          while (v20);
        }
      }
      v21 = __OFSUB__(a2, 27);
      a2 -= 27;
    }
    while (!((a2 < 0) ^ v21 | (a2 == 0)));
    result[1] = v12;
  }
  return result;
}

int killpg(pid_t a1, int a2)
{
  if (a1 != 1)
    return __kill();
  *__error() = 1;
  return -1;
}

uint64_t initMPFromDigits(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _DWORD *v3;
  unint64_t i;
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  _DWORD *v15;
  _DWORD *v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  BOOL v20;
  _DWORD *v21;
  _DWORD *v22;
  unint64_t v23;
  unint64_t v24;
  int v25;

  v2 = (_QWORD *)result;
  v3 = *(_DWORD **)result;
  for (i = *(_QWORD *)(a2 + 64); i; i >>= 32)
    *v3++ = i;
  *(_QWORD *)(result + 8) = v3;
  v5 = *(_DWORD *)(a2 + 72);
  v6 = *(_DWORD *)(a2 + 24);
  if (v5 <= v6)
    v7 = *(_DWORD *)(a2 + 88);
  else
    v7 = *(_DWORD *)(a2 + 88) - v5 + v6;
  if (v5 <= v6)
    v8 = 0;
  else
    v8 = v5 - v6;
  v9 = *(unsigned __int8 **)(a2 + 80);
  if (v7 >= 1)
  {
    do
    {
      v10 = 0;
      v11 = 0;
      if (v7 >= 9)
        v12 = 9;
      else
        v12 = v7;
      do
      {
        do
        {
          v13 = *v9++;
          v14 = v13 - 48;
        }
        while ((v13 - 48) > 9);
        v11 = 10 * v11 + v14;
        ++v10;
      }
      while (v10 != v12);
      v16 = (_DWORD *)*v2;
      v15 = (_DWORD *)v2[1];
      if (*v2 < (unint64_t)v15)
      {
        v17 = 0;
        v18 = initMPFromDigits_powersOfTen[v12];
        do
        {
          v19 = v17 + *v16 * (unint64_t)v18;
          *v16++ = v19;
          v17 = HIDWORD(v19);
        }
        while (v16 < v15);
        if (v17)
        {
          *v15 = v17;
          v2[1] = v15 + 1;
        }
      }
      result = addToMP((uint64_t)v2, v11);
      v20 = __OFSUB__(v7, v12);
      v7 -= v12;
    }
    while (!((v7 < 0) ^ v20 | (v7 == 0)));
  }
  if (v8 >= 1)
  {
    v22 = (_DWORD *)*v2;
    v21 = (_DWORD *)v2[1];
    if (*v2 < (unint64_t)v21)
    {
      v23 = 0;
      do
      {
        v24 = v23 + 10 * *v22;
        *v22++ = v24;
        v23 = HIDWORD(v24);
      }
      while (v22 < v21);
      if (v23)
      {
        *v21 = v23;
        v2[1] = v21 + 1;
      }
    }
    do
    {
      v25 = *v9;
      if (v25 == 48)
      {
        --v8;
      }
      else if ((v25 - 49) <= 8)
      {
        return addToMP((uint64_t)v2, 1uLL);
      }
      ++v9;
    }
    while (v8 > 0);
  }
  return result;
}

tm *__cdecl gmtime_r(const time_t *a1, tm *a2)
{
  return (tm *)gmtsub((uint64_t *)a1, 0, (uint64_t)a2);
}

uint64_t generalSlowpath(uint64_t a1, int a2, int *a3, int a4)
{
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  int *v21;
  int v22;
  int v23;
  int *v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  char *v35;
  int v36;
  unint64_t v37;
  unsigned int *v38;
  unint64_t v39;
  int64_t v40;
  int *v41;
  int v42;
  int *v43;
  int v44;
  int v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  int *v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  _BOOL4 v54;
  int v55;
  int *v56;
  unint64_t v57;
  unsigned int *v58;
  unsigned int *v59;
  int v60;
  int v61;
  unsigned int *v62;
  unsigned int *v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  unsigned int v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  unint64_t v75;
  unsigned int v76;
  BOOL v77;
  unint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  unint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  int *v92;
  int v93;
  uint64_t v94;
  uint64_t result;
  int v96;
  int v97;
  uint64_t v98;
  unsigned int v99;
  _BYTE *v100;
  _BYTE *v101;
  unint64_t v102;
  int v103;
  char v104;
  char *v105;
  char *v106;
  int *v107;
  int *v108;
  unsigned int *v109;
  unint64_t v110;
  unint64_t v111;
  int *v112;

  v7 = *(_DWORD *)(a1 + 72);
  v8 = *(_DWORD *)(a1 + 24);
  if (v7 > v8)
    v9 = v8 + 1;
  else
    v9 = *(_DWORD *)(a1 + 72);
  v10 = *(_DWORD *)(a1 + 92) - v9 + v7;
  v11 = (1701 * v9) >> 9;
  if (v10 >= 0)
    v12 = v10;
  else
    v12 = -v10;
  v13 = (1189 * v12 + 1189) >> 9;
  v14 = v13 + 31;
  if (v13 < -31)
    v14 = v13 + 62;
  v15 = v14 >> 5;
  if ((v10 & 0x80000000) == 0)
  {
    v17 = v11 + 31;
    v16 = v11 < -31;
    v18 = v11 + 62;
    if (!v16)
      v18 = v17;
    v19 = v15 + (v18 >> 5);
    if (v19 > a4)
      generalSlowpath_cold_1();
    _platform_bzero();
    v111 = (unint64_t)a3;
    v112 = a3;
    initMPFromDigits((uint64_t)&v111, a1);
    multiplyByFiveToTheN(&v111, v10);
    v21 = (int *)v111;
    v20 = (unint64_t)v112;
    if (v19 < (uint64_t)((uint64_t)v112 - v111) >> 2)
      generalSlowpath_cold_2();
    v22 = bitCountMP(v111, (uint64_t)v112);
    v23 = v22 + v10;
    v24 = shiftRightMPWithRounding(v21, v20, v22 - *(_DWORD *)a1, 0, *(_BYTE *)(a1 + 96), a2);
    v26 = v25;
    if ((int)bitCountMP((uint64_t)v24, v25) <= *(_DWORD *)a1)
    {
LABEL_88:
      if (v23 > *(_DWORD *)(a1 + 8))
        return overflow(a1);
      goto LABEL_92;
    }
    v27 = (unsigned int *)(v24 + 1);
    v28 = (unint64_t)*v24 >> 1;
    if ((unint64_t)(v24 + 1) < v26)
    {
      do
      {
        v29 = *v27;
        *(v27 - 1) = v28 | ((_DWORD)v29 << 31);
        v28 = v29 >> 1;
        ++v27;
      }
      while ((unint64_t)v27 < v26);
LABEL_80:
      v92 = (int *)(v27 - 1);
      goto LABEL_82;
    }
    goto LABEL_81;
  }
  v30 = v13 + *(_DWORD *)a1 + 2;
  if (v11 <= v30)
    v11 = v30;
  v31 = v11 + 31;
  v16 = v11 < -31;
  v32 = v11 + 62;
  if (!v16)
    v32 = v31;
  v33 = (v32 >> 5) + 2;
  if (v33 + v15 > a4)
    generalSlowpath_cold_3();
  _platform_bzero();
  v107 = a3;
  v108 = a3;
  v34 = v33;
  v35 = (char *)&a3[v33];
  v105 = v35;
  if (-v10 >= 27)
    v36 = 27;
  else
    v36 = -v10;
  v37 = powersOfFive[v36];
  do
  {
    *(_DWORD *)v35 = v37;
    v35 += 4;
    v37 >>= 32;
  }
  while (v37);
  v106 = v35;
  multiplyByFiveToTheN(&v105, -v10 - v36);
  v38 = (unsigned int *)v105;
  v39 = (unint64_t)v106;
  v40 = v106 - v105;
  if (v15 < (v106 - v105) >> 2)
    generalSlowpath_cold_4();
  if (!*((_DWORD *)v106 - 1))
    generalSlowpath_cold_5();
  initMPFromDigits((uint64_t)&v107, a1);
  v41 = v108;
  if (!*(v108 - 1))
    generalSlowpath_cold_6();
  v42 = bitCountMP((uint64_t)v38, v39);
  v43 = v107;
  v44 = v42 - bitCountMP((uint64_t)v107, (uint64_t)v41) + *(_DWORD *)a1;
  if (v44 < -1)
  {
    v45 = 0;
  }
  else
  {
    v45 = v44 + 2;
    shiftLeftMP((uint64_t)&v107, v44 + 2);
    v41 = v108;
    if (!*(v108 - 1))
      generalSlowpath_cold_7();
    v43 = v107;
    if (v34 <= v108 - v107)
      generalSlowpath_cold_13();
  }
  v111 = (unint64_t)v43;
  v112 = v41;
  v109 = v38;
  v110 = v39;
  if (v41 <= v43)
    generalSlowpath_cold_12();
  if (v39 <= (unint64_t)v38)
    generalSlowpath_cold_11();
  if (!*(v41 - 1))
    generalSlowpath_cold_8();
  v46 = *(_DWORD *)(v39 - 4);
  if (!v46)
    generalSlowpath_cold_9();
  if (v40 == 4)
  {
    v47 = 0;
    v48 = *v38;
    v49 = v41;
    do
    {
      v50 = *--v49;
      v51 = v50 | (v47 << 32);
      *v49 = v51 / v48;
      v47 = v51 - (v51 / v48) * (unint64_t)v48;
    }
    while (v49 > v43);
    v52 = (unint64_t)(v41 + 1);
    do
    {
      v53 = *(_DWORD *)(v52 - 8);
      v52 -= 4;
    }
    while (!v53);
    v54 = v47 != 0;
  }
  else
  {
    v55 = __clz(v46);
    shiftLeftMP((uint64_t)&v109, v55);
    shiftLeftMP((uint64_t)&v111, v55);
    v56 = v112;
    v57 = v110;
    if (*(v112 - 1) >= *(_DWORD *)(v110 - 4))
    {
      *v112 = 0;
      ++v56;
    }
    v58 = v109;
    v59 = (unsigned int *)v111;
    if (v56 >= (int *)v109 && v57 >= v111)
      generalSlowpath_cold_10();
    v43 = v56 + 1;
    v60 = (((unint64_t)v56 - v111) >> 2) - ((v57 - (unint64_t)v109) >> 2);
    if (v60 < 1)
    {
      v62 = (unsigned int *)v56;
    }
    else
    {
      v61 = 0;
      v62 = (unsigned int *)v56;
      do
      {
        v63 = v62;
        v64 = *--v62;
        v65 = *(v62 - 1) | ((unint64_t)v64 << 32);
        v66 = *(unsigned int *)(v57 - 4);
        if (v64 == (_DWORD)v66)
          LODWORD(v67) = -1;
        else
          v67 = v65 / v66;
        do
        {
          v68 = v67;
          v69 = v67;
          v67 = v65 - v66 * (unint64_t)v67;
          if (HIDWORD(v67))
            break;
          v70 = *(v63 - 3) | (v67 << 32);
          LODWORD(v67) = v68 - 1;
        }
        while (*(unsigned int *)(v57 - 8) * (unint64_t)v69 > v70);
        if ((unint64_t)v58 < v57)
        {
          v71 = 0;
          v72 = ~((v57 - (unint64_t)v58) >> 2);
          v73 = v58;
          do
          {
            v74 = *v73++;
            v75 = v71 + v74 * (unint64_t)v69;
            v76 = v63[v72];
            v77 = v76 >= v75;
            v63[v72] = v76 - v75;
            v71 = HIDWORD(v75);
            if (!v77)
              ++v71;
            ++v72;
          }
          while ((unint64_t)v73 < v57);
          if (v71 > *v62)
          {
            v78 = 0;
            v79 = ~((v57 - (unint64_t)v58) >> 2);
            v80 = v58;
            do
            {
              v81 = *v80++;
              v82 = v78 + v81 + v63[v79];
              v63[v79] = v82;
              v78 = HIDWORD(v82);
              ++v79;
            }
            while ((unint64_t)v80 < v57);
            --v68;
          }
        }
        *--v43 = v68;
        ++v61;
      }
      while (v61 != v60);
    }
    if (v59 >= v62)
    {
      v54 = 0;
    }
    else
    {
      v83 = 0;
      do
      {
        v84 = *v59++;
        v83 |= v84;
      }
      while (v59 < v62);
      v54 = v83 != 0;
    }
    v52 = (unint64_t)(v56 + 2);
    do
    {
      v85 = *(_DWORD *)(v52 - 8);
      v52 -= 4;
    }
    while (!v85);
  }
  v86 = bitCountMP((uint64_t)v43, v52);
  v87 = v10 - v45;
  v23 = v10 - v45 + v86;
  v88 = *(_DWORD *)a1;
  v89 = *(_DWORD *)(a1 + 4);
  if (v23 > v89)
  {
    v24 = shiftRightMPWithRounding(v43, v52, v86 - v88, v54, *(_BYTE *)(a1 + 96), a2);
    v26 = v90;
    if ((int)bitCountMP((uint64_t)v24, v90) <= *(_DWORD *)a1)
      goto LABEL_88;
    v27 = (unsigned int *)(v24 + 1);
    v28 = (unint64_t)*v24 >> 1;
    if ((unint64_t)(v24 + 1) < v26)
    {
      do
      {
        v91 = *v27;
        *(v27 - 1) = v28 | ((_DWORD)v91 << 31);
        v28 = v91 >> 1;
        ++v27;
      }
      while ((unint64_t)v27 < v26);
      goto LABEL_80;
    }
LABEL_81:
    v92 = v24;
LABEL_82:
    ++v23;
    if (v28)
      *v92 = v28;
    else
      v26 -= 4;
    goto LABEL_88;
  }
  v93 = v89 - v88;
  if (v23 <= v93)
    return underflow(a1);
  v24 = shiftRightMPWithRounding(v43, v52, v93 - v87 + 1, v54, *(_BYTE *)(a1 + 96), a2);
  v26 = v94;
  if ((int)bitCountMP((uint64_t)v24, v94) >= *(_DWORD *)a1)
  {
    v23 = v89 + 1;
  }
  else
  {
    *__error() = 34;
    v23 = v89;
  }
LABEL_92:
  v96 = *(_DWORD *)a1 + 31;
  if (*(int *)a1 < -31)
    v96 = *(_DWORD *)a1 + 62;
  if ((uint64_t)v96 >> 5 > (unint64_t)((uint64_t)(v26 - (_QWORD)v24) >> 2))
    _platform_bzero();
  result = _platform_memmove();
  v97 = v23 - *(_DWORD *)(a1 + 4);
  v98 = *(int *)(a1 + 12);
  if ((int)v98 <= 8)
    v97 = (unsigned __int16)(v23 - *(_WORD *)(a1 + 4)) << (*(_BYTE *)a1 - 8 * v98 + 15);
  v99 = v97 | (*(unsigned __int8 *)(a1 + 96) << 15);
  v100 = *(_BYTE **)(a1 + 32);
  v101 = &v100[v98];
  HIDWORD(v102) = *(_DWORD *)(a1 + 12);
  LODWORD(v102) = v98 - 2;
  switch((v102 >> 1))
  {
    case 0u:
      v103 = v100[1] & 3 | (v99 >> 8);
      goto LABEL_105;
    case 1u:
      v104 = v100[2] & 0x7F;
      goto LABEL_102;
    case 3u:
      v104 = v100[6] & 0xF;
LABEL_102:
      LOBYTE(v97) = v104 | v97;
      goto LABEL_103;
    case 4u:
    case 7u:
LABEL_103:
      *(v101 - 2) = v97;
      break;
    default:
      break;
  }
  v103 = v99 >> 8;
LABEL_105:
  *(v101 - 1) = v103;
  return result;
}

int ferror(FILE *a1)
{
  int v2;

  flockfile(a1);
  v2 = ((unsigned __int16)a1->_flags >> 6) & 1;
  funlockfile(a1);
  return v2;
}

uint64_t bitCountMP(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  if (a2 == a1)
    return 0;
  v2 = *(_DWORD *)(a2 - 4);
  if (!v2)
    bitCountMP_cold_1();
  return 8 * ((_DWORD)a2 - (_DWORD)a1) - __clz(v2);
}

char *__stpcpy_chk(char *a1, const char *a2, unint64_t a3)
{
  char *v6;
  unint64_t v7;
  char *v8;

  v6 = stpcpy(a1, a2);
  v7 = v6 - a1 + 1;
  if (v7 > a3)
    __chk_fail_overflow();
  v8 = v6;
  if (__chk_assert_no_overlap)
    __chk_overlap((unint64_t)a1, v7, (unint64_t)a2, v7);
  return v8;
}

int sigvec(int a1, sigvec *a2, sigvec *a3)
{
  return sigvec__(a1, (const sigaction *)a2, (sigaction *)a3, 1);
}

uint64_t sigvec__(int a1, const sigaction *a2, sigaction *a3, int a4)
{
  uint64_t result;

  if (a2)
    a2->sa_flags ^= 2u;
  if (a4)
  {
    result = sigaction(a1, a2, a3);
    if (!a3)
      return result;
  }
  else
  {
    result = _sigaction_nobind();
    if (!a3)
      return result;
  }
  if (!(_DWORD)result)
    a3->sa_flags ^= 2u;
  return result;
}

uint64_t _sigvec_nobind(int a1, const sigaction *a2, sigaction *a3)
{
  return sigvec__(a1, a2, a3, 0);
}

int sigsetmask(int a1)
{
  int result;
  sigset_t v2;
  sigset_t v3;

  v3 = a1;
  v2 = 0;
  result = sigprocmask(3, &v3, &v2);
  if (!result)
    return v2;
  return result;
}

int sigblock(int a1)
{
  int result;
  sigset_t v2;
  sigset_t v3;

  v3 = a1;
  v2 = 0;
  result = sigprocmask(1, &v3, &v2);
  if (!result)
    return v2;
  return result;
}

uint64_t sigpause_NOCANCEL(int a1)
{
  char v1;
  sigset_t v3;

  v1 = a1;
  if (!*MEMORY[0x1E0C88C20])
    *MEMORY[0x1E0C88C20] = 1;
  v3 = 0;
  if ((a1 - 32) > 0xFFFFFFE0)
  {
    if ((sigprocmask(1, 0, &v3) & 0x80000000) == 0)
    {
      v3 &= ~(1 << (v1 - 1));
      return sigsuspend_NOCANCEL();
    }
  }
  else
  {
    *__error() = 22;
  }
  return 0xFFFFFFFFLL;
}

int sighold(int a1)
{
  sigset_t v2;

  if ((a1 - 32) > 0xFFFFFFE0)
  {
    v2 = 1 << (a1 - 1);
    return sigprocmask(1, &v2, 0);
  }
  else
  {
    *__error() = 22;
    return -1;
  }
}

int sigrelse(int a1)
{
  sigset_t v2;

  if ((a1 - 32) > 0xFFFFFFE0)
  {
    v2 = 1 << (a1 - 1);
    return sigprocmask(2, &v2, 0);
  }
  else
  {
    *__error() = 22;
    return -1;
  }
}

int sigignore(int a1)
{
  if (signal(a1, (void (__cdecl *)(int))1) == (void (__cdecl *)(int))-1)
    return -1;
  else
    return 0;
}

void (__cdecl *__cdecl sigset(int a1, void (__cdecl *a2)(int)))(int)
{
  sigset_t v4;
  void (__cdecl *v5)(int);
  uint64_t v6;
  sigaction v8;
  sigset_t v9;

  v9 = 0;
  v8.__sigaction_u.__sa_handler = 0;
  *(_QWORD *)&v8.sa_mask = 0;
  if ((a1 - 32) <= 0xFFFFFFE0)
  {
    *__error() = 22;
    return (void (__cdecl *)(int))-1;
  }
  if (sigprocmask(0, 0, &v9) == -1)
    return (void (__cdecl *)(int))-1;
  v4 = v9 & (1 << (a1 - 1));
  if (a2 == (void (__cdecl *)(int))5)
  {
    if (v4)
      return (void (__cdecl *)(int))5;
    if (sigaction(a1, 0, &v8) != -1 && sighold(a1) != -1)
      return v8.__sigaction_u.__sa_handler;
    return (void (__cdecl *)(int))-1;
  }
  if (v4 && sigrelse(a1) == -1)
    return (void (__cdecl *)(int))-1;
  v5 = signal(a1, a2);
  v6 = 5;
  if (!v4)
    v6 = (uint64_t)v5;
  if (v5 == (void (__cdecl *)(int))-1)
    return (void (__cdecl *)(int))-1;
  else
    return (void (__cdecl *)(int))v6;
}

int clock_getres(clockid_t __clock_id, timespec *__res)
{
  int result;
  uint32_t v4;
  uint64_t v5;
  mach_timebase_info info;

  if (__clock_id > _CLOCK_THREAD_CPUTIME_ID)
  {
LABEL_10:
    *__error() = 22;
    return -1;
  }
  if (((1 << __clock_id) & 0x10330) == 0)
  {
    if (((1 << __clock_id) & 0x1041) != 0)
    {
      result = 0;
      *__res = (timespec)xmmword_18A0E4A50;
      return result;
    }
    goto LABEL_10;
  }
  info = 0;
  result = mach_timebase_info(&info);
  if (result)
    return -1;
  v4 = info.numer / info.denom;
  if (info.numer % info.denom)
    v5 = v4 + 1;
  else
    v5 = v4;
  __res->tv_sec = 0;
  __res->tv_nsec = v5;
  return result;
}

int clock_settime(clockid_t __clock_id, const timespec *__tp)
{
  uint64_t tv_nsec;
  timeval v4;

  if (__clock_id)
  {
    *__error() = 22;
    return -1;
  }
  else
  {
    tv_nsec = __tp->tv_nsec;
    v4.tv_sec = __tp->tv_sec;
    *(_QWORD *)&v4.tv_usec = ((int)tv_nsec / 1000);
    return settimeofday(&v4, 0);
  }
}

uint64_t _boottime_fallback_usec()
{
  size_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = 0;
  v3 = 0;
  v1 = 16;
  if (sysctlbyname("kern.boottime", &v2, &v1, 0, 0) == -1)
    return 0;
  else
    return (int)v3 + 1000000 * v2;
}

void *__cdecl sbrk(int a1)
{
  void *result;

  if ((sbrk_needs_init & 1) == 0)
  {
    sbrk_needs_init = 1;
    if (vm_allocate(*MEMORY[0x1E0C883F0], (vm_address_t *)&sbrk_curbrk, sbrk_region_size, 83886081))
      goto LABEL_5;
  }
  if (a1 <= 0)
    return (void *)sbrk_curbrk;
  if (sbrk_region_size < (unint64_t)a1)
  {
LABEL_5:
    *__error() = 12;
    return (void *)-1;
  }
  result = (void *)sbrk_curbrk;
  sbrk_curbrk += a1;
  sbrk_region_size -= a1;
  return result;
}

void *__cdecl brk(const void *a1)
{
  *__error() = 12;
  return (void *)-1;
}

void (__cdecl *__cdecl bsd_signal(int a1, void (__cdecl *a2)(int)))(int)
{
  sigset_t v2;
  sigaction v4;
  sigaction v5;

  v4.__sigaction_u.__sa_handler = 0;
  *(_QWORD *)&v4.sa_mask = 0;
  v5.__sigaction_u.__sa_handler = a2;
  v2 = 1 << (a1 - 1);
  if (a1 > 32)
    v2 = 0;
  v5.sa_mask = v2;
  v5.sa_flags = 2;
  if (sigaction(a1, &v5, &v4) == -1)
    return (void (__cdecl *)(int))-1;
  else
    return v4.__sigaction_u.__sa_handler;
}

uint64_t strtoencf16(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  uint64_t result;
  int v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14[8];

  v3 = __locale_key;
  v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  if (!v4)
    v4 = &__global_locale;
  v12 = 0uLL;
  v7 = xmmword_18A0E4A60;
  v8 = 0x5FFFFFFF9;
  LODWORD(v9) = 22;
  *((_QWORD *)&v9 + 1) = a1;
  *(_QWORD *)&v10 = a2;
  *((_QWORD *)&v10 + 1) = a3;
  *(_QWORD *)&v11 = v4;
  v13 = 0uLL;
  result = fastParse64((uint64_t)&v7);
  if ((_DWORD)result)
  {
    v6 = fegetround();
    return generalSlowpath((uint64_t)&v7, v6, v14, 8);
  }
  return result;
}

uint64_t strtoencf32(float *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  void *v5;

  v3 = __locale_key;
  v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = &__global_locale;
  return _ffpp_strtoencf32_l(a1, a2, a3, (unint64_t)v5);
}

uint64_t strtoencf64(double *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  void *v5;

  v3 = __locale_key;
  v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = &__global_locale;
  return _ffpp_strtoencf64_l(a1, a2, a3, (unint64_t)v5);
}

uint64_t strtoencf64x(double *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  void *v5;

  v3 = __locale_key;
  v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = &__global_locale;
  return _ffpp_strtoencf64_l(a1, a2, a3, (unint64_t)v5);
}

long double strtold(const char *a1, char **a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  double v6;

  v6 = 0.0;
  v2 = __locale_key;
  v3 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3)
    v4 = v3;
  else
    v4 = &__global_locale;
  _ffpp_strtoencf64_l(&v6, (uint64_t)a1, (uint64_t)a2, (unint64_t)v4);
  return v6;
}

long double strtold_l(const char *a1, char **a2, locale_t a3)
{
  double v4;

  v4 = 0.0;
  _ffpp_strtoencf64_l(&v4, (uint64_t)a1, (uint64_t)a2, (unint64_t)a3);
  return v4;
}

uint64_t infinity(uint64_t result)
{
  int v1;
  __int16 v2;
  unint64_t v3;
  int v4;

  v1 = *(_DWORD *)(result + 12);
  switch(v1)
  {
    case 8:
      v3 = 0xFFF0000000000000;
      if (!*(_BYTE *)(result + 96))
        v3 = 0x7FF0000000000000;
      **(_QWORD **)(result + 32) = v3;
      break;
    case 4:
      if (*(_BYTE *)(result + 96))
        v4 = -8388608;
      else
        v4 = 2139095040;
      **(_DWORD **)(result + 32) = v4;
      break;
    case 2:
      if (*(_BYTE *)(result + 96))
        v2 = -1024;
      else
        v2 = 31744;
      **(_WORD **)(result + 32) = v2;
      break;
    default:
      return _platform_bzero();
  }
  return result;
}

uint64_t underflow(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  int v4;

  *__error() = 34;
  result = fegetround();
  if ((_DWORD)result == 0x400000)
  {
    if (!*(_BYTE *)(a1 + 96))
      goto LABEL_7;
LABEL_6:
    v3 = 0;
    goto LABEL_8;
  }
  if ((_DWORD)result != 0x800000)
    goto LABEL_6;
  v3 = *(unsigned __int8 *)(a1 + 96);
  if (*(_BYTE *)(a1 + 96))
LABEL_7:
    v3 = 1;
LABEL_8:
  v4 = *(_DWORD *)(a1 + 12);
  switch(v4)
  {
    case 8:
      **(_QWORD **)(a1 + 32) = v3 | ((unint64_t)(*(_BYTE *)(a1 + 96) != 0) << 63);
      break;
    case 4:
      **(_DWORD **)(a1 + 32) = v3 | ((*(_BYTE *)(a1 + 96) != 0) << 31);
      break;
    case 2:
      **(_WORD **)(a1 + 32) = v3 | ((*(_BYTE *)(a1 + 96) != 0) << 15);
      break;
  }
  return result;
}

uint64_t overflow(uint64_t a1)
{
  uint64_t result;
  _BOOL4 v3;
  BOOL v4;
  int v5;
  __int16 v6;
  unint64_t v7;
  int v8;

  *__error() = 34;
  result = fegetround();
  v3 = result != 0x800000;
  v4 = (_DWORD)result == 0x400000;
  if (*(_BYTE *)(a1 + 96))
    v3 = 1;
  else
    v4 = 0;
  if (!v4 && (_DWORD)result != 12582912 && v3)
    return infinity(a1);
  v5 = *(_DWORD *)(a1 + 12);
  switch(v5)
  {
    case 8:
      v7 = 0xFFEFFFFFFFFFFFFFLL;
      if (!*(_BYTE *)(a1 + 96))
        v7 = 0x7FEFFFFFFFFFFFFFLL;
      **(_QWORD **)(a1 + 32) = v7;
      break;
    case 4:
      if (*(_BYTE *)(a1 + 96))
        v8 = -8388609;
      else
        v8 = 2139095039;
      **(_DWORD **)(a1 + 32) = v8;
      break;
    case 2:
      if (*(_BYTE *)(a1 + 96))
        v6 = -1025;
      else
        v6 = 31743;
      **(_WORD **)(a1 + 32) = v6;
      break;
    default:
      return _platform_memset();
  }
  return result;
}

uint64_t addToMP(uint64_t result, unint64_t a2)
{
  _DWORD *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(_DWORD **)result;
  if (a2)
  {
    v3 = *(_QWORD *)(result + 8);
    do
    {
      if ((unint64_t)v2 >= v3)
        break;
      v4 = a2 + *v2;
      *v2++ = v4;
      a2 = HIDWORD(v4);
    }
    while (HIDWORD(v4));
    for (; a2; a2 >>= 32)
      *v2++ = a2;
  }
  if ((unint64_t)v2 > *(_QWORD *)(result + 8))
    *(_QWORD *)(result + 8) = v2;
  return result;
}

int lchflags(const char *a1, __uint32_t a2)
{
  __int128 v3;
  uint64_t v4;
  __uint32_t v5;

  v5 = a2;
  v3 = xmmword_18A0E5200;
  v4 = 0;
  return setattrlist(a1, &v3, &v5, 4uLL, 1u);
}

int lchmod(const char *a1, mode_t a2)
{
  int v3;
  _QWORD v4[3];

  v4[1] = 0;
  v4[2] = 0;
  v4[0] = 0x2000000000005;
  v3 = a2;
  return setattrlist(a1, v4, &v3, 4uLL, 1u);
}

int lutimes(const char *a1, const timeval *a2)
{
  uint64_t v4;
  __darwin_time_t tv_sec;
  uint64_t v6;
  timeval v8;
  __int128 v9;
  __int128 v10;
  _QWORD v11[3];
  stat v12;

  memset(&v12, 0, sizeof(v12));
  v9 = 0u;
  v10 = 0u;
  if ((lstat(a1, &v12) & 0x80000000) == 0)
  {
    if ((v12.st_mode & 0xF000) != 0xA000)
      return utimes(a1, a2);
    v11[1] = 0;
    v11[2] = 0;
    v11[0] = 0x140000000005;
    if (a2)
    {
      v4 = 1000 * a2->tv_usec;
      *(_QWORD *)&v10 = a2->tv_sec;
      *((_QWORD *)&v10 + 1) = v4;
      tv_sec = a2[1].tv_sec;
      v6 = 1000 * a2[1].tv_usec;
LABEL_8:
      *(_QWORD *)&v9 = tv_sec;
      *((_QWORD *)&v9 + 1) = v6;
      return setattrlist(a1, v11, &v9, 0x20uLL, 1u);
    }
    v8.tv_sec = 0;
    *(_QWORD *)&v8.tv_usec = 0;
    if ((gettimeofday(&v8, 0) & 0x80000000) == 0)
    {
      tv_sec = v8.tv_sec;
      v6 = 1000 * v8.tv_usec;
      *(_QWORD *)&v10 = v8.tv_sec;
      *((_QWORD *)&v10 + 1) = v6;
      goto LABEL_8;
    }
  }
  return -1;
}

int fstatvfs(int a1, statvfs *a2)
{
  int result;
  unint64_t f_bsize;
  fsfilcnt_t f_ffree;
  unint64_t v6;
  char f_flags;
  unint64_t v8;
  statfs v9;

  memset(&v9, 0, 512);
  result = fstatfs(a1, &v9);
  if (!result)
  {
    f_bsize = v9.f_bsize;
    a2->f_bsize = v9.f_iosize;
    a2->f_frsize = f_bsize;
    *(int32x4_t *)&a2->f_blocks = vuzp1q_s32(*(int32x4_t *)&v9.f_blocks, *(int32x4_t *)&v9.f_bavail);
    f_ffree = v9.f_ffree;
    v6 = v9.f_fsid.val[0];
    a2->f_ffree = v9.f_ffree;
    a2->f_favail = f_ffree;
    a2->f_namemax = 255;
    f_flags = v9.f_flags;
    v8 = v9.f_flags & 1;
    a2->f_fsid = v6;
    a2->f_flag = v8;
    if ((f_flags & 8) != 0)
      a2->f_flag = v8 | 2;
  }
  return result;
}

size_t backtrace_async(void **array, size_t length, uint32_t *task_id)
{
  uint32_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v9;

  v9 = 0;
  v5 = _thread_stack_async_pcs((uint64_t)array, length, &v9, 1, 0);
  v6 = v9;
  if (v9)
  {
    while (1)
    {
      v7 = v6 - 1;
      if (array[v7])
        break;
      --v6;
      if (!v7)
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    v6 = 0;
  }
  if (task_id)
    *task_id = v5;
  return v6;
}

int backtrace_from_fp(void *startfp, void **array, int size)
{
  int result;
  uint64_t v5;
  int v6;

  v6 = 0;
  _thread_stack_pcs((uint64_t)array, size, (unsigned int *)&v6, 1, (uintptr_t)startfp);
  result = v6;
  if (v6)
  {
    while (1)
    {
      v5 = (result - 1);
      if (array[v5])
        break;
      --result;
      if (!v5)
        return 0;
    }
  }
  return result;
}

void backtrace_symbols_fd(void *const *a1, int a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  Dl_info v6;
  char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  char v11[1024];

  v7 = v11;
  v9 = "\n";
  v10 = 1;
  if (a2 >= 1)
  {
    v4 = 0;
    v5 = a2;
    do
    {
      memset(&v6, 0, sizeof(v6));
      dladdr(a1[v4], &v6);
      v8 = (int)_backtrace_snprintf(v11, 0x400uLL, v4, (uint64_t)a1[v4], (uint64_t)&v6);
      writev_NOCANCEL();
      ++v4;
    }
    while (v5 != v4);
  }
}

char *__cdecl crypt(const char *a1, const char *a2)
{
  uint64_t v4;
  char v5;
  char *v6;
  uint64_t i;
  char v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  char *result;
  uint64_t v30;
  uint64_t v31;

  v4 = 0;
  v31 = 0;
  do
  {
    v5 = 2 * *a1;
    if (*a1)
      ++a1;
    *((_BYTE *)&v31 + v4++) = v5;
  }
  while (v4 != 8);
  v30 = 0;
  __crypt_des_setkey((unsigned __int8 *)&v31);
  v6 = cryptresult;
  if (*a2 == 95)
  {
    if (*a1)
    {
      do
      {
        __crypt_des_cipher(&v31, &v31, 0, 1);
        for (i = 0; i != 8; ++i)
        {
          v8 = *a1;
          if (*a1)
            ++a1;
          *((_BYTE *)&v31 + i) ^= 2 * v8;
        }
        __crypt_des_setkey((unsigned __int8 *)&v31);
      }
      while (*a1);
      v9 = *a2;
    }
    else
    {
      v9 = 95;
    }
    v10 = 0;
    cryptresult[0] = v9;
    v12 = 4u;
    do
    {
      v13 = a2[v12];
      if (!a2[v12])
        v13 = 46;
      cryptresult[v12] = v13;
      v10 = a64toi[v13] | (v10 << 6);
    }
    while (v12-- > 1);
    a2 += 5;
    v6 = &byte_1EDF544D5;
    v11 = 4;
  }
  else
  {
    v10 = 25;
    v11 = 2;
  }
  v15 = 0;
  v16 = v11 - 1;
  do
  {
    v17 = a2[v16];
    if (!a2[v16])
      v17 = 46;
    v6[v16] = v17;
    v15 = a64toi[v17] | (v15 << 6);
    v18 = v16-- + 1;
  }
  while (v18 > 1);
  __crypt_des_cipher(&constdatablock, &v30, v15, v10);
  v19 = &v6[v11];
  v20 = v30;
  v21 = (BYTE1(v30) << 8) | (v30 << 16);
  v22 = BYTE2(v30) | (BYTE1(v30) << 8);
  v19[3] = itoa64[BYTE2(v30) & 0x3F];
  v19[2] = itoa64[(v22 >> 6) & 0x3F];
  v19[1] = itoa64[(v21 >> 12) & 0x3F];
  *v19 = itoa64[v20 >> 2];
  v23 = BYTE3(v30);
  v24 = (BYTE4(v30) << 8) | (BYTE3(v30) << 16);
  v25 = itoa64[((unint64_t)(BYTE5(v30) | (BYTE4(v30) << 8)) >> 6) & 0x3F];
  v19[7] = itoa64[BYTE5(v30) & 0x3F];
  v19[6] = v25;
  v19[5] = itoa64[(v24 >> 12) & 0x3F];
  v19[4] = itoa64[v23 >> 2];
  v26 = BYTE6(v30);
  LODWORD(v20) = 4 * HIBYTE(v30);
  v27 = v20 | (BYTE6(v30) << 10);
  v19[10] = itoa64[v20 & 0x3C];
  v28 = itoa64[v26 >> 2];
  v19[9] = itoa64[(v27 >> 6) & 0x3F];
  v19[8] = v28;
  result = cryptresult;
  v19[11] = 0;
  return result;
}

uint64_t __crypt_des_setkey(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t i;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  __int128 *v13;
  unint64_t j;
  char v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t k;
  uint64_t v21;
  _QWORD *v22;
  uint64_t m;
  uint64_t n;
  unint64_t ii;
  unint64_t v26;
  uint64x2_t v27;
  int16x8_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unsigned int v39;
  uint64_t v40;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  if ((__crypt_des_setkey_des_ready & 1) == 0)
  {
    v2 = 0;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    do
    {
      if (((0x303030300000000uLL >> v2) & 1) == 0)
      {
        v3 = PC2[v2];
        HIDWORD(v4) = -1227133513 * v3;
        LODWORD(v4) = -1227133513 * v3;
        if ((v4 >> 2) < 0x924924A)
          v3 -= 28;
        *((_BYTE *)&v46 + v2) = ((PC1[v3] - 1) ^ 7) + 1;
      }
      ++v2;
    }
    while (v2 != 64);
    PC1ROT = (uint64_t)malloc_type_calloc(8uLL, 0x100uLL, 0x1469CAC2uLL);
    PC2ROT[0] = (uint64_t)malloc_type_calloc(8uLL, 0x100uLL, 0x592ABC37uLL);
    qword_1EDF54588 = (uint64_t)malloc_type_calloc(8uLL, 0x100uLL, 0x592ABC37uLL);
    init_perm(PC1ROT, (uint64_t)&v46);
    v5 = 0;
    v6 = 1;
    do
    {
      v7 = 0;
      v8 = v6;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v46 = 0u;
      v47 = 0u;
      v48 = 0u;
      v49 = 0u;
      do
      {
        if (((0x303030300000000uLL >> v7) & 1) == 0)
          *((_BYTE *)&v42 + PC2[v7] - 1) = v7 + 1;
        ++v7;
      }
      while (v7 != 64);
      for (i = 0; i != 64; ++i)
      {
        if (((0x303030300000000uLL >> i) & 1) == 0)
        {
          v10 = v5 + PC2[i];
          if (v10 % 0x1C <= v5)
            v10 -= 28;
          *((_BYTE *)&v46 + i) = *((_BYTE *)&v42 + v10);
        }
      }
      init_perm(PC2ROT[v5], (uint64_t)&v46);
      v6 = 0;
      v5 = 1;
    }
    while ((v8 & 1) != 0);
    v11 = 0;
    v12 = &IP[62];
    v13 = &v46;
    do
    {
      for (j = 0; j != 8; ++j)
      {
        if (j >= 2)
        {
          v16 = v12[j] - 1;
          v17 = IP[v16];
          if (((0xF0F0F0F0F0F0F0FuLL >> v16) & 1) != 0)
            v18 = -32;
          else
            v18 = -1;
          v19 = v18 + v17;
          if (v19 > 0)
            v15 = ((v19 - 1) ^ 7) + 1;
          else
            v15 = 0;
        }
        else
        {
          v15 = 0;
        }
        *((_BYTE *)v13 + j) = v15;
      }
      ++v11;
      v13 = (__int128 *)((char *)v13 + 8);
      v12 += 6;
    }
    while (v11 != 8);
    IE3264 = (uint64_t)malloc_type_calloc(8uLL, 0x80uLL, 0x9E08E8F5uLL);
    init_perm(IE3264, (uint64_t)&v46);
    for (k = 0; k != 64; *((_BYTE *)&v46 + v21) = k)
      v21 = (IP[CIFP[k++] - 1] - 1) ^ 7;
    CF6464 = (uint64_t)malloc_type_calloc(8uLL, 0x100uLL, 0x9A2466B4uLL);
    v22 = malloc_type_calloc(8uLL, 0x400uLL, 0xA094E4B6uLL);
    SPE = (uint64_t)v22;
    init_perm(CF6464, (uint64_t)&v46);
    for (m = 0; m != 48; ++m)
      *((_BYTE *)&v46 + m) = P32Tr[ExpandTr[m] - 1];
    for (n = 0; n != 8; ++n)
    {
      for (ii = 0; ii != 64; ++ii)
      {
        v26 = 0;
        v42 = 0uLL;
        v43 = 0uLL;
        v27 = (uint64x2_t)vdupq_n_s64(__rbit32(S[64 * n
                                               + (ii & 4 | (8 * ((ii >> 1) & 1)) & 0xFFFFFFFFFFFFFFDCLL | (32 * (ii & 1)) | (ii >> 2) & 2 | (ii >> 4) & 1 | (ii >> 1) & 0x10)]) >> 28);
        v28 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v27, (uint64x2_t)xmmword_18A0E5260), (int32x4_t)vshlq_u64(v27, (uint64x2_t)xmmword_18A0E5250));
        v28.i64[0] = *(_QWORD *)&vmovn_s32((int32x4_t)v28) & 0xFFF1FFF1FFF1FFF1;
        *((_DWORD *)&v42 + n) = vmovn_s16(v28).u32[0];
        v29 = 23;
        do
        {
          v30 = v26;
          v26 = *((unsigned __int8 *)&v42 + *((unsigned __int8 *)&v46 + v29) - 1) | (2 * v26);
          v31 = v29-- + 1;
        }
        while (v31 > 1);
        v32 = 0;
        v22[64 * n + ii] = 4
                         * ((32 * (int)v30) & 0x3F0000 | (((v30 >> 17) & 0x3F) << 24) | v26 & 0x3F | (((v26 >> 6) & 0x3F) << 8));
        v33 = 47;
        do
        {
          v34 = v32;
          v32 = *((unsigned __int8 *)&v42 + *((unsigned __int8 *)&v46 + v33) - 1) | (2 * v32);
          v35 = v33 - 23;
          --v33;
        }
        while (v35 > 1);
        v22[64 * n + 512 + ii] = 4
                               * ((32 * (int)v34) & 0x3F0000 | (((v34 >> 17) & 0x3F) << 24) | v32 & 0x3F | (((v32 >> 6) & 0x3F) << 8));
      }
    }
    __crypt_des_setkey_des_ready = 1;
  }
  *(_QWORD *)&v46 = 0;
  v36 = 1u;
  permute(a1, (unint64_t *)&v46, PC1ROT, 8);
  v37 = v46;
  KS[0] = v46 & 0xFFFFFFFFFCFCFCFCLL;
  v38 = &byte_18A0E52F1;
  do
  {
    KS[v36] = v37;
    v39 = *v38++;
    v40 = PC2ROT[v39 - 1];
    *(_QWORD *)&v46 = 0;
    permute((unsigned __int8 *)&KS[v36], (unint64_t *)&v46, v40, 8);
    v37 = v46;
    KS[v36++] = v46 & 0xFFFFFFFFFCFCFCFCLL;
  }
  while (v36 != 16);
  __crypt_des_setkey_called = 1;
  return 0;
}

unsigned __int8 *permute(unsigned __int8 *result, unint64_t *a2, uint64_t a3, int a4)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;

  v4 = 0;
  v5 = 0;
  v6 = a4 + 1;
  do
  {
    v7 = *result++;
    v8 = *(_QWORD *)(a3 + 8 * (v7 & 0xF)) | *(_QWORD *)(a3 + (((unint64_t)v7 >> 1) & 0x78) + 128);
    v4 |= v8;
    v5 |= v8 >> 32;
    a3 += 256;
    --v6;
  }
  while (v6 > 1);
  *a2 = v4 | ((unint64_t)v5 << 32);
  return result;
}

uint64_t __crypt_des_cipher(_QWORD *a1, uint64_t *a2, unint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unint64_t v86;

  v6 = (2 * *a1) & 0xAAAAAAAA | HIDWORD(*a1) & 0x5555555555555555 | (((*a1 >> 33) & 0x55555555 | *(_DWORD *)a1 & 0xAAAAAAAA) << 32);
  v85 = 0;
  v86 = v6;
  v7 = IE3264;
  permute((unsigned __int8 *)&v86, (unint64_t *)&v85, IE3264, 4);
  v8 = (int)v85;
  v9 = v85 >> 32;
  v85 = 0;
  permute((unsigned __int8 *)&v86 + 4, (unint64_t *)&v85, v7, 4);
  v10 = (int)v85;
  v11 = v85 >> 32;
  if (a4 >= 0)
    v12 = 8;
  else
    v12 = -8;
  if (a4)
  {
    v13 = a3 & 0x3F | (((a3 >> 12) & 0x3F) << 16) & 0xFFFFFFFFC0FFC0FFLL | (((a3 >> 18) & 0x3F) << 24) | (((a3 >> 6) & 0x3F) << 8);
    v14 = 4 * v13;
    if (a4 >= 0)
      v15 = a4;
    else
      v15 = -a4;
    if (a4 < 0)
      v16 = (uint64_t *)&unk_1EDF54578;
    else
      v16 = KS;
    v17 = SPE;
    v77 = SPE + 1024;
    v78 = SPE + 512;
    v18 = SPE + 1536;
    v19 = SPE + 5632;
    v20 = SPE + 2048;
    v21 = SPE + 6144;
    v22 = SPE + 2560;
    v23 = SPE + 6656;
    v76 = SPE + 3072;
    v24 = SPE + 3584;
    v25 = SPE + 7168;
    v26 = v8;
    v83 = SPE + 4096;
    v84 = 4 * v13;
    v81 = SPE + 4608;
    v82 = SPE + 7680;
    v27 = SPE + 5120;
    do
    {
      v75 = v15;
      v28 = v10;
      v29 = v11;
      v30 = -8;
      v10 = v26;
      v11 = v9;
      v26 = v28;
      v9 = v29;
      do
      {
        v80 = v30;
        v31 = (v9 ^ v26) & v14;
        v32 = v26;
        v33 = *(_DWORD *)v16 ^ v26 ^ v31;
        v34 = v9 ^ v31 ^ *((_DWORD *)v16 + 1);
        v86 = v33 | (v34 << 32);
        v35 = v33 >> 7;
        v36 = v33 >> 15;
        v37 = v33 >> 23;
        v38 = 2 * v33;
        v39 = &v16[(unint64_t)v12 / 8];
        v40 = v35 & 0x1FE;
        v41 = *(_QWORD *)(v83 + v38) ^ v11 ^ *(_QWORD *)(v81 + v40);
        v42 = v37 & 0x1FE;
        v43 = *(_QWORD *)(v17 + v38) ^ v10 ^ *(_QWORD *)(v78 + v40) ^ *(_QWORD *)(v77 + (v36 & 0x1FE)) ^ *(_QWORD *)(v18 + v42);
        v44 = *(_QWORD *)(v27 + (v36 & 0x1FE)) ^ *(_QWORD *)(v19 + v42);
        v45 = 2 * v34;
        v46 = v41 ^ v44;
        v47 = (v34 >> 7) & 0x1FELL;
        v48 = (v34 >> 15) & 0x1FELL;
        v49 = *(_QWORD *)(v20 + v45) ^ *(_QWORD *)(v22 + v47) ^ *(_QWORD *)(v76 + v48);
        v50 = *(_QWORD *)(v21 + v45) ^ *(_QWORD *)(v23 + v47) ^ *(_QWORD *)(v25 + v48);
        v51 = (v34 >> 23) & 0x1FELL;
        v10 = v43 ^ v49 ^ *(_QWORD *)(v24 + v51);
        v11 = v46 ^ v50 ^ *(_QWORD *)(v82 + v51);
        v52 = (v11 ^ v10) & v84;
        LODWORD(v51) = *((_DWORD *)v39 + 1);
        v53 = *(_DWORD *)v39 ^ v10 ^ v52;
        v86 = v53 | v86 & 0xFFFFFFFF00000000;
        v54 = v11 ^ v51 ^ v52;
        LODWORD(v51) = v54 >> 23;
        LODWORD(v45) = v54 >> 15;
        v79 = v53 | (v54 << 32);
        v55 = v53 >> 7;
        v56 = v53 >> 15;
        v57 = v53 >> 23;
        v58 = 2 * v53;
        v59 = *(_QWORD *)(v17 + v58);
        v60 = v55 & 0x1FE;
        v61 = v9;
        v62 = v25;
        v63 = v17;
        v64 = v54 >> 7;
        v65 = v56 & 0x1FE;
        v66 = v57 & 0x1FE;
        v67 = 2 * v54;
        v68 = v64 & 0x1FE;
        v69 = v45 & 0x1FE;
        v70 = v51 & 0x1FE;
        v26 = v59 ^ *(_QWORD *)(v78 + v60) ^ *(_QWORD *)(v77 + v65) ^ *(_QWORD *)(v18 + v66) ^ *(_QWORD *)(v20 + v67) ^ *(_QWORD *)(v22 + v68) ^ *(_QWORD *)(v76 + v69) ^ *(_QWORD *)(v24 + v70) ^ v32;
        v71 = *(_QWORD *)(v83 + v58) ^ *(_QWORD *)(v81 + v60) ^ *(_QWORD *)(v27 + v65) ^ *(_QWORD *)(v19 + v66);
        v72 = *(_QWORD *)(v23 + v68);
        v17 = v63;
        v25 = v62;
        v9 = v71 ^ *(_QWORD *)(v21 + v67) ^ v72 ^ *(_QWORD *)(v62 + v69) ^ *(_QWORD *)(v82 + v70) ^ v61;
        v14 = v84;
        v86 = v79;
        v16 = &v39[(unint64_t)v12 / 8];
        v30 = v80 + 1;
      }
      while (v80 != -1);
      v16 -= 2 * v12;
      v15 = v75 - 1;
    }
    while (v75 > 1);
  }
  else
  {
    v26 = v8;
  }
  v85 = 0;
  v86 = (v26 >> 3) & 0xF0F0F0F | (2 * (_DWORD)v9) & 0xF0F0F0F0 | ((unint64_t)((2 * (_DWORD)v11) & 0xF0F0F0F0 | (v10 >> 3) & 0xF0F0F0F) << 32);
  permute((unsigned __int8 *)&v86, (unint64_t *)&v85, CF6464, 8);
  *a2 = v85;
  return 0;
}

void setkey(const char *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  v1 = 0;
  v4 = 0;
  do
  {
    v2 = 0;
    v3 = 0;
    do
      v3 = a1[v2++] | (2 * v3);
    while ((_DWORD)v2 != 8);
    a1 += 8;
    *((_BYTE *)&v4 + v1++) = v3;
  }
  while (v1 != 8);
  __crypt_des_setkey((unsigned __int8 *)&v4);
}

void encrypt(char *a1, int a2)
{
  uint64_t i;
  uint64_t v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v13;

  v13 = 0;
  if (!__crypt_des_setkey_called)
    __crypt_des_setkey((unsigned __int8 *)&v13);
  for (i = 0; i != 8; ++i)
  {
    v5 = 0;
    v6 = 0;
    do
      v6 = a1[v5++] | (2 * v6);
    while ((_DWORD)v5 != 8);
    a1 += 8;
    *((_BYTE *)&v13 + i) = v6;
  }
  if (a2)
    v7 = -1;
  else
    v7 = 1;
  __crypt_des_cipher(&v13, &v13, 0, v7);
  v8 = 7;
  do
  {
    v9 = v8;
    v10 = *((unsigned __int8 *)&v13 + v8);
    v11 = -8;
    do
    {
      *--a1 = v10 & 1;
      v10 >>= 1;
    }
    while (!__CFADD__(v11++, 1));
    v8 = v9 - 1;
  }
  while (v9);
}

uint64_t init_perm(uint64_t result, uint64_t a2)
{
  unint64_t i;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  _BYTE *v7;

  for (i = 0; i != 64; ++i)
  {
    v3 = *(unsigned __int8 *)(a2 + i);
    if (*(_BYTE *)(a2 + i))
    {
      v4 = 0;
      v5 = (v3 - 1);
      v6 = 1 << ((v3 - 1) & 3);
      v7 = (_BYTE *)(result + (i >> 3) + (((v5 >> 2) & 0x7FFFFFF) << 7));
      do
      {
        if ((v6 & v4) != 0)
          *v7 |= 1 << (i & 7);
        ++v4;
        v7 += 8;
      }
      while (v4 != 16);
    }
  }
  return result;
}

char *__cdecl devname_r(dev_t a1, mode_t a2, char *buf, int len)
{
  int v6;
  DIR *v8;
  DIR *v9;
  dirent *v10;
  dirent *v11;
  stat v13;
  char v14[264];

  v6 = a2;
  strcpy(v14, "/dev/");
  v8 = opendir("/dev/");
  if (!v8)
    return 0;
  v9 = v8;
  memset(&v13, 0, sizeof(v13));
  v10 = readdir(v8);
  if (!v10)
    goto LABEL_12;
  v11 = v10;
  while (1)
  {
    _platform_memmove();
    if (!lstat(v14, &v13) && v13.st_rdev == a1 && (v13.st_mode & 0xF000) == v6)
      break;
    v11 = readdir(v9);
    if (!v11)
      goto LABEL_12;
  }
  if (v11->d_namlen < len)
    _platform_strcpy();
  else
LABEL_12:
    buf = 0;
  closedir(v9);
  return buf;
}

char *__cdecl devname(dev_t a1, mode_t a2)
{
  char *v4;
  char *result;

  v4 = (char *)devname_buf;
  if (devname_buf)
    return devname_r(a1, a2, v4, 255);
  result = (char *)malloc_type_malloc(0xFFuLL, 0xCB90A72CuLL);
  v4 = result;
  devname_buf = (uint64_t)result;
  if (result)
    return devname_r(a1, a2, v4, 255);
  return result;
}

char *getdiskbyname(char *a1)
{
  char *result;
  char *v2;
  char *v3;
  int v4;
  int v5;
  int v6;
  char *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  char v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  _DWORD *v45;
  unsigned int v46;
  int v47;
  int v48;
  uint64_t v50;
  uint64_t v51;
  char v52[4];
  char v53[8];
  char v54[8];
  char *v55;
  char *v56;
  char *v57[2];

  v56 = 0;
  *(_OWORD *)v57 = xmmword_1E1E9C428;
  if (cgetent(&v56, v57, a1) < 0)
    return 0;
  result = (char *)getdiskbyname_dp;
  if (getdiskbyname_dp
    || (result = (char *)malloc_type_malloc(0x118uLL, 0x101204068DD910EuLL), (getdiskbyname_dp = (uint64_t)result) != 0))
  {
    *((_QWORD *)result + 34) = 0;
    *((_OWORD *)result + 15) = 0u;
    *((_OWORD *)result + 16) = 0u;
    *((_OWORD *)result + 13) = 0u;
    *((_OWORD *)result + 14) = 0u;
    *((_OWORD *)result + 11) = 0u;
    *((_OWORD *)result + 12) = 0u;
    *((_OWORD *)result + 9) = 0u;
    *((_OWORD *)result + 10) = 0u;
    *((_OWORD *)result + 7) = 0u;
    *((_OWORD *)result + 8) = 0u;
    *((_OWORD *)result + 5) = 0u;
    *((_OWORD *)result + 6) = 0u;
    *((_OWORD *)result + 3) = 0u;
    *((_OWORD *)result + 4) = 0u;
    *((_OWORD *)result + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *(_OWORD *)result = 0u;
    v2 = result + 8;
    v55 = result + 8;
    v3 = v56;
    do
    {
      v4 = *v3;
      *v2 = v4;
      v2 = v55;
      if (!v4)
        break;
      v5 = *v55;
      if (v5 == 58)
        break;
      if (v5 == 124)
        break;
      v2 = v55 + 1;
      v55 = v2;
      ++v3;
    }
    while ((unint64_t)v2 < getdiskbyname_dp + 23);
    *v2 = 0;
    cgetstr(v56, "b0", (char **)(getdiskbyname_dp + 24));
    cgetstr(v56, "b1", (char **)(getdiskbyname_dp + 32));
    v6 = cgetstr(v56, "ty", &v55);
    v7 = v55;
    if (v6 < 1 || _platform_strcmp())
    {
      if (!v7 || _platform_strcmp())
        goto LABEL_17;
      v8 = 8;
    }
    else
    {
      v8 = 1;
    }
    *(_DWORD *)(getdiskbyname_dp + 88) |= v8;
LABEL_17:
    if (cgetcap(v56, "sf", 58))
      *(_DWORD *)(getdiskbyname_dp + 88) |= 4u;
    v51 = 0;
    v9 = cgetnum(v56, "se", &v51);
    v10 = v51;
    if (v9 == -1)
      v10 = 512;
    v11 = getdiskbyname_dp;
    *(_DWORD *)(getdiskbyname_dp + 40) = v10;
    cgetnum(v56, "nt", (uint64_t *)(v11 + 48));
    cgetnum(v56, "ns", (uint64_t *)(getdiskbyname_dp + 44));
    cgetnum(v56, "nc", (uint64_t *)(getdiskbyname_dp + 52));
    if (cgetstr(v56, "dt", &v55) < 1)
    {
      v51 = 0;
      v12 = cgetnum(v56, "dt", &v51);
      v13 = v51;
      if (v12 == -1)
        v13 = 0;
      *(_WORD *)(getdiskbyname_dp + 4) = v13;
    }
    else
    {
      *(_WORD *)(getdiskbyname_dp + 4) = gettype(v55, (const char **)dktypenames);
    }
    v51 = 0;
    if (cgetnum(v56, "sc", &v51) == -1)
    {
      v15 = (_DWORD *)getdiskbyname_dp;
      v14 = v15[12] * v15[11];
    }
    else
    {
      v14 = v51;
      v15 = (_DWORD *)getdiskbyname_dp;
    }
    v15[14] = v14;
    v51 = 0;
    if (cgetnum(v56, "su", &v51) == -1)
    {
      v17 = (_DWORD *)getdiskbyname_dp;
      v16 = v17[13] * v17[14];
    }
    else
    {
      v16 = v51;
      v17 = (_DWORD *)getdiskbyname_dp;
    }
    v17[15] = v16;
    v51 = 0;
    v18 = cgetnum(v56, "rm", &v51);
    v19 = v51;
    if (v18 == -1)
      v19 = 3600;
    *(_WORD *)(getdiskbyname_dp + 72) = v19;
    v51 = 0;
    v20 = cgetnum(v56, "il", &v51);
    v21 = v51;
    if (v20 == -1)
      v21 = 1;
    *(_WORD *)(getdiskbyname_dp + 74) = v21;
    v51 = 0;
    v22 = cgetnum(v56, "sk", &v51);
    v23 = v51;
    if (v22 == -1)
      v23 = 0;
    *(_WORD *)(getdiskbyname_dp + 76) = v23;
    v51 = 0;
    v24 = cgetnum(v56, "cs", &v51);
    v25 = v51;
    if (v24 == -1)
      v25 = 0;
    *(_WORD *)(getdiskbyname_dp + 78) = v25;
    v51 = 0;
    v26 = cgetnum(v56, "hs", &v51);
    v27 = v51;
    if (v26 == -1)
      v27 = 0;
    *(_DWORD *)(getdiskbyname_dp + 80) = v27;
    v51 = 0;
    v28 = cgetnum(v56, "ts", &v51);
    v29 = v51;
    if (v28 == -1)
      v29 = 0;
    *(_DWORD *)(getdiskbyname_dp + 84) = v29;
    v51 = 0;
    v30 = cgetnum(v56, "bs", &v51);
    v31 = v51;
    if (v30 == -1)
      v31 = 0x2000;
    *(_DWORD *)(getdiskbyname_dp + 140) = v31;
    v51 = 0;
    v32 = cgetnum(v56, "sb", &v51);
    v33 = v51;
    if (v32 == -1)
      v33 = 0x2000;
    v34 = getdiskbyname_dp;
    *(_DWORD *)(getdiskbyname_dp + 144) = v33;
    strcpy(&v54[4], "px");
    strcpy(v54, "bx");
    strcpy(&v53[4], "fx");
    strcpy(v53, "ox");
    strcpy(v52, "tx");
    v35 = v34 + 148;
    v36 = 97;
    v37 = 96;
    do
    {
      v52[1] = v36;
      v53[1] = v36;
      v53[5] = v36;
      v54[1] = v36;
      v54[5] = v36;
      if (cgetnum(v56, &v54[4], (uint64_t *)v35) == -1)
      {
        *(_DWORD *)v35 = 0;
      }
      else
      {
        cgetnum(v56, v53, (uint64_t *)(v35 + 4));
        v51 = 0;
        v38 = cgetnum(v56, &v53[4], &v51);
        v39 = v51;
        if (v38 == -1)
          v39 = 0;
        *(_DWORD *)(v35 + 8) = v39;
        if (v39)
        {
          v51 = 0;
          if (cgetnum(v56, v54, &v51))
            LOBYTE(v40) = 8;
          else
            v40 = v51 / *(unsigned int *)(v35 + 8);
          *(_BYTE *)(v35 + 13) = v40;
        }
        v51 = 0;
        v41 = cgetnum(v56, v52, &v51);
        v42 = v51;
        if (v41 == -1)
          v42 = 0;
        *(_BYTE *)(v35 + 12) = v42;
        v37 = v36;
        if (!v42)
        {
          v37 = v36;
          if (cgetstr(v56, v52, &v55) >= 1)
          {
            *(_BYTE *)(v35 + 12) = gettype(v55, (const char **)fstypenames);
            v37 = v36;
          }
        }
      }
      v43 = v36++;
      v35 += 16;
    }
    while (v43 < 0x68);
    v44 = getdiskbyname_dp;
    *(_WORD *)(getdiskbyname_dp + 138) = v37 - 96;
    strcpy(&v54[4], "dx");
    v45 = (_DWORD *)(v44 + 92);
    v46 = 48;
    do
    {
      v54[5] = v46;
      v51 = 0;
      v47 = cgetnum(v56, &v54[4], &v51);
      v48 = v51;
      if (v47 == -1)
        v48 = 0;
      *v45++ = v48;
    }
    while (v46++ < 0x34);
    v50 = getdiskbyname_dp;
    *(_DWORD *)getdiskbyname_dp = -2108275369;
    *(_DWORD *)(v50 + 132) = -2108275369;
    free(v56);
    return (char *)getdiskbyname_dp;
  }
  return result;
}

uint64_t gettype(char *a1, const char **a2)
{
  const char *v4;
  uint64_t v5;
  const char **v6;

  v4 = *a2;
  if (v4)
  {
    v5 = 0;
    v6 = a2 + 1;
    while (strcasecmp(a1, v4))
    {
      v4 = v6[v5++];
      if (!v4)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    if ((*a1 - 48) <= 9)
      return atoi(a1);
    return 0;
  }
  return v5;
}

int filesec_unset_property(filesec_t a1, filesec_property_t a2)
{
  return filesec_set_property(a1, a2, 0);
}

int filesec_query_property(filesec_t a1, filesec_property_t a2, int *a3)
{
  int v3;

  switch(a2)
  {
    case FILESEC_OWNER:
      goto LABEL_8;
    case FILESEC_GROUP:
      a2 = FILESEC_GROUP;
      goto LABEL_8;
    case FILESEC_UUID:
      a2 = FILESEC_MODE;
      goto LABEL_8;
    case FILESEC_MODE:
      a2 = 16;
      goto LABEL_8;
    case FILESEC_ACL:
      goto LABEL_4;
    case FILESEC_GRPUUID:
      a2 = 8;
      goto LABEL_8;
    default:
      if (a2 - 100 >= 2)
      {
        *__error() = 22;
        return -1;
      }
      else
      {
LABEL_4:
        a2 = 32;
LABEL_8:
        v3 = 0;
        *a3 = *(_DWORD *)a1 & a2;
      }
      return v3;
  }
}

FTS *__cdecl fts_open_b(char *const *a1, int a2, void *a3)
{
  _QWORD *v7;
  uint64_t v8;

  if ((a2 & 0xFFFFF300) != 0)
  {
    *__error() = 22;
    return 0;
  }
  v7 = malloc_type_calloc(1uLL, 0x48uLL, 0x10B0040C1B4BCF7uLL);
  if (!v7)
    return 0;
  v8 = (uint64_t)v7;
  v7[7] = _Block_copy(a3);
  *(_DWORD *)(v8 + 64) = (a2 >> 8) & 8 | a2 | 0x80000000;
  return (FTS *)__fts_open((uint64_t *)a1, v8);
}

FTSENT *__cdecl fts_children(FTS *a1, int a2)
{
  int *v2;
  FTSENT *result;
  _ftsent *fts_cur;
  int fts_info;
  _ftsent *fts_child;
  _ftsent *fts_link;
  int v10;
  int v11;
  int v12;
  int v13;

  if ((a2 & 0xFFFFFEFF) != 0)
  {
    v2 = __error();
    result = 0;
    *v2 = 22;
    return result;
  }
  fts_cur = a1->fts_cur;
  *__error() = 0;
  if ((a1->fts_options & 0x200) != 0)
    return 0;
  fts_info = fts_cur->fts_info;
  if (fts_info != 1)
  {
    if (fts_info == 9)
      return fts_cur->fts_link;
    return 0;
  }
  fts_child = a1->fts_child;
  if (fts_child)
  {
    do
    {
      fts_link = fts_child->fts_link;
      fts_free(fts_child);
      fts_child = fts_link;
    }
    while (fts_link);
  }
  if (a2 == 256)
  {
    a1->fts_options |= 0x100u;
    v10 = 2;
  }
  else
  {
    v10 = 1;
  }
  if (fts_cur->fts_level || *fts_cur->fts_accpath == 47 || (a1->fts_options & 4) != 0)
  {
    a1->fts_child = (_ftsent *)fts_build((uint64_t)a1, v10);
    if (*__error())
      fts_cur->fts_errno = *__error();
  }
  else
  {
    v11 = open_NOCANCEL();
    if (v11 < 0)
      return 0;
    v12 = v11;
    a1->fts_child = (_ftsent *)fts_build((uint64_t)a1, v10);
    if (*__error())
      fts_cur->fts_errno = *__error();
    v13 = fts_fchdir((uint64_t)a1, v12);
    close_NOCANCEL();
    if (v13)
      return 0;
  }
  return a1->fts_child;
}

uint64_t fts_sort(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  _QWORD *v6;
  void *v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = a2;
  if (*(_DWORD *)(a1 + 48) >= (signed int)a3)
  {
    v6 = *(_QWORD **)(a1 + 16);
    if (!a2)
      goto LABEL_7;
    goto LABEL_6;
  }
  *(_DWORD *)(a1 + 48) = a3 + 40;
  v6 = (_QWORD *)reallocarray_DARWIN_EXTSN();
  if (!v6)
  {
    free(*(void **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    return v4;
  }
  for (*(_QWORD *)(a1 + 16) = v6; v4; v4 = *(_QWORD *)(v4 + 16))
LABEL_6:
    *v6++ = v4;
LABEL_7:
  v7 = *(void **)(a1 + 16);
  v8 = *(void **)(a1 + 56);
  if ((*(_DWORD *)(a1 + 64) & 0x80000000) != 0)
    qsort_b(v7, a3, 8uLL, v8);
  else
    qsort(v7, a3, 8uLL, (int (__cdecl *)(const void *, const void *))v8);
  v9 = *(_QWORD **)(a1 + 16);
  v4 = *v9;
  v10 = *v9;
  v11 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      v12 = v9;
      v13 = v9[1];
      ++v9;
      *(_QWORD *)(*v12 + 16) = v13;
      --v11;
    }
    while (v11);
    v10 = *v9;
  }
  *(_QWORD *)(v10 + 16) = 0;
  return v4;
}

BOOL compat_mode(const char *function, const char *mode)
{
  char *v2;
  char v3;
  const char *v4;
  char *v5;
  char *v6;
  char v7;
  char *v8;
  BOOL v9;
  BOOL v10;
  int v11;

  v2 = (char *)mode;
  v3 = 0;
  v4 = mode - 1;
  if ((parsed & 1) == 0)
  {
    pthread_once(&threadsafe, (void (*)(void))check_env_var);
    parsed = 1;
  }
  while (1)
  {
    if (!strcasecmp("unix2003", v2))
    {
      v7 = unix2003_mode ^ 1;
      return (v3 ^ v7) & 1;
    }
    if (!strcasecmp("legacy", v2))
    {
      v7 = unix2003_mode;
      return (v3 ^ v7) & 1;
    }
    if (!strcasecmp("bootstrap", v2))
      goto LABEL_19;
    if (!strcasecmp("error", v2))
    {
      v7 = parse_error;
      return (v3 ^ v7) & 1;
    }
    v5 = strpbrk(v2, "!^&|");
    if (!v5)
      goto LABEL_18;
    v6 = v5;
    if (*v5 != 33)
      break;
    if (v2 != v5)
      goto LABEL_18;
    ++v2;
    v3 ^= 1u;
    ++v4;
  }
  v8 = (char *)malloc_type_malloc(v5 - v4, 0xA0BB79ABuLL);
  _platform_strlcpy();
  v9 = compat_mode(function, v8);
  free(v8);
  v10 = compat_mode(function, v6 + 1);
  v11 = *v6;
  switch(v11)
  {
    case '&':
      v7 = v9 && v10;
      break;
    case '|':
      v7 = v9 || v10;
      break;
    case '^':
      v7 = v9 ^ v10;
      return (v3 ^ v7) & 1;
    default:
LABEL_18:
      fprintf(__stderrp, "invalid mode %s (while checking for %s)\n", v2, function);
LABEL_19:
      v7 = 0;
      return (v3 ^ v7) & 1;
  }
  return (v3 ^ v7) & 1;
}

const char *check_env_var()
{
  const char *result;
  const char *v1;
  int v2;

  result = getenv("COMMAND_MODE");
  if (result)
  {
    v1 = result;
    result = (const char *)strcasecmp(result, "legacy");
    v2 = (int)result;
    if ((_DWORD)result)
    {
      result = (const char *)strcasecmp(v1, "unix2003");
      if ((_DWORD)result)
        parse_error = 1;
    }
    unix2003_mode = v2 == 0;
  }
  return result;
}

int getloadavg(double a1[], int a2)
{
  uint64_t v4;
  double v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  size_t v10;
  _QWORD v11[2];
  uint64_t v12;
  int v13[2];

  v11[0] = 0;
  v11[1] = 0;
  v12 = 0;
  *(_QWORD *)v13 = 0x200000002;
  v10 = 24;
  if (sysctl(v13, 2u, v11, &v10, 0, 0) < 0)
  {
    LODWORD(v4) = -1;
  }
  else
  {
    if (a2 >= 3)
      v4 = 3;
    else
      v4 = a2;
    if ((_DWORD)v4)
    {
      v5 = (double)v12;
      v6 = (unsigned int *)v11;
      v7 = v4;
      do
      {
        v8 = *v6++;
        *a1++ = (double)v8 / v5;
        --v7;
      }
      while (v7);
    }
  }
  return v4;
}

ttyent *__cdecl getttynam(const char *a1)
{
  ttyent *v1;

  setttyent();
  do
    v1 = getttyent();
  while (v1 && _platform_strcmp());
  if (tf)
  {
    fclose((FILE *)tf);
    tf = 0;
  }
  return v1;
}

int setttyent(void)
{
  _QWORD *v0;

  v0 = (_QWORD *)seq;
  if (seq)
    goto LABEL_2;
  if (regcomp(&brapreg, "\\[(.*)]", 1))
    return 0;
  if (regcomp(&decpreg, "^([0-9]+)-([0-9]+)$", 1))
  {
LABEL_8:
    regfree(&brapreg);
    return 0;
  }
  if (regcomp(&hexpreg, "^0x([0-9a-f]+)-0x([0-9a-f]+)$", 3))
  {
LABEL_7:
    regfree(&decpreg);
    goto LABEL_8;
  }
  v0 = malloc_type_malloc(0x11CuLL, 0x1000040F3ACBFE9uLL);
  seq = (uint64_t)v0;
  if (!v0)
  {
    regfree(&hexpreg);
    goto LABEL_7;
  }
LABEL_2:
  *v0 = 0;
  slot = 1;
  if (tf)
  {
    rewind((FILE *)tf);
    return 1;
  }
  else
  {
    tf = (uint64_t)fopen("/etc/ttys", "r");
    return tf != 0;
  }
}

ttyent *getttyent(void)
{
  uint64_t v0;
  _xlocale *v1;
  _xlocale *v2;
  int v3;
  uint64_t v4;
  int v5;
  ttyent *v6;
  __darwin_rune_t *v7;
  uint64_t v8;
  char *v9;
  __darwin_ct_rune_t v10;
  __uint32_t v11;
  int v12;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __darwin_ct_rune_t v21;
  uint64_t v22;
  uint64_t v23;
  __darwin_ct_rune_t v24;
  uint64_t v25;
  __darwin_ct_rune_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v31;
  _BYTE *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v39;
  uint64_t v40;
  int v41;
  int v42;
  regoff_t rm_eo;
  int rm_so;
  int v45;
  regmatch_t v46;
  regmatch_t __pmatch;
  regmatch_t v48;
  uint64_t v49;

  v0 = __locale_key;
  v1 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v0);
  if (v1)
    v2 = v1;
  else
    v2 = (_xlocale *)&__global_locale;
  if (!getttyent_line)
  {
    getttyent_line = (uint64_t)malloc_type_malloc(0x400uLL, 0x49ACCA7BuLL);
    if (!getttyent_line)
      return 0;
  }
  if (!tf && !setttyent())
    return 0;
  v3 = slot;
  v4 = seq;
  v5 = *(_DWORD *)seq;
  if (slot >= *(_DWORD *)seq)
  {
    v6 = (ttyent *)&getttyent_tty;
    v7 = &_DefaultRuneLocale.__mapupper[243];
    do
    {
      if (*(int *)(v4 + 4) >= 1)
      {
        v39 = (char *)getttyent_tty;
        v40 = *(unsigned int *)(v4 + 8);
        *(_DWORD *)(v4 + 8) = v40 + 1;
        sprintf(v39, (const char *)(v4 + 12), v40);
        ++slot;
        --*(_DWORD *)(seq + 4);
        return v6;
      }
      if (v3 == v5)
      {
        v41 = v5 + 1;
        goto LABEL_111;
      }
      do
      {
        while (1)
        {
          v8 = getttyent_line;
          if (!fgets((char *)getttyent_line, 1024, (FILE *)tf))
            return 0;
          if (_platform_strchr())
            break;
          do
            v12 = getc((FILE *)tf);
          while (v12 != 10 && v12 != -1);
        }
        v9 = (char *)(v8 - 1);
        do
        {
          v10 = v9[1];
          if (v10 < 0)
            LOWORD(v11) = ___runetype_l(v10, v2);
          else
            v11 = _DefaultRuneLocale.__runetype[v10];
          ++v9;
        }
        while ((v11 & 0x4000) != 0);
      }
      while (!*v9 || *v9 == 35);
      *((_BYTE *)v7 + 712) = 0;
      getttyent_tty = (uint64_t)v9;
      v14 = skip(v9);
      v15 = v14;
      qword_1EDF54260 = (uint64_t)v14;
      if (*v14)
      {
        v16 = skip(v14);
        v15 = v16;
        qword_1EDF54268 = (uint64_t)v16;
        if (*v16)
          v15 = skip(v16);
        else
          qword_1EDF54268 = 0;
      }
      else
      {
        qword_1EDF54260 = 0;
        qword_1EDF54268 = 0;
      }
      dword_1EDF54270 = 0;
      qword_1EDF54280 = 0;
      qword_1EDF54288 = 0;
      qword_1EDF54278 = 0;
      if (*v15)
      {
        v45 = -1;
        while (1)
        {
          if (!_platform_strncmp())
          {
            v21 = v15[3];
            if (v21 < 0)
            {
              if ((___runetype_l(v21, v2) & 0x4000) != 0)
              {
LABEL_71:
                v27 = dword_1EDF54270 & 0xFFFFFFFE;
LABEL_76:
                dword_1EDF54270 = v27;
                goto LABEL_77;
              }
            }
            else if ((_DefaultRuneLocale.__runetype[v21] & 0x4000) != 0)
            {
              goto LABEL_71;
            }
          }
          if (!_platform_strncmp())
          {
            v24 = v15[2];
            if (v24 < 0)
            {
              if ((___runetype_l(v24, v2) & 0x4000) != 0)
              {
LABEL_73:
                v27 = dword_1EDF54270 | 1;
                goto LABEL_76;
              }
            }
            else if ((_DefaultRuneLocale.__runetype[v24] & 0x4000) != 0)
            {
              goto LABEL_73;
            }
          }
          if (!_platform_strncmp())
          {
            v26 = v15[6];
            if (v26 < 0)
            {
              if ((___runetype_l(v26, v2) & 0x4000) != 0)
              {
LABEL_75:
                v27 = dword_1EDF54270 | 2;
                goto LABEL_76;
              }
            }
            else if ((_DefaultRuneLocale.__runetype[v26] & 0x4000) != 0)
            {
              goto LABEL_75;
            }
          }
          if (_platform_strncmp() || v15[6] != 61)
          {
            if (_platform_strncmp() || v15[7] != 61)
            {
              if (_platform_strncmp() || v15[8] != 61)
              {
                if (_platform_strncmp() || v15[4] != 61)
                  goto LABEL_80;
                v25 = _platform_strchr();
                if (v25)
                  v45 = atoi((const char *)(v25 + 1));
              }
              else
              {
                v22 = _platform_strchr();
                if (v22)
                  v23 = v22 + 1;
                else
                  v23 = 0;
                qword_1EDF54288 = v23;
              }
            }
            else
            {
              v19 = _platform_strchr();
              if (v19)
                v20 = v19 + 1;
              else
                v20 = 0;
              qword_1EDF54280 = v20;
            }
          }
          else
          {
            v17 = _platform_strchr();
            if (v17)
              v18 = v17 + 1;
            else
              v18 = 0;
            qword_1EDF54278 = v18;
          }
LABEL_77:
          v15 = skip(v15);
          if (!*v15)
            goto LABEL_80;
        }
      }
      v45 = -1;
LABEL_80:
      if (zapchar == 35 || *v15 == 35)
      {
        do
        {
          v29 = *++v15;
          v28 = v29;
        }
        while (v29 == 32 || v28 == 9);
      }
      qword_1EDF54290 = (uint64_t)v15;
      if (*v15)
        v31 = (uint64_t)v15;
      else
        v31 = 0;
      qword_1EDF54290 = v31;
      v32 = (_BYTE *)_platform_strchr();
      if (v32)
        *v32 = 0;
      if (regexec(&brapreg, (const char *)getttyent_tty, 3uLL, &__pmatch, 0))
        goto LABEL_92;
      rm_eo = __pmatch.rm_eo;
      rm_so = __pmatch.rm_so;
      v46 = v48;
      __pmatch = v48;
      v42 = regexec(&decpreg, (const char *)getttyent_tty, 3uLL, &__pmatch, 4);
      if (v42)
      {
        __pmatch = v46;
        if (regexec(&hexpreg, (const char *)getttyent_tty, 3uLL, &__pmatch, 4))
          goto LABEL_92;
        v33 = 16;
      }
      else
      {
        v33 = 10;
      }
      v34 = strtol((const char *)(getttyent_tty + v48.rm_so), 0, v33);
      v35 = strtol((const char *)(getttyent_tty + v49), 0, v33);
      if (v35 < v34)
      {
        v3 = slot;
        v4 = seq;
        v7 = (_DWORD *)(&_DefaultRuneLocale + 3080);
        goto LABEL_102;
      }
      v36 = seq;
      *(_DWORD *)(seq + 4) = v35 - v34 + 1;
      *(_DWORD *)(v36 + 8) = v34;
      v37 = 120;
      if (!v42)
        v37 = 100;
      sprintf((char *)(v36 + 12), "%.*s%%0%d%c%s", rm_so, (const char *)getttyent_tty, LODWORD(v48.rm_eo) - LODWORD(v48.rm_so), v37, (const char *)(getttyent_tty + rm_eo));
LABEL_92:
      v3 = slot;
      v4 = seq;
      if (v45 <= slot)
      {
        v7 = (_DWORD *)(&_DefaultRuneLocale + 3080);
        if (*(int *)(seq + 4) <= 0)
        {
          v41 = slot + 1;
LABEL_111:
          slot = v41;
          return (ttyent *)&getttyent_tty;
        }
      }
      else
      {
        *(_DWORD *)seq = v45;
        v7 = (_DWORD *)(&_DefaultRuneLocale + 3080);
      }
LABEL_102:
      v5 = *(_DWORD *)v4;
    }
    while (v3 >= *(_DWORD *)v4);
  }
  slot = v3 + 1;
  return (ttyent *)&getttyent_nonexistent;
}

int endttyent(void)
{
  int result;

  if (!tf)
    return 1;
  result = fclose((FILE *)tf) != -1;
  tf = 0;
  return result;
}

char *skip(char *result)
{
  int v1;
  char *v2;
  int v3;
  int v4;
  BOOL v5;
  char v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;

  v1 = 0;
  v2 = result;
  while (1)
  {
    v3 = *result;
    if (v3 == 34)
    {
      v1 ^= 1u;
      goto LABEL_13;
    }
    if (!*result)
      goto LABEL_26;
    if (v1 == 1 && v3 == 92)
    {
      v4 = result[1];
      v5 = v4 == 34;
      if (v4 == 34)
        v6 = 34;
      else
        v6 = 92;
      if (v5)
        ++result;
      *v2++ = v6;
      v1 = 1;
      goto LABEL_13;
    }
    *v2++ = v3;
    if (v1 == 1)
      goto LABEL_13;
    if ((v3 - 9) < 2 || v3 == 32)
      break;
    if (v3 == 35)
    {
      zapchar = 35;
      *result = 0;
      goto LABEL_26;
    }
    v1 = 0;
LABEL_13:
    ++result;
  }
  zapchar = v3;
  *result++ = 0;
  while (1)
  {
    v7 = *result;
    v8 = v7 > 0x20;
    v9 = (1 << v7) & 0x100000600;
    if (v8 || v9 == 0)
      break;
    ++result;
  }
LABEL_26:
  *(v2 - 1) = 0;
  return result;
}

char *getusershell(void)
{
  char **v0;
  char *v1;

  v0 = (char **)curshell;
  if (!curshell)
  {
    v0 = initshells();
    curshell = (uint64_t)v0;
  }
  v1 = *v0;
  if (*v0)
    curshell = (uint64_t)(v0 + 1);
  return v1;
}

char **initshells()
{
  uint64_t v0;
  _xlocale *v1;
  _xlocale *v2;
  FILE *v3;
  FILE *v4;
  int v5;
  char **v6;
  char **v7;
  char *i;
  char *j;
  int v10;
  __darwin_ct_rune_t v11;
  stat v13;

  memset(&v13, 0, sizeof(v13));
  v0 = __locale_key;
  v1 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v0);
  if (v1)
    v2 = v1;
  else
    v2 = (_xlocale *)&__global_locale;
  if (shells)
    free((void *)shells);
  shells = 0;
  if (strings)
    free((void *)strings);
  strings = 0;
  v3 = fopen("/etc/shells", "r");
  if (!v3)
    return okshells;
  v4 = v3;
  v5 = fileno(v3);
  if (fstat(v5, &v13) == -1 || (strings = (uint64_t)malloc_type_malloc(LODWORD(v13.st_size), 0x768E90E3uLL)) == 0)
  {
    fclose(v4);
    return okshells;
  }
  v6 = (char **)malloc_type_calloc(LODWORD(v13.st_size) / 3uLL, 8uLL, 0x10040436913F5uLL);
  shells = (uint64_t)v6;
  if (!v6)
  {
    fclose(v4);
    free((void *)strings);
    strings = 0;
    return okshells;
  }
  v7 = v6;
  for (i = (char *)strings; fgets(i, 1025, v4); *(i - 1) = 0)
  {
    for (j = i; ; ++j)
    {
      ++i;
      while (1)
      {
        v10 = *j;
        if (*j)
        {
          if (v10 != 35)
            break;
        }
        if (!fgets(j, 1025, v4))
          goto LABEL_30;
      }
      if (v10 == 47)
        break;
    }
    *v7++ = j;
    while (1)
    {
      v11 = *(i - 1);
      if (v11 < 0)
      {
        if ((___runetype_l(v11, v2) & 0x4000) != 0)
          break;
      }
      else if ((_DefaultRuneLocale.__runetype[v11] & 0x4000) != 0)
      {
        break;
      }
      if (!*(i - 1) || *(i - 1) == 35)
        break;
      ++i;
    }
  }
LABEL_30:
  *v7 = 0;
  fclose(v4);
  return (char **)shells;
}

void endusershell(void)
{
  if (shells)
    free((void *)shells);
  shells = 0;
  if (strings)
    free((void *)strings);
  strings = 0;
  curshell = 0;
}

void setusershell(void)
{
  curshell = (uint64_t)initshells();
}

int getvfsbyname(const char *a1, vfsconf *a2)
{
  int i;
  int result;
  size_t v5;
  int v6;
  int v7[2];
  int v8;
  int v9;

  v6 = 0;
  *(_QWORD *)v7 = 3;
  v8 = 1;
  v5 = 4;
  if ((sysctl(v7, 3u, &v6, &v5, 0, 0) & 0x80000000) == 0)
  {
    v8 = 2;
    v5 = 40;
    if (v6 >= 1)
    {
      for (i = 0; i < v6; ++i)
      {
        v9 = i;
        if (sysctl(v7, 4u, a2, &v5, 0, 0) < 0)
        {
          if (*__error() != 45)
            return -1;
        }
        else
        {
          result = _platform_strcmp();
          if (!result)
            return result;
        }
      }
    }
    *__error() = 2;
  }
  return -1;
}

int ftw(const char *a1, int (__cdecl *a2)(const char *, const stat *, int), int a3)
{
  return both_ftw((char *)a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))a2, 0, a3, 1);
}

uint64_t both_ftw(char *a1, uint64_t (*a2)(_QWORD, _QWORD, _QWORD), uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD), int a4, uint64_t a5)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v10;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  FTS *v19;
  FTS *v20;
  FTSENT *v21;
  FTSENT *v22;
  int v23;
  uint64_t v24;
  const char *fts_path;
  int v26;
  uint64_t v27;
  uint64_t (*v28)(_QWORD, _QWORD, _QWORD, _QWORD);
  FTS *v29;
  uint64_t v30;
  uint64_t (*v31)(_QWORD, _QWORD, _QWORD);
  uint64_t v32;
  char *v33;
  char *v34;
  int fts_level;
  uint64_t v36;
  int *v37;
  int v38;
  unsigned int v39;
  char v40;
  int v41;
  stat v42;
  stat v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  v45 = 0;
  v46 = 0;
  v44 = 0;
  if ((a4 - 10241) <= 0xFFFFD7FF)
  {
    *__error() = 22;
    v6 = -1;
    goto LABEL_3;
  }
  v10 = a5;
  if ((a5 & 8) != 0)
    v14 = 1;
  else
    v14 = 5;
  v15 = a5 & 2;
  v16 = v14 & 0xFFFFFFBF | (((v15 >> 1) & 1) << 6);
  if ((a5 & 1) != 0)
    v17 = 16;
  else
    v17 = 2;
  v18 = v16 | v17;
  if ((a5 & 8) != 0)
  {
    v6 = open_NOCANCEL();
    if (v6 < 0)
      goto LABEL_3;
    v18 |= 4u;
  }
  else
  {
    v6 = -1;
  }
  memset(&v43, 0, sizeof(v43));
  if ((stat(a1, &v43) & 0x80000000) == 0)
  {
    if (!a3 || (v43.st_mode & 0xF000) == 0x4000)
      goto LABEL_19;
    *__error() = 20;
LABEL_3:
    v7 = *__error();
    v8 = 0xFFFFFFFFLL;
    if (v6 < 0)
      goto LABEL_5;
LABEL_4:
    close_NOCANCEL();
    goto LABEL_5;
  }
  if (*__error() == 62 || *__error() == 63 || *__error() == 2 || *__error() == 20 || *__error() == 13)
    goto LABEL_3;
LABEL_19:
  v45 = a1;
  v46 = 0;
  v19 = fts_open(&v45, v18, 0);
  if (!v19)
    goto LABEL_3;
  v20 = v19;
  v21 = fts_read(v19);
  if (!v21)
  {
LABEL_71:
    v8 = 0;
    goto LABEL_72;
  }
  v22 = v21;
  v40 = (a3 == 0) | v10;
  v41 = v6;
  if (a3)
    v23 = 6;
  else
    v23 = 5;
  v39 = v23;
  while (2)
  {
    v8 = 0xFFFFFFFFLL;
    v24 = 2;
    switch(v22->fts_info)
    {
      case 1u:
        if ((v10 & 4) != 0 || (_DWORD)v15 && v22->fts_statp->st_dev != v43.st_dev || access(v22->fts_path, 4))
          goto LABEL_58;
        goto LABEL_39;
      case 2u:
        if ((v40 & 1) == 0)
        {
          if ((v10 & 4) == 0)
          {
LABEL_39:
            v24 = 1;
            if ((v6 & 0x80000000) == 0)
            {
LABEL_48:
              fts_path = v22->fts_path;
              if ((_DWORD)v24 == 1)
              {
                v26 = chdir(fts_path);
              }
              else
              {
                v27 = v10;
                v28 = a3;
                v29 = v20;
                v30 = v15;
                v31 = a2;
                v32 = v5;
                v33 = strdup(fts_path);
                v33[v22->fts_pathlen - v22->fts_namelen] = 0;
                v26 = chdir(v33);
                v34 = v33;
                v5 = v32;
                a2 = v31;
                v15 = v30;
                v20 = v29;
                a3 = v28;
                v10 = v27;
                v6 = v41;
                free(v34);
              }
              if (v26 < 0)
              {
                v8 = 0xFFFFFFFFLL;
                if ((_DWORD)v24 == 2 && v22->fts_pathlen == v22->fts_namelen)
                {
                  v37 = __error();
                  v38 = 24;
                  goto LABEL_79;
                }
                goto LABEL_72;
              }
            }
LABEL_52:
            if (a3)
            {
              fts_level = v22->fts_level;
              LODWORD(v44) = v22->fts_pathlen - v22->fts_namelen;
              HIDWORD(v44) = fts_level;
              v36 = a3(v22->fts_path, v22->fts_statp, v24, &v44);
            }
            else
            {
              v36 = a2(v22->fts_path, v22->fts_statp, v24);
            }
            v8 = v36;
            if ((v6 & 0x80000000) == 0 && fchdir(v6) < 0)
            {
              v8 = 0xFFFFFFFFLL;
              goto LABEL_72;
            }
            if ((_DWORD)v8)
              goto LABEL_72;
          }
LABEL_58:
          v22 = fts_read(v20);
          if (!v22)
            goto LABEL_71;
          continue;
        }
        v37 = __error();
        v38 = 62;
LABEL_79:
        *v37 = v38;
LABEL_72:
        v7 = *__error();
        fts_close(v20);
        if ((v6 & 0x80000000) == 0)
          goto LABEL_4;
LABEL_5:
        *__error() = v7;
        return v8;
      case 3u:
      case 8u:
        if ((_DWORD)v15 && v22->fts_statp->st_dev != v43.st_dev)
          goto LABEL_58;
        v24 = 0;
        if (v6 < 0)
          goto LABEL_52;
        goto LABEL_48;
      case 4u:
        goto LABEL_47;
      case 6u:
        if ((v10 & 4) == 0 || (_DWORD)v15 && v22->fts_statp->st_dev != v43.st_dev)
          goto LABEL_58;
        v24 = 3;
        if (v6 < 0)
          goto LABEL_52;
        goto LABEL_48;
      case 0xAu:
      case 0xBu:
        v24 = 4;
        if (v6 < 0)
          goto LABEL_52;
        goto LABEL_48;
      case 0xCu:
        v24 = 5;
LABEL_47:
        if ((v6 & 0x80000000) == 0)
          goto LABEL_48;
        goto LABEL_52;
      case 0xDu:
        memset(&v42, 0, sizeof(v42));
        if (stat(v22->fts_path, &v42) < 0 && *__error() == 62)
          goto LABEL_72;
        v24 = v39;
        if (v6 < 0)
          goto LABEL_52;
        goto LABEL_48;
      default:
        goto LABEL_72;
    }
  }
}

int nftw(const char *a1, int (__cdecl *a2)(const char *, const stat *, int, FTW *), int a3, int a4)
{
  return both_ftw((char *)a1, 0, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))a2, a3, *(uint64_t *)&a4);
}

int sigemptyset(sigset_t *a1)
{
  *a1 = 0;
  return 0;
}

int sigfillset(sigset_t *a1)
{
  *a1 = -1;
  return 0;
}

int sigaddset(sigset_t *a1, int a2)
{
  int result;

  if (a2 < 0x21)
  {
    if (a2)
    {
      result = 0;
      *a1 |= 1 << (a2 - 1);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    *__error() = 22;
    return -1;
  }
  return result;
}

int sigdelset(sigset_t *a1, int a2)
{
  int result;

  if (a2 < 0x21)
  {
    if (a2)
    {
      result = 0;
      *a1 &= ~(1 << (a2 - 1));
    }
    else
    {
      return 0;
    }
  }
  else
  {
    *__error() = 22;
    return -1;
  }
  return result;
}

int sigismember(const sigset_t *a1, int a2)
{
  if (a2 < 0x21)
  {
    if (a2)
      return (*a1 >> (a2 - 1)) & 1;
    else
      return 0;
  }
  else
  {
    *__error() = 22;
    return -1;
  }
}

char *__cdecl fflagstostr(unint64_t a1)
{
  char *result;
  uint64_t v3;
  char *v4;
  char **v5;
  unint64_t v6;
  uint64_t v7;
  const char *v8;
  char v9;
  unsigned __int8 *v10;
  int v11;

  result = (char *)malloc_type_malloc(0x111uLL, 0x74B51EB3uLL);
  if (result)
  {
    v3 = 0;
    v4 = result;
    do
    {
      v5 = &(&mapping)[3 * v3];
      v6 = (unint64_t)v5[1];
      if ((v6 & a1) != 0)
      {
        if (v4 > result)
          *v4++ = 44;
        v7 = (uint64_t)(*v5 + 2);
        if (v3 == 15)
          v8 = "nodump";
        else
          v8 = (const char *)v7;
        v9 = *v8;
        if (*v8)
        {
          v10 = (unsigned __int8 *)(v8 + 1);
          do
          {
            *v4++ = v9;
            v11 = *v10++;
            v9 = v11;
          }
          while (v11);
        }
        a1 &= ~v6;
      }
      ++v3;
    }
    while (v3 != 21);
    *v4 = 0;
  }
  return result;
}

int strtofflags(char **a1, unint64_t *a2, unint64_t *a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  char *__stringp;

  if (a2)
    *a2 = 0;
  if (a3)
    *a3 = 0;
  __stringp = *a1;
  v6 = strsep(&__stringp, "\t ,");
  if (v6)
  {
    v7 = v6;
    while (1)
    {
      *a1 = v7;
      if (*v7)
      {
        v8 = 0;
        v9 = &qword_1E1E9C7F0;
        while (_platform_strcmp())
        {
          if (!_platform_strcmp())
          {
            if ((_DWORD)v8 == 15)
            {
              v10 = a2;
              if (!a2)
                goto LABEL_25;
              goto LABEL_18;
            }
            if (a3)
            {
              v11 = a3;
              goto LABEL_23;
            }
            goto LABEL_24;
          }
          ++v8;
          v9 += 3;
          if (v8 == 21)
            goto LABEL_27;
        }
        if ((_DWORD)v8 == 15)
        {
          v10 = a3;
          if (!a3)
            goto LABEL_25;
LABEL_18:
          *v10 |= *v9;
          goto LABEL_25;
        }
        if (a2)
        {
          v11 = a2;
LABEL_23:
          *v11 |= *v9;
        }
LABEL_24:
        if ((_DWORD)v8 == 21)
          break;
      }
LABEL_25:
      v6 = strsep(&__stringp, "\t ,");
      v7 = v6;
      if (!v6)
        return (int)v6;
    }
LABEL_27:
    LODWORD(v6) = 1;
  }
  return (int)v6;
}

uint64_t _thread_stack_async_pcs(uint64_t a1, int a2, unsigned int *a3, int a4, uintptr_t a5)
{
  return __thread_stack_pcs(a1, a2, a3, a4 + 1, a5, 1);
}

lastlogx *__cdecl getlastlogx(uid_t a1, lastlogx *a2)
{
  char *v3;
  char *v4;
  lastlogx *v5;
  passwd v7;

  memset(&v7, 0, sizeof(v7));
  v3 = _pwuid_r(a1, &v7);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = getlastlogxbyname(v7.pw_name, a2);
  free(v4);
  return v5;
}

char *_pwuid_r(uid_t a1, passwd *a2)
{
  size_t v4;
  char *v5;
  passwd *v7;

  v4 = pw_size;
  if (!pw_size)
  {
    v4 = sysconf(71);
    pw_size = v4;
    if (!v4)
      return 0;
  }
  v5 = (char *)malloc_type_malloc(v4, 0x2C9BF49DuLL);
  if (v5)
  {
    v7 = 0;
    getpwuid_r(a1, a2, v5, pw_size, &v7);
    if (!v7)
    {
      free(v5);
      return 0;
    }
  }
  return v5;
}

lastlogx *__cdecl getlastlogxbyname(const char *a1, lastlogx *a2)
{
  __asl_object_s *v4;
  __asl_object_s *v5;
  __asl_object_s *v6;
  __asl_object_s *v7;
  uint64_t v8;
  __asl_object_s *v9;
  const char *v10;
  const char *v11;
  uint64_t v13;

  if (!a1)
    return 0;
  if (!*a1)
    return 0;
  v4 = asl_new(1u);
  if (!v4)
    return 0;
  v5 = v4;
  asl_set_query(v4, "Facility", "com.apple.system.lastlog", 1u);
  asl_set_query(v5, "ut_user", a1, 1u);
  v6 = asl_new(2u);
  if (!v6)
    goto LABEL_18;
  v7 = v6;
  asl_append(v6, v5);
  asl_release(v5);
  v13 = 0;
  v5 = (__asl_object_s *)MEMORY[0x18D7678A4](0, v7, &v13, -1, 1, 4000000, 0xFFFFFFFFLL);
  asl_release(v7);
  if (!v5)
    return 0;
  v8 = MEMORY[0x18D7678BC](v5);
  if (!v8)
  {
LABEL_18:
    asl_release(v5);
    return 0;
  }
  v9 = (__asl_object_s *)v8;
  if (a2 || (a2 = (lastlogx *)malloc_type_malloc(0x130uLL, 0x1000040DDA6C183uLL)) != 0)
  {
    *(_OWORD *)&a2->ll_host[224] = 0u;
    *(_OWORD *)&a2->ll_host[240] = 0u;
    *(_OWORD *)&a2->ll_host[192] = 0u;
    *(_OWORD *)&a2->ll_host[208] = 0u;
    *(_OWORD *)&a2->ll_host[160] = 0u;
    *(_OWORD *)&a2->ll_host[176] = 0u;
    *(_OWORD *)&a2->ll_host[128] = 0u;
    *(_OWORD *)&a2->ll_host[144] = 0u;
    *(_OWORD *)&a2->ll_host[96] = 0u;
    *(_OWORD *)&a2->ll_host[112] = 0u;
    *(_OWORD *)&a2->ll_host[64] = 0u;
    *(_OWORD *)&a2->ll_host[80] = 0u;
    *(_OWORD *)&a2->ll_host[32] = 0u;
    *(_OWORD *)&a2->ll_host[48] = 0u;
    *(_OWORD *)a2->ll_host = 0u;
    *(_OWORD *)&a2->ll_host[16] = 0u;
    *(_OWORD *)a2->ll_line = 0u;
    *(_OWORD *)&a2->ll_line[16] = 0u;
    a2->ll_tv = 0u;
    if (asl_get(v9, "ut_line"))
      _platform_strncpy();
    v10 = asl_get(v9, "ut_tv.tv_sec");
    if (v10)
      a2->ll_tv.tv_sec = strtol(v10, 0, 10);
    v11 = asl_get(v9, "ut_tv.tv_usec");
    if (v11)
      a2->ll_tv.tv_usec = strtol(v11, 0, 10);
    if (asl_get(v9, "ut_host"))
      _platform_strncpy();
  }
  asl_release(v5);
  return a2;
}

void _utmpx_asl(uint64_t a1)
{
  asl_object_t v2;
  __asl_object_s *v3;
  __asl_object_s *v4;
  __asl_object_s *v5;
  const char *v6;
  char *v7;
  char *v8;
  __darwin_ct_rune_t v9;
  unint64_t v10;
  unsigned int v11;
  char value[256];
  char v13;

  v2 = asl_open(0, 0, 4u);
  if (*(_WORD *)(a1 + 296))
  {
    v3 = v2;
    v4 = asl_new(0);
    if (!v4)
    {
      asl_release(v3);
      return;
    }
    v5 = v4;
    if (*(_WORD *)(a1 + 296) == 7)
      v6 = "com.apple.system.lastlog";
    else
      v6 = "com.apple.system.utmpx";
    asl_set(v4, "Facility", v6);
    asl_set(v5, "Level", "5");
    if (*(_BYTE *)a1)
    {
      _platform_strncpy();
      v13 = 0;
      asl_set(v5, "ut_user", value);
    }
    v7 = (char *)(a1 + 256);
    v8 = (char *)(a1 + 259);
    while (v8 >= v7)
    {
      v9 = *v8;
      if (v9 < 0)
        v10 = ___runetype(v9);
      else
        LODWORD(v10) = _DefaultRuneLocale.__runetype[v9];
      --v8;
      if ((v10 & 0x40000) == 0)
      {
        snprintf(value, 0x101uLL, "0x%02x 0x%02x 0x%02x 0x%02x", *(char *)(a1 + 256), *(char *)(a1 + 257), *(char *)(a1 + 258), *(char *)(a1 + 259));
        goto LABEL_18;
      }
    }
    if (!*v7)
      goto LABEL_19;
    _platform_strncpy();
    value[4] = 0;
LABEL_18:
    asl_set(v5, "ut_id", value);
LABEL_19:
    if (*(_BYTE *)(a1 + 260))
    {
      _platform_strncpy();
      value[32] = 0;
      asl_set(v5, "ut_line", value);
    }
    if (*(int *)(a1 + 292) >= 1)
    {
      snprintf(value, 0x101uLL, "%d", *(_DWORD *)(a1 + 292));
      asl_set(v5, "ut_pid", value);
    }
    snprintf(value, 0x101uLL, "%d", *(__int16 *)(a1 + 296));
    asl_set(v5, "ut_type", value);
    snprintf(value, 0x101uLL, "%ld", *(_QWORD *)(a1 + 304));
    asl_set(v5, "ut_tv.tv_sec", value);
    snprintf(value, 0x101uLL, "%d", *(_DWORD *)(a1 + 312));
    asl_set(v5, "ut_tv.tv_usec", value);
    if (*(_BYTE *)(a1 + 320))
    {
      _platform_strncpy();
      v13 = 0;
      asl_set(v5, "ut_host", value);
    }
    v11 = *(__int16 *)(a1 + 296);
    if (v11 <= 0xB)
    {
      if (((1 << v11) & 0x81C) != 0)
      {
        sprintf(value, "%s: %ld %d");
        goto LABEL_35;
      }
      if (((1 << v11) & 0x60) != 0)
      {
        sprintf(value, "%s: %d");
        goto LABEL_35;
      }
      if (((1 << v11) & 0x180) != 0)
      {
        sprintf(value, "%s: %d %.*s");
LABEL_35:
        asl_set(v5, "Message", value);
        asl_send(v3, v5);
        asl_release(v5);
        asl_release(v3);
        return;
      }
    }
    if (*(__int16 *)(a1 + 296) > 0xB)
      sprintf(value, "ut_type=%d");
    else
      _platform_strcpy();
    goto LABEL_35;
  }
}

uint64_t _utmpx_working_copy(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  char v10;
  uint64_t v11;
  _BYTE *v12;
  uid_t v13;
  char *v14;
  char *v15;
  passwd v17[3];

  if (*(unsigned __int16 *)(a1 + 296) < 0x4000u)
    return a1;
  v4 = a2;
  _platform_memmove();
  v6 = *(_WORD *)(v4 + 296) & 0x3FFF;
  *(_WORD *)(v4 + 296) = v6;
  if ((*(__int16 *)(a1 + 296) & 0x80000000) == 0)
    return v4;
  v7 = 16;
  switch(v6)
  {
    case 0:
      return v4;
    case 5:
      v7 = 24;
      break;
    case 6:
      v7 = 25;
      break;
    case 7:
      v8 = *(_DWORD *)(v4 + 256) == _utmpx_working_copy_idzero;
      v7 = 31;
      v9 = 29;
      goto LABEL_9;
    case 8:
      v8 = *(_DWORD *)(v4 + 256) == _utmpx_working_copy_idzero;
      v7 = 30;
      v9 = 24;
LABEL_9:
      if (!v8)
        v7 = v9;
      break;
    default:
      break;
  }
  if (a3)
    v10 = (v7 << 30 >> 31) & 6;
  else
    v10 = v7;
  if ((v10 & 4) != 0 && !*(_BYTE *)(v4 + 260))
  {
    if (ttyname_r(0, (char *)v17, 0x100uLL)
      && ttyname_r(1, (char *)v17, 0x100uLL)
      && ttyname_r(2, (char *)v17, 0x100uLL))
    {
      return 0;
    }
    strrchr((char *)v17, 47);
    _platform_strncpy();
  }
  if ((v10 & 2) != 0)
  {
    v11 = 33;
    v12 = (_BYTE *)(v4 + 260);
    while (*v12)
    {
      ++v12;
      if ((unint64_t)--v11 <= 1)
      {
        v12 = (_BYTE *)(v4 + 292);
        break;
      }
    }
    if ((unint64_t)&v12[-v4 - 260] < 4)
      _platform_memmove();
    else
      *(_DWORD *)(v4 + 256) = *((_DWORD *)v12 - 1);
  }
  if ((v10 & 8) != 0 && !*(_DWORD *)(v4 + 292))
    *(_DWORD *)(v4 + 292) = getpid();
  if ((v10 & 1) == 0 || *(_BYTE *)v4)
    goto LABEL_35;
  memset(v17, 0, 72);
  v13 = getuid();
  v14 = _pwuid_r(v13, v17);
  if (!v14)
    return 0;
  v15 = v14;
  _platform_strncpy();
  free(v15);
LABEL_35:
  if (!a3 && !*(_QWORD *)(v4 + 304) && !*(_DWORD *)(v4 + 312))
    gettimeofday((timeval *)(v4 + 304), 0);
  return v4;
}

void endutxent_wtmp(void)
{
  wtmp_func_1();
}

utmpx *getutxent_wtmp(void)
{
  return (utmpx *)wtmp_func_2();
}

void setutxent_wtmp(int a1)
{
  wtmp_func_3(a1);
}

int wtmpxname(const char *a1)
{
  unint64_t v2;
  char *v3;

  if (a1)
  {
    v2 = _platform_strlen();
    if (v2 <= 0x3FF && a1[v2 - 1] == 120)
    {
      if ((wtmp_func_0 & 1) != 0)
      {
        if ((wtmp_file_0 & 0x80000000) == 0)
        {
          close_NOCANCEL();
          wtmp_file_0 = -1;
        }
      }
      else
      {
        if (wtmp_asl_2)
        {
          asl_release((asl_object_t)wtmp_asl_2);
          wtmp_asl_2 = 0;
        }
        wtmp_asl_3 = 0;
        wtmp_asl_4 = 0;
      }
      if (wtmp_file_2)
        free((void *)wtmp_file_2);
      v3 = strdup(a1);
      wtmp_file_2 = (uint64_t)v3;
      if (v3)
      {
        LODWORD(v3) = 1;
        wtmp_func_0 = 1;
        wtmp_func_1 = end_file;
        wtmp_func_2 = (__asl_object_s *(*)())get_file;
        wtmp_func_3 = (void (*)(int))set_file;
      }
    }
    else
    {
      LODWORD(v3) = 0;
    }
  }
  else
  {
    if ((wtmp_func_0 & 1) != 0)
    {
      end_file();
      wtmp_func_0 = 0;
      wtmp_func_1 = end_asl;
      wtmp_func_2 = get_asl;
      wtmp_func_3 = set_asl;
    }
    else
    {
      if (wtmp_asl_2)
      {
        asl_release((asl_object_t)wtmp_asl_2);
        wtmp_asl_2 = 0;
      }
      wtmp_asl_3 = 0;
      wtmp_asl_4 = 0;
    }
    LODWORD(v3) = 1;
  }
  return (int)v3;
}

void end_asl()
{
  if (wtmp_asl_2)
  {
    asl_release((asl_object_t)wtmp_asl_2);
    wtmp_asl_2 = 0;
  }
  wtmp_asl_3 = 0;
  wtmp_asl_4 = 0;
}

void end_file()
{
  if ((wtmp_file_0 & 0x80000000) == 0)
  {
    close_NOCANCEL();
    wtmp_file_0 = -1;
  }
  if (wtmp_file_5)
  {
    free((void *)wtmp_file_5);
    wtmp_file_5 = 0;
  }
}

__asl_object_s *get_asl()
{
  __asl_object_s *v0;
  const char *v1;
  const char *v2;
  const char *v3;
  const char *v4;
  const char *v5;

  if ((wtmp_asl_3 & 1) == 0)
    set_asl(-1);
  if ((wtmp_asl_4 & 1) != 0)
    return 0;
  v0 = (__asl_object_s *)MEMORY[0x18D7678BC](wtmp_asl_2);
  if (v0)
  {
    _platform_bzero();
    if (asl_get(v0, "ut_user"))
      _platform_strncpy();
    if (asl_get(v0, "ut_id"))
      _platform_strncpy();
    if (asl_get(v0, "ut_line"))
      _platform_strncpy();
    v1 = asl_get(v0, "ut_pid");
    if (v1)
      dword_1EDF5475C = strtol(v1, 0, 10);
    v2 = asl_get(v0, "ut_type");
    if (v2)
      word_1EDF54760 = strtol(v2, 0, 10);
    v3 = asl_get(v0, "ut_tv.tv_sec");
    if (v3)
      qword_1EDF54768 = strtol(v3, 0, 10);
    v4 = asl_get(v0, "ut_tv.tv_usec");
    if (v4)
      dword_1EDF54770 = strtol(v4, 0, 10);
    v5 = asl_get(v0, "ut_host");
    v0 = (__asl_object_s *)&get_asl_utx;
    if (v5)
      _platform_strncpy();
  }
  else
  {
    asl_release((asl_object_t)wtmp_asl_2);
    wtmp_asl_2 = 0;
    wtmp_asl_4 = 1;
  }
  return v0;
}

void set_asl(int a1)
{
  __asl_object_s *v1;
  __asl_object_s *v2;
  __asl_object_s *v3;
  __asl_object_s *v4;
  __asl_object_s *v5;
  __asl_object_s *v6;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & 0x80000000) == 0)
  {
    wtmp_asl_1 = a1 == 0;
    wtmp_asl_0 = a1 != 0;
    wtmp_file_1 = a1 != 0;
  }
  wtmp_asl_3 = 0;
  wtmp_asl_4 = 0;
  if (wtmp_asl_2)
  {
    asl_release((asl_object_t)wtmp_asl_2);
    wtmp_asl_2 = 0;
  }
  v1 = asl_new(1u);
  if (v1)
  {
    v2 = v1;
    asl_set_query(v1, "Facility", "com.apple.system.utmpx", 1u);
    v3 = asl_new(1u);
    if (v3)
    {
      v4 = v3;
      asl_set_query(v3, "Facility", "com.apple.system.lastlog", 1u);
      v5 = asl_new(2u);
      if (v5)
      {
        v6 = v5;
        asl_append(v5, v2);
        asl_append(v6, v4);
        asl_release(v2);
        asl_release(v4);
        v8 = 0;
        if (wtmp_asl_1)
          v7 = 0xFFFFFFFFLL;
        else
          v7 = 1;
        wtmp_asl_2 = MEMORY[0x18D7678A4](0, v6, &v8, wtmp_asl_0 - 1, 0, 4000000, v7);
        asl_release(v6);
        if (wtmp_asl_2)
        {
          wtmp_asl_3 = 1;
          wtmp_asl_4 = 0;
        }
      }
      else
      {
        asl_release(v2);
        asl_release(v4);
      }
    }
    else
    {
      asl_release(v2);
    }
  }
}

void *get_file()
{
  int v0;
  uint64_t v1;
  void *v2;
  int v3;
  int NOCANCEL;
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  while (1)
  {
    v0 = wtmp_file_7 - 1;
    if (wtmp_file_7 >= 1)
      break;
    if ((wtmp_file_0 & 0x80000000) == 0)
    {
      if (!wtmp_file_4)
        return 0;
      v1 = wtmp_file_5;
      if (wtmp_file_1 == 1)
      {
        wtmp_file_6 = wtmp_file_5;
      }
      else
      {
        wtmp_file_6 = wtmp_file_5 + 19468;
        wtmp_file_3 -= 20096;
        if (lseek(wtmp_file_0, wtmp_file_3, 0) < 0)
        {
LABEL_24:
          v2 = 0;
          wtmp_file_4 = 0;
          return v2;
        }
        v1 = wtmp_file_5;
      }
      v3 = 20096;
      do
      {
        NOCANCEL = read_NOCANCEL();
        v5 = NOCANCEL;
        if (NOCANCEL <= 0)
        {
          if ((NOCANCEL & 0x80000000) == 0 || *__error() != 4 && *__error() != 35)
            goto LABEL_24;
        }
        else
        {
          v1 += NOCANCEL;
        }
        v6 = __OFSUB__(v3, v5);
        v3 -= v5;
      }
      while (!((v3 < 0) ^ v6 | (v3 == 0)));
      wtmp_file_4 -= 32;
      v0 = 31;
      break;
    }
    set_file(-1);
    if (wtmp_file_0 < 0)
      return 0;
  }
  v7 = wtmp_file_6;
  v8 = 628;
  if (!wtmp_file_1)
    v8 = -628;
  wtmp_file_6 += v8;
  wtmp_file_7 = v0;
  v2 = &get_file_ux;
  _platform_bzero();
  _platform_memmove();
  qword_1EDF549E8 = *(int *)(v7 + 300);
  dword_1EDF549F0 = *(_DWORD *)(v7 + 304);
  _platform_memmove();
  return v2;
}

uint64_t set_file(int a1)
{
  uint64_t result;
  uint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  stat v9;

  if ((a1 & 0x80000000) == 0)
  {
    wtmp_asl_1 = a1 == 0;
    wtmp_asl_0 = a1 != 0;
    wtmp_file_1 = a1 != 0;
  }
  if (!wtmp_file_5)
  {
    result = (uint64_t)malloc_type_malloc(0x4E80uLL, 0x1000040EE4658C1uLL);
    wtmp_file_5 = result;
    if (!result)
      return result;
  }
  if ((wtmp_file_0 & 0x80000000) == 0)
    close_NOCANCEL();
  result = open_NOCANCEL();
  wtmp_file_0 = result;
  if ((result & 0x80000000) != 0)
    return result;
  memset(&v9, 0, sizeof(v9));
  if (fstat(result, &v9) < 0)
    goto LABEL_28;
  wtmp_file_4 = v9.st_size / 0x274uLL;
  if (v9.st_size < 0x4E8uLL)
    goto LABEL_28;
  if (read_NOCANCEL() != 628)
    goto LABEL_28;
  v2 = wtmp_file_5;
  if (_platform_strcmp() || *(_WORD *)(v2 + 296) != 10)
    goto LABEL_28;
  v3 = (wtmp_file_4 - 2) & 0xFFFFFFFFFFFFFFE0;
  v4 = wtmp_file_4 - 1 - v3;
  wtmp_file_7 = v4;
  wtmp_file_4 = wtmp_file_4 - 1 - v4;
  if ((wtmp_file_1 & 1) != 0)
    goto LABEL_16;
  wtmp_file_3 = 628 * v3 + 628;
  if (lseek(wtmp_file_0, 628 * v3 + 628, 0) < 0)
  {
LABEL_28:
    wtmp_file_7 = 0;
    result = close_NOCANCEL();
    wtmp_file_0 = -1;
    return result;
  }
  v4 = wtmp_file_7;
  v2 = wtmp_file_5;
LABEL_16:
  v5 = 628 * v4;
  do
  {
    result = read_NOCANCEL();
    v6 = result;
    if ((int)result <= 0)
    {
      if ((result & 0x80000000) == 0)
        goto LABEL_28;
      result = (uint64_t)__error();
      if (*(_DWORD *)result != 4)
      {
        result = (uint64_t)__error();
        if (*(_DWORD *)result != 35)
          goto LABEL_28;
      }
    }
    else
    {
      v2 += result;
    }
    v7 = __OFSUB__(v5, v6);
    v5 -= v6;
  }
  while (!((v5 < 0) ^ v7 | (v5 == 0)));
  if (wtmp_file_1)
    v8 = wtmp_file_5;
  else
    v8 = wtmp_file_5 + 628 * wtmp_file_7 - 628;
  wtmp_file_6 = v8;
  return result;
}

uint64_t _utmpx32_64(uint64_t a1, uint64_t a2)
{
  _platform_bzero();
  _platform_memmove();
  *(_QWORD *)(a2 + 304) = *(int *)(a1 + 300);
  *(_DWORD *)(a2 + 312) = *(_DWORD *)(a1 + 304);
  return _platform_memmove();
}

uint64_t _utmpx64_32(uint64_t a1, uint64_t a2)
{
  _platform_bzero();
  _platform_memmove();
  *(_DWORD *)(a2 + 300) = *(_QWORD *)(a1 + 304);
  *(_DWORD *)(a2 + 304) = *(_DWORD *)(a1 + 312);
  return _platform_memmove();
}

void **_openutx(uint64_t a1)
{
  void **v2;
  void **v3;

  v2 = (void **)malloc_type_calloc(1uLL, 0x2E0uLL, 0x10300404E040BDAuLL);
  v3 = v2;
  if (v2)
  {
    *v2 = (void *)0x17600787475;
    *((_OWORD *)v2 + 41) = 0u;
    *((_OWORD *)v2 + 42) = 0u;
    *((_OWORD *)v2 + 43) = 0u;
    v2[88] = 0;
    v2[81] = (void *)850045863;
    if (!__utmpxname((uint64_t)v2, a1))
    {
      if (((_BYTE)v3[91] & 1) == 0)
        free(v3[89]);
      free(v3);
      v3 = 0;
      *__error() = 22;
    }
  }
  return v3;
}

uint64_t _closeutx(_QWORD *a1)
{
  if (a1 && *a1 == 0x17600787475)
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 81));
    __endutxent((uint64_t)a1);
    if ((a1[91] & 1) == 0)
      free((void *)a1[89]);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 81));
    free(a1);
    return 0;
  }
  else
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
}

uint64_t _os_debug_log_redirect_func()
{
  return 0;
}

uint64_t _os_debug_log_write_error()
{
  int *v0;
  char v2[248];

  v2[0] = 0;
  v0 = __error();
  strerror_r(*v0, v2, 0xF0uLL);
  return _simple_asl_log();
}

uint64_t _os_debug_log_open_file(uint64_t a1)
{
  uint64_t result;
  const char *v2;
  pid_t v3;
  char v4[1024];
  char __str[1024];

  if (a1)
    return open_NOCANCEL();
  v2 = getprogname();
  v3 = getpid();
  snprintf(__str, 0x400uLL, "os_debug_log.%s.%d.log", v2, v3);
  strcpy(v4, "/var/tmp/");
  if (access(v4, 2) || (_platform_strlcat(), result = open_NOCANCEL(), (result & 0x80000000) != 0))
  {
    if (!getenv("TMPDIR"))
      return 0xFFFFFFFFLL;
    _platform_strlcpy();
    if (access(v4, 2))
      return 0xFFFFFFFFLL;
    _platform_strlcat();
    result = open_NOCANCEL();
    if ((result & 0x80000000) != 0)
      return 0xFFFFFFFFLL;
  }
  return result;
}

int isascii(int _c)
{
  return _c < 0x80;
}

int isalnum(int _c)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_c <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_c];
    return (v2 & 0x500) != 0;
  }
  if (_c < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  LOWORD(v2) = ___runetype(_c);
  return (v2 & 0x500) != 0;
}

int isalpha(int _c)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_c <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_c];
    return (v2 >> 8) & 1;
  }
  if (_c < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_c);
  return (v2 >> 8) & 1;
}

int isblank(int _c)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_c <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_c];
    return (v2 >> 17) & 1;
  }
  if (_c < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_c);
  return (v2 >> 17) & 1;
}

int iscntrl(int _c)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_c <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_c];
    return (v2 >> 9) & 1;
  }
  if (_c < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_c);
  return (v2 >> 9) & 1;
}

int isdigit(int _c)
{
  if (_c <= 0xFF)
    return (_DefaultRuneLocale.__runetype[_c] >> 10) & 1;
  else
    return 0;
}

int isgraph(int _c)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_c <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_c];
    return (v2 >> 11) & 1;
  }
  if (_c < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_c);
  return (v2 >> 11) & 1;
}

int islower(int _c)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_c <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_c];
    return (v2 >> 12) & 1;
  }
  if (_c < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_c);
  return (v2 >> 12) & 1;
}

int isprint(int _c)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_c <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_c];
    return (v2 >> 18) & 1;
  }
  if (_c < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_c);
  return (v2 >> 18) & 1;
}

int ispunct(int _c)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_c <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_c];
    return (v2 >> 13) & 1;
  }
  if (_c < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_c);
  return (v2 >> 13) & 1;
}

int isspace(int _c)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_c <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_c];
    return (v2 >> 14) & 1;
  }
  if (_c < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_c);
  return (v2 >> 14) & 1;
}

int isupper(int _c)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_c <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_c];
    return (v2 >> 15) & 1;
  }
  if (_c < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_c);
  return (v2 >> 15) & 1;
}

int toascii(int _c)
{
  return _c & 0x7F;
}

int tolower(int _c)
{
  uint64_t v2;
  _QWORD *v3;

  if (_c >= 0x100)
    return ___tolower(_c);
  v2 = __locale_key;
  v3 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (!v3)
    v3 = &__global_locale;
  return *(_DWORD *)(*(_QWORD *)(v3[166] + 120) + 4 * _c + 1084);
}

int toupper(int _c)
{
  uint64_t v2;
  _QWORD *v3;

  if (_c >= 0x100)
    return ___toupper(_c);
  v2 = __locale_key;
  v3 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (!v3)
    v3 = &__global_locale;
  return *(_DWORD *)(*(_QWORD *)(v3[166] + 120) + 4 * _c + 2108);
}

int ishexnumber(int _c)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_c <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_c];
    return HIWORD(v2) & 1;
  }
  if (_c < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_c);
  return HIWORD(v2) & 1;
}

int isideogram(int _c)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_c <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_c];
    return (v2 >> 19) & 1;
  }
  if (_c < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_c);
  return (v2 >> 19) & 1;
}

int isnumber(int _c)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_c <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_c];
    return (v2 >> 10) & 1;
  }
  if (_c < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_c);
  return (v2 >> 10) & 1;
}

int isphonogram(int _c)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_c <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_c];
    return (v2 >> 21) & 1;
  }
  if (_c < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_c);
  return (v2 >> 21) & 1;
}

int isrune(int _c)
{
  _RuneLocale *v1;
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;

  if (_c <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_c];
    return v2 > 0xF;
  }
  if (_c < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_c);
  return v2 > 0xF;
}

int isspecial(int _c)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_c <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_c];
    return (v2 >> 20) & 1;
  }
  if (_c < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_c);
  return (v2 >> 20) & 1;
}

int digittoint_l(int c, locale_t l)
{
  int v2;
  locale_t v3;
  locale_t v4;

  if (c < 0x100)
  {
    v3 = (locale_t)&__c_locale;
    v4 = (locale_t)&__global_locale;
    if (l != (locale_t)-1)
      v4 = l;
    if (l)
      v3 = v4;
    v2 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 166) + 120) + 4 * c + 60);
  }
  else
  {
    LOBYTE(v2) = ___runetype_l(c, l);
  }
  return v2 & 0xF;
}

int isalnum_l(int c, locale_t l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (c <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[c];
    return (v3 & 0x500) != 0;
  }
  if (c < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1)
      v5 = l;
    if (l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  LOWORD(v3) = ___runetype_l(c, l);
  return (v3 & 0x500) != 0;
}

int isalpha_l(int c, locale_t l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (c <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[c];
    return (v3 >> 8) & 1;
  }
  if (c < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1)
      v5 = l;
    if (l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(c, l);
  return (v3 >> 8) & 1;
}

int isblank_l(int c, locale_t l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (c <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[c];
    return (v3 >> 17) & 1;
  }
  if (c < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1)
      v5 = l;
    if (l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(c, l);
  return (v3 >> 17) & 1;
}

int iscntrl_l(int c, locale_t l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (c <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[c];
    return (v3 >> 9) & 1;
  }
  if (c < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1)
      v5 = l;
    if (l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(c, l);
  return (v3 >> 9) & 1;
}

int isdigit_l(int c, locale_t l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (c <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[c];
    return (v3 >> 10) & 1;
  }
  if (c < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1)
      v5 = l;
    if (l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(c, l);
  return (v3 >> 10) & 1;
}

int isgraph_l(int c, locale_t l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (c <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[c];
    return (v3 >> 11) & 1;
  }
  if (c < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1)
      v5 = l;
    if (l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(c, l);
  return (v3 >> 11) & 1;
}

int ishexnumber_l(int c, locale_t l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (c <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[c];
    return HIWORD(v3) & 1;
  }
  if (c < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1)
      v5 = l;
    if (l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(c, l);
  return HIWORD(v3) & 1;
}

int isideogram_l(int c, locale_t l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (c <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[c];
    return (v3 >> 19) & 1;
  }
  if (c < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1)
      v5 = l;
    if (l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(c, l);
  return (v3 >> 19) & 1;
}

int islower_l(int c, locale_t l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (c <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[c];
    return (v3 >> 12) & 1;
  }
  if (c < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1)
      v5 = l;
    if (l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(c, l);
  return (v3 >> 12) & 1;
}

int isnumber_l(int c, locale_t l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (c <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[c];
    return (v3 >> 10) & 1;
  }
  if (c < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1)
      v5 = l;
    if (l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(c, l);
  return (v3 >> 10) & 1;
}

int isphonogram_l(int c, locale_t l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (c <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[c];
    return (v3 >> 21) & 1;
  }
  if (c < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1)
      v5 = l;
    if (l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(c, l);
  return (v3 >> 21) & 1;
}

int isprint_l(int c, locale_t l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (c <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[c];
    return (v3 >> 18) & 1;
  }
  if (c < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1)
      v5 = l;
    if (l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(c, l);
  return (v3 >> 18) & 1;
}

int ispunct_l(int c, locale_t l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (c <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[c];
    return (v3 >> 13) & 1;
  }
  if (c < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1)
      v5 = l;
    if (l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(c, l);
  return (v3 >> 13) & 1;
}

int isrune_l(int c, locale_t l)
{
  uint64_t v2;
  int v3;
  locale_t v4;
  locale_t v5;

  if (c > 0x7F)
  {
    if (c < 0x100)
    {
      v4 = (locale_t)&__c_locale;
      v5 = (locale_t)&__global_locale;
      if (l != (locale_t)-1)
        v5 = l;
      if (l)
        v4 = v5;
      v3 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 166) + 120) + 4 * c + 60);
    }
    else
    {
      v3 = ___runetype_l(c, l);
    }
    v2 = (int)(v3 & 0xFFFFFFF0);
  }
  else
  {
    v2 = _DefaultRuneLocale.__runetype[c] & 0xFFFFFFF0;
  }
  return v2 != 0;
}

int isspace_l(int c, locale_t l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (c <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[c];
    return (v3 >> 14) & 1;
  }
  if (c < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1)
      v5 = l;
    if (l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(c, l);
  return (v3 >> 14) & 1;
}

int isspecial_l(int c, locale_t l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (c <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[c];
    return (v3 >> 20) & 1;
  }
  if (c < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1)
      v5 = l;
    if (l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(c, l);
  return (v3 >> 20) & 1;
}

int isupper_l(int c, locale_t l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (c <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[c];
    return (v3 >> 15) & 1;
  }
  if (c < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1)
      v5 = l;
    if (l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(c, l);
  return (v3 >> 15) & 1;
}

int isxdigit_l(int c, locale_t l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (c <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[c];
    return HIWORD(v3) & 1;
  }
  if (c < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1)
      v5 = l;
    if (l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(c, l);
  return HIWORD(v3) & 1;
}

int tolower_l(int c, locale_t l)
{
  if (c > 0x7F)
    return ___tolower_l(c, l);
  else
    return _DefaultRuneLocale.__maplower[c];
}

int toupper_l(int c, locale_t l)
{
  if (c > 0x7F)
    return ___toupper_l(c, l);
  else
    return _DefaultRuneLocale.__mapupper[c];
}

void bcopy(const void *a1, void *a2, size_t a3)
{
  _platform_memmove();
}

int iswalnum(wint_t _wc)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_wc <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_wc];
    return (v2 & 0x500) != 0;
  }
  if (_wc < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  LOWORD(v2) = ___runetype(_wc);
  return (v2 & 0x500) != 0;
}

int iswalpha(wint_t _wc)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_wc <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_wc];
    return (v2 >> 8) & 1;
  }
  if (_wc < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_wc);
  return (v2 >> 8) & 1;
}

int iswcntrl(wint_t _wc)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_wc <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_wc];
    return (v2 >> 9) & 1;
  }
  if (_wc < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_wc);
  return (v2 >> 9) & 1;
}

int iswctype(wint_t _wc, wctype_t _charclass)
{
  _RuneLocale *v3;
  __uint32_t v4;
  uint64_t v5;
  _QWORD *v6;

  if (_wc <= 0x7F)
  {
    v3 = &_DefaultRuneLocale;
LABEL_8:
    v4 = v3->__runetype[_wc];
    return (v4 & _charclass) != 0;
  }
  if (_wc < 0x100)
  {
    v5 = __locale_key;
    v6 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
    if (!v6)
      v6 = &__global_locale;
    v3 = *(_RuneLocale **)(v6[166] + 120);
    goto LABEL_8;
  }
  v4 = ___runetype(_wc);
  return (v4 & _charclass) != 0;
}

int iswdigit(wint_t _wc)
{
  if (_wc <= 0xFF)
    return (_DefaultRuneLocale.__runetype[_wc] >> 10) & 1;
  else
    return 0;
}

int iswgraph(wint_t _wc)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_wc <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_wc];
    return (v2 >> 11) & 1;
  }
  if (_wc < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_wc);
  return (v2 >> 11) & 1;
}

int iswlower(wint_t _wc)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_wc <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_wc];
    return (v2 >> 12) & 1;
  }
  if (_wc < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_wc);
  return (v2 >> 12) & 1;
}

int iswprint(wint_t _wc)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_wc <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_wc];
    return (v2 >> 18) & 1;
  }
  if (_wc < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_wc);
  return (v2 >> 18) & 1;
}

int iswpunct(wint_t _wc)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_wc <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_wc];
    return (v2 >> 13) & 1;
  }
  if (_wc < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_wc);
  return (v2 >> 13) & 1;
}

int iswspace(wint_t _wc)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_wc <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_wc];
    return (v2 >> 14) & 1;
  }
  if (_wc < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_wc);
  return (v2 >> 14) & 1;
}

int iswupper(wint_t _wc)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_wc <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_wc];
    return (v2 >> 15) & 1;
  }
  if (_wc < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_wc);
  return (v2 >> 15) & 1;
}

int iswxdigit(wint_t _wc)
{
  if (_wc <= 0xFF)
    return HIWORD(_DefaultRuneLocale.__runetype[_wc]) & 1;
  else
    return 0;
}

wint_t towlower(wint_t _wc)
{
  uint64_t v2;
  _QWORD *v3;

  if (_wc >= 0x100)
    return ___tolower(_wc);
  v2 = __locale_key;
  v3 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (!v3)
    v3 = &__global_locale;
  return *(_DWORD *)(*(_QWORD *)(v3[166] + 120) + 4 * _wc + 1084);
}

wint_t towupper(wint_t _wc)
{
  uint64_t v2;
  _QWORD *v3;

  if (_wc >= 0x100)
    return ___toupper(_wc);
  v2 = __locale_key;
  v3 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (!v3)
    v3 = &__global_locale;
  return *(_DWORD *)(*(_QWORD *)(v3[166] + 120) + 4 * _wc + 2108);
}

int iswalnum_l(wint_t _wc, locale_t _l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (_wc <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[_wc];
    return (v3 & 0x500) != 0;
  }
  if (_wc < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1)
      v5 = _l;
    if (_l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  LOWORD(v3) = ___runetype_l(_wc, _l);
  return (v3 & 0x500) != 0;
}

int iswalpha_l(wint_t _wc, locale_t _l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (_wc <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[_wc];
    return (v3 >> 8) & 1;
  }
  if (_wc < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1)
      v5 = _l;
    if (_l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(_wc, _l);
  return (v3 >> 8) & 1;
}

int iswcntrl_l(wint_t _wc, locale_t _l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (_wc <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[_wc];
    return (v3 >> 9) & 1;
  }
  if (_wc < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1)
      v5 = _l;
    if (_l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(_wc, _l);
  return (v3 >> 9) & 1;
}

int iswctype_l(wint_t _wc, wctype_t _charclass, locale_t _l)
{
  uint64_t v4;
  int v5;
  locale_t v6;
  locale_t v7;

  if (_wc > 0x7F)
  {
    if (_wc < 0x100)
    {
      v6 = (locale_t)&__c_locale;
      v7 = (locale_t)&__global_locale;
      if (_l != (locale_t)-1)
        v7 = _l;
      if (_l)
        v6 = v7;
      v5 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 166) + 120) + 4 * _wc + 60);
    }
    else
    {
      v5 = ___runetype_l(_wc, _l);
    }
    v4 = (int)(v5 & _charclass);
  }
  else
  {
    v4 = _DefaultRuneLocale.__runetype[_wc] & _charclass;
  }
  return v4 != 0;
}

int iswdigit_l(wint_t _wc, locale_t _l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (_wc <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[_wc];
    return (v3 >> 10) & 1;
  }
  if (_wc < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1)
      v5 = _l;
    if (_l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(_wc, _l);
  return (v3 >> 10) & 1;
}

int iswgraph_l(wint_t _wc, locale_t _l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (_wc <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[_wc];
    return (v3 >> 11) & 1;
  }
  if (_wc < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1)
      v5 = _l;
    if (_l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(_wc, _l);
  return (v3 >> 11) & 1;
}

int iswlower_l(wint_t _wc, locale_t _l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (_wc <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[_wc];
    return (v3 >> 12) & 1;
  }
  if (_wc < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1)
      v5 = _l;
    if (_l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(_wc, _l);
  return (v3 >> 12) & 1;
}

int iswprint_l(wint_t _wc, locale_t _l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (_wc <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[_wc];
    return (v3 >> 18) & 1;
  }
  if (_wc < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1)
      v5 = _l;
    if (_l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(_wc, _l);
  return (v3 >> 18) & 1;
}

int iswpunct_l(wint_t _wc, locale_t _l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (_wc <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[_wc];
    return (v3 >> 13) & 1;
  }
  if (_wc < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1)
      v5 = _l;
    if (_l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(_wc, _l);
  return (v3 >> 13) & 1;
}

int iswspace_l(wint_t _wc, locale_t _l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (_wc <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[_wc];
    return (v3 >> 14) & 1;
  }
  if (_wc < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1)
      v5 = _l;
    if (_l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(_wc, _l);
  return (v3 >> 14) & 1;
}

int iswupper_l(wint_t _wc, locale_t _l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (_wc <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[_wc];
    return (v3 >> 15) & 1;
  }
  if (_wc < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1)
      v5 = _l;
    if (_l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(_wc, _l);
  return (v3 >> 15) & 1;
}

int iswxdigit_l(wint_t _wc, locale_t _l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (_wc <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[_wc];
    return HIWORD(v3) & 1;
  }
  if (_wc < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1)
      v5 = _l;
    if (_l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(_wc, _l);
  return HIWORD(v3) & 1;
}

wint_t towlower_l(wint_t _wc, locale_t _l)
{
  if (_wc > 0x7F)
    return ___tolower_l(_wc, _l);
  else
    return _DefaultRuneLocale.__maplower[_wc];
}

wint_t towupper_l(wint_t _wc, locale_t _l)
{
  if (_wc > 0x7F)
    return ___toupper_l(_wc, _l);
  else
    return _DefaultRuneLocale.__mapupper[_wc];
}

int iswblank(wint_t _wc)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_wc <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_wc];
    return (v2 >> 17) & 1;
  }
  if (_wc < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_wc);
  return (v2 >> 17) & 1;
}

int iswascii(wint_t _wc)
{
  return _wc < 0x80;
}

int iswhexnumber(wint_t _wc)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_wc <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_wc];
    return HIWORD(v2) & 1;
  }
  if (_wc < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_wc);
  return HIWORD(v2) & 1;
}

int iswideogram(wint_t _wc)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_wc <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_wc];
    return (v2 >> 19) & 1;
  }
  if (_wc < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_wc);
  return (v2 >> 19) & 1;
}

int iswnumber(wint_t _wc)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_wc <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_wc];
    return (v2 >> 10) & 1;
  }
  if (_wc < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_wc);
  return (v2 >> 10) & 1;
}

int iswphonogram(wint_t _wc)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_wc <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_wc];
    return (v2 >> 21) & 1;
  }
  if (_wc < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_wc);
  return (v2 >> 21) & 1;
}

int iswrune(wint_t _wc)
{
  _RuneLocale *v1;
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;

  if (_wc <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_wc];
    return v2 > 0xF;
  }
  if (_wc < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_wc);
  return v2 > 0xF;
}

int iswspecial(wint_t _wc)
{
  _RuneLocale *v1;
  __uint32_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (_wc <= 0x7F)
  {
    v1 = &_DefaultRuneLocale;
LABEL_8:
    v2 = v1->__runetype[_wc];
    return (v2 >> 20) & 1;
  }
  if (_wc < 0x100)
  {
    v3 = __locale_key;
    v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4)
      v4 = &__global_locale;
    v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  v2 = ___runetype(_wc);
  return (v2 >> 20) & 1;
}

int iswblank_l(wint_t _wc, locale_t _l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (_wc <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[_wc];
    return (v3 >> 17) & 1;
  }
  if (_wc < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1)
      v5 = _l;
    if (_l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(_wc, _l);
  return (v3 >> 17) & 1;
}

int iswhexnumber_l(wint_t _wc, locale_t _l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (_wc <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[_wc];
    return HIWORD(v3) & 1;
  }
  if (_wc < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1)
      v5 = _l;
    if (_l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(_wc, _l);
  return HIWORD(v3) & 1;
}

int iswideogram_l(wint_t _wc, locale_t _l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (_wc <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[_wc];
    return (v3 >> 19) & 1;
  }
  if (_wc < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1)
      v5 = _l;
    if (_l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(_wc, _l);
  return (v3 >> 19) & 1;
}

int iswnumber_l(wint_t _wc, locale_t _l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (_wc <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[_wc];
    return (v3 >> 10) & 1;
  }
  if (_wc < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1)
      v5 = _l;
    if (_l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(_wc, _l);
  return (v3 >> 10) & 1;
}

int iswphonogram_l(wint_t _wc, locale_t _l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (_wc <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[_wc];
    return (v3 >> 21) & 1;
  }
  if (_wc < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1)
      v5 = _l;
    if (_l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(_wc, _l);
  return (v3 >> 21) & 1;
}

int iswrune_l(wint_t _wc, locale_t _l)
{
  uint64_t v2;
  int v3;
  locale_t v4;
  locale_t v5;

  if (_wc > 0x7F)
  {
    if (_wc < 0x100)
    {
      v4 = (locale_t)&__c_locale;
      v5 = (locale_t)&__global_locale;
      if (_l != (locale_t)-1)
        v5 = _l;
      if (_l)
        v4 = v5;
      v3 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 166) + 120) + 4 * _wc + 60);
    }
    else
    {
      v3 = ___runetype_l(_wc, _l);
    }
    v2 = (int)(v3 & 0xFFFFFFF0);
  }
  else
  {
    v2 = _DefaultRuneLocale.__runetype[_wc] & 0xFFFFFFF0;
  }
  return v2 != 0;
}

int iswspecial_l(wint_t _wc, locale_t _l)
{
  _RuneLocale *v2;
  __uint32_t v3;
  locale_t v4;
  locale_t v5;

  if (_wc <= 0x7F)
  {
    v2 = &_DefaultRuneLocale;
LABEL_10:
    v3 = v2->__runetype[_wc];
    return (v3 >> 20) & 1;
  }
  if (_wc < 0x100)
  {
    v4 = (locale_t)&__c_locale;
    v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1)
      v5 = _l;
    if (_l)
      v4 = v5;
    v2 = *(_RuneLocale **)(*((_QWORD *)v4 + 166) + 120);
    goto LABEL_10;
  }
  v3 = ___runetype_l(_wc, _l);
  return (v3 >> 20) & 1;
}

locale_t duplocale(locale_t a1)
{
  if ((unint64_t)a1 + 1 < 2 || *((_QWORD *)a1 + 163) == 0x786C6F63616C6530)
    return (locale_t)_duplocale((char *)a1);
  *__error() = 22;
  return 0;
}

locale_t __numeric_ctype(uint64_t a1)
{
  uint64_t v1;
  const char *v2;
  locale_t v3;

  v1 = a1;
  if (*(_BYTE *)(a1 + 1318) == 2)
    return *(locale_t *)(a1 + 1368);
  if (!*(_BYTE *)(a1 + 1318))
  {
    if (*(_BYTE *)(a1 + 1314))
      v2 = *(const char **)(*(_QWORD *)(a1 + 1344) + 64);
    else
      v2 = (const char *)&C;
    if (_platform_strcmp()
      && (v3 = newlocale(2, v2, (locale_t)&__c_locale), (*(_QWORD *)(v1 + 1368) = v3) != 0))
    {
      *(_BYTE *)(v1 + 1318) = 2;
      return v3;
    }
    else
    {
      *(_BYTE *)(v1 + 1318) = 1;
    }
  }
  return (locale_t)v1;
}

const char *__cdecl querylocale(int a1, locale_t a2)
{
  _BOOL4 v2;
  locale_t v3;
  uint64_t v4;
  _xlocale *v5;
  unsigned int v6;
  const char *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;

  v2 = (unint64_t)a2 + 1 >= 2 && *((_QWORD *)a2 + 163) != 0x786C6F63616C6530;
  if ((a1 & 0x3F) != 0
    && !v2
    && (!a2
      ? ((v4 = __locale_key, (v5 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4)) != 0)
       ? (v3 = v5)
       : (v3 = (locale_t)&__global_locale))
      : a2 != (locale_t)-1
      ? (v3 = a2)
      : (v3 = (locale_t)&__global_locale),
        v6 = __clz(__rbit32(a1)),
        v6 < 6))
  {
    v8 = querylocale_mapping[v6];
    v9 = (os_unfair_lock_s *)((char *)v3 + 1296);
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 324);
    v10 = *((_QWORD *)v3 + v8 + 165);
    if (v10)
      v7 = (const char *)(v10 + 16);
    else
      v7 = (const char *)&C;
    os_unfair_lock_unlock(v9);
  }
  else
  {
    v7 = 0;
    *__error() = 22;
  }
  return v7;
}

int ___mb_cur_max(void)
{
  uint64_t v0;
  _QWORD *v1;

  v0 = __locale_key;
  v1 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v0);
  if (!v1)
    v1 = &__global_locale;
  return *(_DWORD *)(v1[166] + 64);
}

int ___mb_cur_max_l(locale_t a1)
{
  locale_t v1;

  v1 = (locale_t)&__global_locale;
  if (a1 != (locale_t)-1)
    v1 = a1;
  if (!a1)
    v1 = (locale_t)&__c_locale;
  return *(_DWORD *)(*((_QWORD *)v1 + 166) + 64);
}

uint64_t __xlocale_release(uint64_t result)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t (*v3)(void);

  if (result)
  {
    do
    {
      v1 = __ldaxr((unsigned int *)result);
      v2 = v1 - 1;
    }
    while (__stlxr(v2, (unsigned int *)result));
    if (!v2)
    {
      v3 = *(uint64_t (**)(void))(result + 8);
      if (v3)
        return v3();
    }
  }
  return result;
}

void destruct_locale(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  void (*v6)(void);
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  void (*v10)(void);

  for (i = 0; i != 6; ++i)
  {
    v3 = a1[i + 165];
    if (v3)
    {
      do
      {
        v4 = __ldaxr((unsigned int *)v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, (unsigned int *)v3));
      if (!v5)
      {
        v6 = *(void (**)(void))(v3 + 8);
        if (v6)
          v6();
      }
    }
  }
  v7 = a1[171];
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      v10 = *(void (**)(void))(v7 + 8);
      if (v10)
        v10();
    }
  }
  free(a1);
}

acl_t acl_dup(acl_t acl)
{
  _acl *v1;

  if (((uint64_t)acl > 16 || (uint64_t)acl <= -17) && *(_DWORD *)acl == -1407532798)
  {
    v1 = (_acl *)malloc_type_malloc(0x1010uLL, 0x1000040A06A8C30uLL);
    if (v1)
      _platform_memmove();
  }
  else
  {
    v1 = 0;
    *__error() = 22;
  }
  return v1;
}

int acl_valid(acl_t acl)
{
  if (((uint64_t)acl > 16 || (uint64_t)acl <= -17) && *(_DWORD *)acl == -1407532798)
    return 0;
  *__error() = 22;
  return -1;
}

int acl_valid_fd_np(int fd, acl_type_t type, acl_t acl)
{
  *__error() = 45;
  return -1;
}

int acl_valid_file_np(const char *path, acl_type_t type, acl_t acl)
{
  *__error() = 45;
  return -1;
}

uint64_t acl_valid_link()
{
  *__error() = 45;
  return 0xFFFFFFFFLL;
}

int acl_calc_mask(acl_t *acl_p)
{
  *__error() = 45;
  return -1;
}

int acl_copy_entry(acl_entry_t dest_d, acl_entry_t src_d)
{
  int v2;
  __int128 v3;

  if (((uint64_t)dest_d > 16 || (uint64_t)dest_d <= -17)
    && *(_DWORD *)dest_d == -1407532799
    && ((uint64_t)src_d > 16 || (uint64_t)src_d <= -17)
    && *(_DWORD *)src_d == -1407532799
    && dest_d != src_d)
  {
    v2 = 0;
    v3 = *((_OWORD *)src_d + 1);
    *(_OWORD *)dest_d = *(_OWORD *)src_d;
    *((_OWORD *)dest_d + 1) = v3;
  }
  else
  {
    *__error() = 22;
    return -1;
  }
  return v2;
}

int acl_create_entry_np(acl_t *acl_p, acl_entry_t *entry_p, int entry_index)
{
  acl_t v3;
  BOOL v4;
  uint64_t v5;
  int *v6;
  int v7;
  int result;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  char *v12;

  v3 = *acl_p;
  v4 = (uint64_t)*acl_p > 16 || (uint64_t)v3 <= -17;
  if (!v4 || *(_DWORD *)v3 != -1407532798)
  {
    v6 = __error();
    v7 = 22;
    goto LABEL_10;
  }
  v5 = *((unsigned int *)v3 + 1);
  if (v5 >= 0x80)
  {
    v6 = __error();
    v7 = 12;
LABEL_10:
    *v6 = v7;
    return -1;
  }
  if (entry_index == -2)
    LODWORD(v9) = *((_DWORD *)v3 + 1);
  else
    LODWORD(v9) = entry_index;
  if (v9 > v5)
  {
    v6 = __error();
    v7 = 34;
    goto LABEL_10;
  }
  if ((int)v5 <= (int)v9)
  {
    v9 = (int)v9;
  }
  else
  {
    v9 = (int)v9;
    v10 = (_OWORD *)((char *)v3 + 32 * v5 + 16);
    do
    {
      --v5;
      v11 = *(v10 - 1);
      *v10 = *(v10 - 2);
      v10[1] = v11;
      v10 -= 2;
    }
    while (v5 > (int)v9);
    LODWORD(v5) = *((_DWORD *)v3 + 1);
  }
  result = 0;
  *((_DWORD *)v3 + 1) = v5 + 1;
  v12 = (char *)v3 + 32 * v9;
  *(_QWORD *)(v12 + 20) = 0;
  *((_QWORD *)v12 + 2) = 2887434497;
  v12 += 16;
  *((_DWORD *)v12 + 7) = 0;
  *(_QWORD *)(v12 + 20) = 0;
  *(_QWORD *)(v12 + 12) = 0;
  *entry_p = (acl_entry_t)v12;
  return result;
}

int acl_create_entry(acl_t *acl_p, acl_entry_t *entry_p)
{
  return acl_create_entry_np(acl_p, entry_p, -2);
}

int acl_delete_entry(acl_t acl, acl_entry_t entry_d)
{
  _acl_entry *v2;
  int v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;

  if (((uint64_t)acl > 16 || (uint64_t)acl <= -17)
    && *(_DWORD *)acl == -1407532798
    && ((uint64_t)entry_d > 16 || (uint64_t)entry_d <= -17)
    && *(_DWORD *)entry_d == -1407532799
    && (v2 = (acl_t)((char *)acl + 16), (acl_t)((char *)acl + 16) <= entry_d))
  {
    v5 = *((_DWORD *)acl + 1) - 1;
    *((_DWORD *)acl + 1) = v5;
    v6 = entry_d - v2;
    v7 = (entry_d - v2) >> 5;
    if (v5 > v7)
    {
      v8 = (unint64_t)v6 >> 5;
      v9 = (_OWORD *)((char *)acl + 32 * (int)(v6 >> 5) + 48);
      do
      {
        v10 = v9[1];
        *(v9 - 2) = *v9;
        *(v9 - 1) = v10;
        v5 = *((_DWORD *)acl + 1);
        v9 += 2;
        LODWORD(v8) = v8 + 1;
      }
      while (v5 > v8);
    }
    v3 = 0;
    *((_DWORD *)acl + 8 * v5 + 4) = 0;
    v11 = *((int *)acl + 2);
    if (v7 <= v11)
    {
      v3 = 0;
      *((_DWORD *)acl + 2) = v11 - 1;
    }
  }
  else
  {
    *__error() = 22;
    return -1;
  }
  return v3;
}

int acl_get_entry(acl_t acl, int entry_id, acl_entry_t *entry_p)
{
  char *v3;
  int v4;
  int v5;

  if ((uint64_t)acl <= 16 && (uint64_t)acl > -17
    || *(_DWORD *)acl != -1407532798
    || (entry_id - 1) <= 0xFFFFFFFC && (entry_id < 0 || *((_DWORD *)acl + 1) <= entry_id))
  {
    goto LABEL_14;
  }
  if (entry_id == -2)
  {
    v3 = (char *)acl + 4;
    v4 = -1;
  }
  else
  {
    if (entry_id != -1)
      goto LABEL_12;
    v3 = (char *)acl + 8;
    v4 = 1;
  }
  entry_id = *(_DWORD *)v3 + v4;
LABEL_12:
  if (entry_id >= *((_DWORD *)acl + 1))
  {
LABEL_14:
    *__error() = 22;
    return -1;
  }
  v5 = 0;
  *entry_p = (acl_t)((char *)acl + 32 * entry_id + 16);
  *((_DWORD *)acl + 2) = entry_id;
  return v5;
}

void *__cdecl acl_get_qualifier(acl_entry_t entry_d)
{
  void *result;
  int *v3;

  if (((uint64_t)entry_d > 16 || (uint64_t)entry_d <= -17)
    && *(_DWORD *)entry_d == -1407532799
    && (*((_DWORD *)entry_d + 1) - 1) <= 1)
  {
    result = malloc_type_malloc(0x10uLL, 0x1000040451B5BE8uLL);
    if (result)
      *(_OWORD *)result = *(_OWORD *)((char *)entry_d + 8);
  }
  else
  {
    v3 = __error();
    result = 0;
    *v3 = 22;
  }
  return result;
}

int acl_get_tag_type(acl_entry_t entry_d, acl_tag_t *tag_type_p)
{
  int v2;

  if (((uint64_t)entry_d > 16 || (uint64_t)entry_d <= -17) && *(_DWORD *)entry_d == -1407532799)
  {
    v2 = 0;
    *tag_type_p = *((acl_tag_t *)entry_d + 1);
  }
  else
  {
    *__error() = 22;
    return -1;
  }
  return v2;
}

int acl_set_qualifier(acl_entry_t entry_d, const void *tag_qualifier_p)
{
  int v2;

  if (((uint64_t)entry_d > 16 || (uint64_t)entry_d <= -17)
    && *(_DWORD *)entry_d == -1407532799
    && (*((_DWORD *)entry_d + 1) - 1) <= 1)
  {
    v2 = 0;
    *(_OWORD *)((char *)entry_d + 8) = *(_OWORD *)tag_qualifier_p;
  }
  else
  {
    *__error() = 22;
    return -1;
  }
  return v2;
}

int acl_set_tag_type(acl_entry_t entry_d, acl_tag_t tag_type)
{
  int v2;

  if (((uint64_t)entry_d > 16 || (uint64_t)entry_d <= -17) && *(_DWORD *)entry_d == -1407532799 && tag_type - 1 <= 1)
  {
    v2 = 0;
    *((_DWORD *)entry_d + 1) = tag_type;
  }
  else
  {
    *__error() = 22;
    return -1;
  }
  return v2;
}

uint64_t acl_delete_fd_np()
{
  *__error() = 45;
  return 0xFFFFFFFFLL;
}

uint64_t acl_delete_file_np()
{
  *__error() = 45;
  return 0xFFFFFFFFLL;
}

uint64_t acl_delete_link_np()
{
  *__error() = 45;
  return 0xFFFFFFFFLL;
}

acl_t acl_get_fd(int fd)
{
  return acl_get_fd_np(fd, ACL_TYPE_EXTENDED);
}

acl_t acl_get_fd_np(int fd, acl_type_t type)
{
  acl_t result;
  _filesec *v4;
  int *v5;
  stat v6;
  _acl *v7;

  memset(&v6, 0, sizeof(v6));
  if (type == ACL_TYPE_EXTENDED)
  {
    result = filesec_init();
    if (result)
    {
      v4 = result;
      v7 = 0;
      if (!fstatx_np(fd, &v6, result))
        filesec_get_property(v4, FILESEC_ACL, &v7);
      filesec_free(v4);
      return v7;
    }
  }
  else
  {
    v5 = __error();
    result = 0;
    *v5 = 22;
  }
  return result;
}

acl_t acl_get_file(const char *path_p, acl_type_t type)
{
  return acl_get_file1(path_p, type, 1);
}

_filesec *acl_get_file1(const char *a1, int a2, int a3)
{
  _filesec *result;
  _filesec *v6;
  int *v7;
  stat v8;
  uint64_t v9;

  memset(&v8, 0, sizeof(v8));
  if (a2 == 256)
  {
    result = filesec_init();
    if (result)
    {
      v6 = result;
      v9 = 0;
      if (a3)
      {
        if (statx_np(a1, &v8, result))
        {
LABEL_6:
          filesec_free(v6);
          return (_filesec *)v9;
        }
      }
      else if (lstatx_np(a1, &v8, result))
      {
        goto LABEL_6;
      }
      filesec_get_property(v6, FILESEC_ACL, &v9);
      goto LABEL_6;
    }
  }
  else
  {
    v7 = __error();
    result = 0;
    *v7 = 22;
  }
  return result;
}

acl_t acl_get_link_np(const char *path_p, acl_type_t type)
{
  return acl_get_file1(path_p, type, 0);
}

int acl_set_fd_np(int fd, acl_t acl, acl_type_t acl_type)
{
  _filesec *v4;
  _filesec *v5;
  int v7;
  acl_t v8;

  v8 = acl;
  v4 = filesec_init();
  if (!v4)
    return -1;
  v5 = v4;
  if (filesec_set_property(v4, FILESEC_ACL, &v8))
  {
    filesec_free(v5);
    return -1;
  }
  v7 = fchmodx_np(fd, v5);
  filesec_free(v5);
  if (v7)
    return -1;
  else
    return 0;
}

int acl_set_file(const char *path_p, acl_type_t type, acl_t acl)
{
  _filesec *v4;
  _filesec *v5;
  int v7;
  acl_t v8;

  v8 = acl;
  v4 = filesec_init();
  if (!v4)
    return -1;
  v5 = v4;
  if (filesec_set_property(v4, FILESEC_ACL, &v8))
  {
    filesec_free(v5);
    return -1;
  }
  v7 = chmodx_np(path_p, v5);
  filesec_free(v5);
  if (v7)
    return -1;
  else
    return 0;
}

int acl_set_link_np(const char *path_p, acl_type_t type, acl_t acl)
{
  acl_type_t v5;
  stat v7;

  memset(&v7, 0, sizeof(v7));
  if (lstat(path_p, &v7) < 0)
    return -1;
  if ((v7.st_mode & 0xF000) == 0xA000)
  {
    *__error() = 45;
    return -1;
  }
  return acl_set_file(path_p, v5, acl);
}

int acl_delete_def_file(const char *path_p)
{
  *__error() = 45;
  return -1;
}

int acl_add_flag_np(acl_flagset_t flagset_d, acl_flag_t flag)
{
  *(_DWORD *)flagset_d |= flag;
  return 0;
}

int acl_clear_flags_np(acl_flagset_t flagset_d)
{
  *(_DWORD *)flagset_d = 0;
  return 0;
}

int acl_delete_flag_np(acl_flagset_t flagset_d, acl_flag_t flag)
{
  *(_DWORD *)flagset_d &= ~flag;
  return 0;
}

int acl_get_flag_np(acl_flagset_t flagset_d, acl_flag_t flag)
{
  return (*(_DWORD *)flagset_d & flag) != 0;
}

int acl_get_flagset_np(void *obj_p, acl_flagset_t *flagset_p)
{
  _acl_flagset *v2;
  int result;

  if ((uint64_t)obj_p <= 16 && (uint64_t)obj_p > -17)
    goto LABEL_6;
  if (*(_DWORD *)obj_p == -1407532799)
  {
    v2 = (_acl_flagset *)((char *)obj_p + 24);
    goto LABEL_8;
  }
  if (*(_DWORD *)obj_p != -1407532798)
  {
LABEL_6:
    *__error() = 22;
    return -1;
  }
  v2 = (_acl_flagset *)((char *)obj_p + 12);
LABEL_8:
  result = 0;
  *flagset_p = v2;
  return result;
}

int acl_set_flagset_np(void *obj_p, acl_flagset_t flagset_d)
{
  int v2;

  if ((uint64_t)obj_p <= 16 && (uint64_t)obj_p > -17)
    goto LABEL_6;
  if (*(_DWORD *)obj_p == -1407532799)
  {
    v2 = 0;
    *((_DWORD *)obj_p + 6) = *(_DWORD *)flagset_d;
    return v2;
  }
  if (*(_DWORD *)obj_p == -1407532798)
  {
    v2 = 0;
    *((_DWORD *)obj_p + 3) = *(_DWORD *)flagset_d;
  }
  else
  {
LABEL_6:
    *__error() = 22;
    return -1;
  }
  return v2;
}

int acl_add_perm(acl_permset_t permset_d, acl_perm_t perm)
{
  int result;

  if ((perm & 0xFFEFC001) != 0)
  {
    *__error() = 22;
    return -1;
  }
  else
  {
    result = 0;
    *(_DWORD *)permset_d |= perm;
  }
  return result;
}

int acl_clear_perms(acl_permset_t permset_d)
{
  *(_DWORD *)permset_d = 0;
  return 0;
}

int acl_delete_perm(acl_permset_t permset_d, acl_perm_t perm)
{
  int result;

  if ((perm & 0xFFEFC001) != 0)
  {
    *__error() = 22;
    return -1;
  }
  else
  {
    result = 0;
    *(_DWORD *)permset_d &= ~perm;
  }
  return result;
}

int acl_get_perm_np(acl_permset_t permset_d, acl_perm_t perm)
{
  if ((perm & 0xFFEFC001) == 0)
    return (*(_DWORD *)permset_d & perm) != 0;
  *__error() = 22;
  return -1;
}

int acl_get_permset(acl_entry_t entry_d, acl_permset_t *permset_p)
{
  int v2;

  if (((uint64_t)entry_d > 16 || (uint64_t)entry_d <= -17) && *(_DWORD *)entry_d == -1407532799)
  {
    v2 = 0;
    *permset_p = (acl_entry_t)((char *)entry_d + 28);
  }
  else
  {
    *__error() = 22;
    return -1;
  }
  return v2;
}

int acl_set_permset(acl_entry_t entry_d, acl_permset_t permset_d)
{
  int v2;

  if (((uint64_t)entry_d > 16 || (uint64_t)entry_d <= -17) && *(_DWORD *)entry_d == -1407532799)
  {
    v2 = 0;
    *((_DWORD *)entry_d + 7) = *(_DWORD *)permset_d;
  }
  else
  {
    *__error() = 22;
    return -1;
  }
  return v2;
}

int acl_maximal_permset_mask_np(acl_permset_mask_t *mask_p)
{
  *mask_p = 1064958;
  return 0;
}

int acl_get_permset_mask_np(acl_entry_t entry_d, acl_permset_mask_t *mask_p)
{
  int v2;

  if (((uint64_t)entry_d > 16 || (uint64_t)entry_d <= -17) && *(_DWORD *)entry_d == -1407532799)
  {
    v2 = 0;
    *mask_p = *((unsigned int *)entry_d + 7);
  }
  else
  {
    *__error() = 22;
    return -1;
  }
  return v2;
}

int acl_set_permset_mask_np(acl_entry_t entry_d, acl_permset_mask_t mask)
{
  int v2;

  if (((uint64_t)entry_d > 16 || (uint64_t)entry_d <= -17)
    && *(_DWORD *)entry_d == -1407532799
    && (mask & 0xFFFFFFFFFFEFC001) == 0)
  {
    v2 = 0;
    *((_DWORD *)entry_d + 7) = mask;
  }
  else
  {
    *__error() = 22;
    return -1;
  }
  return v2;
}

ssize_t acl_copy_ext(void *buf_p, acl_t acl, ssize_t size)
{
  ssize_t v6;
  ssize_t v7;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  _DWORD *v12;
  char *v13;
  unsigned int v14;

  v6 = acl_size(acl);
  if (v6 < 0)
    return -1;
  v7 = v6;
  if (v6 > size)
  {
    *__error() = 34;
    return -1;
  }
  _platform_bzero();
  *(_DWORD *)buf_p = 1841376257;
  if (acl == (acl_t)1)
  {
    *((_DWORD *)buf_p + 9) = -1;
  }
  else
  {
    v9 = *((_DWORD *)acl + 1);
    v10 = bswap32(*((_DWORD *)acl + 3));
    *((_DWORD *)buf_p + 9) = bswap32(v9);
    *((_DWORD *)buf_p + 10) = v10;
    if (v9)
    {
      v11 = 0;
      v12 = (char *)buf_p + 64;
      v13 = (char *)acl + 24;
      do
      {
        *(_OWORD *)(v12 - 5) = *(_OWORD *)v13;
        v14 = *((_DWORD *)v13 + 5);
        *(v12 - 1) = bswap32(*((_DWORD *)v13 + 4) & 0xFFFFFFF0 | *((_DWORD *)v13 - 1) & 0xF);
        *v12 = bswap32(v14);
        v12 += 6;
        ++v11;
        v13 += 32;
      }
      while (v11 < *((unsigned int *)acl + 1));
    }
  }
  return v7;
}

acl_t acl_copy_int(const void *buf_p)
{
  acl_t result;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  int *v10;

  if (*(_DWORD *)buf_p == 1841376257)
  {
    result = acl_init(bswap32(*((_DWORD *)buf_p + 9)));
    if (result)
    {
      v3 = *((_DWORD *)buf_p + 9);
      *((_DWORD *)result + 3) = bswap32(*((_DWORD *)buf_p + 10));
      v4 = bswap32(v3);
      *((_DWORD *)result + 1) = v4;
      if (v3)
      {
        v5 = 0;
        v6 = (char *)result + 24;
        v7 = (unsigned int *)((char *)buf_p + 64);
        do
        {
          *((_DWORD *)v6 - 2) = -1407532799;
          *(_OWORD *)v6 = *(_OWORD *)(v7 - 5);
          v8 = *(v7 - 1);
          *((_DWORD *)v6 - 1) = HIBYTE(v8) & 0xF;
          v9 = *v7;
          v7 += 6;
          *((_DWORD *)v6 + 4) = bswap32(v8 & 0xF0FFFFFF);
          *((_DWORD *)v6 + 5) = bswap32(v9);
          ++v5;
          v6 += 32;
        }
        while (v5 < v4);
      }
    }
  }
  else
  {
    v10 = __error();
    result = 0;
    *v10 = 22;
  }
  return result;
}

acl_t acl_from_text(const char *buf_p)
{
  acl_t result;
  acl_t v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  int v7;
  char **v8;
  char *v9;
  unsigned __int8 *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  int v14;
  int v15;
  char *v16;
  int v17;
  char *v18;
  char v19;
  passwd *v20;
  group *v21;
  char *v22;
  gid_t v23;
  passwd *v24;
  char *v25;
  char *v26;
  char *v27;
  acl_tag_t v28;
  char *v29;
  const char *v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  char **v34;
  char *v35;
  char *v36;
  char *v37;
  const char *v38;
  uint64_t v39;
  group *v40;
  int v41;
  int *v42;
  acl_tag_t v43;
  acl_tag_t v44;
  void *obj_p;
  acl_permset_t permset_p;
  acl_flagset_t flagset_p;
  acl_entry_t entry_p;
  char *__str;
  char *v50;
  char *__stringp;

  entry_p = 0;
  __str = 0;
  permset_p = 0;
  flagset_p = 0;
  if (!buf_p)
  {
    v42 = __error();
    result = 0;
    *v42 = 22;
    return result;
  }
  result = (acl_t)strdup(buf_p);
  __stringp = (char *)result;
  if (result)
  {
    v2 = result;
    result = acl_init(1);
    obj_p = result;
    if (result)
    {
      v3 = strsep(&__stringp, "\n");
      v50 = v3;
      if (v3
        && *v3
        && ((__str = strsep(&v50, " "), !*__str) || !_platform_strncmp())
        && (__str = strsep(&v50, " "), *__error() = 0, __str)
        && *__str
        && strtol(__str, 0, 0) == 1)
      {
        v4 = strsep(&v50, " ");
        __str = v4;
        if (v4)
        {
          if (*v4)
          {
            acl_get_flagset_np(obj_p, &flagset_p);
            v5 = strsep(&__str, ",");
            if (v5)
            {
              v6 = v5;
              do
              {
                if (!*v6)
                  break;
                v7 = 0;
                v8 = &off_1E1E9CA50;
                while (v7 != 1 && v7 != 6)
                {
                  if (v7 == 7)
                    goto LABEL_103;
LABEL_22:
                  v8 += 3;
                  ++v7;
                }
                if (_platform_strcmp())
                  goto LABEL_22;
                acl_add_flag_np(flagset_p, *((acl_flag_t *)v8 - 2));
                v6 = strsep(&__str, ",");
              }
              while (v6);
            }
          }
        }
        v9 = strsep(&__stringp, "\n");
        v50 = v9;
        if (!v9)
        {
          free(v2);
          return (acl_t)obj_p;
        }
        v10 = 0;
        v11 = ":";
        v12 = "group";
        v13 = ",";
        while (*v9)
        {
          __str = strsep(&v50, v11);
          if (v10)
          {
            *(_QWORD *)v10 = 0;
            *((_QWORD *)v10 + 1) = 0;
          }
          else
          {
            v10 = (unsigned __int8 *)malloc_type_calloc(1uLL, 0x10uLL, 0x1000040451B5BE8uLL);
            if (!v10)
            {
              v41 = *__error();
              goto LABEL_110;
            }
          }
          if (acl_create_entry((acl_t *)&obj_p, &entry_p)
            || acl_get_flagset_np(entry_p, &flagset_p) == -1
            || acl_get_permset(entry_p, &permset_p) == -1)
          {
            v41 = *__error();
            goto LABEL_109;
          }
          v14 = *__str;
          if (v14 == 103)
          {
            if (_platform_strcmp())
              v15 = -1;
            else
              v15 = 1;
          }
          else
          {
            if (v14 != 117)
              goto LABEL_101;
            if (_platform_strcmp())
              v15 = -1;
            else
              v15 = 0;
          }
          v16 = strsep(&v50, v11);
          __str = v16;
          if (v16 && *v16)
          {
            uuid_parse(v16, v10);
            v17 = 0;
          }
          else
          {
            v17 = 1;
          }
          v18 = strsep(&v50, v11);
          __str = v18;
          if (v18)
          {
            v19 = v17 ^ 1;
            if (!*v18)
              v19 = 1;
            if ((v19 & 1) == 0)
            {
              if (v15 == 1)
              {
                v21 = getgrnam(v18);
                if (v21 && mbr_gid_to_uuid(v21->gr_gid, v10))
                {
LABEL_101:
                  v41 = 22;
LABEL_109:
                  free(v10);
                  goto LABEL_110;
                }
              }
              else
              {
                if (v15)
                  goto LABEL_101;
                v20 = getpwnam(v18);
                if (v20)
                {
                  if (mbr_uid_to_uuid(v20->pw_uid, v10))
                    goto LABEL_101;
                }
              }
              v17 = 0;
            }
          }
          v22 = strsep(&v50, v11);
          __str = v22;
          if (v22 && v17 && *v22)
          {
            v23 = strtol(v22, 0, 10);
            if (v15 == 1)
            {
              v40 = getgrgid(v23);
              if (v40 && mbr_gid_to_uuid(v40->gr_gid, v10))
                goto LABEL_101;
            }
            else if (!v15)
            {
              v24 = getpwuid(v23);
              if (v24)
              {
                if (mbr_uid_to_uuid(v24->pw_uid, v10))
                  goto LABEL_101;
              }
            }
          }
          else if (v17)
          {
            goto LABEL_101;
          }
          v25 = strsep(&v50, v11);
          __str = v25;
          if (!v25 || !*v25)
            goto LABEL_101;
          v26 = strsep(&__str, v13);
          if (v26)
          {
            v27 = v26;
            v28 = ACL_UNDEFINED_TAG;
LABEL_70:
            v29 = v27;
            v43 = v28;
            while (*v29)
            {
              if (v28 == ACL_UNDEFINED_TAG)
              {
                if (_platform_strcmp())
                {
                  if (_platform_strcmp())
                  {
LABEL_107:
                    v41 = 22;
                    goto LABEL_108;
                  }
                  v28 = ACL_EXTENDED_DENY;
                }
                else
                {
                  v28 = ACL_EXTENDED_ALLOW;
                }
                v27 = strsep(&__str, v13);
                if (v27)
                  goto LABEL_70;
                break;
              }
              v30 = v11;
              v31 = v13;
              v32 = v12;
              v33 = 0;
              v34 = &off_1E1E9CA68;
              while (((0xC2uLL >> v33) & 1) != 0 || _platform_strcmp())
              {
                ++v33;
                v34 += 3;
                if (v33 == 7)
                  goto LABEL_107;
              }
              acl_add_flag_np(flagset_p, *((acl_flag_t *)v34 - 8));
              v13 = v31;
              v29 = strsep(&__str, v31);
              v12 = v32;
              v11 = v30;
              v28 = v43;
              if (!v29)
                break;
            }
          }
          else
          {
            v28 = ACL_UNDEFINED_TAG;
          }
          v35 = strsep(&v50, v11);
          __str = v35;
          if (v35)
          {
            if (*v35)
            {
              v36 = strsep(&__str, v13);
              if (v36)
              {
                v37 = v36;
                v44 = v28;
                do
                {
                  if (!*v37)
                    break;
                  v38 = v13;
                  v39 = 0;
                  while (_platform_strcmp())
                  {
                    v39 += 6;
                    if (v39 == 84)
                      goto LABEL_107;
                  }
                  acl_add_perm(permset_p, (acl_perm_t)acl_perms[v39]);
                  v13 = v38;
                  v37 = strsep(&__str, v38);
                  v28 = v44;
                }
                while (v37);
              }
            }
          }
          acl_set_tag_type(entry_p, v28);
          acl_set_qualifier(entry_p, v10);
          v9 = strsep(&__stringp, "\n");
          v50 = v9;
          if (!v9)
            break;
        }
        v41 = 0;
LABEL_108:
        if (v10)
          goto LABEL_109;
LABEL_110:
        free(v2);
        if (!v41)
          return (acl_t)obj_p;
      }
      else
      {
LABEL_103:
        free(v2);
        v41 = 22;
      }
      acl_free(obj_p);
      obj_p = 0;
      *__error() = v41;
      return (acl_t)obj_p;
    }
  }
  return result;
}

char *__cdecl acl_to_text(acl_t acl, ssize_t *len_p)
{
  ssize_t *v2;
  int v4;
  char *result;
  int *v6;
  int v7;
  int v8;
  int v9;
  const char **i;
  const char *v11;
  void *qualifier;
  void *v13;
  int v14;
  const char *v15;
  int v16;
  char *v17;
  uint64_t v18;
  const char **v19;
  uint64_t v20;
  int v21;
  const char *v22;
  const char **v23;
  char *v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int id_type[2];
  acl_permset_t permset_p;
  acl_flagset_t flagset_p;
  acl_entry_t entry_p;
  acl_tag_t tag_type_p;
  uuid_string_t out;

  v2 = len_p;
  tag_type_p = ACL_UNDEFINED_TAG;
  flagset_p = 0;
  entry_p = 0;
  *(_QWORD *)id_type = 0;
  permset_p = 0;
  v29 = 1024;
  if ((uint64_t)acl <= 16 && (uint64_t)acl > -17 || *(_DWORD *)acl != -1407532798)
  {
    v6 = __error();
    result = 0;
    v7 = 22;
    goto LABEL_72;
  }
  if (!len_p)
  {
    MEMORY[0x1E0C86820](acl, 0);
    v2 = &v27;
    v27 = 0;
  }
  *v2 = 0;
  v28 = (char *)malloc_type_malloc(0x400uLL, 0x5365B37uLL);
  if (!v28)
    goto LABEL_71;
  if (!raosnprintf((void **)&v28, &v29, v2, "!#acl %d", 1))
    goto LABEL_69;
  if (!acl_get_flagset_np(acl, &flagset_p))
  {
    v8 = 0;
    v9 = 0;
    for (i = (const char **)&off_1E1E9CA50; ; i += 3)
    {
      if (v8 == 1 || v8 == 6)
      {
        if (acl_get_flag_np(flagset_p, *((acl_flag_t *)i - 2)))
        {
          if (v9)
            v11 = ",";
          else
            v11 = " ";
          if (!raosnprintf((void **)&v28, &v29, v2, "%s%s", v11, *i))
            goto LABEL_69;
          ++v9;
        }
      }
      else if (v8 == 7)
      {
        break;
      }
      ++v8;
    }
  }
  if (entry_p)
    v4 = -1;
  else
    v4 = 0;
  if (acl_get_entry(acl, v4, &entry_p))
  {
LABEL_13:
    if (!raosnprintf((void **)&v28, &v29, v2, "\n", v27))
      goto LABEL_69;
    return v28;
  }
  while (1)
  {
    qualifier = acl_get_qualifier(entry_p);
    if (qualifier)
      break;
LABEL_33:
    if (entry_p)
      v14 = -1;
    else
      v14 = 0;
    if (acl_get_entry(acl, v14, &entry_p))
      goto LABEL_13;
  }
  v13 = qualifier;
  if (acl_get_tag_type(entry_p, &tag_type_p)
    || acl_get_flagset_np(entry_p, &flagset_p)
    || acl_get_permset(entry_p, &permset_p))
  {
    acl_free(v13);
    goto LABEL_33;
  }
  uuid_unparse_upper((const unsigned __int8 *)v13, out);
  if (mbr_uuid_to_id((const unsigned __int8 *)v13, (id_t *)&id_type[1], id_type))
    goto LABEL_39;
  if (id_type[0] == 1)
  {
    v23 = (const char **)getgrgid(id_type[1]);
    if (v23)
      goto LABEL_63;
  }
  else
  {
    if (id_type[0])
      goto LABEL_39;
    v23 = (const char **)getpwuid(id_type[1]);
    if (!v23)
      goto LABEL_39;
LABEL_63:
    v24 = strdup(*v23);
    if (v24)
    {
      v17 = v24;
      v25 = "group";
      if (!id_type[0])
        v25 = "user";
      v26 = "deny";
      if (tag_type_p == ACL_EXTENDED_ALLOW)
        v26 = "allow";
      v16 = raosnprintf((void **)&v28, &v29, v2, "\n%s:%s:%s:%d:%s", v25, out, v24, id_type[1], v26);
      goto LABEL_43;
    }
  }
LABEL_39:
  if (tag_type_p == ACL_EXTENDED_ALLOW)
    v15 = "allow";
  else
    v15 = "deny";
  v16 = raosnprintf((void **)&v28, &v29, v2, "\nuser:%s:::%s", out, v15);
  v17 = 0;
LABEL_43:
  free(v17);
  acl_free(v13);
  if (v16)
  {
    v18 = 0;
    v19 = (const char **)&off_1E1E9CA50;
    while (((0xC2uLL >> v18) & 1) != 0
         || !acl_get_flag_np(flagset_p, *((acl_flag_t *)v19 - 2))
         || raosnprintf((void **)&v28, &v29, v2, ",%s", *v19))
    {
      ++v18;
      v19 += 3;
      if (v18 == 7)
      {
        v20 = 0;
        v21 = 0;
        while (1)
        {
          if (acl_get_perm_np(permset_p, (acl_perm_t)acl_perms[v20]))
          {
            if (v21)
              v22 = ",";
            else
              v22 = ":";
            if (!raosnprintf((void **)&v28, &v29, v2, "%s%s", v22, *(const char **)&acl_perms[v20 + 2]))
              goto LABEL_69;
            ++v21;
          }
          v20 += 6;
          if (v20 == 84)
            goto LABEL_33;
        }
      }
    }
  }
LABEL_69:
  if (v28)
    free(v28);
LABEL_71:
  v6 = __error();
  result = 0;
  v7 = 12;
LABEL_72:
  *v6 = v7;
  return result;
}

uint64_t raosnprintf(void **a1, uint64_t *a2, _QWORD *a3, char *__format, ...)
{
  uint64_t v8;
  uint64_t result;
  void *v10;
  va_list va;

  va_start(va, __format);
  while (1)
  {
    v8 = *a2;
    if (*a3 < (unint64_t)*a2)
    {
      result = vsnprintf((char *)*a1 + *a3, *a2 - *a3, __format, va);
      v8 = *a2;
      if (*a2 - *a3 > (unint64_t)(int)result)
        break;
    }
    v10 = *a1;
    *a2 = 2 * v8;
    result = (uint64_t)reallocf(v10, 2 * v8);
    *a1 = (void *)result;
    if (!result)
      return result;
  }
  *a3 += (int)result;
  return result;
}

uint64_t open_with_subsystem(uint64_t a1, __int16 a2)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t next_subsystem_root_path;
  _BYTE v8[1024];

  if ((a2 & 0x200) != 0)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  else
  {
    v2 = open_NOCANCEL();
    if ((v2 & 0x80000000) != 0)
    {
      v3 = __error();
      v4 = subsystem_root_path;
      if (*v3 == 2 && subsystem_root_path != 0)
      {
        while (1)
        {
          next_subsystem_root_path = extract_next_subsystem_root_path((uint64_t)v8, v4);
          if ((unint64_t)_platform_strlcat() > 0x3FF)
            break;
          v2 = open_NOCANCEL();
          if ((v2 & 0x80000000) == 0)
            return v2;
          __error();
          if (!next_subsystem_root_path)
            return v2;
          v4 = next_subsystem_root_path;
        }
        *__error() = 63;
      }
    }
  }
  return v2;
}

uint64_t extract_next_subsystem_root_path(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = _platform_strlen();
  v5 = _platform_memchr();
  if (v5)
    v4 = v5 - a2;
  if (v4 > 0x3FF)
    return 0;
  v7 = v5;
  _platform_memmove();
  *(_BYTE *)(a1 + v4) = 0;
  if (v7)
    return v7 + 1;
  else
    return 0;
}

uint64_t stat_with_subsystem(const char *a1, stat *a2)
{
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t next_subsystem_root_path;
  char v9[1024];

  v3 = stat(a1, a2);
  if ((v3 & 0x80000000) != 0)
  {
    v4 = __error();
    v5 = subsystem_root_path;
    if (*v4 == 2 && subsystem_root_path != 0)
    {
      while (1)
      {
        next_subsystem_root_path = extract_next_subsystem_root_path((uint64_t)v9, v5);
        if ((unint64_t)_platform_strlcat() > 0x3FF)
          break;
        v3 = stat(v9, a2);
        if ((v3 & 0x80000000) == 0)
          return v3;
        __error();
        if (!next_subsystem_root_path)
          return v3;
        v5 = next_subsystem_root_path;
      }
      *__error() = 63;
    }
  }
  return v3;
}

tm *__cdecl getdate(const char *a1)
{
  char *v2;
  const char *v3;
  int v4;
  FILE *v5;
  FILE *v6;
  int v7;
  void *v8;
  int v9;
  size_t v10;
  void *v11;
  int v12;
  int v13;
  tm *v14;
  int *v15;
  __darwin_rune_t *v16;
  int v17;
  tm *v19;
  int v20;
  int tm_hour;
  int v22;
  int tm_mon;
  int v24;
  int v25;
  int tm_min;
  int tm_year;
  int tm_mday;
  int v29;
  int v30;
  stat v31;
  time_t v32;

  v2 = getenv("DATEMSK");
  if (!v2 || (v3 = v2, v32 = 0, memset(&v31, 0, sizeof(v31)), !*v2))
  {
    v14 = 0;
    getdate_err = 1;
    return v14;
  }
  v4 = *__error();
  v5 = fopen(v3, "r");
  if (!v5)
  {
    getdate_err = 2;
    v15 = __error();
    v14 = 0;
    goto LABEL_29;
  }
  v6 = v5;
  v7 = fileno(v5);
  if (fstat(v7, &v31) < 0)
  {
    v14 = 0;
    v16 = (_DWORD *)(&_DefaultRuneLocale + 3080);
    v17 = 3;
LABEL_27:
    v16[894] = v17;
    goto LABEL_28;
  }
  if ((v31.st_mode & 0xF000) != 0x8000)
  {
    v14 = 0;
    v16 = (_DWORD *)(&_DefaultRuneLocale + 3080);
    v17 = 4;
    goto LABEL_27;
  }
  v8 = malloc_type_malloc(0x400uLL, 0xCC1E5ACFuLL);
  if (!v8)
  {
    v14 = 0;
    v16 = &_DefaultRuneLocale.__mapupper[243];
    v17 = 6;
    goto LABEL_27;
  }
  v9 = 0;
  v10 = 1024;
LABEL_8:
  v11 = v8;
  do
  {
    if (fgets((char *)v11 + v9, (int)v10 - v9, v6))
    {
      v12 = _platform_strlen();
      v9 = v12;
      if (v10 - 1 == v12 && *((_BYTE *)v11 + v12 - 1) != 10)
      {
        v10 += 1024;
        v8 = malloc_type_realloc(v11, v10, 0xCF7D8D3BuLL);
        if (!v8)
        {
          v13 = 6;
LABEL_73:
          v14 = 0;
          getdate_err = v13;
          goto LABEL_74;
        }
        goto LABEL_8;
      }
    }
    else
    {
      if (ferror(v6))
      {
        v13 = 5;
        goto LABEL_73;
      }
      if (!v9)
      {
        v13 = 7;
        goto LABEL_73;
      }
      v9 = _platform_strlen();
    }
    if (*((_BYTE *)v11 + v9 - 1) == 10)
      *((_BYTE *)v11 + v9 - 1) = 0;
    getdate_tm = tmundef;
    *(_OWORD *)&qword_1EDF54B50 = unk_18A0E5750;
    xmmword_1EDF54B60 = xmmword_18A0E5760;
    qword_1EDF54B70 = 0;
    v9 = 0;
  }
  while (!strptime(a1, (const char *)v11, (tm *)&getdate_tm));
  time(&v32);
  v19 = localtime(&v32);
  if (DWORD1(getdate_tm) == -1)
    v20 = getdate_tm != -1;
  else
    v20 = ((_DWORD)getdate_tm != -1) | 2;
  tm_hour = DWORD2(getdate_tm);
  if (DWORD2(getdate_tm) != -1)
    v20 |= 4u;
  v22 = HIDWORD(getdate_tm) != -1;
  tm_mon = qword_1EDF54B50;
  if ((_DWORD)qword_1EDF54B50 != -1)
    v22 |= 2u;
  if (HIDWORD(qword_1EDF54B50) == -1)
    v24 = v22;
  else
    v24 = v22 | 4;
  v25 = dword_1EDF54B58;
  switch(v20)
  {
    case 0:
      *(_QWORD *)&getdate_tm = *(_QWORD *)&v19->tm_sec;
      tm_hour = v19->tm_hour;
      DWORD2(getdate_tm) = tm_hour;
      break;
    case 1:
      tm_hour = v19->tm_hour;
      DWORD2(getdate_tm) = tm_hour;
      tm_min = v19->tm_min;
      DWORD1(getdate_tm) = tm_min;
      if ((int)getdate_tm < v19->tm_sec)
        DWORD1(getdate_tm) = tm_min + 1;
      break;
    case 2:
      tm_hour = v19->tm_hour;
      DWORD2(getdate_tm) = tm_hour;
      if (SDWORD1(getdate_tm) < v19->tm_min)
        DWORD2(getdate_tm) = ++tm_hour;
      goto LABEL_49;
    case 3:
      tm_hour = v19->tm_hour;
      DWORD2(getdate_tm) = tm_hour;
      if ((int)getdate_tm + 60 * DWORD1(getdate_tm) < v19->tm_sec + 60 * v19->tm_min)
        DWORD2(getdate_tm) = ++tm_hour;
      break;
    case 4:
      *(_QWORD *)&getdate_tm = 0;
      break;
    case 5:
      DWORD1(getdate_tm) = 0;
      break;
    case 6:
LABEL_49:
      LODWORD(getdate_tm) = 0;
      break;
    default:
      break;
  }
  switch(v24)
  {
    case 0:
      tm_mday = v19->tm_mday;
      HIDWORD(getdate_tm) = tm_mday;
      if (tm_hour < v19->tm_hour)
        HIDWORD(getdate_tm) = tm_mday + 1;
      qword_1EDF54B50 = *(_QWORD *)&v19->tm_mon;
      tm_mon = qword_1EDF54B50;
      break;
    case 1:
      qword_1EDF54B50 = *(_QWORD *)&v19->tm_mon;
      v29 = v19->tm_mday;
      tm_mon = qword_1EDF54B50;
      goto LABEL_67;
    case 2:
    case 3:
      tm_year = v19->tm_year;
      HIDWORD(qword_1EDF54B50) = tm_year;
      if ((int)qword_1EDF54B50 < v19->tm_mon)
        HIDWORD(qword_1EDF54B50) = tm_year + 1;
      if ((v24 & 1) != 0)
        break;
      goto LABEL_61;
    case 4:
    case 6:
      if ((v24 & 2) == 0)
      {
        tm_mon = 0;
        LODWORD(qword_1EDF54B50) = 0;
      }
LABEL_61:
      HIDWORD(getdate_tm) = 1;
      break;
    case 5:
      tm_mon = v19->tm_mon;
      LODWORD(qword_1EDF54B50) = tm_mon;
      v29 = v19->tm_mday;
LABEL_67:
      if (SHIDWORD(getdate_tm) < v29)
        LODWORD(qword_1EDF54B50) = ++tm_mon;
      break;
    default:
      break;
  }
  dword_1EDF54B58 = v19->tm_wday;
  *((_QWORD *)&xmmword_1EDF54B60 + 1) = v19->tm_gmtoff;
  LODWORD(xmmword_1EDF54B60) = -1;
  if (mktime((tm *)&getdate_tm) == -1 || (v24 & 2) != 0 && (_DWORD)qword_1EDF54B50 != tm_mon)
    goto LABEL_72;
  v14 = (tm *)&getdate_tm;
  if (v25 != -1 && v24 != 7)
  {
    v30 = v25 - dword_1EDF54B58;
    if (v25 < dword_1EDF54B58)
      v30 = v25 - dword_1EDF54B58 + 7;
    HIDWORD(getdate_tm) += v30;
    if (mktime((tm *)&getdate_tm) == -1)
    {
LABEL_72:
      v13 = 8;
      goto LABEL_73;
    }
  }
LABEL_74:
  free(v11);
LABEL_28:
  fclose(v6);
  v15 = __error();
LABEL_29:
  *v15 = v4;
  return v14;
}

int asxprintf(char **__ret, printf_domain_t __domain, locale_t __loc, const char *__format, ...)
{
  return _vasprintf(0, (int)__domain, (void **)__ret);
}

int dxprintf(int __fd, printf_domain_t __domain, locale_t __loc, const char *__format, ...)
{
  va_list va;

  va_start(va, __format);
  return _vdprintf(0, (pthread_rwlock_t *)__domain, __fd, (unsigned int *)__loc, (unsigned __int8 *)__format, (__int16 *)va);
}

int fxprintf(FILE *__stream, printf_domain_t __domain, locale_t __loc, const char *__format, ...)
{
  return __xvprintf(0, (int)__domain, (uint64_t)__stream);
}

int sxprintf(char *__str, size_t __size, printf_domain_t __domain, locale_t __loc, const char *__format, ...)
{
  va_list va;

  va_start(va, __format);
  return _vsnprintf(0, (pthread_rwlock_t *)__domain, __str, __size, (unsigned int *)__loc, (unsigned __int8 *)__format, (__int16 *)va);
}

int xprintf(printf_domain_t __domain, locale_t __loc, const char *__format, ...)
{
  return __xvprintf(0, (int)__domain, (uint64_t)__stdoutp);
}

int vasxprintf(char **__ret, printf_domain_t __domain, locale_t __loc, const char *__format, va_list __ap)
{
  return _vasprintf(0, (int)__domain, (void **)__ret);
}

int vdxprintf(int __fd, printf_domain_t __domain, locale_t __loc, const char *__format, va_list __ap)
{
  return _vdprintf(0, (pthread_rwlock_t *)__domain, __fd, (unsigned int *)__loc, (unsigned __int8 *)__format, (__int16 *)__ap);
}

int vfxprintf(FILE *__stream, printf_domain_t __domain, locale_t __loc, const char *__format, va_list __ap)
{
  return __xvprintf(0, (int)__domain, (uint64_t)__stream);
}

int vsxprintf(char *__str, size_t __size, printf_domain_t __domain, locale_t __loc, const char *__format, va_list __ap)
{
  return _vsnprintf(0, (pthread_rwlock_t *)__domain, __str, __size, (unsigned int *)__loc, (unsigned __int8 *)__format, (__int16 *)__ap);
}

int vxprintf(printf_domain_t __domain, locale_t __loc, const char *__format, va_list __ap)
{
  return __xvprintf(0, (int)__domain, (uint64_t)__stdoutp);
}

void free_printf_comp(printf_comp_t __pc)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  void (*v5)(void);

  if (__pc)
  {
    v2 = *((_QWORD *)__pc + 10);
    if (v2)
    {
      do
      {
        v3 = __ldaxr((unsigned int *)v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, (unsigned int *)v2));
      if (!v4)
      {
        v5 = *(void (**)(void))(v2 + 8);
        if (v5)
          v5();
      }
    }
    free(*((void **)__pc + 11));
    free(*((void **)__pc + 13));
    free(*((void **)__pc + 14));
    pthread_mutex_destroy((pthread_mutex_t *)__pc);
    free(__pc);
  }
}

printf_comp_t new_printf_comp(printf_domain_t __domain, locale_t __loc, const char *__fmt)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _xlocale *v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  void (*v15)(locale_t);

  v5 = _platform_strlen();
  v6 = (char *)malloc_type_malloc(v5 + 129, 0x222E5A4DuLL);
  v7 = (uint64_t)v6;
  if (v6)
  {
    *((_QWORD *)v6 + 15) = 0;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_QWORD *)v6 = 850045863;
    *(_OWORD *)(v6 + 8) = 0u;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    *((_QWORD *)v6 + 7) = 0;
    *((_QWORD *)v6 + 8) = v6 + 128;
    _platform_strcpy();
    if (__loc)
    {
      if (__loc == (locale_t)-1)
        __loc = (locale_t)&__global_locale;
    }
    else
    {
      v8 = __locale_key;
      v9 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v8);
      if (v9)
        __loc = v9;
      else
        __loc = (locale_t)&__global_locale;
    }
    do
      v10 = __ldaxr((unsigned int *)__loc);
    while (__stlxr(v10 + 1, (unsigned int *)__loc));
    *(_QWORD *)(v7 + 80) = __loc;
    pthread_once(&__xprintf_domain_once, (void (*)(void))__xprintf_domain_init);
    pthread_rwlock_rdlock((pthread_rwlock_t *)__domain);
    v11 = __printf_comp(v7, (uint64_t)__domain);
    v12 = *__error();
    pthread_rwlock_unlock((pthread_rwlock_t *)__domain);
    if (v11 < 0)
    {
      do
      {
        v13 = __ldaxr((unsigned int *)__loc);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unsigned int *)__loc));
      if (!v14)
      {
        v15 = (void (*)(locale_t))*((_QWORD *)__loc + 1);
        if (v15)
          v15(__loc);
      }
      pthread_mutex_destroy((pthread_mutex_t *)v7);
      free((void *)v7);
      v7 = 0;
      *__error() = v12;
    }
  }
  return (printf_comp_t)v7;
}

char *__xprintf_domain_init()
{
  char *result;
  char v1;
  uint64_t v2;
  int v3;
  char **v4;
  char v5;
  __int128 v6;
  unsigned __int8 *v7;
  char *v8;
  int v9;
  BOOL v10;

  result = (char *)malloc_type_calloc(1uLL, 0x9F8uLL, 0x10800406116304FuLL);
  xprintf_domain_default = (uint64_t)result;
  if (!result)
    __xprintf_domain_init_cold_1();
  *(_OWORD *)(result + 184) = 0u;
  *(_OWORD *)(result + 168) = 0u;
  *(_OWORD *)(result + 152) = 0u;
  *(_OWORD *)(result + 136) = 0u;
  *(_OWORD *)(result + 120) = 0u;
  *(_OWORD *)(result + 104) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  v1 = 35;
  v2 = 1u;
  *(_QWORD *)result = 766030772;
  *(_OWORD *)(result + 8) = 0u;
  do
  {
    result[v1 + 167] = 3;
    v1 = _printf_tbl_flags[v2++];
  }
  while (v2 != 30);
  v3 = 6;
  v4 = &_printf_tbl_defaults_fbsd;
  do
  {
    v5 = **v4;
    if (v5)
    {
      v6 = *(_OWORD *)(v4 + 1);
      v7 = (unsigned __int8 *)(*v4 + 1);
      do
      {
        result[v5 + 167] = 2;
        v8 = &result[24 * (char)*(v7 - 1)];
        *((_OWORD *)v8 - 31) = v6;
        *((_QWORD *)v8 - 60) = 0;
        v9 = *v7++;
        v5 = v9;
      }
      while (v9);
    }
    v4 += 3;
    v10 = v3-- != 0;
  }
  while (v3 != 0 && v10);
  result[277] = 1;
  *((_QWORD *)result + 268) = __printf_arginfo_n;
  *((_QWORD *)result + 269) = __printf_render_n;
  *((_QWORD *)result + 270) = 0;
  return result;
}

printf_domain_t copy_printf_domain(printf_domain_t __domain)
{
  char *v2;

  v2 = (char *)malloc_type_malloc(0x9F8uLL, 0x10800406116304FuLL);
  if (v2)
  {
    pthread_once(&__xprintf_domain_once, (void (*)(void))__xprintf_domain_init);
    pthread_rwlock_rdlock((pthread_rwlock_t *)__domain);
    _platform_memmove();
    pthread_rwlock_unlock((pthread_rwlock_t *)__domain);
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    *(_OWORD *)(v2 + 136) = 0u;
    *(_OWORD *)(v2 + 152) = 0u;
    *(_OWORD *)(v2 + 168) = 0u;
    *(_OWORD *)(v2 + 184) = 0u;
    *(_QWORD *)v2 = 766030772;
  }
  return (printf_domain_t)v2;
}

void free_printf_domain(printf_domain_t __domain)
{
  if (__domain)
  {
    pthread_rwlock_destroy((pthread_rwlock_t *)__domain);
    free(__domain);
  }
}

printf_domain_t new_printf_domain(void)
{
  _printf_domain *v0;

  pthread_once(&__xprintf_domain_once, (void (*)(void))__xprintf_domain_init);
  v0 = (_printf_domain *)malloc_type_malloc(0x9F8uLL, 0x10800406116304FuLL);
  if (v0)
    _platform_memmove();
  return v0;
}

int register_printf_domain_function(printf_domain_t __domain, int __spec, printf_function *__render, printf_arginfo_function *__arginfo, void *__context)
{
  unsigned int v10;
  char *v11;
  char *v12;
  int v13;
  char v15;
  _QWORD *v16;

  pthread_once(&__xprintf_domain_once, (void (*)(void))__xprintf_domain_init);
  v10 = __spec - 33;
  if (v10 >= 0x5E
    || (pthread_once(&__xprintf_domain_once, (void (*)(void))__xprintf_domain_init),
        v11 = (char *)__domain + v10,
        v13 = v11[200],
        v12 = v11 + 200,
        v13 == 3))
  {
    *__error() = 22;
    return -1;
  }
  else
  {
    pthread_rwlock_wrlock((pthread_rwlock_t *)__domain);
    v15 = 0;
    if (__render)
    {
      if (__arginfo)
      {
        v16 = (_QWORD *)((char *)__domain + 24 * v10);
        v16[37] = __arginfo;
        v16[38] = __render;
        v16[39] = __context;
        v15 = 1;
      }
    }
    *v12 = v15;
    pthread_rwlock_unlock((pthread_rwlock_t *)__domain);
    return 0;
  }
}

uint64_t register_printf_domain_render(pthread_rwlock_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  char *v9;
  char *v10;
  int v11;
  char v13;
  uint64_t *v14;

  pthread_once(&__xprintf_domain_once, (void (*)(void))__xprintf_domain_init);
  if (a1
    && (v8 = a2 - 33, (a2 - 33) < 0x5E)
    && (pthread_once(&__xprintf_domain_once, (void (*)(void))__xprintf_domain_init),
        v9 = (char *)a1 + v8,
        v11 = v9[200],
        v10 = v9 + 200,
        v11 != 3))
  {
    pthread_rwlock_wrlock(a1);
    v13 = 0;
    if (a3)
    {
      if (a4)
      {
        v14 = &a1->__sig + 3 * v8;
        v14[37] = a4;
        v14[38] = a3;
        v14[39] = 0;
        v13 = 2;
      }
    }
    *v10 = v13;
    pthread_rwlock_unlock(a1);
    return 0;
  }
  else
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
}

int register_printf_domain_render_std(printf_domain_t __domain, const char *__specs)
{
  char v2;
  const char *v4;
  pthread_rwlock_t *v5;
  int v6;
  void *v7;
  void *v8;
  int v9;

  v2 = *__specs;
  if (!*__specs)
    return 0;
  v4 = __specs + 1;
  while (2)
  {
    switch(v2)
    {
      case 'M':
        v5 = (pthread_rwlock_t *)__domain;
        v6 = 77;
        v7 = __printf_render_errno;
        v8 = __printf_arginfo_errno;
        goto LABEL_10;
      case 'N':
      case 'O':
      case 'P':
      case 'R':
      case 'S':
      case 'U':
        goto LABEL_13;
      case 'Q':
        v5 = (pthread_rwlock_t *)__domain;
        v6 = 81;
        v7 = __printf_render_quote;
        v8 = __printf_arginfo_quote;
        goto LABEL_10;
      case 'T':
        v5 = (pthread_rwlock_t *)__domain;
        v6 = 84;
        v7 = __printf_render_time;
        v8 = __printf_arginfo_time;
        goto LABEL_10;
      case 'V':
        v5 = (pthread_rwlock_t *)__domain;
        v6 = 86;
        v7 = __printf_render_vis;
        v8 = __printf_arginfo_vis;
        goto LABEL_10;
      default:
        if (v2 == 72)
        {
          v5 = (pthread_rwlock_t *)__domain;
          v6 = 72;
          v7 = __printf_render_hexdump;
          v8 = __printf_arginfo_hexdump;
LABEL_10:
          if ((register_printf_domain_render(v5, v6, (uint64_t)v7, (uint64_t)v8) & 0x80000000) != 0)
            return -1;
          v9 = *(unsigned __int8 *)v4++;
          v2 = v9;
          if (!v9)
            return 0;
          continue;
        }
LABEL_13:
        *__error() = 22;
        return -1;
    }
  }
}

int asxprintf_exec(char **__ret, printf_comp_t __pc, ...)
{
  return _vasprintf((pthread_mutex_t *)__pc, 0, (void **)__ret);
}

int dxprintf_exec(int __fd, printf_comp_t __pc, ...)
{
  va_list va;

  va_start(va, __pc);
  return _vdprintf((pthread_mutex_t *)__pc, 0, __fd, 0, 0, (__int16 *)va);
}

int fxprintf_exec(FILE *__stream, printf_comp_t __pc, ...)
{
  return __xvprintf((pthread_mutex_t *)__pc, 0, (uint64_t)__stream);
}

int sxprintf_exec(char *__str, size_t __size, printf_comp_t __pc, ...)
{
  va_list va;

  va_start(va, __pc);
  return _vsnprintf((pthread_mutex_t *)__pc, 0, __str, __size, 0, 0, (__int16 *)va);
}

int xprintf_exec(printf_comp_t __pc, ...)
{
  return __xvprintf((pthread_mutex_t *)__pc, 0, (uint64_t)__stdoutp);
}

int vasxprintf_exec(char **__ret, printf_comp_t __pc, va_list __ap)
{
  return _vasprintf((pthread_mutex_t *)__pc, 0, (void **)__ret);
}

int vdxprintf_exec(int __fd, printf_comp_t __pc, va_list __ap)
{
  return _vdprintf((pthread_mutex_t *)__pc, 0, __fd, 0, 0, (__int16 *)__ap);
}

int vfxprintf_exec(FILE *__stream, printf_comp_t __pc, va_list __ap)
{
  return __xvprintf((pthread_mutex_t *)__pc, 0, (uint64_t)__stream);
}

int vsxprintf_exec(char *__str, size_t __size, printf_comp_t __pc, va_list __ap)
{
  return _vsnprintf((pthread_mutex_t *)__pc, 0, __str, __size, 0, 0, (__int16 *)__ap);
}

int vxprintf_exec(printf_comp_t __pc, va_list __ap)
{
  return __xvprintf((pthread_mutex_t *)__pc, 0, (uint64_t)__stdoutp);
}

char *__cdecl fparseln(FILE *a1, size_t *a2, size_t *a3, const char a4[3], int a5)
{
  size_t v8;
  _BYTE *v9;
  const char *__attribute__((__org_arrdim(0,3))) v10;
  int v11;
  int v12;
  int v13;
  _BOOL4 v14;
  char *v15;
  size_t v16;
  char *v17;
  unsigned __int8 *v19;
  char v20;
  char *v22;
  unsigned __int8 *v23;
  char v24;
  size_t *v25;
  _BYTE *v26;
  _BYTE *v27;
  int v28;
  _BYTE *v29;
  _BYTE *v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  int v35;
  int v36;
  BOOL v38;
  int v39;
  int v40;
  int v42;
  char v43;
  size_t v44;

  v8 = 0;
  v9 = 0;
  v44 = 0;
  v10 = "\\\\#";
  if (a4)
    v10 = a4;
  v43 = a5;
  v11 = *(unsigned __int8 *)v10;
  v12 = *((unsigned __int8 *)v10 + 1);
  v13 = *((unsigned __int8 *)v10 + 2);
  v14 = 1;
  while (v14)
  {
    if (a3)
      ++*a3;
    v15 = fgetln(a1, &v44);
    if (!v15)
      break;
    v14 = 0;
    v16 = v44;
    if (v44 && v13)
    {
      if ((uint64_t)v44 < 1)
      {
        v14 = 0;
      }
      else
      {
        v17 = v15;
        while (1)
        {
          if (*v17 == v13 && v11 != 0)
          {
            v19 = (unsigned __int8 *)(v17 - 1);
            if (v17 - 1 < v15)
              break;
            v20 = 0;
            do
            {
              if (*v19 != v11)
                break;
              ++v20;
              --v19;
            }
            while (v19 >= (unsigned __int8 *)v15);
            if ((v20 & 1) == 0)
              break;
          }
          if (++v17 >= &v15[v44])
          {
            v14 = 0;
            goto LABEL_23;
          }
        }
        v16 = v17 - v15;
        v44 = v17 - v15;
        v14 = v17 == v15 && v9 == 0;
        if (!v16)
          goto LABEL_45;
      }
LABEL_33:
      if (v15[v16 - 1] == 10)
        v44 = --v16;
      if (!v16 || !v12)
        goto LABEL_45;
      v22 = &v15[v16 - 1];
      if (*v22 == v12 && v11)
      {
        v23 = (unsigned __int8 *)(v22 - 1);
        if (v23 < (unsigned __int8 *)v15)
          goto LABEL_44;
        v24 = 0;
        do
        {
          if (*v23 != v11)
            break;
          ++v24;
          --v23;
        }
        while (v23 >= (unsigned __int8 *)v15);
        if ((v24 & 1) == 0)
        {
LABEL_44:
          v44 = v16 - 1;
          v14 = 1;
          --v16;
        }
        goto LABEL_45;
      }
LABEL_47:
      v42 = v12;
      v25 = a2;
      v26 = malloc_type_realloc(v9, v8 + v16 + 1, 0xC5A92874uLL);
      if (!v26)
      {
        free(v9);
        return 0;
      }
      v27 = v26;
      _platform_memmove();
      v8 += v44;
      v27[v8] = 0;
      v9 = v27;
      a2 = v25;
      v12 = v42;
    }
    else
    {
LABEL_23:
      if (v44)
        goto LABEL_33;
LABEL_45:
      if (v16 || !v9)
        goto LABEL_47;
    }
  }
  if ((v43 & 0xF) != 0 && v11 && v9 && _platform_strchr())
  {
    LOBYTE(v28) = *v9;
    v29 = v9;
    if (*v9)
    {
      v30 = v9;
      v29 = v9;
      do
      {
        if (v11 == v28)
        {
          LOBYTE(v28) = v11;
        }
        else
        {
          do
          {
            *v29++ = v28;
            v31 = *++v30;
            v28 = v31;
            if (v31)
              v32 = v28 == v11;
            else
              v32 = 1;
          }
          while (!v32);
          if (!v28)
            break;
        }
        v33 = v30[1];
        if (!v30[1])
          break;
        if (v33 == v13)
          v34 = v43 & 4;
        else
          v34 = 0;
        if (v33 == v12)
          v35 = v43 & 2;
        else
          v35 = 0;
        if (v33 == v11)
          v36 = v43 & 1;
        else
          v36 = 0;
        v38 = v33 == v11 || v33 == v12 || v33 == v13;
        v39 = v34 | v35 | v36;
        if (!v38)
          v39 = v43 & 8;
        if (!v39)
        {
          *v29++ = v28;
          LOBYTE(v33) = v30[1];
        }
        *v29++ = v33;
        v40 = v30[2];
        v30 += 2;
        LOBYTE(v28) = v40;
      }
      while (v40);
    }
    *v29 = 0;
    v8 = _platform_strlen();
  }
  if (a2)
    *a2 = v8;
  return v9;
}

int login_tty(int a1)
{
  int result;

  setsid();
  result = ioctl(a1, 0x20007461uLL, 0);
  if (result != -1)
  {
    dup2(a1, 0);
    dup2(a1, 1);
    dup2(a1, 2);
    result = 0;
    if (a1 >= 3)
    {
      close_NOCANCEL();
      return 0;
    }
  }
  return result;
}

void logwtmp(const char *a1, const char *a2, const char *a3)
{
  __int16 v4;
  _BYTE v5[292];
  pid_t v6;
  __int16 v7;
  timeval v8;

  _platform_bzero();
  if (_platform_strcmp())
  {
    _platform_strncpy();
    _platform_strncpy();
    v6 = getpid();
    if (*a2)
      v4 = 7;
    else
      v4 = 8;
    _platform_strncpy();
  }
  else if (_platform_strcmp())
  {
    v4 = 11;
  }
  else
  {
    v4 = 2;
  }
  v7 = v4;
  gettimeofday(&v8, 0);
  _utmpx_asl((uint64_t)v5);
}

int mkpathat_np(int dfd, const char *path, mode_t omode)
{
  return _mkpath(dfd, (char *)path, omode, 0);
}

int opendev(char *a1, int a2, int a3, char **a4)
{
  char v5;
  char *v7;
  const char *v8;
  int result;
  int *v10;
  int v11;
  char *v12;
  char *v13;

  v5 = a3;
  if (a4)
    *a4 = a1;
  *__error() = 2;
  if (pthread_once(&opendev_namebuf_once, (void (*)(void))opendev_namebuf_init) || (v7 = (char *)namebuf) == 0)
  {
    v10 = __error();
    v11 = 12;
    goto LABEL_11;
  }
  if ((v5 & 4) != 0)
    v8 = "";
  else
    v8 = "r";
  if (_platform_strchr())
    return open_NOCANCEL();
  if ((v5 & 1) == 0)
  {
LABEL_24:
    if (*__error() != 2)
      return -1;
    if (snprintf((char *)namebuf, 0x400uLL, "%s%s%s", "/dev/", v8, a1) <= 1023)
    {
      result = open_NOCANCEL();
      if (a4)
        *a4 = (char *)namebuf;
      return result;
    }
    v10 = __error();
    v11 = 63;
LABEL_11:
    *v10 = v11;
    return -1;
  }
  if (snprintf(v7, 0x400uLL, "%s%s%s", "/dev/", v8, a1) > 1023)
  {
    *__error() = 63;
    goto LABEL_24;
  }
  v12 = (char *)namebuf;
  while (1)
  {
    v13 = strrchr(v12, 115);
    if (!v13 || (*(v13 - 1) - 48) > 9)
      break;
    *v13 = 0;
  }
  result = open_NOCANCEL();
  if (a4)
    *a4 = (char *)namebuf;
  if (result == -1)
    goto LABEL_24;
  return result;
}

void *opendev_namebuf_init()
{
  void *result;

  result = malloc_type_malloc(0x400uLL, 0xD5E21FBBuLL);
  namebuf = (uint64_t)result;
  return result;
}

int openpty(int *a1, int *a2, char *a3, termios *a4, winsize *a5)
{
  int v10;
  int v11;
  int v12;
  int v13;
  char buffer[128];

  v10 = posix_openpt(131074);
  if (v10 < 0)
    return -1;
  v11 = v10;
  if (grantpt(v10) < 0
    || unlockpt(v11) < 0
    || ptsname_r(v11, buffer, 0x80uLL) == -1
    || (v12 = open_NOCANCEL(), v12 < 0))
  {
    close_NOCANCEL();
    return -1;
  }
  v13 = v12;
  *a1 = v11;
  *a2 = v12;
  if (a3)
    _platform_strcpy();
  if (a4)
    tcsetattr(v13, 2, a4);
  if (a5)
    ioctl(v13, 0x80087467uLL, a5);
  return 0;
}

pid_t forkpty(int *a1, char *a2, termios *a3, winsize *a4)
{
  pid_t v5;
  pid_t v6;
  int v7;
  int v9[2];

  *(_QWORD *)v9 = 0;
  if (openpty(&v9[1], v9, a2, a3, a4) == -1)
    return -1;
  v5 = fork();
  if (v5)
  {
    v6 = v5;
    if (v5 == -1)
      close_NOCANCEL();
    else
      *a1 = v9[1];
LABEL_9:
    close_NOCANCEL();
    return v6;
  }
  close_NOCANCEL();
  v7 = v9[0];
  if (login_tty(v9[0]) < 0)
  {
    syslog(3, "forkpty: login_tty could't make controlling tty");
    dup2(v7, 0);
    dup2(v7, 1);
    dup2(v7, 2);
    v6 = 0;
    if (v7 <= 2)
      return v6;
    goto LABEL_9;
  }
  return 0;
}

void uuid_generate_time(uuid_t out)
{
  int v2;
  int v3;
  int v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned int v9;
  int v10;
  __darwin_time_t v11;
  BOOL v12;
  __darwin_time_t tv_sec;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  timeval *v20;
  timeval v21;

  v17 = 0;
  v18 = 0;
  if ((uuid_generate_time_has_init & 1) != 0)
    goto LABEL_21;
  v2 = socket(2, 2, 0);
  if ((v2 & 0x80000000) == 0)
  {
    v3 = v2;
    _platform_bzero();
    v19 = 1024;
    v20 = &v21;
    if ((ioctl(v3, 0xC00C6924uLL, &v19, v17, v18) & 0x80000000) == 0 && v19 >= 1)
    {
      v4 = 0;
      while (1)
      {
        v5 = (unsigned __int8 *)v20 + v4;
        if (v5[17] == 18 && v5[22] == 6)
        {
          v6 = &v5[v5[21]];
          v8 = v6[24];
          v7 = v6 + 24;
          if ((v8 | 2) != 2 || v7[1] || v7[2] || v7[3] || v7[4] || v7[5])
            break;
        }
        v9 = v5[16];
        if (v9 >= 0x10)
          v10 = v9 + 16;
        else
          v10 = 32;
        v4 += v10;
        if (v4 >= v19)
          goto LABEL_18;
      }
      v16 = *(_DWORD *)v7;
      word_1EDF54B84 = *((_WORD *)v7 + 2);
      uuid_generate_time_node_id = v16;
      close_NOCANCEL();
      goto LABEL_20;
    }
LABEL_18:
    close_NOCANCEL();
  }
  arc4random_buf(&uuid_generate_time_node_id, 6uLL);
  LOBYTE(uuid_generate_time_node_id) = uuid_generate_time_node_id | 1;
LABEL_20:
  uuid_generate_time_has_init = 1;
LABEL_21:
  v21.tv_sec = 0;
  *(_QWORD *)&v21.tv_usec = 0;
  while (1)
  {
    gettimeofday(&v21, 0);
    v11 = get_clock_last;
    if ((_QWORD)get_clock_last)
      v12 = 0;
    else
      v12 = DWORD2(get_clock_last) == 0;
    if (v12)
    {
      arc4random_buf(&get_clock_clock_seq, 2uLL);
      get_clock_clock_seq &= 0x3FFFu;
      get_clock_last = (__int128)v21;
      v11 = v21.tv_sec - 1;
      *(_QWORD *)&get_clock_last = v21.tv_sec - 1;
    }
    tv_sec = v21.tv_sec;
    if (v21.tv_sec < v11)
    {
      v11 = v21.tv_sec;
LABEL_36:
      v14 = 0;
      get_clock_clock_seq = (get_clock_clock_seq + 1) & 0x3FFF;
      get_clock_adjustment = 0;
      get_clock_last = (__int128)v21;
      goto LABEL_38;
    }
    if (v21.tv_sec != v11)
      goto LABEL_37;
    if (v21.tv_usec < SDWORD2(get_clock_last))
      goto LABEL_36;
    if (v21.tv_usec != DWORD2(get_clock_last))
      break;
    if (get_clock_adjustment <= 9)
    {
      v14 = ++get_clock_adjustment;
      goto LABEL_38;
    }
  }
  tv_sec = v11;
LABEL_37:
  v14 = 0;
  get_clock_adjustment = 0;
  get_clock_last = (__int128)v21;
  v11 = tv_sec;
LABEL_38:
  v15 = 10 * v21.tv_usec + v14 + 10000000 * v11 + 122192928000000000;
  LODWORD(v17) = v15;
  LOWORD(v18) = get_clock_clock_seq | 0x8000;
  WORD2(v17) = WORD2(v15);
  HIWORD(v17) = HIWORD(v15) & 0xFFF | 0x1000;
  *(_DWORD *)((char *)&v18 + 2) = uuid_generate_time_node_id;
  HIWORD(v18) = word_1EDF54B84;
  uuid_pack((uint64_t)&v17, (uint64_t)out);
}

pid_t tcgetsid(int a1)
{
  pid_t v2;

  v2 = 0;
  if (ioctl(a1, 0x40047463uLL, &v2) < 0)
    return -1;
  else
    return v2;
}

uint64_t __libc_init(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD v6[4];
  __int128 v7;
  __int128 v8;

  v6[0] = 1;
  v6[1] = a2;
  v6[2] = a3;
  v6[3] = a4;
  v7 = 0u;
  v8 = 0u;
  return _libc_initializer(v6, a2, a5, a1);
}

void _libc_fork_child(uint64_t a1)
{
  qword_1EDF533C0 = (uint64_t)"crashed on child side of fork pre-exec";
  _arc4_fork_child(a1);
  _init_clock_port();
  __environ_lock_fork_child();
  _locale_lock_fork_child();
}

int chmodx_np(const char *a1, filesec_t a2)
{
  const char *v3;

  v3 = a1;
  return chmodx1((uint64_t)&v3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))chmodx_syscall, a2);
}

uint64_t chmodx_syscall()
{
  return __chmod_extended();
}

pid_t vfork(void)
{
  pid_t v0;
  void (*v1)(uint64_t);
  void (*v2)(void);

  if (_libSystem_atfork_prepare_v2)
    _libSystem_atfork_prepare_v2(1);
  else
    _libSystem_atfork_prepare();
  v0 = __fork();
  if (v0)
  {
    v1 = (void (*)(uint64_t))_libSystem_atfork_parent_v2;
    if (!_libSystem_atfork_parent_v2)
    {
      v2 = (void (*)(void))_libSystem_atfork_parent;
LABEL_10:
      v2();
      return v0;
    }
  }
  else
  {
    v1 = (void (*)(uint64_t))_libSystem_atfork_child_v2;
    if (!_libSystem_atfork_child_v2)
    {
      v2 = (void (*)(void))_libSystem_atfork_child;
      goto LABEL_10;
    }
  }
  v1(1);
  return v0;
}

int openx_np(const char *a1, int a2, filesec_t a3)
{
  if ((a2 & 0x200) != 0 && a3)
    return _mkfilex_np(0, (int)a1, (unsigned __int16)a2, a3);
  else
    return open_NOCANCEL();
}

uint64_t _mkfilex_np(int a1, int a2, int a3, filesec_t a4)
{
  _OWORD *v6;
  int v7;
  _OWORD *v8;
  _OWORD *v9;
  _OWORD v11[5];
  _OWORD *v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  int v16;

  v15 = -101;
  v16 = -101;
  v14 = 0;
  v13 = 0;
  v12 = 0;
  memset(v11, 0, 68);
  if (!a4)
    goto LABEL_23;
  if (filesec_get_property(a4, FILESEC_OWNER, &v16) && *__error() != 2
    || filesec_get_property(a4, FILESEC_GROUP, &v15) && *__error() != 2
    || filesec_get_property(a4, FILESEC_MODE, &v14) && *__error() != 2
    || (filesec_get_property(a4, FILESEC_ACL_RAW, &v12) || filesec_get_property(a4, FILESEC_ACL_ALLOCSIZE, &v13))
    && *__error() != 2)
  {
    return 0xFFFFFFFFLL;
  }
  v6 = v12;
  if (v12)
  {
    if (v12 == (_OWORD *)1)
    {
LABEL_27:
      *__error() = 22;
      return 0xFFFFFFFFLL;
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
    memset((char *)&v11[2] + 4, 0, 32);
    memset((char *)v11 + 4, 0, 32);
    v6 = v11;
    v12 = v11;
    LODWORD(v11[0]) = 19710317;
    DWORD1(v11[2]) = -1;
  }
  if (filesec_get_property(a4, FILESEC_UUID, (char *)v6 + 4))
  {
    if (*__error() != 2)
      return 0xFFFFFFFFLL;
    v8 = v12;
    *(_QWORD *)((char *)v12 + 12) = 0;
    *(_QWORD *)((char *)v8 + 4) = 0;
  }
  else
  {
    v7 = 1;
    v8 = v12;
  }
  if (!filesec_get_property(a4, FILESEC_GRPUUID, (char *)v8 + 20))
  {
LABEL_23:
    switch(a1)
    {
      case 2:
        return __mkdir_extended();
      case 1:
        return __mkfifo_extended();
      case 0:
        return __open_extended();
    }
    goto LABEL_27;
  }
  if (*__error() == 2)
  {
    v9 = v12;
    *(_QWORD *)((char *)v12 + 28) = 0;
    *(_QWORD *)((char *)v9 + 20) = 0;
    if (!v7)
      v12 = 0;
    goto LABEL_23;
  }
  return 0xFFFFFFFFLL;
}

int mkfifox_np(const char *a1, filesec_t a2)
{
  return _mkfilex_np(1, (int)a1, 0, a2);
}

int mkdirx_np(const char *a1, filesec_t a2)
{
  return _mkfilex_np(2, (int)a1, 0, a2);
}

int settimeofday(const timeval *a1, const timezone *a2)
{
  int v3;
  __darwin_time_t tv_sec;
  __darwin_suseconds_t tv_usec;
  char *v7;

  v3 = __settimeofday();
  if (!v3)
  {
    notify_post("com.apple.system.clock_set");
    if (!a1)
      return v3;
    goto LABEL_3;
  }
  if (a1)
  {
LABEL_3:
    tv_sec = a1->tv_sec;
    tv_usec = a1->tv_usec;
    v7 = 0;
    asprintf(&v7, "settimeofday({%#lx,%#x}) == %d", tv_sec, tv_usec, v3);
    _simple_asl_log();
    free(v7);
  }
  return v3;
}

int umaskx_np(filesec_t a1)
{
  __int16 v3;
  uint64_t v4;
  uint64_t v5;

  v4 = 0;
  v5 = 0;
  v3 = 0;
  if (a1)
  {
    if (filesec_get_property(a1, FILESEC_MODE, &v3) && *__error() != 2
      || (filesec_get_property(a1, FILESEC_ACL_RAW, &v5) || filesec_get_property(a1, FILESEC_ACL_ALLOCSIZE, &v4))
      && *__error() != 2)
    {
      return -1;
    }
    if (!v4)
      v5 = 0;
  }
  return __umask_extended();
}

uint64_t OSMemoryNotificationCurrentLevel()
{
  return 0;
}

uint64_t _OSThermalNotificationLevelForBehavior(unsigned int a1)
{
  uint64_t v2;
  dispatch_once_t *v3;
  _QWORD v5[4];
  unsigned int v6;
  uint64_t state64;

  state64 = -1;
  if (a1 > 0xA)
    return 0xFFFFFFFFLL;
  v2 = a1;
  v3 = (dispatch_once_t *)((char *)&predicates + 8 * a1);
  v5[0] = MEMORY[0x1E0C87450];
  v5[1] = 0x40000000;
  v5[2] = ___OSThermalNotificationLevelForBehavior_block_invoke;
  v5[3] = &__block_descriptor_tmp;
  v6 = a1;
  if (*v3 != -1)
    dispatch_once(v3, v5);
  notify_get_state(tokens[v2], &state64);
  return state64;
}

uint64_t _OSThermalNotificationSetLevelForBehavior(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  dispatch_once_t *v5;
  _QWORD block[4];
  unsigned int v7;

  if (a2 <= 0xA)
  {
    v3 = (int)result;
    v4 = a2;
    v5 = (dispatch_once_t *)((char *)&predicates + 8 * a2);
    block[0] = MEMORY[0x1E0C87450];
    block[1] = 0x40000000;
    block[2] = ___OSThermalNotificationSetLevelForBehavior_block_invoke;
    block[3] = &__block_descriptor_tmp_5;
    v7 = a2;
    if (*v5 != -1)
      dispatch_once(v5, block);
    result = notify_set_state(tokens[v4], v3);
    if (a2 == 8)
    {
      if (qword_1EDF543C8 != -1)
        dispatch_once(&qword_1EDF543C8, &__block_literal_global);
      return notify_set_state(dword_1EDF543F8, 0xBuLL);
    }
  }
  return result;
}

uint64_t OSThermalNotificationCurrentLevel()
{
  uint64_t state64;

  if (thermalLevelsReady == 1)
    return _OSThermalNotificationLevelForBehavior(0);
  state64 = 0;
  if (qword_1EDF543C8 != -1)
    dispatch_once(&qword_1EDF543C8, &__block_literal_global_8);
  notify_get_state(dword_1EDF543F8, &state64);
  if (state64 == 11)
  {
    thermalLevelsReady = 1;
    return _OSThermalNotificationLevelForBehavior(0);
  }
  else
  {
    thermalLevelsReady = 0;
    return 0xFFFFFFFFLL;
  }
}

int sync_volume_np(const char *a1, int a2)
{
  int v3;
  int v4;
  int v5;
  int v7;

  v7 = a2 & 3;
  v3 = *__error();
  v4 = fsctl(a1, 0x80044101uLL, &v7, 0);
  v5 = 0;
  if (v4 == -1)
    v5 = *__error();
  *__error() = v3;
  return v5;
}

int fsync_volume_np(int a1, int a2)
{
  int v3;
  int v4;
  int v5;
  int v7;

  v7 = a2 & 3;
  v3 = *__error();
  v4 = ffsctl(a1, 0x80004101uLL, &v7, 0);
  v5 = 0;
  if (v4 == -1)
    v5 = *__error();
  *__error() = v3;
  return v5;
}

__n128 libc_set_introspection_hooks(__n128 *a1, uint64_t a2, unint64_t a3)
{
  __n128 result;
  __int128 v7;
  __n128 v8;

  if (a3 <= 7)
    libc_set_introspection_hooks_cold_1();
  if (a2)
  {
    if (a3 <= 0x27)
      libc_set_introspection_hooks_cold_4();
    if (a3 != 40)
      _platform_bzero();
    result = *(__n128 *)&libc_hooks;
    v7 = *(_OWORD *)&off_1EDF54E10;
    *(_QWORD *)(a2 + 32) = off_1EDF54E20;
    *(__n128 *)a2 = result;
    *(_OWORD *)(a2 + 16) = v7;
  }
  if (a1)
  {
    if (!a1->n128_u64[0])
      libc_set_introspection_hooks_cold_2();
    if (a3 <= 0x27)
      libc_set_introspection_hooks_cold_3();
    v8 = *a1;
    result = a1[1];
    off_1EDF54E20 = (uint64_t (*)(_QWORD, _QWORD))a1[2].n128_u64[0];
    *(__n128 *)&libc_hooks = v8;
    *(__n128 *)&off_1EDF54E10 = result;
    libc_hooks = 1;
  }
  return result;
}

int dirfd(DIR *dirp)
{
  int result;

  if (!dirp || (result = dirp->__dd_fd, result < 0))
  {
    *__error() = 22;
    return -1;
  }
  return result;
}

uint64_t _os_crash_msg(uint64_t a1)
{
  uint64_t v1;

  if (a1)
  {
    qword_1EDF533C0 = a1;
    if (_os_crash_callback)
      _os_crash_callback();
  }
  v1 = abort_with_payload();
  return _os_crash_fmt(v1);
}

void *_os_crash_fmt(uint64_t a1)
{
  uint64_t v1;
  void *result;

  v1 = *(_QWORD *)(a1 + 40);
  qword_1EDF533C0 = v1;
  if (_os_crash_callback)
    _os_crash_callback(v1);
  result = dlopen("libsystem_trace.dylib", 17);
  if (result)
    _os_crash_fmt_cold_1();
  return result;
}

char *OUTLINED_FUNCTION_9(char *a1)
{
  return strrchr(a1, 47);
}

uint64_t OUTLINED_FUNCTION_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, char *);
  va_list va;

  va_start(va, a12);
  return v13(a1, v12, va);
}

uint64_t OUTLINED_FUNCTION_11()
{
  uint64_t v0;

  return _os_get_build((void *)(v0 - 232));
}

uint64_t OUTLINED_FUNCTION_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  return _os_debug_log_error_offset((uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_13(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const mach_header_64 *a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  return _os_log_redirect(a8, (uint64_t)va);
}

char *OUTLINED_FUNCTION_14@<X0>(int a1@<W0>, const char *a2@<X8>)
{
  const char *v2;

  if (a1 == 1)
    return getenv(v2);
  else
    return getenv(a2);
}

uint64_t creat_NOCANCEL()
{
  return __open_nocancel();
}

uint64_t gethostid(void)
{
  int v0;
  int v1;
  int v3;
  size_t v4;
  int v5[2];

  v3 = 0;
  *(_QWORD *)v5 = 0xB00000001;
  v4 = 4;
  v0 = sysctl(v5, 2u, &v3, &v4, 0, 0);
  v1 = v3;
  if (v0 == -1)
    return -1;
  return v1;
}

char *__cdecl getwd(char *a1)
{
  char *v2;
  int *v3;

  v2 = getcwd(a1, 0x400uLL);
  if (!v2)
  {
    v3 = __error();
    strerror_r(*v3, a1, 0x400uLL);
  }
  return v2;
}

void sethostid(uint64_t a1)
{
  uint64_t v1;
  int v2[2];

  v1 = a1;
  *(_QWORD *)v2 = 0xB00000001;
  sysctl(v2, 2u, 0, 0, &v1, 8uLL);
}

pid_t setpgrp(void)
{
  pid_t v0;
  pid_t v1;
  pid_t v2;

  v0 = getpgrp();
  v1 = getpid();
  v2 = v1;
  if (v0 != v1)
    setpgid(v1, v1);
  return v2;
}

int setrgid(gid_t a1)
{
  return setregid(a1, 0xFFFFFFFF);
}

int setruid(uid_t a1)
{
  return setreuid(a1, 0xFFFFFFFF);
}

uint64_t __bt_close(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t result;
  void *v5;
  void *v6;
  void *v7;

  v2 = a1[7];
  v3 = *(void **)(v2 + 32);
  if (v3)
  {
    mpool_put(*(MPOOL **)v2, v3, 0);
    *(_QWORD *)(v2 + 32) = 0;
  }
  result = __bt_sync((uint64_t)a1, 0);
  if ((_DWORD)result != -1)
  {
    result = mpool_close(*(MPOOL **)v2);
    if ((_DWORD)result != -1)
    {
      v5 = *(void **)(v2 + 48);
      if (v5)
      {
        free(v5);
        *(_QWORD *)(v2 + 48) = 0;
        *(_QWORD *)(v2 + 56) = 0;
      }
      v6 = *(void **)(v2 + 480);
      if (v6)
      {
        free(v6);
        *(_QWORD *)(v2 + 480) = 0;
        *(_QWORD *)(v2 + 488) = 0;
      }
      v7 = *(void **)(v2 + 496);
      if (v7)
        free(v7);
      free((void *)v2);
      free(a1);
      if (close_NOCANCEL())
        return 0xFFFFFFFFLL;
      else
        return 0;
    }
  }
  return result;
}

uint64_t __bt_sync(uint64_t a1, int a2)
{
  uint64_t v3;
  void *v4;
  uint64_t result;
  int v6;
  _DWORD *v7;
  int v8;
  int v9;
  int v10;
  int v11;

  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(void **)(v3 + 32);
  if (v4)
  {
    mpool_put(*(MPOOL **)v3, v4, 0);
    *(_QWORD *)(v3 + 32) = 0;
  }
  if (a2)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  v6 = *(_DWORD *)(v3 + 636);
  if ((v6 & 0x15) != 4)
    return 0;
  if ((v6 & 2) != 0)
  {
    v7 = mpool_get(*(MPOOL **)v3, 0, 0);
    if (!v7)
      return 0xFFFFFFFFLL;
    v8 = *(_DWORD *)(v3 + 520);
    v9 = *(_DWORD *)(v3 + 516);
    v10 = *(_DWORD *)(v3 + 616);
    v11 = *(_DWORD *)(v3 + 636) & 0xA0;
    *(_QWORD *)v7 = 0x300053162;
    v7[2] = v8;
    v7[3] = v9;
    v7[4] = v10;
    v7[5] = v11;
    mpool_put(*(MPOOL **)v3, v7, 1u);
  }
  result = mpool_sync(*(MPOOL **)v3);
  if (!(_DWORD)result)
    *(_DWORD *)(v3 + 636) &= ~4u;
  return result;
}

unsigned int *__bt_pgin(unsigned int *result, int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char v14;
  _DWORD *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;

  if ((result[159] & 8) != 0)
  {
    if (a2)
    {
      v3 = bswap32(*(_DWORD *)(a3 + 4));
      *(_DWORD *)a3 = bswap32(*(_DWORD *)a3);
      *(_DWORD *)(a3 + 4) = v3;
      v4 = bswap32(*(_DWORD *)(a3 + 12));
      *(_DWORD *)(a3 + 8) = bswap32(*(_DWORD *)(a3 + 8));
      *(_DWORD *)(a3 + 12) = v4;
      v5 = bswap32(*(unsigned __int16 *)(a3 + 16)) >> 16;
      *(_WORD *)(a3 + 16) = v5;
      *(_WORD *)(a3 + 18) = bswap32(*(unsigned __int16 *)(a3 + 18)) >> 16;
      v6 = v5 + 131052;
      v7 = v4 & 0x1F;
      if (v7 == 1)
      {
        v18 = (unsigned __int16)(v6 >> 1);
        if ((_DWORD)v18)
        {
          v19 = (_WORD *)(a3 + 20);
          do
          {
            v20 = bswap32((unsigned __int16)*v19) >> 16;
            *v19++ = v20;
            v21 = a3 + v20;
            v22 = bswap32(*(_DWORD *)(v21 + 4));
            *(_DWORD *)v21 = bswap32(*(_DWORD *)v21);
            *(_DWORD *)(v21 + 4) = v22;
            if ((*(_BYTE *)(v21 + 8) & 2) != 0)
            {
              *(_DWORD *)(v21 + 9) = bswap32(*(_DWORD *)(v21 + 9));
              *(_DWORD *)(v21 + 13) = bswap32(*(_DWORD *)(v21 + 13));
            }
            --v18;
          }
          while (v18);
        }
      }
      else
      {
        v8 = (unsigned __int16)(v6 >> 1);
        if (v7 == 2 && (_DWORD)v8 != 0)
        {
          v10 = (_WORD *)(a3 + 20);
          do
          {
            v11 = bswap32((unsigned __int16)*v10) >> 16;
            *v10++ = v11;
            v12 = a3 + v11;
            v13 = bswap32(*(_DWORD *)(v12 + 4));
            *(_DWORD *)v12 = bswap32(*(_DWORD *)v12);
            *(_DWORD *)(v12 + 4) = v13;
            v14 = *(_BYTE *)(v12 + 8);
            if ((v14 & 3) != 0)
            {
              if ((*(_BYTE *)(v12 + 8) & 2) == 0)
              {
                v15 = (_DWORD *)(v12 + 9);
                if ((v14 & 1) == 0)
                  goto LABEL_15;
LABEL_14:
                v17 = bswap32(v15[2]);
                v15[1] = bswap32(v15[1]);
                v15[2] = v17;
                goto LABEL_15;
              }
              v16 = *(_DWORD *)(v12 + 13);
              v15 = (_DWORD *)(v12 + 13);
              *(v15 - 1) = bswap32(*(v15 - 1));
              *v15 = bswap32(v16);
              if ((v14 & 1) != 0)
                goto LABEL_14;
            }
LABEL_15:
            --v8;
          }
          while (v8);
        }
      }
    }
    else
    {
      return mswap((unsigned int *)a3);
    }
  }
  return result;
}

unsigned int *mswap(unsigned int *result)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;

  v1 = bswap32(result[1]);
  *result = bswap32(*result);
  result[1] = v1;
  v2 = bswap32(result[3]);
  result[2] = bswap32(result[2]);
  result[3] = v2;
  v3 = bswap32(result[5]);
  result[4] = bswap32(result[4]);
  result[5] = v3;
  return result;
}

unsigned int *__bt_pgout(unsigned int *result, int a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  _WORD *v6;
  uint64_t v7;
  unsigned int v8;
  char v9;
  _DWORD *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;

  if ((result[159] & 8) != 0)
  {
    if (a2)
    {
      v3 = *(unsigned __int16 *)(a3 + 16) + 131052;
      if ((*(_DWORD *)(a3 + 12) & 0x1F) == 1)
      {
        v13 = (unsigned __int16)(v3 >> 1);
        if ((_DWORD)v13)
        {
          v14 = (_WORD *)(a3 + 20);
          do
          {
            v15 = a3 + (unsigned __int16)*v14;
            v16 = bswap32(*(_DWORD *)(v15 + 4));
            *(_DWORD *)v15 = bswap32(*(_DWORD *)v15);
            *(_DWORD *)(v15 + 4) = v16;
            if ((*(_BYTE *)(v15 + 8) & 2) != 0)
            {
              *(_DWORD *)(v15 + 9) = bswap32(*(_DWORD *)(v15 + 9));
              *(_DWORD *)(v15 + 13) = bswap32(*(_DWORD *)(v15 + 13));
            }
            *v14 = bswap32((unsigned __int16)*v14) >> 16;
            ++v14;
            --v13;
          }
          while (v13);
        }
      }
      else
      {
        v4 = (unsigned __int16)(v3 >> 1);
        if ((*(_DWORD *)(a3 + 12) & 0x1F) == 2 && (_DWORD)v4 != 0)
        {
          v6 = (_WORD *)(a3 + 20);
          do
          {
            v7 = a3 + (unsigned __int16)*v6;
            v8 = bswap32(*(_DWORD *)(v7 + 4));
            *(_DWORD *)v7 = bswap32(*(_DWORD *)v7);
            *(_DWORD *)(v7 + 4) = v8;
            v9 = *(_BYTE *)(v7 + 8);
            if ((v9 & 3) != 0)
            {
              if ((*(_BYTE *)(v7 + 8) & 2) == 0)
              {
                v10 = (_DWORD *)(v7 + 9);
                if ((v9 & 1) == 0)
                  goto LABEL_15;
LABEL_14:
                v12 = bswap32(v10[2]);
                v10[1] = bswap32(v10[1]);
                v10[2] = v12;
                goto LABEL_15;
              }
              v11 = *(_DWORD *)(v7 + 13);
              v10 = (_DWORD *)(v7 + 13);
              *(v10 - 1) = bswap32(*(v10 - 1));
              *v10 = bswap32(v11);
              if ((v9 & 1) != 0)
                goto LABEL_14;
            }
LABEL_15:
            *v6 = bswap32((unsigned __int16)*v6) >> 16;
            ++v6;
            --v4;
          }
          while (v4);
        }
      }
      v17 = bswap32(*(_DWORD *)(a3 + 4));
      *(_DWORD *)a3 = bswap32(*(_DWORD *)a3);
      *(_DWORD *)(a3 + 4) = v17;
      v18 = bswap32(*(_DWORD *)(a3 + 12));
      *(_DWORD *)(a3 + 8) = bswap32(*(_DWORD *)(a3 + 8));
      *(_DWORD *)(a3 + 12) = v18;
      *(_WORD *)(a3 + 16) = bswap32(*(unsigned __int16 *)(a3 + 16)) >> 16;
      *(_WORD *)(a3 + 18) = bswap32(*(unsigned __int16 *)(a3 + 18)) >> 16;
    }
    else
    {
      return mswap((unsigned int *)a3);
    }
  }
  return result;
}

uint64_t __bt_delete(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  void *v6;
  pgno_t **v7;
  pgno_t **v8;
  pgno_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BOOL4 v13;
  int v14;
  pgno_t **v15;
  uint64_t v16;
  int *v17;
  int v18;
  MPOOL *v20;
  pgno_t *v21;
  unsigned int v22;
  pgno_t *v23;
  pgno_t *v24;
  uint64_t v25;
  pgno_t *v27;
  int v28;

  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(void **)(v5 + 32);
  if (v6)
  {
    mpool_put(*(MPOOL **)v5, v6, 0);
    *(_QWORD *)(v5 + 32) = 0;
  }
  if ((*(_BYTE *)(v5 + 636) & 0x10) != 0)
  {
    v17 = __error();
    v18 = 1;
LABEL_30:
    *v17 = v18;
    return 0xFFFFFFFFLL;
  }
  if (a3 != 1)
  {
    if (!a3)
    {
      v28 = 0;
      v7 = __bt_search(v5, a2, &v28);
      if (!v7)
        return 0xFFFFFFFFLL;
      v8 = v7;
      if (v28)
      {
        while (2)
        {
          v9 = *v8;
          while (1)
          {
            if (__bt_dleaf(v5, a2, v9, *((unsigned __int16 *)v8 + 4)))
            {
LABEL_39:
              mpool_put(*(MPOOL **)v5, v9, 0);
              return 0xFFFFFFFFLL;
            }
            if ((*(_BYTE *)(v5 + 636) & 0x20) != 0)
            {
              if ((v9[4] & 0xFFFE) == 0x14)
              {
                if (__bt_pdelete(v5, v9))
                  return 0xFFFFFFFFLL;
              }
              else
              {
                mpool_put(*(MPOOL **)v5, v9, 1u);
              }
              goto LABEL_41;
            }
            v10 = *((unsigned __int16 *)v8 + 4);
            v11 = *((unsigned __int16 *)v9 + 8);
            v12 = (unint64_t)(v11 - 20) >> 1;
            if (v12 <= v10)
              break;
            if (__bt_cmp(v5, a2, (uint64_t *)v8))
            {
              v10 = *((unsigned __int16 *)v8 + 4);
              v11 = *((unsigned __int16 *)v9 + 8);
              v12 = (unint64_t)(v11 - 20) >> 1;
              break;
            }
          }
          v13 = v12 == v10;
          *((_WORD *)v8 + 4) = v10 - 1;
          if ((_DWORD)v10)
          {
            while (!__bt_cmp(v5, a2, (uint64_t *)v8))
            {
              if (__bt_dleaf(v5, a2, v9, *((unsigned __int16 *)v8 + 4)) == -1)
                goto LABEL_39;
              v14 = *((unsigned __int16 *)v8 + 4);
              *((_WORD *)v8 + 4) = v14 - 1;
              if (!v14)
              {
                v13 = 1;
                break;
              }
            }
            LOWORD(v11) = *((_WORD *)v9 + 8);
          }
          if ((v11 & 0xFFFE) == 0x14)
          {
            if (__bt_pdelete(v5, v9))
              return 0xFFFFFFFFLL;
          }
          else
          {
            mpool_put(*(MPOOL **)v5, v9, 1u);
            if (!v13)
              goto LABEL_41;
          }
          v15 = __bt_search(v5, a2, &v28);
          if (!v15)
            goto LABEL_41;
          v8 = v15;
          if (v28)
            continue;
          break;
        }
        v16 = 0;
      }
      else
      {
        v16 = 1;
      }
      v20 = *(MPOOL **)v5;
      v21 = *v8;
      v22 = 0;
      goto LABEL_37;
    }
    goto LABEL_29;
  }
  if ((*(_BYTE *)(v5 + 68) & 8) == 0)
  {
LABEL_29:
    v17 = __error();
    v18 = 22;
    goto LABEL_30;
  }
  if ((*(_BYTE *)(v5 + 68) & 7) != 0)
    return 1;
  v23 = (pgno_t *)mpool_get(*(MPOOL **)v5, *(_DWORD *)(v5 + 40), 0);
  v27 = v23;
  if (!v23)
    return 0xFFFFFFFFLL;
  v24 = v23;
  if ((v23[4] & 0xFFFE) == 0x16)
  {
    if (__bt_stkacq(v5, (void **)&v27, (pgno_t *)(v5 + 40)))
      return 0xFFFFFFFFLL;
    v24 = v27;
  }
  v25 = __bt_dleaf(v5, 0, v24, *(unsigned __int16 *)(v5 + 44));
  if ((v24[4] & 0xFFFE) == 0x14 && (_DWORD)v25 == 0)
  {
    if (!__bt_pdelete(v5, v24))
      goto LABEL_41;
    return 0xFFFFFFFFLL;
  }
  v16 = v25;
  v22 = v25 == 0;
  v20 = *(MPOOL **)v5;
  v21 = v24;
LABEL_37:
  mpool_put(v20, v21, v22);
  if (!(_DWORD)v16)
  {
LABEL_41:
    v16 = 0;
    *(_DWORD *)(v5 + 636) |= 4u;
  }
  return v16;
}

BOOL __bt_stkacq(uint64_t a1, void **a2, pgno_t *a3)
{
  pgno_t **v6;
  _DWORD *v7;
  void *v8;
  _BOOL8 result;
  unsigned int v10;
  uint64_t v11;
  pgno_t v12;
  uint64_t v13;
  int v14;
  pgno_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  pgno_t v20;
  uint64_t v21;
  pgno_t **v22;
  pgno_t v23;
  uint64_t v24;
  int v25;
  pgno_t v26;
  _DWORD *v27;
  __int16 v28;
  uint64_t v29;
  pgno_t v30;
  _DWORD *v31;
  uint64_t v32;
  int v33;

  v33 = 0;
  mpool_put(*(MPOOL **)a1, *a2, 0);
  v6 = __bt_search(a1, (uint64_t)(a3 + 2), &v33);
  if (!v6)
    return 1;
  v7 = *v6;
  if (**v6 != *a3)
  {
    LOWORD(v10) = 0;
    v11 = a1 + 72;
    while (*v7 != *a3)
    {
      v12 = v7[2];
      mpool_put(*(MPOOL **)a1, v7, 0);
      if (!v12)
      {
        v22 = __bt_search(a1, (uint64_t)(a3 + 2), &v33);
        if (!v22)
          return 1;
        v7 = *v22;
        while (*v7 != *a3)
        {
          v23 = v7[1];
          if (!v23)
            break;
          mpool_put(*(MPOOL **)a1, v7, 0);
          v24 = *(_QWORD *)(a1 + 472);
          if (v24 != v11)
          {
            v25 = 0;
            while (1)
            {
              v26 = *(_DWORD *)(v24 - 8);
              *(_QWORD *)(a1 + 472) = v24 - 8;
              v27 = mpool_get(*(MPOOL **)a1, v26, 0);
              if (!v27)
                return 1;
              v7 = v27;
              v28 = *(_WORD *)(v24 - 4);
              if (v28)
              {
                LOWORD(v10) = v28 - 1;
                v29 = *(_QWORD *)(a1 + 472);
                *(_DWORD *)v29 = *v27;
                *(_WORD *)(v29 + 4) = v28 - 1;
                *(_QWORD *)(a1 + 472) = v29 + 8;
                if (v25)
                  goto LABEL_32;
                break;
              }
              mpool_put(*(MPOOL **)a1, v27, 0);
              ++v25;
              v24 = *(_QWORD *)(a1 + 472);
              if (v24 == v11)
              {
LABEL_32:
                while (1)
                {
                  v30 = *(_DWORD *)((char *)v7 + *((unsigned __int16 *)v7 + (unsigned __int16)v10 + 10) + 4);
                  mpool_put(*(MPOOL **)a1, v7, 0);
                  v31 = mpool_get(*(MPOOL **)a1, v30, 0);
                  if (!v31)
                    return 1;
                  v7 = v31;
                  v10 = ((*((unsigned __int16 *)v31 + 8) + 131052) >> 1) - 1;
                  v32 = *(_QWORD *)(a1 + 472);
                  *(_DWORD *)v32 = v30;
                  *(_WORD *)(v32 + 4) = v10;
                  *(_QWORD *)(a1 + 472) = v32 + 8;
                  if (!--v25)
                    goto LABEL_34;
                }
              }
            }
          }
LABEL_34:
          mpool_put(*(MPOOL **)a1, v7, 0);
          v7 = mpool_get(*(MPOOL **)a1, v23, 0);
          result = 1;
          if (!v7)
            return result;
        }
        break;
      }
      v13 = *(_QWORD *)(a1 + 472);
      if (v13 != v11)
      {
        v14 = 0;
        while (1)
        {
          v15 = *(_DWORD *)(v13 - 8);
          *(_QWORD *)(a1 + 472) = v13 - 8;
          v16 = mpool_get(*(MPOOL **)a1, v15, 0);
          if (!v16)
            return 1;
          v7 = v16;
          v17 = *(unsigned __int16 *)(v13 - 4);
          if ((((unint64_t)*((unsigned __int16 *)v16 + 8) - 20) >> 1) - 1 != v17)
          {
            LOWORD(v10) = v17 + 1;
            v18 = *(_QWORD *)(a1 + 472);
            *(_DWORD *)v18 = *v16;
            *(_WORD *)(v18 + 4) = v17 + 1;
            *(_QWORD *)(a1 + 472) = v18 + 8;
            goto LABEL_15;
          }
          mpool_put(*(MPOOL **)a1, v16, 0);
          ++v14;
          v13 = *(_QWORD *)(a1 + 472);
          if (v13 == v11)
            goto LABEL_15;
        }
      }
      v14 = 0;
LABEL_15:
      v19 = v14 + 1;
      while (--v19)
      {
        v20 = *(_DWORD *)((char *)v7 + *((unsigned __int16 *)v7 + (unsigned __int16)v10 + 10) + 4);
        v21 = *(_QWORD *)(a1 + 472);
        *(_DWORD *)v21 = v20;
        *(_WORD *)(v21 + 4) = 0;
        *(_QWORD *)(a1 + 472) = v21 + 8;
        mpool_put(*(MPOOL **)a1, v7, 0);
        v7 = mpool_get(*(MPOOL **)a1, v20, 0);
        LOWORD(v10) = 0;
        if (!v7)
          return 1;
      }
      mpool_put(*(MPOOL **)a1, v7, 0);
      v7 = mpool_get(*(MPOOL **)a1, v12, 0);
      result = 1;
      if (!v7)
        return result;
    }
  }
  mpool_put(*(MPOOL **)a1, v7, 0);
  v8 = mpool_get(*(MPOOL **)a1, *a3, 0);
  *a2 = v8;
  return v8 == 0;
}

uint64_t __bt_dleaf(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int a4)
{
  char v7;
  uint64_t v9;
  pgno_t v10;
  _DWORD *v11;
  void *v12;
  uint64_t result;
  char v14;
  pgno_t v15;
  _DWORD *v16;
  _WORD *v17;
  unsigned __int16 *v18;
  unsigned int *v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned __int16 *v27;
  unsigned int v28;
  __int16 v29;
  unsigned int v30;
  char v31;
  _DWORD *v32;
  uint64_t v33;

  v7 = *(_BYTE *)(a1 + 68);
  if ((v7 & 9) == 8 && *(_DWORD *)(a1 + 40) == *a3 && *(unsigned __int16 *)(a1 + 44) == a4)
  {
    v32 = 0;
    v33 = 0;
    *(_BYTE *)(a1 + 68) = v7 & 0xF8;
    if ((*(_BYTE *)(a1 + 636) & 0x20) != 0)
    {
      v32 = a3;
      LOWORD(v33) = a4;
      goto LABEL_19;
    }
    v9 = a2;
    if (!a2)
    {
      v32 = a3;
      LOWORD(v33) = a4;
      v9 = a1 + 48;
      if (__bt_ret(a1, (uint64_t)&v32, (_QWORD *)(a1 + 48), a1 + 48, 0, 0, 1))
        return 0xFFFFFFFFLL;
    }
    if (a4 && (v32 = a3, LOWORD(v33) = a4 - 1, !__bt_cmp(a1, v9, (uint64_t *)&v32)))
    {
      v14 = *(_BYTE *)(a1 + 68) | 4;
    }
    else
    {
      if ((((unint64_t)*((unsigned __int16 *)a3 + 8) - 20) >> 1) - 1 <= a4
        || (v32 = a3, LOWORD(v33) = a4 + 1, __bt_cmp(a1, v9, (uint64_t *)&v32)))
      {
        if (!a4)
        {
          v15 = a3[1];
          if (v15)
          {
            v16 = mpool_get(*(MPOOL **)a1, v15, 0);
            if (!v16)
              return 0xFFFFFFFFLL;
            v12 = v16;
            v32 = v16;
            LOWORD(v33) = ((*((unsigned __int16 *)v16 + 8) + 131052) >> 1) - 1;
            if (!__bt_cmp(a1, v9, (uint64_t *)&v32))
            {
              v31 = 4;
LABEL_56:
              *(_BYTE *)(a1 + 68) |= v31;
              mpool_put(*(MPOOL **)a1, v12, 0);
              goto LABEL_30;
            }
            mpool_put(*(MPOOL **)a1, v12, 0);
          }
        }
        if ((((unint64_t)*((unsigned __int16 *)a3 + 8) - 20) >> 1) - 1 != a4 || (v10 = a3[2]) == 0)
        {
LABEL_16:
          v32 = a3;
          LOWORD(v33) = a4;
          if (!a2)
            goto LABEL_20;
LABEL_19:
          if (!__bt_ret(a1, (uint64_t)&v32, (_QWORD *)(a1 + 48), a1 + 48, 0, 0, 1))
          {
LABEL_20:
            *(_BYTE *)(a1 + 68) |= 1u;
            goto LABEL_31;
          }
          return 0xFFFFFFFFLL;
        }
        v11 = mpool_get(*(MPOOL **)a1, v10, 0);
        if (!v11)
          return 0xFFFFFFFFLL;
        v12 = v11;
        v32 = v11;
        LOWORD(v33) = 0;
        if (__bt_cmp(a1, v9, (uint64_t *)&v32))
        {
          mpool_put(*(MPOOL **)a1, v12, 0);
          goto LABEL_16;
        }
        v31 = 2;
        goto LABEL_56;
      }
      v14 = *(_BYTE *)(a1 + 68) | 2;
    }
    *(_BYTE *)(a1 + 68) = v14;
LABEL_30:
    *(_DWORD *)(a1 + 40) = *v32;
    *(_WORD *)(a1 + 44) = v33;
  }
LABEL_31:
  v17 = a3 + 5;
  v18 = (unsigned __int16 *)a3 + a4 + 10;
  v19 = (_DWORD *)((char *)a3 + *v18);
  v20 = *((_BYTE *)v19 + 8);
  if ((v20 & 2) != 0)
  {
    result = __ovfl_delete(a1, (unsigned int *)((char *)v19 + 9));
    if ((_DWORD)result == -1)
      return result;
    v20 = *((_BYTE *)v19 + 8);
  }
  if ((v20 & 1) == 0 || (result = __ovfl_delete(a1, (unsigned int *)((char *)v19 + *v19 + 9)), (_DWORD)result != -1))
  {
    v21 = (*v19 + v19[1] + 12) & 0xFFFFFFFC;
    _platform_memmove();
    *((_WORD *)a3 + 9) += v21;
    v22 = *v18;
    if ((_WORD)a4)
    {
      v23 = a4;
      do
      {
        v24 = (unsigned __int16)*v17;
        if (v24 < v22)
          *v17 = v24 + v21;
        --v23;
        ++v17;
      }
      while ((_WORD)v23);
    }
    v25 = *((unsigned __int16 *)a3 + 8);
    v26 = ~a4 + ((v25 + 131052) >> 1);
    if (~(_WORD)a4 + (unsigned __int16)((v25 + 131052) >> 1))
    {
      v27 = v17 + 1;
      do
      {
        v28 = *v27;
        if (v28 >= v22)
          v29 = 0;
        else
          v29 = v21;
        *(v27 - 1) = v29 + v28;
        --v26;
        ++v27;
      }
      while ((_WORD)v26);
      LOWORD(v25) = *((_WORD *)a3 + 8);
    }
    *((_WORD *)a3 + 8) = v25 - 2;
    if ((*(_BYTE *)(a1 + 68) & 9) == 8
      && *(_DWORD *)(a1 + 40) == *a3
      && (v30 = *(unsigned __int16 *)(a1 + 44), v30 > a4))
    {
      result = 0;
      *(_WORD *)(a1 + 44) = v30 - 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t __bt_pdelete(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  pgno_t v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  char *v10;
  unsigned __int16 *v11;
  unsigned int v12;
  char *v13;
  _WORD *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned __int16 *v21;
  unsigned int v22;
  __int16 v23;

  v4 = a1 + 72;
  while (1)
  {
    v5 = *(_QWORD *)(a1 + 472);
    if (v5 == v4)
      break;
    v6 = *(_DWORD *)(v5 - 8);
    *(_QWORD *)(a1 + 472) = v5 - 8;
    v7 = mpool_get(*(MPOOL **)a1, v6, 0);
    if (!v7)
      return 0xFFFFFFFFLL;
    v8 = v7;
    v9 = *(unsigned __int16 *)(v5 - 4);
    v10 = (char *)v7 + 2 * v9;
    v12 = *((unsigned __int16 *)v10 + 10);
    v11 = (unsigned __int16 *)(v10 + 20);
    v13 = (char *)v7 + v12;
    if ((v13[8] & 2) != 0 && __ovfl_delete(a1, (pgno_t *)(v13 + 9)) == -1)
    {
      mpool_put(*(MPOOL **)a1, v8, 0);
      return 0xFFFFFFFFLL;
    }
    if ((v8[4] & 0xFFFE) != 0x16)
    {
      v14 = v8 + 5;
      v15 = (*(_DWORD *)v13 & 0xFFFFFFFC) + 12;
      _platform_memmove();
      *((_WORD *)v8 + 9) += v15;
      v16 = *v11;
      if ((_DWORD)v9)
      {
        v17 = v9;
        do
        {
          v18 = (unsigned __int16)*v14;
          if (v18 < v16)
            *v14 = v18 + v15;
          --v17;
          ++v14;
        }
        while ((_WORD)v17);
      }
      v19 = *((unsigned __int16 *)v8 + 8);
      v20 = ~(_DWORD)v9 + ((v19 + 131052) >> 1);
      if (~(_WORD)v9 + (unsigned __int16)((v19 + 131052) >> 1))
      {
        v21 = v14 + 1;
        do
        {
          v22 = *v21;
          if (v22 >= v16)
            v23 = 0;
          else
            v23 = v15;
          *(v21 - 1) = v23 + v22;
          --v20;
          ++v21;
        }
        while ((_WORD)v20);
        LOWORD(v19) = *((_WORD *)v8 + 8);
      }
      *((_WORD *)v8 + 8) = v19 - 2;
      goto LABEL_25;
    }
    if (*v8 == 1)
    {
      *((_WORD *)v8 + 8) = 20;
      *((_WORD *)v8 + 9) = *(_DWORD *)(a1 + 520);
      v8[3] = 2;
LABEL_25:
      mpool_put(*(MPOOL **)a1, v8, 1u);
      break;
    }
    if (__bt_relink((MPOOL **)a1, (uint64_t)v8) || __bt_free(a1, v8))
      return 0xFFFFFFFFLL;
  }
  if (*a2 == 1)
  {
    mpool_put(*(MPOOL **)a1, a2, 1u);
    return 0;
  }
  else
  {
    return __bt_relink((MPOOL **)a1, (uint64_t)a2) || __bt_free(a1, a2) != 0;
  }
}

uint64_t __bt_relink(MPOOL **a1, uint64_t a2)
{
  pgno_t v4;
  _DWORD *v5;
  pgno_t v6;
  _DWORD *v7;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4)
  {
    v5 = mpool_get(*a1, v4, 0);
    if (!v5)
      return 0xFFFFFFFFLL;
    v5[1] = *(_DWORD *)(a2 + 4);
    mpool_put(*a1, v5, 1u);
  }
  v6 = *(_DWORD *)(a2 + 4);
  if (!v6)
    return 0;
  v7 = mpool_get(*a1, v6, 0);
  if (v7)
  {
    v7[2] = *(_DWORD *)(a2 + 8);
    mpool_put(*a1, v7, 1u);
    return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t __bt_get(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void **v11;
  void **v12;
  int v13;

  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(void **)(v7 + 32);
  if (v8)
  {
    mpool_put(*(MPOOL **)v7, v8, 0);
    *(_QWORD *)(v7 + 32) = 0;
  }
  v13 = 0;
  if (a4)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  v11 = (void **)__bt_search(v7, a2, &v13);
  if (!v11)
    return 0xFFFFFFFFLL;
  v12 = v11;
  if (v13)
  {
    v9 = __bt_ret(v7, (uint64_t)v11, 0, 0, a3, (char **)(v7 + 496), 0);
    if ((*(_BYTE *)(v7 + 637) & 0x40) != 0)
      mpool_put(*(MPOOL **)v7, *v12, 0);
    else
      *(_QWORD *)(v7 + 32) = *v12;
  }
  else
  {
    mpool_put(*(MPOOL **)v7, *v11, 0);
    return 1;
  }
  return v9;
}

MPOOL *__bt_open(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, int a5)
{
  MPOOL *v7;
  uint64_t (*v8)(unsigned __int8 **, unsigned __int8 **);
  unint64_t v9;
  pgno_t v10;
  int v11;
  int v12;
  MPOOL **v13;
  MPOOL **v14;
  MPOOL *v15;
  MPOOL *v16;
  int v17;
  int v18;
  uint64_t NOCANCEL;
  int v20;
  char *v21;
  const char *v22;
  int v23;
  int v24;
  unsigned int st_blksize;
  int v26;
  unsigned int v27;
  pgno_t v28;
  unsigned int v29;
  MPOOL *v30;
  MPOOL *v31;
  int v33;
  unsigned int v34;
  stat v35;
  sigset_t v36;
  sigset_t v37;
  char __str[1024];

  memset(&v35, 0, sizeof(v35));
  v7 = (MPOOL *)__bt_defpfx;
  v8 = __bt_defcmp;
  if (a4)
  {
    v9 = *a4;
    if ((unint64_t)*a4 > 1)
    {
LABEL_35:
      v13 = 0;
      goto LABEL_36;
    }
    v11 = *((_DWORD *)a4 + 4);
    v10 = *((_DWORD *)a4 + 5);
    v12 = *((_DWORD *)a4 + 10);
    if (v10)
    {
      v13 = 0;
      if (v10 - 512 > 0xFE00 || (v10 & 1) != 0)
        goto LABEL_36;
    }
    if (v11)
    {
      if (v11 < 2)
        goto LABEL_35;
    }
    else
    {
      v11 = 2;
    }
    if (*(_OWORD *)(a4 + 3) != 0)
      v7 = (MPOOL *)a4[4];
    if (a4[3])
      v8 = (uint64_t (*)(unsigned __int8 **, unsigned __int8 **))a4[3];
    if (v12)
    {
      if (v12 != 4321 && v12 != 1234)
        goto LABEL_35;
      v33 = a5;
      v34 = *((_DWORD *)a4 + 2);
    }
    else
    {
      v33 = a5;
      v34 = *((_DWORD *)a4 + 2);
      v12 = 1234;
    }
  }
  else
  {
    v33 = a5;
    v34 = 0;
    v9 = 0;
    v10 = 0;
    v12 = 1234;
    v11 = 2;
  }
  v14 = (MPOOL **)malloc_type_calloc(1uLL, 0x280uLL, 0x10B004045B545B8uLL);
  if (!v14)
  {
    v20 = *__error();
LABEL_82:
    v16 = 0;
    *__error() = v20;
    return v16;
  }
  v13 = v14;
  *((_DWORD *)v14 + 128) = -1;
  *((_DWORD *)v14 + 132) = v12;
  *((_DWORD *)v14 + 133) = 0;
  v14[68] = (MPOOL *)v8;
  v14[69] = v7;
  *((_DWORD *)v14 + 144) = -1;
  v15 = (MPOOL *)malloc_type_calloc(1uLL, 0x48uLL, 0x10800406ECF7772uLL);
  v13[1] = v15;
  if (!v15)
    goto LABEL_76;
  v16 = v15;
  if (*((_DWORD *)v13 + 132) != 1234)
    *((_DWORD *)v13 + 159) |= 8u;
  v15->lqh.tqh_last = (_bkt **)__bt_close;
  v15->hqh[0].tqh_first = (_bkt *)__bt_delete;
  v15->hqh[2].tqh_last = (_bkt **)v13;
  v15->hqh[3].tqh_first = (_bkt *)__bt_fd;
  v15->hqh[0].tqh_last = (_bkt **)__bt_get;
  v15->hqh[1].tqh_first = (_bkt *)__bt_put;
  v15->hqh[1].tqh_last = (_bkt **)__bt_seq;
  v15->hqh[2].tqh_first = (_bkt *)__bt_sync;
  v17 = a2 & 3;
  LODWORD(v15->lqh.tqh_first) = 0;
  if (!a1)
  {
    if (v17 == 2)
    {
      if (issetugid())
        v21 = 0;
      else
        v21 = getenv("TMPDIR");
      v36 = 0;
      v22 = "/tmp";
      if (v21)
        v22 = v21;
      if (snprintf(__str, 0x400uLL, "%s/bt.XXXXXXXXXX", v22) < 0x400)
      {
        v37 = -1;
        sigprocmask(1, &v37, &v36);
        v23 = mkstemp(__str);
        if (v23 != -1)
        {
          v24 = v23;
          unlink(__str);
          sigprocmask(3, &v36, 0);
          *((_DWORD *)v13 + 128) = v24;
          *((_DWORD *)v13 + 159) |= 1u;
          goto LABEL_19;
        }
        sigprocmask(3, &v36, 0);
        *((_DWORD *)v13 + 128) = -1;
      }
      else
      {
        *__error() = 63;
        *((_DWORD *)v13 + 128) = -1;
      }
LABEL_76:
      v20 = *__error();
      goto LABEL_77;
    }
LABEL_36:
    *__error() = 22;
    v20 = *__error();
    if (!v13)
      goto LABEL_82;
LABEL_77:
    v31 = v13[1];
    if (v31)
      free(v31);
    if (*((_DWORD *)v13 + 128) != -1)
      close_NOCANCEL();
    free(v13);
    goto LABEL_82;
  }
  if (v17 != 2)
  {
    if ((a2 & 3) != 0)
      goto LABEL_36;
    *((_DWORD *)v13 + 159) |= 0x10u;
  }
  v18 = open_NOCANCEL();
  *((_DWORD *)v13 + 128) = v18;
  if (v18 < 0)
    goto LABEL_76;
LABEL_19:
  if (fcntl_NOCANCEL() == -1 || fstat(*((_DWORD *)v13 + 128), &v35))
    goto LABEL_76;
  if (v35.st_size)
  {
    NOCANCEL = read_NOCANCEL();
    if ((NOCANCEL & 0x8000000000000000) == 0)
    {
      if (NOCANCEL == 24)
        *((_DWORD *)v13 + 159) |= 8u;
      *__error() = 79;
    }
    goto LABEL_76;
  }
  if (!v10)
  {
    st_blksize = v35.st_blksize;
    if (v35.st_blksize <= 0x200u)
      st_blksize = 512;
    if (st_blksize >= 0x10000)
      v10 = 0x10000;
    else
      v10 = st_blksize;
  }
  v26 = *((_DWORD *)v13 + 159);
  if (!v9)
    v26 |= 0x20u;
  *((_DWORD *)v13 + 129) = 0;
  *((_DWORD *)v13 + 154) = 0;
  *((_DWORD *)v13 + 159) = v26 | 2;
  *((_DWORD *)v13 + 130) = v10;
  if (((v10 - 1) & v34) != 0)
    v27 = ((v10 - 1) | v34) + 1;
  else
    v27 = v34;
  if (!v34)
    v27 = 0;
  if (v27 <= 5 * v10)
    v27 = 5 * v10;
  v28 = v10 - 1 + v27;
  v29 = (unsigned __int16)(((unint64_t)v10 - 20) / v11 - 14);
  if (v29 <= 0x1E)
    LOWORD(v29) = 30;
  *((_WORD *)v13 + 262) = v29;
  v30 = mpool_open(0, *((_DWORD *)v13 + 128), v10, v28 / v10);
  *v13 = v30;
  if (!v30)
    goto LABEL_76;
  if ((*((_BYTE *)v13 + 636) & 1) == 0)
    mpool_filter(v30, (void (__cdecl *)(void *, pgno_t, void *))__bt_pgin, (void (__cdecl *)(void *, pgno_t, void *))__bt_pgout, v13);
  if (nroot((uint64_t)v13) == -1)
    goto LABEL_76;
  if ((v33 & 0x20000000) == 0)
  {
    if ((v33 & 0x40000000) == 0)
      goto LABEL_73;
LABEL_85:
    *((_DWORD *)v13 + 159) |= 0x8000u;
    if ((v33 & 0x80000000) == 0)
      return v16;
LABEL_86:
    *((_DWORD *)v13 + 159) |= 0x10000u;
    return v16;
  }
  *((_DWORD *)v13 + 159) |= 0x4000u;
  if ((v33 & 0x40000000) != 0)
    goto LABEL_85;
LABEL_73:
  if (v33 < 0)
    goto LABEL_86;
  return v16;
}

uint64_t __bt_fd(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = *(void **)(v1 + 32);
  if (v2)
  {
    mpool_put(*(MPOOL **)v1, v2, 0);
    *(_QWORD *)(v1 + 32) = 0;
  }
  if ((*(_BYTE *)(v1 + 636) & 1) == 0)
    return *(unsigned int *)(v1 + 512);
  *__error() = 2;
  return 0xFFFFFFFFLL;
}

uint64_t nroot(uint64_t a1)
{
  void *v2;
  void *v3;
  MPOOL *v4;
  unsigned int v5;
  uint64_t result;
  void *v7;
  void *v8;
  _WORD *v9;
  pgno_t v10;

  v2 = mpool_get(*(MPOOL **)a1, 0, 0);
  if (v2)
  {
    v3 = v2;
    v4 = *(MPOOL **)a1;
    v5 = 0;
LABEL_3:
    mpool_put(v4, v3, v5);
    return 0;
  }
  v10 = 0;
  if (*__error() != 22)
    return 0xFFFFFFFFLL;
  *__error() = 0;
  v7 = mpool_new(*(MPOOL **)a1, &v10);
  if (!v7)
    return 0xFFFFFFFFLL;
  v8 = v7;
  v9 = mpool_new(*(MPOOL **)a1, &v10);
  result = 0xFFFFFFFFLL;
  if (v9 && v10 == 1)
  {
    v9[8] = 20;
    v9[9] = *(_DWORD *)(a1 + 520);
    *(_OWORD *)v9 = xmmword_18A0E57F0;
    _platform_bzero();
    mpool_put(*(MPOOL **)a1, v8, 1u);
    v4 = *(MPOOL **)a1;
    v3 = v9;
    v5 = 1;
    goto LABEL_3;
  }
  return result;
}

uint64_t __ovfl_get(uint64_t a1, pgno_t *a2, size_t *a3, void **a4, size_t *a5)
{
  size_t v6;
  pgno_t v7;
  char *v8;
  char *v11;
  uint64_t v12;
  pgno_t *v13;
  pgno_t *v14;
  unint64_t v15;
  unint64_t v16;

  v7 = *a2;
  v6 = a2[1];
  *a3 = v6;
  v8 = (char *)*a4;
  if (*a5 < v6)
  {
    v11 = (char *)reallocf(*a4, v6);
    *a4 = v11;
    if (!v11)
      return 0xFFFFFFFFLL;
    v8 = v11;
    *a5 = v6;
  }
  v12 = *(unsigned int *)(a1 + 520);
  v13 = (pgno_t *)mpool_get(*(MPOOL **)a1, v7, 0);
  if (!v13)
    return 0xFFFFFFFFLL;
  v14 = v13;
  v15 = v12 - 20;
  while (1)
  {
    v16 = v15 >= v6 ? v6 : v15;
    _platform_memmove();
    mpool_put(*(MPOOL **)a1, v14, 0);
    LODWORD(v6) = v6 - v16;
    if (!(_DWORD)v6)
      break;
    v8 += v16;
    v14 = (pgno_t *)mpool_get(*(MPOOL **)a1, v14[2], 0);
    if (!v14)
      return 0xFFFFFFFFLL;
  }
  return 0;
}

uint64_t __ovfl_put(uint64_t a1, uint64_t *a2, pgno_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _DWORD *v8;
  _DWORD *v9;
  unint64_t v10;
  _DWORD *v11;
  pgno_t v12;
  unsigned int v13;
  pgno_t v15;

  v15 = 0;
  v5 = *(unsigned int *)(a1 + 520);
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v8 = __bt_new(a1, &v15);
  if (!v8)
    return 0xFFFFFFFFLL;
  v9 = 0;
  v10 = v5 - 20;
  while (1)
  {
    v11 = v8;
    v12 = v15;
    v8[1] = 0;
    v8[2] = 0;
    *v8 = v12;
    *(_QWORD *)(v8 + 3) = 4;
    v13 = v7;
    if (v7 >= v10)
      v7 = v10;
    _platform_memmove();
    if (v9)
    {
      v9[2] = v12;
      mpool_put(*(MPOOL **)a1, v9, 1u);
    }
    else
    {
      *a3 = v12;
    }
    v7 = v13 - v7;
    if (!v7)
      break;
    v6 += v10;
    v8 = __bt_new(a1, &v15);
    v9 = v11;
    if (!v8)
      return 0xFFFFFFFFLL;
  }
  mpool_put(*(MPOOL **)a1, v11, 1u);
  return 0;
}

uint64_t __ovfl_delete(uint64_t a1, pgno_t *a2)
{
  unint64_t v3;
  pgno_t *v4;
  uint64_t v5;
  unint64_t v6;
  pgno_t v7;
  unsigned int v8;
  int v9;
  _DWORD *v10;
  BOOL v11;

  v3 = a2[1];
  v4 = (pgno_t *)mpool_get(*(MPOOL **)a1, *a2, 0);
  if (!v4)
    return 0xFFFFFFFFLL;
  if ((v4[3] & 0x20) != 0)
  {
    mpool_put(*(MPOOL **)a1, v4, 0);
  }
  else
  {
    v5 = *(unsigned int *)(a1 + 520);
    v6 = v5 - 20;
    v7 = v4[2];
    __bt_free(a1, v4);
    if (v5 - 20 < v3)
    {
      v8 = v3 - v5 + 20;
      v9 = 20 - v5;
      while (1)
      {
        v10 = mpool_get(*(MPOOL **)a1, v7, 0);
        if (!v10)
          break;
        v7 = v10[2];
        __bt_free(a1, v10);
        v11 = v6 >= v8;
        v8 += v9;
        if (v11)
          return 0;
      }
      return 0xFFFFFFFFLL;
    }
  }
  return 0;
}

uint64_t __bt_free(uint64_t a1, _DWORD *a2)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 516);
  a2[1] = 0;
  a2[2] = v2;
  *(_DWORD *)(a1 + 516) = *a2;
  *(_DWORD *)(a1 + 636) |= 2u;
  return mpool_put(*(MPOOL **)a1, a2, 1u);
}

_DWORD *__bt_new(uint64_t a1, pgno_t *a2)
{
  pgno_t v4;
  _DWORD *result;

  v4 = *(_DWORD *)(a1 + 516);
  if (!v4)
    return mpool_new(*(MPOOL **)a1, a2);
  result = mpool_get(*(MPOOL **)a1, v4, 0);
  if (!result)
    return mpool_new(*(MPOOL **)a1, a2);
  *a2 = *(_DWORD *)(a1 + 516);
  *(_DWORD *)(a1 + 516) = result[2];
  *(_DWORD *)(a1 + 636) |= 2u;
  return result;
}

uint64_t __bt_put(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int *v13;
  int v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  pgno_t *v18;
  pgno_t *v19;
  unsigned int v20;
  unsigned __int16 *v21;
  void *v22;
  pgno_t **v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int16 v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned __int16 v34;
  char *v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  _DWORD v43[2];
  _DWORD v44[2];

  v41 = 0;
  v42 = 0;
  v39 = 0;
  v40 = 0;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(void **)(v7 + 32);
  if (v8)
  {
    mpool_put(*(MPOOL **)v7, v8, 0);
    *(_QWORD *)(v7 + 32) = 0;
  }
  v38 = 0;
  if ((*(_BYTE *)(v7 + 636) & 0x10) != 0)
  {
    v13 = __error();
    v14 = 1;
LABEL_13:
    *v13 = v14;
    return 0xFFFFFFFFLL;
  }
  if (a4 && a4 != 8 && (a4 != 1 || (*(_BYTE *)(v7 + 68) & 0xF) != 8))
  {
    v13 = __error();
    v14 = 22;
    goto LABEL_13;
  }
  v9 = a2[1];
  v10 = a3[1];
  v11 = *(unsigned __int16 *)(v7 + 524);
  if (v10 + v9 <= v11)
  {
    LOBYTE(v12) = 0;
  }
  else
  {
    v12 = 0;
    if (v9 > v11)
      goto LABEL_17;
    while (1)
    {
      if (v10 + v9 > v11)
      {
        result = __ovfl_put(v7, a3, (pgno_t *)&v38 + 1);
        if ((_DWORD)result == -1)
          return result;
        v10 = 8;
        v39 = v44;
        v40 = 8;
        v17 = a3[1];
        v44[0] = HIDWORD(v38);
        v44[1] = v17;
        v12 |= 1u;
        v9 = a2[1];
        v11 = *(unsigned __int16 *)(v7 + 524);
        a3 = (uint64_t *)&v39;
      }
      if (v10 + v9 <= v11)
        break;
LABEL_17:
      result = __ovfl_put(v7, a2, (pgno_t *)&v38 + 1);
      if ((_DWORD)result == -1)
        return result;
      v9 = 8;
      v41 = v43;
      v42 = 8;
      v16 = a2[1];
      v43[0] = HIDWORD(v38);
      v43[1] = v16;
      v12 |= 2u;
      v10 = a3[1];
      v11 = *(unsigned __int16 *)(v7 + 524);
      a2 = (uint64_t *)&v41;
    }
  }
  if (a4 == 1)
  {
    v18 = (pgno_t *)mpool_get(*(MPOOL **)v7, *(_DWORD *)(v7 + 40), 0);
    if (v18)
    {
      v19 = v18;
      v20 = *(unsigned __int16 *)(v7 + 44);
      goto LABEL_26;
    }
    return 0xFFFFFFFFLL;
  }
  if (!*(_DWORD *)(v7 + 532))
    goto LABEL_45;
  v21 = (unsigned __int16 *)mpool_get(*(MPOOL **)v7, *(_DWORD *)(v7 + 536), 0);
  if (!v21)
  {
    *(_DWORD *)(v7 + 532) = 0;
    goto LABEL_45;
  }
  v22 = v21;
  *(_QWORD *)(v7 + 16) = v21;
  v23 = (pgno_t **)(v7 + 16);
  v24 = *(unsigned __int16 *)(v7 + 540);
  *(_WORD *)(v7 + 24) = v24;
  v25 = v21[8];
  if (v21[9] - v25 < ((*((_DWORD *)a2 + 2) + *((_DWORD *)a3 + 2) + 12) & 0xFFFFFFFC | 2uLL))
    goto LABEL_44;
  if (*(_DWORD *)(v7 + 532) == 2)
  {
    if (!*((_DWORD *)v21 + 2) && ((unint64_t)(v25 - 20) >> 1) - 1 == v24)
    {
      v26 = __bt_cmp(v7, (uint64_t)a2, (uint64_t *)(v7 + 16));
      if ((v26 & 0x80000000) == 0)
      {
        v27 = *(_WORD *)(v7 + 24);
        if (v26)
        {
          *(_WORD *)(v7 + 24) = ++v27;
          v26 = 1;
        }
        goto LABEL_71;
      }
    }
    goto LABEL_44;
  }
  v28 = !*((_DWORD *)v21 + 1) && (_DWORD)v24 == 0;
  if (!v28 || (v26 = __bt_cmp(v7, (uint64_t)a2, (uint64_t *)(v7 + 16)), v26 >= 1))
  {
LABEL_44:
    *(_DWORD *)(v7 + 532) = 0;
    mpool_put(*(MPOOL **)v7, v22, 0);
LABEL_45:
    v23 = __bt_search(v7, (uint64_t)a2, &v38);
    if (!v23)
      return 0xFFFFFFFFLL;
    goto LABEL_46;
  }
  v27 = 0;
LABEL_71:
  *(_WORD *)(v7 + 540) = v27;
  LODWORD(v38) = v26 == 0;
LABEL_46:
  v19 = *v23;
  v20 = *((unsigned __int16 *)v23 + 4);
  if (a4 == 8)
  {
    if ((_DWORD)v38)
    {
      mpool_put(*(MPOOL **)v7, *v23, 0);
      return 1;
    }
    goto LABEL_51;
  }
  if (!(_DWORD)v38 || (*(_BYTE *)(v7 + 636) & 0x20) == 0)
    goto LABEL_51;
LABEL_26:
  if (__bt_dleaf(v7, (uint64_t)a2, v19, v20) == -1)
  {
    mpool_put(*(MPOOL **)v7, v19, 0);
    return 0xFFFFFFFFLL;
  }
LABEL_51:
  v29 = a2[1];
  v30 = a3[1];
  v31 = ((_DWORD)v29 + (_DWORD)v30 + 12) & 0xFFFFFFFC;
  v32 = *((unsigned __int16 *)v19 + 9);
  v33 = *((unsigned __int16 *)v19 + 8);
  if ((v32 - v33) >= (v31 | 2uLL))
  {
    if ((unsigned __int16)((v33 + 131052) >> 1) > v20)
    {
      _platform_memmove();
      LOWORD(v33) = *((_WORD *)v19 + 8);
      LOWORD(v32) = *((_WORD *)v19 + 9);
      v29 = a2[1];
      v30 = a3[1];
    }
    *((_WORD *)v19 + 8) = v33 + 2;
    v34 = v32 - v31;
    *((_WORD *)v19 + 9) = v34;
    *((_WORD *)v19 + v20 + 10) = v34;
    v35 = (char *)v19 + v34;
    *(_DWORD *)v35 = v29;
    *((_DWORD *)v35 + 1) = v30;
    v35[8] = v12;
    _platform_memmove();
    _platform_memmove();
    if ((*(_BYTE *)(v7 + 68) & 9) == 8 && *(_DWORD *)(v7 + 40) == *v19)
    {
      v36 = *(unsigned __int16 *)(v7 + 44);
      if (v36 >= v20)
        *(_WORD *)(v7 + 44) = v36 + 1;
    }
    if (*(_DWORD *)(v7 + 532))
      goto LABEL_68;
    if (v19[2])
    {
      if (v19[1] || v20)
        goto LABEL_68;
      v37 = 1;
    }
    else
    {
      if ((((unint64_t)*((unsigned __int16 *)v19 + 8) - 20) >> 1) - 1 != v20)
      {
LABEL_68:
        mpool_put(*(MPOOL **)v7, v19, 1u);
LABEL_69:
        result = 0;
        *(_DWORD *)(v7 + 636) |= 4u;
        return result;
      }
      v37 = 2;
    }
    *(_DWORD *)(v7 + 532) = v37;
    *(_WORD *)(v7 + 540) = v20;
    *(_DWORD *)(v7 + 536) = *v19;
    goto LABEL_68;
  }
  result = __bt_split(v7, v19, (uint64_t)a2, (uint64_t)a3, v12, (v29 + v30 + 12) & 0xFFFC, v20);
  if (!(_DWORD)result)
    goto LABEL_69;
  return result;
}

pgno_t **__bt_search(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  pgno_t *v6;
  pgno_t *v7;
  pgno_t **v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  pgno_t v15;
  pgno_t v16;
  int v17;
  MPOOL *v18;
  pgno_t v19;
  unsigned __int16 *v20;
  int v21;
  void *v23[2];

  *(_QWORD *)(a1 + 472) = a1 + 72;
  v6 = (pgno_t *)mpool_get(*(MPOOL **)a1, 1u, 0);
  if (!v6)
    return 0;
  v7 = v6;
  v8 = (pgno_t **)(a1 + 16);
  while (1)
  {
    *v8 = v7;
    v9 = *((unsigned __int16 *)v7 + 8) + 131052;
    if ((v9 & 0x1FFFE) == 0)
      break;
    v10 = 0;
    while (1)
    {
      v11 = ((v9 >> 2) & 0x7FFF) + v10;
      *(_WORD *)(a1 + 24) = ((v9 >> 2) & 0x7FFF) + v10;
      v12 = __bt_cmp(a1, a2, (uint64_t *)(a1 + 16));
      if (!v12)
        break;
      v13 = v9 >> 1;
      if (v12 > 0)
      {
        v10 = v11 + 1;
        LOWORD(v13) = (v9 >> 1) - 1;
      }
      v9 = (unsigned __int16)v13;
      if ((v13 & 0xFFFE) == 0)
        goto LABEL_11;
    }
    if ((v7[3] & 2) != 0)
      goto LABEL_31;
LABEL_16:
    v14 = *(_QWORD *)(a1 + 472);
    *(_DWORD *)v14 = *v7;
    *(_WORD *)(v14 + 4) = v11;
    *(_QWORD *)(a1 + 472) = v14 + 8;
    v15 = *(pgno_t *)((char *)v7 + *((unsigned __int16 *)v7 + (unsigned __int16)v11 + 10) + 4);
    mpool_put(*(MPOOL **)a1, v7, 0);
    v7 = (pgno_t *)mpool_get(*(MPOOL **)a1, v15, 0);
    if (!v7)
      return 0;
  }
  LOWORD(v10) = 0;
LABEL_11:
  if ((v7[3] & 2) == 0)
  {
    if ((_WORD)v10)
      LOWORD(v11) = v10 - 1;
    else
      LOWORD(v11) = 0;
    goto LABEL_16;
  }
  if ((*(_BYTE *)(a1 + 636) & 0x20) != 0)
  {
LABEL_25:
    *a3 = 0;
    *(_WORD *)(a1 + 24) = v10;
    return v8;
  }
  if ((_WORD)v10
    || (v19 = v7[1]) == 0
    || (v20 = (unsigned __int16 *)mpool_get(*(MPOOL **)a1, v19, 0), (v23[0] = v20) == 0))
  {
LABEL_20:
    if (((unint64_t)*((unsigned __int16 *)v7 + 8) - 20) >> 1 == (unsigned __int16)v10)
    {
      v16 = v7[2];
      if (v16)
      {
        v23[0] = mpool_get(*(MPOOL **)a1, v16, 0);
        if (v23[0])
        {
          v23[1] = 0;
          v17 = __bt_cmp(a1, a2, (uint64_t *)v23);
          v18 = *(MPOOL **)a1;
          if (!v17)
            goto LABEL_30;
          mpool_put(v18, v23[0], 0);
        }
      }
    }
    goto LABEL_25;
  }
  v23[1] = 0;
  LOWORD(v23[1]) = ((v20[8] + 131052) >> 1) - 1;
  v21 = __bt_cmp(a1, a2, (uint64_t *)v23);
  v18 = *(MPOOL **)a1;
  if (v21)
  {
    mpool_put(v18, v23[0], 0);
    goto LABEL_20;
  }
LABEL_30:
  mpool_put(v18, v7, 0);
  *(_OWORD *)v8 = *(_OWORD *)v23;
LABEL_31:
  *a3 = 1;
  return v8;
}

uint64_t __bt_seq(uint64_t a1, _QWORD *a2, _QWORD *a3, unsigned int a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _WORD *v10;
  _WORD *v11;
  pgno_t v12;
  _WORD *v13;
  uint64_t v14;
  pgno_t v15;
  pgno_t *v16;
  pgno_t *v17;
  char v18;
  unsigned __int16 v19;
  pgno_t v20;
  pgno_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int16 v25;
  void *v26;
  char v27;
  unsigned int v29;
  unsigned int v30;
  pgno_t v31;
  pgno_t *v32;
  void *v33;
  uint64_t v34;
  int v35;

  v33 = 0;
  v34 = 0;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(void **)(v7 + 32);
  if (v8)
  {
    mpool_put(*(MPOOL **)v7, v8, 0);
    *(_QWORD *)(v7 + 32) = 0;
  }
  if (a4 > 9)
    goto LABEL_20;
  if (((1 << a4) & 0x4A) != 0)
  {
LABEL_7:
    v9 = 0;
    v35 = 0;
    switch(a4)
    {
      case 1u:
        if (*a2 && a2[1])
        {
          v22 = v7;
          v23 = (uint64_t)a2;
          goto LABEL_37;
        }
        *__error() = 22;
        goto LABEL_39;
      case 3u:
      case 7u:
        v10 = mpool_get(*(MPOOL **)v7, 1u, 0);
        if (!v10)
          goto LABEL_39;
        v11 = v10;
        while (2)
        {
          if ((v11[8] & 0xFFFE) == 0x14)
            goto LABEL_34;
          if ((v11[6] & 0x12) == 0)
          {
            v12 = *(_DWORD *)((char *)v11 + (unsigned __int16)v11[10] + 4);
            mpool_put(*(MPOOL **)v7, v11, 0);
            v11 = mpool_get(*(MPOOL **)v7, v12, 0);
            if (!v11)
              goto LABEL_39;
            continue;
          }
          break;
        }
        v9 = 0;
        v33 = v11;
        LOWORD(v34) = 0;
        goto LABEL_40;
      case 6u:
      case 9u:
        v13 = mpool_get(*(MPOOL **)v7, 1u, 0);
        if (!v13)
          goto LABEL_39;
        v11 = v13;
        break;
      default:
        goto LABEL_40;
    }
    while (1)
    {
      v14 = (unsigned __int16)v11[8];
      if ((unint64_t)(v14 - 20) <= 1)
      {
LABEL_34:
        mpool_put(*(MPOOL **)v7, v11, 0);
        goto LABEL_35;
      }
      if ((v11[6] & 0x12) != 0)
        break;
      v15 = *(_DWORD *)((char *)v11 + (unsigned __int16)v11[((unint64_t)(v14 - 20) >> 1) + 9] + 4);
      mpool_put(*(MPOOL **)v7, v11, 0);
      v11 = mpool_get(*(MPOOL **)v7, v15, 0);
      if (!v11)
        goto LABEL_39;
    }
    v9 = 0;
    v33 = v11;
    v29 = ((v14 + 131052) >> 1) - 1;
    goto LABEL_57;
  }
  if (((1 << a4) & 0x280) == 0)
  {
LABEL_20:
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  if ((*(_BYTE *)(v7 + 68) & 8) == 0)
    goto LABEL_7;
  if ((*(_BYTE *)(v7 + 68) & 1) != 0)
  {
    v35 = 0;
    v23 = v7 + 48;
    v22 = v7;
LABEL_37:
    v9 = __bt_first(v22, v23, (uint64_t)&v33, &v35);
    goto LABEL_40;
  }
  v16 = (pgno_t *)mpool_get(*(MPOOL **)v7, *(_DWORD *)(v7 + 40), 0);
  if (!v16)
    goto LABEL_39;
  v17 = v16;
  if (a4 == 9)
  {
    v18 = *(_BYTE *)(v7 + 68);
    if ((v18 & 4) == 0)
    {
      LOWORD(v30) = *(_WORD *)(v7 + 44);
      if (!(_WORD)v30)
      {
        v31 = v16[1];
        mpool_put(*(MPOOL **)v7, v16, 0);
        if (!v31)
          goto LABEL_35;
        v32 = (pgno_t *)mpool_get(*(MPOOL **)v7, v31, 0);
        if (!v32)
          goto LABEL_39;
        v17 = v32;
        v30 = (*((unsigned __int16 *)v32 + 8) + 131052) >> 1;
      }
      v19 = v30 - 1;
      goto LABEL_55;
    }
  }
  else
  {
    if (a4 != 7)
    {
LABEL_30:
      v19 = 0;
      goto LABEL_55;
    }
    v18 = *(_BYTE *)(v7 + 68);
    if ((v18 & 2) == 0)
    {
      v19 = *(_WORD *)(v7 + 44) + 1;
      if (((unint64_t)*((unsigned __int16 *)v16 + 8) - 20) >> 1 != v19)
      {
LABEL_55:
        v9 = 0;
        v33 = v17;
        LOWORD(v34) = v19;
        goto LABEL_40;
      }
      v20 = v16[2];
      mpool_put(*(MPOOL **)v7, v16, 0);
      if (v20)
      {
        v21 = (pgno_t *)mpool_get(*(MPOOL **)v7, v20, 0);
        if (v21)
        {
          v17 = v21;
          goto LABEL_30;
        }
LABEL_39:
        v9 = 0xFFFFFFFFLL;
        goto LABEL_40;
      }
LABEL_35:
      v9 = 1;
      goto LABEL_40;
    }
  }
  v9 = 0;
  *(_BYTE *)(v7 + 68) = v18 & 0xF9;
  v33 = v16;
  LOWORD(v29) = *(_WORD *)(v7 + 44);
LABEL_57:
  LOWORD(v34) = v29;
LABEL_40:
  if (!(_DWORD)v9)
  {
    v24 = *(_DWORD *)v33;
    v25 = v34;
    v26 = *(void **)(v7 + 48);
    if (v26)
    {
      free(v26);
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = 0;
    }
    v27 = *(_BYTE *)(v7 + 68) & 0xF0;
    *(_DWORD *)(v7 + 40) = v24;
    *(_WORD *)(v7 + 44) = v25;
    *(_BYTE *)(v7 + 68) = v27 | 8;
    v9 = __bt_ret(v7, (uint64_t)&v33, a2, v7 + 480, a3, (char **)(v7 + 496), 0);
    if ((*(_BYTE *)(v7 + 637) & 0x40) != 0)
      mpool_put(*(MPOOL **)v7, v33, 0);
    else
      *(_QWORD *)(v7 + 32) = v33;
  }
  return v9;
}

void __bt_setcur(uint64_t a1, int a2, __int16 a3)
{
  void *v6;
  _QWORD *v7;
  char v8;

  v7 = (_QWORD *)(a1 + 48);
  v6 = *(void **)(a1 + 48);
  if (v6)
  {
    free(v6);
    *v7 = 0;
    v7[1] = 0;
  }
  v8 = *(_BYTE *)(a1 + 68) & 0xF0;
  *(_DWORD *)(a1 + 40) = a2;
  *(_WORD *)(a1 + 44) = a3;
  *(_BYTE *)(a1 + 68) = v8 | 8;
}

uint64_t __bt_first(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  pgno_t **v8;
  pgno_t **v9;
  int *v10;
  pgno_t *v11;
  pgno_t *v12;
  __int16 v13;
  unsigned int v14;
  pgno_t v15;
  pgno_t v16;
  pgno_t *v17;
  uint64_t result;
  pgno_t *v19;
  pgno_t v20;
  pgno_t *v21;
  int v22;
  __int16 v23;

  v8 = __bt_search(a1, a2, a4);
  if (!v8)
    return 1;
  v9 = v8;
  if (!*a4)
  {
    v19 = *v8;
    if (*((unsigned __int16 *)v8 + 4) != ((unint64_t)*((unsigned __int16 *)*v8 + 8) - 20) >> 1)
      goto LABEL_23;
    v20 = v19[2];
    mpool_put(*(MPOOL **)a1, v19, 0);
    if (v20)
    {
      v21 = (pgno_t *)mpool_get(*(MPOOL **)a1, v20, 0);
      if (!v21)
        return 0xFFFFFFFFLL;
      *((_WORD *)v9 + 4) = 0;
      *v9 = v21;
      goto LABEL_23;
    }
    return 1;
  }
  if ((*(_BYTE *)(a1 + 636) & 0x20) != 0)
  {
LABEL_23:
    result = 0;
    *(_OWORD *)a3 = *(_OWORD *)v9;
    return result;
  }
  v10 = (int *)((char *)v8 + 10);
  v11 = *v8;
  v22 = *(_DWORD *)((char *)v8 + 10);
  v23 = *((_WORD *)v8 + 7);
  v12 = *v8;
  while (*v12 == **v9)
  {
    v13 = *((_WORD *)v9 + 4);
    if (!v13)
      goto LABEL_9;
LABEL_7:
    LOWORD(v14) = v13;
LABEL_14:
    *((_WORD *)v9 + 4) = v14 - 1;
    if (__bt_cmp(a1, a2, (uint64_t *)v9))
    {
      v16 = *v12;
LABEL_16:
      if (*v11 != v16)
        mpool_put(*(MPOOL **)a1, v11, 0);
      result = 0;
      *(_QWORD *)a3 = v12;
      *(_WORD *)(a3 + 8) = v13;
      *(_DWORD *)(a3 + 10) = v22;
      *(_WORD *)(a3 + 14) = v23;
      return result;
    }
  }
  mpool_put(*(MPOOL **)a1, v12, 0);
  v12 = *v9;
  v13 = *((_WORD *)v9 + 4);
  v22 = *v10;
  v23 = *((_WORD *)v9 + 7);
  if (v13)
    goto LABEL_7;
LABEL_9:
  v15 = v11[1];
  v16 = *v12;
  if (!v15)
    goto LABEL_16;
  if (*v11 != v16)
  {
    mpool_put(*(MPOOL **)a1, v11, 0);
    v15 = v11[1];
  }
  v17 = (pgno_t *)mpool_get(*(MPOOL **)a1, v15, 0);
  if (v17)
  {
    *v9 = v17;
    v14 = (*((unsigned __int16 *)v17 + 8) + 131052) >> 1;
    v11 = v17;
    goto LABEL_14;
  }
  if (*v11 == *v12)
    mpool_put(*(MPOOL **)a1, v12, 0);
  return 0xFFFFFFFFLL;
}

uint64_t __bt_split(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, char a5, __int16 a6, unsigned __int16 a7)
{
  _DWORD *v11;
  _DWORD *v13;
  unsigned __int16 v14;
  char *v15;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int *v19;
  pgno_t v20;
  _WORD *v21;
  _WORD *v22;
  unsigned __int16 v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t (*v27)(char **, char **);
  BOOL v28;
  unsigned int *v29;
  uint64_t v30;
  int v31;
  int v32;
  int v34;
  unint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  unsigned int v38;
  __int16 v39;
  char *v40;
  uint64_t v41;
  unsigned __int16 *v42;
  char *v43;
  __int16 v44;
  char *v45;
  uint64_t v46;
  unsigned __int16 *v47;
  char *v48;
  char *v49;
  _DWORD *v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  unsigned __int16 *v54;
  unsigned int v55;
  char *v56;
  __int16 v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  unsigned __int16 *v61;
  unsigned int v62;
  _DWORD *v63;
  int v65;
  unsigned __int16 v66;
  void *v67;
  void *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;

  v11 = a2;
  v71 = 0;
  v72 = 0;
  v69 = 0;
  v70 = 0;
  v67 = 0;
  v68 = 0;
  v66 = a7;
  if (*a2 == 1)
  {
    v13 = bt_root(a1, (uint64_t)a2, &v68, &v67, &v66, a6);
    if (!v13)
      return 0xFFFFFFFFLL;
LABEL_5:
    v14 = *((_WORD *)v13 + 9) - a6;
    *((_WORD *)v13 + 9) = v14;
    *((_WORD *)v13 + v66 + 10) = v14;
    v15 = (char *)v13 + v14;
    if ((*(_BYTE *)(a1 + 636) & 0x80) != 0)
    {
      *(_DWORD *)v15 = *(_QWORD *)(a4 + 8);
      v15[4] = a5;
    }
    else
    {
      *(_DWORD *)v15 = *(_QWORD *)(a3 + 8);
      *((_DWORD *)v15 + 1) = *(_QWORD *)(a4 + 8);
      v15[8] = a5;
      _platform_memmove();
    }
    _platform_memmove();
    if (*v11 == 1)
    {
      v16 = (unsigned __int16 *)v67;
      v17 = (unsigned __int16 *)v68;
      if ((*(_BYTE *)(a1 + 636) & 0x80) != 0)
      {
        bt_rroot(a1, (uint64_t)v11, (uint64_t)v68, (uint64_t)v67);
      }
      else if (bt_broot(a1, (uint64_t)v11, v68, (uint64_t)v67) == -1)
      {
LABEL_87:
        mpool_put(*(MPOOL **)a1, v17, 0);
        mpool_put(*(MPOOL **)a1, v16, 0);
        __dbpanic(*(_QWORD **)(a1 + 8));
        return 0xFFFFFFFFLL;
      }
    }
    v18 = *(_QWORD *)(a1 + 472);
    if (v18 == a1 + 72)
    {
LABEL_85:
      mpool_put(*(MPOOL **)a1, v68, 1u);
      mpool_put(*(MPOOL **)a1, v67, 1u);
      return 0;
    }
    v65 = 0;
    v19 = 0;
    while (1)
    {
      v20 = *(_DWORD *)(v18 - 8);
      *(_QWORD *)(a1 + 472) = v18 - 8;
      v16 = (unsigned __int16 *)v67;
      v17 = (unsigned __int16 *)v68;
      v21 = mpool_get(*(MPOOL **)a1, v20, 0);
      if (!v21)
        goto LABEL_87;
      v22 = v21;
      v23 = *(_WORD *)(v18 - 4) + 1;
      v66 = v23;
      v24 = *((_DWORD *)v16 + 3) & 0x1F;
      if (v24 > 7)
      {
        if (v24 != 8 && v24 != 16)
LABEL_89:
          abort_report_np((uint64_t)"%s:%s:%u: illegal rchild->flags & P_TYPE (0x%x)");
        v26 = 8;
      }
      else if (v24 == 1)
      {
        v26 = (*(_DWORD *)((_BYTE *)v16 + v16[10]) & 0xFFFFFFFC) + 12;
      }
      else
      {
        if (v24 != 2)
          goto LABEL_89;
        v19 = (unsigned int *)((char *)v16 + v16[10]);
        v25 = *v19;
        v26 = (v25 & 0xFFFFFFFC) + 12;
        v27 = *(uint64_t (**)(char **, char **))(a1 + 552);
        if (v27 && (v19[2] & 2) == 0 && (!*((_DWORD *)v21 + 1) ? (v28 = v23 >= 2u) : (v28 = 1), v28))
        {
          v29 = (unsigned int *)((char *)v17
                               + *(unsigned __int16 *)((char *)v17 + ((v17[8] - 20) & 0xFFFFFFFFFFFFFFFELL) + 18));
          v30 = *v29;
          v71 = (char *)v29 + 9;
          v72 = v30;
          v69 = (char *)v19 + 9;
          v70 = v25;
          v31 = v27(&v71, &v69);
          if ((v31 & 0xFFFFFFFC) + 12 >= v26)
          {
            v32 = 0;
          }
          else
          {
            v26 = (v31 & 0xFFFFFFFC) + 12;
            v32 = v31;
          }
          v65 = v32;
        }
        else
        {
          v65 = 0;
        }
      }
      v34 = (unsigned __int16)v22[8];
      v35 = (unsigned __int16)v22[9] - v34;
      v36 = v26 + 2;
      if (v35 >= v36)
      {
        if ((unsigned __int16)((v34 + 131052) >> 1) > v23)
        {
          _platform_memmove();
          LOWORD(v34) = v22[8];
        }
        v22[8] = v34 + 2;
      }
      else
      {
        if (*(_DWORD *)v22 == 1)
          v37 = bt_root(a1, (uint64_t)v22, &v68, &v67, &v66, (unsigned __int16)v26);
        else
          v37 = bt_page(a1, (uint64_t)v22, (uint64_t *)&v68, &v67, &v66, (unsigned __int16)v26);
        v11 = v22;
        v22 = v37;
        if (!v37)
          goto LABEL_86;
      }
      v38 = *((_DWORD *)v16 + 3) & 0x1F;
      if (v38 > 7)
      {
        if (v38 == 8)
        {
          v46 = v66;
          if (v66)
          {
            v47 = &v22[v66 + 9];
            v48 = (char *)v22;
          }
          else
          {
            v48 = (char *)v68;
            v47 = (unsigned __int16 *)((char *)v68
                                     + ((*((unsigned __int16 *)v68 + 8) - 20) & 0xFFFFFFFFFFFFFFFELL)
                                     + 18);
          }
          v51 = v17[8] + 131052;
          v52 = (unsigned __int16)(v51 >> 1);
          if ((unsigned __int16)(v51 >> 1))
          {
            v53 = 0;
            v54 = v17 + 10;
            do
            {
              v55 = *v54++;
              v53 += *(_DWORD *)((char *)v17 + v55);
              --v52;
            }
            while (v52);
          }
          else
          {
            v53 = 0;
          }
          v56 = &v48[*v47];
          *(_DWORD *)v56 = v53;
          *((_DWORD *)v56 + 1) = *(_DWORD *)v17;
          v57 = v22[9] - v26;
          v22[9] = v57;
          v22[v46 + 10] = v57;
          v58 = v16[8] + 131052;
          v59 = (unsigned __int16)(v58 >> 1);
          if ((unsigned __int16)(v58 >> 1))
          {
            v60 = 0;
            v61 = v16 + 10;
            do
            {
              v62 = *v61++;
              v60 += *(_DWORD *)((char *)v16 + v62);
              --v59;
            }
            while (v59);
          }
          else
          {
            v60 = 0;
          }
          v63 = (_DWORD *)((char *)v22 + (unsigned __int16)v22[v66 + 10]);
          *v63 = v60;
          v63[1] = *(_DWORD *)v16;
        }
        else
        {
          if (v38 != 16)
            goto LABEL_89;
          v41 = v66;
          if (v66)
          {
            v42 = &v22[v66 + 9];
            v43 = (char *)v22;
          }
          else
          {
            v43 = (char *)v68;
            v42 = (unsigned __int16 *)((char *)v68
                                     + ((*((unsigned __int16 *)v68 + 8) - 20) & 0xFFFFFFFFFFFFFFFELL)
                                     + 18);
          }
          v49 = &v43[*v42];
          *(_DWORD *)v49 = ((unint64_t)v17[8] + 0x1FFFFFFECLL) >> 1;
          *((_DWORD *)v49 + 1) = *(_DWORD *)v17;
          LOWORD(v49) = v22[9] - v26;
          v22[9] = (_WORD)v49;
          v22[v41 + 10] = (_WORD)v49;
          v50 = (_DWORD *)((char *)v22 + (unsigned __int16)v22[v66 + 10]);
          *v50 = ((unint64_t)v16[8] + 0x1FFFFFFECLL) >> 1;
          v50[1] = *(_DWORD *)v16;
        }
      }
      else if (v38 == 1)
      {
        v44 = v22[9] - v26;
        v22[9] = v44;
        v22[v66 + 10] = v44;
        v45 = (char *)v22 + (unsigned __int16)v22[v66 + 10];
        _platform_memmove();
        *((_DWORD *)v45 + 1) = *(_DWORD *)v16;
      }
      else
      {
        if (v38 != 2)
          goto LABEL_89;
        v39 = v22[9] - v26;
        v22[9] = v39;
        v22[v66 + 10] = v39;
        v40 = (char *)v22 + (unsigned __int16)v22[v66 + 10];
        if (v65)
          *(_DWORD *)v40 = v65;
        else
          *(_DWORD *)v40 = *v19;
        *((_DWORD *)v40 + 1) = *(_DWORD *)v16;
        v40[8] = v19[2] & 2;
        _platform_memmove();
        if ((v19[2] & 2) != 0 && bt_preserve((MPOOL **)a1, *(unsigned int *)((char *)v19 + 9)) == -1)
        {
LABEL_86:
          mpool_put(*(MPOOL **)a1, v17, 1u);
          mpool_put(*(MPOOL **)a1, v16, 1u);
          v16 = (unsigned __int16 *)v67;
          v17 = (unsigned __int16 *)v68;
          goto LABEL_87;
        }
      }
      if (v35 >= v36)
      {
        mpool_put(*(MPOOL **)a1, v22, 1u);
        goto LABEL_85;
      }
      if (*v11 == 1)
      {
        if ((*(_BYTE *)(a1 + 636) & 0x80) != 0)
        {
          bt_rroot(a1, (uint64_t)v11, (uint64_t)v68, (uint64_t)v67);
        }
        else if (bt_broot(a1, (uint64_t)v11, v68, (uint64_t)v67) == -1)
        {
          goto LABEL_86;
        }
      }
      mpool_put(*(MPOOL **)a1, v17, 1u);
      mpool_put(*(MPOOL **)a1, v16, 1u);
      v18 = *(_QWORD *)(a1 + 472);
      if (v18 == a1 + 72)
        goto LABEL_85;
    }
  }
  v13 = bt_page(a1, (uint64_t)a2, (uint64_t *)&v68, &v67, &v66, a6);
  if (v13)
    goto LABEL_5;
  return 0xFFFFFFFFLL;
}

_DWORD *bt_root(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _WORD *a5, unsigned int a6)
{
  _DWORD *result;
  _DWORD *v13;
  _DWORD *v14;
  pgno_t v15;
  int v16;
  pgno_t v17[2];

  *(_QWORD *)v17 = 0;
  result = __bt_new(a1, &v17[1]);
  if (result)
  {
    v13 = result;
    result = __bt_new(a1, v17);
    if (result)
    {
      v14 = result;
      *v13 = v17[1];
      v15 = v17[0];
      *result = v17[0];
      result[1] = *v13;
      v13[1] = 0;
      v13[2] = v15;
      *((_WORD *)result + 8) = 20;
      *((_WORD *)v13 + 8) = 20;
      LOWORD(v15) = *(_WORD *)(a1 + 520);
      *((_WORD *)result + 9) = v15;
      *((_WORD *)v13 + 9) = v15;
      v16 = *(_DWORD *)(a2 + 12) & 0x1F;
      result[2] = 0;
      result[3] = v16;
      v13[3] = v16;
      result = bt_psplit(a1, a2, v13, result, a5, a6);
      *a3 = v13;
      *a4 = v14;
    }
  }
  return result;
}

_DWORD *bt_page(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, unsigned __int16 *a5, unsigned int a6)
{
  _DWORD *v12;
  _DWORD *v13;
  pgno_t v14;
  size_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  _DWORD *v19;
  pgno_t v20;
  _DWORD *v21;
  _DWORD *v22;
  pgno_t v24;

  v24 = 0;
  v12 = __bt_new(a1, &v24);
  v13 = v12;
  if (!v12)
    return v13;
  v14 = v24;
  *v12 = v24;
  *((_WORD *)v12 + 8) = 20;
  v15 = *(unsigned int *)(a1 + 520);
  *((_WORD *)v12 + 9) = v15;
  v16 = *(_DWORD *)(a2 + 8);
  v17 = *(_DWORD *)(a2 + 12);
  v12[1] = *(_DWORD *)a2;
  v12[2] = v16;
  v12[3] = v17 & 0x1F;
  if (!*(_DWORD *)(a2 + 8) && *a5 == ((unint64_t)*(unsigned __int16 *)(a2 + 16) - 20) >> 1)
  {
    *(_DWORD *)(a2 + 8) = v14;
    *((_WORD *)v12 + 8) = 22;
    *a5 = 0;
    *a3 = a2;
    *a4 = v12;
    return v13;
  }
  v18 = malloc_type_calloc(1uLL, v15, 0x2583D18FuLL);
  if (!v18)
  {
    mpool_put(*(MPOOL **)a1, v13, 0);
    return 0;
  }
  v19 = v18;
  *v18 = *(_QWORD *)a2;
  *((_DWORD *)v18 + 2) = *v13;
  *((_WORD *)v18 + 8) = 20;
  *((_WORD *)v18 + 9) = *(_DWORD *)(a1 + 520);
  v20 = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v18 + 3) = *(_DWORD *)(a2 + 12) & 0x1F;
  if (v20)
  {
    v21 = mpool_get(*(MPOOL **)a1, v20, 0);
    if (v21)
    {
      v21[1] = *v13;
      mpool_put(*(MPOOL **)a1, v21, 1u);
      goto LABEL_9;
    }
    free(v19);
    return 0;
  }
LABEL_9:
  v22 = bt_psplit(a1, a2, v19, v13, a5, a6);
  _platform_memmove();
  if (v22 == v19)
    v22 = (_DWORD *)a2;
  free(v19);
  *a3 = a2;
  *a4 = v13;
  return v22;
}

uint64_t bt_rroot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  _DWORD *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 *v10;
  unsigned int v11;
  unsigned __int16 v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int16 *v17;
  unsigned int v18;
  _DWORD *v19;

  v4 = *(_DWORD *)(a1 + 520);
  *(_WORD *)(a2 + 18) = v4 - 8;
  *(_WORD *)(a2 + 20) = v4 - 8;
  v5 = (_DWORD *)(a2 + (unsigned __int16)(v4 - 8));
  v6 = *(unsigned __int16 *)(a3 + 16);
  if ((*(_BYTE *)(a3 + 12) & 0x10) != 0)
  {
    v9 = (unint64_t)(v6 + 0x1FFFFFFECLL) >> 1;
  }
  else
  {
    v7 = v6 + 131052;
    v8 = (unsigned __int16)(v7 >> 1);
    if ((unsigned __int16)(v7 >> 1))
    {
      LODWORD(v9) = 0;
      v10 = (unsigned __int16 *)(a3 + 20);
      do
      {
        v11 = *v10++;
        LODWORD(v9) = *(_DWORD *)(a3 + v11) + v9;
        --v8;
      }
      while (v8);
    }
    else
    {
      LODWORD(v9) = 0;
    }
  }
  *v5 = v9;
  v5[1] = *(_DWORD *)a3;
  v12 = v4 - 16;
  *(_WORD *)(a2 + 18) = v12;
  *(_WORD *)(a2 + 22) = v12;
  v13 = *(unsigned __int16 *)(a4 + 16);
  if ((*(_BYTE *)(a4 + 12) & 0x10) != 0)
  {
    v16 = (unint64_t)(v13 + 0x1FFFFFFECLL) >> 1;
  }
  else
  {
    v14 = v13 + 131052;
    v15 = (unsigned __int16)(v14 >> 1);
    if ((unsigned __int16)(v14 >> 1))
    {
      LODWORD(v16) = 0;
      v17 = (unsigned __int16 *)(a4 + 20);
      do
      {
        v18 = *v17++;
        LODWORD(v16) = *(_DWORD *)(a4 + v18) + v16;
        --v15;
      }
      while (v15);
    }
    else
    {
      LODWORD(v16) = 0;
    }
  }
  v19 = (_DWORD *)(a2 + v12);
  *v19 = v16;
  v19[1] = *(_DWORD *)a4;
  *(_WORD *)(a2 + 16) = 24;
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFE0 | 8;
  return mpool_put(*(MPOOL **)a1, (void *)a2, 1u);
}

uint64_t bt_broot(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  unsigned __int16 v7;
  uint64_t v8;
  int *v9;
  int v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t result;
  unsigned __int16 v14;
  uint64_t v15;

  v7 = *(_WORD *)(a1 + 520) - 12;
  *(_WORD *)(a2 + 18) = v7;
  *(_WORD *)(a2 + 20) = v7;
  v8 = a2 + v7;
  *(_DWORD *)v8 = 0;
  *(_DWORD *)(v8 + 4) = *a3;
  *(_BYTE *)(v8 + 8) = 0;
  if ((*(_DWORD *)(a2 + 12) & 0x1F) == 1)
  {
    v14 = *(_WORD *)(a2 + 18) - ((*(_WORD *)(a4 + *(unsigned __int16 *)(a4 + 20)) & 0xFFFC) + 12);
    *(_WORD *)(a2 + 18) = v14;
    *(_WORD *)(a2 + 22) = v14;
    v15 = a2 + v14;
    _platform_memmove();
    *(_DWORD *)(v15 + 4) = *(_DWORD *)a4;
LABEL_7:
    *(_WORD *)(a2 + 16) = 24;
    *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFE0 | 1;
    mpool_put(*(MPOOL **)a1, (void *)a2, 1u);
    return 0;
  }
  if ((*(_DWORD *)(a2 + 12) & 0x1F) != 2)
    abort_report_np((uint64_t)"%s:%s:%u: illegal h->flags & P_TYPE (0x%x)");
  v9 = (int *)(a4 + *(unsigned __int16 *)(a4 + 20));
  v10 = *v9;
  v11 = *(_WORD *)(a2 + 18) - (*(_WORD *)v9 & 0xFFFC) - 12;
  *(_WORD *)(a2 + 18) = v11;
  *(_WORD *)(a2 + 22) = v11;
  v12 = a2 + v11;
  *(_DWORD *)v12 = v10;
  *(_DWORD *)(v12 + 4) = *(_DWORD *)a4;
  *(_BYTE *)(v12 + 8) = 0;
  _platform_memmove();
  if ((v9[2] & 2) == 0)
    goto LABEL_7;
  result = bt_preserve((MPOOL **)a1, *(int *)((char *)v9 + 9));
  if ((_DWORD)result != -1)
    goto LABEL_7;
  return result;
}

uint64_t bt_preserve(MPOOL **a1, pgno_t a2)
{
  _DWORD *v3;

  v3 = mpool_get(*a1, a2, 0);
  if (!v3)
    return 0xFFFFFFFFLL;
  v3[3] |= 0x20u;
  mpool_put(*a1, v3, 1u);
  return 0;
}

_DWORD *bt_psplit(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _WORD *a5, unsigned int a6)
{
  _DWORD *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  char *v19;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  __int16 v26;
  unsigned int v27;
  _DWORD *v28;
  int v29;
  int v30;
  unsigned int v31;
  _DWORD *v32;
  unsigned int v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  unsigned int v39;
  unsigned int v42;
  unint64_t v43;
  unsigned int v46;

  v6 = (_DWORD *)a2;
  v7 = (unsigned __int16)*a5;
  v39 = *(unsigned __int16 *)(a2 + 16) + 131052;
  v8 = (unsigned __int16)(v39 >> 1);
  if ((unsigned __int16)(v39 >> 1))
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = (unsigned __int16)(*(_WORD *)(a1 + 520) - 20) >> 1;
    v43 = (unsigned __int16)(*(_WORD *)(a1 + 520) - 20);
    v15 = v8 - 1;
    v42 = (unsigned __int16)*a5;
    while (1)
    {
      if (v7 == v12)
      {
        v16 = 0;
        v17 = a6;
      }
      else
      {
        v18 = v6[3] & 0x1F;
        if (v18 > 7)
        {
          if (v18 == 8)
          {
            v16 = 0;
            v17 = 8;
          }
          else
          {
            if (v18 != 16)
LABEL_64:
              abort_report_np((uint64_t)"%s:%s:%u: illegal h->flags & P_TYPE (0x%x)");
            v16 = 0;
            v17 = (*(_DWORD *)((char *)v6 + *((unsigned __int16 *)v6 + v13 + 10)) & 0xFFFFFFFC) + 8;
          }
        }
        else
        {
          if (v18 == 1)
          {
            v19 = (char *)v6 + *((unsigned __int16 *)v6 + v13 + 10);
            v17 = (*(_DWORD *)v19 & 0xFFFFFFFC) + 12;
          }
          else
          {
            if (v18 != 2)
              goto LABEL_64;
            v19 = (char *)v6 + *((unsigned __int16 *)v6 + v13 + 10);
            v17 = (*(_DWORD *)v19 + *((_DWORD *)v19 + 1) + 12) & 0xFFFFFFFC;
          }
          v16 = v19[8] & 2;
        }
      }
      if (v7 <= v12)
      {
        if ((unint64_t)(v17 + (unsigned __int16)v11) + 2 >= v43 || (_DWORD)v15 == v9)
        {
LABEL_31:
          --v12;
          goto LABEL_32;
        }
      }
      else if ((_DWORD)v15 == v9)
      {
        goto LABEL_31;
      }
      if (v7 != v12)
      {
        ++v13;
        v21 = *((_WORD *)a3 + 9) - v17;
        *((_WORD *)a3 + 9) = v21;
        *((_WORD *)a3 + v12 + 10) = v21;
        v46 = v17;
        v22 = v10;
        v23 = v15;
        v24 = v6;
        v25 = v11;
        _platform_memmove();
        v17 = v46;
        v11 = v25;
        v6 = v24;
        v15 = v23;
        v7 = v42;
        v10 = v22;
      }
      v26 = v11 + v17;
      v11 += v17 + 2;
      if (v14 <= (unsigned __int16)(v26 + 2))
      {
        if (!v16 || (_DWORD)v10 == 3)
          goto LABEL_32;
        v10 = (v10 + 1);
      }
      ++v12;
      v9 = v13;
      if (v8 <= v13)
        goto LABEL_32;
    }
  }
  v13 = 0;
  v12 = 0;
LABEL_32:
  *((_WORD *)a3 + 8) += 2 * v12 + 2;
  if ((*(_BYTE *)(a1 + 68) & 8) != 0 && *(_DWORD *)(a1 + 40) == *v6)
  {
    v27 = *(unsigned __int16 *)(a1 + 44);
    if (v27 >= v7)
    {
      LOWORD(v27) = v27 + 1;
      *(_WORD *)(a1 + 44) = v27;
    }
    if ((unsigned __int16)v27 >= v13)
    {
      *(_DWORD *)(a1 + 40) = *a4;
      *(_WORD *)(a1 + 44) = v27 - v13;
    }
    else
    {
      *(_DWORD *)(a1 + 40) = *a3;
    }
  }
  if (v7 <= v12)
  {
    LOWORD(v7) = -1;
    v28 = a4;
  }
  else
  {
    *a5 -= v13;
    v28 = a4;
    a3 = a4;
  }
  if (v8 <= v13)
  {
    v35 = 0;
  }
  else
  {
    v29 = 0;
    do
    {
      if ((unsigned __int16)v7 == v13)
        v30 = v29 + 1;
      else
        v30 = v29;
      if ((unsigned __int16)v7 == v13)
        LOWORD(v7) = -1;
      v31 = v6[3] & 0x1F;
      if (v31 > 7)
      {
        if (v31 == 8)
        {
          LOWORD(v33) = 8;
        }
        else
        {
          if (v31 != 16)
            goto LABEL_64;
          v33 = (*(_DWORD *)((char *)v6 + *((unsigned __int16 *)v6 + v13 + 10)) & 0xFFFFFFFC) + 8;
        }
      }
      else if (v31 == 1)
      {
        v33 = (*(_DWORD *)((char *)v6 + *((unsigned __int16 *)v6 + v13 + 10)) & 0xFFFFFFFC) + 12;
      }
      else
      {
        if (v31 != 2)
          goto LABEL_64;
        v32 = (_DWORD *)((char *)v6 + *((unsigned __int16 *)v6 + v13 + 10));
        v33 = (*v32 + v32[1] + 12) & 0xFFFFFFFC;
      }
      ++v13;
      v34 = *((_WORD *)v28 + 9) - v33;
      *((_WORD *)v28 + 9) = v34;
      *((_WORD *)v28 + (unsigned __int16)v30 + 10) = v34;
      _platform_memmove();
      v29 = v30 + 1;
    }
    while (v8 > v13);
    v35 = 2 * v29;
  }
  v36 = *((_WORD *)v28 + 8) + v35;
  if ((unsigned __int16)v7 == (unsigned __int16)(v39 >> 1))
    v36 += 2;
  *((_WORD *)v28 + 8) = v36;
  return a3;
}

uint64_t __bt_ret(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, char **a6, int a7)
{
  unsigned int *v11;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  size_t v20;
  char *v21;
  unsigned int v22;

  v11 = (unsigned int *)(*(_QWORD *)a2 + *(unsigned __int16 *)(*(_QWORD *)a2 + 2 * *(unsigned __int16 *)(a2 + 8) + 20));
  if (a3)
  {
    if ((v11[2] & 2) != 0)
    {
      if (__ovfl_get(a1, (unsigned int *)((char *)v11 + 9), a3 + 1, (void **)a4, (size_t *)(a4 + 8)))
        return 0xFFFFFFFFLL;
    }
    else
    {
      if (!a7 && (*(_BYTE *)(a1 + 637) & 0x40) == 0)
      {
        v14 = (char *)v11 + 9;
        a3[1] = *v11;
LABEL_13:
        *a3 = v14;
        goto LABEL_14;
      }
      if (*(_QWORD *)(a4 + 8) < (unint64_t)*v11)
      {
        v15 = malloc_type_realloc(*(void **)a4, *v11, 0x2744B127uLL);
        if (!v15)
          return 0xFFFFFFFFLL;
        v16 = *v11;
        *(_QWORD *)a4 = v15;
        *(_QWORD *)(a4 + 8) = v16;
      }
      _platform_memmove();
      a3[1] = *v11;
    }
    v14 = *(void **)a4;
    goto LABEL_13;
  }
LABEL_14:
  if (!a5)
    return 0;
  if ((v11[2] & 1) != 0)
  {
    if (!__ovfl_get(a1, (unsigned int *)((char *)v11 + *v11 + 9), a5 + 1, (void **)a6, (size_t *)a6 + 1))
    {
LABEL_26:
      v18 = *a6;
      goto LABEL_27;
    }
    return 0xFFFFFFFFLL;
  }
  if (a7 || (*(_BYTE *)(a1 + 637) & 0x40) != 0)
  {
    v20 = v11[1] + 1;
    if ((unint64_t)a6[1] >= v20)
    {
LABEL_25:
      _platform_memmove();
      a5[1] = v11[1];
      goto LABEL_26;
    }
    v21 = (char *)malloc_type_realloc(*a6, v20, 0x880B4BD5uLL);
    if (v21)
    {
      v22 = v11[1];
      *a6 = v21;
      a6[1] = (char *)(v22 + 1);
      goto LABEL_25;
    }
    return 0xFFFFFFFFLL;
  }
  v17 = *v11;
  a5[1] = v11[1];
  v18 = (char *)v11 + v17 + 9;
LABEL_27:
  result = 0;
  *a5 = v18;
  return result;
}

uint64_t __bt_cmp(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int *v7;
  char **v8;
  char *v9;
  size_t v10;

  v9 = 0;
  v10 = 0;
  v5 = *a3;
  if (!*((_WORD *)a3 + 4) && !*(_DWORD *)(v5 + 4) && (*(_BYTE *)(v5 + 12) & 2) == 0)
    return 1;
  v7 = (unsigned int *)(v5 + *(unsigned __int16 *)(v5 + 2 * *((unsigned __int16 *)a3 + 4) + 20));
  if ((v7[2] & 2) != 0)
  {
    v8 = (char **)(a1 + 496);
    if (__ovfl_get(a1, (unsigned int *)((char *)v7 + 9), &v10, (void **)(a1 + 496), (size_t *)(a1 + 504)))
      return 0xFFFFFFFFLL;
    v9 = *v8;
  }
  else
  {
    v9 = (char *)v7 + 9;
    v10 = *v7;
  }
  return (*(uint64_t (**)(uint64_t, char **))(a1 + 544))(a2, &v9);
}

uint64_t __bt_defcmp(unsigned __int8 **a1, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *i;
  int v7;
  int v8;
  uint64_t result;

  v2 = a1[1];
  v3 = a2[1];
  if (v2 >= v3)
    v4 = a2[1];
  else
    v4 = a1[1];
  if (!v4)
    return ((_DWORD)v2 - (_DWORD)v3);
  v5 = *a2;
  for (i = *a1; ; ++i)
  {
    v7 = *i;
    v8 = *v5;
    result = (v7 - v8);
    if (v7 != v8)
      break;
    ++v5;
    if (!--v4)
      return ((_DWORD)v2 - (_DWORD)v3);
  }
  return result;
}

unint64_t __bt_defpfx(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a2[1];
  if (v2 >= v3)
    v4 = a2[1];
  else
    v4 = a1[1];
  if (v4)
  {
    v5 = 0;
    while (*(unsigned __int8 *)(*a1 + v5) == *(unsigned __int8 *)(*a2 + v5))
    {
      if (v4 == ++v5)
        goto LABEL_8;
    }
    return v5 + 1;
  }
  else
  {
LABEL_8:
    if (v2 >= v3)
      return a1[1];
    else
      return v2 + 1;
  }
}

DB *__cdecl dbopen(const char *a1, int a2, int a3, DBTYPE a4, const void *a5)
{
  if ((a2 & 0x1FFFF1C9) != 0)
    goto LABEL_2;
  if (a4 == DB_RECNO)
    return (DB *)__rec_open((uint64_t)a1, a2 & 0x36, *(uint64_t *)&a3, (uint64_t)a5, a2 & 0xE0000000);
  if (a4 == DB_HASH)
    return (DB *)__hash_open(a1, a2 & 0xE36, *(uint64_t *)&a3, (uint64_t)a5);
  if (a4)
  {
LABEL_2:
    *__error() = 22;
    return 0;
  }
  return (DB *)__bt_open((uint64_t)a1, a2 & 0x36, *(uint64_t *)&a3, (uint64_t *)a5, a2 & 0xE0000000);
}

_QWORD *__dbpanic(_QWORD *result)
{
  result[8] = __dberr;
  result[2] = __dberr;
  result[3] = __dberr;
  result[4] = __dberr;
  result[5] = __dberr;
  result[6] = __dberr;
  return result;
}

uint64_t __dberr()
{
  return 0xFFFFFFFFLL;
}

_DWORD *__hash_open(const char *a1, int a2, uint64_t a3, uint64_t a4)
{
  int v6;
  _DWORD *result;
  _DWORD *v8;
  timespec v9;
  int v10;
  int v11;
  blksize_t st_blksize;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int *v18;
  uint64_t (*v19)();
  int NOCANCEL;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char *v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  char v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int *v42;
  stat v43;
  stat v44;

  if ((a2 & 3) == 1)
    v6 = a2 + 1;
  else
    v6 = a2;
  result = malloc_type_calloc(1uLL, 0x298uLL, 0x10B00404C34C173uLL);
  if (result)
  {
    v8 = result;
    v9 = (timespec)0;
    memset(&v43, 0, sizeof(v43));
    result[71] = -1;
    result[70] = v6;
    if (!a1)
      goto LABEL_10;
    v10 = open_NOCANCEL();
    v8[71] = v10;
    if (v10 == -1)
    {
      v18 = __error();
LABEL_50:
      v31 = *v18;
LABEL_51:
      free(v8);
LABEL_52:
      v42 = __error();
      result = 0;
      *v42 = v31;
      return result;
    }
    fcntl_NOCANCEL();
    v11 = fstat(v8[71], &v43);
    v9 = (timespec)0;
    if (!v11 && !v43.st_size && (v6 & 0x203) != 0)
    {
LABEL_10:
      *(timespec *)&v44.st_blksize = v9;
      *(timespec *)v44.st_qspare = v9;
      v44.st_birthtimespec = v9;
      *(timespec *)&v44.st_size = v9;
      v44.st_mtimespec = v9;
      v44.st_ctimespec = v9;
      *(timespec *)&v44.st_uid = v9;
      v44.st_atimespec = v9;
      *(timespec *)&v44.st_dev = v9;
      *((_QWORD *)v8 + 3) = 0x800000100;
      *(_OWORD *)(v8 + 2) = xmmword_18A0E5830;
      *(_QWORD *)(v8 + 13) = 0x10000;
      *((uint64_t (**)())v8 + 34) = __default_hash[0];
      *(timespec *)(v8 + 17) = v9;
      *(timespec *)(v8 + 21) = v9;
      *(timespec *)(v8 + 25) = v9;
      *(timespec *)(v8 + 29) = v9;
      *(timespec *)(v8 + 33) = v9;
      *(timespec *)(v8 + 37) = v9;
      *(timespec *)(v8 + 41) = v9;
      *(timespec *)(v8 + 45) = v9;
      *(timespec *)(v8 + 49) = v9;
      *(timespec *)(v8 + 53) = v9;
      *(timespec *)(v8 + 57) = v9;
      *(timespec *)(v8 + 61) = v9;
      if (a1)
      {
        if (stat(a1, &v44))
          goto LABEL_49;
        st_blksize = v44.st_blksize;
        v8[3] = v44.st_blksize;
        v8[4] = __log2(st_blksize);
      }
      if (!a4)
      {
        v16 = 1;
        goto LABEL_36;
      }
      if (!*(_DWORD *)a4 || (v13 = __log2(*(_DWORD *)a4), v8[3] = 1 << v13, v8[4] = v13, 1 << v13 <= 0x10000))
      {
        v14 = *(_DWORD *)(a4 + 4);
        if (v14)
          v8[13] = v14;
        v15 = *(_QWORD *)(a4 + 16);
        if (v15)
          *((_QWORD *)v8 + 34) = v15;
        v16 = *(_DWORD *)(a4 + 8);
        if (v16 <= 1)
          v16 = 1;
        v17 = *(_DWORD *)(a4 + 24);
        if (!v17)
        {
LABEL_36:
          v32 = (v16 - 1) / v8[13];
          if ((int)(v32 + 1) > 2)
            v33 = v32 + 1;
          else
            v33 = 2;
          v34 = __log2(v33);
          v35 = v34;
          v36 = v34 + 1;
          v8[v34 + 17] = v36;
          v8[v36 + 17] = v36;
          v8[8] = v34;
          v8[9] = 2;
          if (!__ibitmap((uint64_t)v8, ((_WORD)v34 << 11) | 1u, v36, 0))
          {
            v37 = ~(-1 << v35);
            v8[10] = v37;
            v8[11] = (2 << v35) - 1;
            v8[12] = v37;
            v8[15] = (0x1FFuLL >> v8[4]) + 1;
            v38 = 1 << __log2(v37 / v8[6] + 1);
            if (v38 > v8[5])
              v8[5] = v38;
            if (!alloc_segs((uint64_t)v8, v38))
            {
              v39 = 1;
              if (!a4)
                goto LABEL_45;
              goto LABEL_44;
            }
          }
          goto LABEL_49;
        }
        if (v17 == 4321 || v17 == 1234)
        {
          v8[2] = v17;
          goto LABEL_36;
        }
      }
      *__error() = 22;
LABEL_49:
      v18 = __error();
      v8 = 0;
      goto LABEL_50;
    }
    if (!a4 || (v19 = *(uint64_t (**)())(a4 + 16)) == 0)
      v19 = __default_hash[0];
    *((_QWORD *)v8 + 34) = v19;
    NOCANCEL = read_NOCANCEL();
    v21 = 0;
    v22 = bswap32(v8[1]);
    *v8 = bswap32(*v8);
    v8[1] = v22;
    v23 = bswap32(v8[3]);
    v8[2] = bswap32(v8[2]);
    v8[3] = v23;
    v24 = bswap32(v8[5]);
    v8[4] = bswap32(v8[4]);
    v8[5] = v24;
    v25 = bswap32(v8[7]);
    v8[6] = bswap32(v8[6]);
    v8[7] = v25;
    v26 = bswap32(v8[9]);
    v8[8] = bswap32(v8[8]);
    v8[9] = v26;
    v27 = bswap32(v8[11]);
    v8[10] = bswap32(v8[10]);
    v8[11] = v27;
    v28 = bswap32(v8[13]);
    v8[12] = bswap32(v8[12]);
    v8[13] = v28;
    v29 = bswap32(v8[15]);
    v8[14] = bswap32(v8[14]);
    v8[15] = v29;
    v8[16] = bswap32(v8[16]);
    v30 = (char *)v8 + 197;
    do
    {
      v8[v21 + 17] = bswap32(v8[v21 + 17]);
      *(_WORD *)(v30 - 1) = bswap32(*(unsigned __int16 *)(v30 - 1)) >> 16;
      ++v21;
      v30 += 2;
    }
    while (v21 != 32);
    if (NOCANCEL == 260)
    {
      if (*v8 == 398689
        && (v8[1] - 1) <= 1
        && (*((unsigned int (**)(const char *, ...))v8 + 34))("%$sniglet^&", 12, 1) == v8[16])
      {
        if (alloc_segs((uint64_t)v8, (v8[6] + v8[10]) / v8[6]))
          return 0;
        v8[148] = (v8[v8[8] + 17] + 8 * v8[3] - 1) >> (v8[4] + 3);
        _platform_bzero();
        v39 = 0;
        if (!a4)
          goto LABEL_45;
LABEL_44:
        v40 = *(_DWORD *)(a4 + 12);
        if (v40)
        {
LABEL_46:
          __buf_init((uint64_t)v8, v40);
          v8[81] = v39;
          if (a1)
            v41 = (v8[70] >> 1) & 1;
          else
            v41 = 0;
          v8[82] = v41;
          v8[78] = -1;
          result = malloc_type_malloc(0x48uLL, 0x10800406ECF7772uLL);
          if (result)
          {
            *((_QWORD *)result + 1) = hash_close;
            *((_QWORD *)result + 2) = hash_delete;
            *((_QWORD *)result + 7) = v8;
            *((_QWORD *)result + 8) = hash_fd;
            *((_QWORD *)result + 3) = hash_get;
            *((_QWORD *)result + 4) = hash_put;
            *((_QWORD *)result + 5) = hash_seq;
            *((_QWORD *)result + 6) = hash_sync;
            *result = 1;
            return result;
          }
          v31 = *__error();
          hdestroy();
          goto LABEL_52;
        }
LABEL_45:
        v40 = 0x10000;
        goto LABEL_46;
      }
    }
    else if (NOCANCEL == -1)
    {
      v31 = *__error();
LABEL_60:
      close_NOCANCEL();
      goto LABEL_51;
    }
    v31 = 79;
    goto LABEL_60;
  }
  return result;
}

uint64_t alloc_segs(uint64_t a1, int a2)
{
  void *v4;
  char *v5;
  uint64_t v6;
  int v7;
  int v9;

  v4 = malloc_type_calloc(*(int *)(a1 + 20), 8uLL, 0x80040B8603338uLL);
  *(_QWORD *)(a1 + 648) = v4;
  if (v4)
  {
    *(_DWORD *)(a1 + 260) = a2;
    if (!a2)
      return 0;
    v5 = (char *)malloc_type_calloc(a2 << *(_DWORD *)(a1 + 28), 8uLL, 0x80040B8603338uLL);
    if (v5)
    {
      if (a2 >= 1)
      {
        v6 = 0;
        v7 = *(_DWORD *)(a1 + 28);
        do
        {
          *(_QWORD *)(*(_QWORD *)(a1 + 648) + 8 * v6) = &v5[8 * ((_DWORD)v6 << v7)];
          ++v6;
        }
        while (a2 != v6);
      }
      return 0;
    }
  }
  v9 = *__error();
  hdestroy();
  *__error() = v9;
  return 0xFFFFFFFFLL;
}

void hdestroy(void)
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  void **v3;
  void *i;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t j;
  void *v10;
  void *v11;
  void *v12;

  v1 = v0;
  if (__buf_free(v0, 1, *(_DWORD *)(v0 + 328)))
    v2 = *__error();
  else
    v2 = 0;
  v3 = *(void ***)(v1 + 648);
  if (v3)
  {
    for (i = *v3; ; i = *(void **)(v6 + 8 * v7))
    {
      free(i);
      v5 = *(_DWORD *)(v1 + 264);
      *(_DWORD *)(v1 + 264) = v5 - 1;
      if (!v5)
        break;
      v6 = *(_QWORD *)(v1 + 648);
      v7 = *(int *)(v1 + 260) - 1;
      *(_DWORD *)(v1 + 260) = v7;
    }
    free(*(void **)(v1 + 648));
  }
  if (flush_meta(v1) && !v2)
    v2 = *__error();
  v8 = *(_DWORD *)(v1 + 592);
  if (v8 >= 1)
  {
    for (j = 0; j < v8; ++j)
    {
      v10 = *(void **)(v1 + 336 + 8 * j);
      if (v10)
      {
        free(v10);
        v8 = *(_DWORD *)(v1 + 592);
      }
    }
  }
  v11 = *(void **)(v1 + 296);
  if (v11)
    free(v11);
  v12 = *(void **)(v1 + 288);
  if (v12)
    free(v12);
  if (*(_DWORD *)(v1 + 284) != -1)
    close_NOCANCEL();
  free((void *)v1);
  if (v2)
    *__error() = v2;
}

uint64_t hash_close(void *a1)
{
  uint64_t v2;
  uint64_t v3;

  if (!a1)
    return 0xFFFFFFFFLL;
  hdestroy();
  v3 = v2;
  free(a1);
  return v3;
}

uint64_t hash_delete(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v3;
  int *v4;
  int v5;

  v3 = *(_QWORD *)(a1 + 56);
  if (a3 < 2)
  {
    if ((*(_BYTE *)(v3 + 280) & 3) != 0)
      return hash_access(*(_QWORD *)(a1 + 56), 3, a2, 0);
    v4 = __error();
    v5 = 1;
  }
  else
  {
    v4 = __error();
    v5 = 22;
  }
  *v4 = v5;
  *(_DWORD *)(v3 + 320) = v5;
  return 0xFFFFFFFFLL;
}

uint64_t hash_fd(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 0xFFFFFFFFLL;
  result = *(unsigned int *)(*(_QWORD *)(a1 + 56) + 284);
  if ((_DWORD)result == -1)
  {
    *__error() = 2;
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t hash_get(uint64_t a1, uint64_t *a2, _QWORD *a3, int a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 56);
  if (!a4)
    return hash_access(*(_QWORD *)(a1 + 56), 0, a2, a3);
  *__error() = 22;
  *(_DWORD *)(v4 + 320) = 22;
  return 0xFFFFFFFFLL;
}

uint64_t hash_put(uint64_t a1, uint64_t *a2, _QWORD *a3, int a4)
{
  uint64_t v4;
  int *v5;
  int v6;
  int v10;

  v4 = *(_QWORD *)(a1 + 56);
  if ((a4 & 0xFFFFFFF7) != 0)
  {
    v5 = __error();
    v6 = 22;
LABEL_3:
    *v5 = v6;
    *(_DWORD *)(v4 + 320) = v6;
    return 0xFFFFFFFFLL;
  }
  if ((*(_BYTE *)(v4 + 280) & 3) == 0)
  {
    v5 = __error();
    v6 = 1;
    goto LABEL_3;
  }
  if (a4 == 8)
    v10 = 2;
  else
    v10 = 1;
  return hash_access(*(_QWORD *)(a1 + 56), v10, a2, a3);
}

uint64_t hash_seq(uint64_t a1, _QWORD *a2, _QWORD *a3, unsigned int a4)
{
  uint64_t v4;
  unint64_t v8;
  unsigned __int16 *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t buf;
  unint64_t v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v4 = *(_QWORD *)(a1 + 56);
  if (a4 <= 7 && ((1 << a4) & 0x89) != 0)
  {
    if (a4 == 3 || (*(_DWORD *)(v4 + 312) & 0x80000000) != 0)
    {
      *(_QWORD *)(v4 + 312) = 0x100000000;
      *(_QWORD *)(v4 + 304) = 0;
    }
    v8 = 0;
    v9 = 0;
    while (1)
    {
      while (1)
      {
        if (v9 && *v9)
        {
          v16 = *(unsigned __int16 *)(v4 + 316);
          v17 = v9[v16 + 1];
          if (v17 > 3)
          {
            v18 = *(_QWORD *)(v4 + 304);
            if (!v18)
              return 0xFFFFFFFFLL;
            v19 = *(_QWORD *)(v18 + 32);
            v20 = v9[*(unsigned __int16 *)(v4 + 316)];
            *a2 = v19 + v20;
            if (v16 < 2)
              v21 = *(_DWORD *)(v4 + 12);
            else
              v21 = v9[(v16 - 1)];
            a2[1] = v21 - (int)v20;
            *a3 = v19 + v17;
            a3[1] = v20 - v17;
          }
          else if (__big_keydata(v4, v8, a2, a3, 1))
          {
            return 0xFFFFFFFFLL;
          }
          return 0;
        }
        v8 = *(_QWORD *)(v4 + 304);
        if (v8)
          break;
        v11 = *(_DWORD *)(v4 + 312);
        v12 = *(_DWORD *)(v4 + 40);
        if (v11 <= v12)
        {
          while (1)
          {
            buf = __get_buf(v4, v11, 0, 0);
            if (!buf)
              return 0xFFFFFFFFLL;
            v8 = buf;
            *(_QWORD *)(v4 + 304) = buf;
            v9 = *(unsigned __int16 **)(buf + 32);
            v12 = *(_DWORD *)(v4 + 40);
            if (!*v9)
            {
              ++v11;
              *(_DWORD *)(v4 + 316) = 1;
              if (v11 <= v12)
                continue;
            }
            goto LABEL_18;
          }
        }
        v8 = 0;
LABEL_18:
        *(_DWORD *)(v4 + 312) = v11;
        if (v11 > v12)
        {
          *(_DWORD *)(v4 + 312) = -1;
          return 1;
        }
        v10 = *(_DWORD *)(v4 + 316);
LABEL_20:
        if (!v9[v10 + 1])
        {
          do
          {
            v14 = __get_buf(v4, v9[v10], v8, 0);
            *(_QWORD *)(v4 + 304) = v14;
            if (!v14)
              return 0xFFFFFFFFLL;
            v8 = v14;
            v9 = *(unsigned __int16 **)(v14 + 32);
            v10 = 1;
            *(_DWORD *)(v4 + 316) = 1;
          }
          while (!v9[2]);
        }
        if (!*v9)
        {
          *(_QWORD *)(v4 + 304) = 0;
          ++*(_DWORD *)(v4 + 312);
        }
      }
      v9 = *(unsigned __int16 **)(v8 + 32);
      v10 = *(_DWORD *)(v4 + 316);
      if (a4 != 7)
        goto LABEL_20;
      v10 += 2;
      *(_DWORD *)(v4 + 316) = v10;
      if (v10 <= *v9)
        goto LABEL_20;
      v9 = 0;
      *(_QWORD *)(v4 + 304) = 0;
      ++*(_DWORD *)(v4 + 312);
      *(_DWORD *)(v4 + 316) = 1;
    }
  }
  *__error() = 22;
  *(_DWORD *)(v4 + 320) = 22;
  return 0xFFFFFFFFLL;
}

uint64_t hash_sync(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;

  if (a2)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  if (!a1)
    return 0xFFFFFFFFLL;
  v3 = *(_QWORD *)(a1 + 56);
  if (!*(_DWORD *)(v3 + 328))
    return 0;
  if (__buf_free(*(_QWORD *)(a1 + 56), 0, 1))
    return 0xFFFFFFFFLL;
  result = flush_meta(v3);
  if ((_DWORD)result)
    return 0xFFFFFFFFLL;
  *(_DWORD *)(v3 + 324) = 0;
  return result;
}

uint64_t __expand_table(uint64_t a1)
{
  unsigned int v2;
  int v3;
  signed int v4;
  unsigned int v5;
  signed int v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;

  v2 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v2;
  v3 = *(_DWORD *)(a1 + 48);
  v4 = v2 >> *(_DWORD *)(a1 + 28);
  v5 = v2;
  if (v4 < *(_DWORD *)(a1 + 260))
    goto LABEL_7;
  v6 = *(_DWORD *)(a1 + 20);
  if (v4 >= v6)
  {
    v7 = malloc_type_malloc(16 * v6, 0xF06B25C7uLL);
    if (!v7)
      return 0xFFFFFFFFLL;
    v8 = v7;
    _platform_memmove();
    _platform_bzero();
    free(*(void **)(a1 + 648));
    *(_QWORD *)(a1 + 648) = v8;
    *(_DWORD *)(a1 + 20) = 16 * v6;
  }
  v9 = malloc_type_calloc(*(int *)(a1 + 24), 8uLL, 0x80040B8603338uLL);
  *(_QWORD *)(*(_QWORD *)(a1 + 648) + 8 * v4) = v9;
  if (!v9)
    return 0xFFFFFFFFLL;
  *(int32x2_t *)(a1 + 260) = vadd_s32(*(int32x2_t *)(a1 + 260), (int32x2_t)0x100000001);
  v5 = *(_DWORD *)(a1 + 40);
LABEL_7:
  v10 = __log2(v5 + 1);
  v11 = *(int *)(a1 + 32);
  if (v10 > (int)v11)
  {
    *(_DWORD *)(a1 + 68 + 4 * v10) = *(_DWORD *)(a1 + 68 + 4 * v11);
    *(_DWORD *)(a1 + 32) = v10;
  }
  v12 = *(_DWORD *)(a1 + 44);
  if (v2 > v12)
  {
    *(_DWORD *)(a1 + 44) = v12 | v2;
    *(_DWORD *)(a1 + 48) = v12;
  }
  return __split_page(a1, v3 & v2, v2);
}

uint64_t __call_hash(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;

  result = *(_DWORD *)(a1 + 44) & (*(unsigned int (**)(uint64_t, _QWORD))(a1 + 272))(a2, a3);
  if (result > *(_DWORD *)(a1 + 40))
    return *(_DWORD *)(a1 + 48) & result;
  return result;
}

uint64_t flush_meta(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int8x16_t v4;
  int16x8_t v5;
  uint8x8_t v6;
  uint64_t v7;
  uint64_t v8;
  int16x8_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  _WORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[4];

  memset(v22, 0, sizeof(v22));
  v21 = 0u;
  v20 = 0u;
  v19 = 0u;
  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  v14 = 0u;
  if (!*(_DWORD *)(a1 + 328))
    return 0;
  *(_QWORD *)a1 = 0x200061561;
  v2 = (*(uint64_t (**)(const char *, ...))(a1 + 272))("%$sniglet^&", 12);
  v3 = 0;
  *(_DWORD *)(a1 + 64) = v2;
  v4 = vrev32q_s8(*(int8x16_t *)(a1 + 32));
  v4.i32[0] = *(_DWORD *)(a1 + 64);
  v5 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v4.i8);
  *(int16x4_t *)v5.i8 = vrev64_s16(*(int16x4_t *)v5.i8);
  v6 = (uint8x8_t)vmovn_s16(v5);
  v7 = a1 + 197;
  v8 = -128;
  do
  {
    v6.i32[0] = *(_DWORD *)(v7 + v8 - 1);
    v9 = (int16x8_t)vmovl_u8(v6);
    *(int16x4_t *)v9.i8 = vrev64_s16(*(int16x4_t *)v9.i8);
    v6 = (uint8x8_t)vmovn_s16(v9);
    *(_DWORD *)((char *)v22 + v8) = v6.i32[0];
    v10 = (char *)v22 + v3;
    *v10 = *(_BYTE *)(v7 + v3);
    v10[1] = *(_BYTE *)(v7 + v3 - 1);
    v3 += 2;
    v8 += 4;
  }
  while (v8);
  result = pwrite_NOCANCEL();
  if ((_DWORD)result != -1)
  {
    if ((_DWORD)result == 260)
    {
      v12 = 0;
      while (1)
      {
        v13 = *(_WORD **)(a1 + 8 * v12 + 336);
        if (v13)
        {
          if (__put_page((_DWORD *)a1, v13, *(unsigned __int16 *)(a1 + 2 * v12 + 196), 0, 1))
            break;
        }
        if (++v12 == 32)
          return 0;
      }
    }
    else
    {
      *__error() = 79;
      *(_DWORD *)(a1 + 320) = *__error();
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t hash_access(uint64_t a1, int a2, uint64_t *a3, _QWORD *a4)
{
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unint64_t buf;
  unint64_t v13;
  unsigned __int16 *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int16 *v17;
  int v18;
  unsigned int v19;
  int bigpair;
  unsigned int last_page;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int16 *v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t result;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;

  v8 = *(_DWORD *)(a1 + 12);
  v9 = *a3;
  v10 = a3[1];
  v11 = *(_DWORD *)(a1 + 44) & (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 272))(*a3, v10);
  if (v11 > *(_DWORD *)(a1 + 40))
    v11 &= *(_DWORD *)(a1 + 48);
  buf = __get_buf(a1, v11, 0, 0);
  if (!buf)
    return 0xFFFFFFFFLL;
  v13 = buf;
  v35 = a4;
  v36 = a2;
  v34 = a3;
  v37 = 0;
  *(_BYTE *)(buf + 40) |= 8u;
  v14 = *(unsigned __int16 **)(buf + 32);
  v15 = *v14;
  v16 = buf;
  if (v15 < 2)
  {
LABEL_25:
    if ((v36 - 1) > 1)
    {
LABEL_29:
      *(_BYTE *)(v13 + 40) &= ~8u;
      return 1;
    }
    else
    {
      v30 = __addel((_DWORD *)a1, v16, v34, v35);
      *(_BYTE *)(v13 + 40) &= ~8u;
      if (v30)
        return 0xFFFFFFFFLL;
      else
        return 0;
    }
  }
  v17 = v14 + 1;
  v18 = 1;
  v16 = buf;
  while (1)
  {
    v19 = v17[1];
    if (v19 >= 4)
      break;
    if (v17[1])
    {
      bigpair = __find_bigpair(a1, v16, v18, v9, v10);
      v18 = bigpair;
      if (bigpair > 0)
        goto LABEL_20;
      if (bigpair != -2)
      {
LABEL_32:
        *(_BYTE *)(v13 + 40) &= ~8u;
        return 0xFFFFFFFFLL;
      }
      v37 = v16;
      last_page = __find_last_page(a1, &v37);
      if (!last_page)
      {
        v16 = v37;
        goto LABEL_25;
      }
      v22 = last_page;
      v23 = v37;
      v24 = a1;
    }
    else
    {
      v22 = *v17;
      v24 = a1;
      v23 = v16;
    }
    v25 = __get_buf(v24, v22, v23, 0);
    if (!v25)
      goto LABEL_32;
    v16 = v25;
    v26 = *(unsigned __int16 **)(v25 + 32);
    v27 = *v26;
    v17 = v26 + 1;
    v15 = v27;
    v8 = *(_DWORD *)(a1 + 12);
    v18 = 1;
LABEL_18:
    if (v18 >= (int)v15)
      goto LABEL_25;
  }
  if (v8 - *v17 != v10 || _platform_memcmp())
  {
    v17 += 2;
    v18 += 2;
    v8 = v19;
    goto LABEL_18;
  }
LABEL_20:
  switch(v36)
  {
    case 0:
      v28 = *(_QWORD *)(v16 + 32);
      v29 = *(unsigned __int16 *)(v28 + 2 * v18 + 2);
      if (v29 > 3)
      {
        v32 = v28 + v29;
        v33 = *(unsigned __int16 *)(v28 + 2 * v18) - v29;
        *v35 = v32;
        v35[1] = v33;
      }
      else if (__big_return(a1, v16, v18, v35, 0))
      {
        return 0xFFFFFFFFLL;
      }
LABEL_37:
      result = 0;
      *(_BYTE *)(v13 + 40) &= ~8u;
      break;
    case 1:
      if (__delpair((_DWORD *)a1, v16, v18) || __addel((_DWORD *)a1, v16, v34, v35))
        goto LABEL_32;
      goto LABEL_37;
    case 2:
      goto LABEL_29;
    case 3:
      if (!__delpair((_DWORD *)a1, v16, v18))
        goto LABEL_37;
      return 0xFFFFFFFFLL;
    default:
      abort_report_np((uint64_t)"%s:%s:%u: illegal action (%d)");
  }
  return result;
}

uint64_t __big_insert(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  _WORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  unsigned __int16 v15;
  unsigned __int16 v16;
  __int16 v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  __int16 *v25;
  uint64_t v26;
  _WORD *i;
  unsigned __int16 v28;
  unsigned __int16 v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t result;

  v4 = a4;
  v5 = a2;
  v7 = *(_WORD **)(a2 + 32);
  v8 = *((_DWORD *)a3 + 2);
  v9 = *a4;
  v10 = a4[1];
  v11 = (unsigned __int16)*v7;
  v12 = v11 + 1;
  if (v8)
  {
    v13 = &v7[v12];
    v14 = *a3;
    while (1)
    {
      v15 = *v13 - 8;
      if (v8 >= v15)
        v16 = v15;
      else
        v16 = v8;
      v17 = v7[v11 + 2] - v16;
      _platform_memmove();
      v18 = (unsigned __int16)*v7;
      v7[v18 + 1] = v17;
      *v7 = v18 + 2;
      v7[(unsigned __int16)(v18 + 2) + 1] = v17 - 2 * v18 - 10;
      v7[(unsigned __int16)(v18 + 2) + 2] = v17;
      v7[v18 + 2] = 1;
      v19 = __add_ovflpage(a1, v5);
      if (!v19)
        return 0xFFFFFFFFLL;
      v5 = v19;
      v8 -= v16;
      if (!v8)
        break;
      v14 += v16;
      v7 = *(_WORD **)(v19 + 32);
      *(_BYTE *)(v19 + 40) |= 1u;
      v11 = (unsigned __int16)*v7;
      v13 = &v7[v11 + 1];
    }
    v20 = (unsigned __int16)*v7;
    v21 = (unsigned __int16)v7[v20 + 1];
    if (!v7[v20 + 1]
      || (v10 >= v21 ? (v22 = (unsigned __int16)v7[v20 + 1]) : (v22 = v10),
          (_DWORD)v10 == v21 && a4[1] == v10))
    {
      v23 = v20 - 2;
      v24 = 2;
    }
    else
    {
      v25 = &v7[(unsigned __int16)*v7];
      v24 = v25[2] - v22;
      _platform_memmove();
      v9 += v22;
      LODWORD(v10) = v10 - v22;
      *v25 = v24;
      v7[v20 - 2] = 3;
      v26 = (unsigned __int16)*v7;
      v7[v26 + 1] -= v22;
      v23 = v26 + 2;
    }
    v7[v23] = v24;
    v7 = *(_WORD **)(v5 + 32);
    *(_BYTE *)(v5 + 40) |= 1u;
    v11 = (unsigned __int16)*v7;
    v12 = v11 + 1;
    v4 = a4;
  }
  if (!(_DWORD)v10)
    return 0;
  for (i = &v7[v12]; ; i = &v7[v11 + 1])
  {
    v28 = *i - 8;
    v29 = v10 >= v28 ? v28 : v10;
    if ((_DWORD)v10 == v28)
      v29 -= v4[1] == v10;
    v30 = v7[v11 + 2] - v29;
    _platform_memmove();
    LODWORD(v10) = v10 - v29;
    v31 = (unsigned __int16)*v7;
    v7[v31 + 1] = v30;
    v32 = v31 + 2;
    *v7 = v31 + 2;
    v7[(unsigned __int16)(v31 + 2) + 1] = v30 - 2 * v31 - 10;
    v7[(unsigned __int16)(v31 + 2) + 2] = v30;
    if (!(_DWORD)v10)
      break;
    v7[v32] = 2;
    v33 = __add_ovflpage(a1, v5);
    if (!v33)
      return 0xFFFFFFFFLL;
    v5 = v33;
    v9 += v29;
    v7 = *(_WORD **)(v33 + 32);
    v11 = (unsigned __int16)*v7;
    *(_BYTE *)(v33 + 40) |= 1u;
  }
  result = 0;
  v7[v32] = 3;
  *(_BYTE *)(v5 + 40) |= 1u;
  return result;
}

uint64_t __big_delete(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _BOOL4 v5;
  unint64_t buf;
  unsigned __int16 *v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t result;
  _WORD *v12;
  uint64_t v13;
  __int16 v14;
  _WORD *v15;

  v4 = 0;
  v5 = 0;
  buf = a2;
  while (1)
  {
    v7 = *(unsigned __int16 **)(buf + 32);
    v8 = v7[2];
    if (v5)
      break;
    v5 = (v8 & 0xFFFE) == 2;
    v9 = *v7;
    if (v8 != 3)
      goto LABEL_10;
    if (v7[v9 + 1])
      goto LABEL_16;
LABEL_11:
    v10 = v7[v9 - 1];
    *(_BYTE *)(buf + 40) |= 1u;
    buf = __get_buf(a1, v10, buf, 0);
    if (v4)
      __free_ovflpage((_DWORD *)a1, v4);
    v4 = buf;
    if (!buf)
      return 0xFFFFFFFFLL;
  }
  if (v8 != 3)
  {
    if ((v8 & 0xFFFE) == 2)
      v5 = 1;
    LODWORD(v9) = *v7;
LABEL_10:
    v9 = v9;
    goto LABEL_11;
  }
  LODWORD(v9) = *v7;
LABEL_16:
  v12 = *(_WORD **)(a2 + 32);
  if (v9 < 3)
  {
    v13 = 0;
  }
  else
  {
    v12[1] = v7[v9 - 1];
    v12[2] = 0;
    v13 = *(_QWORD *)(buf + 16);
  }
  *(_QWORD *)(a2 + 16) = v13;
  *v12 = v9 - 2;
  v14 = *(_WORD *)(a1 + 12);
  v15 = &v12[(unsigned __int16)(v9 - 2)];
  v15[1] = v14 - 2 * v9 - 2;
  v15[2] = v14;
  *(_BYTE *)(a2 + 40) |= 1u;
  if (buf)
    __free_ovflpage((_DWORD *)a1, buf);
  if (v4 && v4 != buf)
    __free_ovflpage((_DWORD *)a1, v4);
  result = 0;
  --*(_DWORD *)(a1 + 56);
  return result;
}

uint64_t __find_bigpair(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  int v7;
  uint64_t v8;
  unsigned __int16 v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t buf;

  v7 = a3;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_WORD *)(a1 + 12) - *(_WORD *)(v8 + 2 * a3);
  v10 = v9;
  if (v9 <= a5)
  {
    v13 = a2;
    v11 = a5;
    while (*(_WORD *)(v8 + 2 * v7 + 2) == 1)
    {
      v15 = v9;
      if (_platform_memcmp())
        return 4294967294;
      buf = __get_buf(a1, *(unsigned __int16 *)(v8 + 2 * v7 + 4), v13, 0);
      if (!buf)
        return 4294967293;
      v13 = buf;
      v11 -= v10;
      a4 += v15;
      v8 = *(_QWORD *)(buf + 32);
      v9 = *(_WORD *)(a1 + 12) - *(_WORD *)(v8 + 2);
      v10 = v9;
      v7 = 1;
      if (v9 > a5)
        break;
    }
  }
  else
  {
    v11 = a5;
  }
  v12 = 4294967294;
  if (v11 == v10)
  {
    if (_platform_memcmp())
      return 4294967294;
    else
      return v7;
  }
  return v12;
}

unint64_t __find_last_page(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned __int16 *v5;
  uint64_t v6;
  unint64_t result;

  v4 = *a2;
  while (1)
  {
    v5 = *(unsigned __int16 **)(v4 + 32);
    v6 = *v5;
    if (v5[2] == 3)
    {
      if ((_DWORD)v6 == 2)
      {
        result = 0;
        *a2 = v4;
        return result;
      }
      if (!v5[v6] || v5[v6 + 1])
        break;
    }
    result = __get_buf(a1, v5[v6 - 1], v4, 0);
    v4 = result;
    if (!result)
      return result;
  }
  *a2 = v4;
  if (v6 < 3)
    return 0;
  else
    return v5[3];
}

uint64_t __big_return(uint64_t a1, unint64_t buf, int a3, _QWORD *a4, uint64_t a5)
{
  uint64_t i;
  unsigned __int16 *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  int v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  unsigned __int16 v21;
  unint64_t v22;
  unint64_t v23;

  for (i = a3 + 1; ; i = 2)
  {
    v10 = *(unsigned __int16 **)(buf + 32);
    v11 = v10[i];
    if (v11 != 1)
      break;
    buf = __get_buf(a1, v10[*v10 - 1], buf, 0);
    if (!buf)
      return 0xFFFFFFFFLL;
  }
  if (v11 == 2)
  {
    v12 = __get_buf(a1, v10[*v10 - 1], buf, 0);
    if (v12)
    {
      v13 = v12;
      v14 = 0;
      v15 = *(unsigned __int16 *)(v12 + 24);
      buf = v12;
LABEL_14:
      result = collect_data(a1, v13, v14, a5);
      a4[1] = (int)result;
      if ((_DWORD)result == -1)
        return result;
      if (*(_DWORD *)(buf + 24) == v15)
      {
        _platform_memmove();
        result = 0;
        *a4 = *(_QWORD *)(a1 + 288);
        return result;
      }
      *__error() = 22;
    }
  }
  else
  {
    v16 = *v10;
    v17 = &v10[v16];
    v18 = *v17;
    if (v17[1])
    {
      v19 = v10[1] - v18;
      *a4 = (char *)v10 + v18;
      a4[1] = v19;
      if ((_DWORD)a5)
      {
        if ((_DWORD)v16 == 2)
        {
          result = 0;
          *(_QWORD *)(a1 + 304) = 0;
          ++*(_DWORD *)(a1 + 312);
          *(_DWORD *)(a1 + 316) = 1;
          return result;
        }
        v23 = __get_buf(a1, v10[v16 - 1], buf, 0);
        *(_QWORD *)(a1 + 304) = v23;
        if (!v23)
          return 0xFFFFFFFFLL;
        *(_DWORD *)(a1 + 316) = 1;
        if (!**(_WORD **)(v23 + 32))
        {
          result = 0;
          ++*(_DWORD *)(a1 + 312);
          *(_QWORD *)(a1 + 304) = 0;
          return result;
        }
      }
      return 0;
    }
    v21 = v10[1];
    v15 = *(unsigned __int16 *)(buf + 24);
    v22 = __get_buf(a1, v10[v16 - 1], buf, 0);
    if (v22)
    {
      v13 = v22;
      v14 = v21 - v18;
      goto LABEL_14;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t collect_data(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned __int16 *v8;
  int v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t buf;

  v8 = *(unsigned __int16 **)(a2 + 32);
  v9 = *(_DWORD *)(a1 + 12) - v8[1];
  v10 = *(unsigned __int16 *)(a2 + 24);
  if (v8[2] == 3)
  {
    v11 = (v9 + a3);
    v12 = *(void **)(a1 + 288);
    if (v12)
      free(v12);
    v13 = malloc_type_malloc((int)v11, 0xFFDE5386uLL);
    *(_QWORD *)(a1 + 288) = v13;
    if (!v13)
      return 0xFFFFFFFFLL;
    if ((_DWORD)a4)
    {
      *(_DWORD *)(a1 + 316) = 1;
      v14 = *v8;
      if (v14 == 2)
      {
        *(_QWORD *)(a1 + 304) = 0;
        ++*(_DWORD *)(a1 + 312);
      }
      else
      {
        buf = __get_buf(a1, v8[v14 - 1], a2, 0);
        *(_QWORD *)(a1 + 304) = buf;
        if (!buf)
          return 0xFFFFFFFFLL;
        if (!**(_WORD **)(buf + 32))
        {
          ++*(_DWORD *)(a1 + 312);
          *(_QWORD *)(a1 + 304) = 0;
        }
      }
    }
  }
  else
  {
    v15 = __get_buf(a1, v8[*v8 - 1], a2, 0);
    if (!v15)
      return 0xFFFFFFFFLL;
    v11 = collect_data(a1, v15, (v9 + a3), a4);
    if ((int)v11 < 1)
      return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a2 + 24) != v10)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  _platform_memmove();
  return v11;
}

uint64_t __big_keydata(uint64_t a1, unint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t result;

  result = collect_key(a1, a2, 0, a4, a5);
  a3[1] = (int)result;
  if ((_DWORD)result != -1)
  {
    result = 0;
    *a3 = *(_QWORD *)(a1 + 296);
  }
  return result;
}

uint64_t collect_key(uint64_t a1, unint64_t a2, int a3, _QWORD *a4, uint64_t a5)
{
  unsigned __int16 *v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13;
  unint64_t buf;

  v9 = *(unsigned __int16 **)(a2 + 32);
  v10 = *(unsigned __int16 *)(a2 + 24);
  v11 = *(_DWORD *)(a1 + 12) - v9[1] + a3;
  if ((v9[2] & 0xFFFE) == 2)
  {
    v12 = *(void **)(a1 + 296);
    if (v12)
      free(v12);
    v13 = malloc_type_malloc((int)v11, 0x42A49C15uLL);
    *(_QWORD *)(a1 + 296) = v13;
    if (!v13 || __big_return(a1, a2, 1, a4, a5))
      return 0xFFFFFFFFLL;
  }
  else
  {
    buf = __get_buf(a1, v9[*v9 - 1], a2, 0);
    if (!buf)
      return 0xFFFFFFFFLL;
    v11 = collect_key(a1, buf, v11, a4, a5);
    if ((int)v11 < 1)
      return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a2 + 24) != v10)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  _platform_memmove();
  return v11;
}

uint64_t __big_split(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, __int16 a5, int a6, uint64_t a7)
{
  uint64_t result;
  int v15;
  unsigned int last_page;
  uint64_t v17;
  unint64_t buf;
  uint64_t v19;
  _WORD *v20;
  uint64_t v21;
  _WORD *v22;
  __int16 v23;
  _WORD *v24;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned __int16 v27;
  unsigned __int16 *v28;
  unsigned __int16 v29;
  unsigned __int16 v30;
  unsigned __int16 *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v34 = a4;
  result = collect_key(a1, a4, 0, &v33, 0);
  if ((_DWORD)result != -1)
  {
    v15 = __call_hash(a1, *(_QWORD *)(a1 + 296), result);
    last_page = __find_last_page(a1, (uint64_t *)&v34);
    *(_WORD *)(a7 + 24) = last_page;
    if (last_page)
    {
      v17 = v34;
      buf = __get_buf(a1, last_page, v34, 0);
      *(_QWORD *)(a7 + 16) = buf;
      if (!buf)
        return 0xFFFFFFFFLL;
    }
    else
    {
      *(_QWORD *)(a7 + 16) = 0;
      v17 = v34;
    }
    if (v15 == a6)
      v19 = a2;
    else
      v19 = a3;
    *(_BYTE *)(v19 + 40) |= 1u;
    *(_QWORD *)(v19 + 16) = a4;
    v20 = *(_WORD **)(v19 + 32);
    v21 = (unsigned __int16)*v20;
    v22 = &v20[v21];
    v23 = v22[2];
    LOWORD(v22) = v22[1];
    v20[(unsigned __int16)(v21 + 1)] = a5;
    LOWORD(v21) = v21 + 2;
    v24 = &v20[(unsigned __int16)v21];
    *v24 = 0;
    *v20 = v21;
    v24[2] = v23;
    v24[1] = (_WORD)v22 - 4;
    *(_QWORD *)a7 = a3;
    *(_QWORD *)(a7 + 8) = a2;
    v25 = *(unsigned __int16 **)(v17 + 32);
    *(_BYTE *)(v17 + 40) |= 1u;
    v26 = *v25;
    if (v26 >= 3)
    {
      v27 = v25[4];
      v28 = &v25[v26];
      v29 = v28[1];
      LOWORD(v28) = v28[2];
      v30 = v26 - 2;
      *v25 = v30;
      v31 = &v25[v30];
      v31[1] = v29 + 4;
      v31[2] = (unsigned __int16)v28;
      v32 = __add_ovflpage(a1, v17);
      if (!v32)
        return 0xFFFFFFFFLL;
      v17 = v32;
      v25[4] = v27;
    }
    result = 0;
    *(_QWORD *)(a7 + 8 * (v15 == a6)) = v17;
  }
  return result;
}

unint64_t __get_buf(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  unint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unsigned int v24;
  unsigned __int16 *v25;
  uint64_t v26;
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *i;
  unsigned __int16 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  int page;
  int v42;
  uint64_t v43;

  if (!a3)
  {
    v9 = (*(int *)(a1 + 24) - 1) & (int)a2;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 648) + 8 * (a2 >> *(_DWORD *)(a1 + 28)));
    v12 = *(_QWORD *)(v10 + 8 * v9);
    result = v12 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v12 & 2) != 0)
    {
      v8 = *(_QWORD *)(v10 + 8 * v9) & 2;
      v11 = 1;
      if (!result)
        goto LABEL_12;
    }
    else
    {
      v8 = 0;
      v11 = *(_DWORD *)(a1 + 324) == 0;
      if (!result)
        goto LABEL_12;
    }
LABEL_9:
    v13 = *(_QWORD *)result;
    *(_QWORD *)(v13 + 8) = *(_QWORD *)(result + 8);
    **(_QWORD **)(result + 8) = v13;
    v14 = *(_QWORD *)(a1 + 608);
    *(_QWORD *)result = a1 + 600;
    *(_QWORD *)(result + 8) = v14;
    *(_QWORD *)(a1 + 608) = result;
    **(_QWORD **)(result + 8) = result;
    return result;
  }
  result = *(_QWORD *)(a3 + 16);
  if (!result || *(_DWORD *)(result + 24) != a2)
    result = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 2 * (a4 == 0);
  if (result)
    goto LABEL_9;
LABEL_12:
  v15 = (uint64_t *)(a1 + 600);
  v16 = *(_QWORD *)(a1 + 600);
  v17 = *(_QWORD **)(a1 + 304);
  if ((_QWORD *)v16 == v17)
  {
    v18 = *(_QWORD *)v16;
    *(_QWORD *)(v18 + 8) = *(_QWORD *)(v16 + 8);
    **(_QWORD **)(v16 + 8) = v18;
    v19 = *(_QWORD *)(a1 + 608);
    *(_QWORD *)v16 = v15;
    *(_QWORD *)(v16 + 8) = v19;
    *(_QWORD *)(a1 + 608) = v16;
    **(_QWORD **)(v16 + 8) = v16;
    v16 = *(_QWORD *)(a1 + 600);
  }
  v20 = *(_DWORD *)(a1 + 596);
  if (!a3 || v20)
  {
    if (v20)
    {
LABEL_28:
      result = (unint64_t)malloc_type_calloc(1uLL, 0x30uLL, 0x1030040DD04DACBuLL);
      if (!result)
        return result;
      v16 = result;
      v27 = malloc_type_calloc(1uLL, *(int *)(a1 + 12), 0x8FC98490uLL);
      *(_QWORD *)(v16 + 32) = v27;
      if (v27)
      {
        v28 = *(_DWORD *)(a1 + 596);
        if (v28)
          *(_DWORD *)(a1 + 596) = v28 - 1;
        goto LABEL_53;
      }
      free((void *)v16);
      return 0;
    }
  }
  else
  {
    v21 = *(_QWORD *)(v16 + 16);
    if (v21)
    {
      while (v21 != a3)
      {
        v21 = *(_QWORD *)(v21 + 16);
        if (!v21)
          goto LABEL_21;
      }
      *(_DWORD *)(a1 + 596) = 1;
      goto LABEL_28;
    }
  }
LABEL_21:
  v22 = *(_BYTE *)(v16 + 40);
  if ((v22 & 8) != 0 || (_QWORD *)v16 == v17)
    goto LABEL_28;
  v23 = *(_QWORD *)v16;
  *(_QWORD *)(v23 + 8) = *(_QWORD *)(v16 + 8);
  **(_QWORD **)(v16 + 8) = v23;
  v24 = *(_DWORD *)(v16 + 24);
  if (v22 & 4 | v24)
  {
    v25 = *(unsigned __int16 **)(v16 + 32);
    if (*v25)
    {
      v26 = v25[*v25 - 1];
      if ((v22 & 1) == 0)
        goto LABEL_37;
    }
    else
    {
      v26 = 0;
      if ((v22 & 1) == 0)
        goto LABEL_37;
    }
    if (__put_page((_DWORD *)a1, v25, v24, v22 & 4, 0))
      return 0;
    v22 = *(_BYTE *)(v16 + 40);
LABEL_37:
    v42 = v11;
    v43 = v8;
    if ((v22 & 4) != 0)
    {
      v29 = *(int *)(v16 + 24);
      v30 = (*(int *)(a1 + 24) - 1) & v29;
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 648) + 8 * (v29 >> *(_DWORD *)(a1 + 28)));
      if (*(_DWORD *)(a1 + 324) && ((v30 = (int)v30, (v22 & 1) != 0) || (*(_QWORD *)(v31 + 8 * (int)v30) & 2) != 0))
        v32 = 2;
      else
        v32 = 0;
      *(_QWORD *)(v31 + 8 * v30) = v32;
    }
    v33 = (_QWORD *)(v16 + 16);
    for (i = *(uint64_t **)(v16 + 16); i; v26 = v36)
    {
      *v33 = 0;
      if ((i[5] & 4) != 0 || *((_DWORD *)i + 6) != (_DWORD)v26)
        break;
      v35 = (unsigned __int16 *)i[4];
      v36 = v26;
      if (*v35)
        v36 = v35[*v35 - 1];
      if ((i[5] & 1) != 0 && __put_page((_DWORD *)a1, v35, v26, 0, 0))
        return 0;
      *((_DWORD *)i + 6) = 0;
      *((_BYTE *)i + 40) = 0;
      v37 = *i;
      *(_QWORD *)(v37 + 8) = i[1];
      *(_QWORD *)i[1] = v37;
      v38 = *(_QWORD *)(*v15 + 8);
      *i = *v15;
      i[1] = v38;
      *(_QWORD *)(*v15 + 8) = i;
      *(_QWORD *)i[1] = i;
      v33 = i + 2;
      i = (uint64_t *)i[2];
    }
    v8 = v43;
    v11 = v42;
  }
LABEL_53:
  *(_DWORD *)(v16 + 24) = a2;
  *(_QWORD *)(v16 + 16) = 0;
  if (a3)
  {
    v39 = 0;
    *(_QWORD *)(a3 + 16) = v16;
  }
  else
  {
    v39 = 4;
  }
  *(_BYTE *)(v16 + 40) = v39;
  v40 = *(_QWORD *)(a1 + 608);
  *(_QWORD *)v16 = v15;
  *(_QWORD *)(v16 + 8) = v40;
  *(_QWORD *)(a1 + 608) = v16;
  **(_QWORD **)(v16 + 8) = v16;
  page = __get_page((_DWORD *)a1, *(unsigned __int16 **)(v16 + 32), a2, a3 == 0, v11, 0);
  if (page)
    result = 0;
  else
    result = v16;
  if (!a3 && !page)
  {
    *(_QWORD *)(v10 + 8 * v9) = v8 | v16;
    return v16;
  }
  return result;
}

uint64_t __buf_init(uint64_t result, int a2)
{
  int v2;

  v2 = (a2 + *(_DWORD *)(result + 12) - 1) >> *(_DWORD *)(result + 16);
  if (v2 <= 6)
    v2 = 6;
  *(_DWORD *)(result + 596) = v2;
  *(_QWORD *)(result + 608) = result + 600;
  *(_QWORD *)(result + 600) = result + 600;
  return result;
}

uint64_t __buf_free(uint64_t a1, int a2, int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  unsigned int v9;
  char v10;
  uint64_t *v11;

  v3 = (uint64_t *)(a1 + 600);
  v4 = *(uint64_t **)(a1 + 600);
  if (v4)
    v5 = v4 == v3;
  else
    v5 = 1;
  if (v5)
    return 0;
  while (1)
  {
    v9 = *((_DWORD *)v4 + 6);
    if (!v9)
      break;
    if (a3)
    {
      v10 = *((_BYTE *)v4 + 40);
      goto LABEL_10;
    }
LABEL_12:
    if (a2)
    {
      if (v4[4])
      {
        _platform_bzero();
        free((void *)v4[4]);
      }
      v11 = (uint64_t *)*v4;
      v11[1] = v4[1];
      *(_QWORD *)v4[1] = v11;
      free(v4);
      v4 = v3;
    }
    v4 = (uint64_t *)*v4;
    if (v4 == v3)
      return 0;
  }
  if (!a3)
    goto LABEL_12;
  v10 = *((_BYTE *)v4 + 40);
  if ((v10 & 4) == 0)
    goto LABEL_12;
LABEL_10:
  if ((v10 & 1) == 0 || !__put_page((_DWORD *)a1, (_WORD *)v4[4], v9, v10 & 4, 0))
    goto LABEL_12;
  return 0xFFFFFFFFLL;
}

uint64_t __reclaim_buf(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  a2[2] = 0;
  *((_DWORD *)a2 + 6) = 0;
  *((_BYTE *)a2 + 40) = 0;
  v2 = *a2;
  *(_QWORD *)(v2 + 8) = a2[1];
  *(_QWORD *)a2[1] = v2;
  v3 = *(_QWORD *)(result + 600);
  v4 = *(_QWORD *)(v3 + 8);
  *a2 = v3;
  a2[1] = v4;
  *(_QWORD *)(*(_QWORD *)(result + 600) + 8) = a2;
  *(_QWORD *)a2[1] = a2;
  return result;
}

uint64_t hash4(uint64_t a1, uint64_t a2)
{
  if (a2)
    return ((uint64_t (*)(void))((char *)&loc_18A0AAC70 + 4 * byte_18A0E5844[a2 & 7]))();
  else
    return 0;
}

uint64_t __log2(unsigned int a1)
{
  uint64_t result;
  unsigned int v3;

  if (a1 < 2)
    return 0;
  LODWORD(result) = 0;
  v3 = 1;
  do
  {
    v3 *= 2;
    result = (result + 1);
  }
  while (v3 < a1);
  return result;
}

uint64_t __delpair(_DWORD *a1, unint64_t a2, int a3)
{
  _WORD *v5;
  unint64_t v6;
  uint64_t v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  int v13;
  __int16 v14;
  __int16 v15;

  v5 = *(_WORD **)(a2 + 32);
  v6 = (unsigned __int16)v5[a3 + 1];
  if (v6 <= 3)
    return __big_delete((uint64_t)a1, a2);
  v9 = (unsigned __int16)*v5;
  if (a3 == 1)
    v10 = a1[3];
  else
    LOWORD(v10) = v5[a3 - 1];
  v11 = v10 - v6;
  if ((_DWORD)v9 - 1 != a3)
  {
    _platform_memmove();
    LODWORD(v12) = a3 + 2;
    if (a3 + 2 <= (int)v9)
    {
      v12 = (int)v12;
      v13 = a3;
      do
      {
        v14 = v5[v13 + 3];
        v15 = v5[v12];
        if (v14)
        {
          v5[v13] = v15 + v11;
          v14 += v11;
        }
        else
        {
          v5[v13] = v15;
        }
        v5[v13 + 1] = v14;
        v12 += 2;
        v13 += 2;
      }
      while (v12 <= v9);
    }
    if (a1[79] == a3)
      a1[79] = a3 - 2;
  }
  v5[v9] = v5[(unsigned __int16)*v5 + 2] + v11;
  v5[v9 - 1] = v11 + v5[v9 + 1] + 4;
  *v5 = v9 - 2;
  --a1[14];
  *(_BYTE *)(a2 + 40) |= 1u;
  return 0;
}

uint64_t __split_page(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int v4;
  _DWORD *v5;
  uint64_t v6;
  unint64_t buf;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int16 *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  int v15;
  unsigned __int16 *v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  unsigned __int16 v22;
  unsigned __int16 v23;
  unsigned __int16 v24;
  unsigned __int16 *v25;
  unint64_t v26;
  unsigned __int16 v27;
  uint64_t result;
  unsigned __int16 v29;
  unsigned __int16 v30;
  unsigned __int16 *v31;
  unsigned __int16 *v32;
  unsigned int v33;
  unsigned __int16 v34;
  uint64_t v35;
  unsigned int v36;
  unsigned __int16 v37;
  unsigned __int16 v38;
  unsigned __int16 *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unint64_t v51;
  uint64_t v52;
  unsigned __int16 *v53;
  uint64_t v54;
  unsigned __int16 v55;
  unsigned __int16 v56;
  unsigned __int16 v57;
  uint64_t v58;
  unsigned __int16 *v59;
  unint64_t v60;
  uint64_t v61;
  unsigned __int16 *v62;
  uint64_t v63;
  unsigned __int16 v64;
  unsigned __int16 v65;
  unsigned __int16 v66;
  _BYTE v67[12];
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  uint64_t v73;
  int v74;
  _DWORD *v75;
  int v76;
  unsigned int v77;
  unsigned __int16 v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;

  v4 = a2;
  v5 = (_DWORD *)a1;
  v6 = *(unsigned int *)(a1 + 12);
  buf = __get_buf(a1, a2, 0, 0);
  if (!buf)
    return 0xFFFFFFFFLL;
  v8 = buf;
  v9 = __get_buf((uint64_t)v5, a3, 0, 0);
  if (!v9)
    return 0xFFFFFFFFLL;
  v10 = v9;
  *(_BYTE *)(v8 + 40) |= 9u;
  *(_BYTE *)(v9 + 40) |= 9u;
  v11 = *(unsigned __int16 **)(v8 + 32);
  LODWORD(v12) = *v11;
  if (v12 < 2)
  {
    v27 = 0;
    goto LABEL_16;
  }
  v69 = v9;
  v70 = v8;
  v13 = 0;
  v14 = *(unsigned __int16 **)(v9 + 32);
  v76 = 1;
  v78 = 0;
  v15 = v6;
  v75 = v5;
  v74 = v4;
  while (1)
  {
    v16 = &v11[v13];
    if (v16[2] <= 3u)
      break;
    v17 = v16[1];
    v18 = v15 - v17;
    if (__call_hash((uint64_t)v5, (uint64_t)v11 + v17, (unsigned __int16)v15 - v17) == v4)
    {
      if ((unsigned __int16)v6 == (unsigned __int16)v15)
      {
        v6 = v16[2];
        v19 = v76;
      }
      else
      {
        v6 = v16[2] + (_DWORD)v6 - v15;
        _platform_memmove();
        v19 = v76;
        v25 = &v11[v76];
        *v25 = v16[1] + v6 - v16[2];
        v25[1] = v6;
      }
      v76 = v19 + 2;
    }
    else
    {
      v20 = v16[1] - v16[2];
      v79 = v6;
      v21 = *v14;
      v22 = v14[v21 + 2] - v18;
      _platform_memmove();
      v14[(unsigned __int16)(v21 + 1)] = v22;
      v23 = v22 - v20;
      v5 = v75;
      v4 = v74;
      _platform_memmove();
      v24 = v21 + 2;
      v6 = v79;
      v14[v24] = v23;
      *v14 = v24;
      v14[v24 + 1] = v23 - 2 * v24 - 6;
      v14[v24 + 2] = v23;
      v78 += 2;
    }
    v15 = v16[2];
    v12 = *v11;
    v26 = v13 + 3;
    v13 += 2;
    if (v26 >= v12)
    {
      v10 = v69;
      v8 = v70;
      v27 = v78;
LABEL_16:
      result = 0;
      v29 = v12 - v27;
      *v11 = v29;
      v30 = v6 - 2 * v29 - 6;
      v31 = &v11[v29];
      v31[1] = v30;
      v31[2] = v6;
      goto LABEL_59;
    }
  }
  v81 = 0u;
  v82 = 0u;
  v8 = v70;
  v32 = *(unsigned __int16 **)(v70 + 32);
  LOWORD(v33) = *v32;
  if (*v32)
  {
    *(_DWORD *)&v67[8] = 0;
    v68 = v70;
    *(_QWORD *)v67 = v78;
    v34 = v33 - 1;
    v71 = *(unsigned __int16 **)(v69 + 32);
    v72 = *(unsigned __int16 **)(v70 + 32);
    v35 = v70;
    v73 = v69;
    while (1)
    {
      if (v32[2] - 4 >= 0xFFFFFFFD)
      {
        if (__big_split((uint64_t)v5, v35, v73, v68, *(_DWORD *)(v68 + 24), v4, (uint64_t)&v81))
        {
LABEL_52:
          result = 0xFFFFFFFFLL;
LABEL_57:
          v8 = v70;
          goto LABEL_58;
        }
        v35 = *((_QWORD *)&v81 + 1);
        v10 = v69;
        v8 = v70;
        if (!*((_QWORD *)&v81 + 1) || !(_QWORD)v81)
        {
          result = 0xFFFFFFFFLL;
          goto LABEL_59;
        }
        if (!(_QWORD)v82)
        {
          result = 0;
          goto LABEL_59;
        }
        v72 = *(unsigned __int16 **)(*((_QWORD *)&v81 + 1) + 32);
        v73 = v81;
        v71 = *(unsigned __int16 **)(v81 + 32);
        *(_QWORD *)&v67[4] = v82;
        v68 = v82;
        v32 = *(unsigned __int16 **)(v82 + 32);
      }
      else if (!v32[v34 + 1])
      {
        v36 = v32[v34];
        v37 = v33 - *(_WORD *)v67 - 2;
        *v32 = v37;
        v38 = v6 - 2 * v37 - 6;
        v39 = &v32[v37];
        v39[1] = v38;
        v39[2] = v6;
        v40 = __get_buf((uint64_t)v5, v36, v68, 0);
        if (!v40)
          goto LABEL_52;
        v32 = *(unsigned __int16 **)(v40 + 32);
        v6 = v5[3];
        v68 = v40;
        if (*(_QWORD *)&v67[4])
        {
          v41 = v40;
          __free_ovflpage(v5, *(uint64_t *)&v67[4]);
          *(_WORD *)v67 = 0;
          *(_QWORD *)&v67[4] = v41;
        }
        else
        {
          *(_WORD *)v67 = 0;
          *(_QWORD *)&v67[4] = v40;
        }
      }
      v33 = *v32;
      v80 = v6;
      if (v33 < 2 || (v42 = v32[2], v42 < 4))
      {
        v34 = 1;
      }
      else
      {
        v43 = *((unsigned __int16 *)v5 + 6);
        v44 = 1;
        v34 = 1;
        while (1)
        {
          v45 = v42;
          v46 = v32[v44];
          v47 = v43 - v46;
          v48 = v46 - v45;
          v77 = v45;
          if (__call_hash((uint64_t)v5, (uint64_t)v32 + v46, v43 - v46) == v4)
          {
            if (v72[2] >= 4u && (v49 = *v72, v50 = &v72[v49], v47 + v48 + 8 <= (unint64_t)v50[1]))
            {
              v65 = v50[2] - v47;
              _platform_memmove();
              v72[(unsigned __int16)(v49 + 1)] = v65;
              v56 = v65 - v48;
              _platform_memmove();
              v57 = v49 + 2;
              v72[(unsigned __int16)(v49 + 2)] = v65 - v48;
              *v72 = v49 + 2;
              v53 = v72;
              v52 = v35;
            }
            else
            {
              v51 = __add_ovflpage((uint64_t)v5, v35);
              if (!v51)
                goto LABEL_52;
              v52 = v51;
              v53 = *(unsigned __int16 **)(v51 + 32);
              v54 = *v53;
              v55 = v53[v54 + 2] - v47;
              _platform_memmove();
              v53[(unsigned __int16)(v54 + 1)] = v55;
              v56 = v55 - v48;
              _platform_memmove();
              v57 = v54 + 2;
              v53[(unsigned __int16)(v54 + 2)] = v55 - v48;
              *v53 = v54 + 2;
              v35 = v52;
              v72 = v53;
            }
          }
          else if (v71[2] >= 4u && (v58 = *v71, v59 = &v71[v58], v47 + v48 + 8 <= (unint64_t)v59[1]))
          {
            v66 = v59[2] - v47;
            _platform_memmove();
            v71[(unsigned __int16)(v58 + 1)] = v66;
            v56 = v66 - v48;
            _platform_memmove();
            v57 = v58 + 2;
            v71[(unsigned __int16)(v58 + 2)] = v66 - v48;
            *v71 = v58 + 2;
            v53 = v71;
            v52 = v73;
          }
          else
          {
            v60 = __add_ovflpage((uint64_t)v5, v73);
            if (!v60)
              goto LABEL_52;
            v52 = v60;
            v53 = *(unsigned __int16 **)(v60 + 32);
            v61 = *v53;
            v62 = v32;
            v63 = v35;
            v64 = v53[v61 + 2] - v47;
            _platform_memmove();
            v53[(unsigned __int16)(v61 + 1)] = v64;
            v56 = v64 - v48;
            v35 = v63;
            v32 = v62;
            _platform_memmove();
            v57 = v61 + 2;
            v53[(unsigned __int16)(v61 + 2)] = v56;
            *v53 = v61 + 2;
            v73 = v52;
            v71 = v53;
          }
          v53[v57 + 1] = v56 - 2 * v57 - 6;
          v53[v57 + 2] = v56;
          *(_BYTE *)(v52 + 40) |= 1u;
          v34 += 2;
          v33 = *v32;
          if (v33 <= v34)
            break;
          v44 = v34;
          v42 = v32[v34 + 1];
          v5 = v75;
          v4 = v74;
          v43 = v77;
          if (v42 < 4)
            goto LABEL_47;
        }
        v5 = v75;
        v4 = v74;
      }
LABEL_47:
      v6 = v80;
      if (v33 <= v34)
      {
        if (*(_QWORD *)&v67[4])
          __free_ovflpage(v5, *(uint64_t *)&v67[4]);
        result = 0;
        goto LABEL_57;
      }
    }
  }
  result = 0;
LABEL_58:
  v10 = v69;
LABEL_59:
  *(_BYTE *)(v8 + 40) &= ~8u;
  *(_BYTE *)(v10 + 40) &= ~8u;
  return result;
}

uint64_t putpair(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int16 v6;
  uint64_t result;
  int v8;

  v5 = (unsigned __int16)*a1;
  v6 = a1[v5 + 2] - *(_QWORD *)(a2 + 8);
  _platform_memmove();
  a1[(unsigned __int16)(v5 + 1)] = v6;
  LOWORD(a3) = v6 - *(_QWORD *)(a3 + 8);
  result = _platform_memmove();
  a1[(unsigned __int16)(v5 + 2)] = a3;
  *a1 = v5 + 2;
  v8 = (unsigned __int16)(v5 + 2);
  a1[v8 + 1] = a3 - 2 * (v5 + 2) - 6;
  a1[v8 + 2] = a3;
  return result;
}

uint64_t __addel(_DWORD *a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v6;
  unsigned __int16 *i;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t buf;
  unint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unsigned int v18;
  unsigned int v19;
  unsigned __int16 v20;
  unsigned int v21;
  unsigned __int16 v22;
  __int16 v23;
  unsigned __int16 v24;
  unsigned __int16 *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned __int16 v28;

  v6 = a2;
  for (i = *(unsigned __int16 **)(a2 + 32); ; i = *(unsigned __int16 **)(buf + 32))
  {
    v9 = *i;
    if (!*i)
      goto LABEL_12;
    v10 = i[2];
    if (v10 < 4)
    {
      if (v9 != 2 || v10 != 3)
      {
        v11 = *i;
        goto LABEL_9;
      }
      v9 = 2;
LABEL_12:
      if (i[2] >= 4u && a3[1] + a4[1] + 8 <= (unint64_t)i[v9 + 1])
      {
        putpair(i, (uint64_t)a3, (uint64_t)a4);
        goto LABEL_21;
      }
      v14 = __add_ovflpage((uint64_t)a1, v6);
      if (v14)
      {
        v15 = v14;
        v16 = *(unsigned __int16 **)(v14 + 32);
        if (v16[2] >= 4u && a3[1] + a4[1] + 8 <= (unint64_t)v16[*v16 + 1])
        {
          putpair(v16, (uint64_t)a3, (uint64_t)a4);
        }
        else if (__big_insert((uint64_t)a1, v15, a3, a4))
        {
          return 0xFFFFFFFFLL;
        }
        *(_BYTE *)(v15 + 40) |= 1u;
        ++a1[14];
        return __expand_table((uint64_t)a1);
      }
      return 0xFFFFFFFFLL;
    }
    if (i[*i])
      goto LABEL_12;
    v11 = *i;
    v12 = a3[1];
    if (v12 + a4[1] + 4 <= (unint64_t)i[v11 + 1])
      break;
LABEL_9:
    buf = __get_buf((uint64_t)a1, i[v11 - 1], v6, 0);
    v6 = buf;
    if (!buf)
      return 0xFFFFFFFFLL;
  }
  v18 = v9 + 1;
  v28 = i[v9 + 1];
  v19 = v9 + 2;
  v20 = i[v9 + 2];
  v21 = v9 - 1;
  v22 = i[v21];
  v23 = v20 - v12;
  i[v21] = v20 - v12;
  _platform_memmove();
  v24 = v23 - a4[1];
  i[v11] = v24;
  _platform_memmove();
  i[v18] = v22;
  *i = v19;
  i[v19] = 0;
  v25 = &i[(unsigned __int16)v19];
  v25[1] = v28 - (*((_WORD *)a3 + 4) + *((_WORD *)a4 + 4)) - 4;
  v25[2] = v24;
LABEL_21:
  *(_BYTE *)(v6 + 40) |= 1u;
  v26 = a1[13];
  v27 = a1[14] + 1;
  a1[14] = v27;
  if (v27 / (a1[10] + 1) <= v26)
    return 0;
  return __expand_table((uint64_t)a1);
}

unint64_t __add_ovflpage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _WORD *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unint64_t result;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  signed int v27;
  int *v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int *v41;
  int v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  _WORD *v47;
  uint64_t v48;
  int *v49;
  int v50;
  int v51;
  int v52;
  _WORD *v54;

  v2 = a2;
  v4 = *(_WORD **)(a2 + 32);
  if (*(_DWORD *)(a1 + 52) == 0x10000)
  {
    v5 = (unsigned __int16)*v4;
    if (v5 >= 8)
      v6 = v5 >> 1;
    else
      v6 = 4;
    *(_DWORD *)(a1 + 52) = v6;
  }
  *(_BYTE *)(a2 + 40) |= 1u;
  v7 = *(int *)(a1 + 32);
  v8 = a1 + 4 * v7;
  v11 = *(_DWORD *)(v8 + 68);
  v10 = (int *)(v8 + 68);
  v9 = v11;
  v12 = (8 * *(_DWORD *)(a1 + 12) - 1) & (v11 - 1);
  v13 = (v11 - 1) >> (*(_BYTE *)(a1 + 16) + 3);
  v14 = *(int *)(a1 + 36) >> (*(_BYTE *)(a1 + 16) + 3);
  if (v14 <= v13)
  {
    v54 = v4;
    v18 = v14;
    v19 = v13;
    v52 = v13;
    v20 = v13 + 1;
    v21 = 8 * v14;
    v22 = v14;
    while (1)
    {
      result = *(_QWORD *)(a1 + 8 * v22 + 336);
      if (!result)
      {
        result = (unint64_t)fetch_bitmap((_DWORD *)a1, v22);
        if (!result)
          return result;
      }
      v23 = v12;
      if (v22 != v19)
        v23 = 8 * *(_DWORD *)(a1 + 12) - 1;
      if (v22 == v18)
      {
        v24 = (8 * *(_DWORD *)(a1 + 12) - 1) & *(_DWORD *)(a1 + 36);
        v25 = v24 + 31;
        if (v24 < 0 == __OFSUB__(v22, v18))
          v25 = (8 * *(_DWORD *)(a1 + 12) - 1) & *(_DWORD *)(a1 + 36);
        v26 = v25 >> 5;
        v27 = v24 & 0xFFFFFFE0;
      }
      else
      {
        v27 = 0;
        v26 = 0;
      }
      if (v27 <= v23)
      {
        v28 = (int *)(result + 4 * v26);
        while (1)
        {
          v30 = *v28++;
          v29 = v30;
          if (v30 != -1)
            break;
          v27 += 32;
          if (v27 > v23)
            goto LABEL_26;
        }
        v31 = 0;
        if ((v29 & 1) != 0)
        {
          v32 = 1;
          v4 = v54;
          do
          {
            v33 = v31++;
            if (v33 > 0x1E)
              break;
            v34 = v29 & (2 * v32);
            v32 *= 2;
          }
          while (v34);
        }
        else
        {
          v4 = v54;
        }
        v35 = v31 + v27 + 31;
        if ((int)(v31 + v27) >= 0)
          v35 = v31 + v27;
        *(_DWORD *)(result + 4 * (v35 >> 5)) |= 1 << v31;
        v36 = *(_DWORD *)(a1 + 12);
        v37 = v31 + v27 + v36 * v21;
        v38 = v37 + 1;
        if (v37 + 1 >= *(_DWORD *)(a1 + 36))
          *(_DWORD *)(a1 + 36) = v37;
        if ((int)v7 < 1)
        {
          LOWORD(v39) = 0;
        }
        else
        {
          v39 = 0;
          while (v38 > *(_DWORD *)(a1 + 68 + 4 * v39))
          {
            if (v7 == ++v39)
            {
              LODWORD(v39) = v7;
              break;
            }
          }
          if ((_DWORD)v39)
            v38 = v31 + v36 * v21 - *(_DWORD *)(a1 + 4 * (int)v39 + 64) + v27 + 1;
        }
        v2 = a2;
        if (v38 < 2047)
        {
          LOWORD(v17) = (_WORD)v39 << 11;
          goto LABEL_57;
        }
        goto LABEL_52;
      }
LABEL_26:
      ++v22;
      v21 += 8;
      if (v20 == (_DWORD)v22)
      {
        v9 = *v10;
        v2 = a2;
        v4 = v54;
        v13 = v52;
        goto LABEL_8;
      }
    }
  }
  result = 0;
LABEL_8:
  *(_DWORD *)(a1 + 36) = v9;
  v16 = *v10;
  v17 = *v10 + 1;
  *v10 = v17;
  if (!(_DWORD)v7)
  {
    if (v16 <= 2046)
    {
      LODWORD(v7) = 0;
      goto LABEL_50;
    }
    goto LABEL_45;
  }
  v17 -= *(_DWORD *)(a1 + 4 * ((int)v7 - 1) + 68);
  if (v17 > 2047)
  {
    if ((int)v7 >= 31)
      goto LABEL_52;
LABEL_45:
    LODWORD(v7) = v7 + 1;
    *(_DWORD *)(a1 + 32) = v7;
    v40 = *v10;
    *(_DWORD *)(a1 + 4 * (int)v7 + 68) = *v10;
    *v10 = v40 - 1;
    v17 = 1;
  }
LABEL_50:
  if (v12 == 8 * *(_DWORD *)(a1 + 12) - 1)
  {
    if (v13 >= 31)
    {
LABEL_52:
      write_NOCANCEL();
      v41 = __error();
      result = 0;
      *v41 = 27;
      return result;
    }
    if (__ibitmap(a1, v17 + ((_WORD)v7 << 11), 1, v13 + 1))
      return 0;
    v48 = a1 + 4 * (int)v7;
    v50 = *(_DWORD *)(v48 + 68);
    v49 = (int *)(v48 + 68);
    *v49 = v50 + 1;
    if (v17 < 2047)
    {
      LOWORD(v17) = v17 + 1;
    }
    else
    {
      if ((int)v7 >= 31)
        goto LABEL_52;
      LOWORD(v17) = 0;
      v7 = (int)v7 + 1;
      *(_DWORD *)(a1 + 32) = v7;
      v51 = *v49;
      *(_DWORD *)(a1 + 4 * v7 + 68) = *v49;
      *v49 = v51 - 1;
    }
  }
  else
  {
    v42 = v12 + 32;
    if (v12 >= -1)
      v42 = v12 + 1;
    *(_DWORD *)(result + 4 * (v42 >> 5)) |= 1 << (v12 + 1);
  }
  LOWORD(v38) = (_WORD)v7 << 11;
LABEL_57:
  v43 = v38 + v17;
  if (!((_WORD)v38 + (_WORD)v17))
    return 0;
  result = __get_buf(a1, (unsigned __int16)(v38 + v17), v2, 1);
  *(_QWORD *)(v2 + 16) = result;
  if (result)
  {
    *(_BYTE *)(result + 40) |= 1u;
    v44 = (unsigned __int16)*v4;
    v45 = v44 + 2;
    v46 = v4[v44 + 2];
    v47 = &v4[v44];
    v47[4] = v46;
    v47[3] = v47[1] - 4;
    v47[1] = v43;
    v4[v45] = 0;
    *v4 = v45;
  }
  return result;
}

uint64_t __get_page(_DWORD *a1, unsigned __int16 *a2, unsigned int a3, int a4, int a5, int a6)
{
  int v7;
  uint64_t result;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  __int16 v15;
  unsigned __int16 v16;
  uint64_t v17;
  char *v18;

  v7 = a1[3];
  if (!a5 || a1[71] == -1)
  {
    result = 0;
    *a2 = 0;
    a2[1] = v7 - 6;
    a2[2] = v7;
    return result;
  }
  if (a4)
  {
    if (a3)
      __log2(a3 + 1);
  }
  else
  {
    v11 = 1 << (a3 >> 11);
    if (v11 != 1)
      __log2(v11);
  }
  result = pread_NOCANCEL();
  if ((_DWORD)result != -1)
  {
    if ((_DWORD)result)
    {
      if (v7 != (_DWORD)result)
      {
        *__error() = 79;
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      *a2 = 0;
    }
    if (a6)
    {
      if (a1[2] != 1234)
      {
        v12 = a1[3];
        if ((int)v12 >= 4)
        {
          v13 = v12 >> 2;
          v14 = (char *)a2 + 1;
          do
          {
            *(_DWORD *)(v14 - 1) = bswap32(*(_DWORD *)(v14 - 1));
            v14 += 4;
            --v13;
          }
          while (v13);
        }
      }
      return 0;
    }
    v15 = *a2;
    if (*a2)
    {
      if (a1[2] == 1234)
        return 0;
      *(_BYTE *)a2 = HIBYTE(v15);
      *((_BYTE *)a2 + 1) = v15;
      v17 = *a2 + 2;
      v18 = (char *)a2 + 3;
      do
      {
        result = 0;
        *(_WORD *)(v18 - 1) = bswap32(*(unsigned __int16 *)(v18 - 1)) >> 16;
        v18 += 2;
        --v17;
      }
      while (v17);
    }
    else
    {
      result = 0;
      *a2 = 0;
      v16 = *((_WORD *)a1 + 6);
      a2[1] = v16 - 6;
      a2[2] = v16;
    }
  }
  return result;
}

uint64_t __put_page(_DWORD *a1, _WORD *a2, unsigned int a3, int a4, int a5)
{
  int v10;
  int v11;
  char *v12;
  int v13;
  uint64_t v14;
  char *v15;
  const char *v16;
  int *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  unsigned int v23;
  uint64_t result;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  sigset_t v28;
  sigset_t v29;
  char __str[1024];

  v10 = a1[3];
  if (a1[71] == -1)
  {
    if (issetugid())
      v12 = 0;
    else
      v12 = getenv("TMPDIR");
    v28 = 0;
    v16 = "/tmp";
    if (v12)
      v16 = v12;
    if (snprintf(__str, 0x400uLL, "%s/_hash.XXXXXX", v16) >= 0x400)
    {
      v17 = __error();
      v18 = 63;
LABEL_41:
      *v17 = v18;
      return 0xFFFFFFFFLL;
    }
    v29 = -1;
    sigprocmask(1, &v29, &v28);
    v19 = mkstemp(__str);
    a1[71] = v19;
    if (v19 != -1)
    {
      unlink(__str);
      fcntl_NOCANCEL();
    }
    sigprocmask(3, &v28, 0);
    if (a1[71] == -1)
      return 0xFFFFFFFFLL;
  }
  if (a1[2] == 1234)
  {
    v11 = 0;
    if (!a4)
      goto LABEL_30;
  }
  else if (a5)
  {
    v13 = a1[3];
    v11 = v13 >> 2;
    if (v13 >= 4)
    {
      if (v11 <= 1)
        v14 = 1;
      else
        v14 = v11;
      v15 = (char *)a2 + 1;
      do
      {
        *(_DWORD *)(v15 - 1) = bswap32(*(_DWORD *)(v15 - 1));
        v15 += 4;
        --v14;
      }
      while (v14);
    }
    if (!a4)
      goto LABEL_30;
  }
  else
  {
    v20 = (unsigned __int16)*a2;
    v21 = v20 + 3;
    v22 = a2;
    do
    {
      *v22 = bswap32((unsigned __int16)*v22) >> 16;
      ++v22;
      --v21;
    }
    while (v21);
    v11 = v20 + 2;
    if (!a4)
    {
LABEL_30:
      v23 = 1 << (a3 >> 11);
      if (v23 != 1)
        __log2(v23);
      goto LABEL_32;
    }
  }
  if (a3)
    __log2(a3 + 1);
LABEL_32:
  result = pwrite_NOCANCEL();
  if ((_DWORD)result == -1)
    return result;
  if (v10 != (_DWORD)result)
  {
    v17 = __error();
    v18 = 79;
    goto LABEL_41;
  }
  if (a1[2] == 1234)
    return 0;
  if (a5)
  {
    if (v11 >= 1)
    {
      v25 = v11;
      v26 = (char *)a2 + 1;
      do
      {
        *(_DWORD *)(v26 - 1) = bswap32(*(_DWORD *)(v26 - 1));
        v26 += 4;
        --v25;
      }
      while (v25);
    }
    return 0;
  }
  if (v11 < 0)
    return 0;
  v27 = (v11 + 1);
  result = 0;
  do
  {
    *a2 = bswap32((unsigned __int16)*a2) >> 16;
    ++a2;
    --v27;
  }
  while (v27);
  return result;
}

uint64_t __ibitmap(uint64_t a1, __int16 a2, int a3, int a4)
{
  _DWORD *v8;
  _DWORD *v9;
  uint64_t result;

  v8 = malloc_type_malloc(*(int *)(a1 + 12), 0xA0BB9D05uLL);
  if (!v8)
    return 1;
  v9 = v8;
  ++*(_DWORD *)(a1 + 592);
  _platform_bzero();
  _platform_memset();
  result = 0;
  v9[(a3 - 1) >> 5] = -1 << a3;
  *v9 |= 1u;
  *(_WORD *)(a1 + 2 * a4 + 196) = a2;
  *(_QWORD *)(a1 + 8 * a4 + 336) = v9;
  return result;
}

uint64_t __free_ovflpage(_DWORD *a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  unsigned __int16 *bitmap;
  int v13;
  int v14;

  v4 = *(unsigned __int16 *)(a2 + 24);
  if (v4 >= 0x800)
    v5 = a1[(v4 >> 11) + 16];
  else
    v5 = 0;
  v6 = v5 + (v4 & 0x7FF);
  v7 = v6 - 1;
  v8 = a1[9];
  v9 = __OFSUB__(v6, v8);
  if (v6 <= v8)
    a1[9] = v7;
  v10 = a1[3];
  v11 = v7 >> (a1[4] + 3);
  bitmap = *(unsigned __int16 **)&a1[2 * v11 + 84];
  if (!bitmap)
    bitmap = fetch_bitmap(a1, v11);
  v13 = (8 * v10 - 1) & v7;
  v14 = v13 + 31;
  if (v13 < 0 == v9)
    v14 = (8 * v10 - 1) & v7;
  *(_DWORD *)&bitmap[2 * (v14 >> 5)] &= ~(1 << v13);
  return __reclaim_buf((uint64_t)a1, (uint64_t *)a2);
}

unsigned __int16 *fetch_bitmap(_DWORD *a1, int a2)
{
  unsigned __int16 *result;
  _DWORD *v5;
  uint64_t v6;
  unsigned __int16 **v7;
  int page;

  if (a1[148] <= a2)
    return 0;
  result = (unsigned __int16 *)malloc_type_malloc((int)a1[3], 0x2D21B9A9uLL);
  v5 = &a1[2 * a2];
  *((_QWORD *)v5 + 42) = result;
  if (result)
  {
    v6 = a2;
    v7 = (unsigned __int16 **)(v5 + 84);
    page = __get_page(a1, result, *((unsigned __int16 *)a1 + v6 + 98), 0, 1, 1);
    result = *v7;
    if (page)
    {
      free(result);
      return 0;
    }
  }
  return result;
}

DBM *__cdecl dbm_open(const char *a1, int a2, mode_t a3)
{
  uint64_t v3;
  int *v5;
  DBM *result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12[1024];

  v3 = a3;
  v11 = 0;
  v7 = 0x2800001000;
  v8 = 1;
  v9 = 0;
  v10 = 0;
  if ((unint64_t)_platform_strlen() < 0x3FD)
  {
    _platform_strcpy();
    *(_DWORD *)&v12[_platform_strlen()] = 6448174;
    return (DBM *)__hash_open(v12, a2, v3, (uint64_t)&v7);
  }
  else
  {
    v5 = __error();
    result = 0;
    *v5 = 63;
  }
  return result;
}

void dbm_close(DBM *a1)
{
  (*(void (**)(void))&a1->__opaque[8])();
}

datum dbm_fetch(DBM *a1, datum a2)
{
  int v2;
  size_t v3;
  void *v4;
  void *v5;
  size_t v6;
  datum v7;
  datum result;

  v5 = 0;
  v6 = 0;
  v7 = a2;
  v2 = (*(uint64_t (**)(DBM *, datum *, void **, _QWORD))&a1->__opaque[24])(a1, &v7, &v5, 0);
  if (v2)
    v3 = 0;
  else
    v3 = v6;
  if (v2)
    v4 = 0;
  else
    v4 = v5;
  result.dsize = v3;
  result.dptr = v4;
  return result;
}

datum dbm_firstkey(DBM *a1)
{
  uint64_t v1;
  int v2;
  char v3;
  void *v4;
  size_t v5;
  _QWORD v6[2];
  void *v7;
  size_t v8;
  datum result;

  v7 = 0;
  v8 = 0;
  v6[0] = 0;
  v6[1] = 0;
  v1 = *(_QWORD *)&a1->__opaque[56];
  v2 = (*(uint64_t (**)(DBM *, void **, _QWORD *, uint64_t))&a1->__opaque[40])(a1, &v7, v6, 3);
  v3 = *(_BYTE *)(v1 + 656);
  if (v2)
  {
    v4 = 0;
    *(_BYTE *)(v1 + 656) = v3 | 1;
  }
  else
  {
    *(_BYTE *)(v1 + 656) = v3 & 0xFE;
    v4 = v7;
  }
  v5 = v8;
  result.dsize = v5;
  result.dptr = v4;
  return result;
}

datum dbm_nextkey(DBM *a1)
{
  void *v2;
  uint64_t v3;
  size_t v4;
  _QWORD v5[2];
  void *v6;
  size_t v7;
  datum result;

  v2 = 0;
  v6 = 0;
  v7 = 0;
  v3 = *(_QWORD *)&a1->__opaque[56];
  if ((*(_BYTE *)(v3 + 656) & 1) == 0)
  {
    v5[0] = 0;
    v5[1] = 0;
    if ((*(unsigned int (**)(DBM *, void **, _QWORD *, uint64_t))&a1->__opaque[40])(a1, &v6, v5, 7))
    {
      v2 = 0;
      *(_BYTE *)(v3 + 656) |= 1u;
    }
    else
    {
      v2 = v6;
    }
  }
  v4 = v7;
  result.dsize = v4;
  result.dptr = v2;
  return result;
}

int dbm_delete(DBM *a1, datum a2)
{
  datum v3;

  v3 = a2;
  if ((*(unsigned int (**)(DBM *, datum *, _QWORD))&a1->__opaque[16])(a1, &v3, 0))
    return -1;
  else
    return 0;
}

int dbm_store(DBM *a1, datum a2, datum a3, int a4)
{
  datum v5;
  datum v6;

  v6 = a2;
  v5 = a3;
  return (*(uint64_t (**)(DBM *, datum *, datum *, _QWORD))&a1->__opaque[32])(a1, &v6, &v5, 8 * (a4 == 0));
}

int dbm_error(DBM *a1)
{
  return *(_DWORD *)(*(_QWORD *)&a1->__opaque[56] + 320);
}

int dbm_clearerr(DBM *a1)
{
  *(_DWORD *)(*(_QWORD *)&a1->__opaque[56] + 320) = 0;
  return 0;
}

int dbm_dirfno(DBM *a1)
{
  return *(_DWORD *)(*(_QWORD *)&a1->__opaque[56] + 284);
}

MPOOL *__cdecl mpool_open(void *a1, int a2, pgno_t a3, pgno_t a4)
{
  MPOOL *result;
  uint64_t v8;
  __int128 v9;
  double *v10;
  MPOOL::_hqh *v11;
  int *v12;
  stat v13;

  memset(&v13, 0, sizeof(v13));
  if (fstat(a2, &v13))
    return 0;
  if ((v13.st_mode & 0xF000) == 0x8000)
  {
    result = (MPOOL *)malloc_type_calloc(1uLL, 0x848uLL, 0x10A004011CD96E6uLL);
    if (result)
    {
      v8 = 0;
      result->lqh.tqh_first = 0;
      result->lqh.tqh_last = &result->lqh.tqh_first;
      v9 = 0uLL;
      do
      {
        v10 = (double *)&result->hqh[v8];
        v11 = &result->hqh[v8 + 1];
        vst2q_f64(v10, *(float64x2x2_t *)&v9);
        v8 += 2;
      }
      while (v8 != 128);
      result->maxcache = a4;
      result->npages = v13.st_size / a3;
      result->pagesize = a3;
      result->fd = a2;
    }
  }
  else
  {
    v12 = __error();
    result = 0;
    *v12 = 29;
  }
  return result;
}

void mpool_filter(MPOOL *a1, void (__cdecl *a2)(void *, pgno_t, void *), void (__cdecl *a3)(void *, pgno_t, void *), void *a4)
{
  a1->pgin = a2;
  a1->pgout = a3;
  a1->pgcookie = a4;
}

void *__cdecl mpool_new(MPOOL *a1, pgno_t *a2)
{
  void *result;
  pgno_t npages;
  MPOOL::_lqh *v6;
  void **p_tqh_first;
  _bkt *tqh_first;
  void **p_tqe_prev;
  void **v10;
  _bkt **tqh_last;

  if (a1->npages == -1)
    mpool_new_cold_1();
  result = (void *)mpool_bkt((uint64_t)a1);
  if (result)
  {
    npages = a1->npages;
    a1->npages = npages + 1;
    *((_DWORD *)result + 10) = npages;
    *a2 = npages;
    *((_BYTE *)result + 44) = 2;
    v6 = &a1->lqh + ((*((_DWORD *)result + 10) - 1) & 0x7F);
    tqh_first = v6[1].tqh_first;
    p_tqh_first = (void **)&v6[1].tqh_first;
    *(_QWORD *)result = tqh_first;
    p_tqe_prev = (void **)&tqh_first->hq.tqe_prev;
    if (tqh_first)
      v10 = p_tqe_prev;
    else
      v10 = p_tqh_first + 1;
    *v10 = result;
    *p_tqh_first = result;
    *((_QWORD *)result + 2) = 0;
    *((_QWORD *)result + 1) = p_tqh_first;
    tqh_last = a1->lqh.tqh_last;
    *((_QWORD *)result + 3) = tqh_last;
    *tqh_last = (_bkt *)result;
    a1->lqh.tqh_last = (_bkt **)((char *)result + 16);
    return (void *)*((_QWORD *)result + 4);
  }
  return result;
}

uint64_t mpool_bkt(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  if (*(_DWORD *)(a1 + 2064) >= *(_DWORD *)(a1 + 2068) && (v2 = *(_QWORD *)a1) != 0)
  {
    while ((*(_BYTE *)(v2 + 44) & 2) != 0)
    {
      v2 = *(_QWORD *)(v2 + 16);
      if (!v2)
        goto LABEL_5;
    }
    if ((*(_BYTE *)(v2 + 44) & 1) != 0 && mpool_write((_QWORD *)a1, v2) == -1)
    {
      return 0;
    }
    else
    {
      v5 = *(_QWORD *)v2;
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)(v5 + 8) = *(_QWORD *)(v2 + 8);
        v6 = *(_QWORD **)(v2 + 8);
      }
      else
      {
        v6 = *(_QWORD **)(v2 + 8);
        *(_QWORD *)(a1 + 16 * ((*(_DWORD *)(v2 + 40) - 1) & 0x7F) + 24) = v6;
      }
      *v6 = v5;
      v7 = *(_QWORD *)(v2 + 16);
      v8 = *(_QWORD **)(v2 + 24);
      if (v7)
      {
        *(_QWORD *)(v7 + 24) = v8;
        v8 = *(_QWORD **)(v2 + 24);
      }
      else
      {
        *(_QWORD *)(a1 + 8) = v8;
      }
      *v8 = v7;
    }
  }
  else
  {
LABEL_5:
    v3 = malloc_type_calloc(1uLL, *(_QWORD *)(a1 + 2080) + 48, 0x4F5B7049uLL);
    v2 = (uint64_t)v3;
    if (v3)
    {
      v3[4] = v3 + 6;
      ++*(_DWORD *)(a1 + 2064);
    }
  }
  return v2;
}

void *__cdecl mpool_get(MPOOL *a1, pgno_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v5;
  MPOOL::_hqh *v6;
  _bkt *tqe_next;
  _bkt *v8;
  _bkt **tqe_prev;
  int *v10;
  void *result;
  int v12;
  char *v13;
  int v14;
  _bkt *v15;
  _bkt ***p_tqh_last;
  _bkt **v17;
  void (__cdecl *pgin)(void *, pgno_t, void *);
  _bkt *tqh_first;
  _bkt ***p_tqe_prev;
  _bkt *v21;
  _bkt **v22;
  _bkt **tqh_last;

  if (a1->npages <= a2)
  {
    v10 = __error();
    result = 0;
    v12 = 22;
LABEL_8:
    *v10 = v12;
  }
  else
  {
    v3 = *(_QWORD *)&a2;
    v5 = ((_BYTE)a2 - 1) & 0x7F;
    v6 = &a1->hqh[v5];
    tqe_next = (_bkt *)v6;
    while (1)
    {
      tqe_next = tqe_next->hq.tqe_next;
      if (!tqe_next)
        break;
      if (tqe_next->pgno == a2)
      {
        v8 = tqe_next->hq.tqe_next;
        tqe_prev = tqe_next->hq.tqe_prev;
        if (tqe_next->hq.tqe_next)
        {
          v8->hq.tqe_prev = tqe_prev;
          tqe_prev = tqe_next->hq.tqe_prev;
        }
        else
        {
          a1->hqh[v5].tqh_last = tqe_prev;
        }
        *tqe_prev = v8;
        tqh_first = v6->tqh_first;
        tqe_next->hq.tqe_next = v6->tqh_first;
        if (tqh_first)
          p_tqe_prev = &tqh_first->hq.tqe_prev;
        else
          p_tqe_prev = &a1->hqh[v5].tqh_last;
        *p_tqe_prev = &tqe_next->hq.tqe_next;
        v6->tqh_first = tqe_next;
        tqe_next->hq.tqe_prev = &v6->tqh_first;
        v21 = tqe_next->q.tqe_next;
        v22 = tqe_next->q.tqe_prev;
        if (v21)
        {
          v21->q.tqe_prev = v22;
          v22 = tqe_next->q.tqe_prev;
        }
        else
        {
          a1->lqh.tqh_last = v22;
        }
        *v22 = v21;
        tqh_last = a1->lqh.tqh_last;
        tqe_next->q.tqe_next = 0;
        tqe_next->q.tqe_prev = tqh_last;
        *tqh_last = tqe_next;
        a1->lqh.tqh_last = &tqe_next->q.tqe_next;
        tqe_next->flags |= 2u;
        return tqe_next->page;
      }
    }
    result = (void *)mpool_bkt((uint64_t)a1);
    if (!result)
      return result;
    v13 = (char *)result;
    v14 = pread_NOCANCEL();
    if (a1->pagesize == v14)
    {
      *((_DWORD *)v13 + 10) = v3;
      v13[44] = 2;
      v15 = v6->tqh_first;
      *(_QWORD *)v13 = v6->tqh_first;
      if (v15)
        p_tqh_last = &v15->hq.tqe_prev;
      else
        p_tqh_last = &a1->hqh[v5].tqh_last;
      *p_tqh_last = (_bkt **)v13;
      v6->tqh_first = (_bkt *)v13;
      *((_QWORD *)v13 + 2) = 0;
      *((_QWORD *)v13 + 1) = v6;
      v17 = a1->lqh.tqh_last;
      *((_QWORD *)v13 + 3) = v17;
      *v17 = (_bkt *)v13;
      a1->lqh.tqh_last = (_bkt **)(v13 + 16);
      pgin = a1->pgin;
      if (pgin)
        ((void (*)(void *, uint64_t, _QWORD))pgin)(a1->pgcookie, v3, *((_QWORD *)v13 + 4));
      return (void *)*((_QWORD *)v13 + 4);
    }
    else
    {
      if ((v14 & 0x80000000) == 0)
      {
        v10 = __error();
        result = 0;
        v12 = 79;
        goto LABEL_8;
      }
      return 0;
    }
  }
  return result;
}

int mpool_put(MPOOL *a1, void *a2, unsigned int a3)
{
  *((char *)a2 - 4) = *((char *)a2 - 4) & 0xFD | a3 & 1;
  return 0;
}

int mpool_close(MPOOL *a1)
{
  _bkt *tqh_first;
  _bkt *tqe_next;
  _bkt **tqe_prev;

  tqh_first = a1->lqh.tqh_first;
  if (tqh_first)
  {
    do
    {
      tqe_next = tqh_first->q.tqe_next;
      tqe_prev = tqh_first->q.tqe_prev;
      if (tqe_next)
      {
        tqe_next->q.tqe_prev = tqe_prev;
        tqe_prev = tqh_first->q.tqe_prev;
      }
      else
      {
        a1->lqh.tqh_last = tqe_prev;
      }
      *tqe_prev = tqe_next;
      free(tqh_first);
      tqh_first = a1->lqh.tqh_first;
    }
    while (a1->lqh.tqh_first);
  }
  free(a1);
  return 0;
}

int mpool_sync(MPOOL *a1)
{
  _bkt *i;
  int result;
  void (__cdecl *pgin)(void *, pgno_t, void *);

  for (i = a1->lqh.tqh_first; i; i = i->q.tqe_next)
  {
    if ((i->flags & 1) != 0)
    {
      result = mpool_write(a1, (uint64_t)i);
      if (result == -1)
        return result;
      pgin = a1->pgin;
      if (pgin)
        ((void (*)(void *, _QWORD, void *))pgin)(a1->pgcookie, i->pgno, i->page);
    }
  }
  if (fsync_NOCANCEL())
    return -1;
  else
    return 0;
}

uint64_t mpool_write(_QWORD *a1, uint64_t a2)
{
  void (*v4)(_QWORD, _QWORD, _QWORD);
  uint64_t result;

  v4 = (void (*)(_QWORD, _QWORD, _QWORD))a1[263];
  if (v4)
    v4(a1[264], *(unsigned int *)(a2 + 40), *(_QWORD *)(a2 + 32));
  if (pwrite_NOCANCEL() != a1[260])
    return 0xFFFFFFFFLL;
  result = 0;
  *(_BYTE *)(a2 + 44) &= ~1u;
  return result;
}

uint64_t __rec_close(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t result;
  int v5;
  unsigned int v6;
  int v7;

  v2 = a1[7];
  v3 = *(void **)(v2 + 32);
  if (v3)
  {
    mpool_put(*(MPOOL **)v2, v3, 0);
    *(_QWORD *)(v2 + 32) = 0;
  }
  result = __rec_sync((uint64_t)a1, 0);
  if ((_DWORD)result != -1)
  {
    v5 = *(_DWORD *)(v2 + 636);
    if ((v5 & 0x400) != 0)
    {
      if (munmap(*(void **)(v2 + 592), *(_QWORD *)(v2 + 608)))
        v6 = -1;
      else
        v6 = 0;
      v5 = *(_DWORD *)(v2 + 636);
      if ((v5 & 0x800) != 0)
        goto LABEL_16;
    }
    else
    {
      v6 = 0;
      if ((v5 & 0x800) != 0)
      {
LABEL_16:
        if (__bt_close(a1) == -1)
          return 0xFFFFFFFFLL;
        else
          return v6;
      }
    }
    if ((v5 & 0x40) != 0)
      v7 = fclose(*(FILE **)(v2 + 568));
    else
      v7 = close_NOCANCEL();
    if (v7)
      v6 = -1;
    goto LABEL_16;
  }
  return result;
}

uint64_t __rec_sync(uint64_t a1, int a2)
{
  uint64_t v4;
  void *v5;
  int v7;
  uint64_t v8;
  int v9;
  int i;
  off_t v11;
  int v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v14 = 0;
  v15 = 0;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(void **)(v4 + 32);
  if (v5)
  {
    mpool_put(*(MPOOL **)v4, v5, 0);
    *(_QWORD *)(v4 + 32) = 0;
  }
  if (a2 == 11)
    return __bt_sync(a1, 0);
  v7 = *(_DWORD *)(v4 + 636);
  if ((v7 & 0x3800) != 0x1000)
    return 0;
  if ((v7 & 0x100) != 0
    || (v8 = 0xFFFFFFFFLL, (*(unsigned int (**)(uint64_t, uint64_t))(v4 + 560))(v4, 0xFFFFFFFFLL) != -1))
  {
    if (lseek(*(_DWORD *)(v4 + 576), 0, 0))
      return 0xFFFFFFFFLL;
    v12 = 0;
    v9 = *(_DWORD *)(v4 + 64);
    v13[0] = &v12;
    v13[1] = 4;
    if ((*(_BYTE *)(v4 + 637) & 2) != 0)
    {
      for (i = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *, uint64_t))(a1 + 40))(a1, v13, &v14, 3);
            !i;
            i = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *, uint64_t))(a1 + 40))(a1, v13, &v14, 7))
      {
        if (write_NOCANCEL() != v15)
          return 0xFFFFFFFFLL;
      }
    }
    else
    {
      v18 = v4 + 632;
      v19 = 1;
      for (i = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *, uint64_t))(a1 + 40))(a1, v13, &v14, 3);
            !i;
            i = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *, uint64_t))(a1 + 40))(a1, v13, &v14, 7))
      {
        v16 = v14;
        v17 = v15;
        if (writev_NOCANCEL() != v15 + 1)
          return 0xFFFFFFFFLL;
      }
    }
    *(_DWORD *)(v4 + 64) = v9;
    if (i == -1)
      return 0xFFFFFFFFLL;
    v11 = lseek(*(_DWORD *)(v4 + 576), 0, 1);
    if (v11 == -1 || ftruncate(*(_DWORD *)(v4 + 576), v11))
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      v8 = 0;
      *(_DWORD *)(v4 + 636) &= ~0x1000u;
    }
  }
  return v8;
}

uint64_t __rec_delete(uint64_t a1, unsigned int **a2, int a3)
{
  uint64_t v5;
  void *v6;
  unsigned int v7;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(void **)(v5 + 32);
  if (v6)
  {
    mpool_put(*(MPOOL **)v5, v6, 0);
    *(_QWORD *)(v5 + 32) = 0;
  }
  if (a3 != 1)
  {
    if (!a3)
    {
      v7 = **a2;
      if (v7)
      {
        if (v7 <= *(_DWORD *)(v5 + 616))
        {
          result = rec_rdelete((MPOOL **)v5, v7 - 1);
          if ((_DWORD)result)
            return result;
LABEL_14:
          result = 0;
          *(_DWORD *)(v5 + 636) |= 0x1004u;
          return result;
        }
        return 1;
      }
    }
LABEL_10:
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  if ((*(_BYTE *)(v5 + 68) & 8) == 0)
    goto LABEL_10;
  if (*(_DWORD *)(v5 + 616))
  {
    result = rec_rdelete((MPOOL **)v5, *(_DWORD *)(v5 + 64) - 1);
    if ((_DWORD)result)
      return result;
    --*(_DWORD *)(v5 + 64);
    goto LABEL_14;
  }
  return 1;
}

uint64_t rec_rdelete(MPOOL **a1, unsigned int a2)
{
  uint64_t v3;
  unsigned __int16 *v4;
  BOOL v5;
  MPOOL *v6;
  uint64_t v7;

  v3 = __rec_search((uint64_t)a1, a2, 0);
  if (!v3)
    return 0xFFFFFFFFLL;
  v4 = *(unsigned __int16 **)v3;
  v5 = __rec_dleaf((uint64_t)a1, *(unsigned __int16 **)v3, *(unsigned __int16 *)(v3 + 8)) == 0;
  v6 = *a1;
  if (v5)
    v7 = 0;
  else
    v7 = 0xFFFFFFFFLL;
  mpool_put(v6, v4, v5);
  return v7;
}

uint64_t __rec_dleaf(uint64_t a1, unsigned __int16 *a2, int a3)
{
  __int16 v3;
  _WORD *v6;
  unsigned __int16 *v7;
  char *v8;
  uint64_t result;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned __int16 *v15;
  unsigned int v16;
  __int16 v17;

  v3 = a3;
  v6 = a2 + 10;
  v7 = &a2[a3 + 10];
  v8 = (char *)a2 + *v7;
  if ((v8[4] & 1) == 0 || (result = __ovfl_delete(a1, (pgno_t *)(v8 + 5)), (_DWORD)result != -1))
  {
    v10 = (*(_DWORD *)v8 & 0xFFFFFFFC) + 8;
    _platform_memmove();
    a2[9] += v10;
    v11 = *v7;
    while (v3)
    {
      v12 = (unsigned __int16)*v6;
      if (v12 < v11)
        *v6 = v12 + v10;
      --v3;
      ++v6;
    }
    v13 = a2[8];
    v14 = ((a2 + ((v13 - 20) & 0x1FFFE) - v6 + 20) >> 1) - 1;
    if ((unsigned __int16)((a2 + ((v13 - 20) & 0x1FFFE) - v6 + 20) >> 1) != 1)
    {
      v15 = v6 + 1;
      do
      {
        v16 = *v15;
        if (v16 >= v11)
          v17 = 0;
        else
          v17 = v10;
        *(v15 - 1) = v17 + v16;
        --v14;
        ++v15;
      }
      while ((_WORD)v14);
      LOWORD(v13) = a2[8];
    }
    result = 0;
    a2[8] = v13 - 2;
    --*(_DWORD *)(a1 + 616);
  }
  return result;
}

uint64_t __rec_get(uint64_t a1, unsigned int **a2, _QWORD *a3, int a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unsigned int v11;
  uint64_t v12;
  void **v13;

  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(void **)(v7 + 32);
  if (v8)
  {
    mpool_put(*(MPOOL **)v7, v8, 0);
    *(_QWORD *)(v7 + 32) = 0;
  }
  if (a4 || (v11 = **a2) == 0)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  if (v11 > *(_DWORD *)(v7 + 616))
  {
    if ((*(_BYTE *)(v7 + 637) & 9) != 0)
      return 1;
    v9 = (*(uint64_t (**)(uint64_t, _QWORD))(v7 + 560))(v7, **a2);
    if ((_DWORD)v9)
      return v9;
  }
  v12 = __rec_search(v7, v11 - 1, 2);
  if (!v12)
    return 0xFFFFFFFFLL;
  v13 = (void **)v12;
  v9 = __rec_ret(v7, v12, 0, 0, a3);
  if ((*(_BYTE *)(v7 + 637) & 0x40) != 0)
    mpool_put(*(MPOOL **)v7, *v13, 0);
  else
    *(_QWORD *)(v7 + 32) = *v13;
  return v9;
}

uint64_t __rec_fpipe(uint64_t a1, unsigned int a2)
{
  size_t v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  uint64_t v13[2];

  v4 = *(_QWORD *)(a1 + 624);
  v6 = a1 + 496;
  v5 = *(void **)(a1 + 496);
  if (*(_QWORD *)(v6 + 8) < v4)
  {
    v5 = reallocf(v5, v4);
    *(_QWORD *)(a1 + 496) = v5;
    if (!v5)
      return 0xFFFFFFFFLL;
    v4 = *(_QWORD *)(a1 + 624);
    *(_QWORD *)(a1 + 504) = v4;
  }
  v13[0] = (uint64_t)v5;
  v13[1] = v4;
  v7 = *(_DWORD *)(a1 + 616);
  if (v7 <= a2)
    v8 = a2;
  else
    v8 = *(_DWORD *)(a1 + 616);
  while (v7 != v8)
  {
    v9 = *(_QWORD *)(a1 + 624);
    v10 = *(_BYTE **)(a1 + 496);
    v11 = getc(*(FILE **)(a1 + 568));
    if (v11 == -1)
    {
      if (v9)
LABEL_13:
        _platform_memset();
      LOBYTE(v9) = 1;
    }
    else
    {
      while (--v9)
      {
        *v10++ = v11;
        v11 = getc(*(FILE **)(a1 + 568));
        if (v11 == -1)
          goto LABEL_13;
      }
      *v10 = v11;
    }
    if (__rec_iput(a1, v7, v13, 0))
      return 0xFFFFFFFFLL;
    ++v7;
    if ((v9 & 1) != 0)
    {
      if (v7 < a2)
      {
        *(_DWORD *)(a1 + 636) |= 0x100u;
        return 1;
      }
      return 0;
    }
  }
  return 0;
}

uint64_t __rec_vpipe(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  int v5;
  uint64_t v6;
  char *v7;
  int v8;
  _BOOL4 v9;
  char v11;
  void *v12;
  size_t v13;
  char *v14;
  int v15;
  char *v19;
  char *v20;

  v2 = *(_DWORD *)(a1 + 616);
  if (v2 >= a2)
    return 0;
  v5 = *(unsigned __int8 *)(a1 + 632);
  v19 = 0;
  v20 = 0;
  while (1)
  {
    v7 = *(char **)(a1 + 496);
    v6 = *(_QWORD *)(a1 + 504);
    v8 = getc(*(FILE **)(a1 + 568));
    v9 = v8 == -1;
    if (v8 != -1 && v8 != v5)
    {
      v11 = v8;
      do
      {
        if (!v6)
        {
          v12 = *(void **)(a1 + 496);
          v13 = *(_QWORD *)(a1 + 504) + 256;
          *(_QWORD *)(a1 + 504) = v13;
          v14 = (char *)reallocf(v12, v13);
          *(_QWORD *)(a1 + 496) = v14;
          if (!v14)
            return 0xFFFFFFFFLL;
          v7 = &v14[v7 - (_BYTE *)v12];
          v6 = 256;
        }
        *v7++ = v11;
        --v6;
        v15 = getc(*(FILE **)(a1 + 568));
        v11 = v15;
        v9 = v15 == -1;
      }
      while (v15 != -1 && v15 != v5);
    }
    v19 = *(char **)(a1 + 496);
    v20 = (char *)(v7 - v19);
    if (v9 && v7 == v19)
      break;
    if (__rec_iput(a1, v2, (uint64_t *)&v19, 0))
      return 0xFFFFFFFFLL;
    if (v9)
      break;
    if (++v2 == a2)
      return 0;
  }
  *(_DWORD *)(a1 + 636) |= 0x100u;
  return 1;
}

uint64_t __rec_fmap(uint64_t a1, unsigned int a2)
{
  size_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  uint64_t v16[2];

  v4 = *(_QWORD *)(a1 + 624);
  v6 = a1 + 496;
  v5 = *(void **)(a1 + 496);
  if (*(_QWORD *)(v6 + 8) < v4)
  {
    v5 = reallocf(v5, v4);
    *(_QWORD *)(a1 + 496) = v5;
    if (!v5)
      return 0xFFFFFFFFLL;
    v4 = *(_QWORD *)(a1 + 624);
    *(_QWORD *)(a1 + 504) = v4;
  }
  v16[0] = (uint64_t)v5;
  v16[1] = v4;
  v7 = *(_QWORD *)(a1 + 584);
  v8 = *(_DWORD *)(a1 + 616);
  if (v8 >= a2)
  {
LABEL_18:
    result = 0;
    *(_QWORD *)(a1 + 584) = v7;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 600);
    while (v7 < v9)
    {
      v10 = *(_QWORD *)(a1 + 624);
      if (v10)
      {
        v11 = 0;
        v12 = *(_QWORD *)(a1 + 496);
        do
        {
          *(_BYTE *)(v12 + v11) = *(_BYTE *)(v7 + v11);
          v13 = v11 + 1;
          v14 = v7 + v11 + 1 >= v9 || v10 - 1 == v11;
          ++v11;
        }
        while (!v14);
        v7 += v13;
        if (v10 != v13)
          _platform_memset();
      }
      if (__rec_iput(a1, v8, v16, 0))
        return 0xFFFFFFFFLL;
      if (++v8 == a2)
        goto LABEL_18;
    }
    *(_DWORD *)(a1 + 636) |= 0x100u;
    return 1;
  }
  return result;
}

uint64_t __rec_vmap(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t result;
  unint64_t v11;
  unsigned __int8 *v12;

  v12 = 0;
  v3 = *(_QWORD *)(a1 + 584);
  v4 = *(_DWORD *)(a1 + 616);
  if (v4 >= a2)
  {
LABEL_10:
    result = 0;
    *(_QWORD *)(a1 + 584) = v3;
  }
  else
  {
    v6 = *(unsigned __int8 **)(a1 + 600);
    v7 = *(unsigned __int8 *)(a1 + 632);
    while (1)
    {
      if (v3 >= (unint64_t)v6)
      {
        *(_DWORD *)(a1 + 636) |= 0x100u;
        return 1;
      }
      v11 = v3;
      v8 = &v6[-v3];
      v9 = (unsigned __int8 *)v3;
      while (*v9 != v7)
      {
        ++v9;
        if (!--v8)
        {
          v9 = v6;
          break;
        }
      }
      v12 = &v9[-v3];
      if (__rec_iput(a1, v4, (uint64_t *)&v11, 0))
        return 0xFFFFFFFFLL;
      v3 = (unint64_t)(v9 + 1);
      if (++v4 == a2)
        goto LABEL_10;
    }
  }
  return result;
}

MPOOL *__rec_open(uint64_t a1, char a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9;
  MPOOL *v10;
  int v11;
  MPOOL *v12;
  _bkt **tqh_last;
  _bkt *v14;
  char v15;
  MPOOL *v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t (*v21)(uint64_t, unsigned int);
  int v22;
  _DWORD *v23;
  unsigned int v24;
  stat v26;
  _OWORD v27[2];
  __int128 v28;

  if (a1)
  {
    v9 = open_NOCANCEL();
    if (v9 < 0)
      return 0;
  }
  else
  {
    v9 = 0;
  }
  v28 = 0u;
  memset(v27, 0, sizeof(v27));
  memset(&v26, 0, sizeof(v26));
  if (a4)
  {
    if (*(_QWORD *)a4 >= 8uLL)
    {
      v10 = 0;
      goto LABEL_19;
    }
    *(_QWORD *)&v27[0] = 0;
    v11 = *(_DWORD *)(a4 + 12);
    DWORD2(v27[0]) = *(_DWORD *)(a4 + 8);
    *(_QWORD *)((char *)v27 + 12) = 0;
    DWORD1(v27[1]) = v11;
    *((_QWORD *)&v27[1] + 1) = 0;
    *(_QWORD *)&v28 = 0;
    DWORD2(v28) = *(_DWORD *)(a4 + 16);
    v12 = __bt_open(*(_QWORD *)(a4 + 40), 2, 384, (uint64_t *)v27, a5);
    if (v12)
    {
      v10 = v12;
      tqh_last = v12->hqh[2].tqh_last;
      if ((*(_BYTE *)a4 & 1) != 0)
      {
        *((_DWORD *)tqh_last + 159) |= 0x200u;
        v14 = *(_bkt **)(a4 + 24);
        tqh_last[78] = v14;
        if (!v14)
          goto LABEL_19;
      }
      v15 = *(_BYTE *)(a4 + 32);
LABEL_13:
      *((_BYTE *)tqh_last + 632) = v15;
      v17 = *((_DWORD *)tqh_last + 159);
      *((_DWORD *)tqh_last + 159) = v17 | 0x80;
      if (a1)
      {
        *((_DWORD *)tqh_last + 144) = v9;
        *__error() = 0;
        if (lseek(v9, 0, 1) == -1 && *__error() == 29)
        {
          if ((a2 & 3) == 0)
          {
            *((_DWORD *)tqh_last + 159) |= 0x2000u;
            goto LABEL_27;
          }
LABEL_19:
          *__error() = 22;
          v18 = *__error();
          if (!v10)
            goto LABEL_44;
          goto LABEL_43;
        }
        if ((a2 & 3) != 2)
        {
          if ((a2 & 3) != 0)
            goto LABEL_19;
          *((_DWORD *)tqh_last + 159) |= 0x2000u;
        }
        if (fstat(v9, &v26))
          goto LABEL_42;
        if (v26.st_size)
        {
LABEL_27:
          v19 = fdopen_DARWIN_EXTSN(v9, "r");
          tqh_last[71] = (_bkt *)v19;
          if (v19)
          {
            v20 = *((_DWORD *)tqh_last + 159);
            *((_DWORD *)tqh_last + 159) = v20 | 0x40;
            if ((v20 & 0x200) != 0)
              v21 = __rec_fpipe;
            else
              v21 = __rec_vpipe;
            tqh_last[70] = (_bkt *)v21;
LABEL_34:
            v10->lqh.tqh_last = (_bkt **)__rec_close;
            v10->hqh[0].tqh_first = (_bkt *)__rec_delete;
            v10->hqh[3].tqh_first = (_bkt *)__rec_fd;
            v10->hqh[0].tqh_last = (_bkt **)__rec_get;
            v10->hqh[1].tqh_first = (_bkt *)__rec_put;
            v10->hqh[1].tqh_last = (_bkt **)__rec_seq;
            v10->hqh[2].tqh_first = (_bkt *)__rec_sync;
            v23 = mpool_get((MPOOL *)*tqh_last, 1u, 0);
            if (v23)
            {
              if ((v23[3] & 0x1F) == 2)
              {
                v23[3] = v23[3] & 0xFFFFFFE0 | 0x10;
                v24 = 1;
              }
              else
              {
                v24 = 0;
              }
              mpool_put((MPOOL *)*tqh_last, v23, v24);
              if (!a4
                || (*(_BYTE *)a4 & 4) == 0
                || (*((_BYTE *)tqh_last + 637) & 9) != 0
                || ((unsigned int (*)(_bkt **, uint64_t))tqh_last[70])(tqh_last, 0xFFFFFFFFLL) != -1)
              {
                return v10;
              }
            }
          }
LABEL_42:
          v18 = *__error();
LABEL_43:
          __bt_close(v10);
          goto LABEL_44;
        }
        v22 = *((_DWORD *)tqh_last + 159) | 0x100;
      }
      else
      {
        v22 = v17 | 0x980;
      }
      *((_DWORD *)tqh_last + 159) = v22;
      goto LABEL_34;
    }
  }
  else
  {
    v16 = __bt_open(0, 2, 384, 0, a5);
    if (v16)
    {
      v10 = v16;
      tqh_last = v16->hqh[2].tqh_last;
      v15 = 10;
      goto LABEL_13;
    }
  }
  v18 = *__error();
LABEL_44:
  if (a1)
    close_NOCANCEL();
  v10 = 0;
  *__error() = v18;
  return v10;
}

uint64_t __rec_fd(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = *(void **)(v1 + 32);
  if (v2)
  {
    mpool_put(*(MPOOL **)v1, v2, 0);
    *(_QWORD *)(v1 + 32) = 0;
  }
  if ((*(_BYTE *)(v1 + 637) & 8) == 0)
    return *(unsigned int *)(v1 + 576);
  *__error() = 2;
  return 0xFFFFFFFFLL;
}

uint64_t __rec_put(uint64_t a1, unsigned int **a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  void *v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t result;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;

  v19 = 0;
  v20 = 0;
  v17 = 0;
  v18 = 0;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(void **)(v7 + 32);
  if (v8)
  {
    mpool_put(*(MPOOL **)v7, v8, 0);
    *(_QWORD *)(v7 + 32) = 0;
  }
  v9 = a3[1];
  if ((*(_BYTE *)(v7 + 637) & 2) == 0 || (v10 = *(_QWORD *)(v7 + 624), v9 == v10))
  {
    v19 = *a3;
    goto LABEL_6;
  }
  if (v9 > v10)
  {
LABEL_34:
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  if (*(_QWORD *)(v7 + 504) < v10)
  {
    v12 = reallocf(*(void **)(v7 + 496), v10);
    *(_QWORD *)(v7 + 496) = v12;
    if (v12)
    {
      *(_QWORD *)(v7 + 504) = *(_QWORD *)(v7 + 624);
      goto LABEL_13;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_13:
  _platform_memmove();
  _platform_memset();
  v19 = *(_QWORD *)(v7 + 496);
  v9 = *(_QWORD *)(v7 + 624);
LABEL_6:
  v20 = v9;
  switch(a4)
  {
    case 0:
    case 5:
      v11 = **a2;
      if (!(_DWORD)v11)
        goto LABEL_34;
      goto LABEL_27;
    case 1:
      if ((*(_BYTE *)(v7 + 68) & 8) == 0)
        goto LABEL_34;
      v11 = *(unsigned int *)(v7 + 64);
      a4 = 1;
      goto LABEL_27;
    case 4:
      v13 = **a2;
      if (v13)
        a4 = 4;
      else
        a4 = 5;
      if (v13 <= 1)
        v11 = 1;
      else
        v11 = v13;
      goto LABEL_27;
    case 8:
      v11 = **a2;
      if (!(_DWORD)v11)
        goto LABEL_34;
      if (v11 <= *(_DWORD *)(v7 + 616))
      {
        result = 1;
      }
      else
      {
        a4 = 8;
LABEL_27:
        v14 = *(_DWORD *)(v7 + 616);
        if (v11 > v14)
        {
          if ((*(_BYTE *)(v7 + 637) & 9) == 0)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 560))(v7, v11);
            if ((_DWORD)result == -1)
              return result;
            v14 = *(_DWORD *)(v7 + 616);
          }
          if (v11 > v14 + 1)
          {
            if ((*(_BYTE *)(v7 + 637) & 2) != 0)
            {
              v17 = malloc_type_malloc(*(_QWORD *)(v7 + 624), 0xEF533A9uLL);
              if (!v17)
                return 0xFFFFFFFFLL;
              v18 = *(_QWORD *)(v7 + 624);
              _platform_memset();
            }
            else
            {
              v17 = 0;
              v18 = 0;
            }
            while (1)
            {
              v16 = *(_DWORD *)(v7 + 616);
              if (v11 <= v16 + 1)
                break;
              if (__rec_iput(v7, v16, (uint64_t *)&v17, 0))
                return 0xFFFFFFFFLL;
            }
            if ((*(_BYTE *)(v7 + 637) & 2) != 0)
              free(v17);
          }
        }
        result = __rec_iput(v7, (int)v11 - 1, &v19, a4);
        if (!(_DWORD)result)
        {
          if (a4 == 10)
          {
            *(_DWORD *)(v7 + 64) = v11;
          }
          else if (a4 == 4)
          {
            LODWORD(v11) = v11 + 1;
          }
          *(_DWORD *)(v7 + 636) |= 0x1000u;
          result = __rec_ret(v7, 0, v11, a2, 0);
        }
      }
      break;
    case 10:
      v11 = **a2;
      if (!(_DWORD)v11)
        goto LABEL_34;
      a4 = 10;
      goto LABEL_27;
    default:
      goto LABEL_34;
  }
  return result;
}

uint64_t __rec_iput(uint64_t a1, unsigned int a2, uint64_t *a3, int a4)
{
  uint64_t *v5;
  uint64_t result;
  uint64_t v9;
  char v10;
  int v12;
  uint64_t v13;
  unsigned __int16 *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned __int16 v20;
  char *v21;
  pgno_t v22;
  _DWORD *v23;
  uint64_t v24;
  _DWORD v25[2];

  v5 = a3;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  if (a3[1] <= (unint64_t)*(unsigned __int16 *)(a1 + 524))
  {
    v10 = 0;
  }
  else
  {
    result = __ovfl_put(a1, a3, &v22);
    if ((_DWORD)result == -1)
      return result;
    v23 = v25;
    v24 = 8;
    v9 = v5[1];
    v25[0] = v22;
    v25[1] = v9;
    v10 = 1;
    v5 = (uint64_t *)&v23;
  }
  if (*(_DWORD *)(a1 + 616) < a2 || (a4 & 0xFFFFFFFE) == 4)
    v12 = 1;
  else
    v12 = 2;
  v13 = __rec_search(a1, a2, v12);
  if (!v13)
    return 0xFFFFFFFFLL;
  v14 = *(unsigned __int16 **)v13;
  v15 = *(unsigned __int16 *)(v13 + 8);
  if (a4 == 5)
    goto LABEL_17;
  if (a4 == 4)
  {
    LOWORD(v15) = v15 + 1;
    goto LABEL_17;
  }
  if (*(_DWORD *)(a1 + 616) > a2 && __rec_dleaf(a1, v14, v15) == -1)
  {
    mpool_put(*(MPOOL **)a1, v14, 0);
    return 0xFFFFFFFFLL;
  }
LABEL_17:
  v16 = *((_DWORD *)v5 + 2);
  v17 = (v16 & 0xFFFFFFFC) + 8;
  v18 = v14[9];
  v19 = v14[8];
  if ((v18 - v19) >= (v17 | 2uLL))
  {
    if ((unsigned __int16)((v19 + 131052) >> 1) > (unsigned __int16)v15)
    {
      _platform_memmove();
      LOWORD(v19) = v14[8];
      LOWORD(v18) = v14[9];
      v16 = *((_DWORD *)v5 + 2);
    }
    v14[8] = v19 + 2;
    v20 = v18 - v17;
    v14[9] = v20;
    v14[(unsigned __int16)v15 + 10] = v20;
    v21 = (char *)v14 + v20;
    *(_DWORD *)v21 = v16;
    v21[4] = v10;
    _platform_memmove();
    ++*(_DWORD *)(a1 + 616);
    *(_DWORD *)(a1 + 636) |= 4u;
    mpool_put(*(MPOOL **)a1, v14, 1u);
    return 0;
  }
  else
  {
    result = __bt_split(a1, v14, 0, (uint64_t)v5, v10, (v16 & 0xFFFCu) + 8, v15);
    if (!(_DWORD)result)
      ++*(_DWORD *)(a1 + 616);
  }
  return result;
}

uint64_t __rec_search(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  pgno_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  pgno_t v23;
  unsigned __int16 *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = a1 + 72;
  *(_QWORD *)(a1 + 472) = a1 + 72;
  v7 = mpool_get(*(MPOOL **)a1, 1u, 0);
  if (v7)
  {
    v8 = v7;
    v9 = 0;
    v10 = 1;
    while (1)
    {
      if ((v8[12] & 0x10) != 0)
      {
        *(_QWORD *)(a1 + 16) = v8;
        v26 = a1 + 16;
        *(_WORD *)(v26 + 8) = a2 - v9;
        return v26;
      }
      LOWORD(v11) = 0;
      v12 = *((unsigned __int16 *)v8 + 8) + 131052;
      v13 = v9;
      while (1)
      {
        v9 = v13;
        v14 = &v8[*(unsigned __int16 *)&v8[2 * (unsigned __int16)v11 + 20]];
        LOWORD(v11) = v11 + 1;
        if ((unsigned __int16)v11 == (unsigned __int16)(v12 >> 1))
          break;
        v13 = (*v14 + v13);
        if (v13 > a2)
          goto LABEL_9;
      }
      v11 = v12 >> 1;
LABEL_9:
      v15 = *(_QWORD *)(a1 + 472);
      *(_DWORD *)v15 = v10;
      v16 = (unsigned __int16)v11 - 1;
      *(_WORD *)(v15 + 4) = v16;
      *(_QWORD *)(a1 + 472) = v15 + 8;
      v10 = v14[1];
      if (!a3)
        break;
      if (a3 == 2)
      {
        v19 = 0;
        goto LABEL_16;
      }
      if (a3 == 1)
      {
        v17 = 1;
        goto LABEL_14;
      }
LABEL_17:
      v8 = mpool_get(*(MPOOL **)a1, v10, 0);
      if (!v8)
        goto LABEL_18;
    }
    v17 = -1;
LABEL_14:
    v18 = *(unsigned __int16 *)&v8[2 * v16 + 20];
    *(_DWORD *)&v8[v18] += v17;
    v19 = 1;
LABEL_16:
    mpool_put(*(MPOOL **)a1, v8, v19);
    goto LABEL_17;
  }
LABEL_18:
  v20 = *__error();
  if (a3 != 2)
  {
    v21 = *(_QWORD *)(a1 + 472);
    if (v21 != v6)
    {
      if (a3 == 1)
        v22 = -1;
      else
        v22 = 1;
      do
      {
        v23 = *(_DWORD *)(v21 - 8);
        *(_QWORD *)(a1 + 472) = v21 - 8;
        v24 = (unsigned __int16 *)mpool_get(*(MPOOL **)a1, v23, 0);
        if (!v24)
          break;
        v25 = v24[*(unsigned __int16 *)(v21 - 4) + 10];
        *(_DWORD *)((char *)v24 + v25) += v22;
        mpool_put(*(MPOOL **)a1, v24, 1u);
        v21 = *(_QWORD *)(a1 + 472);
      }
      while (v21 != v6);
    }
  }
  v26 = 0;
  *__error() = v20;
  return v26;
}

uint64_t __rec_seq(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4)
{
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v16;
  void **v17;

  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(void **)(v7 + 32);
  if (v8)
  {
    mpool_put(*(MPOOL **)v7, v8, 0);
    *(_QWORD *)(v7 + 32) = 0;
  }
  v9 = a4 - 1;
  v10 = 1;
  switch(v9)
  {
    case 0:
      v10 = *(unsigned int *)*a2;
      if ((_DWORD)v10)
        goto LABEL_13;
      goto LABEL_5;
    case 2:
      goto LABEL_13;
    case 5:
      goto LABEL_9;
    case 6:
      if ((*(_BYTE *)(v7 + 68) & 8) != 0)
        v10 = (*(_DWORD *)(v7 + 64) + 1);
      goto LABEL_13;
    case 8:
      if ((*(_BYTE *)(v7 + 68) & 8) != 0)
      {
        v12 = *(_DWORD *)(v7 + 64);
        v10 = (v12 - 1);
        if (v12 == 1)
          return 1;
      }
      else
      {
LABEL_9:
        if ((*(_BYTE *)(v7 + 637) & 9) == 0)
        {
          v11 = 0xFFFFFFFFLL;
          if ((*(unsigned int (**)(uint64_t, uint64_t))(v7 + 560))(v7, 0xFFFFFFFFLL) == -1)
            return v11;
        }
        v10 = *(unsigned int *)(v7 + 616);
      }
LABEL_13:
      v13 = *(_DWORD *)(v7 + 616);
      if (v13)
        v14 = v10 > v13;
      else
        v14 = 1;
      if (v14)
      {
        if ((*(_BYTE *)(v7 + 637) & 9) == 0)
        {
          v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 560))(v7, v10);
          if ((_DWORD)v11)
            return v11;
          v13 = *(_DWORD *)(v7 + 616);
        }
        if (!v13 || v10 > v13)
          return 1;
      }
      v16 = __rec_search(v7, (int)v10 - 1, 2);
      if (!v16)
        return 0xFFFFFFFFLL;
      v17 = (void **)v16;
      *(_BYTE *)(v7 + 68) |= 8u;
      *(_DWORD *)(v7 + 64) = v10;
      v11 = __rec_ret(v7, v16, v10, a2, a3);
      if ((*(_BYTE *)(v7 + 637) & 0x40) != 0)
        mpool_put(*(MPOOL **)v7, *v17, 0);
      else
        *(_QWORD *)(v7 + 32) = *v17;
      return v11;
    default:
LABEL_5:
      *__error() = 22;
      return 0xFFFFFFFFLL;
  }
}

uint64_t __rec_ret(uint64_t a1, uint64_t a2, int a3, _QWORD *a4, _QWORD *a5)
{
  _DWORD *v10;
  unsigned int *v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  size_t v15;
  void *v16;
  int v17;

  if (a4)
  {
    v10 = *(_DWORD **)(a1 + 480);
    if (*(_QWORD *)(a1 + 488) <= 3uLL)
    {
      v10 = malloc_type_realloc(v10, 4uLL, 0x100004052888210uLL);
      if (!v10)
        return 0xFFFFFFFFLL;
      *(_QWORD *)(a1 + 480) = v10;
      *(_QWORD *)(a1 + 488) = 4;
    }
    *v10 = a3;
    *a4 = *(_QWORD *)(a1 + 480);
    a4[1] = 4;
  }
  if (!a5)
    return 0;
  v11 = (unsigned int *)(*(_QWORD *)a2 + *(unsigned __int16 *)(*(_QWORD *)a2 + 2 * *(unsigned __int16 *)(a2 + 8) + 20));
  if ((v11[1] & 1) != 0)
  {
    if (!__ovfl_get(a1, (unsigned int *)((char *)v11 + 5), a5 + 1, (void **)(a1 + 496), (size_t *)(a1 + 504)))
    {
      v13 = *(char **)(a1 + 496);
      goto LABEL_18;
    }
    return 0xFFFFFFFFLL;
  }
  v12 = *v11;
  if ((*(_BYTE *)(a1 + 637) & 0x40) != 0)
  {
    v15 = (v12 + 1);
    if (*(_QWORD *)(a1 + 504) >= v15)
    {
LABEL_16:
      _platform_memmove();
      a5[1] = *v11;
      v13 = *(char **)(a1 + 496);
      goto LABEL_18;
    }
    v16 = malloc_type_realloc(*(void **)(a1 + 496), v15, 0xAE52E42DuLL);
    if (v16)
    {
      v17 = *v11;
      *(_QWORD *)(a1 + 496) = v16;
      *(_QWORD *)(a1 + 504) = (v17 + 1);
      goto LABEL_16;
    }
    return 0xFFFFFFFFLL;
  }
  a5[1] = v12;
  v13 = (char *)v11 + 5;
LABEL_18:
  result = 0;
  *a5 = v13;
  return result;
}

_DWORD *__hdtoa(uint64_t a1, unsigned int a2, _DWORD *a3, _DWORD *a4, _QWORD *a5, double a6)
{
  double v10;
  double v11;
  int v12;
  int v13;
  char *v14;
  _QWORD *v15;
  unsigned int v16;
  int v18;
  unsigned int v19;
  _DWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  _BYTE *v30;
  int v31;
  unsigned int v32;
  char *v33;
  int v34;
  int v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *i;
  int v39;
  int v40;
  int v41;
  char v42;

  v10 = a6;
  v11 = a6;
  *a4 = *(_QWORD *)&a6 >> 63;
  v12 = __fpclassifyd(a6);
  v13 = -1022;
  switch(v12)
  {
    case 1:
      *a3 = 0x7FFFFFFF;
      v14 = "NaN";
      v15 = a5;
      v16 = 3;
      return __nrv_alloc_D2A((unsigned __int8 *)v14, v15, v16);
    case 2:
      *a3 = 0x7FFFFFFF;
      v14 = "Infinity";
      v15 = a5;
      v16 = 8;
      return __nrv_alloc_D2A((unsigned __int8 *)v14, v15, v16);
    case 3:
      goto LABEL_5;
    case 4:
      goto LABEL_8;
    case 5:
      if (v10 != 0.0)
      {
        v10 = v10 * 5.36312317e154;
        v11 = v10;
        v13 = -1536;
LABEL_8:
        *a3 = ((*(_QWORD *)&v11 >> 52) & 0x7FF) + v13;
        if (a2 <= 1)
          v18 = 1;
        else
          v18 = a2;
        if (v18 <= 14)
          v19 = 14;
        else
          v19 = v18;
        v20 = __rv_alloc_D2A(v19);
        if (v19 >= 0xF)
          _platform_bzero();
        v21 = 13;
        do
        {
          *((_BYTE *)v20 + v21) = LOBYTE(v10) & 0xF;
          v22 = *(_QWORD *)&v10 & 0xFFFFFFFF00000000 | (LODWORD(v10) >> 4);
          v10 = *(double *)&v22;
          v23 = v21 - 1;
        }
        while (v21-- > 6);
        v25 = (char *)v20 + v23;
        do
        {
          *v25-- = BYTE4(v22) & 0xF;
          v26 = (v22 >> 4) & 0xFFFF00000000;
          v22 = v26 | v22 & 0xFFF00000FFFFFFFFLL;
        }
        while (v25 > (_BYTE *)v20);
        *v25 = BYTE4(v26) | 1;
        if (v18 < 0)
        {
          v27 = 13;
          while (!*((unsigned __int8 *)v20 + v27--))
            ;
          v18 = v27 + 2;
        }
        if (v18 >= 14)
        {
          v29 = v18;
        }
        else
        {
          v29 = v18;
          v30 = (char *)v20 + v18;
          v31 = *v30;
          if (*v30)
          {
            v32 = ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0)) + 0x400000) >> 22) & 3;
            if (v32 == 3)
            {
              if ((v22 & 0x8000000000000000) != 0)
              {
                v39 = *(v30 - 1);
                v33 = v30 - 1;
                LOBYTE(v34) = v39;
                if (v39 == 15)
                {
                  v36 = v18 - 1;
                  do
                  {
                    if (!v36)
                      goto LABEL_58;
                    *((_BYTE *)v20 + v36) = 0;
                    v34 = *((unsigned __int8 *)v20 + --v36);
                  }
                  while (v34 == 15);
LABEL_53:
                  v33 = (char *)v20 + v36;
                }
                goto LABEL_54;
              }
            }
            else
            {
              if (v32 != 2)
              {
                if (v32 != 1 || (char)v31 <= 8 && (v31 != 8 || (*((_BYTE *)v20 + v18 + 1) & 1) == 0))
                  goto LABEL_36;
                v35 = *(v30 - 1);
                v33 = v30 - 1;
                LOBYTE(v34) = v35;
                if (v35 == 15)
                {
                  v36 = v18 - 1;
                  while (v36)
                  {
                    *((_BYTE *)v20 + v36) = 0;
                    v34 = *((unsigned __int8 *)v20 + --v36);
                    if (v34 != 15)
                      goto LABEL_53;
                  }
LABEL_58:
                  v42 = 1;
                  v33 = (char *)v20;
                  v41 = 1;
LABEL_59:
                  *v33 = v42;
                  if (v41)
                    *a3 += 4;
                  goto LABEL_36;
                }
                goto LABEL_54;
              }
              if ((v22 & 0x8000000000000000) == 0)
              {
                v40 = *(v30 - 1);
                v33 = v30 - 1;
                LOBYTE(v34) = v40;
                if (v40 == 15)
                {
                  v36 = v18 - 1;
                  while (v36)
                  {
                    *((_BYTE *)v20 + v36) = 0;
                    v34 = *((unsigned __int8 *)v20 + --v36);
                    if (v34 != 15)
                      goto LABEL_53;
                  }
                  goto LABEL_58;
                }
LABEL_54:
                v41 = 0;
                v42 = v34 + 1;
                goto LABEL_59;
              }
            }
          }
        }
LABEL_36:
        v37 = (char *)v20 + v29;
        if (a5)
          *a5 = v37;
        *v37 = 0;
        for (i = v37 - 1; i >= (_BYTE *)v20; --i)
          *i = *(_BYTE *)(a1 + (char)*i);
        return v20;
      }
LABEL_5:
      *a3 = 1;
      v14 = "0";
      v15 = a5;
      v16 = 1;
      return __nrv_alloc_D2A((unsigned __int8 *)v14, v15, v16);
    default:
      abort_report_np((uint64_t)"%s:%s:%u: fpclassify returned %d");
  }
}

char *__gdtoa(int *a1, int a2, _DWORD *a3, _DWORD *a4, unsigned int a5, int a6, _DWORD *a7, char **a8)
{
  int v8;
  _DWORD *v10;
  int v14;
  int v15;
  int i;
  int *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  char *v28;
  char *v29;
  char **v30;
  unsigned int v31;
  double v32;
  int v33;
  signed int v34;
  unsigned int v35;
  unint64_t v36;
  double v37;
  int v38;
  _BOOL4 v39;
  unsigned int v40;
  double v41;
  int v42;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  BOOL v55;
  int v56;
  double v57;
  int v58;
  double v59;
  double v60;
  double v61;
  int v62;
  double v63;
  char v64;
  char *v65;
  double v66;
  double v67;
  int v68;
  int v69;
  double v70;
  int *v71;
  int *v72;
  double v73;
  int j;
  double v75;
  int v76;
  double v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  double v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  double v91;
  int v92;
  int v93;
  int v94;
  int *v95;
  int v96;
  int *v97;
  int *v98;
  char v99;
  char v100;
  char v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int *v106;
  int v107;
  char v108;
  int *v109;
  int v110;
  char *k;
  int v112;
  int v113;
  uint64_t v114;
  int v115;
  int *v116;
  int *v117;
  int v118;
  int v119;
  int v120;
  int *v121;
  int *v122;
  char *v123;
  int v124;
  int v125;
  double v126;
  int v127;
  char *v129;
  char *v130;
  int v131;
  char v132;
  int *v133;
  int *v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  char *v140;
  char *v141;
  char v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  unsigned int v153;
  char *v154;
  int v155;
  int *v156;
  int v157;
  int v158;
  int v159;
  int v160;
  _DWORD *v161;
  int v162;
  _DWORD *v163;
  char **v164;
  int v166;
  int v167;

  v8 = *a4;
  *a4 &= 0xFFFFFFCF;
  switch(v8 & 7)
  {
    case 0:
      goto LABEL_28;
    case 1:
    case 2:
      v10 = a4;
      v14 = *a1;
      v163 = a7;
      v164 = a8;
      v15 = 0;
      if (v14 >= 33)
      {
        for (i = 32; i < v14; i *= 2)
          ++v15;
      }
      v167 = 0;
      v17 = __Balloc_D2A(v15);
      v18 = v17;
      v19 = 0;
      v20 = 0;
      do
      {
        v17[v19 + 6] = a3[v19];
        v20 += 0x100000000;
        ++v19;
      }
      while (&a3[v19] <= &a3[(v14 - 1) >> 5]);
      v21 = v20 >> 32;
      v22 = 32 * v21;
      break;
    case 3:
      *a7 = -32768;
      v29 = "Infinity";
      v30 = a8;
      v31 = 8;
      return (char *)__nrv_alloc_D2A((unsigned __int8 *)v29, v30, v31);
    case 4:
      *a7 = -32768;
      v29 = "NaN";
      v30 = a8;
      v31 = 3;
      return (char *)__nrv_alloc_D2A((unsigned __int8 *)v29, v30, v31);
    default:
      return 0;
  }
  while (1)
  {
    v23 = &v17[v21];
    if (v23[5])
      break;
    v22 -= 32;
    if (!(_DWORD)--v21)
    {
      v24 = 0;
      v17[5] = 0;
      goto LABEL_12;
    }
  }
  v17[5] = v21;
  v24 = v22 - __hi0bits_D2A(v23[5]);
LABEL_12:
  v25 = __trailz_D2A((uint64_t)v18);
  v167 = v25;
  v152 = a2;
  if (v25)
  {
    v26 = v25;
    __rshift_D2A((uint64_t)v18, v25);
    a2 += v26;
    v27 = v24 - v26;
  }
  else
  {
    v27 = v24;
  }
  if (v18[5])
  {
    v32 = __b2d_D2A((uint64_t)v18, &v167);
    v33 = 1 - (a2 + v27);
    v34 = a2 + v27 - 1;
    v167 = v34;
    v35 = LODWORD(v32);
    v36 = (*(_QWORD *)&v32 & 0xFFFFFFFFFFFFFLL | 0x3FF0000000000000uLL) >> 32;
    v37 = (COERCE_DOUBLE(*(_QWORD *)&v32 & 0xFFFFFFFFFFFFFLL | 0x3FF0000000000000) + -1.5) * 0.289529655
        + 0.176091259
        + (double)v34 * 0.301029996;
    if (a2 + v27 >= 1)
      v33 = a2 + v27 - 1;
    if (v33 > 1077)
      v37 = v37 + (double)(v33 - 1077) * 7.0e-17;
    v38 = (int)v37;
    v39 = v37 < 0.0;
    if (v37 == (double)(int)v37)
      v39 = 0;
    v40 = v38 - v39;
    *(_QWORD *)&v41 = v35 | ((unint64_t)(v36 + ((a2 + v27) << 20) - 0x100000) << 32);
    v149 = v27;
    if ((v38 - v39) <= 0x16)
    {
      if (__tens_D2A[v40] <= v41)
      {
        if (a2 > 0)
          v46 = a2;
        else
          v46 = 0;
        v146 = v46;
        v45 = -a2 & ~(-a2 >> 31);
        v42 = v40;
        goto LABEL_42;
      }
      v42 = v40 - 1;
    }
    else
    {
      v42 = v38 - v39;
    }
    if (a2 > 0)
      v44 = a2;
    else
      v44 = 0;
    v45 = -a2 & ~(-a2 >> 31);
    if (v42 < 0)
    {
      v155 = 0;
      v146 = v44 - v42;
      v150 = -v42;
LABEL_43:
      if (a5 <= 9)
        v47 = a5;
      else
        v47 = 0;
      if (v47 <= 5)
        v48 = v47;
      else
        v48 = v47 - 4;
      v159 = v42;
      v160 = 1;
      v162 = v48;
      v153 = v40;
      switch(v48)
      {
        case 0u:
        case 1u:
          a6 = 0;
          v34 = (int)((double)v14 * 0.30103) + 3;
          v167 = v34;
          v160 = 1;
          goto LABEL_51;
        case 2u:
          v160 = 0;
          goto LABEL_53;
        case 3u:
          v160 = 0;
          goto LABEL_58;
        case 4u:
LABEL_53:
          if (a6 <= 1)
            v34 = 1;
          else
            v34 = a6;
          a6 = v34;
          v167 = v34;
          v49 = v34;
          v157 = v34;
          break;
        case 5u:
LABEL_58:
          v49 = v42 + a6 + 1;
          v157 = v42 + a6;
          if (v42 + a6 < 0 != __OFADD__(v42, a6))
            v34 = 1;
          else
            v34 = v42 + a6 + 1;
          v167 = v34;
          break;
        default:
LABEL_51:
          v49 = -1;
          v157 = -1;
          break;
      }
      v154 = (char *)__rv_alloc_D2A(v34);
      v50 = a1[3];
      v51 = v50 - 1;
      if (v50 == 1)
      {
        v52 = 0;
      }
      else
      {
        if (v50 < 1)
          v51 = 2;
        if ((v8 & 8) != 0)
          v52 = 3 - v51;
        else
          v52 = v51;
      }
      v53 = v159;
      if (v47 <= 5 && v49 <= 0xE && !(v52 | v159))
      {
        v167 = 0;
        v55 = v153 < 0x17 || v41 >= 1.0 || v49 == 0;
        if (v55)
        {
          v56 = 0;
          v57 = 2.0;
          v58 = v49;
          v59 = v41;
        }
        else
        {
          if (v157 < 1)
            goto LABEL_104;
          v59 = v41 * 10.0;
          v56 = -1;
          v57 = 3.0;
          v58 = v157;
        }
        *(_QWORD *)&v60 = COERCE__INT64(v57 * v59 + 7.0) - 0x340000000000000;
        if (v58)
        {
          v61 = __tens_D2A[v58 - 1];
          v62 = (int)v59;
          v63 = v59 - (double)(int)v59;
          v64 = v62 + 48;
          v65 = v154 + 1;
          if (v160)
          {
            v66 = 0.5 / v61 - v60;
            *v154 = v64;
            if (v63 >= v66)
            {
              while (1.0 - v63 >= v66)
              {
                if (++v167 >= v58)
                  goto LABEL_104;
                v67 = v63 * 10.0;
                v68 = (int)v67;
                v66 = v66 * 10.0;
                v63 = v67 - (double)(int)v67;
                *v65++ = v68 + 48;
                if (v63 < v66)
                  goto LABEL_89;
              }
              goto LABEL_98;
            }
LABEL_89:
            if (v63 == 0.0)
              v69 = 0;
            else
              v69 = 16;
            v28 = v154;
LABEL_255:
            __Bfree_D2A(v18);
            *v65 = 0;
            *v163 = v56 + 1;
            if (v164)
              *v164 = v65;
            *v10 |= v69;
            return v28;
          }
          v73 = v61 * v60;
          v167 = 1;
          *v154 = v64;
          for (j = v167; v167 != v58; j = v167)
          {
            v167 = j + 1;
            v75 = v63 * 10.0;
            v76 = (int)v75;
            v63 = v75 - (double)(int)v75;
            *v65++ = v76 + 48;
          }
          if (v63 > v73 + 0.5)
          {
LABEL_98:
            v28 = v154;
            goto LABEL_231;
          }
          if (v63 < 0.5 - v73)
          {
            if (v63 == 0.0)
              v69 = 0;
            else
              v69 = 16;
            v28 = v154;
            goto LABEL_253;
          }
        }
        else
        {
          v70 = v59 + -5.0;
          if (v70 > v60)
          {
            v71 = 0;
            v72 = 0;
            v53 = v56;
            v28 = v154;
            goto LABEL_171;
          }
          if (v70 < -v60)
          {
            v71 = 0;
            v72 = 0;
            v28 = v154;
            goto LABEL_182;
          }
        }
      }
LABEL_104:
      if ((a2 & 0x80000000) == 0 && v159 <= 14)
      {
        v77 = __tens_D2A[v159];
        if (a6 < 0 && v49 <= 0)
        {
          v71 = 0;
          v28 = v154;
          if ((v49 & 0x80000000) == 0)
          {
            v72 = 0;
            if (v77 * 5.0 >= v41)
              goto LABEL_182;
LABEL_171:
            v106 = 0;
            *v28 = 49;
            v65 = v28 + 1;
            v56 = v53 + 1;
LABEL_172:
            v69 = 32;
            goto LABEL_183;
          }
          v72 = 0;
LABEL_182:
          v106 = 0;
          v56 = ~a6;
          v69 = 16;
          v65 = v28;
          goto LABEL_183;
        }
        v167 = 1;
        v82 = (int)(v41 / v77);
        v83 = v41 - (double)v82 * v77;
        v28 = v154;
        *v154 = v82 + 48;
        v65 = v154 + 1;
        if (v83 != 0.0)
        {
          v90 = v167;
          if (v167 == v49)
          {
LABEL_131:
            if (v52)
            {
              if (v52 != 1)
              {
                v69 = 16;
                goto LABEL_118;
              }
            }
            else
            {
              v126 = v83 + v83;
              if (v126 <= v77)
              {
                v127 = v82 & 1;
                if (v126 != v77 || v127 == 0)
                {
                  v69 = 16;
                  v56 = v159;
LABEL_253:
                  ++v65;
                  do
                  {
                    v135 = *(v65 - 2);
                    --v65;
                  }
                  while (v135 == 48);
                  goto LABEL_255;
                }
              }
            }
            v56 = v159;
LABEL_231:
            v129 = v28 + 1;
            v130 = v65 - 1;
            while (1)
            {
              v131 = *v130;
              if (v131 != 57)
                break;
              v55 = v130-- == v28;
              if (v55)
              {
                ++v56;
                *v28 = 48;
                v132 = 49;
                v130 = v28;
                goto LABEL_237;
              }
            }
            v132 = v131 + 1;
            v129 = v130 + 1;
LABEL_237:
            *v130 = v132;
            v69 = 32;
            v65 = v129;
            goto LABEL_255;
          }
          while (1)
          {
            v91 = v83 * 10.0;
            v82 = (int)(v91 / v77);
            v167 = v90 + 1;
            v83 = v91 - (double)v82 * v77;
            *v65++ = v82 + 48;
            if (v83 == 0.0)
              break;
            v90 = v167;
            if (v167 == v49)
              goto LABEL_131;
          }
        }
        v69 = 0;
LABEL_118:
        v56 = v159;
        goto LABEL_255;
      }
      v148 = v52;
      if (v160)
      {
        if (v162 > 1)
        {
          v88 = v150 - (v49 - 1);
          if (v150 <= v49 - 1)
            v81 = v49 - 1;
          else
            v81 = v150;
          if (v150 >= v49 - 1)
          {
            v89 = 0;
          }
          else
          {
            v88 = 0;
            v89 = v49 - 1 - v150;
          }
          v155 += v89;
          v167 = v49;
          v144 = v88;
          if (v49 < 0)
          {
            v78 = 0;
            v80 = v146 - v49;
            v167 = 0;
          }
          else
          {
            v78 = v49;
            v80 = v146;
          }
        }
        else
        {
          v78 = v14 - v149 + 1;
          v167 = v78;
          v79 = a1[1];
          if (a2 - (v14 - v149) < v79)
          {
            v78 = a2 - v79 + 1;
            v167 = v78;
          }
          v80 = v146;
          v81 = v150;
          v144 = v150;
        }
        v84 = v78 + v146;
        v45 += v78;
        v71 = __i2b_D2A(1);
        v85 = v80;
        v87 = v155;
        v86 = v144;
      }
      else
      {
        v71 = 0;
        v84 = v146;
        v85 = v146;
        v81 = v150;
        v86 = v150;
        v87 = v155;
      }
      if (v85 >= 1 && v45 >= 1)
      {
        if (v85 >= v45)
          v92 = v45;
        else
          v92 = v85;
        v167 = v92;
        v84 -= v92;
        v85 -= v92;
        v45 -= v92;
      }
      v147 = v85;
      if (v81 >= 1)
      {
        if (!v160)
        {
          v97 = v18;
          v96 = v81;
          goto LABEL_150;
        }
        if (v86 >= 1)
        {
          v145 = v86;
          v71 = __pow5mult_D2A(v71, v86);
          v151 = v81;
          v93 = v87;
          v94 = v84;
          v95 = __mult_D2A(v71, v18);
          __Bfree_D2A(v18);
          v86 = v145;
          v18 = v95;
          v84 = v94;
          v87 = v93;
          v81 = v151;
        }
        v96 = v81 - v86;
        if (v81 != v86)
        {
          v97 = v18;
LABEL_150:
          v18 = __pow5mult_D2A(v97, v96);
        }
      }
      v98 = __i2b_D2A(1);
      if (v87 >= 1)
        v98 = __pow5mult_D2A(v98, v87);
      v156 = v98;
      v99 = 1;
      if (v162 <= 1 && v149 == 1 && a1[1] + 1 < v152)
      {
        v99 = 0;
        ++v84;
        ++v45;
      }
      if (v87)
        v100 = __hi0bits_D2A(v98[v98[5] + 5]);
      else
        v100 = 31;
      v101 = v100 - v45 + 28;
      v102 = v101 & 0x1F;
      v167 = v102;
      if (v102 + v84 < 1)
      {
        v103 = v101 & 0x1F;
      }
      else
      {
        v18 = __lshift_D2A(v18, v102 + v84);
        v103 = v167;
      }
      if (v103 + v45 >= 1)
        v156 = __lshift_D2A(v156, v103 + v45);
      v104 = v159;
      if (v153 >= 0x17 && (v104 = v159, (__cmp_D2A((uint64_t)v18, (uint64_t)v156) & 0x80000000) != 0))
      {
        v104 = v159 - 1;
        v18 = __multadd_D2A(v18, 10, 0);
        if (v160)
        {
          v71 = __multadd_D2A(v71, 10, 0);
          if (v162 >= 3)
          {
            v49 = v157;
            v107 = v147;
            if (v157 <= 0)
              goto LABEL_169;
LABEL_175:
            v108 = v99;
            v158 = v49;
            v166 = v104;
            if (v102 + v107 < 1)
            {
              v106 = v71;
            }
            else
            {
              v106 = __lshift_D2A(v71, v102 + v107);
              v71 = v106;
            }
            v72 = v156;
            v161 = v10;
            if ((v108 & 1) == 0)
            {
              v109 = __Balloc_D2A(v106[2]);
              _platform_memmove();
              v71 = __lshift_D2A(v109, 1);
            }
            v110 = 1;
            for (k = v154; ; ++k)
            {
              v167 = v110;
              v112 = __quorem_D2A((uint64_t)v18, (uint64_t)v72);
              v113 = __cmp_D2A((uint64_t)v18, (uint64_t)v106);
              v114 = (uint64_t)v72;
              v115 = v113;
              v116 = v71;
              v117 = __diff_D2A(v114, (uint64_t)v71);
              if (v117[4])
                v118 = 1;
              else
                v118 = __cmp_D2A((uint64_t)v18, (uint64_t)v117);
              v119 = v112 + 48;
              __Bfree_D2A(v117);
              v120 = v148;
              if (!(v118 | v162) && !(*a3 & 1 | v148))
              {
                if (v112 == 9)
                {
                  v28 = v154;
                  v72 = v156;
                  goto LABEL_241;
                }
                v28 = v154;
                v71 = v116;
                if (v115 <= 0)
                {
                  v10 = v161;
                  v72 = v156;
                  if (v18[5] > 1 || v18[6])
                    v69 = 16;
                  else
                    v69 = 0;
                }
                else
                {
                  LOBYTE(v119) = v112 + 49;
                  v69 = 32;
                  v10 = v161;
                  v72 = v156;
                }
LABEL_300:
                v56 = v166;
                goto LABEL_301;
              }
              if (v115 < 0 || !(v115 | v162) && (*(_BYTE *)a3 & 1) == 0)
                break;
              if (v118 >= 1 && v148 != 2)
              {
                v71 = v116;
                v72 = v156;
                if (v112 != 9)
                {
                  *k = v112 + 49;
                  v65 = k + 1;
                  v69 = 32;
                  v28 = v154;
                  v10 = v161;
                  goto LABEL_289;
                }
                v28 = v154;
                goto LABEL_242;
              }
              *k = v119;
              v71 = v116;
              v72 = v156;
              if (v167 == v158)
              {
                v123 = k + 1;
                v124 = v166;
                v28 = v154;
                v10 = v161;
                goto LABEL_268;
              }
              v18 = __multadd_D2A(v18, 10, 0);
              v121 = __multadd_D2A(v106, 10, 0);
              v122 = v121;
              if (v106 != v116)
                v121 = __multadd_D2A(v116, 10, 0);
              v110 = v167 + 1;
              v106 = v122;
              v71 = v121;
            }
            if (v148 && (v18[5] > 1 || v18[6]))
            {
              v72 = v156;
              if (v148 == 2)
              {
                v69 = 16;
                v28 = v154;
                v71 = v116;
                v10 = v161;
                goto LABEL_300;
              }
              v133 = v116;
              v28 = v154;
              if ((int)__cmp_D2A((uint64_t)v156, (uint64_t)v116) < 1)
              {
                v71 = v116;
                v10 = v161;
              }
              else
              {
                v10 = v161;
                do
                {
                  *k++ = v119;
                  v134 = __multadd_D2A(v133, 10, 0);
                  v71 = v134;
                  if (v106 == v133)
                    v106 = v134;
                  v18 = __multadd_D2A(v18, 10, 0);
                  v119 = __quorem_D2A((uint64_t)v18, (uint64_t)v156) + 48;
                  v133 = v71;
                }
                while ((int)__cmp_D2A((uint64_t)v156, (uint64_t)v71) > 0);
              }
              if (v119 != 57)
              {
                LOBYTE(v119) = v119 + 1;
                v69 = 32;
                goto LABEL_300;
              }
LABEL_243:
              *k = 57;
              v123 = k + 1;
              goto LABEL_284;
            }
            v72 = v156;
            if (v118 >= 1)
            {
              v18 = __lshift_D2A(v18, 1);
              v125 = __cmp_D2A((uint64_t)v18, (uint64_t)v156);
              v28 = v154;
              if (v125 <= 0)
              {
                v69 = 32;
                if (v125 || (v112 & 1) == 0)
                  goto LABEL_260;
              }
              if (v112 != 9)
              {
                LOBYTE(v119) = v112 + 49;
                v69 = 32;
                goto LABEL_260;
              }
LABEL_241:
              v71 = v116;
LABEL_242:
              v10 = v161;
              goto LABEL_243;
            }
            v69 = 0;
            v28 = v154;
LABEL_260:
            v71 = v116;
            v10 = v161;
            v56 = v166;
            if (v18[5] > 1 || v18[6])
              v69 = 16;
LABEL_301:
            *k = v119;
            v65 = k + 1;
            goto LABEL_183;
          }
          v49 = v157;
LABEL_174:
          v107 = v147;
          goto LABEL_175;
        }
        if (v162 < 3)
        {
          v49 = v157;
        }
        else
        {
          v49 = v157;
          if (v157 < 1)
            goto LABEL_169;
        }
      }
      else
      {
        if (v162 >= 3 && v49 < 1)
        {
LABEL_169:
          if (v49 < 0)
          {
            v28 = v154;
            v72 = v156;
          }
          else
          {
            v72 = __multadd_D2A(v156, 5, 0);
            v105 = __cmp_D2A((uint64_t)v18, (uint64_t)v72);
            v53 = v104;
            v28 = v154;
            if (v105 > 0)
              goto LABEL_171;
          }
          goto LABEL_182;
        }
        if (v160)
          goto LABEL_174;
      }
      v136 = v104;
      v167 = 1;
      v72 = v156;
      LOBYTE(v119) = __quorem_D2A((uint64_t)v18, (uint64_t)v156) + 48;
      v28 = v154;
      v123 = v154;
      while (1)
      {
        *v123++ = v119;
        if (v167 >= v49)
          break;
        v18 = __multadd_D2A(v18, 10, 0);
        ++v167;
        LOBYTE(v119) = __quorem_D2A((uint64_t)v18, (uint64_t)v156) + 48;
      }
      v106 = 0;
      v124 = v136;
      v120 = v148;
LABEL_268:
      if (v120)
      {
        if (v120 == 2 || v18[5] <= 1 && !v18[6])
        {
LABEL_270:
          if (v18[5] > 1 || v18[6])
            v69 = 16;
          else
            v69 = 0;
          v65 = v123 + 1;
          do
          {
            v137 = *(v65 - 2);
            --v65;
          }
          while (v137 == 48);
          v56 = v124;
LABEL_183:
          __Bfree_D2A(v72);
          if (v71)
          {
            if (v106 && v106 != v71)
              __Bfree_D2A(v106);
            __Bfree_D2A(v71);
          }
          goto LABEL_255;
        }
      }
      else
      {
        v138 = v124;
        v18 = __lshift_D2A(v18, 1);
        v139 = __cmp_D2A((uint64_t)v18, (uint64_t)v72);
        if (v139 > 0)
        {
          v166 = v138;
LABEL_284:
          v65 = v28 + 1;
          v140 = v123;
          v141 = v123;
          while (1)
          {
            v143 = *--v141;
            v142 = v143;
            if (v143 != 57)
              break;
            v140 = v141;
            if (v141 == v28)
            {
              *v28 = 49;
              v56 = v166 + 1;
              goto LABEL_172;
            }
          }
          *(v140 - 1) = v142 + 1;
          v69 = 32;
          v65 = v140;
LABEL_289:
          v56 = v166;
          goto LABEL_183;
        }
        v124 = v138;
        if (v139 || (v119 & 1) == 0)
          goto LABEL_270;
      }
      v166 = v124;
      goto LABEL_284;
    }
    v146 = v44;
LABEL_42:
    v150 = 0;
    v45 += v42;
    v155 = v42;
    goto LABEL_43;
  }
  __Bfree_D2A(v18);
  a7 = v163;
  a8 = v164;
LABEL_28:
  *a7 = 1;
  v29 = "0";
  v30 = a8;
  v31 = 1;
  return (char *)__nrv_alloc_D2A((unsigned __int8 *)v29, v30, v31);
}

uint64_t __rshift_D2A(uint64_t result, int a2)
{
  char *v2;
  int v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  unint64_t v17;

  v2 = (char *)(result + 24);
  v3 = a2 >> 5;
  v4 = *(int *)(result + 20);
  v5 = (char *)(result + 24);
  if (a2 >> 5 < (int)v4)
  {
    v6 = v3;
    v7 = (unint64_t)&v2[4 * v4];
    v8 = a2 & 0x1F;
    if ((a2 & 0x1F) != 0)
    {
      v9 = &v2[4 * v3];
      v10 = *(_DWORD *)v9 >> v8;
      if ((unint64_t)(v9 + 4) >= v7)
      {
        v13 = (_DWORD *)(result + 24);
      }
      else
      {
        v11 = 4 * v6;
        v12 = result + 28;
        do
        {
          *(_DWORD *)(v12 - 4) = (*(_DWORD *)(v12 + v11) << (32 - v8)) | v10;
          v10 = *(_DWORD *)(v12 + v11) >> v8;
          v12 += 4;
        }
        while (v12 + v11 < v7);
        v13 = (_DWORD *)(v12 - 4);
      }
      *v13 = v10;
      v5 = (char *)&v13[v10 != 0];
    }
    else
    {
      v14 = v3;
      v15 = (_DWORD *)(result + 24);
      do
      {
        v5 = (char *)(v15 + 1);
        *v15 = v15[v14];
        v16 = &v15[v14 + 1];
        ++v15;
      }
      while ((unint64_t)v16 < v7);
    }
  }
  v17 = (unint64_t)(v5 - v2) >> 2;
  *(_DWORD *)(result + 20) = v17;
  if (!(_DWORD)v17)
    *(_DWORD *)v2 = 0;
  return result;
}

uint64_t __trailz_D2A(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unint64_t v4;
  unsigned int v6;

  v1 = *(int *)(a1 + 20);
  if ((int)v1 < 1)
    return 0;
  LODWORD(v2) = 0;
  v3 = (unsigned int *)(a1 + 24);
  v4 = a1 + 24 + 4 * v1;
  while (!*v3)
  {
    v2 = (v2 + 32);
    if ((unint64_t)++v3 >= v4)
      return v2;
  }
  v6 = *v3;
  return __lo0bits_D2A(&v6) + v2;
}

double __b2d_D2A(uint64_t a1, _DWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  double result;

  v3 = a1 + 24;
  v4 = a1 + 24 + 4 * *(int *)(a1 + 20);
  v6 = v4 - 4;
  v5 = *(_DWORD *)(v4 - 4);
  v7 = __hi0bits_D2A(v5);
  *a2 = 32 - v7;
  if (v7 > 0xA)
  {
    if (v6 <= v3)
    {
      v10 = 0;
    }
    else
    {
      v10 = *(_DWORD *)(v4 - 8);
      v6 = v4 - 8;
    }
    v11 = v7 - 11;
    if (v7 == 11)
    {
      v8 = v5;
    }
    else
    {
      v8 = (v5 << v11) | (v10 >> (43 - v7));
      if (v6 <= v3)
        v12 = 0;
      else
        v12 = *(_DWORD *)(v6 - 4);
      v10 = (v12 >> (43 - v7)) | (v10 << v11);
    }
  }
  else
  {
    v8 = v5 >> (11 - v7);
    if (v6 <= v3)
      v9 = 0;
    else
      v9 = *(_DWORD *)(v4 - 8);
    v10 = (v9 >> (11 - v7)) | (v5 << (v7 + 21));
  }
  *(_QWORD *)&result = v10 | ((unint64_t)(v8 | 0x3FF00000u) << 32);
  return result;
}

_BYTE *__strcp_D2A(_BYTE *result, unsigned __int8 *a2)
{
  int v2;
  unsigned __int8 *v3;
  int v4;

  v2 = *a2;
  *result = v2;
  if (v2)
  {
    v3 = a2 + 1;
    do
    {
      v4 = *v3++;
      *++result = v4;
    }
    while (v4);
  }
  return result;
}

int *__s2b_D2A(char *a1, int a2, int a3, int a4, int a5)
{
  int v10;
  int v11;
  BOOL v12;
  int *result;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  char *v18;
  int v19;

  if (a3 < 10)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    do
    {
      v12 = (a3 + 8) / 9 <= 2 * v11;
      v11 *= 2;
      ++v10;
    }
    while (!v12);
  }
  result = __Balloc_D2A(v10);
  result[5] = 1;
  result[6] = a4;
  if (a2 < 10)
  {
    a5 += 9;
    a2 = 9;
  }
  else
  {
    a1 += 9;
    v14 = a2 - 9;
    do
    {
      v15 = *a1++;
      result = __multadd_D2A(result, 10, v15 - 48);
      --v14;
    }
    while (v14);
  }
  v16 = __OFSUB__(a3, a2);
  v17 = a3 - a2;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = &a1[a5];
    do
    {
      v19 = *v18++;
      result = __multadd_D2A(result, 10, v19 - 48);
      --v17;
    }
    while (v17);
  }
  return result;
}

double __ratio_D2A(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  int v6;
  double v7;
  uint64_t v9;

  v9 = 0;
  v4 = __b2d_D2A(a1, (_DWORD *)&v9 + 1);
  v5 = __b2d_D2A(a2, &v9);
  v6 = HIDWORD(v9) - v9 + 32 * (*(_DWORD *)(a1 + 20) - *(_DWORD *)(a2 + 20));
  *(_QWORD *)&v7 = LODWORD(v4) | ((unint64_t)(HIDWORD(v4) + (v6 << 20)) << 32);
  if (v6 < 1)
  {
    v7 = v4;
    *(_QWORD *)&v5 = LODWORD(v5) | ((unint64_t)(HIDWORD(v5) - (v6 << 20)) << 32);
  }
  return v7 / v5;
}

uint64_t __match_D2A(_QWORD *a1, _BYTE *a2)
{
  char *v2;
  int v3;
  int v4;
  int v5;
  int v6;

  v2 = (char *)(*a1 + 1);
  while (1)
  {
    v3 = (char)*a2;
    if (!*a2)
      break;
    v5 = *v2++;
    v4 = v5;
    ++a2;
    v6 = v5 + 32;
    if ((v5 - 65) < 0x1A)
      v4 = v6;
    if (v4 != v3)
      return 0;
  }
  *a1 = v2;
  return 1;
}

uint64_t __copybits_D2A(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;

  v3 = *(int *)(a3 + 20);
  if ((int)v3 < 1)
  {
    v7 = (_DWORD *)result;
  }
  else
  {
    v4 = (int *)(a3 + 24);
    v5 = a3 + 24 + 4 * v3;
    v6 = result;
    v7 = (_DWORD *)result;
    do
    {
      v8 = *v4++;
      *v7++ = v8;
      v6 += 4;
    }
    while ((unint64_t)v4 < v5);
  }
  if ((unint64_t)v7 < result + 4 * ((a2 - 1) >> 5) + 4)
    return _platform_bzero();
  return result;
}

uint64_t __any_on_D2A(uint64_t a1, int a2)
{
  unint64_t v2;
  int v3;
  BOOL v4;
  int v5;
  int v7;
  unint64_t i;

  v2 = a1 + 24;
  v3 = *(_DWORD *)(a1 + 20);
  v4 = a2 >> 5 < v3;
  if (a2 >> 5 <= v3)
  {
    v5 = a2 & 0x1F;
    if (!v4 || v5 == 0)
    {
      v3 = a2 >> 5;
    }
    else
    {
      v7 = -1 << v5;
      v3 = a2 >> 5;
      if ((*(_DWORD *)(v2 + 4 * (a2 >> 5)) & ~v7) != 0)
        return 1;
    }
  }
  for (i = v2 + 4 * v3; i > v2; i -= 4)
  {
    if (*(_DWORD *)(i - 4))
      return 1;
  }
  return 0;
}

int *__sum_D2A(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int *v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  int *v23;

  v2 = *(_DWORD *)(a1 + 20);
  v3 = *(_DWORD *)(a2 + 20);
  if (v2 >= v3)
    v4 = a1;
  else
    v4 = a2;
  if (v2 >= v3)
    v5 = a2;
  else
    v5 = a1;
  v6 = __Balloc_D2A(*(_DWORD *)(v4 + 8));
  v7 = 0;
  v8 = 0;
  v9 = *(_DWORD *)(v4 + 20);
  v6[5] = v9;
  v10 = v4 + 24;
  v11 = *(int *)(v5 + 20);
  v12 = (unint64_t)&v6[v11 + 6];
  do
  {
    v13 = &v6[v7];
    v14 = *(_DWORD *)(v10 + v7 * 4);
    v15 = *(_DWORD *)(v5 + 24 + v7 * 4);
    v16 = v8 + (unsigned __int16)v14 + (unsigned __int16)v15;
    v17 = HIWORD(v15) + HIWORD(v14) + (HIWORD(v16) & 1);
    v8 = HIWORD(v17);
    *((_WORD *)v13 + 13) = v17;
    *((_WORD *)v13 + 12) = v16;
    v18 = &v6[++v7 + 6];
  }
  while ((unint64_t)v18 < v12);
  v19 = v12 + 4 * (*(_DWORD *)(v4 + 20) - (int)v11);
  if ((unint64_t)v18 < v19)
  {
    v20 = (unsigned int *)(v10 + v7 * 4);
    do
    {
      v21 = *v20++;
      v22 = v8 + (unsigned __int16)v21;
      v8 = (HIWORD(v22) + HIWORD(v21)) >> 16;
      *((_WORD *)v18 + 1) = HIWORD(v22) + HIWORD(v21);
      *(_WORD *)v18++ = v22;
    }
    while ((unint64_t)v18 < v19);
  }
  if (v8)
  {
    if (v9 == v6[3])
    {
      v23 = __Balloc_D2A(v6[2] + 1);
      _platform_memmove();
      __Bfree_D2A(v6);
      v9 = v23[5];
      v6 = v23;
    }
    v6[5] = v9 + 1;
    v6[v9 + 6] = 1;
  }
  return v6;
}

double __ulp_D2A(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double v5;

  v1 = *(_DWORD *)(a1 + 4) & 0x7FF00000;
  v2 = (unint64_t)(54525952 - v1) >> 20;
  LODWORD(v3) = 1 << (51 - v2);
  if (v1 < 0x200000)
    v3 = 1;
  else
    v3 = v3;
  v4 = 0x80000uLL >> v2 << 32;
  if (v1 < 0x2000001)
    v4 = v3;
  if (v1 < 0x3400001)
    return *(double *)&v4;
  *(_QWORD *)&v5 = (unint64_t)(v1 - 54525952) << 32;
  return v5;
}

unsigned int alarm(unsigned int a1)
{
  int v1;
  unsigned int tv_sec;
  itimerval v4;
  itimerval v5;

  v5.it_interval = 0u;
  *(&v5.it_value.tv_usec + 1) = 0;
  memset(&v4, 0, sizeof(v4));
  v5.it_interval.tv_usec = 0;
  v5.it_value.tv_sec = a1;
  v5.it_value.tv_usec = 0;
  v1 = setitimer(0, &v5, &v4);
  if (v4.it_value.tv_usec)
    tv_sec = LODWORD(v4.it_value.tv_sec) + 1;
  else
    tv_sec = v4.it_value.tv_sec;
  if (v1 < 0)
    return -1;
  else
    return tv_sec;
}

char *__cdecl basename(char *a1)
{
  char *v2;
  char *result;

  v2 = (char *)basename_bname;
  if (basename_bname)
    return basename_r(a1, v2);
  result = (char *)malloc_type_malloc(0x400uLL, 0x820A11DBuLL);
  v2 = result;
  basename_bname = (uint64_t)result;
  if (result)
    return basename_r(a1, v2);
  return result;
}

char *__cdecl ctermid(char *result)
{
  uint64_t v1;

  if (!result)
    return ctermid_def;
  v1 = *(_QWORD *)ctermid_def;
  result[8] = ctermid_def[8];
  *(_QWORD *)result = v1;
  return result;
}

char *__cdecl ctermid_r(char *result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *(_QWORD *)ctermid_def;
    result[8] = ctermid_def[8];
    *(_QWORD *)result = v1;
  }
  return result;
}

int daemon(int a1, int a2)
{
  int v4;
  mach_port_name_t v5;
  mach_port_t *v6;
  ipc_space_t *v7;
  mach_port_t *p_parent_port;
  int result;
  pid_t v10;
  int v11;
  int v12;
  int v13;
  sigaction v14;
  sigaction v15;
  mach_port_t parent_port;

  v15.__sigaction_u.__sa_handler = 0;
  *(_QWORD *)&v15.sa_mask = 0;
  v14.__sigaction_u.__sa_handler = (void (__cdecl *)(int))1;
  *(_QWORD *)&v14.sa_mask = 0;
  v4 = sigaction(1, &v14, &v15);
  v5 = 0;
  parent_port = 0;
  v6 = (mach_port_t *)MEMORY[0x1E0C87FE0];
  v7 = (ipc_space_t *)MEMORY[0x1E0C883F0];
  while (1)
  {
    if (v5)
    {
      mach_port_deallocate(*v7, v5);
      p_parent_port = &parent_port;
    }
    else
    {
      p_parent_port = v6;
    }
    v5 = *p_parent_port;
    if (bootstrap_parent(*p_parent_port, &parent_port))
      break;
    if (parent_port == v5)
    {
      task_set_special_port(*v7, 4, v5);
      *v6 = parent_port;
      break;
    }
  }
  result = fork();
  if (result != -1)
  {
    if (result)
      __exit();
    v10 = setsid();
    v11 = *__error();
    if (v4 != -1)
      sigaction(1, &v15, 0);
    if (v10 == -1)
    {
      *__error() = v11;
      return -1;
    }
    if (a1)
    {
      if (!a2)
      {
LABEL_18:
        v12 = open_NOCANCEL();
        if (v12 != -1)
        {
          v13 = v12;
          dup2(v12, 0);
          dup2(v13, 1);
          dup2(v13, 2);
          result = 0;
          if (v13 < 3)
            return result;
          close_NOCANCEL();
        }
      }
    }
    else
    {
      chdir("/");
      if (!a2)
        goto LABEL_18;
    }
    return 0;
  }
  return result;
}

char *__cdecl dirname(char *a1)
{
  char *v2;
  char *result;

  v2 = (char *)dirname_dname;
  if (dirname_dname)
    return dirname_r(a1, v2);
  result = (char *)malloc_type_malloc(0x400uLL, 0xCE9BD9BCuLL);
  v2 = result;
  dirname_dname = (uint64_t)result;
  if (result)
    return dirname_r(a1, v2);
  return result;
}

double erand48(unsigned __int16 a1[3])
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  v1 = _rand48_add + (*(unsigned int *)a1 | ((unint64_t)a1[2] << 32)) * _rand48_mult;
  *a1 = _rand48_add + *(_DWORD *)a1 * _rand48_mult;
  a1[1] = WORD1(v1);
  a1[2] = WORD2(v1);
  v2 = v1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0.0;
  v3 = 32 * v2;
  v4 = v2 >> 47;
  v5 = __clz(v3 & 0xFFFFFFFFFFFE0);
  v6 = v3 << (v5 - 11);
  v7 = 0x4090000000000000 - (v5 << 52);
  v8 = v4 == 0;
  if (v4)
    v9 = v3;
  else
    v9 = v6;
  if (v8)
    v10 = v7;
  else
    v10 = 0x3FE0000000000000;
  *(_QWORD *)&result = v10 | v9 & 0x800FFFFFFFFFFFE0;
  return result;
}

void _e_visprintf(FILE *a1, const char *a2, char *a3)
{
  uint64_t v5;
  char *v6;
  int v7;
  char *v8;
  char *v9;
  int v10;
  char *v12[2];

  v12[0] = 0;
  v12[1] = a3;
  vasprintf(v12, a2, a3);
  if (!v12[0])
    goto LABEL_13;
  v5 = _platform_strlen();
  v6 = (char *)malloc_type_malloc((4 * v5) | 1, 0x1EC10F68uLL);
  if (!v6)
  {
    free(v12[0]);
LABEL_13:
    vfprintf(a1, a2, a3);
    return;
  }
  v7 = *v12[0];
  v8 = v6;
  if (*v12[0])
  {
    v9 = v12[0] + 1;
    v8 = v6;
    do
    {
      if (escape[v7] == 255)
      {
        sprintf(v8, "\\%03o", v7);
        v8 += 4;
      }
      else if (escape[v7])
      {
        *v8 = 92;
        v8[1] = escape[*(v9 - 1)];
        v8 += 2;
      }
      else
      {
        *v8++ = v7;
      }
      v10 = *v9++;
      v7 = v10;
    }
    while (v10);
  }
  *v8 = 0;
  fputs(v6, a1);
  free(v6);
  free(v12[0]);
}

void err_set_file(void *a1)
{
  void *v1;

  v1 = __stderrp;
  if (a1)
    v1 = a1;
  _e_err_file = (uint64_t)v1;
}

void err_set_exit(void (__cdecl *a1)(int))
{
  if (_e_err_exit == 1)
    _Block_release(off_1EDF54DC0);
  _e_err_exit = 2 * (a1 != 0);
  off_1EDF54DC0 = (uint64_t (*)(_QWORD))a1;
}

void err_set_exit_b(void *a1)
{
  if (_e_err_exit == 1)
    _Block_release(off_1EDF54DC0);
  _e_err_exit = a1 != 0;
  off_1EDF54DC0 = (uint64_t (*)(_QWORD))_Block_copy(a1);
}

int execl(const char *__path, const char *__arg0, ...)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  uint64_t v8;
  char **v9;
  char *v10;
  char ***v11;
  va_list v13;
  va_list va;

  va_start(va, __arg0);
  va_copy(v13, va);
  v4 = 8;
  do
  {
    v5 = v13;
    v13 += 8;
    v4 += 8;
  }
  while (*v5);
  MEMORY[0x1E0C86820](__path, v4);
  v7 = (va_list *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  _platform_bzero();
  va_copy(v13, va);
  *v7 = (char *)__arg0;
  v8 = 1;
  do
  {
    v9 = (char **)v13;
    v13 += 8;
    v10 = *v9;
    v7[v8++] = v10;
  }
  while (v10);
  v11 = _NSGetEnviron();
  return execve(__path, v7, *v11);
}

int execle(const char *__path, const char *__arg0, ...)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  uint64_t v8;
  char **v9;
  char *v10;
  char *const **v11;
  va_list v13;
  va_list va;

  va_start(va, __arg0);
  va_copy(v13, va);
  v4 = 8;
  do
  {
    v5 = v13;
    v13 += 8;
    v4 += 8;
  }
  while (*v5);
  MEMORY[0x1E0C86820](__path, v4);
  v7 = (va_list *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  _platform_bzero();
  va_copy(v13, va);
  *v7 = (char *)__arg0;
  v8 = 1;
  do
  {
    v9 = (char **)v13;
    v13 += 8;
    v10 = *v9;
    v7[v8++] = v10;
  }
  while (v10);
  v11 = (char *const **)v13;
  v13 += 8;
  return execve(__path, v7, *v11);
}

int execlp(const char *__file, const char *__arg0, ...)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char **v7;
  uint64_t v8;
  char **v9;
  char *v10;
  va_list v12;
  va_list va;

  va_start(va, __arg0);
  va_copy(v12, va);
  v4 = 8;
  do
  {
    v5 = v12;
    v12 += 8;
    v4 += 8;
  }
  while (*v5);
  MEMORY[0x1E0C86820](__file, v4);
  v7 = (va_list *)((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  _platform_bzero();
  va_copy(v12, va);
  *v7 = (char *)__arg0;
  v8 = 1;
  do
  {
    v9 = (char **)v12;
    v12 += 8;
    v10 = *v9;
    v7[v8++] = v10;
  }
  while (v10);
  execvp(__file, v7);
  return -1;
}

int execvp(const char *__file, char *const *__argv)
{
  char **v4;
  char *v5;
  const char *v6;

  v4 = *_NSGetEnviron();
  v5 = getenv("PATH");
  if (v5)
    v6 = v5;
  else
    v6 = "/usr/bin:/bin";
  execvPe(__file, (uint64_t)v6, __argv, v4);
  return -1;
}

int execv(const char *__path, char *const *__argv)
{
  char ***v4;

  v4 = _NSGetEnviron();
  execve(__path, __argv, *v4);
  return -1;
}

int execvP(const char *__file, const char *__searchpath, char *const *__argv)
{
  char ***v6;

  v6 = _NSGetEnviron();
  execvPe(__file, (uint64_t)__searchpath, __argv, *v6);
  return -1;
}

_DWORD *execvPe(const char *a1, uint64_t a2, char *const *a3, char *const *a4)
{
  char *const *v4;
  const char *i;
  uint64_t v7;
  char *v8;
  _DWORD *result;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  const char *v22;
  char *const *v23;
  int v24;
  char *const *v25;
  const char *v26;
  stat v27;
  char *v28;
  _BYTE v29[1024];

  v25 = a4;
  v4 = a3;
  memset(&v27, 0, sizeof(v27));
  v23 = a3;
  if (!_platform_strchr())
  {
    if (*a1)
    {
      v7 = _platform_strlen();
      v8 = (char *)&v23 - ((MEMORY[0x1E0C86820](v7, v7 + 1) + 16) & 0xFFFFFFFFFFFFFFF0);
      _platform_bzero();
      v28 = v8;
      _platform_strcpy();
      v24 = 0;
      v26 = v29;
      goto LABEL_5;
    }
    goto LABEL_23;
  }
  v24 = 0;
  v28 = 0;
  for (i = a1; ; i = v26)
  {
    execve(i, v4, v25);
    result = __error();
    v14 = *result;
    v26 = i;
    if (v14 <= 0x3F)
    {
      if (((1 << v14) & 0xC000000000100004) != 0)
        goto LABEL_5;
      if (((1 << v14) & 0x4001080) != 0)
        return result;
      if (v14 == 8)
      {
        v16 = 0;
        v17 = 1;
        do
        {
          v18 = v4[v16++];
          ++v17;
        }
        while (v18);
        v19 = 3;
        if (v17 > 3)
          v19 = v17;
        MEMORY[0x1E0C86820](result, 8 * v19);
        v21 = (char *)&v23 - v20;
        _platform_bzero();
        if (v17 == 2)
        {
          *((_QWORD *)v21 + 2) = 0;
          v22 = "sh";
        }
        else
        {
          v22 = *v4;
          _platform_memmove();
        }
        *(_QWORD *)v21 = v22;
        *((_QWORD *)v21 + 1) = i;
        return (_DWORD *)execve("/bin/sh", (char *const *)v21, v25);
      }
    }
    v15 = *__error();
    if (!stat(i, &v27))
    {
      v24 = 1;
      if (v15 != 13)
      {
        result = __error();
        *result = v15;
        return result;
      }
    }
LABEL_5:
    result = strsep(&v28, ":");
    if (!result)
      break;
    v10 = result;
    while (1)
    {
      v11 = *v10 ? _platform_strlen() : 1;
      v12 = _platform_strlen() + v11;
      if ((unint64_t)(v12 - 1023) > 0xFFFFFFFFFFFFFBFELL)
        break;
      write_NOCANCEL();
      write_NOCANCEL();
      write_NOCANCEL();
      result = strsep(&v28, ":");
      v10 = result;
      if (!result)
        goto LABEL_12;
    }
    _platform_memmove();
    v29[v11] = 47;
    _platform_memmove();
    v29[v12 + 1] = 0;
    v4 = v23;
  }
LABEL_12:
  if (v24)
  {
    result = __error();
    v13 = 13;
    goto LABEL_24;
  }
  if (v28)
  {
LABEL_23:
    result = __error();
    v13 = 2;
LABEL_24:
    *result = v13;
  }
  return result;
}

int fmtmsg(uint64_t a1, const char *a2, int a3, const char *a4, const char *a5, const char *a6)
{
  __int16 v10;
  const char *v11;
  unsigned int v12;
  char *v13;
  const char *v14;
  char *v15;
  char *v16;
  int v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  char *v21;
  char *v22;
  int v23;
  const char *v25;
  FILE *v26;
  FILE *v27;
  const char *v29;
  stat v30;

  v10 = a1;
  if (a5)
    v11 = a5;
  else
    v11 = "";
  if ((a1 & 0x100) != 0)
  {
    v13 = getenv("MSGVERB");
    if (v13)
    {
      v14 = v13;
      if (*v13)
      {
        if ((unint64_t)_platform_strlen() <= 0x1E)
        {
          v15 = strdup(v14);
          if (!v15)
            return 3;
          v16 = v15;
          if (nextcomp())
          {
            v29 = a6;
            v17 = 0;
            do
            {
              v18 = 0;
              --v17;
              do
              {
                if (!_platform_strcmp())
                  ++v17;
                v18 += 8;
              }
              while (v18 != 40);
            }
            while (nextcomp());
            if (v17)
            {
              free(v16);
              a6 = v29;
              goto LABEL_20;
            }
            a6 = v29;
          }
LABEL_21:
          v19 = printfmt((uint64_t)v16, (uint64_t)a2, a3, (uint64_t)a4, (uint64_t)v11, (uint64_t)a6);
          if (v19)
          {
            v20 = (char *)v19;
            if (*v19)
              v12 = fprintf(__stderrp, "%s", v19) >> 31;
            else
              v12 = 0;
            free(v16);
            free(v20);
            if ((v10 & 0x200) == 0)
              return v12;
            goto LABEL_28;
          }
          free(v16);
          return 3;
        }
      }
    }
LABEL_20:
    v16 = strdup("label:severity:text:action:tag");
    if (!v16)
      return 3;
    goto LABEL_21;
  }
  v12 = 0;
  if ((a1 & 0x200) == 0)
    return v12;
LABEL_28:
  v21 = printfmt((uint64_t)"label:severity:text:action:tag", (uint64_t)a2, a3, (uint64_t)a4, (uint64_t)v11, (uint64_t)a6);
  if (!v21)
    return 2;
  v22 = v21;
  if (*v21)
  {
    memset(&v30, 0, sizeof(v30));
    v23 = stat("/var/log/console", &v30);
    if ((v30.st_mode & 0xF000) == 0x4000 && v23 == 0)
      v25 = "/var/log/console";
    else
      v25 = "/dev/console";
    v26 = fopen(v25, "a");
    if (v26)
    {
      v27 = v26;
      fputs(v22, v26);
      fclose(v27);
    }
    else if (v12)
    {
      v12 = 3;
    }
    else
    {
      v12 = 2;
    }
  }
  free(v22);
  return v12;
}

_BYTE *printfmt(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  size_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  if (a2)
    v11 = _platform_strlen() + 32;
  else
    v11 = 32;
  if ((a3 - 1) <= 3)
    v11 += _platform_strlen();
  if (a4)
    v11 += _platform_strlen();
  if (a5)
    v11 += _platform_strlen();
  if (a6)
    v11 += _platform_strlen();
  v12 = malloc_type_malloc(v11, 0x967A92F5uLL);
  v13 = v12;
  if (v12)
  {
    *v12 = 0;
    while (nextcomp())
    {
      v14 = _platform_strcmp();
      if (a2 && !v14)
      {
        if (*v13)
          _platform_strlcat();
        goto LABEL_28;
      }
      v15 = _platform_strcmp();
      if ((a3 - 1) <= 3 && !v15)
      {
        if (*v13)
          _platform_strlcat();
        goto LABEL_28;
      }
      v16 = _platform_strcmp();
      if (!a4 || v16)
      {
        v17 = _platform_strcmp();
        if (a5 && !v17)
        {
          if (*v13)
            _platform_strlcat();
LABEL_27:
          _platform_strlcat();
          goto LABEL_28;
        }
        v18 = _platform_strcmp();
        if (!a6 || v18)
          continue;
        if (*v13)
          _platform_strlcat();
      }
      else if (*v13)
      {
        goto LABEL_27;
      }
LABEL_28:
      _platform_strlcat();
    }
    if (*v13)
      _platform_strlcat();
  }
  return v13;
}

char *nextcomp()
{
  char *v0;
  char *result;

  if (nextcomp_lmsgverb)
  {
    v0 = 0;
  }
  else
  {
    _platform_strlcpy();
    v0 = &nextcomp_lmsgverb;
  }
  result = strtok_r(v0, ":", &nextcomp_state);
  if (!result)
    nextcomp_lmsgverb = 0;
  return result;
}

uint64_t rangematch(const char *a1, unsigned int a2, const char *a3, char a4, _QWORD *a5, const char **a6, mbstate_t *a7, mbstate_t *a8, locale_t a9)
{
  const char *v13;
  int v14;
  int v15;
  int v16;
  locale_t v17;
  locale_t v18;
  uint64_t v19;
  const char *v20;
  BOOL v21;
  unsigned int v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  size_t v26;
  size_t v27;
  __darwin_rune_t v28;
  int v29;
  const char *v30;
  size_t v31;
  int v32;
  int v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  int v42;
  size_t v43;
  unint64_t v44;
  wctype_t v45;
  wctype_t v46;
  uint64_t v47;
  int v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  unint64_t v60;
  int *v61;
  size_t v62;
  int v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  int v70;
  uint64_t result;
  unsigned int v72;
  int v73;
  size_t v74;
  int v75;
  unsigned __int8 *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  char *v80;
  locale_t v81;
  __uint32_t *v82;
  mbstate_t *v83;
  mbstate_t *v84;
  int v85;
  uint64_t v88;
  __darwin_ct_rune_t v89;
  __darwin_ct_rune_t v90;
  char v91[4];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __darwin_ct_rune_t v100;
  int v101;

  v13 = a1;
  v89 = 0;
  v88 = 0;
  v98 = 0u;
  v99 = 0u;
  v96 = 0u;
  v97 = 0u;
  v94 = 0u;
  v95 = 0u;
  v92 = 0u;
  v93 = 0u;
  v14 = *(unsigned __int8 *)a1;
  if (v14 == 94 || v14 == 33)
  {
    v13 = a1 + 1;
    v85 = 1;
  }
  else
  {
    v85 = 0;
  }
  if ((a4 & 0x10) != 0)
  {
    if (a2 > 0x7F)
      a2 = ___tolower_l(a2, a9);
    else
      a2 = _DefaultRuneLocale.__maplower[a2];
  }
  v15 = 0;
  v90 = 0;
  v16 = *(unsigned __int8 *)v13;
  v17 = (locale_t)&__global_locale;
  if (a9 != (locale_t)-1)
    v17 = a9;
  if (a9)
    v18 = v17;
  else
    v18 = (locale_t)&__c_locale;
  v19 = a2;
  v81 = v18;
  v82 = &_DefaultRuneLocale.__runetype[a2];
  v20 = v13;
  while (1)
  {
    if (v16 == 47)
    {
      v21 = (a4 & 1) == 0;
      if ((a4 & 2) != 0)
        return 0;
    }
    else
    {
      if (!v16)
        return 0xFFFFFFFFLL;
      if ((a4 & 1) != 0 || v16 != 92)
      {
        if (v16 == 91)
        {
          v22 = *((unsigned __int8 *)v20 + 1);
          v15 = (char)v22;
          if (v22 <= 0x3D && ((1 << v22) & 0x2400400000000000) != 0)
          {
            v83 = a8;
            v80 = (char *)a3;
            v23 = (char *)(v20 + 2);
            do
            {
              v24 = (_BYTE *)_platform_strchr();
              if (!v24)
                return 0xFFFFFFFFLL;
              v25 = v24;
            }
            while (v24[1] != 93);
            if (v15 == 61)
            {
              v37 = *((_OWORD *)&a7->_mbstateL + 5);
              v96 = *((_OWORD *)&a7->_mbstateL + 4);
              v97 = v37;
              v38 = *((_OWORD *)&a7->_mbstateL + 7);
              v98 = *((_OWORD *)&a7->_mbstateL + 6);
              v99 = v38;
              v39 = *((_OWORD *)&a7->_mbstateL + 1);
              v92 = *(_OWORD *)a7->__mbstate8;
              v93 = v39;
              v40 = *((_OWORD *)&a7->_mbstateL + 3);
              v26 = v24 - v23;
              v94 = *((_OWORD *)&a7->_mbstateL + 2);
              v95 = v40;
              v41 = __collate_equiv_class(v23, v24 - v23, a7, a9);
              if (v41 < 0)
                return 0xFFFFFFFFLL;
              v42 = v41;
              if (v41)
              {
                v20 = v25 + 2;
                if (v25[2] != 45 || v25[3] == 93 || !v25[3])
                {
                  a3 = v80;
                  v43 = _platform_strlen();
                  a8 = v83;
                  v44 = __collate_equiv_match(v42, 0, 0, v19, v80, v43, v83, &v88, a9);
                  if (!v44)
                  {
                    v15 = 61;
                    goto LABEL_43;
                  }
                  if (v44 != -1)
                  {
                    a3 = &v80[v88];
                    goto LABEL_118;
                  }
                }
                return 0xFFFFFFFFLL;
              }
              v49 = v97;
              *((_OWORD *)&a7->_mbstateL + 4) = v96;
              *((_OWORD *)&a7->_mbstateL + 5) = v49;
              v50 = v99;
              *((_OWORD *)&a7->_mbstateL + 6) = v98;
              *((_OWORD *)&a7->_mbstateL + 7) = v50;
              v51 = v93;
              *(_OWORD *)a7->__mbstate8 = v92;
              *((_OWORD *)&a7->_mbstateL + 1) = v51;
              v52 = v95;
              *((_OWORD *)&a7->_mbstateL + 2) = v94;
              *((_OWORD *)&a7->_mbstateL + 3) = v52;
              goto LABEL_93;
            }
            if (v15 == 46)
            {
              v26 = v24 - v23;
LABEL_93:
              v53 = __collate_collating_symbol(&v100, 0x18uLL, v23, v26, a7, a9);
              if (v53 + 1 < 2)
                return 0xFFFFFFFFLL;
              v20 = v25 + 2;
              if (v53 < 2)
              {
                v90 = v100;
                v21 = (a4 & 1) == 0;
                a3 = v80;
                a8 = v83;
                if (v100)
                  goto LABEL_34;
                goto LABEL_32;
              }
              *(_DWORD *)v91 = 0;
              a8 = v83;
              if (*v20 == 45 && v25[3] && v25[3] != 93)
                return 0xFFFFFFFFLL;
              if ((_DWORD)v19 == v100)
              {
                v54 = *(_OWORD *)v83->__mbstate8;
                v55 = *((_OWORD *)&v83->_mbstateL + 1);
                v56 = *((_OWORD *)&v83->_mbstateL + 3);
                v94 = *((_OWORD *)&v83->_mbstateL + 2);
                v95 = v56;
                v92 = v54;
                v93 = v55;
                v57 = *((_OWORD *)&v83->_mbstateL + 4);
                v58 = *((_OWORD *)&v83->_mbstateL + 5);
                v59 = *((_OWORD *)&v83->_mbstateL + 7);
                v98 = *((_OWORD *)&v83->_mbstateL + 6);
                v99 = v59;
                v96 = v57;
                v97 = v58;
                v60 = v53 - 1;
                a3 = v80;
                v61 = &v101;
                while (1)
                {
                  v62 = mbrtowc_l((__int32 *)v91, a3, 6uLL, v83, a9);
                  v88 = v62;
                  if (v62 <= 0xFFFFFFFFFFFFFFFDLL)
                  {
                    v63 = *(_DWORD *)v91;
                  }
                  else
                  {
                    v83 = 0;
                    v63 = *(unsigned __int8 *)a3;
                    *(_DWORD *)v91 = v63;
                    v88 = 1;
                    v62 = 1;
                  }
                  if (v63 != *v61)
                    break;
                  a3 += v62;
                  ++v61;
                  if (!--v60)
                    goto LABEL_118;
                }
                v64 = v92;
                v65 = v93;
                v66 = v95;
                a8 = v83;
                *((_OWORD *)&v83->_mbstateL + 2) = v94;
                *((_OWORD *)&v83->_mbstateL + 3) = v66;
                *(_OWORD *)v83->__mbstate8 = v64;
                *((_OWORD *)&v83->_mbstateL + 1) = v65;
                v67 = v96;
                v68 = v97;
                v69 = v99;
                *((_OWORD *)&v83->_mbstateL + 6) = v98;
                *((_OWORD *)&v83->_mbstateL + 7) = v69;
                *((_OWORD *)&v83->_mbstateL + 4) = v67;
                *((_OWORD *)&v83->_mbstateL + 5) = v68;
              }
              a3 = v80;
              goto LABEL_43;
            }
            v20 = v24 + 2;
            if (v24[2] == 45 && v24[3] != 93 && v24[3])
              return 0xFFFFFFFFLL;
            if (v24 - v23 > 14)
              return 0xFFFFFFFFLL;
            _platform_strlcpy();
            v45 = wctype(v91);
            if (!v45)
              return 0xFFFFFFFFLL;
            v46 = v45;
            if (v19 > 0x7F)
            {
              a3 = v80;
              a8 = v83;
              if (v19 < 0x100)
                v48 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v81 + 166) + 120) + 4 * v19 + 60);
              else
                v48 = ___runetype_l(v19, a9);
              v47 = (int)(v48 & v46);
            }
            else
            {
              a8 = v83;
              v47 = *v82 & v45;
              a3 = v80;
            }
            if (!v47)
              goto LABEL_43;
LABEL_118:
            v70 = 1;
LABEL_119:
            v72 = 0;
            while (1)
            {
              v73 = *(unsigned __int8 *)v20;
              if (!*v20)
                break;
              if (v73 == 93)
              {
                *a5 = v20 + 1;
                *a6 = a3;
                return v70 != v85;
              }
              if (v72 == (char)v73)
              {
                v75 = *(unsigned __int8 *)++v20;
                if (v75 == 93)
                {
                  ++v20;
                  v72 = 0;
                }
              }
              else if (!v72 && (char)v73 == 91)
              {
                v76 = (unsigned __int8 *)(v20 + 2);
                v78 = *(unsigned __int8 *)++v20;
                v77 = v78;
                if (((1 << v78) & 0x2400400000000000) != 0)
                {
                  v79 = v77;
                }
                else
                {
                  v76 = (unsigned __int8 *)v20;
                  v79 = 0;
                }
                if (v77 > 0x3D)
                {
                  v72 = 0;
                }
                else
                {
                  v20 = (const char *)v76;
                  v72 = v79;
                }
              }
              else
              {
                v74 = mbrtowc_l(&v90, v20, 6uLL, a7, a9);
                if (v74 > 0xFFFFFFFFFFFFFFFDLL)
                  return 0xFFFFFFFFLL;
                v20 += v74;
              }
            }
            return 0xFFFFFFFFLL;
          }
        }
        v21 = (a4 & 1) == 0;
      }
      else
      {
        ++v20;
        v21 = 1;
      }
    }
LABEL_32:
    v27 = mbrtowc_l(&v90, v20, 6uLL, a7, a9);
    if (v27 > 0xFFFFFFFFFFFFFFFDLL)
      return 0xFFFFFFFFLL;
    v20 += v27;
LABEL_34:
    if ((a4 & 0x10) != 0)
    {
      if (v90 > 0x7F)
        v28 = ___tolower_l(v90, a9);
      else
        v28 = _DefaultRuneLocale.__maplower[v90];
      v90 = v28;
    }
    if (*v20 == 45)
    {
      v29 = *((unsigned __int8 *)v20 + 1);
      if (v20[1])
      {
        if (v29 != 93)
          break;
      }
    }
    if (v90 == (_DWORD)v19)
      goto LABEL_118;
LABEL_43:
    v90 = 0;
    v16 = *(unsigned __int8 *)v20;
    if (v16 == 93 && v20 > v13)
    {
      v70 = 0;
      goto LABEL_119;
    }
  }
  if (v21 && v29 == 92)
    v30 = v20 + 2;
  else
    v30 = v20 + 1;
  v31 = mbrtowc_l(&v89, v30, 6uLL, a7, a9);
  if (v31 > 0xFFFFFFFFFFFFFFFDLL)
    return 0xFFFFFFFFLL;
  v20 = &v30[v31];
  v32 = v89;
  if (v89 != 91)
  {
    if (!v89 || v15 == 61)
      return 0xFFFFFFFFLL;
    goto LABEL_63;
  }
  v33 = *(unsigned __int8 *)v20;
  v15 = (char)v33;
  if (v33 != 46 && v33 != 61)
  {
LABEL_63:
    if (v15 == 58)
      return 0xFFFFFFFFLL;
LABEL_64:
    if ((a4 & 0x10) != 0)
    {
      if (v32 > 0x7F)
        v32 = ___tolower_l(v32, a9);
      else
        v32 = _DefaultRuneLocale.__maplower[v32];
      v89 = v32;
    }
    if (*(_BYTE *)(*((_QWORD *)a9 + 165) + 64))
    {
      if (v90 <= (int)v19 && (int)v19 <= v32)
        goto LABEL_118;
    }
    else if ((int)__collate_range_cmp(v90, v19, a9) <= 0 && (int)__collate_range_cmp(v19, v89, a9) < 1)
    {
      goto LABEL_118;
    }
    goto LABEL_43;
  }
  result = 0xFFFFFFFFLL;
  if ((char)v33 != 58 && (char)v33 != 61)
  {
    v84 = a8;
    v34 = a3;
    while (1)
    {
      v35 = _platform_strchr();
      if (!v35)
        return 0xFFFFFFFFLL;
      v36 = v35;
      if (*(_BYTE *)(v35 + 1) == 93)
      {
        if (__collate_collating_symbol(&v100, 0x18uLL, (char *)v20 + 1, v35 - (_QWORD)(v20 + 1), a7, a9) != 1)
          return 0xFFFFFFFFLL;
        v20 = (const char *)(v36 + 2);
        v32 = v100;
        v89 = v100;
        a3 = v34;
        a8 = v84;
        goto LABEL_64;
      }
    }
  }
  return result;
}

key_t ftok(const char *a1, int a2)
{
  stat v4;

  memset(&v4, 0, sizeof(v4));
  if (stat(a1, &v4) < 0)
    return -1;
  else
    return LOWORD(v4.st_ino) | (a2 << 24) | (LOBYTE(v4.st_dev) << 16);
}

char *__cdecl getbsize(int *a1, uint64_t *a2)
{
  char *v4;
  const char *v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  char v9;
  const char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *__endptr;

  v4 = getenv("BLOCKSIZE");
  if (!v4)
    goto LABEL_22;
  v5 = v4;
  if (!*v4)
    goto LABEL_22;
  __endptr = 0;
  v6 = strtol(v4, &__endptr, 10);
  if ((v6 & 0x8000000000000000) != 0)
  {
LABEL_21:
    warnx("minimum blocksize is 512");
LABEL_22:
    v10 = "";
    v12 = 512;
    v13 = 512;
    goto LABEL_23;
  }
  if (v6 <= 1)
    v7 = 1;
  else
    v7 = v6;
  v8 = *__endptr;
  if (*__endptr)
  {
    if (__endptr[1])
      goto LABEL_25;
    v9 = v8 - 71;
    if ((v8 - 71) <= 0x26)
    {
      if (((1 << v9) & 0x100000001) != 0)
      {
        v10 = "G";
        v11 = 0x40000000;
        v12 = 1;
        goto LABEL_18;
      }
      if (((1 << v9) & 0x1000000010) != 0)
      {
        v10 = "K";
        v11 = 1024;
        v12 = 0x100000;
        goto LABEL_18;
      }
      if (((1 << v9) & 0x4000000040) != 0)
      {
        v10 = "M";
        v11 = 0x100000;
        v12 = 1024;
        goto LABEL_18;
      }
    }
    if (*__endptr)
    {
LABEL_25:
      warnx("%s: unknown blocksize", v5);
      v10 = "";
      v12 = 512;
      v11 = 1;
      goto LABEL_20;
    }
  }
  v10 = "";
  v11 = 1;
  v12 = 0x40000000;
LABEL_18:
  if (v7 > v12)
    warnx("maximum blocksize is %ldG", 1);
  else
    v12 = v7;
LABEL_20:
  v13 = v12 * v11;
  if ((uint64_t)(v12 * v11) <= 511)
    goto LABEL_21;
LABEL_23:
  snprintf(getbsize_header, 0x14uLL, "%ld%s-blocks", v12, v10);
  *a1 = _platform_strlen();
  *a2 = v13;
  return getbsize_header;
}

int cgetset(const char *a1)
{
  int result;

  if (a1)
  {
    topreclen = _platform_strlen();
    toprec = (uint64_t)malloc_type_malloc(topreclen + 1, 0xD42BBA7AuLL);
    if (toprec)
    {
      gottoprec = 0;
      _platform_strcpy();
      return 0;
    }
    else
    {
      *__error() = 12;
      return -1;
    }
  }
  else
  {
    if (toprec)
      free((void *)toprec);
    result = 0;
    toprec = 0;
    topreclen = 0;
  }
  return result;
}

char *__cdecl cgetcap(char *result, const char *a2, int a3)
{
  int v3;
  int v4;
  int v5;
  const char *v7;
  int v8;
  int v9;
  int v11;

  do
  {
    while (1)
    {
      while (1)
      {
        v3 = *result;
        if (!*result)
          return 0;
        ++result;
        if (v3 == 58)
        {
          v4 = *(unsigned __int8 *)a2;
          v5 = *result;
          if (v4 == v5 && v5 != 0)
          {
            v7 = a2 + 1;
            do
            {
              v8 = *++result;
              v5 = v8;
              v9 = *(unsigned __int8 *)v7++;
              v4 = v9;
            }
            while (v9 == v5 && v5 != 0);
          }
          if (!v4)
            break;
        }
      }
      if (v5 == 64)
        return 0;
      if (a3 != 58)
        break;
      if (!v5 || v5 == 58)
        return result;
    }
  }
  while ((char)v5 != a3);
  v11 = *++result;
  if (v11 == 64)
    return 0;
  return result;
}

int cgetent(char **a1, char **a2, const char *a3)
{
  int v4;

  return getent(a1, &v4, (const char **)a2, 0xFFFFFFFFLL, a3, 0);
}

uint64_t getent(_QWORD *a1, _DWORD *a2, const char **a3, uint64_t a4, const char *a5, int a6)
{
  uint64_t v6;
  _BYTE *v10;
  _BYTE *v11;
  const char *v12;
  unint64_t v13;
  uint64_t v14;
  DB *v15;
  void **v16;
  _BYTE *v17;
  void **v18;
  _BYTE *v19;
  int NOCANCEL;
  int v21;
  char v22;
  int v23;
  size_t v24;
  _BYTE *v25;
  const char *v26;
  _BYTE *v27;
  char *v28;
  char *v29;
  int v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int v34;
  uint64_t v35;
  char *v36;
  int v37;
  _BYTE *v38;
  int v39;
  int v40;
  _BYTE *v41;
  int v42;
  char *v43;
  size_t v44;
  _BYTE *v45;
  char *v46;
  DB *v47;
  char *v48;
  char *v49;
  void *i;
  int v51;
  unsigned __int8 *v52;
  const char *v53;
  char *v55;
  uint64_t v58;
  int v60;
  _BYTE *v61;
  uint64_t v62;
  void *v63[128];
  char __str[256];

  if (a6 > 32)
    return 4294967293;
  if (a6 || !toprec || cgetmatch((const char *)toprec, a5))
  {
    v10 = malloc_type_malloc(0x400uLL, 0x940EBFDDuLL);
    if (v10)
    {
      v11 = v10;
      v12 = *a3;
      if (!*a3)
        goto LABEL_33;
      v13 = (unint64_t)(v10 + 1024);
LABEL_9:
      if ((a4 & 0x80000000) != 0)
      {
        snprintf(__str, 0x100uLL, "%s.db", v12);
        v15 = dbopen(__str, 0, 0, DB_HASH, 0);
        if (v15)
        {
          v47 = v15;
          free(v11);
          v48 = strdup(a5);
          if (v48)
          {
            v49 = v48;
            v61 = 0;
            v62 = 0;
            v63[0] = v48;
            for (i = (void *)_platform_strlen(); ; i = (void *)(v62 - 1))
            {
              v63[1] = i;
              v51 = ((uint64_t (*)(DB *, void **, _BYTE **, _QWORD))v47->get)(v47, v63, &v61, 0);
              if (v51 == -1)
              {
                v6 = 4294967294;
                goto LABEL_80;
              }
              if (v51 == 1)
                break;
              v52 = v61;
              v53 = v61 + 1;
              if (*v61 != 2)
              {
                free(v49);
                v6 = *v52 == 1;
                v11 = strdup(v53);
                if ((((uint64_t (*)(DB *))v47->close)(v47) & 0x80000000) != 0)
                  goto LABEL_91;
                if (v11)
                {
                  *a2 = _platform_strlen();
                  *a1 = v11;
                  return v6;
                }
                goto LABEL_88;
              }
              v63[0] = v61 + 1;
            }
            v6 = 0xFFFFFFFFLL;
LABEL_80:
            free(v49);
          }
          else
          {
            v6 = 4294967294;
          }
          ((void (*)(DB *))v47->close)(v47);
          return v6;
        }
        v14 = open_NOCANCEL();
        if ((v14 & 0x80000000) != 0)
          goto LABEL_32;
        v60 = 1;
      }
      else
      {
        lseek(a4, 0, 0);
        v60 = 0;
        v14 = a4;
      }
      v16 = v63;
      v17 = v11;
      v18 = v63;
      while (1)
      {
        v19 = v17;
        if (v18 >= v16)
        {
          NOCANCEL = read_NOCANCEL();
          v21 = NOCANCEL;
          if (NOCANCEL <= 0)
          {
            if ((a4 & 0x80000000) != 0)
              close_NOCANCEL();
            if ((v21 & 0x80000000) == 0)
            {
              *v17 = 0;
              v14 = 0xFFFFFFFFLL;
LABEL_32:
              v26 = a3[1];
              ++a3;
              v12 = v26;
              a4 = v14;
              if (!v26)
              {
LABEL_33:
                free(v11);
                return 0xFFFFFFFFLL;
              }
              goto LABEL_9;
            }
LABEL_91:
            free(v11);
            return 4294967294;
          }
          v18 = v63;
          v16 = (void **)((char *)v63 + NOCANCEL);
        }
        v23 = *(unsigned __int8 *)v18;
        v18 = (void **)((char *)v18 + 1);
        v22 = v23;
        if (v23 == 10)
        {
          if (v17 <= v11 || (--v17, *(v19 - 1) != 92))
          {
            *v19 = 0;
            v17 = v11;
            if (*v11)
            {
              v17 = v11;
              if (*v11 != 35)
              {
                v17 = v11;
                if (!cgetmatch(v11, a5))
                {
                  a4 = v14;
                  goto LABEL_36;
                }
              }
            }
          }
        }
        else
        {
          *v17++ = v22;
          if ((unint64_t)(v19 + 1) >= v13)
          {
            v24 = v13 - (_QWORD)v11 + 1024;
            v25 = reallocf(v11, v24);
            if (!v25)
            {
              *__error() = 12;
              if ((a4 & 0x80000000) != 0)
                close_NOCANCEL();
              return 4294967294;
            }
            v13 = (unint64_t)&v25[v24];
            v17 = &v25[(_DWORD)v17 - (_DWORD)v11];
            v11 = v25;
          }
        }
      }
    }
LABEL_88:
    *__error() = 12;
    return 4294967294;
  }
  v27 = malloc_type_malloc(topreclen + 1024, 0xB0DCE9B3uLL);
  if (!v27)
    goto LABEL_88;
  v11 = v27;
  v60 = 0;
  v19 = (_BYTE *)(_platform_strcpy() + topreclen);
  v13 = (unint64_t)(v19 + 1025);
LABEL_36:
  v55 = v19 + 1;
  LODWORD(v61) = 0;
  v63[0] = 0;
  v28 = cgetcap(v11, "tc", 61);
  if (!v28)
  {
    v30 = 0;
LABEL_61:
    if (v60)
      close_NOCANCEL();
    *a2 = (_DWORD)v55 + ~(_DWORD)v11;
    if (v13 <= (unint64_t)v55 || (v11 = reallocf(v11, v55 - v11)) != 0)
    {
      *a1 = v11;
      return v30 != 0;
    }
    goto LABEL_88;
  }
  v29 = v28;
  v30 = 0;
  v31 = (a6 + 1);
  while (1)
  {
    v32 = v29;
    while (1)
    {
      v33 = v32;
      v34 = *v32;
      if (!*v32)
        break;
      ++v32;
      if (v34 == 58)
      {
        *v33 = 0;
        break;
      }
    }
    v35 = getent(v63, &v61, a3, a4, v29, v31);
    if (!(_DWORD)v35)
    {
      v36 = v29 - 3;
      v37 = (_DWORD)v36 - (_DWORD)v32;
      goto LABEL_50;
    }
    v6 = v35;
    if ((int)v35 <= -2)
      break;
    if ((_DWORD)v35 == -1)
    {
      *(v32 - 1) = 58;
      v29 = cgetcap(v32 - 1, "tc", 61);
      v30 = 1;
      if (!v29)
        goto LABEL_61;
    }
    else
    {
      v36 = v29 - 3;
      v37 = (_DWORD)v36 - (_DWORD)v32;
      if ((_DWORD)v35 == 1)
        v30 = 1;
LABEL_50:
      v38 = v63[0];
      do
      {
        v39 = *v38;
        if (!*v38)
          break;
        ++v38;
      }
      while (v39 != 58);
      v40 = (_DWORD)v61 + LODWORD(v63[0]) - (_DWORD)v38;
      v41 = &v38[v40];
      if (*(v41 - 1) != 58)
      {
        *v41 = 58;
        ++v40;
      }
      v42 = v40 + v37;
      v43 = v55;
      v58 = v42;
      if ((uint64_t)(v13 - (_QWORD)v55) <= v42)
      {
        v44 = v13 - (_QWORD)v11 + v42 + 1024;
        v45 = reallocf(v11, v44);
        if (!v45)
        {
          *__error() = 12;
          if (v60)
            close_NOCANCEL();
          v6 = 4294967294;
          v11 = v63[0];
          goto LABEL_68;
        }
        v13 = (unint64_t)&v45[v44];
        v43 = &v45[(_DWORD)v55 - (_DWORD)v11];
        v36 = &v45[(_DWORD)v36 - (_DWORD)v11];
        v11 = v45;
      }
      v46 = v43;
      _platform_memmove();
      _platform_memmove();
      v55 = &v46[v58];
      free(v63[0]);
      v29 = cgetcap(&v36[v40 - 1], "tc", 61);
      if (!v29)
        goto LABEL_61;
    }
  }
  if (v60)
    close_NOCANCEL();
LABEL_68:
  free(v11);
  return v6;
}

int cgetmatch(const char *a1, const char *a2)
{
  const char *v2;
  int v3;
  int v4;
  int v5;
  int v6;

  if (a2 && *a2)
  {
LABEL_3:
    v2 = a2;
    while (1)
    {
      v3 = *(unsigned __int8 *)v2;
      if (!*v2)
        break;
      v4 = *(unsigned __int8 *)a1++;
      ++v2;
      if (v4 != v3)
        goto LABEL_10;
    }
    v5 = *(unsigned __int8 *)a1;
    if (!*a1 || v5 == 58 || v5 == 124)
      return 0;
LABEL_10:
    --a1;
    while (1)
    {
      v6 = *(unsigned __int8 *)a1;
      if (!*a1 || v6 == 58)
        break;
      ++a1;
      if (v6 == 124)
        goto LABEL_3;
    }
  }
  return -1;
}

int cgetfirst(char **a1, char **a2)
{
  if (pfp)
  {
    fclose((FILE *)pfp);
    pfp = 0;
  }
  dbp = 0;
  gottoprec = 0;
  slash = 0;
  return cgetnext(a1, a2);
}

int cgetclose(void)
{
  if (pfp)
  {
    fclose((FILE *)pfp);
    pfp = 0;
  }
  dbp = 0;
  gottoprec = 0;
  slash = 0;
  return 0;
}

int cgetnext(char **a1, char **a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  char **v7;
  FILE *v8;
  char *v9;
  BOOL v10;
  _QWORD *v11;
  const char *v12;
  BOOL v13;
  _RuneLocale *v14;
  int v15;
  int v16;
  _BYTE *v19;
  int v20;
  FILE *v21;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v28;
  size_t v29;
  _BYTE v30[1024];
  char v31[1024];

  v29 = 0;
  v4 = __locale_key;
  v5 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (v5)
    v6 = v5;
  else
    v6 = &__global_locale;
  v7 = (char **)dbp;
  if (!dbp)
  {
    dbp = (uint64_t)a2;
    v7 = a2;
  }
  v8 = (FILE *)pfp;
  if (pfp || (v8 = fopen(*v7, "r"), (pfp = (uint64_t)v8) != 0))
  {
    v28 = 0;
    v9 = (char *)toprec;
    if (toprec)
      v10 = gottoprec == 0;
    else
      v10 = 0;
    if (!v10)
    {
      if (v6 == (_QWORD *)-1)
        v11 = &__global_locale;
      else
        v11 = v6;
      do
      {
        v9 = fgetln(v8, &v29);
        v8 = (FILE *)pfp;
        if (v9 || !pfp)
        {
          v13 = 0;
          v9[v29 - 1] = 0;
          if (v29 != 1)
          {
            v14 = &_DefaultRuneLocale;
            if (*v9 < 0)
              v14 = *(_RuneLocale **)(v11[166] + 120);
            v15 = *v9;
            v16 = v14->__runetype[*v9] & 0x4000;
            if (v15 != 58 && v16 == 0 && v15 != 35 && slash == 0)
            {
              slash = v9[v29 - 2] == 92;
              goto LABEL_38;
            }
            v13 = v9[v29 - 2] == 92;
          }
          slash = v13;
        }
        else
        {
          if (ferror((FILE *)pfp))
          {
LABEL_63:
            v26 = *__error();
            fclose((FILE *)pfp);
            pfp = 0;
            dbp = 0;
            gottoprec = 0;
            slash = 0;
            *__error() = v26;
            goto LABEL_64;
          }
          fclose(v8);
          pfp = 0;
          v12 = *(const char **)(dbp + 8);
          dbp += 8;
          if (!v12)
          {
            dbp = 0;
            gottoprec = 0;
            goto LABEL_66;
          }
          v8 = fopen(v12, "r");
          pfp = (uint64_t)v8;
          if (!v8)
          {
            dbp = 0;
            gottoprec = 0;
            LODWORD(v12) = -1;
LABEL_66:
            slash = 0;
            return (int)v12;
          }
        }
        v9 = (char *)toprec;
      }
      while (!toprec || (gottoprec & 1) != 0);
    }
    gottoprec = 1;
LABEL_38:
    v19 = v30;
    while (1)
    {
      while (1)
      {
        v20 = *v9;
        if (!*v9 || v20 == 92)
          break;
        if (v20 == 58)
        {
          v23 = 0;
          *(_WORD *)v19 = 58;
          while (1)
          {
            v24 = v30[v23];
            if (!v30[v23] || v24 == 58 || v24 == 124)
              break;
            v31[v23++] = v24;
          }
          v31[v23] = 0;
          v25 = getent(a1, &v28, (const char **)a2, 0xFFFFFFFFLL, v31, 0);
          if ((v25 + 3) <= 1)
          {
            if (pfp)
            {
              fclose((FILE *)pfp);
              pfp = 0;
            }
            dbp = 0;
            gottoprec = 0;
            slash = 0;
          }
          LODWORD(v12) = v25 + 1;
          return (int)v12;
        }
        *v19++ = v20;
        ++v9;
      }
      v9 = fgetln((FILE *)pfp, &v29);
      v21 = (FILE *)pfp;
      if (!v9 && pfp != 0)
        break;
      v9[v29 - 1] = 0;
    }
    if (ferror((FILE *)pfp))
      goto LABEL_63;
    fclose(v21);
    pfp = 0;
  }
  dbp = 0;
  gottoprec = 0;
  slash = 0;
LABEL_64:
  LODWORD(v12) = -1;
  return (int)v12;
}

int cgetstr(char *a1, const char *a2, char **a3)
{
  char *v4;
  unsigned __int8 *v5;
  char *v6;
  char *v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int64_t v14;
  int v15;
  int64_t v16;
  int v17;

  v4 = cgetcap(a1, a2, 61);
  if (!v4)
    return -1;
  v5 = (unsigned __int8 *)v4;
  v6 = (char *)malloc_type_malloc(0x64uLL, 0xC13B5E1FuLL);
  if (v6)
  {
    v7 = v6;
LABEL_4:
    v8 = 100;
    while (1)
    {
      v9 = *v5;
      if (v9 <= 0x5D)
        break;
      if (v9 != 94)
        goto LABEL_22;
      v9 = v5[1];
      if (v9 == 63)
      {
        *v7 = 127;
        v5 += 2;
        goto LABEL_25;
      }
      if (!v5[1] || v9 == 58)
      {
LABEL_49:
        *v7 = 0;
        v16 = v7 - v6;
        v17 = v16 + 1;
        if (v8 == 1 || (v6 = (char *)reallocf(v6, v16 + 1)) != 0)
        {
          v15 = v17 - 1;
          *a3 = v6;
          return v15;
        }
        return -2;
      }
      v5 += 2;
      LOBYTE(v9) = v9 & 0x1F;
LABEL_23:
      *v7 = v9;
LABEL_25:
      ++v7;
      if (!--v8)
      {
        v14 = v7 - v6;
        v6 = (char *)reallocf(v6, v7 - v6 + 100);
        v7 = &v6[v14];
        v15 = -2;
        if (v6)
          goto LABEL_4;
        return v15;
      }
    }
    if (v9 == 92)
    {
      v10 = (char)v5[1];
      if (!v5[1])
        goto LABEL_49;
      LOBYTE(v9) = v5[1];
      if (v9 == 58)
        goto LABEL_49;
      if ((v10 & 0xF8) == 0x30)
      {
        v11 = 0;
        v12 = 0;
        v13 = (uint64_t)(v5 + 4);
        while (1)
        {
          v12 = 8 * v12 + v9 - 48;
          if ((_DWORD)v11 == 2)
            break;
          LOBYTE(v9) = v5[v11++ + 2];
          if ((v9 & 0xF8) != 0x30)
          {
            v13 = (uint64_t)&v5[v11 + 1];
            break;
          }
        }
        *v7 = v12;
        v5 = (unsigned __int8 *)v13;
        goto LABEL_25;
      }
      v5 += 2;
      if (v10 > 97)
      {
        if (v10 <= 109)
        {
          switch(v10)
          {
            case 'b':
LABEL_32:
              *v7 = 8;
              break;
            case 'c':
LABEL_41:
              *v7 = 58;
              break;
            case 'e':
LABEL_42:
              *v7 = 27;
              break;
            case 'f':
LABEL_43:
              *v7 = 12;
              break;
            default:
              goto LABEL_23;
          }
          goto LABEL_25;
        }
        switch(v10)
        {
          case 'n':
LABEL_44:
            *v7 = 10;
            goto LABEL_25;
          case 'r':
LABEL_45:
            *v7 = 13;
            goto LABEL_25;
          case 't':
LABEL_40:
            *v7 = 9;
            goto LABEL_25;
        }
      }
      else
      {
        if (v10 <= 77)
        {
          switch(v10)
          {
            case 'B':
              goto LABEL_32;
            case 'C':
              goto LABEL_41;
            case 'E':
              goto LABEL_42;
            case 'F':
              goto LABEL_43;
            default:
              goto LABEL_23;
          }
        }
        switch(v10)
        {
          case 'N':
            goto LABEL_44;
          case 'R':
            goto LABEL_45;
          case 'T':
            goto LABEL_40;
        }
      }
      goto LABEL_23;
    }
    if (!*v5 || v9 == 58)
      goto LABEL_49;
LABEL_22:
    ++v5;
    goto LABEL_23;
  }
  *__error() = 12;
  return -2;
}

int cgetustr(char *a1, const char *a2, char **a3)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int result;
  char *v13;

  v4 = cgetcap(a1, a2, 61);
  if (!v4)
    return -1;
  v5 = v4;
  v6 = (char *)malloc_type_malloc(0x64uLL, 0xA83E6FC3uLL);
  if (v6)
  {
    v7 = v6;
    v8 = v6;
LABEL_4:
    v9 = 0;
    while (1)
    {
      v10 = v5[v9];
      if (!v5[v9] || v10 == 58)
        break;
      v7[v9++] = v10;
      if ((_DWORD)v9 == 100)
      {
        v11 = v7 - v8 + v9;
        v8 = (char *)reallocf(v8, v11 + 100);
        v7 = &v8[v11];
        v5 += v9;
        result = -2;
        if (v8)
          goto LABEL_4;
        return result;
      }
    }
    v7[v9] = 0;
    v13 = v8;
    if ((_DWORD)v9 == 99 || (v13 = (char *)reallocf(v8, v7 - v8 + v9 + 1)) != 0)
    {
      result = (_DWORD)v7 - (_DWORD)v8 + v9;
      *a3 = v13;
      return result;
    }
  }
  else
  {
    *__error() = 12;
  }
  return -2;
}

int cgetnum(char *a1, const char *a2, uint64_t *a3)
{
  char *v4;
  char *v5;
  int v6;
  BOOL v7;
  int v8;
  int result;
  uint64_t v10;
  int v11;
  int v12;
  int v13;

  v4 = cgetcap(a1, a2, 35);
  if (!v4)
    return -1;
  if (*v4 == 48)
  {
    v5 = v4 + 2;
    v6 = *++v4;
    v7 = (v6 | 0x20) == 120;
    if ((v6 | 0x20) == 0x78)
      v8 = 16;
    else
      v8 = 8;
    if (v7)
      v4 = v5;
  }
  else
  {
    v8 = 10;
  }
  v10 = 0;
  while (1)
  {
    v11 = *v4;
    if ((v11 - 48) >= 0xA)
    {
      if ((v11 - 97) >= 6)
      {
        if ((v11 - 65) > 5)
          break;
        v12 = -55;
      }
      else
      {
        v12 = -87;
      }
    }
    else
    {
      v12 = -48;
    }
    v13 = v12 + v11;
    if (v13 >= v8)
      break;
    v10 = v10 * v8 + v13;
    ++v4;
  }
  result = 0;
  *a3 = v10;
  return result;
}

int gethostname(char *a1, size_t a2)
{
  int result;
  size_t v5;
  size_t v6;
  _BYTE v7[257];
  int v8[2];

  v6 = a2;
  *(_QWORD *)v8 = 0xA00000001;
  if (a2 > 0x100)
  {
    if (sysctl(v8, 2u, a1, &v6, 0, 0) != -1)
      return 0;
  }
  else
  {
    v5 = 257;
    if (sysctl(v8, 2u, v7, &v5, 0, 0) != -1)
    {
      _platform_strncpy();
      result = 0;
      a1[a2 - 1] = 0;
      return result;
    }
  }
  if (*__error() == 12)
    *__error() = 63;
  return -1;
}

char *getlogin(void)
{
  char *v0;
  int v2;

  pthread_mutex_lock(&__logname_mutex);
  v0 = getlogin_basic(&v2);
  pthread_mutex_unlock(&__logname_mutex);
  return v0;
}

_BYTE *getlogin_basic(int *a1)
{
  _BYTE *result;
  int v3;
  int *v4;

  result = (_BYTE *)__logname;
  if (!__logname)
  {
    result = malloc_type_calloc(1uLL, 0xFFuLL, 0xB6832FCAuLL);
    __logname = (uint64_t)result;
    if (!result)
    {
      v3 = 12;
LABEL_10:
      *a1 = v3;
      return result;
    }
  }
  if (!*result && (__getlogin() & 0x80000000) != 0)
  {
    v4 = __error();
    result = 0;
    v3 = *v4;
    goto LABEL_10;
  }
  *a1 = 0;
  if (*(_BYTE *)__logname)
    return (_BYTE *)__logname;
  else
    return 0;
}

int getlogin_r(char *a1, size_t a2)
{
  int v3;
  int v5;

  v5 = 0;
  pthread_mutex_lock(&__logname_mutex);
  getlogin_basic(&v5);
  v3 = v5;
  if (!v5)
  {
    if (_platform_strlcpy() <= a2)
      v3 = 0;
    else
      v3 = 34;
  }
  pthread_mutex_unlock(&__logname_mutex);
  return v3;
}

int getpeereid(int a1, uid_t *a2, gid_t *a3)
{
  int result;
  gid_t v6;
  socklen_t v7;
  _OWORD v8[5];

  memset(v8, 0, 76);
  v7 = 76;
  result = getsockopt(a1, 0, 1, v8, &v7);
  if (!result)
  {
    if (LODWORD(v8[0]))
    {
      *__error() = 22;
      return -1;
    }
    else
    {
      result = 0;
      v6 = HIDWORD(v8[0]);
      *a2 = DWORD1(v8[0]);
      *a3 = v6;
    }
  }
  return result;
}

int glob_b(const char *a1, int a2, void *a3, glob_t *a4)
{
  a4->gl_flags = a2 & 0x7FFFFEFF | 0x80000000;
  a4->gl_errfunc = (int (__cdecl *)(const char *, int))a3;
  return __glob((uint64_t)a1, (uint64_t)a4);
}

uint64_t globexp1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  _BYTE *v14;
  int v15;
  uint64_t *v16;
  uint64_t *j;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  uint64_t *k;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _BYTE v34[8192];

  v2 = MEMORY[0x1E0C86820](a1, a2);
  v6 = v5;
  v7 = v4;
  v8 = v3;
  v9 = v2;
  for (i = 0; ; i += 8)
  {
    v11 = *(_QWORD *)(v2 + i);
    if (v11 == 123)
      break;
    if (!v11)
      return glob0(v2, v3);
  }
  if ((*(_BYTE *)(v3 + 25) & 0x10) != 0)
  {
    v13 = (*v4)++;
    if (v13 >= 0x80)
    {
      *__error() = 7;
      return 0xFFFFFFFFLL;
    }
  }
  v14 = v34;
  if (i)
  {
    _platform_memmove();
    v14 = &v34[i];
  }
  v15 = 0;
  *(_QWORD *)v14 = 0;
  v16 = (uint64_t *)(v9 + i + 8);
  for (j = v16; ; ++j)
  {
    v18 = *j;
    if (*j > 122)
      break;
    if (v18 == 91)
    {
      v19 = j;
      do
      {
        v21 = v19[1];
        ++v19;
        v20 = v21;
      }
      while (v21 != 93 && v20 != 0);
      if (v20)
        j = v19;
    }
    else if (!v18)
    {
      return glob0(v9, v8);
    }
LABEL_28:
    ;
  }
  if (v18 == 123)
  {
    ++v15;
    goto LABEL_28;
  }
  if (v18 != 125)
    goto LABEL_28;
  if (v15)
  {
    --v15;
    goto LABEL_28;
  }
  if (v16 <= j)
  {
    v23 = 0;
    for (k = v16; k <= j; ++k)
    {
      v25 = *k;
      if (*k > 122)
      {
        if (v25 == 123)
        {
          ++v23;
          continue;
        }
        if (v25 == 125)
        {
          if (v23)
          {
            --v23;
            continue;
          }
LABEL_49:
          v30 = v14;
          if (v16 < k)
          {
            v30 = v14;
            do
            {
              v31 = *v16++;
              *v30++ = v31;
            }
            while (v16 < k);
          }
          v32 = j + 1;
          do
          {
            v33 = *v32++;
            *v30++ = v33;
          }
          while (v33);
          result = globexp1(v34, v8, v7, v6);
          if ((_DWORD)result)
            return result;
          v16 = k + 1;
        }
      }
      else
      {
        if (v25 != 44)
        {
          if (v25 == 91)
          {
            v26 = k;
            do
            {
              v28 = v26[1];
              ++v26;
              v27 = v28;
            }
            while (v28 != 93 && v27 != 0);
            if (v27)
              k = v26;
          }
          continue;
        }
        if (!v23)
          goto LABEL_49;
      }
    }
  }
  return 0;
}

uint64_t g_stat(__int32 *a1, stat *a2, uint64_t a3, _xlocale *a4)
{
  char v7[1029];

  if (__gl_g_Ctoc(a1, v7, 0x405uLL, a4))
  {
    *__error() = 63;
    return 0xFFFFFFFFLL;
  }
  else if ((*(_BYTE *)(a3 + 24) & 0x40) != 0)
  {
    return (*(uint64_t (**)(char *, stat *))(a3 + 80))(v7, a2);
  }
  else
  {
    return stat(v7, a2);
  }
}

uint64_t err_aborted(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  unsigned int (*v6)(uint64_t, _QWORD);
  int *v7;

  if ((*(_DWORD *)(a1 + 24) & 0x80000000) != 0)
  {
    v4 = *(_QWORD *)(a1 + 40);
    v5 = __error();
    if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v4 + 16))(v4, a2, *v5))
      return 4294967294;
  }
  v6 = *(unsigned int (**)(uint64_t, _QWORD))(a1 + 40);
  if (v6 && (v7 = __error(), v6(a2, *v7)))
    return 4294967294;
  else
    return (*(unsigned __int8 *)(a1 + 24) << 29 >> 31) & 0xFFFFFFFE;
}

uint64_t jrand48(unsigned __int16 a1[3])
{
  int64_t v1;

  v1 = _rand48_add + (*(unsigned int *)a1 | ((unint64_t)a1[2] << 32)) * _rand48_mult;
  *a1 = _rand48_add + *(_DWORD *)a1 * _rand48_mult;
  a1[1] = WORD1(v1);
  a1[2] = WORD2(v1);
  return (int)(v1 >> 16);
}

void lcong48(unsigned __int16 a1[7])
{
  _rand48_seed = *(unsigned int *)a1 | ((unint64_t)a1[2] << 32);
  _rand48_mult = *(unsigned int *)(a1 + 3) | ((unint64_t)a1[5] << 32);
  _rand48_add = a1[6];
}

uint64_t lockf_NOCANCEL(uint64_t a1, int a2)
{
  uint64_t result;
  int *v3;
  int v4;

  switch(a2)
  {
    case 0:
    case 1:
    case 2:
      result = __fcntl_nocancel();
      break;
    case 3:
      result = __fcntl_nocancel();
      if ((_DWORD)result != -1)
      {
        if (getpid())
        {
          v3 = __error();
          v4 = 35;
          goto LABEL_4;
        }
        result = 0;
      }
      break;
    default:
      v3 = __error();
      v4 = 22;
LABEL_4:
      *v3 = v4;
      result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t mrand48(void)
{
  _rand48_seed = _rand48_add + _rand48_mult * _rand48_seed;
  return (int)(_rand48_seed >> 16);
}

int nice(int a1)
{
  int v2;
  int v3;

  *__error() = 0;
  v2 = getpriority(0, 0);
  if (v2 != -1 || !*__error())
  {
    if (v2 + a1 <= 19)
      v3 = a1;
    else
      v3 = 19 - v2;
    if (setpriority(0, 0, v3 + v2) != -1)
      return getpriority(0, 0);
    if (*__error() == 13)
      *__error() = 1;
  }
  return -1;
}

uint64_t nrand48(unsigned __int16 a1[3])
{
  unint64_t v1;

  v1 = _rand48_add + (*(unsigned int *)a1 | ((unint64_t)a1[2] << 32)) * _rand48_mult;
  *a1 = _rand48_add + *(_DWORD *)a1 * _rand48_mult;
  a1[1] = WORD1(v1);
  a1[2] = WORD2(v1);
  return (v1 >> 17) & 0x7FFFFFFF;
}

uint64_t _filldir(uint64_t a1, int a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  off_t v8;
  char *v9;
  char *v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  int v15;
  uint64_t *v16;
  int v17;
  char *v18;
  int64_t v19;
  int v21;
  int *v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v4 = getpagesize();
  if ((v4 & 0x3FF) != 0)
    v5 = 1024;
  else
    v5 = v4;
  v6 = openat_NOCANCEL();
  if (v6 == -1)
    return 0;
  v7 = v6;
  if (!a2 || (v8 = lseek(*(_DWORD *)a1, 0, 1), v8 != -1) && lseek(v7, v8, 0) != -1)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      if (v12 > 1023)
      {
        v14 = v10;
      }
      else
      {
        v11 += v5;
        v13 = (char *)reallocf(v9, v11);
        if (!v13)
          break;
        v9 = v13;
        v12 += v5;
        v14 = &v13[v11 - v12];
      }
      v15 = __getdirentries64();
      if (v15 < 0)
        break;
      v10 = &v14[v15];
      v12 -= v15;
      if (!v15)
      {
        close_NOCANCEL();
        v16 = 0;
        *(_QWORD *)(a1 + 24) = v9;
        while (1)
        {
          if (v9 >= v14)
          {
            v17 = 0;
            v18 = v9;
          }
          else
          {
            v17 = 0;
            v18 = v9;
            do
            {
              if ((v18 & 3) != 0)
                break;
              v19 = *((unsigned __int16 *)v18 + 8);
              if (!*((_WORD *)v18 + 8) || v14 + 1 - v18 < v19)
                break;
              if (*(_QWORD *)v18)
              {
                if (v16)
                  v16[v17] = (uint64_t)v18;
                ++v17;
              }
              v18 += v19;
            }
            while (v18 < v14);
          }
          if (v16)
            break;
          v16 = (uint64_t *)malloc_type_malloc(8 * (v17 + 1), 0x2004093837F09uLL);
          if (!v16)
            goto LABEL_45;
        }
        mergesort(v16, v17, 8uLL, (int (__cdecl *)(const void *, const void *))opendir_compar);
        v16[v17] = 0;
        v24 = *v16;
        if (*v16)
        {
          v25 = 0;
          v26 = v16 + 1;
          do
          {
            v27 = v25;
            v25 = v24;
            if (v27)
            {
              v28 = _platform_strcmp();
              v25 = v24;
              if (!v28)
              {
                *(_QWORD *)v24 = 0;
                v25 = v27;
              }
            }
            if (*(_BYTE *)(v24 + 20) == 14 && (*(_BYTE *)(a1 + 56) & 1) != 0)
              *(_QWORD *)v24 = 0;
            v29 = *v26++;
            v24 = v29;
          }
          while (v29);
        }
        free(v16);
LABEL_45:
        *(_DWORD *)(a1 + 32) = v11;
        *(_QWORD *)(a1 + 16) = &v18[-*(_QWORD *)(a1 + 24)];
        return 1;
      }
    }
  }
  v21 = *__error();
  close_NOCANCEL();
  v22 = __error();
  result = 0;
  *v22 = v21;
  return result;
}

uint64_t opendir_compar()
{
  return _platform_strcmp();
}

uint64_t pause_NOCANCEL()
{
  sigset_t v1;

  v1 = 0;
  sigprocmask(0, 0, &v1);
  return sigsuspend_NOCANCEL();
}

FILE *__cdecl popen(const char *a1, const char *a2)
{
  int v4;
  int v5;
  FILE *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  int v10;
  uint64_t i;
  char ***v13;
  int v14;
  int v16;
  posix_spawn_file_actions_t v17;
  pid_t v18;
  char *__argv[2];
  __int128 v20;
  int v21;
  int v22;

  if (off_1EDF54E10)
  {
    off_1EDF54E10(a1);
    if (off_1EDF54E10)
      off_1EDF54E10(a2);
  }
  v18 = 0;
  *(_OWORD *)__argv = 0u;
  v20 = 0u;
  v17 = 0;
  if (!a2)
    goto LABEL_9;
  v4 = _platform_strcmp();
  if (!v4)
  {
    if ((socketpair(1, 1, 0, &v21) & 0x80000000) == 0)
    {
      a2 = "r+";
      goto LABEL_13;
    }
    return 0;
  }
  v5 = *(unsigned __int8 *)a2;
  if (v5 != 119 && v5 != 114 || a2[1])
  {
LABEL_9:
    v6 = 0;
    *__error() = 22;
    return v6;
  }
  if (pipe(&v21) < 0)
    return 0;
LABEL_13:
  if (*a2 == 114)
  {
    v6 = fdopen(v21, a2);
    if (v6)
      goto LABEL_15;
LABEL_19:
    close_NOCANCEL();
    close_NOCANCEL();
    return v6;
  }
  v6 = fdopen(v22, a2);
  if (!v6)
    goto LABEL_19;
LABEL_15:
  v7 = malloc_type_malloc(0x18uLL, 0x102004062D53EE8uLL);
  if (!v7)
  {
    fclose(v6);
    close_NOCANCEL();
    return 0;
  }
  v8 = v7;
  v9 = posix_spawn_file_actions_init(&v17);
  if (v9)
  {
    v10 = v9;
    fclose(v6);
    close_NOCANCEL();
    free(v8);
    v6 = 0;
    *__error() = v10;
  }
  else
  {
    if (*a2 == 114)
    {
      posix_spawn_file_actions_addclose(&v17, v21);
      if (v22 != 1)
      {
        posix_spawn_file_actions_adddup2(&v17, v22, 1);
        posix_spawn_file_actions_addclose(&v17, v22);
      }
      if (!v4)
        posix_spawn_file_actions_adddup2(&v17, 1, 0);
    }
    else
    {
      if (v21)
      {
        posix_spawn_file_actions_adddup2(&v17, v21, 0);
        posix_spawn_file_actions_addclose(&v17, v21);
      }
      posix_spawn_file_actions_addclose(&v17, v22);
    }
    pthread_mutex_lock(&__popen_pidlist_mutex);
    for (i = __popen_pidlist; i; i = *(_QWORD *)i)
      posix_spawn_file_actions_addclose(&v17, *(_DWORD *)(i + 16));
    __argv[0] = "sh";
    __argv[1] = "-c";
    v20 = (unint64_t)a1;
    v13 = _NSGetEnviron();
    v14 = posix_spawn(&v18, "/bin/sh", &v17, 0, __argv, *v13);
    pthread_mutex_unlock(&__popen_pidlist_mutex);
    posix_spawn_file_actions_destroy(&v17);
    if (v14)
    {
      if (v14 == 35 || v14 == 12)
      {
        fclose(v6);
        close_NOCANCEL();
        free(v8);
        v6 = 0;
        *__error() = v14;
        return v6;
      }
      v18 = -1;
    }
    if (*a2 == 114)
      v16 = v21;
    else
      v16 = v22;
    *((_DWORD *)v8 + 4) = v16;
    close_NOCANCEL();
    v8[1] = v6;
    *((_DWORD *)v8 + 5) = v18;
    pthread_mutex_lock(&__popen_pidlist_mutex);
    *v8 = __popen_pidlist;
    __popen_pidlist = (uint64_t)v8;
    pthread_mutex_unlock(&__popen_pidlist_mutex);
    fwide(v6, -1);
  }
  return v6;
}

int pclose(FILE *a1)
{
  pid_t *v2;
  uint64_t *v3;
  pid_t *v4;
  uint64_t *v5;
  pid_t v6;
  int v8;

  if (off_1EDF54E08)
    off_1EDF54E08(a1, 152);
  pthread_mutex_lock(&__popen_pidlist_mutex);
  v2 = 0;
  v3 = &__popen_pidlist;
  v4 = (pid_t *)&__popen_pidlist;
  do
  {
    v4 = *(pid_t **)v4;
    if (!v4)
    {
      pthread_mutex_unlock(&__popen_pidlist_mutex);
      return -1;
    }
    v5 = (uint64_t *)v2;
    v2 = v4;
  }
  while (*((FILE **)v4 + 1) != a1);
  if (v5)
    v3 = v5;
  *v3 = *(_QWORD *)*v3;
  pthread_mutex_unlock(&__popen_pidlist_mutex);
  fclose(a1);
  if (v4[5] < 0)
  {
    free(v4);
    return 32512;
  }
  else
  {
    v8 = 0;
    do
      v6 = wait4(v4[5], &v8, 0, 0);
    while (v6 == -1 && *__error() == 4);
    free(v4);
    if (v6 == -1)
      return -1;
    else
      return v8;
  }
}

void psignal(int a1, const char *a2)
{
  if (a1 > 0x1F)
  {
    if (!a2)
      goto LABEL_7;
  }
  else if (!a2)
  {
    goto LABEL_7;
  }
  if (*a2)
  {
    _platform_strlen();
    write_NOCANCEL();
    write_NOCANCEL();
  }
LABEL_7:
  _platform_strlen();
  write_NOCANCEL();
  write_NOCANCEL();
}

char *__cdecl readpassphrase(const char *a1, char *a2, size_t a3, int a4)
{
  unint64_t StatusReg;
  _xlocale *v5;
  char v6;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  char *v12;
  uint64_t NOCANCEL;
  int v15;
  __uint32_t v16;
  __darwin_rune_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  pid_t v21;
  int v22;
  char *result;
  int *v24;
  int v25;
  int v26;
  _xlocale *v27;
  char v29;
  sigaction v30;
  sigaction v31;
  sigaction v32;
  sigaction v33;
  sigaction v34;
  sigaction v35;
  sigaction v36;
  sigaction v37;
  sigaction v38;
  sigaction v39;
  _BYTE v40[81];
  termios v41;

  memset(&v41, 0, sizeof(v41));
  memset(&v40[1], 0, 72);
  v39.__sigaction_u.__sa_handler = 0;
  *(_QWORD *)&v39.sa_mask = 0;
  v38.__sigaction_u.__sa_handler = 0;
  *(_QWORD *)&v38.sa_mask = 0;
  v37.__sigaction_u.__sa_handler = 0;
  *(_QWORD *)&v37.sa_mask = 0;
  v36.__sigaction_u.__sa_handler = 0;
  *(_QWORD *)&v36.sa_mask = 0;
  v35.__sigaction_u.__sa_handler = 0;
  *(_QWORD *)&v35.sa_mask = 0;
  v34.__sigaction_u.__sa_handler = 0;
  *(_QWORD *)&v34.sa_mask = 0;
  v33.__sigaction_u.__sa_handler = 0;
  *(_QWORD *)&v33.sa_mask = 0;
  v32.__sigaction_u.__sa_handler = 0;
  *(_QWORD *)&v32.sa_mask = 0;
  v31.__sigaction_u.__sa_handler = 0;
  *(_QWORD *)&v31.sa_mask = 0;
  v30.__sigaction_u.__sa_handler = 0;
  *(_QWORD *)&v30.sa_mask = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_xlocale **)(StatusReg + 8 * __locale_key);
  if (!v5)
    v5 = (_xlocale *)&__global_locale;
  v27 = v5;
  v40[0] = 0;
  if (a3)
  {
    v6 = a4;
    v7 = 0;
    v8 = &a2[a3 - 1];
    while (1)
    {
      do
        signo[v7++] = 0;
      while (v7 != 32);
      if ((v6 & 0x20) != 0)
        goto LABEL_11;
      v9 = open_NOCANCEL();
      if (v9 == -1)
        break;
      v10 = v9;
      if (!tcgetattr(v9, (termios *)&v40[1]))
      {
        v41 = *(termios *)&v40[1];
        v12 = a2;
        if ((v6 & 1) == 0)
          v41.c_lflag &= 0xFFFFFFFFFFFFFFE7;
        if (v41.c_cc[18] != 255)
          v41.c_cc[18] = -1;
        tcsetattr(v10, 18, &v41);
        v29 = 0;
        v11 = v10;
        goto LABEL_13;
      }
      v29 = 0;
      v11 = v10;
LABEL_12:
      v12 = a2;
      memset(v41.c_cc, 0, 40);
      memset(&v41, 0, 24);
      v41.c_lflag = 8;
      memset(&v40[1], 0, 24);
      memset(&v40[33], 0, 40);
      *(_QWORD *)&v40[25] = 8;
LABEL_13:
      v39.__sigaction_u.__sa_handler = (void (__cdecl *)(int))handler;
      *(_QWORD *)&v39.sa_mask = 0;
      sigaction(14, &v39, &v38);
      sigaction(1, &v39, &v36);
      sigaction(2, &v39, &v37);
      sigaction(13, &v39, &v30);
      sigaction(3, &v39, &v35);
      sigaction(15, &v39, &v34);
      sigaction(18, &v39, &v33);
      sigaction(21, &v39, &v32);
      sigaction(22, &v39, &v31);
      if ((v6 & 0x20) == 0)
      {
        _platform_strlen();
        write_NOCANCEL();
      }
      NOCANCEL = read_NOCANCEL();
      if (NOCANCEL == 1)
      {
        v12 = a2;
        while (1)
        {
          if (v40[0] == 10 || v40[0] == 13)
          {
            NOCANCEL = 1;
            goto LABEL_42;
          }
          if (v12 < v8)
            break;
LABEL_39:
          v18 = read_NOCANCEL();
          if (v18 != 1)
          {
            NOCANCEL = v18;
            goto LABEL_42;
          }
        }
        if ((v6 & 0x10) != 0)
        {
          v15 = v40[0] & 0x7F;
          v40[0] &= ~0x80u;
        }
        else
        {
          v15 = v40[0];
          if ((v40[0] & 0x80) != 0)
          {
            LOWORD(v16) = ___runetype_l(v40[0], v27);
LABEL_27:
            LOBYTE(v17) = v40[0];
            if ((v16 & 0x100) != 0)
            {
              if ((v6 & 4) != 0)
              {
                if ((v40[0] & 0x80000000) != 0)
                  LOBYTE(v17) = ___tolower_l(v40[0], v27);
                else
                  v17 = _DefaultRuneLocale.__maplower[v40[0]];
                v40[0] = v17;
              }
              if ((v6 & 8) != 0)
              {
                if ((v17 & 0x80) != 0)
                  LOBYTE(v17) = ___toupper_l((char)v17, v27);
                else
                  v17 = _DefaultRuneLocale.__mapupper[(char)v17];
                v40[0] = v17;
              }
            }
            *v12++ = v17;
            goto LABEL_39;
          }
        }
        v16 = _DefaultRuneLocale.__runetype[v15];
        goto LABEL_27;
      }
LABEL_42:
      *v12 = 0;
      v26 = *__error();
      if ((v41.c_lflag & 8) == 0)
        write_NOCANCEL();
      if (_platform_memcmp())
      {
        while (tcsetattr(v11, 18, (const termios *)&v40[1]) == -1 && *__error() == 4 && !dword_1EDF54C58)
          ;
      }
      sigaction(14, &v38, 0);
      sigaction(1, &v36, 0);
      sigaction(2, &v37, 0);
      sigaction(3, &v35, 0);
      sigaction(13, &v30, 0);
      sigaction(15, &v34, 0);
      sigaction(18, &v33, 0);
      sigaction(21, &v32, 0);
      sigaction(22, &v31, 0);
      if ((v29 & 1) == 0)
        close_NOCANCEL();
      v19 = 0;
      v20 = 0;
      do
      {
        if (signo[v19])
        {
          v21 = getpid();
          kill(v21, v19);
          v22 = ((1 << v19) & 0x640000) != 0 ? 1 : v20;
          if (v19 <= 0x16)
            v20 = v22;
        }
        ++v19;
      }
      while (v19 != 32);
      v7 = 0;
      if (!v20)
      {
        if (v26)
          *__error() = v26;
        if (NOCANCEL == -1)
          return 0;
        else
          return a2;
      }
    }
    if ((v6 & 2) != 0)
    {
      v24 = __error();
      result = 0;
      v25 = 25;
      goto LABEL_72;
    }
LABEL_11:
    v11 = 0;
    v29 = 1;
    goto LABEL_12;
  }
  v24 = __error();
  result = 0;
  v25 = 22;
LABEL_72:
  *v24 = v25;
  return result;
}

uint64_t handler(uint64_t result)
{
  signo[(int)result] = 1;
  return result;
}

char *__cdecl getpass(const char *a1)
{
  char *v2;
  char *result;
  char *v4;

  v2 = (char *)getpass_buf;
  if (getpass_buf
    || (result = (char *)malloc_type_malloc(0x81uLL, 0x5A93915FuLL), v2 = result, (getpass_buf = (uint64_t)result) != 0))
  {
    v4 = readpassphrase(a1, v2, 0x81uLL, 0);
    result = (char *)getpass_buf;
    if (!v4)
      *(_BYTE *)getpass_buf = 0;
  }
  return result;
}

int scandir(const char *a1, dirent ***a2, int (__cdecl *a3)(const dirent *), int (__cdecl *a4)(const dirent **, const dirent **))
{
  DIR *v7;
  DIR *v8;
  void *v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  dirent *v13;
  dirent *v14;
  _QWORD *v15;
  void *v16;
  void *v17;

  v7 = opendir(a1);
  if (!v7)
    goto LABEL_20;
  v8 = v7;
  v9 = malloc_type_malloc(0x100uLL, 0x2004093837F09uLL);
  if (!v9)
  {
LABEL_19:
    free(v9);
    closedir(v8);
LABEL_20:
    LODWORD(v10) = -1;
    return v10;
  }
  v10 = 0;
  v11 = -1;
  v12 = 32;
  while (1)
  {
    v13 = readdir(v8);
    if (!v13)
      break;
    v14 = v13;
    if (!a3 || ((unsigned int (*)(dirent *))a3)(v13))
    {
      v15 = malloc_type_malloc(((v14->d_namlen + 4) & 0x1FFFC) + 24, 0xD5DB3AF2uLL);
      if (!v15)
        goto LABEL_17;
      v16 = v15;
      *v15 = v14->d_ino;
      *((_BYTE *)v15 + 20) = v14->d_type;
      *((_WORD *)v15 + 8) = v14->d_reclen;
      *((_WORD *)v15 + 9) = v14->d_namlen;
      _platform_memmove();
      if (v10 >= v12)
      {
        v17 = malloc_type_realloc(v9, 16 * v12, 0x2004093837F09uLL);
        if (!v17)
        {
          free(v16);
LABEL_17:
          if (v10)
          {
            do
              free(*((void **)v9 + v11--));
            while (v11 != -1);
          }
          goto LABEL_19;
        }
        v12 *= 2;
        v9 = v17;
      }
      *((_QWORD *)v9 + v10++) = v16;
      ++v11;
    }
  }
  closedir(v8);
  if (a4 && v10)
    qsort(v9, v10, 8uLL, (int (__cdecl *)(const void *, const void *))a4);
  *a2 = (dirent **)v9;
  return v10;
}

unsigned __int16 *__cdecl seed48(unsigned __int16 a1[3])
{
  seed48_sseed = _rand48_seed;
  word_1EDF54C8C = WORD2(_rand48_seed);
  _rand48_seed = *(unsigned int *)a1 | ((unint64_t)a1[2] << 32);
  _rand48_mult = 0x5DEECE66DLL;
  _rand48_add = 11;
  return (unsigned __int16 *)&seed48_sseed;
}

void seekdir(DIR *a1, uint64_t a2)
{
  pthread_mutex_t *p_dd_lock;

  p_dd_lock = &a1->__dd_lock;
  pthread_mutex_lock(&a1->__dd_lock);
  _seekdir((unint64_t)a1, a2);
  pthread_mutex_unlock(p_dd_lock);
}

int sethostname(const char *a1, int a2)
{
  uint64_t v3;

  v3 = 0xA00000001;
  if (sysctl((int *)&v3, 2u, 0, 0, (void *)a1, a2) == -1)
    return -1;
  else
    return 0;
}

mode_t getmode(const void *a1, mode_t a2)
{
  int v2;
  _WORD *i;
  int v4;
  int v5;
  __int16 v6;
  int v7;
  int v8;

  v2 = a2 & 0x4049;
  for (i = (char *)a1 + 2; ; i += 2)
  {
    v4 = *((char *)i - 2);
    if (v4 > 102)
      break;
    if (v4 == 43)
      goto LABEL_7;
    if (v4 == 45)
    {
      *(_DWORD *)&a2 = a2 & ~(unsigned __int16)*i;
      continue;
    }
    if (v4 != 88)
      return a2;
    if (v2)
    {
LABEL_7:
      v5 = (unsigned __int16)*i;
LABEL_33:
      *(_DWORD *)&a2 = v5 | a2;
      continue;
    }
LABEL_34:
    ;
  }
  if (v4 == 103)
  {
    v6 = a2 >> 3;
LABEL_14:
    v7 = v6 & 7;
    if ((*((_BYTE *)i - 1) & 1) == 0)
      goto LABEL_22;
    if ((*((_BYTE *)i - 1) & 2) != 0)
      v8 = 7;
    else
      v8 = v6 & 7;
    if ((*((_BYTE *)i - 1) & 0x10) != 0)
    {
      *(_DWORD *)&a2 = a2 & ~((unsigned __int16)*i & (v8 << 6));
      if ((*((_BYTE *)i - 1) & 4) == 0)
      {
LABEL_20:
        if ((*((_BYTE *)i - 1) & 8) == 0)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    else if ((*((_BYTE *)i - 1) & 4) == 0)
    {
      goto LABEL_20;
    }
    *(_DWORD *)&a2 = a2 & ~((unsigned __int16)*i & (8 * v8));
    if ((*((_BYTE *)i - 1) & 8) == 0)
    {
LABEL_22:
      if ((*((_BYTE *)i - 1) & 2) == 0)
        goto LABEL_34;
      if ((*((_BYTE *)i - 1) & 0x10) != 0)
      {
        *(_DWORD *)&a2 = (unsigned __int16)*i & (v7 << 6) | a2;
        if ((*((_BYTE *)i - 1) & 4) == 0)
        {
LABEL_25:
          if ((*((_BYTE *)i - 1) & 8) == 0)
            goto LABEL_34;
LABEL_32:
          v5 = (unsigned __int16)(*i & v7);
          goto LABEL_33;
        }
      }
      else if ((*((_BYTE *)i - 1) & 4) == 0)
      {
        goto LABEL_25;
      }
      *(_DWORD *)&a2 = (unsigned __int16)*i & (8 * v7) | a2;
      if ((*((_BYTE *)i - 1) & 8) == 0)
        goto LABEL_34;
      goto LABEL_32;
    }
LABEL_21:
    *(_DWORD *)&a2 = a2 & ~(unsigned __int16)(*i & v8);
    goto LABEL_22;
  }
  LOBYTE(v6) = a2;
  if (v4 == 111)
    goto LABEL_14;
  if (v4 == 117)
  {
    v6 = a2 >> 6;
    goto LABEL_14;
  }
  return a2;
}

void *__cdecl setmode(const char *a1)
{
  const char *v1;
  mode_t v2;
  char *v3;
  char *v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  __int16 v8;
  char *v9;
  unsigned int v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  char *v20;
  char *v21;
  char *v22;
  BOOL v24;
  char *v25;
  char *v26;
  char *v27;
  __int16 v29;
  __int16 v30;
  int v31;
  sigset_t v32;
  sigset_t v33;
  char *__endptr;

  if (!*a1)
    return 0;
  v1 = a1;
  v32 = 0;
  v33 = -1;
  sigprocmask(1, &v33, &v32);
  v2 = umask(0);
  umask(v2);
  sigprocmask(3, &v32, 0);
  v3 = (char *)malloc_type_malloc(0x20uLL, 0x994EF0B7uLL);
  v4 = v3;
  if (v3)
  {
    __endptr = 0;
    if (*(unsigned __int8 *)v1 - 48 < 0xA)
    {
      v5 = strtol(v1, &__endptr, 8);
      if (*__endptr || (v5 & 0x8000000000000000) != 0 || v5 >= 0x1000)
      {
        v27 = v4;
        goto LABEL_81;
      }
      *v4 = 45;
      *((_WORD *)v4 + 1) = 4095;
      v4[4] = 43;
      *((_WORD *)v4 + 3) = v5;
      v4[8] = 0;
      return v4;
    }
    v6 = 0;
    v7 = (unint64_t)(v3 + 24);
    v8 = ~v2;
    v31 = 8;
    v9 = v3;
    v29 = ~v2;
LABEL_9:
    v10 = 0;
    while (1)
    {
      v11 = *v1;
      if (v11 > 110)
      {
        if (v11 == 111)
        {
          v10 |= 7u;
        }
        else
        {
          if (v11 != 117)
          {
LABEL_20:
            if (v10)
              v12 = v10;
            else
              v12 = v8;
            v30 = v12;
LABEL_24:
            if (v11 <= 0x3Du && ((1 << v11) & 0x2000280000000000) != 0)
            {
              v13 = 0;
              v14 = (char)v11;
              if ((char)v11 == 61)
                v6 = 0;
              while (2)
              {
                v15 = 0;
LABEL_29:
                v16 = v13;
                do
                {
                  v13 = v16;
                  v18 = *++v1;
                  v17 = v18;
                  v16 = 73;
                }
                while (v18 == 88);
                switch(v17)
                {
                  case 'g':
                  case 'o':
                  case 'u':
                    if (!v15)
                      goto LABEL_44;
                    if ((unint64_t)v4 < v7)
                      goto LABEL_43;
                    v20 = (char *)malloc_type_realloc(v9, 4 * (v31 + 4), 0x100004052888210uLL);
                    if (!v20)
                      goto LABEL_79;
                    v4 = &v20[v4 - v9];
                    v7 = (unint64_t)&v20[4 * v31 + 8];
                    v9 = v20;
                    v31 += 4;
                    v8 = v29;
LABEL_43:
                    v4 = (char *)addcmd((uint64_t)v4, v14, v10, v15, v8);
LABEL_44:
                    if (v14 == 61)
                      v6 = 1;
                    if (v14 != 43 || !(_DWORD)v13)
                      goto LABEL_52;
                    if ((unint64_t)v4 < v7)
                      goto LABEL_51;
                    v21 = (char *)malloc_type_realloc(v9, 4 * (v31 + 4), 0x100004052888210uLL);
                    if (!v21)
                      goto LABEL_79;
                    v4 = &v21[v4 - v9];
                    v7 = (unint64_t)&v21[4 * v31 + 8];
                    v9 = v21;
                    v31 += 4;
LABEL_51:
                    *v4 = 88;
                    *((_WORD *)v4 + 1) = v13 & v30;
                    v4 += 4;
                    v13 = 0;
LABEL_52:
                    if ((unint64_t)v4 < v7)
                      goto LABEL_55;
                    v22 = (char *)malloc_type_realloc(v9, 4 * (v31 + 4), 0x100004052888210uLL);
                    if (!v22)
                      goto LABEL_79;
                    v4 = &v22[v4 - v9];
                    v7 = (unint64_t)&v22[4 * v31 + 8];
                    v9 = v22;
                    v31 += 4;
LABEL_55:
                    v4 = (char *)addcmd((uint64_t)v4, *v1, v10, v14, v8);
                    continue;
                  case 'r':
                    v15 |= 0x124u;
                    goto LABEL_29;
                  case 's':
                    v19 = v15 | 0xC00;
                    goto LABEL_35;
                  case 't':
                    v19 = v15 | 0x200;
LABEL_35:
                    if (v10 - 1 >= 7)
                      v15 = v19;
                    goto LABEL_29;
                  case 'w':
                    v15 |= 0x92u;
                    goto LABEL_29;
                  case 'x':
                    v15 |= 0x49u;
                    goto LABEL_29;
                  default:
                    v24 = v14 != 61 || v6 != 0;
                    if (v15 || !v24)
                    {
                      if (v14 == 61)
                        v6 = 1;
                      if ((unint64_t)v4 >= v7)
                      {
                        v25 = (char *)malloc_type_realloc(v9, 4 * (v31 + 4), 0x100004052888210uLL);
                        if (!v25)
                          goto LABEL_79;
                        v4 = &v25[v4 - v9];
                        v7 = (unint64_t)&v25[4 * v31 + 8];
                        v9 = v25;
                        v31 += 4;
                        v8 = v29;
                      }
                      v4 = (char *)addcmd((uint64_t)v4, v14, v10, v15, v8);
                      if (!(_DWORD)v13)
                        goto LABEL_76;
                    }
                    else if (!(_DWORD)v13)
                    {
                      goto LABEL_76;
                    }
                    if ((unint64_t)v4 >= v7)
                    {
                      v26 = (char *)malloc_type_realloc(v9, 4 * (v31 + 4), 0x100004052888210uLL);
                      if (!v26)
                        goto LABEL_79;
                      v4 = &v26[v4 - v9];
                      v7 = (unint64_t)&v26[4 * v31 + 8];
                      v9 = v26;
                      v31 += 4;
                    }
                    *v4 = 88;
                    *((_WORD *)v4 + 1) = v13 & v30;
                    v4 += 4;
LABEL_76:
                    v11 = *(unsigned __int8 *)v1;
                    if (!*v1)
                    {
                      *v4 = 0;
                      _sm_compress_mode((unsigned __int8 *)v9);
                      return v9;
                    }
                    if (v11 != 44)
                      goto LABEL_24;
                    ++v1;
                    break;
                }
                goto LABEL_9;
              }
            }
LABEL_79:
            v27 = v9;
LABEL_81:
            free(v27);
            return 0;
          }
          v10 |= 0x9C0u;
        }
      }
      else if (v11 == 97)
      {
        v10 = 4095;
      }
      else
      {
        if (v11 != 103)
          goto LABEL_20;
        v10 |= 0x438u;
      }
      ++v1;
    }
  }
  return v4;
}

uint64_t addcmd(uint64_t a1, int a2, unsigned int a3, int a4, __int16 a5)
{
  __int16 v5;
  __int16 v6;
  int v7;
  __int16 v8;
  char v9;

  if (a2 <= 87)
  {
    if (a2 != 43 && a2 != 45)
    {
      if (a2 != 61)
        return a1 + 4;
      *(_BYTE *)a1 = 45;
      if (a3)
        v5 = a3;
      else
        v5 = 4095;
      *(_WORD *)(a1 + 2) = v5;
      a1 += 4;
      LOBYTE(a2) = 43;
    }
    goto LABEL_13;
  }
  if (a2 > 110)
  {
    if (a2 != 111 && a2 != 117)
      return a1 + 4;
    goto LABEL_19;
  }
  if (a2 == 88)
  {
LABEL_13:
    *(_BYTE *)a1 = a2;
    if (a3)
      v6 = a3;
    else
      v6 = a5;
    *(_WORD *)(a1 + 2) = v6 & a4;
    return a1 + 4;
  }
  if (a2 != 103)
    return a1 + 4;
LABEL_19:
  *(_BYTE *)a1 = a2;
  if (a3)
    v7 = (a3 >> 4) & 0x10 | (a3 >> 3) & 4 | (8 * ((a3 >> 2) & 1));
  else
    LOBYTE(v7) = 28;
  if (a3)
    v8 = -1;
  else
    v8 = a5;
  *(_BYTE *)(a1 + 1) = v7;
  *(_WORD *)(a1 + 2) = v8;
  switch(a4)
  {
    case '=':
      v9 = v7 | 3;
      goto LABEL_31;
    case '-':
      v9 = v7 | 1;
      goto LABEL_31;
    case '+':
      v9 = v7 | 2;
LABEL_31:
      *(_BYTE *)(a1 + 1) = v9;
      break;
  }
  return a1 + 4;
}

unsigned __int8 *_sm_compress_mode(unsigned __int8 *result)
{
  unsigned __int8 *v1;
  int v2;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v1 = result;
  do
  {
    while (1)
    {
      v2 = *v1;
      if ((v2 - 43) > 0x2D || ((1 << (v2 - 43)) & 0x200000000005) == 0)
        break;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      while (1)
      {
        if (v2 == 43)
        {
          v7 = *((unsigned __int16 *)v1 + 1);
          v4 |= v7;
          v5 &= ~v7;
          goto LABEL_12;
        }
        if (v2 != 88)
          break;
        v6 |= *((unsigned __int16 *)v1 + 1) & ~v4;
LABEL_14:
        v8 = v1[4];
        v1 += 4;
        v2 = v8;
      }
      if (v2 == 45)
      {
        v7 = *((unsigned __int16 *)v1 + 1);
        v5 |= v7;
        v4 &= ~v7;
LABEL_12:
        v6 &= ~v7;
        goto LABEL_14;
      }
      if (v5)
      {
        *(_WORD *)result = 45;
        *((_WORD *)result + 1) = v5;
        result += 4;
      }
      if (v4)
      {
        *(_WORD *)result = 43;
        *((_WORD *)result + 1) = v4;
        result += 4;
      }
      if (v6)
      {
        *(_WORD *)result = 88;
        *((_WORD *)result + 1) = v6;
        result += 4;
      }
    }
    v9 = *(_DWORD *)v1;
    v1 += 4;
    *(_DWORD *)result = v9;
    result += 4;
  }
  while (v2);
  return result;
}

void setprogname(const char *a1)
{
  char *v1;
  char *v2;
  size_t v3;
  int v4[3];
  _BYTE v5[33];

  v1 = (char *)a1;
  v2 = strrchr((char *)a1, 47);
  if (v2)
    v1 = v2 + 1;
  *_NSGetProgname() = v1;
  _platform_strlcpy();
  *(_QWORD *)v4 = 0x3E00000001;
  v3 = _platform_strlen();
  sysctl(v4, 2u, 0, 0, v5, v3);
}

int siginterrupt(int a1, int a2)
{
  int result;
  int v5;
  int v6;
  int v7;
  sigaction v8;

  v8.__sigaction_u.__sa_handler = 0;
  *(_QWORD *)&v8.sa_mask = 0;
  result = sigaction(a1, 0, &v8);
  if ((result & 0x80000000) == 0)
  {
    v5 = 1 << (a1 - 1);
    if (a2)
    {
      if (a1 > 32)
        v5 = 0;
      _sigintr |= v5;
      v6 = v8.sa_flags & 0xFFFFFFFD;
    }
    else
    {
      if (a1 <= 32)
        v7 = ~v5;
      else
        v7 = -1;
      _sigintr &= v7;
      v6 = v8.sa_flags | 2;
    }
    v8.sa_flags = v6;
    return sigaction(a1, &v8, 0);
  }
  return result;
}

StringList *sl_init(void)
{
  char *v0;
  StringList *v1;
  char **v2;

  v0 = (char *)malloc_type_malloc(0x18uLL, 0x1080040468F112EuLL);
  if (!v0)
    sl_init_cold_1();
  v1 = (StringList *)v0;
  *(_OWORD *)(v0 + 8) = xmmword_18A0E5BA0;
  v2 = (char **)malloc_type_malloc(0xA0uLL, 0x10040436913F5uLL);
  v1->sl_str = v2;
  if (!v2)
    sl_init_cold_1();
  return v1;
}

int sl_add(StringList *a1, char *a2)
{
  size_t sl_max;
  size_t sl_cur;
  void *sl_str;
  size_t v7;
  int v8;

  sl_max = a1->sl_max;
  sl_cur = a1->sl_cur;
  sl_str = a1->sl_str;
  if (sl_cur == sl_max - 1)
  {
    v7 = sl_max + 20;
    a1->sl_max = v7;
    sl_str = reallocf(sl_str, 8 * v7);
    a1->sl_str = (char **)sl_str;
    if (!sl_str)
      return -1;
    sl_cur = a1->sl_cur;
  }
  v8 = 0;
  a1->sl_cur = sl_cur + 1;
  *((_QWORD *)sl_str + sl_cur) = a2;
  return v8;
}

void sl_free(StringList *a1, int a2)
{
  char **sl_str;
  size_t v4;

  if (a1)
  {
    sl_str = a1->sl_str;
    if (sl_str)
    {
      if (a2 && a1->sl_cur)
      {
        v4 = 0;
        do
          free(a1->sl_str[v4++]);
        while (v4 < a1->sl_cur);
        sl_str = a1->sl_str;
      }
      free(sl_str);
    }
    free(a1);
  }
}

char *__cdecl sl_find(StringList *a1, char *a2)
{
  size_t sl_cur;
  char **i;
  char *v4;

  sl_cur = a1->sl_cur;
  if (!sl_cur)
    return 0;
  for (i = a1->sl_str; ; ++i)
  {
    v4 = *i;
    if (!_platform_strcmp())
      break;
    if (!--sl_cur)
      return 0;
  }
  return v4;
}

uint64_t telldir(DIR *a1)
{
  pthread_mutex_t *p_dd_lock;
  _telldir *dd_td;
  _QWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  _telldir *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  p_dd_lock = &a1->__dd_lock;
  pthread_mutex_lock(&a1->__dd_lock);
  dd_td = a1->__dd_td;
  v4 = *(_QWORD **)dd_td;
  if (*(_QWORD *)dd_td)
  {
    v5 = *((_QWORD *)dd_td + 2);
    while (v4[3] != v5 || v4[4] != a1->__dd_loc)
    {
      v4 = (_QWORD *)*v4;
      if (!v4)
        goto LABEL_6;
    }
    v9 = v4[2];
  }
  else
  {
LABEL_6:
    v6 = malloc_type_malloc(0x28uLL, 0x10A00404BF391D6uLL);
    if (v6)
    {
      v7 = a1->__dd_td;
      v8 = *(_OWORD *)((char *)v7 + 8);
      v9 = *((_QWORD *)v7 + 1);
      *((_QWORD *)v7 + 1) = v9 + 1;
      v6[1] = v8;
      *((_QWORD *)v6 + 4) = a1->__dd_loc;
      v10 = *(_QWORD *)v7;
      *(_QWORD *)v6 = *(_QWORD *)v7;
      if (v10)
        *(_QWORD *)(v10 + 8) = v6;
      *(_QWORD *)v7 = v6;
      *((_QWORD *)v6 + 1) = v7;
    }
    else
    {
      v9 = -1;
    }
  }
  pthread_mutex_unlock(p_dd_lock);
  return v9;
}

unint64_t _seekdir(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  off_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  v3 = *(_QWORD **)(result + 128);
  while (1)
  {
    v3 = (_QWORD *)*v3;
    if (!v3)
      break;
    if (v3[2] == a2)
    {
      v4 = v3[3];
      v5 = v3[4];
      v6 = *(_QWORD *)(*(_QWORD *)(result + 128) + 16);
      if (v5 != *(_QWORD *)(result + 8) || v4 != v6)
      {
        if (v4 == v6)
        {
          if (!v5)
            *(_DWORD *)(result + 56) |= 0x10u;
          *(_QWORD *)(result + 8) = v5;
        }
        else
        {
          result = lseek(*(_DWORD *)result, v4, 0);
          *(_QWORD *)(*(_QWORD *)(v2 + 128) + 16) = v3[3];
          *(_QWORD *)(v2 + 8) = 0;
          *(_DWORD *)(v2 + 56) &= 0xFFFFFFCF;
          do
          {
            if (*(_QWORD *)(v2 + 8) >= v3[4])
              break;
            result = _readdir_unlocked(v2, 0);
          }
          while (result);
        }
      }
      return result;
    }
  }
  return result;
}

int tcgetattr(int a1, termios *a2)
{
  return ioctl(a1, 0x40487413uLL, a2);
}

int tcsetattr(int a1, int a2, const termios *a3)
{
  __int128 v3;
  __int128 v4;
  unsigned int v5;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  speed_t c_ospeed;

  c_ospeed = 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  if ((a2 & 0x10) != 0)
  {
    v3 = *(_OWORD *)&a3->c_cc[16];
    v10 = *(_OWORD *)a3->c_cc;
    v11 = v3;
    c_ospeed = a3->c_ospeed;
    v4 = *(_OWORD *)&a3->c_cflag;
    v8 = *(_OWORD *)&a3->c_iflag;
    *((_QWORD *)&v9 + 1) = *((_QWORD *)&v4 + 1);
    *(_QWORD *)&v9 = v4 | 1;
    a3 = (const termios *)&v8;
  }
  v5 = a2 & 0xFFFFFFEF;
  if ((a2 & 0xFFFFFFEF) == 2)
  {
    v7 = 2152231958;
    return ioctl(a1, v7, a3);
  }
  if (v5 == 1)
  {
    v7 = 2152231957;
    return ioctl(a1, v7, a3);
  }
  if (!v5)
    return ioctl(a1, 0x80487414uLL, a3);
  *__error() = 22;
  return -1;
}

int tcsetpgrp(int a1, pid_t a2)
{
  pid_t v5;

  if (!isatty(a1))
    return -1;
  v5 = a2;
  return ioctl(a1, 0x80047476uLL, &v5);
}

pid_t tcgetpgrp(int a1)
{
  pid_t v3;

  if (!isatty(a1))
    return -1;
  v3 = 0;
  if (ioctl(a1, 0x40047477uLL, &v3) < 0)
    return -1;
  else
    return v3;
}

speed_t cfgetospeed(const termios *a1)
{
  return a1->c_ospeed;
}

speed_t cfgetispeed(const termios *a1)
{
  return a1->c_ispeed;
}

int cfsetospeed(termios *a1, speed_t a2)
{
  a1->c_ospeed = a2;
  return 0;
}

int cfsetispeed(termios *a1, speed_t a2)
{
  a1->c_ispeed = a2;
  return 0;
}

int cfsetspeed(termios *a1, speed_t a2)
{
  a1->c_ispeed = a2;
  a1->c_ospeed = a2;
  return 0;
}

void cfmakeraw(termios *a1)
{
  tcflag_t v1;
  tcflag_t v2;

  v1 = a1->c_oflag & 0xFFFFFFFFFFFFFFFELL;
  a1->c_iflag = a1->c_iflag & 0xFFFFFFFFFFFFD800 | 1;
  a1->c_oflag = v1;
  v2 = a1->c_lflag & 0x5FBFFA61;
  a1->c_cflag = a1->c_cflag & 0xFFFFFFFFFFFFE4FFLL | 0xB00;
  a1->c_lflag = v2;
  *(_WORD *)&a1->c_cc[16] = 1;
}

int tcsendbreak(int a1, int a2)
{
  int result;

  result = ioctl(a1, 0x2000747BuLL, 0);
  if (result != -1)
  {
    select_NOCANCEL();
    if (ioctl(a1, 0x2000747AuLL, 0) == -1)
      return -1;
    else
      return 0;
  }
  return result;
}

uint64_t tcdrain_NOCANCEL(int a1)
{
  return ioctl(a1, 0x2000745EuLL, 0);
}

int tcflush(int a1, int a2)
{
  int v2;
  int v4;

  switch(a2)
  {
    case 3:
      v2 = 3;
      goto LABEL_7;
    case 2:
      v2 = 2;
      goto LABEL_7;
    case 1:
      v2 = 1;
LABEL_7:
      v4 = v2;
      return ioctl(a1, 0x80047410uLL, &v4);
  }
  *__error() = 22;
  return -1;
}

int tcflow(int a1, int a2)
{
  unint64_t v2;
  int result;

  switch(a2)
  {
    case 1:
      v2 = 536900719;
      goto LABEL_7;
    case 2:
      return ioctl(a1, 0x2000746EuLL, 0);
    case 3:
      v2 = 536900736;
      goto LABEL_7;
    case 4:
      v2 = 536900737;
LABEL_7:
      result = ioctl(a1, v2, 0);
      break;
    default:
      *__error() = 22;
      result = -1;
      break;
  }
  return result;
}

clock_t times(tms *a1)
{
  clock_t v2;
  clock_t v3;
  timeval v5;
  rusage v6;

  memset(&v6, 0, sizeof(v6));
  if (getrusage(0, &v6) < 0)
    return -1;
  v2 = 100 * v6.ru_stime.tv_sec + v6.ru_stime.tv_usec / 10000;
  a1->tms_utime = 100 * v6.ru_utime.tv_sec + v6.ru_utime.tv_usec / 10000;
  a1->tms_stime = v2;
  if (getrusage(-1, &v6) < 0)
    return -1;
  v5.tv_sec = 0;
  *(_QWORD *)&v5.tv_usec = 0;
  v3 = 100 * v6.ru_stime.tv_sec + v6.ru_stime.tv_usec / 10000;
  a1->tms_cutime = 100 * v6.ru_utime.tv_sec + v6.ru_utime.tv_usec / 10000;
  a1->tms_cstime = v3;
  if (gettimeofday(&v5, 0))
    return -1;
  else
    return 100 * v5.tv_sec + v5.tv_usec / 10000;
}

char *__cdecl ttyname(int a1)
{
  int v2;
  pthread_key_t v3;
  void *v4;
  char *result;
  pthread_key_t v6;
  int *v7;

  if ((ttyname_init & 1) == 0)
  {
    pthread_mutex_lock(&ttyname_lock);
    if ((ttyname_init & 1) == 0)
    {
      ttyname_key = 1;
      if (pthread_key_init_np())
      {
        v2 = *__error();
        pthread_mutex_unlock(&ttyname_lock);
LABEL_20:
        v7 = __error();
        result = 0;
        *v7 = v2;
        return result;
      }
      ttyname_init = 1;
    }
    pthread_mutex_unlock(&ttyname_lock);
  }
  if (ttyname_key)
    v3 = 16;
  else
    v3 = 0;
  v4 = pthread_getspecific(v3);
  if (!v4)
  {
    result = (char *)malloc_type_malloc(0x105uLL, 0x5EE5DFC8uLL);
    if (!result)
      return result;
    v4 = result;
    v6 = ttyname_key ? 16 : 0;
    if (pthread_setspecific(v6, v4))
    {
      v2 = *__error();
      free(v4);
      goto LABEL_20;
    }
  }
  if (ttyname_r(a1, (char *)v4, 0x105uLL))
    return 0;
  else
    return (char *)v4;
}

int ttyname_r(int a1, char *a2, size_t a3)
{
  int v6;
  dev_t st_rdev;
  uint64_t v8;
  stat v10;

  memset(&v10, 0, sizeof(v10));
  if (fstat(a1, &v10) < 0)
    return 9;
  if (!isatty(a1) || (v10.st_mode & 0xF000) != 0x2000)
    return 25;
  v6 = 34;
  if (a3 >= 7)
  {
    _platform_strlcpy();
    st_rdev = v10.st_rdev;
    v8 = _platform_strlen();
    if (devname_r(st_rdev, 0x2000u, &a2[v8], (int)a3 - (int)v8))
      return 0;
    else
      return 34;
  }
  return v6;
}

int ttyslot(void)
{
  return 0;
}

useconds_t ualarm(useconds_t a1, useconds_t a2)
{
  itimerval v3;
  itimerval v4;

  *(&v4.it_value.tv_usec + 1) = 0;
  memset(&v3, 0, sizeof(v3));
  v4.it_interval.tv_sec = a2 / 0xF4240uLL;
  *(&v4.it_interval.tv_usec + 1) = 0;
  v4.it_interval.tv_usec = a2 % 0xF4240;
  v4.it_value.tv_usec = a1 % 0xF4240;
  v4.it_value.tv_sec = a1 / 0xF4240uLL;
  if (setitimer(0, &v4, &v3))
    return -1;
  else
    return v3.it_value.tv_usec + 1000000 * LODWORD(v3.it_value.tv_sec);
}

uint64_t ulimit(int a1, ...)
{
  rlimit v2;
  uint64_t v3;
  va_list va;

  va_start(va, a1);
  v3 = va_arg(va, _QWORD);
  v2.rlim_cur = 0;
  v2.rlim_max = 0;
  if (a1 == 2)
  {
    v2.rlim_cur = v3 << 9;
    v2.rlim_max = v3 << 9;
    if (setrlimit(1, &v2) == -1)
      return -1;
    else
      return v3;
  }
  else
  {
    if (a1 == 1)
    {
      if (getrlimit(1, &v2) != -1)
        return v2.rlim_cur >> 9;
    }
    else
    {
      *__error() = 22;
    }
    return -1;
  }
}

int unvis(char *a1, int a2, int *a3, int a4)
{
  unsigned int v5;
  char v6;
  int v8;
  int v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  int result;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  char v20;
  char v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unsigned int v27;
  char v28;

  if (!a1)
    unvis_cold_1();
  if (!a3)
    unvis_cold_2();
  v5 = *a3;
  if ((a4 & 0x1000) != 0)
  {
    v9 = *a3;
    if ((v9 - 5) >= 2)
    {
      if (!*a3)
        return 3;
      if (v9 != 9)
        return -1;
    }
  }
  else
  {
    v6 = a2;
    switch(*a3)
    {
      case 0u:
        *a1 = 0;
        if (a2 == 92 && (a4 & 0x800) == 0)
        {
          v8 = 1;
          goto LABEL_119;
        }
        if (a2 == 37 && (a4 & 0x80) != 0)
        {
          v8 = 8;
          goto LABEL_119;
        }
        if (a2 == 38 && (a4 & 0x400) != 0)
        {
          v8 = 13;
          goto LABEL_119;
        }
        if (a2 == 61 && (a4 & 0x200) != 0)
        {
          v8 = 10;
          goto LABEL_119;
        }
        *a1 = a2;
        return 1;
      case 1u:
        if (a2 > 76)
        {
          switch(a2)
          {
            case 'n':
              v10 = 10;
              goto LABEL_90;
            case 'o':
            case 'p':
            case 'q':
            case 'u':
            case 'w':
              goto LABEL_122;
            case 'r':
              v10 = 13;
              goto LABEL_90;
            case 's':
              v10 = 32;
              goto LABEL_90;
            case 't':
              v10 = 9;
              goto LABEL_90;
            case 'v':
              v10 = 11;
              goto LABEL_90;
            case 'x':
              v8 = 7;
              goto LABEL_119;
            default:
              switch(a2)
              {
                case '\\':
                  goto LABEL_123;
                case ']':
                case '_':
                case 'c':
                case 'd':
                case 'e':
                  goto LABEL_122;
                case '^':
                  goto LABEL_18;
                case 'a':
                  v10 = 7;
                  goto LABEL_90;
                case 'b':
                  v10 = 8;
                  goto LABEL_90;
                case 'f':
                  v10 = 12;
                  goto LABEL_90;
                default:
                  if (a2 != 77)
                    goto LABEL_122;
                  *a1 = 0x80;
                  v8 = 2;
                  break;
              }
              goto LABEL_119;
          }
        }
        if (a2 <= 47)
        {
          if (a2 == 10 || a2 == 36)
          {
            *a3 = 0;
            return 3;
          }
        }
        else
        {
          if ((a2 - 48) < 8)
          {
            *a1 = a2 - 48;
            v8 = 5;
            goto LABEL_119;
          }
          if (a2 == 69)
          {
            v10 = 27;
            goto LABEL_90;
          }
        }
LABEL_122:
        if (!isgraph(a2))
          goto LABEL_84;
LABEL_123:
        *a1 = v6;
        goto LABEL_91;
      case 2u:
        if (a2 == 45)
        {
          v8 = 3;
        }
        else
        {
          if (a2 != 94)
            goto LABEL_84;
LABEL_18:
          v8 = 4;
        }
        goto LABEL_119;
      case 3u:
        *a3 = 0;
        v11 = *a1 | a2;
        goto LABEL_63;
      case 4u:
        v12 = a2 & 0x1F;
        if (a2 == 63)
          v12 = 127;
        v10 = *a1 | v12;
        goto LABEL_90;
      case 5u:
        if ((a2 & 0xF8) != 0x30)
          goto LABEL_31;
        *a1 = a2 + 8 * *a1 - 48;
        v8 = 6;
        goto LABEL_119;
      case 6u:
        *a3 = 0;
        if ((a2 & 0xF8) != 0x30)
          return 2;
        v11 = a2 + 8 * *a1 - 48;
        goto LABEL_63;
      case 7u:
        v13 = a2;
        if ((_DefaultRuneLocale.__runetype[a2] & 0x10000) == 0)
          goto LABEL_84;
        goto LABEL_30;
      case 8u:
        v13 = a2;
LABEL_30:
        if ((_DefaultRuneLocale.__runetype[v13] & 0x10000) != 0)
        {
          v20 = v13 - 48;
          if ((v13 - 48) >= 0xA)
            v20 = tolower(v13) - 87;
          *a1 = v20;
          v8 = 9;
          goto LABEL_119;
        }
LABEL_31:
        *a3 = 0;
        return 2;
      case 9u:
        *a3 = 0;
        if ((_DefaultRuneLocale.__runetype[a2] & 0x10000) == 0)
          return 2;
        LOBYTE(v16) = a2 - 48;
        if (a2 - 48 >= 0xA)
          v16 = tolower(a2) - 87;
        goto LABEL_62;
      case 0xAu:
        if (a2 == 13 || a2 == 10)
        {
          v8 = 12;
          goto LABEL_119;
        }
        if ((_DefaultRuneLocale.__runetype[a2] & 0x10000) == 0)
          goto LABEL_84;
        v27 = a2 - 48;
        if (v27 >= 0xA && !isupper(a2))
          goto LABEL_84;
        v28 = v6 - 55;
        if (v27 < 0xA)
          v28 = v27;
        *a1 = v28;
        v8 = 11;
        goto LABEL_119;
      case 0xBu:
        if ((_DefaultRuneLocale.__runetype[a2] & 0x10000) == 0)
          goto LABEL_84;
        v15 = a2 - 48;
        if (v15 >= 0xA && !isupper(a2))
          goto LABEL_84;
        *a3 = 0;
        LOBYTE(v16) = v6 - 55;
        if (v15 < 0xA)
          LOBYTE(v16) = v15;
LABEL_62:
        v11 = v16 | (16 * *a1);
LABEL_63:
        *a1 = v11;
        return 1;
      case 0xCu:
        result = 3;
        if (a2 == 10 || a2 == 13)
          return result;
        if (a2 != 61)
          goto LABEL_123;
        *a3 = 10;
        return result;
      case 0xDu:
        *a1 = 0;
        if (a2 == 35)
        {
          v8 = 14;
          goto LABEL_119;
        }
        v18 = 0;
        v19 = 0;
        v5 = 15;
        *a3 = 15;
        LODWORD(v17) = *a1;
        goto LABEL_65;
      case 0xEu:
        if (a2 == 59)
          return 1;
        if (a2 - 48 > 9)
          goto LABEL_84;
        *a1 = *a1 + a2 + 10 * *a1 - 48;
        return 3;
      case 0xFu:
        v17 = *a1;
        v18 = HIBYTE(v5);
        if (HIBYTE(v5))
        {
          v21 = 0;
          v19 = nv[8 * v17 - 1 + v18];
        }
        else
        {
          v19 = 0;
LABEL_65:
          v21 = 1;
        }
        if (a2 == 59)
          v22 = 0;
        else
          v22 = a2;
        v23 = v17;
        if (v17 > 0x63)
          goto LABEL_77;
        v24 = v18 - 1;
        v25 = &nv[8 * v17 + v18];
        v26 = &nv[8 * v17 + v24];
        break;
      default:
        goto LABEL_84;
    }
    do
    {
      if ((v21 & 1) == 0 && v19 != *v26)
        goto LABEL_84;
      if (*v25 == v22)
      {
        LOBYTE(v17) = v23;
        goto LABEL_87;
      }
      ++v23;
      v25 += 8;
      v26 += 8;
    }
    while (v23 != 100);
    v23 = 100;
    LODWORD(v17) = 100;
LABEL_77:
    if ((_DWORD)v17 == 100)
    {
LABEL_84:
      *a3 = 0;
      return -1;
    }
LABEL_87:
    if (v22)
    {
      *a1 = v17;
      v8 = (v5 & 0xFF000000) + 16777231;
LABEL_119:
      *a3 = v8;
      return 3;
    }
    v10 = nv[8 * v23 + 7];
LABEL_90:
    *a1 = v10;
  }
LABEL_91:
  *a3 = 0;
  return 1;
}

int strnunvisx(char *a1, size_t a2, const char *a3, int a4)
{
  int v4;
  const char *v5;
  char v7;
  char *v9;
  int v10;
  int v11;
  int *v13;
  int v14;
  int v15;
  char v16;

  v16 = 0;
  v15 = 0;
  if (!a3)
    strnunvisx_cold_1();
  v4 = (int)a1;
  if (!a1)
    strnunvisx_cold_2();
  v5 = a3;
  v7 = *a3;
  if (*a3)
  {
    v9 = a1;
    while (2)
    {
      ++v5;
      v10 = v7;
      while (1)
      {
        v11 = unvis(&v16, v10, &v15, a4);
        if (v11 != 2)
          break;
        if (!a2)
          goto LABEL_20;
        --a2;
        *v9++ = v16;
      }
      switch(v11)
      {
        case -1:
          v13 = __error();
          v14 = 22;
          goto LABEL_22;
        case 0:
        case 3:
          goto LABEL_12;
        case 1:
          if (!a2)
            goto LABEL_20;
          --a2;
          *v9++ = v16;
LABEL_12:
          v7 = *v5;
          if (*v5)
            continue;
          if (v15 > 9u || ((1 << v15) & 0x260) == 0)
            goto LABEL_18;
          v15 = 0;
          if (!a2)
            goto LABEL_20;
          --a2;
          *v9++ = v16;
          break;
        default:
          strnunvisx_cold_3();
      }
      break;
    }
  }
  else
  {
    v9 = a1;
  }
LABEL_18:
  if (a2)
  {
    *v9 = 0;
    return (_DWORD)v9 - v4;
  }
  else
  {
LABEL_20:
    v13 = __error();
    v14 = 28;
LABEL_22:
    *v13 = v14;
    return -1;
  }
}

int strunvisx(char *a1, const char *a2, int a3)
{
  return strnunvisx(a1, 0xFFFFFFFFFFFFFFFFLL, a2, a3);
}

int strunvis(char *a1, const char *a2)
{
  return strnunvisx(a1, 0xFFFFFFFFFFFFFFFFLL, a2, 0);
}

int strnunvis(char *a1, size_t a2, const char *a3)
{
  return strnunvisx(a1, a2, a3, 0);
}

uint64_t usleep_NOCANCEL(unsigned int a1)
{
  _QWORD v2[2];

  v2[0] = a1 / 0xF4240uLL;
  v2[1] = 1000 * (a1 % 0xF4240);
  return nanosleep_NOCANCEL(v2, 0);
}

int utime(const char *a1, const utimbuf *a2)
{
  time_t modtime;
  timeval v4;
  time_t v5;
  int v6;

  if (a2)
  {
    modtime = a2->modtime;
    v4.tv_sec = a2->actime;
    v5 = modtime;
    v6 = 0;
    v4.tv_usec = 0;
    a2 = (const utimbuf *)&v4;
  }
  return utimes(a1, (const timeval *)a2);
}

char *__cdecl svis(char *a1, int a2, int a3, int a4, const char *a5)
{
  int v5;
  char v7[2];
  char *v8;

  v8 = a1;
  v7[0] = a2;
  v7[1] = a4;
  v5 = istrsenvisx(&v8, 0, v7, 1uLL, a3, a5, 0);
  if (v5 >= 0)
    return &v8[v5];
  else
    return 0;
}

uint64_t istrsenvisx(char **a1, uint64_t a2, const char *a3, unint64_t a4, unsigned int a5, const char *a6, _DWORD *a7)
{
  unint64_t StatusReg;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __int32 *v18;
  __int32 *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  __int32 *v23;
  __int32 *v24;
  __int32 *v25;
  __int32 *v26;
  unsigned int v27;
  size_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  size_t v32;
  __int32 *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  __int32 *v37;
  int v38;
  int *v39;
  int v40;
  _DWORD *(*v41)(__int32 *, unsigned int, __int16, char, __int32 *);
  _DWORD *(*v42)(__int32 *, unsigned int, __int16, char, __int32 *);
  __int32 *v43;
  unsigned int *v44;
  size_t v45;
  size_t v46;
  unint64_t v47;
  __int32 *v48;
  int v49;
  uint64_t v50;
  uint64_t i;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  char *v55;
  int v56;
  uint64_t v59;
  _DWORD *v60;
  unint64_t v61;
  __int32 *v62;
  char *v63;
  unint64_t *v64;
  __int32 *v65;
  __int32 *v66;
  unsigned int v67;
  const char *v68;
  mbstate_t v69;
  mbstate_t v70;

  v67 = a5;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v13 = MEMORY[0x1E0C86820](a1, a2);
  v16 = (char *)&v59 - v15;
  if (!v13)
    istrsenvisx_cold_1();
  if (!a3 && a4)
    istrsenvisx_cold_2();
  if (!a6)
    istrsenvisx_cold_3();
  v64 = v14;
  if (a4 == 1)
    v17 = 2;
  else
    v17 = a4;
  v18 = (__int32 *)malloc_type_calloc(v17 + 1, 4uLL, 0x100004052888210uLL);
  if (v18)
  {
    v19 = v18;
    v63 = v16;
    memset(&v69, 0, sizeof(v69));
    v65 = (__int32 *)malloc_type_calloc((16 * v17) | 1, 4uLL, 0x100004052888210uLL);
    if (v65)
    {
      v61 = StatusReg;
      v20 = *a1;
      if (*a1)
      {
        v62 = 0;
LABEL_15:
        v66 = v19;
        v60 = a7;
        if ((v67 & 0x4000) != 0)
        {
          LODWORD(a7) = 1;
        }
        else if (a7)
        {
          LODWORD(a7) = *a7;
        }
        memset(&v69, 0, sizeof(v69));
        if (v17 < 1)
        {
          v26 = v66;
        }
        else
        {
          v26 = v66;
          do
          {
            if ((_DWORD)a7
              || (v17 >= 6 ? (v28 = 6) : (v28 = v17), v27 = mbrtowc(v26, a3, v28, &v69), (v27 & 0x80000000) != 0))
            {
              *v26 = *(unsigned __int8 *)a3;
              v27 = 1;
              LODWORD(a7) = 1;
            }
            else
            {
              LODWORD(a7) = 0;
            }
            if (v27 <= 1)
              v29 = 1;
            else
              v29 = v27;
            ++v26;
            a3 += v29;
            v30 = v17 <= v29;
            v17 -= v29;
          }
          while (!v30);
        }
        v68 = a6;
        if (v26 - v66 >= a4)
          v31 = a4;
        else
          v31 = v26 - v66;
        memset(&v70, 0, sizeof(v70));
        v32 = _platform_strlen();
        v33 = (__int32 *)malloc_type_calloc(v32 + 30, 4uLL, 0x100004052888210uLL);
        if (v33)
        {
          v23 = v33;
          v25 = v65;
          v34 = v67;
          if ((v67 & 0x4000) != 0 || mbsrtowcs(v33, &v68, v32, &v70) == -1)
          {
            v19 = v66;
            if (v32)
            {
              v35 = 0;
              v36 = v68;
              do
              {
                v23[v35] = v36[v35];
                ++v35;
              }
              while (v32 != v35);
            }
          }
          else
          {
            v32 = wcslen(v23);
            v19 = v66;
          }
          v37 = &v23[v32];
          if ((v34 & 0x100) != 0)
          {
            *(_OWORD *)v37 = xmmword_18A0E6000;
            v37 += 4;
          }
          if ((v34 & 0x2000) != 0)
          {
            v38 = 39;
            v39 = &dword_18A0E606C;
            do
            {
              *v37++ = v38;
              v40 = *v39++;
              v38 = v40;
            }
            while (v40);
          }
          if ((v34 & 4) != 0)
          {
            *v37++ = 32;
            if ((v34 & 8) == 0)
            {
LABEL_53:
              if ((v34 & 0x10) == 0)
                goto LABEL_54;
              goto LABEL_73;
            }
          }
          else if ((v34 & 8) == 0)
          {
            goto LABEL_53;
          }
          *v37++ = 9;
          if ((v34 & 0x10) == 0)
          {
LABEL_54:
            if ((v34 & 0x8000) == 0)
              goto LABEL_55;
            goto LABEL_74;
          }
LABEL_73:
          *v37++ = 10;
          if ((v34 & 0x8000) == 0)
          {
LABEL_55:
            if ((v34 & 0x40) != 0)
            {
LABEL_57:
              *v37 = 0;
              v41 = (_DWORD *(*)(__int32 *, unsigned int, __int16, char, __int32 *))do_mvis;
              if ((v34 & 0x200) == 0)
                v41 = (_DWORD *(*)(__int32 *, unsigned int, __int16, char, __int32 *))do_svis;
              if ((v34 & 0x80) != 0)
                v42 = do_hvis;
              else
                v42 = v41;
              v43 = v25;
              if (v31)
              {
                v44 = (unsigned int *)(v19 + 1);
                v43 = v25;
                do
                {
                  v43 = v42(v43, *(v44 - 1), v34, *v44, v23);
                  if (!v43)
                  {
                    *__error() = 28;
                    v21 = 0xFFFFFFFFLL;
                    goto LABEL_111;
                  }
                  ++v44;
                  --v31;
                }
                while (v31);
              }
              *v43 = 0;
              v45 = wcslen(v25);
              v46 = v45;
              if (v64)
                v47 = *v64;
              else
                v47 = (6 * v45) | 1;
              memset(&v69, 0, sizeof(v69));
              if (v45)
              {
                v21 = 0;
                v48 = v25;
                while (1)
                {
                  if ((_DWORD)a7)
                    goto LABEL_81;
                  v54 = *(_QWORD **)(v61 + 8 * __locale_key);
                  if (!v54)
                    v54 = &__global_locale;
                  if (v47 - v21 <= *(int *)(v54[166] + 64))
                    v55 = v63;
                  else
                    v55 = v20;
                  v56 = wcrtomb(v55, *v48, &v69);
                  v49 = v56;
                  if (v56 >= 1 && v55 != v20)
                  {
                    if (v21 + v56 >= v47)
                    {
LABEL_104:
                      *__error() = 28;
                      v21 = 0xFFFFFFFFLL;
                      v25 = v65;
                      v19 = v66;
                      goto LABEL_111;
                    }
                    _platform_memmove();
                  }
                  if (v49 < 0)
                  {
LABEL_81:
                    v49 = 0;
                    v50 = 0;
                    for (i = 56; i != -8; i -= 8)
                    {
                      v50 |= 255 << i;
                      v52 = *v48;
                      if (!i || (v50 & v52) != 0)
                      {
                        if (v21 + 1 + v49 >= v47)
                          goto LABEL_104;
                        v53 = v49++;
                        v20[v53] = ((255 << i) & v52) >> i;
                      }
                    }
                    LODWORD(a7) = 1;
                  }
                  else
                  {
                    LODWORD(a7) = 0;
                  }
                  v21 += v49;
                  if (v21 >= v47)
                    istrsenvisx_cold_4();
                  v20 += v49;
                  ++v48;
                  if (!--v46)
                  {
                    v25 = v65;
                    v19 = v66;
                    goto LABEL_106;
                  }
                }
              }
              v21 = 0;
LABEL_106:
              *v20 = 0;
              if ((v67 & 0x4000) != 0 && v60)
                *v60 = (_DWORD)a7;
              goto LABEL_113;
            }
LABEL_56:
            *v37++ = 92;
            goto LABEL_57;
          }
LABEL_74:
          *v37++ = 34;
          if ((v34 & 0x40) != 0)
            goto LABEL_57;
          goto LABEL_56;
        }
        v25 = v65;
        if (v64 && !*v64)
        {
          v23 = 0;
          *__error() = 28;
          v21 = 0xFFFFFFFFLL;
        }
        else
        {
          v23 = 0;
          v21 = 0;
          *v20 = 0;
        }
        v19 = v66;
LABEL_111:
        v24 = v62;
LABEL_112:
        free(v23);
        v23 = v25;
        v25 = v19;
        v19 = v24;
LABEL_113:
        free(v23);
        free(v25);
        free(v19);
        return v21;
      }
      v22 = (char *)malloc_type_calloc((16 * v17) | 1, 1uLL, 0x100004077774924uLL);
      if (v22)
      {
        v20 = v22;
        *a1 = v22;
        v62 = (__int32 *)v22;
        goto LABEL_15;
      }
    }
    v23 = 0;
    v24 = 0;
    v21 = 0xFFFFFFFFLL;
    v25 = v65;
    goto LABEL_112;
  }
  return 0xFFFFFFFFLL;
}

char *__cdecl snvis(char *a1, size_t a2, int a3, int a4, int a5, const char *a6)
{
  int v6;
  char v8[2];
  size_t v9;
  char *v10;

  v10 = a1;
  v9 = a2;
  v8[0] = a3;
  v8[1] = a5;
  v6 = istrsenvisx(&v10, (uint64_t)&v9, v8, 1uLL, a4, a6, 0);
  if (v6 >= 0)
    return &v10[v6];
  else
    return 0;
}

int strsvis(char *a1, const char *a2, int a3, const char *a4)
{
  char *v5;

  v5 = a1;
  return istrsenvisxl(&v5, 0, a2, a3, a4);
}

uint64_t istrsenvisxl(char **a1, uint64_t a2, const char *a3, unsigned int a4, const char *a5)
{
  unint64_t v10;

  if (a3)
    v10 = _platform_strlen();
  else
    v10 = 0;
  return istrsenvisx(a1, a2, a3, v10, a4, a5, 0);
}

int strsnvis(char *a1, size_t a2, const char *a3, int a4, const char *a5)
{
  size_t v6;
  char *v7;

  v6 = a2;
  v7 = a1;
  return istrsenvisxl(&v7, (uint64_t)&v6, a3, a4, a5);
}

int strsvisx(char *a1, const char *a2, size_t a3, int a4, const char *a5)
{
  char *v6;

  v6 = a1;
  return istrsenvisx(&v6, 0, a2, a3, a4, a5, 0);
}

int strsnvisx(char *a1, size_t a2, const char *a3, size_t a4, int a5, const char *a6)
{
  size_t v7;
  char *v8;

  v7 = a2;
  v8 = a1;
  return istrsenvisx(&v8, (uint64_t)&v7, a3, a4, a5, a6, 0);
}

int strsenvisx(char *a1, size_t a2, const char *a3, size_t a4, int a5, const char *a6, int *a7)
{
  size_t v8;
  char *v9;

  v8 = a2;
  v9 = a1;
  return istrsenvisx(&v9, (uint64_t)&v8, a3, a4, a5, a6, a7);
}

char *__cdecl vis(char *a1, int a2, int a3, int a4)
{
  int v4;
  char v6[2];
  char *v7;

  v7 = a1;
  v6[0] = a2;
  v6[1] = a4;
  v4 = istrsenvisx(&v7, 0, v6, 1uLL, a3, "", 0);
  if (v4 >= 0)
    return &v7[v4];
  else
    return 0;
}

char *__cdecl nvis(char *a1, size_t a2, int a3, int a4, int a5)
{
  int v5;
  char v7[2];
  size_t v8;
  char *v9;

  v9 = a1;
  v8 = a2;
  v7[0] = a3;
  v7[1] = a5;
  v5 = istrsenvisx(&v9, (uint64_t)&v8, v7, 1uLL, a4, "", 0);
  if (v5 >= 0)
    return &v9[v5];
  else
    return 0;
}

int strvis(char *a1, const char *a2, int a3)
{
  char *v4;

  v4 = a1;
  return istrsenvisxl(&v4, 0, a2, a3, "");
}

int strnvis(char *a1, size_t a2, const char *a3, int a4)
{
  size_t v5;
  char *v6;

  v5 = a2;
  v6 = a1;
  return istrsenvisxl(&v6, (uint64_t)&v5, a3, a4, "");
}

int stravis(char **a1, const char *a2, int a3)
{
  *a1 = 0;
  return istrsenvisxl(a1, 0, a2, a3, "");
}

int strvisx(char *a1, const char *a2, size_t a3, int a4)
{
  char *v5;

  v5 = a1;
  return istrsenvisx(&v5, 0, a2, a3, a4, "", 0);
}

int strnvisx(char *a1, size_t a2, const char *a3, size_t a4, int a5)
{
  size_t v6;
  char *v7;

  v6 = a2;
  v7 = a1;
  return istrsenvisx(&v7, (uint64_t)&v6, a3, a4, a5, "", 0);
}

int strenvisx(char *a1, size_t a2, const char *a3, size_t a4, int a5, int *a6)
{
  size_t v7;
  char *v8;

  v7 = a2;
  v8 = a1;
  return istrsenvisx(&v8, (uint64_t)&v7, a3, a4, a5, "", a6);
}

_DWORD *do_hvis(_DWORD *a1, unsigned int a2, __int16 a3, char a4, __int32 *a5)
{
  _RuneLocale *v10;
  __uint32_t v11;
  uint64_t v12;
  _QWORD *v13;
  _DWORD *result;

  if (a2 <= 0x7F)
  {
    v10 = &_DefaultRuneLocale;
LABEL_8:
    v11 = v10->__runetype[a2];
    goto LABEL_9;
  }
  if (a2 < 0x100)
  {
    v12 = __locale_key;
    v13 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v12);
    if (!v13)
      v13 = &__global_locale;
    v10 = *(_RuneLocale **)(v13[166] + 120);
    goto LABEL_8;
  }
  LOWORD(v11) = ___runetype(a2);
LABEL_9:
  if ((v11 & 0x500) != 0
    || a2 - 39 < 8
    || a2 - 33 <= 0x3E && ((1 << (a2 - 33)) & 0x4000000000000009) != 0)
  {
    return (_DWORD *)do_svis((uint64_t)a1, a2, a3, a4, a5);
  }
  *a1 = 37;
  a1[1] = dword_18A0E60B4[a2 >> 4];
  result = a1 + 3;
  a1[2] = dword_18A0E60B4[a2 & 0xF];
  return result;
}

_DWORD *do_mvis(_DWORD *a1, unsigned __int32 a2, __int16 a3, int a4, __int32 *__s)
{
  _DWORD *result;
  _RuneLocale *v11;
  uint64_t v12;
  _QWORD *v13;
  _RuneLocale *v14;
  uint64_t v15;
  _QWORD *v16;

  if (a2 == 10)
    return (_DWORD *)do_svis((uint64_t)a1, a2, a3, a4, __s);
  if (a2 > 0x7F)
  {
    if (a2 >= 0x100)
    {
      if ((___runetype(a2) & 0x4000) == 0)
        goto LABEL_14;
      goto LABEL_12;
    }
    v12 = __locale_key;
    v13 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v12);
    if (!v13)
      v13 = &__global_locale;
    v11 = *(_RuneLocale **)(v13[166] + 120);
  }
  else
  {
    v11 = &_DefaultRuneLocale;
  }
  if ((v11->__runetype[a2] & 0x4000) == 0)
    goto LABEL_14;
LABEL_12:
  if (a4 == 10 || a4 == 13)
    goto LABEL_27;
LABEL_14:
  if (a2 <= 0x7F)
  {
    v14 = &_DefaultRuneLocale;
    goto LABEL_22;
  }
  if (a2 < 0x100)
  {
    v15 = __locale_key;
    v16 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v15);
    if (!v16)
      v16 = &__global_locale;
    v14 = *(_RuneLocale **)(v16[166] + 120);
LABEL_22:
    if ((v14->__runetype[a2] & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_26;
  }
  if ((___runetype(a2) & 0x4000) == 0)
  {
LABEL_23:
    if ((int)a2 < 33 || a2 == 61 || a2 > 0x7E)
      goto LABEL_27;
  }
LABEL_26:
  if (!wcschr(dword_18A0E60F8, a2))
    return (_DWORD *)do_svis((uint64_t)a1, a2, a3, a4, __s);
LABEL_27:
  *a1 = 61;
  a1[1] = dword_18A0E612C[a2 >> 4];
  result = a1 + 3;
  a1[2] = dword_18A0E612C[a2 & 0xF];
  return result;
}

uint64_t do_svis(uint64_t a1, __int32 a2, __int16 a3, char a4, __int32 *__s)
{
  __int32 *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t StatusReg;
  _RuneLocale *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _RuneLocale *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _RuneLocale *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  int v57;

  v9 = wcschr(__s, a2);
  if (v9)
  {
LABEL_2:
    v10 = 0;
    v11 = a4 & 0xF8;
    v12 = 56;
    v13 = 0x1ECCE6000uLL;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v15 = &_DefaultRuneLocale;
    v16 = 0x730000005CLL;
    v17 = 0x300000005CLL;
    v18 = 0x610000005CLL;
    v19 = 0x620000005CLL;
    v20 = 0x740000005CLL;
    v21 = 0x6E0000005CLL;
    v22 = 0x760000005CLL;
    v23 = 0x660000005CLL;
    v24 = 0x720000005CLL;
    while (1)
    {
      v10 |= 255 << v12;
      if (v12 && (v10 & a2) == 0)
        goto LABEL_14;
      v25 = ((255 << v12) & (unint64_t)a2) >> v12;
      if ((a3 & 2) == 0)
        goto LABEL_11;
      switch((int)v25)
      {
        case 0:
          *(_QWORD *)a1 = v17;
          if (v11 == 48)
          {
            *(_QWORD *)(a1 + 8) = 0x3000000030;
            goto LABEL_13;
          }
          a1 += 8;
          goto LABEL_14;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
          goto LABEL_38;
        case 7:
          *(_QWORD *)a1 = v18;
          a1 += 8;
          goto LABEL_14;
        case 8:
          *(_QWORD *)a1 = v19;
          a1 += 8;
          goto LABEL_14;
        case 9:
          *(_QWORD *)a1 = v20;
          a1 += 8;
          goto LABEL_14;
        case 10:
          *(_QWORD *)a1 = v21;
          a1 += 8;
          goto LABEL_14;
        case 11:
          *(_QWORD *)a1 = v22;
          a1 += 8;
          goto LABEL_14;
        case 12:
          *(_QWORD *)a1 = v23;
          a1 += 8;
          goto LABEL_14;
        case 13:
          *(_QWORD *)a1 = v24;
          a1 += 8;
          goto LABEL_14;
        default:
          if ((v25 - 97) <= 0x15 && ((1 << (v25 - 97)) & 0x2E2023) != 0)
            goto LABEL_11;
          if ((v25 - 32) > 0x3E)
            goto LABEL_38;
          if (((1 << (v25 - 32)) & 0x4000200000010010) != 0)
            goto LABEL_11;
          if ((_DWORD)v25 == 32)
          {
            *(_QWORD *)a1 = v16;
            a1 += 8;
            goto LABEL_14;
          }
LABEL_38:
          if ((a3 & 0x4000) != 0)
          {
            if (v25 <= 0x7F)
            {
LABEL_53:
              v38 = (uint64_t)&v15->__magic[4 * v25];
              goto LABEL_64;
            }
            if (v25 >= 0x100)
            {
              v57 = v11;
              v55 = StatusReg;
              v47 = v17;
              v50 = v24;
              v39 = v16;
              v53 = v23;
              v36 = ___runetype_l(((255 << v12) & (unint64_t)a2) >> v12, 0);
              v24 = v50;
              v23 = v53;
              v16 = v39;
              v17 = v47;
LABEL_57:
              v15 = &_DefaultRuneLocale;
              StatusReg = v55;
              v11 = v57;
              if ((v36 & 0x800) == 0)
                goto LABEL_11;
              goto LABEL_65;
            }
            v40 = &__c_locale;
          }
          else
          {
            if (v25 <= 0x7F)
              goto LABEL_53;
            if (v25 >= 0x100)
            {
              v57 = v11;
              v55 = StatusReg;
              v46 = v16;
              v49 = v24;
              v52 = v23;
              v36 = ___runetype(((255 << v12) & (unint64_t)a2) >> v12);
              v24 = v49;
              v23 = v52;
              v16 = v46;
              goto LABEL_57;
            }
            v40 = *(_QWORD **)(StatusReg + 8 * *(_QWORD *)(v13 + 3344));
            if (!v40)
              v40 = &__global_locale;
          }
          v38 = *(_QWORD *)(v40[166] + 120) + 4 * v25;
LABEL_64:
          if ((*(_DWORD *)(v38 + 60) & 0x800) == 0)
            goto LABEL_11;
LABEL_65:
          if ((v25 & 0xF8) != 0x30)
          {
            *(_DWORD *)a1 = 92;
            goto LABEL_33;
          }
LABEL_11:
          if (v9 || (a3 & 1) != 0 || (v25 & 0x7F) == 0x20)
          {
            *(_DWORD *)a1 = 92;
            *(_QWORD *)(a1 + 4) = *(_QWORD *)&vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v25), (uint32x2_t)0xFFFFFFFDFFFFFFFALL), (int8x8_t)0x700000003) | 0x3000000030;
            *(_DWORD *)(a1 + 12) = v25 & 7 | 0x30;
LABEL_13:
            a1 += 16;
            goto LABEL_14;
          }
          if ((a3 & 0x40) == 0)
          {
            *(_DWORD *)a1 = 92;
            a1 += 4;
          }
          if ((v25 & 0x80) != 0)
          {
            *(_DWORD *)a1 = 77;
            a1 += 4;
            LODWORD(v25) = v25 & 0x7F;
LABEL_30:
            v35 = (uint64_t)&v15->__magic[4 * v25];
LABEL_31:
            if ((*(_DWORD *)(v35 + 60) & 0x200) != 0)
            {
LABEL_24:
              *(_DWORD *)a1 = 94;
              if ((_DWORD)v25 == 127)
                *(_DWORD *)(a1 + 4) = 63;
              else
                *(_DWORD *)(a1 + 4) = v25 + 64;
              goto LABEL_35;
            }
            goto LABEL_32;
          }
          if (v25 <= 0x7F)
            goto LABEL_30;
          if (v25 < 0x100)
          {
            v37 = *(_QWORD **)(StatusReg + 8 * *(_QWORD *)(v13 + 3344));
            if (!v37)
              v37 = &__global_locale;
            v35 = *(_QWORD *)(v37[166] + 120) + 4 * v25;
            goto LABEL_31;
          }
          v56 = v11;
          v26 = v13;
          v54 = StatusReg;
          v27 = v15;
          v48 = v21;
          v51 = v22;
          v45 = v20;
          v28 = v19;
          v29 = v18;
          v30 = v17;
          v31 = v16;
          v32 = v23;
          v33 = v24;
          v34 = ___runetype(((255 << v12) & (unint64_t)a2) >> v12);
          v24 = v33;
          v23 = v32;
          v16 = v31;
          v17 = v30;
          v18 = v29;
          v19 = v28;
          v20 = v45;
          v21 = v48;
          v22 = v51;
          v15 = v27;
          StatusReg = v54;
          v13 = v26;
          v11 = v56;
          if ((v34 & 0x200) != 0)
            goto LABEL_24;
LABEL_32:
          *(_DWORD *)a1 = 45;
LABEL_33:
          *(_DWORD *)(a1 + 4) = v25;
LABEL_35:
          a1 += 8;
LABEL_14:
          v12 -= 8;
          if (v12 == -8)
            return a1;
          break;
      }
    }
  }
  if ((a3 & 0x4000) == 0)
  {
    if (a2 > 0x7F)
    {
      if (a2 >= 0x100)
      {
        if ((___runetype(a2) & 0x800) != 0)
          goto LABEL_85;
        goto LABEL_83;
      }
      v42 = __locale_key;
      v43 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v42);
      if (!v43)
        v43 = &__global_locale;
      goto LABEL_81;
    }
LABEL_73:
    v41 = &_DefaultRuneLocale;
    goto LABEL_82;
  }
  if (a2 <= 0x7F)
    goto LABEL_73;
  if (a2 < 0x100)
  {
    v43 = &__c_locale;
LABEL_81:
    v41 = *(_RuneLocale **)(v43[166] + 120);
LABEL_82:
    if ((v41->__runetype[a2] & 0x800) != 0)
      goto LABEL_85;
    goto LABEL_83;
  }
  if ((___runetype_l(a2, 0) & 0x800) != 0)
    goto LABEL_85;
LABEL_83:
  if ((a2 > 0x20 || ((1 << a2) & 0x100000600) == 0)
    && (a2 < 128 || (a3 & 0x4000) != 0 || !iswspace(a2))
    && ((a3 & 0x20) == 0 || a2 > 0xD || ((1 << a2) & 0x2180) == 0))
  {
    goto LABEL_2;
  }
LABEL_85:
  *(_DWORD *)a1 = a2;
  a1 += 4;
  return a1;
}

uint64_t wait_NOCANCEL()
{
  return __wait4_nocancel();
}

pid_t wait3(int *a1, int a2, rusage *a3)
{
  return wait4(-1, a1, a2, a3);
}

uint64_t waitpid_NOCANCEL(uint64_t a1, uint64_t a2, int a3)
{
  if ((a3 & 0xFFFFFFEC) == 0)
    return __wait4_nocancel();
  *__error() = 22;
  return 0xFFFFFFFFLL;
}

uint64_t _ascii_init(_QWORD *a1)
{
  a1[9] = _ascii_mbrtowc;
  a1[10] = _ascii_mbsinit;
  a1[11] = _ascii_mbsnrtowcs;
  a1[12] = _ascii_wcrtomb;
  a1[13] = _ascii_wcsnrtombs;
  a1[8] = 0x8000000001;
  return 0;
}

uint64_t _ascii_mbrtowc(_DWORD *a1, char *a2, uint64_t a3)
{
  int v3;

  if (!a2)
    return 0;
  if (!a3)
    return -2;
  if (*a2 < 0)
  {
    *__error() = 92;
    return -1;
  }
  else
  {
    v3 = *a2;
    if (a1)
      *a1 = v3;
    return v3 != 0;
  }
}

uint64_t _ascii_mbsinit()
{
  return 1;
}

uint64_t _ascii_mbsnrtowcs(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v4;
  uint64_t result;
  int v7;
  _BYTE *v8;
  _BYTE *v9;

  v4 = (_BYTE *)*a2;
  if (a1)
  {
    if (a4)
    {
      result = 0;
      while (1)
      {
        if (a3 == result)
        {
          v4 += result;
          a4 = a3;
          goto LABEL_18;
        }
        if ((char)v4[result] < 0)
        {
          *a2 = &v4[result];
          goto LABEL_20;
        }
        v7 = v4[result];
        *(_DWORD *)(a1 + 4 * result) = v7;
        if (!v7)
          break;
        if (a4 == ++result)
        {
          v4 += result;
          goto LABEL_18;
        }
      }
      *a2 = 0;
    }
    else
    {
LABEL_18:
      *a2 = v4;
      return a4;
    }
  }
  else
  {
    if (a3)
    {
      v8 = &v4[a3];
      v9 = (_BYTE *)*a2;
      while (*v9)
      {
        if ((char)*v9 < 0)
        {
LABEL_20:
          *__error() = 92;
          return -1;
        }
        ++v9;
        if (!--a3)
        {
          v9 = v8;
          return v9 - v4;
        }
      }
    }
    else
    {
      v9 = (_BYTE *)*a2;
    }
    return v9 - v4;
  }
  return result;
}

uint64_t _ascii_wcrtomb(_BYTE *a1, unsigned int a2)
{
  if (!a1)
    return 1;
  if (a2 < 0x80)
  {
    *a1 = a2;
    return 1;
  }
  else
  {
    *__error() = 92;
    return -1;
  }
}

uint64_t _ascii_wcsnrtombs(uint64_t a1, int **a2, uint64_t a3, uint64_t a4)
{
  int *v4;
  uint64_t result;
  int v7;
  int *v8;
  int *v9;

  v4 = *a2;
  if (a1)
  {
    if (a4)
    {
      result = 0;
      while (a3 != result)
      {
        v7 = *v4;
        if (*v4 >= 0x80)
        {
          *a2 = v4;
          goto LABEL_20;
        }
        *(_BYTE *)(a1 + result) = v7;
        if (!v7)
        {
          *a2 = 0;
          return result;
        }
        ++v4;
        if (a4 == ++result)
        {
          a3 = a4;
          break;
        }
      }
    }
    else
    {
      a3 = 0;
    }
    *a2 = v4;
    return a3;
  }
  else
  {
    if (a3)
    {
      v8 = &v4[a3];
      v9 = *a2;
      while (*v9)
      {
        if (*v9 >= 0x80)
        {
LABEL_20:
          *__error() = 92;
          return -1;
        }
        ++v9;
        if (!--a3)
        {
          v9 = v8;
          return v9 - v4;
        }
      }
    }
    else
    {
      v9 = *a2;
    }
    return v9 - v4;
  }
}

uint64_t _BIG5_init(_QWORD *a1)
{
  a1[12] = _BIG5_wcrtomb;
  a1[9] = _BIG5_mbrtowc;
  a1[10] = _BIG5_mbsinit;
  a1[8] = 0x8000000002;
  return 0;
}

uint64_t _BIG5_mbrtowc(int *a1, const char *a2, unint64_t a3, int *a4)
{
  int v4;
  const char *v5;
  int *v7;
  int v8;
  int *v10;
  int v11;

  v4 = *a4;
  if (*a4 >= 0x100)
  {
    v10 = __error();
    v11 = 22;
LABEL_18:
    *v10 = v11;
    return -1;
  }
  if (a2)
    v5 = a2;
  else
    v5 = "";
  if (!a2)
    a3 = 1;
  if (a2)
    v7 = a1;
  else
    v7 = 0;
  if (!a3)
    return -2;
  v8 = *(unsigned __int8 *)v5;
  if (v4)
  {
    if (*v5)
    {
      if (v7)
        *v7 = v8 | (v4 << 8);
      *a4 = 0;
      return 1;
    }
    goto LABEL_31;
  }
  if ((v8 + 95) > 0x5Du)
  {
    if (v7)
      *v7 = v8;
    return v8 != 0;
  }
  else
  {
    if (a3 <= 1)
    {
      *a4 = v8;
      return -2;
    }
    if (!v5[1])
    {
LABEL_31:
      v10 = __error();
      v11 = 92;
      goto LABEL_18;
    }
    if (v7)
      *v7 = *((unsigned __int8 *)v5 + 1) | (v8 << 8);
    return 2;
  }
}

uint64_t _BIG5_wcrtomb(_BYTE *a1, unsigned int a2, _DWORD *a3)
{
  if (*a3)
  {
    *__error() = 22;
    return -1;
  }
  if (!a1)
    return 1;
  if ((a2 & 0x8000) == 0)
  {
    *a1 = a2;
    return 1;
  }
  *(_WORD *)a1 = bswap32(a2) >> 16;
  return 2;
}

BOOL _BIG5_mbsinit(_DWORD *a1)
{
  return !a1 || *a1 == 0;
}

wint_t btowc_l(wint_t result, locale_t a2)
{
  locale_t v2;
  locale_t v3;
  wint_t v4;
  char v5;
  _OWORD v6[8];

  memset(v6, 0, sizeof(v6));
  if (result != -1)
  {
    v4 = 0;
    v2 = (locale_t)&__global_locale;
    if (a2 != (locale_t)-1)
      v2 = a2;
    if (a2)
      v3 = v2;
    else
      v3 = (locale_t)&__c_locale;
    v5 = result;
    if ((unint64_t)(*(uint64_t (**)(wint_t *, char *, uint64_t, _OWORD *))(*((_QWORD *)v3 + 166) + 72))(&v4, &v5, 1, v6) > 1)return -1;
    else
      return v4;
  }
  return result;
}

wint_t btowc(int a1)
{
  uint64_t v1;
  _xlocale *v2;
  _xlocale *v3;

  v1 = __locale_key;
  v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2)
    v3 = v2;
  else
    v3 = (_xlocale *)&__global_locale;
  return btowc_l(a1, v3);
}

uint64_t __collate_load_tables(int a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  int v19;
  int *v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  void (*v25)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, __darwin_ino64_t, _QWORD, _QWORD);
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, __darwin_ino64_t, _QWORD, _QWORD);
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int *v37;
  int v38;
  size_t st_size;
  _QWORD *v40;
  uint64_t v41;
  off_t v42;
  char *v43;
  uint64_t v44;
  int *v45;
  _QWORD *v46;
  int v47;
  uint64_t v48;
  BOOL v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  void (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, __darwin_ino64_t, _QWORD, _QWORD);
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  void (*v68)(void);
  stat v69;
  char v70[1024];

  memset(&v69, 0, sizeof(v69));
  if (!_platform_strcmp() || !_platform_strcmp() || !_platform_strncmp())
  {
    if ((_UNKNOWN *)a2 == &__global_locale)
      __collate_load_error = 1;
    v22 = *(_QWORD *)(a2 + 1320);
    if (v22)
    {
      do
      {
        v23 = __ldaxr((unsigned int *)v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, (unsigned int *)v22));
      if (!v24)
      {
        v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, __darwin_ino64_t, _QWORD, _QWORD))(v22 + 8);
        if (v25)
          v25(v22, v4, v5, v6, v7, v8, v9, v10, *(_QWORD *)&v69.st_dev, v69.st_ino, *(_QWORD *)&v69.st_uid, *(_QWORD *)&v69.st_rdev);
      }
    }
    *(_QWORD *)(a2 + 1320) = __xlocale_C_collate;
    do
      v26 = __ldaxr(__xlocale_C_collate);
    while (__stlxr(v26 + 1, __xlocale_C_collate));
    return 1;
  }
  if (__collate_load_tables_cache && !_platform_strcmp())
  {
    if ((_UNKNOWN *)a2 == &__global_locale)
      __collate_load_error = 0;
    v27 = *(_QWORD *)(a2 + 1320);
    if (v27)
    {
      do
      {
        v28 = __ldaxr((unsigned int *)v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, (unsigned int *)v27));
      if (!v29)
      {
        v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, __darwin_ino64_t, _QWORD, _QWORD))(v27 + 8);
        if (v30)
          v30(v27, v11, v12, v13, v14, v15, v16, v17, *(_QWORD *)&v69.st_dev, v69.st_ino, *(_QWORD *)&v69.st_uid, *(_QWORD *)&v69.st_rdev);
      }
    }
    v31 = (unsigned int *)__collate_load_tables_cache;
    *(_QWORD *)(a2 + 1320) = __collate_load_tables_cache;
    if (v31)
    {
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 + 1, v31));
    }
    return 1;
  }
  _platform_strcpy();
  strcpy(&v70[_platform_strlen()], "/LC_COLLATE");
  result = __open_path_locale(v70);
  if ((_DWORD)result == -1)
    return result;
  v19 = result;
  if (fstat(result, &v69) < 0)
  {
    close_NOCANCEL();
    return 0xFFFFFFFFLL;
  }
  if (v69.st_size <= 0xA7uLL)
  {
    close_NOCANCEL();
LABEL_10:
    v20 = __error();
    v21 = 22;
LABEL_37:
    *v20 = v21;
    return 0xFFFFFFFFLL;
  }
  v33 = (unsigned int *)mmap(0, v69.st_size, 3, 2, v19, 0);
  close_NOCANCEL();
  if (v33 == (unsigned int *)-1)
    return 0xFFFFFFFFLL;
  if (!_platform_strncmp())
    return __collate_load_tables_legacy(a1, a2, (uint64_t)v33, (char *)v33, (uint64_t)&v69);
  if (_platform_strncmp() || (v34 = v33[20], (v34 & 0x80000000) != 0))
  {
    munmap(v33, v69.st_size);
    v20 = __error();
    v21 = 79;
    goto LABEL_37;
  }
  if ((v33[19] & 1) != 0)
  {
    st_size = v69.st_size;
LABEL_77:
    munmap(v33, st_size);
    goto LABEL_10;
  }
  v35 = 136 * v34 + 44 * v33[21] + 10240;
  v36 = *((unsigned __int8 *)v33 + 24);
  if (*((_BYTE *)v33 + 24))
  {
    v37 = (int *)(v33 + 22);
    do
    {
      v38 = *v37++;
      v35 += 100 * v38;
      --v36;
    }
    while (v36);
  }
  st_size = v69.st_size;
  if (v69.st_size - 168 != v35)
    goto LABEL_77;
  v40 = malloc_type_malloc(0xC8uLL, 0x10B004021DA7767uLL);
  if (!v40)
  {
    munmap(v33, v69.st_size);
    v20 = __error();
    v21 = 12;
    goto LABEL_37;
  }
  v41 = (uint64_t)v40;
  v42 = v69.st_size;
  v40[9] = v33;
  v40[10] = v42;
  *(_DWORD *)v40 = 2;
  v40[1] = destruct_collate;
  v40[24] = v33 + 42;
  v43 = (char *)(v33 + 2602);
  v44 = *((unsigned __int8 *)v33 + 24);
  if (*((_BYTE *)v33 + 24))
  {
    v45 = (int *)(v33 + 22);
    v46 = v40 + 12;
    do
    {
      v47 = *v45++;
      v48 = 100 * v47;
      v49 = v47 <= 0;
      if (v47 <= 0)
        v50 = 0;
      else
        v50 = v43;
      if (v49)
        v48 = 0;
      v43 += v48;
      *v46++ = v50;
      --v44;
    }
    while (v44);
  }
  if ((int)v34 <= 0)
    v51 = 0;
  else
    v51 = v43;
  if ((int)v34 <= 0)
    v52 = 0;
  else
    v52 = 136 * v34;
  v53 = &v43[v52];
  v40[22] = v51;
  if ((int)v33[21] <= 0)
    v53 = 0;
  v40[23] = v53;
  _platform_strcpy();
  *(_QWORD *)(v41 + 88) = v33 + 6;
  v61 = __collate_load_tables_cache;
  if (__collate_load_tables_cache)
  {
    do
    {
      v62 = __ldaxr((unsigned int *)v61);
      v63 = v62 - 1;
    }
    while (__stlxr(v63, (unsigned int *)v61));
    if (!v63)
    {
      v64 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, __darwin_ino64_t, _QWORD, _QWORD))(v61 + 8);
      if (v64)
        v64(v61, v54, v55, v56, v57, v58, v59, v60, *(_QWORD *)&v69.st_dev, v69.st_ino, *(_QWORD *)&v69.st_uid, *(_QWORD *)&v69.st_rdev);
    }
  }
  __collate_load_tables_cache = v41;
  v65 = *(_QWORD *)(a2 + 1320);
  if (v65)
  {
    do
    {
      v66 = __ldaxr((unsigned int *)v65);
      v67 = v66 - 1;
    }
    while (__stlxr(v67, (unsigned int *)v65));
    if (!v67)
    {
      v68 = *(void (**)(void))(v65 + 8);
      if (v68)
        v68();
    }
  }
  result = 0;
  *(_QWORD *)(a2 + 1320) = __collate_load_tables_cache;
  *(_BYTE *)(v41 + 64) = 0;
  if ((_UNKNOWN *)a2 == &__global_locale)
  {
    result = 0;
    __collate_load_error = 0;
  }
  return result;
}

uint64_t __collate_load_tables_legacy(int a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int *v16;
  int v17;
  size_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  int *v23;
  int v24;
  char *v25;
  char *v26;
  int v27;
  unsigned int *v28;
  char *v29;
  char *v30;
  int *v31;
  int v32;
  uint64_t result;
  int v34;
  char *v35;
  unsigned int *v36;
  unsigned int *v37;
  char *v38;
  int v39;
  BOOL v40;
  char *v41;
  unsigned int *v42;
  char v43;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  __int128 v52;
  __int128 v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  BOOL v58;
  unsigned int *v59;
  __int128 v60;
  __int128 v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  BOOL v66;
  unint64_t v67;
  int v68;
  _DWORD *v69;
  unint64_t v70;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  void (*v76)(void);
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  void (*v80)(void);
  uint64_t v81;
  unsigned int *v82;

  v81 = 0;
  v82 = 0;
  LODWORD(v9) = *(_BYTE *)(a3 + 13) & 0xF;
  if ((*(_BYTE *)(a3 + 13) & 0xF) != 0)
  {
    v10 = (unsigned int *)(a3 + 22);
    v11 = *(_BYTE *)(a3 + 13) & 0xF;
    do
    {
      *(v10 - 2) = bswap32(*(v10 - 2));
      *v10 = bswap32(*v10);
      ++v10;
      --v11;
    }
    while (v11);
  }
  v12 = bswap32(*(_DWORD *)(a3 + 30));
  *(_DWORD *)(a3 + 30) = v12;
  v13 = bswap32(*(_DWORD *)(a3 + 34));
  *(_DWORD *)(a3 + 34) = v13;
  if ((v12 & 0x80000000) != 0)
  {
    munmap(a4, *(_QWORD *)(a5 + 96));
    v31 = __error();
    v32 = 79;
LABEL_21:
    *v31 = v32;
    return 0xFFFFFFFFLL;
  }
  v14 = a3 + 38;
  v15 = 48 * v12 + 12 * v13 + 2048;
  if ((_DWORD)v9)
  {
    v16 = (int *)(a3 + 22);
    v9 = v9;
    do
    {
      v17 = *v16++;
      v15 += 44 * v17;
      --v9;
    }
    while (v9);
  }
  v18 = *(_QWORD *)(a5 + 96);
  if (&a4[v18 - v14] != (char *)v15)
  {
    munmap(a4, v18);
    v31 = __error();
    v32 = 22;
    goto LABEL_21;
  }
  v19 = malloc_type_malloc(0xC8uLL, 0x10B004021DA7767uLL);
  if (!v19)
  {
    munmap(a4, *(_QWORD *)(a5 + 96));
LABEL_20:
    v31 = __error();
    v32 = 12;
    goto LABEL_21;
  }
  v20 = v19;
  *((_QWORD *)v19 + 9) = a4;
  *((_QWORD *)v19 + 10) = *(_QWORD *)(a5 + 96);
  v21 = 136 * v12 + 44 * *(_DWORD *)(a3 + 34) + 10384;
  v22 = *(_BYTE *)(a3 + 13) & 0xF;
  if ((*(_BYTE *)(a3 + 13) & 0xF) != 0)
  {
    v23 = (int *)(a3 + 22);
    do
    {
      v24 = *v23++;
      v21 += 100 * v24;
      --v22;
    }
    while (v22);
  }
  v25 = (char *)malloc_type_calloc(1uLL, v21, 0x8FAB21C2uLL);
  *((_QWORD *)v20 + 11) = v25;
  if (!v25)
  {
    munmap(a4, *(_QWORD *)(a5 + 96));
    free(v20);
    goto LABEL_20;
  }
  v26 = v25 + 144;
  *v20 = 2;
  *((_QWORD *)v20 + 1) = destruct_collate;
  *((_QWORD *)v20 + 24) = v25 + 144;
  v27 = *(_DWORD *)(a3 + 22);
  v28 = (unsigned int *)(a3 + 2086);
  v29 = v25 + 10384;
  if (v27 < 1)
  {
    v30 = 0;
  }
  else
  {
    v81 = a3 + 2086;
    v28 += 11 * v27;
    v30 = v25 + 10384;
    v29 += 100 * v27;
  }
  *((_QWORD *)v20 + 12) = v30;
  if ((*(_BYTE *)(a3 + 12) & 1) != 0)
  {
    *((_QWORD *)v20 + 13) = v30;
  }
  else
  {
    v34 = *(_DWORD *)(a3 + 26);
    if (v34 < 1)
    {
      *((_QWORD *)v20 + 13) = 0;
    }
    else
    {
      v82 = v28;
      *((_QWORD *)v20 + 13) = v29;
      v28 += 11 * v34;
      v29 += 100 * v34;
    }
  }
  if ((int)v12 >= 1)
    v35 = v29;
  else
    v35 = 0;
  if ((int)v12 >= 1)
    v36 = &v28[12 * v12];
  else
    v36 = v28;
  if ((int)v12 >= 1)
    v37 = v28;
  else
    v37 = 0;
  if ((int)v12 >= 1)
    v38 = &v29[136 * v12];
  else
    v38 = v29;
  *((_QWORD *)v20 + 22) = v35;
  v39 = *(_DWORD *)(a3 + 34);
  v40 = v39 <= 0;
  if (v39 <= 0)
    v41 = 0;
  else
    v41 = v38;
  if (v40)
    v42 = 0;
  else
    v42 = v36;
  *((_QWORD *)v20 + 23) = v41;
  v43 = *(_BYTE *)(a3 + 13);
  v44 = 255;
  do
  {
    v45 = v44;
    if ((v43 & 0xF) != 0)
    {
      v46 = 0;
      do
      {
        *(_DWORD *)&v26[4 * v46] = bswap32(*(_DWORD *)(v14 + 4 * v46));
        ++v46;
        v43 = *(_BYTE *)(a3 + 13);
      }
      while (v46 < (v43 & 0xFu));
    }
    v26 += 40;
    v14 += 8;
    v44 = v45 - 1;
  }
  while (v45);
  if ((v43 & 0xF) != 0)
  {
    v47 = 0;
    do
    {
      v48 = *(_DWORD *)(a3 + 22 + 4 * v47);
      if (v48 >= 1)
      {
        v49 = *(&v81 + v47);
        v50 = *(_QWORD *)&v20[2 * v47 + 24];
        v51 = (unsigned int *)(v50 + 8);
        do
        {
          v52 = *(_OWORD *)(v49 + 4);
          v53 = *(_OWORD *)(v49 + 20);
          *(_QWORD *)(v50 + 36) = *(_QWORD *)(v49 + 36);
          *(_OWORD *)(v50 + 20) = v53;
          *(_OWORD *)(v50 + 4) = v52;
          *(_DWORD *)v50 = bswap32(*(_DWORD *)v49);
          v54 = *(_DWORD *)(v50 + 4);
          if (v54)
          {
            v55 = 10;
            v56 = v51;
            do
            {
              *(v56 - 1) = bswap32(v54);
              v57 = *v56++;
              v54 = v57;
              if (v57)
                v58 = v55 > 1;
              else
                v58 = 0;
              --v55;
            }
            while (v58);
          }
          v49 += 44;
          v50 += 100;
          v51 += 25;
          v40 = v48-- <= 1;
        }
        while (!v40);
        v43 = *(_BYTE *)(a3 + 13);
      }
      ++v47;
    }
    while (v47 < (v43 & 0xFu));
    v35 = (char *)*((_QWORD *)v20 + 22);
  }
  if ((int)v12 >= 1)
  {
    v59 = (unsigned int *)(v35 + 4);
    do
    {
      v61 = *(_OWORD *)v37;
      v60 = *((_OWORD *)v37 + 1);
      *((_QWORD *)v35 + 4) = *((_QWORD *)v37 + 4);
      *(_OWORD *)v35 = v61;
      *((_OWORD *)v35 + 1) = v60;
      v62 = *(_DWORD *)v35;
      if (*(_DWORD *)v35)
      {
        v63 = 10;
        v64 = v59;
        do
        {
          *(v64 - 1) = bswap32(v62);
          v65 = *v64++;
          v62 = v65;
          if (v65)
            v66 = v63 > 1;
          else
            v66 = 0;
          --v63;
        }
        while (v66);
      }
      if ((*(_BYTE *)(a3 + 13) & 0xF) != 0)
      {
        v67 = 0;
        do
        {
          *(_DWORD *)&v35[4 * v67 + 96] = bswap32(v37[v67 + 10]);
          ++v67;
        }
        while (v67 < (*(_BYTE *)(a3 + 13) & 0xFu));
      }
      v35 += 136;
      v37 += 12;
      v59 += 34;
      v40 = (int)v12 <= 1;
      LODWORD(v12) = v12 - 1;
    }
    while (!v40);
  }
  v68 = *(_DWORD *)(a3 + 34);
  if (v68 >= 1)
  {
    v69 = (_DWORD *)*((_QWORD *)v20 + 23);
    do
    {
      *v69 = bswap32(*v42);
      if ((*(_BYTE *)(a3 + 13) & 0xF) != 0)
      {
        v70 = 1;
        do
          v69[v70] = bswap32(v42[v70]);
        while (v70++ < (*(_BYTE *)(a3 + 13) & 0xFu));
      }
      v69 += 11;
      v42 += 3;
      v40 = v68-- <= 1;
    }
    while (!v40);
  }
  _platform_strcpy();
  v72 = *((_QWORD *)v20 + 11);
  *(_OWORD *)(v72 + 112) = 0u;
  *(_OWORD *)(v72 + 128) = 0u;
  *(_OWORD *)(v72 + 80) = 0u;
  *(_OWORD *)(v72 + 96) = 0u;
  *(_OWORD *)(v72 + 48) = 0u;
  *(_OWORD *)(v72 + 64) = 0u;
  *(_OWORD *)(v72 + 16) = 0u;
  *(_OWORD *)(v72 + 32) = 0u;
  *(_OWORD *)v72 = 0u;
  *(_BYTE *)v72 = *(_BYTE *)(a3 + 13) & 0xF;
  *(_BYTE *)(v72 + 11) = *(_BYTE *)(a3 + 13) >> 4;
  *(_DWORD *)(v72 + 52) = *(unsigned __int8 *)(a3 + 12) | 2;
  *(_QWORD *)(v72 + 56) = *(_QWORD *)(a3 + 30);
  *(_WORD *)(v72 + 1) = *(_WORD *)(a3 + 10);
  *(_QWORD *)(v72 + 64) = *(_QWORD *)(a3 + 22);
  *(_QWORD *)(v72 + 104) = *(_QWORD *)(a3 + 14);
  v73 = __collate_load_tables_cache;
  if (__collate_load_tables_cache)
  {
    do
    {
      v74 = __ldaxr((unsigned int *)v73);
      v75 = v74 - 1;
    }
    while (__stlxr(v75, (unsigned int *)v73));
    if (!v75)
    {
      v76 = *(void (**)(void))(v73 + 8);
      if (v76)
        v76();
    }
  }
  __collate_load_tables_cache = (uint64_t)v20;
  v77 = *(_QWORD *)(a2 + 1320);
  if (v77)
  {
    do
    {
      v78 = __ldaxr((unsigned int *)v77);
      v79 = v78 - 1;
    }
    while (__stlxr(v79, (unsigned int *)v77));
    if (!v79)
    {
      v80 = *(void (**)(void))(v77 + 8);
      if (v80)
        v80();
    }
  }
  result = 0;
  *(_QWORD *)(a2 + 1320) = v20;
  *((_BYTE *)v20 + 64) = 0;
  if ((_UNKNOWN *)a2 == &__global_locale)
  {
    result = 0;
    __collate_load_error = 0;
  }
  return result;
}

void destruct_collate(_QWORD *a1)
{
  _BYTE *v2;
  void *v3;
  size_t v4;

  v2 = (_BYTE *)a1[11];
  if ((v2[52] & 2) != 0)
    free(v2);
  v3 = (void *)a1[9];
  if (v3)
  {
    v4 = a1[10];
    if (v4)
      munmap(v3, v4);
  }
  free(a1);
}

__int32 *__collate_substitute(__int32 *a1, int a2, uint64_t a3)
{
  __int32 *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  void *v11;
  void *v12;
  __int32 v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  __int32 v21;
  uint64_t v22;
  const __int32 *v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  void *v30;
  __int32 v31;
  uint64_t v32;
  int v34;

  if (!a1 || (v3 = a1, !*a1))
  {
    a1 = (__int32 *)&unk_18A0E6180;
    return __collate_wcsdup(a1);
  }
  v4 = *(_QWORD *)(a3 + 1320);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 + 88) + 4 * a2 + 64);
  if (v5 <= 0)
    return __collate_wcsdup(a1);
  v6 = a2;
  v7 = wcslen(a1);
  v8 = *(_QWORD *)(v4 + 8 * v6 + 96);
  v9 = v7 / 4;
  if (v7 / 4 <= 2)
    v9 = 2;
  v34 = v9;
  v10 = v9 + v7;
  v11 = malloc_type_malloc(4 * (v9 + v7), 0x100004052888210uLL);
  if (!v11)
LABEL_37:
    __collate_err(71);
  v12 = v11;
  v13 = *v3;
  if (*v3)
  {
    v14 = 0;
    v15 = v5 - 1;
    do
    {
      v16 = 0;
      v17 = v15;
      while (1)
      {
        v18 = v16 + v17;
        if (v16 + v17 < 0 != __OFADD__(v16, v17))
          ++v18;
        v19 = v18 >> 1;
        v20 = (uint64_t)v18 >> 1;
        v21 = *(_DWORD *)(v8 + 100 * v19);
        if (v21 == v13)
          break;
        if (v21 >= v13)
          v17 = v20 - 1;
        else
          v16 = v20 + 1;
        if (v16 > v17)
        {
          LODWORD(v22) = 1;
          v23 = v3;
          goto LABEL_27;
        }
      }
      v24 = v8 + 100 * (int)v20;
      v25 = *(_DWORD *)(v24 + 4);
      v23 = (const __int32 *)(v24 + 4);
      if (v25)
      {
        v22 = 0;
        do
        {
          v26 = *(_DWORD *)(v8 + 8 + 100 * (int)v20 + 4 * v22);
          v27 = v22++;
          if (v26)
            v28 = v27 >= 0x17;
          else
            v28 = 1;
        }
        while (!v28);
      }
      else
      {
        LODWORD(v22) = 0;
      }
LABEL_27:
      v29 = v22 + v14;
      if (v10 <= (int)v22 + v14)
      {
        v10 = v29 + v34;
        v30 = reallocf(v12, 4 * (v29 + v34));
        if (!v30)
          goto LABEL_37;
        v12 = v30;
      }
      wcsncpy((__int32 *)v12 + v14, v23, v22);
      v31 = v3[1];
      ++v3;
      v13 = v31;
      v14 += v22;
    }
    while (v31);
    v32 = v29;
  }
  else
  {
    v32 = 0;
  }
  *((_DWORD *)v12 + v32) = 0;
  return (__int32 *)v12;
}

__int32 *__collate_wcsdup(const __int32 *a1)
{
  size_t v2;
  __int32 *v3;
  __int32 *v4;

  v2 = wcslen(a1);
  v3 = (__int32 *)malloc_type_malloc(4 * v2 + 4, 0x100004052888210uLL);
  if (!v3)
    __collate_err(71);
  v4 = v3;
  wcscpy(v3, a1);
  return v4;
}

void __collate_err(int a1)
{
  int v2;

  v2 = *__error();
  getprogname();
  _platform_strlen();
  write_NOCANCEL();
  write_NOCANCEL();
  _platform_strlen();
  write_NOCANCEL();
  write_NOCANCEL();
  strerror(v2);
  _platform_strlen();
  write_NOCANCEL();
  write_NOCANCEL();
  exit(a1);
}

__int32 *__collate_lookup_l(__int32 *result, _DWORD *a2, int *a3, int *a4, _QWORD *a5)
{
  __int32 v8;
  int *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  int v19;

  v8 = *result;
  if (!*result)
  {
    *a2 = 0;
    *a3 = 0;
    goto LABEL_10;
  }
  v9 = result;
  v10 = &__global_locale;
  if (a5 != (_QWORD *)-1)
    v10 = a5;
  if (a5)
    v11 = v10;
  else
    v11 = &__c_locale;
  v12 = v11[165];
  if (*(_BYTE *)(v12 + 64))
  {
    v8 = 0;
    *a2 = 1;
    *a3 = *result;
LABEL_10:
    *a4 = v8;
    return result;
  }
  v19 = 0;
  *a2 = 1;
  result = (__int32 *)chainsearch(result, &v19, (uint64_t)v11);
  if (!result || result[24] < 0)
  {
    v14 = *v9;
    v15 = v11[165];
    if (*v9 > 255)
    {
      v17 = *(int **)(v15 + 88);
      if (v17[15] < 1 || (result = largesearch(*v9, (uint64_t)v11)) == 0)
      {
        v18 = v17[26];
        if (v18 < 0)
          v18 = v14 - v18;
        *a3 = v18;
        v8 = v17[27];
        if (v8 < 0)
          v8 = *v9 - v8;
        goto LABEL_10;
      }
      *a3 = result[1];
      v13 = result + 2;
    }
    else
    {
      v16 = *(_QWORD *)(v15 + 192);
      *a3 = *(_DWORD *)(v16 + 40 * v14);
      v13 = (int *)(v16 + 40 * *v9 + 4);
    }
  }
  else
  {
    *a2 = v19;
    *a3 = result[24];
    v13 = result + 25;
  }
  *a4 = *v13;
  if ((*a3 & 0x80000000) == 0)
  {
    result = (__int32 *)lookup_substsearch(v12, *a3, 0);
    if (result)
      *a3 = *result;
  }
  if ((*a4 & 0x80000000) == 0)
  {
    result = (__int32 *)lookup_substsearch(v12, *a4, 1);
    if (result)
    {
      v8 = result[1];
      goto LABEL_10;
    }
  }
  return result;
}

const __int32 *chainsearch(__int32 *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  const __int32 *v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  size_t v17;

  v3 = *(_QWORD *)(a3 + 1320);
  v4 = *(_DWORD *)(*(_QWORD *)(v3 + 88) + 56);
  v5 = v4 - 1;
  if (v4 < 1)
    return 0;
  v8 = 0;
  v9 = *(_QWORD *)(v3 + 176);
  while (1)
  {
    v10 = v5 + v8;
    if (v5 + v8 < 0 != __OFADD__(v5, v8))
      ++v10;
    v11 = (uint64_t)v10 >> 1;
    v12 = (const __int32 *)(v9 + 136 * (v10 >> 1));
    v13 = *a1 - *v12;
    if (*a1 == *v12)
    {
      if (*v12)
      {
        v14 = 0;
        do
        {
          v15 = v14 + 1;
          if (*(_DWORD *)(v9 + 4 + 136 * (int)v11 + 4 * v14))
            v16 = v14 >= 0x17;
          else
            v16 = 1;
          ++v14;
        }
        while (!v16);
        v17 = v15;
      }
      else
      {
        v17 = 0;
      }
      v13 = wcsncmp(a1, v12, v17);
      if (!v13)
        break;
    }
    if (v13 <= 0)
      v5 = v11 - 1;
    else
      v8 = v11 + 1;
    if (v8 > v5)
      return 0;
  }
  *a2 = v17;
  return v12;
}

_DWORD *largesearch(int a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  BOOL v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  _DWORD *v10;

  v2 = *(_QWORD *)(a2 + 1320);
  v3 = *(_DWORD *)(*(_QWORD *)(v2 + 88) + 60);
  v4 = __OFSUB__(v3, 1);
  v5 = v3 - 1;
  if (v5 < 0 != v4)
    return 0;
  v6 = 0;
  v7 = *(_QWORD *)(v2 + 184);
  while (1)
  {
    v8 = v5 + v6;
    if (v5 + v6 < 0 != __OFADD__(v5, v6))
      ++v8;
    v9 = v8 >> 1;
    v10 = (_DWORD *)(v7 + 44 * (v8 >> 1));
    if (*v10 == a1)
      break;
    if (*v10 >= a1)
      v5 = v9 - 1;
    else
      v6 = v9 + 1;
    if (v6 > v5)
      return 0;
  }
  return v10;
}

uint64_t lookup_substsearch(uint64_t a1, int a2, int a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(unsigned __int8 **)(a1 + 88);
  if (!*(_DWORD *)&v3[4 * a3 + 64])
    return 0;
  v4 = 0;
  if ((a2 & 0x40000000) != 0 && *v3 > a3)
  {
    v5 = *(_QWORD *)(a1 + 8 * a3 + 96);
    if (*(_DWORD *)(v5 + 100 * (int)(a2 & 0xBFFFFFFF)) != a2)
      lookup_substsearch_cold_1();
    return v5 + 100 * (int)(a2 & 0xBFFFFFFF) + 4;
  }
  return v4;
}

int *__collate_lookup(int *result, _DWORD *a2, int *a3, int *a4)
{
  uint64_t v7;
  _xlocale *v8;
  _xlocale *v9;
  int *v10;
  int v11;
  __int32 *v12;
  __int32 *v13;

  v7 = __locale_key;
  v8 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v7);
  if (v8)
    v9 = v8;
  else
    v9 = (_xlocale *)&__global_locale;
  if (*(_BYTE *)result)
  {
    v10 = result;
    if (*(_BYTE *)(*((_QWORD *)v9 + 165) + 64) || (v12 = __collate_mbstowcs((char *)result, v9)) == 0)
    {
      *a2 = 1;
      *a3 = *(unsigned __int8 *)v10;
      *a4 = 0;
      v11 = *__error();
    }
    else
    {
      v13 = v12;
      __collate_lookup_l(v12, a2, a3, a4, v9);
      v11 = *__error();
      free(v13);
    }
    result = __error();
    *result = v11;
  }
  else
  {
    *a2 = 0;
    *a3 = 0;
    *a4 = 0;
  }
  return result;
}

__int32 *__collate_mbstowcs(char *a1, locale_t a2)
{
  size_t v3;
  size_t v4;
  __int32 *v5;
  __int32 *v6;
  char *v8;
  char *v9;
  mbstate_t v10;

  v8 = a1;
  v9 = a1;
  memset(&v10, 0, sizeof(v10));
  v3 = mbsrtowcs_l(0, (const char **)&v8, 0, &v10, a2);
  if (v3 == -1)
    return 0;
  v4 = v3;
  v5 = (__int32 *)malloc_type_malloc(4 * v3 + 4, 0x100004052888210uLL);
  if (!v5)
    __collate_err(71);
  v6 = v5;
  memset(&v10, 0, sizeof(v10));
  mbsrtowcs_l(v5, (const char **)&v9, v4, &v10, a2);
  v6[v4] = 0;
  return v6;
}

int *__collate_lookup_which(__int32 *a1, _DWORD *a2, int *a3, int a4, uint64_t a5)
{
  uint64_t v10;
  int *result;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  v17 = 0;
  v10 = *(_QWORD *)(a5 + 1320);
  *a2 = 1;
  result = (int *)chainsearch(a1, &v17, a5);
  if (!result || (v12 = result[a4 + 24], v12 < 0))
  {
    v13 = *a1;
    v14 = *(_QWORD *)(a5 + 1320);
    if (*a1 > 255)
    {
      v15 = *(_QWORD *)(v14 + 88);
      if (*(int *)(v15 + 60) < 1 || (result = largesearch(v13, a5)) == 0)
      {
        if ((*(_BYTE *)(v15 + a4 + 1) & 8) != 0)
          v16 = v13 & 0xFFFFFF;
        else
          v16 = *(_DWORD *)(v15 + 4 * a4 + 104);
        goto LABEL_11;
      }
      v12 = result[a4 + 1];
    }
    else
    {
      v12 = *(_DWORD *)(*(_QWORD *)(v14 + 192) + 40 * v13 + 4 * a4);
    }
  }
  else
  {
    *a2 = v17;
  }
  *a3 = v12;
  result = (int *)lookup_substsearch(v10, v12, 0);
  if (!result)
    return result;
  v16 = *result;
LABEL_11:
  *a3 = v16;
  return result;
}

int *__collate_xfrm(__int32 *a1, _OWORD *a2, uint64_t a3)
{
  unsigned __int8 *v3;
  uint64_t v7;
  __int32 *v8;
  __int32 *v9;
  unsigned __int8 v10;
  int v11;
  __int32 *v12;
  int v13;
  const __int32 *v14;
  __int32 *v15;
  __int32 *v16;
  __int32 v17;
  int v19;
  size_t v20;
  void *v21;
  int *v22;
  int v23;
  int v24;
  int *result;
  uint64_t v26;

  v26 = 0;
  v3 = *(unsigned __int8 **)(*(_QWORD *)(a3 + 1320) + 88);
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  if (*v3)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = v3[v7 + 1];
      if (!v7 || (v3[52] & 1) == 0)
      {
        v11 = *__error();
        free(v9);
        *__error() = v11;
        v9 = __collate_substitute(a1, v7, a3);
      }
      if ((v10 & 2) != 0)
      {
        v13 = *__error();
        free(v8);
        *__error() = v13;
        v14 = v9 ? v9 : a1;
        v12 = __collate_wcsdup(v14);
        v15 = &v12[wcslen(v12) - 1];
        if (v12 < v15)
        {
          v16 = v12 + 1;
          do
          {
            v17 = *(v16 - 1);
            *(v16 - 1) = *v15;
            *v15-- = v17;
          }
          while (v16++ < v15);
        }
        v8 = v12;
      }
      else
      {
        v12 = v9 ? v9 : a1;
      }
      v19 = *__error();
      v20 = wcslen(v12);
      v21 = malloc_type_malloc(4 * v20 + 4, 0x100004052888210uLL);
      *((_QWORD *)a2 + v7) = v21;
      if (!v21)
        break;
      *__error() = v19;
      v22 = (int *)*((_QWORD *)a2 + v7);
      if ((v10 & 4) != 0)
      {
        while (*v12)
        {
          __collate_lookup_which(v12, &v26, (int *)&v26 + 1, v7, a3);
          v23 = HIDWORD(v26);
          if (SHIDWORD(v26) <= 0)
          {
            if (v26 < 0)
            {
LABEL_32:
              v19 = 22;
              goto LABEL_33;
            }
            v23 = 0xFFFFFF;
            HIDWORD(v26) = 0xFFFFFF;
          }
          v12 += (int)v26;
          *v22++ = v23;
        }
      }
      else
      {
        while (*v12)
        {
          __collate_lookup_which(v12, &v26, (int *)&v26 + 1, v7, a3);
          v12 += (int)v26;
          if (SHIDWORD(v26) > 0)
          {
            *v22++ = HIDWORD(v26);
          }
          else if (v26 < 0)
          {
            goto LABEL_32;
          }
        }
      }
      *v22 = 0;
      if (++v7 >= (unint64_t)*v3)
        goto LABEL_35;
    }
LABEL_33:
    *__error() = v19;
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
LABEL_35:
  v24 = *__error();
  free(v9);
  free(v8);
  result = __error();
  *result = v24;
  return result;
}

uint64_t __collate_collating_symbol(__int32 *a1, unint64_t a2, char *a3, size_t a4, mbstate_t *a5, locale_t a6)
{
  size_t v6;
  const char *v7;
  uint64_t v10;
  uint64_t v13;
  __int32 *v14;
  size_t v15;
  __int32 v16;
  uint64_t v17;
  size_t v18;
  _DWORD *v19;
  int v21;
  __int32 v22;
  __int32 v23[24];

  v6 = a4;
  v7 = a3;
  if (!*(_BYTE *)(*((_QWORD *)a6 + 165) + 64))
  {
    if (a4)
    {
      v13 = 0;
      v22 = 0;
      v14 = v23;
      do
      {
        v15 = mbrtowc_l(&v22, v7, v6, a5, a6);
        if (v15 > 0xFFFFFFFFFFFFFFFDLL)
          return -1;
        if (!v15)
          break;
        if (v13 == 24)
          return -1;
        *v14++ = v22;
        v7 += v15;
        ++v13;
        v6 -= v15;
      }
      while (v6);
      if (v13 - 1 >= a2)
        return -1;
      if (v13 == 1)
      {
        v16 = v23[0];
        v17 = *((_QWORD *)a6 + 165);
        if (v23[0] > 255)
        {
          if (*(int *)(*(_QWORD *)(v17 + 88) + 60) < 1)
            return 0;
          v19 = largesearch(v23[0], (uint64_t)a6);
          if (!v19 || (v19[1] & 0x80000000) != 0)
            return 0;
        }
        else if ((*(_DWORD *)(*(_QWORD *)(v17 + 192) + 40 * v23[0]) & 0x80000000) != 0)
        {
          return 0;
        }
        *a1 = v16;
        return 1;
      }
      *v14 = 0;
      if (*(int *)(*(_QWORD *)(*((_QWORD *)a6 + 165) + 88) + 56) >= 1)
      {
        v21 = 0;
        if (chainsearch(v23, &v21, (uint64_t)a6))
        {
          v10 = v21;
          if (v21 >= a2)
            v18 = a2;
          else
            v18 = v21;
          wcsncpy(a1, v23, v18);
          return v10;
        }
      }
      return 0;
    }
    return -1;
  }
  if (!a2)
    return -1;
  if (a4 != 1 || *a3 < 0)
    return 0;
  *a1 = *a3;
  return 1;
}

uint64_t __collate_equiv_class(char *a1, size_t a2, mbstate_t *a3, _xlocale *a4)
{
  uint64_t result;
  size_t v5;
  uint64_t v9;
  __int32 *v10;
  size_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  __int32 v18;
  __int32 v19[24];

  if (*(_BYTE *)(*((_QWORD *)a4 + 165) + 64))
    return 0;
  v5 = a2;
  if (!a2)
    return 0xFFFFFFFFLL;
  v9 = 0;
  v18 = 0;
  v10 = v19;
  do
  {
    v11 = mbrtowc_l(&v18, a1, v5, a3, a4);
    if (v11 > 0xFFFFFFFFFFFFFFFDLL)
      return 0xFFFFFFFFLL;
    if (!v11)
      break;
    if (v9 == 24)
      return 0xFFFFFFFFLL;
    *v10++ = v18;
    a1 += v11;
    ++v9;
    v5 -= v11;
  }
  while (v5);
  if (!v9)
    return 0xFFFFFFFFLL;
  if (v9 == 1)
  {
    v12 = *((_QWORD *)a4 + 165);
    if (v19[0] <= 255)
    {
      v13 = (int *)(*(_QWORD *)(v12 + 192) + 40 * v19[0]);
      goto LABEL_25;
    }
    if (*(int *)(*(_QWORD *)(v12 + 88) + 60) < 1)
      return 0;
    result = (uint64_t)largesearch(v19[0], (uint64_t)a4);
    if (result)
    {
      v13 = (int *)(result + 4);
LABEL_25:
      v16 = *v13;
      if (v16)
        return v16 & ~(v16 >> 31);
      else
        return 1;
    }
  }
  else
  {
    *v10 = 0;
    if (*(int *)(*(_QWORD *)(*((_QWORD *)a4 + 165) + 88) + 56) < 1)
      return 0;
    result = (uint64_t)chainsearch(v19, &v17, (uint64_t)a4);
    if (result)
    {
      v14 = *(_DWORD *)(result + 96);
      v15 = v14 == 0;
      if (v14 < 0)
        v14 = -v14;
      if (v15)
        return 1;
      else
        return v14;
    }
  }
  return result;
}

unint64_t __collate_equiv_match(int a1, uint64_t a2, unint64_t a3, __int32 a4, char *a5, size_t a6, mbstate_t *a7, _QWORD *a8, locale_t a9)
{
  unint64_t v9;
  _QWORD *v11;
  size_t v13;
  const char *v14;
  uint64_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int32 *v22;
  uint64_t v23;
  size_t v24;
  const char *v25;
  size_t v26;
  const __int32 *v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  _DWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  size_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v50;
  int v51;
  __int32 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int32 v61;
  int v62;

  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  if (*(_BYTE *)(*((_QWORD *)a9 + 165) + 64))
    return -1;
  v11 = a8;
  v13 = a6;
  v14 = a5;
  v16 = a2;
  if (a1 == 1)
    v17 = 0;
  else
    v17 = a1;
  v50 = v17;
  if (a7)
  {
    v18 = *((_OWORD *)&a7->_mbstateL + 5);
    v57 = *((_OWORD *)&a7->_mbstateL + 4);
    v58 = v18;
    v19 = *((_OWORD *)&a7->_mbstateL + 7);
    v59 = *((_OWORD *)&a7->_mbstateL + 6);
    v60 = v19;
    v20 = *((_OWORD *)&a7->_mbstateL + 1);
    v53 = *(_OWORD *)a7->__mbstate8;
    v54 = v20;
    v21 = *((_OWORD *)&a7->_mbstateL + 3);
    v55 = *((_OWORD *)&a7->_mbstateL + 2);
    v56 = v21;
  }
  v22 = &v61;
  if (a4)
  {
    v22 = &v62;
    v61 = a4;
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  v52 = 0;
  if (a6)
  {
    v23 = 0;
    v24 = a6;
    v25 = a5;
    do
    {
      if (v9 >= *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a9 + 165) + 88) + 11))
        break;
      v26 = mbrtowc_l(&v52, v25, v24, a7, a9);
      if (v26 + 2 < 3)
        break;
      *v22++ = v52;
      v25 += v26;
      v23 += v26;
      ++v9;
      v24 -= v26;
    }
    while (v24);
    v51 = 0;
    *v22 = 0;
    v16 = a2;
    if (v9 < 2)
    {
      v11 = a8;
    }
    else
    {
      v27 = chainsearch(&v61, &v51, (uint64_t)a9);
      v11 = a8;
      if (v27)
      {
        v28 = v27[24];
        if (v28 < 0)
          v28 = -v28;
        if (v28 == v50)
        {
          v29 = v51;
          goto LABEL_32;
        }
      }
    }
  }
  else
  {
    v23 = 0;
    *v22 = 0;
  }
  v30 = *((_QWORD *)a9 + 165);
  if (v61 > 255)
  {
    if (*(int *)(*(_QWORD *)(v30 + 88) + 60) < 1)
      goto LABEL_42;
    v32 = largesearch(v61, (uint64_t)a9);
    if (!v32)
      goto LABEL_42;
    v31 = v32[1];
  }
  else
  {
    v31 = *(_DWORD *)(*(_QWORD *)(v30 + 192) + 40 * v61);
  }
  if (v50 == v31)
  {
    v29 = 1;
LABEL_32:
    if (v9 > v29)
    {
      v9 = v29;
      if (a7)
      {
        v33 = v58;
        *((_OWORD *)&a7->_mbstateL + 4) = v57;
        *((_OWORD *)&a7->_mbstateL + 5) = v33;
        v34 = v60;
        *((_OWORD *)&a7->_mbstateL + 6) = v59;
        *((_OWORD *)&a7->_mbstateL + 7) = v34;
        v35 = v54;
        *(_OWORD *)a7->__mbstate8 = v53;
        *((_OWORD *)&a7->_mbstateL + 1) = v35;
        v36 = v56;
        *((_OWORD *)&a7->_mbstateL + 2) = v55;
        *((_OWORD *)&a7->_mbstateL + 3) = v36;
      }
      v37 = v29 - (a4 != 0);
      if (v37 < 1)
      {
        v23 = 0;
        if (v16)
          goto LABEL_39;
        goto LABEL_47;
      }
      v23 = 0;
      do
      {
        --v37;
        v38 = mbrtowc_l(&v52, v14, v13, a7, a9);
        v14 += v38;
        v23 += v38;
        v13 -= v38;
      }
      while (v37);
    }
    if (v16)
    {
LABEL_39:
      if (v9 > a3)
      {
        if (a7)
        {
          v39 = v58;
          *((_OWORD *)&a7->_mbstateL + 4) = v57;
          *((_OWORD *)&a7->_mbstateL + 5) = v39;
          v40 = v60;
          *((_OWORD *)&a7->_mbstateL + 6) = v59;
          *((_OWORD *)&a7->_mbstateL + 7) = v40;
          v41 = v54;
          *(_OWORD *)a7->__mbstate8 = v53;
          *((_OWORD *)&a7->_mbstateL + 1) = v41;
          v42 = v56;
          *((_OWORD *)&a7->_mbstateL + 2) = v55;
          *((_OWORD *)&a7->_mbstateL + 3) = v42;
        }
        return -1;
      }
      if (v9)
      {
        _platform_memmove();
        v9 = 0;
      }
    }
LABEL_47:
    if (v11)
      *v11 = v23;
    return v9;
  }
LABEL_42:
  v9 = 0;
  if (a7)
  {
    v43 = v58;
    *((_OWORD *)&a7->_mbstateL + 4) = v57;
    *((_OWORD *)&a7->_mbstateL + 5) = v43;
    v44 = v60;
    *((_OWORD *)&a7->_mbstateL + 6) = v59;
    *((_OWORD *)&a7->_mbstateL + 7) = v44;
    v45 = v54;
    *(_OWORD *)a7->__mbstate8 = v53;
    *((_OWORD *)&a7->_mbstateL + 1) = v45;
    v46 = v56;
    *((_OWORD *)&a7->_mbstateL + 2) = v55;
    *((_OWORD *)&a7->_mbstateL + 3) = v46;
  }
  return v9;
}

uint64_t __collate_equiv_value(uint64_t a1, const __int32 *a2, size_t a3)
{
  uint64_t v5;
  uint64_t result;
  int v7;
  int *v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  __int32 v13[24];

  if (a3 - 24 < 0xFFFFFFFFFFFFFFE9)
    return 0xFFFFFFFFLL;
  v5 = *(_QWORD *)(a1 + 1320);
  if (*(_BYTE *)(v5 + 64))
  {
    if (a3 == 1)
    {
      if (*a2 >= 256)
        return 0xFFFFFFFFLL;
      else
        return *(unsigned int *)a2;
    }
    return 0xFFFFFFFFLL;
  }
  if (a3 == 1)
  {
    v7 = *a2;
    if (*a2 <= 255)
    {
      v8 = (int *)(*(_QWORD *)(v5 + 192) + 40 * v7);
LABEL_22:
      v11 = *v8;
      if (v11)
        return v11 & ~(v11 >> 31);
      else
        return 1;
    }
    if (*(int *)(*(_QWORD *)(v5 + 88) + 60) >= 1)
    {
      result = (uint64_t)largesearch(v7, a1);
      if (!result)
        return result;
      v8 = (int *)(result + 4);
      goto LABEL_22;
    }
    return 0;
  }
  if (*(int *)(*(_QWORD *)(v5 + 88) + 56) < 1)
    return 0;
  wcsncpy(v13, a2, a3);
  v13[a3] = 0;
  result = (uint64_t)chainsearch(v13, &v12, a1);
  if (result)
  {
    v9 = *(_DWORD *)(result + 96);
    v10 = v9 == 0;
    if (v9 < 0)
      v9 = -v9;
    if (v10)
      return 1;
    else
      return v9;
  }
  return result;
}

uint64_t __collate_range_cmp(int a1, int a2, _xlocale *a3)
{
  __collate_range_cmp_s1 = a1;
  __collate_range_cmp_s2 = a2;
  return wcscoll_l(&__collate_range_cmp_s1, &__collate_range_cmp_s2, a3);
}

uint64_t _EUC_CN_init(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[15];
  *(_QWORD *)(v1 + 3184) = 0;
  *(_DWORD *)(v1 + 3192) = 0;
  a1[11] = _EUC_CN_mbsnrtowcs;
  a1[12] = _EUC_CN_wcrtomb;
  a1[13] = _EUC_CN_wcsnrtombs;
  a1[9] = _EUC_CN_mbrtowc;
  a1[10] = _EUC_mbsinit;
  a1[8] = 0x8000000002;
  return 0;
}

uint64_t _EUC_CN_mbrtowc(_DWORD *a1, const char *a2, unint64_t a3, int *a4, uint64_t a5)
{
  return _EUC_mbrtowc_impl(a1, a2, a3, a4, 0, 0, 0, 0, a5);
}

uint64_t _EUC_CN_wcrtomb(_BYTE *a1, int a2, uint64_t a3)
{
  return _EUC_wcrtomb_impl(a1, a2, a3, 0, 0, 0, 0);
}

BOOL _EUC_mbsinit(uint64_t a1)
{
  return !a1 || *(_DWORD *)(a1 + 4) == 0;
}

uint64_t _EUC_KR_init(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[15];
  *(_QWORD *)(v1 + 3184) = 0;
  *(_DWORD *)(v1 + 3192) = 0;
  a1[11] = _EUC_KR_mbsnrtowcs;
  a1[12] = _EUC_KR_wcrtomb;
  a1[13] = _EUC_KR_wcsnrtombs;
  a1[9] = _EUC_KR_mbrtowc;
  a1[10] = _EUC_mbsinit;
  a1[8] = 0x8000000002;
  return 0;
}

uint64_t _EUC_KR_mbrtowc(_DWORD *a1, const char *a2, unint64_t a3, int *a4, uint64_t a5)
{
  return _EUC_mbrtowc_impl(a1, a2, a3, a4, 0, 0, 0, 0, a5);
}

uint64_t _EUC_KR_wcrtomb(_BYTE *a1, int a2, uint64_t a3)
{
  return _EUC_wcrtomb_impl(a1, a2, a3, 0, 0, 0, 0);
}

uint64_t _EUC_JP_init(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[15];
  *(_QWORD *)(v1 + 3184) = 0;
  *(_DWORD *)(v1 + 3192) = 0;
  a1[11] = _EUC_JP_mbsnrtowcs;
  a1[12] = _EUC_JP_wcrtomb;
  a1[13] = _EUC_JP_wcsnrtombs;
  a1[9] = _EUC_JP_mbrtowc;
  a1[10] = _EUC_mbsinit;
  a1[8] = 0x8000000003;
  return 0;
}

uint64_t _EUC_JP_mbrtowc(_DWORD *a1, const char *a2, unint64_t a3, int *a4, uint64_t a5)
{
  return _EUC_mbrtowc_impl(a1, a2, a3, a4, 142, 2, 143, 3, a5);
}

uint64_t _EUC_JP_wcrtomb(_BYTE *a1, int a2, uint64_t a3)
{
  return _EUC_wcrtomb_impl(a1, a2, a3, 142, 2, 143, 3);
}

uint64_t _EUC_init(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[15];
  *(_QWORD *)(v1 + 3184) = 0;
  *(_DWORD *)(v1 + 3192) = 0;
  a1[11] = _EUC_JP_mbsnrtowcs;
  a1[12] = _EUC_JP_wcrtomb;
  a1[13] = _EUC_JP_wcsnrtombs;
  a1[9] = _EUC_JP_mbrtowc;
  a1[10] = _EUC_mbsinit;
  a1[8] = 0x10000000003;
  return 0;
}

uint64_t _EUC_TW_init(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[15];
  *(_QWORD *)(v1 + 3184) = 0;
  *(_DWORD *)(v1 + 3192) = 0;
  a1[11] = _EUC_TW_mbsnrtowcs;
  a1[12] = _EUC_TW_wcrtomb;
  a1[13] = _EUC_TW_wcsnrtombs;
  a1[9] = _EUC_TW_mbrtowc;
  a1[10] = _EUC_mbsinit;
  a1[8] = 0x8000000004;
  return 0;
}

uint64_t _EUC_TW_mbrtowc(_DWORD *a1, const char *a2, unint64_t a3, int *a4, uint64_t a5)
{
  return _EUC_mbrtowc_impl(a1, a2, a3, a4, 142, 4, 0, 0, a5);
}

uint64_t _EUC_TW_wcrtomb(_BYTE *a1, int a2, uint64_t a3)
{
  return _EUC_wcrtomb_impl(a1, a2, a3, 142, 4, 0, 0);
}

uint64_t _EUC_mbrtowc_impl(_DWORD *a1, const char *a2, unint64_t a3, int *a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  int v9;
  int *v10;
  int v11;
  const char *v14;
  _DWORD *v15;
  int v16;
  unint64_t v17;
  int v18;
  unsigned int v19;

  v9 = a4[1];
  if (v9 < 0 || v9 > *(_DWORD *)(*(_QWORD *)(a9 + 1328) + 64))
  {
    v10 = __error();
    v11 = 22;
LABEL_4:
    *v10 = v11;
    return -1;
  }
  if (!a2)
    a3 = 1;
  if (a2)
    v14 = a2;
  else
    v14 = "";
  if (a2)
    v15 = a1;
  else
    v15 = 0;
  if (!a3)
    return -2;
  if (v9)
  {
    v16 = *a4;
  }
  else
  {
    v19 = *(unsigned __int8 *)v14;
    if ((*v14 & 0x80000000) == 0)
    {
      if (v15)
        *v15 = v19;
      return v19 != 0;
    }
    if (v19 <= 0xA0)
    {
      v9 = a6;
      if (v19 != a5)
      {
        v9 = a8;
        if (v19 != a7)
        {
          v10 = __error();
          v11 = 92;
          goto LABEL_4;
        }
      }
    }
    else
    {
      v9 = 2;
    }
    v16 = 0;
    *a4 = 0;
  }
  if (a3 >= v9)
    a3 = v9;
  if (a3)
  {
    v17 = a3;
    do
    {
      v18 = *(unsigned __int8 *)v14++;
      v16 = v18 | (v16 << 8);
      --v17;
    }
    while (v17);
  }
  if (v9 > (int)a3)
  {
    *a4 = v16;
    a4[1] = v9 - a3;
    *__error() = 92;
    return -2;
  }
  if (v15)
    *v15 = v16;
  a4[1] = 0;
  if (!v16)
    return 0;
  return v9;
}

uint64_t _EUC_wcrtomb_impl(_BYTE *a1, int a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  int *v7;
  int v8;
  uint64_t result;
  int v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  unint64_t v17;

  if (*(_DWORD *)(a3 + 4))
  {
    v7 = __error();
    v8 = 22;
LABEL_3:
    *v7 = v8;
    return -1;
  }
  if (!a1)
    return 1;
  if (a2 <= 0x7F)
  {
    *a1 = a2;
    return 1;
  }
  if (a2 <= 0xFF)
    v11 = 1;
  else
    v11 = 2;
  if (HIWORD(a2))
    v12 = 3;
  else
    v12 = v11;
  v13 = __locale_key;
  v14 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v13);
  if (HIBYTE(a2))
    result = 4;
  else
    result = v12;
  if (v14)
    v15 = v14;
  else
    v15 = &__global_locale;
  if ((int)result > *(_DWORD *)(v15[166] + 64))
  {
LABEL_21:
    v7 = __error();
    v8 = 92;
    goto LABEL_3;
  }
  if ((a2 - 0x10000) <= 0xFFFFA0FF)
  {
    v16 = (a2 >> (8 * result - 8));
    if (v16 == a4)
    {
      if ((_DWORD)result != a5)
        goto LABEL_21;
    }
    else if (v16 != a6 || (_DWORD)result != a7)
    {
      goto LABEL_21;
    }
  }
  v17 = result + 1;
  do
  {
    a1[(v17 - 2)] = a2;
    a2 >>= 8;
    --v17;
  }
  while (v17 > 1);
  return result;
}

unsigned __int8 *__fix_locale_grouping_str(unsigned __int8 *result)
{
  unsigned __int8 v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 v4;
  unsigned int v5;
  int v6;
  unsigned __int8 v7;

  if (!result)
    return (unsigned __int8 *)&nogrouping;
  v1 = *result;
  if (!*result)
    return (unsigned __int8 *)&nogrouping;
  v2 = result;
  v3 = result;
  while (v1 == 45)
  {
    v6 = *++v2;
    if (v6 != 49)
      return (unsigned __int8 *)&nogrouping;
    *v3++ = 127;
LABEL_16:
    v7 = *++v2;
    v1 = v7;
  }
  if (v1 == 59)
    goto LABEL_16;
  if (!v1)
  {
    *v3 = 0;
    return result;
  }
  if (v1 - 48 > 9)
    return (unsigned __int8 *)&nogrouping;
  v4 = v1 - 48;
  v5 = v2[1] - 48;
  if (v5 < 0xA)
    v4 = v5 + 10 * (v1 - 48);
  *v3 = v4;
  if (v4)
  {
    if (v5 < 0xA)
      ++v2;
    ++v3;
    goto LABEL_16;
  }
  if (v3 == result)
    return (unsigned __int8 *)&nogrouping;
  return result;
}

_BYTE *__fix_nogrouping(_BYTE *a1)
{
  _BYTE *result;

  result = &__nogrouping;
  if (a1)
  {
    if (*a1)
      return a1;
  }
  return result;
}

uint64_t _GB18030_init(_QWORD *a1)
{
  a1[12] = _GB18030_wcrtomb;
  a1[9] = _GB18030_mbrtowc;
  a1[10] = _GB18030_mbsinit;
  a1[8] = 0x8000000004;
  return 0;
}

uint64_t _GB18030_mbrtowc(unsigned int *a1, uint64_t a2, unint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  int *v5;
  int v6;
  uint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v4 = *a4;
  if (v4 >= 5)
  {
    v5 = __error();
    v6 = 22;
LABEL_3:
    *v5 = v6;
    return -1;
  }
  if (a3 >= 4)
    v9 = 4;
  else
    v9 = a3;
  if (a2)
    v10 = a1;
  else
    v10 = 0;
  if (a2)
    v11 = v9;
  else
    v11 = 1;
  if (v11 >= 4 - v4)
    v12 = 4 - v4;
  else
    v12 = v11;
  _platform_strncpy();
  v13 = *a4;
  v14 = v13 + v12;
  *a4 += v12;
  if (!(v13 + v12))
    return -2;
  v15 = *((unsigned __int8 *)a4 + 4);
  if ((char)a4[1] < 0)
  {
    if (v15 == 128 || v15 == 255)
      goto LABEL_26;
    if (v14 < 2)
      return -2;
    v18 = *((unsigned __int8 *)a4 + 5);
    if (*((char *)a4 + 5) < -1 || (v18 - 64) <= 0x3E)
    {
      v15 = v18 | (v15 << 8);
      v16 = 2;
      goto LABEL_19;
    }
    if ((v18 - 48) <= 9)
    {
      if (v14 < 3)
        return -2;
      v19 = *((unsigned __int8 *)a4 + 6);
      if ((v19 + 1) >= 0x82u)
      {
        if (v14 < 4)
          return -2;
        v20 = *((unsigned __int8 *)a4 + 7);
        if ((v20 - 58) >= 0xFFFFFFF6)
        {
          v15 = ((v18 & 0xFFFF80FF | ((v15 & 0x7F) << 8)) << 16) | (v19 << 8) | v20;
          v16 = 4;
          goto LABEL_19;
        }
      }
    }
LABEL_26:
    v5 = __error();
    v6 = 92;
    goto LABEL_3;
  }
  v16 = 1;
LABEL_19:
  if (v10)
    *v10 = v15;
  *a4 = 0;
  v17 = v16 - v13;
  if (!v15)
    return 0;
  return v17;
}

uint64_t _GB18030_wcrtomb(_BYTE *a1, unsigned int a2, _DWORD *a3)
{
  int *v3;
  int v4;

  if (!*a3)
  {
    if (a1)
    {
      if ((a2 & 0x80000000) != 0)
        goto LABEL_13;
      if ((a2 & 0x7F000000) != 0)
      {
        if (HIBYTE(a2) != 127)
        {
          *a1 = HIBYTE(a2) | 0x80;
          if ((HIWORD(a2) & 0xFE) - 58 >= 0xFFFFFFF6)
          {
            a1[1] = BYTE2(a2);
            if (BYTE1(a2) >= 0x81u && BYTE1(a2) != 255)
            {
              a1[2] = BYTE1(a2);
              if ((a2 & 0xFE) - 58 >= 0xFFFFFFF6)
              {
                a1[3] = a2;
                return 4;
              }
            }
          }
        }
        goto LABEL_13;
      }
      if ((a2 & 0xFF0000) != 0)
        goto LABEL_13;
      if ((a2 & 0xFF00) != 0)
      {
        if (BYTE1(a2) >= 0x81u && BYTE1(a2) != 255)
        {
          *a1 = BYTE1(a2);
          if ((a2 & 0xC0) != 0 && (a2 & 0x7F) != 0x7F)
          {
            a1[1] = a2;
            return 2;
          }
        }
        goto LABEL_13;
      }
      if (a2 > 0x7F)
      {
LABEL_13:
        v3 = __error();
        v4 = 92;
        goto LABEL_14;
      }
      *a1 = a2;
    }
    return 1;
  }
  v3 = __error();
  v4 = 22;
LABEL_14:
  *v3 = v4;
  return -1;
}

BOOL _GB18030_mbsinit(_DWORD *a1)
{
  return !a1 || *a1 == 0;
}

uint64_t _GB2312_init(_QWORD *a1)
{
  a1[12] = _GB2312_wcrtomb;
  a1[9] = _GB2312_mbrtowc;
  a1[10] = _GB2312_mbsinit;
  a1[8] = 0x8000000002;
  return 0;
}

uint64_t _GB2312_mbrtowc(int *a1, uint64_t a2, unint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  uint64_t v7;
  int *v8;
  unint64_t v9;
  int v10;
  _BYTE *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;

  v4 = *a4;
  if (v4 >= 3)
  {
    *__error() = 22;
    return -1;
  }
  if (a3 >= 2)
    v7 = 2;
  else
    v7 = a3;
  if (a2)
    v8 = a1;
  else
    v8 = 0;
  if (a2)
    v9 = v7;
  else
    v9 = 1;
  if (v9 >= 2 - v4)
    v10 = 2 - v4;
  else
    v10 = v9;
  v11 = a4 + 1;
  _platform_strncpy();
  v12 = *a4;
  *a4 += v10;
  if (!(v12 + v10))
    return -2;
  if ((*v11 + 1) < 0xA2u)
  {
    if ((char)*v11 < 0)
      return -1;
    v13 = 1;
    goto LABEL_24;
  }
  if ((v12 + v10) < 2)
    return -2;
  if ((*((_BYTE *)a4 + 5) + 1) < 0xA2u)
    return -1;
  v13 = 2;
LABEL_24:
  v14 = 0;
  v15 = v13 + 1;
  v16 = 4;
  do
  {
    v14 = *((unsigned __int8 *)a4 + v16) | (v14 << 8);
    --v15;
    ++v16;
  }
  while (v15 > 1);
  if (v8)
    *v8 = v14;
  *a4 = 0;
  v17 = v13 - v12;
  if (!v14)
    return 0;
  return v17;
}

uint64_t _GB2312_wcrtomb(_BYTE *a1, unsigned int a2, _DWORD *a3)
{
  if (*a3)
  {
    *__error() = 22;
    return -1;
  }
  if (!a1)
    return 1;
  if ((a2 & 0x8000) == 0)
  {
    *a1 = a2;
    return 1;
  }
  *(_WORD *)a1 = bswap32(a2) >> 16;
  return 2;
}

BOOL _GB2312_mbsinit(_DWORD *a1)
{
  return !a1 || *a1 == 0;
}

uint64_t _GBK_init(_QWORD *a1)
{
  a1[12] = _GBK_wcrtomb;
  a1[9] = _GBK_mbrtowc;
  a1[10] = _GBK_mbsinit;
  a1[8] = 0x8000000002;
  return 0;
}

uint64_t _GBK_mbrtowc(int *a1, const char *a2, unint64_t a3, int *a4)
{
  int v4;
  const char *v5;
  int *v7;
  int v8;
  int *v10;
  int v11;

  v4 = *a4;
  if (*a4 >= 0x100)
  {
    v10 = __error();
    v11 = 22;
LABEL_18:
    *v10 = v11;
    return -1;
  }
  if (a2)
    v5 = a2;
  else
    v5 = "";
  if (!a2)
    a3 = 1;
  if (a2)
    v7 = a1;
  else
    v7 = 0;
  if (!a3)
    return -2;
  v8 = *(unsigned __int8 *)v5;
  if (v4)
  {
    if (*v5)
    {
      if (v7)
        *v7 = v8 | (v4 << 8);
      *a4 = 0;
      return 1;
    }
    goto LABEL_31;
  }
  if ((v8 + 127) > 0x7Du)
  {
    if (v7)
      *v7 = v8;
    return v8 != 0;
  }
  else
  {
    if (a3 <= 1)
    {
      *a4 = v8;
      return -2;
    }
    if (!v5[1])
    {
LABEL_31:
      v10 = __error();
      v11 = 92;
      goto LABEL_18;
    }
    if (v7)
      *v7 = *((unsigned __int8 *)v5 + 1) | (v8 << 8);
    return 2;
  }
}

uint64_t _GBK_wcrtomb(_BYTE *a1, unsigned int a2, _DWORD *a3)
{
  if (*a3)
  {
    *__error() = 22;
    return -1;
  }
  if (!a1)
    return 1;
  if ((a2 & 0x8000) == 0)
  {
    *a1 = a2;
    return 1;
  }
  *(_WORD *)a1 = bswap32(a2) >> 16;
  return 2;
}

BOOL _GBK_mbsinit(_DWORD *a1)
{
  return !a1 || *a1 == 0;
}

uint64_t __part_load_locale(uint64_t a1, _BYTE *a2, void **a3, const char *a4, int a5, int a6, _QWORD *a7)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  _BYTE *v18;
  off_t st_size;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t result;
  uint64_t v25;
  _QWORD *v26;
  stat v27;
  char __s1[1024];

  memset(&v27, 0, sizeof(v27));
  v13 = _platform_strlen();
  _platform_strcpy();
  *(_WORD *)&__s1[_platform_strlen()] = 47;
  strcat(__s1, a4);
  v14 = __open_path_locale(__s1);
  if (v14 < 0)
    return 0xFFFFFFFFLL;
  if (fstat(v14, &v27))
  {
LABEL_21:
    v23 = *__error();
    close_NOCANCEL();
    *__error() = v23;
    return 0xFFFFFFFFLL;
  }
  if (v27.st_size < 1)
  {
    v21 = 79;
LABEL_20:
    *__error() = v21;
    goto LABEL_21;
  }
  v15 = v13 + 1;
  v16 = (char *)malloc_type_malloc(v27.st_size + v13 + 1, 0x5EABB9ABuLL);
  if (!v16)
  {
    v21 = 12;
    goto LABEL_20;
  }
  v17 = v16;
  v18 = (_BYTE *)(_platform_strcpy() + v15);
  st_size = v27.st_size;
  if (read_NOCANCEL() != v27.st_size)
  {
LABEL_19:
    v21 = *__error();
    free(v17);
    goto LABEL_20;
  }
  if (v18[st_size - 1] != 10)
    goto LABEL_18;
  if (st_size < 1)
  {
    v20 = 0;
  }
  else
  {
    v20 = 0;
    do
    {
      if (*v18 == 10)
      {
        *v18 = 0;
        ++v20;
      }
      ++v18;
      --st_size;
    }
    while (st_size);
  }
  v22 = a5;
  if (v20 < a5)
  {
    v22 = v20;
    if (v20 < a6)
    {
LABEL_18:
      *__error() = 79;
      goto LABEL_19;
    }
  }
  close_NOCANCEL();
  if (*a3)
    free(*a3);
  *a3 = v17;
  if (v22 >= 1)
  {
    v25 = v22;
    v26 = a7;
    do
    {
      v17 += _platform_strlen() + 1;
      *v26++ = v17;
      --v25;
    }
    while (v25);
  }
  if (v22 < a5)
    _platform_bzero();
  result = 0;
  *a2 = 1;
  return result;
}

void destruct_ldpart(void **a1)
{
  if (a1)
    free(a1[8]);
  free(a1);
}

uint64_t __messages_load_locale(uint64_t a1, uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  void (*v10)(void);
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void (*v14)(void);
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  void (*v19)(void);
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  void (*v23)(void);
  unsigned int *v24;
  unsigned int v25;

  if (!_platform_strcmp() || !_platform_strcmp() || !_platform_strncmp())
  {
    *(_BYTE *)(a2 + 1312) = 0;
    v16 = *(_QWORD *)(a2 + 1360);
    if (v16)
    {
      do
      {
        v17 = __ldaxr((unsigned int *)v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, (unsigned int *)v16));
      if (!v18)
      {
        v19 = *(void (**)(void))(v16 + 8);
        if (v19)
          v19();
      }
    }
    *(_QWORD *)(a2 + 1360) = 0;
    return 1;
  }
  if (__messages_load_locale_cache
    && *(_QWORD *)(__messages_load_locale_cache + 64)
    && !_platform_strcmp())
  {
    *(_BYTE *)(a2 + 1312) = 1;
    v20 = *(_QWORD *)(a2 + 1360);
    if (v20)
    {
      do
      {
        v21 = __ldaxr((unsigned int *)v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, (unsigned int *)v20));
      if (!v22)
      {
        v23 = *(void (**)(void))(v20 + 8);
        if (v23)
          v23();
      }
    }
    v24 = (unsigned int *)__messages_load_locale_cache;
    *(_QWORD *)(a2 + 1360) = __messages_load_locale_cache;
    if (v24)
    {
      result = 1;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 + 1, v24));
      return result;
    }
    return 1;
  }
  v4 = malloc_type_malloc(0x68uLL, 0x10D0040B9A2EC5AuLL);
  if (!v4)
    return 0xFFFFFFFFLL;
  v5 = v4;
  *(_DWORD *)v4 = 1;
  *((_QWORD *)v4 + 1) = destruct_ldpart;
  *((_QWORD *)v4 + 8) = 0;
  result = __part_load_locale(a1, (_BYTE *)(a2 + 1312), (void **)v4 + 8, "LC_MESSAGES/LC_MESSAGES", 4, 2, (_QWORD *)v4 + 9);
  if ((_DWORD)result == -1)
  {
    free(v5);
    return 0xFFFFFFFFLL;
  }
  if (!(_DWORD)result)
  {
    if (!v5[11])
      v5[11] = &empty;
    if (!v5[12])
      v5[12] = &empty;
    v7 = *(_QWORD *)(a2 + 1360);
    if (v7)
    {
      do
      {
        v8 = __ldaxr((unsigned int *)v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, (unsigned int *)v7));
      if (!v9)
      {
        v10 = *(void (**)(void))(v7 + 8);
        if (v10)
          v10();
      }
    }
    *(_QWORD *)(a2 + 1360) = v5;
    v11 = __messages_load_locale_cache;
    if (__messages_load_locale_cache)
    {
      do
      {
        v12 = __ldaxr((unsigned int *)v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, (unsigned int *)v11));
      if (!v13)
      {
        v14 = *(void (**)(void))(v11 + 8);
        if (v14)
          v14();
      }
    }
    __messages_load_locale_cache = (uint64_t)v5;
    do
      v15 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v15 + 1, (unsigned int *)v5));
    return 0;
  }
  return result;
}

char **__get_current_messages_locale(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1312))
    return (char **)(*(_QWORD *)(a1 + 1360) + 72);
  else
    return _C_messages_locale;
}

uint64_t __monetary_load_locale(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  char v8;
  int v9;
  char v10;
  int v11;
  char v12;
  int v13;
  char v14;
  int v15;
  char v16;
  int v17;
  char v18;
  int v19;
  char v20;
  int v21;
  char v22;
  const char *v23;
  int v24;
  char v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  void (*v29)(void);
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  void (*v33)(void);
  unsigned int *v34;
  unsigned int v35;
  const char *v36;
  int v37;
  char v38;
  const char *v39;
  int v40;
  char v41;
  const char *v42;
  int v43;
  char v44;
  const char *v45;
  int v46;
  char v47;
  const char *v48;
  int v49;
  char v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  void (*v54)(void);
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  void (*v58)(void);
  unsigned int v59;

  if (!_platform_strcmp() || !_platform_strcmp() || !_platform_strncmp())
  {
    if (*(_BYTE *)(a2 + 1313))
    {
      *(_BYTE *)(a2 + 1313) = 0;
      v26 = *(_QWORD *)(a2 + 1336);
      if (v26)
      {
        do
        {
          v27 = __ldaxr((unsigned int *)v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, (unsigned int *)v26));
        if (!v28)
        {
          v29 = *(void (**)(void))(v26 + 8);
          if (v29)
            v29();
        }
      }
      *(_QWORD *)(a2 + 1336) = 0;
      goto LABEL_48;
    }
    return 1;
  }
  if (*(_BYTE *)(a2 + 1313) && !_platform_strcmp())
    return 1;
  if (__monetary_load_locale_cache
    && *(_QWORD *)(__monetary_load_locale_cache + 64)
    && !_platform_strcmp())
  {
    *(_BYTE *)(a2 + 1313) = 1;
    v30 = *(_QWORD *)(a2 + 1336);
    if (v30)
    {
      do
      {
        v31 = __ldaxr((unsigned int *)v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, (unsigned int *)v30));
      if (!v32)
      {
        v33 = *(void (**)(void))(v30 + 8);
        if (v33)
          v33();
      }
    }
    v34 = (unsigned int *)__monetary_load_locale_cache;
    *(_QWORD *)(a2 + 1336) = __monetary_load_locale_cache;
    if (v34)
    {
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 + 1, v34));
    }
LABEL_48:
    result = 1;
    *(_BYTE *)(a2 + 1316) = 1;
    return result;
  }
  v4 = malloc_type_malloc(0xF0uLL, 0x10D0040AB25FCE3uLL);
  if (!v4)
    return 0xFFFFFFFFLL;
  v5 = (uint64_t)v4;
  *(_DWORD *)v4 = 1;
  *((_QWORD *)v4 + 1) = destruct_ldpart;
  *((_QWORD *)v4 + 8) = 0;
  result = __part_load_locale(a1, (_BYTE *)(a2 + 1313), (void **)v4 + 8, "LC_MONETARY", 21, 15, (_QWORD *)v4 + 9);
  if ((_DWORD)result == -1)
  {
    free((void *)v5);
    return 0xFFFFFFFFLL;
  }
  *(_BYTE *)(a2 + 1316) = 1;
  if (!(_DWORD)result)
  {
    *(_QWORD *)(v5 + 104) = __fix_locale_grouping_str(*(unsigned __int8 **)(v5 + 104));
    v7 = strtol(*(const char **)(v5 + 128), 0, 10);
    if (v7 == -1)
      v8 = 127;
    else
      v8 = v7;
    **(_BYTE **)(v5 + 128) = v8;
    v9 = strtol(*(const char **)(v5 + 136), 0, 10);
    if (v9 == -1)
      v10 = 127;
    else
      v10 = v9;
    **(_BYTE **)(v5 + 136) = v10;
    v11 = strtol(*(const char **)(v5 + 144), 0, 10);
    if (v11 == -1)
      v12 = 127;
    else
      v12 = v11;
    **(_BYTE **)(v5 + 144) = v12;
    v13 = strtol(*(const char **)(v5 + 152), 0, 10);
    if (v13 == -1)
      v14 = 127;
    else
      v14 = v13;
    **(_BYTE **)(v5 + 152) = v14;
    v15 = strtol(*(const char **)(v5 + 160), 0, 10);
    if (v15 == -1)
      v16 = 127;
    else
      v16 = v15;
    **(_BYTE **)(v5 + 160) = v16;
    v17 = strtol(*(const char **)(v5 + 168), 0, 10);
    if (v17 == -1)
      v18 = 127;
    else
      v18 = v17;
    **(_BYTE **)(v5 + 168) = v18;
    v19 = strtol(*(const char **)(v5 + 176), 0, 10);
    if (v19 == -1)
      v20 = 127;
    else
      v20 = v19;
    **(_BYTE **)(v5 + 176) = v20;
    v21 = strtol(*(const char **)(v5 + 184), 0, 10);
    if (v21 == -1)
      v22 = 127;
    else
      v22 = v21;
    **(_BYTE **)(v5 + 184) = v22;
    v23 = *(const char **)(v5 + 192);
    if (v23)
    {
      v24 = strtol(v23, 0, 10);
      if (v24 == -1)
        v25 = 127;
      else
        v25 = v24;
      **(_BYTE **)(v5 + 192) = v25;
    }
    else
    {
      *(_QWORD *)(v5 + 192) = *(_QWORD *)(v5 + 144);
    }
    v36 = *(const char **)(v5 + 200);
    if (v36)
    {
      v37 = strtol(v36, 0, 10);
      if (v37 == -1)
        v38 = 127;
      else
        v38 = v37;
      **(_BYTE **)(v5 + 200) = v38;
    }
    else
    {
      *(_QWORD *)(v5 + 200) = *(_QWORD *)(v5 + 160);
    }
    v39 = *(const char **)(v5 + 208);
    if (v39)
    {
      v40 = strtol(v39, 0, 10);
      if (v40 == -1)
        v41 = 127;
      else
        v41 = v40;
      **(_BYTE **)(v5 + 208) = v41;
    }
    else
    {
      *(_QWORD *)(v5 + 208) = *(_QWORD *)(v5 + 152);
    }
    v42 = *(const char **)(v5 + 216);
    if (v42)
    {
      v43 = strtol(v42, 0, 10);
      if (v43 == -1)
        v44 = 127;
      else
        v44 = v43;
      **(_BYTE **)(v5 + 216) = v44;
    }
    else
    {
      *(_QWORD *)(v5 + 216) = *(_QWORD *)(v5 + 168);
    }
    v45 = *(const char **)(v5 + 224);
    if (v45)
    {
      v46 = strtol(v45, 0, 10);
      if (v46 == -1)
        v47 = 127;
      else
        v47 = v46;
      **(_BYTE **)(v5 + 224) = v47;
    }
    else
    {
      *(_QWORD *)(v5 + 224) = *(_QWORD *)(v5 + 176);
    }
    v48 = *(const char **)(v5 + 232);
    if (v48)
    {
      v49 = strtol(v48, 0, 10);
      if (v49 == -1)
        v50 = 127;
      else
        v50 = v49;
      **(_BYTE **)(v5 + 232) = v50;
    }
    else
    {
      *(_QWORD *)(v5 + 232) = *(_QWORD *)(v5 + 184);
    }
    v51 = *(_QWORD *)(a2 + 1336);
    if (v51)
    {
      do
      {
        v52 = __ldaxr((unsigned int *)v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, (unsigned int *)v51));
      if (!v53)
      {
        v54 = *(void (**)(void))(v51 + 8);
        if (v54)
          v54();
      }
    }
    *(_QWORD *)(a2 + 1336) = v5;
    v55 = __monetary_load_locale_cache;
    if (__monetary_load_locale_cache)
    {
      do
      {
        v56 = __ldaxr((unsigned int *)v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, (unsigned int *)v55));
      if (!v57)
      {
        v58 = *(void (**)(void))(v55 + 8);
        if (v58)
          v58();
      }
    }
    __monetary_load_locale_cache = v5;
    result = 0;
    do
      v59 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v59 + 1, (unsigned int *)v5));
  }
  return result;
}

uint64_t __numeric_load_locale(uint64_t a1, uint64_t a2)
{
  char *v4;
  unsigned __int8 **v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  void (*v11)(void);
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  void (*v15)(void);
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  void (*v20)(void);
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  void (*v24)(void);
  unsigned int *v25;
  unsigned int v26;

  if (!_platform_strcmp() || !_platform_strcmp() || !_platform_strncmp())
  {
    if (*(_BYTE *)(a2 + 1314))
    {
      *(_BYTE *)(a2 + 1314) = 0;
      v17 = *(_QWORD *)(a2 + 1344);
      if (v17)
      {
        do
        {
          v18 = __ldaxr((unsigned int *)v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, (unsigned int *)v17));
        if (!v19)
        {
          v20 = *(void (**)(void))(v17 + 8);
          if (v20)
            v20();
        }
      }
      *(_QWORD *)(a2 + 1344) = 0;
      goto LABEL_34;
    }
    return 1;
  }
  if (*(_BYTE *)(a2 + 1314) && !_platform_strcmp())
    return 1;
  if (__numeric_load_locale_cache && *(_QWORD *)(__numeric_load_locale_cache + 64) && !_platform_strcmp())
  {
    *(_BYTE *)(a2 + 1314) = 1;
    v21 = *(_QWORD *)(a2 + 1344);
    if (v21)
    {
      do
      {
        v22 = __ldaxr((unsigned int *)v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, (unsigned int *)v21));
      if (!v23)
      {
        v24 = *(void (**)(void))(v21 + 8);
        if (v24)
          v24();
      }
    }
    v25 = (unsigned int *)__numeric_load_locale_cache;
    *(_QWORD *)(a2 + 1344) = __numeric_load_locale_cache;
    if (v25)
    {
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 + 1, v25));
    }
LABEL_34:
    result = 1;
    *(_BYTE *)(a2 + 1317) = 1;
    return result;
  }
  v4 = (char *)malloc_type_malloc(0x60uLL, 0x10D0040E5D34ACFuLL);
  if (!v4)
    return 0xFFFFFFFFLL;
  v5 = (unsigned __int8 **)v4;
  *(_DWORD *)v4 = 1;
  *((_QWORD *)v4 + 1) = destruct_ldpart;
  *((_QWORD *)v4 + 8) = 0;
  v6 = v4 + 72;
  result = __part_load_locale(a1, (_BYTE *)(a2 + 1314), (void **)v4 + 8, "LC_NUMERIC", 3, 3, (_QWORD *)v4 + 9);
  if ((_DWORD)result == -1)
  {
    free(v5);
    return 0xFFFFFFFFLL;
  }
  *(_BYTE *)(a2 + 1317) = 1;
  if (!(_DWORD)result)
  {
    if (!*(_BYTE *)*v6)
      *v6 = ".";
    v5[11] = __fix_locale_grouping_str(v5[11]);
    v8 = *(_QWORD *)(a2 + 1344);
    if (v8)
    {
      do
      {
        v9 = __ldaxr((unsigned int *)v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, (unsigned int *)v8));
      if (!v10)
      {
        v11 = *(void (**)(void))(v8 + 8);
        if (v11)
          v11();
      }
    }
    *(_QWORD *)(a2 + 1344) = v5;
    v12 = __numeric_load_locale_cache;
    if (__numeric_load_locale_cache)
    {
      do
      {
        v13 = __ldaxr((unsigned int *)v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unsigned int *)v12));
      if (!v14)
      {
        v15 = *(void (**)(void))(v12 + 8);
        if (v15)
          v15();
      }
    }
    __numeric_load_locale_cache = (uint64_t)v5;
    result = 0;
    do
      v16 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v16 + 1, (unsigned int *)v5));
  }
  return result;
}

void _locale_lock_fork_child()
{
  uint64_t v0;
  _DWORD *v1;

  v0 = __locale_key;
  v1 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v0);
  if (!v1)
    v1 = &__global_locale;
  v1[324] = 0;
}

int mblen_l(const char *a1, size_t a2, locale_t a3)
{
  locale_t v3;
  locale_t v4;

  v3 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1)
    v3 = a3;
  if (a3)
    v4 = v3;
  else
    v4 = (locale_t)&__c_locale;
  if (a1)
  {
    a1 = (const char *)(*(uint64_t (**)(_QWORD, const char *, size_t, uint64_t))(*((_QWORD *)v4 + 166) + 72))(0, a1, a2, (uint64_t)v4 + 16);
    if ((unint64_t)a1 > 0xFFFFFFFFFFFFFFFDLL)
      LODWORD(a1) = -1;
  }
  else
  {
    *((_OWORD *)v4 + 7) = 0u;
    *((_OWORD *)v4 + 8) = 0u;
    *((_OWORD *)v4 + 5) = 0u;
    *((_OWORD *)v4 + 6) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_OWORD *)v4 + 4) = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    *((_OWORD *)v4 + 2) = 0u;
  }
  return (int)a1;
}

int mblen(const char *__s, size_t __n)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = __locale_key;
  v3 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (!v3)
    v3 = &__global_locale;
  if (v3 == (_QWORD *)-1)
    v4 = &__global_locale;
  else
    v4 = v3;
  if (__s)
  {
    __s = (const char *)(*(uint64_t (**)(_QWORD, const char *, size_t, _QWORD *))(v4[166] + 72))(0, __s, __n, v4 + 2);
    if ((unint64_t)__s > 0xFFFFFFFFFFFFFFFDLL)
      LODWORD(__s) = -1;
  }
  else
  {
    *((_OWORD *)v4 + 7) = 0u;
    *((_OWORD *)v4 + 8) = 0u;
    *((_OWORD *)v4 + 5) = 0u;
    *((_OWORD *)v4 + 6) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_OWORD *)v4 + 4) = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    *((_OWORD *)v4 + 2) = 0u;
  }
  return (int)__s;
}

size_t mbrlen_l(const char *a1, size_t a2, mbstate_t *a3, locale_t a4)
{
  locale_t v4;
  locale_t v5;
  mbstate_t *v6;

  v4 = (locale_t)&__global_locale;
  if (a4 != (locale_t)-1)
    v4 = a4;
  if (a4)
    v5 = v4;
  else
    v5 = (locale_t)&__c_locale;
  if (a3)
    v6 = a3;
  else
    v6 = (mbstate_t *)((char *)v5 + 144);
  return (*(uint64_t (**)(_QWORD, const char *, size_t, mbstate_t *))(*((_QWORD *)v5 + 166) + 72))(0, a1, a2, v6);
}

size_t mbrlen(const char *a1, size_t a2, mbstate_t *a3)
{
  uint64_t v3;
  char *v4;
  char *v5;
  mbstate_t *v6;

  v3 = __locale_key;
  v4 = *(char **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (!v4)
    v4 = (char *)&__global_locale;
  if (v4 == (char *)-1)
    v5 = (char *)&__global_locale;
  else
    v5 = v4;
  if (a3)
    v6 = a3;
  else
    v6 = (mbstate_t *)(v5 + 144);
  return (*(uint64_t (**)(_QWORD, const char *, size_t, mbstate_t *))(*((_QWORD *)v5 + 166) + 72))(0, a1, a2, v6);
}

int mbsinit_l(const mbstate_t *a1, locale_t a2)
{
  locale_t v2;
  locale_t v3;

  v2 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1)
    v2 = a2;
  if (a2)
    v3 = v2;
  else
    v3 = (locale_t)&__c_locale;
  return (*(uint64_t (**)(const mbstate_t *))(*((_QWORD *)v3 + 166) + 80))(a1);
}

int mbsinit(const mbstate_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = __locale_key;
  v2 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (!v2)
    v2 = &__global_locale;
  if (v2 == (_QWORD *)-1)
    v3 = &__global_locale;
  else
    v3 = v2;
  return (*(uint64_t (**)(const mbstate_t *))(v3[166] + 80))(a1);
}

size_t mbsnrtowcs_l(__int32 *a1, const char **a2, size_t a3, size_t a4, mbstate_t *a5, locale_t a6)
{
  locale_t v6;
  locale_t v7;

  v6 = (locale_t)&__global_locale;
  if (a6 != (locale_t)-1)
    v6 = a6;
  if (a6)
    v7 = v6;
  else
    v7 = (locale_t)&__c_locale;
  if (!a5)
    a5 = (mbstate_t *)((char *)v7 + 400);
  return (*(uint64_t (**)(__int32 *, const char **, size_t, size_t, mbstate_t *))(*((_QWORD *)v7 + 166) + 88))(a1, a2, a3, a4, a5);
}

size_t mbsnrtowcs(__int32 *a1, const char **a2, size_t a3, size_t a4, mbstate_t *a5)
{
  uint64_t v5;
  char *v6;
  char *v7;

  v5 = __locale_key;
  v6 = *(char **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (!v6)
    v6 = (char *)&__global_locale;
  if (v6 == (char *)-1)
    v7 = (char *)&__global_locale;
  else
    v7 = v6;
  if (!a5)
    a5 = (mbstate_t *)(v7 + 400);
  return (*(uint64_t (**)(__int32 *, const char **, size_t, size_t, mbstate_t *))(*((_QWORD *)v7 + 166) + 88))(a1, a2, a3, a4, a5);
}

uint64_t __mbsnrtowcs_std(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (*v9)(int *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v18;

  v9 = *(uint64_t (**)(int *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 + 1328) + 72);
  v10 = *a2;
  if (a1)
  {
    v11 = a4;
    if (a4)
    {
      v13 = a1;
      v14 = 0;
      while (1)
      {
        v15 = v9(v13, v10, a3, a5, a6);
        if (v15 == -2)
          break;
        if (!v15)
        {
          *a2 = 0;
          return v14;
        }
        if (v15 == -1)
        {
          *a2 = v10;
          return -1;
        }
        v10 += v15;
        a3 -= v15;
        ++v14;
        ++v13;
        if (v11 == v14)
          goto LABEL_8;
      }
      *a2 = v10 + a3;
      return v14;
    }
LABEL_8:
    *a2 = v10;
  }
  else
  {
    v11 = 0;
    v18 = 0;
    while (1)
    {
      v16 = v9(&v18, v10, a3, a5, a6);
      if (v16 == -2)
        break;
      if (v16 == -1)
        return -1;
      if (!v16)
        return v11;
      v10 += v16;
      a3 -= v16;
      ++v11;
    }
  }
  return v11;
}

size_t mbsrtowcs_l(__int32 *a1, const char **a2, size_t a3, mbstate_t *a4, locale_t a5)
{
  locale_t v5;
  locale_t v6;
  mbstate_t *v7;

  v5 = (locale_t)&__global_locale;
  if (a5 != (locale_t)-1)
    v5 = a5;
  if (a5)
    v6 = v5;
  else
    v6 = (locale_t)&__c_locale;
  if (a4)
    v7 = a4;
  else
    v7 = (mbstate_t *)((char *)v6 + 528);
  return (*(uint64_t (**)(__int32 *, const char **, uint64_t, size_t, mbstate_t *))(*((_QWORD *)v6 + 166) + 88))(a1, a2, -1, a3, v7);
}

size_t mbsrtowcs(__int32 *a1, const char **a2, size_t a3, mbstate_t *a4)
{
  uint64_t v4;
  char *v5;
  char *v6;
  mbstate_t *v7;

  v4 = __locale_key;
  v5 = *(char **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (!v5)
    v5 = (char *)&__global_locale;
  if (v5 == (char *)-1)
    v6 = (char *)&__global_locale;
  else
    v6 = v5;
  if (a4)
    v7 = a4;
  else
    v7 = (mbstate_t *)(v6 + 528);
  return (*(uint64_t (**)(__int32 *, const char **, uint64_t, size_t, mbstate_t *))(*((_QWORD *)v6 + 166) + 88))(a1, a2, -1, a3, v7);
}

size_t mbstowcs_l(__int32 *a1, const char *a2, size_t a3, locale_t a4)
{
  locale_t v4;
  locale_t v5;
  const char *v7;
  _OWORD v8[8];

  v4 = (locale_t)&__global_locale;
  if (a4 != (locale_t)-1)
    v4 = a4;
  if (a4)
    v5 = v4;
  else
    v5 = (locale_t)&__c_locale;
  memset(v8, 0, sizeof(v8));
  v7 = a2;
  return (*(uint64_t (**)(__int32 *, const char **, uint64_t, size_t, _OWORD *))(*((_QWORD *)v5 + 166) + 88))(a1, &v7, -1, a3, v8);
}

size_t mbstowcs(__int32 *a1, const char *a2, size_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  const char *v7;
  _OWORD v8[8];

  v3 = __locale_key;
  v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (!v4)
    v4 = &__global_locale;
  if (v4 == (_QWORD *)-1)
    v5 = &__global_locale;
  else
    v5 = v4;
  memset(v8, 0, sizeof(v8));
  v7 = a2;
  return (*(uint64_t (**)(__int32 *, const char **, uint64_t, size_t, _OWORD *))(v5[166] + 88))(a1, &v7, -1, a3, v8);
}

int mbtowc(__int32 *a1, const char *a2, size_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;

  v3 = __locale_key;
  v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (!v4)
    v4 = &__global_locale;
  if (v4 == (_QWORD *)-1)
    v5 = &__global_locale;
  else
    v5 = v4;
  if (a2)
  {
    v6 = (*(uint64_t (**)(__int32 *, const char *, size_t, _QWORD *))(v5[166] + 72))(a1, a2, a3, v5 + 82);
    if (v6 > 0xFFFFFFFFFFFFFFFDLL)
      LODWORD(v6) = -1;
  }
  else
  {
    LODWORD(v6) = 0;
    *((_OWORD *)v5 + 47) = 0u;
    *((_OWORD *)v5 + 48) = 0u;
    *((_OWORD *)v5 + 45) = 0u;
    *((_OWORD *)v5 + 46) = 0u;
    *((_OWORD *)v5 + 43) = 0u;
    *((_OWORD *)v5 + 44) = 0u;
    *((_OWORD *)v5 + 41) = 0u;
    *((_OWORD *)v5 + 42) = 0u;
  }
  return v6;
}

uint64_t _MSKanji_init(_QWORD *a1)
{
  a1[12] = _MSKanji_wcrtomb;
  a1[9] = _MSKanji_mbrtowc;
  a1[10] = _MSKanji_mbsinit;
  a1[8] = 0x10000000002;
  return 0;
}

uint64_t _MSKanji_mbrtowc(int *a1, const char *a2, unint64_t a3, int *a4)
{
  int v4;
  const char *v5;
  int *v7;
  int v8;
  int *v10;
  int v11;
  int v12;
  int v14;

  v4 = *a4;
  if (*a4 >= 0x100)
  {
    v10 = __error();
    v11 = 22;
LABEL_18:
    *v10 = v11;
    return -1;
  }
  if (a2)
    v5 = a2;
  else
    v5 = "";
  if (!a2)
    a3 = 1;
  if (a2)
    v7 = a1;
  else
    v7 = 0;
  if (!a3)
    return -2;
  if (v4)
  {
    v8 = *(unsigned __int8 *)v5;
    if (v8)
    {
      if (v7)
        *v7 = v8 | (v4 << 8);
      *a4 = 0;
      return 1;
    }
    goto LABEL_34;
  }
  v12 = *(unsigned __int8 *)v5;
  if ((v12 + 127) >= 0x1Fu && (v12 + 32) > 0x1Cu)
  {
    if (v7)
      *v7 = v12;
    return v12 != 0;
  }
  else
  {
    if (a3 <= 1)
    {
      *a4 = v12;
      return -2;
    }
    v14 = *((unsigned __int8 *)v5 + 1);
    if (!v14)
    {
LABEL_34:
      v10 = __error();
      v11 = 92;
      goto LABEL_18;
    }
    if (v7)
      *v7 = v14 | (v12 << 8);
    return 2;
  }
}

uint64_t _MSKanji_wcrtomb(_BYTE *a1, int a2, _DWORD *a3)
{
  uint64_t result;
  unsigned int v5;
  int v6;

  if (*a3)
  {
    *__error() = 22;
    return -1;
  }
  else
  {
    result = 1;
    if (a1)
    {
      if (a2 <= 256)
        result = 1;
      else
        result = 2;
      v5 = result + 1;
      v6 = 8 * result - 8;
      do
      {
        *a1++ = a2 >> v6;
        --v5;
        v6 -= 8;
      }
      while (v5 > 1);
    }
  }
  return result;
}

BOOL _MSKanji_mbsinit(_DWORD *a1)
{
  return !a1 || *a1 == 0;
}

wint_t nextwctype_l(wint_t a1, wctype_t a2, locale_t a3)
{
  uint64_t v3;
  uint64_t v4;
  wint_t result;
  int v6;
  wint_t *v7;
  _BOOL4 v8;
  int v9;
  int *v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  wint_t v14;
  uint64_t v15;
  _BOOL8 v17;
  int *v18;
  unint64_t v19;
  uint64_t v21;
  int *v22;
  int v23;
  unint64_t v24;
  int *v25;
  int *v26;
  int *v27;
  wint_t v28;
  int v29;
  int v30;

  v3 = *(_QWORD *)(*((_QWORD *)a3 + 166) + 120);
  if (a1 <= 255)
  {
    v4 = a1;
    while (v4 != 255)
    {
      result = v4 + 1;
      v6 = *(_DWORD *)(v3 + 64 + 4 * v4++);
      if ((v6 & a2) != 0)
        return result;
    }
    a1 = 255;
  }
  v7 = *(wint_t **)(v3 + 3144);
  if (v7)
  {
    v8 = a1 >= *v7;
    if (a1 <= *v7)
      a1 = *v7;
  }
  else
  {
    v8 = 1;
  }
  v9 = *(_DWORD *)(v3 + 3136);
  if (!v9)
    return -1;
  v10 = *(int **)(v3 + 3144);
  v11 = *(int *)(v3 + 3136);
  while (1)
  {
    v12 = v11 >> 1;
    v13 = &v10[6 * (v11 >> 1)];
    v14 = v13[1];
    v15 = *v13;
    if ((int)v15 <= a1 && a1 <= v14)
      break;
    v17 = a1 > v14;
    v18 = v13 + 6;
    if (a1 > v14)
      v10 = v18;
    v19 = v11 - v17;
    v11 = (v11 - v17) >> 1;
    if (v19 < 2)
      return -1;
  }
  result = v8 + a1;
  if ((int)v15 <= result && result <= v14)
  {
    v21 = *(_QWORD *)&v10[6 * v12 + 4];
    if (v21)
    {
      v22 = (int *)(v21 + 4 * result - 4 * v15);
      do
      {
        v23 = *v22++;
        if ((v23 & a2) != 0)
          return result;
        ++result;
      }
      while (v14 + 1 != result);
    }
    else if ((v10[6 * v12 + 2] & a2) != 0)
    {
      return result;
    }
  }
  v24 = (unint64_t)&v7[6 * v9];
  v25 = v13 + 6;
  if ((unint64_t)(v13 + 6) >= v24)
    return -1;
  while (1)
  {
    v26 = v13;
    v13 = v25;
    result = v26[6];
    v27 = (int *)*((_QWORD *)v26 + 5);
    if (!v27)
    {
      if ((v26[8] & a2) != 0)
        return result;
      goto LABEL_40;
    }
    v28 = v26[7];
    if (result <= v28)
      break;
LABEL_40:
    v25 = v13 + 6;
    result = -1;
    if ((unint64_t)(v13 + 6) >= v24)
      return result;
  }
  v29 = v28 + 1;
  while (1)
  {
    v30 = *v27++;
    if ((v30 & a2) != 0)
      return result;
    if (v29 == ++result)
      goto LABEL_40;
  }
}

wint_t nextwctype(wint_t a1, wctype_t a2)
{
  uint64_t v2;
  _xlocale *v3;
  _xlocale *v4;

  v2 = __locale_key;
  v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3)
    v4 = v3;
  else
    v4 = (_xlocale *)&__global_locale;
  return nextwctype_l(a1, a2, v4);
}

char *__cdecl nl_langinfo_l(nl_item a1, locale_t a2)
{
  char *result;
  locale_t v4;
  _xlocale *v5;
  char **current_numeric_locale;
  uint64_t v7;
  char **current_messages_locale;
  BOOL v9;
  int p_cs_precedes;
  int n_cs_precedes;
  int v12;
  char v13;
  int v14;
  char *v15;
  char v16;

  result = "";
  if (a1 <= 0x39)
  {
    while (1)
    {
      if (a2 == (locale_t)-1)
        v4 = (locale_t)&__global_locale;
      else
        v4 = a2;
      if (a2)
        v5 = v4;
      else
        v5 = (_xlocale *)&__c_locale;
      result = "";
      switch(a1)
      {
        case 0:
          if (!querylocale(2, v5))
            goto LABEL_43;
          v7 = _platform_strchr();
          if (v7)
          {
            result = (char *)(v7 + 1);
          }
          else if (_platform_strcmp() && _platform_strcmp())
          {
            if (_platform_strcmp())
              result = "";
            else
              result = "UTF-8";
          }
          else
          {
            result = "US-ASCII";
          }
          goto LABEL_31;
        case 1:
          current_numeric_locale = __get_current_time_locale((uint64_t)v5) + 40;
          goto LABEL_30;
        case 2:
          current_numeric_locale = __get_current_time_locale((uint64_t)v5) + 39;
          goto LABEL_30;
        case 3:
          current_numeric_locale = __get_current_time_locale((uint64_t)v5) + 38;
          goto LABEL_30;
        case 4:
          current_numeric_locale = __get_current_time_locale((uint64_t)v5) + 57;
          goto LABEL_30;
        case 5:
          current_numeric_locale = __get_current_time_locale((uint64_t)v5) + 41;
          goto LABEL_30;
        case 6:
          current_numeric_locale = __get_current_time_locale((uint64_t)v5) + 42;
          goto LABEL_30;
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
          current_numeric_locale = &__get_current_time_locale((uint64_t)v5)[(a1 - 7) + 31];
          goto LABEL_30;
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
          current_numeric_locale = &__get_current_time_locale((uint64_t)v5)[(a1 - 14) + 24];
          goto LABEL_30;
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
          current_numeric_locale = &__get_current_time_locale((uint64_t)v5)[(a1 - 21) + 12];
          goto LABEL_30;
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
          current_numeric_locale = &__get_current_time_locale((uint64_t)v5)[a1 - 33];
          goto LABEL_30;
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
          goto LABEL_31;
        case 50:
          current_numeric_locale = __get_current_numeric_locale((uint64_t)v5);
          goto LABEL_30;
        case 51:
          current_messages_locale = __get_current_numeric_locale((uint64_t)v5);
          goto LABEL_27;
        case 52:
          current_numeric_locale = __get_current_messages_locale((uint64_t)v5);
          goto LABEL_30;
        case 53:
          current_messages_locale = __get_current_messages_locale((uint64_t)v5);
LABEL_27:
          current_numeric_locale = current_messages_locale + 1;
          goto LABEL_30;
        case 54:
          current_numeric_locale = __get_current_messages_locale((uint64_t)v5) + 2;
          goto LABEL_30;
        case 55:
          current_numeric_locale = __get_current_messages_locale((uint64_t)v5) + 3;
          goto LABEL_30;
        case 56:
          if (!*(_BYTE *)__get_current_monetary_locale((uint64_t)v5)[1])
          {
LABEL_43:
            result = "";
            goto LABEL_31;
          }
          p_cs_precedes = localeconv_l(v5)->p_cs_precedes;
          n_cs_precedes = localeconv_l(v5)->n_cs_precedes;
          result = "";
          if (p_cs_precedes != n_cs_precedes)
            goto LABEL_31;
          if (p_cs_precedes == 127)
          {
            __get_current_monetary_locale((uint64_t)v5);
            v12 = _platform_strcmp();
            result = "";
            if (v12)
              goto LABEL_31;
            v13 = 46;
          }
          else if (p_cs_precedes)
          {
            v13 = 45;
          }
          else
          {
            v13 = 43;
          }
          v16 = v13;
          v14 = _platform_strlen();
          v15 = (char *)reallocf((void *)nl_langinfo_l_csym, v14 + 2);
          nl_langinfo_l_csym = (uint64_t)v15;
          result = "";
          if (v15)
          {
            *v15 = v16;
            _platform_strcpy();
            return v15;
          }
LABEL_31:
          if (*result)
            v9 = 1;
          else
            v9 = a1 == 0;
          if (v9)
            return result;
          if (a1 == 57)
            return result;
          a2 = (locale_t)&__c_locale;
          if (v5 == (_xlocale *)&__c_locale)
            return result;
          break;
        default:
          current_numeric_locale = __get_current_time_locale((uint64_t)v5) + 56;
LABEL_30:
          result = *current_numeric_locale;
          if (result)
            goto LABEL_31;
          return result;
      }
    }
  }
  return result;
}

char *__cdecl nl_langinfo(nl_item a1)
{
  uint64_t v1;
  _xlocale *v2;
  _xlocale *v3;

  v1 = __locale_key;
  v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2)
    v3 = v2;
  else
    v3 = (_xlocale *)&__global_locale;
  return nl_langinfo_l(a1, v3);
}

int __istype(__darwin_ct_rune_t _c, unint64_t _f)
{
  BOOL v2;

  if (_c > 0x7F)
    v2 = __maskrune(_c, _f) == 0;
  else
    v2 = (_DefaultRuneLocale.__runetype[_c] & _f) == 0;
  return !v2;
}

__darwin_ct_rune_t __isctype(__darwin_ct_rune_t _c, unint64_t _f)
{
  return _c <= 0xFF && (_DefaultRuneLocale.__runetype[_c] & _f) != 0;
}

int __wcwidth(int _c)
{
  unsigned int v1;
  int v2;

  if (_c)
  {
    v1 = __maskrune(_c, 0xE0040000uLL);
    if ((v1 & 0x40000) != 0)
      v2 = 1;
    else
      v2 = -1;
    if (v1 >> 29)
      return v1 >> 30;
    else
      return v2;
  }
  return _c;
}

int __maskrune_l(__darwin_ct_rune_t a1, unint64_t a2, locale_t a3)
{
  int v3;
  int v4;
  locale_t v5;
  locale_t v6;

  v3 = a2;
  if (a1 < 0x100)
  {
    v5 = (locale_t)&__c_locale;
    v6 = (locale_t)&__global_locale;
    if (a3 != (locale_t)-1)
      v6 = a3;
    if (a3)
      v5 = v6;
    v4 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 166) + 120) + 4 * a1 + 60);
  }
  else
  {
    v4 = ___runetype_l(a1, a3);
  }
  return v4 & v3;
}

int __istype_l(__darwin_ct_rune_t _c, unint64_t _f, locale_t _l)
{
  uint64_t v3;

  if (_c > 0x7F)
    v3 = __maskrune_l(_c, _f, _l);
  else
    v3 = _DefaultRuneLocale.__runetype[_c] & _f;
  return v3 != 0;
}

__darwin_ct_rune_t __toupper_l(__darwin_ct_rune_t _c, locale_t _l)
{
  if (_c > 0x7F)
    return ___toupper_l(_c, _l);
  else
    return _DefaultRuneLocale.__mapupper[_c];
}

__darwin_ct_rune_t __tolower_l(__darwin_ct_rune_t _c, locale_t _l)
{
  if (_c > 0x7F)
    return ___tolower_l(_c, _l);
  else
    return _DefaultRuneLocale.__maplower[_c];
}

int __wcwidth_l(int _c, locale_t _l)
{
  unsigned int v2;
  int v3;

  if (_c)
  {
    v2 = __maskrune_l(_c, 0xE0040000uLL, _l);
    if ((v2 & 0x40000) != 0)
      v3 = 1;
    else
      v3 = -1;
    if (v2 >> 29)
      return v2 >> 30;
    else
      return v3;
  }
  return _c;
}

uint64_t _none_init(_QWORD *a1)
{
  a1[9] = _none_mbrtowc;
  a1[10] = _none_mbsinit;
  a1[11] = _none_mbsnrtowcs;
  a1[12] = _none_wcrtomb;
  a1[13] = _none_wcsnrtombs;
  a1[8] = 0x10000000001;
  return 0;
}

uint64_t _none_mbsinit()
{
  return 1;
}

uint64_t _none_mbsnrtowcs(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  int v8;
  uint64_t v9;

  v5 = *a2;
  if (a1)
  {
    if (a4)
    {
      result = 0;
      while (1)
      {
        if (a3 == result)
        {
          v5 += result;
          a4 = a3;
          goto LABEL_12;
        }
        v8 = *(unsigned __int8 *)(v5 + result);
        *(_DWORD *)(a1 + 4 * result) = v8;
        if (!v8)
          break;
        if (a4 == ++result)
        {
          v5 += result;
          goto LABEL_12;
        }
      }
      *a2 = 0;
    }
    else
    {
LABEL_12:
      *a2 = v5;
      return a4;
    }
  }
  else
  {
    v9 = _platform_memchr();
    if (v9)
      return v9 - v5;
    else
      return a3;
  }
  return result;
}

uint64_t _none_wcsnrtombs(uint64_t a1, int **a2, uint64_t a3, uint64_t a4)
{
  int *v4;
  uint64_t result;
  int v7;
  int *v8;
  int *v9;

  v4 = *a2;
  if (a1)
  {
    if (a4)
    {
      result = 0;
      while (a3 != result)
      {
        v7 = *v4;
        if (*v4 >= 0x100)
        {
          *a2 = v4;
          goto LABEL_20;
        }
        *(_BYTE *)(a1 + result) = v7;
        if (!v7)
        {
          *a2 = 0;
          return result;
        }
        ++v4;
        if (a4 == ++result)
        {
          a3 = a4;
          break;
        }
      }
    }
    else
    {
      a3 = 0;
    }
    *a2 = v4;
    return a3;
  }
  else
  {
    if (a3)
    {
      v8 = &v4[a3];
      v9 = *a2;
      while (*v9)
      {
        if (*v9 >= 0x100)
        {
LABEL_20:
          *__error() = 92;
          return -1;
        }
        ++v9;
        if (!--a3)
        {
          v9 = v8;
          return v9 - v4;
        }
      }
    }
    else
    {
      v9 = *a2;
    }
    return v9 - v4;
  }
}

uint64_t currentlocale()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;

  if (!currentlocale_current_locale_string)
  {
    currentlocale_current_locale_string = (uint64_t)malloc_type_malloc(0xE7uLL, 0xF88A08B2uLL);
    if (!currentlocale_current_locale_string)
      return 0;
  }
  _platform_strlcpy();
  v0 = 0x40u;
  while (!_platform_strcmp())
  {
    v0 += 32;
    if (v0 == 224)
      return currentlocale_current_locale_string;
  }
  v1 = (char *)currentlocale_current_locale_string;
  v2 = 0x40u;
  do
  {
    *(_WORD *)&v1[_platform_strlen()] = 47;
    strcat(v1, &current_categories[v2]);
    v2 += 32;
  }
  while (v2 != 224);
  return (uint64_t)v1;
}

char *__get_locale_env(int a1)
{
  char *result;

  result = getenv("LC_ALL");
  if (!result || !*result)
  {
    result = getenv(categories[a1]);
    if (!result || !*result)
    {
      result = getenv("LANG");
      if (!result || !*result)
        return "C";
    }
  }
  return result;
}

char *loadlocale(int a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  int v5;
  int v6;
  unsigned int v8;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  void (*v12)(void);

  v2 = a1;
  v3 = (char *)&new_categories + 32 * a1;
  if (*v3 == 46 && (!v3[1] || v3[1] == 46 && !v3[2]) || _platform_strchr())
    goto LABEL_6;
  v5 = *__error();
  v6 = __detect_path_locale();
  *__error() = v6;
  if (*__error())
    return 0;
  *__error() = v5;
  v8 = a1 - 1;
  if ((a1 - 1) >= 6)
  {
LABEL_6:
    v4 = 0;
    *__error() = 22;
    return v4;
  }
  v4 = &current_categories[32 * v2];
  if (!_platform_strcmp())
    return v4;
  if (((unsigned int (*)(char *, void *))off_1E1E9D0F0[v8])(v3, &__global_locale) == -1)
    return 0;
  _platform_strcpy();
  if (*((_QWORD *)&__global_locale + v8 + 165))
    _platform_strlcpy();
  if (a1 == 4)
  {
    byte_1ECCE783E = 0;
    v9 = off_1ECCE7870;
    if (off_1ECCE7870)
    {
      do
      {
        v10 = __ldaxr((unsigned int *)v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, (unsigned int *)v9));
      if (!v11)
      {
        v12 = (void (*)(void))*((_QWORD *)v9 + 1);
        if (v12)
          v12();
      }
    }
    off_1ECCE7870 = 0;
  }
  else if (a1 == 2 && byte_1ECCE783E == 1)
  {
    byte_1ECCE783E = 0;
  }
  return v4;
}

uint64_t __open_path_locale(const char *a1)
{
  uint64_t result;
  char v3[1032];

  _platform_strcpy();
  *(_WORD *)&v3[_platform_strlen()] = 47;
  strcat(v3, a1);
  result = open_NOCANCEL();
  if ((result & 0x80000000) != 0)
  {
    strcpy(v3, "/usr/share/locale");
    *(_WORD *)&v3[_platform_strlen()] = 47;
    strcat(v3, a1);
    result = open_NOCANCEL();
    if ((result & 0x80000000) != 0)
    {
      strcpy(v3, "/usr/local/share/locale");
      *(_WORD *)&v3[_platform_strlen()] = 47;
      strcat(v3, a1);
      return open_NOCANCEL();
    }
  }
  return result;
}

uint64_t __setrunelocale(uint64_t a1, uint64_t a2)
{
  int v3;
  FILE *v4;
  FILE *v5;
  char *RuneMagi;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  void (*v13)(void);
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  void (*v17)(void);
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  void (*v29)(void);
  int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  void (*v34)(void);
  unsigned int v35;
  char v37[1024];

  if (!_platform_strcmp() || !_platform_strcmp())
  {
    v10 = *(_QWORD *)(a2 + 1328);
    if (v10)
    {
      do
      {
        v11 = __ldaxr((unsigned int *)v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, (unsigned int *)v10));
      if (!v12)
      {
        v13 = *(void (**)(void))(v10 + 8);
        if (v13)
          v13();
      }
    }
    *(_QWORD *)(a2 + 1328) = &_DefaultRuneXLocale;
    if ((_UNKNOWN *)a2 == &__global_locale)
    {
      v9 = 0;
      _CurrentRuneLocale = (_RuneLocale *)qword_1EDF540F8;
      __mb_cur_max = dword_1EDF540C0;
      __mb_sb_limit = unk_1EDF540C4;
      return v9;
    }
    return 0;
  }
  os_unfair_lock_lock(&__setrunelocale_cache_lock);
  if (__setrunelocale_CachedRuneLocale && !_platform_strcmp())
  {
    v14 = *(_QWORD *)(a2 + 1328);
    if (v14)
    {
      do
      {
        v15 = __ldaxr((unsigned int *)v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, (unsigned int *)v14));
      if (!v16)
      {
        v17 = *(void (**)(void))(v14 + 8);
        if (v17)
          v17();
      }
    }
    v18 = (unsigned int *)__setrunelocale_CachedRuneLocale;
    *(_QWORD *)(a2 + 1328) = __setrunelocale_CachedRuneLocale;
    if (v18)
    {
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
    }
    if ((_UNKNOWN *)a2 == &__global_locale)
    {
      v20 = *(_QWORD *)(a2 + 1328);
      _CurrentRuneLocale = *(_RuneLocale **)(v20 + 120);
      v21 = *(_DWORD *)(v20 + 64);
      LODWORD(v20) = *(_DWORD *)(v20 + 68);
      __mb_cur_max = v21;
      __mb_sb_limit = v20;
    }
LABEL_63:
    os_unfair_lock_unlock(&__setrunelocale_cache_lock);
    return 0;
  }
  os_unfair_lock_unlock(&__setrunelocale_cache_lock);
  _platform_strcpy();
  strcpy(&v37[_platform_strlen()], "/LC_CTYPE");
  v3 = __open_path_locale(v37);
  v4 = (FILE *)fdopen_DARWIN_EXTSN(v3, "r");
  if (!v4)
  {
    if (*__error())
      return *__error();
    else
      return 2;
  }
  v5 = v4;
  RuneMagi = _Read_RuneMagi(v4);
  if (RuneMagi)
  {
    v7 = (uint64_t)RuneMagi;
    fclose(v5);
    *(_QWORD *)(v7 + 72) = 0;
    *(_QWORD *)(v7 + 80) = 0;
    *(_QWORD *)(v7 + 88) = __mbsnrtowcs_std;
    *(_QWORD *)(v7 + 96) = 0;
    *(_QWORD *)(v7 + 104) = __wcsnrtombs_std;
    v8 = *(_QWORD *)(v7 + 120);
    *(_QWORD *)(v8 + 40) = 0;
    *(_QWORD *)(v8 + 48) = 0;
    if (_platform_strcmp() && _platform_strcmp())
    {
      if (_platform_strncmp())
      {
        if (_platform_strcmp())
        {
          if (_platform_strcmp())
          {
            if (_platform_strcmp())
            {
              if (_platform_strcmp())
              {
                if (_platform_strcmp())
                {
                  if (_platform_strcmp())
                  {
                    if (_platform_strcmp())
                    {
                      if (_platform_strcmp())
                      {
                        if (_platform_strcmp())
                        {
                          if (_platform_strcmp())
                          {
                            if (_platform_strcmp())
                            {
                              if (_platform_strcmp())
                              {
                                v9 = 79;
                                do
                                {
LABEL_43:
                                  v23 = __ldaxr((unsigned int *)v7);
                                  v24 = v23 - 1;
                                }
                                while (__stlxr(v24, (unsigned int *)v7));
                                if (!v24)
                                {
                                  v25 = *(void (**)(uint64_t))(v7 + 8);
                                  if (v25)
                                    v25(v7);
                                }
                                return v9;
                              }
                              v22 = _UTF2_init((_QWORD *)v7);
                            }
                            else
                            {
                              v22 = _MSKanji_init((_QWORD *)v7);
                            }
                          }
                          else
                          {
                            v22 = _BIG5_init((_QWORD *)v7);
                          }
                        }
                        else
                        {
                          v22 = _GBK_init((_QWORD *)v7);
                        }
                      }
                      else
                      {
                        v22 = _GB2312_init((_QWORD *)v7);
                      }
                    }
                    else
                    {
                      v22 = _GB18030_init((_QWORD *)v7);
                    }
                  }
                  else
                  {
                    v22 = _EUC_init((_QWORD *)v7);
                  }
                }
                else
                {
                  v22 = _EUC_TW_init((_QWORD *)v7);
                }
              }
              else
              {
                v22 = _EUC_KR_init((_QWORD *)v7);
              }
            }
            else
            {
              v22 = _EUC_JP_init((_QWORD *)v7);
            }
          }
          else
          {
            v22 = _EUC_CN_init((_QWORD *)v7);
          }
        }
        else
        {
          v22 = _UTF8_init((_QWORD *)v7);
        }
      }
      else
      {
        v22 = _none_init((_QWORD *)v7);
      }
    }
    else
    {
      v22 = _ascii_init((_QWORD *)v7);
    }
    v9 = v22;
    if ((_DWORD)v22)
      goto LABEL_43;
    _platform_strcpy();
    v26 = *(_QWORD *)(a2 + 1328);
    if (v26)
    {
      do
      {
        v27 = __ldaxr((unsigned int *)v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, (unsigned int *)v26));
      if (!v28)
      {
        v29 = *(void (**)(void))(v26 + 8);
        if (v29)
          v29();
      }
    }
    *(_QWORD *)(a2 + 1328) = v7;
    if ((_UNKNOWN *)a2 == &__global_locale)
    {
      _CurrentRuneLocale = *(_RuneLocale **)(v7 + 120);
      v30 = *(_DWORD *)(v7 + 68);
      __mb_cur_max = *(_DWORD *)(v7 + 64);
      __mb_sb_limit = v30;
    }
    os_unfair_lock_lock(&__setrunelocale_cache_lock);
    v31 = __setrunelocale_CachedRuneLocale;
    if (__setrunelocale_CachedRuneLocale)
    {
      do
      {
        v32 = __ldaxr((unsigned int *)v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, (unsigned int *)v31));
      if (!v33)
      {
        v34 = *(void (**)(void))(v31 + 8);
        if (v34)
          v34();
      }
    }
    __setrunelocale_CachedRuneLocale = v7;
    do
      v35 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v35 + 1, (unsigned int *)v7));
    goto LABEL_63;
  }
  if (*__error())
    v9 = *__error();
  else
    v9 = 79;
  fclose(v5);
  return v9;
}

uint64_t __wrap_setrunelocale(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = __setrunelocale(a1, a2);
  if ((_DWORD)result)
  {
    *__error() = result;
    return 0xFFFFFFFFLL;
  }
  return result;
}

__darwin_ct_rune_t ___tolower_l(__darwin_ct_rune_t result, locale_t a2)
{
  locale_t v2;
  locale_t v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  __darwin_ct_rune_t *v7;
  __darwin_ct_rune_t v8;
  _DWORD *v10;
  unint64_t v11;

  if ((result & 0x80000000) == 0)
  {
    v2 = (locale_t)&__c_locale;
    v3 = (locale_t)&__global_locale;
    if (a2 != (locale_t)-1)
      v3 = a2;
    if (a2)
      v2 = v3;
    v4 = *(_QWORD *)(*((_QWORD *)v2 + 166) + 120);
    if (result > 0xFF)
    {
      v5 = *(int *)(v4 + 3152);
      if ((_DWORD)v5)
      {
        v6 = *(_DWORD **)(v4 + 3160);
        while (1)
        {
          v7 = &v6[6 * (v5 >> 1)];
          v8 = v7[1];
          if (result >= *v7 && v8 >= result)
            break;
          v10 = v7 + 6;
          if (v8 < result)
            v6 = v10;
          v11 = v5 - (v8 < result);
          v5 = v11 >> 1;
          if (v11 <= 1)
            return result;
        }
        return result - *v7 + v6[6 * (v5 >> 1) + 2];
      }
    }
    else
    {
      return *(_DWORD *)(v4 + 4 * result + 1084);
    }
  }
  return result;
}

__darwin_ct_rune_t ___tolower(__darwin_ct_rune_t a1)
{
  uint64_t v1;
  _xlocale *v2;
  _xlocale *v3;

  v1 = __locale_key;
  v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2)
    v3 = v2;
  else
    v3 = (_xlocale *)&__global_locale;
  return ___tolower_l(a1, v3);
}

__darwin_ct_rune_t ___toupper_l(__darwin_ct_rune_t result, locale_t a2)
{
  locale_t v2;
  locale_t v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  __darwin_ct_rune_t *v7;
  __darwin_ct_rune_t v8;
  _DWORD *v10;
  unint64_t v11;

  if ((result & 0x80000000) == 0)
  {
    v2 = (locale_t)&__c_locale;
    v3 = (locale_t)&__global_locale;
    if (a2 != (locale_t)-1)
      v3 = a2;
    if (a2)
      v2 = v3;
    v4 = *(_QWORD *)(*((_QWORD *)v2 + 166) + 120);
    if (result > 0xFF)
    {
      v5 = *(int *)(v4 + 3168);
      if ((_DWORD)v5)
      {
        v6 = *(_DWORD **)(v4 + 3176);
        while (1)
        {
          v7 = &v6[6 * (v5 >> 1)];
          v8 = v7[1];
          if (result >= *v7 && v8 >= result)
            break;
          v10 = v7 + 6;
          if (v8 < result)
            v6 = v10;
          v11 = v5 - (v8 < result);
          v5 = v11 >> 1;
          if (v11 <= 1)
            return result;
        }
        return result - *v7 + v6[6 * (v5 >> 1) + 2];
      }
    }
    else
    {
      return *(_DWORD *)(v4 + 4 * result + 2108);
    }
  }
  return result;
}

__darwin_ct_rune_t ___toupper(__darwin_ct_rune_t a1)
{
  uint64_t v1;
  _xlocale *v2;
  _xlocale *v3;

  v1 = __locale_key;
  v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2)
    v3 = v2;
  else
    v3 = (_xlocale *)&__global_locale;
  return ___toupper_l(a1, v3);
}

uint64_t _UTF8_init(_QWORD *a1)
{
  a1[9] = _UTF8_mbrtowc;
  a1[10] = _UTF8_mbsinit;
  a1[11] = _UTF8_mbsnrtowcs;
  a1[12] = _UTF8_wcrtomb;
  a1[13] = _UTF8_wcsnrtombs;
  a1[8] = 0x8000000004;
  return 0;
}

uint64_t _UTF8_mbrtowc(_DWORD *a1, const char *a2, unint64_t a3, uint64_t a4)
{
  unsigned int v4;
  int *v5;
  int v6;
  uint64_t result;
  const char *v8;
  _DWORD *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v20;
  int v22;

  v4 = *(_DWORD *)(a4 + 4);
  if (v4 >= 5)
  {
    v5 = __error();
    v6 = 22;
LABEL_3:
    *v5 = v6;
    return -1;
  }
  if (a2)
    v8 = a2;
  else
    v8 = "";
  if (!a2)
    a3 = 1;
  if (a2)
    v10 = a1;
  else
    v10 = 0;
  if (!a3)
    return -2;
  if (!v4)
  {
    v20 = *(unsigned __int8 *)v8;
    if ((*v8 & 0x80000000) == 0)
    {
      if (v10)
        *v10 = v20;
      return v20 != 0;
    }
    if ((v20 & 0xE0) == 0xC0)
    {
      if (v20 >= 0xC2)
      {
        v12 = 191;
        v11 = 128;
        v13 = 2;
        v22 = 31;
LABEL_63:
        ++v8;
        v14 = v22 & v20;
        goto LABEL_16;
      }
    }
    else
    {
      if ((v20 & 0xF0) == 0xE0)
      {
        if (v20 == 224)
        {
          v12 = 191;
          v11 = 160;
        }
        else
        {
          if (v20 == 237)
            v12 = 159;
          else
            v12 = 191;
          v11 = 128;
        }
        v13 = 3;
        v22 = 15;
        goto LABEL_63;
      }
      if (v20 <= 0xF4 && (v20 & 0xF8) == 0xF0)
      {
        if (v20 == 240)
        {
          v12 = 191;
          v11 = 144;
        }
        else
        {
          if (v20 == 244)
            v12 = 143;
          else
            v12 = 191;
          v11 = 128;
        }
        v13 = 4;
        v22 = 7;
        goto LABEL_63;
      }
    }
LABEL_54:
    v5 = __error();
    v6 = 92;
    goto LABEL_3;
  }
  v11 = *(unsigned __int8 *)(a4 + 8);
  v12 = *(unsigned __int8 *)(a4 + 9);
  v13 = *(_DWORD *)(a4 + 4);
  v14 = *(_DWORD *)a4;
LABEL_16:
  v15 = v4 == 0;
  v16 = v13;
  if (a3 < v13)
    v16 = a3;
  v17 = v16 - v15;
  if (v16 > v15)
  {
    do
    {
      v18 = *(unsigned __int8 *)v8;
      if (v11)
      {
        if (v18 < v11 || v18 > v12)
          goto LABEL_54;
        v12 = 0;
      }
      else if ((v18 & 0xC0) != 0x80)
      {
        goto LABEL_54;
      }
      v11 = 0;
      ++v8;
      v14 = v18 & 0x3F | (v14 << 6);
      --v17;
    }
    while (v17);
    LOBYTE(v11) = 0;
    LODWORD(v15) = v16;
  }
  if (v13 <= (int)v15)
  {
    if (v10)
      *v10 = v14;
    *(_DWORD *)(a4 + 4) = 0;
    if (v14)
      return v13;
    else
      return 0;
  }
  else
  {
    *(_BYTE *)(a4 + 8) = v11;
    *(_BYTE *)(a4 + 9) = v12;
    result = -2;
    *(_DWORD *)a4 = v14;
    *(_DWORD *)(a4 + 4) = v13 - v15;
  }
  return result;
}

uint64_t _UTF8_wcrtomb(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  int *v3;
  int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;

  if (*(_DWORD *)(a3 + 4))
  {
    v3 = __error();
    v4 = 22;
LABEL_3:
    *v3 = v4;
    return -1;
  }
  if (!a1)
    return 1;
  if (a2 <= 0x7F)
  {
    *a1 = a2;
    return 1;
  }
  if (a2 < 0x800)
  {
    v6 = -64;
    v5 = 2;
    goto LABEL_16;
  }
  if (!HIWORD(a2))
  {
    if (a2 >> 11 != 27)
    {
      v6 = -32;
      v5 = 3;
      goto LABEL_16;
    }
LABEL_14:
    v3 = __error();
    v4 = 92;
    goto LABEL_3;
  }
  if (a2 >= 0x110000)
    goto LABEL_14;
  v6 = -16;
  v5 = 4;
LABEL_16:
  v7 = v5 - 1;
  do
  {
    a1[v7] = a2 & 0x3F | 0x80;
    a2 = (int)a2 >> 6;
    v8 = v7-- + 1;
  }
  while (v8 > 2);
  *a1 = a2 | v6;
  return v5;
}

BOOL _UTF8_mbsinit(uint64_t a1)
{
  return !a1 || *(_DWORD *)(a1 + 4) == 0;
}

uint64_t _UTF8_mbsnrtowcs(_DWORD *a1, const char **a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  const char *v7;
  uint64_t v8;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v16;

  v6 = a3;
  v16 = 0;
  v7 = *a2;
  if (a1)
  {
    v8 = a4;
    v10 = a1;
    if (!a3 || !a4)
    {
      if (!a4)
      {
LABEL_20:
        *a2 = v7;
        return v8;
      }
      goto LABEL_12;
    }
    if (*(int *)(a5 + 4) < 1 || *v7 < 1)
    {
LABEL_12:
      v11 = 0;
      v12 = -a4;
      while (1)
      {
        if (v6 && *v7 >= 1)
        {
          *v10 = *(unsigned __int8 *)v7;
          v13 = 1;
        }
        else
        {
          v13 = _UTF8_mbrtowc(v10, v7, v6, a5);
          switch(v13)
          {
            case -2:
              *a2 = &v7[v6];
              return -v11;
            case 0:
              *a2 = 0;
              return -v11;
            case -1:
              *a2 = v7;
              return -1;
          }
        }
        v7 += v13;
        v6 -= v13;
        ++v10;
        if (v12 == --v11)
          goto LABEL_20;
      }
    }
LABEL_10:
    *__error() = 92;
    return -1;
  }
  if (a3 && *(int *)(a5 + 4) >= 1 && *v7 >= 1)
    goto LABEL_10;
  v8 = 0;
  if (!a3)
    goto LABEL_24;
LABEL_22:
  if (*v7 > 0)
  {
    v14 = 1;
    goto LABEL_27;
  }
LABEL_24:
  while (1)
  {
    v14 = _UTF8_mbrtowc(&v16, v7, v6, a5);
    switch(v14)
    {
      case -2:
        return v8;
      case -1:
        return -1;
      case 0:
        return v8;
    }
LABEL_27:
    v7 += v14;
    v6 -= v14;
    ++v8;
    if (v6)
      goto LABEL_22;
  }
}

uint64_t _UTF8_wcsnrtombs(_BYTE *a1, unsigned int **a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _BYTE *v9;
  unsigned int *v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[6];

  if (*(_DWORD *)(a5 + 4))
  {
    *__error() = 22;
    return -1;
  }
  else
  {
    v9 = a1;
    v10 = *a2;
    v5 = 0;
    if (a1)
    {
      v11 = a4;
      if (a4)
      {
        while (a3)
        {
          v12 = *v10;
          if (*v10 > 0x7F)
          {
            if (v11 < 5)
            {
              v14 = _UTF8_wcrtomb(v19, v12, a5);
              if (v14 == -1)
              {
LABEL_30:
                *a2 = v10;
                return -1;
              }
              v13 = v14;
              if (v14 > v11)
                break;
              _platform_memmove();
            }
            else
            {
              v13 = _UTF8_wcrtomb(v9, v12, a5);
              if (v13 == -1)
                goto LABEL_30;
            }
          }
          else
          {
            *v9 = v12;
            v13 = 1;
          }
          if (!*v10)
          {
            *a2 = 0;
            v17 = v5 + v13;
            return v17 - 1;
          }
          ++v10;
          v9 += v13;
          v5 += v13;
          --a3;
          v11 -= v13;
          if (!v11)
            break;
        }
      }
      *a2 = v10;
    }
    else
    {
      while (a3)
      {
        v15 = *v10;
        if (*v10 >= 0x80)
        {
          v16 = _UTF8_wcrtomb(v19, v15, a5);
          if (v16 == -1)
            return -1;
          if (!*v10)
          {
LABEL_27:
            v17 = v5 + v16;
            return v17 - 1;
          }
        }
        else
        {
          v16 = 1;
          if (!v15)
            goto LABEL_27;
        }
        ++v10;
        v5 += v16;
        --a3;
      }
    }
  }
  return v5;
}

size_t wcrtomb(char *a1, __int32 a2, mbstate_t *a3)
{
  uint64_t v3;
  char *v4;
  char *v5;

  v3 = __locale_key;
  v4 = *(char **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (!v4)
    v4 = (char *)&__global_locale;
  if (v4 == (char *)-1)
    v5 = (char *)&__global_locale;
  else
    v5 = v4;
  if (!a3)
    a3 = (mbstate_t *)(v5 + 784);
  return (*(uint64_t (**)(char *, _QWORD, mbstate_t *))(*((_QWORD *)v5 + 166) + 96))(a1, *(_QWORD *)&a2, a3);
}

size_t wcsftime_l(__int32 *a1, size_t a2, const __int32 *a3, const tm *a4, locale_t a5)
{
  locale_t v8;
  _xlocale *v9;
  size_t v10;
  size_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  size_t v17;
  size_t v18;
  int v19;
  const __int32 *v21;
  char *v22;
  mbstate_t v23;

  v21 = a3;
  v22 = 0;
  v8 = (locale_t)&__global_locale;
  memset(&v23, 0, 32);
  if (a5 != (locale_t)-1)
    v8 = a5;
  if (a5)
    v9 = v8;
  else
    v9 = (_xlocale *)&__c_locale;
  memset(&v23._mbstateL + 4, 0, 96);
  v10 = wcsrtombs_l(0, &v21, 0, &v23, v9);
  if (v10 == -1)
  {
    v16 = 0;
    v13 = 0;
LABEL_17:
    v19 = *__error();
    free(v13);
    free(v16);
    v18 = 0;
    *__error() = v19;
    return v18;
  }
  v11 = v10 + 1;
  v12 = (char *)malloc_type_malloc(v10 + 1, 0x5EBEA26FuLL);
  v13 = v12;
  if (!v12)
  {
    v16 = 0;
    goto LABEL_17;
  }
  memset(&v23, 0, sizeof(v23));
  wcsrtombs_l(v12, &v21, v11, &v23, v9);
  v14 = *(int *)(*((_QWORD *)v9 + 166) + 64);
  if (0xFFFFFFFFFFFFFFFFLL / v14 <= a2)
  {
    v16 = 0;
    *__error() = 22;
    goto LABEL_17;
  }
  v15 = (char *)malloc_type_malloc(v14 * a2, 0x2DD30755uLL);
  v16 = v15;
  if (!v15)
    goto LABEL_17;
  if (!strftime_l(v15, a2, v13, a4, v9))
    goto LABEL_17;
  v22 = v16;
  memset(&v23, 0, sizeof(v23));
  v17 = mbsrtowcs_l(a1, (const char **)&v22, a2, &v23, v9);
  if (v17 > 0xFFFFFFFFFFFFFFFDLL || v22)
    goto LABEL_17;
  v18 = v17;
  free(v13);
  free(v16);
  return v18;
}

size_t wcsftime(__int32 *a1, size_t a2, const __int32 *a3, const tm *a4)
{
  uint64_t v4;
  _xlocale *v5;
  _xlocale *v6;

  v4 = __locale_key;
  v5 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (v5)
    v6 = v5;
  else
    v6 = (_xlocale *)&__global_locale;
  return wcsftime_l(a1, a2, a3, a4, v6);
}

size_t wcsnrtombs_l(char *a1, const __int32 **a2, size_t a3, size_t a4, mbstate_t *a5, locale_t a6)
{
  locale_t v6;
  locale_t v7;

  v6 = (locale_t)&__global_locale;
  if (a6 != (locale_t)-1)
    v6 = a6;
  if (a6)
    v7 = v6;
  else
    v7 = (locale_t)&__c_locale;
  if (!a5)
    a5 = (mbstate_t *)((char *)v7 + 912);
  return (*(uint64_t (**)(char *, const __int32 **, size_t, size_t, mbstate_t *))(*((_QWORD *)v7 + 166) + 104))(a1, a2, a3, a4, a5);
}

size_t wcsnrtombs(char *a1, const __int32 **a2, size_t a3, size_t a4, mbstate_t *a5)
{
  uint64_t v5;
  char *v6;
  char *v7;

  v5 = __locale_key;
  v6 = *(char **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (!v6)
    v6 = (char *)&__global_locale;
  if (v6 == (char *)-1)
    v7 = (char *)&__global_locale;
  else
    v7 = v6;
  if (!a5)
    a5 = (mbstate_t *)(v7 + 912);
  return (*(uint64_t (**)(char *, const __int32 **, size_t, size_t, mbstate_t *))(*((_QWORD *)v7 + 166) + 104))(a1, a2, a3, a4, a5);
}

uint64_t __wcsnrtombs_std(_BYTE *a1, _DWORD **a2, uint64_t a3, unint64_t a4, __int128 *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_BYTE *, _QWORD, __int128 *, uint64_t);
  _DWORD *v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v30[6];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v8 = a3;
  v9 = *(_QWORD *)(a6 + 1328);
  v10 = *(uint64_t (**)(_BYTE *, _QWORD, __int128 *, uint64_t))(v9 + 96);
  v11 = *a2;
  if (a1)
  {
    v12 = a4;
    if (a4)
    {
      v13 = a1;
      v14 = 0;
      v15 = *(int *)(v9 + 64);
      while (v8)
      {
        if (v12 <= v15)
        {
          v17 = a5[5];
          v35 = a5[4];
          v36 = v17;
          v18 = a5[7];
          v37 = a5[6];
          v38 = v18;
          v19 = a5[1];
          v31 = *a5;
          v32 = v19;
          v20 = a5[3];
          v33 = a5[2];
          v34 = v20;
          v21 = v10(v30, *v11, a5, a6);
          if (v21 == -1)
          {
LABEL_21:
            *a2 = v11;
            return -1;
          }
          v16 = v21;
          if (v21 > (int)v12)
          {
            v25 = v36;
            a5[4] = v35;
            a5[5] = v25;
            v26 = v38;
            a5[6] = v37;
            a5[7] = v26;
            v27 = v32;
            *a5 = v31;
            a5[1] = v27;
            v28 = v34;
            a5[2] = v33;
            a5[3] = v28;
            break;
          }
          _platform_memmove();
        }
        else
        {
          v16 = v10(v13, *v11, a5, a6);
          if (v16 == -1)
            goto LABEL_21;
        }
        if (!*v11)
        {
          *a2 = 0;
          v23 = v14 + v16;
          return v23 - 1;
        }
        ++v11;
        v13 += v16;
        v14 += v16;
        --v8;
        v12 -= v16;
        if (!v12)
          break;
      }
    }
    else
    {
      v14 = 0;
    }
    *a2 = v11;
  }
  else
  {
    v14 = 0;
    if (a3)
    {
      while (1)
      {
        v22 = v10(v30, *v11, a5, a6);
        if (v22 == -1)
          return -1;
        if (!*v11)
          break;
        ++v11;
        v14 += v22;
        if (!--v8)
          return v14;
      }
      v23 = v14 + v22;
      return v23 - 1;
    }
  }
  return v14;
}

size_t wcsrtombs_l(char *a1, const __int32 **a2, size_t a3, mbstate_t *a4, locale_t a5)
{
  locale_t v5;
  locale_t v6;
  mbstate_t *v7;

  v5 = (locale_t)&__global_locale;
  if (a5 != (locale_t)-1)
    v5 = a5;
  if (a5)
    v6 = v5;
  else
    v6 = (locale_t)&__c_locale;
  if (a4)
    v7 = a4;
  else
    v7 = (mbstate_t *)((char *)v6 + 1040);
  return (*(uint64_t (**)(char *, const __int32 **, uint64_t, size_t, mbstate_t *))(*((_QWORD *)v6 + 166)
                                                                                           + 104))(a1, a2, -1, a3, v7);
}

size_t wcsrtombs(char *a1, const __int32 **a2, size_t a3, mbstate_t *a4)
{
  uint64_t v4;
  char *v5;
  char *v6;
  mbstate_t *v7;

  v4 = __locale_key;
  v5 = *(char **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (!v5)
    v5 = (char *)&__global_locale;
  if (v5 == (char *)-1)
    v6 = (char *)&__global_locale;
  else
    v6 = v5;
  if (a4)
    v7 = a4;
  else
    v7 = (mbstate_t *)(v6 + 1040);
  return (*(uint64_t (**)(char *, const __int32 **, uint64_t, size_t, mbstate_t *))(*((_QWORD *)v6 + 166)
                                                                                           + 104))(a1, a2, -1, a3, v7);
}

size_t __wcs_end_offset(const char *a1, uint64_t a2, locale_t a3)
{
  lconv *v5;
  size_t v6;

  v5 = localeconv_l(a3);
  v6 = a2 - (_QWORD)a1;
  if (strnstr(a1, v5->decimal_point, v6))
    return v6 - _platform_strlen() + 1;
  return v6;
}

double wcstod_l(const __int32 *a1, __int32 **a2, locale_t a3)
{
  __int32 *v4;
  _xlocale *v5;
  uint64_t v6;
  char *v7;
  _xlocale *v8;
  _xlocale *v9;
  locale_t v10;
  _xlocale *v11;
  locale_t v12;
  _QWORD *v13;
  __int32 *v14;
  uint64_t v15;
  char *v16;
  int v17;
  __int32 v18;
  __int32 *v19;
  size_t v20;
  __int32 v21;
  const char *v22;
  double v23;
  uint64_t v25;
  char *v26;
  mbstate_t v27;

  v4 = (__int32 *)a1;
  memset(&v27, 0, sizeof(v27));
  v26 = 0;
  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  MEMORY[0x1E0C86820](a1, a2);
  v7 = (char *)&v25 - v6;
  if (v5 == (_xlocale *)-1)
    v8 = (_xlocale *)&__global_locale;
  else
    v8 = v5;
  if (v5)
    v9 = v8;
  else
    v9 = (_xlocale *)&__c_locale;
  v10 = __numeric_ctype((uint64_t)v9);
  v11 = v10;
  if (v10 == (locale_t)-1)
    v12 = (locale_t)&__global_locale;
  else
    v12 = v10;
  if (v10)
    v13 = v12;
  else
    v13 = &__c_locale;
  v14 = v4;
  do
  {
    v15 = *v14;
    if (v15 > 0x7F)
    {
      if (v15 >= 0x100)
      {
        LOWORD(v17) = ___runetype_l(v15, v11);
        goto LABEL_20;
      }
      v16 = (char *)(*(_QWORD *)(v13[166] + 120) + 4 * v15);
    }
    else
    {
      v16 = &_DefaultRuneLocale.__magic[4 * v15];
    }
    v17 = *((_DWORD *)v16 + 15);
LABEL_20:
    ++v14;
  }
  while ((v17 & 0x4000) != 0);
  if (!_simple_salloc())
    return 0.0;
  memset(&v27, 0, sizeof(v27));
  v18 = *(v14 - 1);
  if (v18)
  {
    v19 = v14;
    do
    {
      v20 = wcrtomb_l(v7, v18, &v27, v11);
      if (v20 == -1)
        break;
      v7[v20] = 0;
      if ((_simple_sappend() & 0x80000000) != 0)
      {
        v23 = 0.0;
        goto LABEL_33;
      }
      v21 = *v19++;
      v18 = v21;
    }
    while (v21);
  }
  v22 = (const char *)_simple_string();
  v23 = strtod_l(v22, &v26, v9);
  if (a2)
  {
    if (v26 != v22)
      v4 = &v14[__wcs_end_offset(v22, (uint64_t)v26, v9) - 1];
    *a2 = v4;
  }
LABEL_33:
  _simple_sfree();
  return v23;
}

double wcstod(const __int32 *a1, __int32 **a2)
{
  uint64_t v2;
  _xlocale *v3;
  _xlocale *v4;

  v2 = __locale_key;
  v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3)
    v4 = v3;
  else
    v4 = (_xlocale *)&__global_locale;
  return wcstod_l(a1, a2, v4);
}

float wcstof_l(const __int32 *a1, __int32 **a2, locale_t a3)
{
  __int32 *v4;
  _xlocale *v5;
  uint64_t v6;
  char *v7;
  _xlocale *v8;
  _xlocale *v9;
  locale_t v10;
  _xlocale *v11;
  locale_t v12;
  _QWORD *v13;
  __int32 *v14;
  uint64_t v15;
  char *v16;
  int v17;
  __int32 v18;
  __int32 *v19;
  size_t v20;
  __int32 v21;
  const char *v22;
  float v23;
  uint64_t v25;
  char *v26;
  mbstate_t v27;

  v4 = (__int32 *)a1;
  memset(&v27, 0, sizeof(v27));
  v26 = 0;
  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  MEMORY[0x1E0C86820](a1, a2);
  v7 = (char *)&v25 - v6;
  if (v5 == (_xlocale *)-1)
    v8 = (_xlocale *)&__global_locale;
  else
    v8 = v5;
  if (v5)
    v9 = v8;
  else
    v9 = (_xlocale *)&__c_locale;
  v10 = __numeric_ctype((uint64_t)v9);
  v11 = v10;
  if (v10 == (locale_t)-1)
    v12 = (locale_t)&__global_locale;
  else
    v12 = v10;
  if (v10)
    v13 = v12;
  else
    v13 = &__c_locale;
  v14 = v4;
  do
  {
    v15 = *v14;
    if (v15 > 0x7F)
    {
      if (v15 >= 0x100)
      {
        LOWORD(v17) = ___runetype_l(v15, v11);
        goto LABEL_20;
      }
      v16 = (char *)(*(_QWORD *)(v13[166] + 120) + 4 * v15);
    }
    else
    {
      v16 = &_DefaultRuneLocale.__magic[4 * v15];
    }
    v17 = *((_DWORD *)v16 + 15);
LABEL_20:
    ++v14;
  }
  while ((v17 & 0x4000) != 0);
  if (!_simple_salloc())
    return 0.0;
  memset(&v27, 0, sizeof(v27));
  v18 = *(v14 - 1);
  if (v18)
  {
    v19 = v14;
    do
    {
      v20 = wcrtomb_l(v7, v18, &v27, v11);
      if (v20 == -1)
        break;
      v7[v20] = 0;
      if ((_simple_sappend() & 0x80000000) != 0)
      {
        v23 = 0.0;
        goto LABEL_33;
      }
      v21 = *v19++;
      v18 = v21;
    }
    while (v21);
  }
  v22 = (const char *)_simple_string();
  v23 = strtof_l(v22, &v26, v9);
  if (a2)
  {
    if (v26 != v22)
      v4 = &v14[__wcs_end_offset(v22, (uint64_t)v26, v9) - 1];
    *a2 = v4;
  }
LABEL_33:
  _simple_sfree();
  return v23;
}

float wcstof(const __int32 *a1, __int32 **a2)
{
  uint64_t v2;
  _xlocale *v3;
  _xlocale *v4;

  v2 = __locale_key;
  v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3)
    v4 = v3;
  else
    v4 = (_xlocale *)&__global_locale;
  return wcstof_l(a1, a2, v4);
}

intmax_t wcstoimax_l(const __int32 *nptr, __int32 **endptr, int base, locale_t a4)
{
  _xlocale *v7;
  locale_t v8;
  _xlocale *v9;
  _xlocale *v10;
  const __int32 *v11;
  uint64_t v12;
  unsigned int v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  __int32 *v26;
  int *v28;

  v7 = (_xlocale *)&__global_locale;
  if (a4 == (locale_t)-1)
    v8 = (locale_t)&__global_locale;
  else
    v8 = a4;
  if (a4)
    v9 = v8;
  else
    v9 = (_xlocale *)&__c_locale;
  if (v9 != (_xlocale *)-1)
    v7 = v9;
  if (v9)
    v10 = v7;
  else
    v10 = (_xlocale *)&__c_locale;
  v11 = nptr;
  do
  {
    while (1)
    {
      v13 = *v11++;
      v12 = v13;
      if (v13 <= 0x7F)
      {
        v14 = &_DefaultRuneLocale.__magic[4 * v12];
        goto LABEL_19;
      }
      if (v12 < 0x100)
        break;
      if ((___runetype_l(v12, v9) & 0x4000) == 0)
        goto LABEL_20;
    }
    v14 = (char *)(*(_QWORD *)(*((_QWORD *)v10 + 166) + 120) + 4 * v12);
LABEL_19:
    ;
  }
  while ((*((_DWORD *)v14 + 15) & 0x4000) != 0);
LABEL_20:
  if ((_DWORD)v12 == 43 || (_DWORD)v12 == 45)
  {
    v16 = *v11++;
    v15 = v16;
  }
  else
  {
    v15 = v12;
  }
  if ((base & 0xFFFFFFEF) != 0 || v15 != 48)
  {
    if (v15 == 48)
      v17 = 8;
    else
      v17 = 10;
    if (!base)
      base = v17;
    goto LABEL_35;
  }
  if ((*v11 | 0x20) != 0x78)
  {
    v15 = 48;
    if (!base)
      base = 8;
LABEL_35:
    if ((base - 37) >= 0xFFFFFFDD)
      goto LABEL_37;
    v18 = 0;
    goto LABEL_61;
  }
  v15 = v11[1];
  v11 += 2;
  base = 16;
LABEL_37:
  v18 = 0;
  v19 = 0;
  if ((_DWORD)v12 == 45)
    v20 = 0x8000000000000000;
  else
    v20 = 0x7FFFFFFFFFFFFFFFLL;
  v21 = v20 / base;
  while (1)
  {
    v22 = v15 - 48;
    if ((v15 - 48) >= 0xA)
    {
      if ((v15 - 65) > 0x19)
      {
        if ((v15 - 97) > 0x19)
          break;
        v22 = v15 - 87;
      }
      else
      {
        v22 = v15 - 55;
      }
    }
    if (v22 >= base)
      break;
    v23 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v21)
    {
      if (v18 == v21 && v22 > (int)(v20 % base))
      {
        v18 = v20 / base;
      }
      else
      {
        v18 = v18 * base + v22;
        v23 = 1;
      }
    }
    v24 = *v11++;
    v15 = v24;
    v19 = v23;
  }
  if (v19 < 0)
  {
    v28 = __error();
    v25 = 0;
    *v28 = 34;
    if (!endptr)
      return v20;
    goto LABEL_62;
  }
  if (!v19)
  {
LABEL_61:
    *__error() = 22;
    v25 = 1;
    v20 = v18;
    if (!endptr)
      return v20;
    goto LABEL_62;
  }
  v25 = 0;
  if ((_DWORD)v12 == 45)
    v20 = -(uint64_t)v18;
  else
    v20 = v18;
  if (endptr)
  {
LABEL_62:
    if (v25)
      v26 = (__int32 *)nptr;
    else
      v26 = (__int32 *)(v11 - 1);
    *endptr = v26;
  }
  return v20;
}

intmax_t wcstoimax(const __int32 *__nptr, __int32 **__endptr, int __base)
{
  uint64_t v3;
  _xlocale *v4;
  _xlocale *v5;

  v3 = __locale_key;
  v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__global_locale;
  return wcstoimax_l(__nptr, __endptr, __base, v5);
}

uint64_t wcstol_l(const __int32 *a1, __int32 **a2, int a3, locale_t a4)
{
  _xlocale *v7;
  locale_t v8;
  _xlocale *v9;
  _xlocale *v10;
  const __int32 *v11;
  uint64_t v12;
  unsigned int v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  __int32 *v26;
  int *v28;

  v7 = (_xlocale *)&__global_locale;
  if (a4 == (locale_t)-1)
    v8 = (locale_t)&__global_locale;
  else
    v8 = a4;
  if (a4)
    v9 = v8;
  else
    v9 = (_xlocale *)&__c_locale;
  if (v9 != (_xlocale *)-1)
    v7 = v9;
  if (v9)
    v10 = v7;
  else
    v10 = (_xlocale *)&__c_locale;
  v11 = a1;
  do
  {
    while (1)
    {
      v13 = *v11++;
      v12 = v13;
      if (v13 <= 0x7F)
      {
        v14 = &_DefaultRuneLocale.__magic[4 * v12];
        goto LABEL_19;
      }
      if (v12 < 0x100)
        break;
      if ((___runetype_l(v12, v9) & 0x4000) == 0)
        goto LABEL_20;
    }
    v14 = (char *)(*(_QWORD *)(*((_QWORD *)v10 + 166) + 120) + 4 * v12);
LABEL_19:
    ;
  }
  while ((*((_DWORD *)v14 + 15) & 0x4000) != 0);
LABEL_20:
  if ((_DWORD)v12 == 43 || (_DWORD)v12 == 45)
  {
    v16 = *v11++;
    v15 = v16;
  }
  else
  {
    v15 = v12;
  }
  if ((a3 & 0xFFFFFFEF) != 0 || v15 != 48)
  {
    if (v15 == 48)
      v17 = 8;
    else
      v17 = 10;
    if (!a3)
      a3 = v17;
    goto LABEL_35;
  }
  if ((*v11 | 0x20) != 0x78)
  {
    v15 = 48;
    if (!a3)
      a3 = 8;
LABEL_35:
    if ((a3 - 37) >= 0xFFFFFFDD)
      goto LABEL_37;
    v18 = 0;
    goto LABEL_61;
  }
  v15 = v11[1];
  v11 += 2;
  a3 = 16;
LABEL_37:
  v18 = 0;
  v19 = 0;
  if ((_DWORD)v12 == 45)
    v20 = 0x8000000000000000;
  else
    v20 = 0x7FFFFFFFFFFFFFFFLL;
  v21 = v20 / a3;
  while (1)
  {
    v22 = v15 - 48;
    if ((v15 - 48) >= 0xA)
    {
      if ((v15 - 65) > 0x19)
      {
        if ((v15 - 97) > 0x19)
          break;
        v22 = v15 - 87;
      }
      else
      {
        v22 = v15 - 55;
      }
    }
    if (v22 >= a3)
      break;
    v23 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v21)
    {
      if (v18 == v21 && v22 > (int)(v20 % a3))
      {
        v18 = v20 / a3;
      }
      else
      {
        v18 = v18 * a3 + v22;
        v23 = 1;
      }
    }
    v24 = *v11++;
    v15 = v24;
    v19 = v23;
  }
  if (v19 < 0)
  {
    v28 = __error();
    v25 = 0;
    *v28 = 34;
    if (!a2)
      return v20;
    goto LABEL_62;
  }
  if (!v19)
  {
LABEL_61:
    *__error() = 22;
    v25 = 1;
    v20 = v18;
    if (!a2)
      return v20;
    goto LABEL_62;
  }
  v25 = 0;
  if ((_DWORD)v12 == 45)
    v20 = -(uint64_t)v18;
  else
    v20 = v18;
  if (a2)
  {
LABEL_62:
    if (v25)
      v26 = (__int32 *)a1;
    else
      v26 = (__int32 *)(v11 - 1);
    *a2 = v26;
  }
  return v20;
}

uint64_t wcstol(const __int32 *a1, __int32 **a2, int a3)
{
  uint64_t v3;
  _xlocale *v4;
  _xlocale *v5;

  v3 = __locale_key;
  v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__global_locale;
  return wcstol_l(a1, a2, a3, v5);
}

long double wcstold_l(const __int32 *a1, __int32 **a2, locale_t a3)
{
  __int32 *v4;
  _xlocale *v5;
  uint64_t v6;
  char *v7;
  _xlocale *v8;
  _xlocale *v9;
  locale_t v10;
  _xlocale *v11;
  locale_t v12;
  _QWORD *v13;
  __int32 *v14;
  uint64_t v15;
  char *v16;
  int v17;
  __int32 v18;
  __int32 *v19;
  size_t v20;
  __int32 v21;
  const char *v22;
  double v23;
  uint64_t v25;
  char *v26;
  mbstate_t v27;

  v4 = (__int32 *)a1;
  memset(&v27, 0, sizeof(v27));
  v26 = 0;
  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  MEMORY[0x1E0C86820](a1, a2);
  v7 = (char *)&v25 - v6;
  if (v5 == (_xlocale *)-1)
    v8 = (_xlocale *)&__global_locale;
  else
    v8 = v5;
  if (v5)
    v9 = v8;
  else
    v9 = (_xlocale *)&__c_locale;
  v10 = __numeric_ctype((uint64_t)v9);
  v11 = v10;
  if (v10 == (locale_t)-1)
    v12 = (locale_t)&__global_locale;
  else
    v12 = v10;
  if (v10)
    v13 = v12;
  else
    v13 = &__c_locale;
  v14 = v4;
  do
  {
    v15 = *v14;
    if (v15 > 0x7F)
    {
      if (v15 >= 0x100)
      {
        LOWORD(v17) = ___runetype_l(v15, v11);
        goto LABEL_20;
      }
      v16 = (char *)(*(_QWORD *)(v13[166] + 120) + 4 * v15);
    }
    else
    {
      v16 = &_DefaultRuneLocale.__magic[4 * v15];
    }
    v17 = *((_DWORD *)v16 + 15);
LABEL_20:
    ++v14;
  }
  while ((v17 & 0x4000) != 0);
  if (!_simple_salloc())
    return 0.0;
  memset(&v27, 0, sizeof(v27));
  v18 = *(v14 - 1);
  if (v18)
  {
    v19 = v14;
    do
    {
      v20 = wcrtomb_l(v7, v18, &v27, v11);
      if (v20 == -1)
        break;
      v7[v20] = 0;
      if ((_simple_sappend() & 0x80000000) != 0)
      {
        v23 = 0.0;
        goto LABEL_33;
      }
      v21 = *v19++;
      v18 = v21;
    }
    while (v21);
  }
  v22 = (const char *)_simple_string();
  v23 = strtold_l(v22, &v26, v9);
  if (a2)
  {
    if (v26 != v22)
      v4 = &v14[__wcs_end_offset(v22, (uint64_t)v26, v9) - 1];
    *a2 = v4;
  }
LABEL_33:
  _simple_sfree();
  return v23;
}

long double wcstold(const __int32 *a1, __int32 **a2)
{
  uint64_t v2;
  _xlocale *v3;
  _xlocale *v4;

  v2 = __locale_key;
  v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3)
    v4 = v3;
  else
    v4 = (_xlocale *)&__global_locale;
  return wcstold_l(a1, a2, v4);
}

uint64_t wcstoll_l(const __int32 *a1, __int32 **a2, int a3, locale_t a4)
{
  _xlocale *v7;
  locale_t v8;
  _xlocale *v9;
  _xlocale *v10;
  const __int32 *v11;
  uint64_t v12;
  unsigned int v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  __int32 *v26;
  int *v28;

  v7 = (_xlocale *)&__global_locale;
  if (a4 == (locale_t)-1)
    v8 = (locale_t)&__global_locale;
  else
    v8 = a4;
  if (a4)
    v9 = v8;
  else
    v9 = (_xlocale *)&__c_locale;
  if (v9 != (_xlocale *)-1)
    v7 = v9;
  if (v9)
    v10 = v7;
  else
    v10 = (_xlocale *)&__c_locale;
  v11 = a1;
  do
  {
    while (1)
    {
      v13 = *v11++;
      v12 = v13;
      if (v13 <= 0x7F)
      {
        v14 = &_DefaultRuneLocale.__magic[4 * v12];
        goto LABEL_19;
      }
      if (v12 < 0x100)
        break;
      if ((___runetype_l(v12, v9) & 0x4000) == 0)
        goto LABEL_20;
    }
    v14 = (char *)(*(_QWORD *)(*((_QWORD *)v10 + 166) + 120) + 4 * v12);
LABEL_19:
    ;
  }
  while ((*((_DWORD *)v14 + 15) & 0x4000) != 0);
LABEL_20:
  if ((_DWORD)v12 == 43 || (_DWORD)v12 == 45)
  {
    v16 = *v11++;
    v15 = v16;
  }
  else
  {
    v15 = v12;
  }
  if ((a3 & 0xFFFFFFEF) != 0 || v15 != 48)
  {
    if (v15 == 48)
      v17 = 8;
    else
      v17 = 10;
    if (!a3)
      a3 = v17;
    goto LABEL_35;
  }
  if ((*v11 | 0x20) != 0x78)
  {
    v15 = 48;
    if (!a3)
      a3 = 8;
LABEL_35:
    if ((a3 - 37) >= 0xFFFFFFDD)
      goto LABEL_37;
    v18 = 0;
    goto LABEL_61;
  }
  v15 = v11[1];
  v11 += 2;
  a3 = 16;
LABEL_37:
  v18 = 0;
  v19 = 0;
  if ((_DWORD)v12 == 45)
    v20 = 0x8000000000000000;
  else
    v20 = 0x7FFFFFFFFFFFFFFFLL;
  v21 = v20 / a3;
  while (1)
  {
    v22 = v15 - 48;
    if ((v15 - 48) >= 0xA)
    {
      if ((v15 - 65) > 0x19)
      {
        if ((v15 - 97) > 0x19)
          break;
        v22 = v15 - 87;
      }
      else
      {
        v22 = v15 - 55;
      }
    }
    if (v22 >= a3)
      break;
    v23 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v21)
    {
      if (v18 == v21 && v22 > (int)(v20 % a3))
      {
        v18 = v20 / a3;
      }
      else
      {
        v18 = v18 * a3 + v22;
        v23 = 1;
      }
    }
    v24 = *v11++;
    v15 = v24;
    v19 = v23;
  }
  if (v19 < 0)
  {
    v28 = __error();
    v25 = 0;
    *v28 = 34;
    if (!a2)
      return v20;
    goto LABEL_62;
  }
  if (!v19)
  {
LABEL_61:
    *__error() = 22;
    v25 = 1;
    v20 = v18;
    if (!a2)
      return v20;
    goto LABEL_62;
  }
  v25 = 0;
  if ((_DWORD)v12 == 45)
    v20 = -(uint64_t)v18;
  else
    v20 = v18;
  if (a2)
  {
LABEL_62:
    if (v25)
      v26 = (__int32 *)a1;
    else
      v26 = (__int32 *)(v11 - 1);
    *a2 = v26;
  }
  return v20;
}

uint64_t wcstoll(const __int32 *a1, __int32 **a2, int a3)
{
  uint64_t v3;
  _xlocale *v4;
  _xlocale *v5;

  v3 = __locale_key;
  v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__global_locale;
  return wcstoll_l(a1, a2, a3, v5);
}

size_t wcstombs_l(char *a1, const __int32 *a2, size_t a3, locale_t a4)
{
  locale_t v4;
  locale_t v5;
  const __int32 *v7;
  _OWORD v8[8];

  v4 = (locale_t)&__global_locale;
  if (a4 != (locale_t)-1)
    v4 = a4;
  if (a4)
    v5 = v4;
  else
    v5 = (locale_t)&__c_locale;
  memset(v8, 0, sizeof(v8));
  v7 = a2;
  return (*(uint64_t (**)(char *, const __int32 **, uint64_t, size_t, _OWORD *))(*((_QWORD *)v5 + 166) + 104))(a1, &v7, -1, a3, v8);
}

size_t wcstombs(char *a1, const __int32 *a2, size_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  const __int32 *v7;
  _OWORD v8[8];

  v3 = __locale_key;
  v4 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (!v4)
    v4 = &__global_locale;
  if (v4 == (_QWORD *)-1)
    v5 = &__global_locale;
  else
    v5 = v4;
  memset(v8, 0, sizeof(v8));
  v7 = a2;
  return (*(uint64_t (**)(char *, const __int32 **, uint64_t, size_t, _OWORD *))(v5[166] + 104))(a1, &v7, -1, a3, v8);
}

unint64_t wcstoul_l(const __int32 *a1, __int32 **a2, int a3, locale_t a4)
{
  _xlocale *v7;
  locale_t v8;
  _xlocale *v9;
  _xlocale *v10;
  const __int32 *v11;
  uint64_t v12;
  unsigned int v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  __int32 *v25;
  int *v27;

  v7 = (_xlocale *)&__global_locale;
  if (a4 == (locale_t)-1)
    v8 = (locale_t)&__global_locale;
  else
    v8 = a4;
  if (a4)
    v9 = v8;
  else
    v9 = (_xlocale *)&__c_locale;
  if (v9 != (_xlocale *)-1)
    v7 = v9;
  if (v9)
    v10 = v7;
  else
    v10 = (_xlocale *)&__c_locale;
  v11 = a1;
  do
  {
    while (1)
    {
      v13 = *v11++;
      v12 = v13;
      if (v13 <= 0x7F)
      {
        v14 = &_DefaultRuneLocale.__magic[4 * v12];
        goto LABEL_19;
      }
      if (v12 < 0x100)
        break;
      if ((___runetype_l(v12, v9) & 0x4000) == 0)
        goto LABEL_20;
    }
    v14 = (char *)(*(_QWORD *)(*((_QWORD *)v10 + 166) + 120) + 4 * v12);
LABEL_19:
    ;
  }
  while ((*((_DWORD *)v14 + 15) & 0x4000) != 0);
LABEL_20:
  if ((_DWORD)v12 == 43 || (_DWORD)v12 == 45)
  {
    v16 = *v11++;
    v15 = v16;
  }
  else
  {
    v15 = v12;
  }
  if ((a3 & 0xFFFFFFEF) != 0 || v15 != 48)
  {
    if (v15 == 48)
      v17 = 8;
    else
      v17 = 10;
    if (!a3)
      a3 = v17;
    goto LABEL_35;
  }
  if ((*v11 | 0x20) != 0x78)
  {
    v15 = 48;
    if (!a3)
      a3 = 8;
LABEL_35:
    if ((a3 - 37) >= 0xFFFFFFDD)
      goto LABEL_37;
    v18 = 0;
    goto LABEL_57;
  }
  v15 = v11[1];
  v11 += 2;
  a3 = 16;
LABEL_37:
  v18 = 0;
  v19 = 0;
  v20 = 0xFFFFFFFFFFFFFFFFLL / a3;
  while (1)
  {
    v21 = v15 - 48;
    if ((v15 - 48) >= 0xA)
    {
      if ((v15 - 65) > 0x19)
      {
        if ((v15 - 97) > 0x19)
          break;
        v21 = v15 - 87;
      }
      else
      {
        v21 = v15 - 55;
      }
    }
    if (v21 >= a3)
      break;
    v22 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v20)
    {
      if (v18 == v20 && v21 > ~((int)v20 * a3))
      {
        v18 = 0xFFFFFFFFFFFFFFFFLL / a3;
      }
      else
      {
        v18 = v18 * a3 + v21;
        v22 = 1;
      }
    }
    v23 = *v11++;
    v15 = v23;
    v19 = v22;
  }
  if (v19 < 0)
  {
    v27 = __error();
    v24 = 0;
    *v27 = 34;
    v18 = -1;
    if (!a2)
      return v18;
    goto LABEL_58;
  }
  if (!v19)
  {
LABEL_57:
    *__error() = 22;
    v24 = 1;
    if (!a2)
      return v18;
    goto LABEL_58;
  }
  v24 = 0;
  if ((_DWORD)v12 == 45)
    v18 = -(uint64_t)v18;
  if (a2)
  {
LABEL_58:
    if (v24)
      v25 = (__int32 *)a1;
    else
      v25 = (__int32 *)(v11 - 1);
    *a2 = v25;
  }
  return v18;
}

unint64_t wcstoul(const __int32 *a1, __int32 **a2, int a3)
{
  uint64_t v3;
  _xlocale *v4;
  _xlocale *v5;

  v3 = __locale_key;
  v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__global_locale;
  return wcstoul_l(a1, a2, a3, v5);
}

unint64_t wcstoull_l(const __int32 *a1, __int32 **a2, int a3, locale_t a4)
{
  _xlocale *v7;
  locale_t v8;
  _xlocale *v9;
  _xlocale *v10;
  const __int32 *v11;
  uint64_t v12;
  unsigned int v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  __int32 *v25;
  int *v27;

  v7 = (_xlocale *)&__global_locale;
  if (a4 == (locale_t)-1)
    v8 = (locale_t)&__global_locale;
  else
    v8 = a4;
  if (a4)
    v9 = v8;
  else
    v9 = (_xlocale *)&__c_locale;
  if (v9 != (_xlocale *)-1)
    v7 = v9;
  if (v9)
    v10 = v7;
  else
    v10 = (_xlocale *)&__c_locale;
  v11 = a1;
  do
  {
    while (1)
    {
      v13 = *v11++;
      v12 = v13;
      if (v13 <= 0x7F)
      {
        v14 = &_DefaultRuneLocale.__magic[4 * v12];
        goto LABEL_19;
      }
      if (v12 < 0x100)
        break;
      if ((___runetype_l(v12, v9) & 0x4000) == 0)
        goto LABEL_20;
    }
    v14 = (char *)(*(_QWORD *)(*((_QWORD *)v10 + 166) + 120) + 4 * v12);
LABEL_19:
    ;
  }
  while ((*((_DWORD *)v14 + 15) & 0x4000) != 0);
LABEL_20:
  if ((_DWORD)v12 == 43 || (_DWORD)v12 == 45)
  {
    v16 = *v11++;
    v15 = v16;
  }
  else
  {
    v15 = v12;
  }
  if ((a3 & 0xFFFFFFEF) != 0 || v15 != 48)
  {
    if (v15 == 48)
      v17 = 8;
    else
      v17 = 10;
    if (!a3)
      a3 = v17;
    goto LABEL_35;
  }
  if ((*v11 | 0x20) != 0x78)
  {
    v15 = 48;
    if (!a3)
      a3 = 8;
LABEL_35:
    if ((a3 - 37) >= 0xFFFFFFDD)
      goto LABEL_37;
    v18 = 0;
    goto LABEL_57;
  }
  v15 = v11[1];
  v11 += 2;
  a3 = 16;
LABEL_37:
  v18 = 0;
  v19 = 0;
  v20 = 0xFFFFFFFFFFFFFFFFLL / a3;
  while (1)
  {
    v21 = v15 - 48;
    if ((v15 - 48) >= 0xA)
    {
      if ((v15 - 65) > 0x19)
      {
        if ((v15 - 97) > 0x19)
          break;
        v21 = v15 - 87;
      }
      else
      {
        v21 = v15 - 55;
      }
    }
    if (v21 >= a3)
      break;
    v22 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v20)
    {
      if (v18 == v20 && v21 > ~((int)v20 * a3))
      {
        v18 = 0xFFFFFFFFFFFFFFFFLL / a3;
      }
      else
      {
        v18 = v18 * a3 + v21;
        v22 = 1;
      }
    }
    v23 = *v11++;
    v15 = v23;
    v19 = v22;
  }
  if (v19 < 0)
  {
    v27 = __error();
    v24 = 0;
    *v27 = 34;
    v18 = -1;
    if (!a2)
      return v18;
    goto LABEL_58;
  }
  if (!v19)
  {
LABEL_57:
    *__error() = 22;
    v24 = 1;
    if (!a2)
      return v18;
    goto LABEL_58;
  }
  v24 = 0;
  if ((_DWORD)v12 == 45)
    v18 = -(uint64_t)v18;
  if (a2)
  {
LABEL_58:
    if (v24)
      v25 = (__int32 *)a1;
    else
      v25 = (__int32 *)(v11 - 1);
    *a2 = v25;
  }
  return v18;
}

unint64_t wcstoull(const __int32 *a1, __int32 **a2, int a3)
{
  uint64_t v3;
  _xlocale *v4;
  _xlocale *v5;

  v3 = __locale_key;
  v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__global_locale;
  return wcstoull_l(a1, a2, a3, v5);
}

uintmax_t wcstoumax_l(const __int32 *nptr, __int32 **endptr, int base, locale_t a4)
{
  _xlocale *v7;
  locale_t v8;
  _xlocale *v9;
  _xlocale *v10;
  const __int32 *v11;
  uint64_t v12;
  unsigned int v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  uintmax_t v18;
  int v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  __int32 *v25;
  int *v27;

  v7 = (_xlocale *)&__global_locale;
  if (a4 == (locale_t)-1)
    v8 = (locale_t)&__global_locale;
  else
    v8 = a4;
  if (a4)
    v9 = v8;
  else
    v9 = (_xlocale *)&__c_locale;
  if (v9 != (_xlocale *)-1)
    v7 = v9;
  if (v9)
    v10 = v7;
  else
    v10 = (_xlocale *)&__c_locale;
  v11 = nptr;
  do
  {
    while (1)
    {
      v13 = *v11++;
      v12 = v13;
      if (v13 <= 0x7F)
      {
        v14 = &_DefaultRuneLocale.__magic[4 * v12];
        goto LABEL_19;
      }
      if (v12 < 0x100)
        break;
      if ((___runetype_l(v12, v9) & 0x4000) == 0)
        goto LABEL_20;
    }
    v14 = (char *)(*(_QWORD *)(*((_QWORD *)v10 + 166) + 120) + 4 * v12);
LABEL_19:
    ;
  }
  while ((*((_DWORD *)v14 + 15) & 0x4000) != 0);
LABEL_20:
  if ((_DWORD)v12 == 43 || (_DWORD)v12 == 45)
  {
    v16 = *v11++;
    v15 = v16;
  }
  else
  {
    v15 = v12;
  }
  if ((base & 0xFFFFFFEF) != 0 || v15 != 48)
  {
    if (v15 == 48)
      v17 = 8;
    else
      v17 = 10;
    if (!base)
      base = v17;
    goto LABEL_35;
  }
  if ((*v11 | 0x20) != 0x78)
  {
    v15 = 48;
    if (!base)
      base = 8;
LABEL_35:
    if ((base - 37) >= 0xFFFFFFDD)
      goto LABEL_37;
    v18 = 0;
    goto LABEL_57;
  }
  v15 = v11[1];
  v11 += 2;
  base = 16;
LABEL_37:
  v18 = 0;
  v19 = 0;
  v20 = 0xFFFFFFFFFFFFFFFFLL / base;
  while (1)
  {
    v21 = v15 - 48;
    if ((v15 - 48) >= 0xA)
    {
      if ((v15 - 65) > 0x19)
      {
        if ((v15 - 97) > 0x19)
          break;
        v21 = v15 - 87;
      }
      else
      {
        v21 = v15 - 55;
      }
    }
    if (v21 >= base)
      break;
    v22 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v20)
    {
      if (v18 == v20 && v21 > ~((int)v20 * base))
      {
        v18 = 0xFFFFFFFFFFFFFFFFLL / base;
      }
      else
      {
        v18 = v18 * base + v21;
        v22 = 1;
      }
    }
    v23 = *v11++;
    v15 = v23;
    v19 = v22;
  }
  if (v19 < 0)
  {
    v27 = __error();
    v24 = 0;
    *v27 = 34;
    v18 = -1;
    if (!endptr)
      return v18;
    goto LABEL_58;
  }
  if (!v19)
  {
LABEL_57:
    *__error() = 22;
    v24 = 1;
    if (!endptr)
      return v18;
    goto LABEL_58;
  }
  v24 = 0;
  if ((_DWORD)v12 == 45)
    v18 = -(uint64_t)v18;
  if (endptr)
  {
LABEL_58:
    if (v24)
      v25 = (__int32 *)nptr;
    else
      v25 = (__int32 *)(v11 - 1);
    *endptr = v25;
  }
  return v18;
}

uintmax_t wcstoumax(const __int32 *__nptr, __int32 **__endptr, int __base)
{
  uint64_t v3;
  _xlocale *v4;
  _xlocale *v5;

  v3 = __locale_key;
  v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__global_locale;
  return wcstoumax_l(__nptr, __endptr, __base, v5);
}

int wctob_l(int result, locale_t a2)
{
  locale_t v2;
  locale_t v3;
  _BYTE v4[6];
  _OWORD v5[8];

  memset(v5, 0, sizeof(v5));
  if (result != -1)
  {
    v2 = (locale_t)&__global_locale;
    if (a2 != (locale_t)-1)
      v2 = a2;
    if (a2)
      v3 = v2;
    else
      v3 = (locale_t)&__c_locale;
    if ((*(uint64_t (**)(_BYTE *, _QWORD, _OWORD *))(*((_QWORD *)v3 + 166) + 96))(v4, *(_QWORD *)&result, v5) == 1)return v4[0];
    else
      return -1;
  }
  return result;
}

int wctob(wint_t a1)
{
  uint64_t v1;
  _xlocale *v2;
  _xlocale *v3;

  v1 = __locale_key;
  v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2)
    v3 = v2;
  else
    v3 = (_xlocale *)&__global_locale;
  return wctob_l(a1, v3);
}

int wctomb_l(char *a1, __int32 a2, locale_t a3)
{
  locale_t v3;
  locale_t v4;

  v3 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1)
    v3 = a3;
  if (a3)
    v4 = v3;
  else
    v4 = (locale_t)&__c_locale;
  if (a1)
  {
    LODWORD(a1) = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*((_QWORD *)v4 + 166) + 96))(a1, *(_QWORD *)&a2, (uint64_t)v4 + 1168);
  }
  else
  {
    *((_OWORD *)v4 + 80) = 0u;
    *((_OWORD *)v4 + 79) = 0u;
    *((_OWORD *)v4 + 78) = 0u;
    *((_OWORD *)v4 + 77) = 0u;
    *((_OWORD *)v4 + 76) = 0u;
    *((_OWORD *)v4 + 75) = 0u;
    *((_OWORD *)v4 + 74) = 0u;
    *((_OWORD *)v4 + 73) = 0u;
  }
  return (int)a1;
}

int wctomb(char *a1, __int32 a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = __locale_key;
  v3 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (!v3)
    v3 = &__global_locale;
  if (v3 == (_QWORD *)-1)
    v4 = &__global_locale;
  else
    v4 = v3;
  if (a1)
  {
    LODWORD(a1) = (*(uint64_t (**)(char *, _QWORD, _QWORD *))(v4[166] + 96))(a1, *(_QWORD *)&a2, v4 + 146);
  }
  else
  {
    *((_OWORD *)v4 + 80) = 0u;
    *((_OWORD *)v4 + 79) = 0u;
    *((_OWORD *)v4 + 78) = 0u;
    *((_OWORD *)v4 + 77) = 0u;
    *((_OWORD *)v4 + 76) = 0u;
    *((_OWORD *)v4 + 75) = 0u;
    *((_OWORD *)v4 + 74) = 0u;
    *((_OWORD *)v4 + 73) = 0u;
  }
  return (int)a1;
}

wint_t towctrans_l(wint_t a1, wctrans_t a2, locale_t a3)
{
  wint_t v4;
  locale_t v5;
  _xlocale *v6;

  v4 = a1;
  v5 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1)
    v5 = a3;
  if (a3)
    v6 = v5;
  else
    v6 = (_xlocale *)&__c_locale;
  if (a2 == 2)
  {
    if (a1 <= 0x7F)
      return _DefaultRuneLocale.__mapupper[a1];
    return ___toupper_l(a1, v6);
  }
  else
  {
    if (a2 != 1)
    {
      *__error() = 22;
      return v4;
    }
    if (a1 <= 0x7F)
      return _DefaultRuneLocale.__maplower[a1];
    return ___tolower_l(a1, v6);
  }
}

wint_t towctrans(wint_t a1, wctrans_t a2)
{
  uint64_t v2;
  _xlocale *v3;
  _xlocale *v4;

  v2 = __locale_key;
  v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3)
    v4 = v3;
  else
    v4 = (_xlocale *)&__global_locale;
  return towctrans_l(a1, a2, v4);
}

wctrans_t wctrans(const char *a1)
{
  uint64_t v1;
  char **v2;
  wctrans_t v3;

  v1 = 0;
  v2 = &off_1E1E9D130;
  do
  {
    if (!_platform_strcmp())
      break;
    ++v1;
    v2 += 2;
  }
  while (v1 != 2);
  v3 = (wctrans_t)(&off_1E1E9D120)[2 * v1 + 1];
  if (!v3)
    *__error() = 22;
  return v3;
}

wctype_t wctype_l(const char *a1, locale_t a2)
{
  uint64_t i;
  locale_t v4;
  locale_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;

  for (i = 0; i != 32; i += 2)
  {
    if (!_platform_strcmp())
      return (wctype_t)(&wctype_l_props)[i + 1];
  }
  v4 = (locale_t)&__c_locale;
  v5 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1)
    v5 = a2;
  if (a2)
    v4 = v5;
  v6 = *(_QWORD *)(*((_QWORD *)v4 + 166) + 120);
  v7 = *(_DWORD *)(v6 + 3196);
  if (v7 < 1)
    return 0;
  v8 = *(_QWORD *)(v6 + 3200);
  v9 = v7 + 1;
  while (_platform_strncmp())
  {
    v8 += 20;
    if (--v9 < 2)
      return 0;
  }
  return *(_DWORD *)(v8 + 16);
}

wctype_t wctype(const char *a1)
{
  uint64_t v1;
  _xlocale *v2;
  _xlocale *v3;

  v1 = __locale_key;
  v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2)
    v3 = v2;
  else
    v3 = (_xlocale *)&__global_locale;
  return wctype_l(a1, v3);
}

int wcwidth(int result)
{
  uint64_t v1;
  _xlocale *v2;
  _xlocale *v3;
  _xlocale *v4;
  unsigned int v5;

  v1 = __locale_key;
  v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  v3 = (_xlocale *)&__global_locale;
  if (v2)
    v4 = v2;
  else
    v4 = (_xlocale *)&__global_locale;
  if (result)
  {
    if (result < 0x100)
    {
      if (v4 != (_xlocale *)-1)
        v3 = v4;
      v5 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 166) + 120) + 4 * result + 60);
    }
    else
    {
      v5 = ___runetype_l(result, v4);
    }
    if (v5 >> 29)
    {
      return v5 >> 30;
    }
    else if ((v5 & 0x40000) != 0)
    {
      return 1;
    }
    else
    {
      return -1;
    }
  }
  return result;
}

int wcwidth_l(int result, locale_t a2)
{
  _xlocale *v2;
  _xlocale *v3;
  locale_t v4;
  _xlocale *v5;
  unsigned int v6;

  v2 = (_xlocale *)&__c_locale;
  v3 = (_xlocale *)&__global_locale;
  if (a2 == (locale_t)-1)
    v4 = (locale_t)&__global_locale;
  else
    v4 = a2;
  if (a2)
    v5 = v4;
  else
    v5 = (_xlocale *)&__c_locale;
  if (result)
  {
    if (result < 0x100)
    {
      if (v5 != (_xlocale *)-1)
        v3 = v5;
      if (v5)
        v2 = v3;
      v6 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 166) + 120) + 4 * result + 60);
    }
    else
    {
      v6 = ___runetype_l(result, v5);
    }
    if (v6 >> 29)
    {
      return v6 >> 30;
    }
    else if ((v6 & 0x40000) != 0)
    {
      return 1;
    }
    else
    {
      return -1;
    }
  }
  return result;
}

char *__cdecl addr2ascii(int a1, const void *a2, int a3, char *a4)
{
  char *v4;
  in_addr v8;
  int *v9;
  int v10;

  v4 = a4;
  if (a4
    || (v4 = (char *)addr2ascii_staticbuf) != 0
    || (v4 = (char *)malloc_type_malloc(0x40uLL, 0x4FC188A6uLL), (addr2ascii_staticbuf = (uint64_t)v4) != 0))
  {
    if (a1 == 18)
    {
      if (a3 == 20)
      {
        link_ntoa((const sockaddr_dl *)a2);
        goto LABEL_10;
      }
    }
    else
    {
      if (a1 != 2)
      {
        v9 = __error();
        v4 = 0;
        v10 = 43;
LABEL_13:
        *v9 = v10;
        return v4;
      }
      if (a3 == 4)
      {
        v8.s_addr = *(_DWORD *)a2;
        inet_ntoa(v8);
LABEL_10:
        _platform_strcpy();
        return v4;
      }
    }
    v9 = __error();
    v4 = 0;
    v10 = 63;
    goto LABEL_13;
  }
  return v4;
}

int ascii2addr(int a1, const char *a2, void *a3)
{
  int *v5;
  int v6;
  char __s1[16];

  if (a1 == 18)
  {
    link_addr(a2, (sockaddr_dl *)a3);
    return 20;
  }
  else
  {
    if (a1 == 2)
    {
      __s1[0] = 0;
      strncat(__s1, a2, 0xFuLL);
      if (inet_aton(__s1, (in_addr *)a3))
        return 4;
      v5 = __error();
      v6 = 22;
    }
    else
    {
      v5 = __error();
      v6 = 43;
    }
    *v5 = v6;
    return -1;
  }
}

FILE *__cdecl open_memstream(char **__bufp, size_t *__sizep)
{
  char *v4;
  _QWORD *v5;
  void *v6;
  FILE *v7;
  FILE *v8;
  int v9;
  int v10;

  if (__bufp && __sizep)
  {
    v4 = (char *)malloc_type_calloc(1uLL, 1uLL, 0x81DA3B52uLL);
    *__bufp = v4;
    if (v4)
    {
      v5 = malloc_type_malloc(0x20uLL, 0x10900405C4C9827uLL);
      if (v5)
      {
        v6 = v5;
        *v5 = __bufp;
        v5[1] = __sizep;
        v5[2] = 0;
        v5[3] = 0;
        memstream_update((uint64_t)v5);
        v7 = funopen(v6, 0, (int (__cdecl *)(void *, const char *, int))memstream_write, (fpos_t (__cdecl *)(void *, fpos_t, int))memstream_seek, (int (__cdecl *)(void *))memstream_close);
        v8 = v7;
        if (v7)
        {
          fwide(v7, -1);
        }
        else
        {
          v10 = *__error();
          free(v6);
          free(*__bufp);
          *__bufp = 0;
          *__error() = v10;
        }
      }
      else
      {
        v9 = *__error();
        free(*__bufp);
        *__bufp = 0;
        v8 = 0;
        *__error() = v9;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v8 = 0;
    *__error() = 22;
  }
  return v8;
}

uint64_t memstream_update(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(result + 16);
  if ((v1 & 0x8000000000000000) != 0 || (v2 = *(_QWORD *)(result + 24), (v2 & 0x8000000000000000) != 0))
    memstream_update_cold_1();
  if (v1 >= v2)
    v1 = *(_QWORD *)(result + 24);
  **(_QWORD **)(result + 8) = v1;
  return result;
}

uint64_t memstream_write(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  LODWORD(v3) = a3;
  v6 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v7 = v5 + a3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFFELL)
    v7 = 0x7FFFFFFFFFFFFFFELL;
  if (v7 > v6)
  {
    v8 = 15 * v6 / 10;
    if ((unsigned __int128)(v6 * (__int128)15) >> 64 != (15 * v6) >> 63)
      v8 = 0x7FFFFFFFFFFFFFFELL;
    if (v8 <= v7)
      v6 = v7;
    else
      v6 = v8;
    v9 = malloc_type_realloc(**(void ***)a1, v6 + 1, 0xFDA2F0F9uLL);
    if (!v9)
      return 0xFFFFFFFFLL;
    v10 = v9;
    _platform_bzero();
    **(_QWORD **)a1 = v10;
    *(_QWORD *)(a1 + 16) = v6;
    v5 = *(_QWORD *)(a1 + 24);
  }
  if (v6 - v5 >= (int)v3)
    v3 = (int)v3;
  else
    v3 = v6 - v5;
  _platform_memmove();
  *(_QWORD *)(a1 + 24) += v3;
  memstream_update(a1);
  return v3;
}

uint64_t memstream_seek(uint64_t a1, int64_t a2, int a3)
{
  uint64_t v4;
  int *v5;
  int v6;

  switch(a3)
  {
    case 2:
      v4 = *(_QWORD *)(a1 + 16);
      if (a2 < 0)
      {
        a2 += v4;
        if (a2 < 0)
        {
          v5 = __error();
          v6 = 22;
          goto LABEL_13;
        }
      }
      else
      {
        if ((v4 ^ 0x7FFFFFFFFFFFFFFFuLL) < a2)
        {
          v5 = __error();
          v6 = 84;
LABEL_13:
          *v5 = v6;
          return -1;
        }
        a2 += v4;
      }
LABEL_15:
      *(_QWORD *)(a1 + 24) = a2;
      break;
    case 1:
      if (a2)
        memstream_seek_cold_2();
      break;
    case 0:
      if (a2 < 0)
        memstream_seek_cold_1();
      goto LABEL_15;
  }
  memstream_update(a1);
  return *(_QWORD *)(a1 + 24);
}

uint64_t memstream_close(void *a1)
{
  free(a1);
  return 0;
}

in_addr_t inet_lnaof(in_addr a1)
{
  int v1;
  int v2;

  v1 = bswap32(a1.s_addr);
  if (v1 >> 30 == 2)
    v2 = 0xFFFF;
  else
    v2 = 255;
  if (v1 >= 0)
    v2 = 0xFFFFFF;
  return v1 & v2;
}

in_addr inet_makeaddr(in_addr_t a1, in_addr_t a2)
{
  in_addr_t v2;
  unsigned int v3;
  in_addr_t v4;

  if (HIBYTE(a1))
    v2 = a2 | a1;
  else
    v2 = a2 | (a1 << 8);
  if (HIWORD(a1))
    v3 = v2;
  else
    v3 = (unsigned __int16)a2 | ((unsigned __int16)a1 << 16);
  v4 = a2 & 0xFFFFFF | (a1 << 24);
  if (a1 <= 0x7F)
    v3 = v4;
  return (in_addr)bswap32(v3);
}

char *__cdecl inet_net_ntop(int a1, const void *a2, int a3, char *a4, __darwin_size_t a5)
{
  __darwin_size_t v5;
  char *v6;
  unsigned __int8 *v8;
  char *v9;
  int *v10;
  int v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  int v15;
  signed int v16;
  int v17;
  signed int v18;
  unsigned int v19;
  signed int v20;
  int v21;
  int v22;
  signed int v23;
  char v24;
  _BOOL4 v25;
  _BOOL4 v26;
  signed int v27;
  int v28;
  char *v29;
  signed int v30;
  char *v31;
  int v32;
  char *v33;
  char *v34;
  int v35;
  char *v36;
  signed int v37;
  int v38;
  unsigned __int8 *v39;
  char v40;
  unsigned __int8 *v41;
  char v42;
  char v43;
  char *v44;
  char v49[50];
  _BYTE v50[16];

  v5 = a5;
  v6 = a4;
  v8 = (unsigned __int8 *)a2;
  if (a1 == 30)
  {
    if (a3 >= 0x81)
      goto LABEL_8;
    if (!a3)
    {
      strcpy(v49, "::");
      v29 = &v49[2];
      goto LABEL_88;
    }
    v12 = (a3 + 7) >> 3;
    _platform_memmove();
    _platform_bzero();
    if ((a3 & 7) != 0)
      v50[v12 - 1] &= -1 << (8 - (a3 & 7));
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = (a3 + 15) >> 4;
    if (v19 == 1)
      v19 = 2;
    do
    {
      if (v17 < v15)
        v20 = v16;
      else
        v20 = v18;
      if (v17 < v15)
        v21 = v15;
      else
        v21 = v17;
      if (v17 < v15)
        v22 = 0;
      else
        v22 = v15;
      if (v15)
      {
        v23 = v16;
      }
      else
      {
        v20 = v18;
        v21 = v17;
        v22 = 0;
        v23 = v13;
      }
      if (v50[v14 + 1] | v50[v14])
      {
        v18 = v20;
        v17 = v21;
        v15 = v22;
      }
      else
      {
        v16 = v23;
        ++v15;
      }
      v14 += 2;
      ++v13;
    }
    while (v14 < 2 * v19);
    v24 = 0;
    v25 = v15 != 0;
    v26 = v17 < v15;
    if (v25 && v26)
      v27 = v16;
    else
      v27 = v18;
    if (v25 && v26)
      v28 = v15;
    else
      v28 = v17;
    if (v28 == v19 || v27)
      goto LABEL_65;
    if (v28 == 7)
    {
      v24 = 0;
      if (!v50[14] || v50[15] == 1)
        goto LABEL_65;
    }
    else if (v28 != 6)
    {
      if (v28 != 5)
      {
        v24 = 0;
        goto LABEL_65;
      }
      v24 = 0;
      if (v50[10] != 255 || v50[11] != 255)
      {
LABEL_65:
        v37 = 0;
        v38 = -v19;
        v29 = v49;
        v39 = v50;
        v40 = v24 ^ 1;
        do
        {
          if (v28 && v37 >= v27 && v37 < v27 + v28)
          {
            if (v27 == v37)
              *v29++ = 58;
            if (v38 + v37 == -1)
              *v29++ = 58;
            v41 = v39 + 2;
          }
          else
          {
            if (v37 < 6)
              v42 = 1;
            else
              v42 = v40;
            if ((v42 & 1) != 0)
            {
              v44 = v49;
              if (v29 != v49)
              {
                *v29 = 58;
                v44 = v29 + 1;
              }
              v29 = &v44[sprintf(v44, "%x", __rev16(*(unsigned __int16 *)v39))];
              v41 = v39 + 2;
            }
            else
            {
              if (v37 == 6)
                v43 = 58;
              else
                v43 = 46;
              *v29 = v43;
              v41 = v39 + 1;
              v29 += sprintf(v29 + 1, "%u", *v39) + 1;
              if (a3 > 120 || v37 != 7)
              {
                *v29 = 46;
                v41 = v39 + 2;
                v29 += sprintf(v29 + 1, "%u", v39[1]) + 1;
              }
            }
          }
          ++v37;
          v39 = v41;
        }
        while (v38 + v37);
LABEL_88:
        sprintf(v29, "/%u", a3);
        if (_platform_strlen() + 1 <= a5)
        {
          v6 = a4;
          _platform_strcpy();
          return v6;
        }
        goto LABEL_89;
      }
    }
    v24 = 1;
    goto LABEL_65;
  }
  if (a1 != 2)
  {
    v10 = __error();
    v6 = 0;
    v11 = 47;
    goto LABEL_90;
  }
  if (a3 >= 0x21)
  {
LABEL_8:
    v10 = __error();
    v6 = 0;
    v11 = 22;
LABEL_90:
    *v10 = v11;
    return v6;
  }
  if (!a3)
  {
    if (a5 >= 2)
    {
      *(_WORD *)a4 = 48;
      v9 = a4 + 1;
      v5 = a5 - 1;
      goto LABEL_59;
    }
    goto LABEL_89;
  }
  if (a3 >= 8)
  {
    if (a5 < 6)
      goto LABEL_89;
    v30 = a3 >> 3;
    v8 = (unsigned __int8 *)a2 + 1;
    v31 = a4;
    while (1)
    {
      v32 = sprintf(v31, "%u", *(v8 - 1));
      v9 = &v31[v32];
      if (v30 < 2)
        break;
      *(_WORD *)v9 = 46;
      v33 = v9 + 1;
      v5 = &v31[v5] - v33;
      --v30;
      ++v8;
      v31 = v33;
      if (v5 < 6)
        goto LABEL_89;
    }
    v5 -= v32;
  }
  else
  {
    v9 = a4;
  }
  if ((a3 & 7) == 0)
    goto LABEL_59;
  if (v5 < 6)
  {
LABEL_89:
    v10 = __error();
    v6 = 0;
    v11 = 40;
    goto LABEL_90;
  }
  v34 = v6;
  if (v9 != v6)
  {
    *v9 = 46;
    v34 = v9 + 1;
  }
  v35 = sprintf(v34, "%u", (~(-1 << (a3 & 7)) << (8 - (a3 & 7))) & *v8);
  v36 = &v9[v5];
  v9 = &v34[v35];
  v5 = v36 - v9;
LABEL_59:
  if (v5 < 5)
    goto LABEL_89;
  sprintf(v9, "/%u", a3);
  return v6;
}

int inet_net_pton(int a1, const char *a2, void *a3, __darwin_size_t a4)
{
  __darwin_size_t v4;
  const char *v6;
  int v7;
  const char *v8;
  int v9;
  _BYTE *v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  const char *v24;
  char *v25;
  int v26;
  uint64_t v27;
  const char *v28;
  int v29;
  char *v30;
  char *v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  char *v44;
  int v45;
  uint64_t v46;
  char *v47;
  char *v48;
  int v49;
  char *v51;
  unsigned int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  unsigned int v59;
  const char *v60;
  int v61;
  uint64_t v62;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int v67;
  char *v70;
  const char *v71;
  int v72;
  _QWORD v73[2];

  v4 = a4;
  v6 = a2;
  if (a1 != 30)
  {
    if (a1 != 2)
    {
      v18 = __error();
      v19 = 47;
      goto LABEL_82;
    }
    v8 = a2 + 1;
    v7 = *a2;
    if (v7 != 48
      || (*(unsigned __int8 *)v8 | 0x20) != 0x78
      || v6[2] < 0
      || (_DefaultRuneLocale.__runetype[*((unsigned __int8 *)v6 + 2)] & 0x10000) == 0)
    {
      v9 = 2;
      if (v7 < 0 || (v7 - 48) > 9)
        goto LABEL_149;
      v10 = a3;
LABEL_10:
      v11 = 0;
      while (1)
      {
        v12 = _platform_memchr() - "0123456789";
        if (v12 >= 0xA)
          inet_net_pton_cold_1();
        v11 = v12 + 10 * v11;
        if (v11 > 255)
          goto LABEL_148;
        v14 = *v8++;
        v13 = v14;
        if (v14 < 1 || (v13 - 48) >= 0xA)
        {
          if (!v4)
            goto LABEL_152;
          --v4;
          *v10++ = v11;
          if (v13 == 46)
          {
            v16 = *v8++;
            v15 = v16;
            v9 = 2;
            if ((v16 & 0x80000000) == 0 && (v15 - 48) < 0xA)
              goto LABEL_10;
            goto LABEL_149;
          }
          if ((_BYTE)v13 && v13 != 47)
            goto LABEL_148;
          goto LABEL_90;
        }
      }
    }
    if (a4)
    {
      if (!v6[2])
        goto LABEL_148;
      v33 = 0;
      v34 = 0;
      v13 = *((unsigned __int8 *)v6 + 2);
      v8 = v6 + 3;
      v10 = a3;
      do
      {
        if ((_DefaultRuneLocale.__runetype[v13] & 0x10000) == 0)
          break;
        v35 = _platform_memchr() - "0123456789abcdef";
        if (v35 >= 0x10)
          inet_net_pton_cold_3();
        v36 = 16 * v34;
        if (!v33)
          v36 = 0;
        v34 = v35 | v36;
        if (v33 == 1)
        {
          if (!v4)
            goto LABEL_152;
          v33 = 0;
          --v4;
          *v10++ = v34;
        }
        else
        {
          v33 = 1;
        }
        v37 = *v8++;
        v13 = v37;
      }
      while (v37 > 0);
      if (!v33)
      {
LABEL_90:
        if (v13)
        {
          if (v13 == 47 && (*v8 & 0x80000000) == 0 && *(unsigned __int8 *)v8 - 48 <= 9 && v10 > a3)
          {
            v38 = 0;
            v51 = (char *)(v8 + 1);
            while (1)
            {
              v52 = _platform_memchr() - "0123456789";
              if (v52 >= 0xA)
                inet_net_pton_cold_2();
              v38 = v52 + 10 * v38;
              if (v38 > 32)
                break;
              v54 = *v51++;
              v53 = v54;
              if (v54 < 1 || (v53 - 48) >= 0xA)
              {
                v9 = 2;
                if (v53 || v10 == a3)
                  goto LABEL_149;
                if (v38 == -1)
                  goto LABEL_126;
                v55 = 8 * (v10 - (_BYTE *)a3);
                goto LABEL_144;
              }
            }
          }
          goto LABEL_148;
        }
        if (v10 != a3)
        {
LABEL_126:
          v64 = *(unsigned __int8 *)a3;
          if ((v64 & 0x80u) == 0)
            v65 = 8;
          else
            v65 = 16;
          if (v64 <= 0xBF)
            v66 = v65;
          else
            v66 = 24;
          if (v64 > 0xDF)
            v66 = 8;
          if (v64 > 0xEF)
            v66 = 32;
          v55 = 8 * (v10 - (_BYTE *)a3);
          if (v55 > v66)
            v66 = 8 * ((_DWORD)v10 - (_DWORD)a3);
          if (v64 == 224)
            v67 = 4;
          else
            v67 = 8;
          if (v66 == 8)
            v38 = v67;
          else
            v38 = v66;
LABEL_144:
          if (v55 >= v38)
            return v38;
          while (v4)
          {
            --v4;
            *v10++ = 0;
            if (v38 <= 8 * (v10 - (_BYTE *)a3))
              return v38;
          }
          goto LABEL_152;
        }
LABEL_148:
        v9 = 2;
LABEL_149:
        *__error() = v9;
        return -1;
      }
      if (v4)
      {
        --v4;
        *v10++ = 16 * v34;
        goto LABEL_90;
      }
    }
LABEL_152:
    v9 = 40;
    goto LABEL_149;
  }
  v73[0] = 0;
  v73[1] = 0;
  v17 = *(unsigned __int8 *)a2;
  if (v17 == 58)
  {
    v6 = a2 + 1;
    if (a2[1] != 58)
      goto LABEL_81;
    v72 = -1;
  }
  else
  {
    v72 = -1;
    if (!v17)
    {
      v30 = 0;
      v31 = (char *)v73;
      v32 = 1;
      goto LABEL_65;
    }
  }
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v70 = 0;
  v71 = v6;
  v23 = 0;
  v24 = v6 + 1;
  v25 = (char *)v73;
  while (1)
  {
    v26 = (char)v17;
    v27 = _platform_memchr();
    if (!v27)
      break;
    v28 = "0123456789abcdef";
LABEL_30:
    if (v20 > 3)
      goto LABEL_81;
    v21 = (v27 - (_DWORD)v28) | (16 * v21);
    ++v20;
    v22 = 1;
LABEL_32:
    v25 = (char *)v73 + v23;
    v29 = *(unsigned __int8 *)v24++;
    LOBYTE(v17) = v29;
    if (!v29)
      goto LABEL_60;
  }
  v27 = _platform_memchr();
  if (v27)
  {
    LODWORD(v28) = "0123456789ABCDEF";
    goto LABEL_30;
  }
  if (v26 == 58)
  {
    if (v22)
    {
      if (!*v24)
        goto LABEL_81;
      if (v23 > 14)
        return 0;
      v22 = 0;
      v20 = 0;
      *(_WORD *)((char *)v73 + v23) = bswap32(v21) >> 16;
      v23 += 2;
      v71 = v24;
      v21 = 0;
    }
    else
    {
      if (v70)
        goto LABEL_81;
      v22 = 0;
      v70 = v25;
      v71 = v24;
    }
    goto LABEL_32;
  }
  if (v26 == 46)
  {
    if (v23 > 12)
      goto LABEL_81;
    v56 = v23 + 4;
    v57 = v25;
LABEL_109:
    v58 = 0;
    v59 = 0;
    v60 = v71;
    while (1)
    {
      v61 = v71[v58];
      if (!v71[v58])
        break;
      v62 = _platform_memchr();
      if (!v62)
      {
        if ((v61 & 0xFFFFFFFE) != 0x2E || v57 - v25 > 3)
          goto LABEL_81;
        v71 += v58 + 1;
        *v57++ = v59;
        if (v61 != 47)
          goto LABEL_109;
        if ((int)getbits((uint64_t)&v60[v58 + 1], &v72) <= 0)
        {
LABEL_81:
          v18 = __error();
          v19 = 2;
          goto LABEL_82;
        }
LABEL_157:
        v32 = 0;
        v31 = (char *)v73 + v56;
        goto LABEL_64;
      }
      if (!(_DWORD)v58 || v59)
      {
        v59 = v62 - "0123456789" + 10 * v59;
        ++v58;
        if (v59 < 0x100)
          continue;
      }
      goto LABEL_81;
    }
    if (!(_DWORD)v58 || v57 - v25 > 3)
      goto LABEL_81;
    *v57 = v59;
    goto LABEL_157;
  }
  if (v26 != 47 || (int)getbits((uint64_t)v24, &v72) <= 0)
    goto LABEL_81;
LABEL_60:
  v31 = (char *)v73 + v23;
  if (v22)
  {
    if (v23 > 14)
      goto LABEL_81;
    *(_WORD *)v31 = bswap32(v21) >> 16;
    v31 += 2;
  }
  v32 = 1;
LABEL_64:
  v30 = v70;
LABEL_65:
  if (v72 == -1)
    v38 = 128;
  else
    v38 = v72;
  v72 = v38;
  v39 = v38 + 15;
  if (v38 < -15)
    v39 = v38 + 30;
  v40 = v39 >> 4;
  if (v40 <= 2)
    v40 = 2;
  v41 = (2 * v40);
  v42 = v32 == 0;
  v43 = 16;
  if (!v42)
    v43 = v41;
  v44 = (char *)v73 + v43;
  if (v30)
  {
    if (v31 == v44)
      goto LABEL_81;
    v45 = (_DWORD)v31 - (_DWORD)v30;
    if ((int)v31 - (int)v30 >= 1)
    {
      v46 = (v45 + 1) - 1;
      v47 = (char *)v73 + v43 - 1;
      v48 = &v30[v45 - 1];
      do
      {
        *v47-- = *v48;
        *v48-- = 0;
        --v46;
      }
      while (v46);
      v38 = v72;
    }
  }
  else if (v31 != v44)
  {
    goto LABEL_81;
  }
  v49 = v38 + 7;
  if (v38 < -7)
    v49 = v38 + 14;
  if ((uint64_t)v49 >> 3 <= a4)
  {
    _platform_memmove();
  }
  else
  {
    v18 = __error();
    v19 = 40;
LABEL_82:
    *v18 = v19;
    return -1;
  }
  return v38;
}

uint64_t getbits(uint64_t a1, int *a2)
{
  uint64_t v4;
  int v5;
  uint64_t result;

  v4 = 0;
  v5 = 0;
  while (*(_BYTE *)(a1 + v4))
  {
    result = _platform_memchr();
    if (!result)
      return result;
    if (!(_DWORD)v4 || v5)
    {
      v5 = result - "0123456789" + 10 * v5;
      ++v4;
      if (v5 < 129)
        continue;
    }
    return 0;
  }
  if ((_DWORD)v4)
  {
    *a2 = v5;
    return 1;
  }
  return 0;
}

char *__cdecl inet_neta(in_addr_t a1, char *a2, __darwin_size_t a3)
{
  char *v4;
  in_addr_t v5;
  char *v6;
  int v7;
  unsigned int v8;
  char *v9;

  v4 = a2;
  if (!a1)
    goto LABEL_10;
  v5 = a1;
  v6 = a2;
  do
  {
    v8 = v5;
    v7 = (unint64_t)v5 >> 24;
    v5 <<= 8;
    if (!is_mul_ok(0x100u, v8))
    {
      if (a3 < 5)
        goto LABEL_11;
      v9 = &v6[sprintf(v6, "%u", v7)];
      if (v5)
        *(_WORD *)v9++ = 46;
      a3 = &v6[a3] - v9;
      v6 = v9;
    }
  }
  while (v5);
  if (v6 == v4)
  {
LABEL_10:
    if (a3 >= 8)
    {
      *(_QWORD *)v4 = 0x302E302E302E30;
    }
    else
    {
LABEL_11:
      v4 = 0;
      *__error() = 40;
    }
  }
  return v4;
}

in_addr_t inet_netof(in_addr a1)
{
  int v1;
  char v2;

  v1 = bswap32(a1.s_addr);
  if (v1 >> 30 == 2)
    v2 = 16;
  else
    v2 = 8;
  if (v1 >= 0)
    v2 = 24;
  return v1 >> v2;
}

in_addr_t inet_network(const char *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t StatusReg;
  const char *v4;
  int v5;
  _BOOL4 v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  __uint32_t v12;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  in_addr_t result;
  _RuneLocale *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 v23[16];

  v1 = 0;
  v2 = __locale_key;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    v4 = a1 + 1;
    v5 = *(unsigned __int8 *)a1;
    v6 = v5 == 48;
    if (v5 == 48)
    {
      v7 = 8;
    }
    else
    {
      v4 = a1;
      v7 = 10;
    }
    v8 = *(unsigned __int8 *)v4;
    if ((v8 | 0x20) == 0x78)
    {
      v9 = *(unsigned __int8 *)++v4;
      v8 = v9;
      v7 = 16;
    }
    v10 = 0;
    if (v8)
    {
      while (1)
      {
        v11 = (char)v8;
        if (v8 - 48 > 9)
        {
          if (v7 != 16)
            break;
          v12 = _DefaultRuneLocale.__runetype[v8];
          if ((v12 & 0x10000) == 0)
            break;
          if ((v8 & 0x80) != 0)
          {
            v13 = *(_QWORD **)(StatusReg + 8 * v2);
            if (!v13)
              v13 = &__global_locale;
            v12 = *(_DWORD *)(*(_QWORD *)(v13[166] + 120) + 4 * v8 + 60);
          }
          v14 = 16 * v10;
          if ((v12 & 0x1000) != 0)
            v15 = -97;
          else
            v15 = -65;
          v10 = (v14 | 0xA) + v11 + v15;
        }
        else
        {
          if (v7 == 8 && (v8 & 0xFE) == 0x38)
            return -1;
          v10 = (char)v8 + v10 * v7 - 48;
        }
        v16 = *(unsigned __int8 *)++v4;
        LOBYTE(v8) = v16;
        v6 = 1;
        if (!v16)
          goto LABEL_25;
      }
    }
    if (!v6)
      return -1;
LABEL_25:
    result = -1;
    if (v1 > 3 || v10 > 0xFF)
      return result;
    if (v8 != 46)
      break;
    *(_DWORD *)&v23[4 * v1++] = v10;
    a1 = v4 + 1;
  }
  if ((_BYTE)v8)
  {
    if ((v8 & 0x80) != 0)
    {
      v19 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
      if (!v19)
        v19 = &__global_locale;
      v18 = *(_RuneLocale **)(v19[166] + 120);
    }
    else
    {
      v18 = &_DefaultRuneLocale;
    }
    if ((v18->__runetype[v8] & 0x4000) == 0)
      return -1;
  }
  *(_DWORD *)&v23[4 * v1] = v10;
  v20 = (4 * v1 + 4) >> 2;
  if (v20 > 4)
    return -1;
  if (!(_DWORD)v20)
    return 0;
  v21 = 0;
  result = 0;
  v22 = v1 + 1;
  do
    result = v23[4 * v21++] | (result << 8);
  while (v22 != v21);
  return result;
}

void link_addr(const char *a1, sockaddr_dl *a2)
{
  char *sdl_data;
  u_char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;

  sdl_data = a2->sdl_data;
  v5 = &a2->sdl_len + a2->sdl_len;
  _platform_bzero();
  v6 = 0;
  v7 = 0;
  v8 = 0;
  a2->sdl_family = 18;
  v9 = sdl_data;
  while (1)
  {
    v10 = v7 & 0xFFFFFFF3;
    v11 = *(unsigned __int8 *)a1;
    if ((v11 - 48) <= 9)
    {
      v8 = (v11 - 48);
      goto LABEL_14;
    }
    if ((v11 - 97) <= 5)
    {
      v8 = (v11 - 87);
      goto LABEL_14;
    }
    if ((v11 - 65) <= 5)
    {
      v8 = (v11 - 55);
      goto LABEL_14;
    }
    if (!*a1)
      break;
    if (v10 || (v11 & 0xFFFFFFDF) - 65 >= 0x1A)
    {
      v10 |= 8u;
      goto LABEL_14;
    }
    ++a1;
    v10 = 12;
LABEL_15:
    *v9++ = v11;
    v12 = v6;
    v7 = v10;
LABEL_20:
    v6 = v12;
    if (v9 >= (char *)v5)
      goto LABEL_23;
  }
  v10 |= 4u;
LABEL_14:
  ++a1;
  v7 = 1;
  v12 = v8;
  switch(v10)
  {
    case 0u:
    case 0xCu:
      goto LABEL_15;
    case 1u:
      v12 = (v8 + 16 * v6);
      v7 = 2;
      goto LABEL_20;
    case 2u:
      *v9++ = v6;
      v12 = v8;
      goto LABEL_20;
    case 3u:
      goto LABEL_20;
    case 5u:
    case 6u:
      *v9 = v6;
      LODWORD(v9) = (_DWORD)v9 + 1;
      break;
    case 7u:
      break;
    case 8u:
      a2->sdl_nlen = (_BYTE)v9 - (_BYTE)sdl_data;
      v7 = 3;
      v12 = v6;
      goto LABEL_20;
    default:
      v12 = 0;
      *v9++ = v6;
      v7 = 3;
      goto LABEL_20;
  }
LABEL_23:
  a2->sdl_alen = (_BYTE)v9 - (_BYTE)sdl_data - a2->sdl_nlen;
  v13 = (_DWORD)v9 - (_DWORD)a2;
  if (v13 >= 0x15)
    a2->sdl_len = v13;
}

char *__cdecl link_ntoa(const sockaddr_dl *a1)
{
  uint64_t sdl_nlen;
  uint64_t sdl_alen;
  char *v3;
  char *sdl_data;
  char *v6;
  char v7;
  unsigned __int8 *v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;

  sdl_nlen = a1->sdl_nlen;
  sdl_alen = a1->sdl_alen;
  if ((unint64_t)(3 * sdl_alen + sdl_nlen) <= 0x3F)
  {
    sdl_data = a1->sdl_data;
    v6 = link_ntoa_obuf;
    if (a1->sdl_nlen)
    {
      _platform_memmove();
      v6 = &link_ntoa_obuf[a1->sdl_nlen];
      if (a1->sdl_alen)
        *v6++ = 58;
    }
    if ((_DWORD)sdl_alen)
    {
      v7 = 0;
      v8 = (unsigned __int8 *)&sdl_data[sdl_nlen];
      do
      {
        if ((v7 & 1) != 0)
          *v6++ = 46;
        v10 = *v8++;
        v9 = v10;
        if (v10 < 0x10)
        {
          v11 = 1;
        }
        else
        {
          v6[1] = hexlist[v9 & 0xF];
          v9 >>= 4;
          v11 = 2;
        }
        v3 = &v6[v11];
        *v6 = hexlist[v9];
        v7 = 1;
        v6 = v3;
      }
      while (v8 < (unsigned __int8 *)&sdl_data[sdl_nlen + sdl_alen]);
    }
    else
    {
      v3 = v6;
    }
  }
  else
  {
    v3 = link_ntoa_obuf;
  }
  *v3 = 0;
  return link_ntoa_obuf;
}

unsigned int inet_nsap_addr(const char *a1, unsigned __int8 *a2, int a3)
{
  const char *v3;
  uint64_t v4;
  const char *v5;
  unsigned int result;
  unint64_t StatusReg;
  const char *v9;
  const char *v10;
  __uint32_t v11;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  char v17;
  char v18;

  if (*a1 == 48)
  {
    v3 = a1;
    if ((*((unsigned __int8 *)a1 + 1) | 0x20) == 0x78)
    {
      v5 = a1 + 2;
      LOBYTE(v4) = a1[2];
      if ((_BYTE)v4 && a3 != 0)
      {
        result = 0;
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        while (1)
        {
          v9 = v3 + 3;
          v3 = v5;
          while (1)
          {
            v10 = v9;
            if (v4 > 0x2Fu || ((1 << v4) & 0xC80000000000) == 0)
              break;
            ++v9;
            LOBYTE(v4) = *v10;
            v3 = v10;
            if (!*v10)
              return result;
          }
          if ((v4 & 0x80) != 0)
            break;
          v11 = _DefaultRuneLocale.__runetype[v4];
          if ((v11 & 0x1000) != 0)
          {
            v12 = *(_QWORD **)(StatusReg + 8 * __locale_key);
            if (!v12)
              v12 = &__global_locale;
            v4 = *(unsigned __int8 *)(*(_QWORD *)(v12[166] + 120) + 4 * v4 + 2108);
            v11 = _DefaultRuneLocale.__runetype[v4];
          }
          if ((v11 & 0x10000) == 0)
            break;
          v13 = v4 - 48 >= 0xA ? 9 : 0;
          v14 = *(unsigned __int8 *)v10;
          if (!v14)
            break;
          v15 = *(_QWORD **)(StatusReg + 8 * __locale_key);
          if (!v15)
            v15 = &__global_locale;
          v16 = *(_DWORD *)(*(_QWORD *)(v15[166] + 120) + 4 * v14 + 2108);
          if ((_DefaultRuneLocale.__runetype[v16] & 0x10000) == 0)
            break;
          v17 = v13 + v4;
          v5 = v3 + 2;
          if (v16 - 48 >= 0xA)
            v18 = -55;
          else
            v18 = -48;
          *a2++ = (v18 + v16) | (16 * v17);
          ++result;
          LOBYTE(v4) = *v5;
          if (!*v5 || result >= a3)
            return result;
        }
      }
    }
  }
  return 0;
}

char *__cdecl inet_nsap_ntoa(int a1, const unsigned __int8 *a2, char *a3)
{
  char *result;
  char *v7;
  int v8;
  uint64_t v9;
  int v10;
  char v11;
  unsigned int v12;
  char v13;
  char v14;
  char *v15;

  result = (char *)malloc_type_malloc(0x2FDuLL, 0x54CF7871uLL);
  if (result)
  {
    if (a3)
      result = a3;
    *(_WORD *)result = 30768;
    v7 = result + 2;
    if (a1 >= 255)
      v8 = 255;
    else
      v8 = a1;
    if (a1 < 1)
    {
      v15 = result + 2;
    }
    else
    {
      v9 = 0;
      if (v8 <= 1)
        v10 = 1;
      else
        v10 = v8;
      do
      {
        if (a2[v9] >= 0xA0u)
          v11 = 55;
        else
          v11 = 48;
        *v7 = v11 + (a2[v9] >> 4);
        v12 = a2[v9] & 0xF;
        if (v12 >= 0xA)
          v13 = 55;
        else
          v13 = 48;
        v14 = v13 + v12;
        v15 = v7 + 2;
        v7[1] = v14;
        if ((v9 & 1) == 0 && (int)v9 + 1 < v8)
        {
          v15 = v7 + 3;
          v7[2] = 46;
        }
        ++v9;
        v7 = v15;
      }
      while (v10 != (_DWORD)v9);
    }
    *v15 = 0;
  }
  return result;
}

int sockatmark(int a1)
{
  int v2;

  v2 = 0;
  if (ioctl(a1, 0x40047307uLL, &v2) == -1)
    return -1;
  else
    return v2;
}

int setipv4sourcefilter(int a1, in_addr a2, in_addr a3, uint32_t a4, uint32_t a5, in_addr *a6)
{
  uint32_t v11;
  uint32_t v12;
  int v13;
  int *v14;
  int v15;
  uint64_t v16;
  sockaddr_storage *v17;
  sockaddr_storage *v18;
  sockaddr_storage *v19;
  in_addr_t s_addr;
  sockaddr v22;

  if (a1 == -1)
    setipv4sourcefilter_cold_1();
  if ((a3.s_addr & 0xF0) != 0xE0 || a4 - 3 <= 0xFFFFFFFD)
  {
    v14 = __error();
    v15 = 22;
LABEL_16:
    *v14 = v15;
    return -1;
  }
  v11 = __inaddr_to_index(a2.s_addr);
  if (!v11)
  {
    v14 = __error();
    v15 = 49;
    goto LABEL_16;
  }
  v12 = v11;
  memset(&v22, 0, 128);
  *(_WORD *)&v22.sa_len = 528;
  *(in_addr *)&v22.sa_data[2] = a3;
  if (!a5 && !a6)
    return setsourcefilter(a1, v11, &v22, 0x10u, a4, 0, 0);
  v16 = a5;
  v17 = (sockaddr_storage *)malloc_type_calloc(a5, 0x80uLL, 0x1000040AE2C30F4uLL);
  if (!v17)
  {
    v14 = __error();
    v15 = 12;
    goto LABEL_16;
  }
  v18 = v17;
  if (a5)
  {
    v19 = v17;
    do
    {
      *(_WORD *)&v19->ss_len = 528;
      s_addr = a6->s_addr;
      ++a6;
      *(_DWORD *)&v19->__ss_pad1[2] = s_addr;
      ++v19;
      --v16;
    }
    while (v16);
  }
  v13 = setsourcefilter(a1, v12, &v22, 0x10u, a4, a5, v17);
  free(v18);
  return v13;
}

char *__inaddr_to_index(int a1)
{
  ifaddrs *v2;
  ifaddrs *v3;
  sockaddr *ifa_addr;
  char *ifa_name;
  ifaddrs *v7;
  sockaddr *v8;
  ifaddrs *v9;

  v9 = 0;
  if (getifaddrs(&v9) < 0)
    return 0;
  v2 = v9;
  if (v9)
  {
    v3 = v9;
    while (1)
    {
      ifa_addr = v3->ifa_addr;
      if (ifa_addr)
      {
        if (ifa_addr->sa_family == 2 && *(_DWORD *)&ifa_addr->sa_data[2] == a1)
          break;
      }
      v3 = v3->ifa_next;
      if (!v3)
        goto LABEL_8;
    }
    ifa_name = v3->ifa_name;
    if (ifa_name)
    {
      v7 = v9;
      while (1)
      {
        v8 = v7->ifa_addr;
        if (v8)
        {
          if (v8->sa_family == 18 && !_platform_strcmp())
            break;
        }
        v7 = v7->ifa_next;
        if (!v7)
          goto LABEL_18;
      }
      ifa_name = (char *)*(unsigned __int16 *)v8->sa_data;
      if (!*(_WORD *)v8->sa_data)
LABEL_18:
        __inaddr_to_index_cold_1();
    }
  }
  else
  {
LABEL_8:
    ifa_name = 0;
  }
  MEMORY[0x18D767A3C](v2);
  return ifa_name;
}

int setsourcefilter(int a1, uint32_t a2, sockaddr *a3, socklen_t a4, uint32_t a5, uint32_t a6, sockaddr_storage *a7)
{
  int *v7;
  int v8;
  int sa_family;
  int v13;
  _DWORD v14[3];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  sockaddr_storage *v24;

  if (a5 - 3 <= 0xFFFFFFFD)
    goto LABEL_2;
  sa_family = a3->sa_family;
  if (sa_family == 30)
  {
    if (a4 == 28 && a3->sa_data[6] == 255)
    {
      v13 = 41;
      goto LABEL_13;
    }
  }
  else
  {
    if (sa_family != 2)
    {
      v7 = __error();
      v8 = 47;
      goto LABEL_3;
    }
    if (a4 == 16 && (*(_DWORD *)&a3->sa_data[2] & 0xF0) == 0xE0)
    {
      v13 = 0;
LABEL_13:
      v23 = 0;
      v22 = 0u;
      v21 = 0u;
      v20 = 0u;
      v19 = 0u;
      v18 = 0u;
      v17 = 0u;
      v16 = 0u;
      v15 = 0u;
      v14[0] = a2;
      v14[1] = a5;
      v14[2] = a6;
      _platform_memmove();
      v24 = a7;
      return setsockopt(a1, v13, 74, v14, 0x98u);
    }
  }
LABEL_2:
  v7 = __error();
  v8 = 22;
LABEL_3:
  *v7 = v8;
  return -1;
}

int getipv4sourcefilter(int a1, in_addr a2, in_addr a3, uint32_t *a4, uint32_t *a5, in_addr *a6)
{
  size_t v9;
  in_addr *v10;
  int *v12;
  int v13;
  int v14;
  uint32_t v16;
  uint32_t v17;
  sockaddr_storage *v18;
  sockaddr_storage *v19;
  uint32_t v20;
  uint32_t v21;
  unint64_t v22;
  in_addr_t *v23;
  unint64_t v24;
  sockaddr v25;

  if (a1 == -1)
    getipv4sourcefilter_cold_1();
  if (!a4)
    getipv4sourcefilter_cold_2();
  if (!a5)
    getipv4sourcefilter_cold_3();
  v9 = *a5;
  *a5 = 0;
  if ((a3.s_addr & 0xF0) != 0xE0 || (v10 = a6) == 0 && (_DWORD)v9)
  {
    v12 = __error();
    v13 = 22;
LABEL_8:
    *v12 = v13;
    return -1;
  }
  v16 = __inaddr_to_index(a2.s_addr);
  if (!v16)
  {
    v12 = __error();
    v13 = 49;
    goto LABEL_8;
  }
  v17 = v16;
  memset(&v25, 0, 128);
  *(_WORD *)&v25.sa_len = 528;
  *(in_addr *)&v25.sa_data[2] = a3;
  if (!v10 && !(_DWORD)v9)
    return getsourcefilter(a1, v16, &v25, 0x10u, a4, a5, 0);
  v18 = (sockaddr_storage *)malloc_type_calloc(v9, 0x80uLL, 0x1000040AE2C30F4uLL);
  if (!v18)
  {
    v12 = __error();
    v13 = 12;
    goto LABEL_8;
  }
  v19 = v18;
  v14 = getsourcefilter(a1, v17, &v25, 0x10u, a4, a5, v18);
  v20 = *a5;
  if (*a5)
  {
    if (v9 >= v20)
      v21 = *a5;
    else
      v21 = v9;
    if (v21)
    {
      v22 = 0;
      v23 = (in_addr_t *)&v19->__ss_pad1[2];
      do
      {
        if (*((_BYTE *)v23 - 3) == 2)
        {
          v10->s_addr = *v23;
          ++v10;
          v20 = *a5;
        }
        v23 += 32;
        ++v22;
        if (v9 >= v20)
          v24 = v20;
        else
          v24 = v9;
      }
      while (v22 < v24);
    }
    free(v19);
  }
  return v14;
}

int getsourcefilter(int a1, uint32_t a2, sockaddr *a3, socklen_t a4, uint32_t *a5, uint32_t *a6, sockaddr_storage *a7)
{
  uint32_t v11;
  int sa_family;
  int v13;
  int *v14;
  int v15;
  int result;
  uint32_t v17;
  socklen_t v18;
  uint32_t v19;
  uint32_t v20;
  uint32_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  sockaddr_storage *v31;

  if (!a5 || !a2 || !a3 || !a6)
    goto LABEL_12;
  v11 = *a6;
  *a6 = 0;
  *a5 = 0;
  sa_family = a3->sa_family;
  if (sa_family != 30)
  {
    if (sa_family != 2)
    {
      v14 = __error();
      v15 = 47;
      goto LABEL_13;
    }
    if (a4 == 16 && (*(_DWORD *)&a3->sa_data[2] & 0xF0) == 0xE0)
    {
      v13 = 0;
      goto LABEL_17;
    }
LABEL_12:
    v14 = __error();
    v15 = 22;
LABEL_13:
    *v14 = v15;
    return -1;
  }
  if (a4 != 28 || a3->sa_data[6] != 255)
    goto LABEL_12;
  v13 = 41;
LABEL_17:
  v18 = 152;
  v19 = a2;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0;
  v20 = 0;
  v21 = v11;
  _platform_memmove();
  v31 = a7;
  result = getsockopt(a1, v13, 74, &v19, &v18);
  if (!result)
  {
    v17 = v20;
    *a6 = v21;
    *a5 = v17;
  }
  return result;
}

nl_catd catopen(const char *a1, int a2)
{
  int *v4;
  int v5;
  const char *v6;
  const char *v7;
  int v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  char *v14;
  const char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;
  char *v21;
  int v22;
  int v23;
  int v24;
  stat v25;
  char *__stringp;
  char v27[1024];

  memset(&v25, 0, sizeof(v25));
  if (!a1 || !*a1)
  {
    v4 = __error();
    v5 = 22;
LABEL_6:
    *v4 = v5;
    return (nl_catd)-1;
  }
  if (_platform_strchr())
    return (nl_catd)loadCat();
  if (a2 == 1)
    v6 = querylocale(4, 0);
  else
    v6 = getenv("LANG");
  v7 = v6;
  if (!v6
    || (v8 = *(unsigned __int8 *)v6, !*v6)
    || (unint64_t)_platform_strlen() > 0x1F
    || v8 == 46 && (!v7[1] || v7[1] == 46 && !v7[2])
    || _platform_strchr())
  {
    v7 = "C";
  }
  v9 = strdup(v7);
  if (!v9)
    return (nl_catd)-1;
  v10 = v9;
  v11 = (_BYTE *)_platform_strchr();
  if (v11)
    *v11 = 0;
  v12 = (_BYTE *)_platform_strchr();
  if (v12)
    *v12 = 0;
  v13 = (_BYTE *)_platform_strchr();
  if (v13)
    *v13 = 0;
  v14 = getenv("NLSPATH");
  if (!v14 || (v15 = v14, issetugid()))
    v15 = "/usr/share/nls/%L/%N.cat:/usr/share/nls/%N/%L:/usr/local/share/nls/%L/%N.cat:/usr/local/share/nls/%N/%L";
  v16 = strdup(v15);
  __stringp = v16;
  if (!v16)
  {
    v24 = *__error();
    free(v10);
    *__error() = v24;
    return (nl_catd)-1;
  }
  v17 = v16;
  while (2)
  {
    v18 = strsep(&__stringp, ":");
    if (!v18)
    {
      free(v10);
      free(v17);
      v4 = __error();
      v5 = 2;
      goto LABEL_6;
    }
    v19 = v18;
    v20 = *v18;
    if (*v18)
    {
      v21 = v27;
      goto LABEL_38;
    }
    v19 = v18 - 1;
    v21 = v27;
LABEL_57:
    if (_platform_strlcpy() >= (unint64_t)(int)(v27 - (_DWORD)v21 + 1023))
    {
LABEL_61:
      free(v10);
      free(v17);
      v4 = __error();
      v5 = 63;
      goto LABEL_6;
    }
    for (v21 += _platform_strlen(); ; ++v21)
    {
      v23 = *++v19;
      v20 = v23;
      if (!v23)
        break;
LABEL_38:
      if (v20 == 37)
      {
        v22 = v19[1];
        if (v22 > 98)
        {
          switch(v22)
          {
            case 'c':
              ++v19;
              goto LABEL_57;
            case 'l':
              ++v19;
              goto LABEL_57;
            case 't':
              ++v19;
              goto LABEL_57;
          }
        }
        else
        {
          switch(v22)
          {
            case '%':
              ++v19;
              break;
            case 'L':
              ++v19;
              goto LABEL_57;
            case 'N':
              ++v19;
              goto LABEL_57;
          }
        }
        if ((unint64_t)(v21 - v27) > 0x3FE)
          goto LABEL_61;
        LOBYTE(v20) = *v19;
      }
      else if ((unint64_t)(v21 - v27) > 0x3FE)
      {
        goto LABEL_61;
      }
      *v21 = v20;
    }
    *v21 = 0;
    if (stat(v27, &v25))
      continue;
    break;
  }
  free(v10);
  free(v17);
  return (nl_catd)loadCat();
}

uint64_t loadCat()
{
  FILE **v0;
  FILE **v1;
  int v2;
  FILE *v3;
  int v4;
  signed int v5;
  FILE *v6;
  int v7;
  off_t v8;
  FILE *v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  int v13;
  __int128 __ptr;
  __int128 v16;

  v0 = (FILE **)malloc_type_malloc(0x20uLL, 0x1020040DE3E3027uLL);
  if (!v0)
    return -1;
  v1 = v0;
  v2 = open_NOCANCEL();
  if (v2 == -1)
  {
    v13 = *__error();
LABEL_20:
    free(v1);
LABEL_30:
    *__error() = v13;
    return -1;
  }
  v3 = fdopen(v2, "r");
  *v1 = v3;
  if (!v3)
  {
    v13 = *__error();
    close_NOCANCEL();
    goto LABEL_20;
  }
  __ptr = 0u;
  v16 = 0u;
  if (fread(&__ptr, 0x20uLL, 1uLL, v3) != 1 || (_QWORD)__ptr != 0x2A6C75677A616E2ALL)
  {
LABEL_28:
    fclose(*v1);
    fprintf(__stderrp, "%s: corrupt file.", "Message Catalog System");
    free(v1);
LABEL_29:
    v13 = 79;
    goto LABEL_30;
  }
  v4 = DWORD2(__ptr);
  if (DWORD2(__ptr) != 0x1000000)
  {
    fclose(*v1);
    free(v1);
    if (v4 == 1)
      fprintf(__stderrp, "%s: %s is the wrong byte ordering.\n");
    else
      fprintf(__stderrp, "%s: %s is version %d, we need %d.\n");
    goto LABEL_29;
  }
  if (!DWORD1(v16))
  {
    fclose(*v1);
    free(v1);
    fprintf(__stderrp, "%s: %s has %d sets!\n");
    goto LABEL_29;
  }
  v5 = bswap32(DWORD1(v16));
  *((_DWORD *)v1 + 2) = v5;
  v6 = (FILE *)malloc_type_malloc(40 * v5, 0x10B2040D468A13DuLL);
  v1[2] = v6;
  if (!v6)
  {
    v13 = *__error();
    fclose(*v1);
    fprintf(__stderrp, "%s: no more memory.", "Message Catalog System");
    goto LABEL_20;
  }
  if (*((int *)v1 + 2) >= 1)
  {
    v7 = 0;
    v8 = bswap64(*((unint64_t *)&v16 + 1));
    while (fseeko(*v1, v8, 0) != -1)
    {
      v9 = v1[2];
      if (fread((char *)v9 + 40 * v7, 0x28uLL, 1uLL, *v1) != 1)
        break;
      v10 = (uint64_t)v9 + 40 * v7;
      v12 = *(_DWORD *)(v10 + 36);
      v11 = (_DWORD *)(v10 + 36);
      if (v12)
        --v7;
      else
        *v11 = 1;
      v8 = bswap64(*((_QWORD *)v11 - 4));
      if (++v7 >= *((_DWORD *)v1 + 2))
        return (uint64_t)v1;
    }
    __nls_free_resources((uint64_t)v1, v7);
    goto LABEL_28;
  }
  return (uint64_t)v1;
}

char *__cdecl catgets(nl_catd a1, int a2, int a3, const char *a4)
{
  int size;
  int v11;
  int v12;
  int v13;
  int v14;
  _DWORD *data;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char *v23;
  _DWORD *v24;
  int v25;
  char *v26;
  void **v27;
  unint64_t v28;
  char *v29;
  unsigned int *v30;
  unsigned int v31;
  void *v32;
  char *v33;
  void **v34;
  unint64_t v35;
  char *v36;
  unsigned int *v37;
  unsigned int v38;
  void *v39;
  int v40;
  void **v41;
  char *v42;
  char *v43;
  unsigned int v44;
  char *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  void *v59;
  void **v60;

  if ((unint64_t)&a1->__data + 1 < 2 || a1 == 0 || a2 < 1)
    return (char *)a4;
  size = a1->__size;
  if (size >= 0)
    v11 = a1->__size;
  else
    v11 = size + 1;
  v12 = v11 >> 1;
  if (size >= a2)
    v13 = a2;
  else
    v13 = a1->__size;
  if (size >= a2)
    v14 = a2 - 1;
  else
    v14 = v12;
  data = a1[1].__data;
  v16 = bswap32(data[10 * v14]);
  if (v16 == a2)
  {
LABEL_36:
    v22 = v14;
    v23 = (char *)&data[10 * v14];
    v25 = *((_DWORD *)v23 + 9);
    v24 = v23 + 36;
    if (v25)
    {
      v26 = (char *)&data[10 * v14];
      v28 = *(_QWORD *)(v26 + 20);
      v27 = (void **)(v26 + 20);
      if (fseeko((FILE *)a1->__data, bswap64(v28), 0) == -1)
        return (char *)a4;
      v29 = (char *)&data[10 * v22];
      v31 = *((_DWORD *)v29 + 7);
      v30 = (unsigned int *)(v29 + 28);
      v32 = malloc_type_malloc(bswap32(v31), 0x34535F66uLL);
      *v27 = v32;
      if (!v32)
        return (char *)a4;
      if (fread(v32, bswap32(*v30), 1uLL, (FILE *)a1->__data) != 1)
        goto LABEL_77;
      v33 = (char *)&data[10 * v22];
      v35 = *(_QWORD *)(v33 + 12);
      v34 = (void **)(v33 + 12);
      if (fseeko((FILE *)a1->__data, bswap64(v35), 0) == -1
        || (v36 = (char *)&data[10 * v22],
            v38 = *((_DWORD *)v36 + 8),
            v37 = (unsigned int *)(v36 + 32),
            v39 = malloc_type_malloc(16 * bswap32(v38), 0x10B2040ACE959A4uLL),
            (*v34 = v39) == 0))
      {
LABEL_77:
        v58 = *__error();
        v59 = *v27;
LABEL_78:
        free(v59);
        *__error() = v58;
        return (char *)a4;
      }
      v60 = v27;
      if (*v37)
      {
        v40 = 0;
        while (1)
        {
          v41 = v34;
          v42 = (char *)*v34;
          if (fread(&v42[16 * v40], 0x10uLL, 1uLL, (FILE *)a1->__data) != 1)
            break;
          v43 = &v42[16 * v40];
          if (*((_DWORD *)v43 + 3))
            --v40;
          else
            *(_QWORD *)(v43 + 4) = (char *)*v60 + bswap64(*(_QWORD *)(v43 + 4));
          v34 = v41;
          if (++v40 >= bswap32(*v37))
            goto LABEL_49;
        }
        v58 = *__error();
        free(*v41);
        v59 = *v60;
        goto LABEL_78;
      }
LABEL_49:
      *v24 = 0;
    }
    v44 = a3 - 1;
    if (a3 >= 1)
    {
      v45 = (char *)&data[10 * v22];
      v46 = bswap32(*((_DWORD *)v45 + 8));
      if (v46 >= 0)
        v47 = v46;
      else
        v47 = v46 + 1;
      v48 = v47 >> 1;
      if (v44 >= v46)
        v49 = v48;
      else
        v49 = a3 - 1;
      v50 = *(_QWORD *)(v45 + 12);
      v51 = bswap32(*(_DWORD *)(v50 + 16 * v49));
      if (v51 == a3)
      {
        return *(char **)(v50 + 16 * v49 + 4);
      }
      else
      {
        v52 = 0;
        if (v44 >= v46)
          v53 = v46;
        else
          v53 = a3;
        while (1)
        {
          if (v53 >= a3 + 1 + v49 - v51)
            v53 = a3 + 1 + v49 - v51;
          if (v51 >= a3)
            v53 = v49;
          else
            v52 = v49 + 1;
          v54 = v51 < a3 ? 1 : -1;
          v55 = v53 - v52;
          if (v53 <= v52)
            break;
          if (v55 >= 0)
            v56 = v53 - v52;
          else
            v56 = v55 + 1;
          v57 = (v56 >> 1) * v54;
          if (v55 != 1)
            v54 = v57;
          v49 += v54;
          v51 = bswap32(*(_DWORD *)(v50 + 16 * v49));
          if (v51 == a3)
            return *(char **)(v50 + 16 * v49 + 4);
        }
      }
    }
    return (char *)a4;
  }
  v17 = 0;
  while (1)
  {
    if (v13 >= a2 + 1 + v14 - v16)
      v13 = a2 + 1 + v14 - v16;
    if (v16 >= a2)
      v13 = v14;
    else
      v17 = v14 + 1;
    v18 = v16 < a2 ? 1 : -1;
    v19 = v13 - v17;
    if (v13 <= v17)
      return (char *)a4;
    if (v19 >= 0)
      v20 = v13 - v17;
    else
      v20 = v19 + 1;
    v21 = (v20 >> 1) * v18;
    if (v19 != 1)
      v18 = v21;
    v14 += v18;
    v16 = bswap32(data[10 * v14]);
    if (v16 == a2)
      goto LABEL_36;
  }
}

int catclose(nl_catd a1)
{
  if ((unint64_t)&a1->__data + 1 > 1)
  {
    fclose((FILE *)a1->__data);
    __nls_free_resources((uint64_t)a1, a1->__size);
    free(a1);
    return 0;
  }
  else
  {
    *__error() = 9;
    return -1;
  }
}

void __nls_free_resources(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2 >= 1)
  {
    v3 = 0;
    v4 = 40 * a2;
    do
    {
      v5 = *(_QWORD *)(a1 + 16) + v3;
      if (!*(_DWORD *)(v5 + 36))
      {
        free(*(void **)(v5 + 20));
        free(*(void **)(v5 + 12));
      }
      v3 += 40;
    }
    while (v4 != v3);
  }
  free(*(void **)(a1 + 16));
}

int ftrylockfile(FILE *a1)
{
  int v2;
  int v3;

  v2 = *__error();
  if (pthread_mutex_trylock((pthread_mutex_t *)((char *)a1->_extra + 8)))
    v3 = -1;
  else
    v3 = 0;
  *__error() = v2;
  return v3;
}

int asprintf_l(char **a1, locale_t a2, const char *a3, ...)
{
  va_list va;

  va_start(va, a3);
  return vasprintf_l(a1, a2, a3, va);
}

void clearerr(FILE *a1)
{
  flockfile(a1);
  a1->_flags &= 0xFF9Fu;
  funlockfile(a1);
}

uint64_t clearerr_unlocked(uint64_t result)
{
  *(_WORD *)(result + 16) &= 0xFF9Fu;
  return result;
}

int dprintf(int a1, const char *a2, ...)
{
  uint64_t v3;
  _xlocale *v4;
  _xlocale *v5;
  va_list va;

  va_start(va, a2);
  v3 = __locale_key;
  v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__global_locale;
  return vdprintf_l(a1, v5, a2, va);
}

int dprintf_l(int a1, locale_t a2, const char *a3, ...)
{
  va_list va;

  va_start(va, a3);
  return vdprintf_l(a1, a2, a3, va);
}

uint64_t feof_unlocked(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 16) >> 5) & 1;
}

uint64_t ferror_unlocked(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 16) >> 6) & 1;
}

uint64_t sflush_locked(FILE *a1)
{
  uint64_t v2;

  flockfile(a1);
  v2 = __sflush((uint64_t)a1);
  funlockfile(a1);
  return v2;
}

int fgetc(FILE *a1)
{
  int r;
  unsigned __int8 *v3;
  int v4;

  flockfile(a1);
  r = a1->_r;
  a1->_r = r - 1;
  if (r <= 0)
  {
    v4 = __srget(a1);
  }
  else
  {
    v3 = a1->_p++;
    v4 = *v3;
  }
  funlockfile(a1);
  return v4;
}

uint64_t __slbexpand(uint64_t a1, size_t size)
{
  int v2;
  uint64_t result;
  void *v5;
  void *v6;

  if (*(int *)(a1 + 128) >= size)
    return 0;
  v2 = size;
  if (size >> 31)
  {
    *__error() = 12;
  }
  else
  {
    v5 = malloc_type_realloc(*(void **)(a1 + 120), size, 0xABA27493uLL);
    if (v5)
    {
      v6 = v5;
      result = 0;
      *(_QWORD *)(a1 + 120) = v6;
      *(_DWORD *)(a1 + 128) = v2;
      return result;
    }
  }
  return 0xFFFFFFFFLL;
}

char *__cdecl fgetln(FILE *a1, size_t *a2)
{
  __sFILEX *extra;
  int r;
  unsigned __int8 *p;
  size_t v7;
  uint64_t v8;
  size_t v9;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;

  flockfile(a1);
  extra = a1->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0)
    *((_BYTE *)extra + 72) |= 7u;
  r = a1->_r;
  if (r <= 0)
  {
    if (__srefill((uint64_t)a1))
    {
      *a2 = 0;
LABEL_10:
      funlockfile(a1);
      return 0;
    }
    r = a1->_r;
  }
  p = a1->_p;
  v7 = r;
  v8 = _platform_memchr();
  if (v8)
  {
    v9 = v8 + 1 - (_QWORD)p;
    *a2 = v9;
    a1->_flags |= 0x2000u;
    a1->_r = v7 - v9;
    a1->_p = (unsigned __int8 *)(v8 + 1);
    funlockfile(a1);
    return (char *)p;
  }
  if (__slbexpand((uint64_t)a1, v7 + 80))
  {
LABEL_9:
    *a2 = 0;
    a1->_flags |= 0x40u;
    goto LABEL_10;
  }
  while (1)
  {
    _platform_memmove();
    if (__srefill((uint64_t)a1))
      break;
    v11 = a1->_p;
    v12 = a1->_r;
    v13 = _platform_memchr();
    if (v13)
    {
      v15 = (unsigned __int8 *)(v13 + 1);
      v16 = v13 + 1 - (_QWORD)v11;
      if (__slbexpand((uint64_t)a1, v16 + v7))
        goto LABEL_9;
      _platform_memmove();
      a1->_r -= v16;
      a1->_p = v15;
      v7 += v16;
      break;
    }
    v14 = __slbexpand((uint64_t)a1, v7 + v12 + 80);
    v7 += v12;
    if (v14)
      goto LABEL_9;
  }
  *a2 = v7;
  funlockfile(a1);
  return (char *)a1->_lb._base;
}

wint_t fgetwc(FILE *a1)
{
  __sFILEX *extra;
  uint64_t v3;
  void *v4;
  void *v5;
  wint_t v6;

  flockfile(a1);
  extra = a1->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0)
    *((_BYTE *)extra + 72) = *((_BYTE *)extra + 72) & 0xF8 | 1;
  v3 = __locale_key;
  v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = &__global_locale;
  v6 = __fgetwc((uint64_t)a1, (uint64_t)v5);
  funlockfile(a1);
  return v6;
}

uint64_t __fgetwc(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(unsigned int *, _QWORD, _QWORD, uint64_t, uint64_t);
  unsigned __int8 *v6;
  uint64_t result;
  unsigned int v8;

  v4 = *(_QWORD *)(a2 + 1328);
  v5 = *(uint64_t (**)(unsigned int *, _QWORD, _QWORD, uint64_t, uint64_t))(v4 + 72);
  if (*(int *)(a1 + 8) <= 0 && __srefill(a1))
    return 0xFFFFFFFFLL;
  v8 = 0;
  if (*(_DWORD *)(v4 + 64) == 1)
  {
    v6 = (unsigned __int8 *)(*(_QWORD *)a1)++;
    result = *v6;
LABEL_12:
    --*(_DWORD *)(a1 + 8);
  }
  else
  {
    while (1)
    {
      result = v5(&v8, *(_QWORD *)a1, *(int *)(a1 + 8), *(_QWORD *)(a1 + 104) + 80, a2);
      if (result != -2)
        break;
      if (__srefill(a1))
        goto LABEL_13;
    }
    if (result == -1)
    {
LABEL_13:
      *(_WORD *)(a1 + 16) |= 0x40u;
      *__error() = 92;
      return 0xFFFFFFFFLL;
    }
    if (!result)
    {
      ++*(_QWORD *)a1;
      goto LABEL_12;
    }
    *(_QWORD *)a1 += result;
    *(_DWORD *)(a1 + 8) -= result;
    return v8;
  }
  return result;
}

wint_t fgetwc_l(FILE *a1, locale_t a2)
{
  __sFILEX *extra;
  locale_t v5;
  locale_t v6;
  wint_t v7;

  flockfile(a1);
  extra = a1->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0)
    *((_BYTE *)extra + 72) = *((_BYTE *)extra + 72) & 0xF8 | 1;
  v5 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1)
    v5 = a2;
  if (a2)
    v6 = v5;
  else
    v6 = (locale_t)&__c_locale;
  v7 = __fgetwc((uint64_t)a1, (uint64_t)v6);
  funlockfile(a1);
  return v7;
}

__int32 *__cdecl fgetwln_l(FILE *a1, size_t *a2, locale_t a3)
{
  __sFILEX *extra;
  size_t v7;
  int v8;
  int v9;
  size_t v10;
  __int32 *result;

  flockfile(a1);
  extra = a1->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0)
    *((_BYTE *)extra + 72) = *((_BYTE *)extra + 72) & 0xF8 | 1;
  v7 = 0;
  do
  {
    v8 = __fgetwc((uint64_t)a1, (uint64_t)a3);
    if (v8 == -1)
    {
      v10 = v7;
      if (v7)
        goto LABEL_9;
      goto LABEL_11;
    }
    v9 = v8;
    if (4 * v7 >= a1->_lb._size && __slbexpand((uint64_t)a1, 4 * v7 + 2048))
      goto LABEL_11;
    v10 = v7 + 1;
    *(_DWORD *)&a1->_lb._base[4 * v7++] = v9;
  }
  while (v9 != 10);
  if (v10)
  {
LABEL_9:
    funlockfile(a1);
    *a2 = v10;
    return (__int32 *)a1->_lb._base;
  }
LABEL_11:
  funlockfile(a1);
  result = 0;
  *a2 = 0;
  return result;
}

__int32 *__cdecl fgetwln(FILE *a1, size_t *a2)
{
  uint64_t v2;
  _xlocale *v3;
  _xlocale *v4;

  v2 = __locale_key;
  v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3)
    v4 = v3;
  else
    v4 = (_xlocale *)&__global_locale;
  return fgetwln_l(a1, a2, v4);
}

__int32 *__cdecl fgetws_l(__int32 *a1, int a2, FILE *a3, locale_t a4)
{
  locale_t v7;
  locale_t v8;
  uint64_t v9;
  uint64_t (*v10)(__int32 *, unsigned __int8 **, uint64_t, _QWORD, char *, locale_t);
  __sFILEX *extra;
  __int32 *v12;
  unsigned __int8 *p;
  uint64_t r;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  BOOL v23;
  unsigned __int8 *v25;

  v7 = (locale_t)&__global_locale;
  if (a4 != (locale_t)-1)
    v7 = a4;
  if (a4)
    v8 = v7;
  else
    v8 = (locale_t)&__c_locale;
  v9 = *((_QWORD *)v8 + 166);
  v10 = *(uint64_t (**)(__int32 *, unsigned __int8 **, uint64_t, _QWORD, char *, locale_t))(v9 + 88);
  flockfile(a3);
  extra = a3->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0)
    *((_BYTE *)extra + 72) = *((_BYTE *)extra + 72) & 0xF8 | 1;
  v25 = 0;
  if (a2 <= 0)
  {
    a1 = 0;
    *__error() = 22;
  }
  else
  {
    if (a3->_r > 0 || !__srefill((uint64_t)a3))
    {
      v12 = a1;
      while (1)
      {
        p = a3->_p;
        v25 = a3->_p;
        r = a3->_r;
        v15 = _platform_memchr();
        v16 = v15 ? v15 - (_QWORD)p + 1 : r;
        v17 = v10(v12, &v25, v16, (a2 - 1), (char *)a3->_extra + 80, v8);
        if (v17 == -1)
          break;
        v18 = v17;
        v19 = v25;
        v20 = a3->_p;
        v21 = a3->_r;
        if (!v25)
        {
          v18 = v17 + 1;
          v19 = (unsigned __int8 *)(_platform_memchr() + 1);
          v25 = v19;
        }
        v22 = v21 + (_DWORD)v20 - (_DWORD)v19;
        a3->_r = v22;
        a3->_p = v19;
        a2 -= v18;
        v12 += v18;
        v23 = a2 < 2 || *(v12 - 1) == 10;
        if (v23 || v22 <= 0 && __srefill((uint64_t)a3))
        {
          if (v12 != a1 && (*(unsigned int (**)(char *, locale_t))(v9 + 80))((char *)a3->_extra + 80, v8))
          {
            *v12 = 0;
            goto LABEL_29;
          }
          break;
        }
      }
    }
    a1 = 0;
  }
LABEL_29:
  funlockfile(a3);
  return a1;
}

__int32 *__cdecl fgetws(__int32 *a1, int a2, FILE *a3)
{
  uint64_t v3;
  _xlocale *v4;
  _xlocale *v5;

  v3 = __locale_key;
  v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__global_locale;
  return fgetws_l(a1, a2, a3, v5);
}

uint64_t fileno_unlocked(uint64_t a1)
{
  return *(__int16 *)(a1 + 18);
}

uint64_t f_prealloc()
{
  uint64_t *v0;
  uint64_t result;
  uint64_t *v2;

  v0 = &__sglue;
  LODWORD(result) = getdtablesize();
  while (1)
  {
    result = (result - *((_DWORD *)v0 + 2));
    if ((int)result < 1)
      break;
    v0 = (uint64_t *)*v0;
    if (!v0)
    {
      result = (uint64_t)moreglue(result);
      if (result)
      {
        v2 = (uint64_t *)result;
        pthread_mutex_lock(&filelist_lock);
        *lastglue = (uint64_t)v2;
        lastglue = v2;
        return pthread_mutex_unlock(&filelist_lock);
      }
      return result;
    }
  }
  return result;
}

uint64_t _cleanup()
{
  return _fwalk((unsigned int (*)(uint64_t))__sflush);
}

int fprintf_l(FILE *a1, locale_t a2, const char *a3, ...)
{
  va_list va;

  va_start(va, a3);
  return vfprintf_l(a1, a2, a3, va);
}

int fpurge(FILE *a1)
{
  __int16 flags;
  FILE *base;
  int size;
  int v5;

  flockfile(a1);
  flags = a1->_flags;
  if (flags)
  {
    base = (FILE *)a1->_ub._base;
    if (base)
    {
      if (base != (FILE *)a1->_ubuf)
      {
        free(base);
        flags = a1->_flags;
      }
      a1->_ub._base = 0;
    }
    size = 0;
    a1->_p = a1->_bf._base;
    a1->_r = 0;
    if ((flags & 3) == 0)
      size = a1->_bf._size;
    v5 = 0;
    a1->_w = size;
  }
  else
  {
    *__error() = 9;
    v5 = -1;
  }
  funlockfile(a1);
  return v5;
}

uint64_t __fputwc(uint64_t a1, FILE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int w;
  BOOL v13;
  unsigned __int8 *v14;
  _BYTE v16[6];

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 1328);
  if ((a1 - 1) <= 0xFE && *(_DWORD *)(v5 + 64) == 1)
  {
    v16[0] = a1;
    v8 = 1;
  }
  else
  {
    v7 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v5 + 96))(v16, a1, (uint64_t)a2->_extra + 80, a3);
    if (!v7)
      return v4;
    v8 = v7;
    if (v7 == -1)
    {
      a2->_flags |= 0x40u;
      return 0xFFFFFFFFLL;
    }
  }
  v9 = v16;
  do
  {
    v11 = *v9++;
    v10 = v11;
    w = a2->_w;
    a2->_w = w - 1;
    if (w <= 0 && (v10 != 10 ? (v13 = w <= a2->_lbfsize) : (v13 = 1), v13))
    {
      if (__swbuf(v10, a2) == -1)
        return 0xFFFFFFFFLL;
    }
    else
    {
      v14 = a2->_p++;
      *v14 = v10;
    }
    --v8;
  }
  while (v8);
  return v4;
}

wint_t fputwc(__int32 a1, FILE *a2)
{
  uint64_t v3;
  __sFILEX *extra;
  uint64_t v5;
  void *v6;
  void *v7;
  wint_t v8;

  v3 = *(_QWORD *)&a1;
  flockfile(a2);
  extra = a2->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0)
    *((_BYTE *)extra + 72) = *((_BYTE *)extra + 72) & 0xF8 | 1;
  v5 = __locale_key;
  v6 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6)
    v7 = v6;
  else
    v7 = &__global_locale;
  v8 = __fputwc(v3, a2, (uint64_t)v7);
  funlockfile(a2);
  return v8;
}

wint_t fputwc_l(__int32 a1, FILE *a2, locale_t a3)
{
  uint64_t v5;
  __sFILEX *extra;
  locale_t v7;
  locale_t v8;
  wint_t v9;

  v5 = *(_QWORD *)&a1;
  flockfile(a2);
  extra = a2->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0)
    *((_BYTE *)extra + 72) = *((_BYTE *)extra + 72) & 0xF8 | 1;
  v7 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1)
    v7 = a3;
  if (a3)
    v8 = v7;
  else
    v8 = (locale_t)&__c_locale;
  v9 = __fputwc(v5, a2, (uint64_t)v8);
  funlockfile(a2);
  return v9;
}

int fputws_l(const __int32 *a1, FILE *a2, locale_t a3)
{
  locale_t v4;
  locale_t v5;
  uint64_t (*v6)(_BYTE *, const __int32 **, uint64_t, uint64_t, char *, locale_t);
  __sFILEX *extra;
  int v8;
  uint64_t v10;
  const __int32 *v11;
  _BYTE *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE v16[1024];

  v11 = a1;
  v4 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1)
    v4 = a3;
  if (a3)
    v5 = v4;
  else
    v5 = (locale_t)&__c_locale;
  v6 = *(uint64_t (**)(_BYTE *, const __int32 **, uint64_t, uint64_t, char *, locale_t))(*((_QWORD *)v5 + 166)
                                                                                               + 104);
  flockfile(a2);
  extra = a2->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0)
    *((_BYTE *)extra + 72) = *((_BYTE *)extra + 72) & 0xF8 | 1;
  v14 = 0;
  v15 = 0;
  v12 = 0;
  v13 = 0;
  if ((a2->_flags & 8) != 0 && ((a2->_flags & 0x200) != 0 || a2->_bf._base) || !__swsetup((uint64_t)a2))
  {
    v14 = &v12;
    LODWORD(v15) = 1;
    v12 = v16;
    while (1)
    {
      v10 = v6(v16, &v11, -1, 1024, (char *)a2->_extra + 80, v5);
      if (v10 == -1)
        break;
      HIDWORD(v15) = v10;
      v13 = (int)v10;
      if (__sfvwrite((uint64_t)a2, (uint64_t)&v14))
        break;
      if (!v11)
      {
        v8 = 0;
        goto LABEL_13;
      }
    }
  }
  v8 = -1;
LABEL_13:
  funlockfile(a2);
  return v8;
}

int fputws(const __int32 *a1, FILE *a2)
{
  uint64_t v2;
  _xlocale *v3;
  _xlocale *v4;

  v2 = __locale_key;
  v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3)
    v4 = v3;
  else
    v4 = (_xlocale *)&__global_locale;
  return fputws_l(a1, a2, v4);
}

uint64_t strtonum(const char *__numstr, uint64_t __minval, uint64_t __maxval, const char **__errstrp)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int *v13;
  char *__endptr;
  _OWORD v15[4];

  v15[0] = xmmword_1E1E9D260;
  v15[1] = *(_OWORD *)&off_1E1E9D270;
  v15[2] = xmmword_1E1E9D280;
  v15[3] = *(_OWORD *)&off_1E1E9D290;
  DWORD2(v15[0]) = *__error();
  *__error() = 0;
  if (__minval > __maxval
    || (__endptr = 0, v8 = strtoll(__numstr, &__endptr, 10), *__error() == 22)
    || __endptr == __numstr
    || *__endptr)
  {
    v9 = 0;
    v10 = 1;
    goto LABEL_6;
  }
  if (v8 != 0x8000000000000000)
  {
    if (v8 < __minval)
    {
      v9 = 0;
      v10 = 2;
      goto LABEL_6;
    }
    if (v8 == 0x7FFFFFFFFFFFFFFFLL)
    {
      if (*__error() != 34)
      {
        v9 = 0x7FFFFFFFFFFFFFFFLL;
        if (__maxval == 0x7FFFFFFFFFFFFFFFLL)
        {
          v10 = 0;
          goto LABEL_6;
        }
      }
      goto LABEL_20;
    }
LABEL_19:
    if (v8 <= __maxval)
    {
      v10 = 0;
      v9 = v8;
      goto LABEL_6;
    }
LABEL_20:
    v9 = 0;
    v10 = 3;
    goto LABEL_6;
  }
  v13 = __error();
  v9 = 0;
  v10 = 2;
  if (*v13 != 34 && __minval == 0x8000000000000000)
    goto LABEL_19;
LABEL_6:
  if (__errstrp)
    *__errstrp = *(const char **)&v15[v10];
  v11 = DWORD2(v15[v10]);
  *__error() = v11;
  return v9;
}

FILE *__cdecl freopen(const char *a1, const char *a2, FILE *a3)
{
  int v6;
  __int16 v7;
  int (__cdecl *close)(void *);
  int v9;
  int v10;
  int v11;
  __int16 v12;
  int v13;
  unsigned int file;
  FILE *base;
  unsigned __int8 *v16;
  __sFILEX *extra;
  int *v18;
  int v19;
  int v21;

  if (off_1EDF54E10)
  {
    off_1EDF54E10(a1);
    if (off_1EDF54E10)
      off_1EDF54E10(a2);
  }
  if (off_1EDF54E20)
    off_1EDF54E20(a3, 152);
  v21 = 0;
  v6 = __sflags((char *)a2, &v21);
  if (!v6)
  {
    v9 = *__error();
    fclose(a3);
LABEL_14:
    a3 = 0;
    *__error() = v9;
    return a3;
  }
  v7 = v6;
  pthread_once(&__sdidinit, __sinit);
  flockfile(a3);
  if (a1)
  {
    if (a3->_flags)
    {
      if ((a3->_flags & 8) != 0)
        __sflush((uint64_t)a3);
      close = a3->_close;
      if (close)
        ((void (*)(void *))close)(a3->_cookie);
    }
    else
    {
      a3->_flags = 32;
    }
    file = open_NOCANCEL();
    v13 = *__error();
    goto LABEL_31;
  }
  if (!a3->_flags)
  {
    funlockfile(a3);
    v18 = __error();
    a3 = 0;
    v19 = 22;
    goto LABEL_49;
  }
  v10 = fcntl_NOCANCEL();
  if (v10 < 0)
    goto LABEL_47;
  v11 = v10;
  if ((v10 & 3) != 2 && (v10 & 3) != (v21 & 3))
  {
    fclose(a3);
    funlockfile(a3);
    v18 = __error();
    a3 = 0;
    v19 = 9;
    goto LABEL_49;
  }
  if ((a3->_flags & 8) != 0)
    __sflush((uint64_t)a3);
  v12 = v21;
  if (((v21 ^ v11) & 8) == 0)
    goto LABEL_24;
  if ((fcntl_NOCANCEL() & 0x80000000) != 0)
  {
LABEL_47:
    v9 = *__error();
    fclose(a3);
    funlockfile(a3);
    goto LABEL_14;
  }
  v12 = v21;
LABEL_24:
  if ((v12 & 0x400) != 0)
  {
    ftruncate(a3->_file, 0);
    LOBYTE(v12) = v21;
  }
  if ((v12 & 8) == 0)
    _sseek((uint64_t)a3, 0, 0);
  v13 = 0;
  file = a3->_file;
LABEL_31:
  if ((a3->_flags & 0x80) != 0)
    free(a3->_bf._base);
  a3->_bf._base = 0;
  a3->_bf._size = 0;
  a3->_lbfsize = 0;
  a3->_p = 0;
  *(_QWORD *)&a3->_r = 0;
  base = (FILE *)a3->_ub._base;
  if (base)
  {
    if (base != (FILE *)a3->_ubuf)
      free(base);
    a3->_ub._base = 0;
  }
  a3->_ub._size = 0;
  v16 = a3->_lb._base;
  if (v16)
  {
    free(v16);
    a3->_lb._base = 0;
  }
  a3->_lb._size = 0;
  *((_BYTE *)a3->_extra + 72) &= 0xF8u;
  extra = a3->_extra;
  *((_OWORD *)extra + 11) = 0u;
  *((_OWORD *)extra + 12) = 0u;
  *((_OWORD *)extra + 9) = 0u;
  *((_OWORD *)extra + 10) = 0u;
  *((_OWORD *)extra + 7) = 0u;
  *((_OWORD *)extra + 8) = 0u;
  *((_OWORD *)extra + 5) = 0u;
  *((_OWORD *)extra + 6) = 0u;
  if ((file & 0x80000000) != 0)
  {
    funlockfile(a3);
    __sfprelease((uint64_t)a3);
    a3 = 0;
    *__error() = v13;
  }
  else
  {
    if (file >= 0x8000)
    {
      funlockfile(a3);
      __sfprelease((uint64_t)a3);
      v18 = __error();
      a3 = 0;
      v19 = 24;
LABEL_49:
      *v18 = v19;
      return a3;
    }
    a3->_flags = v7;
    a3->_file = file;
    a3->_write = (int (__cdecl *)(void *, const char *, int))__swrite;
    a3->_read = (int (__cdecl *)(void *, char *, int))__sread;
    a3->_seek = (fpos_t (__cdecl *)(void *, fpos_t, int))__sseek;
    a3->_cookie = a3;
    a3->_close = (int (__cdecl *)(void *))__sclose;
    if ((v21 & 8) != 0)
      _sseek((uint64_t)a3, 0, 2);
    funlockfile(a3);
  }
  return a3;
}

int fscanf(FILE *a1, const char *a2, ...)
{
  uint64_t v4;
  _xlocale *v5;
  _xlocale *v6;
  int v7;
  va_list va;

  va_start(va, a2);
  if (off_1EDF54E20)
    off_1EDF54E20(a1, 152);
  flockfile(a1);
  v4 = __locale_key;
  v5 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (v5)
    v6 = v5;
  else
    v6 = (_xlocale *)&__global_locale;
  v7 = __svfscanf_l((char **)a1, v6, (unsigned __int8 *)a2, (wint_t **)va);
  funlockfile(a1);
  return v7;
}

int fscanf_l(FILE *a1, locale_t a2, const char *a3, ...)
{
  locale_t v6;
  _xlocale *v7;
  int v8;
  va_list va;

  va_start(va, a3);
  if (off_1EDF54E20)
    off_1EDF54E20(a1, 152);
  v6 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1)
    v6 = a2;
  if (a2)
    v7 = v6;
  else
    v7 = (_xlocale *)&__c_locale;
  flockfile(a1);
  v8 = __svfscanf_l((char **)a1, v7, (unsigned __int8 *)a3, (wint_t **)va);
  funlockfile(a1);
  return v8;
}

uint64_t _fwalk(unsigned int (*a1)(uint64_t))
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  uint64_t v5;
  unsigned int v6;

  v2 = 0;
  v3 = &__sglue;
  do
  {
    v4 = *((_DWORD *)v3 + 2);
    if (v4 >= 1)
    {
      v5 = v3[2];
      v6 = v4 + 1;
      do
      {
        if (*(__int16 *)(v5 + 16) >= 1)
          v2 = a1(v5) | v2;
        v5 += 152;
        --v6;
      }
      while (v6 > 1);
    }
    v3 = (uint64_t *)*v3;
  }
  while (v3);
  return v2;
}

int fwide(FILE *a1, int a2)
{
  __sFILEX *extra;
  char v5;
  int v6;

  flockfile(a1);
  if (a2)
  {
    extra = a1->_extra;
    if ((*((_BYTE *)extra + 72) & 7) == 0)
    {
      if (a2 >= 1)
        v5 = 1;
      else
        v5 = 7;
      *((_BYTE *)extra + 72) = *((_BYTE *)extra + 72) & 0xF8 | v5;
    }
  }
  v6 = *((unsigned __int8 *)a1->_extra + 72) << 29 >> 29;
  funlockfile(a1);
  return v6;
}

int fwprintf(FILE *a1, const __int32 *a2, ...)
{
  uint64_t v3;
  _xlocale *v4;
  _xlocale *v5;
  va_list va;

  va_start(va, a2);
  v3 = __locale_key;
  v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__global_locale;
  return vfwprintf_l(a1, v5, a2, va);
}

int fwprintf_l(FILE *a1, locale_t a2, const __int32 *a3, ...)
{
  va_list va;

  va_start(va, a3);
  return vfwprintf_l(a1, a2, a3, va);
}

int fwscanf(FILE *a1, const __int32 *a2, ...)
{
  uint64_t v3;
  _xlocale *v4;
  _xlocale *v5;
  va_list va;

  va_start(va, a2);
  v3 = __locale_key;
  v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__global_locale;
  return vfwscanf_l(a1, v5, a2, va);
}

int fwscanf_l(FILE *a1, locale_t a2, const __int32 *a3, ...)
{
  va_list va;

  va_start(va, a3);
  return vfwscanf_l(a1, a2, a3, va);
}

int getc(FILE *a1)
{
  int r;
  unsigned __int8 *v3;
  int v4;

  flockfile(a1);
  r = a1->_r;
  a1->_r = r - 1;
  if (r <= 0)
  {
    v4 = __srget(a1);
  }
  else
  {
    v3 = a1->_p++;
    v4 = *v3;
  }
  funlockfile(a1);
  return v4;
}

int getc_unlocked(FILE *a1)
{
  int r;
  unsigned __int8 *v2;

  r = a1->_r;
  a1->_r = r - 1;
  if (r <= 0)
    return __srget(a1);
  v2 = a1->_p++;
  return *v2;
}

int getchar(void)
{
  FILE *v0;
  int r;
  unsigned __int8 *v2;
  int v3;

  flockfile(__stdinp);
  v0 = __stdinp;
  r = __stdinp->_r;
  __stdinp->_r = r - 1;
  if (r <= 0)
  {
    v3 = __srget(v0);
  }
  else
  {
    v2 = v0->_p++;
    v3 = *v2;
  }
  funlockfile(__stdinp);
  return v3;
}

int getchar_unlocked(void)
{
  FILE *v0;
  int r;
  unsigned __int8 *v2;

  v0 = __stdinp;
  r = __stdinp->_r;
  __stdinp->_r = r - 1;
  if (r <= 0)
    return __srget(v0);
  v2 = v0->_p++;
  return *v2;
}

ssize_t getdelim(char **__linep, size_t *__linecapp, int __delimiter, FILE *__stream)
{
  __sFILEX *extra;
  unsigned __int8 *p;
  uint64_t r;
  uint64_t v10;
  ssize_t v11;
  char *v13;
  unsigned __int8 *v14;
  char *v15;
  ssize_t v16;

  flockfile(__stream);
  extra = __stream->_extra;
  if ((*((_BYTE *)extra + 72) & 7) != 0)
  {
    if (!__linep)
      goto LABEL_15;
  }
  else
  {
    *((_BYTE *)extra + 72) |= 7u;
    if (!__linep)
    {
LABEL_15:
      *__error() = 22;
      goto LABEL_16;
    }
  }
  if (!__linecapp)
    goto LABEL_15;
  if (!*__linep)
    *__linecapp = 0;
  if (__stream->_r <= 0 && __srefill((uint64_t)__stream))
  {
    if ((__stream->_flags & 0x40) == 0)
    {
      if (!*__linecapp)
      {
        v13 = (char *)malloc_type_realloc(*__linep, 1uLL, 0x79E47995uLL);
        if (!v13)
          goto LABEL_16;
        *__linecapp = 1;
        *__linep = v13;
      }
      funlockfile(__stream);
      **__linep = 0;
      return -1;
    }
LABEL_16:
    __stream->_flags |= 0x40u;
    funlockfile(__stream);
    return -1;
  }
  v16 = 0;
  while (1)
  {
    p = __stream->_p;
    r = __stream->_r;
    v10 = _platform_memchr();
    if (v10)
      break;
    if (sappend((void **)__linep, &v16, __linecapp, (uint64_t)p, r))
      goto LABEL_16;
    if (__srefill((uint64_t)__stream))
    {
      if ((__stream->_flags & 0x40) != 0)
        goto LABEL_16;
      goto LABEL_27;
    }
  }
  v14 = (unsigned __int8 *)(v10 + 1);
  if (sappend((void **)__linep, &v16, __linecapp, (uint64_t)p, v10 + 1 - (_QWORD)p))
    goto LABEL_16;
  __stream->_r += LODWORD(__stream->_p) - (_DWORD)v14;
  __stream->_p = v14;
LABEL_27:
  v15 = *__linep;
  v11 = v16;
  v15[v16] = 0;
  funlockfile(__stream);
  return v11;
}

uint64_t sappend(void **a1, _QWORD *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  size_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;

  v5 = *a2;
  v6 = a5 + *a2;
  v7 = __CFADD__(a5, *a2);
  v8 = __CFADD__(v6, 1);
  v9 = v6 + 1;
  v10 = v8;
  v11 = v10 << 63 >> 63;
  v12 = v11 != v10;
  if (v7 || v12 || v11 < 0 || v9 >= 0x8000000000000001)
  {
    *__error() = 84;
    return 0xFFFFFFFFLL;
  }
  if (*a3 < v9)
  {
    v18 = 0x8000000000000000;
    if (v9 != 0x8000000000000000)
    {
      v18 = v9;
      if ((v9 & (v9 - 1)) != 0)
      {
        v19 = (v9 - 1) | ((v9 - 1) >> 1) | (((v9 - 1) | ((v9 - 1) >> 1)) >> 2);
        v20 = v19 | (v19 >> 4) | ((v19 | (v19 >> 4)) >> 8);
        v18 = (v20 | (v20 >> 16) | ((v20 | (v20 >> 16)) >> 32)) + 1;
      }
    }
    v21 = malloc_type_realloc(*a1, v18, 0x79E47995uLL);
    if (!v21)
      return 0xFFFFFFFFLL;
    *a3 = v18;
    *a1 = v21;
  }
  _platform_memmove();
  result = 0;
  *a2 = v5 + a5;
  return result;
}

ssize_t getline(char **__linep, size_t *__linecapp, FILE *__stream)
{
  return getdelim(__linep, __linecapp, 10, __stream);
}

char *__cdecl gets(char *a1)
{
  __sFILEX *extra;
  uint64_t i;
  FILE *v4;
  int r;
  unsigned __int8 *v6;
  int v7;

  flockfile(__stdinp);
  extra = __stdinp->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0)
    *((_BYTE *)extra + 72) |= 7u;
  if ((gets_warned & 1) == 0)
  {
    write_NOCANCEL();
    gets_warned = 1;
  }
  for (i = 0; ; ++i)
  {
    v4 = __stdinp;
    r = __stdinp->_r;
    __stdinp->_r = r - 1;
    if (r <= 0)
    {
      v7 = __srget(v4);
    }
    else
    {
      v6 = v4->_p++;
      v7 = *v6;
    }
    if (v7 == 10)
      goto LABEL_13;
    if (v7 == -1)
      break;
    a1[i] = v7;
  }
  if (i)
  {
LABEL_13:
    a1[i] = 0;
    goto LABEL_15;
  }
  a1 = 0;
LABEL_15:
  funlockfile(__stdinp);
  return a1;
}

int getw(FILE *a1)
{
  int __ptr;

  __ptr = 0;
  if (fread(&__ptr, 4uLL, 1uLL, a1) == 1)
    return __ptr;
  else
    return -1;
}

wint_t getwc(FILE *a1)
{
  uint64_t v1;
  _xlocale *v2;
  _xlocale *v3;

  v1 = __locale_key;
  v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2)
    v3 = v2;
  else
    v3 = (_xlocale *)&__global_locale;
  return fgetwc_l(a1, v3);
}

wint_t getwchar(void)
{
  FILE *v0;
  uint64_t v1;
  _xlocale *v2;
  _xlocale *v3;

  v0 = __stdinp;
  v1 = __locale_key;
  v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2)
    v3 = v2;
  else
    v3 = (_xlocale *)&__global_locale;
  return fgetwc_l(v0, v3);
}

wint_t getwchar_l(locale_t a1)
{
  return fgetwc_l(__stdinp, a1);
}

int mkostemps(char *path, int slen, int oflags)
{
  int v4;
  int v5;

  v5 = oflags;
  v4 = 0;
  if ((oflags & 0xFEFFFFC7) != 0)
  {
    *__error() = 22;
    return -1;
  }
  else if (find_temp_path(4294967294, path, slen, 1, (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mkostemps_action, (uint64_t)&v5, (uint64_t)&v4))
  {
    return v4;
  }
  else
  {
    return -1;
  }
}

int mkstempsat_np(int dfd, char *path, int slen)
{
  int v4;

  v4 = 0;
  if (find_temp_path(*(uint64_t *)&dfd, path, slen, 1, (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mkostemps_action, 0, (uint64_t)&v4))return v4;
  else
    return -1;
}

int mkostemp(char *path, int oflags)
{
  int v3;
  int v4;

  v4 = oflags;
  v3 = 0;
  if ((oflags & 0xFEFFFFC7) != 0)
  {
    *__error() = 22;
    return -1;
  }
  else if (find_temp_path(4294967294, path, 0, 1, (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mkostemps_action, (uint64_t)&v4, (uint64_t)&v3))
  {
    return v3;
  }
  else
  {
    return -1;
  }
}

char *__cdecl mkdtempat_np(int dfd, char *path)
{
  if (find_temp_path(*(uint64_t *)&dfd, path, 0, 1, (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mkdtemp_action, 0, 0))return path;
  else
    return 0;
}

const char *_mktemp(const char *a1)
{
  if (find_temp_path(4294967294, a1, 0, 0, (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mktemp_action, 0, 0))return a1;
  else
    return 0;
}

int rpmatch(const char *a1)
{
  char *v2;
  int v3;
  char *v4;
  regex_t *v5;
  regex_t v7;
  regex_t v8;

  memset(&v8, 0, sizeof(v8));
  memset(&v7, 0, sizeof(v7));
  v2 = nl_langinfo(52);
  if (regcomp(&v8, v2, 5))
    return -1;
  v4 = nl_langinfo(53);
  if (regcomp(&v7, v4, 5))
  {
    v3 = -1;
    v5 = &v8;
  }
  else
  {
    if (regexec(&v8, a1, 0, 0, 0))
    {
      if (regexec(&v7, a1, 0, 0, 0))
        v3 = -1;
      else
        v3 = 0;
    }
    else
    {
      v3 = 1;
    }
    regfree(&v8);
    v5 = &v7;
  }
  regfree(v5);
  return v3;
}

BOOL __find_arguments(unsigned __int8 *a1, _DWORD *a2, _DWORD **a3)
{
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  int v18;
  _OWORD *v19;
  int v20;
  _OWORD *v21;
  void *v22;
  __int128 v23;
  int v24;
  int v25;
  BOOL v26;
  _OWORD *v27;
  int v28;
  _OWORD *v29;
  void *v30;
  __int128 v31;
  int v32;
  int v33;
  int v34;
  _OWORD *v35;
  int v36;
  _OWORD *v37;
  void *v38;
  __int128 v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  _OWORD *v46;
  int v47;
  _OWORD *v48;
  void *v49;
  __int128 v50;
  int v51;
  int v52;
  _OWORD *v53;
  int v54;
  _OWORD *v55;
  void *v56;
  __int128 v57;
  int v58;
  int v59;
  _OWORD *v60;
  int v61;
  _OWORD *v62;
  void *v63;
  __int128 v64;
  int v65;
  void *ptr;
  _OWORD v69[2];
  __int128 v70;
  unsigned __int8 *v71;

  v4 = a1;
  v5 = 0;
  v70 = 0u;
  LODWORD(v70) = 8;
  DWORD2(v70) = 1;
  memset(v69, 0, sizeof(v69));
  v71 = a1;
  ptr = v69;
  do
  {
    *(_DWORD *)((char *)ptr + v5) = 0;
    v5 += 4;
  }
  while (v5 != 32);
LABEL_3:
  while (*v4 != 37)
  {
    if (!*v4)
    {
LABEL_181:
      build_arg_table((uint64_t)&ptr, a2, a3);
      v65 = 1;
      goto LABEL_183;
    }
    ++v4;
  }
  v6 = 0;
  v7 = v4 + 1;
LABEL_7:
  v4 = v7 + 1;
  v71 = v7 + 1;
  v8 = (char)*v7;
  while (2)
  {
    while ((v8 - 49) < 9)
    {
      v9 = 0;
      do
      {
        v9 = v8 + 10 * v9 - 48;
        v10 = (char)*v4++;
        v8 = v10;
      }
      while ((v10 - 48) < 0xA);
      if (v8 == 36)
      {
        v71 = v4;
        DWORD2(v70) = v9;
        goto LABEL_31;
      }
    }
    switch(v8)
    {
      case ' ':
      case '#':
      case '\'':
      case '+':
      case '-':
      case '0':
        v71 = v4;
        goto LABEL_31;
      case '*':
        goto LABEL_19;
      case '.':
        v11 = (char)*v4++;
        v8 = v11;
        if (v11 != 42)
        {
          if ((v8 - 48) <= 9)
          {
            do
            {
              v12 = (char)*v4++;
              v8 = v12;
            }
            while ((v12 - 48) < 0xA);
          }
          continue;
        }
LABEL_19:
        v71 = v4;
        if (addaster((uint64_t)&ptr, &v71))
          goto LABEL_182;
LABEL_31:
        v7 = v71;
        goto LABEL_7;
      case 'A':
      case 'E':
      case 'F':
      case 'G':
      case 'a':
      case 'e':
      case 'f':
      case 'g':
        v71 = v4;
        if ((v6 & 8) != 0)
          v16 = 23;
        else
          v16 = 22;
        goto LABEL_83;
      case 'C':
        v71 = v4;
        LOWORD(v6) = v6 | 0x10;
        goto LABEL_77;
      case 'D':
        v71 = v4;
        LOWORD(v6) = v6 | 0x10;
        goto LABEL_41;
      case 'L':
        v71 = v4;
        v6 |= 8u;
        goto LABEL_31;
      case 'O':
        v71 = v4;
        LOWORD(v6) = v6 | 0x10;
        goto LABEL_119;
      case 'S':
        LOBYTE(v6) = 16;
        goto LABEL_50;
      case 'U':
        v71 = v4;
        LOWORD(v6) = v6 | 0x10;
        goto LABEL_54;
      case 'X':
      case 'u':
      case 'x':
        v71 = v4;
LABEL_54:
        v24 = DWORD2(v70);
        v25 = v70;
        v26 = SDWORD2(v70) < (int)v70;
        goto LABEL_55;
      case 'c':
        v71 = v4;
LABEL_77:
        if ((v6 & 0x4000) != 0)
          v32 = 26;
        else
          v32 = 2;
        if ((v6 & 0x10) != 0)
          v16 = 24;
        else
          v16 = v32;
        goto LABEL_83;
      case 'd':
      case 'i':
        v71 = v4;
LABEL_41:
        v17 = DWORD2(v70);
        v18 = v70;
        if (SDWORD2(v70) < (int)v70)
          goto LABEL_138;
        v19 = ptr;
        if (2 * (int)v70 <= SDWORD2(v70))
          v20 = DWORD2(v70) + 1;
        else
          v20 = 2 * v70;
        if ((_DWORD)v70 == 8)
        {
          v21 = malloc_type_malloc(4 * v20, 0x100004052888210uLL);
          if (!v21)
            goto LABEL_182;
          v22 = v21;
          v23 = v19[1];
          *v21 = *v19;
          v21[1] = v23;
        }
        else
        {
          v22 = malloc_type_realloc(ptr, 4 * v20, 0x100004052888210uLL);
          if (!v22)
            goto LABEL_182;
        }
        if (v18 < v20)
          _platform_bzero();
        ptr = v22;
        LODWORD(v70) = v20;
        v17 = DWORD2(v70);
LABEL_138:
        if (v17 > SDWORD1(v70))
          DWORD1(v70) = v17;
        if ((v6 & 0x1000) != 0)
        {
          DWORD2(v70) = v17 + 1;
          *((_DWORD *)ptr + v17) = 16;
        }
        else if ((v6 & 0x400) != 0)
        {
          DWORD2(v70) = v17 + 1;
          *((_DWORD *)ptr + v17) = 13;
        }
        else if ((v6 & 0x800) != 0)
        {
          DWORD2(v70) = v17 + 1;
          *((_DWORD *)ptr + v17) = 11;
        }
        else if ((v6 & 0x20) != 0)
        {
          DWORD2(v70) = v17 + 1;
          *((_DWORD *)ptr + v17) = 8;
        }
        else
        {
          DWORD2(v70) = v17 + 1;
          if ((v6 & 0x10) != 0)
            *((_DWORD *)ptr + v17) = 5;
          else
            *((_DWORD *)ptr + v17) = 2;
        }
        goto LABEL_3;
      case 'h':
        v71 = v4;
        v13 = v6 & 0xFFFFDFBF | 0x2000;
        v14 = v6 | 0x40;
        v15 = (v6 & 0x40) == 0;
        goto LABEL_25;
      case 'j':
        v71 = v4;
        v6 |= 0x1000u;
        goto LABEL_31;
      case 'l':
        v71 = v4;
        v13 = v6 & 0xFFFFFFCF | 0x20;
        v14 = v6 | 0x10;
        v15 = (v6 & 0x10) == 0;
LABEL_25:
        if (v15)
          v6 = v14;
        else
          v6 = v13;
        goto LABEL_31;
      case 'n':
        v71 = v4;
        if ((v6 & 0x1000) != 0)
        {
          v58 = DWORD2(v70);
          v59 = v70;
          if (SDWORD2(v70) >= (int)v70)
          {
            v60 = ptr;
            if (2 * (int)v70 <= SDWORD2(v70))
              v61 = DWORD2(v70) + 1;
            else
              v61 = 2 * v70;
            if ((_DWORD)v70 == 8)
            {
              v62 = malloc_type_malloc(4 * v61, 0x100004052888210uLL);
              if (!v62)
                goto LABEL_182;
              v63 = v62;
              v64 = v60[1];
              *v62 = *v60;
              v62[1] = v64;
            }
            else
            {
              v63 = malloc_type_realloc(ptr, 4 * v61, 0x100004052888210uLL);
              if (!v63)
                goto LABEL_182;
            }
            if (v59 < v61)
              _platform_bzero();
            ptr = v63;
            LODWORD(v70) = v61;
            v58 = DWORD2(v70);
          }
          if (v58 > SDWORD1(v70))
            DWORD1(v70) = v58;
          DWORD2(v70) = v58 + 1;
          *((_DWORD *)ptr + v58) = 18;
          goto LABEL_3;
        }
        if ((v6 & 0x2000) != 0)
          v40 = 21;
        else
          v40 = 4;
        if ((v6 & 0x40) != 0)
          v41 = 1;
        else
          v41 = v40;
        if ((v6 & 0x10) != 0)
          v42 = 7;
        else
          v42 = v41;
        if ((v6 & 0x20) != 0)
          v43 = 10;
        else
          v43 = v42;
        if ((v6 & 0x400) != 0)
          v44 = 15;
        else
          v44 = v43;
        if ((v6 & 0x800) != 0)
          v45 = 12;
        else
          v45 = v44;
        if (!addtype((uint64_t)&ptr, v45))
          goto LABEL_3;
LABEL_182:
        v65 = 0;
LABEL_183:
        if (ptr != v69)
          free(ptr);
        return !v65 || *a3 == 0;
      case 'o':
        v71 = v4;
LABEL_119:
        v24 = DWORD2(v70);
        v25 = v70;
        v26 = SDWORD2(v70) < (int)v70;
        if ((v6 & 0x4000) != 0)
        {
          if (SDWORD2(v70) >= (int)v70)
          {
            v46 = ptr;
            if (2 * (int)v70 <= SDWORD2(v70))
              v47 = DWORD2(v70) + 1;
            else
              v47 = 2 * v70;
            if ((_DWORD)v70 == 8)
            {
              v48 = malloc_type_malloc(4 * v47, 0x100004052888210uLL);
              if (!v48)
                goto LABEL_182;
              v49 = v48;
              v50 = v46[1];
              *v48 = *v46;
              v48[1] = v50;
            }
            else
            {
              v49 = malloc_type_realloc(ptr, 4 * v47, 0x100004052888210uLL);
              if (!v49)
                goto LABEL_182;
            }
            if (v25 < v47)
              _platform_bzero();
            ptr = v49;
            LODWORD(v70) = v47;
            v24 = DWORD2(v70);
          }
          if (v24 > SDWORD1(v70))
            DWORD1(v70) = v24;
          DWORD2(v70) = v24 + 1;
          *((_DWORD *)ptr + v24) = 26;
        }
        else
        {
LABEL_55:
          if (!v26)
          {
            v27 = ptr;
            if (2 * v25 <= v24)
              v28 = v24 + 1;
            else
              v28 = 2 * v25;
            if (v25 == 8)
            {
              v29 = malloc_type_malloc(4 * v28, 0x100004052888210uLL);
              if (!v29)
                goto LABEL_182;
              v30 = v29;
              v31 = v27[1];
              *v29 = *v27;
              v29[1] = v31;
            }
            else
            {
              v30 = malloc_type_realloc(ptr, 4 * v28, 0x100004052888210uLL);
              if (!v30)
                goto LABEL_182;
            }
            if (v25 < v28)
              _platform_bzero();
            ptr = v30;
            LODWORD(v70) = v28;
            v24 = DWORD2(v70);
          }
          if (v24 > SDWORD1(v70))
            DWORD1(v70) = v24;
          if ((v6 & 0x1000) != 0)
          {
            DWORD2(v70) = v24 + 1;
            *((_DWORD *)ptr + v24) = 17;
          }
          else if ((v6 & 0x400) != 0 || (v6 & 0x800) != 0)
          {
            DWORD2(v70) = v24 + 1;
            *((_DWORD *)ptr + v24) = 14;
          }
          else if ((v6 & 0x20) != 0)
          {
            DWORD2(v70) = v24 + 1;
            *((_DWORD *)ptr + v24) = 9;
          }
          else
          {
            DWORD2(v70) = v24 + 1;
            if ((v6 & 0x10) != 0)
              *((_DWORD *)ptr + v24) = 6;
            else
              *((_DWORD *)ptr + v24) = 3;
          }
        }
        goto LABEL_3;
      case 'p':
        v71 = v4;
        v51 = DWORD2(v70);
        v52 = v70;
        if (SDWORD2(v70) < (int)v70)
          goto LABEL_168;
        v53 = ptr;
        if (2 * (int)v70 <= SDWORD2(v70))
          v54 = DWORD2(v70) + 1;
        else
          v54 = 2 * v70;
        if ((_DWORD)v70 == 8)
        {
          v55 = malloc_type_malloc(4 * v54, 0x100004052888210uLL);
          if (!v55)
            goto LABEL_182;
          v56 = v55;
          v57 = v53[1];
          *v55 = *v53;
          v55[1] = v57;
        }
        else
        {
          v56 = malloc_type_realloc(ptr, 4 * v54, 0x100004052888210uLL);
          if (!v56)
            goto LABEL_182;
        }
        if (v52 < v54)
          _platform_bzero();
        ptr = v56;
        LODWORD(v70) = v54;
        v51 = DWORD2(v70);
LABEL_168:
        if (v51 > SDWORD1(v70))
          DWORD1(v70) = v51;
        DWORD2(v70) = v51 + 1;
        *((_DWORD *)ptr + v51) = 19;
        goto LABEL_3;
      case 'q':
        v71 = v4;
        v6 |= 0x20u;
        goto LABEL_31;
      case 's':
LABEL_50:
        v71 = v4;
        if ((v6 & 0x10) != 0)
          v16 = 25;
        else
          v16 = 20;
LABEL_83:
        v33 = DWORD2(v70);
        v34 = v70;
        if (SDWORD2(v70) < (int)v70)
          goto LABEL_94;
        v35 = ptr;
        if (2 * (int)v70 <= SDWORD2(v70))
          v36 = DWORD2(v70) + 1;
        else
          v36 = 2 * v70;
        if ((_DWORD)v70 == 8)
        {
          v37 = malloc_type_malloc(4 * v36, 0x100004052888210uLL);
          if (!v37)
            goto LABEL_182;
          v38 = v37;
          v39 = v35[1];
          *v37 = *v35;
          v37[1] = v39;
        }
        else
        {
          v38 = malloc_type_realloc(ptr, 4 * v36, 0x100004052888210uLL);
          if (!v38)
            goto LABEL_182;
        }
        if (v34 < v36)
          _platform_bzero();
        ptr = v38;
        LODWORD(v70) = v36;
        v33 = DWORD2(v70);
LABEL_94:
        if (v33 > SDWORD1(v70))
          DWORD1(v70) = v33;
        DWORD2(v70) = v33 + 1;
        *((_DWORD *)ptr + v33) = v16;
        goto LABEL_3;
      case 't':
        v71 = v4;
        v6 |= 0x800u;
        goto LABEL_31;
      case 'z':
        v71 = v4;
        v6 |= 0x400u;
        goto LABEL_31;
      default:
        v71 = v4;
        if (!v8)
          goto LABEL_181;
        goto LABEL_3;
    }
  }
}

uint64_t addaster(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  unsigned __int8 v7;
  int v8;
  int v9;
  int v10;
  int v11;
  _OWORD *v12;
  int v13;
  _OWORD *v14;
  void *v15;
  __int128 v16;
  int v17;
  _OWORD *v18;
  int v19;
  _OWORD *v20;
  void *v21;
  __int128 v22;
  uint64_t result;
  _DWORD *v24;

  v4 = *a2;
  v5 = (char)**a2 - 48;
  if (v5 > 9)
  {
    v6 = 0;
    v9 = **a2;
  }
  else
  {
    v6 = 0;
    do
    {
      v6 = v5 + 10 * v6;
      v8 = (char)*++v4;
      v7 = v8;
      v5 = v8 - 48;
    }
    while ((v8 - 48) < 0xA);
    v9 = v7;
  }
  v10 = *(_DWORD *)(a1 + 48);
  if (v9 == 36)
  {
    *(_DWORD *)(a1 + 48) = v6;
    v11 = *(_DWORD *)(a1 + 40);
    if (v6 < v11)
    {
LABEL_25:
      if (v6 > *(_DWORD *)(a1 + 44))
        *(_DWORD *)(a1 + 44) = v6;
      result = 0;
      *(_DWORD *)(*(_QWORD *)a1 + 4 * v6) = 2;
      *(_DWORD *)(a1 + 48) = v10;
      *a2 = v4 + 1;
      return result;
    }
    v12 = *(_OWORD **)a1;
    if (2 * v11 <= v6)
      v13 = v6 + 1;
    else
      v13 = 2 * v11;
    if (v11 == 8)
    {
      v14 = malloc_type_malloc(4 * v13, 0x100004052888210uLL);
      if (v14)
      {
        v15 = v14;
        v16 = v12[1];
        *v14 = *v12;
        v14[1] = v16;
LABEL_22:
        if (v11 < v13)
          _platform_bzero();
        *(_QWORD *)a1 = v15;
        *(_DWORD *)(a1 + 40) = v13;
        v6 = *(_DWORD *)(a1 + 48);
        goto LABEL_25;
      }
    }
    else
    {
      v15 = malloc_type_realloc(*(void **)a1, 4 * v13, 0x100004052888210uLL);
      if (v15)
        goto LABEL_22;
    }
    return 0xFFFFFFFFLL;
  }
  v17 = *(_DWORD *)(a1 + 40);
  if (v10 >= v17)
  {
    v18 = *(_OWORD **)a1;
    if (2 * v17 <= v10)
      v19 = v10 + 1;
    else
      v19 = 2 * v17;
    if (v17 == 8)
    {
      v20 = malloc_type_malloc(4 * v19, 0x100004052888210uLL);
      if (!v20)
        return 0xFFFFFFFFLL;
      v21 = v20;
      v22 = v18[1];
      *v20 = *v18;
      v20[1] = v22;
    }
    else
    {
      v21 = malloc_type_realloc(*(void **)a1, 4 * v19, 0x100004052888210uLL);
      if (!v21)
        return 0xFFFFFFFFLL;
    }
    if (v17 < v19)
      _platform_bzero();
    *(_QWORD *)a1 = v21;
    *(_DWORD *)(a1 + 40) = v19;
    v10 = *(_DWORD *)(a1 + 48);
  }
  if (v10 > *(_DWORD *)(a1 + 44))
    *(_DWORD *)(a1 + 44) = v10;
  result = 0;
  v24 = *(_DWORD **)a1;
  *(_DWORD *)(a1 + 48) = v10 + 1;
  v24[v10] = 2;
  return result;
}

uint64_t addtype(uint64_t a1, int a2)
{
  int v4;
  int v5;
  _OWORD *v6;
  int v7;
  _OWORD *v8;
  void *v9;
  __int128 v10;
  uint64_t result;
  _DWORD *v12;

  v4 = *(_DWORD *)(a1 + 48);
  v5 = *(_DWORD *)(a1 + 40);
  if (v4 >= v5)
  {
    v6 = *(_OWORD **)a1;
    if (2 * v5 <= v4)
      v7 = v4 + 1;
    else
      v7 = 2 * v5;
    if (v5 == 8)
    {
      v8 = malloc_type_malloc(4 * v7, 0x100004052888210uLL);
      if (v8)
      {
        v9 = v8;
        v10 = v6[1];
        *v8 = *v6;
        v8[1] = v10;
LABEL_9:
        if (v5 < v7)
          _platform_bzero();
        *(_QWORD *)a1 = v9;
        *(_DWORD *)(a1 + 40) = v7;
        v4 = *(_DWORD *)(a1 + 48);
        goto LABEL_12;
      }
    }
    else
    {
      v9 = malloc_type_realloc(*(void **)a1, 4 * v7, 0x100004052888210uLL);
      if (v9)
        goto LABEL_9;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_12:
  if (v4 > *(_DWORD *)(a1 + 44))
    *(_DWORD *)(a1 + 44) = v4;
  result = 0;
  v12 = *(_DWORD **)a1;
  *(_DWORD *)(a1 + 48) = v4 + 1;
  v12[v4] = a2;
  return result;
}

_DWORD *build_arg_table(uint64_t a1, _DWORD *a2, _DWORD **a3)
{
  uint64_t v5;
  _DWORD *result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _DWORD *v10;
  _QWORD *v11;
  _OWORD *v12;

  v5 = *(unsigned int *)(a1 + 44);
  if ((int)v5 <= 7)
  {
    result = *a3;
  }
  else
  {
    result = malloc_type_malloc(16 * v5 + 16, 0x1092040C99D0F4CuLL);
    *a3 = result;
    if (!result)
      return result;
  }
  *result = 0;
  if (*(int *)(a1 + 44) >= 1)
  {
    v7 = 0;
    v8 = 4;
    do
    {
      switch(*(_DWORD *)(*(_QWORD *)a1 + 4 * v7 + 4))
      {
        case 0:
        case 2:
        case 3:
        case 0x18:
          v10 = a2;
          a2 += 2;
          (*a3)[v8] = *v10;
          break;
        case 1:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x19:
          v9 = a2;
          a2 += 2;
          *(_QWORD *)&(*a3)[v8] = *v9;
          break;
        case 0x16:
        case 0x17:
          v11 = a2;
          a2 += 2;
          *(_QWORD *)&(*a3)[v8] = *v11;
          break;
        case 0x1A:
          v12 = (_OWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF0);
          a2 = v12 + 1;
          *(_OWORD *)&(*a3)[v8] = *v12;
          break;
        default:
          break;
      }
      ++v7;
      v8 += 4;
    }
    while (v7 < *(int *)(a1 + 44));
  }
  return result;
}

BOOL __find_warguments(int *a1, _DWORD *a2, _DWORD **a3)
{
  uint64_t v5;
  unsigned int v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  _OWORD *v20;
  int v21;
  _OWORD *v22;
  void *v23;
  __int128 v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  _OWORD *v30;
  int v31;
  _OWORD *v32;
  void *v33;
  __int128 v34;
  int v35;
  int v36;
  _OWORD *v37;
  int v38;
  _OWORD *v39;
  void *v40;
  __int128 v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  _OWORD *v50;
  int v51;
  _OWORD *v52;
  void *v53;
  __int128 v54;
  int v55;
  int v56;
  _OWORD *v57;
  int v58;
  _OWORD *v59;
  void *v60;
  __int128 v61;
  int v62;
  void *ptr;
  _OWORD v66[2];
  __int128 v67;
  int *v68;

  v5 = 0;
  v68 = 0;
  v67 = 0u;
  LODWORD(v67) = 8;
  DWORD2(v67) = 1;
  memset(v66, 0, sizeof(v66));
  ptr = v66;
  do
  {
    *(_DWORD *)((char *)ptr + v5) = 0;
    v5 += 4;
  }
  while (v5 != 32);
LABEL_3:
  while (*a1 != 37)
  {
    if (!*a1)
    {
LABEL_158:
      build_arg_table((uint64_t)&ptr, a2, a3);
      v62 = 1;
      goto LABEL_160;
    }
    ++a1;
  }
  v6 = 0;
  v7 = a1 + 1;
LABEL_7:
  v9 = *v7;
  a1 = v7 + 1;
  v8 = v9;
  while (2)
  {
    while ((v8 - 49) < 9)
    {
      v10 = 0;
      do
      {
        v10 = v8 + 10 * v10 - 48;
        v11 = *a1++;
        v8 = v11;
      }
      while ((v11 - 48) < 0xA);
      if (v8 == 36)
      {
        v68 = a1;
        DWORD2(v67) = v10;
        goto LABEL_31;
      }
    }
    switch(v8)
    {
      case ' ':
      case '#':
      case '\'':
      case '+':
      case '-':
      case '0':
        v68 = a1;
        goto LABEL_31;
      case '*':
        goto LABEL_19;
      case '.':
        v12 = *a1++;
        v8 = v12;
        if (v12 != 42)
        {
          if ((v8 - 48) <= 9)
          {
            do
            {
              v13 = *a1++;
              v8 = v13;
            }
            while ((v13 - 48) < 0xA);
          }
          continue;
        }
LABEL_19:
        v68 = a1;
        if (addwaster((uint64_t)&ptr, &v68))
          goto LABEL_159;
LABEL_31:
        v7 = v68;
        goto LABEL_7;
      case 'A':
      case 'E':
      case 'F':
      case 'G':
      case 'a':
      case 'e':
      case 'f':
      case 'g':
        v68 = a1;
        if ((v6 & 8) != 0)
          v17 = 23;
        else
          v17 = 22;
        goto LABEL_76;
      case 'C':
        LOBYTE(v6) = 16;
        goto LABEL_62;
      case 'D':
        v68 = a1;
        LOWORD(v6) = v6 | 0x10;
        goto LABEL_64;
      case 'L':
        v68 = a1;
        v6 |= 8u;
        goto LABEL_31;
      case 'O':
      case 'U':
        v68 = a1;
        LOWORD(v6) = v6 | 0x10;
        goto LABEL_37;
      case 'S':
        LOBYTE(v6) = 16;
        goto LABEL_72;
      case 'X':
      case 'o':
      case 'u':
      case 'x':
        v68 = a1;
LABEL_37:
        v18 = DWORD2(v67);
        v19 = v67;
        if (SDWORD2(v67) < (int)v67)
          goto LABEL_49;
        v20 = ptr;
        if (2 * (int)v67 <= SDWORD2(v67))
          v21 = DWORD2(v67) + 1;
        else
          v21 = 2 * v67;
        if ((_DWORD)v67 == 8)
        {
          v22 = malloc_type_malloc(4 * v21, 0x100004052888210uLL);
          if (!v22)
            goto LABEL_159;
          v23 = v22;
          v24 = v20[1];
          *v22 = *v20;
          v22[1] = v24;
        }
        else
        {
          v23 = malloc_type_realloc(ptr, 4 * v21, 0x100004052888210uLL);
          if (!v23)
            goto LABEL_159;
        }
        if (v19 < v21)
          _platform_bzero();
        ptr = v23;
        LODWORD(v67) = v21;
        v18 = DWORD2(v67);
LABEL_49:
        if (v18 > SDWORD1(v67))
          DWORD1(v67) = v18;
        if ((v6 & 0x1000) != 0)
        {
          DWORD2(v67) = v18 + 1;
          *((_DWORD *)ptr + v18) = 17;
        }
        else if ((v6 & 0x400) != 0 || (v6 & 0x800) != 0)
        {
          DWORD2(v67) = v18 + 1;
          *((_DWORD *)ptr + v18) = 14;
        }
        else if ((v6 & 0x20) != 0)
        {
          DWORD2(v67) = v18 + 1;
          *((_DWORD *)ptr + v18) = 9;
        }
        else
        {
          DWORD2(v67) = v18 + 1;
          if ((v6 & 0x10) != 0)
            *((_DWORD *)ptr + v18) = 6;
          else
            *((_DWORD *)ptr + v18) = 3;
        }
        goto LABEL_3;
      case 'c':
LABEL_62:
        v68 = a1;
        v25 = (v6 & 0x10) == 0;
        v26 = 24;
        v27 = 2;
        goto LABEL_73;
      case 'd':
      case 'i':
        v68 = a1;
LABEL_64:
        v28 = DWORD2(v67);
        v29 = v67;
        if (SDWORD2(v67) < (int)v67)
          goto LABEL_122;
        v30 = ptr;
        if (2 * (int)v67 <= SDWORD2(v67))
          v31 = DWORD2(v67) + 1;
        else
          v31 = 2 * v67;
        if ((_DWORD)v67 == 8)
        {
          v32 = malloc_type_malloc(4 * v31, 0x100004052888210uLL);
          if (!v32)
            goto LABEL_159;
          v33 = v32;
          v34 = v30[1];
          *v32 = *v30;
          v32[1] = v34;
        }
        else
        {
          v33 = malloc_type_realloc(ptr, 4 * v31, 0x100004052888210uLL);
          if (!v33)
            goto LABEL_159;
        }
        if (v29 < v31)
          _platform_bzero();
        ptr = v33;
        LODWORD(v67) = v31;
        v28 = DWORD2(v67);
LABEL_122:
        if (v28 > SDWORD1(v67))
          DWORD1(v67) = v28;
        if ((v6 & 0x1000) != 0)
        {
          DWORD2(v67) = v28 + 1;
          *((_DWORD *)ptr + v28) = 16;
        }
        else if ((v6 & 0x400) != 0)
        {
          DWORD2(v67) = v28 + 1;
          *((_DWORD *)ptr + v28) = 13;
        }
        else if ((v6 & 0x800) != 0)
        {
          DWORD2(v67) = v28 + 1;
          *((_DWORD *)ptr + v28) = 11;
        }
        else if ((v6 & 0x20) != 0)
        {
          DWORD2(v67) = v28 + 1;
          *((_DWORD *)ptr + v28) = 8;
        }
        else
        {
          DWORD2(v67) = v28 + 1;
          if ((v6 & 0x10) != 0)
            *((_DWORD *)ptr + v28) = 5;
          else
            *((_DWORD *)ptr + v28) = 2;
        }
        goto LABEL_3;
      case 'h':
        v68 = a1;
        v14 = v6 & 0xFFFFDFBF | 0x2000;
        v15 = v6 | 0x40;
        v16 = (v6 & 0x40) == 0;
        goto LABEL_25;
      case 'j':
        v68 = a1;
        v6 |= 0x1000u;
        goto LABEL_31;
      case 'l':
        v68 = a1;
        v14 = v6 & 0xFFFFFFCF | 0x20;
        v15 = v6 | 0x10;
        v16 = (v6 & 0x10) == 0;
LABEL_25:
        if (v16)
          v6 = v15;
        else
          v6 = v14;
        goto LABEL_31;
      case 'n':
        v68 = a1;
        if ((v6 & 0x1000) != 0)
        {
          v55 = DWORD2(v67);
          v56 = v67;
          if (SDWORD2(v67) >= (int)v67)
          {
            v57 = ptr;
            if (2 * (int)v67 <= SDWORD2(v67))
              v58 = DWORD2(v67) + 1;
            else
              v58 = 2 * v67;
            if ((_DWORD)v67 == 8)
            {
              v59 = malloc_type_malloc(4 * v58, 0x100004052888210uLL);
              if (!v59)
                goto LABEL_159;
              v60 = v59;
              v61 = v57[1];
              *v59 = *v57;
              v59[1] = v61;
            }
            else
            {
              v60 = malloc_type_realloc(ptr, 4 * v58, 0x100004052888210uLL);
              if (!v60)
                goto LABEL_159;
            }
            if (v56 < v58)
              _platform_bzero();
            ptr = v60;
            LODWORD(v67) = v58;
            v55 = DWORD2(v67);
          }
          if (v55 > SDWORD1(v67))
            DWORD1(v67) = v55;
          DWORD2(v67) = v55 + 1;
          *((_DWORD *)ptr + v55) = 18;
          goto LABEL_3;
        }
        if ((v6 & 0x2000) != 0)
          v42 = 21;
        else
          v42 = 4;
        if ((v6 & 0x40) != 0)
          v43 = 1;
        else
          v43 = v42;
        if ((v6 & 0x10) != 0)
          v44 = 7;
        else
          v44 = v43;
        if ((v6 & 0x20) != 0)
          v45 = 10;
        else
          v45 = v44;
        if ((v6 & 0x400) != 0)
          v46 = 15;
        else
          v46 = v45;
        if ((v6 & 0x800) != 0)
          v47 = 12;
        else
          v47 = v46;
        if (!addtype((uint64_t)&ptr, v47))
          goto LABEL_3;
LABEL_159:
        v62 = 0;
LABEL_160:
        if (ptr != v66)
          free(ptr);
        return !v62 || *a3 == 0;
      case 'p':
        v68 = a1;
        v48 = DWORD2(v67);
        v49 = v67;
        if (SDWORD2(v67) < (int)v67)
          goto LABEL_145;
        v50 = ptr;
        if (2 * (int)v67 <= SDWORD2(v67))
          v51 = DWORD2(v67) + 1;
        else
          v51 = 2 * v67;
        if ((_DWORD)v67 == 8)
        {
          v52 = malloc_type_malloc(4 * v51, 0x100004052888210uLL);
          if (!v52)
            goto LABEL_159;
          v53 = v52;
          v54 = v50[1];
          *v52 = *v50;
          v52[1] = v54;
        }
        else
        {
          v53 = malloc_type_realloc(ptr, 4 * v51, 0x100004052888210uLL);
          if (!v53)
            goto LABEL_159;
        }
        if (v49 < v51)
          _platform_bzero();
        ptr = v53;
        LODWORD(v67) = v51;
        v48 = DWORD2(v67);
LABEL_145:
        if (v48 > SDWORD1(v67))
          DWORD1(v67) = v48;
        DWORD2(v67) = v48 + 1;
        *((_DWORD *)ptr + v48) = 19;
        goto LABEL_3;
      case 'q':
        v68 = a1;
        v6 |= 0x20u;
        goto LABEL_31;
      case 's':
LABEL_72:
        v68 = a1;
        v25 = (v6 & 0x10) == 0;
        v26 = 25;
        v27 = 20;
LABEL_73:
        if (v25)
          v17 = v27;
        else
          v17 = v26;
LABEL_76:
        v35 = DWORD2(v67);
        v36 = v67;
        if (SDWORD2(v67) < (int)v67)
          goto LABEL_87;
        v37 = ptr;
        if (2 * (int)v67 <= SDWORD2(v67))
          v38 = DWORD2(v67) + 1;
        else
          v38 = 2 * v67;
        if ((_DWORD)v67 == 8)
        {
          v39 = malloc_type_malloc(4 * v38, 0x100004052888210uLL);
          if (!v39)
            goto LABEL_159;
          v40 = v39;
          v41 = v37[1];
          *v39 = *v37;
          v39[1] = v41;
        }
        else
        {
          v40 = malloc_type_realloc(ptr, 4 * v38, 0x100004052888210uLL);
          if (!v40)
            goto LABEL_159;
        }
        if (v36 < v38)
          _platform_bzero();
        ptr = v40;
        LODWORD(v67) = v38;
        v35 = DWORD2(v67);
LABEL_87:
        if (v35 > SDWORD1(v67))
          DWORD1(v67) = v35;
        DWORD2(v67) = v35 + 1;
        *((_DWORD *)ptr + v35) = v17;
        goto LABEL_3;
      case 't':
        v68 = a1;
        v6 |= 0x800u;
        goto LABEL_31;
      case 'z':
        v68 = a1;
        v6 |= 0x400u;
        goto LABEL_31;
      default:
        v68 = a1;
        if (!v8)
          goto LABEL_158;
        goto LABEL_3;
    }
  }
}

uint64_t addwaster(uint64_t a1, int **a2)
{
  int *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _OWORD *v11;
  int v12;
  _OWORD *v13;
  void *v14;
  __int128 v15;
  int v16;
  _OWORD *v17;
  int v18;
  _OWORD *v19;
  void *v20;
  __int128 v21;
  uint64_t result;
  _DWORD *v23;

  v4 = *a2;
  v5 = **a2;
  v6 = v5 - 48;
  if ((v5 - 48) > 9)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      v7 = v6 + 10 * v7;
      v8 = v4[1];
      ++v4;
      v5 = v8;
      v6 = v8 - 48;
    }
    while ((v8 - 48) < 0xA);
  }
  v9 = *(_DWORD *)(a1 + 48);
  if (v5 == 36)
  {
    *(_DWORD *)(a1 + 48) = v7;
    v10 = *(_DWORD *)(a1 + 40);
    if (v7 < v10)
    {
LABEL_25:
      if (v7 > *(_DWORD *)(a1 + 44))
        *(_DWORD *)(a1 + 44) = v7;
      result = 0;
      *(_DWORD *)(*(_QWORD *)a1 + 4 * v7) = 2;
      *(_DWORD *)(a1 + 48) = v9;
      *a2 = v4 + 1;
      return result;
    }
    v11 = *(_OWORD **)a1;
    if (2 * v10 <= v7)
      v12 = v7 + 1;
    else
      v12 = 2 * v10;
    if (v10 == 8)
    {
      v13 = malloc_type_malloc(4 * v12, 0x100004052888210uLL);
      if (v13)
      {
        v14 = v13;
        v15 = v11[1];
        *v13 = *v11;
        v13[1] = v15;
LABEL_22:
        if (v10 < v12)
          _platform_bzero();
        *(_QWORD *)a1 = v14;
        *(_DWORD *)(a1 + 40) = v12;
        v7 = *(_DWORD *)(a1 + 48);
        goto LABEL_25;
      }
    }
    else
    {
      v14 = malloc_type_realloc(*(void **)a1, 4 * v12, 0x100004052888210uLL);
      if (v14)
        goto LABEL_22;
    }
    return 0xFFFFFFFFLL;
  }
  v16 = *(_DWORD *)(a1 + 40);
  if (v9 >= v16)
  {
    v17 = *(_OWORD **)a1;
    if (2 * v16 <= v9)
      v18 = v9 + 1;
    else
      v18 = 2 * v16;
    if (v16 == 8)
    {
      v19 = malloc_type_malloc(4 * v18, 0x100004052888210uLL);
      if (!v19)
        return 0xFFFFFFFFLL;
      v20 = v19;
      v21 = v17[1];
      *v19 = *v17;
      v19[1] = v21;
    }
    else
    {
      v20 = malloc_type_realloc(*(void **)a1, 4 * v18, 0x100004052888210uLL);
      if (!v20)
        return 0xFFFFFFFFLL;
    }
    if (v16 < v18)
      _platform_bzero();
    *(_QWORD *)a1 = v20;
    *(_DWORD *)(a1 + 40) = v18;
    v9 = *(_DWORD *)(a1 + 48);
  }
  if (v9 > *(_DWORD *)(a1 + 44))
    *(_DWORD *)(a1 + 44) = v9;
  result = 0;
  v23 = *(_DWORD **)a1;
  *(_DWORD *)(a1 + 48) = v9 + 1;
  v23[v9] = 2;
  return result;
}

int printf_l(locale_t a1, const char *a2, ...)
{
  va_list va;

  va_start(va, a2);
  return vfprintf_l(__stdoutp, a1, a2, va);
}

int putc(int a1, FILE *a2)
{
  int w;
  int v5;
  unsigned __int8 *v6;

  flockfile(a2);
  w = a2->_w;
  a2->_w = w - 1;
  v5 = a1;
  if (w < 1 && (a1 == 10 || w <= a2->_lbfsize))
  {
    v5 = __swbuf(a1, a2);
  }
  else
  {
    v6 = a2->_p++;
    *v6 = a1;
  }
  funlockfile(a2);
  return v5;
}

int putc_unlocked(int result, FILE *a2)
{
  int w;
  unsigned __int8 *v3;

  w = a2->_w;
  a2->_w = w - 1;
  if (w < 1 && (result == 10 || w <= a2->_lbfsize))
    return __swbuf(result, a2);
  v3 = a2->_p++;
  *v3 = result;
  return result;
}

int putchar_unlocked(int result)
{
  FILE *v1;
  int w;
  unsigned __int8 *v3;

  v1 = __stdoutp;
  w = __stdoutp->_w;
  __stdoutp->_w = w - 1;
  if (w < 1 && (result == 10 || w <= v1->_lbfsize))
    return __swbuf(result, v1);
  v3 = v1->_p++;
  *v3 = result;
  return result;
}

int puts(const char *a1)
{
  const char *v2;
  FILE *v3;
  __sFILEX *extra;
  int v5;
  const char **v7;
  int v8;
  int v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;

  if (off_1EDF54E10)
    off_1EDF54E10(a1);
  if (a1)
    v2 = a1;
  else
    v2 = "(null)";
  v10 = v2;
  v11 = _platform_strlen();
  v12 = "\n";
  v13 = 1;
  v7 = &v10;
  v8 = 2;
  v9 = v11 + 1;
  flockfile(__stdoutp);
  v3 = __stdoutp;
  extra = __stdoutp->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0)
    *((_BYTE *)extra + 72) |= 7u;
  if (__sfvwrite((uint64_t)v3, (uint64_t)&v7))
    v5 = -1;
  else
    v5 = 10;
  funlockfile(__stdoutp);
  return v5;
}

int putw(int a1, FILE *a2)
{
  int v3;
  _QWORD v5[2];
  _QWORD v6[2];
  int v7;

  v7 = a1;
  v5[0] = &v7;
  v5[1] = 4;
  v6[0] = v5;
  v6[1] = 0x400000001;
  flockfile(a2);
  v3 = __sfvwrite((uint64_t)a2, (uint64_t)v6);
  funlockfile(a2);
  return v3;
}

wint_t putwc(__int32 a1, FILE *a2)
{
  uint64_t v2;
  _xlocale *v3;
  _xlocale *v4;

  v2 = __locale_key;
  v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3)
    v4 = v3;
  else
    v4 = (_xlocale *)&__global_locale;
  return fputwc_l(a1, a2, v4);
}

wint_t putwchar(__int32 a1)
{
  uint64_t v1;
  _xlocale *v2;
  _xlocale *v3;

  v1 = __locale_key;
  v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2)
    v3 = v2;
  else
    v3 = (_xlocale *)&__global_locale;
  return fputwc_l(a1, __stdoutp, v3);
}

wint_t putwchar_l(__int32 a1, locale_t a2)
{
  return fputwc_l(a1, __stdoutp, a2);
}

uint64_t lflush(FILE *a1)
{
  uint64_t v2;

  if ((~(unsigned __int16)a1->_flags & 9) != 0)
    return 0;
  flockfile(a1);
  v2 = __sflush((uint64_t)a1);
  funlockfile(a1);
  return v2;
}

int __srget(FILE *a1)
{
  unsigned __int8 *v3;

  if (__srefill((uint64_t)a1))
    return -1;
  --a1->_r;
  v3 = a1->_p++;
  return *v3;
}

int scanf(const char *a1, ...)
{
  uint64_t v2;
  _xlocale *v3;
  _xlocale *v4;
  int v5;
  va_list va;

  va_start(va, a1);
  flockfile(__stdinp);
  v2 = __locale_key;
  v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3)
    v4 = v3;
  else
    v4 = (_xlocale *)&__global_locale;
  v5 = __svfscanf_l((char **)__stdinp, v4, (unsigned __int8 *)a1, (wint_t **)va);
  funlockfile(__stdinp);
  return v5;
}

int scanf_l(locale_t a1, const char *a2, ...)
{
  locale_t v3;
  _xlocale *v4;
  int v5;
  va_list va;

  va_start(va, a2);
  v3 = (locale_t)&__global_locale;
  if (a1 != (locale_t)-1)
    v3 = a1;
  if (a1)
    v4 = v3;
  else
    v4 = (_xlocale *)&__c_locale;
  flockfile(__stdinp);
  v5 = __svfscanf_l((char **)__stdinp, v4, (unsigned __int8 *)a2, (wint_t **)va);
  funlockfile(__stdinp);
  return v5;
}

void setbuf(FILE *a1, char *a2)
{
  setvbuf(a1, a2, 2 * (a2 == 0), 0x400uLL);
}

void setbuffer(FILE *a1, char *a2, int a3)
{
  setvbuf(a1, a2, 2 * (a2 == 0), a3);
}

int setlinebuf(FILE *a1)
{
  return setvbuf(a1, 0, 1, 0);
}

int setvbuf(FILE *a1, char *a2, int a3, size_t a4)
{
  int v8;
  FILE *base;
  __int16 flags;
  int v11;
  size_t v12;
  size_t v13;
  char *v14;
  __int16 v15;
  size_t v17;
  int v18;
  size_t size;

  if (a3 == 2 || (v8 = -1, a3 <= 1) && (a4 & 0x80000000) == 0)
  {
    if (off_1EDF54E20)
    {
      off_1EDF54E20(a1, 152);
      if (off_1EDF54E20)
        off_1EDF54E20(a2, a4);
    }
    flockfile(a1);
    __sflush((uint64_t)a1);
    base = (FILE *)a1->_ub._base;
    if (base)
    {
      if (base != (FILE *)a1->_ubuf)
        free(base);
      a1->_ub._base = 0;
    }
    a1->_lbfsize = 0;
    a1->_r = 0;
    flags = a1->_flags;
    if ((flags & 0x80) != 0)
      free(a1->_bf._base);
    size = 0;
    v18 = 0;
    v11 = flags & 0xE35C;
    if (a3 == 2)
    {
      v8 = 0;
LABEL_15:
      a1->_flags = v11 | 2;
      a1->_w = 0;
      a1->_p = a1->_nbuf;
      a1->_bf._base = a1->_nbuf;
      a1->_bf._size = 1;
LABEL_33:
      funlockfile(a1);
      return v8;
    }
    v11 |= __swhatbuf((uint64_t)a1, (uint64_t *)&size, &v18);
    v12 = size;
    if (a4)
      v13 = a4;
    else
      v13 = size;
    if (a2 && a4)
    {
      v8 = 0;
    }
    else
    {
      v14 = (char *)malloc_type_malloc(v13, 0x3AF4FA4DuLL);
      if (v14)
      {
        a2 = v14;
        v8 = 0;
      }
      else
      {
        v17 = size;
        if (v13 == size)
        {
          v8 = -1;
          goto LABEL_15;
        }
        a2 = (char *)malloc_type_malloc(size, 0xAC2A956FuLL);
        v8 = -1;
        v13 = v17;
        if (!a2)
          goto LABEL_15;
      }
      LOWORD(v11) = v11 | 0x80;
      v12 = size;
    }
    v15 = v11 | 0x800;
    if (v13 == v12)
      v15 = v11;
    a1->_flags = v15 | (a3 == 1);
    a1->_p = (unsigned __int8 *)a2;
    a1->_bf._base = (unsigned __int8 *)a2;
    a1->_bf._size = v13;
    if ((v15 & 8) != 0)
    {
      if (v15 & 1 | (a3 == 1))
      {
        a1->_w = 0;
        a1->_lbfsize = -(int)v13;
      }
      else
      {
        a1->_w = v13;
      }
    }
    else
    {
      a1->_w = 0;
    }
    __cleanup = 1;
    goto LABEL_33;
  }
  return v8;
}

int swprintf(__int32 *a1, size_t a2, const __int32 *a3, ...)
{
  uint64_t v4;
  _xlocale *v5;
  _xlocale *v6;
  va_list va;

  va_start(va, a3);
  v4 = __locale_key;
  v5 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (v5)
    v6 = v5;
  else
    v6 = (_xlocale *)&__global_locale;
  return vswprintf_l(a1, a2, v6, a3, va);
}

int swprintf_l(__int32 *a1, size_t n, locale_t a3, const __int32 *a4, ...)
{
  va_list va;

  va_start(va, a4);
  return vswprintf_l(a1, n, a3, a4, va);
}

int swscanf(const __int32 *a1, const __int32 *a2, ...)
{
  uint64_t v3;
  _xlocale *v4;
  _xlocale *v5;
  va_list va;

  va_start(va, a2);
  v3 = __locale_key;
  v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__global_locale;
  return vswscanf_l(a1, v5, a2, va);
}

int swscanf_l(const __int32 *a1, locale_t a2, const __int32 *a3, ...)
{
  va_list va;

  va_start(va, a3);
  return vswscanf_l(a1, a2, a3, va);
}

char *__cdecl tempnam(const char *__dir, const char *__prefix)
{
  char *result;
  char *v5;
  int v6;
  int *v7;
  char *v8;
  const char *v9;
  const char *v10;
  const char *v11;

  if (off_1EDF54E10)
  {
    off_1EDF54E10(__dir);
    if (off_1EDF54E10)
      off_1EDF54E10(__prefix);
  }
  result = (char *)malloc_type_malloc(0x400uLL, 0xBD580526uLL);
  if (result)
  {
    v5 = result;
    if (!__prefix)
      __prefix = "tmp.";
    if (!__dir
      || access(__dir, 2)
      || (__dir[_platform_strlen() - 1] != 47 ? (v11 = "/") : (v11 = ""),
          snprintf(v5, 0x400uLL, "%s%s%sXXXXXX", __dir, v11, __prefix),
          (result = (char *)_mktemp(v5)) == 0))
    {
      if (access("/var/tmp/", 2)
        || (snprintf(v5, 0x400uLL, "%s%sXXXXXX", "/var/tmp/", __prefix), (result = (char *)_mktemp(v5)) == 0))
      {
        if (issetugid()
          || (v8 = getenv("TMPDIR")) == 0
          || (v9 = v8, access(v8, 2))
          || (v9[_platform_strlen() - 1] != 47 ? (v10 = "/") : (v10 = ""),
              snprintf(v5, 0x400uLL, "%s%s%sXXXXXX", v9, v10, __prefix),
              (result = (char *)_mktemp(v5)) == 0))
        {
          snprintf(v5, 0x400uLL, "%s%sXXXXXX", "/tmp/", __prefix);
          result = (char *)_mktemp(v5);
          if (!result)
          {
            v6 = *__error();
            free(v5);
            v7 = __error();
            result = 0;
            *v7 = v6;
          }
        }
      }
    }
  }
  return result;
}

FILE *tmpfile(void)
{
  char *v0;
  const char *v1;
  const char *v2;
  int v3;
  FILE *result;
  int v5;
  int *v6;
  char *v7;
  sigset_t v8;
  sigset_t v9;

  if (issetugid())
    v0 = 0;
  else
    v0 = getenv("TMPDIR");
  v8 = 0;
  v7 = 0;
  if (v0)
    v1 = v0;
  else
    v1 = "/tmp/";
  if (!*v1)
    return 0;
  v2 = v1[_platform_strlen() - 1] == 47 ? "" : "/";
  asprintf(&v7, "%s%s%s", v1, v2, "tmp.XXXXXX");
  if (!v7)
    return 0;
  v9 = -1;
  sigprocmask(1, &v9, &v8);
  v3 = mkstemp(v7);
  if (v3 == -1)
  {
    free(v7);
    sigprocmask(3, &v8, 0);
    return 0;
  }
  unlink(v7);
  free(v7);
  sigprocmask(3, &v8, 0);
  result = fdopen(v3, "w+");
  if (!result)
  {
    v5 = *__error();
    close_NOCANCEL();
    v6 = __error();
    result = 0;
    *v6 = v5;
  }
  return result;
}

char *__cdecl tmpnam(char *a1)
{
  char *v1;

  v1 = a1;
  if (!a1)
  {
    if (pthread_once(&tmpnam_buf_control, (void (*)(void))tmpnam_buf_allocate))
      return 0;
    v1 = (char *)tmpnam_buf;
    if (!tmpnam_buf)
      return 0;
  }
  if (off_1EDF54E20)
    off_1EDF54E20(v1, 1024);
  snprintf(v1, 0x400uLL, "%stmp.%lu.XXXXXX", "/var/tmp/", tmpnam_tmpcount);
  ++tmpnam_tmpcount;
  return (char *)_mktemp(v1);
}

void *tmpnam_buf_allocate()
{
  void *result;

  result = malloc_type_malloc(0x400uLL, 0xBFAF40B0uLL);
  tmpnam_buf = (uint64_t)result;
  return result;
}

int ungetc(int a1, FILE *a2)
{
  __sFILEX *extra;
  int v5;

  pthread_once(&__sdidinit, __sinit);
  flockfile(a2);
  extra = a2->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0)
    *((_BYTE *)extra + 72) |= 7u;
  v5 = __ungetc(a1, (uint64_t)a2);
  funlockfile(a2);
  return v5;
}

uint64_t __ungetc(int a1, uint64_t a2)
{
  unsigned __int8 v3;
  __int16 v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;

  if (a1 == -1)
    return 0xFFFFFFFFLL;
  v3 = a1;
  v4 = *(_WORD *)(a2 + 16);
  if ((v4 & 4) == 0)
  {
    if ((v4 & 0x10) == 0)
      return 0xFFFFFFFFLL;
    if ((v4 & 8) != 0)
    {
      if (__sflush(a2))
        return 0xFFFFFFFFLL;
      v4 = *(_WORD *)(a2 + 16) & 0xFFF7;
      *(_DWORD *)(a2 + 12) = 0;
      *(_DWORD *)(a2 + 40) = 0;
    }
    v4 |= 4u;
    *(_WORD *)(a2 + 16) = v4;
  }
  v5 = v3;
  v6 = *(void **)(a2 + 88);
  if (v6)
  {
    v7 = *(int *)(a2 + 96);
    if (*(_DWORD *)(a2 + 8) < (int)v7)
    {
      v8 = *(char **)a2;
LABEL_22:
      *(_QWORD *)a2 = v8 - 1;
      *(v8 - 1) = v3;
      goto LABEL_23;
    }
    if (v6 == (void *)(a2 + 116))
    {
      v14 = malloc_type_malloc(0x400uLL, 0x5E060C20uLL);
      if (v14)
      {
        v15 = 0;
        *(_QWORD *)(a2 + 88) = v14;
        *(_DWORD *)(a2 + 96) = 1024;
        v8 = v14 + 1021;
        do
        {
          v14[v15 + 1023] = *(_BYTE *)(a2 + 118 + v15);
          v16 = v15 + 3;
          --v15;
        }
        while (v16 > 1);
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (char *)malloc_type_realloc(v6, 2 * (int)v7, 0x1D909C43uLL);
      if (v11)
      {
        v12 = v11;
        v8 = &v11[v7];
        _platform_memmove();
        *(_QWORD *)(a2 + 88) = v12;
        *(_DWORD *)(a2 + 96) = 2 * v7;
        goto LABEL_22;
      }
    }
    return 0xFFFFFFFFLL;
  }
  *(_WORD *)(a2 + 16) = v4 & 0xFFDF;
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)a2;
  if (v9 && v10 > v9 && *(unsigned __int8 *)(v10 - 1) == v3)
  {
    *(_QWORD *)a2 = v10 - 1;
LABEL_23:
    v13 = *(_DWORD *)(a2 + 8) + 1;
    goto LABEL_24;
  }
  *(_DWORD *)(a2 + 112) = *(_DWORD *)(a2 + 8);
  **(_QWORD **)(a2 + 104) = v10;
  *(_QWORD *)(a2 + 88) = a2 + 116;
  *(_DWORD *)(a2 + 96) = 3;
  *(_BYTE *)(a2 + 118) = v3;
  *(_QWORD *)a2 = a2 + 118;
  v13 = 1;
LABEL_24:
  *(_DWORD *)(a2 + 8) = v13;
  return v5;
}

uint64_t __ungetwc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BYTE v10[6];

  v3 = a1;
  if ((_DWORD)a1 != -1)
  {
    v5 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 1328) + 96))(v10, a1, *(_QWORD *)(a2 + 104) + 80, a3);
    if (v5 == -1)
    {
      *(_WORD *)(a2 + 16) |= 0x40u;
      return 0xFFFFFFFFLL;
    }
    else
    {
      while (v5)
      {
        v6 = v5 - 1;
        v7 = __ungetc(v10[v5 - 1], a2);
        v5 = v6;
        if (v7 == -1)
          return 0xFFFFFFFFLL;
      }
    }
  }
  return v3;
}

wint_t ungetwc(wint_t a1, FILE *a2)
{
  uint64_t v3;
  __sFILEX *extra;
  uint64_t v5;
  void *v6;
  void *v7;
  wint_t v8;

  v3 = *(_QWORD *)&a1;
  flockfile(a2);
  extra = a2->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0)
    *((_BYTE *)extra + 72) = *((_BYTE *)extra + 72) & 0xF8 | 1;
  v5 = __locale_key;
  v6 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6)
    v7 = v6;
  else
    v7 = &__global_locale;
  v8 = __ungetwc(v3, (uint64_t)a2, (uint64_t)v7);
  funlockfile(a2);
  return v8;
}

wint_t ungetwc_l(wint_t a1, FILE *a2, locale_t a3)
{
  uint64_t v5;
  __sFILEX *extra;
  locale_t v7;
  locale_t v8;
  wint_t v9;

  v5 = *(_QWORD *)&a1;
  flockfile(a2);
  extra = a2->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0)
    *((_BYTE *)extra + 72) = *((_BYTE *)extra + 72) & 0xF8 | 1;
  v7 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1)
    v7 = a3;
  if (a3)
    v8 = v7;
  else
    v8 = (locale_t)&__c_locale;
  v9 = __ungetwc(v5, (uint64_t)a2, (uint64_t)v8);
  funlockfile(a2);
  return v9;
}

uint64_t _vdprintf(pthread_mutex_t *a1, pthread_rwlock_t *a2, int a3, unsigned int *a4, unsigned __int8 *a5, __int16 *a6)
{
  uint64_t v6;
  _BYTE *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  _QWORD v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[1024];

  v18 = 0u;
  v17 = 0u;
  v16 = 0;
  v14 = 0u;
  v13 = 0u;
  v12 = 0u;
  v11 = 0u;
  v10 = 0u;
  v9 = 0u;
  v15 = v19;
  v23 = 0;
  v24 = 0;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19[0] = 0;
  v19[1] = 850045858;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  if (a3 < 0x8000)
  {
    v8 = v33;
    DWORD1(v9) = 1024;
    WORD4(v9) = 8;
    WORD5(v9) = a3;
    *((_QWORD *)&v11 + 1) = &v8;
    *((_QWORD *)&v13 + 1) = __swrite;
    *(_QWORD *)&v10 = v33;
    DWORD2(v10) = 1024;
    LOBYTE(v24) = 0;
    v25 = 0uLL;
    v26 = 0uLL;
    v27 = 0uLL;
    v28 = 0uLL;
    v29 = 0uLL;
    v30 = 0uLL;
    v31 = 0uLL;
    v32 = 0uLL;
    v6 = __v2printf(a1, a2, (uint64_t)&v8, a4, a5, a6);
    if ((v6 & 0x80000000) == 0)
    {
      if (__fflush((uint64_t)&v8))
        return 0xFFFFFFFFLL;
      else
        return v6;
    }
  }
  else
  {
    *__error() = 24;
    return 0xFFFFFFFFLL;
  }
  return v6;
}

int vdprintf_l(int a1, locale_t a2, const char *a3, va_list a4)
{
  return _vdprintf((pthread_mutex_t *)0xFFFFFFFFFFFFFFFFLL, 0, a1, (unsigned int *)a2, (unsigned __int8 *)a3, (__int16 *)a4);
}

int vdprintf(int a1, const char *a2, va_list a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;

  v3 = __locale_key;
  v4 = *(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (unsigned int *)&__global_locale;
  return _vdprintf((pthread_mutex_t *)0xFFFFFFFFFFFFFFFFLL, 0, a1, v5, (unsigned __int8 *)a2, (__int16 *)a3);
}

BOOL __printf_is_memory_read_only(vm_address_t a1)
{
  kern_return_t v1;
  mach_port_t object_name;
  mach_msg_type_number_t infoCnt;
  int info[4];
  __int128 v6;
  int v7;
  vm_size_t size;
  vm_address_t address;

  size = 0;
  address = a1;
  v7 = 0;
  *(_OWORD *)info = 0u;
  v6 = 0u;
  object_name = 0;
  infoCnt = 9;
  v1 = vm_region_64(*MEMORY[0x1E0C883F0], &address, &size, 9, info, &infoCnt, &object_name);
  return (v1 | info[0] & 2) == 0;
}

uint64_t grouping_init(uint64_t a1, int a2, locale_t a3)
{
  lconv *v5;
  _BYTE *fixed;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  v5 = localeconv_l(a3);
  fixed = __fix_nogrouping(v5->grouping);
  *(_QWORD *)(a1 + 16) = fixed;
  *(_QWORD *)a1 = v5->thousands_sep;
  v7 = _platform_strlen();
  v8 = 0;
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = a2;
  v9 = *fixed;
  if (v9 != 127)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      if (a2 <= (char)v9)
        break;
      a2 -= (char)v9;
      *(_DWORD *)(a1 + 24) = a2;
      if (fixed[1])
      {
        *(_DWORD *)(a1 + 28) = ++v11;
        *(_QWORD *)(a1 + 16) = ++fixed;
      }
      else
      {
        *(_DWORD *)(a1 + 32) = ++v10;
      }
      v9 = *fixed;
    }
    while (v9 != 127);
    v8 = v10 + v11;
  }
  return (v8 * v7);
}

uint64_t grouping_print(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  unint64_t i;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;

  v8 = *(_DWORD *)(a1 + 24);
  if ((int)a4 - (int)a3 >= v8)
    v9 = v8;
  else
    v9 = (a4 - a3);
  if ((int)v9 < 1)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    v10 = *(_DWORD *)(a2 + 20);
    v11 = *(int *)(a2 + 16);
    v12 = a2 + 16 * v11;
    *(_QWORD *)(v12 + 24) = a3;
    *(_QWORD *)(v12 + 32) = v9;
    v13 = v10 + v9;
    *(_DWORD *)(a2 + 16) = v11 + 1;
    *(_DWORD *)(a2 + 20) = v13;
    if ((int)v11 >= 7)
    {
      if (v13)
      {
        v14 = __sfvwrite(*(_QWORD *)a2, a2 + 8);
        *(_QWORD *)(a2 + 16) = 0;
        if (v14)
          return 0xFFFFFFFFLL;
      }
      else
      {
        *(_DWORD *)(a2 + 16) = 0;
      }
    }
  }
  v16 = v8 - v9;
  if (v8 - (int)v9 >= 1)
  {
    v18 = *(_DWORD *)(a2 + 16);
    v17 = *(_DWORD *)(a2 + 20);
    do
    {
      v19 = v18;
      if (v16 >= 16)
        v20 = 16;
      else
        v20 = v16;
      v21 = a2 + 16 * v18;
      *(_QWORD *)(v21 + 24) = "0000000000000000";
      *(_QWORD *)(v21 + 32) = v20;
      v17 += v20;
      v18 = v19 + 1;
      *(_DWORD *)(a2 + 16) = v19 + 1;
      *(_DWORD *)(a2 + 20) = v17;
      if (v19 >= 7)
      {
        if (v17)
        {
          v22 = __sfvwrite(*(_QWORD *)a2, a2 + 8);
          v17 = 0;
          v18 = 0;
          *(_QWORD *)(a2 + 16) = 0;
          if (v22)
            return 0xFFFFFFFFLL;
        }
        else
        {
          v18 = 0;
          *(_DWORD *)(a2 + 16) = 0;
        }
      }
      v23 = __OFSUB__(v16, (_DWORD)v20);
      v16 -= v20;
    }
    while (!((v16 < 0) ^ v23 | (v16 == 0)));
  }
  for (i = a3 + *(int *)(a1 + 24); ; i += **(char **)(a1 + 16))
  {
    v25 = *(_DWORD *)(a1 + 28);
    v26 = *(_DWORD *)(a1 + 32);
    if (v25 <= 0)
      break;
    if (v26 < 1)
    {
      --*(_QWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 28) = v25 - 1;
      goto LABEL_29;
    }
LABEL_28:
    *(_DWORD *)(a1 + 32) = v26 - 1;
LABEL_29:
    v27 = *(int *)(a1 + 8);
    v28 = *(_DWORD *)(a2 + 20);
    v29 = *(int *)(a2 + 16);
    v30 = a2 + 16 * v29;
    *(_QWORD *)(v30 + 24) = *(_QWORD *)a1;
    *(_QWORD *)(v30 + 32) = v27;
    v31 = v28 + v27;
    v32 = v29 + 1;
    *(_DWORD *)(a2 + 16) = v29 + 1;
    *(_DWORD *)(a2 + 20) = v31;
    if ((int)v29 >= 7)
    {
      if (v31)
      {
        v33 = __sfvwrite(*(_QWORD *)a2, a2 + 8);
        v31 = 0;
        v32 = 0;
        *(_QWORD *)(a2 + 16) = 0;
        if (v33)
          return 0xFFFFFFFFLL;
      }
      else
      {
        v32 = 0;
        *(_DWORD *)(a2 + 16) = 0;
      }
    }
    v34 = **(char **)(a1 + 16);
    if ((int)a4 - (int)i >= v34)
      v35 = v34;
    else
      v35 = (a4 - i);
    if ((int)v35 < 1)
    {
      LODWORD(v35) = 0;
    }
    else
    {
      v36 = a2 + 16 * v32;
      *(_QWORD *)(v36 + 24) = i;
      *(_QWORD *)(v36 + 32) = v35;
      v31 += v35;
      *(_DWORD *)(a2 + 16) = v32 + 1;
      *(_DWORD *)(a2 + 20) = v31;
      if (v32 < 7)
      {
        ++v32;
      }
      else if (v31)
      {
        v37 = __sfvwrite(*(_QWORD *)a2, a2 + 8);
        v31 = 0;
        v32 = 0;
        *(_QWORD *)(a2 + 16) = 0;
        if (v37)
          return 0xFFFFFFFFLL;
      }
      else
      {
        v32 = 0;
        *(_DWORD *)(a2 + 16) = 0;
      }
    }
    v38 = v34 - v35;
    if (v38 >= 1)
    {
      do
      {
        v39 = v32;
        if (v38 >= 16)
          v40 = 16;
        else
          v40 = v38;
        v41 = a2 + 16 * v32;
        *(_QWORD *)(v41 + 24) = "0000000000000000";
        *(_QWORD *)(v41 + 32) = v40;
        v31 += v40;
        v32 = v39 + 1;
        *(_DWORD *)(a2 + 16) = v39 + 1;
        *(_DWORD *)(a2 + 20) = v31;
        if (v39 >= 7)
        {
          if (v31)
          {
            v42 = __sfvwrite(*(_QWORD *)a2, a2 + 8);
            v31 = 0;
            v32 = 0;
            *(_QWORD *)(a2 + 16) = 0;
            if (v42)
              return 0xFFFFFFFFLL;
          }
          else
          {
            v32 = 0;
            *(_DWORD *)(a2 + 16) = 0;
          }
        }
        v23 = __OFSUB__(v38, (_DWORD)v40);
        v38 -= v40;
      }
      while (!((v38 < 0) ^ v23 | (v38 == 0)));
    }
  }
  if (v26 > 0)
    goto LABEL_28;
  if (i <= a4)
    v43 = i;
  else
    v43 = a4;
  return (v43 - a3);
}

int vfscanf(FILE *__stream, const char *__format, va_list a3)
{
  uint64_t v6;
  _xlocale *v7;
  _xlocale *v8;
  int v9;

  if (off_1EDF54E20)
    off_1EDF54E20(__stream, 152);
  flockfile(__stream);
  v6 = __locale_key;
  v7 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v6);
  if (v7)
    v8 = v7;
  else
    v8 = (_xlocale *)&__global_locale;
  v9 = __svfscanf_l((char **)__stream, v8, (unsigned __int8 *)__format, (wint_t **)a3);
  funlockfile(__stream);
  return v9;
}

int vfscanf_l(FILE *a1, locale_t a2, const char *a3, va_list a4)
{
  locale_t v8;
  _xlocale *v9;
  int v10;

  if (off_1EDF54E20)
    off_1EDF54E20(a1, 152);
  v8 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1)
    v8 = a2;
  if (a2)
    v9 = v8;
  else
    v9 = (_xlocale *)&__c_locale;
  flockfile(a1);
  v10 = __svfscanf_l((char **)a1, v9, (unsigned __int8 *)a3, (wint_t **)a4);
  funlockfile(a1);
  return v10;
}

int __svfscanf(FILE *a1, const char *a2, va_list a3)
{
  uint64_t v5;
  _xlocale *v6;
  _xlocale *v7;

  v5 = __locale_key;
  v6 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6)
    v7 = v6;
  else
    v7 = (_xlocale *)&__global_locale;
  return __svfscanf_l((char **)a1, v7, (unsigned __int8 *)a2, (wint_t **)a3);
}

int vfwprintf_l(FILE *a1, locale_t a2, const __int32 *a3, __darwin_va_list a4)
{
  locale_t v7;
  _xlocale *v8;
  __int16 flags;
  int file;
  char v11;
  int v12;
  int (__cdecl *write)(void *, const char *, int);
  __sFILEX *extra;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _QWORD *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  _QWORD v33[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[1024];

  v7 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1)
    v7 = a2;
  if (a2)
    v8 = v7;
  else
    v8 = (_xlocale *)&__c_locale;
  flockfile(a1);
  flags = a1->_flags;
  if ((flags & 0x1A) != 0xA || (file = a1->_file, file < 0))
  {
    v12 = __vfwprintf((uint64_t)a1, v8, (unsigned int *)a3, a4);
    goto LABEL_14;
  }
  v32 = 0u;
  v31 = 0u;
  v30 = 0;
  v28 = 0u;
  v27 = 0u;
  v26 = 0u;
  v25 = 0u;
  v24 = 0u;
  v23 = 0u;
  v29 = v33;
  v37 = 0;
  v38 = 0;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33[0] = 0;
  v33[1] = 850045858;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  if ((flags & 8) == 0 || (v11 = 0, (flags & 0x200) == 0) && !a1->_bf._base)
  {
    if (__swsetup((uint64_t)a1))
    {
      v12 = -1;
      goto LABEL_14;
    }
    flags = a1->_flags;
    v11 = v38 & 0xF8;
    LOWORD(file) = a1->_file;
  }
  WORD4(v23) = flags & 0xFFFD;
  WORD5(v23) = file;
  write = a1->_write;
  *((_QWORD *)&v25 + 1) = a1->_cookie;
  *((_QWORD *)&v27 + 1) = write;
  extra = a1->_extra;
  LOBYTE(v38) = *((_BYTE *)extra + 72) & 7 | v11;
  v16 = *((_OWORD *)extra + 8);
  v18 = *((_OWORD *)extra + 5);
  v17 = *((_OWORD *)extra + 6);
  v41 = *((_OWORD *)extra + 7);
  v42 = v16;
  v39 = v18;
  v40 = v17;
  v19 = *((_OWORD *)extra + 12);
  v21 = *((_OWORD *)extra + 9);
  v20 = *((_OWORD *)extra + 10);
  v45 = *((_OWORD *)extra + 11);
  v46 = v19;
  v43 = v21;
  v44 = v20;
  v22 = v47;
  *(_QWORD *)&v24 = v47;
  DWORD1(v23) = 1024;
  DWORD2(v24) = 1024;
  LODWORD(v25) = 0;
  v12 = __vfwprintf((uint64_t)&v22, v8, (unsigned int *)a3, a4);
  if ((v12 & 0x80000000) == 0 && __fflush((uint64_t)&v22))
    v12 = -1;
  if ((BYTE8(v23) & 0x40) != 0)
    a1->_flags |= 0x40u;
LABEL_14:
  funlockfile(a1);
  return v12;
}

uint64_t __vfwprintf(uint64_t a1, _xlocale *a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v7;
  lconv *v8;
  uint64_t v9;
  __int32 v10;
  unsigned int *i;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  const char *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  _DWORD *v34;
  int v35;
  int *v36;
  int *v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  _DWORD *v42;
  int v43;
  const char *v44;
  char v45;
  double v46;
  uint64_t v47;
  unsigned __int8 v48;
  double v49;
  int v50;
  __int16 v51;
  double v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  const char *v56;
  int v57;
  uint64_t *v58;
  const char *v59;
  double *v60;
  unsigned int v61;
  char *v62;
  double *v63;
  unsigned int v64;
  uint64_t v65;
  double v66;
  wint_t v67;
  unint64_t v68;
  char **v69;
  unint64_t v70;
  uint64_t **v71;
  unint64_t v72;
  const char **v73;
  int64_t v74;
  uint64_t v75;
  int64_t v77;
  unint64_t *v78;
  unint64_t *v79;
  int v80;
  unint64_t *v81;
  unint64_t *v82;
  double *v83;
  uint64_t v84;
  int *v85;
  unint64_t *v86;
  double *v87;
  char *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  int v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  int *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int *v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  wint_t *v109;
  uint64_t *v110;
  unint64_t *v111;
  unint64_t *v112;
  unint64_t *v113;
  int v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  int v119;
  uint64_t v120;
  int v121;
  int v122;
  int *v123;
  BOOL v124;
  int32x2_t v125;
  int v126;
  int *v127;
  int32x2_t v128;
  int v129;
  int *v130;
  int v131;
  uint64_t v132;
  int v133;
  int v134;
  int *v135;
  int v136;
  uint64_t v137;
  int v138;
  int v139;
  int *v140;
  __int128 v141;
  _OWORD *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  int v147;
  int v148;
  int *v149;
  int v150;
  int v151;
  unint64_t v152;
  int v153;
  int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  char v159;
  int v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  unint64_t v168;
  int v169;
  int v170;
  int v171;
  int *v172;
  int v173;
  int v174;
  int *v175;
  int v176;
  uint64_t v177;
  int v178;
  int v179;
  int *v180;
  int *v181;
  int v182;
  int v183;
  int *v184;
  int v185;
  int v186;
  char *v187;
  int v188;
  int v189;
  int *v190;
  float *v191;
  uint64_t v192;
  int32x2_t v193;
  int v194;
  int *v195;
  uint64_t v196;
  int v197;
  char *v198;
  int v199;
  int v200;
  int *v201;
  int32x2_t v202;
  int v203;
  int *v204;
  int v205;
  int32x2_t v206;
  int v207;
  int *v208;
  int v209;
  int v210;
  uint64_t v211;
  int v212;
  int v213;
  int *v214;
  uint64_t v215;
  int v216;
  int v217;
  char *v218;
  int v219;
  int v220;
  int *v221;
  float *v222;
  uint64_t v223;
  int32x2_t v224;
  int v225;
  int *v226;
  uint64_t v227;
  int v228;
  char *v229;
  int v230;
  int v231;
  int *v232;
  int v233;
  int v234;
  char *v235;
  int v236;
  int v237;
  int *v238;
  float *v239;
  uint64_t v240;
  int32x2_t v241;
  int v242;
  int *v243;
  uint64_t v244;
  int v245;
  char *v246;
  int v247;
  int v248;
  int *v249;
  unint64_t v250;
  uint64_t v251;
  int v252;
  int v253;
  int *v254;
  int v255;
  int v256;
  char *v257;
  int v258;
  int v259;
  int *v260;
  float *v261;
  uint64_t j;
  int32x2_t v263;
  int v264;
  int *v265;
  uint64_t v266;
  int v267;
  char *v268;
  int v269;
  int v270;
  int *v271;
  int v272;
  uint64_t v273;
  int v274;
  int v275;
  int *v276;
  int32x2_t v277;
  int v278;
  int *v279;
  unint64_t v280;
  int v281;
  int v282;
  int v283;
  int *v284;
  int v285;
  uint64_t v286;
  int v287;
  int v288;
  int *v289;
  uint64_t v290;
  int v291;
  int v292;
  int *v293;
  unint64_t v294;
  unint64_t v295;
  int *v296;
  unint64_t v297;
  unint64_t v298;
  const char *v299;
  int v300;
  unsigned __int8 v301;
  uint64_t v302;
  _DWORD *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  char *v312;
  _DWORD *v313;
  void *v314;
  int v315[4];
  _OWORD v316[8];
  uint64_t v317;
  int v318;
  __int128 v319;
  char *v320;
  int v321;
  double v322;
  uint64_t v323;
  _QWORD v324[5];
  int v325;
  _DWORD *v326;
  char v327[20];
  uint64_t v328;
  __int32 v329[34];
  int v330;
  int v331;
  _DWORD v332[2];
  int v333;
  _DWORD v334[5];
  mbstate_t v335;
  int v336;

  v326 = a4;
  v325 = 0;
  memset(v324, 0, 32);
  v322 = 0.0;
  v323 = 0;
  v321 = 0;
  v320 = 0;
  v319 = 0uLL;
  v318 = 0;
  v317 = 0;
  memset(v316, 0, sizeof(v316));
  *(_OWORD *)v315 = 0u;
  v313 = 0;
  if (((*(_WORD *)(a1 + 16) & 8) == 0 || (*(_WORD *)(a1 + 16) & 0x200) == 0 && !*(_QWORD *)(a1 + 24))
    && __swsetup(a1))
  {
    *__error() = 9;
    return 0xFFFFFFFFLL;
  }
  v7 = *(_QWORD *)(a1 + 104);
  if ((*(_BYTE *)(v7 + 72) & 7) == 0)
    *(_BYTE *)(v7 + 72) = *(_BYTE *)(v7 + 72) & 0xF8 | 1;
  v313 = v326;
  v314 = 0;
  *(_QWORD *)&v315[2] = (char *)v316 + 8;
  *(_QWORD *)&v316[0] = 0;
  v302 = a1;
  *(_QWORD *)v315 = a1;
  v329[0] = 0;
  memset(&v335, 0, sizeof(v335));
  v8 = localeconv_l(a2);
  v303 = 0;
  v304 = 0;
  v298 = 0;
  v299 = 0;
  v297 = 0;
  v300 = 0;
  v301 = 0;
  v9 = 0;
  if ((~mbrtowc_l(v329, v8->decimal_point, *(int *)(*((_QWORD *)a2 + 166) + 64), &v335, a2) & 0xFFFFFFFE) != 0)
    v10 = v329[0];
  else
    v10 = 46;
  HIDWORD(v323) = v10;
  LODWORD(v295) = 0;
  v306 = 1;
  v296 = (int *)a3;
LABEL_12:
  for (i = a3; ; ++i)
  {
    v12 = *i;
    if (!*i || v12 == 37)
      break;
  }
  v13 = (char *)i - (char *)a3;
  if (i == a3)
  {
    v305 = v9;
  }
  else
  {
    v305 = (v13 >> 2) + v9;
    if (v305 >= 0x80000000)
      goto LABEL_718;
    v14 = v316[0];
    v15 = DWORD1(v316[0]);
    v16 = &v315[4 * SLODWORD(v316[0])];
    *((_QWORD *)v16 + 3) = a3;
    *((_QWORD *)v16 + 4) = (int)(v13 >> 2);
    DWORD1(v316[0]) = v15 + ((unint64_t)v13 >> 2);
    LODWORD(v316[0]) = v14 + 1;
    if (v14 >= 7 && __sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
      goto LABEL_722;
  }
  v17 = v306;
  if (!v12)
  {
LABEL_720:
    __sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]);
    goto LABEL_721;
  }
  v18 = 0;
  v19 = 0;
  v324[1] = 0;
  v325 = 0;
  v20 = (const char *)a3;
  a3 = i + 1;
  v331 = 0;
  v318 = 88;
  v21 = -1;
LABEL_24:
  v308 = v21;
LABEL_25:
  while (2)
  {
    v23 = *a3++;
    v22 = v23;
LABEL_26:
    v24 = v18;
    while (1)
    {
      v18 = v24;
      if (v22 - 49 >= 9)
        break;
      v24 = 0;
      do
      {
        v24 = v22 - 48 + 10 * v24;
        v25 = *a3++;
        v22 = v25;
      }
      while (v25 - 48 < 0xA);
      if (v22 == 36)
      {
        v17 = v24;
        if (!v314)
        {
          v314 = v329;
          v17 = v24;
          if (__find_warguments(v296, v313, (_DWORD **)&v314))
            goto LABEL_719;
        }
        goto LABEL_25;
      }
    }
    switch(v22)
    {
      case ' ':
        if (!v325)
          v325 = 32;
        continue;
      case '#':
        v19 |= 1u;
        continue;
      case '\'':
        v19 |= 0x200u;
        continue;
      case '*':
        v30 = *a3;
        v31 = *a3 - 48;
        if (v31 > 9)
        {
          v32 = 0;
          v20 = (const char *)a3;
        }
        else
        {
          v32 = 0;
          v20 = (const char *)a3;
          do
          {
            v32 = 10 * v32 + v31;
            v33 = *((_DWORD *)v20 + 1);
            v20 += 4;
            v30 = v33;
            v31 = v33 - 48;
          }
          while ((v33 - 48) < 0xA);
        }
        v34 = v314;
        if (v30 != 36)
        {
          if (v314)
          {
            v35 = *((_DWORD *)v314 + 4 * (int)v17);
          }
          else
          {
            v36 = v326;
            v326 += 2;
            v35 = *v36;
          }
          v17 = (v17 + 1);
LABEL_75:
          v18 = v35;
          if (v35 < 0)
          {
            v18 = -(uint64_t)v35;
LABEL_77:
            v19 |= 4u;
          }
          continue;
        }
        if (v314)
          goto LABEL_69;
        v314 = v329;
        if (!__find_warguments(v296, v313, (_DWORD **)&v314))
        {
          v34 = v314;
          if (v314)
          {
LABEL_69:
            v35 = v34[4 * v32];
          }
          else
          {
            v37 = v326;
            v326 += 2;
            v35 = *v37;
          }
          v20 += 4;
          a3 = (unsigned int *)v20;
          goto LABEL_75;
        }
        goto LABEL_719;
      case '+':
        v325 = 43;
        continue;
      case ',':
      case ':':
      case ';':
      case '_':
        v318 = v22;
        continue;
      case '-':
        goto LABEL_77;
      case '.':
        v26 = *a3++;
        v22 = v26;
        if (v26 != 42)
        {
          v308 = 0;
          v27 = v22 - 48;
          if (v22 - 48 <= 9)
          {
            v28 = 0;
            do
            {
              v28 = 10 * v28 + v27;
              v29 = *a3++;
              v22 = v29;
              v27 = v29 - 48;
            }
            while (v29 - 48 < 0xA);
            v308 = v28;
          }
          goto LABEL_26;
        }
        v38 = *a3;
        v39 = *a3 - 48;
        if (v39 > 9)
        {
          v40 = 0;
          v20 = (const char *)a3;
        }
        else
        {
          v40 = 0;
          v20 = (const char *)a3;
          do
          {
            v40 = 10 * v40 + v39;
            v41 = *((_DWORD *)v20 + 1);
            v20 += 4;
            v38 = v41;
            v39 = v41 - 48;
          }
          while ((v41 - 48) < 0xA);
        }
        v42 = v314;
        if (v38 != 36)
        {
          if (v314)
          {
            LODWORD(v21) = *((_DWORD *)v314 + 4 * (int)v17);
          }
          else
          {
            v21 = (uint64_t)v326;
            v326 += 2;
            LODWORD(v21) = *(_DWORD *)v21;
          }
          v17 = (v17 + 1);
LABEL_94:
          v21 = (int)v21;
          goto LABEL_24;
        }
        if (v314)
          goto LABEL_88;
        v314 = v329;
        if (!__find_warguments(v296, v313, (_DWORD **)&v314))
        {
          v42 = v314;
          if (v314)
          {
LABEL_88:
            LODWORD(v21) = v42[4 * v40];
          }
          else
          {
            v21 = (uint64_t)v326;
            v326 += 2;
            LODWORD(v21) = *(_DWORD *)v21;
          }
          v20 += 4;
          a3 = (unsigned int *)v20;
          goto LABEL_94;
        }
        goto LABEL_719;
      case '0':
        v19 |= 0x80u;
        continue;
      case 'A':
      case 'a':
        if ((v19 & 0x4000) != 0)
          goto LABEL_123;
        if (v22 == 97)
          v43 = 120;
        else
          v43 = 88;
        v44 = "0123456789ABCDEF";
        if (v22 == 97)
          v44 = (const char *)&__vfwprintf_xdigs_lower;
        v299 = v44;
        if (v22 == 97)
          v45 = 112;
        else
          v45 = 80;
        v331 = v43;
        if ((v19 & 8) != 0)
        {
          if (v314)
          {
            v66 = *((double *)v314 + 2 * (int)v17);
          }
          else
          {
            v87 = (double *)v326;
            v326 += 2;
            v66 = *v87;
          }
          v322 = v66;
          v84 = __hldtoa(v44, v308 + (v308 >= 0), &v321, &v323, &v320);
        }
        else
        {
          if (v314)
          {
            v46 = *((double *)v314 + 2 * (int)v17);
          }
          else
          {
            v83 = (double *)v326;
            v326 += 2;
            v46 = *v83;
          }
          v322 = v46;
          v84 = (uint64_t)__hdtoa((uint64_t)v44, v308 + (v308 >= 0), &v321, &v323, &v320, v46);
        }
        v62 = (char *)v84;
        v301 = v45;
        if (v308 + (v308 >= 0) >= 0)
          v88 = (char *)(v308 + (v308 >= 0));
        else
          v88 = &v320[-v84];
        if (v321 == 0x7FFFFFFF)
          v331 = 0;
        v308 = (uint64_t)v88;
        free(v303);
        goto LABEL_256;
      case 'C':
        v51 = v19 | 0x10;
        goto LABEL_150;
      case 'D':
        LOWORD(v19) = v19 | 0x10;
        goto LABEL_128;
      case 'E':
      case 'e':
        if ((v19 & 0x4000) != 0)
          goto LABEL_123;
        if (v308 >= 0)
          v47 = v308 + 1;
        else
          v47 = 7;
        v48 = v22;
        goto LABEL_118;
      case 'F':
      case 'f':
        if ((v19 & 0x4000) != 0)
          goto LABEL_123;
        v48 = 0;
        v47 = v308;
        goto LABEL_118;
      case 'G':
      case 'g':
        if ((v19 & 0x4000) != 0)
        {
LABEL_123:
          v50 = 0;
          v51 = v19 | 0x100;
          goto LABEL_393;
        }
        v48 = v22 - 2;
        v47 = v308;
        if ((unint64_t)v308 <= 1)
          v47 = 1;
LABEL_118:
        if (v47 < 0)
          v47 = 6;
        v308 = v47;
        free(v303);
        v301 = v48;
        if ((v19 & 8) != 0)
        {
          if (v314)
          {
            v52 = *((double *)v314 + 2 * (int)v17);
          }
          else
          {
            v63 = (double *)v326;
            v326 += 2;
            v52 = *v63;
          }
          v322 = v52;
          if (v48)
            v64 = 2;
          else
            v64 = 3;
          v62 = __ldtoa(&v322, v64, v308, &v321, &v323, &v320);
        }
        else
        {
          if (v314)
          {
            v49 = *((double *)v314 + 2 * (int)v17);
          }
          else
          {
            v60 = (double *)v326;
            v326 += 2;
            v49 = *v60;
          }
          v322 = v49;
          if (v48)
            v61 = 2;
          else
            v61 = 3;
          v62 = __dtoa(v61, v308, &v321, &v323, &v320, v49);
          if (v321 == 9999)
            v321 = 0x7FFFFFFF;
        }
LABEL_256:
        v89 = (int)v320;
        v303 = __mbsconv(v62, 0xFFFFFFFF, a2);
        __freedtoa((uint64_t)v62);
        if ((_DWORD)v323)
          v325 = 45;
        v300 = v89 - (_DWORD)v62;
        v17 = (v17 + 1);
        if (v321 == 0x7FFFFFFF)
        {
          if (*v303 == 78)
          {
            if (v22 <= 0x60)
              v20 = "N";
            else
              v20 = "n";
            v325 = 0;
          }
          else if (v22 <= 0x60)
          {
            v20 = "I";
          }
          else
          {
            v20 = "i";
          }
          v50 = 0;
          v51 = v19 & 0xFF7F;
          v304 = 3;
          goto LABEL_393;
        }
        v51 = v19 | 0x100;
        v90 = v308;
        if ((v22 & 0xFFFFFFDF) != 0x47)
          goto LABEL_269;
        if (v321 >= -3 && (v91 = v308 - v321, v308 >= v321))
        {
          v103 = v19 & 1;
          if ((v19 & 1) == 0)
            v91 = v300 - v321;
          v308 = v91 & ~(v91 >> 63);
        }
        else
        {
          if ((v19 & 1) == 0)
            v90 = v300;
LABEL_269:
          v308 = v90;
          if (v301)
          {
            v92 = v321 - 1;
            if (v321 >= 1)
              v93 = 43;
            else
              v93 = 45;
            if (v321 - 1 < 0)
              v92 = 1 - v321;
            v332[0] = v301;
            v332[1] = v93;
            if (v92 < 0xA)
            {
              v104 = &v333;
              if ((v301 & 0xDF) == 0x45)
              {
                v333 = 48;
                v104 = v334;
              }
              *v104 = v92 + 48;
              v98 = v104 + 1;
            }
            else
            {
              v94 = 0;
              v95 = (unsigned int *)&v328;
              do
              {
                v96 = v92;
                v97 = v92;
                v92 /= 0xAu;
                *v95-- = (v97 % 0xA) | 0x30;
                ++v94;
              }
              while (v96 > 0x63);
              *v95 = v92 + 48;
              v98 = &v333;
              if (7 - v94 <= 7)
              {
                v99 = 5 - v94;
                v307 = v17;
                v100 = v94 - 5;
                _platform_memmove();
                v101 = 5;
                if (v99 > 5)
                  v101 = v99;
                v102 = v101 + v100;
                v17 = v307;
                v98 = &v334[v102];
              }
            }
            v50 = 0;
            v295 = (unint64_t)((char *)v98 - (char *)v332) >> 2;
            v105 = v90 + ((v90 > 1) | (v19 & 1)) + (int)v295;
            goto LABEL_306;
          }
          v103 = v19 & 1;
        }
        v301 = 0;
        v50 = 0;
        if (v321 <= 0)
          v106 = 1;
        else
          v106 = v321;
        if (v103)
          v107 = 0;
        else
          v107 = v308 == 0;
        if (v107)
          v108 = 0;
        else
          v108 = v308 + 1;
        v304 = v108 + v106;
        if ((v19 & 0x200) == 0 || v321 < 1)
          goto LABEL_307;
        v50 = 0;
        v301 = 0;
        v105 = v304 + (int)grouping_init_0((uint64_t)v324, v321, a2);
LABEL_306:
        v304 = v105;
LABEL_307:
        v20 = (const char *)v303;
        goto LABEL_393;
      case 'L':
        v19 |= 8u;
        continue;
      case 'O':
        LOWORD(v19) = v19 | 0x10;
        goto LABEL_133;
      case 'S':
        LOWORD(v19) = v19 | 0x10;
        goto LABEL_138;
      case 'U':
        LOWORD(v19) = v19 | 0x10;
        goto LABEL_144;
      case 'X':
        v56 = "0123456789ABCDEF";
        goto LABEL_160;
      case 'c':
        v51 = v19;
LABEL_150:
        if ((v51 & 0x4000) != 0)
        {
          v50 = 0;
        }
        else
        {
          if ((v51 & 0x10) != 0)
          {
            if (v314)
            {
              v67 = *((_DWORD *)v314 + 4 * (int)v17);
            }
            else
            {
              v109 = v326;
              v326 += 2;
              v67 = *v109;
            }
          }
          else
          {
            if (v314)
            {
              v57 = *((_DWORD *)v314 + 4 * (int)v17);
            }
            else
            {
              v85 = v326;
              v326 += 2;
              v57 = *v85;
            }
            v67 = btowc_l(v57, a2);
          }
          v50 = 0;
          v17 = (v17 + 1);
          *(_DWORD *)v335.__mbstate8 = v67;
          v325 = 0;
          v20 = (const char *)&v335;
          v304 = 1;
        }
        goto LABEL_393;
      case 'd':
      case 'i':
LABEL_128:
        if ((v19 & 0x4000) != 0)
          goto LABEL_164;
        if ((v19 & 0x1C20) == 0)
        {
          if ((v19 & 0x10) != 0)
          {
            if (v314)
            {
              v65 = *((_QWORD *)v314 + 2 * (int)v17);
            }
            else
            {
              v110 = (uint64_t *)v326;
              v326 += 2;
              v65 = *v110;
            }
          }
          else if ((v19 & 0x40) != 0)
          {
            if (v314)
            {
              LODWORD(v65) = *((_DWORD *)v314 + 4 * (int)v17);
            }
            else
            {
              v65 = (uint64_t)v326;
              v326 += 2;
              LODWORD(v65) = *(_DWORD *)v65;
            }
            v65 = (__int16)v65;
          }
          else if ((v19 & 0x2000) != 0)
          {
            if (v314)
            {
              LODWORD(v65) = *((_DWORD *)v314 + 4 * (int)v17);
            }
            else
            {
              v65 = (uint64_t)v326;
              v326 += 2;
              LODWORD(v65) = *(_DWORD *)v65;
            }
            v65 = (char)v65;
          }
          else
          {
            if (v314)
            {
              LODWORD(v65) = *((_DWORD *)v314 + 4 * (int)v17);
            }
            else
            {
              v65 = (uint64_t)v326;
              v326 += 2;
              LODWORD(v65) = *(_DWORD *)v65;
            }
            v65 = (int)v65;
          }
          v53 = v298;
          if ((v65 & 0x8000000000000000) == 0)
          {
            v297 = v65;
            goto LABEL_352;
          }
          v297 = -v65;
          goto LABEL_351;
        }
        if (v314)
        {
          v53 = *((_QWORD *)v314 + 2 * (int)v17);
        }
        else
        {
          v78 = (unint64_t *)v326;
          v326 += 2;
          v53 = *v78;
        }
        if ((v53 & 0x8000000000000000) != 0)
        {
          v53 = -(uint64_t)v53;
LABEL_351:
          v325 = 45;
        }
LABEL_352:
        v80 = 10;
LABEL_375:
        if ((int)v308 < 0)
          v51 = v19;
        else
          v51 = v19 & 0xFF7F;
        v114 = v51 & 1;
        v298 = v53;
        if ((v51 & 0x1C20) != 0)
        {
          if (v53 | v308)
            goto LABEL_387;
          v20 = (const char *)&v336;
          if (v80 == 8)
          {
            v20 = (const char *)&v336;
            if ((v51 & 1) != 0)
            {
              v114 = 1;
LABEL_387:
              v20 = (const char *)__ultoa_0(v53, &v336, v80, v114, (uint64_t)v299);
            }
          }
        }
        else
        {
          v53 = v297;
          if (v297 | v308)
            goto LABEL_387;
          v20 = (const char *)&v336;
          if (v80 == 8)
          {
            v20 = (const char *)&v336;
            if ((v51 & 1) != 0)
            {
              v114 = 1;
              v53 = v297;
              goto LABEL_387;
            }
          }
        }
        v304 = ((char *)&v336 - v20) >> 2;
        if ((char *)&v336 - v20 >= 129)
          abort_report_np((uint64_t)"%s:%s:%u: size (%zd) > BUF (%d)");
        v17 = (v17 + 1);
        if ((v51 & 0x200) != 0 && &v336 != (int *)v20)
          v304 += (int)grouping_init_0((uint64_t)v324, (unint64_t)((char *)&v336 - v20) >> 2, a2);
        v50 = v308;
        goto LABEL_393;
      case 'h':
        if ((v19 & 0x40) != 0)
          v19 = v19 & 0xFFFFDFBF | 0x2000;
        else
          v19 |= 0x40u;
        continue;
      case 'j':
        v19 |= 0x1000u;
        continue;
      case 'l':
        if ((v19 & 0x10) != 0)
          v19 = v19 & 0xFFFFFFCF | 0x20;
        else
          v19 |= 0x10u;
        continue;
      case 'n':
        if (v314)
        {
          v58 = (uint64_t *)*((_QWORD *)v314 + 2 * (int)v17);
        }
        else
        {
          v71 = (uint64_t **)v326;
          v326 += 2;
          v58 = *v71;
        }
        v306 = (v17 + 1);
        v9 = v305;
        if (v58)
        {
          if ((v19 & 0x20) != 0 || (v19 & 0x400) != 0 || (v19 & 0x800) != 0 || (v19 & 0x1000) != 0 || (v19 & 0x10) != 0)
          {
            v9 = v305;
            *v58 = v305;
          }
          else if ((v19 & 0x40) != 0)
          {
            v9 = v305;
            *(_WORD *)v58 = v305;
          }
          else
          {
            v9 = v305;
            if ((v19 & 0x2000) != 0)
              *(_BYTE *)v58 = v305;
            else
              *(_DWORD *)v58 = v305;
          }
        }
        goto LABEL_12;
      case 'o':
LABEL_133:
        if ((v19 & 0x4000) != 0)
          goto LABEL_164;
        if ((v19 & 0x1C20) != 0)
        {
          if (v314)
          {
            v53 = *((_QWORD *)v314 + 2 * (int)v17);
          }
          else
          {
            v79 = (unint64_t *)v326;
            v326 += 2;
            v53 = *v79;
          }
          v80 = 8;
          goto LABEL_374;
        }
        if ((v19 & 0x10) != 0)
        {
          if (v314)
          {
            v68 = *((_QWORD *)v314 + 2 * (int)v17);
          }
          else
          {
            v111 = (unint64_t *)v326;
            v326 += 2;
            v68 = *v111;
          }
        }
        else if ((v19 & 0x40) != 0)
        {
          if (v314)
          {
            LOWORD(v68) = *((_WORD *)v314 + 8 * (int)v17);
          }
          else
          {
            v68 = (unint64_t)v326;
            v326 += 2;
            LODWORD(v68) = *(_DWORD *)v68;
          }
          v68 = (unsigned __int16)v68;
        }
        else if ((v19 & 0x2000) != 0)
        {
          if (v314)
          {
            LOBYTE(v68) = *((_BYTE *)v314 + 16 * (int)v17);
          }
          else
          {
            v68 = (unint64_t)v326;
            v326 += 2;
            LODWORD(v68) = *(_DWORD *)v68;
          }
          v68 = v68;
        }
        else
        {
          if (v314)
          {
            LODWORD(v68) = *((_DWORD *)v314 + 4 * (int)v17);
          }
          else
          {
            v68 = (unint64_t)v326;
            v326 += 2;
            LODWORD(v68) = *(_DWORD *)v68;
          }
          v68 = v68;
        }
        v297 = v68;
        v80 = 8;
        goto LABEL_365;
      case 'p':
        if ((v19 & 0x4000) != 0)
        {
          v50 = 0;
          v22 = 112;
          goto LABEL_231;
        }
        if (v314)
        {
          v53 = *((_QWORD *)v314 + 2 * (int)v17);
        }
        else
        {
          v86 = (unint64_t *)v326;
          v326 += 2;
          v53 = *v86;
        }
        LOWORD(v19) = v19 | 0x1000;
        v331 = 120;
        v80 = 16;
        v299 = (const char *)&__vfwprintf_xdigs_lower;
        goto LABEL_374;
      case 'q':
        v19 |= 0x20u;
        continue;
      case 's':
LABEL_138:
        if ((v19 & 0x10) != 0)
        {
          v54 = v308;
          if (v314)
          {
            v59 = (const char *)*((_QWORD *)v314 + 2 * (int)v17);
          }
          else
          {
            v73 = (const char **)v326;
            v326 += 2;
            v59 = *v73;
          }
          if (v59)
            v20 = v59;
          else
            v20 = (const char *)&dword_18A0E67DC;
        }
        else
        {
          free(v303);
          v54 = v308;
          if (v314)
          {
            v55 = (char *)*((_QWORD *)v314 + 2 * (int)v17);
            if (!v55)
              goto LABEL_197;
          }
          else
          {
            v69 = (char **)v326;
            v326 += 2;
            v55 = *v69;
            if (!*v69)
            {
LABEL_197:
              v303 = 0;
              v20 = (const char *)&dword_18A0E67DC;
              goto LABEL_223;
            }
          }
          v20 = (const char *)__mbsconv(v55, v308, a2);
          v303 = v20;
          if (!v20)
          {
            v303 = 0;
            *(_WORD *)(v302 + 16) |= 0x40u;
LABEL_721:
            v9 = v305;
            goto LABEL_722;
          }
        }
LABEL_223:
        v74 = wcslen((const __int32 *)v20);
        if (v74 >= 0x7FFFFFFF)
          goto LABEL_718;
        v75 = v54;
        v50 = 0;
        v17 = (v17 + 1);
        if (v75 >= v74 || v75 <= -1)
          v77 = v74;
        else
          v77 = v75;
        v304 = v77;
        v325 = 0;
LABEL_231:
        v51 = v19;
LABEL_393:
        v306 = v17;
        if ((v51 & 0x4000) == 0)
        {
          v115 = v304;
          if (v50 > v304)
            v115 = v50;
          v116 = v325;
          if (v325)
            ++v115;
          if (v331)
            v115 += 2;
          if (v18 <= v115)
            v117 = v115;
          else
            v117 = v18;
          v9 = v117 + v305;
          if (v117 + v305 >= 0x80000000)
          {
LABEL_718:
            *__error() = 84;
LABEL_719:
            v9 = -1;
            goto LABEL_722;
          }
          v118 = v18 - v115;
          if ((v51 & 0x84) == 0 && v118 >= 1)
          {
            v119 = v18 - v115;
            do
            {
              if (v119 >= 16)
                v120 = 16;
              else
                v120 = v119;
              v121 = v316[0];
              v122 = DWORD1(v316[0]);
              v123 = &v315[4 * SLODWORD(v316[0])];
              *((_QWORD *)v123 + 3) = &blanks_0;
              *((_QWORD *)v123 + 4) = v120;
              DWORD1(v316[0]) = v122 + v120;
              LODWORD(v316[0]) = v121 + 1;
              if (v121 >= 7 && __sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
                goto LABEL_721;
              v124 = __OFSUB__(v119, (_DWORD)v120);
              v119 -= v120;
            }
            while (!((v119 < 0) ^ v124 | (v119 == 0)));
            v116 = v325;
          }
          if (v116)
          {
            v125 = vadd_s32(*(int32x2_t *)&v316[0], (int32x2_t)0x100000001);
            v126 = v316[0];
            v127 = &v315[4 * SLODWORD(v316[0])];
            *((_QWORD *)v127 + 3) = &v325;
            *((_QWORD *)v127 + 4) = 1;
            *(int32x2_t *)&v316[0] = v125;
            if (v126 >= 7)
            {
              if (__sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
                goto LABEL_721;
            }
          }
          if (v331)
          {
            v330 = 48;
            v128 = vadd_s32(*(int32x2_t *)&v316[0], (int32x2_t)0x200000001);
            v129 = v316[0];
            v130 = &v315[4 * SLODWORD(v316[0])];
            *((_QWORD *)v130 + 3) = &v330;
            *((_QWORD *)v130 + 4) = 2;
            *(int32x2_t *)&v316[0] = v128;
            if (v129 >= 7)
            {
              if (__sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
                goto LABEL_721;
            }
          }
          if ((v51 & 0x84) == 0x80 && v118 >= 1)
          {
            v131 = v118;
            do
            {
              v132 = v131 >= 16 ? 16 : v131;
              v133 = v316[0];
              v134 = DWORD1(v316[0]);
              v135 = &v315[4 * SLODWORD(v316[0])];
              *((_QWORD *)v135 + 3) = &zeroes_0;
              *((_QWORD *)v135 + 4) = v132;
              DWORD1(v316[0]) = v134 + v132;
              LODWORD(v316[0]) = v133 + 1;
              if (v133 >= 7)
              {
                if (__sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
                  goto LABEL_721;
              }
              v124 = __OFSUB__(v131, (_DWORD)v132);
              v131 -= v132;
            }
            while (!((v131 < 0) ^ v124 | (v131 == 0)));
          }
          if ((v51 & 0x100) == 0)
          {
            v136 = v50 - v304;
            if (v136 >= 1)
            {
              do
              {
                v137 = v136 >= 16 ? 16 : v136;
                v138 = v316[0];
                v139 = DWORD1(v316[0]);
                v140 = &v315[4 * SLODWORD(v316[0])];
                *((_QWORD *)v140 + 3) = &zeroes_0;
                *((_QWORD *)v140 + 4) = v137;
                DWORD1(v316[0]) = v139 + v137;
                LODWORD(v316[0]) = v138 + 1;
                if (v138 >= 7)
                {
                  if (__sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
                    goto LABEL_721;
                }
                v124 = __OFSUB__(v136, (_DWORD)v137);
                v136 -= v137;
              }
              while (!((v136 < 0) ^ v124 | (v136 == 0)));
            }
            if (v324[1])
            {
              if ((grouping_print_0((uint64_t)v324, (uint64_t)v315, (uint64_t)v20, (unint64_t)&v336, a2) & 0x80000000) != 0)
                goto LABEL_721;
              goto LABEL_705;
            }
            v182 = v316[0];
            v183 = DWORD1(v316[0]);
            v184 = &v315[4 * SLODWORD(v316[0])];
            *((_QWORD *)v184 + 3) = v20;
            *((_QWORD *)v184 + 4) = (int)v304;
            DWORD1(v316[0]) = v183 + v304;
            LODWORD(v316[0]) = v182 + 1;
            if (v182 < 7)
              goto LABEL_705;
            goto LABEL_522;
          }
          if (v301)
          {
            if (v308 > 1 || (v51 & 1) != 0)
            {
              *(_DWORD *)v335.__mbstate8 = *(_DWORD *)v20;
              HIDWORD(v335._mbstateL) = HIDWORD(v323);
              v170 = v316[0];
              v171 = DWORD1(v316[0]);
              v172 = &v315[4 * SLODWORD(v316[0])];
              *((_QWORD *)v172 + 3) = &v335;
              *((_QWORD *)v172 + 4) = 2;
              v173 = v171 + 2;
              v174 = v170 + 1;
              DWORD1(v316[0]) = v173;
              LODWORD(v316[0]) = v170 + 1;
              if (v170 >= 7)
              {
                if (__sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
                  goto LABEL_721;
                v174 = v316[0];
                v173 = DWORD1(v316[0]);
              }
              v175 = &v315[4 * v174];
              *((_QWORD *)v175 + 3) = v20 + 4;
              *((_QWORD *)v175 + 4) = v300 - 1;
              DWORD1(v316[0]) = v173 + v300 - 1;
              LODWORD(v316[0]) = v174 + 1;
              if (v174 >= 7 && __sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
                goto LABEL_721;
              v176 = v308 - v300;
              if ((int)v308 - v300 >= 1)
              {
                do
                {
                  v177 = v176 >= 16 ? 16 : v176;
                  v178 = v316[0];
                  v179 = DWORD1(v316[0]);
                  v180 = &v315[4 * SLODWORD(v316[0])];
                  *((_QWORD *)v180 + 3) = &zeroes_0;
                  *((_QWORD *)v180 + 4) = v177;
                  DWORD1(v316[0]) = v179 + v177;
                  LODWORD(v316[0]) = v178 + 1;
                  if (v178 >= 7)
                  {
                    if (__sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
                      goto LABEL_721;
                  }
                  v124 = __OFSUB__(v176, (_DWORD)v177);
                  v176 -= v177;
                }
                while (!((v176 < 0) ^ v124 | (v176 == 0)));
              }
LABEL_518:
              v151 = v316[0];
              v150 = DWORD1(v316[0]);
            }
            else
            {
              v147 = v316[0];
              v148 = DWORD1(v316[0]);
              v149 = &v315[4 * SLODWORD(v316[0])];
              *((_QWORD *)v149 + 3) = v20;
              *((_QWORD *)v149 + 4) = 1;
              v150 = v148 + 1;
              v151 = v147 + 1;
              DWORD1(v316[0]) = v150;
              LODWORD(v316[0]) = v147 + 1;
              if (v147 >= 7)
              {
                if (__sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
                  goto LABEL_721;
                goto LABEL_518;
              }
            }
            v181 = &v315[4 * v151];
            *((_QWORD *)v181 + 3) = v332;
            *((_QWORD *)v181 + 4) = (int)v295;
            DWORD1(v316[0]) = v150 + v295;
            LODWORD(v316[0]) = v151 + 1;
            if (v151 < 7)
              goto LABEL_705;
LABEL_522:
            if (__sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
              goto LABEL_721;
            goto LABEL_705;
          }
          v167 = v321;
          if (v321 <= 0)
          {
            v202 = vadd_s32(*(int32x2_t *)&v316[0], (int32x2_t)0x100000001);
            v203 = v316[0];
            v204 = &v315[4 * SLODWORD(v316[0])];
            *((_QWORD *)v204 + 3) = &zeroes_0;
            *((_QWORD *)v204 + 4) = 1;
            *(int32x2_t *)&v316[0] = v202;
            if (v203 >= 7 && __sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
              goto LABEL_721;
            v205 = v308;
            if (v308 || (v51 & 1) != 0)
            {
              v206 = vadd_s32(*(int32x2_t *)&v316[0], (int32x2_t)0x100000001);
              v207 = v316[0];
              v208 = &v315[4 * SLODWORD(v316[0])];
              *((_QWORD *)v208 + 3) = (char *)&v323 + 4;
              *((_QWORD *)v208 + 4) = 1;
              *(int32x2_t *)&v316[0] = v206;
              if (v207 >= 7)
              {
                if (__sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
                  goto LABEL_721;
              }
            }
            v209 = v321;
            if (v321 < 0)
            {
              v210 = -v321;
              do
              {
                if (v210 >= 16)
                  v211 = 16;
                else
                  v211 = v210;
                v212 = v316[0];
                v213 = DWORD1(v316[0]);
                v214 = &v315[4 * SLODWORD(v316[0])];
                *((_QWORD *)v214 + 3) = &zeroes_0;
                *((_QWORD *)v214 + 4) = v211;
                DWORD1(v316[0]) = v213 + v211;
                LODWORD(v316[0]) = v212 + 1;
                if (v212 >= 7 && __sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
                  goto LABEL_721;
                v124 = __OFSUB__(v210, (_DWORD)v211);
                v210 -= v211;
              }
              while (!((v210 < 0) ^ v124 | (v210 == 0)));
              v209 = v321;
              v205 = v308;
            }
            LODWORD(v215) = v205 + v209;
          }
          else
          {
            v168 = (unint64_t)&v303[v300];
            if (v324[1])
            {
              v169 = grouping_print_0((uint64_t)v324, (uint64_t)v315, (uint64_t)v20, v168, a2);
              if (v169 < 0)
                goto LABEL_721;
            }
            else
            {
              v250 = (v168 - (unint64_t)v20) >> 2;
              if ((int)v250 >= v321)
                v251 = v321;
              else
                v251 = v250;
              if ((int)v251 < 1)
              {
                LODWORD(v251) = 0;
              }
              else
              {
                v252 = v316[0];
                v253 = DWORD1(v316[0]);
                v254 = &v315[4 * SLODWORD(v316[0])];
                *((_QWORD *)v254 + 3) = v20;
                *((_QWORD *)v254 + 4) = v251;
                DWORD1(v316[0]) = v253 + v251;
                LODWORD(v316[0]) = v252 + 1;
                if (v252 >= 7 && __sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
                  goto LABEL_721;
              }
              v272 = v167 - v251;
              if (v272 >= 1)
              {
                do
                {
                  v273 = v272 >= 16 ? 16 : v272;
                  v274 = v316[0];
                  v275 = DWORD1(v316[0]);
                  v276 = &v315[4 * SLODWORD(v316[0])];
                  *((_QWORD *)v276 + 3) = &zeroes_0;
                  *((_QWORD *)v276 + 4) = v273;
                  DWORD1(v316[0]) = v275 + v273;
                  LODWORD(v316[0]) = v274 + 1;
                  if (v274 >= 7)
                  {
                    if (__sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
                      goto LABEL_721;
                  }
                  v124 = __OFSUB__(v272, (_DWORD)v273);
                  v272 -= v273;
                }
                while (!((v272 < 0) ^ v124 | (v272 == 0)));
              }
              v169 = v321;
            }
            v20 += 4 * v169;
            LODWORD(v215) = v308;
            if (v308 || (v51 & 1) != 0)
            {
              v277 = vadd_s32(*(int32x2_t *)&v316[0], (int32x2_t)0x100000001);
              v278 = v316[0];
              v279 = &v315[4 * SLODWORD(v316[0])];
              *((_QWORD *)v279 + 3) = (char *)&v323 + 4;
              *((_QWORD *)v279 + 4) = 1;
              *(int32x2_t *)&v316[0] = v277;
              if (v278 >= 7 && __sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
                goto LABEL_721;
            }
            else
            {
              LODWORD(v215) = 0;
            }
          }
          v280 = (unint64_t)((char *)&v303[v300] - v20) >> 2;
          v281 = v215;
          if ((int)v280 >= (int)v215)
            v215 = v215;
          else
            v215 = v280;
          if ((int)v215 < 1)
          {
            LODWORD(v215) = 0;
          }
          else
          {
            v282 = v316[0];
            v283 = DWORD1(v316[0]);
            v284 = &v315[4 * SLODWORD(v316[0])];
            *((_QWORD *)v284 + 3) = v20;
            *((_QWORD *)v284 + 4) = v215;
            DWORD1(v316[0]) = v283 + v215;
            LODWORD(v316[0]) = v282 + 1;
            if (v282 >= 7 && __sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
              goto LABEL_721;
          }
          v285 = v281 - v215;
          if (v285 >= 1)
          {
            do
            {
              v286 = v285 >= 16 ? 16 : v285;
              v287 = v316[0];
              v288 = DWORD1(v316[0]);
              v289 = &v315[4 * SLODWORD(v316[0])];
              *((_QWORD *)v289 + 3) = &zeroes_0;
              *((_QWORD *)v289 + 4) = v286;
              DWORD1(v316[0]) = v288 + v286;
              LODWORD(v316[0]) = v287 + 1;
              if (v287 >= 7)
              {
                if (__sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
                  goto LABEL_721;
              }
              v124 = __OFSUB__(v285, (_DWORD)v286);
              v285 -= v286;
            }
            while (!((v285 < 0) ^ v124 | (v285 == 0)));
          }
LABEL_705:
          if ((v51 & 4) != 0 && v118 >= 1)
          {
            do
            {
              v290 = v118 >= 16 ? 16 : v118;
              v291 = v316[0];
              v292 = DWORD1(v316[0]);
              v293 = &v315[4 * SLODWORD(v316[0])];
              *((_QWORD *)v293 + 3) = &blanks_0;
              *((_QWORD *)v293 + 4) = v290;
              DWORD1(v316[0]) = v292 + v290;
              LODWORD(v316[0]) = v291 + 1;
              if (v291 >= 7)
              {
                if (__sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
                  goto LABEL_721;
              }
              v124 = __OFSUB__(v118, (_DWORD)v290);
              v118 -= v290;
            }
            while (!((v118 < 0) ^ v124 | (v118 == 0)));
          }
          if (__sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
            goto LABEL_722;
          goto LABEL_12;
        }
        v312 = 0;
        if (v314)
        {
          v141 = *((_OWORD *)v314 + (int)v17);
        }
        else
        {
          v142 = (_OWORD *)(((unint64_t)v326 + 15) & 0xFFFFFFFFFFFFFFF0);
          v326 = v142 + 1;
          v141 = *v142;
        }
        v319 = v141;
        v143 = (char *)a3 - (char *)i - 4;
        v144 = v143 >> 2;
        if ((unint64_t)((v143 >> 2) + 2) >= 0x22)
        {
          v309 = v141;
          v146 = (char *)malloc_type_malloc(v144 + 3, 0xF22491AFuLL);
          *(_QWORD *)&v141 = v309;
          v145 = v146;
        }
        else
        {
          v145 = v327;
        }
        if (v318 == 88)
        {
          if (v22 == 99)
            v318 = 0;
          else
            v318 = 32;
        }
        if (v143 < 1)
        {
          v155 = 0;
          v154 = 0;
          v153 = 0;
          if ((v51 & 0x40) != 0)
            goto LABEL_480;
LABEL_475:
          if ((v51 & 0x10) == 0)
          {
            v159 = v22 - 65;
            if (v22 - 65 > 0x2F)
              goto LABEL_525;
            if (((1 << v159) & 0x7100000051) != 0)
            {
              v160 = 6;
LABEL_486:
              v161 = 4;
              goto LABEL_490;
            }
            if (((1 << v159) & 0x800400000000) == 0)
            {
LABEL_525:
              *(_WORD *)&v145[v155] = 26728;
              v155 += 2;
            }
            if (v22 == 112)
              v160 = 3;
            else
              v160 = 0;
            v161 = 16;
            goto LABEL_490;
          }
          if (v22 == 112)
            v160 = 5;
          else
            v160 = 2;
          goto LABEL_486;
        }
        v152 = 0;
        v153 = 0;
        v154 = 0;
        v155 = 0;
        if (v144 <= 1)
          v156 = 1;
        else
          v156 = v143 >> 2;
        v157 = 4 * v156;
        do
        {
          v158 = i[v152 / 4];
          if (v158 - 42 <= 0x3E)
          {
            if (((1 << (v158 - 42)) & 0x4020000000030004) != 0)
              goto LABEL_473;
            if (v158 == 42)
            {
              if (i[v152 / 4 - 1] == 46)
                v153 = 1;
              else
                v154 = 1;
LABEL_472:
              v145[v155++] = v158;
              goto LABEL_473;
            }
          }
          if (v158 != 108 && v158 != 118)
            goto LABEL_472;
LABEL_473:
          v152 += 4;
        }
        while (v157 != v152);
        if ((v51 & 0x40) == 0)
          goto LABEL_475;
LABEL_480:
        if (v22 != 99)
        {
          if (v22 == 112)
          {
            v160 = 4;
            goto LABEL_489;
          }
          v145[v155++] = 104;
        }
        v160 = 1;
LABEL_489:
        v161 = 8;
LABEL_490:
        v310 = v161;
        v162 = &v145[v155];
        *v162 = v22;
        v162[1] = 0;
        if (!v154)
        {
          if (v153)
          {
            switch(v160)
            {
              case 0:
                v164 = v141;
                goto LABEL_578;
              case 1:
                v164 = (unsigned __int16)v141;
                goto LABEL_578;
              case 2:
                v217 = asprintf_l(&v312, a2, v145, v308, (_QWORD)v141);
                goto LABEL_585;
              case 3:
                v164 = v141;
                goto LABEL_578;
              case 4:
                v164 = (unsigned __int16)v141;
                goto LABEL_578;
              case 5:
                v164 = v141;
LABEL_578:
                v217 = asprintf_l(&v312, a2, v145, v308, v164);
                goto LABEL_585;
              case 6:
                v217 = asprintf_l(&v312, a2, v145, v308, *(float *)&v141);
LABEL_585:
                v216 = v217;
                break;
              default:
                v216 = 0;
                break;
            }
            v9 = v305 + v216;
            v218 = v312;
            v219 = v316[0];
            v220 = DWORD1(v316[0]);
            v221 = &v315[4 * SLODWORD(v316[0])];
            *((_QWORD *)v221 + 3) = v312;
            *((_QWORD *)v221 + 4) = v216;
            DWORD1(v316[0]) = v220 + v216;
            LODWORD(v316[0]) = v219 + 1;
            if (v219 >= 7)
            {
              if (__sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
                goto LABEL_722;
              v218 = v312;
            }
            free(v218);
            v222 = (float *)&v319 + 1;
            v223 = 1;
            while (1)
            {
              if (v318)
              {
                v224 = vadd_s32(*(int32x2_t *)&v316[0], (int32x2_t)0x100000001);
                v225 = v316[0];
                v226 = &v315[4 * SLODWORD(v316[0])];
                *((_QWORD *)v226 + 3) = &v318;
                *((_QWORD *)v226 + 4) = 1;
                *(int32x2_t *)&v316[0] = v224;
                if (v225 >= 7)
                {
                  if (__sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
                    goto LABEL_722;
                }
              }
              switch(v160)
              {
                case 0:
                case 3:
                  v227 = *((unsigned __int8 *)&v319 + v223);
                  goto LABEL_597;
                case 1:
                case 4:
                  v227 = *((unsigned __int16 *)&v319 + v223);
                  goto LABEL_597;
                case 2:
                case 5:
                  v227 = *(unsigned int *)v222;
LABEL_597:
                  v228 = asprintf_l(&v312, a2, v145, v308, v227);
                  goto LABEL_598;
                case 6:
                  v228 = asprintf_l(&v312, a2, v145, v308, *v222);
LABEL_598:
                  v216 = v228;
                  break;
                default:
                  break;
              }
              v9 += v216;
              v229 = v312;
              v230 = v316[0];
              v231 = DWORD1(v316[0]);
              v232 = &v315[4 * SLODWORD(v316[0])];
              *((_QWORD *)v232 + 3) = v312;
              *((_QWORD *)v232 + 4) = v216;
              DWORD1(v316[0]) = v231 + v216;
              LODWORD(v316[0]) = v230 + 1;
              if (v230 >= 7)
              {
                if (__sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
                  goto LABEL_722;
                v229 = v312;
              }
              free(v229);
              ++v223;
              ++v222;
              if (v310 == v223)
                goto LABEL_668;
            }
          }
          switch(v160)
          {
            case 0:
              v166 = v141;
              goto LABEL_647;
            case 1:
              v166 = (unsigned __int16)v141;
              goto LABEL_647;
            case 2:
              v256 = asprintf_l(&v312, a2, v145, (_QWORD)v141);
              goto LABEL_648;
            case 3:
              v166 = v141;
              goto LABEL_647;
            case 4:
              v166 = (unsigned __int16)v141;
              goto LABEL_647;
            case 5:
              v166 = v141;
LABEL_647:
              v256 = asprintf_l(&v312, a2, v145, v166);
              goto LABEL_648;
            case 6:
              v256 = asprintf_l(&v312, a2, v145, *(float *)&v141);
LABEL_648:
              v255 = v256;
              break;
            default:
              v255 = 0;
              break;
          }
          v9 = v305 + v255;
          v257 = v312;
          v258 = v316[0];
          v259 = DWORD1(v316[0]);
          v260 = &v315[4 * SLODWORD(v316[0])];
          *((_QWORD *)v260 + 3) = v312;
          *((_QWORD *)v260 + 4) = v255;
          DWORD1(v316[0]) = v259 + v255;
          LODWORD(v316[0]) = v258 + 1;
          if (v258 >= 7)
          {
            if (__sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
              goto LABEL_722;
            v257 = v312;
          }
          free(v257);
          v261 = (float *)&v319 + 1;
          for (j = 1; j != v310; ++j)
          {
            if (v318)
            {
              v263 = vadd_s32(*(int32x2_t *)&v316[0], (int32x2_t)0x100000001);
              v264 = v316[0];
              v265 = &v315[4 * SLODWORD(v316[0])];
              *((_QWORD *)v265 + 3) = &v318;
              *((_QWORD *)v265 + 4) = 1;
              *(int32x2_t *)&v316[0] = v263;
              if (v264 >= 7)
              {
                if (__sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
                  goto LABEL_722;
              }
            }
            switch(v160)
            {
              case 0:
              case 3:
                v266 = *((unsigned __int8 *)&v319 + j);
                goto LABEL_660;
              case 1:
              case 4:
                v266 = *((unsigned __int16 *)&v319 + j);
                goto LABEL_660;
              case 2:
              case 5:
                v266 = *(unsigned int *)v261;
LABEL_660:
                v267 = asprintf_l(&v312, a2, v145, v266);
                goto LABEL_661;
              case 6:
                v267 = asprintf_l(&v312, a2, v145, *v261);
LABEL_661:
                v255 = v267;
                break;
              default:
                break;
            }
            v9 += v255;
            v268 = v312;
            v269 = v316[0];
            v270 = DWORD1(v316[0]);
            v271 = &v315[4 * SLODWORD(v316[0])];
            *((_QWORD *)v271 + 3) = v312;
            *((_QWORD *)v271 + 4) = v255;
            DWORD1(v316[0]) = v270 + v255;
            LODWORD(v316[0]) = v269 + 1;
            if (v269 >= 7)
            {
              if (__sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
                goto LABEL_722;
              v268 = v312;
            }
            free(v268);
            ++v261;
          }
LABEL_668:
          if (v145 != v327)
            free(v145);
          v306 = (v306 + 1);
          goto LABEL_12;
        }
        if (v153)
        {
          switch(v160)
          {
            case 0:
              v163 = v141;
              goto LABEL_532;
            case 1:
              v163 = (unsigned __int16)v141;
              goto LABEL_532;
            case 2:
              v186 = asprintf_l(&v312, a2, v145, v18, v308, (_QWORD)v141);
              goto LABEL_539;
            case 3:
              v163 = v141;
              goto LABEL_532;
            case 4:
              v163 = (unsigned __int16)v141;
              goto LABEL_532;
            case 5:
              v163 = v141;
LABEL_532:
              v186 = asprintf_l(&v312, a2, v145, v18, v308, v163);
              goto LABEL_539;
            case 6:
              v186 = asprintf_l(&v312, a2, v145, v18, v308, *(float *)&v141);
LABEL_539:
              v185 = v186;
              break;
            default:
              v185 = 0;
              break;
          }
          v9 = v305 + v185;
          v187 = v312;
          v188 = v316[0];
          v189 = DWORD1(v316[0]);
          v190 = &v315[4 * SLODWORD(v316[0])];
          *((_QWORD *)v190 + 3) = v312;
          *((_QWORD *)v190 + 4) = v185;
          DWORD1(v316[0]) = v189 + v185;
          LODWORD(v316[0]) = v188 + 1;
          if (v188 < 7)
            goto LABEL_543;
          if (!__sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
          {
            v187 = v312;
LABEL_543:
            free(v187);
            v191 = (float *)&v319 + 1;
            v192 = 1;
            while (1)
            {
              if (v318)
              {
                v193 = vadd_s32(*(int32x2_t *)&v316[0], (int32x2_t)0x100000001);
                v194 = v316[0];
                v195 = &v315[4 * SLODWORD(v316[0])];
                *((_QWORD *)v195 + 3) = &v318;
                *((_QWORD *)v195 + 4) = 1;
                *(int32x2_t *)&v316[0] = v193;
                if (v194 >= 7)
                {
                  if (__sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
                    break;
                }
              }
              switch(v160)
              {
                case 0:
                case 3:
                  v196 = *((unsigned __int8 *)&v319 + v192);
                  goto LABEL_551;
                case 1:
                case 4:
                  v196 = *((unsigned __int16 *)&v319 + v192);
                  goto LABEL_551;
                case 2:
                case 5:
                  v196 = *(unsigned int *)v191;
LABEL_551:
                  v197 = asprintf_l(&v312, a2, v145, v18, v308, v196);
                  goto LABEL_552;
                case 6:
                  v197 = asprintf_l(&v312, a2, v145, v18, v308, *v191);
LABEL_552:
                  v185 = v197;
                  break;
                default:
                  break;
              }
              v9 += v185;
              v198 = v312;
              v199 = v316[0];
              v200 = DWORD1(v316[0]);
              v201 = &v315[4 * SLODWORD(v316[0])];
              *((_QWORD *)v201 + 3) = v312;
              *((_QWORD *)v201 + 4) = v185;
              DWORD1(v316[0]) = v200 + v185;
              LODWORD(v316[0]) = v199 + 1;
              if (v199 >= 7)
              {
                if (__sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
                  break;
                v198 = v312;
              }
              free(v198);
              ++v192;
              ++v191;
              if (v310 == v192)
                goto LABEL_668;
            }
          }
        }
        else
        {
          switch(v160)
          {
            case 0:
              v165 = v141;
              goto LABEL_607;
            case 1:
              v165 = (unsigned __int16)v141;
              goto LABEL_607;
            case 2:
              v234 = asprintf_l(&v312, a2, v145, v18, (_QWORD)v141);
              goto LABEL_614;
            case 3:
              v165 = v141;
              goto LABEL_607;
            case 4:
              v165 = (unsigned __int16)v141;
              goto LABEL_607;
            case 5:
              v165 = v141;
LABEL_607:
              v234 = asprintf_l(&v312, a2, v145, v18, v165);
              goto LABEL_614;
            case 6:
              v234 = asprintf_l(&v312, a2, v145, v18, *(float *)&v141);
LABEL_614:
              v233 = v234;
              break;
            default:
              v233 = 0;
              break;
          }
          v9 = v305 + v233;
          v235 = v312;
          v236 = v316[0];
          v237 = DWORD1(v316[0]);
          v238 = &v315[4 * SLODWORD(v316[0])];
          *((_QWORD *)v238 + 3) = v312;
          *((_QWORD *)v238 + 4) = v233;
          DWORD1(v316[0]) = v237 + v233;
          LODWORD(v316[0]) = v236 + 1;
          if (v236 >= 7)
          {
            if (__sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
              goto LABEL_722;
            v235 = v312;
          }
          free(v235);
          v239 = (float *)&v319 + 1;
          v240 = 1;
          while (1)
          {
            if (v318)
            {
              v241 = vadd_s32(*(int32x2_t *)&v316[0], (int32x2_t)0x100000001);
              v242 = v316[0];
              v243 = &v315[4 * SLODWORD(v316[0])];
              *((_QWORD *)v243 + 3) = &v318;
              *((_QWORD *)v243 + 4) = 1;
              *(int32x2_t *)&v316[0] = v241;
              if (v242 >= 7)
              {
                if (__sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
                  break;
              }
            }
            switch(v160)
            {
              case 0:
              case 3:
                v244 = *((unsigned __int8 *)&v319 + v240);
                goto LABEL_626;
              case 1:
              case 4:
                v244 = *((unsigned __int16 *)&v319 + v240);
                goto LABEL_626;
              case 2:
              case 5:
                v244 = *(unsigned int *)v239;
LABEL_626:
                v245 = asprintf_l(&v312, a2, v145, v18, v244);
                goto LABEL_627;
              case 6:
                v245 = asprintf_l(&v312, a2, v145, v18, *v239);
LABEL_627:
                v233 = v245;
                break;
              default:
                break;
            }
            v9 += v233;
            v246 = v312;
            v247 = v316[0];
            v248 = DWORD1(v316[0]);
            v249 = &v315[4 * SLODWORD(v316[0])];
            *((_QWORD *)v249 + 3) = v312;
            *((_QWORD *)v249 + 4) = v233;
            DWORD1(v316[0]) = v248 + v233;
            LODWORD(v316[0]) = v247 + 1;
            if (v247 >= 7)
            {
              if (__sprint(*(FILE **)v315, a2, (uint64_t)&v315[2]))
                break;
              v246 = v312;
            }
            free(v246);
            ++v240;
            ++v239;
            if (v310 == v240)
              goto LABEL_668;
          }
        }
LABEL_722:
        free(v303);
        if ((*(_WORD *)(v302 + 16) & 0x40) != 0)
          v294 = -1;
        else
          v294 = v9;
        if (v314 && v314 != v329)
          free(v314);
        if (v294 > 0x7FFFFFFE)
          return 0xFFFFFFFFLL;
        else
          return v294;
      case 't':
        v19 |= 0x800u;
        continue;
      case 'u':
LABEL_144:
        if ((v19 & 0x4000) != 0)
          goto LABEL_164;
        if ((v19 & 0x1C20) != 0)
        {
          if (v314)
          {
            v53 = *((_QWORD *)v314 + 2 * (int)v17);
          }
          else
          {
            v81 = (unint64_t *)v326;
            v326 += 2;
            v53 = *v81;
          }
          v80 = 10;
        }
        else
        {
          if ((v19 & 0x10) != 0)
          {
            if (v314)
            {
              v70 = *((_QWORD *)v314 + 2 * (int)v17);
            }
            else
            {
              v112 = (unint64_t *)v326;
              v326 += 2;
              v70 = *v112;
            }
          }
          else if ((v19 & 0x40) != 0)
          {
            if (v314)
            {
              LOWORD(v70) = *((_WORD *)v314 + 8 * (int)v17);
            }
            else
            {
              v70 = (unint64_t)v326;
              v326 += 2;
              LODWORD(v70) = *(_DWORD *)v70;
            }
            v70 = (unsigned __int16)v70;
          }
          else if ((v19 & 0x2000) != 0)
          {
            if (v314)
            {
              LOBYTE(v70) = *((_BYTE *)v314 + 16 * (int)v17);
            }
            else
            {
              v70 = (unint64_t)v326;
              v326 += 2;
              LODWORD(v70) = *(_DWORD *)v70;
            }
            v70 = v70;
          }
          else
          {
            if (v314)
            {
              LODWORD(v70) = *((_DWORD *)v314 + 4 * (int)v17);
            }
            else
            {
              v70 = (unint64_t)v326;
              v326 += 2;
              LODWORD(v70) = *(_DWORD *)v70;
            }
            v70 = v70;
          }
          v297 = v70;
          v80 = 10;
LABEL_365:
          v53 = v298;
        }
        goto LABEL_374;
      case 'v':
        v19 |= 0x4000u;
        continue;
      case 'x':
        v56 = (const char *)&__vfwprintf_xdigs_lower;
LABEL_160:
        v299 = v56;
        if ((v19 & 0x4000) != 0)
        {
LABEL_164:
          v50 = 0;
          goto LABEL_231;
        }
        if ((v19 & 0x1C20) != 0)
        {
          if (v314)
          {
            v53 = *((_QWORD *)v314 + 2 * (int)v17);
          }
          else
          {
            v82 = (unint64_t *)v326;
            v326 += 2;
            v53 = *v82;
          }
        }
        else
        {
          if ((v19 & 0x10) != 0)
          {
            if (v314)
            {
              v72 = *((_QWORD *)v314 + 2 * (int)v17);
            }
            else
            {
              v113 = (unint64_t *)v326;
              v326 += 2;
              v72 = *v113;
            }
          }
          else if ((v19 & 0x40) != 0)
          {
            if (v314)
            {
              LOWORD(v72) = *((_WORD *)v314 + 8 * (int)v17);
            }
            else
            {
              v72 = (unint64_t)v326;
              v326 += 2;
              LODWORD(v72) = *(_DWORD *)v72;
            }
            v72 = (unsigned __int16)v72;
          }
          else if ((v19 & 0x2000) != 0)
          {
            if (v314)
            {
              LOBYTE(v72) = *((_BYTE *)v314 + 16 * (int)v17);
            }
            else
            {
              v72 = (unint64_t)v326;
              v326 += 2;
              LODWORD(v72) = *(_DWORD *)v72;
            }
            v72 = v72;
          }
          else
          {
            if (v314)
            {
              LODWORD(v72) = *((_DWORD *)v314 + 4 * (int)v17);
            }
            else
            {
              v72 = (unint64_t)v326;
              v326 += 2;
              LODWORD(v72) = *(_DWORD *)v72;
            }
            v72 = v72;
          }
          v297 = v72;
          v53 = v298;
        }
        if ((v19 & 1) == 0)
          goto LABEL_373;
        if ((v19 & 0x1C20) != 0)
        {
          if (!v53)
            goto LABEL_373;
LABEL_372:
          v331 = v22;
          goto LABEL_373;
        }
        if (v297)
          goto LABEL_372;
LABEL_373:
        LOWORD(v19) = v19 & 0xFDFF;
        v80 = 16;
LABEL_374:
        v325 = 0;
        goto LABEL_375;
      case 'z':
        v19 |= 0x400u;
        continue;
      default:
        if (!v22)
          goto LABEL_720;
        v50 = 0;
        *(_DWORD *)v335.__mbstate8 = v22;
        v325 = 0;
        v20 = (const char *)&v335;
        v304 = 1;
        goto LABEL_231;
    }
  }
}

int vfwprintf(FILE *a1, const __int32 *a2, __darwin_va_list a3)
{
  uint64_t v5;
  _xlocale *v6;
  _xlocale *v7;

  v5 = __locale_key;
  v6 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6)
    v7 = v6;
  else
    v7 = (_xlocale *)&__global_locale;
  return vfwprintf_l(a1, v7, a2, a3);
}

void *__mbsconv(char *a1, unsigned int a2, _xlocale *a3)
{
  const char *v4;
  size_t v5;
  size_t v6;
  uint64_t v7;
  const char *v8;
  size_t v9;
  void *v10;
  void *v11;
  __int32 *v12;
  size_t v13;
  mbstate_t v15;

  memset(&v15, 0, sizeof(v15));
  if (!a1)
    return 0;
  v4 = a1;
  if ((a2 & 0x80000000) != 0)
  {
    v6 = _platform_strlen();
    goto LABEL_10;
  }
  v5 = *(int *)(*((_QWORD *)a3 + 166) + 64);
  memset(&v15, 0, sizeof(v15));
  v6 = 0;
  if (a2)
  {
    v7 = a2;
    v8 = a1;
    do
    {
      v9 = mbrlen_l(v8, v5, &v15, a3);
      if (v9 + 2 < 3)
        break;
      v8 += v9;
      v6 += v9;
      --v7;
    }
    while (v7);
    if (v9 > 0xFFFFFFFFFFFFFFFDLL)
      return 0;
  }
LABEL_10:
  v10 = malloc_type_malloc(4 * v6 + 4, 0x100004052888210uLL);
  v11 = v10;
  if (v10)
  {
    v12 = (__int32 *)v10;
    memset(&v15, 0, sizeof(v15));
    if (!v6)
      goto LABEL_19;
    v12 = (__int32 *)v10;
    while (1)
    {
      v13 = mbrtowc_l(v12, v4, v6, &v15, a3);
      if (v13 + 2 < 3)
        break;
      ++v12;
      v4 += v13;
      v6 -= v13;
      if (!v6)
        goto LABEL_19;
    }
    if (v13 < 0xFFFFFFFFFFFFFFFELL)
    {
LABEL_19:
      *v12 = 0;
      return v11;
    }
    free(v11);
    return 0;
  }
  return v11;
}

uint64_t grouping_init_0(uint64_t a1, int a2, locale_t a3)
{
  lconv *v6;
  lconv *v7;
  int v8;
  uint64_t result;
  __int32 v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  int v14;
  __int32 v15;
  mbstate_t v16;

  v6 = localeconv_l(a3);
  *(_QWORD *)(a1 + 8) = __fix_nogrouping(v6->grouping);
  v15 = 0;
  memset(&v16, 0, sizeof(v16));
  v7 = localeconv_l(a3);
  v8 = mbrtowc_l(&v15, v7->thousands_sep, *(int *)(*((_QWORD *)a3 + 166) + 64), &v16, a3);
  result = 0;
  if ((~v8 & 0xFFFFFFFE) != 0)
    v10 = v15;
  else
    v10 = 0;
  *(_DWORD *)a1 = v10;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 16) = a2;
  v11 = *(unsigned __int8 **)(a1 + 8);
  v12 = *v11;
  if (v12 != 127)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      if (a2 <= (char)v12)
        break;
      a2 -= (char)v12;
      *(_DWORD *)(a1 + 16) = a2;
      if (v11[1])
      {
        *(_DWORD *)(a1 + 20) = ++v14;
        *(_QWORD *)(a1 + 8) = ++v11;
      }
      else
      {
        *(_DWORD *)(a1 + 24) = ++v13;
      }
      v12 = *v11;
    }
    while (v12 != 127);
    return (v13 + v14);
  }
  return result;
}

unint64_t grouping_print_0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, locale_t a5)
{
  int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t i;
  int v24;
  int v25;
  int32x2_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;

  v10 = *(_DWORD *)(a1 + 16);
  v11 = (a4 - a3) >> 2;
  if ((int)v11 >= v10)
    v12 = v10;
  else
    v12 = v11;
  if ((int)v12 < 1)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    v13 = *(_DWORD *)(a2 + 20);
    v14 = *(int *)(a2 + 16);
    v15 = a2 + 16 * v14;
    *(_QWORD *)(v15 + 24) = a3;
    *(_QWORD *)(v15 + 32) = v12;
    *(_DWORD *)(a2 + 16) = v14 + 1;
    *(_DWORD *)(a2 + 20) = v13 + v12;
    if ((int)v14 >= 7 && __sprint(*(FILE **)a2, a5, a2 + 8))
      return 0xFFFFFFFFLL;
  }
  v17 = v10 - v12;
  if (v10 - (int)v12 < 1)
  {
LABEL_17:
    for (i = a3 + 4 * *(int *)(a1 + 16); ; i += 4 * **(char **)(a1 + 8))
    {
      v24 = *(_DWORD *)(a1 + 20);
      v25 = *(_DWORD *)(a1 + 24);
      if (v24 <= 0)
        break;
      if (v25 >= 1)
        goto LABEL_22;
      --*(_QWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 20) = v24 - 1;
LABEL_23:
      v26 = *(int32x2_t *)(a2 + 16);
      v27 = a2 + 16 * v26.i32[0];
      *(_QWORD *)(v27 + 24) = a1;
      *(_QWORD *)(v27 + 32) = 1;
      *(int32x2_t *)(a2 + 16) = vadd_s32(v26, (int32x2_t)0x100000001);
      if (v26.i32[0] >= 7 && __sprint(*(FILE **)a2, a5, a2 + 8))
        return 0xFFFFFFFFLL;
      v28 = **(char **)(a1 + 8);
      v29 = (a4 - i) >> 2;
      if ((int)v29 >= v28)
        v30 = v28;
      else
        v30 = v29;
      if ((int)v30 < 1)
      {
        LODWORD(v30) = 0;
      }
      else
      {
        v31 = *(_DWORD *)(a2 + 20);
        v32 = *(int *)(a2 + 16);
        v33 = a2 + 16 * v32;
        *(_QWORD *)(v33 + 24) = i;
        *(_QWORD *)(v33 + 32) = v30;
        *(_DWORD *)(a2 + 16) = v32 + 1;
        *(_DWORD *)(a2 + 20) = v31 + v30;
        if ((int)v32 >= 7 && __sprint(*(FILE **)a2, a5, a2 + 8))
          return 0xFFFFFFFFLL;
      }
      v34 = v28 - v30;
      if (v34 >= 1)
      {
        do
        {
          v35 = v34 >= 16 ? 16 : v34;
          v36 = *(_DWORD *)(a2 + 20);
          v37 = *(int *)(a2 + 16);
          v38 = a2 + 16 * v37;
          *(_QWORD *)(v38 + 24) = &zeroes_0;
          *(_QWORD *)(v38 + 32) = v35;
          *(_DWORD *)(a2 + 16) = v37 + 1;
          *(_DWORD *)(a2 + 20) = v36 + v35;
          if ((int)v37 >= 7)
          {
            if (__sprint(*(FILE **)a2, a5, a2 + 8))
              return 0xFFFFFFFFLL;
          }
          v22 = __OFSUB__(v34, (_DWORD)v35);
          v34 -= v35;
        }
        while (!((v34 < 0) ^ v22 | (v34 == 0)));
      }
    }
    if (v25 <= 0)
    {
      if (i <= a4)
        v39 = i;
      else
        v39 = a4;
      return (v39 - a3) >> 2;
    }
LABEL_22:
    *(_DWORD *)(a1 + 24) = v25 - 1;
    goto LABEL_23;
  }
  while (1)
  {
    v18 = v17 >= 16 ? 16 : v17;
    v19 = *(_DWORD *)(a2 + 20);
    v20 = *(int *)(a2 + 16);
    v21 = a2 + 16 * v20;
    *(_QWORD *)(v21 + 24) = &zeroes_0;
    *(_QWORD *)(v21 + 32) = v18;
    *(_DWORD *)(a2 + 16) = v20 + 1;
    *(_DWORD *)(a2 + 20) = v19 + v18;
    if ((int)v20 >= 7)
    {
      if (__sprint(*(FILE **)a2, a5, a2 + 8))
        return 0xFFFFFFFFLL;
    }
    v22 = __OFSUB__(v17, (_DWORD)v18);
    v17 -= v18;
    if ((v17 < 0) ^ v22 | (v17 == 0))
      goto LABEL_17;
  }
}

uint64_t __sprint(FILE *a1, locale_t a2, uint64_t a3)
{
  int v4;
  unsigned int **v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  size_t v13;
  uint64_t result;
  _QWORD v15[2];
  _QWORD *v16;
  int v17;
  int v18;
  char v19[6];
  mbstate_t v20;

  v4 = *(_DWORD *)(a3 + 12);
  if (!v4)
  {
LABEL_13:
    result = 0;
    *(_DWORD *)(a3 + 8) = 0;
    return result;
  }
  v7 = *(unsigned int ***)a3;
  while (1)
  {
    v8 = v7[1];
    if ((int)v8 >= 1)
      break;
LABEL_12:
    v7 += 2;
    v4 -= (int)v8;
    *(_DWORD *)(a3 + 12) = v4;
    if (!v4)
      goto LABEL_13;
  }
  v9 = *v7;
  v10 = v7[1];
  while (1)
  {
    v12 = *v9++;
    v11 = v12;
    if ((a1->_flags & 0x200) == 0)
    {
      LODWORD(v11) = __fputwc(v11, a1, (uint64_t)a2);
      goto LABEL_9;
    }
    memset(&v20, 0, sizeof(v20));
    v13 = wcrtomb_l(v19, v11, &v20, a2);
    if (v13 == -1)
      break;
    v15[1] = v13;
    v16 = v15;
    v17 = 1;
    v18 = v13;
    v15[0] = v19;
    if (__sfvwrite((uint64_t)a1, (uint64_t)&v16) == -1)
      return 0xFFFFFFFFLL;
LABEL_9:
    if ((_DWORD)v11 == -1)
      return 0xFFFFFFFFLL;
    if (!--v10)
    {
      v4 = *(_DWORD *)(a3 + 12);
      goto LABEL_12;
    }
  }
  a1->_flags |= 0x40u;
  return 0xFFFFFFFFLL;
}

int vfwscanf(FILE *a1, const __int32 *a2, __darwin_va_list a3)
{
  __sFILEX *extra;
  uint64_t v7;
  _xlocale *v8;
  _xlocale *v9;
  int v10;

  flockfile(a1);
  extra = a1->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0)
    *((_BYTE *)extra + 72) = *((_BYTE *)extra + 72) & 0xF8 | 1;
  v7 = __locale_key;
  v8 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v7);
  if (v8)
    v9 = v8;
  else
    v9 = (_xlocale *)&__global_locale;
  v10 = __vfwscanf((uint64_t)a1, v9, (unsigned int *)a2, (__int32 **)a3);
  funlockfile(a1);
  return v10;
}

uint64_t __vfwscanf(uint64_t a1, locale_t a2, unsigned int *a3, __int32 **a4)
{
  unsigned int v4;
  unsigned int *v5;
  uint64_t v8;
  uint64_t v9;
  locale_t v10;
  unsigned int *v11;
  _RuneLocale *v12;
  __uint32_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  __int32 **v22;
  __int32 *v23;
  uint64_t v24;
  uint64_t v25;
  _RuneLocale *v26;
  __uint32_t v27;
  uint64_t v28;
  uint64_t v29;
  _RuneLocale *v30;
  __uint32_t v31;
  int v32;
  int v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int *i;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _RuneLocale *v40;
  unint64_t v41;
  unsigned int v42;
  char **v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  size_t v47;
  size_t v48;
  size_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int32 *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _RuneLocale *v59;
  __uint32_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int32 *v65;
  int v66;
  BOOL v67;
  int v68;
  lconv *v69;
  uint64_t v70;
  __int32 *v71;
  uint64_t v72;
  BOOL v73;
  __int32 *v74;
  __int32 **v75;
  uint64_t v76;
  __int32 v77;
  __int32 *v78;
  char **v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  __int32 *v83;
  size_t v84;
  size_t v85;
  size_t v86;
  uint64_t v87;
  char **v88;
  uint64_t v89;
  uint64_t v90;
  _RuneLocale *v91;
  __uint32_t v92;
  size_t v93;
  size_t v94;
  size_t v95;
  uint64_t v96;
  int v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __uint32_t *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __uint32_t v107;
  uint64_t v108;
  uint64_t v109;
  __int32 *v110;
  int v111;
  unint64_t v112;
  __uint32_t v113;
  int v114;
  __int32 *v115;
  __int32 *v116;
  uint64_t v117;
  __uint32_t v118;
  __uint32_t v119;
  int v120;
  __int32 **v121;
  __int32 *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  __int32 *v126;
  __int32 *v127;
  __int32 **v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _RuneLocale *v132;
  __uint32_t v133;
  __int32 *v134;
  __int32 *v135;
  uint64_t v136;
  uintmax_t v137;
  __int32 **v138;
  uintmax_t **v139;
  __int32 **v140;
  __int32 **v141;
  char *j;
  unsigned int v143;
  unint64_t v144;
  float v145;
  float **v146;
  double v147;
  double **v148;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  __int32 *v155;
  unint64_t v156;
  unsigned int *v157;
  BOOL v158;
  uint64_t v159;
  __int32 *v160;
  unint64_t v161;
  _BOOL4 v162;
  __int32 *__s;
  unsigned int v164;
  __int32 *v165;
  int base;
  char *v167;
  locale_t v168;
  char v170[6];
  __int32 *v171;
  __int32 **v172;
  __int32 v173;
  mbstate_t v174;
  __int32 nptr[513];
  mbstate_t v176;

  v171 = 0;
  v172 = a4;
  memset(&v174, 0, sizeof(v174));
  v161 = *(int *)(*((_QWORD *)a2 + 166) + 64);
  v4 = *a3;
  if (!*a3)
    return 0;
  v5 = a3;
  v8 = 0;
  v9 = 0;
  base = 0;
  v167 = 0;
  __s = 0;
  v162 = 0;
  v10 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1)
    v10 = a2;
  v168 = v10;
  v157 = 0;
LABEL_5:
  v11 = v5;
  v164 = v8;
  while (1)
  {
    v5 = v11;
LABEL_7:
    if (v4 > 0x7F)
    {
      if (v4 >= 0x100)
      {
        LOWORD(v13) = ___runetype_l(v4, a2);
        goto LABEL_13;
      }
      v12 = *(_RuneLocale **)(*((_QWORD *)v168 + 166) + 120);
    }
    else
    {
      v12 = &_DefaultRuneLocale;
    }
    v13 = v12->__runetype[v4];
LABEL_13:
    v11 = v5 + 1;
    if ((v13 & 0x4000) != 0)
    {
      v28 = __fgetwc(a1, (uint64_t)a2);
      if ((_DWORD)v28 == -1)
        goto LABEL_78;
      v29 = v28;
      while (1)
      {
        if (v29 > 0x7F)
        {
          if (v29 >= 0x100)
          {
            LOWORD(v31) = ___runetype_l(v29, a2);
            goto LABEL_70;
          }
          v30 = *(_RuneLocale **)(*((_QWORD *)v168 + 166) + 120);
        }
        else
        {
          v30 = &_DefaultRuneLocale;
        }
        v31 = v30->__runetype[v29];
LABEL_70:
        if ((v31 & 0x4000) == 0)
        {
          __ungetwc(v29, a1, (uint64_t)a2);
          goto LABEL_78;
        }
        v9 = (v9 + 1);
        v29 = __fgetwc(a1, (uint64_t)a2);
        if ((_DWORD)v29 == -1)
          goto LABEL_78;
      }
    }
    if (v4 == 37)
      break;
    v25 = __fgetwc(a1, (uint64_t)a2);
    if ((_DWORD)v25 == -1)
      goto LABEL_467;
LABEL_76:
    if ((_DWORD)v25 != v4)
    {
      __ungetwc(v25, a1, (uint64_t)a2);
      return v164;
    }
    v9 = (v9 + 1);
    v8 = v164;
LABEL_78:
    v4 = *v11;
    if (!*v11)
      return v8;
  }
  v14 = 0;
  v15 = 0;
  while (2)
  {
    v5 = v11 + 1;
    v16 = *v11;
    switch((int)v16)
    {
      case '$':
        if ((v15 - 10) < 0xFFFFFFF7 || *(v11 - 2) != 37)
          goto LABEL_467;
        v17 = v15;
        v15 = 0;
        v172 = a4;
        ++v11;
        if (v17 >= 2)
        {
          v18 = v17 + 1;
          do
          {
            ++v172;
            --v18;
          }
          while (v18 > 2);
          v15 = 0;
          v11 = v5;
        }
        continue;
      case '%':
        v24 = __fgetwc(a1, (uint64_t)a2);
        if ((_DWORD)v24 == -1)
          goto LABEL_467;
        v25 = v24;
        while (2)
        {
          if (v25 > 0x7F)
          {
            if (v25 >= 0x100)
            {
              LOWORD(v27) = ___runetype_l(v25, a2);
              goto LABEL_59;
            }
            v26 = *(_RuneLocale **)(*((_QWORD *)v168 + 166) + 120);
          }
          else
          {
            v26 = &_DefaultRuneLocale;
          }
          v27 = v26->__runetype[v25];
LABEL_59:
          if ((v27 & 0x4000) != 0)
          {
            LODWORD(v9) = v9 + 1;
            v25 = __fgetwc(a1, (uint64_t)a2);
            if ((_DWORD)v25 == -1)
              goto LABEL_467;
            continue;
          }
          break;
        }
        v4 = 37;
        ++v11;
        goto LABEL_76;
      case '&':
      case '\'':
      case '(':
      case ')':
      case '+':
      case ',':
      case '-':
      case '.':
      case '/':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '?':
      case '@':
      case 'B':
      case 'D':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'Y':
      case 'Z':
      case '\\':
      case ']':
      case '^':
      case '_':
      case 'b':
      case 'k':
      case 'm':
      case 'r':
      case 'v':
      case 'w':
      case 'y':
        return v164;
      case '*':
        v14 |= 8u;
        ++v11;
        continue;
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        v15 = v16 + 10 * v15 - 48;
        ++v11;
        continue;
      case 'A':
      case 'E':
      case 'F':
      case 'G':
      case 'a':
      case 'e':
      case 'f':
      case 'g':
        v32 = 4;
        if ((v14 & 0x20) != 0)
          goto LABEL_117;
        goto LABEL_105;
      case 'C':
        v14 |= 1u;
        goto LABEL_85;
      case 'L':
        v14 |= 2u;
        ++v11;
        continue;
      case 'S':
        v14 |= 1u;
        goto LABEL_88;
      case 'X':
      case 'x':
        v33 = 33024;
        goto LABEL_101;
      case '[':
        v162 = v11[1] == 94;
        v34 = v11 + 2;
        v35 = 1;
        if (v11[1] == 94)
          v35 = 2;
        else
          v34 = v11 + 1;
        for (i = &v34[v11[v35] == 93]; *i && *i != 93; ++i)
          ;
        __s = (__int32 *)(v11 + 1);
        v157 = i;
        v5 = i + 1;
        v14 |= 0x20u;
        v32 = 1;
        if ((v14 & 0x20) == 0)
          goto LABEL_105;
        goto LABEL_117;
      case 'c':
LABEL_85:
        v32 = 0;
        v14 |= 0x20u;
        if ((v14 & 0x20) != 0)
          goto LABEL_117;
        goto LABEL_105;
      case 'd':
        goto LABEL_103;
      case 'h':
        v19 = v14 & 0xFFFFBFFB | 0x4000;
        v20 = v14 | 4;
        v21 = (v14 & 4) == 0;
        goto LABEL_29;
      case 'i':
        base = 0;
        v32 = 3;
        if ((v14 & 0x20) != 0)
          goto LABEL_117;
        goto LABEL_105;
      case 'j':
        v14 |= 0x800u;
        ++v11;
        continue;
      case 'l':
        v19 = v14 & 0xFFFFFBFE | 0x400;
        v20 = v14 | 1;
        v21 = (v14 & 1) == 0;
LABEL_29:
        if (v21)
          v14 = v20;
        else
          v14 = v19;
        ++v11;
        continue;
      case 'n':
        if ((v14 & 8) == 0)
        {
          v22 = v172++;
          v23 = *v22;
          if (v23)
          {
            if ((v14 & 0x4000) != 0)
            {
              *(_BYTE *)v23 = v9;
            }
            else if ((v14 & 4) != 0)
            {
              *(_WORD *)v23 = v9;
            }
            else if ((v14 & 1) != 0
                   || (v14 & 0x400) != 0
                   || (v14 & 0x800) != 0
                   || (v14 & 0x2000) != 0
                   || (v14 & 0x1000) != 0)
            {
              *(_QWORD *)v23 = (int)v9;
            }
            else
            {
              *v23 = v9;
            }
          }
        }
        v4 = *v5;
        v8 = v164;
        if (!*v5)
          return v8;
        goto LABEL_7;
      case 'o':
        v14 |= 0x8000u;
        v32 = 3;
        v37 = 8;
        goto LABEL_104;
      case 'p':
        v33 = 33040;
LABEL_101:
        v14 |= v33;
        v32 = 3;
        v37 = 16;
        goto LABEL_104;
      case 'q':
        v14 |= 0x400u;
        ++v11;
        continue;
      case 's':
LABEL_88:
        v32 = 2;
        if ((v14 & 0x20) != 0)
          goto LABEL_117;
        goto LABEL_105;
      case 't':
        v14 |= 0x1000u;
        ++v11;
        continue;
      case 'u':
        v14 |= 0x8000u;
LABEL_103:
        v32 = 3;
        v37 = 10;
LABEL_104:
        base = v37;
        if ((v14 & 0x20) != 0)
          goto LABEL_117;
LABEL_105:
        v38 = __fgetwc(a1, (uint64_t)a2);
        if ((_DWORD)v38 == -1)
          goto LABEL_467;
        v39 = v38;
        break;
      case 'z':
        v14 |= 0x2000u;
        ++v11;
        continue;
      default:
        if (!(_DWORD)v16)
          return 0xFFFFFFFFLL;
        return v164;
    }
    break;
  }
  while (1)
  {
    if (v39 > 0x7F)
    {
      if (v39 >= 0x100)
      {
        if ((___runetype_l(v39, a2) & 0x4000) == 0)
          break;
        goto LABEL_114;
      }
      v40 = *(_RuneLocale **)(*((_QWORD *)v168 + 166) + 120);
    }
    else
    {
      v40 = &_DefaultRuneLocale;
    }
    if ((v40->__runetype[v39] & 0x4000) == 0)
      break;
LABEL_114:
    v9 = (v9 + 1);
    v39 = __fgetwc(a1, (uint64_t)a2);
    if ((_DWORD)v39 == -1)
      goto LABEL_467;
  }
  __ungetwc(v39, a1, (uint64_t)a2);
LABEL_117:
  switch(v32)
  {
    case 0:
      if (v15 <= 1)
        v41 = 1;
      else
        v41 = v15;
      v42 = v14 & 8;
      if ((v14 & 1) == 0)
      {
        if ((v14 & 8) == 0)
        {
          v43 = (char **)v172++;
          v167 = *v43;
        }
        v44 = 0;
        memset(&v174, 0, sizeof(v174));
        while (1)
        {
          v45 = __fgetwc(a1, (uint64_t)a2);
          if ((_DWORD)v45 == -1)
            break;
          v46 = v45;
          if (v42 || v41 < v161)
          {
            v48 = wcrtomb_l(v170, v45, &v174, a2);
            if (v48 == -1)
              goto LABEL_467;
            v47 = v48;
            if (v48 > v41)
            {
              __ungetwc(v46, a1, (uint64_t)a2);
              break;
            }
            if (!v42)
              _platform_memmove();
          }
          else
          {
            v47 = wcrtomb_l(v167, v45, &v174, a2);
            if (v47 == -1)
              goto LABEL_467;
          }
          if (v42)
            v49 = 0;
          else
            v49 = v47;
          v167 += v49;
          --v44;
          v41 -= v47;
          if (!v41)
            goto LABEL_414;
        }
        if (v44)
        {
LABEL_414:
          v9 = (v9 - v44);
          if (v42)
            v8 = v164;
          else
            v8 = v164 + 1;
          goto LABEL_465;
        }
LABEL_467:
        if (v164)
          return v164;
        else
          return 0xFFFFFFFFLL;
      }
      if ((v14 & 8) == 0)
      {
        v75 = v172++;
        v171 = *v75;
      }
      v76 = 0;
      while (1)
      {
        v77 = __fgetwc(a1, (uint64_t)a2);
        if (v77 == -1)
          break;
        if (!v42)
        {
          v78 = v171;
          *v171 = v77;
          v171 = v78 + 1;
        }
        if (v41 == ++v76)
          goto LABEL_373;
      }
      LODWORD(v41) = v76;
LABEL_373:
      if (!(_DWORD)v41)
        goto LABEL_467;
      v9 = (v41 + v9);
      v8 = ((v42 >> 3) ^ 1) + v164;
      goto LABEL_465;
    case 1:
      if (v15)
        v50 = v15;
      else
        v50 = -1;
      if ((~v14 & 9) != 0)
      {
        if ((v14 & 1) != 0)
        {
          v121 = v172++;
          v122 = *v121;
          v171 = *v121;
          v123 = __fgetwc(a1, (uint64_t)a2);
          if ((_DWORD)v123 != -1)
          {
            v124 = v123;
            v125 = v50 + 1;
            while (--v125)
            {
              v126 = wmemchr(__s, v124, ((char *)v157 - (char *)__s) >> 2);
              if (v162)
              {
                if (v126)
                  break;
              }
              else if (!v126)
              {
                break;
              }
              v127 = v171;
              *v171 = v124;
              v171 = v127 + 1;
              v124 = __fgetwc(a1, (uint64_t)a2);
              if ((_DWORD)v124 == -1)
                goto LABEL_400;
            }
            __ungetwc(v124, a1, (uint64_t)a2);
          }
LABEL_400:
          v50 = (unint64_t)((char *)v171 - (char *)v122) >> 2;
          if (!(_DWORD)v50)
            return v164;
          *v171 = 0;
          v8 = v164 + 1;
        }
        else
        {
          if ((v14 & 8) == 0)
          {
            v79 = (char **)v172++;
            v167 = *v79;
          }
          memset(&v174, 0, sizeof(v174));
          v80 = __fgetwc(a1, (uint64_t)a2);
          if ((_DWORD)v80 == -1)
          {
            v82 = 0;
LABEL_406:
            LODWORD(v50) = v82;
            if (!v164)
              return 0xFFFFFFFFLL;
          }
          else
          {
            v81 = v80;
            v82 = 0;
            do
            {
              v83 = wmemchr(__s, v81, ((char *)v157 - (char *)__s) >> 2);
              if (v162)
              {
                if (v83)
                  goto LABEL_234;
              }
              else if (!v83)
              {
                goto LABEL_234;
              }
              if ((v14 & 8) != 0 || v50 < v161)
              {
                v85 = wcrtomb_l(v170, v81, &v174, a2);
                if (v85 == -1)
                  goto LABEL_467;
                v84 = v85;
                if (v85 > v50)
                  goto LABEL_234;
                if ((v14 & 8) == 0)
                  _platform_memmove();
              }
              else
              {
                v84 = wcrtomb_l(v167, v81, &v174, a2);
                if (v84 == -1)
                  goto LABEL_467;
              }
              if ((v14 & 8) != 0)
                v86 = 0;
              else
                v86 = v84;
              v167 += v86;
              ++v82;
              v87 = __fgetwc(a1, (uint64_t)a2);
              v81 = v87;
              if ((_DWORD)v87 == -1)
                break;
              v50 -= v84;
            }
            while (v50);
            if ((_DWORD)v87 == -1)
              goto LABEL_406;
LABEL_234:
            __ungetwc(v81, a1, (uint64_t)a2);
            LODWORD(v50) = v82;
          }
          if (!(_DWORD)v50)
            return v164;
          if ((v14 & 8) != 0)
          {
            v8 = v164;
          }
          else
          {
            *v167 = 0;
            v8 = v164 + 1;
          }
        }
LABEL_402:
        v9 = (v50 + v9);
        goto LABEL_465;
      }
      v51 = __fgetwc(a1, (uint64_t)a2);
      if ((_DWORD)v51 == -1)
        return v164;
      v52 = v51;
      v53 = 0;
      while (1)
      {
        if (v50 == v53)
          goto LABEL_397;
        v54 = wmemchr(__s, v52, ((char *)v157 - (char *)__s) >> 2);
        if (v162)
        {
          if (v54)
            break;
          goto LABEL_150;
        }
        if (!v54)
          break;
LABEL_150:
        ++v53;
        v52 = __fgetwc(a1, (uint64_t)a2);
        if ((_DWORD)v52 == -1)
        {
          LODWORD(v50) = v53;
          v8 = v164;
          goto LABEL_402;
        }
      }
      LODWORD(v50) = v53;
LABEL_397:
      __ungetwc(v52, a1, (uint64_t)a2);
      v8 = v164;
      if ((_DWORD)v50)
        goto LABEL_402;
      return v8;
    case 2:
      if (v15)
        v55 = v15;
      else
        v55 = -1;
      if ((~v14 & 9) == 0)
      {
        v56 = __fgetwc(a1, (uint64_t)a2);
        if ((_DWORD)v56 == -1)
          goto LABEL_445;
        v57 = v56;
        v58 = (v9 + v55);
        while (1)
        {
          if (!v55)
          {
LABEL_404:
            __ungetwc(v57, a1, (uint64_t)a2);
            v9 = v58;
            goto LABEL_445;
          }
          if (v57 > 0x7F)
          {
            if (v57 >= 0x100)
            {
              LOWORD(v60) = ___runetype_l(v57, a2);
              goto LABEL_165;
            }
            v59 = *(_RuneLocale **)(*((_QWORD *)v168 + 166) + 120);
          }
          else
          {
            v59 = &_DefaultRuneLocale;
          }
          v60 = v59->__runetype[v57];
LABEL_165:
          if ((v60 & 0x4000) != 0)
          {
            v58 = v9;
            goto LABEL_404;
          }
          v9 = (v9 + 1);
          v57 = __fgetwc(a1, (uint64_t)a2);
          --v55;
          if ((_DWORD)v57 == -1)
            goto LABEL_445;
        }
      }
      if ((v14 & 1) == 0)
      {
        if ((v14 & 8) == 0)
        {
          v88 = (char **)v172++;
          v167 = *v88;
        }
        memset(&v174, 0, sizeof(v174));
        v89 = __fgetwc(a1, (uint64_t)a2);
        if ((_DWORD)v89 == -1)
          goto LABEL_444;
        v90 = v89;
        while (v90 > 0x7F)
        {
          if (v90 < 0x100)
          {
            v91 = *(_RuneLocale **)(*((_QWORD *)v168 + 166) + 120);
            goto LABEL_245;
          }
          LOWORD(v92) = ___runetype_l(v90, a2);
LABEL_246:
          if ((v92 & 0x4000) != 0)
            goto LABEL_443;
          if ((v14 & 8) != 0 || v55 < v161)
          {
            v94 = wcrtomb_l(v170, v90, &v174, a2);
            if (v94 == -1)
              goto LABEL_467;
            v93 = v94;
            if (v94 > v55)
              goto LABEL_443;
            if ((v14 & 8) == 0)
              _platform_memmove();
          }
          else
          {
            v93 = wcrtomb_l(v167, v90, &v174, a2);
            if (v93 == -1)
              goto LABEL_467;
          }
          if ((v14 & 8) != 0)
            v95 = 0;
          else
            v95 = v93;
          v167 += v95;
          v9 = (v9 + 1);
          v96 = __fgetwc(a1, (uint64_t)a2);
          v90 = v96;
          if ((_DWORD)v96 != -1)
          {
            v55 -= v93;
            if (v55)
              continue;
          }
          if ((_DWORD)v96 == -1)
            goto LABEL_444;
LABEL_443:
          __ungetwc(v90, a1, (uint64_t)a2);
LABEL_444:
          if ((v14 & 8) != 0)
          {
LABEL_445:
            v8 = v164;
            goto LABEL_465;
          }
          *v167 = 0;
LABEL_447:
          v8 = v164 + 1;
          goto LABEL_465;
        }
        v91 = &_DefaultRuneLocale;
LABEL_245:
        v92 = v91->__runetype[v90];
        goto LABEL_246;
      }
      v128 = v172++;
      v171 = *v128;
      v129 = __fgetwc(a1, (uint64_t)a2);
      if ((_DWORD)v129 == -1)
        goto LABEL_419;
      v130 = v129;
      v131 = (v9 + v55);
      while (1)
      {
        if (!v55)
          goto LABEL_418;
        if (v130 > 0x7F)
        {
          if (v130 >= 0x100)
          {
            LOWORD(v133) = ___runetype_l(v130, a2);
            goto LABEL_393;
          }
          v132 = *(_RuneLocale **)(*((_QWORD *)v168 + 166) + 120);
        }
        else
        {
          v132 = &_DefaultRuneLocale;
        }
        v133 = v132->__runetype[v130];
LABEL_393:
        if ((v133 & 0x4000) != 0)
        {
          v131 = v9;
LABEL_418:
          __ungetwc(v130, a1, (uint64_t)a2);
          v9 = v131;
LABEL_419:
          *v171 = 0;
          goto LABEL_447;
        }
        v134 = v171;
        *v171 = v130;
        v171 = v134 + 1;
        v9 = (v9 + 1);
        v130 = __fgetwc(a1, (uint64_t)a2);
        --v55;
        if ((_DWORD)v130 == -1)
          goto LABEL_419;
      }
    case 3:
      v61 = v14 | 0x2C0;
      v171 = nptr;
      if (v15 - 513 >= 0xFFFFFFFFFFFFFE00)
        v62 = v15;
      else
        v62 = 512;
      if (!v62)
        goto LABEL_422;
      while (2)
      {
        v63 = __fgetwc(a1, (uint64_t)a2);
        switch((int)v63)
        {
          case '+':
          case '-':
            if ((v61 & 0x40) == 0)
              goto LABEL_421;
            v61 = v61 & 0xFFFEFFBF | 0x10000;
            goto LABEL_180;
          case ',':
          case '.':
          case '/':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'G':
          case 'H':
          case 'I':
          case 'J':
          case 'K':
          case 'L':
          case 'M':
          case 'N':
          case 'O':
          case 'P':
          case 'Q':
          case 'R':
          case 'S':
          case 'T':
          case 'U':
          case 'V':
          case 'W':
          case 'Y':
          case 'Z':
          case '[':
          case '\\':
          case ']':
          case '^':
          case '_':
            goto LABEL_421;
          case '0':
            v66 = v61 | 0x100;
            v67 = base == 0;
            if (base)
              v68 = base;
            else
              v68 = 8;
            base = v68;
            if (!v67)
              v66 = v61;
            if ((v66 & 0x200) != 0)
              v61 = v66 & 0xFFFFFD3F;
            else
              v61 = v66 & 0xFFFFFE3F;
            goto LABEL_180;
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
            base = __vfwscanf_basefix[base];
            goto LABEL_179;
          case '8':
          case '9':
            v64 = base;
            base = __vfwscanf_basefix[base];
            if ((unint64_t)(v64 - 1) >= 8)
              goto LABEL_179;
            goto LABEL_421;
          case 'A':
          case 'B':
          case 'C':
          case 'D':
          case 'E':
          case 'F':
          case 'a':
          case 'b':
          case 'c':
          case 'd':
          case 'e':
          case 'f':
            if (base < 11)
              goto LABEL_421;
LABEL_179:
            v61 &= 0xFFFFFE3F;
            goto LABEL_180;
          case 'X':
            goto LABEL_183;
          default:
            if ((_DWORD)v63 == 120)
            {
LABEL_183:
              if ((v61 & 0x100) == 0 || v171 != &nptr[(HIWORD(v61) & 1) + 1])
                goto LABEL_421;
              v61 &= ~0x100u;
              base = 16;
LABEL_180:
              v65 = v171;
              *v171 = v63;
              v171 = v65 + 1;
              if (!--v62)
                goto LABEL_422;
              continue;
            }
            if ((_DWORD)v63 != -1)
LABEL_421:
              __ungetwc(v63, a1, (uint64_t)a2);
LABEL_422:
            v135 = v171;
            if ((v61 & 0x80) != 0)
            {
              v8 = v164;
              if (v171 > nptr)
              {
                v150 = *--v171;
                __ungetwc(v150, a1, (uint64_t)a2);
              }
              return v8;
            }
            v136 = *(v171 - 1);
            v8 = v164;
            if ((v136 & 0xFFFFFFDF) == 0x58)
            {
              --v171;
              __ungetwc(v136, a1, (uint64_t)a2);
              v135 = v171;
            }
            if ((v61 & 8) != 0)
              goto LABEL_442;
            *v135 = 0;
            if ((v61 & 0x8000) != 0)
            {
              v137 = wcstoumax_l(nptr, 0, base, a2);
              if ((v61 & 0x10) != 0)
              {
LABEL_438:
                v139 = (uintmax_t **)v172++;
                **v139 = v137;
                goto LABEL_441;
              }
            }
            else
            {
              v137 = wcstoimax_l(nptr, 0, base, a2);
              if ((v61 & 0x10) != 0)
                goto LABEL_438;
            }
            if ((v61 & 0x4000) != 0)
            {
              v140 = v172++;
              *(_BYTE *)*v140 = v137;
            }
            else
            {
              if ((v61 & 4) == 0)
              {
                if ((v61 & 1) == 0
                  && (v61 & 0x400) == 0
                  && (v61 & 0x800) == 0
                  && (v61 & 0x1000) == 0
                  && (v61 & 0x2000) == 0)
                {
                  v138 = v172++;
                  **v138 = v137;
                  goto LABEL_441;
                }
                goto LABEL_438;
              }
              v141 = v172++;
              *(_WORD *)*v141 = v137;
            }
LABEL_441:
            v8 = v164 + 1;
            v135 = v171;
LABEL_442:
            v9 = v9 + ((unint64_t)((char *)v135 - (char *)nptr) >> 2);
LABEL_465:
            v4 = *v5;
            if (!*v5)
              return v8;
            goto LABEL_5;
        }
      }
    case 4:
      v152 = a1;
      v173 = 0;
      memset(&v176, 0, sizeof(v176));
      v69 = localeconv();
      if (mbrtowc_l(&v173, v69->decimal_point, *(int *)(*((_QWORD *)a2 + 166) + 64), &v176, a2) >= 0xFFFFFFFFFFFFFFFELL)
        v173 = 46;
      if (v15)
        v70 = v15 + 1;
      else
        v70 = 513;
      v71 = (__int32 *)__parsefloat_buf(4 * v70);
      if (!v71)
        return v164;
      v72 = v70 - 1;
      v165 = v71 - 1;
      v73 = v70 - 1 > 0;
      v155 = v71;
      if (v15 && v72 < 1)
      {
        v74 = v71;
        goto LABEL_451;
      }
      v153 = v70;
      v159 = 0;
      v97 = 0;
      v151 = 0;
      v74 = v71;
      v98 = (unint64_t)&v71[v72];
      break;
    default:
      goto LABEL_445;
  }
  while (2)
  {
    v158 = v73;
    v156 = v98;
    v99 = __fgetwc(a1, (uint64_t)a2);
    if ((_DWORD)v99 == -1)
      goto LABEL_451;
    v100 = v99;
    v160 = v74;
    v101 = v99;
    v102 = &_DefaultRuneLocale.__runetype[v99];
    v154 = v99 & 0xFFFFFFDF;
    v103 = v159;
LABEL_265:
    switch(v97)
    {
      case 0:
        v97 = 1;
        goto LABEL_276;
      case 1:
        v97 = 6;
        if ((int)v100 <= 77)
        {
          if ((_DWORD)v100 == 48)
          {
            v97 = 5;
LABEL_341:
            v110 = v160;
            v165 = v160;
            goto LABEL_342;
          }
          if ((_DWORD)v100 == 73)
            goto LABEL_297;
        }
        else
        {
          switch((_DWORD)v100)
          {
            case 'N':
              goto LABEL_296;
            case 'i':
LABEL_297:
              v97 = 2;
LABEL_298:
              LODWORD(v159) = v103;
LABEL_299:
              v110 = v160;
LABEL_343:
              if (!v158)
              {
                v115 = (__int32 *)__parsefloat_buf(4 * (v153 + 513));
                if (v115)
                {
                  v98 = (unint64_t)&v115[v153 + 512];
                  v116 = (__int32 *)((char *)v115 + (char *)v160 - (char *)v155);
                  v165 = (__int32 *)((char *)v115 + (char *)v165 - (char *)v155);
                  v155 = v115;
                  v153 += 513;
                  v110 = v116;
                  a1 = v152;
                  goto LABEL_347;
                }
                return v164;
              }
              v98 = v156;
LABEL_347:
              *v110 = v100;
              v74 = v110 + 1;
              v73 = (unint64_t)v74 < v98;
              if (v15 && (unint64_t)v74 >= v98)
              {
LABEL_451:
                for (j = (char *)(v74 - 1); v165 < (__int32 *)j; j -= 4)
                {
                  v143 = *(_DWORD *)j;
                  __ungetwc(v143, a1, (uint64_t)a2);
                }
                v165[1] = 0;
                v144 = (unint64_t)((char *)(v165 + 1) - (char *)v155) >> 2;
                if ((_DWORD)v144)
                {
                  if ((v14 & 8) != 0)
                  {
                    v8 = v164;
                  }
                  else
                  {
                    if ((v14 & 2) != 0)
                    {
                      v147 = wcstold_l(v155, &v171, a2);
                    }
                    else
                    {
                      if ((v14 & 1) == 0)
                      {
                        v145 = wcstof_l(v155, &v171, a2);
                        v146 = (float **)v172++;
                        **v146 = v145;
                        goto LABEL_463;
                      }
                      v147 = wcstod_l(v155, &v171, a2);
                    }
                    v148 = (double **)v172++;
                    **v148 = v147;
LABEL_463:
                    v8 = v164 + 1;
                  }
                  v9 = (v9 + v144);
                  goto LABEL_465;
                }
                return v164;
              }
              continue;
            case 'n':
LABEL_296:
              v97 = 3;
              goto LABEL_298;
          }
        }
        goto LABEL_265;
      case 2:
        if (v151 > 6 || (_DWORD)v100 != aNfinity[v151] && (_DWORD)v100 != aNfinity_0[v151])
          goto LABEL_449;
        v110 = v160;
        if (v151 == 6 || v151 == 1)
          v165 = v160;
        ++v151;
        v97 = 2;
        goto LABEL_342;
      case 3:
        v111 = v151;
        if (v151 == 2)
        {
          if ((_DWORD)v100 == 40)
          {
            v97 = 3;
            v110 = v160;
LABEL_335:
            v151 = v111 + 1;
LABEL_342:
            LODWORD(v159) = v103;
            goto LABEL_343;
          }
          if ((_DWORD)v100 == -1)
          {
LABEL_450:
            v74 = v160;
            goto LABEL_451;
          }
        }
        else if (v151 == 1)
        {
          if (v154 == 78)
          {
            v97 = 3;
            v110 = v160;
            v165 = v160;
            goto LABEL_334;
          }
        }
        else if (v151)
        {
          if ((_DWORD)v100 == 41)
          {
            v97 = 4;
            v110 = v160;
            v165 = v160;
            goto LABEL_335;
          }
          if (v100 > 0x7F)
          {
            if (v100 < 0x100)
            {
              v118 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v168 + 166) + 120) + 4 * v101 + 60);
            }
            else
            {
              v120 = v103;
              LOWORD(v118) = ___runetype_l(v100, a2);
              LODWORD(v103) = v120;
            }
          }
          else
          {
            v118 = *v102;
          }
          v97 = 3;
          if ((_DWORD)v100 == 95 || (v118 & 0x500) != 0)
            goto LABEL_313;
        }
        else if (v154 == 65)
        {
          v97 = 3;
LABEL_313:
          v110 = v160;
LABEL_334:
          v111 = v151;
          goto LABEL_335;
        }
        goto LABEL_449;
      case 4:
        goto LABEL_449;
      case 5:
        v103 = 1;
        v97 = 6;
        if (v154 != 88)
          goto LABEL_265;
        BYTE4(v159) = 1;
        goto LABEL_299;
      case 6:
        if ((v159 & 0x100000000) != 0)
        {
          if (v100 > 0x7F)
          {
            if (v100 < 0x100)
            {
              LODWORD(v104) = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v168 + 166) + 120) + 4 * v101 + 60);
            }
            else
            {
              v105 = v103;
              v106 = v101;
              v104 = ___runetype_l(v100, a2);
              v101 = v106;
              v103 = v105;
            }
          }
          else
          {
            LODWORD(v104) = *v102;
          }
          if ((v104 & 0x10000) != 0)
            goto LABEL_300;
        }
        if (v100 > 0x7F)
        {
          if (v100 < 0x100)
          {
            v107 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v168 + 166) + 120) + 4 * v101 + 60);
          }
          else
          {
            v108 = v103;
            v109 = v101;
            LOWORD(v107) = ___runetype_l(v100, a2);
            v101 = v109;
            v103 = v108;
          }
        }
        else
        {
          v107 = *v102;
        }
        if ((v107 & 0x400) != 0)
        {
LABEL_300:
          v97 = 6;
          goto LABEL_322;
        }
        v97 = 7;
        if ((_DWORD)v100 != v173)
          goto LABEL_265;
        v97 = 7;
        if ((v103 & 1) == 0)
        {
          LODWORD(v159) = 0;
          goto LABEL_299;
        }
LABEL_322:
        v110 = v160;
        LODWORD(v159) = 1;
        goto LABEL_323;
      case 7:
        if (!((v154 != 69) | BYTE4(v159) & 1) || ((v154 == 80) & BYTE4(v159)) != 0)
        {
          if ((v103 & 1) != 0)
          {
            LODWORD(v159) = 1;
            v97 = 8;
            goto LABEL_299;
          }
        }
        else
        {
          v110 = v160;
          if ((v159 & 0x100000000) != 0)
          {
            if (v100 > 0x7F)
            {
              if (v100 < 0x100)
              {
                LODWORD(v112) = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v168 + 166) + 120) + 4 * v101 + 60);
              }
              else
              {
                v117 = v101;
                v112 = ___runetype_l(v100, a2);
                v101 = v117;
              }
            }
            else
            {
              LODWORD(v112) = *v102;
            }
            if ((v112 & 0x10000) != 0)
            {
              v159 = 0x100000001;
              v97 = 7;
LABEL_323:
              v165 = v110;
              goto LABEL_343;
            }
          }
          if (v100 > 0x7F)
          {
            if (v100 < 0x100)
              v119 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v168 + 166) + 120) + 4 * v101 + 60);
            else
              LOWORD(v119) = ___runetype_l(v100, a2);
          }
          else
          {
            v119 = *v102;
          }
          if ((v119 & 0x400) != 0)
          {
            LODWORD(v159) = 1;
            v97 = 7;
            v110 = v160;
            goto LABEL_323;
          }
        }
LABEL_449:
        __ungetwc(v100, a1, (uint64_t)a2);
        goto LABEL_450;
      case 8:
        v97 = 9;
LABEL_276:
        if ((_DWORD)v100 == 43 || (_DWORD)v100 == 45)
          goto LABEL_298;
        goto LABEL_265;
      case 9:
        if (v100 > 0x7F)
        {
          if (v100 < 0x100)
          {
            v113 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v168 + 166) + 120) + 4 * v101 + 60);
          }
          else
          {
            v114 = v103;
            LOWORD(v113) = ___runetype_l(v100, a2);
            LODWORD(v103) = v114;
          }
        }
        else
        {
          v113 = *v102;
        }
        if ((v113 & 0x400) == 0)
          goto LABEL_449;
        v97 = 9;
        goto LABEL_341;
      default:
        abort_report_np((uint64_t)"%s:%s:%u: unknown state %d");
    }
  }
}

int vfwscanf_l(FILE *a1, locale_t a2, const __int32 *a3, __darwin_va_list a4)
{
  __sFILEX *extra;
  locale_t v9;
  _xlocale *v10;
  int v11;

  flockfile(a1);
  extra = a1->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0)
    *((_BYTE *)extra + 72) = *((_BYTE *)extra + 72) & 0xF8 | 1;
  v9 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1)
    v9 = a2;
  if (a2)
    v10 = v9;
  else
    v10 = (_xlocale *)&__c_locale;
  v11 = __vfwscanf((uint64_t)a1, v10, (unsigned int *)a3, (__int32 **)a4);
  funlockfile(a1);
  return v11;
}

int vprintf_l(locale_t a1, const char *a2, va_list a3)
{
  return vfprintf_l(__stdoutp, a1, a2, a3);
}

int vscanf(const char *__format, va_list a2)
{
  FILE *v4;
  uint64_t v5;
  _xlocale *v6;
  _xlocale *v7;
  int v8;

  flockfile(__stdinp);
  v4 = __stdinp;
  v5 = __locale_key;
  v6 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6)
    v7 = v6;
  else
    v7 = (_xlocale *)&__global_locale;
  v8 = __svfscanf_l((char **)v4, v7, (unsigned __int8 *)__format, (wint_t **)a2);
  funlockfile(__stdinp);
  return v8;
}

int vscanf_l(locale_t a1, const char *a2, va_list a3)
{
  locale_t v5;
  _xlocale *v6;
  int v7;

  v5 = (locale_t)&__global_locale;
  if (a1 != (locale_t)-1)
    v5 = a1;
  if (a1)
    v6 = v5;
  else
    v6 = (_xlocale *)&__c_locale;
  flockfile(__stdinp);
  v7 = __svfscanf_l((char **)__stdinp, v6, (unsigned __int8 *)a2, (wint_t **)a3);
  funlockfile(__stdinp);
  return v7;
}

int vsprintf(char *a1, const char *a2, va_list a3)
{
  uint64_t v5;
  _xlocale *v6;
  _xlocale *v7;

  v5 = __locale_key;
  v6 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6)
    v7 = v6;
  else
    v7 = (_xlocale *)&__global_locale;
  return vsprintf_l(a1, v7, a2, a3);
}

int vsscanf(const char *__str, const char *__format, va_list a3)
{
  uint64_t v5;
  _xlocale *v6;
  _xlocale *v7;

  v5 = __locale_key;
  v6 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6)
    v7 = v6;
  else
    v7 = (_xlocale *)&__global_locale;
  return vsscanf_l(__str, v7, __format, a3);
}

int vswprintf_l(__int32 *a1, size_t n, locale_t a3, const __int32 *a4, __darwin_va_list a5)
{
  locale_t v5;
  _xlocale *v6;
  int v11;
  int v12;
  size_t v13;
  int v14;
  const char *v16;
  _BYTE *v17;
  __int128 v18;
  void *v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  _QWORD v28[2];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  mbstate_t v42;

  v27 = 0u;
  v26 = 0u;
  v23 = 0u;
  v25 = 0;
  v21 = 0u;
  v22 = 0u;
  *(_OWORD *)v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  v24 = v28;
  v32 = 0;
  v33 = 0;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28[0] = 0;
  v28[1] = 850045858;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v5 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1)
    v5 = a3;
  if (a3)
    v6 = v5;
  else
    v6 = (_xlocale *)&__c_locale;
  v40 = 0uLL;
  v41 = 0uLL;
  if (!n)
  {
    v14 = 22;
    goto LABEL_16;
  }
  DWORD2(v18) = -48632;
  v17 = malloc_type_malloc(0x80uLL, 0x47C141C3uLL);
  v19[0] = v17;
  if (!v17)
  {
    v14 = 12;
    goto LABEL_16;
  }
  DWORD1(v18) = 127;
  LODWORD(v19[1]) = 127;
  LOBYTE(v33) = v33 & 0xF8;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v11 = __vfwprintf((uint64_t)&v17, v6, (unsigned int *)a4, a5);
  if (v11 < 0)
  {
    v14 = *__error();
    free(v19[0]);
    goto LABEL_16;
  }
  v12 = v11;
  *v17 = 0;
  v16 = (const char *)v19[0];
  memset(&v42, 0, sizeof(v42));
  v13 = mbsrtowcs_l(a1, &v16, n, &v42, v6);
  free(v19[0]);
  if (v13 == -1)
  {
    v14 = 92;
    goto LABEL_16;
  }
  if (v13 == n)
  {
    a1[n - 1] = 0;
    v14 = 84;
LABEL_16:
    *__error() = v14;
    return -1;
  }
  return v12;
}

int vswprintf(__int32 *a1, size_t a2, const __int32 *a3, __darwin_va_list a4)
{
  uint64_t v6;
  _xlocale *v7;
  _xlocale *v8;

  v6 = __locale_key;
  v7 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v6);
  if (v7)
    v8 = v7;
  else
    v8 = (_xlocale *)&__global_locale;
  return vswprintf_l(a1, a2, v8, a3, a4);
}

int vswscanf_l(const __int32 *a1, locale_t a2, const __int32 *a3, __darwin_va_list a4)
{
  locale_t v7;
  _xlocale *v8;
  size_t v9;
  char *v10;
  char *v11;
  size_t v12;
  int v13;
  const __int32 *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  _QWORD v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  mbstate_t v41;

  v26 = 0u;
  v25 = 0u;
  v22 = 0u;
  v24 = 0;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  v23 = v27;
  v31 = 0;
  v32 = 0;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27[0] = 0;
  v27[1] = 850045858;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v7 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1)
    v7 = a2;
  if (a2)
    v8 = v7;
  else
    v8 = (_xlocale *)&__c_locale;
  v39 = 0uLL;
  v40 = 0uLL;
  v9 = wcslen(a1);
  v10 = (char *)malloc_type_malloc(v9 * *(int *)(*((_QWORD *)v8 + 166) + 64) + 1, 0x52C4B3CuLL);
  if (!v10)
    return -1;
  v11 = v10;
  memset(&v41, 0, sizeof(v41));
  v15 = a1;
  v12 = wcsrtombs_l(v10, &v15, 0xFFFFFFFFFFFFFFFFLL, &v41, v8);
  if (v12 == -1)
  {
    v13 = -1;
  }
  else
  {
    v16 = v11;
    *(_QWORD *)&v18 = v11;
    DWORD2(v17) = -65532;
    LODWORD(v17) = v12;
    DWORD2(v18) = v12;
    *((_QWORD *)&v20 + 1) = eofread_0;
    *(_QWORD *)&v22 = 0;
    *(_QWORD *)&v25 = 0;
    LOBYTE(v32) = v32 & 0xF8;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v13 = __vfwscanf((uint64_t)&v16, v8, (unsigned int *)a3, (__int32 **)a4);
  }
  free(v11);
  return v13;
}

int vswscanf(const __int32 *a1, const __int32 *a2, __darwin_va_list a3)
{
  uint64_t v5;
  _xlocale *v6;
  _xlocale *v7;

  v5 = __locale_key;
  v6 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6)
    v7 = v6;
  else
    v7 = (_xlocale *)&__global_locale;
  return vswscanf_l(a1, v7, a2, a3);
}

int vwprintf(const __int32 *a1, __darwin_va_list a2)
{
  FILE *v4;
  uint64_t v5;
  _xlocale *v6;
  _xlocale *v7;

  v4 = __stdoutp;
  v5 = __locale_key;
  v6 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6)
    v7 = v6;
  else
    v7 = (_xlocale *)&__global_locale;
  return vfwprintf_l(v4, v7, a1, a2);
}

int vwprintf_l(locale_t a1, const __int32 *a2, __darwin_va_list a3)
{
  return vfwprintf_l(__stdoutp, a1, a2, a3);
}

int vwscanf(const __int32 *a1, __darwin_va_list a2)
{
  FILE *v4;
  uint64_t v5;
  _xlocale *v6;
  _xlocale *v7;

  v4 = __stdinp;
  v5 = __locale_key;
  v6 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6)
    v7 = v6;
  else
    v7 = (_xlocale *)&__global_locale;
  return vfwscanf_l(v4, v7, a1, a2);
}

int vwscanf_l(locale_t a1, const __int32 *a2, __darwin_va_list a3)
{
  return vfwscanf_l(__stdinp, a1, a2, a3);
}

int __swbuf(int a1, FILE *a2)
{
  unsigned __int8 v3;
  __sFILEX *extra;
  unsigned __int8 *p;
  int v6;
  int v7;

  v3 = a1;
  a2->_w = a2->_lbfsize;
  if (((a2->_flags & 8) == 0 || (a2->_flags & 0x200) == 0 && !a2->_bf._base) && __swsetup((uint64_t)a2))
  {
    *__error() = 9;
    return -1;
  }
  extra = a2->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0)
    *((_BYTE *)extra + 72) |= 7u;
  p = a2->_p;
  v6 = (int)&a2->_p[-LODWORD(a2->_bf._base)];
  if (a2->_bf._size <= v6)
  {
    if (__fflush((uint64_t)a2))
      return -1;
    v6 = 0;
    p = a2->_p;
  }
  v7 = v3;
  --a2->_w;
  a2->_p = p + 1;
  *p = v3;
  if ((v6 + 1 == a2->_bf._size || v3 == 10 && (a2->_flags & 1) != 0) && __fflush((uint64_t)a2))
    return -1;
  return v7;
}

int wprintf(const __int32 *a1, ...)
{
  FILE *v2;
  uint64_t v3;
  _xlocale *v4;
  _xlocale *v5;
  va_list va;

  va_start(va, a1);
  v2 = __stdoutp;
  v3 = __locale_key;
  v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__global_locale;
  return vfwprintf_l(v2, v5, a1, va);
}

int wprintf_l(locale_t a1, const __int32 *a2, ...)
{
  va_list va;

  va_start(va, a2);
  return vfwprintf_l(__stdoutp, a1, a2, va);
}

int wscanf(const __int32 *a1, ...)
{
  FILE *v2;
  uint64_t v3;
  _xlocale *v4;
  _xlocale *v5;
  va_list va;

  va_start(va, a1);
  v2 = __stdinp;
  v3 = __locale_key;
  v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__global_locale;
  return vfwscanf_l(v2, v5, a1, va);
}

int wscanf_l(locale_t a1, const __int32 *a2, ...)
{
  va_list va;

  va_start(va, a2);
  return vfwscanf_l(__stdinp, a1, a2, va);
}

FILE *__cdecl open_wmemstream(__int32 **__bufp, size_t *__sizep)
{
  __int32 *v4;
  _QWORD *v5;
  void *v6;
  FILE *v7;
  FILE *v8;
  int v9;
  int v10;

  if (__bufp && __sizep)
  {
    v4 = (__int32 *)malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
    *__bufp = v4;
    if (v4)
    {
      v5 = malloc_type_malloc(0xA0uLL, 0x1090040970F6AABuLL);
      if (v5)
      {
        v6 = v5;
        *v5 = __bufp;
        v5[1] = __sizep;
        *((_OWORD *)v5 + 1) = 0u;
        *((_OWORD *)v5 + 2) = 0u;
        *((_OWORD *)v5 + 3) = 0u;
        *((_OWORD *)v5 + 4) = 0u;
        *((_OWORD *)v5 + 5) = 0u;
        *((_OWORD *)v5 + 6) = 0u;
        *((_OWORD *)v5 + 7) = 0u;
        *((_OWORD *)v5 + 8) = 0u;
        *((_OWORD *)v5 + 9) = 0u;
        wmemstream_update((uint64_t)v5);
        v7 = funopen(v6, 0, (int (__cdecl *)(void *, const char *, int))wmemstream_write, (fpos_t (__cdecl *)(void *, fpos_t, int))wmemstream_seek, (int (__cdecl *)(void *))wmemstream_close);
        v8 = v7;
        if (v7)
        {
          fwide(v7, 1);
        }
        else
        {
          v10 = *__error();
          free(v6);
          free(*__bufp);
          *__bufp = 0;
          *__error() = v10;
        }
      }
      else
      {
        v9 = *__error();
        free(*__bufp);
        *__bufp = 0;
        v8 = 0;
        *__error() = v9;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v8 = 0;
    *__error() = 22;
  }
  return v8;
}

uint64_t wmemstream_update(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(result + 16);
  if ((v1 & 0x8000000000000000) != 0 || (v2 = *(_QWORD *)(result + 24), (v2 & 0x8000000000000000) != 0))
    wmemstream_update_cold_1();
  if (v1 >= v2)
    v1 = *(_QWORD *)(result + 24);
  **(_QWORD **)(result + 8) = v1;
  return result;
}

uint64_t wmemstream_write(uint64_t a1, char *a2, int a3)
{
  int v3;
  const char *v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  const char *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  mbstate_t v23;

  v3 = a3;
  v4 = a2;
  v6 = *(_OWORD *)(a1 + 112);
  *((_OWORD *)&v23._mbstateL + 4) = *(_OWORD *)(a1 + 96);
  *((_OWORD *)&v23._mbstateL + 5) = v6;
  v7 = *(_OWORD *)(a1 + 144);
  *((_OWORD *)&v23._mbstateL + 6) = *(_OWORD *)(a1 + 128);
  *((_OWORD *)&v23._mbstateL + 7) = v7;
  v8 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)v23.__mbstate8 = *(_OWORD *)(a1 + 32);
  *((_OWORD *)&v23._mbstateL + 1) = v8;
  v9 = *(_OWORD *)(a1 + 80);
  *((_OWORD *)&v23._mbstateL + 2) = *(_OWORD *)(a1 + 64);
  *((_OWORD *)&v23._mbstateL + 3) = v9;
  if (a3 >= 1)
  {
    v10 = 0;
    v11 = a3;
    v12 = a2;
    do
    {
      v13 = mbrlen(v12, v11, &v23);
      if (v13 == -2)
        break;
      if (v13 == -1)
        goto LABEL_10;
      v14 = v13 <= 1 ? 1 : v13;
      v11 -= v14;
      v12 += v14;
      ++v10;
    }
    while (v11 > 0);
    if ((v10 & 0x8000000000000000) == 0)
      goto LABEL_12;
LABEL_10:
    *__error() = 92;
    return 0xFFFFFFFFLL;
  }
  v10 = 0;
LABEL_12:
  if ((unint64_t)(*(_QWORD *)(a1 + 24) + v10) >= 0x1FFFFFFFFFFFFFFELL)
    v15 = 0x1FFFFFFFFFFFFFFELL;
  else
    v15 = *(_QWORD *)(a1 + 24) + v10;
  if (v15 > *(_QWORD *)(a1 + 16))
  {
    v16 = reallocarray_DARWIN_EXTSN();
    if (!v16)
      return 0xFFFFFFFFLL;
    v17 = v16;
    wmemset((__int32 *)(v16 + 4 * *(_QWORD *)(a1 + 16) + 4), 0, v15 - *(_QWORD *)(a1 + 16));
    **(_QWORD **)a1 = v17;
    *(_QWORD *)(a1 + 16) = v15;
  }
  if (v3 < 1)
  {
    v18 = 0;
  }
  else
  {
    v18 = 0;
    do
    {
      v19 = *(_QWORD *)(a1 + 24);
      if (v19 >= *(_QWORD *)(a1 + 16))
        break;
      v20 = mbrtowc((__int32 *)(**(_QWORD **)a1 + 4 * v19), v4, v3, (mbstate_t *)(a1 + 32));
      if (v20 == -1)
      {
        if (v18)
          break;
        goto LABEL_10;
      }
      if (v20 <= 1)
        v21 = 1;
      else
        v21 = v20;
      if (v21 == -2)
      {
        v18 += v3;
        break;
      }
      v4 += v21;
      v3 -= v21;
      ++*(_QWORD *)(a1 + 24);
      v18 += v21;
    }
    while (v3 > 0);
  }
  wmemstream_update(a1);
  return v18;
}

uint64_t wmemstream_seek(uint64_t a1, int64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;

  v4 = *(_QWORD *)(a1 + 24);
  switch(a3)
  {
    case 2:
      v5 = *(_QWORD *)(a1 + 16);
      if (a2 < 0)
      {
        a2 += v5;
        if (a2 < 0)
        {
          v6 = __error();
          v7 = 22;
          goto LABEL_13;
        }
      }
      else
      {
        if ((v5 ^ 0x7FFFFFFFFFFFFFFFuLL) < a2)
        {
          v6 = __error();
          v7 = 84;
LABEL_13:
          *v6 = v7;
          return -1;
        }
        a2 += v5;
      }
LABEL_15:
      *(_QWORD *)(a1 + 24) = a2;
      if (a2 != v4)
      {
        *(_OWORD *)(a1 + 128) = 0u;
        *(_OWORD *)(a1 + 144) = 0u;
        *(_OWORD *)(a1 + 96) = 0u;
        *(_OWORD *)(a1 + 112) = 0u;
        *(_OWORD *)(a1 + 64) = 0u;
        *(_OWORD *)(a1 + 80) = 0u;
        *(_OWORD *)(a1 + 32) = 0u;
        *(_OWORD *)(a1 + 48) = 0u;
      }
      break;
    case 1:
      if (a2)
        wmemstream_seek_cold_2();
      break;
    case 0:
      if (a2 < 0)
        wmemstream_seek_cold_1();
      goto LABEL_15;
  }
  wmemstream_update(a1);
  return *(_QWORD *)(a1 + 24);
}

uint64_t wmemstream_close(void *a1)
{
  free(a1);
  return 0;
}

double difftime(time_t a1, time_t a2)
{
  double result;

  result = -(double)(unint64_t)(a2 - a1);
  if (a1 >= 0)
    result = (double)(unint64_t)(a1 - a2);
  if ((unint64_t)a1 >> 63 == (unint64_t)a2 >> 63)
    return (double)(a1 - a2);
  return result;
}

int ftime(timeb *a1)
{
  int result;
  __int16 v3;
  timeval v4;
  uint64_t v5;

  *(_QWORD *)&v4.tv_usec = 0;
  v5 = 0;
  v4.tv_sec = 0;
  if (gettimeofday(&v4, &v5) < 0)
    return -1;
  result = 0;
  a1->millitm = ((unint64_t)(274877907 * v4.tv_usec) >> 38)
              + ((unint64_t)(274877907 * v4.tv_usec) >> 63);
  a1->time = v4.tv_sec;
  v3 = WORD2(v5);
  a1->timezone = v5;
  a1->dstflag = v3;
  return result;
}

void tzsetwall(void)
{
  tzsetwall_basic(0);
}

uint64_t gmtime_key_init()
{
  uint64_t result;

  gmtime_key = 1;
  result = pthread_key_init_np();
  gmtime_key_error = result;
  return result;
}

uint64_t offtime(uint64_t *a1, uint64_t a2)
{
  return gmtsub(a1, a2, (uint64_t)&tm);
}

time_t timelocal(tm *const a1)
{
  if (a1)
    a1->tm_isdst = -1;
  return mktime(a1);
}

time_t timegm(tm *const a1)
{
  if (a1)
    a1->tm_isdst = 0;
  return _st_time1(a1, gmtsub, 0, 1);
}

time_t time2posix(time_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t *v5;
  time_t v6;
  uint64_t v7;

  _st_tzset_basic(0);
  v2 = *(unsigned int *)lclptr;
  v3 = lclptr + 16 * v2 + 17488;
  v4 = v2 + 1;
  while (--v4 >= 1)
  {
    v5 = (uint64_t *)(v3 - 16);
    v6 = *(_QWORD *)(v3 - 24);
    v3 -= 16;
    if (v6 <= a1)
    {
      v7 = *v5;
      return a1 - v7;
    }
  }
  v7 = 0;
  return a1 - v7;
}

time_t posix2time(time_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t *v5;
  time_t v6;
  uint64_t v7;
  time_t v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  time_t v12;
  uint64_t v13;
  time_t v14;
  uint64_t v15;
  int v16;
  time_t result;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  time_t v21;
  uint64_t v22;
  time_t v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  time_t v30;
  uint64_t v31;
  time_t v32;

  _st_tzset_basic(0);
  v2 = *(unsigned int *)lclptr;
  v3 = lclptr + 16 * v2 + 17488;
  v4 = v2 + 1;
  while (--v4 >= 1)
  {
    v5 = (uint64_t *)(v3 - 16);
    v6 = *(_QWORD *)(v3 - 24);
    v3 -= 16;
    if (v6 <= a1)
    {
      v7 = *v5;
      goto LABEL_6;
    }
  }
  v7 = 0;
LABEL_6:
  v8 = v7 + a1;
  v9 = lclptr + 16 * v2 + 17488;
  v10 = v2 + 1;
  while (--v10 >= 1)
  {
    v11 = (uint64_t *)(v9 - 16);
    v12 = *(_QWORD *)(v9 - 24);
    v9 -= 16;
    if (v8 >= v12)
    {
      v13 = *v11;
      goto LABEL_11;
    }
  }
  v13 = 0;
LABEL_11:
  v14 = v8 - v13;
  if (v14 >= a1)
  {
    if (v14 <= a1)
      return v8;
    v25 = lclptr + 16 * v2 + 17488;
    v26 = v2 + 1;
    do
    {
      result = v8--;
      v27 = v26;
      v28 = v25;
      while (--v27 >= 1)
      {
        v29 = (uint64_t *)(v28 - 16);
        v30 = *(_QWORD *)(v28 - 24);
        v28 -= 16;
        if (result > v30)
        {
          v31 = *v29;
          goto LABEL_27;
        }
      }
      v31 = 0;
LABEL_27:
      v32 = v8 - v31;
      v24 = v32 == a1;
    }
    while (v32 > a1);
  }
  else
  {
    v15 = lclptr + 16 * v2 + 17488;
    v16 = v2 + 1;
    do
    {
      result = v8++;
      v18 = v16;
      v19 = v15;
      while (--v18 >= 1)
      {
        v20 = (uint64_t *)(v19 - 16);
        v21 = *(_QWORD *)(v19 - 24);
        v19 -= 16;
        if (v8 >= v21)
        {
          v22 = *v20;
          goto LABEL_18;
        }
      }
      v22 = 0;
LABEL_18:
      v23 = v8 - v22;
      v24 = v23 == a1;
    }
    while (v23 < a1);
  }
  if (v24)
    return v8;
  return result;
}

uint64_t first_wday_of(int a1)
{
  int v1;
  unint64_t v2;
  int v3;
  int v4;
  int v5;

  v1 = a1 % 100;
  HIDWORD(v2) = -1030792151 * a1 + 85899344;
  LODWORD(v2) = HIDWORD(v2);
  if ((v2 >> 4) >= 0xA3D70B)
    v3 = 0;
  else
    v3 = 6;
  if (v1)
    v4 = 6;
  else
    v4 = v3;
  if ((a1 & 3) != 0)
    v4 = 0;
  v5 = (a1 / 100) & 3;
  if (a1 / -100 >= 0)
    v5 = -((a1 / -100) & 3);
  return ((v1 - 2 * v5 + ((char)(v1 + (((char)v1 >> 13) & 3)) >> 2) + v4 + 7) % 7);
}

time_t _time32_to_time(int32_t t32)
{
  time_t result;

  *(_QWORD *)&t32 = t32;
  LODWORD(result) = t32;
  return result;
}

time_t _int_to_time(int tint)
{
  time_t result;

  *(_QWORD *)&tint = tint;
  LODWORD(result) = tint;
  return result;
}

uint64_t __time_load_locale(uint64_t a1, uint64_t a2)
{
  void **v4;
  void **v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  void (*v10)(void);
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void (*v14)(void);
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  void (*v19)(void);
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  void (*v23)(void);
  unsigned int *v24;
  unsigned int v25;

  if (!_platform_strcmp() || !_platform_strcmp() || !_platform_strncmp())
  {
    *(_BYTE *)(a2 + 1315) = 0;
    v16 = *(_QWORD *)(a2 + 1352);
    if (v16)
    {
      do
      {
        v17 = __ldaxr((unsigned int *)v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, (unsigned int *)v16));
      if (!v18)
      {
        v19 = *(void (**)(void))(v16 + 8);
        if (v19)
          v19();
      }
    }
    *(_QWORD *)(a2 + 1352) = 0;
    return 1;
  }
  if (__time_load_locale_cache && *(_QWORD *)(__time_load_locale_cache + 64) && !_platform_strcmp())
  {
    *(_BYTE *)(a2 + 1315) = 1;
    v20 = *(_QWORD *)(a2 + 1352);
    if (v20)
    {
      do
      {
        v21 = __ldaxr((unsigned int *)v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, (unsigned int *)v20));
      if (!v22)
      {
        v23 = *(void (**)(void))(v20 + 8);
        if (v23)
          v23();
      }
    }
    v24 = (unsigned int *)__time_load_locale_cache;
    *(_QWORD *)(a2 + 1352) = __time_load_locale_cache;
    if (v24)
    {
      result = 1;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 + 1, v24));
      return result;
    }
    return 1;
  }
  v4 = (void **)malloc_type_malloc(0x218uLL, 0x10D00403D7458CFuLL);
  if (!v4)
    return 0xFFFFFFFFLL;
  v5 = v4;
  *(_DWORD *)v4 = 1;
  v4[1] = destruct_ldpart;
  v4[8] = 0;
  result = __part_load_locale(a1, (_BYTE *)(a2 + 1315), v4 + 8, "LC_TIME", 58, 58, v4 + 9);
  if ((_DWORD)result == -1)
  {
    free(v5);
    return 0xFFFFFFFFLL;
  }
  if (!(_DWORD)result)
  {
    v7 = *(_QWORD *)(a2 + 1352);
    if (v7)
    {
      do
      {
        v8 = __ldaxr((unsigned int *)v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, (unsigned int *)v7));
      if (!v9)
      {
        v10 = *(void (**)(void))(v7 + 8);
        if (v10)
          v10();
      }
    }
    *(_QWORD *)(a2 + 1352) = v5;
    v11 = __time_load_locale_cache;
    if (__time_load_locale_cache)
    {
      do
      {
        v12 = __ldaxr((unsigned int *)v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, (unsigned int *)v11));
      if (!v13)
      {
        v14 = *(void (**)(void))(v11 + 8);
        if (v14)
          v14();
      }
    }
    __time_load_locale_cache = (uint64_t)v5;
    do
      v15 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v15 + 1, (unsigned int *)v5));
    return 0;
  }
  return result;
}

void *__cdecl memmem(const void *__big, size_t __big_len, const void *__little, size_t __little_len)
{
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  int v7;

  if (__little_len - 1 >= __big_len)
    return 0;
  v4 = (unsigned __int8 *)__big;
  if (__little_len == 1)
    return (void *)_platform_memchr();
  v6 = (unsigned __int8 *)__big + __big_len - __little_len;
  if (v6 < __big)
    return 0;
  v7 = *(unsigned __int8 *)__little;
  while (*v4 != v7 || _platform_memcmp())
  {
    if (++v4 > v6)
      return 0;
  }
  return v4;
}

void strmode(int __mode, char *__bp)
{
  unint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v2 = (__mode & 0xF000u) - 4096;
  if (v2 >> 13 > 6)
    v3 = 63;
  else
    v3 = byte_18A0E6BB4[v2 >> 12];
  *__bp = v3;
  v4 = 45;
  if ((__mode & 0x100) != 0)
    v5 = 114;
  else
    v5 = 45;
  __bp[1] = v5;
  if ((__mode & 0x80) != 0)
    v6 = 119;
  else
    v6 = 45;
  __bp[2] = v6;
  if ((__mode & 0x840u) > 0x7FF)
  {
    if ((__mode & 0x840) == 0x800)
      v4 = 83;
    else
      v4 = 115;
  }
  else if ((__mode & 0x840) != 0)
  {
    v4 = 120;
  }
  __bp[3] = v4;
  v7 = 45;
  if ((__mode & 0x20) != 0)
    v8 = 114;
  else
    v8 = 45;
  __bp[4] = v8;
  if ((__mode & 0x10) != 0)
    v9 = 119;
  else
    v9 = 45;
  __bp[5] = v9;
  if ((__mode & 0x408u) > 0x3FF)
  {
    if ((__mode & 0x408) == 0x400)
      v7 = 83;
    else
      v7 = 115;
  }
  else if ((__mode & 0x408) != 0)
  {
    v7 = 120;
  }
  __bp[6] = v7;
  v10 = 45;
  if ((__mode & 4) != 0)
    v11 = 114;
  else
    v11 = 45;
  __bp[7] = v11;
  if ((__mode & 2) != 0)
    v12 = 119;
  else
    v12 = 45;
  __bp[8] = v12;
  if ((__mode & 0x201u) > 0x1FF)
  {
    if ((__mode & 0x201) == 0x200)
      v10 = 84;
    else
      v10 = 116;
  }
  else if ((__mode & 0x201) != 0)
  {
    v10 = 120;
  }
  __bp[9] = v10;
  *((_WORD *)__bp + 5) = 32;
}

size_t strxfrm_l(char *a1, const char *a2, size_t a3, locale_t a4)
{
  size_t v4;
  char *v5;
  size_t v6;
  locale_t v7;
  _xlocale *v8;
  __int32 *v10;
  __int32 *v11;
  unsigned int *v12;
  unsigned int *v13;
  int *v14;
  int v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int *v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  void *v28[2];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v4 = a3;
  v5 = a1;
  if (!a1 || *a2)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    *(_OWORD *)v28 = 0u;
    v7 = (locale_t)&__global_locale;
    if (a4 != (locale_t)-1)
      v7 = a4;
    if (a4)
      v8 = v7;
    else
      v8 = (_xlocale *)&__c_locale;
    if (*(_BYTE *)(*((_QWORD *)v8 + 165) + 64))
      return _platform_strlcpy();
    v10 = __collate_mbstowcs((char *)a2, v8);
    if (!v10)
      return _platform_strlcpy();
    v11 = v10;
    __collate_xfrm(v10, v28, (uint64_t)v8);
    v12 = (unsigned int *)v28[0];
    v6 = 4 * wcslen((const __int32 *)v28[0]);
    v13 = (unsigned int *)v28[1];
    if (v28[1])
      v6 += 4 * wcslen((const __int32 *)v28[1]) + 4;
    if (v4)
    {
      if (v4 != 1)
      {
        v14 = 0;
        v15 = 0;
        do
        {
          if (v15)
          {
            LOBYTE(v16) = *(_BYTE *)v14;
          }
          else
          {
            v17 = *v12;
            if (!*v12)
              goto LABEL_24;
            ++v12;
            HIBYTE(v27) = (v17 & 0x3F) + 48;
            BYTE2(v27) = ((v17 >> 6) & 0x3F) + 48;
            BYTE1(v27) = ((v17 >> 12) & 0x3F) + 48;
            v16 = ((v17 >> 18) & 0x3F) + 48;
            LOBYTE(v27) = ((v17 >> 18) & 0x3F) + 48;
            v14 = &v27;
            v15 = 4;
          }
          v14 = (int *)((char *)v14 + 1);
          *v5++ = v16;
          --v15;
          --v4;
        }
        while (v4 > 1);
        v4 = 1;
      }
LABEL_24:
      if (v13)
      {
        v27 = 808464432;
        v18 = v4 - 2;
        if (v4 >= 2)
        {
          v19 = 0;
          if (v18 >= 3)
            v18 = 3;
          v20 = v18 + 1;
          do
          {
            v5[v19] = *((_BYTE *)&v27 + v19);
            ++v19;
          }
          while (v20 != v19);
          v21 = v4 - v19;
          v5 += v19;
          if (v4 - v19 >= 2)
          {
            v22 = 0;
            v23 = (int *)((char *)&v27 + v19);
            do
            {
              if (v22)
              {
                LOBYTE(v24) = *(_BYTE *)v23;
              }
              else
              {
                v25 = *v13;
                if (!*v13)
                  break;
                ++v13;
                HIBYTE(v27) = (v25 & 0x3F) + 48;
                BYTE2(v27) = ((v25 >> 6) & 0x3F) + 48;
                BYTE1(v27) = ((v25 >> 12) & 0x3F) + 48;
                v24 = ((v25 >> 18) & 0x3F) + 48;
                LOBYTE(v27) = ((v25 >> 18) & 0x3F) + 48;
                v23 = &v27;
                v22 = 4;
              }
              v23 = (int *)((char *)v23 + 1);
              *v5++ = v24;
              --v22;
              --v21;
            }
            while (v21 > 1);
          }
        }
      }
      *v5 = 0;
    }
    v26 = *__error();
    free(v11);
    free(v28[0]);
    free(v28[1]);
    *__error() = v26;
  }
  else
  {
    v6 = 0;
    if (a3)
      *a1 = 0;
  }
  return v6;
}

size_t strxfrm(char *__s1, const char *__s2, size_t __n)
{
  uint64_t v3;
  _xlocale *v4;
  _xlocale *v5;

  v3 = __locale_key;
  v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__global_locale;
  return strxfrm_l(__s1, __s2, __n, v5);
}

void swab(const void *a1, void *a2, ssize_t a3)
{
  unint64_t v3;
  char v4;
  char *v5;
  char *v6;
  unsigned int v7;
  int8x16_t v8;

  if (a3 >= 1)
  {
    v3 = (unint64_t)a3 >> 1;
    if ((((unint64_t)a3 >> 1) & 7) != 0)
    {
      do
      {
        v4 = *(_BYTE *)a1;
        v5 = (char *)a1 + 2;
        *(_BYTE *)a2 = *((_BYTE *)a1 + 1);
        v6 = (char *)a2 + 2;
        *((_BYTE *)a2 + 1) = v4;
        LODWORD(v3) = v3 - 1;
        a2 = (char *)a2 + 2;
        a1 = (char *)a1 + 2;
      }
      while ((v3 & 7) != 0);
      a1 = v5;
      a2 = v6;
    }
    if ((int)v3 >= 8)
    {
      v7 = (v3 >> 3) + 1;
      do
      {
        v8 = *(int8x16_t *)a1;
        a1 = (char *)a1 + 16;
        *(int8x16_t *)a2 = vrev16q_s8(v8);
        a2 = (char *)a2 + 16;
        --v7;
      }
      while (v7 > 1);
    }
  }
}

__int32 *__cdecl wcpcpy(__int32 *result, const __int32 *a2)
{
  __int32 v2;
  const __int32 *v3;
  __int32 v4;

  v2 = *a2;
  *result = *a2;
  if (v2)
  {
    v3 = a2 + 1;
    do
    {
      v4 = *v3++;
      result[1] = v4;
      ++result;
    }
    while (v4);
  }
  return result;
}

__int32 *__cdecl wcpncpy(__int32 *a1, const __int32 *a2, size_t a3)
{
  __int32 *v3;
  uint64_t v4;
  size_t v5;
  __int32 v6;

  v3 = a1;
  if (a3)
  {
    v4 = 0;
    v5 = a3;
    while (1)
    {
      v6 = a2[v4];
      a1[v4] = v6;
      if (!v6)
        break;
      ++v4;
      if (!--v5)
        return &a1[v4];
    }
    v3 = &a1[v4];
    if (v5 != 1)
      _platform_bzero();
  }
  return v3;
}

int wcscasecmp_l(const __int32 *a1, const __int32 *a2, locale_t a3)
{
  unsigned __int32 v5;
  const __int32 *i;
  __darwin_ct_rune_t v8;
  uint64_t v9;
  __darwin_ct_rune_t v10;
  int result;
  __int32 v12;

  v5 = *a1;
  if (!v5)
    return -*a2;
  for (i = a1 + 1; ; ++i)
  {
    v8 = v5 > 0x7F ? ___tolower_l(v5, a3) : _DefaultRuneLocale.__maplower[v5];
    v9 = *(unsigned int *)a2;
    v10 = v9 > 0x7F ? ___tolower_l(v9, a3) : _DefaultRuneLocale.__maplower[v9];
    result = v8 - v10;
    if (result)
      break;
    ++a2;
    v12 = *i;
    v5 = v12;
    if (!v12)
      return -*a2;
  }
  return result;
}

int wcscasecmp(const __int32 *a1, const __int32 *a2)
{
  uint64_t v2;
  _xlocale *v3;
  _xlocale *v4;

  v2 = __locale_key;
  v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3)
    v4 = v3;
  else
    v4 = (_xlocale *)&__global_locale;
  return wcscasecmp_l(a1, a2, v4);
}

__int32 *__cdecl wcscat(__int32 *result, const __int32 *a2)
{
  __int32 *v2;
  __int32 v3;
  uint64_t v4;
  __int32 v5;

  v2 = result - 1;
  do
  {
    v3 = v2[1];
    ++v2;
  }
  while (v3);
  v4 = 0;
  do
  {
    v5 = a2[v4];
    v2[v4++] = v5;
  }
  while (v5);
  return result;
}

__int32 *__cdecl wcschr(__int32 *__s, __int32 __c)
{
  __int32 *v2;
  __int32 v3;
  __int32 v4;

  v2 = __s - 1;
  do
  {
    v4 = v2[1];
    ++v2;
    v3 = v4;
  }
  while (v4 != __c && v3 != 0);
  if (v3 == __c)
    return v2;
  else
    return 0;
}

int wcscmp(const __int32 *a1, const __int32 *a2)
{
  __int32 v2;
  int v3;

  while (1)
  {
    v2 = *a1;
    v3 = *a1 - *a2;
    if (*a1 != *a2)
      break;
    ++a2;
    ++a1;
    if (!v2)
      return 0;
  }
  return v3;
}

int wcscoll_l(const __int32 *a1, const __int32 *a2, locale_t a3)
{
  __int32 *v3;
  __int32 *v4;
  locale_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unint64_t v10;
  __int32 *v11;
  __int32 *v12;
  unsigned __int8 v13;
  __int32 *v14;
  __int32 *v15;
  __int32 *v16;
  __int32 v17;
  BOOL v18;
  const __int32 *v19;
  __int32 *v20;
  __int32 *v21;
  __int32 v22;
  int v23;
  int v24;
  int v25;
  int v26;
  __int32 *v27;
  __int32 *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  __int32 v33;
  __int32 *v34;
  __int32 *v35;
  __int32 *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;

  v3 = (__int32 *)a2;
  v4 = (__int32 *)a1;
  v5 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1)
    v5 = a3;
  if (a3)
    v6 = v5;
  else
    v6 = &__c_locale;
  v7 = v6[165];
  if (*(_BYTE *)(v7 + 64))
    return wcscmp(a1, a2);
  v37 = 0;
  v38 = 0;
  v9 = *(unsigned __int8 **)(v7 + 88);
  v39 = 1;
  v40 = 1;
  if ((v9[1] & 6) == 0 && (v9[2] & 6) == 0 && (*((_DWORD *)v9 + 13) || *((int *)v9 + 16) <= 0 && *((int *)v9 + 17) < 1))
  {
    v12 = __collate_substitute((__int32 *)a1, 0, (uint64_t)v6);
    if (v12)
    {
      v3 = __collate_substitute(v3, 0, (uint64_t)v6);
      v4 = v12;
      v11 = v3;
    }
    else
    {
      v11 = 0;
    }
    v23 = *v4;
    if (!*v4)
    {
      v30 = 0;
      goto LABEL_107;
    }
    if (*v3)
    {
      v30 = 0;
      while (2)
      {
        v38 = 0;
        while (*v4)
        {
          __collate_lookup_l(v4, &v40, (int *)&v38 + 1, (int *)&v37 + 1, v6);
          v31 = HIDWORD(v38);
          if (SHIDWORD(v38) > 0)
            goto LABEL_92;
          if (v38 < 0)
          {
LABEL_110:
            v27 = 0;
            v28 = 0;
            *__error() = 22;
            v23 = -1;
            goto LABEL_75;
          }
          v4 += v40;
        }
        v31 = 0;
LABEL_92:
        if (*v3)
        {
          do
          {
            __collate_lookup_l(v3, &v39, (int *)&v38, (int *)&v37, v6);
            v32 = v38;
            if ((int)v38 > 0)
              break;
            if ((v38 & 0x80000000) != 0)
              goto LABEL_110;
            v3 += v39;
          }
          while (*v3);
          v31 = HIDWORD(v38);
        }
        else
        {
          v32 = v38;
        }
        if (v31 && v32)
        {
          v23 = v31 - v32;
          if (v31 != v32)
            goto LABEL_71;
          if (!v30)
            v30 = HIDWORD(v37) - v37;
          v4 += v40;
          v3 += v39;
          v23 = *v4;
          if (*v4)
          {
            if (*v3)
              continue;
            goto LABEL_71;
          }
        }
        else
        {
          v33 = *v4;
          if (*v4)
          {
            v27 = 0;
            v28 = 0;
            if (*v3)
              v23 = 0;
            else
              v23 = v33;
            goto LABEL_75;
          }
        }
        break;
      }
LABEL_107:
      v27 = 0;
      v28 = 0;
      if (*v3)
        v23 = -*v3;
      else
        v23 = v30;
      goto LABEL_75;
    }
LABEL_71:
    v27 = 0;
    v28 = 0;
    goto LABEL_75;
  }
  if (!*v9)
  {
    v23 = 0;
    v12 = 0;
    v11 = 0;
    goto LABEL_71;
  }
  v10 = 0;
  v34 = 0;
  v35 = 0;
  v11 = 0;
  v12 = 0;
  while (1)
  {
    v13 = v9[v10 + 1];
    if (!v10 || (v9[52] & 1) == 0)
    {
      free(v12);
      v12 = __collate_substitute(v4, v10, (uint64_t)v6);
      free(v11);
      if (v12)
        v11 = __collate_substitute(v3, v10, (uint64_t)v6);
      else
        v11 = 0;
    }
    v14 = v12 ? v12 : v4;
    v36 = v11;
    if ((v13 & 2) != 0)
    {
      v14 = __collate_wcsdup(v14);
      v15 = &v14[wcslen(v14) - 1];
      if (v14 < v15)
      {
        v16 = v14 + 1;
        do
        {
          v17 = *(v16 - 1);
          *(v16 - 1) = *v15;
          *v15-- = v17;
          v18 = v16++ >= v15;
        }
        while (!v18);
      }
      if (v11)
        v19 = v11;
      else
        v19 = v3;
      v11 = __collate_wcsdup(v19);
      v20 = &v11[wcslen(v11) - 1];
      if (v11 < v20)
      {
        v21 = v11 + 1;
        do
        {
          v22 = *(v21 - 1);
          *(v21 - 1) = *v20;
          *v20-- = v22;
          v18 = v21++ >= v20;
        }
        while (!v18);
      }
      v34 = v11;
      v35 = v14;
    }
    else if (!v12)
    {
      v11 = v3;
    }
    v23 = *v14;
    if ((v13 & 4) == 0)
      break;
    while (v23)
    {
      if (!*v11)
        goto LABEL_73;
      v38 = 0;
      __collate_lookup_which(v14, &v40, (int *)&v38 + 1, v10, (uint64_t)v6);
      if (SHIDWORD(v38) <= 0)
      {
        if (v38 < 0)
          goto LABEL_72;
        HIDWORD(v38) = 0xFFFFFF;
      }
      __collate_lookup_which(v11, &v39, (int *)&v38, v10, (uint64_t)v6);
      v26 = v38;
      if ((int)v38 <= 0)
      {
        if ((v38 & 0x80000000) != 0)
        {
LABEL_72:
          *__error() = 22;
          v23 = -1;
          goto LABEL_73;
        }
        v26 = 0xFFFFFF;
        LODWORD(v38) = 0xFFFFFF;
      }
      v23 = HIDWORD(v38) - v26;
      if (HIDWORD(v38) != v26)
        goto LABEL_73;
      v14 += v40;
      v11 += v39;
      v23 = *v14;
    }
LABEL_55:
    if (*v11)
    {
      v23 = -*v11;
      goto LABEL_73;
    }
    ++v10;
    v11 = v36;
    if (v10 >= *v9)
    {
      v23 = 0;
      goto LABEL_74;
    }
  }
  if (!v23)
    goto LABEL_55;
  while (*v11)
  {
    v38 = 0;
    while (*v14)
    {
      __collate_lookup_which(v14, &v40, (int *)&v38 + 1, v10, (uint64_t)v6);
      v24 = HIDWORD(v38);
      if (SHIDWORD(v38) > 0)
        goto LABEL_45;
      if (v38 < 0)
        goto LABEL_72;
      v14 += v40;
    }
    v24 = 0;
LABEL_45:
    if (*v11)
    {
      do
      {
        __collate_lookup_which(v11, &v39, (int *)&v38, v10, (uint64_t)v6);
        v25 = v38;
        if ((int)v38 > 0)
          break;
        if ((v38 & 0x80000000) != 0)
          goto LABEL_72;
        v11 += v39;
      }
      while (*v11);
      v24 = HIDWORD(v38);
    }
    else
    {
      v25 = v38;
    }
    if (!v24 || !v25)
    {
      v23 = *v14;
      if (!*v14)
        goto LABEL_55;
      break;
    }
    v23 = v24 - v25;
    if (v24 != v25)
      break;
    v14 += v40;
    v11 += v39;
    v23 = *v14;
    if (!*v14)
      goto LABEL_55;
  }
LABEL_73:
  v11 = v36;
LABEL_74:
  v28 = v34;
  v27 = v35;
LABEL_75:
  v29 = *__error();
  free(v12);
  free(v11);
  free(v27);
  free(v28);
  *__error() = v29;
  return v23;
}

int wcscoll(const __int32 *a1, const __int32 *a2)
{
  uint64_t v2;
  _xlocale *v3;
  _xlocale *v4;

  v2 = __locale_key;
  v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3)
    v4 = v3;
  else
    v4 = (_xlocale *)&__global_locale;
  return wcscoll_l(a1, a2, v4);
}

__int32 *__cdecl wcscpy(__int32 *result, const __int32 *a2)
{
  uint64_t v2;
  __int32 v3;

  v2 = 0;
  do
  {
    v3 = a2[v2];
    result[v2++] = v3;
  }
  while (v3);
  return result;
}

size_t wcscspn(const __int32 *a1, const __int32 *a2)
{
  __int32 v2;
  const __int32 *v3;
  const __int32 *v4;
  __int32 v5;
  __int32 v6;
  const __int32 *v7;
  __int32 v8;
  __int32 v9;
  __int32 v10;

  v2 = *a1;
  v3 = a1;
  if (*a1)
  {
    v6 = *a2;
    v4 = a2 + 1;
    v5 = v6;
    v3 = a1;
    while (1)
    {
      v7 = v4;
      v8 = v5;
      if (v5)
        break;
LABEL_6:
      v10 = v3[1];
      ++v3;
      v2 = v10;
      if (!v10)
        return v3 - a1;
    }
    while (v2 != v8)
    {
      v9 = *v7++;
      v8 = v9;
      if (!v9)
        goto LABEL_6;
    }
  }
  return v3 - a1;
}

__int32 *__cdecl wcsdup(const __int32 *a1)
{
  size_t v2;
  __int32 *result;

  v2 = wcslen(a1) + 1;
  result = (__int32 *)malloc_type_malloc(4 * v2, 0x100004052888210uLL);
  if (result)
    return wmemcpy(result, a1, v2);
  return result;
}

size_t wcslcat(__int32 *a1, const __int32 *a2, size_t a3)
{
  BOOL v3;
  __int32 *v4;
  size_t v5;
  __int32 v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  __int32 v10;
  const __int32 *v11;
  __int32 v12;
  size_t v13;

  if (*a1)
    v3 = a3 == 0;
  else
    v3 = 1;
  v4 = a1;
  if (!v3)
  {
    v5 = a3 - 1;
    v4 = a1;
    do
    {
      v6 = v4[1];
      ++v4;
      if (v6)
        v7 = v5 == 0;
      else
        v7 = 1;
      --v5;
    }
    while (!v7);
  }
  v8 = v4 - a1;
  v9 = a3 - v8;
  if (a3 == v8)
  {
    v13 = wcslen(a2);
  }
  else
  {
    v10 = *a2;
    if (*a2)
    {
      v11 = a2;
      do
      {
        if (--v9)
          *v4++ = v10;
        else
          v9 = 1;
        v12 = v11[1];
        ++v11;
        v10 = v12;
      }
      while (v12);
    }
    else
    {
      v11 = a2;
    }
    *v4 = 0;
    v13 = v11 - a2;
  }
  return v13 + v8;
}

size_t wcslcpy(__int32 *a1, const __int32 *a2, size_t a3)
{
  const __int32 *v3;
  size_t v4;
  __int32 v5;

  if (a3 >= 2)
  {
    v4 = a3 - 1;
    v3 = a2;
    while (1)
    {
      v5 = *v3++;
      *a1 = v5;
      if (!v5)
        break;
      ++a1;
      if (!--v4)
        goto LABEL_6;
    }
  }
  else
  {
    v3 = a2;
LABEL_6:
    if (a3)
      *a1 = 0;
    while (*v3++)
      ;
  }
  return v3 - a2 - 1;
}

int wcsncasecmp_l(const __int32 *a1, const __int32 *a2, size_t n, locale_t a4)
{
  unsigned __int32 v6;
  size_t v8;
  const __int32 *v9;
  __darwin_ct_rune_t v10;
  uint64_t v11;
  __darwin_ct_rune_t v12;
  int result;
  unsigned __int32 v14;

  if (!n)
    return 0;
  v6 = *a1;
  if (!v6)
    return -*a2;
  v8 = n - 1;
  v9 = a1 + 1;
  while (1)
  {
    v10 = v6 > 0x7F ? ___tolower_l(v6, a4) : _DefaultRuneLocale.__maplower[v6];
    v11 = *(unsigned int *)a2;
    v12 = v11 > 0x7F ? ___tolower_l(v11, a4) : _DefaultRuneLocale.__maplower[v11];
    result = v10 - v12;
    if (result)
      break;
    if (!v8)
      return 0;
    ++a2;
    v14 = *v9++;
    v6 = v14;
    --v8;
    if (!v14)
      return -*a2;
  }
  return result;
}

int wcsncasecmp(const __int32 *a1, const __int32 *a2, size_t n)
{
  uint64_t v3;
  _xlocale *v4;
  _xlocale *v5;

  v3 = __locale_key;
  v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4)
    v5 = v4;
  else
    v5 = (_xlocale *)&__global_locale;
  return wcsncasecmp_l(a1, a2, n, v5);
}

__int32 *__cdecl wcsncat(__int32 *result, const __int32 *a2, size_t a3)
{
  __int32 *v3;
  __int32 v4;
  __int32 v5;
  BOOL v6;
  uint64_t v7;
  size_t v8;
  BOOL v10;

  v3 = result - 1;
  do
  {
    v4 = v3[1];
    ++v3;
  }
  while (v4);
  v5 = *a2;
  if (*a2)
    v6 = a3 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v7 = 0;
    v8 = a3 - 1;
    do
    {
      v3[v7] = v5;
      v5 = a2[v7 + 1];
      v10 = v8-- != 0;
      ++v7;
    }
    while (v5 && v10);
    v3 = (__int32 *)((char *)v3 + v7 * 4);
  }
  *v3 = 0;
  return result;
}

int wcsncmp(const __int32 *a1, const __int32 *a2, size_t a3)
{
  size_t i;
  __int32 v4;
  int v5;
  BOOL v6;

  if (!a3)
    return 0;
  for (i = a3 - 1; ; --i)
  {
    v4 = *a1;
    v5 = *a1 - *a2;
    if (*a1 != *a2)
      break;
    ++a2;
    ++a1;
    if (v4)
      v6 = i == 0;
    else
      v6 = 1;
    if (v6)
      return 0;
  }
  return v5;
}

__int32 *__cdecl wcsncpy(__int32 *a1, const __int32 *a2, size_t a3)
{
  size_t v5;
  __int32 *i;
  __int32 v7;

  if (a3)
  {
    v5 = 4 * a3 - 4;
    for (i = a1 + 1; ; ++i)
    {
      v7 = *a2;
      *(i - 1) = *a2;
      if (!v7)
        break;
      ++a2;
      v5 -= 4;
      if (!--a3)
        return a1;
    }
    if (a3 != 1)
      _platform_bzero();
  }
  return a1;
}

size_t wcsnlen(const __int32 *a1, size_t a2)
{
  size_t result;

  if (!a2)
    return 0;
  result = 0;
  while (a1[result])
  {
    if (a2 == ++result)
      return a2;
  }
  return result;
}

__int32 *__cdecl wcspbrk(__int32 *__s1, const __int32 *__s2)
{
  __int32 v2;
  const __int32 *v3;
  __int32 v4;
  __int32 v5;
  const __int32 *v6;
  __int32 v7;
  __int32 v8;
  __int32 v9;

  v2 = *__s1;
  if (!*__s1)
    return 0;
  v5 = *__s2;
  v3 = __s2 + 1;
  v4 = v5;
  while (1)
  {
    v6 = v3;
    v7 = v4;
    if (v4)
      break;
LABEL_6:
    v9 = __s1[1];
    ++__s1;
    v2 = v9;
    if (!v9)
      return 0;
  }
  while (v2 != v7)
  {
    v8 = *v6++;
    v7 = v8;
    if (!v8)
      goto LABEL_6;
  }
  return __s1;
}

