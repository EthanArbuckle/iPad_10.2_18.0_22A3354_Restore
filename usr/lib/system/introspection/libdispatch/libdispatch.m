void _os_eventlink_dispose(uint64_t a1)
{
  mach_port_name_t v2;
  mach_port_name_t v3;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    free(*(void **)(a1 + 16));
  v2 = *(_DWORD *)(a1 + 32);
  if (v2 + 1 >= 2)
    mach_port_deallocate(mach_task_self_, v2);
  v3 = *(_DWORD *)(a1 + 36);
  if (v3 + 1 >= 2)
    mach_port_deallocate(mach_task_self_, v3);
}

_DWORD *os_eventlink_create(const char *a1)
{
  _DWORD *v2;
  const char *v3;

  v2 = _os_object_alloc(OS_os_eventlink, 48);
  if (v2)
  {
    if (a1)
    {
      v3 = _dispatch_strdup_if_mutable(a1);
      if (v3 != a1)
        *((_QWORD *)v2 + 3) |= 1uLL;
      *((_QWORD *)v2 + 2) = v3;
    }
  }
  else
  {
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 12;
  }
  return v2;
}

uint64_t os_eventlink_activate(uint64_t a1)
{
  unint64_t *v1;
  int v2;
  uint64_t result;
  _DWORD *v4;
  unint64_t v5;
  char v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  mach_port_name_t name[4];

  v1 = (unint64_t *)(a1 + 32);
  if ((*(_DWORD *)(a1 + 32) + 1) > 1)
    return 0;
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    v4 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    result = 89;
LABEL_28:
    *v4 = result;
    return result;
  }
  v10 = 0u;
  *(_OWORD *)name = 0u;
  v9 = 0u;
  v2 = mach_eventlink_create(mach_task_self_, 1, name);
  result = 0xFFFFFFFFLL;
  if (v2 > 13)
  {
    if (v2 > 36)
    {
      if (v2 != 37)
      {
        if (v2 != 49)
          return result;
        result = 60;
        goto LABEL_27;
      }
    }
    else
    {
      if (v2 == 14)
      {
        result = 53;
        goto LABEL_27;
      }
      if (v2 != 15)
        return result;
    }
    result = 89;
LABEL_27:
    v4 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    goto LABEL_28;
  }
  if (v2)
  {
    if (v2 == 4)
    {
      result = 22;
    }
    else
    {
      if (v2 != 13)
        return result;
      result = 37;
    }
    goto LABEL_27;
  }
  v5 = *(_QWORD *)name;
  while (!__ldxr(v1))
  {
    if (!__stxr(v5, v1))
    {
      v7 = 1;
      goto LABEL_25;
    }
  }
  v7 = 0;
  __clrex();
LABEL_25:
  if ((v7 & 1) != 0)
  {
    result = 0;
    goto LABEL_27;
  }
  if ((v5 - 1) > 0xFFFFFFFD)
  {
    v8 = HIDWORD(v5);
  }
  else
  {
    mach_port_deallocate(mach_task_self_, v5);
    LODWORD(v8) = name[1];
  }
  if ((v8 - 1) <= 0xFFFFFFFD)
    mach_port_deallocate(mach_task_self_, v8);
  return 22;
}

uint64_t os_eventlink_extract_remote_port(uint64_t a1, unsigned int *a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t result;
  _DWORD *v5;

  if (!*(_DWORD *)(a1 + 32))
  {
LABEL_9:
    v5 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    result = 22;
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) == 0)
  {
    v2 = (unsigned int *)(a1 + 36);
    do
      v3 = __ldxr(v2);
    while (__stxr(0, v2));
    if (v3 - 1 < 0xFFFFFFFE)
    {
      result = 0;
      *a2 = v3;
      return result;
    }
    goto LABEL_9;
  }
  v5 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  result = 89;
LABEL_10:
  *v5 = result;
  return result;
}

_DWORD *os_eventlink_create_with_port(const char *a1, mach_port_name_t a2)
{
  _DWORD *v4;
  const char *v5;

  v4 = _os_object_alloc(OS_os_eventlink, 48);
  if (v4)
  {
    if (a1)
    {
      v5 = _dispatch_strdup_if_mutable(a1);
      if (v5 != a1)
        *((_QWORD *)v4 + 3) |= 1uLL;
      *((_QWORD *)v4 + 2) = v5;
    }
    if (mach_port_mod_refs(mach_task_self_, a2, 0, 1))
      os_eventlink_create_with_port_cold_1();
    if (v4[8])
      os_eventlink_create_with_port_cold_1();
    v4[8] = a2;
  }
  else
  {
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 12;
  }
  return v4;
}

_DWORD *os_eventlink_create_remote_with_eventlink(const char *a1, uint64_t a2)
{
  int v3;
  mach_port_name_t v5;
  _DWORD *v6;
  mach_port_name_t v7;

  v7 = 0;
  v3 = os_eventlink_extract_remote_port(a2, &v7);
  if (v3)
  {
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = v3;
    return 0;
  }
  else
  {
    v5 = v7;
    v6 = os_eventlink_create_with_port(a1, v7);
    mach_port_mod_refs(mach_task_self_, v5, 0, -1);
    return v6;
  }
}

uint64_t os_eventlink_associate(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t StatusReg;
  int v4;

  if (!*(_DWORD *)(a1 + 32))
  {
    result = 22;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_25:
    **(_DWORD **)(StatusReg + 8) = result;
    return result;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    result = 89;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_25;
  }
  if (a2 != 1)
    _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v4 = mach_eventlink_associate();
  result = 0xFFFFFFFFLL;
  if (v4 <= 13)
  {
    if (v4)
    {
      if (v4 == 4)
      {
        result = 22;
      }
      else
      {
        if (v4 != 13)
          return result;
        result = 37;
      }
    }
    else
    {
      result = 0;
    }
    goto LABEL_24;
  }
  if (v4 > 36)
  {
    if (v4 != 37)
    {
      if (v4 != 49)
        return result;
      result = 60;
      goto LABEL_24;
    }
    goto LABEL_20;
  }
  if (v4 == 14)
  {
    result = 53;
    goto LABEL_24;
  }
  if (v4 == 15)
  {
LABEL_20:
    result = 89;
LABEL_24:
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_25;
  }
  return result;
}

uint64_t os_eventlink_disassociate(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t result;
  _DWORD *v4;

  if (*(_DWORD *)(a1 + 32))
  {
    if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      return 0;
    v1 = mach_eventlink_disassociate();
    v2 = v1;
    if (v1 <= 13)
    {
      switch(v1)
      {
        case 0:
          result = 0;
          goto LABEL_20;
        case 4:
          result = 22;
          goto LABEL_20;
        case 13:
          result = 37;
          goto LABEL_20;
      }
    }
    else if (v1 > 36)
    {
      result = 0;
      if (v2 == 37)
        return result;
      if (v2 == 49)
      {
        result = 60;
        goto LABEL_20;
      }
    }
    else
    {
      if (v1 == 14)
      {
        result = 53;
        goto LABEL_20;
      }
      if (v1 == 15)
      {
        result = 89;
LABEL_20:
        v4 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        goto LABEL_21;
      }
    }
    return 0xFFFFFFFFLL;
  }
  v4 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  result = 22;
LABEL_21:
  *v4 = result;
  return result;
}

uint64_t os_eventlink_wait_until(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;

  if (a2 != 32)
    a3 = 0;
  v8 = mach_absolute_time() + a3;
  return os_eventlink_wait_until_internal(a1, a2, v8, a4);
}

uint64_t os_eventlink_wait_until_internal(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t result;
  unint64_t StatusReg;

  if (a2 != 32)
    os_eventlink_create_with_port_cold_1();
  if (!*(_DWORD *)(a1 + 32))
  {
    result = 22;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_11;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    result = 89;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_11;
  }
  v6 = *(_QWORD *)(a1 + 40);
  v7 = mach_eventlink_wait_until();
  v8 = v7;
  if (a4 && !v7)
  {
    *a4 = *(_QWORD *)(a1 + 40) - v6;
LABEL_7:
    result = 0;
LABEL_8:
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_11:
    **(_DWORD **)(StatusReg + 8) = result;
    return result;
  }
  result = 0xFFFFFFFFLL;
  if (v8 <= 13)
  {
    switch(v8)
    {
      case 0:
        goto LABEL_7;
      case 4:
        result = 22;
        goto LABEL_8;
      case 13:
        result = 37;
        goto LABEL_8;
    }
  }
  else if (v8 > 36)
  {
    if (v8 == 37)
    {
LABEL_26:
      result = 89;
      goto LABEL_8;
    }
    if (v8 == 49)
    {
      result = 60;
      goto LABEL_8;
    }
  }
  else
  {
    if (v8 == 14)
    {
      result = 53;
      goto LABEL_8;
    }
    if (v8 == 15)
    {
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
        os_eventlink_create_with_port_cold_1();
      goto LABEL_26;
    }
  }
  return result;
}

uint64_t os_eventlink_wait(uint64_t a1, _QWORD *a2)
{
  return os_eventlink_wait_until_internal(a1, 32, 0, a2);
}

uint64_t os_eventlink_signal(uint64_t a1)
{
  int v1;
  uint64_t result;
  unint64_t StatusReg;

  if (!*(_DWORD *)(a1 + 32))
  {
    result = 22;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_22:
    **(_DWORD **)(StatusReg + 8) = result;
    return result;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    result = 89;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_22;
  }
  v1 = mach_eventlink_signal();
  result = 0xFFFFFFFFLL;
  if (v1 <= 13)
  {
    if (v1)
    {
      if (v1 == 4)
      {
        result = 22;
      }
      else
      {
        if (v1 != 13)
          return result;
        result = 37;
      }
    }
    else
    {
      result = 0;
    }
    goto LABEL_21;
  }
  if (v1 > 36)
  {
    if (v1 != 37)
    {
      if (v1 != 49)
        return result;
      result = 60;
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  if (v1 == 14)
  {
    result = 53;
    goto LABEL_21;
  }
  if (v1 == 15)
  {
LABEL_17:
    result = 89;
LABEL_21:
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_22;
  }
  return result;
}

uint64_t os_eventlink_signal_and_wait(uint64_t a1, _QWORD *a2)
{
  return os_eventlink_signal_and_wait_until_internal(a1, 32, 0, a2);
}

uint64_t os_eventlink_signal_and_wait_until_internal(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t result;
  unint64_t StatusReg;

  if (a2 != 32)
    os_eventlink_create_with_port_cold_1();
  if (!*(_DWORD *)(a1 + 32))
  {
    result = 22;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_11;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    result = 89;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_11;
  }
  v6 = *(_QWORD *)(a1 + 40);
  v7 = mach_eventlink_signal_wait_until();
  v8 = v7;
  if (a4 && !v7)
  {
    *a4 = *(_QWORD *)(a1 + 40) - v6;
LABEL_7:
    result = 0;
LABEL_8:
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_11:
    **(_DWORD **)(StatusReg + 8) = result;
    return result;
  }
  result = 0xFFFFFFFFLL;
  if (v8 <= 13)
  {
    switch(v8)
    {
      case 0:
        goto LABEL_7;
      case 4:
        result = 22;
        goto LABEL_8;
      case 13:
        result = 37;
        goto LABEL_8;
    }
  }
  else if (v8 > 36)
  {
    if (v8 == 37)
    {
LABEL_26:
      result = 89;
      goto LABEL_8;
    }
    if (v8 == 49)
    {
      result = 60;
      goto LABEL_8;
    }
  }
  else
  {
    if (v8 == 14)
    {
      result = 53;
      goto LABEL_8;
    }
    if (v8 == 15)
    {
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
        os_eventlink_create_with_port_cold_1();
      goto LABEL_26;
    }
  }
  return result;
}

uint64_t os_eventlink_signal_and_wait_until(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;

  if (a2 != 32)
    a3 = 0;
  v8 = mach_absolute_time() + a3;
  return os_eventlink_signal_and_wait_until_internal(a1, a2, v8, a4);
}

uint64_t os_eventlink_cancel(uint64_t result)
{
  unint64_t *v1;
  unint64_t v2;
  uint64_t v3;

  v1 = (unint64_t *)(result + 24);
  if ((*(_BYTE *)(result + 24) & 2) == 0)
  {
    do
      v2 = __ldxr(v1);
    while (__stxr(v2 | 2, v1));
    v3 = *(unsigned int *)(result + 32);
    if ((v3 - 1) <= 0xFFFFFFFD)
    {
      if (mach_port_mod_refs(mach_task_self_, v3, 0, 1))
        os_eventlink_create_with_port_cold_1();
      return mach_eventlink_destroy(v3);
    }
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0()
{
  return _os_assert_log(0);
}

void _os_workgroup_xref_dispose(uint64_t a1)
{
  void (**v1)(_QWORD);

  v1 = *(void (***)(_QWORD))(a1 + 48);
  if (v1)
  {
    v1[1](*v1);
    free(v1);
  }
}

uint64_t _os_workgroup_interval_xref_dispose(uint64_t result)
{
  if ((*(_QWORD *)(result + 24) & 8) != 0)
    _os_workgroup_interval_xref_dispose_cold_1();
  return result;
}

void _os_workgroup_dispose(uint64_t a1)
{
  uint64_t v2;
  mach_port_name_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_DWORD *)(a1 + 40);
  if (!v3)
    goto LABEL_6;
  if (mach_port_mod_refs(mach_task_self_, v3, 0, -1))
  {
    _os_assumes_log(0);
    if ((v2 & 1) == 0)
      goto LABEL_6;
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_6;
  }
  if (work_interval_destroy(*(_QWORD *)(a1 + 32)))
    _os_assumes_log(0);
LABEL_6:
  if ((v2 & 4) != 0)
    free(*(void **)(a1 + 16));
}

uint64_t _os_workgroup_debug(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, "wg[%p] = {xref = %d, ref = %d, name = %s}", (const void *)a1, *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 8), *(const char **)(a1 + 16));
}

uint64_t _os_workgroup_interval_dispose(uint64_t a1)
{
  return work_interval_instance_free(*(_QWORD *)(a1 + 72));
}

uint64_t _os_workgroup_tsd_cleanup(uint64_t result)
{
  char v1[512];

  if (result)
    _os_workgroup_tsd_cleanup_cold_1(v1, result);
  return result;
}

void _os_workgroup_join_token_tsd_cleanup(_QWORD *a1, const char *a2)
{
  if (a1)
  {
    if (a1[1])
      os_eventlink_create_with_port_cold_1();
    _os_workgroup_leave_update_wg(a1[2], a2);
    free(a1);
  }
}

void *_os_workgroup_leave_update_wg(uint64_t a1, const char *a2)
{
  unint64_t StatusReg;
  unsigned int *v3;
  unsigned int v4;
  void *result;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(_QWORD *)(StatusReg + 928) != a1)
    os_eventlink_create_with_port_cold_1();
  v3 = (unsigned int *)(a1 + 60);
  do
    v4 = __ldxr(v3);
  while (__stxr(v4 - 1, v3));
  if (!v4)
    _os_workgroup_leave_update_wg_cold_1();
  result = *(void **)(StatusReg + 928);
  *(_QWORD *)(StatusReg + 928) = 0;
  if (result)
    return _os_object_release_internal(result, a2);
  return result;
}

uint64_t _workgroup_init()
{
  return pthread_install_workgroup_functions_np(&_os_workgroup_pthread_functions);
}

uint64_t _os_workgroup_get_backing_workinterval(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 40);
  return result;
}

uint64_t os_workgroup_interval_data_set_flags(_DWORD *a1, unsigned int a2)
{
  uint64_t result;

  if (!a1)
    return 22;
  result = 22;
  if (a2 <= 1 && *a1 == 1386695757)
  {
    result = 0;
    a1[1] = a2;
  }
  return result;
}

uint64_t os_workgroup_interval_data_set_telemetry(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2 == 1 && a4 == 40)
  {
    result = 0;
    *(_DWORD *)(a1 + 16) = 2621441;
    *(_QWORD *)(a1 + 8) = a3;
  }
  else
  {
    result = 22;
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
  }
  return result;
}

uint64_t os_workgroup_attr_set_interval_type(uint64_t a1, int a2)
{
  BOOL v3;
  uint64_t result;

  if (!a1)
    return 22;
  v3 = *(_DWORD *)a1 == 799564740 || *(_DWORD *)a1 == 799564724;
  if (!v3 || (a2 - 1) > 9)
    return 22;
  result = 0;
  *(_WORD *)(a1 + 8) = a2;
  return result;
}

uint64_t os_workgroup_attr_set_flags(_DWORD *a1, int a2)
{
  uint64_t result;

  if (!a1)
    return 22;
  if (*a1 != 799564740 && *a1 != 799564724)
    return 22;
  result = 0;
  a1[1] = a2;
  return result;
}

uint64_t os_workgroup_attr_set_telemetry_flavor(uint64_t a1, int a2)
{
  BOOL v3;
  uint64_t result;

  if (!a1)
    return 22;
  v3 = *(_DWORD *)a1 == 799564740 || *(_DWORD *)a1 == 799564724;
  if (!v3 || a2 != 1)
    return 22;
  result = 0;
  *(_WORD *)(a1 + 10) = 1;
  return result;
}

void *os_workgroup_interval_copy_current_4AudioToolbox()
{
  unsigned __int16 *v0;

  v0 = *(unsigned __int16 **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 928);
  if (v0 && v0[28] - 3 <= 1)
    return os_retain(v0);
  else
    return 0;
}

_DWORD *os_workgroup_create(const char *a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  BOOL v6;
  _DWORD *v7;
  int *v8;
  int v9;
  uint64_t work_interval;
  uint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  if (a2)
  {
    if (*(_DWORD *)a2 != 799564740 && *(_DWORD *)a2 != 799564724)
      goto LABEL_17;
    v4 = a2[1];
    v14 = *a2;
    v15 = v4;
    v5 = a2[3];
    v16 = a2[2];
    v17 = v5;
    v6 = (_DWORD)v14 == 799564724 || (_DWORD)v14 == 799564740;
    if (!v6 || (LODWORD(v14) = 2015762650, WORD4(v14)))
    {
LABEL_17:
      v7 = 0;
      v8 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      v9 = 22;
LABEL_20:
      *v8 = v9;
      return v7;
    }
  }
  else
  {
    v14 = _os_workgroup_attr_default;
    v15 = unk_3FD40;
    v16 = xmmword_3FD50;
    v17 = unk_3FD60;
  }
  if ((BYTE4(v14) & 2) == 0 || WORD5(v14))
  {
    v7 = 0;
    v8 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    v9 = 45;
    goto LABEL_20;
  }
  v13 = 0;
  work_interval = _os_workgroup_create_work_interval((uint64_t)&v14, (uint64_t)&v13);
  if (!work_interval)
    return 0;
  v12 = work_interval;
  v7 = _os_object_alloc(OS_os_workgroup, 64);
  *((_QWORD *)v7 + 4) = v12;
  v7[10] = v13;
  *((_QWORD *)v7 + 3) = 1;
  *((_WORD *)v7 + 28) = WORD4(v14);
  _os_workgroup_set_name((uint64_t)v7, a1);
  return v7;
}

uint64_t _os_workgroup_create_work_interval(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  int v10;
  uint64_t v11;

  v4 = _wg_type_to_wi_flags(*(unsigned __int16 *)(a1 + 8));
  if ((*(_DWORD *)(a1 + 4) & 4) != 0)
    v5 = 1;
  else
    v5 = 3;
  v6 = v5 | v4 | ((*(_DWORD *)(a1 + 12) & 1) << 7);
  if (*(_WORD *)(a1 + 10))
    v7 = v6 | 0x100;
  else
    v7 = v6;
  v11 = 0;
  v8 = work_interval_create(&v11, v7);
  result = 0;
  if (!v8)
  {
    v10 = work_interval_copy_port(v11, a2);
    result = v11;
    if (v10 < 0)
    {
      work_interval_destroy(v11);
      return 0;
    }
  }
  return result;
}

void _os_workgroup_set_name(uint64_t a1, const char *a2)
{
  const char *v2;
  const char *v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  _BYTE v8[32];

  v2 = a2;
  if (a2)
  {
    v4 = _dispatch_strdup_if_mutable(a2);
    if (v4 != v2)
    {
      *(_QWORD *)(a1 + 24) |= 4uLL;
      v2 = v4;
    }
  }
  *(_QWORD *)(a1 + 16) = v2;
  v5 = *(_DWORD *)(a1 + 40);
  if (v5)
    v6 = (*(_QWORD *)(a1 + 24) & 1) == 0;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 == -1)
      _os_workgroup_set_name_cold_1();
    if (v2
      && __strlcpy_chk(v8, v2, 32, 32)
      && __work_interval_ctl(10, *(unsigned int *)(a1 + 40), v8, 32) == -1)
    {
      v7 = **(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if ((_DWORD)v7)
        _dispatch_bug(534, v7);
    }
  }
}

_DWORD *os_workgroup_interval_create(const char *a1, int a2, __int128 *a3)
{
  __int128 v6;
  __int128 v7;
  int v8;
  int v9;
  _DWORD *v10;
  int *v11;
  int v12;
  uint64_t work_interval;
  uint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  if (a3)
  {
    if (*(_DWORD *)a3 != 799564740 && *(_DWORD *)a3 != 799564724)
      goto LABEL_22;
    v6 = a3[1];
    v17 = *a3;
    v18 = v6;
    v7 = a3[3];
    v19 = a3[2];
    v20 = v7;
    if ((_DWORD)v17 == 799564724)
    {
      v9 = DWORD1(v17);
      if (!DWORD1(v17))
        v9 = 2;
      DWORD1(v17) = v9;
      if (WORD4(v17) <= 1u)
        v8 = 1;
      else
        v8 = WORD4(v17);
      WORD4(v17) = v8;
    }
    else
    {
      if ((_DWORD)v17 != 799564740)
        goto LABEL_22;
      v8 = WORD4(v17);
    }
    LODWORD(v17) = 2015762650;
    if ((v8 - 1) >= 0xA)
    {
LABEL_22:
      v10 = 0;
      v11 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      v12 = 22;
      goto LABEL_23;
    }
  }
  else
  {
    v17 = _os_workgroup_interval_attr_default;
    v18 = unk_3FD80;
    v19 = xmmword_3FD90;
    v20 = unk_3FDA0;
    LOWORD(v8) = 1;
  }
  if ((BYTE4(v17) & 4) != 0)
    goto LABEL_22;
  if ((BYTE4(v17) & 2) == 0)
  {
    v10 = 0;
    v11 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    v12 = 45;
LABEL_23:
    *v11 = v12;
    return v10;
  }
  v16 = 0;
  work_interval = _os_workgroup_create_work_interval((uint64_t)&v17, (uint64_t)&v16);
  if (!work_interval)
    return 0;
  v15 = work_interval;
  v10 = _os_object_alloc(OS_os_workgroup_interval, 80);
  *((_QWORD *)v10 + 4) = v15;
  v10[10] = v16;
  v10[16] = a2;
  *((_QWORD *)v10 + 9) = work_interval_instance_alloc(v15);
  v10[17] = 0;
  *((_WORD *)v10 + 28) = v8;
  *((_QWORD *)v10 + 3) = 1;
  *((_WORD *)v10 + 22) = WORD5(v17);
  _os_workgroup_set_name((uint64_t)v10, a1);
  return v10;
}

_DWORD *os_workgroup_create_with_workload_id(const char *a1, char *a2, __int128 *a3)
{
  __int128 v6;
  __int128 v7;
  int v8;
  int v9;
  _DWORD *v10;
  unint64_t StatusReg;
  int *v12;
  int v13;
  uint64_t work_interval;
  uint64_t v15;
  const char *v16;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  if (a3)
  {
    if (*(_DWORD *)a3 != 799564740 && *(_DWORD *)a3 != 799564724)
      goto LABEL_32;
    v6 = a3[1];
    v19 = *a3;
    v20 = v6;
    v7 = a3[3];
    v21 = a3[2];
    v22 = v7;
    if ((_DWORD)v19 != 799564740)
    {
      if ((_DWORD)v19 != 799564724)
      {
LABEL_32:
        os_workgroup_create_with_workload_id_cold_2();
        return 0;
      }
      v8 = DWORD1(v19);
      if (!DWORD1(v19))
        v8 = 2;
      DWORD1(v19) = v8;
    }
    LODWORD(v19) = 2015762650;
  }
  else
  {
    v19 = _os_workgroup_with_workload_id_attr_default;
    v20 = unk_3FDC0;
    v21 = xmmword_3FDD0;
    v22 = unk_3FDE0;
  }
  LOWORD(v18) = 0;
  v9 = _os_workgroup_lookup_type_from_workload_id(a2, (unsigned int *)((unint64_t)&v19 | 0xC), &v18);
  if (v9)
  {
    if (!WORD4(v19) || WORD4(v19) == (unsigned __int16)v18)
    {
      WORD4(v19) = v9;
    }
    else if (v9 != WORD4(v19))
    {
      _dispatch_log("BUG IN CLIENT of %s: Mismatched workload ID and attribute interval type: %s vs %hd", "os_workgroup_create_with_workload_id", a2, WORD4(v19));
      v10 = 0;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_31:
      v12 = *(int **)(StatusReg + 8);
      v13 = 22;
      goto LABEL_24;
    }
  }
  if (DWORD1(v19) != 2)
  {
    os_workgroup_create_with_workload_id_cold_1(SDWORD1(v19));
    return 0;
  }
  if (WORD4(v19))
  {
    _dispatch_log("BUG IN CLIENT of %s: Non-default workload type: %s (%hd)", "os_workgroup_create_with_workload_id", a2, WORD4(v19));
    v10 = 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_31;
  }
  if (!WORD5(v19))
  {
    v18 = 0;
    work_interval = _os_workgroup_create_work_interval((uint64_t)&v19, (uint64_t)&v18);
    if (work_interval)
    {
      v15 = work_interval;
      v10 = _os_object_alloc(OS_os_workgroup, 64);
      *((_QWORD *)v10 + 4) = v15;
      v10[10] = v18;
      *((_QWORD *)v10 + 3) = 1;
      *((_WORD *)v10 + 28) = 0;
      if (!_os_workgroup_set_work_interval_workload_id((uint64_t)v10, a2, SHIDWORD(v19)))
      {
        _os_workgroup_set_name((uint64_t)v10, a1);
        return v10;
      }
      _os_object_release(v10, v16);
    }
    return 0;
  }
  v10 = 0;
  v12 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  v13 = 45;
LABEL_24:
  *v12 = v13;
  return v10;
}

uint64_t _os_workgroup_set_work_interval_workload_id(uint64_t a1, const char *a2, int a3)
{
  unsigned int v4;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _DWORD v12[2];
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[64];

  v4 = *(_DWORD *)(a1 + 40);
  if (v4 + 1 <= 1)
    _os_workgroup_set_work_interval_workload_id_cold_1(v4);
  if (!a3)
    return 0;
  v6 = a3 & 0xFFFFFFFE;
  __strlcpy_chk(v16, a2, 64, 64);
  v7 = _wg_type_to_wi_flags(*(unsigned __int16 *)(a1 + 56));
  v12[0] = v6;
  v12[1] = v7;
  v14 = 0;
  v15 = 0;
  v13 = v16;
  v8 = __work_interval_ctl(11, *(unsigned int *)(a1 + 40), v12, 32);
  if ((_DWORD)v8)
  {
    if ((_DWORD)v8 != -1)
    {
      v10 = 0;
      v9 = v8;
      goto LABEL_12;
    }
    v9 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if ((_DWORD)v9)
    {
      _dispatch_bug(576, (int)v9);
      v10 = 0;
      LODWORD(v8) = v9;
      goto LABEL_12;
    }
  }
  v10 = v12[0];
  if ((v12[0] & 1) != 0)
  {
    LODWORD(v8) = 0;
    v9 = 37;
LABEL_12:
    _dispatch_log("BUG IN CLIENT of %s: Unable to set kernel workload ID: %s (0x%x) -> %d (0x%x)", "_os_workgroup_set_work_interval_workload_id", a2, v6, v8, v10);
    return v9;
  }
  v9 = 0;
  *(_QWORD *)(a1 + 24) |= 0x10uLL;
  return v9;
}

_DWORD *os_workgroup_interval_create_with_workload_id(const char *a1, char *a2, int a3, __int128 *a4)
{
  __int128 v8;
  __int128 v9;
  int v10;
  __int16 v11;
  int v12;
  _DWORD *v13;
  unint64_t StatusReg;
  __int16 v15;
  uint64_t work_interval;
  uint64_t v17;
  const char *v18;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  if (a4)
  {
    if (*(_DWORD *)a4 != 799564740 && *(_DWORD *)a4 != 799564724)
      goto LABEL_33;
    v8 = a4[1];
    v21 = *a4;
    v22 = v8;
    v9 = a4[3];
    v23 = a4[2];
    v24 = v9;
    if ((_DWORD)v21 != 799564740)
    {
      if ((_DWORD)v21 != 799564724)
      {
LABEL_33:
        os_workgroup_interval_create_with_workload_id_cold_2();
        return 0;
      }
      v10 = DWORD1(v21);
      if (!DWORD1(v21))
        v10 = 2;
      DWORD1(v21) = v10;
      v11 = WORD4(v21);
      if (WORD4(v21) <= 1u)
        v11 = 1;
      WORD4(v21) = v11;
    }
    LODWORD(v21) = 2015762650;
  }
  else
  {
    v21 = _os_workgroup_interval_attr_default;
    v22 = unk_3FD80;
    v23 = xmmword_3FD90;
    v24 = unk_3FDA0;
  }
  LOWORD(v20) = 0;
  v12 = _os_workgroup_lookup_type_from_workload_id(a2, (unsigned int *)((unint64_t)&v21 | 0xC), &v20);
  if (v12)
  {
    if (WORD4(v21) == 1 || WORD4(v21) == (unsigned __int16)v20)
    {
      WORD4(v21) = v12;
    }
    else if (v12 != WORD4(v21))
    {
      _dispatch_log("BUG IN CLIENT of %s: Mismatched workload ID and attribute interval type: %s vs %hd", "os_workgroup_interval_create_with_workload_id", a2, WORD4(v21));
      v13 = 0;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_31:
      **(_DWORD **)(StatusReg + 8) = 22;
      return v13;
    }
  }
  if (DWORD1(v21) == 2)
  {
    v15 = WORD4(v21);
    if (WORD4(v21) - 1 >= 0xA)
    {
      _dispatch_log("BUG IN CLIENT of %s: Invalid workload interval type: %s (%hd)", "os_workgroup_interval_create_with_workload_id", a2, WORD4(v21));
      v13 = 0;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      goto LABEL_31;
    }
    v20 = 0;
    work_interval = _os_workgroup_create_work_interval((uint64_t)&v21, (uint64_t)&v20);
    if (work_interval)
    {
      v17 = work_interval;
      v13 = _os_object_alloc(OS_os_workgroup_interval, 80);
      *((_QWORD *)v13 + 4) = v17;
      v13[10] = v20;
      v13[16] = a3;
      *((_QWORD *)v13 + 9) = work_interval_instance_alloc(v17);
      v13[17] = 0;
      *((_WORD *)v13 + 28) = v15;
      *((_QWORD *)v13 + 3) = 1;
      *((_WORD *)v13 + 22) = WORD5(v21);
      if (!_os_workgroup_set_work_interval_workload_id((uint64_t)v13, a2, SHIDWORD(v21)))
      {
        _os_workgroup_set_name((uint64_t)v13, a1);
        return v13;
      }
      _os_object_release(v13, v18);
    }
  }
  else
  {
    os_workgroup_interval_create_with_workload_id_cold_1(SDWORD1(v21));
  }
  return 0;
}

int os_workgroup_join(os_workgroup_t wg, os_workgroup_join_token_t token_out)
{
  unint64_t StatusReg;
  int *v3;
  int result;
  Class isa;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(_QWORD *)(StatusReg + 928))
  {
    v3 = *(int **)(StatusReg + 8);
    result = 37;
LABEL_9:
    *v3 = result;
    return result;
  }
  isa = wg[3].super.super.isa;
  if ((isa & 2) != 0)
  {
    v3 = *(int **)(StatusReg + 8);
    result = 22;
    goto LABEL_9;
  }
  if (LODWORD(wg[5].super.super.isa))
  {
    if ((isa & 1) != 0)
    {
      if (work_interval_join(wg[4].super.super.isa))
        return **(_DWORD **)(StatusReg + 8);
    }
    else if (work_interval_join_port())
    {
      return **(_DWORD **)(StatusReg + 8);
    }
  }
  _os_workgroup_join_update_wg((uint64_t)wg, (uint64_t)token_out);
  return 0;
}

void os_workgroup_leave(os_workgroup_t wg, os_workgroup_join_token_t token)
{
  int v2;
  unint64_t StatusReg;
  OS_os_workgroup *v5;

  if (token->sig != 1298094680)
    os_workgroup_leave_cold_5();
  v2 = *(_DWORD *)token->opaque;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (v2 != *(_DWORD *)(StatusReg + 24))
    os_workgroup_leave_cold_4();
  v5 = *(OS_os_workgroup **)(StatusReg + 928);
  if (v5 != wg || *(_QWORD *)&token->opaque[12] != (_QWORD)v5)
    os_workgroup_leave_cold_3();
  if (*(_QWORD *)&token->opaque[4])
    os_eventlink_create_with_port_cold_1();
  if (LODWORD(wg[5].super.super.isa) && work_interval_leave())
    os_workgroup_leave_cold_1();
  _os_workgroup_leave_update_wg((uint64_t)wg, (const char *)token);
}

os_workgroup_parallel_t os_workgroup_parallel_create(const char *name, os_workgroup_attr_t attr)
{
  uint32_t sig;
  int v5;
  OS_os_workgroup *v6;
  int *v7;
  int v8;

  if (!attr)
    goto LABEL_19;
  sig = attr->sig;
  if (attr->sig != 799564724 && sig != 799564740)
    goto LABEL_15;
  v5 = *(_DWORD *)attr->opaque;
  if (sig != 799564740)
  {
    if (sig != 799564724)
      goto LABEL_15;
    if (!v5)
      LOBYTE(v5) = 6;
    if (!*(_WORD *)&attr->opaque[4])
    {
LABEL_13:
      if ((v5 & 2) == 0 || *(_WORD *)&attr->opaque[6])
      {
        v6 = 0;
        v7 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        v8 = 45;
        goto LABEL_18;
      }
LABEL_19:
      v6 = (OS_os_workgroup *)_os_object_alloc(OS_os_workgroup_parallel, 64);
      v6[4].super.super.isa = 0;
      v6[3].super.super.isa = (Class)(&dword_0 + 1);
      LOWORD(v6[7].super.super.isa) = 64;
      _os_workgroup_set_name((uint64_t)v6, name);
      return v6;
    }
  }
  if (*(_WORD *)&attr->opaque[4] == 64)
    goto LABEL_13;
LABEL_15:
  v6 = 0;
  v7 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  v8 = 22;
LABEL_18:
  *v7 = v8;
  return v6;
}

int os_workgroup_copy_port(os_workgroup_t wg, mach_port_t *mach_port_out)
{
  mach_port_name_t isa;
  int result;

  if (!wg)
    os_eventlink_create_with_port_cold_1();
  if (!mach_port_out)
    os_eventlink_create_with_port_cold_1();
  *mach_port_out = 0;
  if (((uint64_t)wg[3].super.super.isa & 2) != 0)
    return 22;
  isa = (mach_port_name_t)wg[5].super.super.isa;
  if (!isa)
    return 22;
  result = mach_port_mod_refs(mach_task_self_, isa, 0, 1);
  if (result)
  {
    os_workgroup_copy_port_cold_3();
    return 12;
  }
  else
  {
    *mach_port_out = (mach_port_t)wg[5].super.super.isa;
  }
  return result;
}

os_workgroup_t os_workgroup_create_with_port(const char *name, mach_port_t mach_port)
{
  _DWORD *v4;
  __int16 v5;
  unsigned int v7;
  char v8[512];

  if (mach_port - 1 >= 0xFFFFFFFE)
  {
    v4 = 0;
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
  }
  else
  {
    v7 = 0;
    if (!work_interval_get_flags_from_port(*(_QWORD *)&mach_port, &v7))
    {
      v5 = 0;
      switch(v7 >> 28)
      {
        case 0u:
          break;
        case 1u:
          if ((v7 & 4) != 0)
            v5 = 3;
          else
            v5 = 4;
          break;
        case 2u:
          v5 = 5;
          break;
        case 3u:
          v5 = 2;
          break;
        case 4u:
          v5 = 7;
          break;
        case 5u:
          v5 = 8;
          break;
        case 6u:
          v5 = 9;
          break;
        case 7u:
          v5 = 10;
          break;
        default:
          os_workgroup_create_with_port_cold_1(v8, v7);
      }
      if (!mach_port_mod_refs(mach_task_self_, mach_port, 0, 1))
      {
        v4 = _os_object_alloc(OS_os_workgroup, 64);
        v4[10] = mach_port;
        *((_WORD *)v4 + 28) = v5;
        _os_workgroup_set_name((uint64_t)v4, name);
        return (os_workgroup_t)v4;
      }
      os_workgroup_create_with_port_cold_2();
    }
    return 0;
  }
  return (os_workgroup_t)v4;
}

_DWORD *os_workgroup_create_with_workload_id_and_port(const char *a1, char *a2, uint64_t a3)
{
  mach_port_name_t v3;
  unsigned int v6;
  unsigned __int16 v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  int v12;
  const char *v13;
  unsigned int v15;
  unsigned int v16[128];

  v3 = a3;
  if ((a3 - 1) >= 0xFFFFFFFE)
  {
    os_workgroup_create_with_workload_id_and_port_cold_3(a3);
    return 0;
  }
  v15 = 0;
  if (work_interval_get_flags_from_port(a3, &v15))
  {
    _dispatch_log("BUG IN CLIENT of %s: Invalid mach port 0x%x", "os_workgroup_create_with_workload_id_and_port", v3);
    return 0;
  }
  v6 = v15;
  v7 = 0;
  switch(v15 >> 28)
  {
    case 0u:
      break;
    case 1u:
      if ((v15 & 4) != 0)
        v7 = 3;
      else
        v7 = 4;
      break;
    case 2u:
      v7 = 5;
      break;
    case 3u:
      v7 = 2;
      break;
    case 4u:
      v7 = 7;
      break;
    case 5u:
      v7 = 8;
      break;
    case 6u:
      v7 = 9;
      break;
    case 7u:
      v7 = 10;
      break;
    default:
      os_workgroup_create_with_port_cold_1((char *)v16, v15);
  }
  v16[0] = 0;
  LOWORD(v15) = 0;
  v8 = _os_workgroup_lookup_type_from_workload_id(a2, v16, &v15);
  if (v8)
  {
    v9 = v8;
    v10 = v6 & 0xF0000000;
    if ((_wg_type_to_wi_flags((unsigned __int16)v15) & 0x70000000) != v10
      && (_wg_type_to_wi_flags(v9) & 0x70000000) != v10)
    {
      _dispatch_log("BUG IN CLIENT of %s: Mismatched workload ID and port interval type: %s vs %hd", "os_workgroup_create_with_workload_id_and_port", a2, v7);
      v11 = 0;
      **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
      return v11;
    }
  }
  if (mach_port_mod_refs(mach_task_self_, v3, 0, 1))
  {
    os_workgroup_create_with_workload_id_and_port_cold_2(v3);
    return 0;
  }
  v11 = _os_object_alloc(OS_os_workgroup, 64);
  v11[10] = v3;
  *((_WORD *)v11 + 28) = v7;
  v12 = _os_workgroup_set_work_interval_workload_id((uint64_t)v11, a2, v16[0]);
  if (v12 && v12 != 37)
  {
    _os_object_release(v11, v13);
    return 0;
  }
  _os_workgroup_set_name((uint64_t)v11, a1);
  return v11;
}

os_workgroup_t os_workgroup_create_with_workgroup(const char *name, os_workgroup_t wg)
{
  OS_os_workgroup *v4;
  mach_port_name_t isa;

  if (((uint64_t)wg[3].super.super.isa & 2) != 0)
  {
    v4 = 0;
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
    return v4;
  }
  v4 = (OS_os_workgroup *)_os_object_alloc(OS_os_workgroup, 64);
  LOWORD(v4[7].super.super.isa) = wg[7].super.super.isa;
  isa = (mach_port_name_t)wg[5].super.super.isa;
  if (!isa)
  {
LABEL_7:
    _os_workgroup_set_name((uint64_t)v4, name);
    return v4;
  }
  if (!mach_port_mod_refs(mach_task_self_, isa, 0, 1))
  {
    LODWORD(v4[5].super.super.isa) = wg[5].super.super.isa;
    goto LABEL_7;
  }
  free(v4);
  return 0;
}

_DWORD *os_workgroup_create_with_workload_id_and_workgroup(const char *a1, char *a2, uint64_t a3)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  _DWORD *v10;
  mach_port_name_t v11;
  kern_return_t v12;
  int v13;
  int v14;
  const char *v15;
  unsigned int v17;
  unsigned __int16 v18;

  if ((*(_QWORD *)(a3 + 24) & 2) != 0)
  {
    os_workgroup_create_with_workload_id_and_workgroup_cold_1();
    return 0;
  }
  v17 = 0;
  v6 = _wg_type_to_wi_flags(*(unsigned __int16 *)(a3 + 56));
  v18 = 0;
  v7 = _os_workgroup_lookup_type_from_workload_id(a2, &v17, &v18);
  if (v7)
  {
    v8 = v7;
    v9 = v6 & 0x70000000;
    if ((_wg_type_to_wi_flags(v18) & 0x70000000) != v9 && (_wg_type_to_wi_flags(v8) & 0x70000000) != v9)
    {
      _dispatch_log("BUG IN CLIENT of %s: Mismatched workload ID and workgroup interval type: %s vs %hd", "os_workgroup_create_with_workload_id_and_workgroup", a2, *(unsigned __int16 *)(a3 + 56));
      v10 = 0;
      **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
      return v10;
    }
  }
  v10 = _os_object_alloc(OS_os_workgroup, 64);
  *((_WORD *)v10 + 28) = *(_WORD *)(a3 + 56);
  v11 = *(_DWORD *)(a3 + 40);
  if (!v11)
    goto LABEL_9;
  v12 = mach_port_mod_refs(mach_task_self_, v11, 0, 1);
  v13 = *(_DWORD *)(a3 + 40);
  if (v12)
  {
    _dispatch_log("BUG IN CLIENT of %s: Invalid workgroup port 0x%x", "os_workgroup_create_with_workload_id_and_workgroup", v13);
    free(v10);
    return 0;
  }
  v10[10] = v13;
  v14 = _os_workgroup_set_work_interval_workload_id((uint64_t)v10, a2, v17);
  if (v14 && v14 != 37)
  {
    _os_object_release(v10, v15);
    return 0;
  }
LABEL_9:
  _os_workgroup_set_name((uint64_t)v10, a1);
  return v10;
}

int os_workgroup_max_parallel_threads(os_workgroup_t wg, os_workgroup_mpt_attr_t attr)
{
  if (!wg)
    os_eventlink_create_with_port_cold_1();
  if (LOWORD(wg[7].super.super.isa) - 3 > 1)
    return pthread_qos_max_parallelism(33, 0);
  else
    return pthread_time_constraint_max_parallelism(0, attr);
}

void *_os_workgroup_join_update_wg(uint64_t a1, uint64_t a2)
{
  unint64_t StatusReg;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  void *result;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(_QWORD *)(StatusReg + 928))
    _os_workgroup_join_update_wg_cold_1();
  v4 = (unsigned int *)(a1 + 60);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v6 = *(_QWORD *)(StatusReg + 24);
  *(_DWORD *)a2 = 1298094680;
  *(_DWORD *)(a2 + 4) = v6;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = a1;
  if (a1)
    _os_object_retain_internal(a1);
  result = *(void **)(StatusReg + 928);
  *(_QWORD *)(StatusReg + 928) = a1;
  if (result)
    return _os_object_release_internal(result, (const char *)a2);
  return result;
}

int os_workgroup_set_working_arena(os_workgroup_t wg, void *arena, uint32_t max_workers, os_workgroup_working_arena_destructor_t destructor)
{
  _DWORD *v8;
  unsigned __int128 *v9;
  unsigned __int128 v10;
  int result;
  int *v12;

  v8 = malloc_type_calloc(4 * max_workers + 24, 1uLL, 0xB26F0EFuLL);
  if (v8)
  {
    v8[4] = max_workers;
    v9 = (unsigned __int128 *)&wg[6];
    *(_QWORD *)v8 = arena;
    *((_QWORD *)v8 + 1) = destructor;
    do
    {
      v10 = __ldxp(v9);
      if (HIDWORD(*((_QWORD *)&v10 + 1)))
      {
        __clrex();
        free(v8);
        v12 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        result = 16;
        goto LABEL_9;
      }
    }
    while (__stxp((unint64_t)v8, v9));
    if ((_QWORD)v10)
    {
      (*(void (**)(_QWORD))(v10 + 8))(*(_QWORD *)v10);
      free((void *)v10);
    }
    return 0;
  }
  else
  {
    v12 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    result = 12;
LABEL_9:
    *v12 = result;
  }
  return result;
}

void *__cdecl os_workgroup_get_working_arena(os_workgroup_t wg, os_workgroup_index *index_out)
{
  unint64_t StatusReg;
  Class isa;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(os_workgroup_t *)(StatusReg + 928) != wg)
    os_workgroup_get_working_arena_cold_3();
  isa = wg[6].super.super.isa;
  if (!isa)
    return 0;
  if (index_out)
  {
    v4 = *((unsigned int *)isa + 4);
    if (!(_DWORD)v4)
      os_workgroup_get_working_arena_cold_1();
    v5 = 0;
    while (*((_DWORD *)isa + v5 + 6) != *(_DWORD *)(StatusReg + 24))
    {
      if (v4 == ++v5)
      {
        v6 = (unsigned int *)((char *)isa + 20);
        do
          LODWORD(v5) = __ldxr(v6);
        while (__stxr(v5 + 1, v6));
        if (v5 >= v4)
          os_workgroup_get_working_arena_cold_2();
        *((_DWORD *)isa + v5 + 6) = *(_QWORD *)(StatusReg + 24);
        break;
      }
    }
    *index_out = v5;
  }
  return *(void **)isa;
}

void os_workgroup_cancel(os_workgroup_t wg)
{
  unint64_t *v1;
  unint64_t v2;

  v1 = (unint64_t *)&wg[3];
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 | 2, v1));
}

BOOL os_workgroup_testcancel(os_workgroup_t wg)
{
  return ((unint64_t)wg[3].super.super.isa >> 1) & 1;
}

int os_workgroup_interval_start(os_workgroup_interval_t wg, uint64_t start, uint64_t deadline, os_workgroup_interval_data_t data)
{
  unint64_t StatusReg;
  int *v9;
  int v10;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  Class isa;
  unint64_t v16;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(os_workgroup_interval_t *)(StatusReg + 928) != wg)
    os_workgroup_get_working_arena_cold_3();
  if (data && *(_WORD *)&data->opaque[12] == 1 && WORD2(wg[5].super.super.isa) != 1
    || deadline < start
    || LODWORD(wg[8].super.super.isa) == 32 && mach_absolute_time() < start)
  {
    v9 = *(int **)(StatusReg + 8);
    v10 = 22;
LABEL_7:
    *v9 = v10;
    return v10;
  }
  if (!os_unfair_lock_trylock((os_unfair_lock_t)&wg[8].super.super.isa + 1))
  {
    v9 = *(int **)(StatusReg + 8);
    v10 = 16;
    goto LABEL_7;
  }
  if (data && data->sig == 1386695757)
    v12 = *(_DWORD *)data->opaque & 1;
  else
    v12 = 0;
  v13 = (unint64_t *)&wg[3];
  while (1)
  {
    v14 = __ldxr(v13);
    if ((v14 & 0xA) != 0)
    {
      v10 = 22;
LABEL_31:
      __clrex();
      os_unfair_lock_unlock((os_unfair_lock_t)&wg[8].super.super.isa + 1);
      v9 = *(int **)(StatusReg + 8);
      goto LABEL_7;
    }
    if ((v14 & 1) == 0)
    {
      v10 = 1;
      goto LABEL_31;
    }
    if (v12 && (v14 & 0x10) == 0)
      break;
    if (!__stxr(v14 | 8, v13))
      goto LABEL_23;
  }
  **(_DWORD **)(StatusReg + 8) = 22;
  __clrex();
LABEL_23:
  isa = wg[9].super.super.isa;
  work_interval_instance_clear(isa);
  work_interval_instance_set_start(isa, start);
  work_interval_instance_set_deadline(isa, deadline);
  work_interval_instance_set_complexity(isa, v12);
  v10 = work_interval_instance_start(isa);
  if (v10)
  {
    do
      v16 = __ldxr(v13);
    while (__stxr(v16 & 0xFFFFFFFFFFFFFFF7, v13));
  }
  else if (data && *(_WORD *)&data->opaque[12] == 1)
  {
    _os_workgroup_interval_copy_telemetry_data((uint64_t)wg, (uint64_t)data);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&wg[8].super.super.isa + 1);
  return v10;
}

double _os_workgroup_interval_copy_telemetry_data(uint64_t a1, uint64_t a2)
{
  double result;
  uint64_t v4;
  _OWORD v5[3];

  memset(v5, 0, 40);
  work_interval_instance_get_telemetry_data(*(_QWORD *)(a1 + 72), v5, 40);
  if (*(_WORD *)(a2 + 16) == 1)
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)v4 = *(_QWORD *)&v5[0];
    *(_OWORD *)(v4 + 24) = *(_OWORD *)((char *)&v5[1] + 8);
    result = *((double *)v5 + 1);
    *(_OWORD *)(v4 + 8) = *(_OWORD *)((char *)v5 + 8);
  }
  return result;
}

int os_workgroup_interval_update(os_workgroup_interval_t wg, uint64_t deadline, os_workgroup_interval_data_t data)
{
  unint64_t StatusReg;
  os_workgroup_interval_data_t v4;
  os_unfair_lock_s *v7;
  uint64_t v8;
  Class isa;
  _DWORD *v10;
  Class v12;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(os_workgroup_interval_t *)(StatusReg + 928) != wg)
    os_workgroup_get_working_arena_cold_3();
  v4 = data;
  if (!data)
  {
    v7 = (os_unfair_lock_s *)&wg[8].super.super.isa + 1;
    if (os_unfair_lock_trylock((os_unfair_lock_t)&wg[8].super.super.isa + 1))
      goto LABEL_9;
LABEL_12:
    v10 = *(_DWORD **)(StatusReg + 8);
    LODWORD(v4) = 16;
    goto LABEL_18;
  }
  if (*(_WORD *)&data->opaque[12] == 1 && WORD2(wg[5].super.super.isa) != 1)
    goto LABEL_17;
  v7 = (os_unfair_lock_s *)&wg[8].super.super.isa + 1;
  if (!os_unfair_lock_trylock((os_unfair_lock_t)&wg[8].super.super.isa + 1))
    goto LABEL_12;
  if (v4->sig == 1386695757)
  {
    v8 = *(_DWORD *)v4->opaque & 1;
    goto LABEL_10;
  }
LABEL_9:
  v8 = 0;
LABEL_10:
  isa = wg[3].super.super.isa;
  if ((isa & 1) == 0)
  {
    os_unfair_lock_unlock(v7);
    v10 = *(_DWORD **)(StatusReg + 8);
    LODWORD(v4) = 1;
LABEL_18:
    *v10 = (_DWORD)v4;
    return (int)v4;
  }
  if (v8 && (isa & 0x10) == 0 || (isa & 8) == 0)
  {
    os_unfair_lock_unlock(v7);
LABEL_17:
    v10 = *(_DWORD **)(StatusReg + 8);
    LODWORD(v4) = 22;
    goto LABEL_18;
  }
  v12 = wg[9].super.super.isa;
  work_interval_instance_set_deadline(v12, deadline);
  work_interval_instance_set_complexity(v12, v8);
  if (work_interval_instance_update(v12))
  {
    LODWORD(v4) = **(_DWORD **)(StatusReg + 8);
  }
  else if (v4)
  {
    if (*(_WORD *)&v4->opaque[12] == 1)
      _os_workgroup_interval_copy_telemetry_data((uint64_t)wg, (uint64_t)v4);
    LODWORD(v4) = 0;
  }
  os_unfair_lock_unlock(v7);
  return (int)v4;
}

int os_workgroup_interval_finish(os_workgroup_interval_t wg, os_workgroup_interval_data_t data)
{
  unint64_t StatusReg;
  os_workgroup_interval_data_t v3;
  os_unfair_lock_s *v5;
  uint64_t v6;
  Class isa;
  _DWORD *v8;
  Class v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(os_workgroup_interval_t *)(StatusReg + 928) != wg)
    os_workgroup_get_working_arena_cold_3();
  v3 = data;
  if (!data)
  {
    v5 = (os_unfair_lock_s *)&wg[8].super.super.isa + 1;
    if (os_unfair_lock_trylock((os_unfair_lock_t)&wg[8].super.super.isa + 1))
      goto LABEL_9;
LABEL_12:
    v8 = *(_DWORD **)(StatusReg + 8);
    LODWORD(v3) = 16;
    goto LABEL_18;
  }
  if (*(_WORD *)&data->opaque[12] == 1 && WORD2(wg[5].super.super.isa) != 1)
    goto LABEL_17;
  v5 = (os_unfair_lock_s *)&wg[8].super.super.isa + 1;
  if (!os_unfair_lock_trylock((os_unfair_lock_t)&wg[8].super.super.isa + 1))
    goto LABEL_12;
  if (v3->sig == 1386695757)
  {
    v6 = *(_DWORD *)v3->opaque & 1;
    goto LABEL_10;
  }
LABEL_9:
  v6 = 0;
LABEL_10:
  isa = wg[3].super.super.isa;
  if ((isa & 1) == 0)
  {
    os_unfair_lock_unlock(v5);
    v8 = *(_DWORD **)(StatusReg + 8);
    LODWORD(v3) = 1;
LABEL_18:
    *v8 = (_DWORD)v3;
    return (int)v3;
  }
  if (v6 && (isa & 0x10) == 0 || (isa & 8) == 0)
  {
    os_unfair_lock_unlock(v5);
LABEL_17:
    v8 = *(_DWORD **)(StatusReg + 8);
    LODWORD(v3) = 22;
    goto LABEL_18;
  }
  v10 = wg[9].super.super.isa;
  if (LODWORD(wg[8].super.super.isa) == 32)
    v11 = mach_absolute_time();
  else
    v11 = 0;
  work_interval_instance_set_finish(v10, v11);
  work_interval_instance_set_complexity(v10, v6);
  if (work_interval_instance_finish(v10))
  {
    LODWORD(v3) = **(_DWORD **)(StatusReg + 8);
  }
  else
  {
    v12 = (unint64_t *)&wg[3];
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 & 0xFFFFFFFFFFFFFFF7, v12));
    if (v3)
    {
      if (*(_WORD *)&v3->opaque[12] == 1)
        _os_workgroup_interval_copy_telemetry_data((uint64_t)wg, (uint64_t)v3);
      LODWORD(v3) = 0;
    }
  }
  os_unfair_lock_unlock(v5);
  return (int)v3;
}

uint64_t _os_workgroup_pthread_create_with_workgroup(pthread_t *a1, void *a2, const pthread_attr_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  const char *v11;
  uint64_t v12;

  v10 = _dispatch_calloc(1uLL, 0x18uLL);
  _os_object_retain_internal((uint64_t)a2);
  *v10 = a2;
  v10[1] = a4;
  v10[2] = a5;
  v12 = pthread_create(a1, a3, (void *(__cdecl *)(void *))_os_workgroup_pthread_start, v10);
  if ((_DWORD)v12)
  {
    _os_object_release_internal(a2, v11);
    free(v10);
  }
  return v12;
}

uint64_t _os_workgroup_pthread_start(OS_os_workgroup **a1)
{
  OS_os_workgroup *v1;
  OS_os_workgroup *v2;
  OS_os_workgroup *v3;
  int v4;
  uint64_t v5;
  const char *v6;
  os_workgroup_join_token_opaque_s v8;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  free(a1);
  memset(&v8, 0, sizeof(v8));
  v4 = os_workgroup_join(v1, &v8);
  if (v4)
    _os_workgroup_pthread_start_cold_1(v4);
  v5 = ((uint64_t (*)(OS_os_workgroup *))v2)(v3);
  os_workgroup_leave(v1, &v8);
  _os_object_release_internal(v1, v6);
  return v5;
}

uint64_t _wg_type_to_wi_flags(unsigned int a1)
{
  if (a1 >= 0xB)
    _wg_type_to_wi_flags_cold_1();
  return dword_3FDF0[(__int16)a1];
}

uint64_t _os_workgroup_lookup_type_from_workload_id(char *a1, unsigned int *a2, _WORD *a3)
{
  uint64_t v6;
  char v7;
  char v8;
  unsigned int v9;
  uint64_t result;
  char **v11;

  if (!a1)
    _os_workgroup_lookup_type_from_workload_id_cold_1();
  v6 = 0;
  v7 = 1;
  while (1)
  {
    v8 = v7;
    if (!strcasecmp(a1, (&_os_workgroup_workload_id_table)[2 * v6]))
      break;
    v7 = 0;
    v6 = 1;
    if ((v8 & 1) == 0)
    {
      v9 = 0;
      result = 0;
      goto LABEL_7;
    }
  }
  v11 = &(&_os_workgroup_workload_id_table)[2 * v6];
  result = *((unsigned __int16 *)v11 + 4);
  v9 = *((_DWORD *)v11 + 3) & 0xFFFFFFFA | 1;
LABEL_7:
  if (v9 <= 1)
    v9 = 1;
  *a2 = v9;
  *a3 = result;
  return result;
}

void OUTLINED_FUNCTION_0_0(uint64_t a1@<X8>)
{
  **(_DWORD **)(a1 + 8) = 22;
}

void OUTLINED_FUNCTION_3(uint64_t a1)
{
  _dispatch_bug(a1, 0);
}

uint64_t OUTLINED_FUNCTION_4()
{
  uint64_t v0;

  return _os_crash(v0);
}

uint64_t OUTLINED_FUNCTION_5(char *a1, uint64_t a2, const char *a3)
{
  return snprintf(a1, 0x200uLL, a3);
}

uint64_t dispatch_atfork_prepare()
{
  uint64_t v0;

  v0 = _voucher_atfork_prepare();
  return _os_object_atfork_prepare(v0);
}

uint64_t dispatch_atfork_parent()
{
  _os_object_atfork_parent();
  return _voucher_atfork_parent();
}

void dispatch_atfork_child()
{
  _os_object_atfork_child();
  _voucher_atfork_child();
  _dispatch_event_loop_atfork_child();
  if ((_dispatch_unsafe_fork & 1) != 0)
    _dispatch_child_of_unsafe_fork = 1;
  _dispatch_queue_atfork_child();
  _dispatch_unsafe_fork = 0;
}

uint64_t _dispatch_sigmask()
{
  uint64_t v0;
  uint64_t v1;
  sigset_t v3;

  v3 = -67116761;
  v0 = pthread_sigmask(1, &v3, 0);
  v1 = v0;
  if ((_DWORD)v0)
    _dispatch_bug(108, (int)v0);
  return v1;
}

uint64_t _dispatch_is_multithreaded()
{
  return _dispatch_unsafe_fork & 1;
}

uint64_t _dispatch_is_fork_of_multithreaded_parent()
{
  return _dispatch_child_of_unsafe_fork;
}

dispatch_queue_t dispatch_get_current_queue(void)
{
  NSObject *v0;

  v0 = *(NSObject **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160);
  if (v0)
    return v0;
  else
    return (dispatch_queue_t)&off_653C0;
}

uint64_t *_dispatch_queue_attr_to_info(uint64_t *result)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;

  if (result)
  {
    v1 = (char *)result - (char *)&_dispatch_queue_attr_concurrent;
    if (result < (uint64_t *)&_dispatch_queue_attr_concurrent || result >= (uint64_t *)&__block_descriptor_tmp)
      _dispatch_queue_attr_to_info_cold_1(result);
    v3 = (((unint64_t)(v1 >> 4) >> 6) * (unsigned __int128)0x2492492492492493uLL) >> 64;
    v4 = (((unint64_t)(v1 >> 4) >> 6) * (unsigned __int128)0xC30C30C30C30C31uLL) >> 64;
    return (uint64_t *)((((_DWORD)v1 << 15) & 0x100000 | (((v1 >> 4) & 1) << 21) | -(((v1 >> 4) << 6) & 0xF00) & 0xFF00 | (((unint64_t)(v1 >> 4) >> 6) - 7 * (_DWORD)v3) | ((v3 - 3 * ((v3 * (unsigned __int128)0x5555555555555556uLL) >> 64)) << 18) | ((v4 - 3 * ((v4 * (unsigned __int128)0x5555555555555556uLL) >> 64)) << 16)) ^ 0x100000);
  }
  return result;
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  unsigned __int8 v3;
  uint64_t *v6;
  unsigned int v7;
  unint64_t v8;
  int v9;

  if (qos_class <= QOS_CLASS_USER_INTERACTIVE)
  {
    v3 = relative_priority;
    if (((1 << qos_class) & 0x202220221) != 0
      && (relative_priority == 0 || relative_priority >= 0xFFFFFFF1))
    {
      v6 = _dispatch_queue_attr_to_info((uint64_t *)attr);
      HIDWORD(v8) = qos_class - 5;
      LODWORD(v8) = qos_class - 5;
      v7 = v8 >> 2;
      if (v7 > 7)
        v9 = 0;
      else
        v9 = dword_3FE84[v7];
      return (dispatch_queue_attr_t)_dispatch_queue_attr_from_info(v6 & 0x3F0000 | (v3 << 8) | v9);
    }
  }
  return attr;
}

__objc2_class **_dispatch_queue_attr_from_info(unint64_t a1)
{
  return &_dispatch_queue_attr_concurrent
       + 2
       * (((a1 >> 21) & 1 | (2
                           * ((32 * (7 * (3 * ((a1 >> 16) & 3) + ((a1 >> 18) & 3)) + a1)
                             + 2 * -((__int16)a1 >> 8)) & 0xFFFFFFFFFFFFFFFELL | (a1 >> 20) & 1))) ^ 2);
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  unsigned int v1;

  v1 = _dispatch_queue_attr_to_info((uint64_t *)attr);
  return (dispatch_queue_attr_t)_dispatch_queue_attr_from_info(v1 | 0x200000);
}

__objc2_class **dispatch_queue_attr_make_with_overcommit(uint64_t *a1, int a2)
{
  unsigned int v3;
  int v4;

  v3 = _dispatch_queue_attr_to_info(a1) & 0x3CFFFF;
  if (a2)
    v4 = 0x10000;
  else
    v4 = 0x20000;
  return _dispatch_queue_attr_from_info(v3 | v4);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  unint64_t v2;

  v2 = _dispatch_queue_attr_to_info((uint64_t *)attr) & 0x33FFFF | ((frequency & 3) << 18);
  return (dispatch_queue_attr_t)_dispatch_queue_attr_from_info(v2);
}

void _dispatch_object_no_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: do_invoke called";
  qword_61258 = v1;
  __break(1u);
}

void _dispatch_object_no_dispose(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: do_dispose called";
  qword_61258 = v1;
  __break(1u);
}

size_t _dispatch_object_missing_debug(int a1, char *__dst, size_t a3)
{
  return strlcpy(__dst, "missing do_debug vtable slot: ", a3);
}

void _dispatch_queue_no_activate(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: dq_activate called";
  qword_61258 = v1;
  __break(1u);
}

void _dispatch_data_destructor_free_block_invoke(id a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: free destructor called";
  __break(1u);
}

void _dispatch_data_destructor_none_block_invoke_2(id a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: none destructor called";
  __break(1u);
}

void _dispatch_data_destructor_vm_deallocate_block_invoke_3(id a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: vmdeallocate destructor called";
  __break(1u);
}

void _dispatch_data_destructor_inline_block_invoke_4(id a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: inline destructor called";
  __break(1u);
}

BOOL _dispatch_parse_BOOL(const char *a1)
{
  return !strcasecmp(a1, "YES") || !strcasecmp(a1, "Y") || !strcasecmp(a1, "TRUE") || atoi(a1) != 0;
}

BOOL _dispatch_getenv_BOOL(const char *a1, uint64_t a2)
{
  char *v3;

  v3 = getenv(a1);
  if (v3)
    return _dispatch_parse_BOOL(v3);
  else
    return a2;
}

uint64_t _dispatch_build_init()
{
  size_t v1;
  int v2[2];

  *(_QWORD *)v2 = 0x4100000001;
  v1 = 16;
  return sysctl(v2, 2u, &unk_61390, &v1, 0, 0);
}

uint64_t _dispatch_fault(uint64_t a1, char *__format, ...)
{
  uint64_t result;
  char __str[1024];
  va_list va;

  va_start(va, __format);
  result = vsnprintf(__str, 0x400uLL, __format, va);
  if ((_dispatch_mode & 1) != 0)
  {
    qword_61240 = (uint64_t)__str;
  }
  else if ((_dispatch_mode & 2) == 0)
  {
    return _dispatch_fault_cold_1(__str, a1);
  }
  return result;
}

uint64_t _dispatch_continuation_get_function_symbol(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((*a1 & 0x20) != 0)
  {
    v2 = a1[5];
    v3 = *(_QWORD *)(v2 + 32);
    if (v3 != 3512316172)
      _dispatch_continuation_get_function_symbol_cold_1(v3);
    v4 = *(_QWORD *)(v2 + 72);
    goto LABEL_7;
  }
  if ((*a1 & 0x10) != 0)
  {
    v4 = a1[5];
LABEL_7:
    v1 = (_QWORD *)(v4 + 16);
    return *v1;
  }
  v1 = a1 + 4;
  return *v1;
}

void _dispatch_debugv(unint64_t *a1, const char *a2, va_list a3)
{
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11[2048];

  if (a1)
  {
    v5 = *a1;
    if ((*a1 & 1) != 0
      || (v5 >= (unint64_t)OS_dispatch_object
        ? (v6 = v5 >= (unint64_t)OS_object)
        : (v6 = 1),
          v6))
    {
      v7 = _dispatch_objc_debug(a1, (uint64_t)v11, 2048);
    }
    else
    {
      v7 = (*(uint64_t (**)(void))(v5 + 56))();
    }
    v8 = v7 + 2;
    *(_WORD *)&v11[v7] = 8250;
    v11[v7 + 2] = 0;
  }
  else
  {
    v8 = __strlcpy_chk(v11, "NULL: ", 2048, 2048);
  }
  v9 = vsnprintf(&v11[v8], 2048 - v8, a2, a3);
  if (v8 + (unint64_t)(v9 & ~(v9 >> 31)) >= 0x7FF)
    v10 = 2047;
  else
    v10 = v8 + (v9 & ~(v9 >> 31));
  if (qword_61388 != -1)
    dispatch_once_f(&qword_61388, 0, (dispatch_function_t)_dispatch_logv_init);
  if ((_MergedGlobals & 1) == 0)
  {
    if (dispatch_logfile == -1)
      _simple_asl_log(5, "com.apple.libsystem.libdispatch");
    else
      _dispatch_log_file((uint64_t)v11, v10);
  }
}

uint64_t _dispatch_temporary_resource_shortage()
{
  return sleep_NOCANCEL(1);
}

void *_dispatch_calloc(size_t a1, size_t a2)
{
  size_t v2;
  size_t v3;
  void *result;

  v2 = a2;
  v3 = a1;
  while (1)
  {
    result = malloc_type_calloc(a1, a2, 0x1B54906DuLL);
    if (result)
      break;
    _dispatch_temporary_resource_shortage();
    a1 = v3;
    a2 = v2;
  }
  return result;
}

const char *_dispatch_strdup_if_mutable(const char *a1)
{
  const char *v1;
  size_t v2;
  void *v4;
  void *v5;

  v1 = a1;
  v2 = strlen(a1) + 1;
  if ((_dyld_is_memory_immutable(v1, v2) & 1) == 0)
  {
    v4 = malloc_type_malloc(v2, 0x129C783DuLL);
    if (v4)
    {
      v5 = v4;
      memcpy(v4, v1, v2);
      return (const char *)v5;
    }
    else
    {
      _dispatch_strdup_if_mutable_cold_1();
      return 0;
    }
  }
  return v1;
}

void *_dispatch_Block_copy(void *aBlock)
{
  void *result;

  if (!aBlock)
    _dispatch_Block_copy_cold_1();
  while (1)
  {
    result = _Block_copy(aBlock);
    if (result)
      break;
    _dispatch_temporary_resource_shortage();
  }
  return result;
}

void _dispatch_call_block_and_release(void (**a1)(void))
{
  a1[2]();
  _Block_release(a1);
}

uint64_t dispatch_mach_msg_get_context(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + ((*(unsigned int *)(a1 + 4) + 3) & 0x1FFFFFFFCLL);
  if (*(_DWORD *)(v1 + 4) < 0x3Cu)
    return 0;
  else
    return *(_QWORD *)(v1 + 52);
}

uint64_t _dispatch_wakeup_runloop_thread()
{
  return 0;
}

void _dispatch_mach_notify_port_destroyed(uint64_t a1, unsigned int a2)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: unexpected receipt of port-destroyed";
  qword_61258 = a2;
  __break(1u);
}

void _dispatch_mach_notify_no_senders(uint64_t a1, unsigned int a2)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: unexpected receipt of no-more-senders";
  qword_61258 = a2;
  __break(1u);
}

uint64_t _dispatch_mach_xpc_no_handle_message()
{
  return 0;
}

uint64_t _dispatch_mach_msg_context_no_async_reply_queue()
{
  return 0;
}

void _dispatch_mach_default_async_reply_handler()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: _dispatch_mach_default_async_reply_handler called";
  qword_61258 = (uint64_t)_dispatch_mach_xpc_hooks;
  __break(1u);
}

uint64_t _dispatch_mach_enable_sigterm()
{
  return 1;
}

const char *_dispatch_logv_init()
{
  const char *result;
  const char *v1;
  int v2;
  pid_t v3;
  int v4;
  const char *v5;
  const char *v6;
  pid_t v7;
  timeval __str[64];

  result = getenv("LIBDISPATCH_LOG");
  if (!result)
    goto LABEL_7;
  v1 = result;
  result = (const char *)strcmp(result, "YES");
  if (!(_DWORD)result)
    goto LABEL_7;
  result = (const char *)strcmp(v1, "NO");
  if (!(_DWORD)result)
  {
    _MergedGlobals = 1;
    return result;
  }
  result = (const char *)strcmp(v1, "syslog");
  if (!(_DWORD)result)
    goto LABEL_7;
  result = (const char *)strcmp(v1, "file");
  if ((_DWORD)result)
  {
    result = (const char *)strcmp(v1, "stderr");
    if ((_DWORD)result)
    {
LABEL_7:
      v2 = 0;
      goto LABEL_8;
    }
    dispatch_logfile = 2;
  }
  v2 = 1;
LABEL_8:
  if ((_MergedGlobals & 1) == 0)
  {
    result = (const char *)dispatch_logfile;
    if (dispatch_logfile != -1)
      v2 = 0;
    if (v2 == 1)
    {
      v3 = getpid();
      snprintf((char *)__str, 0x400uLL, "/var/tmp/libdispatch.%d.log", v3);
      result = (const char *)open_NOCANCEL(__str, 16777993);
      dispatch_logfile = (int)result;
    }
    if ((_DWORD)result != -1)
    {
      __str[0].tv_sec = 0;
      *(_QWORD *)&__str[0].tv_usec = 0;
      gettimeofday(__str, 0);
      v4 = dispatch_logfile;
      v5 = getprogname();
      if (v5)
        v6 = v5;
      else
        v6 = (const char *)&unk_416A6;
      v7 = getpid();
      return (const char *)dprintf(v4, "=== log file opened for %s[%u] at %ld.%06u ===\n", v6, v7, __str[0].tv_sec, __str[0].tv_usec);
    }
  }
  return result;
}

uint64_t _dispatch_log_file(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t StatusReg;
  uint64_t result;

  v3 = a2 + 1;
  *(_BYTE *)(a1 + a2) = 10;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
    result = write_NOCANCEL(dispatch_logfile, a1, v3);
  while (result == -1 && **(_DWORD **)(StatusReg + 8) == 4);
  return result;
}

uint64_t _dispatch_logv_file(char *__format, va_list a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t StatusReg;
  char __str[2048];

  result = vsnprintf(__str, 0x800uLL, __format, a2);
  if ((result & 0x80000000) == 0)
  {
    if (result >= 0x7FF)
      v3 = 2047;
    else
      v3 = result;
    v4 = v3 + 1;
    __str[v3] = 10;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
      result = write_NOCANCEL(dispatch_logfile, __str, v4);
    while (result == -1 && **(_DWORD **)(StatusReg + 8) == 4);
  }
  return result;
}

char *OUTLINED_FUNCTION_5_0()
{
  int v0;

  return strerror(v0);
}

uint64_t _os_object_retain_count(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 12);
  if (v1 == 0x7FFFFFFF)
    return -1;
  return v1;
}

uint64_t _os_object_retain_internal(uint64_t result)
{
  unsigned int *v1;
  int v2;

  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    v1 = (unsigned int *)(result + 8);
    do
      v2 = __ldxr(v1);
    while (__stxr(v2 + 1, v1));
    if (v2 <= 0)
    {
      qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
    }
  }
  return result;
}

uint64_t _os_object_retain_internal_n(uint64_t result, int a2)
{
  unsigned int *v2;
  int v3;

  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    v2 = (unsigned int *)(result + 8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + a2, v2));
    if (v3 <= 0)
    {
      qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
    }
  }
  return result;
}

void *_os_object_release_internal(void *a1, const char *a2)
{
  unsigned int *v2;
  int v3;

  if (*((_DWORD *)a1 + 2) != 0x7FFFFFFF)
  {
    v2 = (unsigned int *)((char *)a1 + 8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (v3 <= 1)
    {
      if (v3 == 1)
      {
        return _os_object_dispose(a1, a2);
      }
      else
      {
        qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
    }
  }
  return a1;
}

void *_os_object_release_internal_n(void *a1, const char *a2)
{
  unsigned int *v2;
  unsigned int v3;
  signed int v4;

  if (*((_DWORD *)a1 + 2) != 0x7FFFFFFF)
  {
    v2 = (unsigned int *)((char *)a1 + 8);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - (_DWORD)a2;
    }
    while (__stlxr(v4, v2));
    if (v4 <= 0)
    {
      if (v4 < 0)
      {
        qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
      else
      {
        return _os_object_dispose(a1, a2);
      }
    }
  }
  return a1;
}

uint64_t _os_object_retain(uint64_t result)
{
  unsigned int *v1;
  int v2;

  if (*(_DWORD *)(result + 12) != 0x7FFFFFFF)
  {
    v1 = (unsigned int *)(result + 12);
    do
      v2 = __ldxr(v1);
    while (__stxr(v2 + 1, v1));
    if (v2 <= 0)
    {
      qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
    }
  }
  return result;
}

uint64_t _os_object_retain_with_resurrect(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (*(_DWORD *)(result + 12) == 0x7FFFFFFF)
    goto LABEL_7;
  v1 = (unsigned int *)(result + 12);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  if ((v2 & 0x80000000) != 0)
  {
LABEL_7:
    qword_61228 = (uint64_t)"API MISUSE: Resurrection of an over-released object";
    __break(1u);
    return _os_object_retain_internal(result);
  }
  if (!v2)
    return _os_object_retain_internal(result);
  return result;
}

void *_os_object_release(void *a1, const char *a2)
{
  unsigned int *v2;
  int v3;

  if (*((_DWORD *)a1 + 3) != 0x7FFFFFFF)
  {
    v2 = (unsigned int *)((char *)a1 + 12);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (v3 <= 1)
    {
      if (v3 == 1)
      {
        return _os_object_xref_dispose(a1, a2);
      }
      else
      {
        qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
    }
  }
  return a1;
}

void *_os_object_release_without_xref_dispose(void *a1, const char *a2)
{
  unsigned int *v2;
  int v3;

  if (*((_DWORD *)a1 + 3) != 0x7FFFFFFF)
  {
    v2 = (unsigned int *)((char *)a1 + 12);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (v3 <= 1)
    {
      if (v3 == 1)
      {
        return _os_object_release_internal(a1, a2);
      }
      else
      {
        qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
    }
  }
  return a1;
}

uint64_t _os_object_retain_weak(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;
  uint64_t result;

  v1 = (unsigned int *)(a1 + 12);
  while (1)
  {
    v2 = __ldxr(v1);
    if (v2 == 0x7FFFFFFF)
    {
      result = 1;
      goto LABEL_10;
    }
    if (!v2)
      break;
    if ((v2 & 0x80000000) != 0)
      _os_object_retain_weak_cold_1();
    if (!__stxr(v2 + 1, v1))
      return 1;
  }
  result = 0;
LABEL_10:
  __clrex();
  return result;
}

BOOL _os_object_allows_weak_reference(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 12);
  if (v1 < 0)
    _os_object_allows_weak_reference_cold_1();
  return v1 != 0;
}

void dispatch_retain(dispatch_object_t object)
{
  Class isa;
  BOOL v2;

  isa = object->isa;
  if (((uint64_t)object->isa & 1) != 0
    || (isa >= (Class)OS_dispatch_object ? (v2 = isa >= (Class)OS_object) : (v2 = 1), v2))
  {
    _dispatch_objc_retain(object);
  }
  else
  {
    _os_object_retain((uint64_t)object);
  }
}

void dispatch_release(dispatch_object_t object)
{
  const char *v1;
  Class isa;
  BOOL v3;
  unsigned int *v4;
  int v5;

  isa = object->isa;
  if (((uint64_t)object->isa & 1) != 0
    || (isa >= (Class)OS_dispatch_object ? (v3 = isa >= (Class)OS_object) : (v3 = 1), v3))
  {
    _dispatch_objc_release(object);
  }
  else if (HIDWORD(object[1].isa) != 0x7FFFFFFF)
  {
    v4 = (unsigned int *)&object[1].isa + 1;
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (v5 <= 1)
    {
      if (v5 != 1)
        _os_object_allows_weak_reference_cold_1();
      atomic_load((unsigned int *)&object[1].isa + 1);
      _dispatch_xref_dispose((unint64_t *)object, v1);
    }
  }
}

void *_dispatch_xref_dispose(unint64_t *a1, const char *a2)
{
  uint64_t v3;

  if ((*(_QWORD *)(*a1 + 40) & 0xF0) == 0x10)
  {
    _dispatch_queue_xref_dispose((uint64_t)a1);
    v3 = *(_QWORD *)(*a1 + 40);
    if (v3 > 786)
    {
      if (v3 == 787)
      {
        if ((*((_WORD *)a1 + 58) & 0x10) != 0)
          *(_QWORD *)(a1[11] + 48) = 195952365;
      }
      else if (v3 == 395025)
      {
        _dispatch_runloop_queue_xref_dispose(a1);
      }
    }
    else if (v3 == 275)
    {
      _dispatch_source_xref_dispose((uint64_t)a1);
    }
    else if (v3 == 531)
    {
      _dispatch_channel_xref_dispose((uint64_t)a1);
    }
  }
  return _os_object_release_internal(a1, a2);
}

void _dispatch_dispose(uint64_t *a1)
{
  NSObject *v2;
  void (__cdecl *v3)(void *);
  void *v4;
  const char *v5;
  char v6;

  v2 = a1[3];
  v3 = (void (__cdecl *)(void *))_dispatch_object_finalizer(a1);
  v4 = (void *)a1[4];
  v6 = 1;
  if (a1[2] != -1985229329)
    _dispatch_dispose_cold_1(a1 + 2);
  if (v2 && v2[8].isa == (Class)((char *)&dword_14 + 2))
    v2 = &off_65340;
  (*(void (**)(uint64_t *, char *))(*a1 + 48))(a1, &v6);
  if (v6)
  {
    objc_destructInstance(a1);
    free(a1);
  }
  if (v3 && v4)
    dispatch_channel_async_f(v2, v4, v3);
  if (v2)
    _os_object_release_internal(v2, v5);
}

void *__cdecl dispatch_get_context(dispatch_object_t object)
{
  Class isa;

  isa = object->isa;
  if (((uint64_t)object->isa & 1) != 0)
    return (void *)_dispatch_objc_get_context();
  if (isa < (Class)OS_dispatch_object || isa >= (Class)OS_object)
    return (void *)_dispatch_objc_get_context();
  if ((*((_BYTE *)isa + 42) & 4) != 0)
    return 0;
  return object[4].isa;
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
  Class isa;
  BOOL v3;

  isa = object->isa;
  if (((uint64_t)object->isa & 1) != 0
    || (isa >= (Class)OS_dispatch_object ? (v3 = isa >= (Class)OS_object) : (v3 = 1), v3))
  {
    _dispatch_objc_set_context(object, (const char *)context);
  }
  else if ((*((_BYTE *)isa + 42) & 4) == 0)
  {
    object[4].isa = (Class)context;
  }
}

void dispatch_set_finalizer_f(dispatch_object_t object, dispatch_function_t finalizer)
{
  Class isa;
  BOOL v3;

  isa = object->isa;
  if (((uint64_t)object->isa & 1) != 0
    || (isa >= (Class)OS_dispatch_object ? (v3 = isa >= (Class)OS_object) : (v3 = 1), v3))
  {
    _dispatch_objc_set_finalizer_f(object, (const char *)finalizer);
  }
  else if ((*((_BYTE *)isa + 42) & 4) == 0)
  {
    _dispatch_object_set_finalizer(object, (uint64_t)finalizer);
  }
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
  Class isa;
  BOOL v5;
  uint64_t v6;
  dispatch_queue_t v7;
  unsigned int *v8;
  int v9;
  unint64_t *v10;
  unsigned int *v11;
  unsigned int *v12;
  int v13;

  isa = object->isa;
  if (((uint64_t)object->isa & 1) != 0
    || (isa >= (Class)OS_dispatch_object ? (v5 = isa >= (Class)OS_object) : (v5 = 1), v5))
  {
    _dispatch_objc_set_target_queue(object, (const char *)queue);
  }
  else if (LODWORD(object[1].isa) != 0x7FFFFFFF)
  {
    v6 = *((_QWORD *)isa + 5);
    if ((v6 & 0x30000) == 0)
    {
      if (queue && (HIBYTE(queue[10].isa) & 8) != 0 && v6 != 1 && (unint64_t)isa >= 0x1000)
      {
        if (*((_QWORD *)isa + 5) != 19 || !_dispatch_source_is_timer((uint64_t)object))
          dispatch_set_target_queue_cold_3((uint64_t)object);
        v6 = *((_QWORD *)object->isa + 5);
      }
      if ((v6 & 0xF0) == 0x10)
      {
        _dispatch_lane_set_target_queue((unint64_t *)object, (char *)queue);
      }
      else if (v6 == 4)
      {
        _dispatch_io_set_target_queue((uint64_t)object, (uint64_t)queue);
      }
      else
      {
        v7 = (dispatch_queue_t)&off_65340;
        if (queue)
          v7 = queue;
        if (LODWORD(v7[1].isa) != 0x7FFFFFFF)
        {
          v8 = (unsigned int *)&v7[1];
          do
            v9 = __ldxr(v8);
          while (__stxr(v9 + 1, v8));
          if (v9 <= 0)
            dispatch_set_target_queue_cold_2();
        }
        v10 = (unint64_t *)&object[3];
        do
          v11 = (unsigned int *)__ldxr(v10);
        while (__stlxr((unint64_t)v7, v10));
        if (v11)
        {
          if (v11[2] != 0x7FFFFFFF)
          {
            v12 = v11 + 2;
            do
              v13 = __ldxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (v13 <= 1)
            {
              if (v13 != 1)
                _os_object_allows_weak_reference_cold_1();
              _os_object_dispose(v11, (const char *)queue);
            }
          }
        }
      }
    }
  }
}

void dispatch_activate(dispatch_object_t object)
{
  int8x16_t v1;
  Class isa;
  BOOL v3;
  uint64_t v4;

  isa = object->isa;
  if (((uint64_t)object->isa & 1) != 0
    || (isa >= (Class)OS_dispatch_object ? (v3 = isa >= (Class)OS_object) : (v3 = 1), v3))
  {
    _dispatch_objc_activate();
  }
  else if (LODWORD(object[1].isa) != 0x7FFFFFFF)
  {
    v4 = *((unsigned __int8 *)isa + 40);
    if (v4 == 18)
    {
      _dispatch_workloop_activate((uint64_t)object, v1);
    }
    else if ((v4 & 0xF0) == 0x10)
    {
      _dispatch_lane_resume((uint64_t)object, 1);
    }
  }
}

void dispatch_suspend(dispatch_object_t object)
{
  Class isa;
  BOOL v3;
  uint64_t v4;

  isa = object->isa;
  if (((uint64_t)object->isa & 1) != 0
    || (isa >= (Class)OS_dispatch_object ? (v3 = isa >= (Class)OS_object) : (v3 = 1), v3))
  {
    _dispatch_objc_suspend(object);
  }
  else if (LODWORD(object[1].isa) != 0x7FFFFFFF)
  {
    v4 = *((_QWORD *)isa + 5);
    if ((v4 & 0x300F0) == 0x10)
    {
      if (v4 == 18 && _dispatch_workloop_uses_bound_thread((uint64_t)object))
        dispatch_suspend_cold_1();
      _dispatch_lane_suspend((uint64_t)object);
    }
  }
}

void dispatch_resume(dispatch_object_t object)
{
  Class isa;
  BOOL v3;
  uint64_t v4;

  isa = object->isa;
  if (((uint64_t)object->isa & 1) != 0
    || (isa >= (Class)OS_dispatch_object ? (v3 = isa >= (Class)OS_object) : (v3 = 1), v3))
  {
    _dispatch_objc_resume(object);
  }
  else if (LODWORD(object[1].isa) != 0x7FFFFFFF)
  {
    v4 = *((_QWORD *)isa + 5);
    if ((v4 & 0x300F0) == 0x10)
    {
      if (v4 == 18 && _dispatch_workloop_uses_bound_thread((uint64_t)object))
        dispatch_resume_cold_1();
      _dispatch_lane_resume((uint64_t)object, 0);
    }
  }
}

const char *_os_object_init()
{
  char *v0;
  char *v1;
  const char *result;
  Block_callbacks_RR v3;

  _objc_init();
  v3 = off_58648;
  _Block_use_RR2(&v3);
  v0 = getenv("OBJC_DEBUG_MISSING_POOLS");
  if (v0)
    _os_object_debug_missing_pools = _dispatch_parse_BOOL(v0);
  v1 = getenv("DISPATCH_DEBUG_MISSING_POOLS");
  if (v1)
    _os_object_debug_missing_pools = _dispatch_parse_BOOL(v1);
  result = getenv("LIBDISPATCH_DEBUG_MISSING_POOLS");
  if (result)
  {
    result = (const char *)_dispatch_parse_BOOL(result);
    _os_object_debug_missing_pools = (char)result;
  }
  return result;
}

id _os_object_alloc_bridged(objc_class *a1, uint64_t a2)
{
  objc_class *v2;
  size_t v3;
  id result;

  v2 = a1;
  v3 = a2 - 8;
  while (1)
  {
    result = class_createInstance(a1, v3);
    if (result)
      break;
    _dispatch_temporary_resource_shortage();
    a1 = v2;
  }
  return result;
}

_DWORD *_os_object_alloc_realized(objc_class *a1, uint64_t a2)
{
  objc_class *v2;
  size_t v3;
  _DWORD *result;

  v2 = a1;
  v3 = a2 - 8;
  while (1)
  {
    result = class_createInstance(a1, v3);
    if (result)
      break;
    _dispatch_temporary_resource_shortage();
    a1 = v2;
  }
  result[2] = 1;
  result[3] = 1;
  return result;
}

_DWORD *_os_object_alloc(__objc2_class *a1, uint64_t a2)
{
  objc_class *v3;

  if (!a1)
    a1 = OS_object;
  v3 = (objc_class *)objc_opt_class(a1);
  return _os_object_alloc_realized(v3, a2);
}

id _os_object_xref_dispose(void *a1, const char *a2)
{
  atomic_load((unsigned int *)a1 + 3);
  return objc_msgSend(a1, "_xref_dispose");
}

id _os_object_dispose(void *a1, const char *a2)
{
  atomic_load((unsigned int *)a1 + 2);
  return objc_msgSend(a1, "dealloc");
}

id _dispatch_objc_alloc(objc_class *a1, uint64_t a2)
{
  objc_class *v2;
  size_t v3;
  id result;

  v2 = a1;
  v3 = a2 - 8;
  while (1)
  {
    result = class_createInstance(a1, v3);
    if (result)
      break;
    _dispatch_temporary_resource_shortage();
    a1 = v2;
  }
  return result;
}

id _dispatch_objc_set_context(void *a1, const char *a2)
{
  return objc_msgSend(a1, "_setContext:", a2);
}

id _dispatch_objc_set_finalizer_f(void *a1, const char *a2)
{
  return objc_msgSend(a1, "_setFinalizer:", a2);
}

id _dispatch_objc_set_target_queue(void *a1, const char *a2)
{
  return objc_msgSend(a1, "_setTargetQueue:", a2);
}

_QWORD *_dispatch_last_resort_autorelease_pool_push(_QWORD *result)
{
  _QWORD *v1;

  if (!_os_object_debug_missing_pools)
  {
    v1 = result;
    result = objc_autoreleasePoolPush();
    v1[3] = result;
  }
  return result;
}

void _dispatch_last_resort_autorelease_pool_pop(uint64_t a1)
{
  if (!_os_object_debug_missing_pools)
  {
    objc_autoreleasePoolPop(*(void **)(a1 + 24));
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t _dispatch_client_callout(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_6778(void *a1)
{
  objc_begin_catch(a1);
  objc_terminate();
}

void sub_6784(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t _dispatch_client_callout2(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

void sub_67B4(void *a1)
{
  objc_begin_catch(a1);
  objc_terminate();
}

void sub_67C0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t _dispatch_client_callout3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

void sub_67F0(void *a1)
{
  objc_begin_catch(a1);
  objc_terminate();
}

void sub_67FC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t _dispatch_client_callout4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

void sub_682C(void *a1)
{
  objc_begin_catch(a1);
  objc_terminate();
}

void sub_6838(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t _dispatch_client_callout3_a(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

void sub_6868(void *a1)
{
  objc_begin_catch(a1);
  objc_terminate();
}

void sub_6874(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t _dispatch_wait_for_enqueuer(unint64_t *a1, uint64_t a2)
{
  int v2;
  unint64_t v3;

  v2 = -10;
  while (1)
  {
    v3 = __ldxr(a1);
    if (v3)
      break;
    __wfe();
    if (__CFADD__(v2++, 1))
      return __DISPATCH_WAIT_FOR_ENQUEUER__((uint64_t *)a1, a2);
  }
  __clrex();
  return v3;
}

uint64_t __DISPATCH_WAIT_FOR_ENQUEUER__(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = 1;
    do
    {
      _pthread_yield_to_enqueuer_4dispatch(122, a2, v5);
      result = *a1;
      v5 = (v5 + 1);
    }
    while (!*a1);
  }
  return result;
}

void *_dispatch_block_create(uint64_t a1, void *a2, uint64_t a3, void *aBlock)
{
  const char *v5;
  void *v6;
  dispatch_group_t v7;
  dispatch_group_t v8;
  _QWORD v10[4];
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  void *object;
  void *aBlocka;
  dispatch_group_t group;
  void *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  void *v26;
  void *v27;
  dispatch_group_t v28;
  void *v29;
  int v30;

  v21 = 0;
  v22 = a1;
  v23 = 0;
  v24 = 0;
  v25 = a3;
  v26 = a2;
  v28 = 0;
  v29 = 0;
  v27 = aBlock;
  v30 = 0;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1174405120;
  v10[2] = ___dispatch_block_create_block_invoke;
  v10[3] = &__block_descriptor_tmp_0;
  v11 = 3512316172;
  v12 = a1;
  v13 = 0;
  v14 = 0;
  v15 = a3;
  object = a2;
  aBlocka = 0;
  group = 0;
  v20 = 0;
  v19 = 0;
  if ((unint64_t)a2 + 1 < 2)
  {
    if (!aBlock)
      goto LABEL_4;
    goto LABEL_3;
  }
  voucher_retain(a2);
  if (aBlock)
LABEL_3:
    aBlocka = _dispatch_Block_copy(aBlock);
LABEL_4:
  v6 = _dispatch_Block_copy(v10);
  if (MEMORY[0xFFFFFC100])
    kdebug_trace(772079632, v10, 0, 0, 0);
  if (v11 == 3512316172)
  {
    v7 = group;
    if (group)
    {
      if (!v14)
      {
        dispatch_group_leave(group);
        v7 = group;
      }
      _os_object_release_without_xref_dispose(v7, v5);
    }
    if (v19)
      _os_object_release_internal_n(v19, (_BYTE *)&dword_0 + 2);
    if (aBlocka)
      _Block_release(aBlocka);
    if ((unint64_t)object + 1 >= 2)
      voucher_release(object);
  }
  if (MEMORY[0xFFFFFC100])
    kdebug_trace(772079632, &aBlocka, 0, 0, 0);
  if (v21 == 3512316172)
  {
    v8 = v28;
    if (v28)
    {
      if (!v24)
      {
        dispatch_group_leave(v28);
        v8 = v28;
      }
      _os_object_release_without_xref_dispose(v8, v5);
    }
    if (v29)
      _os_object_release_internal_n(v29, (_BYTE *)&dword_0 + 2);
    if (v27)
      _Block_release(v27);
    if ((unint64_t)v26 + 1 >= 2)
      voucher_release(v26);
  }
  return v6;
}

void ___dispatch_block_create_block_invoke(uint64_t a1)
{
  _dispatch_block_invoke_direct(a1 + 32);
}

void *__copy_helper_block_8_32c35_ZTS29dispatch_block_private_data_s(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *result;

  v4 = a2[5];
  v6 = a2[7];
  v5 = (void *)a2[8];
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = 3512316172;
  *(_QWORD *)(a1 + 40) = v4;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v5;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  if ((unint64_t)v5 + 1 >= 2)
    voucher_retain(v5);
  result = (void *)a2[9];
  if (result)
  {
    result = _dispatch_Block_copy(result);
    *(_QWORD *)(a1 + 72) = result;
  }
  if (a2[4])
  {
    result = (void *)_dispatch_group_create_and_enter();
    *(_QWORD *)(a1 + 80) = result;
  }
  return result;
}

void __destroy_helper_block_8_32c35_ZTS29dispatch_block_private_data_s(uint64_t a1, const char *a2)
{
  NSObject *v3;
  void *v4;
  const void *v5;
  void *v6;

  if (MEMORY[0xFFFFFC100])
    kdebug_trace(772079632, a1, 0, 0, 0);
  if (*(_QWORD *)(a1 + 32) == 3512316172)
  {
    v3 = *(NSObject **)(a1 + 80);
    if (v3)
    {
      if (!*(_DWORD *)(a1 + 52))
      {
        dispatch_group_leave(v3);
        v3 = *(NSObject **)(a1 + 80);
      }
      _os_object_release_without_xref_dispose(v3, a2);
    }
    v4 = *(void **)(a1 + 88);
    if (v4)
      _os_object_release_internal_n(v4, (_BYTE *)&dword_0 + 2);
    v5 = *(const void **)(a1 + 72);
    if (v5)
      _Block_release(v5);
    v6 = *(void **)(a1 + 64);
    if ((unint64_t)v6 + 1 >= 2)
      voucher_release(v6);
  }
}

uint64_t _dispatch_sema4_create_slow(unsigned int *a1, int policy)
{
  uint64_t result;
  semaphore_t v5;
  unint64_t StatusReg;
  uint64_t v9;
  semaphore_t semaphore;

  semaphore = 0;
  if ((_dispatch_unsafe_fork & 1) != 0)
  {
    if (policy)
      goto LABEL_3;
  }
  else
  {
    _dispatch_fork_becomes_unsafe_slow();
    if (policy)
    {
LABEL_3:
      result = semaphore_create(mach_task_self_, &semaphore, policy, 0);
      if ((_DWORD)result == -301)
        _dispatch_sema4_create_slow_cold_2();
      if ((_DWORD)result)
      {
        if ((_DWORD)result == 15)
          _dispatch_sema4_create_slow_cold_3();
        _dispatch_sema4_create_slow_cold_1(result);
      }
      v5 = semaphore;
      while (!__ldxr(a1))
      {
        if (!__stxr(v5, a1))
          return result;
      }
      __clrex();
      result = semaphore_destroy(mach_task_self_, v5);
      if ((_DWORD)result == -301)
        _dispatch_sema4_create_slow_cold_2();
      if ((_DWORD)result)
      {
        if ((_DWORD)result == 15)
          _dispatch_sema4_create_slow_cold_3();
        _dispatch_sema4_create_slow_cold_1(result);
      }
      return result;
    }
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  result = *(_QWORD *)(StatusReg + 72);
  if (result)
    *(_QWORD *)(StatusReg + 72) = 0;
  else
    result = _os_semaphore_create();
  while (!__ldxr(a1))
  {
    if (!__stxr(result, a1))
      return result;
  }
  __clrex();
  v9 = result;
  result = *(_QWORD *)(StatusReg + 72);
  *(_QWORD *)(StatusReg + 72) = v9;
  if (result)
    return _os_semaphore_dispose();
  return result;
}

uint64_t _dispatch_sema4_dispose_slow(_DWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t result;
  unint64_t StatusReg;

  v3 = *a1;
  *a1 = -1;
  if (a2)
  {
    result = semaphore_destroy(mach_task_self_, v3);
    if ((_DWORD)result == -301)
      _dispatch_sema4_create_slow_cold_2();
    if ((_DWORD)result)
    {
      if ((_DWORD)result == 15)
        _dispatch_sema4_create_slow_cold_3();
      _dispatch_sema4_create_slow_cold_1(result);
    }
  }
  else
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    result = *(_QWORD *)(StatusReg + 72);
    *(_QWORD *)(StatusReg + 72) = v3;
    if (result)
      return _os_semaphore_dispose();
  }
  return result;
}

uint64_t _dispatch_sema4_signal(semaphore_t *a1, uint64_t a2)
{
  uint64_t result;

  do
  {
    result = semaphore_signal(*a1);
    if ((_DWORD)result == -301)
      _dispatch_sema4_create_slow_cold_2();
    if ((_DWORD)result)
    {
      if ((_DWORD)result == 15)
        _dispatch_sema4_create_slow_cold_3();
      _dispatch_sema4_create_slow_cold_1(result);
    }
    --a2;
  }
  while (a2);
  return result;
}

uint64_t _dispatch_sema4_wait(semaphore_t *a1)
{
  uint64_t result;

  while (1)
  {
    result = semaphore_wait(*a1);
    if ((int)result <= 13)
      break;
    if ((_DWORD)result != 14)
    {
      if ((_DWORD)result == 15)
        _dispatch_sema4_create_slow_cold_3();
      goto LABEL_8;
    }
  }
  if ((_DWORD)result == -301)
    _dispatch_sema4_create_slow_cold_2();
  if ((_DWORD)result)
LABEL_8:
    _dispatch_sema4_create_slow_cold_1(result);
  return result;
}

BOOL _dispatch_sema4_timedwait(semaphore_t *a1, int64_t a2)
{
  unint64_t v4;
  kern_return_t v5;
  mach_timespec_t v7;

  do
  {
    v4 = _dispatch_timeout(a2);
    v7.tv_sec = v4 / 0x3B9ACA00;
    v7.tv_nsec = v4 % 0x3B9ACA00;
    v5 = semaphore_timedwait(*a1, v7);
  }
  while (v5 == 14);
  if (v5 != 49)
  {
    if (v5 == -301)
      _dispatch_sema4_create_slow_cold_2();
    if (v5)
    {
      if (v5 == 15)
        _dispatch_sema4_create_slow_cold_3();
      _dispatch_sema4_create_slow_cold_1(v5);
    }
  }
  return v5 == 49;
}

uint64_t _dispatch_wait_on_address(uint64_t a1, unsigned int a2, int64_t a3, int a4)
{
  unint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = _dispatch_timeout(a3);
  if (v8 == -1)
    return _dlock_wait(a1, a2, 0, a4 | 1u);
  if (!v8)
    return 60;
  v9 = a4 | 1;
  while (1)
  {
    v10 = v8 == 1000 * (v8 / 0x3E8) ? v8 / 0x3E8 : v8 / 0x3E8 + 1;
    v11 = v10 >= 0xFFFFFFFF ? 0xFFFFFFFFLL : v10;
    result = _dlock_wait(a1, a2, v11, v9);
    if (v10 < 0xFFFFFFFF || (_DWORD)result != 60)
      break;
    v8 = _dispatch_timeout(a3);
    if (!v8)
      return 60;
  }
  return result;
}

uint64_t _dispatch_wake_by_address(uint64_t a1)
{
  return _dlock_wake(a1, 257);
}

uint64_t _dispatch_thread_event_signal_slow(uint64_t a1)
{
  return _dlock_wake(a1, 1);
}

uint64_t _dispatch_thread_event_wait_slow(unsigned int *a1)
{
  uint64_t result;

  while (1)
  {
    result = atomic_load(a1);
    if (!(_DWORD)result)
      break;
    if ((_DWORD)result != -1)
      _dispatch_thread_event_wait_slow_cold_1(result);
    _dlock_wait((uint64_t)a1, 0xFFFFFFFF, 0, 1);
  }
  return result;
}

uint64_t _dispatch_unfair_lock_lock_slow(uint64_t result, int a2)
{
  unsigned int *v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;

  v2 = (unsigned int *)result;
  v3 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  v4 = v3 & 0xFFFFFFFC;
  v5 = a2 | 2;
  while (1)
  {
    while (1)
    {
      v6 = __ldaxr(v2);
      v7 = v4;
      if (v6 >= 4)
      {
        v7 = v6 | 1;
        if ((v6 | 1) == v6)
          break;
      }
      if (!__stxr(v7, v2))
        goto LABEL_4;
    }
    __clrex();
    v7 = v6;
LABEL_4:
    if ((v6 ^ v3) <= 3)
      _dispatch_unfair_lock_lock_slow_cold_1();
    if (v7 == v4)
      return result;
    result = _dlock_wait((uint64_t)v2, v7, 0, v5);
    v4 |= (_DWORD)result == 66;
  }
}

uint64_t _dispatch_unfair_lock_unlock_slow(uint64_t result, unsigned int a2)
{
  if ((*(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) ^ a2) >= 4)
    _dispatch_unfair_lock_unlock_slow_cold_1(a2);
  if ((a2 & 1) != 0)
    return _dlock_wake(result, 2);
  return result;
}

uint64_t _dispatch_once_wait(uint64_t result)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = (unint64_t *)result;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  while (1)
  {
    v3 = __ldxr(v1);
    if (v3 == -1)
    {
      __clrex();
      return result;
    }
    if ((v3 & 3) == 2)
      break;
    v4 = v3 | 1;
    if ((v3 | 1) == v3)
    {
      __clrex();
      LODWORD(v4) = v3;
      goto LABEL_7;
    }
    if (!__stxr(v4, v1))
    {
LABEL_7:
      if (((v3 ^ v2) & 0xFFFFFFFC) == 0)
        _dispatch_unfair_lock_lock_slow_cold_1();
      result = _dlock_wait((uint64_t)v1, v4, 0, 2);
    }
  }
  __clrex();
  __dmb(9u);
  if (4 * MEMORY[0xFFFFFC180] - v3 - 14 <= 0xFFFFFFFFFFFFFFEFLL)
    *v1 = -1;
  return result;
}

uint64_t _dispatch_gate_broadcast_slow(uint64_t a1, unsigned int a2)
{
  if ((*(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) ^ a2) >= 4)
    _dispatch_unfair_lock_unlock_slow_cold_1(a2);
  return _dlock_wake(a1, 258);
}

uint64_t _dispatch_firehose_gate_wait(uint64_t a1, unsigned int a2, int a3)
{
  return _dlock_wait(a1, a2, 0, a3 | 2u);
}

uint64_t _dlock_wait(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t result;

  v6 = a4 | 0x1000000u;
  v7 = a2;
  while (1)
  {
    v8 = __ulock_wait(v6, a1, v7, a3);
    if (v8 > 0)
      return 66;
    v9 = v8;
    result = -v8;
    if (v9 != -4)
      break;
    if ((_DWORD)a3)
      return result;
  }
  if (result > 0x3C || ((1 << result) & 0x1000000000004001) == 0)
  {
    if ((_DWORD)result == 105)
      _dlock_wait_cold_2(v7);
    _dlock_wait_cold_1(result);
  }
  return result;
}

uint64_t _dlock_wake(uint64_t a1, int a2)
{
  uint64_t result;

  result = __ulock_wake(a2 | 0x1000000u, a1, 0);
  if ((_DWORD)result)
  {
    if ((_DWORD)result != -2)
      _dlock_wake_cold_1(result);
  }
  return result;
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  dispatch_semaphore_t result;

  if (value < 0)
    return 0;
  result = (dispatch_semaphore_t)_dispatch_object_alloc(OS_dispatch_semaphore, 72);
  result[2].isa = (Class)-1985229329;
  result[3].isa = (Class)&off_65340;
  result[6].isa = (Class)value;
  LODWORD(result[8].isa) = 0;
  result[7].isa = (Class)value;
  return result;
}

_DWORD *_dispatch_semaphore_dispose(uint64_t a1)
{
  uint64_t v1;
  _DWORD *result;
  int v3;

  v1 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 48) < v1)
    _dispatch_semaphore_dispose_cold_1((_QWORD *)(a1 + 48), v1);
  v3 = *(_DWORD *)(a1 + 64);
  result = (_DWORD *)(a1 + 64);
  if (v3)
    return (_DWORD *)_dispatch_sema4_dispose_slow(result, 0);
  return result;
}

uint64_t _dispatch_semaphore_signal_slow(uint64_t a1)
{
  semaphore_t *v1;

  v1 = (semaphore_t *)(a1 + 64);
  if (!*(_DWORD *)(a1 + 64))
    _dispatch_sema4_create_slow((unsigned int *)(a1 + 64), 0);
  _dispatch_sema4_signal(v1, 1);
  return 1;
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  unint64_t *v1;
  unint64_t v2;

  v1 = (unint64_t *)&dsema[6];
  do
    v2 = __ldxr(v1);
  while (__stlxr(v2 + 1, v1));
  if ((v2 & 0x8000000000000000) != 0)
    return _dispatch_semaphore_signal_slow((uint64_t)dsema);
  else
    return 0;
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  unint64_t *v2;
  uint64_t v3;

  v2 = (unint64_t *)&dsema[6];
  do
    v3 = __ldaxr(v2);
  while (__stxr(v3 - 1, v2));
  if (v3 <= 0)
    return _dispatch_semaphore_wait_slow((uint64_t)dsema, timeout);
  else
    return 0;
}

uint64_t _dispatch_semaphore_wait_slow(uint64_t a1, int64_t a2)
{
  semaphore_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  char v10;

  v4 = (semaphore_t *)(a1 + 64);
  if (!*(_DWORD *)(a1 + 64))
    _dispatch_sema4_create_slow((unsigned int *)(a1 + 64), 0);
  if (a2 != -1)
  {
    if (a2 && !_dispatch_sema4_timedwait(v4, a2))
      return 0;
    v7 = *(_QWORD *)(a1 + 48);
    v6 = (unint64_t *)(a1 + 48);
    v5 = v7;
    result = 49;
    while ((v5 & 0x8000000000000000) != 0)
    {
      while (1)
      {
        v9 = __ldxr(v6);
        if (v9 != v5)
          break;
        if (!__stxr(v5 + 1, v6))
        {
          v10 = 1;
          goto LABEL_12;
        }
      }
      v10 = 0;
      __clrex();
LABEL_12:
      v5 = v9;
      if ((v10 & 1) != 0)
        return result;
    }
  }
  _dispatch_sema4_wait(v4);
  return 0;
}

dispatch_group_t dispatch_group_create(void)
{
  dispatch_group_t result;

  result = (dispatch_group_t)_dispatch_object_alloc(OS_dispatch_group, 72);
  result[2].isa = (Class)-1985229329;
  result[3].isa = (Class)&off_65340;
  return result;
}

uint64_t _dispatch_group_create_and_enter()
{
  uint64_t result;
  unsigned int *v1;
  int v2;

  result = _dispatch_object_alloc(OS_dispatch_group, 72);
  *(_QWORD *)(result + 16) = -1985229329;
  *(_QWORD *)(result + 24) = &off_65340;
  *(_DWORD *)(result + 48) = -4;
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    v1 = (unsigned int *)(result + 8);
    do
      v2 = __ldxr(v1);
    while (__stxr(v2 + 1, v1));
    if (v2 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  return result;
}

uint64_t _dispatch_group_dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  if ((_DWORD)result)
    _dispatch_group_dispose_cold_1(result);
  return result;
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  unint64_t *v2;
  unint64_t v3;
  intptr_t result;

  v2 = (unint64_t *)&group[6];
  while (1)
  {
    v3 = __ldxr(v2);
    if ((v3 & 0xFFFFFFFC) == 0)
    {
      result = 0;
      __dmb(9u);
      return result;
    }
    if (!timeout)
      break;
    if ((v3 & 1) != 0)
    {
      __clrex();
      return _dispatch_group_wait_slow((uint64_t)group, HIDWORD(v3), timeout);
    }
    if (!__stxr(v3 | 1, v2))
      return _dispatch_group_wait_slow((uint64_t)group, HIDWORD(v3), timeout);
  }
  __clrex();
  return 49;
}

uint64_t _dispatch_group_wait_slow(uint64_t a1, unsigned int a2, int64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;

  v5 = (unsigned int *)(a1 + 52);
  v6 = 49;
  while (1)
  {
    v7 = _dispatch_wait_on_address((uint64_t)v5, a2, a3, 0);
    v8 = atomic_load(v5);
    if (v8 != a2)
      break;
    if (v7 == 60)
      return v6;
  }
  return 0;
}

void dispatch_group_leave(dispatch_group_t group)
{
  int8x16_t v1;
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;

  v2 = (unint64_t *)&group[6];
  do
    v3 = __ldxr(v2);
  while (__stlxr(v3 + 4, v2));
  v4 = v3 & 0xFFFFFFFC;
  if ((v3 & 0xFFFFFFFC) == 0xFFFFFFFC)
  {
    v5 = v3 + 4;
    do
    {
      v6 = (const char *)v5;
      v7 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v6 & 0xFFFFFFFC) != 0)
        v7 = (unint64_t)v6;
      v8 = v7 & 0xFFFFFFFFFFFFFFFDLL;
      if (v6 == (const char *)(v7 & 0xFFFFFFFFFFFFFFFDLL))
        break;
      while (1)
      {
        v5 = __ldxr(v2);
        if ((const char *)v5 != v6)
          break;
        if (!__stxr(v8, v2))
        {
          v9 = 1;
          goto LABEL_14;
        }
      }
      v9 = 0;
      __clrex();
LABEL_14:
      ;
    }
    while (!v9);
    _dispatch_group_wake((unint64_t *)group, v6, 1, v1);
  }
  else if (!(_DWORD)v4)
  {
    dispatch_group_leave_cold_1(v4);
  }
}

unint64_t *_dispatch_group_wake(unint64_t *result, const char *a2, int a3, int8x16_t a4)
{
  unint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  const char *v14;
  int v15;
  unsigned int *v16;
  unsigned int v17;
  signed int v18;
  const char *v19;

  v5 = result;
  if ((a2 & 2) != 0)
  {
    v19 = a2;
    v6 = result[7];
    if (!v6)
      v6 = _dispatch_wait_for_enqueuer(result + 7, (uint64_t)(result + 8));
    v5[7] = 0;
    v7 = v5 + 8;
    do
      v8 = __ldxr(v7);
    while (__stlxr(0, v7));
    do
    {
      while (1)
      {
        v9 = v6;
        v10 = *(_QWORD *)(v6 + 48);
        if (v6 == v8)
        {
          v6 = 0;
        }
        else
        {
          v6 = *(_QWORD *)(v6 + 16);
          if (!v6)
            v6 = _dispatch_wait_for_enqueuer((unint64_t *)(v9 + 16), 0);
        }
        v11 = __clz(__rbit32((*(_DWORD *)(v9 + 8) >> 8) & 0x3FFF));
        if (((*(_DWORD *)(v9 + 8) >> 8) & 0x3FFF) != 0)
          v12 = v11 + 1;
        else
          v12 = 0;
        if ((*(_BYTE *)(v9 + 1) & 2) == 0)
        {
          if (MEMORY[0xFFFFFC100])
            _dispatch_trace_item_push_internal((_QWORD *)v10, (_QWORD *)v9, a4);
          _dispatch_introspection_queue_item_enqueue(v10, v9);
        }
        v13 = (unsigned int *)(v10 + 8);
        result = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 88))(v10, v9, v12);
        if (*(_DWORD *)(v10 + 8) != 0x7FFFFFFF)
        {
          do
            v15 = __ldxr(v13);
          while (__stlxr(v15 - 1, v13));
          if (v15 <= 1)
            break;
        }
        if (!v6)
          goto LABEL_24;
      }
      if (v15 != 1)
      {
        qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
        goto LABEL_39;
      }
      result = (unint64_t *)_os_object_dispose((void *)v10, v14);
    }
    while (v6);
LABEL_24:
    if (a3)
      LOWORD(a3) = 2;
    else
      LOWORD(a3) = 1;
    a2 = v19;
  }
  if ((a2 & 1) != 0)
    result = (unint64_t *)_dispatch_wake_by_address((uint64_t)v5 + 52);
  if ((_WORD)a3)
  {
    if (*((_DWORD *)v5 + 2) != 0x7FFFFFFF)
    {
      v16 = (unsigned int *)(v5 + 1);
      do
      {
        v17 = __ldxr(v16);
        v18 = v17 - (unsigned __int16)a3;
      }
      while (__stlxr(v18, v16));
      if (v18 <= 0)
      {
        if (v18 < 0)
        {
LABEL_39:
          qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
          __break(1u);
        }
        else
        {
          return (unint64_t *)_os_object_dispose(v5, a2);
        }
      }
    }
  }
  return result;
}

void dispatch_group_enter(dispatch_group_t group)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int *v3;
  int v4;

  v1 = (unsigned int *)&group[6];
  do
    v2 = __ldaxr(v1);
  while (__stxr(v2 - 4, v1));
  if ((v2 & 0xFFFFFFFC) != 0)
  {
    if ((v2 & 0xFFFFFFFC) == 4)
      dispatch_group_enter_cold_2(v2);
  }
  else if (LODWORD(group[1].isa) != 0x7FFFFFFF)
  {
    v3 = (unsigned int *)&group[1];
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
    if (v4 <= 0)
      dispatch_set_target_queue_cold_2();
  }
}

void dispatch_group_notify_f(dispatch_group_t group, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  int8x16_t v4;
  unint64_t StatusReg;
  objc_class *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int *v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int *v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;
  const char *v23;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v10 = *(objc_class **)(StatusReg + 176);
  if (v10)
    *(_QWORD *)(StatusReg + 176) = *((_QWORD *)v10 + 2);
  else
    v10 = (objc_class *)_dispatch_continuation_alloc_from_heap();
  *(_QWORD *)v10 = 260;
  *((_QWORD *)v10 + 4) = work;
  *((_QWORD *)v10 + 5) = context;
  if ((*(_QWORD *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF)
    v11 = 4351;
  else
    v11 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
  v12 = *(_QWORD *)(StatusReg + 224);
  if (v12)
    os_retain(*(void **)(StatusReg + 224));
  *((_QWORD *)v10 + 3) = v12;
  if (v12 != -1)
  {
    if (v12)
      v12 = *(unsigned int *)(v12 + 32);
    if (MEMORY[0xFFFFFC100])
      goto LABEL_37;
  }
  if (!v11)
    goto LABEL_38;
LABEL_13:
  v13 = (HIDWORD(queue[10].isa) >> 30) & 1;
  if ((HIDWORD(queue[10].isa) & 0xFFF) == 0)
    v13 = 1;
  if (v13)
    v14 = v11;
  else
    v14 = 0;
  while (1)
  {
    *((_QWORD *)v10 + 1) = v14;
    *((_QWORD *)v10 + 6) = queue;
    if (LODWORD(queue[1].isa) == 0x7FFFFFFF)
      break;
    v15 = (unsigned int *)&queue[1];
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    if (v16 > 0)
      break;
    qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
LABEL_37:
    kdebug_trace(771817476, v12, v10, 0, 0);
    if (v11)
      goto LABEL_13;
LABEL_38:
    v14 = 0;
  }
  *((_QWORD *)v10 + 2) = 0;
  v17 = (unint64_t *)&group[8];
  *(_QWORD *)(StatusReg + 976) = group + 8;
  do
    v18 = __ldxr(v17);
  while (__stlxr((unint64_t)v10, v17));
  if (v18)
  {
    *(_QWORD *)(v18 + 16) = v10;
    *(_QWORD *)(StatusReg + 976) = 0;
  }
  else
  {
    if (LODWORD(group[1].isa) == 0x7FFFFFFF)
      goto LABEL_30;
    v19 = (unsigned int *)&group[1];
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    if (v20 > 0)
    {
LABEL_30:
      group[7].isa = v10;
      *(_QWORD *)(StatusReg + 976) = 0;
      v21 = (unint64_t *)&group[6];
      while (1)
      {
        v22 = __ldxr(v21);
        v23 = (const char *)(v22 | 2);
        if (!(_DWORD)v22)
          break;
        if (!__stlxr((unint64_t)v23, v21))
          return;
      }
      __clrex();
      _dispatch_group_wake((unint64_t *)group, v23, 0, v4);
    }
    else
    {
      qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
    }
  }
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  unint64_t StatusReg;
  uint64_t *v7;
  void *v8;
  int8x16_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int *v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int *v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;
  const char *v23;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(uint64_t **)(StatusReg + 176);
  if (v7)
    *(_QWORD *)(StatusReg + 176) = v7[2];
  else
    v7 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
  v8 = _dispatch_Block_copy(block);
  v10 = (void (*)(uint64_t))*((_QWORD *)block + 2);
  *v7 = 276;
  if (v10 == ___dispatch_block_create_block_invoke)
  {
    v7[5] = (uint64_t)v8;
    _dispatch_continuation_init_slow(v7, (unsigned int *)queue, 0);
    goto LABEL_20;
  }
  v7[4] = (uint64_t)_dispatch_call_block_and_release;
  v7[5] = (uint64_t)v8;
  if ((*(_QWORD *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF)
    v11 = 4351;
  else
    v11 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
  v12 = *(_QWORD *)(StatusReg + 224);
  if (v12)
    os_retain(*(void **)(StatusReg + 224));
  v7[3] = v12;
  if (v12 == -1)
    goto LABEL_13;
  if (v12)
    v12 = *(unsigned int *)(v12 + 32);
  if (MEMORY[0xFFFFFC100])
  {
    kdebug_trace(771817476, v12, v7, 0, 0);
    if (v11)
      goto LABEL_14;
  }
  else
  {
LABEL_13:
    if (v11)
    {
LABEL_14:
      v13 = (HIDWORD(queue[10].isa) >> 30) & 1;
      if ((HIDWORD(queue[10].isa) & 0xFFF) == 0)
        v13 = 1;
      if (v13)
        v14 = v11;
      else
        v14 = 0;
      goto LABEL_19;
    }
  }
  v14 = 0;
LABEL_19:
  v7[1] = v14;
LABEL_20:
  v7[6] = (uint64_t)queue;
  if (LODWORD(queue[1].isa) != 0x7FFFFFFF)
  {
    v15 = (unsigned int *)&queue[1];
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    if (v16 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  v7[2] = 0;
  v17 = (unint64_t *)&group[8];
  *(_QWORD *)(StatusReg + 976) = group + 8;
  do
    v18 = __ldxr(v17);
  while (__stlxr((unint64_t)v7, v17));
  if (v18)
  {
    *(_QWORD *)(v18 + 16) = v7;
    *(_QWORD *)(StatusReg + 976) = 0;
  }
  else
  {
    if (LODWORD(group[1].isa) != 0x7FFFFFFF)
    {
      v19 = (unsigned int *)&group[1];
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      if (v20 <= 0)
        dispatch_set_target_queue_cold_2();
    }
    group[7].isa = (Class)v7;
    *(_QWORD *)(StatusReg + 976) = 0;
    v21 = (unint64_t *)&group[6];
    while (1)
    {
      v22 = __ldxr(v21);
      v23 = (const char *)(v22 | 2);
      if (!(_DWORD)v22)
        break;
      if (!__stlxr((unint64_t)v23, v21))
        return;
    }
    __clrex();
    _dispatch_group_wake((unint64_t *)group, v23, 0, v9);
  }
}

void dispatch_group_async_f(dispatch_group_t group, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  unint64_t StatusReg;
  NSObject *v9;
  unint64_t v10;
  unsigned int *v11;
  int isa_high;
  uint64_t v13;
  int8x16_t v14;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v9 = *(NSObject **)(StatusReg + 176);
  if (v9)
    *(StatusReg + 176) = v9[2];
  else
    v9 = _dispatch_continuation_alloc_from_heap();
  v9->isa = (Class)(&stru_108 + 4);
  v9[4].isa = (Class)work;
  v9[5].isa = (Class)context;
  if ((*(_QWORD *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF)
    v10 = 4351;
  else
    v10 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
  v11 = *(unsigned int **)(StatusReg + 224);
  if (v11)
    os_retain(*(void **)(StatusReg + 224));
  v9[3].isa = (Class)v11;
  if (v11 != (unsigned int *)-1)
  {
    if (v11)
      v11 = (unsigned int *)v11[8];
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817476, v11, v9, 0, 0);
      if (v10)
        goto LABEL_13;
LABEL_24:
      v13 = 0;
      goto LABEL_17;
    }
  }
  if (!v10)
    goto LABEL_24;
LABEL_13:
  isa_high = HIDWORD(queue[10].isa);
  if ((isa_high & 0x40000000) != 0 || (isa_high & 0xFFF) == 0)
  {
    v13 = __clz(__rbit32(v10 >> 8)) + 1;
  }
  else
  {
    v13 = 0;
    v10 = 0;
  }
LABEL_17:
  v9[1].isa = (Class)v10;
  dispatch_group_enter(group);
  v9[6].isa = (Class)group;
  if ((BYTE1(v9->isa) & 2) == 0)
  {
    if (MEMORY[0xFFFFFC100])
      _dispatch_trace_item_push_internal(queue, v9, v14);
    _dispatch_introspection_queue_item_enqueue(queue, v9);
  }
  (*((void (**)(dispatch_queue_t, NSObject *, uint64_t))queue->isa + 11))(queue, v9, v13);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  unint64_t StatusReg;
  NSObject *v7;
  objc_class *v8;
  void (*v9)(uint64_t);
  unint64_t v10;
  unsigned int *v11;
  int isa_high;
  uint64_t *inited;
  int8x16_t v14;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(NSObject **)(StatusReg + 176);
  if (v7)
    *(StatusReg + 176) = v7[2];
  else
    v7 = _dispatch_continuation_alloc_from_heap();
  v8 = (objc_class *)_dispatch_Block_copy(block);
  v9 = (void (*)(uint64_t))*((_QWORD *)block + 2);
  v7->isa = (Class)(&stru_108 + 20);
  if (v9 != ___dispatch_block_create_block_invoke)
  {
    v7[4].isa = (Class)_dispatch_call_block_and_release;
    v7[5].isa = v8;
    if ((*(_QWORD *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF)
      v10 = 4351;
    else
      v10 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
    v11 = *(unsigned int **)(StatusReg + 224);
    if (v11)
      os_retain(*(void **)(StatusReg + 224));
    v7[3].isa = (Class)v11;
    if (v11 == (unsigned int *)-1)
      goto LABEL_13;
    if (v11)
      v11 = (unsigned int *)v11[8];
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817476, v11, v7, 0, 0);
      if (v10)
        goto LABEL_14;
    }
    else
    {
LABEL_13:
      if (v10)
      {
LABEL_14:
        isa_high = HIDWORD(queue[10].isa);
        if ((isa_high & 0x40000000) != 0 || (isa_high & 0xFFF) == 0)
        {
          inited = (uint64_t *)(__clz(__rbit32(v10 >> 8)) + 1);
        }
        else
        {
          inited = 0;
          v10 = 0;
        }
        goto LABEL_18;
      }
    }
    inited = 0;
LABEL_18:
    v7[1].isa = (Class)v10;
    goto LABEL_19;
  }
  v7[5].isa = v8;
  inited = _dispatch_continuation_init_slow((uint64_t *)v7, (unsigned int *)queue, 0);
LABEL_19:
  dispatch_group_enter(group);
  v7[6].isa = (Class)group;
  if ((BYTE1(v7->isa) & 2) == 0)
  {
    if (MEMORY[0xFFFFFC100])
      _dispatch_trace_item_push_internal(queue, v7, v14);
    _dispatch_introspection_queue_item_enqueue(queue, v7);
  }
  (*((void (**)(dispatch_queue_t, NSObject *, uint64_t *))queue->isa + 11))(queue, v7, inited);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  dispatch_once_f(predicate, block, *((dispatch_function_t *)block + 2));
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
  unint64_t v3;
  unint64_t v4;

  v3 = atomic_load((unint64_t *)predicate);
  if (v3 != -1)
  {
    if ((v3 & 3) == 2)
    {
      if (4 * MEMORY[0xFFFFFC180] - v3 - 14 <= 0xFFFFFFFFFFFFFFEFLL)
        *predicate = -1;
    }
    else
    {
      v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFCLL;
      while (!__ldxr((unint64_t *)predicate))
      {
        if (!__stxr(v4, (unint64_t *)predicate))
        {
          _dispatch_once_callout((unint64_t *)predicate, context, (uint64_t (*)(void))function);
          return;
        }
      }
      __clrex();
      _dispatch_once_wait((uint64_t)predicate);
    }
  }
}

void _dispatch_once_callout(unint64_t *a1, _QWORD *context, uint64_t (*function)(void))
{
  void (__cdecl *v6)(void *);
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;

  v6 = (void (__cdecl *)(void *))function;
  if (context)
  {
    v6 = (void (__cdecl *)(void *))function;
    if ((char *)function == (char *)_dispatch_call_block_and_release)
      v6 = (void (__cdecl *)(void *))context[2];
  }
  _dispatch_introspection_callout_entry(context, v6);
  _dispatch_client_callout((uint64_t)context, function);
  _dispatch_introspection_callout_return(context, v6);
  v7 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFC;
  v8 = (4 * MEMORY[0xFFFFFC180]) | 2;
  do
    v9 = __ldxr(a1);
  while (__stlxr(v8, a1));
  if (v7 != v9)
    _dispatch_gate_broadcast_slow((uint64_t)a1, v9);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  Class isa;
  unint64_t StatusReg;
  dispatch_queue_t v3;
  _BOOL4 v4;
  BOOL v5;
  dispatch_queue_t *v6;
  dispatch_queue_t v7;
  BOOL v8;

  if ((unint64_t)*((unsigned __int8 *)queue->isa + 40) - 19 <= 0xFFFFFFFFFFFFFFFDLL)
    dispatch_assert_queue_V2_cold_1(*((unsigned __int8 *)queue->isa + 40));
  isa = queue[7].isa;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (((isa ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) != 0)
  {
    v3 = *(dispatch_queue_t *)(StatusReg + 160);
    v4 = v3 == 0;
    if (v3)
      v5 = v3 == queue;
    else
      v5 = 1;
    if (v5)
    {
LABEL_21:
      if (v4)
        _dispatch_assert_queue_fail(queue, 1);
      return;
    }
    v6 = *(dispatch_queue_t **)(StatusReg + 168);
    while (1)
    {
      v7 = (dispatch_queue_t)v3[3].isa;
      if (v6)
      {
        if (!v7)
        {
          v7 = *v6;
LABEL_15:
          v6 = (dispatch_queue_t *)v6[1];
          goto LABEL_16;
        }
        if (v3 == *v6)
          goto LABEL_15;
      }
LABEL_16:
      v4 = v7 == 0;
      if (v7)
        v8 = v7 == queue;
      else
        v8 = 1;
      v3 = v7;
      if (v8)
        goto LABEL_21;
    }
  }
}

void _dispatch_assert_queue_fail(_QWORD *a1, int a2)
{
  const char *v2;
  const char *v3;
  char *v4;
  char *v5;

  v2 = "not ";
  v3 = (const char *)&unk_416A6;
  v5 = 0;
  if (a2)
    v2 = (const char *)&unk_416A6;
  if (a1[9])
    v3 = (const char *)a1[9];
  asprintf(&v5, "%sBlock was %sexpected to execute on queue [%s (%p)]", "BUG IN CLIENT OF LIBDISPATCH: Assertion failed: ", v2, v3, a1);
  v4 = v5;
  _dispatch_log("%s", v5);
  qword_61228 = (uint64_t)v4;
  __break(1u);
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
  Class isa;
  unint64_t StatusReg;
  dispatch_queue_t v3;
  BOOL v4;
  BOOL v5;
  dispatch_queue_t *v6;
  dispatch_queue_t v7;
  BOOL v8;

  if ((unint64_t)*((unsigned __int8 *)queue->isa + 40) - 19 <= 0xFFFFFFFFFFFFFFFDLL)
    dispatch_assert_queue_not_V2_cold_1(*((unsigned __int8 *)queue->isa + 40));
  isa = queue[7].isa;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (((isa ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) == 0)
    goto LABEL_20;
  v3 = *(dispatch_queue_t *)(StatusReg + 160);
  v4 = v3 == 0;
  if (v3)
    v5 = v3 == queue;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = *(dispatch_queue_t **)(StatusReg + 168);
    do
    {
      v7 = (dispatch_queue_t)v3[3].isa;
      if (v6)
      {
        if (!v7)
        {
          v7 = *v6;
LABEL_13:
          v6 = (dispatch_queue_t *)v6[1];
          goto LABEL_14;
        }
        if (v3 == *v6)
          goto LABEL_13;
      }
LABEL_14:
      v4 = v7 == 0;
      if (v7)
        v8 = v7 == queue;
      else
        v8 = 1;
      v3 = v7;
    }
    while (!v8);
  }
  if (!v4)
LABEL_20:
    _dispatch_assert_queue_fail(queue, 0);
}

void dispatch_assert_queue_barrier(dispatch_queue_t queue)
{
  dispatch_assert_queue_V2(queue);
  if (LOWORD(queue[10].isa) != 1 && (!queue[3].isa || ((uint64_t)queue[7].isa & 0x40000000000000) == 0))
    _dispatch_assert_queue_barrier_fail(queue);
}

void _dispatch_assert_queue_barrier_fail(_QWORD *a1)
{
  const char *v1;
  char *v2;
  char *v3;

  v1 = (const char *)a1[9];
  if (!v1)
    v1 = (const char *)&unk_416A6;
  v3 = 0;
  asprintf(&v3, "%sBlock was expected to act as a barrier on queue [%s (%p)]", "BUG IN CLIENT OF LIBDISPATCH: Assertion failed: ", v1, a1);
  v2 = v3;
  _dispatch_log("%s", v3);
  qword_61228 = (uint64_t)v2;
  __break(1u);
}

void _dispatch_set_priority_and_mach_voucher_slow(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t StatusReg;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1;
  if (!a1 || (StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)), v5 = *(_QWORD *)(StatusReg + 32), v5 == a1))
  {
    v6 = 0;
    goto LABEL_11;
  }
  if ((v5 & 0x1000000) != 0)
  {
    v8 = *(_QWORD *)(StatusReg + 200) & 0x80000000;
    v7 = 16;
  }
  else
  {
    v7 = 0;
    v8 = *(_QWORD *)(StatusReg + 32) & 0x88000000;
  }
  v9 = v8 | a1;
  if (((qword_64E78 ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) == 0)
  {
    qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Changing the QoS while on the manager queue";
    qword_61258 = v9;
    __break(1u);
LABEL_23:
    _dispatch_bug(206, (int)a1);
    return;
  }
  if ((a1 & 0x2000000) != 0)
  {
    v5 = v9;
    qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Cannot raise oneself to manager";
    qword_61258 = v9;
    __break(1u);
    goto LABEL_25;
  }
  if ((v5 & 0x2000000) != 0)
  {
LABEL_25:
    qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Cannot turn a manager thread into a normal one";
    qword_61258 = v5;
    __break(1u);
    return;
  }
  v6 = v7 | ((v5 & 0xFFFFFF) != 0);
  v3 = v9;
LABEL_11:
  if ((_DWORD)a2 == -1)
    v10 = v6;
  else
    v10 = v6 | 2;
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  if (v11 && (*(_BYTE *)(v11 + 45) & 2) != 0)
    _dispatch_event_loop_drain(1);
  if ((_DWORD)v10)
  {
    LODWORD(a1) = _pthread_set_properties_self(v10, v3, a2);
    if ((_DWORD)a1 == 22)
    {
      qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: _pthread_set_properties_self failed";
      qword_61258 = v3;
      __break(1u);
    }
    if ((_DWORD)a1)
      goto LABEL_23;
  }
}

uint64_t _dispatch_set_priority_and_voucher_slow(uint64_t a1, unsigned int *object, char a3)
{
  unint64_t StatusReg;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;

  if (object == (unsigned int *)-1)
  {
    v8 = 0xFFFFFFFFLL;
    v7 = -1;
    goto LABEL_21;
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_QWORD *)(StatusReg + 224);
  if ((a3 & 2) == 0 || (unsigned int *)v7 != object)
  {
    if (object && (a3 & 4) == 0)
      os_retain(object);
    if ((unsigned int *)v7 == object)
    {
      v8 = 0xFFFFFFFFLL;
      v7 = (uint64_t)object;
      goto LABEL_21;
    }
    *(_QWORD *)(StatusReg + 224) = object;
    if (object)
    {
      v9 = object[8];
      if (v7)
      {
LABEL_14:
        v10 = *(_DWORD *)(v7 + 32);
        goto LABEL_18;
      }
    }
    else
    {
      v9 = 0;
      if (v7)
        goto LABEL_14;
    }
    v10 = 0;
LABEL_18:
    if (v9 == v10)
      v8 = 0xFFFFFFFFLL;
    else
      v8 = v9;
    goto LABEL_21;
  }
  v8 = 0xFFFFFFFFLL;
  v7 = -1;
  if (object && (a3 & 4) != 0)
  {
    os_release(object);
    v8 = 0xFFFFFFFFLL;
  }
LABEL_21:
  if ((a3 & 8) == 0)
    _dispatch_set_priority_and_mach_voucher_slow(a1, v8);
  if (v7 != -1 && (a3 & 2) != 0)
  {
    if (v7)
      os_release((void *)v7);
    return -1;
  }
  return v7;
}

void _dispatch_async_redirect_invoke(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  unsigned int v9;
  int8x16_t *StatusReg;
  uint64_t v11;
  int8x16_t *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int8x16_t v29;
  unsigned int *v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int8x16_t v43;
  uint64_t v44;
  BOOL v45;
  unsigned int *v46;
  uint64_t v47;
  int8x16_t v48;

  v5 = *(_DWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(NSObject **)(a1 + 56);
  if (v5)
    v9 = a3 & 0xFCFFFFFF | v5;
  else
    v9 = a3;
  StatusReg = (int8x16_t *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v12 = StatusReg + 10;
  v11 = StatusReg[10].i64[0];
  if (v6)
  {
    v13 = StatusReg[12].i64[1];
    v14 = *(_DWORD *)(v6 + 84);
    v15 = v14 & 0xFFF0FFFF | ((WORD1(v13) & 0xF) << 16);
    StatusReg[10].i64[0] = v6;
    v16 = *(_DWORD *)(v7 + 84);
    if (v15)
    {
      v17 = (unsigned __int16)v16 >> 12;
      if ((v16 & 0xFFF) != 0)
      {
        v18 = v14 & 0x88000000 | ((WORD1(v13) & 0xF) << 16) & 0x880F0000;
        v19 = v14 & 0xFFF;
        if (v19 <= (*(_DWORD *)(v7 + 84) & 0xFFFu))
          v19 = *(_DWORD *)(v7 + 84) & 0xFFF;
        if (v17 <= v19 >> 8)
          v20 = 0x40000000;
        else
          v20 = 1140912128;
        v21 = v20 & v16;
        v22 = v18 | v19;
LABEL_21:
        v26 = v22 | v21;
        goto LABEL_32;
      }
      if ((v14 & 0xFFF) != 0)
        v27 = v15 | 0x40000000;
      else
        v27 = v14 & 0xFFF0FFFF | ((WORD1(v13) & 0xF) << 16);
      v26 = v27 & 0xFFFF0FFF | v16 & 0x400F000;
      if (v17 <= ((v27 >> 8) & 0xF))
        v26 = v27;
      goto LABEL_32;
    }
LABEL_67:
    v26 = v16 & 0xFFF0FFFF;
    goto LABEL_32;
  }
  v16 = *(_DWORD *)(v7 + 84);
  v13 = StatusReg[12].i64[1];
  if (!(_DWORD)v13)
    goto LABEL_67;
  v23 = (unsigned __int16)v16 >> 12;
  v24 = *(_DWORD *)(v7 + 84) & 0xFFF;
  if ((v16 & 0xFFF) != 0)
  {
    if (((unsigned __int16)v13 & 0xFFFu) > v24)
      v24 = v13 & 0xFFF;
    if (v23 <= v24 >> 8)
      v25 = 0x40000000;
    else
      v25 = 1140912128;
    v21 = v25 & v16;
    v22 = v13 & 0x880F0000 | v24;
    goto LABEL_21;
  }
  v28 = v13 | 0x40000000;
  if ((v13 & 0xFFF) == 0)
    v28 = StatusReg[12].i64[1];
  v26 = v28 & 0xFFFF0FFF | v16 & 0x400F000;
  if (v23 <= ((v28 >> 8) & 0xF))
    v26 = v28;
LABEL_32:
  StatusReg[12].i64[1] = v26;
  v29 = *v12;
  v48 = *v12;
  StatusReg[10].i64[0] = v7;
  StatusReg[10].i64[1] = (uint64_t)&v48;
  v30 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = -1;
  if (v30 != (unsigned int *)-1)
  {
    v31 = v30;
    if (v30)
      v31 = (unsigned int *)v30[8];
    if (MEMORY[0xFFFFFC100])
    {
      v47 = a2;
      kdebug_trace(771817480, v31, a1, 0, 0);
      a2 = v47;
    }
  }
  v32 = *(_QWORD *)(a1 + 8);
  if (v32 == -1)
  {
    v35 = 0;
  }
  else
  {
    v33 = StatusReg[12].i64[1];
    if (((v33 >> 8) & 0xF) != 0)
      v34 = 256 << ((BYTE1(v33) & 0xFu) - 1);
    else
      v34 = 0;
    v35 = v34 & 0xFFFFFFFFFFFFFF00 | StatusReg[12].i64[1];
    if ((v32 & 0xFFFFFF) != 0)
    {
      if ((v32 & 0xFFFFFFuLL) >= (v34 & 0xFFFFFF00)
        && ((v33 & 0x44000000) != 0 || (*(_QWORD *)(a1 + 8) & 0x10000000) != 0))
      {
        v35 = v32 & 0xFFFFFF;
      }
    }
    else if ((unsigned __int16)v33 >> 12)
    {
      v35 = (256 << (((unsigned __int16)v33 >> 12) - 1)) | 0xFF;
    }
  }
  v37 = v35 & 0xFFFFFFFF02FFFFFFLL;
  v38 = StatusReg[2].i64[0];
  if ((v38 & 0x1000000) != 0)
  {
    if (v37)
    {
LABEL_81:
      v46 = v30;
      v40 = a2;
      _dispatch_set_priority_and_voucher_slow(v37, v46, 6);
      goto LABEL_56;
    }
    v37 = v38 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v37 == (v38 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_52;
  }
  if (v37)
    goto LABEL_81;
LABEL_52:
  if (v30 == (unsigned int *)-1)
    goto LABEL_57;
  if ((unsigned int *)StatusReg[14].i64[0] != v30)
  {
    v37 = 0;
    goto LABEL_81;
  }
  if (!v30)
    goto LABEL_57;
  v39 = v30;
  v40 = a2;
  os_release(v39);
LABEL_56:
  a2 = v40;
LABEL_57:
  v41 = StatusReg[11].i64[0];
  if (v41)
    v42 = *(_DWORD *)(v41 + 8) + 1;
  else
    v42 = 1;
  if (v42 > _dispatch_continuation_cache_limit)
  {
    _dispatch_continuation_pop(v8, a2, v9, v7, v29);
    _dispatch_continuation_free_to_cache_limit(a1);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v41;
    *(_DWORD *)(a1 + 8) = v42;
    StatusReg[11].i64[0] = a1;
    _dispatch_continuation_pop(v8, a2, v9, v7, v29);
  }
  v43 = v48;
  *v12 = v48;
  if (v6)
    v12->i64[0] = v11;
  StatusReg[12].i64[1] = StatusReg[12].i64[1] & 0xF0000 | v13 & 0xFFF0FFFF;
  v44 = *(_QWORD *)(v7 + 24);
  if (*(_QWORD *)(v44 + 24) && v44 != v11)
  {
    do
    {
      _dispatch_lane_non_barrier_complete((unsigned __int16 *)v44, 0, v43);
      v44 = *(_QWORD *)(v44 + 24);
      if (*(_QWORD *)(v44 + 24))
        v45 = v44 == v11;
      else
        v45 = 1;
    }
    while (!v45);
  }
  _dispatch_lane_non_barrier_complete((unsigned __int16 *)v7, 1, v43);
}

void _dispatch_workloop_stealer_invoke(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int *v6;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v16;
  _QWORD *StatusReg;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v6 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = -1;
  if (v6 != (unsigned int *)-1 && (unsigned int *)((char *)v6 + 1) != 0)
  {
    v8 = v6;
    if (v6)
      v8 = (unsigned int *)v6[8];
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(771817480, v8, a1, 0, 0);
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (v9 == -1)
  {
    v12 = 0;
  }
  else
  {
    v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 200);
    if (((v10 >> 8) & 0xF) != 0)
      v11 = 256 << ((BYTE1(v10) & 0xFu) - 1);
    else
      v11 = 0;
    v12 = v11 & 0xFFFFFFFFFFFFFF00 | v10;
    v13 = v9 & 0xFFFFFF;
    if ((v9 & 0xFFFFFF) != 0)
    {
      if (v13 >= (v11 & 0xFFFFFF00))
      {
        v14 = v9 & 0x10000000;
        if ((v10 & 0x44000000) != 0 || v14 != 0)
          v12 = v13;
      }
    }
    else if ((unsigned __int16)v10 >> 12)
    {
      v12 = (256 << (((unsigned __int16)v10 >> 12) - 1)) | 0xFF;
    }
  }
  v16 = v12 & 0xFFFFFFFF02FFFFFFLL;
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v18 = StatusReg[4];
  if ((v18 & 0x1000000) != 0)
  {
    if (v16)
    {
LABEL_44:
      _dispatch_set_priority_and_voucher_slow(v16, v6, 6);
      goto LABEL_28;
    }
    v16 = v18 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v16 == (v18 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_24;
  }
  if (v16)
    goto LABEL_44;
LABEL_24:
  if (v6 == (unsigned int *)-1)
    goto LABEL_28;
  if ((unsigned int *)StatusReg[28] != v6)
  {
    v16 = 0;
    goto LABEL_44;
  }
  if (v6)
    os_release(v6);
LABEL_28:
  v19 = StatusReg[22];
  if (v19)
    v20 = *(_DWORD *)(v19 + 8) + 1;
  else
    v20 = 1;
  v21 = a1;
  if (v20 <= _dispatch_continuation_cache_limit)
  {
    v21 = 0;
    *(_QWORD *)(a1 + 16) = v19;
    *(_DWORD *)(a1 + 8) = v20;
    StatusReg[22] = a1;
  }
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 48) + 64))(*(_QWORD *)(a1 + 48), a2, a3 | 1u);
  if (v21)
    _dispatch_continuation_free_to_cache_limit(v21);
}

void _dispatch_queue_override_invoke(NSObject *a1, uint64_t a2, unsigned int a3, int8x16_t a4)
{
  _QWORD *StatusReg;
  Class isa;
  Class v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  Class v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19;
  objc_class *v20;
  int v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  int v26;
  unsigned int *v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  void (*v40)(void (**)(void));
  void (__cdecl *v41)(void *);
  uint64_t v42;
  void (*v43)(void (**)(void));
  _QWORD *v44;
  void (__cdecl *v45)(void *);
  NSObject *group;
  uint64_t v47;
  uint64_t v48;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  isa = a1[6].isa;
  v9 = a1[7].isa;
  v47 = StatusReg[25];
  v48 = StatusReg[20];
  StatusReg[25] = *((_DWORD *)v9 + 21) & 0xFFF0FFFF | ((WORD1(v47) & 0xF) << 16);
  StatusReg[20] = v9;
  v10 = *((_QWORD *)a1->isa + 5);
  v11 = (unsigned int *)a1[3].isa;
  a1[3].isa = (Class)-1;
  if (v11 != (unsigned int *)-1)
  {
    v12 = v11;
    if (v11)
      v12 = (unsigned int *)v11[8];
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(771817480, v12, a1, 0, 0);
  }
  v13 = a1[1].isa;
  if (v13 == (Class)-1)
  {
    v16 = 0;
  }
  else
  {
    v14 = StatusReg[25];
    if (((v14 >> 8) & 0xF) != 0)
      v15 = 256 << ((BYTE1(v14) & 0xFu) - 1);
    else
      v15 = 0;
    v16 = v15 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    if (((unint64_t)v13 & 0xFFFFFF) != 0)
    {
      if (((unint64_t)v13 & 0xFFFFFF) >= (v15 & 0xFFFFFF00)
        && ((v14 & 0x44000000) != 0 || ((uint64_t)a1[1].isa & 0x10000000) != 0))
      {
        v16 = (unint64_t)v13 & 0xFFFFFF;
      }
    }
    else if ((unsigned __int16)v14 >> 12)
    {
      v16 = (256 << (((unsigned __int16)v14 >> 12) - 1)) | 0xFF;
    }
  }
  v18 = v16 & 0xFFFFFFFF02FFFFFFLL;
  v19 = StatusReg[4];
  if ((v19 & 0x1000000) != 0)
  {
    if (v18)
    {
LABEL_106:
      _dispatch_set_priority_and_voucher_slow(v18, v11, 6);
      goto LABEL_25;
    }
    v18 = v19 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v18 == (v19 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_21;
  }
  if (v18)
    goto LABEL_106;
LABEL_21:
  if (v11 == (unsigned int *)-1)
    goto LABEL_25;
  if ((unsigned int *)StatusReg[28] != v11)
  {
    v18 = 0;
    goto LABEL_106;
  }
  if (v11)
    os_release(v11);
LABEL_25:
  if (v10 != 1792)
  {
    if (MEMORY[0xFFFFFC100])
      _dispatch_trace_item_pop_internal(v9, a1, a4);
    _dispatch_introspection_queue_item_dequeue(v9, a1);
  }
  v20 = (objc_class *)StatusReg[22];
  if (v20)
    v21 = *((_DWORD *)v20 + 2) + 1;
  else
    v21 = 1;
  v22 = a1;
  if (v21 <= _dispatch_continuation_cache_limit)
  {
    v22 = 0;
    a1[2].isa = v20;
    LODWORD(a1[1].isa) = v21;
    StatusReg[22] = a1;
  }
  v23 = *(_QWORD *)isa;
  if (*(_QWORD *)isa >= 0x1000uLL)
  {
    if (*(_QWORD *)(v23 + 40) == 1)
      (*(void (**)(Class, _QWORD, _QWORD))(v23 + 48))(isa, 0, (a3 >> 21) & 1);
    else
      (*(void (**)(Class, uint64_t, _QWORD))(v23 + 64))(isa, a2, (v10 == 1792) | a3);
    v26 = v47;
    v25 = v48;
    goto LABEL_91;
  }
  if ((a3 & 0x1000000) != 0)
  {
    v24 = objc_autoreleasePoolPush();
    v23 = *(_QWORD *)isa;
  }
  else
  {
    v24 = 0;
  }
  v27 = (unsigned int *)*((_QWORD *)isa + 3);
  if ((v23 & 4) != 0)
    *((_QWORD *)isa + 3) = -1;
  if (v27 != (unsigned int *)-1)
  {
    v28 = v27;
    if (v27)
      v28 = (unsigned int *)v27[8];
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(771817480, v28, isa, 0, 0);
  }
  v29 = *((_QWORD *)isa + 1);
  if (v29 == -1)
  {
    v32 = 0;
  }
  else
  {
    v30 = StatusReg[25];
    if (((v30 >> 8) & 0xF) != 0)
      v31 = 256 << ((BYTE1(v30) & 0xFu) - 1);
    else
      v31 = 0;
    v32 = v31 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    if ((v29 & 0xFFFFFF) != 0)
    {
      if ((v29 & 0xFFFFFFuLL) >= (v31 & 0xFFFFFF00)
        && ((v30 & 0x44000000) != 0 || (*((_QWORD *)isa + 1) & 0x10000000) != 0))
      {
        v32 = v29 & 0xFFFFFF;
      }
    }
    else if ((unsigned __int16)v30 >> 12)
    {
      v32 = (256 << (((unsigned __int16)v30 >> 12) - 1)) | 0xFF;
    }
  }
  v34 = v32 & 0xFFFFFFFF02FFFFFFLL;
  v35 = StatusReg[4];
  if ((v35 & 0x1000000) != 0)
  {
    if (v34)
      goto LABEL_122;
    v34 = v35 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v34 == (v35 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_64;
  }
  if (v34)
  {
LABEL_122:
    _dispatch_set_priority_and_voucher_slow(v34, v27, v23 & 4 | 2);
    if ((v23 & 0x200) == 0)
      goto LABEL_70;
    goto LABEL_73;
  }
LABEL_64:
  if (v27 == (unsigned int *)-1)
    goto LABEL_69;
  if ((unsigned int *)StatusReg[28] != v27)
  {
    v34 = 0;
    goto LABEL_122;
  }
  if ((v23 & 4) != 0 && v27)
    os_release(v27);
LABEL_69:
  if ((v23 & 0x200) == 0)
  {
LABEL_70:
    if (MEMORY[0xFFFFFC100])
      _dispatch_trace_item_pop_internal(v9, isa, a4);
    _dispatch_introspection_queue_item_dequeue(v9, isa);
  }
LABEL_73:
  if ((v23 & 4) != 0)
  {
    v37 = StatusReg[22];
    if (v37)
      v38 = *(_DWORD *)(v37 + 8) + 1;
    else
      v38 = 1;
    v36 = (uint64_t)isa;
    if (v38 <= _dispatch_continuation_cache_limit)
    {
      v36 = 0;
      *((_QWORD *)isa + 2) = v37;
      *((_DWORD *)isa + 2) = v38;
      StatusReg[22] = isa;
    }
  }
  else
  {
    v36 = 0;
  }
  if ((v23 & 8) != 0)
  {
    v42 = *(_QWORD *)(**((_QWORD **)isa + 6) + 40);
    if (v42 != 514)
      _dispatch_queue_override_invoke_cold_1(v42);
    group = *((_QWORD *)isa + 6);
    v43 = (void (*)(void (**)(void)))*((_QWORD *)isa + 4);
    v44 = (_QWORD *)*((_QWORD *)isa + 5);
    v45 = (void (__cdecl *)(void *))v43;
    if (v44)
    {
      v45 = (void (__cdecl *)(void *))*((_QWORD *)isa + 4);
      if (v43 == _dispatch_call_block_and_release)
        v45 = (void (__cdecl *)(void *))v44[2];
    }
    _dispatch_introspection_callout_entry(*((void **)isa + 5), v45);
    _dispatch_client_callout((uint64_t)v44, (uint64_t (*)(void))v43);
    _dispatch_introspection_callout_return(v44, v45);
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(772079660, isa, 0, 0, 0);
    _dispatch_introspection_queue_item_complete(isa);
    dispatch_group_leave(group);
  }
  else
  {
    v40 = (void (*)(void (**)(void)))*((_QWORD *)isa + 4);
    v39 = (_QWORD *)*((_QWORD *)isa + 5);
    v41 = (void (__cdecl *)(void *))v40;
    if (v39)
    {
      v41 = (void (__cdecl *)(void *))*((_QWORD *)isa + 4);
      if (v40 == _dispatch_call_block_and_release)
        v41 = (void (__cdecl *)(void *))v39[2];
    }
    _dispatch_introspection_callout_entry(*((void **)isa + 5), v41);
    _dispatch_client_callout((uint64_t)v39, (uint64_t (*)(void))v40);
    _dispatch_introspection_callout_return(v39, v41);
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(772079660, isa, 0, 0, 0);
    _dispatch_introspection_queue_item_complete(isa);
  }
  v25 = v48;
  if (v36)
    _dispatch_continuation_free_to_cache_limit(v36);
  v26 = v47;
  if (v24)
    objc_autoreleasePoolPop(v24);
LABEL_91:
  if (v10 != 1792)
  {
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(772079660, a1, 0, 0, 0);
    _dispatch_introspection_queue_item_complete(a1);
  }
  if (v22)
    _dispatch_continuation_free_to_cache_limit((uint64_t)v22);
  StatusReg[25] = StatusReg[25] & 0xF0000 | v26 & 0xFFF0FFFF;
  StatusReg[20] = v25;
}

void _dispatch_continuation_free_to_cache_limit(uint64_t a1)
{
  unint64_t StatusReg;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;

  _dispatch_continuation_free_to_heap(a1);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v2 = *(_QWORD *)(StatusReg + 176);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 8);
    if (v3 - _dispatch_continuation_cache_limit >= 1)
    {
      v4 = _dispatch_continuation_cache_limit - v3 + 1;
      do
      {
        v5 = v2;
        v2 = *(_QWORD *)(v2 + 16);
        _dispatch_continuation_free_to_heap(v5);
        if (!v4)
          break;
        ++v4;
      }
      while (v2);
      *(_QWORD *)(StatusReg + 176) = v2;
    }
  }
}

void _dispatch_continuation_pop(NSObject *a1, uint64_t a2, unsigned int a3, NSObject *a4, int8x16_t a5)
{
  _QWORD *StatusReg;
  void (**v10);
  Class isa;
  void *v12;
  unsigned int *v13;
  unsigned int *v14;
  Class v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  objc_class *v23;
  int v24;
  _QWORD *v25;
  void (*v26)(void (**)(void));
  void (__cdecl *v27)(void *);
  NSObject *v28;
  uint64_t v29;
  void (*v30)(void (**)(void));
  _QWORD *v31;
  void (__cdecl *v32)(void *);

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v10 = (void (**))StatusReg[24];
  if (v10)
    (*v10)(a4);
  isa = a1->isa;
  if (a1->isa >= (Class)&unk_1000)
  {
    if (*((_QWORD *)isa + 5) == 1)
      (*((void (**)(NSObject *, _QWORD, _QWORD))isa + 6))(a1, 0, (a3 >> 21) & 1);
    else
      (*((void (**)(NSObject *, uint64_t, _QWORD))isa + 8))(a1, a2, a3 & 0xFFFF0000);
    goto LABEL_57;
  }
  if ((a3 & 0x1000000) != 0)
  {
    v12 = objc_autoreleasePoolPush();
    isa = a1->isa;
  }
  else
  {
    v12 = 0;
  }
  v13 = (unsigned int *)a1[3].isa;
  if ((isa & 4) != 0)
    a1[3].isa = (Class)-1;
  if (v13 != (unsigned int *)-1)
  {
    v14 = v13;
    if (v13)
      v14 = (unsigned int *)v13[8];
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(771817480, v14, a1, 0, 0);
  }
  v15 = a1[1].isa;
  if (v15 == (Class)-1)
  {
    v18 = 0;
  }
  else
  {
    v16 = StatusReg[25];
    if (((v16 >> 8) & 0xF) != 0)
      v17 = 256 << ((BYTE1(v16) & 0xFu) - 1);
    else
      v17 = 0;
    v18 = v17 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    if (((unint64_t)v15 & 0xFFFFFF) != 0)
    {
      if (((unint64_t)v15 & 0xFFFFFF) >= (v17 & 0xFFFFFF00)
        && ((v16 & 0x44000000) != 0 || ((uint64_t)a1[1].isa & 0x10000000) != 0))
      {
        v18 = (unint64_t)v15 & 0xFFFFFF;
      }
    }
    else if ((unsigned __int16)v16 >> 12)
    {
      v18 = (256 << (((unsigned __int16)v16 >> 12) - 1)) | 0xFF;
    }
  }
  v20 = v18 & 0xFFFFFFFF02FFFFFFLL;
  v21 = StatusReg[4];
  if ((v21 & 0x1000000) != 0)
  {
    if (v20)
      goto LABEL_77;
    v20 = v21 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v20 == (v21 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_32;
  }
  if (v20)
  {
LABEL_77:
    _dispatch_set_priority_and_voucher_slow(v20, v13, isa & 4 | 2);
    if (((unsigned __int16)isa & 0x200) != 0)
      goto LABEL_41;
    goto LABEL_38;
  }
LABEL_32:
  if (v13 == (unsigned int *)-1)
    goto LABEL_37;
  if ((unsigned int *)StatusReg[28] != v13)
  {
    v20 = 0;
    goto LABEL_77;
  }
  if ((isa & 4) != 0 && v13)
    os_release(v13);
LABEL_37:
  if (((unsigned __int16)isa & 0x200) != 0)
    goto LABEL_41;
LABEL_38:
  if (MEMORY[0xFFFFFC100])
    _dispatch_trace_item_pop_internal(a4, a1, a5);
  _dispatch_introspection_queue_item_dequeue(a4, a1);
LABEL_41:
  if ((isa & 4) != 0)
  {
    v23 = (objc_class *)StatusReg[22];
    if (v23)
      v24 = *((_DWORD *)v23 + 2) + 1;
    else
      v24 = 1;
    v22 = a1;
    if (v24 <= _dispatch_continuation_cache_limit)
    {
      v22 = 0;
      a1[2].isa = v23;
      LODWORD(a1[1].isa) = v24;
      StatusReg[22] = a1;
    }
  }
  else
  {
    v22 = 0;
  }
  if ((isa & 8) != 0)
  {
    v28 = a1[6].isa;
    v29 = *((_QWORD *)v28->isa + 5);
    if (v29 != 514)
    {
      qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected object type";
      qword_61258 = v29;
      __break(1u);
      return;
    }
    v30 = (void (*)(void (**)(void)))a1[4].isa;
    v31 = a1[5].isa;
    v32 = (void (__cdecl *)(void *))v30;
    if (v31)
    {
      v32 = (void (__cdecl *)(void *))a1[4].isa;
      if (v30 == _dispatch_call_block_and_release)
        v32 = (void (__cdecl *)(void *))v31[2];
    }
    _dispatch_introspection_callout_entry(a1[5].isa, v32);
    _dispatch_client_callout((uint64_t)v31, (uint64_t (*)(void))v30);
    _dispatch_introspection_callout_return(v31, v32);
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(772079660, a1, 0, 0, 0);
    _dispatch_introspection_queue_item_complete(a1);
    dispatch_group_leave(v28);
    if (!v22)
    {
LABEL_55:
      if (!v12)
        goto LABEL_57;
      goto LABEL_56;
    }
  }
  else
  {
    v26 = (void (*)(void (**)(void)))a1[4].isa;
    v25 = a1[5].isa;
    v27 = (void (__cdecl *)(void *))v26;
    if (v25)
    {
      v27 = (void (__cdecl *)(void *))a1[4].isa;
      if (v26 == _dispatch_call_block_and_release)
        v27 = (void (__cdecl *)(void *))v25[2];
    }
    _dispatch_introspection_callout_entry(a1[5].isa, v27);
    _dispatch_client_callout((uint64_t)v25, (uint64_t (*)(void))v26);
    _dispatch_introspection_callout_return(v25, v27);
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(772079660, a1, 0, 0, 0);
    _dispatch_introspection_queue_item_complete(a1);
    if (!v22)
      goto LABEL_55;
  }
  _dispatch_continuation_free_to_cache_limit((uint64_t)v22);
  if (v12)
LABEL_56:
    objc_autoreleasePoolPop(v12);
LABEL_57:
  if (v10)
    v10[1](a4);
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  void *v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  if ((flags & 0xFFFFFF00) != 0)
    return 0;
  v5 = flags | 0x40000000;
  if ((flags & 0xA) == 0)
    v5 = flags;
  if ((v5 & 0x20) != 0)
    v6 = v5 & 0xFFFFFFFFFFFFFFEFLL;
  else
    v6 = v5;
  if ((v6 & 0x80000000) != 0)
  {
    v8 = 0;
    v7 = v6;
  }
  else if ((v6 & 2) != 0)
  {
    v8 = 0;
    v7 = v6 | 0x80000000;
  }
  else if ((v6 & 0x40) != 0)
  {
    v7 = v6 | 0x80000000;
    v8 = -1;
  }
  else
  {
    if ((v6 & 4) == 0)
    {
      v8 = 0;
      v9 = 0;
      goto LABEL_23;
    }
    v7 = v6 | 0x80000000;
    v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  }
  v9 = 0;
  if ((v6 & 4) == 0 || (v7 & 0x40000000) != 0)
  {
    v6 = v7;
  }
  else
  {
    v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) & 0xFFFFFFLL;
    if (v10 >= 0x10FF)
      v9 = 4351;
    else
      v9 = v10;
    v6 = v7 | 0x40000000;
  }
LABEL_23:
  v2 = _dispatch_block_create(v6, (void *)v8, v9, block);
  v11 = *((_QWORD *)block + 2);
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
  if (MEMORY[0xFFFFFC100])
  {
    v14 = v9 | (v12 << 32);
    v15 = 0xFFFFFFFFLL;
    if ((flags & 0x40000000) != 0)
      v15 = 0;
    kdebug_trace(772079628, v2, v11, v15 | (flags << 32), v14);
  }
  return v2;
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  void *v4;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  if ((flags & 0xFFFFFF00) != 0)
    return 0;
  v4 = 0;
  if (qos_class > QOS_CLASS_USER_INTERACTIVE || ((1 << qos_class) & 0x202220221) == 0)
    return v4;
  if (relative_priority != 0 && relative_priority < 0xFFFFFFF1)
    return 0;
  v6 = flags;
  v7 = flags | 0x40000000;
  v8 = _pthread_qos_class_encode(*(_QWORD *)&qos_class, *(_QWORD *)&relative_priority, 0);
  v9 = 0;
  if ((v6 & 0x20) != 0)
    v10 = v7 & 0xFFFFFFFFFFFFFFEFLL;
  else
    v10 = v7;
  v11 = v10;
  if ((v10 & 0x80000000) != 0)
  {
LABEL_16:
    if ((v10 & 4) == 0)
    {
LABEL_23:
      v14 = v8;
      v10 = v11;
      goto LABEL_24;
    }
LABEL_17:
    if ((v11 & 0x40000000) == 0)
    {
      v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) & 0xFFFFFFLL;
      if (v13 >= 0x10FF)
        v14 = 4351;
      else
        v14 = v13;
      v10 = v11 | 0x40000000;
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if ((v10 & 2) != 0)
  {
    v9 = 0;
    v11 = v10 | 0x80000000;
    goto LABEL_16;
  }
  if ((v10 & 0x40) != 0)
  {
    v11 = v10 | 0x80000000;
    v9 = -1;
    if ((v10 & 4) == 0)
      goto LABEL_23;
    goto LABEL_17;
  }
  if ((v10 & 4) != 0)
  {
    v11 = v10 | 0x80000000;
    v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
    goto LABEL_17;
  }
  v9 = 0;
  v14 = v8;
LABEL_24:
  v4 = _dispatch_block_create(v10, (void *)v9, v14, block);
  v15 = *((_QWORD *)block + 2);
  v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
  if (MEMORY[0xFFFFFC100])
  {
    v17 = v4;
    kdebug_trace(772079628, v4, v15, v8 | (v7 << 32), v14 | (v16 << 32));
    return v17;
  }
  return v4;
}

void *dispatch_block_create_with_voucher(uint64_t a1, void *a2, void *aBlock)
{
  void *v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  if ((a1 & 0xFFFFFF00) != 0)
    return 0;
  v5 = a1;
  v6 = a1 & 0xFFFFFFFF7FFFFFBFLL | 0x80000000;
  v7 = a1 & 0xFFFFFFFF3FFFFFBFLL | 0xC0000000;
  if ((a1 & 0xA) == 0)
    v7 = a1 & 0xFFFFFFFF7FFFFFBFLL | 0x80000000;
  if ((v7 & 0x20) != 0)
    v8 = v7 & 0xFFFFFFFFFFFFFFEFLL;
  else
    v8 = v7;
  if (a2 == (void *)-3)
    a2 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if ((v8 & 0x40000004) == 4)
  {
    v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) & 0xFFFFFFLL;
    if (v9 >= 0x10FF)
      v10 = 4351;
    else
      v10 = v9;
    v8 |= 0x40000000uLL;
  }
  else
  {
    v10 = 0;
  }
  v3 = _dispatch_block_create(v8, a2, v10, aBlock);
  v11 = *((_QWORD *)aBlock + 2);
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
  if (MEMORY[0xFFFFFC100])
  {
    v14 = v10 | (v12 << 32);
    v15 = 0xFFFFFFFFLL;
    if ((v5 & 0x40000000) != 0)
      v15 = 0;
    kdebug_trace(772079628, v3, v11, v15 | (v6 << 32), v14);
  }
  return v3;
}

void *dispatch_block_create_with_voucher_and_qos_class(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v5;
  char v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  if ((a1 & 0xFFFFFF00) != 0)
    return 0;
  v5 = 0;
  if (a3 <= 0x21 && ((1 << a3) & 0x202220221) != 0)
  {
    if ((_DWORD)a4 != 0 && a4 < 0xFFFFFFF1)
    {
      return 0;
    }
    else
    {
      v8 = a1;
      v9 = a1 & 0xFFFFFFFF3FFFFFB7 | 0xC0000000;
      v10 = _pthread_qos_class_encode(a3, a4, 0);
      if ((v8 & 0x20) != 0)
        v11 = v9 & 0xFFFFFFFFFFFFFFEFLL;
      else
        v11 = v9;
      if (a2 == (void *)-3)
        a2 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
      v5 = _dispatch_block_create(v11, a2, v10, a5);
      v12 = a5[2];
      v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
      if (MEMORY[0xFFFFFC100])
      {
        v14 = v5;
        kdebug_trace(772079628, v5, v12, v10 | (v9 << 32), v10 | (v13 << 32));
        return v14;
      }
    }
  }
  return v5;
}

void dispatch_block_perform(dispatch_block_flags_t flags, dispatch_block_t block)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[2];
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  dispatch_block_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((flags & 0xFFFFFF00) != 0)
    dispatch_block_perform_cold_1(flags);
  v2 = flags | 0x40000000;
  if ((flags & 0xA) == 0)
    v2 = flags;
  if ((v2 & 0x20) != 0)
    v2 &= ~0x10uLL;
  v4[0] = 3512316172;
  v4[1] = v2 | ((v2 & 2) << 30);
  v5 = 8;
  v6 = 0;
  if ((v2 & 2) != 0)
    v3 = 0;
  else
    v3 = -1;
  v7 = 0;
  v8 = v3;
  v11 = 0;
  v12 = 0;
  v9 = block;
  v10 = 0;
  _dispatch_block_invoke_direct((uint64_t)v4);
}

void _dispatch_block_invoke_direct(uint64_t a1)
{
  uint64_t v1;
  int v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  _BOOL4 v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *StatusReg;
  uint64_t v13;
  _QWORD *v14;
  void (__cdecl *v15)(void *);
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 4) != 0)
    _dispatch_block_invoke_direct_cold_1(*(_DWORD *)(a1 + 16));
  if ((v2 & 1) != 0)
  {
LABEL_27:
    if ((v2 & 8) != 0)
      return;
    goto LABEL_28;
  }
  v4 = 0;
  if ((v1 & 0x40000000) != 0)
  {
    v5 = 0;
    if ((v1 & 0x30) != 0x10)
    {
      v6 = *(_QWORD *)(a1 + 24);
      v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) & 0xFFFFFFLL;
      v8 = v7 != 0;
      v9 = v7 < (v6 & 0xFFFFFFuLL);
      v10 = v6 & 0xFFFFFFFF02FFFFFFLL;
      if (v8 && v9)
        v4 = v7;
      else
        v4 = 0;
      if (v8 && v9)
        v5 = v10;
      else
        v5 = 0;
    }
    if ((v1 & 0x80000000) == 0)
      goto LABEL_12;
  }
  else
  {
    v5 = 0;
    if ((v1 & 0x80000000) == 0)
    {
LABEL_12:
      v11 = -1;
      goto LABEL_15;
    }
  }
  v11 = *(_QWORD *)(a1 + 32);
LABEL_15:
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v13 = StatusReg[4];
  if ((v13 & 0x1000000) != 0)
  {
    if (v5)
    {
LABEL_43:
      v11 = _dispatch_set_priority_and_voucher_slow(v5, (unsigned int *)v11, 0);
      goto LABEL_21;
    }
    v5 = v13 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v5 == (v13 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_17;
  }
  if (v5)
    goto LABEL_43;
LABEL_17:
  if (v11 == -1)
    goto LABEL_21;
  if (StatusReg[28] != v11)
  {
    v5 = 0;
    goto LABEL_43;
  }
  if (v11)
    os_retain((void *)v11);
LABEL_21:
  *(_DWORD *)(a1 + 64) = StatusReg[3];
  v14 = *(_QWORD **)(a1 + 40);
  v15 = (void (__cdecl *)(void *))v14[2];
  _dispatch_introspection_callout_entry(v14, v15);
  _dispatch_client_callout((uint64_t)v14, (uint64_t (*)(void))v15);
  _dispatch_introspection_callout_return(v14, v15);
  v16 = StatusReg[4];
  if ((v16 & 0x1000000) != 0)
  {
    if (v4)
      goto LABEL_45;
    v4 = v16 & 0xFFFFFFFFFEFFFFFFLL;
LABEL_40:
    if (v4)
      goto LABEL_45;
    goto LABEL_23;
  }
  if (v4 != (v16 & 0xFFFFFFFF77FFFFFFLL))
    goto LABEL_40;
LABEL_23:
  if (v11 == -1)
    goto LABEL_27;
  if (StatusReg[28] == v11)
  {
    if (v11)
      os_release((void *)v11);
    goto LABEL_27;
  }
  v4 = 0;
LABEL_45:
  _dispatch_set_priority_and_voucher_slow(v4, (unsigned int *)v11, 6);
  if ((v2 & 8) != 0)
    return;
LABEL_28:
  v17 = (unsigned int *)(a1 + 20);
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  if (!v18)
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

unsigned int *_dispatch_block_sync_invoke(uint64_t a1, const char *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD *StatusReg;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unint64_t *v18;
  unsigned int *result;
  unsigned int *v20;
  int v21;
  unint64_t v22;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3 != 3512316172)
    _dispatch_continuation_get_function_symbol_cold_1(v3);
  v4 = *(_DWORD *)(a1 + 48);
  if ((v4 & 4) != 0)
    _dispatch_block_invoke_direct_cold_1(*(_DWORD *)(a1 + 48));
  if ((v4 & 1) != 0)
  {
LABEL_21:
    if ((v4 & 8) != 0)
      goto LABEL_26;
    goto LABEL_22;
  }
  if ((*(_QWORD *)(a1 + 40) & 0x80000000) == 0)
  {
    v5 = -1;
    goto LABEL_16;
  }
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = StatusReg[25];
  v8 = 256 << ((BYTE1(v7) & 0xFu) - 1);
  if (((v7 >> 8) & 0xF) == 0)
    v8 = 0;
  v9 = (unsigned __int16)v7 >> 12 == 0;
  v5 = *(_QWORD *)(a1 + 64);
  v10 = v8 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
  v11 = (256 << (((v7 >> 12) & 0xF) - 1)) | 0xFF;
  if (v9)
    v11 = v10;
  v12 = v11 & 0xFFFFFFFF02FFFFFFLL;
  v13 = StatusReg[4];
  if ((v13 & 0x1000000) != 0)
  {
    if (v12)
    {
LABEL_47:
      v5 = _dispatch_set_priority_and_voucher_slow(v12, *(unsigned int **)(a1 + 64), 0);
      goto LABEL_16;
    }
    v12 = v13 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v12 == (v13 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_12;
  }
  if (v12)
    goto LABEL_47;
LABEL_12:
  if (v5 == -1)
    goto LABEL_16;
  if (StatusReg[28] != v5)
  {
    v12 = 0;
    goto LABEL_47;
  }
  if (v5)
    os_retain(*(void **)(a1 + 64));
LABEL_16:
  (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  v14 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v15 = *(_QWORD *)(v14 + 32);
  if ((v15 & 0x1000000) == 0 || (v22 = v15 & 0xFFFFFFFFFEFFFFFFLL, (v15 & 0xFFFFFFFFFEFFFFFFLL) == 0))
  {
    if (v5 == -1)
      goto LABEL_21;
    if (*(_QWORD *)(v14 + 224) == v5)
    {
      if (v5)
        os_release((void *)v5);
      goto LABEL_21;
    }
    v22 = 0;
  }
  _dispatch_set_priority_and_voucher_slow(v22, (unsigned int *)v5, 6);
  if ((v4 & 8) != 0)
    goto LABEL_26;
LABEL_22:
  v16 = (unsigned int *)(a1 + 52);
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  if (!v17)
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 80));
LABEL_26:
  v18 = (unint64_t *)(a1 + 88);
  do
    result = (unsigned int *)__ldxr(v18);
  while (__stxr(0, v18));
  if (result)
  {
    if (result[2] != 0x7FFFFFFF)
    {
      v20 = result + 2;
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
      if (v21 <= 2)
      {
        if (v21 != 2)
          _os_object_allows_weak_reference_cold_1();
        return (unsigned int *)_os_object_dispose(result, a2);
      }
    }
  }
  return result;
}

void dispatch_block_cancel(dispatch_block_t block)
{
  unsigned int *v1;
  unsigned int v2;

  if (*((void (**)(uint64_t))block + 2) != ___dispatch_block_create_block_invoke)
    dispatch_block_cancel_cold_2();
  if (*((_QWORD *)block + 4) != 3512316172)
    _dispatch_continuation_get_function_symbol_cold_1(*((_QWORD *)block + 4));
  v1 = (unsigned int *)((char *)block + 48);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 | 1, v1));
}

intptr_t dispatch_block_testcancel(dispatch_block_t block)
{
  if (*((void (**)(uint64_t))block + 2) != ___dispatch_block_create_block_invoke)
    dispatch_block_testcancel_cold_2();
  if (*((_QWORD *)block + 4) != 3512316172)
    _dispatch_continuation_get_function_symbol_cold_1(*((_QWORD *)block + 4));
  return *((_DWORD *)block + 12) & 1;
}

intptr_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  uint64_t v3;
  char *v4;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  intptr_t v17;
  unsigned int v18;
  unsigned int v19;

  if (*((void (**)(uint64_t))block + 2) != ___dispatch_block_create_block_invoke)
    dispatch_block_wait_cold_4();
  v4 = (char *)block + 32;
  v3 = *((_QWORD *)block + 4);
  if (v3 != 3512316172)
    _dispatch_continuation_get_function_symbol_cold_1(v3);
  v6 = (unsigned int *)((char *)block + 48);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 | 2, v6));
  if ((v7 & 6) != 0)
    dispatch_block_wait_cold_2(v7);
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
  v9 = (unint64_t *)((char *)block + 88);
  do
    v10 = __ldxr(v9);
  while (__stxr(0, v9));
  if (v10)
  {
    v11 = __clz(__rbit32((v8 >> 8) & 0x3FFF));
    if (((v8 >> 8) & 0x3FFF) != 0)
      v12 = v11 + 1;
    else
      v12 = 0;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 80))(v10, v12, 9);
  }
  v13 = *((unsigned int *)block + 24);
  if ((_DWORD)v13)
  {
    _pthread_qos_override_start_direct(*((unsigned int *)block + 24), v8, v4);
    v14 = v10 == 0;
  }
  else
  {
    v14 = 1;
  }
  v15 = *((_DWORD *)block + 13);
  if (!v14 || v15 >= 2)
    dispatch_block_wait_cold_1(v15);
  v17 = dispatch_group_wait(*((dispatch_group_t *)block + 10), timeout);
  if ((_DWORD)v13)
    _pthread_qos_override_end_direct(v13, v4);
  if (v17)
  {
    do
      v18 = __ldxr(v6);
    while (__stxr(v18 & 0xFFFFFFFD, v6));
  }
  else
  {
    do
      v19 = __ldxr(v6);
    while (__stxr(v19 | 4, v6));
  }
  return v17;
}

void dispatch_block_notify(dispatch_block_t block, dispatch_queue_t queue, dispatch_block_t notification_block)
{
  if (*((void (**)(uint64_t))block + 2) != ___dispatch_block_create_block_invoke)
    dispatch_block_notify_cold_3((uint64_t)block);
  if (*((_QWORD *)block + 4) != 3512316172)
    _dispatch_continuation_get_function_symbol_cold_1(*((_QWORD *)block + 4));
  if (*((int *)block + 13) >= 2)
    dispatch_block_notify_cold_1(*((_DWORD *)block + 13));
  dispatch_group_notify(*((dispatch_group_t *)block + 10), queue, notification_block);
}

uint64_t *_dispatch_continuation_init_slow(uint64_t *result, unsigned int *a2, int a3)
{
  unsigned int *v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  int v13;
  unint64_t *v14;
  int v16;
  void (*v17)(_QWORD *);
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;

  v4 = a2;
  v5 = result;
  v6 = result[5];
  if (*(void (**)(uint64_t))(v6 + 16) != ___dispatch_block_create_block_invoke)
  {
    v7 = 0;
LABEL_4:
    v10 = v7[1];
    v11 = *result;
    v12 = a2 + 2;
    if (a2[2] != 0x7FFFFFFF)
    {
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if (v13 <= 0)
      {
        qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
        __break(1u);
LABEL_45:
        kdebug_trace(771817476, v4, v5, 0, 0);
LABEL_41:
        *v5 = v11 | (2 * (v10 & 1)) | 0x20;
        v22 = __clz(__rbit32((*((_DWORD *)v5 + 2) >> 8) & 0x3FFF));
        if (((*((_DWORD *)v5 + 2) >> 8) & 0x3FFF) != 0)
          return (uint64_t *)(v22 + 1);
        else
          return 0;
      }
    }
    v14 = v7 + 7;
    while (!__ldxr(v14))
    {
      if (!__stxr((unint64_t)a2, v14))
        goto LABEL_14;
    }
    __clrex();
    if (*v12 != 0x7FFFFFFF)
    {
      do
        v16 = __ldxr(v12);
      while (__stlxr(v16 - 2, v12));
      if (v16 <= 2)
      {
        if (v16 != 2)
          goto LABEL_49;
        _os_object_dispose(a2, (const char *)a2);
      }
    }
LABEL_14:
    v17 = _dispatch_block_async_invoke_and_release;
    if ((v11 & 4) == 0)
      v17 = _dispatch_block_async_invoke;
    v5[4] = (uint64_t)v17;
    v18 = v10 | a3;
    if ((v10 & 0x40000000) != 0)
    {
      v19 = v7[3];
    }
    else
    {
      if ((v18 & 0x40000000) != 0)
      {
        v20 = 0;
        goto LABEL_30;
      }
      v19 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
      if ((unsigned __int16)(v19 >> 8) > 0x10uLL)
      {
        v20 = 4351;
LABEL_22:
        if ((v18 & 0x20) != 0)
        {
          v20 |= 0x10000000uLL;
        }
        else
        {
          v21 = (v4[21] >> 30) & 1;
          if ((v4[21] & 0xFFF) == 0)
            v21 = 1;
          if (!v21)
            v20 = 0;
        }
LABEL_30:
        v5[1] = v20;
        if ((v10 & 0x80000000) != 0)
        {
          v4 = (unsigned int *)v7[4];
          if ((unint64_t)v4 + 1 < 2)
          {
LABEL_37:
            v5[3] = (uint64_t)v4;
            if (v4 == (unsigned int *)-1)
              goto LABEL_41;
            if (v4)
              v4 = (unsigned int *)v4[8];
            if (!MEMORY[0xFFFFFC100])
              goto LABEL_41;
            goto LABEL_45;
          }
        }
        else
        {
          if ((v18 & 0x40) != 0)
          {
            v4 = 0;
            goto LABEL_37;
          }
          v4 = *(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
          if (!v4)
            goto LABEL_37;
        }
        os_retain(v4);
        goto LABEL_37;
      }
    }
    v20 = v19 & 0xFFFFFF;
    if (!v20)
      goto LABEL_30;
    goto LABEL_22;
  }
  v9 = *(_QWORD *)(v6 + 32);
  v7 = (_QWORD *)(v6 + 32);
  v8 = v9;
  if (v9 == 3512316172)
    goto LABEL_4;
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption of dispatch block object";
  qword_61258 = v8;
  __break(1u);
LABEL_49:
  qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
  return result;
}

void _dispatch_block_async_invoke_and_release(_QWORD *a1)
{
  _dispatch_block_async_invoke2(a1, (_BYTE *)&dword_0 + 1);
}

void _dispatch_block_async_invoke(_QWORD *a1)
{
  _dispatch_block_async_invoke2(a1, 0);
}

void dispatch_barrier_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  int8x16_t v3;
  unint64_t StatusReg;
  NSObject *v6;
  unint64_t v7;
  objc_class *v8;
  int isa_high;
  uint64_t v10;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = *(NSObject **)(StatusReg + 176);
  if (!v6)
  {
    _dispatch_async_f_slow((uint64_t)queue, (objc_class *)context, (objc_class *)work, 0, 6);
    return;
  }
  *(StatusReg + 176) = v6[2];
  v6->isa = (Class)(&stru_B8 + 78);
  v6[4].isa = (Class)work;
  v6[5].isa = (Class)context;
  if ((*(_QWORD *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF)
    v7 = 4351;
  else
    v7 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
  v8 = *(objc_class **)(StatusReg + 224);
  if (v8)
    os_retain(*(void **)(StatusReg + 224));
  v6[3].isa = v8;
  if (v8 == (objc_class *)-1)
    goto LABEL_11;
  if (v8)
    v8 = (objc_class *)*((unsigned int *)v8 + 8);
  if (MEMORY[0xFFFFFC100])
  {
    kdebug_trace(771817476, v8, v6, 0, 0);
    if (v7)
      goto LABEL_12;
  }
  else
  {
LABEL_11:
    if (v7)
    {
LABEL_12:
      isa_high = HIDWORD(queue[10].isa);
      if ((isa_high & 0x40000000) != 0 || (isa_high & 0xFFF) == 0)
      {
        v10 = __clz(__rbit32(v7 >> 8)) + 1;
      }
      else
      {
        v10 = 0;
        v7 = 0;
      }
      goto LABEL_16;
    }
  }
  v10 = 0;
LABEL_16:
  v6[1].isa = (Class)v7;
  if (MEMORY[0xFFFFFC100])
    _dispatch_trace_item_push_internal(queue, v6, v3);
  _dispatch_introspection_queue_item_enqueue(queue, v6);
  (*((void (**)(dispatch_queue_t, NSObject *, uint64_t))queue->isa + 11))(queue, v6, v10);
}

uint64_t _dispatch_async_f_slow(uint64_t a1, objc_class *a2, objc_class *a3, char a4, uint64_t a5)
{
  NSObject *v10;
  int8x16_t v11;
  unint64_t StatusReg;
  unint64_t v13;
  unsigned int *v14;
  int v15;
  uint64_t v16;

  v10 = _dispatch_continuation_alloc_from_heap();
  v10->isa = (Class)(a5 | 0x100);
  v10[4].isa = a3;
  v10[5].isa = a2;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if ((*(_QWORD *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF)
    v13 = 4351;
  else
    v13 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
  if ((a4 & 0x40) != 0)
  {
    v14 = 0;
  }
  else
  {
    v14 = *(unsigned int **)(StatusReg + 224);
    if (v14)
      os_retain(*(void **)(StatusReg + 224));
  }
  v10[3].isa = (Class)v14;
  if (v14 != (unsigned int *)-1)
  {
    if (v14)
      v14 = (unsigned int *)v14[8];
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817476, v14, v10, 0, 0);
      if (v13)
        goto LABEL_13;
LABEL_25:
      v16 = 0;
      goto LABEL_19;
    }
  }
  if (!v13)
    goto LABEL_25;
LABEL_13:
  if ((a4 & 0x20) != 0)
  {
    v13 |= 0x10000000uLL;
  }
  else
  {
    v15 = *(_DWORD *)(a1 + 84);
    if ((v15 & 0x40000000) == 0 && (v15 & 0xFFF) != 0)
    {
      v16 = 0;
      v13 = 0;
      goto LABEL_19;
    }
  }
  v16 = __clz(__rbit32(v13 >> 8)) + 1;
LABEL_19:
  v10[1].isa = (Class)v13;
  if ((BYTE1(v10->isa) & 2) == 0)
  {
    if (MEMORY[0xFFFFFC100])
      _dispatch_trace_item_push_internal((_QWORD *)a1, v10, v11);
    _dispatch_introspection_queue_item_enqueue(a1, v10);
  }
  return (*(uint64_t (**)(uint64_t, NSObject *, uint64_t))(*(_QWORD *)a1 + 88))(a1, v10, v16);
}

uint64_t _dispatch_barrier_async_detached_f(NSObject *a1, objc_class *a2, objc_class *a3)
{
  unint64_t StatusReg;
  NSObject *v7;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(NSObject **)(StatusReg + 176);
  if (v7)
    *(StatusReg + 176) = v7[2];
  else
    v7 = _dispatch_continuation_alloc_from_heap();
  v7[4].isa = a3;
  v7[5].isa = a2;
  v7[3].isa = (Class)-1;
  *(_OWORD *)&v7->isa = xmmword_3FEB0;
  if (MEMORY[0xFFFFFC100])
    _dispatch_trace_item_push_internal(a1, v7, (int8x16_t)xmmword_3FEB0);
  _dispatch_introspection_queue_item_enqueue(a1, v7);
  return (*((uint64_t (**)(NSObject *, NSObject *, _QWORD))a1->isa + 11))(a1, v7, 0);
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
  unint64_t StatusReg;
  uint64_t *v5;
  void *v6;
  int8x16_t v7;
  void (*v8)(uint64_t);
  unint64_t v9;
  uint64_t v10;
  int isa_high;
  uint64_t *inited;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(uint64_t **)(StatusReg + 176);
  if (v5)
    *(_QWORD *)(StatusReg + 176) = v5[2];
  else
    v5 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
  v6 = _dispatch_Block_copy(block);
  v8 = (void (*)(uint64_t))*((_QWORD *)block + 2);
  *v5 = 278;
  if (v8 != ___dispatch_block_create_block_invoke)
  {
    v5[4] = (uint64_t)_dispatch_call_block_and_release;
    v5[5] = (uint64_t)v6;
    if ((*(_QWORD *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF)
      v9 = 4351;
    else
      v9 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
    v10 = *(_QWORD *)(StatusReg + 224);
    if (v10)
      os_retain(*(void **)(StatusReg + 224));
    v5[3] = v10;
    if (v10 == -1)
      goto LABEL_13;
    if (v10)
      v10 = *(unsigned int *)(v10 + 32);
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817476, v10, v5, 0, 0);
      if (v9)
        goto LABEL_14;
    }
    else
    {
LABEL_13:
      if (v9)
      {
LABEL_14:
        isa_high = HIDWORD(queue[10].isa);
        if ((isa_high & 0x40000000) != 0 || (isa_high & 0xFFF) == 0)
        {
          inited = (uint64_t *)(__clz(__rbit32(v9 >> 8)) + 1);
        }
        else
        {
          inited = 0;
          v9 = 0;
        }
        goto LABEL_18;
      }
    }
    inited = 0;
LABEL_18:
    v5[1] = v9;
    goto LABEL_19;
  }
  v5[5] = (uint64_t)v6;
  inited = _dispatch_continuation_init_slow(v5, (unsigned int *)queue, 0);
LABEL_19:
  if (MEMORY[0xFFFFFC100])
    _dispatch_trace_item_push_internal(queue, v5, v7);
  _dispatch_introspection_queue_item_enqueue(queue, v5);
  (*((void (**)(dispatch_queue_t, uint64_t *, uint64_t *))queue->isa + 11))(queue, v5, inited);
}

void dispatch_channel_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  int8x16_t v3;
  unint64_t StatusReg;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int isa_high;
  uint64_t v10;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = *(_QWORD *)(StatusReg + 176);
  if (!v6)
  {
    _dispatch_async_f_slow((uint64_t)queue, (objc_class *)context, (objc_class *)work, 0, 4);
    return;
  }
  *(_QWORD *)(StatusReg + 176) = *(_QWORD *)(v6 + 16);
  *(_QWORD *)v6 = 260;
  *(_QWORD *)(v6 + 32) = work;
  *(_QWORD *)(v6 + 40) = context;
  if ((*(_QWORD *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF)
    v7 = 4351;
  else
    v7 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
  v8 = *(_QWORD *)(StatusReg + 224);
  if (v8)
    os_retain(*(void **)(StatusReg + 224));
  *(_QWORD *)(v6 + 24) = v8;
  if (v8 == -1)
    goto LABEL_11;
  if (v8)
    v8 = *(unsigned int *)(v8 + 32);
  if (MEMORY[0xFFFFFC100])
  {
    kdebug_trace(771817476, v8, v6, 0, 0);
    if (v7)
      goto LABEL_12;
  }
  else
  {
LABEL_11:
    if (v7)
    {
LABEL_12:
      isa_high = HIDWORD(queue[10].isa);
      if ((isa_high & 0x40000000) != 0 || (isa_high & 0xFFF) == 0)
      {
        v10 = __clz(__rbit32(v7 >> 8)) + 1;
      }
      else
      {
        v10 = 0;
        v7 = 0;
      }
      goto LABEL_16;
    }
  }
  v10 = 0;
LABEL_16:
  *(_QWORD *)(v6 + 8) = v7;
  if ((*(_BYTE *)(v6 + 1) & 2) == 0)
  {
    if (MEMORY[0xFFFFFC100])
      _dispatch_trace_item_push_internal(queue, (_QWORD *)v6, v3);
    _dispatch_introspection_queue_item_enqueue(queue, v6);
  }
  (*((void (**)(dispatch_queue_t, uint64_t, uint64_t))queue->isa + 11))(queue, v6, v10);
}

uint64_t dispatch_async_enforce_qos_class_f(NSObject *a1, objc_class *a2, objc_class *a3, int8x16_t a4)
{
  unint64_t StatusReg;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = *(_QWORD *)(StatusReg + 176);
  if (!v6)
    return _dispatch_async_f_slow((uint64_t)a1, a2, a3, 32, 4);
  *(_QWORD *)(StatusReg + 176) = *(_QWORD *)(v6 + 16);
  *(_QWORD *)v6 = 260;
  *(_QWORD *)(v6 + 32) = a3;
  *(_QWORD *)(v6 + 40) = a2;
  if ((*(_QWORD *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF)
    v7 = 4351;
  else
    v7 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
  v8 = *(_QWORD *)(StatusReg + 224);
  if (v8)
    os_retain(*(void **)(StatusReg + 224));
  *(_QWORD *)(v6 + 24) = v8;
  if (v8 != -1)
  {
    if (v8)
      v8 = *(unsigned int *)(v8 + 32);
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(771817476, v8, v6, 0, 0);
  }
  v9 = v7 | 0x10000000;
  v10 = __clz(__rbit32((v7 | 0x10000000uLL) >> 8));
  if (v7)
    v11 = v10 + 1;
  else
    v11 = 0;
  if (!v7)
    v9 = 0;
  *(_QWORD *)(v6 + 8) = v9;
  if ((*(_BYTE *)(v6 + 1) & 2) == 0)
  {
    if (MEMORY[0xFFFFFC100])
      _dispatch_trace_item_push_internal(a1, (_QWORD *)v6, a4);
    _dispatch_introspection_queue_item_enqueue(a1, v6);
  }
  return (*((uint64_t (**)(NSObject *, uint64_t, uint64_t))a1->isa + 11))(a1, v6, v11);
}

void dispatch_channel_async(dispatch_queue_t queue, dispatch_block_t block)
{
  unint64_t StatusReg;
  NSObject *v5;
  objc_class *v6;
  int8x16_t v7;
  void (*v8)(uint64_t);
  unint64_t v9;
  unsigned int *v10;
  int isa_high;
  uint64_t *inited;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(NSObject **)(StatusReg + 176);
  if (v5)
    *(StatusReg + 176) = v5[2];
  else
    v5 = _dispatch_continuation_alloc_from_heap();
  v6 = (objc_class *)_dispatch_Block_copy(block);
  v8 = (void (*)(uint64_t))*((_QWORD *)block + 2);
  v5->isa = (Class)(&stru_108 + 12);
  if (v8 != ___dispatch_block_create_block_invoke)
  {
    v5[4].isa = (Class)_dispatch_call_block_and_release;
    v5[5].isa = v6;
    if ((*(_QWORD *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF)
      v9 = 4351;
    else
      v9 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
    v10 = *(unsigned int **)(StatusReg + 224);
    if (v10)
      os_retain(*(void **)(StatusReg + 224));
    v5[3].isa = (Class)v10;
    if (v10 == (unsigned int *)-1)
      goto LABEL_13;
    if (v10)
      v10 = (unsigned int *)v10[8];
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817476, v10, v5, 0, 0);
      if (v9)
        goto LABEL_14;
    }
    else
    {
LABEL_13:
      if (v9)
      {
LABEL_14:
        isa_high = HIDWORD(queue[10].isa);
        if ((isa_high & 0x40000000) != 0 || (isa_high & 0xFFF) == 0)
        {
          inited = (uint64_t *)(__clz(__rbit32(v9 >> 8)) + 1);
        }
        else
        {
          inited = 0;
          v9 = 0;
        }
        goto LABEL_18;
      }
    }
    inited = 0;
LABEL_18:
    v5[1].isa = (Class)v9;
    goto LABEL_19;
  }
  v5[5].isa = v6;
  inited = _dispatch_continuation_init_slow((uint64_t *)v5, (unsigned int *)queue, 0);
LABEL_19:
  if ((BYTE1(v5->isa) & 2) == 0)
  {
    if (MEMORY[0xFFFFFC100])
      _dispatch_trace_item_push_internal(queue, v5, v7);
    _dispatch_introspection_queue_item_enqueue(queue, v5);
  }
  (*((void (**)(dispatch_queue_t, NSObject *, uint64_t *))queue->isa + 11))(queue, v5, inited);
}

unint64_t *_dispatch_barrier_trysync_or_async_f(unint64_t *a1, _QWORD *context, uint64_t (*function)(void), char a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  int v10;

  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  v5 = (unint64_t)*((unsigned __int16 *)a1 + 40) << 41;
  v6 = v4 & 0xFFFFFFFC | ((unint64_t)(a4 & 1) << 58);
  v7 = a1 + 7;
  do
  {
    v8 = __ldaxr(v7);
    if (v8 != (v8 & 0x3000000000) - v5 + 0x20000000000000)
    {
      __clrex();
      return (unint64_t *)_dispatch_barrier_async_detached_f(a1, (objc_class *)context, (objc_class *)function);
    }
  }
  while (__stxr(v8 & 0x3000000000 | v6 | 0x60000000000002, v7));
  if ((a4 & 1) == 0)
    return (unint64_t *)_dispatch_barrier_trysync_or_async_f_complete(a1, context, function, a4);
  if (*((_DWORD *)a1 + 2) == 0x7FFFFFFF)
    return (unint64_t *)_dispatch_barrier_trysync_or_async_f_complete(a1, context, function, a4);
  v9 = (unsigned int *)(a1 + 1);
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 2, v9));
  if (v10 > 0)
    return (unint64_t *)_dispatch_barrier_trysync_or_async_f_complete(a1, context, function, a4);
  qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
  __break(1u);
  return a1;
}

uint64_t _dispatch_barrier_trysync_or_async_f_complete(unint64_t *a1, _QWORD *context, uint64_t (*function)(void), char a4)
{
  unint64_t StatusReg;
  _OWORD *v9;
  void (__cdecl *v10)(void *);
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v15;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v9 = (_OWORD *)(StatusReg + 160);
  v15 = *(_OWORD *)(StatusReg + 160);
  *(_QWORD *)(StatusReg + 160) = a1;
  *(_QWORD *)(StatusReg + 168) = &v15;
  v10 = (void (__cdecl *)(void *))function;
  if (context)
  {
    v10 = (void (__cdecl *)(void *))function;
    if ((char *)function == (char *)_dispatch_call_block_and_release)
      v10 = (void (__cdecl *)(void *))context[2];
  }
  _dispatch_introspection_callout_entry(context, v10);
  _dispatch_client_callout((uint64_t)context, function);
  _dispatch_introspection_callout_return(context, v10);
  *v9 = v15;
  if ((a4 & 1) != 0)
  {
    v12 = a1 + 7;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 - 0x400000000000000, v12));
    if (v13 >> 55 == 8)
      v11 = 5;
    else
      v11 = 4;
  }
  else
  {
    v11 = 4;
  }
  return (*(uint64_t (**)(unint64_t *, _QWORD, uint64_t))(*a1 + 80))(a1, 0, v11);
}

void dispatch_barrier_sync_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  uint64_t (*v3)(void);
  NSObject *v4;
  _QWORD *v5;
  int8x16_t v6;
  uint64_t v7;
  int isa;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;

  if (*((_BYTE *)queue->isa + 40) != 17
    || (v3 = (uint64_t (*)(void))work,
        v5 = context,
        v4 = queue,
        v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24),
        isa = (int)queue[10].isa,
        (isa & 0x1000000) != 0)
    && (isa = (int)queue[10].isa, (isa & 0x40000) != 0))
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Queue type doesn't support dispatch_sync";
    __break(1u);
LABEL_13:
    _dispatch_sync_recurse((uint64_t)v4, v5, v3, 2uLL, v6);
  }
  else
  {
    v9 = (unint64_t)(unsigned __int16)isa << 41;
    v10 = v7 & 0xFFFFFFFC;
    v11 = (unint64_t *)&queue[7];
    do
    {
      v12 = __ldaxr(v11);
      if (v12 != (v12 & 0x3000000000) - v9 + 0x20000000000000)
      {
        __clrex();
        _dispatch_sync_f_slow((unsigned __int16 *)queue, context, (uint64_t (*)(void))work, 2uLL, (uint64_t)queue, 2, v6);
        return;
      }
    }
    while (__stxr(v10 | v12 & 0x3000000000 | 0x60000000000002, v11));
    if (*((_QWORD *)queue[3].isa + 3))
      goto LABEL_13;
    if (byte_61298)
      _dispatch_introspection_order_record((uint64_t)queue);
    v13 = _dispatch_introspection_queue_fake_sync_push_pop(v4, (uint64_t)v5, (uint64_t)v3, 2);
    _dispatch_lane_barrier_sync_invoke_and_complete((uint64_t)v4, v5, v3, v13);
  }
}

void dispatch_sync_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  int8x16_t v3;
  unint64_t *v6;
  unint64_t v7;
  NSObject *v8;
  unsigned __int16 *v9;
  NSObject *v10;

  if (LOWORD(queue[10].isa) == 1)
  {
    _dispatch_barrier_sync_f((uint64_t)queue, context, (uint64_t (*)(void))work, 0, v3);
  }
  else if (*((_BYTE *)queue->isa + 40) != 17
         || ((uint64_t)queue[10].isa & 0x1000000) != 0 && ((uint64_t)queue[10].isa & 0x40000) != 0)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Queue type doesn't support dispatch_sync";
    __break(1u);
LABEL_17:
    _dispatch_sync_recurse((uint64_t)queue, context, (uint64_t (*)(void))work, 0, v3);
  }
  else if (queue[6].isa)
  {
LABEL_15:
    _dispatch_sync_f_slow((unsigned __int16 *)queue, context, (uint64_t (*)(void))work, 0, (uint64_t)queue, 0, v3);
  }
  else
  {
    v6 = (unint64_t *)&queue[7];
    do
    {
      v7 = __ldxr(v6);
      if ((v7 & 0xFFC0018000000000) != 0)
      {
        __clrex();
        goto LABEL_15;
      }
    }
    while (__stxr(v7 + 0x20000000000, v6));
    if (*((_QWORD *)queue[3].isa + 3))
      goto LABEL_17;
    if (byte_61298)
    {
      v8 = queue;
      _dispatch_introspection_order_record((uint64_t)queue);
      queue = v8;
    }
    v9 = (unsigned __int16 *)queue;
    v10 = _dispatch_introspection_queue_fake_sync_push_pop(queue, (uint64_t)context, (uint64_t)work, 0);
    _dispatch_sync_invoke_and_complete(v9, context, (uint64_t (*)(void))work, v10);
  }
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  int8x16_t v2;
  uint64_t (*v3)(void);

  v3 = (uint64_t (*)(void))*((_QWORD *)block + 2);
  if ((char *)v3 == (char *)___dispatch_block_create_block_invoke)
    _dispatch_sync_block_with_privdata((unsigned int *)queue, (uint64_t)block, 18, v2);
  else
    _dispatch_barrier_sync_f((uint64_t)queue, block, v3, 18, v2);
}

void _dispatch_sync_block_with_privdata(unsigned int *a1, uint64_t a2, uint64_t a3, int8x16_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BOOL4 v14;
  _BOOL4 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t StatusReg;
  uint64_t v19;
  unsigned int *v20;
  int v21;
  unint64_t v22;
  unint64_t *v23;
  int v25;

  if (*(void (**)(uint64_t))(a2 + 16) != ___dispatch_block_create_block_invoke)
  {
    v7 = 0;
    goto LABEL_4;
  }
  v7 = (_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 32);
  if (v8 == 3512316172)
  {
LABEL_4:
    v9 = 0;
    v10 = v7[1];
    if ((v10 & 1) != 0)
      v11 = 34;
    else
      v11 = 32;
    if ((v10 & 0x40000000) != 0)
    {
      v12 = 0;
      if ((v7[1] & 0x30) != 0x10)
      {
        v12 = v7[3];
        v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) & 0xFFFFFFLL;
        v14 = v13 != 0;
        v15 = v13 < (v12 & 0xFFFFFFuLL);
        v9 = v14 && v15 ? v13 : 0;
        if (!v14 || !v15)
          v12 = 0;
      }
      if ((v10 & 0x80000000) == 0)
        goto LABEL_15;
    }
    else
    {
      v12 = 0;
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        v16 = -1;
        goto LABEL_18;
      }
    }
    v16 = v7[4];
LABEL_18:
    v17 = v12 & 0xFFFFFFFF02FFFFFFLL;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v19 = *(_QWORD *)(StatusReg + 32);
    if ((v19 & 0x1000000) != 0)
    {
      if (v17)
        goto LABEL_54;
      v17 = v19 & 0xFFFFFFFFFEFFFFFFLL;
    }
    else if (v17 == (v19 & 0xFFFFFFFF77FFFFFFLL))
    {
LABEL_20:
      if (v16 == -1)
        goto LABEL_24;
      if (*(_QWORD *)(StatusReg + 224) == v16)
      {
        if (v16)
          os_retain((void *)v16);
LABEL_24:
        v20 = a1 + 2;
        if (a1[2] == 0x7FFFFFFF)
          goto LABEL_27;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 2, v20));
        if (v21 > 0)
        {
LABEL_27:
          v22 = v11 | a3;
          v23 = v7 + 7;
          while (!__ldxr(v23))
          {
            if (!__stxr((unint64_t)a1, v23))
              goto LABEL_34;
          }
          __clrex();
          if (*v20 != 0x7FFFFFFF)
          {
            do
              v25 = __ldxr(v20);
            while (__stlxr(v25 - 2, v20));
            if (v25 <= 2)
            {
              if (v25 != 2)
                goto LABEL_60;
              _os_object_dispose(a1, (const char *)a2);
            }
          }
LABEL_34:
          if ((v22 & 2) != 0)
            _dispatch_barrier_sync_f((uint64_t)a1, (_QWORD *)a2, (uint64_t (*)(void))_dispatch_block_sync_invoke, v22, a4);
          else
            _dispatch_sync_f((uint64_t)a1, (_QWORD *)a2, (uint64_t (*)(void))_dispatch_block_sync_invoke, v22, a4);
          v20 = *(unsigned int **)(StatusReg + 32);
          if ((v20 & 0x1000000) == 0)
          {
            if (v9 != ((unint64_t)v20 & 0xFFFFFFFF77FFFFFFLL))
              goto LABEL_51;
LABEL_39:
            if (v16 == -1)
              return;
            if (*(_QWORD *)(StatusReg + 224) == v16)
            {
              if (v16)
                os_release((void *)v16);
              return;
            }
            v9 = 0;
LABEL_56:
            _dispatch_set_priority_and_voucher_slow(v9, (unsigned int *)v16, 6);
            return;
          }
        }
        else
        {
          qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
          __break(1u);
        }
        if (v9)
          goto LABEL_56;
        v9 = (unint64_t)v20 & 0xFFFFFFFFFEFFFFFFLL;
LABEL_51:
        if (v9)
          goto LABEL_56;
        goto LABEL_39;
      }
      v17 = 0;
LABEL_54:
      v16 = _dispatch_set_priority_and_voucher_slow(v17, (unsigned int *)v16, 0);
      goto LABEL_24;
    }
    if (v17)
      goto LABEL_54;
    goto LABEL_20;
  }
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption of dispatch block object";
  qword_61258 = v8;
  __break(1u);
LABEL_60:
  qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
}

double _dispatch_barrier_sync_f(uint64_t a1, _QWORD *a2, uint64_t (*a3)(void), uint64_t a4, int8x16_t a5)
{
  uint64_t (*v5)(void);
  NSObject *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  double result;

  if (*(_BYTE *)(*(_QWORD *)a1 + 40) != 17
    || (v8 = a4,
        v5 = a3,
        v7 = a2,
        v6 = a1,
        v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24),
        v10 = *(_DWORD *)(a1 + 80),
        (v10 & 0x1000000) != 0)
    && (v10 = *(_DWORD *)(a1 + 80), (v10 & 0x40000) != 0))
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Queue type doesn't support dispatch_sync";
    __break(1u);
    return _dispatch_sync_recurse((uint64_t)v6, v7, v5, v8 | 2, a5);
  }
  else
  {
    v11 = (unint64_t)(unsigned __int16)v10 << 41;
    v12 = v9 & 0xFFFFFFFC;
    v13 = (unint64_t *)(a1 + 56);
    do
    {
      v14 = __ldaxr(v13);
      if (v14 != (v14 & 0x3000000000) - v11 + 0x20000000000000)
      {
        __clrex();
        return _dispatch_sync_f_slow((unsigned __int16 *)a1, a2, a3, 2uLL, a1, a4 | 2, a5);
      }
    }
    while (__stxr(v12 | v14 & 0x3000000000 | 0x60000000000002, v13));
    if (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24))
      return _dispatch_sync_recurse((uint64_t)v6, v7, v5, v8 | 2, a5);
    if (byte_61298)
      _dispatch_introspection_order_record(a1);
    v15 = _dispatch_introspection_queue_fake_sync_push_pop(v6, (uint64_t)v7, (uint64_t)v5, v8 | 2);
    _dispatch_lane_barrier_sync_invoke_and_complete((uint64_t)v6, v7, v5, v15);
  }
  return result;
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  int8x16_t v2;
  uint64_t (*v3)(void);

  v3 = (uint64_t (*)(void))*((_QWORD *)block + 2);
  if ((char *)v3 == (char *)___dispatch_block_create_block_invoke)
    _dispatch_sync_block_with_privdata((unsigned int *)queue, (uint64_t)block, 16, v2);
  else
    _dispatch_sync_f((uint64_t)queue, block, v3, 0x10uLL, v2);
}

double _dispatch_sync_f(uint64_t a1, _QWORD *a2, uint64_t (*a3)(void), unint64_t a4, int8x16_t a5)
{
  double result;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  NSObject *v12;

  if (*(_WORD *)(a1 + 80) == 1)
    return _dispatch_barrier_sync_f(a1, a2, a3, a4, a5);
  if (*(_BYTE *)(*(_QWORD *)a1 + 40) != 17
    || (*(_DWORD *)(a1 + 80) & 0x1000000) != 0 && (*(_DWORD *)(a1 + 80) & 0x40000) != 0)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Queue type doesn't support dispatch_sync";
    __break(1u);
    return _dispatch_sync_recurse(a1, a2, a3, a4, a5);
  }
  else if (*(_QWORD *)(a1 + 48))
  {
    return _dispatch_sync_f_slow((unsigned __int16 *)a1, a2, a3, 0, a1, a4, a5);
  }
  else
  {
    v8 = (unint64_t *)(a1 + 56);
    do
    {
      v9 = __ldxr(v8);
      if ((v9 & 0xFFC0018000000000) != 0)
      {
        __clrex();
        return _dispatch_sync_f_slow((unsigned __int16 *)a1, a2, a3, 0, a1, a4, a5);
      }
    }
    while (__stxr(v9 + 0x20000000000, v8));
    if (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24))
      return _dispatch_sync_recurse(a1, a2, a3, a4, a5);
    if (byte_61298)
    {
      v10 = a1;
      _dispatch_introspection_order_record(a1);
      a1 = v10;
    }
    v11 = (unsigned __int16 *)a1;
    v12 = _dispatch_introspection_queue_fake_sync_push_pop(a1, (uint64_t)a2, (uint64_t)a3, a4);
    _dispatch_sync_invoke_and_complete(v11, a2, a3, v12);
  }
  return result;
}

void dispatch_async_and_wait_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  int8x16_t v3;
  objc_class *v4;

  if (queue[3].isa)
  {
    if (LOWORD(queue[10].isa) == 1)
      v4 = (objc_class *)(&stru_68 + 26);
    else
      v4 = (objc_class *)(&stru_68 + 24);
    _dispatch_async_and_wait_f((objc_class *)queue, (objc_class *)context, (objc_class *)work, v4, v3);
  }
  else
  {
    _dispatch_sync_function_invoke((uint64_t)queue, context, (uint64_t (*)(void))work);
  }
}

double _dispatch_sync_function_invoke(uint64_t a1, _QWORD *context, uint64_t (*function)(void))
{
  unint64_t StatusReg;
  _OWORD *v6;
  void (__cdecl *v7)(void *);
  double result;
  __int128 v9;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = (_OWORD *)(StatusReg + 160);
  v9 = *(_OWORD *)(StatusReg + 160);
  *(_QWORD *)(StatusReg + 160) = a1;
  *(_QWORD *)(StatusReg + 168) = &v9;
  v7 = (void (__cdecl *)(void *))function;
  if (context)
  {
    v7 = (void (__cdecl *)(void *))function;
    if ((char *)function == (char *)_dispatch_call_block_and_release)
      v7 = (void (__cdecl *)(void *))context[2];
  }
  _dispatch_introspection_callout_entry(context, v7);
  _dispatch_client_callout((uint64_t)context, function);
  _dispatch_introspection_callout_return(context, v7);
  result = *(double *)&v9;
  *v6 = v9;
  return result;
}

void _dispatch_async_and_wait_f(objc_class *a1, objc_class *a2, objc_class *a3, objc_class *a4, int8x16_t a5)
{
  unint64_t StatusReg;
  uint64_t v6;
  int v7;
  NSObject v8[12];
  int v9;
  int v10;
  uint64_t v11;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = *(_QWORD *)(StatusReg + 32);
  v7 = *(_DWORD *)(StatusReg + 24);
  v11 = 0;
  v8[0].isa = a4;
  v8[1].isa = (Class)(v6 | 0x10000000);
  v8[2].isa = 0;
  v8[3] = *(StatusReg + 224);
  v8[4].isa = (Class)_dispatch_async_and_wait_invoke;
  v8[5].isa = (Class)v8;
  v8[6].isa = 0;
  v8[7].isa = a1;
  v8[8].isa = a3;
  v8[10].isa = 0;
  v8[11].isa = 0;
  v8[9].isa = a2;
  v9 = 0;
  v10 = v7;
  _dispatch_async_and_wait_recurse((uint64_t)a1, v8, v7, (unint64_t)a4, a5);
}

void dispatch_barrier_async_and_wait_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  int8x16_t v3;

  if (queue[3].isa)
    _dispatch_async_and_wait_f((objc_class *)queue, (objc_class *)context, (objc_class *)work, (objc_class *)&stru_68.segname[10], v3);
  else
    _dispatch_sync_function_invoke((uint64_t)queue, context, (uint64_t (*)(void))work);
}

void dispatch_barrier_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
  int8x16_t v2;
  objc_class *v3;

  if (queue[3].isa)
  {
    v3 = (objc_class *)*((_QWORD *)block + 2);
    if (v3 == (objc_class *)___dispatch_block_create_block_invoke)
      _dispatch_async_and_wait_block_with_privdata((unsigned int *)queue, (uint64_t)block, 146, v2);
    else
      _dispatch_async_and_wait_f((objc_class *)queue, (objc_class *)block, v3, (objc_class *)((char *)&stru_68.size + 2), v2);
  }
  else
  {
    dispatch_barrier_sync(queue, block);
  }
}

void _dispatch_async_and_wait_block_with_privdata(unsigned int *a1, uint64_t a2, uint64_t a3, int8x16_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  objc_class **v13;
  objc_class *v14;
  unsigned int *v15;
  int v16;
  unint64_t *v17;
  uint64_t v19;
  int v20;
  NSObject v21[12];
  int v22;
  int v23;
  uint64_t v24;

  if (*(void (**)(uint64_t))(a2 + 16) == ___dispatch_block_create_block_invoke)
  {
    v7 = a2 + 32;
    v8 = *(_QWORD *)(a2 + 32);
    if (v8 != 3512316172)
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption of dispatch block object";
      qword_61258 = v8;
      __break(1u);
      goto LABEL_31;
    }
  }
  else
  {
    v7 = 0;
  }
  v9 = *(_QWORD *)(v7 + 8);
  if ((v9 & 0x40000000) == 0
    || (*(_QWORD *)(v7 + 8) & 0x30) == 0x10
    || ((v10 = *(_QWORD *)(v7 + 24),
         (v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) & 0xFFFFFFLL) != 0)
      ? (v12 = v11 >= (v10 & 0xFFFFFFuLL))
      : (v12 = 1),
        v12))
  {
    v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
  }
  v13 = (objc_class **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if ((int)v9 < 0)
    v13 = (objc_class **)(v7 + 32);
  v14 = *v13;
  v15 = a1 + 2;
  if (a1[2] == 0x7FFFFFFF)
    goto LABEL_17;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 2, v15));
  if (v16 > 0)
  {
LABEL_17:
    v17 = (unint64_t *)(v7 + 56);
    while (!__ldxr(v17))
    {
      if (!__stxr((unint64_t)a1, v17))
        goto LABEL_24;
    }
    __clrex();
    if (*v15 == 0x7FFFFFFF)
      goto LABEL_24;
    do
      LODWORD(v7) = __ldxr(v15);
    while (__stlxr(v7 - 2, v15));
    if ((int)v7 > 2)
      goto LABEL_24;
  }
  else
  {
    qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
  }
  if ((_DWORD)v7 != 2)
  {
LABEL_31:
    qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
    __break(1u);
    return;
  }
  _os_object_dispose(a1, (const char *)a2);
LABEL_24:
  v19 = 34;
  if ((v9 & 1) == 0)
    v19 = 32;
  v20 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  v21[0].isa = (Class)(v19 | a3);
  v21[1].isa = (Class)(v10 | 0x10000000);
  v21[2].isa = 0;
  v21[3].isa = v14;
  v21[4].isa = (Class)_dispatch_async_and_wait_invoke;
  v21[5].isa = (Class)v21;
  v21[6].isa = 0;
  v21[7].isa = (Class)a1;
  v21[8].isa = (Class)_dispatch_block_sync_invoke;
  v21[10].isa = 0;
  v21[11].isa = 0;
  v21[9].isa = (Class)a2;
  v22 = 0;
  v23 = v20;
  v24 = 0;
  _dispatch_async_and_wait_recurse((uint64_t)a1, v21, v20, v19 | a3, a4);
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
  int8x16_t v2;
  objc_class *v3;
  objc_class *v4;

  if (queue[3].isa)
  {
    if (LOWORD(queue[10].isa) == 1)
      v3 = (objc_class *)(&stru_68 + 42);
    else
      v3 = (objc_class *)(&stru_68 + 40);
    v4 = (objc_class *)*((_QWORD *)block + 2);
    if (v4 == (objc_class *)___dispatch_block_create_block_invoke)
      _dispatch_async_and_wait_block_with_privdata((unsigned int *)queue, (uint64_t)block, (uint64_t)v3, v2);
    else
      _dispatch_async_and_wait_f((objc_class *)queue, (objc_class *)block, v4, v3, v2);
  }
  else
  {
    dispatch_sync(queue, block);
  }
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
  Class isa;
  uint64_t v9;
  uint64_t v10;
  unint64_t StatusReg;
  unsigned int v13;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  objc_class *v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int v21;
  unsigned int v22;

  if (key)
  {
    isa = queue[11].isa;
    v9 = *((_QWORD *)queue->isa + 5);
    LODWORD(v10) = v9;
    if (v9 != 17)
      goto LABEL_8;
    v10 = v9 & 0x20000;
    if (v9 != 394769 && v10 != 0)
    {
      do
      {
        qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Queue doesn't support dispatch_queue_set_specific";
        __break(1u);
LABEL_8:
        ;
      }
      while ((_DWORD)v10 != 18);
    }
    if (!context || isa)
    {
      if (!isa)
        return;
    }
    else
    {
      _dispatch_queue_init_specific((uint64_t)queue);
      isa = queue[11].isa;
    }
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v13 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    while (!__ldaxr((unsigned int *)isa))
    {
      if (!__stxr(v13, (unsigned int *)isa))
        goto LABEL_18;
    }
    __clrex();
    _dispatch_unfair_lock_lock_slow((uint64_t)isa, 0x10000);
LABEL_18:
    v15 = (void *)*((_QWORD *)isa + 1);
    if (v15)
    {
      while (*(const void **)v15 != key)
      {
        v15 = (void *)*((_QWORD *)v15 + 3);
        if (!v15)
          goto LABEL_21;
      }
      v18 = (objc_class *)*((_QWORD *)v15 + 2);
      if (v18)
        _dispatch_barrier_async_detached_f(&off_65340, *((objc_class **)v15 + 1), v18);
      if (context)
      {
        *((_QWORD *)v15 + 1) = context;
        *((_QWORD *)v15 + 2) = destructor;
      }
      else
      {
        v19 = *((_QWORD *)v15 + 3);
        v20 = (_QWORD *)*((_QWORD *)v15 + 4);
        if (v19)
        {
          *(_QWORD *)(v19 + 32) = v20;
          v20 = (_QWORD *)*((_QWORD *)v15 + 4);
        }
        else
        {
          *((_QWORD *)isa + 2) = v20;
        }
        *v20 = v19;
        free(v15);
      }
    }
    else
    {
LABEL_21:
      if (context)
      {
        v16 = _dispatch_calloc(1uLL, 0x28uLL);
        *v16 = key;
        v16[1] = context;
        v16[2] = destructor;
        v16[3] = 0;
        v17 = (_QWORD *)*((_QWORD *)isa + 2);
        v16[4] = v17;
        *v17 = v16;
        *((_QWORD *)isa + 2) = v16 + 3;
      }
    }
    v21 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    do
      v22 = __ldxr((unsigned int *)isa);
    while (__stlxr(0, (unsigned int *)isa));
    if (v22 != v21)
      _dispatch_unfair_lock_unlock_slow((uint64_t)isa, v22);
  }
}

void _dispatch_queue_init_specific(uint64_t a1)
{
  _QWORD *v2;
  unint64_t *v3;

  v2 = _dispatch_calloc(1uLL, 0x18uLL);
  v2[1] = 0;
  v2[2] = v2 + 1;
  v3 = (unint64_t *)(a1 + 88);
  while (!__ldxr(v3))
  {
    if (!__stlxr((unint64_t)v2, v3))
      return;
  }
  __clrex();
  _dispatch_queue_specific_head_dispose(v2);
}

void *__cdecl dispatch_queue_get_specific(dispatch_queue_t queue, const void *key)
{
  void *v2;
  Class isa;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v7;
  unint64_t StatusReg;
  unsigned int v10;
  void **v12;
  unsigned int v13;
  unsigned int v14;

  v2 = (void *)key;
  if (key)
  {
    isa = queue[11].isa;
    v4 = *((_QWORD *)queue->isa + 5);
    v5 = v4;
    v7 = (v4 & 0x20000) == 0 || v4 == 394769;
    if (v5 != 17)
      v7 = v5 == 18;
    if (!v7 || isa == 0)
    {
      return 0;
    }
    else
    {
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v10 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
      while (!__ldaxr((unsigned int *)isa))
      {
        if (!__stxr(v10, (unsigned int *)isa))
          goto LABEL_19;
      }
      __clrex();
      _dispatch_unfair_lock_lock_slow((uint64_t)isa, 0x10000);
LABEL_19:
      v12 = (void **)*((_QWORD *)isa + 1);
      if (v12)
      {
        while (*v12 != v2)
        {
          v12 = (void **)v12[3];
          if (!v12)
            goto LABEL_22;
        }
        v2 = v12[1];
      }
      else
      {
LABEL_22:
        v2 = 0;
      }
      v13 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
      do
        v14 = __ldxr((unsigned int *)isa);
      while (__stlxr(0, (unsigned int *)isa));
      if (v14 != v13)
        _dispatch_unfair_lock_unlock_slow((uint64_t)isa, v14);
    }
  }
  return v2;
}

void *__cdecl dispatch_get_specific(const void *key)
{
  void *v1;
  unint64_t StatusReg;
  _QWORD *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v9;
  unsigned int v11;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;

  v1 = 0;
  if (key)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    for (i = *(_QWORD **)(StatusReg + 160); i; i = (_QWORD *)i[3])
    {
      v5 = i[11];
      v6 = *(_QWORD *)(*i + 40);
      v7 = v6;
      v9 = (v6 & 0x20000) == 0 || v6 == 394769;
      if (v7 != 17)
        v9 = v7 == 18;
      if (!v9 || v5 == 0)
      {
        v1 = 0;
      }
      else
      {
        v11 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        while (!__ldaxr((unsigned int *)v5))
        {
          if (!__stxr(v11, (unsigned int *)v5))
            goto LABEL_20;
        }
        __clrex();
        _dispatch_unfair_lock_lock_slow(v5, 0x10000);
LABEL_20:
        v13 = *(_QWORD *)(v5 + 8);
        if (v13)
        {
          while (*(const void **)v13 != key)
          {
            v13 = *(_QWORD *)(v13 + 24);
            if (!v13)
              goto LABEL_23;
          }
          v1 = *(void **)(v13 + 8);
        }
        else
        {
LABEL_23:
          v1 = 0;
        }
        v14 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        do
          v15 = __ldxr((unsigned int *)v5);
        while (__stlxr(0, (unsigned int *)v5));
        if (v15 != v14)
          _dispatch_unfair_lock_unlock_slow(v5, v15);
      }
      if (v1)
        break;
    }
  }
  return v1;
}

uint64_t dispatch_queue_set_label_nocopy(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    if ((*(_DWORD *)(result + 80) & 0x200000) != 0)
      dispatch_queue_set_label_nocopy_cold_1(result);
    *(_QWORD *)(result + 72) = a2;
  }
  return result;
}

uint64_t _dispatch_queue_compute_priority_and_wlh(uint64_t a1, uint64_t *a2)
{
  int v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;

  v2 = *(_DWORD *)(a1 + 84);
  v3 = (unsigned __int16)v2 >> 12;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = -4;
  if ((*(_QWORD *)(a1 + 56) & 0x2000000000) != 0)
    v5 = a1;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 40);
  if ((v6 & 0x10000) == 0)
  {
    v16 = (unsigned int *)(a1 + 80);
    v7 = *(_DWORD *)(a1 + 84) & 0xFFF;
    while ((__objc2_class **)v4 != &_dispatch_mgr_q)
    {
      if ((*(_DWORD *)(v4 + 80) & 0x40000) != 0 && (*(_DWORD *)(v4 + 80) & 0x1000000) == 0)
      {
        if (a2)
          *a2 = -4;
        return *(unsigned int *)(v4 + 84);
      }
      if (*(_QWORD *)(v4 + 56) >> 55)
        goto LABEL_44;
      if ((*(_QWORD *)(v4 + 56) & 0x2000000000) != 0)
      {
        v5 = v4;
        if (v6 == 18)
        {
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 & 0xFFBFFFFF, v16));
          v5 = v4;
        }
      }
      else if ((*(_DWORD *)(v4 + 80) & 0x400000) != 0)
      {
LABEL_44:
        if (MEMORY[0xFFFFFC100])
        {
          if (*(_BYTE *)(*(_QWORD *)a1 + 40) == 19)
            v20 = a1;
          else
            v20 = 0;
          kdebug_trace(771883024, a1, v20, 0, 0);
        }
        result = 0;
        if (a2)
          *a2 = 0;
        return result;
      }
      v18 = *(_DWORD *)(v4 + 84);
      v4 = *(_QWORD *)(v4 + 24);
      if ((v18 & 0x20000000) == 0)
      {
        if (!v3)
          v3 = (unsigned __int16)v18 >> 12;
        v19 = v18 & 0xFFF;
        if (v7 <= v19)
          v7 = v19;
        v6 = *(_QWORD *)(*(_QWORD *)v4 + 40);
        if ((v6 & 0x10000) == 0)
          continue;
      }
      goto LABEL_5;
    }
    if (a2)
      *a2 = -4;
    return 0x2000000;
  }
  v7 = *(_DWORD *)(a1 + 84) & 0xFFF;
LABEL_5:
  v8 = v4 < (unint64_t)&_dispatch_root_queues || v4 >= (unint64_t)&_dispatch_queue_serial_numbers;
  if (v8 && *(_QWORD *)(v4 + 64) != 22)
  {
    if (a2)
      *a2 = -4;
    return 0x2000000;
  }
  v9 = *(_DWORD *)(v4 + 84);
  v10 = (unsigned __int16)v9 >> 12;
  if (v3)
    v10 = v3;
  v11 = *(_DWORD *)(v4 + 84) & 0xFFF;
  if (v7 > v11)
    v11 = v7;
  result = v11 | v9 & 0x88000000;
  if ((v2 & 0x40000000) != 0 || (v2 & 0xFFF) == 0)
  {
    v13 = result | v2 & 0x40000000;
    v14 = v10 > ((v11 >> 8) & 0xF);
    v15 = v13 | ((v10 & 0xF) << 12) | 0x4000000;
    if (v14)
      result = v15;
    else
      result = v13;
  }
  if (a2)
    *a2 = v5;
  return result;
}

void dispatch_set_qos_class_floor(dispatch_object_t object, dispatch_qos_class_t qos_class, int relative_priority)
{
  unsigned int v3;
  unint64_t v4;
  int v5;
  uint64_t isa;

  if ((*((_QWORD *)object->isa + 5) & 0xF0) != 0x10)
    dispatch_set_qos_class_floor_cold_2();
  if (*((_QWORD *)object->isa + 5) == 18)
  {
    dispatch_workloop_set_qos_class_floor((uint64_t)object, qos_class, relative_priority, 0);
  }
  else
  {
    HIDWORD(v4) = qos_class - 5;
    LODWORD(v4) = qos_class - 5;
    v3 = v4 >> 2;
    if (v3 <= 7 && ((0xBBu >> v3) & 1) != 0)
      v5 = (relative_priority - 1) | dword_3FEE4[v3] | 0x40000000;
    else
      v5 = 0;
    HIDWORD(object[10].isa) = v5 | HIDWORD(object[10].isa) & 0xBFFFF000;
    isa = (uint64_t)object[7].isa;
    if ((~isa & 0x180000000000000) != 0)
      dispatch_set_qos_class_floor_cold_1(isa);
  }
}

_DWORD *dispatch_workloop_set_qos_class_floor(uint64_t a1, int a2, char a3, char a4)
{
  uint64_t v5;
  _DWORD *result;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v5 = *(_QWORD *)(a1 + 56);
  if ((~v5 & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_cold_1(v5);
  result = *(_DWORD **)(a1 + 200);
  if (!result)
  {
    result = _dispatch_calloc(1uLL, 0x38uLL);
    *(_QWORD *)(a1 + 200) = result;
  }
  HIDWORD(v11) = a2 - 5;
  LODWORD(v11) = a2 - 5;
  v10 = v11 >> 2;
  if (v10 <= 7 && ((0xBBu >> v10) & 1) != 0)
  {
    result[1] = dword_3FEE4[v10] | (a3 - 1);
    v12 = *result | 8;
    if ((a4 & 1) == 0)
      goto LABEL_7;
LABEL_9:
    result[4] = 2;
    v13 = v12 | 2;
    goto LABEL_10;
  }
  result[1] = 0;
  v12 = *result & 0xFFFFFFF7;
  if ((a4 & 1) != 0)
    goto LABEL_9;
LABEL_7:
  v13 = v12 & 0xFFFFFFFD;
LABEL_10:
  *result = v13;
  return result;
}

uint64_t dispatch_set_qos_class(uint64_t a1, int a2, char a3)
{
  unsigned int v4;
  unint64_t v5;
  int v6;
  uint64_t result;

  if ((*(_QWORD *)(*(_QWORD *)a1 + 40) & 0xF0) != 0x10
    || *(_QWORD *)(*(_QWORD *)a1 + 40) == 18)
  {
    dispatch_set_qos_class_cold_1();
  }
  HIDWORD(v5) = a2 - 5;
  LODWORD(v5) = a2 - 5;
  v4 = v5 >> 2;
  if (v4 <= 7 && ((0xBBu >> v4) & 1) != 0)
    v6 = dword_3FEE4[v4] | (a3 - 1);
  else
    v6 = 0;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a1 + 84) & 0xBFFFF000 | v6;
  result = *(_QWORD *)(a1 + 56);
  if ((~result & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_cold_1(result);
  return result;
}

uint64_t dispatch_set_qos_class_fallback(uint64_t a1, int a2)
{
  unsigned int v2;
  unint64_t v3;
  int v4;
  uint64_t result;

  if ((*(_QWORD *)(*(_QWORD *)a1 + 40) & 0xF0) != 0x10)
    dispatch_set_qos_class_fallback_cold_2();
  HIDWORD(v3) = a2 - 5;
  LODWORD(v3) = a2 - 5;
  v2 = v3 >> 2;
  if (v2 > 7)
    v4 = 0;
  else
    v4 = dword_3FF04[v2];
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a1 + 84) & 0xFBFF0FFF | v4;
  result = *(_QWORD *)(a1 + 56);
  if ((~result & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_cold_1(result);
  return result;
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return _dispatch_lane_create_with_target((uint64_t)label, (uint64_t *)attr, (__objc2_class **)target, 0);
}

NSObject *_dispatch_lane_create_with_target(uint64_t a1, uint64_t *a2, __objc2_class **a3, unsigned __int8 a4)
{
  NSObject *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  __objc2_class *v18;
  unsigned int v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unsigned int *v26;
  int v27;
  const char *v28;
  char __dst[8];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  result = _dispatch_queue_attr_to_info(a2);
  v10 = (uint64_t)result;
  v11 = result;
  v12 = (result >> 16) & 3;
  if (a3 && v12)
  {
    if (!a3[3])
      goto LABEL_6;
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot specify both overcommit and a non-global target queue";
    qword_61258 = (uint64_t)a3;
    __break(1u);
  }
  if (!a3)
  {
    if ((result & 0x100000) != 0)
      v14 = 2;
    else
      v14 = 1;
    if (!v12)
      v12 = v14;
    goto LABEL_28;
  }
LABEL_6:
  if ((*a3)[1].isa == (__objc2_class *)((char *)&off_50310 + 1))
  {
    if (v12)
    {
      if (!(_BYTE)result)
      {
LABEL_29:
        LODWORD(v15) = (*((_DWORD *)a3 + 21) >> 8) & 0xF;
        goto LABEL_30;
      }
    }
    else
    {
      if (*((int *)a3 + 21) < 0)
        v12 = 1;
      else
        v12 = 2;
      if (!(_BYTE)result)
        goto LABEL_29;
    }
LABEL_28:
    LODWORD(v15) = result;
LABEL_30:
    if ((_DWORD)v15)
      v15 = v15;
    else
      v15 = 4;
    if ((v15 - 7) <= 0xFFFFFFF9)
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupted priority";
      qword_61258 = v15;
      __break(1u);
      goto LABEL_81;
    }
    v16 = 3 * v15;
    if (v12 == 1)
      ++v16;
    a3 = &_dispatch_root_queues + 16 * (unint64_t)(v16 - 3);
LABEL_38:
    if ((((result & 0x2C0000) == 0) & a4) != 0)
      v17 = 0x400000;
    else
      v17 = 0;
    if ((result & 0x100000) != 0)
      v18 = OS_dispatch_queue_concurrent;
    else
      v18 = OS_dispatch_queue_serial;
    v19 = (result >> 18) & 3;
    if (v19 == 1)
    {
      v17 |= 0x10000u;
      if (a1)
      {
LABEL_48:
        v20 = _dispatch_strdup_if_mutable((const char *)a1);
        if (v20 != (const char *)a1)
          v17 |= 0x200000u;
LABEL_52:
        v21 = _dispatch_object_alloc(v18, 120);
        a1 = v21;
        if ((v10 & 0x100000) != 0)
          v22 = 4094;
        else
          v22 = 1;
        v23 = 0x180000000000000;
        if ((v10 & 0x200000) != 0)
        {
          *(_DWORD *)(v21 + 8) += 2;
          if (*(_BYTE *)(*(_QWORD *)v21 + 40) == 19)
            ++*(_DWORD *)(v21 + 8);
        }
        else
        {
          v23 = 0;
        }
        *(_QWORD *)(v21 + 16) = -1985229329;
        *(_DWORD *)(v21 + 80) = v17 | v22;
        *(_QWORD *)(v21 + 56) = v23 - (v22 << 41) + 0x20000000000000;
        do
          v24 = __ldxr(&_dispatch_queue_serial_numbers);
        while (__stxr(v24 + 1, &_dispatch_queue_serial_numbers));
        *(_QWORD *)(v21 + 64) = v24;
        *(_QWORD *)(v21 + 72) = v20;
        v25 = (BYTE1(v10) - 1) | ((v11 & 0xF) << 8);
        if (!v11)
          v25 = 0;
        if (v12 == 1)
          v25 |= 0x80000000;
        *(_DWORD *)(v21 + 84) = v25;
        if ((v10 & 0x200000) == 0)
        {
          _dispatch_queue_priority_inherit_from_target(v21, (unint64_t)a3);
          _dispatch_lane_inherit_wlh_from_target(a1, (unsigned int *)a3);
        }
        if (*((_DWORD *)a3 + 2) == 0x7FFFFFFF)
          goto LABEL_71;
        v26 = (unsigned int *)(a3 + 1);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        if (v27 > 0)
        {
LABEL_71:
          v10 = 0xFFFFFC100;
          *(_QWORD *)(a1 + 24) = a3;
          if (!MEMORY[0xFFFFFC100])
            return _dispatch_introspection_queue_create(a1);
        }
        else
        {
          qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
          __break(1u);
        }
        LODWORD(a3) = -1912602624;
        if (*(_QWORD *)(a1 + 72))
          v28 = *(const char **)(a1 + 72);
        else
          v28 = (const char *)&unk_416A6;
        strncpy(__dst, v28, 0x20uLL);
        LODWORD(v15) = *(_DWORD *)(a1 + 84);
        if ((v15 & 0x4000000) == 0)
        {
          v9 = v15 & 0x8E0000FF;
          LODWORD(v15) = (v15 >> 8) & 0xF;
          if (!(_DWORD)v15)
          {
LABEL_83:
            v8 = *(_QWORD *)(a1 + 64);
            if (!*(_DWORD *)v10)
              goto LABEL_84;
            goto LABEL_87;
          }
LABEL_82:
          v9 |= 256 << (v15 - 1);
          goto LABEL_83;
        }
LABEL_81:
        v9 = v15 & a3 | 0xFF;
        LOWORD(v15) = (unsigned __int16)v15 >> 12;
        goto LABEL_82;
      }
    }
    else
    {
      if (v19 == 2)
        v17 |= 0x20000u;
      if (a1)
        goto LABEL_48;
    }
    v20 = 0;
    goto LABEL_52;
  }
  if ((*((_BYTE *)a3 + 87) & 8) != 0)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot target object to cooperative root queue - not implemented";
    qword_61258 = (uint64_t)a3;
    __break(1u);
LABEL_87:
    kdebug_trace(772079621, v8, v9, 0, 0);
LABEL_84:
    if (*(_DWORD *)v10)
      kdebug_trace(772079622, *(_QWORD *)__dst, v30, v31, v32);
    return _dispatch_introspection_queue_create(a1);
  }
  if (a3[3])
  {
    if ((result & 0x100000) != 0)
      v13 = 2;
    else
      v13 = 1;
    if (!v12)
      v12 = v13;
    goto LABEL_38;
  }
  if (!v12)
    goto LABEL_38;
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot specify an overcommit attribute and use this kind of target queue";
  qword_61258 = (uint64_t)a3;
  __break(1u);
  return result;
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_lane_create_with_target((uint64_t)label, (uint64_t *)attr, 0, 1u);
}

void dispatch_queue_create_with_accounting_override_voucher()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unsupported interface";
  __break(1u);
}

void _dispatch_lane_class_dispose(uint64_t *a1, _BYTE *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (a1[6])
    _dispatch_lane_class_dispose_cold_3(a1 + 6);
  a1[13] = 512;
  a1[6] = 512;
  v2 = a1[7];
  v3 = 0x20000000000000 - ((unint64_t)*((unsigned __int16 *)a1 + 40) << 41);
  if ((*(_BYTE *)(*a1 + 42) & 1) != 0)
    v3 = 0x60000000000000;
  if ((v2 & 0xFFFFFF48FFFFFFFFLL) != v3)
  {
    v4 = a1[7];
    if ((v2 & 0xFFFFFFFC) == 0)
      _dispatch_lane_class_dispose_cold_1(v4);
    _dispatch_lane_class_dispose_cold_2(v4);
  }
  _dispatch_queue_dispose(a1, a2);
}

void _dispatch_queue_dispose(_QWORD *obj, _BYTE *a2)
{
  void *v4;
  unint64_t *v5;
  _QWORD *v6;
  unsigned int *v7;
  int v8;

  v4 = (void *)obj[9];
  if (v4 && (obj[10] & 0x200000) != 0)
    free(v4);
  v5 = obj + 11;
  do
    v6 = (_QWORD *)__ldxr(v5);
  while (__stxr(0x200uLL, v5));
  if (v6)
    _dispatch_queue_specific_head_dispose(v6);
  if (*((_DWORD *)obj + 24))
  {
    v7 = (unsigned int *)(obj + 12);
    _dispatch_object_finalize(obj);
    *a2 = 0;
    obj[9] = "<released queue, pending free>";
    obj[4] = 0;
    obj[5] = 0;
    obj[3] = 0;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 - 1, v7));
    if (v8 <= 0)
    {
      if (v8 < 0)
      {
        qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
      else
      {
        obj[7] = 0xDEAD000000000000;
        _dispatch_object_dealloc(obj);
      }
    }
  }
  else
  {
    obj[7] = 0xDEAD000000000000;
  }
}

void _dispatch_lane_dispose(NSObject *a1, _BYTE *a2)
{
  if (MEMORY[0xFFFFFC100])
    kdebug_trace(772079624, a1[8].isa, 0, 0, 0);
  _dispatch_introspection_queue_dispose(a1);
  _dispatch_lane_class_dispose((uint64_t *)a1, a2);
}

unint64_t _dispatch_queue_xref_dispose(uint64_t a1)
{
  unint64_t result;
  unsigned int *v3;
  unsigned int v4;

  result = *(_QWORD *)(a1 + 56);
  if (result >> 55)
  {
    if ((result & 0x180000000000000) == 0)
      _dispatch_queue_xref_dispose_cold_1(result);
    _dispatch_queue_xref_dispose_cold_2(result);
  }
  v3 = (unsigned int *)(a1 + 80);
  do
    v4 = __ldxr(v3);
  while (__stxr(v4 | 0x800000, v3));
  return result;
}

uint64_t _dispatch_lane_suspend(uint64_t result)
{
  unint64_t *v1;
  unint64_t v2;
  unsigned int *v3;
  int v4;

  v1 = (unint64_t *)(result + 56);
  do
  {
    v2 = __ldxr(v1);
    if (v2 >= 0xFC00000000000000)
    {
      __clrex();
      return _dispatch_lane_suspend_slow(result);
    }
  }
  while (__stxr(v2 + 0x400000000000000, v1));
  if (!(v2 >> 55) && *(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    v3 = (unsigned int *)(result + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if (v4 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  return result;
}

uint64_t _dispatch_lane_suspend_slow(uint64_t result)
{
  uint64_t v1;
  unsigned int *v2;
  unint64_t StatusReg;
  unsigned int v4;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  char v16;

  v1 = result;
  v2 = (unsigned int *)(result + 100);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v4 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v2))
  {
    if (!__stxr(v4, v2))
      goto LABEL_6;
  }
  __clrex();
  result = _dispatch_unfair_lock_lock_slow(result + 100, 0x10000);
LABEL_6:
  v6 = 0x7C00000000000000;
  if (!*(_DWORD *)(v1 + 112))
    v6 = 0x7A00000000000000;
  v7 = (unint64_t *)(v1 + 56);
  do
  {
    v8 = __ldxr(v7);
    v9 = v8 >= v6;
    v10 = v8 - v6;
    if (!v9)
    {
      __clrex();
      v13 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
      do
        v14 = __ldxr(v2);
      while (__stlxr(0, v2));
      if (v14 != v13)
      {
        v15 = (uint64_t)v2;
        v16 = v14;
        _dispatch_unfair_lock_unlock_slow(v15, v14);
        if ((v16 & 2) != 0 && (*(_QWORD *)(StatusReg + 200) & 0xF0000) == 0)
          *(_QWORD *)(StatusReg + 200) = *(_QWORD *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
      }
      return _dispatch_lane_suspend(v1);
    }
  }
  while (__stxr(v10, v7));
  v11 = *(_DWORD *)(v1 + 112);
  *(_DWORD *)(v1 + 112) = v11 + 32;
  if (v11 >= 0xFFFFFFE0)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Too many nested calls to dispatch_suspend()";
    __break(1u);
  }
  else
  {
    v12 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    do
      LODWORD(v1) = __ldxr(v2);
    while (__stlxr(0, v2));
    if ((_DWORD)v1 == v12)
      return result;
  }
  result = _dispatch_unfair_lock_unlock_slow((uint64_t)v2, v1);
  if ((v1 & 2) != 0 && (*(_QWORD *)(StatusReg + 200) & 0xF0000) == 0)
    *(_QWORD *)(StatusReg + 200) = *(_QWORD *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
  return result;
}

uint64_t _dispatch_lane_resume(uint64_t a1, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;

  if ((_DWORD)a2 == 2)
  {
    v6 = (unint64_t *)(a1 + 56);
    do
    {
      v3 = __ldxr(v6);
      if ((v3 & 0x180000000000000) == 0)
      {
        __clrex();
        return (uint64_t)_os_object_release_internal_n((void *)a1, (_BYTE *)&dword_0 + 2);
      }
      v7 = (v3 - 0x80000000000000) & 0xFFFFFFF000000001;
      if ((v3 & 0xFFFFFFFC) != 0)
        v7 = (v3 - 0x80000000000000) | 0x8000000000;
      if ((v3 - 0x80000000000000) >> 53)
        v5 = (v3 - 0x80000000000000) | 0x8000000000;
      else
        v5 = v7;
    }
    while (__stlxr(v5, v6));
    if ((v5 & 0x180000000000000) == 0)
      goto LABEL_19;
    v3 = a1;
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupt activation state";
    qword_61258 = a1;
    __break(1u);
LABEL_54:
    __clrex();
    if ((v3 & 0x200000000000000) != 0)
      return _dispatch_lane_resume_slow(a1);
    goto LABEL_57;
  }
  if ((_DWORD)a2 == 1)
  {
    v2 = (unint64_t *)(a1 + 56);
    while (1)
    {
      v3 = __ldxr(v2);
      if ((~v3 & 0x180000000000000) != 0)
        break;
      if (v3 >> 58)
        v4 = 0xFF80000000000000;
      else
        v4 = 0xFF00000000000000;
      v5 = v3 + v4;
      if (!__stxr(v3 + v4, v2))
        goto LABEL_19;
    }
    __clrex();
    return a1;
  }
  v8 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) - 0x20000000000;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFCLL;
  v10 = (unint64_t *)(a1 + 56);
  v11 = *(unsigned __int8 *)(*(_QWORD *)a1 + 40);
  a2 = v9 | 0x60000000000002;
  do
  {
    v3 = __ldxr(v10);
    if (v11 == 19 && (v3 & 0xFF80000000000000) == 0x180000000000000)
    {
      v5 = v3 - 0x100000000000000;
    }
    else
    {
      v12 = v3 - 0x400000000000000;
      if (v3 < 0x400000000000000)
        goto LABEL_54;
      if ((v12 & 0x180000000000000) == 0x100000000000000)
      {
        v5 = v3 - 0x480000000000000;
      }
      else if (v12 >> 53 || (v3 & 0xFFFFFFFC) != 0)
      {
        v5 = v12 | 0x8000000000;
      }
      else if (v11 == 19 || (v12 & 0x10000000000) == 0 && (v8 + v12) >> 53)
      {
        v5 = v12 & 0xFFFFFFF000000001;
      }
      else
      {
        v5 = a2 | v12 & 0x7700000001;
      }
    }
  }
  while (__stlxr(v5, v10));
LABEL_19:
  if ((v5 & 0x180000000000000) == 0x80000000000000)
    return _dispatch_lane_resume_activate(a1);
  if (!(v5 >> 55))
  {
    if (((v3 ^ v5) & 0x40000000000000) != 0)
    {
      v13 = 5;
      return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, HIDWORD(v3) & 7, v13);
    }
    if (!(v5 >> 53))
    {
      v13 = 1;
      return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, HIDWORD(v3) & 7, v13);
    }
    if (*(_DWORD *)(a1 + 8) == 0x7FFFFFFF)
      return a1;
    v14 = (unsigned int *)(a1 + 8);
    do
      v3 = __ldxr(v14);
    while (__stlxr(v3 - 2, v14));
    if ((int)v3 > 2)
      return a1;
    if ((_DWORD)v3 == 2)
      return (uint64_t)_os_object_dispose((void *)a1, (const char *)a2);
    qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
    __break(1u);
LABEL_57:
    if ((~v3 & 0x180000000000000) != 0)
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Over-resume of an object";
      qword_61258 = a1;
      __break(1u);
    }
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Over-resume of an inactive object";
    qword_61258 = a1;
    __break(1u);
  }
  return a1;
}

uint64_t _dispatch_lane_resume_slow(uint64_t result)
{
  uint64_t v1;
  unsigned int *v2;
  unint64_t StatusReg;
  unsigned int v4;
  int v6;
  BOOL v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  char v18;

  v1 = result;
  v2 = (unsigned int *)(result + 100);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v4 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v2))
  {
    if (!__stxr(v4, v2))
      goto LABEL_6;
  }
  __clrex();
  result = _dispatch_unfair_lock_lock_slow(result + 100, 0x10000);
LABEL_6:
  v6 = *(_DWORD *)(v1 + 112);
  if (v6)
  {
    v7 = v6 == 32;
    v8 = 0x7A00000000000000;
    if (!v7)
      v8 = 0x7C00000000000000;
    v9 = (unint64_t *)(v1 + 56);
    do
    {
      v10 = __ldxr(v9);
      v11 = __CFADD__(v10, v8);
      v12 = v10 + v8;
      if (v11)
      {
        __clrex();
        goto LABEL_17;
      }
    }
    while (__stxr(v12, v9));
    *(_DWORD *)(v1 + 112) -= 32;
    v13 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    do
      v14 = __ldxr(v2);
    while (__stlxr(0, v2));
    if (v14 != v13)
    {
      result = _dispatch_unfair_lock_unlock_slow((uint64_t)v2, v14);
      if ((v14 & 2) != 0 && (*(_QWORD *)(StatusReg + 200) & 0xF0000) == 0)
        *(_QWORD *)(StatusReg + 200) = *(_QWORD *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
    }
  }
  else
  {
LABEL_17:
    v15 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    do
      v16 = __ldxr(v2);
    while (__stlxr(0, v2));
    if (v16 != v15)
    {
      v17 = (uint64_t)v2;
      v18 = v16;
      _dispatch_unfair_lock_unlock_slow(v17, v16);
      if ((v18 & 2) != 0 && (*(_QWORD *)(StatusReg + 200) & 0xF0000) == 0)
        *(_QWORD *)(StatusReg + 200) = *(_QWORD *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
    }
    return _dispatch_lane_resume(v1, 0);
  }
  return result;
}

uint64_t _dispatch_lane_resume_activate(uint64_t a1)
{
  void (*v2)(uint64_t);

  v2 = *(void (**)(uint64_t))(*(_QWORD *)a1 + 72);
  if (v2)
    v2(a1);
  return _dispatch_lane_resume(a1, 2);
}

const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue)
{
  NSObject *v2;

  if (!queue)
  {
    v2 = *(NSObject **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160);
    if (v2)
      queue = v2;
    else
      queue = (dispatch_queue_t)&off_653C0;
  }
  if (queue[9].isa)
    return (const char *)queue[9].isa;
  else
    return (const char *)&unk_416A6;
}

dispatch_qos_class_t dispatch_queue_get_qos_class(dispatch_queue_t queue, int *relative_priority_ptr)
{
  unint64_t isa_high;
  uint64_t v3;
  int v4;
  uint64_t v5;

  isa_high = HIDWORD(queue[10].isa);
  v3 = (isa_high >> 8) & 0xF;
  if (relative_priority_ptr)
  {
    if ((isa_high & 0xF00) != 0)
      v4 = (char)isa_high + 1;
    else
      v4 = 0;
    if (!(_DWORD)v3)
      v4 = 0;
    *relative_priority_ptr = v4;
  }
  v5 = v3 - 1;
  if (v5 > 5)
    return 0;
  else
    return dword_3FF24[v5];
}

unint64_t *dispatch_queue_set_width(NSObject *a1, objc_class *a2)
{
  if (*((_QWORD *)a1->isa + 5) != 17)
    dispatch_queue_set_width_cold_2(*((_QWORD *)a1->isa + 5));
  if (*((_QWORD *)a1->isa + 5) != 529)
    dispatch_queue_set_width_cold_1(*((_QWORD *)a1->isa + 5));
  if ((a2 & 0x80000000) != 0)
    return (unint64_t *)_dispatch_barrier_async_detached_f(a1, a2, (objc_class *)_dispatch_lane_set_width);
  else
    return _dispatch_barrier_trysync_or_async_f((unint64_t *)a1, a2, (uint64_t (*)(void))_dispatch_lane_set_width, 1);
}

unint64_t _dispatch_lane_set_width(int a1)
{
  unint64_t StatusReg;
  uint64_t v2;
  int v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v2 = *(_QWORD *)(StatusReg + 160);
  if (a1 < 0)
  {
    v7 = (*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF;
    v8 = __clz(__rbit32(v7));
    if (a1 == -1)
    {
      if (!v7
        || (v8 > 5 ? (v10 = 0) : (v10 = dword_3FF24[v8]),
            a1 = pthread_qos_max_parallelism(v10, 0),
            a1 <= 0))
      {
        a1 = MEMORY[0xFFFFFC036];
      }
      if (a1 >= MEMORY[0xFFFFFC034])
        a1 = MEMORY[0xFFFFFC034];
    }
    else if (a1 == -2)
    {
      if (!v7
        || (v8 > 5 ? (v9 = 0) : (v9 = dword_3FF24[v8]),
            a1 = pthread_qos_max_parallelism(v9, 1),
            a1 <= 0))
      {
        a1 = MEMORY[0xFFFFFC035];
      }
    }
    else if (!v7
           || (v8 > 5 ? (v11 = 0) : (v11 = dword_3FF24[v8]),
               a1 = pthread_qos_max_parallelism(v11, 0),
               a1 <= 0))
    {
      a1 = MEMORY[0xFFFFFC036];
    }
  }
  else if (a1 <= 1)
  {
    a1 = 1;
  }
  if (a1 >= 0xFFE)
    v3 = 4094;
  else
    v3 = a1;
  v4 = (unsigned int *)(v2 + 80);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 & 0xFFFF0000 | v3, v4));
  return _dispatch_lane_inherit_wlh_from_target(v2, *(unsigned int **)(v2 + 24));
}

unint64_t *_dispatch_lane_set_target_queue(unint64_t *a1, char *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unsigned int *v6;
  int v7;
  unint64_t *v8;
  unsigned int *v9;
  unsigned int *v10;
  int v11;
  uint64_t v13;
  int v14;
  unsigned int *v15;
  int v16;
  const char *v17;
  char *v18;

  if (!a2)
  {
    v3 = 1152;
    if (*((_WORD *)a1 + 40) == 1)
      v3 = 1280;
    a2 = (char *)&_dispatch_root_queues + v3;
  }
  v4 = a1 + 7;
  while (1)
  {
    v5 = __ldxr(v4);
    if ((~v5 & 0x180000000000000) != 0)
      break;
    if (!__stxr(v5 + 0x400000000000000, v4))
    {
      if ((v5 & 0x200000000000000) != 0)
        _dispatch_lane_set_target_queue_cold_3();
      if (*((_DWORD *)a2 + 2) != 0x7FFFFFFF)
      {
        v6 = (unsigned int *)(a2 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
        if (v7 <= 0)
          dispatch_set_target_queue_cold_2();
      }
      v8 = a1 + 3;
      do
        v9 = (unsigned int *)__ldxr(v8);
      while (__stlxr((unint64_t)a2, v8));
      if (v9)
      {
        if (v9[2] != 0x7FFFFFFF)
        {
          v10 = v9 + 2;
          do
            v11 = __ldxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (v11 <= 1)
          {
            if (v11 != 1)
              _os_object_allows_weak_reference_cold_1();
            _os_object_dispose(v9, a2);
          }
        }
      }
      return (unint64_t *)_dispatch_lane_resume((uint64_t)a1, 0);
    }
  }
  __clrex();
  if ((a1[10] & 0x400000) == 0)
  {
    if ((a1[10] & 0x100000) == 0)
      _dispatch_lane_set_target_queue_cold_4();
    _dispatch_lane_set_target_queue_cold_5();
  }
  v13 = *(_QWORD *)(*a1 + 40);
  v14 = *(_QWORD *)(*a1 + 40);
  if (v14 == 17)
  {
    if ((a1[10] & 0x100000) == 0)
      goto LABEL_24;
    v18 = a2;
    v17 = "Changing the target of a queue already targeted by other dispatch objects";
  }
  else
  {
    v18 = a2;
    if (v14 != 19)
      _dispatch_lane_set_target_queue_cold_6(v13);
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(771883016, a1, 0, 0, 0);
    v17 = "Changing the target of a source after it has been activated";
  }
  _dispatch_bug_deprecated(v17);
  a2 = v18;
LABEL_24:
  if (*((_DWORD *)a2 + 2) != 0x7FFFFFFF)
  {
    v15 = (unsigned int *)(a2 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    if (v16 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  return _dispatch_barrier_trysync_or_async_f(a1, a2, (uint64_t (*)(void))_dispatch_lane_legacy_set_target_queue, 1);
}

void *_dispatch_lane_legacy_set_target_queue(unint64_t a1)
{
  unint64_t StatusReg;
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10;
  const char *v11;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_QWORD *)(StatusReg + 160);
  v4 = *(void **)(v3 + 24);
  if ((*(_DWORD *)(v3 + 80) & 0x100000) != 0)
    _dispatch_lane_legacy_set_target_queue_cold_2(a1, *(_QWORD *)(v3 + 24), *(_QWORD *)(StatusReg + 160));
  v5 = (unsigned int *)_dispatch_queue_priority_inherit_from_target(v3, a1);
  _dispatch_lane_inherit_wlh_from_target(v3, v5);
  v6 = (unsigned int *)(v3 + 100);
  v7 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v6))
  {
    if (!__stxr(v7, v6))
      goto LABEL_8;
  }
  __clrex();
  _dispatch_unfair_lock_lock_slow(v3 + 100, 0x10000);
LABEL_8:
  if ((*(_DWORD *)(v3 + 80) & 0x400000) == 0)
    _dispatch_lane_set_target_queue_cold_4();
  *(_QWORD *)(v3 + 24) = v5;
  v9 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    v10 = __ldxr(v6);
  while (__stlxr(0, v6));
  if (v10 != v9)
  {
    _dispatch_unfair_lock_unlock_slow(v3 + 100, v10);
    if ((v10 & 2) != 0 && (*(_QWORD *)(StatusReg + 200) & 0xF0000) == 0)
      *(_QWORD *)(StatusReg + 200) = *(_QWORD *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
  }
  _dispatch_introspection_target_queue_changed(v3);
  return _os_object_release_internal(v4, v11);
}

void _dispatch_return_to_kernel()
{
  unint64_t StatusReg;
  uint64_t v1;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v1 = *(_QWORD *)(StatusReg + 232);
  if (!v1 || *(_QWORD *)(v1 + 24) == -4)
    *(_QWORD *)(StatusReg + 40) = 0;
  else
    _dispatch_event_loop_drain(1);
}

BOOL dispatch_swift_job_should_yield()
{
  return *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 960) != 0;
}

void _dispatch_lane_serial_drain(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  NSObject v4;
  uint64_t *v5;
  objc_class *v6;
  unint64_t *v7;
  NSObject *v9;
  unint64_t StatusReg;
  int8x16_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void (**v17);
  Class v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  NSObject *v31;
  uint64_t v32;
  _QWORD *v33;
  void (*v34)(void (**)(void));
  void (__cdecl *v35)(void *);
  void *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void (*v40)(void (**)(void));
  void (__cdecl *v41)(void *);
  uint64_t isa_low;
  uint64_t v43;
  void (__cdecl *function)(void *);
  NSObject *group;
  int8x16_t *v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t *v51;
  objc_class *v52;
  uint64_t v53;
  void *context;
  int8x16_t v55;

  v6 = (objc_class *)a1[3];
  v7 = a1 + 6;
  if (!a1[6])
    return;
  v9 = a1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v11 = *(int8x16_t *)(StatusReg + 160);
  v55 = v11;
  *(_QWORD *)(StatusReg + 160) = a1;
  *(_QWORD *)(StatusReg + 168) = &v55;
  v12 = a1 + 13;
  v13 = a1[13];
  if (!v13)
    v13 = _dispatch_wait_for_enqueuer(a1 + 13, (uint64_t)v7);
  v47 = (int8x16_t *)(StatusReg + 160);
  if (!((unint64_t)v9[7].isa >> 55))
  {
    v49 = a3 & 0xFFFD0000;
    v48 = (a3 >> 21) & 1;
    v51 = v12;
    v52 = v6;
    while (1)
    {
      if (v6 != v9[3].isa)
        goto LABEL_109;
      if (*(_QWORD *)v13 <= 0xFFFuLL && (a3 & 0x80000) == 0 && (*(_QWORD *)v13 & 1) != 0)
      {
        v43 = a2;
        *(_QWORD *)(a2 + 8) = v13;
        if ((a3 & 8) == 0)
          goto LABEL_113;
        qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Deferred continuation on source, mach channel or mgr";
        __break(1u);
        goto LABEL_122;
      }
      v14 = *(_QWORD *)(v13 + 16);
      *v12 = v14;
      if (!v14)
      {
        v15 = (unint64_t *)(v13 + 16);
        while (1)
        {
          v16 = __ldxr(v7);
          if (v16 != v13)
            break;
          if (!__stlxr(0, v7))
            goto LABEL_18;
        }
        __clrex();
        v14 = *v15;
        if (!*v15)
          v14 = _dispatch_wait_for_enqueuer(v15, (uint64_t)v7);
        *v12 = v14;
      }
LABEL_18:
      v17 = *(void (***))(StatusReg + 192);
      if (v17)
        (*v17)(v9);
      v18 = *(Class *)v13;
      if (*(_QWORD *)v13 >= 0x1000uLL)
      {
        if (*((_QWORD *)v18 + 5) == 1)
          (*((void (**)(uint64_t, _QWORD, _QWORD))v18 + 6))(v13, 0, v48);
        else
          (*((void (**)(uint64_t, uint64_t, _QWORD))v18 + 8))(v13, a2, v49);
        goto LABEL_75;
      }
      if ((a3 & 0x1000000) != 0)
      {
        context = objc_autoreleasePoolPush();
        v18 = *(Class *)v13;
      }
      else
      {
        context = 0;
      }
      v19 = *(unsigned int **)(v13 + 24);
      if ((v18 & 4) != 0)
        *(_QWORD *)(v13 + 24) = -1;
      if (v19 != (unsigned int *)-1)
      {
        v20 = v19;
        if (v19)
          v20 = (unsigned int *)v19[8];
        if (MEMORY[0xFFFFFC100])
          kdebug_trace(771817480, v20, v13, 0, 0);
      }
      v21 = *(_QWORD *)(v13 + 8);
      if (v21 == -1)
      {
        v24 = 0;
      }
      else
      {
        v22 = *(_QWORD *)(StatusReg + 200);
        v23 = ((v22 >> 8) & 0xF) != 0 ? 256 << ((BYTE1(v22) & 0xFu) - 1) : 0;
        v24 = v23 & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(StatusReg + 200);
        if ((v21 & 0xFFFFFF) != 0)
        {
          if ((v21 & 0xFFFFFFuLL) >= (v23 & 0xFFFFFF00)
            && ((v22 & 0x44000000) != 0 || (*(_QWORD *)(v13 + 8) & 0x10000000) != 0))
          {
            v24 = v21 & 0xFFFFFF;
          }
        }
        else if ((unsigned __int16)v22 >> 12)
        {
          v24 = (256 << (((unsigned __int16)v22 >> 12) - 1)) | 0xFF;
        }
      }
      v26 = v24 & 0xFFFFFFFF02FFFFFFLL;
      v27 = *(_QWORD *)(StatusReg + 32);
      if ((v27 & 0x1000000) != 0)
        break;
      if (v26 != (v27 & 0xFFFFFFFF77FFFFFFLL))
        goto LABEL_92;
LABEL_49:
      if (v19 == (unsigned int *)-1)
        goto LABEL_54;
      if (*(unsigned int **)(StatusReg + 224) == v19)
      {
        if ((v18 & 4) != 0 && v19)
          os_release(v19);
LABEL_54:
        if (((unsigned __int16)v18 & 0x200) == 0)
          goto LABEL_55;
        goto LABEL_58;
      }
      v26 = 0;
LABEL_107:
      _dispatch_set_priority_and_voucher_slow(v26, v19, v18 & 4 | 2);
      if (((unsigned __int16)v18 & 0x200) == 0)
      {
LABEL_55:
        if (MEMORY[0xFFFFFC100])
          _dispatch_trace_item_pop_internal(v9, (_QWORD *)v13, v11);
        _dispatch_introspection_queue_item_dequeue(v9, v13);
      }
LABEL_58:
      if ((v18 & 4) != 0)
      {
        v29 = *(_QWORD *)(StatusReg + 176);
        if (v29)
          v30 = *(_DWORD *)(v29 + 8) + 1;
        else
          v30 = 1;
        v28 = v13;
        if (v30 <= _dispatch_continuation_cache_limit)
        {
          v28 = 0;
          *(_QWORD *)(v13 + 16) = v29;
          *(_DWORD *)(v13 + 8) = v30;
          *(_QWORD *)(StatusReg + 176) = v13;
        }
      }
      else
      {
        v28 = 0;
      }
      v53 = v28;
      if ((v18 & 8) != 0)
      {
        v38 = *(_QWORD *)(**(_QWORD **)(v13 + 48) + 40);
        if (v38 != 514)
        {
          qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected object type";
          qword_61258 = v38;
          __break(1u);
          return;
        }
        group = *(NSObject **)(v13 + 48);
        v40 = *(void (**)(void (**)(void)))(v13 + 32);
        v39 = *(_QWORD **)(v13 + 40);
        v41 = (void (__cdecl *)(void *))v40;
        v36 = context;
        if (v39)
        {
          v41 = *(void (__cdecl **)(void *))(v13 + 32);
          if (v40 == _dispatch_call_block_and_release)
            v41 = (void (__cdecl *)(void *))v39[2];
        }
        function = v41;
        _dispatch_introspection_callout_entry(*(void **)(v13 + 40), v41);
        _dispatch_client_callout((uint64_t)v39, (uint64_t (*)(void))v40);
        _dispatch_introspection_callout_return(v39, function);
        if (MEMORY[0xFFFFFC100])
          kdebug_trace(772079660, v13, 0, 0, 0);
        _dispatch_introspection_queue_item_complete(v13);
        dispatch_group_leave(group);
        v12 = v51;
        v6 = v52;
      }
      else
      {
        v31 = v9;
        v32 = a3;
        v34 = *(void (**)(void (**)(void)))(v13 + 32);
        v33 = *(_QWORD **)(v13 + 40);
        v35 = (void (__cdecl *)(void *))v34;
        if (v33)
        {
          v35 = *(void (__cdecl **)(void *))(v13 + 32);
          if (v34 == _dispatch_call_block_and_release)
            v35 = (void (__cdecl *)(void *))v33[2];
        }
        _dispatch_introspection_callout_entry(*(void **)(v13 + 40), v35);
        _dispatch_client_callout((uint64_t)v33, (uint64_t (*)(void))v34);
        _dispatch_introspection_callout_return(v33, v35);
        if (MEMORY[0xFFFFFC100])
          kdebug_trace(772079660, v13, 0, 0, 0);
        _dispatch_introspection_queue_item_complete(v13);
        a3 = v32;
        v9 = v31;
        v12 = v51;
        v6 = v52;
        v36 = context;
      }
      if (!v53)
      {
        if (!v36)
          goto LABEL_75;
LABEL_74:
        objc_autoreleasePoolPop(v36);
        goto LABEL_75;
      }
      _dispatch_continuation_free_to_cache_limit(v53);
      if (v36)
        goto LABEL_74;
LABEL_75:
      if (v17)
        v17[1](v9);
      v13 = v14;
      if (!v14)
      {
        if (!*v7)
        {
          v43 = ((unint64_t)LOWORD(v9[10].isa) << 41) + 0x40000000000000;
          goto LABEL_116;
        }
        v13 = *v12;
        if (!*v12)
          v13 = _dispatch_wait_for_enqueuer(v12, (uint64_t)v7);
      }
      if (*(_QWORD *)(StatusReg + 40))
        _dispatch_return_to_kernel();
      if (LOWORD(v9[10].isa) == 1 && ((a3 & 0x4000000) != 0 || (*(_BYTE *)(StatusReg + 960) & 1) == 0))
      {
        if ((a3 & 0x100000) == 0
          || (v37 = *(_QWORD *)(StatusReg + 216),
              LODWORD(v4.isa) = *(_DWORD *)(v37 + 60) & 7,
              LODWORD(v4.isa) <= *(unsigned __int8 *)(v37 + 100)))
        {
          if (!((unint64_t)v9[7].isa >> 55))
            continue;
        }
      }
      goto LABEL_109;
    }
    if (v26)
      goto LABEL_107;
    v26 = v27 & 0xFFFFFFFFFEFFFFFFLL;
LABEL_92:
    if (v26)
      goto LABEL_107;
    goto LABEL_49;
  }
LABEL_109:
  isa_low = LOWORD(v9[10].isa);
  v43 = (isa_low << 41) + 0x40000000000000;
  if (!v13)
  {
LABEL_116:
    *a4 = *a4 & 0x4000000001 | v43;
    *v47 = v55;
    return;
  }
  v5 = a4;
  if (isa_low >= 2)
  {
    v4.isa = *(Class *)v13;
    if (*(_QWORD *)v13 < 0x1000uLL)
    {
LABEL_122:
      if (((uint64_t)v4.isa & 2) == 0)
        goto LABEL_111;
    }
    else if ((*((_QWORD *)v4.isa + 5) & 0xF0) != 0x10 || (*(_DWORD *)(v13 + 80) & 0x80000) == 0)
    {
      goto LABEL_111;
    }
    v43 = 0x40010000000000;
  }
LABEL_111:
  *v5 = *v5 & 0x4000000001 | v43;
LABEL_113:
  *v47 = v55;
}

void _dispatch_queue_invoke_finish(NSObject *a1, uint64_t a2, __objc2_class **a3, uint64_t a4, int8x16_t a5)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t StatusReg;
  unsigned int v17;
  int8x16_t v18;
  __objc2_class **v19;
  __objc2_class **v20;
  unint64_t v21;

  v7 = *(_QWORD *)(a2 + 8);
  if (v7)
  {
    v8 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(v7 + 106) |= 0x80u;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    if (v8)
      _dispatch_workloop_drain_barrier_waiter((uint64_t)a1, v7, v8, 1, a4 & 0x4000000001);
    else
      _dispatch_lane_drain_barrier_waiter((uint64_t)a1, v7, 1, a4 & 0x4000000001);
  }
  else
  {
    if (a3 == &_dispatch_mgr_q)
      v9 = 0x4000000000;
    else
      v9 = 1;
    v10 = (unint64_t *)&a1[7];
    do
    {
      v11 = __ldxr(v10);
      v12 = v11 - a4;
      if (v12 & 0x4000000001 | (v12 >> 53))
        v13 = 0;
      else
        v13 = v9;
      v14 = v12 & 0xFFFFFF7700000001 | v13 | 0x8000000000;
    }
    while (__stlxr(v14, v10));
    if ((~v12 & 0x1800000000) == 0)
    {
      v15 = HIDWORD(v12) & 7;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v17 = *(_DWORD *)(StatusReg + 200);
      if ((HIWORD(v17) & 0xF) < v15)
        *(_QWORD *)(StatusReg + 200) = v17 & 0xFFF0FFFF | ((_DWORD)v15 << 16);
    }
    if (((v14 ^ v12) & v9) != 0)
    {
      if ((v12 & 0x2000000000) != 0)
      {
        _dispatch_introspection_runtime_event();
        _dispatch_event_loop_poke(a1, v14, ((char *)&dword_0 + 1), v18);
      }
      else
      {
        v21 = v12;
        if (MEMORY[0xFFFFFC100])
        {
          v20 = a3;
          _dispatch_trace_item_push_internal(a3, a1, a5);
          a3 = v20;
        }
        v19 = a3;
        _dispatch_introspection_queue_item_enqueue(a3, a1);
        ((void (*)(__objc2_class **, NSObject *, unint64_t))(*v19)[2].superclass)(v19, a1, HIDWORD(v21) & 7);
      }
    }
    else
    {
      _os_object_release_internal_n(a1, (_BYTE *)&dword_0 + 2);
    }
  }
}

unsigned int *_dispatch_workloop_drain_barrier_waiter(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  BOOL v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;

  v8 = *(_DWORD *)(a2 + 100) & 0xFFFFFFFC;
  v9 = *(_QWORD *)(a2 + 16);
  v10 = a1 + 8 * (a3 - 1);
  *(_QWORD *)(v10 + 104) = v9;
  if (!v9)
  {
    v11 = (uint64_t *)(a2 + 16);
    v12 = (uint64_t *)(v10 + 104);
    v13 = (unint64_t *)(a1 + 8 * (a3 - 1) + 152);
    while (1)
    {
      v14 = __ldxr(v13);
      if (v14 != a2)
        break;
      if (!__stlxr(0, v13))
        goto LABEL_9;
    }
    __clrex();
    v9 = *v11;
    if (!*v11)
    {
      v25 = a5;
      v9 = _dispatch_wait_for_enqueuer((unint64_t *)(a2 + 16), (uint64_t)v13);
      a5 = v25;
    }
    *v12 = v9;
  }
LABEL_9:
  v15 = v9 != 0;
  v16 = (unint64_t *)(a1 + 56);
  v17 = v8 - a5;
LABEL_10:
  if (v15)
  {
    v15 = 1;
  }
  else
  {
    v18 = 0;
    do
    {
      v15 = v18 != -48;
      if (v18 == -48)
        break;
      v19 = *(_QWORD *)(a1 + 192 + v18);
      v18 -= 8;
    }
    while (!v19);
  }
  do
  {
    v20 = __ldxr(v16);
    if ((v20 & 0x2000000000) != 0)
    {
      if ((v20 & 2) != 0 && (v20 & 0x800000001) != 0)
      {
        _dispatch_event_loop_ensure_ownership(a1);
        do
          v22 = __ldxr(v16);
        while (__stxr(v22 & 0xFFFFFFF7FFFFFFFDLL, v16));
        __clrex();
        goto LABEL_10;
      }
      v21 = v20 & 0xFFFFFF7700000001 | v8;
      if (!v15)
      {
        if ((v20 & 0x8000000000) != 0)
        {
          __clrex();
          do
            v23 = __ldaxr(v16);
          while (__stxr(v23 ^ 0x8000000000, v16));
          goto LABEL_10;
        }
        v21 = v20 & 0xFFFFFF7000000000 | v8 & 0xFFFFFF70FFFFFFFCLL;
      }
    }
    else
    {
      v21 = v17 + (v20 & 0xFFFFFF7700000001);
    }
  }
  while (__stlxr(v21, v16));
  return _dispatch_barrier_waiter_redirect_or_wake(a1, a2, a4, v20, v21);
}

unsigned int *_dispatch_lane_drain_barrier_waiter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v7 = *(_DWORD *)(a2 + 100) & 0xFFFFFFFC;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 104) = v8;
  if (!v8)
  {
    v9 = (unint64_t *)(a2 + 16);
    v10 = (unint64_t *)(a1 + 48);
    while (1)
    {
      v11 = __ldxr(v10);
      if (v11 != a2)
        break;
      if (!__stlxr(0, v10))
        goto LABEL_9;
    }
    __clrex();
    v8 = *v9;
    if (!*v9)
    {
      v19 = a4;
      v20 = _dispatch_wait_for_enqueuer(v9, (uint64_t)v10);
      a4 = v19;
      v8 = v20;
    }
    *(_QWORD *)(a1 + 104) = v8;
  }
LABEL_9:
  v12 = (unint64_t *)(a1 + 56);
  v13 = v7 - a4;
  do
  {
    while (1)
    {
      while (1)
      {
        v14 = __ldxr(v12);
        if ((v14 & 0x2000000000) == 0)
        {
          v15 = v13 + (v14 & 0xFFFFFF7700000001);
          goto LABEL_17;
        }
        if ((v14 & 2) == 0 || (v14 & 0x800000001) == 0)
          break;
        _dispatch_event_loop_ensure_ownership(a1);
        do
          v16 = __ldxr(v12);
        while (__stxr(v16 & 0xFFFFFFF7FFFFFFFDLL, v12));
        __clrex();
      }
      v15 = v14 & 0xFFFFFF7700000001 | v7;
      if (v8)
        break;
      if ((v14 & 0x8000000000) == 0)
      {
        v15 = v14 & 0xFFFFFF7000000000 | v7 & 0xFFFFFF70FFFFFFFCLL;
        break;
      }
      __clrex();
      do
        v17 = __ldaxr(v12);
      while (__stxr(v17 ^ 0x8000000000, v12));
      v8 = *(_QWORD *)(a1 + 104);
    }
LABEL_17:
    ;
  }
  while (__stlxr(v15, v12));
  return _dispatch_barrier_waiter_redirect_or_wake(a1, a2, a3, v14, v15);
}

unint64_t _dispatch_lane_activate(uint64_t a1)
{
  unint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v5;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_DWORD *)(a1 + 84);
  v4 = (v3 >> 8) & 0xF;
  if ((unsigned __int16)v3 >> 12 <= v4 || (v3 & 0x40000000) == 0 && v4)
    *(_DWORD *)(a1 + 84) = v3 & 0xFBFF0FFF;
  v5 = (unsigned int *)_dispatch_queue_priority_inherit_from_target(a1, v2);
  return _dispatch_lane_inherit_wlh_from_target(a1, v5);
}

__objc2_class **_dispatch_queue_priority_inherit_from_target(uint64_t a1, unint64_t a2)
{
  unsigned int v2;
  _BOOL4 v4;
  unsigned int v5;

  v2 = *(_DWORD *)(a1 + 84);
  v4 = a2 >= (unint64_t)&_dispatch_root_queues && a2 < (unint64_t)&_dispatch_queue_serial_numbers;
  if ((v2 & 0x20000000) != 0 || (v2 & 0x44000FFF) == 0)
  {
    if (v4)
    {
      v2 = *(_DWORD *)(a2 + 84) | 0x20000000;
    }
    else if ((v2 & 0x20000000) != 0)
    {
      v2 &= 0xFBFF0FFF;
    }
    *(_DWORD *)(a1 + 84) = v2;
  }
  else if (v4)
  {
    if (((v2 >> 8) & 0xF) != 0)
      v5 = (v2 >> 8) & 0xF;
    else
      v5 = 4;
    if (v5 - 7 <= 0xFFFFFFF9)
      _dispatch_queue_priority_inherit_from_target_cold_1(v5);
    return &_dispatch_root_queues + 16 * (unint64_t)(3 * v5 + (v2 >> 31) - 3);
  }
  return (__objc2_class **)a2;
}

unint64_t _dispatch_lane_inherit_wlh_from_target(uint64_t a1, unsigned int *a2)
{
  char v4;
  uint64_t v5;
  BOOL v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t result;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int *v13;
  unsigned int v14;
  _BYTE *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;

  if ((*(_BYTE *)(*(_QWORD *)a2 + 42) & 1) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)a1 + 40) == 133137
      || (*(_QWORD *)(*(_QWORD *)a1 + 40) != 19
       || (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 29) & 0x20) != 0)
      && *(_WORD *)(a1 + 80) == 1
      && (a2 >= (unsigned int *)&_dispatch_root_queues
        ? (v6 = &_dispatch_queue_serial_numbers > (unint64_t *)a2)
        : (v6 = 0),
          v6))
    {
      v5 = 0x2000000000;
      v4 = 1;
    }
    else
    {
      v4 = 0;
      v5 = 0x1000000000;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v7 = (unint64_t *)(a1 + 56);
  while (1)
  {
    v8 = __ldxr(v7);
    result = v8 & 0xFFFFFFCFFFFFFFFFLL | v5;
    if (v8 == result)
      break;
    if (!__stxr(result, v7))
      goto LABEL_16;
  }
  __clrex();
  result = v8;
LABEL_16:
  if ((v8 & 0x2000000000) == 0)
    v4 = 1;
  if ((v4 & 1) == 0)
  {
    v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
    if (v10)
    {
      if (*(_QWORD *)(v10 + 24) == a1)
        result = _dispatch_event_loop_leave_immediate(result);
    }
  }
  if ((*(_QWORD *)(*(_QWORD *)a2 + 40) & 0x10000) == 0)
  {
    if (*(_QWORD *)(*(_QWORD *)a2 + 40) == 18)
    {
      v11 = *((_QWORD *)a2 + 3);
      if (v11 < (unint64_t)&_dispatch_root_queues || v11 >= (unint64_t)&_dispatch_queue_serial_numbers)
      {
        v15 = (_BYTE *)*((_QWORD *)a2 + 25);
        v12 = 0x1000000;
        if (v15)
        {
          if ((*v15 & 0x40) != 0)
            v12 = 17039360;
          else
            v12 = 0x1000000;
        }
      }
      else
      {
        v12 = 0;
      }
      v16 = a2 + 20;
      while (1)
      {
        v17 = __ldxr(v16);
        v18 = v17 & 0xFFAFFFFF | 0x100000;
        if (v18 == v17)
          break;
        if (!__stxr(v18, v16))
          goto LABEL_38;
      }
      __clrex();
      if (!v12)
        return result;
LABEL_39:
      v19 = (unsigned int *)(a1 + 80);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 | v12, v19));
      return result;
    }
    v13 = a2 + 20;
    v12 = a2[20] & 0x1000000;
    if (v12)
      v12 |= *v13 & 0x40000;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 | 0x100000, v13));
LABEL_38:
    if (v12)
      goto LABEL_39;
  }
  return result;
}

void _dispatch_lane_invoke(NSObject *a1, _QWORD *a2, unsigned int a3, int8x16_t a4)
{
  NSObject *v7;
  int v8;
  int isa_high;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  __objc2_class **isa;
  int8x16_t *v22;
  __objc2_class **v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t StatusReg;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int8x16_t v52;
  uint64_t v53;

  v53 = 0;
  if ((a3 & 3) == 0)
  {
    a1[2].isa = (Class)-1985229329;
    v7 = *(NSObject **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160);
    if (MEMORY[0xFFFFFC100])
      _dispatch_trace_item_pop_internal(v7, a1, a4);
    _dispatch_introspection_queue_item_dequeue(v7, a1);
  }
  if ((a3 & 2) != 0)
  {
    v53 = 0x40020000000001;
    v8 = a3 & 0x40000;
    goto LABEL_7;
  }
  v30 = ((unint64_t)LOWORD(a1[10].isa) << 41) - 0x20000000000;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v32 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
  v8 = a3 & 0x40000;
  if ((a3 & 0x40000) != 0)
    v33 = 0x4000000000;
  else
    v33 = 1;
  if ((a3 & 0x40001) == 0x40000)
    v34 = 0xFFE00000FFFFFFFCLL;
  else
    v34 = 0xFFE00040FFFFFFFCLL;
  v35 = *(_DWORD *)(StatusReg + 200);
  v36 = (v35 >> 8) & 0xF;
  v37 = (unsigned __int16)v35 >> 12;
  v38 = HIWORD(v35) & 0xF;
  if (v36 <= v37)
    v36 = v37;
  if (v36 > v38)
    v38 = v36;
  v39 = (unint64_t *)&a1[7];
  do
  {
    while (1)
    {
      v40 = __ldaxr(v39);
      if ((v40 & v34) != 0)
        break;
      if ((v40 & 0x1000000000) == 0 || (v41 = HIDWORD(v40) & 7, v41 <= v38))
      {
        v42 = (v40 >> 40) & 1;
        if (!((v30 + v40) >> 53))
          LODWORD(v42) = 1;
        if ((_DWORD)v42)
          v43 = 0x60000000000000;
        else
          v43 = 0x20000000000000;
        v44 = v32 | v40 & 0x7700000001 | v43;
        goto LABEL_84;
      }
      __clrex();
      v49 = v32;
      v51 = v30;
      _pthread_workqueue_override_start_direct(*(unsigned int *)(StatusReg + 24), (256 << ((BYTE4(v40) & 7u) - 1)) | 0xFF);
      v32 = v49;
      v30 = v51;
      v45 = *(_DWORD *)(StatusReg + 200);
      v38 = v41;
      if ((HIWORD(v45) & 0xF) < v41)
      {
        *(_QWORD *)(StatusReg + 200) = v45 & 0xFFF0FFFF | ((_DWORD)v41 << 16);
        v38 = v41;
      }
    }
    if ((a3 & 1) != 0)
    {
      __clrex();
      goto LABEL_100;
    }
    v44 = v40 ^ v33;
LABEL_84:
    ;
  }
  while (__stxr(v44, v39));
  if ((v40 & v34) != 0)
  {
LABEL_100:
    isa = 0;
    v53 = 0;
    goto LABEL_57;
  }
  v46 = 0x60000000000000;
  if ((a3 & 1) == 0)
    v46 = v33 | 0x60000000000000;
  v53 = (v44 & v46) - (v40 & 0x3FFE0000000000);
  if (!v53)
  {
    isa = 0;
    goto LABEL_57;
  }
LABEL_7:
  if (v8)
  {
    v50 = 0;
    if ((a3 & 0x100000) == 0)
      goto LABEL_24;
LABEL_23:
    if (((uint64_t)a1[10].isa & 0x400000) != 0)
    {
      v47 = (unsigned int *)&a1[10];
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 & 0xFFBFFFFF, v47));
    }
  }
  else
  {
    isa_high = HIDWORD(a1[10].isa);
    v10 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v11 = *(_QWORD *)(v10 + 200);
    if ((_DWORD)v11)
    {
      v12 = isa_high & 0xFFF;
      if ((isa_high & 0xFFF) != 0)
      {
        if (((unsigned __int16)v11 & 0xFFFu) > v12)
          v12 = v11 & 0xFFF;
        if ((unsigned __int16)isa_high >> 12 <= v12 >> 8)
          v13 = 0x40000000;
        else
          v13 = 1140912128;
        v14 = v11 & 0x880F0000 | v12 | v13 & isa_high;
      }
      else
      {
        v15 = v11 | 0x40000000;
        if ((v11 & 0xFFF) == 0)
          v15 = *(_QWORD *)(v10 + 200);
        v16 = (unsigned __int16)isa_high >> 12;
        v14 = v15 & 0xFFFF0FFF | isa_high & 0x400F000;
        if (v16 <= ((v15 >> 8) & 0xF))
          v14 = v15;
      }
    }
    else
    {
      v14 = isa_high & 0xFFF0FFFF;
    }
    *(_QWORD *)(v10 + 200) = v14;
    v50 = v11 & 0xFFF0FFFF;
    if ((a3 & 0x100000) != 0)
      goto LABEL_23;
  }
LABEL_24:
  if (((LODWORD(a1[10].isa) << 8) & 0x3000000) != 0)
    v17 = (LODWORD(a1[10].isa) << 8) & 0x3000000 | a3 & 0xFCFFFFFF;
  else
    v17 = a3;
  v18 = v17 & 0x1000002;
  v19 = (unint64_t *)&a1[7];
  v20 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_28:
  if (v18 == 2)
    _dispatch_last_resort_autorelease_pool_push(a2);
  isa = (__objc2_class **)a1[3].isa;
  v22 = (int8x16_t *)(v20 + 160);
  if (*(__objc2_class ***)(v20 + 160) == isa)
  {
    if (LOWORD(a1[10].isa) == 1)
      _dispatch_lane_serial_drain(a1, (uint64_t)a2, v17, &v53);
    else
      _dispatch_lane_concurrent_drain(a1, (uint64_t)a2, v17, &v53);
    isa = v23;
  }
  if (v18 == 2)
  {
    v52 = *v22;
    *(_QWORD *)(v20 + 160) = a1;
    *(_QWORD *)(v20 + 168) = &v52;
    _dispatch_last_resort_autorelease_pool_pop((uint64_t)a2);
    a4 = v52;
    *v22 = v52;
  }
  if ((unint64_t)isa + 1 <= 1)
  {
    v24 = v53;
    while (1)
    {
      v25 = __ldxr(v19);
      v26 = (v25 - v24) & 0xFFFFFFF700000001;
      if (!(v25 >> 55))
      {
        if ((v25 & 0x8000000000) != 0)
        {
          __clrex();
          do
            v27 = __ldaxr(v19);
          while (__stxr(v27 ^ 0x8000000000, v19));
          if ((a3 & 1) != 0)
            goto LABEL_28;
          isa = (__objc2_class **)v22->i64[0];
          if ((*(_QWORD *)(*(_QWORD *)v22->i64[0] + 40) & 0x10000) != 0)
            goto LABEL_28;
          break;
        }
        if (isa)
          v26 = (v25 - v24) & 0xFFFFFF7700000001 | 0x8000000000;
        else
          v26 = (v25 - v24) & 0xFFFFFFF000000001;
      }
      if (!__stlxr(v26, v19))
      {
        if ((~v25 & 0x1800000000) == 0)
        {
          v28 = HIDWORD(v25) & 7;
          v29 = *(_DWORD *)(v20 + 200);
          if ((HIWORD(v29) & 0xF) < v28)
            *(_QWORD *)(v20 + 200) = v29 & 0xFFF0FFFF | ((_DWORD)v28 << 16);
        }
        isa = 0;
        v53 = 0;
        break;
      }
    }
  }
  if ((v17 & 0x40000) == 0)
    *(_QWORD *)(v20 + 200) = *(_QWORD *)(v20 + 200) & 0xF0000 | v50;
LABEL_57:
  if ((a3 & 1) == 0)
  {
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(772079660, a1, 0, 0, 0);
    _dispatch_introspection_queue_item_complete(a1);
  }
  if (isa)
    _dispatch_queue_invoke_finish(a1, (uint64_t)a2, isa, v53, a4);
  else
    _os_object_release_internal_n(a1, (_BYTE *)&dword_0 + 2);
}

uint64_t dispatch_workloop_copy_current()
{
  uint64_t v0;
  BOOL v1;

  v0 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 216);
  v1 = v0 == -4 || v0 == 0;
  if (v1 || *(_BYTE *)(*(_QWORD *)v0 + 40) != 18)
    return 0;
  _os_object_retain_with_resurrect(v0);
  return v0;
}

BOOL dispatch_workloop_is_current(uint64_t a1)
{
  return *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 216) == a1;
}

BOOL _dispatch_workloop_uses_bound_thread(uint64_t a1)
{
  _BYTE *v1;

  v1 = *(_BYTE **)(a1 + 200);
  return v1 && (*v1 & 0x40) != 0;
}

BOOL _dispatch_workloop_should_yield_4NW()
{
  uint64_t v0;
  BOOL v1;

  v0 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 216);
  v1 = v0 == -4 || v0 == 0;
  return !v1 && *(_BYTE *)(*(_QWORD *)v0 + 40) == 18 && (*(_DWORD *)(v0 + 60) & 7u) > *(unsigned __int8 *)(v0 + 100);
}

dispatch_workloop_t dispatch_workloop_create(const char *label)
{
  return _dispatch_workloop_create(label, 0);
}

NSObject *_dispatch_workloop_create(const char *a1, uint64_t a2)
{
  int v3;
  const char *v5;
  NSObject *v6;
  unint64_t v7;

  v3 = 65537;
  if (a1)
  {
    v5 = _dispatch_strdup_if_mutable(a1);
    if (v5 == a1)
      v3 = 65537;
    else
      v3 = 2162689;
  }
  else
  {
    v5 = 0;
  }
  v6 = _dispatch_object_alloc(OS_dispatch_workloop, 208);
  if ((a2 & 0x180000000000000) != 0)
  {
    LODWORD(v6[1].isa) += 2;
    if (*((_BYTE *)v6->isa + 40) == 19)
      ++LODWORD(v6[1].isa);
  }
  v6[2].isa = (Class)-1985229329;
  LODWORD(v6[10].isa) = v3;
  v6[7].isa = (Class)(a2 | 0x1FFE2000000000);
  do
    v7 = __ldxr(&_dispatch_queue_serial_numbers);
  while (__stxr(v7 + 1, &_dispatch_queue_serial_numbers));
  v6[8].isa = (Class)v7;
  v6[9].isa = (Class)v5;
  v6[3].isa = (Class)&off_653C0;
  if ((a2 & 0x180000000000000) == 0)
    HIDWORD(v6[10].isa) = -2080358400;
  return _dispatch_introspection_queue_create(v6);
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return _dispatch_workloop_create(label, 0x180000000000000);
}

void dispatch_workloop_set_autorelease_frequency(dispatch_workloop_t workloop, dispatch_autorelease_frequency_t frequency)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t isa;

  v2 = (unsigned int *)&workloop[10];
  if (frequency == DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM)
  {
    while (1)
    {
      v3 = __ldxr(v2);
      v4 = v3 & 0xFFFCFFFF | 0x10000;
      if (v4 == v3)
        break;
      if (!__stxr(v4, v2))
        goto LABEL_7;
    }
  }
  else
  {
    while (1)
    {
      v5 = __ldxr(v2);
      v6 = v5 & 0xFFFCFFFF | 0x20000;
      if (v6 == v5)
        break;
      if (!__stxr(v6, v2))
        goto LABEL_7;
    }
  }
  __clrex();
LABEL_7:
  isa = (uint64_t)workloop[7].isa;
  if ((~isa & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_cold_1(isa);
}

_DWORD *dispatch_workloop_set_scheduler_priority(uint64_t a1, int a2, char a3)
{
  uint64_t v4;
  _DWORD *result;
  unsigned int v8;
  unsigned int v9;

  v4 = *(_QWORD *)(a1 + 56);
  if ((~v4 & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_cold_1(v4);
  result = *(_DWORD **)(a1 + 200);
  if (result)
  {
    if (a2)
      goto LABEL_4;
LABEL_8:
    result[2] = 0;
    v8 = *result & 0xFFFFFFFE;
    if ((a3 & 1) == 0)
      goto LABEL_5;
LABEL_9:
    result[4] = 2;
    v9 = v8 | 2;
    goto LABEL_10;
  }
  result = _dispatch_calloc(1uLL, 0x38uLL);
  *(_QWORD *)(a1 + 200) = result;
  if (!a2)
    goto LABEL_8;
LABEL_4:
  result[2] = a2;
  v8 = *result | 1;
  if ((a3 & 1) != 0)
    goto LABEL_9;
LABEL_5:
  v9 = v8 & 0xFFFFFFFD;
LABEL_10:
  *result = v9;
  return result;
}

uint64_t dispatch_workloop_set_uses_bound_thread(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t result;

  if (_dispatch_workloop_bound_thread_pred != -1)
    dispatch_once_f(&_dispatch_workloop_bound_thread_pred, 0, (dispatch_function_t)_dispatch_workloop_bound_thread_init_once);
  if (!_dispatch_thread_bound_kqwl_enabled)
    return 0xFFFFFFFFLL;
  v2 = *(_QWORD *)(a1 + 56);
  if ((~v2 & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_cold_1(v2);
  v3 = *(_DWORD **)(a1 + 200);
  if (!v3)
  {
    v3 = _dispatch_calloc(1uLL, 0x38uLL);
    *(_QWORD *)(a1 + 200) = v3;
  }
  result = 0;
  *v3 |= 0x40u;
  return result;
}

void dispatch_workloop_set_os_workgroup(dispatch_workloop_t workloop, os_workgroup_t workgroup)
{
  uint64_t isa;
  objc_class *v5;
  void *v6;

  isa = (uint64_t)workloop[7].isa;
  if ((~isa & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_cold_1(isa);
  v5 = workloop[25].isa;
  if (!v5)
  {
    v5 = (objc_class *)_dispatch_calloc(1uLL, 0x38uLL);
    workloop[25].isa = v5;
  }
  v6 = (void *)*((_QWORD *)v5 + 4);
  if (v6)
    _os_object_release(v6, (const char *)workgroup);
  _os_object_retain((uint64_t)workgroup);
  *((_QWORD *)workloop[25].isa + 4) = workgroup;
}

_DWORD *dispatch_workloop_set_qos_class(uint64_t a1, int a2, char a3)
{
  return dispatch_workloop_set_qos_class_floor(a1, a2, 0, a3);
}

_BYTE *dispatch_workloop_set_cpupercent(uint64_t a1, char a2, int a3)
{
  uint64_t v4;
  _BYTE *result;
  int v8;

  v4 = *(_QWORD *)(a1 + 56);
  if ((~v4 & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_cold_1(v4);
  result = *(_BYTE **)(a1 + 200);
  if (!result)
  {
    result = _dispatch_calloc(1uLL, 0x38uLL);
    *(_QWORD *)(a1 + 200) = result;
  }
  v8 = *(_DWORD *)result;
  if ((*(_DWORD *)result & 9) == 0)
    dispatch_workloop_set_cpupercent_cold_1();
  result[20] = a2;
  *((_DWORD *)result + 6) = a3;
  *(_DWORD *)result = v8 | 4;
  return result;
}

__n128 _dispatch_workloop_set_observer_hooks_4IOHID(uint64_t a1, __n128 *a2)
{
  uint64_t v3;
  char *v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 56);
  if ((~v3 & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_cold_1(v3);
  v5 = *(char **)(a1 + 200);
  if (!v5)
  {
    v5 = (char *)_dispatch_calloc(1uLL, 0x38uLL);
    *(_QWORD *)(a1 + 200) = v5;
  }
  result = *a2;
  *(__n128 *)(v5 + 40) = *a2;
  **(_DWORD **)(a1 + 200) |= 0x20u;
  return result;
}

void _dispatch_workloop_dispose(NSObject *a1, _BYTE *a2)
{
  uint64_t isa;
  const char *v5;
  uint64_t i;
  NSObject *v7;
  uint64_t v8;
  Class v9;
  _BYTE *v10;
  int v11;
  void **v12;

  isa = (uint64_t)a1[7].isa;
  if (isa != 0x1FFE2000000000)
  {
    if ((isa & 0xFFFFFFFC) == 0)
      _dispatch_workloop_dispose_cold_2(isa);
    _dispatch_workloop_dispose_cold_3(isa);
  }
  _dispatch_introspection_queue_dispose(a1);
  for (i = 0; i != 6; ++i)
  {
    v7 = &a1[i];
    v8 = (uint64_t)a1[i + 19].isa;
    if (v8)
      _dispatch_workloop_dispose_cold_1(v8);
    v7[19].isa = (Class)(&stru_1F8 + 8);
    v7[13].isa = (Class)(&stru_1F8 + 8);
  }
  v9 = a1[6].isa;
  if (v9)
  {
    free(v9);
    a1[6].isa = 0;
  }
  v10 = a1[25].isa;
  if (v10)
  {
    if ((*v10 & 0x10) != 0)
    {
      v11 = _pthread_workloop_destroy(a1);
      if (v11)
        _dispatch_bug(4566, v11);
    }
    v12 = (void **)a1[25].isa;
    if (v12)
    {
      if (v12[4])
      {
        _os_object_release(v12[4], v5);
        v12 = (void **)a1[25].isa;
      }
      free(v12);
    }
  }
  _dispatch_queue_dispose(a1, a2);
}

void _dispatch_workloop_activate(uint64_t a1, int8x16_t a2)
{
  unint64_t *v3;
  unint64_t v4;
  int *v5;
  int v6;
  uint64_t v7;
  uint64_t backing_workinterval;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  const sched_param *v14;
  int sched_priority;
  int v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  pthread_attr_t v20;
  pthread_attr_t v21;

  v3 = (unint64_t *)(a1 + 56);
  do
    v4 = __ldxr(v3);
  while (__stxr(v4 & 0xFEFFFFFFFFFFFFFFLL, v3));
  if ((~v4 & 0x180000000000000) != 0)
    return;
  v5 = *(int **)(a1 + 200);
  if (v5)
  {
    memset(&v20, 0, sizeof(v20));
    pthread_attr_init(&v20);
    v6 = *v5;
    if ((*v5 & 8) != 0)
      *(_DWORD *)(a1 + 84) |= v5[1] | 0x40000000;
    if ((v6 & 1) != 0)
    {
      pthread_attr_setschedparam(&v20, (const sched_param *)v5 + 1);
      *(_QWORD *)(a1 + 24) = &_dispatch_custom_workloop_root_queue;
    }
    v7 = *((_QWORD *)v5 + 4);
    if (v7)
    {
      *(_QWORD *)(a1 + 24) = &_dispatch_custom_workloop_root_queue;
      backing_workinterval = _os_workgroup_get_backing_workinterval(v7);
      if ((_DWORD)backing_workinterval)
        pthread_attr_setworkinterval_np(&v20, backing_workinterval);
    }
    v9 = *v5;
    if ((*v5 & 0x40) != 0)
    {
      if (_dispatch_root_queues_pred != -1)
        dispatch_once_f(&_dispatch_root_queues_pred, 0, (dispatch_function_t)_dispatch_root_queues_init_once);
      *(_QWORD *)(a1 + 24) = &_dispatch_custom_workloop_overcommit_root_queue;
      v9 = *v5;
      v10 = 1;
      if ((*v5 & 2) == 0)
      {
LABEL_19:
        if ((v9 & 4) != 0)
          pthread_attr_setcpupercent_np(&v20, *((unsigned __int8 *)v5 + 20), v5[6]);
        v11 = *(_QWORD *)(a1 + 200);
        if (!v11)
          goto LABEL_46;
        if ((*(_BYTE *)v11 & 0x47) == 0)
        {
          v13 = *(_QWORD *)(v11 + 32);
          if (!v13 || !_os_workgroup_get_backing_workinterval(v13))
            goto LABEL_46;
        }
        v12 = _pthread_workloop_create(a1, v10, &v20);
        if (v12 <= 44)
        {
          if (v12)
          {
            if (v12 == 33)
              _dispatch_workloop_activate_cold_1(a1);
          }
          else
          {
            *v5 |= 0x10u;
          }
          goto LABEL_46;
        }
        if (v12 != 45)
        {
          if (v12 == 78)
            _dispatch_workloop_activate_simulator_fallback(a1, (__int128 *)&v20.__sig);
LABEL_46:
          pthread_attr_destroy(&v20);
          goto LABEL_47;
        }
        v14 = *(const sched_param **)(a1 + 200);
        memset(&v21, 0, sizeof(v21));
        pthread_attr_init(&v21);
        sched_priority = v14->sched_priority;
        if ((v14->sched_priority & 1) != 0)
        {
          pthread_attr_setschedparam(&v21, v14 + 1);
          sched_priority = v14->sched_priority;
          if ((v14->sched_priority & 2) == 0)
          {
LABEL_34:
            if ((sched_priority & 4) == 0)
            {
LABEL_36:
              v16 = _pthread_workloop_create(a1, 0, &v21);
              if (v16 == 45)
              {
                _dispatch_workloop_activate_simulator_fallback(a1, (__int128 *)&v21.__sig);
              }
              else if (!v16)
              {
                v14->sched_priority |= 0x10u;
              }
              pthread_attr_destroy(&v21);
              goto LABEL_46;
            }
LABEL_35:
            pthread_attr_setcpupercent_np(&v21, v14[2].__opaque[0], v14[3].sched_priority);
            goto LABEL_36;
          }
        }
        else if ((sched_priority & 2) == 0)
        {
          goto LABEL_34;
        }
        pthread_attr_setschedpolicy(&v21, v14[2].sched_priority);
        if ((v14->sched_priority & 4) == 0)
          goto LABEL_36;
        goto LABEL_35;
      }
    }
    else
    {
      v10 = 0;
      if ((v9 & 2) == 0)
        goto LABEL_19;
    }
    pthread_attr_setschedpolicy(&v20, v5[4]);
    v9 = *v5;
    goto LABEL_19;
  }
LABEL_47:
  v17 = *(_DWORD *)(a1 + 84);
  if (v17)
    v18 = v17 | 0x80000000;
  else
    v18 = -2080358400;
  *(_DWORD *)(a1 + 84) = v18;
  do
    v19 = __ldxr(v3);
  while (__stxr(v19 & 0xFF7FFFFFFFFFFFFFLL, v3));
  _dispatch_workloop_wakeup(a1, 0, 1u, a2);
}

void _dispatch_workloop_wakeup(NSObject *a1, uint64_t a2, unsigned int a3, int8x16_t a4)
{
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int8x16_t v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *isa;

  if ((a3 & 4) != 0)
  {
    _dispatch_workloop_barrier_complete(a1, a2, a3, a4);
    return;
  }
  if ((a3 & 1) == 0)
    _dispatch_workloop_wakeup_cold_1(a3);
  if ((a3 & 8) != 0)
    goto LABEL_20;
  v6 = (unint64_t *)&a1[7];
  v7 = a2 << 32;
  do
  {
    v8 = __ldxr(v6);
    v9 = v8 & 0xFFFFFFF8FFFFFFFFLL | v7;
    if (v8 & 0x1000000000 | v7 & 0x1000000000)
      v9 |= 0x800000000uLL;
    if ((v8 & 0x700000000) < v7)
      v10 = v9;
    else
      v10 = v8;
    v11 = v10 | ((v10 & 0x700000000) != 0);
    if ((a3 & 2) != 0)
    {
      v11 |= 0x8000000000uLL;
    }
    else if (v11 == v8)
    {
      __clrex();
      goto LABEL_20;
    }
  }
  while (__stlxr(v11, v6));
  if (v8 >> 55)
    _dispatch_workloop_wakeup_cold_2(v8);
  if (((v11 ^ v8) & 1) != 0)
  {
    if ((v11 & 0x2000000000) != 0)
    {
      _dispatch_introspection_runtime_event();
      v13 = a1;
      v14 = v11;
      v15 = (&dword_0 + 1);
LABEL_19:
      _dispatch_event_loop_poke(v13, v14, v15, v12);
      return;
    }
    isa = a1[3].isa;
    if (MEMORY[0xFFFFFC100])
      _dispatch_trace_item_push_internal((_QWORD *)a1[3].isa, a1, a4);
    _dispatch_introspection_queue_item_enqueue(isa, a1);
    (*((void (**)(NSObject *, NSObject *, unint64_t))isa->isa + 11))(isa, a1, HIDWORD(v11) & 7);
    return;
  }
  if (((v11 ^ v8) & 0x700000000) == 0)
  {
LABEL_20:
    _os_object_release_internal_n(a1, (_BYTE *)&dword_0 + 2);
    return;
  }
  if ((v11 & 0x2000000000) != 0)
  {
    _dispatch_introspection_runtime_event();
    v15 = (a3 | 0x80000000);
    v13 = a1;
    v14 = v11;
    goto LABEL_19;
  }
  _dispatch_queue_wakeup_with_override_slow((uint64_t)a1, v11, a3);
}

void _dispatch_workloop_invoke(NSObject *a1, uint64_t a2, int a3, int8x16_t a4)
{
  int v4;
  NSObject *v6;
  int v7;
  uint64_t v8;
  int isa_high;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  _BYTE *isa;
  int8x16_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  unint64_t *v36;
  uint64_t *v37;
  unint64_t *v38;
  unint64_t v39;
  void (**v40);
  uint64_t v41;
  void *v42;
  unsigned int *v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  void (*v55)(void (**)(void));
  _QWORD *v56;
  void (__cdecl *v57)(void *);
  uint64_t v58;
  _QWORD *v59;
  void (*v60)(void (**)(void));
  void (__cdecl *v61)(void *);
  unint64_t v62;
  __objc2_class **v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unint64_t v71;
  unint64_t StatusReg;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  BOOL v93;
  NSObject *group;
  uint64_t v95;
  int v96;
  int8x16_t *v97;
  int v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  unint64_t *v102;
  unsigned int v104;
  unint64_t v105;
  int8x16_t v106;

  v4 = a3;
  if ((a3 & 3) == 0)
  {
    a1[2].isa = (Class)-1985229329;
    v6 = *(NSObject **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160);
    if (MEMORY[0xFFFFFC100])
      _dispatch_trace_item_pop_internal(v6, a1, a4);
    _dispatch_introspection_queue_item_dequeue(v6, a1);
  }
  v96 = v4;
  if ((v4 & 2) != 0)
  {
    v7 = v4 & 0x40000;
    v8 = 0x40020000000001;
    goto LABEL_7;
  }
  v71 = ((unint64_t)LOWORD(a1[10].isa) << 41) - 0x20000000000;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v73 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
  v7 = v4 & 0x40000;
  if ((v4 & 0x40000) != 0)
    v74 = 0x4000000000;
  else
    v74 = 1;
  if ((v4 & 0x40001) == 0x40000)
    v75 = 0xFFE00000FFFFFFFCLL;
  else
    v75 = 0xFFE00040FFFFFFFCLL;
  v76 = *(_DWORD *)(StatusReg + 200);
  v77 = (v76 >> 8) & 0xF;
  v78 = (unsigned __int16)v76 >> 12;
  v79 = HIWORD(v76) & 0xF;
  if (v77 <= v78)
    v77 = v78;
  if (v77 > v79)
    v79 = v77;
  v80 = (unint64_t *)&a1[7];
  while (1)
  {
    while (1)
    {
      v81 = __ldaxr(v80);
      v82 = v81 & v75;
      if ((v81 & v75) != 0)
        break;
      if ((v81 & 0x1000000000) == 0 || (v83 = HIDWORD(v81) & 7, v83 <= v79))
      {
        v84 = (v81 >> 40) & 1;
        if (!((v71 + v81) >> 53))
          LODWORD(v84) = 1;
        if ((_DWORD)v84)
          v85 = 0x60000000000000;
        else
          v85 = 0x20000000000000;
        v86 = v73 | v81 & 0x7700000001 | v85;
        goto LABEL_189;
      }
      __clrex();
      v105 = v71;
      _pthread_workqueue_override_start_direct(*(unsigned int *)(StatusReg + 24), (256 << ((BYTE4(v81) & 7u) - 1)) | 0xFF);
      v71 = v105;
      v87 = *(_DWORD *)(StatusReg + 200);
      v79 = v83;
      if ((HIWORD(v87) & 0xF) < v83)
      {
        *(_QWORD *)(StatusReg + 200) = v87 & 0xFFF0FFFF | ((_DWORD)v83 << 16);
        v79 = v83;
      }
    }
    if ((v96 & 1) != 0)
      break;
    v86 = v81 ^ v74;
LABEL_189:
    if (!__stxr(v86, v80))
      goto LABEL_200;
  }
  __clrex();
  v86 = v81;
LABEL_200:
  v4 = v96;
  v90 = 0x60000000000000;
  if ((v96 & 1) == 0)
    v90 = v74 | 0x60000000000000;
  v91 = v86 & v90;
  v92 = v81 & 0x3FFE0000000000;
  v8 = v91 - v92;
  if (v82)
    v93 = 1;
  else
    v93 = v91 == v92;
  if (v93)
  {
    v99 = 0;
    v63 = 0;
    if ((v96 & 1) == 0)
      goto LABEL_163;
    goto LABEL_166;
  }
LABEL_7:
  if (v7)
  {
    v95 = 0;
  }
  else
  {
    isa_high = HIDWORD(a1[10].isa);
    v10 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v11 = *(_QWORD *)(v10 + 200);
    if ((_DWORD)v11)
    {
      v12 = (unsigned __int16)isa_high >> 12;
      v13 = isa_high & 0xFFF;
      if ((isa_high & 0xFFF) != 0)
      {
        if (((unsigned __int16)v11 & 0xFFFu) > v13)
          v13 = v11 & 0xFFF;
        if (v12 <= v13 >> 8)
          v14 = 0x40000000;
        else
          v14 = 1140912128;
        v15 = v11 & 0x880F0000 | v13 | v14 & isa_high;
      }
      else
      {
        v16 = v11 | 0x40000000;
        if ((v11 & 0xFFF) == 0)
          v16 = *(_QWORD *)(v10 + 200);
        v15 = v16 & 0xFFFF0FFF | isa_high & 0x400F000;
        if (v12 <= ((v16 >> 8) & 0xF))
          v15 = v16;
      }
    }
    else
    {
      v15 = isa_high & 0xFFF0FFFF;
    }
    *(_QWORD *)(v10 + 200) = v15;
    v95 = v11 & 0xFFF0FFFF;
  }
  v99 = v8;
  if (((uint64_t)a1[10].isa & 0x400000) != 0)
  {
    v88 = (unsigned int *)&a1[10];
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 & 0xFFBFFFFF, v88));
  }
  v17 = (LODWORD(a1[10].isa) << 8) & 0x3000000 | v4 & 0xFCEDFFFF | 0x100000;
  if (((LODWORD(a1[10].isa) << 8) & 0x3000000) == 0)
    v17 = v4 & 0xFFEDFFFF | 0x100000;
  v18 = v17 & 0x1000002;
  v102 = (unint64_t *)&a1[7];
  v101 = v17 & 0xFFFD0000;
  v104 = v17;
  v100 = (v17 >> 21) & 1;
  v19 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v98 = v17 & 0x1000002;
  while (2)
  {
    while (2)
    {
      if (v18 == 2)
        _dispatch_last_resort_autorelease_pool_push((_QWORD *)a2);
      isa = a1[25].isa;
      v106 = 0uLL;
      if (isa && (*isa & 0x20) != 0)
        *(_QWORD *)(v19 + 192) = isa + 40;
      v97 = (int8x16_t *)(v19 + 160);
      v21 = *(int8x16_t *)(v19 + 160);
      v106 = v21;
      *(_QWORD *)(v19 + 160) = a1;
      *(_QWORD *)(v19 + 168) = &v106;
LABEL_32:
      v22 = 6;
      do
      {
LABEL_33:
        if (!v22)
        {
          v63 = 0;
          a4 = v106;
          v99 = v99 & 1 | 0x40020000000000;
          *v97 = v106;
          *(_QWORD *)(v19 + 192) = 0;
          goto LABEL_140;
        }
        v23 = v22--;
        v24 = &a1[v22];
      }
      while (!v24[19].isa);
      v25 = (uint64_t)&v24[19];
      v26 = v23;
      v27 = v23 << 32;
      v28 = (unint64_t *)&a1[7];
      do
      {
        v29 = __ldxr(v28);
        if ((v29 & 0x700000000) <= v27)
        {
          __clrex();
          goto LABEL_41;
        }
        if ((v29 & 0x8000000000) != 0)
        {
          __clrex();
          do
            v62 = __ldaxr(v102);
          while (__stxr(v62 ^ 0x8000000000, v102));
          goto LABEL_32;
        }
        v30 = __stxr(v29 & 0xFFFFFFF8FFFFFFFFLL | v27, v102);
        v28 = (unint64_t *)&a1[7];
      }
      while (v30);
      v31 = *(_QWORD *)(v19 + 232);
      if (v31)
      {
        *(_BYTE *)(v31 + 45) |= 2u;
        _dispatch_return_to_kernel();
      }
LABEL_41:
      BYTE4(a1[12].isa) = v23;
      v32 = &a1[v22];
      v33 = (uint64_t)v32[13].isa;
      if (!v33)
        v33 = _dispatch_wait_for_enqueuer((unint64_t *)&v32[13], v25);
      while (2)
      {
        if ((*(_QWORD *)v33 & 0xFFFFFFFFFFFFF001) != 1)
        {
          v34 = *(_QWORD *)(v33 + 16);
          v35 = &a1[(int)v26 - 1];
          v35[13].isa = (Class)v34;
          if (!v34)
          {
            v36 = (unint64_t *)(v33 + 16);
            v37 = (uint64_t *)&v35[13];
            v38 = (unint64_t *)&v35[19];
            while (1)
            {
              v39 = __ldxr(v38);
              if (v39 != v33)
                break;
              if (!__stlxr(0, v38))
                goto LABEL_52;
            }
            __clrex();
            v34 = *v36;
            if (!*v36)
              v34 = _dispatch_wait_for_enqueuer(v36, (uint64_t)v38);
            *v37 = v34;
          }
LABEL_52:
          if (*(_QWORD *)(v19 + 40))
            _dispatch_return_to_kernel();
          v40 = *(void (***))(v19 + 192);
          if (v40)
            (*v40)(a1);
          v41 = *(_QWORD *)v33;
          if (*(_QWORD *)v33 >= 0x1000uLL)
          {
            if (*(_QWORD *)(v41 + 40) == 1)
              (*(void (**)(uint64_t, _QWORD, _QWORD))(v41 + 48))(v33, 0, v100);
            else
              (*(void (**)(uint64_t, uint64_t, _QWORD))(v41 + 64))(v33, a2, v101);
LABEL_110:
            if (v40)
              v40[1](a1);
            if (!v34 || (v26 = BYTE4(a1[12].isa), v33 = v34, (HIDWORD(a1[7].isa) & 7u) > v26))
            {
              v22 = 6;
              v18 = v98;
              goto LABEL_33;
            }
            continue;
          }
          if ((v104 & 0x1000000) != 0)
          {
            v42 = objc_autoreleasePoolPush();
            v41 = *(_QWORD *)v33;
          }
          else
          {
            v42 = 0;
          }
          v43 = *(unsigned int **)(v33 + 24);
          if ((v41 & 4) != 0)
            *(_QWORD *)(v33 + 24) = -1;
          if (v43 != (unsigned int *)-1)
          {
            v44 = v43;
            if (v43)
              v44 = (unsigned int *)v43[8];
            if (MEMORY[0xFFFFFC100])
              kdebug_trace(771817480, v44, v33, 0, 0);
          }
          v45 = *(_QWORD *)(v33 + 8);
          if (v45 == -1)
          {
            v48 = 0;
          }
          else
          {
            v46 = *(_QWORD *)(v19 + 200);
            if (((v46 >> 8) & 0xF) != 0)
              v47 = 256 << ((BYTE1(v46) & 0xFu) - 1);
            else
              v47 = 0;
            v48 = v47 & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(v19 + 200);
            if ((v45 & 0xFFFFFF) != 0)
            {
              if ((v45 & 0xFFFFFFuLL) >= (v47 & 0xFFFFFF00)
                && ((v46 & 0x44000000) != 0 || (*(_QWORD *)(v33 + 8) & 0x10000000) != 0))
              {
                v48 = v45 & 0xFFFFFF;
              }
            }
            else if ((unsigned __int16)v46 >> 12)
            {
              v48 = (256 << (((unsigned __int16)v46 >> 12) - 1)) | 0xFF;
            }
          }
          v50 = v48 & 0xFFFFFFFF02FFFFFFLL;
          v51 = *(_QWORD *)(v19 + 32);
          if ((v51 & 0x1000000) != 0)
          {
            if (!v50)
            {
              v50 = v51 & 0xFFFFFFFFFEFFFFFFLL;
              goto LABEL_117;
            }
LABEL_132:
            _dispatch_set_priority_and_voucher_slow(v50, v43, v41 & 4 | 2);
            if ((v41 & 0x200) == 0)
            {
LABEL_91:
              if (MEMORY[0xFFFFFC100])
                _dispatch_trace_item_pop_internal(a1, (_QWORD *)v33, v21);
              _dispatch_introspection_queue_item_dequeue(a1, v33);
            }
          }
          else
          {
            if (v50 == (v51 & 0xFFFFFFFF77FFFFFFLL))
              goto LABEL_85;
LABEL_117:
            if (v50)
              goto LABEL_132;
LABEL_85:
            if (v43 != (unsigned int *)-1)
            {
              if (*(unsigned int **)(v19 + 224) != v43)
              {
                v50 = 0;
                goto LABEL_132;
              }
              if ((v41 & 4) != 0 && v43)
                os_release(v43);
            }
            if ((v41 & 0x200) == 0)
              goto LABEL_91;
          }
          if ((v41 & 4) != 0)
          {
            v53 = *(_QWORD *)(v19 + 176);
            if (v53)
              v54 = *(_DWORD *)(v53 + 8) + 1;
            else
              v54 = 1;
            v52 = v33;
            if (v54 <= _dispatch_continuation_cache_limit)
            {
              v52 = 0;
              *(_QWORD *)(v33 + 16) = v53;
              *(_DWORD *)(v33 + 8) = v54;
              *(_QWORD *)(v19 + 176) = v33;
            }
          }
          else
          {
            v52 = 0;
          }
          if ((v41 & 8) != 0)
          {
            v58 = *(_QWORD *)(**(_QWORD **)(v33 + 48) + 40);
            if (v58 != 514)
              _dispatch_queue_override_invoke_cold_1(v58);
            group = *(NSObject **)(v33 + 48);
            v60 = *(void (**)(void (**)(void)))(v33 + 32);
            v59 = *(_QWORD **)(v33 + 40);
            v61 = (void (__cdecl *)(void *))v60;
            if (v59)
            {
              v61 = *(void (__cdecl **)(void *))(v33 + 32);
              if (v60 == _dispatch_call_block_and_release)
                v61 = (void (__cdecl *)(void *))v59[2];
            }
            _dispatch_introspection_callout_entry(*(void **)(v33 + 40), v61);
            _dispatch_client_callout((uint64_t)v59, (uint64_t (*)(void))v60);
            _dispatch_introspection_callout_return(v59, v61);
            if (MEMORY[0xFFFFFC100])
              kdebug_trace(772079660, v33, 0, 0, 0);
            _dispatch_introspection_queue_item_complete(v33);
            dispatch_group_leave(group);
            if (!v52)
              goto LABEL_108;
          }
          else
          {
            v55 = *(void (**)(void (**)(void)))(v33 + 32);
            v56 = *(_QWORD **)(v33 + 40);
            v57 = (void (__cdecl *)(void *))v55;
            if (v56)
            {
              v57 = *(void (__cdecl **)(void *))(v33 + 32);
              if (v55 == _dispatch_call_block_and_release)
                v57 = (void (__cdecl *)(void *))v56[2];
            }
            _dispatch_introspection_callout_entry(*(void **)(v33 + 40), v57);
            _dispatch_client_callout((uint64_t)v56, (uint64_t (*)(void))v55);
            _dispatch_introspection_callout_return(v56, v57);
            if (MEMORY[0xFFFFFC100])
              kdebug_trace(772079660, v33, 0, 0, 0);
            _dispatch_introspection_queue_item_complete(v33);
            if (!v52)
            {
LABEL_108:
              if (!v42)
                goto LABEL_110;
              goto LABEL_109;
            }
          }
          _dispatch_continuation_free_to_cache_limit(v52);
          if (!v42)
            goto LABEL_110;
LABEL_109:
          objc_autoreleasePoolPop(v42);
          goto LABEL_110;
        }
        break;
      }
      *(_DWORD *)(a2 + 16) = v26;
      *(_QWORD *)(a2 + 8) = v33;
      BYTE4(a1[12].isa) = 0;
      a4 = v106;
      *v97 = v106;
      *(_QWORD *)(v19 + 192) = 0;
      v63 = (__objc2_class **)a1[3].isa;
      v18 = v98;
LABEL_140:
      if (v18 == 2)
      {
        v106 = *v97;
        *(_QWORD *)(v19 + 160) = a1;
        *(_QWORD *)(v19 + 168) = &v106;
        _dispatch_last_resort_autorelease_pool_pop(a2);
        a4 = v106;
        *v97 = v106;
      }
      v64 = (unint64_t *)&a1[7];
      if ((unint64_t)v63 + 1 > 1)
        goto LABEL_160;
      while (2)
      {
        v65 = __ldxr(v64);
        v66 = (v65 - v99) & 0xFFFFFFF700000001;
        if (v65 >> 55)
        {
LABEL_147:
          v67 = __stlxr(v66, v102);
          v64 = (unint64_t *)&a1[7];
          if (!v67)
          {
            if ((~v65 & 0x1800000000) != 0
              || (v69 = HIDWORD(v65) & 7, v70 = *(_DWORD *)(v19 + 200), (HIWORD(v70) & 0xF) >= v69))
            {
              v99 = 0;
              v63 = 0;
            }
            else
            {
              v99 = 0;
              v63 = 0;
              *(_QWORD *)(v19 + 200) = v70 & 0xFFF0FFFF | ((_DWORD)v69 << 16);
            }
            goto LABEL_160;
          }
          continue;
        }
        break;
      }
      if ((v65 & 0x8000000000) == 0)
      {
        if (v63)
          v66 = (v65 - v99) & 0xFFFFFF7700000001 | 0x8000000000;
        else
          v66 = (v65 - v99) & 0xFFFFFFF000000001;
        goto LABEL_147;
      }
      __clrex();
      do
        v68 = __ldaxr(v102);
      while (__stxr(v68 ^ 0x8000000000, v102));
      if ((v96 & 1) != 0)
        continue;
      break;
    }
    v63 = (__objc2_class **)v97->i64[0];
    if ((*(_QWORD *)(*(_QWORD *)v97->i64[0] + 40) & 0x10000) != 0)
      continue;
    break;
  }
LABEL_160:
  if ((v104 & 0x40000) == 0)
    *(_QWORD *)(v19 + 200) = *(_QWORD *)(v19 + 200) & 0xF0000 | v95;
  if ((v96 & 1) == 0)
  {
LABEL_163:
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(772079660, a1, 0, 0, 0);
    _dispatch_introspection_queue_item_complete(a1);
  }
LABEL_166:
  if (v63)
    _dispatch_queue_invoke_finish(a1, a2, v63, v99, a4);
  else
    _os_object_release_internal_n(a1, (_BYTE *)&dword_0 + 2);
}

void _dispatch_workloop_barrier_complete(NSObject *a1, uint64_t a2, int a3, int8x16_t a4)
{
  unsigned int *v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD *isa;
  unint64_t v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t StatusReg;
  uint64_t v27;
  unsigned int v28;
  int8x16_t v29;
  NSObject *v30;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;

  v6 = (unsigned int *)&a1[1];
  v7 = (unint64_t *)&a1[7];
  v8 = a2 << 32;
  v9 = a1 + 24;
LABEL_2:
  v10 = 0;
  v11 = v9;
  v12 = 6;
  do
  {
    if (v11->isa)
    {
      isa = v11[-6].isa;
      if (!isa)
        isa = (_QWORD *)_dispatch_wait_for_enqueuer((unint64_t *)&v11[-6], (uint64_t)v11);
      if (*isa <= 0xFFFuLL && (*isa & 0x81) != 0)
      {
        _dispatch_workloop_drain_barrier_waiter((uint64_t)a1, (uint64_t)isa, v12, a3, 0);
        return;
      }
      v10 = 1;
    }
    --v11;
    --v12;
  }
  while (v12);
  if (v10 && (a3 & 1) == 0)
  {
    if (*v6 != 0x7FFFFFFF)
    {
      do
        v24 = __ldxr(v6);
      while (__stxr(v24 + 2, v6));
      if (v24 <= 0)
        dispatch_set_target_queue_cold_2();
    }
    a3 |= 1u;
  }
  do
  {
    while (1)
    {
      v15 = __ldxr(v7);
      if ((~v15 & 0x2000000002) != 0 || (v15 & 0x800000001) == 0)
        break;
      _dispatch_event_loop_ensure_ownership((uint64_t)a1);
      do
        v23 = __ldxr(v7);
      while (__stxr(v23 & 0xFFFFFFF7FFFFFFFDLL, v7));
      __clrex();
    }
    v17 = v15 & 0xFFFFFFF8FFFFFFFFLL | v8;
    if (v15 & 0x1000000000 | v8 & 0x1000000000)
      v17 |= 0x800000000uLL;
    if ((v15 & 0x700000000) < v8)
      v18 = v17;
    else
      v18 = v15;
    v19 = (v18 & 0xFFFFFFF700000001) - 0x40020000000000;
    if (v10)
    {
      v20 = v19 | 1;
    }
    else
    {
      if ((v15 & 0x8000000000) != 0)
      {
        __clrex();
        do
          v25 = __ldaxr(v7);
        while (__stxr(v25 ^ 0x8000000000, v7));
        goto LABEL_2;
      }
      v21 = v19 & 0xFFFFFFF000000001;
      v22 = v19 & 0xFFFFFFF000000000;
      if ((v15 & 0x2000000000) != 0)
        v20 = v22;
      else
        v20 = v21;
    }
  }
  while (__stlxr(v20, v7));
  if ((v20 & 0x4000000001) != 0)
    _dispatch_introspection_runtime_event();
  if ((v15 & 0x2000000000) != 0)
  {
    if ((v15 & 3) != 2 || (v20 & 1) != 0)
    {
      _dispatch_event_loop_end_ownership((uint64_t)a1, v15, v20, a3);
      return;
    }
    goto LABEL_55;
  }
  if ((~v15 & 0x1800000000) == 0)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v27 = HIDWORD(v15) & 7;
    v28 = *(_DWORD *)(StatusReg + 200);
    if ((HIWORD(v28) & 0xF) < v27)
      *(_QWORD *)(StatusReg + 200) = v28 & 0xFFF0FFFF | ((_DWORD)v27 << 16);
  }
  if (!v10)
    goto LABEL_55;
  if (((v20 ^ v15) & 1) != 0)
  {
    if ((v20 & 0x2000000000) != 0)
    {
      _dispatch_introspection_runtime_event();
      v30 = a1;
      v31 = v20;
      v32 = (&dword_0 + 1);
LABEL_52:
      _dispatch_event_loop_poke(v30, v31, v32, v29);
      return;
    }
    v33 = a1[3].isa;
    if (MEMORY[0xFFFFFC100])
      _dispatch_trace_item_push_internal((_QWORD *)a1[3].isa, a1, a4);
    _dispatch_introspection_queue_item_enqueue(v33, a1);
    (*((void (**)(NSObject *, NSObject *, unint64_t))v33->isa + 11))(v33, a1, HIDWORD(v20) & 7);
    return;
  }
  if ((v20 & 0xFF80004000000000) != 0 || (v20 & 0xFFFFFFFD) == 0)
  {
LABEL_55:
    if ((a3 & 1) != 0)
      _os_object_release_internal_n(a1, (_BYTE *)&dword_0 + 2);
    return;
  }
  if ((v20 & 0x2000000000) != 0)
  {
    _dispatch_introspection_runtime_event();
    v32 = (a3 | 0x80000000);
    v30 = a1;
    v31 = v20;
    goto LABEL_52;
  }
  _dispatch_queue_wakeup_with_override_slow((uint64_t)a1, v20, a3);
}

void _dispatch_workloop_push(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t StatusReg;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  if (*a2 > 0xFFFuLL || (*a2 & 0x81) == 0)
  {
    v4 = *(_DWORD *)(a1 + 84);
    v5 = (v4 >> 8) & 0xF;
    v6 = (unsigned __int16)v4 >> 12;
    if (a3)
      v6 = a3;
    if (v5 > a3)
      v6 = v5;
    a2[2] = 0;
    v7 = v6 - 1;
    v8 = (unint64_t *)(a1 + 8 * v7 + 152);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(_QWORD *)(StatusReg + 976) = v8;
    do
      v10 = __ldxr(v8);
    while (__stlxr((unint64_t)a2, v8));
    if (v10)
    {
      *(_QWORD *)(v10 + 16) = a2;
      *(_QWORD *)(StatusReg + 976) = 0;
    }
    else
    {
      v11 = (unsigned int *)(a1 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      *(_QWORD *)(a1 + 8 * v7 + 104) = a2;
      *(_QWORD *)(StatusReg + 976) = 0;
      _dispatch_workloop_wakeup((id)a1);
    }
  }
  else
  {
    _dispatch_workloop_push_waiter(a1, (unint64_t)a2, a3);
  }
}

void _dispatch_workloop_push_waiter(NSObject *a1, unint64_t a2, unsigned int a3)
{
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t StatusReg;
  unint64_t v10;
  NSObject *v11;
  uint64_t v12;
  Class isa;
  BOOL v14;
  unsigned int *v15;
  unsigned int v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  _QWORD *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  int8x16_t v36;
  NSObject *v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t *v40;

  v3 = a1;
  v4 = (__clz(__rbit32((*(_DWORD *)(a2 + 8) >> 8) & 0x3FFF)) + 1) & 0xF;
  if (((*(_DWORD *)(a2 + 8) >> 8) & 0x3FFF) == 0)
    v4 = 0;
  if (v4 <= a3)
    v4 = a3;
  if (v4)
    v5 = v4;
  else
    v5 = 4;
  v6 = (unint64_t *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v7 = (int)v5 - 1;
  v8 = (unint64_t *)&a1[v7 + 19];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_QWORD *)(StatusReg + 976) = v8;
  do
    v10 = __ldxr(v8);
  while (__stlxr(a2, v8));
  if (v10)
  {
    *(_QWORD *)(v10 + 16) = a2;
    *(_QWORD *)(StatusReg + 976) = 0;
    return;
  }
  v11 = &a1[v7];
  v11[13].isa = (Class)a2;
  *(_QWORD *)(StatusReg + 976) = 0;
  v12 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 0x80) != 0
    && ((isa = a1[3].isa, isa >= (Class)&_dispatch_root_queues)
      ? (v14 = isa >= (Class)&_dispatch_queue_serial_numbers)
      : (v14 = 1),
        v14))
  {
    *(_QWORD *)(a2 + 56) = a1;
    *(_QWORD *)a2 = v12 & 0xFFFFFFFFFFFFFF7FLL;
    v15 = (unsigned int *)&a1[1];
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    _dispatch_workloop_wakeup(a1);
  }
  else
  {
    v17 = (unint64_t *)&v11[13];
    v18 = (unint64_t *)&a1[7];
    v19 = v5 << 32;
    v20 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL | 0x60000000000002;
    do
    {
      v21 = __ldxr(v18);
      v22 = v21 & 0xFFFFFFF8FFFFFFFFLL | v19;
      if (v21 & 0x1000000000 | v19 & 0x1000000000)
        v22 |= 0x800000000uLL;
      if ((v21 & 0x700000000) < v19)
        v23 = v22;
      else
        v23 = v21;
      v24 = v23 | 0x8000000000;
      v25 = v20 | v23 & 0x7700000001;
      if ((v21 & 0x40FFFFFFFDLL) != 0)
        v25 = v24;
    }
    while (__stlxr(v25, v18));
    if ((v25 & 0x2000000000) != 0 && *(_QWORD *)(a2 + 48) != -4)
      *(_BYTE *)(a2 + 106) = *(_BYTE *)(a2 + 106) & 0xFB | (4 * (*(_DWORD *)(a2 + 100) == *(_DWORD *)(StatusReg + 24)));
    if (((v25 ^ v21) & 0x40000000000000) != 0)
    {
      if ((*(_BYTE *)(a2 + 106) & 4) == 0)
        goto LABEL_48;
      v27 = *v17;
      if (!*v17)
      {
        v37 = v3;
        v38 = (unint64_t *)(a2 + 16);
        v39 = v8;
        v40 = v17;
        v33 = a2;
        v27 = _dispatch_wait_for_enqueuer(v17, (uint64_t)v8);
        v8 = v39;
        v17 = v40;
        a2 = v33;
        v3 = v37;
        v6 = v38;
      }
      if (v27 == a2)
      {
        v28 = v17;
        v29 = v8;
        *(_BYTE *)(a2 + 106) |= 8u;
        if ((*(_BYTE *)a2 & 0x80) != 0)
          *(_QWORD *)(a2 + 56) = v3;
        v30 = *v6;
        *v17 = *v6;
        if (!v30)
        {
          while (1)
          {
            v31 = __ldxr(v29);
            if (v31 != a2)
              break;
            if (!__stlxr(0, v29))
              return;
          }
          __clrex();
          v32 = *v6;
          if (!*v6)
            v32 = _dispatch_wait_for_enqueuer(v6, (uint64_t)v29);
          *v28 = v32;
        }
      }
      else
      {
LABEL_48:
        _dispatch_workloop_barrier_complete(v3);
      }
    }
    else if (((v25 ^ v21) & 0x700000000) != 0 && (v25 & 0xFF80004000000000) == 0)
    {
      if ((v25 & 1) != 0)
      {
        if ((v25 & 0x2000000000) != 0)
        {
          v35 = v25;
          _dispatch_introspection_runtime_event();
          _dispatch_event_loop_poke(a1, v35, 0x80000000, v36);
          return;
        }
      }
      else if ((v25 & 0x2000000000) != 0 || (v25 & 0xFFFFFFFC) == 0)
      {
        return;
      }
      _dispatch_queue_wakeup_with_override_slow(a1, v25, 0, 0x40FFFFFFFDLL);
    }
  }
}

uint64_t dispatch_thread_get_current_override_qos_floor()
{
  unsigned int v0;
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t result;
  uint64_t v6;

  v0 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 200);
  v1 = (v0 >> 8) & 0xF;
  v2 = (unsigned __int16)v0 >> 12;
  v3 = HIWORD(v0) & 0xF;
  if (v1 <= v2)
    v1 = v2;
  if (v1 > v3)
    v3 = v1;
  v4 = v3 - 1;
  result = 0;
  v6 = 0x2100000001;
  switch(v4)
  {
    case 0u:
      return 0x500000001;
    case 1u:
      return 0x900000001;
    case 2u:
      return 0x1100000001;
    case 3u:
      return 0x1500000001;
    case 4u:
      return 0x1900000001;
    case 5u:
      return v6;
    case 0xEu:
      return result;
    default:
      return 1;
  }
}

uint64_t dispatch_thread_override_self(int a1)
{
  unsigned int v1;
  unint64_t v2;
  int v3;
  unsigned int v4;
  unint64_t StatusReg;
  uint64_t v6;
  unsigned int v7;

  HIDWORD(v2) = a1 - 5;
  LODWORD(v2) = a1 - 5;
  v1 = v2 >> 2;
  v3 = 0;
  v4 = 6;
  switch(v1)
  {
    case 0u:
      v3 = 0;
      v4 = 1;
      break;
    case 1u:
      v3 = 0;
      v4 = 2;
      break;
    case 3u:
    case 4u:
    case 5u:
      v3 = 0;
      v4 = v1;
      break;
    case 7u:
      break;
    default:
      v4 = 0;
      v3 = 1;
      break;
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (v3)
    v6 = 255;
  else
    v6 = (256 << (v4 - 1)) | 0xFF;
  _pthread_workqueue_override_start_direct(*(unsigned int *)(StatusReg + 24), v6);
  v7 = *(_DWORD *)(StatusReg + 200);
  if ((HIWORD(v7) & 0xF) < v4)
    *(_QWORD *)(StatusReg + 200) = v7 & 0xFFF0FFFF | (v4 << 16);
  return 0;
}

uint64_t dispatch_lock_override_start_with_debounce(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;

  HIDWORD(v5) = a3 - 5;
  LODWORD(v5) = a3 - 5;
  v4 = v5 >> 2;
  if (v4 <= 7 && ((0xBBu >> v4) & 1) != 0)
    v6 = (256 << qword_3FF40[v4]) | 0xFF;
  else
    v6 = 255;
  return _pthread_workqueue_override_start_direct_check_owner(a2, v6, a1);
}

uint64_t dispatch_lock_override_end(int a1)
{
  unsigned int v1;
  unint64_t v2;
  unsigned int v3;
  unint64_t StatusReg;
  unsigned int v5;

  HIDWORD(v2) = a1 - 5;
  LODWORD(v2) = a1 - 5;
  v1 = v2 >> 2;
  if (v1 > 7)
    v3 = 0;
  else
    v3 = dword_3FF80[v1];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_DWORD *)(StatusReg + 200);
  if ((HIWORD(v5) & 0xF) < v3)
    *(_QWORD *)(StatusReg + 200) = v5 & 0xFFF0FFFF | (v3 << 16);
  return 0;
}

void _dispatch_queue_wakeup(_DWORD *a1, uint64_t a2, uint64_t a3, __objc2_class **a4, int8x16_t a5)
{
  NSObject *v5;
  unsigned int *v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BOOL8 v29;
  unsigned int *v30;
  int v31;
  int8x16_t v32;
  NSObject *v33;
  uint64_t v34;
  NSObject *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;

  v5 = a4;
  if (a4 && (a3 & 1) == 0)
  {
    if (a1[2] != 0x7FFFFFFF)
    {
      v7 = a1 + 2;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if (v8 <= 0)
      {
        qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
        __break(1u);
        return;
      }
    }
    a3 = a3 | 1;
  }
  if ((a3 & 4) != 0)
  {
    v36 = a1[21];
    v37 = (unsigned __int16)v36 >> 12;
    if ((_DWORD)a2)
      v37 = a2;
    v38 = (v36 >> 8) & 0xF;
    if (v37 <= v38)
      v39 = v38;
    else
      v39 = v37;
    _dispatch_lane_class_barrier_complete(a1, v39, a3, a4, 0x40020000000000, a5);
    return;
  }
  if (!a4)
  {
    if ((_DWORD)a2)
    {
      v24 = (unint64_t *)(a1 + 14);
      v25 = a2 << 32;
      do
      {
        v26 = __ldxr(v24);
        if ((v26 & 0x40FFFFFFFDLL) != 0)
        {
          v27 = v26 & 0xFFFFFFF8FFFFFFFFLL | v25;
          if (v26 & 0x1000000000 | v25 & 0x1000000000)
            v27 |= 0x800000000uLL;
          v28 = (v26 & 0x700000000) < v25 ? v27 : v26;
          v29 = (v26 & 0xFF80002000000000) == 0x2000000000 && (unint64_t)((v26 & 0x4000000000) == 0);
          v22 = v28 | v29;
          if ((v28 | v29) != v26)
            continue;
        }
LABEL_69:
        __clrex();
        goto LABEL_70;
      }
      while (__stxr(v22, v24));
      v23 = v22 ^ v26;
      v9 = 1;
      if ((a3 & 1) != 0 || (v23 & 1) == 0)
        goto LABEL_62;
      if (a1[2] == 0x7FFFFFFF)
        goto LABEL_61;
      v30 = a1 + 2;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 2, v30));
      if (v31 > 0)
      {
LABEL_61:
        LODWORD(a3) = a3 | 1;
        v9 = 1;
LABEL_62:
        v5 = (&dword_0 + 1);
        goto LABEL_63;
      }
      qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
LABEL_88:
      _dispatch_trace_item_push_internal(v5, a1, a5);
LABEL_84:
      _dispatch_introspection_queue_item_enqueue(v5, a1);
      (*((void (**)(NSObject *, _DWORD *, unint64_t))v5->isa + 11))(v5, a1, HIDWORD(v22) & 7);
      return;
    }
    goto LABEL_70;
  }
  v9 = 0x4000000000;
  if (a4 != &_dispatch_mgr_q)
    v9 = 1;
  v10 = a1[21];
  LODWORD(v11) = (unsigned __int16)v10 >> 12;
  if ((_DWORD)a2)
    LODWORD(v11) = a2;
  v12 = (v10 >> 8) & 0xF;
  if (v11 <= v12)
    v11 = v12;
  else
    v11 = v11;
  v13 = (unint64_t *)(a1 + 14);
  v14 = v11 << 32;
  do
  {
    v15 = __ldxr(v13);
    v16 = v15 & 0xFFFFFFF8FFFFFFFFLL | v14;
    if (v15 & 0x1000000000 | v14 & 0x1000000000)
      v16 |= 0x800000000uLL;
    if ((v15 & 0x700000000) < v14)
      v17 = v16;
    else
      v17 = v15;
    if ((v15 & 0x180000000000000) == 0x80000000000000)
      v18 = v17 & 0xFF7FFFFFFFFFFFFFLL;
    else
      v18 = v17;
    if ((a3 & 0x20) != 0)
      v17 = v18;
    v19 = (unint64_t)((v15 & 0xFFFFFFFC) == 0) << 38;
    if (a4 != &_dispatch_mgr_q)
      v19 = 1;
    v20 = v17 | v19;
    if ((v15 & 0x4000000001) == 0 && v17 >> 55 == 0)
      v22 = v20;
    else
      v22 = v17;
    if ((a3 & 2) != 0)
    {
      v22 |= 0x8000000000uLL;
    }
    else if (v22 == v15)
    {
      goto LABEL_69;
    }
  }
  while (__stlxr(v22, v13));
  v23 = v15 ^ v22;
LABEL_63:
  if ((v23 & v9) != 0)
  {
    if (v5 == ((char *)&dword_0 + 1))
      v5 = *((_QWORD *)a1 + 3);
    if ((v22 & 0x2000000000) != 0)
    {
      _dispatch_introspection_runtime_event();
      v33 = a1;
      v34 = v22;
      v35 = (&dword_0 + 1);
LABEL_68:
      _dispatch_event_loop_poke(v33, v34, v35, v32);
      return;
    }
    if (!MEMORY[0xFFFFFC100])
      goto LABEL_84;
    goto LABEL_88;
  }
  if ((v23 & 0x700000000) == 0 || (v40 = a3, (v22 & 0xFF80004000000000) != 0) || (v22 & 0xFFFFFFFD) == 0)
  {
LABEL_70:
    if ((a3 & 1) != 0)
      _os_object_release_internal_n(a1, (_BYTE *)&dword_0 + 2);
    return;
  }
  if ((v22 & 0x2000000000) != 0)
  {
    _dispatch_introspection_runtime_event();
    v35 = (v40 | 0x80000000);
    v33 = a1;
    v34 = v22;
    goto LABEL_68;
  }
  _dispatch_queue_wakeup_with_override_slow((uint64_t)a1, v22, a3);
}

void _dispatch_lane_class_barrier_complete(NSObject *a1, uint64_t a2, uint64_t a3, __objc2_class **isa, uint64_t a5, int8x16_t a6)
{
  char v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t StatusReg;
  uint64_t v30;
  unsigned int v31;
  int8x16_t v32;
  NSObject *v33;
  uint64_t v34;
  NSObject *v35;
  unint64_t v36;
  int v37;

  if (isa == &_dispatch_mgr_q)
  {
    v11 = 0;
    v12 = 0x4000000000;
    isa = &_dispatch_mgr_q;
  }
  else if (isa)
  {
    v11 = 0;
    if (isa == (__objc2_class **)((char *)&dword_0 + 1))
      isa = (__objc2_class **)a1[3].isa;
    v12 = 1;
  }
  else
  {
    v12 = 0;
    v11 = 1;
  }
  v13 = (unint64_t *)&a1[7];
  v14 = a2 << 32;
  do
  {
    while (1)
    {
      v15 = __ldxr(v13);
      if ((~v15 & 0x2000000002) != 0 || (v15 & 0x800000001) == 0)
        break;
      v24 = v12;
      v25 = a3;
      _dispatch_event_loop_ensure_ownership((uint64_t)a1);
      do
        v26 = __ldxr(v13);
      while (__stxr(v26 & 0xFFFFFFF7FFFFFFFDLL, v13));
      __clrex();
      a3 = v25;
      v12 = v24;
    }
    v17 = v15 - a5;
    v18 = (v15 - a5) & 0xFFFFFFF8FFFFFFFFLL | v14;
    if ((v15 - a5) & 0x1000000000 | v14 & 0x1000000000)
      v18 |= 0x800000000uLL;
    if (((v15 - a5) & 0x700000000) < v14)
      v19 = v18;
    else
      v19 = v15 - a5;
    v20 = v19 & 0xFFFFFFF700000001;
    if (v15 >> 55)
    {
      v23 = v19 & 0xFFFFFFF700000000;
      if ((v15 & 0x2000000000) != 0)
        v21 = v23;
      else
        v21 = v20;
    }
    else if ((v11 & 1) != 0)
    {
      if ((v15 & 0x8000000000) != 0)
      {
        __clrex();
        do
          v36 = __ldaxr(v13);
        while (__stxr(v36 ^ 0x8000000000, v13));
        (*((void (**)(NSObject *, uint64_t, _QWORD))a1->isa + 10))(a1, a2, a3 | 4);
        return;
      }
      v21 = v19 & 0xFFFFFFF000000001;
    }
    else
    {
      if ((v15 & 0x4000000001) != 0)
        v22 = 0;
      else
        v22 = v12;
      v21 = v20 | v22;
    }
  }
  while (__stlxr(v21, v13));
  if ((v21 & 0x4000000001) != 0)
  {
    v27 = a3;
    v28 = v12;
    _dispatch_introspection_runtime_event();
    v12 = v28;
    LODWORD(a3) = v27;
  }
  if ((v17 & 0x2000000000) != 0)
  {
    if ((v17 & 2) == 0 || ((v21 | v17) & 1) != 0)
    {
      _dispatch_event_loop_end_ownership((uint64_t)a1, v17, v21, a3);
      return;
    }
    goto LABEL_47;
  }
  if ((~v17 & 0x1800000000) == 0)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v30 = HIDWORD(v17) & 7;
    v31 = *(_DWORD *)(StatusReg + 200);
    if ((HIWORD(v31) & 0xF) < v30)
      *(_QWORD *)(StatusReg + 200) = v31 & 0xFFF0FFFF | ((_DWORD)v30 << 16);
  }
  if (!isa)
    goto LABEL_47;
  if (((v21 ^ v17) & v12) != 0)
  {
    if ((v21 & 0x2000000000) != 0)
    {
      _dispatch_introspection_runtime_event();
      v33 = a1;
      v34 = v21;
      v35 = (&dword_0 + 1);
LABEL_44:
      _dispatch_event_loop_poke(v33, v34, v35, v32);
      return;
    }
    if (MEMORY[0xFFFFFC100])
      _dispatch_trace_item_push_internal(isa, a1, a6);
    _dispatch_introspection_queue_item_enqueue(isa, a1);
    ((void (*)(__objc2_class **, NSObject *, unint64_t))(*isa)[2].superclass)(isa, a1, HIDWORD(v21) & 7);
    return;
  }
  if ((v21 & 0xFF80004000000000) != 0 || (v21 & 0xFFFFFFFD) == 0)
  {
LABEL_47:
    if ((a3 & 1) != 0)
      _os_object_release_internal_n(a1, (_BYTE *)&dword_0 + 2);
    return;
  }
  v37 = a3;
  if ((v21 & 0x2000000000) != 0)
  {
    _dispatch_introspection_runtime_event();
    v35 = (v37 | 0x80000000);
    v33 = a1;
    v34 = v21;
    goto LABEL_44;
  }
  _dispatch_queue_wakeup_with_override_slow((uint64_t)a1, v21, a3);
}

void _dispatch_lane_wakeup(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t a4)
{
  if ((a3 & 4) != 0)
    _dispatch_lane_barrier_complete((unsigned __int16 *)a1, a2, a3, a4);
  else
    _dispatch_queue_wakeup((_DWORD *)a1, a2, a3, (__objc2_class **)(*(_QWORD *)(a1 + 48) != 0), a4);
}

void _dispatch_lane_barrier_complete(unsigned __int16 *a1, uint64_t a2, uint64_t a3, int8x16_t a4)
{
  __objc2_class **v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int *v12;
  int v13;

  if (!*((_QWORD *)a1 + 6) || *((_QWORD *)a1 + 7) >> 55)
  {
    v7 = 0;
LABEL_32:
    _dispatch_lane_class_barrier_complete(a1, a2, a3, v7, ((unint64_t)a1[40] << 41) + 0x40000000000000, a4);
    return;
  }
  v8 = *((_QWORD *)a1 + 13);
  if (!v8)
    v8 = _dispatch_wait_for_enqueuer((unint64_t *)a1 + 13, (uint64_t)(a1 + 24));
  v9 = a1[40];
  v10 = *(_QWORD *)v8;
  if (v9 == 1)
  {
    if (v10 <= 0xFFF && (*(_QWORD *)v8 & 0x81) != 0)
      goto LABEL_21;
    goto LABEL_25;
  }
  if (v10 >= 0x1000)
  {
    if ((*(_QWORD *)(v10 + 40) & 0xF0) == 0x10)
    {
      if ((*(_DWORD *)(v8 + 80) & 0x80000) != 0 || v9 <= 1 || (*(_DWORD *)(v8 + 80) & 0x80000) != 0)
        goto LABEL_25;
    }
    else if (v9 <= 1)
    {
      goto LABEL_25;
    }
LABEL_23:
    _dispatch_lane_drain_non_barriers(a1, v8, a3, a4);
    return;
  }
  if ((v10 & 2) == 0)
  {
    if (v9 < 2)
      goto LABEL_25;
    goto LABEL_23;
  }
  if ((v10 & 0x81) != 0)
  {
LABEL_21:
    _dispatch_lane_drain_barrier_waiter((uint64_t)a1, v8, a3, 0);
    return;
  }
LABEL_25:
  if ((a3 & 1) != 0)
  {
LABEL_31:
    v7 = (__objc2_class **)(&dword_0 + 1);
    goto LABEL_32;
  }
  if (*((_DWORD *)a1 + 2) == 0x7FFFFFFF)
    goto LABEL_30;
  v12 = (unsigned int *)(a1 + 4);
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 2, v12));
  if (v13 > 0)
  {
LABEL_30:
    a3 = a3 | 1;
    goto LABEL_31;
  }
  qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
  __break(1u);
}

void _dispatch_lane_push(uint64_t a1, _QWORD *a2, unsigned int a3, int8x16_t a4)
{
  unsigned int *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t StatusReg;
  unint64_t v9;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;

  if (*a2 <= 0xFFFuLL && (*a2 & 0x81) != 0)
  {
    _dispatch_lane_push_waiter(a1, (unint64_t)a2, a3, a4);
    return;
  }
  v5 = (unsigned int *)(a1 + 8);
  if (((*(_DWORD *)(a1 + 84) >> 8) & 0xFu) >= a3)
    v6 = 0;
  else
    v6 = a3;
  a2[2] = 0;
  v7 = (unint64_t *)(a1 + 48);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_QWORD *)(StatusReg + 976) = a1 + 48;
  do
    v9 = __ldxr(v7);
  while (__stlxr((unint64_t)a2, v7));
  if (v9)
  {
    if ((*(_DWORD *)(a1 + 60) & 7) != 0 && (*(_DWORD *)(a1 + 60) & 7u) >= v6)
    {
      *(_QWORD *)(v9 + 16) = a2;
      *(_QWORD *)(StatusReg + 976) = 0;
      return;
    }
    do
      v14 = __ldxr(v5);
    while (__stxr(v14 + 2, v5));
    v12 = (_QWORD *)(v9 + 16);
    v13 = 1;
  }
  else
  {
    do
      v11 = __ldxr(v5);
    while (__stxr(v11 + 2, v5));
    v12 = (_QWORD *)(a1 + 104);
    v13 = 3;
  }
  *v12 = a2;
  *(_QWORD *)(StatusReg + 976) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v6, v13);
}

void _dispatch_lane_push_waiter(NSObject *a1, unint64_t a2, unsigned int a3, int8x16_t a4)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t StatusReg;
  unint64_t v9;
  int isa;
  uint64_t v11;
  Class v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  NSObject *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int8x16_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;

  if (*(_QWORD *)(a2 + 48) == -4)
    v5 = a3;
  else
    v5 = 0;
  v6 = (unint64_t *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v7 = (unint64_t *)&a1[6];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_QWORD *)(StatusReg + 976) = a1 + 6;
  do
    v9 = __ldxr(v7);
  while (__stlxr(a2, v7));
  if (v9)
  {
    *(_QWORD *)(v9 + 16) = a2;
    *(_QWORD *)(StatusReg + 976) = 0;
    if (!(_DWORD)v5)
      return;
    v23 = (unint64_t *)&a1[7];
    v24 = v5 << 32;
    do
    {
      v25 = __ldxr(v23);
      if ((v25 & 0x700000000) < v24)
      {
        v26 = v25 & 0x1000000000 | v24 & 0x1000000000
            ? v25 & 0xFFFFFFF8FFFFFFFFLL | v24 | 0x800000000
            : v25 & 0xFFFFFFF8FFFFFFFFLL | v24;
        if (v25 != v26)
          continue;
      }
      __clrex();
      return;
    }
    while (__stxr(v26, v23));
    if ((v26 & 0xFF80004000000000) != 0)
      return;
    if ((v26 & 1) == 0)
    {
      if ((v26 & 0x2000000000) == 0 && (v26 & 0xFFFFFFFC) != 0)
        goto LABEL_52;
      return;
    }
    if ((v26 & 0x2000000000) == 0)
    {
LABEL_52:
      v21 = a1;
      v22 = v26;
      goto LABEL_53;
    }
LABEL_58:
    _dispatch_introspection_runtime_event();
    _dispatch_event_loop_poke(a1, v26, 0x80000000, v27);
    return;
  }
  a1[13].isa = (Class)a2;
  *(_QWORD *)(StatusReg + 976) = 0;
  isa = (int)a1[10].isa;
  if ((isa & 0x40000) != 0)
  {
    isa = (int)a1[10].isa;
    if ((isa & 0x1000000) == 0)
    {
      v11 = *(_QWORD *)a2;
LABEL_70:
      *(_QWORD *)a2 = v11 & 0xFFFFFFFFFFFFFF7FLL;
      *(_QWORD *)(a2 + 56) = a1;
      (*((void (**)(NSObject *, uint64_t, uint64_t))a1->isa + 10))(a1, v5, 2);
      return;
    }
  }
  v11 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 0x80) != 0)
  {
    isa = (int)a1[10].isa;
    if ((isa & 0x1000000) != 0)
      goto LABEL_70;
    if (((uint64_t)a1[7].isa & 0x3000000000) != 0)
    {
      v12 = a1[3].isa;
      if (v12 < (Class)&_dispatch_root_queues || v12 >= (Class)&_dispatch_queue_serial_numbers)
        goto LABEL_70;
    }
  }
  v13 = ((unint64_t)(unsigned __int16)isa << 41) - 0x20000000000;
  v14 = (unint64_t *)&a1[7];
  v15 = v5 << 32;
  v16 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL | 0x60000000000002;
  do
  {
    v17 = __ldxr(v14);
    v18 = v17 & 0xFFFFFFF8FFFFFFFFLL | v15;
    if (v17 & 0x1000000000 | v15 & 0x1000000000)
      v18 |= 0x800000000uLL;
    if ((v17 & 0x700000000) >= v15)
      v18 = v17;
    v19 = v18 | 0x8000000000;
    if ((v17 & 0xFFE00000FFFFFFFCLL) == 0
      && ((v17 & 0x2000000000) == 0 || (v17 & 0x4000000001) == 0)
      && ((v17 & 0x10000000000) != 0 || !((v13 + v18) >> 53)))
    {
      v19 = v16 | v18 & 0x7700000001;
    }
  }
  while (__stlxr(v19, v14));
  if ((v17 & 0x2000000000) != 0 && *(_QWORD *)(a2 + 48) != -4)
    *(_BYTE *)(a2 + 106) = *(_BYTE *)(a2 + 106) & 0xFB | (4 * (*(_DWORD *)(a2 + 100) == *(_DWORD *)(StatusReg + 24)));
  if (((v19 ^ v17) & 0x40000000000000) == 0)
  {
    if (((v19 ^ v17) & 0x700000000) == 0 || (v19 & 0xFF80004000000000) != 0)
      return;
    if ((v19 & 1) != 0)
    {
      if ((v19 & 0x2000000000) != 0)
      {
        v26 = v19;
        goto LABEL_58;
      }
    }
    else if ((v19 & 0x2000000000) != 0 || (v19 & 0xFFFFFFFC) == 0)
    {
      return;
    }
    v21 = a1;
    v22 = v19;
LABEL_53:
    _dispatch_queue_wakeup_with_override_slow((uint64_t)v21, v22, 0);
    return;
  }
  if ((*(_BYTE *)(a2 + 106) & 4) != 0 && a1[13].isa == (Class)a2)
  {
    *(_BYTE *)(a2 + 106) |= 8u;
    if ((*(_BYTE *)a2 & 0x80) != 0)
      *(_QWORD *)(a2 + 56) = a1;
    v28 = *v6;
    a1[13].isa = (Class)*v6;
    if (!v28)
    {
      while (1)
      {
        v29 = __ldxr(v7);
        if (v29 != a2)
          break;
        if (!__stlxr(0, v7))
          return;
      }
      __clrex();
      v30 = *v6;
      if (!*v6)
        v30 = _dispatch_wait_for_enqueuer(v6, (uint64_t)&a1[6]);
      a1[13].isa = (Class)v30;
    }
  }
  else
  {
    _dispatch_lane_barrier_complete((unsigned __int16 *)a1, v5, 0, a4);
  }
}

void _dispatch_lane_concurrent_push(uint64_t a1, uint64_t a2, unsigned int a3, int8x16_t a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  if ((*(_BYTE *)(a1 + 87) & 8) == 0
    || *(_QWORD *)a2 < 0x1000uLL
    || *(_QWORD *)(*(_QWORD *)a2 + 40) == 1
    || *(_QWORD *)(*(_QWORD *)a2 + 40) == 19 && (_dispatch_source_is_timer(a2) & 1) != 0)
  {
    if (*(_QWORD *)(a1 + 48))
    {
LABEL_7:
      _dispatch_lane_push(a1, (_QWORD *)a2, a3, a4);
      return;
    }
    v7 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 <= 0xFFFuLL)
    {
      if ((v7 & 0x83) != 0)
        goto LABEL_7;
    }
    else if ((*(_QWORD *)(v7 + 40) & 0xF0) == 0x10 && (*(_DWORD *)(a2 + 80) & 0x80000) != 0)
    {
      goto LABEL_7;
    }
    v8 = (unint64_t *)(a1 + 56);
    while (1)
    {
      v9 = __ldaxr(v8);
      if ((v9 & 0xFFE0018000000000) != 0)
        break;
      if (!__stxr(v9 + 0x20000000000, v8))
      {
        _dispatch_continuation_redirect_push((_DWORD *)a1, (_QWORD *)a2);
        return;
      }
    }
    __clrex();
    goto LABEL_7;
  }
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot target the cooperative root queue - not implemented";
  qword_61258 = a2;
  __break(1u);
}

_DWORD *_dispatch_continuation_redirect_push(_DWORD *result, _QWORD *a2)
{
  _DWORD *v3;
  unint64_t StatusReg;
  _QWORD *v5;
  unsigned int *v6;
  int v7;

  v3 = result;
  if (*a2 >= 0x1000uLL && *(_QWORD *)(*a2 + 40) == 256)
  {
    if (!a2[5])
      a2[5] = (result[20] << 8) & 0x3000000;
    return (_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 3) + 88))(*((_QWORD *)v3 + 3));
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_QWORD **)(StatusReg + 176);
  if (v5)
  {
    *(_QWORD *)(StatusReg + 176) = v5[2];
  }
  else
  {
    result = _dispatch_continuation_alloc_from_heap();
    v5 = result;
  }
  a2[2] = 0;
  *v5 = &unk_586E8;
  v5[4] = 0;
  v5[5] = (v3[20] << 8) & 0x3000000;
  v5[6] = v3;
  v5[7] = a2;
  v5[3] = -1;
  v5[1] = -1;
  if (v3[2] == 0x7FFFFFFF)
    return (_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 3) + 88))(*((_QWORD *)v3 + 3));
  v6 = v3 + 2;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 2, v6));
  if (v7 > 0)
    return (_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 3) + 88))(*((_QWORD *)v3 + 3));
  qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
  __break(1u);
  return result;
}

uint64_t dispatch_async_swift_job(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(*(_QWORD *)a2 + 40) != 1)
    dispatch_async_swift_job_cold_1(*(_QWORD *)(*(_QWORD *)a2 + 40));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
}

void _dispatch_channel_dispose(uint64_t *a1, _BYTE *a2)
{
  a1[11] = 0;
  _dispatch_lane_class_dispose(a1, a2);
}

uint64_t _dispatch_channel_xref_dispose(uint64_t a1)
{
  BOOL v1;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 88) + 24))
    v1 = (*(_DWORD *)(a1 + 80) & 0x10000000) == 0;
  else
    v1 = 0;
  if (v1)
    _dispatch_channel_xref_dispose_cold_1(a1);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 80))(a1, 0, 2);
}

void _dispatch_channel_invoke(NSObject *a1, _QWORD *a2, int a3, int8x16_t a4)
{
  int v4;
  NSObject *v6;
  int v7;
  uint64_t v8;
  int isa_high;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int isa;
  unsigned int v18;
  int v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  void *v30;
  void (**v31);
  uint64_t v32;
  void *v33;
  unsigned int *v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  void (*v46)(void (**)(void));
  _QWORD *v47;
  void (__cdecl *v48)(void *);
  __objc2_class **v49;
  uint64_t v50;
  _QWORD *v51;
  void (*v52)(void (**)(void));
  void (__cdecl *v53)(void *);
  unint64_t *v54;
  __objc2_class ***v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  int v63;
  unint64_t StatusReg;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  BOOL v87;
  NSObject *group;
  uint64_t v89;
  char v90;
  uint64_t v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v98;
  unint64_t v99;
  _BYTE v100[24];
  _QWORD *v101;
  unsigned int v102;
  int v103;
  int v104[2];
  __int128 v105;

  v4 = a3;
  if ((a3 & 3) == 0)
  {
    a1[2].isa = (Class)-1985229329;
    v6 = *(NSObject **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160);
    if (MEMORY[0xFFFFFC100])
      _dispatch_trace_item_pop_internal(v6, a1, a4);
    _dispatch_introspection_queue_item_dequeue(v6, a1);
  }
  if ((v4 & 2) != 0)
  {
    v7 = v4 & 0x40000;
    v8 = 0x40020000000001;
    goto LABEL_7;
  }
  v62 = ((unint64_t)LOWORD(a1[10].isa) << 41) - 0x20000000000;
  v63 = v4;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v65 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
  v7 = v63 & 0x40000;
  v66 = 0xFFE00000FFFFFFFCLL;
  if ((v63 & 0x40000) != 0)
  {
    v67 = 0x4000000000;
  }
  else
  {
    v66 = 0xFFE00040FFFFFFFCLL;
    v67 = 1;
  }
  v68 = v63;
  if ((v63 & 1) != 0)
    v69 = 0xFFE00040FFFFFFFCLL;
  else
    v69 = v66;
  v70 = *(_DWORD *)(StatusReg + 200);
  v71 = (v70 >> 8) & 0xF;
  v72 = (unsigned __int16)v70 >> 12;
  v73 = HIWORD(v70) & 0xF;
  if (v71 <= v72)
    v71 = v72;
  if (v71 > v73)
    v73 = v71;
  v74 = (unint64_t *)&a1[7];
  while (1)
  {
    while (1)
    {
      v75 = __ldaxr(v74);
      v76 = v75 & v69;
      if ((v75 & v69) != 0)
        break;
      if ((v75 & 0x1000000000) == 0 || (v77 = HIDWORD(v75) & 7, v77 <= v73))
      {
        v78 = (v75 >> 40) & 1;
        if (!((v62 + v75) >> 53))
          LODWORD(v78) = 1;
        if ((_DWORD)v78)
          v79 = 0x60000000000000;
        else
          v79 = 0x20000000000000;
        v80 = v65 | v75 & 0x7700000001 | v79;
        goto LABEL_185;
      }
      __clrex();
      v99 = v62;
      _pthread_workqueue_override_start_direct(*(unsigned int *)(StatusReg + 24), (256 << ((BYTE4(v75) & 7u) - 1)) | 0xFF);
      v62 = v99;
      v81 = *(_DWORD *)(StatusReg + 200);
      v73 = v77;
      if ((HIWORD(v81) & 0xF) < v77)
      {
        *(_QWORD *)(StatusReg + 200) = v81 & 0xFFF0FFFF | ((_DWORD)v77 << 16);
        v73 = v77;
      }
    }
    if ((v68 & 1) != 0)
      break;
    v80 = v75 ^ v67;
LABEL_185:
    if (!__stxr(v80, v74))
      goto LABEL_196;
  }
  __clrex();
  v80 = v75;
LABEL_196:
  v4 = v68;
  v84 = 0x60000000000000;
  if ((v68 & 1) == 0)
    v84 = v67 | 0x60000000000000;
  v85 = v80 & v84;
  v86 = v75 & 0x3FFE0000000000;
  v8 = v85 - v86;
  if (v76)
    v87 = 1;
  else
    v87 = v85 == v86;
  if (v87)
  {
    v59 = 0;
    v49 = 0;
    if ((v68 & 1) != 0)
      goto LABEL_160;
    goto LABEL_157;
  }
LABEL_7:
  if (v7)
  {
    v89 = 0;
  }
  else
  {
    isa_high = HIDWORD(a1[10].isa);
    v10 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v11 = *(_QWORD *)(v10 + 200);
    if ((_DWORD)v11)
    {
      v12 = isa_high & 0xFFF;
      if ((isa_high & 0xFFF) != 0)
      {
        if (((unsigned __int16)v11 & 0xFFFu) > v12)
          v12 = v11 & 0xFFF;
        if ((unsigned __int16)isa_high >> 12 <= v12 >> 8)
          v13 = 0x40000000;
        else
          v13 = 1140912128;
        v14 = v11 & 0x880F0000 | v12 | v13 & isa_high;
      }
      else
      {
        v15 = v11 | 0x40000000;
        if ((v11 & 0xFFF) == 0)
          v15 = *(_QWORD *)(v10 + 200);
        v16 = (unsigned __int16)isa_high >> 12;
        v14 = v15 & 0xFFFF0FFF | isa_high & 0x400F000;
        if (v16 <= ((v15 >> 8) & 0xF))
          v14 = v15;
      }
    }
    else
    {
      v14 = isa_high & 0xFFF0FFFF;
    }
    *(_QWORD *)(v10 + 200) = v14;
    v89 = v11 & 0xFFF0FFFF;
  }
  v91 = v8;
  if ((v4 & 0x100000) != 0 && ((uint64_t)a1[10].isa & 0x400000) != 0)
  {
    v82 = (unsigned int *)&a1[10];
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 & 0xFFBFFFFF, v82));
  }
  isa = (int)a1[10].isa;
  v18 = (isa << 8) & 0x3000000 | v4 & 0xFCFFFFF7 | 8;
  if (((isa << 8) & 0x3000000) == 0)
    v18 = v4 | 8;
  v19 = v18 & 0x1000002;
  v92 = v18 & 0xFFFDFFFF;
  v20 = (unint64_t *)&a1[6];
  v21 = (unint64_t *)&a1[13];
  v98 = v18;
  v94 = (v18 >> 21) & 1;
  v95 = v18 & 0xFFFF0000;
  v22 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v90 = v4;
  v93 = v18 & 0x1000002;
LABEL_27:
  if (v19 == 2)
    _dispatch_last_resort_autorelease_pool_push(a2);
  v23 = (uint64_t)a1[11].isa;
  v103 = 0;
  v105 = 0u;
  *(_QWORD *)v100 = a1;
  v101 = a2;
  v102 = v92;
  *(_QWORD *)v104 = 0;
  *(_QWORD *)&v105 = 0;
  BYTE8(v105) = 0;
  *(_OWORD *)&v100[8] = *(_OWORD *)(v22 + 160);
  *(_QWORD *)(v22 + 160) = a1;
  *(_QWORD *)(v22 + 168) = &v100[8];
  if (_dispatch_channel_invoke_cancel_check((uint64_t)a1, (uint64_t)v100, v23))
  {
    v96 = v23;
    while (1)
    {
      v25 = v105;
      if (!(_QWORD)v105)
      {
        if (!*v20)
          goto LABEL_134;
        v25 = *v21;
        if (!*v21)
          v25 = _dispatch_wait_for_enqueuer(v21, (uint64_t)&a1[6]);
      }
      v26 = *(_QWORD *)v25;
      if (*(_QWORD *)v25 > 0xFFFuLL)
        break;
      if ((v26 & 1) != 0)
        _dispatch_channel_invoke_cold_3();
      if ((v26 & 0x400) == 0)
        break;
      *(_QWORD *)&v105 = v25;
      BYTE8(v105) = 0;
      if ((v102 & 0x1000000) != 0)
        v30 = objc_autoreleasePoolPush();
      else
        v30 = 0;
      if ((*(unsigned int (**)(NSObject *, _BYTE *, Class))(v23 + 16))(a1, v100, a1[4].isa))
      {
        if (!BYTE8(v105))
          _dispatch_channel_invoke_cold_2();
        if (!v30)
          goto LABEL_111;
LABEL_95:
        objc_autoreleasePoolPop(v30);
        goto LABEL_111;
      }
      *(_QWORD *)v104 = -1;
      if (v30)
        goto LABEL_95;
LABEL_111:
      v49 = *(__objc2_class ***)v104;
      if (*(_QWORD *)v104)
        goto LABEL_135;
    }
    v27 = *(_QWORD *)(v25 + 16);
    *v21 = v27;
    if (!v27)
    {
      v28 = (uint64_t *)(v25 + 16);
      while (1)
      {
        v29 = __ldxr(v20);
        if (v29 != v25)
          break;
        if (!__stlxr(0, v20))
          goto LABEL_45;
      }
      __clrex();
      v27 = *v28;
      if (!*v28)
        v27 = _dispatch_wait_for_enqueuer((unint64_t *)(v25 + 16), (uint64_t)&a1[6]);
      *v21 = v27;
    }
LABEL_45:
    *(_QWORD *)&v105 = v27;
    v31 = *(void (***))(v22 + 192);
    if (v31)
      (*v31)(a1);
    v32 = *(_QWORD *)v25;
    if (*(_QWORD *)v25 >= 0x1000uLL)
    {
      if (*(_QWORD *)(v32 + 40) == 1)
        (*(void (**)(unint64_t, _QWORD, _QWORD))(v32 + 48))(v25, 0, v94);
      else
        (*(void (**)(unint64_t, _QWORD *, _QWORD))(v32 + 64))(v25, a2, v95);
      goto LABEL_108;
    }
    if ((v98 & 0x1000000) != 0)
    {
      v33 = objc_autoreleasePoolPush();
      v32 = *(_QWORD *)v25;
    }
    else
    {
      v33 = 0;
    }
    v34 = *(unsigned int **)(v25 + 24);
    if ((v32 & 4) != 0)
      *(_QWORD *)(v25 + 24) = -1;
    if (v34 != (unsigned int *)-1)
    {
      v35 = v34;
      if (v34)
        v35 = (unsigned int *)v34[8];
      if (MEMORY[0xFFFFFC100])
        kdebug_trace(771817480, v35, v25, 0, 0);
    }
    v36 = *(_QWORD *)(v25 + 8);
    if (v36 == -1)
    {
      v39 = 0;
    }
    else
    {
      v37 = *(_QWORD *)(v22 + 200);
      if (((v37 >> 8) & 0xF) != 0)
        v38 = 256 << ((BYTE1(v37) & 0xFu) - 1);
      else
        v38 = 0;
      v39 = v38 & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(v22 + 200);
      if ((v36 & 0xFFFFFF) != 0)
      {
        if ((v36 & 0xFFFFFFuLL) >= (v38 & 0xFFFFFF00)
          && ((v37 & 0x44000000) != 0 || (*(_QWORD *)(v25 + 8) & 0x10000000) != 0))
        {
          v39 = v36 & 0xFFFFFF;
        }
      }
      else if ((unsigned __int16)v37 >> 12)
      {
        v39 = (256 << (((unsigned __int16)v37 >> 12) - 1)) | 0xFF;
      }
    }
    v41 = v39 & 0xFFFFFFFF02FFFFFFLL;
    v42 = *(_QWORD *)(v22 + 32);
    if ((v42 & 0x1000000) != 0)
    {
      if (v41)
        goto LABEL_132;
      v41 = v42 & 0xFFFFFFFFFEFFFFFFLL;
    }
    else if (v41 == (v42 & 0xFFFFFFFF77FFFFFFLL))
    {
LABEL_76:
      if (v34 == (unsigned int *)-1)
        goto LABEL_81;
      if (*(unsigned int **)(v22 + 224) == v34)
      {
        if ((v32 & 4) != 0 && v34)
          os_release(v34);
LABEL_81:
        if ((v32 & 0x200) != 0)
          goto LABEL_85;
LABEL_82:
        if (MEMORY[0xFFFFFC100])
          _dispatch_trace_item_pop_internal(a1, (_QWORD *)v25, v24);
        _dispatch_introspection_queue_item_dequeue(a1, v25);
LABEL_85:
        if ((v32 & 4) != 0)
        {
          v44 = *(_QWORD *)(v22 + 176);
          if (v44)
            v45 = *(_DWORD *)(v44 + 8) + 1;
          else
            v45 = 1;
          v43 = v25;
          if (v45 <= _dispatch_continuation_cache_limit)
          {
            v43 = 0;
            *(_QWORD *)(v25 + 16) = v44;
            *(_DWORD *)(v25 + 8) = v45;
            *(_QWORD *)(v22 + 176) = v25;
          }
        }
        else
        {
          v43 = 0;
        }
        if ((v32 & 8) != 0)
        {
          v50 = *(_QWORD *)(**(_QWORD **)(v25 + 48) + 40);
          if (v50 != 514)
            _dispatch_queue_override_invoke_cold_1(v50);
          group = *(NSObject **)(v25 + 48);
          v52 = *(void (**)(void (**)(void)))(v25 + 32);
          v51 = *(_QWORD **)(v25 + 40);
          v53 = (void (__cdecl *)(void *))v52;
          if (v51)
          {
            v53 = *(void (__cdecl **)(void *))(v25 + 32);
            if (v52 == _dispatch_call_block_and_release)
              v53 = (void (__cdecl *)(void *))v51[2];
          }
          _dispatch_introspection_callout_entry(*(void **)(v25 + 40), v53);
          _dispatch_client_callout((uint64_t)v51, (uint64_t (*)(void))v52);
          _dispatch_introspection_callout_return(v51, v53);
          if (MEMORY[0xFFFFFC100])
            kdebug_trace(772079660, v25, 0, 0, 0);
          _dispatch_introspection_queue_item_complete(v25);
          dispatch_group_leave(group);
          if (!v43)
            goto LABEL_106;
        }
        else
        {
          v46 = *(void (**)(void (**)(void)))(v25 + 32);
          v47 = *(_QWORD **)(v25 + 40);
          v48 = (void (__cdecl *)(void *))v46;
          if (v47)
          {
            v48 = *(void (__cdecl **)(void *))(v25 + 32);
            if (v46 == _dispatch_call_block_and_release)
              v48 = (void (__cdecl *)(void *))v47[2];
          }
          _dispatch_introspection_callout_entry(*(void **)(v25 + 40), v48);
          _dispatch_client_callout((uint64_t)v47, (uint64_t (*)(void))v46);
          _dispatch_introspection_callout_return(v47, v48);
          if (MEMORY[0xFFFFFC100])
            kdebug_trace(772079660, v25, 0, 0, 0);
          _dispatch_introspection_queue_item_complete(v25);
          if (!v43)
            goto LABEL_106;
        }
        _dispatch_continuation_free_to_cache_limit(v43);
LABEL_106:
        v23 = v96;
        v21 = (unint64_t *)&a1[13];
        if (v33)
          objc_autoreleasePoolPop(v33);
LABEL_108:
        if (v31)
          v31[1](a1);
        if (!_dispatch_channel_invoke_checks((uint64_t)a1, (uint64_t)v100, v23))
          goto LABEL_134;
        goto LABEL_111;
      }
      v41 = 0;
LABEL_132:
      _dispatch_set_priority_and_voucher_slow(v41, v34, v32 & 4 | 2);
      if ((v32 & 0x200) != 0)
        goto LABEL_85;
      goto LABEL_82;
    }
    if (v41)
      goto LABEL_132;
    goto LABEL_76;
  }
LABEL_134:
  v49 = *(__objc2_class ***)v104;
LABEL_135:
  v19 = v93;
  v54 = (unint64_t *)&a1[7];
  v55 = (__objc2_class ***)(v22 + 160);
  a4 = *(int8x16_t *)&v100[8];
  *(_OWORD *)(v22 + 160) = *(_OWORD *)&v100[8];
  if (v93 == 2)
  {
    *(_OWORD *)v100 = *(_OWORD *)v55;
    *(_QWORD *)(v22 + 160) = a1;
    *(_QWORD *)(v22 + 168) = v100;
    _dispatch_last_resort_autorelease_pool_pop((uint64_t)a2);
    v54 = (unint64_t *)&a1[7];
    v19 = 2;
    a4 = *(int8x16_t *)v100;
    *(_OWORD *)v55 = *(_OWORD *)v100;
  }
  if ((unint64_t)v49 + 1 <= 1)
  {
    while (1)
    {
      v56 = __ldxr(v54);
      v57 = (v56 - v91) & 0xFFFFFFF700000001;
      if (!(v56 >> 55))
      {
        if ((v56 & 0x8000000000) != 0)
        {
          __clrex();
          do
            v58 = __ldaxr(v54);
          while (__stxr(v58 ^ 0x8000000000, v54));
          if ((v90 & 1) != 0)
            goto LABEL_27;
          v49 = *v55;
          if (((uint64_t)(**v55)[1].isa & 0x10000) != 0)
            goto LABEL_27;
          break;
        }
        if (v49)
          v57 = (v56 - v91) & 0xFFFFFF7700000001 | 0x8000000000;
        else
          v57 = (v56 - v91) & 0xFFFFFFF000000001;
      }
      if (!__stlxr(v57, v54))
      {
        if ((~v56 & 0x1800000000) != 0
          || (v60 = HIDWORD(v56) & 7, v61 = *(_DWORD *)(v22 + 200), (HIWORD(v61) & 0xF) >= v60))
        {
          v59 = 0;
          v49 = 0;
        }
        else
        {
          v59 = 0;
          v49 = 0;
          *(_QWORD *)(v22 + 200) = v61 & 0xFFF0FFFF | ((_DWORD)v60 << 16);
        }
        goto LABEL_154;
      }
    }
  }
  v59 = v91;
LABEL_154:
  if ((v98 & 0x40000) == 0)
    *(_QWORD *)(v22 + 200) = *(_QWORD *)(v22 + 200) & 0xF0000 | v89;
  if ((v90 & 1) == 0)
  {
LABEL_157:
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(772079660, a1, 0, 0, 0);
    _dispatch_introspection_queue_item_complete(a1);
  }
LABEL_160:
  if (v49)
    _dispatch_queue_invoke_finish(a1, (uint64_t)a2, v49, v59, a4);
  else
    _os_object_release_internal_n(a1, (_BYTE *)&dword_0 + 2);
}

uint64_t dispatch_channel_foreach_work_item_peek_f(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD))
{
  _QWORD *v3;
  _QWORD *v6;

  if (*(_BYTE *)(result + 56))
    dispatch_channel_foreach_work_item_peek_f_cold_1();
  v3 = *(_QWORD **)(result + 48);
  if ((*v3 & 0xFFFFFFFFFFFFF400) == 0x400)
  {
    v6 = (_QWORD *)(*(_QWORD *)result + 48);
    do
    {
      result = a3(a2, v3[5]);
      if (!(_DWORD)result || v3 == (_QWORD *)*v6)
        break;
      result = v3[2];
      if (!result)
        result = _dispatch_wait_for_enqueuer(v3 + 2, (uint64_t)v6);
      v3 = (_QWORD *)result;
    }
    while ((*(_QWORD *)result & 0xFFFFFFFFFFFFF400) == 0x400);
  }
  return result;
}

void dispatch_channel_drain_f(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD, uint64_t *), int8x16_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v7;
  unint64_t *v8;
  _QWORD *StatusReg;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  void *v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned int *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v43;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v43 = 0;
  if (*(_BYTE *)(a1 + 56))
    dispatch_channel_drain_f_cold_1();
  *(_BYTE *)(a1 + 56) = 1;
  v7 = (unint64_t *)(v4 + 48);
  v8 = (unint64_t *)(v4 + 104);
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v40 = (unint64_t *)(v4 + 104);
  do
  {
    v10 = *(_QWORD *)(a1 + 48);
    if (!v10)
    {
      if (!*v7)
        break;
      v10 = *v8;
      if (!*v8)
        v10 = _dispatch_wait_for_enqueuer(v8, v4 + 48);
    }
    if ((*(_QWORD *)v10 & 0xFFFFFFFFFFFFF400) != 0x400)
      break;
    v11 = *(_QWORD *)(v10 + 16);
    *v8 = v11;
    if (!v11)
    {
      v12 = (uint64_t *)(v10 + 16);
      while (1)
      {
        v13 = __ldxr(v7);
        if (v13 != v10)
          break;
        if (!__stlxr(0, v7))
          goto LABEL_13;
      }
      __clrex();
      v11 = *v12;
      if (!*v12)
        v11 = _dispatch_wait_for_enqueuer((unint64_t *)(v10 + 16), v4 + 48);
      *v8 = v11;
    }
LABEL_13:
    *(_QWORD *)(a1 + 48) = v11;
    v14 = *(unsigned int **)(v10 + 24);
    *(_QWORD *)(v10 + 24) = -1;
    if (v14 != (unsigned int *)-1 && (unsigned int *)((char *)v14 + 1) != 0)
    {
      v16 = v14;
      if (v14)
        v16 = (unsigned int *)v14[8];
      if (MEMORY[0xFFFFFC100])
        kdebug_trace(771817480, v16, v10, 0, 0);
    }
    v17 = *(_QWORD *)(v10 + 8);
    if (v17 == -1)
    {
      v20 = 0;
    }
    else
    {
      v18 = StatusReg[25];
      v19 = ((v18 >> 8) & 0xF) != 0 ? 256 << ((BYTE1(v18) & 0xFu) - 1) : 0;
      v20 = v19 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
      if ((v17 & 0xFFFFFF) != 0)
      {
        if ((v17 & 0xFFFFFFuLL) >= (v19 & 0xFFFFFF00)
          && ((v18 & 0x44000000) != 0 || (*(_QWORD *)(v10 + 8) & 0x10000000) != 0))
        {
          v20 = v17 & 0xFFFFFF;
        }
      }
      else if ((unsigned __int16)v18 >> 12)
      {
        v20 = (256 << (((unsigned __int16)v18 >> 12) - 1)) | 0xFF;
      }
    }
    v22 = v20 & 0xFFFFFFFF02FFFFFFLL;
    v23 = StatusReg[4];
    if ((v23 & 0x1000000) != 0)
    {
      if (v22)
        goto LABEL_68;
      v22 = v23 & 0xFFFFFFFFFEFFFFFFLL;
    }
    else if (v22 == (v23 & 0xFFFFFFFF77FFFFFFLL))
    {
      goto LABEL_36;
    }
    if (v22)
      goto LABEL_68;
LABEL_36:
    if (v14 == (unsigned int *)-1)
      goto LABEL_40;
    if ((unsigned int *)StatusReg[28] != v14)
    {
      v22 = 0;
LABEL_68:
      _dispatch_set_priority_and_voucher_slow(v22, v14, 6);
      goto LABEL_40;
    }
    if (v14)
      os_release(v14);
LABEL_40:
    if (MEMORY[0xFFFFFC100])
      _dispatch_trace_item_pop_internal((_QWORD *)v4, (_QWORD *)v10, a4);
    _dispatch_introspection_queue_item_dequeue(v4, v10);
    v24 = StatusReg[22];
    if (v24)
      v25 = *(_DWORD *)(v24 + 8) + 1;
    else
      v25 = 1;
    v26 = v10;
    if (v25 <= _dispatch_continuation_cache_limit)
    {
      v26 = 0;
      *(_QWORD *)(v10 + 16) = v24;
      *(_DWORD *)(v10 + 8) = v25;
      StatusReg[22] = v10;
    }
    if ((*(_BYTE *)(a1 + 35) & 1) != 0)
    {
      v28 = objc_autoreleasePoolPush();
      v27 = a3(a2, *(_QWORD *)(v10 + 40), &v43);
      v29 = v28;
      v8 = (unint64_t *)(v4 + 104);
      objc_autoreleasePoolPop(v29);
    }
    else
    {
      v27 = a3(a2, *(_QWORD *)(v10 + 40), &v43);
    }
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(772079660, v10, 0, 0, 0);
    _dispatch_introspection_queue_item_complete(v10);
    if (!v26)
    {
      if (!v27)
        break;
      continue;
    }
    _dispatch_continuation_free_to_cache_limit(v26);
    if (!v27)
      break;
  }
  while ((_dispatch_channel_invoke_checks(v4, a1, v5) & 1) != 0);
  v30 = v43;
  if (v43)
  {
    v31 = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v32 = (_QWORD *)v31[22];
    if (v32)
    {
      v31[22] = v32[2];
    }
    else
    {
      v32 = _dispatch_continuation_alloc_from_heap();
      v30 = v43;
    }
    *v32 = 1284;
    v32[4] = 0;
    v32[5] = v30;
    if ((v31[4] & 0xFFFFFFuLL) >= 0x10FF)
      v33 = 4351;
    else
      v33 = v31[4] & 0xFFFFFFLL;
    v34 = (unsigned int *)v31[28];
    if (v34)
      os_retain(v34);
    v32[3] = v34;
    if (v34 == (unsigned int *)-1)
      goto LABEL_81;
    if (v34)
      v34 = (unsigned int *)v34[8];
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817476, v34, v32, 0, 0);
      if (!v33)
        goto LABEL_98;
LABEL_82:
      v35 = (*(_DWORD *)(v4 + 84) >> 30) & 1;
      if ((*(_DWORD *)(v4 + 84) & 0xFFF) == 0)
        v35 = 1;
      if (v35)
        v36 = v33;
      else
        v36 = 0;
    }
    else
    {
LABEL_81:
      if (v33)
        goto LABEL_82;
LABEL_98:
      v36 = 0;
    }
    v32[1] = v36;
    v37 = *(_QWORD *)(a1 + 48);
    v32[2] = v37;
    if (!v37)
    {
      while (!__ldxr(v7))
      {
        if (!__stlxr((unint64_t)v32, v7))
          goto LABEL_94;
      }
      __clrex();
      v39 = *v40;
      if (!*v40)
        v39 = _dispatch_wait_for_enqueuer(v40, v4 + 48);
      v32[2] = v39;
    }
LABEL_94:
    *v40 = (unint64_t)v32;
    *(_QWORD *)(a1 + 48) = v32;
  }
}

uint64_t _dispatch_channel_invoke_checks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unint64_t StatusReg;

  result = _dispatch_channel_invoke_cancel_check(a1, a2, a3);
  if ((_DWORD)result)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    if (*(_QWORD *)(StatusReg + 40))
      _dispatch_return_to_kernel();
    if ((*(_BYTE *)(a2 + 34) & 0x10) != 0
      && (*(_DWORD *)(*(_QWORD *)(StatusReg + 216) + 60) & 7u) > *(unsigned __int8 *)(*(_QWORD *)(StatusReg + 216)
                                                                                      + 100)
      || (*(_BYTE *)(StatusReg + 960) & 1) != 0
      || *(_QWORD *)(a1 + 56) >> 55)
    {
      result = 0;
      *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 24);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t dispatch_channel_foreach_work_item_peek(uint64_t a1, uint64_t a2)
{
  return dispatch_channel_foreach_work_item_peek_f(a1, a2, *(uint64_t (**)(uint64_t, _QWORD))(a2 + 16));
}

void dispatch_channel_drain(uint64_t a1, uint64_t a2, int8x16_t a3)
{
  dispatch_channel_drain_f(a1, a2, *(uint64_t (**)(uint64_t, _QWORD, uint64_t *))(a2 + 16), a3);
}

void _dispatch_channel_wakeup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x16_t v6;
  uint64_t v7;

  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 88) + 8))(a1, *(_QWORD *)(a1 + 32)))
  {
    if (*(_QWORD *)(a1 + 48))
      v7 = 1;
    else
      v7 = (*(_DWORD *)(a1 + 80) & 0x10000000) != 0 && (*(_WORD *)(a1 + 116) & 8) == 0;
  }
  else
  {
    v7 = -1;
  }
  _dispatch_queue_wakeup((_DWORD *)a1, a2, a3, (__objc2_class **)v7, v6);
}

uint64_t dispatch_channel_create(const char *a1, __objc2_class **a2, uint64_t a3, _QWORD *a4)
{
  __objc2_class **v6;
  int v8;
  const char *v9;
  unsigned int *v10;
  int v11;
  uint64_t result;
  unint64_t v13;

  if (!*a4)
    dispatch_channel_create_cold_1();
  v6 = a2;
  v8 = 67108865;
  if (!a1)
  {
    v9 = 0;
    if (a2)
      goto LABEL_7;
LABEL_19:
    v6 = &off_653C0;
    goto LABEL_11;
  }
  v9 = _dispatch_strdup_if_mutable(a1);
  if (v9 == a1)
    v8 = 67108865;
  else
    v8 = 69206017;
  if (!v6)
    goto LABEL_19;
LABEL_7:
  if (*((_DWORD *)v6 + 2) != 0x7FFFFFFF)
  {
    v10 = (unsigned int *)(v6 + 1);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    if (v11 <= 0)
      dispatch_set_target_queue_cold_2();
  }
LABEL_11:
  result = _dispatch_object_alloc(OS_dispatch_channel, 120);
  *(_DWORD *)(result + 8) += 2;
  if (*(_BYTE *)(*(_QWORD *)result + 40) == 19)
    ++*(_DWORD *)(result + 8);
  *(_QWORD *)(result + 16) = -1985229329;
  *(_DWORD *)(result + 80) = v8;
  *(_QWORD *)(result + 56) = 0x19FFE0000000000;
  do
    v13 = __ldxr(&_dispatch_queue_serial_numbers);
  while (__stxr(v13 + 1, &_dispatch_queue_serial_numbers));
  *(_QWORD *)(result + 64) = v13;
  *(_QWORD *)(result + 72) = v9;
  *(_QWORD *)(result + 88) = a4;
  *(_QWORD *)(result + 24) = v6;
  *(_QWORD *)(result + 32) = a3;
  if (!a4[3])
  {
    *(_WORD *)(result + 116) |= 8u;
    --*(_DWORD *)(result + 8);
  }
  return result;
}

uint64_t dispatch_channel_enqueue(uint64_t a1, objc_class *a2, int8x16_t a3)
{
  unint64_t StatusReg;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_QWORD *)(StatusReg + 176);
  if (!v5)
    return _dispatch_channel_enqueue_slow(a1, a2);
  *(_QWORD *)(StatusReg + 176) = *(_QWORD *)(v5 + 16);
  *(_QWORD *)v5 = 1284;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = a2;
  if ((*(_QWORD *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF)
    v6 = 4351;
  else
    v6 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
  v7 = *(_QWORD *)(StatusReg + 224);
  if (v7)
    os_retain(*(void **)(StatusReg + 224));
  *(_QWORD *)(v5 + 24) = v7;
  if (v7 == -1)
    goto LABEL_11;
  if (v7)
    v7 = *(unsigned int *)(v7 + 32);
  if (MEMORY[0xFFFFFC100])
  {
    kdebug_trace(771817476, v7, v5, 0, 0);
    if (v6)
      goto LABEL_12;
  }
  else
  {
LABEL_11:
    if (v6)
    {
LABEL_12:
      v8 = *(_DWORD *)(a1 + 84);
      if ((v8 & 0x40000000) != 0 || (v8 & 0xFFF) == 0)
      {
        v9 = __clz(__rbit32(v6 >> 8)) + 1;
      }
      else
      {
        v9 = 0;
        v6 = 0;
      }
      goto LABEL_16;
    }
  }
  v9 = 0;
LABEL_16:
  *(_QWORD *)(v5 + 8) = v6;
  if ((*(_BYTE *)(v5 + 1) & 2) == 0)
  {
    if (MEMORY[0xFFFFFC100])
      _dispatch_trace_item_push_internal((_QWORD *)a1, (_QWORD *)v5, a3);
    _dispatch_introspection_queue_item_enqueue(a1, v5);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, v5, v9);
}

uint64_t _dispatch_channel_enqueue_slow(uint64_t a1, objc_class *a2)
{
  NSObject *v4;
  int8x16_t v5;
  unint64_t StatusReg;
  unint64_t v7;
  unsigned int *v8;
  int v9;
  uint64_t v10;

  v4 = _dispatch_continuation_alloc_from_heap();
  v4->isa = (Class)(&stru_4C0 + 68);
  v4[4].isa = 0;
  v4[5].isa = a2;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if ((*(_QWORD *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF)
    v7 = 4351;
  else
    v7 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
  v8 = *(unsigned int **)(StatusReg + 224);
  if (v8)
    os_retain(*(void **)(StatusReg + 224));
  v4[3].isa = (Class)v8;
  if (v8 != (unsigned int *)-1)
  {
    if (v8)
      v8 = (unsigned int *)v8[8];
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817476, v8, v4, 0, 0);
      if (v7)
        goto LABEL_11;
LABEL_21:
      v10 = 0;
      goto LABEL_15;
    }
  }
  if (!v7)
    goto LABEL_21;
LABEL_11:
  v9 = *(_DWORD *)(a1 + 84);
  if ((v9 & 0x40000000) != 0 || (v9 & 0xFFF) == 0)
  {
    v10 = __clz(__rbit32(v7 >> 8)) + 1;
  }
  else
  {
    v10 = 0;
    v7 = 0;
  }
LABEL_15:
  v4[1].isa = (Class)v7;
  if ((BYTE1(v4->isa) & 2) == 0)
  {
    if (MEMORY[0xFFFFFC100])
      _dispatch_trace_item_push_internal((_QWORD *)a1, v4, v5);
    _dispatch_introspection_queue_item_enqueue(a1, v4);
  }
  return (*(uint64_t (**)(uint64_t, NSObject *, uint64_t))(*(_QWORD *)a1 + 88))(a1, v4, v10);
}

uint64_t dispatch_channel_wakeup(uint64_t a1, int a2)
{
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;

  HIDWORD(v3) = a2 - 5;
  LODWORD(v3) = a2 - 5;
  v2 = v3 >> 2;
  if (v2 > 7)
    v4 = 0;
  else
    v4 = dword_3FF80[v2];
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v4, 2);
}

void _dispatch_mgr_queue_push(unint64_t *a1, _QWORD *a2)
{
  unint64_t *v3;
  unint64_t StatusReg;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  int8x16_t v8;

  if (*a2 <= 0xFFFuLL && (*a2 & 0x81) != 0)
    _dispatch_mgr_queue_push_cold_1();
  a2[2] = 0;
  v3 = a1 + 6;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_QWORD *)(StatusReg + 976) = a1 + 6;
  do
    v5 = __ldxr(v3);
  while (__stlxr((unint64_t)a2, v3));
  if (v5)
  {
    *(_QWORD *)(v5 + 16) = a2;
    *(_QWORD *)(StatusReg + 976) = 0;
  }
  else
  {
    a1[13] = (unint64_t)a2;
    *(_QWORD *)(StatusReg + 976) = 0;
    v6 = a1 + 7;
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 | 0x8000000000, v6));
    if (((v7 ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) != 0)
    {
      _dispatch_introspection_runtime_event();
      _dispatch_event_loop_poke(0xFFFFFFFFFFFFFFF8, 0, 0, v8);
    }
  }
}

void _dispatch_mgr_queue_wakeup()
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Don't try to wake up or override the manager";
  __break(1u);
}

void _dispatch_kevent_workqueue_init()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (_dispatch_root_queues_pred != -1)
    dispatch_once_f(&_dispatch_root_queues_pred, 0, (dispatch_function_t)_dispatch_root_queues_init_once);
  if (_dispatch_mgr_sched_pred != -1)
    dispatch_once_f(&_dispatch_mgr_sched_pred, 0, (dispatch_function_t)_dispatch_mgr_sched_init);
  v0 = _dispatch_mgr_sched;
  if (dword_65B64)
    v1 = _pthread_qos_class_encode();
  else
    v1 = 0;
  if ((int)v0 > dword_65B68)
    v1 = v0 | 0x20000000;
  if (v1)
  {
    v2 = _pthread_workqueue_set_event_manager_priority();
    if (v2)
      _dispatch_bug(6510, v2);
  }
}

uint64_t _dispatch_mgr_sched_init()
{
  int v0;
  int v1;
  int v2;
  uint64_t result;
  int v4;
  int sched_priority;
  unsigned int v6;
  unint64_t v7;
  sched_param v8;
  pthread_attr_t v9;

  v8 = 0;
  memset(&v9, 0, sizeof(v9));
  v0 = pthread_attr_init(&v9);
  if (v0)
    _dispatch_bug(6165, v0);
  v1 = pthread_attr_getschedpolicy(&v9, dword_65B6C);
  if (v1)
    _dispatch_bug(6167, v1);
  v2 = pthread_attr_getschedparam(&v9, &v8);
  if (v2)
    _dispatch_bug(6168, v2);
  result = qos_class_main();
  if ((_DWORD)result == 21)
    v4 = 25;
  else
    v4 = result;
  if (v4)
  {
    dword_65B64 = v4;
    if (v4 == 5)
    {
      sched_priority = 4;
    }
    else
    {
      HIDWORD(v7) = v4 - 9;
      LODWORD(v7) = v4 - 9;
      v6 = v7 >> 2;
      if (v6 > 6)
        sched_priority = 0;
      else
        sched_priority = dword_40000[v6];
    }
  }
  else
  {
    sched_priority = v8.sched_priority;
  }
  dword_65B68 = sched_priority;
  _dispatch_mgr_sched = sched_priority;
  return result;
}

void _dispatch_root_queue_poke(unsigned int *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  unsigned int *v5;

  if (*((_QWORD *)a1 + 6))
  {
    v3 = *(_QWORD *)(*(_QWORD *)a1 + 40);
    if (v3 == 330001 || v3 == 328465)
    {
      v5 = a1 + 28;
      while (!__ldxr(v5))
      {
        if (!__stlxr(a2, v5))
          goto LABEL_10;
      }
      __clrex();
    }
    else
    {
LABEL_10:
      _dispatch_root_queue_poke_slow(a1, a2, a3);
    }
  }
}

void _dispatch_root_queue_poke_slow(unsigned int *a1, uint64_t a2, int a3)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v14;
  unsigned int *v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  pthread_t v26;

  LODWORD(v3) = a3;
  if (_dispatch_root_queues_pred != -1)
LABEL_52:
    dispatch_once_f(&_dispatch_root_queues_pred, 0, (dispatch_function_t)_dispatch_root_queues_init_once);
  _dispatch_introspection_runtime_event();
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if (v6 == 330001)
  {
    v9 = a1[21];
    if ((v9 & 0x4000000) != 0)
    {
      v10 = v9 & 0x8E000000 | 0xFF;
      LOWORD(v9) = (unsigned __int16)v9 >> 12;
    }
    else
    {
      v10 = v9 & 0x8E0000FF;
      v9 = (v9 >> 8) & 0xF;
      if (!v9)
      {
LABEL_48:
        v25 = _pthread_workqueue_add_cooperativethreads(a2, v10);
        if (v25)
          _dispatch_bug(6848, v25);
        return;
      }
    }
    v10 |= 256 << (v9 - 1);
    goto LABEL_48;
  }
  if (v6 == 328465)
  {
    v7 = a1[21];
    if ((v7 & 0x4000000) != 0)
    {
      v8 = v7 & 0x8E000000 | 0xFF;
      LOWORD(v7) = (unsigned __int16)v7 >> 12;
    }
    else
    {
      v8 = v7 & 0x8E0000FF;
      v7 = (v7 >> 8) & 0xF;
      if (!v7)
      {
LABEL_44:
        v24 = _pthread_workqueue_addthreads(a2, v8);
        if (v24)
          _dispatch_bug(6840, v24);
        return;
      }
    }
    v8 |= 256 << (v7 - 1);
    goto LABEL_44;
  }
  v11 = *((_QWORD *)a1 + 4);
  if (*(_QWORD *)(v11 + 72))
  {
    while (dispatch_semaphore_signal((dispatch_semaphore_t)(v11 + 72)))
    {
      a2 = (a2 - 1);
      if (!(_DWORD)a2)
        return;
    }
  }
  v12 = a1 + 28;
  if ((a1[21] & 0x80000000) != 0)
  {
    do
      v14 = __ldxr(v12);
    while (__stxr(v14 + a2, v12));
  }
  else
  {
    do
    {
      if (__ldxr(v12))
      {
        __clrex();
        return;
      }
    }
    while (__stxr(a2, v12));
  }
  v15 = a1 + 25;
  v16 = a1[25];
  while (1)
  {
    LODWORD(v17) = v16 - (_DWORD)v3;
    if (v16 >= (int)v3)
      v17 = v17;
    else
      v17 = 0;
    if ((int)a2 > (int)v17)
    {
      do
        v18 = __ldxr(v12);
      while (__stxr(v18 - (a2 - v17), v12));
      a2 = v17;
    }
    if (!(_DWORD)a2)
      break;
    while (1)
    {
      v19 = __ldaxr(v15);
      if (v19 != v16)
        break;
      if (!__stxr(v16 - a2, v15))
      {
        v20 = 1;
        goto LABEL_31;
      }
    }
    v20 = 0;
    __clrex();
LABEL_31:
    v16 = v19;
    if (v20)
    {
      v26 = 0;
      v21 = a1 + 2;
      v3 = _dispatch_worker_thread;
LABEL_33:
      if (*v21 != 0x7FFFFFFF)
      {
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
        if (v22 < 1)
        {
          qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
          __break(1u);
          goto LABEL_52;
        }
      }
      while (1)
      {
        v23 = pthread_create(&v26, (const pthread_attr_t *)v11, (void *(__cdecl *)(void *))_dispatch_worker_thread, a1);
        if (v23 != 35)
        {
          if (!v23)
          {
            a2 = (a2 - 1);
            if (!(_DWORD)a2)
              return;
            goto LABEL_33;
          }
          _dispatch_bug(6907, v23);
        }
        _dispatch_temporary_resource_shortage();
      }
    }
  }
}

void _dispatch_root_queue_poke_and_wakeup(unsigned int *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  unsigned int *v5;
  signed int v6;
  BOOL v7;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if (v3 != 330001 && v3 != 328465)
    goto LABEL_12;
  v5 = a1 + 28;
  do
  {
    v6 = __ldxr(v5);
    v7 = v6 <= 0;
    if (!v6)
      v6 = a2;
  }
  while (__stlxr(v6, v5));
  if (v7)
LABEL_12:
    _dispatch_root_queue_poke_slow(a1, a2, a3);
}

unsigned int *_dispatch_root_queue_wakeup(unsigned int *result, uint64_t a2, char a3)
{
  uint64_t v3;

  if ((a3 & 8) != 0)
  {
    if ((a3 & 1) != 0)
      return (unsigned int *)_os_object_release_internal_n(result, (_BYTE *)&dword_0 + 2);
  }
  else
  {
    v3 = result[21];
    qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Don't try to wake up or override a root queue";
    qword_61258 = v3;
    __break(1u);
  }
  return result;
}

void _dispatch_root_queue_push(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t StatusReg;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;

  v3 = a3;
  v4 = a1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = *(_QWORD *)(StatusReg + 232);
  if (v6 && *(_BYTE *)(v6 + 44) && ((v7 = *(_QWORD **)(v6 + 8), v13 = *(_DWORD *)(a1 + 84), !v7) || v13 < 0))
  {
    v14 = *(_QWORD *)v6;
    v15 = *(_DWORD *)(v6 + 16);
    *(_QWORD *)v6 = a1;
    *(_QWORD *)(v6 + 8) = a2;
    *(_DWORD *)(v6 + 16) = a3;
    if (v13 < 0)
      *(_BYTE *)(v6 + 44) = 0;
    if (!v7)
      return;
    v3 = v15;
    v4 = v14;
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_DWORD *)(v4 + 84);
  if ((v8 & 0x8000000) != 0 && *v7 >= 0x1000uLL && *(_QWORD *)(*v7 + 40) != 1)
  {
    if (*(_QWORD *)(*v7 + 40) != 19 || !_dispatch_source_is_timer((uint64_t)v7))
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot target the cooperative root queue - not implemented";
      qword_61258 = (uint64_t)v7;
      __break(1u);
      return;
    }
    v8 = *(_DWORD *)(v4 + 84);
  }
  if ((unsigned __int16)v8 >> 12)
  {
    if (v3 && (unsigned __int16)v8 >> 12 != v3)
    {
LABEL_13:
      _dispatch_root_queue_push_override(v4, v7, v3);
      return;
    }
  }
  else
  {
    v9 = (v8 >> 8) & 0xF;
    if (v9)
      v10 = v9 >= v3;
    else
      v10 = 1;
    if (!v10)
      goto LABEL_13;
  }
  v7[2] = 0;
  v11 = (unint64_t *)(v4 + 48);
  *(_QWORD *)(StatusReg + 976) = v4 + 48;
  do
    v12 = __ldxr(v11);
  while (__stlxr((unint64_t)v7, v11));
  if (v12)
  {
    *(_QWORD *)(v12 + 16) = v7;
    *(_QWORD *)(StatusReg + 976) = 0;
  }
  else
  {
    *(_QWORD *)(v4 + 104) = v7;
    *(_QWORD *)(StatusReg + 976) = 0;
    _dispatch_root_queue_poke_and_wakeup((unsigned int *)v4, 1, 0);
  }
}

void _dispatch_root_queue_push_override(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  __objc2_class **v3;
  unint64_t v5;
  int v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t StatusReg;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __objc2_class **v16;

  v5 = (unint64_t)a2;
  v7 = *(_DWORD *)(a1 + 84);
  v8 = (v7 >> 25) & 4;
  if (v7 < 0)
    v9 = 2;
  else
    v9 = (v7 >> 25) & 4;
  if (*a2 >= 0x1000uLL && *(_QWORD *)(*a2 + 40) == 256)
  {
    a2[4] = a1;
  }
  else
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v11 = *(_QWORD **)(StatusReg + 176);
    if (v11)
      *(_QWORD *)(StatusReg + 176) = v11[2];
    else
      v11 = _dispatch_continuation_alloc_from_heap();
    v11[6] = v5;
    v11[7] = a1;
    v11[5] = v11;
    v8 = -1;
    *v11 = &unk_588E0;
    v11[1] = -1;
    v11[3] = -1;
    v5 = (unint64_t)v11;
  }
  if (a3 - 7 <= 0xFFFFFFF9)
  {
    v13 = a3;
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupted priority";
    qword_61258 = a3;
    __break(1u);
  }
  else
  {
    v12 = 2 * (v9 > 3);
    if ((v9 & 2) != 0)
      v12 = 1;
    v13 = 3 * a3 + v12 - 3;
    *(_QWORD *)(v5 + 16) = 0;
    v3 = &_dispatch_root_queues;
    v14 = (unint64_t *)(&_dispatch_root_queues + 16 * v13 + 6);
    v8 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(_QWORD *)(v8 + 976) = v14;
    do
      v15 = __ldxr(v14);
    while (__stlxr(v5, v14));
    if (v15)
    {
      *(_QWORD *)(v15 + 16) = v5;
      *(_QWORD *)(v8 + 976) = 0;
      return;
    }
  }
  v16 = &v3[16 * v13];
  v16[13] = (__objc2_class *)v5;
  *(_QWORD *)(v8 + 976) = 0;
  _dispatch_root_queue_poke_and_wakeup((unsigned int *)v16, 1, 0);
}

NSObject *dispatch_pthread_root_queue_create(const char *a1, int a2, __int128 *a3, void *a4)
{
  return _dispatch_pthread_root_queue_create(a1, a2, a3, a4, 0);
}

NSObject *_dispatch_pthread_root_queue_create(const char *a1, int a2, __int128 *a3, void *a4, _OWORD *a5)
{
  int v8;
  int v9;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  int v22;
  const char *v24;
  unsigned int v25;
  uint64_t v26;
  char __dst[8];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2 < 0)
    v8 = (char)a2;
  else
    v8 = 0;
  v9 = 4095;
  if (a1)
  {
    v11 = _dispatch_strdup_if_mutable(a1);
    if (v11 == a1)
      v9 = 4095;
    else
      v9 = 2101247;
  }
  else
  {
    v11 = 0;
  }
  v12 = _dispatch_object_alloc(OS_dispatch_queue_pthread_root, 320);
  v13 = v12;
  *(_QWORD *)(v12 + 16) = -1985229329;
  *(_DWORD *)(v12 + 80) = v9;
  *(_QWORD *)(v12 + 56) = 0x20000000000;
  do
    v14 = __ldxr(&_dispatch_queue_serial_numbers);
  while (__stxr(v14 + 1, &_dispatch_queue_serial_numbers));
  *(_QWORD *)(v12 + 64) = v14;
  *(_QWORD *)(v12 + 72) = v11;
  *(_QWORD *)(v12 + 56) = 0x60000000000000;
  *(_DWORD *)(v12 + 84) = 0x80000000;
  v15 = (_OWORD *)(v12 + 120);
  *(_QWORD *)(v12 + 32) = v12 + 120;
  if (v8 >= 32 || v8 == 0)
    v17 = 32;
  else
    v17 = v8;
  *(_DWORD *)(v12 + 100) = v17;
  *(_QWORD *)(v12 + 192) = OS_dispatch_semaphore;
  *(_DWORD *)(v12 + 256) = 0;
  _dispatch_sema4_create_slow((unsigned int *)(v12 + 256), 2);
  if (a3)
  {
    v18 = *a3;
    v19 = a3[1];
    v20 = a3[3];
    *(_OWORD *)(v13 + 152) = a3[2];
    *(_OWORD *)(v13 + 168) = v20;
    *v15 = v18;
    *(_OWORD *)(v13 + 136) = v19;
    _dispatch_mgr_priority_raise((pthread_attr_t *)(v13 + 120));
  }
  else
  {
    v21 = pthread_attr_init((pthread_attr_t *)(v13 + 120));
    if (v21)
      _dispatch_bug(7641, v21);
  }
  v22 = pthread_attr_setdetachstate((pthread_attr_t *)(v13 + 120), 2);
  if (!v22)
  {
    if (!a4)
      goto LABEL_24;
    goto LABEL_23;
  }
  _dispatch_bug(7644, v22);
  if (a4)
LABEL_23:
    *(_QWORD *)(v13 + 184) = _dispatch_Block_copy(a4);
LABEL_24:
  if (a5)
    *(_OWORD *)(v13 + 264) = *a5;
  if (MEMORY[0xFFFFFC100])
  {
    if (*(_QWORD *)(v13 + 72))
      v24 = *(const char **)(v13 + 72);
    else
      v24 = (const char *)&unk_416A6;
    strncpy(__dst, v24, 0x20uLL);
    v25 = *(_DWORD *)(v13 + 84);
    if ((v25 & 0x4000000) != 0)
    {
      v26 = v25 & 0x8E000000 | 0xFF;
      LOWORD(v25) = (unsigned __int16)v25 >> 12;
    }
    else
    {
      v26 = v25 & 0x8E0000FF;
      v25 = (v25 >> 8) & 0xF;
      if (!v25)
        goto LABEL_38;
    }
    v26 |= 256 << (v25 - 1);
LABEL_38:
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(772079621, *(_QWORD *)(v13 + 64), v26, 0, 0);
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(772079622, *(_QWORD *)__dst, v28, v29, v30);
  }
  return _dispatch_introspection_queue_create(v13);
}

NSObject *_dispatch_pthread_root_queue_create_with_observer_hooks_4IOHID(const char *a1, int a2, __int128 *a3, uint64_t a4, void *a5)
{
  if (!*(_QWORD *)a4 || !*(_QWORD *)(a4 + 8))
    _dispatch_pthread_root_queue_create_with_observer_hooks_4IOHID_cold_1();
  return _dispatch_pthread_root_queue_create(a1, a2, a3, a5, (_OWORD *)a4);
}

BOOL _dispatch_queue_is_exclusively_owned_by_current_thread_4IOHID(uint64_t a1)
{
  int v2;
  uint64_t v3;

  v2 = *(unsigned __int16 *)(a1 + 80);
  if (v2 != 1)
    _dispatch_queue_is_exclusively_owned_by_current_thread_4IOHID_cold_1(v2);
  v3 = *(_QWORD *)(a1 + 56);
  return ((v3 ^ *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24)) & 0xFFFFFFFC) == 0;
}

uint64_t dispatch_pthread_root_queue_copy_current()
{
  uint64_t v0;
  uint64_t v1;

  v0 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160);
  if (!v0)
    return 0;
  do
  {
    v1 = v0;
    v0 = *(_QWORD *)(v0 + 24);
  }
  while (v0);
  if (*(_QWORD *)(*(_QWORD *)v1 + 40) != 328721)
    return 0;
  _os_object_retain_with_resurrect(v1);
  return v1;
}

void _dispatch_pthread_root_queue_dispose(NSObject *a1, _BYTE *a2)
{
  pthread_attr_t *isa;
  const void *sig;

  isa = (pthread_attr_t *)a1[4].isa;
  if (MEMORY[0xFFFFFC100])
    kdebug_trace(772079624, a1[8].isa, 0, 0, 0);
  _dispatch_introspection_queue_dispose(a1);
  pthread_attr_destroy(isa);
  _dispatch_semaphore_dispose((uint64_t)isa[1].__opaque);
  sig = (const void *)isa[1].__sig;
  if (sig)
    _Block_release(sig);
  a1[3].isa = (Class)&off_65340;
  _dispatch_lane_class_dispose((uint64_t *)a1, a2);
}

void _dispatch_runloop_queue_wakeup(_DWORD *context, uint64_t a2, uint64_t a3, int8x16_t a4)
{
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((context[20] & 0x800000) != 0)
    goto LABEL_19;
  if ((a3 & 2) == 0)
    goto LABEL_22;
  v5 = (unint64_t *)(context + 14);
  do
    v6 = __ldxr(v5);
  while (__stlxr(v6 | 0x8000000000, v5));
  if ((v6 & 0xFFFFFFFC) == 0)
  {
LABEL_19:
    _dispatch_lane_wakeup((uint64_t)context, a2, a3, a4);
  }
  else
  {
LABEL_22:
    if (*((_QWORD *)context + 6))
    {
      _dispatch_runloop_queue_poke((char *)context, a2, a3);
    }
    else
    {
      v7 = (unint64_t *)(context + 14);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 & 0xFFFFFFF0FFFFFFFFLL, v7));
      v9 = HIDWORD(v8) & 7;
      if ((_DWORD)v9)
      {
        v10 = *((_QWORD *)context + 7);
        if (v10 >= 4)
          v11 = v10 | 3;
        else
          v11 = 0;
        if (*((_QWORD *)context + 6))
          _dispatch_runloop_queue_poke((char *)context, v9, a3);
        _pthread_qos_override_end_direct(v11, context);
      }
      else if ((a3 & 1) != 0)
      {
        _os_object_release_internal_n(context, (_BYTE *)&dword_0 + 2);
      }
    }
  }
}

void _dispatch_runloop_queue_poke(char *context, unsigned int a2, char a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  mach_port_t v15;
  int v16;
  BOOL v17;
  BOOL v18;

  if (*(_QWORD *)(*(_QWORD *)context + 40) == 394769 && _dispatch_main_q_handle_pred != -1)
    dispatch_once_f(&_dispatch_main_q_handle_pred, context, (dispatch_function_t)_dispatch_runloop_queue_handle_init);
  v6 = *((_DWORD *)context + 21);
  v7 = (unsigned __int16)v6 >> 12;
  if (a2)
    v7 = a2;
  LODWORD(v8) = (v6 >> 8) & 0xF;
  if (v7 <= v8)
    v8 = v8;
  else
    v8 = v7;
  v9 = (unint64_t *)(context + 56);
  v10 = v8 << 32;
  do
  {
    v11 = __ldxr(v9);
    if ((v11 & 0x700000000) < v10)
    {
      v12 = v11 & 0xFFFFFFF8FFFFFFFFLL | v10;
      if (v11 & 0x1000000000 | v10 & 0x1000000000)
        v12 |= 0x800000000uLL;
      if (v11 != v12)
        continue;
    }
    __clrex();
    goto LABEL_22;
  }
  while (__stxr(v12, v9));
  v13 = (*((_DWORD *)context + 21) >> 8) & 0xF;
  if (v8 > v13)
  {
    v14 = v12 >= 4 ? v12 | 3 : 0;
    _pthread_qos_override_start_direct(v14, (256 << (v8 - 1)) | 0xFF, context);
    if ((BYTE4(v11) & 7u) > v13)
      _pthread_qos_override_end_direct(v14, context);
  }
LABEL_22:
  v15 = *((_DWORD *)context + 8);
  if (v15 - 1 > 0xFFFFFFFD
    || ((_dispatch_introspection_runtime_event(),
         v16 = _dispatch_send_wakeup_runloop_thread(v15, 0),
         (v16 - 268435459) >= 2)
      ? (v17 = v16 == 16)
      : (v17 = 1),
        !v17 ? (v18 = v16 == 0) : (v18 = 1),
        v18))
  {
    if ((a3 & 1) != 0)
LABEL_34:
      _os_object_release_internal_n(context, (_BYTE *)&dword_0 + 2);
  }
  else
  {
    _dispatch_bug(7895, v16);
    if ((a3 & 1) != 0)
      goto LABEL_34;
  }
}

NSObject *_dispatch_runloop_root_queue_create_4CF(const char *a1, uint64_t a2)
{
  unint64_t StatusReg;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  const char *v9;
  unsigned int v10;
  unint64_t v11;
  const char *v13;
  unsigned int v14;
  uint64_t v15;
  char __dst[8];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (!a2)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v4 = *(_QWORD *)(StatusReg + 32);
    v5 = _dispatch_object_alloc(OS_dispatch_queue_runloop, 120);
    v6 = v5;
    *(_QWORD *)(v5 + 16) = -1985229329;
    *(_DWORD *)(v5 + 80) = 262145;
    *(_QWORD *)(v5 + 56) = 0x1FFE1000000000;
    v7 = (unint64_t *)(v5 + 56);
    do
      v8 = __ldxr(&_dispatch_queue_serial_numbers);
    while (__stxr(v8 + 1, &_dispatch_queue_serial_numbers));
    *(_QWORD *)(v5 + 24) = &off_653C0;
    v9 = "runloop-queue";
    if (a1)
      v9 = a1;
    *(_QWORD *)(v5 + 64) = v8;
    *(_QWORD *)(v5 + 72) = v9;
    if ((v4 & 0x22000000) == 0 && (v4 & 0x3F00) != 0)
    {
      v10 = (__clz(__rbit32((v4 >> 8) & 0x3FFF)) << 8) + 256;
      if (((v4 >> 8) & 0x3FFF) == 0)
        v10 = 0;
      *(_DWORD *)(v5 + 84) = v10 & 0xFFFFFF00 | v4;
    }
    _dispatch_runloop_queue_handle_init((_QWORD *)v5);
    do
      v11 = __ldxr(v7);
    while (__stxr(v11 & 0xFFFFFFFF00000003 | (4 * ((*(_QWORD *)(StatusReg + 24) >> 2) & 0x3FFFFFFFLL)), v7));
    if (!MEMORY[0xFFFFFC100])
      return _dispatch_introspection_queue_create(v6);
    if (*(_QWORD *)(v6 + 72))
      v13 = *(const char **)(v6 + 72);
    else
      v13 = (const char *)&unk_416A6;
    strncpy(__dst, v13, 0x20uLL);
    v14 = *(_DWORD *)(v6 + 84);
    if ((v14 & 0x4000000) != 0)
    {
      v15 = v14 & 0x8E000000 | 0xFF;
      LOWORD(v14) = (unsigned __int16)v14 >> 12;
    }
    else
    {
      v15 = v14 & 0x8E0000FF;
      v14 = (v14 >> 8) & 0xF;
      if (!v14)
        goto LABEL_24;
    }
    v15 |= 256 << (v14 - 1);
LABEL_24:
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(772079621, *(_QWORD *)(v6 + 64), v15, 0, 0);
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(772079622, *(_QWORD *)__dst, v17, v18, v19);
    return _dispatch_introspection_queue_create(v6);
  }
  return 0;
}

void _dispatch_runloop_queue_handle_init(_QWORD *context)
{
  kern_return_t v2;
  mach_port_name_t name;
  mach_port_options_t options;

  if ((_dispatch_unsafe_fork & 1) == 0)
    _dispatch_fork_becomes_unsafe_slow();
  options.reserved[1] = 0;
  *(_OWORD *)&options.flags = xmmword_3FEC8;
  name = 0;
  if (*(_QWORD *)(*context + 40) == 394769)
    *(_QWORD *)&options.flags = 0x100000033;
  v2 = mach_port_construct(mach_task_self_, &options, (mach_port_context_t)context, &name);
  if (v2 == -301)
    _dispatch_sema4_create_slow_cold_2();
  if (v2)
    _dispatch_bug(7808, v2);
  context[4] = name;
  _dispatch_program_is_probably_callback_driven = 1;
}

uint64_t _dispatch_runloop_queue_xref_dispose(unint64_t *a1)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;

  v2 = a1 + 7;
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 & 0xFFFFFFF0FFFFFFFFLL, v2));
  v4 = HIDWORD(v3) & 7;
  do
    v5 = __ldxr(v2);
  while (__stxr(v5 & 0xFFFFFFFF00000003, v2));
  result = (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(*a1 + 80))(a1, v4, 2);
  if ((_DWORD)v4)
  {
    v7 = a1[7];
    if (v7 >= 4)
      v8 = v7 | 3;
    else
      v8 = 0;
    return _pthread_qos_override_end_direct(v8, a1);
  }
  return result;
}

void _dispatch_runloop_queue_dispose(NSObject *a1, _BYTE *a2)
{
  if (MEMORY[0xFFFFFC100])
    kdebug_trace(772079624, a1[8].isa, 0, 0, 0);
  _dispatch_introspection_queue_dispose(a1);
  _dispatch_runloop_queue_handle_dispose((mach_port_context_t)a1);
  _dispatch_lane_class_dispose((uint64_t *)a1, a2);
}

void _dispatch_runloop_queue_handle_dispose(mach_port_context_t guard)
{
  mach_port_name_t v1;
  kern_return_t v2;

  v1 = *(_DWORD *)(guard + 32);
  if (v1 - 1 <= 0xFFFFFFFD)
  {
    *(_QWORD *)(guard + 32) = 0;
    v2 = mach_port_destruct(mach_task_self_, v1, -1, guard);
    if (v2 == -301)
      _dispatch_sema4_create_slow_cold_2();
    if (v2)
      _dispatch_bug(7864, v2);
  }
}

BOOL _dispatch_runloop_root_queue_perform_4CF(dispatch_object_t object)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t StatusReg;
  unsigned int *v5;
  unsigned int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  _BOOL8 v16;
  unsigned int v17;
  int8x16_t v18;
  dispatch_object_t v19;
  NSObject *isa;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  void (**v24)(dispatch_object_t);
  Class v25;
  unsigned int *v26;
  unsigned int *v27;
  Class v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  NSObject *v36;
  objc_class *v37;
  int v38;
  unsigned int *v39;
  _QWORD *v40;
  void (*v41)(void (**)(void));
  void (__cdecl *v42)(void *);
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v48;
  uint64_t v49;
  void (*v50)(void (**)(void));
  _QWORD *v51;
  void (__cdecl *v52)(void *);
  unsigned int *v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  _OWORD v57[2];
  __int128 v58;

  v2 = *((_QWORD *)object->isa + 5);
  if (v2 != 395025)
    _dispatch_runloop_root_queue_perform_4CF_cold_3(v2);
  dispatch_retain(object);
  v3 = (unint64_t *)&object[6];
  if (!object[6].isa)
  {
    v16 = 0;
    goto LABEL_112;
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = (unsigned int *)(*(_QWORD *)(StatusReg + 216) & 0xFFFFFFFFFFFFFFFELL);
  if (v5 != (unsigned int *)-4)
  {
    if (v5)
    {
      v6 = v5 + 24;
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 - 1, v6));
      if (v7 <= 0)
      {
        if (v7 < 0)
          _os_object_allows_weak_reference_cold_1();
        *((_QWORD *)v5 + 7) = 0xDEAD000000000000;
        _dispatch_object_dealloc(v5);
      }
    }
    *(_QWORD *)(StatusReg + 216) = -4;
  }
  v58 = *(_OWORD *)(StatusReg + 160);
  *(_QWORD *)(StatusReg + 160) = object;
  *(_QWORD *)(StatusReg + 168) = &v58;
  v8 = *(_QWORD *)(StatusReg + 32);
  v9 = (__clz(__rbit32((v8 >> 8) & 0x3FFF)) << 8) + 256;
  if (((v8 >> 8) & 0x3FFF) != 0)
    v10 = v9;
  else
    v10 = 0;
  v11 = *(unsigned int **)(StatusReg + 224);
  if (v11)
    os_retain(*(void **)(StatusReg + 224));
  LODWORD(v12) = v10 | v8 & 0x8E0000FF;
  v13 = *(_QWORD *)(StatusReg + 200);
  v56 = v8;
  if ((_DWORD)v13)
  {
    v14 = v10 & 0xFFF | v8;
    if (v14)
    {
      if (((unsigned __int16)v13 & 0xFFFu) > v14)
        v14 = v13 & 0xFFF;
      v15 = v10 & 0x4003000 | v8 & 0x4000000;
      if (v10 >> 12 <= v14 >> 8)
        v15 = 0;
      LODWORD(v12) = v13 & 0x880F0000 | v14 | v15;
    }
    else
    {
      v17 = v13 | 0x40000000;
      if ((v13 & 0xFFF) == 0)
        v17 = *(_QWORD *)(StatusReg + 200);
      LODWORD(v12) = v17 & 0xFFFF0FFF | v10 & 0x4003000 | v8 & 0x4000000;
      if (((v17 >> 8) & 0xF) >= v10 >> 12)
        LODWORD(v12) = v17;
    }
  }
  if ((~(_DWORD)v12 & 0xF0000) != 0)
    v12 = v12 | 0xF0000;
  else
    v12 = v12;
  *(_QWORD *)(StatusReg + 200) = v12;
  v18 = 0uLL;
  memset(v57, 0, sizeof(v57));
  v19 = object + 13;
  isa = object[13].isa;
  if (!isa)
    isa = _dispatch_wait_for_enqueuer((unint64_t *)&object[13], (uint64_t)&object[6]);
  v21 = (uint64_t)isa[2].isa;
  v19->isa = (Class)v21;
  if (!v21)
  {
    v22 = (unint64_t *)&isa[2];
    while (1)
    {
      v23 = __ldxr(v3);
      if (v23 != isa)
        break;
      if (!__stlxr(0, v3))
        goto LABEL_41;
    }
    __clrex();
    v21 = *v22;
    if (!*v22)
      v21 = _dispatch_wait_for_enqueuer(v22, (uint64_t)&object[6]);
    v19->isa = (Class)v21;
  }
LABEL_41:
  v24 = *(void (***)(dispatch_object_t))(StatusReg + 192);
  if (v24)
    (*v24)(object);
  v25 = isa->isa;
  if (isa->isa < (Class)&unk_1000)
  {
    v26 = (unsigned int *)isa[3].isa;
    if ((v25 & 4) != 0)
      isa[3].isa = (Class)-1;
    if (v26 != (unsigned int *)-1)
    {
      v27 = v26;
      if (v26)
        v27 = (unsigned int *)v26[8];
      if (MEMORY[0xFFFFFC100])
        kdebug_trace(771817480, v27, isa, 0, 0);
    }
    v55 = v11;
    v28 = isa[1].isa;
    if (v28 == (Class)-1)
    {
      v31 = 0;
    }
    else
    {
      v29 = *(_QWORD *)(StatusReg + 200);
      if (((v29 >> 8) & 0xF) != 0)
        v30 = 256 << ((BYTE1(v29) & 0xFu) - 1);
      else
        v30 = 0;
      v31 = v30 & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(StatusReg + 200);
      if (((unint64_t)v28 & 0xFFFFFF) != 0)
      {
        if (((unint64_t)v28 & 0xFFFFFF) >= (v30 & 0xFFFFFF00)
          && ((v29 & 0x44000000) != 0 || ((uint64_t)isa[1].isa & 0x10000000) != 0))
        {
          v31 = (unint64_t)v28 & 0xFFFFFF;
        }
      }
      else if ((unsigned __int16)v29 >> 12)
      {
        v31 = (256 << (((unsigned __int16)v29 >> 12) - 1)) | 0xFF;
      }
    }
    v34 = v31 & 0xFFFFFFFF02FFFFFFLL;
    v35 = *(_QWORD *)(StatusReg + 32);
    if ((v35 & 0x1000000) != 0)
    {
      if (v34)
        goto LABEL_138;
      v34 = v35 & 0xFFFFFFFFFEFFFFFFLL;
    }
    else if (v34 == (v35 & 0xFFFFFFFF77FFFFFFLL))
    {
LABEL_71:
      if (v26 == (unsigned int *)-1)
        goto LABEL_76;
      if (*(unsigned int **)(StatusReg + 224) == v26)
      {
        if ((v25 & 4) != 0 && v26)
          os_release(v26);
LABEL_76:
        if (((unsigned __int16)v25 & 0x200) != 0)
          goto LABEL_80;
LABEL_77:
        if (MEMORY[0xFFFFFC100])
          _dispatch_trace_item_pop_internal(object, isa, v18);
        _dispatch_introspection_queue_item_dequeue(object, isa);
LABEL_80:
        if ((v25 & 4) != 0)
        {
          v37 = *(objc_class **)(StatusReg + 176);
          if (v37)
            v38 = *((_DWORD *)v37 + 2) + 1;
          else
            v38 = 1;
          v36 = isa;
          if (v38 <= _dispatch_continuation_cache_limit)
          {
            v36 = 0;
            isa[2].isa = v37;
            LODWORD(isa[1].isa) = v38;
            *(_QWORD *)(StatusReg + 176) = isa;
          }
        }
        else
        {
          v36 = 0;
        }
        v54 = (uint64_t)v36;
        if ((v25 & 8) != 0)
        {
          v53 = v5;
          v48 = isa[6].isa;
          v49 = *((_QWORD *)v48->isa + 5);
          if (v49 != 514)
            _dispatch_queue_override_invoke_cold_1(v49);
          v50 = (void (*)(void (**)(void)))isa[4].isa;
          v51 = isa[5].isa;
          v52 = (void (__cdecl *)(void *))v50;
          if (v51)
          {
            v52 = (void (__cdecl *)(void *))isa[4].isa;
            if (v50 == _dispatch_call_block_and_release)
              v52 = (void (__cdecl *)(void *))v51[2];
          }
          _dispatch_introspection_callout_entry(isa[5].isa, v52);
          _dispatch_client_callout((uint64_t)v51, (uint64_t (*)(void))v50);
          _dispatch_introspection_callout_return(v51, v52);
          if (MEMORY[0xFFFFFC100])
            kdebug_trace(772079660, isa, 0, 0, 0);
          _dispatch_introspection_queue_item_complete(isa);
          dispatch_group_leave(v48);
          v5 = v53;
        }
        else
        {
          v39 = v5;
          v41 = (void (*)(void (**)(void)))isa[4].isa;
          v40 = isa[5].isa;
          v42 = (void (__cdecl *)(void *))v41;
          if (v40)
          {
            v42 = (void (__cdecl *)(void *))isa[4].isa;
            if (v41 == _dispatch_call_block_and_release)
              v42 = (void (__cdecl *)(void *))v40[2];
          }
          _dispatch_introspection_callout_entry(isa[5].isa, v42);
          _dispatch_client_callout((uint64_t)v40, (uint64_t (*)(void))v41);
          _dispatch_introspection_callout_return(v40, v42);
          if (MEMORY[0xFFFFFC100])
            kdebug_trace(772079660, isa, 0, 0, 0);
          _dispatch_introspection_queue_item_complete(isa);
          v5 = v39;
        }
        v11 = v55;
        v33 = v56;
        if (v54)
        {
          _dispatch_continuation_free_to_cache_limit(v54);
          if (!v24)
            goto LABEL_97;
        }
        else if (!v24)
        {
          goto LABEL_97;
        }
LABEL_96:
        v24[1](object);
        goto LABEL_97;
      }
      v34 = 0;
LABEL_138:
      _dispatch_set_priority_and_voucher_slow(v34, v26, v25 & 4 | 2);
      if (((unsigned __int16)v25 & 0x200) != 0)
        goto LABEL_80;
      goto LABEL_77;
    }
    if (v34)
      goto LABEL_138;
    goto LABEL_71;
  }
  if (*((_QWORD *)v25 + 5) == 1)
    (*((void (**)(NSObject *, _QWORD, _QWORD))v25 + 6))(isa, 0, 0);
  else
    (*((void (**)(NSObject *, _OWORD *, uint64_t))v25 + 8))(isa, v57, 0x80000);
  v33 = v56;
  if (v24)
    goto LABEL_96;
LABEL_97:
  v16 = v21 != 0;
  if (!v21)
    (*((void (**)(dispatch_object_t, _QWORD, _QWORD))object->isa + 10))(object, 0, 0);
  *(_QWORD *)(StatusReg + 200) = v13 & 0xFFF0FFFF;
  v43 = v33 & 0xFFFFFFFF02FFFFFFLL;
  if (v33 == -1)
    v44 = 0;
  else
    v44 = v33 & 0xFFFFFFFF02FFFFFFLL;
  v45 = *(_QWORD *)(StatusReg + 32);
  if ((v45 & 0x1000000) != 0)
  {
    if (v44)
    {
LABEL_119:
      _dispatch_set_priority_and_voucher_slow(v43, v11, 6);
      goto LABEL_108;
    }
    v44 = v45 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v44 == (v45 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_104;
  }
  v43 = v44;
  if (v44)
    goto LABEL_119;
LABEL_104:
  if (v11 != (unsigned int *)-1)
  {
    if (*(unsigned int **)(StatusReg + 224) == v11)
    {
      if (v11)
        os_release(v11);
      goto LABEL_108;
    }
    v43 = 0;
    goto LABEL_119;
  }
LABEL_108:
  *(_OWORD *)(StatusReg + 160) = v58;
  if (v5 != (unsigned int *)-4)
  {
    *(_QWORD *)(StatusReg + 216) = 0;
    *(_QWORD *)(StatusReg + 40) = 0;
  }
  v46 = *(_QWORD *)(StatusReg + 176);
  if (v46)
  {
    *(_QWORD *)(StatusReg + 176) = 0;
    _dispatch_cache_cleanup(v46);
  }
LABEL_112:
  dispatch_release(object);
  return v16;
}

void _dispatch_runloop_root_queue_wakeup_4CF(_DWORD *a1, int8x16_t a2)
{
  if (*(_QWORD *)(*(_QWORD *)a1 + 40) != 395025)
    _dispatch_runloop_root_queue_perform_4CF_cold_3(*(_QWORD *)(*(_QWORD *)a1 + 40));
  _dispatch_runloop_queue_wakeup(a1, 0, 0, a2);
}

uint64_t _dispatch_runloop_root_queue_get_port_4CF(unsigned int *a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if (v2 != 395025)
    _dispatch_runloop_root_queue_perform_4CF_cold_3(v2);
  return a1[8];
}

uint64_t _dispatch_get_main_queue_handle_4CF()
{
  if (_dispatch_main_q_handle_pred != -1)
    dispatch_once_f(&_dispatch_main_q_handle_pred, &_dispatch_main_q, (dispatch_function_t)_dispatch_runloop_queue_handle_init);
  return dword_64DE0;
}

uint64_t _dispatch_get_main_queue_port_4CF()
{
  if (_dispatch_main_q_handle_pred != -1)
    dispatch_once_f(&_dispatch_main_q_handle_pred, &_dispatch_main_q, (dispatch_function_t)_dispatch_runloop_queue_handle_init);
  return dword_64DE0;
}

void _dispatch_main_queue_callback_4CF()
{
  if (!dword_64E30)
  {
    dword_64E30 = 1;
    _dispatch_main_queue_drain();
    dword_64E30 = 0;
  }
}

void _dispatch_main_queue_drain()
{
  uint64_t v0;
  unint64_t StatusReg;
  unsigned int *v2;
  unsigned int *v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int8x16_t v16;
  int *v17;
  unint64_t v18;
  uint64_t v19;
  void (**v20)(__objc2_class **);
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  void (*v35)(void (**)(void));
  void (__cdecl *v36)(void *);
  uint64_t v37;
  _QWORD *v38;
  void (*v39)(void (**)(void));
  void (__cdecl *v40)(void *);
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  _OWORD *v45;
  uint64_t v46;
  NSObject *group;
  int v48;
  uint64_t v49;
  unsigned int *v50;
  _OWORD v51[2];
  __int128 v52;

  v52 = 0uLL;
  if (!qword_64DF0)
    return;
  if ((dword_64E10 & 0x40000) == 0)
    _dispatch_main_queue_drain_cold_1();
  v0 = qword_64DF8;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (((v0 ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) != 0)
    _dispatch_main_queue_drain_cold_5(v0);
  if (_dispatch_main_q_handle_pred != -1)
    dispatch_once_f(&_dispatch_main_q_handle_pred, &_dispatch_main_q, (dispatch_function_t)_dispatch_runloop_queue_handle_init);
  v2 = (unsigned int *)(*(_QWORD *)(StatusReg + 216) & 0xFFFFFFFFFFFFFFFELL);
  if (v2)
  {
    if (v2 == (unsigned int *)-4)
      _dispatch_main_queue_drain_cold_4();
    v3 = v2 + 24;
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 - 1, v3));
    if (v4 <= 0)
    {
      if (v4 < 0)
        _os_object_allows_weak_reference_cold_1();
      *((_QWORD *)v2 + 7) = 0xDEAD000000000000;
      _dispatch_object_dealloc(v2);
    }
  }
  *(_QWORD *)(StatusReg + 216) = -4;
  v52 = *(_OWORD *)(StatusReg + 160);
  *(_QWORD *)(StatusReg + 160) = &_dispatch_main_q;
  *(_QWORD *)(StatusReg + 168) = 0;
  v5 = *(_QWORD *)(StatusReg + 32);
  v6 = (__clz(__rbit32((v5 >> 8) & 0x3FFF)) << 8) + 256;
  if (((v5 >> 8) & 0x3FFF) != 0)
    v7 = v6;
  else
    v7 = 0;
  v8 = *(unsigned int **)(StatusReg + 224);
  if (v8)
    os_retain(*(void **)(StatusReg + 224));
  if ((((unsigned __int16)dword_64E14 ^ (unsigned __int16)v7) & 0xF00) != 0)
    _dispatch_main_queue_update_priority_from_thread();
  LODWORD(v9) = v7 | v5 & 0x8E0000FF;
  v10 = *(_QWORD *)(StatusReg + 200);
  v48 = v10;
  if ((_DWORD)v10)
  {
    v11 = v7 & 0xFFF | v5;
    if (v11)
    {
      v12 = v10 & 0x880F0000;
      v13 = v10 & 0xFFF;
      if (v13 > v11)
        v11 = v13;
      v14 = v7 & 0x4003000 | v5 & 0x4000000;
      if (v7 >> 12 <= v11 >> 8)
        v14 = 0;
      LODWORD(v9) = v12 | v11 | v14;
    }
    else
    {
      v15 = v10 | 0x40000000;
      if ((v10 & 0xFFF) == 0)
        v15 = *(_QWORD *)(StatusReg + 200);
      LODWORD(v9) = v15 & 0xFFFF0FFF | v7 & 0x4003000 | v5 & 0x4000000;
      if (((v15 >> 8) & 0xF) >= v7 >> 12)
        LODWORD(v9) = v15;
    }
  }
  v49 = v5;
  v50 = v8;
  if ((~(_DWORD)v9 & 0xF0000) != 0)
    v9 = v9 | 0xF0000;
  else
    v9 = v9;
  *(_QWORD *)(StatusReg + 200) = v9;
  v16 = 0uLL;
  memset(v51, 0, sizeof(v51));
  v17 = off_64E28[0];
  if (!off_64E28[0])
    v17 = (int *)_dispatch_wait_for_enqueuer((unint64_t *)off_64E28, (uint64_t)&qword_64DF0);
  off_64E28[0] = 0;
  do
    v18 = __ldxr((unint64_t *)&qword_64DF0);
  while (__stlxr(0, (unint64_t *)&qword_64DF0));
  do
  {
    if (v17 == (int *)v18)
    {
      v19 = 0;
    }
    else
    {
      v19 = *((_QWORD *)v17 + 2);
      if (!v19)
        v19 = _dispatch_wait_for_enqueuer((unint64_t *)v17 + 2, 0);
    }
    v20 = *(void (***)(__objc2_class **))(StatusReg + 192);
    if (v20)
      (*v20)(&_dispatch_main_q);
    v21 = *(_QWORD *)v17;
    if (*(_QWORD *)v17 >= 0x1000uLL)
    {
      if (*(_QWORD *)(v21 + 40) == 1)
        (*(void (**)(int *, _QWORD, _QWORD))(v21 + 48))(v17, 0, 0);
      else
        (*(void (**)(int *, _OWORD *, uint64_t))(v21 + 64))(v17, v51, 0x80000);
      if (v20)
        goto LABEL_96;
      goto LABEL_97;
    }
    v22 = (unsigned int *)*((_QWORD *)v17 + 3);
    if ((v21 & 4) != 0)
      *((_QWORD *)v17 + 3) = -1;
    if (v22 != (unsigned int *)-1)
    {
      v23 = v22;
      if (v22)
        v23 = (unsigned int *)v22[8];
      if (MEMORY[0xFFFFFC100])
        kdebug_trace(771817480, v23, v17, 0, 0);
    }
    v24 = *((_QWORD *)v17 + 1);
    if (v24 == -1)
    {
      v27 = 0;
    }
    else
    {
      v25 = *(_QWORD *)(StatusReg + 200);
      if (((v25 >> 8) & 0xF) != 0)
        v26 = 256 << ((BYTE1(v25) & 0xFu) - 1);
      else
        v26 = 0;
      v27 = v26 & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(StatusReg + 200);
      if ((v24 & 0xFFFFFF) != 0)
      {
        if ((v24 & 0xFFFFFFuLL) >= (v26 & 0xFFFFFF00)
          && ((v25 & 0x44000000) != 0 || (*((_QWORD *)v17 + 1) & 0x10000000) != 0))
        {
          v27 = v24 & 0xFFFFFF;
        }
      }
      else if ((unsigned __int16)v25 >> 12)
      {
        v27 = (256 << (((unsigned __int16)v25 >> 12) - 1)) | 0xFF;
      }
    }
    v29 = v27 & 0xFFFFFFFF02FFFFFFLL;
    v30 = *(_QWORD *)(StatusReg + 32);
    if ((v30 & 0x1000000) != 0)
    {
      if (v29)
        goto LABEL_116;
      v29 = v30 & 0xFFFFFFFFFEFFFFFFLL;
LABEL_101:
      if (v29)
        goto LABEL_116;
      goto LABEL_72;
    }
    if (v29 != (v30 & 0xFFFFFFFF77FFFFFFLL))
      goto LABEL_101;
LABEL_72:
    if (v22 == (unsigned int *)-1)
      goto LABEL_77;
    if (*(unsigned int **)(StatusReg + 224) == v22)
    {
      if ((v21 & 4) != 0 && v22)
        os_release(v22);
LABEL_77:
      if ((v21 & 0x200) == 0)
        goto LABEL_78;
      goto LABEL_81;
    }
    v29 = 0;
LABEL_116:
    _dispatch_set_priority_and_voucher_slow(v29, v22, v21 & 4 | 2);
    if ((v21 & 0x200) == 0)
    {
LABEL_78:
      if (MEMORY[0xFFFFFC100])
        _dispatch_trace_item_pop_internal(&_dispatch_main_q, v17, v16);
      _dispatch_introspection_queue_item_dequeue(&_dispatch_main_q, v17);
    }
LABEL_81:
    if ((v21 & 4) != 0)
    {
      v32 = *(_QWORD *)(StatusReg + 176);
      if (v32)
        v33 = *(_DWORD *)(v32 + 8) + 1;
      else
        v33 = 1;
      v31 = (uint64_t)v17;
      if (v33 <= _dispatch_continuation_cache_limit)
      {
        v31 = 0;
        *((_QWORD *)v17 + 2) = v32;
        v17[2] = v33;
        *(_QWORD *)(StatusReg + 176) = v17;
      }
    }
    else
    {
      v31 = 0;
    }
    if ((v21 & 8) != 0)
    {
      v37 = *(_QWORD *)(**((_QWORD **)v17 + 6) + 40);
      if (v37 != 514)
        _dispatch_queue_override_invoke_cold_1(v37);
      group = *((_QWORD *)v17 + 6);
      v39 = (void (*)(void (**)(void)))*((_QWORD *)v17 + 4);
      v38 = (_QWORD *)*((_QWORD *)v17 + 5);
      v40 = (void (__cdecl *)(void *))v39;
      if (v38)
      {
        v40 = (void (__cdecl *)(void *))*((_QWORD *)v17 + 4);
        if (v39 == _dispatch_call_block_and_release)
          v40 = (void (__cdecl *)(void *))v38[2];
      }
      _dispatch_introspection_callout_entry(*((void **)v17 + 5), v40);
      _dispatch_client_callout((uint64_t)v38, (uint64_t (*)(void))v39);
      _dispatch_introspection_callout_return(v38, v40);
      if (MEMORY[0xFFFFFC100])
        kdebug_trace(772079660, v17, 0, 0, 0);
      _dispatch_introspection_queue_item_complete(v17);
      dispatch_group_leave(group);
      if (!v31)
      {
LABEL_95:
        if (!v20)
          goto LABEL_97;
LABEL_96:
        v20[1](&_dispatch_main_q);
        goto LABEL_97;
      }
    }
    else
    {
      v35 = (void (*)(void (**)(void)))*((_QWORD *)v17 + 4);
      v34 = (_QWORD *)*((_QWORD *)v17 + 5);
      v36 = (void (__cdecl *)(void *))v35;
      if (v34)
      {
        v36 = (void (__cdecl *)(void *))*((_QWORD *)v17 + 4);
        if (v35 == _dispatch_call_block_and_release)
          v36 = (void (__cdecl *)(void *))v34[2];
      }
      _dispatch_introspection_callout_entry(*((void **)v17 + 5), v36);
      _dispatch_client_callout((uint64_t)v34, (uint64_t (*)(void))v35);
      _dispatch_introspection_callout_return(v34, v36);
      if (MEMORY[0xFFFFFC100])
        kdebug_trace(772079660, v17, 0, 0, 0);
      _dispatch_introspection_queue_item_complete(v17);
      if (!v31)
        goto LABEL_95;
    }
    _dispatch_continuation_free_to_cache_limit(v31);
    if (v20)
      goto LABEL_96;
LABEL_97:
    v17 = (int *)v19;
  }
  while (v19);
  (*(void (**)(__objc2_class **, _QWORD, _QWORD))((char *)&stru_20.filesize + (_QWORD)_dispatch_main_q))(&_dispatch_main_q, 0, 0);
  *(_QWORD *)(StatusReg + 200) = v48 & 0xFFF0FFFF;
  v41 = v49 & 0xFFFFFFFF02FFFFFFLL;
  if (v49 == -1)
    v42 = 0;
  else
    v42 = v49 & 0xFFFFFFFF02FFFFFFLL;
  v43 = *(_QWORD *)(StatusReg + 32);
  if ((v43 & 0x1000000) != 0)
  {
    v45 = (_OWORD *)(StatusReg + 160);
    v44 = v50;
    if (!v42)
    {
      v42 = v43 & 0xFFFFFFFFFEFFFFFFLL;
      goto LABEL_134;
    }
LABEL_137:
    _dispatch_set_priority_and_voucher_slow(v41, v44, 6);
  }
  else
  {
    v45 = (_OWORD *)(StatusReg + 160);
    v44 = v50;
    if (v42 == (v43 & 0xFFFFFFFF77FFFFFFLL))
      goto LABEL_123;
LABEL_134:
    v41 = v42;
    if (v42)
      goto LABEL_137;
LABEL_123:
    if (v44 != (unsigned int *)-1)
    {
      if (*(unsigned int **)(StatusReg + 224) != v44)
      {
        v41 = 0;
        goto LABEL_137;
      }
      if (v44)
        os_release(v44);
    }
  }
  *v45 = v52;
  *(_QWORD *)(StatusReg + 216) = 0;
  *(_QWORD *)(StatusReg + 40) = 0;
  v46 = *(_QWORD *)(StatusReg + 176);
  if (v46)
  {
    *(_QWORD *)(StatusReg + 176) = 0;
    _dispatch_cache_cleanup(v46);
  }
}

uint64_t _dispatch_main_queue_push(uint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t StatusReg;
  unint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a2 + 16) = 0;
  v3 = (unint64_t *)(result + 48);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_QWORD *)(StatusReg + 976) = result + 48;
  do
    v5 = __ldxr(v3);
  while (__stlxr(a2, v3));
  if (v5)
  {
    *(_QWORD *)(v5 + 16) = a2;
    *(_QWORD *)(StatusReg + 976) = 0;
    if (((*(_DWORD *)(result + 84) >> 8) & 0xFu) >= a3)
      v6 = 0;
    else
      v6 = a3;
    if ((*(_DWORD *)(result + 60) & 7) == 0 || (*(_DWORD *)(result + 60) & 7u) < v6)
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)result + 80))(result, v6, 0);
  }
  else
  {
    *(_QWORD *)(result + 104) = a2;
    *(_QWORD *)(StatusReg + 976) = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 80))(result, a3, 2);
  }
  return result;
}

void _dispatch_main_queue_wakeup(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t a4)
{
  if ((*(_DWORD *)(a1 + 80) & 0x40000) != 0)
    _dispatch_runloop_queue_wakeup((_DWORD *)a1, a2, a3, a4);
  else
    _dispatch_lane_wakeup(a1, a2, a3, a4);
}

void dispatch_main(void)
{
  if (_dispatch_root_queues_pred != -1)
    goto LABEL_9;
  while (1)
  {
    if (!pthread_main_np())
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_main() must be called on the main thread";
      __break(1u);
    }
    if (!dword_64E30)
    {
      dword_64E30 = 1;
      _dispatch_main_queue_drain();
      dword_64E30 = 0;
      _dispatch_program_is_probably_callback_driven = 1;
      if (MEMORY[0xFFFFFC100])
        kdebug_trace(735838216, 0, 0, 0, 0);
      pthread_exit(0);
    }
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_main called from a block on the main queue";
    __break(1u);
LABEL_9:
    dispatch_once_f(&_dispatch_root_queues_pred, 0, (dispatch_function_t)_dispatch_root_queues_init_once);
  }
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uintptr_t v6;

  if ((flags & 0xFFFFFFFFFFFFFFF9) != 0 || (~(_BYTE)flags & 6) == 0)
    return 0;
  if (identifier <= -3)
  {
    if (identifier == -32768)
    {
      v3 = 3;
      goto LABEL_17;
    }
    if (identifier != -128)
      goto LABEL_14;
LABEL_11:
    v3 = 6;
    goto LABEL_17;
  }
  switch(identifier)
  {
    case -2:
      goto LABEL_11;
    case 0:
      v3 = 9;
      goto LABEL_17;
    case 2:
      v3 = 12;
      goto LABEL_17;
  }
LABEL_14:
  HIDWORD(v5) = identifier - 5;
  LODWORD(v5) = identifier - 5;
  v4 = v5 >> 2;
  if (v4 > 7 || ((0xBBu >> v4) & 1) == 0)
    return 0;
  v3 = qword_3FFA0[v4];
LABEL_17:
  v6 = (flags >> 1) & 2;
  if ((flags & 2) != 0)
    v6 = 1;
  return (dispatch_queue_global_t)(&_dispatch_root_queues + 16 * (v3 + v6));
}

NSObject *libdispatch_init()
{
  unsigned int v0;
  unint64_t v1;
  int v2;
  _QWORD *StatusReg;
  unint64_t v4;

  if (_dispatch_getenv_BOOL("LIBDISPATCH_STRICT", 0))
    _dispatch_mode |= 1u;
  if (_dispatch_getenv_BOOL("LIBDISPATCH_COOPERATIVE_POOL_STRICT", 0))
    _dispatch_mode |= 4u;
  HIDWORD(v1) = qos_class_main() - 5;
  LODWORD(v1) = HIDWORD(v1);
  v0 = v1 >> 2;
  if (v0 > 7)
    v2 = 0;
  else
    v2 = dword_3FFE0[v0];
  dword_64E14 = v2;
  pthread_key_init_np(20, _dispatch_queue_cleanup);
  pthread_key_init_np(21, _dispatch_frame_cleanup);
  pthread_key_init_np(22, _dispatch_cache_cleanup);
  pthread_key_init_np(23, _dispatch_context_cleanup);
  pthread_key_init_np(27, _dispatch_wlh_cleanup);
  pthread_key_init_np(28, _voucher_thread_cleanup);
  pthread_key_init_np(29, _dispatch_deferred_items_cleanup);
  pthread_key_init_np(115, _os_workgroup_join_token_tsd_cleanup);
  pthread_key_init_np(116, _os_workgroup_tsd_cleanup);
  pthread_key_init_np(123, &_free);
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  StatusReg[20] = &_dispatch_main_q;
  do
    v4 = __ldxr((unint64_t *)&qword_64DF8);
  while (__stxr(v4 & 0xFFFFFFFF00000003 | (4 * ((StatusReg[3] >> 2) & 0x3FFFFFFFLL)), (unint64_t *)&qword_64DF8));
  if ((~*((_DWORD *)StatusReg + 50) & 0xF0000) != 0)
    StatusReg[25] = StatusReg[25] | 0xF0000;
  _dispatch_time_init();
  _dispatch_vtable_init();
  _os_object_init();
  _voucher_init();
  _workgroup_init();
  return _dispatch_introspection_init();
}

void _dispatch_queue_cleanup(__objc2_class **a1, int8x16_t a2)
{
  if (a1 != &_dispatch_main_q)
    _dispatch_queue_cleanup_cold_1((uint64_t)a1);
  _dispatch_queue_cleanup2(a2);
}

void _dispatch_frame_cleanup(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Premature thread exit while a dispatch frame is active";
  qword_61258 = a1;
  __break(1u);
}

uint64_t _dispatch_cache_cleanup(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    do
    {
      v1 = *(_QWORD *)(result + 16);
      _dispatch_continuation_free_to_heap(result);
      result = v1;
    }
    while (v1);
  }
  return result;
}

void _dispatch_context_cleanup(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Premature thread exit while a dispatch context is set";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_wlh_cleanup(uint64_t a1)
{
  unsigned int *v1;
  unsigned int *v2;
  int v3;

  v1 = (unsigned int *)(a1 & 0xFFFFFFFFFFFFFFFELL);
  v2 = v1 + 24;
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 - 1, v2));
  if (v3 <= 0)
  {
    if (v3 < 0)
      _os_object_allows_weak_reference_cold_1();
    *((_QWORD *)v1 + 7) = 0xDEAD000000000000;
    _dispatch_object_dealloc(v1);
  }
}

void _dispatch_deferred_items_cleanup(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Premature thread exit with unhandled deferred items";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_queue_atfork_child()
{
  unint64_t StatusReg;
  unint64_t v1;
  uint64_t v2;
  char *v3;

  if ((dword_64E10 & 0x40000) != 0)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
      v1 = __ldxr((unint64_t *)&qword_64DF8);
    while (__stxr(v1 & 0xFFFFFFFF00000003 | (4 * ((*(_QWORD *)(StatusReg + 24) >> 2) & 0x3FFFFFFFLL)), (unint64_t *)&qword_64DF8));
  }
  if ((_dispatch_unsafe_fork & 1) != 0)
  {
    v2 = 0;
    off_64E28[0] = (_DWORD *)(&stru_B8 + 72);
    qword_64DF0 = 256;
    qword_64EA8 = 256;
    qword_64E70 = 256;
    do
    {
      v3 = (char *)&_dispatch_root_queues + v2;
      *((_QWORD *)v3 + 13) = 256;
      *((_QWORD *)v3 + 6) = 256;
      v2 += 128;
    }
    while (v2 != 2304);
  }
}

void _dispatch_fork_becomes_unsafe_slow()
{
  unsigned __int8 v0;

  do
    v0 = __ldxr((unsigned __int8 *)&_dispatch_unsafe_fork);
  while (__stxr(v0 | 1, (unsigned __int8 *)&_dispatch_unsafe_fork));
  if ((v0 & 2) != 0)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Transition to multithreaded is prohibited";
    __break(1u);
  }
}

uint64_t _dispatch_prohibit_transition_to_multithreaded(uint64_t result)
{
  unsigned __int8 v1;
  unsigned __int8 v2;

  if ((result & 1) == 0)
    goto LABEL_5;
  do
    v1 = __ldxr((unsigned __int8 *)&_dispatch_unsafe_fork);
  while (__stxr(v1 | 2, (unsigned __int8 *)&_dispatch_unsafe_fork));
  if ((v1 & 1) != 0)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: The executable is already multithreaded";
    __break(1u);
    do
LABEL_5:
      v2 = __ldxr((unsigned __int8 *)&_dispatch_unsafe_fork);
    while (__stxr(v2 & 0xFD, (unsigned __int8 *)&_dispatch_unsafe_fork));
  }
  return result;
}

void _dispatch_block_async_invoke2(_QWORD *aBlock, const char *a2)
{
  char v2;
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t *v9;
  unsigned int *v10;
  int v11;

  v2 = (char)a2;
  v3 = aBlock;
  if ((void (*)(uint64_t))aBlock[2] == ___dispatch_block_create_block_invoke)
  {
    v4 = (char *)(aBlock + 4);
    v5 = aBlock[4];
    if (v5 != 3512316172)
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption of dispatch block object";
      qword_61258 = v5;
      __break(1u);
      goto LABEL_26;
    }
  }
  else
  {
    v4 = 0;
  }
  v6 = *((unsigned int *)v4 + 4);
  if ((v6 & 4) != 0)
  {
    v11 = *((_DWORD *)v4 + 4);
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: A block object may not be both run more than once and waited for";
    qword_61258 = v6;
    __break(1u);
  }
  else
  {
    if ((v6 & 1) == 0)
      (*(void (**)(void))(*((_QWORD *)v4 + 5) + 16))();
    if ((v6 & 8) == 0)
    {
      v7 = (unsigned int *)(v4 + 20);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      if (!v8)
        dispatch_group_leave(*((dispatch_group_t *)v4 + 6));
    }
    v9 = (unint64_t *)(v4 + 56);
    do
      aBlock = (_QWORD *)__ldxr(v9);
    while (__stxr(0, v9));
    if (!aBlock)
      goto LABEL_19;
    if (*((_DWORD *)aBlock + 2) == 0x7FFFFFFF)
      goto LABEL_19;
    v10 = (unsigned int *)(aBlock + 1);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
    if (v11 > 2)
    {
LABEL_19:
      if ((v2 & 1) == 0)
        return;
LABEL_24:
      _Block_release(v3);
      return;
    }
  }
  if (v11 != 2)
  {
LABEL_26:
    qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
    __break(1u);
    return;
  }
  _os_object_dispose(aBlock, a2);
  if ((v2 & 1) != 0)
    goto LABEL_24;
}

void _dispatch_lane_non_barrier_complete(unsigned __int16 *a1, uint64_t a2, int8x16_t a3)
{
  unint64_t StatusReg;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int *v14;
  int v15;
  NSObject *v16;
  NSObject *v17;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
  v6 = (unint64_t *)(a1 + 28);
  do
  {
    v7 = __ldxr(v6);
    v8 = v7 - 0x20000000000;
    if ((v7 & 0xFFFFFFFC) != 0)
    {
      v8 |= 0x8000000000uLL;
    }
    else if (!(v8 >> 53))
    {
      if ((v7 & 0x10000000000) != 0)
        v9 = v7 - 0x10000000000;
      else
        v9 = v8 + ((unint64_t)a1[40] << 41);
      v10 = (v9 & 0x3FFE0000000000) == 0x20000000000000;
      v11 = ((v9 & 0xFFFFFF7FFFFFFFFFLL) + 0x40000000000000) | v5;
      if (v10)
        v8 = v11;
      else
        v8 |= (v7 >> 39) & 1;
    }
  }
  while (__stxr(v8, v6));
  if ((~v7 & 0x1800000000) == 0)
  {
    v12 = HIDWORD(v7) & 7;
    v13 = *(_DWORD *)(StatusReg + 200);
    if ((HIWORD(v13) & 0xF) < v12)
      *(_QWORD *)(StatusReg + 200) = v13 & 0xFFF0FFFF | ((_DWORD)v12 << 16);
  }
  if (((v8 ^ v7) & 0x40000000000000) != 0)
  {
    _dispatch_lane_barrier_complete(a1, 0, a2, a3);
  }
  else if (((v8 ^ v7) & 1) != 0)
  {
    if ((a2 & 1) != 0)
      goto LABEL_26;
    if (*((_DWORD *)a1 + 2) == 0x7FFFFFFF)
      goto LABEL_26;
    v14 = (unsigned int *)(a1 + 4);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 2, v14));
    if (v15 > 0)
    {
LABEL_26:
      v16 = *((_QWORD *)a1 + 3);
      if (MEMORY[0xFFFFFC100])
      {
        v17 = *((_QWORD *)a1 + 3);
        _dispatch_trace_item_push_internal(v16, a1, a3);
        v16 = v17;
      }
      _dispatch_introspection_queue_item_enqueue(v16, a1);
      (*(void (**)(_QWORD, unsigned __int16 *, unint64_t))(**((_QWORD **)a1 + 3) + 88))(*((_QWORD *)a1 + 3), a1, HIDWORD(v8) & 7);
    }
    else
    {
      qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
    }
  }
  else if ((a2 & 1) != 0)
  {
    _os_object_release_internal_n(a1, (_BYTE *)&dword_0 + 2);
  }
}

double _dispatch_sync_f_slow(unsigned __int16 *a1, _QWORD *context, uint64_t (*function)(void), unint64_t a4, uint64_t a5, uint64_t a6, int8x16_t a7)
{
  NSObject *StatusReg;
  Class isa;
  int8x16_t v14;
  double result;
  NSObject v16[7];
  unsigned __int16 *v17;
  uint64_t (*v18)(void);
  void *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;

  if (!*(_QWORD *)(a5 + 24))
    return _dispatch_sync_function_invoke(a5, context, function);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  isa = StatusReg[4].isa;
  v24 = 0;
  v16[0].isa = (Class)(a6 | 1);
  v16[1].isa = (Class)((unint64_t)isa | 0x10000000);
  v16[2].isa = 0;
  v16[3] = StatusReg[28];
  v16[4].isa = (Class)_dispatch_async_and_wait_invoke;
  v16[5].isa = (Class)v16;
  v16[6].isa = 0;
  v17 = a1;
  v18 = function;
  v20 = 0;
  v21 = 0;
  v19 = context;
  v22 = 0;
  v23 = (int)StatusReg[3].isa;
  if (MEMORY[0xFFFFFC100])
    _dispatch_trace_item_push_internal(a1, v16, a7);
  _dispatch_introspection_queue_item_enqueue(a1, v16);
  __DISPATCH_WAIT_FOR_QUEUE__((uint64_t)v16, a5);
  if (v18)
  {
    if (byte_61298)
      _dispatch_introspection_order_record((uint64_t)a1);
    if (MEMORY[0xFFFFFC100])
      _dispatch_trace_item_pop_internal(a1, v16, v14);
    _dispatch_introspection_queue_item_dequeue(a1, v16);
    _dispatch_sync_invoke_and_complete_recurse(a1, context, function, a4, v16);
  }
  else
  {
    _dispatch_sync_complete_recurse(a1, v17, a4, v14);
  }
  return result;
}

double _dispatch_sync_recurse(uint64_t a1, _QWORD *context, uint64_t (*function)(void), unint64_t a4, int8x16_t a5)
{
  unint64_t StatusReg;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  double result;
  uint64_t v18;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
  while (2)
  {
    if (*(_WORD *)(v10 + 80) == 1)
    {
      v12 = (unint64_t *)(v10 + 56);
      while (1)
      {
        v13 = __ldaxr(v12);
        if (v13 != (v13 & 0x3000000000 | 0x1FFE0000000000))
          break;
        if (!__stxr(v11 | v13 & 0x3000000000 | 0x60000000000002, v12))
          goto LABEL_6;
      }
      __clrex();
      v18 = 2;
      return _dispatch_sync_f_slow((unsigned __int16 *)a1, context, function, a4, v10, v18, a5);
    }
    if (*(_QWORD *)(v10 + 48))
    {
LABEL_19:
      v18 = 0;
      return _dispatch_sync_f_slow((unsigned __int16 *)a1, context, function, a4, v10, v18, a5);
    }
    v14 = (unint64_t *)(v10 + 56);
    do
    {
      v15 = __ldxr(v14);
      if ((v15 & 0xFFC0018000000000) != 0)
      {
        __clrex();
        goto LABEL_19;
      }
    }
    while (__stxr(v15 + 0x20000000000, v14));
LABEL_6:
    v10 = *(_QWORD *)(v10 + 24);
    if (*(_QWORD *)(v10 + 24))
      continue;
    break;
  }
  if (byte_61298)
    _dispatch_introspection_order_record(a1);
  v16 = _dispatch_introspection_queue_fake_sync_push_pop(a1, (uint64_t)context, (uint64_t)function, a4);
  _dispatch_sync_invoke_and_complete_recurse((unsigned __int16 *)a1, context, function, a4, v16);
  return result;
}

void _dispatch_lane_barrier_sync_invoke_and_complete(uint64_t a1, _QWORD *context, uint64_t (*function)(void), NSObject *a4)
{
  unint64_t StatusReg;
  _OWORD *v9;
  void (__cdecl *v10)(void *);
  int8x16_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v9 = (_OWORD *)(StatusReg + 160);
  v14 = *(_OWORD *)(StatusReg + 160);
  *(_QWORD *)(StatusReg + 160) = a1;
  *(_QWORD *)(StatusReg + 168) = &v14;
  v10 = (void (__cdecl *)(void *))function;
  if (context)
  {
    v10 = (void (__cdecl *)(void *))function;
    if ((char *)function == (char *)_dispatch_call_block_and_release)
      v10 = (void (__cdecl *)(void *))context[2];
  }
  _dispatch_introspection_callout_entry(context, v10);
  _dispatch_client_callout((uint64_t)context, function);
  _dispatch_introspection_callout_return(context, v10);
  *v9 = v14;
  if (MEMORY[0xFFFFFC100])
    kdebug_trace(772079660, a4, 0, 0, 0);
  _dispatch_introspection_queue_item_complete(a4);
  if (!*(_QWORD *)(a1 + 48) && *(unsigned __int16 *)(a1 + 80) < 2u)
  {
    v12 = (unint64_t *)(a1 + 56);
    while (1)
    {
      v13 = __ldxr(v12);
      if ((v13 & 0xFF80008800000001) != 0)
        break;
      if (!__stlxr((v13 & 0xFFFFFFF000000001) - 0x40020000000000, v12))
        return;
    }
    __clrex();
  }
  _dispatch_lane_barrier_complete((unsigned __int16 *)a1, 0, 0, v11);
}

unsigned int *_dispatch_async_and_wait_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  unint64_t StatusReg;
  _OWORD *v5;
  _QWORD *v6;
  void (*v7)(void (**)(void));
  void (__cdecl *v8)(void *);
  unsigned int *result;
  unsigned int v10;
  __int128 v11;

  v2 = *(_QWORD *)(a1 + 56);
  if ((*(_BYTE *)(a1 + 106) & 1) != 0)
    v3 = objc_autoreleasePoolPush();
  else
    v3 = 0;
  if (byte_61298)
    _dispatch_introspection_order_record(v2);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = (_OWORD *)(StatusReg + 160);
  v11 = *(_OWORD *)(StatusReg + 160);
  *(_QWORD *)(StatusReg + 160) = v2;
  *(_QWORD *)(StatusReg + 168) = a1 + 80;
  v7 = *(void (**)(void (**)(void)))(a1 + 64);
  v6 = *(_QWORD **)(a1 + 72);
  v8 = (void (__cdecl *)(void *))v7;
  if (v6)
  {
    v8 = *(void (__cdecl **)(void *))(a1 + 64);
    if (v7 == _dispatch_call_block_and_release)
      v8 = (void (__cdecl *)(void *))v6[2];
  }
  _dispatch_introspection_callout_entry(*(void **)(a1 + 72), v8);
  _dispatch_client_callout((uint64_t)v6, (uint64_t (*)(void))v7);
  _dispatch_introspection_callout_return(v6, v8);
  *v5 = v11;
  if (v3)
    objc_autoreleasePoolPop(v3);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)v5;
  *(_QWORD *)(a1 + 64) = 0;
  if (*(_QWORD *)(a1 + 48) != -4)
    return (unsigned int *)_dispatch_event_loop_cancel_waiter(a1);
  result = (unsigned int *)(a1 + 96);
  do
    v10 = __ldxr(result);
  while (__stlxr(v10 + 1, result));
  if (v10)
    return (unsigned int *)_dispatch_thread_event_signal_slow((uint64_t)result);
  return result;
}

void __DISPATCH_WAIT_FOR_QUEUE__(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t StatusReg;
  _QWORD *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  v4 = (unint64_t *)(a2 + 56);
  while (1)
  {
    v5 = __ldxr(v4);
    if ((v5 & 0xFF80002000000002) != 0x2000000002)
      break;
    v5 |= 0x800000000uLL;
    if (!__stxr(v5, v4))
      goto LABEL_4;
  }
  __clrex();
LABEL_4:
  if ((*(_DWORD *)(a1 + 100) ^ v5) <= 3)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_sync called on queue already owned by current thread";
    qword_61258 = v5;
    __break(1u);
    return;
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(StatusReg + 160);
  if ((v5 & 0xFF80001000000000) != 0)
  {
    *(_QWORD *)(a1 + 48) = -4;
    v7 = (_QWORD *)(a1 + 48);
LABEL_7:
    v8 = *(_DWORD *)(StatusReg + 200);
    v9 = (v8 >> 8) & 0xF;
    v10 = (unsigned __int16)v8 >> 12;
    v11 = HIWORD(v8) & 0xF;
    if (v9 <= v10)
      v9 = v10;
    if (v9 > v11)
      LOBYTE(v11) = v9;
    *(_BYTE *)(a1 + 105) = v11;
    *(_BYTE *)(a1 + 104) = v11;
    *(_DWORD *)(a1 + 96) = 0;
    goto LABEL_16;
  }
  if ((v5 & 0x2000000000) != 0)
  {
    *(_QWORD *)(a1 + 48) = a2;
    v12 = a2;
  }
  else
  {
    _dispatch_wait_compute_wlh(a2, a1);
    v12 = *(_QWORD *)(a1 + 48);
  }
  v7 = (_QWORD *)(a1 + 48);
  if (v12 == -4)
    goto LABEL_7;
LABEL_16:
  *(_QWORD *)(StatusReg + 968) = a1;
  v13 = __clz(__rbit32((*(_DWORD *)(a1 + 8) >> 8) & 0x3FFF));
  if (((*(_DWORD *)(a1 + 8) >> 8) & 0x3FFF) != 0)
    v14 = v13 + 1;
  else
    v14 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a1, v14);
  _dispatch_introspection_runtime_event();
  if (*(_QWORD *)(a1 + 48) == -4)
  {
    v15 = (unsigned int *)(a1 + 96);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stxr(v17, v15));
    if (v17)
      _dispatch_thread_event_wait_slow(v15);
  }
  else if ((*(_BYTE *)(a1 + 106) & 8) == 0)
  {
    _dispatch_event_loop_wait_for_ownership(a1);
  }
  *(_QWORD *)(StatusReg + 968) = 0;
  if (*v7 == -4)
  {
    v18 = *(unsigned __int8 *)(a1 + 105);
    if (v18 > *(unsigned __int8 *)(a1 + 104))
    {
      v19 = *(_DWORD *)(StatusReg + 200);
      if ((HIWORD(v19) & 0xF) < v18)
        *(_QWORD *)(StatusReg + 200) = v19 & 0xFFF0FFFF | (v18 << 16);
    }
  }
}

void _dispatch_sync_complete_recurse(unsigned __int16 *a1, unsigned __int16 *a2, unint64_t a3, int8x16_t a4)
{
  uint64_t v6;

  v6 = (a3 >> 1) & 1;
  do
  {
    if (a1 == a2)
      break;
    if ((v6 & 1) != 0)
      (*(void (**)(unsigned __int16 *, _QWORD, uint64_t))(*(_QWORD *)a1 + 80))(a1, 0, 4);
    else
      _dispatch_lane_non_barrier_complete(a1, 0, a4);
    a1 = (unsigned __int16 *)*((_QWORD *)a1 + 3);
    LOBYTE(v6) = a1[40] == 1;
  }
  while (*((_QWORD *)a1 + 3));
}

void _dispatch_sync_invoke_and_complete_recurse(unsigned __int16 *a1, _QWORD *context, uint64_t (*function)(void), unint64_t a4, NSObject *a5)
{
  unint64_t StatusReg;
  _OWORD *v11;
  void (__cdecl *v12)(void *);
  int8x16_t v13;
  __int128 v14;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v11 = (_OWORD *)(StatusReg + 160);
  v14 = *(_OWORD *)(StatusReg + 160);
  *(_QWORD *)(StatusReg + 160) = a1;
  *(_QWORD *)(StatusReg + 168) = &v14;
  v12 = (void (__cdecl *)(void *))function;
  if (context)
  {
    v12 = (void (__cdecl *)(void *))function;
    if ((char *)function == (char *)_dispatch_call_block_and_release)
      v12 = (void (__cdecl *)(void *))context[2];
  }
  _dispatch_introspection_callout_entry(context, v12);
  _dispatch_client_callout((uint64_t)context, function);
  _dispatch_introspection_callout_return(context, v12);
  *v11 = v14;
  if (MEMORY[0xFFFFFC100])
    kdebug_trace(772079660, a5, 0, 0, 0);
  _dispatch_introspection_queue_item_complete(a5);
  _dispatch_sync_complete_recurse(a1, 0, a4, v13);
}

unsigned int *_dispatch_wait_compute_wlh(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int *result;
  unint64_t *v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t StatusReg;
  unsigned int v16;
  unsigned int v17;

  v4 = *(_DWORD *)(a1 + 80);
  if ((v4 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 106) |= 0x40u;
    v5 = (unsigned int *)(a1 + 100);
    v6 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFC;
    while (!__ldaxr(v5))
    {
      if (!__stxr(v6, v5))
        goto LABEL_7;
    }
    __clrex();
    _dispatch_unfair_lock_lock_slow((uint64_t)v5, 0x10000);
  }
LABEL_7:
  v8 = (unsigned int *)(a1 + 80);
  result = *(unsigned int **)(a1 + 24);
  v10 = (unint64_t *)(result + 14);
  while (1)
  {
    v11 = __ldxr(v10);
    if (v11 >> 55)
    {
      __clrex();
      goto LABEL_23;
    }
    if ((~v11 & 0x2000000002) != 0)
      break;
    v11 |= 0x800000000uLL;
    if (!__stxr(v11, v10))
    {
      if ((v11 & 0x1000000000) == 0)
        goto LABEL_12;
LABEL_23:
      *(_BYTE *)(a2 + 106) &= ~0x40u;
      *(_QWORD *)(a2 + 48) = -4;
      goto LABEL_24;
    }
  }
  __clrex();
  if ((v11 & 0x1000000000) != 0)
    goto LABEL_23;
LABEL_12:
  if ((v11 & 0x2000000000) != 0)
  {
    if (*(_BYTE *)(*(_QWORD *)result + 40) == 18)
    {
      *(_BYTE *)(a2 + 106) = *(_BYTE *)(a2 + 106) & 0xAF | 0x10;
    }
    else if ((*(_BYTE *)(a2 + 106) & 0x40) != 0)
    {
      v12 = result + 24;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      if ((v13 & 0x80000000) != 0)
        dispatch_set_target_queue_cold_2();
    }
    *(_QWORD *)(a2 + 48) = result;
  }
  else
  {
    result = (unsigned int *)_dispatch_wait_compute_wlh();
  }
LABEL_24:
  if ((v4 & 0x400000) != 0)
  {
    if ((*(_BYTE *)(a2 + 106) & 0x10) != 0)
    {
      do
        v14 = __ldxr(v8);
      while (__stxr(v14 & 0xFFBFFFFF, v8));
    }
    result = (unsigned int *)(a1 + 100);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v16 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    do
      v17 = __ldxr(result);
    while (__stlxr(0, result));
    if (v17 != v16)
    {
      result = (unsigned int *)_dispatch_unfair_lock_unlock_slow((uint64_t)result, v17);
      if ((v17 & 2) != 0 && (*(_QWORD *)(StatusReg + 200) & 0xF0000) == 0)
        *(_QWORD *)(StatusReg + 200) = *(_QWORD *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
    }
  }
  return result;
}

void _dispatch_sync_invoke_and_complete(unsigned __int16 *a1, _QWORD *context, uint64_t (*function)(void), NSObject *a4)
{
  unint64_t StatusReg;
  _OWORD *v9;
  void (__cdecl *v10)(void *);
  int8x16_t v11;
  __int128 v12;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v9 = (_OWORD *)(StatusReg + 160);
  v12 = *(_OWORD *)(StatusReg + 160);
  *(_QWORD *)(StatusReg + 160) = a1;
  *(_QWORD *)(StatusReg + 168) = &v12;
  v10 = (void (__cdecl *)(void *))function;
  if (context)
  {
    v10 = (void (__cdecl *)(void *))function;
    if ((char *)function == (char *)_dispatch_call_block_and_release)
      v10 = (void (__cdecl *)(void *))context[2];
  }
  _dispatch_introspection_callout_entry(context, v10);
  _dispatch_client_callout((uint64_t)context, function);
  _dispatch_introspection_callout_return(context, v10);
  *v9 = v12;
  if (MEMORY[0xFFFFFC100])
    kdebug_trace(772079660, a4, 0, 0, 0);
  _dispatch_introspection_queue_item_complete(a4);
  _dispatch_lane_non_barrier_complete(a1, 0, v11);
}

void _dispatch_async_and_wait_recurse(uint64_t a1, NSObject *a2, int a3, unint64_t a4, int8x16_t a5)
{
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  if (MEMORY[0xFFFFFC100])
    _dispatch_trace_item_push_internal((_QWORD *)a1, a2, a5);
  _dispatch_introspection_queue_item_enqueue(a1, a2);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = a1;
  if ((*(_DWORD *)(a1 + 80) & 0x1000000) != 0)
    goto LABEL_37;
  v11 = (_DWORD *)(a1 + 80);
  v12 = a1;
  v13 = a4;
LABEL_5:
  if ((v9 & 0x3000000000) != 0)
  {
    v14 = *(_QWORD *)(v12 + 24);
    if (v14 < (unint64_t)&_dispatch_root_queues || v14 >= (unint64_t)&_dispatch_queue_serial_numbers)
    {
      v10 = v12;
LABEL_37:
      a2->isa = (Class)((unint64_t)a2->isa & ~0x80uLL);
      a2[7].isa = (Class)v10;
      v12 = v10;
      goto LABEL_34;
    }
  }
  if ((v13 & 2) != 0)
  {
    v16 = (unint64_t)*(unsigned __int16 *)(v12 + 80) << 41;
    v17 = (unint64_t *)(v12 + 56);
    while (1)
    {
      v18 = __ldaxr(v17);
      if (v18 != (v18 & 0x3000000000) - v16 + 0x20000000000000)
        break;
      if (!__stxr(v18 & 0x3000000000 | a3 & 0xFFFFFFFC | 0x60000000000002, v17))
        goto LABEL_14;
    }
LABEL_33:
    __clrex();
    goto LABEL_34;
  }
  if (!*(_QWORD *)(v12 + 48))
  {
    v23 = (unint64_t *)(v12 + 56);
    while (1)
    {
      v24 = __ldxr(v23);
      if ((v24 & 0xFFC0018000000000) != 0)
        goto LABEL_33;
      if (!__stxr(v24 + 0x20000000000, v23))
      {
LABEL_14:
        v19 = *(_DWORD *)(v12 + 84) & 0xFFF;
        if (v19)
        {
          v20 = v19 >= 0x100 ? 256 << (BYTE1(v19) - 1) : 0;
          v21 = v20 & 0xFFFFFFFFFFFFFF00 | *(_DWORD *)(v12 + 84);
          if (v21 > ((unint64_t)a2[1].isa & 0xFFFFFF))
            a2[1].isa = (Class)(v21 | 0x10000000);
        }
        if ((BYTE2(a2[13].isa) & 3) == 0)
          BYTE2(a2[13].isa) = BYTE2(a2[13].isa) & 0xFC | HIWORD(*v11) & 3;
        v10 = *(_QWORD *)(v12 + 24);
        if (!*(_QWORD *)(v10 + 24))
        {
          _dispatch_async_and_wait_invoke_and_complete_recurse(a1, (uint64_t)a2, v12, a4);
          return;
        }
        v11 = (_DWORD *)(v10 + 80);
        v22 = v13 & 0xFFFFFFFFFFFFFFFDLL;
        v13 |= 2uLL;
        if (*(_WORD *)(v10 + 80) != 1)
          v13 = v22;
        a2->isa = (Class)v13;
        v9 = *(_QWORD *)(v10 + 56);
        v12 = v10;
        if ((*(_DWORD *)(v10 + 80) & 0x1000000) == 0)
          goto LABEL_5;
        goto LABEL_37;
      }
    }
  }
LABEL_34:
  _dispatch_async_and_wait_f_slow(a1, a4, (uint64_t)a2, v12);
}

void _dispatch_async_and_wait_f_slow(NSObject *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  int8x16_t v7;

  __DISPATCH_WAIT_FOR_QUEUE__(a3, a4);
  if (*(_QWORD *)(a3 + 64))
    _dispatch_async_and_wait_invoke_and_complete_recurse(a1, a3, *(_QWORD *)(a3 + 56), a2);
  else
    _dispatch_sync_complete_recurse((unsigned __int16 *)a1, *(unsigned __int16 **)(a3 + 56), a2, v7);
}

void _dispatch_async_and_wait_invoke_and_complete_recurse(NSObject *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t StatusReg;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  int8x16_t v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int16 *v19;
  _QWORD *v20;
  void (*v21)(void (**)(void));
  void (__cdecl *v22)(void *);
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  int8x16_t v27;
  _BOOL4 v28;
  uint64_t v29;
  unint64_t v30;
  void *context;
  int8x16_t v32;

  if (*(_BYTE *)(*(_QWORD *)a3 + 40) != 18 && (*(_QWORD *)(a3 + 56) & 0x2000000000) == 0)
    a3 = -4;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v8 = *(_QWORD *)(StatusReg + 216);
  *(_QWORD *)(StatusReg + 216) = a3;
  if ((*(_BYTE *)(a2 + 106) & 1) != 0)
    v9 = objc_autoreleasePoolPush();
  else
    v9 = 0;
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(void **)(a2 + 24);
  if (byte_61298)
    _dispatch_introspection_order_record((uint64_t)a1);
  v12 = *(int8x16_t *)(StatusReg + 160);
  v32 = v12;
  *(_QWORD *)(StatusReg + 160) = a1;
  *(_QWORD *)(StatusReg + 168) = &v32;
  v13 = *(_QWORD *)(StatusReg + 32);
  v14 = (v13 & 0xFFFFFFuLL) >= (v10 & 0xFFFFFFuLL) || (v13 & 0xFFFFFF) == 0;
  if (v14)
    v15 = 0;
  else
    v15 = v13 & 0xFFFFFF;
  v16 = v10 & 0xFFFFFFFF02FFFFFFLL;
  if (v14)
    v17 = 0;
  else
    v17 = v10 & 0xFFFFFFFF02FFFFFFLL;
  v30 = v15;
  context = v9;
  v29 = v13 & 0xFFFFFF;
  v28 = v14;
  if ((v13 & 0x1000000) != 0)
  {
    if (v17)
      goto LABEL_50;
    v17 = v13 & 0xFFFFFFFFFEFFFFFFLL;
    goto LABEL_43;
  }
  if (v17 != (v13 & 0xFFFFFFFF77FFFFFFLL))
  {
LABEL_43:
    v16 = v17;
    if (v17)
      goto LABEL_50;
  }
  if (v11 == (void *)-1)
  {
LABEL_22:
    v18 = v8;
    goto LABEL_23;
  }
  if (*(void **)(StatusReg + 224) == v11)
  {
    if (v11)
    {
      v18 = v8;
      os_retain(v11);
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  v16 = 0;
LABEL_50:
  v18 = v8;
  v11 = (void *)_dispatch_set_priority_and_voucher_slow(v16, (unsigned int *)v11, 0);
LABEL_23:
  if (MEMORY[0xFFFFFC100])
    _dispatch_trace_item_pop_internal(a1, (_QWORD *)a2, v12);
  v19 = (unsigned __int16 *)a1;
  _dispatch_introspection_queue_item_dequeue(a1, a2);
  v21 = *(void (**)(void (**)(void)))(a2 + 64);
  v20 = *(_QWORD **)(a2 + 72);
  v22 = (void (__cdecl *)(void *))v21;
  if (v20)
  {
    v22 = *(void (__cdecl **)(void *))(a2 + 64);
    if (v21 == _dispatch_call_block_and_release)
      v22 = (void (__cdecl *)(void *))v20[2];
  }
  _dispatch_introspection_callout_entry(*(void **)(a2 + 72), v22);
  _dispatch_client_callout((uint64_t)v20, (uint64_t (*)(void))v21);
  _dispatch_introspection_callout_return(v20, v22);
  v23 = *(_QWORD *)(StatusReg + 32);
  if ((v23 & 0x1000000) != 0)
  {
    v25 = a4;
    v26 = context;
    v24 = v29;
    if (!v28)
    {
LABEL_52:
      _dispatch_set_priority_and_voucher_slow(v24, (unsigned int *)v11, 6);
      goto LABEL_34;
    }
    v24 = v23 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else
  {
    v24 = v30;
    v25 = a4;
    v26 = context;
    if (v30 == (v23 & 0xFFFFFFFF77FFFFFFLL))
      goto LABEL_30;
  }
  if (v24)
    goto LABEL_52;
LABEL_30:
  if (v11 == (void *)-1)
    goto LABEL_34;
  if (*(void **)(StatusReg + 224) != v11)
  {
    v24 = 0;
    goto LABEL_52;
  }
  if (v11)
    os_release(v11);
LABEL_34:
  *(int8x16_t *)(StatusReg + 160) = v32;
  if (v26)
    objc_autoreleasePoolPop(v26);
  if (MEMORY[0xFFFFFC100])
    kdebug_trace(772079660, a2, 0, 0, 0);
  _dispatch_introspection_queue_item_complete(a2);
  *(_QWORD *)(StatusReg + 216) = v18;
  _dispatch_sync_complete_recurse(v19, 0, v25, v27);
}

void _dispatch_queue_specific_head_dispose(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD v7[2];

  v3 = a1 + 1;
  v2 = (_QWORD *)a1[1];
  if (!v2)
    goto LABEL_9;
  v2[4] = v7;
  v4 = a1[2];
  v7[0] = v2;
  v7[1] = v4;
  a1[1] = 0;
  a1[2] = v3;
  do
  {
    v5 = (_QWORD *)v2[3];
    if (v2[2])
    {
      v2[3] = 0;
      v6 = (_QWORD *)a1[2];
      v2[4] = v6;
      *v6 = v2;
      a1[2] = v2 + 3;
    }
    else
    {
      free(v2);
    }
    v2 = v5;
  }
  while (v5);
  if (*v3)
    _dispatch_barrier_async_detached_f(&off_65340, (objc_class *)a1, (objc_class *)_dispatch_queue_specific_head_dispose_slow);
  else
LABEL_9:
    free(a1);
}

void _dispatch_queue_specific_head_dispose_slow(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  void (*v4)(void (**)(void));
  BOOL v5;
  void (__cdecl *v6)(void *);
  uint64_t v7;

  v2 = a1[1];
  if (v2)
  {
    do
    {
      v3 = *(_QWORD **)(v2 + 8);
      v4 = *(void (**)(void (**)(void)))(v2 + 16);
      v5 = v4 != _dispatch_call_block_and_release || v3 == 0;
      v6 = *(void (__cdecl **)(void *))(v2 + 16);
      if (!v5)
        v6 = (void (__cdecl *)(void *))v3[2];
      v7 = *(_QWORD *)(v2 + 24);
      _dispatch_introspection_callout_entry(*(void **)(v2 + 8), v6);
      _dispatch_client_callout((uint64_t)v3, (uint64_t (*)(void))v4);
      _dispatch_introspection_callout_return(v3, v6);
      free((void *)v2);
      v2 = v7;
    }
    while (v7);
  }
  free(a1);
}

unsigned int *_dispatch_non_barrier_waiter_redirect_or_wake(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

LABEL_1:
  v2 = *(_QWORD *)(a1 + 56);
  if ((BYTE4(v2) & 7u) > *(unsigned __int8 *)(a2 + 105))
    *(_BYTE *)(a2 + 105) = BYTE4(v2) & 7;
  v3 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 0x80) != 0)
  {
    v4 = *(_DWORD *)(a1 + 84) & 0xFFF;
    if (v4)
    {
      v5 = v4 >= 0x100 ? 256 << (BYTE1(v4) - 1) : 0;
      v6 = v5 & 0xFFFFFFFFFFFFFF00 | *(_DWORD *)(a1 + 84);
      if (v6 > (*(_QWORD *)(a2 + 8) & 0xFFFFFFuLL))
        *(_QWORD *)(a2 + 8) = v6 | 0x10000000;
    }
    if ((*(_BYTE *)(a2 + 106) & 3) == 0)
      *(_BYTE *)(a2 + 106) = *(_BYTE *)(a2 + 106) & 0xFC | HIWORD(*(_DWORD *)(a1 + 80)) & 3;
    if ((v2 & 0x3000000000) == 0)
      goto LABEL_15;
    *(_QWORD *)(a2 + 56) = a1;
    return _dispatch_waiter_wake_wlh_anon(a2);
  }
  if ((v2 & 0x3000000000) != 0)
    return _dispatch_waiter_wake_wlh_anon(a2);
LABEL_15:
  a1 = *(_QWORD *)(a1 + 24);
  if (*(_WORD *)(a1 + 80) == 1)
  {
    *(_QWORD *)a2 = v3 | 2;
  }
  else
  {
    *(_QWORD *)a2 = v3 & 0xFFFFFFFFFFFFFFFDLL;
    if (!*(_QWORD *)(a1 + 48))
    {
      v7 = (unint64_t *)(a1 + 56);
      while (1)
      {
        v8 = __ldxr(v7);
        if ((v8 & 0xFFC0018000000000) != 0)
          break;
        if (!__stxr(v8 + 0x20000000000, v7))
          goto LABEL_1;
      }
      __clrex();
    }
  }
  return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
}

unsigned int *_dispatch_waiter_wake_wlh_anon(uint64_t a1)
{
  unsigned int v2;
  unsigned int *result;
  unsigned int v4;

  v2 = *(unsigned __int8 *)(a1 + 105);
  if (v2 > *(unsigned __int8 *)(a1 + 104))
    _pthread_workqueue_override_start_direct(*(unsigned int *)(a1 + 100), (256 << (v2 - 1)) | 0xFF);
  result = (unsigned int *)(a1 + 96);
  do
    v4 = __ldxr(result);
  while (__stlxr(v4 + 1, result));
  if (v4)
    return (unsigned int *)_dispatch_thread_event_signal_slow((uint64_t)result);
  return result;
}

unsigned int *_dispatch_barrier_waiter_redirect_or_wake(uint64_t a1, uint64_t a2, char a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t StatusReg;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  BOOL v15;
  signed int v16;
  unsigned int *v17;
  unsigned int v18;
  BOOL v19;
  signed int v20;
  unsigned int *v21;
  unsigned int v22;
  BOOL v23;
  signed int v24;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;

  v8 = a1;
  if (*(_QWORD *)(a2 + 48) == -4 && (BYTE4(a4) & 7u) > *(unsigned __int8 *)(a2 + 105))
    *(_BYTE *)(a2 + 105) = BYTE4(a4) & 7;
  if ((a4 & 0x2000000000) != 0)
  {
    v12 = a1;
    if ((a3 & 1) == 0)
    {
      if ((a4 & 1) == 0)
        goto LABEL_30;
      v12 = a1;
      if ((a5 & 1) != 0)
        goto LABEL_30;
      v12 = a1;
      if (*(_DWORD *)(a1 + 8) == 0x7FFFFFFF)
        goto LABEL_30;
      v13 = (unsigned int *)(a1 + 8);
      do
      {
        v14 = __ldxr(v13);
        v15 = __OFSUB__(v14, 1);
        v16 = v14 - 1;
      }
      while (__stlxr(v16, v13));
      v12 = a1;
      if (!((v16 < 0) ^ v15 | (v16 == 0)))
        goto LABEL_30;
      qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
    }
    if ((a5 & 1) != 0)
      goto LABEL_26;
  }
  else
  {
    if ((~a4 & 0x1800000000) == 0)
    {
      v9 = HIDWORD(a4) & 7;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v11 = *(_DWORD *)(StatusReg + 200);
      if ((HIWORD(v11) & 0xF) < v9)
        *(_QWORD *)(StatusReg + 200) = v11 & 0xFFF0FFFF | ((_DWORD)v9 << 16);
    }
    v12 = -4;
    if ((a3 & 1) == 0)
      goto LABEL_30;
  }
  if (*(_DWORD *)(a1 + 8) == 0x7FFFFFFF)
    goto LABEL_30;
  v17 = (unsigned int *)(a1 + 8);
  do
  {
    v18 = __ldxr(v17);
    v19 = __OFSUB__(v18, 2);
    v20 = v18 - 2;
  }
  while (__stlxr(v20, v17));
  if (!((v20 < 0) ^ v19 | (v20 == 0)))
    goto LABEL_30;
  qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
LABEL_26:
  v12 = a1;
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    v21 = (unsigned int *)(a1 + 8);
    do
    {
      v22 = __ldxr(v21);
      v23 = __OFSUB__(v22, 1);
      v24 = v22 - 1;
    }
    while (__stlxr(v24, v21));
    v12 = a1;
    if ((v24 < 0) ^ v23 | (v24 == 0))
    {
      qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
      goto LABEL_47;
    }
  }
LABEL_30:
  if ((a4 & 0x3000000000) == 0)
  {
    a1 = *(_QWORD *)(a1 + 24);
    v21 = *(unsigned int **)a2;
    if ((*(_QWORD *)a2 & 0x80) != 0)
    {
      v26 = *(_DWORD *)(v8 + 84) & 0xFFF;
      if (v26)
      {
        v27 = v26 >= 0x100 ? 256 << (BYTE1(v26) - 1) : 0;
        v28 = v27 & 0xFFFFFFFFFFFFFF00 | *(_DWORD *)(v8 + 84);
        if (v28 > (*(_QWORD *)(a2 + 8) & 0xFFFFFFuLL))
          *(_QWORD *)(a2 + 8) = v28 | 0x10000000;
      }
      if ((*(_BYTE *)(a2 + 106) & 3) == 0)
        *(_BYTE *)(a2 + 106) = *(_BYTE *)(a2 + 106) & 0xFC | HIWORD(*(_DWORD *)(v8 + 80)) & 3;
    }
    if (*(_WORD *)(a1 + 80) == 1)
    {
      *(_QWORD *)a2 = (unint64_t)v21 | 2;
LABEL_45:
      *(_BYTE *)(a2 + 106) &= ~0x80u;
      return (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)a1 + 88))(a1, a2, HIDWORD(a4) & 7);
    }
LABEL_47:
    *(_QWORD *)a2 = (unint64_t)v21 & 0xFFFFFFFFFFFFFFFDLL;
    if (!*(_QWORD *)(a1 + 48))
    {
      v29 = (unint64_t *)(a1 + 56);
      while (1)
      {
        v30 = __ldxr(v29);
        if ((v30 & 0xFFC0018000000000) != 0)
          break;
        if (!__stxr(v30 + 0x20000000000, v29))
          return _dispatch_non_barrier_waiter_redirect_or_wake(a1, a2);
      }
      __clrex();
    }
    goto LABEL_45;
  }
  _dispatch_introspection_runtime_event();
  if ((*(_BYTE *)a2 & 0x80) != 0)
    *(_QWORD *)(a2 + 56) = v8;
  return _dispatch_waiter_wake(a2, v12, a4, a5);
}

unsigned int *_dispatch_waiter_wake(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int *result;

  v5 = *(_QWORD *)(a1 + 48);
  if (((a3 & 0x2000000000) == 0 || *(char *)(a1 + 106) < 0) && (a4 & 0x2000000000) == 0 && v5 == -4)
    return _dispatch_waiter_wake_wlh_anon(a1);
  result = (unsigned int *)_dispatch_event_loop_wake_owner(a1, a2, a3, a4);
  if (v5 == -4)
    return _dispatch_waiter_wake_wlh_anon(a1);
  return result;
}

void _dispatch_lane_concurrent_drain(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v8;
  unint64_t StatusReg;
  int8x16_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  void (**v28)(uint64_t);
  unint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  _QWORD *v43;
  void (*v44)(void (**)(void));
  void (__cdecl *v45)(void *);
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  void (*v49)(void (**)(void));
  void (__cdecl *v50)(void *);
  unint64_t v51;
  unint64_t v52;
  NSObject v53;
  void (__cdecl *function)(void *);
  NSObject *group;
  int8x16_t *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  void *v64;
  unint64_t *v65;
  uint64_t v66;
  int8x16_t v67;

  v4 = a1[3];
  v5 = *a4;
  v6 = a1 + 6;
  if (a1[6])
  {
    v8 = (uint64_t)a1;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v10 = *(int8x16_t *)(StatusReg + 160);
    v67 = v10;
    *(_QWORD *)(StatusReg + 160) = a1;
    *(_QWORD *)(StatusReg + 168) = &v67;
    if ((v5 & 0x40000000000000) != 0)
      v11 = 0x40000000000000;
    else
      v11 = v5 & 0x3FFE0000000000;
    v12 = a1 + 13;
    v13 = a1[13];
    if (!v13)
      v13 = _dispatch_wait_for_enqueuer(a1 + 13, (uint64_t)v6);
    v57 = (int8x16_t *)(StatusReg + 160);
    if (!(*(_QWORD *)(v8 + 56) >> 55))
    {
      v14 = (unint64_t *)(v8 + 56);
      v58 = (a3 >> 21) & 1;
      v59 = a3 & 0xFFFF0000;
      v62 = a3;
      v61 = v4;
      v65 = v12;
      do
      {
        if (v4 != *(_QWORD *)(v8 + 24))
          break;
        v15 = *(_QWORD *)v13;
        if (*(_QWORD *)v13 >= 0x1000uLL)
        {
          if ((*(_QWORD *)(v15 + 40) & 0xF0) == 0x10 && (*(_DWORD *)(v13 + 80) & 0x80000) != 0)
          {
LABEL_18:
            if (v11 != 0x40000000000000)
            {
              v17 = ((unint64_t)*(unsigned __int16 *)(v8 + 80) << 41) - 0x10000000000;
              do
              {
                v18 = __ldaxr(v14);
                v19 = v18 - v11;
                if ((v18 & 0x10000000000) != 0)
                  v20 = 0;
                else
                  v20 = v17;
                v21 = v20 + v19;
                if (!(v21 >> 53))
                  v21 += 0x40010000000000;
              }
              while (__stxr(v21 & 0xFFFFFF7FFFFFFFFFLL, v14));
              if ((v21 & 0x40000000000000) == 0)
                goto LABEL_174;
              v15 = *(_QWORD *)v13;
            }
            if (v15 <= 0xFFF && (a3 & 0x80000) == 0 && (v15 & 1) != 0)
            {
              *(_QWORD *)(a2 + 8) = v13;
              if ((a3 & 8) == 0)
              {
                *v57 = v67;
                return;
              }
              qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Deferred continuation on source, mach channel or mgr";
              __break(1u);
              goto LABEL_173;
            }
            v22 = *(_QWORD *)(v13 + 16);
            *v12 = v22;
            if (!v22)
            {
              v23 = (unint64_t *)(v13 + 16);
              while (1)
              {
                v24 = __ldxr(v6);
                if (v24 != v13)
                  break;
                if (!__stlxr(0, v6))
                  goto LABEL_55;
              }
              __clrex();
              v22 = *v23;
              if (!*v23)
                v22 = _dispatch_wait_for_enqueuer(v23, (uint64_t)v6);
              *v12 = v22;
            }
LABEL_55:
            v11 = 0x40000000000000;
            goto LABEL_56;
          }
        }
        else if ((v15 & 2) != 0)
        {
          goto LABEL_18;
        }
        if (v11 == 0x40000000000000)
        {
          do
            v16 = __ldxr(v14);
          while (__stlxr(v16 ^ 0x40000000000000, v14));
          v11 = (unint64_t)*(unsigned __int16 *)(v8 + 80) << 41;
        }
        else if (!v11)
        {
          if (v15 > 0xFFF || (v15 & 0x81) == 0)
          {
            while (1)
            {
              v51 = __ldaxr(v14);
              if ((v51 & 0xFFE0018000000000) != 0)
                break;
              if (!__stxr(v51 + 0x20000000000, v14))
              {
                v11 = 0x20000000000;
                goto LABEL_37;
              }
            }
LABEL_173:
            __clrex();
LABEL_174:
            *a4 &= 0x4000000001uLL;
            *v57 = v67;
            return;
          }
          do
          {
            v46 = __ldxr(v14);
            v11 = 0x20000000000;
          }
          while (__stxr(v46 + 0x20000000000, v14));
        }
LABEL_37:
        v22 = *(_QWORD *)(v13 + 16);
        *v12 = v22;
        if (!v22)
        {
          v25 = (unint64_t *)(v13 + 16);
          while (1)
          {
            v26 = __ldxr(v6);
            if (v26 != v13)
              break;
            if (!__stlxr(0, v6))
              goto LABEL_45;
          }
          __clrex();
          v22 = *v25;
          if (!*v25)
            v22 = _dispatch_wait_for_enqueuer(v25, (uint64_t)v6);
          *v12 = v22;
        }
LABEL_45:
        if (*(_QWORD *)v13 <= 0xFFFuLL && (*(_QWORD *)v13 & 0x81) != 0)
        {
          v11 -= 0x20000000000;
          _dispatch_non_barrier_waiter_redirect_or_wake(v8, v13);
          goto LABEL_117;
        }
        if ((a3 & 0x20000) != 0)
        {
          v11 -= 0x20000000000;
          _dispatch_continuation_redirect_push((_DWORD *)v8, (_QWORD *)v13);
          goto LABEL_117;
        }
LABEL_56:
        v66 = v11;
        v28 = *(void (***)(uint64_t))(StatusReg + 192);
        if (v28)
          (*v28)(v8);
        v29 = *(_QWORD *)v13;
        if (*(_QWORD *)v13 >= 0x1000uLL)
        {
          if (*(_QWORD *)(v29 + 40) == 1)
            (*(void (**)(uint64_t, _QWORD, _QWORD))(v29 + 48))(v13, 0, v58);
          else
            (*(void (**)(uint64_t, uint64_t, _QWORD))(v29 + 64))(v13, a2, v59);
          v11 = v66;
          goto LABEL_114;
        }
        if ((a3 & 0x1000000) != 0)
        {
          v64 = objc_autoreleasePoolPush();
          v29 = *(_QWORD *)v13;
        }
        else
        {
          v64 = 0;
        }
        v30 = *(unsigned int **)(v13 + 24);
        if ((v29 & 4) != 0)
          *(_QWORD *)(v13 + 24) = -1;
        if (v30 != (unsigned int *)-1)
        {
          v31 = v30;
          if (v30)
            v31 = (unsigned int *)v30[8];
          if (MEMORY[0xFFFFFC100])
            kdebug_trace(771817480, v31, v13, 0, 0);
        }
        v32 = *(_QWORD *)(v13 + 8);
        if (v32 == -1)
        {
          v35 = 0;
        }
        else
        {
          v33 = *(_QWORD *)(StatusReg + 200);
          if (((v33 >> 8) & 0xF) != 0)
            v34 = 256 << ((BYTE1(v33) & 0xFu) - 1);
          else
            v34 = 0;
          v35 = v34 & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(StatusReg + 200);
          if ((v32 & 0xFFFFFF) != 0)
          {
            if ((v32 & 0xFFFFFFuLL) >= (v34 & 0xFFFFFF00)
              && ((v33 & 0x44000000) != 0 || (*(_QWORD *)(v13 + 8) & 0x10000000) != 0))
            {
              v35 = v32 & 0xFFFFFF;
            }
          }
          else if ((unsigned __int16)v33 >> 12)
          {
            v35 = (256 << (((unsigned __int16)v33 >> 12) - 1)) | 0xFF;
          }
        }
        v37 = v35 & 0xFFFFFFFF02FFFFFFLL;
        v38 = *(_QWORD *)(StatusReg + 32);
        if ((v38 & 0x1000000) != 0)
        {
          if (v37)
            goto LABEL_151;
          v37 = v38 & 0xFFFFFFFFFEFFFFFFLL;
        }
        else if (v37 == (v38 & 0xFFFFFFFF77FFFFFFLL))
        {
          goto LABEL_88;
        }
        if (v37)
          goto LABEL_151;
LABEL_88:
        if (v30 != (unsigned int *)-1)
        {
          if (*(unsigned int **)(StatusReg + 224) != v30)
          {
            v37 = 0;
LABEL_151:
            _dispatch_set_priority_and_voucher_slow(v37, v30, v29 & 4 | 2);
            if ((v29 & 0x200) != 0)
              goto LABEL_97;
            goto LABEL_94;
          }
          if ((v29 & 4) != 0 && v30)
            os_release(v30);
        }
        if ((v29 & 0x200) != 0)
          goto LABEL_97;
LABEL_94:
        if (MEMORY[0xFFFFFC100])
          _dispatch_trace_item_pop_internal((_QWORD *)v8, (_QWORD *)v13, v10);
        _dispatch_introspection_queue_item_dequeue(v8, v13);
LABEL_97:
        if ((v29 & 4) != 0)
        {
          v40 = *(_QWORD *)(StatusReg + 176);
          if (v40)
            v41 = *(_DWORD *)(v40 + 8) + 1;
          else
            v41 = 1;
          v39 = v13;
          if (v41 <= _dispatch_continuation_cache_limit)
          {
            v39 = 0;
            *(_QWORD *)(v13 + 16) = v40;
            *(_DWORD *)(v13 + 8) = v41;
            *(_QWORD *)(StatusReg + 176) = v13;
          }
        }
        else
        {
          v39 = 0;
        }
        v63 = v39;
        if ((v29 & 8) != 0)
        {
          v47 = *(_QWORD *)(**(_QWORD **)(v13 + 48) + 40);
          if (v47 != 514)
          {
            qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected object type";
            qword_61258 = v47;
            __break(1u);
            return;
          }
          group = *(NSObject **)(v13 + 48);
          v49 = *(void (**)(void (**)(void)))(v13 + 32);
          v48 = *(_QWORD **)(v13 + 40);
          v50 = (void (__cdecl *)(void *))v49;
          v11 = v66;
          if (v48)
          {
            v50 = *(void (__cdecl **)(void *))(v13 + 32);
            if (v49 == _dispatch_call_block_and_release)
              v50 = (void (__cdecl *)(void *))v48[2];
          }
          function = v50;
          _dispatch_introspection_callout_entry(*(void **)(v13 + 40), v50);
          _dispatch_client_callout((uint64_t)v48, (uint64_t (*)(void))v49);
          _dispatch_introspection_callout_return(v48, function);
          if (MEMORY[0xFFFFFC100])
            kdebug_trace(772079660, v13, 0, 0, 0);
          _dispatch_introspection_queue_item_complete(v13);
          dispatch_group_leave(group);
          a3 = v62;
          v4 = v61;
        }
        else
        {
          v42 = v8;
          v44 = *(void (**)(void (**)(void)))(v13 + 32);
          v43 = *(_QWORD **)(v13 + 40);
          v45 = (void (__cdecl *)(void *))v44;
          if (v43)
          {
            v45 = *(void (__cdecl **)(void *))(v13 + 32);
            if (v44 == _dispatch_call_block_and_release)
              v45 = (void (__cdecl *)(void *))v43[2];
          }
          _dispatch_introspection_callout_entry(*(void **)(v13 + 40), v45);
          _dispatch_client_callout((uint64_t)v43, (uint64_t (*)(void))v44);
          _dispatch_introspection_callout_return(v43, v45);
          if (MEMORY[0xFFFFFC100])
            kdebug_trace(772079660, v13, 0, 0, 0);
          _dispatch_introspection_queue_item_complete(v13);
          v8 = v42;
          a3 = v62;
          v4 = v61;
          v11 = v66;
        }
        if (v63)
        {
          _dispatch_continuation_free_to_cache_limit(v63);
          if (!v64)
            goto LABEL_114;
LABEL_113:
          objc_autoreleasePoolPop(v64);
          goto LABEL_114;
        }
        if (v64)
          goto LABEL_113;
LABEL_114:
        if (v28)
          v28[1](v8);
        v12 = v65;
LABEL_117:
        v13 = v22;
        if (!v22)
        {
          if (!*v6)
          {
            v13 = 0;
            break;
          }
          v13 = *v12;
          if (!*v12)
            v13 = _dispatch_wait_for_enqueuer(v12, (uint64_t)v6);
        }
        if (*(_QWORD *)(StatusReg + 40))
          _dispatch_return_to_kernel();
      }
      while (*(_WORD *)(v8 + 80) != 1
           && ((a3 & 0x4000000) != 0 || (*(_BYTE *)(StatusReg + 960) & 1) == 0)
           && ((a3 & 0x100000) == 0
            || (*(_DWORD *)(*(_QWORD *)(StatusReg + 216) + 60) & 7u) <= *(unsigned __int8 *)(*(_QWORD *)(StatusReg + 216)
                                                                                             + 100))
           && !(*v14 >> 55));
    }
    if (v11 == 0x40000000000000)
      v11 = ((unint64_t)*(unsigned __int16 *)(v8 + 80) << 41) + 0x40000000000000;
    if (!v13)
    {
      *a4 = *a4 & 0x4000000001 | v11;
      *v57 = v67;
      return;
    }
    v52 = *(unsigned __int16 *)(v8 + 80);
    if (v52 < 2)
    {
LABEL_164:
      *a4 = *a4 & 0x4000000001 | v11;
      *v57 = v67;
      return;
    }
    v53.isa = *(Class *)v13;
    if (*(_QWORD *)v13 < 0x1000uLL)
    {
      if (((uint64_t)v53.isa & 2) == 0)
        goto LABEL_164;
    }
    else if ((*((_QWORD *)v53.isa + 5) & 0xF0) != 0x10 || (*(_DWORD *)(v13 + 80) & 0x80000) == 0)
    {
      goto LABEL_164;
    }
    v11 = v11 - (v52 << 41) + 0x10000000000;
    goto LABEL_164;
  }
}

void _dispatch_workloop_bound_thread_init_once()
{
  int v0;
  size_t v1;
  int v2;

  v2 = 0;
  v1 = 4;
  v0 = sysctlbyname("kern.kern_event.thread_bound_kqwl_support_enabled", &v2, &v1, 0, 0);
  if (v0)
    _dispatch_bug(4220, v0);
  if (v2)
    _dispatch_thread_bound_kqwl_enabled = 1;
}

void _dispatch_workloop_activate_simulator_fallback(uint64_t a1, __int128 *a2)
{
  NSObject *v3;
  unsigned int *v4;
  int v5;
  unint64_t *v6;
  unint64_t v7;

  v3 = _dispatch_pthread_root_queue_create("com.apple.libdispatch.workloop_fallback", 0, a2, 0, 0);
  *(_QWORD *)(a1 + 24) = v3;
  if (LODWORD(v3[1].isa) != 0x7FFFFFFF)
  {
    v4 = (unsigned int *)&v3[1];
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    if (v5 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  dispatch_release(v3);
  v6 = (unint64_t *)(a1 + 56);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 & 0xFFFFFFCFFFFFFFFFLL | 0x1000000000, v6));
}

void _dispatch_queue_wakeup_with_override_slow(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v5;
  int *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v12;
  unsigned int *v13;
  unint64_t StatusReg;
  unsigned int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = HIDWORD(a2) & 7;
  v6 = *(int **)(a1 + 24);
  if ((a2 & 0x1000000000) != 0)
  {
    if (v6 < (int *)&_dispatch_root_queues || v6 >= (int *)&_dispatch_queue_serial_numbers)
      goto LABEL_44;
    if (a2 >= 4)
    {
      v18 = a2 | 3;
      if ((_DWORD)v5)
        v19 = (256 << ((BYTE4(a2) & 7u) - 1)) | 0xFF;
      else
        v19 = 255;
      _pthread_workqueue_override_start_direct_check_owner(v18, v19, a1 + 56);
      goto LABEL_44;
    }
    goto LABEL_18;
  }
  if ((*(_DWORD *)(a1 + 80) & 0x400000) == 0)
  {
LABEL_18:
    v12 = 1;
LABEL_19:
    v13 = (unsigned int *)(a1 + 100);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_20:
    v15 = v5;
    if ((*(_QWORD *)(*(_QWORD *)v6 + 40) & 0x10000) != 0)
    {
      if (v5 > ((v6[21] >> 8) & 0xF))
        _dispatch_root_queue_push_override_stealer(v6, a1, v5);
    }
    else if (*(_QWORD *)(*(_QWORD *)v6 + 40) == 18)
    {
      _dispatch_workloop_push_stealer((uint64_t)v6, a1, v5);
    }
    else if ((v6[15] & 7) == 0 || (v6[15] & 7u) < v5)
    {
      (*(void (**)(int *, uint64_t, _QWORD))(*(_QWORD *)v6 + 80))(v6, v5, 0);
    }
    if ((v12 & 1) == 0)
    {
      while (1)
      {
        do
        {
          while (1)
          {
            v17 = __ldxr(v13);
            if ((v17 & 2) != 0)
              break;
            if (!__stlxr(0, v13))
              goto LABEL_46;
          }
        }
        while (__stlxr(v17 ^ 2, v13));
        if (v17 == 2)
          break;
        __dmb(9u);
        if ((*(_QWORD *)(StatusReg + 200) & 0xF0000) == 0)
          *(_QWORD *)(StatusReg + 200) = *(_QWORD *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
        v5 = *(_DWORD *)(a1 + 60) & 7;
        if ((*(_DWORD *)(a1 + 60) & 7u) > v15)
          goto LABEL_20;
      }
LABEL_46:
      if ((v17 & 1) != 0)
        _dispatch_unfair_lock_unlock_slow(a1 + 100, v17);
    }
    goto LABEL_44;
  }
  v7 = (unsigned int *)(a1 + 100);
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFCLL;
  do
  {
    while (1)
    {
      v9 = __ldaxr(v7);
      if (v9 > 3)
        break;
      if (!__stxr(v8, v7))
      {
        v6 = *(int **)(a1 + 24);
        if (MEMORY[0xFFFFFC100])
        {
          v20 = HIDWORD(a2) & 7;
          kdebug_trace(771883028, a1, 0, 0, 0);
          v5 = v20;
        }
        v12 = 0;
        goto LABEL_19;
      }
    }
  }
  while (__stxr(v9 | 2, v7));
  if ((_DWORD)v5)
    v10 = (256 << ((BYTE4(a2) & 7u) - 1)) | 0xFF;
  else
    v10 = 255;
  _pthread_workqueue_override_start_direct_check_owner(v9 | 3, v10, v7);
  if (MEMORY[0xFFFFFC100])
    kdebug_trace(771883028, a1, 0, 0, 0);
LABEL_44:
  if ((a3 & 1) != 0)
    _os_object_release_internal_n((void *)a1, (_BYTE *)&dword_0 + 2);
}

void _dispatch_root_queue_push_override_stealer(int *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  int *v4;
  unint64_t StatusReg;
  int v6;
  int v8;
  unsigned int v9;
  __objc2_class *v10;
  unsigned int *v11;
  __objc2_class **v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  if (a3 - 7 <= 0xFFFFFFF9)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupted priority";
    qword_61258 = a3;
    __break(1u);
LABEL_19:
    v10 = (__objc2_class *)_dispatch_continuation_alloc_from_heap();
    goto LABEL_10;
  }
  v3 = a2;
  v4 = a1;
  v8 = a1[21];
  if (v8 < 0)
    v9 = 2;
  else
    v9 = (v8 >> 25) & 4;
  if ((v9 & 2) != 0)
    v6 = 1;
  else
    v6 = 2 * (v9 > 3);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v10 = *(__objc2_class **)(StatusReg + 176);
  if (!v10)
    goto LABEL_19;
  *(_QWORD *)(StatusReg + 176) = v10->cache;
LABEL_10:
  v10->isa = (__objc2_class *)&unk_58898;
  if (*(_DWORD *)(v3 + 8) == 0x7FFFFFFF)
    goto LABEL_14;
  v11 = (unsigned int *)(v3 + 8);
  do
  {
    v12 = (__objc2_class **)__ldxr(v11);
    v13 = ((_DWORD)v12 + 2);
  }
  while (__stxr(v13, v11));
  if ((int)v12 > 0)
  {
LABEL_14:
    v12 = &_dispatch_root_queues;
    v13 = 3 * a3 + v6 - 3;
    v11 = (unsigned int *)(&_dispatch_root_queues + 16 * v13);
    v10[1].superclass = (__objc2_class *)v3;
    v10[1].cache = v4;
    v10->info = 0;
    v10[1].isa = v10;
    v10->superclass = (__objc2_class *)-1;
    v10->vtable = (void *)-1;
    v10->cache = 0;
    v14 = (unint64_t *)(v11 + 12);
    *(_QWORD *)(StatusReg + 976) = v11 + 12;
    do
      v15 = __ldxr(v14);
    while (__stlxr((unint64_t)v10, v14));
    if (v15)
    {
      *(_QWORD *)(v15 + 16) = v10;
      *(_QWORD *)(StatusReg + 976) = 0;
      return;
    }
  }
  else
  {
    qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
  }
  v12[16 * v13 + 13] = v10;
  *(_QWORD *)(StatusReg + 976) = 0;
  _dispatch_root_queue_poke_and_wakeup(v11, 1, 0);
}

void _dispatch_workloop_push_stealer(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t StatusReg;
  _QWORD *v7;
  unsigned int *v8;
  int v9;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_QWORD **)(StatusReg + 176);
  if (v7)
    *(_QWORD *)(StatusReg + 176) = v7[2];
  else
    v7 = _dispatch_continuation_alloc_from_heap();
  *v7 = &unk_58850;
  if (*(_DWORD *)(a2 + 8) == 0x7FFFFFFF)
    goto LABEL_7;
  v8 = (unsigned int *)(a2 + 8);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 2, v8));
  if (v9 > 0)
  {
LABEL_7:
    v7[6] = a2;
    v7[7] = 0;
    v7[4] = 0;
    v7[5] = v7;
    v7[1] = -1;
    v7[3] = -1;
    _dispatch_workloop_push(a1, v7, a3);
  }
  else
  {
    qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
  }
}

_DWORD *_dispatch_lane_drain_non_barriers(_DWORD *result, uint64_t a2, char a3, int8x16_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t StatusReg;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int *v33;
  int v34;
  NSObject *v35;

  v5 = (uint64_t)result;
  v6 = *((unsigned __int16 *)result + 40);
  v7 = (unint64_t *)(result + 14);
  do
    v8 = __ldxr(v7);
  while (__stlxr(v8 & 0xFFBFFFFFFFFFFFFFLL, v7));
  v9 = (unint64_t *)(result + 12);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    if (v6)
    {
      --v6;
      goto LABEL_6;
    }
    if (*(_QWORD *)a2 > 0xFFFuLL || (*(_QWORD *)a2 & 0x81) == 0)
      break;
    do
    {
      v6 = 0;
      v26 = __ldxr(v7);
    }
    while (__stxr(v26 + 0x20000000000, v7));
LABEL_6:
    v11 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(v5 + 104) = v11;
    if (!v11)
    {
      v12 = (unint64_t *)(a2 + 16);
      while (1)
      {
        v13 = __ldxr(v9);
        if (v13 != a2)
          break;
        if (!__stlxr(0, v9))
          goto LABEL_14;
      }
      __clrex();
      v11 = *v12;
      if (!*v12)
      {
        v29 = a2;
        v30 = _dispatch_wait_for_enqueuer(v12, v5 + 48);
        a2 = v29;
        v11 = v30;
      }
      *(_QWORD *)(v5 + 104) = v11;
    }
LABEL_14:
    if (*(_QWORD *)a2 > 0xFFFuLL || (*(_QWORD *)a2 & 0x81) == 0)
      result = _dispatch_continuation_redirect_push((_DWORD *)v5, (_QWORD *)a2);
    else
      result = _dispatch_non_barrier_waiter_redirect_or_wake(v5, a2);
    a2 = v11;
    if (!v11)
      goto LABEL_26;
LABEL_21:
    v15 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 <= 0xFFFuLL)
    {
      if ((v15 & 2) != 0)
        goto LABEL_26;
    }
    else if ((*(_QWORD *)(v15 + 40) & 0xF0) == 0x10 && (*(_DWORD *)(a2 + 80) & 0x80000) != 0)
    {
      goto LABEL_26;
    }
  }
  while (1)
  {
    v25 = __ldaxr(v7);
    if ((v25 & 0xFFE0018000000000) != 0)
      break;
    if (!__stxr(v25 + 0x20000000000, v7))
    {
      v6 = 0;
      goto LABEL_6;
    }
  }
  v6 = 0;
  __clrex();
LABEL_26:
  v16 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
  v17 = v6 << 41;
  if (a2)
  {
    v18 = *(unsigned __int16 *)(v5 + 80);
    if (v18 >= 2)
    {
      v28 = *(_QWORD *)a2;
      if (*(_QWORD *)a2 < 0x1000uLL)
      {
        if ((v28 & 2) == 0)
          goto LABEL_28;
      }
      else if ((*(_QWORD *)(v28 + 40) & 0xF0) != 0x10 || (*(_DWORD *)(a2 + 80) & 0x80000) == 0)
      {
        goto LABEL_28;
      }
      v17 = (v17 | 0x10000000000) - (v18 << 41);
      goto LABEL_28;
    }
  }
  do
  {
LABEL_28:
    v19 = __ldxr(v7);
    v20 = v19 - v17;
    v21 = (v19 - v17) & 0xFFFFFF7700000001;
    if (a2)
    {
      if ((v20 & 0x10000000000) != 0)
        v22 = v21 + 0x18000000000;
      else
        v22 = (v21 | 0x8000000000) + ((unint64_t)*(unsigned __int16 *)(v5 + 80) << 41);
      if ((v19 & 0x8000000000) != 0)
        v23 = (v19 - v17) & 0xFFFFFF7700000000 | 0x8000000001;
      else
        v23 = v21 | 0x8000000000;
      if ((v22 & 0x3FFE0000000000) == 0x20000000000000)
        v21 = ((v22 & 0xFFFFFF7FFFFFFFFFLL) + 0x40000000000000) | v16;
      else
        v21 = v23;
    }
    else if ((v19 & 0x8000000000) != 0)
    {
      __clrex();
      do
        v27 = __ldaxr(v7);
      while (__stxr(v27 ^ 0x8000000000, v7));
      a2 = *(_QWORD *)(v5 + 104);
      if (a2)
        goto LABEL_21;
      goto LABEL_26;
    }
  }
  while (__stxr(v21, v7));
  if ((~v20 & 0x1800000000) == 0)
  {
    v31 = HIDWORD(v20) & 7;
    v32 = *(_DWORD *)(StatusReg + 200);
    if ((HIWORD(v32) & 0xF) < v31)
      *(_QWORD *)(StatusReg + 200) = v32 & 0xFFF0FFFF | ((_DWORD)v31 << 16);
  }
  if (((v21 ^ v20) & 0x40000000000000) != 0)
    return (_DWORD *)_dispatch_lane_barrier_complete((id)v5);
  if (((v21 ^ v20) & 1) != 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_75;
    if (*(_DWORD *)(v5 + 8) == 0x7FFFFFFF)
      goto LABEL_75;
    v33 = (unsigned int *)(v5 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if (v34 > 0)
    {
LABEL_75:
      v35 = *(NSObject **)(v5 + 24);
      if (MEMORY[0xFFFFFC100])
        _dispatch_trace_item_push_internal(*(_QWORD **)(v5 + 24), (_QWORD *)v5, a4);
      _dispatch_introspection_queue_item_enqueue(v35, v5);
      return (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(v5 + 24) + 88))(*(_QWORD *)(v5 + 24), v5, HIDWORD(v21) & 7);
    }
    else
    {
      qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
    }
  }
  else if ((a3 & 1) != 0)
  {
    return _os_object_release_internal_n((void *)v5, (_BYTE *)&dword_0 + 2);
  }
  return result;
}

uint64_t _dispatch_channel_invoke_cancel_check(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  int v7;
  unsigned int *v8;
  int v9;
  uint64_t result;

  if ((*(_WORD *)(a1 + 116) & 8) != 0 || (*(_DWORD *)(a1 + 80) & 0x10000000) == 0)
    return 1;
  if ((*(_BYTE *)(a2 + 35) & 1) != 0)
    v6 = objc_autoreleasePoolPush();
  else
    v6 = 0;
  v7 = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 24))(a1, *(_QWORD *)(a1 + 32));
  if (v6)
    objc_autoreleasePoolPop(v6);
  if (v7)
  {
    *(_WORD *)(a1 + 116) |= 8u;
    if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
    {
      v8 = (unsigned int *)(a1 + 8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (v9 <= 1)
        _os_object_allows_weak_reference_cold_1();
    }
    return 1;
  }
  result = 0;
  *(_QWORD *)(a2 + 40) = -1;
  return result;
}

uint64_t _dispatch_worker_thread(uint64_t a1)
{
  NSObject *v2;
  unsigned int *v3;
  int v4;
  const char *v5;
  Class isa;
  unint64_t StatusReg;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  NSObject *v14;
  uint64_t v15;
  unint64_t v16;
  dispatch_time_t v17;
  unsigned int *v18;
  unsigned int v19;
  const char *v20;
  unsigned int *v21;
  int v22;

  v2 = *(NSObject **)(a1 + 32);
  v3 = (unsigned int *)(a1 + 112);
  do
    v4 = __ldaxr(v3);
  while (__stxr(v4 - 1, v3));
  if (v4 <= 0)
    _dispatch_worker_thread_cold_1(v4);
  if (v2[18].isa)
    *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 192) = v2 + 18;
  v5 = *(const char **)(a1 + 72);
  if (v5)
    pthread_setname_np(v5);
  isa = v2[8].isa;
  if (isa)
    (*((void (**)(void))isa + 2))();
  _dispatch_sigmask();
  _dispatch_introspection_thread_add();
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v8 = *(_QWORD *)(StatusReg + 32);
  v9 = *(unsigned int *)(a1 + 84);
  if ((v9 & 0x46000FFF) == 0)
  {
    v10 = v9 & 0x80000000;
    if ((v8 & 0x22000000) != 0 || (v8 & 0x3F00) == 0)
    {
      v9 = v10 | 0xF0000;
    }
    else
    {
      v11 = (__clz(__rbit32((v8 >> 8) & 0x3FFF)) << 8) + 256;
      if (((v8 >> 8) & 0x3FFF) == 0)
        v11 = 0;
      v9 = v8 & 0x8E0000FF | v10 | v11;
    }
  }
  v12 = v8 & 0xFFFFFFFF02FFFFFFLL;
  if (v8 == -1)
    v13 = 0;
  else
    v13 = v8 & 0xFFFFFFFF02FFFFFFLL;
  v14 = v2 + 9;
  do
  {
    _dispatch_introspection_runtime_event();
    _dispatch_root_queue_drain(a1, v9, 0x20000);
    v15 = *(_QWORD *)(StatusReg + 32);
    if ((v15 & 0x1000000) != 0)
    {
      v16 = v12;
      if (v13)
        goto LABEL_31;
      v16 = v15 & 0xFFFFFFFFFEFFFFFFLL;
LABEL_28:
      if (v16)
        goto LABEL_31;
      goto LABEL_23;
    }
    v16 = v13;
    if (v13 != (v15 & 0xFFFFFFFF77FFFFFFLL))
      goto LABEL_28;
LABEL_23:
    if (!*(_QWORD *)(StatusReg + 224))
      goto LABEL_24;
    v16 = 0;
LABEL_31:
    _dispatch_set_priority_and_voucher_slow(v16, 0, 6);
LABEL_24:
    _dispatch_introspection_runtime_event();
    v17 = dispatch_time(0, 5000000000);
  }
  while (!dispatch_semaphore_wait(v14, v17));
  v18 = (unsigned int *)(a1 + 100);
  do
    v19 = __ldxr(v18);
  while (__stlxr(v19 + 1, v18));
  _dispatch_root_queue_poke(a1, 1, 0);
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    v21 = (unsigned int *)(a1 + 8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (v22 <= 1)
    {
      if (v22 != 1)
        _os_object_allows_weak_reference_cold_1();
      _os_object_dispose((void *)a1, v20);
    }
  }
  return 0;
}

void _dispatch_root_queue_drain(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unint64_t StatusReg;
  unsigned int *v5;
  unsigned int *v6;
  int v7;
  int8x16_t v8;
  BOOL v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  void (**v14)(uint64_t);
  uint64_t v15;
  void *v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void (*v28)(void (**)(void));
  void (__cdecl *v29)(void *);
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  void (*v34)(void (**)(void));
  _QWORD *v35;
  void (__cdecl *v36)(void *);
  unint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  unint64_t v40;
  NSObject *group;
  unint64_t *v42;
  _OWORD v44[2];

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_QWORD *)(StatusReg + 160) = a1;
  *(_QWORD *)(StatusReg + 200) = a2;
  v5 = (unsigned int *)(*(_QWORD *)(StatusReg + 216) & 0xFFFFFFFFFFFFFFFELL);
  if (v5)
  {
    if (v5 == (unsigned int *)-4)
      _dispatch_main_queue_drain_cold_4();
    v6 = v5 + 24;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 - 1, v6));
    if (v7 <= 0)
    {
      if (v7 < 0)
        _os_object_allows_weak_reference_cold_1();
      *((_QWORD *)v5 + 7) = 0xDEAD000000000000;
      _dispatch_object_dealloc(v5);
    }
  }
  *(_QWORD *)(StatusReg + 216) = -4;
  memset(v44, 0, sizeof(v44));
  _dispatch_last_resort_autorelease_pool_push(v44);
  v9 = 0;
  v10 = (unint64_t *)(a1 + 104);
  v42 = (unint64_t *)(a1 + 48);
  while (1)
  {
    while (1)
    {
      do
LABEL_9:
        v11 = __ldxr(v10);
      while (__stxr(0xFFFFFFFFFFFFFFFFLL, v10));
      if (!v11)
      {
        do
        {
          v37 = __ldxr(v10);
          if (v37 != -1)
          {
            __clrex();
            goto LABEL_9;
          }
        }
        while (__stxr(0, v10));
        if (!*v42)
          goto LABEL_114;
        v38 = a1;
        v39 = _dispatch_root_queue_head_tail_quiesced;
        goto LABEL_91;
      }
      if (v11 != -1)
        break;
      v38 = a1;
      v39 = (uint64_t (*)(uint64_t))_dispatch_root_queue_mediator_is_gone;
LABEL_91:
      if (!__DISPATCH_ROOT_QUEUE_CONTENDED_WAIT__(v38, v39))
        goto LABEL_114;
    }
    v12 = (unint64_t *)(v11 + 16);
    v13 = *(_QWORD *)(v11 + 16);
    if (!v13)
    {
      *v10 = 0;
      while (1)
      {
        v40 = __ldxr(v42);
        if (v40 != v11)
          break;
        if (!__stlxr(0, v42))
          goto LABEL_14;
      }
      __clrex();
      v13 = *v12;
      if (!*v12)
        v13 = _dispatch_wait_for_enqueuer(v12, (uint64_t)v42);
    }
    *(_QWORD *)(a1 + 104) = v13;
    _dispatch_root_queue_poke((unsigned int *)a1, 1, 0);
LABEL_14:
    if (v9)
      _pthread_workqueue_override_reset();
    v14 = *(void (***)(uint64_t))(StatusReg + 192);
    if (v14)
      (*v14)(a1);
    v15 = *(_QWORD *)v11;
    if (*(_QWORD *)v11 >= 0x1000uLL)
    {
      if (*(_QWORD *)(v15 + 40) == 1)
        (*(void (**)(unint64_t, _QWORD, _QWORD))(v15 + 48))(v11, 0, (a3 >> 21) & 1);
      else
        (*(void (**)(unint64_t, _OWORD *, _QWORD))(v15 + 64))(v11, v44, a3 & 0xFFFF0000);
      goto LABEL_67;
    }
    if ((a3 & 0x1000000) != 0)
    {
      v16 = objc_autoreleasePoolPush();
      v15 = *(_QWORD *)v11;
    }
    else
    {
      v16 = 0;
    }
    v17 = *(unsigned int **)(v11 + 24);
    if ((v15 & 4) != 0)
      *(_QWORD *)(v11 + 24) = -1;
    if (v17 != (unsigned int *)-1)
    {
      v18 = v17;
      if (v17)
        v18 = (unsigned int *)v17[8];
      if (MEMORY[0xFFFFFC100])
        kdebug_trace(771817480, v18, v11, 0, 0);
    }
    v19 = *(_QWORD *)(v11 + 8);
    if (v19 == -1)
    {
      v22 = 0;
    }
    else
    {
      v20 = *(_QWORD *)(StatusReg + 200);
      v21 = ((v20 >> 8) & 0xF) != 0 ? 256 << ((BYTE1(v20) & 0xFu) - 1) : 0;
      v22 = v21 & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(StatusReg + 200);
      if ((v19 & 0xFFFFFF) != 0)
      {
        if ((v19 & 0xFFFFFFuLL) >= (v21 & 0xFFFFFF00)
          && ((v20 & 0x44000000) != 0 || (*(_QWORD *)(v11 + 8) & 0x10000000) != 0))
        {
          v22 = v19 & 0xFFFFFF;
        }
      }
      else if ((unsigned __int16)v20 >> 12)
      {
        v22 = (256 << (((unsigned __int16)v20 >> 12) - 1)) | 0xFF;
      }
    }
    v24 = v22 & 0xFFFFFFFF02FFFFFFLL;
    v25 = *(_QWORD *)(StatusReg + 32);
    if ((v25 & 0x1000000) != 0)
    {
      if (v24)
        goto LABEL_110;
      v24 = v25 & 0xFFFFFFFFFEFFFFFFLL;
    }
    else if (v24 == (v25 & 0xFFFFFFFF77FFFFFFLL))
    {
      goto LABEL_47;
    }
    if (v24)
      goto LABEL_110;
LABEL_47:
    if (v17 != (unsigned int *)-1)
    {
      if (*(unsigned int **)(StatusReg + 224) != v17)
      {
        v24 = 0;
LABEL_110:
        _dispatch_set_priority_and_voucher_slow(v24, v17, v15 & 4 | 2);
        if ((v15 & 0x200) != 0)
          goto LABEL_56;
        goto LABEL_53;
      }
      if ((v15 & 4) != 0 && v17)
        os_release(v17);
    }
    if ((v15 & 0x200) != 0)
      goto LABEL_56;
LABEL_53:
    if (MEMORY[0xFFFFFC100])
      _dispatch_trace_item_pop_internal((_QWORD *)a1, (_QWORD *)v11, v8);
    _dispatch_introspection_queue_item_dequeue(a1, v11);
LABEL_56:
    if ((v15 & 4) != 0)
    {
      v31 = *(_QWORD *)(StatusReg + 176);
      v32 = v31 ? *(_DWORD *)(v31 + 8) + 1 : 1;
      if (v32 > _dispatch_continuation_cache_limit)
      {
        v26 = v11;
        if ((v15 & 8) != 0)
        {
LABEL_79:
          v33 = *(_QWORD *)(**(_QWORD **)(v11 + 48) + 40);
          if (v33 != 514)
            _dispatch_queue_override_invoke_cold_1(v33);
          group = *(NSObject **)(v11 + 48);
          v34 = *(void (**)(void (**)(void)))(v11 + 32);
          v35 = *(_QWORD **)(v11 + 40);
          v36 = (void (__cdecl *)(void *))v34;
          if (v35)
          {
            v36 = *(void (__cdecl **)(void *))(v11 + 32);
            if (v34 == _dispatch_call_block_and_release)
              v36 = (void (__cdecl *)(void *))v35[2];
          }
          _dispatch_introspection_callout_entry(*(void **)(v11 + 40), v36);
          _dispatch_client_callout((uint64_t)v35, (uint64_t (*)(void))v34);
          _dispatch_introspection_callout_return(v35, v36);
          if (MEMORY[0xFFFFFC100])
            kdebug_trace(772079660, v11, 0, 0, 0);
          _dispatch_introspection_queue_item_complete(v11);
          dispatch_group_leave(group);
          goto LABEL_64;
        }
      }
      else
      {
        v26 = 0;
        *(_QWORD *)(v11 + 16) = v31;
        *(_DWORD *)(v11 + 8) = v32;
        *(_QWORD *)(StatusReg + 176) = v11;
        if ((v15 & 8) != 0)
          goto LABEL_79;
      }
    }
    else
    {
      v26 = 0;
      if ((v15 & 8) != 0)
        goto LABEL_79;
    }
    v28 = *(void (**)(void (**)(void)))(v11 + 32);
    v27 = *(_QWORD **)(v11 + 40);
    v29 = (void (__cdecl *)(void *))v28;
    if (v27)
    {
      v29 = *(void (__cdecl **)(void *))(v11 + 32);
      if (v28 == _dispatch_call_block_and_release)
        v29 = (void (__cdecl *)(void *))v27[2];
    }
    _dispatch_introspection_callout_entry(*(void **)(v11 + 40), v29);
    _dispatch_client_callout((uint64_t)v27, (uint64_t (*)(void))v28);
    _dispatch_introspection_callout_return(v27, v29);
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(772079660, v11, 0, 0, 0);
    _dispatch_introspection_queue_item_complete(v11);
LABEL_64:
    if (!v26)
    {
      if (!v16)
        goto LABEL_67;
LABEL_66:
      objc_autoreleasePoolPop(v16);
      goto LABEL_67;
    }
    _dispatch_continuation_free_to_cache_limit(v26);
    if (v16)
      goto LABEL_66;
LABEL_67:
    if (v14)
      v14[1](a1);
    v30 = WORD1(*(_QWORD *)(StatusReg + 200)) & 0xF;
    if (v30)
    {
      *(_QWORD *)(StatusReg + 200) &= 0xFFF0FFFFuLL;
      v9 = v30 != 15;
    }
    else
    {
      v9 = 0;
    }
    if ((*(_BYTE *)(StatusReg + 960) & 1) != 0)
      break;
    *(_QWORD *)(StatusReg + 960) = 0;
  }
LABEL_114:
  _dispatch_last_resort_autorelease_pool_pop((uint64_t)v44);
  *(_QWORD *)(StatusReg + 216) = 0;
  *(_QWORD *)(StatusReg + 40) = 0;
  *(_QWORD *)(StatusReg + 200) = 0;
  *(_QWORD *)(StatusReg + 160) = 0;
}

BOOL __DISPATCH_ROOT_QUEUE_CONTENDED_WAIT__(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  char v4;
  unsigned int *v5;
  mach_msg_timeout_t v6;
  int v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v4 = 0;
  v5 = (unsigned int *)(a1 + 112);
  v6 = 500;
LABEL_2:
  v7 = -80;
  do
  {
    if (__CFADD__(v7++, 1))
    {
      if ((v4 & 1) == 0)
      {
        do
          v10 = __ldxr(v5);
        while (__stlxr(v10 + 1, v5));
      }
      thread_switch(0, 3, v6);
      v9 = a2(a1);
      if (!v9)
      {
        v11 = (v6 >> 4) & 0x7FFFFFF;
        v6 *= 2;
        v4 = 1;
        if (v11 < 0xC35)
          goto LABEL_2;
        v9 = 0;
      }
      goto LABEL_12;
    }
    __yield();
    v9 = a2(a1);
  }
  while (!v9);
  if ((v4 & 1) == 0)
    return v9 == 1;
  do
LABEL_12:
    v12 = __ldaxr(v5);
  while (__stxr(v12 - 1, v5));
  if (*(_QWORD *)(a1 + 48))
  {
    v9 = 1;
  }
  else if (!v9)
  {
    _dispatch_root_queue_poke((unsigned int *)a1, 1, 0);
    v9 = 0;
  }
  return v9 == 1;
}

uint64_t _dispatch_root_queue_head_tail_quiesced(uint64_t a1)
{
  unsigned int v1;

  if (*(_QWORD *)(a1 + 48))
    v1 = 1;
  else
    v1 = 2;
  if ((*(_QWORD *)(a1 + 104) != 0) != (*(_QWORD *)(a1 + 48) == 0))
    return v1;
  else
    return 0;
}

BOOL _dispatch_root_queue_mediator_is_gone(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104) != -1;
}

void _dispatch_mgr_priority_raise(pthread_attr_t *a1)
{
  int v2;
  int v3;
  unsigned int v4;
  unint64_t v5;
  qos_class_t v6;
  signed int sched_priority;
  signed int v8;
  uint64_t v9;
  int v10;
  qos_class_t __qos_class;
  sched_param v12;

  if (_dispatch_mgr_sched_pred != -1)
    dispatch_once_f(&_dispatch_mgr_sched_pred, 0, (dispatch_function_t)_dispatch_mgr_sched_init);
  v12 = 0;
  v2 = pthread_attr_getschedparam(a1, &v12);
  if (v2)
    _dispatch_bug(6293, v2);
  __qos_class = QOS_CLASS_UNSPECIFIED;
  pthread_attr_get_qos_class_np(a1, &__qos_class, 0);
  if (__qos_class)
  {
    if (__qos_class == 5)
    {
      v3 = 4;
    }
    else
    {
      HIDWORD(v5) = __qos_class - 9;
      LODWORD(v5) = __qos_class - 9;
      v4 = v5 >> 2;
      if (v4 > 6)
        v3 = 0;
      else
        v3 = dword_40000[v4];
    }
    v12.sched_priority = v3;
    while (1)
    {
      v6 = __ldxr((unsigned int *)&dword_65B64);
      if (__qos_class <= v6)
        break;
      if (!__stxr(__qos_class, (unsigned int *)&dword_65B64))
        goto LABEL_14;
    }
    __clrex();
  }
LABEL_14:
  sched_priority = v12.sched_priority;
  do
  {
    v8 = __ldxr((unsigned int *)&_dispatch_mgr_sched);
    if (sched_priority <= v8)
    {
      __clrex();
      return;
    }
  }
  while (__stxr(sched_priority, (unsigned int *)&_dispatch_mgr_sched));
  if (_dispatch_root_queues_pred != -1)
    dispatch_once_f(&_dispatch_root_queues_pred, 0, (dispatch_function_t)_dispatch_root_queues_init_once);
  if (sched_priority > dword_65B68)
  {
    v9 = sched_priority | 0x20000000;
LABEL_23:
    v10 = _pthread_workqueue_set_event_manager_priority(v9);
    if (v10)
      _dispatch_bug(6325, v10);
    return;
  }
  if (__qos_class)
  {
    v9 = _pthread_qos_class_encode();
    if (v9)
      goto LABEL_23;
  }
}

uint64_t _dispatch_main_queue_update_priority_from_thread()
{
  unint64_t v0;
  uint64_t result;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;

  v0 = qword_64DF8;
  if (qword_64DF8 >= 4)
    result = qword_64DF8 | 3;
  else
    result = 0;
  v2 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
  v3 = (__clz(__rbit32((v2 >> 8) & 0x3FFF)) << 8) + 256;
  if (((v2 >> 8) & 0x3FFF) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = (v4 >> 8) & 0xF;
  v6 = v4 & 0xFFFFFF00 | v2;
  v7 = HIDWORD(v0) & 7;
  v8 = (dword_64E14 >> 8) & 0xF;
  dword_64E14 = v6;
  if (v8 < v7 && v5 == 0)
    return _pthread_qos_override_end_direct(result, &_dispatch_main_q);
  if (v8 < v7 && v7 <= v5)
    return _pthread_qos_override_end_direct(result, &_dispatch_main_q);
  if (v8 >= v7 && v7 > v5)
    return _pthread_qos_override_start_direct(result, (256 << (v7 - 1)) | 0xFF, &_dispatch_main_q);
  return result;
}

uint64_t _dispatch_root_queues_init_once()
{
  int v0;
  int v1;
  uint64_t result;
  int v3;
  uint64_t v4;
  void (*v5)(uint64_t *, int *);
  void (*v6)(uint64_t *, uint64_t *, int *);
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  if ((_dispatch_unsafe_fork & 1) == 0)
    _dispatch_fork_becomes_unsafe_slow();
  v0 = _pthread_workqueue_supported();
  v1 = v0;
  if ((v0 & 0x10) == 0)
    _dispatch_root_queues_init_once_cold_1(v0);
  v4 = 0x200000000;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 64;
  v9 = 72;
  if ((v0 & 0x80) != 0)
  {
    v5 = _dispatch_kevent_worker_thread;
    v6 = _dispatch_workloop_worker_thread;
    v7 = _dispatch_worker_thread2;
  }
  else
  {
    if ((v0 & 0x40) == 0)
      _dispatch_root_queues_init_once_cold_2(v0);
    v7 = _dispatch_worker_thread2;
    v5 = _dispatch_kevent_worker_thread;
  }
  result = pthread_workqueue_setup(&v4, 48);
  if ((_DWORD)result)
    _dispatch_root_queues_init_once_cold_4(result, v1);
  if ((_dispatch_mode & 4) != 0)
  {
    v3 = -1;
    result = sysctlbyname("kern.wq_limit_cooperative_threads", 0, 0, &v3, 4uLL);
    if ((_DWORD)result)
      _dispatch_root_queues_init_once_cold_3();
  }
  return result;
}

uint64_t _dispatch_worker_thread2(uint64_t a1)
{
  _QWORD *StatusReg;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  StatusReg[120] = 0;
  StatusReg[4] = a1 & 0xFFFFFFFF88FFFFFFLL;
  v2 = __clz(__rbit32((a1 >> 8) & 0x3FFF));
  if (((a1 >> 8) & 0x3FFF) != 0)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (v3 - 7 <= 0xFFFFFFF9)
    _dispatch_queue_priority_inherit_from_target_cold_1(v3);
  if ((a1 & 0x8000000) != 0)
    v4 = 2293760;
  else
    v4 = 196608;
  v5 = ((a1 & 0x8000000) >> 26) | 0xFFFFFFFD;
  v6 = 3 * v3;
  if ((a1 & 0x88000000) == 0x80000000)
    v5 = -2;
  v7 = v5 + v6;
  _dispatch_introspection_thread_add();
  _dispatch_introspection_runtime_event();
  v8 = (unsigned int *)(&_dispatch_root_queues + 16 * v7 + 14);
  do
    v9 = __ldaxr(v8);
  while (__stxr(v9 - 1, v8));
  _dispatch_root_queue_drain((uint64_t)(&_dispatch_root_queues + 16 * v7), *((_DWORD *)&_dispatch_root_queues + 32 * v7 + 21), v4);
  v10 = StatusReg[4];
  if ((v10 & 0x1000000) != 0)
  {
    v12 = v10 & 0xFFFFFFFFFEFFFFFFLL;
    if ((v10 & 0xFFFFFFFFFEFFFFFFLL) != 0)
      goto LABEL_19;
  }
  if (StatusReg[28])
  {
    v12 = 0;
LABEL_19:
    _dispatch_set_priority_and_voucher_slow(v12, 0, 14);
  }
  StatusReg[120] = 0;
  return _dispatch_introspection_runtime_event();
}

void _dispatch_kevent_worker_thread(uint64_t *a1, int *a2)
{
  _QWORD *StatusReg;
  unsigned int *v5;
  unsigned int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int8x16_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!a1 || !a2)
  {
    _dispatch_bug(6755, 0);
    return;
  }
  if (*a2 && *a1)
  {
    StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v5 = (unsigned int *)(StatusReg[27] & 0xFFFFFFFFFFFFFFFELL);
    if (v5)
    {
      if (v5 != (unsigned int *)-4)
      {
        v6 = v5 + 24;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 - 1, v6));
        if (v7 > 0)
          goto LABEL_12;
        if ((v7 & 0x80000000) == 0)
        {
          *((_QWORD *)v5 + 7) = 0xDEAD000000000000;
          _dispatch_object_dealloc(v5);
          goto LABEL_12;
        }
LABEL_31:
        qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
      qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Lingering DISPATCH_WLH_ANON";
      __break(1u);
      return;
    }
LABEL_12:
    StatusReg[27] = -4;
    v8 = *a1;
    _dispatch_introspection_thread_add();
    StatusReg[120] = 0;
    v15 = 0;
    v14 = 0u;
    v16 = -4;
    v17 = (unint64_t)v8;
    v9 = StatusReg[4];
    if ((v9 & 0x2000000) != 0)
    {
      if ((v9 & 0x20000000) != 0)
        v9 = StatusReg[4] & 0xFE000000;
      StatusReg[4] = v9 & 0xFFFFFFFFFEFFFFFFLL;
      StatusReg[25] = 34537472;
      StatusReg[20] = &_dispatch_mgr_q;
      v10 = StatusReg[3] & 0xFFFFFFFCLL | 0x40020000000000;
      do
      {
        v11 = __ldaxr((unint64_t *)&qword_64E78);
        if ((v11 & 0xFFE00000FFFFFFFCLL) != 0)
        {
          qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Locking the manager should not fail";
          qword_61258 = v11;
          __break(1u);
          goto LABEL_31;
        }
      }
      while (__stxr(v10 | v11 & 0x7700000001, (unint64_t *)&qword_64E78));
      _dispatch_introspection_runtime_event();
      v16 = -4;
      StatusReg[29] = &v14;
      _dispatch_event_loop_merge(v8, *a2);
      _dispatch_introspection_runtime_event();
      _dispatch_mgr_queue_drain();
      if (byte_65A36)
        _dispatch_event_loop_drain_timers((uint64_t)&_dispatch_timers_heap, 9u);
      do
        v12 = __ldxr((unint64_t *)&qword_64E78);
      while (__stlxr((v12 & 0xFFFFFFF000000001) - 0x40020000000000, (unint64_t *)&qword_64E78));
      StatusReg[25] = 0;
      StatusReg[20] = 0;
      if ((v12 & 0x8000000000) != 0)
      {
        _dispatch_introspection_runtime_event();
        _dispatch_event_loop_poke(0xFFFFFFFFFFFFFFF8, 0, 0, v13);
      }
    }
    else
    {
      StatusReg[4] = v9 & 0xFFFFFFFF88FFFFFFLL | 0x1000000;
      BYTE12(v17) = 1;
      _dispatch_introspection_runtime_event();
      StatusReg[29] = &v14;
      _dispatch_event_loop_merge(v8, *a2);
      if (*((_QWORD *)&v14 + 1))
      {
        if (v16 == -4)
        {
          StatusReg[29] = 0;
          _dispatch_introspection_runtime_event();
          _dispatch_root_queue_drain_deferred_item((uint64_t *)&v14);
        }
        else
        {
          _dispatch_introspection_runtime_event();
          _dispatch_root_queue_drain_deferred_wlh((uint64_t)&v14);
        }
      }
    }
    StatusReg[29] = 0;
    StatusReg[5] = 0;
    StatusReg[120] = 0;
    *a2 = WORD4(v17);
    _dispatch_introspection_runtime_event();
    StatusReg[27] = 0;
    StatusReg[5] = 0;
  }
}

void _dispatch_workloop_worker_thread(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v5;
  _QWORD *StatusReg;
  unint64_t v7;
  unsigned int *v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  int *v13;
  int v14;
  char v15;
  OS_os_workgroup *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int8x16_t v23;
  char v24;
  void *v25;
  os_workgroup_join_token_opaque_s v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;

  if (!a1 || !a2 || !a3)
  {
    _dispatch_bug(6774, 0);
    return;
  }
  v5 = *a1;
  if (!*a1)
  {
    _dispatch_bug(6777, 0);
    _dispatch_kevent_worker_thread(a2, a3);
    return;
  }
  if (*a3 && *a2)
  {
    StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v7 = StatusReg[27] & 0xFFFFFFFFFFFFFFFELL;
    if (v7 == -4)
    {
LABEL_71:
      qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Lingering DISPATCH_WLH_ANON";
      __break(1u);
      goto LABEL_72;
    }
    if (v7 == v5)
    {
LABEL_19:
      StatusReg[27] = v5;
      v12 = *a2;
      _dispatch_introspection_thread_add();
      StatusReg[120] = 0;
      v28 = 0;
      v27 = 0u;
      v29 = v5;
      v30 = (unint64_t)v12;
      if (v5 == -4)
      {
        v15 = 0;
        v16 = 0;
        memset(&v26, 0, sizeof(v26));
        goto LABEL_39;
      }
      if (*(_QWORD *)(*(_QWORD *)v5 + 40) == 131090 && (v13 = *(int **)(v5 + 200)) != 0)
      {
        v14 = *v13;
        memset(&v26, 0, sizeof(v26));
        if ((v14 & 0x40) != 0)
        {
          v7 = *(_QWORD *)(v5 + 72);
          if (!v7
            || StatusReg[124]
            || (LODWORD(v7) = pthread_setname_np((const char *)v7),
                v15 = 1,
                StatusReg[124] = 1,
                (v13 = *(int **)(v5 + 200)) != 0))
          {
            if (*((_QWORD *)v13 + 4) && !StatusReg[115])
            {
              v15 = 1;
              v25 = _dispatch_calloc(1uLL, 0x28uLL);
              LODWORD(v7) = _os_workgroup_join_update_wg(*(_QWORD *)(*(_QWORD *)(v5 + 200) + 32), (uint64_t)v25);
              v16 = 0;
              StatusReg[115] = v25;
            }
            else
            {
              v16 = 0;
              v15 = 1;
            }
            goto LABEL_39;
          }
          goto LABEL_36;
        }
      }
      else
      {
        memset(&v26, 0, sizeof(v26));
      }
      if (*(_QWORD *)(*(_QWORD *)v5 + 40) != 131090)
        goto LABEL_35;
      v17 = *(_QWORD *)(v5 + 200);
      if (!v17)
        goto LABEL_35;
      v16 = *(OS_os_workgroup **)(v17 + 32);
      if (!v16 || (LODWORD(v7) = os_workgroup_join(*(os_workgroup_t *)(v17 + 32), &v26), !(_DWORD)v7))
      {
        v15 = 0;
        goto LABEL_39;
      }
      if ((_DWORD)v7 == 22)
      {
LABEL_35:
        v15 = 0;
LABEL_36:
        v16 = 0;
LABEL_39:
        v18 = StatusReg[4];
        if ((v18 & 0x2000000) != 0)
        {
          if ((v18 & 0x20000000) != 0)
            v18 = StatusReg[4] & 0xFE000000;
          StatusReg[4] = v18 & 0xFFFFFFFFFEFFFFFFLL;
          StatusReg[25] = 34537472;
          StatusReg[20] = &_dispatch_mgr_q;
          v20 = StatusReg[3] & 0xFFFFFFFCLL | 0x40020000000000;
          do
          {
            v21 = __ldaxr((unint64_t *)&qword_64E78);
            if ((v21 & 0xFFE00000FFFFFFFCLL) != 0)
            {
              qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Locking the manager should not fail";
              qword_61258 = v21;
              __break(1u);
              goto LABEL_69;
            }
          }
          while (__stxr(v20 | v21 & 0x7700000001, (unint64_t *)&qword_64E78));
          _dispatch_introspection_runtime_event();
          v29 = -4;
          StatusReg[29] = &v27;
          _dispatch_event_loop_merge(v12, *a3);
          _dispatch_introspection_runtime_event();
          _dispatch_mgr_queue_drain();
          if (byte_65A36)
            _dispatch_event_loop_drain_timers((uint64_t)&_dispatch_timers_heap, 9u);
          do
            v22 = __ldxr((unint64_t *)&qword_64E78);
          while (__stlxr((v22 & 0xFFFFFFF000000001) - 0x40020000000000, (unint64_t *)&qword_64E78));
          StatusReg[25] = 0;
          StatusReg[20] = 0;
          if ((v22 & 0x8000000000) != 0)
          {
            _dispatch_introspection_runtime_event();
            _dispatch_event_loop_poke(0xFFFFFFFFFFFFFFF8, 0, 0, v23);
          }
        }
        else
        {
          v19 = v18 & 0xFFFFFFFF88FFFFFFLL;
          if (v5 == -4)
            v19 |= 0x1000000uLL;
          StatusReg[4] = v19;
          if (v5 == -4)
            BYTE12(v30) = 1;
          _dispatch_introspection_runtime_event();
          StatusReg[29] = &v27;
          _dispatch_event_loop_merge(v12, *a3);
          if (*((_QWORD *)&v27 + 1))
          {
            if (v29 == -4)
            {
              StatusReg[29] = 0;
              _dispatch_introspection_runtime_event();
              _dispatch_root_queue_drain_deferred_item((uint64_t *)&v27);
            }
            else
            {
              _dispatch_introspection_runtime_event();
              _dispatch_root_queue_drain_deferred_wlh((uint64_t)&v27);
            }
          }
        }
        if (v16)
          v24 = v15;
        else
          v24 = 1;
        if ((v24 & 1) == 0)
          os_workgroup_leave(v16, &v26);
        StatusReg[29] = 0;
        StatusReg[5] = 0;
        StatusReg[120] = 0;
        *a3 = WORD4(v30);
        _dispatch_introspection_runtime_event();
        StatusReg[27] = v5 | 1;
        return;
      }
LABEL_72:
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_workloop os_workgroup_join failed";
      qword_61258 = (int)v7;
      __break(1u);
      return;
    }
    if (v7)
    {
      v8 = (unsigned int *)(v7 + 96);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 - 1, v8));
      if (v9 <= 0)
      {
        if (v9 < 0)
        {
LABEL_69:
          qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
          __break(1u);
LABEL_70:
          qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
          __break(1u);
          goto LABEL_71;
        }
        *(_QWORD *)(v7 + 56) = 0xDEAD000000000000;
        _dispatch_object_dealloc((void *)v7);
      }
    }
    if (v5 == -4)
      goto LABEL_19;
    v10 = (unsigned int *)(v5 + 96);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    if ((v11 & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_70;
  }
}

void _dispatch_mgr_queue_drain()
{
  unint64_t StatusReg;
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;
  _OWORD v4[2];

  memset(v4, 0, sizeof(v4));
  v3 = 0x40020000000000;
  if (qword_64E70)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    if ((~*(_DWORD *)(StatusReg + 200) & 0xF0000) != 0)
      *(_QWORD *)(StatusReg + 200) = *(_QWORD *)(StatusReg + 200) & 0xFFF0FFFFLL | 0xF0000;
    _dispatch_lane_serial_drain(&_dispatch_mgr_q, (uint64_t)v4, 0x40000, &v3);
    if (v1)
      _dispatch_mgr_queue_drain_cold_1();
    v2 = *(_DWORD **)(StatusReg + 224);
    if (v2)
    {
      *(_QWORD *)(StatusReg + 224) = 0;
      if (v2[8])
        _dispatch_set_priority_and_mach_voucher_slow(0, 0);
      os_release(v2);
    }
    if ((*(_QWORD *)(StatusReg + 200) & 0xF0000) != 0)
      *(_QWORD *)(StatusReg + 200) &= 0xFFF0FFFFuLL;
  }
}

void _dispatch_root_queue_drain_deferred_item(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *StatusReg;
  int8x16_t v4;
  NSObject *v5;
  void (**v6)(uint64_t);
  Class isa;
  unsigned int *v8;
  unsigned int *v10;
  Class v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  objc_class *v19;
  int v20;
  _QWORD *v21;
  void (*v22)(void (**)(void));
  void (__cdecl *v23)(void *);
  uint64_t v24;
  unint64_t v25;
  NSObject *v26;
  uint64_t v27;
  void (*v28)(void (**)(void));
  _QWORD *v29;
  void (__cdecl *v30)(void *);
  _OWORD v31[2];

  v2 = *a1;
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  StatusReg[20] = v2;
  _dispatch_introspection_runtime_event();
  memset(v31, 0, sizeof(v31));
  _dispatch_last_resort_autorelease_pool_push(v31);
  StatusReg[25] = *(unsigned int *)(v2 + 84);
  v5 = a1[1];
  v6 = (void (**)(uint64_t))StatusReg[24];
  if (v6)
    (*v6)(v2);
  isa = v5->isa;
  if (v5->isa < (Class)&unk_1000)
  {
    v8 = (unsigned int *)v5[3].isa;
    if ((isa & 4) != 0)
      v5[3].isa = (Class)-1;
    if (v8 != (unsigned int *)-1 && (unsigned int *)((char *)v8 + 1) != 0)
    {
      v10 = v8;
      if (v8)
        v10 = (unsigned int *)v8[8];
      if (MEMORY[0xFFFFFC100])
        kdebug_trace(771817480, v10, v5, 0, 0);
    }
    v11 = v5[1].isa;
    if (v11 == (Class)-1)
    {
      v14 = 0;
    }
    else
    {
      v12 = StatusReg[25];
      if (((v12 >> 8) & 0xF) != 0)
        v13 = 256 << ((BYTE1(v12) & 0xFu) - 1);
      else
        v13 = 0;
      v14 = v13 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
      if (((unint64_t)v11 & 0xFFFFFF) != 0)
      {
        if (((unint64_t)v11 & 0xFFFFFF) >= (v13 & 0xFFFFFF00)
          && ((v12 & 0x44000000) != 0 || ((uint64_t)v5[1].isa & 0x10000000) != 0))
        {
          v14 = (unint64_t)v11 & 0xFFFFFF;
        }
      }
      else if ((unsigned __int16)v12 >> 12)
      {
        v14 = (256 << (((unsigned __int16)v12 >> 12) - 1)) | 0xFF;
      }
    }
    v16 = v14 & 0xFFFFFFFF02FFFFFFLL;
    v17 = StatusReg[4];
    if ((v17 & 0x1000000) != 0)
    {
      if (v16)
        goto LABEL_83;
      v16 = v17 & 0xFFFFFFFFFEFFFFFFLL;
    }
    else if (v16 == (v17 & 0xFFFFFFFF77FFFFFFLL))
    {
LABEL_34:
      if (v8 == (unsigned int *)-1)
        goto LABEL_39;
      if ((unsigned int *)StatusReg[28] == v8)
      {
        if ((isa & 4) != 0 && v8)
          os_release(v8);
LABEL_39:
        if (((unsigned __int16)isa & 0x200) != 0)
          goto LABEL_43;
LABEL_40:
        if (MEMORY[0xFFFFFC100])
          _dispatch_trace_item_pop_internal((_QWORD *)v2, v5, v4);
        _dispatch_introspection_queue_item_dequeue(v2, v5);
LABEL_43:
        if ((isa & 4) != 0)
        {
          v19 = (objc_class *)StatusReg[22];
          if (v19)
            v20 = *((_DWORD *)v19 + 2) + 1;
          else
            v20 = 1;
          v18 = (uint64_t)v5;
          if (v20 <= _dispatch_continuation_cache_limit)
          {
            v18 = 0;
            v5[2].isa = v19;
            LODWORD(v5[1].isa) = v20;
            StatusReg[22] = v5;
          }
        }
        else
        {
          v18 = 0;
        }
        if ((isa & 8) != 0)
        {
          v26 = v5[6].isa;
          v27 = *((_QWORD *)v26->isa + 5);
          if (v27 != 514)
            _dispatch_queue_override_invoke_cold_1(v27);
          v28 = (void (*)(void (**)(void)))v5[4].isa;
          v29 = v5[5].isa;
          v30 = (void (__cdecl *)(void *))v28;
          if (v29)
          {
            v30 = (void (__cdecl *)(void *))v5[4].isa;
            if (v28 == _dispatch_call_block_and_release)
              v30 = (void (__cdecl *)(void *))v29[2];
          }
          _dispatch_introspection_callout_entry(v5[5].isa, v30);
          _dispatch_client_callout((uint64_t)v29, (uint64_t (*)(void))v28);
          _dispatch_introspection_callout_return(v29, v30);
          if (MEMORY[0xFFFFFC100])
            kdebug_trace(772079660, v5, 0, 0, 0);
          _dispatch_introspection_queue_item_complete(v5);
          dispatch_group_leave(v26);
          if (!v18)
          {
LABEL_57:
            if (!v6)
              goto LABEL_59;
LABEL_58:
            v6[1](v2);
            goto LABEL_59;
          }
        }
        else
        {
          v22 = (void (*)(void (**)(void)))v5[4].isa;
          v21 = v5[5].isa;
          v23 = (void (__cdecl *)(void *))v22;
          if (v21)
          {
            v23 = (void (__cdecl *)(void *))v5[4].isa;
            if (v22 == _dispatch_call_block_and_release)
              v23 = (void (__cdecl *)(void *))v21[2];
          }
          _dispatch_introspection_callout_entry(v5[5].isa, v23);
          _dispatch_client_callout((uint64_t)v21, (uint64_t (*)(void))v22);
          _dispatch_introspection_callout_return(v21, v23);
          if (MEMORY[0xFFFFFC100])
            kdebug_trace(772079660, v5, 0, 0, 0);
          _dispatch_introspection_queue_item_complete(v5);
          if (!v18)
            goto LABEL_57;
        }
        _dispatch_continuation_free_to_cache_limit(v18);
        if (!v6)
          goto LABEL_59;
        goto LABEL_58;
      }
      v16 = 0;
LABEL_83:
      _dispatch_set_priority_and_voucher_slow(v16, v8, isa & 4 | 2);
      if (((unsigned __int16)isa & 0x200) != 0)
        goto LABEL_43;
      goto LABEL_40;
    }
    if (v16)
      goto LABEL_83;
    goto LABEL_34;
  }
  if (*((_QWORD *)isa + 5) == 1)
    (*((void (**)(NSObject *, _QWORD, _QWORD))isa + 6))(v5, 0, 0);
  else
    (*((void (**)(NSObject *, _OWORD *, uint64_t))isa + 8))(v5, v31, 196608);
  if (v6)
    goto LABEL_58;
LABEL_59:
  _dispatch_last_resort_autorelease_pool_pop((uint64_t)v31);
  StatusReg[25] = 0;
  StatusReg[20] = 0;
  v24 = StatusReg[4];
  if ((v24 & 0x1000000) != 0)
  {
    v25 = v24 & 0xFFFFFFFFFEFFFFFFLL;
    if ((v24 & 0xFFFFFFFFFEFFFFFFLL) != 0)
      goto LABEL_65;
  }
  if (StatusReg[28])
  {
    v25 = 0;
LABEL_65:
    _dispatch_set_priority_and_voucher_slow(v25, 0, 14);
  }
}

uint64_t _dispatch_root_queue_drain_deferred_wlh(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD *StatusReg;
  int8x16_t v5;
  char v6;
  unint64_t *v7;
  unsigned int *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  int8x16_t v13;
  int v14;
  NSObject *isa;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  signed int v19;
  unsigned int v20;
  BOOL v21;
  signed int v22;
  uint64_t v23;
  NSObject *v24;
  _OWORD v25[2];

  v2 = *(_QWORD *)a1;
  v3 = *(NSObject **)(a1 + 8);
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  StatusReg[20] = v2;
  v5 = 0uLL;
  StatusReg[25] = *(unsigned int *)(v2 + 84) | 0xF0000;
  v6 = *(_BYTE *)(a1 + 45) | 4;
  v7 = (unint64_t *)&v3[7];
  v8 = (unsigned int *)&v3[1];
  memset(v25, 0, sizeof(v25));
  *(_BYTE *)(a1 + 45) = v6;
  while (2)
  {
    if (MEMORY[0xFFFFFC100])
      _dispatch_trace_item_pop_internal((_QWORD *)v2, v3, v5);
    _dispatch_introspection_queue_item_dequeue(v2, v3);
    v9 = StatusReg[3] & 0xFFFFFFFCLL;
    while (1)
    {
      v10 = __ldaxr(v7);
      if (v10 >> 55)
      {
        v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
        goto LABEL_8;
      }
      if ((v10 & 0xFFFFFFFC) != 0)
        break;
      v11 = v9 | v10 & 0x7700000001 | 0x60000000000000;
LABEL_8:
      if (!__stxr(v11, v7))
        goto LABEL_14;
    }
    if ((v10 & 2) != 0)
    {
      v11 = v10 | 0x800000000;
      goto LABEL_8;
    }
    __clrex();
    v11 = v10;
LABEL_14:
    if ((v10 & 0x6000000001) != 0x2000000001)
      _dispatch_root_queue_drain_deferred_wlh_cold_4(v10);
    if ((v10 & 0xFF800000FFFFFFFCLL) != 0)
    {
      v16 = *v8;
      if (v11 >> 55)
      {
        if (v16 != 0x7FFFFFFF)
        {
          do
          {
            v17 = __ldxr(v8);
            v18 = __OFSUB__(v17, 2);
            v19 = v17 - 2;
          }
          while (__stlxr(v19, v8));
          if ((v19 < 0) ^ v18 | (v19 == 0))
            _os_object_allows_weak_reference_cold_1();
        }
      }
      else if (v16 != 0x7FFFFFFF)
      {
        do
        {
          v20 = __ldxr(v8);
          v21 = __OFSUB__(v20, 1);
          v22 = v20 - 1;
        }
        while (__stlxr(v22, v8));
        if ((v22 < 0) ^ v21 | (v22 == 0))
          _os_object_allows_weak_reference_cold_1();
      }
      goto LABEL_34;
    }
    result = (*((uint64_t (**)(NSObject *, _OWORD *, uint64_t))v3->isa + 8))(v3, v25, 196610);
    if ((*(_BYTE *)(a1 + 45) & 1) != 0)
    {
      v11 = *v7;
      if ((*v7 & 0x2000000000) != 0)
      {
        if ((v11 & 1) != 0)
        {
          if (*v8 != 0x7FFFFFFF)
          {
            do
              v14 = __ldxr(v8);
            while (__stxr(v14 + 1, v8));
            if (v14 <= 0)
              dispatch_set_target_queue_cold_2();
          }
          isa = v3[3].isa;
          if (MEMORY[0xFFFFFC100])
          {
            v24 = v3[3].isa;
            _dispatch_trace_item_push_internal(isa, v3, v13);
            isa = v24;
          }
          _dispatch_introspection_queue_item_enqueue(isa, v3);
          continue;
        }
LABEL_34:
        result = _dispatch_event_loop_leave_deferred(a1, v11);
      }
    }
    break;
  }
  StatusReg[25] = 0;
  StatusReg[20] = 0;
  v23 = StatusReg[4];
  if ((v23 & 0x1000000) != 0)
  {
    result = v23 & 0xFFFFFFFFFEFFFFFFLL;
    if ((v23 & 0xFFFFFFFFFEFFFFFFLL) != 0)
      return _dispatch_set_priority_and_voucher_slow(result, 0, 14);
  }
  if (StatusReg[28])
  {
    result = 0;
    return _dispatch_set_priority_and_voucher_slow(result, 0, 14);
  }
  return result;
}

void _dispatch_queue_cleanup2(int8x16_t a1)
{
  unint64_t v1;
  unsigned int v2;
  int v3;
  pthread_t v4;
  pthread_attr_t v5;

  do
    v1 = __ldaxr((unint64_t *)&qword_64DF8);
  while (__stxr((v1 & 0xFFFFFF7FFFFFFFFFLL) + 0x40020000000000, (unint64_t *)&qword_64DF8));
  do
    v2 = __ldxr((unsigned int *)&dword_64E10);
  while (__stxr(v2 & 0xFFFBFFFF, (unsigned int *)&dword_64E10));
  _dispatch_lane_barrier_complete((unsigned __int16 *)&_dispatch_main_q, 0, 0, a1);
  if (_dispatch_program_is_probably_callback_driven == 1)
  {
    memset(&v5, 0, sizeof(v5));
    pthread_attr_init(&v5);
    pthread_attr_setdetachstate(&v5, 2);
    v4 = 0;
    v3 = pthread_create(&v4, &v5, (void *(__cdecl *)(void *))_dispatch_sig_thread, 0);
    if (v3)
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unable to create signal thread";
      qword_61258 = v3;
      __break(1u);
    }
    pthread_attr_destroy(&v5);
    sleep_NOCANCEL(1);
  }
  if (_dispatch_main_q_handle_pred != -1)
    dispatch_once_f(&_dispatch_main_q_handle_pred, &_dispatch_main_q, (dispatch_function_t)_dispatch_runloop_queue_handle_init);
  _dispatch_runloop_queue_handle_dispose((mach_port_context_t)&_dispatch_main_q);
}

void _dispatch_sig_thread()
{
  _opaque_pthread_t *v0;
  _BYTE *stackaddr_np;
  uint64_t vars0;

  v0 = pthread_self();
  stackaddr_np = pthread_get_stackaddr_np(v0);
  bzero(&vars0, stackaddr_np - (_BYTE *)&vars0);
  _dispatch_sigsuspend();
}

void _dispatch_sigsuspend()
{
  pthread_sigmask(3, &_dispatch_sigsuspend_mask, 0);
  while (1)
    sigsuspend_NOCANCEL(&_dispatch_sigsuspend_mask);
}

uint64_t OUTLINED_FUNCTION_1_1(char *a1, uint64_t a2, const char *a3)
{
  size_t v3;

  return snprintf(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_2_0()
{
  uint64_t v0;
  uint64_t v1;

  return v0 + v1;
}

uint64_t OUTLINED_FUNCTION_3_1(char *a1, uint64_t a2, const char *a3)
{
  size_t v3;

  return snprintf(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_4_1(uint64_t a1, uint64_t a2, const char *a3)
{
  size_t v3;
  char *v4;

  return snprintf(v4, v3, a3);
}

void _dispatch_apply_invoke(char *a1)
{
  unsigned int *v2;
  unsigned int v3;
  dispatch_once_t *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t StatusReg;
  uint64_t v10;
  int v11;
  void *v12;
  _OWORD *v13;
  _QWORD context[3];

  v2 = (unsigned int *)(a1 + 60);
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 + 1, v2));
  context[1] = 0;
  context[0] = a1;
  context[2] = v3;
  _dispatch_apply_set_attr_behavior(*((int **)a1 + 8), v3);
  v4 = (dispatch_once_t *)(*((_QWORD *)a1 + 5) + 8 * v3);
  if (*v4 != -1)
    dispatch_once_f(v4, context, (dispatch_function_t)_dispatch_apply_invoke3);
  _dispatch_apply_clear_attr_behavior(*((_QWORD *)a1 + 8), v3);
  v5 = (unsigned int *)(a1 + 52);
  do
  {
    v6 = __ldxr(v5);
    v7 = v6 - 1;
  }
  while (__stxr(v7, v5));
  if (!v7)
  {
    v8 = *(_QWORD *)a1;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v10 = *(_QWORD *)(StatusReg + 176);
    if (v10)
      v11 = *(_DWORD *)(v10 + 8) + 1;
    else
      v11 = 1;
    if (v11 > _dispatch_continuation_cache_limit)
    {
      if (v8)
        _dispatch_continuation_free_to_cache_limit(v8);
    }
    else
    {
      *(_QWORD *)(v8 + 16) = v10;
      *(_DWORD *)(v8 + 8) = v11;
      *(_QWORD *)(StatusReg + 176) = v8;
    }
    v12 = (void *)*((_QWORD *)a1 + 5);
    if (v12)
      free(v12);
    v13 = (_OWORD *)*((_QWORD *)a1 + 8);
    if (v13)
    {
      v13[2] = 0u;
      v13[3] = 0u;
      *v13 = 0u;
      v13[1] = 0u;
      free(*((void **)a1 + 8));
    }
    free(a1);
  }
}

void _dispatch_apply_redirect_invoke(char *a1)
{
  unsigned int *v2;
  unsigned int v3;
  dispatch_once_t *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t StatusReg;
  uint64_t v10;
  int v11;
  void *v12;
  _OWORD *v13;
  char *context;
  __int128 v15;

  v2 = (unsigned int *)(a1 + 60);
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 + 1, v2));
  context = a1;
  v15 = xmmword_40020;
  DWORD2(v15) = v3;
  _dispatch_apply_set_attr_behavior(*((int **)a1 + 8), v3);
  v4 = (dispatch_once_t *)(*((_QWORD *)a1 + 5) + 8 * v3);
  if (*v4 != -1)
    dispatch_once_f(v4, &context, (dispatch_function_t)_dispatch_apply_invoke3);
  _dispatch_apply_clear_attr_behavior(*((_QWORD *)a1 + 8), v3);
  v5 = (unsigned int *)(a1 + 52);
  do
  {
    v6 = __ldxr(v5);
    v7 = v6 - 1;
  }
  while (__stxr(v7, v5));
  if (!v7)
  {
    v8 = *(_QWORD *)a1;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v10 = *(_QWORD *)(StatusReg + 176);
    if (v10)
      v11 = *(_DWORD *)(v10 + 8) + 1;
    else
      v11 = 1;
    if (v11 > _dispatch_continuation_cache_limit)
    {
      if (v8)
        _dispatch_continuation_free_to_cache_limit(v8);
    }
    else
    {
      *(_QWORD *)(v8 + 16) = v10;
      *(_DWORD *)(v8 + 8) = v11;
      *(_QWORD *)(StatusReg + 176) = v8;
    }
    v12 = (void *)*((_QWORD *)a1 + 5);
    if (v12)
      free(v12);
    v13 = (_OWORD *)*((_QWORD *)a1 + 8);
    if (v13)
    {
      v13[2] = 0u;
      v13[3] = 0u;
      *v13 = 0u;
      v13[1] = 0u;
      free(*((void **)a1 + 8));
    }
    free(a1);
  }
}

void dispatch_apply_f(size_t iterations, dispatch_queue_t queue, void *context, void (__cdecl *work)(void *, size_t))
{
  _dispatch_apply_with_attr_f(iterations, 0, (__objc2_class **)queue, (uint64_t)context, (uint64_t)work, 1);
}

void _dispatch_apply_with_attr_f(unint64_t a1, uint64_t a2, __objc2_class **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __objc2_class **v6;
  unint64_t StatusReg;
  unint64_t v10;
  unint64_t v11;
  NSObject *v12;
  __int128 *v13;
  __objc2_class **v14;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  unint64_t v36;
  _QWORD *v37;
  __objc2_class **v38;
  int v39;
  uint64_t v40;
  NSObject *v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  NSObject *v45;
  unsigned int *v46;
  int8x16_t v47;
  NSObject *v48;
  unint64_t *v49;
  unint64_t v50;
  unsigned int v51;
  void (__cdecl *v52)(void *);
  NSObject *v53;
  NSObject *isa;
  __objc2_class **v58;
  __int128 v59;
  uint64_t v60;

  if (!a1)
    return;
  v6 = a3;
  if (a2 && (*(_DWORD *)a2 != -1592086528 || ~*(_QWORD *)(a2 + 16) != a2))
    _dispatch_apply_with_attr_f_cold_3(a2);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v10 = StatusReg + 184;
  while (1)
  {
    v10 = *(_QWORD *)v10;
    if (!v10)
      break;
    if (*(char **)(v10 + 8) == "apply")
    {
      v11 = *(_QWORD *)(v10 + 16);
      goto LABEL_10;
    }
  }
  v11 = 0;
LABEL_10:
  v13 = (__int128 *)(StatusReg + 160);
  v12 = *(NSObject **)(StatusReg + 160);
  if (!a3)
  {
    if (!v12)
      goto LABEL_24;
    v14 = *(__objc2_class ***)(StatusReg + 160);
    do
    {
      v6 = v14;
      v14 = (__objc2_class **)v14[3];
      if (!v14)
        break;
    }
    while (v14 != &_dispatch_custom_workloop_root_queue && v14 != &_dispatch_custom_workloop_overcommit_root_queue);
    if (v6 >= &_dispatch_root_queues && v6 < (__objc2_class **)&_dispatch_queue_serial_numbers)
    {
LABEL_24:
      v17 = __clz(__rbit32((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF));
      if (((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF) != 0)
        v18 = v17 + 1;
      else
        v18 = 4;
      if (v18 - 7 <= 0xFFFFFFF9)
        _dispatch_queue_priority_inherit_from_target_cold_1(v18);
      v6 = &_dispatch_root_queues + 16 * (unint64_t)(3 * v18 - 3);
    }
  }
  v19 = *((_DWORD *)v6 + 21);
  v20 = (unsigned __int16)v19 >> 12;
  v21 = (v19 >> 8) & 0xF;
  if (v21)
    v22 = v21;
  else
    v22 = v20;
  if (v6[3])
  {
    v51 = __clz(__rbit32((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF));
    if (((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF) != 0)
      v22 = v51 + 1;
    else
      v22 = 0;
  }
  if (a2)
  {
    if (*(_DWORD *)a2 != -1592086528 || ~*(_QWORD *)(a2 + 16) != a2)
      _dispatch_apply_with_attr_f_cold_3(a2);
    if (!v11)
    {
      v24 = 33;
      switch(v22)
      {
        case 0:
          goto LABEL_38;
        case 1:
          v24 = 5;
          break;
        case 2:
          v24 = 9;
          break;
        case 3:
          v24 = 17;
          break;
        case 4:
          v24 = 21;
          break;
        case 5:
          v24 = 25;
          break;
        case 6:
          break;
        default:
          v24 = 0;
          break;
      }
      v25 = pthread_qos_max_parallelism(v24, 0);
      if (v25 <= 0)
LABEL_38:
        v25 = MEMORY[0xFFFFFC036];
      if (v25 >= MEMORY[0xFFFFFC034])
        v28 = MEMORY[0xFFFFFC034];
      else
        v28 = v25;
      if (*(_QWORD *)(a2 + 8))
      {
        v29 = v22 - 1;
        if (v29 > 5)
          v30 = 0;
        else
          v30 = dword_40040[v29];
        v32 = pthread_qos_max_parallelism(v30, 2);
        if (v32 < 1)
          v31 = 0;
        else
          v31 = (v32 * *(_DWORD *)(a2 + 8));
      }
      else
      {
        v31 = -1;
      }
      if (v31 >= v28)
        v31 = v28;
      if (v31)
      {
        v33 = 0xFFFFLL;
        goto LABEL_74;
      }
LABEL_147:
      _dispatch_apply_with_attr_f_cold_2(a2);
    }
    v33 = 0xFFFFLL;
    v31 = 1;
  }
  else
  {
    v26 = 33;
    switch(v22)
    {
      case 0:
        goto LABEL_40;
      case 1:
        v26 = 5;
        break;
      case 2:
        v26 = 9;
        break;
      case 3:
        v26 = 17;
        break;
      case 4:
        v26 = 21;
        break;
      case 5:
        v26 = 25;
        break;
      case 6:
        break;
      default:
        v26 = 0;
        break;
    }
    v27 = pthread_qos_max_parallelism(v26, 0);
    if (v27 <= 0)
LABEL_40:
      v27 = MEMORY[0xFFFFFC036];
    if (v27 >= MEMORY[0xFFFFFC034])
      v31 = MEMORY[0xFFFFFC034];
    else
      v31 = v27;
    if (v11)
    {
      if (v11 >= v31)
        v31 = 1;
      else
        v31 /= v11;
      if (v11 >= 0xFFFF || a1 >= 0xFFFF)
        v33 = 0xFFFFLL;
      else
        v33 = v11 * a1;
    }
    else
    {
      v33 = a1;
      if (!(_DWORD)v31)
        goto LABEL_147;
    }
  }
LABEL_74:
  if (v31 >= a1)
    v34 = a1;
  else
    v34 = v31;
  v60 = 0;
  v35 = _dispatch_calloc(1uLL, 0x48uLL);
  *((_QWORD *)v35 + 1) = 0;
  *((_QWORD *)v35 + 3) = a1;
  *((_QWORD *)v35 + 4) = v33;
  *((_DWORD *)v35 + 13) = v34;
  *((_DWORD *)v35 + 15) = 0;
  if (a2)
  {
    v36 = (unint64_t)_dispatch_calloc(1uLL, 0x40uLL);
    *(_OWORD *)v36 = 0u;
    *(_OWORD *)(v36 + 16) = 0u;
    *(_OWORD *)(v36 + 32) = 0u;
    *(_OWORD *)(v36 + 48) = 0u;
    *(_DWORD *)v36 = -1592086528;
    *(_QWORD *)(v36 + 16) = ~v36;
    *(_QWORD *)(v36 + 8) = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(v36 + 4) = *(_DWORD *)(a2 + 4);
  }
  else
  {
    v36 = 0;
  }
  *((_QWORD *)v35 + 8) = v36;
  *((_QWORD *)v35 + 5) = 0;
  *((_QWORD *)v35 + 2) = a1;
  v37 = *(_QWORD **)(StatusReg + 176);
  if (v37)
    *(_QWORD *)(StatusReg + 176) = v37[2];
  else
    v37 = _dispatch_continuation_alloc_from_heap();
  *(_QWORD *)v35 = v37;
  v37[4] = a5;
  v37[5] = a4;
  v37[6] = a6;
  v37[7] = v6;
  *v37 = 256;
  *((_DWORD *)v35 + 12) = 0;
  v38 = (__objc2_class **)v6[3];
  if (v38 == &_dispatch_custom_workloop_root_queue || v38 == &_dispatch_custom_workloop_overcommit_root_queue)
  {
    if (((v6[7] ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) != 0)
      dispatch_async_and_wait_f((dispatch_queue_t)v6, v35, (dispatch_function_t)_dispatch_apply_serial);
    else
      _dispatch_apply_serial((uint64_t *)v35);
    return;
  }
  if (v34 < 2 || *((_WORD *)v6 + 40) == 1)
  {
    v52 = (void (__cdecl *)(void *))_dispatch_apply_serial;
    goto LABEL_123;
  }
  if (v38)
  {
    if (v6 == (__objc2_class **)v12)
    {
      v52 = (void (__cdecl *)(void *))_dispatch_apply_serial;
      v53 = v12;
      goto LABEL_124;
    }
    v52 = (void (__cdecl *)(void *))_dispatch_apply_redirect;
LABEL_123:
    v53 = v6;
LABEL_124:
    dispatch_sync_f(v53, v35, v52);
    return;
  }
  v59 = *v13;
  *(_QWORD *)(StatusReg + 160) = v6;
  *(_QWORD *)(StatusReg + 168) = &v59;
  v39 = *((_DWORD *)v35 + 13);
  v40 = (v39 - 1);
  if (v39 < 2)
  {
    v42 = 0;
    v41 = 0;
  }
  else
  {
    v58 = v6;
    v41 = 0;
    v42 = 0;
    v43 = *(_QWORD *)(StatusReg + 32) | 0x10000000;
    v44 = v39 - 1;
    do
    {
      v45 = v41;
      v41 = *(NSObject **)(StatusReg + 176);
      if (v41)
        *(StatusReg + 176) = v41[2];
      else
        v41 = _dispatch_continuation_alloc_from_heap();
      v41->isa = (Class)(&stru_B8 + 76);
      v41[4].isa = (Class)_dispatch_apply_invoke;
      v41[5].isa = (Class)v35;
      v46 = *(unsigned int **)(StatusReg + 224);
      if (v46)
        os_retain(*(void **)(StatusReg + 224));
      v41[3].isa = (Class)v46;
      if (v46 != (unsigned int *)-1)
      {
        if (v46)
          v46 = (unsigned int *)v46[8];
        if (MEMORY[0xFFFFFC100])
          kdebug_trace(771817476, v46, v41, 0, 0);
      }
      v41[1].isa = (Class)v43;
      v41[2].isa = (Class)v45;
      if (!v42)
        v42 = (unint64_t)v41;
      --v44;
    }
    while (v44);
    v39 = *((_DWORD *)v35 + 13);
    v13 = (__int128 *)(StatusReg + 160);
    v6 = v58;
    v40 = v40;
  }
  *((_DWORD *)v35 + 14) = v39;
  *((_QWORD *)v35 + 5) = _dispatch_calloc(v39, 8uLL);
  if (MEMORY[0xFFFFFC100])
  {
    isa = v41;
    do
    {
      if (MEMORY[0xFFFFFC100])
        _dispatch_trace_item_push_internal(v6, isa, v47);
      if (isa == v42)
        break;
      isa = isa[2].isa;
    }
    while (isa);
  }
  v48 = v41;
  do
  {
    _dispatch_introspection_queue_item_enqueue(v6, v48);
    if (v48 == v42)
      break;
    v48 = v48[2].isa;
  }
  while (v48);
  *(_QWORD *)(v42 + 16) = 0;
  v49 = (unint64_t *)(v6 + 6);
  *(_QWORD *)(StatusReg + 976) = v6 + 6;
  do
    v50 = __ldxr(v49);
  while (__stlxr(v42, v49));
  if (v50)
  {
    *(_QWORD *)(v50 + 16) = v41;
    *(_QWORD *)(StatusReg + 976) = 0;
  }
  else
  {
    v6[13] = (__objc2_class *)v41;
    *(_QWORD *)(StatusReg + 976) = 0;
    _dispatch_root_queue_poke_and_wakeup((unsigned int *)v6, v40, 0);
  }
  _dispatch_apply_invoke_and_wait((char *)v35);
  *v13 = v59;
}

void dispatch_apply_with_attr_f(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _dispatch_apply_with_attr_f(a1, a2, 0, a3, a4, 2);
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
  void (__cdecl **v5)(void *, size_t);

  v5 = (void (__cdecl **)(void *, size_t))_dispatch_Block_copy(block);
  dispatch_apply_f(iterations, queue, v5, v5[2]);
  _Block_release(v5);
}

void dispatch_apply_with_attr(unint64_t a1, uint64_t a2, void *aBlock)
{
  uint64_t *v5;

  v5 = (uint64_t *)_dispatch_Block_copy(aBlock);
  _dispatch_apply_with_attr_f(a1, a2, 0, (uint64_t)v5, v5[2], 2);
  _Block_release(v5);
}

double dispatch_apply_attr_init(unint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)a1 = -1592086528;
  *(_QWORD *)(a1 + 16) = ~a1;
  return result;
}

double dispatch_apply_attr_destroy(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t dispatch_apply_attr_set_parallelism(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 == -1 || a2 == 2)
  {
    if (a3 != 1)
    {
      if (!a3)
        dispatch_apply_attr_set_parallelism_cold_4();
      dispatch_apply_attr_set_parallelism_cold_3(a3);
    }
    if (result && (*(_DWORD *)result != -1592086528 || ~*(_QWORD *)(result + 16) != result))
      _dispatch_apply_with_attr_f_cold_3(result);
    *(_QWORD *)(result + 8) = 1;
  }
  else
  {
    if (a2 != 1)
      dispatch_apply_attr_set_parallelism_cold_1(a2);
    if (a3 != 1)
      dispatch_apply_attr_set_parallelism_cold_2(a3);
  }
  return result;
}

unint64_t dispatch_apply_attr_query(unint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  unint64_t StatusReg;
  unint64_t v5;
  unint64_t v6;
  __objc2_class **v7;
  __objc2_class **v8;
  BOOL v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;

  v3 = result;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = StatusReg + 184;
  while (1)
  {
    v5 = *(_QWORD *)v5;
    if (!v5)
      break;
    if (*(char **)(v5 + 8) == "apply")
    {
      v6 = *(_QWORD *)(v5 + 16);
      goto LABEL_6;
    }
  }
  v6 = 0;
LABEL_6:
  v7 = *(__objc2_class ***)(StatusReg + 160);
  if (!v7)
    goto LABEL_18;
  do
  {
    v8 = v7;
    v7 = (__objc2_class **)v7[3];
    if (!v7)
      break;
    v9 = v7 == &_dispatch_custom_workloop_root_queue || v7 == &_dispatch_custom_workloop_overcommit_root_queue;
  }
  while (!v9);
  if (v8 >= &_dispatch_root_queues && v8 < (__objc2_class **)&_dispatch_queue_serial_numbers)
  {
LABEL_18:
    v11 = (*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF;
    v9 = v11 == 0;
    v12 = __clz(__rbit32(v11));
    if (v9)
      result = 4;
    else
      result = v12 + 1;
    if ((result - 7) <= 0xFFFFFFF9)
      _dispatch_queue_priority_inherit_from_target_cold_1(result);
    v8 = &_dispatch_root_queues + 16 * (unint64_t)(3 * result - 3);
  }
  v13 = *((_DWORD *)v8 + 21);
  v14 = (unsigned __int16)v13 >> 12;
  v15 = (v13 >> 8) & 0xF;
  if (v15)
    v16 = v15;
  else
    v16 = v14;
  switch(a2)
  {
    case 0:
      return dispatch_apply_attr_query(v3, 1) != 0;
    case 1:
      if ((a3 & 1) != 0)
      {
        if (!v3)
        {
          v22 = 33;
          switch(v16)
          {
            case 0:
              goto LABEL_54;
            case 1:
LABEL_76:
              v22 = 5;
              break;
            case 2:
LABEL_77:
              v22 = 9;
              break;
            case 3:
LABEL_78:
              v22 = 17;
              break;
            case 4:
LABEL_79:
              v22 = 21;
              break;
            case 5:
LABEL_80:
              v22 = 25;
              break;
            case 6:
              break;
            default:
LABEL_75:
              v22 = 0;
              break;
          }
LABEL_81:
          LODWORD(result) = pthread_qos_max_parallelism(v22, 0);
          if ((int)result <= 0)
LABEL_54:
            LODWORD(result) = MEMORY[0xFFFFFC036];
          if (result >= MEMORY[0xFFFFFC034])
            result = MEMORY[0xFFFFFC034];
          else
            result = result;
          if (v6)
          {
            if (v6 < result)
            {
              result /= v6;
              return result;
            }
            return 1;
          }
          return result;
        }
        if (*(_DWORD *)v3 != -1592086528 || ~*(_QWORD *)(v3 + 16) != v3)
          _dispatch_apply_with_attr_f_cold_3(v3);
        if (v6)
          return 1;
        v17 = 33;
        switch(v16)
        {
          case 0:
            goto LABEL_48;
          case 1:
LABEL_56:
            v17 = 5;
            break;
          case 2:
LABEL_57:
            v17 = 9;
            break;
          case 3:
LABEL_58:
            v17 = 17;
            break;
          case 4:
LABEL_59:
            v17 = 21;
            break;
          case 5:
LABEL_60:
            v17 = 25;
            break;
          case 6:
            break;
          default:
LABEL_55:
            v17 = 0;
            break;
        }
LABEL_61:
        v21 = pthread_qos_max_parallelism(v17, 0);
        if (v21 <= 0)
LABEL_48:
          v21 = MEMORY[0xFFFFFC036];
        if (v21 >= MEMORY[0xFFFFFC034])
          v19 = MEMORY[0xFFFFFC034];
        else
          v19 = v21;
        if (*(_QWORD *)(v3 + 8))
        {
          v23 = v16 - 1;
          if (v23 > 5)
            v20 = 0;
          else
            v20 = dword_40040[v23];
          goto LABEL_70;
        }
      }
      else
      {
        if (!v3)
        {
          LODWORD(result) = pthread_qos_max_parallelism(33, 0);
          if ((int)result <= 0)
            LODWORD(result) = MEMORY[0xFFFFFC036];
          return result;
        }
        if (*(_DWORD *)v3 != -1592086528 || ~*(_QWORD *)(v3 + 16) != v3)
          _dispatch_apply_with_attr_f_cold_3(v3);
        v18 = pthread_qos_max_parallelism(33, 0);
        if (v18 <= 0)
          v18 = MEMORY[0xFFFFFC036];
        v19 = v18;
        if (*(_QWORD *)(v3 + 8))
        {
          v20 = 33;
LABEL_70:
          v25 = pthread_qos_max_parallelism(v20, 2);
          if (v25 < 1)
            v24 = 0;
          else
            v24 = (v25 * *(_DWORD *)(v3 + 8));
          goto LABEL_72;
        }
      }
      v24 = -1;
LABEL_72:
      if (v24 >= v19)
        return v19;
      else
        return v24;
    case 2:
      if (!v3)
      {
        v22 = 33;
        switch(v16)
        {
          case 0:
            goto LABEL_54;
          case 1:
            goto LABEL_76;
          case 2:
            goto LABEL_77;
          case 3:
            goto LABEL_78;
          case 4:
            goto LABEL_79;
          case 5:
            goto LABEL_80;
          case 6:
            goto LABEL_81;
          default:
            goto LABEL_75;
        }
      }
      if (*(_DWORD *)v3 != -1592086528 || ~*(_QWORD *)(v3 + 16) != v3)
        _dispatch_apply_with_attr_f_cold_3(v3);
      if (!v6)
      {
        v17 = 33;
        switch(v16)
        {
          case 0:
            goto LABEL_48;
          case 1:
            goto LABEL_56;
          case 2:
            goto LABEL_57;
          case 3:
            goto LABEL_58;
          case 4:
            goto LABEL_59;
          case 5:
            goto LABEL_60;
          case 6:
            goto LABEL_61;
          default:
            goto LABEL_55;
        }
      }
      return 1;
  }
  return result;
}

int *_dispatch_apply_set_attr_behavior(int *result, uint64_t a2)
{
  if (result)
  {
    if (*((_QWORD *)result + 1))
    {
      result = (int *)__bsdthread_ctl(0x2000, 1, a2);
      if ((_DWORD)result)
      {
        result = __error();
        if (*result != 45)
          __break(1u);
      }
    }
  }
  return result;
}

void _dispatch_apply_invoke3(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  void (__cdecl *v6)(void *);
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t StatusReg;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  void *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v28;
  _QWORD v29[3];

  v1 = *a1;
  v2 = *(_QWORD *)(*a1 + 24);
  v3 = (unint64_t *)(*a1 + 8);
  do
    v4 = __ldxr(v3);
  while (__stxr(v4 + 1, v3));
  if (v4 >= v2)
    return;
  v5 = 0;
  v6 = *(void (__cdecl **)(void *))(*(_QWORD *)v1 + 32);
  v7 = *(void **)(*(_QWORD *)v1 + 40);
  v8 = "apply";
  v9 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  v10 = *(_QWORD *)(v1 + 32);
  v29[1] = "apply";
  v29[2] = v10;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v29[0] = *(_QWORD *)(StatusReg + 184);
  *(_QWORD *)(StatusReg + 184) = v29;
  v28 = 0uLL;
  if ((a1[1] & 1) != 0)
  {
    v12 = *(_QWORD *)(*(_QWORD *)v1 + 56);
    v28 = *(_OWORD *)(StatusReg + 160);
    *(_QWORD *)(StatusReg + 160) = v12;
    *(_QWORD *)(StatusReg + 168) = &v28;
    LODWORD(v8) = *(_DWORD *)(v12 + 84);
    v13 = *(_QWORD *)(StatusReg + 200);
    if ((_DWORD)v13)
    {
      v14 = (unsigned __int16)v8 & 0xFFF;
      if (((unsigned __int16)v8 & 0xFFF) != 0)
      {
        if (((unsigned __int16)v13 & 0xFFFu) > v14)
          v14 = v13 & 0xFFF;
        if ((unsigned __int16)v8 >> 12 <= v14 >> 8)
          v15 = 0x40000000;
        else
          v15 = 1140912128;
        LODWORD(v8) = v13 & 0x880F0000 | v14 | v15 & v8;
      }
      else
      {
        v16 = v13 | 0x40000000;
        if ((v13 & 0xFFF) == 0)
          v16 = *(_QWORD *)(StatusReg + 200);
        v17 = (unsigned __int16)v8 >> 12;
        LODWORD(v8) = v16 & 0xFFFF0FFF | v8 & 0x400F000;
        if (v17 <= ((v16 >> 8) & 0xF))
          LODWORD(v8) = v16;
      }
    }
    else
    {
LABEL_36:
      LODWORD(v8) = v8 & 0xFFF0FFFF;
    }
    *(_QWORD *)(StatusReg + 200) = v8;
    v5 = v13 & 0xFFF0FFFF;
  }
  v24 = v5;
  v25 = StatusReg;
  v18 = 0;
  v26 = v1;
  v19 = *(_DWORD *)(v1 + 48);
  do
  {
    if ((v19 & 0x1000000) != 0)
    {
      v20 = objc_autoreleasePoolPush();
      if ((v9 & 1) != 0)
      {
LABEL_21:
        _dispatch_introspection_callout_entry(v7, v6);
        _dispatch_client_callout2((uint64_t)v7, v4, (uint64_t (*)(void))v6);
        goto LABEL_25;
      }
    }
    else
    {
      v20 = 0;
      if ((v9 & 1) != 0)
        goto LABEL_21;
    }
    if ((v9 & 2) == 0)
    {
      LODWORD(v13) = v9;
      qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: apply continuation has invalid flags";
      qword_61258 = v9;
      __break(1u);
      goto LABEL_36;
    }
    v21 = *((unsigned int *)a1 + 4);
    _dispatch_introspection_callout_entry(v7, v6);
    _dispatch_client_callout3_a((uint64_t)v7, v4, v21, (uint64_t (*)(void))v6);
LABEL_25:
    _dispatch_introspection_callout_return(v7, v6);
    ++v18;
    do
    {
      v4 = __ldxr(v3);
      LODWORD(v8) = __stxr(v4 + 1, v3);
    }
    while ((_DWORD)v8);
    if (v20)
      objc_autoreleasePoolPop(v20);
  }
  while (v4 < v2);
  if ((a1[1] & 1) != 0)
  {
    *(_QWORD *)(v25 + 200) = *(_QWORD *)(v25 + 200) & 0xF0000 | v24;
    *(_OWORD *)(v25 + 160) = v28;
  }
  *(_QWORD *)(v25 + 184) = v29[0];
  v22 = (unint64_t *)(v26 + 16);
  do
    v23 = __ldxr(v22);
  while (__stlxr(v23 - v18, v22));
}

uint64_t _dispatch_apply_clear_attr_behavior(uint64_t result, uint64_t a2)
{
  if (result && *(_QWORD *)(result + 8))
  {
    result = __bsdthread_ctl(0x2000, 2, a2);
    if ((_DWORD)result)
      __break(1u);
  }
  return result;
}

void _dispatch_apply_serial(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void (__cdecl *v12)(void *);
  uint64_t v13;
  unint64_t StatusReg;
  uint64_t v15;
  int v16;
  void *v17;
  _OWORD *v18;

  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD *)(*a1 + 56);
  if (v3)
  {
    do
    {
      v4 = *(_DWORD *)(v3 + 80);
      v3 = *(_QWORD *)(v3 + 24);
      if (v3)
        v5 = (v4 & 0x30000) == 0;
      else
        v5 = 0;
    }
    while (v5);
    v6 = (v4 & 0x10000) == 0;
  }
  else
  {
    v6 = 1;
  }
  v7 = 0;
  if ((unint64_t)a1[3] <= 1)
    v8 = 1;
  else
    v8 = a1[3];
  do
  {
    if (v6)
      v9 = 0;
    else
      v9 = objc_autoreleasePoolPush();
    v10 = v2[6];
    if ((v10 & 1) != 0)
    {
      v12 = (void (__cdecl *)(void *))v2[4];
      v11 = (void *)v2[5];
      _dispatch_introspection_callout_entry(v11, v12);
      _dispatch_client_callout2((uint64_t)v11, v7, (uint64_t (*)(void))v12);
    }
    else
    {
      if ((v10 & 2) == 0)
      {
        qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: apply continuation has invalid flags";
        qword_61258 = v10;
        __break(1u);
        return;
      }
      v12 = (void (__cdecl *)(void *))v2[4];
      v11 = (void *)v2[5];
      _dispatch_introspection_callout_entry(v11, v12);
      _dispatch_client_callout3_a((uint64_t)v11, v7, 0, (uint64_t (*)(void))v12);
    }
    _dispatch_introspection_callout_return(v11, v12);
    if (v9)
      objc_autoreleasePoolPop(v9);
    ++v7;
  }
  while (v8 != v7);
  v13 = *a1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v15 = *(_QWORD *)(StatusReg + 176);
  if (v15)
    v16 = *(_DWORD *)(v15 + 8) + 1;
  else
    v16 = 1;
  if (v16 > _dispatch_continuation_cache_limit)
  {
    if (v13)
      _dispatch_continuation_free_to_cache_limit(v13);
  }
  else
  {
    *(_QWORD *)(v13 + 16) = v15;
    *(_DWORD *)(v13 + 8) = v16;
    *(_QWORD *)(StatusReg + 176) = v13;
  }
  v17 = (void *)a1[5];
  if (v17)
    free(v17);
  v18 = (_OWORD *)a1[8];
  if (v18)
  {
    v18[2] = 0u;
    v18[3] = 0u;
    *v18 = 0u;
    v18[1] = 0u;
    free((void *)a1[8]);
  }
  free(a1);
}

void _dispatch_apply_redirect(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t StatusReg;
  int v12;
  uint64_t v13;
  NSObject *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  unsigned int *v19;
  int8x16_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *isa;
  unsigned int v28;
  uint64_t v29;
  uint64_t *v30;

  v1 = (*((_DWORD *)a1 + 13) - 1);
  v2 = *(_QWORD *)(*a1 + 56);
  v3 = v2;
  do
  {
    if (*(_WORD *)(v3 + 80) == 1)
    {
      v6 = 0;
    }
    else
    {
      v4 = (unint64_t *)(v3 + 56);
      while (1)
      {
        v5 = __ldxr(v4);
        if ((v5 & 0x20000000000000) != 0)
          break;
        v6 = (v5 >> 41) & 0x1FFF;
        if ((_DWORD)v6 == 4096)
          break;
        LODWORD(v6) = 4096 - v6;
        if ((int)v6 >= (int)v1)
          v6 = v1;
        else
          v6 = v6;
        if (!__stxr(v5 + (v6 << 41), v4))
          goto LABEL_10;
      }
      v6 = 0;
      __clrex();
    }
LABEL_10:
    v7 = (v1 - v6);
    if ((int)v1 > (int)v6)
    {
      if (v2 != v3)
      {
        v8 = v2;
        do
        {
          v9 = (unint64_t *)(v8 + 56);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 - (v7 << 41), v9));
          v8 = *(_QWORD *)(v8 + 24);
        }
        while (v8 != v3);
      }
      if (!(_DWORD)v6)
      {
        _dispatch_apply_serial(a1);
        return;
      }
      *((_DWORD *)a1 + 13) -= v7;
      v1 = v6;
    }
    if (!*((_DWORD *)a1 + 12))
      *((_DWORD *)a1 + 12) = (*(_DWORD *)(v3 + 80) << 8) & 0x3000000;
    v3 = *(_QWORD *)(v3 + 24);
  }
  while (*(_QWORD *)(v3 + 24));
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v12 = *((_DWORD *)a1 + 13);
  v13 = (v12 - 1);
  v30 = a1;
  if (v12 < 2)
  {
    v15 = 0;
    v14 = 0;
  }
  else
  {
    v29 = v1;
    v14 = 0;
    v15 = 0;
    v16 = *(_QWORD *)(StatusReg + 32) | 0x10000000;
    v28 = v12 - 1;
    v17 = v12 - 1;
    do
    {
      v18 = v14;
      v14 = *(NSObject **)(StatusReg + 176);
      if (v14)
      {
        *(StatusReg + 176) = v14[2];
      }
      else
      {
        v14 = _dispatch_continuation_alloc_from_heap();
        a1 = v30;
      }
      v14->isa = (Class)(&stru_B8 + 76);
      v14[4].isa = (Class)_dispatch_apply_redirect_invoke;
      v14[5].isa = (Class)a1;
      v19 = *(unsigned int **)(StatusReg + 224);
      if (v19)
      {
        os_retain(*(void **)(StatusReg + 224));
        a1 = v30;
      }
      v14[3].isa = (Class)v19;
      if (v19 != (unsigned int *)-1)
      {
        if (v19)
          v19 = (unsigned int *)v19[8];
        if (MEMORY[0xFFFFFC100])
        {
          kdebug_trace(771817476, v19, v14, 0, 0);
          a1 = v30;
        }
      }
      v14[1].isa = (Class)v16;
      v14[2].isa = (Class)v18;
      if (!v15)
        v15 = (unint64_t)v14;
      --v17;
    }
    while (v17);
    v12 = *((_DWORD *)a1 + 13);
    v1 = v29;
    v13 = v28;
  }
  *((_DWORD *)a1 + 14) = v12;
  v30[5] = (uint64_t)_dispatch_calloc(v12, 8uLL);
  if (MEMORY[0xFFFFFC100])
  {
    isa = v14;
    do
    {
      if (MEMORY[0xFFFFFC100])
        _dispatch_trace_item_push_internal((_QWORD *)v3, isa, v20);
      if (isa == v15)
        break;
      isa = isa[2].isa;
    }
    while (isa);
  }
  v21 = v14;
  do
  {
    _dispatch_introspection_queue_item_enqueue(v3, v21);
    if (v21 == v15)
      break;
    v21 = v21[2].isa;
  }
  while (v21);
  *(_QWORD *)(v15 + 16) = 0;
  v22 = (unint64_t *)(v3 + 48);
  *(_QWORD *)(StatusReg + 976) = v3 + 48;
  do
    v23 = __ldxr(v22);
  while (__stlxr(v15, v22));
  v24 = (char *)v30;
  if (v23)
  {
    *(_QWORD *)(v23 + 16) = v14;
    *(_QWORD *)(StatusReg + 976) = 0;
  }
  else
  {
    *(_QWORD *)(v3 + 104) = v14;
    *(_QWORD *)(StatusReg + 976) = 0;
    _dispatch_root_queue_poke_and_wakeup((unsigned int *)v3, v13, 0);
    v24 = (char *)v30;
  }
  _dispatch_apply_invoke_and_wait(v24);
  for (; v2 != v3; v2 = *(_QWORD *)(v2 + 24))
  {
    v25 = (unint64_t *)(v2 + 56);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 - (v1 << 41), v25));
  }
}

void _dispatch_apply_invoke_and_wait(char *a1)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  dispatch_once_t *v5;
  int v6;
  uint64_t v7;
  uint64_t i;
  dispatch_once_t *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t StatusReg;
  uint64_t v15;
  int v16;
  void *v17;
  _OWORD *v18;
  char *context;
  __int128 v20;

  v2 = (unsigned int *)(a1 + 60);
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 + 1, v2));
  context = a1;
  v20 = xmmword_40030;
  DWORD2(v20) = v3;
  v4 = v3;
  _dispatch_apply_set_attr_behavior(*((int **)a1 + 8), v3);
  v5 = (dispatch_once_t *)(*((_QWORD *)a1 + 5) + 8 * v3);
  if (*v5 != -1)
    dispatch_once_f(v5, &context, (dispatch_function_t)_dispatch_apply_invoke3);
  _dispatch_apply_clear_attr_behavior(*((_QWORD *)a1 + 8), v3);
  v6 = *((_DWORD *)a1 + 14);
  if (v6 >= 1)
  {
    v7 = 0;
    for (i = 0; i < v6; ++i)
    {
      if (8 * v4 != v7)
      {
        v9 = (dispatch_once_t *)(*((_QWORD *)a1 + 5) + v7);
        if (*v9 != -1)
          dispatch_once_f(v9, 0, (dispatch_function_t)_dispatch_no_op);
        v6 = *((_DWORD *)a1 + 14);
      }
      v7 += 8;
    }
  }
  v10 = (unsigned int *)(a1 + 52);
  do
  {
    v11 = __ldxr(v10);
    v12 = v11 - 1;
  }
  while (__stxr(v12, v10));
  if (!v12)
  {
    v13 = *(_QWORD *)a1;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v15 = *(_QWORD *)(StatusReg + 176);
    if (v15)
      v16 = *(_DWORD *)(v15 + 8) + 1;
    else
      v16 = 1;
    if (v16 > _dispatch_continuation_cache_limit)
    {
      if (v13)
        _dispatch_continuation_free_to_cache_limit(v13);
    }
    else
    {
      *(_QWORD *)(v13 + 16) = v15;
      *(_DWORD *)(v13 + 8) = v16;
      *(_QWORD *)(StatusReg + 176) = v13;
    }
    v17 = (void *)*((_QWORD *)a1 + 5);
    if (v17)
      free(v17);
    v18 = (_OWORD *)*((_QWORD *)a1 + 8);
    if (v18)
    {
      v18[2] = 0u;
      v18[3] = 0u;
      *v18 = 0u;
      v18[1] = 0u;
      free(*((void **)a1 + 8));
    }
    free(a1);
  }
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  char v10;
  int v11;
  unint64_t v12;
  unsigned int *v13;
  int v14;

  v6 = (*((uint64_t (**)(dispatch_source_type_t, uintptr_t, uintptr_t))type + 4))(type, handle, mask);
  if (!v6)
    return 0;
  v7 = v6;
  v8 = _dispatch_object_alloc(OS_dispatch_source, 120);
  v9 = v8;
  v10 = *(_BYTE *)(*(_QWORD *)v7 + 10);
  *(_DWORD *)(v8 + 8) += 2;
  if (*(_BYTE *)(*(_QWORD *)v8 + 40) == 19)
    ++*(_DWORD *)(v8 + 8);
  *(_QWORD *)(v8 + 16) = -1985229329;
  if ((v10 & 2) != 0)
    v11 = 67108865;
  else
    v11 = 4194305;
  *(_DWORD *)(v8 + 80) = v11;
  *(_QWORD *)(v8 + 56) = 0x19FFE0000000000;
  do
    v12 = __ldxr(&_dispatch_queue_serial_numbers);
  while (__stxr(v12 + 1, &_dispatch_queue_serial_numbers));
  *(_QWORD *)(v8 + 64) = v12;
  *(_QWORD *)(v8 + 72) = "source";
  *(_QWORD *)(v8 + 88) = v7;
  *(_QWORD *)(v7 + 8) = ~v8;
  if (queue)
  {
    if ((HIBYTE(queue[10].isa) & 8) != 0 && (*(_BYTE *)(v7 + 29) & 2) == 0)
      dispatch_source_create_cold_2(v8);
    if (LODWORD(queue[1].isa) != 0x7FFFFFFF)
    {
      v13 = (unsigned int *)&queue[1];
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      if (v14 <= 0)
        dispatch_set_target_queue_cold_2();
    }
  }
  else
  {
    queue = (dispatch_queue_t)&off_653C0;
  }
  *(_QWORD *)(v8 + 24) = queue;
  if ((*(_BYTE *)(v7 + 29) & 2) != 0 && (*(_BYTE *)(v7 + 30) & 0x10) != 0)
    dispatch_source_set_timer((dispatch_source_t)v8, 0, handle, 0xFFFFFFFFFFFFFFFFLL);
  return v9;
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  _DWORD *v4;
  uint64_t v5;
  int64_t v6;
  unsigned __int8 *isa;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t (*v15)(unint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;

  isa = (unsigned __int8 *)source[11].isa;
  if ((isa[29] & 2) == 0)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Attempt to set timer on a non-timer source";
    qword_61258 = (uint64_t)source;
    __break(1u);
    goto LABEL_51;
  }
  v5 = leeway;
  v6 = start;
  v10 = isa[30];
  if ((v10 & 0x10) == 0)
  {
    v4 = _dispatch_calloc(1uLL, 0x20uLL);
    if (interval)
    {
      if (interval >= 0x7FFFFFFFFFFFFFFFLL)
        interval = 0x7FFFFFFFFFFFFFFFLL;
      if (v5 >= 0x7FFFFFFFFFFFFFFFLL)
        v11 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v11 = v5;
      if (v6 != -1)
        goto LABEL_10;
      goto LABEL_56;
    }
LABEL_51:
    if (v6 != -1)
    {
      _dispatch_bug_deprecated("Setting timer interval to 0 requests a 1ns timer, did you mean FOREVER (a one-shot timer)?");
      if (v5 >= 0x7FFFFFFFFFFFFFFFLL)
        v11 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v11 = v5;
      interval = 1;
LABEL_10:
      switch(v6)
      {
        case -9223372036854775808:
          v13 = 1;
          v12 = mach_continuous_time();
          goto LABEL_58;
        case -2:
          v12 = clock_gettime_nsec_np(_CLOCK_REALTIME);
          v13 = 2;
          goto LABEL_69;
        case 0:
          v12 = mach_absolute_time();
          v13 = 0;
LABEL_58:
          if (!_dispatch_host_time_nano2mach)
          {
            if (interval > 0x7FFFFFFFFFFFFFFELL)
            {
              interval = 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              v26 = (3 * interval * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
              v27 = (v26 + ((3 * interval - v26) >> 1)) >> 6;
              if (interval > 0x5555555555555554)
                v27 = 3 * (interval / 0x7D);
              if (v27 <= 1)
                interval = 1;
              else
                interval = v27;
            }
            goto LABEL_65;
          }
          v33 = v12;
          v34 = _dispatch_host_time_nano2mach(interval);
          if (v34 <= 1)
            interval = 1;
          else
            interval = v34;
          if (!_dispatch_host_time_nano2mach)
          {
            v12 = v33;
LABEL_65:
            if (v11)
            {
              if (v11 > 0x7FFFFFFFFFFFFFFELL)
              {
                v11 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else if (v11 > 0x5555555555555554)
              {
                v11 = 3 * (v11 / 0x7D);
              }
              else
              {
                v28 = (3 * v11 * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
                v11 = (v28 + ((3 * v11 - v28) >> 1)) >> 6;
              }
            }
            goto LABEL_69;
          }
          v11 = _dispatch_host_time_nano2mach(v11);
          v12 = v33;
LABEL_69:
          v29 = interval >> 1;
          if (v11 < interval >> 1)
            v29 = v11;
          if (interval >= 0x7FFFFFFFFFFFFFFFLL)
            v29 = v11;
          v4[6] = v13;
          v30 = v29 + v12;
          if (v30 >= 0x7FFFFFFFFFFFFFFFLL)
            v30 = 0x7FFFFFFFFFFFFFFFLL;
          *(_QWORD *)v4 = v12;
          *((_QWORD *)v4 + 1) = v30;
          *((_QWORD *)v4 + 2) = interval;
          goto LABEL_76;
      }
      v23 = v6 & 0x7FFFFFFFFFFFFFFFLL;
      if ((v6 & 0x4000000000000000) != 0)
        v24 = 2;
      else
        v24 = 1;
      if ((v6 & 0x4000000000000000) != 0)
        v23 = -v6;
      if (v6 < 0)
        v13 = v24;
      else
        v13 = 0;
      if (v6 >= 0)
        v23 = v6;
      if (v23 >> 62)
        v12 = -1;
      else
        v12 = v23;
LABEL_57:
      if (v13 == 2)
        goto LABEL_69;
      goto LABEL_58;
    }
    if (v5 >= 0x7FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v5;
    interval = 1;
LABEL_56:
    v13 = (isa[30] >> 2) & 3;
    v12 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_57;
  }
  v14 = (unint64_t)_dispatch_calloc(1uLL, 0x20uLL);
  v4 = (_DWORD *)v14;
  *(_DWORD *)(v14 + 24) = 0;
  if (!v6)
  {
    if (interval)
    {
      v16 = 16666666;
      v17 = 1892160075;
      if ((v10 & 0x20) == 0)
      {
        v17 = 31536000000;
        v16 = 1000000;
      }
      v18 = v16 * interval;
      if (v17 >= interval)
        v14 = v18;
      else
        v14 = 31536000000000000;
      v6 = (int64_t)&_dispatch_host_time_nano2mach;
      v15 = _dispatch_host_time_nano2mach;
      if (!_dispatch_host_time_nano2mach)
      {
        if (v14 > 0x7FFFFFFFFFFFFFFELL)
        {
          v20 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else if (v14 > 0x5555555555555554)
        {
          v20 = 3 * (v14 / 0x7D);
        }
        else
        {
          v19 = (3 * v14 * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
          v20 = (v19 + ((3 * v14 - v19) >> 1)) >> 6;
        }
        goto LABEL_27;
      }
    }
    else
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Setting interval to 0";
      __break(1u);
    }
    v20 = v15(v14);
LABEL_27:
    v21 = mach_absolute_time();
    if (v5 > 0x3E8)
    {
      if (v5 != -1)
      {
LABEL_107:
        qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Passing an invalid leeway";
        __break(1u);
        return;
      }
      if ((v10 & 0x20) != 0)
      {
        if (*(_QWORD *)v6)
          v22 = (*(uint64_t (**)(uint64_t))v6)(16666666);
        else
          v22 = 399999;
      }
      else
      {
        v22 = v20 >> 1;
      }
    }
    else
    {
      v22 = v20 * v5 / 0x3E8;
    }
    v13 = 0;
    v25 = (v21 + v20) / v20 * v20;
    v4[6] = 0;
    *(_QWORD *)v4 = v25;
    *((_QWORD *)v4 + 1) = v22 + v25;
    *((_QWORD *)v4 + 2) = v20;
    goto LABEL_76;
  }
  if (v6 != -1)
  {
LABEL_106:
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Start value is not DISPATCH_TIME_NOW or DISPATCH_TIME_FOREVER";
    __break(1u);
    goto LABEL_107;
  }
  v13 = 0;
  *(_QWORD *)(v14 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  *(int64x2_t *)v14 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
LABEL_76:
  if (v13 != ((isa[30] >> 2) & 3) && isa[28] == 236)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Attempting to modify timer clock";
    __break(1u);
    goto LABEL_106;
  }
  if (_dispatch_source_timer_telemetry_pred != -1)
    dispatch_once_f(&_dispatch_source_timer_telemetry_pred, 0, (dispatch_function_t)_dispatch_source_timer_telemetry_init);
  if (_dispatch_source_timer_use_telemetry == 1)
    _dispatch_source_timer_telemetry_slow(v13, (uint64_t *)v4);
  v31 = (unint64_t *)(isa + 104);
  do
    v32 = (void *)__ldxr(v31);
  while (__stlxr((unint64_t)v4, v31));
  if (v32)
    free(v32);
  (*((void (**)(dispatch_source_t, _QWORD, uint64_t))source->isa + 10))(source, 0, 2);
}

uint64_t _dispatch_source_is_timer(uint64_t a1)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(a1 + 88) + 29) >> 1) & 1;
}

void _dispatch_source_dispose(uint64_t *a1, _BYTE *a2)
{
  unint64_t *v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;

  if (MEMORY[0xFFFFFC100])
    kdebug_trace(772079668, a1, 0, 0, 0);
  v4 = (unint64_t *)(a1[11] + 56);
  do
    v5 = __ldxr(v4);
  while (__stxr(0, v4));
  if (v5)
    _dispatch_source_handler_dispose(v5);
  v6 = (unint64_t *)(a1[11] + 40);
  do
    v7 = __ldxr(v6);
  while (__stxr(0, v6));
  if (v7)
    _dispatch_source_handler_dispose(v7);
  v8 = (unint64_t *)(a1[11] + 48);
  do
    v9 = __ldxr(v8);
  while (__stxr(0, v8));
  if (v9)
    _dispatch_source_handler_dispose(v9);
  _dispatch_unote_dispose(a1[11]);
  a1[11] = 0;
  _dispatch_lane_class_dispose(a1, a2);
}

uint64_t _dispatch_source_xref_dispose(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 80) & 0x14000000) == 0x4000000 && *(_QWORD *)(*(_QWORD *)(a1 + 88) + 48))
    _dispatch_source_xref_dispose_cold_1(*(_DWORD *)(a1 + 80));
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 80))(a1, 0, 2);
}

intptr_t dispatch_source_testcancel(dispatch_source_t source)
{
  return ((unint64_t)LODWORD(source[10].isa) >> 28) & 1;
}

uintptr_t dispatch_source_get_mask(dispatch_source_t source)
{
  Class isa;

  isa = source[11].isa;
  if (((uint64_t)source[10].isa & 0x10000000) != 0)
    return 0;
  if ((*((_BYTE *)isa + 29) & 0x10) != 0)
    return 0x80000000;
  if ((*((_BYTE *)isa + 29) & 2) != 0)
    return *((unsigned __int8 *)isa + 30);
  return *((unsigned int *)isa + 8);
}

uintptr_t dispatch_source_get_handle(dispatch_source_t source)
{
  Class isa;
  unint64_t v2;

  isa = source[11].isa;
  if (*((unsigned __int8 *)isa + 28) == 236
    && (v2 = ((unint64_t)*((unsigned __int8 *)isa + 30) >> 2) & 3, (_DWORD)v2 != 3))
  {
    return v2 + 1;
  }
  else
  {
    return *((unsigned int *)isa + 6);
  }
}

uintptr_t dispatch_source_get_data(dispatch_source_t source)
{
  Class isa;
  char v2;
  uintptr_t v3;

  isa = source[11].isa;
  v2 = *((_BYTE *)isa + 29);
  if ((v2 & 0x10) != 0)
    return 0x80000000;
  v3 = *((_QWORD *)isa + 8);
  if ((v2 & 4) != 0)
    return v3;
  else
    return v3;
}

uint64_t dispatch_source_get_extended_data(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if (a3)
  {
    v4 = *(_QWORD *)(a1 + 88);
    if ((*(_BYTE *)(v4 + 29) & 4) != 0)
    {
      v7 = *(_QWORD *)(v4 + 64);
      v6 = v7;
      v5 = HIDWORD(v7);
    }
    else
    {
      v5 = 0;
      v6 = (*(_BYTE *)(v4 + 29) & 0x10) != 0 ? 0x80000000 : *(_QWORD *)(v4 + 64);
    }
    if (a3 >= 8)
    {
      *a2 = v6;
      if (a3 >= 0x10)
      {
        a2[1] = v5;
        if (a3 != 16)
          bzero(a2 + 2, a3 - 16);
      }
    }
  }
  if (a3 >= 0x10)
    return 16;
  else
    return a3;
}

void dispatch_source_merge_data(dispatch_source_t source, uintptr_t value)
{
  Class isa;
  int v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  if (((uint64_t)source[10].isa & 0x10800000) == 0)
  {
    isa = source[11].isa;
    v3 = *((char *)isa + 28);
    switch(v3)
    {
      case -23:
        *((_QWORD *)isa + 9) = value;
        break;
      case -22:
        v6 = (unint64_t *)((char *)isa + 72);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 | value, v6));
        break;
      case -21:
        v4 = (unint64_t *)((char *)isa + 72);
        do
          v5 = __ldxr(v4);
        while (__stxr(v5 + value, v4));
        break;
      default:
        dispatch_source_merge_data_cold_1(v3);
    }
    (*((void (**)(dispatch_source_t, _QWORD, uint64_t))source->isa + 10))(source, 0, 2);
  }
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  _dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 0, 1);
}

unint64_t *_dispatch_source_set_handler(uint64_t a1, void (**aBlock)(uint64_t a1), uint64_t a3, int a4)
{
  unint64_t StatusReg;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t *v19;
  uint64_t v20;
  int v22;
  const char *v23;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v9 = *(uint64_t **)(StatusReg + 176);
  if (!v9)
  {
    v9 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
    if (aBlock)
      goto LABEL_3;
LABEL_12:
    *v9 = 256;
    v9[4] = 0;
    goto LABEL_13;
  }
  *(_QWORD *)(StatusReg + 176) = v9[2];
  if (!aBlock)
    goto LABEL_12;
LABEL_3:
  v10 = 4 * (a3 != 0);
  if (a4)
  {
    v11 = _dispatch_Block_copy(aBlock);
    v12 = v10 | 0x110;
    v13 = aBlock[2];
    if (v13 == ___dispatch_block_create_block_invoke)
    {
      *v9 = v12;
      v9[5] = (uint64_t)v11;
      _dispatch_continuation_init_slow(v9, (unsigned int *)a1, 1073741888);
      goto LABEL_13;
    }
    if (a3)
      v13 = (void (*)(uint64_t))_dispatch_call_block_and_release;
    *v9 = v12;
    v9[4] = (uint64_t)v13;
    v9[5] = (uint64_t)v11;
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 32);
    *v9 = v10 | 0x140;
    v9[4] = (uint64_t)aBlock;
    v9[5] = v14;
  }
  v9[3] = 0;
  if (MEMORY[0xFFFFFC100])
    goto LABEL_38;
  while (1)
  {
    v9[1] = 0;
LABEL_13:
    v15 = (unint64_t *)(a1 + 56);
    do
    {
      v16 = __ldxr(v15);
      if ((~v16 & 0x180000000000000) != 0)
      {
        __clrex();
        v22 = *(_DWORD *)(a1 + 80);
        if ((v22 & 0x4000000) != 0)
        {
          qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot change a handler of this source after it has been activated";
          qword_61258 = a3;
          __break(1u);
        }
        else
        {
          if ((v22 & 0x10000000) != 0)
          {
LABEL_36:
            v9[6] = a3;
            return _dispatch_barrier_trysync_or_async_f((unint64_t *)a1, v9, (uint64_t (*)(void))_dispatch_source_set_handler_slow, 0);
          }
          if (!MEMORY[0xFFFFFC100])
          {
LABEL_34:
            if (a3 == 2 || !aBlock)
            {
              if (a3 == 2)
                v23 = "Setting registration handler after the source has been activated";
              else
                v23 = "Clearing handler after the source has been activated";
              _dispatch_bug_deprecated(v23);
            }
            goto LABEL_36;
          }
        }
        kdebug_trace(771883020, a1, 0, 0, 0);
        goto LABEL_34;
      }
    }
    while (__stxr(v16 + 0x400000000000000, v15));
    if ((v16 & 0x200000000000000) == 0)
      break;
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Too many calls to dispatch_suspend() prior to calling dispatch_"
                           "set_target_queue() or dispatch_set_*_handler()";
    __break(1u);
LABEL_38:
    kdebug_trace(771817476, 0, v9, 0, 0);
  }
  if (v9[4])
  {
    if ((*(_BYTE *)v9 & 0x40) != 0)
      v9[5] = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v17 = *(_QWORD *)(StatusReg + 176);
    if (v17)
      v18 = *(_DWORD *)(v17 + 8) + 1;
    else
      v18 = 1;
    if (v18 > _dispatch_continuation_cache_limit)
    {
      _dispatch_continuation_free_to_cache_limit((uint64_t)v9);
    }
    else
    {
      v9[2] = v17;
      *((_DWORD *)v9 + 2) = v18;
      *(_QWORD *)(StatusReg + 176) = v9;
    }
    v9 = 0;
  }
  v19 = (unint64_t *)(*(_QWORD *)(a1 + 88) + 8 * a3 + 40);
  do
    v20 = __ldxr(v19);
  while (__stlxr((unint64_t)v9, v19));
  if (v20)
    _dispatch_source_handler_dispose(v20);
  return (unint64_t *)_dispatch_lane_resume(a1, 0);
}

void dispatch_source_set_event_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
  _dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 0, 0);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
  _dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 1, 1);
}

unint64_t *dispatch_source_set_mandatory_cancel_handler(uint64_t a1, void (**a2)(uint64_t a1))
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v2 = (unsigned int *)(a1 + 80);
  while (1)
  {
    v3 = __ldxr(v2);
    v4 = v3 & 0xFBBFFFFF | 0x4000000;
    if (v4 == v3)
      break;
    if (!__stxr(v4, v2))
      return _dispatch_source_set_handler(a1, a2, 1, 1);
  }
  __clrex();
  return _dispatch_source_set_handler(a1, a2, 1, 1);
}

void dispatch_source_set_cancel_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
  _dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 1, 0);
}

unint64_t *dispatch_source_set_mandatory_cancel_handler_f(uint64_t a1, void (**a2)(uint64_t a1))
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v2 = (unsigned int *)(a1 + 80);
  while (1)
  {
    v3 = __ldxr(v2);
    v4 = v3 & 0xFBBFFFFF | 0x4000000;
    if (v4 == v3)
      break;
    if (!__stxr(v4, v2))
      return _dispatch_source_set_handler(a1, a2, 1, 0);
  }
  __clrex();
  return _dispatch_source_set_handler(a1, a2, 1, 0);
}

void dispatch_source_set_registration_handler(dispatch_source_t source, dispatch_block_t handler)
{
  _dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2, 1);
}

void dispatch_source_set_registration_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
  _dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2, 0);
}

BOOL _dispatch_source_will_reenable_kevent_4NW(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 56);
  if (((v1 ^ *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24)) & 0xFFFFFFFC) != 0)
    _dispatch_source_will_reenable_kevent_4NW_cold_1();
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16);
  return (v2 & 3) == 0 && v2 != 0;
}

unsigned int *_dispatch_source_activate(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int *result;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  _QWORD *v16;

  v3 = *(_QWORD *)(a1 + 88);
  v16 = 0;
  if ((*(_DWORD *)(a1 + 80) & 0x10000000) != 0)
  {
    *(_WORD *)(a1 + 116) |= 1u;
    return _dispatch_source_refs_finalize_unregistration((unsigned int *)a1, a2);
  }
  v4 = *(uint64_t **)(v3 + 40);
  if (v4)
  {
    v5 = *v4;
    if ((unint64_t)*v4 < 0x1000)
    {
      if ((v5 & 2) == 0)
      {
LABEL_10:
        v8 = v4[1];
        if ((v8 & 0x10000000) != 0 || (v9 = *(_DWORD *)(a1 + 84), (v9 & 0x20000000) != 0) || (v9 & 0x44000FFF) == 0)
        {
          v10 = (__clz(__rbit32((v8 >> 8) & 0x3FFF)) << 8) + 256;
          if (((v8 >> 8) & 0x3FFF) == 0)
            v10 = 0;
          *(_DWORD *)(a1 + 84) = v10 & 0xFFFFFF00 | v4[1];
        }
        if ((*(_BYTE *)v4 & 0x40) != 0)
          v4[5] = *(_QWORD *)(a1 + 32);
        goto LABEL_18;
      }
    }
    else if ((*(_QWORD *)(v5 + 40) & 0xF0) != 0x10 || (v4[10] & 0x80000) == 0)
    {
      goto LABEL_10;
    }
    v6 = (unsigned int *)(a1 + 80);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 | 0x80000, v6));
    goto LABEL_10;
  }
  _dispatch_bug_deprecated("dispatch source activated with no event handler set");
LABEL_18:
  result = (unsigned int *)_dispatch_lane_activate(a1);
  if ((*(_BYTE *)(v3 + 29) & 3) != 0 && (*(_WORD *)(a1 + 116) & 1) == 0)
  {
    result = (unsigned int *)_dispatch_queue_compute_priority_and_wlh(a1, (uint64_t *)&v16);
    if ((_DWORD)result)
    {
      v12 = result;
      v13 = (uint64_t)v16;
      if (v16 != (_QWORD *)-4
        && v16
        && *(_BYTE *)(*v16 + 40) == 18
        && *(unsigned __int8 *)(v3 + 28) == 236
        && *(_DWORD *)(v3 + 24) <= 5u)
      {
        if (!v16[6])
        {
          *(_QWORD *)(v13 + 48) = _dispatch_calloc(6uLL, 0x20uLL);
          v13 = (uint64_t)v16;
        }
        *(_BYTE *)(v3 + 29) |= 1u;
        if (v13 != -4 && v13)
        {
          v14 = (unsigned int *)(v13 + 96);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
          if ((v15 & 0x80000000) != 0)
            dispatch_set_target_queue_cold_2();
        }
        *(_QWORD *)(v3 + 16) = v13;
      }
      return (unsigned int *)_dispatch_source_install(a1, v13, v12);
    }
  }
  return result;
}

unsigned int *_dispatch_source_refs_finalize_unregistration(unsigned int *a1, const char *a2)
{
  unsigned int *result;
  uint64_t v4;
  unsigned int v5;

  result = a1 + 20;
  do
  {
    v4 = __ldxr(result);
    v5 = v4 & 0x1FFFFFFF | 0x80000000;
    if (v5 == (_DWORD)v4)
    {
      __clrex();
      if ((v4 & 0x80000000) == 0)
        goto LABEL_5;
LABEL_9:
      qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Source finalized twice";
      qword_61258 = v4;
      __break(1u);
      return result;
    }
  }
  while (__stxr(v5, result));
  if ((v4 & 0x80000000) != 0)
    goto LABEL_9;
LABEL_5:
  if ((v4 & 0x20000000) != 0)
    _dispatch_wake_by_address((uint64_t)result);
  return (unsigned int *)_os_object_release_internal(a1, a2);
}

uint64_t _dispatch_source_install(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t result;
  const char *v6;

  v4 = *(_QWORD *)(a1 + 88);
  *(_WORD *)(a1 + 116) |= 1u;
  result = _dispatch_unote_register(v4, a2, a3);
  if ((result & 1) == 0)
    return (uint64_t)_dispatch_source_refs_finalize_unregistration((unsigned int *)a1, v6);
  return result;
}

void _dispatch_source_invoke(uint64_t a1, _QWORD *a2, uint64_t a3, int8x16_t a4)
{
  uint64_t v4;
  NSObject *v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  int8x16_t *v21;
  __objc2_class **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  __objc2_class **v32;
  __objc2_class **v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  __objc2_class **v40;
  uint64_t v41;
  unint64_t *v42;
  NSObject *v43;
  __objc2_class **v44;
  unint64_t *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int8x16_t *v51;
  __objc2_class **v52;
  unint64_t *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int8x16_t *v61;
  __objc2_class **v62;
  unint64_t *v63;
  unsigned int v64;
  int v65;
  int v66;
  _BOOL4 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int8x16_t *v72;
  __objc2_class **v73;
  unint64_t *v74;
  unsigned int v75;
  char v76;
  uint64_t v77;
  NSObject *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int8x16_t *v85;
  __objc2_class **v86;
  unint64_t *v87;
  unsigned int v88;
  int v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  int8x16_t *v103;
  __objc2_class **v104;
  unint64_t *v105;
  unsigned int v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  unsigned int v110;
  __uint64_t v111;
  __int16 v112;
  unint64_t v113;
  __uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  NSObject *v118;
  void *v119;
  uint64_t v120;
  unint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t function_symbol;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t StatusReg;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unsigned int v144;
  uint64_t v145;
  unsigned int *v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t *v152;
  unsigned int v153;
  void *contexta;
  NSObject *context;
  int8x16_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160[2];
  uint64_t v161;
  int v162;
  unsigned int v163;
  int v164;
  unint64_t v165;
  uint64_t v166;
  int8x16_t v167;
  uint64_t v168;

  v4 = a3;
  v168 = 0;
  if ((a3 & 3) == 0)
  {
    *(_QWORD *)(a1 + 16) = -1985229329;
    v7 = *(NSObject **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160);
    if (MEMORY[0xFFFFFC100])
      _dispatch_trace_item_pop_internal(v7, (_QWORD *)a1, a4);
    _dispatch_introspection_queue_item_dequeue(v7, a1);
  }
  v166 = (uint64_t)a2;
  if ((v4 & 2) != 0)
  {
    v168 = 0x40020000000001;
    v8 = v4 & 0x40000;
    goto LABEL_7;
  }
  v128 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) - 0x20000000000;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v130 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
  v8 = v4 & 0x40000;
  v131 = 0xFFE00000FFFFFFFCLL;
  if ((v4 & 0x40000) != 0)
  {
    v132 = 0x4000000000;
  }
  else
  {
    v131 = 0xFFE00040FFFFFFFCLL;
    v132 = 1;
  }
  if ((v4 & 1) != 0)
    v133 = 0xFFE00040FFFFFFFCLL;
  else
    v133 = v131;
  v134 = *(_DWORD *)(StatusReg + 200);
  v135 = (v134 >> 8) & 0xF;
  v136 = (unsigned __int16)v134 >> 12;
  v137 = HIWORD(v134) & 0xF;
  if (v135 <= v136)
    v135 = v136;
  if (v135 > v137)
    v137 = v135;
  v138 = (unint64_t *)(a1 + 56);
  do
  {
    while (1)
    {
      v139 = __ldaxr(v138);
      if ((v139 & v133) != 0)
        break;
      if ((v139 & 0x1000000000) == 0 || (v140 = HIDWORD(v139) & 7, v140 <= v137))
      {
        v141 = (v139 >> 40) & 1;
        if (!((v128 + v139) >> 53))
          LODWORD(v141) = 1;
        if ((_DWORD)v141)
          v142 = 0x60000000000000;
        else
          v142 = 0x20000000000000;
        v143 = v130 | v139 & 0x7700000001 | v142;
        goto LABEL_251;
      }
      __clrex();
      v165 = v128;
      _pthread_workqueue_override_start_direct(*(unsigned int *)(StatusReg + 24), (256 << ((BYTE4(v139) & 7u) - 1)) | 0xFF);
      v128 = v165;
      v144 = *(_DWORD *)(StatusReg + 200);
      v137 = v140;
      if ((HIWORD(v144) & 0xF) < v140)
      {
        *(_QWORD *)(StatusReg + 200) = v144 & 0xFFF0FFFF | ((_DWORD)v140 << 16);
        v137 = v140;
      }
    }
    if ((v4 & 1) != 0)
    {
      __clrex();
      goto LABEL_267;
    }
    v143 = v139 ^ v132;
LABEL_251:
    ;
  }
  while (__stxr(v143, v138));
  if ((v139 & v133) != 0)
  {
LABEL_267:
    v30 = 0;
    v168 = 0;
    goto LABEL_217;
  }
  v145 = 0x60000000000000;
  if ((v4 & 1) == 0)
    v145 = v132 | 0x60000000000000;
  v168 = (v143 & v145) - (v139 & 0x3FFE0000000000);
  if (!v168)
  {
    v30 = 0;
    goto LABEL_217;
  }
LABEL_7:
  if (v8)
  {
    v161 = 0;
  }
  else
  {
    v9 = *(_DWORD *)(a1 + 84);
    v10 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v11 = *(_QWORD *)(v10 + 200);
    if ((_DWORD)v11)
    {
      v12 = v9 & 0xFFF;
      if ((v9 & 0xFFF) != 0)
      {
        if (((unsigned __int16)v11 & 0xFFFu) > v12)
          v12 = v11 & 0xFFF;
        if ((unsigned __int16)v9 >> 12 <= v12 >> 8)
          v13 = 0x40000000;
        else
          v13 = 1140912128;
        v14 = v11 & 0x880F0000 | v12 | v13 & v9;
      }
      else
      {
        v15 = v11 | 0x40000000;
        if ((v11 & 0xFFF) == 0)
          v15 = *(_QWORD *)(v10 + 200);
        v16 = (unsigned __int16)v9 >> 12;
        v14 = v15 & 0xFFFF0FFF | v9 & 0x400F000;
        if (v16 <= ((v15 >> 8) & 0xF))
          v14 = v15;
      }
    }
    else
    {
      v14 = v9 & 0xFFF0FFFF;
    }
    *(_QWORD *)(v10 + 200) = v14;
    v161 = v11 & 0xFFF0FFFF;
  }
  if ((v4 & 0x100000) != 0 && (*(_DWORD *)(a1 + 80) & 0x400000) != 0)
  {
    v146 = (unsigned int *)(a1 + 80);
    do
      v147 = __ldxr(v146);
    while (__stxr(v147 & 0xFFBFFFFF, v146));
  }
  if (((*(_DWORD *)(a1 + 80) << 8) & 0x3000000) != 0)
    v17 = (*(_DWORD *)(a1 + 80) << 8) & 0x3000000 | v4 & 0xFCFFFFF7 | 8;
  else
    v17 = v4 | 8;
  v18 = v17 & 0x1000002;
  v162 = v17 & 0xFBFFFFFF;
  v163 = v17 | 0x4000000;
  v19 = (unint64_t *)(a1 + 56);
  v20 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v164 = v17 & 0x1000002;
LABEL_28:
  if (v18 == 2)
    _dispatch_last_resort_autorelease_pool_push(a2);
  v21 = (int8x16_t *)(v20 + 160);
  v22 = *(__objc2_class ***)(v20 + 160);
  v23 = *(_QWORD *)(a1 + 88);
  if ((v17 & 0x40000) == 0)
  {
    v24 = *(_QWORD *)(v20 + 232);
    v25 = v24 ? *(_QWORD *)(v24 + 24) : -4;
    v26 = *(_QWORD *)(v23 + 16) & 0xFFFFFFFFFFFFFFFCLL;
    v27 = v26 == -4 || v26 == 0;
    if (!v27 && v25 != v26)
      _dispatch_source_handle_wlh_change(a1);
  }
  if (*(_QWORD *)(a1 + 48))
  {
    _dispatch_lane_serial_drain((_QWORD *)a1, (uint64_t)a2, v163, &v168);
    v30 = v29;
    v31 = v162;
  }
  else
  {
    v30 = 0;
    v31 = v17;
  }
  v32 = &_dispatch_mgr_q;
  if ((*(_BYTE *)(v23 + 29) & 1) != 0)
    v32 = *(__objc2_class ***)(a1 + 24);
  if ((*(_WORD *)(a1 + 116) & 1) == 0)
  {
    if (v22 != v32)
      goto LABEL_49;
    v33 = v32;
    if ((v31 & 0x10000) != 0)
    {
      v34 = v20;
      v35 = *(_DWORD *)(v20 + 200);
    }
    else
    {
      v35 = 0x2000000;
      v34 = v20;
    }
    v36 = v19;
    v37 = *(_QWORD *)(v34 + 232);
    v38 = v31;
    if (v37)
      v39 = *(_QWORD *)(v37 + 24);
    else
      v39 = -4;
    _dispatch_source_install(a1, v39, v35);
    v31 = v38;
    v19 = v36;
    v32 = v33;
    v21 = (int8x16_t *)(v20 + 160);
  }
  if (*v19 >> 55)
    goto LABEL_156;
  if ((*(_BYTE *)(v23 + 29) & 2) != 0 && *(_QWORD *)(v23 + 104) && (*(_DWORD *)(a1 + 80) & 0x10800000) == 0)
  {
    if (v22 == v32)
    {
      v157 = v30;
      v47 = v23;
      v48 = v17;
      v49 = v4;
      v50 = v20;
      v51 = v21;
      v52 = v32;
      v53 = v19;
      v54 = v31;
      _dispatch_timer_unote_configure(*(_QWORD *)(a1 + 88));
      v31 = v54;
      v19 = v53;
      v32 = v52;
      v21 = v51;
      v20 = v50;
      v4 = v49;
      v17 = v48;
      v23 = v47;
      v30 = v157;
      goto LABEL_60;
    }
    goto LABEL_49;
  }
LABEL_60:
  *(_QWORD *)v160 = v22;
  if (!*(_QWORD *)(v23 + 56))
    goto LABEL_77;
  v40 = v22;
  v41 = v30;
  v30 = *(_QWORD *)(a1 + 24);
  if (v40 != (__objc2_class **)v30)
    goto LABEL_113;
  v42 = (unint64_t *)(*(_QWORD *)(a1 + 88) + 56);
  do
    v43 = __ldxr(v42);
  while (__stxr(0, v42));
  v156 = v21;
  v44 = v32;
  if ((*(_DWORD *)(a1 + 80) & 0x10800000) != 0)
  {
    v45 = v19;
    v46 = v31;
    if ((v31 & 0x1000000) != 0)
    {
      contexta = objc_autoreleasePoolPush();
      _dispatch_source_handler_dispose((uint64_t)v43);
      objc_autoreleasePoolPop(contexta);
    }
    else
    {
      _dispatch_source_handler_dispose((uint64_t)v43);
    }
    v30 = v41;
    v31 = v46;
  }
  else
  {
    if (((uint64_t)v43->isa & 0x40) != 0)
      v43[5].isa = *(Class *)(a1 + 32);
    v45 = v19;
    if (MEMORY[0xFFFFFC100])
    {
      v122 = v31;
      _dispatch_trace_source_callout_entry_internal(a1, 2, *(_QWORD **)v160, v43, a4);
      v31 = v122;
    }
    v55 = v31;
    _dispatch_continuation_pop(v43, 0, v31, *(NSObject **)v160, a4);
    v31 = v55;
    v30 = v41;
  }
  v19 = v45;
  v32 = v44;
  v21 = v156;
LABEL_77:
  if ((*(_QWORD *)(v23 + 16) & 2) != 0)
  {
    v56 = v30;
    v57 = v23;
    v58 = v17;
    v59 = v4;
    v60 = v20;
    v61 = v21;
    v62 = v32;
    v63 = v19;
    v64 = v31;
    _dispatch_source_refs_unregister(a1, 5);
    v31 = v64;
    v19 = v63;
    v32 = v62;
    v21 = v61;
    v20 = v60;
    v4 = v59;
    v17 = v58;
    v23 = v57;
    v30 = v56;
  }
  v65 = *(_DWORD *)(a1 + 80);
  v66 = v65 & 0x10800000;
  if ((v65 & 0x10800000) != 0)
  {
    v67 = 0;
    if ((v65 & 0x80000000) == 0)
      goto LABEL_81;
    goto LABEL_90;
  }
  if (*(_QWORD *)(v23 + 72))
  {
    v159 = v30;
    v30 = *(_QWORD *)(a1 + 24);
    if (*(_QWORD *)v160 != v30)
      goto LABEL_113;
    v77 = *(_QWORD *)(a1 + 88);
    v152 = (unint64_t *)(v77 + 40);
    v78 = *(NSObject **)(v77 + 40);
    v79 = (unint64_t *)(v77 + 72);
    do
      v80 = __ldxr(v79);
    while (__stxr(0, v79));
    context = v78;
    if ((*(_BYTE *)(v77 + 29) & 2) != 0 && (*(_BYTE *)(v77 + 30) & 0x40) != 0)
    {
      v81 = v77;
      v150 = v23;
      v82 = v17;
      v83 = v4;
      v84 = v20;
      v85 = v21;
      v86 = v32;
      v87 = v19;
      v88 = v31;
      if (MEMORY[0xFFFFFC100])
      {
        _dispatch_trace_item_pop_internal(*(_QWORD **)v160, v78, a4);
        v78 = context;
      }
      _dispatch_introspection_queue_item_dequeue(*(NSObject **)v160, v78);
      v78 = context;
      v31 = v88;
      v19 = v87;
      v32 = v86;
      v21 = v85;
      v20 = v84;
      v4 = v83;
      v17 = v82;
      v23 = v150;
      v77 = v81;
    }
    v89 = *(unsigned __int8 *)(*(_QWORD *)v77 + 9);
    v153 = v31;
    if (v89 == 3)
    {
      v90 = ~v80;
      goto LABEL_167;
    }
    if (v89 == 5)
    {
      if ((v80 & 1) != 0)
      {
        v90 = v80 >> 1;
        v107 = *(_QWORD *)(a1 + 88);
        v109 = *(_QWORD *)(v107 + 80);
        v108 = (_QWORD *)(v107 + 80);
        if (v109 <= 0x7FFFFFFFFFFFFFFELL)
        {
          v110 = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 24) / 3u;
          v149 = v77;
          v151 = v80 >> 1;
          v148 = *(_QWORD *)(a1 + 88);
          if (v110 == 2)
            v111 = clock_gettime_nsec_np(_CLOCK_REALTIME);
          else
            v111 = v110 == 1 ? mach_continuous_time() : mach_absolute_time();
          v31 = v153;
          v78 = context;
          v77 = v149;
          v90 = v80 >> 1;
          if (v111 >= *v108)
          {
            v113 = *(_QWORD *)(v148 + 96);
            v114 = (v111 - *v108) / v113;
            if ((uint64_t)(v114 + 1 + v151) >= 0)
              v115 = v114 + 1;
            else
              v115 = v151 ^ 0x7FFFFFFFFFFFFFFFLL;
            if (v113 > 0x7FFFFFFFFFFFFFFELL)
            {
              *v108 = -1;
              v108[1] = -1;
            }
            else
            {
              v116 = v115 * v113;
              *v108 += v116;
              *(_QWORD *)(v148 + 88) += v116;
            }
            v90 = v115 + v151;
          }
        }
      }
      else
      {
        v90 = v80 >> 1;
      }
LABEL_167:
      *(_QWORD *)(v77 + 64) = v90;
      if (v78)
      {
        if (v80)
        {
          if (MEMORY[0xFFFFFC100])
          {
            v123 = v77;
            _dispatch_trace_source_callout_entry_internal(a1, 0, *(_QWORD **)v160, context, a4);
            v77 = v123;
            v78 = context;
            v31 = v153;
          }
          v117 = v77;
          if (*(unsigned __int8 *)(v77 + 28) == 242)
          {
            function_symbol = _dispatch_continuation_get_function_symbol(v78);
            v78 = context;
            v31 = v153;
            if (MEMORY[0xFFFFFC100])
            {
              kdebug_trace(67240961, v80, function_symbol, 0, 0);
              v78 = context;
              v31 = v153;
            }
          }
          _dispatch_continuation_pop(v78, 0, v31, *(NSObject **)v160, a4);
          if (*(unsigned __int8 *)(v117 + 28) == 242 && MEMORY[0xFFFFFC100])
            kdebug_trace(67240962, 0, 0, 0, 0);
          v31 = v153;
          v118 = context;
          if ((*(_BYTE *)(v117 + 29) & 2) != 0)
          {
            if ((v80 & 1) != 0 && *(_QWORD *)(v117 + 104))
            {
              _dispatch_timer_unote_configure(*(_QWORD *)(a1 + 88));
              v118 = context;
              v31 = v153;
            }
            if ((*(_BYTE *)(v117 + 30) & 0x40) != 0)
            {
              if (MEMORY[0xFFFFFC100])
              {
                kdebug_trace(772079660, v118, 0, 0, 0);
                v118 = context;
              }
              _dispatch_introspection_queue_item_complete(v118);
              if ((v153 & 0x1000000) != 0)
                v119 = objc_autoreleasePoolPush();
              else
                v119 = 0;
              do
                v120 = __ldxr(v152);
              while (__stxr(0, v152));
              if (v120)
                _dispatch_source_handler_dispose(v120);
              if (v119)
                objc_autoreleasePoolPop(v119);
              dispatch_release((dispatch_object_t)a1);
              v31 = v153;
            }
          }
          goto LABEL_189;
        }
LABEL_147:
        v99 = v23;
        v100 = v17;
        v101 = v4;
        v102 = v20;
        v103 = v21;
        v104 = v32;
        v105 = v19;
        v106 = v31;
        _dispatch_bug(586, 0);
LABEL_148:
        v31 = v106;
        v19 = v105;
        v32 = v104;
        v21 = v103;
        v20 = v102;
        v4 = v101;
        v17 = v100;
        v23 = v99;
        goto LABEL_189;
      }
LABEL_206:
      if (!MEMORY[0xFFFFFC100])
        goto LABEL_189;
      v99 = v23;
      v100 = v17;
      v101 = v4;
      v102 = v20;
      v103 = v21;
      v104 = v32;
      v105 = v19;
      v106 = v31;
      kdebug_trace(771883040, a1, 0, 0, 0);
      goto LABEL_148;
    }
    v90 = v80;
    if (v80)
      goto LABEL_167;
    if (*(unsigned __int8 *)(v77 + 28) != 233)
    {
      *(_QWORD *)(v77 + 64) = 0;
      if (v78)
        goto LABEL_147;
      goto LABEL_206;
    }
LABEL_189:
    v65 = *(_DWORD *)(a1 + 80);
    if ((v65 & 0x90000000) != 0)
    {
      v67 = 0;
      v30 = v159;
    }
    else
    {
      v30 = v159;
      if (*(_QWORD *)(*(_QWORD *)v160 + 24))
        v67 = 1;
      else
        v67 = *(_DWORD *)(*(_QWORD *)v160 + 84) >= 0;
    }
    *(_WORD *)(a1 + 116) |= 2u;
    v66 = v65 & 0x10800000;
    if (v65 < 0)
      goto LABEL_90;
LABEL_81:
    if (v66)
    {
      if ((*(_BYTE *)(v23 + 29) & 2) != 0 && (*(_QWORD *)(v23 + 16) & 1) == 0 || *(__objc2_class ***)v160 == v32)
      {
        v158 = v30;
        v68 = v23;
        v69 = v17;
        v70 = v4;
        v71 = v20;
        v72 = v21;
        v73 = v32;
        v74 = v19;
        v75 = v31;
        if ((v65 & 0x40000000) != 0)
          v76 = 1;
        else
          v76 = 3;
        _dispatch_source_refs_unregister(a1, v76);
        v65 = *(_DWORD *)(a1 + 80);
        if (v65 < 0)
        {
          v66 = v65 & 0x10800000;
          v31 = v75;
          v19 = v74;
          v32 = v73;
          v21 = v72;
          v20 = v71;
          v4 = v70;
          v17 = v69;
          v23 = v68;
          v30 = v158;
          goto LABEL_90;
        }
        if (v158)
          v30 = v158;
        else
          v30 = -1;
        v19 = v74;
        v21 = v72;
        v20 = v71;
        v4 = v70;
        v17 = v69;
        goto LABEL_113;
      }
LABEL_49:
      v30 = (uint64_t)v32;
      goto LABEL_113;
    }
LABEL_90:
    if (v65 < 0 && v66)
    {
      if (*(_QWORD *)v160 != *(_QWORD *)(a1 + 24)
        && (*(_QWORD *)(v23 + 40) || *(_QWORD *)(v23 + 48) || *(_QWORD *)(v23 + 56)))
      {
        v67 = 0;
        v30 = *(_QWORD *)(a1 + 24);
      }
      else
      {
        _dispatch_source_cancel_callout(a1, *(NSObject **)v160, v31, a4);
        v67 = 0;
        v65 = *(_DWORD *)(a1 + 80);
      }
    }
  }
  else
  {
    v67 = 0;
  }
  if ((v65 & 0x10800000) != 0)
    goto LABEL_113;
  if ((*(_BYTE *)(v23 + 29) & 2) != 0)
  {
    if (!*(_QWORD *)(v23 + 104))
    {
      v98 = *(_QWORD *)(v23 + 16);
      if (!v98 || (v98 & 3) != 0 || *(_QWORD *)(v23 + 80) > 0x7FFFFFFFFFFFFFFEuLL)
        goto LABEL_113;
    }
  }
  else
  {
    v94 = *(_QWORD *)(v23 + 16);
    if (!v94 || (v94 & 3) != 0)
      goto LABEL_113;
  }
  v95 = v30;
  v30 = (uint64_t)v32;
  if (*(__objc2_class ***)v160 != v32)
    goto LABEL_113;
  if (*v19 >> 55)
    goto LABEL_156;
  v30 = v95;
  if ((*(_BYTE *)(v23 + 29) & 1) == 0 || (~*(_QWORD *)(v23 + 16) & 0xFFFFFFFFFFFFFFFCLL) != 0)
  {
    _dispatch_unote_resume(v23);
    if (!v67)
    {
      if (*(_QWORD *)(v20 + 40))
      {
        v96 = *(_QWORD *)(v20 + 232);
        if (v96)
        {
          v97 = *(_QWORD *)(v96 + 24);
          if (v97 != -4 && v97 == (*(_QWORD *)(v23 + 16) & 0xFFFFFFFFFFFFFFFCLL))
            _dispatch_event_loop_drain(1);
        }
      }
    }
    goto LABEL_113;
  }
  v112 = *(_WORD *)(a1 + 116);
  if ((v112 & 2) != 0)
  {
    *(_WORD *)(a1 + 116) = v112 & 0xFFFD;
    _dispatch_unote_resume(v23);
  }
  if (v67)
LABEL_156:
    v30 = *(_QWORD *)(a1 + 24);
LABEL_113:
  v18 = v164;
  a2 = (_QWORD *)v166;
  if (v164 == 2)
  {
    v167 = *v21;
    *(_QWORD *)(v20 + 160) = a1;
    *(_QWORD *)(v20 + 168) = &v167;
    _dispatch_last_resort_autorelease_pool_pop(v166);
    a4 = v167;
    *v21 = v167;
  }
  if ((unint64_t)(v30 + 1) > 1)
  {
LABEL_229:
    if ((v17 & 0x40000) == 0)
      goto LABEL_216;
  }
  else
  {
    v91 = v168;
    do
    {
      v92 = __ldxr(v19);
      v93 = (v92 - v91) & 0xFFFFFFF700000001;
      if (!(v92 >> 55))
      {
        if ((v92 & 0x8000000000) != 0)
        {
          __clrex();
          do
            v121 = __ldaxr(v19);
          while (__stxr(v121 ^ 0x8000000000, v19));
          if ((v4 & 1) != 0)
            goto LABEL_28;
          v30 = v21->i64[0];
          if ((*(_QWORD *)(*(_QWORD *)v21->i64[0] + 40) & 0x10000) != 0)
            goto LABEL_28;
          goto LABEL_229;
        }
        if (v30)
          v93 = (v92 - v91) & 0xFFFFFF7700000001 | 0x8000000000;
        else
          v93 = (v92 - v91) & 0xFFFFFFF000000001;
      }
    }
    while (__stlxr(v93, v19));
    if ((~v92 & 0x1800000000) == 0)
    {
      v125 = HIDWORD(v92) & 7;
      v126 = *(_DWORD *)(v20 + 200);
      if ((HIWORD(v126) & 0xF) < v125)
        *(_QWORD *)(v20 + 200) = v126 & 0xFFF0FFFF | ((_DWORD)v125 << 16);
    }
    v30 = 0;
    v168 = 0;
    if ((v17 & 0x40000) != 0)
      goto LABEL_217;
LABEL_216:
    *(_QWORD *)(v20 + 200) = *(_QWORD *)(v20 + 200) & 0xF0000 | v161;
  }
LABEL_217:
  if ((v4 & 1) == 0)
  {
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(772079660, a1, 0, 0, 0);
    _dispatch_introspection_queue_item_complete(a1);
  }
  if (v30)
  {
    _dispatch_queue_invoke_finish(a1, (uint64_t)a2, (__objc2_class **)v30, v168, a4);
    if ((v4 & 0x100000) == 0)
      return;
LABEL_225:
    v127 = *(_QWORD *)(*(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 216) + 48);
    if (v127)
    {
      if (*(_BYTE *)(v127 + 6))
        _dispatch_event_loop_drain_timers(v127, 6u);
    }
  }
  else
  {
    _os_object_release_internal_n((void *)a1, (_BYTE *)&dword_0 + 2);
    if ((v4 & 0x100000) != 0)
      goto LABEL_225;
  }
}

void _dispatch_source_wakeup(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t a4)
{
  uint64_t v4;
  int v5;
  char v6;
  __objc2_class **v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_DWORD *)(a1 + 80);
  v6 = *(_BYTE *)(v4 + 29);
  if ((*(_WORD *)(a1 + 116) & 1) == 0)
    goto LABEL_2;
  if ((v5 & 0x10800000) != 0)
  {
    if (*(_QWORD *)(v4 + 56) | *(_QWORD *)(v4 + 16) & 2)
    {
LABEL_27:
      if (*(__objc2_class ***)(a1 + 24) == &_dispatch_mgr_q)
        v7 = &_dispatch_mgr_q;
      else
        v7 = (__objc2_class **)(&dword_0 + 1);
      goto LABEL_4;
    }
    if (v5 < 0)
    {
      if (*(_QWORD *)(v4 + 40) || *(_QWORD *)(v4 + 48) || *(_QWORD *)(v4 + 56))
        goto LABEL_27;
      goto LABEL_12;
    }
    if ((*(_BYTE *)(v4 + 29) & 2) != 0 && (*(_QWORD *)(v4 + 16) & 1) == 0)
      goto LABEL_27;
    if ((a3 & 0x10) == 0 && (v5 & 0x40000000) != 0)
    {
LABEL_12:
      if (!*(_QWORD *)(a1 + 48))
      {
        v7 = 0;
        goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else
  {
    if ((*(_BYTE *)(v4 + 29) & 2) != 0 && *(_QWORD *)(v4 + 104))
      goto LABEL_2;
    if (*(_QWORD *)(v4 + 56) | *(_QWORD *)(v4 + 16) & 2 || *(_QWORD *)(v4 + 72))
      goto LABEL_27;
    if ((*(_BYTE *)(v4 + 29) & 2) != 0)
    {
      if (*(_QWORD *)(v4 + 104))
        goto LABEL_2;
      v10 = *(_QWORD *)(v4 + 16);
      if (v10)
      {
        if ((v10 & 3) == 0 && *(_QWORD *)(v4 + 80) < 0x7FFFFFFFFFFFFFFFuLL)
          goto LABEL_2;
      }
      goto LABEL_12;
    }
    v8 = *(_QWORD *)(v4 + 16);
    if (v8)
      v9 = (v8 & 3) == 0;
    else
      v9 = 0;
    if (!v9)
      goto LABEL_12;
  }
LABEL_2:
  if ((v6 & 1) != 0)
    goto LABEL_27;
  v7 = &_dispatch_mgr_q;
  if (&_dispatch_mgr_q == (__objc2_class **)((char *)&dword_0 + 1))
    goto LABEL_27;
LABEL_4:
  _dispatch_queue_wakeup((_DWORD *)a1, a2, a3, v7, a4);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  unsigned int *v1;
  int v2;
  unsigned int *v3;
  unsigned int v4;

  if (LODWORD(source[1].isa) != 0x7FFFFFFF)
  {
    v1 = (unsigned int *)&source[1];
    do
      v2 = __ldxr(v1);
    while (__stxr(v2 + 2, v1));
    if (v2 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  v3 = (unsigned int *)&source[10];
  do
    v4 = __ldxr(v3);
  while (__stxr(v4 | 0x10000000, v3));
  if ((v4 & 0x10000000) != 0)
    _os_object_release_internal_n(source, (_BYTE *)&dword_0 + 2);
  else
    (*((void (**)(dispatch_source_t, _QWORD, uint64_t))source->isa + 10))(source, 0, 3);
}

void dispatch_source_cancel_and_wait(dispatch_object_t object, int8x16_t a2)
{
  Class isa;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t StatusReg;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;

  isa = object[11].isa;
  if (*((_QWORD *)isa + 6))
    dispatch_source_cancel_and_wait_cold_4((uint64_t)object);
  v4 = (unsigned int *)&object[10];
  while (1)
  {
    v5 = __ldxr(v4);
    v6 = v5 | 0x10000000;
    if ((v5 & 0x20000000) != 0)
      break;
    if ((v5 & 0x80000000) == 0 && ((v5 & 0x40000000) != 0 || (*((_BYTE *)isa + 29) & 3) != 1))
      v6 = v5 | 0x30000000;
    if (!__stxr(v6, v4))
    {
      if ((v5 & 0x800000) == 0)
        goto LABEL_10;
LABEL_27:
      dispatch_source_cancel_and_wait_cold_3((uint64_t)object);
    }
  }
  __clrex();
  if ((v5 & 0x800000) != 0)
    goto LABEL_27;
LABEL_10:
  if ((v5 & 0x80000000) != 0)
    return;
  if ((v6 & 0x20000000) != 0)
    goto LABEL_31;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v8 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
  v9 = (unint64_t *)&object[7];
  while (1)
  {
    v10 = __ldaxr(v9);
    if ((v10 & 0xFFE00000FFFFFFFCLL) != 0)
      break;
    v11 = v8 | v10 & 0x7700000001 | 0x60000000000000;
LABEL_15:
    if (!__stlxr(v11, v9))
    {
      if (v10 >> 55)
        goto LABEL_37;
      if ((v10 & 0xFFE00000FFFFFFFCLL) == 0)
      {
        if ((*v4 & 0x80000000) == 0)
          _dispatch_source_refs_unregister((uint64_t)object, 3);
        if ((*v4 & 0x80000000) != 0)
          _dispatch_source_cancel_callout((uint64_t)object, 0, 0, a2);
        (*((void (**)(dispatch_object_t, _QWORD, uint64_t))object->isa + 10))(object, 0, 20);
LABEL_35:
        v16 = *v4;
        if ((*v4 & 0x80000000) != 0)
          return;
        while (1)
        {
          if ((v16 & 0x20000000) != 0)
          {
            v17 = v16;
          }
          else
          {
            v17 = v16 | 0x20000000;
            while (1)
            {
              v18 = __ldxr(v4);
              if (v18 != v16)
                break;
              if (!__stxr(v17, v4))
              {
                v19 = 1;
                goto LABEL_45;
              }
            }
            v19 = 0;
            __clrex();
LABEL_45:
            if (!v19)
              goto LABEL_50;
          }
          _dispatch_wait_on_address((uint64_t)&object[10], v17, -1, 0);
          v18 = *v4;
LABEL_50:
          v16 = v18;
          if ((v18 & 0x80000000) != 0)
            return;
        }
      }
LABEL_30:
      if (((v10 ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) == 0)
        dispatch_source_cancel_and_wait_cold_2((uint64_t)object);
LABEL_31:
      v13 = (*(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) >> 8) & 0x3FFF;
      v12 = v13 == 0;
      v14 = __clz(__rbit32(v13));
      if (v12)
        v15 = 0;
      else
        v15 = v14 + 1;
      (*((void (**)(dispatch_object_t, uint64_t, uint64_t))object->isa + 10))(object, v15, 2);
      dispatch_activate(object);
      goto LABEL_35;
    }
  }
  if ((v5 & 0x10000000) == 0)
  {
    v11 = v10 | 0x8000000000;
    goto LABEL_15;
  }
  __clrex();
  if (!(v10 >> 55))
    goto LABEL_30;
LABEL_37:
  if (v10 >> 58)
    dispatch_source_cancel_and_wait_cold_1((uint64_t)object);
  dispatch_activate(object);
}

unsigned int *_dispatch_source_refs_unregister(uint64_t a1, char a2)
{
  unsigned int *result;
  const char *v4;
  unsigned int *v5;
  unsigned int v6;

  result = (unsigned int *)_dispatch_unote_unregister(*(_QWORD *)(a1 + 88), a2);
  if ((_DWORD)result)
    return _dispatch_source_refs_finalize_unregistration((unsigned int *)a1, v4);
  v5 = (unsigned int *)(a1 + 80);
  while (1)
  {
    v6 = __ldxr(v5);
    if ((v6 & 0xC0000000) != 0)
      break;
    if (!__stxr(v6 | 0x40000000, v5))
      return result;
  }
  __clrex();
  return result;
}

void _dispatch_source_cancel_callout(uint64_t a1, NSObject *a2, int a3, int8x16_t a4)
{
  unint64_t *v7;
  void *v8;
  unint64_t *v9;
  NSObject *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;

  v7 = *(unint64_t **)(a1 + 88);
  if ((a3 & 0x1000000) != 0)
    v8 = objc_autoreleasePoolPush();
  else
    v8 = 0;
  v9 = v7 + 6;
  do
    v10 = __ldxr(v9);
  while (__stxr(0, v9));
  v11 = v7 + 5;
  v7[8] = 0;
  v7[9] = 0;
  do
    v12 = __ldxr(v11);
  while (__stxr(0, v11));
  if (v12)
    _dispatch_source_handler_dispose(v12);
  v13 = v7 + 7;
  do
    v14 = __ldxr(v13);
  while (__stxr(0, v13));
  if (v14)
    _dispatch_source_handler_dispose(v14);
  if (!v10)
  {
LABEL_17:
    if (!v8)
      return;
    goto LABEL_18;
  }
  if ((*(_DWORD *)(a1 + 80) & 0x10000000) == 0)
  {
    _dispatch_source_handler_dispose((uint64_t)v10);
    goto LABEL_17;
  }
  if (((uint64_t)v10->isa & 0x40) != 0)
    v10[5].isa = *(Class *)(a1 + 32);
  if (MEMORY[0xFFFFFC100])
    _dispatch_trace_source_callout_entry_internal(a1, 1, a2, v10, a4);
  _dispatch_continuation_pop(v10, 0, a3 & 0xFEFFFFFF, a2, a4);
  if (v8)
LABEL_18:
    objc_autoreleasePoolPop(v8);
}

uint64_t _dispatch_source_merge_evt(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4)
{
  __int16 v5;
  _DWORD *v7;
  unsigned int v8;
  uint64_t v9;

  v5 = (__int16)a2;
  v7 = (_DWORD *)~*(_QWORD *)(a1 + 8);
  if (((unsigned __int16)a2 & 0x100) == 0 && !*(_QWORD *)(a1 + 16) && (*(_BYTE *)(a1 + 29) & 2) == 0)
    _dispatch_source_refs_finalize_unregistration((unsigned int *)~*(_QWORD *)(a1 + 8), a2);
  if ((v5 & 0x200) != 0)
  {
    if ((v7[20] & 0x4000000) != 0)
      _dispatch_source_merge_evt_cold_1(a1);
    _dispatch_bug_kevent_vanished(a1);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v8 = __clz(__rbit32((a4 >> 8) & 0x3FFF));
  if (((a4 >> 8) & 0x3FFF) != 0)
    v9 = v8 + 1;
  else
    v9 = 0;
  return (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)v7 + 80))(v7, v9, 51);
}

void dispatch_after_f(dispatch_time_t when, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  dispatch_time_t v7;
  unint64_t v8;
  unint64_t StatusReg;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  dispatch_source_t v15;
  int8x16_t v16;
  Class isa;
  NSObject *v18;
  uint64_t v19;
  objc_class *v20;
  int v21;
  objc_class *v22;
  char v23;
  uint64_t v24;

  if (when != -1)
  {
    v7 = when;
    v8 = _dispatch_timeout(when);
    if (!v8)
    {
      dispatch_channel_async_f(queue, context, work);
      return;
    }
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v10 = __clz(__rbit32((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF));
    if (((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF) != 0)
      v11 = v10 + 1;
    else
      v11 = 0;
    if (v11 > 5)
      v12 = 20;
    else
      v12 = qword_40058[v11];
    v13 = v8 / v12;
    if (v13 <= 0xF4240)
      v13 = 1000000;
    if (v13 >= 0xDF8475800)
      v14 = 60000000000;
    else
      v14 = v13;
    v15 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_after, 0, 0, queue);
    isa = v15[11].isa;
    v18 = *(NSObject **)(StatusReg + 176);
    if (v18)
      *(StatusReg + 176) = v18[2];
    else
      v18 = _dispatch_continuation_alloc_from_heap();
    v18->isa = (Class)(&stru_B8 + 72);
    v18[4].isa = (Class)work;
    v18[5].isa = (Class)context;
    if ((*(_QWORD *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF)
      v19 = 4351;
    else
      v19 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
    v20 = *(objc_class **)(StatusReg + 224);
    if (v20)
      os_retain(*(void **)(StatusReg + 224));
    v18[3].isa = v20;
    if (v20 == (objc_class *)-1)
      goto LABEL_27;
    if (v20)
      v20 = (objc_class *)*((unsigned int *)v20 + 8);
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817476, v20, v18, 0, 0);
      if (v19)
        goto LABEL_28;
    }
    else
    {
LABEL_27:
      if (v19)
      {
LABEL_28:
        v21 = (HIDWORD(queue[10].isa) >> 30) & 1;
        if ((HIDWORD(queue[10].isa) & 0xFFF) == 0)
          v21 = 1;
        if (v21)
          v22 = (objc_class *)v19;
        else
          v22 = 0;
LABEL_33:
        v18[1].isa = v22;
        v18[6].isa = (Class)v15;
        if (MEMORY[0xFFFFFC100])
          _dispatch_trace_item_push_internal(queue, v18, v16);
        _dispatch_introspection_queue_item_enqueue(queue, v18);
        *((_QWORD *)isa + 5) = v18;
        if ((v7 & 0x8000000000000000) != 0)
        {
          if ((v7 & 0x4000000000000000) != 0)
          {
            if ((unint64_t)-(uint64_t)v7 >> 62)
              v7 = -1;
            else
              v7 = -(uint64_t)v7;
            v23 = 2;
LABEL_43:
            *((_BYTE *)isa + 30) |= 4 * v23;
            *((_QWORD *)isa + 10) = v7;
            *((_QWORD *)isa + 11) = v14 + v7;
            *((_QWORD *)isa + 12) = -1;
            dispatch_activate(v15);
            return;
          }
          v7 &= ~0x8000000000000000;
          v23 = 1;
        }
        else
        {
          v23 = 0;
        }
        if (v7 >> 62)
          v7 = -1;
        if (_dispatch_host_time_nano2mach)
        {
          v14 = _dispatch_host_time_nano2mach(v14);
        }
        else
        {
          v24 = (3 * v14 * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
          v14 = (v24 + ((3 * v14 - v24) >> 1)) >> 6;
        }
        goto LABEL_43;
      }
    }
    v22 = 0;
    goto LABEL_33;
  }
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  dispatch_time_t v5;
  unint64_t v6;
  unint64_t StatusReg;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  dispatch_source_t v13;
  Class isa;
  uint64_t *v15;
  void *v16;
  int8x16_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  if (when != -1)
  {
    v5 = when;
    v6 = _dispatch_timeout(when);
    if (!v6)
    {
      dispatch_channel_async(queue, block);
      return;
    }
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v8 = __clz(__rbit32((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF));
    if (((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF) != 0)
      v9 = v8 + 1;
    else
      v9 = 0;
    if (v9 > 5)
      v10 = 20;
    else
      v10 = qword_40058[v9];
    v11 = v6 / v10;
    if (v11 <= 0xF4240)
      v11 = 1000000;
    if (v11 >= 0xDF8475800)
      v12 = 60000000000;
    else
      v12 = v11;
    v13 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_after, 0, 0, queue);
    isa = v13[11].isa;
    v15 = *(uint64_t **)(StatusReg + 176);
    if (v15)
      *(_QWORD *)(StatusReg + 176) = v15[2];
    else
      v15 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
    v16 = _dispatch_Block_copy(block);
    v18 = (void (*)(uint64_t))*((_QWORD *)block + 2);
    *v15 = 272;
    if (v18 == ___dispatch_block_create_block_invoke)
    {
      v15[5] = (uint64_t)v16;
      _dispatch_continuation_init_slow(v15, (unsigned int *)queue, 0);
LABEL_35:
      v15[6] = (uint64_t)v13;
      if (MEMORY[0xFFFFFC100])
        _dispatch_trace_item_push_internal(queue, v15, v17);
      _dispatch_introspection_queue_item_enqueue(queue, v15);
      *((_QWORD *)isa + 5) = v15;
      if ((v5 & 0x8000000000000000) != 0)
      {
        if ((v5 & 0x4000000000000000) != 0)
        {
          if ((unint64_t)-(uint64_t)v5 >> 62)
            v5 = -1;
          else
            v5 = -(uint64_t)v5;
          v23 = 2;
LABEL_45:
          *((_BYTE *)isa + 30) |= 4 * v23;
          *((_QWORD *)isa + 10) = v5;
          *((_QWORD *)isa + 11) = v12 + v5;
          *((_QWORD *)isa + 12) = -1;
          dispatch_activate(v13);
          return;
        }
        v5 &= ~0x8000000000000000;
        v23 = 1;
      }
      else
      {
        v23 = 0;
      }
      if (v5 >> 62)
        v5 = -1;
      if (_dispatch_host_time_nano2mach)
      {
        v12 = _dispatch_host_time_nano2mach(v12);
      }
      else
      {
        v24 = (3 * v12 * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
        v12 = (v24 + ((3 * v12 - v24) >> 1)) >> 6;
      }
      goto LABEL_45;
    }
    v15[4] = (uint64_t)v18;
    v15[5] = (uint64_t)v16;
    if ((*(_QWORD *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF)
      v19 = 4351;
    else
      v19 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
    v20 = *(_QWORD *)(StatusReg + 224);
    if (v20)
      os_retain(*(void **)(StatusReg + 224));
    v15[3] = v20;
    if (v20 == -1)
      goto LABEL_28;
    if (v20)
      v20 = *(unsigned int *)(v20 + 32);
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817476, v20, v15, 0, 0);
      if (v19)
        goto LABEL_29;
    }
    else
    {
LABEL_28:
      if (v19)
      {
LABEL_29:
        v21 = (HIDWORD(queue[10].isa) >> 30) & 1;
        if ((HIDWORD(queue[10].isa) & 0xFFF) == 0)
          v21 = 1;
        if (v21)
          v22 = v19;
        else
          v22 = 0;
        goto LABEL_34;
      }
    }
    v22 = 0;
LABEL_34:
    v15[1] = v22;
    goto LABEL_35;
  }
}

void _dispatch_source_handler_dispose(uint64_t a1)
{
  void *v2;
  unint64_t StatusReg;
  uint64_t v4;
  int v5;

  if ((*(_BYTE *)a1 & 0x10) != 0)
    _Block_release(*(const void **)(a1 + 40));
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    os_release(v2);
    *(_QWORD *)(a1 + 24) = -1;
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v4 = *(_QWORD *)(StatusReg + 176);
  if (v4)
    v5 = *(_DWORD *)(v4 + 8) + 1;
  else
    v5 = 1;
  if (v5 > _dispatch_continuation_cache_limit)
  {
    _dispatch_continuation_free_to_cache_limit(a1);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v4;
    *(_DWORD *)(a1 + 8) = v5;
    *(_QWORD *)(StatusReg + 176) = a1;
  }
}

void _dispatch_source_set_handler_slow(unint64_t a1)
{
  unint64_t StatusReg;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t *v6;
  uint64_t v7;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v2 = *(_QWORD *)(StatusReg + 160);
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (*(_QWORD *)(a1 + 32))
  {
    if ((*(_BYTE *)a1 & 0x40) != 0)
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v2 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(StatusReg + 176);
    if (v4)
      v5 = *(_DWORD *)(v4 + 8) + 1;
    else
      v5 = 1;
    if (v5 > _dispatch_continuation_cache_limit)
    {
      _dispatch_continuation_free_to_cache_limit(a1);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v4;
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)(StatusReg + 176) = a1;
    }
    a1 = 0;
  }
  v6 = (unint64_t *)(*(_QWORD *)(v2 + 88) + 8 * v3 + 40);
  do
    v7 = __ldxr(v6);
  while (__stlxr(a1, v6));
  if (v7)
    _dispatch_source_handler_dispose(v7);
}

void _dispatch_source_handle_wlh_change(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(a1 + 80);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 | 0x8000000, v1));
  if ((v2 & 0x400000) != 0)
  {
    if ((v2 & 0x8000000) == 0)
      _dispatch_bug_deprecated("Changing target queue hierarchy after source was activated");
  }
  else
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Changing target queue hierarchy after source was activated";
    __break(1u);
  }
}

void _dispatch_source_timer_telemetry_slow(int a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (_dispatch_source_timer_use_telemetry == 1)
  {
    v2 = *a2;
    if (a1 == 2)
      v3 = -v2;
    else
      v3 = *a2;
    if (__telemetry(1, v3, a2[2], a2[1] - v2) == -1)
    {
      v4 = **(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if ((_DWORD)v4)
        _dispatch_bug(1254, v4);
    }
  }
}

char *_dispatch_source_timer_telemetry_init()
{
  char *result;

  result = getenv("LIBDISPATCH_TIMERS_USE_TELEMETRY");
  if (result)
    _dispatch_source_timer_use_telemetry = 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_0_3()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_1_2(int a1, char *__str, const char *a3)
{
  size_t v3;

  return snprintf(__str, v3, a3);
}

_QWORD *dispatch_mach_hooks_install_4libxpc(_QWORD *result)
{
  void *v1;

  if (*result < 3uLL)
    dispatch_mach_hooks_install_4libxpc_cold_1((uint64_t)result);
  do
  {
    v1 = (void *)__ldxr((unint64_t *)&_dispatch_mach_xpc_hooks);
    if (v1 != &_dispatch_mach_xpc_hooks_default)
    {
      __clrex();
      dispatch_mach_hooks_install_4libxpc_cold_2();
    }
  }
  while (__stxr((unint64_t)result, (unint64_t *)&_dispatch_mach_xpc_hooks));
  return result;
}

void _dispatch_mach_hooks_install_default()
{
  _dispatch_mach_xpc_hooks = &_dispatch_mach_xpc_hooks_default;
}

uint64_t dispatch_mach_create(uint64_t a1, __objc2_class **a2, void *aBlock)
{
  _QWORD *v5;

  v5 = _dispatch_Block_copy(aBlock);
  return _dispatch_mach_create(a1, a2, (uint64_t)v5, v5[2], 1u);
}

uint64_t _dispatch_mach_create(uint64_t a1, __objc2_class **a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char v14;
  char *v15;
  unsigned int *v16;
  int v17;

  v10 = _dispatch_object_alloc(OS_dispatch_mach, 136);
  v11 = v10;
  *(_DWORD *)(v10 + 8) += 2;
  if (*(_BYTE *)(*(_QWORD *)v10 + 40) == 19)
    ++*(_DWORD *)(v10 + 8);
  *(_QWORD *)(v10 + 16) = -1985229329;
  *(_DWORD *)(v10 + 80) = 4194305;
  *(_QWORD *)(v10 + 56) = 0x19FFE0000000000;
  do
    v12 = __ldxr(&_dispatch_queue_serial_numbers);
  while (__stxr(v12 + 1, &_dispatch_queue_serial_numbers));
  *(_QWORD *)(v10 + 64) = v12;
  *(_QWORD *)(v10 + 72) = a1;
  *(_WORD *)(v10 + 116) = (8 * a5) & 0x10 | (((a5 >> 2) & 1) << 7) | *(_WORD *)(v10 + 116) & 0xFF6F;
  v13 = _dispatch_unote_create_without_handle((uint64_t)&_dispatch_mach_type_recv, 0, 0);
  v14 = v13[29];
  *((_QWORD *)v13 + 1) = ~v11;
  *((_QWORD *)v13 + 5) = a4;
  *((_QWORD *)v13 + 6) = a3;
  v13[29] = v14 & 0xBF | ((a5 & 1) << 6);
  if ((*(_BYTE *)(v11 + 116) & 0x80) != 0)
    *((_DWORD *)v13 + 8) |= 0x200u;
  *(_QWORD *)(v11 + 88) = v13;
  v15 = _dispatch_mach_send_create((uint64_t)&_dispatch_mach_type_send, 0, 9);
  *((_QWORD *)v15 + 1) = ~v11;
  *(_QWORD *)(v11 + 120) = v15;
  if (a2)
  {
    if ((*((_BYTE *)a2 + 87) & 8) != 0)
      _dispatch_mach_create_cold_2((uint64_t)a2);
    if (*((_DWORD *)a2 + 2) != 0x7FFFFFFF)
    {
      v16 = (unsigned int *)(a2 + 1);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      if (v17 <= 0)
        dispatch_set_target_queue_cold_2();
    }
  }
  else
  {
    a2 = &off_653C0;
  }
  *(_QWORD *)(v11 + 24) = a2;
  return v11;
}

uint64_t dispatch_mach_create_f(uint64_t a1, __objc2_class **a2, uint64_t a3, uint64_t a4)
{
  return _dispatch_mach_create(a1, a2, a3, a4, 0);
}

uint64_t dispatch_mach_create_4libxpc(uint64_t a1, __objc2_class **a2, uint64_t a3, uint64_t a4)
{
  return _dispatch_mach_create(a1, a2, a3, a4, 6u);
}

void _dispatch_mach_dispose(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;

  _dispatch_unote_dispose(a1[11]);
  a1[11] = 0;
  _dispatch_unote_dispose(a1[15]);
  a1[15] = 0;
  v4 = a1[16];
  if (v4)
  {
    _dispatch_unote_dispose(v4);
    a1[16] = 0;
  }
  _dispatch_lane_class_dispose(a1, a2);
}

uint64_t dispatch_mach_request_no_senders(uint64_t a1)
{
  uint64_t result;

  *(_WORD *)(a1 + 116) |= 0x20u;
  result = *(_QWORD *)(a1 + 56);
  if ((~result & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_cold_1(result);
  return result;
}

uint64_t dispatch_mach_notify_no_senders(uint64_t a1, int a2)
{
  __int16 v2;
  uint64_t result;

  if (a2)
    v2 = 96;
  else
    v2 = 32;
  *(_WORD *)(a1 + 116) = v2 | *(_WORD *)(a1 + 116) & 0xFF9F;
  result = *(_QWORD *)(a1 + 56);
  if ((~result & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_cold_1(result);
  return result;
}

uint64_t dispatch_mach_set_flags(uint64_t a1, char a2)
{
  uint64_t result;

  *(_WORD *)(a1 + 116) = *(_WORD *)(a1 + 116) & 0xFF7F | ((a2 & 1) << 7);
  result = *(_QWORD *)(a1 + 56);
  if ((~result & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_cold_1(result);
  return result;
}

void dispatch_mach_connect(dispatch_object_t object, int a2, int a3, dispatch_object_t a4)
{
  Class isa;
  dispatch_object_t v7;
  unsigned int *v8;
  unsigned int v9;

  isa = object[15].isa;
  if ((a2 - 1) <= 0xFFFFFFFD)
    *((_DWORD *)object[11].isa + 6) = a2;
  *((_DWORD *)isa + 23) = a3;
  if ((a3 - 1) <= 0xFFFFFFFD)
  {
    if (a4)
    {
      dispatch_retain(a4);
      LODWORD(a4[6].isa) = 0x40000;
      v7 = a4 + 11;
      if (LODWORD(a4[9].isa))
        v7 = (dispatch_object_t)v7->isa;
      *((_DWORD *)isa + 24) = v7[1].isa;
    }
    *((_QWORD *)isa + 6) = a4;
  }
  if ((WORD2(object[14].isa) & 0x20) != 0 && !*((_QWORD *)isa + 6))
    _dispatch_mach_arm_no_senders((uint64_t)object, 0);
  v8 = (unsigned int *)((char *)isa + 88);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 & 0x7FFFFFFF, v8));
  if ((v9 & 0x80000000) == 0)
    dispatch_mach_connect_cold_1(v9);
  dispatch_activate(object);
}

void _dispatch_mach_arm_no_senders(uint64_t a1, char a2)
{
  mach_port_name_t v3;
  kern_return_t v4;
  kern_return_t v5;
  mach_port_t previous;

  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 24);
  previous = 0;
  if (v3 - 1 <= 0xFFFFFFFD)
  {
    v4 = mach_port_request_notification(mach_task_self_, v3, 70, (*(_WORD *)(a1 + 116) & 0x40) == 0, v3, 0x15u, &previous);
    if (v4 == -301)
      _dispatch_sema4_create_slow_cold_2();
    if (v4)
      _dispatch_bug(252, v4);
    if (previous)
    {
      if ((a2 & 1) == 0)
        _dispatch_mach_arm_no_senders_cold_2(previous);
      v5 = mach_port_deallocate(mach_task_self_, previous);
      if (v5 == -301)
        _dispatch_sema4_create_slow_cold_2();
      if (v5)
        _dispatch_bug(260, v5);
    }
  }
}

void *_dispatch_mach_merge_msg(uint64_t a1, unsigned int a2, mach_msg_header_t *a3, unsigned int a4, unsigned int *a5, int a6, unsigned int a7)
{
  uint64_t v10;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  uint64_t v18;
  int8x16_t v20;
  unint64_t StatusReg;
  NSObject *v22;
  Class isa;

  if ((a2 & 0x200) != 0)
    _dispatch_mach_merge_msg_cold_2(a1);
  v10 = ~*(_QWORD *)(a1 + 8);
  if ((*(_DWORD *)(79 - *(_QWORD *)(a1 + 8)) & 0x10000000) != 0)
    goto LABEL_29;
  if (a3->msgh_id != 70 || (*(_WORD *)(115 - *(_QWORD *)(a1 + 8)) & 0x20) == 0)
  {
    v14 = (unint64_t)_voucher_create_with_mach_msgv(&a3->msgh_bits, a5);
    if ((*(_QWORD *)&a6 & 0xFFFFFFuLL) >= 0x10FF)
      v15 = 4351;
    else
      v15 = *(_QWORD *)&a6 & 0xFFFFFFLL;
    v16 = dispatch_mach_msg_create(a3, a4, HIWORD(a2) & 1, 0);
    v18 = v16;
    if ((a2 & 0x10000) == 0 && MEMORY[0xFFFFFC100])
      kdebug_trace(771948548, a3, v16 + 88, 0, 0);
    *(_QWORD *)(v18 + 56) = v15;
    *(_QWORD *)(v18 + 64) = v14;
    *(_QWORD *)(v18 + 32) = 0;
    *(_DWORD *)(v18 + 48) = -117964798;
    if (v14 != -1)
    {
      if (v14)
        v14 = *(unsigned int *)(v14 + 32);
      if (MEMORY[0xFFFFFC100])
        kdebug_trace(771817484, v14, v18, 0, 0);
    }
    _dispatch_mach_handle_or_push_received_msg(v10, (_QWORD *)v18, a7, v17);
    goto LABEL_17;
  }
  if (_dispatch_mach_msg_sender_is_kernel((uint64_t)a3))
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v22 = *(NSObject **)(StatusReg + 176);
    if (v22)
      *(StatusReg + 176) = v22[2];
    else
      v22 = _dispatch_continuation_alloc_from_heap();
    v22->isa = (Class)(&stru_B8 + 76);
    v22[4].isa = (Class)_dispatch_mach_no_senders_invoke;
    v22[5].isa = (Class)v10;
    v22[3].isa = 0;
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817476, 0, v22, 0, 0);
      isa = v22->isa;
      v22[1].isa = 0;
      if (((unsigned __int16)isa & 0x200) != 0)
      {
LABEL_28:
        (*(void (**)(uint64_t, NSObject *, _QWORD))(*(_QWORD *)v10 + 88))(v10, v22, 0);
        goto LABEL_29;
      }
    }
    else
    {
      v22[1].isa = 0;
    }
    if (MEMORY[0xFFFFFC100])
      _dispatch_trace_item_push_internal((_QWORD *)v10, v22, v20);
    _dispatch_introspection_queue_item_enqueue(v10, v22);
    goto LABEL_28;
  }
  _dispatch_mach_merge_msg_cold_1();
LABEL_29:
  mach_msg_destroy(a3);
  if ((a2 & 0x10000) != 0)
    free(a3);
LABEL_17:
  if ((*(_QWORD *)(a1 + 16) & 2) != 0 || (*(_DWORD *)(v10 + 60) & 0x1800000) == 0x800000)
    return (void *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v10 + 80))(v10, 0, 51);
  else
    return _os_object_release_internal_n((void *)v10, (_BYTE *)&dword_0 + 2);
}

uint64_t _dispatch_mach_no_senders_invoke(uint64_t result)
{
  if ((*(_DWORD *)(result + 80) & 0x10000000) == 0)
    return _dispatch_client_callout4(*(_QWORD *)(*(_QWORD *)(result + 88) + 48), 13, 0, 0, *(uint64_t (**)(void))(*(_QWORD *)(result + 88) + 40));
  return result;
}

void _dispatch_mach_handle_or_push_received_msg(uint64_t a1, _QWORD *a2, unsigned int a3, int8x16_t a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  int8x16_t v10;
  unsigned int v11;
  unsigned int v12;

  v7 = *((_DWORD *)a2 + 12);
  v8 = 3;
  if (v7)
    v8 = 4;
  if ((v7 & 0xFFFFC000) == 0xF8F80000)
    v9 = v7 & 0x3FFF;
  else
    v9 = v8;
  if (v9 != 2
    && (*(_WORD *)(a1 + 116) & 0x10) != 0
    && ((*(uint64_t (**)(_QWORD))((char *)&dword_8 + (_QWORD)_dispatch_mach_xpc_hooks))(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 48)) & 1) != 0)
  {
    a2[2] = -1985229329;
    dispatch_release((dispatch_object_t)a2);
  }
  else
  {
    if (MEMORY[0xFFFFFC100])
      _dispatch_trace_item_push_internal((_QWORD *)a1, a2, a4);
    _dispatch_introspection_queue_item_enqueue(a1, a2);
    v11 = (a3 >> 8) & 0x3FFF;
    if (v11)
      v12 = __clz(__rbit32(v11)) + 1;
    else
      v12 = (*(_DWORD *)(a1 + 84) >> 8) & 0xF;
    _dispatch_lane_push(a1, a2, v12, v10);
  }
}

void _dispatch_mach_reply_merge_msg(uint64_t a1, unsigned int a2, mach_msg_header_t *a3, unsigned int a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v10;
  mach_msg_bits_t msgh_bits;
  mach_msg_bits_t v14;
  mach_port_name_t msgh_voucher_port;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  int8x16_t v26;
  unsigned int v27;
  uint64_t v28;
  int8x16_t v29;
  char v30;

  v10 = ~*(_QWORD *)(a1 + 8);
  if ((*(_DWORD *)(79 - *(_QWORD *)(a1 + 8)) & 0x10000000) != 0)
  {
    mach_msg_destroy(a3);
    if ((a2 & 0x10000) != 0)
      free(a3);
    v30 = 117;
  }
  else
  {
    msgh_bits = a3->msgh_bits;
    v14 = HIWORD(a3->msgh_bits) & 0x1F;
    msgh_voucher_port = a3->msgh_voucher_port;
    if ((v14 == 17 || v14 == 19) && msgh_voucher_port != 0)
    {
      if (v14 == 17)
      {
        _voucher_dealloc_mach_voucher(msgh_voucher_port);
        msgh_bits = a3->msgh_bits;
      }
      a3->msgh_voucher_port = 0;
      a3->msgh_bits = msgh_bits & 0xFFE0FFFF;
    }
    v18 = *(unsigned int *)(a1 + 40);
    v19 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    v20 = dispatch_mach_msg_create(a3, a4, HIWORD(a2) & 1, 0);
    v22 = v20;
    if ((a2 & 0x10000) == 0 && MEMORY[0xFFFFFC100])
      kdebug_trace(771948548, a3, v20 + 88, 0, 0);
    *(_QWORD *)(v22 + 56) = v18;
    *(_QWORD *)(v22 + 64) = v19;
    *(_QWORD *)(v22 + 32) = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v22 + 48) = -117964798;
    if (v19 != -1)
    {
      if (v19)
        v19 = *(unsigned int *)(v19 + 32);
      if (MEMORY[0xFFFFFC100])
        kdebug_trace(771817484, v19, v22, 0, 0);
    }
    if ((*(_WORD *)(v10 + 116) & 0x10) != 0 && *(_QWORD *)(v22 + 32))
    {
      v23 = (*(uint64_t (**)(void))((char *)&dword_10 + (_QWORD)_dispatch_mach_xpc_hooks))();
      if (v23)
        v24 = v23;
      else
        v24 = v10;
      v25 = _dispatch_mach_msg_async_reply_wrap(v22, v10);
      if (MEMORY[0xFFFFFC100])
        _dispatch_trace_item_push_internal(v24, v25, v26);
      _dispatch_introspection_queue_item_enqueue(v24, v25);
      v27 = __clz(__rbit32((*(_DWORD *)(v22 + 56) >> 8) & 0x3FFF));
      if (((*(_DWORD *)(v22 + 56) >> 8) & 0x3FFF) != 0)
        v28 = v27 + 1;
      else
        v28 = 0;
      (*((void (**)(NSObject *, NSObject *, uint64_t))v24->isa + 11))(v24, v25, v28);
    }
    else
    {
      _dispatch_mach_handle_or_push_received_msg(v10, (_QWORD *)v22, a7, v21);
    }
    v30 = 101;
  }
  _dispatch_mach_reply_unregister(v10, a1, v30, v29);
}

void _dispatch_mach_reply_unregister(NSObject *a1, uint64_t a2, char a3, int8x16_t a4)
{
  uint64_t v7;
  Class isa;
  _BOOL4 v9;
  unsigned int *v10;
  unint64_t StatusReg;
  unsigned int v12;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void *v29;
  void *v30;
  NSObject *v31;
  int8x16_t v32;
  unsigned int v33;
  uint64_t v34;

  v7 = *(_QWORD *)a2;
  isa = a1[15].isa;
  if ((a3 & 0x20) != 0)
  {
    v10 = (unsigned int *)((char *)isa + 40);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v12 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    while (!__ldaxr(v10))
    {
      if (!__stxr(v12, v10))
        goto LABEL_8;
    }
    __clrex();
    _dispatch_unfair_lock_lock_slow((uint64_t)isa + 40, 0x10000);
LABEL_8:
    v14 = *(_QWORD *)(a2 + 64);
    if (v14)
      *(_QWORD *)(v14 + 72) = *(_QWORD *)(a2 + 72);
    **(_QWORD **)(a2 + 72) = v14;
    *(_QWORD *)(a2 + 72) = 0;
    if (*((_QWORD *)isa + 7))
      v9 = 0;
    else
      v9 = *((_DWORD *)isa + 22) != 0;
    v15 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    do
      v16 = __ldxr(v10);
    while (__stlxr(0, v10));
    if (v16 != v15)
      _dispatch_unfair_lock_unlock_slow((uint64_t)isa + 40, v16);
  }
  else
  {
    v9 = 0;
  }
  if (!*(_QWORD *)(a2 + 16) || (_dispatch_unote_unregister(a2, a3 & 0xF) & 1) != 0)
  {
    if ((a3 & 0x10) == 0)
    {
      v17 = *(void **)(a2 + 56);
      if (!v17)
      {
        v18 = 0;
        v19 = 0;
        goto LABEL_47;
      }
      os_release(v17);
      v18 = 0;
      v19 = 0;
      goto LABEL_41;
    }
    if ((WORD2(a1[14].isa) & 0x10) != 0 && *(_QWORD *)(a2 + 48))
    {
      v20 = (*(uint64_t (**)(void))((char *)&dword_10 + (_QWORD)_dispatch_mach_xpc_hooks))();
      if (v20)
        v19 = v20;
      else
        v19 = a1;
    }
    else
    {
      v19 = 0;
    }
    v24 = *(_DWORD *)(a2 + 24);
    if (v24)
    {
      if (*(_QWORD *)(a2 + 16) || !*(_BYTE *)(a2 + 30))
      {
        v25 = _dispatch_object_alloc(OS_dispatch_mach_msg, 112);
        v18 = v25;
        *(_QWORD *)(v25 + 16) = -1985229329;
        *(_QWORD *)(v25 + 24) = &off_65340;
        *(_DWORD *)(v25 + 72) = 0;
        *(_QWORD *)(v25 + 80) = 24;
        *(_DWORD *)(v25 + 100) = v24;
        v26 = *(unsigned int *)(a2 + 40);
        v27 = *(_QWORD *)(a2 + 56);
        *(_QWORD *)(v25 + 32) = *(_QWORD *)(a2 + 48);
        *(_QWORD *)(v25 + 56) = v26;
        *(_QWORD *)(v25 + 64) = v27;
        *(_QWORD *)(a2 + 56) = 0;
        if (v19)
          v28 = -117964788;
        else
          v28 = -117964793;
        *(_DWORD *)(v25 + 48) = v28;
LABEL_47:
        if (v7 != -2)
          _dispatch_unote_dispose(a2);
        if (v18)
        {
          if (!v19)
          {
            _dispatch_mach_handle_or_push_received_msg((uint64_t)a1, (_QWORD *)v18, 0, a4);
            if ((a3 & 0x40) == 0)
              return;
            goto LABEL_60;
          }
          v31 = _dispatch_mach_msg_async_reply_wrap(v18, (uint64_t)a1);
          if (MEMORY[0xFFFFFC100])
            _dispatch_trace_item_push_internal(v19, v31, v32);
          _dispatch_introspection_queue_item_enqueue(v19, v31);
          v33 = __clz(__rbit32((*(_DWORD *)(v18 + 56) >> 8) & 0x3FFF));
          if (((*(_DWORD *)(v18 + 56) >> 8) & 0x3FFF) != 0)
            v34 = v33 + 1;
          else
            v34 = 0;
          (*((void (**)(NSObject *, NSObject *, uint64_t))v19->isa + 11))(v19, v31, v34);
        }
        if ((a3 & 0x40) == 0)
          return;
LABEL_60:
        if (v9)
          (*((void (**)(NSObject *, _QWORD, uint64_t))a1->isa + 10))(a1, 0, 3);
        else
          _os_object_release_internal_n(a1, (_BYTE *)&dword_0 + 2);
        return;
      }
      v30 = *(void **)(a2 + 56);
      if (v30)
      {
        os_release(v30);
        *(_QWORD *)(a2 + 56) = 0;
      }
      _dispatch_destruct_reply_port();
    }
    else
    {
      v29 = *(void **)(a2 + 56);
      if (v29)
      {
        os_release(v29);
        v18 = 0;
LABEL_41:
        *(_QWORD *)(a2 + 56) = 0;
        goto LABEL_47;
      }
    }
    v18 = 0;
    goto LABEL_47;
  }
  if (a3 < 0)
  {
    v23 = *((_QWORD *)isa + 7);
    v22 = (uint64_t *)((char *)isa + 56);
    v21 = v23;
    *(_QWORD *)(a2 + 64) = v23;
    if (v23)
      *(_QWORD *)(v21 + 72) = a2 + 64;
    *v22 = a2;
    *(_QWORD *)(a2 + 72) = v22;
  }
}

void _dispatch_mach_send_barrier_drain_invoke(_QWORD *a1, uint64_t a2, const char *a3)
{
  int8x16_t *StatusReg;
  unint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  unsigned int *v9;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  StatusReg = (int8x16_t *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = StatusReg[10].u64[0];
  v7 = (int8x16_t *)StatusReg[10].i64[1];
  v8 = *v7;
  StatusReg[10] = *v7;
  v9 = (unsigned int *)a1[3];
  a1[3] = -1;
  if (v9 != (unsigned int *)-1 && (unsigned int *)((char *)v9 + 1) != 0)
  {
    v11 = v9;
    if (v9)
      v11 = (unsigned int *)v9[8];
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(771817480, v11, a1, 0, 0);
  }
  v12 = a1[1];
  if (v12 == -1)
  {
    v15 = 0;
  }
  else
  {
    v13 = StatusReg[12].i64[1];
    if (((v13 >> 8) & 0xF) != 0)
      v14 = 256 << ((BYTE1(v13) & 0xFu) - 1);
    else
      v14 = 0;
    v15 = v14 & 0xFFFFFFFFFFFFFF00 | StatusReg[12].i64[1];
    if ((v12 & 0xFFFFFF) != 0)
    {
      if ((v12 & 0xFFFFFFuLL) >= (v14 & 0xFFFFFF00)
        && ((v13 & 0x44000000) != 0 || (a1[1] & 0x10000000) != 0))
      {
        v15 = v12 & 0xFFFFFF;
      }
    }
    else if ((unsigned __int16)v13 >> 12)
    {
      v15 = (256 << (((unsigned __int16)v13 >> 12) - 1)) | 0xFF;
    }
  }
  v17 = v15 & 0xFFFFFFFF02FFFFFFLL;
  v18 = StatusReg[2].i64[0];
  if ((v18 & 0x1000000) != 0)
  {
    if (v17)
    {
LABEL_42:
      _dispatch_set_priority_and_voucher_slow(v17, v9, 6);
      goto LABEL_28;
    }
    v17 = v18 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v17 == (v18 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_24;
  }
  if (v17)
    goto LABEL_42;
LABEL_24:
  if (v9 == (unsigned int *)-1)
    goto LABEL_28;
  if ((unsigned int *)StatusReg[14].i64[0] != v9)
  {
    v17 = 0;
    goto LABEL_42;
  }
  if (v9)
    os_release(v9);
LABEL_28:
  v19 = StatusReg[11].i64[0];
  if (v19)
    v20 = *(_DWORD *)(v19 + 8) + 1;
  else
    v20 = 1;
  if (v20 > _dispatch_continuation_cache_limit)
  {
    _dispatch_mach_send_invoke(v6, a3, 6u, v8);
    _dispatch_continuation_free_to_cache_limit((uint64_t)a1);
  }
  else
  {
    a1[2] = v19;
    *((_DWORD *)a1 + 2) = v20;
    StatusReg[11].i64[0] = (uint64_t)a1;
    _dispatch_mach_send_invoke(v6, a3, 6u, v8);
  }
  StatusReg[10].i64[0] = v6;
  StatusReg[10].i64[1] = (uint64_t)v7;
}

void _dispatch_mach_send_invoke(unint64_t a1, const char *a2, unsigned int a3, int8x16_t a4)
{
  uint64_t v7;
  unint64_t StatusReg;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;

  v7 = *(_QWORD *)(a1 + 120);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v9 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
  v10 = 0xFFFFFFFFLL;
  if ((a3 & 4) == 0)
    v10 = 0x10FFFFFFFFLL;
  if ((a3 & 2) != 0)
    v11 = 0x10FFFFFFFFLL;
  else
    v11 = v10;
  v12 = (unint64_t)(a3 & 2) << 35;
  v13 = *(_DWORD *)(StatusReg + 200);
  v14 = (v13 >> 8) & 0xF;
  v15 = (unsigned __int16)v13 >> 12;
  v16 = HIWORD(v13) & 0xF;
  if (v14 <= v15)
    v14 = v15;
  if (v14 > v16)
    v16 = v14;
  v17 = (unint64_t *)(v7 + 64);
  while (1)
  {
    while (1)
    {
      v18 = __ldaxr(v17);
      if ((v18 & v11) != v12)
        break;
      v19 = HIDWORD(v18) & 7;
      if (v16 < v19)
      {
        __clrex();
        _pthread_workqueue_override_start_direct(*(unsigned int *)(StatusReg + 24), (256 << ((BYTE4(v18) & 7u) - 1)) | 0xFF);
        v20 = *(_DWORD *)(StatusReg + 200);
        v16 = v19;
        if ((HIWORD(v20) & 0xF) < v19)
        {
          *(_QWORD *)(StatusReg + 200) = v20 & 0xFFF0FFFF | ((_DWORD)v19 << 16);
          v16 = v19;
        }
      }
      else if (!__stxr(v18 & 0xFFFFFFC7FFFFFFFFLL | v9, v17))
      {
        _dispatch_mach_send_drain(a1, a2, a3, a4);
        return;
      }
    }
    if ((a3 & 1) == 0)
      break;
    if (!__stxr(v18 | 0x2000000000, v17))
      return;
  }
  __clrex();
}

void *_dispatch_mach_notification_merge_evt(uint64_t a1, int8x16_t a2, uint64_t a3, int a4)
{
  void *v4;

  v4 = (void *)~*(_QWORD *)(a1 + 8);
  if ((*(_DWORD *)(a1 + 32) & a4) != 0)
    _dispatch_mach_send_invoke(~*(_QWORD *)(a1 + 8), (const char *)dword_40000, 1u, a2);
  return _os_object_release_internal_n(v4, (_BYTE *)&dword_0 + 2);
}

uint64_t dispatch_mach_send(uint64_t a1, NSObject *a2, int a3)
{
  return _dispatch_mach_send_msg(a1, a2, 0, a3 & 0xFFFF0000);
}

uint64_t _dispatch_mach_send_msg(uint64_t a1, dispatch_object_t object, unint64_t a3, int a4)
{
  _DWORD *v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  dispatch_object_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  objc_class *v14;
  unint64_t StatusReg;
  objc_class *v16;
  int8x16_t v17;
  unsigned int v18;
  dispatch_object_t v19;
  int v20;
  int isa_high;
  char v23;
  uint64_t result;
  unint64_t v25;
  char v26;
  Class v27;
  Class isa;

  v8 = object;
  v9 = *(_QWORD *)(a1 + 120);
  if (object[2].isa != (Class)-1985229329)
  {
    isa = object[2].isa;
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Message already enqueued";
    qword_61258 = (uint64_t)isa;
    __break(1u);
LABEL_42:
    kdebug_trace(771817484, object, v8, 0, 0);
    goto LABEL_33;
  }
  v5 = a3;
  v4 = (_DWORD *)a1;
  if ((a4 & 0x40000) != 0)
  {
    v14 = 0;
  }
  else
  {
    v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
    v12 = v11 & 0xFFFFFF;
    v13 = (unsigned __int16)(v11 >> 8) > 0x10uLL && (a4 & 4) == 0;
    v14 = (objc_class *)&unk_10FF;
    if (!v13)
      v14 = (objc_class *)v12;
  }
  object[7].isa = v14;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v16 = *(objc_class **)(StatusReg + 224);
  if (v16)
    os_retain(*(void **)(StatusReg + 224));
  v8[8].isa = v16;
  LODWORD(v8[6].isa) = a4 | (((*(_QWORD *)(StatusReg + 32) & 0x300) != 0) << 18);
  dispatch_retain(v8);
  v18 = __clz(__rbit32((LODWORD(v8[7].isa) >> 8) & 0x3FFF));
  if (((LODWORD(v8[7].isa) >> 8) & 0x3FFF) != 0)
    v7 = v18 + 1;
  else
    v7 = 0;
  v19 = v8 + 11;
  if (LODWORD(v8[9].isa))
    v19 = (dispatch_object_t)v19->isa;
  v20 = (int)v19->isa;
  if (((uint64_t)v19->isa & 0x1F00) != 0x1500 || (HIDWORD(v19[1].isa) - 1) >= 0xFFFFFFFE)
    isa_high = 0;
  else
    isa_high = HIDWORD(v19[1].isa);
  HIDWORD(v8[6].isa) = isa_high;
  v6 = 8 * (a4 & 1);
  if ((v20 & 0x1F) == 0x12 && !isa_high && !*(_DWORD *)(v9 + 88) && (v4[20] & 0x10000000) == 0)
  {
    v23 = _dispatch_mach_msg_send((unint64_t)v4, (uint64_t)v8, 0, 0, v6);
    result = 0;
    if ((v23 & 2) == 0)
      return result;
    goto LABEL_37;
  }
  object = (dispatch_object_t)v8[8].isa;
  if (object != (dispatch_object_t)-1)
  {
    if (object)
      object = (dispatch_object_t)LODWORD(object[4].isa);
    if (MEMORY[0xFFFFFC100])
      goto LABEL_42;
  }
LABEL_33:
  if (v5)
    v25 = v5;
  else
    v25 = (unint64_t)v8;
  _dispatch_mach_send_push_and_trydrain(v4, v25, v7, v6, v17);
  if ((v26 & 1) == 0)
    return 0;
LABEL_37:
  v27 = v8[8].isa;
  if (v27)
    os_release(v27);
  v8[8].isa = 0;
  v8[2].isa = (Class)-1985229329;
  dispatch_release(v8);
  return 1;
}

uint64_t dispatch_mach_send_with_result(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, _DWORD *a6)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a4)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid send flags";
    qword_61258 = a4;
    __break(1u);
  }
  else
  {
    result = _dispatch_mach_send_msg(result, (dispatch_object_t)a2, 0, a3 & 0xFFFF0000 | 1);
    if ((_DWORD)result)
    {
      v9 = *(_DWORD *)(a2 + 48);
      v10 = v9 & 0x3FFF;
      v11 = 3;
      if (v9)
        v11 = 4;
      if ((v9 & 0xFFFFC000) == 0xF8F80000)
      {
        v9 = 0;
        v12 = v10;
      }
      else
      {
        v12 = v11;
      }
    }
    else
    {
      v9 = 0;
      v12 = 10;
    }
    *a5 = v12;
    *a6 = v9;
  }
  return result;
}

uint64_t dispatch_mach_send_and_wait_for_reply(uint64_t a1, NSObject *a2, int a3)
{
  char v4;

  return _dispatch_mach_send_and_wait_for_reply(a1, a2, a3 & 0xFFFF0000, &v4);
}

uint64_t _dispatch_mach_send_and_wait_for_reply(uint64_t a1, dispatch_object_t object, int a3, _BYTE *a4)
{
  unint64_t StatusReg;
  int isa;
  dispatch_object_t v10;
  dispatch_object_t v11;
  unsigned int isa_high;
  unsigned int special_reply_port;
  uint64_t v14;
  mach_port_name_t v15;
  vm_size_t v16;
  uint64_t v17;
  mach_msg_header_t *v18;
  size_t v19;
  vm_size_t v20;
  mach_msg_header_t *v21;
  int v22;
  mach_port_name_t v23;
  mach_msg_option_t v24;
  mach_msg_return_t v25;
  mach_msg_return_t v26;
  uint64_t msgh_size;
  mach_msg_header_t *v28;
  vm_size_t v29;
  uint64_t v30;
  mach_msg_header_t *v31;
  mach_msg_header_t *v32;
  uint64_t msgh_local_port;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int8x16_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  dispatch_object_t v58;
  uint64_t *v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;

  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v61 = 0u;
  v62 = 0u;
  v60 = -2;
  *(&v63 + 1) = object[4];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  DWORD2(v65) = *(_QWORD *)(StatusReg + 24);
  isa = (int)object[9].isa;
  v10 = object + 11;
  v11 = object + 11;
  if (isa)
    v11 = (dispatch_object_t)v10->isa;
  isa_high = HIDWORD(v11[1].isa);
  if (isa_high - 1 > 0xFFFFFFFD || ((uint64_t)v11->isa & 0x1F00) != 0x1500)
  {
    isa_high = *(_DWORD *)(StatusReg + 64);
    if (!isa_high)
    {
      special_reply_port = thread_get_special_reply_port();
      *(_QWORD *)(StatusReg + 64) = special_reply_port;
      if (special_reply_port + 1 < 2)
        _dispatch_mach_send_and_wait_for_reply_cold_6();
      isa_high = special_reply_port;
      isa = (int)object[9].isa;
    }
    if (isa)
      v10 = (dispatch_object_t)v10->isa;
    HIDWORD(v10[1].isa) = isa_high;
    BYTE6(v62) = 1;
  }
  v53 = xmmword_40090;
  v54 = 0;
  v55 = -1;
  v56 = 0;
  v57 = 0;
  v58 = object;
  v59 = &v60;
  v14 = _dispatch_mach_send_msg(a1, object, (unint64_t)&v53, a3 | 4u);
  *a4 = v14;
  if (BYTE6(v62))
  {
    if (isa_high == *(_DWORD *)(StatusReg + 64))
      *(_QWORD *)(StatusReg + 64) = 0;
    v15 = *(_DWORD *)(*(_QWORD *)(a1 + 120) + 92);
  }
  else
  {
    v15 = 0;
  }
  if (isa_high + 1 <= 1)
    _dispatch_mach_send_and_wait_for_reply_cold_1(isa_high);
  v52 = &v49;
  v50 = *((_QWORD *)&v63 + 1);
  v16 = (vm_page_mask + 0x4000) & ~vm_page_mask;
  __chkstk_darwin(v14, ((_DWORD)vm_page_mask + 0x4000) & ~(_DWORD)vm_page_mask);
  v18 = (mach_msg_header_t *)((char *)&v49 - v17);
  bzero((char *)&v49 - v17, v19);
  LODWORD(v20) = 0;
  v21 = 0;
  if (v15 - 1 >= 0xFFFFFFFE)
    v22 = 117440526;
  else
    v22 = 117456910;
  if (v15 - 1 >= 0xFFFFFFFE)
    v23 = 0;
  else
    v23 = v15;
  v51 = a1;
  v24 = v22 & 0xFFFFFDFF | (((*(unsigned __int16 *)(a1 + 116) >> 7) & 1) << 9);
  while (1)
  {
    v25 = mach_msg(v18, v24, 0, v16, isa_high, 0, v23);
    v26 = v25;
    if (v25 != 268451844)
      break;
    msgh_size = v18->msgh_size;
    if (msgh_size >= 0xFFFFFFBC)
      _dispatch_mach_send_and_wait_for_reply_cold_3(msgh_size);
    if ((v24 & 4) == 0)
    {
      _dispatch_log("BUG in libdispatch client: dispatch_mach_send_and_wait_for_reply: dropped message too large to fit in memory: id = 0x%x, size = %u", v18->msgh_id, msgh_size);
      goto LABEL_42;
    }
    v20 = msgh_size + 68;
    v28 = (mach_msg_header_t *)malloc_type_malloc(msgh_size + 68, 0x62EACE2EuLL);
    v21 = v28;
    v29 = v20;
    if (!v28)
    {
      _dispatch_mach_send_and_wait_for_reply_cold_5();
      v28 = v18;
      v29 = v16;
    }
    v24 = v24 & 0xFFFFFEFB | 0x100;
    v16 = v29;
    v18 = v28;
  }
  if ((v25 - 268451842) <= 7 && ((1 << (v25 - 2)) & 0x91) != 0)
  {
    if (BYTE6(v62))
      _dispatch_destruct_reply_port();
    goto LABEL_34;
  }
  if (v25)
    _dispatch_mach_send_and_wait_for_reply_cold_2(v25);
  LODWORD(v16) = v18->msgh_size + 68;
  if (v21 && v16 < v20)
  {
    v31 = (mach_msg_header_t *)malloc_type_realloc(v21, v20, 0x7CF7F135uLL);
    if (v31)
    {
      v21 = v31;
      v32 = v31;
    }
    else
    {
      v32 = v18;
    }
  }
  else
  {
LABEL_42:
    v32 = v18;
  }
  msgh_local_port = v32->msgh_local_port;
  v34 = (unsigned int *)(*(_QWORD *)(v51 + 120) + 40);
  v35 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v34))
  {
    if (!__stxr(v35, v34))
      goto LABEL_48;
  }
  __clrex();
  _dispatch_unfair_lock_lock_slow((uint64_t)v34, 0x10000);
LABEL_48:
  v37 = v65;
  if ((_QWORD)v65)
  {
    v38 = *((_QWORD *)&v64 + 1);
    v39 = (_QWORD *)v65;
    if (*((_QWORD *)&v64 + 1))
    {
      *(_QWORD *)(*((_QWORD *)&v64 + 1) + 72) = v65;
      v39 = (_QWORD *)v65;
    }
    *v39 = v38;
    *(_QWORD *)&v65 = 0;
  }
  v40 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    v41 = __ldxr(v34);
  while (__stlxr(0, v34));
  if (v41 != v40)
    _dispatch_unfair_lock_unlock_slow((uint64_t)v34, v41);
  if (BYTE6(v62))
  {
    if ((_DWORD)v62 != (_DWORD)msgh_local_port)
    {
      if ((msgh_local_port - 1) < 0xFFFFFFFE || v37)
        _dispatch_mach_send_and_wait_for_reply_cold_4(msgh_local_port);
      goto LABEL_66;
    }
    if (!v37 || *(_DWORD *)(StatusReg + 64))
    {
LABEL_66:
      _dispatch_destruct_reply_port();
      goto LABEL_67;
    }
    *(_QWORD *)(StatusReg + 64) = msgh_local_port;
  }
  else if ((msgh_local_port - 1) <= 0xFFFFFFFD && v37)
  {
    v42 = _dispatch_object_alloc(OS_dispatch_mach_msg, 112);
    *(_QWORD *)(v42 + 16) = -1985229329;
    *(_QWORD *)(v42 + 24) = &off_65340;
    *(_DWORD *)(v42 + 72) = 0;
    *(_QWORD *)(v42 + 80) = 24;
    *(_DWORD *)(v42 + 100) = msgh_local_port;
    v44 = *((_QWORD *)&v63 + 1);
    v43 = v64;
    *(_QWORD *)&v64 = 0;
    *(_QWORD *)(v42 + 56) = v63;
    *(_QWORD *)(v42 + 64) = v43;
    *(_QWORD *)(v42 + 32) = v44;
    *(_DWORD *)(v42 + 48) = -117964791;
    _dispatch_mach_handle_or_push_received_msg(v51, (_QWORD *)v42, 0, v45);
  }
LABEL_67:
  v32->msgh_local_port = 0;
  if (*(_DWORD *)(v51 + 80) & 0x10000000 | v26)
  {
    if (!v26)
      mach_msg_destroy(v32);
LABEL_34:
    free(v21);
    return 0;
  }
  v46 = dispatch_mach_msg_create(v32, v16, v21 != 0, 0);
  v30 = v46;
  if (!v21 || v32 != v18)
  {
    v47 = (_QWORD *)(v46 + 88);
    if (*(_DWORD *)(v46 + 72))
      v47 = (_QWORD *)*v47;
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(771948548, v18, v47, 0, 0);
  }
  *(_QWORD *)(v30 + 32) = v50;
  return v30;
}

uint64_t dispatch_mach_send_with_result_and_wait_for_reply(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, _DWORD *a6)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;

  if (a4)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid send flags";
    qword_61258 = a4;
    __break(1u);
  }
  else
  {
    v13 = 0;
    result = _dispatch_mach_send_and_wait_for_reply(result, (dispatch_object_t)a2, a3 & 0xFFFF0000 | 1, &v13);
    v9 = v13;
    if (v13)
    {
      v9 = *(_DWORD *)(a2 + 48);
      v10 = v9 & 0x3FFF;
      v11 = 3;
      if (v9)
        v11 = 4;
      if ((v9 & 0xFFFFC000) == 0xF8F80000)
      {
        v9 = 0;
        v12 = v10;
      }
      else
      {
        v12 = v11;
      }
    }
    else
    {
      v12 = 10;
    }
    *a5 = v12;
    *a6 = v9;
  }
  return result;
}

uint64_t dispatch_mach_send_with_result_and_async_reply_4libxpc(uint64_t result, dispatch_object_t object, int a3, uint64_t a4, uint64_t *a5, _DWORD *a6)
{
  dispatch_object_t v9;
  int isa;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a4)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid send flags";
    qword_61258 = a4;
    __break(1u);
    goto LABEL_16;
  }
  if ((*(_WORD *)(result + 116) & 0x10) == 0)
  {
LABEL_16:
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_mach_send_with_result_and_wait_for_reply is XPC only";
    __break(1u);
LABEL_17:
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Reply port needed for async send with reply";
    __break(1u);
    return result;
  }
  v9 = object + 11;
  if (LODWORD(object[9].isa))
    v9 = (dispatch_object_t)v9->isa;
  if ((HIDWORD(v9[1].isa) - 1) > 0xFFFFFFFD || ((uint64_t)v9->isa & 0x1F00) != 0x1500)
    goto LABEL_17;
  result = _dispatch_mach_send_msg(result, object, 0, a3 & 0xFFFF0000 | 1);
  if ((_DWORD)result)
  {
    isa = (int)object[6].isa;
    v11 = isa & 0x3FFF;
    v12 = 3;
    if (isa)
      v12 = 4;
    if ((isa & 0xFFFFC000) == 0xF8F80000)
    {
      isa = 0;
      v13 = v11;
    }
    else
    {
      v13 = v12;
    }
  }
  else
  {
    isa = 0;
    v13 = 10;
  }
  *a5 = v13;
  *a6 = isa;
  return result;
}

unsigned int *dispatch_mach_reconnect(uint64_t a1, unsigned int a2, dispatch_object_t object)
{
  uint64_t v3;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unint64_t StatusReg;
  _QWORD *v12;

  v3 = (uint64_t)object;
  v6 = *(_QWORD *)(a1 + 120);
  v7 = (unsigned int *)(v6 + 88);
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  if (a2 - 1 <= 0xFFFFFFFD && object)
  {
    dispatch_retain(object);
    *(_DWORD *)(v3 + 48) = 0x40000;
    v9 = v3 + 88;
    if (*(_DWORD *)(v3 + 72))
      v9 = *(_QWORD *)v9;
    v10 = *(_DWORD *)(v9 + 8);
  }
  else
  {
    v10 = 0;
    if (object == (dispatch_object_t)-1)
      v3 = -1;
    else
      v3 = 0;
  }
  *(_DWORD *)(v6 + 96) = v10;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v12 = *(_QWORD **)(StatusReg + 176);
  if (v12)
    *(_QWORD *)(StatusReg + 176) = v12[2];
  else
    v12 = _dispatch_continuation_alloc_from_heap();
  v12[5] = v12;
  v12[6] = v3;
  v12[7] = a2;
  v12[3] = -1;
  v12[4] = _dispatch_mach_reconnect_invoke;
  *(_OWORD *)v12 = xmmword_400A0;
  return _dispatch_mach_send_push((unsigned int *)a1, (unint64_t)v12, 0, (int8x16_t)xmmword_400A0);
}

BOOL _dispatch_mach_reconnect_invoke(uint64_t a1, uint64_t a2, int8x16_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int8x16_t v8;
  uint64_t v9;
  char v10;
  unsigned int *v11;
  unint64_t StatusReg;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  __int16 v25;
  uint64_t v26;
  int8x16_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v31;

  v5 = *(_QWORD *)(a1 + 120);
  if (*(_QWORD *)(v5 + 16))
  {
    _dispatch_unote_unregister(*(_QWORD *)(a1 + 120), 5);
    *(_DWORD *)(*(_QWORD *)(a1 + 120) + 24) = 0;
  }
  v6 = *(_DWORD *)(v5 + 92);
  if ((v6 + 1) >= 2)
  {
    v7 = _dispatch_object_alloc(OS_dispatch_mach_msg, 112);
    *(_QWORD *)(v7 + 16) = -1985229329;
    *(_QWORD *)(v7 + 24) = &off_65340;
    *(_DWORD *)(v7 + 72) = 0;
    *(_QWORD *)(v7 + 80) = 24;
    *(_DWORD *)(v7 + 96) = v6;
    *(_DWORD *)(v7 + 48) = -117964793;
    _dispatch_mach_handle_or_push_received_msg(a1, (_QWORD *)v7, 0, v8);
    *(_DWORD *)(v5 + 92) = 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (v9)
  {
    _dispatch_mach_msg_not_sent(a1, v9, 0);
    *(_QWORD *)(v5 + 48) = 0;
  }
  *(_WORD *)(a1 + 118) &= ~1u;
  v31 = 0;
  if ((*(_DWORD *)(a1 + 80) & 0x40000000) != 0)
    v10 = -112;
  else
    v10 = -110;
  v11 = (unsigned int *)(v5 + 40);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v13 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v11))
  {
    if (!__stxr(v13, v11))
      goto LABEL_15;
  }
  __clrex();
  _dispatch_unfair_lock_lock_slow(v5 + 40, 0x10000);
LABEL_15:
  v15 = v31;
  v31 = *(_QWORD *)(v5 + 56);
  v16 = v31;
  *(_QWORD *)(v5 + 56) = v15;
  if (v16)
  {
    *(_QWORD *)(v16 + 72) = &v31;
    do
    {
      v17 = *(_QWORD *)(v16 + 64);
      *(_QWORD *)(v16 + 72) = 0;
      _dispatch_mach_reply_unregister(a1, v16, v10, a3);
      v16 = v17;
    }
    while (v17);
    v15 = *(_QWORD *)(v5 + 56);
  }
  v18 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    v19 = __ldxr(v11);
  while (__stlxr(0, v11));
  if (v19 == v18)
  {
    if (v15)
      return v15 == 0;
  }
  else
  {
    _dispatch_unfair_lock_unlock_slow(v5 + 40, v19);
    if (v15)
      return v15 == 0;
  }
  v20 = *(_QWORD *)(StatusReg + 176);
  if (v20)
    v21 = *(_DWORD *)(v20 + 8) + 1;
  else
    v21 = 1;
  v22 = *(_DWORD *)(a2 + 56);
  v23 = *(_QWORD *)(a2 + 48);
  if (v21 > _dispatch_continuation_cache_limit)
  {
    _dispatch_continuation_free_to_cache_limit(a2);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v20;
    *(_DWORD *)(a2 + 8) = v21;
    *(_QWORD *)(StatusReg + 176) = a2;
  }
  v24 = *(_WORD *)(a1 + 118);
  if (v23 == -1)
  {
    v23 = 0;
    v25 = v24 | 2;
    *(_WORD *)(a1 + 118) = v25;
    if ((v25 & 2) == 0)
      goto LABEL_30;
LABEL_32:
    if ((v22 - 1) <= 0xFFFFFFFD)
    {
      v26 = _dispatch_object_alloc(OS_dispatch_mach_msg, 112);
      *(_QWORD *)(v26 + 16) = -1985229329;
      *(_QWORD *)(v26 + 24) = &off_65340;
      *(_DWORD *)(v26 + 72) = 0;
      *(_QWORD *)(v26 + 80) = 24;
      *(_DWORD *)(v26 + 96) = v22;
      *(_DWORD *)(v26 + 48) = -117964793;
      _dispatch_mach_handle_or_push_received_msg(a1, (_QWORD *)v26, 0, v27);
    }
    if (v23)
      _dispatch_mach_msg_not_sent(a1, v23, 0);
    goto LABEL_36;
  }
  if ((v24 & 2) != 0)
    goto LABEL_32;
LABEL_30:
  *(_DWORD *)(v5 + 92) = v22;
  *(_QWORD *)(v5 + 48) = v23;
LABEL_36:
  v28 = (unsigned int *)(v5 + 88);
  do
    v29 = __ldxr(v28);
  while (__stxr(v29 - 1, v28));
  return v15 == 0;
}

unsigned int *_dispatch_mach_send_push(unsigned int *result, unint64_t a2, uint64_t a3, int8x16_t a4)
{
  unsigned int *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t StatusReg;
  unint64_t v10;
  int v11;
  unsigned int *v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;

  v4 = result;
  v5 = *((_QWORD *)result + 15);
  v6 = *(_UNKNOWN **)a2 == &unk_58778 && *(_QWORD *)a2 > 0xFFFuLL;
  v7 = 0xA000000000;
  if (v6)
    v7 = 0xB000000000;
  *(_QWORD *)(a2 + 16) = 0;
  v8 = (unint64_t *)(v5 + 72);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_QWORD *)(StatusReg + 976) = v5 + 72;
  do
    v10 = __ldxr(v8);
  while (__stlxr(a2, v8));
  if (v10)
    v11 = 2;
  else
    v11 = 4;
  v12 = result + 2;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + v11, v12));
  v14 = a3 << 32;
  if (v10)
  {
    *(_QWORD *)(v10 + 16) = a2;
    *(_QWORD *)(StatusReg + 976) = 0;
    v15 = (unint64_t *)(v5 + 64);
    while (1)
    {
      v16 = __ldxr(v15);
      v17 = v14 | 0x2800000000 | v16 & 0xFFFFFFF0FFFFFFFFLL;
      v7 = 0;
      if ((v16 & 0x700000000) >= v14 || v16 == v17)
        break;
      if (!__stxr(v17, v15))
        goto LABEL_20;
    }
    __clrex();
    v17 = v16;
LABEL_20:
    v19 = HIDWORD(v17) & 7;
    if (v16 >= 4)
    {
      if ((v16 & 0x700000000) < (v17 & 0x700000000))
      {
        if ((_DWORD)v19)
          v21 = (256 << ((BYTE4(v17) & 7u) - 1)) | 0xFF;
        else
          v21 = 255;
        _pthread_workqueue_override_start_direct_check_owner(v16 | 3, v21, v5 + 64);
      }
    }
    else if ((v7 & 0x1000000000) != 0)
    {
      _dispatch_mach_push_send_barrier_drain((uint64_t)result, v19, a4);
    }
    else
    {
      if (!v10 || *(_DWORD *)(v5 + 88) || (result[20] & 0x10000000) != 0)
      {
        v20 = *(uint64_t (**)(void))(*(_QWORD *)result + 80);
        return (unsigned int *)v20();
      }
      if ((v16 & 0x1000000000) != 0)
      {
        v20 = *(uint64_t (**)(void))(*(_QWORD *)result + 80);
        return (unsigned int *)v20();
      }
    }
    return (unsigned int *)_os_object_release_internal_n(v4, (_BYTE *)&dword_0 + 2);
  }
  *(_QWORD *)(v5 + 80) = a2;
  *(_QWORD *)(StatusReg + 976) = 0;
  v22 = (unint64_t *)(v5 + 64);
  do
  {
    v16 = __ldxr(v22);
    if ((v16 & 0x700000000) >= v14)
      v23 = v16;
    else
      v23 = v14 | v16 & 0xFFFFFF50FFFFFFFFLL | 0x800000000;
    v17 = v23 | v7;
  }
  while (__stlxr(v17, v22));
  if ((v16 & 0x8000000000) == 0 || *v12 == 0x7FFFFFFF)
    goto LABEL_20;
  do
    v24 = __ldxr(v12);
  while (__stlxr(v24 - 2, v12));
  if (v24 > 2)
    goto LABEL_20;
  qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
  return result;
}

uint64_t dispatch_mach_get_checkin_port(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 80) & 0x10000000) != 0)
    return 0xFFFFFFFFLL;
  else
    return *(unsigned int *)(*(_QWORD *)(a1 + 120) + 96);
}

BOOL dispatch_mach_can_handoff_4libxpc()
{
  unint64_t v0;
  uint64_t v1;

  v0 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 184;
  while (1)
  {
    v0 = *(_QWORD *)v0;
    if (!v0)
      break;
    if (*(char **)(v0 + 8) == "mach_msg")
    {
      v1 = *(_QWORD *)(v0 + 16);
      if (v1)
        return *(_QWORD *)(v1 + 56) == 0;
      return 0;
    }
  }
  return 0;
}

uint64_t dispatch_mach_handoff_reply_f(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  _QWORD *v8;
  uint64_t result;
  unsigned int *v10;
  int v11;
  unint64_t StatusReg;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;

  v7 = _dispatch_mach_handoff_context(a2);
  v8 = *(_QWORD **)(v7 + 16);
  result = _dispatch_mach_handoff_set_wlh((uint64_t)v8, a1);
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    v10 = (unsigned int *)(a1 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    if (v11 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  *(_QWORD *)(v7 + 24) = a1;
  *v8 = 260;
  v8[4] = a4;
  v8[5] = a3;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if ((*(_QWORD *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF)
    v13 = 4351;
  else
    v13 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
  v14 = *(_QWORD *)(StatusReg + 224);
  if (v14)
    result = (uint64_t)os_retain(*(void **)(StatusReg + 224));
  v8[3] = v14;
  if (v14 != -1)
  {
    if (v14)
      v14 = *(unsigned int *)(v14 + 32);
    if (MEMORY[0xFFFFFC100])
    {
      result = kdebug_trace(771817476, v14, v8, 0, 0);
      if (v13)
        goto LABEL_15;
LABEL_22:
      v16 = 0;
      goto LABEL_19;
    }
  }
  if (!v13)
    goto LABEL_22;
LABEL_15:
  v15 = *(_DWORD *)(a1 + 84);
  if ((v15 & 0x40000000) != 0 || (v15 & 0xFFF) == 0)
  {
    v16 = __clz(__rbit32(v13 >> 8)) + 1;
  }
  else
  {
    v16 = 0;
    v13 = 0;
  }
LABEL_19:
  v8[1] = v13;
  *(_DWORD *)(v7 + 32) = v16;
  *v8 = &unk_58928;
  return result;
}

unint64_t _dispatch_mach_handoff_context(unsigned int a1)
{
  unint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;

  v2 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 184;
  do
  {
    v2 = *(_QWORD *)v2;
    if (!v2)
      goto LABEL_11;
  }
  while (*(char **)(v2 + 8) != "mach_msg");
  v3 = *(unsigned int **)(v2 + 16);
  if (!v3)
LABEL_11:
    _dispatch_mach_handoff_context_cold_1();
  if (*(_QWORD *)(*(_QWORD *)v3 + 40) == 515)
  {
    v3 = (unsigned int *)_dispatch_calloc(1uLL, 0x50uLL);
    *(_QWORD *)(v2 + 16) = v3;
    v3[18] = 1;
  }
  else
  {
    v4 = v3 + 18;
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  if (*((_QWORD *)v3 + 7))
    _dispatch_mach_handoff_context_cold_2();
  *((_QWORD *)v3 + 7) = a1;
  return v2;
}

uint64_t _dispatch_mach_handoff_set_wlh(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t StatusReg;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  char v15;

  v2 = result;
  v3 = (uint64_t *)(a2 + 24);
  if (*(_QWORD *)(a2 + 24))
  {
    v4 = a2;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      if ((*(_DWORD *)(v4 + 80) & 0x400000) != 0)
      {
        v8 = (unsigned int *)(v4 + 80);
        v9 = (unsigned int *)(v4 + 100);
        v10 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        while (!__ldaxr(v9))
        {
          if (!__stxr(v10, v9))
            goto LABEL_12;
        }
        __clrex();
        result = _dispatch_unfair_lock_lock_slow(v4 + 100, 0x10000);
        do
LABEL_12:
          v12 = __ldxr(v8);
        while (__stxr(v12 & 0xFFBFFFFF, v8));
        v13 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        do
          v14 = __ldxr(v9);
        while (__stlxr(0, v9));
        if (v14 != v13)
        {
          v15 = v14;
          result = _dispatch_unfair_lock_unlock_slow(v4 + 100, v14);
          if ((v15 & 2) != 0 && (*(_QWORD *)(StatusReg + 200) & 0xF0000) == 0)
            *(_QWORD *)(StatusReg + 200) = *(_QWORD *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
        }
      }
      if ((*(_QWORD *)(v4 + 56) & 0x2000000000) != 0)
        break;
      v4 = *v3;
      v6 = *v3;
      v7 = *(_QWORD *)(v6 + 24);
      v3 = (uint64_t *)(v6 + 24);
      if (!v7)
        goto LABEL_19;
    }
  }
  else
  {
LABEL_19:
    v4 = 0;
  }
  *(_QWORD *)(v2 + 64) = v4;
  return result;
}

uint64_t *dispatch_mach_handoff_reply(unsigned int *a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t *v6;
  unsigned int *v7;
  int v8;
  void *v9;
  void (*v10)(uint64_t);
  unint64_t StatusReg;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *result;

  v5 = _dispatch_mach_handoff_context(a2);
  v6 = *(uint64_t **)(v5 + 16);
  _dispatch_mach_handoff_set_wlh((uint64_t)v6, (uint64_t)a1);
  if (a1[2] != 0x7FFFFFFF)
  {
    v7 = a1 + 2;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    if (v8 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  *(_QWORD *)(v5 + 24) = a1;
  v9 = _dispatch_Block_copy(a3);
  v10 = (void (*)(uint64_t))a3[2];
  *v6 = 276;
  if (v10 == ___dispatch_block_create_block_invoke)
  {
    v6[5] = (uint64_t)v9;
    result = _dispatch_continuation_init_slow(v6, a1, 0);
    goto LABEL_21;
  }
  v6[4] = (uint64_t)_dispatch_call_block_and_release;
  v6[5] = (uint64_t)v9;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if ((*(_QWORD *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF)
    v12 = 4351;
  else
    v12 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
  v13 = *(_QWORD *)(StatusReg + 224);
  if (v13)
    os_retain(*(void **)(StatusReg + 224));
  v6[3] = v13;
  if (v13 == -1)
    goto LABEL_15;
  if (v13)
    v13 = *(unsigned int *)(v13 + 32);
  if (MEMORY[0xFFFFFC100])
  {
    kdebug_trace(771817476, v13, v6, 0, 0);
    if (v12)
      goto LABEL_16;
  }
  else
  {
LABEL_15:
    if (v12)
    {
LABEL_16:
      v14 = a1[21];
      if ((v14 & 0x40000000) != 0 || (v14 & 0xFFF) == 0)
      {
        result = (uint64_t *)(__clz(__rbit32(v12 >> 8)) + 1);
      }
      else
      {
        result = 0;
        v12 = 0;
      }
      goto LABEL_20;
    }
  }
  result = 0;
LABEL_20:
  v6[1] = v12;
LABEL_21:
  *(_DWORD *)(v5 + 32) = (_DWORD)result;
  v6[6] = *v6;
  *v6 = (uint64_t)&unk_58928;
  return result;
}

double _dispatch_mach_ipc_handoff_invoke(NSObject *a1, int8x16_t a2, uint64_t a3, int a4)
{
  _QWORD *StatusReg;
  NSObject *v7;
  Class isa;
  unint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v14;
  Class v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  void (*v24)(void (**)(void));
  void (__cdecl *v25)(void *);
  int8x16_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;

  v31[1] = "mach_msg";
  v31[2] = a1;
  v32 = 0;
  v33 = 0;
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = StatusReg[20];
  isa = a1[6].isa;
  v9 = (unint64_t *)&a1[8];
  v10 = a1[7].isa;
  do
    v11 = __ldxr(v9);
  while (__stxr(0, v9));
  if (v11)
  {
    if ((v11 & 1) != 0)
      v11 = ~v11;
    else
      _dispatch_sync_ipc_handoff_begin(v11, v10, (uint64_t)v9);
  }
  a1[2].isa = (Class)-1985229329;
  a1[7].isa = 0;
  v31[0] = StatusReg[23];
  StatusReg[23] = v31;
  v12 = (unsigned int *)a1[3].isa;
  a1[3].isa = (Class)-1;
  if (v12 != (unsigned int *)-1 && (unsigned int *)((char *)v12 + 1) != 0)
  {
    v14 = v12;
    if (v12)
      v14 = (unsigned int *)v12[8];
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(771817480, v14, a1, 0, 0);
  }
  v15 = a1[1].isa;
  if (v15 == (Class)-1)
  {
    v18 = 0;
  }
  else
  {
    v16 = StatusReg[25];
    if (((v16 >> 8) & 0xF) != 0)
      v17 = 256 << ((BYTE1(v16) & 0xFu) - 1);
    else
      v17 = 0;
    v18 = v17 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    if (((unint64_t)v15 & 0xFFFFFF) != 0)
    {
      if (((unint64_t)v15 & 0xFFFFFF) >= (v17 & 0xFFFFFF00)
        && ((v16 & 0x44000000) != 0 || ((uint64_t)a1[1].isa & 0x10000000) != 0))
      {
        v18 = (unint64_t)v15 & 0xFFFFFF;
      }
    }
    else if ((unsigned __int16)v16 >> 12)
    {
      v18 = (256 << (((unsigned __int16)v16 >> 12) - 1)) | 0xFF;
    }
  }
  v20 = v18 & 0xFFFFFFFF02FFFFFFLL;
  v21 = StatusReg[4];
  if ((v21 & 0x1000000) != 0)
  {
    if (v20)
      goto LABEL_67;
    v20 = v21 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v20 == (v21 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_30;
  }
  if (v20)
  {
LABEL_67:
    _dispatch_set_priority_and_voucher_slow(v20, v12, 6);
    if (((unsigned __int16)isa & 0x200) != 0)
      goto LABEL_38;
    goto LABEL_35;
  }
LABEL_30:
  if (v12 == (unsigned int *)-1)
    goto LABEL_34;
  if ((unsigned int *)StatusReg[28] != v12)
  {
    v20 = 0;
    goto LABEL_67;
  }
  if (v12)
    os_release(v12);
LABEL_34:
  if (((unsigned __int16)isa & 0x200) != 0)
    goto LABEL_38;
LABEL_35:
  if (MEMORY[0xFFFFFC100])
    _dispatch_trace_item_pop_internal(v7, a1, a2);
  _dispatch_introspection_queue_item_dequeue(v7, a1);
LABEL_38:
  if ((a4 & 0x1000000) != 0)
    v22 = objc_autoreleasePoolPush();
  else
    v22 = 0;
  v24 = (void (*)(void (**)(void)))a1[4].isa;
  v23 = a1[5].isa;
  v25 = (void (__cdecl *)(void *))v24;
  if (v23)
  {
    v25 = (void (__cdecl *)(void *))a1[4].isa;
    if (v24 == _dispatch_call_block_and_release)
      v25 = (void (__cdecl *)(void *))v23[2];
  }
  _dispatch_introspection_callout_entry(a1[5].isa, v25);
  _dispatch_client_callout((uint64_t)v23, (uint64_t (*)(void))v24);
  _dispatch_introspection_callout_return(v23, v25);
  if (v22)
    objc_autoreleasePoolPop(v22);
  if (((unsigned __int16)isa & 0x200) == 0)
  {
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(772079660, a1, 0, 0, 0);
    _dispatch_introspection_queue_item_complete(a1);
  }
  v27 = v32;
  StatusReg[23] = v31[0];
  if (v27)
  {
    _dispatch_mach_ipc_handoff_async((uint64_t)v31, v26);
  }
  else
  {
    v28 = (unsigned int *)&a1[9];
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 - 1, v28));
    if (!v29)
      free(a1);
  }
  if (v11)
    *(double *)v26.i64 = _dispatch_sync_ipc_handoff_end(v11, v10);
  return *(double *)v26.i64;
}

void *_dispatch_mach_ipc_handoff_async(uint64_t a1, int8x16_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(NSObject **)(a1 + 24);
  v5 = *(_QWORD *)(v3 + 56);
  v6 = *(_QWORD *)(v3 + 64);
  v7 = *(unsigned int *)(a1 + 32);
  if ((*(_BYTE *)(v3 + 49) & 2) == 0)
  {
    if (MEMORY[0xFFFFFC100])
      _dispatch_trace_item_push_internal(*(_QWORD **)(a1 + 24), (_QWORD *)v3, a2);
    _dispatch_introspection_queue_item_enqueue(v4, v3);
  }
  (*((void (**)(NSObject *, uint64_t, uint64_t))v4->isa + 11))(v4, v3, v7);
  if (v6)
  {
    v9 = (unint64_t *)(v3 + 64);
    _dispatch_sync_ipc_handoff_begin(v6, v5, v3 + 64);
    while (1)
    {
      v10 = __ldxr(v9);
      if (v10 != v6)
        break;
      if (!__stxr(~v6, v9))
        goto LABEL_11;
    }
    __clrex();
  }
LABEL_11:
  v11 = (unsigned int *)(v3 + 72);
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 - 1, v11));
  if (!v12)
    free((void *)v3);
  return _os_object_release_internal(*(void **)(a1 + 24), v8);
}

void _dispatch_mach_msg_invoke(_DWORD *a1, uint64_t a2, int a3)
{
  int8x16_t *StatusReg;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  int8x16_t v24;
  uint64_t v25;
  mach_msg_header_t *v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;

  StatusReg = (int8x16_t *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = StatusReg[10].i64[0];
  v7 = (int8x16_t *)StatusReg[10].i64[1];
  v8 = *v7;
  StatusReg[10] = *v7;
  v9 = a1[12];
  v10 = v9 & 0xFFFFC000;
  v11 = 3;
  if (v9)
    v11 = 4;
  if (v10 == -117964800)
    v12 = 0;
  else
    v12 = v9;
  if (v10 == -117964800)
    v13 = v9 & 0x3FFF;
  else
    v13 = v11;
  v28 = 0;
  v29 = 0;
  v27[1] = "mach_msg";
  v27[2] = a1;
  v27[0] = StatusReg[11].i64[1];
  StatusReg[11].i64[1] = (uint64_t)v27;
  if (MEMORY[0xFFFFFC100])
    _dispatch_trace_item_pop_internal((_QWORD *)v6, a1, v8);
  _dispatch_introspection_queue_item_dequeue(v6, a1);
  v14 = *(_QWORD *)(v6 + 88);
  *((_QWORD *)a1 + 2) = -1985229329;
  v15 = (unsigned int *)*((_QWORD *)a1 + 8);
  if (v15 != (unsigned int *)-1)
  {
    v16 = *((_QWORD *)a1 + 8);
    if (v15)
      v16 = v15[8];
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817488, v16, a1, 0, 0);
      v15 = (unsigned int *)*((_QWORD *)a1 + 8);
    }
  }
  v17 = *((_QWORD *)a1 + 7);
  if (v17 == -1)
  {
    v20 = 0;
  }
  else
  {
    v18 = StatusReg[12].i64[1];
    if (((v18 >> 8) & 0xF) != 0)
      v19 = 256 << ((BYTE1(v18) & 0xFu) - 1);
    else
      v19 = 0;
    v20 = v17 & 0xFFFFFF;
    if (v20)
    {
      if (v20 < (v19 & 0xFFFFFF00))
        v20 = v19 & 0xFFFFFFFFFFFFFF00 | StatusReg[12].i64[1];
    }
    else if ((unsigned __int16)v18 >> 12)
    {
      v20 = (256 << (((unsigned __int16)v18 >> 12) - 1)) | 0xFF;
    }
    else
    {
      v20 = v19 & 0xFFFFFFFFFFFFFF00 | StatusReg[12].i64[1];
    }
  }
  v21 = v20 & 0xFFFFFFFF02FFFFFFLL;
  v22 = StatusReg[2].i64[0];
  if ((v22 & 0x1000000) != 0)
  {
    if (v21)
    {
LABEL_59:
      _dispatch_set_priority_and_voucher_slow(v21, v15, 7);
      goto LABEL_31;
    }
    v21 = v22 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v21 == (v22 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_27;
  }
  if (v21)
    goto LABEL_59;
LABEL_27:
  if (v15 == (unsigned int *)-1)
    goto LABEL_31;
  if ((unsigned int *)StatusReg[14].i64[0] != v15)
  {
    v21 = 0;
    goto LABEL_59;
  }
  if (v15)
    os_release(v15);
LABEL_31:
  v23 = 0;
  *((_QWORD *)a1 + 8) = 0;
  if ((a3 & 0x1000000) != 0)
    v23 = objc_autoreleasePoolPush();
  if ((a3 & 4) != 0)
  {
    _dispatch_client_callout3(*(_QWORD *)(v14 + 48), v13, (uint64_t)a1, *(uint64_t (**)(void))((char *)&dword_18 + (_QWORD)_dispatch_mach_xpc_hooks));
    if (!v23)
      goto LABEL_42;
    goto LABEL_41;
  }
  if ((*(_WORD *)(v6 + 116) & 4) == 0)
    _dispatch_mach_connect_invoke(v6);
  if (v13 != 2 || (*(_DWORD *)(v6 + 80) & 0x10000000) == 0)
  {
    _dispatch_client_callout4(*(_QWORD *)(v14 + 48), v13, (uint64_t)a1, v12, *(uint64_t (**)(void))(v14 + 40));
    if (!v23)
      goto LABEL_42;
LABEL_41:
    objc_autoreleasePoolPop(v23);
    goto LABEL_42;
  }
  v26 = (mach_msg_header_t *)(a1 + 22);
  if (a1[18])
    v26 = *(mach_msg_header_t **)&v26->msgh_bits;
  mach_msg_destroy(v26);
  if (v23)
    goto LABEL_41;
LABEL_42:
  if (MEMORY[0xFFFFFC100])
    kdebug_trace(772079660, a1, 0, 0, 0);
  _dispatch_introspection_queue_item_complete(a1);
  dispatch_release((dispatch_object_t)a1);
  v25 = v28;
  StatusReg[11].i64[1] = v27[0];
  if (v25)
    _dispatch_mach_ipc_handoff_async((uint64_t)v27, v24);
  StatusReg[10].i64[0] = v6;
  StatusReg[10].i64[1] = (uint64_t)v7;
}

void _dispatch_mach_barrier_invoke(NSObject *a1, int8x16_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  Class isa;
  uint64_t v8;
  unint64_t StatusReg;
  uint64_t v10;
  int8x16_t *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v15;
  Class v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  objc_class *v26;
  int v27;
  NSObject *v28;
  void *v29;
  _QWORD *v30;
  void (*v31)(void (**)(void));
  void (__cdecl *v32)(void *);
  void *v33;
  int8x16_t *v34;
  uint64_t v35;

  isa = a1[6].isa;
  v6 = (uint64_t)a1[7].isa;
  v8 = *((_QWORD *)a1->isa + 5);
  if (v8 == 1024)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v10 = *(_QWORD *)(StatusReg + 160);
    v11 = *(int8x16_t **)(StatusReg + 168);
    a2 = *v11;
    *(int8x16_t *)(StatusReg + 160) = *v11;
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = *(_QWORD *)(v6 + 88);
  if ((*(_WORD *)(v6 + 116) & 4) == 0)
  {
    if ((a4 & 0x1000000) != 0)
    {
      v33 = objc_autoreleasePoolPush();
      _dispatch_mach_connect_invoke(v6);
      objc_autoreleasePoolPop(v33);
    }
    else
    {
      _dispatch_mach_connect_invoke(v6);
    }
  }
  v13 = (unsigned int *)a1[3].isa;
  a1[3].isa = (Class)-1;
  if (v13 != (unsigned int *)-1 && (unsigned int *)((char *)v13 + 1) != 0)
  {
    v15 = v13;
    if (v13)
      v15 = (unsigned int *)v13[8];
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(771817480, v15, a1, 0, 0);
  }
  v16 = a1[1].isa;
  v34 = v11;
  v35 = v10;
  if (v16 == (Class)-1)
  {
    v19 = 0;
  }
  else
  {
    v17 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 200);
    if (((v17 >> 8) & 0xF) != 0)
      v18 = 256 << ((BYTE1(v17) & 0xFu) - 1);
    else
      v18 = 0;
    v19 = v18 & 0xFFFFFFFFFFFFFF00 | v17;
    v20 = (unint64_t)v16 & 0xFFFFFF;
    if (((unint64_t)v16 & 0xFFFFFF) != 0)
    {
      if (v20 >= (v18 & 0xFFFFFF00))
      {
        v21 = v16 & 0x10000000;
        if ((v17 & 0x44000000) != 0 || v21 != 0)
          v19 = v20;
      }
    }
    else if ((unsigned __int16)v17 >> 12)
    {
      v19 = (256 << (((unsigned __int16)v17 >> 12) - 1)) | 0xFF;
    }
  }
  v23 = v19 & 0xFFFFFFFF02FFFFFFLL;
  v24 = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v25 = v24[4];
  if ((v25 & 0x1000000) != 0)
  {
    if (v23)
      goto LABEL_67;
    v23 = v25 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v23 == (v25 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_28;
  }
  if (v23)
  {
LABEL_67:
    _dispatch_set_priority_and_voucher_slow(v23, v13, 6);
    if (((unsigned __int16)isa & 0x200) != 0)
      goto LABEL_36;
    goto LABEL_33;
  }
LABEL_28:
  if (v13 == (unsigned int *)-1)
    goto LABEL_32;
  if ((unsigned int *)v24[28] != v13)
  {
    v23 = 0;
    goto LABEL_67;
  }
  if (v13)
    os_release(v13);
LABEL_32:
  if (((unsigned __int16)isa & 0x200) != 0)
    goto LABEL_36;
LABEL_33:
  if (MEMORY[0xFFFFFC100])
    _dispatch_trace_item_pop_internal((_QWORD *)v6, a1, a2);
  _dispatch_introspection_queue_item_dequeue(v6, a1);
LABEL_36:
  v26 = (objc_class *)v24[22];
  if (v26)
    v27 = *((_DWORD *)v26 + 2) + 1;
  else
    v27 = 1;
  v28 = a1;
  if (v27 <= _dispatch_continuation_cache_limit)
  {
    v28 = 0;
    a1[2].isa = v26;
    LODWORD(a1[1].isa) = v27;
    v24[22] = a1;
  }
  if ((a4 & 0x1000000) != 0)
    v29 = objc_autoreleasePoolPush();
  else
    v29 = 0;
  v31 = (void (*)(void (**)(void)))a1[4].isa;
  v30 = a1[5].isa;
  v32 = (void (__cdecl *)(void *))v31;
  if (v30)
  {
    v32 = (void (__cdecl *)(void *))a1[4].isa;
    if (v31 == _dispatch_call_block_and_release)
      v32 = (void (__cdecl *)(void *))v30[2];
  }
  _dispatch_introspection_callout_entry(a1[5].isa, v32);
  _dispatch_client_callout((uint64_t)v30, (uint64_t (*)(void))v31);
  _dispatch_introspection_callout_return(v30, v32);
  _dispatch_client_callout4(*(_QWORD *)(v12 + 48), 6, 0, 0, *(uint64_t (**)(void))(v12 + 40));
  if (v29)
    objc_autoreleasePoolPop(v29);
  if (((unsigned __int16)isa & 0x200) == 0)
  {
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(772079660, a1, 0, 0, 0);
    _dispatch_introspection_queue_item_complete(a1);
  }
  if (v28)
    _dispatch_continuation_free_to_cache_limit((uint64_t)v28);
  if (v8 == 1024)
  {
    v24[20] = v35;
    v24[21] = v34;
  }
}

uint64_t _dispatch_mach_connect_invoke(uint64_t a1)
{
  uint64_t result;

  result = _dispatch_client_callout4(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 48), 1, 0, 0, *(uint64_t (**)(void))(*(_QWORD *)(a1 + 88) + 40));
  *(_WORD *)(a1 + 116) |= 4u;
  return result;
}

unsigned int *dispatch_mach_send_barrier_f(objc_class *a1, objc_class *a2, objc_class *a3, int8x16_t a4)
{
  unint64_t StatusReg;
  NSObject *v8;
  uint64_t v9;
  objc_class *v10;
  int v11;
  objc_class *v12;
  int8x16_t v13;
  unsigned int v14;
  uint64_t v15;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v8 = *(NSObject **)(StatusReg + 176);
  if (v8)
    *(StatusReg + 176) = v8[2];
  else
    v8 = _dispatch_continuation_alloc_from_heap();
  v8->isa = (Class)(&stru_B8 + 76);
  v8[4].isa = a3;
  v8[5].isa = a2;
  if ((*(_QWORD *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF)
    v9 = 4351;
  else
    v9 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
  v10 = *(objc_class **)(StatusReg + 224);
  if (v10)
    os_retain(*(void **)(StatusReg + 224));
  v8[3].isa = v10;
  if (v10 != (objc_class *)-1)
  {
    if (v10)
      v10 = (objc_class *)*((unsigned int *)v10 + 8);
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817476, v10, v8, 0, 0);
      if (v9)
        goto LABEL_13;
LABEL_26:
      v12 = 0;
      goto LABEL_18;
    }
  }
  if (!v9)
    goto LABEL_26;
LABEL_13:
  v11 = (*((_DWORD *)a1 + 21) >> 30) & 1;
  if ((*((_DWORD *)a1 + 21) & 0xFFF) == 0)
    v11 = 1;
  if (v11)
    v12 = (objc_class *)v9;
  else
    v12 = 0;
LABEL_18:
  v8[6].isa = v8->isa;
  v8[7].isa = a1;
  v8->isa = (Class)&unk_58778;
  v8[1].isa = v12;
  if (MEMORY[0xFFFFFC100])
    _dispatch_trace_item_push_internal(a1, v8, a4);
  _dispatch_introspection_queue_item_enqueue(a1, v8);
  v14 = __clz(__rbit32((LODWORD(v8[1].isa) >> 8) & 0x3FFF));
  if (((LODWORD(v8[1].isa) >> 8) & 0x3FFF) != 0)
    v15 = v14 + 1;
  else
    v15 = 0;
  return _dispatch_mach_send_push((unsigned int *)a1, (unint64_t)v8, v15, v13);
}

unsigned int *dispatch_mach_send_barrier(unsigned int *a1, void (**aBlock)(uint64_t a1))
{
  unint64_t StatusReg;
  uint64_t *v5;
  void *v6;
  int8x16_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int8x16_t v13;
  unsigned int v14;
  uint64_t v15;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(uint64_t **)(StatusReg + 176);
  if (v5)
    *(_QWORD *)(StatusReg + 176) = v5[2];
  else
    v5 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
  v6 = _dispatch_Block_copy(aBlock);
  v8 = aBlock[2];
  *v5 = 276;
  if (v8 != ___dispatch_block_create_block_invoke)
  {
    v5[4] = (uint64_t)_dispatch_call_block_and_release;
    v5[5] = (uint64_t)v6;
    if ((*(_QWORD *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF)
      v9 = 4351;
    else
      v9 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
    v10 = *(_QWORD *)(StatusReg + 224);
    if (v10)
      os_retain(*(void **)(StatusReg + 224));
    v5[3] = v10;
    if (v10 == -1)
      goto LABEL_13;
    if (v10)
      v10 = *(unsigned int *)(v10 + 32);
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817476, v10, v5, 0, 0);
      if (v9)
        goto LABEL_14;
    }
    else
    {
LABEL_13:
      if (v9)
      {
LABEL_14:
        v11 = (a1[21] >> 30) & 1;
        if ((a1[21] & 0xFFF) == 0)
          v11 = 1;
        if (v11)
          v12 = v9;
        else
          v12 = 0;
        goto LABEL_19;
      }
    }
    v12 = 0;
LABEL_19:
    v5[1] = v12;
    goto LABEL_20;
  }
  v5[5] = (uint64_t)v6;
  _dispatch_continuation_init_slow(v5, a1, 0);
LABEL_20:
  v5[6] = *v5;
  v5[7] = (uint64_t)a1;
  *v5 = (uint64_t)&unk_58778;
  if (MEMORY[0xFFFFFC100])
    _dispatch_trace_item_push_internal(a1, v5, v7);
  _dispatch_introspection_queue_item_enqueue(a1, v5);
  v14 = __clz(__rbit32((*((_DWORD *)v5 + 2) >> 8) & 0x3FFF));
  if (((*((_DWORD *)v5 + 2) >> 8) & 0x3FFF) != 0)
    v15 = v14 + 1;
  else
    v15 = 0;
  return _dispatch_mach_send_push(a1, (unint64_t)v5, v15, v13);
}

uint64_t dispatch_mach_receive_barrier_f(objc_class *a1, objc_class *a2, objc_class *a3, int8x16_t a4)
{
  unint64_t StatusReg;
  NSObject *v8;
  unint64_t v9;
  objc_class *v10;
  int v11;
  uint64_t v12;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v8 = *(NSObject **)(StatusReg + 176);
  if (v8)
    *(StatusReg + 176) = v8[2];
  else
    v8 = _dispatch_continuation_alloc_from_heap();
  v8->isa = (Class)(&stru_B8 + 76);
  v8[4].isa = a3;
  v8[5].isa = a2;
  if ((*(_QWORD *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF)
    v9 = 4351;
  else
    v9 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
  v10 = *(objc_class **)(StatusReg + 224);
  if (v10)
    os_retain(*(void **)(StatusReg + 224));
  v8[3].isa = v10;
  if (v10 == (objc_class *)-1)
    goto LABEL_12;
  if (v10)
    v10 = (objc_class *)*((unsigned int *)v10 + 8);
  if (MEMORY[0xFFFFFC100])
  {
    kdebug_trace(771817476, v10, v8, 0, 0);
    if (v9)
      goto LABEL_13;
  }
  else
  {
LABEL_12:
    if (v9)
    {
LABEL_13:
      v11 = *((_DWORD *)a1 + 21);
      if ((v11 & 0x40000000) != 0 || (v11 & 0xFFF) == 0)
      {
        v12 = __clz(__rbit32(v9 >> 8)) + 1;
      }
      else
      {
        v12 = 0;
        v9 = 0;
      }
      goto LABEL_17;
    }
  }
  v12 = 0;
LABEL_17:
  v8[6].isa = v8->isa;
  v8[7].isa = a1;
  v8->isa = (Class)&unk_587C0;
  v8[1].isa = (Class)v9;
  if (MEMORY[0xFFFFFC100])
    _dispatch_trace_item_push_internal(a1, v8, a4);
  _dispatch_introspection_queue_item_enqueue(a1, v8);
  return (*(uint64_t (**)(objc_class *, NSObject *, uint64_t))(*(_QWORD *)a1 + 88))(a1, v8, v12);
}

uint64_t dispatch_mach_receive_barrier(unsigned int *a1, void (**aBlock)(uint64_t a1))
{
  unint64_t StatusReg;
  uint64_t *v5;
  void *v6;
  int8x16_t v7;
  void (*v8)(uint64_t);
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *inited;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(uint64_t **)(StatusReg + 176);
  if (v5)
    *(_QWORD *)(StatusReg + 176) = v5[2];
  else
    v5 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
  v6 = _dispatch_Block_copy(aBlock);
  v8 = aBlock[2];
  *v5 = 276;
  if (v8 != ___dispatch_block_create_block_invoke)
  {
    v5[4] = (uint64_t)_dispatch_call_block_and_release;
    v5[5] = (uint64_t)v6;
    if ((*(_QWORD *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF)
      v9 = 4351;
    else
      v9 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
    v10 = *(_QWORD *)(StatusReg + 224);
    if (v10)
      os_retain(*(void **)(StatusReg + 224));
    v5[3] = v10;
    if (v10 == -1)
      goto LABEL_13;
    if (v10)
      v10 = *(unsigned int *)(v10 + 32);
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817476, v10, v5, 0, 0);
      if (v9)
        goto LABEL_14;
    }
    else
    {
LABEL_13:
      if (v9)
      {
LABEL_14:
        v11 = a1[21];
        if ((v11 & 0x40000000) != 0 || (v11 & 0xFFF) == 0)
        {
          inited = (uint64_t *)(__clz(__rbit32(v9 >> 8)) + 1);
        }
        else
        {
          inited = 0;
          v9 = 0;
        }
        goto LABEL_18;
      }
    }
    inited = 0;
LABEL_18:
    v5[1] = v9;
    goto LABEL_19;
  }
  v5[5] = (uint64_t)v6;
  inited = _dispatch_continuation_init_slow(v5, a1, 0);
LABEL_19:
  v5[6] = *v5;
  v5[7] = (uint64_t)a1;
  *v5 = (uint64_t)&unk_587C0;
  if (MEMORY[0xFFFFFC100])
    _dispatch_trace_item_push_internal(a1, v5, v7);
  _dispatch_introspection_queue_item_enqueue(a1, v5);
  return (*(uint64_t (**)(unsigned int *, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 88))(a1, v5, inited);
}

unsigned int *dispatch_mach_cancel(unsigned int *result, const char *a2)
{
  unsigned int *v2;
  unsigned int *v3;
  int v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = result;
  if (result[2] == 0x7FFFFFFF)
    goto LABEL_5;
  v3 = result + 2;
  do
    v4 = __ldxr(v3);
  while (__stxr(v4 + 1, v3));
  if (v4 > 0)
  {
LABEL_5:
    v5 = result + 20;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 | 0x10000000, v5));
    if ((v6 & 0x10000000) == 0)
      dispatch_mach_reconnect((uint64_t)result, 0, (dispatch_object_t)0xFFFFFFFFFFFFFFFFLL);
    return (unsigned int *)_os_object_release_internal(v2, a2);
  }
  else
  {
    qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
  }
  return result;
}

uint64_t _dispatch_mach_activate(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = _dispatch_lane_activate(a1);
  if ((*(_WORD *)(a1 + 116) & 1) == 0)
  {
    v3 = 0;
    result = _dispatch_queue_compute_priority_and_wlh(a1, &v3);
    if ((_DWORD)result)
      return _dispatch_mach_install(a1, v3, result);
  }
  return result;
}

uint64_t _dispatch_mach_install(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t result;
  char *v10;

  v4 = *(_DWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_WORD *)(a1 + 116);
  *(_WORD *)(a1 + 116) = v6 | 1;
  result = *(unsigned int *)(*(_QWORD *)(a1 + 120) + 88);
  if ((result & 0x80000000) != 0)
    _dispatch_mach_install_cold_1(result);
  if (*(_DWORD *)(a1 + 84))
  {
    if ((v4 & 0x10000000) != 0)
      return result;
  }
  else
  {
    *(_DWORD *)(a1 + 84) = a3;
    if ((v4 & 0x10000000) != 0)
      return result;
  }
  if ((v6 & 0x10) != 0)
  {
    result = (*(uint64_t (**)(_QWORD))((char *)&stru_20.cmd + (_QWORD)_dispatch_mach_xpc_hooks))(*(_QWORD *)(v5 + 48));
    if ((_DWORD)result)
    {
      v10 = _dispatch_unote_create_with_handle((uint64_t)&_dispatch_xpc_type_sigterm, 15, 0);
      *((_QWORD *)v10 + 1) = ~a1;
      *(_QWORD *)(a1 + 128) = v10;
      result = _dispatch_unote_register((uint64_t)v10, a2, a3);
    }
  }
  if (*(_DWORD *)(v5 + 24))
    return _dispatch_unote_register(v5, a2, a3);
  return result;
}

void _dispatch_mach_invoke(NSObject *a1, _QWORD *a2, int a3, int8x16_t a4)
{
  NSObject *v7;
  int v8;
  int isa_high;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  __objc2_class **v21;
  int8x16_t *v22;
  Class isa;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t StatusReg;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int8x16_t v70;
  uint64_t v71;

  v71 = 0;
  if ((a3 & 3) == 0)
  {
    a1[2].isa = (Class)-1985229329;
    v7 = *(NSObject **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160);
    if (MEMORY[0xFFFFFC100])
      _dispatch_trace_item_pop_internal(v7, a1, a4);
    _dispatch_introspection_queue_item_dequeue(v7, a1);
  }
  v69 = (uint64_t)a2;
  if ((a3 & 2) != 0)
  {
    v71 = 0x40020000000001;
    v8 = a3 & 0x40000;
    goto LABEL_7;
  }
  v47 = ((unint64_t)LOWORD(a1[10].isa) << 41) - 0x20000000000;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v49 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
  v8 = a3 & 0x40000;
  v50 = 0xFFE00000FFFFFFFCLL;
  if ((a3 & 0x40000) != 0)
  {
    v51 = 0x4000000000;
  }
  else
  {
    v50 = 0xFFE00040FFFFFFFCLL;
    v51 = 1;
  }
  if ((a3 & 1) != 0)
    v52 = 0xFFE00040FFFFFFFCLL;
  else
    v52 = v50;
  v53 = *(_DWORD *)(StatusReg + 200);
  v54 = (v53 >> 8) & 0xF;
  v55 = (unsigned __int16)v53 >> 12;
  v56 = HIWORD(v53) & 0xF;
  if (v54 <= v55)
    v54 = v55;
  if (v54 > v56)
    v56 = v54;
  v57 = (unint64_t *)&a1[7];
  do
  {
    while (1)
    {
      v58 = __ldaxr(v57);
      if ((v58 & v52) != 0)
        break;
      if ((v58 & 0x1000000000) == 0 || (v59 = HIDWORD(v58) & 7, v59 <= v56))
      {
        v60 = (v58 >> 40) & 1;
        if (!((v47 + v58) >> 53))
          LODWORD(v60) = 1;
        if ((_DWORD)v60)
          v61 = 0x60000000000000;
        else
          v61 = 0x20000000000000;
        v62 = v49 | v58 & 0x7700000001 | v61;
        goto LABEL_160;
      }
      __clrex();
      v68 = v47;
      _pthread_workqueue_override_start_direct(*(unsigned int *)(StatusReg + 24), (256 << ((BYTE4(v58) & 7u) - 1)) | 0xFF);
      v47 = v68;
      v63 = *(_DWORD *)(StatusReg + 200);
      v56 = v59;
      if ((HIWORD(v63) & 0xF) < v59)
      {
        *(_QWORD *)(StatusReg + 200) = v63 & 0xFFF0FFFF | ((_DWORD)v59 << 16);
        v56 = v59;
      }
    }
    if ((a3 & 1) != 0)
    {
      __clrex();
      goto LABEL_176;
    }
    v62 = v58 ^ v51;
LABEL_160:
    ;
  }
  while (__stxr(v62, v57));
  if ((v58 & v52) != 0)
  {
LABEL_176:
    v30 = 0;
    v71 = 0;
    a2 = (_QWORD *)v69;
    goto LABEL_131;
  }
  v64 = 0x60000000000000;
  if ((a3 & 1) == 0)
    v64 = v51 | 0x60000000000000;
  v71 = (v62 & v64) - (v58 & 0x3FFE0000000000);
  a2 = (_QWORD *)v69;
  if (!v71)
  {
    v30 = 0;
    goto LABEL_131;
  }
LABEL_7:
  if (v8)
  {
    v67 = 0;
  }
  else
  {
    isa_high = HIDWORD(a1[10].isa);
    v10 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v11 = *(_QWORD *)(v10 + 200);
    if ((_DWORD)v11)
    {
      v12 = isa_high & 0xFFF;
      if ((isa_high & 0xFFF) != 0)
      {
        if (((unsigned __int16)v11 & 0xFFFu) > v12)
          v12 = v11 & 0xFFF;
        if ((unsigned __int16)isa_high >> 12 <= v12 >> 8)
          v13 = 0x40000000;
        else
          v13 = 1140912128;
        v14 = v11 & 0x880F0000 | v12 | v13 & isa_high;
      }
      else
      {
        v15 = v11 | 0x40000000;
        if ((v11 & 0xFFF) == 0)
          v15 = *(_QWORD *)(v10 + 200);
        v16 = (unsigned __int16)isa_high >> 12;
        v14 = v15 & 0xFFFF0FFF | isa_high & 0x400F000;
        if (v16 <= ((v15 >> 8) & 0xF))
          v14 = v15;
      }
    }
    else
    {
      v14 = isa_high & 0xFFF0FFFF;
    }
    *(_QWORD *)(v10 + 200) = v14;
    v67 = v11 & 0xFFF0FFFF;
  }
  if ((a3 & 0x100000) != 0 && ((uint64_t)a1[10].isa & 0x400000) != 0)
  {
    v65 = (unsigned int *)&a1[10];
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 & 0xFFBFFFFF, v65));
  }
  if (((LODWORD(a1[10].isa) << 8) & 0x3000000) != 0)
    v17 = (LODWORD(a1[10].isa) << 8) & 0x3000000 | a3 & 0xFCFFFFF7 | 8;
  else
    v17 = a3 | 8u;
  v18 = v17 & 0x1000002;
  v19 = (unint64_t *)&a1[7];
  v20 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_28:
  if (v18 == 2)
    _dispatch_last_resort_autorelease_pool_push(a2);
  v22 = (int8x16_t *)(v20 + 160);
  v21 = *(__objc2_class ***)(v20 + 160);
  isa = a1[15].isa;
  v24 = (uint64_t)a1[11].isa;
  if ((v17 & 0x40000) == 0 && v24)
  {
    v25 = *(_QWORD *)(v20 + 232);
    v26 = v25 ? *(_QWORD *)(v25 + 24) : -4;
    v27 = *(_QWORD *)(v24 + 16) & 0xFFFFFFFFFFFFFFFCLL;
    v28 = v27 == -4 || v27 == 0;
    if (!v28 && v26 != v27)
      _dispatch_mach_handle_wlh_change((uint64_t)a1);
  }
  if ((WORD2(a1[14].isa) & 1) == 0)
  {
    if ((v17 & 0x40000) != 0)
    {
      v30 = (uint64_t)a1[3].isa;
      goto LABEL_88;
    }
    if ((v17 & 0x10000) != 0)
      v41 = *(_DWORD *)(v20 + 200);
    else
      v41 = 0x2000000;
    v42 = *(_QWORD *)(v20 + 232);
    if (v42)
      v43 = *(_QWORD *)(v42 + 24);
    else
      v43 = -4;
    _dispatch_mach_install((uint64_t)a1, v43, v41);
  }
  if (!a1[6].isa)
  {
    v30 = 0;
    goto LABEL_48;
  }
  v30 = (uint64_t)a1[3].isa;
  if (v21 != (__objc2_class **)v30)
    goto LABEL_48;
  while (2)
  {
    while (2)
    {
      _dispatch_lane_serial_drain(a1, v69, v17, &v71);
      v30 = v31;
LABEL_48:
      v32 = (int)a1[10].isa;
      if (!v30 && (v32 & 0x10000000) == 0 && *(_QWORD *)(v24 + 16) && (*(_QWORD *)(v24 + 16) & 3) == 0)
      {
        _dispatch_unote_resume(v24);
        if (v21 == (__objc2_class **)a1[3].isa
          && !v21[3]
          && !*((_QWORD *)isa + 9)
          && (*((_DWORD *)v21 + 21) & 0x80000000) != 0)
        {
          if (*(_QWORD *)(v20 + 40))
          {
            v39 = *(_QWORD *)(v20 + 232);
            if (v39)
            {
              v40 = *(_QWORD *)(v39 + 24);
              if (v40 != -4 && v40 == (*(_QWORD *)(v24 + 16) & 0xFFFFFFFFFFFFFFFCLL))
              {
                _dispatch_event_loop_drain(1);
                if (a1[6].isa)
                  continue;
              }
            }
          }
        }
        v32 = (int)a1[10].isa;
      }
      break;
    }
    if (!*((_QWORD *)isa + 9))
      goto LABEL_72;
    if ((*((_BYTE *)isa + 30) & 1) != 0 && !*((_DWORD *)isa + 22))
    {
LABEL_71:
      if (!v30)
        goto LABEL_80;
      goto LABEL_72;
    }
    if (*((_DWORD *)isa + 22))
      v34 = *((_QWORD *)isa + 2) != 0;
    else
      v34 = HIWORD(a1[14].isa) & 1;
    if (v34 && v21 != &_dispatch_mgr_q)
    {
      if (!v30)
        v30 = (uint64_t)&_dispatch_mgr_q;
      goto LABEL_87;
    }
    _dispatch_mach_send_invoke((unint64_t)a1, (const char *)v17, 4 * (v21 != &_dispatch_mgr_q), a4);
    if (v30)
    {
LABEL_72:
      if ((v32 & 0x10000000) == 0)
        goto LABEL_87;
      goto LABEL_73;
    }
    if (a1[6].isa)
    {
      v30 = (uint64_t)a1[3].isa;
      goto LABEL_71;
    }
LABEL_80:
    if (*((_QWORD *)isa + 9))
      v30 = -1;
    else
      v30 = 0;
    if ((v32 & 0x10000000) == 0)
      goto LABEL_87;
LABEL_73:
    if ((v32 & 0x80000000) == 0)
    {
      _dispatch_mach_cancel((uint64_t)a1);
      if ((v35 & 1) == 0)
      {
        if (!v30)
          v30 = -1;
        goto LABEL_87;
      }
    }
    if ((WORD2(a1[14].isa) & 8) != 0)
      goto LABEL_87;
    v19 = (unint64_t *)&a1[7];
    if (v21 == (__objc2_class **)a1[3].isa)
    {
      if ((unint64_t)a1[7].isa >> 55)
      {
        v30 = (uint64_t)v21;
        goto LABEL_88;
      }
      if (!a1[6].isa)
      {
        _dispatch_mach_cancel_invoke((uint64_t)a1, v17);
LABEL_87:
        v19 = (unint64_t *)&a1[7];
        goto LABEL_88;
      }
      continue;
    }
    break;
  }
  if (!v30)
    v30 = (uint64_t)a1[3].isa;
LABEL_88:
  v18 = v17 & 0x1000002;
  a2 = (_QWORD *)v69;
  if ((v17 & 0x1000002) == 2)
  {
    v70 = *v22;
    *(_QWORD *)(v20 + 160) = a1;
    *(_QWORD *)(v20 + 168) = &v70;
    _dispatch_last_resort_autorelease_pool_pop(v69);
    a4 = v70;
    *v22 = v70;
  }
  if ((unint64_t)(v30 + 1) > 1)
  {
LABEL_138:
    if ((v17 & 0x40000) == 0)
      goto LABEL_130;
  }
  else
  {
    v36 = v71;
    do
    {
      v37 = __ldxr(v19);
      v38 = (v37 - v36) & 0xFFFFFFF700000001;
      if (!(v37 >> 55))
      {
        if ((v37 & 0x8000000000) != 0)
        {
          __clrex();
          do
            v44 = __ldaxr(v19);
          while (__stxr(v44 ^ 0x8000000000, v19));
          if ((a3 & 1) != 0)
            goto LABEL_28;
          v30 = v22->i64[0];
          if ((*(_QWORD *)(*(_QWORD *)v22->i64[0] + 40) & 0x10000) != 0)
            goto LABEL_28;
          goto LABEL_138;
        }
        if (v30)
          v38 = (v37 - v36) & 0xFFFFFF7700000001 | 0x8000000000;
        else
          v38 = (v37 - v36) & 0xFFFFFFF000000001;
      }
    }
    while (__stlxr(v38, v19));
    if ((~v37 & 0x1800000000) == 0)
    {
      v45 = HIDWORD(v37) & 7;
      v46 = *(_DWORD *)(v20 + 200);
      if ((HIWORD(v46) & 0xF) < v45)
        *(_QWORD *)(v20 + 200) = v46 & 0xFFF0FFFF | ((_DWORD)v45 << 16);
    }
    v30 = 0;
    v71 = 0;
    if ((v17 & 0x40000) != 0)
      goto LABEL_131;
LABEL_130:
    *(_QWORD *)(v20 + 200) = *(_QWORD *)(v20 + 200) & 0xF0000 | v67;
  }
LABEL_131:
  if ((a3 & 1) == 0)
  {
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(772079660, a1, 0, 0, 0);
    _dispatch_introspection_queue_item_complete(a1);
  }
  if (v30)
    _dispatch_queue_invoke_finish(a1, (uint64_t)a2, (__objc2_class **)v30, v71, a4);
  else
    _os_object_release_internal_n(a1, (_BYTE *)&dword_0 + 2);
}

void _dispatch_mach_wakeup(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t a4)
{
  uint64_t v4;
  int v5;
  __objc2_class **v6;
  int v7;
  BOOL v8;

  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(_DWORD *)(a1 + 80);
  if ((*(_WORD *)(a1 + 116) & 1) == 0 || *(_QWORD *)(a1 + 48))
    goto LABEL_3;
  if (!*(_QWORD *)(v4 + 72))
  {
    v6 = 0;
    if ((v5 & 0x10000000) == 0 || !(a3 & 0x10 | ~v5 & 0x50000000))
      goto LABEL_6;
    if ((*(_WORD *)(a1 + 116) & 8) == 0)
    {
LABEL_3:
      if (*(__objc2_class ***)(a1 + 24) == &_dispatch_mgr_q)
        v6 = &_dispatch_mgr_q;
      else
        v6 = (__objc2_class **)(&dword_0 + 1);
      goto LABEL_6;
    }
LABEL_16:
    v6 = 0;
    goto LABEL_6;
  }
  if (*(_DWORD *)(v4 + 64) > 3u || (*(_BYTE *)(v4 + 30) & 1) != 0 && !*(_DWORD *)(v4 + 88))
    goto LABEL_16;
  if (*(_DWORD *)(v4 + 88))
    v7 = *(_QWORD *)(v4 + 16) != 0;
  else
    v7 = *(_WORD *)(a1 + 118) & 1;
  v6 = &_dispatch_mgr_q;
  if (v7)
    v8 = &_dispatch_mgr_q == (__objc2_class **)((char *)&dword_0 + 1);
  else
    v8 = 1;
  if (v8)
    goto LABEL_3;
LABEL_6:
  _dispatch_queue_wakeup((_DWORD *)a1, a2, a3, v6, a4);
}

uint64_t _dispatch_xpc_sigterm_merge_evt(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  NSObject *v5;
  unsigned int v6;
  uint64_t v7;

  v5 = ~*(_QWORD *)(a1 + 8);
  _dispatch_barrier_async_detached_f(v5, (objc_class *)v5, (objc_class *)_dispatch_mach_sigterm_invoke);
  v6 = __clz(__rbit32((a4 >> 8) & 0x3FFF));
  if (((a4 >> 8) & 0x3FFF) != 0)
    v7 = v6 + 1;
  else
    v7 = 0;
  return (*((uint64_t (**)(NSObject *, uint64_t, uint64_t))v5->isa + 10))(v5, v7, 19);
}

uint64_t _dispatch_mach_sigterm_invoke(uint64_t a1)
{
  uint64_t result;

  result = _dispatch_unote_unregister(*(_QWORD *)(a1 + 128), 5);
  if ((*(_DWORD *)(a1 + 80) & 0x10000000) == 0)
    return _dispatch_client_callout4(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 48), 11, 0, 0, *(uint64_t (**)(void))(*(_QWORD *)(a1 + 88) + 40));
  return result;
}

uint64_t dispatch_mach_msg_create(const void *a1, size_t a2, int a3, _QWORD *a4)
{
  const void *v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;

  if (a2 < 0x18 || (v7 = a1) == 0 && a3)
    dispatch_mach_msg_create_cold_1(a2);
  if (a3)
  {
    v8 = _dispatch_object_alloc(OS_dispatch_mach_msg, 96);
    *(_QWORD *)(v8 + 88) = v7;
    *(_QWORD *)(v8 + 16) = -1985229329;
    *(_QWORD *)(v8 + 24) = &off_65340;
    *(_DWORD *)(v8 + 72) = a3;
    *(_QWORD *)(v8 + 80) = a2;
    if (!a4)
      return v8;
    goto LABEL_12;
  }
  v9 = a2 + 88;
  if (a2 - 8 >= 0xFFFFFFFFFFFFFFA0)
    dispatch_mach_msg_create_cold_2(a2);
  v10 = _dispatch_object_alloc(OS_dispatch_mach_msg, v9);
  v8 = v10;
  if (v7)
    memcpy((void *)(v10 + 88), v7, a2);
  *(_QWORD *)(v8 + 16) = -1985229329;
  *(_QWORD *)(v8 + 24) = &off_65340;
  *(_DWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 80) = a2;
  if (a4)
  {
    v7 = (const void *)(v8 + 88);
LABEL_12:
    *a4 = v7;
  }
  return v8;
}

void _dispatch_mach_msg_dispose(uint64_t a1)
{
  void *v2;
  int v3;
  kern_return_t v4;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    os_release(v2);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v3 = *(_DWORD *)(a1 + 72);
  if (v3 == 2)
  {
    v4 = mach_vm_deallocate(mach_task_self_, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 80));
    if (v4)
      _dispatch_bug(3000, v4);
  }
  else if (v3 == 1)
  {
    free(*(void **)(a1 + 88));
  }
}

uint64_t dispatch_mach_msg_get_msg(uint64_t a1, _QWORD *a2)
{
  int v2;
  uint64_t result;

  if (a2)
    *a2 = *(_QWORD *)(a1 + 80);
  v2 = *(_DWORD *)(a1 + 72);
  result = a1 + 88;
  if (v2)
    return *(_QWORD *)result;
  return result;
}

void _dispatch_mach_msg_async_reply_invoke(uint64_t a1, int8x16_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *StatusReg;
  Class isa;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  int8x16_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  int v27;
  uint64_t v28;
  int v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;

  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(NSObject **)(a1 + 56);
  v8 = *(_DWORD *)(v6 + 48);
  v9 = 3;
  if (v8)
    v9 = 4;
  if (v8 >> 14 == 254944)
    v10 = v8 & 0x3FFF;
  else
    v10 = v9;
  v31 = 0;
  v32 = 0;
  v30[1] = "mach_msg";
  v30[2] = v6;
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v30[0] = StatusReg[23];
  StatusReg[23] = v30;
  if (MEMORY[0xFFFFFC100])
    _dispatch_trace_item_pop_internal(v7, (_QWORD *)v6, a2);
  _dispatch_introspection_queue_item_dequeue(v7, v6);
  isa = v7[11].isa;
  *(_QWORD *)(v6 + 16) = -1985229329;
  v13 = *(unsigned int **)(v6 + 64);
  if (v13 != (unsigned int *)-1)
  {
    v14 = *(_QWORD *)(v6 + 64);
    if (v13)
      v14 = v13[8];
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817488, v14, v6, 0, 0);
      v13 = *(unsigned int **)(v6 + 64);
    }
  }
  v15 = *(_QWORD *)(v6 + 56);
  if (v15 == -1)
  {
    v18 = 0;
  }
  else
  {
    v16 = StatusReg[25];
    if (((v16 >> 8) & 0xF) != 0)
      v17 = 256 << ((BYTE1(v16) & 0xFu) - 1);
    else
      v17 = 0;
    v18 = v15 & 0xFFFFFF;
    if (v18)
    {
      if (v18 < (v17 & 0xFFFFFF00))
        v18 = v17 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    }
    else if ((unsigned __int16)v16 >> 12)
    {
      v18 = (256 << (((unsigned __int16)v16 >> 12) - 1)) | 0xFF;
    }
    else
    {
      v18 = v17 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    }
  }
  v19 = v18 & 0xFFFFFFFF02FFFFFFLL;
  v20 = StatusReg[4];
  if ((v20 & 0x1000000) != 0)
  {
    if (v19)
    {
LABEL_56:
      _dispatch_set_priority_and_voucher_slow(v19, v13, 7);
      goto LABEL_28;
    }
    v19 = v20 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v19 == (v20 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_24;
  }
  if (v19)
    goto LABEL_56;
LABEL_24:
  if (v13 == (unsigned int *)-1)
    goto LABEL_28;
  if ((unsigned int *)StatusReg[28] != v13)
  {
    v19 = 0;
    goto LABEL_56;
  }
  if (v13)
    os_release(v13);
LABEL_28:
  v21 = 0;
  *(_QWORD *)(v6 + 64) = 0;
  if ((a4 & 0x1000000) != 0)
    v21 = objc_autoreleasePoolPush();
  _dispatch_client_callout3(*((_QWORD *)isa + 6), v10, v6, *(uint64_t (**)(void))((char *)&dword_18 + (_QWORD)_dispatch_mach_xpc_hooks));
  if (v21)
    objc_autoreleasePoolPop(v21);
  if (MEMORY[0xFFFFFC100])
    kdebug_trace(772079660, v6, 0, 0, 0);
  _dispatch_introspection_queue_item_complete(v6);
  dispatch_release((dispatch_object_t)v6);
  v24 = v31;
  StatusReg[23] = v30[0];
  if (v24)
    _dispatch_mach_ipc_handoff_async((uint64_t)v30, v23);
  v25 = *(unsigned int **)(a1 + 56);
  if (v25[2] != 0x7FFFFFFF)
  {
    v26 = v25 + 2;
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (v27 <= 1)
    {
      if (v27 != 1)
      {
        qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
        return;
      }
      _os_object_dispose(v25, v22);
    }
  }
  v28 = StatusReg[22];
  if (v28)
    v29 = *(_DWORD *)(v28 + 8) + 1;
  else
    v29 = 1;
  if (v29 > _dispatch_continuation_cache_limit)
  {
    _dispatch_continuation_free_to_cache_limit(a1);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v28;
    *(_DWORD *)(a1 + 8) = v29;
    StatusReg[22] = a1;
  }
}

uint64_t dispatch_mach_msg_get_filter_policy_id(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t result;

  if (!a2)
    dispatch_mach_msg_get_filter_policy_id_cold_1();
  v2 = a1 + 88;
  if (*(_DWORD *)(a1 + 72))
  {
    v2 = *(_QWORD *)v2;
    if (!v2)
      dispatch_mach_msg_get_filter_policy_id_cold_4(a1);
  }
  v3 = (unsigned int *)(v2 + ((*(unsigned int *)(v2 + 4) + 3) & 0x1FFFFFFFCLL));
  if (*v3)
    dispatch_mach_msg_get_filter_policy_id_cold_3(*v3);
  result = v3[1];
  if (result < 0x44)
    dispatch_mach_msg_get_filter_policy_id_cold_2(result);
  *a2 = v3[15];
  return result;
}

uint64_t dispatch_mig_server(uint64_t a1, uint64_t a2, unsigned int (*a3)(mach_msg_header_t *, mach_msg_header_t *))
{
  mach_msg_option_t v4;
  size_t v5;
  uint64_t v6;
  mach_msg_header_t *v7;
  uint64_t v8;
  uint64_t v9;
  mach_msg_header_t *v10;
  char v11;
  int v12;
  unint64_t StatusReg;
  int v14;
  mach_msg_header_t *v15;
  BOOL v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  mach_port_t msgh_remote_port;
  mach_port_t v23;
  int v24;
  uint64_t v25;
  uint64_t v27;
  unsigned int (*v28)(mach_msg_header_t *, mach_msg_header_t *);
  uint64_t v29;

  v28 = a3;
  v4 = 117442818;
  v5 = a2 + 68;
  v29 = *(_QWORD *)(a1 + 88);
  __chkstk_darwin(a1, a2);
  v7 = (mach_msg_header_t *)((char *)&v27 - ((v6 + 83) & 0xFFFFFFFFFFFFFFF0));
  bzero(v7, v5);
  v7[1].msgh_remote_port = 0;
  __chkstk_darwin(v8, v9);
  v10 = v7;
  bzero(v7, v5);
  v11 = 0;
  v7->msgh_size = 0;
  v12 = 1000;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v14 = 117442818;
  while (1)
  {
    v15 = v10;
    v10 = v7;
    if (*(_QWORD *)(a1 + 56) >> 55)
      v16 = 0;
    else
      v16 = (*(_DWORD *)(a1 + 80) & 0x10000000) == 0;
    if (!v16 || (--v12, !v12))
    {
      if ((v4 & 1) == 0)
        return 0;
      v14 &= ~2u;
      v4 &= ~2u;
    }
    v17 = mach_msg(v15, v4, v15->msgh_size, v5, *(_DWORD *)(v29 + 24), 0, 0);
    if ((_DWORD)v17)
      break;
    if ((v14 & 2) == 0)
      return 0;
    v18 = voucher_create_with_mach_msg(&v15->msgh_bits);
    v19 = *(_DWORD **)(StatusReg + 224);
    if (v19 == v18)
      goto LABEL_21;
    *(_QWORD *)(StatusReg + 224) = v18;
    if (v18)
    {
      v20 = v18[8];
      if (!v19)
        goto LABEL_17;
    }
    else
    {
      v20 = 0;
      if (!v19)
      {
LABEL_17:
        v21 = 0;
        goto LABEL_18;
      }
    }
    v21 = v19[8];
LABEL_18:
    if ((_DWORD)v20 != -1 && (_DWORD)v20 != v21)
      _dispatch_set_priority_and_mach_voucher_slow(0, v20);
LABEL_21:
    if (v19)
      os_release(v19);
    *(_QWORD *)&v7->msgh_bits = 0;
    *(_QWORD *)&v7->msgh_remote_port = 0;
    *(_QWORD *)&v7->msgh_voucher_port = 0;
    if (!v28(v15, v7))
      goto LABEL_28;
    if ((v7->msgh_bits & 0x80000000) != 0)
      goto LABEL_29;
    msgh_remote_port = v7[1].msgh_remote_port;
    if (!msgh_remote_port)
      goto LABEL_29;
    if (msgh_remote_port == -305)
    {
      v7->msgh_remote_port = 0;
    }
    else
    {
LABEL_28:
      v15->msgh_remote_port = 0;
      mach_msg_destroy(v15);
    }
LABEL_29:
    v23 = v7->msgh_remote_port;
    v11 = 1;
    v7 = v15;
    v4 = v14;
    if (v23)
    {
      if ((v10->msgh_bits & 0x1F) == 0x12)
        v24 = 1;
      else
        v24 = 17;
      v4 = v24 | v14;
      v7 = v15;
    }
  }
  v25 = v17;
  if ((v17 - 268435459) < 2)
  {
    _dispatch_mig_consume_unsent_message(v15);
  }
  else if ((_DWORD)v17 != 268451842)
  {
    if ((_DWORD)v17 == 268451843)
    {
      if (v11 & 1 | (v15->msgh_remote_port != 0))
        return 0;
      else
        return 268451843;
    }
    else
    {
      _dispatch_bug_mach_client("dispatch_mig_server: mach_msg() failed", v17);
    }
  }
  return v25;
}

void _dispatch_mig_consume_unsent_message(mach_msg_header_t *a1)
{
  mach_port_t msgh_local_port;
  mach_msg_bits_t v3;
  kern_return_t v4;

  msgh_local_port = a1->msgh_local_port;
  if (msgh_local_port - 1 <= 0xFFFFFFFD)
  {
    v3 = (a1->msgh_bits >> 8) & 0x1F;
    if (v3 - 17 >= 2)
    {
      if (v3 != 16)
        goto LABEL_10;
      v4 = mach_port_mod_refs(mach_task_self_, msgh_local_port, 1u, -1);
    }
    else
    {
      v4 = mach_port_deallocate(mach_task_self_, msgh_local_port);
    }
    if (v4 == -301)
      _dispatch_sema4_create_slow_cold_2();
    if (v4)
      _dispatch_bug(3170, v4);
  }
LABEL_10:
  mach_msg_destroy(a1);
}

uint64_t dispatch_mach_mig_demux(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  mach_msg_header_t *v4;
  mach_msg_id_t msgh_id;
  uint64_t v6;
  int v7;
  BOOL v8;
  int v9;
  uint64_t v11;
  void (**v12)(mach_msg_header_t *, char *);
  uint64_t v13;
  unint64_t StatusReg;
  uint64_t v15;
  mach_msg_header_t *v16;
  size_t v17;
  mach_port_t msgh_remote_port;
  mach_port_t v19;
  mach_msg_option_t v20;
  mach_msg_return_t v21;
  mach_port_name_t msgh_local_port;
  int v23;
  kern_return_t v24;
  _QWORD v25[3];

  v25[1] = "mach_mig_demux";
  v25[2] = a1;
  v4 = (mach_msg_header_t *)(a4 + 88);
  if (*(_DWORD *)(a4 + 72))
    v4 = *(mach_msg_header_t **)&v4->msgh_bits;
  if (!a3)
    return 0;
  msgh_id = v4->msgh_id;
  while (1)
  {
    v6 = *a2;
    v7 = *(_DWORD *)(*a2 + 8);
    v8 = __OFSUB__(msgh_id, v7);
    v9 = msgh_id - v7;
    if (v9 < 0 == v8 && *(_DWORD *)(v6 + 12) > msgh_id)
      break;
    ++a2;
    if (!--a3)
      return 0;
  }
  v11 = v6 + 40 * v9;
  v13 = *(_QWORD *)(v11 + 40);
  v12 = (void (**)(mach_msg_header_t *, char *))(v11 + 40);
  if (!v13)
    return 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v25[0] = *(_QWORD *)(StatusReg + 184);
  *(_QWORD *)(StatusReg + 184) = v25;
  __chkstk_darwin(a1, (*(_DWORD *)(v6 + 40 * v9 + 64) + 68));
  v16 = (mach_msg_header_t *)((char *)v25 - v15);
  bzero((char *)v25 - v15, v17);
  msgh_remote_port = v4->msgh_remote_port;
  v16->msgh_bits = v4->msgh_bits & 0x1F;
  v16->msgh_size = 36;
  *(_QWORD *)&v16->msgh_remote_port = msgh_remote_port;
  v16->msgh_voucher_port = 0;
  v16->msgh_id = msgh_id + 100;
  (*v12)(v4, (char *)v16);
  if ((v16->msgh_bits & 0x80000000) == 0)
  {
    v19 = v16[1].msgh_remote_port;
    if (v19 == -305)
      goto LABEL_32;
    if (v19)
    {
      v4->msgh_remote_port = 0;
      mach_msg_destroy(v4);
    }
  }
  if (v16->msgh_remote_port)
  {
    if ((v16->msgh_bits & 0x1F) == 0x12)
      v20 = 1;
    else
      v20 = 17;
    v21 = mach_msg(v16, v20, v16->msgh_size, 0, 0, 0, 0);
    if ((v21 - 268435459) >= 2)
    {
      if (v21)
      {
        if (v21 == -301)
          _dispatch_sema4_create_slow_cold_2();
        dispatch_mach_mig_demux_cold_1(v21);
      }
      goto LABEL_32;
    }
    msgh_local_port = v16->msgh_local_port;
    if (msgh_local_port - 1 > 0xFFFFFFFD)
      goto LABEL_31;
    v23 = (v16->msgh_bits >> 8) & 0x1F;
    if ((v23 - 17) >= 2)
    {
      if (v23 != 16)
      {
LABEL_31:
        mach_msg_destroy(v16);
        goto LABEL_32;
      }
      v24 = mach_port_mod_refs(mach_task_self_, msgh_local_port, 1u, -1);
    }
    else
    {
      v24 = mach_port_deallocate(mach_task_self_, msgh_local_port);
    }
    if (v24 == -301)
      _dispatch_sema4_create_slow_cold_2();
    if (v24)
      _dispatch_bug(3170, v24);
    goto LABEL_31;
  }
LABEL_32:
  *(_QWORD *)(StatusReg + 184) = v25[0];
  return 1;
}

uint64_t dispatch_mach_mig_demux_get_context()
{
  unint64_t v0;

  v0 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 184;
  do
  {
    v0 = *(_QWORD *)v0;
    if (!v0)
      dispatch_mach_mig_demux_get_context_cold_1();
  }
  while (*(char **)(v0 + 8) != "mach_mig_demux");
  return *(_QWORD *)(v0 + 16);
}

uint64_t _dispatch_mach_msg_create_reply_disconnected(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int *v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;

  v5 = (int *)a1 + 13;
  if (!a1)
    v5 = (int *)(a2 + 24);
  v6 = *v5;
  if (*v5)
  {
    if (a2 && !*(_QWORD *)(a2 + 16) && *(_BYTE *)(a2 + 30))
    {
      v15 = *(void **)(a2 + 56);
      if (v15)
      {
        os_release(v15);
        *(_QWORD *)(a2 + 56) = 0;
      }
      _dispatch_destruct_reply_port();
      return 0;
    }
    v8 = _dispatch_object_alloc(OS_dispatch_mach_msg, 112);
    v9 = v8;
    *(_QWORD *)(v8 + 16) = -1985229329;
    *(_QWORD *)(v8 + 24) = &off_65340;
    *(_DWORD *)(v8 + 72) = 0;
    *(_QWORD *)(v8 + 80) = 24;
    *(_DWORD *)(v8 + 100) = v6;
    if (a1)
    {
      *(_QWORD *)(v8 + 32) = a1[4];
      v10 = (void *)a1[8];
      *(_QWORD *)(v9 + 56) = a1[7];
      *(_QWORD *)(v9 + 64) = v10;
      if (v10)
        os_retain(v10);
    }
    else
    {
      v12 = *(unsigned int *)(a2 + 40);
      v13 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(v8 + 32) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(v8 + 56) = v12;
      *(_QWORD *)(v8 + 64) = v13;
      *(_QWORD *)(a2 + 56) = 0;
    }
    v14 = a3 | 0xF8F80000;
    if (!a3)
      v14 = 0;
    *(_DWORD *)(v9 + 48) = v14;
  }
  else
  {
    if (a1)
      return 0;
    v11 = *(void **)(a2 + 56);
    if (!v11)
      return 0;
    os_release(v11);
    v9 = 0;
    *(_QWORD *)(a2 + 56) = 0;
  }
  return v9;
}

void _dispatch_destruct_reply_port()
{
  int v0;

  v0 = thread_destruct_special_reply_port();
  if (v0 == -301)
    _dispatch_sema4_create_slow_cold_2();
  if (v0)
    _dispatch_bug(515, v0);
}

void _dispatch_mach_send_drain(unint64_t a1, const char *a2, unsigned int a3, int8x16_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  Class isa;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int *v35;
  int v36;
  unsigned int v37;
  unint64_t StatusReg;
  unsigned int v39;
  uint64_t v41;

  v39 = a2;
  v4 = a1;
  v5 = 0;
  v6 = 0;
  v7 = *(unint64_t **)(a1 + 120);
  v8 = HIDWORD(v7[8]) & 7;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v41 = v8;
  do
  {
    v9 = v7 + 9;
    if (v7[9])
    {
      v37 = v5;
      v10 = v7;
      v11 = v7 + 10;
      v12 = a3;
      v13 = a3 & 0xFFFFFFF7;
LABEL_4:
      v14 = *v11;
      if (!*v11)
      {
        v25 = _dispatch_wait_for_enqueuer(v11, (uint64_t)v9);
        v4 = a1;
        v14 = v25;
      }
      while (1)
      {
        v15 = v14;
        v16 = (unint64_t *)(v14 + 16);
        v14 = *(_QWORD *)(v14 + 16);
        *v11 = v14;
        if (!v14)
        {
          while (1)
          {
            v17 = __ldxr(v9);
            if (v17 != v15)
              break;
            if (!__stlxr(0, v9))
              goto LABEL_13;
          }
          __clrex();
          v14 = *v16;
          if (!*v16)
          {
            v24 = _dispatch_wait_for_enqueuer(v16, (uint64_t)v9);
            v4 = a1;
            v14 = v24;
          }
          *v11 = v14;
        }
LABEL_13:
        isa = v15->isa;
        if (v15->isa < (Class)&unk_1000)
        {
          if ((isa & 1) != 0)
          {
            v19 = v6;
            v21 = (uint64_t)v15[6].isa;
            v20 = (uint64_t)v15[7].isa;
            goto LABEL_24;
          }
          v7 = v10;
          if (v10[2] && *(__objc2_class ***)(StatusReg + 160) != &_dispatch_mgr_q)
          {
            *(_WORD *)(v4 + 118) |= 1u;
            v37 |= 2u;
            goto LABEL_41;
          }
          if (!_dispatch_mach_reconnect_invoke(v4, (uint64_t)v15, a4))
          {
            v4 = a1;
            goto LABEL_41;
          }
        }
        else
        {
          if (*((_QWORD *)isa + 5) != 768)
          {
            v19 = v6;
            v20 = 0;
            v21 = (uint64_t)v15;
LABEL_24:
            v22 = *(_QWORD *)(v21 + 64);
            if (v22 != -1)
            {
              if (v22)
                v22 = *(unsigned int *)(v22 + 32);
              if (MEMORY[0xFFFFFC100])
              {
                kdebug_trace(771817488, v22, v21, 0, 0);
                v4 = a1;
              }
            }
            if (*((_DWORD *)v10 + 22) || (*(_DWORD *)(v4 + 80) & 0x10000000) != 0)
            {
              _dispatch_mach_msg_not_sent(v4, v21, v20);
              v4 = a1;
              v6 = v19;
            }
            else
            {
              v23 = _dispatch_mach_msg_send(v4, v21, v20, v41, v12);
              if (!v23)
              {
                v4 = a1;
                v37 |= 2 * (*(_WORD *)(a1 + 118) & 1);
                v6 = v19;
                v7 = v10;
                v13 = a3 & 0xFFFFFFF7;
                goto LABEL_41;
              }
              v6 = v19 | ((v23 & 2) >> 1);
              v4 = a1;
            }
            v13 = a3 & 0xFFFFFFF7;
            goto LABEL_34;
          }
          if ((a3 & 4) == 0)
          {
            v7 = v10;
LABEL_41:
            *v16 = v14;
            if (!v14)
            {
              while (!__ldxr(v9))
              {
                if (!__stlxr((unint64_t)v15, v9))
                  goto LABEL_48;
              }
              __clrex();
              v27 = *v11;
              if (!*v11)
              {
                v27 = _dispatch_wait_for_enqueuer(v11, (uint64_t)v9);
                v4 = a1;
              }
              v15[2].isa = (Class)v27;
            }
LABEL_48:
            *v11 = (unint64_t)v15;
            if (v15->isa >= (Class)&unk_1000 && *((_QWORD *)v15->isa + 5) == 768)
            {
              v28 = v7 + 8;
              v5 = v37;
              do
              {
                v29 = __ldxr(v28);
                v30 = v29 & 0xFFFFFFC700000000 | 0x3000000000;
              }
              while (__stlxr(v30, v28));
            }
            else
            {
              v31 = v7 + 8;
              v5 = v37;
              do
              {
                v29 = __ldxr(v31);
                v30 = v29 & 0xFFFFFFC7FFFFFFFFLL;
                if ((v29 & 0x2800000000) == 0)
                  v30 = v29 & 0xFFFFFFDF00000000 | 0x2000000000;
              }
              while (__stlxr(v30, v31));
            }
            a3 = v13;
            goto LABEL_60;
          }
          _dispatch_continuation_pop(v15, 0, v39, a1, a4);
        }
        v4 = a1;
LABEL_34:
        v12 = v13;
        if (!v14)
        {
          v12 = v13;
          if (*v9)
            goto LABEL_4;
          a3 = v13;
          v5 = v37;
          v7 = v10;
          break;
        }
      }
    }
    v32 = v7 + 8;
    do
    {
      v29 = __ldxr(v32);
      v30 = v29 & ((uint64_t)(v29 << 26) >> 63) & 0xFFFFFFC7FFFFFFFFLL;
    }
    while (__stlxr(v30, v32));
LABEL_60:
    if ((v29 & 0x800000000) != 0)
    {
      v33 = HIDWORD(v29) & 7;
      v34 = *(_DWORD *)(StatusReg + 200);
      if ((HIWORD(v34) & 0xF) < v33)
        *(_QWORD *)(StatusReg + 200) = v34 & 0xFFF0FFFF | ((_DWORD)v33 << 16);
    }
    v41 = HIDWORD(v30) & 7;
  }
  while ((_DWORD)v30);
  if ((v30 & 0x1000000000) != 0)
  {
    _dispatch_mach_push_send_barrier_drain(v4, v41, a4);
    return;
  }
  if (!v30 && (*(_WORD *)(v4 + 118) & 2) != 0)
  {
    if ((*(_WORD *)(v4 + 116) & 8) != 0)
      v5 = v5;
    else
      v5 = v5 | 0x12;
  }
  if (((v29 ^ v30) & 0x8000000000) == 0)
  {
    if (!(_DWORD)v5)
      return;
LABEL_79:
    (*(void (**)(unint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 80))(v4, (*(unsigned __int16 *)(v4 + 118) << 31 >> 31) & v41, v5);
    return;
  }
  if ((_DWORD)v5)
  {
    v5 = v5 | 1;
    goto LABEL_79;
  }
  if (*(_DWORD *)(v4 + 8) != 0x7FFFFFFF)
  {
    v35 = (unsigned int *)(v4 + 8);
    do
      v36 = __ldxr(v35);
    while (__stlxr(v36 - 2, v35));
    if (v36 <= 2)
    {
      if (v36 == 2)
      {
        _os_object_dispose((void *)a1, a2);
      }
      else
      {
        qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
    }
  }
}

void _dispatch_mach_msg_not_sent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t reply_disconnected;
  int8x16_t v11;
  int v12;
  int8x16_t v13;
  NSObject *v14;
  int8x16_t v15;
  unsigned int v16;
  uint64_t v17;

  v6 = *(_DWORD *)(a2 + 48);
  if ((*(_WORD *)(a1 + 116) & 0x10) != 0 && *(_QWORD *)(a2 + 32))
  {
    v7 = (*(uint64_t (**)(void))((char *)&dword_10 + (_QWORD)_dispatch_mach_xpc_hooks))();
    if (v7)
      v8 = v7;
    else
      v8 = a1;
  }
  else
  {
    v8 = 0;
  }
  if (v8)
    v9 = 12;
  else
    v9 = 7;
  reply_disconnected = _dispatch_mach_msg_create_reply_disconnected((_QWORD *)a2, a3, v9);
  if ((v6 & 2) != 0)
    v12 = 0;
  else
    v12 = -117964795;
  *(_DWORD *)(a2 + 48) = v12;
  _dispatch_mach_handle_or_push_received_msg(a1, (_QWORD *)a2, 0, v11);
  if (reply_disconnected)
  {
    if (v8)
    {
      v14 = _dispatch_mach_msg_async_reply_wrap(reply_disconnected, a1);
      if (MEMORY[0xFFFFFC100])
        _dispatch_trace_item_push_internal(v8, v14, v15);
      _dispatch_introspection_queue_item_enqueue(v8, v14);
      v16 = __clz(__rbit32((*(_DWORD *)(reply_disconnected + 56) >> 8) & 0x3FFF));
      if (((*(_DWORD *)(reply_disconnected + 56) >> 8) & 0x3FFF) != 0)
        v17 = v16 + 1;
      else
        v17 = 0;
      (*((void (**)(NSObject *, NSObject *, uint64_t))v8->isa + 11))(v8, v14, v17);
    }
    else
    {
      _dispatch_mach_handle_or_push_received_msg(a1, (_QWORD *)reply_disconnected, 0, v13);
    }
  }
}

uint64_t _dispatch_mach_msg_send(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int8x16_t v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  signed int v18;
  __int16 v19;
  uint64_t v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  char v27;
  int mach_voucher;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  BOOL v35;
  int v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  signed int v41;
  _DWORD *v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  mach_port_name_t v50;
  int v51;
  int v52;
  BOOL v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  NSObject *v59;
  uint64_t reply_disconnected;
  NSObject *v61;
  int8x16_t v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t StatusReg;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  void *v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  _DWORD *v82;
  char v83;
  char v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD v90[3];
  __int128 v91;
  __int128 v92;
  __int128 v93;

  v6 = a1;
  v7 = *(_QWORD *)(a1 + 120);
  v8 = (unsigned int *)(a2 + 88);
  if (*(_DWORD *)(a2 + 72))
    v8 = *(unsigned int **)v8;
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *v8 & 0x1F;
  v11 = *(_DWORD *)(a2 + 52);
  v12 = 0uLL;
  v92 = 0u;
  v93 = 0u;
  v91 = 0u;
  memset(v90, 0, 40);
  if (v10 == 18)
  {
    v13 = (_DWORD *)(a2 + 48);
    v14 = *(_DWORD *)(a2 + 48);
    if ((v14 & 2) == 0)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = v14 & 0xFFFF0000 | 1;
      goto LABEL_52;
    }
LABEL_19:
    LODWORD(v24) = 0;
    goto LABEL_87;
  }
  v19 = *(_WORD *)(a1 + 118);
  *(_WORD *)(a1 + 118) = v19 & 0xFFFE;
  v20 = *(_QWORD *)(v7 + 48);
  if (v20)
    v21 = v20 == a2;
  else
    v21 = 1;
  if (!v21)
  {
    v80 = v11;
    v84 = a5;
    v24 = v7;
    if (*(_QWORD *)(v7 + 16)
      && *(__objc2_class ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160) != &_dispatch_mgr_q)
    {
      v56 = 0;
      goto LABEL_85;
    }
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v67 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
    if (v67 >= 0x10FF)
      v67 = 4351;
    *(_QWORD *)(v20 + 56) = v67;
    v68 = *(_QWORD *)(StatusReg + 224);
    if (v68)
    {
      v69 = a4;
      os_retain(*(void **)(StatusReg + 224));
      a4 = v69;
    }
    *(_QWORD *)(v20 + 64) = v68;
    *(_DWORD *)(v20 + 48) = ((*(_QWORD *)(StatusReg + 32) & 0x300) != 0) << 18;
    v70 = a4;
    if (!_dispatch_mach_msg_send(v6, *(_QWORD *)(v24 + 48), 0, a4, 0))
      goto LABEL_142;
    if ((*(_WORD *)(v6 + 116) & 0x20) != 0)
      _dispatch_mach_arm_no_senders(v6, 1);
    v20 = 0;
    v7 = v24;
    *(_QWORD *)(v24 + 48) = 0;
    v11 = v80;
    a5 = v84;
    LODWORD(a4) = v70;
  }
  v13 = (_DWORD *)(a2 + 48);
  v14 = *(_DWORD *)(a2 + 48);
  if ((v14 & 2) != 0)
    goto LABEL_19;
  v22 = v14 & 0xFFFF0000 | 1;
  if (v20 != a2)
    v8[2] = *(_DWORD *)(v7 + 92);
  if (*(__objc2_class ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160) != &_dispatch_mgr_q)
  {
    if (v9)
      goto LABEL_16;
LABEL_23:
    if ((*((_BYTE *)v8 + 2) & 0x1F) == 0)
    {
      v82 = v13;
      v86 = v7;
      v79 = v22;
      v25 = a4;
      v26 = v11;
      v27 = a5;
      if (_voucher_task_mach_voucher_pred != -1)
        dispatch_once_f(&_voucher_task_mach_voucher_pred, 0, (dispatch_function_t)_voucher_task_mach_voucher_init);
      v16 = 0;
      mach_voucher = _voucher_task_mach_voucher;
      goto LABEL_31;
    }
    v16 = 0;
    goto LABEL_25;
  }
  if (!*(_QWORD *)(v7 + 16))
  {
    v78 = a4;
    v81 = v11;
    v75 = a5;
    v76 = *(_QWORD *)(v6 + 120);
    *(_DWORD *)(v76 + 24) = v8[2];
    if ((_dispatch_unote_register(v76, -4, 0x2000000u) & 1) == 0)
      _dispatch_bug(1743, 0);
    a5 = v75;
    LODWORD(a4) = v78;
    v11 = v81;
    v13 = (_DWORD *)(a2 + 48);
  }
  if ((*(_BYTE *)(v7 + 30) & 1) != 0)
    return 0;
  v22 = v14 & 0xFFFF0000 | 0x81;
  if (!v9)
    goto LABEL_23;
LABEL_16:
  v23 = *(_QWORD *)(v9 + 48);
  if (!v23)
  {
    v16 = 0;
    v17 = 0;
    if ((*((_BYTE *)v8 + 2) & 0x1F) != 0)
      goto LABEL_36;
    goto LABEL_27;
  }
  *((_QWORD *)&v90[0] + 1) = 59821818;
  *(_QWORD *)&v90[1] = v23;
  *(_OWORD *)((char *)&v90[1] + 8) = *(_OWORD *)(v9 + 56);
  LODWORD(v90[0]) = 40;
  v16 = 32;
  if ((*((_BYTE *)v8 + 2) & 0x1F) != 0)
  {
LABEL_25:
    v17 = 0;
    goto LABEL_36;
  }
LABEL_27:
  v79 = v22;
  v25 = a4;
  v82 = v13;
  v26 = v11;
  v86 = v7;
  v27 = a5;
  mach_voucher = _voucher_get_mach_voucher(v9);
LABEL_31:
  v17 = 0;
  if (mach_voucher)
  {
    v29 = *v8;
    a5 = v27;
    v11 = v26;
    LODWORD(a4) = v25;
    v22 = v79;
    if ((*v8 & 0x1F0000) == 0)
    {
      v8[4] = mach_voucher;
      *v8 = v29 | 0x130000;
      v17 = 1;
    }
    v7 = v86;
    v13 = v82;
  }
  else
  {
    a5 = v27;
    v7 = v86;
    v11 = v26;
    v13 = v82;
    LODWORD(a4) = v25;
    v22 = v79;
  }
LABEL_36:
  if (a4 >= 5)
    v30 = 5;
  else
    v30 = a4;
  if (v30)
  {
    v31 = 0;
    v32 = *(_QWORD *)(a2 + 56);
    v33 = __clz(__rbit32((v32 >> 8) & 0x3FFF));
    if (((v32 >> 8) & 0x3FFF) != 0)
      v34 = v33 + 1;
    else
      v34 = 0;
    v18 = v22 | 0x30;
    if (v34 - 1 <= 5)
    {
      v35 = (v32 & 0x3F00) != 0 && (*(_QWORD *)(a2 + 56) & 0x22000000) == 0;
      v36 = *(_QWORD *)(a2 + 56) << 8;
      if (!v35)
        v36 = 65280;
      v31 = v36 | (v34 << 16);
    }
    v15 = v31 | (v30 << 20);
    if (v11)
      goto LABEL_51;
  }
  else
  {
    v15 = 0;
    v18 = v22 | 0x10;
    if (v11)
LABEL_51:
      v18 |= (4 * *(unsigned __int16 *)(v6 + 116)) & 0x200;
  }
LABEL_52:
  v85 = v10;
  v87 = v7;
  v88 = v6;
  if ((v14 & 4) == 0)
  {
    v40 = v17;
    v42 = v13;
    v44 = v11;
    v43 = a5;
    goto LABEL_60;
  }
  if (!*(_BYTE *)(a3 + 30))
  {
    v39 = v15;
    v37 = v16;
    goto LABEL_58;
  }
  v37 = v16;
  v18 |= 0x100000u;
  v38 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v39 = v15;
  if (v11 != *(_DWORD *)(v38 + 64))
  {
LABEL_58:
    v40 = v17;
    v41 = v18;
    v42 = v13;
    v43 = a5;
    goto LABEL_59;
  }
  v40 = v17;
  v41 = v18;
  v42 = v13;
  v43 = a5;
  *(_QWORD *)(v38 + 64) = 0;
LABEL_59:
  v44 = v11;
  _dispatch_mach_reply_waiter_register(v88, a3, v11, a2);
  v18 = v41;
  v16 = v37;
  v15 = v39;
LABEL_60:
  v45 = 0;
  v46 = v8[1];
  v91 = (unint64_t)v8;
  *(_QWORD *)&v92 = v46;
  v47 = v90[0];
  if (!v16)
    v47 = 0;
  *((_QWORD *)&v92 + 1) = v90;
  *(_QWORD *)&v93 = 0;
  *((_QWORD *)&v93 + 1) = v47;
  v48 = *v8;
  v83 = v18;
  if ((v18 & 1) != 0 && (v48 & 0x80000000) != 0)
    v45 = v8[6];
  v49 = mach_msg2_internal(&v91, v18 | 0x500000000, v48 | 0x200000000, *((_QWORD *)v8 + 1), v8[4] | (unint64_t)((uint64_t)(int)v8[5] << 32), v45, v15 << 32, 0);
  v24 = v49;
  if ((v14 & 4) != 0 && (_DWORD)v49)
    _dispatch_mach_reply_unregister(v88, a3, 36, v12);
  a5 = v43;
  v7 = v87;
  v10 = v85;
  v11 = v44;
  v13 = v42;
  if (v40)
  {
    v50 = v8[4];
    if ((_DWORD)v24 != 268435461 || !v50)
    {
      v51 = *v8;
      v52 = HIWORD(*v8) & 0x1F;
      v53 = v52 == 17 || v52 == 19;
      if (v53 && v50)
      {
        if (v52 == 17)
        {
          v54 = a5;
          v55 = v11;
          _voucher_dealloc_mach_voucher(v50);
          v11 = v55;
          v13 = v42;
          a5 = v54;
          v7 = v87;
          v10 = v85;
          v51 = *v8;
        }
        v8[4] = 0;
        *v8 = v51 & 0xFFE0FFFF;
      }
      goto LABEL_80;
    }
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Voucher port corruption";
    qword_61258 = 268435461;
    __break(1u);
LABEL_142:
    v77 = *(void **)(*(_QWORD *)(v24 + 48) + 64);
    if (v77)
    {
      os_release(v77);
      v56 = 0;
      *(_QWORD *)(*(_QWORD *)(v24 + 48) + 64) = 0;
      return v56;
    }
    return 0;
  }
LABEL_80:
  if ((_DWORD)v24 == 268435460)
  {
    LODWORD(v24) = 268435460;
    v6 = v88;
    if ((v83 & 0x10) != 0)
    {
      if (v8[2] == -1)
      {
        *v8 = *v8 & 0xFFFFFFE0 | 0x13;
        if ((v83 & 0x80) == 0)
          goto LABEL_84;
      }
      else if ((v83 & 0x80) == 0)
      {
LABEL_84:
        v56 = 0;
        v19 = *(_WORD *)(v88 + 118);
LABEL_85:
        *(_WORD *)(v6 + 118) = v19 | 1;
        return v56;
      }
      _dispatch_mach_notification_set_armed(v7);
      return 0;
    }
  }
  else
  {
    v6 = v88;
  }
LABEL_87:
  if (!(v14 & 4 | v24))
  {
    if (v11)
    {
      v57 = *(_QWORD *)(v6 + 88);
      if (!*(_QWORD *)(v57 + 16) || *(_DWORD *)(v57 + 24) != v11)
      {
        v58 = a5;
        _dispatch_mach_reply_kevent_register(v6, v11, a2);
        a5 = v58;
      }
    }
  }
  if (v10 != 18 && *(_QWORD *)(v7 + 48) == a2 && *(_QWORD *)(v7 + 16))
  {
    v71 = a5;
    _dispatch_unote_unregister(*(_QWORD *)(v6 + 120), 5);
    a5 = v71;
    *(_DWORD *)(*(_QWORD *)(v6 + 120) + 24) = 0;
    if (!(_DWORD)v24)
      goto LABEL_96;
LABEL_127:
    if ((*(_WORD *)(v6 + 116) & 0x10) != 0)
    {
      v72 = a5;
      if (*(_QWORD *)(a2 + 32))
      {
        v73 = (*(uint64_t (**)(void))((char *)&dword_10 + (_QWORD)_dispatch_mach_xpc_hooks))();
        if (v73)
          v59 = v73;
        else
          v59 = v6;
LABEL_134:
        if (v59)
          v74 = 12;
        else
          v74 = 7;
        reply_disconnected = _dispatch_mach_msg_create_reply_disconnected((_QWORD *)a2, a3, v74);
        a5 = v72;
        goto LABEL_97;
      }
    }
    else
    {
      v72 = a5;
    }
    v59 = 0;
    goto LABEL_134;
  }
  if ((_DWORD)v24)
    goto LABEL_127;
LABEL_96:
  v59 = 0;
  reply_disconnected = 0;
LABEL_97:
  *v13 = v24;
  if ((a5 & 8) != 0 && (v14 & 1) != 0)
  {
    v56 = 3;
    if (!reply_disconnected)
      return v56;
  }
  else
  {
    _dispatch_mach_handle_or_push_received_msg(v6, (_QWORD *)a2, 0, v12);
    v56 = 1;
    if (!reply_disconnected)
      return v56;
  }
  if (v59)
  {
    v61 = _dispatch_mach_msg_async_reply_wrap(reply_disconnected, v6);
    if (MEMORY[0xFFFFFC100])
      _dispatch_trace_item_push_internal(v59, v61, v62);
    _dispatch_introspection_queue_item_enqueue(v59, v61);
    v63 = __clz(__rbit32((*(_DWORD *)(reply_disconnected + 56) >> 8) & 0x3FFF));
    if (((*(_DWORD *)(reply_disconnected + 56) >> 8) & 0x3FFF) != 0)
      v64 = v63 + 1;
    else
      v64 = 0;
    (*((void (**)(NSObject *, NSObject *, uint64_t))v59->isa + 11))(v59, v61, v64);
  }
  else
  {
    _dispatch_mach_handle_or_push_received_msg(v6, (_QWORD *)reply_disconnected, 0, v12);
  }
  return v56;
}

void _dispatch_mach_push_send_barrier_drain(uint64_t a1, unsigned int a2, int8x16_t a3)
{
  unint64_t StatusReg;
  _QWORD *v6;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = *(_QWORD **)(StatusReg + 176);
  if (v6)
    *(_QWORD *)(StatusReg + 176) = v6[2];
  else
    v6 = _dispatch_continuation_alloc_from_heap();
  v6[4] = 0;
  v6[5] = 0;
  v6[3] = -1;
  *v6 = &unk_58730;
  v6[1] = -1;
  _dispatch_lane_push(a1, v6, a2, a3);
}

uint64_t _dispatch_mach_reply_waiter_register(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unint64_t StatusReg;
  unsigned int v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v5 = result;
  *(_QWORD *)(a2 + 8) = ~result;
  *(_BYTE *)(a2 + 28) = -8;
  *(_DWORD *)(a2 + 24) = a3;
  if (!*(_BYTE *)(a2 + 30))
  {
    v7 = *(_QWORD *)(a4 + 64);
    if (v7)
    {
      result = (uint64_t)os_retain(*(void **)(a4 + 64));
      *(_QWORD *)(a2 + 56) = v7;
    }
    *(_DWORD *)(a2 + 40) = *(_QWORD *)(a4 + 56);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a4 + 32);
  }
  v8 = *(_QWORD *)(v5 + 120);
  v9 = (unsigned int *)(v8 + 40);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v11 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v9))
  {
    if (!__stxr(v11, v9))
      goto LABEL_10;
  }
  __clrex();
  result = _dispatch_unfair_lock_lock_slow(v8 + 40, 0x10000);
LABEL_10:
  v15 = *(_QWORD *)(v8 + 56);
  v14 = (_QWORD *)(v8 + 56);
  v13 = v15;
  *(_QWORD *)(a2 + 64) = v15;
  if (v15)
    *(_QWORD *)(v13 + 72) = a2 + 64;
  *v14 = a2;
  *(_QWORD *)(a2 + 72) = v14;
  v16 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    v17 = __ldxr(v9);
  while (__stlxr(0, v9));
  if (v17 != v16)
    return _dispatch_unfair_lock_unlock_slow((uint64_t)v9, v17);
  return result;
}

void _dispatch_mach_reply_kevent_register(unint64_t a1, unsigned int a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unint64_t StatusReg;
  unsigned int v22;
  uint64_t v24;
  char **v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  int8x16_t v29;
  unint64_t v30;

  v5 = _dispatch_unote_create_with_handle((uint64_t)&_dispatch_mach_type_reply, a2, 0);
  *((_QWORD *)v5 + 1) = ~a1;
  v6 = *(_QWORD *)(a3 + 64);
  if (v6)
  {
    os_retain(*(void **)(a3 + 64));
    *((_QWORD *)v5 + 7) = v6;
  }
  v7 = 0;
  *((_DWORD *)v5 + 10) = *(_QWORD *)(a3 + 56);
  v8 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v5 + 6) = v8;
  v9 = *(_WORD *)(a1 + 116);
  if ((v9 & 0x10) != 0 && v8)
  {
    v10 = (*(uint64_t (**)(void))((char *)&dword_10 + (_QWORD)_dispatch_mach_xpc_hooks))();
    if (v10)
      v7 = v10;
    else
      v7 = a1;
    v9 = *(_WORD *)(a1 + 116);
  }
  if ((v9 & 0x80) != 0)
    *((_DWORD *)v5 + 8) |= 0x200u;
  v30 = 0;
  if (!v7 || v7 == a1)
  {
    v11 = *(_QWORD *)(a1 + 88);
    if (*(_QWORD *)(v11 + 16) >= 4uLL)
    {
      v30 = *(_QWORD *)(v11 + 16) & 0xFFFFFFFFFFFFFFFCLL;
      v13 = (int *)(a1 + 84);
      goto LABEL_20;
    }
  }
  if ((*(_BYTE *)(*(_QWORD *)v7 + 42) & 1) == 0)
  {
    v12 = _dispatch_queue_compute_priority_and_wlh(v7, (uint64_t *)&v30);
    if (v12)
      goto LABEL_21;
    v30 = -4;
    goto LABEL_19;
  }
  v30 = -4;
  v12 = 0x2000000;
  if (v7 >= (unint64_t)&_dispatch_root_queues && v7 < (unint64_t)&_dispatch_queue_serial_numbers)
  {
LABEL_19:
    v13 = (int *)(v7 + 84);
LABEL_20:
    v12 = *v13;
  }
LABEL_21:
  v14 = *(_DWORD *)(a3 + 56);
  v15 = (__clz(__rbit32((v14 >> 8) & 0x3FFF)) << 8) + 256;
  if (((v14 >> 8) & 0x3FFF) == 0)
    v15 = 0;
  v16 = v15 & 0xFFFFFF00 | *(_DWORD *)(a3 + 56);
  v17 = v12 & 0x80000000;
  if ((v12 & 0xFFF) != 0)
  {
    if ((v12 & 0xFFFu) > v16)
      v16 = v12 & 0xFFF;
  }
  else if (!((unsigned __int16)v12 >> 12) || !v16)
  {
    if (!((unsigned __int16)v12 >> 12) || v16)
    {
      v30 = -4;
      v18 = 0x2000000;
    }
    else
    {
      v18 = v17 | ((unsigned __int16)v12 >> 12 << 8) | 0xFF;
    }
    goto LABEL_30;
  }
  v18 = v16 | v17;
LABEL_30:
  v19 = *(_QWORD *)(a1 + 120);
  v20 = (unsigned int *)(v19 + 40);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v22 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v20))
  {
    if (!__stxr(v22, v20))
      goto LABEL_35;
  }
  __clrex();
  _dispatch_unfair_lock_lock_slow(v19 + 40, 0x10000);
LABEL_35:
  v26 = *(_QWORD *)(v19 + 56);
  v25 = (char **)(v19 + 56);
  v24 = v26;
  *((_QWORD *)v5 + 8) = v26;
  if (v26)
    *(_QWORD *)(v24 + 72) = v5 + 64;
  *v25 = v5;
  *((_QWORD *)v5 + 9) = v25;
  v27 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    v28 = __ldxr(v20);
  while (__stlxr(0, v20));
  if (v28 != v27)
    _dispatch_unfair_lock_unlock_slow((uint64_t)v20, v28);
  if ((_dispatch_unote_register((uint64_t)v5, v30, v18) & 1) == 0)
    _dispatch_mach_reply_unregister(a1, (uint64_t)v5, 52, v29);
}

_QWORD *_dispatch_mach_msg_async_reply_wrap(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  int v5;
  unint64_t StatusReg;
  _QWORD *result;

  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF)
  {
    v4 = (unsigned int *)(a2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    if (v5 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  result = *(_QWORD **)(StatusReg + 176);
  if (result)
    *(_QWORD *)(StatusReg + 176) = result[2];
  else
    result = _dispatch_continuation_alloc_from_heap();
  result[6] = a1;
  result[7] = a2;
  *result = &unk_58808;
  result[1] = -1;
  result[3] = -1;
  return result;
}

void _dispatch_mach_send_push_and_trydrain(_DWORD *a1, unint64_t a2, uint64_t a3, unsigned int a4, int8x16_t a5)
{
  uint64_t v6;
  unint64_t StatusReg;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unsigned int *v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  BOOL v25;
  signed int v26;
  uint64_t v27;
  unsigned int *v28;
  int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;

  v6 = *((_QWORD *)a1 + 15);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v8 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
  *(_QWORD *)(a2 + 16) = 0;
  v9 = (unint64_t *)(v6 + 72);
  *(_QWORD *)(StatusReg + 976) = v6 + 72;
  do
    v10 = __ldxr(v9);
  while (__stlxr(a2, v9));
  if (v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = (unint64_t *)(v10 + 16);
  }
  else
  {
    if (a1[2] != 0x7FFFFFFF)
    {
      v14 = a1 + 2;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 2, v14));
      if (v15 <= 0)
      {
        qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
        __break(1u);
LABEL_68:
        qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
        goto LABEL_69;
      }
    }
    v13 = (unint64_t *)(v6 + 80);
    v12 = 3;
    v11 = 0xA000000000;
  }
  *v13 = a2;
  *(_QWORD *)(StatusReg + 976) = 0;
  if (*(_DWORD *)(v6 + 88) || (a1[20] & 0x10000000) != 0)
  {
    v30 = (unint64_t *)(v6 + 64);
    do
    {
      v31 = __ldxr(v30);
      if ((v31 & 0x700000000) >= a3 << 32)
        v32 = v31;
      else
        v32 = (a3 << 32) | 0x2800000000 | v31 & 0xFFFFFFF0FFFFFFFFLL;
      v33 = v32 | v11;
    }
    while (__stlxr(v33, v30));
    if (((v33 ^ v31) & 0x8000000000) != 0)
      v34 = v12 & 2;
    else
      v34 = v12;
    (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a3, v34);
    return;
  }
  v16 = (unint64_t *)(v6 + 64);
  if (!v10)
  {
    do
    {
      v18 = __ldaxr(v16);
      if ((v18 & 0x700000000) >= a3 << 32)
        v21 = v18;
      else
        v21 = (a3 << 32) | 0x2800000000 | v18 & 0xFFFFFFF0FFFFFFFFLL;
      v22 = v21 | v11;
      if ((v18 & 0x10FFFFFFFFLL) == 0)
        v22 = v22 & 0xFFFFFFC7FFFFFFFFLL | v8;
    }
    while (__stlxr(v22, v16));
    if (((v22 ^ v18) & 0x8000000000) != 0)
      v12 &= 2u;
    else
      v12 = v12;
LABEL_31:
    if (v18 >= 4)
    {
      if ((v18 & 0x700000000) < a3 << 32)
      {
        if ((_DWORD)a3)
          v27 = (256 << (a3 - 1)) | 0xFF;
        else
          v27 = 255;
        _pthread_workqueue_override_start_direct_check_owner(v18 | 3, v27, v16);
      }
      if ((v12 & 1) == 0)
        return;
      if (a1[2] == 0x7FFFFFFF)
        return;
      v28 = a1 + 2;
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 2, v28));
      if (v29 > 2)
        return;
      if (v29 == 2)
      {
        _os_object_dispose(a1, (const char *)a2);
        return;
      }
LABEL_69:
      qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
      return;
    }
    if ((v18 & 0x1000000000) != 0)
    {
      (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a3, v12);
      return;
    }
    if ((_DWORD)v12 && *(_QWORD *)(v6 + 80) == a2)
    {
      if ((v12 & 1) != 0)
      {
LABEL_36:
        if (a1[2] == 0x7FFFFFFF)
          goto LABEL_40;
        v23 = a1 + 2;
        do
        {
          v24 = __ldxr(v23);
          v25 = __OFSUB__(v24, 2);
          v26 = v24 - 2;
        }
        while (__stlxr(v26, v23));
        if (!((v26 < 0) ^ v25 | (v26 == 0)))
          goto LABEL_40;
        goto LABEL_68;
      }
    }
    else
    {
      a4 &= ~8u;
      if ((v12 & 1) != 0)
        goto LABEL_36;
    }
LABEL_40:
    _dispatch_mach_send_drain((unint64_t)a1, 0, a4, a5);
    return;
  }
  v17 = a3 << 32;
  while (1)
  {
    v18 = __ldaxr(v16);
    v19 = v18 & 0xFFFFFFD0FFFFFFFFLL | v17 | 0x2800000000;
    if ((v18 & 0x700000000) >= v17 || v19 == v18)
      break;
    if ((v18 & 0x10FFFFFFFFLL) == 0)
      v19 = v18 & 0xFFFFFFC0FFFFFFFFLL | v17 & 0xFFFFFFC7FFFFFFFFLL | v8;
    if (!__stxr(v19, v16))
      goto LABEL_31;
  }
  __clrex();
}

void _dispatch_mach_handle_wlh_change(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(a1 + 80);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 | 0x8000000, v1));
  if ((v2 & 0x400000) != 0)
  {
    if ((v2 & 0x8000000) == 0)
    {
      if ((*(_WORD *)(a1 + 116) & 0x10) != 0)
        _dispatch_bug_deprecated("Changing target queue hierarchy after xpc connection was activated");
      else
        _dispatch_bug_deprecated("Changing target queue hierarchy after mach channel was connected");
    }
  }
  else
  {
    if ((*(_WORD *)(a1 + 116) & 0x10) == 0)
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Changing target queue hierarchy after mach channel was connected";
      __break(1u);
    }
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Changing target queue hierarchy after xpc connection was activated";
    __break(1u);
  }
}

void _dispatch_mach_cancel(uint64_t a1)
{
  int v2;
  char v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int8x16_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  int v13;
  unsigned int v14;

  if (*(_DWORD *)(*(_QWORD *)(a1 + 120) + 88))
    LOBYTE(v2) = 0;
  else
    v2 = (*(unsigned __int16 *)(a1 + 118) >> 1) & 1;
  if ((*(_DWORD *)(a1 + 80) & 0x40000000) != 0)
    v3 = 1;
  else
    v3 = 3;
  v4 = *(_QWORD *)(a1 + 128);
  if (v4)
    LOBYTE(v2) = _dispatch_unote_unregister(v4, v3) & v2;
  v5 = (unsigned int *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_DWORD *)(v6 + 24);
  if (v7)
  {
    if (!_dispatch_unote_unregister(*(_QWORD *)(a1 + 88), v3))
      goto LABEL_21;
    v8 = _dispatch_object_alloc(OS_dispatch_mach_msg, 112);
    *(_QWORD *)(v8 + 16) = -1985229329;
    *(_QWORD *)(v8 + 24) = &off_65340;
    *(_DWORD *)(v8 + 72) = 0;
    *(_QWORD *)(v8 + 80) = 24;
    *(_DWORD *)(v8 + 100) = v7;
    *(_DWORD *)(v8 + 48) = -117964793;
    _dispatch_mach_handle_or_push_received_msg(a1, (_QWORD *)v8, 0, v9);
    *(_DWORD *)(v6 + 24) = 0;
  }
  if ((v2 & 1) != 0)
  {
    while (1)
    {
      v10 = __ldxr(v5);
      v11 = v10 & 0x3FFFFFFF | 0x80000000;
      if (v11 == (_DWORD)v10)
        break;
      if (!__stxr(v11, v5))
        goto LABEL_15;
    }
    __clrex();
LABEL_15:
    if ((v10 & 0xA0000000) != 0)
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupt channel state";
      qword_61258 = v10;
      __break(1u);
    }
    else
    {
      if (*(_DWORD *)(a1 + 8) == 0x7FFFFFFF)
        return;
      v12 = (unsigned int *)(a1 + 8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (v13 > 1)
        return;
    }
    qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
    __break(1u);
    return;
  }
  do
LABEL_21:
    v14 = __ldxr(v5);
  while (__stxr(v14 | 0x40000000, v5));
}

void _dispatch_mach_cancel_invoke(uint64_t a1, int a2)
{
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 88);
  if ((a2 & 0x1000000) != 0)
    v4 = objc_autoreleasePoolPush();
  else
    v4 = 0;
  if ((*(_WORD *)(a1 + 116) & 4) == 0)
    _dispatch_mach_connect_invoke(a1);
  _dispatch_client_callout4(*(_QWORD *)(v3 + 48), 8, 0, 0, *(uint64_t (**)(void))(v3 + 40));
  if (v4)
    objc_autoreleasePoolPop(v4);
  *(_WORD *)(a1 + 116) |= 8u;
}

uint64_t OUTLINED_FUNCTION_1_3(char *a1, uint64_t a2, const char *a3)
{
  size_t v3;

  return snprintf(a1, v3, a3);
}

size_t OUTLINED_FUNCTION_2_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return _dispatch_object_debug_attr(v2, (char *)(v0 + v3), v1 - v3);
}

uint64_t OUTLINED_FUNCTION_3_2()
{
  uint64_t v0;
  uint64_t v1;

  return v0 + v1;
}

char *_dispatch_unote_create_with_handle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
    return _dispatch_unote_create(a1, a2, a3);
  else
    return 0;
}

char *_dispatch_unote_create(uint64_t a1, int a2, uint64_t a3)
{
  char *result;
  int v4;
  size_t v7;
  char v8;

  if ((~*(_DWORD *)(a1 + 20) & a3) != 0)
    return 0;
  v4 = a3;
  if (*(_DWORD *)(a1 + 20))
  {
    if (!a3 && (*(_BYTE *)(a1 + 10) & 4) == 0)
      return 0;
  }
  v7 = *(unsigned int *)(a1 + 24);
  if ((*(_WORD *)(a1 + 12) & 0x100) != 0)
    result = (char *)_dispatch_calloc(1uLL, v7);
  else
    result = (char *)_dispatch_calloc(1uLL, v7 + 24) + 24;
  *(_QWORD *)result = a1;
  v8 = result[29] & 0xDF | (32 * (*(_BYTE *)(a1 + 10) & 1));
  result[29] = v8;
  *((_DWORD *)result + 6) = a2;
  result[28] = *(_BYTE *)(a1 + 8);
  *((_DWORD *)result + 8) = v4;
  if ((*(_BYTE *)(a1 + 13) & 1) != 0)
    result[29] = v8 | 1;
  return result;
}

char *_dispatch_unote_create_without_handle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
    return 0;
  else
    return _dispatch_unote_create(a1, 0, a3);
}

void _dispatch_unote_dispose(uint64_t a1)
{
  uint64_t v1;
  char v2;
  BOOL v3;
  uint64_t v4;

  v1 = a1;
  v2 = *(_BYTE *)(a1 + 29);
  if ((v2 & 0x40) != 0)
  {
    _Block_release(*(const void **)(a1 + 48));
    v2 = *(_BYTE *)(v1 + 29);
  }
  if ((v2 & 2) != 0)
  {
    if (*(_DWORD *)(v1 + 112) == -1 && *(_DWORD *)(v1 + 116) == -1)
    {
      a1 = *(_QWORD *)(v1 + 104);
      if (!a1)
        goto LABEL_10;
    }
    else
    {
      qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Disposing of timer still in its heap";
      __break(1u);
    }
    free((void *)a1);
    *(_QWORD *)(v1 + 104) = 0;
    goto LABEL_10;
  }
  v3 = (v2 & 1) == 0;
  v4 = -24;
  if (!v3)
    v4 = 0;
  v1 += v4;
LABEL_10:
  free((void *)v1);
}

uint64_t _dispatch_unote_register(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((a3 & 0x4600FFFF) == 0x4004000 && MEMORY[0xFFFFFC100])
    kdebug_trace(771883044, ~*(_QWORD *)(a1 + 8), 0, 0, 0);
  *(_DWORD *)(a1 + 36) = a3;
  if ((*(char *)(a1 + 28) + 23) <= 2)
  {
    *(_QWORD *)(a1 + 16) = -3;
    return 1;
  }
  if ((*(_BYTE *)(a1 + 29) & 2) != 0)
  {
    _dispatch_timer_unote_register(a1, a2, a3);
    return 1;
  }
  if ((*(_BYTE *)(a1 + 29) & 1) != 0)
    return _dispatch_unote_register_direct((unsigned int *)a1, a2);
  else
    return _dispatch_unote_register_muxed(a1);
}

void _dispatch_timer_unote_register(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  if (((a3 >> 8) & 0xF) - 1 <= 1)
  {
    v3 = *(unsigned __int8 *)(a1 + 30);
    if ((v3 & 1) != 0)
    {
      if (MEMORY[0xFFFFFC100])
      {
        v4 = a2;
        v5 = a1;
        kdebug_trace(771883032, ~*(_QWORD *)(a1 + 8), 0, 0, 0);
        a2 = v4;
        a1 = v5;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 30) = v3 | 2;
      *(_DWORD *)(a1 + 24) = 3 * ((v3 >> 2) & 3) + (v3 & 1 | 2);
    }
  }
  if ((*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL) != a2)
    *(_QWORD *)(a1 + 16) = -4;
  if (*(_QWORD *)(a1 + 104))
    _dispatch_timer_unote_configure(a1);
}

void _dispatch_unote_resume(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 29) & 2) != 0)
  {
    _dispatch_timer_unote_resume(a1);
  }
  else if ((*(_BYTE *)(a1 + 29) & 1) != 0)
  {
    _dispatch_unote_resume_direct(a1);
  }
  else
  {
    _dispatch_unote_resume_muxed(a1);
  }
}

void _dispatch_timer_unote_resume(uint64_t a1)
{
  _BOOL4 v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  void *v8;
  unsigned int v9;
  unsigned int *v10;
  int v11;

  v2 = !(*(_QWORD *)(55 - *(_QWORD *)(a1 + 8)) >> 55)
    && *(_DWORD *)(a1 + 24) != -1
    && *(_QWORD *)(a1 + 80) < 0x7FFFFFFFFFFFFFFFuLL;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(unsigned __int8 *)(a1 + 30);
  v5 = (v4 >> 2) & 3;
  v6 = v4 & 3;
  v7 = 3 * v5;
  if ((v3 & 0xFFFFFFFFFFFFFFFCLL) == 0xFFFFFFFFFFFFFFFCLL)
    v8 = &_dispatch_timers_heap;
  else
    v8 = *(void **)((v3 & 0xFFFFFFFFFFFFFFFCLL) + 48);
  v9 = v7 + v6;
  if ((v3 & v2) == 1)
  {
    if (*(_DWORD *)(a1 + 24) == v9)
    {
      if (v2)
        goto LABEL_11;
LABEL_21:
      if ((v3 & 1) != 0)
        _os_object_release_internal_n((void *)~*(_QWORD *)(a1 + 8), (_BYTE *)&dword_0 + 2);
      return;
    }
  }
  else if ((v3 & 1) == 0)
  {
    if (!v2)
      return;
    goto LABEL_15;
  }
  _dispatch_timer_unote_disarm(a1, (uint64_t)v8);
  if (!v2)
    goto LABEL_21;
LABEL_11:
  if ((v3 & 1) != 0)
  {
LABEL_19:
    _dispatch_timer_unote_arm(a1, (uint64_t)v8, v9);
    return;
  }
LABEL_15:
  if (*(_DWORD *)(7 - *(_QWORD *)(a1 + 8)) == 0x7FFFFFFF)
    goto LABEL_19;
  v10 = (unsigned int *)(7 - *(_QWORD *)(a1 + 8));
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 2, v10));
  if (v11 > 0)
    goto LABEL_19;
  qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
  __break(1u);
}

uint64_t _dispatch_unote_unregister(uint64_t a1, char a2)
{
  if (!*(_QWORD *)(a1 + 16))
    return 1;
  if ((*(char *)(a1 + 28) + 23) <= 2)
  {
    *(_QWORD *)(a1 + 16) = 0;
    return 1;
  }
  if ((*(_BYTE *)(a1 + 29) & 2) != 0)
  {
    _dispatch_timer_unote_unregister(a1);
    return 1;
  }
  if ((*(_BYTE *)(a1 + 29) & 1) != 0)
    return _dispatch_unote_unregister_direct(a1, a2);
  else
    return _dispatch_unote_unregister_muxed((uint64_t *)a1);
}

void _dispatch_timer_unote_unregister(uint64_t a1)
{
  unint64_t v2;
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  BOOL v6;
  signed int v7;
  unsigned int *v8;
  unsigned int *v10;
  int v11;

  v2 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if (v2 == -4)
    v3 = &_dispatch_timers_heap;
  else
    v3 = *(void **)(v2 + 48);
  if ((*(_QWORD *)(a1 + 16) & 1) == 0)
    goto LABEL_9;
  _dispatch_timer_unote_disarm(a1, (uint64_t)v3);
  if (*(_DWORD *)(7 - *(_QWORD *)(a1 + 8)) == 0x7FFFFFFF)
    goto LABEL_9;
  v4 = (unsigned int *)(7 - *(_QWORD *)(a1 + 8));
  do
  {
    v5 = __ldxr(v4);
    v6 = __OFSUB__(v5, 2);
    v7 = v5 - 2;
  }
  while (__stlxr(v7, v4));
  if ((v7 < 0) ^ v6 | (v7 == 0))
  {
    qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
    __break(1u);
  }
  else
  {
LABEL_9:
    v8 = (unsigned int *)(*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL);
    if (v8 == (unsigned int *)-4 || v8 == 0)
      goto LABEL_18;
    v10 = v8 + 24;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 - 1, v10));
    if (v11 > 0)
      goto LABEL_18;
    if ((v11 & 0x80000000) == 0)
    {
      *((_QWORD *)v8 + 7) = 0xDEAD000000000000;
      _dispatch_object_dealloc(v8);
LABEL_18:
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = -1;
      return;
    }
  }
  qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
}

_BYTE *_dispatch_source_data_create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *result;

  if (a3 | a2)
    return 0;
  result = _dispatch_calloc(1uLL, *(unsigned int *)(a1 + 24));
  *(_QWORD *)result = a1;
  result[28] = *(_BYTE *)(a1 + 8);
  result[29] |= 1u;
  return result;
}

char *_dispatch_source_signal_create(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 <= 0x1F)
    return _dispatch_unote_create_with_handle(a1, a2, a3);
  else
    return 0;
}

void _dispatch_timer_unote_configure(uint64_t a1)
{
  unint64_t *v2;
  _BYTE *v3;
  unsigned int v4;
  char v5;
  __int128 v6;

  v2 = (unint64_t *)(a1 + 104);
  do
    v3 = (_BYTE *)__ldxr(v2);
  while (__stxr(0, v2));
  v4 = *(unsigned __int8 *)(a1 + 30);
  if (*((_DWORD *)v3 + 6) != ((v4 >> 2) & 3))
  {
    v5 = v4 & 0xF3;
    *(_BYTE *)(a1 + 30) = v5;
    *(_BYTE *)(a1 + 30) = v5 | (4 * v3[24]);
  }
  v6 = *(_OWORD *)v3;
  *(_QWORD *)(a1 + 96) = *((_QWORD *)v3 + 2);
  *(_OWORD *)(a1 + 80) = v6;
  free(v3);
  *(_QWORD *)(a1 + 72) = 0;
  if ((*(_QWORD *)(a1 + 16) & 1) != 0)
    _dispatch_timer_unote_resume(a1);
}

double _dispatch_source_timer_create(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  char **v4;
  unsigned __int8 *v5;
  unsigned int v6;
  double result;

  if ((a3 & 1) != 0)
    v3 = a3 & 0xFFFFFFFD;
  else
    v3 = a3;
  if ((v3 & ~*(_DWORD *)(a1 + 20)) != 0)
    return result;
  v4 = (char **)a1;
  if ((*(_BYTE *)(a1 + 11) & 0x10) != 0)
  {
    if (!a2)
      return result;
LABEL_16:
    v5 = (unsigned __int8 *)_dispatch_calloc(1uLL, *((unsigned int *)v4 + 6));
    *(_QWORD *)v5 = v4;
    v5[28] = *((_BYTE *)v4 + 8);
    v5[29] |= 2u;
    v6 = *((unsigned __int8 *)v4 + 11) | v3 | v5[30];
    v5[30] = v6;
    *((_DWORD *)v5 + 6) = 3 * ((v6 >> 2) & 3) + (v6 & 3);
    result = NAN;
    *((_QWORD *)v5 + 14) = -1;
    *((_QWORD *)v5 + 10) = -1;
    *((_QWORD *)v5 + 11) = -1;
    *((_QWORD *)v5 + 12) = -1;
    return result;
  }
  if (*(unsigned __int8 *)(a1 + 8) != 236)
  {
    switch(a2)
    {
      case 0:
        goto LABEL_16;
      case 1:
        goto LABEL_15;
      case 2:
        v3 |= 4u;
        goto LABEL_15;
      case 3:
        v3 |= 8u;
LABEL_15:
        v4 = &_dispatch_source_type_timer_with_clock;
        goto LABEL_16;
      default:
        return result;
    }
  }
  if (!a2)
    goto LABEL_16;
  return result;
}

void _dispatch_event_loop_drain_timers(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int *v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v62 = 0;
  v63 = 0;
  v64 = 0;
  v3 = a2;
  do
  {
    if (!a2)
    {
      *(_BYTE *)(a1 + 6) = 0;
      return;
    }
    v4 = 0;
    do
    {
      v5 = a1 + 32 * v4;
      v8 = *(_QWORD *)(v5 + 8);
      v6 = (uint64_t *)(v5 + 8);
      v7 = v8;
      if (v8)
      {
        v9 = v4 / 3uLL;
        while (1)
        {
          v10 = *(&v62 + v9);
          if (!v10)
          {
            v65 = 0;
            v66 = 0;
            mach_get_times(&v62, &v63, &v65);
            v64 = v66 + 1000000000 * v65;
            v10 = *(&v62 + v9);
          }
          v11 = *(_QWORD *)(v7 + 80);
          v12 = v10 >= v11;
          v13 = v10 - v11;
          if (!v12)
            goto LABEL_47;
          if ((*(_BYTE *)(v7 + 30) & 0x40) != 0)
          {
            _dispatch_timer_unote_disarm(v7, a1);
            v14 = (unsigned int *)(*(_QWORD *)(v7 + 16) & 0xFFFFFFFFFFFFFFFCLL);
            if (v14 != (unsigned int *)-4 && v14 != 0)
            {
              v16 = v14 + 24;
              do
                v17 = __ldxr(v16);
              while (__stxr(v17 - 1, v16));
              if (v17 <= 0)
              {
                if (v17 < 0)
                  _os_object_allows_weak_reference_cold_1();
                *((_QWORD *)v14 + 7) = 0xDEAD000000000000;
                _dispatch_object_dealloc(v14);
              }
            }
            *(_QWORD *)(v7 + 16) = 0;
            *(_QWORD *)(v7 + 72) = 2;
            goto LABEL_23;
          }
          if (!*(_QWORD *)(v7 + 104))
            break;
          _dispatch_timer_unote_configure(v7);
LABEL_24:
          v7 = *v6;
          if (!*v6)
            goto LABEL_47;
        }
        if (*(_QWORD *)(v7 + 72))
        {
          v26 = (unint64_t *)(v7 + 72);
          _dispatch_timer_unote_disarm(v7, a1);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 | 1, v26));
        }
        else
        {
          v18 = *(_QWORD *)(v7 + 96);
          v19 = v13 / v18;
          if (v19 + 1 < 0x7FFFFFFFFFFFFFFFLL)
            v20 = v19 + 1;
          else
            v20 = 0x7FFFFFFFFFFFFFFFLL;
          if (v18 > 0x7FFFFFFFFFFFFFFELL)
          {
            v21 = -1;
            *(_QWORD *)(v7 + 80) = -1;
            *(_QWORD *)(v7 + 88) = -1;
          }
          else
          {
            v21 = v20 * v18 + v11;
            v22 = *(_QWORD *)(v7 + 88) + v20 * v18;
            *(_QWORD *)(v7 + 80) = v21;
            *(_QWORD *)(v7 + 88) = v22;
          }
          v23 = 2 * v20;
          if (*(_QWORD *)(55 - *(_QWORD *)(v7 + 8)) >> 55)
          {
            if (MEMORY[0xFFFFFC100])
              kdebug_trace(771883036, ~*(_QWORD *)(v7 + 8), 0, 0, 0);
          }
          else if (*(_DWORD *)(v7 + 24) != -1 && v21 <= 0x7FFFFFFFFFFFFFFELL)
          {
            if (*(_DWORD *)(7 - *(_QWORD *)(v7 + 8)) != 0x7FFFFFFF)
            {
              v24 = (unsigned int *)(7 - *(_QWORD *)(v7 + 8));
              do
                v25 = __ldxr(v24);
              while (__stxr(v25 + 2, v24));
              if (v25 <= 0)
                dispatch_set_target_queue_cold_2();
            }
            _dispatch_timer_unote_arm(v7, a1, v4);
            *(_QWORD *)(v7 + 72) = v23;
            goto LABEL_23;
          }
          _dispatch_timer_unote_disarm(v7, a1);
          atomic_store(v23 | 1, (unint64_t *)(v7 + 72));
        }
LABEL_23:
        (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 48))(v7, 16, 0, 0);
        goto LABEL_24;
      }
LABEL_47:
      ++v4;
    }
    while (v4 != v3);
    *(_BYTE *)(a1 + 6) = 0;
    v28 = 0;
    do
    {
      v29 = a1 + 32 * v28;
      v30 = (char *)(v29 + 7);
      if ((*(_BYTE *)(v29 + 7) & 2) == 0)
        goto LABEL_97;
      v31 = *(_QWORD *)(v29 + 8);
      if (!v31)
        goto LABEL_93;
      v32 = *(_QWORD *)(v31 + 80);
      v33 = *(_QWORD *)(*(_QWORD *)(a1 + 32 * v28 + 16) + 88);
      v34 = *(&v62 + v28 / 3);
      if (!v34)
      {
        v65 = 0;
        v66 = 0;
        mach_get_times(&v62, &v63, &v65);
        v64 = v66 + 1000000000 * v65;
        v34 = *(&v62 + v28 / 3);
      }
      v35 = v28 % 3;
      if (v32 <= v34)
        goto LABEL_92;
      v36 = *(_DWORD *)v29;
      if (*(_DWORD *)v29 >= 3u)
      {
        v37 = _dispatch_kevent_coalescing_window[v35];
        if (v37 + v32 < v33)
        {
          v38 = v33 - v37;
          v32 = *(_QWORD *)(*(_QWORD *)(v29 + 8) + 80);
          v39 = a1 + 32 * v28;
          v40 = *(unsigned __int8 *)(v39 + 4);
          v41 = (uint64_t *)(v39 + 24);
          v42 = 2;
          do
          {
            if (v42 > 1)
            {
              v44 = __clz((v42 - 2) | 7);
              v45 = v41;
              if (30 - v44 != v40)
                v45 = (uint64_t *)(*v41 + 8 * ((8 << (v40 - 2)) - 30 + v44));
              v46 = *v45;
              if (v44 == 29)
                v47 = 0;
              else
                v47 = -8 << (28 - v44);
              v43 = v46 + 8 * (v47 + v42 - 2);
            }
            else
            {
              v43 = a1 + 32 * v28 + 8 * v42 + 8;
            }
            v48 = *(_QWORD *)(*(_QWORD *)v43 + 80);
            if (v48 <= v32)
              v49 = v32;
            else
              v49 = v48;
            v50 = (v42 & 0xFFFFFFFE) + 2;
            if (v50 == v36)
              v51 = ((v42 - 2) >> 1) & 0x7FFFFFFE;
            else
              v51 = v42 & 0xFFFFFFFE;
            v52 = (v51 + 3) >> __clz(__rbit32(-4 - v51));
            v53 = v42 & 1 | (2 * v52);
            if (!v52)
              v53 = -1;
            if (2 * v42 - (v42 & 1) + 2 < v36)
              v53 = 2 * v42 - (v42 & 1) + 2;
            if (v50 == v36)
              v54 = ((v42 - 2) >> 1) & 0x7FFFFFFE;
            else
              v54 = v42 & 0xFFFFFFFE;
            v55 = (v54 + 3) >> __clz(__rbit32(-4 - v54));
            v42 = v42 & 1 | (2 * v55);
            if (!v55)
              v42 = -1;
            if (v48 <= v38)
            {
              v42 = v53;
              v32 = v49;
            }
          }
          while (v42 < v36);
        }
      }
      v56 = v32 - v34;
      v57 = v56 >= 0x7FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v56;
      v58 = v33 - v32 >= 0x7FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v33 - v32;
      if (!v57)
      {
LABEL_92:
        *(_BYTE *)(a1 + 6) |= (1 << v35) | 0x80;
LABEL_93:
        v60 = *v30;
        if ((*v30 & 1) != 0)
        {
          _dispatch_event_loop_timer_delete(a1, v28);
          v60 = *v30;
        }
        v59 = v60 & 0xFC;
        goto LABEL_96;
      }
      if ((unint64_t)(v57 - 0x7FFFFFFFFFFFFFFFLL) <= 0x8000000000000001)
        goto LABEL_93;
      _dispatch_event_loop_timer_arm(a1, v28, v57, v58, (uint64_t)&v62);
      v59 = *v30 & 0xFC | 1;
LABEL_96:
      *v30 = v59;
LABEL_97:
      ++v28;
    }
    while (v28 != v3);
  }
  while (*(_BYTE *)(a1 + 6));
}

double _dispatch_timer_unote_disarm(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  _QWORD *v10;
  char v11;
  char v12;
  unsigned int v13;
  uint64_t *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  _QWORD *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  double result;

  v4 = *(unsigned int *)(a1 + 24);
  v5 = a2 + 32 * v4;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)v5 - 2;
  *(_DWORD *)v5 = v7;
  if (v6 == 2)
  {
    *(_BYTE *)(v5 + 7) |= 2u;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
  }
  else
  {
    v8 = 0;
    v9 = (_BYTE *)(v5 + 4);
    v10 = (_QWORD *)(v5 + 24);
    v11 = 1;
    do
    {
      v12 = v11;
      v13 = v7 + v8;
      if (v7 + v8 > 1)
      {
        v15 = *v9;
        v16 = v13 - 2;
        v17 = __clz(v16 | 7);
        v18 = (_QWORD *)(v5 + 24);
        if (30 - v17 != v15)
          v18 = (_QWORD *)(*v10 + 8 * ((8 << (v15 - 2)) + v17 - 30));
        if (v17 == 29)
          v19 = 0;
        else
          v19 = -8 << (28 - v17);
        v14 = (uint64_t *)(*v18 + 8 * (v19 + v16));
      }
      else
      {
        v14 = (uint64_t *)(a2 + 32 * v4 + 8 * v13 + 8);
      }
      v20 = *v14;
      *v14 = 0;
      if (v20 != a1)
        _dispatch_timer_heap_resift(v5, v20, *(_DWORD *)(a1 + 4 * v8 + 112));
      v11 = 0;
      v8 = 1;
    }
    while ((v12 & 1) != 0);
    v21 = *v9;
    v22 = (8 << (v21 - 2)) - v21 + 4;
    v23 = v21 - 1;
    if (!v23)
      v22 = 2;
    if (v7 <= v22)
    {
      *v9 = v23;
      v24 = (_QWORD *)*v10;
      if ((_BYTE)v23)
      {
        v25 = v23;
        v26 = 8 << (v23 - 1);
        v27 = v24[v26 - v23];
        v28 = v23 - 1;
        if (v25 != 1)
          memcpy((void *)(v27 + 8 * ((v26 >> 1) - v28)), &v24[v26 - v28], 8 * v28);
      }
      else
      {
        v27 = 0;
      }
      *v10 = v27;
      free(v24);
    }
  }
  result = NAN;
  *(_QWORD *)(a1 + 112) = -1;
  *(_BYTE *)(a2 + 6) |= (1 << (v4 % 3)) | 0x80;
  *(_QWORD *)(a1 + 16) &= ~1uLL;
  return result;
}

uint64_t _dispatch_timer_unote_arm(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;

  v5 = result;
  if ((*(_QWORD *)(result + 16) & 1) != 0)
  {
    _dispatch_timer_heap_resift(a2 + 32 * a3, result, *(_DWORD *)(result + 112));
    result = _dispatch_timer_heap_resift(a2 + 32 * a3, v5, *(_DWORD *)(v5 + 116));
  }
  else
  {
    *(_DWORD *)(result + 24) = a3;
    v6 = a2 + 32 * a3;
    v7 = *(_DWORD *)v6;
    v8 = *(_DWORD *)v6 + 2;
    *(_DWORD *)v6 = v8;
    v9 = *(_DWORD *)(result + 36);
    v10 = (v9 >> 8) & 0xF;
    v11 = (unsigned __int16)v9 >> 12;
    if (v10 > v11)
      v11 = v10;
    if (v11 > *(unsigned __int8 *)(v6 + 5))
    {
      *(_BYTE *)(v6 + 5) = v11;
      *(_BYTE *)(v6 + 7) |= 2u;
    }
    if (v7)
    {
      if (*(_BYTE *)(a2 + 32 * a3 + 4))
      {
        v12 = *(unsigned __int8 *)(a2 + 32 * a3 + 4);
        v13 = (8 << (v12 - 1)) - v12 + 3;
      }
      else
      {
        v13 = 2;
      }
      if (v8 > v13)
        _dispatch_timer_heap_grow(a2 + 32 * a3);
      _dispatch_timer_heap_resift(a2 + 32 * a3, v5, v7);
      result = _dispatch_timer_heap_resift(a2 + 32 * a3, v5, v7 + 1);
    }
    else
    {
      v14 = a2 + 32 * a3;
      *(_BYTE *)(v14 + 7) |= 2u;
      *(_QWORD *)(result + 112) = 0x100000000;
      *(int64x2_t *)(v14 + 8) = vdupq_n_s64(result);
    }
    *(_QWORD *)(v5 + 16) |= 1uLL;
  }
  *(_BYTE *)(a2 + 6) |= (1 << (a3 % 3)) | 0x80;
  return result;
}

uint64_t _dispatch_timer_heap_resift(uint64_t result, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  unsigned int v8;
  _QWORD *v9;
  char v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD *v21;
  int v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;

  v3 = *(_DWORD *)result;
  v4 = a3 & 1;
  v5 = *(unsigned __int8 *)(result + 4);
  v6 = a3 - 2;
  if (a3 < 2)
  {
    v7 = (_QWORD *)(result + 8 * a3 + 8);
LABEL_22:
    v19 = a3 & 1;
    v20 = 2 * a3 - v19 + 2;
    if (v20 < v3)
    {
      v21 = (_QWORD *)(result + 24);
      v22 = (8 << (v5 - 2)) - 30;
      while (1)
      {
        if (v20 > 1)
        {
          v23 = __clz((v20 - 2) | 7);
          v24 = (uint64_t *)(result + 24);
          if (30 - v23 != v5)
            v24 = (uint64_t *)(*v21 + 8 * (v22 + v23));
          v25 = *v24;
          v26 = v23 == 29 ? 0 : -8 << (28 - v23);
          v13 = (_QWORD *)(v25 + 8 * (v26 + v20 - 2));
        }
        else
        {
          v13 = (_QWORD *)(result + 8 * v20 + 8);
        }
        v27 = *v13;
        if (v20 + 2 >= v3)
        {
          v12 = v20;
        }
        else
        {
          if (v20 < 0xFFFFFFFE)
          {
            v29 = __clz(v20 | 7);
            v30 = (uint64_t *)(result + 24);
            if (30 - v29 != v5)
              v30 = (uint64_t *)(*v21 + 8 * (v22 + v29));
            v31 = *v30;
            v32 = v29 == 29 ? 0 : -8 << (28 - v29);
            v28 = (_QWORD *)(v31 + 8 * (v32 + v20));
          }
          else
          {
            v28 = (_QWORD *)(result + 8 * (v20 + 2) + 8);
          }
          v12 = v20;
          if (*(_QWORD *)(v27 + 8 * v4 + 80) > *(_QWORD *)(*v28 + 8 * v4 + 80))
          {
            v13 = v28;
            v27 = *v28;
            v12 = v20 + 2;
          }
        }
        if (*(_QWORD *)(a2 + 80 + 8 * v4) <= *(_QWORD *)(v27 + 8 * v4 + 80))
          break;
        if (a3 <= 1)
          *(_BYTE *)(result + 7) |= 2u;
        *v7 = v27;
        *(_DWORD *)(v27 + 4 * v19 + 112) = a3;
        v19 = v12 & 1;
        v20 = 2 * v12 - v19 + 2;
        v7 = v13;
        a3 = v12;
        if (v20 >= v3)
          goto LABEL_50;
      }
    }
    v12 = a3;
    v13 = v7;
LABEL_50:
    v7 = v13;
    a3 = v12;
    if (v12 <= 1)
    {
LABEL_51:
      *(_BYTE *)(result + 7) |= 2u;
      v7 = v13;
      a3 = v12;
    }
    goto LABEL_52;
  }
  v8 = __clz(v6 | 7);
  if (30 - v8 == v5)
    v9 = (_QWORD *)(result + 24);
  else
    v9 = (_QWORD *)(*(_QWORD *)(result + 24) + 8 * (v8 + (8 << (v5 - 2)) - 30));
  v10 = 0;
  if (v8 == 29)
    v11 = 0;
  else
    v11 = -8 << (28 - v8);
  v7 = (_QWORD *)(*v9 + 8 * (v11 + v6));
  while (1)
  {
    v12 = a3 & 1 | (2 * ((a3 - 2) >> 2));
    if (v12 > 1)
    {
      v14 = __clz((v12 - 2) | 7);
      v15 = (uint64_t *)(result + 24);
      if (30 - v14 != v5)
        v15 = (uint64_t *)(*(_QWORD *)(result + 24) + 8 * ((8 << (v5 - 2)) - 30 + v14));
      v16 = *v15;
      v17 = v14 == 29 ? 0 : -8 << (28 - v14);
      v13 = (_QWORD *)(v16 + 8 * (v17 + v12 - 2));
    }
    else
    {
      v13 = (_QWORD *)(result + 8 * v12 + 8);
    }
    v18 = *v13;
    if (*(_QWORD *)(*v13 + 8 * v4 + 80) <= *(_QWORD *)(a2 + 80 + 8 * v4))
      break;
    *v7 = v18;
    *(_DWORD *)(v18 + 4 * (a3 & 1) + 112) = a3;
    v10 = 1;
    v7 = v13;
    a3 = a3 & 1 | (2 * ((a3 - 2) >> 2));
    if (v12 <= 1)
      goto LABEL_51;
  }
  if ((v10 & 1) == 0)
    goto LABEL_22;
LABEL_52:
  *v7 = a2;
  *(_DWORD *)(a2 + 4 * (a3 & 1) + 112) = a3;
  return result;
}

char *_dispatch_timer_heap_grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  size_t v4;
  char *result;
  char *v6;

  v2 = *(unsigned __int8 *)(a1 + 4);
  *(_BYTE *)(a1 + 4) = v2 + 1;
  v3 = *(_QWORD *)(a1 + 24);
  if (v2)
    v4 = (8 << (v2 - 1));
  else
    v4 = 8;
  result = (char *)_dispatch_calloc(v4, 8uLL);
  v6 = result;
  if (v2 >= 2)
  {
    result = (char *)memcpy(&result[8 * (v4 - (v2 - 1))], (const void *)(v3 + 8 * ((v4 >> 1) - (v2 - 1))), 8 * (v2 - 1));
LABEL_7:
    *(_QWORD *)&v6[8 * (v4 - v2)] = v3;
    goto LABEL_8;
  }
  if (v2)
    goto LABEL_7;
LABEL_8:
  *(_QWORD *)(a1 + 24) = v6;
  return result;
}

uint64_t _dispatch_sync_ipc_handoff_begin(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t result;
  _QWORD v4[3];
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4[0] = a2;
  v4[1] = 655343;
  v4[2] = a1;
  v5 = -2147483392;
  v7 = 0;
  v6 = 0;
  v8 = 0;
  v9 = a3;
  v10 = -1;
  v11 = a1;
  result = _dispatch_kq_immediate_update(a1, (uint64_t)v4);
  if ((result & 0xFFFFFFFD) != 0)
    _dispatch_sync_ipc_handoff_begin_cold_1(result);
  return result;
}

uint64_t _dispatch_kq_immediate_update(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  int v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  if (v2 && *(_QWORD *)(v2 + 24) == a1)
  {
    v3 = *(_QWORD *)(v2 + 32);
    v4 = *(unsigned __int16 *)(v2 + 40);
    if (*(_WORD *)(v2 + 40))
    {
      v5 = 0;
      v6 = (unsigned __int16 *)(v3 + 8);
      v7 = (unsigned __int16 *)(v3 + 8);
      while (1)
      {
        v8 = *v7;
        v7 += 36;
        if (v8 == *(unsigned __int16 *)(a2 + 8)
          && *((_QWORD *)v6 - 1) == *(_QWORD *)a2
          && *((_QWORD *)v6 + 1) == *(_QWORD *)(a2 + 16))
        {
          break;
        }
        ++v5;
        v6 = v7;
        if (v4 == v5)
          return _dispatch_kq_drain(a1, a2, 1, 3);
      }
    }
    else
    {
      LODWORD(v5) = 0;
    }
    if (v5 < v4)
    {
      v9 = v4 - 1;
      *(_WORD *)(v2 + 40) = v9;
      if ((_DWORD)v5 != v9)
      {
        v10 = v3 + 72 * v5;
        v11 = v3 + 72 * v9;
        *(_OWORD *)v10 = *(_OWORD *)v11;
        v12 = *(_OWORD *)(v11 + 16);
        v13 = *(_OWORD *)(v11 + 32);
        v14 = *(_OWORD *)(v11 + 48);
        *(_QWORD *)(v10 + 64) = *(_QWORD *)(v11 + 64);
        *(_OWORD *)(v10 + 32) = v13;
        *(_OWORD *)(v10 + 48) = v14;
        *(_OWORD *)(v10 + 16) = v12;
      }
    }
  }
  return _dispatch_kq_drain(a1, a2, 1, 3);
}

double _dispatch_sync_ipc_handoff_end(uint64_t a1, unsigned int a2)
{
  double result;
  _QWORD v3[3];
  unsigned int v4;
  __int128 v5;
  _BYTE v6[28];

  v3[0] = a2;
  v3[1] = 524271;
  v3[2] = a1;
  v4 = 0x80000000;
  v5 = 0u;
  memset(v6, 0, sizeof(v6));
  *(_QWORD *)&result = _dispatch_kq_deferred_update(a1, (uint64_t)v3).n128_u64[0];
  return result;
}

__n128 _dispatch_kq_deferred_update(uint64_t a1, uint64_t a2)
{
  unint64_t StatusReg;
  uint64_t v3;
  __n128 result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 *v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_QWORD *)(StatusReg + 232);
  if (v3 && *(_QWORD *)(v3 + 24) == a1 && (v5 = *(unsigned __int16 *)(v3 + 42), *(_WORD *)(v3 + 42)))
  {
    v6 = *(unsigned __int16 *)(v3 + 40);
    if (*(_WORD *)(v3 + 40))
    {
      v7 = 0;
      v8 = *(_QWORD *)(v3 + 32) + 8;
      v9 = (unsigned __int16 *)v8;
      while (1)
      {
        v10 = *v9;
        v9 += 36;
        if (v10 == *(unsigned __int16 *)(a2 + 8)
          && *(_QWORD *)(v8 - 8) == *(_QWORD *)a2
          && *(_QWORD *)(v8 + 8) == *(_QWORD *)(a2 + 16))
        {
          break;
        }
        ++v7;
        v8 = (uint64_t)v9;
        if (v6 == v7)
        {
          LODWORD(v7) = *(unsigned __int16 *)(v3 + 40);
          break;
        }
      }
    }
    else
    {
      LODWORD(v7) = 0;
    }
    if (a1 != -4)
      *(_QWORD *)(StatusReg + 40) = 1;
    if ((_DWORD)v7 == v5)
    {
      *(_WORD *)(v3 + 40) = 1;
      v14 = a2;
      v15 = v3;
      _dispatch_kq_drain(a1, *(_QWORD *)(v3 + 32), v6, 3);
      a2 = v14;
      v3 = v15;
      LODWORD(v7) = 0;
    }
    else if ((_DWORD)v7 == (_DWORD)v6)
    {
      *(_WORD *)(v3 + 40) = v6 + 1;
      LODWORD(v7) = v6;
    }
    v11 = *(_QWORD *)(v3 + 32) + 72 * v7;
    *(_OWORD *)v11 = *(_OWORD *)a2;
    result = *(__n128 *)(a2 + 16);
    v12 = *(_OWORD *)(a2 + 32);
    v13 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(v11 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(v11 + 32) = v12;
    *(_OWORD *)(v11 + 48) = v13;
    *(__n128 *)(v11 + 16) = result;
  }
  else
  {
    _dispatch_kq_drain(a1, a2, 1, 3);
  }
  return result;
}

uint64_t _dispatch_unote_register_muxed(uint64_t a1)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  _QWORD **v5;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  __int16 v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t (*v12)(int64_t, uint64_t);
  uint64_t result;
  int v14;
  int v15;
  int v16;
  uint64_t (*v17)(_QWORD *);
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(unsigned int *)(a1 + 24);
  v3 = *(char *)(a1 + 28);
  v4 = v2 >> 8;
  if ((v3 | 0x10) != 0xFFFFFFF8)
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
  v5 = (_QWORD **)((char *)&_dispatch_sources + 8 * (v4 & 0x3F));
  v6 = *v5;
  if (!*v5)
  {
LABEL_7:
    v7 = (int64_t)_dispatch_calloc(1uLL, 0x60uLL);
    v6 = (_QWORD *)v7;
    *(_QWORD *)(v7 + 24) = *(unsigned int *)(a1 + 24);
    v8 = v7 + 24;
    v9 = *(_WORD *)(*(_QWORD *)a1 + 12) | 5;
    v10 = *(_DWORD *)(*(_QWORD *)a1 + 16) | *(_DWORD *)(a1 + 32);
    v11 = *(unsigned __int16 *)(*(_QWORD *)a1 + 14);
    *(_WORD *)(v7 + 32) = *(char *)(*(_QWORD *)a1 + 8);
    *(_WORD *)(v7 + 34) = v9;
    *(_QWORD *)(v7 + 48) = v10;
    *(_QWORD *)(v7 + 56) = v11;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_DWORD *)(v7 + 36) = 0x2000000;
    *(_QWORD *)(v7 + 40) = v7 | 1;
    v12 = *(uint64_t (**)(int64_t, uint64_t))(*(_QWORD *)a1 + 40);
    if (v12)
    {
      if ((v12(v7, v8) & 1) == 0)
        goto LABEL_9;
    }
    else if (_dispatch_kq_immediate_update(-4, v8))
    {
LABEL_9:
      free(v6);
      return 0;
    }
    *((_WORD *)v6 + 17) &= 0xFDFEu;
    v18 = *v5;
    *v6 = *v5;
    if (v18)
      v18[1] = v6;
    *v5 = v6;
    v6[1] = v5;
    goto LABEL_18;
  }
  while (v6[3] != v2 || *((unsigned __int16 *)v6 + 16) != (unsigned __int16)v3)
  {
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_7;
  }
  v14 = *(_DWORD *)(a1 + 32);
  v15 = *((_DWORD *)v6 + 12);
  v16 = v14 & ~v15;
  if (v16)
  {
    *((_DWORD *)v6 + 12) = v15 | v14;
    v17 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)a1 + 40);
    if (v17)
    {
      if ((v17(v6) & 1) == 0)
        goto LABEL_13;
    }
    else if (_dispatch_kq_immediate_update(-4, (uint64_t)(v6 + 3)))
    {
LABEL_13:
      result = 0;
      *((_DWORD *)v6 + 12) &= ~v16;
      return result;
    }
  }
LABEL_18:
  v19 = v6 + 2;
  v20 = v6[2];
  *(_QWORD *)(a1 - 24) = v20;
  v21 = a1 - 24;
  if (v20)
    *(_QWORD *)(v20 + 8) = v21;
  *v19 = v21;
  *(_QWORD *)(a1 - 16) = v19;
  if (*(unsigned __int8 *)(a1 + 28) == 232)
    *(_BYTE *)(a1 + 30) = v6[8] != 0;
  *(_QWORD *)(a1 - 8) = v6;
  *(_QWORD *)(a1 + 16) = -3;
  return 1;
}

void _dispatch_unote_resume_muxed(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);

  *(_QWORD *)(a1 + 16) |= 1uLL;
  v2 = a1 - 8;
  v1 = *(_QWORD *)(a1 - 8);
  v3 = *(void (**)(uint64_t))(*(_QWORD *)(v2 + 8) + 40);
  if (v3)
    v3(v1);
  else
    _dispatch_kq_deferred_update(-4, v1 + 24);
}

uint64_t _dispatch_unote_unregister_muxed(uint64_t *a1)
{
  __int16 *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  __int16 v8;
  uint64_t (*v9)(__int16 *);
  uint64_t v10;

  v1 = (__int16 *)*(a1 - 1);
  if (v1[16] == -24)
    *((_BYTE *)a1 + 30) = 0;
  a1[2] = 0;
  v2 = *(a1 - 3);
  if (v2)
    *(_QWORD *)(v2 + 8) = *(a1 - 2);
  *(_QWORD *)*(a1 - 2) = v2;
  *(a1 - 1) = 0;
  v3 = *((_QWORD *)v1 + 2);
  if (v3)
  {
    v4 = *(_DWORD *)(*a1 + 16);
    v5 = (uint64_t *)*((_QWORD *)v1 + 2);
    do
    {
      v6 = v5;
      v4 |= *((_DWORD *)v5 + 14);
      v5 = (uint64_t *)*v5;
    }
    while (v5);
    v7 = *((_DWORD *)v1 + 12);
    if ((v7 & ~v4) == 0)
      goto LABEL_13;
    a1 = v6 + 3;
    *((_DWORD *)v1 + 12) = v7 & v4;
LABEL_11:
    v9 = *(uint64_t (**)(__int16 *))(*a1 + 40);
    if (v9)
    {
      if ((v9(v1) & 1) == 0)
        _dispatch_unote_unregister_muxed_cold_1();
    }
    else
    {
      _dispatch_kq_deferred_update(-4, v1 + 12);
    }
LABEL_13:
    if (v3)
      return 1;
    goto LABEL_14;
  }
  v8 = v1[17];
  v1[17] = v8 | 2;
  if ((v8 & 2) == 0)
    goto LABEL_11;
LABEL_14:
  v10 = *(_QWORD *)v1;
  if (*(_QWORD *)v1)
    *(_QWORD *)(v10 + 8) = *((_QWORD *)v1 + 1);
  **((_QWORD **)v1 + 1) = v10;
  free(v1);
  return 1;
}

uint64_t _dispatch_unote_register_direct(unsigned int *a1, uint64_t a2)
{
  return _dispatch_kq_unote_update(a2, a1, 5);
}

uint64_t _dispatch_kq_unote_update(uint64_t result, unsigned int *a2, __int16 a3)
{
  __int16 v3;
  unsigned int *v5;
  unint64_t StatusReg;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  __int16 v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int *v41;
  int v42;
  uint64_t v43;
  __int16 v44;
  __int16 v45;
  unsigned int v46;
  unsigned int *v47;
  int v48;
  int v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;

  v3 = a3;
  v5 = (unsigned int *)result;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_QWORD *)(StatusReg + 232);
  if ((a3 & 1) != 0)
  {
    if (result != -4)
    {
      if (result)
      {
        v8 = (unsigned int *)(result + 96);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
        if ((v9 & 0x80000000) != 0)
        {
          qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
          __break(1u);
LABEL_69:
          *(_WORD *)(v7 + 40) = 1;
          result = _dispatch_kq_drain(result, *(_QWORD *)(v7 + 32));
          LODWORD(v23) = 0;
          v21 = a2[6];
          goto LABEL_49;
        }
      }
    }
    *((_QWORD *)a2 + 2) = result | 1;
  }
  if (!v7 || *(_QWORD *)(v7 + 24) != result)
    goto LABEL_10;
  v21 = a2[6];
  v22 = *(_QWORD *)(v7 + 32);
  v23 = *(unsigned __int16 *)(v7 + 40);
  if (*(_WORD *)(v7 + 40))
  {
    v24 = 0;
    v25 = (unsigned __int16 *)(v22 + 8);
    v26 = (unsigned __int16 *)(v22 + 8);
    while (1)
    {
      v27 = *v26;
      v26 += 36;
      if (v27 == (unsigned __int16)*((char *)a2 + 28)
        && *((_QWORD *)v25 - 1) == v21
        && *((unsigned int **)v25 + 1) == a2)
      {
        break;
      }
      ++v24;
      v25 = v26;
      if (v23 == v24)
      {
        LODWORD(v24) = *(unsigned __int16 *)(v7 + 40);
        goto LABEL_42;
      }
    }
  }
  else
  {
    LODWORD(v24) = 0;
  }
  if (v24 >= v23)
  {
LABEL_42:
    if ((v3 & 5) != 4)
      goto LABEL_10;
  }
  else
  {
    v3 |= *(_WORD *)(v22 + 72 * v24 + 10) & 4;
    if ((v3 & 5) != 4)
    {
      *(_WORD *)(v7 + 40) = v23 - 1;
      if ((_DWORD)v24 != (unsigned __int16)(v23 - 1))
      {
        v28 = v22 + 72 * v24;
        v29 = v22 + 72 * (unsigned __int16)(v23 - 1);
        *(_OWORD *)v28 = *(_OWORD *)v29;
        v30 = *(_OWORD *)(v29 + 16);
        v31 = *(_OWORD *)(v29 + 32);
        v32 = *(_OWORD *)(v29 + 48);
        *(_QWORD *)(v28 + 64) = *(_QWORD *)(v29 + 64);
        *(_OWORD *)(v28 + 32) = v31;
        *(_OWORD *)(v28 + 48) = v32;
        *(_OWORD *)(v28 + 16) = v30;
      }
LABEL_10:
      v10 = *(_QWORD *)a2;
      v11 = *(_WORD *)(*(_QWORD *)a2 + 12) | v3;
      if ((v11 & 0x201) == 0x200)
        v11 &= ~0x200u;
      v12 = a2[6];
      v13 = *(char *)(v10 + 8);
      v14 = a2[9];
      if ((v14 & 0x4000000) != 0)
      {
        v15 = v14 & 0x8E000000 | 0xFF;
        LOWORD(v14) = (unsigned __int16)v14 >> 12;
      }
      else
      {
        v15 = v14 & 0x8E0000FF;
        v14 = (v14 >> 8) & 0xF;
        if (!v14)
          goto LABEL_17;
      }
      v15 |= 256 << (v14 - 1);
LABEL_17:
      v16 = *(_DWORD *)(v10 + 16) | a2[8];
      v17 = *(unsigned __int16 *)(v10 + 14);
      v51 = 0u;
      v52 = 0u;
      v43 = v12;
      v44 = v13;
      v45 = v11;
      v46 = v15;
      v47 = a2;
      v48 = v16;
      v49 = 0;
      v50 = v17;
      result = _dispatch_kq_drain(result, &v43);
      v18 = result;
      if ((v3 & 1) == 0)
      {
        if ((v3 & 2) == 0)
          goto LABEL_65;
        if ((_DWORD)result == 36)
          return 0;
        goto LABEL_57;
      }
      if ((_DWORD)result)
      {
        if (v5 != (unsigned int *)-4)
        {
          if (v5)
          {
            v19 = v5 + 24;
            do
              v20 = __ldxr(v19);
            while (__stxr(v20 - 1, v19));
            if (v20 <= 0)
            {
              if (v20 < 0)
                goto LABEL_71;
              *((_QWORD *)v5 + 7) = 0xDEAD000000000000;
              _dispatch_object_dealloc(v5);
            }
          }
        }
        result = 0;
        *((_QWORD *)a2 + 2) = 0;
        return result;
      }
      return 1;
    }
  }
  if (result != -4)
    *(_QWORD *)(StatusReg + 40) = 1;
  if ((_DWORD)v24 == *(unsigned __int16 *)(v7 + 42))
    goto LABEL_69;
  if ((_DWORD)v24 == (_DWORD)v23)
    *(_WORD *)(v7 + 40) = v23 + 1;
  else
    LODWORD(v23) = v24;
LABEL_49:
  v33 = *(_QWORD *)(v7 + 32) + 72 * v23;
  v34 = *(_QWORD *)a2;
  v35 = *(_WORD *)(*(_QWORD *)a2 + 12) | v3;
  if ((v35 & 0x201) == 0x200)
    v35 &= ~0x200u;
  v36 = *(char *)(v34 + 8);
  v37 = a2[9];
  if ((v37 & 0x4000000) != 0)
  {
    v38 = v37 & 0x8E000000 | 0xFF;
    LOWORD(v37) = (unsigned __int16)v37 >> 12;
    goto LABEL_55;
  }
  v38 = v37 & 0x8E0000FF;
  v37 = (v37 >> 8) & 0xF;
  if (v37)
LABEL_55:
    v38 |= 256 << (v37 - 1);
  v18 = 0;
  v39 = *(_DWORD *)(v34 + 16) | a2[8];
  v40 = *(unsigned __int16 *)(v34 + 14);
  *(_QWORD *)v33 = v21;
  *(_WORD *)(v33 + 8) = v36;
  *(_WORD *)(v33 + 10) = v35;
  *(_DWORD *)(v33 + 12) = v38;
  *(_QWORD *)(v33 + 16) = a2;
  *(_QWORD *)(v33 + 24) = v39;
  *(_QWORD *)(v33 + 32) = v40;
  *(_OWORD *)(v33 + 40) = 0u;
  *(_OWORD *)(v33 + 56) = 0u;
  if ((v3 & 3) != 2)
    return 1;
LABEL_57:
  if (v5 == (unsigned int *)-4)
    goto LABEL_64;
  if (!v5)
    goto LABEL_64;
  v41 = v5 + 24;
  do
    v42 = __ldxr(v41);
  while (__stxr(v42 - 1, v41));
  if (v42 > 0)
    goto LABEL_64;
  if ((v42 & 0x80000000) == 0)
  {
    *((_QWORD *)v5 + 7) = 0xDEAD000000000000;
    _dispatch_object_dealloc(v5);
LABEL_64:
    *((_QWORD *)a2 + 2) = 0;
LABEL_65:
    if (v18)
      _dispatch_bug(1077, v18);
    return 1;
  }
  qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
LABEL_71:
  qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
  return result;
}

uint64_t _dispatch_unote_resume_direct(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) |= 1uLL;
  return _dispatch_kq_unote_update(*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL, (unsigned int *)a1, 4);
}

uint64_t _dispatch_unote_unregister_direct(uint64_t a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v10;
  BOOL v11;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = v4 & 0xFFFFFFFFFFFFFFFCLL;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  v7 = 2;
  if ((v4 & 0xFFFFFFFFFFFFFFFCLL) != 0xFFFFFFFFFFFFFFFCLL && v6 != 0)
  {
    if (*(_QWORD *)(v6 + 24) == v5)
    {
      a2 |= 5u;
      v7 = 6;
    }
    else
    {
      v7 = 2;
    }
  }
  if ((v4 & 2) != 0 && (a2 & 1) == 0)
    goto LABEL_10;
  if (v4 == 2)
  {
    *(_QWORD *)(a1 + 16) = 0;
    return 1;
  }
  if ((v4 & 1) != 0)
  {
    v10 = v7;
  }
  else
  {
    a2 |= 4u;
    v10 = 6;
  }
  v11 = v10 <= 3 && (a2 & 2) == 0;
  if (!v11 && (_dispatch_kq_unote_update(v5, (unsigned int *)a1, v10) & 1) != 0)
    return 1;
LABEL_10:
  if ((a2 & 4) != 0)
    _dispatch_unote_unregister_direct_cold_1();
  return 0;
}

void _dispatch_event_loop_atfork_child()
{
  _dispatch_mach_host_port_pred = 0;
  _dispatch_mach_host_port = 0;
}

void _dispatch_event_loop_poke(NSObject *a1, uint64_t a2, NSObject *a3, int8x16_t a4)
{
  NSObject *v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  const char *v14;
  unsigned int *v15;
  int isa;
  int v17;
  unsigned int *v18;
  unsigned int v19;
  BOOL v20;
  signed int v21;
  unsigned int *v22;
  unsigned int v23;
  BOOL v24;
  signed int v25;
  unsigned int v26;
  BOOL v27;
  signed int v28;
  int v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[2];
  __int128 v35;

  if (a1 == -8)
  {
    v32 = 65526;
    memset(v34, 0, sizeof(v34));
    v35 = 0u;
    v31 = (&dword_0 + 1);
    v33 = -8;
    LODWORD(v34[0]) = 0x1000000;
    _dispatch_kq_deferred_update(-4, (uint64_t)&v31);
    return;
  }
  if (a1 == -4 || !a1)
    goto LABEL_55;
  if ((a2 & 0x4000000000) != 0)
  {
    v4 = &_dispatch_mgr_q;
    if (!MEMORY[0xFFFFFC100])
    {
LABEL_52:
      _dispatch_introspection_queue_item_enqueue(v4, a1);
      (*(void (**)(NSObject *, NSObject *, _QWORD))((char *)v4->isa + (unint64_t)&stru_20.maxprot))(v4, a1, 0);
      return;
    }
LABEL_61:
    _dispatch_trace_item_push_internal(&_dispatch_mgr_q, a1, a4);
    goto LABEL_52;
  }
  v4 = a3;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  if (!v6 || *(NSObject **)(v6 + 24) != a1)
  {
    if ((a2 & 1) != 0)
    {
      v11 = *((unsigned int *)a1[3].isa + 21);
      if ((v11 & 0x8000000) != 0)
      {
LABEL_60:
        qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Waking up a kq with cooperative thread request is not supported";
        qword_61258 = v11;
        __break(1u);
        goto LABEL_61;
      }
      v12 = (v11 >> 8) & 0xF;
      if (v12 <= (BYTE4(a2) & 7u))
        v12 = BYTE4(a2) & 7;
      if (v12 <= 1)
        LOBYTE(v12) = 1;
      v13 = 256 << (v12 - 1);
      v8 = a2 & 2 | 0x3700000001;
      v7 = v11 & 0x80000000 | v13 | 0xFF;
      if ((a2 & 2) != 0)
        v10 = 401;
      else
        v10 = 273;
      v9 = 5;
    }
    else
    {
      v7 = 0;
      v8 = 1;
      v9 = 7;
      v10 = 1;
    }
    v31 = a1;
    LOWORD(v32) = -17;
    WORD1(v32) = v9;
    HIDWORD(v32) = v7;
    v33 = (uint64_t)a1;
    LODWORD(v34[0]) = v10;
    memset((char *)v34 + 4, 0, 20);
    *((_QWORD *)&v34[1] + 1) = a1 + 7;
    *(_QWORD *)&v35 = v8;
    *((_QWORD *)&v35 + 1) = a2;
    if (!_dispatch_kq_poll(a1, &v31, 1, &v31, 1, 0, 0, 3))
    {
      if ((v4 & 0x80000000) != 0)
      {
        if ((v4 & 1) != 0)
          _os_object_release_internal_n(a1, (_BYTE *)&dword_0 + 2);
      }
      else
      {
        _os_object_release_internal(a1, v14);
      }
      return;
    }
LABEL_56:
    v29 = DWORD2(v34[0]);
    v30 = WORD1(v32) & 0xBFFF;
    WORD1(v32) &= ~0x4000u;
    DWORD1(v34[0]) = DWORD2(v34[0]);
    *((_QWORD *)&v34[0] + 1) = 0;
    if (DWORD1(v34[0]) == 105)
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid workloop owner, possible memory corruption";
      qword_61258 = *((_QWORD *)&v35 + 1);
      __break(1u);
    }
    else if (v29 != 34)
    {
      if (v29 == 2)
      {
        v11 = ((unint64_t)LODWORD(v34[0]) << 32) | (v30 << 16) | 2;
        qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
        qword_61258 = v11;
        __break(1u);
        goto LABEL_60;
      }
LABEL_64:
      qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
      qword_61258 = v29;
      __break(1u);
      return;
    }
    v29 = HIDWORD(v32);
    qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Broken priority";
    qword_61258 = SHIDWORD(v32);
    __break(1u);
    goto LABEL_64;
  }
  if ((*(_BYTE *)(v6 + 45) & 4) != 0)
  {
LABEL_32:
    if ((a3 & 0x80000000) == 0)
    {
      if (LODWORD(a1[1].isa) == 0x7FFFFFFF)
        goto LABEL_37;
      v18 = (unsigned int *)&a1[1];
      do
      {
        v19 = __ldxr(v18);
        v20 = __OFSUB__(v19, 1);
        v21 = v19 - 1;
      }
      while (__stlxr(v21, v18));
      if (!((v21 < 0) ^ v20 | (v21 == 0)))
      {
LABEL_37:
        _dispatch_event_loop_leave_deferred(v6, a2);
        return;
      }
      qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
      goto LABEL_54;
    }
LABEL_45:
    _dispatch_kevent_workloop_override_self(v6, a2, (char)a3);
    return;
  }
  if ((*(_BYTE *)(v6 + 45) & 1) == 0)
  {
    if ((a3 & 0x80000000) != 0)
    {
      v15 = (unsigned int *)&a1[1];
      isa = (int)a1[1].isa;
      if ((a3 & 1) != 0)
      {
        if (isa != 0x7FFFFFFF)
        {
          do
          {
            v26 = __ldxr(v15);
            v27 = __OFSUB__(v26, 1);
            v28 = v26 - 1;
          }
          while (__stlxr(v28, v15));
          if ((v28 < 0) ^ v27 | (v28 == 0))
          {
LABEL_54:
            qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
            __break(1u);
LABEL_55:
            qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unsupported wlh configuration";
            qword_61258 = (uint64_t)a1;
            __break(1u);
            goto LABEL_56;
          }
        }
      }
      else if (isa != 0x7FFFFFFF)
      {
        do
          v17 = __ldxr(v15);
        while (__stxr(v17 + 1, v15));
        if (v17 <= 0)
        {
          qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
          __break(1u);
          goto LABEL_32;
        }
      }
    }
    *(_BYTE *)(v6 + 45) |= 3u;
    *v6 = a1[3];
    *(_QWORD *)(v6 + 8) = a1;
    *(_DWORD *)(v6 + 16) = BYTE4(a2) & 7;
    return;
  }
  if ((a3 & 1) != 0 && LODWORD(a1[1].isa) != 0x7FFFFFFF)
  {
    v22 = (unsigned int *)&a1[1];
    do
    {
      v23 = __ldxr(v22);
      v24 = __OFSUB__(v23, 2);
      v25 = v23 - 2;
    }
    while (__stlxr(v25, v22));
    if ((v25 < 0) ^ v24 | (v25 == 0))
    {
      qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
      goto LABEL_45;
    }
  }
}

void _dispatch_event_loop_drain(uint64_t a1)
{
  unint64_t StatusReg;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_QWORD *)(StatusReg + 232);
  v4 = *(uint64_t **)(v3 + 24);
  v5 = v4 + 7;
  v6 = a1 & 3;
  while ((*(_BYTE *)(v3 + 45) & 2) == 0)
  {
LABEL_23:
    v19 = *(unsigned __int16 *)(v3 + 40);
    *(_WORD *)(v3 + 40) = 0;
    _dispatch_kq_drain((uint64_t)v4, *(_QWORD *)(v3 + 32), v19, a1);
    if (v4 != (uint64_t *)-4)
    {
      if (v4)
      {
        if (*(_BYTE *)(*v4 + 40) == 18)
        {
          v20 = v4[6];
          if (v20)
          {
            if (*(_BYTE *)(v20 + 6))
              _dispatch_event_loop_drain_timers(v20, 6u);
          }
        }
      }
    }
    if (v6 != 1 || !*(_QWORD *)(StatusReg + 40))
      return;
  }
  v7 = *v5;
  *(_BYTE *)(v3 + 45) &= ~2u;
  v8 = *(_QWORD *)(v3 + 32);
  v9 = *(unsigned __int16 *)(v3 + 40);
  if (*(_WORD *)(v3 + 40))
  {
    v10 = 0;
    v11 = (uint64_t **)(v8 + 8);
    v12 = (uint64_t **)(v8 + 8);
    while (1)
    {
      v13 = *(__int16 *)v12;
      v12 += 9;
      if (v13 == -17 && *(v11 - 1) == v4 && v11[1] == v4)
        break;
      ++v10;
      v11 = v12;
      if (v9 == v10)
      {
        LODWORD(v10) = *(unsigned __int16 *)(v3 + 40);
        goto LABEL_12;
      }
    }
  }
  else
  {
    LODWORD(v10) = 0;
  }
  if ((_DWORD)v10 == (_DWORD)v9)
LABEL_12:
    *(_WORD *)(v3 + 40) = v9 + 1;
  v14 = *(unsigned int *)(v4[3] + 84);
  if ((v14 & 0x8000000) == 0)
  {
    v15 = (v14 >> 8) & 0xF;
    if (v15 <= (BYTE4(v7) & 7u))
      v15 = BYTE4(v7) & 7;
    v16 = v8 + 72 * v10;
    *(_QWORD *)v16 = v4;
    if (v15 <= 1)
      v17 = 1;
    else
      v17 = v15;
    *(_DWORD *)(v16 + 8) = 393199;
    *(_DWORD *)(v16 + 12) = v14 & 0x80000000 | (256 << (v17 - 1)) | 0xFF;
    *(_QWORD *)(v16 + 16) = v4;
    if ((v7 & 2) != 0)
      v18 = 401;
    else
      v18 = 273;
    *(_DWORD *)(v16 + 24) = v18;
    *(_QWORD *)(v16 + 36) = 0;
    *(_QWORD *)(v16 + 28) = 0;
    *(_DWORD *)(v16 + 44) = 0;
    *(_QWORD *)(v16 + 48) = v5;
    *(_QWORD *)(v16 + 56) = v7 & 2 | 0x3700000001;
    *(_QWORD *)(v16 + 64) = v7;
    goto LABEL_23;
  }
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Waking up a kq with cooperative thread request is not supported";
  qword_61258 = v14;
  __break(1u);
}

uint64_t _dispatch_kq_drain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t StatusReg;
  uint64_t result;
  uint64_t v10;
  _WORD *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _WORD *v15;
  _BYTE v16[32768];
  uint64_t v17;
  _WORD v18[576];

  if ((a4 & 2) == 0)
  {
    v17 = 0x8000;
    bzero(v16, 0x8000uLL);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(_QWORD *)(StatusReg + 40) = 0;
    result = _dispatch_kq_poll(a1, a2, a3, v18, 16, v16, &v17, a4);
    if (!(_DWORD)result)
      return result;
    if ((v18[5] & 0x4000) != 0)
      *(_QWORD *)(StatusReg + 40) = 1;
    if ((int)result >= 1)
    {
      v10 = result;
      v11 = v18;
      do
      {
        _dispatch_kevent_drain((uint64_t)v11);
        v11 += 36;
        --v10;
      }
      while (v10);
    }
    return 0;
  }
  v12 = _dispatch_kq_poll(a1, a2, a3, v18, 16, 0, 0, a4);
  if (v12 < 1)
    return 0;
  v13 = v12;
  result = 0;
  v14 = v13;
  v15 = v18;
  do
  {
    if ((v15[5] & 0x4000) != 0 && *((_QWORD *)v15 + 4))
    {
      _dispatch_kevent_drain((uint64_t)v15);
      result = *((unsigned int *)v15 + 8);
    }
    v15 += 36;
    --v14;
  }
  while (v14);
  return result;
}

void _dispatch_event_loop_merge(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  const void *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;

  LODWORD(v2) = a2;
  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  v4 = *(_QWORD **)(v3 + 24);
  __chkstk_darwin(a1, a1);
  v6 = (char *)&v10 - v5;
  memcpy((char *)&v10 - v5, v7, v8);
  *(_WORD *)(v3 + 42) = 14;
  if ((int)v2 >= 1)
  {
    v2 = v2;
    do
    {
      _dispatch_kevent_drain((uint64_t)v6);
      v6 += 72;
      --v2;
    }
    while (v2);
  }
  if (v4 == (_QWORD *)-4)
  {
    if (*(_QWORD *)(v3 + 8) && *(_WORD *)(v3 + 40))
      _dispatch_event_loop_drain(3);
  }
  else if (*(_BYTE *)(*v4 + 40) == 18)
  {
    v9 = v4[6];
    if (v9)
    {
      if (*(_BYTE *)(v9 + 6))
        _dispatch_event_loop_drain_timers(v9, 6u);
    }
  }
}

void _dispatch_kevent_drain(uint64_t a1)
{
  int v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(unsigned __int16 *)(a1 + 8);
  if (v1 != 65526)
  {
    if (v1 == 65519)
    {
      _dispatch_kevent_workloop_poke_drain(a1);
      return;
    }
    if ((*(_WORD *)(a1 + 10) & 0x4000) != 0)
    {
      if (v1 != 65531 || *(_QWORD *)(a1 + 32) != 3)
      {
        _dispatch_kevent_print_error(a1);
        return;
      }
      *(_WORD *)(a1 + 10) = 274;
      *(_DWORD *)(a1 + 24) = -2080374784;
      *(_QWORD *)(a1 + 32) = 0;
    }
    else if (v1 == 65528)
    {
      if (*(_DWORD *)(a1 + 48) || *(_DWORD *)(a1 + 24) >> 14 == 16385)
      {
        _dispatch_kevent_mach_msg_drain(a1);
        return;
      }
    }
    else if (v1 == 65529)
    {
      v3 = *(_QWORD *)(a1 + 16);
      v4 = *(_QWORD *)a1;
      *(_BYTE *)(v3 + 6) |= (1 << (*(_QWORD *)a1 % 3u)) | 0x80;
      *(_BYTE *)(v3 + 32 * v4 + 7) = *(_BYTE *)(v3 + 32 * v4 + 7) & 0xFC | 2;
      return;
    }
    v5 = *(_QWORD *)(a1 + 16);
    if ((v5 & 1) != 0)
      _dispatch_kevent_merge_muxed(a1);
    else
      _dispatch_kevent_merge(v5, a1);
  }
}

uint64_t _dispatch_event_loop_leave_immediate(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  int v4;
  unsigned __int16 v5;
  uint64_t v6;
  _QWORD v7[2];
  unsigned int v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  v2 = *(_QWORD *)(v1 + 24);
  *(_BYTE *)(v1 + 45) &= 0xFCu;
  v6 = v2;
  v7[0] = 524271;
  v7[1] = v2;
  v8 = 33;
  v9 = 0uLL;
  v10 = 0;
  v11 = v2 + 56;
  v12 = 0;
  v13 = a1;
  result = _dispatch_kq_poll(v2, (uint64_t)&v6, 1, (uint64_t)&v6, 1, 0, 0, 131075);
  if ((_DWORD)result)
  {
    v4 = DWORD1(v9);
    v5 = WORD1(v7[0]) & 0xBFFF;
    WORD1(v7[0]) &= ~0x4000u;
    LODWORD(v9) = DWORD1(v9);
    *(_QWORD *)((char *)&v9 + 4) = 0;
    if ((_DWORD)v9 != 105)
    {
      if (v4 != 34)
      {
        if (v4 == 2)
          _dispatch_event_loop_leave_immediate_cold_3(&v8, v5);
        _dispatch_sync_ipc_handoff_begin_cold_1(v4);
      }
      _dispatch_event_loop_leave_immediate_cold_4((int *)v7 + 1);
    }
    _dispatch_event_loop_leave_immediate_cold_2(&v13);
  }
  return result;
}

uint64_t _dispatch_kq_poll(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  __objc2_class **v16;
  __objc2_class **v17;
  uint64_t result;
  int v19;
  uint64_t v20;
  unint64_t StatusReg;
  char context;

  LODWORD(v8) = a8;
  context = 0;
  if (_dispatch_kq_poll_pred != -1)
  {
    dispatch_once_f(&_dispatch_kq_poll_pred, &context, (dispatch_function_t)_dispatch_kq_init);
    if (context)
    {
      _dispatch_memorypressure_create(malloc_memorypressure_mask_default_4libdispatch);
      _voucher_activity_debug_channel_init();
    }
  }
  if (a1)
  {
    v16 = &_dispatch_mgr_q;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      while (1)
      {
        if (a1 == -4)
        {
          v17 = v16;
          v8 = v8 | 0x20;
          result = kevent_qos(*(unsigned int *)((char *)&stru_20.cmd + (_QWORD)v16), a2, a3, a4, a5, a6, a7, v8);
        }
        else
        {
          v17 = v16;
          if ((v8 & 2) != 0)
            v19 = 1024;
          else
            v19 = 132096;
          v8 = v19 | v8;
          result = kevent_id(a1, a2, a3, a4, a5, a6, a7, v8);
        }
        if ((_DWORD)result != -1)
          return result;
        LODWORD(v20) = **(_DWORD **)(StatusReg + 8);
        if ((int)v20 > 8)
          break;
        v16 = v17;
        if ((_DWORD)v20 != 4)
          goto LABEL_19;
      }
      if ((_DWORD)v20 != 12)
        break;
      _dispatch_temporary_resource_shortage();
      v16 = v17;
    }
    if ((_DWORD)v20 == 9)
    {
      LODWORD(v20) = 9;
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Do not close random Unix descriptors";
      qword_61258 = 9;
      __break(1u);
    }
LABEL_25:
    v20 = (int)v20;
    goto LABEL_26;
  }
  LODWORD(v20) = 0;
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Invalid wlh";
  qword_61258 = 0;
  __break(1u);
LABEL_19:
  if ((_DWORD)v20 != 2)
    goto LABEL_25;
  if ((~(_DWORD)v8 & 0x20002) != 0)
  {
    while (1)
    {
      v20 = 2;
LABEL_26:
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected error from kevent";
      qword_61258 = v20;
      __break(1u);
    }
  }
  return 0;
}

uint64_t _dispatch_event_loop_leave_deferred(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 *v7;
  __int16 *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 *v15;
  __int16 *v16;
  int v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;

  if ((~a2 & 0x2800000000) == 0)
  {
    if ((a2 & 0xFFFFFFFC) != 0)
      v2 = a2 & 0xFFFFFFFC | 3;
    else
      v2 = 0;
    v3 = *(_QWORD *)(result + 24);
    v4 = *(_QWORD *)(result + 32);
    v5 = *(unsigned __int16 *)(result + 40);
    if (*(_WORD *)(result + 40))
    {
      v6 = 0;
      v7 = (__int16 *)(v4 + 8);
      v8 = (__int16 *)(v4 + 8);
      while (1)
      {
        v9 = *v8;
        v8 += 36;
        if (v9 == -17 && *((_QWORD *)v7 - 1) == v3 && *((_QWORD *)v7 + 1) == v2)
          break;
        ++v6;
        v7 = v8;
        if (v5 == v6)
        {
          LODWORD(v6) = *(unsigned __int16 *)(result + 40);
          goto LABEL_14;
        }
      }
    }
    else
    {
      LODWORD(v6) = 0;
    }
    if ((_DWORD)v6 == (_DWORD)v5)
LABEL_14:
      *(_WORD *)(result + 40) = v5 + 1;
    v10 = v4 + 72 * v6;
    *(_QWORD *)v10 = v2;
    *(_QWORD *)(v10 + 8) = 655343;
    *(_QWORD *)(v10 + 16) = v3;
    *(_DWORD *)(v10 + 24) = 392;
    *(_QWORD *)(v10 + 44) = 0;
    *(_DWORD *)(v10 + 52) = 0;
    *(_QWORD *)(v10 + 28) = 0;
    *(_QWORD *)(v10 + 36) = 0;
    *(_QWORD *)(v10 + 56) = 0x3800000002;
    *(_QWORD *)(v10 + 64) = a2;
    *(_QWORD *)(v10 + 48) = v3 + 56;
  }
  *(_BYTE *)(result + 45) &= 0xFCu;
  v11 = *(_QWORD *)(result + 24);
  v12 = *(_QWORD *)(result + 32);
  v13 = *(unsigned __int16 *)(result + 40);
  if (*(_WORD *)(result + 40))
  {
    v14 = 0;
    v15 = (__int16 *)(v12 + 8);
    v16 = (__int16 *)(v12 + 8);
    while (1)
    {
      v17 = *v16;
      v16 += 36;
      if (v17 == -17 && *((_QWORD *)v15 - 1) == v11 && *((_QWORD *)v15 + 1) == v11)
        break;
      ++v14;
      v15 = v16;
      if (v13 == v14)
      {
        LODWORD(v14) = *(unsigned __int16 *)(result + 40);
        goto LABEL_25;
      }
    }
  }
  else
  {
    LODWORD(v14) = 0;
  }
  if ((_DWORD)v14 == (_DWORD)v13)
LABEL_25:
    *(_WORD *)(result + 40) = v13 + 1;
  if ((a2 & 1) != 0)
  {
    result = *(unsigned int *)(*(_QWORD *)(v11 + 24) + 84);
    if ((result & 0x8000000) != 0)
      _dispatch_event_loop_leave_deferred_cold_1(result);
    v22 = (result >> 8) & 0xF;
    if (v22 <= (BYTE4(a2) & 7u))
      v22 = BYTE4(a2) & 7;
    if (v22 <= 1)
      LOBYTE(v22) = 1;
    v23 = 256 << (v22 - 1);
    v19 = a2 & 2 | 0x3700000001;
    v18 = result & 0x80000000 | v23 | 0xFF;
    if ((a2 & 2) != 0)
      v21 = 401;
    else
      v21 = 273;
    v20 = 5;
  }
  else
  {
    v18 = 0;
    v19 = 1;
    v20 = 7;
    v21 = 1;
  }
  v24 = v12 + 72 * v14;
  *(_QWORD *)v24 = v11;
  *(_WORD *)(v24 + 8) = -17;
  *(_WORD *)(v24 + 10) = v20;
  *(_DWORD *)(v24 + 12) = v18;
  *(_QWORD *)(v24 + 16) = v11;
  *(_DWORD *)(v24 + 24) = v21;
  *(_QWORD *)(v24 + 36) = 0;
  *(_QWORD *)(v24 + 28) = 0;
  *(_DWORD *)(v24 + 44) = 0;
  *(_QWORD *)(v24 + 48) = v11 + 56;
  *(_QWORD *)(v24 + 56) = v19;
  *(_QWORD *)(v24 + 64) = a2;
  return result;
}

uint64_t _dispatch_event_loop_cancel_waiter(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  char v4;
  int v5;
  char v6;
  unsigned __int16 v7;
  uint64_t v8;
  _QWORD v9[2];
  unsigned int v10;
  __int128 v11;
  _BYTE v12[28];

  v2 = *(_QWORD *)(a1 + 48);
  while (1)
  {
    v8 = *(unsigned int *)(a1 + 100);
    v9[0] = 458735;
    v9[1] = v2;
    v10 = 40;
    v11 = 0u;
    memset(v12, 0, sizeof(v12));
    result = _dispatch_kq_poll(v2, &v8, 1, &v8, 1, 0, 0, 3);
    if (!(_DWORD)result)
      break;
    v4 = *(_BYTE *)(a1 + 106);
    v5 = DWORD1(v11);
    v6 = BYTE2(v9[0]);
    v7 = WORD1(v9[0]) & 0xBFFF;
    WORD1(v9[0]) &= ~0x4000u;
    LODWORD(v11) = DWORD1(v11);
    *(_QWORD *)((char *)&v11 + 4) = 0;
    if ((_DWORD)v11 != 2)
    {
      if (v5 != 34)
      {
        if (v5 == 105)
          _dispatch_event_loop_cancel_waiter_cold_2((uint64_t)&v8);
        _dispatch_sync_ipc_handoff_begin_cold_1(v5);
      }
      _dispatch_event_loop_leave_immediate_cold_4((int *)v9 + 1);
    }
    if ((v4 & 0x20) != 0 || (v6 & 2) == 0 || (v10 & 0x28) != 0x28)
      _dispatch_event_loop_cancel_waiter_cold_3(v10, v7);
    thread_switch(*(_DWORD *)(a1 + 100), 4, 1u);
  }
  return result;
}

uint64_t _dispatch_event_loop_wake_owner(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t StatusReg;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 *v18;
  __int16 *v19;
  int v20;
  int v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 *v32;
  __int16 *v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned __int16 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v5 = result;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_QWORD *)(result + 48);
  if (a2 == -4
    || (v8 = *(_QWORD *)(StatusReg + 232)) == 0
    || *(_QWORD *)(v8 + 24) != a2
    || (*(_BYTE *)(v8 + 45) &= 0xFCu, v7 != a2))
  {
    if (((a4 ^ a3) & 1) != 0)
    {
      v38 = a2;
      v39 = 524271;
      v40 = a2;
      v41 = 257;
      v42 = 0uLL;
      v43 = 0;
      v9 = 1;
      v44 = a2 + 56;
      v45 = 1;
      v46 = a4;
      if ((a4 & 0x2000000000) == 0)
        goto LABEL_10;
    }
    else
    {
      v9 = 0;
      if ((a4 & 0x2000000000) == 0)
      {
LABEL_10:
        if ((a3 & 0x2000000002) == 0x2000000000 && (*(char *)(result + 106) & 0x80000000) == 0)
        {
          v11 = *(unsigned int *)(StatusReg + 24);
          v12 = &v38 + 9 * v9;
          *v12 = v11;
          v12[1] = 458735;
          v12[2] = a2;
          *((_DWORD *)v12 + 6) = 40;
          *(_OWORD *)((char *)v12 + 28) = 0u;
          *(_OWORD *)((char *)v12 + 44) = 0u;
          *((_DWORD *)v12 + 15) = 0;
          v12[8] = a3;
          v9 = (v9 + 1);
        }
        result = _dispatch_kq_poll(a2, &v38, v9, &v38, v9, 0, 0, 3);
        v14 = v7 != -4 && v7 != a2;
        if ((_DWORD)result)
        {
          if (v14)
            _dispatch_bug_deprecated("Changing target queue hierarchy with a dispatch_sync in flight");
          v36 = DWORD1(v42);
          v37 = WORD1(v39) & 0xBFFF;
          WORD1(v39) &= ~0x4000u;
          LODWORD(v42) = DWORD1(v42);
          *(_QWORD *)((char *)&v42 + 4) = 0;
          if ((_DWORD)v42 != 105)
          {
            if (v36 != 34)
            {
              if (v36 == 2)
                _dispatch_event_loop_wake_owner_cold_4((uint64_t)&v38, v37);
              _dispatch_sync_ipc_handoff_begin_cold_1(v36);
            }
            _dispatch_event_loop_wake_owner_cold_5((uint64_t)&v38);
          }
          _dispatch_event_loop_cancel_waiter_cold_2((uint64_t)&v38);
        }
        if (v14)
        {
          _dispatch_bug_deprecated("Changing target queue hierarchy with a dispatch_sync in flight");
          return _dispatch_event_loop_cancel_waiter(v5);
        }
        return result;
      }
    }
    v10 = &v38 + 9 * v9;
    *v10 = *(unsigned int *)(result + 100);
    v10[1] = 655343;
    v10[2] = a2;
    *((_DWORD *)v10 + 6) = 136;
    *(_OWORD *)((char *)v10 + 44) = 0u;
    *(_OWORD *)((char *)v10 + 28) = 0u;
    *((_DWORD *)v10 + 15) = 0;
    v10[8] = a4;
    v10[6] = a2 + 56;
    v9 = (v9 + 1);
    goto LABEL_10;
  }
  v15 = *(_QWORD *)(v8 + 32);
  v16 = *(unsigned __int16 *)(v8 + 40);
  if (*(_WORD *)(v8 + 40))
  {
    v17 = 0;
    v18 = (__int16 *)(v15 + 8);
    v19 = (__int16 *)(v15 + 8);
    while (1)
    {
      v20 = *v19;
      v19 += 36;
      if (v20 == -17 && *((_QWORD *)v18 - 1) == a2 && *((_QWORD *)v18 + 1) == a2)
        break;
      ++v17;
      v18 = v19;
      if (v16 == v17)
      {
        LODWORD(v17) = *(unsigned __int16 *)(v8 + 40);
        goto LABEL_32;
      }
    }
  }
  else
  {
    LODWORD(v17) = 0;
  }
  if ((_DWORD)v17 == (_DWORD)v16)
LABEL_32:
    *(_WORD *)(v8 + 40) = v16 + 1;
  if ((a4 & 1) != 0)
  {
    result = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 84);
    if ((result & 0x8000000) != 0)
      _dispatch_event_loop_leave_deferred_cold_1(result);
    v25 = (result >> 8) & 0xF;
    if (v25 <= (BYTE4(a4) & 7u))
      v25 = BYTE4(a4) & 7;
    if (v25 <= 1)
      LOBYTE(v25) = 1;
    v26 = 256 << (v25 - 1);
    v24 = a4 & 2 | 0x3700000001;
    v21 = result & 0x80000000 | v26 | 0xFF;
    if ((a4 & 2) != 0)
      v22 = 401;
    else
      v22 = 273;
    v23 = 5;
  }
  else
  {
    v21 = 0;
    v22 = 257;
    v23 = 7;
    v24 = 1;
  }
  v27 = v15 + 72 * v17;
  *(_QWORD *)v27 = a2;
  *(_WORD *)(v27 + 8) = -17;
  *(_WORD *)(v27 + 10) = v23;
  *(_DWORD *)(v27 + 12) = v21;
  *(_QWORD *)(v27 + 16) = a2;
  *(_DWORD *)(v27 + 24) = v22;
  *(_QWORD *)(v27 + 36) = 0;
  *(_QWORD *)(v27 + 28) = 0;
  *(_DWORD *)(v27 + 44) = 0;
  *(_QWORD *)(v27 + 48) = a2 + 56;
  *(_QWORD *)(v27 + 56) = v24;
  *(_QWORD *)(v27 + 64) = a4;
  v28 = *(unsigned int *)(v5 + 100);
  v29 = *(_QWORD *)(v8 + 32);
  v30 = *(unsigned __int16 *)(v8 + 40);
  if (*(_WORD *)(v8 + 40))
  {
    v31 = 0;
    v32 = (__int16 *)(v29 + 8);
    v33 = (__int16 *)(v29 + 8);
    while (1)
    {
      v34 = *v33;
      v33 += 36;
      if (v34 == -17 && *((_QWORD *)v32 - 1) == a2 && *((_QWORD *)v32 + 1) == v28)
        break;
      ++v31;
      v32 = v33;
      if (v30 == v31)
      {
        LODWORD(v31) = *(unsigned __int16 *)(v8 + 40);
        goto LABEL_53;
      }
    }
  }
  else
  {
    LODWORD(v31) = 0;
  }
  if ((_DWORD)v31 == (_DWORD)v30)
LABEL_53:
    *(_WORD *)(v8 + 40) = v30 + 1;
  v35 = v29 + 72 * v31;
  *(_QWORD *)v35 = v28;
  *(_QWORD *)(v35 + 8) = 655343;
  *(_QWORD *)(v35 + 16) = a2;
  *(_DWORD *)(v35 + 24) = 136;
  *(_OWORD *)(v35 + 44) = 0u;
  *(_OWORD *)(v35 + 28) = 0u;
  *(_DWORD *)(v35 + 60) = 0;
  *(_QWORD *)(v35 + 64) = a4;
  *(_QWORD *)(v35 + 48) = a2 + 56;
  return result;
}

void _dispatch_event_loop_wait_for_ownership(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t StatusReg;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  char v19;
  unsigned int *v20;
  unsigned int *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(v2 + 56);
  if ((v3 & 0xFFFFFFFD) == 1)
  {
    v4 = *(_DWORD *)(*(_QWORD *)(v2 + 24) + 84);
    if ((v4 & 0x8000000) != 0)
      _dispatch_event_loop_leave_deferred_cold_1(v4);
    v5 = (v4 >> 8) & 0xF;
    if (v5 <= (BYTE4(v3) & 7u))
      v5 = BYTE4(v3) & 7;
    v23 = v2;
    if (v5 <= 1)
      LOBYTE(v5) = 1;
    LODWORD(v24) = 393199;
    HIDWORD(v24) = v4 & 0x80000000 | (256 << (v5 - 1)) | 0xFF;
    v25 = v2;
    if ((v3 & 2) != 0)
      v6 = 401;
    else
      v6 = 273;
    v26 = v6;
    v28 = 0;
    v27 = 0;
    v29 = 0;
    v30 = v2 + 56;
    v31 = v3 & 2 | 0x3700000001;
    v32 = v3;
    v7 = 1;
  }
  else if ((~v3 & 0x2800000000) != 0)
  {
    v7 = 0;
  }
  else
  {
    v8 = v3 & 0xFFFFFFFC | 3;
    if ((v3 & 0xFFFFFFFC) == 0)
      v8 = 0;
    v23 = v8;
    v24 = 655343;
    v25 = v2;
    v26 = 392;
    v28 = 0;
    v27 = 0;
    v29 = 0;
    v31 = 0x3800000002;
    v32 = v3;
    v7 = 1;
    v30 = v2 + 56;
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    v10 = v7 + 1;
    v11 = *(_QWORD *)(StatusReg + 32);
    v12 = &v23 + 9 * v7;
    if ((v11 & 0x3FFF00) == 0)
      LODWORD(v11) = 2303;
    *v12 = *(unsigned int *)(a1 + 100);
    *((_DWORD *)v12 + 2) = 655343;
    *((_DWORD *)v12 + 3) = v11;
    v12[2] = v2;
    *((_DWORD *)v12 + 6) = 4;
    *(_OWORD *)((char *)v12 + 28) = 0u;
    *(_OWORD *)((char *)v12 + 44) = 0u;
    *((_DWORD *)v12 + 15) = 0;
    v12[8] = v3;
    v13 = _dispatch_kq_poll(v2, (uint64_t)&v23, v10, (uint64_t)&v23, v10, 0, 0, 3);
    if (v13 >= 1)
    {
      v14 = 0;
      v15 = (uint64_t *)((char *)&v27 + 4);
      do
      {
        v16 = *((unsigned int *)v15 - 2);
        v17 = *v15;
        v18 = *((_WORD *)v15 - 11) & 0xBFFF;
        *((_WORD *)v15 - 11) = v18;
        *((_DWORD *)v15 - 1) = v17;
        *v15 = 0;
        if ((_DWORD)v17 != 4)
        {
          switch((_DWORD)v17)
          {
            case 2:
              _dispatch_event_loop_cancel_waiter_cold_3(v16, v18);
            case 0x22:
              _dispatch_event_loop_wait_for_ownership_cold_5((uint64_t)&v23, v14);
            case 0x69:
              _dispatch_event_loop_wait_for_ownership_cold_4((uint64_t)&v23, v14);
          }
LABEL_39:
          _dispatch_sync_ipc_handoff_begin_cold_1(v17);
        }
        if ((v16 & 4) == 0)
          goto LABEL_39;
        v15 += 9;
        ++v14;
      }
      while (v13 != v14);
    }
    if (!v13)
      break;
    v7 = 0;
    v3 = v32;
  }
  v19 = *(_BYTE *)(a1 + 106);
  if ((v19 & 0x20) != 0)
  {
    _dispatch_event_loop_cancel_waiter(a1);
    v19 = *(_BYTE *)(a1 + 106) & 0xDF;
    *(_BYTE *)(a1 + 106) = v19;
  }
  if ((v19 & 0x40) != 0)
  {
    v20 = *(unsigned int **)(a1 + 48);
    v21 = v20 + 24;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 - 1, v21));
    if (v22 <= 0)
    {
      if (v22 < 0)
        _os_object_allows_weak_reference_cold_1();
      *((_QWORD *)v20 + 7) = 0xDEAD000000000000;
      _dispatch_object_dealloc(v20);
    }
  }
}

uint64_t _dispatch_event_loop_ensure_ownership(uint64_t a1)
{
  uint64_t result;
  int v2;
  unsigned __int16 v3;
  uint64_t v4;
  _QWORD v5[2];
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  int v9;
  uint64_t v10;

  v4 = *(unsigned int *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  v5[0] = 655343;
  v5[1] = a1;
  v6 = 136;
  v8 = 0u;
  v7 = 0u;
  v9 = 0;
  v10 = v4;
  *(_QWORD *)((char *)&v8 + 4) = a1 + 56;
  result = _dispatch_kq_poll(a1, &v4, 1, &v4, 1, 0, 0, 3);
  if ((_DWORD)result)
  {
    v2 = DWORD1(v7);
    v3 = WORD1(v5[0]) & 0xBFFF;
    WORD1(v5[0]) &= ~0x4000u;
    LODWORD(v7) = DWORD1(v7);
    *(_QWORD *)((char *)&v7 + 4) = 0;
    if ((_DWORD)v7 != 105)
    {
      if (v2 != 34)
      {
        if (v2 == 2)
          _dispatch_event_loop_leave_immediate_cold_3(&v6, v3);
        _dispatch_sync_ipc_handoff_begin_cold_1(v2);
      }
      _dispatch_event_loop_leave_immediate_cold_4((int *)v5 + 1);
    }
    _dispatch_event_loop_leave_immediate_cold_2(&v10);
  }
  return result;
}

id _dispatch_event_loop_end_ownership(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v5;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  uint64_t *v14;
  id result;
  const char *v16;
  int v17;
  unsigned int *v18;
  unsigned int v19;
  signed int v20;
  int v21;
  unsigned __int16 v22;
  uint64_t v23;
  __int16 v24;
  __int16 v25;
  int v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = a3;
  if ((a3 & 1) != 0)
  {
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 84);
    if ((v8 & 0x8000000) != 0)
      _dispatch_event_loop_leave_deferred_cold_1(v8);
    v9 = (v8 >> 8) & 0xF;
    if (v9 <= (BYTE4(a3) & 7u))
      v9 = BYTE4(a3) & 7;
    if (v9 <= 1)
      LOBYTE(v9) = 1;
    v10 = 256 << (v9 - 1);
    v11 = a3 & 2 | 0x3700000001;
    LODWORD(a3) = v8 & 0x80000000 | v10 | 0xFF;
    if ((v5 & 2) != 0)
      v12 = 401;
    else
      v12 = 273;
    v13 = 5;
  }
  else
  {
    a3 = 0;
    if ((a2 & 1) == 0)
      goto LABEL_14;
    v12 = 257;
    v13 = 7;
    v11 = 1;
  }
  v23 = a1;
  v24 = -17;
  v25 = v13;
  v26 = a3;
  v27 = a1;
  v28 = v12;
  v29 = 0uLL;
  v30 = 0;
  v31 = a1 + 56;
  v32 = v11;
  a3 = 1;
  v33 = v5;
LABEL_14:
  if ((a2 & 2) == 0)
  {
    v14 = &v23 + 9 * a3;
    *v14 = *(unsigned int *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    v14[1] = 458735;
    a3 = (a3 + 1);
    v14[2] = a1;
    *((_DWORD *)v14 + 6) = 40;
    *(_OWORD *)((char *)v14 + 28) = 0u;
    *(_OWORD *)((char *)v14 + 44) = 0u;
    *((_DWORD *)v14 + 15) = 0;
    v14[8] = v5;
  }
  result = (id)_dispatch_kq_poll(a1, &v23, a3, &v23, a3, 0, 0, 3);
  if ((_DWORD)result)
  {
    v21 = DWORD1(v29);
    v22 = v25 & 0xBFFF;
    v25 &= ~0x4000u;
    LODWORD(v29) = DWORD1(v29);
    *(_QWORD *)((char *)&v29 + 4) = 0;
    if ((_DWORD)v29 != 105)
    {
      if (v21 != 34)
      {
        if (v21 == 2)
          _dispatch_event_loop_wake_owner_cold_4((uint64_t)&v23, v22);
        _dispatch_sync_ipc_handoff_begin_cold_1(v21);
      }
      _dispatch_event_loop_wake_owner_cold_5((uint64_t)&v23);
    }
    _dispatch_event_loop_cancel_waiter_cold_2((uint64_t)&v23);
  }
  v17 = (a2 & 1 | (2 * (a4 & 1))) - (v5 & 1);
  if (v17 >= 1 && *(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    v18 = (unsigned int *)(a1 + 8);
    do
    {
      v19 = __ldxr(v18);
      v20 = v19 - v17;
    }
    while (__stlxr(v20, v18));
    if (v20 <= 0)
    {
      if (v20 < 0)
        _os_object_allows_weak_reference_cold_1();
      return _os_object_dispose((void *)a1, v16);
    }
  }
  return result;
}

void _dispatch_event_loop_timer_arm(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v9 = a2 / 3uLL;
  v10 = *(_QWORD *)(a5 + 8 * v9);
  if (!v10)
  {
    v15 = 0;
    v16 = 0;
    mach_get_times(a5, a5 + 8, &v15);
    *(_QWORD *)(a5 + 16) = v16 + 1000000000 * v15;
    v10 = *(_QWORD *)(a5 + 8 * v9);
  }
  v11 = v10 + a3;
  if (_dispatch_timers_force_max_leeway == 1)
    v12 = 0;
  else
    v12 = a4;
  if (_dispatch_timers_force_max_leeway == 1)
    v13 = v11 + a4;
  else
    v13 = v11;
  _dispatch_event_loop_timer_program(a1, a2, v13, v12, 5);
  if (a2 - 6 <= 2 && _dispatch_mach_calendar_pred != -1)
    dispatch_once_f(&_dispatch_mach_calendar_pred, 0, (dispatch_function_t)_dispatch_mach_host_notify_update);
}

double _dispatch_event_loop_timer_program(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  uint64_t v6;
  int v7;
  double result;
  unint64_t v9;
  __int16 v10;
  __int16 v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 216);
  if (v6 == -4)
  {
    v7 = 0x2000000;
  }
  else if (*(_BYTE *)(a1 + 32 * a2 + 5))
  {
    v7 = (256 << (*(_BYTE *)(a1 + 32 * a2 + 5) - 1)) | 0xFF;
  }
  else
  {
    v7 = 255;
  }
  v9 = a2 | 0xFFFFFFFFFFFFFF00;
  v10 = -7;
  v11 = a5 | 0x10;
  v12 = v7;
  v13 = a1;
  v14 = _dispatch_timer_index_to_fflags[a2];
  v15 = 0;
  v16 = a3;
  v17 = 0;
  v19 = 0u;
  v18 = a4;
  *(_QWORD *)&result = _dispatch_kq_deferred_update(v6, (uint64_t)&v9).n128_u64[0];
  return result;
}

double _dispatch_event_loop_timer_delete(uint64_t a1, unsigned int a2)
{
  return _dispatch_event_loop_timer_program(a1, a2, 0, 0, 2);
}

char *_dispatch_source_proc_create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  char *result;

  v3 = a3;
  result = _dispatch_unote_create_with_handle(a1, a2, a3);
  if ((v3 & 0x4000000) != 0)
  {
    if (result)
      result[29] |= 4u;
  }
  return result;
}

char *_dispatch_source_vm_create(uint64_t a1, uint64_t a2)
{
  char *result;

  result = _dispatch_unote_create_without_handle((uint64_t)&_dispatch_source_type_memorystatus, a2, 2);
  if (result)
    result[29] |= 0x10u;
  return result;
}

BOOL _dispatch_mach_msg_sender_is_kernel(uint64_t a1)
{
  _DWORD *v1;

  v1 = (_DWORD *)(a1 + ((*(unsigned int *)(a1 + 4) + 3) & 0x1FFFFFFFCLL));
  if (*v1 || v1[1] <= 0x33u)
    _dispatch_mach_msg_sender_is_kernel_cold_1();
  return v1[10] == 0;
}

uint64_t _dispatch_get_mach_host_port()
{
  if (_dispatch_mach_host_port_pred != -1)
    dispatch_once_f(&_dispatch_mach_host_port_pred, 0, (dispatch_function_t)_dispatch_mach_host_port_init);
  return _dispatch_mach_host_port;
}

void _dispatch_mach_host_port_init()
{
  mach_port_t v0;
  kern_return_t special_port;
  int v2;
  kern_return_t v3;
  mach_port_t port;

  port = 0;
  v0 = mach_host_self();
  special_port = host_get_special_port(v0, -1, 1, &port);
  if (special_port == -301)
    _dispatch_sema4_create_slow_cold_2();
  v2 = special_port;
  if (special_port)
  {
    if (special_port != 4)
      _dispatch_bug(2859, special_port);
  }
  else
  {
    v3 = mach_port_deallocate(mach_task_self_, v0);
    if (v3 == -301)
      _dispatch_sema4_create_slow_cold_2();
    v2 = v3;
    v0 = port;
  }
  if (!v0)
    _dispatch_mach_host_port_init_cold_1(v2);
  _dispatch_mach_host_port = v0;
}

uint64_t _dispatch_mach_notify_port_deleted(uint64_t a1, uint64_t a2)
{
  _dispatch_mach_notify_merge(a2, 4, 1);
  return 0;
}

uint64_t _dispatch_mach_notify_merge(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v3 = _dispatch_sources[((unint64_t)result >> 8) & 0x3F];
  if (v3)
  {
    while (*(_QWORD *)(v3 + 24) != result || *(__int16 *)(v3 + 32) != -24)
    {
      v3 = *(_QWORD *)v3;
      if (!v3)
        return result;
    }
    *(_QWORD *)(v3 + 56) &= 0xFFFFFFFFFFFFFFF2;
    if ((a3 & 1) != 0 || (result = _dispatch_kevent_mach_notify_resume(v3, a2, 0), (result & 1) == 0))
    {
      *(_WORD *)(v3 + 34) |= 2u;
      v6 = 16;
    }
    else
    {
      v6 = 4;
    }
    *(_QWORD *)(v3 + 64) = 0;
    v7 = *(uint64_t **)(v3 + 16);
    if (v7)
    {
      do
      {
        v8 = (uint64_t *)*v7;
        if (*(_QWORD *)(v3 + 64))
          break;
        v9 = (_DWORD)v7[7] & a2;
        *((_BYTE *)v7 + 54) = 0;
        if ((a3 & 1) != 0 || (_DWORD)v9)
        {
          if (*(_DWORD *)(7 - v7[4]) != 0x7FFFFFFF)
          {
            v10 = (unsigned int *)(7 - v7[4]);
            do
              v11 = __ldxr(v10);
            while (__stxr(v11 + 2, v10));
            if (v11 <= 0)
            {
              qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
              __break(1u);
              return result;
            }
          }
          if (a3)
            _dispatch_unote_unregister_muxed(v7 + 3);
          v12 = v7[3];
          if ((_DWORD)v9 && *(_BYTE *)(v12 + 9) == 2)
          {
            v13 = (unint64_t *)(v7 + 12);
            do
              v14 = __ldxr(v13);
            while (__stxr(v14 | v9, v13));
          }
          result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, _QWORD))(v12 + 48))(v7 + 3, v6, v9, 0);
        }
        v7 = v8;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t _dispatch_mach_notify_dead_name(uint64_t a1, uint64_t a2)
{
  mach_port_name_t v2;

  v2 = a2;
  _dispatch_mach_notify_merge(a2, 1, 1);
  if (mach_port_deallocate(mach_task_self_, v2) == -301)
    _dispatch_sema4_create_slow_cold_2();
  return 0;
}

uint64_t _dispatch_mach_notify_send_possible(uint64_t a1, uint64_t a2)
{
  _dispatch_mach_notify_merge(a2, 8, 0);
  return 0;
}

uint64_t _dispatch_mach_notification_set_armed(uint64_t result)
{
  uint64_t v1;
  uint64_t *i;

  v1 = *(_QWORD *)(result - 8);
  if (v1)
  {
    *(_QWORD *)(v1 + 64) = 1;
    for (i = *(uint64_t **)(v1 + 16); i; i = (uint64_t *)*i)
      *((_BYTE *)i + 54) = 1;
  }
  return result;
}

char *_dispatch_source_mach_send_create(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 <= 1)
    a3 = 1;
  if (!a2)
    a2 = 0xFFFFFFFFLL;
  return _dispatch_unote_create_with_handle(a1, a2, a3);
}

uint64_t _dispatch_mach_send_update(uint64_t a1)
{
  int v1;
  int v2;

  v1 = *(_DWORD *)(a1 + 48);
  if ((*(_WORD *)(a1 + 34) & 2) != 0)
  {
    v2 = 0;
  }
  else
  {
    v2 = *(_DWORD *)(a1 + 48);
    v1 = 0;
  }
  return _dispatch_kevent_mach_notify_resume(a1, v2, v1);
}

char *_dispatch_mach_send_create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *result;

  result = _dispatch_unote_create_without_handle(a1, a2, a3);
  if (result)
  {
    *((_DWORD *)result + 22) = 0x80000000;
    *((_QWORD *)result + 7) = 0;
  }
  return result;
}

void _dispatch_mach_notification_event(uint64_t a1)
{
  uint64_t v1;

  v1 = *(unsigned int *)(a1 + 24);
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected non message event";
  qword_61258 = v1;
  __break(1u);
}

void _dispatch_mach_notification_merge_msg(uint64_t a1, int a2, mach_msg_header_t *a3)
{
  int v6;
  uint64_t v8;
  _OWORD v9[2];
  int v10;

  v10 = 0;
  memset(v9, 0, sizeof(v9));
  if (a3->msgh_id > 77 || _dispatch_mach_msg_sender_is_kernel((uint64_t)a3))
  {
    v6 = libdispatch_internal_protocol_server(a3, (uint64_t)v9);
    if (v6 || v10 != -303)
    {
      if (v6)
      {
        if (v10 == -305 || v10 == 0)
          goto LABEL_13;
        _dispatch_bug(2806, v10);
        if (v10 == -305 || !v10)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((a3->msgh_id & 0xFFFFFFFE) == 0x3B6)
    {
      byte_65AF7 |= 2u;
      byte_65B17 |= 2u;
      byte_65B37 |= 2u;
      byte_65A36 |= 0x87u;
      _dispatch_mach_host_notify_update();
      v10 = 0;
      goto LABEL_13;
    }
    v8 = 2805;
  }
  else
  {
    v8 = 2790;
  }
  _dispatch_bug(v8, 0);
LABEL_18:
  mach_msg_destroy(a3);
LABEL_13:
  if ((a2 & 0x10000) != 0)
    free(a3);
  _dispatch_unote_resume(a1);
}

uint64_t _dispatch_mach_recv_direct_merge_evt(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4)
{
  if (((unsigned __int16)a2 & 0x200) != 0)
    _dispatch_mach_recv_direct_merge_evt_cold_1();
  return _dispatch_source_merge_evt(a1, a2, a3, a4);
}

void _dispatch_mach_reply_merge_evt(uint64_t a1, uint64_t a2, int a3)
{
  if ((a2 & 0x200) == 0)
  {
    qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected event";
    qword_61258 = a3 | (unint64_t)(a2 << 32);
    __break(1u);
  }
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected EV_VANISHED (do not destroy random mach ports)";
  __break(1u);
}

uint64_t _dispatch_kevent_workloop_override_self(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  signed int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *(_QWORD *)(result + 24);
  *(_BYTE *)(result + 45) &= ~2u;
  v4 = (unsigned int *)*(unsigned int *)(*(_QWORD *)(v3 + 24) + 84);
  if ((v4 & 0x8000000) != 0)
    goto LABEL_17;
  v6 = (v4 >> 8) & 0xF;
  if (v6 <= (BYTE4(a2) & 7u))
    v6 = BYTE4(a2) & 7;
  v13 = v3;
  if (v6 <= 1)
    LOBYTE(v6) = 1;
  v14 = 393199;
  v15 = v4 & 0x80000000 | (256 << (v6 - 1)) | 0xFF;
  v16 = v3;
  if ((a2 & 2) != 0)
    v7 = 401;
  else
    v7 = 273;
  v17 = v7;
  v18 = 0uLL;
  v19 = 0;
  v20 = v3 + 56;
  v21 = a2 & 2 | 0x3700000001;
  v22 = a2;
  result = _dispatch_kq_poll(v3, &v13, 1, &v13, 1, 0, 0, 3);
  if ((_DWORD)result)
  {
LABEL_18:
    v11 = DWORD1(v18);
    v12 = HIWORD(v14) & 0xBFFF;
    HIWORD(v14) &= ~0x4000u;
    LODWORD(v18) = DWORD1(v18);
    *(_QWORD *)((char *)&v18 + 4) = 0;
    if ((_DWORD)v18 != 105)
    {
      if (v11 == 34)
      {
LABEL_23:
        v11 = v15;
        qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Broken priority";
        qword_61258 = v15;
        __break(1u);
        goto LABEL_24;
      }
      if (v11 != 2)
      {
LABEL_24:
        qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
        qword_61258 = v11;
        __break(1u);
        return result;
      }
      qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
      qword_61258 = ((unint64_t)v17 << 32) | (v12 << 16) | 2;
      __break(1u);
    }
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid workloop owner, possible memory corruption";
    qword_61258 = v22;
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) != 0 && *(_DWORD *)(v3 + 8) != 0x7FFFFFFF)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v8 = __ldxr(v4);
      v9 = __OFSUB__(v8, 2);
      v10 = v8 - 2;
    }
    while (__stlxr(v10, v4));
    if ((v10 < 0) ^ v9 | (v10 == 0))
    {
      qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
LABEL_17:
      qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Waking up a kq with cooperative thread request is not supported";
      qword_61258 = (uint64_t)v4;
      __break(1u);
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t _dispatch_kevent_workloop_poke_drain(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  unint64_t v16;
  int v17;
  uint64_t v18;

  v1 = *(unsigned int *)(result + 24);
  if ((v1 & 0x80000000) != 0)
    return result;
  v2 = result;
  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  result = *(_QWORD *)(result + 16);
  v4 = *(unsigned __int16 *)(v2 + 10);
  if ((v4 & 0x4000) == 0)
  {
    if ((*(_BYTE *)(v3 + 45) & 1) != 0)
      return result;
    *(_BYTE *)(v3 + 45) |= 1u;
    if (*(_DWORD *)(result + 8) == 0x7FFFFFFF)
      goto LABEL_8;
    v5 = result + 8;
    do
    {
      v6 = __ldxr((unsigned int *)v5);
      v1 = (v6 + 1);
      LODWORD(v7) = __stxr(v1, (unsigned int *)v5);
    }
    while ((_DWORD)v7);
    if (v6 > 0)
      goto LABEL_8;
    goto LABEL_36;
  }
  v7 = *(_QWORD *)(v2 + 32);
  *(_DWORD *)(v2 + 28) = v7;
  v5 = *(_QWORD *)(v2 + 64);
  v4 &= ~0x4000uLL;
  *(_WORD *)(v2 + 10) = v4;
  *(_QWORD *)(v2 + 32) = 0;
  if ((_DWORD)v7 != 70)
  {
LABEL_37:
    switch((_DWORD)v7)
    {
      case 0x69:
LABEL_42:
        qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid workloop owner, possible memory corruption";
        qword_61258 = v5;
        __break(1u);
        goto LABEL_43;
      case 0x22:
LABEL_43:
        v18 = *(int *)(v2 + 12);
        qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Broken priority";
        qword_61258 = v18;
        __break(1u);
        goto LABEL_44;
      case 2:
        qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
        qword_61258 = (v4 << 16) | (v1 << 32) | 2;
        __break(1u);
        break;
    }
LABEL_41:
    v5 = (int)v7;
    qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
    qword_61258 = (int)v7;
    __break(1u);
    goto LABEL_42;
  }
  if ((v1 & 0x100) != 0 || !*(_QWORD *)(v2 + 48) || !*(_QWORD *)(v2 + 56))
    goto LABEL_41;
  if ((v5 & 0x2000000000) == 0)
    return result;
  if ((v5 & 1) == 0)
  {
    v10 = 0;
    v11 = 1;
    v12 = 7;
    v13 = 1;
    goto LABEL_30;
  }
  if ((v5 & 0xFFFFFFFC) != 0)
  {
    v3 = *(unsigned int *)(*(_QWORD *)(result + 24) + 84);
    if ((v3 & 0x8000000) != 0)
    {
LABEL_44:
      qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Waking up a kq with cooperative thread request is not supported";
      qword_61258 = v3;
      __break(1u);
      return result;
    }
    v14 = (v3 >> 8) & 0xF;
    if (v14 <= (BYTE4(v5) & 7u))
      v14 = BYTE4(v5) & 7;
    if (v14 <= 1)
      LOBYTE(v14) = 1;
    v16 = v5 & 2;
    v15 = v16 == 0;
    v11 = v16 | 0x3700000001;
    v10 = v3 & 0x80000000 | (256 << (v14 - 1)) | 0xFF;
    if (v15)
      v13 = 273;
    else
      v13 = 401;
    v12 = 5;
LABEL_30:
    *(_QWORD *)v2 = result;
    *(_WORD *)(v2 + 8) = -17;
    *(_WORD *)(v2 + 10) = v12;
    *(_DWORD *)(v2 + 12) = v10;
    *(_DWORD *)(v2 + 24) = v13;
    *(_QWORD *)(v2 + 28) = 0;
    *(_QWORD *)(v2 + 36) = 0;
    *(_DWORD *)(v2 + 44) = 0;
    *(_QWORD *)(v2 + 48) = result + 56;
    *(_QWORD *)(v2 + 56) = v11;
    return _dispatch_kq_deferred_update();
  }
  *(_BYTE *)(v3 + 45) |= 1u;
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    v5 = result + 8;
    do
    {
      v17 = __ldxr((unsigned int *)v5);
      v1 = (v17 + 1);
      LODWORD(v7) = __stxr(v1, (unsigned int *)v5);
    }
    while ((_DWORD)v7);
    if (v17 <= 0)
    {
      qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
LABEL_36:
      qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
      goto LABEL_37;
    }
  }
LABEL_8:
  *(_QWORD *)v3 = *(_QWORD *)(result + 24);
  *(_QWORD *)(v3 + 8) = result;
  v8 = __clz(__rbit32((*(_DWORD *)(v2 + 12) >> 8) & 0x3FFF));
  if (((*(_DWORD *)(v2 + 12) >> 8) & 0x3FFF) != 0)
    v9 = v8 + 1;
  else
    v9 = 0;
  *(_DWORD *)(v3 + 16) = v9;
  return result;
}

void _dispatch_kevent_print_error(uint64_t a1)
{
  __int16 v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;

  v2 = *(_WORD *)(a1 + 10);
  if ((v2 & 2) != 0)
  {
    if ((*(_WORD *)(a1 + 10) & 0x100) != 0 && *(_QWORD *)(a1 + 32) == 36)
      return;
    v3 = 0;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 16);
    if ((v3 & 1) != 0)
    {
      v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
      v3 = 0;
      v2 |= *(_WORD *)(v4 + 34);
      goto LABEL_10;
    }
    if (v3 && !*(_QWORD *)(v3 + 16))
    {
      v2 |= 1u;
LABEL_10:
      *(_WORD *)(a1 + 10) = v2;
    }
  }
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    if (v5 == 34)
    {
      v11 = *(int *)(a1 + 12);
      qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Invalid kevent priority";
      qword_61258 = v11;
      __break(1u);
    }
    else
    {
      v6 = _evfiltstr(*(__int16 *)(a1 + 8));
      v7 = *(_QWORD *)(a1 + 16);
      v8 = "enable";
      if ((v2 & 4) == 0)
        v8 = "monitor";
      if ((v2 & 1) != 0)
        v9 = "add";
      else
        v9 = v8;
      if ((v2 & 2) != 0)
        v9 = "delete";
      if (v7)
        v10 = v9;
      else
        v10 = 0;
      _dispatch_bug_kevent_client("kevent", v6, v10, v5, *(_QWORD *)a1, v7, v3);
    }
  }
}

void _dispatch_kevent_mach_msg_drain(uint64_t a1)
{
  _DWORD *v1;
  _DWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  mach_error_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  mach_error_t v14;
  uint64_t v15;
  _BYTE v16[32];
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  int v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = v4;
  v6 = *(_QWORD **)(a1 + 16);
  v7 = *(unsigned int *)(a1 + 60);
  v8 = *(int *)(a1 + 12);
  v9 = *(unsigned __int16 *)(a1 + 10);
  v10 = *(_DWORD *)(a1 + 24);
  if (v10 != 268451844)
  {
    if (v10 == 268451848)
    {
      v17 = *(int *)(a1 + 12);
      v18 = v6;
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unable to copyout msg, possible port leak";
      qword_61258 = 268451848;
      __break(1u);
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 40);
      if (v11)
      {
        if (!v10)
        {
          if (*(_DWORD *)(a1 + 64))
            v12 = v4 + v11;
          else
            v12 = 0;
          _dispatch_kevent_mach_msg_recv(*(_QWORD **)(a1 + 16), v9, v11, v12, v7, v8);
          return;
        }
        goto LABEL_26;
      }
    }
    v17 = v8;
    v18 = v6;
    qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: EVFILT_MACHPORT with no message";
    qword_61258 = v10;
    __break(1u);
    goto LABEL_20;
  }
  if (!(_DWORD)v4)
  {
LABEL_20:
    v5 = 268451844;
    v17 = v8;
    v18 = v6;
    qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: EVFILT_MACHPORT with no message size";
    qword_61258 = 268451844;
    __break(1u);
LABEL_21:
    v17 = v8;
    v18 = v6;
    qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: EVFILT_MACHPORT with overlarge message";
    qword_61258 = v5;
    __break(1u);
    goto LABEL_22;
  }
  if (!*(_QWORD *)(a1 + 32))
  {
    qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: MACH_RCV_LARGE_IDENTITY with no identity";
    __break(1u);
    return;
  }
  if (v4 >= 0xFFFFFFBC)
    goto LABEL_21;
  v13 = v4 + 68;
  v1 = malloc_type_malloc((v4 + 68), 0xE77C1C11uLL);
  v2 = v16;
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  if (!__chkstk_darwin())
  {
LABEL_22:
    _dispatch_bug(3256, (uint64_t)v1);
    v13 = 0;
  }
  v22 = v1;
  v23 = 0;
  v24 = 0;
  v25 = v13;
  v26 = v2;
  v27 = 0;
  v28 = 0x2800000000;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v14 = mach_msg2();
  if (!v14)
  {
    if (*v2)
      v15 = (uint64_t)v2;
    else
      v15 = 0;
    _dispatch_kevent_mach_msg_recv(v6, v9 | 0x10000, (uint64_t)v1, v15, v7, v8);
    return;
  }
  v10 = v14;
  if (v14 == 268451844)
  {
    _dispatch_log("BUG in libdispatch client: _dispatch_kevent_mach_msg_drain: dropped message too large to fit in memory: id = 0x%x, size = %u", v1[5], *(_QWORD *)(a1 + 48));
    v10 = 0;
  }
  free(v1);
LABEL_26:
  if (v10)
    _dispatch_bug_mach_client("_dispatch_kevent_mach_msg_drain: message reception failed", v10);
}

_QWORD *_dispatch_kevent_merge_muxed(uint64_t a1)
{
  unint64_t v2;
  _QWORD *result;
  _QWORD *v4;

  v2 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_WORD *)(a1 + 10) & 0x12) != 0)
    *(_WORD *)(v2 + 34) |= 2u;
  result = *(_QWORD **)(v2 + 16);
  if (result)
  {
    do
    {
      v4 = (_QWORD *)*result;
      _dispatch_kevent_merge((uint64_t)(result + 3), a1);
      result = v4;
    }
    while (v4);
  }
  return result;
}

uint64_t _dispatch_kevent_merge(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unsigned int *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t *v13;
  unint64_t v14;
  __int16 v15;
  unint64_t v16;

  v5 = *(unsigned __int8 *)(*(_QWORD *)a1 + 9);
  if (*(_DWORD *)(7 - *(_QWORD *)(a1 + 8)) != 0x7FFFFFFF)
  {
    v6 = (unsigned int *)(7 - *(_QWORD *)(a1 + 8));
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if (v7 <= 0)
    {
      qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
LABEL_36:
      _dispatch_unote_unregister(a1, 5);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, *(unsigned __int16 *)(a2 + 10), v2, *(_DWORD *)(a2 + 12) & 0xFFFFFF);
    }
  }
  switch((int)v5)
  {
    case 0:
      v2 = *(_QWORD *)(a2 + 32);
      break;
    case 1:
      if (*(unsigned __int8 *)(a1 + 28) == 248)
        v2 = 2;
      else
        v2 = *(unsigned int *)(a2 + 24);
      break;
    case 2:
      v2 = (*(_DWORD *)(a1 + 32) & *(_DWORD *)(a2 + 24));
      if ((*(_BYTE *)(a1 + 29) & 4) != 0)
      {
        v10 = (unint64_t *)(a1 + 72);
        v11 = (*(_QWORD *)(a2 + 32) << 32) | v2;
        do
          v12 = __ldxr(v10);
        while (__stxr(v12 | (unint64_t)v11, v10));
      }
      else if (*(unsigned __int8 *)(a1 + 28) == 248)
      {
        v2 = 2;
        *(_QWORD *)(a1 + 72) = 2;
      }
      else if ((_DWORD)v2)
      {
        v13 = (unint64_t *)(a1 + 72);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 | v2, v13));
      }
      else
      {
        v2 = 0;
      }
      break;
    case 3:
      v2 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 72) = ~v2;
      break;
    case 4:
      v2 = *(_QWORD *)(a2 + 32);
      if (v2)
      {
        v8 = (unint64_t *)(a1 + 72);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + v2, v8));
      }
      break;
    default:
      qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Corrupt unote action";
      qword_61258 = v5;
      __break(1u);
      JUMPOUT(0x29164);
  }
  v15 = *(_WORD *)(a2 + 10);
  if ((v15 & 0x110) == 0x10)
    goto LABEL_36;
  if ((v15 & 2) != 0)
  {
    v16 = 2;
    goto LABEL_33;
  }
  if ((*(_WORD *)(a2 + 10) & 0x210) != 0)
  {
    v16 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL | 2;
LABEL_33:
    *(_QWORD *)(a1 + 16) = v16;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, *(unsigned __int16 *)(a2 + 10), v2, *(_DWORD *)(a2 + 12) & 0xFFFFFF);
  }
  if ((v15 & 0x80) != 0)
  {
    v16 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFELL;
    goto LABEL_33;
  }
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, *(unsigned __int16 *)(a2 + 10), v2, *(_DWORD *)(a2 + 12) & 0xFFFFFF);
}

const char *_evfiltstr(unsigned int a1)
{
  if (a1 < 0xFFFFFFE8)
    return "EVFILT_missing";
  else
    return off_58FB0[(int)a1 + 24];
}

uint64_t _dispatch_kevent_mach_msg_recv(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6;
  unsigned int *v13;
  int v14;
  unint64_t v15;

  v6 = *(_DWORD *)(a3 + 4);
  if (v6 >= 0xFFFFFFBC)
    _dispatch_kevent_mach_msg_recv_cold_1(*(_DWORD *)(a3 + 4));
  if (!*(_DWORD *)(a3 + 12))
    _dispatch_kevent_mach_msg_recv_cold_2(a3);
  if (*(_DWORD *)(7 - a1[1]) != 0x7FFFFFFF)
  {
    v13 = (unsigned int *)(7 - a1[1]);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if (v14 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  if ((a2 & 0x110) == 0x10)
  {
    _dispatch_unote_unregister((uint64_t)a1, 5);
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*a1 + 56))(a1, a2, a3, v6 + 68, a4, a5, a6);
  }
  if ((a2 & 2) != 0)
  {
    v15 = 2;
    goto LABEL_14;
  }
  if ((a2 & 0x210) != 0)
  {
    v15 = a1[2] & 0xFFFFFFFFFFFFFFFCLL | 2;
LABEL_14:
    a1[2] = v15;
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*a1 + 56))(a1, a2, a3, v6 + 68, a4, a5, a6);
  }
  if ((a2 & 0x80) != 0)
  {
    v15 = a1[2] & 0xFFFFFFFFFFFFFFFELL;
    goto LABEL_14;
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*a1 + 56))(a1, a2, a3, v6 + 68, a4, a5, a6);
}

uint64_t mach_msg2()
{
  return mach_msg2_internal();
}

uint64_t _dispatch_kq_init(_BYTE *a1)
{
  uint64_t v2;
  unint64_t StatusReg;
  uint64_t result;
  int v5;
  _QWORD v6[3];
  __int128 v7;
  __int128 v8;
  __int128 v9;

  if ((_dispatch_unsafe_fork & 1) == 0)
    _dispatch_fork_becomes_unsafe_slow();
  if (getenv("LIBDISPATCH_TIMERS_FORCE_MAX_LEEWAY"))
    _dispatch_timers_force_max_leeway = 1;
  *a1 = 1;
  _dispatch_kevent_workqueue_init();
  v2 = dword_64E60;
  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  v6[0] = 1;
  v6[1] = 0x20000000021FFF6;
  v6[2] = -8;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    result = kevent_qos(v2, v6, 1, 0, 0, 0, 0, 33);
    if ((_DWORD)result != -1)
      break;
    v5 = **(_DWORD **)(StatusReg + 8);
    if (v5 != 4)
      _dispatch_kq_init_cold_1(v5);
  }
  return result;
}

void _dispatch_memorypressure_create(uintptr_t mask)
{
  NSObject *v1;

  v1 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_memorystatus, 0, mask, (dispatch_queue_t)&_dispatch_mgr_q);
  dispatch_set_context(v1, v1);
  dispatch_source_set_event_handler_f(v1, (dispatch_function_t)_dispatch_memorypressure_handler);
  dispatch_activate(v1);
  if (_dispatch_memorypressure_source)
  {
    dispatch_source_cancel((dispatch_source_t)_dispatch_memorypressure_source);
    dispatch_release((dispatch_object_t)_dispatch_memorypressure_source);
  }
  _dispatch_memorypressure_source = (uint64_t)v1;
}

uint64_t _dispatch_memorypressure_handler(NSObject *a1)
{
  uintptr_t data;
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  data = dispatch_source_get_data(a1);
  if ((data & 0xF0000000) != 0
    && dispatch_source_get_mask((dispatch_source_t)_dispatch_memorypressure_source) != malloc_memorypressure_mask_msl_4libdispatch)
  {
    _dispatch_memorypressure_create(malloc_memorypressure_mask_msl_4libdispatch);
  }
  if ((data & 1) != 0)
  {
    _dispatch_memory_warn = 0;
    _dispatch_continuation_cache_limit = 112;
    v2 = _firehose_task_buffer;
    if (_firehose_task_buffer)
    {
      v3 = (unint64_t *)(_firehose_task_buffer + 512);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 & 0xFFFFFFFFFFFFFFFELL, v3));
      if ((v4 & 1) != 0)
        firehose_buffer_update_limits(v2);
    }
  }
  if ((data & 2) != 0)
  {
    _dispatch_memory_warn = 1;
    _dispatch_continuation_cache_limit = 16;
    v5 = _firehose_task_buffer;
    if (_firehose_task_buffer)
    {
      v6 = (unint64_t *)(_firehose_task_buffer + 512);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 | 1, v6));
      if (v7 != (v7 | 1))
        firehose_buffer_update_limits(v5);
    }
  }
  return malloc_memory_event_handler(data);
}

void _dispatch_mach_host_notify_update()
{
  host_t v0;
  kern_return_t v1;

  if (_dispatch_mach_host_port_pred != -1)
    dispatch_once_f(&_dispatch_mach_host_port_pred, 0, (dispatch_function_t)_dispatch_mach_host_port_init);
  v0 = _dispatch_mach_host_port;
  if (_dispatch_mach_notify_port_pred != -1)
    dispatch_once_f(&_dispatch_mach_notify_port_pred, 0, (dispatch_function_t)_dispatch_mach_notify_port_init);
  v1 = host_request_notification(v0, 1, _dispatch_mach_notify_port);
  if (v1 == -301)
    _dispatch_sema4_create_slow_cold_2();
  if (v1)
    _dispatch_bug(2893, v1);
}

void _dispatch_mach_notify_port_init()
{
  char *v0;
  kern_return_t v1;
  mach_port_options_t v2;

  v2.reserved[1] = 0;
  *(_OWORD *)&v2.flags = xmmword_40110;
  v1 = mach_port_construct(mach_task_self_, &v2, (mach_port_context_t)&_dispatch_mach_notify_port, (mach_port_name_t *)&_dispatch_mach_notify_port);
  if (v1)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: mach_port_construct() failed: cannot create receive right";
    qword_61258 = v1;
    __break(1u);
    goto LABEL_5;
  }
  v0 = _dispatch_unote_create_with_handle((uint64_t)&_dispatch_mach_type_notification, _dispatch_mach_notify_port, 0);
  *((_QWORD *)v0 + 1) = ~(unint64_t)&_dispatch_mgr_q;
  if ((_dispatch_unote_register((uint64_t)v0, -4, 0x2000000u) & 1) == 0)
LABEL_5:
    _dispatch_bug(2842, 0);
  _dispatch_mach_notify_unote = (uint64_t)v0;
}

uint64_t _dispatch_kevent_mach_notify_resume(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  _QWORD *v4;
  mach_port_name_t v5;
  uint64_t v6;
  uint64_t v7;
  mach_port_t v8;
  kern_return_t v9;
  kern_return_t v10;
  int v12;
  kern_return_t v13;
  uint64_t v15;
  char v16;
  mach_port_t previous;
  int v18;

  if (((a3 | a2) & 0xD) == 0)
    return 1;
  v4 = (_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(a1 + 24);
  v6 = (v3 | (*(_DWORD *)(a1 + 48) | a2) & 0xD) & (~a3 | 0xFFFFFFF2);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = v6 & 0xD;
  if ((v3 & 0xD) != 0 || !v7)
  {
    v12 = 0;
    if ((v3 & 0xD) == 0 || v7)
      return v12 == 0;
    previous = 0;
    v13 = mach_port_request_notification(mach_task_self_, v5, 66, 0, 0, 0x12u, &previous);
    v10 = 0;
    if (v13 > 0x11 || ((1 << v13) & 0x28011) == 0)
    {
      if (v13 == -301)
        _dispatch_sema4_create_slow_cold_2();
      _dispatch_bug(2966, v13);
      v10 = 0;
    }
    goto LABEL_17;
  }
  previous = 0;
  v8 = mach_task_self_;
  if (_dispatch_mach_notify_port_pred != -1)
    dispatch_once_f(&_dispatch_mach_notify_port_pred, 0, (dispatch_function_t)_dispatch_mach_notify_port_init);
  v9 = mach_port_request_notification(v8, v5, 66, 0, _dispatch_mach_notify_port, 0x15u, &previous);
  v10 = v9;
  if (v9 <= 14)
  {
    if (v9 == -301)
      _dispatch_sema4_create_slow_cold_2();
    if (!v9)
    {
      v12 = previous;
      if (!previous)
        return v12 == 0;
      v16 = _dispatch_kevent_mach_notify_resume_cold_3(previous, &previous, &v18);
      v12 = v18;
      if ((v16 & 1) == 0)
        return v12 == 0;
      v10 = 0;
      v15 = 2947;
      goto LABEL_31;
    }
  }
  else if (v9 == 15 || v9 == 17)
  {
    *v4 &= 0xFFFFFFF2uLL;
    goto LABEL_17;
  }
  _dispatch_kevent_mach_notify_resume_cold_1(v9, v4);
LABEL_17:
  if (!previous)
    goto LABEL_18;
  v12 = _dispatch_send_consume_send_once_right(previous);
  if (!v12)
    goto LABEL_18;
  v15 = 2976;
LABEL_31:
  _dispatch_bug(v15, v12);
LABEL_18:
  v12 = v10;
  return v12 == 0;
}

uint64_t voucher_adopt(uint64_t a1)
{
  unint64_t StatusReg;
  uint64_t v2;
  uint64_t v3;
  int v4;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v2 = *(_QWORD *)(StatusReg + 224);
  if (a1 != -3)
  {
    if (v2 == a1)
      return a1;
    *(_QWORD *)(StatusReg + 224) = a1;
    if (a1)
    {
      v3 = *(unsigned int *)(a1 + 32);
      if (v2)
      {
LABEL_5:
        v4 = *(_DWORD *)(v2 + 32);
LABEL_11:
        if ((_DWORD)v3 != -1 && (_DWORD)v3 != v4)
          _dispatch_set_priority_and_mach_voucher_slow(0, v3);
        return v2;
      }
    }
    else
    {
      v3 = 0;
      if (v2)
        goto LABEL_5;
    }
    v4 = 0;
    goto LABEL_11;
  }
  if (v2)
    os_retain(*(void **)(StatusReg + 224));
  return v2;
}

uint64_t voucher_copy()
{
  unint64_t StatusReg;
  uint64_t v1;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v1 = *(_QWORD *)(StatusReg + 224);
  if (v1)
    os_retain(*(void **)(StatusReg + 224));
  return v1;
}

_DWORD *voucher_copy_without_importance()
{
  _DWORD *result;

  result = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (result)
    return _voucher_create_without_importance(result);
  return result;
}

void *voucher_retain(void *a1)
{
  os_retain(a1);
  return a1;
}

void _voucher_dealloc_mach_voucher(mach_port_name_t a1)
{
  kern_return_t v1;

  v1 = mach_voucher_deallocate(a1);
  if (v1 == -301)
    _dispatch_sema4_create_slow_cold_2();
  if (v1)
    _dispatch_bug(302, v1);
}

uint64_t _voucher_task_mach_voucher_init()
{
  host_t mach_host_port;
  uint64_t result;
  ipc_voucher_t voucher;

  mach_host_port = _dispatch_get_mach_host_port();
  voucher = 0;
  result = host_create_mach_voucher(mach_host_port, _voucher_task_mach_voucher_init_task_create_recipe, 0x10u, &voucher);
  if ((_DWORD)result == -301)
    _dispatch_sema4_create_slow_cold_2();
  if ((_DWORD)result)
    _voucher_task_mach_voucher_init_cold_2(result);
  _voucher_default_task_mach_voucher = voucher;
  _voucher_task_mach_voucher = voucher;
  return result;
}

void voucher_replace_default_voucher()
{
  uint64_t v0;
  int v1;
  int v2;
  host_t mach_host_port;
  kern_return_t v4;
  ipc_voucher_t v5;
  int v6;
  mach_port_name_t v7;
  BOOL v8;
  uint8_t recipes[8];
  int v10;
  int v11;
  ipc_voucher_t voucher;

  if (_voucher_task_mach_voucher_pred != -1)
    dispatch_once_f(&_voucher_task_mach_voucher_pred, 0, (dispatch_function_t)_voucher_task_mach_voucher_init);
  v0 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (v0)
  {
    v1 = *(_DWORD *)(v0 + 32);
    if (v1)
    {
      v2 = *(_DWORD *)(v0 + 36);
      if (!v2)
        v2 = v1;
      *(_QWORD *)recipes = 0x100000003;
      v10 = v2;
      v11 = 0;
      mach_host_port = _dispatch_get_mach_host_port();
      voucher = 0;
      v4 = host_create_mach_voucher(mach_host_port, recipes, 0x10u, &voucher);
      if (v4 == -301)
        _dispatch_sema4_create_slow_cold_2();
      if (v4)
      {
        _dispatch_bug(362, v4);
      }
      else
      {
        v5 = voucher;
        if (voucher)
        {
          v6 = _voucher_default_task_mach_voucher;
          goto LABEL_13;
        }
      }
    }
  }
  v6 = _voucher_default_task_mach_voucher;
  v5 = _voucher_default_task_mach_voucher;
  do
LABEL_13:
    v7 = __ldxr((unsigned int *)&_voucher_task_mach_voucher);
  while (__stxr(v5, (unsigned int *)&_voucher_task_mach_voucher));
  if (v7)
    v8 = v7 == v6;
  else
    v8 = 1;
  if (!v8)
    _voucher_dealloc_mach_voucher(v7);
}

uint64_t _voucher_get_mach_voucher(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    result = *(unsigned int *)(result + 36);
    if (!(_DWORD)result)
    {
      result = *(unsigned int *)(v1 + 32);
      if (!(_DWORD)result)
      {
        if (_voucher_task_mach_voucher_pred != -1)
          dispatch_once_f(&_voucher_task_mach_voucher_pred, 0, (dispatch_function_t)_voucher_task_mach_voucher_init);
        return _voucher_task_mach_voucher;
      }
    }
  }
  return result;
}

_DWORD *_voucher_create_without_importance(_DWORD *object)
{
  _DWORD *v1;
  mach_port_name_t v2;
  host_t mach_host_port;
  kern_return_t v4;
  ipc_voucher_t v5;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  ipc_voucher_t voucher;
  uint8_t recipes[8];
  mach_port_name_t v12;
  __int128 v13;
  int v14;

  v1 = object;
  if (!object)
    return v1;
  if (!object[8] || (object[18] & 1) == 0)
    goto LABEL_12;
  if (object[9])
    v2 = object[9];
  else
    v2 = object[8];
  *(_QWORD *)recipes = 0x1FFFFFFFFLL;
  v12 = v2;
  v13 = xmmword_40140;
  v14 = 0;
  mach_host_port = _dispatch_get_mach_host_port();
  voucher = 0;
  v4 = host_create_mach_voucher(mach_host_port, recipes, 0x20u, &voucher);
  if (v4 == -301)
    _dispatch_sema4_create_slow_cold_2();
  if (v4)
  {
    _dispatch_bug(639, v4);
    goto LABEL_23;
  }
  v5 = voucher;
  if (!voucher)
  {
LABEL_23:
    if (v1[9])
      return 0;
    v5 = 0;
  }
  if (v5 == v2)
  {
    _voucher_dealloc_mach_voucher(v2);
LABEL_12:
    os_retain(v1);
    return v1;
  }
  v7 = _voucher_find_and_retain(v5);
  if (v7 && v1[9])
  {
    _voucher_dealloc_mach_voucher(v5);
    return (_DWORD *)v7;
  }
  else
  {
    v8 = _os_object_alloc_realized((objc_class *)OS_voucher, 80);
    v9 = v8;
    *((_OWORD *)v8 + 3) = *((_OWORD *)v1 + 3);
    *((_QWORD *)v8 + 8) = *((_QWORD *)v1 + 8);
    v8[8] = v5;
    if (v1[9])
    {
      v8[9] = v5;
      _voucher_insert((uint64_t)v8);
    }
    else if (v7)
    {
      *((_QWORD *)v8 + 5) = v7;
      _voucher_dealloc_mach_voucher(v5);
    }
    return v9;
  }
}

uint64_t _voucher_find_and_retain(unsigned int a1)
{
  unint64_t StatusReg;
  unsigned int v3;
  uint64_t v5;
  uint64_t i;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  if (!a1)
    return 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr((unsigned int *)&_voucher_hash_lock))
  {
    if (!__stxr(v3, (unsigned int *)&_voucher_hash_lock))
      goto LABEL_8;
  }
  __clrex();
  _dispatch_unfair_lock_lock_slow((uint64_t)&_voucher_hash_lock, 0x10000);
LABEL_8:
  for (i = *((_QWORD *)&_voucher_hash + ((a1 >> 8) & 0x3F)); ; i = *(_QWORD *)(15 - i))
  {
    v5 = ~i;
    if (i == -1)
      break;
    if (*(_DWORD *)(35 - i) == a1)
    {
      v7 = (unsigned int *)(11 - i);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      if ((v8 & 0x80000000) != 0)
        _voucher_find_and_retain_cold_1();
      if (!v8)
      {
        v9 = (unsigned int *)(v5 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      break;
    }
  }
  v11 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    v12 = __ldxr((unsigned int *)&_voucher_hash_lock);
  while (__stlxr(0, (unsigned int *)&_voucher_hash_lock));
  if (v12 != v11)
    _dispatch_unfair_lock_unlock_slow((uint64_t)&_voucher_hash_lock, v12);
  return v5;
}

uint64_t _voucher_insert(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t StatusReg;
  unsigned int v4;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  v1 = *(unsigned int *)(result + 36);
  if ((_DWORD)v1)
  {
    v2 = result;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v4 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    while (!__ldaxr((unsigned int *)&_voucher_hash_lock))
    {
      if (!__stxr(v4, (unsigned int *)&_voucher_hash_lock))
        goto LABEL_7;
    }
    __clrex();
    _dispatch_unfair_lock_lock_slow((uint64_t)&_voucher_hash_lock, 0x10000);
LABEL_7:
    if (*(_QWORD *)(v2 + 24))
      _voucher_insert_cold_3();
    v6 = *(_QWORD *)(v2 + 48);
    if (v6)
      _voucher_insert_cold_2(v6);
    result = *(_QWORD *)(v2 + 40);
    if (result)
      _voucher_insert_cold_1(result);
    v7 = (unint64_t *)&_voucher_hash + ((v1 >> 8) & 0x3F);
    v8 = *v7;
    *(_QWORD *)(v2 + 16) = *v7;
    if (v8 != -1)
      *(_QWORD *)(23 - v8) = ~(v2 + 16);
    *v7 = ~v2;
    *(_QWORD *)(v2 + 24) = ~(unint64_t)v7;
    v9 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    do
      v10 = __ldxr((unsigned int *)&_voucher_hash_lock);
    while (__stlxr(0, (unsigned int *)&_voucher_hash_lock));
    if (v10 != v9)
      return _dispatch_unfair_lock_unlock_slow((uint64_t)&_voucher_hash_lock, v10);
  }
  return result;
}

_DWORD *_voucher_create_with_mach_msgv(unsigned int *a1, unsigned int *a2)
{
  unsigned int v3;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t v10;

  v3 = *a1;
  if ((*a1 & 0x1F0000) == 0)
  {
    v6 = 0;
    v5 = 0;
    if (a2)
      goto LABEL_3;
LABEL_8:
    v10 = 0;
    v8 = 0;
    return _voucher_create_with_mach_voucher(v5, v6, v10, v8);
  }
  v5 = a1[4];
  a1[4] = 0;
  v6 = v3 & 0x201F0000;
  *a1 = v3 & 0xDFE0FFFF;
  if (!a2)
    goto LABEL_8;
LABEL_3:
  v7 = *a2;
  if (*a2 <= 7)
    _voucher_create_with_mach_msgv_cold_1(*a2);
  v8 = v7 - 8;
  v9 = a2 + 2;
  if (v7 == 8)
    v10 = 0;
  else
    v10 = (uint64_t)v9;
  return _voucher_create_with_mach_voucher(v5, v6, v10, v8);
}

_DWORD *_voucher_create_with_mach_voucher(unsigned int a1, int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;

  if (a1)
  {
    v8 = _voucher_find_and_retain(a1);
    if (v8)
    {
      v9 = (_DWORD *)v8;
      _voucher_dealloc_mach_voucher(a1);
    }
    else
    {
      v9 = _os_object_alloc_realized((objc_class *)OS_voucher, 80);
      v9[8] = a1;
      v9[9] = a1;
      *((_BYTE *)v9 + 72) = v9[18] & 0xFE | ((a2 & 0x20000000) != 0);
      _voucher_insert((uint64_t)v9);
    }
  }
  else
  {
    v9 = 0;
  }
  if (a4 >= 0x20 && *(_DWORD *)a3 == 59821818 && *(_QWORD *)(a3 + 8))
  {
    if (v9)
    {
      v10 = *((_QWORD *)v9 + 6);
      if (v10)
        _voucher_insert_cold_2(v10);
      v11 = *((_QWORD *)v9 + 5);
      if (v11)
        _voucher_insert_cold_1(v11);
      v12 = _os_object_alloc_realized((objc_class *)OS_voucher, 80);
      if (v9[8])
      {
        if (*((_QWORD *)v9 + 5))
          v13 = (_DWORD *)*((_QWORD *)v9 + 5);
        else
          v13 = v9;
        os_retain(v13);
        *((_QWORD *)v12 + 5) = v13;
        v12[8] = v13[8];
        *((_BYTE *)v12 + 72) = v12[18] & 0xFE | v13[18] & 1;
      }
      os_release(v9);
    }
    else
    {
      v12 = _os_object_alloc_realized((objc_class *)OS_voucher, 80);
    }
    *((_OWORD *)v12 + 3) = *(_OWORD *)(a3 + 8);
    *((_QWORD *)v12 + 8) = *(_QWORD *)(a3 + 24);
    return v12;
  }
  return v9;
}

_DWORD *voucher_create_with_mach_msg(unsigned int *a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;

  v1 = *a1;
  if ((*a1 & 0x1F0000) != 0)
  {
    v3 = a1[4];
    a1[4] = 0;
    v4 = v1 & 0x201F0000;
    *a1 = v1 & 0xDFE0FFFF;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  return _voucher_create_with_mach_voucher(v3, v4, 0, 0);
}

void voucher_decrement_importance_count4CF(uint64_t a1)
{
  ipc_voucher_t v1;
  kern_return_t v2;
  mach_msg_type_number_t out_contentCnt;
  uint8_t in_content[4];

  if (a1 && *(_DWORD *)(a1 + 32) && (*(_BYTE *)(a1 + 72) & 1) != 0)
  {
    v1 = *(_DWORD *)(a1 + 36) ? *(_DWORD *)(a1 + 36) : *(_DWORD *)(a1 + 32);
    *(_DWORD *)in_content = 1;
    out_contentCnt = 0;
    v2 = mach_voucher_attr_command(v1, 2u, 2u, in_content, 4u, 0, &out_contentCnt);
    if (v2 != 16)
    {
      if (v2 == -301)
        _dispatch_sema4_create_slow_cold_2();
      if (v2)
        voucher_decrement_importance_count4CF_cold_1(v2, v2);
    }
  }
}

char *_voucher_xref_dispose(char *result, const char *a2)
{
  char *v2;
  int v3;
  unint64_t StatusReg;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  int v11;

  v2 = result;
  if (*((_QWORD *)result + 3))
  {
    v3 = *((_DWORD *)result + 9);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v5 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    while (!__ldaxr((unsigned int *)&_voucher_hash_lock))
    {
      if (!__stxr(v5, (unsigned int *)&_voucher_hash_lock))
        goto LABEL_7;
    }
    __clrex();
    result = (char *)_dispatch_unfair_lock_lock_slow((uint64_t)&_voucher_hash_lock, 0x10000);
LABEL_7:
    if (!v3)
      _voucher_insert_cold_3();
    if (*((int *)v2 + 3) <= 0)
    {
      v7 = *((_QWORD *)v2 + 3);
      if (v7)
      {
        v8 = *((_QWORD *)v2 + 2);
        if (v8 != -1)
          *(_QWORD *)(23 - v8) = v7;
        *(_QWORD *)~v7 = v8;
        *((_OWORD *)v2 + 1) = xmmword_40150;
      }
    }
    v9 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    do
      a2 = (const char *)__ldxr((unsigned int *)&_voucher_hash_lock);
    while (__stlxr(0, (unsigned int *)&_voucher_hash_lock));
    if ((_DWORD)a2 != v9)
      result = (char *)_dispatch_unfair_lock_unlock_slow((uint64_t)&_voucher_hash_lock, a2);
  }
  if (*((_DWORD *)v2 + 2) != 0x7FFFFFFF)
  {
    v10 = (unsigned int *)(v2 + 8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (v11 <= 1)
    {
      if (v11 != 1)
        _os_object_allows_weak_reference_cold_1();
      return (char *)_os_object_dispose(v2, a2);
    }
  }
  return result;
}

void _voucher_dispose(uint64_t a1)
{
  mach_port_name_t v2;
  mach_port_name_t v3;
  void *v4;

  if (*(_QWORD *)(a1 + 24))
    _voucher_insert_cold_3();
  *(_OWORD *)(a1 + 16) = xmmword_40150;
  v2 = *(_DWORD *)(a1 + 36);
  if (v2)
  {
    if (v2 != *(_DWORD *)(a1 + 32))
      _voucher_dealloc_mach_voucher(v2);
    *(_DWORD *)(a1 + 36) = 0;
  }
  v3 = *(_DWORD *)(a1 + 32);
  if (v3)
  {
    if (!*(_QWORD *)(a1 + 40))
      _voucher_dealloc_mach_voucher(v3);
    *(_DWORD *)(a1 + 32) = 0;
  }
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    os_release(v4);
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
}

void _voucher_activity_debug_channel_init()
{
  uint64_t v0;
  kern_return_t v1;
  NSObject *f;
  mach_port_t special_port;

  if (_voucher_libtrace_hooks)
  {
    v0 = *(_QWORD *)(_voucher_libtrace_hooks + 16);
    if (v0)
    {
      special_port = 0;
      v1 = task_get_special_port(mach_task_self_, 10, &special_port);
      if (v1)
      {
        if (v1 == -301)
          _dispatch_sema4_create_slow_cold_2();
        _voucher_activity_debug_channel_init_cold_1(v1);
      }
      if (special_port)
      {
        f = dispatch_mach_create_f((uint64_t)"com.apple.debug-channel", 0, 0, v0);
        *((_BYTE *)f[11].isa + 29) &= ~0x20u;
        dispatch_mach_connect(f, special_port, 0, 0);
        _voucher_activity_debug_channel = (uint64_t)f;
      }
    }
  }
}

uint64_t _voucher_atfork_prepare()
{
  unsigned int v0;
  uint64_t result;

  v0 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFC;
  while (!__ldaxr((unsigned int *)&_voucher_hash_lock))
  {
    if (!__stxr(v0, (unsigned int *)&_voucher_hash_lock))
      return result;
  }
  __clrex();
  return _dispatch_unfair_lock_lock_slow((uint64_t)&_voucher_hash_lock, 0x10000);
}

uint64_t _voucher_atfork_parent()
{
  unsigned int v0;
  unsigned int v1;
  uint64_t result;

  v0 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFC;
  do
    v1 = __ldxr((unsigned int *)&_voucher_hash_lock);
  while (__stlxr(0, (unsigned int *)&_voucher_hash_lock));
  if (v1 != v0)
    return _dispatch_unfair_lock_unlock_slow((uint64_t)&_voucher_hash_lock, v1);
  return result;
}

__n128 _voucher_atfork_child()
{
  uint64_t i;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;

  for (i = 0; i != 64; ++i)
  {
    while (1)
    {
      v1 = *((_QWORD *)&_voucher_hash + i);
      if (v1 == -1)
        break;
      v2 = ~v1;
      *(_QWORD *)(v2 + 32) = 0;
      v3 = *(_QWORD *)(v2 + 16);
      v4 = *(_QWORD *)(v2 + 24);
      if (v3 != -1)
        *(_QWORD *)(23 - v3) = v4;
      *(_QWORD *)~v4 = v3;
      *(_OWORD *)(v2 + 16) = xmmword_40150;
    }
  }
  result.n128_u64[0] = -1;
  result.n128_u64[1] = -1;
  xmmword_659B0 = (__int128)result;
  unk_659C0 = result;
  xmmword_65990 = (__int128)result;
  unk_659A0 = result;
  xmmword_65970 = (__int128)result;
  unk_65980 = result;
  xmmword_65950 = (__int128)result;
  unk_65960 = result;
  xmmword_65930 = (__int128)result;
  unk_65940 = result;
  xmmword_65910 = (__int128)result;
  unk_65920 = result;
  xmmword_658F0 = (__int128)result;
  unk_65900 = result;
  xmmword_658D0 = (__int128)result;
  unk_658E0 = result;
  xmmword_658B0 = (__int128)result;
  unk_658C0 = result;
  xmmword_65890 = (__int128)result;
  unk_658A0 = result;
  xmmword_65870 = (__int128)result;
  unk_65880 = result;
  xmmword_65850 = (__int128)result;
  unk_65860 = result;
  xmmword_65830 = (__int128)result;
  unk_65840 = result;
  xmmword_65810 = (__int128)result;
  unk_65820 = result;
  xmmword_657F0 = (__int128)result;
  unk_65800 = result;
  _voucher_hash = (__int128)result;
  unk_657E0 = result;
  _voucher_hash_lock = 0;
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224) = 0;
  _voucher_task_mach_voucher_pred = 0;
  _voucher_task_mach_voucher = 0;
  _voucher_default_task_mach_voucher = 0;
  _voucher_aid_next = 0;
  _firehose_task_buffer_pred = 0;
  _firehose_task_buffer = 0;
  return result;
}

uint64_t voucher_process_can_use_arbitrary_personas()
{
  if (_voucher_process_can_use_arbitrary_personas_pred != -1)
    dispatch_once_f(&_voucher_process_can_use_arbitrary_personas_pred, 0, (dispatch_function_t)_voucher_process_can_use_arbitrary_personas_init);
  return _voucher_process_can_use_arbitrary_personas;
}

uint64_t _voucher_process_can_use_arbitrary_personas_init()
{
  uint64_t result;
  uint8_t out_content[4];
  mach_msg_type_number_t out_contentCnt;

  if (_voucher_task_mach_voucher_pred != -1)
    dispatch_once_f(&_voucher_task_mach_voucher_pred, 0, (dispatch_function_t)_voucher_task_mach_voucher_init);
  *(_DWORD *)out_content = 0;
  out_contentCnt = 4;
  result = mach_voucher_attr_command(_voucher_task_mach_voucher, 3u, 4u, 0, 0, out_content, &out_contentCnt);
  if ((_DWORD)result)
    _voucher_process_can_use_arbitrary_personas_init_cold_1(result);
  _voucher_process_can_use_arbitrary_personas = *(_DWORD *)out_content != 0;
  return result;
}

uint64_t voucher_copy_with_persona_mach_voucher(int a1)
{
  uint64_t v1;
  mach_port_name_t v2;
  host_t mach_host_port;
  kern_return_t v4;
  kern_return_t v5;
  ipc_voucher_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  ipc_voucher_t voucher;
  uint8_t recipes[8];
  mach_port_name_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;

  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (!a1)
  {
    if (!v1)
      return v1;
    goto LABEL_13;
  }
  if (v1)
  {
    v2 = *(_DWORD *)(v1 + 36);
    if (!v2)
      v2 = *(_DWORD *)(v1 + 32);
  }
  else
  {
    v2 = 0;
  }
  *(_QWORD *)recipes = 0x1FFFFFFFFLL;
  v13 = v2;
  v14 = 0x300000000;
  v15 = 10;
  v16 = a1;
  v17 = 0;
  mach_host_port = _dispatch_get_mach_host_port();
  voucher = 0;
  v4 = host_create_mach_voucher(mach_host_port, recipes, 0x20u, &voucher);
  if (v4 == -301)
    _dispatch_sema4_create_slow_cold_2();
  v5 = v4;
  if (!v4)
  {
    v6 = voucher;
    if (voucher == v2)
    {
      if (v2)
        _voucher_dealloc_mach_voucher(v2);
      goto LABEL_13;
    }
LABEL_18:
    v7 = _voucher_find_and_retain(v6);
    if (v7)
    {
      if (!v1 || *(_DWORD *)(v1 + 36))
      {
        _voucher_dealloc_mach_voucher(v6);
        return v7;
      }
      v9 = _os_object_alloc_realized((objc_class *)OS_voucher, 80);
    }
    else
    {
      v8 = _os_object_alloc_realized((objc_class *)OS_voucher, 80);
      v9 = v8;
      if (!v1)
      {
        v8[8] = v6;
        goto LABEL_26;
      }
    }
    *((_OWORD *)v9 + 3) = *(_OWORD *)(v1 + 48);
    *((_QWORD *)v9 + 8) = *(_QWORD *)(v1 + 64);
    v9[8] = v6;
    if (!*(_DWORD *)(v1 + 36))
    {
      if (v7)
      {
        *((_QWORD *)v9 + 5) = v7;
        _voucher_dealloc_mach_voucher(v6);
      }
      return (uint64_t)v9;
    }
LABEL_26:
    v9[9] = v6;
    _voucher_insert((uint64_t)v9);
    return (uint64_t)v9;
  }
  _dispatch_bug(944, v4);
  if (v5 == 20)
    return -1;
  if (v2)
  {
    v6 = 0;
    goto LABEL_18;
  }
LABEL_13:
  os_retain((void *)v1);
  return v1;
}

uint64_t mach_voucher_persona_self(ipc_voucher_t *a1)
{
  host_t mach_host_port;
  uint64_t v3;
  uint64_t v4;
  ipc_voucher_t v5;
  ipc_voucher_t voucher;
  uint8_t recipes[16];
  __int128 v9;

  *(_OWORD *)recipes = xmmword_40190;
  v9 = unk_401A0;
  mach_host_port = _dispatch_get_mach_host_port();
  voucher = 0;
  v3 = host_create_mach_voucher(mach_host_port, recipes, 0x20u, &voucher);
  if ((_DWORD)v3 == -301)
    _dispatch_sema4_create_slow_cold_2();
  v4 = v3;
  if ((_DWORD)v3)
  {
    _dispatch_bug(1000, (int)v3);
    v5 = 0;
  }
  else
  {
    v5 = voucher;
  }
  *a1 = v5;
  return v4;
}

uint64_t mach_voucher_persona_for_originator(int a1, int a2, uint64_t a3, ipc_voucher_t *a4)
{
  host_t mach_host_port;
  uint64_t result;
  ipc_voucher_t v7;
  ipc_voucher_t voucher;
  uint8_t recipes[8];
  int v10;
  __int128 v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;

  *(_QWORD *)recipes = 0x100000003;
  v10 = a2;
  v11 = xmmword_40160;
  v12 = 16;
  v13 = a1;
  v14 = 0;
  v15 = a3;
  mach_host_port = _dispatch_get_mach_host_port();
  voucher = 0;
  result = host_create_mach_voucher(mach_host_port, recipes, 0x30u, &voucher);
  if ((_DWORD)result == -301)
    _dispatch_sema4_create_slow_cold_2();
  v7 = voucher;
  if ((_DWORD)result)
    v7 = 0;
  *a4 = v7;
  return result;
}

uint64_t voucher_get_current_persona()
{
  unint64_t StatusReg;
  uint64_t v1;
  ipc_voucher_t v2;
  ipc_voucher_t v3;
  ipc_voucher_t v4;
  kern_return_t v5;
  int v7;
  uint8_t out_content[4];
  mach_msg_type_number_t out_contentCnt;

  *(_DWORD *)out_content = -1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v1 = *(_QWORD *)(StatusReg + 224);
  if (v1)
  {
    v2 = *(_DWORD *)(v1 + 32);
    if (v2)
    {
      v3 = *(_DWORD *)(v1 + 36);
      if (v3)
        v4 = v3;
      else
        v4 = v2;
      out_contentCnt = 4;
      v5 = mach_voucher_attr_command(v4, 3u, 3u, 0, 0, out_content, &out_contentCnt);
      if (v5 > 0x2E || ((1 << v5) & 0x400000040011) == 0)
      {
        _dispatch_bug(1103, v5);
      }
      else if (!v5)
      {
        return *(unsigned int *)out_content;
      }
    }
  }
  if ((kpersona_get(out_content) & 0x80000000) != 0)
  {
    v7 = **(_DWORD **)(StatusReg + 8);
    if (v7 != 3 && v7 != 0)
      _dispatch_bug(1126, v7);
  }
  return *(unsigned int *)out_content;
}

double voucher_get_current_persona_originator_info(_OWORD *a1)
{
  double result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v8 = 0u;
  v9 = 0u;
  v6 = 0u;
  v7 = 0u;
  v4 = 0u;
  v5 = 0u;
  if (!_voucher_get_current_persona_token((mach_voucher_attr_content_t)&v4))
  {
    v3 = v5;
    *a1 = v4;
    a1[1] = v3;
    result = *(double *)&v6;
    a1[2] = v6;
  }
  return result;
}

uint64_t _voucher_get_current_persona_token(mach_voucher_attr_content_t out_content)
{
  uint64_t v1;
  ipc_voucher_t v2;
  ipc_voucher_t v4;
  ipc_voucher_t v5;
  uint64_t result;
  uint64_t v8;
  mach_msg_type_number_t out_contentCnt;

  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (!v1)
    return 5;
  v2 = *(_DWORD *)(v1 + 32);
  if (!v2)
    return 5;
  v4 = *(_DWORD *)(v1 + 36);
  if (v4)
    v5 = v4;
  else
    v5 = v2;
  out_contentCnt = 96;
  result = mach_voucher_attr_command(v5, 3u, 2u, 0, 0, out_content, &out_contentCnt);
  if (result > 0x2E || ((1 << result) & 0x400000040011) == 0)
  {
    v8 = result;
    _dispatch_bug(1075, (int)result);
    return v8;
  }
  return result;
}

double voucher_get_current_persona_proximate_info(_OWORD *a1)
{
  double result;
  __int128 v3;
  _OWORD v4[3];
  __int128 v5;
  __int128 v6;
  double v7[3];

  v6 = 0u;
  *(_OWORD *)v7 = 0u;
  v5 = 0u;
  memset(v4, 0, sizeof(v4));
  if (!_voucher_get_current_persona_token((mach_voucher_attr_content_t)v4))
  {
    v3 = v6;
    *a1 = v5;
    a1[1] = v3;
    result = v7[0];
    a1[2] = *(_OWORD *)v7;
  }
  return result;
}

BOOLean_t voucher_mach_msg_set(mach_msg_header_t *msg)
{
  uint64_t v2;
  mach_port_name_t mach_voucher;
  mach_msg_bits_t msgh_bits;

  if ((msg->msgh_bits & 0x1F0000) != 0)
    return 0;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (v2)
  {
    mach_voucher = _voucher_get_mach_voucher(v2);
  }
  else
  {
    if (_voucher_task_mach_voucher_pred != -1)
      dispatch_once_f(&_voucher_task_mach_voucher_pred, 0, (dispatch_function_t)_voucher_task_mach_voucher_init);
    mach_voucher = _voucher_task_mach_voucher;
  }
  msgh_bits = msg->msgh_bits;
  if (!mach_voucher || (msg->msgh_bits & 0x1F0000) != 0)
    return 0;
  msg->msgh_voucher_port = mach_voucher;
  msg->msgh_bits = msgh_bits | 0x130000;
  return 1;
}

void voucher_mach_msg_clear(mach_msg_header_t *msg)
{
  mach_msg_bits_t msgh_bits;
  mach_msg_bits_t v3;
  mach_port_name_t msgh_voucher_port;

  msgh_bits = msg->msgh_bits;
  v3 = HIWORD(msg->msgh_bits) & 0x1F;
  msgh_voucher_port = msg->msgh_voucher_port;
  if ((v3 == 17 || v3 == 19) && msgh_voucher_port != 0)
  {
    if (v3 == 17)
    {
      _voucher_dealloc_mach_voucher(msgh_voucher_port);
      msgh_bits = msg->msgh_bits;
    }
    msg->msgh_voucher_port = 0;
    msg->msgh_bits = msgh_bits & 0xFFE0FFFF;
  }
}

voucher_mach_msg_state_t voucher_mach_msg_adopt(mach_msg_header_t *msg)
{
  mach_msg_bits_t msgh_bits;
  mach_port_name_t msgh_voucher_port;
  int v4;
  unint64_t StatusReg;
  unsigned int *v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;

  msgh_bits = msg->msgh_bits;
  if ((msg->msgh_bits & 0x1F0000) == 0)
    return (voucher_mach_msg_state_t)-1;
  msgh_voucher_port = msg->msgh_voucher_port;
  msg->msgh_voucher_port = 0;
  msg->msgh_bits = msgh_bits & 0xDFE0FFFF;
  if (!msgh_voucher_port)
    return (voucher_mach_msg_state_t)-1;
  v4 = msgh_bits & 0x201F0000;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = *(unsigned int **)(StatusReg + 984);
  if (v6)
  {
    v9 = *v6;
    v7 = v6 + 2;
    v8 = v9;
    v10 = v9 - 8;
    if (v9 == 8)
      v7 = 0;
    if (v8 <= 7)
      v11 = 0;
    else
      v11 = (uint64_t)v7;
    if (v8 <= 7)
      v12 = 0;
    else
      v12 = v10;
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v15 = _voucher_create_with_mach_voucher(msgh_voucher_port, v4, v11, v12);
  v13 = *(unsigned int **)(StatusReg + 224);
  if (v13 == v15)
    return (voucher_mach_msg_state_t)v15;
  *(_QWORD *)(StatusReg + 224) = v15;
  if (!v15)
  {
    v16 = 0;
    if (v13)
      goto LABEL_18;
LABEL_21:
    v17 = 0;
    goto LABEL_22;
  }
  v16 = v15[8];
  if (!v13)
    goto LABEL_21;
LABEL_18:
  v17 = v13[8];
LABEL_22:
  if ((_DWORD)v16 != -1 && (_DWORD)v16 != v17)
    _dispatch_set_priority_and_mach_voucher_slow(0, v16);
  return (voucher_mach_msg_state_t)v13;
}

void voucher_mach_msg_revert(voucher_mach_msg_state_t state)
{
  unint64_t StatusReg;
  _DWORD *v2;
  uint64_t v3;
  int v4;

  if (state != (voucher_mach_msg_state_t)-1)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v2 = *(_DWORD **)(StatusReg + 224);
    if (v2 == (_DWORD *)state)
    {
LABEL_11:
      if (v2)
        os_release(v2);
      return;
    }
    *(_QWORD *)(StatusReg + 224) = state;
    if (state)
    {
      v3 = *((unsigned int *)state + 8);
      if (v2)
      {
LABEL_5:
        v4 = v2[8];
LABEL_8:
        if ((_DWORD)v3 != -1 && (_DWORD)v3 != v4)
          _dispatch_set_priority_and_mach_voucher_slow(0, v3);
        goto LABEL_11;
      }
    }
    else
    {
      v3 = 0;
      if (v2)
        goto LABEL_5;
    }
    v4 = 0;
    goto LABEL_8;
  }
}

uint64_t voucher_activity_initialize_4libtrace(uint64_t *a1)
{
  uint64_t result;

  if (*a1 <= 2)
    voucher_activity_initialize_4libtrace_cold_1(*a1);
  do
  {
    if (__ldxr((unint64_t *)&_voucher_libtrace_hooks))
    {
      __clrex();
      voucher_activity_initialize_4libtrace_cold_2();
    }
  }
  while (__stxr((unint64_t)a1, (unint64_t *)&_voucher_libtrace_hooks));
  result = _dispatch_getenv_BOOL("LIBDISPATCH_NO_FAULTS", 0);
  if ((result & 1) == 0)
  {
    result = getpid();
    if ((_DWORD)result != 1)
    {
      result = os_variant_has_internal_diagnostics("com.apple.libdispatch");
      if ((_DWORD)result)
      {
        if ((MEMORY[0xFFFFFC104] & 0x80000000) == 0)
          _dispatch_mode &= ~2u;
      }
    }
  }
  return result;
}

uint64_t _voucher_init()
{
  return __libkernel_voucher_init(&_voucher_libkernel_functions);
}

unint64_t voucher_activity_id_allocate(unsigned __int8 a1)
{
  uint64_t slow;

  while (1)
  {
    slow = __ldxr((unint64_t *)&_voucher_aid_next);
    if (!slow || ((slow + 1) & 0xF) == 0)
      break;
    if (!__stxr(slow + 1, (unint64_t *)&_voucher_aid_next))
      return slow & 0xFFFFFFFFFFFFFFLL | ((unint64_t)a1 << 56);
  }
  __clrex();
  slow = _voucher_activity_id_allocate_slow();
  return slow & 0xFFFFFFFFFFFFFFLL | ((unint64_t)a1 << 56);
}

mach_vm_address_t voucher_activity_get_logging_preferences(mach_vm_size_t *a1)
{
  if (_firehose_task_buffer_pred != -1)
    dispatch_once_f(&_firehose_task_buffer_pred, 0, (dispatch_function_t)_firehose_task_buffer_init);
  if (_firehose_task_buffer && *(_DWORD *)(_firehose_task_buffer + 1552) != -1)
    return firehose_buffer_get_logging_prefs(_firehose_task_buffer, a1);
  *a1 = 0;
  return 0;
}

BOOL voucher_activity_should_send_strings()
{
  if (_firehose_task_buffer_pred != -1)
    dispatch_once_f(&_firehose_task_buffer_pred, 0, (dispatch_function_t)_firehose_task_buffer_init);
  return _firehose_task_buffer
      && *(_DWORD *)(_firehose_task_buffer + 1552) != -1
      && firehose_buffer_should_send_strings((int *)_firehose_task_buffer);
}

uint64_t voucher_activity_get_metadata_buffer(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;

  if (_firehose_task_buffer_pred != -1)
    dispatch_once_f(&_firehose_task_buffer_pred, 0, (dispatch_function_t)_firehose_task_buffer_init);
  v2 = _firehose_task_buffer;
  if (!_firehose_task_buffer || *(_DWORD *)(_firehose_task_buffer + 1552) == -1)
  {
    result = 0;
    *a1 = 0;
  }
  else
  {
    *a1 = 2048;
    return v2 + 2048;
  }
  return result;
}

_DWORD *voucher_activity_create_with_data_2(unint64_t *a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5, char a6)
{
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t slow;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  _BOOL4 v40;
  unsigned __int16 v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned __int8 v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  unint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  _BOOL4 v63;
  unsigned __int16 v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unsigned __int8 v82;
  unint64_t v83;
  int v84;
  unint64_t v85;
  unint64_t *v86;
  uint64_t v87;
  unint64_t *v88;
  int *v89;
  unint64_t *v90;
  unint64_t v91;
  _DWORD *result;
  _DWORD *v93;
  unint64_t *v94;
  unsigned __int16 v95;
  unint64_t v96;
  int v97;
  char v98;
  int v99;
  size_t v100;
  size_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v108;
  int v109;
  unint64_t StatusReg;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v7 = a5 + 8;
  v8 = (unsigned __int16)(a5 + 8);
  if (a5 >= 0xFFFFFFFFFFFFFFF8 || v7 >> 16 || v8 >= 0x81)
    voucher_activity_create_with_data_2_cold_1(v8);
  v9 = *a1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v10 = *(_QWORD *)(StatusReg + 224);
  if (a2 == -3)
    v11 = *(_QWORD *)(StatusReg + 224);
  else
    v11 = a2;
  v96 = v9;
  v12 = v9 >> 16;
  v13 = (v9 >> 16) & 0xFFFFFFEF;
  if (v10)
  {
    v105 = *(_QWORD *)(v10 + 48);
    if (v105)
    {
      LOWORD(v13) = v13 | 1;
      LODWORD(v7) = a5 + 24;
      v104 = *(_QWORD *)(v10 + 56);
      if (v104)
        LOWORD(v13) = v12 | 0x11;
      else
        LODWORD(v7) = a5 + 16;
      goto LABEL_14;
    }
  }
  else
  {
    v105 = 0;
  }
  v104 = 0;
LABEL_14:
  v94 = a1;
  if (v11)
    v14 = *(_QWORD *)(v11 + 48);
  else
    v14 = 0;
  v99 = a6 & 1;
  if (v14)
    LOWORD(v13) = v13 | 0x200;
  v95 = v13;
  if (v14)
    v7 = (v7 + 8);
  else
    v7 = v7;
  v101 = v7;
  v15 = a3 | HIBYTE(v14) | ~MEMORY[0xFFFFFC104] & 0x80;
  v16 = _os_object_alloc_realized((objc_class *)OS_voucher, 80);
  if (v11 && *(_DWORD *)(v11 + 32))
  {
    if (*(_QWORD *)(v11 + 40))
      v17 = *(_QWORD *)(v11 + 40);
    else
      v17 = v11;
    os_retain((void *)v17);
    *((_QWORD *)v16 + 5) = v17;
    v16[8] = *(_DWORD *)(v17 + 32);
    *((_BYTE *)v16 + 72) = v16[18] & 0xFE | *(_BYTE *)(v17 + 72) & 1;
  }
  while (1)
  {
    v18 = __ldxr((unint64_t *)&_voucher_aid_next);
    if (!v18 || ((v18 + 1) & 0xF) == 0)
      break;
    slow = v18;
    if (!__stxr(v18 + 1, (unint64_t *)&_voucher_aid_next))
      goto LABEL_33;
  }
  __clrex();
  slow = _voucher_activity_id_allocate_slow();
LABEL_33:
  v21 = _voucher_unique_pid;
  v102 = slow & 0xFFFFFFFFFFFFFFLL | ((unint64_t)v15 << 56);
  *((_QWORD *)v16 + 6) = v102;
  *((_QWORD *)v16 + 7) = v21;
  *((_QWORD *)v16 + 8) = v14;
  v103 = v14;
  v93 = v16;
  if (_firehose_task_buffer_pred != -1)
    dispatch_once_f(&_firehose_task_buffer_pred, 0, (dispatch_function_t)_firehose_task_buffer_init);
  if (!_firehose_task_buffer || *(_DWORD *)(_firehose_task_buffer + 1552) == -1)
    goto LABEL_159;
  if ((v15 & 0x80) != 0 || (MEMORY[0xFFFFFC104] & 0x80) == 0)
    v22 = mach_continuous_time();
  else
    v22 = mach_continuous_approximate_time();
  v111 = v22;
  v23 = 0;
  LODWORD(v24) = (unsigned __int16)v101 + 24;
  v109 = (unsigned __int16)(v101 + 24);
  if ((v101 & 7) != 0)
    v24 = (v101 & 0xFFF8) + 32;
  else
    v24 = v24;
  v108 = v24;
  v100 = v101 << 48;
  v25 = 1;
  do
  {
    v26 = v25;
    v27 = voucher_activity_create_with_data_2_streams[v23];
    v28 = _firehose_task_buffer;
    v29 = (unint64_t *)(_firehose_task_buffer + (v27 << 7) + 640);
    v30 = *v29;
    v31 = HIDWORD(*v29);
    v32 = *v29 >> 40;
    v33 = HIWORD(*v29);
    if ((v25 & 1) != 0)
    {
      v34 = 2;
      while (1)
      {
        v35 = v31;
        if ((v31 - 1) > 0xFDu)
        {
LABEL_64:
          if ((_DWORD)v30)
            goto LABEL_75;
LABEL_65:
          v45 = (v33 << 48) | ((unint64_t)v32 << 40);
          v46 = v45 | ((unint64_t)v31 << 32);
          v47 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL | ((unint64_t)v35 << 32) | v45;
          while (1)
          {
            v30 = __ldxr(v29);
            if (v30 != v46)
              break;
            if (!__stxr(v47, v29))
            {
              v48 = 1;
              goto LABEL_72;
            }
          }
          v48 = 0;
          __clrex();
LABEL_72:
          v31 = HIDWORD(v30);
          v32 = v30 >> 40;
          v33 = HIWORD(v30);
          if (v48)
          {
            v112 = v111;
            v113 = (unsigned __int16)v101;
            BYTE4(v113) = v27;
            BYTE6(v113) = (((1 << v27) & 0x13) != 0) | (2 * *(_BYTE *)(v28 + 1569)) | 4;
            v87 = v113;
            if (MEMORY[0xFFFFFC100])
              goto LABEL_158;
            goto LABEL_142;
          }
        }
        else
        {
          v36 = (unint64_t *)(v28 + ((unint64_t)v31 << 12));
          v37 = v111 - v36[1];
          while (1)
          {
            v38 = __ldxr(v36);
            if (!v38 || (HIWORD(v38) & 0x1FF) != v27)
              break;
            v40 = v109 + (unsigned __int16)v38 > WORD1(v38) || HIWORD(v37) != 0;
            v41 = v38 + v108;
            v42 = v38 + v108 + 0x100000000;
            v43 = (v38 + v108) >> 16;
            v44 = ((unsigned __int16)(v38 + v108) + 40 > (unsigned __int16)v43) | HIBYTE(v42);
            if (v40)
            {
              v42 = v38;
              v44 = HIBYTE(v38) | 1;
              v43 = v38 >> 16;
              v41 = v38;
            }
            if (!__stxr(((_DWORD)v43 << 16) | v42 & 0xFFFFFF00000000 | (v44 << 56) | v41, v36))
            {
              if (v40)
              {
                if ((v42 & 0xFF00000000) == 0)
                  firehose_buffer_ring_enqueue((int *)v28, v31);
                goto LABEL_63;
              }
              v49 = (unsigned __int16)v38;
              if (!(_WORD)v38)
              {
LABEL_63:
                v35 = 0;
                goto LABEL_64;
              }
              v85 = *(_QWORD *)(StatusReg - 8);
              v86 = (unint64_t *)((char *)v36 + v49);
              *(unint64_t *)((char *)v36 + v49 + 16) = (v111 - v36[1]) | v100;
              goto LABEL_140;
            }
          }
          v35 = 0;
          __clrex();
          if (!(_DWORD)v30)
            goto LABEL_65;
LABEL_75:
          v50 = v30 | 1;
          v51 = (v33 << 48) | ((unint64_t)v32 << 40);
          v52 = v50 | ((unint64_t)v35 << 32) | v51;
          v53 = v31;
          v54 = v30 | ((unint64_t)v31 << 32) | v51;
          if (v52 == v54)
            goto LABEL_81;
          while (1)
          {
            v30 = __ldxr(v29);
            if (v30 != v54)
              break;
            if (!__stxr(v52, v29))
            {
              v55 = 1;
              goto LABEL_80;
            }
          }
          v55 = 0;
          __clrex();
LABEL_80:
          v31 = HIDWORD(v30);
          v32 = v30 >> 40;
          v33 = HIWORD(v30);
          if (v55)
          {
LABEL_81:
            if (MEMORY[0xFFFFFC100])
            {
              v97 = v50;
              kdebug_trace(772145160, v27 | ((unint64_t)v53 << 8), v34, ((unint64_t)v32 << 40) | (v33 << 48) | ((unint64_t)v31 << 32) | v30, v52);
              LODWORD(v50) = v97;
            }
            _dispatch_firehose_gate_wait((uint64_t)v29, v50, 0x10000);
            v30 = *v29;
            v31 = HIDWORD(*v29);
            v32 = *v29 >> 40;
            v33 = HIWORD(*v29);
            v34 = 3;
          }
        }
      }
    }
    v56 = 0;
LABEL_85:
    v57 = v56 ^ 1;
    while (1)
    {
      while (1)
      {
        v58 = v31;
        if ((v31 - 1) <= 0xFDu)
        {
          v59 = (unint64_t *)(v28 + ((unint64_t)v31 << 12));
          v60 = v111 - v59[1];
          do
          {
            v61 = __ldxr(v59);
            if (!v61 || (HIWORD(v61) & 0x1FF) != v27)
            {
              v58 = 0;
              __clrex();
              goto LABEL_103;
            }
            v63 = v109 + (unsigned __int16)v61 > WORD1(v61) || HIWORD(v60) != 0;
            v64 = v61 + v108;
            v65 = v61 + v108 + 0x100000000;
            v66 = (v61 + v108) >> 16;
            v67 = ((unsigned __int16)(v61 + v108) + 40 > (unsigned __int16)v66) | HIBYTE(v65);
            if (v63)
            {
              v65 = v61;
              v67 = HIBYTE(v61) | 1;
              v66 = v61 >> 16;
              v64 = v61;
            }
          }
          while (__stxr(((_DWORD)v66 << 16) | v65 & 0xFFFFFF00000000 | (v67 << 56) | v64, v59));
          if (v63)
          {
            if ((v65 & 0xFF00000000) == 0)
            {
              v98 = v32;
              LODWORD(v32) = v30;
              v30 = v27;
              v68 = v33;
              v69 = v26;
              v70 = v56;
              v71 = v57;
              firehose_buffer_ring_enqueue((int *)v28, v31);
              v56 = v70;
              v26 = v69;
              v33 = v68;
              v27 = v30;
              LODWORD(v30) = v32;
              LOBYTE(v32) = v98;
              v57 = v71;
            }
            goto LABEL_102;
          }
          v73 = (unsigned __int16)v61;
          if (!(_WORD)v61)
          {
LABEL_102:
            v58 = 0;
            goto LABEL_103;
          }
          v85 = *(_QWORD *)(StatusReg - 8);
          v86 = (unint64_t *)((char *)v59 + v73);
          *(unint64_t *)((char *)v59 + v73 + 16) = (v111 - v59[1]) | v100;
LABEL_140:
          v86[1] = v85;
          goto LABEL_143;
        }
LABEL_103:
        if (!v99)
        {
          if (!(_DWORD)v30)
            goto LABEL_111;
          v72 = 1;
          goto LABEL_127;
        }
        if (v57 & 1 | ((v32 & 0x40) == 0) && (v32 & 0x80) == 0)
          break;
        v75 = v32 & 0x3F;
        if (v75 >= 0x3E)
          v75 = 62;
        v76 = ((unint64_t)v32 << 40) | ((unint64_t)v31 << 32) | (v33 << 48) | v30;
        v77 = (((v75 + 1) | v32 & 0xC0) << 40) | ((unint64_t)v58 << 32) | (v33 << 48) | v30;
        while (1)
        {
          v30 = __ldxr(v29);
          if (v30 != v76)
            break;
          if (!__stxr(v77, v29))
          {
            v78 = 1;
            goto LABEL_123;
          }
        }
        v78 = 0;
        __clrex();
LABEL_123:
        if ((v78 & 1) != 0)
        {
          if (MEMORY[0xFFFFFC100])
            kdebug_trace(772145156, v27 | ((unint64_t)v31 << 8), v56 & 1, v76, v77);
          goto LABEL_154;
        }
LABEL_124:
        v31 = HIDWORD(v30);
        v32 = v30 >> 40;
        v33 = HIWORD(v30);
      }
      if (!(_DWORD)v30)
        break;
      v72 = 2;
LABEL_127:
      v79 = v30 | v72;
      v80 = (v33 << 48) | ((unint64_t)v32 << 40);
      v81 = v79 | ((unint64_t)v58 << 32) | v80;
      v82 = v31;
      v83 = v30 | ((unint64_t)v31 << 32) | v80;
      if (v81 != v83)
      {
        while (1)
        {
          v30 = __ldxr(v29);
          if (v30 != v83)
            break;
          if (!__stxr(v81, v29))
          {
            v84 = 1;
            goto LABEL_132;
          }
        }
        v84 = 0;
        __clrex();
LABEL_132:
        v31 = HIDWORD(v30);
        v32 = v30 >> 40;
        v33 = HIWORD(v30);
        if (!v84)
          continue;
      }
      if (MEMORY[0xFFFFFC100])
        kdebug_trace(772145160, v27 | ((unint64_t)v82 << 8), ((2 * v99) | v56 & 1) ^ 2, ((unint64_t)v32 << 40) | (v33 << 48) | ((unint64_t)v31 << 32) | v30, v81);
      _dispatch_firehose_gate_wait((uint64_t)v29, v79, 0x10000);
      v30 = *v29;
      v31 = HIDWORD(*v29);
      v32 = *v29 >> 40;
      v33 = HIWORD(*v29);
      v56 = 1;
      goto LABEL_85;
    }
LABEL_111:
    v74 = (v33 << 48) | ((unint64_t)v32 << 40);
    v46 = v74 | ((unint64_t)v31 << 32);
    v47 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL | ((unint64_t)v58 << 32) | v74;
    do
    {
      v30 = __ldxr(v29);
      if (v30 != v46)
      {
        __clrex();
        goto LABEL_124;
      }
    }
    while (__stxr(v47, v29));
    v112 = v111;
    v113 = (unsigned __int16)v101;
    BYTE4(v113) = v27;
    BYTE6(v113) = ((4 * v99) | (2 * *(_BYTE *)(v28 + 1569)) | (((1 << v27) & 0x13) != 0)) ^ 4;
    v87 = v113;
    if (MEMORY[0xFFFFFC100])
LABEL_158:
      kdebug_trace(772145164, v111, v87, v46, v47);
LABEL_142:
    v86 = (unint64_t *)firehose_buffer_tracepoint_reserve_slow(v28, (unsigned __int8 *)&v112, 0);
    if (v86)
    {
LABEL_143:
      if (v105)
      {
        v86[3] = v105;
        v88 = v86 + 4;
      }
      else
      {
        v88 = v86 + 3;
      }
      if (v104)
        *v88++ = v104;
      if (v103)
        *v88++ = v103;
      *v88 = v102;
      memcpy(v88 + 1, a4, a5);
      v89 = (int *)_firehose_task_buffer;
      v90 = (unint64_t *)((unint64_t)v86 & 0xFFFFFFFFFFFFF000);
      atomic_store(v96 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)v95 << 16), v86);
      do
        v91 = __ldxr(v90);
      while (__stxr(v91 - 0x100000000, v90));
      if ((v91 & 0x10000FF00000000) == 0x100000100000000)
        firehose_buffer_ring_enqueue(v89, (((_DWORD)v90 - (_DWORD)v89) >> 12));
    }
LABEL_154:
    v25 = 0;
    v23 = 1;
  }
  while ((v26 & 1) != 0);
LABEL_159:
  result = v93;
  *v94 = v96 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)v95 << 16);
  return result;
}

_DWORD *voucher_activity_create_with_data(unint64_t *a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5)
{
  return voucher_activity_create_with_data_2(a1, a2, a3, a4, a5, 0);
}

_DWORD *voucher_activity_create_with_location(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a4;
  return voucher_activity_create_with_data_2(a1, a2, a3, &v5, 8uLL, 0);
}

uint64_t voucher_get_activity_id_and_creator(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  if (a1 == (_QWORD *)-3)
  {
    a1 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
    if (a1)
      goto LABEL_3;
  }
  else if (a1)
  {
LABEL_3:
    if (a2)
      *a2 = a1[7];
    if (a3)
      *a3 = a1[8];
    return a1[6];
  }
  if (a2)
    *a2 = 0;
  result = 0;
  if (a3)
    *a3 = 0;
  return result;
}

uint64_t voucher_get_activity_id(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 == -3)
  {
    a1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
    if (a1)
      goto LABEL_3;
  }
  else if (a1)
  {
LABEL_3:
    if (a2)
      *a2 = *(_QWORD *)(a1 + 64);
    return *(_QWORD *)(a1 + 48);
  }
  result = 0;
  if (a2)
    *a2 = 0;
  return result;
}

void voucher_activity_flush(unsigned int a1)
{
  int *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _BOOL4 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  if (_firehose_task_buffer_pred != -1)
    dispatch_once_f(&_firehose_task_buffer_pred, 0, (dispatch_function_t)_firehose_task_buffer_init);
  v2 = (int *)_firehose_task_buffer;
  if (_firehose_task_buffer && *(_DWORD *)(_firehose_task_buffer + 1552) != -1)
  {
    v3 = a1;
    v4 = _firehose_task_buffer + ((unint64_t)a1 << 7);
    v5 = *(_QWORD *)(v4 + 640);
    if ((~v5 & 0xFF00000000) == 0 || BYTE4(*(_QWORD *)(v4 + 640)) == 0)
    {
      firehose_buffer_force_connect((int *)_firehose_task_buffer);
    }
    else
    {
      v7 = (unint64_t *)(v4 + 640);
      v8 = (unint64_t *)(_firehose_task_buffer + ((unint64_t)BYTE4(v5) << 12));
      v9 = v8[1];
      do
      {
        v10 = __ldxr(v8);
        if (!v10 || (HIWORD(v10) & 0x1FF) != v3)
        {
          __clrex();
          goto LABEL_28;
        }
        v12 = (unsigned __int16)v10 + 25 > WORD1(v10) || v9 < 0xFFFF000000000000;
        v13 = v10 + 0x100000020;
        v14 = (v10 + 0x100000020) >> 16;
        v15 = ((unsigned __int16)(v10 + 32) + 40 > (unsigned __int16)v14) | ((v10 + 0x100000020) >> 56);
        if (v12)
        {
          v13 = v10;
          v15 = HIBYTE(v10) | 1;
          v14 = v10 >> 16;
        }
      }
      while (__stxr(((_DWORD)v14 << 16) | v13 & 0xFFFFFF00000000 | (v15 << 56) | (unsigned __int16)v13, v8));
      if (v12)
      {
        if ((v13 & 0xFF00000000) == 0)
          firehose_buffer_ring_enqueue(v2, BYTE4(v5));
      }
      else if ((_WORD)v10)
      {
        voucher_activity_flush_cold_1((unsigned __int16)v10);
      }
LABEL_28:
      while (1)
      {
        v16 = __ldxr(v7);
        if (v16 != v5)
          break;
        if (!__stxr(v5 & 0xFFFFFF00FFFFFFFFLL, v7))
          return;
      }
      __clrex();
    }
  }
}

unint64_t voucher_activity_trace_v_2(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, char a7)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v11;
  unint64_t v12;
  uint64_t v15;
  uint64_t v16;
  unint64_t StatusReg;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int16 v26;
  unint64_t v27;
  unsigned __int16 v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  _BOOL4 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unsigned __int8 v65;
  unint64_t v66;
  int v67;
  unint64_t v68;
  unint64_t *v69;
  _QWORD *v70;
  size_t v71;
  unint64_t v72;
  BOOL v73;
  char *v74;
  size_t v75;
  unint64_t v76;
  int *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  unsigned int v84;
  unsigned int v85;
  unint64_t v86;
  unsigned int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  char v97;
  char v98;
  unsigned __int16 v99;
  char v100;
  unint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;

  v11 = a5;
  v12 = a4;
  v15 = a1;
  if (_firehose_task_buffer_pred != -1)
  {
    dispatch_once_f(&_firehose_task_buffer_pred, 0, (dispatch_function_t)_firehose_task_buffer_init);
    v15 = a1;
  }
  v16 = _firehose_task_buffer;
  if (!_firehose_task_buffer || *(_DWORD *)(_firehose_task_buffer + 1552) == -1)
    return 0;
  v106 = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v18 = *(_QWORD *)(StatusReg + 224);
  if (v18)
  {
    v19 = *(_QWORD *)(v18 + 48);
    v20 = *(_QWORD *)(v18 + 56);
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  v21 = v11 + 8;
  if (!v19)
    v21 = v11;
  v22 = (v19 != 0) | (a2 >> 16) & 0xFFFFFFEF;
  v23 = v21 + 8;
  if (v20)
    LOWORD(v22) = (v19 != 0) | WORD1(a2);
  else
    v23 = v21;
  if ((a2 & 0x100000) != 0)
    v24 = v20;
  else
    v24 = 0;
  v25 = (a2 & 0x100000) == 0 || v20 == 0;
  if ((a2 & 0x100000) != 0)
    v26 = v22;
  else
    v26 = (v19 != 0) | WORD1(a2);
  if ((a2 & 0x100000) != 0)
    v27 = v23;
  else
    v27 = v21;
  v28 = v26 | 0x100;
  if (a6)
  {
    v29 = v27 + 4;
  }
  else
  {
    v28 = v26;
    v29 = v27;
  }
  if (a6 + v29 + 24 < 0xFF1)
  {
    v99 = v28;
    v30 = 0;
    v8 = v15;
    v31 = a7 & 1;
    v32 = (unint64_t *)(v16 + ((unint64_t)v15 << 7) + 640);
    v33 = *v32;
    LODWORD(v34) = (unsigned __int16)v29 + 24;
    v105 = (unsigned __int16)(v29 + 24 + a6);
    if ((v29 & 7) != 0)
      v34 = (v29 & 0xFFF8) + 32;
    else
      v34 = v34;
    v104 = v34;
    v103 = ((_DWORD)a6 << 16);
    v96 = 2 * v31;
LABEL_33:
    v35 = HIDWORD(v33);
    v36 = HIWORD(v33);
    v97 = v30;
    v98 = v30 ^ 1;
    v37 = v33 >> 40;
    LODWORD(v38) = v33;
    while (1)
    {
      v39 = v35;
      if ((v35 - 1) <= 0xFDu)
      {
        v100 = v37;
        v101 = v36;
        v40 = (unint64_t *)(v16 + ((unint64_t)v35 << 12));
        v41 = a3 - v40[1];
        do
        {
          v42 = __ldxr(v40);
          if (!v42 || (HIWORD(v42) & 0x1FF) != v8)
          {
            v39 = 0;
            __clrex();
            goto LABEL_57;
          }
          v44 = v105 + (unsigned __int16)v42 > WORD1(v42) || HIWORD(v41) != 0;
          v45 = v42 + v104;
          v46 = ((unsigned __int16)(v42 + v104) + 40 > (v42 + v104 - v103) >> 16) | ((v42 + v104 - v103 + 0x100000000) >> 56);
          if (v44)
            v47 = v42;
          else
            v47 = v45 - v103 + 0x100000000;
          if (v44)
          {
            v46 = HIBYTE(v42) | 1;
            v48 = v42 >> 16;
          }
          else
          {
            v48 = (unint64_t)(v45 - v103) >> 16;
          }
          if (v44)
            LOWORD(v45) = v42;
        }
        while (__stxr(((_DWORD)v48 << 16) | v47 & 0xFFFFFF00000000 | (v46 << 56) | (unsigned __int16)v45, v40));
        if (v44)
        {
          if ((v47 & 0xFF00000000) == 0)
          {
            v90 = v24;
            v91 = a2;
            v89 = a3;
            v92 = StatusReg;
            v94 = v19;
            v88 = v38;
            v38 = v25;
            v49 = v15;
            v50 = v29;
            v51 = v31;
            firehose_buffer_ring_enqueue((int *)v16, v35);
            v31 = v51;
            v29 = v50;
            StatusReg = v92;
            v19 = v94;
            v15 = v49;
            v25 = v38;
            LODWORD(v38) = v88;
            a3 = v89;
            v24 = v90;
            a2 = v91;
          }
LABEL_56:
          v39 = 0;
LABEL_57:
          LOBYTE(v37) = v100;
          v36 = v101;
          goto LABEL_58;
        }
        v106 = (char *)v40 + (unsigned __int16)v48;
        if (!(_WORD)v42)
          goto LABEL_56;
        v68 = *(_QWORD *)(StatusReg - 8);
        v69 = (unint64_t *)((char *)v40 + (unsigned __int16)v42);
        v69[2] = (a3 - v40[1]) | (v29 << 48);
        v69[1] = v68;
        if (!v19)
          goto LABEL_114;
LABEL_92:
        v69[3] = v19;
        v70 = v69 + 4;
        if ((v25 & 1) == 0)
          goto LABEL_93;
        goto LABEL_94;
      }
LABEL_58:
      if (!(_DWORD)v31)
        break;
      if (!(v98 & 1 | ((v37 & 0x40) == 0)) || (v37 & 0x80) != 0)
      {
        v53 = v31;
        v56 = v37 & 0x3F;
        if (v56 >= 0x3E)
          v56 = 62;
        v57 = (v56 + 1) | v37 & 0xC0;
        v58 = v35;
        v59 = ((unint64_t)v37 << 40) | ((unint64_t)v35 << 32) | (v36 << 48) | v38;
        v60 = (v57 << 40) | ((unint64_t)v39 << 32) | (v36 << 48) | v38;
        while (1)
        {
          v55 = __ldxr(v32);
          if (v55 != v59)
            break;
          if (!__stxr(v60, v32))
          {
            v61 = 1;
            goto LABEL_78;
          }
        }
        v61 = 0;
        __clrex();
LABEL_78:
        if ((v61 & 1) != 0)
        {
LABEL_117:
          if (MEMORY[0xFFFFFC100])
            kdebug_trace(772145156, v8 | (v58 << 8), v97 & 1, v59, v60);
          return 0;
        }
LABEL_79:
        v35 = HIDWORD(v55);
        v36 = HIWORD(v55);
        v37 = v55 >> 40;
        LODWORD(v38) = v55;
        v31 = v53;
      }
      else
      {
        if (!(_DWORD)v38)
        {
LABEL_66:
          v53 = v31;
          v54 = (v36 << 48) | ((unint64_t)v37 << 40);
          a4 = v54 | ((unint64_t)v35 << 32);
          a5 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL | ((unint64_t)v39 << 32) | v54;
          do
          {
            v55 = __ldxr(v32);
            if (v55 != a4)
            {
              __clrex();
              goto LABEL_79;
            }
          }
          while (__stxr(a5, v32));
          a7 = v25;
          v7 = v19;
          v107 = a3;
          v108 = (unsigned __int16)v29;
          WORD1(v108) = a6;
          BYTE4(v108) = v15;
          BYTE6(v108) = ((2 * *(_BYTE *)(v16 + 1569)) | (4 * v53) | (((1 << v8) & 0x13) != 0)) ^ 4;
          v25 = v108;
          if (MEMORY[0xFFFFFC100])
            goto LABEL_120;
          goto LABEL_110;
        }
        v52 = 2;
LABEL_82:
        v62 = v38 | v52;
        v63 = (v36 << 48) | ((unint64_t)v37 << 40);
        v102 = v62;
        v64 = v62 | ((unint64_t)v39 << 32) | v63;
        v65 = v35;
        v66 = v38 | ((unint64_t)v35 << 32) | v63;
        if (v64 == v66)
          goto LABEL_88;
        while (1)
        {
          v38 = __ldxr(v32);
          if (v38 != v66)
            break;
          if (!__stxr(v64, v32))
          {
            v67 = 1;
            goto LABEL_87;
          }
        }
        v67 = 0;
        __clrex();
LABEL_87:
        v35 = HIDWORD(v38);
        v37 = v38 >> 40;
        v36 = HIWORD(v38);
        if (v67)
        {
LABEL_88:
          v84 = v31;
          v85 = v25;
          v86 = v29;
          v93 = StatusReg;
          v95 = v19;
          v87 = v15;
          if (MEMORY[0xFFFFFC100])
            kdebug_trace(772145160, v8 | ((unint64_t)v65 << 8), (v96 | v97 & 1) ^ 2u, ((unint64_t)v37 << 40) | (v36 << 48) | ((unint64_t)v35 << 32) | v38, v64);
          _dispatch_firehose_gate_wait((uint64_t)v32, v102, 0x10000);
          v33 = *v32;
          v30 = 1;
          StatusReg = v93;
          v19 = v95;
          v31 = v84;
          v25 = v85;
          v15 = v87;
          v29 = v86;
          goto LABEL_33;
        }
      }
    }
    if (!(_DWORD)v38)
      goto LABEL_66;
    v52 = 1;
    goto LABEL_82;
  }
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Log is too large";
  qword_61258 = a6 + v29 + 24;
  __break(1u);
LABEL_120:
  kdebug_trace(772145164, a3, v25, a4, a5);
LABEL_110:
  v81 = firehose_buffer_tracepoint_reserve_slow(v16, (unsigned __int8 *)&v107, &v106);
  if (!v81)
    return 0;
  v69 = (unint64_t *)v81;
  v19 = v7;
  LOBYTE(v25) = a7;
  if (v7)
    goto LABEL_92;
LABEL_114:
  v70 = v69 + 3;
  if ((v25 & 1) == 0)
LABEL_93:
    *v70++ = v24;
LABEL_94:
  if (a6)
  {
    *(_DWORD *)v70 = (unsigned __int16)((_WORD)v106 - ((unsigned __int16)v69 & 0xF000)) | ((unsigned __int16)a6 << 16);
    v70 = (_QWORD *)((char *)v70 + 4);
  }
  while (v11)
  {
    v71 = *(_QWORD *)(v12 + 8);
    memcpy(v70, *(const void **)v12, v71);
    v72 = *(_QWORD *)(v12 + 8);
    v73 = v11 >= v72;
    v11 -= v72;
    if (!v73)
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid arguments";
      __break(1u);
LABEL_116:
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid arguments";
      __break(1u);
      goto LABEL_117;
    }
    v70 = (_QWORD *)((char *)v70 + v71);
    v12 += 16;
  }
  if (a6)
  {
    v74 = v106;
    do
    {
      v75 = *(_QWORD *)(v12 + 8);
      memcpy(v74, *(const void **)v12, v75);
      v74 += v75;
      v106 = v74;
      v76 = *(_QWORD *)(v12 + 8);
      v73 = a6 >= v76;
      a6 -= v76;
      if (!v73)
        goto LABEL_116;
      v12 += 16;
    }
    while (a6);
  }
  v77 = (int *)_firehose_task_buffer;
  v78 = a2 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)v99 << 16);
  v79 = (unint64_t *)((unint64_t)v69 & 0xFFFFFFFFFFFFF000);
  atomic_store(v78, v69);
  do
    v80 = __ldxr(v79);
  while (__stxr(v80 - 0x100000000, v79));
  if ((v80 & 0x10000FF00000000) == 0x100000100000000)
    firehose_buffer_ring_enqueue(v77, (((_DWORD)v79 - (_DWORD)v77) >> 12));
  return v78;
}

unint64_t voucher_activity_trace_v(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  return voucher_activity_trace_v_2(a1, a2, a3, a4, a5, a6, 0);
}

unint64_t voucher_activity_trace(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD v6[2];

  v6[0] = a4;
  v6[1] = a5;
  return voucher_activity_trace_v(a1, a2, a3, (unint64_t)v6, a5, 0);
}

size_t _voucher_debug(uint64_t a1, char *__str, size_t __size)
{
  int v6;
  size_t v7;
  size_t v8;
  size_t v9;
  int v10;
  size_t v11;
  int v12;
  int v13;
  uint64_t v14;
  size_t v15;
  int v16;
  size_t v17;
  size_t v18;
  int v19;
  size_t v20;
  size_t v22;
  const char *v23;
  int v24;
  size_t v25;
  size_t v26;
  size_t v27;
  size_t v28;
  int v29;
  size_t v30;
  size_t v31;
  int v32;
  size_t v33;
  size_t v34;
  size_t v35;
  size_t v36;
  int v37;
  size_t v38;

  v6 = snprintf(__str, __size, "voucher[%p] = { xref = %d, ref = %d", (const void *)a1, *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 8));
  v7 = v6;
  if (v6 >= __size)
    v7 = __size;
  if (v6 >= 0)
    v8 = v7;
  else
    v8 = 0;
  if (*(_QWORD *)(a1 + 40))
  {
    if (__size >= v8)
      v9 = __size - v8;
    else
      v9 = 0;
    v10 = snprintf(&__str[v8], v9, ", base voucher %p", *(const void **)(a1 + 40));
    v11 = v10;
    if (v9 < v10)
      v11 = v9;
    if (v10 < 0)
      v11 = 0;
    v8 += v11;
  }
  v12 = *(_DWORD *)(a1 + 32);
  if (v12)
  {
    if (__size >= v8)
      v22 = __size - v8;
    else
      v22 = 0;
    if (v12 == *(_DWORD *)(a1 + 36))
      v23 = " & ipc kvoucher";
    else
      v23 = (const char *)&unk_416A6;
    v24 = snprintf(&__str[v8], v22, ", kvoucher%s 0x%x [\n", v23, v12);
    v25 = v24;
    if (v22 < v24)
      v25 = v22;
    if (v24 < 0)
      v25 = 0;
    v26 = voucher_kvoucher_debug(mach_task_self_, *(_DWORD *)(a1 + 32), (uint64_t)__str, __size, v25 + v8, "        ", 0x400uLL);
    v27 = v26;
    if (__size >= v26)
      v28 = __size - v26;
    else
      v28 = 0;
    v29 = snprintf(&__str[v26], v28, "]");
    v30 = v29;
    if (v28 < v29)
      v30 = v28;
    if (v29 < 0)
      v30 = 0;
    v8 = v30 + v27;
  }
  v13 = *(_DWORD *)(a1 + 36);
  if (v13 && v13 != *(_DWORD *)(a1 + 32))
  {
    if (__size >= v8)
      v31 = __size - v8;
    else
      v31 = 0;
    v32 = snprintf(&__str[v8], v31, ", ipc kvoucher 0x%x [\n", *(_DWORD *)(a1 + 36));
    v33 = v32;
    if (v31 < v32)
      v33 = v31;
    if (v32 < 0)
      v33 = 0;
    v34 = voucher_kvoucher_debug(mach_task_self_, *(_DWORD *)(a1 + 36), (uint64_t)__str, __size, v33 + v8, "        ", 0x400uLL);
    v35 = v34;
    if (__size >= v34)
      v36 = __size - v34;
    else
      v36 = 0;
    v37 = snprintf(&__str[v34], v36, "]");
    v38 = v37;
    if (v36 < v37)
      v38 = v36;
    if (v37 < 0)
      v38 = 0;
    v8 = v38 + v35;
  }
  v14 = *(_QWORD *)(a1 + 48);
  if (v14)
  {
    if (__size >= v8)
      v15 = __size - v8;
    else
      v15 = 0;
    v16 = snprintf(&__str[v8], v15, ", activity 0x%llx (pid: 0x%16llx, parent 0x%llx)", v14, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
    v17 = v16;
    if (v15 < v16)
      v17 = v15;
    if (v16 < 0)
      v17 = 0;
    v8 += v17;
  }
  if (__size >= v8)
    v18 = __size - v8;
  else
    v18 = 0;
  v19 = snprintf(&__str[v8], v18, " }");
  v20 = v19;
  if (v18 < v19)
    v20 = v18;
  if (v19 < 0)
    v20 = 0;
  return v20 + v8;
}

uint64_t voucher_mach_msg_fill_aux(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (!v2)
    return 0;
  v3 = 0;
  if (a2 >= 0x28)
  {
    v4 = *(_QWORD *)(v2 + 48);
    if (v4)
    {
      *(_OWORD *)a1 = xmmword_40170;
      v5 = *(_OWORD *)(v2 + 56);
      *(_QWORD *)(a1 + 16) = v4;
      *(_OWORD *)(a1 + 24) = v5;
      return 40;
    }
  }
  return v3;
}

uint64_t _voucher_activity_id_allocate_slow()
{
  uint64_t result;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t activity_id;

  activity_id = 0;
  result = mach_generate_activity_id(mach_task_self_, 1, &activity_id);
  if ((_DWORD)result)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Could not generate an activity ID";
    qword_61258 = (int)result;
    __break(1u);
  }
  else
  {
    v1 = 16 * (activity_id & 0xFFFFFFFFFFFFFLL);
    if (!v1)
      v1 = 1;
    activity_id = v1;
    do
    {
      v2 = __ldxr((unint64_t *)&_voucher_aid_next);
      v3 = activity_id;
      if (v2)
        v4 = activity_id;
      else
        v4 = activity_id + 1;
    }
    while (__stxr(v4, (unint64_t *)&_voucher_aid_next));
    if (v2)
      return v2;
    else
      return v3;
  }
  return result;
}

uint64_t _firehose_task_buffer_init()
{
  pid_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v8 = 0;
  v6 = 0u;
  v7 = 0u;
  v5 = 0u;
  v0 = getpid();
  result = proc_pidinfo(v0, 17, 1uLL, &v5, 56);
  if ((_DWORD)result != 56)
  {
    if (!(_DWORD)result)
    {
      v4 = **(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unable to get the unique pid (error)";
      qword_61258 = v4;
      __break(1u);
    }
    qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unable to get the unique pid (size)";
    qword_61258 = (int)result;
    __break(1u);
  }
  _voucher_unique_pid = v6;
  if (_voucher_libtrace_hooks)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(_voucher_libtrace_hooks + 8))(result, v2);
    if ((_DWORD)result)
    {
      result = firehose_buffer_create(result, _voucher_unique_pid, _dispatch_memory_warn);
      _firehose_task_buffer = result;
      if (*(uint64_t *)_voucher_libtrace_hooks >= 4)
      {
        v3 = *(uint64_t (**)(uint64_t, uint64_t))(_voucher_libtrace_hooks + 32);
        if (v3)
          return v3(result + 2048, 2048);
      }
    }
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_2()
{
  uint64_t v0;
  uint64_t v1;

  return v0 + v1;
}

uint64_t OUTLINED_FUNCTION_3_3()
{
  uint64_t v0;
  uint64_t v1;

  return v0 + v1;
}

uint64_t OUTLINED_FUNCTION_4_2()
{
  uint64_t v0;
  uint64_t v1;

  return v0 + v1;
}

uint64_t OUTLINED_FUNCTION_6()
{
  uint64_t v0;
  uint64_t v1;

  return v0 + v1;
}

uint64_t OUTLINED_FUNCTION_7()
{
  uint64_t v0;
  uint64_t v1;

  return v0 + v1;
}

uint64_t OUTLINED_FUNCTION_8()
{
  uint64_t v0;
  uint64_t v1;

  return v0 + v1;
}

uint64_t OUTLINED_FUNCTION_9()
{
  uint64_t v0;
  uint64_t v1;

  return v0 + v1;
}

mach_vm_address_t firehose_buffer_create(mach_port_name_t a1, uint64_t a2, uint64_t a3)
{
  kern_return_t v6;
  mach_vm_address_t v7;
  kern_return_t v8;
  uint64_t i;
  kern_return_t v11;
  mach_vm_address_t address;
  mach_port_options_t options;
  mach_port_name_t name;

  address = vm_page_size;
  if (0x4000 % vm_page_size)
    firehose_buffer_create_cold_4();
  v6 = mach_vm_map(mach_task_self_, &address, 0x40000uLL, 0, 1308622851, 0, 0, 0, 3, 7, 2u);
  if (v6)
  {
    if (v6 != 3)
      _dispatch_bug(346, v6);
    v11 = mach_port_deallocate(mach_task_self_, a1);
    if (v11 == -301)
      _dispatch_sema4_create_slow_cold_2();
    if (v11)
      _dispatch_bug(91, v11);
    return 0;
  }
  else
  {
    v7 = address;
    *(_DWORD *)(address + 1548) = a1;
    *(_DWORD *)(v7 + 1544) = getpid();
    *(_QWORD *)(v7 + 1536) = a2;
    name = 0;
    *(_QWORD *)&options.flags = 0x500000033;
    options.8 = 0uLL;
    v8 = mach_port_construct(mach_task_self_, &options, v7, &name);
    if (v8)
    {
      if (v8 == -301)
        _dispatch_sema4_create_slow_cold_2();
      firehose_buffer_create_cold_2(v8);
    }
    *(_DWORD *)(v7 + 1560) = name;
    *(_DWORD *)(v7 + 264) = 20180226;
    *(_QWORD *)(v7 + 512) = a3;
    for (i = 644; i != 1540; i += 128)
    {
      if (i != 1028)
        *(_BYTE *)(v7 + i) = -1;
    }
    firehose_buffer_update_limits_unlocked(v7);
    *(_QWORD *)(v7 + 520) = 31;
    *(_WORD *)v7 = 1;
    *(_WORD *)(v7 + 2) = 2;
    *(_WORD *)(v7 + 4) = 3;
    *(_WORD *)(v7 + 6) = 4;
    *(_QWORD *)(v7 + 464) = 4;
    *(_WORD *)(v7 + 320) = 4;
    *(_WORD *)(v7 + 256) = 0;
    *(_WORD *)(v7 + 258) = 4;
    *(_WORD *)(v7 + 260) = 0;
    *(_WORD *)(v7 + 262) = 0;
  }
  return v7;
}

uint64_t firehose_buffer_update_limits_unlocked(uint64_t result)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unint64_t *v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  __int16 v13;
  unsigned __int16 v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  unsigned __int16 v18;
  unsigned int v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v1 = 0;
  v2 = 0;
  v3 = 0;
  v4 = *(_QWORD *)(result + 512);
  v5 = (unsigned __int8 *)(result + 644);
  do
  {
    v7 = *v5;
    v5 += 128;
    v6 = v7;
    if (((1 << v3) & 0x13) != 0)
      v8 = v2;
    else
      v8 = v2 + 1;
    if (((1 << v3) & 0x13) != 0)
      v9 = v1 + 1;
    else
      v9 = v1;
    if (v6 != 255)
    {
      v2 = v8;
      v1 = v9;
    }
    ++v3;
  }
  while (v3 != 7);
  v10 = (unint64_t *)(result + 448);
  v11 = (2 * (v1 + v2)) | 1;
  if ((v4 & 2) != 0)
    v11 = 3 * v1 + 6 * v2 + 1;
  v12 = v1 + v2 + 3;
  v13 = v1 + 4 * v2;
  if ((v4 & 2) != 0)
    v14 = v13 + 1;
  else
    v14 = v12;
  if ((v4 & 1) == 0)
    v14 = v11;
  if ((vm_page_size & 0xFFFE000) != 0)
  {
    v15 = v14 % (unsigned __int16)(vm_page_size >> 12);
    if (v15)
      v16 = (vm_page_size >> 12) - v15;
    else
      v16 = 0;
    v14 += v16;
  }
  if ((v4 & 1) != 0)
    v17 = 4;
  else
    v17 = 8;
  if (v17 <= v14)
    v17 = v14;
  v18 = v17 - 1;
  v19 = 2 * (unsigned __int16)v1;
  if ((3 * v17) >> 3 > v19)
    v19 = (3 * v17) >> 3;
  v20 = v17 + 1;
  v21 = *(_QWORD *)(result + 528);
  *(_WORD *)(result + 528) = v18;
  *(_WORD *)(result + 530) = v19;
  *(_BYTE *)(result + 532) = v20;
  *(_BYTE *)(result + 533) = 0;
  *(_WORD *)(result + 534) = 0;
  v22 = ((v19 << 16) | ((unint64_t)v20 << 32) | v18) - v21;
  if (v22)
  {
    do
      v23 = __ldxr(v10);
    while (__stxr(v23 + v22, v10));
  }
  return result;
}

mach_vm_address_t firehose_buffer_get_logging_prefs(uint64_t a1, mach_vm_size_t *a2)
{
  int v3;
  int logging_prefs;
  kern_return_t v5;
  kern_return_t v6;
  mach_vm_address_t result;
  mach_vm_address_t address;
  mach_vm_size_t size;
  mach_port_name_t v10;

  v3 = *(_DWORD *)(a1 + 1548);
  v10 = 0;
  address = 0;
  size = 0;
  if ((v3 + 1) <= 1)
  {
LABEL_16:
    result = 0;
    *a2 = 0;
    return result;
  }
  logging_prefs = firehose_send_get_logging_prefs(v3, &v10, &size);
  if (logging_prefs)
  {
    if (logging_prefs != 268435459)
    {
      if (logging_prefs == -301)
        _dispatch_sema4_create_slow_cold_2();
      _dispatch_bug(601, logging_prefs);
    }
    goto LABEL_16;
  }
  v5 = mach_vm_map(mach_task_self_, &address, size, 0, 1, v10, 0, 0, 1, 1, 2u);
  if (v5 == -301)
    _dispatch_sema4_create_slow_cold_2();
  if (v5)
  {
    _dispatch_bug(612, v5);
    address = 0;
    size = 0;
  }
  v6 = mach_port_deallocate(mach_task_self_, v10);
  if (v6 == -301)
    _dispatch_sema4_create_slow_cold_2();
  if (v6)
    _dispatch_bug(618, v6);
  result = address;
  *a2 = size;
  return result;
}

BOOL firehose_buffer_should_send_strings(int *guard)
{
  int v1;
  int v3;
  int v5;
  int should_send_strings;
  int v7;

  v1 = guard[388];
  v7 = 0;
  if (v1 == -1)
    return 0;
  if (!v1)
  {
LABEL_10:
    v5 = firehose_client_reconnect(guard, v1, 0);
    if ((v5 - 1) <= 0xFFFFFFFD)
    {
      should_send_strings = firehose_send_should_send_strings(v5, &v7);
      if (!should_send_strings)
        return v7 != 0;
      if (should_send_strings != 268435459)
      {
        if (should_send_strings == -301)
          _dispatch_sema4_create_slow_cold_2();
        _dispatch_bug(654, should_send_strings);
      }
    }
    return 0;
  }
  v3 = firehose_send_should_send_strings(v1, &v7);
  if (v3)
  {
    if (v3 != 268435459)
    {
      if (v3 == -301)
        _dispatch_sema4_create_slow_cold_2();
      _dispatch_bug(642, v3);
    }
    goto LABEL_10;
  }
  return v7 != 0;
}

uint64_t firehose_client_reconnect(int *guard, int a2, unsigned int a3)
{
  unsigned int *v6;
  unint64_t StatusReg;
  unsigned int v8;
  uint64_t v10;
  uint64_t v12;
  char v13;
  char v14;
  int *v15;
  mach_port_name_t v16;
  kern_return_t v17;
  kern_return_t memory_entry_64;
  uint64_t (*v19)(int **, memory_object_size_t *);
  int v20;
  memory_object_size_t v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  char v25;
  char v26;
  kern_return_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  kern_return_t v34;
  kern_return_t v35;
  uint64_t v36;
  char v37;
  char v38;
  mach_port_name_t v39;
  kern_return_t v40;
  kern_return_t v41;
  kern_return_t v42;
  int *v43;
  memory_object_size_t size;
  mach_port_t object_handle[2];
  mach_port_options_t options;
  mach_port_name_t name;
  unsigned int v48;
  unsigned int v49;

  *(_QWORD *)object_handle = 0;
  v6 = (unsigned int *)(guard + 391);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v8 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v6))
  {
    if (!__stxr(v8, v6))
      goto LABEL_6;
  }
  __clrex();
  _dispatch_unfair_lock_lock_slow((uint64_t)(guard + 391), 0x10000);
LABEL_6:
  v10 = guard[a3 + 388];
  if ((_DWORD)v10 == a2 && (_DWORD)v10 != -1)
  {
    if (a2)
    {
      v12 = 0;
      v13 = 1;
      do
      {
        v14 = v13;
        v15 = &guard[v12];
        v16 = v15[388];
        if (mach_port_destruct(mach_task_self_, v16, 0, (mach_port_context_t)guard) == -301)
          _dispatch_sema4_create_slow_cold_2();
        v17 = mach_port_deallocate(mach_task_self_, v16);
        if (v17 == -301)
          _dispatch_sema4_create_slow_cold_2();
        if (v17)
          _dispatch_bug(91, v17);
        v13 = 0;
        v15[388] = 0;
        v12 = 1;
      }
      while ((v14 & 1) != 0);
    }
    v43 = guard;
    size = 0x40000;
    memory_entry_64 = mach_make_memory_entry_64(mach_task_self_, &size, (memory_object_offset_t)guard, 4194305, &object_handle[1], 0);
    if (!(size >> 18))
      firehose_client_reconnect_cold_1(size);
    if (memory_entry_64)
      firehose_client_reconnect_cold_9(memory_entry_64);
    if (a2
      && (v19 = *(uint64_t (**)(int **, memory_object_size_t *))(_voucher_libtrace_hooks + 24)) != 0
      && ((v20 = v19(&v43, &size), v21 = size, !v20) ? (v22 = v43 == 0) : (v22 = 1),
          !v22 ? (v23 = size == 0) : (v23 = 1),
          !v23))
    {
      v34 = mach_make_memory_entry_64(mach_task_self_, &size, (memory_object_offset_t)v43, 4194305, object_handle, 0);
      if (v34)
        firehose_client_reconnect_cold_9(v34);
      v35 = mach_vm_deallocate(mach_task_self_, (mach_vm_address_t)v43, size);
      if (v35)
        _dispatch_bug(209, v35);
    }
    else
    {
      v21 = 0;
    }
    v24 = 0;
    v25 = 1;
    do
    {
      v26 = v25;
      name = 0;
      *(_QWORD *)&options.flags = 0x100000017;
      options.8 = 0uLL;
      v27 = mach_port_construct(mach_task_self_, &options, (mach_port_context_t)guard, &name);
      if (v27)
      {
        if (v27 == -301)
          _dispatch_sema4_create_slow_cold_2();
        firehose_buffer_create_cold_2(v27);
      }
      v25 = 0;
      *(&v48 + v24) = name;
      v24 = 1;
    }
    while ((v26 & 1) != 0);
    v10 = *(&v48 + a3);
    v28 = v48;
    v29 = v49;
    v30 = firehose_send_register(guard[387], object_handle[1], 0x40000, v48, v49, guard[390], object_handle[0], v21);
    if (v30)
    {
      if (v30 != 268435459)
        firehose_client_reconnect_cold_3(v30);
      v36 = 0;
      v37 = 1;
      do
      {
        v38 = v37;
        v39 = *(&v48 + v36);
        if (mach_port_destruct(mach_task_self_, v39, 0, (mach_port_context_t)guard) == -301)
          _dispatch_sema4_create_slow_cold_2();
        v40 = mach_port_deallocate(mach_task_self_, v39);
        if (v40 == -301)
          _dispatch_sema4_create_slow_cold_2();
        if (v40)
          _dispatch_bug(91, v40);
        v37 = 0;
        guard[v36 + 388] = -1;
        v36 = 1;
      }
      while ((v38 & 1) != 0);
      v41 = mach_port_deallocate(mach_task_self_, object_handle[1]);
      if (v41 == -301)
        _dispatch_sema4_create_slow_cold_2();
      if (v41)
        _dispatch_bug(91, v41);
      if (object_handle[0])
      {
        v42 = mach_port_deallocate(mach_task_self_, object_handle[0]);
        if (v42 == -301)
          _dispatch_sema4_create_slow_cold_2();
        if (v42)
          _dispatch_bug(91, v42);
      }
      v10 = 0xFFFFFFFFLL;
    }
    else
    {
      guard[388] = v28;
      guard[389] = v29;
    }
  }
  v31 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    v32 = __ldxr(v6);
  while (__stlxr(0, v6));
  if (v32 != v31)
    _dispatch_unfair_lock_unlock_slow((uint64_t)v6, v32);
  return v10;
}

void firehose_client_push_reply(uint64_t a1, int a2)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: firehose_push_reply should never be sent to the buffer receive port";
  qword_61258 = a2;
  __break(1u);
}

uint64_t firehose_client_push_notify_async(uint64_t a1, unint64_t a2, unint64_t a3, int a4)
{
  unint64_t v4;

  v4 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 184;
  do
    v4 = *(_QWORD *)v4;
  while (v4 && *(char **)(v4 + 8) != "firehose");
  firehose_client_merge_updates(*(_QWORD *)(v4 + 16), 1, a2, a3, a4 != 0, 0);
  return 0;
}

uint64_t firehose_client_merge_updates(uint64_t result, int a2, unint64_t a3, unint64_t a4, int a5, unint64_t *a6)
{
  unsigned __int8 *v6;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned __int16 v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  if (a5 && !*(_BYTE *)(result + 1568))
  {
    v6 = (unsigned __int8 *)(result + 1568);
    while (!__ldxr(v6))
    {
      if (!__stxr(1u, v6))
        goto LABEL_8;
    }
    __clrex();
  }
LABEL_8:
  v8 = (unint64_t *)(result + 448);
  v9 = (unint64_t *)(result + 464);
  while (1)
  {
    v10 = __ldxr(v9);
    if (a3 <= v10)
      break;
    if (!__stxr(a3, v9))
      goto LABEL_11;
  }
  __clrex();
LABEL_11:
  if (a3 <= v10)
    v11 = 0;
  else
    v11 = a3 - v10;
  v12 = (unint64_t *)(result + 488);
  while (1)
  {
    v13 = __ldxr(v12);
    if (a4 <= v13)
      break;
    if (!__stxr(a4, v12))
      goto LABEL_17;
  }
  __clrex();
LABEL_17:
  if (a4 <= v13)
    v14 = 0;
  else
    v14 = a4 - v13;
  if (v11 | (unsigned __int16)v14)
  {
    v15 = (unint64_t *)(result + 256);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 & 0xFFFF00000000 | ((unint64_t)(v14 + HIWORD(v16)) << 48) | ((unint64_t)(unsigned __int16)(v11 + WORD1(v16)) << 16) | (unsigned __int16)v16, v15));
    v17 = v11 | ((unint64_t)(unsigned __int16)v14 << 16);
    do
      v18 = __ldxr(v8);
    while (__stlxr(v18 + v17, v8));
    if (a6)
      *a6 = v18 + v17;
    if (a2)
    {
      if ((_WORD)v14)
      {
        v19 = (unint64_t *)(result + 496);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      if (v11)
      {
        v21 = (unint64_t *)(result + 472);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
    }
  }
  else if (a6)
  {
    *a6 = *v8;
  }
  return result;
}

uint64_t firehose_buffer_update_limits(uint64_t a1)
{
  unsigned int *v2;
  unint64_t StatusReg;
  unsigned int v4;
  uint64_t result;
  unsigned int v7;
  unsigned int v8;

  v2 = (unsigned int *)(a1 + 536);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v4 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v2))
  {
    if (!__stxr(v4, v2))
      goto LABEL_6;
  }
  __clrex();
  _dispatch_unfair_lock_lock_slow(a1 + 536, 0x10000);
LABEL_6:
  result = firehose_buffer_update_limits_unlocked(a1);
  v7 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    v8 = __ldxr(v2);
  while (__stlxr(0, v2));
  if (v8 != v7)
    return _dispatch_unfair_lock_unlock_slow((uint64_t)v2, v8);
  return result;
}

void firehose_buffer_ring_enqueue(int *guard, unsigned int a2)
{
  unint64_t v3;
  int *v4;
  unsigned __int16 *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t StatusReg;
  uint64_t v9;
  int v10;
  unsigned __int16 *v11;
  unsigned __int16 v12;
  int v13;
  int v14;
  mach_port_context_t v15;
  int v16;
  int v17;
  mach_port_t v18;
  int v19;
  uint64_t v21;
  int v22;
  int *v23;
  unsigned __int16 *v24;
  int v25;
  unsigned __int16 *v26;
  unint64_t v27;
  unsigned int v28;

  v3 = HIBYTE(guard[1024 * (unint64_t)a2 + 1]) & 2;
  v4 = guard + 32;
  v5 = (unsigned __int16 *)(guard + 96);
  if ((guard[1024 * (unint64_t)a2 + 1] & 0x2000000) != 0)
    v6 = 96;
  else
    v6 = 80;
  if ((guard[1024 * (unint64_t)a2 + 1] & 0x2000000) == 0)
  {
    v5 = (unsigned __int16 *)(guard + 80);
    v4 = guard;
  }
  v7 = LOWORD(guard[v6]);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_7:
  v9 = v7;
  v10 = v7 & 0xFFFFFFC0;
  *(_QWORD *)(StatusReg + 976) = v5;
  v11 = (unsigned __int16 *)v4 + (v7 & 0x3F);
  v12 = v7 & 0xFFC0 | a2;
  do
  {
    v13 = __ldxr(v11);
    if (v13 != (unsigned __int16)v10)
    {
      __clrex();
      *(_QWORD *)(StatusReg + 976) = 0;
      v7 = LOWORD(guard[v6]);
      if ((_DWORD)v7 == (unsigned __int16)v9)
      {
        v14 = -1024;
        while (*v11 != (unsigned __int16)v10)
        {
          if (v14 < 0)
          {
            __yield();
          }
          else
          {
            v28 = a2;
            v23 = v4;
            v24 = v5;
            v26 = v11;
            v27 = StatusReg;
            v22 = v10;
            v21 = v9;
            v25 = v14;
            _pthread_yield_to_enqueuer_4dispatch(122, v5, (v14 + 1));
            v14 = v25;
            v9 = v21;
            v11 = v26;
            StatusReg = v27;
            v10 = v22;
            v4 = v23;
            v5 = v24;
            a2 = v28;
          }
          v7 = LOWORD(guard[v6]);
          ++v14;
          if ((_DWORD)v7 != (unsigned __int16)v9)
            goto LABEL_7;
        }
        v7 = v9;
      }
      goto LABEL_7;
    }
  }
  while (__stxr(v12, v11));
  do
  {
    v7 = __ldxr(v5);
    if ((_DWORD)v7 != (unsigned __int16)v9)
    {
      __clrex();
      *v11 = v10;
      *(_QWORD *)(StatusReg + 976) = 0;
      goto LABEL_7;
    }
  }
  while (__stlxr(v9 + 1, v5));
  *(_QWORD *)(StatusReg + 976) = 0;
  v15 = (mach_port_context_t)guard + 2 * v3;
  v16 = *(_DWORD *)(v15 + 1552);
  if (v16 == -1)
    return;
  if (v16)
  {
    v17 = firehose_send_push_async(*(_DWORD *)(v15 + 1552), 0, 0);
    if (v17 <= 268435458)
    {
      if (!v17)
        return;
      if (v17 == -301)
      {
        qword_61228 = (uint64_t)"MIG_REPLY_MISMATCH";
        qword_61258 = -301;
        __break(1u);
LABEL_42:
        qword_61228 = (uint64_t)"MIG_REPLY_MISMATCH";
        qword_61258 = -301;
        __break(1u);
        return;
      }
      goto LABEL_31;
    }
    if (v17 != 268435459)
    {
      if (v17 == 268435460)
        return;
LABEL_31:
      _dispatch_bug(476, v17);
    }
  }
  v18 = firehose_client_reconnect(guard, v16, v3 >> 1);
  if (v18 - 1 <= 0xFFFFFFFD)
  {
    v19 = firehose_send_push_async(v18, 0, 0);
    if ((v19 - 268435459) >= 2 && v19 != 0)
    {
      if (v19 != -301)
      {
        _dispatch_bug(488, v19);
        return;
      }
      goto LABEL_42;
    }
  }
}

int *firehose_buffer_force_connect(int *result)
{
  if (!result[388])
    return (int *)firehose_client_reconnect(result, 0, 0);
  return result;
}

uint64_t firehose_buffer_tracepoint_reserve_slow(uint64_t a1, unsigned __int8 *a2, _QWORD *a3)
{
  unsigned __int8 *v4;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unsigned int *v16;
  unint64_t v17;
  unint64_t StatusReg;
  unint64_t v19;
  unint64_t v20;
  unsigned __int16 v21;
  unint64_t v22;
  unsigned __int8 *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  __int16 v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int v35;
  unsigned int *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int *v52;
  char v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unsigned __int8 v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int *v72;
  unsigned int *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  unint64_t v81;
  unint64_t v82;

  v4 = a2;
  v6 = a2[14] & 1;
  v7 = (unint64_t *)(a1 + 448);
  firehose_drain_notifications_once(a1);
  v8 = *(_QWORD *)(a1 + 448);
  v82 = v8;
  do
  {
    if (!*(_WORD *)((unint64_t)&v82 | (2 * v6)))
    {
      v30 = 0;
      v50 = 0;
      if ((v4[14] & 4) == 0)
        return firehose_buffer_stream_chunk_install(a1, (uint64_t)v4, a3, v30);
      goto LABEL_65;
    }
    v81 = v8;
    --*(_WORD *)((unint64_t)&v81 | (2 * v6));
    v9 = v81;
    while (1)
    {
      v10 = __ldaxr(v7);
      if (v10 != v8)
        break;
      if (!__stxr(v9, v7))
      {
        v11 = 1;
        goto LABEL_8;
      }
    }
    v11 = 0;
    __clrex();
LABEL_8:
    v82 = v10;
    v8 = v10;
  }
  while (!v11);
  v80 = v6;
  v12 = v81;
  v13 = (unint64_t *)(a1 + 256);
  v14 = a1 + 128;
  v15 = (unint64_t *)(a1 + 456);
  v16 = (unsigned int *)(a1 + 536);
  v17 = HIDWORD(v81);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    v19 = __ldxr(v13);
    v20 = HIDWORD(v19);
    if ((unsigned __int16)v19 != WORD1(v19))
    {
      v21 = v19 + 1;
      v22 = HIDWORD(v19);
      goto LABEL_12;
    }
    if (HIWORD(v19) == WORD2(v19))
      break;
    LOWORD(v22) = WORD2(v19) + 1;
    v21 = v19;
LABEL_12:
    if (!__stxr(v19 & 0xFFFF0000FFFF0000 | ((unint64_t)(unsigned __int16)v22 << 32) | v21, v13))
    {
      v23 = v4;
      v24 = a3;
      if ((unsigned __int16)v22 == WORD2(v19))
      {
        v25 = a1;
      }
      else
      {
        v19 >>= 32;
        v25 = v14;
      }
      v26 = v19 & 0x3F;
      v27 = *(_WORD *)(v25 + 2 * v26);
      v28 = v27 & 0x3F;
      if ((v27 & 0x3F) == 0)
      {
        v35 = -1024;
        do
        {
          if (v35 < 0)
          {
            __yield();
          }
          else
          {
            v72 = v16;
            v74 = StatusReg;
            v70 = v14;
            v71 = v12;
            v77 = v17;
            v69 = v35;
            thread_switch(0, 4, v35 + 1);
            v35 = v69;
            StatusReg = v74;
            v17 = v77;
            v14 = v70;
            v12 = v71;
            v16 = v72;
          }
          v27 = *(_WORD *)(v25 + 2 * v26);
          ++v35;
          v28 = v27 & 0x3F;
        }
        while ((v27 & 0x3F) == 0);
      }
      v29 = (unsigned __int16)v22;
      v30 = v28;
      v31 = a1 + ((unint64_t)v28 << 12);
      if (v29 == (unsigned __int16)v20 && *(_BYTE *)(v31 + 6) == 3)
      {
        do
          v32 = __ldxr(v15);
        while (__stxr(v32 & ~(1 << v30), v15));
      }
      *(_QWORD *)v31 = 0x100000000000000;
      *(_WORD *)(v25 + 2 * v26) = (v27 & 0xFFC0) + 64;
      a3 = v24;
      v4 = v23;
      if (v30 < v17)
        return firehose_buffer_stream_chunk_install(a1, (uint64_t)v4, a3, v30);
      v33 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
      while (!__ldaxr(v16))
      {
        if (!__stxr(v33, v16))
          goto LABEL_34;
      }
      __clrex();
      v36 = v16;
      v37 = v12;
      v38 = v14;
      v75 = StatusReg;
      v78 = v17;
      _dispatch_unfair_lock_lock_slow((uint64_t)v16, 0x10000);
      StatusReg = v75;
      v17 = v78;
      v14 = v38;
      v12 = v37;
      v16 = v36;
LABEL_34:
      if (*(unsigned __int8 *)(a1 + 532) <= v30)
      {
        v39 = *(_QWORD *)(a1 + 520) & ~(1 << v30);
        *(_QWORD *)(a1 + 520) = v39;
        v40 = v30 & 0x3C;
        if (((v39 >> (v30 & 0x3C)) & 0xF) == 0)
        {
          v73 = v16;
          v41 = StatusReg;
          v42 = v12;
          v43 = v14;
          v44 = v17;
          madvise((void *)(a1 + (v40 << 12)), 0x4000uLL, 5);
          StatusReg = v41;
          v17 = v44;
          v14 = v43;
          v12 = v42;
          v16 = v73;
        }
        v30 = 0;
      }
      v45 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
      do
        v46 = __ldxr(v16);
      while (__stlxr(0, v16));
      if (v46 != v45)
      {
        v47 = v16;
        v48 = v12;
        v49 = v14;
        v76 = StatusReg;
        v79 = v17;
        _dispatch_unfair_lock_unlock_slow((uint64_t)v16, v46);
        StatusReg = v76;
        v17 = v79;
        v14 = v49;
        v12 = v48;
        v16 = v47;
      }
      if ((_DWORD)v30)
        return firehose_buffer_stream_chunk_install(a1, (uint64_t)v4, a3, v30);
    }
  }
  v52 = v16;
  __clrex();
  v53 = BYTE4(v12);
  v54 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v55 = *(_DWORD *)(v54 + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v16))
  {
    if (!__stxr(v55, v16))
      goto LABEL_51;
  }
  __clrex();
  _dispatch_unfair_lock_lock_slow((uint64_t)v16, 0x10000);
LABEL_51:
  v57 = *(_QWORD *)(a1 + 520);
  v58 = v57 | (-1 << v53);
  if (v58 == -1)
  {
    v30 = 0;
  }
  else
  {
    v30 = __clz(__rbit64(~v58));
    *(_QWORD *)(a1 + 520) = v57 | (1 << v30);
  }
  v59 = *(_DWORD *)(v54 + 24) & 0xFFFFFFFC;
  do
    v60 = __ldxr(v52);
  while (__stlxr(0, v52));
  if (v60 != v59)
    _dispatch_unfair_lock_unlock_slow((uint64_t)v52, v60);
  if ((_DWORD)v30)
    return firehose_buffer_stream_chunk_install(a1, (uint64_t)v4, a3, v30);
  if ((v4[14] & 4) == 0)
  {
    v61 = 0x10000;
    if (!v80)
      v61 = 1;
    do
    {
      v30 = 0;
      v62 = __ldxr(v7);
    }
    while (__stxr(v62 + v61, v7));
    return firehose_buffer_stream_chunk_install(a1, (uint64_t)v4, a3, v30);
  }
  v50 = 1;
LABEL_65:
  v63 = v4[12];
  v64 = a1 + (v63 << 7);
  v65 = (unint64_t *)(v64 + 640);
  if ((*(_QWORD *)(v64 + 640) & 0x400000000000) != 0)
  {
    do
    {
      v66 = __ldxr(v65);
      v67 = v66 >> 40;
      v68 = BYTE5(v66) | 0xC0;
    }
    while (__stxr(v66 & 0xFFFF00FFFFFFFFFDLL | ((unint64_t)(BYTE5(v66) | 0xC0u) << 40), v65));
  }
  else
  {
    *(_QWORD *)(v64 + 648) = mach_continuous_time();
    do
    {
      v66 = __ldxr(v65);
      v67 = v66 >> 40;
      v68 = BYTE5(v66) | 0xC0;
    }
    while (__stlxr(v66 & 0xFFFF00FFFFFFFFFDLL | ((unint64_t)(BYTE5(v66) | 0xC0u) << 40), v65));
  }
  if (MEMORY[0xFFFFFC100])
  {
    kdebug_trace(772145168, v63, *(_QWORD *)(a1 + (v63 << 7) + 648), v66 & 0xFFFF00FFFFFFFFFFLL | ((unint64_t)v67 << 40), v66 & 0xFFFF00FFFFFFFFFDLL | ((unint64_t)v68 << 40));
    if ((v66 & 2) != 0)
      goto LABEL_74;
  }
  else
  {
    if ((v66 & 2) == 0)
      goto LABEL_72;
LABEL_74:
    _dispatch_gate_broadcast_slow((uint64_t)v65, v66);
  }
LABEL_72:
  v4[13] = v50;
  return firehose_buffer_tracepoint_reserve_wait_for_chunks_from_logd(a1, (uint64_t)v4, a3);
}

BOOL firehose_drain_notifications_once(uint64_t a1)
{
  mach_msg_return_t v2;
  mach_msg_return_t v3;
  unint64_t StatusReg;
  char v5;
  int v6;
  _QWORD v8[3];
  _BYTE msg[124];
  _DWORD v10[8];
  int v11;

  memset(msg, 0, sizeof(msg));
  v2 = mach_msg((mach_msg_header_t *)msg, 67109126, 0, 0x7Cu, *(_DWORD *)(a1 + 1560), 0, 0);
  v3 = v2;
  if (v2)
  {
    if (v2 != 268451843)
      firehose_drain_notifications_once_cold_2(v2);
  }
  else
  {
    v8[1] = "firehose";
    v8[2] = a1;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v8[0] = *(_QWORD *)(StatusReg + 184);
    *(_QWORD *)(StatusReg + 184) = v8;
    v5 = msg[0];
    memset(v10, 0, sizeof(v10));
    v11 = 0;
    if (!firehoseReply_server(msg, (uint64_t)v10))
      goto LABEL_12;
    if (v10[0] >= 0)
      v6 = v11;
    else
      v6 = 0;
    if (!v6 && (v5 & 0x1F) == 0x12)
      firehose_drain_notifications_once_cold_1((uint64_t)v10);
    if (v6 != -305 && v6)
    {
LABEL_12:
      *(_DWORD *)&msg[8] = 0;
      mach_msg_destroy((mach_msg_header_t *)msg);
    }
    *(_QWORD *)(StatusReg + 184) = v8[0];
  }
  return v3 == 0;
}

unint64_t firehose_buffer_stream_chunk_install(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int16 v19;
  __int16 v20;
  unsigned __int16 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int16 v39;
  __int16 v40;
  unsigned __int16 v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned __int8 *v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54;
  char v55;

  v6 = *(unsigned __int8 *)(a2 + 12);
  v7 = (unint64_t *)(a1 + (v6 << 7) + 640);
  if ((_DWORD)a4)
  {
    v8 = a4;
    v10 = a4;
    v11 = a1 + ((unint64_t)a4 << 12);
    if (*(_QWORD *)v11)
      bzero((void *)(v11 + 16), 0xFF0uLL);
    if (*(_BYTE *)(a2 + 12) == 3)
    {
      v12 = (unint64_t *)(a1 + 456);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 | (1 << v10), v12));
    }
    v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) - 8);
    v15 = v10 << 32;
    if ((*v7 & 0x3F0000000000) == 0)
    {
      if (*(_QWORD *)a2 >= 0x1000000000uLL)
        v16 = *(_QWORD *)a2 - 0x1000000000;
      else
        v16 = 0;
      *(_QWORD *)(v11 + 8) = v16;
      v17 = v11 + 16;
      v18 = *(unsigned __int16 *)(a2 + 8);
      v19 = v18 + 24;
      if ((v18 & 7) != 0)
        v19 = (v18 & 0xFFF8) + 32;
      v20 = v19 + 16;
      v21 = 4096 - *(_WORD *)(a2 + 10);
      *(_QWORD *)(v11 + 32) = (*(_QWORD *)a2 - v16) | (v18 << 48);
      *(_QWORD *)(v11 + 24) = v14;
      v54 = *(_BYTE *)(a2 + 12);
      v52 = 2 * (*(_BYTE *)(a2 + 14) & 3);
      *(_WORD *)v11 = v20;
      *(_WORD *)(v11 + 2) = v21;
      *(_BYTE *)(v11 + 4) = 1;
      *(_BYTE *)(v11 + 5) = 0;
      *(_BYTE *)(v11 + 6) = v54;
      *(_BYTE *)(v11 + 7) = v52;
      if (a3)
        *a3 = v11 + v21;
      while (1)
      {
        v22 = __ldxr(v7);
        if ((v22 & 0x3F0000000000) != 0)
          break;
        v23 = HIWORD(v22);
        v24 = HIWORD(v22) + 1;
        v25 = __stlxr(v15 | (v24 << 48), v7);
        if (!(_DWORD)v25)
        {
          v26 = v22 >> 40;
          goto LABEL_18;
        }
      }
      __clrex();
    }
    atomic_load(v7);
    v30 = a1 + (v6 << 7);
    v31 = *(_QWORD *)(v30 + 648);
    *(_QWORD *)(v30 + 648) = 0;
    v32 = mach_continuous_time();
    v33 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 >= v31)
      v33 = v31;
    v34 = v33 >= 0x1000000000;
    v35 = v33 - 0x1000000000;
    if (!v34)
      v35 = 0;
    *(_QWORD *)(v11 + 8) = v35;
    v36 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 - v35) >> 48)
    {
      v35 = v36 - 0x1000000000;
      *(_QWORD *)(v11 + 8) = v36 - 0x1000000000;
    }
    v37 = v31 - v35;
    if ((v31 - v35) >> 48)
      v37 = *(_QWORD *)a2 - v35;
    *(_QWORD *)(v11 + 32) = v37 | 0x18000000000000;
    *(_QWORD *)(v11 + 24) = v14;
    v17 = v11 + 64;
    v38 = *(unsigned __int16 *)(a2 + 8);
    v39 = v38 + 24;
    if ((v38 & 7) != 0)
      v39 = (v38 & 0xFFF8) + 32;
    v40 = v39 + 64;
    v41 = 4096 - *(_WORD *)(a2 + 10);
    *(_QWORD *)(v11 + 80) = (*(_QWORD *)a2 - v35) | (v38 << 48);
    *(_QWORD *)(v11 + 72) = v14;
    v55 = *(_BYTE *)(a2 + 12);
    v53 = 2 * (*(_BYTE *)(a2 + 14) & 3);
    *(_WORD *)v11 = v40;
    *(_WORD *)(v11 + 2) = v41;
    *(_BYTE *)(v11 + 4) = 1;
    *(_BYTE *)(v11 + 5) = 0;
    *(_BYTE *)(v11 + 6) = v55;
    *(_BYTE *)(v11 + 7) = v53;
    if (a3)
      *a3 = v11 + v41;
    do
    {
      v22 = __ldxr(v7);
      v23 = HIWORD(v22);
      v24 = HIWORD(v22) + 1;
      v25 = __stlxr(v15 | (v24 << 48), v7);
    }
    while ((_DWORD)v25);
    v26 = v22 >> 40;
    *(_QWORD *)(v11 + 40) = v31;
    *(_QWORD *)(v11 + 48) = v32;
    *(_QWORD *)(v11 + 56) = (v22 >> 40) & 0x3F;
    atomic_store(((unint64_t)*(unsigned __int8 *)(a2 + 12) << 32) | 7, (unint64_t *)(v11 + 16));
  }
  else if ((*v7 & 0x400000000000) != 0)
  {
    do
    {
      v22 = __ldxr(v7);
      v51 = (v22 >> 40) & 0x3F;
      if (v51 >= 0x3E)
        LODWORD(v51) = 62;
      v25 = ((_DWORD)v51 + 1) | 0x40u;
    }
    while (__stxr(v22 & 0xFFFF000000000000 | (v25 << 40), v7));
    v17 = 0;
    v8 = 0;
    v26 = v22 >> 40;
    v23 = HIWORD(v22);
    v24 = HIWORD(v22);
  }
  else
  {
    *(_QWORD *)(a1 + (v6 << 7) + 648) = mach_continuous_time();
    do
    {
      v22 = __ldxr(v7);
      v42 = (v22 >> 40) & 0x3F;
      if (v42 >= 0x3E)
        LODWORD(v42) = 62;
      v25 = ((_DWORD)v42 + 1) | 0x40u;
    }
    while (__stlxr(v22 & 0xFFFF000000000000 | (v25 << 40), v7));
    v17 = 0;
    v8 = 0;
    v26 = v22 >> 40;
    v23 = HIWORD(v22);
    v24 = HIWORD(v22);
  }
LABEL_18:
  v27 = *(_QWORD *)a2;
  v28 = *(_QWORD *)(a2 + 8);
  if (MEMORY[0xFFFFFC100])
  {
    v43 = v17;
    kdebug_trace(772145172, v27, v28, (v23 << 48) | ((unint64_t)v26 << 40) | v22 & 0xFFFFFFFFFFLL, (v24 << 48) | (v25 << 40) | (v8 << 32));
    v17 = v43;
  }
  if ((v22 & 3) != 0)
  {
    v44 = (uint64_t)v7;
    v45 = v17;
    _dispatch_gate_broadcast_slow(v44, v22);
    v17 = v45;
  }
  if ((~v22 & 0xFF00000000) == 0)
  {
    v46 = v17;
    firehose_buffer_update_limits(a1);
    v17 = v46;
  }
  if (*(_BYTE *)(a1 + 1568) == 1)
  {
    v47 = (unsigned __int8 *)(a1 + 1568);
    while (1)
    {
      v48 = __ldxr(v47);
      if (v48 != 1)
        break;
      if (!__stxr(2u, v47))
      {
        v49 = a1;
        v50 = v17;
        firehose_client_start_quarantine(v49);
        return v50;
      }
    }
    __clrex();
  }
  return v17;
}

uint64_t firehose_buffer_tracepoint_reserve_wait_for_chunks_from_logd(uint64_t guard, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  int v7;
  BOOL v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unsigned int *v12;
  uint64_t v13;
  mach_port_context_t v14;
  unint64_t StatusReg;
  unint64_t v16;
  unint64_t v17;
  unsigned __int16 v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int16 v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v30;
  unsigned int *v31;
  uint64_t v32;
  mach_port_context_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  mach_port_context_t v38;
  unint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int *v43;
  unint64_t v44;
  unsigned int v45;
  unsigned int *v47;
  uint64_t v48;
  mach_port_context_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t result;
  _DWORD *v54;
  _WORD *v55;
  uint64_t v56;
  _WORD *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  int v62;
  uint64_t v63;
  unsigned int *v64;
  mach_port_context_t v65;
  _DWORD *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;

  v5 = *(_BYTE *)(a2 + 14) & 1;
  v6 = (unint64_t *)(guard + 448);
  v7 = -6;
  do
    v8 = __CFADD__(v7++, 1);
  while (!v8 && firehose_drain_notifications_once(guard));
  v72 = 0;
  if (*(_BYTE *)(a2 + 13))
  {
    LOBYTE(v9) = *(_BYTE *)(guard + 452);
  }
  else
  {
    v72 = *(_QWORD *)(guard + 448);
    v54 = (_DWORD *)(guard + 4 * v5 + 1552);
    v55 = (_WORD *)((unint64_t)&v74 | (2 * v5));
    v56 = v5;
    v57 = (_WORD *)((unint64_t)&v73 | (2 * v5));
LABEL_62:
    v58 = v72;
    v74 = v72;
    do
    {
      if (!*v55)
      {
        if ((*(_BYTE *)(a2 + 14) & 2) != 0)
          __FIREHOSE_CLIENT_THROTTLED_DUE_TO_HEAVY_LOGGING__(guard, v56, &v72);
        else
          firehose_client_send_push_and_wait(guard, v56, &v72);
        result = 0;
        if (*v54 == -1)
          return result;
        goto LABEL_62;
      }
      v73 = v58;
      --*v57;
      v59 = v73;
      while (1)
      {
        v60 = __ldaxr(v6);
        if (v60 != v58)
          break;
        if (!__stxr(v59, v6))
        {
          v61 = 1;
          goto LABEL_69;
        }
      }
      v61 = 0;
      __clrex();
LABEL_69:
      v74 = v60;
      v58 = v60;
    }
    while ((v61 & 1) == 0);
    v72 = v73;
    v9 = HIDWORD(v73);
    v5 = v56;
  }
  v10 = (unint64_t *)(guard + 256);
  v11 = (unint64_t *)(guard + 456);
  v12 = (unsigned int *)(guard + 536);
  v13 = -1 << v9;
  v70 = v5;
  v14 = guard + 4 * v5 + 1552;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    while (1)
    {
      v16 = __ldxr(v10);
      v17 = HIDWORD(v16);
      if ((unsigned __int16)v16 != WORD1(v16))
      {
        v18 = v16 + 1;
        v19 = HIDWORD(v16);
        goto LABEL_9;
      }
      if (HIWORD(v16) == WORD2(v16))
        break;
      LOWORD(v19) = WORD2(v16) + 1;
      v18 = v16;
LABEL_9:
      if (!__stxr(v16 & 0xFFFF0000FFFF0000 | ((unint64_t)(unsigned __int16)v19 << 32) | v18, v10))
      {
        if ((unsigned __int16)v19 == WORD2(v16))
        {
          v20 = guard;
        }
        else
        {
          v16 >>= 32;
          v20 = guard + 128;
        }
        v21 = v16 & 0x3F;
        v22 = *(_WORD *)(v20 + 2 * v21);
        v23 = v22 & 0x3F;
        if ((v22 & 0x3F) == 0)
        {
          v30 = -1024;
          do
          {
            if (v30 < 0)
            {
              __yield();
            }
            else
            {
              v63 = v13;
              v64 = v12;
              v65 = v14;
              v67 = StatusReg;
              v62 = v30;
              thread_switch(0, 4, v30 + 1);
              v30 = v62;
              v14 = v65;
              StatusReg = v67;
              v13 = v63;
              v12 = v64;
            }
            v22 = *(_WORD *)(v20 + 2 * v21);
            ++v30;
            v23 = v22 & 0x3F;
          }
          while ((v22 & 0x3F) == 0);
        }
        v24 = (unsigned __int16)v19;
        v25 = v23;
        v26 = guard + ((unint64_t)v23 << 12);
        if (v24 == (unsigned __int16)v17 && *(_BYTE *)(v26 + 6) == 3)
        {
          do
            v27 = __ldxr(v11);
          while (__stxr(v27 & ~(1 << v25), v11));
        }
        *(_QWORD *)v26 = 0x100000000000000;
        *(_WORD *)(v20 + 2 * v21) = (v22 & 0xFFC0) + 64;
        if (v25 < v9)
          return firehose_buffer_stream_chunk_install(guard, a2, a3, v25);
        v28 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        while (!__ldaxr(v12))
        {
          if (!__stxr(v28, v12))
            goto LABEL_31;
        }
        __clrex();
        v31 = v12;
        v32 = v13;
        v33 = v14;
        v68 = StatusReg;
        _dispatch_unfair_lock_lock_slow((uint64_t)v12, 0x10000);
        StatusReg = v68;
        v14 = v33;
        v13 = v32;
        v12 = v31;
LABEL_31:
        if (*(unsigned __int8 *)(guard + 532) <= v25)
        {
          v34 = *(_QWORD *)(guard + 520) & ~(1 << v25);
          *(_QWORD *)(guard + 520) = v34;
          v35 = v25 & 0x3C;
          if (((v34 >> (v25 & 0x3C)) & 0xF) == 0)
          {
            v36 = v12;
            v37 = v13;
            v38 = v14;
            v39 = StatusReg;
            madvise((void *)(guard + (v35 << 12)), 0x4000uLL, 5);
            StatusReg = v39;
            v14 = v38;
            v13 = v37;
            v12 = v36;
          }
          v25 = 0;
        }
        v40 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        do
          v41 = __ldxr(v12);
        while (__stlxr(0, v12));
        if (v41 != v40)
        {
          v47 = v12;
          v48 = v13;
          v49 = v14;
          v69 = StatusReg;
          _dispatch_unfair_lock_unlock_slow((uint64_t)v12, v41);
          StatusReg = v69;
          v14 = v49;
          v13 = v48;
          v12 = v47;
        }
        if ((_DWORD)v25)
          return firehose_buffer_stream_chunk_install(guard, a2, a3, v25);
      }
    }
    v66 = (_DWORD *)v14;
    v42 = v13;
    v43 = v12;
    __clrex();
    v44 = StatusReg;
    v45 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    while (!__ldaxr(v12))
    {
      if (!__stxr(v45, v12))
        goto LABEL_46;
    }
    __clrex();
    _dispatch_unfair_lock_lock_slow((uint64_t)v12, 0x10000);
LABEL_46:
    v50 = *(_QWORD *)(guard + 520);
    if ((v50 | v42) == 0xFFFFFFFFFFFFFFFFLL)
    {
      v25 = 0;
    }
    else
    {
      v25 = __clz(__rbit64(~(v50 | v42)));
      *(_QWORD *)(guard + 520) = v50 | (1 << v25);
    }
    v51 = *(_DWORD *)(v44 + 24) & 0xFFFFFFFC;
    do
      v52 = __ldxr(v43);
    while (__stlxr(0, v43));
    if (v52 == v51)
    {
      if ((_DWORD)v25)
        return firehose_buffer_stream_chunk_install(guard, a2, a3, v25);
    }
    else
    {
      _dispatch_unfair_lock_unlock_slow((uint64_t)v43, v52);
      if ((_DWORD)v25)
        return firehose_buffer_stream_chunk_install(guard, a2, a3, v25);
    }
    if ((*(_BYTE *)(a2 + 14) & 2) != 0)
      __FIREHOSE_CLIENT_THROTTLED_DUE_TO_HEAVY_LOGGING__(guard, v70, 0);
    else
      firehose_client_send_push_and_wait(guard, v70, 0);
    v14 = (mach_port_context_t)v66;
    v12 = v43;
    v13 = v42;
    StatusReg = v44;
  }
  while (*v66 != -1);
  v25 = 0;
  return firehose_buffer_stream_chunk_install(guard, a2, a3, v25);
}

void firehose_client_start_quarantine(uint64_t a1)
{
  void (*v1)(void);
  uint64_t v3;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BOOL4 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _BOOL4 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _BOOL4 v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;

  if (*(uint64_t *)_voucher_libtrace_hooks >= 5)
  {
    v1 = *(void (**)(void))(_voucher_libtrace_hooks + 40);
    if (v1)
    {
      v1();
      *(_BYTE *)(a1 + 1569) = 1;
      v3 = *(_QWORD *)(a1 + 768);
      if ((~v3 & 0xFF00000000) == 0 || BYTE4(*(_QWORD *)(a1 + 768)) == 0)
      {
        if (!*(_DWORD *)(a1 + 1552))
          firehose_client_reconnect((int *)a1, 0, 0);
      }
      else
      {
        v5 = (unint64_t *)(a1 + 768);
        v6 = (unint64_t *)(a1 + ((unint64_t)BYTE4(v3) << 12));
        v7 = v6[1];
        do
        {
          v8 = __ldxr(v6);
          if (!v8 || (v8 & 0x1FF000000000000) != 0x1000000000000)
            goto LABEL_27;
          v9 = v8 >> 16;
          v11 = (unsigned __int16)v8 + 25 > WORD1(v8) || v7 < 0xFFFF000000000000;
          v12 = v8 + 0x100000020;
          v13 = ((unsigned __int16)(v8 + 32) + 40 > (v8 + 32) >> 16) | ((v8 + 0x100000020) >> 56);
          if (v11)
          {
            v12 = v8;
            v13 = HIBYTE(v8) | 1;
          }
          else
          {
            v9 = (v8 + 0x100000020) >> 16;
          }
        }
        while (__stxr(((_DWORD)v9 << 16) | v12 & 0xFFFFFF00000000 | (v13 << 56) | (unsigned __int16)v12, v6));
        if (!v11)
        {
          if (!(_WORD)v8)
            goto LABEL_28;
          qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Allocation should always fail";
          qword_61258 = (unsigned __int16)v8;
          __break(1u);
LABEL_27:
          __clrex();
          goto LABEL_28;
        }
        if ((v12 & 0xFF00000000) == 0)
          firehose_buffer_ring_enqueue((int *)a1, BYTE4(v3));
LABEL_28:
        while (1)
        {
          v14 = __ldxr(v5);
          if (v14 != v3)
            break;
          if (!__stxr(v3 & 0xFFFFFF00FFFFFFFFLL, v5))
            goto LABEL_32;
        }
        __clrex();
      }
LABEL_32:
      v15 = *(_QWORD *)(a1 + 640);
      if ((~v15 & 0xFF00000000) == 0 || BYTE4(*(_QWORD *)(a1 + 640)) == 0)
      {
        if (!*(_DWORD *)(a1 + 1552))
          firehose_client_reconnect((int *)a1, 0, 0);
      }
      else
      {
        v17 = (unint64_t *)(a1 + 640);
        v18 = (unint64_t *)(a1 + ((unint64_t)BYTE4(v15) << 12));
        v19 = v18[1];
        do
        {
          v20 = __ldxr(v18);
          if (!v20 || (v20 & 0x1FF000000000000) != 0)
            goto LABEL_56;
          v21 = v20 >> 16;
          v23 = (unsigned __int16)v20 + 25 > WORD1(v20) || v19 < 0xFFFF000000000000;
          v24 = v20 + 0x100000020;
          v25 = ((unsigned __int16)(v20 + 32) + 40 > (v20 + 32) >> 16) | ((v20 + 0x100000020) >> 56);
          if (v23)
          {
            v24 = v20;
            v25 = HIBYTE(v20) | 1;
          }
          else
          {
            v21 = (v20 + 0x100000020) >> 16;
          }
        }
        while (__stxr(((_DWORD)v21 << 16) | v24 & 0xFFFFFF00000000 | (v25 << 56) | (unsigned __int16)v24, v18));
        if (!v23)
        {
          if (!(_WORD)v20)
            goto LABEL_57;
          qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Allocation should always fail";
          qword_61258 = (unsigned __int16)v20;
          __break(1u);
LABEL_56:
          __clrex();
          goto LABEL_57;
        }
        if ((v24 & 0xFF00000000) == 0)
          firehose_buffer_ring_enqueue((int *)a1, BYTE4(v15));
LABEL_57:
        while (1)
        {
          v26 = __ldxr(v17);
          if (v26 != v15)
            break;
          if (!__stxr(v15 & 0xFFFFFF00FFFFFFFFLL, v17))
            goto LABEL_61;
        }
        __clrex();
      }
LABEL_61:
      v27 = *(_QWORD *)(a1 + 896);
      if ((~v27 & 0xFF00000000) == 0 || BYTE4(*(_QWORD *)(a1 + 896)) == 0)
      {
        if (!*(_DWORD *)(a1 + 1552))
          firehose_client_reconnect((int *)a1, 0, 0);
      }
      else
      {
        v29 = (unint64_t *)(a1 + 896);
        v30 = (unint64_t *)(a1 + ((unint64_t)BYTE4(v27) << 12));
        v31 = v30[1];
        do
        {
          v32 = __ldxr(v30);
          if (!v32 || (v32 & 0x1FF000000000000) != 0x2000000000000)
            goto LABEL_85;
          v33 = v32 >> 16;
          v35 = (unsigned __int16)v32 + 25 > WORD1(v32) || v31 < 0xFFFF000000000000;
          v36 = v32 + 0x100000020;
          v37 = ((unsigned __int16)(v32 + 32) + 40 > (v32 + 32) >> 16) | ((v32 + 0x100000020) >> 56);
          if (v35)
          {
            v36 = v32;
            v37 = HIBYTE(v32) | 1;
          }
          else
          {
            v33 = (v32 + 0x100000020) >> 16;
          }
        }
        while (__stxr(((_DWORD)v33 << 16) | v36 & 0xFFFFFF00000000 | (v37 << 56) | (unsigned __int16)v36, v30));
        if (!v35)
        {
          if (!(_WORD)v32)
            goto LABEL_86;
          qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Allocation should always fail";
          qword_61258 = (unsigned __int16)v32;
          __break(1u);
LABEL_85:
          __clrex();
          goto LABEL_86;
        }
        if ((v36 & 0xFF00000000) == 0)
          firehose_buffer_ring_enqueue((int *)a1, BYTE4(v27));
LABEL_86:
        while (1)
        {
          v38 = __ldxr(v29);
          if (v38 != v27)
            break;
          if (!__stxr(v27 & 0xFFFFFF00FFFFFFFFLL, v29))
            return;
        }
        __clrex();
      }
    }
  }
}

void __FIREHOSE_CLIENT_THROTTLED_DUE_TO_HEAVY_LOGGING__(uint64_t a1, unsigned int a2, unint64_t *a3)
{
  firehose_client_send_push_and_wait(a1, a2, a3);
}

void firehose_client_send_push_and_wait(uint64_t guard, unsigned int a2, unint64_t *a3)
{
  int v3;
  int v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  int v12;
  __int128 v13;

  v3 = *(_DWORD *)(guard + 4 * a2 + 1552);
  v13 = 0uLL;
  v12 = 0;
  if (v3 == -1)
    return;
  if (v3)
  {
    v7 = firehose_send_push_and_wait(v3, &v13, &v12);
    if (!v7)
    {
LABEL_4:
      if (((unint64_t)v13 & *((_QWORD *)&v13 + 1)) != 0xFFFFFFFFFFFFFFFFLL)
      {
        v8 = 32;
        if (a2)
          v8 = 56;
        v9 = (unint64_t *)(guard + v8 + 448);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
        firehose_client_merge_updates(guard, 0, v13, *((unint64_t *)&v13 + 1), v12 != 0, a3);
        return;
      }
      goto LABEL_20;
    }
    if (v7 != 268435459)
    {
      if (v7 == -301)
      {
        qword_61228 = (uint64_t)"MIG_REPLY_MISMATCH";
        qword_61258 = -301;
        __break(1u);
      }
      _dispatch_bug(681, v7);
    }
  }
  v11 = firehose_client_reconnect((int *)guard, v3, a2);
  if ((v11 - 1) > 0xFFFFFFFD)
    goto LABEL_22;
  v7 = firehose_send_push_and_wait(v11, &v13, &v12);
  switch(v7)
  {
    case 0:
      goto LABEL_4;
    case 268435459:
      goto LABEL_22;
    case -301:
      qword_61228 = (uint64_t)"MIG_REPLY_MISMATCH";
      qword_61258 = -301;
      __break(1u);
LABEL_20:
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Memory corruption in the logging buffers";
      __break(1u);
      break;
  }
  _dispatch_bug(693, v7);
LABEL_22:
  if (a3)
    *a3 = *(_QWORD *)(guard + 448);
}

uint64_t _dispatch_iocntl(uint64_t result, uint64_t a2)
{
  switch((int)result)
  {
    case 1:
      dispatch_io_defaults = vm_page_size * a2;
      break;
    case 2:
      qword_61180 = a2;
      break;
    case 3:
      byte_61190 = a2 != 0;
      break;
    case 4:
      qword_61188 = a2;
      break;
    default:
      return result;
  }
  return result;
}

void _dispatch_io_dispose(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;

  v2 = *(_QWORD *)(a1 + 112);
  if (v2 && (*(_BYTE *)(a1 + 120) & 3) == 0)
  {
    v3 = *(_QWORD **)(v2 + 8);
    if (v3)
    {
      *v3 = 0;
      v2 = *(_QWORD *)(a1 + 112);
    }
    dispatch_resume(*(dispatch_object_t *)(v2 + 64));
  }
  v4 = *(NSObject **)(a1 + 48);
  if (v4)
    dispatch_release(v4);
  v5 = *(NSObject **)(a1 + 56);
  if (v5)
    dispatch_release(v5);
  v6 = *(NSObject **)(a1 + 64);
  if (v6)
    dispatch_release(v6);
}

dispatch_io_t dispatch_io_create(dispatch_io_type_t type, dispatch_fd_t fd, dispatch_queue_t queue, void *cleanup_handler)
{
  _QWORD *v4;
  unsigned int *v9;
  int v10;
  unsigned int *v11;
  int v12;
  _QWORD v14[8];

  if (type > 1)
    return 0;
  v4 = _dispatch_io_create(type);
  *((_DWORD *)v4 + 31) = fd;
  *((_DWORD *)v4 + 32) = fd;
  dispatch_suspend((dispatch_object_t)v4[6]);
  if (LODWORD(queue[1].isa) != 0x7FFFFFFF)
  {
    v9 = (unsigned int *)&queue[1];
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    if (v10 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  if (*((_DWORD *)v4 + 2) != 0x7FFFFFFF)
  {
    v11 = (unsigned int *)(v4 + 1);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    if (v12 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 0x40000000;
  v14[2] = __dispatch_io_create_block_invoke;
  v14[3] = &unk_590A8;
  v14[6] = type;
  v14[7] = queue;
  v14[4] = cleanup_handler;
  v14[5] = v4;
  _dispatch_fd_entry_init_async(fd, (uint64_t)v14);
  return (dispatch_io_t)v4;
}

_QWORD *_dispatch_io_create(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)_dispatch_object_alloc(OS_dispatch_io, 152);
  v2[2] = -1985229329;
  v2[3] = &off_653C0;
  v3 = dispatch_io_defaults * qword_61180;
  v2[9] = a1;
  v2[10] = v3;
  v2[11] = -1;
  v2[6] = dispatch_queue_create("com.apple.libdispatch-io.channelq", 0);
  return v2;
}

void _dispatch_fd_entry_init_async(int a1, uint64_t a2)
{
  _QWORD v4[5];
  int v5;

  if (_dispatch_io_init_pred != -1)
    dispatch_once_f(&_dispatch_io_init_pred, 0, (dispatch_function_t)_dispatch_io_queues_init);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  v4[2] = ___dispatch_fd_entry_init_async_block_invoke;
  v4[3] = &unk_59860;
  v5 = a1;
  v4[4] = a2;
  dispatch_channel_async((dispatch_queue_t)_dispatch_io_fds_lockq, v4);
}

unsigned int *__dispatch_io_create_block_invoke(uint64_t *a1, uint64_t a2)
{
  int v4;
  int v5;
  unint64_t StatusReg;
  off_t v7;
  const char *v8;
  unsigned int *v9;
  unsigned int *v10;
  int v11;
  unsigned int *result;
  unsigned int *v13;
  int v14;

  v4 = *(_DWORD *)(a2 + 24);
  if (!v4)
  {
    v5 = *(_WORD *)(a2 + 36) & 0xF000;
    if (v5 == 0x4000)
    {
      v4 = 21;
    }
    else if (*(_QWORD *)(a1[5] + 72) != 1 || (v4 = 29, v5 != 4096) && v5 != 49152)
    {
      if (a1[6] == 1)
      {
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        do
        {
          v7 = lseek(*(_DWORD *)a2, 0, 1);
          if (v7 != -1)
            goto LABEL_12;
          v4 = **(_DWORD **)(StatusReg + 8);
        }
        while (v4 == 4);
        if (!v4)
        {
LABEL_12:
          v4 = 0;
          *(_QWORD *)(a1[5] + 136) = v7;
          goto LABEL_14;
        }
        _dispatch_bug(389, v4);
      }
      else
      {
        v4 = 0;
      }
    }
  }
LABEL_14:
  *(_DWORD *)(a1[5] + 144) = v4;
  dispatch_suspend(*(dispatch_object_t *)(a2 + 64));
  _dispatch_io_init((_QWORD *)a1[5], (NSObject **)a2, a1[7], v4, a1[4]);
  dispatch_resume(*(dispatch_object_t *)(a1[5] + 48));
  v9 = (unsigned int *)a1[5];
  if (v9[2] != 0x7FFFFFFF)
  {
    v10 = v9 + 2;
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (v11 <= 1)
    {
      if (v11 != 1)
        _os_object_allows_weak_reference_cold_1();
      _os_object_dispose(v9, v8);
    }
  }
  result = (unsigned int *)a1[7];
  if (result[2] != 0x7FFFFFFF)
  {
    v13 = result + 2;
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (v14 <= 1)
    {
      if (v14 != 1)
        _os_object_allows_weak_reference_cold_1();
      return (unsigned int *)_os_object_dispose(result, v8);
    }
  }
  return result;
}

dispatch_group_t _dispatch_io_init(_QWORD *a1, NSObject **a2, uint64_t a3, int a4, uint64_t a5)
{
  unsigned int *v7;
  int v8;
  NSObject **v9;
  NSObject *v10;
  dispatch_group_t result;
  _QWORD block[6];
  int v13;

  if (a5)
  {
    if (*(_DWORD *)(a3 + 8) != 0x7FFFFFFF)
    {
      v7 = (unsigned int *)(a3 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      if (v8 <= 0)
        dispatch_set_target_queue_cold_2();
    }
    v9 = a2 + 8;
    if (a4)
      v9 = (NSObject **)(a1 + 6);
    v10 = *v9;
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = ___dispatch_io_init_block_invoke;
    block[3] = &unk_59618;
    block[4] = a5;
    block[5] = a3;
    v13 = a4;
    dispatch_channel_async(v10, block);
  }
  if (a2)
  {
    a1[14] = a2;
    dispatch_retain(a2[9]);
    dispatch_retain(a2[10]);
    result = a2[10];
    a1[7] = a2[9];
  }
  else
  {
    a1[7] = dispatch_queue_create("com.apple.libdispatch-io.barrierq", 0);
    result = dispatch_group_create();
  }
  a1[8] = result;
  return result;
}

dispatch_io_t dispatch_io_create_f(dispatch_io_type_t a1, dispatch_fd_t a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD v7[6];

  if (a5)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 0x40000000;
    v7[2] = __dispatch_io_create_f_block_invoke;
    v7[3] = &__block_descriptor_tmp_2;
    v7[4] = a5;
    v7[5] = a4;
    v5 = v7;
  }
  else
  {
    v5 = 0;
  }
  return dispatch_io_create(a1, a2, a3, v5);
}

uint64_t __dispatch_io_create_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40));
}

dispatch_io_t dispatch_io_create_with_path(dispatch_io_type_t type, const char *path, int oflag, mode_t mode, dispatch_queue_t queue, void *cleanup_handler)
{
  size_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _QWORD *v15;
  unsigned int *v16;
  int v17;
  unsigned int *v18;
  int v19;
  NSObject *v20;
  _QWORD v22[8];

  if (type > 1)
    return 0;
  if (*path != 47)
    return 0;
  v12 = strlen(path);
  v13 = malloc_type_malloc(v12 + 25, 0x5B08A984uLL);
  if (!v13)
    return 0;
  v14 = v13;
  v15 = _dispatch_io_create(type);
  *(_QWORD *)((char *)v15 + 124) = -1;
  *(_QWORD *)v14 = v15;
  v14[2] = oflag;
  *((_WORD *)v14 + 6) = mode;
  *((_QWORD *)v14 + 2) = v12;
  memcpy(v14 + 6, path, v12 + 1);
  if (LODWORD(queue[1].isa) != 0x7FFFFFFF)
  {
    v16 = (unsigned int *)&queue[1];
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    if (v17 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  if (*((_DWORD *)v15 + 2) != 0x7FFFFFFF)
  {
    v18 = (unsigned int *)(v15 + 1);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    if (v19 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  v20 = v15[6];
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 0x40000000;
  v22[2] = __dispatch_io_create_with_path_block_invoke;
  v22[3] = &unk_59118;
  v22[6] = v15;
  v22[7] = queue;
  v22[4] = cleanup_handler;
  v22[5] = v14;
  dispatch_channel_async(v20, v22);
  return (dispatch_io_t)v15;
}

void __dispatch_io_create_with_path_block_invoke(uint64_t a1)
{
  unint64_t StatusReg;
  uint64_t v3;
  const char *v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  unsigned int *v12;
  unsigned int *v13;
  int v14;
  unsigned int *v15;
  unsigned int *v16;
  int v17;
  uint64_t v18;
  int v19;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[6];
  stat v25;
  uint64_t v26;
  uint64_t v27;
  stat v28;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  memset(&v28, 0, sizeof(v28));
  do
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = (const char *)(v3 + 24);
    if ((*(_DWORD *)(v3 + 8) & 0x200100) != 0)
      v5 = lstat(v4, &v28);
    else
      v5 = stat(v4, &v28);
    if (v5 != -1)
      goto LABEL_8;
    v6 = **(_DWORD **)(StatusReg + 8);
  }
  while (v6 == 4);
  if (v6)
  {
    v9 = *(_QWORD *)(a1 + 40);
    if ((*(_BYTE *)(v9 + 9) & 2) != 0)
    {
      v10 = *(_QWORD *)(v9 + 16);
      if (*(_BYTE *)(v9 + v10 + 23) != 47)
      {
        while (1)
        {
          v18 = v10 - 1;
          if (v10 < 1)
            break;
          v19 = *(unsigned __int8 *)(v9 + v10-- + 23);
          if (v19 == 47)
          {
            v20 = (_BYTE *)(v9 + v18 + 24);
            goto LABEL_31;
          }
        }
        v20 = 0;
LABEL_31:
        *v20 = 0;
        do
        {
          if (stat((const char *)(*(_QWORD *)(a1 + 40) + 24), &v28) != -1)
            goto LABEL_35;
          v21 = **(_DWORD **)(StatusReg + 8);
        }
        while (v21 == 4);
        if (!v21)
        {
LABEL_35:
          v28.st_mode = 0x8000;
          *v20 = 47;
          v8 = *(_QWORD *)(a1 + 48);
          goto LABEL_36;
        }
        *v20 = 47;
        *(_DWORD *)(*(_QWORD *)(a1 + 48) + 144) = v6;
        goto LABEL_17;
      }
    }
LABEL_16:
    *(_DWORD *)(*(_QWORD *)(a1 + 48) + 144) = v6;
LABEL_17:
    free(*(void **)(a1 + 40));
    _dispatch_io_init(*(_QWORD **)(a1 + 48), 0, *(_QWORD *)(a1 + 56), v6, *(_QWORD *)(a1 + 32));
    v12 = *(unsigned int **)(a1 + 48);
    if (v12[2] != 0x7FFFFFFF)
    {
      v13 = v12 + 2;
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (v14 <= 1)
      {
        if (v14 != 1)
          _os_object_allows_weak_reference_cold_1();
        _os_object_dispose(v12, v11);
      }
    }
    v15 = *(unsigned int **)(a1 + 56);
    if (v15[2] != 0x7FFFFFFF)
    {
      v16 = v15 + 2;
      do
        v17 = __ldxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (v17 <= 1)
      {
        if (v17 != 1)
          _os_object_allows_weak_reference_cold_1();
        _os_object_dispose(v15, v11);
      }
    }
    return;
  }
LABEL_8:
  v7 = v28.st_mode & 0xF000;
  if (v7 == 0x4000)
  {
    v6 = 21;
    goto LABEL_16;
  }
  v8 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(v8 + 72) == 1)
  {
    v6 = 29;
    if (v7 == 4096 || v7 == 49152)
      goto LABEL_16;
  }
LABEL_36:
  *(_DWORD *)(v8 + 144) = 0;
  dispatch_suspend(*(dispatch_object_t *)(v8 + 48));
  if (_dispatch_io_init_pred != -1)
    dispatch_once_f(&_dispatch_io_init_pred, 0, (dispatch_function_t)_dispatch_io_queues_init);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 0x40000000;
  v24[2] = __dispatch_io_create_with_path_block_invoke_2;
  v24[3] = &unk_590F0;
  v25 = v28;
  v22 = *(_QWORD *)(a1 + 56);
  v26 = *(_QWORD *)(a1 + 48);
  v27 = v22;
  v23 = *(_QWORD *)(a1 + 40);
  v24[4] = *(_QWORD *)(a1 + 32);
  v24[5] = v23;
  dispatch_channel_async((dispatch_queue_t)_dispatch_io_devs_lockq, v24);
}

dispatch_queue_t _dispatch_io_queues_init()
{
  dispatch_queue_t result;

  _dispatch_io_fds_lockq = (uint64_t)dispatch_queue_create("com.apple.libdispatch-io.fd_lockq", 0);
  result = dispatch_queue_create("com.apple.libdispatch-io.dev_lockq", 0);
  _dispatch_io_devs_lockq = (uint64_t)result;
  return result;
}

unsigned int *__dispatch_io_create_with_path_block_invoke_2(uint64_t a1)
{
  NSObject **v2;
  const char *v3;
  unsigned int *v4;
  unsigned int *v5;
  int v6;
  unsigned int *result;
  unsigned int *v8;
  int v9;

  v2 = (NSObject **)_dispatch_fd_entry_create_with_path(*(objc_class **)(a1 + 40), *(_DWORD *)(a1 + 48), *(_WORD *)(a1 + 52));
  _dispatch_io_init(*(_QWORD **)(a1 + 192), v2, *(_QWORD *)(a1 + 200), 0, *(_QWORD *)(a1 + 32));
  dispatch_resume(*(dispatch_object_t *)(*(_QWORD *)(a1 + 192) + 48));
  v4 = *(unsigned int **)(a1 + 192);
  if (v4[2] != 0x7FFFFFFF)
  {
    v5 = v4 + 2;
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (v6 <= 1)
    {
      if (v6 != 1)
        _os_object_allows_weak_reference_cold_1();
      _os_object_dispose(v4, v3);
    }
  }
  result = *(unsigned int **)(a1 + 200);
  if (result[2] != 0x7FFFFFFF)
  {
    v8 = result + 2;
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (v9 <= 1)
    {
      if (v9 != 1)
        _os_object_allows_weak_reference_cold_1();
      return (unsigned int *)_os_object_dispose(result, v3);
    }
  }
  return result;
}

NSObject *_dispatch_fd_entry_create_with_path(objc_class *a1, unsigned int a2, __int16 a3)
{
  NSObject *v6;
  NSObject *v7;
  NSObject *isa;
  NSObject *v9;
  _QWORD v11[5];
  _QWORD block[5];

  v6 = _dispatch_fd_entry_create(*(NSObject **)(*(_QWORD *)a1 + 48));
  v7 = v6;
  if ((a3 & 0xF000) == 0x8000)
    _dispatch_disk_init(v6, HIBYTE(a2));
  else
    _dispatch_stream_init((uint64_t)v6);
  LODWORD(v7->isa) = -1;
  LODWORD(v7[2].isa) = -1;
  v7[1].isa = a1;
  LODWORD(v7[4].isa) = a2;
  WORD2(v7[4].isa) = a3;
  v7[9].isa = (Class)dispatch_queue_create("com.apple.libdispatch-io.barrierq", 0);
  v7[10].isa = (Class)dispatch_group_create();
  isa = v7[8].isa;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = ___dispatch_fd_entry_create_with_path_block_invoke;
  block[3] = &__block_descriptor_tmp_79;
  block[4] = v7;
  dispatch_channel_async(isa, block);
  v9 = v7[8].isa;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 0x40000000;
  v11[2] = ___dispatch_fd_entry_create_with_path_block_invoke_2;
  v11[3] = &__block_descriptor_tmp_80;
  v11[4] = v7;
  dispatch_channel_async(v9, v11);
  return v7;
}

dispatch_io_t dispatch_io_create_with_path_f(dispatch_io_type_t a1, const char *a2, int a3, mode_t a4, NSObject *a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD v9[6];

  if (a7)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 0x40000000;
    v9[2] = __dispatch_io_create_with_path_f_block_invoke;
    v9[3] = &__block_descriptor_tmp_6;
    v9[4] = a7;
    v9[5] = a6;
    v7 = v9;
  }
  else
  {
    v7 = 0;
  }
  return dispatch_io_create_with_path(a1, a2, a3, a4, a5, v7);
}

uint64_t __dispatch_io_create_with_path_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40));
}

dispatch_io_t dispatch_io_create_with_io(dispatch_io_type_t type, dispatch_io_t io, dispatch_queue_t queue, void *cleanup_handler)
{
  _QWORD *v4;
  unsigned int *v9;
  int v10;
  unsigned int *v11;
  int v12;
  unsigned int *v13;
  int v14;
  NSObject *isa;
  _QWORD block[9];

  if (type > 1)
    return 0;
  v4 = _dispatch_io_create(type);
  dispatch_suspend((dispatch_object_t)v4[6]);
  if (LODWORD(queue[1].isa) != 0x7FFFFFFF)
  {
    v9 = (unsigned int *)&queue[1];
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    if (v10 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  if (*((_DWORD *)v4 + 2) != 0x7FFFFFFF)
  {
    v11 = (unsigned int *)(v4 + 1);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    if (v12 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  if (LODWORD(io[1].isa) != 0x7FFFFFFF)
  {
    v13 = (unsigned int *)&io[1];
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    if (v14 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  isa = io[6].isa;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = __dispatch_io_create_with_io_block_invoke;
  block[3] = &unk_591B0;
  block[6] = v4;
  block[7] = queue;
  block[4] = cleanup_handler;
  block[5] = io;
  block[8] = type;
  dispatch_channel_async(isa, block);
  return (dispatch_io_t)v4;
}

void __dispatch_io_create_with_io_block_invoke(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  unsigned int *v7;
  unsigned int *v8;
  int v9;
  unsigned int *v10;
  unsigned int *v11;
  int v12;
  unsigned int *v13;
  unsigned int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  _QWORD block[9];

  v2 = a1[5];
  if ((*(_BYTE *)(v2 + 120) & 3) != 0)
  {
    v3 = 89;
  }
  else
  {
    v3 = *(_DWORD *)(v2 + 144);
    if (!v3)
    {
      block[0] = _NSConcreteStackBlock;
      block[2] = __dispatch_io_create_with_io_block_invoke_2;
      block[3] = &unk_59188;
      v17 = a1[7];
      v16 = a1[8];
      block[6] = a1[6];
      block[7] = v16;
      v18 = *(NSObject **)(v2 + 56);
      block[1] = 0x40000000;
      block[8] = v17;
      block[4] = a1[4];
      block[5] = v2;
      dispatch_channel_async(v18, block);
      return;
    }
  }
  v4 = a1[6];
  v5 = a1[7];
  *(_DWORD *)(v4 + 144) = v3;
  _dispatch_io_init((_QWORD *)v4, 0, v5, v3, a1[4]);
  dispatch_resume(*(dispatch_object_t *)(a1[6] + 48));
  v7 = (unsigned int *)a1[6];
  if (v7[2] != 0x7FFFFFFF)
  {
    v8 = v7 + 2;
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (v9 <= 1)
    {
      if (v9 != 1)
        _os_object_allows_weak_reference_cold_1();
      _os_object_dispose(v7, v6);
    }
  }
  v10 = (unsigned int *)a1[5];
  if (v10[2] != 0x7FFFFFFF)
  {
    v11 = v10 + 2;
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (v12 <= 1)
    {
      if (v12 != 1)
        _os_object_allows_weak_reference_cold_1();
      _os_object_dispose(v10, v6);
    }
  }
  v13 = (unsigned int *)a1[7];
  if (v13[2] != 0x7FFFFFFF)
  {
    v14 = v13 + 2;
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (v15 <= 1)
    {
      if (v15 != 1)
        _os_object_allows_weak_reference_cold_1();
      _os_object_dispose(v13, v6);
    }
  }
}

unsigned int *__dispatch_io_create_with_io_block_invoke_2(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  const char *v7;
  unsigned int *v8;
  unsigned int *v9;
  int v10;
  unsigned int *v11;
  unsigned int *v12;
  int v13;
  unsigned int *result;
  unsigned int *v15;
  int v16;
  uint64_t v17;
  unint64_t StatusReg;
  off_t v19;
  int v20;
  NSObject **v21;
  int v22;
  const char *v23;
  unsigned int *v24;
  unsigned int *v25;
  int v26;
  unsigned int *v27;
  unsigned int *v28;
  int v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  size_t v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  int v37;
  _QWORD block[8];
  int v39;
  __int16 v40;

  v2 = a1[5];
  if ((*(_BYTE *)(v2 + 120) & 3) != 0)
  {
    v3 = 89;
    goto LABEL_7;
  }
  v3 = *(_DWORD *)(v2 + 144);
  if (v3)
    goto LABEL_7;
  v4 = *(_QWORD *)(v2 + 112);
  v3 = *(_DWORD *)(v4 + 24);
  if (v3)
    goto LABEL_7;
  v5 = *(_WORD *)(v4 + 36) & 0xF000;
  if (v5 == 0x4000)
  {
    v3 = 21;
LABEL_7:
    v6 = a1[6];
    *(_DWORD *)(v6 + 144) = v3;
    _dispatch_io_init((_QWORD *)v6, 0, a1[8], v3, a1[4]);
    dispatch_resume(*(dispatch_object_t *)(a1[6] + 48));
    v8 = (unsigned int *)a1[6];
    if (v8[2] != 0x7FFFFFFF)
    {
      v9 = v8 + 2;
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (v10 <= 1)
      {
        if (v10 != 1)
          _os_object_allows_weak_reference_cold_1();
        _os_object_dispose(v8, v7);
      }
    }
    v11 = (unsigned int *)a1[5];
    if (v11[2] != 0x7FFFFFFF)
    {
      v12 = v11 + 2;
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (v13 <= 1)
      {
        if (v13 != 1)
          _os_object_allows_weak_reference_cold_1();
        _os_object_dispose(v11, v7);
      }
    }
    result = (unsigned int *)a1[8];
    if (result[2] != 0x7FFFFFFF)
    {
      v15 = result + 2;
      do
        v16 = __ldxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (v16 <= 1)
      {
        if (v16 != 1)
          _os_object_allows_weak_reference_cold_1();
        return (unsigned int *)_os_object_dispose(result, v7);
      }
    }
    return result;
  }
  v17 = a1[6];
  if (*(_QWORD *)(v17 + 72) == 1)
  {
    v3 = 29;
    if (v5 == 4096 || v5 == 49152)
      goto LABEL_7;
  }
  if (a1[7] == 1 && *(_DWORD *)(v2 + 124) != -1)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      v19 = lseek(**(_DWORD **)(a1[5] + 112), 0, 1);
      if (v19 != -1)
        goto LABEL_29;
      v3 = **(_DWORD **)(StatusReg + 8);
    }
    while (v3 == 4);
    if (!v3)
    {
LABEL_29:
      v2 = a1[5];
      v17 = a1[6];
      *(_QWORD *)(v17 + 136) = v19;
      goto LABEL_30;
    }
    _dispatch_bug(590, v3);
    goto LABEL_7;
  }
LABEL_30:
  *(_DWORD *)(v17 + 144) = 0;
  v20 = *(_DWORD *)(v2 + 124);
  if (v20 == -1)
  {
    *(_QWORD *)(v17 + 124) = -1;
    v30 = *(_QWORD *)(v2 + 112);
    v31 = *(_WORD *)(v30 + 36);
    v32 = *(_DWORD *)(v30 + 32);
    v33 = *(_QWORD *)(*(_QWORD *)(v30 + 8) + 16) + 25;
    v34 = malloc_type_malloc(v33, 0x2C5081E5uLL);
    memcpy(v34, *(const void **)(*(_QWORD *)(a1[5] + 112) + 8), v33);
    *v34 = a1[6];
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = __dispatch_io_create_with_io_block_invoke_3;
    block[3] = &unk_59160;
    v39 = v32;
    v40 = v31;
    v35 = a1[8];
    block[6] = a1[6];
    block[7] = v35;
    block[4] = a1[4];
    block[5] = v34;
    dispatch_channel_async((dispatch_queue_t)_dispatch_io_devs_lockq, block);
  }
  else
  {
    v21 = *(NSObject ***)(v2 + 112);
    v22 = *(_DWORD *)(v2 + 128);
    *(_DWORD *)(v17 + 124) = v20;
    *(_DWORD *)(v17 + 128) = v22;
    dispatch_suspend(v21[8]);
    _dispatch_io_init((_QWORD *)a1[6], v21, a1[8], 0, a1[4]);
    dispatch_resume(*(dispatch_object_t *)(a1[6] + 48));
    v24 = (unsigned int *)a1[6];
    if (v24[2] != 0x7FFFFFFF)
    {
      v25 = v24 + 2;
      do
        v26 = __ldxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (v26 <= 1)
      {
        if (v26 != 1)
          _os_object_allows_weak_reference_cold_1();
        _os_object_dispose(v24, v23);
      }
    }
    v27 = (unsigned int *)a1[8];
    if (v27[2] != 0x7FFFFFFF)
    {
      v28 = v27 + 2;
      do
        v29 = __ldxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (v29 <= 1)
      {
        if (v29 != 1)
          _os_object_allows_weak_reference_cold_1();
        _os_object_dispose(v27, v23);
      }
    }
  }
  result = (unsigned int *)a1[5];
  if (result[2] != 0x7FFFFFFF)
  {
    v36 = result + 2;
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (v37 <= 1)
    {
      if (v37 != 1)
        _os_object_allows_weak_reference_cold_1();
      return (unsigned int *)_os_object_dispose(result, v23);
    }
  }
  return result;
}

unsigned int *__dispatch_io_create_with_io_block_invoke_3(uint64_t a1)
{
  NSObject **v2;
  const char *v3;
  unsigned int *v4;
  unsigned int *v5;
  int v6;
  unsigned int *result;
  unsigned int *v8;
  int v9;

  v2 = (NSObject **)_dispatch_fd_entry_create_with_path(*(objc_class **)(a1 + 40), *(_DWORD *)(a1 + 64), *(_WORD *)(a1 + 68));
  _dispatch_io_init(*(_QWORD **)(a1 + 48), v2, *(_QWORD *)(a1 + 56), 0, *(_QWORD *)(a1 + 32));
  dispatch_resume(*(dispatch_object_t *)(*(_QWORD *)(a1 + 48) + 48));
  v4 = *(unsigned int **)(a1 + 48);
  if (v4[2] != 0x7FFFFFFF)
  {
    v5 = v4 + 2;
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (v6 <= 1)
    {
      if (v6 != 1)
        _os_object_allows_weak_reference_cold_1();
      _os_object_dispose(v4, v3);
    }
  }
  result = *(unsigned int **)(a1 + 56);
  if (result[2] != 0x7FFFFFFF)
  {
    v8 = result + 2;
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (v9 <= 1)
    {
      if (v9 != 1)
        _os_object_allows_weak_reference_cold_1();
      return (unsigned int *)_os_object_dispose(result, v3);
    }
  }
  return result;
}

dispatch_io_t dispatch_io_create_with_io_f(dispatch_io_type_t a1, NSObject *a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD v7[6];

  if (a5)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 0x40000000;
    v7[2] = __dispatch_io_create_with_io_f_block_invoke;
    v7[3] = &__block_descriptor_tmp_10;
    v7[4] = a5;
    v7[5] = a4;
    v5 = v7;
  }
  else
  {
    v5 = 0;
  }
  return dispatch_io_create_with_io(a1, a2, a3, v5);
}

uint64_t __dispatch_io_create_with_io_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40));
}

void dispatch_io_set_high_water(dispatch_io_t channel, size_t high_water)
{
  unsigned int *v2;
  int v3;
  NSObject *isa;
  _QWORD v5[6];

  if (LODWORD(channel[1].isa) != 0x7FFFFFFF)
  {
    v2 = (unsigned int *)&channel[1];
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
    if (v3 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  isa = channel[6].isa;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  v5[2] = __dispatch_io_set_high_water_block_invoke;
  v5[3] = &__block_descriptor_tmp_11;
  v5[4] = channel;
  v5[5] = high_water;
  dispatch_channel_async(isa, v5);
}

char *__dispatch_io_set_high_water_block_invoke(uint64_t a1, const char *a2)
{
  char *result;
  unint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  int v7;

  result = *(char **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (*((_QWORD *)result + 10) > v4)
  {
    *((_QWORD *)result + 10) = v4;
    v4 = *(_QWORD *)(a1 + 40);
  }
  if (v4 <= 1)
    v5 = 1;
  else
    v5 = v4;
  *((_QWORD *)result + 11) = v5;
  if (*((_DWORD *)result + 2) != 0x7FFFFFFF)
  {
    v6 = (unsigned int *)(result + 8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (v7 <= 1)
    {
      if (v7 != 1)
        _os_object_allows_weak_reference_cold_1();
      return (char *)_os_object_dispose(result, a2);
    }
  }
  return result;
}

void dispatch_io_set_low_water(dispatch_io_t channel, size_t low_water)
{
  unsigned int *v2;
  int v3;
  NSObject *isa;
  _QWORD v5[6];

  if (LODWORD(channel[1].isa) != 0x7FFFFFFF)
  {
    v2 = (unsigned int *)&channel[1];
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
    if (v3 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  isa = channel[6].isa;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  v5[2] = __dispatch_io_set_low_water_block_invoke;
  v5[3] = &__block_descriptor_tmp_12;
  v5[4] = channel;
  v5[5] = low_water;
  dispatch_channel_async(isa, v5);
}

char *__dispatch_io_set_low_water_block_invoke(uint64_t a1, const char *a2)
{
  char *result;
  unint64_t v4;
  unsigned int *v5;
  int v6;

  result = *(char **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (*((_QWORD *)result + 11) < v4)
  {
    *((_QWORD *)result + 11) = v4;
    v4 = *(_QWORD *)(a1 + 40);
  }
  *((_QWORD *)result + 10) = v4;
  if (*((_DWORD *)result + 2) != 0x7FFFFFFF)
  {
    v5 = (unsigned int *)(result + 8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (v6 <= 1)
    {
      if (v6 != 1)
        _os_object_allows_weak_reference_cold_1();
      return (char *)_os_object_dispose(result, a2);
    }
  }
  return result;
}

void dispatch_io_set_interval(dispatch_io_t channel, uint64_t interval, dispatch_io_interval_flags_t flags)
{
  unsigned int *v3;
  int v4;
  NSObject *isa;
  _QWORD block[7];

  if (LODWORD(channel[1].isa) != 0x7FFFFFFF)
  {
    v3 = (unsigned int *)&channel[1];
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
    if (v4 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  isa = channel[6].isa;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = __dispatch_io_set_interval_block_invoke;
  block[3] = &__block_descriptor_tmp_13;
  block[4] = channel;
  block[5] = interval;
  block[6] = flags;
  dispatch_channel_async(isa, block);
}

char *__dispatch_io_set_interval_block_invoke(uint64_t a1, const char *a2)
{
  uint64_t v3;
  char *result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  int v9;

  v3 = 0x7FFFFFFFFFFFFFFFLL;
  v6 = a1 + 32;
  result = *(char **)(a1 + 32);
  v5 = *(_QWORD *)(v6 + 8);
  if (v5 < 0x7FFFFFFFFFFFFFFFLL)
    v3 = v5;
  v7 = *(_QWORD *)(a1 + 48);
  *((_QWORD *)result + 12) = v3;
  *((_QWORD *)result + 13) = v7;
  if (*((_DWORD *)result + 2) != 0x7FFFFFFF)
  {
    v8 = (unsigned int *)(result + 8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (v9 <= 1)
    {
      if (v9 != 1)
        _os_object_allows_weak_reference_cold_1();
      return (char *)_os_object_dispose(result, a2);
    }
  }
  return result;
}

void _dispatch_io_set_target_queue(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  int v3;
  unsigned int *v4;
  int v5;
  NSObject *v6;
  _QWORD v7[6];

  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF)
  {
    v2 = (unsigned int *)(a2 + 8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
    if (v3 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    v4 = (unsigned int *)(a1 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    if (v5 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  v6 = *(NSObject **)(a1 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  v7[2] = ___dispatch_io_set_target_queue_block_invoke;
  v7[3] = &__block_descriptor_tmp_14;
  v7[4] = a1;
  v7[5] = a2;
  dispatch_channel_async(v6, v7);
}

unsigned int *___dispatch_io_set_target_queue_block_invoke(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  int v7;
  unsigned int *result;
  unsigned int *v9;
  int v10;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(unsigned int **)(v3 + 24);
  *(_QWORD *)(v3 + 24) = v4;
  if (v5[2] != 0x7FFFFFFF)
  {
    v6 = v5 + 2;
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (v7 <= 1)
    {
      if (v7 != 1)
        _os_object_allows_weak_reference_cold_1();
      _os_object_dispose(v5, a2);
    }
  }
  result = *(unsigned int **)(a1 + 32);
  if (result[2] != 0x7FFFFFFF)
  {
    v9 = result + 2;
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (v10 <= 1)
    {
      if (v10 != 1)
        _os_object_allows_weak_reference_cold_1();
      return (unsigned int *)_os_object_dispose(result, a2);
    }
  }
  return result;
}

dispatch_fd_t dispatch_io_get_descriptor(dispatch_io_t channel)
{
  dispatch_fd_t result;
  unint64_t v3;

  if (((uint64_t)channel[15].isa & 3) != 0)
    return -1;
  result = (dispatch_fd_t)channel[16].isa;
  if (result == -1)
  {
    if (!LODWORD(channel[18].isa))
    {
      v3 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 184;
      while (1)
      {
        v3 = *(_QWORD *)v3;
        if (!v3)
          break;
        if (*(char **)(v3 + 8) == "io")
        {
          if (*(dispatch_io_t *)(v3 + 16) != channel)
            return -1;
          _dispatch_fd_entry_open((uint64_t)channel[14].isa, (uint64_t)channel);
          return (dispatch_fd_t)channel[16].isa;
        }
      }
    }
    return -1;
  }
  return result;
}

uint64_t _dispatch_fd_entry_open(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v8;
  unint64_t StatusReg;
  uint64_t v10;
  unsigned int v11;
  unsigned int v13;
  uint64_t v14;

  if (*(_DWORD *)a1 == -1)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      v6 = (unsigned int *)(a1 + 24);
      v2 = *(unsigned int *)(a1 + 24);
      if ((_DWORD)v2)
        return v2;
      v8 = *(_DWORD *)(v5 + 8) & 0xFFFFFFFB | (4 * (*(_QWORD *)(a1 + 56) == 0));
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (1)
      {
        v10 = *(_QWORD *)(a1 + 8) + 24;
        v14 = a1;
        v11 = guarded_open_np(v10, &v14, 15, v8 | 0x1000000);
        if (v11 != -1)
          break;
        **(_DWORD **)(StatusReg + 8) = 0;
        v11 = open_NOCANCEL(v10, v8);
        if (v11 != -1)
          goto LABEL_15;
        v2 = **(unsigned int **)(StatusReg + 8);
        if ((_DWORD)v2 != 4)
        {
          while (!__ldxr(v6))
          {
            if (!__stxr(v2, v6))
              return v2;
          }
          __clrex();
          return v2;
        }
      }
      *(_DWORD *)(a1 + 28) = 15;
LABEL_15:
      while (1)
      {
        v13 = __ldxr((unsigned int *)a1);
        if (v13 != -1)
          break;
        v2 = __stxr(v11, (unsigned int *)a1);
        if (!(_DWORD)v2)
        {
          *(_DWORD *)(a2 + 128) = v11;
          return v2;
        }
      }
      __clrex();
      if (*(_DWORD *)(a1 + 28))
      {
        v14 = a1;
        guarded_close_np();
      }
      else
      {
        close_NOCANCEL();
      }
    }
  }
  return 0;
}

void dispatch_io_close(dispatch_io_t channel, dispatch_io_close_flags_t flags)
{
  unsigned int *v2;
  int isa;
  unsigned int *v4;
  int v5;
  NSObject *v6;
  _QWORD *v7;
  unsigned int v8;
  unsigned int *v9;
  int v10;
  _QWORD v11[5];
  _QWORD block[5];

  v2 = (unsigned int *)&channel[15];
  isa = (int)channel[15].isa;
  if ((flags & 1) != 0)
  {
    if ((isa & 2) != 0)
      return;
    do
      v8 = __ldxr(v2);
    while (__stxr(v8 | 2, v2));
    if (LODWORD(channel[1].isa) != 0x7FFFFFFF)
    {
      v9 = (unsigned int *)&channel[1];
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      if (v10 <= 0)
        dispatch_set_target_queue_cold_2();
    }
    v6 = channel[6].isa;
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = ___dispatch_io_stop_block_invoke;
    block[3] = &__block_descriptor_tmp_54;
    block[4] = channel;
    v7 = block;
  }
  else
  {
    if ((isa & 3) != 0)
      return;
    if (LODWORD(channel[1].isa) != 0x7FFFFFFF)
    {
      v4 = (unsigned int *)&channel[1];
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
      if (v5 <= 0)
        dispatch_set_target_queue_cold_2();
    }
    v6 = channel[6].isa;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 0x40000000;
    v11[2] = __dispatch_io_close_block_invoke;
    v11[3] = &__block_descriptor_tmp_17;
    v11[4] = channel;
    v7 = v11;
  }
  dispatch_channel_async(v6, v7);
}

void __dispatch_io_close_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = __dispatch_io_close_block_invoke_2;
  block[3] = &__block_descriptor_tmp_16;
  block[4] = v1;
  dispatch_channel_async(v2, block);
}

char *__dispatch_io_close_block_invoke_2(uint64_t a1, const char *a2)
{
  char *result;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int *v8;
  int v9;

  result = *(char **)(a1 + 32);
  v4 = (unsigned int *)(result + 120);
  if ((result[120] & 3) == 0)
  {
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 | 1, v4));
    result = *(char **)(a1 + 32);
    v6 = *((_QWORD *)result + 14);
    if (v6)
    {
      v7 = *(_QWORD **)(v6 + 8);
      if (v7)
      {
        *v7 = 0;
        result = *(char **)(a1 + 32);
      }
      *((_QWORD *)result + 14) = 0;
      dispatch_resume(*(dispatch_object_t *)(v6 + 64));
      result = *(char **)(a1 + 32);
    }
  }
  if (*((_DWORD *)result + 2) != 0x7FFFFFFF)
  {
    v8 = (unsigned int *)(result + 8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (v9 <= 1)
    {
      if (v9 != 1)
        _os_object_allows_weak_reference_cold_1();
      return (char *)_os_object_dispose(result, a2);
    }
  }
  return result;
}

void dispatch_io_barrier(dispatch_io_t channel, dispatch_block_t barrier)
{
  unsigned int *v2;
  int v3;
  NSObject *isa;
  _QWORD v5[6];

  if (LODWORD(channel[1].isa) != 0x7FFFFFFF)
  {
    v2 = (unsigned int *)&channel[1];
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
    if (v3 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  isa = channel[6].isa;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  v5[2] = __dispatch_io_barrier_block_invoke;
  v5[3] = &unk_59308;
  v5[4] = barrier;
  v5[5] = channel;
  dispatch_channel_async(isa, v5);
}

void __dispatch_io_barrier_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD block[5];
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(v1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = __dispatch_io_barrier_block_invoke_2;
  block[3] = &unk_592E0;
  v5 = *(_OWORD *)(v1 + 56);
  v6 = v3;
  v7 = v1;
  block[4] = v2;
  dispatch_channel_async((dispatch_queue_t)v5, block);
}

void __dispatch_io_barrier_block_invoke_2(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD block[7];

  dispatch_suspend(*(dispatch_object_t *)(a1 + 40));
  v2 = *(NSObject **)(a1 + 48);
  v3 = *(NSObject **)(a1 + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = __dispatch_io_barrier_block_invoke_3;
  block[3] = &unk_592B8;
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  block[5] = v4;
  block[6] = v5;
  dispatch_group_notify(v2, v3, block);
}

unsigned int *__dispatch_io_barrier_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  unint64_t StatusReg;
  const char *v4;
  unsigned int *result;
  unsigned int *v6;
  int v7;
  _QWORD v8[3];

  v2 = *(_QWORD *)(a1 + 40);
  v8[1] = "io";
  v8[2] = v2;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v8[0] = *(_QWORD *)(StatusReg + 184);
  *(_QWORD *)(StatusReg + 184) = v8;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *(_QWORD *)(StatusReg + 184) = v8[0];
  dispatch_resume(*(dispatch_object_t *)(a1 + 48));
  result = *(unsigned int **)(a1 + 40);
  if (result[2] != 0x7FFFFFFF)
  {
    v6 = result + 2;
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (v7 <= 1)
    {
      if (v7 != 1)
        _os_object_allows_weak_reference_cold_1();
      return (unsigned int *)_os_object_dispose(result, v4);
    }
  }
  return result;
}

void dispatch_io_barrier_f(NSObject *a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[6];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  v3[2] = __dispatch_io_barrier_f_block_invoke;
  v3[3] = &__block_descriptor_tmp_21;
  v3[4] = a3;
  v3[5] = a2;
  dispatch_io_barrier(a1, v3);
}

uint64_t __dispatch_io_barrier_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40));
}

void dispatch_io_read(dispatch_io_t channel, off_t offset, size_t length, dispatch_queue_t queue, dispatch_io_handler_t io_handler)
{
  unsigned int *v5;
  int v6;
  unsigned int *v7;
  int v8;
  NSObject *isa;
  _QWORD block[9];

  if (LODWORD(channel[1].isa) != 0x7FFFFFFF)
  {
    v5 = (unsigned int *)&channel[1];
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    if (v6 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  if (LODWORD(queue[1].isa) != 0x7FFFFFFF)
  {
    v7 = (unsigned int *)&queue[1];
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    if (v8 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  isa = channel[6].isa;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = __dispatch_io_read_block_invoke;
  block[3] = &unk_59370;
  block[6] = offset;
  block[7] = length;
  block[8] = queue;
  block[4] = io_handler;
  block[5] = channel;
  dispatch_channel_async(isa, block);
}

unsigned int *__dispatch_io_read_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  NSObject *v4;
  unsigned int *v5;
  unsigned int *v6;
  int v7;
  unsigned int *result;
  unsigned int *v9;
  int v10;
  _QWORD block[5];

  v2 = _dispatch_operation_create(0, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), &_dispatch_data_empty, *(_QWORD *)(a1 + 64), *(void **)(a1 + 32));
  if (v2)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 40) + 56);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = __dispatch_io_read_block_invoke_2;
    block[3] = &__block_descriptor_tmp_22;
    block[4] = v2;
    dispatch_channel_async(v4, block);
  }
  v5 = *(unsigned int **)(a1 + 40);
  if (v5[2] != 0x7FFFFFFF)
  {
    v6 = v5 + 2;
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (v7 <= 1)
    {
      if (v7 != 1)
        _os_object_allows_weak_reference_cold_1();
      _os_object_dispose(v5, v3);
    }
  }
  result = *(unsigned int **)(a1 + 64);
  if (result[2] != 0x7FFFFFFF)
  {
    v9 = result + 2;
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (v10 <= 1)
    {
      if (v10 != 1)
        _os_object_allows_weak_reference_cold_1();
      return (unsigned int *)_os_object_dispose(result, v3);
    }
  }
  return result;
}

uint64_t _dispatch_operation_create(int a1, uint64_t a2, uint64_t a3, uint64_t a4, id a5, uint64_t a6, void *a7)
{
  int v12;
  unsigned int *v13;
  int v14;
  unsigned int *v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  unsigned int *v22;
  int v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD block[8];
  int v29;
  int v30;

  if ((*(_BYTE *)(a2 + 120) & 3) != 0)
  {
    v12 = 89;
LABEL_3:
    _dispatch_objc_retain(a5);
    if (*(_DWORD *)(a6 + 8) != 0x7FFFFFFF)
    {
      v13 = (unsigned int *)(a6 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      if (v14 <= 0)
        dispatch_set_target_queue_cold_2();
    }
    if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF)
    {
      v15 = (unsigned int *)(a2 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      if (v16 <= 0)
        dispatch_set_target_queue_cold_2();
    }
    v17 = *(NSObject **)(a2 + 56);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = ___dispatch_operation_create_block_invoke;
    block[3] = &unk_59708;
    v29 = a1;
    v30 = v12;
    block[4] = a7;
    block[5] = a6;
    block[6] = a5;
    block[7] = a2;
    dispatch_channel_async(v17, block);
    return 0;
  }
  v12 = *(_DWORD *)(a2 + 144);
  if (!a4 || v12)
    goto LABEL_3;
  v18 = _dispatch_object_alloc(OS_dispatch_operation, 272);
  *(_QWORD *)(v18 + 16) = -1985229329;
  *(_DWORD *)(v18 + 12) = 0;
  *(_QWORD *)(v18 + 48) = dispatch_queue_create_with_target_V2("com.apple.libdispatch-io.opq", 0, (dispatch_queue_t)a6);
  *(_BYTE *)(v18 + 160) = 0;
  *(_DWORD *)(v18 + 56) = a1;
  *(_QWORD *)(v18 + 104) = *(_QWORD *)(a2 + 136) + a3;
  *(_QWORD *)(v18 + 112) = a4;
  *(_QWORD *)(v18 + 128) = _dispatch_Block_copy(a7);
  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF)
  {
    v22 = (unsigned int *)(a2 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    if (v23 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  *(_QWORD *)(v18 + 136) = a2;
  v24 = *(_OWORD *)(a2 + 72);
  v25 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(v18 + 96) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(v18 + 64) = v24;
  *(_OWORD *)(v18 + 80) = v25;
  v26 = *(_QWORD *)(a2 + 24);
  do
  {
    v27 = v26;
    v26 = *(_QWORD *)(v26 + 24);
  }
  while (v26);
  *(_QWORD *)(v18 + 24) = v27;
  return v18;
}

void __dispatch_io_read_block_invoke_2(uint64_t a1)
{
  _dispatch_operation_enqueue(*(_QWORD *)(a1 + 32), 0, &_dispatch_data_empty);
}

void _dispatch_operation_enqueue(uint64_t a1, unsigned int a2, id a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  unsigned int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  NSObject **v18;
  _QWORD v19[7];
  _QWORD v20[7];
  _QWORD block[6];
  unsigned int v22;
  int v23;

  _dispatch_objc_retain(a3);
  v6 = *(_QWORD *)(a1 + 136);
  if ((*(_BYTE *)(v6 + 120) & 3) != 0)
  {
    v7 = 89;
  }
  else
  {
    v7 = *(_DWORD *)(v6 + 144);
    if (!v7)
    {
      v13 = *(_QWORD *)(v6 + 112);
      *(_QWORD *)(a1 + 144) = v13;
      dispatch_suspend(*(dispatch_object_t *)(v13 + 64));
      dispatch_group_enter(*(dispatch_group_t *)(*(_QWORD *)(a1 + 144) + 80));
      v14 = *(_QWORD *)(a1 + 144);
      v15 = *(_QWORD *)(v14 + 56);
      if (v15)
      {
        v16 = *(NSObject **)(v15 + 72);
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 0x40000000;
        v19[2] = ___dispatch_operation_enqueue_block_invoke_3;
        v19[3] = &__block_descriptor_tmp_62;
        v19[4] = v15;
        v19[5] = a1;
        v19[6] = a3;
        v17 = v19;
      }
      else
      {
        v18 = *(NSObject ***)(v14 + 8 * a2 + 40);
        v16 = *v18;
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 0x40000000;
        v20[2] = ___dispatch_operation_enqueue_block_invoke_2;
        v20[3] = &__block_descriptor_tmp_61;
        v20[4] = v18;
        v20[5] = a1;
        v20[6] = a3;
        v17 = v20;
      }
      dispatch_channel_async(v16, v17);
      return;
    }
  }
  v8 = *(_QWORD *)(a1 + 128);
  v9 = *(NSObject **)(a1 + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = ___dispatch_operation_enqueue_block_invoke;
  block[3] = &unk_59730;
  v22 = a2;
  v23 = v7;
  block[4] = v8;
  block[5] = a3;
  dispatch_channel_async(v9, block);
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    v11 = (unsigned int *)(a1 + 8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (v12 <= 1)
    {
      if (v12 != 1)
        _os_object_allows_weak_reference_cold_1();
      _os_object_dispose((void *)a1, v10);
    }
  }
}

void dispatch_io_read_f(NSObject *a1, off_t a2, size_t a3, NSObject *a4, uint64_t a5, uint64_t a6)
{
  _QWORD v6[6];

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  v6[2] = __dispatch_io_read_f_block_invoke;
  v6[3] = &__block_descriptor_tmp_25;
  v6[4] = a6;
  v6[5] = a5;
  dispatch_io_read(a1, a2, a3, a4, v6);
}

uint64_t __dispatch_io_read_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40));
}

void dispatch_io_write(dispatch_io_t channel, off_t offset, dispatch_data_t data, dispatch_queue_t queue, dispatch_io_handler_t io_handler)
{
  unsigned int *v10;
  int v11;
  unsigned int *v12;
  int v13;
  NSObject *isa;
  _QWORD block[9];

  _dispatch_objc_retain(data);
  if (LODWORD(channel[1].isa) != 0x7FFFFFFF)
  {
    v10 = (unsigned int *)&channel[1];
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    if (v11 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  if (LODWORD(queue[1].isa) != 0x7FFFFFFF)
  {
    v12 = (unsigned int *)&queue[1];
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    if (v13 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  isa = channel[6].isa;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = __dispatch_io_write_block_invoke;
  block[3] = &unk_593D8;
  block[6] = offset;
  block[7] = data;
  block[8] = queue;
  block[4] = io_handler;
  block[5] = channel;
  dispatch_channel_async(isa, block);
}

unsigned int *__dispatch_io_write_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  size_t size;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  unsigned int *v10;
  unsigned int *v11;
  int v12;
  unsigned int *result;
  unsigned int *v14;
  int v15;
  _QWORD v16[6];

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(NSObject **)(a1 + 56);
  size = dispatch_data_get_size(v4);
  v6 = _dispatch_operation_create(1, v2, v3, size, v4, *(_QWORD *)(a1 + 64), *(void **)(a1 + 32));
  if (v6)
  {
    v7 = *(NSObject **)(*(_QWORD *)(a1 + 40) + 56);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 0x40000000;
    v16[2] = __dispatch_io_write_block_invoke_2;
    v16[3] = &__block_descriptor_tmp_26_0;
    v8 = *(_QWORD *)(a1 + 56);
    v16[4] = v6;
    v16[5] = v8;
    dispatch_channel_async(v7, v16);
  }
  else
  {
    _dispatch_objc_release(*(id *)(a1 + 56));
  }
  v10 = *(unsigned int **)(a1 + 40);
  if (v10[2] != 0x7FFFFFFF)
  {
    v11 = v10 + 2;
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (v12 <= 1)
    {
      if (v12 != 1)
        _os_object_allows_weak_reference_cold_1();
      _os_object_dispose(v10, v9);
    }
  }
  result = *(unsigned int **)(a1 + 64);
  if (result[2] != 0x7FFFFFFF)
  {
    v14 = result + 2;
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (v15 <= 1)
    {
      if (v15 != 1)
        _os_object_allows_weak_reference_cold_1();
      return (unsigned int *)_os_object_dispose(result, v9);
    }
  }
  return result;
}

void __dispatch_io_write_block_invoke_2(uint64_t a1)
{
  _dispatch_operation_enqueue(*(_QWORD *)(a1 + 32), 1u, *(id *)(a1 + 40));
  _dispatch_objc_release(*(id *)(a1 + 40));
}

void dispatch_io_write_f(NSObject *a1, off_t a2, NSObject *a3, NSObject *a4, uint64_t a5, uint64_t a6)
{
  _QWORD v6[6];

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  v6[2] = __dispatch_io_write_f_block_invoke;
  v6[3] = &__block_descriptor_tmp_28;
  v6[4] = a6;
  v6[5] = a5;
  dispatch_io_write(a1, a2, a3, a4, v6);
}

uint64_t __dispatch_io_write_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40));
}

void dispatch_read(dispatch_fd_t fd, size_t length, dispatch_queue_t queue, void *handler)
{
  unsigned int *v4;
  int v5;
  _QWORD v6[7];
  dispatch_fd_t v7;

  if (LODWORD(queue[1].isa) != 0x7FFFFFFF)
  {
    v4 = (unsigned int *)&queue[1];
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    if (v5 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  v6[2] = __dispatch_read_block_invoke;
  v6[3] = &unk_594C0;
  v6[4] = handler;
  v6[5] = queue;
  v7 = fd;
  v6[6] = length;
  _dispatch_fd_entry_init_async(fd, (uint64_t)v6);
}

void __dispatch_read_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  unsigned int *v7;
  unsigned int *v8;
  int v9;
  _QWORD *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[6];
  _QWORD v17[8];
  _QWORD v18[3];
  int v19;
  _QWORD v20[4];
  _QWORD block[5];
  int v22;

  v3 = *(_DWORD *)(a2 + 24);
  if (v3)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = __dispatch_read_block_invoke_2;
    block[3] = &unk_59420;
    v5 = *(_QWORD *)(a1 + 32);
    v4 = *(NSObject **)(a1 + 40);
    block[4] = v5;
    v22 = v3;
    dispatch_channel_async(v4, block);
    v7 = *(unsigned int **)(a1 + 40);
    if (v7[2] != 0x7FFFFFFF)
    {
      v8 = v7 + 2;
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (v9 <= 1)
      {
        if (v9 != 1)
          _os_object_allows_weak_reference_cold_1();
        _os_object_dispose(v7, v6);
      }
    }
  }
  else
  {
    v11 = *(_QWORD **)(a2 + 88);
    if (!v11)
    {
      v11 = _dispatch_io_create(0);
      *((_DWORD *)v11 + 31) = *(_DWORD *)(a1 + 56);
      *((_DWORD *)v11 + 32) = *(_DWORD *)(a1 + 56);
      v11[14] = a2;
      dispatch_retain(*(dispatch_object_t *)(a2 + 72));
      dispatch_retain(*(dispatch_object_t *)(a2 + 80));
      *(_OWORD *)(v11 + 7) = *(_OWORD *)(a2 + 72);
      *(_QWORD *)(a2 + 88) = v11;
    }
    v20[0] = 0;
    v20[1] = v20;
    v20[2] = 0x2000000000;
    v20[3] = &_dispatch_data_empty;
    v18[0] = 0;
    v18[1] = v18;
    v18[2] = 0x2000000000;
    v19 = 0;
    v12 = *(NSObject **)(a2 + 64);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 0x40000000;
    v17[2] = __dispatch_read_block_invoke_3;
    v17[3] = &unk_59470;
    v13 = *(_QWORD *)(a1 + 40);
    v17[4] = *(_QWORD *)(a1 + 32);
    v17[5] = v20;
    v17[6] = v18;
    v17[7] = v13;
    dispatch_channel_async(v12, v17);
    v14 = *(_QWORD *)(a1 + 48);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 0x40000000;
    v16[2] = __dispatch_read_block_invoke_5;
    v16[3] = &unk_59498;
    v16[4] = v20;
    v16[5] = v18;
    v15 = _dispatch_operation_create(0, (uint64_t)v11, 0, v14, &_dispatch_data_empty, (uint64_t)&off_65340, v16);
    if (v15)
      _dispatch_operation_enqueue(v15, 0, &_dispatch_data_empty);
    _Block_object_dispose(v18, 8);
    _Block_object_dispose(v20, 8);
  }
}

uint64_t __dispatch_read_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, __objc2_class **, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &_dispatch_data_empty, *(unsigned int *)(a1 + 40));
}

unsigned int *__dispatch_read_block_invoke_3(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  unsigned int *result;
  unsigned int *v5;
  int v6;
  _QWORD block[4];
  __int128 v8;
  uint64_t v9;

  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = __dispatch_read_block_invoke_4;
  block[3] = &unk_59448;
  v8 = *(_OWORD *)(a1 + 32);
  v2 = *(NSObject **)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 48);
  dispatch_channel_async(v2, block);
  result = *(unsigned int **)(a1 + 56);
  if (result[2] != 0x7FFFFFFF)
  {
    v5 = result + 2;
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (v6 <= 1)
    {
      if (v6 != 1)
        _os_object_allows_weak_reference_cold_1();
      return (unsigned int *)_os_object_dispose(result, v3);
    }
  }
  return result;
}

void __dispatch_read_block_invoke_4(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  _dispatch_objc_release(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

void __dispatch_read_block_invoke_5(uint64_t a1, int a2, dispatch_data_t data2, int a4)
{
  dispatch_data_t concat;

  if (data2)
  {
    concat = dispatch_data_create_concat(*(dispatch_data_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), data2);
    _dispatch_objc_release(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = concat;
  }
  if (a2)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a4;
}

void dispatch_read_f(dispatch_fd_t a1, size_t a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  _QWORD v5[6];

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  v5[2] = __dispatch_read_f_block_invoke;
  v5[3] = &__block_descriptor_tmp_35;
  v5[4] = a5;
  v5[5] = a4;
  dispatch_read(a1, a2, a3, v5);
}

uint64_t __dispatch_read_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40));
}

void dispatch_write(dispatch_fd_t fd, dispatch_data_t data, dispatch_queue_t queue, void *handler)
{
  unsigned int *v8;
  int v9;
  _QWORD v10[7];
  dispatch_fd_t v11;

  _dispatch_objc_retain(data);
  if (LODWORD(queue[1].isa) != 0x7FFFFFFF)
  {
    v8 = (unsigned int *)&queue[1];
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    if (v9 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 0x40000000;
  v10[2] = __dispatch_write_block_invoke;
  v10[3] = &unk_595A8;
  v10[4] = handler;
  v10[5] = queue;
  v11 = fd;
  v10[6] = data;
  _dispatch_fd_entry_init_async(fd, (uint64_t)v10);
}

void __dispatch_write_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  unsigned int *v7;
  unsigned int *v8;
  int v9;
  _QWORD *v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  size_t size;
  uint64_t v16;
  _QWORD v17[6];
  _QWORD v18[8];
  _QWORD v19[3];
  int v20;
  _QWORD v21[4];
  _QWORD block[5];
  int v23;

  v3 = *(_DWORD *)(a2 + 24);
  if (v3)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = __dispatch_write_block_invoke_2;
    block[3] = &unk_59508;
    v5 = *(_QWORD *)(a1 + 32);
    v4 = *(NSObject **)(a1 + 40);
    block[4] = v5;
    v23 = v3;
    dispatch_channel_async(v4, block);
    v7 = *(unsigned int **)(a1 + 40);
    if (v7[2] != 0x7FFFFFFF)
    {
      v8 = v7 + 2;
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (v9 <= 1)
      {
        if (v9 != 1)
          _os_object_allows_weak_reference_cold_1();
        _os_object_dispose(v7, v6);
      }
    }
  }
  else
  {
    v11 = *(_QWORD **)(a2 + 88);
    if (!v11)
    {
      v11 = _dispatch_io_create(0);
      *((_DWORD *)v11 + 31) = *(_DWORD *)(a1 + 56);
      *((_DWORD *)v11 + 32) = *(_DWORD *)(a1 + 56);
      v11[14] = a2;
      dispatch_retain(*(dispatch_object_t *)(a2 + 72));
      dispatch_retain(*(dispatch_object_t *)(a2 + 80));
      *(_OWORD *)(v11 + 7) = *(_OWORD *)(a2 + 72);
      *(_QWORD *)(a2 + 88) = v11;
    }
    v21[0] = 0;
    v21[1] = v21;
    v21[2] = 0x2000000000;
    v21[3] = 0;
    v19[0] = 0;
    v19[1] = v19;
    v19[2] = 0x2000000000;
    v20 = 0;
    v12 = *(NSObject **)(a2 + 64);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 0x40000000;
    v18[2] = __dispatch_write_block_invoke_3;
    v18[3] = &unk_59558;
    v13 = *(_QWORD *)(a1 + 40);
    v18[4] = *(_QWORD *)(a1 + 32);
    v18[5] = v21;
    v18[6] = v19;
    v18[7] = v13;
    dispatch_channel_async(v12, v18);
    v14 = *(NSObject **)(a1 + 48);
    size = dispatch_data_get_size(v14);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 0x40000000;
    v17[2] = __dispatch_write_block_invoke_5;
    v17[3] = &unk_59580;
    v17[4] = v21;
    v17[5] = v19;
    v16 = _dispatch_operation_create(1, (uint64_t)v11, 0, size, v14, (uint64_t)&off_65340, v17);
    if (v16)
      _dispatch_operation_enqueue(v16, 1u, *(id *)(a1 + 48));
    _dispatch_objc_release(*(id *)(a1 + 48));
    _Block_object_dispose(v19, 8);
    _Block_object_dispose(v21, 8);
  }
}

uint64_t __dispatch_write_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 0, *(unsigned int *)(a1 + 40));
}

unsigned int *__dispatch_write_block_invoke_3(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  unsigned int *result;
  unsigned int *v5;
  int v6;
  _QWORD block[4];
  __int128 v8;
  uint64_t v9;

  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = __dispatch_write_block_invoke_4;
  block[3] = &unk_59530;
  v8 = *(_OWORD *)(a1 + 32);
  v2 = *(NSObject **)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 48);
  dispatch_channel_async(v2, block);
  result = *(unsigned int **)(a1 + 56);
  if (result[2] != 0x7FFFFFFF)
  {
    v5 = result + 2;
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (v6 <= 1)
    {
      if (v6 != 1)
        _os_object_allows_weak_reference_cold_1();
      return (unsigned int *)_os_object_dispose(result, v3);
    }
  }
  return result;
}

void __dispatch_write_block_invoke_4(uint64_t a1)
{
  void *v2;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v2 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if (v2)
    _dispatch_objc_release(v2);
}

id __dispatch_write_block_invoke_5(id result, int a2, id a3, int a4)
{
  uint64_t v6;

  if (a2)
  {
    v6 = (uint64_t)result;
    if (a3)
    {
      result = _dispatch_objc_retain(a3);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8) + 24) = a3;
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 24) = a4;
  }
  return result;
}

void dispatch_write_f(dispatch_fd_t a1, NSObject *a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  _QWORD v5[6];

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  v5[2] = __dispatch_write_f_block_invoke;
  v5[3] = &__block_descriptor_tmp_41;
  v5[4] = a5;
  v5[5] = a4;
  dispatch_write(a1, a2, a3, v5);
}

uint64_t __dispatch_write_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40));
}

void _dispatch_operation_dispose(uint64_t a1, const char *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  int v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;

  if (*(_QWORD *)(a1 + 144))
  {
    _dispatch_operation_deliver_data(a1, 2);
    dispatch_group_leave(*(dispatch_group_t *)(*(_QWORD *)(a1 + 144) + 80));
    dispatch_resume(*(dispatch_object_t *)(*(_QWORD *)(a1 + 144) + 64));
  }
  v3 = *(unsigned int **)(a1 + 136);
  if (v3)
  {
    if (v3[2] != 0x7FFFFFFF)
    {
      v4 = v3 + 2;
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (v5 <= 1)
      {
        if (v5 != 1)
          _os_object_allows_weak_reference_cold_1();
        _os_object_dispose(v3, a2);
      }
    }
  }
  v6 = *(NSObject **)(a1 + 152);
  if (v6)
    dispatch_release(v6);
  v7 = *(void **)(a1 + 176);
  if (v7 && !*(_DWORD *)(a1 + 56))
    free(v7);
  v8 = *(void **)(a1 + 224);
  if (v8)
    _dispatch_objc_release(v8);
  v9 = *(void **)(a1 + 232);
  if (v9)
    _dispatch_objc_release(v9);
  v10 = *(NSObject **)(a1 + 48);
  if (v10)
    dispatch_release(v10);
  _Block_release(*(const void **)(a1 + 128));
}

void _dispatch_operation_deliver_data(uint64_t a1, int a2)
{
  size_t v4;
  size_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  NSObject *v10;
  dispatch_data_t subrange;
  void *v12;
  dispatch_data_t v13;
  __objc2_class **v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  int v20;
  NSObject *v21;
  _QWORD v22[8];
  int v23;
  int v24;
  int v25;

  v4 = *(_QWORD *)(a1 + 200);
  v5 = v4 + *(_QWORD *)(a1 + 208);
  if ((a2 & 3) != 0)
  {
    *(_DWORD *)(a1 + 184) = 0;
LABEL_7:
    v8 = *(_DWORD *)(a1 + 120);
    if (v8)
    {
LABEL_11:
      v7 = 1;
      goto LABEL_12;
    }
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 136) + 120) & 2) != 0)
    {
      v8 = 89;
      *(_DWORD *)(a1 + 120) = 89;
      goto LABEL_11;
    }
LABEL_9:
    v8 = 0;
    goto LABEL_11;
  }
  v6 = *(_DWORD *)(a1 + 184);
  *(_DWORD *)(a1 + 184) = 0;
  if ((v6 & 1) != 0)
    goto LABEL_7;
  if (v5 >= *(_QWORD *)(a1 + 72))
    goto LABEL_9;
  if (v4 < *(_QWORD *)(a1 + 192))
    return;
  v7 = 0;
  v8 = 0;
LABEL_12:
  v9 = *(_DWORD *)(a1 + 56);
  if (v9 == 1)
  {
    if (v7)
      subrange = dispatch_data_create_subrange(*(dispatch_data_t *)(a1 + 232), v4, *(_QWORD *)(a1 + 112));
    else
      subrange = 0;
    v12 = *(void **)(a1 + 224);
    if (v12 && *(_QWORD *)(a1 + 200) == *(_QWORD *)(a1 + 192))
    {
      _dispatch_objc_release(v12);
      *(_QWORD *)(a1 + 224) = 0;
      *(_QWORD *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 200) = 0;
      if (v7)
      {
        _dispatch_objc_retain(subrange);
        v13 = subrange;
      }
      else
      {
        v13 = dispatch_data_create_subrange(*(dispatch_data_t *)(a1 + 232), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 112));
      }
      _dispatch_objc_release(*(id *)(a1 + 232));
      *(_QWORD *)(a1 + 232) = v13;
      if (!v7)
        goto LABEL_37;
      goto LABEL_28;
    }
  }
  else
  {
    if (v9)
      return;
    if (v4)
    {
      v10 = dispatch_data_create(*(const void **)(a1 + 176), v4, 0, &__block_literal_global);
      *(_QWORD *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 200) = 0;
      subrange = dispatch_data_create_concat(*(dispatch_data_t *)(a1 + 232), v10);
      _dispatch_objc_release(*(id *)(a1 + 232));
      _dispatch_objc_release(v10);
    }
    else
    {
      subrange = *(dispatch_data_t *)(a1 + 232);
    }
    v14 = &_dispatch_data_empty;
    if (!v7)
      v14 = (__objc2_class **)subrange;
    *(_QWORD *)(a1 + 232) = v14;
  }
  if (!v7)
  {
LABEL_37:
    *(_QWORD *)(a1 + 208) = v5;
    return;
  }
LABEL_28:
  if ((a2 & 8) != 0 && !dispatch_data_get_size(subrange))
    goto LABEL_37;
  *(_QWORD *)(a1 + 208) = 0;
  v15 = *(_DWORD *)(a1 + 56);
  v16 = *(_QWORD *)(a1 + 128);
  v17 = *(_QWORD *)(a1 + 144);
  dispatch_suspend(*(dispatch_object_t *)(v17 + 64));
  v18 = *(_QWORD *)(a1 + 136);
  if (*(_DWORD *)(v18 + 8) != 0x7FFFFFFF)
  {
    v19 = (unsigned int *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    if (v20 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  v21 = *(NSObject **)(a1 + 48);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 0x40000000;
  v22[2] = ___dispatch_operation_deliver_data_block_invoke;
  v22[3] = &unk_59968;
  v23 = a2;
  v24 = v15;
  v25 = v8;
  v22[4] = v16;
  v22[5] = subrange;
  v22[6] = v18;
  v22[7] = v17;
  dispatch_channel_async(v21, v22);
}

void _dispatch_disk_dispose(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 112);
  if (v1)
    *(_QWORD *)(v1 + 120) = *(_QWORD *)(a1 + 120);
  **(_QWORD **)(a1 + 120) = v1;
  dispatch_release(*(dispatch_object_t *)(a1 + 72));
}

unsigned int *___dispatch_io_init_block_invoke(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  unsigned int *result;
  unsigned int *v5;
  int v6;
  _QWORD v7[5];
  int v8;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  v7[2] = ___dispatch_io_init_block_invoke_2;
  v7[3] = &unk_595F0;
  v2 = *(NSObject **)(a1 + 40);
  v7[4] = *(_QWORD *)(a1 + 32);
  v8 = *(_DWORD *)(a1 + 48);
  dispatch_channel_async(v2, v7);
  result = *(unsigned int **)(a1 + 40);
  if (result[2] != 0x7FFFFFFF)
  {
    v5 = result + 2;
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (v6 <= 1)
    {
      if (v6 != 1)
        _os_object_allows_weak_reference_cold_1();
      return (unsigned int *)_os_object_dispose(result, v3);
    }
  }
  return result;
}

uint64_t ___dispatch_io_init_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void ___dispatch_io_stop_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = ___dispatch_io_stop_block_invoke_2;
  block[3] = &__block_descriptor_tmp_53;
  block[4] = v1;
  dispatch_channel_async(v2, block);
}

unsigned int *___dispatch_io_stop_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned int *v6;
  int v7;
  unsigned int *result;
  unsigned int *v9;
  int v10;
  _QWORD block[5];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 112);
  if (v3)
  {
    _dispatch_fd_entry_cleanup_operations(*(_QWORD *)(v2 + 112), v2);
    v4 = *(_QWORD *)(a1 + 32);
    if ((*(_BYTE *)(v4 + 120) & 1) == 0)
    {
      v5 = *(_QWORD **)(v3 + 8);
      if (v5)
      {
        *v5 = 0;
        v4 = *(_QWORD *)(a1 + 32);
      }
      *(_QWORD *)(v4 + 112) = 0;
      dispatch_resume(*(dispatch_object_t *)(v3 + 64));
    }
  }
  else if (*(_DWORD *)(v2 + 124) != -1)
  {
    if (*(_DWORD *)(v2 + 8) != 0x7FFFFFFF)
    {
      v6 = (unsigned int *)(v2 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
      if (v7 < 1)
        dispatch_set_target_queue_cold_2();
      v2 = *(_QWORD *)(a1 + 32);
    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = ___dispatch_io_stop_block_invoke_3;
    block[3] = &__block_descriptor_tmp_52;
    block[4] = v2;
    dispatch_channel_async((dispatch_queue_t)_dispatch_io_fds_lockq, block);
  }
  result = *(unsigned int **)(a1 + 32);
  if (result[2] != 0x7FFFFFFF)
  {
    v9 = result + 2;
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (v10 <= 1)
    {
      if (v10 != 1)
        _os_object_allows_weak_reference_cold_1();
      return (unsigned int *)_os_object_dispose(result, (const char *)v2);
    }
  }
  return result;
}

void _dispatch_fd_entry_cleanup_operations(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  int v6;
  NSObject *v7;
  unsigned int *v8;
  char v9;
  char v10;
  NSObject **v11;
  int v12;
  NSObject *v13;
  _QWORD v14[7];
  _QWORD block[6];

  v4 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (a2 && *(_DWORD *)(a2 + 8) != 0x7FFFFFFF)
    {
      v5 = (unsigned int *)(a2 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
      if (v6 <= 0)
        dispatch_set_target_queue_cold_2();
    }
    dispatch_suspend(*(dispatch_object_t *)(a1 + 64));
    v7 = *(NSObject **)(*(_QWORD *)(a1 + 56) + 72);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = ___dispatch_fd_entry_cleanup_operations_block_invoke;
    block[3] = &__block_descriptor_tmp_55;
    block[4] = a1;
    block[5] = a2;
    dispatch_channel_async(v7, block);
  }
  else
  {
    v8 = (unsigned int *)(a2 + 8);
    v9 = 1;
    do
    {
      v10 = v9;
      v11 = *(NSObject ***)(a1 + 8 * v4 + 40);
      if (v11)
      {
        if (a2 && *v8 != 0x7FFFFFFF)
        {
          do
            v12 = __ldxr(v8);
          while (__stxr(v12 + 1, v8));
          if (v12 <= 0)
            dispatch_set_target_queue_cold_2();
        }
        dispatch_suspend(*(dispatch_object_t *)(a1 + 64));
        v13 = *v11;
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 0x40000000;
        v14[2] = ___dispatch_fd_entry_cleanup_operations_block_invoke_2;
        v14[3] = &__block_descriptor_tmp_56;
        v14[4] = v11;
        v14[5] = a2;
        v14[6] = a1;
        dispatch_channel_async(v13, v14);
      }
      v9 = 0;
      v4 = 1;
    }
    while ((v10 & 1) != 0);
  }
}

void ___dispatch_io_stop_block_invoke_3(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int *v5;
  int v6;

  v2 = *(unsigned int **)(a1 + 32);
  v3 = v2[31];
  v4 = _dispatch_io_fds[v3 & 0x3F];
  if (v4)
  {
    while (*(_DWORD *)v4 != v3)
    {
      v4 = *(_QWORD *)(v4 + 112);
      if (!v4)
        goto LABEL_6;
    }
    _dispatch_fd_entry_cleanup_operations(v4, (uint64_t)v2);
    v2 = *(unsigned int **)(a1 + 32);
  }
LABEL_6:
  if (v2[2] != 0x7FFFFFFF)
  {
    v5 = v2 + 2;
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (v6 <= 1)
    {
      if (v6 != 1)
        _os_object_allows_weak_reference_cold_1();
      _os_object_dispose(v2, (const char *)v2);
    }
  }
}

unsigned int *___dispatch_fd_entry_cleanup_operations_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  unsigned int *result;
  unsigned int *v9;
  int v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 56);
  v4 = *(_QWORD *)(v3 + 48);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 40);
    do
    {
      while (1)
      {
        v6 = v4;
        v4 = *(_QWORD *)(v4 + 240);
        if (!*(_BYTE *)(v6 + 160) && (!v5 || *(_QWORD *)(v6 + 136) == v5))
          break;
        if (!v4)
          goto LABEL_9;
      }
      _dispatch_disk_complete_operation(v3, v6);
    }
    while (v4);
LABEL_9:
    v2 = *(_QWORD *)(a1 + 32);
  }
  dispatch_resume(*(dispatch_object_t *)(v2 + 64));
  result = *(unsigned int **)(a1 + 40);
  if (result)
  {
    if (result[2] != 0x7FFFFFFF)
    {
      v9 = result + 2;
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (v10 <= 1)
      {
        if (v10 != 1)
          _os_object_allows_weak_reference_cold_1();
        return (unsigned int *)_os_object_dispose(result, v7);
      }
    }
  }
  return result;
}

unsigned int *___dispatch_fd_entry_cleanup_operations_block_invoke_2(uint64_t *a1)
{
  const char *v2;
  unsigned int *result;
  unsigned int *v4;
  int v5;

  _dispatch_stream_cleanup_operations(a1[4], a1[5]);
  dispatch_resume(*(dispatch_object_t *)(a1[6] + 64));
  result = (unsigned int *)a1[5];
  if (result)
  {
    if (result[2] != 0x7FFFFFFF)
    {
      v4 = result + 2;
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (v5 <= 1)
      {
        if (v5 != 1)
          _os_object_allows_weak_reference_cold_1();
        return (unsigned int *)_os_object_dispose(result, v2);
      }
    }
  }
  return result;
}

void _dispatch_stream_cleanup_operations(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    do
    {
      v5 = *(_QWORD *)(v4 + 240);
      if (!a2 || *(_QWORD *)(v4 + 136) == a2)
        _dispatch_stream_complete_operation(a1, v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
  {
    do
    {
      v7 = *(_QWORD *)(v6 + 240);
      if (!a2 || *(_QWORD *)(v6 + 136) == a2)
        _dispatch_stream_complete_operation(a1, v6);
      v6 = v7;
    }
    while (v7);
  }
  if (*(_BYTE *)(a1 + 24) && !*(_QWORD *)(a1 + 48) && !*(_QWORD *)(a1 + 32))
  {
    dispatch_suspend(*(dispatch_object_t *)(a1 + 8));
    *(_BYTE *)(a1 + 24) = 0;
  }
}

void _dispatch_disk_complete_operation(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  NSObject *v8;
  unsigned int *v9;
  int v10;

  if (*(_QWORD *)(a1 + 64) == a2)
    *(_QWORD *)(a1 + 64) = **(_QWORD **)(*(_QWORD *)(a2 + 248) + 8);
  if (!*(_QWORD *)(a2 + 64))
  {
    v3 = *(_QWORD **)(a2 + 256);
    v4 = *(_QWORD **)(a2 + 264);
    if (v3)
    {
      v3[33] = v4;
      **(_QWORD **)(a2 + 264) = v3;
      v3[30] = 0;
      v5 = *(_QWORD **)(a1 + 56);
      v3[31] = v5;
      *v5 = v3;
      *(_QWORD *)(a1 + 56) = v3 + 30;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a2 + 144) + 104) = v4;
      *v4 = 0;
    }
  }
  v6 = *(_QWORD *)(a2 + 240);
  v7 = *(_QWORD **)(a2 + 248);
  if (v6)
  {
    *(_QWORD *)(v6 + 248) = v7;
    v7 = *(_QWORD **)(a2 + 248);
  }
  else
  {
    *(_QWORD *)(a1 + 56) = v7;
  }
  *v7 = v6;
  v8 = *(NSObject **)(a2 + 152);
  if (v8)
    dispatch_source_cancel(v8);
  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF)
  {
    v9 = (unsigned int *)(a2 + 8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (v10 <= 1)
    {
      if (v10 != 1)
        _os_object_allows_weak_reference_cold_1();
      _os_object_dispose((void *)a2, (const char *)a2);
    }
  }
}

void _dispatch_stream_complete_operation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  NSObject *v5;
  unsigned int *v6;
  int v7;

  v3 = *(_QWORD *)(a2 + 240);
  if (v3)
    v4 = (_QWORD *)(v3 + 248);
  else
    v4 = (_QWORD *)(a1 + 16 * *(_QWORD *)(a2 + 64) + 40);
  *v4 = *(_QWORD *)(a2 + 248);
  **(_QWORD **)(a2 + 248) = v3;
  if (*(_QWORD *)(a1 + 16) == a2)
    *(_QWORD *)(a1 + 16) = 0;
  v5 = *(NSObject **)(a2 + 152);
  if (v5)
    dispatch_source_cancel(v5);
  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF)
  {
    v6 = (unsigned int *)(a2 + 8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (v7 <= 1)
    {
      if (v7 != 1)
        _os_object_allows_weak_reference_cold_1();
      _os_object_dispose((void *)a2, (const char *)a2);
    }
  }
}

unsigned int *___dispatch_operation_create_block_invoke(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  unsigned int *result;
  unsigned int *v5;
  int v6;
  _QWORD v7[5];
  __int128 v8;
  uint64_t v9;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  v7[2] = ___dispatch_operation_create_block_invoke_2;
  v7[3] = &unk_596E0;
  v9 = *(_QWORD *)(a1 + 64);
  v2 = *(NSObject **)(a1 + 40);
  v7[4] = *(_QWORD *)(a1 + 32);
  v8 = *(_OWORD *)(a1 + 48);
  dispatch_channel_async(v2, v7);
  result = *(unsigned int **)(a1 + 40);
  if (result[2] != 0x7FFFFFFF)
  {
    v5 = result + 2;
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (v6 <= 1)
    {
      if (v6 != 1)
        _os_object_allows_weak_reference_cold_1();
      return (unsigned int *)_os_object_dispose(result, v3);
    }
  }
  return result;
}

void ___dispatch_operation_create_block_invoke_2(uint64_t a1)
{
  const char *v2;
  unsigned int *v3;
  unsigned int *v4;
  int v5;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v3 = *(unsigned int **)(a1 + 48);
  if (v3[2] != 0x7FFFFFFF)
  {
    v4 = v3 + 2;
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (v5 <= 1)
    {
      if (v5 != 1)
        _os_object_allows_weak_reference_cold_1();
      _os_object_dispose(v3, v2);
    }
  }
  _dispatch_objc_release(*(id *)(a1 + 40));
}

void ___dispatch_operation_enqueue_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  _dispatch_objc_release(*(id *)(a1 + 40));
}

void ___dispatch_operation_enqueue_block_invoke_2(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 40);
  if (_dispatch_operation_should_enqueue((uint64_t)v2, *(NSObject **)v3, *(id *)(a1 + 48)))
  {
    if (*(_QWORD *)(v3 + 48))
      v4 = 1;
    else
      v4 = *(_QWORD *)(v3 + 32) != 0;
    v2[30] = 0;
    v5 = v3 + 16 * v2[8];
    v2[31] = *(_QWORD *)(v5 + 40);
    **(_QWORD **)(v5 + 40) = v2;
    *(_QWORD *)(v5 + 40) = v2 + 30;
    if (!v4)
      dispatch_channel_async_f(*(dispatch_queue_t *)v3, *(void **)v3, (dispatch_function_t)_dispatch_stream_queue_handler);
  }
  _dispatch_objc_release(*(id *)(a1 + 48));
}

void ___dispatch_operation_enqueue_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 40);
  if (_dispatch_operation_should_enqueue((uint64_t)v3, *(NSObject **)(v2 + 72), *(id *)(a1 + 48)))
  {
    if (v3[8])
    {
      v3[30] = 0;
      v4 = *(_QWORD **)(v2 + 56);
      v3[31] = v4;
      *v4 = v3;
      *(_QWORD *)(v2 + 56) = v3 + 30;
    }
    else
    {
      v5 = v3[18];
      if (!*(_QWORD *)(v5 + 96))
      {
        v3[30] = 0;
        v6 = *(_QWORD **)(v2 + 56);
        v3[31] = v6;
        *v6 = v3;
        *(_QWORD *)(v2 + 56) = v3 + 30;
        v5 = v3[18];
      }
      v7 = *(_QWORD **)(v5 + 104);
      v3[32] = 0;
      v3[33] = v7;
      *v7 = v3;
      *(_QWORD *)(v3[18] + 104) = v3 + 32;
    }
    _dispatch_disk_handler((_QWORD *)v2);
  }
  _dispatch_objc_release(*(id *)(a1 + 48));
}

uint64_t _dispatch_operation_should_enqueue(uint64_t a1, NSObject *a2, id a3)
{
  const char *v6;
  int v7;
  int v8;
  unsigned int *v9;
  int v10;
  NSObject *v12;
  dispatch_time_t v13;
  _QWORD v14[6];

  _dispatch_objc_retain(a3);
  *(_QWORD *)(a1 + 232) = a3;
  v7 = *(_DWORD *)(*(_QWORD *)(a1 + 136) + 120);
  if ((v7 & 3) != 0)
  {
    if ((v7 & 2) != 0)
    {
      v8 = 89;
      goto LABEL_5;
    }
  }
  else
  {
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 144) + 24);
    if (v8)
    {
LABEL_5:
      *(_DWORD *)(a1 + 120) = v8;
      if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
      {
        v9 = (unsigned int *)(a1 + 8);
        do
          v10 = __ldxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (v10 <= 1)
        {
          if (v10 != 1)
            _os_object_allows_weak_reference_cold_1();
          _os_object_dispose((void *)a1, v6);
        }
      }
      return 0;
    }
  }
  if (*(_QWORD *)(a1 + 88))
  {
    v12 = *(NSObject **)(a1 + 152);
    if (!v12)
    {
      v12 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a2);
      v13 = dispatch_time(0, *(_QWORD *)(a1 + 88));
      dispatch_source_set_timer(v12, v13, *(_QWORD *)(a1 + 88), 0);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 0x40000000;
      v14[2] = ___dispatch_operation_timer_block_invoke;
      v14[3] = &__block_descriptor_tmp_63;
      v14[4] = v12;
      v14[5] = a1;
      dispatch_source_set_event_handler(v12, v14);
      *(_QWORD *)(a1 + 152) = v12;
    }
    dispatch_resume(v12);
  }
  return 1;
}

void _dispatch_stream_queue_handler(NSObject *a1)
{
  void *context;

  context = dispatch_get_context(a1);
  if (context)
    _dispatch_stream_handler((uint64_t)context);
}

void ___dispatch_operation_timer_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  if (!dispatch_source_testcancel(*(dispatch_source_t *)(a1 + 32)))
  {
    v2 = *(_QWORD *)(a1 + 40);
    v3 = *(_QWORD *)(v2 + 96) & 1;
    if (*(_BYTE *)(v2 + 160))
      v4 = (*(_QWORD *)(v2 + 96) & 1) == 0;
    else
      v4 = 1;
    if (v4)
      _dispatch_operation_deliver_data(v2, v3);
    else
      *(_DWORD *)(v2 + 184) = v3;
  }
}

void _dispatch_stream_handler(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  NSObject *v9;
  int v10;
  char **v11;
  NSObject *v12;
  void (*v13)(uint64_t);
  _QWORD v14[5];
  void (*v15[5])(uint64_t);

  while (1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 64);
      if (v3)
      {
        if (v3 != 1)
          return;
        v2 = *(_QWORD *)(v2 + 240);
        if (!v2)
        {
          v2 = *(_QWORD *)(a1 + 48);
          if (!v2)
            return;
        }
      }
    }
    else
    {
      v4 = *(_QWORD *)(a1 + 32);
      if (!(*(_QWORD *)(a1 + 48) | v4))
        return;
      v2 = v4 ? *(_QWORD *)(a1 + 32) : *(_QWORD *)(a1 + 48);
      if (!v2)
        return;
    }
    v5 = *(_DWORD *)(*(_QWORD *)(v2 + 136) + 120);
    if ((v5 & 3) != 0)
      break;
    v7 = *(_QWORD *)(v2 + 144);
    v6 = *(_DWORD *)(v7 + 24);
    if (!v6)
      goto LABEL_18;
LABEL_16:
    *(_DWORD *)(v2 + 120) = v6;
    _dispatch_stream_complete_operation(a1, v2);
  }
  if ((v5 & 2) != 0)
  {
    v6 = 89;
    goto LABEL_16;
  }
  v7 = *(_QWORD *)(v2 + 144);
LABEL_18:
  *(_QWORD *)(a1 + 16) = v2;
  dispatch_suspend(*(dispatch_object_t *)(v7 + 64));
  if (*(_QWORD *)(v2 + 216))
    v8 = 1;
  else
    v8 = byte_61190 == 0;
  if (!v8)
    _dispatch_operation_deliver_data(v2, 1);
  switch(_dispatch_operation_perform(v2))
  {
    case 1u:
      goto LABEL_26;
    case 2u:
      _dispatch_operation_deliver_data(v2, 0);
      goto LABEL_27;
    case 3u:
      _dispatch_operation_deliver_data(v2, 9);
LABEL_26:
      _dispatch_stream_complete_operation(a1, v2);
LABEL_27:
      if (*(_QWORD *)(a1 + 48) || *(_QWORD *)(a1 + 32))
        dispatch_channel_async_f(*(dispatch_queue_t *)a1, *(void **)a1, (dispatch_function_t)_dispatch_stream_queue_handler);
      goto LABEL_43;
    case 4u:
      _dispatch_stream_complete_operation(a1, v2);
      goto LABEL_31;
    case 5u:
LABEL_31:
      if (!*(_QWORD *)(a1 + 48) && !*(_QWORD *)(a1 + 32))
        goto LABEL_43;
      *(_BYTE *)(a1 + 24) = 1;
      v9 = *(NSObject **)(a1 + 8);
      if (v9)
        goto LABEL_42;
      v10 = *(_DWORD *)(v2 + 56);
      if (!v10)
      {
        v11 = &_dispatch_source_type_read;
        goto LABEL_40;
      }
      if (v10 == 1)
      {
        v11 = &_dispatch_source_type_write;
LABEL_40:
        v9 = dispatch_source_create((dispatch_source_type_t)v11, **(int **)(v2 + 144), 0, *(dispatch_queue_t *)a1);
        dispatch_set_context(v9, (void *)a1);
        dispatch_source_set_event_handler_f(v9, (dispatch_function_t)_dispatch_stream_source_handler);
        v13 = *(void (**)(uint64_t))(*(_QWORD *)(v2 + 144) + 64);
        v15[0] = (void (*)(uint64_t))_NSConcreteStackBlock;
        v15[1] = (void (*)(uint64_t))0x40000000;
        v15[2] = ___dispatch_stream_source_block_invoke;
        v15[3] = (void (*)(uint64_t))&__block_descriptor_tmp_67;
        v15[4] = v13;
        dispatch_source_set_mandatory_cancel_handler((uint64_t)v9, v15);
        *(_QWORD *)(a1 + 8) = v9;
        goto LABEL_42;
      }
      v9 = 0;
LABEL_42:
      dispatch_resume(v9);
LABEL_43:
      dispatch_resume(*(dispatch_object_t *)(v7 + 64));
      return;
    case 6u:
      _dispatch_stream_cleanup_operations(a1, *(_QWORD *)(v2 + 136));
      goto LABEL_43;
    case 7u:
      dispatch_suspend(*(dispatch_object_t *)(v7 + 64));
      v12 = *(NSObject **)(v7 + 72);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 0x40000000;
      v14[2] = ___dispatch_stream_handler_block_invoke;
      v14[3] = &__block_descriptor_tmp_64;
      v14[4] = v7;
      dispatch_channel_async(v12, v14);
      goto LABEL_43;
    default:
      goto LABEL_43;
  }
}

uint64_t _dispatch_operation_perform(uint64_t a1)
{
  int v2;
  int *v3;
  int v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t StatusReg;
  int v11;
  uint64_t v12;
  uint64_t NOCANCEL;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  size_t size;
  size_t v19;
  uint64_t v20;
  size_t v21;
  unsigned int *v23;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  size_t v28;
  NSObject *subrange;
  _QWORD v30[6];

  if (a1)
  {
    v2 = *(_DWORD *)(*(_QWORD *)(a1 + 136) + 120);
    if ((v2 & 3) == 0)
    {
      v3 = (int *)(*(_QWORD *)(a1 + 144) + 24);
      v4 = *v3;
      if (*v3)
        goto LABEL_35;
      goto LABEL_8;
    }
  }
  else
  {
    LOBYTE(v2) = 95;
  }
  if ((v2 & 2) != 0)
  {
    *(_DWORD *)(a1 + 120) = 89;
    return 6;
  }
LABEL_8:
  if (*(_QWORD *)(a1 + 176))
    goto LABEL_9;
  v15 = *(_QWORD *)(a1 + 80);
  v16 = dispatch_io_defaults;
  v17 = *(_DWORD *)(a1 + 56);
  if (v17 == 1)
  {
    if (dispatch_io_defaults >= v15)
      v26 = *(_QWORD *)(a1 + 80);
    else
      v26 = dispatch_io_defaults;
    *(_QWORD *)(a1 + 192) = 0;
    v27 = *(NSObject **)(a1 + 232);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 0x40000000;
    v30[2] = ___dispatch_operation_perform_block_invoke;
    v30[3] = &__block_descriptor_tmp_66;
    v30[4] = a1;
    v30[5] = v26;
    dispatch_data_apply(v27, v30);
    v28 = *(_QWORD *)(a1 + 192);
    if (v28 > v15)
    {
      *(_QWORD *)(a1 + 192) = v15;
      v28 = v15;
    }
    subrange = dispatch_data_create_subrange(*(dispatch_data_t *)(a1 + 232), 0, v28);
    *(_QWORD *)(a1 + 224) = dispatch_data_create_map(subrange, (const void **)(a1 + 176), 0);
    _dispatch_objc_release(subrange);
    goto LABEL_9;
  }
  if (v17)
    goto LABEL_9;
  size = dispatch_data_get_size(*(dispatch_data_t *)(a1 + 232));
  if (v15 - size >= v16)
    v19 = v16;
  else
    v19 = v15 - size;
  v20 = *(_QWORD *)(a1 + 112);
  if (v20 != -1)
  {
    v21 = v20 - *(_QWORD *)(a1 + 216);
    if (v21 < v19)
      v19 = v21;
  }
  *(_QWORD *)(a1 + 192) = v19;
  v4 = malloc_type_posix_memalign((void **)(a1 + 176), vm_page_size, v19, 0x23812559uLL);
  if (!v4)
  {
LABEL_9:
    v5 = *(_DWORD **)(a1 + 144);
    if (*v5 == -1)
    {
      v4 = _dispatch_fd_entry_open((uint64_t)v5, *(_QWORD *)(a1 + 136));
      if (v4)
        goto LABEL_35;
    }
    v6 = *(_QWORD *)(a1 + 200);
    v7 = *(_QWORD *)(a1 + 176) + v6;
    v8 = *(_QWORD *)(a1 + 192) - v6;
    v9 = *(_QWORD *)(a1 + 216) + *(_QWORD *)(a1 + 104);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      v11 = *(_DWORD *)(a1 + 56);
      if (v11 == 1)
      {
        v14 = *(_QWORD *)(a1 + 64);
        if (v14 == 1)
        {
          NOCANCEL = pwrite_NOCANCEL(**(unsigned int **)(a1 + 144), v7, v8, v9);
        }
        else
        {
          if (v14)
            goto LABEL_22;
          NOCANCEL = write_NOCANCEL(**(unsigned int **)(a1 + 144), v7, v8);
        }
      }
      else
      {
        if (v11)
          goto LABEL_22;
        v12 = *(_QWORD *)(a1 + 64);
        if (v12 == 1)
        {
          NOCANCEL = pread_NOCANCEL(**(unsigned int **)(a1 + 144), v7, v8, v9);
        }
        else
        {
          if (v12)
            goto LABEL_22;
          NOCANCEL = read_NOCANCEL(**(unsigned int **)(a1 + 144), v7, v8);
        }
      }
      if (NOCANCEL != -1)
      {
        if (!NOCANCEL)
          return 3;
        *(_QWORD *)(a1 + 200) += NOCANCEL;
        v25 = *(_QWORD *)(a1 + 216) + NOCANCEL;
        *(_QWORD *)(a1 + 216) = v25;
        if (v25 == *(_QWORD *)(a1 + 112))
          return 1;
        else
          return 2;
      }
LABEL_22:
      v4 = **(_DWORD **)(StatusReg + 8);
    }
    while (v4 == 4);
  }
LABEL_35:
  if (v4 == 35)
  {
    if (!*(_DWORD *)(a1 + 56)
      && *(_QWORD *)(a1 + 216)
      && *(_QWORD *)(a1 + 136) == *(_QWORD *)(*(_QWORD *)(a1 + 144) + 88))
    {
      return 4;
    }
    else
    {
      return 5;
    }
  }
  *(_DWORD *)(a1 + 120) = v4;
  if (v4 == 89)
    return 6;
  if (v4 != 9)
    return 1;
  v23 = (unsigned int *)(*(_QWORD *)(a1 + 144) + 24);
  while (!__ldxr(v23))
  {
    if (!__stxr(9u, v23))
      return 7;
  }
  __clrex();
  return 7;
}

void ___dispatch_stream_handler_block_invoke(uint64_t a1)
{
  _dispatch_fd_entry_cleanup_operations(*(_QWORD *)(a1 + 32), 0);
  dispatch_resume(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 64));
}

BOOL ___dispatch_operation_perform_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 192);
  v7 = v6 + a5;
  if (!v6 || (v8 = *(_QWORD *)(a1 + 40), v7 <= v8))
  {
    *(_QWORD *)(v5 + 192) = v7;
    v8 = *(_QWORD *)(a1 + 40);
  }
  return v7 < v8;
}

uint64_t _dispatch_stream_source_handler(uint64_t a1)
{
  dispatch_suspend(*(dispatch_object_t *)(a1 + 8));
  *(_BYTE *)(a1 + 24) = 0;
  return _dispatch_stream_handler(a1);
}

void ___dispatch_stream_source_block_invoke(uint64_t a1)
{
  dispatch_resume(*(dispatch_object_t *)(a1 + 32));
}

void _dispatch_disk_handler(_QWORD *context)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  int v11;
  unsigned int *v12;
  int v13;
  uint64_t v14;

  if (!*((_BYTE *)context + 108))
  {
    v3 = context[10];
    v2 = context[11];
    v4 = v2;
    if (v2 <= v3)
      v4 = context[16] + v2;
    if (v3 > v4)
    {
LABEL_33:
      context[10] = v3 % context[16];
      v14 = context[v2 + 17];
      if (v14)
      {
        *((_BYTE *)context + 108) = 1;
        dispatch_channel_async_f(*(dispatch_queue_t *)(v14 + 24), context, (dispatch_function_t)_dispatch_disk_perform);
      }
      return;
    }
    while (1)
    {
      v5 = v3 % context[16];
      if (context[v5 + 17] || (v6 = context[6]) == 0)
      {
LABEL_32:
        v2 = context[11];
        goto LABEL_33;
      }
      v7 = context[8];
      v8 = v7;
      if (v7)
      {
        do
        {
          if (*(_QWORD *)(v8 + 240))
            v8 = *(_QWORD *)(v8 + 240);
          else
            v8 = context[6];
          if (*(_BYTE *)(v8 + 160))
            v9 = v8 == v7;
          else
            v9 = 1;
        }
        while (!v9);
        if (*(_BYTE *)(v8 + 160))
          goto LABEL_32;
      }
      else
      {
        v8 = context[6];
        if (*(_BYTE *)(v6 + 160))
          goto LABEL_32;
      }
      context[8] = v8;
      v10 = *(_DWORD *)(*(_QWORD *)(v8 + 136) + 120);
      if ((v10 & 3) != 0)
      {
        if ((v10 & 2) == 0)
          goto LABEL_25;
        v11 = 89;
      }
      else
      {
        v11 = *(_DWORD *)(*(_QWORD *)(v8 + 144) + 24);
        if (!v11)
        {
LABEL_25:
          if (*(_DWORD *)(v8 + 8) != 0x7FFFFFFF)
          {
            v12 = (unsigned int *)(v8 + 8);
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            if (v13 < 1)
              dispatch_set_target_queue_cold_2();
            v5 = v3 % context[16];
          }
          context[v5 + 17] = v8;
          *(_BYTE *)(v8 + 160) = 1;
          ++v3;
          goto LABEL_31;
        }
      }
      *(_DWORD *)(v8 + 120) = v11;
      _dispatch_disk_complete_operation((uint64_t)context, v8);
LABEL_31:
      if (v3 > v4)
        goto LABEL_32;
    }
  }
}

void _dispatch_disk_perform(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t StatusReg;
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  BOOL v9;
  int v10;
  int64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  _QWORD block[6];
  int v22;
  int64_t v23;
  uint64_t v24;

  v2 = dispatch_io_defaults;
  v3 = a1[12];
  v4 = a1[10];
  if (v4 <= v3)
    v4 += a1[16];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    v6 = v3 % a1[16];
    v7 = a1[v6 + 17];
    if (!v7)
      break;
    if (*(_DWORD *)(v7 + 56) != 1)
    {
      v8 = *(_DWORD **)(v7 + 144);
      if (*v8 != -1 || !_dispatch_fd_entry_open((uint64_t)v8, *(_QWORD *)(v7 + 136)))
      {
        if (*(_QWORD *)(v7 + 216))
          v9 = 1;
        else
          v9 = byte_61190 == 0;
        if (!v9)
          _dispatch_operation_deliver_data(v7, 1);
        if (v4 - v3 == 1 && !a1[a1[10] + 17])
          v2 <<= *(_QWORD *)(v7 + 168) == 0;
        v10 = *(_DWORD *)(*(_QWORD *)(v7 + 136) + 120);
        if ((v10 & 3) != 0)
        {
          if ((v10 & 2) == 0)
            goto LABEL_23;
        }
        else if (!*(_DWORD *)(*(_QWORD *)(v7 + 144) + 24))
        {
LABEL_23:
          v24 = 0;
          v11 = *(_QWORD *)(v7 + 168);
          v12 = *(_QWORD *)(v7 + 104) + v2;
          if (v11 <= (uint64_t)(v12 + *(_QWORD *)(v7 + 216) + vm_page_size))
          {
            if (v11)
            {
              v13 = v2;
            }
            else
            {
              if (v12 % vm_page_size)
                v14 = vm_page_size - v12 % vm_page_size;
              else
                v14 = 0;
              v13 = v14 + v2;
              v11 = *(_QWORD *)(v7 + 104);
            }
            LODWORD(v24) = v13;
            v23 = v11;
            *(_QWORD *)(v7 + 168) = v11 + v13;
            while (fcntl_NOCANCEL(**(unsigned int **)(v7 + 144), 44) == -1)
            {
              v15 = **(_DWORD **)(StatusReg + 8);
              if (v15 != 4)
              {
                if (v15 > 0x2D || ((1 << v15) & 0x200008000001) == 0)
                  _dispatch_bug(2308, (int)v15);
                break;
              }
            }
          }
        }
      }
    }
    if (++v3 >= v4)
    {
      v6 = v3 % a1[16];
      break;
    }
  }
  a1[12] = v6;
  v17 = a1[a1[11] + 17];
  v18 = _dispatch_operation_perform(v17);
  v19 = a1[11];
  a1[v19 + 17] = 0;
  a1[11] = (unint64_t)(v19 + 1) % a1[16];
  v20 = a1[9];
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = ___dispatch_disk_perform_block_invoke;
  block[3] = &__block_descriptor_tmp_68;
  v22 = v18;
  block[4] = v17;
  block[5] = a1;
  dispatch_channel_async(v20, block);
}

unsigned int *___dispatch_disk_perform_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  const char *v6;
  unsigned int *result;
  unsigned int *v8;
  int v9;

  switch(*(_DWORD *)(a1 + 48))
  {
    case 1:
      goto LABEL_4;
    case 2:
      _dispatch_operation_deliver_data(*(_QWORD *)(a1 + 32), 0);
      break;
    case 3:
      _dispatch_operation_deliver_data(*(_QWORD *)(a1 + 32), 9);
LABEL_4:
      _dispatch_disk_complete_operation(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
      break;
    case 6:
      _dispatch_disk_cleanup_operations(*(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136));
      break;
    case 7:
      v2 = *(_QWORD *)(a1 + 40);
      v3 = *(_QWORD *)(v2 + 48);
      if (v3)
      {
        do
        {
          v4 = *(_QWORD *)(v3 + 240);
          _dispatch_disk_complete_operation(v2, v3);
          v3 = v4;
        }
        while (v4);
      }
      break;
    default:
      break;
  }
  v5 = *(_BYTE **)(a1 + 40);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 160) = 0;
  v5[108] = 0;
  _dispatch_disk_handler(v5);
  result = *(unsigned int **)(a1 + 32);
  if (result[2] != 0x7FFFFFFF)
  {
    v8 = result + 2;
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (v9 <= 1)
    {
      if (v9 != 1)
        _os_object_allows_weak_reference_cold_1();
      return (unsigned int *)_os_object_dispose(result, v6);
    }
  }
  return result;
}

void _dispatch_disk_cleanup_operations(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    do
    {
      v5 = *(_QWORD *)(v3 + 240);
      if (!a2 || *(_QWORD *)(v3 + 136) == a2)
        _dispatch_disk_complete_operation(a1, v3);
      v3 = v5;
    }
    while (v5);
  }
}

void ___dispatch_fd_entry_init_async_block_invoke(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  _QWORD v11[6];
  _QWORD v12[5];
  int v13;
  _QWORD v14[5];
  _QWORD block[5];
  int v16;

  v2 = *(_DWORD *)(a1 + 40);
  v3 = (_QWORD *)((char *)&_dispatch_io_fds + 8 * (v2 & 0x3F));
  v4 = (_QWORD *)*v3;
  if (*v3)
  {
    while (*(_DWORD *)v4 != v2)
    {
      v4 = (_QWORD *)v4[14];
      if (!v4)
        goto LABEL_4;
    }
    dispatch_suspend((dispatch_object_t)v4[8]);
  }
  else
  {
LABEL_4:
    v5 = _dispatch_fd_entry_create(_dispatch_io_fds_lockq);
    v4 = v5;
    *(_DWORD *)v5 = v2;
    v6 = (_QWORD *)*v3;
    v5[14] = *v3;
    if (v6)
      v6[15] = v5 + 14;
    *v3 = v5;
    v5[15] = v3;
    v5[9] = dispatch_queue_create("com.apple.libdispatch-io.barrierq", 0);
    v4[10] = dispatch_group_create();
    v7 = v4[9];
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = ___dispatch_fd_entry_create_with_fd_block_invoke;
    block[3] = &__block_descriptor_tmp_72;
    v16 = v2;
    block[4] = v4;
    dispatch_channel_async(v7, block);
    v8 = v4[8];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 0x40000000;
    v14[2] = ___dispatch_fd_entry_create_with_fd_block_invoke_3;
    v14[3] = &__block_descriptor_tmp_74;
    v14[4] = v4;
    dispatch_channel_async(v8, v14);
    v9 = v4[8];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 0x40000000;
    v12[2] = ___dispatch_fd_entry_create_with_fd_block_invoke_5;
    v12[3] = &__block_descriptor_tmp_75;
    v12[4] = v4;
    v13 = v2;
    dispatch_channel_async(v9, v12);
  }
  v10 = v4[9];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 0x40000000;
  v11[2] = ___dispatch_fd_entry_init_async_block_invoke_2;
  v11[3] = &unk_59838;
  v11[4] = *(_QWORD *)(a1 + 32);
  v11[5] = v4;
  dispatch_channel_async(v10, v11);
}

void ___dispatch_fd_entry_init_async_block_invoke_2(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  dispatch_resume(*(dispatch_object_t *)(*(_QWORD *)(a1 + 40) + 64));
}

_QWORD *_dispatch_fd_entry_create(NSObject *a1)
{
  _QWORD *v2;
  NSObject *v3;

  v2 = _dispatch_calloc(1uLL, 0x80uLL);
  v3 = dispatch_queue_create_with_target_V2("com.apple.libdispatch-io.closeq", 0, a1);
  v2[8] = v3;
  dispatch_suspend(v3);
  return v2;
}

void ___dispatch_fd_entry_create_with_fd_block_invoke(uint64_t a1)
{
  unint64_t StatusReg;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  int v15;
  int st_dev_high;
  unint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD block[5];
  int v21;
  stat v22;

  memset(&v22.st_uid, 0, 128);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)&v22.st_dev = *(_OWORD *)&v22.st_blksize;
  while (fstat(*(_DWORD *)(a1 + 40), &v22) == -1)
  {
    v3 = **(_DWORD **)(StatusReg + 8);
    if (v3 != 4)
    {
      if (v3)
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 32) + 24) = v3;
        return;
      }
      break;
    }
  }
  v4 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v4 + 32) = v22.st_dev;
  *(_WORD *)(v4 + 36) = v22.st_mode;
  v5 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    v6 = fcntl_NOCANCEL(*(unsigned int *)(a1 + 40), 3);
    if (v6 != -1)
      break;
    v7 = **(_DWORD **)(v5 + 8);
    if (v7 != 4)
    {
      if (v7)
        _dispatch_bug(1471, v7);
      break;
    }
  }
  if ((v22.st_mode & 0xF000) == 0x1000)
  {
    v8 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      if (fcntl_NOCANCEL(*(unsigned int *)(a1 + 40), 74) != -1)
      {
        v11 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        do
        {
          v12 = fcntl_NOCANCEL(*(unsigned int *)(a1 + 40), 73);
          if (v12 != -1)
          {
            v13 = v12;
            goto LABEL_22;
          }
          v9 = **(_DWORD **)(v11 + 8);
        }
        while (v9 == 4);
        if (!v9)
          goto LABEL_21;
        v10 = 1484;
        goto LABEL_42;
      }
      v9 = **(_DWORD **)(v8 + 8);
    }
    while (v9 == 4);
    if (!v9)
      goto LABEL_21;
    v10 = 1477;
LABEL_42:
    _dispatch_bug(v10, v9);
  }
LABEL_21:
  v13 = -1;
LABEL_22:
  if ((v22.st_mode & 0xF000) == 0x8000)
  {
    if (v6 != -1)
    {
      v14 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (fcntl_NOCANCEL(*(unsigned int *)(a1 + 40), 4) == -1)
      {
        v15 = **(_DWORD **)(v14 + 8);
        if (v15 != 4)
        {
          if (v15)
          {
            _dispatch_bug(1496, v15);
            v6 = -1;
          }
          break;
        }
      }
    }
    st_dev_high = HIBYTE(v22.st_dev);
    dispatch_suspend(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 72));
    if (_dispatch_io_init_pred != -1)
      dispatch_once_f(&_dispatch_io_init_pred, 0, (dispatch_function_t)_dispatch_io_queues_init);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = ___dispatch_fd_entry_create_with_fd_block_invoke_2;
    block[3] = &__block_descriptor_tmp_71;
    block[4] = *(_QWORD *)(a1 + 32);
    v21 = st_dev_high;
    dispatch_channel_async((dispatch_queue_t)_dispatch_io_devs_lockq, block);
  }
  else
  {
    if (v6 != -1)
    {
      v17 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (fcntl_NOCANCEL(*(unsigned int *)(a1 + 40), 4) == -1)
      {
        v18 = **(_DWORD **)(v17 + 8);
        if (v18 != 4)
        {
          if (v18)
          {
            _dispatch_bug(1516, v18);
            v6 = -1;
          }
          break;
        }
      }
    }
    _dispatch_stream_init(*(_QWORD *)(a1 + 32));
  }
  v19 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v19 + 16) = v6;
  *(_DWORD *)(v19 + 20) = v13;
}

void ___dispatch_fd_entry_create_with_fd_block_invoke_2(uint64_t a1)
{
  _dispatch_disk_init(*(dispatch_queue_t *)(a1 + 32), *(_DWORD *)(a1 + 40));
  dispatch_resume(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 72));
}

dispatch_queue_t _dispatch_disk_init(dispatch_queue_t result, int a2)
{
  dispatch_queue_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  int v9;
  dispatch_queue_t v10;
  char __str[45];

  v3 = result;
  v4 = (uint64_t *)((char *)&_dispatch_io_devs + 8 * (a2 & 0x3F));
  v5 = *v4;
  if (*v4)
  {
    while (*(_DWORD *)(v5 + 104) != a2)
    {
      v5 = *(_QWORD *)(v5 + 112);
      if (!v5)
        goto LABEL_4;
    }
    if (*(_DWORD *)(v5 + 8) != 0x7FFFFFFF)
    {
      v8 = (unsigned int *)(v5 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      if (v9 <= 0)
        dispatch_set_target_queue_cold_2();
    }
  }
  else
  {
LABEL_4:
    v6 = qword_61188;
    v5 = _dispatch_object_alloc(OS_dispatch_disk, 8 * qword_61188 + 136);
    *(_QWORD *)(v5 + 16) = -1985229329;
    *(_DWORD *)(v5 + 12) = 0;
    *(_QWORD *)(v5 + 128) = v6;
    *(_QWORD *)(v5 + 24) = &off_65340;
    *(_DWORD *)(v5 + 104) = a2;
    *(_QWORD *)(v5 + 48) = 0;
    *(_QWORD *)(v5 + 56) = v5 + 48;
    *(_QWORD *)(v5 + 64) = 0;
    snprintf(__str, 0x2DuLL, "com.apple.libdispatch-io.deviceq.%d", a2);
    result = dispatch_queue_create(__str, 0);
    *(_QWORD *)(v5 + 72) = result;
    v7 = *v4;
    *(_QWORD *)(v5 + 112) = *v4;
    if (v7)
      *(_QWORD *)(v7 + 120) = v5 + 112;
    *v4 = v5;
    *(_QWORD *)(v5 + 120) = v4;
  }
  v3[12].isa = 0;
  v10 = v3 + 12;
  v10[-5].isa = (Class)v5;
  v10[1].isa = (Class)v10;
  return result;
}

void _dispatch_stream_init(uint64_t a1)
{
  uint64_t v2;
  char v3;
  char v4;
  _QWORD *v5;
  NSObject *v6;

  v2 = 0;
  v3 = 1;
  do
  {
    v4 = v3;
    v5 = _dispatch_calloc(1uLL, 0x40uLL);
    v6 = dispatch_queue_create_with_target_V2("com.apple.libdispatch-io.streamq", 0, (dispatch_queue_t)&off_65340);
    *v5 = v6;
    dispatch_set_context(v6, v5);
    v3 = 0;
    v5[6] = 0;
    v5[7] = v5 + 6;
    v5[4] = 0;
    v5[5] = v5 + 4;
    *(_QWORD *)(a1 + 8 * v2 + 40) = v5;
    v2 = 1;
  }
  while ((v4 & 1) != 0);
}

void ___dispatch_fd_entry_create_with_fd_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD block[5];

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56);
  if (v2)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = ___dispatch_fd_entry_create_with_fd_block_invoke_4;
    block[3] = &__block_descriptor_tmp_73;
    block[4] = v2;
    dispatch_channel_async((dispatch_queue_t)_dispatch_io_devs_lockq, block);
  }
  else
  {
    _dispatch_stream_dispose(*(_QWORD *)(a1 + 32), 0);
    _dispatch_stream_dispose(*(_QWORD *)(a1 + 32), 1u);
  }
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(v3 + 112);
  if (v4)
  {
    *(_QWORD *)(v4 + 120) = *(_QWORD *)(v3 + 120);
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(v3 + 112);
  }
  **(_QWORD **)(v3 + 120) = v4;
}

void _dispatch_stream_dispose(uint64_t a1, unsigned int a2)
{
  dispatch_object_t *v2;

  v2 = *(dispatch_object_t **)(a1 + 8 * a2 + 40);
  if (v2)
  {
    if (v2[1])
    {
      dispatch_suspend(*(dispatch_object_t *)(a1 + 64));
      dispatch_source_cancel(v2[1]);
      dispatch_resume(v2[1]);
      dispatch_release(v2[1]);
    }
    dispatch_set_context(*v2, 0);
    dispatch_release(*v2);
    free(v2);
  }
}

unsigned int *___dispatch_fd_entry_create_with_fd_block_invoke_4(uint64_t a1, const char *a2)
{
  unsigned int *result;
  unsigned int *v3;
  int v4;

  result = *(unsigned int **)(a1 + 32);
  if (result[2] != 0x7FFFFFFF)
  {
    v3 = result + 2;
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (v4 <= 1)
    {
      if (v4 != 1)
        _os_object_allows_weak_reference_cold_1();
      return (unsigned int *)_os_object_dispose(result, a2);
    }
  }
  return result;
}

void ___dispatch_fd_entry_create_with_fd_block_invoke_5(uint64_t a1)
{
  uint64_t v2;
  unint64_t StatusReg;
  unint64_t v4;
  uint64_t v5;

  dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 64));
  dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 72));
  dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 80));
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v2 + 16) != -1)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (fcntl_NOCANCEL(*(unsigned int *)(a1 + 40), 4) == -1 && **(_DWORD **)(StatusReg + 8) == 4)
      ;
    v2 = *(_QWORD *)(a1 + 32);
  }
  if (*(_DWORD *)(v2 + 20) != -1)
  {
    v4 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (fcntl_NOCANCEL(*(unsigned int *)(a1 + 40), 73) == -1 && **(_DWORD **)(v4 + 8) == 4)
      ;
    v2 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(v2 + 88);
  if (v5)
  {
    *(_QWORD *)(v5 + 112) = 0;
    dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 88));
    v2 = *(_QWORD *)(a1 + 32);
  }
  free((void *)v2);
}

uint64_t ___dispatch_fd_entry_create_with_path_block_invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;
  uint64_t v4;
  unsigned int *v5;

  v2 = *(unsigned int **)(a1 + 32);
  if (!*((_QWORD *)v2 + 7))
  {
    _dispatch_stream_dispose(*(_QWORD *)(a1 + 32), 0);
    _dispatch_stream_dispose(*(_QWORD *)(a1 + 32), 1u);
    v2 = *(unsigned int **)(a1 + 32);
  }
  result = *v2;
  if ((_DWORD)result != -1)
  {
    if (v2[7])
    {
      v5 = v2;
      result = guarded_close_np();
    }
    else
    {
      result = close_NOCANCEL();
    }
  }
  v4 = **(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  if (v4)
    *(_QWORD *)(v4 + 112) = 0;
  return result;
}

void ___dispatch_fd_entry_create_with_path_block_invoke_2(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 64));
  dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 72));
  dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 80));
  free(*(void **)(*(_QWORD *)(a1 + 32) + 8));
  free(*(void **)(a1 + 32));
}

void ___dispatch_operation_deliver_data_block_invoke(uint64_t a1)
{
  const char *v2;
  unsigned int *v3;
  unsigned int *v4;
  int v5;

  if ((*(_DWORD *)(a1 + 64) & 2) != 0
    && !*(_DWORD *)(a1 + 68)
    && *(_DWORD *)(a1 + 72)
    && dispatch_data_get_size(*(dispatch_data_t *)(a1 + 40)))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v3 = *(unsigned int **)(a1 + 48);
  if (v3[2] != 0x7FFFFFFF)
  {
    v4 = v3 + 2;
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (v5 <= 1)
    {
      if (v5 != 1)
        _os_object_allows_weak_reference_cold_1();
      _os_object_dispose(v3, v2);
    }
  }
  dispatch_resume(*(dispatch_object_t *)(*(_QWORD *)(a1 + 56) + 64));
  _dispatch_objc_release(*(id *)(a1 + 40));
}

uint64_t OUTLINED_FUNCTION_1_5(char *a1, uint64_t a2, const char *a3)
{
  size_t v3;

  return snprintf(a1, v3, a3);
}

const char *OUTLINED_FUNCTION_2_3(id a1)
{
  return object_getClassName(a1);
}

size_t OUTLINED_FUNCTION_3_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return _dispatch_object_debug_attr(v2, (char *)(v1 + v3), v0 - v3);
}

uint64_t OUTLINED_FUNCTION_5_1()
{
  uint64_t v0;

  return v0;
}

void _dispatch_data_init_with_bytes(_QWORD *a1, mach_vm_address_t a2, mach_vm_size_t a3, Block_layout *aBlock)
{
  mach_vm_size_t v4;
  mach_vm_address_t v5;
  Block_layout *v7;

  v4 = a3;
  v5 = a2;
  if (!a2 || !a3)
  {
    if (aBlock)
    {
      v7 = (Block_layout *)_dispatch_Block_copy(aBlock);
      _dispatch_data_destroy_buffer(v5, v4, 0, v7);
    }
    v5 = 0;
    v4 = 0;
    aBlock = &__block_literal_global_27;
  }
  a1[5] = aBlock;
  a1[6] = v4;
  a1[4] = v5;
}

void _dispatch_data_destroy_buffer(mach_vm_address_t address, mach_vm_size_t size, NSObject *a3, Block_layout *context)
{
  NSObject *v4;

  if (&__block_literal_global == context)
  {
    free((void *)address);
  }
  else if (&__block_literal_global_27 != context)
  {
    if (&__block_literal_global_30 == context)
    {
      mach_vm_deallocate(mach_task_self_, address, size);
    }
    else
    {
      if (a3)
        v4 = a3;
      else
        v4 = &off_65340;
      dispatch_channel_async_f(v4, context, (dispatch_function_t)_dispatch_call_block_and_release);
    }
  }
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  void *v7;
  NSObject *v8;
  objc_class *v9;
  Block_layout *v10;
  NSObject *v11;
  NSObject *v12;
  const dispatch_block_t *v13;
  size_t v14;
  unsigned int *v15;
  int v16;

  v7 = (void *)buffer;
  if (buffer && size)
  {
    if (destructor)
    {
      if (&__block_literal_global_33 != destructor)
      {
        v8 = _dispatch_object_alloc_bridged(OS_dispatch_data, 64);
        v8[7].isa = 0;
        v9 = (objc_class *)_dispatch_Block_copy(destructor);
        goto LABEL_16;
      }
      v14 = size + 64;
      if (size < 0xFFFFFFFFFFFFFFC0)
      {
        v8 = _dispatch_object_alloc_bridged(OS_dispatch_data, v14);
        v8[7].isa = 0;
      }
      else
      {
        v8 = 0;
      }
      v12 = v8 + 8;
      memcpy(&v8[8], v7, size);
      v13 = (const dispatch_block_t *)&_dispatch_data_destructor_none;
    }
    else
    {
      v11 = malloc_type_malloc(size, 0xF1E95671uLL);
      if (!v11)
        return 0;
      v12 = v11;
      memcpy(v11, v7, size);
      v8 = _dispatch_object_alloc_bridged(OS_dispatch_data, 64);
      v8[7].isa = 0;
      v13 = &_dispatch_data_destructor_free;
    }
    v9 = (objc_class *)*v13;
    v7 = v12;
LABEL_16:
    v8[5].isa = v9;
    v8[6].isa = (Class)size;
    v8[4].isa = (Class)v7;
    if (queue)
    {
      if (LODWORD(queue[1].isa) != 0x7FFFFFFF)
      {
        v15 = (unsigned int *)&queue[1];
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
        if (v16 <= 0)
          dispatch_set_target_queue_cold_2();
      }
      v8[1].isa = (Class)queue;
    }
    return v8;
  }
  if (destructor)
  {
    v10 = (Block_layout *)_dispatch_Block_copy(destructor);
    _dispatch_data_destroy_buffer((mach_vm_address_t)v7, size, queue, v10);
  }
  return (dispatch_data_t)&_dispatch_data_empty;
}

dispatch_data_t dispatch_data_create_f(const void *a1, size_t a2, NSObject *a3, Block_layout *a4)
{
  _QWORD v8[6];

  if (a4)
  {
    if (&__block_literal_global != a4
      && &__block_literal_global_27 != a4
      && &__block_literal_global_30 != a4
      && &__block_literal_global_33 != a4)
    {
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 0x40000000;
      v8[2] = __dispatch_data_create_f_block_invoke;
      v8[3] = &__block_descriptor_tmp_2;
      v8[4] = a4;
      v8[5] = a1;
      a4 = (Block_layout *)v8;
    }
  }
  return dispatch_data_create(a1, a2, a3, a4);
}

uint64_t __dispatch_data_create_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40));
}

__objc2_class **dispatch_data_create_alloc(unint64_t a1, __objc2_class ***a2)
{
  __objc2_class **result;
  __objc2_class **v5;

  if (!a1)
  {
    v5 = 0;
    result = &_dispatch_data_empty;
    if (!a2)
      return result;
    goto LABEL_6;
  }
  if (a1 < 0xFFFFFFFFFFFFFFC0)
  {
    result = (__objc2_class **)_dispatch_object_alloc_bridged(OS_dispatch_data, a1 + 64);
    result[7] = 0;
  }
  else
  {
    result = 0;
  }
  v5 = result + 8;
  result[5] = (__objc2_class *)&__block_literal_global_27;
  result[6] = (__objc2_class *)a1;
  result[4] = (__objc2_class *)(result + 8);
  if (a2)
LABEL_6:
    *a2 = v5;
  return result;
}

void _dispatch_data_dispose(uint64_t a1)
{
  unint64_t v2;
  void **v3;
  void *v4;
  unint64_t v5;

  if (*(_QWORD *)(a1 + 56))
  {
    v2 = 0;
    v3 = (void **)(a1 + 64);
    do
    {
      v4 = *v3;
      v3 += 3;
      _dispatch_objc_release(v4);
      ++v2;
      v5 = *(_QWORD *)(a1 + 56);
      if (v5 <= 1)
        v5 = 1;
    }
    while (v2 < v5);
    free(*(void **)(a1 + 32));
  }
  else
  {
    _dispatch_data_destroy_buffer(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(NSObject **)(a1 + 8), *(Block_layout **)(a1 + 40));
  }
}

unsigned int *_dispatch_data_set_target_queue(uint64_t a1, const char *a2)
{
  __objc2_class **v2;
  unsigned int *v3;
  int v4;
  unint64_t *v5;
  unsigned int *result;
  unsigned int *v7;
  int v8;

  v2 = &off_65340;
  if (a2)
    v2 = (__objc2_class **)a2;
  if (*((_DWORD *)v2 + 2) != 0x7FFFFFFF)
  {
    v3 = (unsigned int *)(v2 + 1);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
    if (v4 <= 0)
      dispatch_set_target_queue_cold_2();
  }
  v5 = (unint64_t *)(a1 + 24);
  do
    result = (unsigned int *)__ldxr(v5);
  while (__stlxr((unint64_t)v2, v5));
  if (result)
  {
    if (result[2] != 0x7FFFFFFF)
    {
      v7 = result + 2;
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (v8 <= 1)
      {
        if (v8 != 1)
          _os_object_allows_weak_reference_cold_1();
        return (unsigned int *)_os_object_dispose(result, a2);
      }
    }
  }
  return result;
}

size_t dispatch_data_get_size(dispatch_data_t data)
{
  return (size_t)data[6].isa;
}

dispatch_data_t dispatch_data_create_concat(dispatch_data_t data1, dispatch_data_t data2)
{
  dispatch_data_t v2;
  Class isa;
  Class v5;
  Class v6;
  Class v7;
  Class v8;
  NSObject *v9;
  unint64_t v10;
  Class v11;
  Class v12;
  unint64_t v13;
  Class v14;
  NSObject *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v2 = data2;
  isa = data1[6].isa;
  if (!isa)
    goto LABEL_15;
  v5 = data2[6].isa;
  if (!v5)
  {
    v2 = data1;
LABEL_15:
    _dispatch_objc_retain(v2);
    return v2;
  }
  v6 = data1[7].isa;
  if ((unint64_t)v6 <= 1)
    v7 = (Class)(&dword_0 + 1);
  else
    v7 = data1[7].isa;
  v8 = data2[7].isa;
  if ((unint64_t)v8 <= 1)
    v8 = (Class)(&dword_0 + 1);
  v9 = 0;
  v10 = (unint64_t)v8 + (_QWORD)v7;
  if (!__CFADD__(v7, v8))
  {
    if (is_mul_ok(v10, 0x18uLL) && 24 * v10 < 0xFFFFFFFFFFFFFFC0)
    {
      v9 = _dispatch_object_alloc_bridged(OS_dispatch_data, 24 * v10 + 64);
      v9[7].isa = (Class)v10;
      v5 = v2[6].isa;
      isa = data1[6].isa;
      v6 = data1[7].isa;
    }
    v9[6].isa = (Class)((char *)isa + (_QWORD)v5);
    if (v6)
    {
      memcpy(&v9[8], &data1[8], 24 * (_QWORD)v6);
    }
    else
    {
      v11 = data1[6].isa;
      v9[9].isa = 0;
      v9[10].isa = v11;
      v9[8].isa = (Class)data1;
    }
    v12 = v2[7].isa;
    v13 = (unint64_t)data1[7].isa;
    if (v13 <= 1)
      v13 = 1;
    if (v12)
    {
      memcpy(&v9[3 * v13 + 8], &v2[8], 24 * (_QWORD)v12);
    }
    else
    {
      v14 = v2[6].isa;
      v15 = &v9[3 * v13];
      v15[9].isa = 0;
      v15[10].isa = v14;
      v15[8].isa = (Class)v2;
    }
    v16 = 0;
    v17 = 8;
    do
    {
      _dispatch_objc_retain(v9[v17].isa);
      ++v16;
      v18 = (unint64_t)v9[7].isa;
      if (v18 <= 1)
        v18 = 1;
      v17 += 3;
    }
    while (v16 < v18);
  }
  return v9;
}

dispatch_data_t dispatch_data_create_subrange(dispatch_data_t data, size_t offset, size_t length)
{
  NSObject *v3;
  dispatch_data_t v5;
  Class isa;
  size_t v7;
  unint64_t v8;
  uint64_t v9;
  dispatch_data_t v10;
  size_t v11;
  size_t v12;
  objc_class *v13;
  uint64_t v14;
  uint64_t v15;
  Class v16;
  _QWORD *p_isa;
  unint64_t v18;
  objc_class *v19;
  uint64_t v20;

  v3 = &_dispatch_data_empty;
  if (!length)
    return v3;
  v5 = data;
  isa = data[6].isa;
  while (1)
  {
    if ((unint64_t)isa <= offset)
      return v3;
    v7 = (size_t)isa - offset;
    if ((unint64_t)isa - offset >= length)
    {
      v7 = length;
      if (isa == (Class)length)
      {
        v3 = v5;
        goto LABEL_18;
      }
    }
    v8 = (unint64_t)v5[7].isa;
    if (!v8)
    {
      v3 = _dispatch_object_alloc_bridged(OS_dispatch_data, 88);
      v3[6].isa = (Class)v7;
      v3[7].isa = (Class)(&dword_0 + 1);
      v3[9].isa = (Class)offset;
      v3[10].isa = (Class)v7;
      v3[8].isa = (Class)v5;
LABEL_18:
      _dispatch_objc_retain(v5);
      return v3;
    }
    v9 = 0;
    v10 = v5 + 16;
    v11 = offset;
    while (1)
    {
      v12 = (size_t)v10[-6].isa;
      if (v11 < v12)
        break;
      ++v9;
      v10 += 3;
      v11 -= v12;
      if (v8 == v9)
        dispatch_data_create_subrange_cold_1(v8);
    }
    v13 = (objc_class *)(v11 + v7 - v12);
    if (v11 + v7 > v12)
      break;
    if (!v7)
      return v3;
    v5 = (dispatch_data_t)v10[-8].isa;
    offset = (size_t)v10[-7].isa + v11;
    isa = v5[6].isa;
    length = v7;
  }
  v14 = v8 - v9;
  if ((Class)(v7 + offset) == isa)
  {
    v13 = 0;
    v15 = v8 - v9;
  }
  else if (v9 + 1 >= v8)
  {
    v15 = 1;
  }
  else
  {
    v16 = v10[-3].isa;
    v15 = 2;
    if (v13 > v16)
    {
      p_isa = &v10->isa;
      do
      {
        if (v14 == v15)
          dispatch_data_create_subrange_cold_1(v8);
        v13 = (objc_class *)((char *)v13 - (uint64_t)v16);
        ++v15;
        v18 = *p_isa;
        p_isa += 3;
        v16 = (Class)v18;
      }
      while ((unint64_t)v13 > v18);
    }
  }
  v3 = _dispatch_object_alloc_bridged(OS_dispatch_data, 24 * v15 + 64);
  v3[6].isa = (Class)v7;
  v3[7].isa = (Class)v15;
  memcpy(&v3[8], &v10[-8], 24 * v15);
  if (v11)
  {
    v19 = (Class)((char *)v3[10].isa - v11);
    v3[9].isa = (Class)((char *)v3[9].isa + v11);
    v3[10].isa = v19;
  }
  if ((Class)(v7 + offset) != isa)
    v3[3 * v15 + 7].isa = v13;
  if (v15)
  {
    v20 = 8;
    do
    {
      _dispatch_objc_retain(v3[v20].isa);
      v20 += 3;
      --v15;
    }
    while (v15);
  }
  return v3;
}

dispatch_data_t dispatch_data_create_map(dispatch_data_t data, const void **buffer_ptr, size_t *size_ptr)
{
  Class isa;
  NSObject *v6;
  Class v7;
  Class v8;
  _QWORD *p_isa;
  uint64_t v10;
  char *v11;
  char *v12;

  isa = data[6].isa;
  if (!isa)
  {
    v11 = 0;
    v6 = &_dispatch_data_empty;
    if (buffer_ptr)
      goto LABEL_14;
    goto LABEL_15;
  }
  v6 = data;
  v7 = data[7].isa;
  if (v7 == (Class)((char *)&dword_0 + 1))
  {
    p_isa = data[8].isa;
    v8 = data[9].isa;
    if (!p_isa[7])
      goto LABEL_4;
  }
  else
  {
    v8 = 0;
    p_isa = &data->isa;
    if (!v7)
    {
LABEL_4:
      v10 = p_isa[4];
      goto LABEL_5;
    }
  }
  v10 = p_isa[4];
  if (v10)
  {
LABEL_5:
    v11 = (char *)v8 + v10;
    if ((Class)((char *)v8 + v10))
    {
      _dispatch_objc_retain(data);
      if (!buffer_ptr)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  v12 = (char *)_dispatch_data_flatten(data);
  v11 = v12;
  if (v12)
  {
    v6 = dispatch_data_create(v12, (size_t)isa, 0, &__block_literal_global);
    if (!buffer_ptr)
      goto LABEL_15;
    goto LABEL_14;
  }
  isa = 0;
  v6 = 0;
  if (buffer_ptr)
LABEL_14:
    *buffer_ptr = v11;
LABEL_15:
  if (size_ptr)
    *size_ptr = (size_t)isa;
  return v6;
}

void *_dispatch_data_flatten(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD v6[5];

  v2 = malloc_type_malloc(a1[6], 0x4CB264A7uLL);
  v3 = v2;
  if (v2)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 0x40000000;
    v6[2] = ___dispatch_data_flatten_block_invoke;
    v6[3] = &__block_descriptor_tmp_12_0;
    v6[4] = v2;
    v4 = a1[6];
    if (v4)
      _dispatch_data_apply(a1, 0, 0, v4, (uint64_t)v6, (uint64_t)___dispatch_data_flatten_block_invoke);
  }
  return v3;
}

char *dispatch_data_get_flattened_bytes_4libxpc(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  char v8;
  _QWORD *v10;

  v1 = a1[6];
  if (!v1)
    return (char *)v1;
  v2 = a1[7];
  if (v2 == 1)
  {
    v10 = a1 + 8;
    a1 = (_QWORD *)a1[8];
    v3 = v10[1];
    v2 = a1[7];
  }
  else
  {
    v3 = 0;
  }
  v4 = a1 + 4;
  if (!v2)
  {
    v5 = *v4;
    goto LABEL_6;
  }
  v5 = *v4;
  if (*v4)
  {
LABEL_6:
    v1 = v5 + v3;
    if (v1)
      return (char *)v1;
  }
  v6 = (char *)_dispatch_data_flatten(a1);
  if (!v6)
    return 0;
  while (1)
  {
    v7 = __ldxr(v4);
    if (v7)
      break;
    if (!__stlxr((unint64_t)v6, v4))
    {
      v8 = 1;
      goto LABEL_12;
    }
  }
  v8 = 0;
  __clrex();
LABEL_12:
  if ((v8 & 1) == 0)
  {
    free(v6);
    v6 = (char *)v7;
  }
  return &v6[v3];
}

uint64_t dispatch_data_apply_f(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a1[6];
  if (v3)
    return _dispatch_data_apply(a1, 0, 0, v3, a2, a3);
  else
    return 1;
}

uint64_t _dispatch_data_apply(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v8 = a2;
  v10 = a1[7];
  if (v10 == 1)
  {
    v12 = (_QWORD *)a1[8];
    v11 = a1[9];
    if (!v12[7])
      goto LABEL_3;
LABEL_7:
    v13 = v12[4];
    if (!v13)
      goto LABEL_8;
    goto LABEL_4;
  }
  v11 = 0;
  v12 = a1;
  if (v10)
    goto LABEL_7;
LABEL_3:
  v13 = v12[4];
LABEL_4:
  v14 = v13 + v11;
  if (v14)
    return _dispatch_data_apply_client_callout(a5, a1, a2, v14 + a3, a4, a6);
LABEL_8:
  v16 = a1 + 10;
  v17 = 1;
  do
  {
    result = _dispatch_data_apply(*(v16 - 2), v8, *(v16 - 1), *v16, a5, a6);
    v18 = a1[7];
    if (v18 <= 1)
      v18 = 1;
    if (v17 >= v18)
      break;
    v19 = *v16;
    v16 += 3;
    v8 += v19;
    ++v17;
  }
  while ((result & 1) != 0);
  return result;
}

BOOL dispatch_data_apply(dispatch_data_t data, dispatch_data_applier_t applier)
{
  Class isa;

  isa = data[6].isa;
  if (isa)
    return _dispatch_data_apply(data, 0, 0, (uint64_t)isa, (uint64_t)applier, *((_QWORD *)applier + 2));
  else
    return 1;
}

dispatch_data_t dispatch_data_copy_region(dispatch_data_t data, size_t location, size_t *offset_ptr)
{
  Class isa;
  dispatch_data_t v4;
  size_t v5;
  objc_class *v6;
  objc_class *v7;
  NSObject *v8;
  unint64_t v9;
  Class v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *i;
  Class v14;
  size_t v15;
  dispatch_data_t v16;

  isa = data[6].isa;
  if ((unint64_t)isa <= location)
  {
    *offset_ptr = (size_t)isa;
    return (dispatch_data_t)&_dispatch_data_empty;
  }
  v4 = data;
  v5 = 0;
  v6 = 0;
  *offset_ptr = 0;
  v7 = v4[6].isa;
LABEL_4:
  if (v4[6].isa == v7)
    v8 = v4;
  else
    v8 = 0;
LABEL_7:
  v9 = (unint64_t)v4[7].isa;
  if (v9 == 1)
  {
    v16 = v4 + 8;
    v4 = (dispatch_data_t)v4[8].isa;
    v6 = (objc_class *)((char *)v6 + (unint64_t)v16[1].isa);
    v9 = (unint64_t)v4[7].isa;
    if (!v9)
      goto LABEL_9;
LABEL_24:
    v10 = v4[4].isa;
    if (!v10)
      goto LABEL_11;
    goto LABEL_10;
  }
  if (v9)
    goto LABEL_24;
LABEL_9:
  v10 = v4[4].isa;
LABEL_10:
  if (!(objc_class *)((char *)v6 + (_QWORD)v10))
  {
LABEL_11:
    v11 = 0;
    if (v9 <= 1)
      v12 = 1;
    else
      v12 = v9;
    for (i = v4 + 10; ; i += 3)
    {
      v14 = i->isa;
      if (v6 >= i->isa)
      {
        v6 = (objc_class *)((char *)v6 - (unint64_t)i->isa);
      }
      else
      {
        v7 = (objc_class *)(v14 - v6);
        v15 = v14 - v6 + v11;
        if (v15 > location)
        {
          v4 = (dispatch_data_t)i[-2].isa;
          v6 = (objc_class *)((char *)v6 + (unint64_t)i[-1].isa);
          v5 += v11;
          *offset_ptr = v5;
          location -= v11;
          if (!v6)
            goto LABEL_4;
          v8 = 0;
          goto LABEL_7;
        }
        v6 = 0;
        v11 = v15;
      }
      if (!--v12)
        dispatch_data_copy_region_cold_1(v5, v11);
    }
  }
  if (v8)
  {
    _dispatch_objc_retain(v8);
  }
  else
  {
    _dispatch_objc_retain(v4);
    if (v6 || v4[6].isa != v7)
    {
      v8 = _dispatch_object_alloc_bridged(OS_dispatch_data, 88);
      v8[6].isa = v7;
      v8[7].isa = (Class)(&dword_0 + 1);
      v8[9].isa = v6;
      v8[10].isa = v7;
      v8[8].isa = (Class)v4;
    }
    else
    {
      return v4;
    }
  }
  return v8;
}

uint64_t dispatch_data_make_memory_entry(_QWORD *a1)
{
  memory_object_size_t v2;
  BOOL v3;
  BOOL v4;
  kern_return_t v5;
  mach_vm_address_t v6;
  uint64_t v7;
  kern_return_t memory_entry_64;
  kern_return_t v9;
  uint64_t v10;
  _QWORD v12[5];
  mach_vm_address_t address;
  memory_object_size_t size;
  mach_port_t object_handle;

  object_handle = 0;
  size = 0;
  v2 = a1[6];
  v3 = a1[5] != (_QWORD)&__block_literal_global_30;
  while (1)
  {
    v4 = v3;
    if (v3)
    {
      address = vm_page_size;
      v5 = mach_vm_allocate(mach_task_self_, &address, v2, 1);
      if (v5)
      {
        if (v5 == 3)
          return object_handle;
        v10 = 704;
        goto LABEL_17;
      }
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 0x40000000;
      v12[2] = __dispatch_data_make_memory_entry_block_invoke;
      v12[3] = &__block_descriptor_tmp_9_0;
      v6 = address;
      v12[4] = address;
      v7 = a1[6];
      if (v7)
      {
        _dispatch_data_apply(a1, 0, 0, v7, (uint64_t)v12, (uint64_t)__dispatch_data_make_memory_entry_block_invoke);
        v6 = address;
      }
    }
    else
    {
      v6 = a1[4];
      address = v6;
    }
    size = v2;
    memory_entry_64 = mach_make_memory_entry_64(mach_task_self_, &size, v6, 2097219, &object_handle, 0);
    if (memory_entry_64 == 18)
      memory_entry_64 = mach_make_memory_entry_64(mach_task_self_, &size, address, 67, &object_handle, 0);
    if (memory_entry_64)
      break;
    if (size >= v2)
      goto LABEL_19;
    v9 = mach_port_deallocate(mach_task_self_, object_handle);
    if (v9)
      _dispatch_bug(731, v9);
    v3 = 1;
    if (v4)
    {
      object_handle = 0;
      goto LABEL_20;
    }
  }
  _dispatch_bug(726, memory_entry_64);
  object_handle = 0;
LABEL_19:
  if (v4)
  {
LABEL_20:
    v5 = mach_vm_deallocate(mach_task_self_, address, v2);
    if (!v5)
      return object_handle;
    v10 = 740;
LABEL_17:
    _dispatch_bug(v10, v5);
  }
  return object_handle;
}

uint64_t __dispatch_data_make_memory_entry_block_invoke(uint64_t a1, int a2, uint64_t a3, void *__src, size_t __n)
{
  memcpy((void *)(*(_QWORD *)(a1 + 32) + a3), __src, __n);
  return 1;
}

uint64_t ___dispatch_data_flatten_block_invoke(uint64_t a1, int a2, uint64_t a3, void *__src, size_t __n)
{
  memcpy((void *)(*(_QWORD *)(a1 + 32) + a3), __src, __n);
  return 1;
}

NSObject *dispatch_data_create_with_transform(NSObject *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  uint64_t *v9;
  uint64_t (*v11);
  uint64_t (*v12);
  uint64_t v13;
  unsigned __int16 *v14;

  v4 = a2;
  v5 = a1;
  v6 = *a2;
  if (*a2 == 16)
  {
    v14 = 0;
    v7 = _dispatch_data_subrange_map(a1, (const void **)&v14, 0, 2uLL);
    if (!v7)
      return 0;
    v8 = *v14;
    if (v8 == 65534)
      v9 = (uint64_t *)&_dispatch_data_format_type_utf16be;
    else
      v9 = (uint64_t *)&_dispatch_data_format_type_utf8;
    dispatch_release(v7);
    if (v8 == 65279)
      v4 = (uint64_t *)&_dispatch_data_format_type_utf16le;
    else
      v4 = v9;
    v6 = *v4;
  }
  if ((v6 & ~a3[1]) != 0 || (*a3 & ~v4[2]) != 0)
    return 0;
  if (dispatch_data_get_size(v5))
  {
    v11 = (uint64_t (*))v4[3];
    if (v11)
    {
      v5 = v11(v5);
      if (!v5)
        return v5;
    }
    else
    {
      dispatch_retain(v5);
    }
    v12 = (uint64_t (*))a3[4];
    if (v12)
    {
      v13 = v12(v5);
    }
    else
    {
      dispatch_retain(v5);
      v13 = (uint64_t)v5;
    }
    dispatch_release(v5);
    return v13;
  }
  return v5;
}

uint64_t _dispatch_transform_from_base32(NSObject *a1)
{
  return _dispatch_transform_from_base32_with_table(a1, (uint64_t)&base32_decode_table, 91);
}

dispatch_data_t _dispatch_transform_to_base32(NSObject *a1)
{
  return _dispatch_transform_to_base32_with_table(a1, (uint64_t)"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567");
}

uint64_t _dispatch_transform_from_base32hex(NSObject *a1)
{
  return _dispatch_transform_from_base32_with_table(a1, (uint64_t)&base32hex_decode_table, 33);
}

dispatch_data_t _dispatch_transform_to_base32hex(NSObject *a1)
{
  return _dispatch_transform_to_base32_with_table(a1, (uint64_t)"0123456789ABCDEFGHIJKLMNOPQRSTUV");
}

uint64_t _dispatch_transform_from_base64(NSObject *a1)
{
  BOOL v1;
  uint64_t v2;
  _QWORD v4[8];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  __objc2_class **v8;
  _QWORD v9[4];
  _QWORD v10[4];
  _QWORD v11[4];

  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x2000000000;
  v11[3] = 0;
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2000000000;
  v10[3] = 0;
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2000000000;
  v9[3] = 0;
  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = &_dispatch_data_empty;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  v4[2] = ___dispatch_transform_from_base64_block_invoke;
  v4[3] = &unk_59B30;
  v4[4] = v10;
  v4[5] = v9;
  v4[6] = v11;
  v4[7] = &v5;
  v1 = dispatch_data_apply(a1, v4);
  v2 = v6[3];
  if (!v1)
  {
    dispatch_release((dispatch_object_t)v6[3]);
    v2 = 0;
  }
  _Block_object_dispose(&v5, 8);
  _Block_object_dispose(v9, 8);
  _Block_object_dispose(v10, 8);
  _Block_object_dispose(v11, 8);
  return v2;
}

dispatch_data_t _dispatch_transform_to_base64(NSObject *a1)
{
  size_t size;
  dispatch_data_t v3;
  unint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  void *v8;
  _QWORD v10[8];
  _QWORD v11[4];
  _QWORD v12[4];

  size = dispatch_data_get_size(a1);
  v3 = 0;
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x2000000000;
  v12[3] = 0;
  if (size == 3 * (size / 3))
    v4 = size / 3;
  else
    v4 = size / 3 + 1;
  if (!(v4 >> 62))
  {
    v5 = size;
    v6 = 4 * v4;
    v7 = malloc_type_malloc(4 * v4, 0x36FC11AuLL);
    if (v7)
    {
      v8 = v7;
      v11[0] = 0;
      v11[1] = v11;
      v11[2] = 0x2000000000;
      v11[3] = v7;
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 0x40000000;
      v10[2] = ___dispatch_transform_to_base64_block_invoke;
      v10[3] = &unk_59B58;
      v10[4] = v12;
      v10[5] = v11;
      v10[6] = a1;
      v10[7] = v5;
      if (dispatch_data_apply(a1, v10))
      {
        v3 = dispatch_data_create(v8, v6, 0, &__block_literal_global);
      }
      else
      {
        free(v8);
        v3 = 0;
      }
      _Block_object_dispose(v11, 8);
    }
    else
    {
      v3 = 0;
    }
  }
  _Block_object_dispose(v12, 8);
  return v3;
}

uint64_t _dispatch_transform_from_utf16le(NSObject *a1)
{
  return _dispatch_transform_from_utf16(a1, 1);
}

uint64_t _dispatch_transform_to_utf16le(NSObject *a1)
{
  return _dispatch_transform_to_utf16(a1, 1);
}

uint64_t _dispatch_transform_from_utf16be(NSObject *a1)
{
  return _dispatch_transform_from_utf16(a1, 2);
}

uint64_t _dispatch_transform_to_utf16be(NSObject *a1)
{
  return _dispatch_transform_to_utf16(a1, 2);
}

dispatch_data_t _dispatch_transform_to_utf8_without_bom(NSObject *a1)
{
  NSObject *v1;
  NSObject *v2;
  BOOL v3;
  int v4;
  size_t size;
  unsigned __int8 *v7;

  v1 = a1;
  v7 = 0;
  v2 = _dispatch_data_subrange_map(a1, (const void **)&v7, 0, 3uLL);
  if (v2
    && (*(unsigned __int16 *)v7 == 48111 ? (v3 = v7[2] == 191) : (v3 = 0),
        v3 ? (v4 = 0) : (v4 = 1),
        dispatch_release(v2),
        !v4))
  {
    size = dispatch_data_get_size(v1);
    return dispatch_data_create_subrange(v1, 3uLL, size - 3);
  }
  else
  {
    dispatch_retain(v1);
  }
  return v1;
}

dispatch_data_t _dispatch_data_subrange_map(NSObject *a1, const void **a2, size_t offset, size_t length)
{
  NSObject *subrange;
  dispatch_data_t map;

  subrange = dispatch_data_create_subrange(a1, offset, length);
  if (dispatch_data_get_size(subrange) == length)
    map = dispatch_data_create_map(subrange, a2, 0);
  else
    map = 0;
  dispatch_release(subrange);
  return map;
}

uint64_t _dispatch_transform_from_base32_with_table(NSObject *a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  uint64_t v4;
  _QWORD v6[10];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  __objc2_class **v10;
  _QWORD v11[4];
  _QWORD v12[4];
  _QWORD v13[4];

  v13[0] = 0;
  v13[1] = v13;
  v13[2] = 0x2000000000;
  v13[3] = 0;
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x2000000000;
  v12[3] = 0;
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x2000000000;
  v11[3] = 0;
  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = &_dispatch_data_empty;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  v6[2] = ___dispatch_transform_from_base32_with_table_block_invoke;
  v6[3] = &unk_59AE0;
  v6[8] = a3;
  v6[9] = a2;
  v6[4] = v12;
  v6[5] = v11;
  v6[6] = v13;
  v6[7] = &v7;
  v3 = dispatch_data_apply(a1, v6);
  v4 = v8[3];
  if (!v3)
  {
    dispatch_release((dispatch_object_t)v8[3]);
    v4 = 0;
  }
  _Block_object_dispose(&v7, 8);
  _Block_object_dispose(v11, 8);
  _Block_object_dispose(v12, 8);
  _Block_object_dispose(v13, 8);
  return v4;
}

_BYTE *___dispatch_transform_from_base32_with_table_block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t v8;
  _BYTE *result;
  _BYTE *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  size_t v17;
  NSObject *v18;
  dispatch_data_t concat;

  v5 = a5;
  v8 = a5 >> 3;
  if ((a5 & 7) != 0)
    ++v8;
  result = malloc_type_malloc(5 * v8, 0x100004077774924uLL);
  if (result)
  {
    v10 = result;
    if (v5)
    {
      v10 = result;
      do
      {
        v12 = *a4++;
        v11 = v12;
        v13 = (1 << v12) & 0x100000600;
        if (v12 > 0x20 || v13 == 0)
        {
          if (a1[8] <= v11 || (v15 = a1[9], *(unsigned __int8 *)(v15 + v11) == 255))
          {
            free(result);
            return 0;
          }
          ++*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
          v16 = *(unsigned __int8 *)(v15 + v11);
          if (v16 == 254)
          {
            LOBYTE(v16) = 0;
            ++*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
          }
          *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) *= 32;
          *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) += (char)v16;
          if ((*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) & 7) == 0)
          {
            *v10 = *(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 28);
            v10[1] = BYTE3(*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24));
            v10[2] = BYTE2(*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24));
            v10[3] = BYTE1(*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24));
            v10[4] = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
            v10 += 5;
          }
        }
        --v5;
      }
      while (v5);
    }
    v17 = v10 - result;
    switch(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24))
    {
      case 1:
        --v17;
        break;
      case 3:
        v17 -= 2;
        break;
      case 4:
        v17 -= 3;
        break;
      case 6:
        v17 -= 4;
        break;
      default:
        break;
    }
    v18 = dispatch_data_create(result, v17, 0, &__block_literal_global);
    concat = dispatch_data_create_concat(*(dispatch_data_t *)(*(_QWORD *)(a1[7] + 8) + 24), v18);
    dispatch_release(v18);
    dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(a1[7] + 8) + 24));
    *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = concat;
    return (_BYTE *)(&dword_0 + 1);
  }
  return result;
}

dispatch_data_t _dispatch_transform_to_base32_with_table(NSObject *a1, uint64_t a2)
{
  size_t size;
  dispatch_data_t v5;
  unint64_t v6;
  size_t v7;
  size_t v8;
  void *v9;
  void *v10;
  _QWORD applier[9];
  _QWORD v13[4];
  _QWORD v14[4];

  size = dispatch_data_get_size(a1);
  v5 = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2000000000;
  v14[3] = 0;
  if (size == 5 * (size / 5))
    v6 = size / 5;
  else
    v6 = size / 5 + 1;
  if (!(v6 >> 61))
  {
    v7 = size;
    v8 = 8 * v6;
    v9 = malloc_type_malloc(8 * v6, 0x29176DCDuLL);
    if (v9)
    {
      v10 = v9;
      v13[0] = 0;
      v13[1] = v13;
      v13[2] = 0x2000000000;
      v13[3] = v9;
      applier[0] = _NSConcreteStackBlock;
      applier[1] = 0x40000000;
      applier[2] = ___dispatch_transform_to_base32_with_table_block_invoke;
      applier[3] = &unk_59B08;
      applier[4] = v14;
      applier[5] = v13;
      applier[6] = a1;
      applier[7] = a2;
      applier[8] = v7;
      if (dispatch_data_apply(a1, applier))
      {
        v5 = dispatch_data_create(v10, v8, 0, &__block_literal_global);
      }
      else
      {
        free(v10);
        v5 = 0;
      }
      _Block_object_dispose(v13, 8);
    }
    else
    {
      v5 = 0;
    }
  }
  _Block_object_dispose(v14, 8);
  return v5;
}

BOOL ___dispatch_transform_to_base32_with_table_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  BOOL v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  NSObject *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  _BYTE *v19;
  char v20;
  uint64_t v21;
  _BYTE *v22;
  char v23;
  uint64_t v24;
  _BYTE *v25;
  char v26;
  uint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  _BYTE *v46;
  char *v49;

  if (a5)
  {
    v8 = 0;
    v9 = 0;
    v10 = a3 - 1;
    do
    {
      v11 = *(unsigned __int8 *)(a4 + v9);
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      if (0xCCCCCCCCCCCCCCCDLL * v12 < 0x3333333333333334)
      {
        v13 = 0;
      }
      else if (v9)
      {
        v13 = *(_BYTE *)(a4 + v9 - 1);
      }
      else
      {
        v49 = 0;
        v14 = _dispatch_data_subrange_map(*(NSObject **)(a1 + 48), (const void **)&v49, v10, 1uLL);
        if (!v14)
          return v8;
        v13 = *v49;
        dispatch_release(v14);
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      }
      switch(v12 % 5)
      {
        case 0uLL:
          v15 = *(_QWORD *)(a1 + 56);
          v16 = v11 >> 3;
          goto LABEL_15;
        case 1uLL:
          v17 = *(_BYTE *)(*(_QWORD *)(a1 + 56) + ((4 * (v13 & 7u)) | (v11 >> 6)));
          v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          v19 = *(_BYTE **)(v18 + 24);
          *(_QWORD *)(v18 + 24) = v19 + 1;
          *v19 = v17;
          v15 = *(_QWORD *)(a1 + 56);
          v16 = (v11 >> 1) & 0x1F;
          goto LABEL_15;
        case 2uLL:
          v15 = *(_QWORD *)(a1 + 56);
          v16 = (v11 >> 4) & 0xFFFFFFEF | (16 * (v13 & 1));
          goto LABEL_15;
        case 3uLL:
          v20 = *(_BYTE *)(*(_QWORD *)(a1 + 56) + ((v11 >> 7) & 0xFFFFFFE1 | (2 * (v13 & 0xF))));
          v21 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          v22 = *(_BYTE **)(v21 + 24);
          *(_QWORD *)(v21 + 24) = v22 + 1;
          *v22 = v20;
          v15 = *(_QWORD *)(a1 + 56);
          v16 = (v11 >> 2) & 0x1F;
          goto LABEL_15;
        case 4uLL:
          v23 = *(_BYTE *)(*(_QWORD *)(a1 + 56) + ((v11 >> 5) & 0xFFFFFFE7 | (8 * (v13 & 3))));
          v24 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          v25 = *(_BYTE **)(v24 + 24);
          *(_QWORD *)(v24 + 24) = v25 + 1;
          *v25 = v23;
          v15 = *(_QWORD *)(a1 + 56);
          v16 = v11 & 0x1F;
LABEL_15:
          v26 = *(_BYTE *)(v15 + v16);
          v27 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          v28 = *(_BYTE **)(v27 + 24);
          *(_QWORD *)(v27 + 24) = v28 + 1;
          *v28 = v26;
          break;
        default:
          break;
      }
      ++v9;
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v8 = v9 >= a5;
    }
    while (a5 != v9);
  }
  if (a5 + a3 == *(_QWORD *)(a1 + 64))
  {
    v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    switch(~(5 * (v29 / 5)) + v29)
    {
      case 0uLL:
        v30 = *(_QWORD *)(a1 + 56);
        v31 = 4 * (*(_BYTE *)(a5 + a4 - 1) & 7);
        goto LABEL_23;
      case 1uLL:
        v30 = *(_QWORD *)(a1 + 56);
        v31 = 16 * (*(_BYTE *)(a5 + a4 - 1) & 1);
        goto LABEL_23;
      case 2uLL:
        v30 = *(_QWORD *)(a1 + 56);
        v31 = 2 * (*(_BYTE *)(a5 + a4 - 1) & 0xF);
        goto LABEL_23;
      case 3uLL:
        v30 = *(_QWORD *)(a1 + 56);
        v31 = 8 * (*(_BYTE *)(a5 + a4 - 1) & 3);
LABEL_23:
        v32 = *(_BYTE *)(v30 + v31);
        v33 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v34 = *(_BYTE **)(v33 + 24);
        *(_QWORD *)(v33 + 24) = v34 + 1;
        *v34 = v32;
        break;
      default:
        break;
    }
    switch(~(5 * (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) / 5uLL))
           + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    {
      case 0uLL:
        v35 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v36 = *(_BYTE **)(v35 + 24);
        *(_QWORD *)(v35 + 24) = v36 + 1;
        *v36 = 61;
        v37 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v38 = *(_BYTE **)(v37 + 24);
        *(_QWORD *)(v37 + 24) = v38 + 1;
        *v38 = 61;
        goto LABEL_26;
      case 1uLL:
LABEL_26:
        v39 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v40 = *(_BYTE **)(v39 + 24);
        *(_QWORD *)(v39 + 24) = v40 + 1;
        *v40 = 61;
        goto LABEL_27;
      case 2uLL:
LABEL_27:
        v41 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v42 = *(_BYTE **)(v41 + 24);
        *(_QWORD *)(v41 + 24) = v42 + 1;
        *v42 = 61;
        v43 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v44 = *(_BYTE **)(v43 + 24);
        *(_QWORD *)(v43 + 24) = v44 + 1;
        *v44 = 61;
        goto LABEL_28;
      case 3uLL:
LABEL_28:
        v45 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v46 = *(_BYTE **)(v45 + 24);
        *(_QWORD *)(v45 + 24) = v46 + 1;
        *v46 = 61;
        break;
      default:
        break;
    }
  }
  return 1;
}

_BYTE *___dispatch_transform_from_base64_block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t v8;
  _BYTE *result;
  _BYTE *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v15;
  NSObject *v16;
  dispatch_data_t concat;

  v5 = a5;
  v8 = a5 >> 2;
  if ((a5 & 3) != 0)
    ++v8;
  result = malloc_type_malloc(3 * v8, 0x100004077774924uLL);
  if (result)
  {
    v10 = result;
    if (!v5)
    {
LABEL_18:
      v16 = dispatch_data_create(result, v10 - result - *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24), 0, &__block_literal_global);
      concat = dispatch_data_create_concat(*(dispatch_data_t *)(*(_QWORD *)(a1[7] + 8) + 24), v16);
      dispatch_release(v16);
      dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(a1[7] + 8) + 24));
      *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = concat;
      return (_BYTE *)(&dword_0 + 1);
    }
    v10 = result;
    while (1)
    {
      v12 = *a4++;
      v11 = v12;
      v13 = (1 << v12) & 0x100000600;
      if (v12 > 0x20 || v13 == 0)
      {
        if (v11 > 0x7A || (v15 = base64_decode_table[v11], v15 == 255))
        {
          free(result);
          return 0;
        }
        ++*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
        if ((_DWORD)v11 == 61)
        {
          LOBYTE(v15) = 0;
          ++*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
        }
        *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) <<= 6;
        *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) += (char)v15;
        if ((*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) & 3) == 0)
        {
          *v10 = BYTE2(*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24));
          v10[1] = BYTE1(*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24));
          v10[2] = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
          v10 += 3;
        }
      }
      if (!--v5)
        goto LABEL_18;
    }
  }
  return result;
}

BOOL ___dispatch_transform_to_base64_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  BOOL v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  NSObject *v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  char v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _BYTE *v35;
  char *v38;

  if (a5)
  {
    v8 = 0;
    v9 = 0;
    v10 = a3 - 1;
    while (1)
    {
      v11 = *(unsigned __int8 *)(a4 + v9);
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      if (0xAAAAAAAAAAAAAAABLL * v12 < 0x5555555555555556)
      {
        v13 = 0;
      }
      else if (v9)
      {
        v13 = *(_BYTE *)(a4 + v9 - 1);
      }
      else
      {
        v38 = 0;
        v14 = _dispatch_data_subrange_map(*(NSObject **)(a1 + 48), (const void **)&v38, v10, 1uLL);
        if (!v14)
          return v8;
        v13 = *v38;
        dispatch_release(v14);
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      }
      v15 = v12 % 3;
      if (v15 == 2)
        break;
      if (v15 == 1)
      {
        v16 = (v11 >> 4) & 0xFFFFFFCF | (16 * (v13 & 3));
        goto LABEL_15;
      }
      if (!v15)
      {
        v16 = v11 >> 2;
LABEL_15:
        v20 = base64_encode_table[v16];
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v22 = *(char **)(v21 + 24);
        *(_QWORD *)(v21 + 24) = v22 + 1;
        *v22 = v20;
      }
      ++v9;
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v8 = v9 >= a5;
      if (a5 == v9)
        goto LABEL_17;
    }
    v17 = base64_encode_table[(4 * (v13 & 0xFu)) | (v11 >> 6)];
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v19 = *(char **)(v18 + 24);
    *(_QWORD *)(v18 + 24) = v19 + 1;
    *v19 = v17;
    v16 = v11 & 0x3F;
    goto LABEL_15;
  }
LABEL_17:
  if (a5 + a3 == *(_QWORD *)(a1 + 56))
  {
    v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) % 3uLL;
    if (v23 == 2)
    {
      v31 = base64_encode_table[4 * (*(_BYTE *)(a5 + a4 - 1) & 0xF)];
      v32 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v33 = *(char **)(v32 + 24);
      *(_QWORD *)(v32 + 24) = v33 + 1;
      *v33 = v31;
      v34 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v35 = *(_BYTE **)(v34 + 24);
      *(_QWORD *)(v34 + 24) = v35 + 1;
      *v35 = 61;
    }
    else if (v23 == 1)
    {
      v24 = base64_encode_table[16 * (*(_BYTE *)(a5 + a4 - 1) & 3)];
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v26 = *(char **)(v25 + 24);
      *(_QWORD *)(v25 + 24) = v26 + 1;
      *v26 = v24;
      v27 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v28 = *(_BYTE **)(v27 + 24);
      *(_QWORD *)(v27 + 24) = v28 + 1;
      *v28 = 61;
      v29 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v30 = *(_BYTE **)(v29 + 24);
      *(_QWORD *)(v29 + 24) = v30 + 1;
      *v30 = 61;
    }
  }
  return 1;
}

uint64_t _dispatch_transform_from_utf16(NSObject *a1, int a2)
{
  BOOL v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD applier[7];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _QWORD v13[4];

  v13[2] = 0x2000000000;
  v10 = 0x3800000000;
  v11 = off_59BA0;
  v12 = *(_OWORD *)algn_59BB0;
  v13[0] = 0;
  v13[1] = v13;
  v13[3] = 0;
  v8 = 0;
  v9 = &v8;
  applier[0] = _NSConcreteStackBlock;
  applier[1] = 0x40000000;
  applier[2] = ___dispatch_transform_from_utf16_block_invoke;
  applier[3] = &unk_59B80;
  applier[4] = &v8;
  applier[5] = v13;
  applier[6] = a1;
  v7 = a2;
  v2 = dispatch_data_apply(a1, applier);
  v3 = v9 + 3;
  if (v2)
  {
    v4 = *v3;
  }
  else
  {
    _dispatch_transform_buffer_new((uint64_t)v3, 0, 0);
    dispatch_release((dispatch_object_t)v9[3]);
    v4 = 0;
  }
  _Block_object_dispose(&v8, 8);
  _Block_object_dispose(v13, 8);
  return v4;
}

NSObject *___dispatch_transform_from_utf16_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t v9;
  NSObject *result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int16 v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  _BYTE *v34;
  unsigned __int16 *v35;

  v5 = a5;
  if (!a3)
  {
    v9 = a5 == 3 * (a5 / 3) ? a5 / 3 : a5 / 3 + 1;
    result = _dispatch_transform_buffer_new(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24, 2 * v9, 0);
    if (!(_DWORD)result)
      return result;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v12 = *(_QWORD *)(v11 + 24);
  if (v12 >= v5)
  {
    *(_QWORD *)(v11 + 24) = v12 - v5;
    return (&dword_0 + 1);
  }
  if (v12)
  {
    a4 += v12;
    v5 -= v12;
    *(_QWORD *)(v11 + 24) = 0;
  }
  v13 = (v5 & 1) + (v5 >> 1);
  if (!v13)
  {
LABEL_55:
    _dispatch_transform_buffer_new(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24, 0, 0);
    return (&dword_0 + 1);
  }
  v14 = 0;
  while (1)
  {
    if ((v5 & 1) != 0 && v14 == v13 - 1)
    {
      v35 = 0;
      result = _dispatch_data_subrange_map(*(NSObject **)(a1 + 48), (const void **)&v35, a3 + 2 * (v13 - 1), 2uLL);
      if (!result)
        return result;
      v15 = bswap32(*v35) >> 16;
      LOWORD(v16) = *(_DWORD *)(a1 + 56) == 1 ? *v35 : v15;
      dispatch_release(result);
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    }
    else
    {
      v17 = bswap32(*(unsigned __int16 *)(a4 + 2 * v14)) >> 16;
      LOWORD(v16) = *(_DWORD *)(a1 + 56) == 1 ? *(_WORD *)(a4 + 2 * v14) : v17;
    }
    if (!(v14 | a3) && (unsigned __int16)v16 == 65534)
      return 0;
    v16 = (unsigned __int16)v16;
    if (v14 | a3 || (unsigned __int16)v16 != 65279)
    {
      if ((v16 & 0xFC00) == 0xD800)
      {
        if (++v14 >= v13)
        {
          v35 = 0;
          result = _dispatch_data_subrange_map(*(NSObject **)(a1 + 48), (const void **)&v35, a3 + 2 * v14, 2uLL);
          if (!result)
            return result;
          v20 = bswap32(*v35) >> 16;
          if (*(_DWORD *)(a1 + 56) == 1)
            v19 = *v35;
          else
            v19 = v20;
          dispatch_release(result);
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += 2;
        }
        else
        {
          v18 = bswap32(*(unsigned __int16 *)(a4 + 2 * v14)) >> 16;
          if (*(_DWORD *)(a1 + 56) == 1)
            v19 = *(_WORD *)(a4 + 2 * v14);
          else
            v19 = v18;
        }
        if (v19 >> 10 != 55)
          return 0;
        v16 = (((unsigned __int16)v16 << 10) - 56557568) | v19 & 0x3FF;
      }
      else if ((v16 & 0xFC00) == 0xDC00)
      {
        return 0;
      }
      if ((uint64_t)(v13 - v14) < 0)
        return 0;
      v21 = 2 * (v13 - v14);
      if (v16 > 0x7F)
      {
        if (v16 > 0x7FF)
        {
          v25 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24;
          if (HIWORD(v16))
          {
            result = _dispatch_transform_buffer_new(v25, 4uLL, v21);
            if (!(_DWORD)result)
              return result;
            v27 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
            v28 = *(_BYTE **)(v27 + 40);
            *(_QWORD *)(v27 + 40) = v28 + 1;
            *v28 = (v16 >> 18) | 0xF0;
            v26 = (v16 >> 12) & 0x3F | 0x80;
          }
          else
          {
            result = _dispatch_transform_buffer_new(v25, 3uLL, v21);
            if (!(_DWORD)result)
              return result;
            v26 = (v16 >> 12) | 0xE0;
          }
          v29 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
          v30 = *(_BYTE **)(v29 + 40);
          *(_QWORD *)(v29 + 40) = v30 + 1;
          *v30 = v26;
          v24 = (v16 >> 6) & 0x3F | 0x80;
        }
        else
        {
          result = _dispatch_transform_buffer_new(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24, 2uLL, v21);
          if (!(_DWORD)result)
            return result;
          v24 = (v16 >> 6) | 0xC0;
        }
        v31 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v32 = *(_BYTE **)(v31 + 40);
        *(_QWORD *)(v31 + 40) = v32 + 1;
        *v32 = v24;
        v33 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v34 = *(_BYTE **)(v33 + 40);
        *(_QWORD *)(v33 + 40) = v34 + 1;
        *v34 = v16 & 0x3F | 0x80;
      }
      else
      {
        result = _dispatch_transform_buffer_new(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24, 1uLL, v21);
        if (!(_DWORD)result)
          return result;
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v23 = *(_BYTE **)(v22 + 40);
        *(_QWORD *)(v22 + 40) = v23 + 1;
        *v23 = v16;
      }
    }
    else
    {
      v14 = 0;
    }
    if (++v14 >= v13)
      goto LABEL_55;
  }
}

void *_dispatch_transform_buffer_new(uint64_t a1, unint64_t a2, uint64_t a3)
{
  void *v6;
  unint64_t v7;
  NSObject *v8;
  dispatch_data_t concat;
  void *result;

  v6 = *(void **)(a1 + 8);
  if (a2 && (unint64_t)v6 + *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16) >= a2)
    return &dword_0 + 1;
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7 <= (unint64_t)v6)
    {
      free(v6);
    }
    else
    {
      v8 = dispatch_data_create(v6, v7 - (_QWORD)v6, 0, &__block_literal_global);
      concat = dispatch_data_create_concat(*(dispatch_data_t *)a1, v8);
      dispatch_release(v8);
      dispatch_release(*(dispatch_object_t *)a1);
      *(_QWORD *)a1 = concat;
    }
  }
  *(_QWORD *)(a1 + 8) = 0;
  result = (void *)(a3 + a2);
  *(_QWORD *)(a1 + 24) = a3 + a2;
  if (!(a3 + a2))
    goto LABEL_11;
  if ((unint64_t)result > 0x6400000)
    return 0;
  result = malloc_type_malloc((size_t)result, 0xADEDD139uLL);
  *(_QWORD *)(a1 + 8) = result;
  if (result)
  {
LABEL_11:
    *(_QWORD *)(a1 + 16) = result;
    return &dword_0 + 1;
  }
  return result;
}

uint64_t _dispatch_transform_to_utf16(NSObject *a1, int a2)
{
  BOOL v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD applier[7];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _QWORD v13[4];

  v13[2] = 0x2000000000;
  v10 = 0x3800000000;
  v11 = off_59BA0;
  v12 = *(_OWORD *)algn_59BB0;
  v13[0] = 0;
  v13[1] = v13;
  v13[3] = 0;
  v8 = 0;
  v9 = &v8;
  applier[0] = _NSConcreteStackBlock;
  applier[1] = 0x40000000;
  applier[2] = ___dispatch_transform_to_utf16_block_invoke;
  applier[3] = &unk_59BC8;
  v7 = a2;
  applier[4] = &v8;
  applier[5] = v13;
  applier[6] = a1;
  v2 = dispatch_data_apply(a1, applier);
  v3 = v9 + 3;
  if (v2)
  {
    v4 = *v3;
  }
  else
  {
    _dispatch_transform_buffer_new((uint64_t)v3, 0, 0);
    dispatch_release((dispatch_object_t)v9[3]);
    v4 = 0;
  }
  _Block_object_dispose(&v8, 8);
  _Block_object_dispose(v13, 8);
  return v4;
}

NSObject *___dispatch_transform_to_utf16_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, size_t a5)
{
  size_t v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  size_t v13;
  NSObject *result;
  NSObject *v15;
  unsigned int utf8_sequence;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int16 v20;
  uint64_t v21;
  _WORD *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  _WORD *v27;
  __int16 v28;
  uint64_t v29;
  __int16 *v30;
  char *v31;

  v5 = a5;
  if (!a3)
  {
    result = 0;
    if ((a5 & 0x8000000000000000) != 0)
      return result;
    if (2 * a5 >= 0xFFFFFFFFFFFFFFFELL)
      return result;
    result = _dispatch_transform_buffer_new(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24, 2 * a5 + 2, 0);
    if (!(_DWORD)result)
      return result;
    if (*(_DWORD *)(a1 + 56) == 1)
      v28 = -257;
    else
      v28 = -2;
    v29 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v30 = *(__int16 **)(v29 + 40);
    *(_QWORD *)(v29 + 40) = v30 + 1;
    *v30 = v28;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v10 = *(_QWORD *)(v9 + 24);
  if (v10 >= v5)
  {
    *(_QWORD *)(v9 + 24) = v10 - v5;
    return (&dword_0 + 1);
  }
  if (!v10)
    goto LABEL_6;
  *(_QWORD *)(v9 + 24) = 0;
  v5 -= v10;
  if (!v5)
  {
LABEL_36:
    _dispatch_transform_buffer_new(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24, 0, 0);
    return (&dword_0 + 1);
  }
  a4 += v10;
LABEL_6:
  v11 = 0;
  while (1)
  {
    v12 = *a4;
    if (v12 < 0)
    {
      if ((v12 & 0xE0) == 0xC0)
      {
        v13 = 2;
      }
      else if ((v12 & 0xF0) == 0xE0)
      {
        v13 = 3;
      }
      else
      {
        if ((v12 & 0xF8) != 0xF0)
          return 0;
        v13 = 4;
      }
    }
    else
    {
      v13 = 1;
    }
    if (v13 + v11 <= v5)
    {
      utf8_sequence = _dispatch_transform_read_utf8_sequence(a4);
      v11 += v13;
    }
    else
    {
      v31 = 0;
      result = _dispatch_data_subrange_map(*(NSObject **)(a1 + 48), (const void **)&v31, v11 + a3, v13);
      if (!result)
        return result;
      v15 = result;
      utf8_sequence = _dispatch_transform_read_utf8_sequence(v31);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += v11 - v5 + v13;
      dispatch_release(v15);
      v11 = v5;
    }
    if ((uint64_t)(v5 - v11) < 0)
      return 0;
    if (utf8_sequence != 65279 || v11 + a3 != 3)
    {
      if (utf8_sequence - 55296 < 0x7FF)
        return 0;
      v17 = 2 * (v5 - v11);
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24;
      if (utf8_sequence < 0x10000)
      {
        result = _dispatch_transform_buffer_new(v18, 2uLL, v17);
        if (!(_DWORD)result)
          return result;
        v25 = bswap32(utf8_sequence) >> 16;
        if (*(_DWORD *)(a1 + 56) == 1)
          LOWORD(v23) = utf8_sequence;
        else
          LOWORD(v23) = v25;
      }
      else
      {
        result = _dispatch_transform_buffer_new(v18, 4uLL, v17);
        if (!(_DWORD)result)
          return result;
        v19 = bswap32(((utf8_sequence + 983040) >> 10) & 0x3FF | 0xFFFFD800) >> 16;
        if (*(_DWORD *)(a1 + 56) == 1)
          v20 = ((utf8_sequence + 983040) >> 10) & 0x3FF | 0xD800;
        else
          v20 = v19;
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v22 = *(_WORD **)(v21 + 40);
        *(_QWORD *)(v21 + 40) = v22 + 1;
        *v22 = v20;
        v23 = utf8_sequence & 0x3FF | 0xFFFFDC00;
        v24 = bswap32(v23) >> 16;
        if (*(_DWORD *)(a1 + 56) != 1)
          LOWORD(v23) = v24;
      }
      v26 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v27 = *(_WORD **)(v26 + 40);
      *(_QWORD *)(v26 + 40) = v27 + 1;
      *v27 = v23;
    }
    a4 += v13;
    if (v5 <= v11)
      goto LABEL_36;
  }
}

uint64_t _dispatch_transform_read_utf8_sequence(char *a1)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  char *v7;
  char v8;

  v1 = *a1;
  if (*a1 < 0)
  {
    if ((v1 & 0xE0) == 0xC0)
    {
      v2 = 1;
      v3 = 31;
    }
    else
    {
      if ((v1 & 0xF0) != 0xE0)
      {
        v5 = v1 & 0xF8;
        v6 = (v1 & 7) << 6;
        if (v5 == 240)
          v4 = v6;
        else
          v4 = 0;
        if (v5 == 240)
          v2 = 3;
        else
          v2 = -1;
        goto LABEL_13;
      }
      v2 = 2;
      v3 = 15;
    }
    v4 = (v1 & v3) << 6;
LABEL_13:
    v7 = a1 + 1;
    do
    {
      v8 = *v7++;
      v1 = v4 | v8 & 0x3F;
      --v2;
      v4 = (_DWORD)v1 << 6;
    }
    while ((_BYTE)v2);
  }
  return v1;
}

void _dispatch_time_init()
{
  kern_return_t v0;
  mach_timebase_info info;

  info = 0;
  v0 = mach_timebase_info(&info);
  if (v0)
    _dispatch_bug(86, v0);
  if (info.numer != 125 || info.denom != 3)
  {
    *(double *)&_dispatch_host_time_data_0 = (double)info.numer / (double)info.denom;
    _dispatch_host_time_data_1 = info.numer == info.denom;
    _dispatch_host_time_mach2nano = (uint64_t (*)(_QWORD))_dispatch_mach_host_time_mach2nano;
    _dispatch_host_time_nano2mach = (uint64_t (*)(_QWORD))_dispatch_mach_host_time_nano2mach;
  }
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  int v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  dispatch_time_t v11;
  dispatch_time_t v12;

  if ((uint64_t)when > -2)
  {
    if (when == -1)
      return when;
    if (when)
      goto LABEL_14;
    when = mach_absolute_time();
    v3 = 0;
LABEL_9:
    if (when == -1)
      return when;
    goto LABEL_10;
  }
  if (when == 0x8000000000000000)
  {
    v3 = 1;
    when = mach_continuous_time();
    goto LABEL_9;
  }
  if (when == -2)
  {
    when = clock_gettime_nsec_np(_CLOCK_REALTIME);
    v3 = 2;
    goto LABEL_9;
  }
LABEL_14:
  if ((when & 0x8000000000000000) != 0)
  {
    if ((when & 0x4000000000000000) == 0)
    {
      when &= ~0x8000000000000000;
      v3 = 1;
      goto LABEL_21;
    }
    when = -(uint64_t)when;
    v3 = 2;
  }
  else
  {
    v3 = 0;
  }
  if (when >> 62)
    return -1;
LABEL_10:
  if (v3 == 2)
  {
    v4 = when + delta;
    if (delta < 0)
    {
      if (v4 < 1)
      {
        v4 = 2;
        return -v4;
      }
      if ((unint64_t)v4 <= 0x3FFFFFFFFFFFFFFELL)
        return -v4;
    }
    else if ((unint64_t)(v4 - 0x3FFFFFFFFFFFFFFFLL) >= 0xC000000000000002)
    {
      return -v4;
    }
    return -1;
  }
LABEL_21:
  if ((delta & 0x8000000000000000) == 0)
  {
    if (_dispatch_host_time_nano2mach)
    {
      v12 = when;
      v6 = _dispatch_host_time_nano2mach(delta);
      when = v12;
    }
    else if (delta)
    {
      if ((unint64_t)delta > 0x7FFFFFFFFFFFFFFELL)
      {
        v6 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else if ((unint64_t)delta > 0x5555555555555554)
      {
        v6 = 3 * (delta / 0x7DuLL);
      }
      else
      {
        v5 = ((unint64_t)(3 * delta) * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
        v6 = (v5 + ((unint64_t)(3 * delta - v5) >> 1)) >> 6;
      }
    }
    else
    {
      v6 = 0;
    }
    v7 = v6 + when;
    if ((unint64_t)(v7 - 0x3FFFFFFFFFFFFFFFLL) < 0xC000000000000002)
      return -1;
LABEL_37:
    if (v3 == 1)
      return v7 | 0x8000000000000000;
    else
      return v7;
  }
  v8 = -delta;
  if (_dispatch_host_time_nano2mach)
  {
    v11 = when;
    v10 = _dispatch_host_time_nano2mach(v8);
    when = v11;
  }
  else if (v8 > 0x7FFFFFFFFFFFFFFELL)
  {
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else if (v8 > 0x5555555555555554)
  {
    v10 = 3 * (v8 / 0x7D);
  }
  else
  {
    v9 = ((unint64_t)(-3 * delta) * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
    v10 = (v9 + ((unint64_t)(-3 * delta - v9) >> 1)) >> 6;
  }
  v7 = when - v10;
  if (v7 > 0)
  {
    if ((unint64_t)v7 > 0x3FFFFFFFFFFFFFFELL)
      return -1;
    goto LABEL_37;
  }
  if (v3 == 1)
    return 0x8000000000000001;
  else
    return 1;
}

uint64_t dispatch_time_to_nsecs(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;

  if ((uint64_t)a1 <= -2)
  {
    if (a1 == 0x8000000000000000)
    {
      a1 = mach_continuous_time();
      goto LABEL_10;
    }
    if (a1 == -2)
    {
      a1 = clock_gettime_nsec_np(_CLOCK_REALTIME);
LABEL_5:
      *a2 = 3;
LABEL_21:
      v6 = 1;
      goto LABEL_22;
    }
LABEL_12:
    if ((a1 & 0x8000000000000000) == 0)
    {
      if (a1 >> 62)
        a1 = -1;
      goto LABEL_15;
    }
    if ((a1 & 0x4000000000000000) != 0)
    {
      if ((unint64_t)-(uint64_t)a1 >> 62)
        a1 = -1;
      else
        a1 = -(uint64_t)a1;
      goto LABEL_5;
    }
    a1 &= ~0x8000000000000000;
LABEL_10:
    v5 = 2;
    goto LABEL_16;
  }
  if (a1 != -1)
  {
    if (!a1)
    {
      a1 = mach_absolute_time();
LABEL_15:
      v5 = 1;
LABEL_16:
      *a2 = v5;
      if (_dispatch_host_time_mach2nano)
      {
        a1 = _dispatch_host_time_mach2nano(a1);
      }
      else if (a1)
      {
        if (a1 > 0x3126E978D4FDF39)
        {
          v6 = 1;
          a1 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_22;
        }
        if (a1 > 0x20C49BA5E353F7BLL)
          a1 = 125 * (a1 / 3);
        else
          a1 = 125 * a1 / 3;
      }
      goto LABEL_21;
    }
    goto LABEL_12;
  }
  v6 = 0;
  *a2 = 0;
LABEL_22:
  *a3 = a1;
  return v6;
}

uint64_t dispatch_time_from_nsec(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (a2 <= 2)
    v3 = 2;
  else
    v3 = a2;
  if (_dispatch_host_time_nano2mach)
  {
    v5 = _dispatch_host_time_nano2mach(v3);
  }
  else if (v3 > 0x7FFFFFFFFFFFFFFELL)
  {
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else if (v3 >= 0x5555555555555555)
  {
    v5 = 3 * (v3 / 0x7D);
  }
  else
  {
    v4 = (3 * v3 * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
    v5 = (v4 + ((3 * v3 - v4) >> 1)) >> 6;
  }
  if (v5 > 0x3FFFFFFFFFFFFFFELL)
    v6 = -1;
  else
    v6 = v5;
  v7 = v5 | 0x8000000000000000;
  if (v5 > 0x3FFFFFFFFFFFFFFELL)
    v7 = -1;
  v8 = -1;
  if (v3 <= 0x3FFFFFFFFFFFFFFELL)
    v8 = -(uint64_t)v3;
  if (a1 == 2)
    v8 = v7;
  if (a1 == 1)
    return v6;
  else
    return v8;
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  __uint64_t v3;
  uint64_t v4;
  dispatch_time_t v5;

  if (when)
    v3 = when->tv_nsec + 1000000000 * when->tv_sec;
  else
    v3 = clock_gettime_nsec_np(_CLOCK_REALTIME);
  v4 = v3 + delta;
  v5 = -2;
  if (delta >= 0)
    v5 = -1;
  if (v4 >= 2)
    return -v4;
  else
    return v5;
}

int64_t _dispatch_timeout(int64_t result)
{
  unint64_t v1;
  uint64_t v2;
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  __uint64_t v6;

  if (result > -2)
  {
    if (result == -1)
      return result;
    if (!result)
      return 0;
  }
  else if (result == 0x8000000000000000 || result == -2)
  {
    return 0;
  }
  if (result < 0)
  {
    if ((result & 0x4000000000000000) != 0)
    {
      if ((unint64_t)-result >> 62)
        v5 = -1;
      else
        v5 = -result;
      v6 = clock_gettime_nsec_np(_CLOCK_REALTIME);
      if (v5 >= v6)
        return v5 - v6;
      else
        return 0;
    }
    v1 = result & 0x7FFFFFFFFFFFFFFFLL;
    v2 = mach_continuous_time();
  }
  else
  {
    if ((unint64_t)result >> 62)
      v1 = -1;
    else
      v1 = result;
    v2 = mach_absolute_time();
  }
  v3 = v1 >= v2;
  v4 = v1 - v2;
  if (v4 == 0 || !v3)
    return 0;
  if (_dispatch_host_time_mach2nano)
    return _dispatch_host_time_mach2nano(v4);
  if (v4 > 0x3126E978D4FDF39)
    return 0x7FFFFFFFFFFFFFFFLL;
  if (v4 >= 0x20C49BA5E353F7CLL)
    return 125 * (v4 / 3);
  return 125 * v4 / 3;
}

unint64_t _dispatch_mach_host_time_mach2nano(unint64_t result)
{
  unint64_t v1;
  double v2;

  v1 = result;
  if (result)
  {
    if (!_dispatch_host_time_data_1)
    {
      result = 0x7FFFFFFFFFFFFFFFLL;
      if (v1 <= 0x7FFFFFFFFFFFFFFELL)
      {
        v2 = (double)v1 * *(double *)&_dispatch_host_time_data_0 + 0.5;
        if (v2 < 9.22337204e18)
          return (unint64_t)v2;
      }
    }
  }
  return result;
}

unint64_t _dispatch_mach_host_time_nano2mach(unint64_t result)
{
  unint64_t v1;
  double v2;

  v1 = result;
  if (result)
  {
    if (!_dispatch_host_time_data_1)
    {
      result = 0x7FFFFFFFFFFFFFFFLL;
      if (v1 <= 0x7FFFFFFFFFFFFFFELL)
      {
        v2 = (double)v1 / *(double *)&_dispatch_host_time_data_0 + 0.5;
        if (v2 < 9.22337204e18)
          return (unint64_t)v2;
      }
    }
  }
  return result;
}

void *_dispatch_continuation_alloc_from_heap()
{
  void *result;

  if (_dispatch_continuation_alloc_init_pred != -1)
    dispatch_once_f(&_dispatch_continuation_alloc_init_pred, 0, (dispatch_function_t)_dispatch_continuation_alloc_init);
  if (_dispatch_use_dispatch_alloc)
    return (void *)_dispatch_alloc_continuation_alloc();
  while (1)
  {
    result = malloc_type_calloc(1uLL, 0x40uLL, 0x791BAC36uLL);
    if (result)
      break;
    _dispatch_temporary_resource_shortage();
  }
  return result;
}

unint64_t _dispatch_alloc_continuation_alloc()
{
  __int16 StatusReg;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t result;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;

  if (!_dispatch_main_heap)
    return _dispatch_alloc_continuation_from_heap_slow();
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  v1 = _dispatch_main_heap;
  v2 = *(_QWORD *)(_dispatch_main_heap + ((unint64_t)(StatusReg & 0xFFF) << 20) + 8);
  if (v2)
  {
    v3 = 0;
    while (2)
    {
      v4 = (unint64_t *)(v2 + 8 * v3);
      while (1)
      {
        v5 = __ldxr(v4);
        if (v5 == -1)
          break;
        v6 = __clz(__rbit64(~v5));
        if (!__stxr((1 << v6) | v5, v4))
        {
          v8 = ((unint64_t)v4 & 0xFFFFF) - 64;
          v9 = v8 >> 3;
          v10 = (v8 >> 9) & 0x3FFFFFF;
          result = ((((unint64_t)v4 & 0xFFFFFFFFFFF00000) + (v10 << 18)) & 0xFFFFFFFFFFFC0FFFLL | ((v9 & 0x3F) << 12))
                 + (v6 << 6)
                 + 0x4000;
          v11 = (unint64_t *)(((unint64_t)v4 & 0xFFFFFFFFFFF00000) + 8 * v10 + 16);
          v12 = 1 << v9;
          while (1)
          {
            v13 = __ldxr(v11);
            if (*v4 != -1)
              break;
            if (!__stxr(v13 | v12, v11))
              return result;
          }
          __clrex();
          return result;
        }
      }
      __clrex();
      if (++v3 != 4)
        continue;
      break;
    }
    v1 = _dispatch_main_heap;
  }
  result = _dispatch_alloc_continuation_from_heap(v1);
  if (!result)
    return _dispatch_alloc_continuation_from_heap_slow();
  return result;
}

void _dispatch_continuation_free_to_heap(uint64_t a1)
{
  if (_dispatch_use_dispatch_alloc)
    _dispatch_alloc_continuation_free(a1);
  else
    free((void *)a1);
}

void _dispatch_alloc_continuation_free(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  *(_QWORD *)a1 = 0;
  v1 = a1 - (a1 & 0xFFFFFFFFFFF00000);
  v2 = (v1 - 0x4000) >> 6;
  v3 = ((v1 - 0x4000) >> 18) & 0xFFFFF;
  v4 = (a1 & 0xFFFFFFFFFFF00000) + 8 * v3 + 16;
  v5 = (unint64_t *)((a1 & 0xFFFFFFFFFFF00000) + (v3 << 9) + 8 * ((v2 >> 6) & 0x3F) + 64);
  v6 = (v1 - 1664) >> 6;
  v7 = v6 >> 6;
  if ((a1 & 0xFC000) != 0)
  {
    v8 = (unint64_t *)v4;
  }
  else
  {
    v5 = (unint64_t *)((a1 & 0xFFFFFFFFFFF00000) + 8 * v7 + 1600);
    v8 = 0;
  }
  if ((a1 & 0xFC000) != 0)
    LOBYTE(v7) = (v2 >> 6) & 0x3F;
  else
    LOBYTE(v2) = v6;
  v9 = 1 << v2;
  v10 = *v5;
  if ((v9 & *v5) == 0)
  {
    v8 = (unint64_t *)*v5;
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption: failed to clear bit exclusively";
    qword_61258 = (uint64_t)v8;
    __break(1u);
LABEL_13:
    v11 = v10 & v9;
    v12 = ~(1 << v7);
    do
      v13 = __ldxr(v8);
    while (__stlxr(v13 & v12, v8));
    if (!v11)
      _dispatch_alloc_maybe_madvise_page(a1);
    return;
  }
  v9 = ~v9;
  do
    v10 = __ldxr(v5);
  while (__stlxr(v10 & v9, v5));
  if (v8)
    goto LABEL_13;
}

const char *_dispatch_continuation_alloc_init()
{
  int v0;
  const char *result;
  BOOL v2;

  v0 = malloc_engaged_nano();
  result = getenv("LIBDISPATCH_CONTINUATION_ALLOCATOR");
  if (result)
  {
    result = (const char *)atoi(result);
    v2 = (_DWORD)result != 0;
  }
  else
  {
    v2 = v0 == 0;
  }
  _dispatch_use_dispatch_alloc = v2;
  return result;
}

uint64_t _dispatch_alloc_continuation_from_heap(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  __int16 StatusReg;
  unint64_t v20;

  v1 = 0;
  v2 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) & 0xFFF;
  while (2)
  {
    v3 = (unint64_t *)(a1 + (v2 << 20) + 8 * v1 + 1600);
    while (1)
    {
      v4 = __ldxr(v3);
      if (v4 == -1)
        break;
      v5 = __clz(__rbit64(~v4));
      if (!__stxr((1 << v5) | v4, v3))
      {
        v7 = ((_DWORD)v1 << 6);
        return a1 + (v2 << 20) + ((v5 | v7) << 6) + 1664;
      }
    }
    __clrex();
    if (++v1 != 3)
      continue;
    break;
  }
  v6 = (unint64_t *)(a1 + (v2 << 20) + 1624);
  v7 = 192;
  while (1)
  {
    v8 = __ldxr(v6);
    if (v8 == -1)
      break;
    v5 = __clz(__rbit64(~v8));
    if (v5 > 0x25)
      break;
    if (!__stxr((1 << v5) | v8, v6))
      return a1 + (v2 << 20) + ((v5 | v7) << 6) + 1664;
  }
  v11 = 0;
  __clrex();
  do
  {
    v12 = a1 + (v2 << 20) + 8 * v11;
    v14 = *(_QWORD *)(v12 + 16);
    v13 = (unint64_t *)(v12 + 16);
    if (v14 != -1)
    {
      v15 = 0;
      while (2)
      {
        v16 = (unint64_t *)(a1 + (v2 << 20) + (v11 << 9) + 8 * v15 + 64);
        while (1)
        {
          v17 = __ldxr(v16);
          if (v17 == -1)
            break;
          v18 = __clz(__rbit64(~v17));
          if (!__stxr((1 << v18) | v17, v16))
          {
            StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
            *(_QWORD *)(_dispatch_main_heap + ((unint64_t)(StatusReg & 0xFFF) << 20) + 8) = (unint64_t)v16 & 0xFFFFFFFFFFFFFFE0;
            while (1)
            {
              v20 = __ldxr(v13);
              if (*v16 != -1)
                break;
              if (!__stxr(v20 | (1 << v15), v13))
                return a1 + (v2 << 20) + (v11 << 18) + (v15 << 12) + (v18 << 6) + 0x4000;
            }
            __clrex();
            return a1 + (v2 << 20) + (v11 << 18) + (v15 << 12) + (v18 << 6) + 0x4000;
          }
        }
        __clrex();
        if (++v15 != 64)
          continue;
        break;
      }
    }
    v9 = 0;
    ++v11;
  }
  while (v11 != 3);
  return v9;
}

uint64_t _dispatch_alloc_continuation_from_heap_slow()
{
  unint64_t *i;
  uint64_t v1;
  uint64_t result;

  for (i = (unint64_t *)&_dispatch_main_heap; ; i = (unint64_t *)*i)
  {
    v1 = *i;
    if (!*i)
    {
      _dispatch_alloc_try_create_heap(i);
      v1 = *i;
    }
    result = _dispatch_alloc_continuation_from_heap(v1);
    if (result)
      break;
  }
  return result;
}

void _dispatch_alloc_try_create_heap(unint64_t *a1)
{
  mach_vm_size_t v2;
  kern_return_t v3;
  void *v4;
  mach_vm_address_t address;

  v2 = (unint64_t)MEMORY[0xFFFFFC036] << 20;
  while (1)
  {
    address = vm_page_size;
    v3 = mach_vm_map(mach_task_self_, &address, v2, 0xFFFFFuLL, 1241513985, 0, 0, 0, 3, 7, 1u);
    if (!v3)
      break;
    if (v3 != 3)
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Could not allocate heap";
      qword_61258 = v3;
      __break(1u);
LABEL_12:
      _dispatch_bug(427, v3);
      return;
    }
    _dispatch_temporary_resource_shortage();
  }
  v4 = (void *)address;
  while (!__ldxr(a1))
  {
    if (!__stxr((unint64_t)v4, a1))
      return;
  }
  __clrex();
  v3 = munmap(v4, (unint64_t)MEMORY[0xFFFFFC036] << 20);
  if (v3)
    goto LABEL_12;
}

void _dispatch_alloc_maybe_madvise_page(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if ((a1 & 0xFC000) != 0)
  {
    v2 = (void *)(a1 & 0xFFFFFFFFFFFFC000);
    if (v2)
    {
      v3 = 0;
      v4 = a1 & 0xFFFFFFFFFFF00000;
      v5 = (unint64_t)v2 - (a1 & 0xFFFFFFFFFFF00000) - 0x4000;
      v6 = (v5 >> 12) & 0x3F;
      v7 = (v5 >> 18) & 0xFFFFF;
      v8 = (_QWORD *)(((v4 + (v7 << 9)) & 0xFFFFFFFFFFFFFE07 | (8 * v6)) + 64);
      while (!v8[v3])
      {
        if (++v3 == 4)
        {
          v9 = 0;
LABEL_8:
          v10 = &v8[v9];
          while (!__ldxr(v10))
          {
            if (!__stxr(0xFFFFFFFFFFFFFFFFLL, v10))
            {
              if (++v9 != 4)
                goto LABEL_8;
              v19 = v7;
              v17 = v4;
              v18 = v6;
              v16 = ((v4 + (v7 << 9)) & 0xFFFFFFFFFFFFFE07 | (8 * v6)) + 64;
              v12 = madvise(v2, 0x4000uLL, 5);
              if (v12)
                _dispatch_bug(563, v12);
              v9 = 4;
              v8 = (_QWORD *)v16;
              v4 = v17;
              v6 = v18;
              v7 = v19;
              goto LABEL_16;
            }
          }
          __clrex();
          if ((int)v9 > 1)
          {
LABEL_16:
            v13 = v9 + 7;
            v14 = v4 + ((8 * v6) | (v7 << 9));
            do
            {
              *(_QWORD *)(v14 + 8 * v13) = 0;
              v15 = v13 - 7;
              --v13;
            }
            while (v15 > 2);
            goto LABEL_20;
          }
          if (!(_DWORD)v9)
            return;
LABEL_20:
          *v8 = 0;
          return;
        }
      }
    }
  }
}

uint64_t dispatch_benchmark(unint64_t a1, uint64_t a2)
{
  return dispatch_benchmark_f(a1, a2, *(void (**)(uint64_t))(a2 + 16));
}

uint64_t dispatch_benchmark_f(unint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (dispatch_benchmark_f_pred == -1)
  {
    if (a1)
      goto LABEL_3;
    return 0;
  }
  dispatch_once_f(&dispatch_benchmark_f_pred, &dispatch_benchmark_f_bdata, (dispatch_function_t)_dispatch_benchmark_init);
  if (!a1)
    return 0;
LABEL_3:
  v6 = mach_absolute_time();
  v7 = a1;
  do
  {
    a3(a2);
    --v7;
  }
  while (v7);
  v8 = mach_absolute_time();
  return __udivti3((v8 - v6) * dispatch_benchmark_f_bdata, ((v8 - v6) * (unsigned __int128)dispatch_benchmark_f_bdata) >> 64, *(unsigned int *)algn_611FC * a1, (*(unsigned int *)algn_611FC * (unsigned __int128)a1) >> 64)- qword_61200;
}

uint64_t _dispatch_benchmark_init(unsigned int *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t);
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v3 = (void (*)(uint64_t))*((_QWORD *)a1 + 2);
  v2 = *((_QWORD *)a1 + 3);
  v4 = *((_QWORD *)a1 + 4);
  mach_timebase_info((mach_timebase_info_t)a1);
  v5 = mach_absolute_time();
  if (v4 <= 1)
    v6 = 1;
  else
    v6 = v4;
  do
  {
    v3(v2);
    --v6;
  }
  while (v6);
  v7 = mach_absolute_time();
  v8 = __udivti3((v7 - v5) * *a1, ((v7 - v5) * (unsigned __int128)*a1) >> 64, a1[1], 0);
  result = __udivti3(v8, v9, v4, 0);
  *((_QWORD *)a1 + 1) = result;
  return result;
}

NSObject *_dispatch_introspection_init()
{
  _opaque_pthread_t *v0;
  thread_inspect_t v1;
  kern_return_t v2;
  uint64_t i;
  char *v4;
  const char *v5;
  unsigned int v6;
  uint64_t v7;
  const char *v9;
  uint64_t v10;
  unsigned int v11;
  const char *v12;
  uint64_t v13;
  unsigned int v14;
  mach_msg_type_number_t thread_info_outCnt;
  integer_t thread_info_out[2];
  uint64_t v17;
  uint64_t v18;
  char __dst[16];
  __int128 v20;

  byte_61298 = _dispatch_getenv_BOOL("LIBDISPATCH_DEBUG_QUEUE_INVERSIONS", 0);
  v0 = *(_opaque_pthread_t **)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_QWORD *)thread_info_out = 0;
  v17 = 0;
  v18 = 0;
  thread_info_outCnt = 6;
  v1 = pthread_mach_thread_np(v0);
  v2 = thread_info(v1, 4u, thread_info_out, &thread_info_outCnt);
  if (v2)
    _dispatch_bug(72, v2);
  else
    qword_61290 = v18 - (_QWORD)v0;
  pthread_key_init_np(26, _dispatch_introspection_thread_remove);
  _dispatch_introspection_thread_add();
  for (i = 0; i != 2304; i += 128)
  {
    v4 = (char *)&_dispatch_root_queues + i;
    if (!MEMORY[0xFFFFFC100])
      goto LABEL_5;
    *(_OWORD *)__dst = 0u;
    v20 = 0u;
    if (*((_QWORD *)v4 + 9))
      v5 = (const char *)*((_QWORD *)v4 + 9);
    else
      v5 = (const char *)&unk_416A6;
    strncpy(__dst, v5, 0x20uLL);
    v6 = *((_DWORD *)v4 + 21);
    if ((v6 & 0x4000000) != 0)
    {
      v7 = v6 & 0x8E000000 | 0xFF;
      LOWORD(v6) = (unsigned __int16)v6 >> 12;
    }
    else
    {
      v7 = v6 & 0x8E0000FF;
      v6 = (v6 >> 8) & 0xF;
      if (!v6)
        goto LABEL_15;
    }
    v7 |= 256 << (v6 - 1);
LABEL_15:
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(772079621, *((_QWORD *)v4 + 8), v7, 0, 0);
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(772079622, *(_QWORD *)__dst, *(_QWORD *)&__dst[8], v20, *((_QWORD *)&v20 + 1));
LABEL_5:
    _dispatch_introspection_queue_create(((char *)&_dispatch_root_queues + i));
  }
  if (!MEMORY[0xFFFFFC100])
    goto LABEL_20;
  if (off_64E08)
    v9 = off_64E08;
  else
    v9 = (const char *)&unk_416A6;
  strncpy(__dst, v9, 0x20uLL);
  if ((dword_64E14 & 0x4000000) != 0)
  {
    v10 = dword_64E14 & 0x8E000000 | 0xFF;
    LOWORD(v11) = (unsigned __int16)dword_64E14 >> 12;
  }
  else
  {
    v10 = dword_64E14 & 0x8E0000FF;
    v11 = (dword_64E14 >> 8) & 0xF;
    if (!v11)
      goto LABEL_37;
  }
  v10 |= 256 << (v11 - 1);
LABEL_37:
  if (MEMORY[0xFFFFFC100])
    kdebug_trace(772079621, qword_64E00, v10, 0, 0);
  if (MEMORY[0xFFFFFC100])
    kdebug_trace(772079622, *(_QWORD *)__dst, *(_QWORD *)&__dst[8], v20, *((_QWORD *)&v20 + 1));
LABEL_20:
  _dispatch_introspection_queue_create(&_dispatch_main_q);
  if (MEMORY[0xFFFFFC100])
  {
    if (off_64E88)
      v12 = off_64E88;
    else
      v12 = (const char *)&unk_416A6;
    strncpy(__dst, v12, 0x20uLL);
    if ((dword_64E94 & 0x4000000) != 0)
    {
      v13 = dword_64E94 & 0x8E000000 | 0xFF;
      LOWORD(v14) = (unsigned __int16)dword_64E94 >> 12;
    }
    else
    {
      v13 = dword_64E94 & 0x8E0000FF;
      v14 = (dword_64E94 >> 8) & 0xF;
      if (!v14)
        goto LABEL_43;
    }
    v13 |= 256 << (v14 - 1);
LABEL_43:
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(772079621, qword_64E80, v13, 0, 0);
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(772079622, *(_QWORD *)__dst, *(_QWORD *)&__dst[8], v20, *((_QWORD *)&v20 + 1));
  }
  return _dispatch_introspection_queue_create(&_dispatch_mgr_q);
}

void _dispatch_introspection_thread_remove(uint64_t a1)
{
  unint64_t StatusReg;
  unsigned int v3;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(&dword_61288))
  {
    if (!__stxr(v3, &dword_61288))
      goto LABEL_6;
  }
  __clrex();
  _dispatch_unfair_lock_lock_slow((uint64_t)&dword_61288, 0x10000);
LABEL_6:
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    *(_QWORD *)(v5 + 16) = *(_QWORD *)(a1 + 16);
  **(_QWORD **)(a1 + 16) = v5;
  v6 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    v7 = __ldxr(&dword_61288);
  while (__stlxr(0, &dword_61288));
  if (v7 != v6)
    _dispatch_unfair_lock_unlock_slow((uint64_t)&dword_61288, v7);
  v8 = *(_QWORD *)(StatusReg + 176);
  if (v8)
    v9 = *(_DWORD *)(v8 + 8) + 1;
  else
    v9 = 1;
  if (v9 > _dispatch_continuation_cache_limit)
  {
    _dispatch_continuation_free_to_cache_limit(a1);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v8;
    *(_DWORD *)(a1 + 8) = v9;
    *(_QWORD *)(StatusReg + 176) = a1;
  }
  *(_QWORD *)(StatusReg + 208) = 0;
}

void _dispatch_introspection_thread_add()
{
  unint64_t StatusReg;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (!*(_QWORD *)(StatusReg + 208))
  {
    v1 = *(_QWORD *)StatusReg;
    v2 = *(_QWORD **)(StatusReg + 176);
    if (v2)
      *(_QWORD *)(StatusReg + 176) = v2[2];
    else
      v2 = _dispatch_continuation_alloc_from_heap();
    *v2 = 65;
    v2[3] = v1;
    if (qword_61290)
      v3 = v1 + qword_61290;
    else
      v3 = 0;
    v2[4] = v3;
    *(_QWORD *)(StatusReg + 208) = v2;
    v4 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    while (!__ldaxr(&dword_61288))
    {
      if (!__stxr(v4, &dword_61288))
        goto LABEL_12;
    }
    __clrex();
    _dispatch_unfair_lock_lock_slow((uint64_t)&dword_61288, 0x10000);
LABEL_12:
    v6 = _dispatch_introspection;
    v2[1] = _dispatch_introspection;
    if (v6)
      *(_QWORD *)(v6 + 16) = v2 + 1;
    _dispatch_introspection = (uint64_t)v2;
    v2[2] = &_dispatch_introspection;
    v7 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    do
      v8 = __ldxr(&dword_61288);
    while (__stlxr(0, &dword_61288));
    if (v8 != v7)
      _dispatch_unfair_lock_unlock_slow((uint64_t)&dword_61288, v8);
  }
}

uint64_t dispatch_introspection_queue_get_info@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;

  v2 = *(_QWORD *)(*(_QWORD *)result + 40);
  if (v2 == 18)
  {
    v2 = *(_QWORD *)(result + 56);
    *(_QWORD *)(a2 + 40) = 0;
    v3 = *(_QWORD *)(result + 24);
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v3;
    v4 = *(_QWORD *)(result + 64);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 72);
    *(_QWORD *)(a2 + 24) = v4;
    *(_QWORD *)(a2 + 32) = 1;
    LODWORD(v2) = (v2 >> 53) & 2 | ((v2 & 0x4000000001) != 0);
  }
  else
  {
    v5 = *(_DWORD *)(result + 8);
    v6 = *(_QWORD *)(result + 56);
    v7 = (v6 & 0x4000000001) != 0;
    *(_QWORD *)(a2 + 40) = 0;
    v8 = *(_QWORD *)(result + 24);
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v8;
    v9 = *(_QWORD *)(result + 64);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 72);
    *(_QWORD *)(a2 + 24) = v9;
    LODWORD(v8) = *(_DWORD *)(result + 112) + (v6 >> 58);
    *(_DWORD *)(a2 + 32) = *(unsigned __int16 *)(result + 80);
    *(_DWORD *)(a2 + 36) = v8;
    if (v5 == 0x7FFFFFFF)
      v7 = 0;
    if (((v6 >> 54) & (v5 != 0x7FFFFFFF)) != 0)
      v10 = 2;
    else
      v10 = 0;
    v11 = v10 | v7;
    if (*(_QWORD *)(result + 104) == -1)
    {
      v12 = 4;
    }
    else if (*(_QWORD *)(result + 104))
    {
      v12 = 0;
    }
    else
    {
      v12 = 4 * (*(_QWORD *)(result + 48) != 0);
    }
    LOBYTE(v2) = v12 | (8 * (v5 == 0x7FFFFFFF)) | (16 * (v2 == 394769)) | v11;
  }
  *(_BYTE *)(a2 + 40) = v2;
  return result;
}

int8x16_t dispatch_introspection_queue_item_get_info@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>, int8x16_t result@<Q0>)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  char v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t *v24;
  int8x16_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  const char *ClassName;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;

  v4 = a1;
  result.i16[0] = 0;
  result.i8[2] = 0;
  result.i8[3] = 0;
  result.i8[4] = 0;
  result.i8[5] = 0;
  result.i8[6] = 0;
  result.i8[7] = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v6 = *a1;
  if (*a1 < 0x1000uLL)
    goto LABEL_21;
  v7 = *(_QWORD *)(v6 + 40);
  if (v7 == 256)
  {
    while (1)
    {
      v8 = v4;
      v4 = (_QWORD *)v4[7];
      v6 = *v4;
      if (*v4 <= 0xFFFuLL)
        break;
      v7 = *(_QWORD *)(v6 + 40);
      if (v7 != 256)
      {
        a2 = v8[6];
        goto LABEL_6;
      }
    }
    a2 = v8[6];
    goto LABEL_21;
  }
LABEL_6:
  if (!(_BYTE)v7)
  {
LABEL_21:
    _dispatch_introspection_continuation_get_info(a2, v4, a3);
    return result;
  }
  if (v7 == 531 || v7 == 17)
  {
    *(_QWORD *)a3 = 257;
    v10 = *((_DWORD *)v4 + 2);
    v11 = v4[7];
    v12 = (v11 & 0x4000000001) != 0;
    v13 = v4[3];
    v15 = v4[8];
    v14 = v4[9];
    v16 = *((unsigned __int16 *)v4 + 40);
    v17 = *((_DWORD *)v4 + 28) + (v11 >> 58);
    if (v10 == 0x7FFFFFFF)
      v12 = 0;
    if (((v11 >> 54) & (v10 != 0x7FFFFFFF)) != 0)
      v18 = 2;
    else
      v18 = 0;
    if (v4[13] == -1)
    {
      v19 = 4;
    }
    else if (v4[13])
    {
      v19 = 0;
    }
    else
    {
      v19 = 4 * (v4[6] != 0);
    }
    v26 = *(_QWORD *)(*v4 + 40) == 394769;
    *(_QWORD *)(a3 + 8) = v4;
    *(_QWORD *)(a3 + 16) = v13;
    *(_QWORD *)(a3 + 24) = v14;
    *(_QWORD *)(a3 + 32) = v15;
    *(_DWORD *)(a3 + 40) = v16;
    *(_DWORD *)(a3 + 44) = v17;
    *(_BYTE *)(a3 + 48) = v12 | (8 * (v10 == 0x7FFFFFFF)) | v18 | v19 | (16 * v26);
    *(_DWORD *)(a3 + 49) = 0;
    *(_DWORD *)(a3 + 52) = 0;
  }
  else if (v7 == 18)
  {
    *(_QWORD *)a3 = 257;
    *(_QWORD *)(a3 + 8) = v4;
    v20 = v4[7];
    *(_DWORD *)(a3 + 52) = 0;
    *(_DWORD *)(a3 + 49) = 0;
    v22 = v4[8];
    v21 = v4[9];
    *(_QWORD *)(a3 + 16) = v4[3];
    *(_QWORD *)(a3 + 24) = v21;
    *(_QWORD *)(a3 + 32) = v22;
    result.i64[0] = 1;
    *(_QWORD *)(a3 + 40) = 1;
    *(_BYTE *)(a3 + 48) = (v20 >> 53) & 2 | ((v20 & 0x4000000001) != 0);
  }
  else if (v7 == 787)
  {
    *(_QWORD *)a3 = 66;
    v27 = v4[11];
    v28 = v4[3];
    v29 = *(char *)(v27 + 28);
    v30 = *(unsigned int *)(v27 + 24);
    v31 = (*((_DWORD *)v4 + 28) + (v4[7] >> 58)) | ((unint64_t)((*(unsigned __int8 *)(v27 + 29) >> 5) & 2 | ((v4[7] & 0x4000000001) != 0) | *((_BYTE *)v4 + 116) & 0x10u) << 32);
    *(_QWORD *)(a3 + 8) = v4;
    *(_QWORD *)(a3 + 16) = v28;
    *(_QWORD *)(a3 + 24) = v29;
    *(_QWORD *)(a3 + 32) = v30;
    result = vextq_s8(*(int8x16_t *)(v27 + 40), *(int8x16_t *)(v27 + 40), 8uLL);
    *(int8x16_t *)(a3 + 40) = result;
    *(_QWORD *)(a3 + 56) = v31;
  }
  else if (v7 == 275)
  {
    *(_QWORD *)a3 = 66;
    v23 = v4[11];
    v24 = *(int8x16_t **)(v23 + 40);
    if (v24)
    {
      v25 = v24[2];
      LODWORD(v24) = (v24->u8[0] >> 3) & 2;
    }
    else
    {
      v25 = 0uLL;
    }
    v34 = v4[7];
    v35 = v4[3];
    v36 = *(char *)(v23 + 28);
    v37 = *(unsigned int *)(v23 + 24);
    v38 = *((_DWORD *)v4 + 28) + (v34 >> 58);
    v39 = *(unsigned __int8 *)(v23 + 29);
    if ((v39 & 2) != 0)
      v40 = (*(unsigned __int8 *)(v23 + 30) >> 3) & 8;
    else
      v40 = 0;
    *(_QWORD *)(a3 + 8) = v4;
    *(_QWORD *)(a3 + 16) = v35;
    *(_QWORD *)(a3 + 24) = v36;
    *(_QWORD *)(a3 + 32) = v37;
    result = vextq_s8(v25, v25, 8uLL);
    *(int8x16_t *)(a3 + 40) = result;
    *(_QWORD *)(a3 + 56) = v38 | ((unint64_t)(v24 & 0xFFFFFFFB | ((v34 & 0x4000000001) != 0) | (4 * ((v39 >> 1) & 1)) | v40) << 32);
  }
  else
  {
    *(_QWORD *)a3 = 256;
    v32 = v4[3];
    ClassName = object_getClassName(v4);
    *(_QWORD *)(a3 + 8) = v4;
    *(_QWORD *)(a3 + 16) = v32;
    *(_QWORD *)(a3 + 24) = v6;
    *(_QWORD *)(a3 + 32) = ClassName + 12;
  }
  return result;
}

uint64_t _dispatch_introspection_continuation_get_info(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  void (*v16)(char *);
  uint64_t *v17;
  BOOL v18;
  int v19;
  unint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v4 = (uint64_t)a2;
  v5 = result;
  v6 = *a2;
  if ((unint64_t)*a2 >= 0x1000)
  {
    while (1)
    {
      *((_QWORD *)&v8 + 1) = *(_QWORD *)(v6 + 40);
      *(_QWORD *)&v8 = *((_QWORD *)&v8 + 1) - 256;
      v7 = v8 >> 8;
      if ((unint64_t)(v7 - 5) >= 3)
      {
        switch(v7)
        {
          case 0:
            _dispatch_introspection_continuation_get_info_cold_3();
          case 1:
          case 4:
            LOBYTE(v6) = 0;
            LOBYTE(v15) = 0;
            result = 0;
            v16 = *(void (**)(char *))(v4 + 32);
            v17 = *(uint64_t **)(v4 + 40);
            goto LABEL_36;
          case 2:
          case 3:
            LOBYTE(v15) = 0;
            result = 0;
            v16 = *(void (**)(char *))(v4 + 32);
            v17 = *(uint64_t **)(v4 + 40);
            v6 = *(_QWORD *)(v4 + 48);
            v5 = *(_QWORD *)(v5 + 24);
            if ((v6 & 0x20) != 0)
              goto LABEL_41;
            goto LABEL_35;
          case 8:
            LOBYTE(v15) = 0;
            result = 0;
            v16 = *(void (**)(char *))(v4 + 32);
            v17 = *(uint64_t **)(v4 + 40);
            v6 = *(_QWORD *)(v4 + 48);
            if ((v6 & 0x20) != 0)
              goto LABEL_41;
            goto LABEL_35;
          default:
            _dispatch_introspection_continuation_get_info_cold_1(v6);
        }
      }
      v4 = *(_QWORD *)(v4 + 48);
      v6 = *(_QWORD *)v4;
      if (*(_QWORD *)v4 < 0x1000uLL)
        break;
      if (*(_BYTE *)(v6 + 40))
      {
        *(_QWORD *)a3 = 257;
        if (*(_QWORD *)(v6 + 40) == 18)
        {
          v9 = 0;
          v10 = *(_QWORD *)(v4 + 24);
          v12 = *(_QWORD *)(v4 + 64);
          v11 = *(_QWORD *)(v4 + 72);
          v13 = (*(_QWORD *)(v4 + 56) >> 53) & 2 | ((*(_QWORD *)(v4 + 56) & 0x4000000001) != 0);
          v14 = 1;
        }
        else
        {
          v19 = *(_DWORD *)(v4 + 8);
          v20 = *(_QWORD *)(v4 + 56);
          v10 = *(_QWORD *)(v4 + 24);
          v12 = *(_QWORD *)(v4 + 64);
          v11 = *(_QWORD *)(v4 + 72);
          v14 = *(unsigned __int16 *)(v4 + 80);
          v9 = *(_DWORD *)(v4 + 112) + (v20 >> 58);
          v21 = v19 != 0x7FFFFFFF && (v20 & 0x4000000001) != 0;
          v18 = ((v20 >> 54) & (v19 != 0x7FFFFFFF)) == 0;
          v22 = 2;
          if (v18)
            v22 = 0;
          if (*(_QWORD *)(v4 + 104) == -1)
          {
            result = 4;
          }
          else if (*(_QWORD *)(v4 + 104))
          {
            result = 0;
          }
          else
          {
            result = 4 * (*(_QWORD *)(v4 + 48) != 0);
          }
          v13 = (16 * (*(_QWORD *)(v6 + 40) == 394769)) | (8 * (v19 == 0x7FFFFFFF)) | v21 | v22 | result;
        }
        *(_QWORD *)(a3 + 8) = v4;
        *(_QWORD *)(a3 + 16) = v10;
        *(_QWORD *)(a3 + 24) = v11;
        *(_QWORD *)(a3 + 32) = v12;
        *(_DWORD *)(a3 + 40) = v14;
        *(_DWORD *)(a3 + 44) = v9;
        *(_QWORD *)(a3 + 48) = v13;
        return result;
      }
    }
  }
  if ((v6 & 0x81) != 0)
  {
    result = (uint64_t)pthread_from_mach_thread_np(*(_DWORD *)(v4 + 100));
    LOBYTE(v15) = 0;
    v16 = *(void (**)(char *))(v4 + 64);
    v17 = *(uint64_t **)(v4 + 72);
    if ((v6 & 0x20) != 0)
      goto LABEL_41;
LABEL_35:
    if ((v6 & 0x10) != 0)
    {
      *(_QWORD *)a3 = 17;
      v16 = (void (*)(char *))v17[2];
      if ((v6 & 2) != 0)
        goto LABEL_39;
    }
    else
    {
LABEL_36:
      *(_QWORD *)a3 = 18;
      if ((v6 & 2) != 0)
        goto LABEL_39;
    }
LABEL_43:
    v23 = *(unsigned __int16 *)(v5 + 80) == 1;
    goto LABEL_44;
  }
  v17 = *(uint64_t **)(v4 + 40);
  if ((v6 & 0x400) != 0)
  {
    LOBYTE(v15) = 0;
    result = 0;
    v16 = *(void (**)(char *))(*(_QWORD *)(v5 + 88) + 16);
    if ((v6 & 0x20) == 0)
      goto LABEL_35;
  }
  else
  {
    v16 = *(void (**)(char *))(v4 + 32);
    v18 = v16 == _dispatch_apply_invoke || v16 == _dispatch_apply_redirect_invoke;
    if (!v18)
    {
      LOBYTE(v15) = 0;
      goto LABEL_34;
    }
    v15 = v17[2];
    if (!v15)
    {
LABEL_34:
      result = 0;
      if ((v6 & 0x20) != 0)
        goto LABEL_41;
      goto LABEL_35;
    }
    result = 0;
    v4 = *v17;
    v5 = *(_QWORD *)(*v17 + 56);
    v16 = *(void (**)(char *))(*v17 + 32);
    v17 = *(uint64_t **)(*v17 + 40);
    LOBYTE(v15) = 4;
    if ((v6 & 0x20) == 0)
      goto LABEL_35;
  }
LABEL_41:
  if (v17[4] != 3512316172)
    _dispatch_continuation_get_function_symbol_cold_1(v17[4]);
  *(_QWORD *)a3 = 17;
  v16 = *(void (**)(char *))(v17[9] + 16);
  if ((v6 & 2) == 0)
    goto LABEL_43;
LABEL_39:
  v23 = 1;
LABEL_44:
  *(_QWORD *)(a3 + 8) = v4;
  *(_QWORD *)(a3 + 16) = v5;
  *(_QWORD *)(a3 + 24) = v17;
  *(_QWORD *)(a3 + 32) = v16;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = result;
  *(_BYTE *)(a3 + 56) = v15 | (2 * ((v6 & 0x81) != 0)) | v23;
  if ((v6 & 8) != 0)
  {
    v24 = *(_QWORD *)(v4 + 48);
    if (*(_QWORD *)(*(_QWORD *)v24 + 40) == 514)
      *(_QWORD *)(a3 + 40) = v24;
  }
  return result;
}

uint64_t dispatch_introspection_get_queues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v3 = (uint64_t *)(a1 + 40);
  if (!a1)
    v3 = &qword_61280;
  v4 = (_QWORD *)*v3;
  if (!a2)
    return *v4;
  v5 = a3 + 24;
  while (v4)
  {
    v6 = *v4;
    if (*(_QWORD *)(*(_QWORD *)*v4 + 40) == 18)
    {
      v7 = 0;
      v8 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(v6 + 64);
      v9 = *(_QWORD *)(v6 + 72);
      v11 = (*(_QWORD *)(v6 + 56) >> 53) & 2 | ((*(_QWORD *)(v6 + 56) & 0x4000000001) != 0);
      v12 = 1;
    }
    else
    {
      v13 = *(_DWORD *)(v6 + 8);
      v14 = *(_QWORD *)(v6 + 56);
      v8 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(v6 + 64);
      v9 = *(_QWORD *)(v6 + 72);
      v12 = *(unsigned __int16 *)(v6 + 80);
      v15 = v13 != 0x7FFFFFFF && (v14 & 0x4000000001) != 0;
      if (((v14 >> 54) & (v13 != 0x7FFFFFFF)) != 0)
        v16 = 2;
      else
        v16 = 0;
      if (*(_QWORD *)(v6 + 104) == -1)
      {
        v17 = 4;
      }
      else if (*(_QWORD *)(v6 + 104))
      {
        v17 = 0;
      }
      else
      {
        v17 = 4 * (*(_QWORD *)(v6 + 48) != 0);
      }
      v7 = *(_DWORD *)(v6 + 112) + (v14 >> 58);
      v11 = (16 * (*(_QWORD *)(*(_QWORD *)*v4 + 40) == 394769)) | (8 * (v13 == 0x7FFFFFFF)) | v15 | v16 | v17;
    }
    *(_QWORD *)(v5 - 24) = v6;
    *(_QWORD *)(v5 - 16) = v8;
    *(_QWORD *)(v5 - 8) = v9;
    *(_QWORD *)v5 = v10;
    *(_DWORD *)(v5 + 8) = v12;
    *(_DWORD *)(v5 + 12) = v7;
    *(_QWORD *)(v5 + 16) = v11;
    v5 += 48;
    v4 = (_QWORD *)v4[2];
    if (!--a2)
      return *v4;
  }
  result = 0;
  *(_QWORD *)(v5 - 24) = 0;
  return result;
}

_QWORD *dispatch_introspection_get_queue_threads(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;

  if (!result)
    result = (_QWORD *)_dispatch_introspection;
  if (a2)
  {
    v3 = a3 + 32;
    while (result)
    {
      v4 = result[3];
      v5 = (uint64_t *)result[4];
      if (v5 && (v5 = (uint64_t *)*v5) != 0)
      {
        if (*(_QWORD *)(*v5 + 40) == 18)
        {
          v6 = 0;
          v7 = v5[3];
          v9 = v5[8];
          v8 = v5[9];
          v10 = ((unint64_t)v5[7] >> 53) & 2 | ((v5[7] & 0x4000000001) != 0);
          v11 = 1;
        }
        else
        {
          v12 = *((_DWORD *)v5 + 2);
          v13 = v5[7];
          v7 = v5[3];
          v9 = v5[8];
          v8 = v5[9];
          v11 = *((unsigned __int16 *)v5 + 40);
          v14 = v12 != 0x7FFFFFFF && (v13 & 0x4000000001) != 0;
          if (((v13 >> 54) & (v12 != 0x7FFFFFFF)) != 0)
            v15 = 2;
          else
            v15 = 0;
          if (v5[13] == -1)
          {
            v16 = 4;
          }
          else if (v5[13])
          {
            v16 = 0;
          }
          else
          {
            v16 = 4 * (v5[6] != 0);
          }
          v6 = *((_DWORD *)v5 + 28) + (v13 >> 58);
          v10 = (16 * (*(_QWORD *)(*v5 + 40) == 394769)) | (8 * (v12 == 0x7FFFFFFF)) | v14 | v15 | v16;
        }
      }
      else
      {
        v8 = 0;
        v9 = 0;
        v11 = 0;
        v6 = 0;
        v10 = 0;
        v7 = 0;
      }
      *(_QWORD *)(v3 - 32) = result;
      *(_QWORD *)(v3 - 24) = v4;
      *(_QWORD *)(v3 - 16) = v5;
      *(_QWORD *)(v3 - 8) = v7;
      *(_QWORD *)v3 = v8;
      *(_QWORD *)(v3 + 8) = v9;
      *(_DWORD *)(v3 + 16) = v11;
      *(_DWORD *)(v3 + 20) = v6;
      *(_QWORD *)(v3 + 24) = v10;
      v3 += 64;
      result = (_QWORD *)result[1];
      if (!--a2)
        return result;
    }
    *(_QWORD *)(v3 - 32) = 0;
  }
  return result;
}

_QWORD *dispatch_introspection_queue_get_items(_QWORD *a1, _QWORD *a2, uint64_t a3, _OWORD *a4, int8x16_t a5)
{
  uint64_t v6;
  _QWORD *v7;
  __int128 v9;
  __int128 v10;
  _OWORD v12[2];
  int8x16_t v13;
  __int128 v14;

  if (*(_BYTE *)(*a1 + 40) != 17)
    return 0;
  v6 = a3;
  v7 = a2;
  if (a2)
    goto LABEL_5;
  if (a1[13] != -1)
  {
    v7 = (_QWORD *)a1[13];
LABEL_5:
    if (a3)
      goto LABEL_6;
    return v7;
  }
  v7 = 0;
  if (a3)
  {
LABEL_6:
    while (v7)
    {
      --v6;
      dispatch_introspection_queue_item_get_info(v7, (uint64_t)a1, (uint64_t)v12, a5);
      v9 = v12[1];
      *a4 = v12[0];
      a4[1] = v9;
      a5 = v13;
      v10 = v14;
      a4[2] = v13;
      a4[3] = v10;
      v7 = (_QWORD *)v7[2];
      a4 += 4;
      if (!v6)
        return v7;
    }
    *(_QWORD *)a4 = 0;
  }
  return v7;
}

NSObject *_dispatch_introspection_queue_fake_sync_push_pop(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t StatusReg;
  objc_class *v6;
  int8x16_t v7;
  NSObject v9[3];
  __int128 v10;
  __int128 v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;

  v19 = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = *(objc_class **)(StatusReg + 32);
  v9[0].isa = (Class)(a4 | 1);
  v9[1].isa = v6;
  v9[2].isa = 0;
  v11 = 0u;
  v10 = 0u;
  v12 = a1;
  v13 = a3;
  v17 = 0;
  v14 = a2;
  v15 = 0;
  v16 = 0;
  v18 = *(_QWORD *)(StatusReg + 24);
  if (MEMORY[0xFFFFFC100])
    _dispatch_trace_item_push_internal(a1, v9, (int8x16_t)0);
  _dispatch_introspection_queue_item_enqueue(a1, v9);
  if (MEMORY[0xFFFFFC100])
    _dispatch_trace_item_pop_internal(a1, v9, v7);
  _dispatch_introspection_queue_item_dequeue(a1, v9);
  return v9;
}

__n128 dispatch_introspection_hooks_install(__int128 *a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  int64x2_t v5;
  int32x2_t v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v1 = 0;
  v11 = xmmword_612C0;
  v12 = xmmword_612D0;
  v13 = xmmword_612E0;
  v9 = _dispatch_introspection_hooks[0];
  v10 = xmmword_612B0;
  _dispatch_introspection_hooks[0] = *a1;
  v2 = a1[4];
  v4 = a1[1];
  v3 = a1[2];
  xmmword_612D0 = a1[3];
  xmmword_612E0 = v2;
  xmmword_612B0 = v4;
  xmmword_612C0 = v3;
  v5.i64[0] = -1;
  v5.i64[1] = -1;
  do
  {
    v6 = vmovn_s64((int64x2_t)vbicq_s8((int8x16_t)vceqzq_s64((int64x2_t)_dispatch_introspection_hooks[v1]), (int8x16_t)vceqzq_s64((int64x2_t)_dispatch_introspection_hook_callouts[v1])));
    if ((v6.i8[0] & 1) != 0)
      *(_QWORD *)&_dispatch_introspection_hooks[v1] = -1;
    if ((v6.i8[4] & 1) != 0)
      *((_QWORD *)&_dispatch_introspection_hooks[v1] + 1) = -1;
    *(__int128 *)((char *)&v9 + v1 * 16) = (__int128)vbicq_s8(*(int8x16_t *)((char *)&v9 + v1 * 16), (int8x16_t)vceqq_s64(*(int64x2_t *)((char *)&v9 + v1 * 16), v5));
    ++v1;
  }
  while (v1 != 3);
  v7 = v12;
  a1[2] = v11;
  a1[3] = v7;
  a1[4] = v13;
  result = (__n128)v10;
  *a1 = v9;
  a1[1] = (__int128)result;
  return result;
}

__int128 *dispatch_introspection_hook_callouts_enable(__int128 *result)
{
  uint64_t v1;
  __int128 *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v1 = 0;
  if (result)
    v2 = result;
  else
    v2 = (__int128 *)&_dispatch_introspection_hook_callouts_enabled;
  _dispatch_introspection_hook_callouts[0] = *v2;
  v3 = v2[1];
  v4 = v2[2];
  v5 = v2[4];
  xmmword_61320 = v2[3];
  unk_61330 = v5;
  xmmword_61300 = v3;
  unk_61310 = v4;
  do
  {
    v6 = *(_QWORD *)((char *)_dispatch_introspection_hooks + v1);
    if (*(_QWORD *)((char *)_dispatch_introspection_hook_callouts + v1))
    {
      if (v6)
        goto LABEL_11;
      v7 = -1;
    }
    else
    {
      if (v6 != -1)
        goto LABEL_11;
      v7 = 0;
    }
    *(_QWORD *)((char *)_dispatch_introspection_hooks + v1) = v7;
LABEL_11:
    v1 += 8;
  }
  while (v1 != 48);
  return result;
}

uint64_t dispatch_introspection_hook_callout_queue_create()
{
  uint64_t result;

  if (_dispatch_introspection_hooks != (uint64_t (*)(void))-1)
    return _dispatch_introspection_hooks();
  return result;
}

uint64_t _dispatch_object_finalizer(_QWORD *a1)
{
  uint64_t v1;

  if (*(unsigned __int8 *)(*a1 + 40) - 17 > 1)
    v1 = (uint64_t)(a1 + 5);
  else
    v1 = a1[5] + 8;
  return *(_QWORD *)v1;
}

_QWORD *_dispatch_object_set_finalizer(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  if (*(unsigned __int8 *)(*result + 40) - 17 > 1)
    v2 = result + 5;
  else
    v2 = (_QWORD *)(result[5] + 8);
  *v2 = a2;
  return result;
}

NSObject *_dispatch_introspection_queue_create(NSObject *a1)
{
  size_t v2;
  objc_class *v3;
  uint64_t v4;
  unint64_t StatusReg;
  unsigned int v6;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  if (byte_61298)
    v2 = 56;
  else
    v2 = 32;
  v3 = (objc_class *)_dispatch_calloc(1uLL, v2);
  v4 = (uint64_t)v3;
  *(_QWORD *)v3 = a1;
  if (byte_61298)
  {
    *((_QWORD *)v3 + 5) = 0;
    *((_QWORD *)v3 + 6) = 0;
  }
  a1[5].isa = v3;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(&dword_6128C))
  {
    if (!__stxr(v6, &dword_6128C))
      goto LABEL_11;
  }
  __clrex();
  _dispatch_unfair_lock_lock_slow((uint64_t)&dword_6128C, 0x10000);
LABEL_11:
  v8 = qword_61280;
  *(_QWORD *)(v4 + 16) = qword_61280;
  if (v8)
    *(_QWORD *)(v8 + 24) = v4 + 16;
  qword_61280 = v4;
  *(_QWORD *)(v4 + 24) = &qword_61280;
  v9 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    v10 = __ldxr(&dword_6128C);
  while (__stlxr(0, &dword_6128C));
  if (v10 != v9)
    _dispatch_unfair_lock_unlock_slow((uint64_t)&dword_6128C, v10);
  j__dispatch_introspection_hook_queue_create(a1);
  if (_dispatch_introspection_hooks)
    _dispatch_introspection_queue_create_hook();
  return a1;
}

uint64_t _dispatch_introspection_queue_create_hook()
{
  return dispatch_introspection_hook_callout_queue_create();
}

uint64_t dispatch_introspection_hook_callout_queue_dispose()
{
  uint64_t result;

  if (*(&_dispatch_introspection_hooks + 1) != (uint64_t (*)(void))-1)
    return (*(&_dispatch_introspection_hooks + 1))();
  return result;
}

void _dispatch_introspection_queue_dispose(NSObject *a1)
{
  _QWORD *isa;
  unint64_t StatusReg;
  unsigned int v4;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  isa = a1[5].isa;
  j__dispatch_introspection_hook_queue_destroy(a1);
  if (*(&_dispatch_introspection_hooks + 1))
    _dispatch_introspection_queue_dispose_hook();
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v4 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(&dword_6128C))
  {
    if (!__stxr(v4, &dword_6128C))
      goto LABEL_8;
  }
  __clrex();
  _dispatch_unfair_lock_lock_slow((uint64_t)&dword_6128C, 0x10000);
LABEL_8:
  v6 = isa[2];
  if (v6)
    *(_QWORD *)(v6 + 24) = isa[3];
  *(_QWORD *)isa[3] = v6;
  if (byte_61298)
    _dispatch_introspection_queue_order_dispose((uint64_t)isa);
  v7 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    v8 = __ldxr(&dword_6128C);
  while (__stlxr(0, &dword_6128C));
  if (v8 != v7)
    _dispatch_unfair_lock_unlock_slow((uint64_t)&dword_6128C, v8);
  a1[5].isa = (Class)isa[1];
  free(isa);
}

uint64_t _dispatch_introspection_queue_dispose_hook()
{
  return dispatch_introspection_hook_callout_queue_dispose();
}

void _dispatch_introspection_queue_order_dispose(uint64_t a1)
{
  unsigned int *v2;
  unint64_t StatusReg;
  unsigned int v4;
  _QWORD *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t *v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  void *v31;

  v31 = 0;
  v2 = (unsigned int *)(a1 + 32);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v4 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v2))
  {
    if (!__stxr(v4, v2))
      goto LABEL_6;
  }
  __clrex();
  _dispatch_unfair_lock_lock_slow(a1 + 32, 0x10000);
LABEL_6:
  v31 = *(void **)(a1 + 40);
  v6 = v31;
  *(_QWORD *)(a1 + 40) = 0;
  if (v6)
    v6[1] = &v31;
  v7 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    v8 = __ldxr(v2);
  while (__stlxr(0, v2));
  if (v8 != v7)
    _dispatch_unfair_lock_unlock_slow((uint64_t)v2, v8);
  v9 = v31;
  if (v31)
  {
    do
    {
      v10 = v9;
      v9 = (_QWORD *)*v9;
      v11 = (unsigned int *)(*(_QWORD *)(v10[7] + 40) + 36);
      v12 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
      while (!__ldaxr(v11))
      {
        if (!__stxr(v12, v11))
          goto LABEL_18;
      }
      __clrex();
      _dispatch_unfair_lock_lock_slow((uint64_t)v11, 0x10000);
LABEL_18:
      v14 = v10[2];
      if (v14)
        *(_QWORD *)(v14 + 24) = v10[3];
      *(_QWORD *)v10[3] = v14;
      v15 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
      do
        v16 = __ldxr(v11);
      while (__stlxr(0, v11));
      if (v16 != v15)
        _dispatch_unfair_lock_unlock_slow((uint64_t)v11, v16);
      free(v10);
    }
    while (v9);
  }
  v17 = (unsigned int *)(a1 + 36);
  v18 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v17))
  {
    if (!__stxr(v18, v17))
      goto LABEL_30;
  }
  __clrex();
  _dispatch_unfair_lock_lock_slow(a1 + 36, 0x10000);
LABEL_30:
  v31 = *(void **)(a1 + 48);
  v20 = v31;
  *(_QWORD *)(a1 + 48) = 0;
  if (v20)
    v20[1] = &v31;
  v21 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    v22 = __ldxr(v17);
  while (__stlxr(0, v17));
  if (v22 != v21)
    _dispatch_unfair_lock_unlock_slow(a1 + 36, v22);
  v23 = (uint64_t *)v31;
  if (v31)
  {
    do
    {
      v24 = v23;
      v23 = (uint64_t *)v23[2];
      v25 = (unsigned int *)(*(_QWORD *)(v24[6] + 40) + 32);
      v26 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
      while (!__ldaxr(v25))
      {
        if (!__stxr(v26, v25))
          goto LABEL_42;
      }
      __clrex();
      _dispatch_unfair_lock_lock_slow((uint64_t)v25, 0x10000);
LABEL_42:
      v28 = *v24;
      if (*v24)
        *(_QWORD *)(v28 + 8) = v24[1];
      *(_QWORD *)v24[1] = v28;
      v29 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
      do
        v30 = __ldxr(v25);
      while (__stlxr(0, v25));
      if (v30 != v29)
        _dispatch_unfair_lock_unlock_slow((uint64_t)v25, v30);
      free(v24);
    }
    while (v23);
  }
}

uint64_t dispatch_introspection_hook_callout_queue_item_enqueue()
{
  uint64_t result;

  if (xmmword_612B0 != (uint64_t (*)(void))-1)
    return xmmword_612B0();
  return result;
}

void _dispatch_introspection_queue_item_enqueue(NSObject *a1, NSObject *a2)
{
  j__dispatch_introspection_hook_queue_item_enqueue(a1, a2);
  if (xmmword_612B0)
    _dispatch_introspection_queue_item_enqueue_hook((uint64_t)a1, a2);
}

uint64_t _dispatch_introspection_queue_item_enqueue_hook(uint64_t a1, _QWORD *a2)
{
  _OWORD v3[4];

  memset(v3, 0, sizeof(v3));
  dispatch_introspection_queue_item_get_info(a2, a1, (uint64_t)v3, (int8x16_t)0);
  return dispatch_introspection_hook_callout_queue_item_enqueue();
}

void _dispatch_trace_item_push_internal(_QWORD *a1, _QWORD *a2, int8x16_t a3)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v17[7];
  char v18;

  if (*(_BYTE *)(*a1 + 40) == 17)
  {
    if (*a2 < 0x1000uLL
      || (!*(_QWORD *)(*a2 + 40) ? (v5 = *(_QWORD *)(*a2 + 40) == 0) : (v5 = 1), v5))
    {
      dispatch_introspection_queue_item_get_info(a2, (uint64_t)a1, (uint64_t)v17, a3);
      v6 = v17[3];
      switch(v17[0])
      {
        case 0x42:
          v12 = v17[6];
          v11 = a1[8];
          if (!MEMORY[0xFFFFFC100])
            return;
          v13 = 772079648;
          break;
        case 0x12:
          v14 = a1[8];
          v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
          if (!MEMORY[0xFFFFFC100])
            return;
          v11 = a2[1] | (v15 << 32);
          v12 = v18 & 7 | (unint64_t)(v14 << 32);
          v13 = 772079644;
          goto LABEL_18;
        case 0x11:
          v7 = v18 & 7;
          v8 = a1[8];
          v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
          v10 = a2[1];
          if ((*a2 & 0x20) == 0)
          {
            if (!MEMORY[0xFFFFFC100])
              return;
            v11 = v10 | (v9 << 32);
            v12 = v7 | (v8 << 32);
            v13 = 772079640;
LABEL_18:
            v16 = a2;
            v6 = v17[4];
LABEL_23:
            kdebug_trace(v13, v16, v6, v12, v11);
            return;
          }
          if (!MEMORY[0xFFFFFC100])
            return;
          v11 = v10 | (v9 << 32);
          v12 = v7 | (v8 << 32);
          v13 = 772079636;
          break;
        default:
          return;
      }
      v16 = a2;
      goto LABEL_23;
    }
  }
}

uint64_t dispatch_introspection_hook_callout_queue_item_dequeue()
{
  uint64_t result;

  if (*(&xmmword_612B0 + 1) != (uint64_t (*)(void))-1)
    return (*(&xmmword_612B0 + 1))();
  return result;
}

void _dispatch_introspection_queue_item_dequeue(NSObject *a1, NSObject *a2)
{
  j__dispatch_introspection_hook_queue_item_dequeue(a1, a2);
  if (*(&xmmword_612B0 + 1))
    _dispatch_introspection_queue_item_dequeue_hook((uint64_t)a1, a2);
}

uint64_t _dispatch_introspection_queue_item_dequeue_hook(uint64_t a1, _QWORD *a2)
{
  _OWORD v3[4];

  memset(v3, 0, sizeof(v3));
  dispatch_introspection_queue_item_get_info(a2, a1, (uint64_t)v3, (int8x16_t)0);
  return dispatch_introspection_hook_callout_queue_item_dequeue();
}

void _dispatch_trace_item_pop_internal(_QWORD *a1, _QWORD *a2, int8x16_t a3)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v10[8];

  if (*(_BYTE *)(*a1 + 40) == 17)
  {
    if (*a2 < 0x1000uLL
      || (!*(_QWORD *)(*a2 + 40) ? (v5 = *(_QWORD *)(*a2 + 40) == 0) : (v5 = 1), v5))
    {
      dispatch_introspection_queue_item_get_info(a2, (uint64_t)a1, (uint64_t)v10, a3);
      if ((unint64_t)(v10[0] - 17) >= 2)
      {
        if (v10[0] != 66)
          return;
        v6 = a1[8];
        if (!MEMORY[0xFFFFFC100])
          return;
        v8 = 772079656;
        v9 = a2;
        v7 = 0;
      }
      else
      {
        v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
        v7 = a1[8];
        if (!MEMORY[0xFFFFFC100])
          return;
        v8 = 772079652;
        v9 = a2;
      }
      kdebug_trace(v8, v9, v6, v7, 0);
    }
  }
}

uint64_t dispatch_introspection_hook_callout_queue_item_complete()
{
  uint64_t result;

  if (xmmword_612C0 != (uint64_t (*)(void))-1)
    return xmmword_612C0();
  return result;
}

void _dispatch_introspection_queue_item_complete(NSObject *a1)
{
  j__dispatch_introspection_hook_queue_item_complete(a1);
  if (xmmword_612C0)
    _dispatch_introspection_queue_item_complete_hook(a1);
}

void _dispatch_introspection_callout_entry(void *context, dispatch_function_t function)
{
  j__dispatch_introspection_hook_queue_callout_begin(*(dispatch_queue_t *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160), context, function);
}

void _dispatch_trace_source_callout_entry_internal(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int8x16_t a5)
{
  if (*(_BYTE *)(*a3 + 40) == 17)
  {
    if (MEMORY[0xFFFFFC100])
      kdebug_trace(772079664, a1, a4, a2, 0);
    _dispatch_trace_item_push_internal(a3, a4, a5);
  }
}

void _dispatch_introspection_callout_return(void *context, dispatch_function_t function)
{
  j__dispatch_introspection_hook_queue_callout_end(*(dispatch_queue_t *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160), context, function);
}

uint64_t _dispatch_introspection_runtime_event()
{
  uint64_t result;

  if ((unint64_t)*(&xmmword_612C0 + 1) + 1 >= 2)
    return (*(&xmmword_612C0 + 1))();
  return result;
}

void _dispatch_introspection_order_record(uint64_t a1)
{
  unint64_t StatusReg;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  _QWORD *v15;
  _QWORD *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  int v23;
  size_t v24;
  _QWORD *v25;
  char *v26;
  const char *v27;
  void *v28;
  char *v29;
  const char *v30;
  unsigned int v31;
  _QWORD *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v42;
  _QWORD *v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  _QWORD *v47;
  uint64_t v48;
  void *v49[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v2 = *(_QWORD *)(StatusReg + 160);
  if (v2)
  {
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    *(_OWORD *)v49 = 0u;
    v50 = 0u;
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      v5 = *(_QWORD *)(a1 + 24);
      if (v5)
      {
        v6 = a1;
        do
        {
          v7 = v6;
          v6 = v5;
          v5 = *(_QWORD *)(v5 + 24);
        }
        while (v5);
        v8 = v2;
        do
        {
          v9 = v8;
          v8 = v3;
          v3 = *(_QWORD *)(v3 + 24);
        }
        while (v3);
        v10 = *(_QWORD *)(v7 + 40);
        v11 = *(_QWORD *)(v9 + 40);
        v12 = (unsigned int *)(v10 + 32);
        v13 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        while (!__ldaxr(v12))
        {
          if (!__stxr(v13, v12))
            goto LABEL_13;
        }
        __clrex();
        _dispatch_unfair_lock_lock_slow(v10 + 32, 0x10000);
LABEL_13:
        v15 = (_QWORD *)(v10 + 40);
        v16 = v15;
        while (1)
        {
          v16 = (_QWORD *)*v16;
          if (!v16)
            break;
          if (v16[7] == v9)
          {
            v17 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
            do
              v18 = __ldxr(v12);
            while (__stlxr(0, v12));
            if (v18 != v17)
              _dispatch_unfair_lock_unlock_slow((uint64_t)v12, v18);
            return;
          }
        }
        v19 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        do
          v20 = __ldxr(v12);
        while (__stlxr(0, v12));
        if (v20 != v19)
          _dispatch_unfair_lock_unlock_slow((uint64_t)v12, v20);
        v47 = v15;
        _dispatch_introspection_order_check(0, a1, v7, v2, v9);
        v48 = v11;
        if (backtrace(v49, 128) < 2)
          v21 = 0;
        else
          v21 = backtrace(v49, 128) - 1;
        v22 = 8 * v21;
        v23 = *(_DWORD *)(a1 + 80);
        if ((v23 & 0x200000) != 0)
          v24 = v22 + strlen(*(const char **)(a1 + 72)) + 73;
        else
          v24 = v22 + 72;
        v46 = *(_DWORD *)(v2 + 80);
        if ((v46 & 0x200000) != 0)
          v24 += strlen(*(const char **)(v2 + 72)) + 1;
        v25 = _dispatch_calloc(1uLL, v24);
        v25[6] = v7;
        v25[7] = v9;
        *((_DWORD *)v25 + 16) = v21;
        memcpy(v25 + 9, &v49[1], 8 * v21);
        v26 = (char *)&v25[v21 + 9];
        v27 = *(const char **)(a1 + 72);
        if ((v23 & 0x200000) != 0)
        {
          v29 = strcpy(v26, v27);
          v25[4] = v26;
          v26 += strlen(v29) + 1;
        }
        else
        {
          if (v27)
            v28 = *(void **)(a1 + 72);
          else
            v28 = &unk_416A6;
          v25[4] = v28;
        }
        v30 = *(const char **)(v2 + 72);
        if ((v46 & 0x200000) != 0)
        {
          strcpy(v26, v30);
        }
        else if (v30)
        {
          v26 = *(char **)(v2 + 72);
        }
        else
        {
          v26 = (char *)&unk_416A6;
        }
        v25[5] = v26;
        v31 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        while (!__ldaxr(v12))
        {
          if (!__stxr(v31, v12))
            goto LABEL_48;
        }
        __clrex();
        _dispatch_unfair_lock_lock_slow((uint64_t)v12, 0x10000);
LABEL_48:
        v33 = v47;
        while (1)
        {
          v33 = (_QWORD *)*v33;
          if (!v33)
            break;
          if (v33[7] == v9)
          {
            v34 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
            do
              v35 = __ldxr(v12);
            while (__stlxr(0, v12));
            if (v35 != v34)
              _dispatch_unfair_lock_unlock_slow((uint64_t)v12, v35);
            free(v25);
            return;
          }
        }
        v36 = *v47;
        *v25 = *v47;
        if (v36)
          *(_QWORD *)(v36 + 8) = v25;
        *v47 = v25;
        v25[1] = v47;
        v37 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        do
          v38 = __ldxr(v12);
        while (__stlxr(0, v12));
        if (v38 != v37)
          _dispatch_unfair_lock_unlock_slow((uint64_t)v12, v38);
        v39 = (unsigned int *)(v48 + 36);
        v40 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        while (!__ldaxr(v39))
        {
          if (!__stxr(v40, v39))
            goto LABEL_67;
        }
        __clrex();
        _dispatch_unfair_lock_lock_slow(v48 + 36, 0x10000);
LABEL_67:
        v43 = (_QWORD *)(v48 + 48);
        v42 = *(_QWORD *)(v48 + 48);
        v25[2] = v42;
        if (v42)
          *(_QWORD *)(v42 + 24) = v25 + 2;
        *v43 = v25;
        v25[3] = v43;
        v44 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        do
          v45 = __ldxr(v39);
        while (__stlxr(0, v39));
        if (v45 != v44)
          _dispatch_unfair_lock_unlock_slow((uint64_t)v39, v45);
      }
    }
  }
}

uint64_t _dispatch_introspection_order_check(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  unsigned int *v9;
  unint64_t StatusReg;
  unsigned int v11;
  _QWORD *i;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;

  v16 = result;
  v17 = 0;
  v8 = *(_QWORD *)(a5 + 40);
  v9 = (unsigned int *)(v8 + 32);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v11 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v9))
  {
    if (!__stxr(v11, v9))
      goto LABEL_6;
  }
  __clrex();
  result = _dispatch_unfair_lock_lock_slow(v8 + 32, 0x10000);
LABEL_6:
  for (i = *(_QWORD **)(v8 + 40); ; i = (_QWORD *)*v17)
  {
    v17 = i;
    if (!i)
      break;
    if (i[7] == a3)
      _dispatch_introspection_lock_inversion_fail(&v16, a2, a4);
    result = _dispatch_introspection_order_check(&v16, a2, a3, a4);
  }
  v14 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    v15 = __ldxr(v9);
  while (__stlxr(0, v9));
  if (v15 != v14)
    return _dispatch_unfair_lock_unlock_slow(v8 + 32, v15);
  return result;
}

void _dispatch_introspection_target_queue_changed(uint64_t a1)
{
  if (byte_61298)
  {
    if ((*(_DWORD *)(a1 + 80) & 0x100000) != 0)
    {
      _dispatch_introspection_target_queue_changed_cold_2((_QWORD *)a1);
    }
    else if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 40))
    {
      _dispatch_introspection_target_queue_changed_cold_1((_QWORD *)a1, (uint64_t *)(a1 + 40));
    }
  }
}

void _dispatch_introspection_lock_inversion_fail(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  char **v12;
  char **v13;
  uint64_t v14;
  const char *v15;

  v6 = _simple_salloc();
  v7 = v6;
  v8 = (const char *)&unk_416A6;
  v9 = *(const char **)(a3 + 72);
  if (!v9)
    v9 = (const char *)&unk_416A6;
  if (*(_QWORD *)(a2 + 72))
    v8 = *(const char **)(a2 + 72);
  _simple_sprintf(v6, "%s Lock inversion detected\nqueue [%s] trying to sync onto queue [%s] conflicts\n", "BUG IN CLIENT OF LIBDISPATCH: Assertion failed: ", v9, v8);
  if (a1)
  {
    v10 = "with";
    do
    {
      v11 = a1[1];
      _simple_sprintf(v7, "%s queue [%s] syncing onto queue [%s] at:\n", v10, *(const char **)(v11 + 40), *(const char **)(v11 + 32));
      v12 = backtrace_symbols((void *const *)(v11 + 72), *(_DWORD *)(v11 + 64));
      if (v12)
      {
        v13 = v12;
        if (*(int *)(v11 + 64) >= 1)
        {
          v14 = 0;
          do
            _simple_sprintf(v7, "%s\n", v13[v14++]);
          while (v14 < *(int *)(v11 + 64));
        }
        free(v13);
      }
      else
      {
        _simple_sappend(v7, "<missing backtrace>\n");
      }
      a1 = (_QWORD *)*a1;
      v10 = "and";
    }
    while (a1);
  }
  byte_61298 = 0;
  v15 = (const char *)_simple_string(v7);
  _dispatch_log("%s", v15);
  qword_61228 = (uint64_t)v15;
  __break(1u);
}

uint64_t _dispatch_send_wakeup_runloop_thread(mach_port_t a1, mach_msg_timeout_t timeout)
{
  uint64_t v2;
  mach_msg_header_t msg;

  msg.msgh_size = 0;
  msg.msgh_bits = 19;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4E00000000;
  v2 = mach_msg(&msg, 17, 0x18u, 0, 0, timeout, 0);
  if ((_DWORD)v2 == 268435460)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(mach_task_self_, msg.msgh_local_port);
    mach_msg_destroy(&msg);
  }
  return v2;
}

uint64_t _dispatch_send_consume_send_once_right(mach_port_t a1)
{
  mach_msg_header_t msg;

  msg.msgh_size = 0;
  msg.msgh_bits = 18;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4F00000000;
  return mach_msg(&msg, 1, 0x18u, 0, 0, 0, 0);
}

uint64_t (*libdispatch_internal_protocol_server_routine(uint64_t a1))()
{
  int v1;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 80) >= 0xFFFFFFF0)
    return _dispatch_libdispatch_internal_protocol_subsystem[5 * (v1 - 64) + 5];
  else
    return 0;
}

_DWORD *_Xmach_notify_port_deleted(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)_dispatch_mach_notify_port_deleted(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *_Xmach_notify_send_possible(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)_dispatch_mach_notify_send_possible(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

uint64_t _Xmach_notify_port_destroyed(uint64_t result, uint64_t a2)
{
  int v2;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 40)
  {
    if (*(unsigned __int16 *)(result + 38) << 16 == 0x100000)
      _dispatch_mach_notify_port_destroyed(*(unsigned int *)(result + 12), *(_DWORD *)(result + 28));
    v2 = -300;
  }
  else
  {
    v2 = -304;
  }
  *(_DWORD *)(a2 + 32) = v2;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *_Xmach_notify_no_senders(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) == 0 && result[1] == 36)
    _dispatch_mach_notify_no_senders(result[3], result[8]);
  *(_DWORD *)(a2 + 32) = -304;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *_Xmach_notify_send_once(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)_dispatch_wakeup_runloop_thread();
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *_Xmach_notify_dead_name(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)_dispatch_mach_notify_dead_name(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *_Xwakeup_runloop_thread(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)_dispatch_wakeup_runloop_thread();
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *_Xconsume_send_once_right(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = (_DWORD *)_dispatch_wakeup_runloop_thread();
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

uint64_t libdispatch_internal_protocol_server(_DWORD *a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  void (*v5)(void);
  uint64_t result;

  v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  v4 = a1[5];
  if ((v4 - 80) >= 0xFFFFFFF0
    && (v5 = (void (*)(void))_dispatch_libdispatch_internal_protocol_subsystem[5 * (v4 - 64) + 5]) != 0)
  {
    v5();
    return 1;
  }
  else
  {
    result = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

uint64_t firehose_send_register(int a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, int a7, uint64_t a8)
{
  int v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  __int128 v19;
  int v20;
  NDR_record_t v21;
  uint64_t v22;
  uint64_t v23;

  v19 = 0u;
  v10 = 0u;
  v12 = a2;
  v13 = 1114112;
  v14 = a4;
  v15 = 0x100000;
  v16 = a5;
  v17 = 0x100000;
  v18 = a6;
  DWORD1(v19) = 1310720;
  DWORD2(v19) = a7;
  v20 = 1114112;
  v21 = NDR_record;
  v22 = a3;
  v23 = a8;
  v9 = -2147483629;
  DWORD1(v10) = a1;
  v11 = 0x500002D50;
  return mach_msg((mach_msg_header_t *)&v9, 1, 0x70u, 0, 0, 0, 0);
}

uint64_t firehose_send_push_and_wait(int a1, _OWORD *a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int msg;
  int msg_4;
  int msg_8;
  mach_port_name_t msg_12;
  _BYTE msg_16[48];

  memset(&msg_16[4], 0, 44);
  msg_4 = 0;
  msg_8 = a1;
  msg_12 = mig_get_special_reply_port();
  msg = 5395;
  *(_QWORD *)msg_16 = 0x2D5100000000;
  v5 = mach_msg((mach_msg_header_t *)&msg, 3162115, 0x18u, 0x40u, msg_12, 0, 0);
  v6 = v5;
  if ((v5 - 268435458) > 0xE || ((1 << (v5 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v5)
    {
      if (*(_DWORD *)&msg_16[4] == 71)
      {
        v6 = 4294966988;
      }
      else if (*(_DWORD *)&msg_16[4] == 11701)
      {
        if ((msg & 0x80000000) == 0)
        {
          if (msg_4 == 56)
          {
            if (!msg_8)
            {
              v6 = *(unsigned int *)&msg_16[16];
              if (!*(_DWORD *)&msg_16[16])
              {
                *a2 = *(_OWORD *)&msg_16[20];
                *a3 = *(_DWORD *)&msg_16[36];
                return v6;
              }
              goto LABEL_20;
            }
          }
          else if (msg_4 == 36)
          {
            if (msg_8)
              v7 = 1;
            else
              v7 = *(_DWORD *)&msg_16[16] == 0;
            if (v7)
              v6 = 4294966996;
            else
              v6 = *(unsigned int *)&msg_16[16];
            goto LABEL_20;
          }
        }
        v6 = 4294966996;
      }
      else
      {
        v6 = 4294966995;
      }
LABEL_20:
      mach_msg_destroy((mach_msg_header_t *)&msg);
      return v6;
    }
    mig_dealloc_special_reply_port(msg_12);
  }
  return v6;
}

uint64_t firehose_send_push_async(mach_port_t a1, int a2, mach_msg_timeout_t timeout)
{
  uint64_t v3;
  mach_msg_header_t msg;
  NDR_record_t v6;
  int v7;

  v6 = NDR_record;
  v7 = a2;
  *(_QWORD *)&msg.msgh_bits = 19;
  msg.msgh_voucher_port = 0;
  msg.msgh_id = 11602;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  v3 = mach_msg(&msg, 17, 0x24u, 0, 0, timeout, 0);
  if ((_DWORD)v3 == 268435460)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(mach_task_self_, msg.msgh_local_port);
    mach_msg_destroy(&msg);
  }
  return v3;
}

uint64_t firehose_send_get_logging_prefs(int a1, _DWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  mach_port_name_t special_reply_port;
  _BYTE v11[20];
  _DWORD v12[7];

  memset(v12, 0, sizeof(v12));
  *(_OWORD *)&v11[4] = 0u;
  LODWORD(v9) = 0;
  HIDWORD(v9) = a1;
  special_reply_port = mig_get_special_reply_port();
  v8 = 5395;
  *(_QWORD *)v11 = 0x2D5300000000;
  v5 = mach_msg((mach_msg_header_t *)&v8, 3162115, 0x18u, 0x40u, special_reply_port, 0, 0);
  v6 = v5;
  if ((v5 - 268435458) > 0xE || ((1 << (v5 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v5)
    {
      if (*(_DWORD *)&v11[4] == 71)
      {
        v6 = 4294966988;
      }
      else if (*(_DWORD *)&v11[4] == 11703)
      {
        if ((v8 & 0x80000000) == 0)
        {
          if ((_DWORD)v9 == 36)
          {
            v6 = 4294966996;
            if (*(_DWORD *)&v11[16])
            {
              if (HIDWORD(v9))
                v6 = 4294966996;
              else
                v6 = *(unsigned int *)&v11[16];
            }
          }
          else
          {
            v6 = 4294966996;
          }
          goto LABEL_20;
        }
        v6 = 4294966996;
        if (*(_DWORD *)&v11[8] == 1 && v9 == 56 && HIWORD(v12[0]) << 16 == 1114112)
        {
          v6 = 0;
          *a2 = *(_DWORD *)&v11[12];
          *a3 = *(_QWORD *)&v12[3];
          return v6;
        }
      }
      else
      {
        v6 = 4294966995;
      }
LABEL_20:
      mach_msg_destroy((mach_msg_header_t *)&v8);
      return v6;
    }
    mig_dealloc_special_reply_port(special_reply_port);
  }
  return v6;
}

uint64_t firehose_send_should_send_strings(int a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  int v7;
  int v8;
  int v9;
  mach_port_name_t special_reply_port;
  _BYTE v11[32];

  memset(&v11[4], 0, 28);
  v8 = 0;
  v9 = a1;
  special_reply_port = mig_get_special_reply_port();
  v7 = 5395;
  *(_QWORD *)v11 = 0x2D5400000000;
  v3 = mach_msg((mach_msg_header_t *)&v7, 3162115, 0x18u, 0x30u, special_reply_port, 0, 0);
  v4 = v3;
  if ((v3 - 268435458) > 0xE || ((1 << (v3 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v3)
    {
      if (*(_DWORD *)&v11[4] == 71)
      {
        v4 = 4294966988;
      }
      else if (*(_DWORD *)&v11[4] == 11704)
      {
        if ((v7 & 0x80000000) == 0)
        {
          if (v8 == 40)
          {
            if (!v9)
            {
              v4 = *(unsigned int *)&v11[16];
              if (!*(_DWORD *)&v11[16])
              {
                *a2 = *(_DWORD *)&v11[20];
                return v4;
              }
              goto LABEL_20;
            }
          }
          else if (v8 == 36)
          {
            if (v9)
              v5 = 1;
            else
              v5 = *(_DWORD *)&v11[16] == 0;
            if (v5)
              v4 = 4294966996;
            else
              v4 = *(unsigned int *)&v11[16];
            goto LABEL_20;
          }
        }
        v4 = 4294966996;
      }
      else
      {
        v4 = 4294966995;
      }
LABEL_20:
      mach_msg_destroy((mach_msg_header_t *)&v7);
      return v4;
    }
    mig_dealloc_special_reply_port(special_reply_port);
  }
  return v4;
}

uint64_t (*firehoseReply_server_routine(uint64_t a1))()
{
  int v1;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 11705) >= 0xFFFFFFFB)
    return firehose_client_firehoseReply_subsystem[5 * (v1 - 11700) + 5];
  else
    return 0;
}

_DWORD *_Xpush_reply(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) == 0 && result[1] == 56)
    firehose_client_push_reply(result[3], result[8]);
  *(_DWORD *)(a2 + 32) = -304;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t _Xpush_notify_async(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 52)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }
  else
  {
    result = firehose_client_push_notify_async(*(unsigned int *)(result + 12), *(_QWORD *)(result + 32), *(_QWORD *)(result + 40), *(_DWORD *)(result + 48));
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

uint64_t firehoseReply_server(_DWORD *a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  void (*v5)(void);
  uint64_t result;

  v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  v4 = a1[5];
  if ((v4 - 11705) >= 0xFFFFFFFB
    && (v5 = (void (*)(void))firehose_client_firehoseReply_subsystem[5 * (v4 - 11700) + 5]) != 0)
  {
    v5();
    return 1;
  }
  else
  {
    result = 0;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

void os_eventlink_create_with_port_cold_1()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_0();
  _os_crash(v0);
  __break(1u);
}

void _os_workgroup_interval_xref_dispose_cold_1()
{
  _os_crash("BUG IN CLIENT: Releasing last reference to workgroup interval while an interval has been started");
  __break(1u);
}

void _os_workgroup_tsd_cleanup_cold_1(char *a1, uint64_t a2)
{
  OUTLINED_FUNCTION_5(a1, a2, "BUG IN CLIENT: Thread exiting without leaving workgroup '%s'");
  OUTLINED_FUNCTION_4();
  __break(1u);
}

void _os_workgroup_leave_update_wg_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Joined count underflowed";
  __break(1u);
}

void _os_workgroup_set_name_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Invalid workgroup port";
  qword_61258 = 0xFFFFFFFFLL;
  __break(1u);
}

void os_workgroup_create_with_workload_id_cold_1(int a1)
{
  _dispatch_log("BUG IN CLIENT of %s: Non-default attribute flags: 0x%x", "os_workgroup_create_with_workload_id", a1);
  OUTLINED_FUNCTION_0_0(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)));
  OUTLINED_FUNCTION_1();
}

void os_workgroup_create_with_workload_id_cold_2()
{
  _dispatch_log("BUG IN CLIENT of %s: Invalid attribute pointer", "os_workgroup_create_with_workload_id");
  OUTLINED_FUNCTION_0_0(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)));
  OUTLINED_FUNCTION_1();
}

void _os_workgroup_set_work_interval_workload_id_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Invalid workgroup port";
  qword_61258 = a1;
  __break(1u);
}

void os_workgroup_interval_create_with_workload_id_cold_1(int a1)
{
  _dispatch_log("BUG IN CLIENT of %s: Non-default attribute flags: 0x%x", "os_workgroup_interval_create_with_workload_id", a1);
  OUTLINED_FUNCTION_0_0(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)));
  OUTLINED_FUNCTION_1();
}

void os_workgroup_interval_create_with_workload_id_cold_2()
{
  _dispatch_log("BUG IN CLIENT of %s: Invalid attribute pointer", "os_workgroup_interval_create_with_workload_id");
  OUTLINED_FUNCTION_0_0(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)));
  OUTLINED_FUNCTION_1();
}

void os_workgroup_leave_cold_1()
{
  OUTLINED_FUNCTION_3(1686);
}

void os_workgroup_leave_cold_3()
{
  _os_crash("Join token provided is for a different workgroup than the last one joined by thread");
  __break(1u);
}

void os_workgroup_leave_cold_4()
{
  _os_crash("Join token provided is for a different thread");
  __break(1u);
}

void os_workgroup_leave_cold_5()
{
  _os_crash("Join token is corrupt");
  __break(1u);
}

void os_workgroup_copy_port_cold_3()
{
  OUTLINED_FUNCTION_3(1419);
}

void os_workgroup_create_with_port_cold_1(char *a1, uint64_t a2)
{
  OUTLINED_FUNCTION_5(a1, a2, "BUG IN DISPATCH: Invalid wi flags = %u");
  OUTLINED_FUNCTION_4();
  __break(1u);
}

void os_workgroup_create_with_port_cold_2()
{
  _dispatch_bug(1443, 0);
}

void os_workgroup_create_with_workload_id_and_port_cold_2(int a1)
{
  _dispatch_bug(1488, 0);
  _dispatch_log("BUG IN CLIENT of %s: Invalid mach port 0x%x", "os_workgroup_create_with_workload_id_and_port", a1);
}

void os_workgroup_create_with_workload_id_and_port_cold_3(int a1)
{
  _dispatch_log("BUG IN CLIENT of %s: Invalid mach port 0x%x", "os_workgroup_create_with_workload_id_and_port", a1);
  OUTLINED_FUNCTION_0_0(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)));
  OUTLINED_FUNCTION_1();
}

void os_workgroup_create_with_workload_id_and_workgroup_cold_1()
{
  _dispatch_log("BUG IN CLIENT of %s: Workgroup already cancelled", "os_workgroup_create_with_workload_id_and_workgroup");
  OUTLINED_FUNCTION_0_0(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)));
  OUTLINED_FUNCTION_1();
}

void _os_workgroup_join_update_wg_cold_1()
{
  __assert_rtn("_os_workgroup_join_update_wg", "workgroup.c", 1653, "cur_wg == NULL");
}

void os_workgroup_get_working_arena_cold_1()
{
  _os_crash("The arena associated with workgroup is not to be partitioned");
  __break(1u);
}

void os_workgroup_get_working_arena_cold_2()
{
  _os_crash("Exceeded the maximum number of workers who can access the arena");
  __break(1u);
}

void os_workgroup_get_working_arena_cold_3()
{
  _os_crash("Thread is not a member of the workgroup");
  __break(1u);
}

void _os_workgroup_pthread_start_cold_1(int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: pthread_start os_workgroup_join failed";
  qword_61258 = a1;
  __break(1u);
}

void _wg_type_to_wi_flags_cold_1()
{
  _os_crash("Creating an os_workgroup of unknown type");
  __break(1u);
}

void _os_workgroup_lookup_type_from_workload_id_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Workload identifier must not be NULL";
  __break(1u);
}

void _dispatch_bug(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  if (qword_61360 != -1)
    dispatch_once_f(&qword_61360, 0, (dispatch_function_t)_dispatch_build_init);
  v5 = qword_61368;
  qword_61368 = v2;
  if (v2 != v5)
    _dispatch_log("BUG in libdispatch: %s - %lu - 0x%lx", byte_61390, a1, a2);
  OUTLINED_FUNCTION_2();
}

void _dispatch_log(char *__format, ...)
{
  char *v2;
  va_list va;

  va_start(va, __format);
  if (qword_61388 != -1)
    dispatch_once_f(&qword_61388, 0, (dispatch_function_t)_dispatch_logv_init);
  if ((_MergedGlobals & 1) == 0)
  {
    if (dispatch_logfile == -1)
    {
      v2 = 0;
      vasprintf(&v2, __format, va);
      if (v2)
      {
        _simple_asl_log(5, "com.apple.libsystem.libdispatch");
        free(v2);
      }
    }
    else
    {
      _dispatch_logv_file(__format, va);
    }
  }
  OUTLINED_FUNCTION_4_0();
}

void _dispatch_bug_mach_client(const char *a1, mach_error_t error_value)
{
  uint64_t v2;
  uint64_t v3;
  char *v6;
  char *v7;
  char v8;

  v3 = _dispatch_bug_mach_client_last_seen;
  _dispatch_bug_mach_client_last_seen = v2;
  if (v2 == v3
    || (v6 = mach_error_string(error_value),
        _dispatch_log("BUG in libdispatch client: %s %s - 0x%x", a1, v6, error_value),
        v7 = mach_error_string(error_value),
        _dispatch_fault((uint64_t)"LIBDISPATCH_STRICT: _dispatch_bug_mach_client", "BUG in libdispatch client: %s %s - 0x%x", a1, v7, error_value), OUTLINED_FUNCTION_0_1(), (v8 & 1) == 0))
  {
    OUTLINED_FUNCTION_2();
  }
  else
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: LIBDISPATCH_STRICT: _dispatch_bug_mach_client";
    __break(1u);
  }
}

void _dispatch_bug_kevent_client(const char *a1, const char *a2, const char *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  const char *v8;
  const char *v11;
  uint64_t v15;
  _QWORD *v16;
  const void *function_symbol;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char v26;
  const char *v27;
  const char *v28;
  const char *v29;
  const char *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  const void *v42;

  v8 = (const char *)v7;
  LODWORD(v11) = a4;
  if (a7)
  {
    v15 = *(_QWORD *)(*(_QWORD *)~*(_QWORD *)(a7 + 8) + 40);
    if (v15 == 787)
    {
      function_symbol = *(const void **)(a7 + 40);
    }
    else if (v15 == 275 && (v16 = *(_QWORD **)(a7 + 40)) != 0)
    {
      function_symbol = (const void *)_dispatch_continuation_get_function_symbol(v16);
    }
    else
    {
      function_symbol = 0;
    }
    a2 = **(const char ***)a7;
    if (!a3)
      goto LABEL_15;
  }
  else
  {
    function_symbol = 0;
    if (!a3)
      goto LABEL_15;
  }
  if ((_DWORD)v11)
  {
    v19 = qword_61370;
    qword_61370 = v7;
    if (v7 == v19)
      return;
    OUTLINED_FUNCTION_5_0();
    OUTLINED_FUNCTION_3_0();
    v8 = "BUG in libdispatch client: %s %s: \"%s\" - 0x%x { 0x%llx[%s], ident: %lld / 0x%llx, handler: %p }";
    _dispatch_log("BUG in libdispatch client: %s %s: \"%s\" - 0x%x { 0x%llx[%s], ident: %lld / 0x%llx, handler: %p }", a1, v27, v29, v31, v33, v35, v37, v39, v41);
    OUTLINED_FUNCTION_5_0();
    OUTLINED_FUNCTION_3_0();
    _dispatch_fault((uint64_t)"LIBDISPATCH_STRICT: _dispatch_bug_kevent_client", "BUG in libdispatch client: %s %s: \"%s\" - 0x%x { 0x%llx[%s], ident: %lld / 0x%llx, handler: %p }", a1, v28, v30, v32, v34, v36, v38, v40, v42);
    OUTLINED_FUNCTION_0_1();
    if ((v20 & 1) == 0)
      return;
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: LIBDISPATCH_STRICT: _dispatch_bug_kevent_client";
    __break(1u);
  }
LABEL_15:
  if (a3)
  {
    v21 = qword_61378;
    qword_61378 = (uint64_t)v8;
    if (v8 == (const char *)v21)
      return;
    v11 = "BUG in libdispatch client: %s %s{ 0x%llx[%s], ident: %lld / 0x%llx, handler: %p }";
    _dispatch_log("BUG in libdispatch client: %s %s{ 0x%llx[%s], ident: %lld / 0x%llx, handler: %p }", a1, a3, a6, a2, a5, a5, function_symbol);
    _dispatch_fault((uint64_t)"LIBDISPATCH_STRICT: _dispatch_bug_kevent_client", "BUG in libdispatch client: %s %s{ 0x%llx[%s], ident: %lld / 0x%llx, handler: %p }", a1, a3, a6, a2, a5, a5, function_symbol);
    OUTLINED_FUNCTION_0_1();
    if ((v22 & 1) == 0)
      return;
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: LIBDISPATCH_STRICT: _dispatch_bug_kevent_client";
    __break(1u);
  }
  v23 = qword_61380;
  qword_61380 = (uint64_t)v8;
  if (v8 != (const char *)v23)
  {
    v24 = OUTLINED_FUNCTION_5_0();
    _dispatch_log("BUG in libdispatch: %s: \"%s\" - 0x%x{ 0x%llx[%s], ident: %lld / 0x%llx, handler: %p }", a1, v24, (_DWORD)v11, a6, a2, a5, a5, function_symbol);
    v25 = strerror((int)v11);
    _dispatch_fault((uint64_t)"LIBDISPATCH_STRICT: _dispatch_bug_kevent_client", "BUG in libdispatch: %s: \"%s\" - 0x%x{ 0x%llx[%s], ident: %lld / 0x%llx, handler: %p }", a1, v25, (_DWORD)v11, a6, a2, a5, a5, function_symbol);
    OUTLINED_FUNCTION_0_1();
    if ((v26 & 1) != 0)
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: LIBDISPATCH_STRICT: _dispatch_bug_kevent_client";
      __break(1u);
    }
  }
}

void _dispatch_bug_kevent_vanished(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  char v4;
  const char *v5;
  const char *v6;
  const void *v7;
  const void *v8;
  const char *v9;
  const char *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  const void *v15;
  const void *v16;

  if (*(_QWORD *)(*(_QWORD *)~*(_QWORD *)(a1 + 8) + 40) == 275)
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2)
      _dispatch_continuation_get_function_symbol(v2);
  }
  v3 = _dispatch_bug_kevent_vanished_last_seen;
  _dispatch_bug_kevent_vanished_last_seen = v1;
  if (v1 != v3)
  {
    OUTLINED_FUNCTION_1_0();
    _dispatch_log("BUG in libdispatch client: %s, monitored resource vanished before the source cancel handler was invoked { %p[%s], ident: %d / 0x%x, handler: %p }", v5, v7, v9, v11, v13, v15);
    OUTLINED_FUNCTION_1_0();
    _dispatch_fault((uint64_t)"LIBDISPATCH_STRICT: _dispatch_bug_kevent_vanished", "BUG in libdispatch client: %s, monitored resource vanished before the source cancel handler was invoked { %p[%s], ident: %d / 0x%x, handler: %p }", v6, v8, v10, v12, v14, v16);
    OUTLINED_FUNCTION_0_1();
    if ((v4 & 1) != 0)
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: LIBDISPATCH_STRICT: _dispatch_bug_kevent_vanished";
      __break(1u);
    }
  }
}

void _dispatch_bug_deprecated(const char *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;

  v2 = _dispatch_bug_deprecated_last_seen;
  _dispatch_bug_deprecated_last_seen = v1;
  if (v1 == v2
    || (_dispatch_log("DEPRECATED USE in libdispatch client: %s; set a breakpoint on _dispatch_bug_deprecated to debug",
          a1),
        _dispatch_fault((uint64_t)"LIBDISPATCH_STRICT: _dispatch_bug_deprecated", "DEPRECATED USE in libdispatch client: %s; set a breakpoint on _dispatch_bug_deprecated to debug",
          a1),
        OUTLINED_FUNCTION_0_1(),
        (v4 & 1) == 0))
  {
    OUTLINED_FUNCTION_4_0();
  }
  else
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: LIBDISPATCH_STRICT: _dispatch_bug_deprecated";
    __break(1u);
  }
}

void dispatch_debug(dispatch_object_t object, const char *message, ...)
{
  va_list va;

  va_start(va, message);
  _dispatch_debugv((unint64_t *)object, message, va);
}

void _dispatch_queue_attr_to_info_cold_1(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid queue attribute";
  qword_61258 = v1;
  __break(1u);
}

uint64_t _dispatch_fault_cold_1(const char *a1, uint64_t a2)
{
  int v4;

  v4 = strlen(a1);
  return os_fault_with_payload(18, 2, a1, (v4 + 1), a2, 0);
}

void _dispatch_continuation_get_function_symbol_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption of dispatch block object";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_strdup_if_mutable_cold_1()
{
  _dispatch_bug(1515, 0);
}

void _dispatch_Block_copy_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: NULL was passed where a block should have been";
  __break(1u);
}

size_t _dispatch_object_debug_attr(uint64_t a1, char *__str, size_t __size)
{
  int v4;
  size_t v5;

  v4 = snprintf(__str, __size, "xref = %d, ref = %d, ", *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 8));
  v5 = v4;
  if (v4 >= __size)
    v5 = __size;
  if (v4 >= 0)
    return v5;
  else
    return 0;
}

void _os_object_retain_weak_cold_1()
{
  __clrex();
  qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
}

void _os_object_allows_weak_reference_cold_1()
{
  qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
}

void _dispatch_dispose_cold_1(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Release while enqueued";
  qword_61258 = v1;
  __break(1u);
}

void dispatch_set_target_queue_cold_2()
{
  qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
  __break(1u);
}

void dispatch_set_target_queue_cold_3(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot target the cooperative root queue - not implemented";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_suspend_cold_1()
{
  qword_61228 = (uint64_t)"API MISUSE: Object type does not support suspension";
  __break(1u);
}

void dispatch_resume_cold_1()
{
  qword_61228 = (uint64_t)"API MISUSE: Object type does not support resume";
  __break(1u);
}

uint64_t _dispatch_objc_debug(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  uint64_t result;
  uint64_t v7;

  v7 = 0;
  v5 = objc_msgSend(a1, "debugDescription");
  objc_msgSend(v5, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", a2, a3 - 1, &v7, 4, 0, 0, objc_msgSend(v5, "length"), 0);
  result = v7;
  if (v7)
    *(_BYTE *)(a2 + v7) = 0;
  return result;
}

void _dispatch_sema4_create_slow_cold_1(int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: mach semaphore API failure";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_sema4_create_slow_cold_2()
{
  qword_61228 = (uint64_t)"MIG_REPLY_MISMATCH";
  qword_61258 = -301;
  __break(1u);
}

void _dispatch_sema4_create_slow_cold_3()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Use-after-free of dispatch_semaphore_t or dispatch_group_t";
  qword_61258 = 15;
  __break(1u);
}

void _dispatch_thread_event_wait_slow_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupt thread event value";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_unfair_lock_lock_slow_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: trying to lock recursively";
  __break(1u);
}

void _dispatch_unfair_lock_unlock_slow_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: lock not owned by current thread";
  qword_61258 = a1;
  __break(1u);
}

void _dlock_wait_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: ulock_wait() failed";
  qword_61258 = a1;
  __break(1u);
}

void _dlock_wait_cold_2(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Owner in ulock is unknown - possible memory corruption";
  qword_61258 = a1;
  __break(1u);
}

void _dlock_wake_cold_1(int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: ulock_wake() failed";
  qword_61258 = -a1;
  __break(1u);
}

size_t _dispatch_semaphore_debug(uint64_t a1, char *a2, size_t a3)
{
  const char *ClassName;
  int v7;
  size_t v8;
  size_t v9;
  size_t v10;
  int v11;
  size_t v12;
  size_t v13;
  size_t v14;
  int v15;
  size_t v16;

  ClassName = object_getClassName((id)a1);
  v7 = snprintf(a2, a3, "%s[%p] = { ", ClassName + 12, (const void *)a1);
  v8 = v7;
  if (v7 >= a3)
    v8 = a3;
  if (v7 >= 0)
    v9 = v8;
  else
    v9 = 0;
  v10 = v9 + _dispatch_object_debug_attr(a1, &a2[v9], a3 - v9);
  v11 = snprintf(&a2[v10], a3 - v10, "port = 0x%x, ", *(_DWORD *)(a1 + 64));
  v12 = v11;
  if (a3 - v10 < v11)
    v12 = a3 - v10;
  if (v11 < 0)
    v12 = 0;
  v13 = v12 + v10;
  v14 = a3 - (v12 + v10);
  v15 = snprintf(&a2[v12 + v10], v14, "value = %ld, orig = %ld }", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v16 = v15;
  if (v14 < v15)
    v16 = v14;
  if (v15 < 0)
    v16 = 0;
  return v16 + v13;
}

size_t _dispatch_group_debug(_QWORD *a1, char *a2, size_t a3)
{
  uint64_t v6;
  const char *ClassName;
  int v8;
  size_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  int v13;
  size_t v14;

  v6 = a1[6];
  ClassName = object_getClassName(a1);
  v8 = snprintf(a2, a3, "%s[%p] = { ", ClassName + 12, a1);
  v9 = v8;
  if (v8 >= a3)
    v9 = a3;
  if (v8 >= 0)
    v10 = v9;
  else
    v10 = 0;
  v11 = v10 + _dispatch_object_debug_attr((uint64_t)a1, &a2[v10], a3 - v10);
  v12 = a3 - v11;
  v13 = snprintf(&a2[v11], v12, "count = %u, gen = %d, waiters = %d, notifs = %d }", -(v6 & 0xFFFFFFFC) >> 2, HIDWORD(v6), v6 & 1, (v6 >> 1) & 1);
  v14 = v13;
  if (v12 < v13)
    v14 = v12;
  if (v13 < 0)
    v14 = 0;
  return v14 + v11;
}

void _dispatch_semaphore_dispose_cold_1(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2 - *a1;
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Semaphore object deallocated while in use (current value < original value)";
  qword_61258 = v2;
  __break(1u);
}

void _dispatch_group_dispose_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Group object deallocated while in use";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_group_leave_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unbalanced call to dispatch_group_leave()";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_group_enter_cold_2(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Too many nested calls to dispatch_group_enter()";
  qword_61258 = a1;
  __break(1u);
}

uint64_t _dispatch_queue_debug_attr(uint64_t a1, char *a2, unint64_t a3)
{
  uint64_t v6;
  void *v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v6 = *(_QWORD *)(a1 + 24);
  v7 = &unk_416A6;
  if (v6 && *(_QWORD *)(v6 + 72))
    v7 = *(void **)(v6 + 72);
  v8 = *(_QWORD *)(a1 + 56);
  v54 = *(unsigned __int16 *)(a1 + 80);
  v55 = v8;
  v52 = v7;
  v53 = *(_QWORD *)(a1 + 24);
  v51 = (*(_DWORD *)(a1 + 96) + 1);
  v9 = OUTLINED_FUNCTION_3_1(a2, (uint64_t)a2, "sref = %d, target = %s[%p], width = 0x%x, state = 0x%016llx");
  v11 = v9;
  if (v9 >= a3)
    v11 = a3;
  if (v9 >= 0)
    v12 = v11;
  else
    v12 = 0;
  if (v8 >> 55)
  {
    v13 = (char *)OUTLINED_FUNCTION_2_0();
    v51 = v8 >> 58;
    OUTLINED_FUNCTION_1_1(v13, v14, ", suspended = %d");
    OUTLINED_FUNCTION_0_2();
    if (v16 < 0)
      v15 = 0;
    v12 += v15;
  }
  v17 = v8 & 0x180000000000000;
  if ((v8 & 0x180000000000000) == 0x80000000000000)
  {
    v18 = (char *)OUTLINED_FUNCTION_2_0();
    v20 = ", activating";
  }
  else if (v17 == 0x100000000000000)
  {
    v18 = (char *)OUTLINED_FUNCTION_2_0();
    v20 = ", activated";
  }
  else
  {
    if (v17 != 0x180000000000000)
      goto LABEL_22;
    v18 = (char *)OUTLINED_FUNCTION_2_0();
    v20 = ", inactive";
  }
  OUTLINED_FUNCTION_1_1(v18, v19, v20);
  OUTLINED_FUNCTION_0_2();
  if (v22 < 0)
    v21 = 0;
  v12 += v21;
LABEL_22:
  if ((v8 & 0x4000000001) != 0)
  {
    v23 = (char *)OUTLINED_FUNCTION_2_0();
    OUTLINED_FUNCTION_1_1(v23, v24, ", enqueued");
    OUTLINED_FUNCTION_0_2();
    if (v26 < 0)
      v25 = 0;
    v12 += v25;
  }
  if ((v8 & 0x8000000000) != 0)
  {
    v27 = (char *)OUTLINED_FUNCTION_2_0();
    OUTLINED_FUNCTION_1_1(v27, v28, ", dirty");
    OUTLINED_FUNCTION_0_2();
    if (v30 < 0)
      v29 = 0;
    v12 += v29;
  }
  if ((v8 & 0x700000000) != 0)
  {
    v51 = HIDWORD(v8) & 7;
    OUTLINED_FUNCTION_1_1(&a2[v12], v10, ", max qos %d");
    OUTLINED_FUNCTION_0_2();
    if (v32 < 0)
      v31 = 0;
    v12 += v31;
  }
  if (v8 >= 4 && ((*(_DWORD *)(a1 + 80) & 0x40000) == 0 || (*(_DWORD *)(a1 + 80) & 0x1000000) != 0))
  {
    v51 = v8 | 3;
    OUTLINED_FUNCTION_1_1(&a2[v12], v10, ", draining on 0x%x");
    OUTLINED_FUNCTION_0_2();
    if (v34 < 0)
      v33 = 0;
    v12 += v33;
  }
  v35 = (char *)OUTLINED_FUNCTION_2_0();
  if ((v8 & 0x40000000000000) != 0)
  {
    OUTLINED_FUNCTION_1_1(v35, v36, ", in-barrier");
    OUTLINED_FUNCTION_0_2();
    if (v43 < 0)
      v41 = 0;
    v39 = v8 & 0x10000000000;
  }
  else
  {
    v37 = (v8 >> 41) & 0x1FFF;
    LODWORD(v38) = v37 + *(unsigned __int16 *)(a1 + 80) - 4096;
    v39 = v8 & 0x10000000000;
    if (v39)
      v38 = (v37 - 4095);
    else
      v38 = v38;
    v51 = v38;
    OUTLINED_FUNCTION_1_1(v35, v36, ", in-flight = %d");
    OUTLINED_FUNCTION_0_2();
    if (v42 < 0)
      v41 = 0;
  }
  v44 = v41 + v12;
  if (v39)
  {
    v45 = snprintf(&a2[v44], a3 - v44, ", pending-barrier", v51, v52, v53, v54, v55);
    v46 = v45;
    if (a3 - v44 < v45)
      v46 = a3 - v44;
    if (v45 < 0)
      v46 = 0;
    v44 += v46;
  }
  if ((*(_DWORD *)(a1 + 80) & 0x40000) != 0 && (*(_DWORD *)(a1 + 80) & 0x1000000) == 0)
  {
    v47 = a3 - v44;
    v48 = OUTLINED_FUNCTION_3_1(&a2[v44], v40, ", thread = 0x%x ");
    v49 = v48;
    if (v47 < v48)
      v49 = v47;
    if (v48 < 0)
      v49 = 0;
    v44 += v49;
  }
  return v44;
}

uint64_t _dispatch_queue_debug(id a1, char *a2, unint64_t a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;

  if (!*((_QWORD *)a1 + 9))
    object_getClassName(a1);
  v6 = OUTLINED_FUNCTION_3_1(a2, (uint64_t)a2, "%s[%p] = { ");
  v7 = v6;
  if (v6 >= a3)
    v7 = a3;
  if (v6 >= 0)
    v8 = v7;
  else
    v8 = 0;
  v9 = v8 + _dispatch_object_debug_attr((uint64_t)a1, &a2[v8], a3 - v8);
  v10 = v9 + _dispatch_queue_debug_attr((uint64_t)a1, &a2[v9], a3 - v9);
  v11 = a3 - v10;
  v13 = OUTLINED_FUNCTION_3_1(&a2[v10], v12, "}");
  v14 = v13;
  if (v11 < v13)
    v14 = v11;
  if (v13 < 0)
    v14 = 0;
  return v14 + v10;
}

size_t _dispatch_channel_debug(void *a1, uint64_t a2, unint64_t a3)
{
  const char *ClassName;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;

  ClassName = object_getClassName(a1);
  v8 = OUTLINED_FUNCTION_4_1((uint64_t)ClassName, v7, "%s[%p] = { ");
  v9 = v8;
  if (v8 >= a3)
    v9 = a3;
  if (v8 >= 0)
    v10 = v9;
  else
    v10 = 0;
  v11 = v10 + _dispatch_object_debug_attr((uint64_t)a1, (char *)(a2 + v10), a3 - v10);
  v12 = _dispatch_queue_debug_attr((uint64_t)a1, (char *)(a2 + v11), a3 - v11);
  v14 = OUTLINED_FUNCTION_4_1(v12, v13, "%s%s%s");
  v15 = v14;
  if (v14 >= a3)
    v15 = a3;
  if (v14 < 0)
    v15 = 0;
  return v11 + v15 + v12;
}

void dispatch_assert_queue_V2_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: invalid queue passed to dispatch_assert_queue()";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_assert_queue_not_V2_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: invalid queue passed to dispatch_assert_queue_not()";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_queue_override_invoke_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected object type";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_block_perform_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid flags passed to dispatch_block_perform()";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_block_invoke_direct_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: A block object may not be both run more than once and waited for";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_block_cancel_cold_2()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid block object passed to dispatch_block_cancel()";
  __break(1u);
}

void dispatch_block_testcancel_cold_2()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid block object passed to dispatch_block_testcancel()";
  __break(1u);
}

void dispatch_block_wait_cold_1(int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: A block object may not be both run more than once and waited for";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_block_wait_cold_2(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: A block object may not be waited for more than once";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_block_wait_cold_4()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid block object passed to dispatch_block_wait()";
  __break(1u);
}

void dispatch_block_notify_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: A block object may not be both run more than once and observed";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_block_notify_cold_3(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid block object passed to dispatch_block_notify()";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_queue_set_label_nocopy_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot change label for this queue";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_set_qos_class_floor_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch queue/source property setter called after activation";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_set_qos_class_floor_cold_2()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_set_qos_class_floor called on invalid object type";
  __break(1u);
}

void dispatch_set_qos_class_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_set_qos_class called on invalid object type";
  __break(1u);
}

void dispatch_set_qos_class_fallback_cold_2()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_set_qos_class_fallback called on invalid object type";
  __break(1u);
}

void _dispatch_lane_class_dispose_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of a queue with corrupt state";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_lane_class_dispose_cold_2(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Premature release of a locked queue";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_lane_class_dispose_cold_3(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of a queue while items are enqueued";
  qword_61258 = v1;
  __break(1u);
}

void _dispatch_queue_xref_dispose_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of a suspended object";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_queue_xref_dispose_cold_2(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of an inactive object";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_queue_set_width_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot set width of a serial queue";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_queue_set_width_cold_2(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected dispatch object type";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_lane_set_target_queue_cold_3()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Too many calls to dispatch_suspend() prior to calling dispatch_se"
                         "t_target_queue() or dispatch_set_*_handler()";
  __break(1u);
}

void _dispatch_lane_set_target_queue_cold_4()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot change the target of this object after it has been activated";
  __break(1u);
}

void _dispatch_lane_set_target_queue_cold_5()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot change the target of a queue already targeted by other dispatch objects";
  __break(1u);
}

void _dispatch_lane_set_target_queue_cold_6(unsigned __int8 a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected dispatch object type";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_lane_legacy_set_target_queue_cold_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0xFFFFFC100])
    kdebug_trace(771883012, a3, a2, a1, 0);
  _dispatch_bug_deprecated("Changing the target of a queue already targeted by other dispatch objects");
}

void _dispatch_queue_priority_inherit_from_target_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupted priority";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_workloop_set_cpupercent_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: workloop qos class or priority must be set before cpupercent";
  __break(1u);
}

void _dispatch_workloop_dispose_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of a workloop while items are enqueued";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_workloop_dispose_cold_2(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of a workloop with corrupt state";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_workloop_dispose_cold_3(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of a locked workloop";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_workloop_activate_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Process has too many threads.";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_workloop_wakeup_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Invalid way to wake up a workloop";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_workloop_wakeup_cold_2(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Waking up an inactive workloop";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_async_swift_job_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Used Swift only SPI to enqueue non-Swift runtime objects into dispatch";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_channel_xref_dispose_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of a channel that has not been cancelled, but has a cance"
                         "l acknowledgement callback";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_channel_invoke_cold_2()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Channel didn't call dispatch_channel_drain";
  __break(1u);
}

void _dispatch_channel_invoke_cold_3()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: sync waiter found on channel";
  __break(1u);
}

void dispatch_channel_foreach_work_item_peek_f_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Called peek after drain";
  __break(1u);
}

void dispatch_channel_drain_f_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Called drain twice in the same invoke";
  __break(1u);
}

void dispatch_channel_create_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unsupported callbacks version";
  qword_61258 = 0;
  __break(1u);
}

void _dispatch_mgr_queue_push_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Waiter pushed onto manager";
  __break(1u);
}

void _dispatch_pthread_root_queue_create_with_observer_hooks_4IOHID_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid pthread root queue observer hooks";
  __break(1u);
}

void _dispatch_queue_is_exclusively_owned_by_current_thread_4IOHID_cold_1(unsigned __int16 a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid queue type";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_runloop_root_queue_perform_4CF_cold_3(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Not a runloop queue";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_main_queue_drain_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: _dispatch_main_queue_callback_4CF called after dispatch_main()";
  __break(1u);
}

void _dispatch_main_queue_drain_cold_4()
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Lingering DISPATCH_WLH_ANON";
  __break(1u);
}

void _dispatch_main_queue_drain_cold_5(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: _dispatch_main_queue_callback_4CF called from the wrong thread";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_queue_cleanup_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Premature thread exit while a dispatch queue is running";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_worker_thread_cold_1(int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Pending thread request underflow";
  qword_61258 = a1 - 1;
  __break(1u);
}

void _dispatch_root_queues_init_once_cold_1(int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: QoS Maintenance support required";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_root_queues_init_once_cold_2(int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Missing Kevent WORKQ support";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_root_queues_init_once_cold_3()
{
  uint64_t v0;

  v0 = **(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unable to limit cooperative pool size";
  qword_61258 = v0;
  __break(1u);
}

void _dispatch_root_queues_init_once_cold_4(int a1, int a2)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Root queue initialization failed";
  qword_61258 = a2 | (a1 << 16);
  __break(1u);
}

void _dispatch_mgr_queue_drain_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Interrupted drain on manager queue";
  __break(1u);
}

void _dispatch_root_queue_drain_deferred_wlh_cold_4(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Invalid wlh state";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_apply_with_attr_f_cold_2(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: attribute's properties are invalid or meaningless on this system";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_apply_with_attr_f_cold_3(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_apply_attr not initialized using dispatch_apply_attr_init";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_apply_attr_set_parallelism_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unknown entity";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_apply_attr_set_parallelism_cold_2(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid threads_per_entity value for CPU entity";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_apply_attr_set_parallelism_cold_3(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid threads_per_cluster value, only acceptable value is 1";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_apply_attr_set_parallelism_cold_4()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: 0 is an invalid threads_per_cluster value";
  qword_61258 = 0;
  __break(1u);
}

size_t _dispatch_source_debug(_QWORD *a1, char *a2, size_t a3)
{
  const char ***v6;
  const char *ClassName;
  int v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  size_t v18;
  char v19;
  size_t v20;
  const char *v21;
  int v22;
  size_t v23;
  int v25;
  char *v26;
  unint64_t v27;

  v6 = (const char ***)a1[11];
  ClassName = object_getClassName(a1);
  v8 = snprintf(a2, a3, "%s[%p] = { ", ClassName + 12, a1);
  v9 = v8;
  if (v8 >= a3)
    v9 = a3;
  if (v8 >= 0)
    v10 = v9;
  else
    v10 = 0;
  v11 = OUTLINED_FUNCTION_0_3();
  v14 = v10 + _dispatch_object_debug_attr(v11, v12, v13);
  v15 = OUTLINED_FUNCTION_0_3();
  v18 = v14 + _dispatch_source_debug_attr(v15, v16, v17);
  v19 = *((_BYTE *)v6 + 29);
  if ((v19 & 2) != 0)
  {
    v25 = OUTLINED_FUNCTION_0_3();
    v18 += _dispatch_timer_debug_attr(v25, v26, v27);
    v19 = *((_BYTE *)v6 + 29);
  }
  v20 = a3 - v18;
  if ((v19 & 1) != 0)
    v21 = " (direct)";
  else
    v21 = (const char *)&unk_416A6;
  v22 = snprintf(&a2[v18], v20, "kevent = %p%s, filter = %s }", v6, v21, **v6);
  v23 = v22;
  if (v20 < v22)
    v23 = v20;
  if (v22 < 0)
    v23 = 0;
  return v23 + v18;
}

unint64_t _dispatch_source_debug_attr(uint64_t a1, char *a2, unint64_t a3)
{
  int v4;
  unint64_t v5;

  v4 = OUTLINED_FUNCTION_1_2((int)"deleted, ", a2, "target = %s[%p], ident = 0x%x, mask = 0x%x, pending_data = 0x%llx, registered = %d, armed = %d, %s%s%s");
  v5 = v4;
  if (v4 >= a3)
    v5 = a3;
  if (v4 >= 0)
    return v5;
  else
    return 0;
}

unint64_t _dispatch_timer_debug_attr(int a1, char *a2, unint64_t a3)
{
  int v4;
  unint64_t v5;

  v4 = OUTLINED_FUNCTION_1_2(a1, a2, "timer = { target = 0x%llx, deadline = 0x%llx, interval = 0x%llx, flags = 0x%x }, ");
  v5 = v4;
  if (v4 >= a3)
    v5 = a3;
  if (v4 >= 0)
    return v5;
  else
    return 0;
}

void dispatch_source_create_cold_2(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot target source to the cooperative root queue - not implemented";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_source_xref_dispose_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of a source that has not been cancelled, but has a mandat"
                         "ory cancel handler";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_source_merge_data_cold_1(char a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid source type";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_source_will_reenable_kevent_4NW_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: _dispatch_source_will_reenable_kevent_4NW not called from within "
                         "the event handler";
  __break(1u);
}

void dispatch_source_cancel_and_wait_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Source is suspended";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_source_cancel_and_wait_cold_2(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_source_cancel_and_wait called from a source handler";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_source_cancel_and_wait_cold_3(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Dispatch source used after last release";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_source_cancel_and_wait_cold_4(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Source has a cancel handler";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_source_merge_evt_cold_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(unsigned int *)(a1 + 24);
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected EV_VANISHED (do not destroy random mach ports or file descriptors)";
  qword_61258 = v1;
  __break(1u);
}

uint64_t _dispatch_mach_msg_debug(_DWORD *a1, char *a2, unint64_t a3)
{
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  size_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  size_t v39;
  unint64_t v40;
  int v41;
  unint64_t v42;

  object_getClassName(a1);
  v7 = OUTLINED_FUNCTION_3_1(a2, v6, "%s[%p] = { ");
  v8 = v7;
  if (v7 >= a3)
    v8 = a3;
  if (v7 >= 0)
    v9 = v8;
  else
    v9 = 0;
  v10 = v9 + OUTLINED_FUNCTION_2_1();
  v11 = a1 + 22;
  v12 = snprintf(&a2[v10], a3 - v10, "opts/err = 0x%x, msgh[%p] = { ", a1[12], a1 + 22);
  v14 = v12;
  if (a3 - v10 < v12)
    v14 = a3 - v10;
  if (v12 < 0)
    v14 = 0;
  if (a1[18])
    v11 = *(_DWORD **)v11;
  v15 = v14 + v10;
  if (v11[5])
  {
    v16 = (char *)OUTLINED_FUNCTION_3_2();
    OUTLINED_FUNCTION_1_3(v16, v17, "id 0x%x, ");
    OUTLINED_FUNCTION_0_4();
    if (v19 < 0)
      v18 = 0;
    v15 += v18;
  }
  if (v11[1])
  {
    v20 = (char *)OUTLINED_FUNCTION_3_2();
    OUTLINED_FUNCTION_1_3(v20, v21, "size %u, ");
    OUTLINED_FUNCTION_0_4();
    if (v23 < 0)
      v22 = 0;
    v15 += v22;
  }
  if (*v11)
  {
    OUTLINED_FUNCTION_1_3(&a2[v15], v13, "bits <l %u, r %u");
    OUTLINED_FUNCTION_0_4();
    if (v26 < 0)
      v25 = 0;
    v27 = v25 + v15;
    if ((*v11 & 0xFFE0E0E0) != 0)
    {
      v28 = (char *)OUTLINED_FUNCTION_3_2();
      OUTLINED_FUNCTION_1_3(v28, v29, ", o 0x%x");
      OUTLINED_FUNCTION_0_4();
      if (v31 < 0)
        v30 = 0;
      v27 += v30;
    }
    OUTLINED_FUNCTION_1_3(&a2[v27], v24, ">, ");
    OUTLINED_FUNCTION_0_4();
    if (v33 < 0)
      v32 = 0;
    v15 = v32 + v27;
  }
  v34 = v11[2];
  if (v11[3])
  {
    if (v34)
      v35 = "local 0x%x, remote 0x%x";
    else
      v35 = "local 0x%x";
  }
  else if (v34)
  {
    v35 = "remote 0x%x";
  }
  else
  {
    v35 = "no ports";
  }
  OUTLINED_FUNCTION_1_3(&a2[v15], v13, v35);
  OUTLINED_FUNCTION_0_4();
  if (v38 < 0)
    v37 = 0;
  v39 = v37 + v15;
  v40 = a3 - (v37 + v15);
  v41 = OUTLINED_FUNCTION_3_1(&a2[v37 + v15], v36, " } }");
  v42 = v41;
  if (v40 < v41)
    v42 = v40;
  if (v41 < 0)
    v42 = 0;
  return v42 + v39;
}

uint64_t _dispatch_mach_debug(id a1, char *a2, unint64_t a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;

  if (!*((_QWORD *)a1 + 9) || (*((_WORD *)a1 + 58) & 8) != 0)
    object_getClassName(a1);
  v6 = OUTLINED_FUNCTION_3_1(a2, (uint64_t)a2, "%s[%p] = { ");
  v7 = v6;
  if (v6 >= a3)
    v7 = a3;
  if (v6 >= 0)
    v8 = v7;
  else
    v8 = 0;
  v9 = v8 + OUTLINED_FUNCTION_2_1();
  v10 = v9 + _dispatch_mach_debug_attr((uint64_t)a1, &a2[v9], a3 - v9);
  v11 = a3 - v10;
  v13 = OUTLINED_FUNCTION_3_1(&a2[v10], v12, "}");
  v14 = v13;
  if (v11 < v13)
    v14 = v11;
  if (v13 < 0)
    v14 = 0;
  return v14 + v10;
}

size_t _dispatch_mach_debug_attr(uint64_t a1, char *__str, size_t __size)
{
  _QWORD *v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  const char *v8;
  int v9;
  size_t v10;

  v4 = *(_QWORD **)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 120);
  v6 = (const char *)&unk_416A6;
  if (v4)
  {
    v7 = (const char *)v4[9];
    if (!v7)
      v7 = (const char *)&unk_416A6;
  }
  else
  {
    v7 = (const char *)&unk_416A6;
  }
  if ((*(_BYTE *)(v5 + 30) & 1) != 0)
    v8 = " (armed)";
  else
    v8 = (const char *)&unk_416A6;
  if (*(_QWORD *)(v5 + 48))
    v6 = " (pending)";
  v9 = snprintf(__str, __size, "target = %s[%p], receive = 0x%x, send = 0x%x, send-possible = 0x%x%s, checkin = 0x%x%s, send state = %016llx, disconnected = %d, canceled = %d ", v7, v4, *(_DWORD *)(*(_QWORD *)(a1 + 88) + 24), *(_DWORD *)(v5 + 92), *(_DWORD *)(v5 + 24), v8, *(_DWORD *)(v5 + 96), v6, *(_QWORD *)(v5 + 64), *(_DWORD *)(v5 + 88), (*(_DWORD *)(a1 + 80) >> 28) & 1);
  v10 = v9;
  if (v9 >= __size)
    v10 = __size;
  if (v9 >= 0)
    return v10;
  else
    return 0;
}

void dispatch_mach_hooks_install_4libxpc_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: trying to install hooks with unsupported version";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_mach_hooks_install_4libxpc_cold_2()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_mach_hooks_install_4libxpc called twice";
  qword_61258 = (uint64_t)_dispatch_mach_xpc_hooks;
  __break(1u);
}

void _dispatch_mach_create_cold_2(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot target object to cooperative root queue - not implemented";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_mach_connect_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Channel already connected";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_mach_arm_no_senders_cold_2(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Mach port notification collision";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_mach_merge_msg_cold_1()
{
  _dispatch_bug(687, 0);
}

void _dispatch_mach_merge_msg_cold_2(uint64_t a1)
{
  uint64_t v1;

  v1 = *(unsigned int *)(a1 + 24);
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected EV_VANISHED (do not destroy random mach ports)";
  qword_61258 = v1;
  __break(1u);
}

void _dispatch_mach_send_and_wait_for_reply_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid reply port";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_mach_send_and_wait_for_reply_cold_2(int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from mach_msg_receive";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_mach_send_and_wait_for_reply_cold_3(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Overlarge message";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_mach_send_and_wait_for_reply_cold_4(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Reply received on unexpected port";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_mach_send_and_wait_for_reply_cold_5()
{
  _dispatch_bug(831, 0);
}

void _dispatch_mach_send_and_wait_for_reply_cold_6()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unable to allocate reply port, possible port leak";
  __break(1u);
}

void _dispatch_mach_handoff_context_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Trying to handoff IPC from non IPC context";
  __break(1u);
}

void _dispatch_mach_handoff_context_cold_2()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Calling dispatch_mach_handoff_reply multiple times from the same context";
  __break(1u);
}

void _dispatch_mach_install_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Channel never connected";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_mach_msg_create_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Empty message";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_mach_msg_create_cold_2(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Message size too large";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_mach_msg_get_filter_policy_id_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Filter id should be non-NULL";
  qword_61258 = 0;
  __break(1u);
}

void dispatch_mach_msg_get_filter_policy_id_cold_2(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Trailer doesn't contain filter policy id";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_mach_msg_get_filter_policy_id_cold_3(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Trailer format is invalid";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_mach_msg_get_filter_policy_id_cold_4(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Messsage should be non-NULL";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_mach_mig_demux_cold_1(int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_mach_mig_demux: mach_msg(MACH_SEND_MSG) failed";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_mach_mig_demux_get_context_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_mach_mig_demux_get_context not called from dispatch_mach"
                         "_mig_demux context";
  __break(1u);
}

void _dispatch_sync_ipc_handoff_begin_cold_1(int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_unote_unregister_muxed_cold_1()
{
  _dispatch_bug(1236, 0);
}

void _dispatch_unote_unregister_direct_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unregistration failed";
  __break(1u);
}

void _dispatch_event_loop_leave_immediate_cold_2(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid workloop owner, possible memory corruption";
  qword_61258 = v1;
  __break(1u);
}

void _dispatch_event_loop_leave_immediate_cold_3(unsigned int *a1, unsigned __int16 a2)
{
  unint64_t v2;

  v2 = ((unint64_t)a2 << 16) | ((unint64_t)*a1 << 32) | 2;
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
  qword_61258 = v2;
  __break(1u);
}

void _dispatch_event_loop_leave_immediate_cold_4(int *a1)
{
  uint64_t v1;

  v1 = *a1;
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Broken priority";
  qword_61258 = v1;
  __break(1u);
}

void _dispatch_event_loop_leave_deferred_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Waking up a kq with cooperative thread request is not supported";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_event_loop_cancel_waiter_cold_2(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 64);
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid workloop owner, possible memory corruption";
  qword_61258 = v1;
  __break(1u);
}

void _dispatch_event_loop_cancel_waiter_cold_3(uint64_t a1, unsigned __int16 a2)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
  qword_61258 = ((unint64_t)a2 << 16) | (a1 << 32) | 2;
  __break(1u);
}

void _dispatch_event_loop_wake_owner_cold_4(uint64_t a1, unsigned __int16 a2)
{
  unint64_t v2;

  v2 = ((unint64_t)a2 << 16) | ((unint64_t)*(unsigned int *)(a1 + 24) << 32) | 2;
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
  qword_61258 = v2;
  __break(1u);
}

void _dispatch_event_loop_wake_owner_cold_5(uint64_t a1)
{
  uint64_t v1;

  v1 = *(int *)(a1 + 12);
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Broken priority";
  qword_61258 = v1;
  __break(1u);
}

void _dispatch_event_loop_wait_for_ownership_cold_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 72 * a2 + 64);
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid workloop owner, possible memory corruption";
  qword_61258 = v2;
  __break(1u);
}

void _dispatch_event_loop_wait_for_ownership_cold_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(int *)(a1 + 72 * a2 + 12);
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Broken priority";
  qword_61258 = v2;
  __break(1u);
}

void _dispatch_mach_msg_sender_is_kernel_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: message received without expected trailer";
  __break(1u);
}

void _dispatch_mach_host_port_init_cold_1(int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Could not get unprivileged host port";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_mach_recv_direct_merge_evt_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected EV_VANISHED (do not destroy random mach ports)";
  __break(1u);
}

void _dispatch_kevent_mach_msg_recv_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Overlarge message received";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_kevent_mach_msg_recv_cold_2(uint64_t a1)
{
  uint64_t v1;

  v1 = *(int *)(a1 + 20);
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Received message with MACH_PORT_NULL msgh_local_port";
  qword_61258 = v1;
  __break(1u);
}

void _dispatch_kq_init_cold_1(int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Failed to initalize workqueue kevent";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_kevent_mach_notify_resume_cold_1(int a1, _QWORD *a2)
{
  _dispatch_bug(2935, a1);
  *a2 &= 0xFFFFFFF2uLL;
}

uint64_t _dispatch_kevent_mach_notify_resume_cold_3(unsigned int a1, mach_port_name_t *a2, _DWORD *a3)
{
  uint64_t result;

  _dispatch_bug(2938, a1);
  result = mach_port_deallocate(mach_task_self_, *a2);
  *a3 = result;
  if ((_DWORD)result == -301)
  {
    qword_61228 = (uint64_t)"MIG_REPLY_MISMATCH";
    qword_61258 = -301;
    __break(1u);
  }
  if ((_DWORD)result)
    return 1;
  return result;
}

size_t voucher_kvoucher_debug(ipc_space_read_t a1, mach_port_name_t a2, uint64_t a3, unint64_t a4, unint64_t a5, const char *a6, unint64_t a7)
{
  size_t v7;
  kern_return_t v15;
  mach_error_t v16;
  size_t v17;
  int v18;
  size_t v19;
  size_t v20;
  int v21;
  size_t v22;
  size_t v23;
  unint64_t v24;
  uint8_t *v25;
  int v26;
  char *v27;
  uint64_t v28;
  int v29;
  size_t v30;
  uint64_t v31;
  int v32;
  size_t v33;
  char *v34;
  uint64_t v35;
  int v36;
  size_t v37;
  char *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int v44;
  char *v45;
  size_t v46;
  uint64_t v47;
  int v48;
  char *v49;
  size_t v50;
  char *v51;
  size_t v52;
  uint64_t v53;
  int v54;
  char *v55;
  size_t v56;
  uint64_t v57;
  int v58;
  const char *v59;
  unint64_t v60;
  size_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint8_t *v65;
  uint64_t v66;
  char *v67;
  size_t v68;
  uint64_t v69;
  int v70;
  char *v71;
  uint64_t v72;
  int v73;
  char *v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  char *v79;
  size_t v80;
  uint64_t v81;
  int v82;
  char *v84;
  size_t v85;
  uint64_t v86;
  int v87;
  char *v88;
  size_t v89;
  uint64_t v90;
  int v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  size_t v96;
  int v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  size_t v106;
  const char *v108;
  const char *v109;
  unint64_t v110;
  const char *v111;
  unsigned int object_addr[2];
  mach_msg_type_number_t recipesCnt[3];
  uint8_t recipes[8209];

  bzero(recipes, 0x2000uLL);
  *(_QWORD *)object_addr = 0;
  *(_QWORD *)recipesCnt = 0x2000;
  if (mach_port_kernel_object(a1, a2, object_addr, &object_addr[1]) || object_addr[0] != 37)
  {
    if (a6)
    {
      v92 = (char *)OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_1_1(v92, v93, "%s");
      OUTLINED_FUNCTION_0_2();
      if (v95 < 0)
        v94 = 0;
      a5 += v94;
    }
    if (a4 >= a5)
      v96 = a4 - a5;
    else
      v96 = 0;
    v97 = snprintf((char *)(a3 + a5), v96, "Invalid voucher: 0x%x\n");
    goto LABEL_119;
  }
  v15 = mach_voucher_debug_info(a1, a2, recipes, recipesCnt);
  if (v15)
  {
    v16 = v15;
    if (v15 != 46)
    {
      if (a6)
      {
        v98 = (char *)OUTLINED_FUNCTION_2_2();
        OUTLINED_FUNCTION_1_1(v98, v99, "%s");
        OUTLINED_FUNCTION_0_2();
        if (v101 < 0)
          v100 = 0;
        a5 += v100;
      }
      if (a4 >= a5)
        v96 = a4 - a5;
      else
        v96 = 0;
      mach_error_string(v16);
      v97 = snprintf((char *)(a3 + a5), v96, "Voucher: 0x%x Failed to get contents %s\n");
      goto LABEL_119;
    }
  }
  if (!*(_QWORD *)recipesCnt)
  {
    if (a6)
    {
      v102 = (char *)OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_1_1(v102, v103, "%s");
      OUTLINED_FUNCTION_0_2();
      if (v105 < 0)
        v104 = 0;
      a5 += v104;
    }
    if (a4 >= a5)
      v96 = a4 - a5;
    else
      v96 = 0;
    v97 = snprintf((char *)(a3 + a5), v96, "Voucher: 0x%x has no contents\n");
LABEL_119:
    v106 = v97;
    if (v96 < v97)
      v106 = v96;
    if (v97 < 0)
      v106 = 0;
    return v106 + a5;
  }
  if (a6)
  {
    if (a4 >= a5)
      v17 = a4 - a5;
    else
      v17 = 0;
    v18 = snprintf((char *)(a3 + a5), v17, "%s", a6);
    v19 = v18;
    if (v17 < v18)
      v19 = v17;
    if (v18 < 0)
      v19 = 0;
    a5 += v19;
  }
  if (a4 >= a5)
    v20 = a4 - a5;
  else
    v20 = 0;
  v21 = snprintf((char *)(a3 + a5), v20, "Voucher: 0x%x\n", object_addr[1]);
  v22 = v21;
  if (v20 < v21)
    v22 = v20;
  if (v21 < 0)
    v22 = 0;
  v23 = v22 + a5;
  if (*(_QWORD *)recipesCnt)
  {
    v110 = a7;
    v111 = a6;
    v24 = 0;
    while (1)
    {
      v25 = &recipes[v24];
      v26 = *(_DWORD *)&recipes[v24];
      if (v26)
        break;
LABEL_93:
      v24 = (v24 + *((_DWORD *)v25 + 3) + 16);
      if (*(_QWORD *)recipesCnt <= v24)
        return v23;
    }
    if (a6)
    {
      v27 = (char *)OUTLINED_FUNCTION_6();
      snprintf(v27, v7, "%s", a6);
      OUTLINED_FUNCTION_0_5();
      if (v29 < 0)
        v28 = 0;
      v23 += v28;
      v26 = *(_DWORD *)v25;
    }
    if (a4 >= v23)
      v30 = a4 - v23;
    else
      v30 = 0;
    snprintf((char *)(a3 + v23), v30, "Key: %u, ", v26);
    OUTLINED_FUNCTION_0_5();
    if (v32 < 0)
      v31 = 0;
    v33 = v31 + v23;
    v34 = (char *)OUTLINED_FUNCTION_8();
    snprintf(v34, v23, "Command: %u, ", *((_DWORD *)v25 + 1));
    OUTLINED_FUNCTION_1_4();
    if (v36 < 0)
      v35 = 0;
    v37 = v35 + v33;
    v38 = (char *)OUTLINED_FUNCTION_8();
    snprintf(v38, v23, "Previous voucher: 0x%x, ", *((_DWORD *)v25 + 2));
    OUTLINED_FUNCTION_1_4();
    if (v40 < 0)
      v39 = 0;
    v41 = v39 + v37;
    v42 = (char *)OUTLINED_FUNCTION_8();
    snprintf(v42, v23, "Content size: %u\n", *((_DWORD *)v25 + 3));
    OUTLINED_FUNCTION_1_4();
    if (v44 < 0)
      v43 = 0;
    v7 = v43 + v41;
    if (*(_DWORD *)v25 == 3)
    {
      if (a6)
      {
        v51 = (char *)OUTLINED_FUNCTION_7();
        snprintf(v51, v52, "%s", v108);
        OUTLINED_FUNCTION_1_4();
        if (v54 < 0)
          v53 = 0;
        v7 += v53;
      }
      v55 = (char *)OUTLINED_FUNCTION_4_2();
      snprintf(v55, v56, "RESOURCE ACCOUNTING INFO: %s");
      goto LABEL_52;
    }
    if (*(_DWORD *)v25 == 2)
    {
      if (a6)
      {
        v45 = (char *)OUTLINED_FUNCTION_7();
        snprintf(v45, v46, "%s", v108);
        OUTLINED_FUNCTION_1_4();
        if (v48 < 0)
          v47 = 0;
        v7 += v47;
      }
      v49 = (char *)OUTLINED_FUNCTION_4_2();
      snprintf(v49, v50, "IMPORTANCE INFO: %s");
LABEL_52:
      OUTLINED_FUNCTION_1_4();
      if (v58 < 0)
        v57 = 0;
      v23 = v57 + v7;
      goto LABEL_89;
    }
    v59 = a6;
    if (*((unsigned int *)v25 + 3) >= v110)
      v60 = v110;
    else
      v60 = *((unsigned int *)v25 + 3);
    if (a4 >= v7)
      v61 = a4 - v7;
    else
      v61 = 0;
    snprintf((char *)(a3 + v7), v61, "%s%s:\n", v59, "Recipe Contents");
    OUTLINED_FUNCTION_1_4();
    if (v63 < 0)
      v62 = 0;
    v23 = v62 + v7;
    if (v60)
    {
      v64 = 0;
      v65 = v25 + 16;
      do
      {
        v66 = v64 & 0xF;
        if ((v64 & 0xF) == 0)
        {
          if (v64)
          {
            v67 = (char *)OUTLINED_FUNCTION_3_3();
            snprintf(v67, v68, "  %s\n", v109);
            OUTLINED_FUNCTION_0_5();
            if (v70 < 0)
              v69 = 0;
            v23 += v69;
          }
          v71 = (char *)OUTLINED_FUNCTION_6();
          snprintf(v71, v7, "%s  %04lx ", v111, v64);
          OUTLINED_FUNCTION_0_5();
          if (v73 < 0)
            v72 = 0;
          v23 += v72;
        }
        v74 = (char *)OUTLINED_FUNCTION_6();
        snprintf(v74, v7, " %02x", v65[v64]);
        OUTLINED_FUNCTION_0_5();
        if (v76 < 0)
          v75 = 0;
        v23 += v75;
        v77 = v65[v64];
        if ((v77 - 127) < 0xFFFFFFA1)
          LOBYTE(v77) = 46;
        recipes[v66 + 0x2000] = v77;
        ++v64;
      }
      while (v60 != v64);
      recipes[v66 + 8193] = 0;
      if ((v60 & 0xF) == 0)
      {
        a6 = v111;
LABEL_89:
        if (*(_BYTE *)(v23 + a3 - 1) != 10)
        {
          v88 = (char *)OUTLINED_FUNCTION_9();
          snprintf(v88, v89, "\n");
          OUTLINED_FUNCTION_0_5();
          if (v91 < 0)
            v90 = 0;
          v23 += v90;
        }
        goto LABEL_93;
      }
      v78 = v60 + 1;
      do
      {
        v79 = (char *)OUTLINED_FUNCTION_9();
        snprintf(v79, v80, "   ");
        OUTLINED_FUNCTION_0_5();
        if (v82 < 0)
          v81 = 0;
        v23 += v81;
      }
      while ((v78++ & 0xF) != 0);
      v84 = (char *)OUTLINED_FUNCTION_3_3();
      snprintf(v84, v85, "  %s\n", v109);
      OUTLINED_FUNCTION_0_5();
      if (v87 < 0)
        v86 = 0;
      v23 += v86;
    }
    a6 = v111;
    goto LABEL_89;
  }
  return v23;
}

void _voucher_task_mach_voucher_init_cold_2(int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Could not create task mach voucher";
  qword_61258 = a1;
  __break(1u);
}

void _voucher_find_and_retain_cold_1()
{
  qword_61228 = (uint64_t)"API MISUSE: Voucher over-release";
  __break(1u);
}

void _voucher_insert_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: base voucher has nested base voucher";
  qword_61258 = a1;
  __break(1u);
}

void _voucher_insert_cold_2(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: base voucher has non-zero activity value";
  qword_61258 = a1;
  __break(1u);
}

void _voucher_insert_cold_3()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Voucher corruption";
  __break(1u);
}

void _voucher_create_with_mach_msgv_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Invalid msg aux data size.";
  qword_61258 = a1;
  __break(1u);
}

void voucher_decrement_importance_count4CF_cold_1(uint64_t a1, int a2)
{
  _dispatch_bug(766, a1);
  if (a2 == 5)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Voucher importance count underflow";
    qword_61258 = a1;
    __break(1u);
  }
}

void _voucher_activity_debug_channel_init_cold_1(int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Couldn't get debug control port";
  qword_61258 = a1;
  __break(1u);
}

void _voucher_process_can_use_arbitrary_personas_init_cold_1(int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: mach_voucher_attr_command(BANK_PERSONA_ADOPT_ANY) failed";
  qword_61258 = a1;
  __break(1u);
}

void voucher_activity_initialize_4libtrace_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: unsupported vah_version";
  qword_61258 = a1;
  __break(1u);
}

void voucher_activity_initialize_4libtrace_cold_2()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: voucher_activity_initialize_4libtrace called twice";
  qword_61258 = _voucher_libtrace_hooks;
  __break(1u);
}

void voucher_activity_create_with_data_2_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Absurd publen";
  qword_61258 = a1;
  __break(1u);
}

void voucher_activity_flush_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Allocation should always fail";
  qword_61258 = a1;
  __break(1u);
}

void firehose_buffer_create_cold_2(int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unable to allocate mach port";
  qword_61258 = a1;
  __break(1u);
}

void firehose_buffer_create_cold_4()
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Invalid values for MADVISE_CHUNK_COUNT / CHUNK_SIZE";
  qword_61258 = 0x4000;
  __break(1u);
}

void firehose_client_reconnect_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid size for the firehose buffer";
  qword_61258 = a1;
  __break(1u);
}

void firehose_client_reconnect_cold_3(int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unable to register with logd";
  qword_61258 = a1;
  __break(1u);
}

void firehose_client_reconnect_cold_9(int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unable to make memory port";
  qword_61258 = a1;
  __break(1u);
}

void firehose_drain_notifications_once_cold_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(int *)(a1 + 20);
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: firehose_mig_server doesn't handle replies";
  qword_61258 = v1;
  __break(1u);
}

void firehose_drain_notifications_once_cold_2(int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: firehose_drain_notifications_once() failed";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_io_debug(void *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_2_3(a1);
  OUTLINED_FUNCTION_1_5(v1, v2, "%s[%p] = { ");
  OUTLINED_FUNCTION_0_6();
  if (v4 >= 0)
    v5 = v3;
  else
    v5 = 0;
  OUTLINED_FUNCTION_3_4();
  v6 = OUTLINED_FUNCTION_5_1();
  v8 = _dispatch_io_debug_attr(v6, v7);
  OUTLINED_FUNCTION_1_5(&v1[v5 + v8], v9, "}");
  OUTLINED_FUNCTION_4_3();
}

uint64_t _dispatch_io_debug_attr(uint64_t a1, char *a2)
{
  uint64_t v2;
  int v3;

  OUTLINED_FUNCTION_1_5(a2, (uint64_t)a2, "type = %s, fd = 0x%lx, %sfd_entry = %p, queue = %p, target = %s[%p], barrier_queue = %p, barrier_group = %p, err = 0x%x, low = 0x%zx, high = 0x%zx, interval%s = %llu ");
  OUTLINED_FUNCTION_0_6();
  if (v3 >= 0)
    return v2;
  else
    return 0;
}

void _dispatch_operation_debug(void *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_2_3(a1);
  OUTLINED_FUNCTION_1_5(v1, v2, "%s[%p] = { ");
  OUTLINED_FUNCTION_0_6();
  if (v4 >= 0)
    v5 = v3;
  else
    v5 = 0;
  OUTLINED_FUNCTION_3_4();
  v6 = OUTLINED_FUNCTION_5_1();
  v8 = _dispatch_operation_debug_attr(v6, v7);
  OUTLINED_FUNCTION_1_5(&v1[v5 + v8], v9, "}");
  OUTLINED_FUNCTION_4_3();
}

uint64_t _dispatch_operation_debug_attr(uint64_t a1, char *a2)
{
  uint64_t v2;
  int v3;

  OUTLINED_FUNCTION_1_5(a2, (uint64_t)a2, "type = %s %s, fd = 0x%lx, fd_entry = %p, channel = %p, queue = %p -> %s[%p], target = %s[%p], offset = %lld, length = %zu, done = %zu, undelivered = %zu, flags = %u, err = 0x%x, low = 0x%zx, high = 0x%zx, interval%s = %llu ");
  OUTLINED_FUNCTION_0_6();
  if (v3 >= 0)
    return v2;
  else
    return 0;
}

uint64_t _dispatch_data_debug(_QWORD *a1, char *__str, size_t __size)
{
  int v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  size_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  _QWORD *v18;
  int v19;
  size_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  size_t v24;
  int v25;
  size_t v26;
  uint64_t v28;
  uint64_t v29;

  v6 = snprintf(__str, __size, "data[%p] = { ", a1);
  v8 = v6;
  if (v6 >= __size)
    v8 = __size;
  if (v6 >= 0)
    v9 = v8;
  else
    v9 = 0;
  v10 = &__str[v9];
  if (a1[7])
  {
    OUTLINED_FUNCTION_1_1(v10, v7, "composite, size = %zd, num_records = %zd ");
    OUTLINED_FUNCTION_0_2();
    if (v13 < 0)
      v12 = 0;
    v14 = v12 + v9;
    if (a1[4])
    {
      OUTLINED_FUNCTION_1_1(&__str[v14], v11, ", flatbuf = %p ");
      OUTLINED_FUNCTION_0_2();
      if (v16 < 0)
        v15 = 0;
      v14 += v15;
    }
    v17 = 0;
    v18 = a1 + 10;
    do
    {
      v19 = snprintf(&__str[v14], __size - v14, "record[%zd] = { from = %zd, length = %zd, data_object = %p }, ", v17, *(v18 - 1), *v18, (const void *)*(v18 - 2));
      v20 = v19;
      if (__size - v14 < v19)
        v20 = __size - v14;
      if (v19 < 0)
        v20 = 0;
      v14 += v20;
      ++v17;
      v21 = a1[7];
      if (v21 <= 1)
        v21 = 1;
      v18 += 3;
    }
    while (v17 < v21);
  }
  else
  {
    v28 = a1[6];
    v29 = a1[4];
    OUTLINED_FUNCTION_1_1(v10, v7, "leaf, size = %zd, buf = %p ");
    OUTLINED_FUNCTION_0_2();
    if (v23 < 0)
      v22 = 0;
    v14 = v22 + v9;
  }
  v24 = __size - v14;
  v25 = snprintf(&__str[v14], v24, "}", v28, v29);
  v26 = v25;
  if (v24 < v25)
    v26 = v24;
  if (v25 < 0)
    v26 = 0;
  return v26 + v14;
}

void dispatch_data_create_subrange_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: dispatch_data_create_subrange out of bounds";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_data_copy_region_cold_1(uint64_t a1, uint64_t a2)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: dispatch_data_copy_region out of bounds";
  qword_61258 = a1 + a2;
  __break(1u);
}

void _dispatch_introspection_continuation_get_info_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unknown dc vtable type";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_introspection_continuation_get_info_cold_3()
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Handled by the caller";
  __break(1u);
}

void _dispatch_introspection_target_queue_changed_cold_1(_QWORD *a1, uint64_t *a2)
{
  const char *v3;
  unint64_t StatusReg;
  unsigned int v5;
  unsigned int v7;
  unsigned int v8;

  v3 = (const char *)a1[9];
  if (!v3)
    v3 = (const char *)&unk_416A6;
  _dispatch_log("BUG IN CLIENT OF LIBDISPATCH: queue inversion debugging expects queues to not participate in dispatch_sync() before their setup is complete\nforgetting that queue 0x%p[%s] participated as %s of a dispatch_sync", a1, v3, "both an initiator and a recipient");
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(&dword_6128C))
  {
    if (!__stxr(v5, &dword_6128C))
      goto LABEL_8;
  }
  __clrex();
  _dispatch_unfair_lock_lock_slow((uint64_t)&dword_6128C, 0x10000);
LABEL_8:
  _dispatch_introspection_queue_order_dispose(*a2);
  v7 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    v8 = __ldxr(&dword_6128C);
  while (__stlxr(0, &dword_6128C));
  if (v8 != v7)
    _dispatch_unfair_lock_unlock_slow((uint64_t)&dword_6128C, v8);
}

void _dispatch_introspection_target_queue_changed_cold_2(_QWORD *a1)
{
  const char *v1;

  v1 = (const char *)a1[9];
  if (!v1)
    v1 = (const char *)&unk_416A6;
  _dispatch_log("BUG IN CLIENT OF LIBDISPATCH: queue inversion debugging cannot be used with code that changes the target of a queue already targeted by other dispatch objects\nqueue %p[%s] was already targeted by other dispatch objects", a1, v1);
  byte_61298 = 0;
}

void j__dispatch_introspection_hook_queue_callout_begin(dispatch_queue_t queue, void *context, dispatch_function_t function)
{
  dispatch_introspection_hook_queue_callout_begin(queue, context, function);
}

void j__dispatch_introspection_hook_queue_callout_end(dispatch_queue_t queue, void *context, dispatch_function_t function)
{
  dispatch_introspection_hook_queue_callout_end(queue, context, function);
}

void j__dispatch_introspection_hook_queue_create(dispatch_queue_t queue)
{
  dispatch_introspection_hook_queue_create(queue);
}

void j__dispatch_introspection_hook_queue_destroy(dispatch_queue_t queue)
{
  dispatch_introspection_hook_queue_destroy(queue);
}

void j__dispatch_introspection_hook_queue_item_complete(dispatch_object_t item)
{
  dispatch_introspection_hook_queue_item_complete(item);
}

void j__dispatch_introspection_hook_queue_item_dequeue(dispatch_queue_t queue, dispatch_object_t item)
{
  dispatch_introspection_hook_queue_item_dequeue(queue, item);
}

void j__dispatch_introspection_hook_queue_item_enqueue(dispatch_queue_t queue, dispatch_object_t item)
{
  dispatch_introspection_hook_queue_item_enqueue(queue, item);
}

id objc_msgSend__activate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_activate");
}

id objc_msgSend__getContext(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getContext");
}

id objc_msgSend__resume(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_resume");
}

id objc_msgSend__setContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setContext:");
}

id objc_msgSend__setFinalizer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setFinalizer:");
}

id objc_msgSend__setTargetQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setTargetQueue:");
}

id objc_msgSend__suspend(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_suspend");
}

id objc_msgSend__xref_dispose(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_xref_dispose");
}

id objc_msgSend_dealloc(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dealloc");
}

id objc_msgSend_debugDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "debugDescription");
}

id objc_msgSend_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:");
}

id objc_msgSend_initWithBytes_length_copy_freeWhenDone_bytesAreVM_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBytes:length:copy:freeWhenDone:bytesAreVM:");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "length");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithUTF8String:");
}
