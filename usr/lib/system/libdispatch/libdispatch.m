void _os_eventlink_dispose_VARIANT_mp(uint64_t a1)
{
  mach_port_name_t v2;
  mach_port_name_t v3;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    free(*(void **)(a1 + 16));
  v2 = *(_DWORD *)(a1 + 32);
  if (v2 + 1 >= 2)
    mach_port_deallocate(*MEMORY[0x1E0C883F0], v2);
  v3 = *(_DWORD *)(a1 + 36);
  if (v3 + 1 >= 2)
    mach_port_deallocate(*MEMORY[0x1E0C883F0], v3);
}

_DWORD *os_eventlink_create_VARIANT_mp(const char *a1)
{
  _DWORD *v2;
  const char *v3;

  v2 = _os_object_alloc((uint64_t)OS_os_eventlink, 48);
  if (v2)
  {
    if (a1)
    {
      v3 = _dispatch_strdup_if_mutable(a1);
      if (v3 != a1)
        *((_QWORD *)v2 + 3) |= 1uLL;
      *((_QWORD *)v2 + 2) = v3;
    }
  }
  else
  {
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 12;
  }
  return v2;
}

uint64_t os_eventlink_activate_VARIANT_mp(uint64_t a1)
{
  unint64_t *v1;
  int v2;
  uint64_t result;
  _DWORD *v4;
  char v6;

  v1 = (unint64_t *)(a1 + 32);
  if ((*(_DWORD *)(a1 + 32) + 1) > 1)
    return 0;
  if ((*(_BYTE *)(a1 + 24) & 2) == 0)
  {
    v2 = mach_eventlink_create();
    result = 0xFFFFFFFFLL;
    if (v2 <= 13)
    {
      if (v2)
      {
        if (v2 == 4)
        {
          result = 22;
        }
        else
        {
          if (v2 != 13)
            return result;
          result = 37;
        }
      }
      else
      {
        while (!__ldxr(v1))
        {
          if (!__stxr(0, v1))
          {
            v6 = 1;
            goto LABEL_24;
          }
        }
        v6 = 0;
        __clrex();
LABEL_24:
        if ((v6 & 1) == 0)
          return 22;
        result = 0;
      }
      goto LABEL_26;
    }
    if (v2 > 36)
    {
      if (v2 != 37)
      {
        if (v2 != 49)
          return result;
        result = 60;
        goto LABEL_26;
      }
    }
    else
    {
      if (v2 == 14)
      {
        result = 53;
        goto LABEL_26;
      }
      if (v2 != 15)
        return result;
    }
    result = 89;
LABEL_26:
    v4 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    goto LABEL_27;
  }
  v4 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  result = 89;
LABEL_27:
  *v4 = result;
  return result;
}

uint64_t os_eventlink_extract_remote_port_VARIANT_mp(uint64_t a1, unsigned int *a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t result;
  _DWORD *v5;

  if (!*(_DWORD *)(a1 + 32))
  {
LABEL_9:
    v5 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    result = 22;
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) == 0)
  {
    v2 = (unsigned int *)(a1 + 36);
    do
      v3 = __ldxr(v2);
    while (__stxr(0, v2));
    if (v3 - 1 < 0xFFFFFFFE)
    {
      result = 0;
      *a2 = v3;
      return result;
    }
    goto LABEL_9;
  }
  v5 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  result = 89;
LABEL_10:
  *v5 = result;
  return result;
}

_DWORD *os_eventlink_create_with_port_VARIANT_mp(const char *a1, mach_port_name_t a2)
{
  _DWORD *v4;
  const char *v5;

  v4 = _os_object_alloc((uint64_t)OS_os_eventlink, 48);
  if (v4)
  {
    if (a1)
    {
      v5 = _dispatch_strdup_if_mutable(a1);
      if (v5 != a1)
        *((_QWORD *)v4 + 3) |= 1uLL;
      *((_QWORD *)v4 + 2) = v5;
    }
    if (mach_port_mod_refs(*MEMORY[0x1E0C883F0], a2, 0, 1))
      os_eventlink_create_with_port_VARIANT_mp_cold_1();
    if (v4[8])
      os_eventlink_create_with_port_VARIANT_mp_cold_1();
    v4[8] = a2;
  }
  else
  {
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 12;
  }
  return v4;
}

_DWORD *os_eventlink_create_remote_with_eventlink_VARIANT_mp(const char *a1, uint64_t a2)
{
  int v3;
  mach_port_name_t v5;
  _DWORD *v6;
  mach_port_name_t v7;

  v7 = 0;
  v3 = os_eventlink_extract_remote_port_VARIANT_mp(a2, &v7);
  if (v3)
  {
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = v3;
    return 0;
  }
  else
  {
    v5 = v7;
    v6 = os_eventlink_create_with_port_VARIANT_mp(a1, v7);
    mach_port_mod_refs(*MEMORY[0x1E0C883F0], v5, 0, -1);
    return v6;
  }
}

uint64_t os_eventlink_associate_VARIANT_mp(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t StatusReg;
  int v4;

  if (!*(_DWORD *)(a1 + 32))
  {
    result = 22;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_25:
    **(_DWORD **)(StatusReg + 8) = result;
    return result;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    result = 89;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_25;
  }
  if (a2 != 1)
    _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v4 = mach_eventlink_associate();
  result = 0xFFFFFFFFLL;
  if (v4 <= 13)
  {
    if (v4)
    {
      if (v4 == 4)
      {
        result = 22;
      }
      else
      {
        if (v4 != 13)
          return result;
        result = 37;
      }
    }
    else
    {
      result = 0;
    }
    goto LABEL_24;
  }
  if (v4 > 36)
  {
    if (v4 != 37)
    {
      if (v4 != 49)
        return result;
      result = 60;
      goto LABEL_24;
    }
    goto LABEL_20;
  }
  if (v4 == 14)
  {
    result = 53;
    goto LABEL_24;
  }
  if (v4 == 15)
  {
LABEL_20:
    result = 89;
LABEL_24:
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_25;
  }
  return result;
}

uint64_t os_eventlink_disassociate_VARIANT_mp(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t result;
  _DWORD *v4;

  if (*(_DWORD *)(a1 + 32))
  {
    if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      return 0;
    v1 = mach_eventlink_disassociate();
    v2 = v1;
    if (v1 <= 13)
    {
      switch(v1)
      {
        case 0:
          result = 0;
          goto LABEL_20;
        case 4:
          result = 22;
          goto LABEL_20;
        case 13:
          result = 37;
          goto LABEL_20;
      }
    }
    else if (v1 > 36)
    {
      result = 0;
      if (v2 == 37)
        return result;
      if (v2 == 49)
      {
        result = 60;
        goto LABEL_20;
      }
    }
    else
    {
      if (v1 == 14)
      {
        result = 53;
        goto LABEL_20;
      }
      if (v1 == 15)
      {
        result = 89;
LABEL_20:
        v4 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        goto LABEL_21;
      }
    }
    return 0xFFFFFFFFLL;
  }
  v4 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  result = 22;
LABEL_21:
  *v4 = result;
  return result;
}

uint64_t os_eventlink_wait_until_VARIANT_mp(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;

  if (a2 != 32)
    a3 = 0;
  v8 = mach_absolute_time() + a3;
  return os_eventlink_wait_until_internal(a1, a2, v8, a4);
}

uint64_t os_eventlink_wait_until_internal(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t result;
  unint64_t StatusReg;

  if (a2 != 32)
    os_eventlink_create_with_port_VARIANT_mp_cold_1();
  if (!*(_DWORD *)(a1 + 32))
  {
    result = 22;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_11;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    result = 89;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_11;
  }
  v6 = *(_QWORD *)(a1 + 40);
  v7 = mach_eventlink_wait_until();
  v8 = v7;
  if (a4 && !v7)
  {
    *a4 = *(_QWORD *)(a1 + 40) - v6;
LABEL_7:
    result = 0;
LABEL_8:
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_11:
    **(_DWORD **)(StatusReg + 8) = result;
    return result;
  }
  result = 0xFFFFFFFFLL;
  if (v8 <= 13)
  {
    switch(v8)
    {
      case 0:
        goto LABEL_7;
      case 4:
        result = 22;
        goto LABEL_8;
      case 13:
        result = 37;
        goto LABEL_8;
    }
  }
  else if (v8 > 36)
  {
    if (v8 == 37)
    {
LABEL_26:
      result = 89;
      goto LABEL_8;
    }
    if (v8 == 49)
    {
      result = 60;
      goto LABEL_8;
    }
  }
  else
  {
    if (v8 == 14)
    {
      result = 53;
      goto LABEL_8;
    }
    if (v8 == 15)
    {
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
        os_eventlink_create_with_port_VARIANT_mp_cold_1();
      goto LABEL_26;
    }
  }
  return result;
}

uint64_t os_eventlink_wait_VARIANT_mp(uint64_t a1, _QWORD *a2)
{
  return os_eventlink_wait_until_internal(a1, 32, 0, a2);
}

uint64_t os_eventlink_signal_VARIANT_mp(uint64_t a1)
{
  int v1;
  uint64_t result;
  unint64_t StatusReg;

  if (!*(_DWORD *)(a1 + 32))
  {
    result = 22;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_22:
    **(_DWORD **)(StatusReg + 8) = result;
    return result;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    result = 89;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_22;
  }
  v1 = mach_eventlink_signal();
  result = 0xFFFFFFFFLL;
  if (v1 <= 13)
  {
    if (v1)
    {
      if (v1 == 4)
      {
        result = 22;
      }
      else
      {
        if (v1 != 13)
          return result;
        result = 37;
      }
    }
    else
    {
      result = 0;
    }
    goto LABEL_21;
  }
  if (v1 > 36)
  {
    if (v1 != 37)
    {
      if (v1 != 49)
        return result;
      result = 60;
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  if (v1 == 14)
  {
    result = 53;
    goto LABEL_21;
  }
  if (v1 == 15)
  {
LABEL_17:
    result = 89;
LABEL_21:
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_22;
  }
  return result;
}

uint64_t os_eventlink_signal_and_wait_VARIANT_mp(uint64_t a1, _QWORD *a2)
{
  return os_eventlink_signal_and_wait_until_internal(a1, 32, 0, a2);
}

uint64_t os_eventlink_signal_and_wait_until_internal(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t result;
  unint64_t StatusReg;

  if (a2 != 32)
    os_eventlink_create_with_port_VARIANT_mp_cold_1();
  if (!*(_DWORD *)(a1 + 32))
  {
    result = 22;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_11;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    result = 89;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_11;
  }
  v6 = *(_QWORD *)(a1 + 40);
  v7 = mach_eventlink_signal_wait_until();
  v8 = v7;
  if (a4 && !v7)
  {
    *a4 = *(_QWORD *)(a1 + 40) - v6;
LABEL_7:
    result = 0;
LABEL_8:
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_11:
    **(_DWORD **)(StatusReg + 8) = result;
    return result;
  }
  result = 0xFFFFFFFFLL;
  if (v8 <= 13)
  {
    switch(v8)
    {
      case 0:
        goto LABEL_7;
      case 4:
        result = 22;
        goto LABEL_8;
      case 13:
        result = 37;
        goto LABEL_8;
    }
  }
  else if (v8 > 36)
  {
    if (v8 == 37)
    {
LABEL_26:
      result = 89;
      goto LABEL_8;
    }
    if (v8 == 49)
    {
      result = 60;
      goto LABEL_8;
    }
  }
  else
  {
    if (v8 == 14)
    {
      result = 53;
      goto LABEL_8;
    }
    if (v8 == 15)
    {
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
        os_eventlink_create_with_port_VARIANT_mp_cold_1();
      goto LABEL_26;
    }
  }
  return result;
}

uint64_t os_eventlink_signal_and_wait_until_VARIANT_mp(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;

  if (a2 != 32)
    a3 = 0;
  v8 = mach_absolute_time() + a3;
  return os_eventlink_signal_and_wait_until_internal(a1, a2, v8, a4);
}

uint64_t os_eventlink_cancel_VARIANT_mp(uint64_t result)
{
  unint64_t *v1;
  unint64_t v2;
  mach_port_name_t v3;

  v1 = (unint64_t *)(result + 24);
  if ((*(_BYTE *)(result + 24) & 2) == 0)
  {
    do
      v2 = __ldxr(v1);
    while (__stxr(v2 | 2, v1));
    v3 = *(_DWORD *)(result + 32);
    if (v3 - 1 <= 0xFFFFFFFD)
    {
      if (mach_port_mod_refs(*MEMORY[0x1E0C883F0], v3, 0, 1))
        os_eventlink_create_with_port_VARIANT_mp_cold_1();
      return mach_eventlink_destroy();
    }
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0()
{
  return _os_assert_log();
}

void _os_workgroup_xref_dispose_VARIANT_mp(uint64_t a1)
{
  void (**v1)(_QWORD);

  v1 = *(void (***)(_QWORD))(a1 + 48);
  if (v1)
  {
    v1[1](*v1);
    free(v1);
  }
}

uint64_t _os_workgroup_interval_xref_dispose_VARIANT_mp(uint64_t result)
{
  if ((*(_QWORD *)(result + 24) & 8) != 0)
    _os_workgroup_interval_xref_dispose_VARIANT_mp_cold_1();
  return result;
}

void _os_workgroup_dispose_VARIANT_mp(uint64_t a1)
{
  uint64_t v2;
  mach_port_name_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_DWORD *)(a1 + 40);
  if (!v3)
    goto LABEL_6;
  if (mach_port_mod_refs(*MEMORY[0x1E0C883F0], v3, 0, -1))
  {
    _os_assumes_log();
    if ((v2 & 1) == 0)
      goto LABEL_6;
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_6;
  }
  if (work_interval_destroy())
    _os_assumes_log();
LABEL_6:
  if ((v2 & 4) != 0)
    free(*(void **)(a1 + 16));
}

uint64_t _os_workgroup_debug_VARIANT_mp(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, "wg[%p] = {xref = %d, ref = %d, name = %s}", (const void *)a1, *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 8), *(const char **)(a1 + 16));
}

uint64_t _os_workgroup_interval_dispose_VARIANT_mp()
{
  return work_interval_instance_free();
}

uint64_t _os_workgroup_tsd_cleanup_VARIANT_mp(uint64_t result)
{
  char v1[512];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C874D8];
  if (result)
    _os_workgroup_tsd_cleanup_VARIANT_mp_cold_1(v1, result);
  return result;
}

void _os_workgroup_join_token_tsd_cleanup_VARIANT_mp(_QWORD *a1, const char *a2)
{
  if (a1)
  {
    if (a1[1])
      os_eventlink_create_with_port_VARIANT_mp_cold_1();
    _os_workgroup_leave_update_wg_VARIANT_mp(a1[2], a2);
    free(a1);
  }
}

void *_os_workgroup_leave_update_wg_VARIANT_mp(uint64_t a1, const char *a2)
{
  unint64_t StatusReg;
  unsigned int *v3;
  unsigned int v4;
  void *result;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(_QWORD *)(StatusReg + 928) != a1)
    os_eventlink_create_with_port_VARIANT_mp_cold_1();
  v3 = (unsigned int *)(a1 + 60);
  do
    v4 = __ldxr(v3);
  while (__stxr(v4 - 1, v3));
  if (!v4)
    _os_workgroup_leave_update_wg_VARIANT_mp_cold_1();
  result = *(void **)(StatusReg + 928);
  *(_QWORD *)(StatusReg + 928) = 0;
  if (result)
    return _os_object_release_internal_VARIANT_mp(result, a2);
  return result;
}

uint64_t _workgroup_init_VARIANT_mp()
{
  return pthread_install_workgroup_functions_np();
}

uint64_t _os_workgroup_get_backing_workinterval_VARIANT_mp(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 40);
  return result;
}

uint64_t os_workgroup_interval_data_set_flags_VARIANT_mp(_DWORD *a1, unsigned int a2)
{
  uint64_t result;

  if (!a1)
    return 22;
  result = 22;
  if (a2 <= 1 && *a1 == 1386695757)
  {
    result = 0;
    a1[1] = a2;
  }
  return result;
}

uint64_t os_workgroup_interval_data_set_telemetry_VARIANT_mp(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2 == 1 && a4 == 40)
  {
    result = 0;
    *(_DWORD *)(a1 + 16) = 2621441;
    *(_QWORD *)(a1 + 8) = a3;
  }
  else
  {
    result = 22;
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
  }
  return result;
}

uint64_t os_workgroup_attr_set_interval_type_VARIANT_mp(uint64_t a1, int a2)
{
  BOOL v3;
  uint64_t result;

  if (!a1)
    return 22;
  v3 = *(_DWORD *)a1 == 799564740 || *(_DWORD *)a1 == 799564724;
  if (!v3 || (a2 - 1) > 9)
    return 22;
  result = 0;
  *(_WORD *)(a1 + 8) = a2;
  return result;
}

uint64_t os_workgroup_attr_set_flags_VARIANT_mp(_DWORD *a1, int a2)
{
  uint64_t result;

  if (!a1)
    return 22;
  if (*a1 != 799564740 && *a1 != 799564724)
    return 22;
  result = 0;
  a1[1] = a2;
  return result;
}

uint64_t os_workgroup_attr_set_telemetry_flavor_VARIANT_mp(uint64_t a1, int a2)
{
  BOOL v3;
  uint64_t result;

  if (!a1)
    return 22;
  v3 = *(_DWORD *)a1 == 799564740 || *(_DWORD *)a1 == 799564724;
  if (!v3 || a2 != 1)
    return 22;
  result = 0;
  *(_WORD *)(a1 + 10) = 1;
  return result;
}

void *os_workgroup_interval_copy_current_4AudioToolbox_VARIANT_mp()
{
  unsigned __int16 *v0;

  v0 = *(unsigned __int16 **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 928);
  if (v0 && v0[28] - 3 <= 1)
    return os_retain(v0);
  else
    return 0;
}

_DWORD *os_workgroup_create_VARIANT_mp(const char *a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  BOOL v6;
  _DWORD *v7;
  int *v8;
  int v9;
  uint64_t work_interval;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  if (a2)
  {
    if (*(_DWORD *)a2 != 799564740 && *(_DWORD *)a2 != 799564724)
      goto LABEL_17;
    v4 = a2[1];
    v13 = *a2;
    v14 = v4;
    v5 = a2[3];
    v15 = a2[2];
    v16 = v5;
    v6 = (_DWORD)v13 == 799564724 || (_DWORD)v13 == 799564740;
    if (!v6 || (LODWORD(v13) = 2015762650, WORD4(v13)))
    {
LABEL_17:
      v7 = 0;
      v8 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      v9 = 22;
LABEL_20:
      *v8 = v9;
      return v7;
    }
  }
  else
  {
    v13 = _os_workgroup_attr_default;
    v14 = *(_OWORD *)algn_18A06E4B0;
    v15 = xmmword_18A06E4C0;
    v16 = unk_18A06E4D0;
  }
  if ((BYTE4(v13) & 2) == 0 || WORD5(v13))
  {
    v7 = 0;
    v8 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    v9 = 45;
    goto LABEL_20;
  }
  work_interval = _os_workgroup_create_work_interval((uint64_t)&v13);
  if (!work_interval)
    return 0;
  v12 = work_interval;
  v7 = _os_object_alloc((uint64_t)OS_os_workgroup, 64);
  *((_QWORD *)v7 + 4) = v12;
  v7[10] = 0;
  *((_QWORD *)v7 + 3) = 1;
  *((_WORD *)v7 + 28) = WORD4(v13);
  _os_workgroup_set_name((uint64_t)v7, a1);
  return v7;
}

uint64_t _os_workgroup_create_work_interval(uint64_t a1)
{
  int v1;
  uint64_t result;
  int v3;

  _wg_type_to_wi_flags(*(unsigned __int16 *)(a1 + 8));
  v1 = work_interval_create();
  result = 0;
  if (!v1)
  {
    v3 = work_interval_copy_port();
    result = 0;
    if (v3 < 0)
    {
      work_interval_destroy();
      return 0;
    }
  }
  return result;
}

void _os_workgroup_set_name(uint64_t a1, const char *a2)
{
  const char *v2;
  const char *v4;
  int v5;
  BOOL v6;
  uint64_t v7;

  v2 = a2;
  if (a2)
  {
    v4 = _dispatch_strdup_if_mutable(a2);
    if (v4 != v2)
    {
      *(_QWORD *)(a1 + 24) |= 4uLL;
      v2 = v4;
    }
  }
  *(_QWORD *)(a1 + 16) = v2;
  v5 = *(_DWORD *)(a1 + 40);
  if (v5)
    v6 = (*(_QWORD *)(a1 + 24) & 1) == 0;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 == -1)
      _os_workgroup_set_name_cold_1();
    if (v2 && __strlcpy_chk() && __work_interval_ctl() == -1)
    {
      v7 = **(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if ((_DWORD)v7)
        _dispatch_bug(534, v7);
    }
  }
}

_DWORD *os_workgroup_interval_create_VARIANT_mp(const char *a1, int a2, __int128 *a3)
{
  __int128 v6;
  __int128 v7;
  int v8;
  int v9;
  _DWORD *v10;
  int *v11;
  int v12;
  uint64_t work_interval;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  if (a3)
  {
    if (*(_DWORD *)a3 != 799564740 && *(_DWORD *)a3 != 799564724)
      goto LABEL_22;
    v6 = a3[1];
    v16 = *a3;
    v17 = v6;
    v7 = a3[3];
    v18 = a3[2];
    v19 = v7;
    if ((_DWORD)v16 == 799564724)
    {
      v9 = DWORD1(v16);
      if (!DWORD1(v16))
        v9 = 2;
      DWORD1(v16) = v9;
      if (WORD4(v16) <= 1u)
        v8 = 1;
      else
        v8 = WORD4(v16);
      WORD4(v16) = v8;
    }
    else
    {
      if ((_DWORD)v16 != 799564740)
        goto LABEL_22;
      v8 = WORD4(v16);
    }
    LODWORD(v16) = 2015762650;
    if ((v8 - 1) >= 0xA)
    {
LABEL_22:
      v10 = 0;
      v11 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      v12 = 22;
      goto LABEL_23;
    }
  }
  else
  {
    v16 = _os_workgroup_interval_attr_default;
    v17 = *(_OWORD *)algn_18A06E4F0;
    v18 = xmmword_18A06E500;
    v19 = unk_18A06E510;
    LOWORD(v8) = 1;
  }
  if ((BYTE4(v16) & 4) != 0)
    goto LABEL_22;
  if ((BYTE4(v16) & 2) == 0)
  {
    v10 = 0;
    v11 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    v12 = 45;
LABEL_23:
    *v11 = v12;
    return v10;
  }
  work_interval = _os_workgroup_create_work_interval((uint64_t)&v16);
  if (!work_interval)
    return 0;
  v15 = work_interval;
  v10 = _os_object_alloc((uint64_t)OS_os_workgroup_interval, 80);
  *((_QWORD *)v10 + 4) = v15;
  v10[10] = 0;
  v10[16] = a2;
  *((_QWORD *)v10 + 9) = work_interval_instance_alloc();
  v10[17] = 0;
  *((_WORD *)v10 + 28) = v8;
  *((_QWORD *)v10 + 3) = 1;
  *((_WORD *)v10 + 22) = WORD5(v16);
  _os_workgroup_set_name((uint64_t)v10, a1);
  return v10;
}

_DWORD *os_workgroup_create_with_workload_id_VARIANT_mp(const char *a1, char *a2, __int128 *a3)
{
  __int128 v6;
  __int128 v7;
  int v8;
  int v9;
  _DWORD *v10;
  unint64_t StatusReg;
  int *v12;
  int v13;
  uint64_t work_interval;
  uint64_t v15;
  const char *v16;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  if (a3)
  {
    if (*(_DWORD *)a3 != 799564740 && *(_DWORD *)a3 != 799564724)
      goto LABEL_32;
    v6 = a3[1];
    v19 = *a3;
    v20 = v6;
    v7 = a3[3];
    v21 = a3[2];
    v22 = v7;
    if ((_DWORD)v19 != 799564740)
    {
      if ((_DWORD)v19 != 799564724)
      {
LABEL_32:
        os_workgroup_create_with_workload_id_VARIANT_mp_cold_2();
        return 0;
      }
      v8 = DWORD1(v19);
      if (!DWORD1(v19))
        v8 = 2;
      DWORD1(v19) = v8;
    }
    LODWORD(v19) = 2015762650;
  }
  else
  {
    v19 = _os_workgroup_with_workload_id_attr_default;
    v20 = *(_OWORD *)algn_18A06E530;
    v21 = xmmword_18A06E540;
    v22 = unk_18A06E550;
  }
  LOWORD(v18) = 0;
  v9 = _os_workgroup_lookup_type_from_workload_id(a2, (unsigned int *)((unint64_t)&v19 | 0xC), &v18);
  if (v9)
  {
    if (!WORD4(v19) || WORD4(v19) == (unsigned __int16)v18)
    {
      WORD4(v19) = v9;
    }
    else if (v9 != WORD4(v19))
    {
      _dispatch_log("BUG IN CLIENT of %s: Mismatched workload ID and attribute interval type: %s vs %hd", "os_workgroup_create_with_workload_id$VARIANT$mp", a2, WORD4(v19));
      v10 = 0;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_31:
      v12 = *(int **)(StatusReg + 8);
      v13 = 22;
      goto LABEL_24;
    }
  }
  if (DWORD1(v19) != 2)
  {
    os_workgroup_create_with_workload_id_VARIANT_mp_cold_1(SDWORD1(v19));
    return 0;
  }
  if (WORD4(v19))
  {
    _dispatch_log("BUG IN CLIENT of %s: Non-default workload type: %s (%hd)", "os_workgroup_create_with_workload_id$VARIANT$mp", a2, WORD4(v19));
    v10 = 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_31;
  }
  if (!WORD5(v19))
  {
    v18 = 0;
    work_interval = _os_workgroup_create_work_interval((uint64_t)&v19);
    if (work_interval)
    {
      v15 = work_interval;
      v10 = _os_object_alloc((uint64_t)OS_os_workgroup, 64);
      *((_QWORD *)v10 + 4) = v15;
      v10[10] = v18;
      *((_QWORD *)v10 + 3) = 1;
      *((_WORD *)v10 + 28) = 0;
      if (!_os_workgroup_set_work_interval_workload_id((uint64_t)v10, a2, SHIDWORD(v19)))
      {
        _os_workgroup_set_name((uint64_t)v10, a1);
        return v10;
      }
      _os_object_release_VARIANT_mp(v10, v16);
    }
    return 0;
  }
  v10 = 0;
  v12 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  v13 = 45;
LABEL_24:
  *v12 = v13;
  return v10;
}

uint64_t _os_workgroup_set_work_interval_workload_id(uint64_t a1, const char *a2, int a3)
{
  unsigned int v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v4 = *(_DWORD *)(a1 + 40);
  if (v4 + 1 <= 1)
    _os_workgroup_set_work_interval_workload_id_cold_1(v4);
  if (!a3)
    return 0;
  v6 = a3 & 0xFFFFFFFE;
  __strlcpy_chk();
  _wg_type_to_wi_flags(*(unsigned __int16 *)(a1 + 56));
  v7 = __work_interval_ctl();
  if ((_DWORD)v7)
  {
    if ((_DWORD)v7 != -1)
    {
      v9 = 0;
      v8 = v7;
      goto LABEL_12;
    }
    v8 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if ((_DWORD)v8)
    {
      _dispatch_bug(576, (int)v8);
      v9 = 0;
      LODWORD(v7) = v8;
      goto LABEL_12;
    }
  }
  v9 = v6;
  if ((v6 & 1) != 0)
  {
    LODWORD(v7) = 0;
    v8 = 37;
LABEL_12:
    _dispatch_log("BUG IN CLIENT of %s: Unable to set kernel workload ID: %s (0x%x) -> %d (0x%x)", "_os_workgroup_set_work_interval_workload_id", a2, v6, v7, v9);
    return v8;
  }
  v8 = 0;
  *(_QWORD *)(a1 + 24) |= 0x10uLL;
  return v8;
}

_DWORD *os_workgroup_interval_create_with_workload_id_VARIANT_mp(const char *a1, char *a2, int a3, __int128 *a4)
{
  __int128 v8;
  __int128 v9;
  int v10;
  __int16 v11;
  int v12;
  _DWORD *v13;
  unint64_t StatusReg;
  __int16 v15;
  uint64_t work_interval;
  uint64_t v17;
  const char *v18;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  if (a4)
  {
    if (*(_DWORD *)a4 != 799564740 && *(_DWORD *)a4 != 799564724)
      goto LABEL_33;
    v8 = a4[1];
    v21 = *a4;
    v22 = v8;
    v9 = a4[3];
    v23 = a4[2];
    v24 = v9;
    if ((_DWORD)v21 != 799564740)
    {
      if ((_DWORD)v21 != 799564724)
      {
LABEL_33:
        os_workgroup_interval_create_with_workload_id_VARIANT_mp_cold_2();
        return 0;
      }
      v10 = DWORD1(v21);
      if (!DWORD1(v21))
        v10 = 2;
      DWORD1(v21) = v10;
      v11 = WORD4(v21);
      if (WORD4(v21) <= 1u)
        v11 = 1;
      WORD4(v21) = v11;
    }
    LODWORD(v21) = 2015762650;
  }
  else
  {
    v21 = _os_workgroup_interval_attr_default;
    v22 = *(_OWORD *)algn_18A06E4F0;
    v23 = xmmword_18A06E500;
    v24 = unk_18A06E510;
  }
  LOWORD(v20) = 0;
  v12 = _os_workgroup_lookup_type_from_workload_id(a2, (unsigned int *)((unint64_t)&v21 | 0xC), &v20);
  if (v12)
  {
    if (WORD4(v21) == 1 || WORD4(v21) == (unsigned __int16)v20)
    {
      WORD4(v21) = v12;
    }
    else if (v12 != WORD4(v21))
    {
      _dispatch_log("BUG IN CLIENT of %s: Mismatched workload ID and attribute interval type: %s vs %hd", "os_workgroup_interval_create_with_workload_id$VARIANT$mp", a2, WORD4(v21));
      v13 = 0;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_31:
      **(_DWORD **)(StatusReg + 8) = 22;
      return v13;
    }
  }
  if (DWORD1(v21) == 2)
  {
    v15 = WORD4(v21);
    if (WORD4(v21) - 1 >= 0xA)
    {
      _dispatch_log("BUG IN CLIENT of %s: Invalid workload interval type: %s (%hd)", "os_workgroup_interval_create_with_workload_id$VARIANT$mp", a2, WORD4(v21));
      v13 = 0;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      goto LABEL_31;
    }
    v20 = 0;
    work_interval = _os_workgroup_create_work_interval((uint64_t)&v21);
    if (work_interval)
    {
      v17 = work_interval;
      v13 = _os_object_alloc((uint64_t)OS_os_workgroup_interval, 80);
      *((_QWORD *)v13 + 4) = v17;
      v13[10] = v20;
      v13[16] = a3;
      *((_QWORD *)v13 + 9) = work_interval_instance_alloc();
      v13[17] = 0;
      *((_WORD *)v13 + 28) = v15;
      *((_QWORD *)v13 + 3) = 1;
      *((_WORD *)v13 + 22) = WORD5(v21);
      if (!_os_workgroup_set_work_interval_workload_id((uint64_t)v13, a2, SHIDWORD(v21)))
      {
        _os_workgroup_set_name((uint64_t)v13, a1);
        return v13;
      }
      _os_object_release_VARIANT_mp(v13, v18);
    }
  }
  else
  {
    os_workgroup_interval_create_with_workload_id_VARIANT_mp_cold_1(SDWORD1(v21));
  }
  return 0;
}

uint64_t os_workgroup_join_VARIANT_mp(uint64_t a1, uint64_t a2)
{
  unint64_t StatusReg;
  _DWORD *v3;
  uint64_t result;
  uint64_t v6;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(_QWORD *)(StatusReg + 928))
  {
    v3 = *(_DWORD **)(StatusReg + 8);
    result = 37;
LABEL_9:
    *v3 = result;
    return result;
  }
  v6 = *(_QWORD *)(a1 + 24);
  if ((v6 & 2) != 0)
  {
    v3 = *(_DWORD **)(StatusReg + 8);
    result = 22;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a1 + 40))
  {
    if ((v6 & 1) != 0)
    {
      if (work_interval_join())
        return **(unsigned int **)(StatusReg + 8);
    }
    else if (work_interval_join_port())
    {
      return **(unsigned int **)(StatusReg + 8);
    }
  }
  _os_workgroup_join_update_wg_VARIANT_mp(a1, a2);
  return 0;
}

void *os_workgroup_leave_VARIANT_mp(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t StatusReg;
  uint64_t v5;

  if (*(_DWORD *)a2 != 1298094680)
    os_workgroup_leave_VARIANT_mp_cold_5();
  v2 = *(_DWORD *)(a2 + 4);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (v2 != *(_DWORD *)(StatusReg + 24))
    os_workgroup_leave_VARIANT_mp_cold_4();
  v5 = *(_QWORD *)(StatusReg + 928);
  if (v5 != a1 || *(_QWORD *)(a2 + 16) != v5)
    os_workgroup_leave_VARIANT_mp_cold_3();
  if (*(_QWORD *)(a2 + 8))
    os_eventlink_create_with_port_VARIANT_mp_cold_1();
  if (*(_DWORD *)(a1 + 40) && work_interval_leave())
    os_workgroup_leave_VARIANT_mp_cold_1();
  return _os_workgroup_leave_update_wg_VARIANT_mp(a1, (const char *)a2);
}

_DWORD *os_workgroup_parallel_create_VARIANT_mp(const char *a1, int *a2)
{
  int v3;
  int v5;
  _DWORD *v6;
  int *v7;
  int v8;

  if (!a2)
    goto LABEL_19;
  v3 = *a2;
  if (*a2 != 799564724 && v3 != 799564740)
    goto LABEL_15;
  v5 = a2[1];
  if (v3 != 799564740)
  {
    if (v3 != 799564724)
      goto LABEL_15;
    if (!v5)
      LOBYTE(v5) = 6;
    if (!*((_WORD *)a2 + 4))
    {
LABEL_13:
      if ((v5 & 2) == 0 || *((_WORD *)a2 + 5))
      {
        v6 = 0;
        v7 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        v8 = 45;
        goto LABEL_18;
      }
LABEL_19:
      v6 = _os_object_alloc((uint64_t)OS_os_workgroup_parallel, 64);
      *((_QWORD *)v6 + 4) = 0;
      *((_QWORD *)v6 + 3) = 1;
      *((_WORD *)v6 + 28) = 64;
      _os_workgroup_set_name((uint64_t)v6, a1);
      return v6;
    }
  }
  if (*((_WORD *)a2 + 4) == 64)
    goto LABEL_13;
LABEL_15:
  v6 = 0;
  v7 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  v8 = 22;
LABEL_18:
  *v7 = v8;
  return v6;
}

uint64_t os_workgroup_copy_port_VARIANT_mp(uint64_t a1, _DWORD *a2)
{
  mach_port_name_t v4;
  uint64_t result;

  if (!a1)
    os_eventlink_create_with_port_VARIANT_mp_cold_1();
  if (!a2)
    os_eventlink_create_with_port_VARIANT_mp_cold_1();
  *a2 = 0;
  if ((*(_QWORD *)(a1 + 24) & 2) != 0)
    return 22;
  v4 = *(_DWORD *)(a1 + 40);
  if (!v4)
    return 22;
  result = mach_port_mod_refs(*MEMORY[0x1E0C883F0], v4, 0, 1);
  if ((_DWORD)result)
  {
    os_workgroup_copy_port_VARIANT_mp_cold_3();
    return 12;
  }
  else
  {
    *a2 = *(_DWORD *)(a1 + 40);
  }
  return result;
}

_DWORD *os_workgroup_create_with_port_VARIANT_mp(const char *a1, mach_port_name_t a2)
{
  _DWORD *v4;

  if (a2 - 1 >= 0xFFFFFFFE)
  {
    v4 = 0;
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
  }
  else
  {
    if (!work_interval_get_flags_from_port())
    {
      if (!mach_port_mod_refs(*MEMORY[0x1E0C883F0], a2, 0, 1))
      {
        v4 = _os_object_alloc((uint64_t)OS_os_workgroup, 64);
        v4[10] = a2;
        *((_WORD *)v4 + 28) = 0;
        _os_workgroup_set_name((uint64_t)v4, a1);
        return v4;
      }
      os_workgroup_create_with_port_VARIANT_mp_cold_2();
    }
    return 0;
  }
  return v4;
}

_DWORD *os_workgroup_create_with_workload_id_and_port_VARIANT_mp(const char *a1, char *a2, mach_port_name_t a3)
{
  unsigned int v6;
  unsigned __int16 v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  int v12;
  const char *v13;
  unsigned int v15;
  unsigned int v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C874D8];
  if (a3 - 1 >= 0xFFFFFFFE)
  {
    os_workgroup_create_with_workload_id_and_port_VARIANT_mp_cold_3(a3);
    return 0;
  }
  v15 = 0;
  if (work_interval_get_flags_from_port())
  {
    _dispatch_log("BUG IN CLIENT of %s: Invalid mach port 0x%x", "os_workgroup_create_with_workload_id_and_port$VARIANT$mp", a3);
    return 0;
  }
  v6 = v15;
  v7 = 0;
  switch(v15 >> 28)
  {
    case 0u:
      break;
    case 1u:
      v7 = 4;
      break;
    case 2u:
      v7 = 5;
      break;
    case 3u:
      v7 = 2;
      break;
    case 4u:
      v7 = 7;
      break;
    case 5u:
      v7 = 8;
      break;
    case 6u:
      v7 = 9;
      break;
    case 7u:
      v7 = 10;
      break;
    default:
      os_workgroup_create_with_port_VARIANT_mp_cold_1((char *)v16, v15);
  }
  v16[0] = 0;
  LOWORD(v15) = 0;
  v8 = _os_workgroup_lookup_type_from_workload_id(a2, v16, &v15);
  if (v8)
  {
    v9 = v8;
    v10 = v6 & 0xF0000000;
    if ((_wg_type_to_wi_flags((unsigned __int16)v15) & 0x70000000) != v10
      && (_wg_type_to_wi_flags(v9) & 0x70000000) != v10)
    {
      _dispatch_log("BUG IN CLIENT of %s: Mismatched workload ID and port interval type: %s vs %hd", "os_workgroup_create_with_workload_id_and_port$VARIANT$mp", a2, v7);
      v11 = 0;
      **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
      return v11;
    }
  }
  if (mach_port_mod_refs(*MEMORY[0x1E0C883F0], a3, 0, 1))
  {
    os_workgroup_create_with_workload_id_and_port_VARIANT_mp_cold_2(a3);
    return 0;
  }
  v11 = _os_object_alloc((uint64_t)OS_os_workgroup, 64);
  v11[10] = a3;
  *((_WORD *)v11 + 28) = v7;
  v12 = _os_workgroup_set_work_interval_workload_id((uint64_t)v11, a2, v16[0]);
  if (v12 && v12 != 37)
  {
    _os_object_release_VARIANT_mp(v11, v13);
    return 0;
  }
  _os_workgroup_set_name((uint64_t)v11, a1);
  return v11;
}

_DWORD *os_workgroup_create_with_workgroup_VARIANT_mp(const char *a1, uint64_t a2)
{
  _DWORD *v4;
  mach_port_name_t v5;

  if ((*(_QWORD *)(a2 + 24) & 2) != 0)
  {
    v4 = 0;
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
    return v4;
  }
  v4 = _os_object_alloc((uint64_t)OS_os_workgroup, 64);
  *((_WORD *)v4 + 28) = *(_WORD *)(a2 + 56);
  v5 = *(_DWORD *)(a2 + 40);
  if (!v5)
  {
LABEL_7:
    _os_workgroup_set_name((uint64_t)v4, a1);
    return v4;
  }
  if (!mach_port_mod_refs(*MEMORY[0x1E0C883F0], v5, 0, 1))
  {
    v4[10] = *(_DWORD *)(a2 + 40);
    goto LABEL_7;
  }
  free(v4);
  return 0;
}

_DWORD *os_workgroup_create_with_workload_id_and_workgroup_VARIANT_mp(const char *a1, char *a2, uint64_t a3)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  _DWORD *v10;
  mach_port_name_t v11;
  kern_return_t v12;
  int v13;
  int v14;
  const char *v15;
  unsigned int v17;
  unsigned __int16 v18;

  if ((*(_QWORD *)(a3 + 24) & 2) != 0)
  {
    os_workgroup_create_with_workload_id_and_workgroup_VARIANT_mp_cold_1();
    return 0;
  }
  v17 = 0;
  v6 = _wg_type_to_wi_flags(*(unsigned __int16 *)(a3 + 56));
  v18 = 0;
  v7 = _os_workgroup_lookup_type_from_workload_id(a2, &v17, &v18);
  if (v7)
  {
    v8 = v7;
    v9 = v6 & 0x70000000;
    if ((_wg_type_to_wi_flags(v18) & 0x70000000) != v9 && (_wg_type_to_wi_flags(v8) & 0x70000000) != v9)
    {
      _dispatch_log("BUG IN CLIENT of %s: Mismatched workload ID and workgroup interval type: %s vs %hd", "os_workgroup_create_with_workload_id_and_workgroup$VARIANT$mp", a2, *(unsigned __int16 *)(a3 + 56));
      v10 = 0;
      **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
      return v10;
    }
  }
  v10 = _os_object_alloc((uint64_t)OS_os_workgroup, 64);
  *((_WORD *)v10 + 28) = *(_WORD *)(a3 + 56);
  v11 = *(_DWORD *)(a3 + 40);
  if (!v11)
    goto LABEL_9;
  v12 = mach_port_mod_refs(*MEMORY[0x1E0C883F0], v11, 0, 1);
  v13 = *(_DWORD *)(a3 + 40);
  if (v12)
  {
    _dispatch_log("BUG IN CLIENT of %s: Invalid workgroup port 0x%x", "os_workgroup_create_with_workload_id_and_workgroup$VARIANT$mp", v13);
    free(v10);
    return 0;
  }
  v10[10] = v13;
  v14 = _os_workgroup_set_work_interval_workload_id((uint64_t)v10, a2, v17);
  if (v14 && v14 != 37)
  {
    _os_object_release_VARIANT_mp(v10, v15);
    return 0;
  }
LABEL_9:
  _os_workgroup_set_name((uint64_t)v10, a1);
  return v10;
}

uint64_t os_workgroup_max_parallel_threads_VARIANT_mp(uint64_t a1)
{
  if (!a1)
    os_eventlink_create_with_port_VARIANT_mp_cold_1();
  if (*(unsigned __int16 *)(a1 + 56) - 3 > 1)
    return pthread_qos_max_parallelism();
  else
    return pthread_time_constraint_max_parallelism();
}

void *_os_workgroup_join_update_wg_VARIANT_mp(uint64_t a1, uint64_t a2)
{
  unint64_t StatusReg;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  void *result;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(_QWORD *)(StatusReg + 928))
    _os_workgroup_join_update_wg_VARIANT_mp_cold_1();
  v4 = (unsigned int *)(a1 + 60);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v6 = *(_QWORD *)(StatusReg + 24);
  *(_DWORD *)a2 = 1298094680;
  *(_DWORD *)(a2 + 4) = v6;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = a1;
  if (a1)
    _os_object_retain_internal_VARIANT_mp(a1);
  result = *(void **)(StatusReg + 928);
  *(_QWORD *)(StatusReg + 928) = a1;
  if (result)
    return _os_object_release_internal_VARIANT_mp(result, (const char *)a2);
  return result;
}

uint64_t os_workgroup_set_working_arena_VARIANT_mp(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  _DWORD *v8;
  unsigned __int128 *v9;
  unsigned __int128 v10;
  uint64_t result;
  _DWORD *v12;

  v8 = malloc_type_calloc(4 * a3 + 24, 1uLL, 0xB26F0EFuLL);
  if (v8)
  {
    v8[4] = a3;
    v9 = (unsigned __int128 *)(a1 + 48);
    *(_QWORD *)v8 = a2;
    *((_QWORD *)v8 + 1) = a4;
    do
    {
      v10 = __ldxp(v9);
      if (HIDWORD(*((_QWORD *)&v10 + 1)))
      {
        __clrex();
        free(v8);
        v12 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        result = 16;
        goto LABEL_9;
      }
    }
    while (__stxp((unint64_t)v8, v9));
    if ((_QWORD)v10)
    {
      (*(void (**)(_QWORD))(v10 + 8))(*(_QWORD *)v10);
      free((void *)v10);
    }
    return 0;
  }
  else
  {
    v12 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    result = 12;
LABEL_9:
    *v12 = result;
  }
  return result;
}

uint64_t os_workgroup_get_working_arena_VARIANT_mp(uint64_t a1, _DWORD *a2)
{
  unint64_t StatusReg;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(_QWORD *)(StatusReg + 928) != a1)
    os_workgroup_get_working_arena_VARIANT_mp_cold_3();
  v3 = *(unsigned int **)(a1 + 48);
  if (!v3)
    return 0;
  if (a2)
  {
    v4 = v3[4];
    if (!(_DWORD)v4)
      os_workgroup_get_working_arena_VARIANT_mp_cold_1();
    v5 = 0;
    while (v3[v5 + 6] != *(_DWORD *)(StatusReg + 24))
    {
      if (v4 == ++v5)
      {
        v6 = v3 + 5;
        do
          LODWORD(v5) = __ldxr(v6);
        while (__stxr(v5 + 1, v6));
        if (v5 >= v4)
          os_workgroup_get_working_arena_VARIANT_mp_cold_2();
        v3[v5 + 6] = *(_QWORD *)(StatusReg + 24);
        break;
      }
    }
    *a2 = v5;
  }
  return *(_QWORD *)v3;
}

uint64_t os_workgroup_cancel_VARIANT_mp(uint64_t result)
{
  unint64_t *v1;
  unint64_t v2;

  v1 = (unint64_t *)(result + 24);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 | 2, v1));
  return result;
}

uint64_t os_workgroup_testcancel_VARIANT_mp(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 24) >> 1) & 1;
}

uint64_t os_workgroup_interval_start_VARIANT_mp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t StatusReg;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(_QWORD *)(StatusReg + 928) != a1)
    os_workgroup_get_working_arena_VARIANT_mp_cold_3();
  if (a4 && *(_WORD *)(a4 + 16) == 1 && *(_WORD *)(a1 + 44) != 1
    || a3 < a2
    || *(_DWORD *)(a1 + 64) == 32 && mach_absolute_time() < a2)
  {
    v7 = *(_DWORD **)(StatusReg + 8);
    v8 = 22;
LABEL_7:
    *v7 = v8;
    return v8;
  }
  if (!os_unfair_lock_trylock((os_unfair_lock_t)(a1 + 68)))
  {
    v7 = *(_DWORD **)(StatusReg + 8);
    v8 = 16;
    goto LABEL_7;
  }
  if (a4 && *(_DWORD *)a4 == 1386695757)
    v10 = *(_DWORD *)(a4 + 4) & 1;
  else
    v10 = 0;
  v11 = (unint64_t *)(a1 + 24);
  while (1)
  {
    v12 = __ldxr(v11);
    if ((v12 & 0xA) != 0)
    {
      v8 = 22;
LABEL_31:
      __clrex();
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 68));
      v7 = *(_DWORD **)(StatusReg + 8);
      goto LABEL_7;
    }
    if ((v12 & 1) == 0)
    {
      v8 = 1;
      goto LABEL_31;
    }
    if (v10 && (v12 & 0x10) == 0)
      break;
    if (!__stxr(v12 | 8, v11))
      goto LABEL_23;
  }
  **(_DWORD **)(StatusReg + 8) = 22;
  __clrex();
LABEL_23:
  work_interval_instance_clear();
  work_interval_instance_set_start();
  work_interval_instance_set_deadline();
  work_interval_instance_set_complexity();
  v8 = work_interval_instance_start();
  if ((_DWORD)v8)
  {
    do
      v13 = __ldxr(v11);
    while (__stxr(v13 & 0xFFFFFFFFFFFFFFF7, v11));
  }
  else if (a4 && *(_WORD *)(a4 + 16) == 1)
  {
    _os_workgroup_interval_copy_telemetry_data(a1, a4);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 68));
  return v8;
}

double _os_workgroup_interval_copy_telemetry_data(uint64_t a1, uint64_t a2)
{
  double result;
  uint64_t v4;
  _OWORD v5[3];

  memset(v5, 0, 40);
  work_interval_instance_get_telemetry_data();
  if (*(_WORD *)(a2 + 16) == 1)
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)v4 = *(_QWORD *)&v5[0];
    *(_OWORD *)(v4 + 24) = *(_OWORD *)((char *)&v5[1] + 8);
    result = *((double *)v5 + 1);
    *(_OWORD *)(v4 + 8) = *(_OWORD *)((char *)v5 + 8);
  }
  return result;
}

uint64_t os_workgroup_interval_update_VARIANT_mp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t StatusReg;
  uint64_t v4;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(_QWORD *)(StatusReg + 928) != a1)
    os_workgroup_get_working_arena_VARIANT_mp_cold_3();
  v4 = a3;
  if (!a3)
  {
    v6 = (os_unfair_lock_s *)(a1 + 68);
    if (os_unfair_lock_trylock((os_unfair_lock_t)(a1 + 68)))
      goto LABEL_9;
LABEL_12:
    v9 = *(_DWORD **)(StatusReg + 8);
    v4 = 16;
    goto LABEL_18;
  }
  if (*(_WORD *)(a3 + 16) == 1 && *(_WORD *)(a1 + 44) != 1)
    goto LABEL_17;
  v6 = (os_unfair_lock_s *)(a1 + 68);
  if (!os_unfair_lock_trylock((os_unfair_lock_t)(a1 + 68)))
    goto LABEL_12;
  if (*(_DWORD *)v4 == 1386695757)
  {
    v7 = *(_DWORD *)(v4 + 4) & 1;
    goto LABEL_10;
  }
LABEL_9:
  v7 = 0;
LABEL_10:
  v8 = *(_QWORD *)(a1 + 24);
  if ((v8 & 1) == 0)
  {
    os_unfair_lock_unlock(v6);
    v9 = *(_DWORD **)(StatusReg + 8);
    v4 = 1;
LABEL_18:
    *v9 = v4;
    return v4;
  }
  if (v7 && (v8 & 0x10) == 0 || (v8 & 8) == 0)
  {
    os_unfair_lock_unlock(v6);
LABEL_17:
    v9 = *(_DWORD **)(StatusReg + 8);
    v4 = 22;
    goto LABEL_18;
  }
  work_interval_instance_set_deadline();
  work_interval_instance_set_complexity();
  if (work_interval_instance_update())
  {
    v4 = **(unsigned int **)(StatusReg + 8);
  }
  else if (v4)
  {
    if (*(_WORD *)(v4 + 16) == 1)
      _os_workgroup_interval_copy_telemetry_data(a1, v4);
    v4 = 0;
  }
  os_unfair_lock_unlock(v6);
  return v4;
}

uint64_t os_workgroup_interval_finish_VARIANT_mp(uint64_t a1, uint64_t a2)
{
  unint64_t StatusReg;
  uint64_t v3;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  unint64_t *v10;
  unint64_t v11;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(_QWORD *)(StatusReg + 928) != a1)
    os_workgroup_get_working_arena_VARIANT_mp_cold_3();
  v3 = a2;
  if (!a2)
  {
    v5 = (os_unfair_lock_s *)(a1 + 68);
    if (os_unfair_lock_trylock((os_unfair_lock_t)(a1 + 68)))
      goto LABEL_9;
LABEL_12:
    v8 = *(_DWORD **)(StatusReg + 8);
    v3 = 16;
    goto LABEL_18;
  }
  if (*(_WORD *)(a2 + 16) == 1 && *(_WORD *)(a1 + 44) != 1)
    goto LABEL_17;
  v5 = (os_unfair_lock_s *)(a1 + 68);
  if (!os_unfair_lock_trylock((os_unfair_lock_t)(a1 + 68)))
    goto LABEL_12;
  if (*(_DWORD *)v3 == 1386695757)
  {
    v6 = *(_DWORD *)(v3 + 4) & 1;
    goto LABEL_10;
  }
LABEL_9:
  v6 = 0;
LABEL_10:
  v7 = *(_QWORD *)(a1 + 24);
  if ((v7 & 1) == 0)
  {
    os_unfair_lock_unlock(v5);
    v8 = *(_DWORD **)(StatusReg + 8);
    v3 = 1;
LABEL_18:
    *v8 = v3;
    return v3;
  }
  if (v6 && (v7 & 0x10) == 0 || (v7 & 8) == 0)
  {
    os_unfair_lock_unlock(v5);
LABEL_17:
    v8 = *(_DWORD **)(StatusReg + 8);
    v3 = 22;
    goto LABEL_18;
  }
  if (*(_DWORD *)(a1 + 64) == 32)
    mach_absolute_time();
  work_interval_instance_set_finish();
  work_interval_instance_set_complexity();
  if (work_interval_instance_finish())
  {
    v3 = **(unsigned int **)(StatusReg + 8);
  }
  else
  {
    v10 = (unint64_t *)(a1 + 24);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 & 0xFFFFFFFFFFFFFFF7, v10));
    if (v3)
    {
      if (*(_WORD *)(v3 + 16) == 1)
        _os_workgroup_interval_copy_telemetry_data(a1, v3);
      v3 = 0;
    }
  }
  os_unfair_lock_unlock(v5);
  return v3;
}

uint64_t _os_workgroup_pthread_create_with_workgroup(pthread_t *a1, void *a2, const pthread_attr_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  const char *v11;
  uint64_t v12;

  v10 = _dispatch_calloc(1uLL, 0x18uLL);
  _os_object_retain_internal_VARIANT_mp((uint64_t)a2);
  *v10 = a2;
  v10[1] = a4;
  v10[2] = a5;
  v12 = pthread_create(a1, a3, (void *(__cdecl *)(void *))_os_workgroup_pthread_start, v10);
  if ((_DWORD)v12)
  {
    _os_object_release_internal_VARIANT_mp(a2, v11);
    free(v10);
  }
  return v12;
}

uint64_t _os_workgroup_pthread_start(void **a1)
{
  void *v1;
  uint64_t (*v2)(void *);
  void *v3;
  int v4;
  uint64_t v5;
  const char *v6;
  _OWORD v8[2];
  uint64_t v9;

  v1 = *a1;
  v2 = (uint64_t (*)(void *))a1[1];
  v3 = a1[2];
  free(a1);
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v4 = os_workgroup_join_VARIANT_mp((uint64_t)v1, (uint64_t)v8);
  if (v4)
    _os_workgroup_pthread_start_cold_1(v4);
  v5 = v2(v3);
  os_workgroup_leave_VARIANT_mp((uint64_t)v1, (uint64_t)v8);
  _os_object_release_internal_VARIANT_mp(v1, v6);
  return v5;
}

uint64_t _wg_type_to_wi_flags(unsigned int a1)
{
  if (a1 >= 0xB)
    _wg_type_to_wi_flags_cold_1();
  return dword_18A06E560[(__int16)a1];
}

uint64_t _os_workgroup_lookup_type_from_workload_id(char *a1, unsigned int *a2, _WORD *a3)
{
  uint64_t v6;
  char v7;
  char v8;
  unsigned int v9;
  uint64_t result;
  char **v11;

  if (!a1)
    _os_workgroup_lookup_type_from_workload_id_cold_1();
  v6 = 0;
  v7 = 1;
  while (1)
  {
    v8 = v7;
    if (!strcasecmp(a1, (&_os_workgroup_workload_id_table)[2 * v6]))
      break;
    v7 = 0;
    v6 = 1;
    if ((v8 & 1) == 0)
    {
      v9 = 0;
      result = 0;
      goto LABEL_7;
    }
  }
  v11 = &(&_os_workgroup_workload_id_table)[2 * v6];
  result = *((unsigned __int16 *)v11 + 4);
  v9 = *((_DWORD *)v11 + 3) & 0xFFFFFFFA | 1;
LABEL_7:
  if (v9 <= 1)
    v9 = 1;
  *a2 = v9;
  *a3 = result;
  return result;
}

void OUTLINED_FUNCTION_0_0(uint64_t a1@<X8>)
{
  **(_DWORD **)(a1 + 8) = 22;
}

void OUTLINED_FUNCTION_3(uint64_t a1)
{
  _dispatch_bug(a1, 0);
}

uint64_t OUTLINED_FUNCTION_4()
{
  return _os_crash();
}

uint64_t OUTLINED_FUNCTION_5(char *a1, uint64_t a2, const char *a3)
{
  return snprintf(a1, 0x200uLL, a3);
}

uint64_t _os_object_retain_count_VARIANT_mp(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 12);
  if (v1 == 0x7FFFFFFF)
    return -1;
  return v1;
}

uint64_t _os_object_retain_internal_VARIANT_mp(uint64_t result)
{
  unsigned int *v1;
  int v2;

  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    v1 = (unsigned int *)(result + 8);
    do
      v2 = __ldxr(v1);
    while (__stxr(v2 + 1, v1));
    if (v2 <= 0)
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
    }
  }
  return result;
}

uint64_t _os_object_retain_internal_n_VARIANT_mp(uint64_t result, int a2)
{
  unsigned int *v2;
  int v3;

  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    v2 = (unsigned int *)(result + 8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + a2, v2));
    if (v3 <= 0)
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
    }
  }
  return result;
}

void *_os_object_release_internal_VARIANT_mp(void *a1, const char *a2)
{
  unsigned int *v2;
  int v3;

  if (*((_DWORD *)a1 + 2) != 0x7FFFFFFF)
  {
    v2 = (unsigned int *)((char *)a1 + 8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (v3 <= 1)
    {
      if (v3 == 1)
      {
        return (void *)_os_object_dispose(a1, a2);
      }
      else
      {
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
    }
  }
  return a1;
}

void *_os_object_release_internal_n_VARIANT_mp(void *a1, const char *a2)
{
  unsigned int *v2;
  unsigned int v3;
  signed int v4;

  if (*((_DWORD *)a1 + 2) != 0x7FFFFFFF)
  {
    v2 = (unsigned int *)((char *)a1 + 8);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - (_DWORD)a2;
    }
    while (__stlxr(v4, v2));
    if (v4 <= 0)
    {
      if (v4 < 0)
      {
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
      else
      {
        return (void *)_os_object_dispose(a1, a2);
      }
    }
  }
  return a1;
}

uint64_t _os_object_retain_VARIANT_mp(uint64_t result)
{
  unsigned int *v1;
  int v2;

  if (*(_DWORD *)(result + 12) != 0x7FFFFFFF)
  {
    v1 = (unsigned int *)(result + 12);
    do
      v2 = __ldxr(v1);
    while (__stxr(v2 + 1, v1));
    if (v2 <= 0)
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
    }
  }
  return result;
}

uint64_t _os_object_retain_with_resurrect_VARIANT_mp(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (*(_DWORD *)(result + 12) == 0x7FFFFFFF)
    goto LABEL_7;
  v1 = (unsigned int *)(result + 12);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  if ((v2 & 0x80000000) != 0)
  {
LABEL_7:
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an over-released object";
    __break(1u);
    return _os_object_retain_internal_VARIANT_mp(result);
  }
  if (!v2)
    return _os_object_retain_internal_VARIANT_mp(result);
  return result;
}

void *_os_object_release_VARIANT_mp(void *a1, const char *a2)
{
  unsigned int *v2;
  int v3;

  if (*((_DWORD *)a1 + 3) != 0x7FFFFFFF)
  {
    v2 = (unsigned int *)((char *)a1 + 12);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (v3 <= 1)
    {
      if (v3 == 1)
      {
        return (void *)_os_object_xref_dispose(a1, a2);
      }
      else
      {
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
    }
  }
  return a1;
}

void *_os_object_release_without_xref_dispose_VARIANT_mp(void *a1, const char *a2)
{
  unsigned int *v2;
  int v3;

  if (*((_DWORD *)a1 + 3) != 0x7FFFFFFF)
  {
    v2 = (unsigned int *)((char *)a1 + 12);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (v3 <= 1)
    {
      if (v3 == 1)
      {
        return _os_object_release_internal_VARIANT_mp(a1, a2);
      }
      else
      {
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
    }
  }
  return a1;
}

uint64_t _os_object_retain_weak_VARIANT_mp(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;
  uint64_t result;

  v1 = (unsigned int *)(a1 + 12);
  while (1)
  {
    v2 = __ldxr(v1);
    if (v2 == 0x7FFFFFFF)
    {
      result = 1;
      goto LABEL_10;
    }
    if (!v2)
      break;
    if ((v2 & 0x80000000) != 0)
      _os_object_retain_weak_VARIANT_mp_cold_1();
    if (!__stxr(v2 + 1, v1))
      return 1;
  }
  result = 0;
LABEL_10:
  __clrex();
  return result;
}

BOOL _os_object_allows_weak_reference_VARIANT_mp(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 12);
  if (v1 < 0)
    _os_object_allows_weak_reference_VARIANT_mp_cold_1();
  return v1 != 0;
}

id dispatch_retain_VARIANT_mp(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)result;
  if ((*(_QWORD *)result & 1) != 0)
    return _dispatch_objc_retain((id)result);
  if (v1 < (unint64_t)OS_dispatch_object || v1 >= (unint64_t)OS_object)
    return _dispatch_objc_retain((id)result);
  else
    return (id)_os_object_retain_VARIANT_mp(result);
}

void dispatch_release_VARIANT_mp(unsigned int *a1, const char *a2)
{
  unint64_t v2;
  BOOL v3;
  unsigned int *v4;
  int v5;

  v2 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 1) != 0
    || (v2 >= (unint64_t)OS_dispatch_object
      ? (v3 = v2 >= (unint64_t)OS_object)
      : (v3 = 1),
        v3))
  {
    _dispatch_objc_release(a1);
  }
  else if (a1[3] != 0x7FFFFFFF)
  {
    v4 = a1 + 3;
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (v5 <= 1)
    {
      if (v5 != 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      atomic_load(a1 + 3);
      _dispatch_xref_dispose_VARIANT_mp((unint64_t *)a1, a2);
    }
  }
}

void *_dispatch_xref_dispose_VARIANT_mp(unint64_t *a1, const char *a2)
{
  uint64_t v3;

  if ((*(_QWORD *)(*a1 + 40) & 0xF0) == 0x10)
  {
    _dispatch_queue_xref_dispose_VARIANT_mp((uint64_t)a1);
    v3 = *(_QWORD *)(*a1 + 40);
    if (v3 > 786)
    {
      if (v3 == 787)
      {
        if ((*((_WORD *)a1 + 58) & 0x10) != 0)
          *(_QWORD *)(a1[11] + 48) = 195952365;
      }
      else if (v3 == 395025)
      {
        _dispatch_runloop_queue_xref_dispose_VARIANT_mp(a1);
      }
    }
    else if (v3 == 275)
    {
      _dispatch_source_xref_dispose_VARIANT_mp((uint64_t)a1);
    }
    else if (v3 == 531)
    {
      _dispatch_channel_xref_dispose_VARIANT_mp((uint64_t)a1);
    }
  }
  return _os_object_release_internal_VARIANT_mp(a1, a2);
}

void _dispatch_dispose_VARIANT_mp(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _DWORD *v7;
  const char *v8;
  char v9;

  v3 = a1[4];
  v2 = a1[5];
  v4 = a1[3];
  v9 = 1;
  v6 = a1[2];
  v5 = a1 + 2;
  if (v6 != -1985229329)
    _dispatch_dispose_VARIANT_mp_cold_1(v5);
  if (v4)
  {
    if (*(_QWORD *)(v4 + 64) == 22)
      v7 = &unk_1ECCEA080;
    else
      v7 = (_DWORD *)v4;
  }
  else
  {
    v7 = 0;
  }
  (*(void (**)(uint64_t *, char *))(*a1 + 48))(a1, &v9);
  if (v9)
  {
    objc_destructInstance(a1);
    free(a1);
  }
  if (v2 && v3)
    dispatch_async_f_VARIANT_mp(v7, v3, v2);
  if (v7)
    _os_object_release_internal_VARIANT_mp(v7, v8);
}

uint64_t dispatch_get_context_VARIANT_mp(unint64_t *a1)
{
  unint64_t v1;

  v1 = *a1;
  if ((*a1 & 1) != 0)
    return _dispatch_objc_get_context();
  if (v1 < (unint64_t)OS_dispatch_object || v1 >= (unint64_t)OS_object)
    return _dispatch_objc_get_context();
  if ((*(_BYTE *)(v1 + 42) & 4) != 0)
    return 0;
  return a1[4];
}

void *dispatch_set_context_VARIANT_mp(void *a1, const char *a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 1) != 0)
    return (void *)_dispatch_objc_set_context(a1, a2);
  if (v2 < (unint64_t)OS_dispatch_object || v2 >= (unint64_t)OS_object)
    return (void *)_dispatch_objc_set_context(a1, a2);
  if ((*(_BYTE *)(v2 + 42) & 4) == 0)
    *((_QWORD *)a1 + 4) = a2;
  return a1;
}

void *dispatch_set_finalizer_f_VARIANT_mp(void *a1, const char *a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 1) != 0)
    return (void *)_dispatch_objc_set_finalizer_f(a1, a2);
  if (v2 < (unint64_t)OS_dispatch_object || v2 >= (unint64_t)OS_object)
    return (void *)_dispatch_objc_set_finalizer_f(a1, a2);
  if ((*(_BYTE *)(v2 + 42) & 4) == 0)
    *((_QWORD *)a1 + 5) = a2;
  return a1;
}

unint64_t *dispatch_set_target_queue_VARIANT_mp(unint64_t *result, uint64_t a2)
{
  unint64_t *v3;
  unint64_t v4;
  uint64_t v6;
  _DWORD *v7;
  unsigned int *v8;
  int v9;
  unint64_t *v10;
  unsigned int *v11;
  int v12;

  v3 = result;
  v4 = *result;
  if ((*result & 1) != 0)
    return (unint64_t *)_dispatch_objc_set_target_queue(result, (const char *)a2);
  if (v4 < (unint64_t)OS_dispatch_object || v4 >= (unint64_t)OS_object)
    return (unint64_t *)_dispatch_objc_set_target_queue(result, (const char *)a2);
  if (*((_DWORD *)result + 2) != 0x7FFFFFFF)
  {
    v6 = *(_QWORD *)(v4 + 40);
    if ((v6 & 0x30000) == 0)
    {
      if (a2 && (*(_BYTE *)(a2 + 87) & 8) != 0 && v6 != 1 && v4 >= 0x1000)
      {
        if (*(_QWORD *)(v4 + 40) != 19
          || !_dispatch_source_is_timer_VARIANT_mp((uint64_t)result))
        {
          dispatch_set_target_queue_VARIANT_mp_cold_3((uint64_t)v3);
        }
        v6 = *(_QWORD *)(*v3 + 40);
      }
      if ((v6 & 0xF0) == 0x10)
      {
        return _dispatch_lane_set_target_queue_VARIANT_mp(v3, (char *)a2);
      }
      else if (v6 == 4)
      {
        return (unint64_t *)_dispatch_io_set_target_queue_VARIANT_mp((uint64_t)v3, a2);
      }
      else
      {
        v7 = &unk_1ECCEA080;
        if (a2)
          v7 = (_DWORD *)a2;
        if (v7[2] != 0x7FFFFFFF)
        {
          v8 = v7 + 2;
          do
            v9 = __ldxr(v8);
          while (__stxr(v9 + 1, v8));
          if (v9 <= 0)
            dispatch_set_target_queue_VARIANT_mp_cold_2();
        }
        v10 = v3 + 3;
        do
          result = (unint64_t *)__ldxr(v10);
        while (__stlxr((unint64_t)v7, v10));
        if (result)
        {
          if (*((_DWORD *)result + 2) != 0x7FFFFFFF)
          {
            v11 = (unsigned int *)(result + 1);
            do
              v12 = __ldxr(v11);
            while (__stlxr(v12 - 1, v11));
            if (v12 <= 1)
            {
              if (v12 != 1)
                _os_object_allows_weak_reference_VARIANT_mp_cold_1();
              return (unint64_t *)_os_object_dispose(result, (const char *)a2);
            }
          }
        }
      }
    }
  }
  return result;
}

void dispatch_activate_VARIANT_mp(uint64_t a1)
{
  unint64_t v1;
  BOOL v2;
  uint64_t v3;

  v1 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 1) != 0
    || (v1 >= (unint64_t)OS_dispatch_object
      ? (v2 = v1 >= (unint64_t)OS_object)
      : (v2 = 1),
        v2))
  {
    _dispatch_objc_activate();
  }
  else if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    v3 = *(unsigned __int8 *)(v1 + 40);
    if (v3 == 18)
    {
      _dispatch_workloop_activate_VARIANT_mp(a1);
    }
    else if ((v3 & 0xF0) == 0x10)
    {
      _dispatch_queue_resume_VARIANT_mp(a1, 1);
    }
  }
}

uint64_t dispatch_suspend_VARIANT_mp(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;

  v1 = result;
  v2 = *(_QWORD *)result;
  if ((*(_QWORD *)result & 1) != 0)
    return _dispatch_objc_suspend(result);
  if (v2 < (unint64_t)OS_dispatch_object || v2 >= (unint64_t)OS_object)
    return _dispatch_objc_suspend(result);
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(v2 + 40);
    if ((v4 & 0x300F0) == 0x10)
    {
      if (v4 == 18 && _dispatch_workloop_uses_bound_thread_VARIANT_mp(result))
        dispatch_suspend_VARIANT_mp_cold_1();
      return _dispatch_lane_suspend_VARIANT_mp(v1);
    }
  }
  return result;
}

uint64_t dispatch_resume_VARIANT_mp(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;

  v1 = result;
  v2 = *(_QWORD *)result;
  if ((*(_QWORD *)result & 1) != 0)
    return _dispatch_objc_resume(result);
  if (v2 < (unint64_t)OS_dispatch_object || v2 >= (unint64_t)OS_object)
    return _dispatch_objc_resume(result);
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(v2 + 40);
    if ((v4 & 0x300F0) == 0x10)
    {
      if (v4 == 18 && _dispatch_workloop_uses_bound_thread_VARIANT_mp(result))
        dispatch_resume_VARIANT_mp_cold_1();
      return _dispatch_queue_resume_VARIANT_mp(v1, 0);
    }
  }
  return result;
}

uint64_t _dispatch_sema4_create_slow_VARIANT_mp(unsigned int *a1, int policy)
{
  task_t *v4;
  uint64_t result;
  semaphore_t v6;
  unint64_t StatusReg;
  uint64_t v10;
  semaphore_t semaphore;

  semaphore = 0;
  if ((_dispatch_unsafe_fork & 1) != 0)
  {
    if (policy)
      goto LABEL_3;
  }
  else
  {
    _dispatch_fork_becomes_unsafe_slow_VARIANT_mp();
    if (policy)
    {
LABEL_3:
      v4 = (task_t *)MEMORY[0x1E0C883F0];
      result = semaphore_create(*MEMORY[0x1E0C883F0], &semaphore, policy, 0);
      if ((_DWORD)result == -301)
        _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
      if ((_DWORD)result)
      {
        if ((_DWORD)result == 15)
          _dispatch_sema4_create_slow_VARIANT_mp_cold_3();
        _dispatch_sema4_create_slow_VARIANT_mp_cold_1(result);
      }
      v6 = semaphore;
      while (!__ldxr(a1))
      {
        if (!__stxr(v6, a1))
          return result;
      }
      __clrex();
      result = semaphore_destroy(*v4, v6);
      if ((_DWORD)result == -301)
        _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
      if ((_DWORD)result)
      {
        if ((_DWORD)result == 15)
          _dispatch_sema4_create_slow_VARIANT_mp_cold_3();
        _dispatch_sema4_create_slow_VARIANT_mp_cold_1(result);
      }
      return result;
    }
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  result = *(_QWORD *)(StatusReg + 72);
  if (result)
    *(_QWORD *)(StatusReg + 72) = 0;
  else
    result = _os_semaphore_create();
  while (!__ldxr(a1))
  {
    if (!__stxr(result, a1))
      return result;
  }
  __clrex();
  v10 = result;
  result = *(_QWORD *)(StatusReg + 72);
  *(_QWORD *)(StatusReg + 72) = v10;
  if (result)
    return _os_semaphore_dispose();
  return result;
}

uint64_t _dispatch_sema4_dispose_slow_VARIANT_mp(_DWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t result;
  unint64_t StatusReg;

  v3 = *a1;
  *a1 = -1;
  if (a2)
  {
    result = semaphore_destroy(*MEMORY[0x1E0C883F0], v3);
    if ((_DWORD)result == -301)
      _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
    if ((_DWORD)result)
    {
      if ((_DWORD)result == 15)
        _dispatch_sema4_create_slow_VARIANT_mp_cold_3();
      _dispatch_sema4_create_slow_VARIANT_mp_cold_1(result);
    }
  }
  else
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    result = *(_QWORD *)(StatusReg + 72);
    *(_QWORD *)(StatusReg + 72) = v3;
    if (result)
      return _os_semaphore_dispose();
  }
  return result;
}

uint64_t _dispatch_sema4_signal_VARIANT_mp(unsigned int *a1, uint64_t a2)
{
  uint64_t result;

  do
  {
    result = MEMORY[0x18D76719C](*a1);
    if ((_DWORD)result == -301)
      _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
    if ((_DWORD)result)
    {
      if ((_DWORD)result == 15)
        _dispatch_sema4_create_slow_VARIANT_mp_cold_3();
      _dispatch_sema4_create_slow_VARIANT_mp_cold_1(result);
    }
    --a2;
  }
  while (a2);
  return result;
}

uint64_t _dispatch_sema4_wait_VARIANT_mp(unsigned int *a1)
{
  uint64_t result;

  while (1)
  {
    result = MEMORY[0x18D7671B4](*a1);
    if ((int)result <= 13)
      break;
    if ((_DWORD)result != 14)
    {
      if ((_DWORD)result == 15)
        _dispatch_sema4_create_slow_VARIANT_mp_cold_3();
      goto LABEL_8;
    }
  }
  if ((_DWORD)result == -301)
    _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
  if ((_DWORD)result)
LABEL_8:
    _dispatch_sema4_create_slow_VARIANT_mp_cold_1(result);
  return result;
}

BOOL _dispatch_sema4_timedwait_VARIANT_mp(semaphore_t *a1, int64_t a2)
{
  unint64_t v4;
  kern_return_t v5;
  mach_timespec_t v7;

  do
  {
    v4 = _dispatch_timeout(a2);
    v7.tv_sec = v4 / 0x3B9ACA00;
    v7.tv_nsec = v4 % 0x3B9ACA00;
    v5 = semaphore_timedwait(*a1, v7);
  }
  while (v5 == 14);
  if (v5 != 49)
  {
    if (v5 == -301)
      _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
    if (v5)
    {
      if (v5 == 15)
        _dispatch_sema4_create_slow_VARIANT_mp_cold_3();
      _dispatch_sema4_create_slow_VARIANT_mp_cold_1(v5);
    }
  }
  return v5 == 49;
}

uint64_t _dispatch_wait_on_address_VARIANT_mp(uint64_t a1, unsigned int a2, int64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t result;

  v6 = _dispatch_timeout(a3);
  if (v6 == -1)
    return _dlock_wait(a1, a2, 0);
  if (!v6)
    return 60;
  while (1)
  {
    v7 = v6 == 1000 * (v6 / 0x3E8) ? v6 / 0x3E8 : v6 / 0x3E8 + 1;
    v8 = v7 >= 0xFFFFFFFF ? -1 : v7;
    result = _dlock_wait(a1, a2, v8);
    if (v7 < 0xFFFFFFFF || (_DWORD)result != 60)
      break;
    v6 = _dispatch_timeout(a3);
    if (!v6)
      return 60;
  }
  return result;
}

uint64_t _dispatch_wake_by_address_VARIANT_mp()
{
  return _dlock_wake();
}

uint64_t _dispatch_thread_event_signal_slow_VARIANT_mp()
{
  return _dlock_wake();
}

uint64_t _dispatch_thread_event_wait_slow_VARIANT_mp(unsigned int *a1)
{
  uint64_t result;

  while (1)
  {
    result = atomic_load(a1);
    if (!(_DWORD)result)
      break;
    if ((_DWORD)result != -1)
      _dispatch_thread_event_wait_slow_VARIANT_mp_cold_1(result);
    _dlock_wait((uint64_t)a1, 0xFFFFFFFF, 0);
  }
  return result;
}

uint64_t _dispatch_unfair_lock_lock_slow_VARIANT_mp(uint64_t result)
{
  unsigned int *v1;
  int v2;
  unsigned int i;
  unsigned int v4;
  unsigned int v5;

  v1 = (unsigned int *)result;
  v2 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  for (i = v2 & 0xFFFFFFFC; ; i |= (_DWORD)result == 66)
  {
    while (1)
    {
      v4 = __ldaxr(v1);
      v5 = i;
      if (v4 >= 4)
      {
        v5 = v4 | 1;
        if ((v4 | 1) == v4)
          break;
      }
      if (!__stxr(v5, v1))
        goto LABEL_4;
    }
    __clrex();
    v5 = v4;
LABEL_4:
    if ((v4 ^ v2) <= 3)
      _dispatch_unfair_lock_lock_slow_VARIANT_mp_cold_1();
    if (v5 == i)
      break;
    result = _dlock_wait((uint64_t)v1, v5, 0);
  }
  return result;
}

uint64_t _dispatch_unfair_lock_unlock_slow_VARIANT_mp(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if ((*(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) ^ a2) >= 4)
    _dispatch_unfair_lock_unlock_slow_VARIANT_mp_cold_1(a2);
  if ((a2 & 1) != 0)
    return _dlock_wake();
  return result;
}

uint64_t _dispatch_once_wait_VARIANT_mp(uint64_t result)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = (unint64_t *)result;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  while (1)
  {
    v3 = __ldxr(v1);
    if (v3 == -1)
    {
      __clrex();
      return result;
    }
    if ((v3 & 3) == 2)
      break;
    v4 = v3 | 1;
    if ((v3 | 1) == v3)
    {
      __clrex();
      LODWORD(v4) = v3;
      goto LABEL_7;
    }
    if (!__stxr(v4, v1))
    {
LABEL_7:
      if (((v3 ^ v2) & 0xFFFFFFFC) == 0)
        _dispatch_unfair_lock_lock_slow_VARIANT_mp_cold_1();
      result = _dlock_wait((uint64_t)v1, v4, 0);
    }
  }
  __clrex();
  __dmb(9u);
  if (4 * MEMORY[0xFFFFFC180] - v3 - 14 <= 0xFFFFFFFFFFFFFFEFLL)
    *v1 = -1;
  return result;
}

uint64_t _dispatch_gate_broadcast_slow_VARIANT_mp(uint64_t a1, unsigned int a2)
{
  if ((*(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) ^ a2) >= 4)
    _dispatch_unfair_lock_unlock_slow_VARIANT_mp_cold_1(a2);
  return _dlock_wake();
}

uint64_t _dispatch_firehose_gate_wait_VARIANT_mp(uint64_t a1, unsigned int a2)
{
  return _dlock_wait(a1, a2, 0);
}

uint64_t _dlock_wait(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;

  v4 = a2;
  while (1)
  {
    v5 = __ulock_wait();
    if (v5 > 0)
      return 66;
    v6 = v5;
    result = -v5;
    if (v6 != -4)
      break;
    if (a3)
      return result;
  }
  if (result > 0x3C || ((1 << result) & 0x1000000000004001) == 0)
  {
    if ((_DWORD)result == 105)
      _dlock_wait_cold_2(v4);
    _dlock_wait_cold_1(result);
  }
  return result;
}

uint64_t _dlock_wake()
{
  uint64_t result;

  result = __ulock_wake();
  if ((_DWORD)result)
  {
    if ((_DWORD)result != -2)
      _dlock_wake_cold_1(result);
  }
  return result;
}

uint64_t dispatch_semaphore_create_VARIANT_mp(uint64_t a1)
{
  uint64_t result;

  if (a1 < 0)
    return 0;
  result = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_semaphore, 72);
  *(_QWORD *)(result + 16) = -1985229329;
  *(_QWORD *)(result + 24) = &unk_1ECCEA080;
  *(_QWORD *)(result + 48) = a1;
  *(_DWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 56) = a1;
  return result;
}

_DWORD *_dispatch_semaphore_dispose_VARIANT_mp(uint64_t a1)
{
  uint64_t v1;
  _DWORD *result;
  int v3;

  v1 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 48) < v1)
    _dispatch_semaphore_dispose_VARIANT_mp_cold_1((_QWORD *)(a1 + 48), v1);
  v3 = *(_DWORD *)(a1 + 64);
  result = (_DWORD *)(a1 + 64);
  if (v3)
    return (_DWORD *)_dispatch_sema4_dispose_slow_VARIANT_mp(result, 0);
  return result;
}

uint64_t _dispatch_semaphore_signal_slow_VARIANT_mp(uint64_t a1)
{
  unsigned int *v1;

  v1 = (unsigned int *)(a1 + 64);
  if (!*(_DWORD *)(a1 + 64))
    _dispatch_sema4_create_slow_VARIANT_mp((unsigned int *)(a1 + 64), 0);
  _dispatch_sema4_signal_VARIANT_mp(v1, 1);
  return 1;
}

uint64_t dispatch_semaphore_signal_VARIANT_mp(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;

  v1 = (unint64_t *)(a1 + 48);
  do
    v2 = __ldxr(v1);
  while (__stlxr(v2 + 1, v1));
  if ((v2 & 0x8000000000000000) != 0)
    return _dispatch_semaphore_signal_slow_VARIANT_mp(a1);
  else
    return 0;
}

uint64_t dispatch_semaphore_wait_VARIANT_mp(uint64_t a1, int64_t a2)
{
  unint64_t *v2;
  uint64_t v3;

  v2 = (unint64_t *)(a1 + 48);
  do
    v3 = __ldaxr(v2);
  while (__stxr(v3 - 1, v2));
  if (v3 <= 0)
    return _dispatch_semaphore_wait_slow(a1, a2);
  else
    return 0;
}

uint64_t _dispatch_semaphore_wait_slow(uint64_t a1, int64_t a2)
{
  semaphore_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  char v10;

  v4 = (semaphore_t *)(a1 + 64);
  if (!*(_DWORD *)(a1 + 64))
    _dispatch_sema4_create_slow_VARIANT_mp((unsigned int *)(a1 + 64), 0);
  if (a2 != -1)
  {
    if (a2 && !_dispatch_sema4_timedwait_VARIANT_mp(v4, a2))
      return 0;
    v7 = *(_QWORD *)(a1 + 48);
    v6 = (unint64_t *)(a1 + 48);
    v5 = v7;
    result = 49;
    while ((v5 & 0x8000000000000000) != 0)
    {
      while (1)
      {
        v9 = __ldxr(v6);
        if (v9 != v5)
          break;
        if (!__stxr(v5 + 1, v6))
        {
          v10 = 1;
          goto LABEL_12;
        }
      }
      v10 = 0;
      __clrex();
LABEL_12:
      v5 = v9;
      if ((v10 & 1) != 0)
        return result;
    }
  }
  _dispatch_sema4_wait_VARIANT_mp(v4);
  return 0;
}

uint64_t dispatch_group_create_VARIANT_mp()
{
  uint64_t result;

  result = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_group, 72);
  *(_QWORD *)(result + 16) = -1985229329;
  *(_QWORD *)(result + 24) = &unk_1ECCEA080;
  return result;
}

uint64_t _dispatch_group_create_and_enter_VARIANT_mp()
{
  uint64_t result;
  unsigned int *v1;
  int v2;

  result = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_group, 72);
  *(_QWORD *)(result + 16) = -1985229329;
  *(_QWORD *)(result + 24) = &unk_1ECCEA080;
  *(_DWORD *)(result + 48) = -4;
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    v1 = (unsigned int *)(result + 8);
    do
      v2 = __ldxr(v1);
    while (__stxr(v2 + 1, v1));
    if (v2 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  return result;
}

uint64_t _dispatch_group_dispose_VARIANT_mp(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  if ((_DWORD)result)
    _dispatch_group_dispose_VARIANT_mp_cold_1(result);
  return result;
}

uint64_t dispatch_group_wait_VARIANT_mp(uint64_t a1, int64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t result;

  v2 = (unint64_t *)(a1 + 48);
  while (1)
  {
    v3 = __ldxr(v2);
    if ((v3 & 0xFFFFFFFC) == 0)
    {
      result = 0;
      __dmb(9u);
      return result;
    }
    if (!a2)
      break;
    if ((v3 & 1) != 0)
    {
      __clrex();
      return _dispatch_group_wait_slow(a1, HIDWORD(v3), a2);
    }
    if (!__stxr(v3 | 1, v2))
      return _dispatch_group_wait_slow(a1, HIDWORD(v3), a2);
  }
  __clrex();
  return 49;
}

uint64_t _dispatch_group_wait_slow(uint64_t a1, unsigned int a2, int64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;

  v5 = (unsigned int *)(a1 + 52);
  v6 = 49;
  while (1)
  {
    v7 = _dispatch_wait_on_address_VARIANT_mp((uint64_t)v5, a2, a3);
    v8 = atomic_load(v5);
    if (v8 != a2)
      break;
    if (v7 == 60)
      return v6;
  }
  return 0;
}

uint64_t dispatch_group_leave_VARIANT_mp(uint64_t result)
{
  unint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  const char *v5;
  unint64_t v6;
  unint64_t v7;
  int v8;

  v1 = (unint64_t *)(result + 48);
  do
    v2 = __ldxr(v1);
  while (__stlxr(v2 + 4, v1));
  v3 = v2 & 0xFFFFFFFC;
  if ((v2 & 0xFFFFFFFC) == 0xFFFFFFFC)
  {
    v4 = v2 + 4;
    do
    {
      v5 = (const char *)v4;
      v6 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v5 & 0xFFFFFFFC) != 0)
        v6 = (unint64_t)v5;
      v7 = v6 & 0xFFFFFFFFFFFFFFFDLL;
      if (v5 == (const char *)(v6 & 0xFFFFFFFFFFFFFFFDLL))
        break;
      while (1)
      {
        v4 = __ldxr(v1);
        if ((const char *)v4 != v5)
          break;
        if (!__stxr(v7, v1))
        {
          v8 = 1;
          goto LABEL_14;
        }
      }
      v8 = 0;
      __clrex();
LABEL_14:
      ;
    }
    while (!v8);
    return _dispatch_group_wake(result, v5, 1);
  }
  else if (!(_DWORD)v3)
  {
    dispatch_group_leave_VARIANT_mp_cold_1(v3);
  }
  return result;
}

uint64_t _dispatch_group_wake(uint64_t result, const char *a2, int a3)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  int v14;
  unsigned int *v15;
  unsigned int v16;
  signed int v17;

  v4 = (char)a2;
  v5 = result;
  if ((a2 & 2) != 0)
  {
    v6 = *(_QWORD *)(result + 56);
    if (!v6)
      v6 = _dispatch_wait_for_enqueuer((unint64_t *)(result + 56));
    *(_QWORD *)(v5 + 56) = 0;
    v7 = (unint64_t *)(v5 + 64);
    do
      v8 = __ldxr(v7);
    while (__stlxr(0, v7));
    do
    {
      while (1)
      {
        v9 = v6;
        v10 = *(unsigned int **)(v6 + 48);
        if (v6 == v8)
        {
          v6 = 0;
        }
        else
        {
          v6 = *(_QWORD *)(v6 + 16);
          if (!v6)
            v6 = _dispatch_wait_for_enqueuer((unint64_t *)(v9 + 16));
        }
        v11 = __clz(__rbit32((*(_DWORD *)(v9 + 8) >> 8) & 0x3FFF));
        v12 = ((*(_DWORD *)(v9 + 8) >> 8) & 0x3FFF) != 0 ? v11 + 1 : 0;
        v13 = v10 + 2;
        result = (*(uint64_t (**)(unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v10 + 88))(v10, v9, v12);
        if (v10[2] != 0x7FFFFFFF)
        {
          do
            v14 = __ldxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (v14 <= 1)
            break;
        }
        if (!v6)
          goto LABEL_20;
      }
      if (v14 != 1)
      {
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
        goto LABEL_34;
      }
      result = _os_object_dispose(v10, a2);
    }
    while (v6);
LABEL_20:
    if (a3)
      LOWORD(a3) = 2;
    else
      LOWORD(a3) = 1;
  }
  if ((v4 & 1) != 0)
    result = _dispatch_wake_by_address_VARIANT_mp();
  if ((_WORD)a3)
  {
    if (*(_DWORD *)(v5 + 8) != 0x7FFFFFFF)
    {
      v15 = (unsigned int *)(v5 + 8);
      do
      {
        v16 = __ldxr(v15);
        v17 = v16 - (unsigned __int16)a3;
      }
      while (__stlxr(v17, v15));
      if (v17 <= 0)
      {
        if (v17 < 0)
        {
LABEL_34:
          qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
          __break(1u);
        }
        else
        {
          return _os_object_dispose((void *)v5, a2);
        }
      }
    }
  }
  return result;
}

uint64_t dispatch_group_enter_VARIANT_mp(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int *v3;
  int v4;

  v1 = (unsigned int *)(result + 48);
  do
    v2 = __ldaxr(v1);
  while (__stxr(v2 - 4, v1));
  if ((v2 & 0xFFFFFFFC) != 0)
  {
    if ((v2 & 0xFFFFFFFC) == 4)
      dispatch_group_enter_VARIANT_mp_cold_2(v2);
  }
  else if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    v3 = (unsigned int *)(result + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
    if (v4 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  return result;
}

_QWORD *dispatch_group_notify_f_VARIANT_mp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *StatusReg;
  _QWORD *result;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  int v13;
  int v14;
  unsigned int *v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int *v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;
  const char *v23;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  result = (_QWORD *)StatusReg[22];
  if (result)
    StatusReg[22] = result[2];
  else
    result = _dispatch_continuation_alloc_from_heap_VARIANT_mp();
  *result = 260;
  result[4] = a4;
  result[5] = a3;
  v10 = StatusReg[4] & 0xFFFFFFLL;
  if (v10 >= 0x10FF)
    v10 = 4351;
  v11 = StatusReg[28];
  if (v11)
  {
    v12 = (unsigned int *)(v11 + 12);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    if (v13 <= 0)
      goto LABEL_33;
  }
  result[3] = v11;
  if (v10)
  {
    v14 = (*(_DWORD *)(a2 + 84) >> 30) & 1;
    if ((*(_DWORD *)(a2 + 84) & 0xFFF) == 0)
      v14 = 1;
    if (!v14)
      v10 = 0;
  }
  result[1] = v10;
  result[6] = a2;
  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF)
  {
    v15 = (unsigned int *)(a2 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    if (v16 <= 0)
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
LABEL_33:
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
      __break(1u);
LABEL_34:
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
      return result;
    }
  }
  result[2] = 0;
  v17 = (unint64_t *)(a1 + 64);
  StatusReg[122] = a1 + 64;
  do
    v18 = __ldxr(v17);
  while (__stlxr((unint64_t)result, v17));
  if (v18)
  {
    *(_QWORD *)(v18 + 16) = result;
    StatusReg[122] = 0;
    return result;
  }
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    v19 = (unsigned int *)(a1 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    if (v20 <= 0)
      goto LABEL_34;
  }
  *(_QWORD *)(a1 + 56) = result;
  StatusReg[122] = 0;
  v21 = (unint64_t *)(a1 + 48);
  while (1)
  {
    v22 = __ldxr(v21);
    v23 = (const char *)(v22 | 2);
    if (!(_DWORD)v22)
      break;
    if (!__stlxr((unint64_t)v23, v21))
      return result;
  }
  __clrex();
  return (_QWORD *)_dispatch_group_wake(a1, v23, 0);
}

void *dispatch_group_notify_VARIANT_mp(uint64_t a1, unsigned int *a2, uint64_t (**aBlock)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  _QWORD *StatusReg;
  uint64_t *v7;
  void *result;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  int v13;
  int v14;
  unsigned int *v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int *v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;
  const char *v23;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = (uint64_t *)StatusReg[22];
  if (v7)
    StatusReg[22] = v7[2];
  else
    v7 = (uint64_t *)_dispatch_continuation_alloc_from_heap_VARIANT_mp();
  result = _dispatch_Block_copy(aBlock);
  v9 = aBlock[2];
  *v7 = 276;
  if (v9 == ___dispatch_block_create_block_invoke)
  {
    v7[5] = (uint64_t)result;
    result = _dispatch_continuation_init_slow_VARIANT_mp(v7, a2, 0);
  }
  else
  {
    v7[4] = (uint64_t)_dispatch_call_block_and_release;
    v7[5] = (uint64_t)result;
    v10 = StatusReg[4] & 0xFFFFFFLL;
    if (v10 >= 0x10FF)
      v10 = 4351;
    v11 = StatusReg[28];
    if (v11)
    {
      v12 = (unsigned int *)(v11 + 12);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      if (v13 <= 0)
        dispatch_group_notify_VARIANT_mp_cold_3();
    }
    v7[3] = v11;
    if (v10)
    {
      v14 = (a2[21] >> 30) & 1;
      if ((a2[21] & 0xFFF) == 0)
        v14 = 1;
      if (!v14)
        v10 = 0;
    }
    v7[1] = v10;
  }
  v7[6] = (uint64_t)a2;
  if (a2[2] != 0x7FFFFFFF)
  {
    v15 = a2 + 2;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    if (v16 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v7[2] = 0;
  v17 = (unint64_t *)(a1 + 64);
  StatusReg[122] = a1 + 64;
  do
    v18 = __ldxr(v17);
  while (__stlxr((unint64_t)v7, v17));
  if (v18)
  {
    *(_QWORD *)(v18 + 16) = v7;
    StatusReg[122] = 0;
  }
  else
  {
    if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
    {
      v19 = (unsigned int *)(a1 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      if (v20 <= 0)
        dispatch_set_target_queue_VARIANT_mp_cold_2();
    }
    *(_QWORD *)(a1 + 56) = v7;
    StatusReg[122] = 0;
    v21 = (unint64_t *)(a1 + 48);
    while (1)
    {
      v22 = __ldxr(v21);
      v23 = (const char *)(v22 | 2);
      if (!(_DWORD)v22)
        break;
      if (!__stlxr((unint64_t)v23, v21))
        return result;
    }
    __clrex();
    return (void *)_dispatch_group_wake(a1, v23, 0);
  }
  return result;
}

_QWORD *dispatch_group_async_f_VARIANT_mp(_QWORD *result, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *StatusReg;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  int v13;
  int v14;
  uint64_t v15;

  v7 = (uint64_t)result;
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v9 = (_QWORD *)StatusReg[22];
  if (v9)
  {
    StatusReg[22] = v9[2];
  }
  else
  {
    result = _dispatch_continuation_alloc_from_heap_VARIANT_mp();
    v9 = result;
  }
  *v9 = 268;
  v9[4] = a4;
  v9[5] = a3;
  v10 = StatusReg[4] & 0xFFFFFFLL;
  if (v10 >= 0x10FF)
    v10 = 4351;
  v11 = StatusReg[28];
  if (!v11)
    goto LABEL_9;
  v12 = (unsigned int *)(v11 + 12);
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  if (v13 <= 0)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
  else
  {
LABEL_9:
    v9[3] = v11;
    if (v10)
    {
      v14 = a2[21];
      if ((v14 & 0x40000000) != 0 || (v14 & 0xFFF) == 0)
      {
        v15 = __clz(__rbit32(v10 >> 8)) + 1;
      }
      else
      {
        v15 = 0;
        v10 = 0;
      }
    }
    else
    {
      v15 = 0;
    }
    v9[1] = v10;
    dispatch_group_enter_VARIANT_mp(v7);
    v9[6] = v7;
    return (_QWORD *)(*(uint64_t (**)(_DWORD *, _QWORD *, uint64_t))(*(_QWORD *)a2 + 88))(a2, v9, v15);
  }
  return result;
}

uint64_t dispatch_group_async_VARIANT_mp(uint64_t a1, unsigned int *a2, uint64_t (**aBlock)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  _QWORD *StatusReg;
  uint64_t *v7;
  void *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  int v13;
  unsigned int v14;
  uint64_t *inited;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = (uint64_t *)StatusReg[22];
  if (v7)
    StatusReg[22] = v7[2];
  else
    v7 = (uint64_t *)_dispatch_continuation_alloc_from_heap_VARIANT_mp();
  v8 = _dispatch_Block_copy(aBlock);
  v9 = aBlock[2];
  *v7 = 284;
  if (v9 == ___dispatch_block_create_block_invoke)
  {
    v7[5] = (uint64_t)v8;
    inited = _dispatch_continuation_init_slow_VARIANT_mp(v7, a2, 0);
  }
  else
  {
    v7[4] = (uint64_t)_dispatch_call_block_and_release;
    v7[5] = (uint64_t)v8;
    v10 = StatusReg[4] & 0xFFFFFFLL;
    if (v10 >= 0x10FF)
      v10 = 4351;
    v11 = StatusReg[28];
    if (v11)
    {
      v12 = (unsigned int *)(v11 + 12);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      if (v13 <= 0)
        dispatch_group_notify_VARIANT_mp_cold_3();
    }
    v7[3] = v11;
    if (v10)
    {
      v14 = a2[21];
      if ((v14 & 0x40000000) != 0 || (v14 & 0xFFF) == 0)
      {
        inited = (uint64_t *)(__clz(__rbit32(v10 >> 8)) + 1);
      }
      else
      {
        inited = 0;
        v10 = 0;
      }
    }
    else
    {
      inited = 0;
    }
    v7[1] = v10;
  }
  dispatch_group_enter_VARIANT_mp(a1);
  v7[6] = a1;
  return (*(uint64_t (**)(unsigned int *, uint64_t *, uint64_t *))(*(_QWORD *)a2 + 88))(a2, v7, inited);
}

unint64_t *dispatch_once_VARIANT_mp(unint64_t *a1, uint64_t a2)
{
  return dispatch_once_f_VARIANT_mp(a1, a2, *(uint64_t (**)(void))(a2 + 16));
}

unint64_t *dispatch_once_f_VARIANT_mp(unint64_t *a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t v3;
  unint64_t v4;

  v3 = atomic_load(a1);
  if (v3 != -1)
  {
    if ((v3 & 3) == 2)
    {
      if (4 * MEMORY[0xFFFFFC180] - v3 - 14 <= 0xFFFFFFFFFFFFFFEFLL)
        *a1 = -1;
    }
    else
    {
      v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFCLL;
      while (!__ldxr(a1))
      {
        if (!__stxr(v4, a1))
          return (unint64_t *)_dispatch_once_callout(a1, a2, a3);
      }
      __clrex();
      return (unint64_t *)_dispatch_once_wait_VARIANT_mp((uint64_t)a1);
    }
  }
  return a1;
}

uint64_t _dispatch_once_callout(unint64_t *a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;

  result = _dispatch_client_callout(a2, a3);
  v5 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFC;
  v6 = (4 * MEMORY[0xFFFFFC180]) | 2;
  do
    v7 = __ldxr(a1);
  while (__stlxr(v6, a1));
  if (v5 != v7)
    return _dispatch_gate_broadcast_slow_VARIANT_mp((uint64_t)a1, v7);
  return result;
}

_QWORD *dispatch_assert_queue_V2_VARIANT_mp(_QWORD *result)
{
  uint64_t v1;
  unint64_t StatusReg;
  _QWORD *v3;
  _BOOL4 v4;
  BOOL v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if ((unint64_t)*(unsigned __int8 *)(*result + 40) - 19 <= 0xFFFFFFFFFFFFFFFDLL)
    dispatch_assert_queue_V2_VARIANT_mp_cold_1(*(unsigned __int8 *)(*result + 40));
  v1 = result[7];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (((v1 ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) != 0)
  {
    v3 = *(_QWORD **)(StatusReg + 160);
    v4 = v3 == 0;
    if (v3)
      v5 = v3 == result;
    else
      v5 = 1;
    if (v5)
    {
LABEL_21:
      if (v4)
        _dispatch_assert_queue_fail(result, 1);
      return result;
    }
    v6 = *(_QWORD **)(StatusReg + 168);
    while (1)
    {
      v7 = (_QWORD *)v3[3];
      if (v6)
      {
        if (!v7)
        {
          v7 = (_QWORD *)*v6;
LABEL_15:
          v6 = (_QWORD *)v6[1];
          goto LABEL_16;
        }
        if (v3 == (_QWORD *)*v6)
          goto LABEL_15;
      }
LABEL_16:
      v4 = v7 == 0;
      if (v7)
        v8 = v7 == result;
      else
        v8 = 1;
      v3 = v7;
      if (v8)
        goto LABEL_21;
    }
  }
  return result;
}

void _dispatch_assert_queue_fail(_QWORD *a1, int a2)
{
  const char *v2;
  const char *v3;
  char *v4;
  char *v5;

  v2 = "not ";
  v3 = (const char *)&unk_18A069831;
  v5 = 0;
  if (a2)
    v2 = (const char *)&unk_18A069831;
  if (a1[9])
    v3 = (const char *)a1[9];
  asprintf(&v5, "%sBlock was %sexpected to execute on queue [%s (%p)]", "BUG IN CLIENT OF LIBDISPATCH: Assertion failed: ", v2, v3, a1);
  v4 = v5;
  _dispatch_log("%s", v5);
  qword_1EDF52D08 = (uint64_t)v4;
  __break(1u);
}

_QWORD *dispatch_assert_queue_not_V2_VARIANT_mp(_QWORD *result)
{
  uint64_t v1;
  unint64_t StatusReg;
  _QWORD *v3;
  BOOL v4;
  BOOL v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if ((unint64_t)*(unsigned __int8 *)(*result + 40) - 19 <= 0xFFFFFFFFFFFFFFFDLL)
    dispatch_assert_queue_not_V2_VARIANT_mp_cold_1(*(unsigned __int8 *)(*result + 40));
  v1 = result[7];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (((v1 ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) == 0)
    goto LABEL_20;
  v3 = *(_QWORD **)(StatusReg + 160);
  v4 = v3 == 0;
  if (v3)
    v5 = v3 == result;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = *(_QWORD **)(StatusReg + 168);
    do
    {
      v7 = (_QWORD *)v3[3];
      if (v6)
      {
        if (!v7)
        {
          v7 = (_QWORD *)*v6;
LABEL_13:
          v6 = (_QWORD *)v6[1];
          goto LABEL_14;
        }
        if (v3 == (_QWORD *)*v6)
          goto LABEL_13;
      }
LABEL_14:
      v4 = v7 == 0;
      if (v7)
        v8 = v7 == result;
      else
        v8 = 1;
      v3 = v7;
    }
    while (!v8);
  }
  if (!v4)
LABEL_20:
    _dispatch_assert_queue_fail(result, 0);
  return result;
}

_QWORD *dispatch_assert_queue_barrier_VARIANT_mp(uint64_t a1)
{
  _QWORD *result;

  result = dispatch_assert_queue_V2_VARIANT_mp((_QWORD *)a1);
  if (*(_WORD *)(a1 + 80) != 1 && (!*(_QWORD *)(a1 + 24) || (*(_QWORD *)(a1 + 56) & 0x40000000000000) == 0))
    _dispatch_assert_queue_barrier_fail((_QWORD *)a1);
  return result;
}

void _dispatch_assert_queue_barrier_fail(_QWORD *a1)
{
  const char *v1;
  char *v2;
  char *v3;

  v1 = (const char *)a1[9];
  if (!v1)
    v1 = (const char *)&unk_18A069831;
  v3 = 0;
  asprintf(&v3, "%sBlock was expected to act as a barrier on queue [%s (%p)]", "BUG IN CLIENT OF LIBDISPATCH: Assertion failed: ", v1, a1);
  v2 = v3;
  _dispatch_log("%s", v3);
  qword_1EDF52D08 = (uint64_t)v2;
  __break(1u);
}

void _dispatch_set_priority_and_mach_voucher_slow_VARIANT_mp(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t StatusReg;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = a1;
  if (!a1 || (StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)), v4 = *(_QWORD *)(StatusReg + 32), v4 == a1))
  {
    v5 = 0;
    goto LABEL_11;
  }
  if ((v4 & 0x1000000) != 0)
  {
    v7 = *(_QWORD *)(StatusReg + 200) & 0x80000000;
    v6 = 16;
  }
  else
  {
    v6 = 0;
    v7 = *(_QWORD *)(StatusReg + 32) & 0x88000000;
  }
  v8 = v7 | a1;
  if (((LODWORD(qword_1ECCE9BB8[0]) ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) == 0)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Changing the QoS while on the manager queue";
    qword_1EDF52D38 = v8;
    __break(1u);
LABEL_23:
    _dispatch_bug(206, (int)a1);
    return;
  }
  if ((a1 & 0x2000000) != 0)
  {
    v4 = v8;
    qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Cannot raise oneself to manager";
    qword_1EDF52D38 = v8;
    __break(1u);
    goto LABEL_25;
  }
  if ((v4 & 0x2000000) != 0)
  {
LABEL_25:
    qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Cannot turn a manager thread into a normal one";
    qword_1EDF52D38 = v4;
    __break(1u);
    return;
  }
  v5 = v6 | ((v4 & 0xFFFFFF) != 0);
  v2 = v8;
LABEL_11:
  if (a2 == -1)
    v9 = v5;
  else
    v9 = v5 | 2;
  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  if (v10 && (*(_BYTE *)(v10 + 45) & 2) != 0)
    _dispatch_event_loop_drain_VARIANT_mp(1);
  if (v9)
  {
    LODWORD(a1) = _pthread_set_properties_self();
    if ((_DWORD)a1 == 22)
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: _pthread_set_properties_self failed";
      qword_1EDF52D38 = v2;
      __break(1u);
    }
    if ((_DWORD)a1)
      goto LABEL_23;
  }
}

void _dispatch_set_priority_and_voucher_slow_VARIANT_mp(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t StatusReg;
  uint64_t v5;
  int v6;
  unsigned int *v7;
  int v8;
  unsigned int *v9;
  int v10;
  int v11;
  unsigned int *v12;
  int v13;

  if (a2 == -1)
    goto LABEL_9;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_QWORD *)(StatusReg + 224);
  if ((a3 & 2) == 0 || v5 != a2)
  {
    if (a2)
    {
      if ((a3 & 4) == 0)
      {
        v9 = (unsigned int *)(a2 + 12);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
        if (v10 <= 0)
          goto LABEL_36;
      }
    }
    if (v5 == a2)
    {
      v6 = -1;
      v5 = a2;
      goto LABEL_24;
    }
    *(_QWORD *)(StatusReg + 224) = a2;
    if (a2)
    {
      v6 = *(_DWORD *)(a2 + 32);
      if (v5)
      {
LABEL_18:
        v11 = *(_DWORD *)(v5 + 32);
        goto LABEL_22;
      }
    }
    else
    {
      v6 = 0;
      if (v5)
        goto LABEL_18;
    }
    v11 = 0;
LABEL_22:
    if (v6 == v11)
      v6 = -1;
    goto LABEL_24;
  }
  v6 = -1;
  v5 = -1;
  if (a2 && (a3 & 4) != 0)
  {
    v7 = (unsigned int *)(a2 + 12);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 - 1, v7));
    if (v8 > 1)
    {
LABEL_9:
      v6 = -1;
      v5 = -1;
      goto LABEL_24;
    }
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
    __break(1u);
LABEL_36:
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
LABEL_37:
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
    __break(1u);
    return;
  }
LABEL_24:
  if ((a3 & 8) == 0)
    _dispatch_set_priority_and_mach_voucher_slow_VARIANT_mp(a1, v6);
  if (v5 != -1 && (a3 & 2) != 0)
  {
    if (v5)
    {
      v12 = (unsigned int *)(v5 + 12);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 - 1, v12));
      if (v13 <= 1)
      {
        if (v13 == 1)
        {
          _voucher_xref_dispose_VARIANT_mp(v5, (const char *)a2);
          return;
        }
        goto LABEL_37;
      }
    }
  }
}

void _dispatch_async_redirect_invoke(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *StatusReg;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  BOOL v42;
  signed int v43;
  uint64_t v44;
  int v45;
  uint64_t i;
  __int128 v48;

  v5 = *(_DWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  if (v5)
    v9 = a3 & 0xFCFFFFFF | v5;
  else
    v9 = a3;
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v12 = (__int128 *)(StatusReg + 20);
  v11 = StatusReg[20];
  if (v6)
  {
    v13 = StatusReg[25];
    v14 = *(_DWORD *)(v6 + 84);
    v15 = v14 & 0xFFF0FFFF | ((WORD1(v13) & 0xF) << 16);
    StatusReg[20] = v6;
    v16 = *(_DWORD *)(v7 + 84);
    if (v15)
    {
      v17 = (unsigned __int16)v16 >> 12;
      if ((v16 & 0xFFF) != 0)
      {
        v18 = v14 & 0x88000000 | ((WORD1(v13) & 0xF) << 16) & 0x880F0000;
        v19 = v14 & 0xFFF;
        if (v19 <= (*(_DWORD *)(v7 + 84) & 0xFFFu))
          v19 = *(_DWORD *)(v7 + 84) & 0xFFF;
        if (v17 <= v19 >> 8)
          v20 = 0x40000000;
        else
          v20 = 1140912128;
        v21 = v20 & v16;
        v22 = v18 | v19;
LABEL_21:
        v26 = v22 | v21;
        goto LABEL_32;
      }
      if ((v14 & 0xFFF) != 0)
        v27 = v15 | 0x40000000;
      else
        v27 = v14 & 0xFFF0FFFF | ((WORD1(v13) & 0xF) << 16);
      v26 = v27 & 0xFFFF0FFF | v16 & 0x400F000;
      if (v17 <= ((v27 >> 8) & 0xF))
        v26 = v27;
      goto LABEL_32;
    }
LABEL_69:
    v26 = v16 & 0xFFF0FFFF;
    goto LABEL_32;
  }
  v16 = *(_DWORD *)(v7 + 84);
  v13 = StatusReg[25];
  if (!(_DWORD)v13)
    goto LABEL_69;
  v23 = (unsigned __int16)v16 >> 12;
  v24 = *(_DWORD *)(v7 + 84) & 0xFFF;
  if ((v16 & 0xFFF) != 0)
  {
    if (((unsigned __int16)v13 & 0xFFFu) > v24)
      v24 = v13 & 0xFFF;
    if (v23 <= v24 >> 8)
      v25 = 0x40000000;
    else
      v25 = 1140912128;
    v21 = v25 & v16;
    v22 = v13 & 0x880F0000 | v24;
    goto LABEL_21;
  }
  v28 = v13 | 0x40000000;
  if ((v13 & 0xFFF) == 0)
    v28 = StatusReg[25];
  v26 = v28 & 0xFFFF0FFF | v16 & 0x400F000;
  if (v23 <= ((v28 >> 8) & 0xF))
    v26 = v28;
LABEL_32:
  StatusReg[25] = v26;
  v48 = *v12;
  StatusReg[20] = v7;
  StatusReg[21] = &v48;
  v29 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = -1;
  v30 = *(_QWORD *)(a1 + 8);
  if (v30 == -1)
  {
    v37 = 0;
  }
  else
  {
    v31 = StatusReg[25];
    if (((v31 >> 8) & 0xF) != 0)
      v32 = 256 << ((BYTE1(v31) & 0xFu) - 1);
    else
      v32 = 0;
    v33 = v32 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    v34 = v30 & 0xFFFFFF;
    if ((v30 & 0xFFFFFF) != 0)
    {
      v35 = v32 & 0xFFFFFF00;
      if ((v31 & 0x44000000) == 0 && (*(_QWORD *)(a1 + 8) & 0x10000000) == 0)
        v37 = v33;
      else
        v37 = v30 & 0xFFFFFF;
      if (v34 < v35)
        v37 = v33;
    }
    else if ((unsigned __int16)v31 >> 12)
    {
      v37 = (256 << (((unsigned __int16)v31 >> 12) - 1)) | 0xFF;
    }
    else
    {
      v37 = v32 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    }
  }
  v38 = v37 & 0xFFFFFFFF02FFFFFFLL;
  v39 = StatusReg[4];
  if ((v39 & 0x1000000) != 0)
  {
    if (v38)
    {
LABEL_79:
      _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v38, v29, 6);
      goto LABEL_55;
    }
    v38 = v39 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v38 == (v39 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_49;
  }
  if (v38)
    goto LABEL_79;
LABEL_49:
  if (v29 == -1)
    goto LABEL_55;
  if (StatusReg[28] != v29)
  {
    v38 = 0;
    goto LABEL_79;
  }
  if (v29)
  {
    v40 = (unsigned int *)(v29 + 12);
    do
    {
      v41 = __ldxr(v40);
      v42 = __OFSUB__(v41, 1);
      v43 = v41 - 1;
    }
    while (__stxr(v43, v40));
    if ((v43 < 0) ^ v42 | (v43 == 0))
      _dispatch_async_redirect_invoke_cold_1();
  }
LABEL_55:
  v44 = StatusReg[22];
  if (v44)
    v45 = *(_DWORD *)(v44 + 8) + 1;
  else
    v45 = 1;
  if (v45 > _dispatch_continuation_cache_limit)
  {
    _dispatch_continuation_pop_VARIANT_mp(v8, a2, v9, v7);
    _dispatch_continuation_free_to_cache_limit_VARIANT_mp(a1);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v44;
    *(_DWORD *)(a1 + 8) = v45;
    StatusReg[22] = a1;
    _dispatch_continuation_pop_VARIANT_mp(v8, a2, v9, v7);
  }
  *v12 = v48;
  if (v6)
    *(_QWORD *)v12 = v11;
  StatusReg[25] = StatusReg[25] & 0xF0000 | v13 & 0xFFF0FFFF;
  for (i = *(_QWORD *)(v7 + 24); *(_QWORD *)(i + 24) && i != v11; i = *(_QWORD *)(i + 24))
    _dispatch_lane_non_barrier_complete(i, 0);
  _dispatch_lane_non_barrier_complete(v7, 1);
}

void _dispatch_workloop_stealer_invoke(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  _QWORD *StatusReg;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  BOOL v21;
  signed int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = -1;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7 == -1)
  {
    v15 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 200);
    if (((v8 >> 8) & 0xF) != 0)
      v9 = 256 << ((BYTE1(v8) & 0xFu) - 1);
    else
      v9 = 0;
    v10 = v9 & 0xFFFFFFFFFFFFFF00 | v8;
    v11 = v7 & 0xFFFFFF;
    if ((v7 & 0xFFFFFF) != 0)
    {
      v12 = v9 & 0xFFFFFF00;
      v13 = v7 & 0x10000000;
      if ((v8 & 0x44000000) == 0 && v13 == 0)
        v15 = v10;
      else
        v15 = v11;
      if (v11 < v12)
        v15 = v10;
    }
    else if ((unsigned __int16)v8 >> 12)
    {
      v15 = (256 << (((unsigned __int16)v8 >> 12) - 1)) | 0xFF;
    }
    else
    {
      v15 = v9 & 0xFFFFFFFFFFFFFF00 | v8;
    }
  }
  v16 = v15 & 0xFFFFFFFF02FFFFFFLL;
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v18 = StatusReg[4];
  if ((v18 & 0x1000000) != 0)
  {
    if (v16)
    {
LABEL_40:
      _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v16, v6, 6);
      goto LABEL_24;
    }
    v16 = v18 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v16 == (v18 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_18;
  }
  if (v16)
    goto LABEL_40;
LABEL_18:
  if (v6 == -1)
    goto LABEL_24;
  if (StatusReg[28] != v6)
  {
    v16 = 0;
    goto LABEL_40;
  }
  if (v6)
  {
    v19 = (unsigned int *)(v6 + 12);
    do
    {
      v20 = __ldxr(v19);
      v21 = __OFSUB__(v20, 1);
      v22 = v20 - 1;
    }
    while (__stxr(v22, v19));
    if ((v22 < 0) ^ v21 | (v22 == 0))
      _dispatch_async_redirect_invoke_cold_1();
  }
LABEL_24:
  v23 = StatusReg[22];
  if (v23)
    v24 = *(_DWORD *)(v23 + 8) + 1;
  else
    v24 = 1;
  v25 = a1;
  if (v24 <= _dispatch_continuation_cache_limit)
  {
    v25 = 0;
    *(_QWORD *)(a1 + 16) = v23;
    *(_DWORD *)(a1 + 8) = v24;
    StatusReg[22] = a1;
  }
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 48) + 64))(*(_QWORD *)(a1 + 48), a2, a3 | 1u);
  if (v25)
    _dispatch_continuation_free_to_cache_limit_VARIANT_mp(v25);
}

void _dispatch_queue_override_invoke(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  _QWORD *StatusReg;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  BOOL v26;
  signed int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  BOOL v43;
  signed int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;

  v5 = (uint64_t)a1;
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = StatusReg[20];
  v9 = a1[6];
  v8 = a1[7];
  v10 = StatusReg[25];
  StatusReg[25] = *(_DWORD *)(v8 + 84) & 0xFFF0FFFF | ((WORD1(v10) & 0xF) << 16);
  StatusReg[20] = v8;
  v11 = a1[1];
  v20 = *(_QWORD *)(*a1 + 40) == 1792;
  v12 = a1[3];
  a1[3] = -1;
  v13 = v20;
  if (v11 == -1)
  {
    v21 = 0;
  }
  else
  {
    v14 = StatusReg[25];
    if (((v14 >> 8) & 0xF) != 0)
      v15 = 256 << ((BYTE1(v14) & 0xFu) - 1);
    else
      v15 = 0;
    v16 = v15 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    v17 = v11 & 0xFFFFFF;
    if ((v11 & 0xFFFFFF) != 0)
    {
      v18 = v15 & 0xFFFFFF00;
      v19 = v11 & 0x10000000;
      v20 = (v14 & 0x44000000) == 0 && v19 == 0;
      if (v20)
        v21 = v16;
      else
        v21 = v17;
      if (v17 < v18)
        v21 = v16;
    }
    else if ((unsigned __int16)v14 >> 12)
    {
      v21 = (256 << (((unsigned __int16)v14 >> 12) - 1)) | 0xFF;
    }
    else
    {
      v21 = v15 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    }
  }
  v22 = v21 & 0xFFFFFFFF02FFFFFFLL;
  v23 = StatusReg[4];
  if ((v23 & 0x1000000) != 0)
  {
    if (v22)
    {
LABEL_73:
      _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v22, v12, 6);
      goto LABEL_27;
    }
    v22 = v23 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v22 == (v23 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_21;
  }
  if (v22)
    goto LABEL_73;
LABEL_21:
  if (v12 == -1)
    goto LABEL_27;
  if (StatusReg[28] != v12)
  {
    v22 = 0;
    goto LABEL_73;
  }
  if (v12)
  {
    v24 = (unsigned int *)(v12 + 12);
    do
    {
      v25 = __ldxr(v24);
      v26 = __OFSUB__(v25, 1);
      v27 = v25 - 1;
    }
    while (__stxr(v27, v24));
    if ((v27 < 0) ^ v26 | (v27 == 0))
      _dispatch_async_redirect_invoke_cold_1();
  }
LABEL_27:
  v28 = StatusReg[22];
  if (v28)
    v29 = *(_DWORD *)(v28 + 8) + 1;
  else
    v29 = 1;
  if (v29 <= _dispatch_continuation_cache_limit)
  {
    *(_QWORD *)(v5 + 16) = v28;
    *(_DWORD *)(v5 + 8) = v29;
    StatusReg[22] = v5;
    v5 = 0;
  }
  v30 = *(_QWORD *)v9;
  if (*(_QWORD *)v9 < 0x1000uLL)
  {
    if ((a3 & 0x1000000) != 0)
    {
      v31 = (void *)MEMORY[0x18D766D94]();
      v30 = *(_QWORD *)v9;
    }
    else
    {
      v31 = 0;
    }
    v32 = *(_QWORD *)(v9 + 24);
    if ((v30 & 4) != 0)
      *(_QWORD *)(v9 + 24) = -1;
    v33 = v30 & 4;
    v34 = *(_QWORD *)(v9 + 8);
    if (v34 == -1)
    {
      v37 = 0;
    }
    else
    {
      v35 = StatusReg[25];
      if (((v35 >> 8) & 0xF) != 0)
        v36 = 256 << ((BYTE1(v35) & 0xFu) - 1);
      else
        v36 = 0;
      v37 = v36 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
      if ((v34 & 0xFFFFFF) != 0)
      {
        if ((v34 & 0xFFFFFFuLL) >= (v36 & 0xFFFFFF00)
          && ((v35 & 0x44000000) != 0 || (*(_QWORD *)(v9 + 8) & 0x10000000) != 0))
        {
          v37 = v34 & 0xFFFFFF;
        }
      }
      else if ((unsigned __int16)v35 >> 12)
      {
        v37 = (256 << (((unsigned __int16)v35 >> 12) - 1)) | 0xFF;
      }
    }
    v39 = v37 & 0xFFFFFFFF02FFFFFFLL;
    v40 = StatusReg[4];
    if ((v40 & 0x1000000) != 0)
    {
      if (v39)
        goto LABEL_83;
      v39 = v40 & 0xFFFFFFFFFEFFFFFFLL;
    }
    else if (v39 == (v40 & 0xFFFFFFFF77FFFFFFLL))
    {
LABEL_56:
      if (v32 == -1)
        goto LABEL_84;
      if (StatusReg[28] == v32)
      {
        if ((v30 & 4) != 0 && v32)
        {
          v41 = (unsigned int *)(v32 + 12);
          do
          {
            v42 = __ldxr(v41);
            v43 = __OFSUB__(v42, 1);
            v44 = v42 - 1;
          }
          while (__stxr(v44, v41));
          if ((v44 < 0) ^ v43 | (v44 == 0))
            _dispatch_async_redirect_invoke_cold_1();
LABEL_85:
          v45 = StatusReg[22];
          if (v45)
            v46 = *(_DWORD *)(v45 + 8) + 1;
          else
            v46 = 1;
          v33 = v9;
          if (v46 <= _dispatch_continuation_cache_limit)
          {
            v33 = 0;
            *(_QWORD *)(v9 + 16) = v45;
            *(_DWORD *)(v9 + 8) = v46;
            StatusReg[22] = v9;
          }
LABEL_90:
          if ((v30 & 8) != 0)
          {
            v47 = *(_QWORD *)(v9 + 48);
            v48 = *(_QWORD *)(*(_QWORD *)v47 + 40);
            if (v48 != 514)
              _dispatch_queue_override_invoke_cold_1(v48);
            _dispatch_client_callout(*(_QWORD *)(v9 + 40), *(uint64_t (**)(void))(v9 + 32));
            dispatch_group_leave_VARIANT_mp(v47);
            if (!v33)
            {
LABEL_92:
              if (!v31)
                goto LABEL_94;
              goto LABEL_93;
            }
          }
          else
          {
            _dispatch_client_callout(*(_QWORD *)(v9 + 40), *(uint64_t (**)(void))(v9 + 32));
            if (!v33)
              goto LABEL_92;
          }
          _dispatch_continuation_free_to_cache_limit_VARIANT_mp(v33);
          if (!v31)
            goto LABEL_94;
LABEL_93:
          objc_autoreleasePoolPop(v31);
          goto LABEL_94;
        }
LABEL_84:
        if ((v30 & 4) == 0)
          goto LABEL_90;
        goto LABEL_85;
      }
      v39 = 0;
LABEL_83:
      _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v39, v32, v33 | 2);
      goto LABEL_84;
    }
    if (v39)
      goto LABEL_83;
    goto LABEL_56;
  }
  if (*(_QWORD *)(v30 + 40) == 1)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v30 + 48))(v9, 0, (a3 >> 21) & 1);
  else
    (*(void (**)(uint64_t, uint64_t, _QWORD))(v30 + 64))(v9, a2, v13 | a3);
LABEL_94:
  if (v5)
    _dispatch_continuation_free_to_cache_limit_VARIANT_mp(v5);
  StatusReg[25] = StatusReg[25] & 0xF0000 | v10 & 0xFFF0FFFF;
  StatusReg[20] = v7;
}

void _dispatch_continuation_free_to_cache_limit_VARIANT_mp(uint64_t a1)
{
  unint64_t StatusReg;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;

  _dispatch_continuation_free_to_heap_VARIANT_mp(a1);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v2 = *(_QWORD *)(StatusReg + 176);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 8);
    if (v3 - _dispatch_continuation_cache_limit >= 1)
    {
      v4 = _dispatch_continuation_cache_limit - v3 + 1;
      do
      {
        v5 = v2;
        v2 = *(_QWORD *)(v2 + 16);
        _dispatch_continuation_free_to_heap_VARIANT_mp(v5);
        if (!v4)
          break;
        ++v4;
      }
      while (v2);
      *(_QWORD *)(StatusReg + 176) = v2;
    }
  }
}

void _dispatch_continuation_pop_VARIANT_mp(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  _QWORD *StatusReg;
  void (**v9)(uint64_t);
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  BOOL v22;
  signed int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v9 = (void (**)(uint64_t))StatusReg[24];
  if (v9)
    (*v9)(a4);
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 >= 0x1000uLL)
  {
    if (*(_QWORD *)(v10 + 40) == 1)
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v10 + 48))(a1, 0, (a3 >> 21) & 1);
    else
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v10 + 64))(a1, a2, a3 & 0xFFFF0000);
    goto LABEL_55;
  }
  if ((a3 & 0x1000000) != 0)
  {
    v11 = (void *)MEMORY[0x18D766D94]();
    v10 = *(_QWORD *)a1;
  }
  else
  {
    v11 = 0;
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v10 & 4) != 0)
    *(_QWORD *)(a1 + 24) = -1;
  v13 = v10 & 4;
  v14 = *(_QWORD *)(a1 + 8);
  if (v14 == -1)
  {
    v17 = 0;
  }
  else
  {
    v15 = StatusReg[25];
    if (((v15 >> 8) & 0xF) != 0)
      v16 = 256 << ((BYTE1(v15) & 0xFu) - 1);
    else
      v16 = 0;
    v17 = v16 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    if ((v14 & 0xFFFFFF) != 0)
    {
      if ((v14 & 0xFFFFFFuLL) >= (v16 & 0xFFFFFF00)
        && ((v15 & 0x44000000) != 0 || (*(_QWORD *)(a1 + 8) & 0x10000000) != 0))
      {
        v17 = v14 & 0xFFFFFF;
      }
    }
    else if ((unsigned __int16)v15 >> 12)
    {
      v17 = (256 << (((unsigned __int16)v15 >> 12) - 1)) | 0xFF;
    }
  }
  v19 = v17 & 0xFFFFFFFF02FFFFFFLL;
  v20 = (unsigned int *)StatusReg[4];
  if ((v20 & 0x1000000) != 0)
    goto LABEL_36;
  if (v19 != ((unint64_t)v20 & 0xFFFFFFFF77FFFFFFLL))
    goto LABEL_38;
  while (v12 != -1)
  {
    if (StatusReg[28] != v12)
    {
      v19 = 0;
LABEL_44:
      _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v19, v12, v13 | 2);
      break;
    }
    if ((v10 & 4) == 0 || !v12)
      break;
    v20 = (unsigned int *)(v12 + 12);
    do
    {
      v21 = __ldxr(v20);
      v22 = __OFSUB__(v21, 1);
      v23 = v21 - 1;
    }
    while (__stxr(v23, v20));
    if (!((v23 < 0) ^ v22 | (v23 == 0)))
      goto LABEL_46;
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
    __break(1u);
LABEL_36:
    if (!v19)
    {
      v19 = (unint64_t)v20 & 0xFFFFFFFFFEFFFFFFLL;
LABEL_38:
      if (!v19)
        continue;
    }
    goto LABEL_44;
  }
  if ((v10 & 4) == 0)
    goto LABEL_51;
LABEL_46:
  v24 = StatusReg[22];
  if (v24)
    v25 = *(_DWORD *)(v24 + 8) + 1;
  else
    v25 = 1;
  v13 = a1;
  if (v25 <= _dispatch_continuation_cache_limit)
  {
    v13 = 0;
    *(_QWORD *)(a1 + 16) = v24;
    *(_DWORD *)(a1 + 8) = v25;
    StatusReg[22] = a1;
  }
LABEL_51:
  if ((v10 & 8) != 0)
  {
    v26 = *(_QWORD *)(a1 + 48);
    v27 = *(_QWORD *)(*(_QWORD *)v26 + 40);
    if (v27 != 514)
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected object type";
      qword_1EDF52D38 = v27;
      __break(1u);
      return;
    }
    _dispatch_client_callout(*(_QWORD *)(a1 + 40), *(uint64_t (**)(void))(a1 + 32));
    dispatch_group_leave_VARIANT_mp(v26);
    if (!v13)
    {
LABEL_53:
      if (!v11)
        goto LABEL_55;
      goto LABEL_54;
    }
  }
  else
  {
    _dispatch_client_callout(*(_QWORD *)(a1 + 40), *(uint64_t (**)(void))(a1 + 32));
    if (!v13)
      goto LABEL_53;
  }
  _dispatch_continuation_free_to_cache_limit_VARIANT_mp(v13);
  if (v11)
LABEL_54:
    objc_autoreleasePoolPop(v11);
LABEL_55:
  if (v9)
    v9[1](a4);
}

void *dispatch_block_create_VARIANT_mp(uint64_t a1, void *aBlock, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  if ((a1 & 0xFFFFFF00) != 0)
    return 0;
  v10 = a1 | 0x40000000;
  if ((a1 & 0xA) == 0)
    v10 = a1;
  if ((v10 & 0x20) != 0)
    v11 = v10 & 0xFFFFFFFFFFFFFFEFLL;
  else
    v11 = v10;
  if ((v11 & 0x80000000) != 0)
  {
    v13 = 0;
    v12 = v11;
    goto LABEL_16;
  }
  if ((v11 & 2) != 0)
  {
    v13 = 0;
    v12 = v11 | 0x80000000;
    goto LABEL_16;
  }
  if ((v11 & 0x40) != 0)
  {
    v12 = v11 | 0x80000000;
    v13 = -1;
    goto LABEL_16;
  }
  if ((v11 & 4) != 0)
  {
    v12 = v11 | 0x80000000;
    v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
LABEL_16:
    v14 = 0;
    if ((v11 & 4) == 0 || (v12 & 0x40000000) != 0)
    {
      v11 = v12;
    }
    else
    {
      v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) & 0xFFFFFFLL;
      if (v15 >= 0x10FF)
        v14 = 4351;
      else
        v14 = v15;
      v11 = v12 | 0x40000000;
    }
    return _dispatch_block_create(v11, v13, v14, aBlock, a5, a6, a7, a8);
  }
  v13 = 0;
  v14 = 0;
  return _dispatch_block_create(v11, v13, v14, aBlock, a5, a6, a7, a8);
}

void *dispatch_block_create_with_qos_class_VARIANT_mp(uint64_t a1, unsigned int a2, unsigned int a3, void *a4)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;

  if ((a1 & 0xFFFFFF00) != 0 || a2 > 0x21 || ((1 << a2) & 0x202220221) == 0 || a3 != 0 && a3 < 0xFFFFFFF1)
    return 0;
  v5 = a1;
  v6 = a1 | 0x40000000;
  v7 = _pthread_qos_class_encode();
  v12 = 0;
  if ((v5 & 0x20) != 0)
    v13 = v6 & 0xFFFFFFFFFFFFFFEFLL;
  else
    v13 = v6;
  v14 = v13;
  if ((v13 & 0x80000000) != 0)
  {
LABEL_15:
    if ((v13 & 4) == 0)
      goto LABEL_22;
LABEL_16:
    if ((v14 & 0x40000000) == 0)
    {
      v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) & 0xFFFFFFLL;
      if (v16 >= 0x10FF)
        v7 = 4351;
      else
        v7 = v16;
      v13 = v14 | 0x40000000;
      return _dispatch_block_create(v13, v12, v7, a4, v8, v9, v10, v11);
    }
    goto LABEL_22;
  }
  if ((v13 & 2) != 0)
  {
    v12 = 0;
    v14 = v13 | 0x80000000;
    goto LABEL_15;
  }
  if ((v13 & 0x40) == 0)
  {
    if ((v13 & 4) == 0)
    {
      v12 = 0;
      return _dispatch_block_create(v13, v12, v7, a4, v8, v9, v10, v11);
    }
    v14 = v13 | 0x80000000;
    v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
    goto LABEL_16;
  }
  v14 = v13 | 0x80000000;
  v12 = -1;
  if ((v13 & 4) != 0)
    goto LABEL_16;
LABEL_22:
  v13 = v14;
  return _dispatch_block_create(v13, v12, v7, a4, v8, v9, v10, v11);
}

void *dispatch_block_create_with_voucher_VARIANT_mp(uint64_t a1, uint64_t a2, void *aBlock, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if ((a1 & 0xFFFFFF00) != 0)
    return 0;
  v10 = 3221225472;
  if ((a1 & 0xA) == 0)
    v10 = 0x80000000;
  if ((a1 & 0x20) != 0)
    v11 = v10 & 0xFFFFFFFFFFFFFFEFLL | a1 & 0xFFFFFFFF7FFFFFAFLL;
  else
    v11 = v10 | a1 & 0xFFFFFFFF7FFFFFBFLL;
  if (a2 == -3)
    a2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if ((v11 & 0x40000004) == 4)
  {
    v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) & 0xFFFFFFLL;
    if (v12 >= 0x10FF)
      v13 = 4351;
    else
      v13 = v12;
    v11 |= 0x40000000uLL;
  }
  else
  {
    v13 = 0;
  }
  return _dispatch_block_create(v11, a2, v13, aBlock, a5, a6, a7, a8);
}

void *dispatch_block_create_with_voucher_and_qos_class_VARIANT_mp(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, void *a5)
{
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  if ((a1 & 0xFFFFFF00) != 0 || a3 > 0x21 || ((1 << a3) & 0x202220221) == 0 || a4 != 0 && a4 < 0xFFFFFFF1)
    return 0;
  v7 = a1;
  v8 = a1 & 0xFFFFFFFF3FFFFFB7 | 0xC0000000;
  v9 = _pthread_qos_class_encode();
  if ((v7 & 0x20) != 0)
    v14 = v8 & 0xFFFFFFFFFFFFFFEFLL;
  else
    v14 = v8;
  if (a2 == -3)
    a2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  return _dispatch_block_create(v14, a2, v9, a5, v10, v11, v12, v13);
}

uint64_t dispatch_block_perform_VARIANT_mp(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((a1 & 0xFFFFFF00) != 0)
    dispatch_block_perform_VARIANT_mp_cold_1(a1);
  v2 = a1 | 0x40000000;
  if ((a1 & 0xA) == 0)
    v2 = a1;
  if ((v2 & 0x20) != 0)
    v2 &= ~0x10uLL;
  v5[0] = 3512316172;
  v5[1] = v2 | ((unint64_t)(v2 & 2) << 30);
  v6 = 8;
  v7 = 0;
  if ((v2 & 2) != 0)
    v3 = 0;
  else
    v3 = -1;
  v8 = 0;
  v9 = v3;
  v12 = 0;
  v13 = 0;
  v10 = a2;
  v11 = 0;
  return _dispatch_block_invoke_direct_VARIANT_mp((uint64_t)v5);
}

unsigned int *_dispatch_block_sync_invoke_VARIANT_mp(uint64_t a1, const char *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD *StatusReg;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  BOOL v20;
  signed int v21;
  unsigned int *v22;
  unsigned int v23;
  unint64_t *v24;
  unsigned int *result;
  unsigned int *v26;
  int v27;
  unint64_t v28;
  uint64_t v29;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3 != 3512316172)
    _dispatch_block_sync_invoke_VARIANT_mp_cold_5(v3);
  v4 = *(_DWORD *)(a1 + 48);
  if ((v4 & 4) != 0)
    _dispatch_block_invoke_direct_VARIANT_mp_cold_3(*(_DWORD *)(a1 + 48));
  if ((v4 & 1) != 0)
  {
LABEL_25:
    if ((v4 & 8) != 0)
      goto LABEL_30;
    goto LABEL_26;
  }
  if ((*(_QWORD *)(a1 + 40) & 0x80000000) == 0)
  {
    v5 = -1;
    goto LABEL_18;
  }
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = StatusReg[25];
  v8 = 256 << ((BYTE1(v7) & 0xFu) - 1);
  if (((v7 >> 8) & 0xF) == 0)
    v8 = 0;
  v9 = (unsigned __int16)v7 >> 12 == 0;
  v5 = *(_QWORD *)(a1 + 64);
  v10 = v8 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
  v11 = (256 << (((v7 >> 12) & 0xF) - 1)) | 0xFF;
  if (v9)
    v11 = v10;
  v12 = v11 & 0xFFFFFFFF02FFFFFFLL;
  v13 = StatusReg[4];
  if ((v13 & 0x1000000) != 0)
  {
    if (v12)
    {
LABEL_52:
      _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v12, *(_QWORD *)(a1 + 64), 0);
      v5 = v29;
      goto LABEL_18;
    }
    v12 = v13 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v12 == (v13 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_12;
  }
  if (v12)
    goto LABEL_52;
LABEL_12:
  if (v5 == -1)
    goto LABEL_18;
  if (StatusReg[28] != v5)
  {
    v12 = 0;
    goto LABEL_52;
  }
  if (v5)
  {
    v14 = (unsigned int *)(v5 + 12);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    if (v15 <= 0)
      dispatch_group_notify_VARIANT_mp_cold_3();
  }
LABEL_18:
  (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  v16 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v17 = *(_QWORD *)(v16 + 32);
  if ((v17 & 0x1000000) == 0 || (v28 = v17 & 0xFFFFFFFFFEFFFFFFLL, (v17 & 0xFFFFFFFFFEFFFFFFLL) == 0))
  {
    if (v5 == -1)
      goto LABEL_25;
    if (*(_QWORD *)(v16 + 224) == v5)
    {
      if (v5)
      {
        v18 = (unsigned int *)(v5 + 12);
        do
        {
          v19 = __ldxr(v18);
          v20 = __OFSUB__(v19, 1);
          v21 = v19 - 1;
        }
        while (__stxr(v21, v18));
        if ((v21 < 0) ^ v20 | (v21 == 0))
          _dispatch_async_redirect_invoke_cold_1();
      }
      goto LABEL_25;
    }
    v28 = 0;
  }
  _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v28, v5, 6);
  if ((v4 & 8) != 0)
    goto LABEL_30;
LABEL_26:
  v22 = (unsigned int *)(a1 + 52);
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
  if (!v23)
    dispatch_group_leave_VARIANT_mp(*(_QWORD *)(a1 + 80));
LABEL_30:
  v24 = (unint64_t *)(a1 + 88);
  do
    result = (unsigned int *)__ldxr(v24);
  while (__stxr(0, v24));
  if (result)
  {
    if (result[2] != 0x7FFFFFFF)
    {
      v26 = result + 2;
      do
        v27 = __ldxr(v26);
      while (__stlxr(v27 - 2, v26));
      if (v27 <= 2)
      {
        if (v27 != 2)
          _os_object_allows_weak_reference_VARIANT_mp_cold_1();
        return (unsigned int *)_os_object_dispose(result, a2);
      }
    }
  }
  return result;
}

uint64_t dispatch_block_cancel_VARIANT_mp(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(result + 16) != ___dispatch_block_create_block_invoke)
    dispatch_block_cancel_VARIANT_mp_cold_2();
  if (*(_QWORD *)(result + 32) != 3512316172)
    _dispatch_block_sync_invoke_VARIANT_mp_cold_5(*(_QWORD *)(result + 32));
  v1 = (unsigned int *)(result + 48);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 | 1, v1));
  return result;
}

uint64_t dispatch_block_testcancel_VARIANT_mp(uint64_t a1)
{
  if (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 16) != ___dispatch_block_create_block_invoke)
    dispatch_block_testcancel_VARIANT_mp_cold_2();
  if (*(_QWORD *)(a1 + 32) != 3512316172)
    _dispatch_block_sync_invoke_VARIANT_mp_cold_5(*(_QWORD *)(a1 + 32));
  return *(_DWORD *)(a1 + 48) & 1;
}

uint64_t dispatch_block_wait_VARIANT_mp(uint64_t a1, int64_t a2)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  if (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 16) != ___dispatch_block_create_block_invoke)
    dispatch_block_wait_VARIANT_mp_cold_4();
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 != 3512316172)
    _dispatch_block_sync_invoke_VARIANT_mp_cold_5(v3);
  v5 = (unsigned int *)(a1 + 48);
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 | 2, v5));
  if ((v6 & 6) != 0)
    dispatch_block_wait_VARIANT_mp_cold_2(v6);
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
  v8 = (unint64_t *)(a1 + 88);
  do
    v9 = __ldxr(v8);
  while (__stxr(0, v8));
  if (v9)
  {
    v10 = __clz(__rbit32((v7 >> 8) & 0x3FFF));
    if (((v7 >> 8) & 0x3FFF) != 0)
      v11 = v10 + 1;
    else
      v11 = 0;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 80))(v9, v11, 9);
  }
  v12 = *(_DWORD *)(a1 + 96);
  if (v12)
  {
    _pthread_qos_override_start_direct();
    v13 = v9 == 0;
  }
  else
  {
    v13 = 1;
  }
  v14 = *(_DWORD *)(a1 + 52);
  if (!v13 || v14 >= 2)
    dispatch_block_wait_VARIANT_mp_cold_1(v14);
  v16 = dispatch_group_wait_VARIANT_mp(*(_QWORD *)(a1 + 80), a2);
  if (v12)
    _pthread_qos_override_end_direct();
  if (v16)
  {
    do
      v17 = __ldxr(v5);
    while (__stxr(v17 & 0xFFFFFFFD, v5));
  }
  else
  {
    do
      v18 = __ldxr(v5);
    while (__stxr(v18 | 4, v5));
  }
  return v16;
}

void *dispatch_block_notify_VARIANT_mp(uint64_t a1, unsigned int *a2, uint64_t (**a3)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  if (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 16) != ___dispatch_block_create_block_invoke)
    dispatch_block_notify_VARIANT_mp_cold_3(a1);
  if (*(_QWORD *)(a1 + 32) != 3512316172)
    _dispatch_block_sync_invoke_VARIANT_mp_cold_5(*(_QWORD *)(a1 + 32));
  if (*(int *)(a1 + 52) >= 2)
    dispatch_block_notify_VARIANT_mp_cold_1(*(_DWORD *)(a1 + 52));
  return dispatch_group_notify_VARIANT_mp(*(_QWORD *)(a1 + 80), a2, a3);
}

uint64_t *_dispatch_continuation_init_slow_VARIANT_mp(uint64_t *result, unsigned int *a2, int a3)
{
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  int v13;
  unint64_t *v14;
  void (*v16)(_QWORD *);
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int *v22;
  int v23;
  unsigned int *v24;
  int v25;
  unsigned int v26;

  v5 = result;
  v6 = result[5];
  if (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 16) == ___dispatch_block_create_block_invoke)
  {
    v9 = *(_QWORD *)(v6 + 32);
    v7 = (_QWORD *)(v6 + 32);
    v8 = v9;
    if (v9 != 3512316172)
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption of dispatch block object";
      qword_1EDF52D38 = v8;
      __break(1u);
      goto LABEL_50;
    }
  }
  else
  {
    v7 = 0;
  }
  v10 = v7[1];
  v11 = *result;
  v12 = a2 + 2;
  if (a2[2] != 0x7FFFFFFF)
  {
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if (v13 <= 0)
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
      goto LABEL_47;
    }
  }
  v14 = v7 + 7;
  while (!__ldxr(v14))
  {
    if (!__stxr((unint64_t)a2, v14))
      goto LABEL_14;
  }
  __clrex();
  if (*v12 != 0x7FFFFFFF)
  {
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
    if (v13 <= 2)
    {
LABEL_47:
      if (v13 == 2)
      {
        _os_object_dispose(a2, (const char *)a2);
        goto LABEL_14;
      }
LABEL_50:
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
      return result;
    }
  }
LABEL_14:
  v16 = _dispatch_block_async_invoke_and_release;
  if ((v11 & 4) == 0)
    v16 = _dispatch_block_async_invoke;
  v5[4] = (uint64_t)v16;
  v17 = v10 | a3;
  if ((v10 & 0x40000000) != 0)
  {
    v18 = v7[3];
LABEL_21:
    v19 = v18 & 0xFFFFFF;
    if (!v19)
      goto LABEL_30;
    goto LABEL_22;
  }
  if ((v17 & 0x40000000) != 0)
  {
    v19 = 0;
    goto LABEL_30;
  }
  v18 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
  if ((unsigned __int16)(v18 >> 8) <= 0x10uLL)
    goto LABEL_21;
  v19 = 4351;
LABEL_22:
  if ((v17 & 0x20) != 0)
  {
    v19 |= 0x10000000uLL;
  }
  else
  {
    v20 = (a2[21] >> 30) & 1;
    if ((a2[21] & 0xFFF) == 0)
      v20 = 1;
    if (!v20)
      v19 = 0;
  }
LABEL_30:
  v5[1] = v19;
  if ((v10 & 0x80000000) == 0)
  {
    if ((v17 & 0x40) != 0)
      goto LABEL_42;
    v21 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
    if (!v21)
      goto LABEL_43;
    v22 = (unsigned int *)(v21 + 12);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    if (v23 > 0)
      goto LABEL_43;
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
  v21 = v7[4];
  if ((unint64_t)(v21 + 1) < 2)
    goto LABEL_43;
  v24 = (unsigned int *)(v21 + 12);
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  if (v25 > 0)
    goto LABEL_43;
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
  __break(1u);
LABEL_42:
  v21 = 0;
LABEL_43:
  v5[3] = v21;
  *v5 = v11 | (2 * (v10 & 1)) | 0x20;
  v26 = __clz(__rbit32((*((_DWORD *)v5 + 2) >> 8) & 0x3FFF));
  if (((*((_DWORD *)v5 + 2) >> 8) & 0x3FFF) != 0)
    return (uint64_t *)(v26 + 1);
  else
    return 0;
}

void _dispatch_block_async_invoke_and_release(_QWORD *a1)
{
  _dispatch_block_async_invoke2(a1, (const char *)1);
}

void _dispatch_block_async_invoke(_QWORD *a1)
{
  _dispatch_block_async_invoke2(a1, 0);
}

_DWORD *dispatch_barrier_async_f_VARIANT_mp(_DWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *StatusReg;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  int v9;
  int v10;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = (_QWORD *)StatusReg[22];
  if (!v5)
    return (_DWORD *)_dispatch_async_f_slow(result, a2, a3, 0, 6);
  StatusReg[22] = v5[2];
  *v5 = 262;
  v5[4] = a3;
  v5[5] = a2;
  v6 = StatusReg[4] & 0xFFFFFFLL;
  if (v6 >= 0x10FF)
    v6 = 4351;
  v7 = StatusReg[28];
  if (!v7)
    goto LABEL_8;
  v8 = (unsigned int *)(v7 + 12);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  if (v9 <= 0)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
  else
  {
LABEL_8:
    v5[3] = v7;
    if (v6)
    {
      v10 = result[21];
      if ((v10 & 0x40000000) == 0 && (v10 & 0xFFF) != 0)
        v6 = 0;
    }
    v5[1] = v6;
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 88))(result);
  }
  return result;
}

uint64_t _dispatch_async_f_slow(_DWORD *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  _QWORD *v10;
  unint64_t StatusReg;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  int v15;
  int v16;

  v10 = _dispatch_continuation_alloc_from_heap_VARIANT_mp();
  *v10 = a5 | 0x100;
  v10[4] = a3;
  v10[5] = a2;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v12 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
  if (v12 >= 0x10FF)
    v12 = 4351;
  if ((a4 & 0x40) != 0)
    goto LABEL_9;
  v13 = *(_QWORD *)(StatusReg + 224);
  if (v13)
  {
    v14 = (unsigned int *)(v13 + 12);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    if (v15 <= 0)
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
      __break(1u);
LABEL_9:
      v13 = 0;
    }
  }
  v10[3] = v13;
  if (v12)
  {
    if ((a4 & 0x20) != 0)
    {
      v12 |= 0x10000000uLL;
    }
    else
    {
      v16 = a1[21];
      if ((v16 & 0x40000000) == 0 && (v16 & 0xFFF) != 0)
        v12 = 0;
    }
  }
  v10[1] = v12;
  return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 88))(a1);
}

uint64_t _dispatch_barrier_async_detached_f_VARIANT_mp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t StatusReg;
  _QWORD *v7;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_QWORD **)(StatusReg + 176);
  if (v7)
    *(_QWORD *)(StatusReg + 176) = v7[2];
  else
    v7 = _dispatch_continuation_alloc_from_heap_VARIANT_mp();
  v7[4] = a3;
  v7[5] = a2;
  v7[3] = -1;
  *(_OWORD *)v7 = xmmword_18A06E590;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
}

uint64_t dispatch_barrier_async_VARIANT_mp(unsigned int *a1, uint64_t (**aBlock)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  _QWORD *StatusReg;
  uint64_t *v5;
  void *v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  unsigned int v12;
  uint64_t *inited;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = (uint64_t *)StatusReg[22];
  if (v5)
    StatusReg[22] = v5[2];
  else
    v5 = (uint64_t *)_dispatch_continuation_alloc_from_heap_VARIANT_mp();
  v6 = _dispatch_Block_copy(aBlock);
  v7 = aBlock[2];
  *v5 = 278;
  if (v7 == ___dispatch_block_create_block_invoke)
  {
    v5[5] = (uint64_t)v6;
    inited = _dispatch_continuation_init_slow_VARIANT_mp(v5, a1, 0);
  }
  else
  {
    v5[4] = (uint64_t)_dispatch_call_block_and_release;
    v5[5] = (uint64_t)v6;
    v8 = StatusReg[4] & 0xFFFFFFLL;
    if (v8 >= 0x10FF)
      v8 = 4351;
    v9 = StatusReg[28];
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 12);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      if (v11 <= 0)
        dispatch_group_notify_VARIANT_mp_cold_3();
    }
    v5[3] = v9;
    if (v8)
    {
      v12 = a1[21];
      if ((v12 & 0x40000000) != 0 || (v12 & 0xFFF) == 0)
      {
        inited = (uint64_t *)(__clz(__rbit32(v8 >> 8)) + 1);
      }
      else
      {
        inited = 0;
        v8 = 0;
      }
    }
    else
    {
      inited = 0;
    }
    v5[1] = v8;
  }
  return (*(uint64_t (**)(unsigned int *, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 88))(a1, v5, inited);
}

_DWORD *dispatch_async_f_VARIANT_mp(_DWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *StatusReg;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  int v9;
  int v10;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = (_QWORD *)StatusReg[22];
  if (!v5)
    return (_DWORD *)_dispatch_async_f_slow(result, a2, a3, 0, 4);
  StatusReg[22] = v5[2];
  *v5 = 260;
  v5[4] = a3;
  v5[5] = a2;
  v6 = StatusReg[4] & 0xFFFFFFLL;
  if (v6 >= 0x10FF)
    v6 = 4351;
  v7 = StatusReg[28];
  if (!v7)
    goto LABEL_8;
  v8 = (unsigned int *)(v7 + 12);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  if (v9 <= 0)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
  else
  {
LABEL_8:
    v5[3] = v7;
    if (v6)
    {
      v10 = result[21];
      if ((v10 & 0x40000000) == 0 && (v10 & 0xFFF) != 0)
        v6 = 0;
    }
    v5[1] = v6;
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 88))(result);
  }
  return result;
}

_DWORD *dispatch_async_enforce_qos_class_f_VARIANT_mp(_DWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *StatusReg;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  int v9;
  uint64_t v10;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = (_QWORD *)StatusReg[22];
  if (!v5)
    return (_DWORD *)_dispatch_async_f_slow(result, a2, a3, 32, 4);
  StatusReg[22] = v5[2];
  *v5 = 260;
  v5[4] = a3;
  v5[5] = a2;
  v6 = StatusReg[4] & 0xFFFFFFLL;
  if (v6 >= 0x10FF)
    v6 = 4351;
  v7 = StatusReg[28];
  if (!v7)
    goto LABEL_8;
  v8 = (unsigned int *)(v7 + 12);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  if (v9 <= 0)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
  else
  {
LABEL_8:
    v5[3] = v7;
    if (v6)
      v10 = v6 | 0x10000000;
    else
      v10 = 0;
    v5[1] = v10;
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 88))(result);
  }
  return result;
}

uint64_t dispatch_async_VARIANT_mp(unsigned int *a1, uint64_t (**aBlock)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  _QWORD *StatusReg;
  uint64_t *v5;
  void *v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  unsigned int v12;
  uint64_t *inited;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = (uint64_t *)StatusReg[22];
  if (v5)
    StatusReg[22] = v5[2];
  else
    v5 = (uint64_t *)_dispatch_continuation_alloc_from_heap_VARIANT_mp();
  v6 = _dispatch_Block_copy(aBlock);
  v7 = aBlock[2];
  *v5 = 276;
  if (v7 == ___dispatch_block_create_block_invoke)
  {
    v5[5] = (uint64_t)v6;
    inited = _dispatch_continuation_init_slow_VARIANT_mp(v5, a1, 0);
  }
  else
  {
    v5[4] = (uint64_t)_dispatch_call_block_and_release;
    v5[5] = (uint64_t)v6;
    v8 = StatusReg[4] & 0xFFFFFFLL;
    if (v8 >= 0x10FF)
      v8 = 4351;
    v9 = StatusReg[28];
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 12);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      if (v11 <= 0)
        dispatch_group_notify_VARIANT_mp_cold_3();
    }
    v5[3] = v9;
    if (v8)
    {
      v12 = a1[21];
      if ((v12 & 0x40000000) != 0 || (v12 & 0xFFF) == 0)
      {
        inited = (uint64_t *)(__clz(__rbit32(v8 >> 8)) + 1);
      }
      else
      {
        inited = 0;
        v8 = 0;
      }
    }
    else
    {
      inited = 0;
    }
    v5[1] = v8;
  }
  return (*(uint64_t (**)(unsigned int *, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 88))(a1, v5, inited);
}

unint64_t *_dispatch_barrier_trysync_or_async_f_VARIANT_mp(unint64_t *a1, uint64_t a2, uint64_t (*a3)(void), char a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  int v10;

  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  v5 = (unint64_t)*((unsigned __int16 *)a1 + 40) << 41;
  v6 = v4 & 0xFFFFFFFC | ((unint64_t)(a4 & 1) << 58);
  v7 = a1 + 7;
  do
  {
    v8 = __ldaxr(v7);
    if (v8 != (v8 & 0x3000000000) - v5 + 0x20000000000000)
    {
      __clrex();
      return (unint64_t *)_dispatch_barrier_async_detached_f_VARIANT_mp((uint64_t)a1, a2, (uint64_t)a3);
    }
  }
  while (__stxr(v8 & 0x3000000000 | v6 | 0x60000000000002, v7));
  if ((a4 & 1) == 0)
    return (unint64_t *)_dispatch_barrier_trysync_or_async_f_complete(a1, a2, a3, a4);
  if (*((_DWORD *)a1 + 2) == 0x7FFFFFFF)
    return (unint64_t *)_dispatch_barrier_trysync_or_async_f_complete(a1, a2, a3, a4);
  v9 = (unsigned int *)(a1 + 1);
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 2, v9));
  if (v10 > 0)
    return (unint64_t *)_dispatch_barrier_trysync_or_async_f_complete(a1, a2, a3, a4);
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
  __break(1u);
  return a1;
}

uint64_t _dispatch_barrier_trysync_or_async_f_complete(unint64_t *a1, uint64_t a2, uint64_t (*a3)(void), char a4)
{
  unint64_t StatusReg;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v11 = *(_OWORD *)(StatusReg + 160);
  *(_QWORD *)(StatusReg + 160) = a1;
  *(_QWORD *)(StatusReg + 168) = &v11;
  _dispatch_client_callout(a2, a3);
  *(_OWORD *)(StatusReg + 160) = v11;
  if ((a4 & 1) != 0)
  {
    v8 = a1 + 7;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 - 0x400000000000000, v8));
    if (v9 >> 55 == 8)
      v7 = 5;
    else
      v7 = 4;
  }
  else
  {
    v7 = 4;
  }
  return (*(uint64_t (**)(unint64_t *, _QWORD, uint64_t))(*a1 + 80))(a1, 0, v7);
}

double dispatch_barrier_sync_f_VARIANT_mp(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  double result;

  if (*(_BYTE *)(*(_QWORD *)a1 + 40) != 17
    || (v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24),
        v4 = *(_DWORD *)(a1 + 80),
        (v4 & 0x1000000) != 0)
    && (v4 = *(_DWORD *)(a1 + 80), (v4 & 0x40000) != 0))
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Queue type doesn't support dispatch_sync";
    __break(1u);
    return _dispatch_sync_recurse(a1, a2, a3, 2uLL);
  }
  else
  {
    v5 = (unint64_t)(unsigned __int16)v4 << 41;
    v6 = v3 & 0xFFFFFFFC;
    v7 = (unint64_t *)(a1 + 56);
    do
    {
      v8 = __ldaxr(v7);
      if (v8 != (v8 & 0x3000000000) - v5 + 0x20000000000000)
      {
        __clrex();
        return _dispatch_sync_f_slow(a1, a2, a3, 2uLL, a1, 2);
      }
    }
    while (__stxr(v6 | v8 & 0x3000000000 | 0x60000000000002, v7));
    if (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24))
      return _dispatch_sync_recurse(a1, a2, a3, 2uLL);
    _dispatch_lane_barrier_sync_invoke_and_complete(a1, a2, a3);
  }
  return result;
}

double dispatch_sync_f_VARIANT_mp(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  double result;
  unint64_t *v4;
  unint64_t v5;

  if (*(_WORD *)(a1 + 80) == 1)
    return _dispatch_barrier_sync_f(a1, a2, a3, 0);
  if (*(_BYTE *)(*(_QWORD *)a1 + 40) != 17
    || (*(_DWORD *)(a1 + 80) & 0x1000000) != 0 && (*(_DWORD *)(a1 + 80) & 0x40000) != 0)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Queue type doesn't support dispatch_sync";
    __break(1u);
    return _dispatch_sync_recurse(a1, a2, a3, 0);
  }
  else if (*(_QWORD *)(a1 + 48))
  {
    return _dispatch_sync_f_slow(a1, a2, a3, 0, a1, 0);
  }
  else
  {
    v4 = (unint64_t *)(a1 + 56);
    do
    {
      v5 = __ldxr(v4);
      if ((v5 & 0xFFC0018000000000) != 0)
      {
        __clrex();
        return _dispatch_sync_f_slow(a1, a2, a3, 0, a1, 0);
      }
    }
    while (__stxr(v5 + 0x20000000000, v4));
    if (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24))
      return _dispatch_sync_recurse(a1, a2, a3, 0);
    _dispatch_sync_invoke_and_complete(a1, a2, a3);
  }
  return result;
}

void dispatch_barrier_sync_VARIANT_mp(unsigned int *a1, uint64_t a2)
{
  uint64_t (*v2)(void);

  v2 = *(uint64_t (**)(void))(a2 + 16);
  if ((char *)v2 == (char *)___dispatch_block_create_block_invoke)
    _dispatch_sync_block_with_privdata(a1, a2, 18);
  else
    _dispatch_barrier_sync_f((uint64_t)a1, a2, v2, 18);
}

void _dispatch_sync_block_with_privdata(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BOOL4 v13;
  _BOOL4 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t StatusReg;
  uint64_t v18;
  int v19;
  unsigned int *v20;
  int v21;
  unint64_t v22;
  unint64_t *v23;
  int v25;
  unsigned int v26;
  BOOL v27;
  signed int v28;
  uint64_t v29;

  if (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 16) == ___dispatch_block_create_block_invoke)
  {
    v6 = (_QWORD *)(a2 + 32);
    v7 = *(unsigned int **)(a2 + 32);
    if (v7 != (unsigned int *)3512316172)
      goto LABEL_65;
  }
  else
  {
    v6 = 0;
  }
  v8 = 0;
  v9 = v6[1];
  if ((v9 & 1) != 0)
    v10 = 34;
  else
    v10 = 32;
  if ((v9 & 0x40000000) != 0)
  {
    v11 = 0;
    if ((v6[1] & 0x30) != 0x10)
    {
      v11 = v6[3];
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) & 0xFFFFFFLL;
      v13 = v12 != 0;
      v14 = v12 < (v11 & 0xFFFFFFuLL);
      v8 = v13 && v14 ? v12 : 0;
      if (!v13 || !v14)
        v11 = 0;
    }
    if ((v9 & 0x80000000) == 0)
      goto LABEL_15;
  }
  else
  {
    v11 = 0;
    if ((v9 & 0x80000000) == 0)
    {
LABEL_15:
      v15 = -1;
      goto LABEL_18;
    }
  }
  v15 = v6[4];
LABEL_18:
  v16 = v11 & 0xFFFFFFFF02FFFFFFLL;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v18 = *(_QWORD *)(StatusReg + 32);
  if ((v18 & 0x1000000) != 0)
  {
    if (v16)
    {
LABEL_58:
      _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v16, v15, 0);
      v15 = v29;
      goto LABEL_26;
    }
    v16 = v18 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v16 == (v18 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_20;
  }
  if (v16)
    goto LABEL_58;
LABEL_20:
  if (v15 == -1)
  {
LABEL_26:
    v20 = a1 + 2;
    if (a1[2] == 0x7FFFFFFF)
      goto LABEL_29;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 2, v20));
    if (v21 > 0)
    {
LABEL_29:
      v22 = v10 | a3;
      v23 = v6 + 7;
      while (!__ldxr(v23))
      {
        if (!__stxr((unint64_t)a1, v23))
          goto LABEL_36;
      }
      __clrex();
      if (*v20 != 0x7FFFFFFF)
      {
        do
          v25 = __ldxr(v20);
        while (__stlxr(v25 - 2, v20));
        if (v25 <= 2)
        {
          if (v25 != 2)
            goto LABEL_66;
          _os_object_dispose(a1, (const char *)a2);
        }
      }
LABEL_36:
      if ((v22 & 2) != 0)
        _dispatch_barrier_sync_f((uint64_t)a1, a2, (uint64_t (*)(void))_dispatch_block_sync_invoke_VARIANT_mp, v22);
      else
        _dispatch_sync_f((uint64_t)a1, a2, (uint64_t (*)(void))_dispatch_block_sync_invoke_VARIANT_mp, v22);
      v20 = *(unsigned int **)(StatusReg + 32);
      if ((v20 & 0x1000000) == 0)
      {
        if (v8 != ((unint64_t)v20 & 0xFFFFFFFF77FFFFFFLL))
          goto LABEL_55;
LABEL_41:
        if (v15 == -1)
          return;
        if (*(_QWORD *)(StatusReg + 224) == v15)
        {
          if (!v15)
            return;
          v7 = (unsigned int *)(v15 + 12);
          do
          {
            v26 = __ldxr(v7);
            v27 = __OFSUB__(v26, 1);
            v28 = v26 - 1;
          }
          while (__stxr(v28, v7));
          if (!((v28 < 0) ^ v27 | (v28 == 0)))
            return;
          goto LABEL_64;
        }
        v8 = 0;
LABEL_60:
        _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v8, v15, 6);
        return;
      }
    }
    else
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
    }
    if (v8)
      goto LABEL_60;
    v8 = (unint64_t)v20 & 0xFFFFFFFFFEFFFFFFLL;
LABEL_55:
    if (v8)
      goto LABEL_60;
    goto LABEL_41;
  }
  if (*(_QWORD *)(StatusReg + 224) != v15)
  {
    v16 = 0;
    goto LABEL_58;
  }
  if (!v15)
    goto LABEL_26;
  v7 = (unsigned int *)(v15 + 12);
  do
    v19 = __ldxr(v7);
  while (__stxr(v19 + 1, v7));
  if (v19 > 0)
    goto LABEL_26;
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
  __break(1u);
LABEL_64:
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
  __break(1u);
LABEL_65:
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption of dispatch block object";
  qword_1EDF52D38 = (uint64_t)v7;
  __break(1u);
LABEL_66:
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
}

double _dispatch_barrier_sync_f(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  double result;

  if (*(_BYTE *)(*(_QWORD *)a1 + 40) != 17
    || (v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24),
        v5 = *(_DWORD *)(a1 + 80),
        (v5 & 0x1000000) != 0)
    && (v5 = *(_DWORD *)(a1 + 80), (v5 & 0x40000) != 0))
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Queue type doesn't support dispatch_sync";
    __break(1u);
    return _dispatch_sync_recurse(a1, a2, a3, a4 | 2);
  }
  else
  {
    v6 = (unint64_t)(unsigned __int16)v5 << 41;
    v7 = v4 & 0xFFFFFFFC;
    v8 = (unint64_t *)(a1 + 56);
    do
    {
      v9 = __ldaxr(v8);
      if (v9 != (v9 & 0x3000000000) - v6 + 0x20000000000000)
      {
        __clrex();
        return _dispatch_sync_f_slow(a1, a2, a3, 2uLL, a1, a4 | 2);
      }
    }
    while (__stxr(v7 | v9 & 0x3000000000 | 0x60000000000002, v8));
    if (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24))
      return _dispatch_sync_recurse(a1, a2, a3, a4 | 2);
    _dispatch_lane_barrier_sync_invoke_and_complete(a1, a2, a3);
  }
  return result;
}

void dispatch_sync_VARIANT_mp(unsigned int *a1, uint64_t a2)
{
  uint64_t (*v2)(void);

  v2 = *(uint64_t (**)(void))(a2 + 16);
  if ((char *)v2 == (char *)___dispatch_block_create_block_invoke)
    _dispatch_sync_block_with_privdata(a1, a2, 16);
  else
    _dispatch_sync_f((uint64_t)a1, a2, v2, 0x10uLL);
}

double _dispatch_sync_f(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t a4)
{
  double result;
  unint64_t *v5;
  unint64_t v6;

  if (*(_WORD *)(a1 + 80) == 1)
    return _dispatch_barrier_sync_f(a1, a2, a3, a4);
  if (*(_BYTE *)(*(_QWORD *)a1 + 40) != 17
    || (*(_DWORD *)(a1 + 80) & 0x1000000) != 0 && (*(_DWORD *)(a1 + 80) & 0x40000) != 0)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Queue type doesn't support dispatch_sync";
    __break(1u);
    return _dispatch_sync_recurse(a1, a2, a3, a4);
  }
  else if (*(_QWORD *)(a1 + 48))
  {
    return _dispatch_sync_f_slow(a1, a2, a3, 0, a1, a4);
  }
  else
  {
    v5 = (unint64_t *)(a1 + 56);
    do
    {
      v6 = __ldxr(v5);
      if ((v6 & 0xFFC0018000000000) != 0)
      {
        __clrex();
        return _dispatch_sync_f_slow(a1, a2, a3, 0, a1, a4);
      }
    }
    while (__stxr(v6 + 0x20000000000, v5));
    if (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24))
      return _dispatch_sync_recurse(a1, a2, a3, a4);
    _dispatch_sync_invoke_and_complete(a1, a2, a3);
  }
  return result;
}

double dispatch_async_and_wait_f_VARIANT_mp(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t v3;
  double result;

  if (!*(_QWORD *)(a1 + 24))
    return _dispatch_sync_function_invoke(a1, a2, a3);
  if (*(_WORD *)(a1 + 80) == 1)
    v3 = 130;
  else
    v3 = 128;
  _dispatch_async_and_wait_f(a1, a2, (uint64_t)a3, v3);
  return result;
}

double _dispatch_sync_function_invoke(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t StatusReg;
  double result;
  __int128 v5;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_OWORD *)(StatusReg + 160);
  *(_QWORD *)(StatusReg + 160) = a1;
  *(_QWORD *)(StatusReg + 168) = &v5;
  _dispatch_client_callout(a2, a3);
  result = *(double *)&v5;
  *(_OWORD *)(StatusReg + 160) = v5;
  return result;
}

void _dispatch_async_and_wait_f(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t StatusReg;
  uint64_t v5;
  int v6;
  _QWORD v7[12];
  int v8;
  int v9;
  uint64_t v10;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_QWORD *)(StatusReg + 32);
  v6 = *(_DWORD *)(StatusReg + 24);
  v10 = 0;
  v7[0] = a4;
  v7[1] = v5 | 0x10000000;
  v7[2] = 0;
  v7[3] = *(_QWORD *)(StatusReg + 224);
  v7[4] = _dispatch_async_and_wait_invoke;
  v7[5] = v7;
  v7[6] = 0;
  v7[7] = a1;
  v7[8] = a3;
  v7[10] = 0;
  v7[11] = 0;
  v7[9] = a2;
  v8 = 0;
  v9 = v6;
  _dispatch_async_and_wait_recurse(a1, (uint64_t)v7, v6, a4);
}

double dispatch_barrier_async_and_wait_f_VARIANT_mp(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  double result;

  if (!*(_QWORD *)(a1 + 24))
    return _dispatch_sync_function_invoke(a1, a2, a3);
  _dispatch_async_and_wait_f(a1, a2, (uint64_t)a3, 0x82uLL);
  return result;
}

void dispatch_barrier_async_and_wait_VARIANT_mp(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 16);
    if (v2 == ___dispatch_block_create_block_invoke)
      _dispatch_async_and_wait_block_with_privdata((unsigned int *)a1, a2, 146);
    else
      _dispatch_async_and_wait_f(a1, a2, (uint64_t)v2, 0x92uLL);
  }
  else
  {
    dispatch_barrier_sync_VARIANT_mp((unsigned int *)a1, a2);
  }
}

void _dispatch_async_and_wait_block_with_privdata(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int *v14;
  int v15;
  unint64_t *v16;
  uint64_t v18;
  int v19;
  _QWORD v20[12];
  int v21;
  int v22;
  uint64_t v23;

  if (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 16) == ___dispatch_block_create_block_invoke)
  {
    v6 = (_QWORD *)(a2 + 32);
    v7 = *(_QWORD *)(a2 + 32);
    if (v7 != 3512316172)
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption of dispatch block object";
      qword_1EDF52D38 = v7;
      __break(1u);
      goto LABEL_31;
    }
  }
  else
  {
    v6 = 0;
  }
  v8 = v6[1];
  if ((v8 & 0x40000000) == 0
    || (v6[1] & 0x30) == 0x10
    || ((v9 = v6[3], (v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) & 0xFFFFFFLL) != 0)
      ? (v11 = v10 >= (v9 & 0xFFFFFFuLL))
      : (v11 = 1),
        v11))
  {
    v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
  }
  v12 = (uint64_t *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if ((int)v8 < 0)
    v12 = v6 + 4;
  v13 = *v12;
  v14 = a1 + 2;
  if (a1[2] == 0x7FFFFFFF)
    goto LABEL_17;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 2, v14));
  if (v15 > 0)
  {
LABEL_17:
    v16 = v6 + 7;
    while (!__ldxr(v16))
    {
      if (!__stxr((unint64_t)a1, v16))
        goto LABEL_24;
    }
    __clrex();
    if (*v14 == 0x7FFFFFFF)
      goto LABEL_24;
    do
      LODWORD(v6) = __ldxr(v14);
    while (__stlxr((_DWORD)v6 - 2, v14));
    if ((int)v6 > 2)
      goto LABEL_24;
  }
  else
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
  }
  if ((_DWORD)v6 != 2)
  {
LABEL_31:
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
    __break(1u);
    return;
  }
  _os_object_dispose(a1, (const char *)a2);
LABEL_24:
  v18 = 34;
  if ((v8 & 1) == 0)
    v18 = 32;
  v19 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  v20[0] = v18 | a3;
  v20[1] = v9 | 0x10000000;
  v20[2] = 0;
  v20[3] = v13;
  v20[4] = _dispatch_async_and_wait_invoke;
  v20[5] = v20;
  v20[6] = 0;
  v20[7] = a1;
  v20[8] = _dispatch_block_sync_invoke_VARIANT_mp;
  v20[10] = 0;
  v20[11] = 0;
  v20[9] = a2;
  v21 = 0;
  v22 = v19;
  v23 = 0;
  _dispatch_async_and_wait_recurse((uint64_t)a1, (uint64_t)v20, v19, v18 | a3);
}

void dispatch_async_and_wait_VARIANT_mp(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_WORD *)(a1 + 80) == 1)
      v2 = 146;
    else
      v2 = 144;
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 16);
    if (v3 == ___dispatch_block_create_block_invoke)
      _dispatch_async_and_wait_block_with_privdata((unsigned int *)a1, a2, v2);
    else
      _dispatch_async_and_wait_f(a1, a2, (uint64_t)v3, v2);
  }
  else
  {
    dispatch_sync_VARIANT_mp((unsigned int *)a1, a2);
  }
}

void dispatch_queue_set_specific_VARIANT_mp(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t StatusReg;
  unsigned int v13;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int v21;
  unsigned int v22;

  if (a2)
  {
    v8 = a1[11];
    v9 = *(_QWORD *)(*a1 + 40);
    LODWORD(v10) = v9;
    if (v9 != 17)
      goto LABEL_8;
    v10 = v9 & 0x20000;
    if (v9 != 394769 && v10 != 0)
    {
      do
      {
        qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Queue doesn't support dispatch_queue_set_specific";
        __break(1u);
LABEL_8:
        ;
      }
      while ((_DWORD)v10 != 18);
    }
    if (!a3 || v8)
    {
      if (!v8)
        return;
    }
    else
    {
      _dispatch_queue_init_specific((uint64_t)a1);
      v8 = a1[11];
    }
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v13 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    while (!__ldaxr((unsigned int *)v8))
    {
      if (!__stxr(v13, (unsigned int *)v8))
        goto LABEL_18;
    }
    __clrex();
    _dispatch_unfair_lock_lock_slow_VARIANT_mp(v8);
LABEL_18:
    v15 = *(_QWORD **)(v8 + 8);
    if (v15)
    {
      while (*v15 != a2)
      {
        v15 = (_QWORD *)v15[3];
        if (!v15)
          goto LABEL_21;
      }
      v18 = v15[2];
      if (v18)
        _dispatch_barrier_async_detached_f_VARIANT_mp((uint64_t)&unk_1ECCEA080, v15[1], v18);
      if (a3)
      {
        v15[1] = a3;
        v15[2] = a4;
      }
      else
      {
        v19 = v15[3];
        v20 = (_QWORD *)v15[4];
        if (v19)
        {
          *(_QWORD *)(v19 + 32) = v20;
          v20 = (_QWORD *)v15[4];
        }
        else
        {
          *(_QWORD *)(v8 + 16) = v20;
        }
        *v20 = v19;
        free(v15);
      }
    }
    else
    {
LABEL_21:
      if (a3)
      {
        v16 = _dispatch_calloc(1uLL, 0x28uLL);
        *v16 = a2;
        v16[1] = a3;
        v16[2] = a4;
        v16[3] = 0;
        v17 = *(_QWORD **)(v8 + 16);
        v16[4] = v17;
        *v17 = v16;
        *(_QWORD *)(v8 + 16) = v16 + 3;
      }
    }
    v21 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    do
      v22 = __ldxr((unsigned int *)v8);
    while (__stlxr(0, (unsigned int *)v8));
    if (v22 != v21)
      _dispatch_unfair_lock_unlock_slow_VARIANT_mp(v8, v22);
  }
}

void _dispatch_queue_init_specific(uint64_t a1)
{
  _QWORD *v2;
  unint64_t *v3;

  v2 = _dispatch_calloc(1uLL, 0x18uLL);
  v2[1] = 0;
  v2[2] = v2 + 1;
  v3 = (unint64_t *)(a1 + 88);
  while (!__ldxr(v3))
  {
    if (!__stlxr((unint64_t)v2, v3))
      return;
  }
  __clrex();
  _dispatch_queue_specific_head_dispose(v2);
}

uint64_t dispatch_queue_get_specific_VARIANT_mp(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v7;
  unint64_t StatusReg;
  unsigned int v10;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;

  v2 = a2;
  if (a2)
  {
    v3 = a1[11];
    v4 = *(_QWORD *)(*a1 + 40);
    v5 = v4;
    v7 = (v4 & 0x20000) == 0 || v4 == 394769;
    if (v5 != 17)
      v7 = v5 == 18;
    if (!v7 || v3 == 0)
    {
      return 0;
    }
    else
    {
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v10 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
      while (!__ldaxr((unsigned int *)v3))
      {
        if (!__stxr(v10, (unsigned int *)v3))
          goto LABEL_19;
      }
      __clrex();
      _dispatch_unfair_lock_lock_slow_VARIANT_mp(v3);
LABEL_19:
      v12 = *(_QWORD **)(v3 + 8);
      if (v12)
      {
        while (*v12 != v2)
        {
          v12 = (_QWORD *)v12[3];
          if (!v12)
            goto LABEL_22;
        }
        v2 = v12[1];
      }
      else
      {
LABEL_22:
        v2 = 0;
      }
      v13 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
      do
        v14 = __ldxr((unsigned int *)v3);
      while (__stlxr(0, (unsigned int *)v3));
      if (v14 != v13)
        _dispatch_unfair_lock_unlock_slow_VARIANT_mp(v3, v14);
    }
  }
  return v2;
}

uint64_t dispatch_get_specific_VARIANT_mp(uint64_t a1)
{
  uint64_t v1;
  unint64_t StatusReg;
  _QWORD *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v9;
  unsigned int v11;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = 0;
  if (a1)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    for (i = *(_QWORD **)(StatusReg + 160); i; i = (_QWORD *)i[3])
    {
      v5 = i[11];
      v6 = *(_QWORD *)(*i + 40);
      v7 = v6;
      v9 = (v6 & 0x20000) == 0 || v6 == 394769;
      if (v7 != 17)
        v9 = v7 == 18;
      if (!v9 || v5 == 0)
      {
        v1 = 0;
      }
      else
      {
        v11 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        while (!__ldaxr((unsigned int *)v5))
        {
          if (!__stxr(v11, (unsigned int *)v5))
            goto LABEL_20;
        }
        __clrex();
        _dispatch_unfair_lock_lock_slow_VARIANT_mp(v5);
LABEL_20:
        v13 = *(_QWORD **)(v5 + 8);
        if (v13)
        {
          while (*v13 != a1)
          {
            v13 = (_QWORD *)v13[3];
            if (!v13)
              goto LABEL_23;
          }
          v1 = v13[1];
        }
        else
        {
LABEL_23:
          v1 = 0;
        }
        v14 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        do
          v15 = __ldxr((unsigned int *)v5);
        while (__stlxr(0, (unsigned int *)v5));
        if (v15 != v14)
          _dispatch_unfair_lock_unlock_slow_VARIANT_mp(v5, v15);
      }
      if (v1)
        break;
    }
  }
  return v1;
}

uint64_t dispatch_queue_set_label_nocopy_VARIANT_mp(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    if ((*(_DWORD *)(result + 80) & 0x200000) != 0)
      dispatch_queue_set_label_nocopy_VARIANT_mp_cold_1(result);
    *(_QWORD *)(result + 72) = a2;
  }
  return result;
}

uint64_t _dispatch_queue_compute_priority_and_wlh_VARIANT_mp(uint64_t a1, uint64_t *a2)
{
  int v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;

  v2 = *(_DWORD *)(a1 + 84);
  v3 = (unsigned __int16)v2 >> 12;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = -4;
  if ((*(_QWORD *)(a1 + 56) & 0x2000000000) != 0)
    v5 = a1;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 40);
  if ((v6 & 0x10000) == 0)
  {
    v16 = (unsigned int *)(a1 + 80);
    v7 = *(_DWORD *)(a1 + 84) & 0xFFF;
    while ((__objc2_class **)v4 != &_dispatch_mgr_q)
    {
      if ((*(_DWORD *)(v4 + 80) & 0x40000) != 0 && (*(_DWORD *)(v4 + 80) & 0x1000000) == 0)
      {
        if (a2)
          *a2 = -4;
        return *(unsigned int *)(v4 + 84);
      }
      if (*(_QWORD *)(v4 + 56) >> 55)
        goto LABEL_44;
      if ((*(_QWORD *)(v4 + 56) & 0x2000000000) != 0)
      {
        v5 = v4;
        if (v6 == 18)
        {
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 & 0xFFBFFFFF, v16));
          v5 = v4;
        }
      }
      else if ((*(_DWORD *)(v4 + 80) & 0x400000) != 0)
      {
LABEL_44:
        if (MEMORY[0xFFFFFC100])
          kdebug_trace();
        result = 0;
        if (a2)
          *a2 = 0;
        return result;
      }
      v18 = *(_DWORD *)(v4 + 84);
      v4 = *(_QWORD *)(v4 + 24);
      if ((v18 & 0x20000000) == 0)
      {
        if (!v3)
          v3 = (unsigned __int16)v18 >> 12;
        v19 = v18 & 0xFFF;
        if (v7 <= v19)
          v7 = v19;
        v6 = *(_QWORD *)(*(_QWORD *)v4 + 40);
        if ((v6 & 0x10000) == 0)
          continue;
      }
      goto LABEL_5;
    }
    if (a2)
      *a2 = -4;
    return 0x2000000;
  }
  v7 = *(_DWORD *)(a1 + 84) & 0xFFF;
LABEL_5:
  v8 = v4 < (unint64_t)&_dispatch_root_queues || v4 >= (unint64_t)&_dispatch_queue_serial_numbers;
  if (v8 && *(_QWORD *)(v4 + 64) != 22)
  {
    if (a2)
      *a2 = -4;
    return 0x2000000;
  }
  v9 = *(_DWORD *)(v4 + 84);
  v10 = (unsigned __int16)v9 >> 12;
  if (v3)
    v10 = v3;
  v11 = *(_DWORD *)(v4 + 84) & 0xFFF;
  if (v7 > v11)
    v11 = v7;
  result = v11 | v9 & 0x88000000;
  if ((v2 & 0x40000000) != 0 || (v2 & 0xFFF) == 0)
  {
    v13 = result | v2 & 0x40000000;
    v14 = v10 > ((v11 >> 8) & 0xF);
    v15 = v13 | ((v10 & 0xF) << 12) | 0x4000000;
    if (v14)
      result = v15;
    else
      result = v13;
  }
  if (a2)
    *a2 = v5;
  return result;
}

uint64_t dispatch_set_qos_class_floor_VARIANT_mp(uint64_t a1, int a2, char a3)
{
  uint64_t result;
  unsigned int v4;
  unint64_t v5;
  int v6;

  if ((*(_QWORD *)(*(_QWORD *)a1 + 40) & 0xF0) != 0x10)
    dispatch_set_qos_class_floor_VARIANT_mp_cold_2();
  if (*(_QWORD *)(*(_QWORD *)a1 + 40) == 18)
    return (uint64_t)dispatch_workloop_set_qos_class_floor_VARIANT_mp(a1, a2, a3, 0);
  HIDWORD(v5) = a2 - 5;
  LODWORD(v5) = a2 - 5;
  v4 = v5 >> 2;
  if (v4 <= 7 && ((0xBBu >> v4) & 1) != 0)
    v6 = (a3 - 1) | dword_18A06E5C4[v4] | 0x40000000;
  else
    v6 = 0;
  *(_DWORD *)(a1 + 84) = v6 | *(_DWORD *)(a1 + 84) & 0xBFFFF000;
  result = *(_QWORD *)(a1 + 56);
  if ((~result & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_VARIANT_mp_cold_1(result);
  return result;
}

_DWORD *dispatch_workloop_set_qos_class_floor_VARIANT_mp(uint64_t a1, int a2, char a3, char a4)
{
  uint64_t v5;
  _DWORD *result;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v5 = *(_QWORD *)(a1 + 56);
  if ((~v5 & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_VARIANT_mp_cold_1(v5);
  result = *(_DWORD **)(a1 + 200);
  if (!result)
  {
    result = _dispatch_calloc(1uLL, 0x38uLL);
    *(_QWORD *)(a1 + 200) = result;
  }
  HIDWORD(v11) = a2 - 5;
  LODWORD(v11) = a2 - 5;
  v10 = v11 >> 2;
  if (v10 <= 7 && ((0xBBu >> v10) & 1) != 0)
  {
    result[1] = dword_18A06E5C4[v10] | (a3 - 1);
    v12 = *result | 8;
    if ((a4 & 1) == 0)
      goto LABEL_7;
LABEL_9:
    result[4] = 2;
    v13 = v12 | 2;
    goto LABEL_10;
  }
  result[1] = 0;
  v12 = *result & 0xFFFFFFF7;
  if ((a4 & 1) != 0)
    goto LABEL_9;
LABEL_7:
  v13 = v12 & 0xFFFFFFFD;
LABEL_10:
  *result = v13;
  return result;
}

uint64_t dispatch_set_qos_class_VARIANT_mp(uint64_t a1, int a2, char a3)
{
  unsigned int v4;
  unint64_t v5;
  int v6;
  uint64_t result;

  if ((*(_QWORD *)(*(_QWORD *)a1 + 40) & 0xF0) != 0x10
    || *(_QWORD *)(*(_QWORD *)a1 + 40) == 18)
  {
    dispatch_set_qos_class_VARIANT_mp_cold_1();
  }
  HIDWORD(v5) = a2 - 5;
  LODWORD(v5) = a2 - 5;
  v4 = v5 >> 2;
  if (v4 <= 7 && ((0xBBu >> v4) & 1) != 0)
    v6 = dword_18A06E5C4[v4] | (a3 - 1);
  else
    v6 = 0;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a1 + 84) & 0xBFFFF000 | v6;
  result = *(_QWORD *)(a1 + 56);
  if ((~result & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_VARIANT_mp_cold_1(result);
  return result;
}

uint64_t dispatch_set_qos_class_fallback_VARIANT_mp(uint64_t a1, int a2)
{
  unsigned int v2;
  unint64_t v3;
  int v4;
  uint64_t result;

  if ((*(_QWORD *)(*(_QWORD *)a1 + 40) & 0xF0) != 0x10)
    dispatch_set_qos_class_fallback_VARIANT_mp_cold_2();
  HIDWORD(v3) = a2 - 5;
  LODWORD(v3) = a2 - 5;
  v2 = v3 >> 2;
  if (v2 > 7)
    v4 = 0;
  else
    v4 = dword_18A06E5E4[v2];
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a1 + 84) & 0xFBFF0FFF | v4;
  result = *(_QWORD *)(a1 + 56);
  if ((~result & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_VARIANT_mp_cold_1(result);
  return result;
}

uint64_t dispatch_queue_create_with_target_V2_VARIANT_mp(const char *a1, uint64_t *a2, __objc2_class **a3)
{
  return _dispatch_lane_create_with_target(a1, a2, a3, 0);
}

uint64_t _dispatch_lane_create_with_target(const char *a1, uint64_t *a2, __objc2_class **a3, unsigned __int8 a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  __objc2_class *v16;
  unsigned int v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;

  result = (uint64_t)_dispatch_queue_attr_to_info(a2);
  v8 = result;
  v9 = result;
  v10 = WORD1(result) & 3;
  if (a3 && v10)
  {
    if (!a3[3])
      goto LABEL_6;
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot specify both overcommit and a non-global target queue";
    qword_1EDF52D38 = (uint64_t)a3;
    __break(1u);
  }
  if (!a3)
  {
    if ((result & 0x100000) != 0)
      v12 = 2;
    else
      v12 = 1;
    if (!v10)
      v10 = v12;
    goto LABEL_28;
  }
LABEL_6:
  if ((*a3)[1].isa == (__objc2_class *)328465)
  {
    if (v10)
    {
      if (!(_BYTE)result)
      {
LABEL_29:
        LODWORD(v13) = (*((_DWORD *)a3 + 21) >> 8) & 0xF;
        goto LABEL_30;
      }
    }
    else
    {
      if (*((int *)a3 + 21) < 0)
        v10 = 1;
      else
        v10 = 2;
      if (!(_BYTE)result)
        goto LABEL_29;
    }
LABEL_28:
    LODWORD(v13) = result;
LABEL_30:
    if ((_DWORD)v13)
      v13 = v13;
    else
      v13 = 4;
    if ((v13 - 7) <= 0xFFFFFFF9)
    {
LABEL_73:
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupted priority";
      qword_1EDF52D38 = v13;
      __break(1u);
      goto LABEL_74;
    }
    v14 = 3 * v13;
    if (v10 == 1)
      ++v14;
    a3 = &_dispatch_root_queues + 16 * (unint64_t)(v14 - 3);
LABEL_38:
    if ((((result & 0x2C0000) == 0) & a4) != 0)
      v15 = 0x400000;
    else
      v15 = 0;
    if ((result & 0x100000) != 0)
      v16 = OS_dispatch_queue_concurrent;
    else
      v16 = OS_dispatch_queue_serial;
    v17 = (result >> 18) & 3;
    if (v17 == 1)
    {
      v15 |= 0x10000u;
      if (a1)
      {
LABEL_48:
        v18 = _dispatch_strdup_if_mutable(a1);
        if (v18 != a1)
          v15 |= 0x200000u;
        goto LABEL_52;
      }
    }
    else
    {
      if (v17 == 2)
        v15 |= 0x20000u;
      if (a1)
        goto LABEL_48;
    }
    v18 = 0;
LABEL_52:
    result = _dispatch_object_alloc_VARIANT_mp(v16, 120);
    v19 = result;
    if ((v8 & 0x100000) != 0)
      v20 = 4094;
    else
      v20 = 1;
    v21 = 0x180000000000000;
    if ((v8 & 0x200000) != 0)
    {
      *(_DWORD *)(result + 8) += 2;
      if (*(_BYTE *)(*(_QWORD *)result + 40) == 19)
        ++*(_DWORD *)(result + 8);
    }
    else
    {
      v21 = 0;
    }
    *(_QWORD *)(result + 16) = -1985229329;
    *(_DWORD *)(result + 80) = v15 | v20;
    *(_QWORD *)(result + 56) = v21 - (v20 << 41) + 0x20000000000000;
    do
      v22 = __ldxr(&_dispatch_queue_serial_numbers);
    while (__stxr(v22 + 1, &_dispatch_queue_serial_numbers));
    *(_QWORD *)(result + 64) = v22;
    *(_QWORD *)(result + 72) = v18;
    v23 = (BYTE1(v8) - 1) | ((v9 & 0xF) << 8);
    if (!v9)
      v23 = 0;
    if (v10 == 1)
      v23 |= 0x80000000;
    *(_DWORD *)(result + 84) = v23;
    if ((v8 & 0x200000) == 0)
    {
      _dispatch_queue_priority_inherit_from_target(result, (unint64_t)a3);
      result = _dispatch_lane_inherit_wlh_from_target(v19, (unsigned int *)a3);
    }
    if (*((_DWORD *)a3 + 2) == 0x7FFFFFFF)
      goto LABEL_71;
    v13 = (uint64_t)(a3 + 1);
    do
      v24 = __ldxr((unsigned int *)v13);
    while (__stxr(v24 + 1, (unsigned int *)v13));
    if (v24 > 0)
    {
LABEL_71:
      *(_QWORD *)(v19 + 24) = a3;
      return v19;
    }
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
    goto LABEL_73;
  }
  if ((*((_BYTE *)a3 + 87) & 8) != 0)
  {
LABEL_74:
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot target object to cooperative root queue - not implemented";
    qword_1EDF52D38 = (uint64_t)a3;
    __break(1u);
    goto LABEL_75;
  }
  if (a3[3])
  {
    if ((result & 0x100000) != 0)
      v11 = 2;
    else
      v11 = 1;
    if (!v10)
      v10 = v11;
    goto LABEL_38;
  }
  if (!v10)
    goto LABEL_38;
LABEL_75:
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot specify an overcommit attribute and use this kind of target queue";
  qword_1EDF52D38 = (uint64_t)a3;
  __break(1u);
  return result;
}

uint64_t dispatch_queue_create_VARIANT_mp(const char *a1, uint64_t *a2)
{
  return _dispatch_lane_create_with_target(a1, a2, 0, 1u);
}

void dispatch_queue_create_with_accounting_override_voucher_VARIANT_mp()
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unsupported interface";
  __break(1u);
}

void _dispatch_lane_class_dispose_VARIANT_mp(uint64_t *a1, _BYTE *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (a1[6])
    _dispatch_lane_class_dispose_VARIANT_mp_cold_3(a1 + 6);
  a1[13] = 512;
  a1[6] = 512;
  v2 = a1[7];
  v3 = 0x20000000000000 - ((unint64_t)*((unsigned __int16 *)a1 + 40) << 41);
  if ((*(_BYTE *)(*a1 + 42) & 1) != 0)
    v3 = 0x60000000000000;
  if ((v2 & 0xFFFFFF48FFFFFFFFLL) != v3)
  {
    v4 = a1[7];
    if ((v2 & 0xFFFFFFFC) == 0)
      _dispatch_lane_class_dispose_VARIANT_mp_cold_1(v4);
    _dispatch_lane_class_dispose_VARIANT_mp_cold_2(v4);
  }
  _dispatch_queue_dispose(a1, a2);
}

void _dispatch_queue_dispose(_QWORD *obj, _BYTE *a2)
{
  void *v4;
  unint64_t *v5;
  _QWORD *v6;
  unsigned int *v7;
  int v8;

  v4 = (void *)obj[9];
  if (v4 && (obj[10] & 0x200000) != 0)
    free(v4);
  v5 = obj + 11;
  do
    v6 = (_QWORD *)__ldxr(v5);
  while (__stxr(0x200uLL, v5));
  if (v6)
    _dispatch_queue_specific_head_dispose(v6);
  if (*((_DWORD *)obj + 24))
  {
    v7 = (unsigned int *)(obj + 12);
    _dispatch_object_finalize_VARIANT_mp(obj);
    *a2 = 0;
    obj[9] = "<released queue, pending free>";
    obj[4] = 0;
    obj[5] = 0;
    obj[3] = 0;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 - 1, v7));
    if (v8 <= 0)
    {
      if (v8 < 0)
      {
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
      else
      {
        obj[7] = 0xDEAD000000000000;
        _dispatch_object_dealloc_VARIANT_mp(obj);
      }
    }
  }
  else
  {
    obj[7] = 0xDEAD000000000000;
  }
}

unint64_t _dispatch_queue_xref_dispose_VARIANT_mp(uint64_t a1)
{
  unint64_t result;
  unsigned int *v3;
  unsigned int v4;

  result = *(_QWORD *)(a1 + 56);
  if (result >> 55)
  {
    if ((result & 0x180000000000000) == 0)
      _dispatch_queue_xref_dispose_VARIANT_mp_cold_1(result);
    _dispatch_queue_xref_dispose_VARIANT_mp_cold_2(result);
  }
  v3 = (unsigned int *)(a1 + 80);
  do
    v4 = __ldxr(v3);
  while (__stxr(v4 | 0x800000, v3));
  return result;
}

uint64_t _dispatch_lane_suspend_VARIANT_mp(uint64_t result)
{
  unint64_t *v1;
  unint64_t v2;
  unsigned int *v3;
  int v4;

  v1 = (unint64_t *)(result + 56);
  do
  {
    v2 = __ldxr(v1);
    if (v2 >= 0xFC00000000000000)
    {
      __clrex();
      return _dispatch_lane_suspend_slow(result);
    }
  }
  while (__stxr(v2 + 0x400000000000000, v1));
  if (!(v2 >> 55) && *(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    v3 = (unsigned int *)(result + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if (v4 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  return result;
}

uint64_t _dispatch_lane_suspend_slow(uint64_t result)
{
  uint64_t v1;
  unsigned int *v2;
  unint64_t StatusReg;
  unsigned int v4;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  char v16;

  v1 = result;
  v2 = (unsigned int *)(result + 100);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v4 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v2))
  {
    if (!__stxr(v4, v2))
      goto LABEL_6;
  }
  __clrex();
  result = _dispatch_unfair_lock_lock_slow_VARIANT_mp(result + 100);
LABEL_6:
  v6 = 0x7C00000000000000;
  if (!*(_DWORD *)(v1 + 112))
    v6 = 0x7A00000000000000;
  v7 = (unint64_t *)(v1 + 56);
  do
  {
    v8 = __ldxr(v7);
    v9 = v8 >= v6;
    v10 = v8 - v6;
    if (!v9)
    {
      __clrex();
      v13 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
      do
        v14 = __ldxr(v2);
      while (__stlxr(0, v2));
      if (v14 != v13)
      {
        v15 = (uint64_t)v2;
        v16 = v14;
        _dispatch_unfair_lock_unlock_slow_VARIANT_mp(v15, v14);
        if ((v16 & 2) != 0 && (*(_QWORD *)(StatusReg + 200) & 0xF0000) == 0)
          *(_QWORD *)(StatusReg + 200) = *(_QWORD *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
      }
      return _dispatch_lane_suspend_VARIANT_mp(v1);
    }
  }
  while (__stxr(v10, v7));
  v11 = *(_DWORD *)(v1 + 112);
  *(_DWORD *)(v1 + 112) = v11 + 32;
  if (v11 >= 0xFFFFFFE0)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Too many nested calls to dispatch_suspend()";
    __break(1u);
  }
  else
  {
    v12 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    do
      LODWORD(v1) = __ldxr(v2);
    while (__stlxr(0, v2));
    if ((_DWORD)v1 == v12)
      return result;
  }
  result = _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)v2, v1);
  if ((v1 & 2) != 0 && (*(_QWORD *)(StatusReg + 200) & 0xF0000) == 0)
    *(_QWORD *)(StatusReg + 200) = *(_QWORD *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
  return result;
}

uint64_t _dispatch_queue_resume_VARIANT_mp(uint64_t a1, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;

  if ((_DWORD)a2 == 2)
  {
    v6 = (unint64_t *)(a1 + 56);
    do
    {
      v3 = __ldxr(v6);
      if ((v3 & 0x180000000000000) == 0)
      {
        __clrex();
        return (uint64_t)_os_object_release_internal_n_VARIANT_mp((void *)a1, (const char *)2);
      }
      v7 = (v3 - 0x80000000000000) & 0xFFFFFFF000000001;
      if ((v3 & 0xFFFFFFFC) != 0)
        v7 = (v3 - 0x80000000000000) | 0x8000000000;
      if ((v3 - 0x80000000000000) >> 53)
        v5 = (v3 - 0x80000000000000) | 0x8000000000;
      else
        v5 = v7;
    }
    while (__stlxr(v5, v6));
    if ((v5 & 0x180000000000000) == 0)
      goto LABEL_19;
    v3 = a1;
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupt activation state";
    qword_1EDF52D38 = a1;
    __break(1u);
LABEL_54:
    __clrex();
    if ((v3 & 0x200000000000000) != 0)
      return _dispatch_lane_resume_slow(a1);
    goto LABEL_57;
  }
  if ((_DWORD)a2 == 1)
  {
    v2 = (unint64_t *)(a1 + 56);
    while (1)
    {
      v3 = __ldxr(v2);
      if ((~v3 & 0x180000000000000) != 0)
        break;
      if (v3 >> 58)
        v4 = 0xFF80000000000000;
      else
        v4 = 0xFF00000000000000;
      v5 = v3 + v4;
      if (!__stxr(v3 + v4, v2))
        goto LABEL_19;
    }
    __clrex();
    return a1;
  }
  v8 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) - 0x20000000000;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFCLL;
  v10 = (unint64_t *)(a1 + 56);
  v11 = *(unsigned __int8 *)(*(_QWORD *)a1 + 40);
  a2 = v9 | 0x60000000000002;
  do
  {
    v3 = __ldxr(v10);
    if (v11 == 19 && (v3 & 0xFF80000000000000) == 0x180000000000000)
    {
      v5 = v3 - 0x100000000000000;
    }
    else
    {
      v12 = v3 - 0x400000000000000;
      if (v3 < 0x400000000000000)
        goto LABEL_54;
      if ((v12 & 0x180000000000000) == 0x100000000000000)
      {
        v5 = v3 - 0x480000000000000;
      }
      else if (v12 >> 53 || (v3 & 0xFFFFFFFC) != 0)
      {
        v5 = v12 | 0x8000000000;
      }
      else if (v11 == 19 || (v12 & 0x10000000000) == 0 && (v8 + v12) >> 53)
      {
        v5 = v12 & 0xFFFFFFF000000001;
      }
      else
      {
        v5 = a2 | v12 & 0x7700000001;
      }
    }
  }
  while (__stlxr(v5, v10));
LABEL_19:
  if ((v5 & 0x180000000000000) == 0x80000000000000)
    return _dispatch_lane_resume_activate(a1);
  if (!(v5 >> 55))
  {
    if (((v3 ^ v5) & 0x40000000000000) != 0)
    {
      v13 = 5;
      return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, HIDWORD(v3) & 7, v13);
    }
    if (!(v5 >> 53))
    {
      v13 = 1;
      return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, HIDWORD(v3) & 7, v13);
    }
    if (*(_DWORD *)(a1 + 8) == 0x7FFFFFFF)
      return a1;
    v14 = (unsigned int *)(a1 + 8);
    do
      v3 = __ldxr(v14);
    while (__stlxr(v3 - 2, v14));
    if ((int)v3 > 2)
      return a1;
    if ((_DWORD)v3 == 2)
      return _os_object_dispose((void *)a1, (const char *)a2);
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
    __break(1u);
LABEL_57:
    if ((~v3 & 0x180000000000000) != 0)
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Over-resume of an object";
      qword_1EDF52D38 = a1;
      __break(1u);
    }
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Over-resume of an inactive object";
    qword_1EDF52D38 = a1;
    __break(1u);
  }
  return a1;
}

uint64_t _dispatch_lane_resume_slow(uint64_t result)
{
  uint64_t v1;
  unsigned int *v2;
  unint64_t StatusReg;
  unsigned int v4;
  int v6;
  BOOL v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  char v18;

  v1 = result;
  v2 = (unsigned int *)(result + 100);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v4 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v2))
  {
    if (!__stxr(v4, v2))
      goto LABEL_6;
  }
  __clrex();
  result = _dispatch_unfair_lock_lock_slow_VARIANT_mp(result + 100);
LABEL_6:
  v6 = *(_DWORD *)(v1 + 112);
  if (v6)
  {
    v7 = v6 == 32;
    v8 = 0x7A00000000000000;
    if (!v7)
      v8 = 0x7C00000000000000;
    v9 = (unint64_t *)(v1 + 56);
    do
    {
      v10 = __ldxr(v9);
      v11 = __CFADD__(v10, v8);
      v12 = v10 + v8;
      if (v11)
      {
        __clrex();
        goto LABEL_17;
      }
    }
    while (__stxr(v12, v9));
    *(_DWORD *)(v1 + 112) -= 32;
    v13 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    do
      v14 = __ldxr(v2);
    while (__stlxr(0, v2));
    if (v14 != v13)
    {
      result = _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)v2, v14);
      if ((v14 & 2) != 0 && (*(_QWORD *)(StatusReg + 200) & 0xF0000) == 0)
        *(_QWORD *)(StatusReg + 200) = *(_QWORD *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
    }
  }
  else
  {
LABEL_17:
    v15 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    do
      v16 = __ldxr(v2);
    while (__stlxr(0, v2));
    if (v16 != v15)
    {
      v17 = (uint64_t)v2;
      v18 = v16;
      _dispatch_unfair_lock_unlock_slow_VARIANT_mp(v17, v16);
      if ((v18 & 2) != 0 && (*(_QWORD *)(StatusReg + 200) & 0xF0000) == 0)
        *(_QWORD *)(StatusReg + 200) = *(_QWORD *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
    }
    return _dispatch_queue_resume_VARIANT_mp(v1, 0);
  }
  return result;
}

uint64_t _dispatch_lane_resume_activate(uint64_t a1)
{
  void (*v2)(uint64_t);

  v2 = *(void (**)(uint64_t))(*(_QWORD *)a1 + 72);
  if (v2)
    v2(a1);
  return _dispatch_queue_resume_VARIANT_mp(a1, 2);
}

__objc2_class *dispatch_queue_get_label_VARIANT_mp(__objc2_class **a1)
{
  __objc2_class **v2;

  if (!a1)
  {
    v2 = *(__objc2_class ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160);
    if (v2)
      a1 = v2;
    else
      a1 = &off_1ECCEA100;
  }
  if (a1[9])
    return a1[9];
  else
    return (__objc2_class *)&unk_18A069831;
}

uint64_t dispatch_queue_get_qos_class_VARIANT_mp(uint64_t a1, int *a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = *(unsigned int *)(a1 + 84);
  v3 = (v2 >> 8) & 0xF;
  if (a2)
  {
    if ((v2 & 0xF00) != 0)
      v4 = (char)v2 + 1;
    else
      v4 = 0;
    if (!(_DWORD)v3)
      v4 = 0;
    *a2 = v4;
  }
  v5 = v3 - 1;
  if (v5 > 5)
    return 0;
  else
    return dword_18A06E604[v5];
}

unint64_t *dispatch_queue_set_width_VARIANT_mp(unint64_t *a1, uint64_t a2)
{
  if (*(_QWORD *)(*a1 + 40) != 17)
    dispatch_queue_set_width_VARIANT_mp_cold_2(*(_QWORD *)(*a1 + 40));
  if (*(_QWORD *)(*a1 + 40) != 529)
    dispatch_queue_set_width_VARIANT_mp_cold_1(*(_QWORD *)(*a1 + 40));
  if ((a2 & 0x80000000) != 0)
    return (unint64_t *)_dispatch_barrier_async_detached_f_VARIANT_mp((uint64_t)a1, a2, (uint64_t)_dispatch_lane_set_width);
  else
    return _dispatch_barrier_trysync_or_async_f_VARIANT_mp(a1, a2, (uint64_t (*)(void))_dispatch_lane_set_width, 1);
}

unint64_t _dispatch_lane_set_width(int a1)
{
  unint64_t StatusReg;
  uint64_t v2;
  int v3;
  unsigned int *v4;
  unsigned int v5;
  int v7;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v2 = *(_QWORD *)(StatusReg + 160);
  if (a1 < 0)
  {
    v7 = (*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF;
    if (a1 == -1)
    {
      if (!v7 || (a1 = pthread_qos_max_parallelism(), a1 <= 0))
        a1 = MEMORY[0xFFFFFC036];
      if (a1 >= MEMORY[0xFFFFFC034])
        a1 = MEMORY[0xFFFFFC034];
    }
    else if (a1 == -2)
    {
      if (!v7 || (a1 = pthread_qos_max_parallelism(), a1 <= 0))
        a1 = MEMORY[0xFFFFFC035];
    }
    else if (!v7 || (a1 = pthread_qos_max_parallelism(), a1 <= 0))
    {
      a1 = MEMORY[0xFFFFFC036];
    }
  }
  else if (a1 <= 1)
  {
    a1 = 1;
  }
  if (a1 >= 0xFFE)
    v3 = 4094;
  else
    v3 = a1;
  v4 = (unsigned int *)(v2 + 80);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 & 0xFFFF0000 | v3, v4));
  return _dispatch_lane_inherit_wlh_from_target(v2, *(unsigned int **)(v2 + 24));
}

unint64_t *_dispatch_lane_set_target_queue_VARIANT_mp(unint64_t *a1, char *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unsigned int *v6;
  int v7;
  unint64_t *v8;
  unsigned int *v9;
  unsigned int *v10;
  int v11;
  uint64_t v13;
  int v14;
  unsigned int *v15;
  int v16;
  const char *v17;
  char *v18;

  if (!a2)
  {
    v3 = 1152;
    if (*((_WORD *)a1 + 40) == 1)
      v3 = 1280;
    a2 = (char *)&_dispatch_root_queues + v3;
  }
  v4 = a1 + 7;
  while (1)
  {
    v5 = __ldxr(v4);
    if ((~v5 & 0x180000000000000) != 0)
      break;
    if (!__stxr(v5 + 0x400000000000000, v4))
    {
      if ((v5 & 0x200000000000000) != 0)
        _dispatch_lane_set_target_queue_VARIANT_mp_cold_3();
      if (*((_DWORD *)a2 + 2) != 0x7FFFFFFF)
      {
        v6 = (unsigned int *)(a2 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
        if (v7 <= 0)
          dispatch_set_target_queue_VARIANT_mp_cold_2();
      }
      v8 = a1 + 3;
      do
        v9 = (unsigned int *)__ldxr(v8);
      while (__stlxr((unint64_t)a2, v8));
      if (v9)
      {
        if (v9[2] != 0x7FFFFFFF)
        {
          v10 = v9 + 2;
          do
            v11 = __ldxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (v11 <= 1)
          {
            if (v11 != 1)
              _os_object_allows_weak_reference_VARIANT_mp_cold_1();
            _os_object_dispose(v9, a2);
          }
        }
      }
      return (unint64_t *)_dispatch_queue_resume_VARIANT_mp((uint64_t)a1, 0);
    }
  }
  __clrex();
  if ((a1[10] & 0x400000) == 0)
  {
    if ((a1[10] & 0x100000) == 0)
      _dispatch_lane_set_target_queue_VARIANT_mp_cold_4();
    _dispatch_lane_set_target_queue_VARIANT_mp_cold_5();
  }
  v13 = *(_QWORD *)(*a1 + 40);
  v14 = *(_QWORD *)(*a1 + 40);
  if (v14 == 17)
  {
    if ((a1[10] & 0x100000) == 0)
      goto LABEL_24;
    v18 = a2;
    v17 = "Changing the target of a queue already targeted by other dispatch objects";
  }
  else
  {
    v18 = a2;
    if (v14 != 19)
      _dispatch_lane_set_target_queue_VARIANT_mp_cold_6(v13);
    if (MEMORY[0xFFFFFC100])
      kdebug_trace();
    v17 = "Changing the target of a source after it has been activated";
  }
  _dispatch_bug_deprecated(v17);
  a2 = v18;
LABEL_24:
  if (*((_DWORD *)a2 + 2) != 0x7FFFFFFF)
  {
    v15 = (unsigned int *)(a2 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    if (v16 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  return _dispatch_barrier_trysync_or_async_f_VARIANT_mp(a1, (uint64_t)a2, (uint64_t (*)(void))_dispatch_lane_legacy_set_target_queue, 1);
}

void *_dispatch_lane_legacy_set_target_queue(unint64_t a1)
{
  unint64_t StatusReg;
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  const char *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v10;
  unsigned int v11;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_QWORD *)(StatusReg + 160);
  v4 = *(void **)(v3 + 24);
  if ((*(_DWORD *)(v3 + 80) & 0x100000) != 0)
    _dispatch_lane_legacy_set_target_queue_cold_2();
  v5 = (unsigned int *)_dispatch_queue_priority_inherit_from_target(v3, a1);
  _dispatch_lane_inherit_wlh_from_target(v3, v5);
  v7 = (unsigned int *)(v3 + 100);
  v8 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v7))
  {
    if (!__stxr(v8, v7))
      goto LABEL_8;
  }
  __clrex();
  _dispatch_unfair_lock_lock_slow_VARIANT_mp(v3 + 100);
LABEL_8:
  if ((*(_DWORD *)(v3 + 80) & 0x400000) == 0)
    _dispatch_lane_set_target_queue_VARIANT_mp_cold_4();
  *(_QWORD *)(v3 + 24) = v5;
  v10 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    v11 = __ldxr(v7);
  while (__stlxr(0, v7));
  if (v11 != v10)
  {
    _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)v7, v11);
    if ((v11 & 2) != 0 && (*(_QWORD *)(StatusReg + 200) & 0xF0000) == 0)
      *(_QWORD *)(StatusReg + 200) = *(_QWORD *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
  }
  return _os_object_release_internal_VARIANT_mp(v4, v6);
}

uint64_t _dispatch_return_to_kernel()
{
  unint64_t StatusReg;
  uint64_t v1;
  uint64_t result;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v1 = *(_QWORD *)(StatusReg + 232);
  if (v1 && *(_QWORD *)(v1 + 24) != -4)
    return _dispatch_event_loop_drain_VARIANT_mp(1);
  *(_QWORD *)(StatusReg + 40) = 0;
  return result;
}

BOOL dispatch_swift_job_should_yield_VARIANT_mp()
{
  return *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 960) != 0;
}

unint64_t _dispatch_lane_serial_drain_VARIANT_mp(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t StatusReg;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  void (**v15)(uint64_t);
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unint64_t result;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  BOOL v32;
  signed int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v42;
  uint64_t v44;
  unint64_t *v45;
  __int128 v46;

  v6 = *(_QWORD *)(a1 + 24);
  v7 = (unint64_t *)(a1 + 48);
  if (!*(_QWORD *)(a1 + 48))
    return 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v46 = *(_OWORD *)(StatusReg + 160);
  *(_QWORD *)(StatusReg + 160) = a1;
  *(_QWORD *)(StatusReg + 168) = &v46;
  v45 = (unint64_t *)(a1 + 104);
  v11 = *(_QWORD *)(a1 + 104);
  if (!v11)
    v11 = _dispatch_wait_for_enqueuer(v45);
  v42 = (_OWORD *)(StatusReg + 160);
  if (!(*(_QWORD *)(a1 + 56) >> 55))
  {
    v44 = v6;
    while (v6 == *(_QWORD *)(a1 + 24))
    {
      if (*(_QWORD *)v11 <= 0xFFFuLL && (a3 & 0x80000) == 0 && (*(_QWORD *)v11 & 1) != 0)
      {
        v40 = a2;
        *(_QWORD *)(a2 + 8) = v11;
        if ((a3 & 8) == 0)
          goto LABEL_96;
        qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Deferred continuation on source, mach channel or mgr";
        __break(1u);
        goto LABEL_105;
      }
      v12 = *(_QWORD *)(v11 + 16);
      *v45 = v12;
      if (!v12)
      {
        v13 = (unint64_t *)(v11 + 16);
        while (1)
        {
          v14 = __ldxr(v7);
          if (v14 != v11)
            break;
          if (!__stlxr(0, v7))
            goto LABEL_18;
        }
        __clrex();
        v12 = *v13;
        if (!*v13)
          v12 = _dispatch_wait_for_enqueuer(v13);
        *v45 = v12;
      }
LABEL_18:
      v15 = *(void (***)(uint64_t))(StatusReg + 192);
      if (v15)
        (*v15)(a1);
      v16 = *(_QWORD *)v11;
      if (*(_QWORD *)v11 >= 0x1000uLL)
      {
        if (*(_QWORD *)(v16 + 40) == 1)
          (*(void (**)(uint64_t, _QWORD, _QWORD))(v16 + 48))(v11, 0, (a3 >> 21) & 1);
        else
          (*(void (**)(uint64_t, uint64_t, _QWORD))(v16 + 64))(v11, a2, a3 & 0xFFFD0000);
        goto LABEL_74;
      }
      if ((a3 & 0x1000000) != 0)
      {
        v17 = (void *)MEMORY[0x18D766D94]();
        v16 = *(_QWORD *)v11;
      }
      else
      {
        v17 = 0;
      }
      v18 = *(_QWORD *)(v11 + 24);
      if ((v16 & 4) != 0)
        *(_QWORD *)(v11 + 24) = -1;
      v19 = *(_QWORD *)(v11 + 8);
      if (v19 == -1)
      {
        v22 = 0;
      }
      else
      {
        v20 = *(_QWORD *)(StatusReg + 200);
        if (((v20 >> 8) & 0xF) != 0)
          v21 = 256 << ((BYTE1(v20) & 0xFu) - 1);
        else
          v21 = 0;
        v22 = v21 & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(StatusReg + 200);
        v23 = v19 & 0xFFFFFF;
        if ((v19 & 0xFFFFFF) != 0)
        {
          v24 = v21 & 0xFFFFFF00;
          if ((v20 & 0x44000000) == 0 && (*(_QWORD *)(v11 + 8) & 0x10000000) == 0)
            v26 = v22;
          else
            v26 = v19 & 0xFFFFFF;
          if (v23 >= v24)
            v22 = v26;
        }
        else if ((unsigned __int16)v20 >> 12)
        {
          v22 = (256 << (((unsigned __int16)v20 >> 12) - 1)) | 0xFF;
        }
      }
      v27 = v16 & 4;
      result = v22 & 0xFFFFFFFF02FFFFFFLL;
      v29 = *(_QWORD *)(StatusReg + 32);
      if ((v29 & 0x1000000) != 0)
      {
        if (result)
          goto LABEL_63;
        result = v29 & 0xFFFFFFFFFEFFFFFFLL;
      }
      else if (result == (v29 & 0xFFFFFFFF77FFFFFFLL))
      {
        goto LABEL_46;
      }
      if (result)
        goto LABEL_63;
LABEL_46:
      if (v18 == -1)
        goto LABEL_64;
      if (*(_QWORD *)(StatusReg + 224) != v18)
      {
        result = 0;
LABEL_63:
        result = _dispatch_set_priority_and_voucher_slow_VARIANT_mp(result, v18, v27 | 2);
LABEL_64:
        if ((v16 & 4) == 0)
          goto LABEL_70;
        goto LABEL_65;
      }
      if ((v16 & 4) == 0 || !v18)
        goto LABEL_64;
      v30 = (unsigned int *)(v18 + 12);
      do
      {
        v31 = __ldxr(v30);
        v32 = __OFSUB__(v31, 1);
        v33 = v31 - 1;
      }
      while (__stxr(v33, v30));
      if ((v33 < 0) ^ v32 | (v33 == 0))
      {
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
        __break(1u);
        return 0;
      }
LABEL_65:
      v34 = *(_QWORD *)(StatusReg + 176);
      if (v34)
        v35 = *(_DWORD *)(v34 + 8) + 1;
      else
        v35 = 1;
      v27 = v11;
      if (v35 <= _dispatch_continuation_cache_limit)
      {
        v27 = 0;
        *(_QWORD *)(v11 + 16) = v34;
        *(_DWORD *)(v11 + 8) = v35;
        *(_QWORD *)(StatusReg + 176) = v11;
      }
LABEL_70:
      if ((v16 & 8) != 0)
      {
        v37 = *(_QWORD *)(v11 + 48);
        v38 = *(_QWORD *)(*(_QWORD *)v37 + 40);
        if (v38 != 514)
        {
          qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected object type";
          qword_1EDF52D38 = v38;
          __break(1u);
          return result;
        }
        _dispatch_client_callout(*(_QWORD *)(v11 + 40), *(uint64_t (**)(void))(v11 + 32));
        dispatch_group_leave_VARIANT_mp(v37);
        if (!v27)
          goto LABEL_72;
      }
      else
      {
        _dispatch_client_callout(*(_QWORD *)(v11 + 40), *(uint64_t (**)(void))(v11 + 32));
        if (!v27)
          goto LABEL_72;
      }
      _dispatch_continuation_free_to_cache_limit_VARIANT_mp(v27);
LABEL_72:
      v6 = v44;
      if (v17)
        objc_autoreleasePoolPop(v17);
LABEL_74:
      if (v15)
        v15[1](a1);
      v11 = v12;
      if (!v12)
      {
        if (!*v7)
        {
          v40 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) + 0x40000000000000;
          goto LABEL_99;
        }
        v11 = *v45;
        if (!*v45)
          v11 = _dispatch_wait_for_enqueuer(v45);
      }
      if (*(_QWORD *)(StatusReg + 40))
        _dispatch_return_to_kernel();
      if (*(_WORD *)(a1 + 80) == 1 && ((a3 & 0x4000000) != 0 || (*(_BYTE *)(StatusReg + 960) & 1) == 0))
      {
        if ((a3 & 0x100000) == 0
          || (v36 = *(_QWORD *)(StatusReg + 216),
              LODWORD(v4) = *(_DWORD *)(v36 + 60) & 7,
              v4 <= *(unsigned __int8 *)(v36 + 100)))
        {
          if (!(*(_QWORD *)(a1 + 56) >> 55))
            continue;
        }
      }
      break;
    }
  }
  v39 = *(unsigned __int16 *)(a1 + 80);
  v40 = (v39 << 41) + 0x40000000000000;
  if (!v11)
  {
LABEL_99:
    result = 0;
    *a4 = *a4 & 0x4000000001 | v40;
    *v42 = v46;
    return result;
  }
  v5 = a4;
  if (v39 >= 2)
  {
    v4 = *(_QWORD *)v11;
    if (*(_QWORD *)v11 < 0x1000uLL)
    {
LABEL_105:
      if ((v4 & 2) == 0)
        goto LABEL_94;
    }
    else if ((*(_QWORD *)(v4 + 40) & 0xF0) != 0x10 || (*(_DWORD *)(v11 + 80) & 0x80000) == 0)
    {
      goto LABEL_94;
    }
    v40 = 0x40010000000000;
  }
LABEL_94:
  *v5 = *v5 & 0x4000000001 | v40;
LABEL_96:
  *v42 = v46;
  return *(_QWORD *)(a1 + 24);
}

unsigned int *_dispatch_queue_invoke_finish_VARIANT_mp(unint64_t *a1, uint64_t a2, __objc2_class **a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t StatusReg;
  unsigned int v16;

  v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(v5 + 106) |= 0x80u;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    if (v6)
      return _dispatch_workloop_drain_barrier_waiter((uint64_t)a1, v5, v6, 1, a4 & 0x4000000001);
    else
      return _dispatch_lane_drain_barrier_waiter((uint64_t)a1, v5, 1, a4 & 0x4000000001);
  }
  else
  {
    if (a3 == &_dispatch_mgr_q)
      v8 = 0x4000000000;
    else
      v8 = 1;
    v9 = a1 + 7;
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - a4;
      if (v11 & 0x4000000001 | (v11 >> 53))
        v12 = 0;
      else
        v12 = v8;
      v13 = v11 & 0xFFFFFF7700000001 | v12 | 0x8000000000;
    }
    while (__stlxr(v13, v9));
    if ((~v11 & 0x1800000000) == 0)
    {
      v14 = HIDWORD(v11) & 7;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v16 = *(_DWORD *)(StatusReg + 200);
      if ((HIWORD(v16) & 0xF) < v14)
        *(_QWORD *)(StatusReg + 200) = v16 & 0xFFF0FFFF | ((_DWORD)v14 << 16);
    }
    if (((v13 ^ v11) & v8) != 0)
    {
      if ((v11 & 0x2000000000) != 0)
        return (unsigned int *)_dispatch_event_loop_poke_VARIANT_mp(a1, v13, 1);
      else
        return (unsigned int *)((uint64_t (*)(__objc2_class **, unint64_t *, unint64_t))(*a3)[2].superclass)(a3, a1, HIDWORD(v11) & 7);
    }
    else
    {
      return (unsigned int *)_os_object_release_internal_n_VARIANT_mp(a1, (const char *)2);
    }
  }
}

unsigned int *_dispatch_workloop_drain_barrier_waiter(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  BOOL v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;

  v8 = *(_DWORD *)(a2 + 100) & 0xFFFFFFFC;
  v9 = *(_QWORD *)(a2 + 16);
  v10 = a1 + 8 * (a3 - 1);
  *(_QWORD *)(v10 + 104) = v9;
  if (!v9)
  {
    v11 = (uint64_t *)(a2 + 16);
    v12 = (uint64_t *)(v10 + 104);
    v13 = (unint64_t *)(a1 + 8 * (a3 - 1) + 152);
    while (1)
    {
      v14 = __ldxr(v13);
      if (v14 != a2)
        break;
      if (!__stlxr(0, v13))
        goto LABEL_9;
    }
    __clrex();
    v9 = *v11;
    if (!*v11)
    {
      v25 = a5;
      v9 = _dispatch_wait_for_enqueuer((unint64_t *)(a2 + 16));
      a5 = v25;
    }
    *v12 = v9;
  }
LABEL_9:
  v15 = v9 != 0;
  v16 = (unint64_t *)(a1 + 56);
  v17 = v8 - a5;
LABEL_10:
  if (v15)
  {
    v15 = 1;
  }
  else
  {
    v18 = 0;
    do
    {
      v15 = v18 != -48;
      if (v18 == -48)
        break;
      v19 = *(_QWORD *)(a1 + 192 + v18);
      v18 -= 8;
    }
    while (!v19);
  }
  do
  {
    v20 = __ldxr(v16);
    if ((v20 & 0x2000000000) != 0)
    {
      if ((v20 & 2) != 0 && (v20 & 0x800000001) != 0)
      {
        _dispatch_event_loop_ensure_ownership_VARIANT_mp(a1);
        do
          v22 = __ldxr(v16);
        while (__stxr(v22 & 0xFFFFFFF7FFFFFFFDLL, v16));
        __clrex();
        goto LABEL_10;
      }
      v21 = v20 & 0xFFFFFF7700000001 | v8;
      if (!v15)
      {
        if ((v20 & 0x8000000000) != 0)
        {
          __clrex();
          do
            v23 = __ldaxr(v16);
          while (__stxr(v23 ^ 0x8000000000, v16));
          goto LABEL_10;
        }
        v21 = v20 & 0xFFFFFF7000000000 | v8 & 0xFFFFFF70FFFFFFFCLL;
      }
    }
    else
    {
      v21 = v17 + (v20 & 0xFFFFFF7700000001);
    }
  }
  while (__stlxr(v21, v16));
  return _dispatch_barrier_waiter_redirect_or_wake(a1, a2, a4, v20, v21);
}

unsigned int *_dispatch_lane_drain_barrier_waiter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v7 = *(_DWORD *)(a2 + 100) & 0xFFFFFFFC;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 104) = v8;
  if (!v8)
  {
    v9 = (unint64_t *)(a2 + 16);
    v10 = (unint64_t *)(a1 + 48);
    while (1)
    {
      v11 = __ldxr(v10);
      if (v11 != a2)
        break;
      if (!__stlxr(0, v10))
        goto LABEL_9;
    }
    __clrex();
    v8 = *v9;
    if (!*v9)
    {
      v19 = a4;
      v20 = _dispatch_wait_for_enqueuer(v9);
      a4 = v19;
      v8 = v20;
    }
    *(_QWORD *)(a1 + 104) = v8;
  }
LABEL_9:
  v12 = (unint64_t *)(a1 + 56);
  v13 = v7 - a4;
  do
  {
    while (1)
    {
      while (1)
      {
        v14 = __ldxr(v12);
        if ((v14 & 0x2000000000) == 0)
        {
          v15 = v13 + (v14 & 0xFFFFFF7700000001);
          goto LABEL_17;
        }
        if ((v14 & 2) == 0 || (v14 & 0x800000001) == 0)
          break;
        _dispatch_event_loop_ensure_ownership_VARIANT_mp(a1);
        do
          v16 = __ldxr(v12);
        while (__stxr(v16 & 0xFFFFFFF7FFFFFFFDLL, v12));
        __clrex();
      }
      v15 = v14 & 0xFFFFFF7700000001 | v7;
      if (v8)
        break;
      if ((v14 & 0x8000000000) == 0)
      {
        v15 = v14 & 0xFFFFFF7000000000 | v7 & 0xFFFFFF70FFFFFFFCLL;
        break;
      }
      __clrex();
      do
        v17 = __ldaxr(v12);
      while (__stxr(v17 ^ 0x8000000000, v12));
      v8 = *(_QWORD *)(a1 + 104);
    }
LABEL_17:
    ;
  }
  while (__stlxr(v15, v12));
  return _dispatch_barrier_waiter_redirect_or_wake(a1, a2, a3, v14, v15);
}

unint64_t _dispatch_lane_activate_VARIANT_mp(uint64_t a1)
{
  unint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v5;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_DWORD *)(a1 + 84);
  v4 = (v3 >> 8) & 0xF;
  if ((unsigned __int16)v3 >> 12 <= v4 || (v3 & 0x40000000) == 0 && v4)
    *(_DWORD *)(a1 + 84) = v3 & 0xFBFF0FFF;
  v5 = (unsigned int *)_dispatch_queue_priority_inherit_from_target(a1, v2);
  return _dispatch_lane_inherit_wlh_from_target(a1, v5);
}

__objc2_class **_dispatch_queue_priority_inherit_from_target(uint64_t a1, unint64_t a2)
{
  unsigned int v2;
  _BOOL4 v4;
  unsigned int v5;

  v2 = *(_DWORD *)(a1 + 84);
  v4 = a2 >= (unint64_t)&_dispatch_root_queues && a2 < (unint64_t)&_dispatch_queue_serial_numbers;
  if ((v2 & 0x20000000) != 0 || (v2 & 0x44000FFF) == 0)
  {
    if (v4)
    {
      v2 = *(_DWORD *)(a2 + 84) | 0x20000000;
    }
    else if ((v2 & 0x20000000) != 0)
    {
      v2 &= 0xFBFF0FFF;
    }
    *(_DWORD *)(a1 + 84) = v2;
  }
  else if (v4)
  {
    if (((v2 >> 8) & 0xF) != 0)
      v5 = (v2 >> 8) & 0xF;
    else
      v5 = 4;
    if (v5 - 7 <= 0xFFFFFFF9)
      _dispatch_queue_priority_inherit_from_target_cold_1(v5);
    return &_dispatch_root_queues + 16 * (unint64_t)(3 * v5 + (v2 >> 31) - 3);
  }
  return (__objc2_class **)a2;
}

unint64_t _dispatch_lane_inherit_wlh_from_target(uint64_t a1, unsigned int *a2)
{
  char v4;
  uint64_t v5;
  BOOL v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t result;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int *v13;
  unsigned int v14;
  _BYTE *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;

  if ((*(_BYTE *)(*(_QWORD *)a2 + 42) & 1) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)a1 + 40) == 133137
      || (*(_QWORD *)(*(_QWORD *)a1 + 40) != 19
       || (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 29) & 0x20) != 0)
      && *(_WORD *)(a1 + 80) == 1
      && (a2 >= (unsigned int *)&_dispatch_root_queues
        ? (v6 = &_dispatch_queue_serial_numbers > (unint64_t *)a2)
        : (v6 = 0),
          v6))
    {
      v5 = 0x2000000000;
      v4 = 1;
    }
    else
    {
      v4 = 0;
      v5 = 0x1000000000;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v7 = (unint64_t *)(a1 + 56);
  while (1)
  {
    v8 = __ldxr(v7);
    result = v8 & 0xFFFFFFCFFFFFFFFFLL | v5;
    if (v8 == result)
      break;
    if (!__stxr(result, v7))
      goto LABEL_16;
  }
  __clrex();
  result = v8;
LABEL_16:
  if ((v8 & 0x2000000000) == 0)
    v4 = 1;
  if ((v4 & 1) == 0)
  {
    v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
    if (v10)
    {
      if (*(_QWORD *)(v10 + 24) == a1)
        result = _dispatch_event_loop_leave_immediate_VARIANT_mp(result);
    }
  }
  if ((*(_QWORD *)(*(_QWORD *)a2 + 40) & 0x10000) == 0)
  {
    if (*(_QWORD *)(*(_QWORD *)a2 + 40) == 18)
    {
      v11 = *((_QWORD *)a2 + 3);
      if (v11 < (unint64_t)&_dispatch_root_queues || v11 >= (unint64_t)&_dispatch_queue_serial_numbers)
      {
        v15 = (_BYTE *)*((_QWORD *)a2 + 25);
        v12 = 0x1000000;
        if (v15)
        {
          if ((*v15 & 0x40) != 0)
            v12 = 17039360;
          else
            v12 = 0x1000000;
        }
      }
      else
      {
        v12 = 0;
      }
      v16 = a2 + 20;
      while (1)
      {
        v17 = __ldxr(v16);
        v18 = v17 & 0xFFAFFFFF | 0x100000;
        if (v18 == v17)
          break;
        if (!__stxr(v18, v16))
          goto LABEL_38;
      }
      __clrex();
      if (!v12)
        return result;
LABEL_39:
      v19 = (unsigned int *)(a1 + 80);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 | v12, v19));
      return result;
    }
    v13 = a2 + 20;
    v12 = a2[20] & 0x1000000;
    if (v12)
      v12 |= *v13 & 0x40000;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 | 0x100000, v13));
LABEL_38:
    if (v12)
      goto LABEL_39;
  }
  return result;
}

unsigned int *_dispatch_lane_invoke_VARIANT_mp(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  __objc2_class **v19;
  __objc2_class ***v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v29;
  unint64_t StatusReg;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  __int128 v51;
  uint64_t v52;

  v52 = 0;
  if ((a3 & 3) == 0)
    *(_QWORD *)(a1 + 16) = -1985229329;
  if ((a3 & 2) != 0)
  {
    v52 = 0x40020000000001;
    v6 = a3 & 0x40000;
    goto LABEL_5;
  }
  v29 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) - 0x20000000000;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v31 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
  v6 = a3 & 0x40000;
  if ((a3 & 0x40000) != 0)
    v32 = 0x4000000000;
  else
    v32 = 1;
  if ((a3 & 0x40001) == 0x40000)
    v33 = 0xFFE00000FFFFFFFCLL;
  else
    v33 = 0xFFE00040FFFFFFFCLL;
  v34 = *(_DWORD *)(StatusReg + 200);
  v35 = (v34 >> 8) & 0xF;
  v36 = (unsigned __int16)v34 >> 12;
  v37 = HIWORD(v34) & 0xF;
  if (v35 <= v36)
    v35 = v36;
  if (v35 > v37)
    v37 = v35;
  v38 = (unint64_t *)(a1 + 56);
  do
  {
    while (1)
    {
      v39 = __ldaxr(v38);
      if ((v39 & v33) != 0)
        break;
      if ((v39 & 0x1000000000) == 0 || (v40 = HIDWORD(v39) & 7, v40 <= v37))
      {
        v41 = (v39 >> 40) & 1;
        if (!((v29 + v39) >> 53))
          LODWORD(v41) = 1;
        if ((_DWORD)v41)
          v42 = 0x60000000000000;
        else
          v42 = 0x20000000000000;
        v43 = v31 | v39 & 0x7700000001 | v42;
        goto LABEL_77;
      }
      __clrex();
      v48 = v31;
      v50 = v29;
      _pthread_workqueue_override_start_direct();
      v31 = v48;
      v29 = v50;
      v44 = *(_DWORD *)(StatusReg + 200);
      v37 = v40;
      if ((HIWORD(v44) & 0xF) < v40)
      {
        *(_QWORD *)(StatusReg + 200) = v44 & 0xFFF0FFFF | ((_DWORD)v40 << 16);
        v37 = v40;
      }
    }
    if ((a3 & 1) != 0)
    {
      __clrex();
      return (unsigned int *)_os_object_release_internal_n_VARIANT_mp((void *)a1, (const char *)2);
    }
    v43 = v39 ^ v32;
LABEL_77:
    ;
  }
  while (__stxr(v43, v38));
  if ((v39 & v33) != 0)
    return (unsigned int *)_os_object_release_internal_n_VARIANT_mp((void *)a1, (const char *)2);
  v45 = 0x60000000000000;
  if ((a3 & 1) == 0)
    v45 = v32 | 0x60000000000000;
  v52 = (v43 & v45) - (v39 & 0x3FFE0000000000);
  if (!v52)
    return (unsigned int *)_os_object_release_internal_n_VARIANT_mp((void *)a1, (const char *)2);
LABEL_5:
  if (!v6)
  {
    v7 = *(_DWORD *)(a1 + 84);
    v8 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v9 = *(_QWORD *)(v8 + 200);
    if ((_DWORD)v9)
    {
      v10 = v7 & 0xFFF;
      if ((v7 & 0xFFF) != 0)
      {
        if (((unsigned __int16)v9 & 0xFFFu) > v10)
          v10 = v9 & 0xFFF;
        if ((unsigned __int16)v7 >> 12 <= v10 >> 8)
          v11 = 0x40000000;
        else
          v11 = 1140912128;
        v12 = v9 & 0x880F0000 | v10 | v11 & v7;
      }
      else
      {
        v13 = v9 | 0x40000000;
        if ((v9 & 0xFFF) == 0)
          v13 = *(_QWORD *)(v8 + 200);
        v14 = (unsigned __int16)v7 >> 12;
        v12 = v13 & 0xFFFF0FFF | v7 & 0x400F000;
        if (v14 <= ((v13 >> 8) & 0xF))
          v12 = v13;
      }
    }
    else
    {
      v12 = v7 & 0xFFF0FFFF;
    }
    *(_QWORD *)(v8 + 200) = v12;
    v49 = v9 & 0xFFF0FFFF;
    if ((a3 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_21;
  }
  v49 = 0;
  if ((a3 & 0x100000) != 0)
  {
LABEL_21:
    if ((*(_DWORD *)(a1 + 80) & 0x400000) != 0)
    {
      v46 = (unsigned int *)(a1 + 80);
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 & 0xFFBFFFFF, v46));
    }
  }
LABEL_22:
  if (((*(_DWORD *)(a1 + 80) << 8) & 0x3000000) != 0)
    v15 = (*(_DWORD *)(a1 + 80) << 8) & 0x3000000 | a3 & 0xFCFFFFFF;
  else
    v15 = a3;
  v16 = v15 & 0x1000002;
  v17 = (unint64_t *)(a1 + 56);
  v18 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_26:
  if (v16 == 2)
    _dispatch_last_resort_autorelease_pool_push(a2);
  v19 = *(__objc2_class ***)(a1 + 24);
  v20 = (__objc2_class ***)(v18 + 160);
  if (*(__objc2_class ***)(v18 + 160) == v19)
  {
    if (*(_WORD *)(a1 + 80) == 1)
      v21 = _dispatch_lane_serial_drain_VARIANT_mp(a1, a2, v15, &v52);
    else
      _dispatch_lane_concurrent_drain(a1, a2, v15, &v52);
    v19 = (__objc2_class **)v21;
  }
  if (v16 == 2)
  {
    v51 = *(_OWORD *)v20;
    *(_QWORD *)(v18 + 160) = a1;
    *(_QWORD *)(v18 + 168) = &v51;
    _dispatch_last_resort_autorelease_pool_pop(a2);
    *(_OWORD *)v20 = v51;
  }
  if ((unint64_t)v19 + 1 <= 1)
  {
    v22 = v52;
    while (1)
    {
      v23 = __ldxr(v17);
      v24 = (v23 - v22) & 0xFFFFFFF700000001;
      if (!(v23 >> 55))
      {
        if ((v23 & 0x8000000000) != 0)
        {
          __clrex();
          do
            v25 = __ldaxr(v17);
          while (__stxr(v25 ^ 0x8000000000, v17));
          if ((a3 & 1) != 0)
            goto LABEL_26;
          v19 = *v20;
          if (((uint64_t)(**v20)[1].isa & 0x10000) != 0)
            goto LABEL_26;
          break;
        }
        if (v19)
          v24 = (v23 - v22) & 0xFFFFFF7700000001 | 0x8000000000;
        else
          v24 = (v23 - v22) & 0xFFFFFFF000000001;
      }
      if (!__stlxr(v24, v17))
      {
        if ((~v23 & 0x1800000000) == 0)
        {
          v26 = HIDWORD(v23) & 7;
          v27 = *(_DWORD *)(v18 + 200);
          if ((HIWORD(v27) & 0xF) < v26)
            *(_QWORD *)(v18 + 200) = v27 & 0xFFF0FFFF | ((_DWORD)v26 << 16);
        }
        v19 = 0;
        v52 = 0;
        break;
      }
    }
  }
  if ((v15 & 0x40000) == 0)
    *(_QWORD *)(v18 + 200) = *(_QWORD *)(v18 + 200) & 0xF0000 | v49;
  if (v19)
    return _dispatch_queue_invoke_finish_VARIANT_mp((unint64_t *)a1, a2, v19, v52);
  else
    return (unsigned int *)_os_object_release_internal_n_VARIANT_mp((void *)a1, (const char *)2);
}

uint64_t dispatch_workloop_copy_current_VARIANT_mp()
{
  uint64_t v0;
  BOOL v1;

  v0 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 216);
  v1 = v0 == -4 || v0 == 0;
  if (v1 || *(_BYTE *)(*(_QWORD *)v0 + 40) != 18)
    return 0;
  _os_object_retain_with_resurrect_VARIANT_mp(v0);
  return v0;
}

BOOL dispatch_workloop_is_current_VARIANT_mp(uint64_t a1)
{
  return *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 216) == a1;
}

BOOL _dispatch_workloop_uses_bound_thread_VARIANT_mp(uint64_t a1)
{
  _BYTE *v1;

  v1 = *(_BYTE **)(a1 + 200);
  return v1 && (*v1 & 0x40) != 0;
}

BOOL _dispatch_workloop_should_yield_4NW_VARIANT_mp()
{
  uint64_t v0;
  BOOL v1;

  v0 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 216);
  v1 = v0 == -4 || v0 == 0;
  return !v1 && *(_BYTE *)(*(_QWORD *)v0 + 40) == 18 && (*(_DWORD *)(v0 + 60) & 7u) > *(unsigned __int8 *)(v0 + 100);
}

uint64_t dispatch_workloop_create_VARIANT_mp(const char *a1)
{
  return _dispatch_workloop_create(a1, 0);
}

uint64_t _dispatch_workloop_create(const char *a1, uint64_t a2)
{
  int v3;
  const char *v5;
  uint64_t result;
  unint64_t v7;

  v3 = 65537;
  if (a1)
  {
    v5 = _dispatch_strdup_if_mutable(a1);
    if (v5 == a1)
      v3 = 65537;
    else
      v3 = 2162689;
  }
  else
  {
    v5 = 0;
  }
  result = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_workloop, 208);
  if ((a2 & 0x180000000000000) != 0)
  {
    *(_DWORD *)(result + 8) += 2;
    if (*(_BYTE *)(*(_QWORD *)result + 40) == 19)
      ++*(_DWORD *)(result + 8);
  }
  *(_QWORD *)(result + 16) = -1985229329;
  *(_DWORD *)(result + 80) = v3;
  *(_QWORD *)(result + 56) = a2 | 0x1FFE2000000000;
  do
    v7 = __ldxr(&_dispatch_queue_serial_numbers);
  while (__stxr(v7 + 1, &_dispatch_queue_serial_numbers));
  *(_QWORD *)(result + 64) = v7;
  *(_QWORD *)(result + 72) = v5;
  *(_QWORD *)(result + 24) = &off_1ECCEA100;
  if ((a2 & 0x180000000000000) == 0)
    *(_DWORD *)(result + 84) = -2080358400;
  return result;
}

uint64_t dispatch_workloop_create_inactive_VARIANT_mp(const char *a1)
{
  return _dispatch_workloop_create(a1, 0x180000000000000);
}

uint64_t dispatch_workloop_set_autorelease_frequency_VARIANT_mp(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t result;

  v2 = (unsigned int *)(a1 + 80);
  if (a2 == 1)
  {
    while (1)
    {
      v3 = __ldxr(v2);
      v4 = v3 & 0xFFFCFFFF | 0x10000;
      if (v4 == v3)
        break;
      if (!__stxr(v4, v2))
        goto LABEL_7;
    }
  }
  else
  {
    while (1)
    {
      v5 = __ldxr(v2);
      v6 = v5 & 0xFFFCFFFF | 0x20000;
      if (v6 == v5)
        break;
      if (!__stxr(v6, v2))
        goto LABEL_7;
    }
  }
  __clrex();
LABEL_7:
  result = *(_QWORD *)(a1 + 56);
  if ((~result & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_VARIANT_mp_cold_1(result);
  return result;
}

_DWORD *dispatch_workloop_set_scheduler_priority_VARIANT_mp(uint64_t a1, int a2, char a3)
{
  uint64_t v4;
  _DWORD *result;
  unsigned int v8;
  unsigned int v9;

  v4 = *(_QWORD *)(a1 + 56);
  if ((~v4 & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_VARIANT_mp_cold_1(v4);
  result = *(_DWORD **)(a1 + 200);
  if (result)
  {
    if (a2)
      goto LABEL_4;
LABEL_8:
    result[2] = 0;
    v8 = *result & 0xFFFFFFFE;
    if ((a3 & 1) == 0)
      goto LABEL_5;
LABEL_9:
    result[4] = 2;
    v9 = v8 | 2;
    goto LABEL_10;
  }
  result = _dispatch_calloc(1uLL, 0x38uLL);
  *(_QWORD *)(a1 + 200) = result;
  if (!a2)
    goto LABEL_8;
LABEL_4:
  result[2] = a2;
  v8 = *result | 1;
  if ((a3 & 1) != 0)
    goto LABEL_9;
LABEL_5:
  v9 = v8 & 0xFFFFFFFD;
LABEL_10:
  *result = v9;
  return result;
}

uint64_t dispatch_workloop_set_uses_bound_thread_VARIANT_mp(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t result;

  if (_dispatch_workloop_bound_thread_pred != -1)
    dispatch_once_f_VARIANT_mp((unint64_t *)&_dispatch_workloop_bound_thread_pred, 0, (uint64_t (*)(void))_dispatch_workloop_bound_thread_init_once);
  if (!_dispatch_thread_bound_kqwl_enabled)
    return 0xFFFFFFFFLL;
  v2 = *(_QWORD *)(a1 + 56);
  if ((~v2 & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_VARIANT_mp_cold_1(v2);
  v3 = *(_DWORD **)(a1 + 200);
  if (!v3)
  {
    v3 = _dispatch_calloc(1uLL, 0x38uLL);
    *(_QWORD *)(a1 + 200) = v3;
  }
  result = 0;
  *v3 |= 0x40u;
  return result;
}

uint64_t dispatch_workloop_set_os_workgroup_VARIANT_mp(uint64_t a1, const char *a2)
{
  uint64_t v3;
  _QWORD *v5;
  void *v6;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 56);
  if ((~v3 & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_VARIANT_mp_cold_1(v3);
  v5 = *(_QWORD **)(a1 + 200);
  if (!v5)
  {
    v5 = _dispatch_calloc(1uLL, 0x38uLL);
    *(_QWORD *)(a1 + 200) = v5;
  }
  v6 = (void *)v5[4];
  if (v6)
    _os_object_release_VARIANT_mp(v6, a2);
  result = _os_object_retain_VARIANT_mp((uint64_t)a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 200) + 32) = a2;
  return result;
}

_DWORD *dispatch_workloop_set_qos_class_VARIANT_mp(uint64_t a1, int a2, char a3)
{
  return dispatch_workloop_set_qos_class_floor_VARIANT_mp(a1, a2, 0, a3);
}

_BYTE *dispatch_workloop_set_cpupercent_VARIANT_mp(uint64_t a1, char a2, int a3)
{
  uint64_t v4;
  _BYTE *result;
  int v8;

  v4 = *(_QWORD *)(a1 + 56);
  if ((~v4 & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_VARIANT_mp_cold_1(v4);
  result = *(_BYTE **)(a1 + 200);
  if (!result)
  {
    result = _dispatch_calloc(1uLL, 0x38uLL);
    *(_QWORD *)(a1 + 200) = result;
  }
  v8 = *(_DWORD *)result;
  if ((*(_DWORD *)result & 9) == 0)
    dispatch_workloop_set_cpupercent_VARIANT_mp_cold_1();
  result[20] = a2;
  *((_DWORD *)result + 6) = a3;
  *(_DWORD *)result = v8 | 4;
  return result;
}

__n128 _dispatch_workloop_set_observer_hooks_4IOHID_VARIANT_mp(uint64_t a1, __n128 *a2)
{
  uint64_t v3;
  char *v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 56);
  if ((~v3 & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_VARIANT_mp_cold_1(v3);
  v5 = *(char **)(a1 + 200);
  if (!v5)
  {
    v5 = (char *)_dispatch_calloc(1uLL, 0x38uLL);
    *(_QWORD *)(a1 + 200) = v5;
  }
  result = *a2;
  *(__n128 *)(v5 + 40) = *a2;
  **(_DWORD **)(a1 + 200) |= 0x20u;
  return result;
}

void _dispatch_workloop_dispose_VARIANT_mp(_QWORD *obj, char *a2)
{
  uint64_t v3;
  uint64_t i;
  char *v6;
  uint64_t v7;
  void *v8;
  _BYTE *v9;
  int v10;
  void **v11;

  v3 = obj[7];
  if (v3 != 0x1FFE2000000000)
  {
    if ((v3 & 0xFFFFFFFC) == 0)
      _dispatch_workloop_dispose_VARIANT_mp_cold_2(v3);
    _dispatch_workloop_dispose_VARIANT_mp_cold_3(v3);
  }
  for (i = 0; i != 6; ++i)
  {
    v6 = (char *)&obj[i];
    v7 = obj[i + 19];
    if (v7)
      _dispatch_workloop_dispose_VARIANT_mp_cold_1(v7);
    *((_QWORD *)v6 + 19) = 512;
    *((_QWORD *)v6 + 13) = 512;
  }
  v8 = (void *)obj[6];
  if (v8)
  {
    free(v8);
    obj[6] = 0;
  }
  v9 = (_BYTE *)obj[25];
  if (v9)
  {
    if ((*v9 & 0x10) != 0)
    {
      v10 = _pthread_workloop_destroy();
      if (v10)
        _dispatch_bug(4566, v10);
    }
    v11 = (void **)obj[25];
    if (v11)
    {
      if (v11[4])
      {
        _os_object_release_VARIANT_mp(v11[4], a2);
        v11 = (void **)obj[25];
      }
      free(v11);
    }
  }
  _dispatch_queue_dispose(obj, a2);
}

void _dispatch_workloop_activate_VARIANT_mp(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  int *v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const sched_param *v11;
  int sched_priority;
  int v13;
  int v14;
  unsigned int v15;
  unint64_t v16;
  pthread_attr_t v17;
  pthread_attr_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C874D8];
  v2 = (unint64_t *)(a1 + 56);
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 & 0xFEFFFFFFFFFFFFFFLL, v2));
  if ((~v3 & 0x180000000000000) != 0)
    return;
  v4 = *(int **)(a1 + 200);
  if (v4)
  {
    memset(&v17, 0, sizeof(v17));
    pthread_attr_init(&v17);
    v5 = *v4;
    if ((*v4 & 8) != 0)
      *(_DWORD *)(a1 + 84) |= v4[1] | 0x40000000;
    if ((v5 & 1) != 0)
    {
      pthread_attr_setschedparam(&v17, (const sched_param *)v4 + 1);
      *(_QWORD *)(a1 + 24) = &_dispatch_custom_workloop_root_queue;
    }
    v6 = *((_QWORD *)v4 + 4);
    if (v6)
    {
      *(_QWORD *)(a1 + 24) = &_dispatch_custom_workloop_root_queue;
      if (_os_workgroup_get_backing_workinterval_VARIANT_mp(v6))
        pthread_attr_setworkinterval_np();
    }
    v7 = *v4;
    if ((*v4 & 0x40) != 0)
    {
      if (_dispatch_root_queues_pred != -1)
        dispatch_once_f_VARIANT_mp((unint64_t *)&_dispatch_root_queues_pred, 0, _dispatch_root_queues_init_once);
      *(_QWORD *)(a1 + 24) = &_dispatch_custom_workloop_overcommit_root_queue;
      v7 = *v4;
      if ((*v4 & 2) == 0)
      {
LABEL_19:
        if ((v7 & 4) != 0)
          pthread_attr_setcpupercent_np();
        v8 = *(_QWORD *)(a1 + 200);
        if (!v8)
          goto LABEL_46;
        if ((*(_BYTE *)v8 & 0x47) == 0)
        {
          v10 = *(_QWORD *)(v8 + 32);
          if (!v10 || !_os_workgroup_get_backing_workinterval_VARIANT_mp(v10))
            goto LABEL_46;
        }
        v9 = _pthread_workloop_create();
        if (v9 <= 44)
        {
          if (v9)
          {
            if (v9 == 33)
              _dispatch_workloop_activate_VARIANT_mp_cold_1(a1);
          }
          else
          {
            *v4 |= 0x10u;
          }
          goto LABEL_46;
        }
        if (v9 != 45)
        {
          if (v9 == 78)
            _dispatch_workloop_activate_simulator_fallback(a1, (__int128 *)&v17.__sig);
LABEL_46:
          pthread_attr_destroy(&v17);
          goto LABEL_47;
        }
        v11 = *(const sched_param **)(a1 + 200);
        memset(&v18, 0, sizeof(v18));
        pthread_attr_init(&v18);
        sched_priority = v11->sched_priority;
        if ((v11->sched_priority & 1) != 0)
        {
          pthread_attr_setschedparam(&v18, v11 + 1);
          sched_priority = v11->sched_priority;
          if ((v11->sched_priority & 2) == 0)
          {
LABEL_34:
            if ((sched_priority & 4) == 0)
            {
LABEL_36:
              v13 = _pthread_workloop_create();
              if (v13 == 45)
              {
                _dispatch_workloop_activate_simulator_fallback(a1, (__int128 *)&v18.__sig);
              }
              else if (!v13)
              {
                v11->sched_priority |= 0x10u;
              }
              pthread_attr_destroy(&v18);
              goto LABEL_46;
            }
LABEL_35:
            pthread_attr_setcpupercent_np();
            goto LABEL_36;
          }
        }
        else if ((sched_priority & 2) == 0)
        {
          goto LABEL_34;
        }
        pthread_attr_setschedpolicy(&v18, v11[2].sched_priority);
        if ((v11->sched_priority & 4) == 0)
          goto LABEL_36;
        goto LABEL_35;
      }
    }
    else if ((v7 & 2) == 0)
    {
      goto LABEL_19;
    }
    pthread_attr_setschedpolicy(&v17, v4[4]);
    v7 = *v4;
    goto LABEL_19;
  }
LABEL_47:
  v14 = *(_DWORD *)(a1 + 84);
  if (v14)
    v15 = v14 | 0x80000000;
  else
    v15 = -2080358400;
  *(_DWORD *)(a1 + 84) = v15;
  do
    v16 = __ldxr(v2);
  while (__stxr(v16 & 0xFF7FFFFFFFFFFFFFLL, v2));
  _dispatch_workloop_wakeup_VARIANT_mp((_QWORD **)a1, 0, 1u);
}

void _dispatch_workloop_wakeup_VARIANT_mp(_QWORD **a1, uint64_t a2, unsigned int a3)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unsigned int v11;

  if ((a3 & 4) != 0)
  {
    _dispatch_workloop_barrier_complete(a1, a2, a3);
    return;
  }
  if ((a3 & 1) == 0)
    _dispatch_workloop_wakeup_VARIANT_mp_cold_1(a3);
  if ((a3 & 8) != 0)
    goto LABEL_20;
  v4 = (unint64_t *)(a1 + 7);
  v5 = a2 << 32;
  do
  {
    v6 = __ldxr(v4);
    v7 = v6 & 0xFFFFFFF8FFFFFFFFLL | v5;
    if (v6 & 0x1000000000 | v5 & 0x1000000000)
      v7 |= 0x800000000uLL;
    if ((v6 & 0x700000000) < v5)
      v8 = v7;
    else
      v8 = v6;
    v9 = v8 | ((v8 & 0x700000000) != 0);
    if ((a3 & 2) != 0)
    {
      v9 |= 0x8000000000uLL;
    }
    else if (v9 == v6)
    {
      __clrex();
      goto LABEL_20;
    }
  }
  while (__stlxr(v9, v4));
  if (v6 >> 55)
    _dispatch_workloop_wakeup_VARIANT_mp_cold_2(v6);
  if (((v9 ^ v6) & 1) != 0)
  {
    if ((v9 & 0x2000000000) != 0)
    {
      v10 = a1;
      v11 = 1;
LABEL_19:
      _dispatch_event_loop_poke_VARIANT_mp(v10, v9, v11);
      return;
    }
    (*(void (**)(_QWORD *, _QWORD **, unint64_t))(*a1[3] + 88))(a1[3], a1, HIDWORD(v9) & 7);
    return;
  }
  if (((v9 ^ v6) & 0x700000000) == 0)
  {
LABEL_20:
    _os_object_release_internal_n_VARIANT_mp(a1, (const char *)2);
    return;
  }
  if ((v9 & 0x2000000000) != 0)
  {
    v11 = a3 | 0x80000000;
    v10 = a1;
    goto LABEL_19;
  }
  _dispatch_queue_wakeup_with_override_slow((uint64_t)a1, v9, a3);
}

unsigned int *_dispatch_workloop_invoke_VARIANT_mp(uint64_t started, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t (**v31)(uint64_t);
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  BOOL v48;
  signed int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  __objc2_class **v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v62;
  unint64_t StatusReg;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  BOOL v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  __objc2_class ***v88;
  unint64_t *v89;
  unint64_t v90;
  __int128 v92;

  v3 = started;
  if ((a3 & 3) == 0)
    *(_QWORD *)(started + 16) = -1985229329;
  v85 = a3;
  if ((a3 & 2) != 0)
  {
    v4 = a3 & 0x40000;
    v5 = 0x40020000000001;
    goto LABEL_5;
  }
  v62 = ((unint64_t)*(unsigned __int16 *)(started + 80) << 41) - 0x20000000000;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v64 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
  v4 = a3 & 0x40000;
  if ((a3 & 0x40000) != 0)
    v65 = 0x4000000000;
  else
    v65 = 1;
  if ((a3 & 0x40001) == 0x40000)
    v66 = 0xFFE00000FFFFFFFCLL;
  else
    v66 = 0xFFE00040FFFFFFFCLL;
  v67 = *(_DWORD *)(StatusReg + 200);
  v68 = (v67 >> 8) & 0xF;
  v69 = (unsigned __int16)v67 >> 12;
  v70 = HIWORD(v67) & 0xF;
  if (v68 <= v69)
    v68 = v69;
  if (v68 > v70)
    v70 = v68;
  v71 = (unint64_t *)(started + 56);
  while (1)
  {
    while (1)
    {
      v72 = __ldaxr(v71);
      v73 = v72 & v66;
      if ((v72 & v66) != 0)
        break;
      if ((v72 & 0x1000000000) == 0 || (v74 = HIDWORD(v72) & 7, v74 <= v70))
      {
        v75 = (v72 >> 40) & 1;
        if (!((v62 + v72) >> 53))
          LODWORD(v75) = 1;
        if ((_DWORD)v75)
          v76 = 0x60000000000000;
        else
          v76 = 0x20000000000000;
        v77 = v64 | v72 & 0x7700000001 | v76;
        goto LABEL_168;
      }
      __clrex();
      v90 = v62;
      started = _pthread_workqueue_override_start_direct();
      v62 = v90;
      v78 = *(_DWORD *)(StatusReg + 200);
      v70 = v74;
      if ((HIWORD(v78) & 0xF) < v74)
      {
        *(_QWORD *)(StatusReg + 200) = v78 & 0xFFF0FFFF | ((_DWORD)v74 << 16);
        v70 = v74;
      }
    }
    if ((v85 & 1) != 0)
      break;
    v77 = v72 ^ v65;
LABEL_168:
    if (!__stxr(v77, v71))
      goto LABEL_179;
  }
  __clrex();
  v77 = v72;
LABEL_179:
  a3 = v85;
  v81 = 0x60000000000000;
  if ((v85 & 1) == 0)
    v81 = v65 | 0x60000000000000;
  v82 = v77 & v81;
  v83 = v72 & 0x3FFE0000000000;
  v5 = v82 - v83;
  if (v73)
    v84 = 1;
  else
    v84 = v82 == v83;
  if (!v84)
  {
LABEL_5:
    if (v4)
    {
      v86 = 0;
    }
    else
    {
      v6 = *(_DWORD *)(v3 + 84);
      v7 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v8 = *(_QWORD *)(v7 + 200);
      if ((_DWORD)v8)
      {
        v9 = (unsigned __int16)v6 >> 12;
        v10 = v6 & 0xFFF;
        if ((v6 & 0xFFF) != 0)
        {
          if (((unsigned __int16)v8 & 0xFFFu) > v10)
            v10 = v8 & 0xFFF;
          if (v9 <= v10 >> 8)
            v11 = 0x40000000;
          else
            v11 = 1140912128;
          v12 = v8 & 0x880F0000 | v10 | v11 & v6;
        }
        else
        {
          v13 = v8 | 0x40000000;
          if ((v8 & 0xFFF) == 0)
            v13 = *(_QWORD *)(v7 + 200);
          v12 = v13 & 0xFFFF0FFF | v6 & 0x400F000;
          if (v9 <= ((v13 >> 8) & 0xF))
            v12 = v13;
        }
      }
      else
      {
        v12 = v6 & 0xFFF0FFFF;
      }
      *(_QWORD *)(v7 + 200) = v12;
      v86 = v8 & 0xFFF0FFFF;
    }
    if ((*(_DWORD *)(v3 + 80) & 0x400000) != 0)
    {
      v79 = (unsigned int *)(v3 + 80);
      do
        v80 = __ldxr(v79);
      while (__stxr(v80 & 0xFFBFFFFF, v79));
    }
    if (((*(_DWORD *)(v3 + 80) << 8) & 0x3000000) != 0)
      v14 = (*(_DWORD *)(v3 + 80) << 8) & 0x3000000 | a3 & 0xFCEDFFFF | 0x100000;
    else
      v14 = a3 & 0xFFEDFFFF | 0x100000;
    v15 = v14 & 0x1000002;
    v16 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v89 = (unint64_t *)(v3 + 56);
LABEL_25:
    if (v15 == 2)
      started = _dispatch_last_resort_autorelease_pool_push(a2);
    v87 = v5;
    v17 = *(_BYTE **)(v3 + 200);
    v92 = 0uLL;
    if (v17 && (*v17 & 0x20) != 0)
      *(_QWORD *)(v16 + 192) = v17 + 40;
    v88 = (__objc2_class ***)(v16 + 160);
    v92 = *(_OWORD *)(v16 + 160);
    *(_QWORD *)(v16 + 160) = v3;
    *(_QWORD *)(v16 + 168) = &v92;
LABEL_31:
    v18 = 6;
    while (v18)
    {
      v19 = v18--;
      if (*(_QWORD *)(v3 + 8 * v18 + 152))
      {
        v20 = v19;
        v21 = v19 << 32;
        while (1)
        {
          v22 = __ldxr(v89);
          if ((v22 & 0x700000000) <= v21)
          {
            __clrex();
            goto LABEL_40;
          }
          if ((v22 & 0x8000000000) != 0)
            break;
          if (!__stxr(v22 & 0xFFFFFFF8FFFFFFFFLL | v21, v89))
          {
            v23 = *(_QWORD *)(v16 + 232);
            if (v23)
            {
              *(_BYTE *)(v23 + 45) |= 2u;
              started = _dispatch_return_to_kernel();
            }
LABEL_40:
            *(_BYTE *)(v3 + 100) = v19;
            v24 = v3 + 8 * v18;
            v25 = *(_QWORD *)(v24 + 104);
            if (!v25)
            {
              started = _dispatch_wait_for_enqueuer((unint64_t *)(v24 + 104));
              v25 = started;
            }
            while (2)
            {
              if ((*(_QWORD *)v25 & 0xFFFFFFFFFFFFF001) == 1)
              {
                *(_DWORD *)(a2 + 16) = v20;
                *(_QWORD *)(a2 + 8) = v25;
                *(_BYTE *)(v3 + 100) = 0;
                v5 = v87;
                *(_OWORD *)v88 = v92;
                *(_QWORD *)(v16 + 192) = 0;
                v55 = *(__objc2_class ***)(v3 + 24);
                goto LABEL_123;
              }
              v26 = *(_QWORD *)(v25 + 16);
              v27 = v3 + 8 * ((int)v20 - 1);
              *(_QWORD *)(v27 + 104) = v26;
              if (!v26)
              {
                started = v25 + 16;
                v28 = (unint64_t *)(v27 + 104);
                v29 = (unint64_t *)(v27 + 152);
                while (1)
                {
                  v30 = __ldxr(v29);
                  if (v30 != v25)
                    break;
                  if (!__stlxr(0, v29))
                    goto LABEL_51;
                }
                __clrex();
                v26 = *(_QWORD *)started;
                if (!*(_QWORD *)started)
                {
                  started = _dispatch_wait_for_enqueuer((unint64_t *)started);
                  v26 = started;
                }
                *v28 = v26;
              }
LABEL_51:
              if (*(_QWORD *)(v16 + 40))
                started = _dispatch_return_to_kernel();
              v31 = *(uint64_t (***)(uint64_t))(v16 + 192);
              if (v31)
                started = (*v31)(v3);
              v32 = *(_QWORD *)v25;
              if (*(_QWORD *)v25 >= 0x1000uLL)
              {
                if (*(_QWORD *)(v32 + 40) == 1)
                  started = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v32 + 48))(v25, 0, (v14 >> 21) & 1);
                else
                  started = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v32 + 64))(v25, a2, v14 & 0xFFFD0000);
LABEL_109:
                if (v31)
                  started = v31[1](v3);
                if (!v26)
                  goto LABEL_31;
                v20 = *(unsigned __int8 *)(v3 + 100);
                v25 = v26;
                if ((*(_DWORD *)(v3 + 60) & 7u) > v20)
                  goto LABEL_31;
                continue;
              }
              break;
            }
            if ((v14 & 0x1000000) != 0)
            {
              v33 = (void *)MEMORY[0x18D766D94](started);
              v32 = *(_QWORD *)v25;
            }
            else
            {
              v33 = 0;
            }
            v34 = *(_QWORD *)(v25 + 24);
            if ((v32 & 4) != 0)
              *(_QWORD *)(v25 + 24) = -1;
            v35 = *(_QWORD *)(v25 + 8);
            if (v35 == -1)
            {
              v38 = 0;
            }
            else
            {
              v36 = *(_QWORD *)(v16 + 200);
              if (((v36 >> 8) & 0xF) != 0)
                v37 = 256 << ((BYTE1(v36) & 0xFu) - 1);
              else
                v37 = 0;
              v38 = v37 & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(v16 + 200);
              v39 = v35 & 0xFFFFFF;
              if ((v35 & 0xFFFFFF) != 0)
              {
                v40 = v37 & 0xFFFFFF00;
                if ((v36 & 0x44000000) == 0 && (*(_QWORD *)(v25 + 8) & 0x10000000) == 0)
                  v42 = v38;
                else
                  v42 = v35 & 0xFFFFFF;
                if (v39 >= v40)
                  v38 = v42;
              }
              else if ((unsigned __int16)v36 >> 12)
              {
                v38 = (256 << (((unsigned __int16)v36 >> 12) - 1)) | 0xFF;
              }
            }
            v43 = v32 & 4;
            v44 = v38 & 0xFFFFFFFF02FFFFFFLL;
            v45 = *(_QWORD *)(v16 + 32);
            if ((v45 & 0x1000000) != 0)
            {
              if (!v44)
              {
                v44 = v45 & 0xFFFFFFFFFEFFFFFFLL;
                goto LABEL_92;
              }
LABEL_98:
              _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v44, v34, v43 | 2);
            }
            else
            {
              if (v44 == (v45 & 0xFFFFFFFF77FFFFFFLL))
                goto LABEL_81;
LABEL_92:
              if (v44)
                goto LABEL_98;
LABEL_81:
              if (v34 != -1)
              {
                if (*(_QWORD *)(v16 + 224) != v34)
                {
                  v44 = 0;
                  goto LABEL_98;
                }
                if ((v32 & 4) != 0 && v34)
                {
                  v46 = (unsigned int *)(v34 + 12);
                  do
                  {
                    v47 = __ldxr(v46);
                    v48 = __OFSUB__(v47, 1);
                    v49 = v47 - 1;
                  }
                  while (__stxr(v49, v46));
                  if ((v49 < 0) ^ v48 | (v49 == 0))
                    _dispatch_async_redirect_invoke_cold_1();
LABEL_100:
                  v50 = *(_QWORD *)(v16 + 176);
                  if (v50)
                    v51 = *(_DWORD *)(v50 + 8) + 1;
                  else
                    v51 = 1;
                  v43 = v25;
                  if (v51 <= _dispatch_continuation_cache_limit)
                  {
                    v43 = 0;
                    *(_QWORD *)(v25 + 16) = v50;
                    *(_DWORD *)(v25 + 8) = v51;
                    *(_QWORD *)(v16 + 176) = v25;
                  }
LABEL_105:
                  if ((v32 & 8) != 0)
                  {
                    v52 = *(_QWORD *)(v25 + 48);
                    v53 = *(_QWORD *)(*(_QWORD *)v52 + 40);
                    if (v53 != 514)
                      _dispatch_queue_override_invoke_cold_1(v53);
                    _dispatch_client_callout(*(_QWORD *)(v25 + 40), *(uint64_t (**)(void))(v25 + 32));
                    started = dispatch_group_leave_VARIANT_mp(v52);
                    if (!v43)
                      goto LABEL_107;
                  }
                  else
                  {
                    started = _dispatch_client_callout(*(_QWORD *)(v25 + 40), *(uint64_t (**)(void))(v25 + 32));
                    if (!v43)
                    {
LABEL_107:
                      if (!v33)
                        goto LABEL_109;
                      goto LABEL_108;
                    }
                  }
                  _dispatch_continuation_free_to_cache_limit_VARIANT_mp(v43);
                  if (!v33)
                    goto LABEL_109;
LABEL_108:
                  objc_autoreleasePoolPop(v33);
                  goto LABEL_109;
                }
              }
            }
            if ((v32 & 4) != 0)
              goto LABEL_100;
            goto LABEL_105;
          }
        }
        __clrex();
        do
          v54 = __ldaxr(v89);
        while (__stxr(v54 ^ 0x8000000000, v89));
        goto LABEL_31;
      }
    }
    v55 = 0;
    v5 = v87 & 1 | 0x40020000000000;
    *(_OWORD *)v88 = v92;
    *(_QWORD *)(v16 + 192) = 0;
LABEL_123:
    v15 = v14 & 0x1000002;
    if ((v14 & 0x1000002) == 2)
    {
      v92 = *(_OWORD *)v88;
      *(_QWORD *)(v16 + 160) = v3;
      *(_QWORD *)(v16 + 168) = &v92;
      _dispatch_last_resort_autorelease_pool_pop(a2);
      *(_OWORD *)v88 = v92;
    }
    if ((unint64_t)v55 + 1 > 1)
    {
LABEL_142:
      if ((v14 & 0x40000) == 0)
LABEL_143:
        *(_QWORD *)(v16 + 200) = *(_QWORD *)(v16 + 200) & 0xF0000 | v86;
    }
    else
    {
      do
      {
        v56 = __ldxr(v89);
        v57 = (v56 - v5) & 0xFFFFFFF700000001;
        if (!(v56 >> 55))
        {
          if ((v56 & 0x8000000000) != 0)
          {
            __clrex();
            do
              v58 = __ldaxr(v89);
            while (__stxr(v58 ^ 0x8000000000, v89));
            if ((v85 & 1) != 0)
              goto LABEL_25;
            v55 = *v88;
            if (((uint64_t)(**v88)[1].isa & 0x10000) != 0)
              goto LABEL_25;
            goto LABEL_142;
          }
          if (v55)
            v57 = (v56 - v5) & 0xFFFFFF7700000001 | 0x8000000000;
          else
            v57 = (v56 - v5) & 0xFFFFFFF000000001;
        }
      }
      while (__stlxr(v57, v89));
      if ((~v56 & 0x1800000000) == 0)
      {
        v59 = HIDWORD(v56) & 7;
        v60 = *(_DWORD *)(v16 + 200);
        if ((HIWORD(v60) & 0xF) < v59)
        {
          v5 = 0;
          v55 = 0;
          *(_QWORD *)(v16 + 200) = v60 & 0xFFF0FFFF | ((_DWORD)v59 << 16);
          goto LABEL_142;
        }
      }
      v5 = 0;
      v55 = 0;
      if ((v14 & 0x40000) == 0)
        goto LABEL_143;
    }
    if (v55)
      return _dispatch_queue_invoke_finish_VARIANT_mp((unint64_t *)v3, a2, v55, v5);
  }
  return (unsigned int *)_os_object_release_internal_n_VARIANT_mp((void *)v3, (const char *)2);
}

void _dispatch_workloop_barrier_complete(_QWORD **a1, uint64_t a2, int a3)
{
  unsigned int *v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t StatusReg;
  uint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int v29;

  v5 = (unsigned int *)(a1 + 1);
  v6 = (unint64_t *)(a1 + 7);
  v7 = a2 << 32;
  v8 = a1 + 24;
LABEL_2:
  v9 = 0;
  v10 = v8;
  v11 = 6;
  do
  {
    if (*v10)
    {
      v12 = (_QWORD *)*(v10 - 6);
      if (!v12)
        v12 = (_QWORD *)_dispatch_wait_for_enqueuer(v10 - 6);
      if (*v12 <= 0xFFFuLL && (*v12 & 0x81) != 0)
      {
        _dispatch_workloop_drain_barrier_waiter((uint64_t)a1, (uint64_t)v12, v11, a3, 0);
        return;
      }
      v9 = 1;
    }
    --v10;
    --v11;
  }
  while (v11);
  if (v9 && (a3 & 1) == 0)
  {
    if (*v5 != 0x7FFFFFFF)
    {
      do
        v22 = __ldxr(v5);
      while (__stxr(v22 + 2, v5));
      if (v22 <= 0)
        dispatch_set_target_queue_VARIANT_mp_cold_2();
    }
    a3 |= 1u;
  }
  do
  {
    while (1)
    {
      v14 = __ldxr(v6);
      if ((~v14 & 0x2000000002) != 0 || (v14 & 0x800000001) == 0)
        break;
      _dispatch_event_loop_ensure_ownership_VARIANT_mp((uint64_t)a1);
      do
        v21 = __ldxr(v6);
      while (__stxr(v21 & 0xFFFFFFF7FFFFFFFDLL, v6));
      __clrex();
    }
    v16 = v14 & 0xFFFFFFF8FFFFFFFFLL | v7;
    if (v14 & 0x1000000000 | v7 & 0x1000000000)
      v16 |= 0x800000000uLL;
    if ((v14 & 0x700000000) < v7)
      v17 = v16;
    else
      v17 = v14;
    v18 = (v17 & 0xFFFFFFF700000001) - 0x40020000000000;
    if (v9)
    {
      v19 = v18 | 1;
    }
    else
    {
      if ((v14 & 0x8000000000) != 0)
      {
        __clrex();
        do
          v23 = __ldaxr(v6);
        while (__stxr(v23 ^ 0x8000000000, v6));
        goto LABEL_2;
      }
      v20 = v18 & 0xFFFFFFF000000001;
      v19 = v18 & 0xFFFFFFF000000000;
      if ((v14 & 0x2000000000) == 0)
        v19 = v20;
    }
  }
  while (__stlxr(v19, v6));
  if ((v14 & 0x2000000000) != 0)
  {
    if ((v14 & 3) != 2 || (v19 & 1) != 0)
    {
      _dispatch_event_loop_end_ownership_VARIANT_mp((uint64_t)a1, v14, v19, a3);
      return;
    }
    goto LABEL_52;
  }
  if ((~v14 & 0x1800000000) == 0)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v25 = HIDWORD(v14) & 7;
    v26 = *(_DWORD *)(StatusReg + 200);
    if ((HIWORD(v26) & 0xF) < v25)
      *(_QWORD *)(StatusReg + 200) = v26 & 0xFFF0FFFF | ((_DWORD)v25 << 16);
  }
  if (!v9)
    goto LABEL_52;
  if (((v19 ^ v14) & 1) != 0)
  {
    if ((v19 & 0x2000000000) != 0)
    {
      v27 = a1;
      v28 = v19;
      v29 = 1;
LABEL_49:
      _dispatch_event_loop_poke_VARIANT_mp(v27, v28, v29);
      return;
    }
    (*(void (**)(_QWORD *, _QWORD **, unint64_t))(*a1[3] + 88))(a1[3], a1, HIDWORD(v19) & 7);
    return;
  }
  if ((v19 & 0xFF80004000000000) != 0 || (v19 & 0xFFFFFFFD) == 0)
  {
LABEL_52:
    if ((a3 & 1) != 0)
      _os_object_release_internal_n_VARIANT_mp(a1, (const char *)2);
    return;
  }
  if ((v19 & 0x2000000000) != 0)
  {
    v29 = a3 | 0x80000000;
    v27 = a1;
    v28 = v19;
    goto LABEL_49;
  }
  _dispatch_queue_wakeup_with_override_slow((uint64_t)a1, v19, a3);
}

_QWORD *_dispatch_workloop_push_VARIANT_mp(_QWORD *result, _QWORD *a2, unsigned int a3)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t StatusReg;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  if (*a2 <= 0xFFFuLL && (*a2 & 0x81) != 0)
    return _dispatch_workloop_push_waiter(result, (unint64_t)a2, a3);
  v4 = *((_DWORD *)result + 21);
  v5 = (v4 >> 8) & 0xF;
  v6 = (unsigned __int16)v4 >> 12;
  if (a3)
    v6 = a3;
  if (v5 > a3)
    v6 = v5;
  a2[2] = 0;
  v7 = v6 - 1;
  v8 = &result[v7 + 19];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_QWORD *)(StatusReg + 976) = v8;
  do
    v10 = __ldxr(v8);
  while (__stlxr((unint64_t)a2, v8));
  if (v10)
  {
    *(_QWORD *)(v10 + 16) = a2;
    *(_QWORD *)(StatusReg + 976) = 0;
  }
  else
  {
    v11 = (unsigned int *)(result + 1);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    result[v7 + 13] = a2;
    *(_QWORD *)(StatusReg + 976) = 0;
    return (_QWORD *)_dispatch_workloop_wakeup_VARIANT_mp();
  }
  return result;
}

_QWORD *_dispatch_workloop_push_waiter(_QWORD *result, unint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t StatusReg;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t *v35;

  LODWORD(v3) = (__clz(__rbit32((*(_DWORD *)(a2 + 8) >> 8) & 0x3FFF)) + 1) & 0xF;
  if (((*(_DWORD *)(a2 + 8) >> 8) & 0x3FFF) == 0)
    LODWORD(v3) = 0;
  if (v3 <= a3)
    LODWORD(v3) = a3;
  if ((_DWORD)v3)
    v3 = v3;
  else
    v3 = 4;
  v4 = (unint64_t *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v5 = (int)v3 - 1;
  v6 = &result[v5 + 19];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_QWORD *)(StatusReg + 976) = v6;
  do
    v8 = __ldxr(v6);
  while (__stlxr(a2, v6));
  if (v8)
  {
    *(_QWORD *)(v8 + 16) = a2;
    *(_QWORD *)(StatusReg + 976) = 0;
    return result;
  }
  v9 = &result[v5];
  v9[13] = a2;
  *(_QWORD *)(StatusReg + 976) = 0;
  v10 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 0x80) != 0
    && ((v11 = result[3], v11 >= (unint64_t)&_dispatch_root_queues)
      ? (v12 = v11 >= (unint64_t)&_dispatch_queue_serial_numbers)
      : (v12 = 1),
        v12))
  {
    *(_QWORD *)(a2 + 56) = result;
    *(_QWORD *)a2 = v10 & 0xFFFFFFFFFFFFFF7FLL;
    v13 = (unsigned int *)(result + 1);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    return (_QWORD *)_dispatch_workloop_wakeup_VARIANT_mp();
  }
  else
  {
    v15 = v9 + 13;
    v16 = result + 7;
    v17 = v3 << 32;
    v18 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL | 0x60000000000002;
    do
    {
      v19 = __ldxr(v16);
      v20 = v19 & 0xFFFFFFF8FFFFFFFFLL | v17;
      if (v19 & 0x1000000000 | v17 & 0x1000000000)
        v20 |= 0x800000000uLL;
      if ((v19 & 0x700000000) < v17)
        v21 = v20;
      else
        v21 = v19;
      v22 = v21 | 0x8000000000;
      v23 = v18 | v21 & 0x7700000001;
      if ((v19 & 0x40FFFFFFFDLL) != 0)
        v23 = v22;
    }
    while (__stlxr(v23, v16));
    if ((v23 & 0x2000000000) != 0 && *(_QWORD *)(a2 + 48) != -4)
      *(_BYTE *)(a2 + 106) = *(_BYTE *)(a2 + 106) & 0xFB | (4 * (*(_DWORD *)(a2 + 100) == *(_DWORD *)(StatusReg + 24)));
    if (((v23 ^ v19) & 0x40000000000000) != 0)
    {
      if ((*(_BYTE *)(a2 + 106) & 4) == 0)
        return (_QWORD *)_dispatch_workloop_barrier_complete();
      v25 = *v15;
      if (!*v15)
      {
        v31 = (unint64_t *)(a2 + 16);
        v32 = result;
        v30 = a2;
        v33 = v6;
        v35 = v15;
        v29 = _dispatch_wait_for_enqueuer(v15);
        v6 = v33;
        v15 = v35;
        a2 = v30;
        v25 = v29;
        v4 = v31;
        result = v32;
      }
      if (v25 == a2)
      {
        v34 = v15;
        v26 = v6;
        *(_BYTE *)(a2 + 106) |= 8u;
        if ((*(_BYTE *)a2 & 0x80) != 0)
          *(_QWORD *)(a2 + 56) = result;
        v27 = *v4;
        *v15 = *v4;
        if (!v27)
        {
          while (1)
          {
            v28 = __ldxr(v26);
            if (v28 != a2)
              break;
            if (!__stlxr(0, v26))
              return result;
          }
          __clrex();
          result = (_QWORD *)*v4;
          if (!*v4)
            result = (_QWORD *)_dispatch_wait_for_enqueuer(v4);
          *v34 = (unint64_t)result;
        }
      }
      else
      {
        return (_QWORD *)_dispatch_workloop_barrier_complete();
      }
    }
    else if (((v23 ^ v19) & 0x700000000) != 0 && (v23 & 0xFF80004000000000) == 0)
    {
      if ((v23 & 1) != 0)
      {
        if ((v23 & 0x2000000000) != 0)
          return _dispatch_event_loop_poke_VARIANT_mp(result, v23, 0x80000000);
      }
      else if ((v23 & 0x2000000000) != 0 || (v23 & 0xFFFFFFFC) == 0)
      {
        return result;
      }
      return (_QWORD *)_dispatch_queue_wakeup_with_override_slow();
    }
  }
  return result;
}

uint64_t dispatch_thread_get_current_override_qos_floor_VARIANT_mp()
{
  unsigned int v0;
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t result;
  uint64_t v6;

  v0 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 200);
  v1 = (v0 >> 8) & 0xF;
  v2 = (unsigned __int16)v0 >> 12;
  v3 = HIWORD(v0) & 0xF;
  if (v1 <= v2)
    v1 = v2;
  if (v1 > v3)
    v3 = v1;
  v4 = v3 - 1;
  result = 0;
  v6 = 0x2100000001;
  switch(v4)
  {
    case 0u:
      return 0x500000001;
    case 1u:
      return 0x900000001;
    case 2u:
      return 0x1100000001;
    case 3u:
      return 0x1500000001;
    case 4u:
      return 0x1900000001;
    case 5u:
      return v6;
    case 0xEu:
      return result;
    default:
      return 1;
  }
}

uint64_t dispatch_thread_override_self_VARIANT_mp(int a1)
{
  unsigned int v1;
  unint64_t v2;
  unsigned int v3;
  unint64_t StatusReg;
  unsigned int v5;

  HIDWORD(v2) = a1 - 5;
  LODWORD(v2) = a1 - 5;
  v1 = v2 >> 2;
  v3 = 6;
  switch(v1)
  {
    case 0u:
      v3 = 1;
      break;
    case 1u:
      v3 = 2;
      break;
    case 3u:
    case 4u:
    case 5u:
      v3 = v1;
      break;
    case 7u:
      break;
    default:
      v3 = 0;
      break;
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  _pthread_workqueue_override_start_direct();
  v5 = *(_DWORD *)(StatusReg + 200);
  if ((HIWORD(v5) & 0xF) < v3)
    *(_QWORD *)(StatusReg + 200) = v5 & 0xFFF0FFFF | (v3 << 16);
  return 0;
}

uint64_t dispatch_lock_override_start_with_debounce_VARIANT_mp()
{
  return _pthread_workqueue_override_start_direct_check_owner();
}

uint64_t dispatch_lock_override_end_VARIANT_mp(int a1)
{
  unsigned int v1;
  unint64_t v2;
  unsigned int v3;
  unint64_t StatusReg;
  unsigned int v5;

  HIDWORD(v2) = a1 - 5;
  LODWORD(v2) = a1 - 5;
  v1 = v2 >> 2;
  if (v1 > 7)
    v3 = 0;
  else
    v3 = dword_18A06E660[v1];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_DWORD *)(StatusReg + 200);
  if ((HIWORD(v5) & 0xF) < v3)
    *(_QWORD *)(StatusReg + 200) = v5 & 0xFFF0FFFF | (v3 << 16);
  return 0;
}

void _dispatch_queue_wakeup_VARIANT_mp(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int *v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BOOL8 v27;
  unsigned int *v28;
  int v29;
  _QWORD *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;

  if (a4 && (a3 & 1) == 0)
  {
    if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
    {
      v5 = (unsigned int *)(a1 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 2, v5));
      if (v6 <= 0)
      {
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
        __break(1u);
        return;
      }
    }
    a3 |= 1u;
  }
  if ((a3 & 4) != 0)
  {
    v32 = *(_DWORD *)(a1 + 84);
    v33 = (unsigned __int16)v32 >> 12;
    if ((_DWORD)a2)
      v33 = a2;
    v34 = (v32 >> 8) & 0xF;
    if (v33 <= v34)
      v35 = v34;
    else
      v35 = v33;
    _dispatch_lane_class_barrier_complete((unint64_t *)a1, v35, a3, (__objc2_class **)a4, 0x40020000000000);
    return;
  }
  if (!a4)
  {
    if ((_DWORD)a2)
    {
      v22 = (unint64_t *)(a1 + 56);
      v23 = a2 << 32;
      do
      {
        v24 = __ldxr(v22);
        if ((v24 & 0x40FFFFFFFDLL) != 0)
        {
          v25 = v24 & 0xFFFFFFF8FFFFFFFFLL | v23;
          if (v24 & 0x1000000000 | v23 & 0x1000000000)
            v25 |= 0x800000000uLL;
          v26 = (v24 & 0x700000000) < v23 ? v25 : v24;
          v27 = (v24 & 0xFF80002000000000) == 0x2000000000 && (unint64_t)((v24 & 0x4000000000) == 0);
          v20 = v26 | v27;
          if ((v26 | v27) != v24)
            continue;
        }
LABEL_69:
        __clrex();
        goto LABEL_70;
      }
      while (__stxr(v20, v22));
      v21 = v20 ^ v24;
      v7 = 1;
      if ((a3 & 1) != 0 || (v21 & 1) == 0)
        goto LABEL_62;
      if (*(_DWORD *)(a1 + 8) == 0x7FFFFFFF)
        goto LABEL_61;
      v28 = (unsigned int *)(a1 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 2, v28));
      if (v29 > 0)
      {
LABEL_61:
        a3 |= 1u;
        v7 = 1;
LABEL_62:
        a4 = 1;
        goto LABEL_63;
      }
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
LABEL_87:
      _dispatch_queue_wakeup_with_override_slow(a1, v20, a3);
      return;
    }
LABEL_70:
    if ((a3 & 1) != 0)
      _os_object_release_internal_n_VARIANT_mp((void *)a1, (const char *)2);
    return;
  }
  v7 = 0x4000000000;
  if ((__objc2_class **)a4 != &_dispatch_mgr_q)
    v7 = 1;
  v8 = *(_DWORD *)(a1 + 84);
  LODWORD(v9) = (unsigned __int16)v8 >> 12;
  if ((_DWORD)a2)
    LODWORD(v9) = a2;
  v10 = (v8 >> 8) & 0xF;
  if (v9 <= v10)
    v9 = v10;
  else
    v9 = v9;
  v11 = (unint64_t *)(a1 + 56);
  v12 = v9 << 32;
  do
  {
    v13 = __ldxr(v11);
    v14 = v13 & 0xFFFFFFF8FFFFFFFFLL | v12;
    if (v13 & 0x1000000000 | v12 & 0x1000000000)
      v14 |= 0x800000000uLL;
    if ((v13 & 0x700000000) < v12)
      v15 = v14;
    else
      v15 = v13;
    if ((v13 & 0x180000000000000) == 0x80000000000000)
      v16 = v15 & 0xFF7FFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if ((a3 & 0x20) != 0)
      v15 = v16;
    v17 = (unint64_t)((v13 & 0xFFFFFFFC) == 0) << 38;
    if ((__objc2_class **)a4 != &_dispatch_mgr_q)
      v17 = 1;
    v18 = v15 | v17;
    if ((v13 & 0x4000000001) == 0 && v15 >> 55 == 0)
      v20 = v18;
    else
      v20 = v15;
    if ((a3 & 2) != 0)
    {
      v20 |= 0x8000000000uLL;
    }
    else if (v20 == v13)
    {
      goto LABEL_69;
    }
  }
  while (__stlxr(v20, v11));
  v21 = v13 ^ v20;
LABEL_63:
  if ((v21 & v7) == 0)
  {
    if ((v21 & 0x700000000) != 0 && (v20 & 0xFF80004000000000) == 0 && (v20 & 0xFFFFFFFD) != 0)
    {
      if ((v20 & 0x2000000000) != 0)
      {
        v31 = a3 | 0x80000000;
        v30 = (_QWORD *)a1;
        goto LABEL_68;
      }
      goto LABEL_87;
    }
    goto LABEL_70;
  }
  if (a4 == 1)
    a4 = *(_QWORD *)(a1 + 24);
  if ((v20 & 0x2000000000) != 0)
  {
    v30 = (_QWORD *)a1;
    v31 = 1;
LABEL_68:
    _dispatch_event_loop_poke_VARIANT_mp(v30, v20, v31);
    return;
  }
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)a4 + 88))(a4, a1, HIDWORD(v20) & 7);
}

void _dispatch_lane_class_barrier_complete(unint64_t *a1, uint64_t a2, int a3, __objc2_class **a4, uint64_t a5)
{
  char v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t StatusReg;
  uint64_t v25;
  unsigned int v26;
  unint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  int v31;

  if (a4 == &_dispatch_mgr_q)
  {
    v10 = 0;
    v11 = 0x4000000000;
    a4 = &_dispatch_mgr_q;
  }
  else if (a4)
  {
    v10 = 0;
    if (a4 == (__objc2_class **)1)
      a4 = (__objc2_class **)a1[3];
    v11 = 1;
  }
  else
  {
    v11 = 0;
    v10 = 1;
  }
  v12 = a1 + 7;
  v13 = a2 << 32;
  do
  {
    while (1)
    {
      v14 = __ldxr(v12);
      if ((~v14 & 0x2000000002) != 0 || (v14 & 0x800000001) == 0)
        break;
      v31 = a3;
      _dispatch_event_loop_ensure_ownership_VARIANT_mp((uint64_t)a1);
      do
        v23 = __ldxr(v12);
      while (__stxr(v23 & 0xFFFFFFF7FFFFFFFDLL, v12));
      __clrex();
      a3 = v31;
    }
    v16 = v14 - a5;
    v17 = (v14 - a5) & 0xFFFFFFF8FFFFFFFFLL | v13;
    if ((v14 - a5) & 0x1000000000 | v13 & 0x1000000000)
      v17 |= 0x800000000uLL;
    if (((v14 - a5) & 0x700000000) < v13)
      v18 = v17;
    else
      v18 = v14 - a5;
    v19 = v18 & 0xFFFFFFF700000001;
    if (v14 >> 55)
    {
      v22 = v18 & 0xFFFFFFF700000000;
      if ((v14 & 0x2000000000) != 0)
        v20 = v22;
      else
        v20 = v19;
    }
    else if ((v10 & 1) != 0)
    {
      if ((v14 & 0x8000000000) != 0)
      {
        __clrex();
        do
          v30 = __ldaxr(v12);
        while (__stxr(v30 ^ 0x8000000000, v12));
        (*(void (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 80))(a1, a2, a3 | 4u);
        return;
      }
      v20 = v18 & 0xFFFFFFF000000001;
    }
    else
    {
      if ((v14 & 0x4000000001) != 0)
        v21 = 0;
      else
        v21 = v11;
      v20 = v19 | v21;
    }
  }
  while (__stlxr(v20, v12));
  if ((v16 & 0x2000000000) != 0)
  {
    if ((v16 & 2) == 0 || ((v20 | v16) & 1) != 0)
    {
      _dispatch_event_loop_end_ownership_VARIANT_mp((uint64_t)a1, v16, v20, a3);
      return;
    }
    goto LABEL_45;
  }
  if ((~v16 & 0x1800000000) == 0)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v25 = HIDWORD(v16) & 7;
    v26 = *(_DWORD *)(StatusReg + 200);
    if ((HIWORD(v26) & 0xF) < v25)
      *(_QWORD *)(StatusReg + 200) = v26 & 0xFFF0FFFF | ((_DWORD)v25 << 16);
  }
  if (!a4)
    goto LABEL_45;
  if (((v20 ^ v16) & v11) != 0)
  {
    if ((v20 & 0x2000000000) != 0)
    {
      v27 = a1;
      v28 = v20;
      v29 = 1;
LABEL_42:
      _dispatch_event_loop_poke_VARIANT_mp(v27, v28, v29);
      return;
    }
    ((void (*)(__objc2_class **, unint64_t *, unint64_t))(*a4)[2].superclass)(a4, a1, HIDWORD(v20) & 7);
    return;
  }
  if ((v20 & 0xFF80004000000000) != 0 || (v20 & 0xFFFFFFFD) == 0)
  {
LABEL_45:
    if ((a3 & 1) != 0)
      _os_object_release_internal_n_VARIANT_mp(a1, (const char *)2);
    return;
  }
  if ((v20 & 0x2000000000) != 0)
  {
    v29 = a3 | 0x80000000;
    v27 = a1;
    v28 = v20;
    goto LABEL_42;
  }
  _dispatch_queue_wakeup_with_override_slow((uint64_t)a1, v20, a3);
}

void _dispatch_lane_wakeup_VARIANT_mp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 4) != 0)
    _dispatch_lane_barrier_complete(a1, a2, a3);
  else
    _dispatch_queue_wakeup_VARIANT_mp(a1, a2, a3, *(_QWORD *)(a1 + 48) != 0);
}

void _dispatch_lane_barrier_complete(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int *v11;
  int v12;

  if (!*(_QWORD *)(a1 + 48) || *(_QWORD *)(a1 + 56) >> 55)
  {
    v6 = 0;
LABEL_32:
    _dispatch_lane_class_barrier_complete((unint64_t *)a1, a2, a3, (__objc2_class **)v6, ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) + 0x40000000000000);
    return;
  }
  v7 = *(_QWORD *)(a1 + 104);
  if (!v7)
    v7 = _dispatch_wait_for_enqueuer((unint64_t *)(a1 + 104));
  v8 = *(unsigned __int16 *)(a1 + 80);
  v9 = *(_QWORD *)v7;
  if (v8 == 1)
  {
    if (v9 <= 0xFFF && (*(_QWORD *)v7 & 0x81) != 0)
      goto LABEL_21;
    goto LABEL_25;
  }
  if (v9 >= 0x1000)
  {
    if ((*(_QWORD *)(v9 + 40) & 0xF0) == 0x10)
    {
      if ((*(_DWORD *)(v7 + 80) & 0x80000) != 0 || v8 <= 1 || (*(_DWORD *)(v7 + 80) & 0x80000) != 0)
        goto LABEL_25;
    }
    else if (v8 <= 1)
    {
      goto LABEL_25;
    }
LABEL_23:
    _dispatch_lane_drain_non_barriers((_DWORD *)a1, v7, a3);
    return;
  }
  if ((v9 & 2) == 0)
  {
    if (v8 < 2)
      goto LABEL_25;
    goto LABEL_23;
  }
  if ((v9 & 0x81) != 0)
  {
LABEL_21:
    _dispatch_lane_drain_barrier_waiter(a1, v7, a3, 0);
    return;
  }
LABEL_25:
  if ((a3 & 1) != 0)
  {
LABEL_31:
    v6 = 1;
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 8) == 0x7FFFFFFF)
    goto LABEL_30;
  v11 = (unsigned int *)(a1 + 8);
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 2, v11));
  if (v12 > 0)
  {
LABEL_30:
    LODWORD(a3) = a3 | 1;
    goto LABEL_31;
  }
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
  __break(1u);
}

void _dispatch_lane_push_VARIANT_mp(_DWORD *a1, _QWORD *a2, unsigned int a3)
{
  unsigned int *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t StatusReg;
  unint64_t v8;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;

  if (*a2 <= 0xFFFuLL && (*a2 & 0x81) != 0)
  {
    _dispatch_lane_push_waiter((uint64_t)a1, (unint64_t)a2, a3);
    return;
  }
  v4 = a1 + 2;
  if (((a1[21] >> 8) & 0xFu) >= a3)
    v5 = 0;
  else
    v5 = a3;
  a2[2] = 0;
  v6 = (unint64_t *)(a1 + 12);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_QWORD *)(StatusReg + 976) = a1 + 12;
  do
    v8 = __ldxr(v6);
  while (__stlxr((unint64_t)a2, v6));
  if (v8)
  {
    if ((a1[15] & 7) != 0 && (a1[15] & 7u) >= v5)
    {
      *(_QWORD *)(v8 + 16) = a2;
      *(_QWORD *)(StatusReg + 976) = 0;
      return;
    }
    do
      v13 = __ldxr(v4);
    while (__stxr(v13 + 2, v4));
    v11 = (_QWORD *)(v8 + 16);
    v12 = 1;
  }
  else
  {
    do
      v10 = __ldxr(v4);
    while (__stxr(v10 + 2, v4));
    v11 = a1 + 26;
    v12 = 3;
  }
  *v11 = a2;
  *(_QWORD *)(StatusReg + 976) = 0;
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v5, v12);
}

void _dispatch_lane_push_waiter(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t *v5;
  unint64_t StatusReg;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  if (*(_QWORD *)(a2 + 48) == -4)
    v3 = a3;
  else
    v3 = 0;
  v4 = (uint64_t *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v5 = (unint64_t *)(a1 + 48);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_QWORD *)(StatusReg + 976) = a1 + 48;
  do
    v7 = __ldxr(v5);
  while (__stlxr(a2, v5));
  if (!v7)
  {
    *(_QWORD *)(a1 + 104) = a2;
    *(_QWORD *)(StatusReg + 976) = 0;
    v8 = *(_DWORD *)(a1 + 80);
    if ((v8 & 0x40000) != 0 && (v8 = *(_DWORD *)(a1 + 80), (v8 & 0x1000000) == 0))
    {
      v9 = *(_QWORD *)a2;
    }
    else
    {
      v9 = *(_QWORD *)a2;
      if ((*(_QWORD *)a2 & 0x80) == 0
        || (v8 = *(_DWORD *)(a1 + 80), (v8 & 0x1000000) == 0)
        && ((*(_QWORD *)(a1 + 56) & 0x3000000000) == 0
         || (v10 = *(_QWORD *)(a1 + 24), v10 >= (unint64_t)&_dispatch_root_queues)
         && v10 < (unint64_t)&_dispatch_queue_serial_numbers))
      {
        v11 = ((unint64_t)(unsigned __int16)v8 << 41) - 0x20000000000;
        v12 = (unint64_t *)(a1 + 56);
        v13 = v3 << 32;
        v14 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL | 0x60000000000002;
        do
        {
          v15 = __ldxr(v12);
          v16 = v15 & 0xFFFFFFF8FFFFFFFFLL | v13;
          if (v15 & 0x1000000000 | v13 & 0x1000000000)
            v16 |= 0x800000000uLL;
          if ((v15 & 0x700000000) >= v13)
            v16 = v15;
          v17 = v16 | 0x8000000000;
          if ((v15 & 0xFFE00000FFFFFFFCLL) == 0
            && ((v15 & 0x2000000000) == 0 || (v15 & 0x4000000001) == 0)
            && ((v15 & 0x10000000000) != 0 || !((v11 + v16) >> 53)))
          {
            v17 = v14 | v16 & 0x7700000001;
          }
        }
        while (__stlxr(v17, v12));
        if ((v15 & 0x2000000000) != 0 && *(_QWORD *)(a2 + 48) != -4)
          *(_BYTE *)(a2 + 106) = *(_BYTE *)(a2 + 106) & 0xFB | (4
                                                              * (*(_DWORD *)(a2 + 100) == *(_DWORD *)(StatusReg + 24)));
        if (((v17 ^ v15) & 0x40000000000000) != 0)
        {
          if ((*(_BYTE *)(a2 + 106) & 4) != 0 && *(_QWORD *)(a1 + 104) == a2)
          {
            *(_BYTE *)(a2 + 106) |= 8u;
            if ((*(_BYTE *)a2 & 0x80) != 0)
              *(_QWORD *)(a2 + 56) = a1;
            v23 = *v4;
            *(_QWORD *)(a1 + 104) = *v4;
            if (!v23)
            {
              while (1)
              {
                v24 = __ldxr(v5);
                if (v24 != a2)
                  break;
                if (!__stlxr(0, v5))
                  return;
              }
              __clrex();
              v25 = *v4;
              if (!*v4)
                v25 = _dispatch_wait_for_enqueuer((unint64_t *)(a2 + 16));
              *(_QWORD *)(a1 + 104) = v25;
            }
          }
          else
          {
            _dispatch_lane_barrier_complete(a1, v3, 0);
          }
          return;
        }
        if (((v17 ^ v15) & 0x700000000) == 0 || (v17 & 0xFF80004000000000) != 0)
          return;
        if ((v17 & 1) != 0)
        {
          if ((v17 & 0x2000000000) != 0)
          {
            v19 = v17;
LABEL_57:
            _dispatch_event_loop_poke_VARIANT_mp((_QWORD *)a1, v19, 0x80000000);
            return;
          }
        }
        else if ((v17 & 0x2000000000) != 0 || (v17 & 0xFFFFFFFC) == 0)
        {
          return;
        }
        v19 = v17;
LABEL_52:
        _dispatch_queue_wakeup_with_override_slow(a1, v19, 0);
        return;
      }
    }
    *(_QWORD *)a2 = v9 & 0xFFFFFFFFFFFFFF7FLL;
    *(_QWORD *)(a2 + 56) = a1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v3, 2);
    return;
  }
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(StatusReg + 976) = 0;
  if (!(_DWORD)v3)
    return;
  v20 = (unint64_t *)(a1 + 56);
  v21 = v3 << 32;
  do
  {
    v22 = __ldxr(v20);
    if ((v22 & 0x700000000) < v21)
    {
      v19 = v22 & 0x1000000000 | v21 & 0x1000000000
          ? v22 & 0xFFFFFFF8FFFFFFFFLL | v21 | 0x800000000
          : v22 & 0xFFFFFFF8FFFFFFFFLL | v21;
      if (v22 != v19)
        continue;
    }
    __clrex();
    return;
  }
  while (__stxr(v19, v20));
  if ((v19 & 0xFF80004000000000) != 0)
    return;
  if ((v19 & 1) != 0)
  {
    if ((v19 & 0x2000000000) == 0)
      goto LABEL_52;
    goto LABEL_57;
  }
  if ((v19 & 0x2000000000) == 0 && (v19 & 0xFFFFFFFC) != 0)
    goto LABEL_52;
}

void _dispatch_lane_concurrent_push_VARIANT_mp(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if ((*(_BYTE *)(a1 + 87) & 8) == 0
    || *(_QWORD *)a2 < 0x1000uLL
    || *(_QWORD *)(*(_QWORD *)a2 + 40) == 1
    || *(_QWORD *)(*(_QWORD *)a2 + 40) == 19 && (_dispatch_source_is_timer_VARIANT_mp(a2) & 1) != 0)
  {
    if (*(_QWORD *)(a1 + 48))
    {
LABEL_7:
      _dispatch_lane_push_VARIANT_mp((_DWORD *)a1, (_QWORD *)a2, a3);
      return;
    }
    v6 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 <= 0xFFFuLL)
    {
      if ((v6 & 0x83) != 0)
        goto LABEL_7;
    }
    else if ((*(_QWORD *)(v6 + 40) & 0xF0) == 0x10 && (*(_DWORD *)(a2 + 80) & 0x80000) != 0)
    {
      goto LABEL_7;
    }
    v7 = (unint64_t *)(a1 + 56);
    while (1)
    {
      v8 = __ldaxr(v7);
      if ((v8 & 0xFFE0018000000000) != 0)
        break;
      if (!__stxr(v8 + 0x20000000000, v7))
      {
        _dispatch_continuation_redirect_push((_DWORD *)a1, (_QWORD *)a2);
        return;
      }
    }
    __clrex();
    goto LABEL_7;
  }
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot target the cooperative root queue - not implemented";
  qword_1EDF52D38 = a2;
  __break(1u);
}

_DWORD *_dispatch_continuation_redirect_push(_DWORD *result, _QWORD *a2)
{
  _DWORD *v3;
  unint64_t StatusReg;
  _QWORD *v5;
  unsigned int *v6;
  int v7;

  v3 = result;
  if (*a2 >= 0x1000uLL && *(_QWORD *)(*a2 + 40) == 256)
  {
    if (!a2[5])
      a2[5] = (result[20] << 8) & 0x3000000;
    return (_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 3) + 88))(*((_QWORD *)v3 + 3));
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_QWORD **)(StatusReg + 176);
  if (v5)
  {
    *(_QWORD *)(StatusReg + 176) = v5[2];
  }
  else
  {
    result = _dispatch_continuation_alloc_from_heap_VARIANT_mp();
    v5 = result;
  }
  a2[2] = 0;
  *v5 = &unk_1E1E86638;
  v5[4] = 0;
  v5[5] = (v3[20] << 8) & 0x3000000;
  v5[6] = v3;
  v5[7] = a2;
  v5[3] = -1;
  v5[1] = -1;
  if (v3[2] == 0x7FFFFFFF)
    return (_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 3) + 88))(*((_QWORD *)v3 + 3));
  v6 = v3 + 2;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 2, v6));
  if (v7 > 0)
    return (_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 3) + 88))(*((_QWORD *)v3 + 3));
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
  __break(1u);
  return result;
}

uint64_t dispatch_async_swift_job_VARIANT_mp(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(*(_QWORD *)a2 + 40) != 1)
    dispatch_async_swift_job_VARIANT_mp_cold_1(*(_QWORD *)(*(_QWORD *)a2 + 40));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
}

void _dispatch_channel_dispose_VARIANT_mp(uint64_t *a1, _BYTE *a2)
{
  a1[11] = 0;
  _dispatch_lane_class_dispose_VARIANT_mp(a1, a2);
}

uint64_t _dispatch_channel_xref_dispose_VARIANT_mp(uint64_t a1)
{
  BOOL v1;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 88) + 24))
    v1 = (*(_DWORD *)(a1 + 80) & 0x10000000) == 0;
  else
    v1 = 0;
  if (v1)
    _dispatch_channel_xref_dispose_VARIANT_mp_cold_1(a1);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 80))(a1, 0, 2);
}

unsigned int *_dispatch_channel_invoke_VARIANT_mp(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t StatusReg;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  unint64_t *v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  void *v49;
  void (**v50)(uint64_t);
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  BOOL v67;
  signed int v68;
  uint64_t v69;
  int v70;
  __objc2_class **v71;
  uint64_t v72;
  uint64_t v73;
  __objc2_class ***v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int *v82;
  unsigned int v83;
  char v84;
  uint64_t v85;
  unint64_t *v86;
  int v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unint64_t v93;
  unsigned int v94;
  _BYTE v95[24];
  uint64_t v96;
  unsigned int v97;
  int v98;
  uint64_t v99;
  __int128 v100;

  if ((a3 & 3) == 0)
    *(_QWORD *)(a1 + 16) = -1985229329;
  if ((a3 & 2) != 0)
  {
    v4 = 0x40020000000001;
    if ((a3 & 0x40000) == 0)
      goto LABEL_40;
    goto LABEL_5;
  }
  v5 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) - 0x20000000000;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
  v8 = a3 & 0x40000;
  v9 = 0xFFE00000FFFFFFFCLL;
  if ((a3 & 0x40000) != 0)
  {
    v10 = 0x4000000000;
  }
  else
  {
    v9 = 0xFFE00040FFFFFFFCLL;
    v10 = 1;
  }
  v11 = a3;
  if ((a3 & 1) != 0)
    v12 = 0xFFE00040FFFFFFFCLL;
  else
    v12 = v9;
  v13 = *(_DWORD *)(StatusReg + 200);
  v14 = (v13 >> 8) & 0xF;
  v15 = (unsigned __int16)v13 >> 12;
  v16 = HIWORD(v13) & 0xF;
  if (v14 <= v15)
    v14 = v15;
  if (v14 > v16)
    v16 = v14;
  v17 = (unint64_t *)(a1 + 56);
  while (1)
  {
    while (1)
    {
      v18 = __ldaxr(v17);
      v19 = v18 & v12;
      if ((v18 & v12) != 0)
        break;
      if ((v18 & 0x1000000000) == 0 || (v20 = HIDWORD(v18) & 7, v20 <= v16))
      {
        v21 = (v18 >> 40) & 1;
        if (!((v5 + v18) >> 53))
          LODWORD(v21) = 1;
        if ((_DWORD)v21)
          v22 = 0x60000000000000;
        else
          v22 = 0x20000000000000;
        v23 = v7 | v18 & 0x7700000001 | v22;
        goto LABEL_26;
      }
      __clrex();
      v93 = v5;
      _pthread_workqueue_override_start_direct();
      v5 = v93;
      v24 = *(_DWORD *)(StatusReg + 200);
      v16 = v20;
      if ((HIWORD(v24) & 0xF) < v20)
      {
        *(_QWORD *)(StatusReg + 200) = v24 & 0xFFF0FFFF | ((_DWORD)v20 << 16);
        v16 = v20;
      }
    }
    if ((v11 & 1) != 0)
      break;
    v23 = v18 ^ v10;
LABEL_26:
    if (!__stxr(v23, v17))
      goto LABEL_33;
  }
  __clrex();
  v23 = v18;
LABEL_33:
  v25 = 0x60000000000000;
  if ((v11 & 1) == 0)
    v25 = v10 | 0x60000000000000;
  v26 = v23 & v25;
  v27 = v18 & 0x3FFE0000000000;
  v4 = v26 - v27;
  if (v19)
    v28 = 1;
  else
    v28 = v26 == v27;
  if (v28)
    return (unsigned int *)_os_object_release_internal_n_VARIANT_mp((void *)a1, (const char *)2);
  a3 = v11;
  if (!v8)
  {
LABEL_40:
    v29 = *(_DWORD *)(a1 + 84);
    v30 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v31 = *(_QWORD *)(v30 + 200);
    if ((_DWORD)v31)
    {
      v32 = (unsigned __int16)v29 >> 12;
      v33 = v29 & 0xFFF;
      if ((v29 & 0xFFF) != 0)
      {
        if (((unsigned __int16)v31 & 0xFFFu) > v33)
          v33 = v31 & 0xFFF;
        if (v32 <= v33 >> 8)
          v34 = 0x40000000;
        else
          v34 = 1140912128;
        v35 = v31 & 0x880F0000 | v33 | v34 & v29;
      }
      else
      {
        v36 = v31 | 0x40000000;
        if ((v31 & 0xFFF) == 0)
          v36 = *(_QWORD *)(v30 + 200);
        v35 = v36 & 0xFFFF0FFF | v29 & 0x400F000;
        if (v32 <= ((v36 >> 8) & 0xF))
          v35 = v36;
      }
    }
    else
    {
      v35 = v29 & 0xFFF0FFFF;
    }
    *(_QWORD *)(v30 + 200) = v35;
    v85 = v31 & 0xFFF0FFFF;
    goto LABEL_53;
  }
LABEL_5:
  v85 = 0;
LABEL_53:
  v84 = a3;
  if ((a3 & 0x100000) != 0 && (*(_DWORD *)(a1 + 80) & 0x400000) != 0)
  {
    v82 = (unsigned int *)(a1 + 80);
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 & 0xFFBFFFFF, v82));
  }
  v37 = *(_DWORD *)(a1 + 80);
  v38 = (v37 << 8) & 0x3000000 | a3 & 0xFCFFFFF7 | 8;
  if (((v37 << 8) & 0x3000000) == 0)
    v38 = a3 | 8;
  v39 = v38 & 0x1000002;
  v40 = (unint64_t *)(a1 + 48);
  v41 = (uint64_t *)(a1 + 104);
  v91 = v38 & 0xFFFF0000;
  v94 = v38;
  v89 = v38 & 0xFFFDFFFF;
  v90 = (v38 >> 21) & 1;
  v88 = v4;
  v42 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v87 = v38 & 0x1000002;
  v86 = (unint64_t *)(a1 + 56);
  while (2)
  {
    while (2)
    {
      if (v39 == 2)
        _dispatch_last_resort_autorelease_pool_push(a2);
      v43 = *(_QWORD *)(a1 + 88);
      v98 = 0;
      v100 = 0u;
      *(_QWORD *)v95 = a1;
      v96 = a2;
      v97 = v89;
      v99 = 0;
      *(_QWORD *)&v100 = 0;
      BYTE8(v100) = 0;
      *(_OWORD *)&v95[8] = *(_OWORD *)(v42 + 160);
      *(_QWORD *)(v42 + 160) = a1;
      *(_QWORD *)(v42 + 168) = &v95[8];
      if (_dispatch_channel_invoke_cancel_check(a1, (uint64_t)v95, v43))
      {
        while (2)
        {
          v44 = v100;
          if (!(_QWORD)v100)
          {
            if (!*v40)
              goto LABEL_150;
            v44 = *v41;
            if (!*v41)
              v44 = _dispatch_wait_for_enqueuer((unint64_t *)(a1 + 104));
          }
          v45 = *(_QWORD *)v44;
          if (*(_QWORD *)v44 > 0xFFFuLL)
            goto LABEL_65;
          if ((v45 & 1) != 0)
            _dispatch_channel_invoke_VARIANT_mp_cold_4();
          if ((v45 & 0x400) == 0)
          {
LABEL_65:
            v46 = *(_QWORD *)(v44 + 16);
            *v41 = v46;
            if (!v46)
            {
              v47 = (uint64_t *)(v44 + 16);
              while (1)
              {
                v48 = __ldxr(v40);
                if (v48 != v44)
                  break;
                if (!__stlxr(0, v40))
                  goto LABEL_75;
              }
              __clrex();
              v46 = *v47;
              if (!*v47)
                v46 = _dispatch_wait_for_enqueuer((unint64_t *)(v44 + 16));
              *v41 = v46;
            }
LABEL_75:
            *(_QWORD *)&v100 = v46;
            v50 = *(void (***)(uint64_t))(v42 + 192);
            if (v50)
              (*v50)(a1);
            v51 = *(_QWORD *)v44;
            if (*(_QWORD *)v44 >= 0x1000uLL)
            {
              if (*(_QWORD *)(v51 + 40) == 1)
                (*(void (**)(uint64_t, _QWORD, _QWORD))(v51 + 48))(v44, 0, v90);
              else
                (*(void (**)(uint64_t, uint64_t, _QWORD))(v51 + 64))(v44, a2, v91);
              goto LABEL_141;
            }
            if ((v94 & 0x1000000) != 0)
            {
              v52 = (void *)MEMORY[0x18D766D94]();
              v51 = *(_QWORD *)v44;
            }
            else
            {
              v52 = 0;
            }
            v53 = *(_QWORD *)(v44 + 24);
            if ((v51 & 4) != 0)
              *(_QWORD *)(v44 + 24) = -1;
            v54 = *(_QWORD *)(v44 + 8);
            if (v54 == -1)
            {
              v57 = 0;
            }
            else
            {
              v55 = *(_QWORD *)(v42 + 200);
              if (((v55 >> 8) & 0xF) != 0)
                v56 = 256 << ((BYTE1(v55) & 0xFu) - 1);
              else
                v56 = 0;
              v57 = v56 & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(v42 + 200);
              v58 = v54 & 0xFFFFFF;
              if ((v54 & 0xFFFFFF) != 0)
              {
                v59 = v56 & 0xFFFFFF00;
                if ((v55 & 0x44000000) == 0 && (*(_QWORD *)(v44 + 8) & 0x10000000) == 0)
                  v61 = v57;
                else
                  v61 = v54 & 0xFFFFFF;
                if (v58 >= v59)
                  v57 = v61;
              }
              else if ((unsigned __int16)v55 >> 12)
              {
                v57 = (256 << (((unsigned __int16)v55 >> 12) - 1)) | 0xFF;
              }
            }
            v62 = v51 & 4;
            v63 = v57 & 0xFFFFFFFF02FFFFFFLL;
            v64 = *(_QWORD *)(v42 + 32);
            if ((v64 & 0x1000000) != 0)
            {
              if (!v63)
              {
                v63 = v64 & 0xFFFFFFFFFEFFFFFFLL;
                goto LABEL_124;
              }
LABEL_130:
              _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v63, v53, v62 | 2);
            }
            else
            {
              if (v63 == (v64 & 0xFFFFFFFF77FFFFFFLL))
                goto LABEL_103;
LABEL_124:
              if (v63)
                goto LABEL_130;
LABEL_103:
              if (v53 != -1)
              {
                if (*(_QWORD *)(v42 + 224) != v53)
                {
                  v63 = 0;
                  goto LABEL_130;
                }
                if ((v51 & 4) != 0 && v53)
                {
                  v65 = (unsigned int *)(v53 + 12);
                  do
                  {
                    v66 = __ldxr(v65);
                    v67 = __OFSUB__(v66, 1);
                    v68 = v66 - 1;
                  }
                  while (__stxr(v68, v65));
                  if ((v68 < 0) ^ v67 | (v68 == 0))
                    _dispatch_async_redirect_invoke_cold_1();
LABEL_132:
                  v69 = *(_QWORD *)(v42 + 176);
                  if (v69)
                    v70 = *(_DWORD *)(v69 + 8) + 1;
                  else
                    v70 = 1;
                  v62 = v44;
                  if (v70 <= _dispatch_continuation_cache_limit)
                  {
                    v62 = 0;
                    *(_QWORD *)(v44 + 16) = v69;
                    *(_DWORD *)(v44 + 8) = v70;
                    *(_QWORD *)(v42 + 176) = v44;
                  }
LABEL_137:
                  if ((v51 & 8) == 0)
                  {
                    _dispatch_client_callout(*(_QWORD *)(v44 + 40), *(uint64_t (**)(void))(v44 + 32));
                    if (!v62)
                      goto LABEL_139;
LABEL_148:
                    _dispatch_continuation_free_to_cache_limit_VARIANT_mp(v62);
                    if (!v52)
                      goto LABEL_141;
LABEL_140:
                    objc_autoreleasePoolPop(v52);
                    goto LABEL_141;
                  }
                  v72 = *(_QWORD *)(v44 + 48);
                  v73 = *(_QWORD *)(*(_QWORD *)v72 + 40);
                  if (v73 != 514)
                    _dispatch_queue_override_invoke_cold_1(v73);
                  _dispatch_client_callout(*(_QWORD *)(v44 + 40), *(uint64_t (**)(void))(v44 + 32));
                  dispatch_group_leave_VARIANT_mp(v72);
                  if (v62)
                    goto LABEL_148;
LABEL_139:
                  if (v52)
                    goto LABEL_140;
LABEL_141:
                  if (v50)
                    v50[1](a1);
                  if (!_dispatch_channel_invoke_checks(a1, (uint64_t)v95, v43))
                    goto LABEL_150;
LABEL_144:
                  v71 = (__objc2_class **)v99;
                  if (v99)
                    goto LABEL_151;
                  continue;
                }
              }
            }
            if ((v51 & 4) != 0)
              goto LABEL_132;
            goto LABEL_137;
          }
          break;
        }
        *(_QWORD *)&v100 = v44;
        BYTE8(v100) = 0;
        if ((v97 & 0x1000000) != 0)
          v49 = (void *)MEMORY[0x18D766D94]();
        else
          v49 = 0;
        if ((*(unsigned int (**)(uint64_t, _BYTE *, _QWORD))(v43 + 16))(a1, v95, *(_QWORD *)(a1 + 32)))
        {
          if (!BYTE8(v100))
            _dispatch_channel_invoke_VARIANT_mp_cold_3();
          if (!v49)
            goto LABEL_144;
        }
        else
        {
          v99 = -1;
          if (!v49)
            goto LABEL_144;
        }
        objc_autoreleasePoolPop(v49);
        goto LABEL_144;
      }
LABEL_150:
      v71 = (__objc2_class **)v99;
LABEL_151:
      v74 = (__objc2_class ***)(v42 + 160);
      *(_OWORD *)(v42 + 160) = *(_OWORD *)&v95[8];
      v39 = v87;
      v75 = v88;
      if (v87 == 2)
      {
        *(_OWORD *)v95 = *(_OWORD *)v74;
        *(_QWORD *)(v42 + 160) = a1;
        *(_QWORD *)(v42 + 168) = v95;
        _dispatch_last_resort_autorelease_pool_pop(a2);
        *(_OWORD *)v74 = *(_OWORD *)v95;
      }
      if ((unint64_t)v71 + 1 > 1)
        goto LABEL_170;
      while (2)
      {
        v76 = __ldxr(v86);
        v77 = (v76 - v88) & 0xFFFFFFF700000001;
        if (v76 >> 55)
        {
LABEL_158:
          if (!__stlxr(v77, v86))
          {
            if ((~v76 & 0x1800000000) != 0
              || (v79 = HIDWORD(v76) & 7, v80 = *(_DWORD *)(v42 + 200), (HIWORD(v80) & 0xF) >= v79))
            {
              v75 = 0;
              v71 = 0;
            }
            else
            {
              v75 = 0;
              v71 = 0;
              *(_QWORD *)(v42 + 200) = v80 & 0xFFF0FFFF | ((_DWORD)v79 << 16);
            }
            goto LABEL_170;
          }
          continue;
        }
        break;
      }
      if ((v76 & 0x8000000000) == 0)
      {
        if (v71)
          v77 = (v76 - v88) & 0xFFFFFF7700000001 | 0x8000000000;
        else
          v77 = (v76 - v88) & 0xFFFFFFF000000001;
        goto LABEL_158;
      }
      __clrex();
      do
        v78 = __ldaxr(v86);
      while (__stxr(v78 ^ 0x8000000000, v86));
      if ((v84 & 1) != 0)
        continue;
      break;
    }
    v71 = *v74;
    if (((uint64_t)(**v74)[1].isa & 0x10000) != 0)
      continue;
    break;
  }
LABEL_170:
  if ((v94 & 0x40000) == 0)
    *(_QWORD *)(v42 + 200) = *(_QWORD *)(v42 + 200) & 0xF0000 | v85;
  if (v71)
    return _dispatch_queue_invoke_finish_VARIANT_mp((unint64_t *)a1, a2, v71, v75);
  return (unsigned int *)_os_object_release_internal_n_VARIANT_mp((void *)a1, (const char *)2);
}

uint64_t dispatch_channel_foreach_work_item_peek_f_VARIANT_mp(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD))
{
  _QWORD *v3;
  _QWORD *v6;

  if (*(_BYTE *)(result + 56))
    dispatch_channel_foreach_work_item_peek_f_VARIANT_mp_cold_1();
  v3 = *(_QWORD **)(result + 48);
  if ((*v3 & 0xFFFFFFFFFFFFF400) == 0x400)
  {
    v6 = (_QWORD *)(*(_QWORD *)result + 48);
    do
    {
      result = a3(a2, v3[5]);
      if (!(_DWORD)result || v3 == (_QWORD *)*v6)
        break;
      result = v3[2];
      if (!result)
        result = _dispatch_wait_for_enqueuer(v3 + 2);
      v3 = (_QWORD *)result;
    }
    while ((*(_QWORD *)result & 0xFFFFFFFFFFFFF400) == 0x400);
  }
  return result;
}

void dispatch_channel_drain_f_VARIANT_mp(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD, uint64_t *))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v7;
  unint64_t *v8;
  _QWORD *StatusReg;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  BOOL v27;
  signed int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  int v43;
  int v44;
  uint64_t v45;
  unint64_t v47;
  uint64_t v49;

  v49 = 0;
  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  if (*(_BYTE *)(a1 + 56))
    dispatch_channel_drain_f_VARIANT_mp_cold_3();
  *(_BYTE *)(a1 + 56) = 1;
  v7 = (unint64_t *)(v3 + 48);
  v8 = (unint64_t *)(v3 + 104);
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    v10 = *(_QWORD **)(a1 + 48);
    if (!v10)
    {
      if (!*v7)
        break;
      v10 = (_QWORD *)*v8;
      if (!*v8)
        v10 = (_QWORD *)_dispatch_wait_for_enqueuer(v8);
    }
    if ((*v10 & 0xFFFFFFFFFFFFF400) != 0x400)
      break;
    v11 = v10[2];
    *v8 = v11;
    if (!v11)
    {
      v12 = v10 + 2;
      while (1)
      {
        v13 = __ldxr(v7);
        if ((_QWORD *)v13 != v10)
          break;
        if (!__stlxr(0, v7))
          goto LABEL_13;
      }
      __clrex();
      v11 = *v12;
      if (!*v12)
        v11 = _dispatch_wait_for_enqueuer(v10 + 2);
      *v8 = v11;
    }
LABEL_13:
    *(_QWORD *)(a1 + 48) = v11;
    v14 = v10[3];
    v10[3] = -1;
    v15 = v10[1];
    if (v15 == -1)
    {
      v18 = 0;
    }
    else
    {
      v16 = StatusReg[25];
      v17 = ((v16 >> 8) & 0xF) != 0 ? 256 << ((BYTE1(v16) & 0xFu) - 1) : 0;
      v18 = v17 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
      v19 = v15 & 0xFFFFFF;
      if ((v15 & 0xFFFFFF) != 0)
      {
        v20 = v17 & 0xFFFFFF00;
        if ((v16 & 0x44000000) == 0 && (v10[1] & 0x10000000) == 0)
          v22 = v18;
        else
          v22 = v15 & 0xFFFFFF;
        if (v19 >= v20)
          v18 = v22;
      }
      else if ((unsigned __int16)v16 >> 12)
      {
        v18 = (256 << (((unsigned __int16)v16 >> 12) - 1)) | 0xFF;
      }
    }
    v23 = v18 & 0xFFFFFFFF02FFFFFFLL;
    v24 = StatusReg[4];
    if ((v24 & 0x1000000) != 0)
    {
      if (v23)
        goto LABEL_61;
      v23 = v24 & 0xFFFFFFFFFEFFFFFFLL;
    }
    else if (v23 == (v24 & 0xFFFFFFFF77FFFFFFLL))
    {
      goto LABEL_30;
    }
    if (v23)
      goto LABEL_61;
LABEL_30:
    if (v14 == -1)
      goto LABEL_36;
    if (StatusReg[28] != v14)
    {
      v23 = 0;
LABEL_61:
      _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v23, v14, 6);
      goto LABEL_36;
    }
    if (v14)
    {
      v25 = (unsigned int *)(v14 + 12);
      do
      {
        v26 = __ldxr(v25);
        v27 = __OFSUB__(v26, 1);
        v28 = v26 - 1;
      }
      while (__stxr(v28, v25));
      if ((v28 < 0) ^ v27 | (v28 == 0))
        _dispatch_async_redirect_invoke_cold_1();
    }
LABEL_36:
    v29 = StatusReg[22];
    if (v29)
      v30 = *(_DWORD *)(v29 + 8) + 1;
    else
      v30 = 1;
    v31 = (uint64_t)v10;
    if (v30 <= _dispatch_continuation_cache_limit)
    {
      v31 = 0;
      v10[2] = v29;
      *((_DWORD *)v10 + 2) = v30;
      StatusReg[22] = v10;
    }
    if ((*(_BYTE *)(a1 + 35) & 1) != 0)
    {
      v33 = v3;
      v34 = v8;
      v35 = MEMORY[0x18D766D94]();
      v32 = a3(a2, v10[5], &v49);
      v36 = (void *)v35;
      v8 = v34;
      v3 = v33;
      objc_autoreleasePoolPop(v36);
    }
    else
    {
      v32 = a3(a2, v10[5], &v49);
    }
    if (!v31)
    {
      if (!v32)
        break;
      continue;
    }
    _dispatch_continuation_free_to_cache_limit_VARIANT_mp(v31);
    if (!v32)
      break;
  }
  while ((_dispatch_channel_invoke_checks(v3, a1, v4) & 1) != 0);
  v37 = v49;
  if (v49)
  {
    v38 = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v39 = (_QWORD *)v38[22];
    if (v39)
    {
      v38[22] = v39[2];
    }
    else
    {
      v39 = _dispatch_continuation_alloc_from_heap_VARIANT_mp();
      v37 = v49;
    }
    *v39 = 1284;
    v39[4] = 0;
    v39[5] = v37;
    v40 = v38[4] & 0xFFFFFFLL;
    if (v40 >= 0x10FF)
      v40 = 4351;
    v41 = v38[28];
    if (v41)
    {
      v42 = (unsigned int *)(v41 + 12);
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
      if (v43 <= 0)
        dispatch_group_notify_VARIANT_mp_cold_3();
    }
    v39[3] = v41;
    if (v40)
    {
      v44 = (*(_DWORD *)(v3 + 84) >> 30) & 1;
      if ((*(_DWORD *)(v3 + 84) & 0xFFF) == 0)
        v44 = 1;
      if (!v44)
        v40 = 0;
    }
    v39[1] = v40;
    v45 = *(_QWORD *)(a1 + 48);
    v39[2] = v45;
    if (!v45)
    {
      while (!__ldxr(v7))
      {
        if (!__stlxr((unint64_t)v39, v7))
          goto LABEL_85;
      }
      __clrex();
      v47 = *v8;
      if (!*v8)
        v47 = _dispatch_wait_for_enqueuer(v8);
      v39[2] = v47;
    }
LABEL_85:
    *v8 = (unint64_t)v39;
    *(_QWORD *)(a1 + 48) = v39;
  }
}

uint64_t _dispatch_channel_invoke_checks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unint64_t StatusReg;

  result = _dispatch_channel_invoke_cancel_check(a1, a2, a3);
  if ((_DWORD)result)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    if (*(_QWORD *)(StatusReg + 40))
      _dispatch_return_to_kernel();
    if ((*(_BYTE *)(a2 + 34) & 0x10) != 0
      && (*(_DWORD *)(*(_QWORD *)(StatusReg + 216) + 60) & 7u) > *(unsigned __int8 *)(*(_QWORD *)(StatusReg + 216)
                                                                                      + 100)
      || (*(_BYTE *)(StatusReg + 960) & 1) != 0
      || *(_QWORD *)(a1 + 56) >> 55)
    {
      result = 0;
      *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 24);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t dispatch_channel_foreach_work_item_peek_VARIANT_mp(uint64_t a1, uint64_t a2)
{
  return dispatch_channel_foreach_work_item_peek_f_VARIANT_mp(a1, a2, *(uint64_t (**)(uint64_t, _QWORD))(a2 + 16));
}

void dispatch_channel_drain_VARIANT_mp(uint64_t a1, uint64_t a2)
{
  dispatch_channel_drain_f_VARIANT_mp(a1, a2, *(uint64_t (**)(uint64_t, _QWORD, uint64_t *))(a2 + 16));
}

void _dispatch_channel_wakeup_VARIANT_mp(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 88) + 8))(a1, *(_QWORD *)(a1 + 32)))
  {
    if (*(_QWORD *)(a1 + 48))
      v6 = 1;
    else
      v6 = (*(_DWORD *)(a1 + 80) & 0x10000000) != 0 && (*(_WORD *)(a1 + 116) & 8) == 0;
  }
  else
  {
    v6 = -1;
  }
  _dispatch_queue_wakeup_VARIANT_mp(a1, a2, a3, v6);
}

uint64_t dispatch_channel_create_VARIANT_mp(const char *a1, __objc2_class **a2, uint64_t a3, _QWORD *a4)
{
  __objc2_class **v6;
  int v8;
  const char *v9;
  unsigned int *v10;
  int v11;
  uint64_t result;
  unint64_t v13;

  if (!*a4)
    dispatch_channel_create_VARIANT_mp_cold_1();
  v6 = a2;
  v8 = 67108865;
  if (!a1)
  {
    v9 = 0;
    if (a2)
      goto LABEL_7;
LABEL_19:
    v6 = &off_1ECCEA100;
    goto LABEL_11;
  }
  v9 = _dispatch_strdup_if_mutable(a1);
  if (v9 == a1)
    v8 = 67108865;
  else
    v8 = 69206017;
  if (!v6)
    goto LABEL_19;
LABEL_7:
  if (*((_DWORD *)v6 + 2) != 0x7FFFFFFF)
  {
    v10 = (unsigned int *)(v6 + 1);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    if (v11 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
LABEL_11:
  result = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_channel, 120);
  *(_DWORD *)(result + 8) += 2;
  if (*(_BYTE *)(*(_QWORD *)result + 40) == 19)
    ++*(_DWORD *)(result + 8);
  *(_QWORD *)(result + 16) = -1985229329;
  *(_DWORD *)(result + 80) = v8;
  *(_QWORD *)(result + 56) = 0x19FFE0000000000;
  do
    v13 = __ldxr(&_dispatch_queue_serial_numbers);
  while (__stxr(v13 + 1, &_dispatch_queue_serial_numbers));
  *(_QWORD *)(result + 64) = v13;
  *(_QWORD *)(result + 72) = v9;
  *(_QWORD *)(result + 88) = a4;
  *(_QWORD *)(result + 24) = v6;
  *(_QWORD *)(result + 32) = a3;
  if (!a4[3])
  {
    *(_WORD *)(result + 116) |= 8u;
    --*(_DWORD *)(result + 8);
  }
  return result;
}

_DWORD *dispatch_channel_enqueue_VARIANT_mp(_DWORD *result, uint64_t a2)
{
  _QWORD *StatusReg;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  int v8;
  int v9;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v4 = (_QWORD *)StatusReg[22];
  if (!v4)
    return _dispatch_channel_enqueue_slow(result, a2);
  StatusReg[22] = v4[2];
  *v4 = 1284;
  v4[4] = 0;
  v4[5] = a2;
  v5 = StatusReg[4] & 0xFFFFFFLL;
  if (v5 >= 0x10FF)
    v5 = 4351;
  v6 = StatusReg[28];
  if (!v6)
    goto LABEL_8;
  v7 = (unsigned int *)(v6 + 12);
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  if (v8 <= 0)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
  else
  {
LABEL_8:
    v4[3] = v6;
    if (v5)
    {
      v9 = result[21];
      if ((v9 & 0x40000000) == 0 && (v9 & 0xFFF) != 0)
        v5 = 0;
    }
    v4[1] = v5;
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 88))(result);
  }
  return result;
}

_QWORD *_dispatch_channel_enqueue_slow(_DWORD *a1, uint64_t a2)
{
  _QWORD *result;
  unint64_t StatusReg;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  int v9;
  int v10;

  result = _dispatch_continuation_alloc_from_heap_VARIANT_mp();
  *result = 1284;
  result[4] = 0;
  result[5] = a2;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
  if (v6 >= 0x10FF)
    v6 = 4351;
  v7 = *(_QWORD *)(StatusReg + 224);
  if (!v7)
    goto LABEL_7;
  v8 = (unsigned int *)(v7 + 12);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  if (v9 <= 0)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
  else
  {
LABEL_7:
    result[3] = v7;
    if (v6)
    {
      v10 = a1[21];
      if ((v10 & 0x40000000) == 0 && (v10 & 0xFFF) != 0)
        v6 = 0;
    }
    result[1] = v6;
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 88))(a1);
  }
  return result;
}

uint64_t dispatch_channel_wakeup_VARIANT_mp(uint64_t a1, int a2)
{
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;

  HIDWORD(v3) = a2 - 5;
  LODWORD(v3) = a2 - 5;
  v2 = v3 >> 2;
  if (v2 > 7)
    v4 = 0;
  else
    v4 = dword_18A06E660[v2];
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v4, 2);
}

_QWORD *_dispatch_mgr_queue_push_VARIANT_mp(_QWORD *result, _QWORD *a2)
{
  unint64_t *v3;
  unint64_t StatusReg;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  if (*a2 <= 0xFFFuLL && (*a2 & 0x81) != 0)
    _dispatch_mgr_queue_push_VARIANT_mp_cold_1();
  a2[2] = 0;
  v3 = result + 6;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_QWORD *)(StatusReg + 976) = result + 6;
  do
    v5 = __ldxr(v3);
  while (__stlxr((unint64_t)a2, v3));
  if (v5)
  {
    *(_QWORD *)(v5 + 16) = a2;
    *(_QWORD *)(StatusReg + 976) = 0;
  }
  else
  {
    result[13] = a2;
    *(_QWORD *)(StatusReg + 976) = 0;
    v6 = result + 7;
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 | 0x8000000000, v6));
    if (((v7 ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) != 0)
      return _dispatch_event_loop_poke_VARIANT_mp((_QWORD *)0xFFFFFFFFFFFFFFF8, 0, 0);
  }
  return result;
}

void _dispatch_mgr_queue_wakeup_VARIANT_mp()
{
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Don't try to wake up or override the manager";
  __break(1u);
}

void _dispatch_kevent_workqueue_init_VARIANT_mp()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (_dispatch_root_queues_pred != -1)
    dispatch_once_f_VARIANT_mp((unint64_t *)&_dispatch_root_queues_pred, 0, _dispatch_root_queues_init_once);
  if (_dispatch_mgr_sched_pred != -1)
    dispatch_once_f_VARIANT_mp((unint64_t *)&_dispatch_mgr_sched_pred, 0, _dispatch_mgr_sched_init);
  v0 = _dispatch_mgr_sched;
  if (dword_1ECCEA51C)
    v1 = _pthread_qos_class_encode();
  else
    v1 = 0;
  if ((int)v0 > dword_1ECCEA520)
    v1 = v0 | 0x20000000;
  if (v1)
  {
    v2 = _pthread_workqueue_set_event_manager_priority();
    if (v2)
      _dispatch_bug(6510, v2);
  }
}

uint64_t _dispatch_mgr_sched_init()
{
  int v0;
  int v1;
  int v2;
  uint64_t result;
  int v4;
  int sched_priority;
  unsigned int v6;
  unint64_t v7;
  sched_param v8;
  pthread_attr_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C874D8];
  v8 = 0;
  memset(&v9, 0, sizeof(v9));
  v0 = pthread_attr_init(&v9);
  if (v0)
    _dispatch_bug(6165, v0);
  v1 = pthread_attr_getschedpolicy(&v9, dword_1ECCEA524);
  if (v1)
    _dispatch_bug(6167, v1);
  v2 = pthread_attr_getschedparam(&v9, &v8);
  if (v2)
    _dispatch_bug(6168, v2);
  result = qos_class_main();
  if ((_DWORD)result == 21)
    v4 = 25;
  else
    v4 = result;
  if (v4)
  {
    dword_1ECCEA51C = v4;
    if (v4 == 5)
    {
      sched_priority = 4;
    }
    else
    {
      HIDWORD(v7) = v4 - 9;
      LODWORD(v7) = v4 - 9;
      v6 = v7 >> 2;
      if (v6 > 6)
        sched_priority = 0;
      else
        sched_priority = dword_18A06E6E0[v6];
    }
  }
  else
  {
    sched_priority = v8.sched_priority;
  }
  dword_1ECCEA520 = sched_priority;
  _dispatch_mgr_sched = sched_priority;
  return result;
}

void _dispatch_root_queue_poke_VARIANT_mp(unsigned int *a1, signed int a2, int a3)
{
  uint64_t v3;
  unsigned int *v5;

  if (*((_QWORD *)a1 + 6))
  {
    v3 = *(_QWORD *)(*(_QWORD *)a1 + 40);
    if (v3 == 330001 || v3 == 328465)
    {
      v5 = a1 + 28;
      while (!__ldxr(v5))
      {
        if (!__stlxr(a2, v5))
          goto LABEL_10;
      }
      __clrex();
    }
    else
    {
LABEL_10:
      _dispatch_root_queue_poke_slow(a1, a2, a3);
    }
  }
}

void _dispatch_root_queue_poke_slow(unsigned int *a1, signed int a2, int a3)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v10;
  unsigned int *v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  pthread_t v22;

  LODWORD(v3) = a3;
  if (_dispatch_root_queues_pred != -1)
LABEL_43:
    dispatch_once_f_VARIANT_mp((unint64_t *)&_dispatch_root_queues_pred, 0, _dispatch_root_queues_init_once);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if (v6 == 330001)
  {
    v21 = _pthread_workqueue_add_cooperativethreads();
    if (v21)
      _dispatch_bug(6848, v21);
  }
  else if (v6 == 328465)
  {
    v20 = _pthread_workqueue_addthreads();
    if (v20)
      _dispatch_bug(6840, v20);
  }
  else
  {
    v7 = *((_QWORD *)a1 + 4);
    if (*(_QWORD *)(v7 + 72))
    {
      while (dispatch_semaphore_signal_VARIANT_mp(v7 + 72))
      {
        if (!--a2)
          return;
      }
    }
    v8 = a1 + 28;
    if ((a1[21] & 0x80000000) != 0)
    {
      do
        v10 = __ldxr(v8);
      while (__stxr(v10 + a2, v8));
    }
    else
    {
      do
      {
        if (__ldxr(v8))
        {
          __clrex();
          return;
        }
      }
      while (__stxr(a2, v8));
    }
    v11 = a1 + 25;
    v12 = a1[25];
    while (1)
    {
      v13 = v12 - (_DWORD)v3;
      if (v12 < (int)v3)
        v13 = 0;
      if (a2 > v13)
      {
        do
          v14 = __ldxr(v8);
        while (__stxr(v14 - (a2 - v13), v8));
        a2 = v13;
      }
      if (!a2)
        break;
      while (1)
      {
        v15 = __ldaxr(v11);
        if (v15 != v12)
          break;
        if (!__stxr(v12 - a2, v11))
        {
          v16 = 1;
          goto LABEL_26;
        }
      }
      v16 = 0;
      __clrex();
LABEL_26:
      v12 = v15;
      if (v16)
      {
        v22 = 0;
        v17 = a1 + 2;
        v3 = _dispatch_worker_thread;
LABEL_28:
        if (*v17 != 0x7FFFFFFF)
        {
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
          if (v18 < 1)
          {
            qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
            __break(1u);
            goto LABEL_43;
          }
        }
        while (1)
        {
          v19 = pthread_create(&v22, (const pthread_attr_t *)v7, (void *(__cdecl *)(void *))_dispatch_worker_thread, a1);
          if (v19 != 35)
          {
            if (!v19)
            {
              if (!--a2)
                return;
              goto LABEL_28;
            }
            _dispatch_bug(6907, v19);
          }
          _dispatch_temporary_resource_shortage();
        }
      }
    }
  }
}

void _dispatch_root_queue_poke_and_wakeup_VARIANT_mp(unsigned int *a1, signed int a2, int a3)
{
  uint64_t v3;
  unsigned int *v5;
  signed int v6;
  BOOL v7;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if (v3 != 330001 && v3 != 328465)
    goto LABEL_12;
  v5 = a1 + 28;
  do
  {
    v6 = __ldxr(v5);
    v7 = v6 <= 0;
    if (!v6)
      v6 = a2;
  }
  while (__stlxr(v6, v5));
  if (v7)
LABEL_12:
    _dispatch_root_queue_poke_slow(a1, a2, a3);
}

unsigned int *_dispatch_root_queue_wakeup_VARIANT_mp(unsigned int *result, uint64_t a2, char a3)
{
  uint64_t v3;

  if ((a3 & 8) != 0)
  {
    if ((a3 & 1) != 0)
      return (unsigned int *)_os_object_release_internal_n_VARIANT_mp(result, (const char *)2);
  }
  else
  {
    v3 = result[21];
    qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Don't try to wake up or override a root queue";
    qword_1EDF52D38 = v3;
    __break(1u);
  }
  return result;
}

void _dispatch_root_queue_push_VARIANT_mp(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t StatusReg;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;

  v3 = a3;
  v4 = a1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = *(_QWORD *)(StatusReg + 232);
  if (v6 && *(_BYTE *)(v6 + 44) && ((v7 = *(_QWORD **)(v6 + 8), v13 = *(_DWORD *)(a1 + 84), !v7) || v13 < 0))
  {
    v14 = *(_QWORD *)v6;
    v15 = *(_DWORD *)(v6 + 16);
    *(_QWORD *)v6 = a1;
    *(_QWORD *)(v6 + 8) = a2;
    *(_DWORD *)(v6 + 16) = a3;
    if (v13 < 0)
      *(_BYTE *)(v6 + 44) = 0;
    if (!v7)
      return;
    v3 = v15;
    v4 = v14;
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_DWORD *)(v4 + 84);
  if ((v8 & 0x8000000) != 0 && *v7 >= 0x1000uLL && *(_QWORD *)(*v7 + 40) != 1)
  {
    if (*(_QWORD *)(*v7 + 40) != 19
      || !_dispatch_source_is_timer_VARIANT_mp((uint64_t)v7))
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot target the cooperative root queue - not implemented";
      qword_1EDF52D38 = (uint64_t)v7;
      __break(1u);
      return;
    }
    v8 = *(_DWORD *)(v4 + 84);
  }
  if ((unsigned __int16)v8 >> 12)
  {
    if (v3 && (unsigned __int16)v8 >> 12 != v3)
    {
LABEL_13:
      _dispatch_root_queue_push_override(v4, v7, v3);
      return;
    }
  }
  else
  {
    v9 = (v8 >> 8) & 0xF;
    if (v9)
      v10 = v9 >= v3;
    else
      v10 = 1;
    if (!v10)
      goto LABEL_13;
  }
  v7[2] = 0;
  v11 = (unint64_t *)(v4 + 48);
  *(_QWORD *)(StatusReg + 976) = v4 + 48;
  do
    v12 = __ldxr(v11);
  while (__stlxr((unint64_t)v7, v11));
  if (v12)
  {
    *(_QWORD *)(v12 + 16) = v7;
    *(_QWORD *)(StatusReg + 976) = 0;
  }
  else
  {
    *(_QWORD *)(v4 + 104) = v7;
    *(_QWORD *)(StatusReg + 976) = 0;
    _dispatch_root_queue_poke_and_wakeup_VARIANT_mp((unsigned int *)v4, 1, 0);
  }
}

void _dispatch_root_queue_push_override(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  __objc2_class **v3;
  unint64_t v5;
  int v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t StatusReg;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __objc2_class **v16;

  v5 = (unint64_t)a2;
  v7 = *(_DWORD *)(a1 + 84);
  v8 = (v7 >> 25) & 4;
  if (v7 < 0)
    v9 = 2;
  else
    v9 = (v7 >> 25) & 4;
  if (*a2 >= 0x1000uLL && *(_QWORD *)(*a2 + 40) == 256)
  {
    a2[4] = a1;
  }
  else
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v11 = *(_QWORD **)(StatusReg + 176);
    if (v11)
      *(_QWORD *)(StatusReg + 176) = v11[2];
    else
      v11 = _dispatch_continuation_alloc_from_heap_VARIANT_mp();
    v11[6] = v5;
    v11[7] = a1;
    v11[5] = v11;
    v8 = -1;
    *v11 = &unk_1E1E86830;
    v11[1] = -1;
    v11[3] = -1;
    v5 = (unint64_t)v11;
  }
  if (a3 - 7 <= 0xFFFFFFF9)
  {
    v13 = a3;
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupted priority";
    qword_1EDF52D38 = a3;
    __break(1u);
  }
  else
  {
    v12 = 2 * (v9 > 3);
    if ((v9 & 2) != 0)
      v12 = 1;
    v13 = 3 * a3 + v12 - 3;
    *(_QWORD *)(v5 + 16) = 0;
    v3 = &_dispatch_root_queues;
    v14 = (unint64_t *)(&_dispatch_root_queues + 16 * v13 + 6);
    v8 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(_QWORD *)(v8 + 976) = v14;
    do
      v15 = __ldxr(v14);
    while (__stlxr(v5, v14));
    if (v15)
    {
      *(_QWORD *)(v15 + 16) = v5;
      *(_QWORD *)(v8 + 976) = 0;
      return;
    }
  }
  v16 = &v3[16 * v13];
  v16[13] = (__objc2_class *)v5;
  *(_QWORD *)(v8 + 976) = 0;
  _dispatch_root_queue_poke_and_wakeup_VARIANT_mp((unsigned int *)v16, 1, 0);
}

uint64_t dispatch_pthread_root_queue_create_VARIANT_mp(const char *a1, int a2, __int128 *a3, void *a4)
{
  return _dispatch_pthread_root_queue_create(a1, a2, a3, a4, 0);
}

uint64_t _dispatch_pthread_root_queue_create(const char *a1, int a2, __int128 *a3, void *a4, _OWORD *a5)
{
  int v8;
  int v9;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  int v22;

  if (a2 < 0)
    v8 = (char)a2;
  else
    v8 = 0;
  v9 = 4095;
  if (a1)
  {
    v11 = _dispatch_strdup_if_mutable(a1);
    if (v11 == a1)
      v9 = 4095;
    else
      v9 = 2101247;
  }
  else
  {
    v11 = 0;
  }
  v12 = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_queue_pthread_root, 320);
  v13 = v12;
  *(_QWORD *)(v12 + 16) = -1985229329;
  *(_DWORD *)(v12 + 80) = v9;
  *(_QWORD *)(v12 + 56) = 0x20000000000;
  do
    v14 = __ldxr(&_dispatch_queue_serial_numbers);
  while (__stxr(v14 + 1, &_dispatch_queue_serial_numbers));
  *(_QWORD *)(v12 + 64) = v14;
  *(_QWORD *)(v12 + 72) = v11;
  *(_QWORD *)(v12 + 56) = 0x60000000000000;
  *(_DWORD *)(v12 + 84) = 0x80000000;
  v15 = (_OWORD *)(v12 + 120);
  *(_QWORD *)(v12 + 32) = v12 + 120;
  if (v8 >= 32 || v8 == 0)
    v17 = 32;
  else
    v17 = v8;
  *(_DWORD *)(v12 + 100) = v17;
  *(_QWORD *)(v12 + 192) = OS_dispatch_semaphore;
  *(_DWORD *)(v12 + 256) = 0;
  _dispatch_sema4_create_slow_VARIANT_mp((unsigned int *)(v12 + 256), 2);
  if (a3)
  {
    v18 = *a3;
    v19 = a3[1];
    v20 = a3[3];
    *(_OWORD *)(v13 + 152) = a3[2];
    *(_OWORD *)(v13 + 168) = v20;
    *v15 = v18;
    *(_OWORD *)(v13 + 136) = v19;
    _dispatch_mgr_priority_raise((pthread_attr_t *)(v13 + 120));
  }
  else
  {
    v21 = pthread_attr_init((pthread_attr_t *)(v13 + 120));
    if (v21)
      _dispatch_bug(7641, v21);
  }
  v22 = pthread_attr_setdetachstate((pthread_attr_t *)(v13 + 120), 2);
  if (!v22)
  {
    if (!a4)
      goto LABEL_24;
    goto LABEL_23;
  }
  _dispatch_bug(7644, v22);
  if (a4)
LABEL_23:
    *(_QWORD *)(v13 + 184) = _dispatch_Block_copy(a4);
LABEL_24:
  if (a5)
    *(_OWORD *)(v13 + 264) = *a5;
  return v13;
}

uint64_t _dispatch_pthread_root_queue_create_with_observer_hooks_4IOHID_VARIANT_mp(const char *a1, int a2, __int128 *a3, uint64_t a4, void *a5)
{
  if (!*(_QWORD *)a4 || !*(_QWORD *)(a4 + 8))
    _dispatch_pthread_root_queue_create_with_observer_hooks_4IOHID_VARIANT_mp_cold_1();
  return _dispatch_pthread_root_queue_create(a1, a2, a3, a5, (_OWORD *)a4);
}

BOOL _dispatch_queue_is_exclusively_owned_by_current_thread_4IOHID_VARIANT_mp(uint64_t a1)
{
  int v2;
  uint64_t v3;

  v2 = *(unsigned __int16 *)(a1 + 80);
  if (v2 != 1)
    _dispatch_queue_is_exclusively_owned_by_current_thread_4IOHID_VARIANT_mp_cold_1(v2);
  v3 = *(_QWORD *)(a1 + 56);
  return ((v3 ^ *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24)) & 0xFFFFFFFC) == 0;
}

uint64_t dispatch_pthread_root_queue_copy_current_VARIANT_mp()
{
  uint64_t v0;
  uint64_t v1;

  v0 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160);
  if (!v0)
    return 0;
  do
  {
    v1 = v0;
    v0 = *(_QWORD *)(v0 + 24);
  }
  while (v0);
  if (*(_QWORD *)(*(_QWORD *)v1 + 40) != 328721)
    return 0;
  _os_object_retain_with_resurrect_VARIANT_mp(v1);
  return v1;
}

void _dispatch_pthread_root_queue_dispose_VARIANT_mp(uint64_t *a1, _BYTE *a2)
{
  pthread_attr_t *v4;
  const void *sig;

  v4 = (pthread_attr_t *)a1[4];
  pthread_attr_destroy(v4);
  _dispatch_semaphore_dispose_VARIANT_mp((uint64_t)v4[1].__opaque);
  sig = (const void *)v4[1].__sig;
  if (sig)
    _Block_release(sig);
  a1[3] = (uint64_t)&unk_1ECCEA080;
  _dispatch_lane_class_dispose_VARIANT_mp(a1, a2);
}

void _dispatch_runloop_queue_wakeup_VARIANT_mp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  if ((*(_DWORD *)(a1 + 80) & 0x800000) != 0)
    goto LABEL_16;
  if ((a3 & 2) == 0)
    goto LABEL_19;
  v3 = (unint64_t *)(a1 + 56);
  do
    v4 = __ldxr(v3);
  while (__stlxr(v4 | 0x8000000000, v3));
  if ((v4 & 0xFFFFFFFC) == 0)
  {
LABEL_16:
    _dispatch_lane_wakeup_VARIANT_mp(a1, a2, a3);
  }
  else
  {
LABEL_19:
    if (*(_QWORD *)(a1 + 48))
    {
      _dispatch_runloop_queue_poke((unint64_t *)a1, a2, a3);
    }
    else
    {
      v5 = (unint64_t *)(a1 + 56);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 & 0xFFFFFFF0FFFFFFFFLL, v5));
      v7 = HIDWORD(v6) & 7;
      if ((_DWORD)v7)
      {
        if (*(_QWORD *)(a1 + 48))
          _dispatch_runloop_queue_poke((unint64_t *)a1, v7, a3);
        _pthread_qos_override_end_direct();
      }
      else if ((a3 & 1) != 0)
      {
        _os_object_release_internal_n_VARIANT_mp((void *)a1, (const char *)2);
      }
    }
  }
}

void _dispatch_runloop_queue_poke(unint64_t *a1, unsigned int a2, char a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  mach_port_t v14;
  int v15;
  BOOL v16;
  BOOL v17;

  if (*(_QWORD *)(*a1 + 40) == 394769 && _dispatch_main_q_handle_pred != -1)
    dispatch_once_f_VARIANT_mp((unint64_t *)&_dispatch_main_q_handle_pred, (uint64_t)a1, (uint64_t (*)(void))_dispatch_runloop_queue_handle_init);
  v6 = *((_DWORD *)a1 + 21);
  v7 = (unsigned __int16)v6 >> 12;
  if (a2)
    v7 = a2;
  LODWORD(v8) = (v6 >> 8) & 0xF;
  if (v7 <= v8)
    v8 = v8;
  else
    v8 = v7;
  v9 = a1 + 7;
  v10 = v8 << 32;
  do
  {
    v11 = __ldxr(v9);
    if ((v11 & 0x700000000) < v10)
    {
      v12 = v11 & 0xFFFFFFF8FFFFFFFFLL | v10;
      if (v11 & 0x1000000000 | v10 & 0x1000000000)
        v12 |= 0x800000000uLL;
      if (v11 != v12)
        continue;
    }
    __clrex();
    goto LABEL_19;
  }
  while (__stxr(v12, v9));
  v13 = (*((_DWORD *)a1 + 21) >> 8) & 0xF;
  if (v8 > v13)
  {
    _pthread_qos_override_start_direct();
    if ((BYTE4(v11) & 7u) > v13)
      _pthread_qos_override_end_direct();
  }
LABEL_19:
  v14 = *((_DWORD *)a1 + 8);
  if (v14 - 1 > 0xFFFFFFFD
    || ((v15 = _dispatch_send_wakeup_runloop_thread(v14, 0), (v15 - 268435459) >= 2)
      ? (v16 = v15 == 16)
      : (v16 = 1),
        !v16 ? (v17 = v15 == 0) : (v17 = 1),
        v17))
  {
    if ((a3 & 1) != 0)
LABEL_31:
      _os_object_release_internal_n_VARIANT_mp(a1, (const char *)2);
  }
  else
  {
    _dispatch_bug(7895, v15);
    if ((a3 & 1) != 0)
      goto LABEL_31;
  }
}

uint64_t _dispatch_runloop_root_queue_create_4CF_VARIANT_mp(const char *a1, uint64_t a2)
{
  unint64_t StatusReg;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  const char *v9;
  unsigned int v10;
  unint64_t v11;

  if (a2)
    return 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v4 = *(_QWORD *)(StatusReg + 32);
  v5 = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_queue_runloop, 120);
  v6 = v5;
  *(_QWORD *)(v5 + 16) = -1985229329;
  *(_DWORD *)(v5 + 80) = 262145;
  *(_QWORD *)(v5 + 56) = 0x1FFE1000000000;
  v7 = (unint64_t *)(v5 + 56);
  do
    v8 = __ldxr(&_dispatch_queue_serial_numbers);
  while (__stxr(v8 + 1, &_dispatch_queue_serial_numbers));
  *(_QWORD *)(v5 + 24) = &off_1ECCEA100;
  v9 = "runloop-queue";
  if (a1)
    v9 = a1;
  *(_QWORD *)(v5 + 64) = v8;
  *(_QWORD *)(v5 + 72) = v9;
  if ((v4 & 0x22000000) == 0 && (v4 & 0x3F00) != 0)
  {
    v10 = (__clz(__rbit32((v4 >> 8) & 0x3FFF)) << 8) + 256;
    if (((v4 >> 8) & 0x3FFF) == 0)
      v10 = 0;
    *(_DWORD *)(v5 + 84) = v10 & 0xFFFFFF00 | v4;
  }
  _dispatch_runloop_queue_handle_init((_QWORD *)v5);
  do
    v11 = __ldxr(v7);
  while (__stxr(v11 & 0xFFFFFFFF00000003 | (4 * ((*(_QWORD *)(StatusReg + 24) >> 2) & 0x3FFFFFFFLL)), v7));
  return v6;
}

void _dispatch_runloop_queue_handle_init(_QWORD *context)
{
  kern_return_t v2;
  mach_port_name_t name;
  mach_port_options_t options;

  if ((_dispatch_unsafe_fork & 1) == 0)
    _dispatch_fork_becomes_unsafe_slow_VARIANT_mp();
  options.reserved[1] = 0;
  *(_OWORD *)&options.flags = xmmword_18A06E5A8;
  name = 0;
  if (*(_QWORD *)(*context + 40) == 394769)
    *(_QWORD *)&options.flags = 0x100000033;
  v2 = mach_port_construct(*MEMORY[0x1E0C883F0], &options, (mach_port_context_t)context, &name);
  if (v2 == -301)
    _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
  if (v2)
    _dispatch_bug(7808, v2);
  context[4] = name;
  _dispatch_program_is_probably_callback_driven = 1;
}

uint64_t _dispatch_runloop_queue_xref_dispose_VARIANT_mp(unint64_t *a1)
{
  unint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  v1 = a1 + 7;
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 & 0xFFFFFFF0FFFFFFFFLL, v1));
  v3 = HIDWORD(v2) & 7;
  do
    v4 = __ldxr(v1);
  while (__stxr(v4 & 0xFFFFFFFF00000003, v1));
  result = (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(*a1 + 80))(a1, v3, 2);
  if ((_DWORD)v3)
    return _pthread_qos_override_end_direct();
  return result;
}

void _dispatch_runloop_queue_dispose_VARIANT_mp(uint64_t *a1, _BYTE *a2)
{
  _dispatch_runloop_queue_handle_dispose((mach_port_context_t)a1);
  _dispatch_lane_class_dispose_VARIANT_mp(a1, a2);
}

void _dispatch_runloop_queue_handle_dispose(mach_port_context_t guard)
{
  mach_port_name_t v1;
  kern_return_t v2;

  v1 = *(_DWORD *)(guard + 32);
  if (v1 - 1 <= 0xFFFFFFFD)
  {
    *(_QWORD *)(guard + 32) = 0;
    v2 = mach_port_destruct(*MEMORY[0x1E0C883F0], v1, -1, guard);
    if (v2 == -301)
      _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
    if (v2)
      _dispatch_bug(7864, v2);
  }
}

BOOL _dispatch_runloop_root_queue_perform_4CF_VARIANT_mp(unsigned int *a1)
{
  uint64_t v2;
  const char *v3;
  unint64_t *v4;
  unint64_t StatusReg;
  unsigned int *v6;
  unsigned int *v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  _BOOL8 v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  void (**v26)(unsigned int *);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  BOOL v39;
  signed int v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  BOOL v48;
  signed int v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  _OWORD v55[2];
  __int128 v56;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if (v2 != 395025)
    _dispatch_runloop_root_queue_perform_4CF_VARIANT_mp_cold_6(v2);
  dispatch_retain_VARIANT_mp((uint64_t)a1);
  v4 = (unint64_t *)(a1 + 12);
  if (!*((_QWORD *)a1 + 6))
  {
    v18 = 0;
    goto LABEL_117;
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = (unsigned int *)(*(_QWORD *)(StatusReg + 216) & 0xFFFFFFFFFFFFFFFELL);
  if (v6 != (unsigned int *)-4)
  {
    if (v6)
    {
      v7 = v6 + 24;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 - 1, v7));
      if (v8 <= 0)
      {
        if (v8 < 0)
          _os_object_allows_weak_reference_VARIANT_mp_cold_1();
        *((_QWORD *)v6 + 7) = 0xDEAD000000000000;
        _dispatch_object_dealloc_VARIANT_mp(v6);
      }
    }
    *(_QWORD *)(StatusReg + 216) = -4;
  }
  v56 = *(_OWORD *)(StatusReg + 160);
  *(_QWORD *)(StatusReg + 160) = a1;
  *(_QWORD *)(StatusReg + 168) = &v56;
  v9 = *(_QWORD *)(StatusReg + 32);
  v10 = (__clz(__rbit32((v9 >> 8) & 0x3FFF)) << 8) + 256;
  if (((v9 >> 8) & 0x3FFF) == 0)
    v10 = 0;
  v11 = *(_QWORD *)(StatusReg + 224);
  if (v11)
  {
    v12 = (unsigned int *)(v11 + 12);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    if (v13 <= 0)
      dispatch_group_notify_VARIANT_mp_cold_3();
  }
  v14 = v10 | v9 & 0x8E0000FF;
  v15 = *(_QWORD *)(StatusReg + 200);
  v54 = v6;
  if ((_DWORD)v15)
  {
    v16 = v10 & 0xFFF | v9;
    if (v16)
    {
      if (((unsigned __int16)v15 & 0xFFFu) > v16)
        v16 = v15 & 0xFFF;
      if (v10 >> 12 <= v16 >> 8)
        v17 = 0;
      else
        v17 = v10 & 0x4003000 | v9 & 0x4000000;
      v14 = v15 & 0x880F0000 | v16 | v17;
    }
    else
    {
      v19 = v15 | 0x40000000;
      if ((v15 & 0xFFF) == 0)
        v19 = *(_QWORD *)(StatusReg + 200);
      if (((v19 >> 8) & 0xF) < v10 >> 12)
        v14 = v19 & 0xFFFF0FFF | v10 & 0x4003000 | v9 & 0x4000000;
      else
        v14 = v19;
    }
  }
  LODWORD(v20) = v14 | 0xF0000;
  if ((~v14 & 0xF0000) != 0)
    v20 = v20;
  else
    v20 = v14;
  *(_QWORD *)(StatusReg + 200) = v20;
  memset(v55, 0, sizeof(v55));
  v21 = (uint64_t *)(a1 + 26);
  v22 = *((_QWORD *)a1 + 13);
  if (!v22)
    v22 = _dispatch_wait_for_enqueuer((unint64_t *)a1 + 13);
  v23 = *(_QWORD *)(v22 + 16);
  *v21 = v23;
  if (!v23)
  {
    v24 = (unint64_t *)(v22 + 16);
    while (1)
    {
      v25 = __ldxr(v4);
      if (v25 != v22)
        break;
      if (!__stlxr(0, v4))
        goto LABEL_44;
    }
    __clrex();
    v23 = *v24;
    if (!*v24)
      v23 = _dispatch_wait_for_enqueuer(v24);
    *v21 = v23;
  }
LABEL_44:
  v26 = *(void (***)(unsigned int *))(StatusReg + 192);
  if (v26)
    (*v26)(a1);
  v27 = *(_QWORD *)v22;
  if (*(_QWORD *)v22 < 0x1000uLL)
  {
    v28 = *(_QWORD *)(v22 + 24);
    if ((v27 & 4) != 0)
      *(_QWORD *)(v22 + 24) = -1;
    v29 = v27 & 4;
    v30 = *(_QWORD *)(v22 + 8);
    if (v30 == -1)
    {
      v33 = 0;
    }
    else
    {
      v31 = *(_QWORD *)(StatusReg + 200);
      if (((v31 >> 8) & 0xF) != 0)
        v32 = 256 << ((BYTE1(v31) & 0xFu) - 1);
      else
        v32 = 0;
      v33 = v32 & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(StatusReg + 200);
      if ((v30 & 0xFFFFFF) != 0)
      {
        if ((v30 & 0xFFFFFFuLL) >= (v32 & 0xFFFFFF00)
          && ((v31 & 0x44000000) != 0 || (*(_QWORD *)(v22 + 8) & 0x10000000) != 0))
        {
          v33 = v30 & 0xFFFFFF;
        }
      }
      else if ((unsigned __int16)v31 >> 12)
      {
        v33 = (256 << (((unsigned __int16)v31 >> 12) - 1)) | 0xFF;
      }
    }
    v35 = v33 & 0xFFFFFFFF02FFFFFFLL;
    v36 = *(_QWORD *)(StatusReg + 32);
    if ((v36 & 0x1000000) != 0)
    {
      if (v35)
        goto LABEL_89;
      v35 = v36 & 0xFFFFFFFFFEFFFFFFLL;
    }
    else if (v35 == (v36 & 0xFFFFFFFF77FFFFFFLL))
    {
LABEL_69:
      if (v28 == -1)
        goto LABEL_90;
      if (*(_QWORD *)(StatusReg + 224) == v28)
      {
        if ((v27 & 4) != 0 && v28)
        {
          v37 = (unsigned int *)(v28 + 12);
          do
          {
            v38 = __ldxr(v37);
            v39 = __OFSUB__(v38, 1);
            v40 = v38 - 1;
          }
          while (__stxr(v40, v37));
          if ((v40 < 0) ^ v39 | (v40 == 0))
            _dispatch_async_redirect_invoke_cold_1();
LABEL_91:
          v41 = *(_QWORD *)(StatusReg + 176);
          if (v41)
            v42 = *(_DWORD *)(v41 + 8) + 1;
          else
            v42 = 1;
          v29 = v22;
          if (v42 <= _dispatch_continuation_cache_limit)
          {
            v29 = 0;
            *(_QWORD *)(v22 + 16) = v41;
            *(_DWORD *)(v22 + 8) = v42;
            *(_QWORD *)(StatusReg + 176) = v22;
          }
LABEL_96:
          if ((v27 & 8) != 0)
          {
            v52 = *(_QWORD *)(v22 + 48);
            v53 = *(_QWORD *)(*(_QWORD *)v52 + 40);
            if (v53 != 514)
              _dispatch_queue_override_invoke_cold_1(v53);
            _dispatch_client_callout(*(_QWORD *)(v22 + 40), *(uint64_t (**)(void))(v22 + 32));
            dispatch_group_leave_VARIANT_mp(v52);
            if (!v29)
            {
LABEL_98:
              if (!v26)
                goto LABEL_100;
              goto LABEL_99;
            }
          }
          else
          {
            _dispatch_client_callout(*(_QWORD *)(v22 + 40), *(uint64_t (**)(void))(v22 + 32));
            if (!v29)
              goto LABEL_98;
          }
          _dispatch_continuation_free_to_cache_limit_VARIANT_mp(v29);
          if (!v26)
            goto LABEL_100;
LABEL_99:
          v26[1](a1);
          goto LABEL_100;
        }
LABEL_90:
        if ((v27 & 4) == 0)
          goto LABEL_96;
        goto LABEL_91;
      }
      v35 = 0;
LABEL_89:
      _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v35, v28, v29 | 2);
      goto LABEL_90;
    }
    if (v35)
      goto LABEL_89;
    goto LABEL_69;
  }
  if (*(_QWORD *)(v27 + 40) == 1)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v27 + 48))(v22, 0, 0);
  else
    (*(void (**)(uint64_t, _OWORD *, uint64_t))(v27 + 64))(v22, v55, 0x80000);
  if (v26)
    goto LABEL_99;
LABEL_100:
  v18 = v23 != 0;
  if (!v23)
    (*(void (**)(unsigned int *, _QWORD, _QWORD))(*(_QWORD *)a1 + 80))(a1, 0, 0);
  *(_QWORD *)(StatusReg + 200) = v15 & 0xFFF0FFFF;
  v43 = v9 & 0xFFFFFFFF02FFFFFFLL;
  if (v9 == -1)
    v44 = 0;
  else
    v44 = v9 & 0xFFFFFFFF02FFFFFFLL;
  v45 = *(_QWORD *)(StatusReg + 32);
  if ((v45 & 0x1000000) != 0)
  {
    if (v44)
    {
LABEL_123:
      _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v43, v11, 6);
      goto LABEL_113;
    }
    v44 = v45 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v44 == (v45 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_107;
  }
  v43 = v44;
  if (v44)
    goto LABEL_123;
LABEL_107:
  if (v11 != -1)
  {
    if (*(_QWORD *)(StatusReg + 224) == v11)
    {
      if (v11)
      {
        v46 = (unsigned int *)(v11 + 12);
        do
        {
          v47 = __ldxr(v46);
          v48 = __OFSUB__(v47, 1);
          v49 = v47 - 1;
        }
        while (__stxr(v49, v46));
        if ((v49 < 0) ^ v48 | (v49 == 0))
          _dispatch_async_redirect_invoke_cold_1();
      }
      goto LABEL_113;
    }
    v43 = 0;
    goto LABEL_123;
  }
LABEL_113:
  *(_OWORD *)(StatusReg + 160) = v56;
  if (v54 != (unsigned int *)-4)
  {
    *(_QWORD *)(StatusReg + 216) = 0;
    *(_QWORD *)(StatusReg + 40) = 0;
  }
  v50 = *(_QWORD *)(StatusReg + 176);
  if (v50)
  {
    *(_QWORD *)(StatusReg + 176) = 0;
    _dispatch_cache_cleanup(v50);
  }
LABEL_117:
  dispatch_release_VARIANT_mp(a1, v3);
  return v18;
}

void _dispatch_runloop_root_queue_wakeup_4CF_VARIANT_mp(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)a1 + 40) != 395025)
    _dispatch_runloop_root_queue_perform_4CF_VARIANT_mp_cold_6(*(_QWORD *)(*(_QWORD *)a1 + 40));
  _dispatch_runloop_queue_wakeup_VARIANT_mp(a1, 0, 0);
}

uint64_t _dispatch_runloop_root_queue_get_port_4CF_VARIANT_mp(unsigned int *a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if (v2 != 395025)
    _dispatch_runloop_root_queue_perform_4CF_VARIANT_mp_cold_6(v2);
  return a1[8];
}

uint64_t _dispatch_get_main_queue_handle_4CF_VARIANT_mp()
{
  if (_dispatch_main_q_handle_pred != -1)
    dispatch_once_f_VARIANT_mp((unint64_t *)&_dispatch_main_q_handle_pred, (uint64_t)&_dispatch_main_q, (uint64_t (*)(void))_dispatch_runloop_queue_handle_init);
  return dword_1ECCE9B20;
}

uint64_t _dispatch_get_main_queue_port_4CF_VARIANT_mp()
{
  if (_dispatch_main_q_handle_pred != -1)
    dispatch_once_f_VARIANT_mp((unint64_t *)&_dispatch_main_q_handle_pred, (uint64_t)&_dispatch_main_q, (uint64_t (*)(void))_dispatch_runloop_queue_handle_init);
  return dword_1ECCE9B20;
}

void _dispatch_main_queue_callback_4CF_VARIANT_mp()
{
  if (!dword_1ECCE9B70)
  {
    dword_1ECCE9B70 = 1;
    _dispatch_main_queue_drain();
    dword_1ECCE9B70 = 0;
  }
}

void _dispatch_main_queue_drain()
{
  uint64_t v0;
  unint64_t StatusReg;
  unsigned int *v2;
  unsigned int *v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  void (**v22)(__objc2_class **);
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  BOOL v35;
  signed int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  BOOL v47;
  signed int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD v53[2];
  __int128 v54;

  v54 = 0uLL;
  if (!qword_1ECCE9B30)
    return;
  if ((dword_1ECCE9B50 & 0x40000) == 0)
    _dispatch_main_queue_drain_cold_1();
  v0 = qword_1ECCE9B38[0];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (((v0 ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) != 0)
    _dispatch_main_queue_drain_cold_8(v0);
  if (_dispatch_main_q_handle_pred != -1)
    dispatch_once_f_VARIANT_mp((unint64_t *)&_dispatch_main_q_handle_pred, (uint64_t)&_dispatch_main_q, (uint64_t (*)(void))_dispatch_runloop_queue_handle_init);
  v2 = (unsigned int *)(*(_QWORD *)(StatusReg + 216) & 0xFFFFFFFFFFFFFFFELL);
  if (v2)
  {
    if (v2 == (unsigned int *)-4)
      _dispatch_main_queue_drain_cold_7();
    v3 = v2 + 24;
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 - 1, v3));
    if (v4 <= 0)
    {
      if (v4 < 0)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      *((_QWORD *)v2 + 7) = 0xDEAD000000000000;
      _dispatch_object_dealloc_VARIANT_mp(v2);
    }
  }
  *(_QWORD *)(StatusReg + 216) = -4;
  v54 = *(_OWORD *)(StatusReg + 160);
  *(_QWORD *)(StatusReg + 160) = &_dispatch_main_q;
  *(_QWORD *)(StatusReg + 168) = 0;
  v5 = *(_QWORD *)(StatusReg + 32);
  v6 = (__clz(__rbit32((v5 >> 8) & 0x3FFF)) << 8) + 256;
  if (((v5 >> 8) & 0x3FFF) != 0)
    v7 = v6;
  else
    v7 = 0;
  v8 = *(_QWORD *)(StatusReg + 224);
  if (v8)
  {
    v9 = (unsigned int *)(v8 + 12);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    if (v10 <= 0)
      dispatch_group_notify_VARIANT_mp_cold_3();
  }
  v51 = v5;
  v11 = v5 & 0x8E0000FF;
  if ((((unsigned __int16)dword_1ECCE9B54 ^ (unsigned __int16)v7) & 0xF00) != 0)
    _dispatch_main_queue_update_priority_from_thread();
  LODWORD(v12) = v7 | v11;
  v13 = *(_QWORD *)(StatusReg + 200);
  v52 = v8;
  v50 = v13;
  if ((_DWORD)v13)
  {
    v14 = v12 & 0xFFF;
    if ((v12 & 0xFFF) != 0)
    {
      v15 = v13 & 0x880F0000;
      v16 = v13 & 0xFFF;
      if (v16 > v14)
        v14 = v16;
      v17 = v12 & 0x4003000;
      if (v7 >> 12 <= v14 >> 8)
        v17 = 0;
      LODWORD(v12) = v15 | v14 | v17;
    }
    else
    {
      v18 = v13 | 0x40000000;
      if ((v13 & 0xFFF) == 0)
        v18 = *(_QWORD *)(StatusReg + 200);
      LODWORD(v12) = v18 & 0xFFFF0FFF | v12 & 0x4003000;
      if (((v18 >> 8) & 0xF) >= v7 >> 12)
        LODWORD(v12) = v18;
    }
  }
  if ((~(_DWORD)v12 & 0xF0000) != 0)
    v12 = v12 | 0xF0000;
  else
    v12 = v12;
  *(_QWORD *)(StatusReg + 200) = v12;
  memset(v53, 0, sizeof(v53));
  v19 = (uint64_t *)off_1ECCE9B68;
  if (!off_1ECCE9B68)
    v19 = (uint64_t *)_dispatch_wait_for_enqueuer((unint64_t *)&off_1ECCE9B68);
  off_1ECCE9B68 = 0;
  do
    v20 = __ldxr((unint64_t *)&qword_1ECCE9B30);
  while (__stlxr(0, (unint64_t *)&qword_1ECCE9B30));
  do
  {
    if (v19 == (uint64_t *)v20)
    {
      v21 = 0;
    }
    else
    {
      v21 = v19[2];
      if (!v21)
        v21 = _dispatch_wait_for_enqueuer((unint64_t *)v19 + 2);
    }
    v22 = *(void (***)(__objc2_class **))(StatusReg + 192);
    if (v22)
      (*v22)(&_dispatch_main_q);
    v23 = *v19;
    if ((unint64_t)*v19 >= 0x1000)
    {
      if (*(_QWORD *)(v23 + 40) == 1)
        (*(void (**)(uint64_t *, _QWORD, _QWORD))(v23 + 48))(v19, 0, 0);
      else
        (*(void (**)(uint64_t *, _OWORD *, uint64_t))(v23 + 64))(v19, v53, 0x80000);
      if (v22)
        goto LABEL_96;
      goto LABEL_97;
    }
    v24 = v19[3];
    if ((v23 & 4) != 0)
      v19[3] = -1;
    v25 = v19[1];
    if (v25 == -1)
    {
      v28 = 0;
    }
    else
    {
      v26 = *(_QWORD *)(StatusReg + 200);
      if (((v26 >> 8) & 0xF) != 0)
        v27 = 256 << ((BYTE1(v26) & 0xFu) - 1);
      else
        v27 = 0;
      v28 = v27 & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(StatusReg + 200);
      if ((v25 & 0xFFFFFF) != 0)
      {
        if ((v25 & 0xFFFFFFuLL) >= (v27 & 0xFFFFFF00)
          && ((v26 & 0x44000000) != 0 || (v19[1] & 0x10000000) != 0))
        {
          v28 = v25 & 0xFFFFFF;
        }
      }
      else if ((unsigned __int16)v26 >> 12)
      {
        v28 = (256 << (((unsigned __int16)v26 >> 12) - 1)) | 0xFF;
      }
    }
    v30 = v23 & 4;
    v31 = v28 & 0xFFFFFFFF02FFFFFFLL;
    v32 = *(_QWORD *)(StatusReg + 32);
    if ((v32 & 0x1000000) != 0)
    {
      if (v31)
        goto LABEL_86;
      v31 = v32 & 0xFFFFFFFFFEFFFFFFLL;
    }
    else if (v31 == (v32 & 0xFFFFFFFF77FFFFFFLL))
    {
      goto LABEL_69;
    }
    if (v31)
      goto LABEL_86;
LABEL_69:
    if (v24 == -1)
      goto LABEL_87;
    if (*(_QWORD *)(StatusReg + 224) != v24)
    {
      v31 = 0;
LABEL_86:
      _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v31, v24, v30 | 2);
      goto LABEL_87;
    }
    if ((v23 & 4) != 0 && v24)
    {
      v33 = (unsigned int *)(v24 + 12);
      do
      {
        v34 = __ldxr(v33);
        v35 = __OFSUB__(v34, 1);
        v36 = v34 - 1;
      }
      while (__stxr(v36, v33));
      if ((v36 < 0) ^ v35 | (v36 == 0))
        _dispatch_async_redirect_invoke_cold_1();
LABEL_88:
      v37 = *(_QWORD *)(StatusReg + 176);
      if (v37)
        v38 = *(_DWORD *)(v37 + 8) + 1;
      else
        v38 = 1;
      v30 = (uint64_t)v19;
      if (v38 <= _dispatch_continuation_cache_limit)
      {
        v30 = 0;
        v19[2] = v37;
        *((_DWORD *)v19 + 2) = v38;
        *(_QWORD *)(StatusReg + 176) = v19;
      }
      goto LABEL_93;
    }
LABEL_87:
    if ((v23 & 4) != 0)
      goto LABEL_88;
LABEL_93:
    if ((v23 & 8) != 0)
    {
      v39 = v19[6];
      v40 = *(_QWORD *)(*(_QWORD *)v39 + 40);
      if (v40 != 514)
        _dispatch_queue_override_invoke_cold_1(v40);
      _dispatch_client_callout(v19[5], (uint64_t (*)(void))v19[4]);
      dispatch_group_leave_VARIANT_mp(v39);
      if (!v30)
      {
LABEL_95:
        if (!v22)
          goto LABEL_97;
LABEL_96:
        v22[1](&_dispatch_main_q);
        goto LABEL_97;
      }
    }
    else
    {
      _dispatch_client_callout(v19[5], (uint64_t (*)(void))v19[4]);
      if (!v30)
        goto LABEL_95;
    }
    _dispatch_continuation_free_to_cache_limit_VARIANT_mp(v30);
    if (v22)
      goto LABEL_96;
LABEL_97:
    v19 = (uint64_t *)v21;
  }
  while (v21);
  ((void (*)(__objc2_class **, _QWORD, _QWORD))_dispatch_main_q[2].isa)(&_dispatch_main_q, 0, 0);
  *(_QWORD *)(StatusReg + 200) = v50 & 0xFFF0FFFF;
  v41 = v51 & 0xFFFFFFFF02FFFFFFLL;
  if (v51 == -1)
    v42 = 0;
  else
    v42 = v51 & 0xFFFFFFFF02FFFFFFLL;
  v43 = *(_QWORD *)(StatusReg + 32);
  if ((v43 & 0x1000000) != 0)
  {
    v44 = v52;
    if (!v42)
    {
      v42 = v43 & 0xFFFFFFFFFEFFFFFFLL;
      goto LABEL_121;
    }
LABEL_125:
    _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v41, v44, 6);
  }
  else
  {
    v44 = v52;
    if (v42 == (v43 & 0xFFFFFFFF77FFFFFFLL))
      goto LABEL_108;
LABEL_121:
    v41 = v42;
    if (v42)
      goto LABEL_125;
LABEL_108:
    if (v44 != -1)
    {
      if (*(_QWORD *)(StatusReg + 224) != v44)
      {
        v41 = 0;
        goto LABEL_125;
      }
      if (v44)
      {
        v45 = (unsigned int *)(v44 + 12);
        do
        {
          v46 = __ldxr(v45);
          v47 = __OFSUB__(v46, 1);
          v48 = v46 - 1;
        }
        while (__stxr(v48, v45));
        if ((v48 < 0) ^ v47 | (v48 == 0))
          _dispatch_async_redirect_invoke_cold_1();
      }
    }
  }
  *(_OWORD *)(StatusReg + 160) = v54;
  *(_QWORD *)(StatusReg + 216) = 0;
  *(_QWORD *)(StatusReg + 40) = 0;
  v49 = *(_QWORD *)(StatusReg + 176);
  if (v49)
  {
    *(_QWORD *)(StatusReg + 176) = 0;
    _dispatch_cache_cleanup(v49);
  }
}

uint64_t _dispatch_main_queue_push_VARIANT_mp(uint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t StatusReg;
  unint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a2 + 16) = 0;
  v3 = (unint64_t *)(result + 48);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_QWORD *)(StatusReg + 976) = result + 48;
  do
    v5 = __ldxr(v3);
  while (__stlxr(a2, v3));
  if (v5)
  {
    *(_QWORD *)(v5 + 16) = a2;
    *(_QWORD *)(StatusReg + 976) = 0;
    if (((*(_DWORD *)(result + 84) >> 8) & 0xFu) >= a3)
      v6 = 0;
    else
      v6 = a3;
    if ((*(_DWORD *)(result + 60) & 7) == 0 || (*(_DWORD *)(result + 60) & 7u) < v6)
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)result + 80))(result, v6, 0);
  }
  else
  {
    *(_QWORD *)(result + 104) = a2;
    *(_QWORD *)(StatusReg + 976) = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 80))(result, a3, 2);
  }
  return result;
}

void _dispatch_main_queue_wakeup_VARIANT_mp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_DWORD *)(a1 + 80) & 0x40000) != 0)
    _dispatch_runloop_queue_wakeup_VARIANT_mp(a1, a2, a3);
  else
    _dispatch_lane_wakeup_VARIANT_mp(a1, a2, a3);
}

void dispatch_main_VARIANT_mp()
{
  if (_dispatch_root_queues_pred != -1)
    goto LABEL_9;
  while (1)
  {
    if (!pthread_main_np())
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_main() must be called on the main thread";
      __break(1u);
    }
    if (!dword_1ECCE9B70)
    {
      dword_1ECCE9B70 = 1;
      _dispatch_main_queue_drain();
      dword_1ECCE9B70 = 0;
      _dispatch_program_is_probably_callback_driven = 1;
      if (MEMORY[0xFFFFFC100])
        kdebug_trace();
      pthread_exit(0);
    }
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_main called from a block on the main queue";
    __break(1u);
LABEL_9:
    dispatch_once_f_VARIANT_mp((unint64_t *)&_dispatch_root_queues_pred, 0, _dispatch_root_queues_init_once);
  }
}

__objc2_class **dispatch_get_global_queue_VARIANT_mp(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;

  if ((a2 & 0xFFFFFFFFFFFFFFF9) != 0 || (~(_BYTE)a2 & 6) == 0)
    return 0;
  if (a1 <= -3)
  {
    if (a1 == -32768)
    {
      v3 = 3;
      goto LABEL_17;
    }
    if (a1 != -128)
      goto LABEL_14;
LABEL_11:
    v3 = 6;
    goto LABEL_17;
  }
  switch(a1)
  {
    case -2:
      goto LABEL_11;
    case 0:
      v3 = 9;
      goto LABEL_17;
    case 2:
      v3 = 12;
      goto LABEL_17;
  }
LABEL_14:
  HIDWORD(v5) = a1 - 5;
  LODWORD(v5) = a1 - 5;
  v4 = v5 >> 2;
  if (v4 > 7 || ((0xBBu >> v4) & 1) == 0)
    return 0;
  v3 = qword_18A06E680[v4];
LABEL_17:
  v6 = (a2 >> 1) & 2;
  if ((a2 & 2) != 0)
    v6 = 1;
  return &_dispatch_root_queues + 16 * (v3 + v6);
}

uint64_t libdispatch_init_VARIANT_mp()
{
  unsigned int v0;
  unint64_t v1;
  int v2;
  _QWORD *StatusReg;
  unint64_t v4;

  if (_dispatch_getenv_BOOL("LIBDISPATCH_STRICT", 0))
    _dispatch_mode |= 1u;
  if (_dispatch_getenv_BOOL("LIBDISPATCH_COOPERATIVE_POOL_STRICT", 0))
    _dispatch_mode |= 4u;
  HIDWORD(v1) = qos_class_main() - 5;
  LODWORD(v1) = HIDWORD(v1);
  v0 = v1 >> 2;
  if (v0 > 7)
    v2 = 0;
  else
    v2 = dword_18A06E6C0[v0];
  dword_1ECCE9B54 = v2;
  pthread_key_init_np();
  pthread_key_init_np();
  pthread_key_init_np();
  pthread_key_init_np();
  pthread_key_init_np();
  pthread_key_init_np();
  pthread_key_init_np();
  pthread_key_init_np();
  pthread_key_init_np();
  pthread_key_init_np();
  qword_1ECCE9B18 = (uint64_t)&off_1ECCEA100;
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  StatusReg[20] = &_dispatch_main_q;
  do
    v4 = __ldxr(qword_1ECCE9B38);
  while (__stxr(v4 & 0xFFFFFFFF00000003 | (4 * ((StatusReg[3] >> 2) & 0x3FFFFFFFLL)), qword_1ECCE9B38));
  if ((~*((_DWORD *)StatusReg + 50) & 0xF0000) != 0)
    StatusReg[25] = StatusReg[25] | 0xF0000;
  _dispatch_time_init();
  _dispatch_vtable_init();
  _os_object_init();
  _voucher_init_VARIANT_mp();
  return _workgroup_init_VARIANT_mp();
}

void _dispatch_queue_cleanup(__objc2_class **a1)
{
  if (a1 != &_dispatch_main_q)
    _dispatch_queue_cleanup_cold_1((uint64_t)a1);
  _dispatch_queue_cleanup2();
}

void _dispatch_frame_cleanup(uint64_t a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Premature thread exit while a dispatch frame is active";
  qword_1EDF52D38 = a1;
  __break(1u);
}

uint64_t _dispatch_cache_cleanup(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    do
    {
      v1 = *(_QWORD *)(result + 16);
      _dispatch_continuation_free_to_heap_VARIANT_mp(result);
      result = v1;
    }
    while (v1);
  }
  return result;
}

void _dispatch_context_cleanup(uint64_t a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Premature thread exit while a dispatch context is set";
  qword_1EDF52D38 = a1;
  __break(1u);
}

void _dispatch_wlh_cleanup(uint64_t a1)
{
  unsigned int *v1;
  unsigned int *v2;
  int v3;

  v1 = (unsigned int *)(a1 & 0xFFFFFFFFFFFFFFFELL);
  v2 = v1 + 24;
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 - 1, v2));
  if (v3 <= 0)
  {
    if (v3 < 0)
      _os_object_allows_weak_reference_VARIANT_mp_cold_1();
    *((_QWORD *)v1 + 7) = 0xDEAD000000000000;
    _dispatch_object_dealloc_VARIANT_mp(v1);
  }
}

void _dispatch_deferred_items_cleanup(uint64_t a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Premature thread exit with unhandled deferred items";
  qword_1EDF52D38 = a1;
  __break(1u);
}

void _dispatch_queue_atfork_child_VARIANT_mp()
{
  unint64_t StatusReg;
  unint64_t v1;
  uint64_t v2;
  char *v3;

  if ((dword_1ECCE9B50 & 0x40000) != 0)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
      v1 = __ldxr(qword_1ECCE9B38);
    while (__stxr(v1 & 0xFFFFFFFF00000003 | (4 * ((*(_QWORD *)(StatusReg + 24) >> 2) & 0x3FFFFFFFLL)), qword_1ECCE9B38));
  }
  if ((_dispatch_unsafe_fork & 1) != 0)
  {
    v2 = 0;
    off_1ECCE9B68 = (_UNKNOWN *)256;
    qword_1ECCE9B30 = 256;
    qword_1ECCE9BE8 = 256;
    qword_1ECCE9BB0 = 256;
    do
    {
      v3 = (char *)&_dispatch_root_queues + v2;
      *((_QWORD *)v3 + 13) = 256;
      *((_QWORD *)v3 + 6) = 256;
      v2 += 128;
    }
    while (v2 != 2304);
  }
}

void _dispatch_fork_becomes_unsafe_slow_VARIANT_mp()
{
  unsigned __int8 v0;

  do
    v0 = __ldxr((unsigned __int8 *)&_dispatch_unsafe_fork);
  while (__stxr(v0 | 1, (unsigned __int8 *)&_dispatch_unsafe_fork));
  if ((v0 & 2) != 0)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Transition to multithreaded is prohibited";
    __break(1u);
  }
}

uint64_t _dispatch_prohibit_transition_to_multithreaded_VARIANT_mp(uint64_t result)
{
  unsigned __int8 v1;
  unsigned __int8 v2;

  if ((result & 1) == 0)
    goto LABEL_5;
  do
    v1 = __ldxr((unsigned __int8 *)&_dispatch_unsafe_fork);
  while (__stxr(v1 | 2, (unsigned __int8 *)&_dispatch_unsafe_fork));
  if ((v1 & 1) != 0)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: The executable is already multithreaded";
    __break(1u);
    do
LABEL_5:
      v2 = __ldxr((unsigned __int8 *)&_dispatch_unsafe_fork);
    while (__stxr(v2 & 0xFD, (unsigned __int8 *)&_dispatch_unsafe_fork));
  }
  return result;
}

void _dispatch_block_async_invoke2(_QWORD *aBlock, const char *a2)
{
  char v2;
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t *v9;
  unsigned int *v10;
  int v11;

  v2 = (char)a2;
  v3 = aBlock;
  if ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))aBlock[2] == ___dispatch_block_create_block_invoke)
  {
    v4 = (char *)(aBlock + 4);
    v5 = aBlock[4];
    if (v5 != 3512316172)
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption of dispatch block object";
      qword_1EDF52D38 = v5;
      __break(1u);
      goto LABEL_26;
    }
  }
  else
  {
    v4 = 0;
  }
  v6 = *((unsigned int *)v4 + 4);
  if ((v6 & 4) != 0)
  {
    v11 = *((_DWORD *)v4 + 4);
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: A block object may not be both run more than once and waited for";
    qword_1EDF52D38 = v6;
    __break(1u);
  }
  else
  {
    if ((v6 & 1) == 0)
      (*(void (**)(void))(*((_QWORD *)v4 + 5) + 16))();
    if ((v6 & 8) == 0)
    {
      v7 = (unsigned int *)(v4 + 20);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      if (!v8)
        dispatch_group_leave_VARIANT_mp(*((_QWORD *)v4 + 6));
    }
    v9 = (unint64_t *)(v4 + 56);
    do
      aBlock = (_QWORD *)__ldxr(v9);
    while (__stxr(0, v9));
    if (!aBlock)
      goto LABEL_19;
    if (*((_DWORD *)aBlock + 2) == 0x7FFFFFFF)
      goto LABEL_19;
    v10 = (unsigned int *)(aBlock + 1);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
    if (v11 > 2)
    {
LABEL_19:
      if ((v2 & 1) == 0)
        return;
LABEL_24:
      _Block_release(v3);
      return;
    }
  }
  if (v11 != 2)
  {
LABEL_26:
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
    __break(1u);
    return;
  }
  _os_object_dispose(aBlock, a2);
  if ((v2 & 1) != 0)
    goto LABEL_24;
}

void _dispatch_lane_non_barrier_complete(uint64_t a1, uint64_t a2)
{
  unint64_t StatusReg;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  int v13;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
  v4 = (unint64_t *)(a1 + 56);
  do
  {
    v5 = __ldxr(v4);
    v6 = v5 - 0x20000000000;
    if ((v5 & 0xFFFFFFFC) != 0)
    {
      v6 |= 0x8000000000uLL;
    }
    else if (!(v6 >> 53))
    {
      v7 = (v5 & 0x10000000000) != 0
         ? v5 - 0x10000000000
         : v6 + ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41);
      v8 = (v7 & 0x3FFE0000000000) == 0x20000000000000;
      v6 |= (v5 >> 39) & 1;
      v9 = ((v7 & 0xFFFFFF7FFFFFFFFFLL) + 0x40000000000000) | v3;
      if (v8)
        v6 = v9;
    }
  }
  while (__stxr(v6, v4));
  if ((~v5 & 0x1800000000) == 0)
  {
    v10 = HIDWORD(v5) & 7;
    v11 = *(_DWORD *)(StatusReg + 200);
    if ((HIWORD(v11) & 0xF) < v10)
      *(_QWORD *)(StatusReg + 200) = v11 & 0xFFF0FFFF | ((_DWORD)v10 << 16);
  }
  if (((v6 ^ v5) & 0x40000000000000) != 0)
  {
    _dispatch_lane_barrier_complete(a1, 0, a2);
  }
  else if (((v6 ^ v5) & 1) != 0)
  {
    if ((a2 & 1) != 0)
      goto LABEL_26;
    if (*(_DWORD *)(a1 + 8) == 0x7FFFFFFF)
      goto LABEL_26;
    v12 = (unsigned int *)(a1 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if (v13 > 0)
    {
LABEL_26:
      (*(void (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24), a1, HIDWORD(v6) & 7);
    }
    else
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
    }
  }
  else if ((a2 & 1) != 0)
  {
    _os_object_release_internal_n_VARIANT_mp((void *)a1, (const char *)2);
  }
}

double _dispatch_sync_f_slow(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *StatusReg;
  uint64_t v11;
  double result;
  _QWORD v13[7];
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;

  if (!*(_QWORD *)(a5 + 24))
    return _dispatch_sync_function_invoke(a5, a2, a3);
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v11 = StatusReg[4];
  v21 = 0;
  v13[0] = a6 | 1;
  v13[1] = v11 | 0x10000000;
  v13[2] = 0;
  v13[3] = StatusReg[28];
  v13[4] = _dispatch_async_and_wait_invoke;
  v13[5] = v13;
  v13[6] = 0;
  v14 = a1;
  v15 = a3;
  v17 = 0;
  v18 = 0;
  v16 = a2;
  v19 = 0;
  v20 = StatusReg[3];
  __DISPATCH_WAIT_FOR_QUEUE__((uint64_t)v13, a5);
  if (v15)
    _dispatch_sync_invoke_and_complete_recurse(a1, a2, a3, a4);
  else
    _dispatch_sync_complete_recurse(a1, v14, a4);
  return result;
}

double _dispatch_sync_recurse(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t a4)
{
  unint64_t StatusReg;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  double result;
  uint64_t v12;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
  while (2)
  {
    if (*(_WORD *)(v5 + 80) == 1)
    {
      v7 = (unint64_t *)(v5 + 56);
      while (1)
      {
        v8 = __ldaxr(v7);
        if (v8 != (v8 & 0x3000000000 | 0x1FFE0000000000))
          break;
        if (!__stxr(v6 | v8 & 0x3000000000 | 0x60000000000002, v7))
          goto LABEL_6;
      }
      __clrex();
      v12 = 2;
      return _dispatch_sync_f_slow(a1, a2, a3, a4, v5, v12);
    }
    if (*(_QWORD *)(v5 + 48))
    {
LABEL_17:
      v12 = 0;
      return _dispatch_sync_f_slow(a1, a2, a3, a4, v5, v12);
    }
    v9 = (unint64_t *)(v5 + 56);
    do
    {
      v10 = __ldxr(v9);
      if ((v10 & 0xFFC0018000000000) != 0)
      {
        __clrex();
        goto LABEL_17;
      }
    }
    while (__stxr(v10 + 0x20000000000, v9));
LABEL_6:
    v5 = *(_QWORD *)(v5 + 24);
    if (*(_QWORD *)(v5 + 24))
      continue;
    break;
  }
  _dispatch_sync_invoke_and_complete_recurse(a1, a2, a3, a4);
  return result;
}

void _dispatch_lane_barrier_sync_invoke_and_complete(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t StatusReg;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_OWORD *)(StatusReg + 160);
  *(_QWORD *)(StatusReg + 160) = a1;
  *(_QWORD *)(StatusReg + 168) = &v7;
  _dispatch_client_callout(a2, a3);
  *(_OWORD *)(StatusReg + 160) = v7;
  if (!*(_QWORD *)(a1 + 48) && *(unsigned __int16 *)(a1 + 80) < 2u)
  {
    v5 = (unint64_t *)(a1 + 56);
    while (1)
    {
      v6 = __ldxr(v5);
      if ((v6 & 0xFF80008800000001) != 0)
        break;
      if (!__stlxr((v6 & 0xFFFFFFF000000001) - 0x40020000000000, v5))
        return;
    }
    __clrex();
  }
  _dispatch_lane_barrier_complete(a1, 0, 0);
}

unsigned int *_dispatch_async_and_wait_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  unint64_t StatusReg;
  unsigned int *result;
  unsigned int v6;
  __int128 v7;

  v2 = *(_QWORD *)(a1 + 56);
  if ((*(_BYTE *)(a1 + 106) & 1) != 0)
    v3 = (void *)MEMORY[0x18D766D94]();
  else
    v3 = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_OWORD *)(StatusReg + 160);
  *(_QWORD *)(StatusReg + 160) = v2;
  *(_QWORD *)(StatusReg + 168) = a1 + 80;
  _dispatch_client_callout(*(_QWORD *)(a1 + 72), *(uint64_t (**)(void))(a1 + 64));
  *(_OWORD *)(StatusReg + 160) = v7;
  if (v3)
    objc_autoreleasePoolPop(v3);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(StatusReg + 160);
  *(_QWORD *)(a1 + 64) = 0;
  if (*(_QWORD *)(a1 + 48) != -4)
    return (unsigned int *)_dispatch_event_loop_cancel_waiter_VARIANT_mp(a1);
  result = (unsigned int *)(a1 + 96);
  do
    v6 = __ldxr(result);
  while (__stlxr(v6 + 1, result));
  if (v6)
    return (unsigned int *)_dispatch_thread_event_signal_slow_VARIANT_mp();
  return result;
}

void __DISPATCH_WAIT_FOR_QUEUE__(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t StatusReg;
  _QWORD *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  v4 = (unint64_t *)(a2 + 56);
  while (1)
  {
    v5 = __ldxr(v4);
    if ((v5 & 0xFF80002000000002) != 0x2000000002)
      break;
    v5 |= 0x800000000uLL;
    if (!__stxr(v5, v4))
      goto LABEL_4;
  }
  __clrex();
LABEL_4:
  if ((*(_DWORD *)(a1 + 100) ^ v5) <= 3)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_sync called on queue already owned by current thread";
    qword_1EDF52D38 = v5;
    __break(1u);
    return;
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(StatusReg + 160);
  if ((v5 & 0xFF80001000000000) != 0)
  {
    *(_QWORD *)(a1 + 48) = -4;
    v7 = (_QWORD *)(a1 + 48);
LABEL_7:
    v8 = *(_DWORD *)(StatusReg + 200);
    v9 = (v8 >> 8) & 0xF;
    v10 = (unsigned __int16)v8 >> 12;
    v11 = HIWORD(v8) & 0xF;
    if (v9 <= v10)
      v9 = v10;
    if (v9 > v11)
      LOBYTE(v11) = v9;
    *(_BYTE *)(a1 + 105) = v11;
    *(_BYTE *)(a1 + 104) = v11;
    *(_DWORD *)(a1 + 96) = 0;
    goto LABEL_16;
  }
  if ((v5 & 0x2000000000) != 0)
  {
    *(_QWORD *)(a1 + 48) = a2;
    v12 = a2;
  }
  else
  {
    _dispatch_wait_compute_wlh(a2, a1);
    v12 = *(_QWORD *)(a1 + 48);
  }
  v7 = (_QWORD *)(a1 + 48);
  if (v12 == -4)
    goto LABEL_7;
LABEL_16:
  *(_QWORD *)(StatusReg + 968) = a1;
  v13 = __clz(__rbit32((*(_DWORD *)(a1 + 8) >> 8) & 0x3FFF));
  if (((*(_DWORD *)(a1 + 8) >> 8) & 0x3FFF) != 0)
    v14 = v13 + 1;
  else
    v14 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a1, v14);
  if (*(_QWORD *)(a1 + 48) == -4)
  {
    v15 = (unsigned int *)(a1 + 96);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stxr(v17, v15));
    if (v17)
      _dispatch_thread_event_wait_slow_VARIANT_mp(v15);
  }
  else if ((*(_BYTE *)(a1 + 106) & 8) == 0)
  {
    _dispatch_event_loop_wait_for_ownership_VARIANT_mp(a1);
  }
  *(_QWORD *)(StatusReg + 968) = 0;
  if (*v7 == -4)
  {
    v18 = *(unsigned __int8 *)(a1 + 105);
    if (v18 > *(unsigned __int8 *)(a1 + 104))
    {
      v19 = *(_DWORD *)(StatusReg + 200);
      if ((HIWORD(v19) & 0xF) < v18)
        *(_QWORD *)(StatusReg + 200) = v19 & 0xFFF0FFFF | (v18 << 16);
    }
  }
}

void _dispatch_sync_complete_recurse(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;

  v5 = (a3 >> 1) & 1;
  do
  {
    if (a1 == a2)
      break;
    if ((v5 & 1) != 0)
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 80))(a1, 0, 4);
    else
      _dispatch_lane_non_barrier_complete(a1, 0);
    a1 = *(_QWORD *)(a1 + 24);
    LOBYTE(v5) = *(unsigned __int16 *)(a1 + 80) == 1;
  }
  while (*(_QWORD *)(a1 + 24));
}

void _dispatch_sync_invoke_and_complete_recurse(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t a4)
{
  unint64_t StatusReg;
  __int128 v7;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_OWORD *)(StatusReg + 160);
  *(_QWORD *)(StatusReg + 160) = a1;
  *(_QWORD *)(StatusReg + 168) = &v7;
  _dispatch_client_callout(a2, a3);
  *(_OWORD *)(StatusReg + 160) = v7;
  _dispatch_sync_complete_recurse(a1, 0, a4);
}

unsigned int *_dispatch_wait_compute_wlh(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int *result;
  unint64_t *v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t StatusReg;
  unsigned int v16;
  unsigned int v17;

  v4 = *(_DWORD *)(a1 + 80);
  if ((v4 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 106) |= 0x40u;
    v5 = (unsigned int *)(a1 + 100);
    v6 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFC;
    while (!__ldaxr(v5))
    {
      if (!__stxr(v6, v5))
        goto LABEL_7;
    }
    __clrex();
    _dispatch_unfair_lock_lock_slow_VARIANT_mp((uint64_t)v5);
  }
LABEL_7:
  v8 = (unsigned int *)(a1 + 80);
  result = *(unsigned int **)(a1 + 24);
  v10 = (unint64_t *)(result + 14);
  while (1)
  {
    v11 = __ldxr(v10);
    if (v11 >> 55)
    {
      __clrex();
      goto LABEL_23;
    }
    if ((~v11 & 0x2000000002) != 0)
      break;
    v11 |= 0x800000000uLL;
    if (!__stxr(v11, v10))
    {
      if ((v11 & 0x1000000000) == 0)
        goto LABEL_12;
LABEL_23:
      *(_BYTE *)(a2 + 106) &= ~0x40u;
      *(_QWORD *)(a2 + 48) = -4;
      goto LABEL_24;
    }
  }
  __clrex();
  if ((v11 & 0x1000000000) != 0)
    goto LABEL_23;
LABEL_12:
  if ((v11 & 0x2000000000) != 0)
  {
    if (*(_BYTE *)(*(_QWORD *)result + 40) == 18)
    {
      *(_BYTE *)(a2 + 106) = *(_BYTE *)(a2 + 106) & 0xAF | 0x10;
    }
    else if ((*(_BYTE *)(a2 + 106) & 0x40) != 0)
    {
      v12 = result + 24;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      if ((v13 & 0x80000000) != 0)
        dispatch_set_target_queue_VARIANT_mp_cold_2();
    }
    *(_QWORD *)(a2 + 48) = result;
  }
  else
  {
    result = (unsigned int *)_dispatch_wait_compute_wlh();
  }
LABEL_24:
  if ((v4 & 0x400000) != 0)
  {
    if ((*(_BYTE *)(a2 + 106) & 0x10) != 0)
    {
      do
        v14 = __ldxr(v8);
      while (__stxr(v14 & 0xFFBFFFFF, v8));
    }
    result = (unsigned int *)(a1 + 100);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v16 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    do
      v17 = __ldxr(result);
    while (__stlxr(0, result));
    if (v17 != v16)
    {
      result = (unsigned int *)_dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)result, v17);
      if ((v17 & 2) != 0 && (*(_QWORD *)(StatusReg + 200) & 0xF0000) == 0)
        *(_QWORD *)(StatusReg + 200) = *(_QWORD *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
    }
  }
  return result;
}

void _dispatch_sync_invoke_and_complete(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t StatusReg;
  __int128 v5;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_OWORD *)(StatusReg + 160);
  *(_QWORD *)(StatusReg + 160) = a1;
  *(_QWORD *)(StatusReg + 168) = &v5;
  _dispatch_client_callout(a2, a3);
  *(_OWORD *)(StatusReg + 160) = v5;
  _dispatch_lane_non_barrier_complete(a1, 0);
}

void _dispatch_async_and_wait_recurse(uint64_t a1, uint64_t a2, int a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;

  v5 = *(_QWORD *)(a1 + 56);
  v6 = a1;
  if ((*(_DWORD *)(a1 + 80) & 0x1000000) != 0)
    goto LABEL_35;
  v7 = (_DWORD *)(a1 + 80);
  v8 = a3 & 0xFFFFFFFC;
  v9 = a1;
  v10 = a4;
LABEL_3:
  if ((v5 & 0x3000000000) != 0)
  {
    v11 = *(_QWORD *)(v9 + 24);
    if (v11 < (unint64_t)&_dispatch_root_queues || v11 >= (unint64_t)&_dispatch_queue_serial_numbers)
    {
      v6 = v9;
LABEL_35:
      *(_QWORD *)a2 &= ~0x80uLL;
      *(_QWORD *)(a2 + 56) = v6;
      v9 = v6;
      goto LABEL_32;
    }
  }
  if ((v10 & 2) != 0)
  {
    v13 = (unint64_t)*(unsigned __int16 *)(v9 + 80) << 41;
    v14 = (unint64_t *)(v9 + 56);
    while (1)
    {
      v15 = __ldaxr(v14);
      if (v15 != (v15 & 0x3000000000) - v13 + 0x20000000000000)
        break;
      if (!__stxr(v15 & 0x3000000000 | v8 | 0x60000000000002, v14))
        goto LABEL_12;
    }
LABEL_31:
    __clrex();
    goto LABEL_32;
  }
  if (!*(_QWORD *)(v9 + 48))
  {
    v20 = (unint64_t *)(v9 + 56);
    while (1)
    {
      v21 = __ldxr(v20);
      if ((v21 & 0xFFC0018000000000) != 0)
        goto LABEL_31;
      if (!__stxr(v21 + 0x20000000000, v20))
      {
LABEL_12:
        v16 = *(_DWORD *)(v9 + 84) & 0xFFF;
        if (v16)
        {
          v17 = v16 >= 0x100 ? 256 << (BYTE1(v16) - 1) : 0;
          v18 = v17 & 0xFFFFFFFFFFFFFF00 | *(_DWORD *)(v9 + 84);
          if (v18 > (*(_QWORD *)(a2 + 8) & 0xFFFFFFuLL))
            *(_QWORD *)(a2 + 8) = v18 | 0x10000000;
        }
        if ((*(_BYTE *)(a2 + 106) & 3) == 0)
          *(_BYTE *)(a2 + 106) = *(_BYTE *)(a2 + 106) & 0xFC | HIWORD(*v7) & 3;
        v6 = *(_QWORD *)(v9 + 24);
        if (!*(_QWORD *)(v6 + 24))
        {
          _dispatch_async_and_wait_invoke_and_complete_recurse(a1, a2, v9, a4);
          return;
        }
        v7 = (_DWORD *)(v6 + 80);
        v19 = v10 & 0xFFFFFFFFFFFFFFFDLL;
        v10 |= 2uLL;
        if (*(_WORD *)(v6 + 80) != 1)
          v10 = v19;
        *(_QWORD *)a2 = v10;
        v5 = *(_QWORD *)(v6 + 56);
        v9 = v6;
        if ((*(_DWORD *)(v6 + 80) & 0x1000000) == 0)
          goto LABEL_3;
        goto LABEL_35;
      }
    }
  }
LABEL_32:
  _dispatch_async_and_wait_f_slow(a1, a4, a2, v9);
}

void _dispatch_async_and_wait_f_slow(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  __DISPATCH_WAIT_FOR_QUEUE__(a3, a4);
  if (*(_QWORD *)(a3 + 64))
    _dispatch_async_and_wait_invoke_and_complete_recurse(a1, a3, *(_QWORD *)(a3 + 56), a2);
  else
    _dispatch_sync_complete_recurse(a1, *(_QWORD *)(a3 + 56), a2);
}

void _dispatch_async_and_wait_invoke_and_complete_recurse(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t StatusReg;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  BOOL v23;
  signed int v24;
  uint64_t v25;
  __int128 v26;

  if (*(_BYTE *)(*(_QWORD *)a3 + 40) != 18 && (*(_QWORD *)(a3 + 56) & 0x2000000000) == 0)
    a3 = -4;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v8 = *(_QWORD *)(StatusReg + 216);
  *(_QWORD *)(StatusReg + 216) = a3;
  if ((*(_BYTE *)(a2 + 106) & 1) != 0)
    v9 = (void *)MEMORY[0x18D766D94]();
  else
    v9 = 0;
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 24);
  v26 = *(_OWORD *)(StatusReg + 160);
  *(_QWORD *)(StatusReg + 160) = a1;
  *(_QWORD *)(StatusReg + 168) = &v26;
  v12 = *(_QWORD *)(StatusReg + 32);
  v13 = v12 & 0xFFFFFF;
  v14 = (v12 & 0xFFFFFFuLL) >= (v10 & 0xFFFFFFuLL) || (v12 & 0xFFFFFF) == 0;
  if (v14)
    v15 = 0;
  else
    v15 = v12 & 0xFFFFFF;
  v16 = v10 & 0xFFFFFFFF02FFFFFFLL;
  if (v14)
    v17 = 0;
  else
    v17 = v10 & 0xFFFFFFFF02FFFFFFLL;
  if ((v12 & 0x1000000) != 0)
  {
    if (v17)
    {
LABEL_45:
      _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v16, v11, 0);
      v11 = v25;
      goto LABEL_22;
    }
    v17 = v12 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v17 == (v12 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_16;
  }
  v16 = v17;
  if (v17)
    goto LABEL_45;
LABEL_16:
  if (v11 == -1)
    goto LABEL_22;
  if (*(_QWORD *)(StatusReg + 224) != v11)
  {
    v16 = 0;
    goto LABEL_45;
  }
  if (v11)
  {
    v18 = (unsigned int *)(v11 + 12);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    if (v19 <= 0)
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
      __break(1u);
LABEL_49:
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
      __break(1u);
      return;
    }
  }
LABEL_22:
  _dispatch_client_callout(*(_QWORD *)(a2 + 72), *(uint64_t (**)(void))(a2 + 64));
  v20 = *(_QWORD *)(StatusReg + 32);
  if ((v20 & 0x1000000) != 0)
  {
    if (!v14)
    {
LABEL_47:
      _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v13, v11, 6);
      goto LABEL_30;
    }
    v13 = v20 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else
  {
    if (v15 == (v20 & 0xFFFFFFFF77FFFFFFLL))
      goto LABEL_24;
    v13 = v15;
  }
  if (v13)
    goto LABEL_47;
LABEL_24:
  if (v11 == -1)
    goto LABEL_30;
  if (*(_QWORD *)(StatusReg + 224) != v11)
  {
    v13 = 0;
    goto LABEL_47;
  }
  if (v11)
  {
    v21 = (unsigned int *)(v11 + 12);
    do
    {
      v22 = __ldxr(v21);
      v23 = __OFSUB__(v22, 1);
      v24 = v22 - 1;
    }
    while (__stxr(v24, v21));
    if ((v24 < 0) ^ v23 | (v24 == 0))
      goto LABEL_49;
  }
LABEL_30:
  *(_OWORD *)(StatusReg + 160) = v26;
  if (v9)
    objc_autoreleasePoolPop(v9);
  *(_QWORD *)(StatusReg + 216) = v8;
  _dispatch_sync_complete_recurse(a1, 0, a4);
}

void _dispatch_queue_specific_head_dispose(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD v7[2];

  v3 = a1 + 1;
  v2 = (_QWORD *)a1[1];
  if (!v2)
    goto LABEL_9;
  v2[4] = v7;
  v4 = a1[2];
  v7[0] = v2;
  v7[1] = v4;
  a1[1] = 0;
  a1[2] = v3;
  do
  {
    v5 = (_QWORD *)v2[3];
    if (v2[2])
    {
      v2[3] = 0;
      v6 = (_QWORD *)a1[2];
      v2[4] = v6;
      *v6 = v2;
      a1[2] = v2 + 3;
    }
    else
    {
      free(v2);
    }
    v2 = v5;
  }
  while (v5);
  if (*v3)
    _dispatch_barrier_async_detached_f_VARIANT_mp((uint64_t)&unk_1ECCEA080, (uint64_t)a1, (uint64_t)_dispatch_queue_specific_head_dispose_slow);
  else
LABEL_9:
    free(a1);
}

void _dispatch_queue_specific_head_dispose_slow(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  if (v2)
  {
    do
    {
      v3 = *(_QWORD *)(v2 + 24);
      _dispatch_client_callout(*(_QWORD *)(v2 + 8), *(uint64_t (**)(void))(v2 + 16));
      free((void *)v2);
      v2 = v3;
    }
    while (v3);
  }
  free(a1);
}

unsigned int *_dispatch_non_barrier_waiter_redirect_or_wake(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

LABEL_1:
  v2 = *(_QWORD *)(a1 + 56);
  if ((BYTE4(v2) & 7u) > *(unsigned __int8 *)(a2 + 105))
    *(_BYTE *)(a2 + 105) = BYTE4(v2) & 7;
  v3 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 0x80) != 0)
  {
    v4 = *(_DWORD *)(a1 + 84) & 0xFFF;
    if (v4)
    {
      v5 = v4 >= 0x100 ? 256 << (BYTE1(v4) - 1) : 0;
      v6 = v5 & 0xFFFFFFFFFFFFFF00 | *(_DWORD *)(a1 + 84);
      if (v6 > (*(_QWORD *)(a2 + 8) & 0xFFFFFFuLL))
        *(_QWORD *)(a2 + 8) = v6 | 0x10000000;
    }
    if ((*(_BYTE *)(a2 + 106) & 3) == 0)
      *(_BYTE *)(a2 + 106) = *(_BYTE *)(a2 + 106) & 0xFC | HIWORD(*(_DWORD *)(a1 + 80)) & 3;
    if ((v2 & 0x3000000000) == 0)
      goto LABEL_15;
    *(_QWORD *)(a2 + 56) = a1;
    return _dispatch_waiter_wake_wlh_anon(a2);
  }
  if ((v2 & 0x3000000000) != 0)
    return _dispatch_waiter_wake_wlh_anon(a2);
LABEL_15:
  a1 = *(_QWORD *)(a1 + 24);
  if (*(_WORD *)(a1 + 80) == 1)
  {
    *(_QWORD *)a2 = v3 | 2;
  }
  else
  {
    *(_QWORD *)a2 = v3 & 0xFFFFFFFFFFFFFFFDLL;
    if (!*(_QWORD *)(a1 + 48))
    {
      v7 = (unint64_t *)(a1 + 56);
      while (1)
      {
        v8 = __ldxr(v7);
        if ((v8 & 0xFFC0018000000000) != 0)
          break;
        if (!__stxr(v8 + 0x20000000000, v7))
          goto LABEL_1;
      }
      __clrex();
    }
  }
  return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
}

  v2 = *(_QWORD *)(a1 + 56);
  if ((BYTE4(v2) & 7u) > *(unsigned __int8 *)(a2 + 105))
    *(_BYTE *)(a2 + 105) = BYTE4(v2) & 7;
  v3 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 0x80) != 0)
  {
    v4 = *(_DWORD *)(a1 + 84) & 0xFFF;
    if (v4)
    {
      v5 = v4 >= 0x100 ? 256 << (BYTE1(v4) - 1) : 0;
      v6 = v5 & 0xFFFFFFFFFFFFFF00 | *(_DWORD *)(a1 + 84);
      if (v6 > (*(_QWORD *)(a2 + 8) & 0xFFFFFFuLL))
        *(_QWORD *)(a2 + 8) = v6 | 0x10000000;
    }
    if ((*(_BYTE *)(a2 + 106) & 3) == 0)
      *(_BYTE *)(a2 + 106) = *(_BYTE *)(a2 + 106) & 0xFC | HIWORD(*(_DWORD *)(a1 + 80)) & 3;
    if ((v2 & 0x3000000000) == 0)
      goto LABEL_15;
    *(_QWORD *)(a2 + 56) = a1;
    return _dispatch_waiter_wake_wlh_anon_0(a2);
  }
  if ((v2 & 0x3000000000) != 0)
    return _dispatch_waiter_wake_wlh_anon_0(a2);
LABEL_15:
  a1 = *(_QWORD *)(a1 + 24);
  if (*(_WORD *)(a1 + 80) == 1)
  {
    *(_QWORD *)a2 = v3 | 2;
  }
  else
  {
    *(_QWORD *)a2 = v3 & 0xFFFFFFFFFFFFFFFDLL;
    if (!*(_QWORD *)(a1 + 48))
    {
      v7 = *(_QWORD *)(a1 + 56);
      while ((v7 & 0xFFC0018000000000) == 0)
      {
        v8 = v7;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), (unint64_t *)&v8, v7 + 0x20000000000, memory_order_relaxed, memory_order_relaxed);
        v9 = v8 == v7;
        v7 = v8;
        if (v9)
          goto LABEL_1;
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
}

unsigned int *_dispatch_waiter_wake_wlh_anon(uint64_t a1)
{
  unsigned int *result;
  unsigned int v3;

  if (*(unsigned __int8 *)(a1 + 105) > *(unsigned __int8 *)(a1 + 104))
    _pthread_workqueue_override_start_direct();
  result = (unsigned int *)(a1 + 96);
  do
    v3 = __ldxr(result);
  while (__stlxr(v3 + 1, result));
  if (v3)
    return (unsigned int *)_dispatch_thread_event_signal_slow_VARIANT_mp();
  return result;
}

unsigned int *_dispatch_barrier_waiter_redirect_or_wake(uint64_t a1, uint64_t a2, char a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t StatusReg;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  BOOL v11;
  signed int v12;
  unsigned int *v13;
  unsigned int v14;
  BOOL v15;
  signed int v16;
  unsigned int *v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  if (*(_QWORD *)(a2 + 48) == -4 && (BYTE4(a4) & 7u) > *(unsigned __int8 *)(a2 + 105))
    *(_BYTE *)(a2 + 105) = BYTE4(a4) & 7;
  if ((a4 & 0x2000000000) != 0)
  {
    v8 = a1;
    if ((a3 & 1) == 0)
    {
      if ((a4 & 1) == 0)
        goto LABEL_30;
      v8 = a1;
      if ((a5 & 1) != 0)
        goto LABEL_30;
      v8 = a1;
      if (*(_DWORD *)(a1 + 8) == 0x7FFFFFFF)
        goto LABEL_30;
      v9 = (unsigned int *)(a1 + 8);
      do
      {
        v10 = __ldxr(v9);
        v11 = __OFSUB__(v10, 1);
        v12 = v10 - 1;
      }
      while (__stlxr(v12, v9));
      v8 = a1;
      if (!((v12 < 0) ^ v11 | (v12 == 0)))
        goto LABEL_30;
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
    }
    if ((a5 & 1) != 0)
      goto LABEL_26;
  }
  else
  {
    if ((~a4 & 0x1800000000) == 0)
    {
      v5 = HIDWORD(a4) & 7;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v7 = *(_DWORD *)(StatusReg + 200);
      if ((HIWORD(v7) & 0xF) < v5)
        *(_QWORD *)(StatusReg + 200) = v7 & 0xFFF0FFFF | ((_DWORD)v5 << 16);
    }
    v8 = -4;
    if ((a3 & 1) == 0)
      goto LABEL_30;
  }
  if (*(_DWORD *)(a1 + 8) == 0x7FFFFFFF)
    goto LABEL_30;
  v13 = (unsigned int *)(a1 + 8);
  do
  {
    v14 = __ldxr(v13);
    v15 = __OFSUB__(v14, 2);
    v16 = v14 - 2;
  }
  while (__stlxr(v16, v13));
  if (!((v16 < 0) ^ v15 | (v16 == 0)))
    goto LABEL_30;
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
LABEL_26:
  v8 = a1;
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    v17 = (unsigned int *)(a1 + 8);
    do
    {
      v18 = __ldxr(v17);
      v19 = __OFSUB__(v18, 1);
      v20 = v18 - 1;
    }
    while (__stlxr(v20, v17));
    v8 = a1;
    if (((int)v20 < 0) ^ v19 | ((_DWORD)v20 == 0))
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
      goto LABEL_47;
    }
  }
LABEL_30:
  if ((a4 & 0x3000000000) == 0)
  {
    v8 = *(_QWORD *)(a1 + 24);
    v20 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 & 0x80) != 0)
    {
      v22 = *(_DWORD *)(a1 + 84) & 0xFFF;
      if (v22)
      {
        v23 = v22 >= 0x100 ? 256 << (BYTE1(v22) - 1) : 0;
        v24 = v23 & 0xFFFFFFFFFFFFFF00 | *(_DWORD *)(a1 + 84);
        if (v24 > (*(_QWORD *)(a2 + 8) & 0xFFFFFFuLL))
          *(_QWORD *)(a2 + 8) = v24 | 0x10000000;
      }
      if ((*(_BYTE *)(a2 + 106) & 3) == 0)
        *(_BYTE *)(a2 + 106) = *(_BYTE *)(a2 + 106) & 0xFC | HIWORD(*(_DWORD *)(a1 + 80)) & 3;
    }
    if (*(_WORD *)(v8 + 80) == 1)
    {
      *(_QWORD *)a2 = v20 | 2;
LABEL_45:
      *(_BYTE *)(a2 + 106) &= ~0x80u;
      return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 88))(v8);
    }
LABEL_47:
    *(_QWORD *)a2 = v20 & 0xFFFFFFFFFFFFFFFDLL;
    if (!*(_QWORD *)(v8 + 48))
    {
      v25 = (unint64_t *)(v8 + 56);
      while (1)
      {
        v26 = __ldxr(v25);
        if ((v26 & 0xFFC0018000000000) != 0)
          break;
        if (!__stxr(v26 + 0x20000000000, v25))
          return _dispatch_non_barrier_waiter_redirect_or_wake(v8, a2);
      }
      __clrex();
    }
    goto LABEL_45;
  }
  if ((*(_BYTE *)a2 & 0x80) != 0)
    *(_QWORD *)(a2 + 56) = a1;
  return _dispatch_waiter_wake(a2, v8, a4, a5);
}

unsigned int *_dispatch_waiter_wake(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int *result;

  v5 = *(_QWORD *)(a1 + 48);
  if (((a3 & 0x2000000000) == 0 || *(char *)(a1 + 106) < 0) && (a4 & 0x2000000000) == 0 && v5 == -4)
    return _dispatch_waiter_wake_wlh_anon(a1);
  result = (unsigned int *)_dispatch_event_loop_wake_owner_VARIANT_mp(a1, a2, a3, a4);
  if (v5 == -4)
    return _dispatch_waiter_wake_wlh_anon(a1);
  return result;
}

void _dispatch_lane_concurrent_drain(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t StatusReg;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  void (**v27)(uint64_t);
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  BOOL v43;
  signed int v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _OWORD *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v58;
  void *context;
  uint64_t v60;
  unint64_t *v61;
  __int128 v62;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *a4;
  v6 = (unint64_t *)(a1 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v62 = *(_OWORD *)(StatusReg + 160);
    *(_QWORD *)(StatusReg + 160) = a1;
    *(_QWORD *)(StatusReg + 168) = &v62;
    if ((v5 & 0x40000000000000) != 0)
      v10 = 0x40000000000000;
    else
      v10 = v5 & 0x3FFE0000000000;
    v11 = (unint64_t *)(a1 + 104);
    v12 = *(_QWORD *)(a1 + 104);
    if (!v12)
      v12 = _dispatch_wait_for_enqueuer((unint64_t *)(a1 + 104));
    v54 = (_OWORD *)(StatusReg + 160);
    if (!(*(_QWORD *)(a1 + 56) >> 55))
    {
      v13 = (unint64_t *)(a1 + 56);
      v55 = (a3 >> 21) & 1;
      v56 = a3 & 0xFFFF0000;
      v58 = a3;
      v60 = v4;
      v61 = v11;
      do
      {
        if (v4 != *(_QWORD *)(a1 + 24))
          break;
        v14 = *(_QWORD *)v12;
        if (*(_QWORD *)v12 >= 0x1000uLL)
        {
          if ((*(_QWORD *)(v14 + 40) & 0xF0) == 0x10 && (*(_DWORD *)(v12 + 80) & 0x80000) != 0)
          {
LABEL_18:
            if (v10 != 0x40000000000000)
            {
              v16 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) - 0x10000000000;
              do
              {
                v17 = __ldaxr(v13);
                v18 = v17 - v10;
                if ((v17 & 0x10000000000) != 0)
                  v19 = 0;
                else
                  v19 = v16;
                v20 = v19 + v18;
                if (!(v20 >> 53))
                  v20 += 0x40010000000000;
              }
              while (__stxr(v20 & 0xFFFFFF7FFFFFFFFFLL, v13));
              if ((v20 & 0x40000000000000) == 0)
                goto LABEL_158;
              v14 = *(_QWORD *)v12;
            }
            if (v14 <= 0xFFF && (a3 & 0x80000) == 0 && (v14 & 1) != 0)
            {
              *(_QWORD *)(a2 + 8) = v12;
              if ((a3 & 8) == 0)
              {
                *v54 = v62;
                return;
              }
              qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Deferred continuation on source, mach channel or mgr";
              __break(1u);
              goto LABEL_157;
            }
            v21 = *(_QWORD *)(v12 + 16);
            *v11 = v21;
            if (!v21)
            {
              v22 = (unint64_t *)(v12 + 16);
              while (1)
              {
                v23 = __ldxr(v6);
                if (v23 != v12)
                  break;
                if (!__stlxr(0, v6))
                  goto LABEL_55;
              }
              __clrex();
              v21 = *v22;
              if (!*v22)
                v21 = _dispatch_wait_for_enqueuer(v22);
              *v11 = v21;
            }
LABEL_55:
            v10 = 0x40000000000000;
            goto LABEL_56;
          }
        }
        else if ((v14 & 2) != 0)
        {
          goto LABEL_18;
        }
        if (v10 == 0x40000000000000)
        {
          do
            v15 = __ldxr(v13);
          while (__stlxr(v15 ^ 0x40000000000000, v13));
          v10 = (unint64_t)*(unsigned __int16 *)(a1 + 80) << 41;
        }
        else if (!v10)
        {
          if (v14 > 0xFFF || (v14 & 0x81) == 0)
          {
            while (1)
            {
              v50 = __ldaxr(v13);
              if ((v50 & 0xFFE0018000000000) != 0)
                break;
              if (!__stxr(v50 + 0x20000000000, v13))
              {
                v10 = 0x20000000000;
                goto LABEL_37;
              }
            }
LABEL_157:
            __clrex();
LABEL_158:
            *a4 &= 0x4000000001uLL;
            *v54 = v62;
            return;
          }
          do
          {
            v45 = __ldxr(v13);
            v10 = 0x20000000000;
          }
          while (__stxr(v45 + 0x20000000000, v13));
        }
LABEL_37:
        v21 = *(_QWORD *)(v12 + 16);
        *v11 = v21;
        if (!v21)
        {
          v24 = (unint64_t *)(v12 + 16);
          while (1)
          {
            v25 = __ldxr(v6);
            if (v25 != v12)
              break;
            if (!__stlxr(0, v6))
              goto LABEL_45;
          }
          __clrex();
          v21 = *v24;
          if (!*v24)
            v21 = _dispatch_wait_for_enqueuer(v24);
          *v11 = v21;
        }
LABEL_45:
        if (*(_QWORD *)v12 <= 0xFFFuLL && (*(_QWORD *)v12 & 0x81) != 0)
        {
          v10 -= 0x20000000000;
          _dispatch_non_barrier_waiter_redirect_or_wake(a1, v12);
          goto LABEL_122;
        }
        if ((a3 & 0x20000) != 0)
        {
          v10 -= 0x20000000000;
          _dispatch_continuation_redirect_push((_DWORD *)a1, (_QWORD *)v12);
          goto LABEL_122;
        }
LABEL_56:
        v27 = *(void (***)(uint64_t))(StatusReg + 192);
        if (v27)
          (*v27)(a1);
        v28 = *(_QWORD *)v12;
        if (*(_QWORD *)v12 < 0x1000uLL)
        {
          if ((a3 & 0x1000000) != 0)
          {
            context = (void *)MEMORY[0x18D766D94]();
            v28 = *(_QWORD *)v12;
          }
          else
          {
            context = 0;
          }
          v29 = *(_QWORD *)(v12 + 24);
          if ((v28 & 4) != 0)
            *(_QWORD *)(v12 + 24) = -1;
          v30 = *(_QWORD *)(v12 + 8);
          if (v30 == -1)
          {
            v33 = 0;
          }
          else
          {
            v31 = *(_QWORD *)(StatusReg + 200);
            if (((v31 >> 8) & 0xF) != 0)
              v32 = 256 << ((BYTE1(v31) & 0xFu) - 1);
            else
              v32 = 0;
            v33 = v32 & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(StatusReg + 200);
            v34 = v30 & 0xFFFFFF;
            if ((v30 & 0xFFFFFF) != 0)
            {
              v35 = v32 & 0xFFFFFF00;
              if ((v31 & 0x44000000) == 0 && (*(_QWORD *)(v12 + 8) & 0x10000000) == 0)
                v37 = v33;
              else
                v37 = v30 & 0xFFFFFF;
              if (v34 >= v35)
                v33 = v37;
            }
            else if ((unsigned __int16)v31 >> 12)
            {
              v33 = (256 << (((unsigned __int16)v31 >> 12) - 1)) | 0xFF;
            }
          }
          v38 = v28 & 4;
          v39 = v33 & 0xFFFFFFFF02FFFFFFLL;
          v40 = *(_QWORD *)(StatusReg + 32);
          if ((v40 & 0x1000000) != 0)
          {
            if (!v39)
            {
              v39 = v40 & 0xFFFFFFFFFEFFFFFFLL;
              goto LABEL_100;
            }
LABEL_106:
            _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v39, v29, v38 | 2);
          }
          else
          {
            if (v39 == (v40 & 0xFFFFFFFF77FFFFFFLL))
              goto LABEL_85;
LABEL_100:
            if (v39)
              goto LABEL_106;
LABEL_85:
            if (v29 != -1)
            {
              if (*(_QWORD *)(StatusReg + 224) != v29)
              {
                v39 = 0;
                goto LABEL_106;
              }
              if ((v28 & 4) != 0 && v29)
              {
                v41 = (unsigned int *)(v29 + 12);
                do
                {
                  v42 = __ldxr(v41);
                  v43 = __OFSUB__(v42, 1);
                  v44 = v42 - 1;
                }
                while (__stxr(v44, v41));
                if ((v44 < 0) ^ v43 | (v44 == 0))
                {
                  qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
                  __break(1u);
                  return;
                }
LABEL_108:
                v46 = *(_QWORD *)(StatusReg + 176);
                if (v46)
                  v47 = *(_DWORD *)(v46 + 8) + 1;
                else
                  v47 = 1;
                v38 = v12;
                if (v47 <= _dispatch_continuation_cache_limit)
                {
                  v38 = 0;
                  *(_QWORD *)(v12 + 16) = v46;
                  *(_DWORD *)(v12 + 8) = v47;
                  *(_QWORD *)(StatusReg + 176) = v12;
                }
LABEL_113:
                if ((v28 & 8) != 0)
                {
                  v48 = *(_QWORD *)(v12 + 48);
                  v49 = *(_QWORD *)(*(_QWORD *)v48 + 40);
                  if (v49 != 514)
                  {
                    qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected object type";
                    qword_1EDF52D38 = v49;
                    __break(1u);
                    return;
                  }
                  _dispatch_client_callout(*(_QWORD *)(v12 + 40), *(uint64_t (**)(void))(v12 + 32));
                  dispatch_group_leave_VARIANT_mp(v48);
                }
                else
                {
                  _dispatch_client_callout(*(_QWORD *)(v12 + 40), *(uint64_t (**)(void))(v12 + 32));
                }
                v11 = v61;
                if (v38)
                  _dispatch_continuation_free_to_cache_limit_VARIANT_mp(v38);
                a3 = v58;
                if (context)
                  objc_autoreleasePoolPop(context);
                goto LABEL_119;
              }
            }
          }
          if ((v28 & 4) != 0)
            goto LABEL_108;
          goto LABEL_113;
        }
        if (*(_QWORD *)(v28 + 40) == 1)
          (*(void (**)(uint64_t, _QWORD, _QWORD))(v28 + 48))(v12, 0, v55);
        else
          (*(void (**)(uint64_t, uint64_t, _QWORD))(v28 + 64))(v12, a2, v56);
        v11 = v61;
LABEL_119:
        if (v27)
          v27[1](a1);
        v4 = v60;
LABEL_122:
        v12 = v21;
        if (!v21)
        {
          if (!*v6)
          {
            v12 = 0;
            break;
          }
          v12 = *v11;
          if (!*v11)
            v12 = _dispatch_wait_for_enqueuer(v11);
        }
        if (*(_QWORD *)(StatusReg + 40))
          _dispatch_return_to_kernel();
      }
      while (*(_WORD *)(a1 + 80) != 1
           && ((a3 & 0x4000000) != 0 || (*(_BYTE *)(StatusReg + 960) & 1) == 0)
           && ((a3 & 0x100000) == 0
            || (*(_DWORD *)(*(_QWORD *)(StatusReg + 216) + 60) & 7u) <= *(unsigned __int8 *)(*(_QWORD *)(StatusReg + 216)
                                                                                             + 100))
           && !(*v13 >> 55));
    }
    if (v10 == 0x40000000000000)
      v10 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) + 0x40000000000000;
    if (!v12)
    {
      *a4 = *a4 & 0x4000000001 | v10;
      *v54 = v62;
      return;
    }
    v51 = *(unsigned __int16 *)(a1 + 80);
    if (v51 < 2)
    {
LABEL_148:
      *a4 = *a4 & 0x4000000001 | v10;
      *v54 = v62;
      return;
    }
    v52 = *(_QWORD *)v12;
    if (*(_QWORD *)v12 < 0x1000uLL)
    {
      if ((v52 & 2) == 0)
        goto LABEL_148;
    }
    else if ((*(_QWORD *)(v52 + 40) & 0xF0) != 0x10 || (*(_DWORD *)(v12 + 80) & 0x80000) == 0)
    {
      goto LABEL_148;
    }
    v10 = v10 - (v51 << 41) + 0x10000000000;
    goto LABEL_148;
  }
}

void _dispatch_workloop_bound_thread_init_once()
{
  int v0;
  size_t v1;
  int v2;

  v2 = 0;
  v1 = 4;
  v0 = sysctlbyname("kern.kern_event.thread_bound_kqwl_support_enabled", &v2, &v1, 0, 0);
  if (v0)
    _dispatch_bug(4220, v0);
  if (v2)
    _dispatch_thread_bound_kqwl_enabled = 1;
}

void _dispatch_workloop_activate_simulator_fallback(uint64_t a1, __int128 *a2)
{
  unsigned int *v3;
  const char *v4;
  unsigned int *v5;
  int v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = (unsigned int *)_dispatch_pthread_root_queue_create("com.apple.libdispatch.workloop_fallback", 0, a2, 0, 0);
  *(_QWORD *)(a1 + 24) = v3;
  if (v3[2] != 0x7FFFFFFF)
  {
    v5 = v3 + 2;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    if (v6 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  dispatch_release_VARIANT_mp(v3, v4);
  v7 = (unint64_t *)(a1 + 56);
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 & 0xFFFFFFCFFFFFFFFFLL | 0x1000000000, v7));
}

void _dispatch_queue_wakeup_with_override_slow(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v5;
  int *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  char v11;
  unsigned int *v12;
  unint64_t StatusReg;
  unsigned int v14;
  unsigned int v16;
  uint64_t v17;

  v5 = HIDWORD(a2) & 7;
  v6 = *(int **)(a1 + 24);
  if ((a2 & 0x1000000000) != 0)
  {
    if (v6 < (int *)&_dispatch_root_queues || v6 >= (int *)&_dispatch_queue_serial_numbers)
      goto LABEL_38;
    if (a2 >= 4)
    {
      _pthread_workqueue_override_start_direct_check_owner();
      goto LABEL_38;
    }
    goto LABEL_15;
  }
  if ((*(_DWORD *)(a1 + 80) & 0x400000) == 0)
  {
LABEL_15:
    v11 = 1;
LABEL_16:
    v12 = (unsigned int *)(a1 + 100);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_17:
    v14 = v5;
    if ((*(_QWORD *)(*(_QWORD *)v6 + 40) & 0x10000) != 0)
    {
      if (v5 > ((v6[21] >> 8) & 0xF))
        _dispatch_root_queue_push_override_stealer(v6, a1, v5);
    }
    else if (*(_QWORD *)(*(_QWORD *)v6 + 40) == 18)
    {
      _dispatch_workloop_push_stealer(v6, a1, v5);
    }
    else if ((v6[15] & 7) == 0 || (v6[15] & 7u) < v5)
    {
      (*(void (**)(int *, uint64_t, _QWORD))(*(_QWORD *)v6 + 80))(v6, v5, 0);
    }
    if ((v11 & 1) == 0)
    {
      while (1)
      {
        do
        {
          while (1)
          {
            v16 = __ldxr(v12);
            if ((v16 & 2) != 0)
              break;
            if (!__stlxr(0, v12))
              goto LABEL_40;
          }
        }
        while (__stlxr(v16 ^ 2, v12));
        if (v16 == 2)
          break;
        __dmb(9u);
        if ((*(_QWORD *)(StatusReg + 200) & 0xF0000) == 0)
          *(_QWORD *)(StatusReg + 200) = *(_QWORD *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
        v5 = *(_DWORD *)(a1 + 60) & 7;
        if ((*(_DWORD *)(a1 + 60) & 7u) > v14)
          goto LABEL_17;
      }
LABEL_40:
      if ((v16 & 1) != 0)
        _dispatch_unfair_lock_unlock_slow_VARIANT_mp(a1 + 100, v16);
    }
    goto LABEL_38;
  }
  v7 = (unsigned int *)(a1 + 100);
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFCLL;
  do
  {
    while (1)
    {
      v9 = __ldaxr(v7);
      if (v9 > 3)
        break;
      if (!__stxr(v8, v7))
      {
        v6 = *(int **)(a1 + 24);
        if (MEMORY[0xFFFFFC100])
        {
          v17 = HIDWORD(a2) & 7;
          kdebug_trace();
          v5 = v17;
        }
        v11 = 0;
        goto LABEL_16;
      }
    }
  }
  while (__stxr(v9 | 2, v7));
  _pthread_workqueue_override_start_direct_check_owner();
  if (MEMORY[0xFFFFFC100])
    kdebug_trace();
LABEL_38:
  if ((a3 & 1) != 0)
    _os_object_release_internal_n_VARIANT_mp((void *)a1, (const char *)2);
}

void _dispatch_root_queue_push_override_stealer(int *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  int *v4;
  unint64_t StatusReg;
  int v6;
  int v8;
  unsigned int v9;
  __objc2_class *v10;
  unsigned int *v11;
  __objc2_class **v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  if (a3 - 7 <= 0xFFFFFFF9)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupted priority";
    qword_1EDF52D38 = a3;
    __break(1u);
LABEL_19:
    v10 = (__objc2_class *)_dispatch_continuation_alloc_from_heap_VARIANT_mp();
    goto LABEL_10;
  }
  v3 = a2;
  v4 = a1;
  v8 = a1[21];
  if (v8 < 0)
    v9 = 2;
  else
    v9 = (v8 >> 25) & 4;
  if ((v9 & 2) != 0)
    v6 = 1;
  else
    v6 = 2 * (v9 > 3);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v10 = *(__objc2_class **)(StatusReg + 176);
  if (!v10)
    goto LABEL_19;
  *(_QWORD *)(StatusReg + 176) = v10->cache;
LABEL_10:
  v10->isa = (__objc2_class *)&unk_1E1E867E8;
  if (*(_DWORD *)(v3 + 8) == 0x7FFFFFFF)
    goto LABEL_14;
  v11 = (unsigned int *)(v3 + 8);
  do
  {
    v12 = (__objc2_class **)__ldxr(v11);
    v13 = ((_DWORD)v12 + 2);
  }
  while (__stxr(v13, v11));
  if ((int)v12 > 0)
  {
LABEL_14:
    v12 = &_dispatch_root_queues;
    v13 = 3 * a3 + v6 - 3;
    v11 = (unsigned int *)(&_dispatch_root_queues + 16 * v13);
    v10[1].superclass = (__objc2_class *)v3;
    v10[1].cache = v4;
    v10->info = 0;
    v10[1].isa = v10;
    v10->superclass = (__objc2_class *)-1;
    v10->vtable = (void *)-1;
    v10->cache = 0;
    v14 = (unint64_t *)(v11 + 12);
    *(_QWORD *)(StatusReg + 976) = v11 + 12;
    do
      v15 = __ldxr(v14);
    while (__stlxr((unint64_t)v10, v14));
    if (v15)
    {
      *(_QWORD *)(v15 + 16) = v10;
      *(_QWORD *)(StatusReg + 976) = 0;
      return;
    }
  }
  else
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
  }
  v12[16 * v13 + 13] = v10;
  *(_QWORD *)(StatusReg + 976) = 0;
  _dispatch_root_queue_poke_and_wakeup_VARIANT_mp(v11, 1, 0);
}

_QWORD *_dispatch_workloop_push_stealer(_QWORD *result, uint64_t a2, unsigned int a3)
{
  _QWORD *v5;
  unint64_t StatusReg;
  _QWORD *v7;
  unsigned int *v8;
  int v9;

  v5 = result;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_QWORD **)(StatusReg + 176);
  if (v7)
  {
    *(_QWORD *)(StatusReg + 176) = v7[2];
  }
  else
  {
    result = _dispatch_continuation_alloc_from_heap_VARIANT_mp();
    v7 = result;
  }
  *v7 = &unk_1E1E867A0;
  if (*(_DWORD *)(a2 + 8) == 0x7FFFFFFF)
    goto LABEL_7;
  v8 = (unsigned int *)(a2 + 8);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 2, v8));
  if (v9 > 0)
  {
LABEL_7:
    v7[6] = a2;
    v7[7] = 0;
    v7[4] = 0;
    v7[5] = v7;
    v7[1] = -1;
    v7[3] = -1;
    return _dispatch_workloop_push_VARIANT_mp(v5, v7, a3);
  }
  else
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
  }
  return result;
}

_DWORD *_dispatch_lane_drain_non_barriers(_DWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t StatusReg;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int *v32;
  int v33;

  v4 = (uint64_t)result;
  v5 = *((unsigned __int16 *)result + 40);
  v6 = (unint64_t *)(result + 14);
  do
    v7 = __ldxr(v6);
  while (__stlxr(v7 & 0xFFBFFFFFFFFFFFFFLL, v6));
  v8 = (unint64_t *)(result + 12);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    if (v5)
    {
      --v5;
      goto LABEL_6;
    }
    if (*(_QWORD *)a2 > 0xFFFuLL || (*(_QWORD *)a2 & 0x81) == 0)
      break;
    do
    {
      v5 = 0;
      v25 = __ldxr(v6);
    }
    while (__stxr(v25 + 0x20000000000, v6));
LABEL_6:
    v10 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(v4 + 104) = v10;
    if (!v10)
    {
      v11 = (unint64_t *)(a2 + 16);
      while (1)
      {
        v12 = __ldxr(v8);
        if (v12 != a2)
          break;
        if (!__stlxr(0, v8))
          goto LABEL_14;
      }
      __clrex();
      v10 = *v11;
      if (!*v11)
      {
        v28 = a2;
        v29 = _dispatch_wait_for_enqueuer(v11);
        a2 = v28;
        v10 = v29;
      }
      *(_QWORD *)(v4 + 104) = v10;
    }
LABEL_14:
    if (*(_QWORD *)a2 > 0xFFFuLL || (*(_QWORD *)a2 & 0x81) == 0)
      result = _dispatch_continuation_redirect_push((_DWORD *)v4, (_QWORD *)a2);
    else
      result = _dispatch_non_barrier_waiter_redirect_or_wake(v4, a2);
    a2 = v10;
    if (!v10)
      goto LABEL_26;
LABEL_21:
    v14 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 <= 0xFFFuLL)
    {
      if ((v14 & 2) != 0)
        goto LABEL_26;
    }
    else if ((*(_QWORD *)(v14 + 40) & 0xF0) == 0x10 && (*(_DWORD *)(a2 + 80) & 0x80000) != 0)
    {
      goto LABEL_26;
    }
  }
  while (1)
  {
    v24 = __ldaxr(v6);
    if ((v24 & 0xFFE0018000000000) != 0)
      break;
    if (!__stxr(v24 + 0x20000000000, v6))
    {
      v5 = 0;
      goto LABEL_6;
    }
  }
  v5 = 0;
  __clrex();
LABEL_26:
  v15 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
  v16 = v5 << 41;
  if (a2)
  {
    v17 = *(unsigned __int16 *)(v4 + 80);
    if (v17 >= 2)
    {
      v27 = *(_QWORD *)a2;
      if (*(_QWORD *)a2 < 0x1000uLL)
      {
        if ((v27 & 2) == 0)
          goto LABEL_28;
      }
      else if ((*(_QWORD *)(v27 + 40) & 0xF0) != 0x10 || (*(_DWORD *)(a2 + 80) & 0x80000) == 0)
      {
        goto LABEL_28;
      }
      v16 = (v16 | 0x10000000000) - (v17 << 41);
      goto LABEL_28;
    }
  }
  do
  {
LABEL_28:
    v18 = __ldxr(v6);
    v19 = v18 - v16;
    v20 = (v18 - v16) & 0xFFFFFF7700000001;
    if (a2)
    {
      v21 = v20 | 0x8000000000;
      if ((v19 & 0x10000000000) != 0)
        v22 = v20 + 0x18000000000;
      else
        v22 = v21 + ((unint64_t)*(unsigned __int16 *)(v4 + 80) << 41);
      v20 = (v18 - v16) & 0xFFFFFF7700000000 | 0x8000000001;
      if ((v18 & 0x8000000000) == 0)
        v20 = v21;
      if ((v22 & 0x3FFE0000000000) == 0x20000000000000)
        v20 = ((v22 & 0xFFFFFF7FFFFFFFFFLL) + 0x40000000000000) | v15;
    }
    else if ((v18 & 0x8000000000) != 0)
    {
      __clrex();
      do
        v26 = __ldaxr(v6);
      while (__stxr(v26 ^ 0x8000000000, v6));
      a2 = *(_QWORD *)(v4 + 104);
      if (a2)
        goto LABEL_21;
      goto LABEL_26;
    }
  }
  while (__stxr(v20, v6));
  if ((~v19 & 0x1800000000) == 0)
  {
    v30 = HIDWORD(v19) & 7;
    v31 = *(_DWORD *)(StatusReg + 200);
    if ((HIWORD(v31) & 0xF) < v30)
      *(_QWORD *)(StatusReg + 200) = v31 & 0xFFF0FFFF | ((_DWORD)v30 << 16);
  }
  if (((v20 ^ v19) & 0x40000000000000) != 0)
    return (_DWORD *)_dispatch_lane_barrier_complete(v4, 0, a3);
  if (((v20 ^ v19) & 1) != 0)
  {
    if ((a3 & 1) != 0)
      return (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(v4 + 24) + 88))(*(_QWORD *)(v4 + 24), v4, HIDWORD(v20) & 7);
    if (*(_DWORD *)(v4 + 8) == 0x7FFFFFFF)
      return (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(v4 + 24) + 88))(*(_QWORD *)(v4 + 24), v4, HIDWORD(v20) & 7);
    v32 = (unsigned int *)(v4 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 2, v32));
    if (v33 > 0)
    {
      return (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(v4 + 24) + 88))(*(_QWORD *)(v4 + 24), v4, HIDWORD(v20) & 7);
    }
    else
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
    }
  }
  else if ((a3 & 1) != 0)
  {
    return _os_object_release_internal_n_VARIANT_mp((void *)v4, (const char *)2);
  }
  return result;
}

uint64_t _dispatch_channel_invoke_cancel_check(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  int v7;
  unsigned int *v8;
  int v9;
  uint64_t result;

  if ((*(_WORD *)(a1 + 116) & 8) != 0 || (*(_DWORD *)(a1 + 80) & 0x10000000) == 0)
    return 1;
  if ((*(_BYTE *)(a2 + 35) & 1) != 0)
    v6 = (void *)MEMORY[0x18D766D94]();
  else
    v6 = 0;
  v7 = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 24))(a1, *(_QWORD *)(a1 + 32));
  if (v6)
    objc_autoreleasePoolPop(v6);
  if (v7)
  {
    *(_WORD *)(a1 + 116) |= 8u;
    if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
    {
      v8 = (unsigned int *)(a1 + 8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (v9 <= 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
    }
    return 1;
  }
  result = 0;
  *(_QWORD *)(a2 + 40) = -1;
  return result;
}

uint64_t _dispatch_worker_thread(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  int v4;
  const char *v5;
  uint64_t v6;
  unint64_t StatusReg;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  dispatch_time_t v17;
  unsigned int *v18;
  unsigned int v19;
  const char *v20;
  unsigned int *v21;
  int v22;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (unsigned int *)(a1 + 112);
  do
    v4 = __ldaxr(v3);
  while (__stxr(v4 - 1, v3));
  if (v4 <= 0)
    _dispatch_worker_thread_cold_1(v4);
  if (*(_QWORD *)(v2 + 144))
    *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 192) = v2 + 144;
  v5 = *(const char **)(a1 + 72);
  if (v5)
    pthread_setname_np(v5);
  v6 = *(_QWORD *)(v2 + 64);
  if (v6)
    (*(void (**)(void))(v6 + 16))();
  _dispatch_sigmask();
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v8 = *(_QWORD *)(StatusReg + 32);
  v9 = *(unsigned int *)(a1 + 84);
  if ((v9 & 0x46000FFF) == 0)
  {
    v10 = v9 & 0x80000000;
    if ((v8 & 0x22000000) != 0 || (v8 & 0x3F00) == 0)
    {
      v9 = v10 | 0xF0000;
    }
    else
    {
      v11 = (__clz(__rbit32((v8 >> 8) & 0x3FFF)) << 8) + 256;
      if (((v8 >> 8) & 0x3FFF) == 0)
        v11 = 0;
      v9 = v8 & 0x8E0000FF | v10 | v11;
    }
  }
  v12 = v8 & 0xFFFFFFFF02FFFFFFLL;
  if (v8 == -1)
    v13 = 0;
  else
    v13 = v8 & 0xFFFFFFFF02FFFFFFLL;
  v14 = v2 + 72;
  do
  {
    _dispatch_root_queue_drain(a1, v9, 0x20000);
    v15 = *(_QWORD *)(StatusReg + 32);
    if ((v15 & 0x1000000) != 0)
    {
      v16 = v12;
      if (v13)
        goto LABEL_31;
      v16 = v15 & 0xFFFFFFFFFEFFFFFFLL;
LABEL_28:
      if (v16)
        goto LABEL_31;
      goto LABEL_23;
    }
    v16 = v13;
    if (v13 != (v15 & 0xFFFFFFFF77FFFFFFLL))
      goto LABEL_28;
LABEL_23:
    if (!*(_QWORD *)(StatusReg + 224))
      goto LABEL_24;
    v16 = 0;
LABEL_31:
    _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v16, 0, 6);
LABEL_24:
    v17 = dispatch_time(0, 5000000000);
  }
  while (!dispatch_semaphore_wait_VARIANT_mp(v14, v17));
  v18 = (unsigned int *)(a1 + 100);
  do
    v19 = __ldxr(v18);
  while (__stlxr(v19 + 1, v18));
  _dispatch_root_queue_poke_VARIANT_mp(a1, 1, 0);
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    v21 = (unsigned int *)(a1 + 8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (v22 <= 1)
    {
      if (v22 != 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      _os_object_dispose((void *)a1, v20);
    }
  }
  return 0;
}

void _dispatch_root_queue_drain(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unint64_t StatusReg;
  unsigned int *v6;
  unsigned int *v7;
  int v8;
  BOOL v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  BOOL v31;
  signed int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  unint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  _OWORD v43[2];

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_QWORD *)(StatusReg + 160) = a1;
  *(_QWORD *)(StatusReg + 200) = a2;
  v6 = (unsigned int *)(*(_QWORD *)(StatusReg + 216) & 0xFFFFFFFFFFFFFFFELL);
  if (v6)
  {
    if (v6 == (unsigned int *)-4)
      _dispatch_main_queue_drain_cold_7();
    v7 = v6 + 24;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 - 1, v7));
    if (v8 <= 0)
    {
      if (v8 < 0)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      *((_QWORD *)v6 + 7) = 0xDEAD000000000000;
      _dispatch_object_dealloc_VARIANT_mp(v6);
    }
  }
  *(_QWORD *)(StatusReg + 216) = -4;
  memset(v43, 0, sizeof(v43));
  _dispatch_last_resort_autorelease_pool_push((uint64_t)v43);
  v9 = 0;
  v10 = (unint64_t *)(a1 + 104);
  v42 = (unint64_t *)(a1 + 48);
  while (1)
  {
    while (1)
    {
      do
LABEL_9:
        v11 = __ldxr(v10);
      while (__stxr(0xFFFFFFFFFFFFFFFFLL, v10));
      if (!v11)
      {
        do
        {
          v33 = __ldxr(v10);
          if (v33 != -1)
          {
            __clrex();
            goto LABEL_9;
          }
        }
        while (__stxr(0, v10));
        if (!*v42)
          goto LABEL_98;
        v34 = a1;
        v35 = _dispatch_root_queue_head_tail_quiesced;
        goto LABEL_58;
      }
      if (v11 != -1)
        break;
      v34 = a1;
      v35 = (uint64_t (*)(uint64_t))_dispatch_root_queue_mediator_is_gone;
LABEL_58:
      if (!__DISPATCH_ROOT_QUEUE_CONTENDED_WAIT__(v34, v35))
        goto LABEL_98;
    }
    v12 = (unint64_t *)(v11 + 16);
    v13 = *(_QWORD *)(v11 + 16);
    if (!v13)
    {
      *v10 = 0;
      while (1)
      {
        v36 = __ldxr(v42);
        if (v36 != v11)
          break;
        if (!__stlxr(0, v42))
          goto LABEL_14;
      }
      __clrex();
      v13 = *v12;
      if (!*v12)
        v13 = _dispatch_wait_for_enqueuer(v12);
    }
    *(_QWORD *)(a1 + 104) = v13;
    _dispatch_root_queue_poke_VARIANT_mp((unsigned int *)a1, 1, 0);
LABEL_14:
    if (v9)
      v12 = (unint64_t *)_pthread_workqueue_override_reset();
    v14 = *(_QWORD *)(StatusReg + 192);
    if (v14)
      v12 = (unint64_t *)(*(uint64_t (**)(uint64_t))v14)(a1);
    v15 = *(_QWORD *)v11;
    if (*(_QWORD *)v11 >= 0x1000uLL)
    {
      if (*(_QWORD *)(v15 + 40) == 1)
        (*(void (**)(unint64_t, _QWORD, _QWORD))(v15 + 48))(v11, 0, (a3 >> 21) & 1);
      else
        (*(void (**)(unint64_t, _OWORD *, _QWORD))(v15 + 64))(v11, v43, a3 & 0xFFFF0000);
      goto LABEL_86;
    }
    if ((a3 & 0x1000000) != 0)
    {
      v16 = (void *)MEMORY[0x18D766D94](v12);
      v15 = *(_QWORD *)v11;
    }
    else
    {
      v16 = 0;
    }
    v17 = *(_QWORD *)(v11 + 24);
    if ((v15 & 4) != 0)
      *(_QWORD *)(v11 + 24) = -1;
    v18 = *(_QWORD *)(v11 + 8);
    if (v18 == -1)
    {
      v21 = 0;
    }
    else
    {
      v19 = *(_QWORD *)(StatusReg + 200);
      v20 = ((v19 >> 8) & 0xF) != 0 ? 256 << ((BYTE1(v19) & 0xFu) - 1) : 0;
      v21 = v20 & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(StatusReg + 200);
      v22 = v18 & 0xFFFFFF;
      if ((v18 & 0xFFFFFF) != 0)
      {
        v23 = v20 & 0xFFFFFF00;
        if ((v19 & 0x44000000) == 0 && (*(_QWORD *)(v11 + 8) & 0x10000000) == 0)
          v25 = v21;
        else
          v25 = v18 & 0xFFFFFF;
        if (v22 >= v23)
          v21 = v25;
      }
      else if ((unsigned __int16)v19 >> 12)
      {
        v21 = (256 << (((unsigned __int16)v19 >> 12) - 1)) | 0xFF;
      }
    }
    v26 = v15 & 4;
    v27 = v21 & 0xFFFFFFFF02FFFFFFLL;
    v28 = *(_QWORD *)(StatusReg + 32);
    if ((v28 & 0x1000000) != 0)
    {
      if (v27)
        goto LABEL_75;
      v27 = v28 & 0xFFFFFFFFFEFFFFFFLL;
    }
    else if (v27 == (v28 & 0xFFFFFFFF77FFFFFFLL))
    {
      goto LABEL_44;
    }
    if (v27)
      goto LABEL_75;
LABEL_44:
    if (v17 == -1)
      goto LABEL_76;
    if (*(_QWORD *)(StatusReg + 224) != v17)
    {
      v27 = 0;
LABEL_75:
      _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v27, v17, v26 | 2);
      goto LABEL_76;
    }
    if ((v15 & 4) != 0 && v17)
    {
      v29 = (unsigned int *)(v17 + 12);
      do
      {
        v30 = __ldxr(v29);
        v31 = __OFSUB__(v30, 1);
        v32 = v30 - 1;
      }
      while (__stxr(v32, v29));
      if ((v32 < 0) ^ v31 | (v32 == 0))
        _dispatch_async_redirect_invoke_cold_1();
      goto LABEL_77;
    }
LABEL_76:
    if ((v15 & 4) == 0)
      goto LABEL_82;
LABEL_77:
    v37 = *(_QWORD *)(StatusReg + 176);
    if (v37)
      v38 = *(_DWORD *)(v37 + 8) + 1;
    else
      v38 = 1;
    if (v38 <= _dispatch_continuation_cache_limit)
    {
      v26 = 0;
      *(_QWORD *)(v11 + 16) = v37;
      *(_DWORD *)(v11 + 8) = v38;
      *(_QWORD *)(StatusReg + 176) = v11;
LABEL_82:
      if ((v15 & 8) != 0)
        goto LABEL_94;
      goto LABEL_83;
    }
    v26 = v11;
    if ((v15 & 8) != 0)
    {
LABEL_94:
      v40 = *(_QWORD *)(v11 + 48);
      v41 = *(_QWORD *)(*(_QWORD *)v40 + 40);
      if (v41 != 514)
        _dispatch_queue_override_invoke_cold_1(v41);
      _dispatch_client_callout(*(_QWORD *)(v11 + 40), *(uint64_t (**)(void))(v11 + 32));
      dispatch_group_leave_VARIANT_mp(v40);
      if (!v26)
      {
LABEL_84:
        if (!v16)
          goto LABEL_86;
LABEL_85:
        objc_autoreleasePoolPop(v16);
        goto LABEL_86;
      }
      goto LABEL_96;
    }
LABEL_83:
    _dispatch_client_callout(*(_QWORD *)(v11 + 40), *(uint64_t (**)(void))(v11 + 32));
    if (!v26)
      goto LABEL_84;
LABEL_96:
    _dispatch_continuation_free_to_cache_limit_VARIANT_mp(v26);
    if (v16)
      goto LABEL_85;
LABEL_86:
    if (v14)
      (*(void (**)(uint64_t))(v14 + 8))(a1);
    v39 = WORD1(*(_QWORD *)(StatusReg + 200)) & 0xF;
    if (v39)
    {
      *(_QWORD *)(StatusReg + 200) &= 0xFFF0FFFFuLL;
      v9 = v39 != 15;
    }
    else
    {
      v9 = 0;
    }
    if ((*(_BYTE *)(StatusReg + 960) & 1) != 0)
      break;
    *(_QWORD *)(StatusReg + 960) = 0;
  }
LABEL_98:
  _dispatch_last_resort_autorelease_pool_pop((uint64_t)v43);
  *(_QWORD *)(StatusReg + 216) = 0;
  *(_QWORD *)(StatusReg + 40) = 0;
  *(_QWORD *)(StatusReg + 200) = 0;
  *(_QWORD *)(StatusReg + 160) = 0;
}

BOOL __DISPATCH_ROOT_QUEUE_CONTENDED_WAIT__(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  char v4;
  unsigned int *v5;
  uint64_t v6;
  int v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v4 = 0;
  v5 = (unsigned int *)(a1 + 112);
  v6 = 500;
LABEL_2:
  v7 = -80;
  do
  {
    if (__CFADD__(v7++, 1))
    {
      if ((v4 & 1) == 0)
      {
        do
          v10 = __ldxr(v5);
        while (__stlxr(v10 + 1, v5));
      }
      MEMORY[0x18D767268](0, 3, v6);
      v9 = a2(a1);
      if (!v9)
      {
        v11 = (v6 >> 4) & 0x7FFFFFF;
        v6 = (2 * v6);
        v4 = 1;
        if (v11 < 0xC35)
          goto LABEL_2;
        v9 = 0;
      }
      goto LABEL_12;
    }
    __yield();
    v9 = a2(a1);
  }
  while (!v9);
  if ((v4 & 1) == 0)
    return v9 == 1;
  do
LABEL_12:
    v12 = __ldaxr(v5);
  while (__stxr(v12 - 1, v5));
  if (*(_QWORD *)(a1 + 48))
  {
    v9 = 1;
  }
  else if (!v9)
  {
    _dispatch_root_queue_poke_VARIANT_mp((unsigned int *)a1, 1, 0);
    v9 = 0;
  }
  return v9 == 1;
}

uint64_t _dispatch_root_queue_head_tail_quiesced(uint64_t a1)
{
  unsigned int v1;

  if (*(_QWORD *)(a1 + 48))
    v1 = 1;
  else
    v1 = 2;
  if ((*(_QWORD *)(a1 + 104) != 0) != (*(_QWORD *)(a1 + 48) == 0))
    return v1;
  else
    return 0;
}

BOOL _dispatch_root_queue_mediator_is_gone(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104) != -1;
}

void _dispatch_mgr_priority_raise(pthread_attr_t *a1)
{
  int v2;
  int v3;
  unsigned int v4;
  unint64_t v5;
  qos_class_t v6;
  signed int sched_priority;
  signed int v8;
  int v9;
  qos_class_t __qos_class;
  sched_param v11;

  if (_dispatch_mgr_sched_pred != -1)
    dispatch_once_f_VARIANT_mp((unint64_t *)&_dispatch_mgr_sched_pred, 0, _dispatch_mgr_sched_init);
  v11 = 0;
  v2 = pthread_attr_getschedparam(a1, &v11);
  if (v2)
    _dispatch_bug(6293, v2);
  __qos_class = QOS_CLASS_UNSPECIFIED;
  pthread_attr_get_qos_class_np(a1, &__qos_class, 0);
  if (__qos_class)
  {
    if (__qos_class == 5)
    {
      v3 = 4;
    }
    else
    {
      HIDWORD(v5) = __qos_class - 9;
      LODWORD(v5) = __qos_class - 9;
      v4 = v5 >> 2;
      if (v4 > 6)
        v3 = 0;
      else
        v3 = dword_18A06E6E0[v4];
    }
    v11.sched_priority = v3;
    while (1)
    {
      v6 = __ldxr((unsigned int *)&dword_1ECCEA51C);
      if (__qos_class <= v6)
        break;
      if (!__stxr(__qos_class, (unsigned int *)&dword_1ECCEA51C))
        goto LABEL_14;
    }
    __clrex();
  }
LABEL_14:
  sched_priority = v11.sched_priority;
  do
  {
    v8 = __ldxr((unsigned int *)&_dispatch_mgr_sched);
    if (sched_priority <= v8)
    {
      __clrex();
      return;
    }
  }
  while (__stxr(sched_priority, (unsigned int *)&_dispatch_mgr_sched));
  if (_dispatch_root_queues_pred != -1)
    dispatch_once_f_VARIANT_mp((unint64_t *)&_dispatch_root_queues_pred, 0, _dispatch_root_queues_init_once);
  if (sched_priority > dword_1ECCEA520 || __qos_class && _pthread_qos_class_encode())
  {
    v9 = _pthread_workqueue_set_event_manager_priority();
    if (v9)
      _dispatch_bug(6325, v9);
  }
}

uint64_t _dispatch_main_queue_update_priority_from_thread()
{
  unint64_t v0;
  uint64_t result;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;

  v0 = qword_1ECCE9B38[0];
  if (LODWORD(qword_1ECCE9B38[0]) >= 4)
    result = LODWORD(qword_1ECCE9B38[0]) | 3u;
  else
    result = 0;
  v2 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
  v3 = (__clz(__rbit32((v2 >> 8) & 0x3FFF)) << 8) + 256;
  if (((v2 >> 8) & 0x3FFF) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = (v4 >> 8) & 0xF;
  v6 = v4 & 0xFFFFFF00 | v2;
  v7 = HIDWORD(v0) & 7;
  v8 = (dword_1ECCE9B54 >> 8) & 0xF;
  dword_1ECCE9B54 = v6;
  if (v8 < v7 && v5 == 0)
    return _pthread_qos_override_end_direct();
  if (v8 < v7 && v7 <= v5)
    return _pthread_qos_override_end_direct();
  if (v8 >= v7 && v7 > v5)
    return _pthread_qos_override_start_direct();
  return result;
}

uint64_t _dispatch_root_queues_init_once()
{
  int v0;
  int v1;
  uint64_t result;
  int v3;
  uint64_t v4;
  void (*v5)(uint64_t *, int *);
  void (*v6)(uint64_t *, uint64_t *, int *);
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  if ((_dispatch_unsafe_fork & 1) == 0)
    _dispatch_fork_becomes_unsafe_slow_VARIANT_mp();
  v0 = _pthread_workqueue_supported();
  v1 = v0;
  if ((v0 & 0x10) == 0)
    _dispatch_root_queues_init_once_cold_1(v0);
  v4 = 0x200000000;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 64;
  v9 = 72;
  if ((v0 & 0x80) != 0)
  {
    v5 = _dispatch_kevent_worker_thread;
    v6 = _dispatch_workloop_worker_thread;
    v7 = _dispatch_worker_thread2;
  }
  else
  {
    if ((v0 & 0x40) == 0)
      _dispatch_root_queues_init_once_cold_2(v0);
    v7 = _dispatch_worker_thread2;
    v5 = _dispatch_kevent_worker_thread;
  }
  result = pthread_workqueue_setup();
  if ((_DWORD)result)
    _dispatch_root_queues_init_once_cold_4(result, v1);
  if ((_dispatch_mode & 4) != 0)
  {
    v3 = -1;
    result = sysctlbyname("kern.wq_limit_cooperative_threads", 0, 0, &v3, 4uLL);
    if ((_DWORD)result)
      _dispatch_root_queues_init_once_cold_3();
  }
  return result;
}

void _dispatch_worker_thread2(uint64_t a1)
{
  _QWORD *StatusReg;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  __objc2_class **v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  StatusReg[120] = 0;
  StatusReg[4] = a1 & 0xFFFFFFFF88FFFFFFLL;
  v2 = __clz(__rbit32((a1 >> 8) & 0x3FFF));
  if (((a1 >> 8) & 0x3FFF) != 0)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (v3 - 7 <= 0xFFFFFFF9)
    _dispatch_queue_priority_inherit_from_target_cold_1(v3);
  if ((a1 & 0x8000000) != 0)
    v4 = 2293760;
  else
    v4 = 196608;
  v5 = ((a1 & 0x8000000) >> 26) | 0xFFFFFFFD;
  v6 = 3 * v3;
  if ((a1 & 0x88000000) == 0x80000000)
    v5 = -2;
  v7 = v5 + v6;
  v8 = &_dispatch_root_queues + 16 * v7;
  v9 = (unsigned int *)(v8 + 14);
  do
    v10 = __ldaxr(v9);
  while (__stxr(v10 - 1, v9));
  _dispatch_root_queue_drain((uint64_t)v8, *((_DWORD *)&_dispatch_root_queues + 32 * v7 + 21), v4);
  v11 = StatusReg[4];
  if ((v11 & 0x1000000) != 0)
  {
    v12 = v11 & 0xFFFFFFFFFEFFFFFFLL;
    if ((v11 & 0xFFFFFFFFFEFFFFFFLL) != 0)
      goto LABEL_19;
  }
  if (StatusReg[28])
  {
    v12 = 0;
LABEL_19:
    _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v12, 0, 14);
  }
  StatusReg[120] = 0;
}

void _dispatch_kevent_worker_thread(uint64_t *a1, int *a2)
{
  _QWORD *StatusReg;
  unsigned int *v5;
  unsigned int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  if (!a1 || !a2)
  {
    _dispatch_bug(6755, 0);
    return;
  }
  if (*a2 && *a1)
  {
    StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v5 = (unsigned int *)(StatusReg[27] & 0xFFFFFFFFFFFFFFFELL);
    if (v5)
    {
      if (v5 != (unsigned int *)-4)
      {
        v6 = v5 + 24;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 - 1, v6));
        if (v7 > 0)
          goto LABEL_12;
        if ((v7 & 0x80000000) == 0)
        {
          *((_QWORD *)v5 + 7) = 0xDEAD000000000000;
          _dispatch_object_dealloc_VARIANT_mp(v5);
          goto LABEL_12;
        }
LABEL_31:
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Lingering DISPATCH_WLH_ANON";
      __break(1u);
      return;
    }
LABEL_12:
    StatusReg[27] = -4;
    v8 = *a1;
    StatusReg[120] = 0;
    v14 = 0;
    v13 = 0u;
    v15 = -4;
    v16 = (unint64_t)v8;
    v9 = StatusReg[4];
    if ((v9 & 0x2000000) != 0)
    {
      if ((v9 & 0x20000000) != 0)
        v9 = StatusReg[4] & 0xFE000000;
      StatusReg[4] = v9 & 0xFFFFFFFFFEFFFFFFLL;
      StatusReg[25] = 34537472;
      StatusReg[20] = &_dispatch_mgr_q;
      v10 = StatusReg[3] & 0xFFFFFFFCLL | 0x40020000000000;
      do
      {
        v11 = __ldaxr(qword_1ECCE9BB8);
        if ((v11 & 0xFFE00000FFFFFFFCLL) != 0)
        {
          qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Locking the manager should not fail";
          qword_1EDF52D38 = v11;
          __break(1u);
          goto LABEL_31;
        }
      }
      while (__stxr(v10 | v11 & 0x7700000001, qword_1ECCE9BB8));
      v15 = -4;
      StatusReg[29] = &v13;
      _dispatch_event_loop_merge_VARIANT_mp(v8, *a2);
      _dispatch_mgr_queue_drain();
      if (byte_1ECCEA55E)
        _dispatch_event_loop_drain_timers_VARIANT_mp(&_dispatch_timers_heap, 9);
      do
        v12 = __ldxr(qword_1ECCE9BB8);
      while (__stlxr((v12 & 0xFFFFFFF000000001) - 0x40020000000000, qword_1ECCE9BB8));
      StatusReg[25] = 0;
      StatusReg[20] = 0;
      if ((v12 & 0x8000000000) != 0)
        _dispatch_event_loop_poke_VARIANT_mp((_QWORD *)0xFFFFFFFFFFFFFFF8, 0, 0);
    }
    else
    {
      StatusReg[4] = v9 & 0xFFFFFFFF88FFFFFFLL | 0x1000000;
      BYTE12(v16) = 1;
      StatusReg[29] = &v13;
      _dispatch_event_loop_merge_VARIANT_mp(v8, *a2);
      if (*((_QWORD *)&v13 + 1))
      {
        if (v15 == -4)
        {
          StatusReg[29] = 0;
          _dispatch_root_queue_drain_deferred_item((uint64_t *)&v13);
        }
        else
        {
          _dispatch_root_queue_drain_deferred_wlh((uint64_t)&v13);
        }
      }
    }
    StatusReg[29] = 0;
    StatusReg[120] = 0;
    *a2 = WORD4(v16);
    StatusReg[27] = 0;
    StatusReg[5] = 0;
  }
}

void _dispatch_workloop_worker_thread(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v5;
  _QWORD *StatusReg;
  unint64_t v7;
  unsigned int *v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  int *v13;
  int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;

  if (!a1 || !a2 || !a3)
  {
    _dispatch_bug(6774, 0);
    return;
  }
  v5 = *a1;
  if (!*a1)
  {
    _dispatch_bug(6777, 0);
    _dispatch_kevent_worker_thread(a2, a3);
    return;
  }
  if (*a3 && *a2)
  {
    StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v7 = StatusReg[27] & 0xFFFFFFFFFFFFFFFELL;
    if (v7 == -4)
    {
LABEL_71:
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Lingering DISPATCH_WLH_ANON";
      __break(1u);
      goto LABEL_72;
    }
    if (v7 == v5)
    {
LABEL_19:
      StatusReg[27] = v5;
      v12 = *a2;
      StatusReg[120] = 0;
      v29 = 0;
      v28 = 0u;
      v30 = v5;
      v31 = (unint64_t)v12;
      if (v5 == -4)
      {
        v15 = 0;
        v16 = 0;
        v27 = 0;
        v25 = 0uLL;
        v26 = 0uLL;
        goto LABEL_39;
      }
      if (*(_QWORD *)(*(_QWORD *)v5 + 40) == 131090 && (v13 = *(int **)(v5 + 200)) != 0)
      {
        v14 = *v13;
        v27 = 0;
        v25 = 0uLL;
        v26 = 0uLL;
        if ((v14 & 0x40) != 0)
        {
          v7 = *(_QWORD *)(v5 + 72);
          if (!v7
            || StatusReg[124]
            || (LODWORD(v7) = pthread_setname_np((const char *)v7),
                v15 = 1,
                StatusReg[124] = 1,
                (v13 = *(int **)(v5 + 200)) != 0))
          {
            if (*((_QWORD *)v13 + 4) && !StatusReg[115])
            {
              v24 = _dispatch_calloc(1uLL, 0x28uLL);
              LODWORD(v7) = _os_workgroup_join_update_wg_VARIANT_mp(*(_QWORD *)(*(_QWORD *)(v5 + 200) + 32), (uint64_t)v24);
              v16 = 0;
              StatusReg[115] = v24;
              v15 = 1;
            }
            else
            {
              v16 = 0;
              v15 = 1;
            }
            goto LABEL_39;
          }
          goto LABEL_36;
        }
      }
      else
      {
        v27 = 0;
        v25 = 0uLL;
        v26 = 0uLL;
      }
      if (*(_QWORD *)(*(_QWORD *)v5 + 40) != 131090)
        goto LABEL_35;
      v17 = *(_QWORD *)(v5 + 200);
      if (!v17)
        goto LABEL_35;
      v16 = *(_QWORD *)(v17 + 32);
      if (!v16 || (LODWORD(v7) = os_workgroup_join_VARIANT_mp(*(_QWORD *)(v17 + 32), (uint64_t)&v25), !(_DWORD)v7))
      {
        v15 = 0;
        goto LABEL_39;
      }
      if ((_DWORD)v7 == 22)
      {
LABEL_35:
        v15 = 0;
LABEL_36:
        v16 = 0;
LABEL_39:
        v18 = StatusReg[4];
        if ((v18 & 0x2000000) != 0)
        {
          if ((v18 & 0x20000000) != 0)
            v18 = StatusReg[4] & 0xFE000000;
          StatusReg[4] = v18 & 0xFFFFFFFFFEFFFFFFLL;
          StatusReg[25] = 34537472;
          StatusReg[20] = &_dispatch_mgr_q;
          v20 = StatusReg[3] & 0xFFFFFFFCLL | 0x40020000000000;
          do
          {
            v21 = __ldaxr(qword_1ECCE9BB8);
            if ((v21 & 0xFFE00000FFFFFFFCLL) != 0)
            {
              qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Locking the manager should not fail";
              qword_1EDF52D38 = v21;
              __break(1u);
              goto LABEL_69;
            }
          }
          while (__stxr(v20 | v21 & 0x7700000001, qword_1ECCE9BB8));
          v30 = -4;
          StatusReg[29] = &v28;
          _dispatch_event_loop_merge_VARIANT_mp(v12, *a3);
          _dispatch_mgr_queue_drain();
          if (byte_1ECCEA55E)
            _dispatch_event_loop_drain_timers_VARIANT_mp(&_dispatch_timers_heap, 9);
          do
            v22 = __ldxr(qword_1ECCE9BB8);
          while (__stlxr((v22 & 0xFFFFFFF000000001) - 0x40020000000000, qword_1ECCE9BB8));
          StatusReg[25] = 0;
          StatusReg[20] = 0;
          if ((v22 & 0x8000000000) != 0)
            _dispatch_event_loop_poke_VARIANT_mp((_QWORD *)0xFFFFFFFFFFFFFFF8, 0, 0);
        }
        else
        {
          v19 = v18 & 0xFFFFFFFF88FFFFFFLL;
          if (v5 == -4)
            v19 |= 0x1000000uLL;
          StatusReg[4] = v19;
          if (v5 == -4)
            BYTE12(v31) = 1;
          StatusReg[29] = &v28;
          _dispatch_event_loop_merge_VARIANT_mp(v12, *a3);
          if (*((_QWORD *)&v28 + 1))
          {
            if (v30 == -4)
            {
              StatusReg[29] = 0;
              _dispatch_root_queue_drain_deferred_item((uint64_t *)&v28);
            }
            else
            {
              _dispatch_root_queue_drain_deferred_wlh((uint64_t)&v28);
            }
          }
        }
        if (v16)
          v23 = v15;
        else
          v23 = 1;
        if ((v23 & 1) == 0)
          os_workgroup_leave_VARIANT_mp(v16, (uint64_t)&v25);
        StatusReg[29] = 0;
        StatusReg[5] = 0;
        StatusReg[120] = 0;
        *a3 = WORD4(v31);
        StatusReg[27] = v5 | 1;
        return;
      }
LABEL_72:
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_workloop os_workgroup_join failed";
      qword_1EDF52D38 = (int)v7;
      __break(1u);
      return;
    }
    if (v7)
    {
      v8 = (unsigned int *)(v7 + 96);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 - 1, v8));
      if (v9 <= 0)
      {
        if (v9 < 0)
        {
LABEL_69:
          qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
          __break(1u);
LABEL_70:
          qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
          __break(1u);
          goto LABEL_71;
        }
        *(_QWORD *)(v7 + 56) = 0xDEAD000000000000;
        _dispatch_object_dealloc_VARIANT_mp((void *)v7);
      }
    }
    if (v5 == -4)
      goto LABEL_19;
    v10 = (unsigned int *)(v5 + 96);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    if ((v11 & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_70;
  }
}

void _dispatch_mgr_queue_drain()
{
  unint64_t StatusReg;
  const char *v1;
  uint64_t v2;
  unsigned int *v3;
  int v4;
  uint64_t v5;
  _OWORD v6[2];

  memset(v6, 0, sizeof(v6));
  v5 = 0x40020000000000;
  if (qword_1ECCE9BB0)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    if ((~*(_DWORD *)(StatusReg + 200) & 0xF0000) != 0)
      *(_QWORD *)(StatusReg + 200) = *(_QWORD *)(StatusReg + 200) & 0xFFF0FFFFLL | 0xF0000;
    if (_dispatch_lane_serial_drain_VARIANT_mp((uint64_t)&_dispatch_mgr_q, (uint64_t)v6, 0x40000u, &v5))
      _dispatch_mgr_queue_drain_cold_2();
    v2 = *(_QWORD *)(StatusReg + 224);
    if (v2)
    {
      *(_QWORD *)(StatusReg + 224) = 0;
      if (*(_DWORD *)(v2 + 32))
        _dispatch_set_priority_and_mach_voucher_slow_VARIANT_mp(0, 0);
      v3 = (unsigned int *)(v2 + 12);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 - 1, v3));
      if (v4 <= 1)
      {
        if (v4 != 1)
          _dispatch_async_redirect_invoke_cold_1();
        _voucher_xref_dispose_VARIANT_mp(v2, v1);
      }
    }
    if ((*(_QWORD *)(StatusReg + 200) & 0xF0000) != 0)
      *(_QWORD *)(StatusReg + 200) &= 0xFFF0FFFFuLL;
  }
}

void _dispatch_root_queue_drain_deferred_item(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *StatusReg;
  uint64_t v4;
  void (**v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  BOOL v18;
  signed int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v26[2];

  v2 = *a1;
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  StatusReg[20] = v2;
  memset(v26, 0, sizeof(v26));
  _dispatch_last_resort_autorelease_pool_push((uint64_t)v26);
  StatusReg[25] = *(unsigned int *)(v2 + 84);
  v4 = a1[1];
  v5 = (void (**)(uint64_t))StatusReg[24];
  if (v5)
    (*v5)(v2);
  v6 = *(_QWORD *)v4;
  if (*(_QWORD *)v4 < 0x1000uLL)
  {
    v7 = *(_QWORD *)(v4 + 24);
    if ((v6 & 4) != 0)
      *(_QWORD *)(v4 + 24) = -1;
    v8 = v6 & 4;
    v9 = *(_QWORD *)(v4 + 8);
    if (v9 == -1)
    {
      v12 = 0;
    }
    else
    {
      v10 = StatusReg[25];
      if (((v10 >> 8) & 0xF) != 0)
        v11 = 256 << ((BYTE1(v10) & 0xFu) - 1);
      else
        v11 = 0;
      v12 = v11 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
      if ((v9 & 0xFFFFFF) != 0)
      {
        if ((v9 & 0xFFFFFFuLL) >= (v11 & 0xFFFFFF00)
          && ((v10 & 0x44000000) != 0 || (*(_QWORD *)(v4 + 8) & 0x10000000) != 0))
        {
          v12 = v9 & 0xFFFFFF;
        }
      }
      else if ((unsigned __int16)v10 >> 12)
      {
        v12 = (256 << (((unsigned __int16)v10 >> 12) - 1)) | 0xFF;
      }
    }
    v14 = v12 & 0xFFFFFFFF02FFFFFFLL;
    v15 = StatusReg[4];
    if ((v15 & 0x1000000) != 0)
    {
      if (v14)
        goto LABEL_43;
      v14 = v15 & 0xFFFFFFFFFEFFFFFFLL;
    }
    else if (v14 == (v15 & 0xFFFFFFFF77FFFFFFLL))
    {
LABEL_26:
      if (v7 == -1)
        goto LABEL_44;
      if (StatusReg[28] == v7)
      {
        if ((v6 & 4) != 0 && v7)
        {
          v16 = (unsigned int *)(v7 + 12);
          do
          {
            v17 = __ldxr(v16);
            v18 = __OFSUB__(v17, 1);
            v19 = v17 - 1;
          }
          while (__stxr(v19, v16));
          if ((v19 < 0) ^ v18 | (v19 == 0))
            _dispatch_async_redirect_invoke_cold_1();
LABEL_45:
          v20 = StatusReg[22];
          if (v20)
            v21 = *(_DWORD *)(v20 + 8) + 1;
          else
            v21 = 1;
          v8 = v4;
          if (v21 <= _dispatch_continuation_cache_limit)
          {
            v8 = 0;
            *(_QWORD *)(v4 + 16) = v20;
            *(_DWORD *)(v4 + 8) = v21;
            StatusReg[22] = v4;
          }
LABEL_50:
          if ((v6 & 8) != 0)
          {
            v24 = *(_QWORD *)(v4 + 48);
            v25 = *(_QWORD *)(*(_QWORD *)v24 + 40);
            if (v25 != 514)
              _dispatch_queue_override_invoke_cold_1(v25);
            _dispatch_client_callout(*(_QWORD *)(v4 + 40), *(uint64_t (**)(void))(v4 + 32));
            dispatch_group_leave_VARIANT_mp(v24);
            if (!v8)
            {
LABEL_52:
              if (!v5)
                goto LABEL_54;
LABEL_53:
              v5[1](v2);
              goto LABEL_54;
            }
          }
          else
          {
            _dispatch_client_callout(*(_QWORD *)(v4 + 40), *(uint64_t (**)(void))(v4 + 32));
            if (!v8)
              goto LABEL_52;
          }
          _dispatch_continuation_free_to_cache_limit_VARIANT_mp(v8);
          if (!v5)
            goto LABEL_54;
          goto LABEL_53;
        }
LABEL_44:
        if ((v6 & 4) == 0)
          goto LABEL_50;
        goto LABEL_45;
      }
      v14 = 0;
LABEL_43:
      _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v14, v7, v8 | 2);
      goto LABEL_44;
    }
    if (v14)
      goto LABEL_43;
    goto LABEL_26;
  }
  if (*(_QWORD *)(v6 + 40) == 1)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v6 + 48))(v4, 0, 0);
  else
    (*(void (**)(uint64_t, _OWORD *, uint64_t))(v6 + 64))(v4, v26, 196608);
  if (v5)
    goto LABEL_53;
LABEL_54:
  _dispatch_last_resort_autorelease_pool_pop((uint64_t)v26);
  StatusReg[25] = 0;
  StatusReg[20] = 0;
  v22 = StatusReg[4];
  if ((v22 & 0x1000000) != 0)
  {
    v23 = v22 & 0xFFFFFFFFFEFFFFFFLL;
    if ((v22 & 0xFFFFFFFFFEFFFFFFLL) != 0)
      goto LABEL_60;
  }
  if (StatusReg[28])
  {
    v23 = 0;
LABEL_60:
    _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v23, 0, 14);
  }
}

uint64_t _dispatch_root_queue_drain_deferred_wlh(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *StatusReg;
  unint64_t *v5;
  unsigned int *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  signed int v15;
  unsigned int v16;
  BOOL v17;
  signed int v18;
  uint64_t v19;
  _OWORD v20[2];

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  StatusReg[20] = v2;
  StatusReg[25] = *(unsigned int *)(v2 + 84) | 0xF0000;
  LOBYTE(v2) = *(_BYTE *)(a1 + 45) | 4;
  v5 = (unint64_t *)(v3 + 56);
  v6 = (unsigned int *)(v3 + 8);
  memset(v20, 0, sizeof(v20));
  *(_BYTE *)(a1 + 45) = v2;
  while (2)
  {
    v7 = StatusReg[3] & 0xFFFFFFFCLL;
    while (1)
    {
      v8 = __ldaxr(v5);
      if (v8 >> 55)
      {
        v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
        goto LABEL_6;
      }
      if ((v8 & 0xFFFFFFFC) != 0)
        break;
      v9 = v7 | v8 & 0x7700000001 | 0x60000000000000;
LABEL_6:
      if (!__stxr(v9, v5))
        goto LABEL_12;
    }
    if ((v8 & 2) != 0)
    {
      v9 = v8 | 0x800000000;
      goto LABEL_6;
    }
    __clrex();
    v9 = v8;
LABEL_12:
    if ((v8 & 0x6000000001) != 0x2000000001)
      _dispatch_root_queue_drain_deferred_wlh_cold_4(v8);
    if ((v8 & 0xFF800000FFFFFFFCLL) != 0)
    {
      v12 = *v6;
      if (v9 >> 55)
      {
        if (v12 != 0x7FFFFFFF)
        {
          do
          {
            v13 = __ldxr(v6);
            v14 = __OFSUB__(v13, 2);
            v15 = v13 - 2;
          }
          while (__stlxr(v15, v6));
          if ((v15 < 0) ^ v14 | (v15 == 0))
            _os_object_allows_weak_reference_VARIANT_mp_cold_1();
        }
      }
      else if (v12 != 0x7FFFFFFF)
      {
        do
        {
          v16 = __ldxr(v6);
          v17 = __OFSUB__(v16, 1);
          v18 = v16 - 1;
        }
        while (__stlxr(v18, v6));
        if ((v18 < 0) ^ v17 | (v18 == 0))
          _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      }
      goto LABEL_30;
    }
    result = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v3 + 64))(v3, v20, 196610);
    if ((*(_BYTE *)(a1 + 45) & 1) != 0)
    {
      v9 = *v5;
      if ((*v5 & 0x2000000000) != 0)
      {
        if ((v9 & 1) != 0)
        {
          if (*v6 != 0x7FFFFFFF)
          {
            do
              v11 = __ldxr(v6);
            while (__stxr(v11 + 1, v6));
            if (v11 <= 0)
              dispatch_set_target_queue_VARIANT_mp_cold_2();
          }
          continue;
        }
LABEL_30:
        result = _dispatch_event_loop_leave_deferred_VARIANT_mp(a1, v9);
      }
    }
    break;
  }
  StatusReg[25] = 0;
  StatusReg[20] = 0;
  v19 = StatusReg[4];
  if ((v19 & 0x1000000) != 0)
  {
    result = v19 & 0xFFFFFFFFFEFFFFFFLL;
    if ((v19 & 0xFFFFFFFFFEFFFFFFLL) != 0)
      return _dispatch_set_priority_and_voucher_slow_VARIANT_mp(result, 0, 14);
  }
  if (StatusReg[28])
  {
    result = 0;
    return _dispatch_set_priority_and_voucher_slow_VARIANT_mp(result, 0, 14);
  }
  return result;
}

void _dispatch_queue_cleanup2()
{
  unint64_t v0;
  unsigned int v1;
  int v2;
  pthread_t v3;
  pthread_attr_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C874D8];
  do
    v0 = __ldaxr(qword_1ECCE9B38);
  while (__stxr((v0 & 0xFFFFFF7FFFFFFFFFLL) + 0x40020000000000, qword_1ECCE9B38));
  do
    v1 = __ldxr((unsigned int *)&dword_1ECCE9B50);
  while (__stxr(v1 & 0xFFFBFFFF, (unsigned int *)&dword_1ECCE9B50));
  _dispatch_lane_barrier_complete((uint64_t)&_dispatch_main_q, 0, 0);
  if (_dispatch_program_is_probably_callback_driven)
  {
    memset(&v4, 0, sizeof(v4));
    pthread_attr_init(&v4);
    pthread_attr_setdetachstate(&v4, 2);
    v3 = 0;
    v2 = pthread_create(&v3, &v4, (void *(__cdecl *)(void *))_dispatch_sig_thread, 0);
    if (v2)
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unable to create signal thread";
      qword_1EDF52D38 = v2;
      __break(1u);
    }
    pthread_attr_destroy(&v4);
    sleep_NOCANCEL();
  }
  if (_dispatch_main_q_handle_pred != -1)
    dispatch_once_f_VARIANT_mp((unint64_t *)&_dispatch_main_q_handle_pred, (uint64_t)&_dispatch_main_q, (uint64_t (*)(void))_dispatch_runloop_queue_handle_init);
  _dispatch_runloop_queue_handle_dispose((mach_port_context_t)&_dispatch_main_q);
}

void _dispatch_sig_thread()
{
  _opaque_pthread_t *v0;
  _BYTE *stackaddr_np;
  uint64_t vars0;

  v0 = pthread_self();
  stackaddr_np = pthread_get_stackaddr_np(v0);
  bzero(&vars0, stackaddr_np - (_BYTE *)&vars0);
  _dispatch_sigsuspend();
}

void _dispatch_sigsuspend()
{
  pthread_sigmask(3, &_dispatch_sigsuspend_mask, 0);
  while (1)
    sigsuspend_NOCANCEL();
}

uint64_t OUTLINED_FUNCTION_1_0(char *a1, uint64_t a2, const char *a3)
{
  size_t v3;

  return snprintf(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_2()
{
  uint64_t v0;
  uint64_t v1;

  return v0 + v1;
}

uint64_t OUTLINED_FUNCTION_3_0(char *a1, uint64_t a2, const char *a3)
{
  size_t v3;

  return snprintf(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_4_0(uint64_t a1, uint64_t a2, const char *a3)
{
  size_t v3;
  char *v4;

  return snprintf(v4, v3, a3);
}

void _dispatch_apply_invoke_VARIANT_mp(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  unint64_t *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  _OWORD *v9;
  unint64_t StatusReg;
  uint64_t v11;
  int v12;
  _QWORD v13[3];

  v2 = (unsigned int *)(a1 + 52);
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 + 1, v2));
  v13[1] = 0;
  v13[0] = a1;
  v13[2] = v3;
  _dispatch_apply_set_attr_behavior(*(_QWORD *)(a1 + 56));
  v4 = (unint64_t *)(*(_QWORD *)(a1 + 32) + 8 * v3);
  if (*v4 != -1)
    dispatch_once_f_VARIANT_mp(v4, (uint64_t)v13, (uint64_t (*)(void))_dispatch_apply_invoke3);
  _dispatch_apply_clear_attr_behavior(*(_QWORD *)(a1 + 56));
  v5 = (unsigned int *)(a1 + 44);
  do
  {
    v6 = __ldxr(v5);
    v7 = v6 - 1;
  }
  while (__stxr(v7, v5));
  if (!v7)
  {
    v8 = *(void **)(a1 + 32);
    if (v8)
      free(v8);
    v9 = *(_OWORD **)(a1 + 56);
    if (v9)
    {
      v9[2] = 0u;
      v9[3] = 0u;
      *v9 = 0u;
      v9[1] = 0u;
      free(*(void **)(a1 + 56));
    }
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v11 = *(_QWORD *)(StatusReg + 176);
    if (v11)
      v12 = *(_DWORD *)(v11 + 8) + 1;
    else
      v12 = 1;
    if (v12 > _dispatch_continuation_cache_limit)
    {
      _dispatch_continuation_free_to_cache_limit_VARIANT_mp(a1);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v11;
      *(_DWORD *)(a1 + 8) = v12;
      *(_QWORD *)(StatusReg + 176) = a1;
    }
  }
}

void _dispatch_apply_redirect_invoke_VARIANT_mp(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  unint64_t *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  _OWORD *v9;
  unint64_t StatusReg;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;

  v2 = (unsigned int *)(a1 + 52);
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 + 1, v2));
  v13 = a1;
  v14 = xmmword_18A06E700;
  DWORD2(v14) = v3;
  _dispatch_apply_set_attr_behavior(*(_QWORD *)(a1 + 56));
  v4 = (unint64_t *)(*(_QWORD *)(a1 + 32) + 8 * v3);
  if (*v4 != -1)
    dispatch_once_f_VARIANT_mp(v4, (uint64_t)&v13, (uint64_t (*)(void))_dispatch_apply_invoke3);
  _dispatch_apply_clear_attr_behavior(*(_QWORD *)(a1 + 56));
  v5 = (unsigned int *)(a1 + 44);
  do
  {
    v6 = __ldxr(v5);
    v7 = v6 - 1;
  }
  while (__stxr(v7, v5));
  if (!v7)
  {
    v8 = *(void **)(a1 + 32);
    if (v8)
      free(v8);
    v9 = *(_OWORD **)(a1 + 56);
    if (v9)
    {
      v9[2] = 0u;
      v9[3] = 0u;
      *v9 = 0u;
      v9[1] = 0u;
      free(*(void **)(a1 + 56));
    }
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v11 = *(_QWORD *)(StatusReg + 176);
    if (v11)
      v12 = *(_DWORD *)(v11 + 8) + 1;
    else
      v12 = 1;
    if (v12 > _dispatch_continuation_cache_limit)
    {
      _dispatch_continuation_free_to_cache_limit_VARIANT_mp(a1);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v11;
      *(_DWORD *)(a1 + 8) = v12;
      *(_QWORD *)(StatusReg + 176) = a1;
    }
  }
}

void dispatch_apply_f_VARIANT_mp(unint64_t a1, __objc2_class **a2, uint64_t a3, uint64_t a4)
{
  _dispatch_apply_with_attr_f(a1, 0, a2, a3, a4, 1);
}

void _dispatch_apply_with_attr_f(unint64_t a1, uint64_t a2, __objc2_class **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __objc2_class **v6;
  unint64_t StatusReg;
  unint64_t v10;
  unint64_t v11;
  __objc2_class **v12;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  unint64_t v31;
  __objc2_class **v32;
  _OWORD *v33;
  int v34;
  signed int v35;
  int v36;
  __objc2_class *v37;
  unint64_t v38;
  uint64_t v39;
  __objc2_class *v40;
  unsigned int *v41;
  unsigned int *v42;
  int v43;
  unint64_t *v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t (*v47)(void);
  uint64_t v48;
  __objc2_class **v50;
  __objc2_class **v52;
  __int128 v53;
  _QWORD v54[8];

  if (!a1)
    return;
  v6 = a3;
  if (a2 && (*(_DWORD *)a2 != -1592086528 || ~*(_QWORD *)(a2 + 16) != a2))
    _dispatch_apply_with_attr_f_cold_4(a2);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v10 = StatusReg + 184;
  while (1)
  {
    v10 = *(_QWORD *)v10;
    if (!v10)
      break;
    if (*(char **)(v10 + 8) == "apply")
    {
      v11 = *(_QWORD *)(v10 + 16);
      goto LABEL_10;
    }
  }
  v11 = 0;
LABEL_10:
  if (!a3)
  {
    if (!*(_QWORD *)(StatusReg + 160))
      goto LABEL_24;
    v12 = *(__objc2_class ***)(StatusReg + 160);
    do
    {
      v6 = v12;
      v12 = (__objc2_class **)v12[3];
      if (!v12)
        break;
    }
    while (v12 != &_dispatch_custom_workloop_root_queue && v12 != &_dispatch_custom_workloop_overcommit_root_queue);
    if (v6 >= &_dispatch_root_queues && v6 < (__objc2_class **)&_dispatch_queue_serial_numbers)
    {
LABEL_24:
      v15 = __clz(__rbit32((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF));
      if (((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF) != 0)
        v16 = v15 + 1;
      else
        v16 = 4;
      if (v16 - 7 <= 0xFFFFFFF9)
        _dispatch_queue_priority_inherit_from_target_cold_1(v16);
      v6 = &_dispatch_root_queues + 16 * (unint64_t)(3 * v16 - 3);
    }
  }
  v50 = *(__objc2_class ***)(StatusReg + 160);
  v17 = *((_DWORD *)v6 + 21);
  v18 = (unsigned __int16)v17 >> 12;
  v19 = (v17 >> 8) & 0xF;
  if (v19)
    v20 = v19;
  else
    v20 = v18;
  if (v6[3])
  {
    v46 = __clz(__rbit32((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF));
    if (((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF) != 0)
      v20 = v46 + 1;
    else
      v20 = 0;
  }
  if (a2)
  {
    if (*(_DWORD *)a2 != -1592086528 || ~*(_QWORD *)(a2 + 16) != a2)
      _dispatch_apply_with_attr_f_cold_4(a2);
    v21 = a5;
    v22 = a4;
    if (v11)
    {
      v28 = 0xFFFFLL;
      v26 = 1;
    }
    else
    {
      switch(v20)
      {
        case 0:
          goto LABEL_38;
        default:
          v23 = pthread_qos_max_parallelism();
          if (v23 <= 0)
LABEL_38:
            v23 = MEMORY[0xFFFFFC036];
          if (v23 >= MEMORY[0xFFFFFC034])
            v25 = MEMORY[0xFFFFFC034];
          else
            v25 = v23;
          if (*(_QWORD *)(a2 + 8))
          {
            v27 = pthread_qos_max_parallelism();
            if (v27 < 1)
              v26 = 0;
            else
              v26 = (v27 * *(_DWORD *)(a2 + 8));
          }
          else
          {
            v26 = -1;
          }
          if (v26 >= v25)
            v26 = v25;
          if (!v26)
            goto LABEL_121;
          v28 = 0xFFFFLL;
          break;
      }
    }
  }
  else
  {
    v21 = a5;
    v22 = a4;
    switch(v20)
    {
      case 0:
        goto LABEL_40;
      default:
        v24 = pthread_qos_max_parallelism();
        if (v24 <= 0)
LABEL_40:
          v24 = MEMORY[0xFFFFFC036];
        if (v24 >= MEMORY[0xFFFFFC034])
          v26 = MEMORY[0xFFFFFC034];
        else
          v26 = v24;
        if (v11)
        {
          if (v11 >= v26)
            v26 = 1;
          else
            v26 /= v11;
          if (v11 >= 0xFFFF || a1 >= 0xFFFF)
            v28 = 0xFFFFLL;
          else
            v28 = v11 * a1;
        }
        else
        {
          v28 = a1;
          if (!(_DWORD)v26)
LABEL_121:
            _dispatch_apply_with_attr_f_cold_2(a2);
        }
        return;
    }
  }
  if (v26 >= a1)
    v29 = a1;
  else
    v29 = v26;
  memset(v54, 0, 32);
  v54[4] = v21;
  v54[5] = v22;
  v54[6] = a6;
  v54[7] = v6;
  v30 = *(void **)(StatusReg + 176);
  if (v30)
    *(_QWORD *)(StatusReg + 176) = *((_QWORD *)v30 + 2);
  else
    v30 = _dispatch_continuation_alloc_from_heap_VARIANT_mp();
  *((_QWORD *)v30 + 1) = 0;
  *((_QWORD *)v30 + 2) = a1;
  *((_QWORD *)v30 + 3) = v28;
  *((_DWORD *)v30 + 11) = v29;
  *((_DWORD *)v30 + 13) = 0;
  if (a2)
  {
    v31 = (unint64_t)_dispatch_calloc(1uLL, 0x40uLL);
    *(_OWORD *)v31 = 0u;
    *(_OWORD *)(v31 + 16) = 0u;
    *(_OWORD *)(v31 + 32) = 0u;
    *(_OWORD *)(v31 + 48) = 0u;
    *(_DWORD *)v31 = -1592086528;
    *(_QWORD *)(v31 + 16) = ~v31;
    *(_QWORD *)(v31 + 8) = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(v31 + 4) = *(_DWORD *)(a2 + 4);
  }
  else
  {
    v31 = 0;
  }
  *((_QWORD *)v30 + 7) = v31;
  *((_QWORD *)v30 + 4) = 0;
  *(_QWORD *)v30 = v54;
  *((_DWORD *)v30 + 10) = 0;
  v32 = (__objc2_class **)v6[3];
  if (v32 == &_dispatch_custom_workloop_root_queue || v32 == &_dispatch_custom_workloop_overcommit_root_queue)
  {
    if (((v6[7] ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) != 0)
      dispatch_async_and_wait_f_VARIANT_mp((uint64_t)v6, (uint64_t)v30, (uint64_t (*)(void))_dispatch_apply_serial);
    else
      _dispatch_apply_serial((uint64_t)v30);
    return;
  }
  if (v29 < 2 || *((_WORD *)v6 + 40) == 1)
  {
    v47 = (uint64_t (*)(void))_dispatch_apply_serial;
    goto LABEL_103;
  }
  if (v32)
  {
    v48 = (uint64_t)v50;
    if (v6 == v50)
    {
      v47 = (uint64_t (*)(void))_dispatch_apply_serial;
      goto LABEL_104;
    }
    v47 = (uint64_t (*)(void))_dispatch_apply_redirect;
LABEL_103:
    v48 = (uint64_t)v6;
LABEL_104:
    dispatch_sync_f_VARIANT_mp(v48, (uint64_t)v30, v47);
    return;
  }
  v33 = (_OWORD *)(StatusReg + 160);
  v53 = *(_OWORD *)(StatusReg + 160);
  *(_QWORD *)(StatusReg + 160) = v6;
  *(_QWORD *)(StatusReg + 168) = &v53;
  v34 = *((_DWORD *)v30 + 11);
  v35 = v34 - 1;
  if (v34 < 2)
  {
    v38 = 0;
    v40 = 0;
  }
  else
  {
    v52 = v6;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = *(_QWORD *)(StatusReg + 32) | 0x10000000;
    do
    {
      v40 = *(__objc2_class **)(StatusReg + 176);
      if (v40)
        *(_QWORD *)(StatusReg + 176) = v40->cache;
      else
        v40 = (__objc2_class *)_dispatch_continuation_alloc_from_heap_VARIANT_mp();
      v40->isa = (__objc2_class *)260;
      v40->info = (__objc2_class_ro *)_dispatch_apply_invoke_VARIANT_mp;
      v40[1].isa = (__objc2_class *)v30;
      v41 = *(unsigned int **)(StatusReg + 224);
      if (v41)
      {
        v42 = v41 + 3;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
        if (v43 <= 0)
          dispatch_group_notify_VARIANT_mp_cold_3();
      }
      v40->vtable = v41;
      v40->superclass = (__objc2_class *)v39;
      v40->cache = v37;
      if (!v38)
        v38 = (unint64_t)v40;
      ++v36;
      v37 = v40;
    }
    while (v36 != v35);
    v34 = *((_DWORD *)v30 + 11);
    v6 = v52;
    v33 = (_OWORD *)(StatusReg + 160);
  }
  *((_DWORD *)v30 + 12) = v34;
  *((_QWORD *)v30 + 4) = _dispatch_calloc(v34, 8uLL);
  *(_QWORD *)(v38 + 16) = 0;
  v44 = (unint64_t *)(v6 + 6);
  *(_QWORD *)(StatusReg + 976) = v6 + 6;
  do
    v45 = __ldxr(v44);
  while (__stlxr(v38, v44));
  if (v45)
  {
    *(_QWORD *)(v45 + 16) = v40;
    *(_QWORD *)(StatusReg + 976) = 0;
  }
  else
  {
    v6[13] = v40;
    *(_QWORD *)(StatusReg + 976) = 0;
    _dispatch_root_queue_poke_and_wakeup_VARIANT_mp((unsigned int *)v6, v35, 0);
  }
  _dispatch_apply_invoke_and_wait((uint64_t)v30);
  *v33 = v53;
}

void dispatch_apply_with_attr_f_VARIANT_mp(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _dispatch_apply_with_attr_f(a1, a2, 0, a3, a4, 2);
}

void dispatch_apply_VARIANT_mp(unint64_t a1, __objc2_class **a2, void *aBlock)
{
  uint64_t *v5;

  v5 = (uint64_t *)_dispatch_Block_copy(aBlock);
  dispatch_apply_f_VARIANT_mp(a1, a2, (uint64_t)v5, v5[2]);
  _Block_release(v5);
}

void dispatch_apply_with_attr_VARIANT_mp(unint64_t a1, uint64_t a2, void *aBlock)
{
  uint64_t *v5;

  v5 = (uint64_t *)_dispatch_Block_copy(aBlock);
  _dispatch_apply_with_attr_f(a1, a2, 0, (uint64_t)v5, v5[2], 2);
  _Block_release(v5);
}

double dispatch_apply_attr_init_VARIANT_mp(unint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)a1 = -1592086528;
  *(_QWORD *)(a1 + 16) = ~a1;
  return result;
}

double dispatch_apply_attr_destroy_VARIANT_mp(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t dispatch_apply_attr_set_parallelism_VARIANT_mp(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 == -1 || a2 == 2)
  {
    if (a3 != 1)
    {
      if (!a3)
        dispatch_apply_attr_set_parallelism_VARIANT_mp_cold_4();
      dispatch_apply_attr_set_parallelism_VARIANT_mp_cold_3(a3);
    }
    if (result && (*(_DWORD *)result != -1592086528 || ~*(_QWORD *)(result + 16) != result))
      _dispatch_apply_with_attr_f_cold_4(result);
    *(_QWORD *)(result + 8) = 1;
  }
  else
  {
    if (a2 != 1)
      dispatch_apply_attr_set_parallelism_VARIANT_mp_cold_1(a2);
    if (a3 != 1)
      dispatch_apply_attr_set_parallelism_VARIANT_mp_cold_2(a3);
  }
  return result;
}

unint64_t dispatch_apply_attr_query_VARIANT_mp(unint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  unint64_t StatusReg;
  unint64_t v5;
  unint64_t v6;
  __objc2_class **v7;
  __objc2_class **v8;
  BOOL v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  int v21;

  v3 = result;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = StatusReg + 184;
  while (1)
  {
    v5 = *(_QWORD *)v5;
    if (!v5)
      break;
    if (*(char **)(v5 + 8) == "apply")
    {
      v6 = *(_QWORD *)(v5 + 16);
      goto LABEL_6;
    }
  }
  v6 = 0;
LABEL_6:
  v7 = *(__objc2_class ***)(StatusReg + 160);
  if (!v7)
    goto LABEL_18;
  do
  {
    v8 = v7;
    v7 = (__objc2_class **)v7[3];
    if (!v7)
      break;
    v9 = v7 == &_dispatch_custom_workloop_root_queue || v7 == &_dispatch_custom_workloop_overcommit_root_queue;
  }
  while (!v9);
  if (v8 >= &_dispatch_root_queues && v8 < (__objc2_class **)&_dispatch_queue_serial_numbers)
  {
LABEL_18:
    v11 = (*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF;
    v9 = v11 == 0;
    v12 = __clz(__rbit32(v11));
    if (v9)
      result = 4;
    else
      result = v12 + 1;
    if ((result - 7) <= 0xFFFFFFF9)
      _dispatch_queue_priority_inherit_from_target_cold_1(result);
    v8 = &_dispatch_root_queues + 16 * (unint64_t)(3 * result - 3);
  }
  v13 = *((_DWORD *)v8 + 21);
  v14 = (unsigned __int16)v13 >> 12;
  v15 = (v13 >> 8) & 0xF;
  if (v15)
    v16 = v15;
  else
    v16 = v14;
  switch(a2)
  {
    case 0:
      return dispatch_apply_attr_query_VARIANT_mp(v3, 1) != 0;
    case 1:
      if ((a3 & 1) != 0)
      {
        if (v3)
        {
          if (*(_DWORD *)v3 != -1592086528 || ~*(_QWORD *)(v3 + 16) != v3)
            _dispatch_apply_with_attr_f_cold_4(v3);
          if (!v6)
          {
            switch(v16)
            {
              case 0:
                goto LABEL_48;
              default:
LABEL_55:
                v19 = pthread_qos_max_parallelism();
                if (v19 <= 0)
LABEL_48:
                  v19 = MEMORY[0xFFFFFC036];
                if (v19 >= MEMORY[0xFFFFFC034])
                  v18 = MEMORY[0xFFFFFC034];
                else
                  v18 = v19;
                if (!*(_QWORD *)(v3 + 8))
                  goto LABEL_60;
                goto LABEL_61;
            }
          }
          return 1;
        }
        switch(v16)
        {
          case 0:
            goto LABEL_54;
          default:
LABEL_66:
            LODWORD(result) = pthread_qos_max_parallelism();
            if ((int)result <= 0)
LABEL_54:
              LODWORD(result) = MEMORY[0xFFFFFC036];
            if (result >= MEMORY[0xFFFFFC034])
              result = MEMORY[0xFFFFFC034];
            else
              result = result;
            if (!v6)
              return result;
            if (v6 >= result)
              return 1;
            result /= v6;
            break;
        }
      }
      else if (v3)
      {
        if (*(_DWORD *)v3 != -1592086528 || ~*(_QWORD *)(v3 + 16) != v3)
          _dispatch_apply_with_attr_f_cold_4(v3);
        v17 = pthread_qos_max_parallelism();
        if (v17 <= 0)
          v17 = MEMORY[0xFFFFFC036];
        v18 = v17;
        if (*(_QWORD *)(v3 + 8))
        {
LABEL_61:
          v21 = pthread_qos_max_parallelism();
          if (v21 < 1)
            v20 = 0;
          else
            v20 = (v21 * *(_DWORD *)(v3 + 8));
        }
        else
        {
LABEL_60:
          v20 = -1;
        }
        if (v20 >= v18)
          return v18;
        else
          return v20;
      }
      else
      {
        LODWORD(result) = pthread_qos_max_parallelism();
        if ((int)result <= 0)
          LODWORD(result) = MEMORY[0xFFFFFC036];
        return result;
      }
      break;
    case 2:
      if (!v3)
      {
        switch(v16)
        {
          case 0:
            goto LABEL_54;
          default:
            goto LABEL_66;
        }
      }
      if (*(_DWORD *)v3 != -1592086528 || ~*(_QWORD *)(v3 + 16) != v3)
        _dispatch_apply_with_attr_f_cold_4(v3);
      if (!v6)
      {
        switch(v16)
        {
          case 0:
            goto LABEL_48;
          default:
            goto LABEL_55;
        }
      }
      return 1;
  }
  return result;
}

uint64_t _dispatch_apply_set_attr_behavior(uint64_t result)
{
  if (result)
  {
    if (*(_QWORD *)(result + 8))
    {
      result = __bsdthread_ctl();
      if ((_DWORD)result)
      {
        result = (uint64_t)__error();
        if (*(_DWORD *)result != 45)
          __break(1u);
      }
    }
  }
  return result;
}

void _dispatch_apply_invoke3(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  unint64_t StatusReg;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  _QWORD v22[3];

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v4 = (unint64_t *)(*(_QWORD *)a1 + 8);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  if (v5 >= v3)
    return;
  v6 = 0;
  v7 = *(uint64_t (**)(void))(*(_QWORD *)v2 + 32);
  v8 = *(_QWORD *)(*(_QWORD *)v2 + 40);
  v9 = "apply";
  v10 = *(_QWORD *)(*(_QWORD *)v2 + 48);
  v12 = *(_QWORD *)(v2 + 24);
  v22[1] = "apply";
  v22[2] = v12;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v22[0] = *(_QWORD *)(StatusReg + 184);
  *(_QWORD *)(StatusReg + 184) = v22;
  v21 = 0uLL;
  LODWORD(v12) = *(unsigned __int8 *)(a1 + 8);
  if ((v12 & 1) != 0)
  {
    v13 = *(_QWORD *)(*(_QWORD *)v2 + 56);
    v21 = *(_OWORD *)(StatusReg + 160);
    *(_QWORD *)(StatusReg + 160) = v13;
    *(_QWORD *)(StatusReg + 168) = &v21;
    LODWORD(v9) = *(_DWORD *)(v13 + 84);
    v12 = *(_QWORD *)(StatusReg + 200);
    if ((_DWORD)v12)
    {
      v14 = (unsigned __int16)v9 & 0xFFF;
      if (((unsigned __int16)v9 & 0xFFF) != 0)
      {
        if (((unsigned __int16)v12 & 0xFFFu) > v14)
          v14 = v12 & 0xFFF;
        if ((unsigned __int16)v9 >> 12 <= v14 >> 8)
          v15 = 0x40000000;
        else
          v15 = 1140912128;
        LODWORD(v9) = v12 & 0x880F0000 | v14 | v15 & v9;
      }
      else
      {
        v16 = v12 | 0x40000000;
        if ((v12 & 0xFFF) == 0)
          v16 = *(_QWORD *)(StatusReg + 200);
        v17 = (unsigned __int16)v9 >> 12;
        LODWORD(v9) = v16 & 0xFFFF0FFF | v9 & 0x400F000;
        if (v17 <= ((v16 >> 8) & 0xF))
          LODWORD(v9) = v16;
      }
    }
    else
    {
LABEL_34:
      LODWORD(v9) = v9 & 0xFFF0FFFF;
    }
    *(_QWORD *)(StatusReg + 200) = v9;
    v6 = v12 & 0xFFF0FFFF;
  }
  v20 = v6;
  v18 = *(_DWORD *)(v2 + 40);
  do
  {
    if ((v18 & 0x1000000) != 0)
    {
      v19 = (void *)MEMORY[0x18D766D94]();
      if ((v10 & 1) != 0)
      {
LABEL_21:
        _dispatch_client_callout2(v8, v5, v7);
        goto LABEL_25;
      }
    }
    else
    {
      v19 = 0;
      if ((v10 & 1) != 0)
        goto LABEL_21;
    }
    if ((v10 & 2) == 0)
    {
      v2 = v10;
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: apply continuation has invalid flags";
      qword_1EDF52D38 = v10;
      __break(1u);
      goto LABEL_34;
    }
    _dispatch_client_callout3_a(v8, v5, *(unsigned int *)(a1 + 16), v7);
    do
    {
LABEL_25:
      v5 = __ldxr(v4);
      LODWORD(v12) = __stxr(v5 + 1, v4);
    }
    while ((_DWORD)v12);
    if (v19)
      objc_autoreleasePoolPop(v19);
  }
  while (v5 < v3);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    *(_QWORD *)(StatusReg + 200) = *(_QWORD *)(StatusReg + 200) & 0xF0000 | v20;
    *(_OWORD *)(StatusReg + 160) = v21;
  }
  *(_QWORD *)(StatusReg + 184) = v22[0];
}

uint64_t _dispatch_apply_clear_attr_behavior(uint64_t result)
{
  if (result && *(_QWORD *)(result + 8))
  {
    result = __bsdthread_ctl();
    if ((_DWORD)result)
      __break(1u);
  }
  return result;
}

void _dispatch_apply_serial(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  _OWORD *v12;
  unint64_t StatusReg;
  uint64_t v14;
  int v15;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  if (v3)
  {
    do
    {
      v4 = *(_DWORD *)(v3 + 80);
      v3 = *(_QWORD *)(v3 + 24);
      if (v3)
        v5 = (v4 & 0x30000) == 0;
      else
        v5 = 0;
    }
    while (v5);
    v6 = (v4 & 0x10000) == 0;
  }
  else
  {
    v6 = 1;
  }
  v7 = 0;
  if (*(_QWORD *)(a1 + 16) <= 1uLL)
    v8 = 1;
  else
    v8 = *(_QWORD *)(a1 + 16);
  do
  {
    if (v6)
      v9 = 0;
    else
      v9 = (void *)MEMORY[0x18D766D94]();
    v10 = *(_QWORD *)(v2 + 48);
    if ((v10 & 1) != 0)
    {
      _dispatch_client_callout2(*(_QWORD *)(v2 + 40), v7, *(uint64_t (**)(void))(v2 + 32));
      if (!v9)
        goto LABEL_20;
LABEL_19:
      objc_autoreleasePoolPop(v9);
      goto LABEL_20;
    }
    if ((v10 & 2) == 0)
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: apply continuation has invalid flags";
      qword_1EDF52D38 = v10;
      __break(1u);
      return;
    }
    _dispatch_client_callout3_a(*(_QWORD *)(v2 + 40), v7, 0, *(uint64_t (**)(void))(v2 + 32));
    if (v9)
      goto LABEL_19;
LABEL_20:
    ++v7;
  }
  while (v8 != v7);
  v11 = *(void **)(a1 + 32);
  if (v11)
    free(v11);
  v12 = *(_OWORD **)(a1 + 56);
  if (v12)
  {
    v12[2] = 0u;
    v12[3] = 0u;
    *v12 = 0u;
    v12[1] = 0u;
    free(*(void **)(a1 + 56));
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v14 = *(_QWORD *)(StatusReg + 176);
  if (v14)
    v15 = *(_DWORD *)(v14 + 8) + 1;
  else
    v15 = 1;
  if (v15 > _dispatch_continuation_cache_limit)
  {
    _dispatch_continuation_free_to_cache_limit_VARIANT_mp(a1);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v14;
    *(_DWORD *)(a1 + 8) = v15;
    *(_QWORD *)(StatusReg + 176) = a1;
  }
}

void _dispatch_apply_redirect(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *StatusReg;
  int v12;
  signed int v13;
  int v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  int v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t);

  v1 = (*(_DWORD *)(a1 + 44) - 1);
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v3 = v2;
  do
  {
    if (*(_WORD *)(v3 + 80) == 1)
    {
      v6 = 0;
    }
    else
    {
      v4 = (unint64_t *)(v3 + 56);
      while (1)
      {
        v5 = __ldxr(v4);
        if ((v5 & 0x20000000000000) != 0)
          break;
        v6 = (v5 >> 41) & 0x1FFF;
        if ((_DWORD)v6 == 4096)
          break;
        LODWORD(v6) = 4096 - v6;
        if ((int)v6 >= (int)v1)
          v6 = v1;
        else
          v6 = v6;
        if (!__stxr(v5 + (v6 << 41), v4))
          goto LABEL_10;
      }
      v6 = 0;
      __clrex();
    }
LABEL_10:
    v7 = (v1 - v6);
    if ((int)v1 > (int)v6)
    {
      if (v2 != v3)
      {
        v8 = v2;
        do
        {
          v9 = (unint64_t *)(v8 + 56);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 - (v7 << 41), v9));
          v8 = *(_QWORD *)(v8 + 24);
        }
        while (v8 != v3);
      }
      if (!(_DWORD)v6)
      {
        _dispatch_apply_serial(a1);
        return;
      }
      *(_DWORD *)(a1 + 44) -= v7;
      v1 = v6;
    }
    if (!*(_DWORD *)(a1 + 40))
      *(_DWORD *)(a1 + 40) = (*(_DWORD *)(v3 + 80) << 8) & 0x3000000;
    v3 = *(_QWORD *)(v3 + 24);
  }
  while (*(_QWORD *)(v3 + 24));
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v12 = *(_DWORD *)(a1 + 44);
  v13 = v12 - 1;
  if (v12 < 2)
  {
    v16 = 0;
    v18 = 0;
LABEL_38:
    *(_DWORD *)(a1 + 48) = v12;
    v15 = (_QWORD *)a1;
    *(_QWORD *)(a1 + 32) = _dispatch_calloc(v12, 8uLL);
    v22 = (uint64_t)v15;
    *(_QWORD *)(v16 + 16) = 0;
    v23 = (unint64_t *)(v3 + 48);
    StatusReg[122] = v3 + 48;
    do
      v24 = __ldxr(v23);
    while (__stlxr(v16, v23));
    if (v24)
    {
      *(_QWORD *)(v24 + 16) = v18;
      StatusReg[122] = 0;
      goto LABEL_42;
    }
  }
  else
  {
    v28 = (void (*)(uint64_t))v1;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = StatusReg[4] | 0x10000000;
    v1 = (unint64_t)_dispatch_apply_redirect_invoke_VARIANT_mp;
    while (1)
    {
      v18 = (_QWORD *)StatusReg[22];
      if (v18)
      {
        StatusReg[22] = v18[2];
      }
      else
      {
        v27 = a1;
        v18 = _dispatch_continuation_alloc_from_heap_VARIANT_mp();
        a1 = v27;
      }
      *v18 = 260;
      v18[4] = _dispatch_apply_redirect_invoke_VARIANT_mp;
      v18[5] = a1;
      v19 = StatusReg[28];
      if (v19)
      {
        v20 = (unsigned int *)(v19 + 12);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
        if (v21 <= 0)
          break;
      }
      v18[3] = v19;
      v18[1] = v17;
      v18[2] = v15;
      if (!v16)
        v16 = (unint64_t)v18;
      ++v14;
      v15 = v18;
      if (v14 == v13)
      {
        v12 = *(_DWORD *)(a1 + 44);
        v1 = (unint64_t)v28;
        goto LABEL_38;
      }
    }
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
  *(_QWORD *)(v3 + 104) = v18;
  StatusReg[122] = 0;
  _dispatch_root_queue_poke_and_wakeup_VARIANT_mp((unsigned int *)v3, v13, 0);
  v22 = (uint64_t)v15;
LABEL_42:
  _dispatch_apply_invoke_and_wait(v22);
  for (; v2 != v3; v2 = *(_QWORD *)(v2 + 24))
  {
    v25 = (unint64_t *)(v2 + 56);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 - (v1 << 41), v25));
  }
}

void _dispatch_apply_invoke_and_wait(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t i;
  unint64_t *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  void *v13;
  _OWORD *v14;
  unint64_t StatusReg;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;

  v2 = (unsigned int *)(a1 + 52);
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 + 1, v2));
  v18 = a1;
  v19 = xmmword_18A06E710;
  DWORD2(v19) = v3;
  v4 = v3;
  _dispatch_apply_set_attr_behavior(*(_QWORD *)(a1 + 56));
  v5 = (unint64_t *)(*(_QWORD *)(a1 + 32) + 8 * v3);
  if (*v5 != -1)
    dispatch_once_f_VARIANT_mp(v5, (uint64_t)&v18, (uint64_t (*)(void))_dispatch_apply_invoke3);
  _dispatch_apply_clear_attr_behavior(*(_QWORD *)(a1 + 56));
  v6 = *(_DWORD *)(a1 + 48);
  if (v6 >= 1)
  {
    v7 = 0;
    for (i = 0; i < v6; ++i)
    {
      if (8 * v4 != v7)
      {
        v9 = (unint64_t *)(*(_QWORD *)(a1 + 32) + v7);
        if (*v9 != -1)
          dispatch_once_f_VARIANT_mp(v9, 0, _dispatch_no_op);
        v6 = *(_DWORD *)(a1 + 48);
      }
      v7 += 8;
    }
  }
  v10 = (unsigned int *)(a1 + 44);
  do
  {
    v11 = __ldxr(v10);
    v12 = v11 - 1;
  }
  while (__stxr(v12, v10));
  if (!v12)
  {
    v13 = *(void **)(a1 + 32);
    if (v13)
      free(v13);
    v14 = *(_OWORD **)(a1 + 56);
    if (v14)
    {
      v14[2] = 0u;
      v14[3] = 0u;
      *v14 = 0u;
      v14[1] = 0u;
      free(*(void **)(a1 + 56));
    }
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v16 = *(_QWORD *)(StatusReg + 176);
    if (v16)
      v17 = *(_DWORD *)(v16 + 8) + 1;
    else
      v17 = 1;
    if (v17 > _dispatch_continuation_cache_limit)
    {
      _dispatch_continuation_free_to_cache_limit_VARIANT_mp(a1);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v16;
      *(_DWORD *)(a1 + 8) = v17;
      *(_QWORD *)(StatusReg + 176) = a1;
    }
  }
}

uint64_t dispatch_source_create_VARIANT_mp(uint64_t a1, unint64_t a2, uint64_t a3, __objc2_class **a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  unint64_t v12;
  unsigned int *v13;
  int v14;

  v6 = (*(uint64_t (**)(void))(a1 + 32))();
  if (!v6)
    return 0;
  v7 = v6;
  v8 = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_source, 120);
  v9 = v8;
  v10 = *(_BYTE *)(*(_QWORD *)v7 + 10);
  *(_DWORD *)(v8 + 8) += 2;
  if (*(_BYTE *)(*(_QWORD *)v8 + 40) == 19)
    ++*(_DWORD *)(v8 + 8);
  *(_QWORD *)(v8 + 16) = -1985229329;
  if ((v10 & 2) != 0)
    v11 = 67108865;
  else
    v11 = 4194305;
  *(_DWORD *)(v8 + 80) = v11;
  *(_QWORD *)(v8 + 56) = 0x19FFE0000000000;
  do
    v12 = __ldxr(&_dispatch_queue_serial_numbers);
  while (__stxr(v12 + 1, &_dispatch_queue_serial_numbers));
  *(_QWORD *)(v8 + 64) = v12;
  *(_QWORD *)(v8 + 72) = "source";
  *(_QWORD *)(v8 + 88) = v7;
  *(_QWORD *)(v7 + 8) = ~v8;
  if (a4)
  {
    if ((*((_BYTE *)a4 + 87) & 8) != 0 && (*(_BYTE *)(v7 + 29) & 2) == 0)
      dispatch_source_create_VARIANT_mp_cold_2(v8);
    if (*((_DWORD *)a4 + 2) != 0x7FFFFFFF)
    {
      v13 = (unsigned int *)(a4 + 1);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      if (v14 <= 0)
        dispatch_set_target_queue_VARIANT_mp_cold_2();
    }
  }
  else
  {
    a4 = &off_1ECCEA100;
  }
  *(_QWORD *)(v8 + 24) = a4;
  if ((*(_BYTE *)(v7 + 29) & 2) != 0 && (*(_BYTE *)(v7 + 30) & 0x10) != 0)
    dispatch_source_set_timer_VARIANT_mp((_QWORD *)v8, 0, a2, 0xFFFFFFFFFFFFFFFFLL);
  return v9;
}

unint64_t dispatch_source_set_timer_VARIANT_mp(_QWORD *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  _DWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned __int8 v10;
  unint64_t v11;
  unint64_t result;
  int v13;
  uint64_t (*v14)(unint64_t);
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;

  v8 = (unsigned __int8 *)a1[11];
  if ((v8[29] & 2) == 0)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Attempt to set timer on a non-timer source";
    qword_1EDF52D38 = (uint64_t)a1;
    __break(1u);
    goto LABEL_51;
  }
  v5 = a4;
  v6 = a2;
  v10 = v8[30];
  if ((v10 & 0x10) == 0)
  {
    v4 = _dispatch_calloc(1uLL, 0x20uLL);
    if (a3)
    {
      if (a3 >= 0x7FFFFFFFFFFFFFFFLL)
        a3 = 0x7FFFFFFFFFFFFFFFLL;
      if (v5 >= 0x7FFFFFFFFFFFFFFFLL)
        v11 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v11 = v5;
      if (v6 != -1)
        goto LABEL_10;
      goto LABEL_56;
    }
LABEL_51:
    if (v6 != -1)
    {
      _dispatch_bug_deprecated("Setting timer interval to 0 requests a 1ns timer, did you mean FOREVER (a one-shot timer)?");
      if (v5 >= 0x7FFFFFFFFFFFFFFFLL)
        v11 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v11 = v5;
      a3 = 1;
LABEL_10:
      switch(v6)
      {
        case -9223372036854775808:
          v13 = 1;
          result = mach_continuous_time();
          goto LABEL_58;
        case -2:
          result = clock_gettime_nsec_np(_CLOCK_REALTIME);
          v13 = 2;
          goto LABEL_69;
        case 0:
          result = mach_absolute_time();
          v13 = 0;
LABEL_58:
          if (!_dispatch_host_time_nano2mach)
          {
            if (a3 > 0x7FFFFFFFFFFFFFFELL)
            {
              a3 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              v24 = (3 * a3 * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
              v25 = (v24 + ((3 * a3 - v24) >> 1)) >> 6;
              if (a3 > 0x5555555555555554)
                v25 = 3 * (a3 / 0x7D);
              if (v25 <= 1)
                a3 = 1;
              else
                a3 = v25;
            }
            goto LABEL_65;
          }
          v31 = result;
          v32 = _dispatch_host_time_nano2mach(a3);
          if (v32 <= 1)
            a3 = 1;
          else
            a3 = v32;
          if (!_dispatch_host_time_nano2mach)
          {
            result = v31;
LABEL_65:
            if (v11)
            {
              if (v11 > 0x7FFFFFFFFFFFFFFELL)
              {
                v11 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else if (v11 > 0x5555555555555554)
              {
                v11 = 3 * (v11 / 0x7D);
              }
              else
              {
                v26 = (3 * v11 * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
                v11 = (v26 + ((3 * v11 - v26) >> 1)) >> 6;
              }
            }
            goto LABEL_69;
          }
          v11 = _dispatch_host_time_nano2mach(v11);
          result = v31;
LABEL_69:
          v27 = a3 >> 1;
          if (v11 < a3 >> 1)
            v27 = v11;
          if (a3 >= 0x7FFFFFFFFFFFFFFFLL)
            v27 = v11;
          v4[6] = v13;
          v28 = v27 + result;
          if (v28 >= 0x7FFFFFFFFFFFFFFFLL)
            v28 = 0x7FFFFFFFFFFFFFFFLL;
          *(_QWORD *)v4 = result;
          *((_QWORD *)v4 + 1) = v28;
          *((_QWORD *)v4 + 2) = a3;
          goto LABEL_76;
      }
      v21 = v6 & 0x7FFFFFFFFFFFFFFFLL;
      if ((v6 & 0x4000000000000000) != 0)
        v22 = 2;
      else
        v22 = 1;
      if ((v6 & 0x4000000000000000) != 0)
        v21 = -v6;
      if (v6 < 0)
        v13 = v22;
      else
        v13 = 0;
      if (v6 >= 0)
        v21 = v6;
      if (v21 >> 62)
        result = -1;
      else
        result = v21;
LABEL_57:
      if (v13 == 2)
        goto LABEL_69;
      goto LABEL_58;
    }
    if (v5 >= 0x7FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v5;
    a3 = 1;
LABEL_56:
    v13 = (v8[30] >> 2) & 3;
    result = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_57;
  }
  result = (unint64_t)_dispatch_calloc(1uLL, 0x20uLL);
  v4 = (_DWORD *)result;
  *(_DWORD *)(result + 24) = 0;
  if (!v6)
  {
    if (a3)
    {
      v15 = 16666666;
      v16 = 1892160075;
      if ((v10 & 0x20) == 0)
      {
        v16 = 31536000000;
        v15 = 1000000;
      }
      v17 = v15 * a3;
      if (v16 >= a3)
        result = v17;
      else
        result = 31536000000000000;
      v6 = (uint64_t)&_dispatch_host_time_nano2mach;
      v14 = _dispatch_host_time_nano2mach;
      if (!_dispatch_host_time_nano2mach)
      {
        if (result > 0x7FFFFFFFFFFFFFFELL)
        {
          v19 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else if (result > 0x5555555555555554)
        {
          v19 = 3 * (result / 0x7D);
        }
        else
        {
          v18 = (3 * result * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
          v19 = (v18 + ((3 * result - v18) >> 1)) >> 6;
        }
        goto LABEL_27;
      }
    }
    else
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Setting interval to 0";
      __break(1u);
    }
    v19 = v14(result);
LABEL_27:
    result = mach_absolute_time();
    v20 = result;
    if (v5 > 0x3E8)
    {
      if (v5 != -1)
      {
LABEL_107:
        qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Passing an invalid leeway";
        __break(1u);
        return result;
      }
      if ((v10 & 0x20) != 0)
      {
        if (*(_QWORD *)v6)
          result = (*(uint64_t (**)(uint64_t))v6)(16666666);
        else
          result = 399999;
      }
      else
      {
        result = v19 >> 1;
      }
    }
    else
    {
      result = v19 * v5 / 0x3E8;
    }
    v13 = 0;
    v23 = (v20 + v19) / v19 * v19;
    v4[6] = 0;
    *(_QWORD *)v4 = v23;
    *((_QWORD *)v4 + 1) = result + v23;
    *((_QWORD *)v4 + 2) = v19;
    goto LABEL_76;
  }
  if (v6 != -1)
  {
LABEL_106:
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Start value is not DISPATCH_TIME_NOW or DISPATCH_TIME_FOREVER";
    __break(1u);
    goto LABEL_107;
  }
  v13 = 0;
  *(_QWORD *)(result + 16) = 0x7FFFFFFFFFFFFFFFLL;
  *(int64x2_t *)result = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
LABEL_76:
  if (v13 != ((v8[30] >> 2) & 3) && v8[28] == 236)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Attempting to modify timer clock";
    __break(1u);
    goto LABEL_106;
  }
  if (_dispatch_source_timer_telemetry_pred != -1)
    dispatch_once_f_VARIANT_mp((unint64_t *)&_dispatch_source_timer_telemetry_pred, 0, (uint64_t (*)(void))_dispatch_source_timer_telemetry_init);
  if (_dispatch_source_timer_use_telemetry)
    _dispatch_source_timer_telemetry_slow();
  v29 = (unint64_t *)(v8 + 104);
  do
    v30 = (void *)__ldxr(v29);
  while (__stlxr((unint64_t)v4, v29));
  if (v30)
    free(v30);
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*a1 + 80))(a1, 0, 2);
}

uint64_t _dispatch_source_is_timer_VARIANT_mp(uint64_t a1)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(a1 + 88) + 29) >> 1) & 1;
}

void _dispatch_source_dispose_VARIANT_mp(uint64_t *a1, char *a2)
{
  unint64_t *v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;

  v4 = (unint64_t *)(a1[11] + 56);
  do
    v5 = __ldxr(v4);
  while (__stxr(0, v4));
  if (v5)
    _dispatch_source_handler_dispose(v5, a2);
  v6 = (unint64_t *)(a1[11] + 40);
  do
    v7 = __ldxr(v6);
  while (__stxr(0, v6));
  if (v7)
    _dispatch_source_handler_dispose(v7, a2);
  v8 = (unint64_t *)(a1[11] + 48);
  do
    v9 = __ldxr(v8);
  while (__stxr(0, v8));
  if (v9)
    _dispatch_source_handler_dispose(v9, a2);
  _dispatch_unote_dispose_VARIANT_mp(a1[11]);
  a1[11] = 0;
  _dispatch_lane_class_dispose_VARIANT_mp(a1, a2);
}

uint64_t _dispatch_source_xref_dispose_VARIANT_mp(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 80) & 0x14000000) == 0x4000000 && *(_QWORD *)(*(_QWORD *)(a1 + 88) + 48))
    _dispatch_source_xref_dispose_VARIANT_mp_cold_1(*(_DWORD *)(a1 + 80));
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 80))(a1, 0, 2);
}

unint64_t dispatch_source_testcancel_VARIANT_mp(uint64_t a1)
{
  return ((unint64_t)*(unsigned int *)(a1 + 80) >> 28) & 1;
}

uint64_t dispatch_source_get_mask_VARIANT_mp(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 88);
  if ((*(_DWORD *)(a1 + 80) & 0x10000000) != 0)
    return 0;
  if ((*(_BYTE *)(v1 + 29) & 0x10) != 0)
    return 0x80000000;
  if ((*(_BYTE *)(v1 + 29) & 2) != 0)
    return *(unsigned __int8 *)(v1 + 30);
  return *(unsigned int *)(v1 + 32);
}

unint64_t dispatch_source_get_handle_VARIANT_mp(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(a1 + 88);
  if (*(unsigned __int8 *)(v1 + 28) == 236
    && (v2 = ((unint64_t)*(unsigned __int8 *)(v1 + 30) >> 2) & 3, (_DWORD)v2 != 3))
  {
    return v2 + 1;
  }
  else
  {
    return *(unsigned int *)(v1 + 24);
  }
}

uint64_t dispatch_source_get_data_VARIANT_mp(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 88);
  v2 = *(_BYTE *)(v1 + 29);
  if ((v2 & 0x10) != 0)
    return 0x80000000;
  v3 = *(_QWORD *)(v1 + 64);
  if ((v2 & 4) != 0)
    return v3;
  else
    return v3;
}

uint64_t dispatch_source_get_extended_data_VARIANT_mp(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if (a3)
  {
    v4 = *(_QWORD *)(a1 + 88);
    if ((*(_BYTE *)(v4 + 29) & 4) != 0)
    {
      v7 = *(_QWORD *)(v4 + 64);
      v6 = v7;
      v5 = HIDWORD(v7);
    }
    else
    {
      v5 = 0;
      v6 = (*(_BYTE *)(v4 + 29) & 0x10) != 0 ? 0x80000000 : *(_QWORD *)(v4 + 64);
    }
    if (a3 >= 8)
    {
      *a2 = v6;
      if (a3 >= 0x10)
      {
        a2[1] = v5;
        if (a3 != 16)
          bzero(a2 + 2, a3 - 16);
      }
    }
  }
  if (a3 >= 0x10)
    return 16;
  else
    return a3;
}

uint64_t dispatch_source_merge_data_VARIANT_mp(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  if ((*(_DWORD *)(result + 80) & 0x10800000) == 0)
  {
    v2 = *(_QWORD *)(result + 88);
    v3 = *(char *)(v2 + 28);
    switch(v3)
    {
      case -23:
        *(_QWORD *)(v2 + 72) = a2;
        break;
      case -22:
        v6 = (unint64_t *)(v2 + 72);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 | a2, v6));
        break;
      case -21:
        v4 = (unint64_t *)(v2 + 72);
        do
          v5 = __ldxr(v4);
        while (__stxr(v5 + a2, v4));
        break;
      default:
        dispatch_source_merge_data_VARIANT_mp_cold_1(v3);
    }
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)result + 80))(result, 0, 2);
  }
  return result;
}

unint64_t *dispatch_source_set_event_handler_VARIANT_mp(uint64_t a1, void (**a2)(void (**a1)(void)))
{
  return _dispatch_source_set_handler(a1, a2, 0, 1);
}

unint64_t *_dispatch_source_set_handler(uint64_t a1, void (**aBlock)(void (**a1)(void)), uint64_t a3, int a4)
{
  unint64_t StatusReg;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void (*v13)(void (**)(void));
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t *v19;
  uint64_t v20;
  int v22;
  const char *v23;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v9 = *(uint64_t **)(StatusReg + 176);
  if (v9)
  {
    *(_QWORD *)(StatusReg + 176) = v9[2];
    if (aBlock)
      goto LABEL_3;
  }
  else
  {
    v9 = (uint64_t *)_dispatch_continuation_alloc_from_heap_VARIANT_mp();
    if (aBlock)
    {
LABEL_3:
      v10 = 4 * (a3 != 0);
      if (a4)
      {
        v11 = _dispatch_Block_copy(aBlock);
        v12 = v10 | 0x110;
        v13 = aBlock[2];
        if ((char *)v13 == (char *)___dispatch_block_create_block_invoke)
        {
          *v9 = v12;
          v9[5] = (uint64_t)v11;
          _dispatch_continuation_init_slow_VARIANT_mp(v9, (unsigned int *)a1, 1073741888);
        }
        else
        {
          if (a3)
            v13 = _dispatch_call_block_and_release;
          v9[4] = (uint64_t)v13;
          v9[5] = (uint64_t)v11;
          v9[3] = 0;
          *v9 = v12;
          v9[1] = 0;
        }
      }
      else
      {
        v14 = *(_QWORD *)(a1 + 32);
        v9[4] = (uint64_t)aBlock;
        v9[5] = v14;
        v9[3] = 0;
        *v9 = v10 | 0x140;
        v9[1] = 0;
      }
      goto LABEL_11;
    }
  }
  *v9 = 256;
  v9[4] = 0;
LABEL_11:
  v15 = (unint64_t *)(a1 + 56);
  do
  {
    v16 = __ldxr(v15);
    if ((~v16 & 0x180000000000000) != 0)
    {
      __clrex();
      v22 = *(_DWORD *)(a1 + 80);
      if ((v22 & 0x4000000) != 0)
      {
        qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot change a handler of this source after it has been activated";
        qword_1EDF52D38 = a3;
        __break(1u);
      }
      else
      {
        if ((v22 & 0x10000000) != 0)
        {
LABEL_34:
          v9[6] = a3;
          return _dispatch_barrier_trysync_or_async_f_VARIANT_mp((unint64_t *)a1, (uint64_t)v9, (uint64_t (*)(void))_dispatch_source_set_handler_slow, 0);
        }
        if (!MEMORY[0xFFFFFC100])
        {
LABEL_32:
          if (a3 == 2 || !aBlock)
          {
            if (a3 == 2)
              v23 = "Setting registration handler after the source has been activated";
            else
              v23 = "Clearing handler after the source has been activated";
            _dispatch_bug_deprecated(v23);
          }
          goto LABEL_34;
        }
      }
      kdebug_trace();
      goto LABEL_32;
    }
  }
  while (__stxr(v16 + 0x400000000000000, v15));
  if ((v16 & 0x200000000000000) != 0)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Too many calls to dispatch_suspend() prior to calling dispa"
                               "tch_set_target_queue() or dispatch_set_*_handler()";
    __break(1u);
LABEL_36:
    _dispatch_continuation_free_to_cache_limit_VARIANT_mp((uint64_t)v9);
    goto LABEL_23;
  }
  if (v9[4])
  {
    if ((*(_BYTE *)v9 & 0x40) != 0)
      v9[5] = *(_QWORD *)(a1 + 32);
    goto LABEL_24;
  }
  v17 = *(_QWORD *)(StatusReg + 176);
  if (v17)
    v18 = *(_DWORD *)(v17 + 8) + 1;
  else
    v18 = 1;
  if (v18 > _dispatch_continuation_cache_limit)
    goto LABEL_36;
  v9[2] = v17;
  *((_DWORD *)v9 + 2) = v18;
  *(_QWORD *)(StatusReg + 176) = v9;
LABEL_23:
  v9 = 0;
LABEL_24:
  v19 = (unint64_t *)(*(_QWORD *)(a1 + 88) + 8 * a3 + 40);
  do
    v20 = __ldxr(v19);
  while (__stlxr((unint64_t)v9, v19));
  if (v20)
    _dispatch_source_handler_dispose(v20, (const char *)aBlock);
  return (unint64_t *)_dispatch_queue_resume_VARIANT_mp(a1, 0);
}

unint64_t *dispatch_source_set_event_handler_f_VARIANT_mp(uint64_t a1, void (**a2)(void (**a1)(void)))
{
  return _dispatch_source_set_handler(a1, a2, 0, 0);
}

unint64_t *dispatch_source_set_cancel_handler_VARIANT_mp(uint64_t a1, void (**a2)(void (**a1)(void)))
{
  return _dispatch_source_set_handler(a1, a2, 1, 1);
}

unint64_t *dispatch_source_set_mandatory_cancel_handler_VARIANT_mp(uint64_t a1, void (**a2)(void (**a1)(void)))
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v2 = (unsigned int *)(a1 + 80);
  while (1)
  {
    v3 = __ldxr(v2);
    v4 = v3 & 0xFBBFFFFF | 0x4000000;
    if (v4 == v3)
      break;
    if (!__stxr(v4, v2))
      return _dispatch_source_set_handler(a1, a2, 1, 1);
  }
  __clrex();
  return _dispatch_source_set_handler(a1, a2, 1, 1);
}

unint64_t *dispatch_source_set_cancel_handler_f_VARIANT_mp(uint64_t a1, void (**a2)(void (**a1)(void)))
{
  return _dispatch_source_set_handler(a1, a2, 1, 0);
}

unint64_t *dispatch_source_set_mandatory_cancel_handler_f_VARIANT_mp(uint64_t a1, void (**a2)(void (**a1)(void)))
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v2 = (unsigned int *)(a1 + 80);
  while (1)
  {
    v3 = __ldxr(v2);
    v4 = v3 & 0xFBBFFFFF | 0x4000000;
    if (v4 == v3)
      break;
    if (!__stxr(v4, v2))
      return _dispatch_source_set_handler(a1, a2, 1, 0);
  }
  __clrex();
  return _dispatch_source_set_handler(a1, a2, 1, 0);
}

unint64_t *dispatch_source_set_registration_handler_VARIANT_mp(uint64_t a1, void (**a2)(void (**a1)(void)))
{
  return _dispatch_source_set_handler(a1, a2, 2, 1);
}

unint64_t *dispatch_source_set_registration_handler_f_VARIANT_mp(uint64_t a1, void (**a2)(void (**a1)(void)))
{
  return _dispatch_source_set_handler(a1, a2, 2, 0);
}

BOOL _dispatch_source_will_reenable_kevent_4NW_VARIANT_mp(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 56);
  if (((v1 ^ *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24)) & 0xFFFFFFFC) != 0)
    _dispatch_source_will_reenable_kevent_4NW_VARIANT_mp_cold_1();
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16);
  return (v2 & 3) == 0 && v2 != 0;
}

unsigned int *_dispatch_source_activate_VARIANT_mp(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int *result;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  _QWORD *v16;

  v3 = *(_QWORD *)(a1 + 88);
  v16 = 0;
  if ((*(_DWORD *)(a1 + 80) & 0x10000000) != 0)
  {
    *(_WORD *)(a1 + 116) |= 1u;
    return _dispatch_source_refs_finalize_unregistration((unsigned int *)a1, a2);
  }
  v4 = *(uint64_t **)(v3 + 40);
  if (v4)
  {
    v5 = *v4;
    if ((unint64_t)*v4 < 0x1000)
    {
      if ((v5 & 2) == 0)
      {
LABEL_10:
        v8 = v4[1];
        if ((v8 & 0x10000000) != 0 || (v9 = *(_DWORD *)(a1 + 84), (v9 & 0x20000000) != 0) || (v9 & 0x44000FFF) == 0)
        {
          v10 = (__clz(__rbit32((v8 >> 8) & 0x3FFF)) << 8) + 256;
          if (((v8 >> 8) & 0x3FFF) == 0)
            v10 = 0;
          *(_DWORD *)(a1 + 84) = v10 & 0xFFFFFF00 | v4[1];
        }
        if ((*(_BYTE *)v4 & 0x40) != 0)
          v4[5] = *(_QWORD *)(a1 + 32);
        goto LABEL_18;
      }
    }
    else if ((*(_QWORD *)(v5 + 40) & 0xF0) != 0x10 || (v4[10] & 0x80000) == 0)
    {
      goto LABEL_10;
    }
    v6 = (unsigned int *)(a1 + 80);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 | 0x80000, v6));
    goto LABEL_10;
  }
  _dispatch_bug_deprecated("dispatch source activated with no event handler set");
LABEL_18:
  result = (unsigned int *)_dispatch_lane_activate_VARIANT_mp(a1);
  if ((*(_BYTE *)(v3 + 29) & 3) != 0 && (*(_WORD *)(a1 + 116) & 1) == 0)
  {
    result = (unsigned int *)_dispatch_queue_compute_priority_and_wlh_VARIANT_mp(a1, (uint64_t *)&v16);
    if ((_DWORD)result)
    {
      v12 = result;
      v13 = (uint64_t)v16;
      if (v16 != (_QWORD *)-4
        && v16
        && *(_BYTE *)(*v16 + 40) == 18
        && *(unsigned __int8 *)(v3 + 28) == 236
        && *(_DWORD *)(v3 + 24) <= 5u)
      {
        if (!v16[6])
        {
          *(_QWORD *)(v13 + 48) = _dispatch_calloc(6uLL, 0x20uLL);
          v13 = (uint64_t)v16;
        }
        *(_BYTE *)(v3 + 29) |= 1u;
        if (v13 != -4 && v13)
        {
          v14 = (unsigned int *)(v13 + 96);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
          if ((v15 & 0x80000000) != 0)
            dispatch_set_target_queue_VARIANT_mp_cold_2();
        }
        *(_QWORD *)(v3 + 16) = v13;
      }
      return (unsigned int *)_dispatch_source_install(a1, v13, v12);
    }
  }
  return result;
}

unsigned int *_dispatch_source_refs_finalize_unregistration(unsigned int *a1, const char *a2)
{
  unsigned int *result;
  uint64_t v4;
  unsigned int v5;

  result = a1 + 20;
  do
  {
    v4 = __ldxr(result);
    v5 = v4 & 0x1FFFFFFF | 0x80000000;
    if (v5 == (_DWORD)v4)
    {
      __clrex();
      if ((v4 & 0x80000000) == 0)
        goto LABEL_5;
LABEL_9:
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Source finalized twice";
      qword_1EDF52D38 = v4;
      __break(1u);
      return result;
    }
  }
  while (__stxr(v5, result));
  if ((v4 & 0x80000000) != 0)
    goto LABEL_9;
LABEL_5:
  if ((v4 & 0x20000000) != 0)
    _dispatch_wake_by_address_VARIANT_mp();
  return (unsigned int *)_os_object_release_internal_VARIANT_mp(a1, a2);
}

uint64_t _dispatch_source_install(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t result;
  const char *v6;

  v4 = *(_QWORD *)(a1 + 88);
  *(_WORD *)(a1 + 116) |= 1u;
  result = _dispatch_unote_register_VARIANT_mp(v4, a2, a3);
  if ((result & 1) == 0)
    return (uint64_t)_dispatch_source_refs_finalize_unregistration((unsigned int *)a1, v6);
  return result;
}

void _dispatch_source_invoke_VARIANT_mp(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v27;
  unsigned int v28;
  __objc2_class **v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  __objc2_class **v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  const char *v45;
  unsigned int v46;
  int v47;
  int v48;
  _BOOL4 v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  __uint64_t *v68;
  unint64_t v69;
  unsigned int v70;
  __uint64_t v71;
  __int16 v72;
  BOOL v73;
  __uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unint64_t v85;
  unint64_t StatusReg;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  unsigned int v111;
  void *contexta;
  unint64_t *context;
  __objc2_class **v114;
  _BOOL4 v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;

  v4 = a2;
  v122 = 0;
  if ((a3 & 3) == 0)
    *(_QWORD *)(a1 + 16) = -1985229329;
  v118 = a2;
  if ((a3 & 2) != 0)
  {
    v122 = 0x40020000000001;
    v6 = a3 & 0x40000;
    goto LABEL_5;
  }
  v85 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) - 0x20000000000;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v87 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
  v6 = a3 & 0x40000;
  v88 = 0xFFE00000FFFFFFFCLL;
  if ((a3 & 0x40000) != 0)
  {
    v89 = 0x4000000000;
  }
  else
  {
    v88 = 0xFFE00040FFFFFFFCLL;
    v89 = 1;
  }
  if ((a3 & 1) != 0)
    v90 = 0xFFE00040FFFFFFFCLL;
  else
    v90 = v88;
  v91 = *(_DWORD *)(StatusReg + 200);
  v92 = (v91 >> 8) & 0xF;
  v93 = (unsigned __int16)v91 >> 12;
  v94 = HIWORD(v91) & 0xF;
  if (v92 <= v93)
    v92 = v93;
  if (v92 > v94)
    v94 = v92;
  v95 = (unint64_t *)(a1 + 56);
  a2 = 256;
  do
  {
    while (1)
    {
      v96 = __ldaxr(v95);
      if ((v96 & v90) != 0)
        break;
      if ((v96 & 0x1000000000) == 0 || (v97 = HIDWORD(v96) & 7, v97 <= v94))
      {
        v98 = (v96 >> 40) & 1;
        if (!((v85 + v96) >> 53))
          LODWORD(v98) = 1;
        if ((_DWORD)v98)
          v99 = 0x60000000000000;
        else
          v99 = 0x20000000000000;
        v100 = v87 | v96 & 0x7700000001 | v99;
        goto LABEL_227;
      }
      __clrex();
      v120 = v85;
      _pthread_workqueue_override_start_direct();
      a2 = 256;
      v85 = v120;
      v101 = *(_DWORD *)(StatusReg + 200);
      v94 = v97;
      if ((HIWORD(v101) & 0xF) < v97)
      {
        *(_QWORD *)(StatusReg + 200) = v101 & 0xFFF0FFFF | ((_DWORD)v97 << 16);
        v94 = v97;
      }
    }
    if ((a3 & 1) != 0)
    {
      __clrex();
LABEL_247:
      v122 = 0;
LABEL_237:
      _os_object_release_internal_n_VARIANT_mp((void *)a1, (const char *)2);
      if ((a3 & 0x100000) != 0)
        goto LABEL_238;
      return;
    }
    v100 = v96 ^ v89;
    a2 = 256;
LABEL_227:
    ;
  }
  while (__stxr(v100, v95));
  if ((v96 & v90) != 0)
    goto LABEL_247;
  v102 = 0x60000000000000;
  if ((a3 & 1) == 0)
    v102 = v89 | 0x60000000000000;
  v122 = (v100 & v102) - (v96 & 0x3FFE0000000000);
  v4 = v118;
  if (!v122)
    goto LABEL_237;
LABEL_5:
  if (v6)
  {
    v117 = 0;
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 84);
    v8 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v9 = *(_QWORD *)(v8 + 200);
    if ((_DWORD)v9)
    {
      v10 = v7 & 0xFFF;
      if ((v7 & 0xFFF) != 0)
      {
        if (((unsigned __int16)v9 & 0xFFFu) > v10)
          v10 = v9 & 0xFFF;
        if ((unsigned __int16)v7 >> 12 <= v10 >> 8)
          v11 = 0x40000000;
        else
          v11 = 1140912128;
        v12 = v9 & 0x880F0000 | v10 | v11 & v7;
      }
      else
      {
        v13 = v9 | 0x40000000;
        if ((v9 & 0xFFF) == 0)
          v13 = *(_QWORD *)(v8 + 200);
        v14 = (unsigned __int16)v7 >> 12;
        v12 = v13 & 0xFFFF0FFF | v7 & 0x400F000;
        if (v14 <= ((v13 >> 8) & 0xF))
          v12 = v13;
      }
    }
    else
    {
      v12 = v7 & 0xFFF0FFFF;
    }
    *(_QWORD *)(v8 + 200) = v12;
    v117 = v9 & 0xFFF0FFFF;
  }
  if ((a3 & 0x100000) != 0 && (*(_DWORD *)(a1 + 80) & 0x400000) != 0)
  {
    v104 = (unsigned int *)(a1 + 80);
    do
      v105 = __ldxr(v104);
    while (__stxr(v105 & 0xFFBFFFFF, v104));
  }
  if (((*(_DWORD *)(a1 + 80) << 8) & 0x3000000) != 0)
    v15 = (*(_DWORD *)(a1 + 80) << 8) & 0x3000000 | a3 & 0xFCFFFFF7 | 8;
  else
    v15 = a3 | 8;
  v16 = v15 & 0x1000002;
  v17 = (_QWORD *)(a1 + 56);
  v18 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v119 = (unint64_t *)(a1 + 56);
  while (2)
  {
    while (2)
    {
      if (v16 == 2)
        _dispatch_last_resort_autorelease_pool_push(v4);
      v19 = (unint64_t *)(v18 + 160);
      v20 = *(_QWORD *)(v18 + 160);
      v21 = *(_QWORD *)(a1 + 88);
      if ((v15 & 0x40000) == 0)
      {
        v22 = *(_QWORD *)(v18 + 232);
        v23 = v22 ? *(_QWORD *)(v22 + 24) : -4;
        v24 = *(_QWORD *)(v21 + 16) & 0xFFFFFFFFFFFFFFFCLL;
        v25 = v24 == -4 || v24 == 0;
        if (!v25 && v23 != v24)
          _dispatch_source_handle_wlh_change(a1);
      }
      if (*(_QWORD *)(a1 + 48))
      {
        v27 = _dispatch_lane_serial_drain_VARIANT_mp(a1, v4, v15 | 0x4000000, &v122);
        v28 = v15 & 0xFBFFFFFF;
      }
      else
      {
        v27 = 0;
        v28 = v15;
      }
      v29 = &_dispatch_mgr_q;
      if ((*(_BYTE *)(v21 + 29) & 1) != 0)
        v29 = *(__objc2_class ***)(a1 + 24);
      if ((*(_WORD *)(a1 + 116) & 1) == 0)
      {
        if ((__objc2_class **)v20 != v29)
          goto LABEL_47;
        v30 = v20;
        if ((v28 & 0x10000) != 0)
        {
          v31 = v18;
          v32 = *(_DWORD *)(v18 + 200);
        }
        else
        {
          v32 = 0x2000000;
          v31 = v18;
        }
        v33 = v29;
        v34 = *(_QWORD *)(v31 + 232);
        v35 = v28;
        if (v34)
          v36 = *(_QWORD *)(v34 + 24);
        else
          v36 = -4;
        _dispatch_source_install(a1, v36, v32);
        v28 = v35;
        v29 = v33;
        v20 = v30;
        v19 = (unint64_t *)(v18 + 160);
      }
      if (*v17 >> 55)
        goto LABEL_146;
      if ((*(_BYTE *)(v21 + 29) & 2) != 0 && *(_QWORD *)(v21 + 104) && (*(_DWORD *)(a1 + 80) & 0x10800000) == 0)
      {
        if ((__objc2_class **)v20 == v29)
        {
          v42 = v28;
          _dispatch_timer_unote_configure_VARIANT_mp(*(_QWORD *)(a1 + 88));
          v28 = v42;
          goto LABEL_58;
        }
        goto LABEL_47;
      }
LABEL_58:
      if (!*(_QWORD *)(v21 + 56))
        goto LABEL_72;
      v37 = v20;
      v38 = v27;
      v27 = *(_QWORD *)(a1 + 24);
      if (v37 != v27)
        goto LABEL_103;
      v39 = (unint64_t *)(*(_QWORD *)(a1 + 88) + 56);
      do
        v40 = __ldxr(v39);
      while (__stxr(0, v39));
      if ((*(_DWORD *)(a1 + 80) & 0x10800000) != 0)
      {
        v114 = v29;
        v41 = v28;
        if ((v28 & 0x1000000) != 0)
        {
          contexta = (void *)MEMORY[0x18D766D94]();
          _dispatch_source_handler_dispose(v40, v45);
          objc_autoreleasePoolPop(contexta);
        }
        else
        {
          _dispatch_source_handler_dispose(v40, (const char *)a2);
        }
        v27 = v38;
        v20 = v37;
        v28 = v41;
        v29 = v114;
      }
      else
      {
        if ((*(_BYTE *)v40 & 0x40) != 0)
          *(_QWORD *)(v40 + 40) = *(_QWORD *)(a1 + 32);
        v43 = v40;
        v44 = v28;
        _dispatch_continuation_pop_VARIANT_mp(v43, 0, v28, v37);
        v28 = v44;
        v27 = v38;
        v20 = v37;
      }
LABEL_72:
      if ((*(_QWORD *)(v21 + 16) & 2) != 0)
      {
        v46 = v28;
        _dispatch_source_refs_unregister(a1, 5);
        v28 = v46;
      }
      v47 = *(_DWORD *)(a1 + 80);
      v48 = v47 & 0x10800000;
      if ((v47 & 0x10800000) != 0)
      {
        v49 = 0;
        if ((v47 & 0x80000000) == 0)
          goto LABEL_76;
        goto LABEL_85;
      }
      if (*(_QWORD *)(v21 + 72))
      {
        v116 = v27;
        v27 = *(_QWORD *)(a1 + 24);
        if (v20 != v27)
          goto LABEL_103;
        v52 = *(_QWORD *)(a1 + 88);
        context = (unint64_t *)(v52 + 40);
        v53 = *(_QWORD **)(v52 + 40);
        v54 = (unint64_t *)(v52 + 72);
        do
          v55 = __ldxr(v54);
        while (__stxr(0, v54));
        v56 = *(unsigned __int8 *)(*(_QWORD *)v52 + 9);
        v111 = v28;
        if (v56 == 3)
        {
          v57 = ~v55;
          goto LABEL_158;
        }
        if (v56 == 5)
        {
          if ((v55 & 1) != 0)
          {
            v57 = v55 >> 1;
            v67 = *(_QWORD *)(a1 + 88);
            v69 = *(_QWORD *)(v67 + 80);
            v68 = (__uint64_t *)(v67 + 80);
            if (v69 <= 0x7FFFFFFFFFFFFFFELL)
            {
              v70 = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 24) / 3u;
              v108 = v52;
              v109 = v53;
              v106 = *(_QWORD *)(a1 + 88);
              v107 = v55 >> 1;
              if (v70 == 2)
                v71 = clock_gettime_nsec_np(_CLOCK_REALTIME);
              else
                v71 = v70 == 1 ? mach_continuous_time() : mach_absolute_time();
              v73 = v71 >= *v68;
              v74 = v71 - *v68;
              v28 = v111;
              v52 = v108;
              v53 = v109;
              v57 = v55 >> 1;
              if (v73)
              {
                a2 = 0;
                v75 = *(_QWORD *)(v106 + 96);
                v76 = v74 / v75;
                if ((uint64_t)(v76 + 1 + v107) >= 0)
                  v77 = v76 + 1;
                else
                  v77 = v107 ^ 0x7FFFFFFFFFFFFFFFLL;
                if (v75 > 0x7FFFFFFFFFFFFFFELL)
                {
                  *v68 = -1;
                  v68[1] = -1;
                }
                else
                {
                  v78 = v77 * v75;
                  *v68 += v78;
                  *(_QWORD *)(v106 + 88) += v78;
                }
                v57 = v77 + v107;
              }
            }
          }
          else
          {
            v57 = v55 >> 1;
          }
LABEL_158:
          *(_QWORD *)(v52 + 64) = v57;
          if (v53)
          {
            if (v55)
            {
              v79 = v52;
              if (*(unsigned __int8 *)(v52 + 28) == 242)
              {
                v110 = v53;
                _dispatch_continuation_get_function_symbol(v53);
                v28 = v111;
                v53 = v110;
                if (MEMORY[0xFFFFFC100])
                {
                  kdebug_trace();
                  v53 = v110;
                  v28 = v111;
                }
              }
              _dispatch_continuation_pop_VARIANT_mp((uint64_t)v53, 0, v28, v20);
              if (*(unsigned __int8 *)(v79 + 28) == 242 && MEMORY[0xFFFFFC100])
                kdebug_trace();
              v28 = v111;
              if ((*(_BYTE *)(v79 + 29) & 2) != 0)
              {
                if ((v55 & 1) != 0 && *(_QWORD *)(v79 + 104))
                {
                  _dispatch_timer_unote_configure_VARIANT_mp(*(_QWORD *)(a1 + 88));
                  v28 = v111;
                }
                if ((*(_BYTE *)(v79 + 30) & 0x40) != 0)
                {
                  if ((v28 & 0x1000000) != 0)
                    v80 = (void *)MEMORY[0x18D766D94]();
                  else
                    v80 = 0;
                  do
                    v81 = __ldxr(context);
                  while (__stxr(0, context));
                  if (v81)
                    _dispatch_source_handler_dispose(v81, (const char *)a2);
                  if (v80)
                    objc_autoreleasePoolPop(v80);
                  dispatch_release_VARIANT_mp((unsigned int *)a1, (const char *)a2);
                  v28 = v111;
                }
              }
              goto LABEL_176;
            }
LABEL_137:
            v66 = v28;
            _dispatch_bug(586, 0);
LABEL_138:
            v28 = v66;
            goto LABEL_176;
          }
LABEL_192:
          if (!MEMORY[0xFFFFFC100])
            goto LABEL_176;
          v66 = v28;
          kdebug_trace();
          goto LABEL_138;
        }
        v57 = v55;
        if (v55)
          goto LABEL_158;
        if (*(unsigned __int8 *)(v52 + 28) != 233)
        {
          *(_QWORD *)(v52 + 64) = 0;
          if (v53)
            goto LABEL_137;
          goto LABEL_192;
        }
LABEL_176:
        v47 = *(_DWORD *)(a1 + 80);
        if ((v47 & 0x90000000) != 0)
        {
          v49 = 0;
          v27 = v116;
        }
        else
        {
          v27 = v116;
          if (*(_QWORD *)(v20 + 24))
            v49 = 1;
          else
            v49 = *(_DWORD *)(v20 + 84) >= 0;
        }
        *(_WORD *)(a1 + 116) |= 2u;
        v48 = v47 & 0x10800000;
        if (v47 < 0)
          goto LABEL_85;
LABEL_76:
        if (v48)
        {
          if ((*(_BYTE *)(v21 + 29) & 2) != 0 && (*(_QWORD *)(v21 + 16) & 1) == 0 || (__objc2_class **)v20 == v29)
          {
            v115 = v49;
            v50 = v28;
            if ((v47 & 0x40000000) != 0)
              v51 = 1;
            else
              v51 = 3;
            _dispatch_source_refs_unregister(a1, v51);
            v47 = *(_DWORD *)(a1 + 80);
            if (v47 < 0)
            {
              v48 = v47 & 0x10800000;
              v28 = v50;
              v49 = v115;
              goto LABEL_85;
            }
            if (!v27)
              v27 = -1;
            goto LABEL_103;
          }
LABEL_47:
          v27 = (unint64_t)v29;
          goto LABEL_103;
        }
LABEL_85:
        if (v47 < 0 && v48)
        {
          if (v20 != *(_QWORD *)(a1 + 24) && (*(_QWORD *)(v21 + 40) || *(_QWORD *)(v21 + 48) || *(_QWORD *)(v21 + 56)))
          {
            v49 = 0;
            v27 = *(_QWORD *)(a1 + 24);
          }
          else
          {
            _dispatch_source_cancel_callout(a1, (const char *)v20, v28);
            v49 = 0;
            v47 = *(_DWORD *)(a1 + 80);
          }
        }
      }
      else
      {
        v49 = 0;
      }
      if ((v47 & 0x10800000) != 0)
        goto LABEL_103;
      if ((*(_BYTE *)(v21 + 29) & 2) != 0)
      {
        if (!*(_QWORD *)(v21 + 104))
        {
          v65 = *(_QWORD *)(v21 + 16);
          if (!v65 || (v65 & 3) != 0 || *(_QWORD *)(v21 + 80) > 0x7FFFFFFFFFFFFFFEuLL)
            goto LABEL_103;
        }
      }
      else
      {
        v61 = *(_QWORD *)(v21 + 16);
        if (!v61 || (v61 & 3) != 0)
          goto LABEL_103;
      }
      v62 = v27;
      v27 = (unint64_t)v29;
      if ((__objc2_class **)v20 != v29)
        goto LABEL_103;
      if (*v119 >> 55)
        goto LABEL_146;
      v27 = v62;
      if ((*(_BYTE *)(v21 + 29) & 1) == 0 || (~*(_QWORD *)(v21 + 16) & 0xFFFFFFFFFFFFFFFCLL) != 0)
      {
        _dispatch_unote_resume_VARIANT_mp(v21);
        if (!v49)
        {
          if (*(_QWORD *)(v18 + 40))
          {
            v63 = *(_QWORD *)(v18 + 232);
            if (v63)
            {
              v64 = *(_QWORD *)(v63 + 24);
              if (v64 != -4 && v64 == (*(_QWORD *)(v21 + 16) & 0xFFFFFFFFFFFFFFFCLL))
                _dispatch_event_loop_drain_VARIANT_mp(1);
            }
          }
        }
        goto LABEL_103;
      }
      v72 = *(_WORD *)(a1 + 116);
      if ((v72 & 2) != 0)
      {
        *(_WORD *)(a1 + 116) = v72 & 0xFFFD;
        _dispatch_unote_resume_VARIANT_mp(v21);
      }
      if (v49)
LABEL_146:
        v27 = *(_QWORD *)(a1 + 24);
LABEL_103:
      v16 = v15 & 0x1000002;
      v4 = v118;
      if ((v15 & 0x1000002) == 2)
      {
        v121 = *(_OWORD *)v19;
        *(_QWORD *)(v18 + 160) = a1;
        *(_QWORD *)(v18 + 168) = &v121;
        _dispatch_last_resort_autorelease_pool_pop(v118);
        *(_OWORD *)v19 = v121;
      }
      if (v27 + 1 > 1)
        goto LABEL_202;
      v58 = v122;
      v17 = (_QWORD *)(a1 + 56);
      while (2)
      {
        v59 = __ldxr(v119);
        v60 = (v59 - v58) & 0xFFFFFFF700000001;
        if (v59 >> 55)
        {
LABEL_111:
          if (!__stlxr(v60, v119))
          {
            if ((~v59 & 0x1800000000) == 0)
            {
              v83 = HIDWORD(v59) & 7;
              v84 = *(_DWORD *)(v18 + 200);
              if ((HIWORD(v84) & 0xF) < v83)
                *(_QWORD *)(v18 + 200) = v84 & 0xFFF0FFFF | ((_DWORD)v83 << 16);
            }
            v27 = 0;
            v122 = 0;
            goto LABEL_202;
          }
          continue;
        }
        break;
      }
      if ((v59 & 0x8000000000) == 0)
      {
        if (v27)
          v60 = (v59 - v58) & 0xFFFFFF7700000001 | 0x8000000000;
        else
          v60 = (v59 - v58) & 0xFFFFFFF000000001;
        goto LABEL_111;
      }
      __clrex();
      do
        v82 = __ldaxr(v119);
      while (__stxr(v82 ^ 0x8000000000, v119));
      if ((a3 & 1) != 0)
        continue;
      break;
    }
    v27 = *v19;
    if ((*(_QWORD *)(*(_QWORD *)*v19 + 40) & 0x10000) != 0)
      continue;
    break;
  }
LABEL_202:
  if ((v15 & 0x40000) == 0)
    *(_QWORD *)(v18 + 200) = *(_QWORD *)(v18 + 200) & 0xF0000 | v117;
  if (!v27)
    goto LABEL_237;
  _dispatch_queue_invoke_finish_VARIANT_mp((unint64_t *)a1, v118, (__objc2_class **)v27, v122);
  if ((a3 & 0x100000) == 0)
    return;
LABEL_238:
  v103 = *(_QWORD *)(*(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 216) + 48);
  if (v103)
  {
    if (*(_BYTE *)(v103 + 6))
      _dispatch_event_loop_drain_timers_VARIANT_mp(v103, 6u);
  }
}

void _dispatch_source_wakeup_VARIANT_mp(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_DWORD *)(a1 + 80);
  v5 = *(_BYTE *)(v3 + 29);
  if ((*(_WORD *)(a1 + 116) & 1) == 0)
    goto LABEL_2;
  if ((v4 & 0x10800000) != 0)
  {
    if (*(_QWORD *)(v3 + 56) | *(_QWORD *)(v3 + 16) & 2)
    {
LABEL_27:
      if (*(__objc2_class ***)(a1 + 24) == &_dispatch_mgr_q)
        v6 = (uint64_t)&_dispatch_mgr_q;
      else
        v6 = 1;
      goto LABEL_4;
    }
    if (v4 < 0)
    {
      if (*(_QWORD *)(v3 + 40) || *(_QWORD *)(v3 + 48) || *(_QWORD *)(v3 + 56))
        goto LABEL_27;
      goto LABEL_12;
    }
    if ((*(_BYTE *)(v3 + 29) & 2) != 0 && (*(_QWORD *)(v3 + 16) & 1) == 0)
      goto LABEL_27;
    if ((a3 & 0x10) == 0 && (v4 & 0x40000000) != 0)
    {
LABEL_12:
      if (!*(_QWORD *)(a1 + 48))
      {
        v6 = 0;
        goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else
  {
    if ((*(_BYTE *)(v3 + 29) & 2) != 0 && *(_QWORD *)(v3 + 104))
      goto LABEL_2;
    if (*(_QWORD *)(v3 + 56) | *(_QWORD *)(v3 + 16) & 2 || *(_QWORD *)(v3 + 72))
      goto LABEL_27;
    if ((*(_BYTE *)(v3 + 29) & 2) != 0)
    {
      if (*(_QWORD *)(v3 + 104))
        goto LABEL_2;
      v9 = *(_QWORD *)(v3 + 16);
      if (v9)
      {
        if ((v9 & 3) == 0 && *(_QWORD *)(v3 + 80) < 0x7FFFFFFFFFFFFFFFuLL)
          goto LABEL_2;
      }
      goto LABEL_12;
    }
    v7 = *(_QWORD *)(v3 + 16);
    if (v7)
      v8 = (v7 & 3) == 0;
    else
      v8 = 0;
    if (!v8)
      goto LABEL_12;
  }
LABEL_2:
  if ((v5 & 1) != 0)
    goto LABEL_27;
  v6 = (uint64_t)&_dispatch_mgr_q;
  if (&_dispatch_mgr_q == (__objc2_class **)1)
    goto LABEL_27;
LABEL_4:
  _dispatch_queue_wakeup_VARIANT_mp(a1, a2, a3, v6);
}

void *dispatch_source_cancel_VARIANT_mp(unsigned int *a1)
{
  unsigned int *v1;
  int v2;
  unsigned int *v3;
  unsigned int v4;

  if (a1[2] != 0x7FFFFFFF)
  {
    v1 = a1 + 2;
    do
      v2 = __ldxr(v1);
    while (__stxr(v2 + 2, v1));
    if (v2 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v3 = a1 + 20;
  do
    v4 = __ldxr(v3);
  while (__stxr(v4 | 0x10000000, v3));
  if ((v4 & 0x10000000) != 0)
    return _os_object_release_internal_n_VARIANT_mp(a1, (const char *)2);
  else
    return (void *)(*(uint64_t (**)(unsigned int *, _QWORD, uint64_t))(*(_QWORD *)a1 + 80))(a1, 0, 3);
}

void dispatch_source_cancel_and_wait_VARIANT_mp(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t StatusReg;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;

  v2 = a1[11];
  if (*(_QWORD *)(v2 + 48))
    dispatch_source_cancel_and_wait_VARIANT_mp_cold_4((uint64_t)a1);
  v3 = (unsigned int *)(a1 + 10);
  while (1)
  {
    v4 = __ldxr(v3);
    v5 = v4 | 0x10000000;
    if ((v4 & 0x20000000) != 0)
      break;
    if ((v4 & 0x80000000) == 0 && ((v4 & 0x40000000) != 0 || (*(_BYTE *)(v2 + 29) & 3) != 1))
      v5 = v4 | 0x30000000;
    if (!__stxr(v5, v3))
    {
      if ((v4 & 0x800000) == 0)
        goto LABEL_10;
LABEL_27:
      dispatch_source_cancel_and_wait_VARIANT_mp_cold_3((uint64_t)a1);
    }
  }
  __clrex();
  if ((v4 & 0x800000) != 0)
    goto LABEL_27;
LABEL_10:
  if ((v4 & 0x80000000) != 0)
    return;
  if ((v5 & 0x20000000) != 0)
    goto LABEL_31;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
  v8 = a1 + 7;
  while (1)
  {
    v9 = __ldaxr(v8);
    if ((v9 & 0xFFE00000FFFFFFFCLL) != 0)
      break;
    v10 = v7 | v9 & 0x7700000001 | 0x60000000000000;
LABEL_15:
    if (!__stlxr(v10, v8))
    {
      if (v9 >> 55)
        goto LABEL_37;
      if ((v9 & 0xFFE00000FFFFFFFCLL) == 0)
      {
        if ((*v3 & 0x80000000) == 0)
          _dispatch_source_refs_unregister((uint64_t)a1, 3);
        if ((*v3 & 0x80000000) != 0)
          _dispatch_source_cancel_callout((uint64_t)a1, 0, 0);
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(*a1 + 80))(a1, 0, 20);
LABEL_35:
        v15 = *v3;
        if ((*v3 & 0x80000000) != 0)
          return;
        while (1)
        {
          if ((v15 & 0x20000000) != 0)
          {
            v16 = v15;
          }
          else
          {
            v16 = v15 | 0x20000000;
            while (1)
            {
              v17 = __ldxr(v3);
              if (v17 != v15)
                break;
              if (!__stxr(v16, v3))
              {
                v18 = 1;
                goto LABEL_45;
              }
            }
            v18 = 0;
            __clrex();
LABEL_45:
            if (!v18)
              goto LABEL_50;
          }
          _dispatch_wait_on_address_VARIANT_mp((uint64_t)(a1 + 10), v16, -1);
          v17 = *v3;
LABEL_50:
          v15 = v17;
          if ((v17 & 0x80000000) != 0)
            return;
        }
      }
LABEL_30:
      if (((v9 ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) == 0)
        dispatch_source_cancel_and_wait_VARIANT_mp_cold_2((uint64_t)a1);
LABEL_31:
      v12 = (*(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) >> 8) & 0x3FFF;
      v11 = v12 == 0;
      v13 = __clz(__rbit32(v12));
      if (v11)
        v14 = 0;
      else
        v14 = v13 + 1;
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 80))(a1, v14, 2);
      dispatch_activate_VARIANT_mp((uint64_t)a1);
      goto LABEL_35;
    }
  }
  if ((v4 & 0x10000000) == 0)
  {
    v10 = v9 | 0x8000000000;
    goto LABEL_15;
  }
  __clrex();
  if (!(v9 >> 55))
    goto LABEL_30;
LABEL_37:
  if (v9 >> 58)
    dispatch_source_cancel_and_wait_VARIANT_mp_cold_1((uint64_t)a1);
  dispatch_activate_VARIANT_mp((uint64_t)a1);
}

unsigned int *_dispatch_source_refs_unregister(uint64_t a1, char a2)
{
  unsigned int *result;
  const char *v4;
  unsigned int *v5;
  unsigned int v6;

  result = (unsigned int *)_dispatch_unote_unregister_VARIANT_mp(*(_QWORD *)(a1 + 88), a2);
  if ((_DWORD)result)
    return _dispatch_source_refs_finalize_unregistration((unsigned int *)a1, v4);
  v5 = (unsigned int *)(a1 + 80);
  while (1)
  {
    v6 = __ldxr(v5);
    if ((v6 & 0xC0000000) != 0)
      break;
    if (!__stxr(v6 | 0x40000000, v5))
      return result;
  }
  __clrex();
  return result;
}

void _dispatch_source_cancel_callout(uint64_t a1, const char *a2, int a3)
{
  unint64_t *v6;
  void *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;

  v6 = *(unint64_t **)(a1 + 88);
  if ((a3 & 0x1000000) != 0)
    v7 = (void *)MEMORY[0x18D766D94]();
  else
    v7 = 0;
  v8 = v6 + 6;
  do
    v9 = __ldxr(v8);
  while (__stxr(0, v8));
  v10 = v6 + 5;
  v6[8] = 0;
  v6[9] = 0;
  do
    v11 = __ldxr(v10);
  while (__stxr(0, v10));
  if (v11)
    _dispatch_source_handler_dispose(v11, a2);
  v12 = v6 + 7;
  do
    v13 = __ldxr(v12);
  while (__stxr(0, v12));
  if (v13)
    _dispatch_source_handler_dispose(v13, a2);
  if (!v9)
  {
LABEL_17:
    if (!v7)
      return;
    goto LABEL_18;
  }
  if ((*(_DWORD *)(a1 + 80) & 0x10000000) == 0)
  {
    _dispatch_source_handler_dispose(v9, a2);
    goto LABEL_17;
  }
  if ((*(_BYTE *)v9 & 0x40) != 0)
    *(_QWORD *)(v9 + 40) = *(_QWORD *)(a1 + 32);
  _dispatch_continuation_pop_VARIANT_mp(v9, 0, a3 & 0xFEFFFFFF, (uint64_t)a2);
  if (v7)
LABEL_18:
    objc_autoreleasePoolPop(v7);
}

uint64_t _dispatch_source_merge_evt_VARIANT_mp(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4)
{
  __int16 v5;
  _DWORD *v7;
  unsigned int v8;
  uint64_t v9;

  v5 = (__int16)a2;
  v7 = (_DWORD *)~*(_QWORD *)(a1 + 8);
  if (((unsigned __int16)a2 & 0x100) == 0 && !*(_QWORD *)(a1 + 16) && (*(_BYTE *)(a1 + 29) & 2) == 0)
    _dispatch_source_refs_finalize_unregistration((unsigned int *)~*(_QWORD *)(a1 + 8), a2);
  if ((v5 & 0x200) != 0)
  {
    if ((v7[20] & 0x4000000) != 0)
      _dispatch_source_merge_evt_VARIANT_mp_cold_1(a1);
    _dispatch_bug_kevent_vanished(a1);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v8 = __clz(__rbit32((a4 >> 8) & 0x3FFF));
  if (((a4 >> 8) & 0x3FFF) != 0)
    v9 = v8 + 1;
  else
    v9 = 0;
  return (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)v7 + 80))(v7, v9, 51);
}

void dispatch_after_f_VARIANT_mp(int64_t a1, __objc2_class **a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t StatusReg;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t VARIANT_mp;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  int v21;
  int v22;
  char v23;
  uint64_t v24;

  if (a1 != -1)
  {
    v7 = a1;
    v8 = _dispatch_timeout(a1);
    if (!v8)
    {
      dispatch_async_f_VARIANT_mp(a2, a3, a4);
      return;
    }
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v10 = __clz(__rbit32((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF));
    if (((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF) != 0)
      v11 = v10 + 1;
    else
      v11 = 0;
    if (v11 > 5)
      v12 = 20;
    else
      v12 = qword_18A06E738[v11];
    v13 = v8 / v12;
    if (v13 <= 0xF4240)
      v13 = 1000000;
    if (v13 >= 0xDF8475800)
      v14 = 60000000000;
    else
      v14 = v13;
    VARIANT_mp = dispatch_source_create_VARIANT_mp((uint64_t)&_dispatch_source_type_after_VARIANT_mp, 0, 0, a2);
    v16 = *(_QWORD *)(VARIANT_mp + 88);
    v17 = *(_QWORD **)(StatusReg + 176);
    if (v17)
      *(_QWORD *)(StatusReg + 176) = v17[2];
    else
      v17 = _dispatch_continuation_alloc_from_heap_VARIANT_mp();
    *v17 = 256;
    v17[4] = a4;
    v17[5] = a3;
    v18 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
    if (v18 >= 0x10FF)
      v18 = 4351;
    v19 = *(_QWORD *)(StatusReg + 224);
    if (!v19)
      goto LABEL_24;
    v20 = (unsigned int *)(v19 + 12);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    if (v21 > 0)
    {
LABEL_24:
      v17[3] = v19;
      if (v18)
      {
        v22 = (*((_DWORD *)a2 + 21) >> 30) & 1;
        if ((*((_DWORD *)a2 + 21) & 0xFFF) == 0)
          v22 = 1;
        if (!v22)
          v18 = 0;
      }
      v17[1] = v18;
      v17[6] = VARIANT_mp;
      *(_QWORD *)(v16 + 40) = v17;
      if ((v7 & 0x8000000000000000) != 0)
      {
        if ((v7 & 0x4000000000000000) != 0)
        {
          if ((unint64_t)-(uint64_t)v7 >> 62)
            v7 = -1;
          else
            v7 = -(uint64_t)v7;
          v23 = 2;
LABEL_37:
          *(_BYTE *)(v16 + 30) |= 4 * v23;
          *(_QWORD *)(v16 + 80) = v7;
          *(_QWORD *)(v16 + 88) = v14 + v7;
          *(_QWORD *)(v16 + 96) = -1;
          dispatch_activate_VARIANT_mp(VARIANT_mp);
          return;
        }
        v7 &= ~0x8000000000000000;
        v23 = 1;
      }
      else
      {
        v23 = 0;
      }
      if (v7 >> 62)
        v7 = -1;
      if (_dispatch_host_time_nano2mach)
      {
        v14 = _dispatch_host_time_nano2mach(v14);
      }
      else
      {
        v24 = (3 * v14 * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
        v14 = (v24 + ((3 * v14 - v24) >> 1)) >> 6;
      }
      goto LABEL_37;
    }
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
}

void dispatch_after_VARIANT_mp(int64_t a1, unsigned int *a2, uint64_t (**a3)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  unint64_t v5;
  unint64_t v6;
  unint64_t StatusReg;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t VARIANT_mp;
  uint64_t v14;
  uint64_t *v15;
  void *v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  int v21;
  int v22;
  char v23;
  uint64_t v24;

  if (a1 != -1)
  {
    v5 = a1;
    v6 = _dispatch_timeout(a1);
    if (!v6)
    {
      dispatch_async_VARIANT_mp(a2, a3);
      return;
    }
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v8 = __clz(__rbit32((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF));
    if (((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF) != 0)
      v9 = v8 + 1;
    else
      v9 = 0;
    if (v9 > 5)
      v10 = 20;
    else
      v10 = qword_18A06E738[v9];
    v11 = v6 / v10;
    if (v11 <= 0xF4240)
      v11 = 1000000;
    if (v11 >= 0xDF8475800)
      v12 = 60000000000;
    else
      v12 = v11;
    VARIANT_mp = dispatch_source_create_VARIANT_mp((uint64_t)&_dispatch_source_type_after_VARIANT_mp, 0, 0, (__objc2_class **)a2);
    v14 = *(_QWORD *)(VARIANT_mp + 88);
    v15 = *(uint64_t **)(StatusReg + 176);
    if (v15)
      *(_QWORD *)(StatusReg + 176) = v15[2];
    else
      v15 = (uint64_t *)_dispatch_continuation_alloc_from_heap_VARIANT_mp();
    v16 = _dispatch_Block_copy(a3);
    v17 = a3[2];
    *v15 = 272;
    if (v17 == ___dispatch_block_create_block_invoke)
    {
      v15[5] = (uint64_t)v16;
      _dispatch_continuation_init_slow_VARIANT_mp(v15, a2, 0);
    }
    else
    {
      v15[4] = (uint64_t)v17;
      v15[5] = (uint64_t)v16;
      v18 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
      if (v18 >= 0x10FF)
        v18 = 4351;
      v19 = *(_QWORD *)(StatusReg + 224);
      if (v19)
      {
        v20 = (unsigned int *)(v19 + 12);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
        if (v21 <= 0)
          dispatch_group_notify_VARIANT_mp_cold_3();
      }
      v15[3] = v19;
      if (v18)
      {
        v22 = (a2[21] >> 30) & 1;
        if ((a2[21] & 0xFFF) == 0)
          v22 = 1;
        if (!v22)
          v18 = 0;
      }
      v15[1] = v18;
    }
    v15[6] = VARIANT_mp;
    *(_QWORD *)(v14 + 40) = v15;
    if ((v5 & 0x8000000000000000) != 0)
    {
      if ((v5 & 0x4000000000000000) != 0)
      {
        if ((unint64_t)-(uint64_t)v5 >> 62)
          v5 = -1;
        else
          v5 = -(uint64_t)v5;
        v23 = 2;
LABEL_39:
        *(_BYTE *)(v14 + 30) |= 4 * v23;
        *(_QWORD *)(v14 + 80) = v5;
        *(_QWORD *)(v14 + 88) = v12 + v5;
        *(_QWORD *)(v14 + 96) = -1;
        dispatch_activate_VARIANT_mp(VARIANT_mp);
        return;
      }
      v5 &= ~0x8000000000000000;
      v23 = 1;
    }
    else
    {
      v23 = 0;
    }
    if (v5 >> 62)
      v5 = -1;
    if (_dispatch_host_time_nano2mach)
    {
      v12 = _dispatch_host_time_nano2mach(v12);
    }
    else
    {
      v24 = (3 * v12 * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
      v12 = (v24 + ((3 * v12 - v24) >> 1)) >> 6;
    }
    goto LABEL_39;
  }
}

void _dispatch_source_handler_dispose(uint64_t a1, const char *a2)
{
  uint64_t v3;
  unsigned int *v4;
  int v5;
  unint64_t StatusReg;
  uint64_t v7;
  int v8;

  if ((*(_BYTE *)a1 & 0x10) != 0)
    _Block_release(*(const void **)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 12);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 - 1, v4));
    if (v5 <= 1)
    {
      if (v5 != 1)
      {
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
        __break(1u);
        return;
      }
      _voucher_xref_dispose_VARIANT_mp(v3, a2);
    }
    *(_QWORD *)(a1 + 24) = -1;
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_QWORD *)(StatusReg + 176);
  if (v7)
    v8 = *(_DWORD *)(v7 + 8) + 1;
  else
    v8 = 1;
  if (v8 > _dispatch_continuation_cache_limit)
  {
    _dispatch_continuation_free_to_cache_limit_VARIANT_mp(a1);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v7;
    *(_DWORD *)(a1 + 8) = v8;
    *(_QWORD *)(StatusReg + 176) = a1;
  }
}

void _dispatch_source_set_handler_slow(unint64_t a1, const char *a2)
{
  unint64_t StatusReg;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t *v7;
  uint64_t v8;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_QWORD *)(StatusReg + 160);
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (*(_QWORD *)(a1 + 32))
  {
    if ((*(_BYTE *)a1 & 0x40) != 0)
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v3 + 32);
  }
  else
  {
    v5 = *(_QWORD *)(StatusReg + 176);
    if (v5)
      v6 = *(_DWORD *)(v5 + 8) + 1;
    else
      v6 = 1;
    if (v6 > _dispatch_continuation_cache_limit)
    {
      _dispatch_continuation_free_to_cache_limit_VARIANT_mp(a1);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v5;
      *(_DWORD *)(a1 + 8) = v6;
      *(_QWORD *)(StatusReg + 176) = a1;
    }
    a1 = 0;
  }
  v7 = (unint64_t *)(*(_QWORD *)(v3 + 88) + 8 * v4 + 40);
  do
    v8 = __ldxr(v7);
  while (__stlxr(a1, v7));
  if (v8)
    _dispatch_source_handler_dispose(v8, a2);
}

void _dispatch_source_handle_wlh_change(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(a1 + 80);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 | 0x8000000, v1));
  if ((v2 & 0x400000) != 0)
  {
    if ((v2 & 0x8000000) == 0)
      _dispatch_bug_deprecated("Changing target queue hierarchy after source was activated");
  }
  else
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Changing target queue hierarchy after source was activated";
    __break(1u);
  }
}

void _dispatch_source_timer_telemetry_slow()
{
  uint64_t v0;

  if (_dispatch_source_timer_use_telemetry && __telemetry() == -1)
  {
    v0 = **(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if ((_DWORD)v0)
      _dispatch_bug(1254, v0);
  }
}

char *_dispatch_source_timer_telemetry_init()
{
  char *result;

  result = getenv("LIBDISPATCH_TIMERS_USE_TELEMETRY");
  if (result)
    _dispatch_source_timer_use_telemetry = 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_0_2()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_1_1(int a1, char *__str, const char *a3)
{
  size_t v3;

  return snprintf(__str, v3, a3);
}

_QWORD *dispatch_mach_hooks_install_4libxpc_VARIANT_mp(_QWORD *result)
{
  void *v1;

  if (*result < 3uLL)
    dispatch_mach_hooks_install_4libxpc_VARIANT_mp_cold_1((uint64_t)result);
  do
  {
    v1 = (void *)__ldxr((unint64_t *)&_dispatch_mach_xpc_hooks);
    if (v1 != &_dispatch_mach_xpc_hooks_default)
    {
      __clrex();
      dispatch_mach_hooks_install_4libxpc_VARIANT_mp_cold_2();
    }
  }
  while (__stxr((unint64_t)result, (unint64_t *)&_dispatch_mach_xpc_hooks));
  return result;
}

void _dispatch_mach_hooks_install_default_VARIANT_mp()
{
  _dispatch_mach_xpc_hooks = &_dispatch_mach_xpc_hooks_default;
}

uint64_t dispatch_mach_create_VARIANT_mp(uint64_t a1, __objc2_class **a2, void *aBlock)
{
  _QWORD *v5;

  v5 = _dispatch_Block_copy(aBlock);
  return _dispatch_mach_create(a1, a2, (uint64_t)v5, v5[2], 1u);
}

uint64_t _dispatch_mach_create(uint64_t a1, __objc2_class **a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char v14;
  char *v15;
  unsigned int *v16;
  int v17;

  v10 = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_mach, 136);
  v11 = v10;
  *(_DWORD *)(v10 + 8) += 2;
  if (*(_BYTE *)(*(_QWORD *)v10 + 40) == 19)
    ++*(_DWORD *)(v10 + 8);
  *(_QWORD *)(v10 + 16) = -1985229329;
  *(_DWORD *)(v10 + 80) = 4194305;
  *(_QWORD *)(v10 + 56) = 0x19FFE0000000000;
  do
    v12 = __ldxr(&_dispatch_queue_serial_numbers);
  while (__stxr(v12 + 1, &_dispatch_queue_serial_numbers));
  *(_QWORD *)(v10 + 64) = v12;
  *(_QWORD *)(v10 + 72) = a1;
  *(_WORD *)(v10 + 116) = (8 * a5) & 0x10 | (((a5 >> 2) & 1) << 7) | *(_WORD *)(v10 + 116) & 0xFF6F;
  v13 = _dispatch_unote_create_without_handle_VARIANT_mp((uint64_t)&_dispatch_mach_type_recv_VARIANT_mp, 0, 0);
  v14 = v13[29];
  *((_QWORD *)v13 + 1) = ~v11;
  *((_QWORD *)v13 + 5) = a4;
  *((_QWORD *)v13 + 6) = a3;
  v13[29] = v14 & 0xBF | ((a5 & 1) << 6);
  if ((*(_BYTE *)(v11 + 116) & 0x80) != 0)
    *((_DWORD *)v13 + 8) |= 0x200u;
  *(_QWORD *)(v11 + 88) = v13;
  v15 = _dispatch_mach_send_create((uint64_t)&_dispatch_mach_type_send_VARIANT_mp, 0, 9);
  *((_QWORD *)v15 + 1) = ~v11;
  *(_QWORD *)(v11 + 120) = v15;
  if (a2)
  {
    if ((*((_BYTE *)a2 + 87) & 8) != 0)
      _dispatch_mach_create_cold_2((uint64_t)a2);
    if (*((_DWORD *)a2 + 2) != 0x7FFFFFFF)
    {
      v16 = (unsigned int *)(a2 + 1);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      if (v17 <= 0)
        dispatch_set_target_queue_VARIANT_mp_cold_2();
    }
  }
  else
  {
    a2 = &off_1ECCEA100;
  }
  *(_QWORD *)(v11 + 24) = a2;
  return v11;
}

uint64_t dispatch_mach_create_f_VARIANT_mp(uint64_t a1, __objc2_class **a2, uint64_t a3, uint64_t a4)
{
  return _dispatch_mach_create(a1, a2, a3, a4, 0);
}

uint64_t dispatch_mach_create_4libxpc_VARIANT_mp(uint64_t a1, __objc2_class **a2, uint64_t a3, uint64_t a4)
{
  return _dispatch_mach_create(a1, a2, a3, a4, 6u);
}

void _dispatch_mach_dispose_VARIANT_mp(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;

  _dispatch_unote_dispose_VARIANT_mp(a1[11]);
  a1[11] = 0;
  _dispatch_unote_dispose_VARIANT_mp(a1[15]);
  a1[15] = 0;
  v4 = a1[16];
  if (v4)
  {
    _dispatch_unote_dispose_VARIANT_mp(v4);
    a1[16] = 0;
  }
  _dispatch_lane_class_dispose_VARIANT_mp(a1, a2);
}

uint64_t dispatch_mach_request_no_senders_VARIANT_mp(uint64_t a1)
{
  uint64_t result;

  *(_WORD *)(a1 + 116) |= 0x20u;
  result = *(_QWORD *)(a1 + 56);
  if ((~result & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_VARIANT_mp_cold_1(result);
  return result;
}

uint64_t dispatch_mach_notify_no_senders_VARIANT_mp(uint64_t a1, int a2)
{
  __int16 v2;
  uint64_t result;

  if (a2)
    v2 = 96;
  else
    v2 = 32;
  *(_WORD *)(a1 + 116) = v2 | *(_WORD *)(a1 + 116) & 0xFF9F;
  result = *(_QWORD *)(a1 + 56);
  if ((~result & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_VARIANT_mp_cold_1(result);
  return result;
}

uint64_t dispatch_mach_set_flags_VARIANT_mp(uint64_t a1, char a2)
{
  uint64_t result;

  *(_WORD *)(a1 + 116) = *(_WORD *)(a1 + 116) & 0xFF7F | ((a2 & 1) << 7);
  result = *(_QWORD *)(a1 + 56);
  if ((~result & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_VARIANT_mp_cold_1(result);
  return result;
}

void dispatch_mach_connect_VARIANT_mp(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v6 = *(_QWORD *)(a1 + 120);
  if ((a2 - 1) <= 0xFFFFFFFD)
    *(_DWORD *)(*(_QWORD *)(a1 + 88) + 24) = a2;
  *(_DWORD *)(v6 + 92) = a3;
  if ((a3 - 1) <= 0xFFFFFFFD)
  {
    if (a4)
    {
      dispatch_retain_VARIANT_mp(a4);
      *(_DWORD *)(a4 + 48) = 0x40000;
      v7 = a4 + 88;
      if (*(_DWORD *)(a4 + 72))
        v7 = *(_QWORD *)v7;
      *(_DWORD *)(v6 + 96) = *(_DWORD *)(v7 + 8);
    }
    *(_QWORD *)(v6 + 48) = a4;
  }
  if ((*(_WORD *)(a1 + 116) & 0x20) != 0 && !*(_QWORD *)(v6 + 48))
    _dispatch_mach_arm_no_senders(a1, 0);
  v8 = (unsigned int *)(v6 + 88);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 & 0x7FFFFFFF, v8));
  if ((v9 & 0x80000000) == 0)
    dispatch_mach_connect_VARIANT_mp_cold_1(v9);
  dispatch_activate_VARIANT_mp(a1);
}

void _dispatch_mach_arm_no_senders(uint64_t a1, char a2)
{
  mach_port_name_t v3;
  ipc_space_t *v4;
  kern_return_t v5;
  kern_return_t v6;
  mach_port_t previous;

  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 24);
  previous = 0;
  if (v3 - 1 <= 0xFFFFFFFD)
  {
    v4 = (ipc_space_t *)MEMORY[0x1E0C883F0];
    v5 = mach_port_request_notification(*MEMORY[0x1E0C883F0], v3, 70, (*(_WORD *)(a1 + 116) & 0x40) == 0, v3, 0x15u, &previous);
    if (v5 == -301)
      _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
    if (v5)
      _dispatch_bug(252, v5);
    if (previous)
    {
      if ((a2 & 1) == 0)
        _dispatch_mach_arm_no_senders_cold_2(previous);
      v6 = mach_port_deallocate(*v4, previous);
      if (v6 == -301)
        _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
      if (v6)
        _dispatch_bug(260, v6);
    }
  }
}

void *_dispatch_mach_merge_msg_VARIANT_mp(uint64_t a1, unsigned int a2, mach_msg_header_t *a3, unsigned int a4, unsigned int *a5, int a6, unsigned int a7)
{
  uint64_t v10;
  _DWORD *v14;
  uint64_t v15;
  uint64_t VARIANT_mp;
  unint64_t StatusReg;
  _QWORD *v19;

  if ((a2 & 0x200) != 0)
    _dispatch_mach_merge_msg_VARIANT_mp_cold_2(a1);
  v10 = ~*(_QWORD *)(a1 + 8);
  if ((*(_DWORD *)(79 - *(_QWORD *)(a1 + 8)) & 0x10000000) == 0)
  {
    if (a3->msgh_id != 70 || (*(_WORD *)(115 - *(_QWORD *)(a1 + 8)) & 0x20) == 0)
    {
      v14 = _voucher_create_with_mach_msgv_VARIANT_mp(&a3->msgh_bits, a5);
      if ((*(_QWORD *)&a6 & 0xFFFFFFuLL) >= 0x10FF)
        v15 = 4351;
      else
        v15 = *(_QWORD *)&a6 & 0xFFFFFFLL;
      VARIANT_mp = dispatch_mach_msg_create_VARIANT_mp(a3, a4, HIWORD(a2) & 1, 0);
      if ((a2 & 0x10000) == 0 && MEMORY[0xFFFFFC100])
        kdebug_trace();
      *(_QWORD *)(VARIANT_mp + 56) = v15;
      *(_QWORD *)(VARIANT_mp + 64) = v14;
      *(_QWORD *)(VARIANT_mp + 32) = 0;
      *(_DWORD *)(VARIANT_mp + 48) = -117964798;
      _dispatch_mach_handle_or_push_received_msg(v10, VARIANT_mp, a7);
      goto LABEL_12;
    }
    if (_dispatch_mach_msg_sender_is_kernel_VARIANT_mp((uint64_t)a3))
    {
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v19 = *(_QWORD **)(StatusReg + 176);
      if (v19)
        *(_QWORD *)(StatusReg + 176) = v19[2];
      else
        v19 = _dispatch_continuation_alloc_from_heap_VARIANT_mp();
      v19[4] = _dispatch_mach_no_senders_invoke;
      v19[5] = v10;
      v19[3] = 0;
      *(_OWORD *)v19 = xmmword_18A06E770;
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
    }
    else
    {
      _dispatch_mach_merge_msg_VARIANT_mp_cold_1();
    }
  }
  mach_msg_destroy(a3);
  if ((a2 & 0x10000) != 0)
    free(a3);
LABEL_12:
  if ((*(_QWORD *)(a1 + 16) & 2) != 0 || (*(_DWORD *)(v10 + 60) & 0x1800000) == 0x800000)
    return (void *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v10 + 80))(v10, 0, 51);
  else
    return _os_object_release_internal_n_VARIANT_mp((void *)v10, (const char *)2);
}

uint64_t _dispatch_mach_no_senders_invoke(uint64_t result)
{
  if ((*(_DWORD *)(result + 80) & 0x10000000) == 0)
    return _dispatch_client_callout4(*(_QWORD *)(*(_QWORD *)(result + 88) + 48), 13, 0, 0, *(uint64_t (**)(void))(*(_QWORD *)(result + 88) + 40));
  return result;
}

void _dispatch_mach_handle_or_push_received_msg(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  unsigned int v10;
  unsigned int v11;

  v6 = *(_DWORD *)(a2 + 48);
  v7 = 3;
  if (v6)
    v7 = 4;
  if ((v6 & 0xFFFFC000) == 0xF8F80000)
    v8 = v6 & 0x3FFF;
  else
    v8 = v7;
  if (v8 != 2
    && (*(_WORD *)(a1 + 116) & 0x10) != 0
    && ((*((uint64_t (**)(_QWORD))_dispatch_mach_xpc_hooks + 1))(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 48)) & 1) != 0)
  {
    *(_QWORD *)(a2 + 16) = -1985229329;
    dispatch_release_VARIANT_mp((unsigned int *)a2, v9);
  }
  else
  {
    v10 = (a3 >> 8) & 0x3FFF;
    if (v10)
      v11 = __clz(__rbit32(v10)) + 1;
    else
      v11 = (*(_DWORD *)(a1 + 84) >> 8) & 0xF;
    _dispatch_lane_push_VARIANT_mp((_DWORD *)a1, (_QWORD *)a2, v11);
  }
}

void _dispatch_mach_reply_merge_msg_VARIANT_mp(uint64_t a1, unsigned int a2, mach_msg_header_t *a3, unsigned int a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v10;
  mach_msg_bits_t msgh_bits;
  mach_msg_bits_t v14;
  mach_port_name_t msgh_voucher_port;
  uint64_t v18;
  uint64_t v19;
  uint64_t VARIANT_mp;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  uint64_t v26;
  char v27;

  v10 = ~*(_QWORD *)(a1 + 8);
  if ((*(_DWORD *)(79 - *(_QWORD *)(a1 + 8)) & 0x10000000) != 0)
  {
    mach_msg_destroy(a3);
    if ((a2 & 0x10000) != 0)
      free(a3);
    v27 = 117;
  }
  else
  {
    msgh_bits = a3->msgh_bits;
    v14 = HIWORD(a3->msgh_bits) & 0x1F;
    msgh_voucher_port = a3->msgh_voucher_port;
    if ((v14 == 17 || v14 == 19) && msgh_voucher_port != 0)
    {
      if (v14 == 17)
      {
        _voucher_dealloc_mach_voucher_VARIANT_mp(msgh_voucher_port);
        msgh_bits = a3->msgh_bits;
      }
      a3->msgh_voucher_port = 0;
      a3->msgh_bits = msgh_bits & 0xFFE0FFFF;
    }
    v18 = *(unsigned int *)(a1 + 40);
    v19 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    VARIANT_mp = dispatch_mach_msg_create_VARIANT_mp(a3, a4, HIWORD(a2) & 1, 0);
    if ((a2 & 0x10000) == 0 && MEMORY[0xFFFFFC100])
      kdebug_trace();
    *(_QWORD *)(VARIANT_mp + 56) = v18;
    *(_QWORD *)(VARIANT_mp + 64) = v19;
    v21 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(VARIANT_mp + 32) = v21;
    *(_DWORD *)(VARIANT_mp + 48) = -117964798;
    if ((*(_BYTE *)(v10 + 116) & 0x10) != 0 && v21)
    {
      v22 = (*((uint64_t (**)(void))_dispatch_mach_xpc_hooks + 2))();
      if (v22)
        v23 = v22;
      else
        v23 = v10;
      v24 = _dispatch_mach_msg_async_reply_wrap(VARIANT_mp, v10);
      v25 = __clz(__rbit32((*(_DWORD *)(VARIANT_mp + 56) >> 8) & 0x3FFF));
      if (((*(_DWORD *)(VARIANT_mp + 56) >> 8) & 0x3FFF) != 0)
        v26 = v25 + 1;
      else
        v26 = 0;
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v23 + 88))(v23, v24, v26);
    }
    else
    {
      _dispatch_mach_handle_or_push_received_msg(v10, VARIANT_mp, a7);
    }
    v27 = 101;
  }
  _dispatch_mach_reply_unregister((_QWORD *)v10, (const char *)a1, v27);
}

void _dispatch_mach_reply_unregister(_QWORD *a1, const char *a2, char a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  unsigned int *v9;
  unint64_t StatusReg;
  unsigned int v11;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  int v17;
  uint64_t reply_disconnected;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned int v26;
  uint64_t v27;

  v4 = a2;
  v6 = *(_QWORD *)a2;
  v7 = a1[15];
  if ((a3 & 0x20) != 0)
  {
    v9 = (unsigned int *)(v7 + 40);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v11 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    while (!__ldaxr(v9))
    {
      if (!__stxr(v11, v9))
        goto LABEL_8;
    }
    __clrex();
    _dispatch_unfair_lock_lock_slow_VARIANT_mp(v7 + 40);
LABEL_8:
    v13 = v4[8];
    if (v13)
      *(_QWORD *)(v13 + 72) = v4[9];
    *(_QWORD *)v4[9] = v13;
    v4[9] = 0;
    if (*(_QWORD *)(v7 + 56))
      v8 = 0;
    else
      v8 = *(_DWORD *)(v7 + 88) != 0;
    v14 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    do
      a2 = (const char *)__ldxr(v9);
    while (__stlxr(0, v9));
    if ((_DWORD)a2 != v14)
      _dispatch_unfair_lock_unlock_slow_VARIANT_mp(v7 + 40, a2);
  }
  else
  {
    v8 = 0;
  }
  if (!v4[2] || (_dispatch_unote_unregister_VARIANT_mp((uint64_t)v4, a3 & 0xF) & 1) != 0)
  {
    if ((a3 & 0x10) != 0)
    {
      if ((*((_WORD *)a1 + 58) & 0x10) != 0 && v4[6])
      {
        v20 = (*((uint64_t (**)(void))_dispatch_mach_xpc_hooks + 2))();
        if (v20)
          v19 = (_QWORD *)v20;
        else
          v19 = a1;
      }
      else
      {
        v19 = 0;
      }
      if (v19)
        v24 = 12;
      else
        v24 = 7;
      reply_disconnected = _dispatch_mach_msg_create_reply_disconnected(0, (uint64_t)v4, v24);
    }
    else
    {
      v15 = v4[7];
      if (v15)
      {
        v16 = (unsigned int *)(v15 + 12);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 - 1, v16));
        if (v17 <= 1)
        {
          if (v17 != 1)
          {
            qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
            __break(1u);
            return;
          }
          _voucher_xref_dispose_VARIANT_mp(v15, a2);
        }
        reply_disconnected = 0;
        v19 = 0;
        v4[7] = 0;
      }
      else
      {
        reply_disconnected = 0;
        v19 = 0;
      }
    }
    if (v6 != -2)
      _dispatch_unote_dispose_VARIANT_mp((uint64_t)v4);
    if (reply_disconnected)
    {
      if (!v19)
      {
        _dispatch_mach_handle_or_push_received_msg((uint64_t)a1, reply_disconnected, 0);
        if ((a3 & 0x40) == 0)
          return;
        goto LABEL_51;
      }
      v25 = _dispatch_mach_msg_async_reply_wrap(reply_disconnected, (uint64_t)a1);
      v26 = __clz(__rbit32((*(_DWORD *)(reply_disconnected + 56) >> 8) & 0x3FFF));
      if (((*(_DWORD *)(reply_disconnected + 56) >> 8) & 0x3FFF) != 0)
        v27 = v26 + 1;
      else
        v27 = 0;
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*v19 + 88))(v19, v25, v27);
    }
    if ((a3 & 0x40) == 0)
      return;
LABEL_51:
    if (v8)
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*a1 + 80))(a1, 0, 3);
    else
      _os_object_release_internal_n_VARIANT_mp(a1, (const char *)2);
    return;
  }
  if (a3 < 0)
  {
    v23 = *(_QWORD *)(v7 + 56);
    v22 = (_QWORD *)(v7 + 56);
    v21 = v23;
    v4[8] = v23;
    if (v23)
      *(_QWORD *)(v21 + 72) = v4 + 8;
    *v22 = v4;
    v4[9] = v22;
  }
}

void _dispatch_mach_send_barrier_drain_invoke_VARIANT_mp(_QWORD *a1, uint64_t a2, const char *a3)
{
  _QWORD *StatusReg;
  unint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  BOOL v21;
  signed int v22;
  uint64_t v23;
  int v24;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = StatusReg[20];
  v7 = (_OWORD *)StatusReg[21];
  *((_OWORD *)StatusReg + 10) = *v7;
  v8 = a1[3];
  a1[3] = -1;
  v9 = a1[1];
  if (v9 == -1)
  {
    v16 = 0;
  }
  else
  {
    v10 = StatusReg[25];
    if (((v10 >> 8) & 0xF) != 0)
      v11 = 256 << ((BYTE1(v10) & 0xFu) - 1);
    else
      v11 = 0;
    v12 = v11 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    v13 = v9 & 0xFFFFFF;
    if ((v9 & 0xFFFFFF) != 0)
    {
      v14 = v11 & 0xFFFFFF00;
      if ((v10 & 0x44000000) == 0 && (a1[1] & 0x10000000) == 0)
        v16 = v12;
      else
        v16 = v9 & 0xFFFFFF;
      if (v13 < v14)
        v16 = v12;
    }
    else if ((unsigned __int16)v10 >> 12)
    {
      v16 = (256 << (((unsigned __int16)v10 >> 12) - 1)) | 0xFF;
    }
    else
    {
      v16 = v11 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    }
  }
  v17 = v16 & 0xFFFFFFFF02FFFFFFLL;
  v18 = StatusReg[4];
  if ((v18 & 0x1000000) != 0)
  {
    if (v17)
    {
LABEL_39:
      _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v17, v8, 6);
      goto LABEL_24;
    }
    v17 = v18 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v17 == (v18 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_18;
  }
  if (v17)
    goto LABEL_39;
LABEL_18:
  if (v8 == -1)
    goto LABEL_24;
  if (StatusReg[28] != v8)
  {
    v17 = 0;
    goto LABEL_39;
  }
  if (v8)
  {
    v19 = (unsigned int *)(v8 + 12);
    do
    {
      v20 = __ldxr(v19);
      v21 = __OFSUB__(v20, 1);
      v22 = v20 - 1;
    }
    while (__stxr(v22, v19));
    if ((v22 < 0) ^ v21 | (v22 == 0))
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
      __break(1u);
      return;
    }
  }
LABEL_24:
  v23 = StatusReg[22];
  if (v23)
    v24 = *(_DWORD *)(v23 + 8) + 1;
  else
    v24 = 1;
  if (v24 > _dispatch_continuation_cache_limit)
  {
    _dispatch_mach_send_invoke(v6, a3, 6);
    _dispatch_continuation_free_to_cache_limit_VARIANT_mp((uint64_t)a1);
  }
  else
  {
    a1[2] = v23;
    *((_DWORD *)a1 + 2) = v24;
    StatusReg[22] = a1;
    _dispatch_mach_send_invoke(v6, a3, 6);
  }
  StatusReg[20] = v6;
  StatusReg[21] = v7;
}

void _dispatch_mach_send_invoke(unint64_t a1, const char *a2, int a3)
{
  uint64_t v6;
  unint64_t StatusReg;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;

  v6 = *(_QWORD *)(a1 + 120);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v8 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
  v9 = 0xFFFFFFFFLL;
  if ((a3 & 4) == 0)
    v9 = 0x10FFFFFFFFLL;
  if ((a3 & 2) != 0)
    v10 = 0x10FFFFFFFFLL;
  else
    v10 = v9;
  v11 = (unint64_t)(a3 & 2) << 35;
  v12 = *(_DWORD *)(StatusReg + 200);
  v13 = (v12 >> 8) & 0xF;
  v14 = (unsigned __int16)v12 >> 12;
  v15 = HIWORD(v12) & 0xF;
  if (v13 <= v14)
    v13 = v14;
  if (v13 > v15)
    v15 = v13;
  v16 = (unint64_t *)(v6 + 64);
  while (1)
  {
    while (1)
    {
      v17 = __ldaxr(v16);
      if ((v17 & v10) != v11)
        break;
      v18 = HIDWORD(v17) & 7;
      if (v15 < v18)
      {
        __clrex();
        _pthread_workqueue_override_start_direct();
        v19 = *(_DWORD *)(StatusReg + 200);
        v15 = v18;
        if ((HIWORD(v19) & 0xF) < v18)
        {
          *(_QWORD *)(StatusReg + 200) = v19 & 0xFFF0FFFF | ((_DWORD)v18 << 16);
          v15 = v18;
        }
      }
      else if (!__stxr(v17 & 0xFFFFFFC7FFFFFFFFLL | v8, v16))
      {
        _dispatch_mach_send_drain(a1, a2, a3);
        return;
      }
    }
    if ((a3 & 1) == 0)
      break;
    if (!__stxr(v17 | 0x2000000000, v16))
      return;
  }
  __clrex();
}

void *_dispatch_mach_notification_merge_evt_VARIANT_mp(uint64_t a1, uint64_t a2, int a3)
{
  void *v3;

  v3 = (void *)~*(_QWORD *)(a1 + 8);
  if ((*(_DWORD *)(a1 + 32) & a3) != 0)
    _dispatch_mach_send_invoke(~*(_QWORD *)(a1 + 8), (const char *)0x40000, 1);
  return _os_object_release_internal_n_VARIANT_mp(v3, (const char *)2);
}

uint64_t dispatch_mach_send_VARIANT_mp(uint64_t a1, uint64_t a2, int a3)
{
  return _dispatch_mach_send_msg(a1, a2, 0, a3 & 0xFFFF0000);
}

uint64_t _dispatch_mach_send_msg(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v5;
  char v6;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t StatusReg;
  uint64_t v14;
  unsigned int *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v22;
  char v23;
  unint64_t v24;
  char v25;
  unsigned int *v26;

  v5 = *(_QWORD *)(result + 120);
  if (*(_QWORD *)(a2 + 16) != -1985229329)
  {
    StatusReg = *(_QWORD *)(a2 + 16);
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Message already enqueued";
    qword_1EDF52D38 = StatusReg;
    __break(1u);
LABEL_42:
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
LABEL_43:
    if ((_DWORD)StatusReg != 1)
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
      __break(1u);
      return result;
    }
    _voucher_xref_dispose_VARIANT_mp(result, (const char *)a2);
LABEL_39:
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 16) = -1985229329;
    dispatch_release_VARIANT_mp((unsigned int *)a2, (const char *)a2);
    return 1;
  }
  v6 = a4;
  v8 = (_DWORD *)result;
  if ((a4 & 0x40000) != 0)
  {
    v12 = 0;
  }
  else
  {
    v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
    v10 = v9 & 0xFFFFFF;
    v11 = (unsigned __int16)(v9 >> 8) > 0x10uLL && (a4 & 4) == 0;
    v12 = 4351;
    if (!v11)
      v12 = v10;
  }
  *(_QWORD *)(a2 + 56) = v12;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v14 = *(_QWORD *)(StatusReg + 224);
  if (v14)
  {
    v15 = (unsigned int *)(v14 + 12);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    if (v16 <= 0)
      goto LABEL_42;
  }
  *(_QWORD *)(a2 + 64) = v14;
  *(_DWORD *)(a2 + 48) = a4 | (((*(_QWORD *)(StatusReg + 32) & 0x300) != 0) << 18);
  dispatch_retain_VARIANT_mp(a2);
  v17 = __clz(__rbit32((*(_DWORD *)(a2 + 56) >> 8) & 0x3FFF));
  if (((*(_DWORD *)(a2 + 56) >> 8) & 0x3FFF) != 0)
    v18 = v17 + 1;
  else
    v18 = 0;
  v19 = a2 + 88;
  if (*(_DWORD *)(a2 + 72))
    v19 = *(_QWORD *)v19;
  v20 = *(_DWORD *)v19;
  if ((*(_DWORD *)v19 & 0x1F00) != 0x1500 || (*(_DWORD *)(v19 + 12) - 1) >= 0xFFFFFFFE)
    v22 = 0;
  else
    v22 = *(_DWORD *)(v19 + 12);
  *(_DWORD *)(a2 + 52) = v22;
  if ((v20 & 0x1F) != 0x12 || v22 || *(_DWORD *)(v5 + 88) || (v8[20] & 0x10000000) != 0)
  {
    if (a3)
      v24 = a3;
    else
      v24 = a2;
    _dispatch_mach_send_push_and_trydrain(v8, v24, v18, 8 * (v6 & 1));
    if ((v25 & 1) == 0)
      return 0;
LABEL_35:
    result = *(_QWORD *)(a2 + 64);
    if (!result)
      goto LABEL_39;
    v26 = (unsigned int *)(result + 12);
    do
      LODWORD(StatusReg) = __ldxr(v26);
    while (__stxr(StatusReg - 1, v26));
    if ((int)StatusReg > 1)
      goto LABEL_39;
    goto LABEL_43;
  }
  v23 = _dispatch_mach_msg_send((unint64_t)v8, a2, 0, 0, 8 * (v6 & 1u));
  result = 0;
  if ((v23 & 2) != 0)
    goto LABEL_35;
  return result;
}

uint64_t dispatch_mach_send_with_result_VARIANT_mp(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, _DWORD *a6)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a4)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid send flags";
    qword_1EDF52D38 = a4;
    __break(1u);
  }
  else
  {
    result = _dispatch_mach_send_msg(result, a2, 0, a3 & 0xFFFF0000 | 1);
    if ((_DWORD)result)
    {
      v9 = *(_DWORD *)(a2 + 48);
      v10 = v9 & 0x3FFF;
      v11 = 3;
      if (v9)
        v11 = 4;
      if ((v9 & 0xFFFFC000) == 0xF8F80000)
      {
        v9 = 0;
        v12 = v10;
      }
      else
      {
        v12 = v11;
      }
    }
    else
    {
      v9 = 0;
      v12 = 10;
    }
    *a5 = v12;
    *a6 = v9;
  }
  return result;
}

uint64_t dispatch_mach_send_and_wait_for_reply_VARIANT_mp(uint64_t a1, uint64_t a2, int a3)
{
  char v4;

  return _dispatch_mach_send_and_wait_for_reply(a1, a2, a3 & 0xFFFF0000, &v4);
}

uint64_t _dispatch_mach_send_and_wait_for_reply(uint64_t a1, uint64_t a2, int a3, _BYTE *a4)
{
  unint64_t StatusReg;
  int v9;
  _DWORD *v10;
  _DWORD *v11;
  unsigned int v12;
  unsigned int special_reply_port;
  uint64_t v14;
  mach_port_name_t v15;
  uint64_t v16;
  uint64_t v17;
  mach_msg_header_t *v18;
  size_t v19;
  uint64_t v20;
  mach_msg_header_t *v21;
  int v22;
  mach_port_name_t v23;
  mach_msg_option_t v24;
  mach_msg_return_t v25;
  mach_msg_return_t v26;
  uint64_t msgh_size;
  mach_msg_header_t *v28;
  uint64_t v29;
  uint64_t VARIANT_mp;
  mach_msg_header_t *v31;
  mach_msg_header_t *v32;
  uint64_t msgh_local_port;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C874D8];
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v58 = 0u;
  v59 = 0u;
  v57 = -2;
  *((_QWORD *)&v60 + 1) = *(_QWORD *)(a2 + 32);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  DWORD2(v62) = *(_QWORD *)(StatusReg + 24);
  v9 = *(_DWORD *)(a2 + 72);
  v10 = (_DWORD *)(a2 + 88);
  v11 = (_DWORD *)(a2 + 88);
  if (v9)
    v11 = *(_DWORD **)v10;
  v12 = v11[3];
  if (v12 - 1 > 0xFFFFFFFD || (*v11 & 0x1F00) != 0x1500)
  {
    v12 = *(_DWORD *)(StatusReg + 64);
    if (!v12)
    {
      special_reply_port = thread_get_special_reply_port();
      *(_QWORD *)(StatusReg + 64) = special_reply_port;
      if (special_reply_port + 1 < 2)
        _dispatch_mach_send_and_wait_for_reply_cold_6();
      v12 = special_reply_port;
      v9 = *(_DWORD *)(a2 + 72);
    }
    if (v9)
      v10 = *(_DWORD **)v10;
    v10[3] = v12;
    BYTE6(v59) = 1;
  }
  v50 = xmmword_18A06E780;
  v51 = 0;
  v52 = -1;
  v53 = 0;
  v54 = 0;
  v55 = a2;
  v56 = &v57;
  v14 = _dispatch_mach_send_msg(a1, a2, (unint64_t)&v50, a3 | 4u);
  *a4 = v14;
  if (BYTE6(v59))
  {
    if (v12 == *(_DWORD *)(StatusReg + 64))
      *(_QWORD *)(StatusReg + 64) = 0;
    v15 = *(_DWORD *)(*(_QWORD *)(a1 + 120) + 92);
  }
  else
  {
    v15 = 0;
  }
  if (v12 + 1 <= 1)
    _dispatch_mach_send_and_wait_for_reply_cold_1(v12);
  v49 = &v46;
  v47 = *((_QWORD *)&v60 + 1);
  v16 = (*MEMORY[0x1E0C88810] + 0x4000) & ~*MEMORY[0x1E0C88810];
  MEMORY[0x1E0C86820](v14, (*MEMORY[0x1E0C88810] + 0x4000) & ~*MEMORY[0x1E0C88810]);
  v18 = (mach_msg_header_t *)((char *)&v46 - v17);
  bzero((char *)&v46 - v17, v19);
  LODWORD(v20) = 0;
  v21 = 0;
  if (v15 - 1 >= 0xFFFFFFFE)
    v22 = 117440526;
  else
    v22 = 117456910;
  if (v15 - 1 >= 0xFFFFFFFE)
    v23 = 0;
  else
    v23 = v15;
  v48 = a1;
  v24 = v22 & 0xFFFFFDFF | (((*(unsigned __int16 *)(a1 + 116) >> 7) & 1) << 9);
  while (1)
  {
    v25 = mach_msg(v18, v24, 0, v16, v12, 0, v23);
    v26 = v25;
    if (v25 != 268451844)
      break;
    msgh_size = v18->msgh_size;
    if (msgh_size >= 0xFFFFFFBC)
      _dispatch_mach_send_and_wait_for_reply_cold_3(msgh_size);
    if ((v24 & 4) == 0)
    {
      _dispatch_log("BUG in libdispatch client: dispatch_mach_send_and_wait_for_reply: dropped message too large to fit in memory: id = 0x%x, size = %u", v18->msgh_id, msgh_size);
      goto LABEL_42;
    }
    v20 = msgh_size + 68;
    v28 = (mach_msg_header_t *)malloc_type_malloc(msgh_size + 68, 0x62EACE2EuLL);
    v21 = v28;
    v29 = v20;
    if (!v28)
    {
      _dispatch_mach_send_and_wait_for_reply_cold_5();
      v28 = v18;
      v29 = v16;
    }
    v24 = v24 & 0xFFFFFEFB | 0x100;
    v16 = v29;
    v18 = v28;
  }
  if ((v25 - 268451842) <= 7 && ((1 << (v25 - 2)) & 0x91) != 0)
  {
    if (BYTE6(v59))
      _dispatch_destruct_reply_port();
    goto LABEL_34;
  }
  if (v25)
    _dispatch_mach_send_and_wait_for_reply_cold_2(v25);
  LODWORD(v16) = v18->msgh_size + 68;
  if (v21 && v16 < v20)
  {
    v31 = (mach_msg_header_t *)malloc_type_realloc(v21, v20, 0x7CF7F135uLL);
    if (v31)
    {
      v21 = v31;
      v32 = v31;
    }
    else
    {
      v32 = v18;
    }
  }
  else
  {
LABEL_42:
    v32 = v18;
  }
  msgh_local_port = v32->msgh_local_port;
  v34 = (unsigned int *)(*(_QWORD *)(v48 + 120) + 40);
  v35 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v34))
  {
    if (!__stxr(v35, v34))
      goto LABEL_48;
  }
  __clrex();
  _dispatch_unfair_lock_lock_slow_VARIANT_mp((uint64_t)v34);
LABEL_48:
  v37 = v62;
  if ((_QWORD)v62)
  {
    v38 = *((_QWORD *)&v61 + 1);
    v39 = (_QWORD *)v62;
    if (*((_QWORD *)&v61 + 1))
    {
      *(_QWORD *)(*((_QWORD *)&v61 + 1) + 72) = v62;
      v39 = (_QWORD *)v62;
    }
    *v39 = v38;
    *(_QWORD *)&v62 = 0;
  }
  v40 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    v41 = __ldxr(v34);
  while (__stlxr(0, v34));
  if (v41 != v40)
    _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)v34, v41);
  if (BYTE6(v59))
  {
    if ((_DWORD)v59 != (_DWORD)msgh_local_port)
    {
      if ((msgh_local_port - 1) < 0xFFFFFFFE || v37)
        _dispatch_mach_send_and_wait_for_reply_cold_4(msgh_local_port);
      goto LABEL_66;
    }
    if (!v37 || *(_DWORD *)(StatusReg + 64))
    {
LABEL_66:
      _dispatch_destruct_reply_port();
      goto LABEL_67;
    }
    *(_QWORD *)(StatusReg + 64) = msgh_local_port;
  }
  else if ((msgh_local_port - 1) <= 0xFFFFFFFD && v37)
  {
    v42 = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_mach_msg, 112);
    *(_QWORD *)(v42 + 16) = -1985229329;
    *(_QWORD *)(v42 + 24) = &unk_1ECCEA080;
    *(_DWORD *)(v42 + 72) = 0;
    *(_QWORD *)(v42 + 80) = 24;
    *(_DWORD *)(v42 + 100) = msgh_local_port;
    v44 = *((_QWORD *)&v60 + 1);
    v43 = v61;
    *(_QWORD *)&v61 = 0;
    *(_QWORD *)(v42 + 56) = v60;
    *(_QWORD *)(v42 + 64) = v43;
    *(_QWORD *)(v42 + 32) = v44;
    *(_DWORD *)(v42 + 48) = -117964791;
    _dispatch_mach_handle_or_push_received_msg(v48, v42, 0);
  }
LABEL_67:
  v32->msgh_local_port = 0;
  if (*(_DWORD *)(v48 + 80) & 0x10000000 | v26)
  {
    if (!v26)
      mach_msg_destroy(v32);
LABEL_34:
    free(v21);
    return 0;
  }
  VARIANT_mp = dispatch_mach_msg_create_VARIANT_mp(v32, v16, v21 != 0, 0);
  if ((!v21 || v32 != v18) && MEMORY[0xFFFFFC100])
    kdebug_trace();
  *(_QWORD *)(VARIANT_mp + 32) = v47;
  return VARIANT_mp;
}

uint64_t dispatch_mach_send_with_result_and_wait_for_reply_VARIANT_mp(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, _DWORD *a6)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;

  if (a4)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid send flags";
    qword_1EDF52D38 = a4;
    __break(1u);
  }
  else
  {
    v13 = 0;
    result = _dispatch_mach_send_and_wait_for_reply(result, a2, a3 & 0xFFFF0000 | 1, &v13);
    v9 = v13;
    if (v13)
    {
      v9 = *(_DWORD *)(a2 + 48);
      v10 = v9 & 0x3FFF;
      v11 = 3;
      if (v9)
        v11 = 4;
      if ((v9 & 0xFFFFC000) == 0xF8F80000)
      {
        v9 = 0;
        v12 = v10;
      }
      else
      {
        v12 = v11;
      }
    }
    else
    {
      v12 = 10;
    }
    *a5 = v12;
    *a6 = v9;
  }
  return result;
}

uint64_t dispatch_mach_send_with_result_and_async_reply_4libxpc_VARIANT_mp(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, _DWORD *a6)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a4)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid send flags";
    qword_1EDF52D38 = a4;
    __break(1u);
    goto LABEL_16;
  }
  if ((*(_WORD *)(result + 116) & 0x10) == 0)
  {
LABEL_16:
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_mach_send_with_result_and_wait_for_reply is XPC only";
    __break(1u);
LABEL_17:
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Reply port needed for async send with reply";
    __break(1u);
    return result;
  }
  v9 = a2 + 88;
  if (*(_DWORD *)(a2 + 72))
    v9 = *(_QWORD *)v9;
  if ((*(_DWORD *)(v9 + 12) - 1) > 0xFFFFFFFD || (*(_DWORD *)v9 & 0x1F00) != 0x1500)
    goto LABEL_17;
  result = _dispatch_mach_send_msg(result, a2, 0, a3 & 0xFFFF0000 | 1);
  if ((_DWORD)result)
  {
    v10 = *(_DWORD *)(a2 + 48);
    v11 = v10 & 0x3FFF;
    v12 = 3;
    if (v10)
      v12 = 4;
    if ((v10 & 0xFFFFC000) == 0xF8F80000)
    {
      v10 = 0;
      v13 = v11;
    }
    else
    {
      v13 = v12;
    }
  }
  else
  {
    v10 = 0;
    v13 = 10;
  }
  *a5 = v13;
  *a6 = v10;
  return result;
}

unsigned int *dispatch_mach_reconnect_VARIANT_mp(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unint64_t StatusReg;
  _QWORD *v12;

  v3 = a3;
  v6 = *(_QWORD *)(a1 + 120);
  v7 = (unsigned int *)(v6 + 88);
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  if (a2 - 1 <= 0xFFFFFFFD && a3)
  {
    dispatch_retain_VARIANT_mp(a3);
    *(_DWORD *)(v3 + 48) = 0x40000;
    v9 = v3 + 88;
    if (*(_DWORD *)(v3 + 72))
      v9 = *(_QWORD *)v9;
    v10 = *(_DWORD *)(v9 + 8);
  }
  else
  {
    v10 = 0;
    if (a3 == -1)
      v3 = -1;
    else
      v3 = 0;
  }
  *(_DWORD *)(v6 + 96) = v10;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v12 = *(_QWORD **)(StatusReg + 176);
  if (v12)
    *(_QWORD *)(StatusReg + 176) = v12[2];
  else
    v12 = _dispatch_continuation_alloc_from_heap_VARIANT_mp();
  v12[5] = v12;
  v12[6] = v3;
  v12[7] = a2;
  v12[3] = -1;
  v12[4] = _dispatch_mach_reconnect_invoke;
  *(_OWORD *)v12 = xmmword_18A06E790;
  return _dispatch_mach_send_push((unsigned int *)a1, (unint64_t)v12, 0);
}

BOOL _dispatch_mach_reconnect_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned int *v9;
  unint64_t StatusReg;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v28;

  v4 = *(_QWORD *)(a1 + 120);
  if (*(_QWORD *)(v4 + 16))
  {
    _dispatch_unote_unregister_VARIANT_mp(*(_QWORD *)(a1 + 120), 5);
    *(_DWORD *)(*(_QWORD *)(a1 + 120) + 24) = 0;
  }
  v5 = *(_DWORD *)(v4 + 92);
  if ((v5 + 1) >= 2)
  {
    v6 = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_mach_msg, 112);
    *(_QWORD *)(v6 + 16) = -1985229329;
    *(_QWORD *)(v6 + 24) = &unk_1ECCEA080;
    *(_DWORD *)(v6 + 72) = 0;
    *(_QWORD *)(v6 + 80) = 24;
    *(_DWORD *)(v6 + 96) = v5;
    *(_DWORD *)(v6 + 48) = -117964793;
    _dispatch_mach_handle_or_push_received_msg(a1, v6, 0);
    *(_DWORD *)(v4 + 92) = 0;
  }
  v7 = *(_QWORD *)(v4 + 48);
  if (v7)
  {
    _dispatch_mach_msg_not_sent(a1, v7, 0);
    *(_QWORD *)(v4 + 48) = 0;
  }
  *(_WORD *)(a1 + 118) &= ~1u;
  v28 = 0;
  if ((*(_DWORD *)(a1 + 80) & 0x40000000) != 0)
    v8 = -112;
  else
    v8 = -110;
  v9 = (unsigned int *)(v4 + 40);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v11 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v9))
  {
    if (!__stxr(v11, v9))
      goto LABEL_15;
  }
  __clrex();
  _dispatch_unfair_lock_lock_slow_VARIANT_mp(v4 + 40);
LABEL_15:
  v13 = v28;
  v28 = *(_QWORD *)(v4 + 56);
  v14 = v28;
  *(_QWORD *)(v4 + 56) = v13;
  if (v14)
  {
    *(_QWORD *)(v14 + 72) = &v28;
    do
    {
      v15 = *(_QWORD *)(v14 + 64);
      *(_QWORD *)(v14 + 72) = 0;
      _dispatch_mach_reply_unregister((_QWORD *)a1, (const char *)v14, v8);
      v14 = v15;
    }
    while (v15);
    v13 = *(_QWORD *)(v4 + 56);
  }
  v16 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    v17 = __ldxr(v9);
  while (__stlxr(0, v9));
  if (v17 == v16)
  {
    if (v13)
      return v13 == 0;
  }
  else
  {
    _dispatch_unfair_lock_unlock_slow_VARIANT_mp(v4 + 40, v17);
    if (v13)
      return v13 == 0;
  }
  v18 = *(_QWORD *)(StatusReg + 176);
  if (v18)
    v19 = *(_DWORD *)(v18 + 8) + 1;
  else
    v19 = 1;
  v20 = *(_DWORD *)(a2 + 56);
  v21 = *(_QWORD *)(a2 + 48);
  if (v19 > _dispatch_continuation_cache_limit)
  {
    _dispatch_continuation_free_to_cache_limit_VARIANT_mp(a2);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v18;
    *(_DWORD *)(a2 + 8) = v19;
    *(_QWORD *)(StatusReg + 176) = a2;
  }
  v22 = *(_WORD *)(a1 + 118);
  if (v21 == -1)
  {
    v21 = 0;
    v23 = v22 | 2;
    *(_WORD *)(a1 + 118) = v23;
    if ((v23 & 2) == 0)
      goto LABEL_30;
LABEL_32:
    if ((v20 - 1) <= 0xFFFFFFFD)
    {
      v24 = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_mach_msg, 112);
      *(_QWORD *)(v24 + 16) = -1985229329;
      *(_QWORD *)(v24 + 24) = &unk_1ECCEA080;
      *(_DWORD *)(v24 + 72) = 0;
      *(_QWORD *)(v24 + 80) = 24;
      *(_DWORD *)(v24 + 96) = v20;
      *(_DWORD *)(v24 + 48) = -117964793;
      _dispatch_mach_handle_or_push_received_msg(a1, v24, 0);
    }
    if (v21)
      _dispatch_mach_msg_not_sent(a1, v21, 0);
    goto LABEL_36;
  }
  if ((v22 & 2) != 0)
    goto LABEL_32;
LABEL_30:
  *(_DWORD *)(v4 + 92) = v20;
  *(_QWORD *)(v4 + 48) = v21;
LABEL_36:
  v25 = (unsigned int *)(v4 + 88);
  do
    v26 = __ldxr(v25);
  while (__stxr(v26 - 1, v25));
  return v13 == 0;
}

unsigned int *_dispatch_mach_send_push(unsigned int *result, unint64_t a2, uint64_t a3)
{
  unsigned int *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t StatusReg;
  unint64_t v9;
  int v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t (*v18)(void);
  unint64_t *v19;
  unint64_t v20;
  int v21;

  v3 = result;
  v4 = *((_QWORD *)result + 15);
  v5 = *(_UNKNOWN **)a2 == &unk_1E1E866C8 && *(_QWORD *)a2 > 0xFFFuLL;
  v6 = 0xA000000000;
  if (v5)
    v6 = 0xB000000000;
  *(_QWORD *)(a2 + 16) = 0;
  v7 = (unint64_t *)(v4 + 72);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_QWORD *)(StatusReg + 976) = v4 + 72;
  do
    v9 = __ldxr(v7);
  while (__stlxr(a2, v7));
  if (v9)
    v10 = 2;
  else
    v10 = 4;
  v11 = result + 2;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + v10, v11));
  v13 = a3 << 32;
  if (v9)
  {
    *(_QWORD *)(v9 + 16) = a2;
    *(_QWORD *)(StatusReg + 976) = 0;
    v14 = (unint64_t *)(v4 + 64);
    while (1)
    {
      v15 = __ldxr(v14);
      v16 = v13 | 0x2800000000 | v15 & 0xFFFFFFF0FFFFFFFFLL;
      v6 = 0;
      if ((v15 & 0x700000000) >= v13 || v15 == v16)
        break;
      if (!__stxr(v16, v14))
        goto LABEL_20;
    }
    __clrex();
    v16 = v15;
LABEL_20:
    if (v15 >= 4)
    {
      if ((v15 & 0x700000000) < (v16 & 0x700000000))
        _pthread_workqueue_override_start_direct_check_owner();
    }
    else if ((v6 & 0x1000000000) != 0)
    {
      _dispatch_mach_push_send_barrier_drain(result, BYTE4(v16) & 7);
    }
    else
    {
      if (!v9 || *(_DWORD *)(v4 + 88) || (result[20] & 0x10000000) != 0)
      {
        v18 = *(uint64_t (**)(void))(*(_QWORD *)result + 80);
        return (unsigned int *)v18();
      }
      if ((v15 & 0x1000000000) != 0)
      {
        v18 = *(uint64_t (**)(void))(*(_QWORD *)result + 80);
        return (unsigned int *)v18();
      }
    }
    return (unsigned int *)_os_object_release_internal_n_VARIANT_mp(v3, (const char *)2);
  }
  *(_QWORD *)(v4 + 80) = a2;
  *(_QWORD *)(StatusReg + 976) = 0;
  v19 = (unint64_t *)(v4 + 64);
  do
  {
    v15 = __ldxr(v19);
    if ((v15 & 0x700000000) >= v13)
      v20 = v15;
    else
      v20 = v13 | v15 & 0xFFFFFF50FFFFFFFFLL | 0x800000000;
    v16 = v20 | v6;
  }
  while (__stlxr(v16, v19));
  if ((v15 & 0x8000000000) == 0 || *v11 == 0x7FFFFFFF)
    goto LABEL_20;
  do
    v21 = __ldxr(v11);
  while (__stlxr(v21 - 2, v11));
  if (v21 > 2)
    goto LABEL_20;
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
  return result;
}

uint64_t dispatch_mach_get_checkin_port_VARIANT_mp(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 80) & 0x10000000) != 0)
    return 0xFFFFFFFFLL;
  else
    return *(unsigned int *)(*(_QWORD *)(a1 + 120) + 96);
}

BOOL dispatch_mach_can_handoff_4libxpc_VARIANT_mp()
{
  unint64_t v0;
  uint64_t v1;

  v0 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 184;
  while (1)
  {
    v0 = *(_QWORD *)v0;
    if (!v0)
      break;
    if (*(char **)(v0 + 8) == "mach_msg")
    {
      v1 = *(_QWORD *)(v0 + 16);
      if (v1)
        return *(_QWORD *)(v1 + 56) == 0;
      return 0;
    }
  }
  return 0;
}

uint64_t dispatch_mach_handoff_reply_f_VARIANT_mp(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  _QWORD *v8;
  uint64_t result;
  unsigned int *v10;
  int v11;
  unint64_t StatusReg;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  int v16;
  int v17;
  unsigned int v18;

  v7 = _dispatch_mach_handoff_context(a2);
  v8 = *(_QWORD **)(v7 + 16);
  result = _dispatch_mach_handoff_set_wlh((uint64_t)v8, a1);
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    v10 = (unsigned int *)(a1 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    if (v11 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  *(_QWORD *)(v7 + 24) = a1;
  *v8 = 260;
  v8[4] = a4;
  v8[5] = a3;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v13 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
  if (v13 >= 0x10FF)
    v13 = 4351;
  v14 = *(_QWORD *)(StatusReg + 224);
  if (v14)
  {
    v15 = (unsigned int *)(v14 + 12);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    if (v16 <= 0)
      dispatch_group_notify_VARIANT_mp_cold_3();
  }
  v8[3] = v14;
  if (v13)
  {
    v17 = *(_DWORD *)(a1 + 84);
    if ((v17 & 0x40000000) != 0 || (v17 & 0xFFF) == 0)
    {
      v18 = __clz(__rbit32(v13 >> 8)) + 1;
    }
    else
    {
      v18 = 0;
      v13 = 0;
    }
  }
  else
  {
    v18 = 0;
  }
  v8[1] = v13;
  *(_DWORD *)(v7 + 32) = v18;
  *v8 = &unk_1E1E86878;
  return result;
}

unint64_t _dispatch_mach_handoff_context(unsigned int a1)
{
  unint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;

  v2 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 184;
  do
  {
    v2 = *(_QWORD *)v2;
    if (!v2)
      goto LABEL_11;
  }
  while (*(char **)(v2 + 8) != "mach_msg");
  v3 = *(unsigned int **)(v2 + 16);
  if (!v3)
LABEL_11:
    _dispatch_mach_handoff_context_cold_1();
  if (*(_QWORD *)(*(_QWORD *)v3 + 40) == 515)
  {
    v3 = (unsigned int *)_dispatch_calloc(1uLL, 0x50uLL);
    *(_QWORD *)(v2 + 16) = v3;
    v3[18] = 1;
  }
  else
  {
    v4 = v3 + 18;
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  if (*((_QWORD *)v3 + 7))
    _dispatch_mach_handoff_context_cold_2();
  *((_QWORD *)v3 + 7) = a1;
  return v2;
}

uint64_t _dispatch_mach_handoff_set_wlh(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t StatusReg;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  char v15;

  v2 = result;
  v3 = (uint64_t *)(a2 + 24);
  if (*(_QWORD *)(a2 + 24))
  {
    v4 = a2;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      if ((*(_DWORD *)(v4 + 80) & 0x400000) != 0)
      {
        v8 = (unsigned int *)(v4 + 80);
        v9 = (unsigned int *)(v4 + 100);
        v10 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        while (!__ldaxr(v9))
        {
          if (!__stxr(v10, v9))
            goto LABEL_12;
        }
        __clrex();
        result = _dispatch_unfair_lock_lock_slow_VARIANT_mp(v4 + 100);
        do
LABEL_12:
          v12 = __ldxr(v8);
        while (__stxr(v12 & 0xFFBFFFFF, v8));
        v13 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        do
          v14 = __ldxr(v9);
        while (__stlxr(0, v9));
        if (v14 != v13)
        {
          v15 = v14;
          result = _dispatch_unfair_lock_unlock_slow_VARIANT_mp(v4 + 100, v14);
          if ((v15 & 2) != 0 && (*(_QWORD *)(StatusReg + 200) & 0xF0000) == 0)
            *(_QWORD *)(StatusReg + 200) = *(_QWORD *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
        }
      }
      if ((*(_QWORD *)(v4 + 56) & 0x2000000000) != 0)
        break;
      v4 = *v3;
      v6 = *v3;
      v7 = *(_QWORD *)(v6 + 24);
      v3 = (uint64_t *)(v6 + 24);
      if (!v7)
        goto LABEL_19;
    }
  }
  else
  {
LABEL_19:
    v4 = 0;
  }
  *(_QWORD *)(v2 + 64) = v4;
  return result;
}

uint64_t *dispatch_mach_handoff_reply_VARIANT_mp(unsigned int *a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t *v6;
  unsigned int *v7;
  int v8;
  void *v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t StatusReg;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  int v15;
  unsigned int v16;
  uint64_t *result;

  v5 = _dispatch_mach_handoff_context(a2);
  v6 = *(uint64_t **)(v5 + 16);
  _dispatch_mach_handoff_set_wlh((uint64_t)v6, (uint64_t)a1);
  if (a1[2] != 0x7FFFFFFF)
  {
    v7 = a1 + 2;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    if (v8 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  *(_QWORD *)(v5 + 24) = a1;
  v9 = _dispatch_Block_copy(a3);
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a3[2];
  *v6 = 276;
  if (v10 == ___dispatch_block_create_block_invoke)
  {
    v6[5] = (uint64_t)v9;
    result = _dispatch_continuation_init_slow_VARIANT_mp(v6, a1, 0);
  }
  else
  {
    v6[4] = (uint64_t)_dispatch_call_block_and_release;
    v6[5] = (uint64_t)v9;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v12 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
    if (v12 >= 0x10FF)
      v12 = 4351;
    v13 = *(_QWORD *)(StatusReg + 224);
    if (v13)
    {
      v14 = (unsigned int *)(v13 + 12);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      if (v15 <= 0)
        dispatch_group_notify_VARIANT_mp_cold_3();
    }
    v6[3] = v13;
    if (v12)
    {
      v16 = a1[21];
      if ((v16 & 0x40000000) != 0 || (v16 & 0xFFF) == 0)
      {
        result = (uint64_t *)(__clz(__rbit32(v12 >> 8)) + 1);
      }
      else
      {
        result = 0;
        v12 = 0;
      }
    }
    else
    {
      result = 0;
    }
    v6[1] = v12;
  }
  *(_DWORD *)(v5 + 32) = (_DWORD)result;
  v6[6] = *v6;
  *v6 = (uint64_t)&unk_1E1E86878;
  return result;
}

double _dispatch_mach_ipc_handoff_invoke_VARIANT_mp(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *StatusReg;
  unsigned int v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  BOOL v22;
  signed int v23;
  void *v24;
  double result;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;

  v29[1] = "mach_msg";
  v29[2] = a1;
  v30 = 0;
  v31 = 0;
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = *(_DWORD *)(a1 + 56);
  v7 = (unint64_t *)(a1 + 64);
  do
    v8 = __ldxr(v7);
  while (__stxr(0, v7));
  if (v8)
  {
    if ((v8 & 1) != 0)
      v8 = ~v8;
    else
      _dispatch_sync_ipc_handoff_begin_VARIANT_mp(v8, v6, (uint64_t)v7);
  }
  *(_QWORD *)(a1 + 16) = -1985229329;
  *(_QWORD *)(a1 + 56) = 0;
  v29[0] = StatusReg[23];
  StatusReg[23] = v29;
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = -1;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10 == -1)
  {
    v17 = 0;
  }
  else
  {
    v11 = StatusReg[25];
    if (((v11 >> 8) & 0xF) != 0)
      v12 = 256 << ((BYTE1(v11) & 0xFu) - 1);
    else
      v12 = 0;
    v13 = v12 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    v14 = v10 & 0xFFFFFF;
    if ((v10 & 0xFFFFFF) != 0)
    {
      v15 = v12 & 0xFFFFFF00;
      if ((v11 & 0x44000000) == 0 && (*(_QWORD *)(a1 + 8) & 0x10000000) == 0)
        v17 = v13;
      else
        v17 = v10 & 0xFFFFFF;
      if (v14 < v15)
        v17 = v13;
    }
    else if ((unsigned __int16)v11 >> 12)
    {
      v17 = (256 << (((unsigned __int16)v11 >> 12) - 1)) | 0xFF;
    }
    else
    {
      v17 = v12 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    }
  }
  v18 = v17 & 0xFFFFFFFF02FFFFFFLL;
  v19 = StatusReg[4];
  if ((v19 & 0x1000000) != 0)
  {
    if (v18)
      goto LABEL_40;
    v18 = v19 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v18 == (v19 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_24;
  }
  if (v18)
  {
LABEL_40:
    _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v18, v9, 6);
    if ((a3 & 0x1000000) == 0)
      goto LABEL_31;
    goto LABEL_41;
  }
LABEL_24:
  if (v9 == -1)
    goto LABEL_30;
  if (StatusReg[28] != v9)
  {
    v18 = 0;
    goto LABEL_40;
  }
  if (v9)
  {
    v20 = (unsigned int *)(v9 + 12);
    do
    {
      v21 = __ldxr(v20);
      v22 = __OFSUB__(v21, 1);
      v23 = v21 - 1;
    }
    while (__stxr(v23, v20));
    if ((v23 < 0) ^ v22 | (v23 == 0))
      _dispatch_async_redirect_invoke_cold_1();
  }
LABEL_30:
  if ((a3 & 0x1000000) == 0)
  {
LABEL_31:
    v24 = 0;
    goto LABEL_42;
  }
LABEL_41:
  v24 = (void *)MEMORY[0x18D766D94]();
LABEL_42:
  _dispatch_client_callout(*(_QWORD *)(a1 + 40), *(uint64_t (**)(void))(a1 + 32));
  if (v24)
    objc_autoreleasePoolPop(v24);
  v26 = v30;
  StatusReg[23] = v29[0];
  if (v26)
  {
    _dispatch_mach_ipc_handoff_async((uint64_t)v29);
  }
  else
  {
    v27 = (unsigned int *)(a1 + 72);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 - 1, v27));
    if (!v28)
      free((void *)a1);
  }
  if (v8)
    return _dispatch_sync_ipc_handoff_end_VARIANT_mp(v8, v6);
  return result;
}

void *_dispatch_mach_ipc_handoff_async(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = v2[7];
  v4 = v2[8];
  (*(void (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24), v2, *(unsigned int *)(a1 + 32));
  if (v4)
  {
    v6 = v2 + 8;
    _dispatch_sync_ipc_handoff_begin_VARIANT_mp(v4, v3, (uint64_t)(v2 + 8));
    while (1)
    {
      v7 = __ldxr(v6);
      if (v7 != v4)
        break;
      if (!__stxr(~v4, v6))
        goto LABEL_7;
    }
    __clrex();
  }
LABEL_7:
  v8 = (unsigned int *)(v2 + 9);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 - 1, v8));
  if (!v9)
    free(v2);
  return _os_object_release_internal_VARIANT_mp(*(void **)(a1 + 24), v5);
}

void _dispatch_mach_msg_invoke_VARIANT_mp(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *StatusReg;
  uint64_t v6;
  _OWORD *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  BOOL v23;
  signed int v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  mach_msg_header_t *v28;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = StatusReg[20];
  v7 = (_OWORD *)StatusReg[21];
  *((_OWORD *)StatusReg + 10) = *v7;
  v8 = *(_DWORD *)(a1 + 48);
  v9 = v8 & 0xFFFFC000;
  v10 = 3;
  if (v8)
    v10 = 4;
  if (v9 == -117964800)
    v11 = 0;
  else
    v11 = v8;
  if (v9 == -117964800)
    v12 = v8 & 0x3FFF;
  else
    v12 = v10;
  v30 = 0;
  v31 = 0;
  v29[1] = "mach_msg";
  v29[2] = a1;
  v29[0] = StatusReg[23];
  StatusReg[23] = v29;
  v13 = *(_QWORD *)(v6 + 88);
  *(_QWORD *)(a1 + 16) = -1985229329;
  v15 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(a1 + 64);
  if (v15 == -1)
  {
    v18 = 0;
  }
  else
  {
    v16 = StatusReg[25];
    if (((v16 >> 8) & 0xF) != 0)
      v17 = 256 << ((BYTE1(v16) & 0xFu) - 1);
    else
      v17 = 0;
    v18 = v15 & 0xFFFFFF;
    if (v18)
    {
      if (v18 < (v17 & 0xFFFFFF00))
        v18 = v17 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    }
    else if ((unsigned __int16)v16 >> 12)
    {
      v18 = (256 << (((unsigned __int16)v16 >> 12) - 1)) | 0xFF;
    }
    else
    {
      v18 = v17 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    }
  }
  v19 = v18 & 0xFFFFFFFF02FFFFFFLL;
  v20 = StatusReg[4];
  if ((v20 & 0x1000000) != 0)
  {
    if (v19)
    {
LABEL_52:
      _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v19, v14, 7);
      goto LABEL_26;
    }
    v19 = v20 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v19 == (v20 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_20;
  }
  if (v19)
    goto LABEL_52;
LABEL_20:
  if (v14 == -1)
    goto LABEL_26;
  if (StatusReg[28] != v14)
  {
    v19 = 0;
    goto LABEL_52;
  }
  if (v14)
  {
    v21 = (unsigned int *)(v14 + 12);
    do
    {
      v22 = __ldxr(v21);
      v23 = __OFSUB__(v22, 1);
      v24 = v22 - 1;
    }
    while (__stxr(v24, v21));
    if ((v24 < 0) ^ v23 | (v24 == 0))
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
      __break(1u);
      return;
    }
  }
LABEL_26:
  v25 = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if ((a3 & 0x1000000) != 0)
    v25 = (void *)MEMORY[0x18D766D94]();
  if ((a3 & 4) == 0)
  {
    if ((*(_WORD *)(v6 + 116) & 4) == 0)
      _dispatch_mach_connect_invoke(v6);
    if (v12 == 2 && (*(_DWORD *)(v6 + 80) & 0x10000000) != 0)
    {
      v28 = (mach_msg_header_t *)(a1 + 88);
      if (*(_DWORD *)(a1 + 72))
        v28 = *(mach_msg_header_t **)&v28->msgh_bits;
      mach_msg_destroy(v28);
      if (!v25)
        goto LABEL_37;
    }
    else
    {
      _dispatch_client_callout4(*(_QWORD *)(v13 + 48), v12, a1, v11, *(uint64_t (**)(void))(v13 + 40));
      if (!v25)
        goto LABEL_37;
    }
    goto LABEL_36;
  }
  _dispatch_client_callout3(*(_QWORD *)(v13 + 48), v12, a1, *((uint64_t (**)(void))_dispatch_mach_xpc_hooks + 3));
  if (v25)
LABEL_36:
    objc_autoreleasePoolPop(v25);
LABEL_37:
  dispatch_release_VARIANT_mp((unsigned int *)a1, v26);
  v27 = v30;
  StatusReg[23] = v29[0];
  if (v27)
    _dispatch_mach_ipc_handoff_async((uint64_t)v29);
  StatusReg[20] = v6;
  StatusReg[21] = v7;
}

void _dispatch_mach_barrier_invoke_VARIANT_mp(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t StatusReg;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  BOOL v26;
  signed int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  void *v31;
  void *v32;

  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if (v6 == 1024)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v8 = *(_QWORD *)(StatusReg + 160);
    v9 = *(_OWORD **)(StatusReg + 168);
    *(_OWORD *)(StatusReg + 160) = *v9;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = *(_QWORD *)(v5 + 88);
  if ((*(_WORD *)(v5 + 116) & 4) == 0)
  {
    if ((a3 & 0x1000000) != 0)
    {
      v32 = (void *)MEMORY[0x18D766D94]();
      _dispatch_mach_connect_invoke(v5);
      objc_autoreleasePoolPop(v32);
    }
    else
    {
      _dispatch_mach_connect_invoke(v5);
    }
  }
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = -1;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12 == -1)
  {
    v20 = 0;
  }
  else
  {
    v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 200);
    if (((v13 >> 8) & 0xF) != 0)
      v14 = 256 << ((BYTE1(v13) & 0xFu) - 1);
    else
      v14 = 0;
    v15 = v14 & 0xFFFFFFFFFFFFFF00 | v13;
    v16 = v12 & 0xFFFFFF;
    if ((v12 & 0xFFFFFF) != 0)
    {
      v17 = v14 & 0xFFFFFF00;
      v18 = v12 & 0x10000000;
      if ((v13 & 0x44000000) == 0 && v18 == 0)
        v20 = v15;
      else
        v20 = v16;
      if (v16 < v17)
        v20 = v15;
    }
    else if ((unsigned __int16)v13 >> 12)
    {
      v20 = (256 << (((unsigned __int16)v13 >> 12) - 1)) | 0xFF;
    }
    else
    {
      v20 = v14 & 0xFFFFFFFFFFFFFF00 | v13;
    }
  }
  v21 = v20 & 0xFFFFFFFF02FFFFFFLL;
  v22 = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v23 = v22[4];
  if ((v23 & 0x1000000) != 0)
  {
    if (v21)
    {
LABEL_53:
      _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v21, v11, 6);
      goto LABEL_28;
    }
    v21 = v23 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v21 == (v23 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_22;
  }
  if (v21)
    goto LABEL_53;
LABEL_22:
  if (v11 == -1)
    goto LABEL_28;
  if (v22[28] != v11)
  {
    v21 = 0;
    goto LABEL_53;
  }
  if (v11)
  {
    v24 = (unsigned int *)(v11 + 12);
    do
    {
      v25 = __ldxr(v24);
      v26 = __OFSUB__(v25, 1);
      v27 = v25 - 1;
    }
    while (__stxr(v27, v24));
    if ((v27 < 0) ^ v26 | (v27 == 0))
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
      __break(1u);
      return;
    }
  }
LABEL_28:
  v28 = v22[22];
  if (v28)
    v29 = *(_DWORD *)(v28 + 8) + 1;
  else
    v29 = 1;
  v30 = a1;
  if (v29 <= _dispatch_continuation_cache_limit)
  {
    v30 = 0;
    *(_QWORD *)(a1 + 16) = v28;
    *(_DWORD *)(a1 + 8) = v29;
    v22[22] = a1;
  }
  if ((a3 & 0x1000000) != 0)
    v31 = (void *)MEMORY[0x18D766D94]();
  else
    v31 = 0;
  _dispatch_client_callout(*(_QWORD *)(a1 + 40), *(uint64_t (**)(void))(a1 + 32));
  _dispatch_client_callout4(*(_QWORD *)(v10 + 48), 6, 0, 0, *(uint64_t (**)(void))(v10 + 40));
  if (v31)
    objc_autoreleasePoolPop(v31);
  if (v30)
    _dispatch_continuation_free_to_cache_limit_VARIANT_mp(v30);
  if (v6 == 1024)
  {
    v22[20] = v8;
    v22[21] = v9;
  }
}

uint64_t _dispatch_mach_connect_invoke(uint64_t a1)
{
  uint64_t result;

  result = _dispatch_client_callout4(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 48), 1, 0, 0, *(uint64_t (**)(void))(*(_QWORD *)(a1 + 88) + 40));
  *(_WORD *)(a1 + 116) |= 4u;
  return result;
}

unsigned int *dispatch_mach_send_barrier_f_VARIANT_mp(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  _QWORD *StatusReg;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;

  v5 = result;
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = (unsigned int *)StatusReg[22];
  if (v7)
  {
    StatusReg[22] = *((_QWORD *)v7 + 2);
  }
  else
  {
    result = (unsigned int *)_dispatch_continuation_alloc_from_heap_VARIANT_mp();
    v7 = result;
  }
  *(_QWORD *)v7 = 260;
  *((_QWORD *)v7 + 4) = a3;
  *((_QWORD *)v7 + 5) = a2;
  v8 = StatusReg[4] & 0xFFFFFFLL;
  if (v8 >= 0x10FF)
    v8 = 4351;
  v9 = StatusReg[28];
  if (!v9)
    goto LABEL_9;
  v10 = (unsigned int *)(v9 + 12);
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  if (v11 <= 0)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
  else
  {
LABEL_9:
    *((_QWORD *)v7 + 3) = v9;
    if (v8)
    {
      v12 = (v5[21] >> 30) & 1;
      if ((v5[21] & 0xFFF) == 0)
        v12 = 1;
      if (!v12)
        v8 = 0;
    }
    *((_QWORD *)v7 + 6) = *(_QWORD *)v7;
    *((_QWORD *)v7 + 7) = v5;
    *(_QWORD *)v7 = &unk_1E1E866C8;
    *((_QWORD *)v7 + 1) = v8;
    v13 = __clz(__rbit32(v8 >> 8));
    if (v8 >= 0x100)
      v14 = v13 + 1;
    else
      v14 = 0;
    return _dispatch_mach_send_push(v5, (unint64_t)v7, v14);
  }
  return result;
}

unsigned int *dispatch_mach_send_barrier_VARIANT_mp(unsigned int *a1, uint64_t (**aBlock)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  _QWORD *StatusReg;
  uint64_t *v5;
  unsigned int *result;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = (uint64_t *)StatusReg[22];
  if (v5)
    StatusReg[22] = v5[2];
  else
    v5 = (uint64_t *)_dispatch_continuation_alloc_from_heap_VARIANT_mp();
  result = (unsigned int *)_dispatch_Block_copy(aBlock);
  v7 = aBlock[2];
  *v5 = 276;
  if (v7 == ___dispatch_block_create_block_invoke)
  {
    v5[5] = (uint64_t)result;
    _dispatch_continuation_init_slow_VARIANT_mp(v5, a1, 0);
    v8 = v5[1];
  }
  else
  {
    v5[4] = (uint64_t)_dispatch_call_block_and_release;
    v5[5] = (uint64_t)result;
    v8 = StatusReg[4] & 0xFFFFFFLL;
    if (v8 >= 0x10FF)
      v8 = 4351;
    v9 = StatusReg[28];
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 12);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      if (v11 <= 0)
      {
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
        __break(1u);
        return result;
      }
    }
    v5[3] = v9;
    if (v8)
    {
      v12 = (a1[21] >> 30) & 1;
      if ((a1[21] & 0xFFF) == 0)
        v12 = 1;
      if (!v12)
        v8 = 0;
    }
    v5[1] = v8;
  }
  v5[6] = *v5;
  v5[7] = (uint64_t)a1;
  *v5 = (uint64_t)&unk_1E1E866C8;
  v14 = (v8 >> 8) & 0x3FFF;
  v13 = v14 == 0;
  v15 = __clz(__rbit32(v14));
  if (v13)
    v16 = 0;
  else
    v16 = v15 + 1;
  return _dispatch_mach_send_push(a1, (unint64_t)v5, v16);
}

_DWORD *dispatch_mach_receive_barrier_f_VARIANT_mp(_DWORD *result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  _QWORD *StatusReg;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  int v12;

  v5 = result;
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = (_QWORD *)StatusReg[22];
  if (v7)
  {
    StatusReg[22] = v7[2];
  }
  else
  {
    result = _dispatch_continuation_alloc_from_heap_VARIANT_mp();
    v7 = result;
  }
  *v7 = 260;
  v7[4] = a3;
  v7[5] = a2;
  v8 = StatusReg[4] & 0xFFFFFFLL;
  if (v8 >= 0x10FF)
    v8 = 4351;
  v9 = StatusReg[28];
  if (!v9)
    goto LABEL_9;
  v10 = (unsigned int *)(v9 + 12);
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  if (v11 <= 0)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
  else
  {
LABEL_9:
    v7[3] = v9;
    if (v8)
    {
      v12 = v5[21];
      if ((v12 & 0x40000000) == 0 && (v12 & 0xFFF) != 0)
        v8 = 0;
    }
    v7[6] = *v7;
    v7[7] = v5;
    *v7 = &unk_1E1E86710;
    v7[1] = v8;
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 88))(v5);
  }
  return result;
}

void *dispatch_mach_receive_barrier_VARIANT_mp(unsigned int *a1, uint64_t (**aBlock)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  _QWORD *StatusReg;
  uint64_t *v5;
  void *result;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  unsigned int v12;
  uint64_t *inited;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = (uint64_t *)StatusReg[22];
  if (v5)
    StatusReg[22] = v5[2];
  else
    v5 = (uint64_t *)_dispatch_continuation_alloc_from_heap_VARIANT_mp();
  result = _dispatch_Block_copy(aBlock);
  v7 = aBlock[2];
  *v5 = 276;
  if (v7 == ___dispatch_block_create_block_invoke)
  {
    v5[5] = (uint64_t)result;
    inited = _dispatch_continuation_init_slow_VARIANT_mp(v5, a1, 0);
LABEL_16:
    v5[6] = *v5;
    v5[7] = (uint64_t)a1;
    *v5 = (uint64_t)&unk_1E1E86710;
    return (void *)(*(uint64_t (**)(unsigned int *, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 88))(a1, v5, inited);
  }
  v5[4] = (uint64_t)_dispatch_call_block_and_release;
  v5[5] = (uint64_t)result;
  v8 = StatusReg[4] & 0xFFFFFFLL;
  if (v8 >= 0x10FF)
    v8 = 4351;
  v9 = StatusReg[28];
  if (!v9)
    goto LABEL_10;
  v10 = (unsigned int *)(v9 + 12);
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  if (v11 > 0)
  {
LABEL_10:
    v5[3] = v9;
    if (v8)
    {
      v12 = a1[21];
      if ((v12 & 0x40000000) != 0 || (v12 & 0xFFF) == 0)
      {
        inited = (uint64_t *)(__clz(__rbit32(v8 >> 8)) + 1);
      }
      else
      {
        inited = 0;
        v8 = 0;
      }
    }
    else
    {
      inited = 0;
    }
    v5[1] = v8;
    goto LABEL_16;
  }
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
  __break(1u);
  return result;
}

unsigned int *dispatch_mach_cancel_VARIANT_mp(unsigned int *result, const char *a2)
{
  unsigned int *v2;
  unsigned int *v3;
  int v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = result;
  if (result[2] == 0x7FFFFFFF)
    goto LABEL_5;
  v3 = result + 2;
  do
    v4 = __ldxr(v3);
  while (__stxr(v4 + 1, v3));
  if (v4 > 0)
  {
LABEL_5:
    v5 = result + 20;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 | 0x10000000, v5));
    if ((v6 & 0x10000000) == 0)
      dispatch_mach_reconnect_VARIANT_mp((uint64_t)result, 0, -1);
    return (unsigned int *)_os_object_release_internal_VARIANT_mp(v2, a2);
  }
  else
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
  }
  return result;
}

uint64_t _dispatch_mach_activate_VARIANT_mp(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = _dispatch_lane_activate_VARIANT_mp(a1);
  if ((*(_WORD *)(a1 + 116) & 1) == 0)
  {
    v3 = 0;
    result = _dispatch_queue_compute_priority_and_wlh_VARIANT_mp(a1, &v3);
    if ((_DWORD)result)
      return _dispatch_mach_install(a1, v3, result);
  }
  return result;
}

uint64_t _dispatch_mach_install(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t result;
  char *v10;

  v4 = *(_DWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_WORD *)(a1 + 116);
  *(_WORD *)(a1 + 116) = v6 | 1;
  result = *(unsigned int *)(*(_QWORD *)(a1 + 120) + 88);
  if ((result & 0x80000000) != 0)
    _dispatch_mach_install_cold_1(result);
  if (*(_DWORD *)(a1 + 84))
  {
    if ((v4 & 0x10000000) != 0)
      return result;
  }
  else
  {
    *(_DWORD *)(a1 + 84) = a3;
    if ((v4 & 0x10000000) != 0)
      return result;
  }
  if ((v6 & 0x10) != 0)
  {
    result = (*((uint64_t (**)(_QWORD))_dispatch_mach_xpc_hooks + 4))(*(_QWORD *)(v5 + 48));
    if ((_DWORD)result)
    {
      v10 = _dispatch_unote_create_with_handle_VARIANT_mp((uint64_t)&_dispatch_xpc_type_sigterm_VARIANT_mp, 15, 0);
      *((_QWORD *)v10 + 1) = ~a1;
      *(_QWORD *)(a1 + 128) = v10;
      result = _dispatch_unote_register_VARIANT_mp((uint64_t)v10, a2, a3);
    }
  }
  if (*(_DWORD *)(v5 + 24))
    return _dispatch_unote_register_VARIANT_mp(v5, a2, a3);
  return result;
}

unsigned int *_dispatch_mach_invoke_VARIANT_mp(unint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  const char *v15;
  unsigned int v16;
  unint64_t *v17;
  unint64_t v18;
  __objc2_class **v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v28;
  int v29;
  int v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v45;
  unint64_t StatusReg;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  __int128 v68;
  uint64_t v69;

  v4 = a2;
  v69 = 0;
  if ((a3 & 3) == 0)
    *(_QWORD *)(a1 + 16) = -1985229329;
  if ((a3 & 2) != 0)
  {
    v69 = 0x40020000000001;
    v6 = a3 & 0x40000;
    goto LABEL_5;
  }
  v45 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) - 0x20000000000;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v47 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
  v6 = a3 & 0x40000;
  v48 = 0xFFE00000FFFFFFFCLL;
  if ((a3 & 0x40000) != 0)
  {
    v49 = 0x4000000000;
  }
  else
  {
    v48 = 0xFFE00040FFFFFFFCLL;
    v49 = 1;
  }
  if ((a3 & 1) != 0)
    v50 = 0xFFE00040FFFFFFFCLL;
  else
    v50 = v48;
  v51 = *(_DWORD *)(StatusReg + 200);
  v52 = (v51 >> 8) & 0xF;
  v53 = (unsigned __int16)v51 >> 12;
  v54 = HIWORD(v51) & 0xF;
  if (v52 <= v53)
    v52 = v53;
  if (v52 > v54)
    v54 = v52;
  v55 = (unint64_t *)(a1 + 56);
  do
  {
    while (1)
    {
      v56 = __ldaxr(v55);
      if ((v56 & v50) != 0)
        break;
      if ((v56 & 0x1000000000) == 0 || (v57 = HIDWORD(v56) & 7, v57 <= v54))
      {
        v58 = (v56 >> 40) & 1;
        if (!((v45 + v56) >> 53))
          LODWORD(v58) = 1;
        if ((_DWORD)v58)
          v59 = 0x60000000000000;
        else
          v59 = 0x20000000000000;
        v60 = v47 | v56 & 0x7700000001 | v59;
        goto LABEL_152;
      }
      __clrex();
      v66 = v45;
      _pthread_workqueue_override_start_direct();
      v45 = v66;
      v61 = *(_DWORD *)(StatusReg + 200);
      v54 = v57;
      if ((HIWORD(v61) & 0xF) < v57)
      {
        *(_QWORD *)(StatusReg + 200) = v61 & 0xFFF0FFFF | ((_DWORD)v57 << 16);
        v54 = v57;
      }
    }
    if ((a3 & 1) != 0)
    {
      __clrex();
      goto LABEL_168;
    }
    v60 = v56 ^ v49;
LABEL_152:
    ;
  }
  while (__stxr(v60, v55));
  if ((v56 & v50) != 0)
  {
LABEL_168:
    v69 = 0;
    return (unsigned int *)_os_object_release_internal_n_VARIANT_mp((void *)a1, (const char *)2);
  }
  v62 = 0x60000000000000;
  if ((a3 & 1) == 0)
    v62 = v49 | 0x60000000000000;
  v69 = (v60 & v62) - (v56 & 0x3FFE0000000000);
  v4 = a2;
  if (!v69)
    return (unsigned int *)_os_object_release_internal_n_VARIANT_mp((void *)a1, (const char *)2);
LABEL_5:
  if (v6)
  {
    v65 = 0;
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 84);
    v8 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v9 = *(_QWORD *)(v8 + 200);
    if ((_DWORD)v9)
    {
      v10 = v7 & 0xFFF;
      if ((v7 & 0xFFF) != 0)
      {
        if (((unsigned __int16)v9 & 0xFFFu) > v10)
          v10 = v9 & 0xFFF;
        if ((unsigned __int16)v7 >> 12 <= v10 >> 8)
          v11 = 0x40000000;
        else
          v11 = 1140912128;
        v12 = v9 & 0x880F0000 | v10 | v11 & v7;
      }
      else
      {
        v13 = v9 | 0x40000000;
        if ((v9 & 0xFFF) == 0)
          v13 = *(_QWORD *)(v8 + 200);
        v14 = (unsigned __int16)v7 >> 12;
        v12 = v13 & 0xFFFF0FFF | v7 & 0x400F000;
        if (v14 <= ((v13 >> 8) & 0xF))
          v12 = v13;
      }
    }
    else
    {
      v12 = v7 & 0xFFF0FFFF;
    }
    *(_QWORD *)(v8 + 200) = v12;
    v65 = v9 & 0xFFF0FFFF;
  }
  if ((a3 & 0x100000) != 0 && (*(_DWORD *)(a1 + 80) & 0x400000) != 0)
  {
    v63 = (unsigned int *)(a1 + 80);
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 & 0xFFBFFFFF, v63));
  }
  if (((*(_DWORD *)(a1 + 80) << 8) & 0x3000000) != 0)
    v15 = (const char *)((*(_DWORD *)(a1 + 80) << 8) & 0x3000000 | a3 & 0xFCFFFFF7 | 8);
  else
    v15 = (const char *)(a3 | 8u);
  v16 = v15 & 0x1000002;
  v17 = (unint64_t *)(a1 + 56);
  v18 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (2)
  {
    while (2)
    {
      if (v16 == 2)
        _dispatch_last_resort_autorelease_pool_push(v4);
      v20 = (unint64_t *)(v18 + 160);
      v19 = *(__objc2_class ***)(v18 + 160);
      v21 = *(_QWORD *)(a1 + 120);
      v22 = *(_QWORD *)(a1 + 88);
      if ((v15 & 0x40000) == 0 && v22)
      {
        v23 = *(_QWORD *)(v18 + 232);
        v24 = v23 ? *(_QWORD *)(v23 + 24) : -4;
        v25 = *(_QWORD *)(v22 + 16) & 0xFFFFFFFFFFFFFFFCLL;
        v26 = v25 == -4 || v25 == 0;
        if (!v26 && v24 != v25)
          _dispatch_mach_handle_wlh_change(a1);
      }
      if ((*(_WORD *)(a1 + 116) & 1) == 0)
      {
        if ((v15 & 0x40000) != 0)
        {
          v28 = *(_QWORD *)(a1 + 24);
          goto LABEL_86;
        }
        if ((v15 & 0x10000) != 0)
          v38 = *(_DWORD *)(v18 + 200);
        else
          v38 = 0x2000000;
        v39 = *(_QWORD *)(v18 + 232);
        if (v39)
          v40 = *(_QWORD *)(v39 + 24);
        else
          v40 = -4;
        _dispatch_mach_install(a1, v40, v38);
      }
      if (!*(_QWORD *)(a1 + 48))
      {
        v28 = 0;
        goto LABEL_46;
      }
      v28 = *(_QWORD *)(a1 + 24);
      if (v19 != (__objc2_class **)v28)
        goto LABEL_46;
      while (2)
      {
        while (2)
        {
          v28 = _dispatch_lane_serial_drain_VARIANT_mp(a1, a2, v15, &v69);
LABEL_46:
          v29 = *(_DWORD *)(a1 + 80);
          if (!v28 && (v29 & 0x10000000) == 0 && *(_QWORD *)(v22 + 16) && (*(_QWORD *)(v22 + 16) & 3) == 0)
          {
            _dispatch_unote_resume_VARIANT_mp(v22);
            if (v19 == *(__objc2_class ***)(a1 + 24)
              && !v19[3]
              && !*(_QWORD *)(v21 + 72)
              && (*((_DWORD *)v19 + 21) & 0x80000000) != 0)
            {
              if (*(_QWORD *)(v18 + 40))
              {
                v36 = *(_QWORD *)(v18 + 232);
                if (v36)
                {
                  v37 = *(_QWORD *)(v36 + 24);
                  if (v37 != -4 && v37 == (*(_QWORD *)(v22 + 16) & 0xFFFFFFFFFFFFFFFCLL))
                  {
                    _dispatch_event_loop_drain_VARIANT_mp(1);
                    if (*(_QWORD *)(a1 + 48))
                      continue;
                  }
                }
              }
            }
            v29 = *(_DWORD *)(a1 + 80);
          }
          break;
        }
        if (!*(_QWORD *)(v21 + 72))
          goto LABEL_70;
        if ((*(_BYTE *)(v21 + 30) & 1) != 0 && !*(_DWORD *)(v21 + 88))
        {
LABEL_69:
          if (!v28)
            goto LABEL_78;
          goto LABEL_70;
        }
        if (*(_DWORD *)(v21 + 88))
          v31 = *(_QWORD *)(v21 + 16) != 0;
        else
          v31 = *(_WORD *)(a1 + 118) & 1;
        if (v31 && v19 != &_dispatch_mgr_q)
        {
          if (!v28)
            v28 = (unint64_t)&_dispatch_mgr_q;
          goto LABEL_85;
        }
        _dispatch_mach_send_invoke(a1, v15, 4 * (v19 != &_dispatch_mgr_q));
        if (v28)
        {
LABEL_70:
          if ((v29 & 0x10000000) == 0)
            goto LABEL_85;
          goto LABEL_71;
        }
        if (*(_QWORD *)(a1 + 48))
        {
          v28 = *(_QWORD *)(a1 + 24);
          goto LABEL_69;
        }
LABEL_78:
        if (*(_QWORD *)(v21 + 72))
          v28 = -1;
        else
          v28 = 0;
        if ((v29 & 0x10000000) == 0)
          goto LABEL_85;
LABEL_71:
        if ((v29 & 0x80000000) == 0)
        {
          _dispatch_mach_cancel(a1);
          if ((v32 & 1) == 0)
          {
            if (!v28)
              v28 = -1;
            goto LABEL_85;
          }
        }
        if ((*(_WORD *)(a1 + 116) & 8) != 0)
          goto LABEL_85;
        v17 = (unint64_t *)(a1 + 56);
        if (v19 == *(__objc2_class ***)(a1 + 24))
        {
          if (*(_QWORD *)(a1 + 56) >> 55)
          {
            v28 = (unint64_t)v19;
            goto LABEL_86;
          }
          if (!*(_QWORD *)(a1 + 48))
          {
            _dispatch_mach_cancel_invoke(a1, (int)v15);
LABEL_85:
            v17 = (unint64_t *)(a1 + 56);
            goto LABEL_86;
          }
          continue;
        }
        break;
      }
      if (!v28)
        v28 = *(_QWORD *)(a1 + 24);
LABEL_86:
      v16 = v15 & 0x1000002;
      v4 = a2;
      if ((v15 & 0x1000002) == 2)
      {
        v68 = *(_OWORD *)v20;
        *(_QWORD *)(v18 + 160) = a1;
        *(_QWORD *)(v18 + 168) = &v68;
        _dispatch_last_resort_autorelease_pool_pop(a2);
        *(_OWORD *)v20 = v68;
      }
      if (v28 + 1 > 1)
        goto LABEL_128;
      v33 = v69;
      while (2)
      {
        v34 = __ldxr(v17);
        v35 = (v34 - v33) & 0xFFFFFFF700000001;
        if (v34 >> 55)
        {
LABEL_94:
          if (!__stlxr(v35, v17))
          {
            if ((~v34 & 0x1800000000) == 0)
            {
              v42 = HIDWORD(v34) & 7;
              v43 = *(_DWORD *)(v18 + 200);
              if ((HIWORD(v43) & 0xF) < v42)
                *(_QWORD *)(v18 + 200) = v43 & 0xFFF0FFFF | ((_DWORD)v42 << 16);
            }
            v28 = 0;
            v69 = 0;
            goto LABEL_128;
          }
          continue;
        }
        break;
      }
      if ((v34 & 0x8000000000) == 0)
      {
        if (v28)
          v35 = (v34 - v33) & 0xFFFFFF7700000001 | 0x8000000000;
        else
          v35 = (v34 - v33) & 0xFFFFFFF000000001;
        goto LABEL_94;
      }
      __clrex();
      do
        v41 = __ldaxr(v17);
      while (__stxr(v41 ^ 0x8000000000, v17));
      if ((a3 & 1) != 0)
        continue;
      break;
    }
    v28 = *v20;
    if ((*(_QWORD *)(*(_QWORD *)*v20 + 40) & 0x10000) != 0)
      continue;
    break;
  }
LABEL_128:
  if ((v15 & 0x40000) == 0)
    *(_QWORD *)(v18 + 200) = *(_QWORD *)(v18 + 200) & 0xF0000 | v65;
  if (v28)
    return _dispatch_queue_invoke_finish_VARIANT_mp((unint64_t *)a1, a2, (__objc2_class **)v28, v69);
  return (unsigned int *)_os_object_release_internal_n_VARIANT_mp((void *)a1, (const char *)2);
}

void _dispatch_mach_wakeup_VARIANT_mp(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  BOOL v7;

  v3 = *(_QWORD *)(a1 + 120);
  v4 = *(_DWORD *)(a1 + 80);
  if ((*(_WORD *)(a1 + 116) & 1) == 0 || *(_QWORD *)(a1 + 48))
    goto LABEL_3;
  if (!*(_QWORD *)(v3 + 72))
  {
    v5 = 0;
    if ((v4 & 0x10000000) == 0 || !(a3 & 0x10 | ~v4 & 0x50000000))
      goto LABEL_6;
    if ((*(_WORD *)(a1 + 116) & 8) == 0)
    {
LABEL_3:
      if (*(__objc2_class ***)(a1 + 24) == &_dispatch_mgr_q)
        v5 = (uint64_t)&_dispatch_mgr_q;
      else
        v5 = 1;
      goto LABEL_6;
    }
LABEL_16:
    v5 = 0;
    goto LABEL_6;
  }
  if (*(_DWORD *)(v3 + 64) > 3u || (*(_BYTE *)(v3 + 30) & 1) != 0 && !*(_DWORD *)(v3 + 88))
    goto LABEL_16;
  if (*(_DWORD *)(v3 + 88))
    v6 = *(_QWORD *)(v3 + 16) != 0;
  else
    v6 = *(_WORD *)(a1 + 118) & 1;
  v5 = (uint64_t)&_dispatch_mgr_q;
  if (v6)
    v7 = &_dispatch_mgr_q == (__objc2_class **)1;
  else
    v7 = 1;
  if (v7)
    goto LABEL_3;
LABEL_6:
  _dispatch_queue_wakeup_VARIANT_mp(a1, a2, a3, v5);
}

uint64_t _dispatch_xpc_sigterm_merge_evt_VARIANT_mp(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v5 = ~*(_QWORD *)(a1 + 8);
  _dispatch_barrier_async_detached_f_VARIANT_mp(v5, v5, (uint64_t)_dispatch_mach_sigterm_invoke);
  v6 = __clz(__rbit32((a4 >> 8) & 0x3FFF));
  if (((a4 >> 8) & 0x3FFF) != 0)
    v7 = v6 + 1;
  else
    v7 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 80))(v5, v7, 19);
}

uint64_t _dispatch_mach_sigterm_invoke(uint64_t a1)
{
  uint64_t result;

  result = _dispatch_unote_unregister_VARIANT_mp(*(_QWORD *)(a1 + 128), 5);
  if ((*(_DWORD *)(a1 + 80) & 0x10000000) == 0)
    return _dispatch_client_callout4(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 48), 11, 0, 0, *(uint64_t (**)(void))(*(_QWORD *)(a1 + 88) + 40));
  return result;
}

uint64_t dispatch_mach_msg_create_VARIANT_mp(const void *a1, size_t a2, int a3, _QWORD *a4)
{
  const void *v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;

  if (a2 < 0x18 || (v7 = a1) == 0 && a3)
    dispatch_mach_msg_create_VARIANT_mp_cold_1(a2);
  if (a3)
  {
    v8 = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_mach_msg, 96);
    *(_QWORD *)(v8 + 88) = v7;
    *(_QWORD *)(v8 + 16) = -1985229329;
    *(_QWORD *)(v8 + 24) = &unk_1ECCEA080;
    *(_DWORD *)(v8 + 72) = a3;
    *(_QWORD *)(v8 + 80) = a2;
    if (!a4)
      return v8;
    goto LABEL_12;
  }
  v9 = a2 + 88;
  if (a2 - 8 >= 0xFFFFFFFFFFFFFFA0)
    dispatch_mach_msg_create_VARIANT_mp_cold_2(a2);
  v10 = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_mach_msg, v9);
  v8 = v10;
  if (v7)
    memcpy((void *)(v10 + 88), v7, a2);
  *(_QWORD *)(v8 + 16) = -1985229329;
  *(_QWORD *)(v8 + 24) = &unk_1ECCEA080;
  *(_DWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 80) = a2;
  if (a4)
  {
    v7 = (const void *)(v8 + 88);
LABEL_12:
    *a4 = v7;
  }
  return v8;
}

void _dispatch_mach_msg_dispose_VARIANT_mp(uint64_t a1, const char *a2)
{
  uint64_t v3;
  unsigned int *v4;
  int v5;
  int v6;
  kern_return_t v7;

  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 12);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 - 1, v4));
    if (v5 <= 1)
    {
      if (v5 != 1)
        _dispatch_async_redirect_invoke_cold_1();
      _voucher_xref_dispose_VARIANT_mp(v3, a2);
    }
    *(_QWORD *)(a1 + 64) = 0;
  }
  v6 = *(_DWORD *)(a1 + 72);
  if (v6 == 2)
  {
    v7 = mach_vm_deallocate(*MEMORY[0x1E0C883F0], *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 80));
    if (v7)
      _dispatch_bug(3000, v7);
  }
  else if (v6 == 1)
  {
    free(*(void **)(a1 + 88));
  }
}

uint64_t dispatch_mach_msg_get_msg_VARIANT_mp(uint64_t a1, _QWORD *a2)
{
  int v2;
  uint64_t result;

  if (a2)
    *a2 = *(_QWORD *)(a1 + 80);
  v2 = *(_DWORD *)(a1 + 72);
  result = a1 + 88;
  if (v2)
    return *(_QWORD *)result;
  return result;
}

void _dispatch_mach_msg_async_reply_invoke_VARIANT_mp(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *StatusReg;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  BOOL v21;
  signed int v22;
  void *v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  int v29;
  uint64_t v30;
  int v31;
  _QWORD v32[3];
  uint64_t v33;
  uint64_t v34;

  v6 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(v6 + 48);
  v8 = 3;
  if (v7)
    v8 = 4;
  if (v7 >> 14 == 254944)
    v9 = v7 & 0x3FFF;
  else
    v9 = v8;
  v33 = 0;
  v34 = 0;
  v32[1] = "mach_msg";
  v32[2] = v6;
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v32[0] = StatusReg[23];
  StatusReg[23] = v32;
  v11 = *(_QWORD *)(v5 + 88);
  *(_QWORD *)(v6 + 16) = -1985229329;
  v13 = *(_QWORD *)(v6 + 56);
  v12 = *(_QWORD *)(v6 + 64);
  if (v13 == -1)
  {
    v16 = 0;
  }
  else
  {
    v14 = StatusReg[25];
    if (((v14 >> 8) & 0xF) != 0)
      v15 = 256 << ((BYTE1(v14) & 0xFu) - 1);
    else
      v15 = 0;
    v16 = v13 & 0xFFFFFF;
    if (v16)
    {
      if (v16 < (v15 & 0xFFFFFF00))
        v16 = v15 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    }
    else if ((unsigned __int16)v14 >> 12)
    {
      v16 = (256 << (((unsigned __int16)v14 >> 12) - 1)) | 0xFF;
    }
    else
    {
      v16 = v15 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    }
  }
  v17 = v16 & 0xFFFFFFFF02FFFFFFLL;
  v18 = StatusReg[4];
  if ((v18 & 0x1000000) != 0)
  {
    if (v17)
    {
LABEL_49:
      _dispatch_set_priority_and_voucher_slow_VARIANT_mp(v17, v12, 7);
      goto LABEL_23;
    }
    v17 = v18 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v17 == (v18 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_17;
  }
  if (v17)
    goto LABEL_49;
LABEL_17:
  if (v12 == -1)
    goto LABEL_23;
  if (StatusReg[28] != v12)
  {
    v17 = 0;
    goto LABEL_49;
  }
  if (v12)
  {
    v19 = (unsigned int *)(v12 + 12);
    do
    {
      v20 = __ldxr(v19);
      v21 = __OFSUB__(v20, 1);
      v22 = v20 - 1;
    }
    while (__stxr(v22, v19));
    if ((v22 < 0) ^ v21 | (v22 == 0))
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
      __break(1u);
      goto LABEL_51;
    }
  }
LABEL_23:
  v23 = 0;
  *(_QWORD *)(v6 + 64) = 0;
  if ((a3 & 0x1000000) != 0)
    v23 = (void *)MEMORY[0x18D766D94]();
  _dispatch_client_callout3(*(_QWORD *)(v11 + 48), v9, v6, *((uint64_t (**)(void))_dispatch_mach_xpc_hooks + 3));
  if (v23)
    objc_autoreleasePoolPop(v23);
  dispatch_release_VARIANT_mp((unsigned int *)v6, v24);
  v26 = v33;
  StatusReg[23] = v32[0];
  if (v26)
    _dispatch_mach_ipc_handoff_async((uint64_t)v32);
  v27 = *(unsigned int **)(a1 + 56);
  if (v27[2] == 0x7FFFFFFF)
    goto LABEL_33;
  v28 = v27 + 2;
  do
    v29 = __ldxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (v29 > 1)
    goto LABEL_33;
  if (v29 != 1)
  {
LABEL_51:
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
    __break(1u);
    return;
  }
  _os_object_dispose(v27, v25);
LABEL_33:
  v30 = StatusReg[22];
  if (v30)
    v31 = *(_DWORD *)(v30 + 8) + 1;
  else
    v31 = 1;
  if (v31 > _dispatch_continuation_cache_limit)
  {
    _dispatch_continuation_free_to_cache_limit_VARIANT_mp(a1);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v30;
    *(_DWORD *)(a1 + 8) = v31;
    StatusReg[22] = a1;
  }
}

uint64_t dispatch_mach_msg_get_filter_policy_id_VARIANT_mp(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t result;

  if (!a2)
    dispatch_mach_msg_get_filter_policy_id_VARIANT_mp_cold_1();
  v2 = a1 + 88;
  if (*(_DWORD *)(a1 + 72))
  {
    v2 = *(_QWORD *)v2;
    if (!v2)
      dispatch_mach_msg_get_filter_policy_id_VARIANT_mp_cold_4(a1);
  }
  v3 = (unsigned int *)(v2 + ((*(unsigned int *)(v2 + 4) + 3) & 0x1FFFFFFFCLL));
  if (*v3)
    dispatch_mach_msg_get_filter_policy_id_VARIANT_mp_cold_3(*v3);
  result = v3[1];
  if (result < 0x44)
    dispatch_mach_msg_get_filter_policy_id_VARIANT_mp_cold_2(result);
  *a2 = v3[15];
  return result;
}

uint64_t dispatch_mig_server_VARIANT_mp(uint64_t a1, uint64_t a2, unsigned int (*a3)(mach_msg_header_t *, mach_msg_header_t *))
{
  mach_msg_option_t v4;
  size_t v5;
  uint64_t v6;
  mach_msg_header_t *v7;
  uint64_t v8;
  uint64_t v9;
  mach_msg_header_t *v10;
  char v11;
  int v12;
  unint64_t StatusReg;
  int v14;
  mach_msg_header_t *v15;
  BOOL v16;
  uint64_t v17;
  _DWORD *v18;
  const char *v19;
  uint64_t v20;
  int v21;
  unsigned int *v22;
  int v23;
  mach_port_t msgh_remote_port;
  mach_port_t v25;
  int v26;
  uint64_t v27;
  uint64_t v29;
  unsigned int (*v30)(mach_msg_header_t *, mach_msg_header_t *);
  uint64_t v31;
  uint64_t v32;

  v30 = a3;
  v32 = *MEMORY[0x1E0C874D8];
  v4 = 117442818;
  v5 = a2 + 68;
  v31 = *(_QWORD *)(a1 + 88);
  MEMORY[0x1E0C86820](a1, a2);
  v7 = (mach_msg_header_t *)((char *)&v29 - ((v6 + 83) & 0xFFFFFFFFFFFFFFF0));
  bzero(v7, v5);
  v7[1].msgh_remote_port = 0;
  MEMORY[0x1E0C86820](v8, v9);
  v10 = v7;
  bzero(v7, v5);
  v11 = 0;
  v7->msgh_size = 0;
  v12 = 1000;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v14 = 117442818;
  while (1)
  {
    v15 = v10;
    v10 = v7;
    if (*(_QWORD *)(a1 + 56) >> 55)
      v16 = 0;
    else
      v16 = (*(_DWORD *)(a1 + 80) & 0x10000000) == 0;
    if (!v16 || (--v12, !v12))
    {
      if ((v4 & 1) == 0)
        return 0;
      v14 &= ~2u;
      v4 &= ~2u;
    }
    v17 = mach_msg(v15, v4, v15->msgh_size, v5, *(_DWORD *)(v31 + 24), 0, 0);
    if ((_DWORD)v17)
      break;
    if ((v14 & 2) == 0)
      return 0;
    v18 = voucher_create_with_mach_msg_VARIANT_mp(&v15->msgh_bits);
    v20 = *(_QWORD *)(StatusReg + 224);
    if ((_DWORD *)v20 == v18)
      goto LABEL_21;
    *(_QWORD *)(StatusReg + 224) = v18;
    if (v18)
    {
      v19 = (const char *)v18[8];
      if (!v20)
        goto LABEL_17;
    }
    else
    {
      v19 = 0;
      if (!v20)
      {
LABEL_17:
        v21 = 0;
        goto LABEL_18;
      }
    }
    v21 = *(_DWORD *)(v20 + 32);
LABEL_18:
    if ((_DWORD)v19 != -1 && (_DWORD)v19 != v21)
      _dispatch_set_priority_and_mach_voucher_slow_VARIANT_mp(0, (int)v19);
LABEL_21:
    if (v20)
    {
      v22 = (unsigned int *)(v20 + 12);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 - 1, v22));
      if (v23 <= 1)
      {
        if (v23 != 1)
          _dispatch_async_redirect_invoke_cold_1();
        _voucher_xref_dispose_VARIANT_mp(v20, v19);
      }
    }
    *(_QWORD *)&v7->msgh_bits = 0;
    *(_QWORD *)&v7->msgh_remote_port = 0;
    *(_QWORD *)&v7->msgh_voucher_port = 0;
    if (!v30(v15, v7))
      goto LABEL_30;
    if ((v7->msgh_bits & 0x80000000) != 0)
      goto LABEL_31;
    msgh_remote_port = v7[1].msgh_remote_port;
    if (!msgh_remote_port)
      goto LABEL_31;
    if (msgh_remote_port == -305)
    {
      v7->msgh_remote_port = 0;
    }
    else
    {
LABEL_30:
      v15->msgh_remote_port = 0;
      mach_msg_destroy(v15);
    }
LABEL_31:
    v25 = v7->msgh_remote_port;
    v11 = 1;
    v7 = v15;
    v4 = v14;
    if (v25)
    {
      if ((v10->msgh_bits & 0x1F) == 0x12)
        v26 = 1;
      else
        v26 = 17;
      v4 = v26 | v14;
      v7 = v15;
    }
  }
  v27 = v17;
  if ((v17 - 268435459) < 2)
  {
    _dispatch_mig_consume_unsent_message(v15);
  }
  else if ((_DWORD)v17 != 268451842)
  {
    if ((_DWORD)v17 == 268451843)
    {
      if (v11 & 1 | (v15->msgh_remote_port != 0))
        return 0;
      else
        return 268451843;
    }
    else
    {
      _dispatch_bug_mach_client("dispatch_mig_server: mach_msg() failed", v17);
    }
  }
  return v27;
}

void _dispatch_mig_consume_unsent_message(mach_msg_header_t *a1)
{
  mach_port_t msgh_local_port;
  mach_msg_bits_t v3;
  kern_return_t v4;

  msgh_local_port = a1->msgh_local_port;
  if (msgh_local_port - 1 <= 0xFFFFFFFD)
  {
    v3 = (a1->msgh_bits >> 8) & 0x1F;
    if (v3 - 17 >= 2)
    {
      if (v3 != 16)
        goto LABEL_10;
      v4 = mach_port_mod_refs(*MEMORY[0x1E0C883F0], msgh_local_port, 1u, -1);
    }
    else
    {
      v4 = mach_port_deallocate(*MEMORY[0x1E0C883F0], msgh_local_port);
    }
    if (v4 == -301)
      _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
    if (v4)
      _dispatch_bug(3170, v4);
  }
LABEL_10:
  mach_msg_destroy(a1);
}

uint64_t dispatch_mach_mig_demux_VARIANT_mp(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  mach_msg_header_t *v4;
  mach_msg_id_t msgh_id;
  uint64_t v6;
  int v7;
  BOOL v8;
  int v9;
  uint64_t v11;
  void (**v12)(mach_msg_header_t *, char *);
  uint64_t v13;
  unint64_t StatusReg;
  uint64_t v15;
  mach_msg_header_t *v16;
  size_t v17;
  mach_port_t msgh_remote_port;
  mach_port_t v19;
  mach_msg_option_t v20;
  mach_msg_return_t v21;
  mach_port_name_t msgh_local_port;
  int v23;
  kern_return_t v24;
  _QWORD v25[4];

  v25[3] = *MEMORY[0x1E0C874D8];
  v25[1] = "mach_mig_demux";
  v25[2] = a1;
  v4 = (mach_msg_header_t *)(a4 + 88);
  if (*(_DWORD *)(a4 + 72))
    v4 = *(mach_msg_header_t **)&v4->msgh_bits;
  if (!a3)
    return 0;
  msgh_id = v4->msgh_id;
  while (1)
  {
    v6 = *a2;
    v7 = *(_DWORD *)(*a2 + 8);
    v8 = __OFSUB__(msgh_id, v7);
    v9 = msgh_id - v7;
    if (v9 < 0 == v8 && *(_DWORD *)(v6 + 12) > msgh_id)
      break;
    ++a2;
    if (!--a3)
      return 0;
  }
  v11 = v6 + 40 * v9;
  v13 = *(_QWORD *)(v11 + 40);
  v12 = (void (**)(mach_msg_header_t *, char *))(v11 + 40);
  if (!v13)
    return 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v25[0] = *(_QWORD *)(StatusReg + 184);
  *(_QWORD *)(StatusReg + 184) = v25;
  MEMORY[0x1E0C86820](a1, (*(_DWORD *)(v6 + 40 * v9 + 64) + 68));
  v16 = (mach_msg_header_t *)((char *)v25 - v15);
  bzero((char *)v25 - v15, v17);
  msgh_remote_port = v4->msgh_remote_port;
  v16->msgh_bits = v4->msgh_bits & 0x1F;
  v16->msgh_size = 36;
  *(_QWORD *)&v16->msgh_remote_port = msgh_remote_port;
  v16->msgh_voucher_port = 0;
  v16->msgh_id = msgh_id + 100;
  (*v12)(v4, (char *)v16);
  if ((v16->msgh_bits & 0x80000000) == 0)
  {
    v19 = v16[1].msgh_remote_port;
    if (v19 == -305)
      goto LABEL_32;
    if (v19)
    {
      v4->msgh_remote_port = 0;
      mach_msg_destroy(v4);
    }
  }
  if (v16->msgh_remote_port)
  {
    if ((v16->msgh_bits & 0x1F) == 0x12)
      v20 = 1;
    else
      v20 = 17;
    v21 = mach_msg(v16, v20, v16->msgh_size, 0, 0, 0, 0);
    if ((v21 - 268435459) >= 2)
    {
      if (v21)
      {
        if (v21 == -301)
          _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
        dispatch_mach_mig_demux_VARIANT_mp_cold_1(v21);
      }
      goto LABEL_32;
    }
    msgh_local_port = v16->msgh_local_port;
    if (msgh_local_port - 1 > 0xFFFFFFFD)
      goto LABEL_31;
    v23 = (v16->msgh_bits >> 8) & 0x1F;
    if ((v23 - 17) >= 2)
    {
      if (v23 != 16)
      {
LABEL_31:
        mach_msg_destroy(v16);
        goto LABEL_32;
      }
      v24 = mach_port_mod_refs(*MEMORY[0x1E0C883F0], msgh_local_port, 1u, -1);
    }
    else
    {
      v24 = mach_port_deallocate(*MEMORY[0x1E0C883F0], msgh_local_port);
    }
    if (v24 == -301)
      _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
    if (v24)
      _dispatch_bug(3170, v24);
    goto LABEL_31;
  }
LABEL_32:
  *(_QWORD *)(StatusReg + 184) = v25[0];
  return 1;
}

uint64_t dispatch_mach_mig_demux_get_context_VARIANT_mp()
{
  unint64_t v0;

  v0 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 184;
  do
  {
    v0 = *(_QWORD *)v0;
    if (!v0)
      dispatch_mach_mig_demux_get_context_VARIANT_mp_cold_1();
  }
  while (*(char **)(v0 + 8) != "mach_mig_demux");
  return *(_QWORD *)(v0 + 16);
}

uint64_t _dispatch_mach_msg_create_reply_disconnected(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int *v5;
  int v6;
  uint64_t result;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  unsigned int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int *v18;
  int v19;

  v5 = (int *)a1 + 13;
  if (!a1)
    v5 = (int *)(a2 + 24);
  v6 = *v5;
  if (*v5)
  {
    if (a2 && !*(_QWORD *)(a2 + 16) && *(_BYTE *)(a2 + 30))
    {
      v17 = *(_QWORD *)(a2 + 56);
      if (v17)
      {
        v18 = (unsigned int *)(v17 + 12);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 - 1, v18));
        if (v19 <= 1)
        {
          if (v19 != 1)
            _dispatch_async_redirect_invoke_cold_1();
          _voucher_xref_dispose_VARIANT_mp(v17, (const char *)a2);
        }
        *(_QWORD *)(a2 + 56) = 0;
      }
      _dispatch_destruct_reply_port();
      return 0;
    }
    result = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_mach_msg, 112);
    *(_QWORD *)(result + 16) = -1985229329;
    *(_QWORD *)(result + 24) = &unk_1ECCEA080;
    *(_DWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 24;
    *(_DWORD *)(result + 100) = v6;
    if (a1)
    {
      *(_QWORD *)(result + 32) = a1[4];
      v9 = a1[8];
      *(_QWORD *)(result + 56) = a1[7];
      *(_QWORD *)(result + 64) = v9;
      if (v9)
      {
        v10 = (unsigned int *)(v9 + 12);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        if (v11 <= 0)
          dispatch_group_notify_VARIANT_mp_cold_3();
      }
    }
    else
    {
      v14 = *(unsigned int *)(a2 + 40);
      v15 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(result + 56) = v14;
      *(_QWORD *)(result + 64) = v15;
      *(_QWORD *)(a2 + 56) = 0;
    }
    v16 = a3 | 0xF8F80000;
    if (!a3)
      v16 = 0;
    *(_DWORD *)(result + 48) = v16;
  }
  else
  {
    if (a1)
      return 0;
    result = *(_QWORD *)(a2 + 56);
    if (result)
    {
      v12 = (unsigned int *)(result + 12);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 - 1, v12));
      if (v13 <= 1)
      {
        if (v13 != 1)
          _dispatch_async_redirect_invoke_cold_1();
        _voucher_xref_dispose_VARIANT_mp(result, (const char *)a2);
      }
      result = 0;
      *(_QWORD *)(a2 + 56) = 0;
    }
  }
  return result;
}

void _dispatch_destruct_reply_port()
{
  int v0;

  v0 = thread_destruct_special_reply_port();
  if (v0 == -301)
    _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
  if (v0)
    _dispatch_bug(515, v0);
}

void _dispatch_mach_send_drain(unint64_t a1, const char *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  int v32;
  unsigned int v33;
  unint64_t StatusReg;
  unsigned int v35;
  uint64_t v37;

  v35 = a2;
  v4 = 0;
  v5 = 0;
  v6 = *(unint64_t **)(a1 + 120);
  v7 = HIDWORD(v6[8]) & 7;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v37 = v7;
  do
  {
    v8 = v6 + 9;
    if (v6[9])
    {
      v33 = v4;
      v9 = v5;
      v10 = v6;
      v11 = v6 + 10;
      v12 = a3;
LABEL_4:
      v13 = *v11;
      if (!*v11)
        v13 = _dispatch_wait_for_enqueuer(v11);
      while (1)
      {
        v14 = (_QWORD *)v13;
        v15 = (unint64_t *)(v13 + 16);
        v13 = *(_QWORD *)(v13 + 16);
        *v11 = v13;
        if (!v13)
        {
          while (1)
          {
            v16 = __ldxr(v8);
            if ((_QWORD *)v16 != v14)
              break;
            if (!__stlxr(0, v8))
              goto LABEL_13;
          }
          __clrex();
          v13 = *v15;
          if (!*v15)
            v13 = _dispatch_wait_for_enqueuer(v15);
          *v11 = v13;
        }
LABEL_13:
        v17 = *v14;
        if (*v14 < 0x1000uLL)
          break;
        if (*(_QWORD *)(v17 + 40) != 768)
        {
          v18 = 0;
          v19 = (uint64_t)v14;
LABEL_24:
          if (*((_DWORD *)v10 + 22) || (*(_DWORD *)(a1 + 80) & 0x10000000) != 0)
          {
            _dispatch_mach_msg_not_sent(a1, v19, v18);
          }
          else
          {
            v20 = _dispatch_mach_msg_send(a1, v19, v18, v37, v12);
            if (!v20)
            {
              v4 = v33 | (2 * (*(_WORD *)(a1 + 118) & 1));
              goto LABEL_35;
            }
            v9 = v9 | ((v20 & 2) >> 1);
          }
          goto LABEL_28;
        }
        if ((a3 & 4) == 0)
          goto LABEL_33;
        _dispatch_continuation_pop_VARIANT_mp((uint64_t)v14, 0, v35, a1);
LABEL_28:
        v12 = a3 & 0xF7;
        if (!v13)
        {
          v12 = a3 & 0xF7;
          if (*v8)
            goto LABEL_4;
          a3 &= ~8u;
          v5 = v9;
          v4 = v33;
          v6 = v10;
          goto LABEL_52;
        }
      }
      if ((v17 & 1) == 0)
      {
        if (v10[2] && *(__objc2_class ***)(StatusReg + 160) != &_dispatch_mgr_q)
        {
          *(_WORD *)(a1 + 118) |= 1u;
          v4 = v33 | 2;
          goto LABEL_35;
        }
        if (!_dispatch_mach_reconnect_invoke(a1, (uint64_t)v14))
        {
LABEL_33:
          v4 = v33;
LABEL_35:
          *v15 = v13;
          if (v13)
          {
LABEL_38:
            v5 = v9;
          }
          else
          {
            while (!__ldxr(v8))
            {
              if (!__stlxr((unint64_t)v14, v8))
                goto LABEL_38;
            }
            __clrex();
            v26 = *v11;
            v5 = v9;
            if (!*v11)
            {
              v30 = v4;
              v26 = _dispatch_wait_for_enqueuer(v11);
              v4 = v30;
            }
            v14[2] = v26;
          }
          *v11 = (unint64_t)v14;
          if (*v14 >= 0x1000uLL && *(_QWORD *)(*v14 + 40) == 768)
          {
            v6 = v10;
            v22 = v10 + 8;
            do
            {
              v23 = __ldxr(v22);
              v24 = v23 & 0xFFFFFFC700000000 | 0x3000000000;
            }
            while (__stlxr(v24, v22));
          }
          else
          {
            v6 = v10;
            v25 = v10 + 8;
            do
            {
              v23 = __ldxr(v25);
              v24 = v23 & 0xFFFFFFC7FFFFFFFFLL;
              if ((v23 & 0x2800000000) == 0)
                v24 = v23 & 0xFFFFFFDF00000000 | 0x2000000000;
            }
            while (__stlxr(v24, v25));
          }
          a3 &= ~8u;
          goto LABEL_54;
        }
        goto LABEL_28;
      }
      v19 = v14[6];
      v18 = v14[7];
      goto LABEL_24;
    }
LABEL_52:
    v27 = v6 + 8;
    do
    {
      v23 = __ldxr(v27);
      v24 = v23 & ((uint64_t)(v23 << 26) >> 63) & 0xFFFFFFC7FFFFFFFFLL;
    }
    while (__stlxr(v24, v27));
LABEL_54:
    if ((v23 & 0x800000000) != 0)
    {
      v28 = HIDWORD(v23) & 7;
      v29 = *(_DWORD *)(StatusReg + 200);
      if ((HIWORD(v29) & 0xF) < v28)
        *(_QWORD *)(StatusReg + 200) = v29 & 0xFFF0FFFF | ((_DWORD)v28 << 16);
    }
    v37 = HIDWORD(v24) & 7;
  }
  while ((_DWORD)v24);
  if ((v24 & 0x1000000000) != 0)
  {
    _dispatch_mach_push_send_barrier_drain((_DWORD *)a1, v37);
    return;
  }
  if (!v24 && (*(_WORD *)(a1 + 118) & 2) != 0)
  {
    if ((*(_WORD *)(a1 + 116) & 8) != 0)
      v4 = v4;
    else
      v4 = v4 | 0x12;
  }
  if (((v23 ^ v24) & 0x8000000000) == 0)
  {
    if (!(_DWORD)v4)
      return;
LABEL_72:
    (*(void (**)(unint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 80))(a1, (*(unsigned __int16 *)(a1 + 118) << 31 >> 31) & v37, v4);
    return;
  }
  if ((_DWORD)v4)
  {
    v4 = v4 | 1;
    goto LABEL_72;
  }
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    v31 = (unsigned int *)(a1 + 8);
    do
      v32 = __ldxr(v31);
    while (__stlxr(v32 - 2, v31));
    if (v32 <= 2)
    {
      if (v32 == 2)
      {
        _os_object_dispose((void *)a1, a2);
      }
      else
      {
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
    }
  }
}

void _dispatch_mach_msg_not_sent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t reply_disconnected;
  int v11;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v14;

  v6 = *(_DWORD *)(a2 + 48);
  if ((*(_WORD *)(a1 + 116) & 0x10) != 0 && *(_QWORD *)(a2 + 32))
  {
    v7 = (*((uint64_t (**)(void))_dispatch_mach_xpc_hooks + 2))();
    if (v7)
      v8 = v7;
    else
      v8 = a1;
  }
  else
  {
    v8 = 0;
  }
  if (v8)
    v9 = 12;
  else
    v9 = 7;
  reply_disconnected = _dispatch_mach_msg_create_reply_disconnected((_QWORD *)a2, a3, v9);
  if ((v6 & 2) != 0)
    v11 = 0;
  else
    v11 = -117964795;
  *(_DWORD *)(a2 + 48) = v11;
  _dispatch_mach_handle_or_push_received_msg(a1, a2, 0);
  if (reply_disconnected)
  {
    if (v8)
    {
      v12 = _dispatch_mach_msg_async_reply_wrap(reply_disconnected, a1);
      v13 = __clz(__rbit32((*(_DWORD *)(reply_disconnected + 56) >> 8) & 0x3FFF));
      if (((*(_DWORD *)(reply_disconnected + 56) >> 8) & 0x3FFF) != 0)
        v14 = v13 + 1;
      else
        v14 = 0;
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v8 + 88))(v8, v12, v14);
    }
    else
    {
      _dispatch_mach_handle_or_push_received_msg(a1, reply_disconnected, 0);
    }
  }
}

uint64_t _dispatch_mach_msg_send(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  __int16 v18;
  __int16 v19;
  uint64_t v20;
  BOOL v21;
  __int16 v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  char v26;
  int mach_voucher_VARIANT_mp;
  int v28;
  int v29;
  int v30;
  unint64_t v31;
  int v32;
  char v33;
  char v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  const char *v39;
  mach_port_name_t v40;
  int v41;
  int v42;
  BOOL v43;
  char v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t reply_disconnected;
  _QWORD *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t result;
  unint64_t StatusReg;
  unint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  int v59;
  unsigned int v60;
  char v61;
  char v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  int v68;
  unint64_t v69;
  char v70;
  unsigned int v71;
  __int16 v72;
  int *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD v78[3];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;

  v8 = a4;
  v10 = a1;
  v82 = *MEMORY[0x1E0C874D8];
  v11 = *(_QWORD *)(a1 + 120);
  v12 = a2 + 88;
  if (*(_DWORD *)(a2 + 72))
    v12 = *(_QWORD *)v12;
  v13 = *(_QWORD *)(a2 + 64);
  v14 = *(_DWORD *)v12 & 0x1F;
  v15 = *(_DWORD *)(a2 + 52);
  v80 = 0u;
  v81 = 0u;
  v79 = 0u;
  memset(v78, 0, 40);
  if (v14 == 18)
  {
    v5 = (int *)(a2 + 48);
    v7 = *(_DWORD *)(a2 + 48);
    if ((v7 & 2) == 0)
    {
      v74 = 18;
      v16 = 0;
      v17 = 0;
      LOBYTE(v18) = 1;
      goto LABEL_42;
    }
LABEL_19:
    v24 = 0;
    goto LABEL_74;
  }
  v19 = *(_WORD *)(a1 + 118);
  *(_WORD *)(a1 + 118) = v19 & 0xFFFE;
  v20 = *(_QWORD *)(v11 + 48);
  if (v20)
    v21 = v20 == a2;
  else
    v21 = 1;
  if (!v21)
  {
    if (*(_QWORD *)(v11 + 16)
      && *(__objc2_class ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160) != &_dispatch_mgr_q)
    {
      v45 = 0;
      v46 = v19 | 1;
      goto LABEL_72;
    }
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v56 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
    if (v56 >= 0x10FF)
      v56 = 4351;
    *(_QWORD *)(v20 + 56) = v56;
    v57 = *(_QWORD *)(StatusReg + 224);
    if (v57)
    {
      v58 = (unsigned int *)(v57 + 12);
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
      if (v59 <= 0)
      {
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
        __break(1u);
        goto LABEL_135;
      }
    }
    v60 = v15;
    v61 = a5;
    *(_QWORD *)(v20 + 64) = v57;
    *(_DWORD *)(v20 + 48) = ((*(_QWORD *)(StatusReg + 32) & 0x300) != 0) << 18;
    if (!_dispatch_mach_msg_send(a1, *(_QWORD *)(v11 + 48), 0, a4, 0))
      goto LABEL_128;
    if ((*(_WORD *)(v10 + 116) & 0x20) != 0)
      _dispatch_mach_arm_no_senders(v10, 1);
    v20 = 0;
    *(_QWORD *)(v11 + 48) = 0;
    a5 = v61;
    v15 = v60;
  }
  v5 = (int *)(a2 + 48);
  v7 = *(_DWORD *)(a2 + 48);
  if ((v7 & 2) != 0)
    goto LABEL_19;
  v74 = v14;
  LOWORD(v14) = 0;
  v22 = 1;
  if (v20 != a2)
    *(_DWORD *)(v12 + 8) = *(_DWORD *)(v11 + 92);
  if (*(__objc2_class ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160) != &_dispatch_mgr_q)
  {
    if (v13)
      goto LABEL_16;
LABEL_23:
    if ((*(_BYTE *)(v12 + 2) & 0x1F) == 0)
    {
      v75 = v11;
      v72 = v22;
      v25 = v15;
      v26 = a5;
      if (_voucher_task_mach_voucher_pred != -1)
        dispatch_once_f_VARIANT_mp((unint64_t *)&_voucher_task_mach_voucher_pred, 0, _voucher_task_mach_voucher_init_VARIANT_mp);
      v16 = 0;
      mach_voucher_VARIANT_mp = _voucher_task_mach_voucher;
      goto LABEL_31;
    }
    v16 = 0;
    goto LABEL_25;
  }
  if (!*(_QWORD *)(v11 + 16))
  {
    v71 = v15;
    v6 = v11;
    LOBYTE(v11) = a5;
    v69 = v10;
    v66 = *(_QWORD *)(v10 + 120);
    *(_DWORD *)(v66 + 24) = *(_DWORD *)(v12 + 8);
    if ((_dispatch_unote_register_VARIANT_mp(v66, -4, 0x2000000u) & 1) != 0)
    {
LABEL_126:
      a5 = v11;
      v11 = v6;
      v15 = v71;
      v10 = v69;
      goto LABEL_21;
    }
LABEL_135:
    _dispatch_bug(1743, 0);
    goto LABEL_126;
  }
LABEL_21:
  if ((*(_BYTE *)(v11 + 30) & 1) != 0)
    return 0;
  v22 = v14 | 0x81;
  if (!v13)
    goto LABEL_23;
LABEL_16:
  v23 = *(_QWORD *)(v13 + 48);
  if (!v23)
  {
    v16 = 0;
    v17 = 0;
    if ((*(_BYTE *)(v12 + 2) & 0x1F) != 0)
      goto LABEL_36;
    goto LABEL_27;
  }
  *((_QWORD *)&v78[0] + 1) = 59821818;
  *(_QWORD *)&v78[1] = v23;
  *(_OWORD *)((char *)&v78[1] + 8) = *(_OWORD *)(v13 + 56);
  LODWORD(v78[0]) = 40;
  v16 = 32;
  if ((*(_BYTE *)(v12 + 2) & 0x1F) != 0)
  {
LABEL_25:
    v17 = 0;
    goto LABEL_36;
  }
LABEL_27:
  v72 = v22;
  v25 = v15;
  v75 = v11;
  v26 = a5;
  mach_voucher_VARIANT_mp = _voucher_get_mach_voucher_VARIANT_mp(v13);
LABEL_31:
  v17 = 0;
  if (mach_voucher_VARIANT_mp)
  {
    v28 = *(_DWORD *)v12;
    a5 = v26;
    v15 = v25;
    v22 = v72;
    if ((*(_DWORD *)v12 & 0x1F0000) == 0)
    {
      *(_DWORD *)(v12 + 16) = mach_voucher_VARIANT_mp;
      *(_DWORD *)v12 = v28 | 0x130000;
      v17 = 1;
    }
    v11 = v75;
  }
  else
  {
    a5 = v26;
    v11 = v75;
    v15 = v25;
    v22 = v72;
  }
LABEL_36:
  if (v8 >= 5)
    v29 = 5;
  else
    v29 = v8;
  if (v29)
  {
    v18 = v22 | 0x30;
    if (!v15)
      goto LABEL_42;
    goto LABEL_41;
  }
  v18 = v22 | 0x10;
  if (v15)
LABEL_41:
    v18 |= (4 * *(_WORD *)(v10 + 116)) & 0x200;
LABEL_42:
  v76 = v11;
  v73 = v5;
  if ((v7 & 4) != 0)
  {
    if (*(_BYTE *)(a3 + 30))
    {
      v30 = v16;
      v31 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      if (v15 == *(_DWORD *)(v31 + 64))
      {
        v32 = v17;
        v33 = v18;
        v34 = a5;
        *(_QWORD *)(v31 + 64) = 0;
LABEL_49:
        v35 = v15;
        _dispatch_mach_reply_waiter_register(v10, a3, v15, (_QWORD *)a2);
        LOBYTE(v18) = v33;
        v16 = v30;
        goto LABEL_50;
      }
    }
    else
    {
      v30 = v16;
    }
    v32 = v17;
    v33 = v18;
    v34 = a5;
    goto LABEL_49;
  }
  v32 = v17;
  v35 = v15;
  v34 = a5;
LABEL_50:
  v36 = *(_DWORD *)(v12 + 4);
  v79 = (unint64_t)v12;
  *(_QWORD *)&v80 = v36;
  v37 = v78[0];
  if (!v16)
    v37 = 0;
  *((_QWORD *)&v80 + 1) = v78;
  *(_QWORD *)&v81 = 0;
  *((_QWORD *)&v81 + 1) = v37;
  v70 = v18;
  v38 = mach_msg2_internal();
  v24 = v38;
  if ((v7 & 4) != 0 && v38)
    _dispatch_mach_reply_unregister((_QWORD *)v10, (const char *)a3, 36);
  a5 = v34;
  v11 = v76;
  v15 = v35;
  if (!v32)
  {
LABEL_67:
    if (v24 == 268435460)
    {
      v24 = 268435460;
      v14 = v74;
      v5 = v73;
      if ((v70 & 0x10) != 0)
      {
        if (*(_DWORD *)(v12 + 8) == -1)
        {
          *(_DWORD *)v12 = *(_DWORD *)v12 & 0xFFFFFFE0 | 0x13;
          if ((v70 & 0x80) == 0)
            goto LABEL_71;
        }
        else if ((v70 & 0x80) == 0)
        {
LABEL_71:
          v45 = 0;
          v46 = *(_WORD *)(v10 + 118) | 1;
LABEL_72:
          *(_WORD *)(v10 + 118) = v46;
          return v45;
        }
        _dispatch_mach_notification_set_armed_VARIANT_mp(v11);
        return 0;
      }
    }
    else
    {
      v14 = v74;
      v5 = v73;
    }
LABEL_74:
    if (!(v7 & 4 | v24))
    {
      if (v15)
      {
        v47 = *(_QWORD *)(v10 + 88);
        if (!*(_QWORD *)(v47 + 16) || *(_DWORD *)(v47 + 24) != v15)
        {
          v48 = a5;
          _dispatch_mach_reply_kevent_register(v10, v15, (_QWORD *)a2);
          a5 = v48;
        }
      }
    }
    if (v14 != 18 && *(_QWORD *)(v11 + 48) == a2 && *(_QWORD *)(v11 + 16))
    {
      v62 = a5;
      _dispatch_unote_unregister_VARIANT_mp(*(_QWORD *)(v10 + 120), 5);
      a5 = v62;
      *(_DWORD *)(*(_QWORD *)(v10 + 120) + 24) = 0;
      if (!v24)
        goto LABEL_83;
    }
    else if (!v24)
    {
LABEL_83:
      v49 = 0;
      reply_disconnected = 0;
      goto LABEL_84;
    }
    if ((*(_WORD *)(v10 + 116) & 0x10) != 0)
    {
      v63 = a5;
      if (*(_QWORD *)(a2 + 32))
      {
        v64 = (*((uint64_t (**)(void))_dispatch_mach_xpc_hooks + 2))();
        if (v64)
          v49 = v64;
        else
          v49 = v10;
LABEL_121:
        if (v49)
          v65 = 12;
        else
          v65 = 7;
        reply_disconnected = _dispatch_mach_msg_create_reply_disconnected((_QWORD *)a2, a3, v65);
        a5 = v63;
LABEL_84:
        *v5 = v24;
        if ((a5 & 8) != 0 && (v7 & 1) != 0)
        {
          v45 = 3;
          if (!reply_disconnected)
            return v45;
        }
        else
        {
          _dispatch_mach_handle_or_push_received_msg(v10, a2, 0);
          v45 = 1;
          if (!reply_disconnected)
            return v45;
        }
        if (v49)
        {
          v51 = _dispatch_mach_msg_async_reply_wrap(reply_disconnected, v10);
          v52 = __clz(__rbit32((*(_DWORD *)(reply_disconnected + 56) >> 8) & 0x3FFF));
          if (((*(_DWORD *)(reply_disconnected + 56) >> 8) & 0x3FFF) != 0)
            v53 = v52 + 1;
          else
            v53 = 0;
          (*(void (**)(unint64_t, _QWORD *, uint64_t))(*(_QWORD *)v49 + 88))(v49, v51, v53);
        }
        else
        {
          _dispatch_mach_handle_or_push_received_msg(v10, reply_disconnected, 0);
        }
        return v45;
      }
    }
    else
    {
      v63 = a5;
    }
    v49 = 0;
    goto LABEL_121;
  }
  v40 = *(_DWORD *)(v12 + 16);
  if (v24 != 268435461 || !v40)
  {
    v41 = *(_DWORD *)v12;
    v42 = HIWORD(*(_DWORD *)v12) & 0x1F;
    v43 = v42 == 17 || v42 == 19;
    if (v43 && v40)
    {
      if (v42 == 17)
      {
        v44 = a5;
        _voucher_dealloc_mach_voucher_VARIANT_mp(v40);
        v15 = v35;
        a5 = v44;
        v11 = v76;
        v41 = *(_DWORD *)v12;
      }
      *(_DWORD *)(v12 + 16) = 0;
      *(_DWORD *)v12 = v41 & 0xFFE0FFFF;
    }
    goto LABEL_67;
  }
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Voucher port corruption";
  qword_1EDF52D38 = 268435461;
  __break(1u);
LABEL_128:
  result = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 64);
  if (!result)
    return 0;
  v67 = (unsigned int *)(result + 12);
  do
    v68 = __ldxr(v67);
  while (__stxr(v68 - 1, v67));
  if (v68 > 1)
  {
LABEL_132:
    v45 = 0;
    *(_QWORD *)(*(_QWORD *)(v11 + 48) + 64) = 0;
    return v45;
  }
  if (v68 == 1)
  {
    _voucher_xref_dispose_VARIANT_mp(result, v39);
    goto LABEL_132;
  }
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
  __break(1u);
  return result;
}

void _dispatch_mach_push_send_barrier_drain(_DWORD *a1, unsigned int a2)
{
  unint64_t StatusReg;
  _QWORD *v5;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_QWORD **)(StatusReg + 176);
  if (v5)
    *(_QWORD *)(StatusReg + 176) = v5[2];
  else
    v5 = _dispatch_continuation_alloc_from_heap_VARIANT_mp();
  v5[4] = 0;
  v5[5] = 0;
  v5[3] = -1;
  *v5 = &unk_1E1E86680;
  v5[1] = -1;
  _dispatch_lane_push_VARIANT_mp(a1, v5, a2);
}

uint64_t _dispatch_mach_reply_waiter_register(uint64_t result, uint64_t a2, int a3, _QWORD *a4)
{
  uint64_t v5;
  unsigned int *v6;
  int v7;
  uint64_t v8;
  unsigned int *v9;
  unint64_t StatusReg;
  unsigned int v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  *(_QWORD *)(a2 + 8) = ~result;
  *(_BYTE *)(a2 + 28) = -8;
  *(_DWORD *)(a2 + 24) = a3;
  if (!*(_BYTE *)(a2 + 30))
  {
    v5 = a4[8];
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 12);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
      if (v7 <= 0)
      {
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
        __break(1u);
        return result;
      }
      *(_QWORD *)(a2 + 56) = v5;
    }
    *(_DWORD *)(a2 + 40) = a4[7];
    *(_QWORD *)(a2 + 48) = a4[4];
  }
  v8 = *(_QWORD *)(result + 120);
  v9 = (unsigned int *)(v8 + 40);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v11 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v9))
  {
    if (!__stxr(v11, v9))
      goto LABEL_13;
  }
  __clrex();
  result = _dispatch_unfair_lock_lock_slow_VARIANT_mp(v8 + 40);
LABEL_13:
  v15 = *(_QWORD *)(v8 + 56);
  v14 = (_QWORD *)(v8 + 56);
  v13 = v15;
  *(_QWORD *)(a2 + 64) = v15;
  if (v15)
    *(_QWORD *)(v13 + 72) = a2 + 64;
  *v14 = a2;
  *(_QWORD *)(a2 + 72) = v14;
  v16 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    v17 = __ldxr(v9);
  while (__stlxr(0, v9));
  if (v17 != v16)
    return _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)v9, v17);
  return result;
}

void _dispatch_mach_reply_kevent_register(unint64_t a1, unsigned int a2, _QWORD *a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  int v14;
  int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unint64_t StatusReg;
  unsigned int v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;

  v5 = _dispatch_unote_create_with_handle_VARIANT_mp((uint64_t)&_dispatch_mach_type_reply_VARIANT_mp, a2, 0);
  v6 = (uint64_t)v5;
  *((_QWORD *)v5 + 1) = ~a1;
  v7 = a3[8];
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 12);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    if (v9 <= 0)
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
      __break(1u);
LABEL_52:
      v31 = *(_QWORD *)(v7 + 16) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = (int *)(a1 + 84);
      goto LABEL_23;
    }
    *((_QWORD *)v5 + 7) = v7;
  }
  v10 = 0;
  *((_DWORD *)v5 + 10) = a3[7];
  v11 = a3[4];
  *(_QWORD *)(v6 + 48) = v11;
  v12 = *(_WORD *)(a1 + 116);
  if ((v12 & 0x10) != 0 && v11)
  {
    v13 = (*((uint64_t (**)(void))_dispatch_mach_xpc_hooks + 2))();
    if (v13)
      v10 = v13;
    else
      v10 = a1;
    v12 = *(_WORD *)(a1 + 116);
  }
  if ((v12 & 0x80) != 0)
    *(_DWORD *)(v6 + 32) |= 0x200u;
  v31 = 0;
  if (!v10 || v10 == a1)
  {
    v7 = *(_QWORD *)(a1 + 88);
    if (*(_QWORD *)(v7 + 16) >= 4uLL)
      goto LABEL_52;
  }
  if ((*(_BYTE *)(*(_QWORD *)v10 + 42) & 1) == 0)
  {
    v14 = _dispatch_queue_compute_priority_and_wlh_VARIANT_mp(v10, (uint64_t *)&v31);
    if (v14)
      goto LABEL_24;
    v31 = -4;
    goto LABEL_22;
  }
  v31 = -4;
  v14 = 0x2000000;
  if (v10 >= (unint64_t)&_dispatch_root_queues && v10 < (unint64_t)&_dispatch_queue_serial_numbers)
  {
LABEL_22:
    v15 = (int *)(v10 + 84);
LABEL_23:
    v14 = *v15;
  }
LABEL_24:
  v16 = *((_DWORD *)a3 + 14);
  v17 = (__clz(__rbit32((v16 >> 8) & 0x3FFF)) << 8) + 256;
  if (((v16 >> 8) & 0x3FFF) == 0)
    v17 = 0;
  v18 = v17 & 0xFFFFFF00 | *((_DWORD *)a3 + 14);
  v19 = v14 & 0x80000000;
  if ((v14 & 0xFFF) != 0)
  {
    if ((v14 & 0xFFFu) > v18)
      v18 = v14 & 0xFFF;
  }
  else if (!((unsigned __int16)v14 >> 12) || !v18)
  {
    if (!((unsigned __int16)v14 >> 12) || v18)
    {
      v31 = -4;
      v20 = 0x2000000;
    }
    else
    {
      v20 = v19 | ((unsigned __int16)v14 >> 12 << 8) | 0xFF;
    }
    goto LABEL_33;
  }
  v20 = v18 | v19;
LABEL_33:
  v21 = *(_QWORD *)(a1 + 120);
  v22 = (unsigned int *)(v21 + 40);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v24 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v22))
  {
    if (!__stxr(v24, v22))
      goto LABEL_38;
  }
  __clrex();
  _dispatch_unfair_lock_lock_slow_VARIANT_mp(v21 + 40);
LABEL_38:
  v28 = *(_QWORD *)(v21 + 56);
  v27 = (uint64_t *)(v21 + 56);
  v26 = v28;
  *(_QWORD *)(v6 + 64) = v28;
  if (v28)
    *(_QWORD *)(v26 + 72) = v6 + 64;
  *v27 = v6;
  *(_QWORD *)(v6 + 72) = v27;
  v29 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    v30 = __ldxr(v22);
  while (__stlxr(0, v22));
  if (v30 != v29)
    _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)v22, v30);
  if ((_dispatch_unote_register_VARIANT_mp(v6, v31, v20) & 1) == 0)
    _dispatch_mach_reply_unregister((_QWORD *)a1, (const char *)v6, 52);
}

_QWORD *_dispatch_mach_msg_async_reply_wrap(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  int v5;
  unint64_t StatusReg;
  _QWORD *result;

  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF)
  {
    v4 = (unsigned int *)(a2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    if (v5 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  result = *(_QWORD **)(StatusReg + 176);
  if (result)
    *(_QWORD *)(StatusReg + 176) = result[2];
  else
    result = _dispatch_continuation_alloc_from_heap_VARIANT_mp();
  result[6] = a1;
  result[7] = a2;
  *result = &unk_1E1E86758;
  result[1] = -1;
  result[3] = -1;
  return result;
}

void _dispatch_mach_send_push_and_trydrain(_DWORD *a1, unint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  unint64_t StatusReg;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unsigned int *v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  BOOL v24;
  signed int v25;
  unsigned int *v26;
  int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;

  v5 = *((_QWORD *)a1 + 15);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
  *(_QWORD *)(a2 + 16) = 0;
  v8 = (unint64_t *)(v5 + 72);
  *(_QWORD *)(StatusReg + 976) = v5 + 72;
  do
    v9 = __ldxr(v8);
  while (__stlxr(a2, v8));
  if (v9)
  {
    v10 = 0;
    v11 = 0;
    v12 = (unint64_t *)(v9 + 16);
  }
  else
  {
    if (a1[2] != 0x7FFFFFFF)
    {
      v13 = a1 + 2;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      if (v14 <= 0)
      {
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
        __break(1u);
LABEL_65:
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
        goto LABEL_66;
      }
    }
    v12 = (unint64_t *)(v5 + 80);
    v11 = 3;
    v10 = 0xA000000000;
  }
  *v12 = a2;
  *(_QWORD *)(StatusReg + 976) = 0;
  if (*(_DWORD *)(v5 + 88) || (a1[20] & 0x10000000) != 0)
  {
    v28 = (unint64_t *)(v5 + 64);
    do
    {
      v29 = __ldxr(v28);
      if ((v29 & 0x700000000) >= a3 << 32)
        v30 = v29;
      else
        v30 = (a3 << 32) | 0x2800000000 | v29 & 0xFFFFFFF0FFFFFFFFLL;
      v31 = v30 | v10;
    }
    while (__stlxr(v31, v28));
    if (((v31 ^ v29) & 0x8000000000) != 0)
      v32 = v11 & 2;
    else
      v32 = v11;
    (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a3, v32);
    return;
  }
  v15 = (unint64_t *)(v5 + 64);
  if (!v9)
  {
    do
    {
      v17 = __ldaxr(v15);
      if ((v17 & 0x700000000) >= a3 << 32)
        v20 = v17;
      else
        v20 = (a3 << 32) | 0x2800000000 | v17 & 0xFFFFFFF0FFFFFFFFLL;
      v21 = v20 | v10;
      if ((v17 & 0x10FFFFFFFFLL) == 0)
        v21 = v21 & 0xFFFFFFC7FFFFFFFFLL | v7;
    }
    while (__stlxr(v21, v15));
    if (((v21 ^ v17) & 0x8000000000) != 0)
      v11 &= 2u;
    else
      v11 = v11;
LABEL_31:
    if (v17 >= 4)
    {
      if ((v17 & 0x700000000) < a3 << 32)
        _pthread_workqueue_override_start_direct_check_owner();
      if ((v11 & 1) == 0)
        return;
      if (a1[2] == 0x7FFFFFFF)
        return;
      v26 = a1 + 2;
      do
        v27 = __ldxr(v26);
      while (__stlxr(v27 - 2, v26));
      if (v27 > 2)
        return;
      if (v27 == 2)
      {
        _os_object_dispose(a1, (const char *)a2);
        return;
      }
LABEL_66:
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
      return;
    }
    if ((v17 & 0x1000000000) != 0)
    {
      (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a3, v11);
      return;
    }
    if ((_DWORD)v11 && *(_QWORD *)(v5 + 80) == a2)
    {
      if ((v11 & 1) != 0)
      {
LABEL_36:
        if (a1[2] == 0x7FFFFFFF)
          goto LABEL_40;
        v22 = a1 + 2;
        do
        {
          v23 = __ldxr(v22);
          v24 = __OFSUB__(v23, 2);
          v25 = v23 - 2;
        }
        while (__stlxr(v25, v22));
        if (!((v25 < 0) ^ v24 | (v25 == 0)))
          goto LABEL_40;
        goto LABEL_65;
      }
    }
    else
    {
      a4 &= ~8u;
      if ((v11 & 1) != 0)
        goto LABEL_36;
    }
LABEL_40:
    _dispatch_mach_send_drain((unint64_t)a1, 0, a4);
    return;
  }
  v16 = a3 << 32;
  while (1)
  {
    v17 = __ldaxr(v15);
    v18 = v17 & 0xFFFFFFD0FFFFFFFFLL | v16 | 0x2800000000;
    if ((v17 & 0x700000000) >= v16 || v18 == v17)
      break;
    if ((v17 & 0x10FFFFFFFFLL) == 0)
      v18 = v17 & 0xFFFFFFC0FFFFFFFFLL | v16 & 0xFFFFFFC7FFFFFFFFLL | v7;
    if (!__stxr(v18, v15))
      goto LABEL_31;
  }
  __clrex();
}

void _dispatch_mach_handle_wlh_change(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(a1 + 80);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 | 0x8000000, v1));
  if ((v2 & 0x400000) != 0)
  {
    if ((v2 & 0x8000000) == 0)
    {
      if ((*(_WORD *)(a1 + 116) & 0x10) != 0)
        _dispatch_bug_deprecated("Changing target queue hierarchy after xpc connection was activated");
      else
        _dispatch_bug_deprecated("Changing target queue hierarchy after mach channel was connected");
    }
  }
  else
  {
    if ((*(_WORD *)(a1 + 116) & 0x10) == 0)
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Changing target queue hierarchy after mach channel was connected";
      __break(1u);
    }
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Changing target queue hierarchy after xpc connection was activated";
    __break(1u);
  }
}

void _dispatch_mach_cancel(uint64_t a1)
{
  int v2;
  char v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  int v12;
  unsigned int v13;

  if (*(_DWORD *)(*(_QWORD *)(a1 + 120) + 88))
    LOBYTE(v2) = 0;
  else
    v2 = (*(unsigned __int16 *)(a1 + 118) >> 1) & 1;
  if ((*(_DWORD *)(a1 + 80) & 0x40000000) != 0)
    v3 = 1;
  else
    v3 = 3;
  v4 = *(_QWORD *)(a1 + 128);
  if (v4)
    LOBYTE(v2) = _dispatch_unote_unregister_VARIANT_mp(v4, v3) & v2;
  v5 = (unsigned int *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_DWORD *)(v6 + 24);
  if (v7)
  {
    if (!_dispatch_unote_unregister_VARIANT_mp(*(_QWORD *)(a1 + 88), v3))
      goto LABEL_21;
    v8 = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_mach_msg, 112);
    *(_QWORD *)(v8 + 16) = -1985229329;
    *(_QWORD *)(v8 + 24) = &unk_1ECCEA080;
    *(_DWORD *)(v8 + 72) = 0;
    *(_QWORD *)(v8 + 80) = 24;
    *(_DWORD *)(v8 + 100) = v7;
    *(_DWORD *)(v8 + 48) = -117964793;
    _dispatch_mach_handle_or_push_received_msg(a1, v8, 0);
    *(_DWORD *)(v6 + 24) = 0;
  }
  if ((v2 & 1) != 0)
  {
    while (1)
    {
      v9 = __ldxr(v5);
      v10 = v9 & 0x3FFFFFFF | 0x80000000;
      if (v10 == (_DWORD)v9)
        break;
      if (!__stxr(v10, v5))
        goto LABEL_15;
    }
    __clrex();
LABEL_15:
    if ((v9 & 0xA0000000) != 0)
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupt channel state";
      qword_1EDF52D38 = v9;
      __break(1u);
    }
    else
    {
      if (*(_DWORD *)(a1 + 8) == 0x7FFFFFFF)
        return;
      v11 = (unsigned int *)(a1 + 8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (v12 > 1)
        return;
    }
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
    __break(1u);
    return;
  }
  do
LABEL_21:
    v13 = __ldxr(v5);
  while (__stxr(v13 | 0x40000000, v5));
}

void _dispatch_mach_cancel_invoke(uint64_t a1, int a2)
{
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 88);
  if ((a2 & 0x1000000) != 0)
    v4 = (void *)MEMORY[0x18D766D94]();
  else
    v4 = 0;
  if ((*(_WORD *)(a1 + 116) & 4) == 0)
    _dispatch_mach_connect_invoke(a1);
  _dispatch_client_callout4(*(_QWORD *)(v3 + 48), 8, 0, 0, *(uint64_t (**)(void))(v3 + 40));
  if (v4)
    objc_autoreleasePoolPop(v4);
  *(_WORD *)(a1 + 116) |= 8u;
}

uint64_t OUTLINED_FUNCTION_1_2(char *a1, uint64_t a2, const char *a3)
{
  size_t v3;

  return snprintf(a1, v3, a3);
}

size_t OUTLINED_FUNCTION_2_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return _dispatch_object_debug_attr_VARIANT_mp(v2, (char *)(v0 + v3), v1 - v3);
}

uint64_t OUTLINED_FUNCTION_3_1()
{
  uint64_t v0;
  uint64_t v1;

  return v0 + v1;
}

char *_dispatch_unote_create_with_handle_VARIANT_mp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
    return _dispatch_unote_create(a1, a2, a3);
  else
    return 0;
}

char *_dispatch_unote_create(uint64_t a1, int a2, uint64_t a3)
{
  char *result;
  int v4;
  size_t v7;
  char v8;

  if ((~*(_DWORD *)(a1 + 20) & a3) != 0)
    return 0;
  v4 = a3;
  if (*(_DWORD *)(a1 + 20))
  {
    if (!a3 && (*(_BYTE *)(a1 + 10) & 4) == 0)
      return 0;
  }
  v7 = *(unsigned int *)(a1 + 24);
  if ((*(_WORD *)(a1 + 12) & 0x100) != 0)
    result = (char *)_dispatch_calloc(1uLL, v7);
  else
    result = (char *)_dispatch_calloc(1uLL, v7 + 24) + 24;
  *(_QWORD *)result = a1;
  v8 = result[29] & 0xDF | (32 * (*(_BYTE *)(a1 + 10) & 1));
  result[29] = v8;
  *((_DWORD *)result + 6) = a2;
  result[28] = *(_BYTE *)(a1 + 8);
  *((_DWORD *)result + 8) = v4;
  if ((*(_BYTE *)(a1 + 13) & 1) != 0)
    result[29] = v8 | 1;
  return result;
}

char *_dispatch_unote_create_without_handle_VARIANT_mp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
    return 0;
  else
    return _dispatch_unote_create(a1, 0, a3);
}

void _dispatch_unote_dispose_VARIANT_mp(uint64_t a1)
{
  uint64_t v1;
  char v2;
  BOOL v3;
  uint64_t v4;

  v1 = a1;
  v2 = *(_BYTE *)(a1 + 29);
  if ((v2 & 0x40) != 0)
  {
    _Block_release(*(const void **)(a1 + 48));
    v2 = *(_BYTE *)(v1 + 29);
  }
  if ((v2 & 2) != 0)
  {
    if (*(_DWORD *)(v1 + 112) == -1 && *(_DWORD *)(v1 + 116) == -1)
    {
      a1 = *(_QWORD *)(v1 + 104);
      if (!a1)
        goto LABEL_10;
    }
    else
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Disposing of timer still in its heap";
      __break(1u);
    }
    free((void *)a1);
    *(_QWORD *)(v1 + 104) = 0;
    goto LABEL_10;
  }
  v3 = (v2 & 1) == 0;
  v4 = -24;
  if (!v3)
    v4 = 0;
  v1 += v4;
LABEL_10:
  free((void *)v1);
}

uint64_t _dispatch_unote_register_VARIANT_mp(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((a3 & 0x4600FFFF) == 0x4004000 && MEMORY[0xFFFFFC100])
    kdebug_trace();
  *(_DWORD *)(a1 + 36) = a3;
  if ((*(char *)(a1 + 28) + 23) <= 2)
  {
    *(_QWORD *)(a1 + 16) = -3;
    return 1;
  }
  if ((*(_BYTE *)(a1 + 29) & 2) != 0)
  {
    _dispatch_timer_unote_register(a1, a2, a3);
    return 1;
  }
  if ((*(_BYTE *)(a1 + 29) & 1) != 0)
    return _dispatch_unote_register_direct_VARIANT_mp((unsigned int *)a1, a2);
  else
    return _dispatch_unote_register_muxed_VARIANT_mp(a1);
}

void _dispatch_timer_unote_register(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  if (((a3 >> 8) & 0xF) - 1 <= 1)
  {
    v3 = *(unsigned __int8 *)(a1 + 30);
    if ((v3 & 1) != 0)
    {
      if (MEMORY[0xFFFFFC100])
      {
        v4 = a2;
        v5 = a1;
        kdebug_trace();
        a2 = v4;
        a1 = v5;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 30) = v3 | 2;
      *(_DWORD *)(a1 + 24) = 3 * ((v3 >> 2) & 3) + (v3 & 1 | 2);
    }
  }
  if ((*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL) != a2)
    *(_QWORD *)(a1 + 16) = -4;
  if (*(_QWORD *)(a1 + 104))
    _dispatch_timer_unote_configure_VARIANT_mp(a1);
}

void _dispatch_unote_resume_VARIANT_mp(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 29) & 2) != 0)
  {
    _dispatch_timer_unote_resume(a1);
  }
  else if ((*(_BYTE *)(a1 + 29) & 1) != 0)
  {
    _dispatch_unote_resume_direct_VARIANT_mp(a1);
  }
  else
  {
    _dispatch_unote_resume_muxed_VARIANT_mp(a1);
  }
}

void _dispatch_timer_unote_resume(uint64_t a1)
{
  _BOOL4 v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  void *v8;
  unsigned int v9;
  unsigned int *v10;
  int v11;

  v2 = !(*(_QWORD *)(55 - *(_QWORD *)(a1 + 8)) >> 55)
    && *(_DWORD *)(a1 + 24) != -1
    && *(_QWORD *)(a1 + 80) < 0x7FFFFFFFFFFFFFFFuLL;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(unsigned __int8 *)(a1 + 30);
  v5 = (v4 >> 2) & 3;
  v6 = v4 & 3;
  v7 = 3 * v5;
  if ((v3 & 0xFFFFFFFFFFFFFFFCLL) == 0xFFFFFFFFFFFFFFFCLL)
    v8 = &_dispatch_timers_heap;
  else
    v8 = *(void **)((v3 & 0xFFFFFFFFFFFFFFFCLL) + 48);
  v9 = v7 + v6;
  if ((v3 & v2) == 1)
  {
    if (*(_DWORD *)(a1 + 24) == v9)
    {
      if (v2)
        goto LABEL_11;
LABEL_21:
      if ((v3 & 1) != 0)
        _os_object_release_internal_n_VARIANT_mp((void *)~*(_QWORD *)(a1 + 8), (const char *)2);
      return;
    }
  }
  else if ((v3 & 1) == 0)
  {
    if (!v2)
      return;
    goto LABEL_15;
  }
  _dispatch_timer_unote_disarm(a1, (uint64_t)v8);
  if (!v2)
    goto LABEL_21;
LABEL_11:
  if ((v3 & 1) != 0)
  {
LABEL_19:
    _dispatch_timer_unote_arm(a1, (uint64_t)v8, v9);
    return;
  }
LABEL_15:
  if (*(_DWORD *)(7 - *(_QWORD *)(a1 + 8)) == 0x7FFFFFFF)
    goto LABEL_19;
  v10 = (unsigned int *)(7 - *(_QWORD *)(a1 + 8));
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 2, v10));
  if (v11 > 0)
    goto LABEL_19;
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
  __break(1u);
}

uint64_t _dispatch_unote_unregister_VARIANT_mp(uint64_t a1, char a2)
{
  if (!*(_QWORD *)(a1 + 16))
    return 1;
  if ((*(char *)(a1 + 28) + 23) <= 2)
  {
    *(_QWORD *)(a1 + 16) = 0;
    return 1;
  }
  if ((*(_BYTE *)(a1 + 29) & 2) != 0)
  {
    _dispatch_timer_unote_unregister(a1);
    return 1;
  }
  if ((*(_BYTE *)(a1 + 29) & 1) != 0)
    return _dispatch_unote_unregister_direct_VARIANT_mp(a1, a2);
  else
    return _dispatch_unote_unregister_muxed_VARIANT_mp((uint64_t *)a1);
}

void _dispatch_timer_unote_unregister(uint64_t a1)
{
  unint64_t v2;
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  BOOL v6;
  signed int v7;
  unsigned int *v8;
  unsigned int *v10;
  int v11;

  v2 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if (v2 == -4)
    v3 = &_dispatch_timers_heap;
  else
    v3 = *(void **)(v2 + 48);
  if ((*(_QWORD *)(a1 + 16) & 1) == 0)
    goto LABEL_9;
  _dispatch_timer_unote_disarm(a1, (uint64_t)v3);
  if (*(_DWORD *)(7 - *(_QWORD *)(a1 + 8)) == 0x7FFFFFFF)
    goto LABEL_9;
  v4 = (unsigned int *)(7 - *(_QWORD *)(a1 + 8));
  do
  {
    v5 = __ldxr(v4);
    v6 = __OFSUB__(v5, 2);
    v7 = v5 - 2;
  }
  while (__stlxr(v7, v4));
  if ((v7 < 0) ^ v6 | (v7 == 0))
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
    __break(1u);
  }
  else
  {
LABEL_9:
    v8 = (unsigned int *)(*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL);
    if (v8 == (unsigned int *)-4 || v8 == 0)
      goto LABEL_18;
    v10 = v8 + 24;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 - 1, v10));
    if (v11 > 0)
      goto LABEL_18;
    if ((v11 & 0x80000000) == 0)
    {
      *((_QWORD *)v8 + 7) = 0xDEAD000000000000;
      _dispatch_object_dealloc_VARIANT_mp(v8);
LABEL_18:
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = -1;
      return;
    }
  }
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
}

_BYTE *_dispatch_source_data_create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *result;

  if (a3 | a2)
    return 0;
  result = _dispatch_calloc(1uLL, *(unsigned int *)(a1 + 24));
  *(_QWORD *)result = a1;
  result[28] = *(_BYTE *)(a1 + 8);
  result[29] |= 1u;
  return result;
}

char *_dispatch_source_signal_create(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 <= 0x1F)
    return _dispatch_unote_create_with_handle_VARIANT_mp(a1, a2, a3);
  else
    return 0;
}

void _dispatch_timer_unote_configure_VARIANT_mp(uint64_t a1)
{
  unint64_t *v2;
  _BYTE *v3;
  unsigned int v4;
  char v5;
  __int128 v6;

  v2 = (unint64_t *)(a1 + 104);
  do
    v3 = (_BYTE *)__ldxr(v2);
  while (__stxr(0, v2));
  v4 = *(unsigned __int8 *)(a1 + 30);
  if (*((_DWORD *)v3 + 6) != ((v4 >> 2) & 3))
  {
    v5 = v4 & 0xF3;
    *(_BYTE *)(a1 + 30) = v5;
    *(_BYTE *)(a1 + 30) = v5 | (4 * v3[24]);
  }
  v6 = *(_OWORD *)v3;
  *(_QWORD *)(a1 + 96) = *((_QWORD *)v3 + 2);
  *(_OWORD *)(a1 + 80) = v6;
  free(v3);
  *(_QWORD *)(a1 + 72) = 0;
  if ((*(_QWORD *)(a1 + 16) & 1) != 0)
    _dispatch_timer_unote_resume(a1);
}

double _dispatch_source_timer_create(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  char **v4;
  unsigned __int8 *v5;
  unsigned int v6;
  double result;

  if ((a3 & 1) != 0)
    v3 = a3 & 0xFFFFFFFD;
  else
    v3 = a3;
  if ((v3 & ~*(_DWORD *)(a1 + 20)) != 0)
    return result;
  v4 = (char **)a1;
  if ((*(_BYTE *)(a1 + 11) & 0x10) != 0)
  {
    if (!a2)
      return result;
LABEL_16:
    v5 = (unsigned __int8 *)_dispatch_calloc(1uLL, *((unsigned int *)v4 + 6));
    *(_QWORD *)v5 = v4;
    v5[28] = *((_BYTE *)v4 + 8);
    v5[29] |= 2u;
    v6 = *((unsigned __int8 *)v4 + 11) | v3 | v5[30];
    v5[30] = v6;
    *((_DWORD *)v5 + 6) = 3 * ((v6 >> 2) & 3) + (v6 & 3);
    result = NAN;
    *((_QWORD *)v5 + 14) = -1;
    *((_QWORD *)v5 + 10) = -1;
    *((_QWORD *)v5 + 11) = -1;
    *((_QWORD *)v5 + 12) = -1;
    return result;
  }
  if (*(unsigned __int8 *)(a1 + 8) != 236)
  {
    switch(a2)
    {
      case 0:
        goto LABEL_16;
      case 1:
        goto LABEL_15;
      case 2:
        v3 |= 4u;
        goto LABEL_15;
      case 3:
        v3 |= 8u;
LABEL_15:
        v4 = &_dispatch_source_type_timer_with_clock_VARIANT_mp;
        goto LABEL_16;
      default:
        return result;
    }
  }
  if (!a2)
    goto LABEL_16;
  return result;
}

void _dispatch_event_loop_drain_timers_VARIANT_mp(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int *v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  _QWORD v62[2];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v62[0] = 0;
  v62[1] = 0;
  v63 = 0;
  v3 = a2;
  do
  {
    if (!a2)
    {
      *(_BYTE *)(a1 + 6) = 0;
      return;
    }
    v4 = 0;
    do
    {
      v5 = a1 + 32 * v4;
      v8 = *(_QWORD *)(v5 + 8);
      v6 = (uint64_t *)(v5 + 8);
      v7 = v8;
      if (v8)
      {
        v9 = v4 / 3uLL;
        while (1)
        {
          v10 = v62[v9];
          if (!v10)
          {
            v64 = 0;
            v65 = 0;
            mach_get_times();
            v63 = v65 + 1000000000 * v64;
            v10 = v62[v9];
          }
          v11 = *(_QWORD *)(v7 + 80);
          v12 = v10 >= v11;
          v13 = v10 - v11;
          if (!v12)
            goto LABEL_47;
          if ((*(_BYTE *)(v7 + 30) & 0x40) != 0)
          {
            _dispatch_timer_unote_disarm(v7, a1);
            v14 = (unsigned int *)(*(_QWORD *)(v7 + 16) & 0xFFFFFFFFFFFFFFFCLL);
            if (v14 != (unsigned int *)-4 && v14 != 0)
            {
              v16 = v14 + 24;
              do
                v17 = __ldxr(v16);
              while (__stxr(v17 - 1, v16));
              if (v17 <= 0)
              {
                if (v17 < 0)
                  _os_object_allows_weak_reference_VARIANT_mp_cold_1();
                *((_QWORD *)v14 + 7) = 0xDEAD000000000000;
                _dispatch_object_dealloc_VARIANT_mp(v14);
              }
            }
            *(_QWORD *)(v7 + 16) = 0;
            *(_QWORD *)(v7 + 72) = 2;
            goto LABEL_23;
          }
          if (!*(_QWORD *)(v7 + 104))
            break;
          _dispatch_timer_unote_configure_VARIANT_mp(v7);
LABEL_24:
          v7 = *v6;
          if (!*v6)
            goto LABEL_47;
        }
        if (*(_QWORD *)(v7 + 72))
        {
          v26 = (unint64_t *)(v7 + 72);
          _dispatch_timer_unote_disarm(v7, a1);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 | 1, v26));
        }
        else
        {
          v18 = *(_QWORD *)(v7 + 96);
          v19 = v13 / v18;
          if (v19 + 1 < 0x7FFFFFFFFFFFFFFFLL)
            v20 = v19 + 1;
          else
            v20 = 0x7FFFFFFFFFFFFFFFLL;
          if (v18 > 0x7FFFFFFFFFFFFFFELL)
          {
            v21 = -1;
            *(_QWORD *)(v7 + 80) = -1;
            *(_QWORD *)(v7 + 88) = -1;
          }
          else
          {
            v21 = v20 * v18 + v11;
            v22 = *(_QWORD *)(v7 + 88) + v20 * v18;
            *(_QWORD *)(v7 + 80) = v21;
            *(_QWORD *)(v7 + 88) = v22;
          }
          v23 = 2 * v20;
          if (*(_QWORD *)(55 - *(_QWORD *)(v7 + 8)) >> 55)
          {
            if (MEMORY[0xFFFFFC100])
              kdebug_trace();
          }
          else if (*(_DWORD *)(v7 + 24) != -1 && v21 <= 0x7FFFFFFFFFFFFFFELL)
          {
            if (*(_DWORD *)(7 - *(_QWORD *)(v7 + 8)) != 0x7FFFFFFF)
            {
              v24 = (unsigned int *)(7 - *(_QWORD *)(v7 + 8));
              do
                v25 = __ldxr(v24);
              while (__stxr(v25 + 2, v24));
              if (v25 <= 0)
                dispatch_set_target_queue_VARIANT_mp_cold_2();
            }
            _dispatch_timer_unote_arm(v7, a1, v4);
            *(_QWORD *)(v7 + 72) = v23;
            goto LABEL_23;
          }
          _dispatch_timer_unote_disarm(v7, a1);
          atomic_store(v23 | 1, (unint64_t *)(v7 + 72));
        }
LABEL_23:
        (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 48))(v7, 16, 0, 0);
        goto LABEL_24;
      }
LABEL_47:
      ++v4;
    }
    while (v4 != v3);
    *(_BYTE *)(a1 + 6) = 0;
    v28 = 0;
    do
    {
      v29 = a1 + 32 * v28;
      v30 = (char *)(v29 + 7);
      if ((*(_BYTE *)(v29 + 7) & 2) == 0)
        goto LABEL_97;
      v31 = *(_QWORD *)(v29 + 8);
      if (!v31)
        goto LABEL_93;
      v32 = *(_QWORD *)(v31 + 80);
      v33 = *(_QWORD *)(*(_QWORD *)(a1 + 32 * v28 + 16) + 88);
      v34 = v62[v28 / 3];
      if (!v34)
      {
        v64 = 0;
        v65 = 0;
        mach_get_times();
        v63 = v65 + 1000000000 * v64;
        v34 = v62[v28 / 3];
      }
      v35 = v28 % 3;
      if (v32 <= v34)
        goto LABEL_92;
      v36 = *(_DWORD *)v29;
      if (*(_DWORD *)v29 >= 3u)
      {
        v37 = _dispatch_kevent_coalescing_window[v35];
        if (v37 + v32 < v33)
        {
          v38 = v33 - v37;
          v32 = *(_QWORD *)(*(_QWORD *)(v29 + 8) + 80);
          v39 = a1 + 32 * v28;
          v40 = *(unsigned __int8 *)(v39 + 4);
          v41 = (uint64_t *)(v39 + 24);
          v42 = 2;
          do
          {
            if (v42 > 1)
            {
              v44 = __clz((v42 - 2) | 7);
              v45 = v41;
              if (30 - v44 != v40)
                v45 = (uint64_t *)(*v41 + 8 * ((8 << (v40 - 2)) - 30 + v44));
              v46 = *v45;
              if (v44 == 29)
                v47 = 0;
              else
                v47 = -8 << (28 - v44);
              v43 = v46 + 8 * (v47 + v42 - 2);
            }
            else
            {
              v43 = a1 + 32 * v28 + 8 * v42 + 8;
            }
            v48 = *(_QWORD *)(*(_QWORD *)v43 + 80);
            if (v48 <= v32)
              v49 = v32;
            else
              v49 = v48;
            v50 = (v42 & 0xFFFFFFFE) + 2;
            if (v50 == v36)
              v51 = ((v42 - 2) >> 1) & 0x7FFFFFFE;
            else
              v51 = v42 & 0xFFFFFFFE;
            v52 = (v51 + 3) >> __clz(__rbit32(-4 - v51));
            v53 = v42 & 1 | (2 * v52);
            if (!v52)
              v53 = -1;
            if (2 * v42 - (v42 & 1) + 2 < v36)
              v53 = 2 * v42 - (v42 & 1) + 2;
            if (v50 == v36)
              v54 = ((v42 - 2) >> 1) & 0x7FFFFFFE;
            else
              v54 = v42 & 0xFFFFFFFE;
            v55 = (v54 + 3) >> __clz(__rbit32(-4 - v54));
            v42 = v42 & 1 | (2 * v55);
            if (!v55)
              v42 = -1;
            if (v48 <= v38)
            {
              v42 = v53;
              v32 = v49;
            }
          }
          while (v42 < v36);
        }
      }
      v56 = v32 - v34;
      v57 = v56 >= 0x7FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v56;
      v58 = v33 - v32 >= 0x7FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v33 - v32;
      if (!v57)
      {
LABEL_92:
        *(_BYTE *)(a1 + 6) |= (1 << v35) | 0x80;
LABEL_93:
        v60 = *v30;
        if ((*v30 & 1) != 0)
        {
          _dispatch_event_loop_timer_delete_VARIANT_mp(a1, v28);
          v60 = *v30;
        }
        v59 = v60 & 0xFC;
        goto LABEL_96;
      }
      if ((unint64_t)(v57 - 0x7FFFFFFFFFFFFFFFLL) <= 0x8000000000000001)
        goto LABEL_93;
      _dispatch_event_loop_timer_arm_VARIANT_mp(a1, v28, v57, v58, (uint64_t)v62);
      v59 = *v30 & 0xFC | 1;
LABEL_96:
      *v30 = v59;
LABEL_97:
      ++v28;
    }
    while (v28 != v3);
  }
  while (*(_BYTE *)(a1 + 6));
}

double _dispatch_timer_unote_disarm(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  _QWORD *v10;
  char v11;
  char v12;
  unsigned int v13;
  uint64_t *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  _QWORD *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  double result;

  v4 = *(unsigned int *)(a1 + 24);
  v5 = a2 + 32 * v4;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)v5 - 2;
  *(_DWORD *)v5 = v7;
  if (v6 == 2)
  {
    *(_BYTE *)(v5 + 7) |= 2u;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
  }
  else
  {
    v8 = 0;
    v9 = (_BYTE *)(v5 + 4);
    v10 = (_QWORD *)(v5 + 24);
    v11 = 1;
    do
    {
      v12 = v11;
      v13 = v7 + v8;
      if (v7 + v8 > 1)
      {
        v15 = *v9;
        v16 = v13 - 2;
        v17 = __clz(v16 | 7);
        v18 = (_QWORD *)(v5 + 24);
        if (30 - v17 != v15)
          v18 = (_QWORD *)(*v10 + 8 * ((8 << (v15 - 2)) + v17 - 30));
        if (v17 == 29)
          v19 = 0;
        else
          v19 = -8 << (28 - v17);
        v14 = (uint64_t *)(*v18 + 8 * (v19 + v16));
      }
      else
      {
        v14 = (uint64_t *)(a2 + 32 * v4 + 8 * v13 + 8);
      }
      v20 = *v14;
      *v14 = 0;
      if (v20 != a1)
        _dispatch_timer_heap_resift(v5, v20, *(_DWORD *)(a1 + 4 * v8 + 112));
      v11 = 0;
      v8 = 1;
    }
    while ((v12 & 1) != 0);
    v21 = *v9;
    v22 = (8 << (v21 - 2)) - v21 + 4;
    v23 = v21 - 1;
    if (!v23)
      v22 = 2;
    if (v7 <= v22)
    {
      *v9 = v23;
      v24 = (_QWORD *)*v10;
      if ((_BYTE)v23)
      {
        v25 = v23;
        v26 = 8 << (v23 - 1);
        v27 = v24[v26 - v23];
        v28 = v23 - 1;
        if (v25 != 1)
          memcpy((void *)(v27 + 8 * ((v26 >> 1) - v28)), &v24[v26 - v28], 8 * v28);
      }
      else
      {
        v27 = 0;
      }
      *v10 = v27;
      free(v24);
    }
  }
  result = NAN;
  *(_QWORD *)(a1 + 112) = -1;
  *(_BYTE *)(a2 + 6) |= (1 << (v4 % 3)) | 0x80;
  *(_QWORD *)(a1 + 16) &= ~1uLL;
  return result;
}

uint64_t _dispatch_timer_unote_arm(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;

  v5 = result;
  if ((*(_QWORD *)(result + 16) & 1) != 0)
  {
    _dispatch_timer_heap_resift(a2 + 32 * a3, result, *(_DWORD *)(result + 112));
    result = _dispatch_timer_heap_resift(a2 + 32 * a3, v5, *(_DWORD *)(v5 + 116));
  }
  else
  {
    *(_DWORD *)(result + 24) = a3;
    v6 = a2 + 32 * a3;
    v7 = *(_DWORD *)v6;
    v8 = *(_DWORD *)v6 + 2;
    *(_DWORD *)v6 = v8;
    v9 = *(_DWORD *)(result + 36);
    v10 = (v9 >> 8) & 0xF;
    v11 = (unsigned __int16)v9 >> 12;
    if (v10 > v11)
      v11 = v10;
    if (v11 > *(unsigned __int8 *)(v6 + 5))
    {
      *(_BYTE *)(v6 + 5) = v11;
      *(_BYTE *)(v6 + 7) |= 2u;
    }
    if (v7)
    {
      if (*(_BYTE *)(a2 + 32 * a3 + 4))
      {
        v12 = *(unsigned __int8 *)(a2 + 32 * a3 + 4);
        v13 = (8 << (v12 - 1)) - v12 + 3;
      }
      else
      {
        v13 = 2;
      }
      if (v8 > v13)
        _dispatch_timer_heap_grow(a2 + 32 * a3);
      _dispatch_timer_heap_resift(a2 + 32 * a3, v5, v7);
      result = _dispatch_timer_heap_resift(a2 + 32 * a3, v5, v7 + 1);
    }
    else
    {
      v14 = a2 + 32 * a3;
      *(_BYTE *)(v14 + 7) |= 2u;
      *(_QWORD *)(result + 112) = 0x100000000;
      *(int64x2_t *)(v14 + 8) = vdupq_n_s64(result);
    }
    *(_QWORD *)(v5 + 16) |= 1uLL;
  }
  *(_BYTE *)(a2 + 6) |= (1 << (a3 % 3)) | 0x80;
  return result;
}

uint64_t _dispatch_timer_heap_resift(uint64_t result, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  unsigned int v8;
  _QWORD *v9;
  char v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD *v21;
  int v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;

  v3 = *(_DWORD *)result;
  v4 = a3 & 1;
  v5 = *(unsigned __int8 *)(result + 4);
  v6 = a3 - 2;
  if (a3 < 2)
  {
    v7 = (_QWORD *)(result + 8 * a3 + 8);
LABEL_22:
    v19 = a3 & 1;
    v20 = 2 * a3 - v19 + 2;
    if (v20 < v3)
    {
      v21 = (_QWORD *)(result + 24);
      v22 = (8 << (v5 - 2)) - 30;
      while (1)
      {
        if (v20 > 1)
        {
          v23 = __clz((v20 - 2) | 7);
          v24 = (uint64_t *)(result + 24);
          if (30 - v23 != v5)
            v24 = (uint64_t *)(*v21 + 8 * (v22 + v23));
          v25 = *v24;
          v26 = v23 == 29 ? 0 : -8 << (28 - v23);
          v13 = (_QWORD *)(v25 + 8 * (v26 + v20 - 2));
        }
        else
        {
          v13 = (_QWORD *)(result + 8 * v20 + 8);
        }
        v27 = *v13;
        if (v20 + 2 >= v3)
        {
          v12 = v20;
        }
        else
        {
          if (v20 < 0xFFFFFFFE)
          {
            v29 = __clz(v20 | 7);
            v30 = (uint64_t *)(result + 24);
            if (30 - v29 != v5)
              v30 = (uint64_t *)(*v21 + 8 * (v22 + v29));
            v31 = *v30;
            v32 = v29 == 29 ? 0 : -8 << (28 - v29);
            v28 = (_QWORD *)(v31 + 8 * (v32 + v20));
          }
          else
          {
            v28 = (_QWORD *)(result + 8 * (v20 + 2) + 8);
          }
          v12 = v20;
          if (*(_QWORD *)(v27 + 8 * v4 + 80) > *(_QWORD *)(*v28 + 8 * v4 + 80))
          {
            v13 = v28;
            v27 = *v28;
            v12 = v20 + 2;
          }
        }
        if (*(_QWORD *)(a2 + 80 + 8 * v4) <= *(_QWORD *)(v27 + 8 * v4 + 80))
          break;
        if (a3 <= 1)
          *(_BYTE *)(result + 7) |= 2u;
        *v7 = v27;
        *(_DWORD *)(v27 + 4 * v19 + 112) = a3;
        v19 = v12 & 1;
        v20 = 2 * v12 - v19 + 2;
        v7 = v13;
        a3 = v12;
        if (v20 >= v3)
          goto LABEL_50;
      }
    }
    v12 = a3;
    v13 = v7;
LABEL_50:
    v7 = v13;
    a3 = v12;
    if (v12 <= 1)
    {
LABEL_51:
      *(_BYTE *)(result + 7) |= 2u;
      v7 = v13;
      a3 = v12;
    }
    goto LABEL_52;
  }
  v8 = __clz(v6 | 7);
  if (30 - v8 == v5)
    v9 = (_QWORD *)(result + 24);
  else
    v9 = (_QWORD *)(*(_QWORD *)(result + 24) + 8 * (v8 + (8 << (v5 - 2)) - 30));
  v10 = 0;
  if (v8 == 29)
    v11 = 0;
  else
    v11 = -8 << (28 - v8);
  v7 = (_QWORD *)(*v9 + 8 * (v11 + v6));
  while (1)
  {
    v12 = a3 & 1 | (2 * ((a3 - 2) >> 2));
    if (v12 > 1)
    {
      v14 = __clz((v12 - 2) | 7);
      v15 = (uint64_t *)(result + 24);
      if (30 - v14 != v5)
        v15 = (uint64_t *)(*(_QWORD *)(result + 24) + 8 * ((8 << (v5 - 2)) - 30 + v14));
      v16 = *v15;
      v17 = v14 == 29 ? 0 : -8 << (28 - v14);
      v13 = (_QWORD *)(v16 + 8 * (v17 + v12 - 2));
    }
    else
    {
      v13 = (_QWORD *)(result + 8 * v12 + 8);
    }
    v18 = *v13;
    if (*(_QWORD *)(*v13 + 8 * v4 + 80) <= *(_QWORD *)(a2 + 80 + 8 * v4))
      break;
    *v7 = v18;
    *(_DWORD *)(v18 + 4 * (a3 & 1) + 112) = a3;
    v10 = 1;
    v7 = v13;
    a3 = a3 & 1 | (2 * ((a3 - 2) >> 2));
    if (v12 <= 1)
      goto LABEL_51;
  }
  if ((v10 & 1) == 0)
    goto LABEL_22;
LABEL_52:
  *v7 = a2;
  *(_DWORD *)(a2 + 4 * (a3 & 1) + 112) = a3;
  return result;
}

char *_dispatch_timer_heap_grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  size_t v4;
  char *result;
  char *v6;

  v2 = *(unsigned __int8 *)(a1 + 4);
  *(_BYTE *)(a1 + 4) = v2 + 1;
  v3 = *(_QWORD *)(a1 + 24);
  if (v2)
    v4 = (8 << (v2 - 1));
  else
    v4 = 8;
  result = (char *)_dispatch_calloc(v4, 8uLL);
  v6 = result;
  if (v2 >= 2)
  {
    result = (char *)memcpy(&result[8 * (v4 - (v2 - 1))], (const void *)(v3 + 8 * ((v4 >> 1) - (v2 - 1))), 8 * (v2 - 1));
LABEL_7:
    *(_QWORD *)&v6[8 * (v4 - v2)] = v3;
    goto LABEL_8;
  }
  if (v2)
    goto LABEL_7;
LABEL_8:
  *(_QWORD *)(a1 + 24) = v6;
  return result;
}

uint64_t _dispatch_sync_ipc_handoff_begin_VARIANT_mp(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t result;
  _QWORD v4[3];
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4[0] = a2;
  v4[1] = 655343;
  v4[2] = a1;
  v5 = -2147483392;
  v7 = 0;
  v6 = 0;
  v8 = 0;
  v9 = a3;
  v10 = -1;
  v11 = a1;
  result = _dispatch_kq_immediate_update(a1, (uint64_t)v4);
  if ((result & 0xFFFFFFFD) != 0)
    _dispatch_sync_ipc_handoff_begin_VARIANT_mp_cold_1(result);
  return result;
}

uint64_t _dispatch_kq_immediate_update(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  int v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  if (v2 && *(_QWORD *)(v2 + 24) == a1)
  {
    v3 = *(_QWORD *)(v2 + 32);
    v4 = *(unsigned __int16 *)(v2 + 40);
    if (*(_WORD *)(v2 + 40))
    {
      v5 = 0;
      v6 = (unsigned __int16 *)(v3 + 8);
      v7 = (unsigned __int16 *)(v3 + 8);
      while (1)
      {
        v8 = *v7;
        v7 += 36;
        if (v8 == *(unsigned __int16 *)(a2 + 8)
          && *((_QWORD *)v6 - 1) == *(_QWORD *)a2
          && *((_QWORD *)v6 + 1) == *(_QWORD *)(a2 + 16))
        {
          break;
        }
        ++v5;
        v6 = v7;
        if (v4 == v5)
          return _dispatch_kq_drain(a1, a2, 1, 3);
      }
    }
    else
    {
      LODWORD(v5) = 0;
    }
    if (v5 < v4)
    {
      v9 = v4 - 1;
      *(_WORD *)(v2 + 40) = v9;
      if ((_DWORD)v5 != v9)
      {
        v10 = v3 + 72 * v5;
        v11 = v3 + 72 * v9;
        *(_OWORD *)v10 = *(_OWORD *)v11;
        v12 = *(_OWORD *)(v11 + 16);
        v13 = *(_OWORD *)(v11 + 32);
        v14 = *(_OWORD *)(v11 + 48);
        *(_QWORD *)(v10 + 64) = *(_QWORD *)(v11 + 64);
        *(_OWORD *)(v10 + 32) = v13;
        *(_OWORD *)(v10 + 48) = v14;
        *(_OWORD *)(v10 + 16) = v12;
      }
    }
  }
  return _dispatch_kq_drain(a1, a2, 1, 3);
}

double _dispatch_sync_ipc_handoff_end_VARIANT_mp(uint64_t a1, unsigned int a2)
{
  double result;
  _QWORD v3[3];
  unsigned int v4;
  __int128 v5;
  _BYTE v6[28];

  v3[0] = a2;
  v3[1] = 524271;
  v3[2] = a1;
  v4 = 0x80000000;
  v5 = 0u;
  memset(v6, 0, sizeof(v6));
  *(_QWORD *)&result = _dispatch_kq_deferred_update(a1, (uint64_t)v3).n128_u64[0];
  return result;
}

__n128 _dispatch_kq_deferred_update(uint64_t a1, uint64_t a2)
{
  unint64_t StatusReg;
  uint64_t v3;
  __n128 result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 *v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_QWORD *)(StatusReg + 232);
  if (v3 && *(_QWORD *)(v3 + 24) == a1 && (v5 = *(unsigned __int16 *)(v3 + 42), *(_WORD *)(v3 + 42)))
  {
    v6 = *(unsigned __int16 *)(v3 + 40);
    if (*(_WORD *)(v3 + 40))
    {
      v7 = 0;
      v8 = *(_QWORD *)(v3 + 32) + 8;
      v9 = (unsigned __int16 *)v8;
      while (1)
      {
        v10 = *v9;
        v9 += 36;
        if (v10 == *(unsigned __int16 *)(a2 + 8)
          && *(_QWORD *)(v8 - 8) == *(_QWORD *)a2
          && *(_QWORD *)(v8 + 8) == *(_QWORD *)(a2 + 16))
        {
          break;
        }
        ++v7;
        v8 = (uint64_t)v9;
        if (v6 == v7)
        {
          LODWORD(v7) = *(unsigned __int16 *)(v3 + 40);
          break;
        }
      }
    }
    else
    {
      LODWORD(v7) = 0;
    }
    if (a1 != -4)
      *(_QWORD *)(StatusReg + 40) = 1;
    if ((_DWORD)v7 == v5)
    {
      *(_WORD *)(v3 + 40) = 1;
      v14 = a2;
      v15 = v3;
      _dispatch_kq_drain(a1, *(_QWORD *)(v3 + 32), v6, 3);
      a2 = v14;
      v3 = v15;
      LODWORD(v7) = 0;
    }
    else if ((_DWORD)v7 == (_DWORD)v6)
    {
      *(_WORD *)(v3 + 40) = v6 + 1;
      LODWORD(v7) = v6;
    }
    v11 = *(_QWORD *)(v3 + 32) + 72 * v7;
    *(_OWORD *)v11 = *(_OWORD *)a2;
    result = *(__n128 *)(a2 + 16);
    v12 = *(_OWORD *)(a2 + 32);
    v13 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(v11 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(v11 + 32) = v12;
    *(_OWORD *)(v11 + 48) = v13;
    *(__n128 *)(v11 + 16) = result;
  }
  else
  {
    _dispatch_kq_drain(a1, a2, 1, 3);
  }
  return result;
}

uint64_t _dispatch_unote_register_muxed_VARIANT_mp(uint64_t a1)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  _QWORD **v5;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  __int16 v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t (*v12)(int64_t, uint64_t);
  uint64_t result;
  int v14;
  int v15;
  int v16;
  uint64_t (*v17)(_QWORD *);
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(unsigned int *)(a1 + 24);
  v3 = *(char *)(a1 + 28);
  v4 = v2 >> 8;
  if ((v3 | 0x10) != 0xFFFFFFF8)
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
  v5 = (_QWORD **)((char *)&_dispatch_sources + 8 * (v4 & 0x3F));
  v6 = *v5;
  if (!*v5)
  {
LABEL_7:
    v7 = (int64_t)_dispatch_calloc(1uLL, 0x60uLL);
    v6 = (_QWORD *)v7;
    *(_QWORD *)(v7 + 24) = *(unsigned int *)(a1 + 24);
    v8 = v7 + 24;
    v9 = *(_WORD *)(*(_QWORD *)a1 + 12) | 5;
    v10 = *(_DWORD *)(*(_QWORD *)a1 + 16) | *(_DWORD *)(a1 + 32);
    v11 = *(unsigned __int16 *)(*(_QWORD *)a1 + 14);
    *(_WORD *)(v7 + 32) = *(char *)(*(_QWORD *)a1 + 8);
    *(_WORD *)(v7 + 34) = v9;
    *(_QWORD *)(v7 + 48) = v10;
    *(_QWORD *)(v7 + 56) = v11;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_DWORD *)(v7 + 36) = 0x2000000;
    *(_QWORD *)(v7 + 40) = v7 | 1;
    v12 = *(uint64_t (**)(int64_t, uint64_t))(*(_QWORD *)a1 + 40);
    if (v12)
    {
      if ((v12(v7, v8) & 1) == 0)
        goto LABEL_9;
    }
    else if (_dispatch_kq_immediate_update(-4, v8))
    {
LABEL_9:
      free(v6);
      return 0;
    }
    *((_WORD *)v6 + 17) &= 0xFDFEu;
    v18 = *v5;
    *v6 = *v5;
    if (v18)
      v18[1] = v6;
    *v5 = v6;
    v6[1] = v5;
    goto LABEL_18;
  }
  while (v6[3] != v2 || *((unsigned __int16 *)v6 + 16) != (unsigned __int16)v3)
  {
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_7;
  }
  v14 = *(_DWORD *)(a1 + 32);
  v15 = *((_DWORD *)v6 + 12);
  v16 = v14 & ~v15;
  if (v16)
  {
    *((_DWORD *)v6 + 12) = v15 | v14;
    v17 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)a1 + 40);
    if (v17)
    {
      if ((v17(v6) & 1) == 0)
        goto LABEL_13;
    }
    else if (_dispatch_kq_immediate_update(-4, (uint64_t)(v6 + 3)))
    {
LABEL_13:
      result = 0;
      *((_DWORD *)v6 + 12) &= ~v16;
      return result;
    }
  }
LABEL_18:
  v19 = v6 + 2;
  v20 = v6[2];
  *(_QWORD *)(a1 - 24) = v20;
  v21 = a1 - 24;
  if (v20)
    *(_QWORD *)(v20 + 8) = v21;
  *v19 = v21;
  *(_QWORD *)(a1 - 16) = v19;
  if (*(unsigned __int8 *)(a1 + 28) == 232)
    *(_BYTE *)(a1 + 30) = v6[8] != 0;
  *(_QWORD *)(a1 - 8) = v6;
  *(_QWORD *)(a1 + 16) = -3;
  return 1;
}

void _dispatch_unote_resume_muxed_VARIANT_mp(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);

  *(_QWORD *)(a1 + 16) |= 1uLL;
  v2 = a1 - 8;
  v1 = *(_QWORD *)(a1 - 8);
  v3 = *(void (**)(uint64_t))(*(_QWORD *)(v2 + 8) + 40);
  if (v3)
    v3(v1);
  else
    _dispatch_kq_deferred_update(-4, v1 + 24);
}

uint64_t _dispatch_unote_unregister_muxed_VARIANT_mp(uint64_t *a1)
{
  __int16 *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  __int16 v8;
  uint64_t (*v9)(__int16 *);
  uint64_t v10;

  v1 = (__int16 *)*(a1 - 1);
  if (v1[16] == -24)
    *((_BYTE *)a1 + 30) = 0;
  a1[2] = 0;
  v2 = *(a1 - 3);
  if (v2)
    *(_QWORD *)(v2 + 8) = *(a1 - 2);
  *(_QWORD *)*(a1 - 2) = v2;
  *(a1 - 1) = 0;
  v3 = *((_QWORD *)v1 + 2);
  if (v3)
  {
    v4 = *(_DWORD *)(*a1 + 16);
    v5 = (uint64_t *)*((_QWORD *)v1 + 2);
    do
    {
      v6 = v5;
      v4 |= *((_DWORD *)v5 + 14);
      v5 = (uint64_t *)*v5;
    }
    while (v5);
    v7 = *((_DWORD *)v1 + 12);
    if ((v7 & ~v4) == 0)
      goto LABEL_13;
    a1 = v6 + 3;
    *((_DWORD *)v1 + 12) = v7 & v4;
LABEL_11:
    v9 = *(uint64_t (**)(__int16 *))(*a1 + 40);
    if (v9)
    {
      if ((v9(v1) & 1) == 0)
        _dispatch_unote_unregister_muxed_VARIANT_mp_cold_1();
    }
    else
    {
      _dispatch_kq_deferred_update(-4, v1 + 12);
    }
LABEL_13:
    if (v3)
      return 1;
    goto LABEL_14;
  }
  v8 = v1[17];
  v1[17] = v8 | 2;
  if ((v8 & 2) == 0)
    goto LABEL_11;
LABEL_14:
  v10 = *(_QWORD *)v1;
  if (*(_QWORD *)v1)
    *(_QWORD *)(v10 + 8) = *((_QWORD *)v1 + 1);
  **((_QWORD **)v1 + 1) = v10;
  free(v1);
  return 1;
}

uint64_t _dispatch_unote_register_direct_VARIANT_mp(unsigned int *a1, uint64_t a2)
{
  return _dispatch_kq_unote_update(a2, a1, 5);
}

uint64_t _dispatch_kq_unote_update(uint64_t result, unsigned int *a2, __int16 a3)
{
  __int16 v3;
  unsigned int *v5;
  unint64_t StatusReg;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  __int16 v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int *v41;
  int v42;
  uint64_t v43;
  __int16 v44;
  __int16 v45;
  unsigned int v46;
  unsigned int *v47;
  int v48;
  int v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;

  v3 = a3;
  v5 = (unsigned int *)result;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_QWORD *)(StatusReg + 232);
  if ((a3 & 1) != 0)
  {
    if (result != -4)
    {
      if (result)
      {
        v8 = (unsigned int *)(result + 96);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
        if ((v9 & 0x80000000) != 0)
        {
          qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
          __break(1u);
LABEL_69:
          *(_WORD *)(v7 + 40) = 1;
          result = _dispatch_kq_drain(result, *(_QWORD *)(v7 + 32));
          LODWORD(v23) = 0;
          v21 = a2[6];
          goto LABEL_49;
        }
      }
    }
    *((_QWORD *)a2 + 2) = result | 1;
  }
  if (!v7 || *(_QWORD *)(v7 + 24) != result)
    goto LABEL_10;
  v21 = a2[6];
  v22 = *(_QWORD *)(v7 + 32);
  v23 = *(unsigned __int16 *)(v7 + 40);
  if (*(_WORD *)(v7 + 40))
  {
    v24 = 0;
    v25 = (unsigned __int16 *)(v22 + 8);
    v26 = (unsigned __int16 *)(v22 + 8);
    while (1)
    {
      v27 = *v26;
      v26 += 36;
      if (v27 == (unsigned __int16)*((char *)a2 + 28)
        && *((_QWORD *)v25 - 1) == v21
        && *((unsigned int **)v25 + 1) == a2)
      {
        break;
      }
      ++v24;
      v25 = v26;
      if (v23 == v24)
      {
        LODWORD(v24) = *(unsigned __int16 *)(v7 + 40);
        goto LABEL_42;
      }
    }
  }
  else
  {
    LODWORD(v24) = 0;
  }
  if (v24 >= v23)
  {
LABEL_42:
    if ((v3 & 5) != 4)
      goto LABEL_10;
  }
  else
  {
    v3 |= *(_WORD *)(v22 + 72 * v24 + 10) & 4;
    if ((v3 & 5) != 4)
    {
      *(_WORD *)(v7 + 40) = v23 - 1;
      if ((_DWORD)v24 != (unsigned __int16)(v23 - 1))
      {
        v28 = v22 + 72 * v24;
        v29 = v22 + 72 * (unsigned __int16)(v23 - 1);
        *(_OWORD *)v28 = *(_OWORD *)v29;
        v30 = *(_OWORD *)(v29 + 16);
        v31 = *(_OWORD *)(v29 + 32);
        v32 = *(_OWORD *)(v29 + 48);
        *(_QWORD *)(v28 + 64) = *(_QWORD *)(v29 + 64);
        *(_OWORD *)(v28 + 32) = v31;
        *(_OWORD *)(v28 + 48) = v32;
        *(_OWORD *)(v28 + 16) = v30;
      }
LABEL_10:
      v10 = *(_QWORD *)a2;
      v11 = *(_WORD *)(*(_QWORD *)a2 + 12) | v3;
      if ((v11 & 0x201) == 0x200)
        v11 &= ~0x200u;
      v12 = a2[6];
      v13 = *(char *)(v10 + 8);
      v14 = a2[9];
      if ((v14 & 0x4000000) != 0)
      {
        v15 = v14 & 0x8E000000 | 0xFF;
        LOWORD(v14) = (unsigned __int16)v14 >> 12;
      }
      else
      {
        v15 = v14 & 0x8E0000FF;
        v14 = (v14 >> 8) & 0xF;
        if (!v14)
          goto LABEL_17;
      }
      v15 |= 256 << (v14 - 1);
LABEL_17:
      v16 = *(_DWORD *)(v10 + 16) | a2[8];
      v17 = *(unsigned __int16 *)(v10 + 14);
      v51 = 0u;
      v52 = 0u;
      v43 = v12;
      v44 = v13;
      v45 = v11;
      v46 = v15;
      v47 = a2;
      v48 = v16;
      v49 = 0;
      v50 = v17;
      result = _dispatch_kq_drain(result, &v43);
      v18 = result;
      if ((v3 & 1) == 0)
      {
        if ((v3 & 2) == 0)
          goto LABEL_65;
        if ((_DWORD)result == 36)
          return 0;
        goto LABEL_57;
      }
      if ((_DWORD)result)
      {
        if (v5 != (unsigned int *)-4)
        {
          if (v5)
          {
            v19 = v5 + 24;
            do
              v20 = __ldxr(v19);
            while (__stxr(v20 - 1, v19));
            if (v20 <= 0)
            {
              if (v20 < 0)
                goto LABEL_71;
              *((_QWORD *)v5 + 7) = 0xDEAD000000000000;
              _dispatch_object_dealloc_VARIANT_mp(v5);
            }
          }
        }
        result = 0;
        *((_QWORD *)a2 + 2) = 0;
        return result;
      }
      return 1;
    }
  }
  if (result != -4)
    *(_QWORD *)(StatusReg + 40) = 1;
  if ((_DWORD)v24 == *(unsigned __int16 *)(v7 + 42))
    goto LABEL_69;
  if ((_DWORD)v24 == (_DWORD)v23)
    *(_WORD *)(v7 + 40) = v23 + 1;
  else
    LODWORD(v23) = v24;
LABEL_49:
  v33 = *(_QWORD *)(v7 + 32) + 72 * v23;
  v34 = *(_QWORD *)a2;
  v35 = *(_WORD *)(*(_QWORD *)a2 + 12) | v3;
  if ((v35 & 0x201) == 0x200)
    v35 &= ~0x200u;
  v36 = *(char *)(v34 + 8);
  v37 = a2[9];
  if ((v37 & 0x4000000) != 0)
  {
    v38 = v37 & 0x8E000000 | 0xFF;
    LOWORD(v37) = (unsigned __int16)v37 >> 12;
    goto LABEL_55;
  }
  v38 = v37 & 0x8E0000FF;
  v37 = (v37 >> 8) & 0xF;
  if (v37)
LABEL_55:
    v38 |= 256 << (v37 - 1);
  v18 = 0;
  v39 = *(_DWORD *)(v34 + 16) | a2[8];
  v40 = *(unsigned __int16 *)(v34 + 14);
  *(_QWORD *)v33 = v21;
  *(_WORD *)(v33 + 8) = v36;
  *(_WORD *)(v33 + 10) = v35;
  *(_DWORD *)(v33 + 12) = v38;
  *(_QWORD *)(v33 + 16) = a2;
  *(_QWORD *)(v33 + 24) = v39;
  *(_QWORD *)(v33 + 32) = v40;
  *(_OWORD *)(v33 + 40) = 0u;
  *(_OWORD *)(v33 + 56) = 0u;
  if ((v3 & 3) != 2)
    return 1;
LABEL_57:
  if (v5 == (unsigned int *)-4)
    goto LABEL_64;
  if (!v5)
    goto LABEL_64;
  v41 = v5 + 24;
  do
    v42 = __ldxr(v41);
  while (__stxr(v42 - 1, v41));
  if (v42 > 0)
    goto LABEL_64;
  if ((v42 & 0x80000000) == 0)
  {
    *((_QWORD *)v5 + 7) = 0xDEAD000000000000;
    _dispatch_object_dealloc_VARIANT_mp(v5);
LABEL_64:
    *((_QWORD *)a2 + 2) = 0;
LABEL_65:
    if (v18)
      _dispatch_bug(1077, v18);
    return 1;
  }
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
LABEL_71:
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
  return result;
}

uint64_t _dispatch_unote_resume_direct_VARIANT_mp(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) |= 1uLL;
  return _dispatch_kq_unote_update(*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL, (unsigned int *)a1, 4);
}

uint64_t _dispatch_unote_unregister_direct_VARIANT_mp(uint64_t a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v10;
  BOOL v11;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = v4 & 0xFFFFFFFFFFFFFFFCLL;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  v7 = 2;
  if ((v4 & 0xFFFFFFFFFFFFFFFCLL) != 0xFFFFFFFFFFFFFFFCLL && v6 != 0)
  {
    if (*(_QWORD *)(v6 + 24) == v5)
    {
      a2 |= 5u;
      v7 = 6;
    }
    else
    {
      v7 = 2;
    }
  }
  if ((v4 & 2) != 0 && (a2 & 1) == 0)
    goto LABEL_10;
  if (v4 == 2)
  {
    *(_QWORD *)(a1 + 16) = 0;
    return 1;
  }
  if ((v4 & 1) != 0)
  {
    v10 = v7;
  }
  else
  {
    a2 |= 4u;
    v10 = 6;
  }
  v11 = v10 <= 3 && (a2 & 2) == 0;
  if (!v11 && (_dispatch_kq_unote_update(v5, (unsigned int *)a1, v10) & 1) != 0)
    return 1;
LABEL_10:
  if ((a2 & 4) != 0)
    _dispatch_unote_unregister_direct_VARIANT_mp_cold_1();
  return 0;
}

void _dispatch_event_loop_atfork_child_VARIANT_mp()
{
  _dispatch_mach_host_port_pred = 0;
  _dispatch_mach_host_port = 0;
}

_QWORD *_dispatch_event_loop_poke_VARIANT_mp(_QWORD *result, uint64_t a2, int a3)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  __int16 v7;
  int v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  unsigned int *v13;
  int v14;
  int v15;
  unsigned int *v16;
  unsigned int v17;
  BOOL v18;
  signed int v19;
  unsigned int *v20;
  unsigned int v21;
  BOOL v22;
  signed int v23;
  unsigned int v24;
  BOOL v25;
  signed int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[2];
  __int128 v33;

  if (result == (_QWORD *)-8)
  {
    v30 = 65526;
    memset(v32, 0, sizeof(v32));
    v33 = 0u;
    v29 = 1;
    v31 = -8;
    LODWORD(v32[0]) = 0x1000000;
    return (_QWORD *)_dispatch_kq_deferred_update(-4, &v29);
  }
  v3 = (uint64_t)result;
  if (result == (_QWORD *)-4 || !result)
    goto LABEL_54;
  if ((a2 & 0x4000000000) != 0)
    return (_QWORD *)((uint64_t (*)(void))_dispatch_mgr_q[2].superclass)();
  result = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  if (!result || result[3] != v3)
  {
    if ((a2 & 1) != 0)
    {
      v9 = *(unsigned int *)(*(_QWORD *)(v3 + 24) + 84);
      if ((v9 & 0x8000000) != 0)
        goto LABEL_59;
      v10 = (v9 >> 8) & 0xF;
      if (v10 <= (BYTE4(a2) & 7u))
        v10 = BYTE4(a2) & 7;
      if (v10 <= 1)
        LOBYTE(v10) = 1;
      v11 = 256 << (v10 - 1);
      v6 = a2 & 2 | 0x3700000001;
      v5 = v9 & 0x80000000 | v11 | 0xFF;
      if ((a2 & 2) != 0)
        v8 = 401;
      else
        v8 = 273;
      v7 = 5;
    }
    else
    {
      v5 = 0;
      v6 = 1;
      v7 = 7;
      v8 = 1;
    }
    v29 = v3;
    LOWORD(v30) = -17;
    WORD1(v30) = v7;
    HIDWORD(v30) = v5;
    v31 = v3;
    LODWORD(v32[0]) = v8;
    memset((char *)v32 + 4, 0, 20);
    *((_QWORD *)&v32[1] + 1) = v3 + 56;
    *(_QWORD *)&v33 = v6;
    *((_QWORD *)&v33 + 1) = a2;
    result = (_QWORD *)_dispatch_kq_poll(v3, &v29, 1, &v29, 1, 0, 0, 3);
    if (!(_DWORD)result)
    {
      if ((a3 & 0x80000000) == 0)
        return _os_object_release_internal_VARIANT_mp((void *)v3, v12);
      if ((a3 & 1) != 0)
        return _os_object_release_internal_n_VARIANT_mp((void *)v3, (const char *)2);
      return result;
    }
LABEL_55:
    v27 = DWORD2(v32[0]);
    v28 = WORD1(v30) & 0xBFFF;
    WORD1(v30) &= ~0x4000u;
    DWORD1(v32[0]) = DWORD2(v32[0]);
    *((_QWORD *)&v32[0] + 1) = 0;
    if (DWORD1(v32[0]) == 105)
    {
LABEL_60:
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid workloop owner, possible memory corruption";
      qword_1EDF52D38 = *((_QWORD *)&v33 + 1);
      __break(1u);
      goto LABEL_61;
    }
    if (v27 == 34)
    {
LABEL_61:
      v27 = HIDWORD(v30);
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Broken priority";
      qword_1EDF52D38 = SHIDWORD(v30);
      __break(1u);
      goto LABEL_62;
    }
    if (v27 != 2)
    {
LABEL_62:
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
      qword_1EDF52D38 = v27;
      __break(1u);
      return result;
    }
    v9 = ((unint64_t)LODWORD(v32[0]) << 32) | (v28 << 16) | 2;
    qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
    qword_1EDF52D38 = v9;
    __break(1u);
LABEL_59:
    qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Waking up a kq with cooperative thread request is not supported";
    qword_1EDF52D38 = v9;
    __break(1u);
    goto LABEL_60;
  }
  if ((*((_BYTE *)result + 45) & 4) != 0)
  {
LABEL_32:
    if ((a3 & 0x80000000) == 0)
    {
      if (*(_DWORD *)(v3 + 8) == 0x7FFFFFFF)
        return (_QWORD *)_dispatch_event_loop_leave_deferred_VARIANT_mp((uint64_t)result, a2);
      v16 = (unsigned int *)(v3 + 8);
      do
      {
        v17 = __ldxr(v16);
        v18 = __OFSUB__(v17, 1);
        v19 = v17 - 1;
      }
      while (__stlxr(v19, v16));
      if (!((v19 < 0) ^ v18 | (v19 == 0)))
        return (_QWORD *)_dispatch_event_loop_leave_deferred_VARIANT_mp((uint64_t)result, a2);
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
      goto LABEL_53;
    }
    return (_QWORD *)_dispatch_kevent_workloop_override_self((uint64_t)result, a2, a3);
  }
  if ((*((_BYTE *)result + 45) & 1) == 0)
  {
    if (a3 < 0)
    {
      v13 = (unsigned int *)(v3 + 8);
      v14 = *(_DWORD *)(v3 + 8);
      if ((a3 & 1) != 0)
      {
        if (v14 != 0x7FFFFFFF)
        {
          do
          {
            v24 = __ldxr(v13);
            v25 = __OFSUB__(v24, 1);
            v26 = v24 - 1;
          }
          while (__stlxr(v26, v13));
          if ((v26 < 0) ^ v25 | (v26 == 0))
          {
LABEL_53:
            qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
            __break(1u);
LABEL_54:
            qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Unsupported wlh configuration";
            qword_1EDF52D38 = v3;
            __break(1u);
            goto LABEL_55;
          }
        }
      }
      else if (v14 != 0x7FFFFFFF)
      {
        do
          v15 = __ldxr(v13);
        while (__stxr(v15 + 1, v13));
        if (v15 <= 0)
        {
          qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
          __break(1u);
          goto LABEL_32;
        }
      }
    }
    *((_BYTE *)result + 45) |= 3u;
    *result = *(_QWORD *)(v3 + 24);
    result[1] = v3;
    *((_DWORD *)result + 4) = BYTE4(a2) & 7;
    return result;
  }
  if ((a3 & 1) != 0 && *(_DWORD *)(v3 + 8) != 0x7FFFFFFF)
  {
    v20 = (unsigned int *)(v3 + 8);
    do
    {
      v21 = __ldxr(v20);
      v22 = __OFSUB__(v21, 2);
      v23 = v21 - 2;
    }
    while (__stlxr(v23, v20));
    if ((v23 < 0) ^ v22 | (v23 == 0))
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
      return (_QWORD *)_dispatch_kevent_workloop_override_self((uint64_t)result, a2, a3);
    }
  }
  return result;
}

void _dispatch_event_loop_drain_VARIANT_mp(int a1)
{
  unint64_t StatusReg;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_QWORD *)(StatusReg + 232);
  v4 = *(uint64_t **)(v3 + 24);
  v5 = v4 + 7;
  v6 = a1 & 3;
  while ((*(_BYTE *)(v3 + 45) & 2) == 0)
  {
LABEL_23:
    v19 = *(unsigned __int16 *)(v3 + 40);
    *(_WORD *)(v3 + 40) = 0;
    _dispatch_kq_drain((uint64_t)v4, *(_QWORD *)(v3 + 32), v19, a1);
    if (v4 != (uint64_t *)-4)
    {
      if (v4)
      {
        if (*(_BYTE *)(*v4 + 40) == 18)
        {
          v20 = v4[6];
          if (v20)
          {
            if (*(_BYTE *)(v20 + 6))
              _dispatch_event_loop_drain_timers_VARIANT_mp(v20, 6u);
          }
        }
      }
    }
    if (v6 != 1 || !*(_QWORD *)(StatusReg + 40))
      return;
  }
  v7 = *v5;
  *(_BYTE *)(v3 + 45) &= ~2u;
  v8 = *(_QWORD *)(v3 + 32);
  v9 = *(unsigned __int16 *)(v3 + 40);
  if (*(_WORD *)(v3 + 40))
  {
    v10 = 0;
    v11 = (uint64_t **)(v8 + 8);
    v12 = (uint64_t **)(v8 + 8);
    while (1)
    {
      v13 = *(__int16 *)v12;
      v12 += 9;
      if (v13 == -17 && *(v11 - 1) == v4 && v11[1] == v4)
        break;
      ++v10;
      v11 = v12;
      if (v9 == v10)
      {
        LODWORD(v10) = *(unsigned __int16 *)(v3 + 40);
        goto LABEL_12;
      }
    }
  }
  else
  {
    LODWORD(v10) = 0;
  }
  if ((_DWORD)v10 == (_DWORD)v9)
LABEL_12:
    *(_WORD *)(v3 + 40) = v9 + 1;
  v14 = *(unsigned int *)(v4[3] + 84);
  if ((v14 & 0x8000000) == 0)
  {
    v15 = (v14 >> 8) & 0xF;
    if (v15 <= (BYTE4(v7) & 7u))
      v15 = BYTE4(v7) & 7;
    v16 = v8 + 72 * v10;
    *(_QWORD *)v16 = v4;
    if (v15 <= 1)
      v17 = 1;
    else
      v17 = v15;
    *(_DWORD *)(v16 + 8) = 393199;
    *(_DWORD *)(v16 + 12) = v14 & 0x80000000 | (256 << (v17 - 1)) | 0xFF;
    *(_QWORD *)(v16 + 16) = v4;
    if ((v7 & 2) != 0)
      v18 = 401;
    else
      v18 = 273;
    *(_DWORD *)(v16 + 24) = v18;
    *(_QWORD *)(v16 + 36) = 0;
    *(_QWORD *)(v16 + 28) = 0;
    *(_DWORD *)(v16 + 44) = 0;
    *(_QWORD *)(v16 + 48) = v5;
    *(_QWORD *)(v16 + 56) = v7 & 2 | 0x3700000001;
    *(_QWORD *)(v16 + 64) = v7;
    goto LABEL_23;
  }
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Waking up a kq with cooperative thread request is not supported";
  qword_1EDF52D38 = v14;
  __break(1u);
}

uint64_t _dispatch_kq_drain(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t StatusReg;
  uint64_t result;
  uint64_t v10;
  _WORD *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _WORD *v15;
  _BYTE v16[32768];
  uint64_t v17;
  _WORD v18[576];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C874D8];
  if ((a4 & 2) == 0)
  {
    v17 = 0x8000;
    MEMORY[0x1E0C86820](a1, a2);
    bzero(v16, 0x8000uLL);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(_QWORD *)(StatusReg + 40) = 0;
    result = _dispatch_kq_poll(a1, a2, a3, (uint64_t)v18, 16, (uint64_t)v16, (uint64_t)&v17, a4);
    if (!(_DWORD)result)
      return result;
    if ((v18[5] & 0x4000) != 0)
      *(_QWORD *)(StatusReg + 40) = 1;
    if ((int)result >= 1)
    {
      v10 = result;
      v11 = v18;
      do
      {
        _dispatch_kevent_drain((uint64_t)v11);
        v11 += 36;
        --v10;
      }
      while (v10);
    }
    return 0;
  }
  v12 = _dispatch_kq_poll(a1, a2, a3, (uint64_t)v18, 16, 0, 0, a4);
  if (v12 < 1)
    return 0;
  v13 = v12;
  result = 0;
  v14 = v13;
  v15 = v18;
  do
  {
    if ((v15[5] & 0x4000) != 0 && *((_QWORD *)v15 + 4))
    {
      _dispatch_kevent_drain((uint64_t)v15);
      result = *((unsigned int *)v15 + 8);
    }
    v15 += 36;
    --v14;
  }
  while (v14);
  return result;
}

void _dispatch_event_loop_merge_VARIANT_mp(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  const void *v7;
  size_t v8;
  uint64_t v9;
  _QWORD v10[2];

  LODWORD(v2) = a2;
  v10[1] = *MEMORY[0x1E0C874D8];
  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  v4 = *(_QWORD **)(v3 + 24);
  MEMORY[0x1E0C86820](a1, a1);
  v6 = (char *)v10 - v5;
  memcpy((char *)v10 - v5, v7, v8);
  *(_WORD *)(v3 + 42) = 14;
  if ((int)v2 >= 1)
  {
    v2 = v2;
    do
    {
      _dispatch_kevent_drain((uint64_t)v6);
      v6 += 72;
      --v2;
    }
    while (v2);
  }
  if (v4 == (_QWORD *)-4)
  {
    if (*(_QWORD *)(v3 + 8) && *(_WORD *)(v3 + 40))
      _dispatch_event_loop_drain_VARIANT_mp(3);
  }
  else if (*(_BYTE *)(*v4 + 40) == 18)
  {
    v9 = v4[6];
    if (v9)
    {
      if (*(_BYTE *)(v9 + 6))
        _dispatch_event_loop_drain_timers_VARIANT_mp();
    }
  }
}

void _dispatch_kevent_drain(uint64_t a1)
{
  int v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(unsigned __int16 *)(a1 + 8);
  if (v1 != 65526)
  {
    if (v1 == 65519)
    {
      _dispatch_kevent_workloop_poke_drain(a1);
      return;
    }
    if ((*(_WORD *)(a1 + 10) & 0x4000) != 0)
    {
      if (v1 != 65531 || *(_QWORD *)(a1 + 32) != 3)
      {
        _dispatch_kevent_print_error(a1);
        return;
      }
      *(_WORD *)(a1 + 10) = 274;
      *(_DWORD *)(a1 + 24) = -2080374784;
      *(_QWORD *)(a1 + 32) = 0;
    }
    else if (v1 == 65528)
    {
      if (*(_DWORD *)(a1 + 48) || *(_DWORD *)(a1 + 24) >> 14 == 16385)
      {
        _dispatch_kevent_mach_msg_drain(a1);
        return;
      }
    }
    else if (v1 == 65529)
    {
      v3 = *(_QWORD *)(a1 + 16);
      v4 = *(_QWORD *)a1;
      *(_BYTE *)(v3 + 6) |= (1 << (*(_QWORD *)a1 % 3u)) | 0x80;
      *(_BYTE *)(v3 + 32 * v4 + 7) = *(_BYTE *)(v3 + 32 * v4 + 7) & 0xFC | 2;
      return;
    }
    v5 = *(_QWORD *)(a1 + 16);
    if ((v5 & 1) != 0)
      _dispatch_kevent_merge_muxed(a1);
    else
      _dispatch_kevent_merge(v5, a1);
  }
}

uint64_t _dispatch_event_loop_leave_immediate_VARIANT_mp(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  int v4;
  unsigned __int16 v5;
  uint64_t v6;
  _QWORD v7[2];
  unsigned int v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  v2 = *(_QWORD *)(v1 + 24);
  *(_BYTE *)(v1 + 45) &= 0xFCu;
  v6 = v2;
  v7[0] = 524271;
  v7[1] = v2;
  v8 = 33;
  v9 = 0uLL;
  v10 = 0;
  v11 = v2 + 56;
  v12 = 0;
  v13 = a1;
  result = _dispatch_kq_poll(v2, (uint64_t)&v6, 1, (uint64_t)&v6, 1, 0, 0, 131075);
  if ((_DWORD)result)
  {
    v4 = DWORD1(v9);
    v5 = WORD1(v7[0]) & 0xBFFF;
    WORD1(v7[0]) &= ~0x4000u;
    LODWORD(v9) = DWORD1(v9);
    *(_QWORD *)((char *)&v9 + 4) = 0;
    if ((_DWORD)v9 != 105)
    {
      if (v4 != 34)
      {
        if (v4 == 2)
          _dispatch_event_loop_leave_immediate_VARIANT_mp_cold_3(&v8, v5);
        _dispatch_sync_ipc_handoff_begin_VARIANT_mp_cold_1(v4);
      }
      _dispatch_event_loop_leave_immediate_VARIANT_mp_cold_4((int *)v7 + 1);
    }
    _dispatch_event_loop_leave_immediate_VARIANT_mp_cold_2(&v13);
  }
  return result;
}

uint64_t _dispatch_kq_poll(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  __objc2_class **v10;
  __objc2_class **v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  unint64_t StatusReg;
  char v16;

  v16 = 0;
  if (_dispatch_kq_poll_pred != -1)
  {
    dispatch_once_f_VARIANT_mp((unint64_t *)&_dispatch_kq_poll_pred, (uint64_t)&v16, (uint64_t (*)(void))_dispatch_kq_init);
    if (v16)
    {
      _dispatch_memorypressure_create(*MEMORY[0x1E0C88950]);
      _voucher_activity_debug_channel_init_VARIANT_mp();
    }
  }
  if (a1)
  {
    v10 = &_dispatch_mgr_q;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      while (1)
      {
        if (a1 == -4)
        {
          v11 = v10;
          a8 |= 0x20u;
          result = kevent_qos();
        }
        else
        {
          v11 = v10;
          if ((a8 & 2) != 0)
            v13 = 1024;
          else
            v13 = 132096;
          a8 |= v13;
          result = kevent_id();
        }
        if ((_DWORD)result != -1)
          return result;
        LODWORD(v14) = **(_DWORD **)(StatusReg + 8);
        if ((int)v14 > 8)
          break;
        v10 = v11;
        if ((_DWORD)v14 != 4)
          goto LABEL_19;
      }
      if ((_DWORD)v14 != 12)
        break;
      _dispatch_temporary_resource_shortage();
      v10 = v11;
    }
    if ((_DWORD)v14 == 9)
    {
      LODWORD(v14) = 9;
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Do not close random Unix descriptors";
      qword_1EDF52D38 = 9;
      __break(1u);
    }
LABEL_25:
    v14 = (int)v14;
    goto LABEL_26;
  }
  LODWORD(v14) = 0;
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Invalid wlh";
  qword_1EDF52D38 = 0;
  __break(1u);
LABEL_19:
  if ((_DWORD)v14 != 2)
    goto LABEL_25;
  if ((~a8 & 0x20002) != 0)
  {
    while (1)
    {
      v14 = 2;
LABEL_26:
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected error from kevent";
      qword_1EDF52D38 = v14;
      __break(1u);
    }
  }
  return 0;
}

uint64_t _dispatch_event_loop_leave_deferred_VARIANT_mp(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 *v7;
  __int16 *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 *v15;
  __int16 *v16;
  int v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;

  if ((~a2 & 0x2800000000) == 0)
  {
    if ((a2 & 0xFFFFFFFC) != 0)
      v2 = a2 & 0xFFFFFFFC | 3;
    else
      v2 = 0;
    v3 = *(_QWORD *)(result + 24);
    v4 = *(_QWORD *)(result + 32);
    v5 = *(unsigned __int16 *)(result + 40);
    if (*(_WORD *)(result + 40))
    {
      v6 = 0;
      v7 = (__int16 *)(v4 + 8);
      v8 = (__int16 *)(v4 + 8);
      while (1)
      {
        v9 = *v8;
        v8 += 36;
        if (v9 == -17 && *((_QWORD *)v7 - 1) == v3 && *((_QWORD *)v7 + 1) == v2)
          break;
        ++v6;
        v7 = v8;
        if (v5 == v6)
        {
          LODWORD(v6) = *(unsigned __int16 *)(result + 40);
          goto LABEL_14;
        }
      }
    }
    else
    {
      LODWORD(v6) = 0;
    }
    if ((_DWORD)v6 == (_DWORD)v5)
LABEL_14:
      *(_WORD *)(result + 40) = v5 + 1;
    v10 = v4 + 72 * v6;
    *(_QWORD *)v10 = v2;
    *(_QWORD *)(v10 + 8) = 655343;
    *(_QWORD *)(v10 + 16) = v3;
    *(_DWORD *)(v10 + 24) = 392;
    *(_QWORD *)(v10 + 44) = 0;
    *(_DWORD *)(v10 + 52) = 0;
    *(_QWORD *)(v10 + 28) = 0;
    *(_QWORD *)(v10 + 36) = 0;
    *(_QWORD *)(v10 + 56) = 0x3800000002;
    *(_QWORD *)(v10 + 64) = a2;
    *(_QWORD *)(v10 + 48) = v3 + 56;
  }
  *(_BYTE *)(result + 45) &= 0xFCu;
  v11 = *(_QWORD *)(result + 24);
  v12 = *(_QWORD *)(result + 32);
  v13 = *(unsigned __int16 *)(result + 40);
  if (*(_WORD *)(result + 40))
  {
    v14 = 0;
    v15 = (__int16 *)(v12 + 8);
    v16 = (__int16 *)(v12 + 8);
    while (1)
    {
      v17 = *v16;
      v16 += 36;
      if (v17 == -17 && *((_QWORD *)v15 - 1) == v11 && *((_QWORD *)v15 + 1) == v11)
        break;
      ++v14;
      v15 = v16;
      if (v13 == v14)
      {
        LODWORD(v14) = *(unsigned __int16 *)(result + 40);
        goto LABEL_25;
      }
    }
  }
  else
  {
    LODWORD(v14) = 0;
  }
  if ((_DWORD)v14 == (_DWORD)v13)
LABEL_25:
    *(_WORD *)(result + 40) = v13 + 1;
  if ((a2 & 1) != 0)
  {
    result = *(unsigned int *)(*(_QWORD *)(v11 + 24) + 84);
    if ((result & 0x8000000) != 0)
      _dispatch_event_loop_leave_deferred_VARIANT_mp_cold_1(result);
    v22 = (result >> 8) & 0xF;
    if (v22 <= (BYTE4(a2) & 7u))
      v22 = BYTE4(a2) & 7;
    if (v22 <= 1)
      LOBYTE(v22) = 1;
    v23 = 256 << (v22 - 1);
    v19 = a2 & 2 | 0x3700000001;
    v18 = result & 0x80000000 | v23 | 0xFF;
    if ((a2 & 2) != 0)
      v21 = 401;
    else
      v21 = 273;
    v20 = 5;
  }
  else
  {
    v18 = 0;
    v19 = 1;
    v20 = 7;
    v21 = 1;
  }
  v24 = v12 + 72 * v14;
  *(_QWORD *)v24 = v11;
  *(_WORD *)(v24 + 8) = -17;
  *(_WORD *)(v24 + 10) = v20;
  *(_DWORD *)(v24 + 12) = v18;
  *(_QWORD *)(v24 + 16) = v11;
  *(_DWORD *)(v24 + 24) = v21;
  *(_QWORD *)(v24 + 36) = 0;
  *(_QWORD *)(v24 + 28) = 0;
  *(_DWORD *)(v24 + 44) = 0;
  *(_QWORD *)(v24 + 48) = v11 + 56;
  *(_QWORD *)(v24 + 56) = v19;
  *(_QWORD *)(v24 + 64) = a2;
  return result;
}

uint64_t _dispatch_event_loop_cancel_waiter_VARIANT_mp(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  char v4;
  int v5;
  char v6;
  unsigned __int16 v7;
  uint64_t v8;
  _QWORD v9[2];
  unsigned int v10;
  __int128 v11;
  _BYTE v12[28];

  v2 = *(_QWORD *)(a1 + 48);
  while (1)
  {
    v8 = *(unsigned int *)(a1 + 100);
    v9[0] = 458735;
    v9[1] = v2;
    v10 = 40;
    v11 = 0u;
    memset(v12, 0, sizeof(v12));
    result = _dispatch_kq_poll(v2, &v8, 1, &v8, 1, 0, 0, 3);
    if (!(_DWORD)result)
      break;
    v4 = *(_BYTE *)(a1 + 106);
    v5 = DWORD1(v11);
    v6 = BYTE2(v9[0]);
    v7 = WORD1(v9[0]) & 0xBFFF;
    WORD1(v9[0]) &= ~0x4000u;
    LODWORD(v11) = DWORD1(v11);
    *(_QWORD *)((char *)&v11 + 4) = 0;
    if ((_DWORD)v11 != 2)
    {
      if (v5 != 34)
      {
        if (v5 == 105)
          _dispatch_event_loop_cancel_waiter_VARIANT_mp_cold_2((uint64_t)&v8);
        _dispatch_sync_ipc_handoff_begin_VARIANT_mp_cold_1(v5);
      }
      _dispatch_event_loop_leave_immediate_VARIANT_mp_cold_4((int *)v9 + 1);
    }
    if ((v4 & 0x20) != 0 || (v6 & 2) == 0 || (v10 & 0x28) != 0x28)
      _dispatch_event_loop_cancel_waiter_VARIANT_mp_cold_3(v10, v7);
    MEMORY[0x18D767268](*(unsigned int *)(a1 + 100), 4, 1);
  }
  return result;
}

uint64_t _dispatch_event_loop_wake_owner_VARIANT_mp(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t StatusReg;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 *v18;
  __int16 *v19;
  int v20;
  int v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 *v32;
  __int16 *v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned __int16 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v5 = result;
  v47 = *MEMORY[0x1E0C874D8];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_QWORD *)(result + 48);
  if (a2 == -4
    || (v8 = *(_QWORD *)(StatusReg + 232)) == 0
    || *(_QWORD *)(v8 + 24) != a2
    || (*(_BYTE *)(v8 + 45) &= 0xFCu, v7 != a2))
  {
    if (((a4 ^ a3) & 1) != 0)
    {
      v38 = a2;
      v39 = 524271;
      v40 = a2;
      v41 = 257;
      v42 = 0uLL;
      v43 = 0;
      v9 = 1;
      v44 = a2 + 56;
      v45 = 1;
      v46 = a4;
      if ((a4 & 0x2000000000) == 0)
        goto LABEL_10;
    }
    else
    {
      v9 = 0;
      if ((a4 & 0x2000000000) == 0)
      {
LABEL_10:
        if ((a3 & 0x2000000002) == 0x2000000000 && (*(char *)(result + 106) & 0x80000000) == 0)
        {
          v11 = *(unsigned int *)(StatusReg + 24);
          v12 = &v38 + 9 * v9;
          *v12 = v11;
          v12[1] = 458735;
          v12[2] = a2;
          *((_DWORD *)v12 + 6) = 40;
          *(_OWORD *)((char *)v12 + 28) = 0u;
          *(_OWORD *)((char *)v12 + 44) = 0u;
          *((_DWORD *)v12 + 15) = 0;
          v12[8] = a3;
          v9 = (v9 + 1);
        }
        result = _dispatch_kq_poll(a2, &v38, v9, &v38, v9, 0, 0, 3);
        v14 = v7 != -4 && v7 != a2;
        if ((_DWORD)result)
        {
          if (v14)
            _dispatch_bug_deprecated("Changing target queue hierarchy with a dispatch_sync in flight");
          v36 = DWORD1(v42);
          v37 = WORD1(v39) & 0xBFFF;
          WORD1(v39) &= ~0x4000u;
          LODWORD(v42) = DWORD1(v42);
          *(_QWORD *)((char *)&v42 + 4) = 0;
          if ((_DWORD)v42 != 105)
          {
            if (v36 != 34)
            {
              if (v36 == 2)
                _dispatch_event_loop_wake_owner_VARIANT_mp_cold_4((uint64_t)&v38, v37);
              _dispatch_sync_ipc_handoff_begin_VARIANT_mp_cold_1(v36);
            }
            _dispatch_event_loop_wake_owner_VARIANT_mp_cold_5((uint64_t)&v38);
          }
          _dispatch_event_loop_cancel_waiter_VARIANT_mp_cold_2((uint64_t)&v38);
        }
        if (v14)
        {
          _dispatch_bug_deprecated("Changing target queue hierarchy with a dispatch_sync in flight");
          return _dispatch_event_loop_cancel_waiter_VARIANT_mp(v5);
        }
        return result;
      }
    }
    v10 = &v38 + 9 * v9;
    *v10 = *(unsigned int *)(result + 100);
    v10[1] = 655343;
    v10[2] = a2;
    *((_DWORD *)v10 + 6) = 136;
    *(_OWORD *)((char *)v10 + 44) = 0u;
    *(_OWORD *)((char *)v10 + 28) = 0u;
    *((_DWORD *)v10 + 15) = 0;
    v10[8] = a4;
    v10[6] = a2 + 56;
    v9 = (v9 + 1);
    goto LABEL_10;
  }
  v15 = *(_QWORD *)(v8 + 32);
  v16 = *(unsigned __int16 *)(v8 + 40);
  if (*(_WORD *)(v8 + 40))
  {
    v17 = 0;
    v18 = (__int16 *)(v15 + 8);
    v19 = (__int16 *)(v15 + 8);
    while (1)
    {
      v20 = *v19;
      v19 += 36;
      if (v20 == -17 && *((_QWORD *)v18 - 1) == a2 && *((_QWORD *)v18 + 1) == a2)
        break;
      ++v17;
      v18 = v19;
      if (v16 == v17)
      {
        LODWORD(v17) = *(unsigned __int16 *)(v8 + 40);
        goto LABEL_32;
      }
    }
  }
  else
  {
    LODWORD(v17) = 0;
  }
  if ((_DWORD)v17 == (_DWORD)v16)
LABEL_32:
    *(_WORD *)(v8 + 40) = v16 + 1;
  if ((a4 & 1) != 0)
  {
    result = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 84);
    if ((result & 0x8000000) != 0)
      _dispatch_event_loop_leave_deferred_VARIANT_mp_cold_1(result);
    v25 = (result >> 8) & 0xF;
    if (v25 <= (BYTE4(a4) & 7u))
      v25 = BYTE4(a4) & 7;
    if (v25 <= 1)
      LOBYTE(v25) = 1;
    v26 = 256 << (v25 - 1);
    v24 = a4 & 2 | 0x3700000001;
    v21 = result & 0x80000000 | v26 | 0xFF;
    if ((a4 & 2) != 0)
      v22 = 401;
    else
      v22 = 273;
    v23 = 5;
  }
  else
  {
    v21 = 0;
    v22 = 257;
    v23 = 7;
    v24 = 1;
  }
  v27 = v15 + 72 * v17;
  *(_QWORD *)v27 = a2;
  *(_WORD *)(v27 + 8) = -17;
  *(_WORD *)(v27 + 10) = v23;
  *(_DWORD *)(v27 + 12) = v21;
  *(_QWORD *)(v27 + 16) = a2;
  *(_DWORD *)(v27 + 24) = v22;
  *(_QWORD *)(v27 + 36) = 0;
  *(_QWORD *)(v27 + 28) = 0;
  *(_DWORD *)(v27 + 44) = 0;
  *(_QWORD *)(v27 + 48) = a2 + 56;
  *(_QWORD *)(v27 + 56) = v24;
  *(_QWORD *)(v27 + 64) = a4;
  v28 = *(unsigned int *)(v5 + 100);
  v29 = *(_QWORD *)(v8 + 32);
  v30 = *(unsigned __int16 *)(v8 + 40);
  if (*(_WORD *)(v8 + 40))
  {
    v31 = 0;
    v32 = (__int16 *)(v29 + 8);
    v33 = (__int16 *)(v29 + 8);
    while (1)
    {
      v34 = *v33;
      v33 += 36;
      if (v34 == -17 && *((_QWORD *)v32 - 1) == a2 && *((_QWORD *)v32 + 1) == v28)
        break;
      ++v31;
      v32 = v33;
      if (v30 == v31)
      {
        LODWORD(v31) = *(unsigned __int16 *)(v8 + 40);
        goto LABEL_53;
      }
    }
  }
  else
  {
    LODWORD(v31) = 0;
  }
  if ((_DWORD)v31 == (_DWORD)v30)
LABEL_53:
    *(_WORD *)(v8 + 40) = v30 + 1;
  v35 = v29 + 72 * v31;
  *(_QWORD *)v35 = v28;
  *(_QWORD *)(v35 + 8) = 655343;
  *(_QWORD *)(v35 + 16) = a2;
  *(_DWORD *)(v35 + 24) = 136;
  *(_OWORD *)(v35 + 44) = 0u;
  *(_OWORD *)(v35 + 28) = 0u;
  *(_DWORD *)(v35 + 60) = 0;
  *(_QWORD *)(v35 + 64) = a4;
  *(_QWORD *)(v35 + 48) = a2 + 56;
  return result;
}

void _dispatch_event_loop_wait_for_ownership_VARIANT_mp(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t StatusReg;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  char v19;
  unsigned int *v20;
  unsigned int *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C874D8];
  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(v2 + 56);
  if ((v3 & 0xFFFFFFFD) == 1)
  {
    v4 = *(_DWORD *)(*(_QWORD *)(v2 + 24) + 84);
    if ((v4 & 0x8000000) != 0)
      _dispatch_event_loop_leave_deferred_VARIANT_mp_cold_1(v4);
    v5 = (v4 >> 8) & 0xF;
    if (v5 <= (BYTE4(v3) & 7u))
      v5 = BYTE4(v3) & 7;
    v23 = v2;
    if (v5 <= 1)
      LOBYTE(v5) = 1;
    LODWORD(v24) = 393199;
    HIDWORD(v24) = v4 & 0x80000000 | (256 << (v5 - 1)) | 0xFF;
    v25 = v2;
    if ((v3 & 2) != 0)
      v6 = 401;
    else
      v6 = 273;
    v26 = v6;
    v28 = 0;
    v27 = 0;
    v29 = 0;
    v30 = v2 + 56;
    v31 = v3 & 2 | 0x3700000001;
    v32 = v3;
    v7 = 1;
  }
  else if ((~v3 & 0x2800000000) != 0)
  {
    v7 = 0;
  }
  else
  {
    v8 = v3 & 0xFFFFFFFC | 3;
    if ((v3 & 0xFFFFFFFC) == 0)
      v8 = 0;
    v23 = v8;
    v24 = 655343;
    v25 = v2;
    v26 = 392;
    v28 = 0;
    v27 = 0;
    v29 = 0;
    v31 = 0x3800000002;
    v32 = v3;
    v7 = 1;
    v30 = v2 + 56;
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    v10 = v7 + 1;
    v11 = *(_QWORD *)(StatusReg + 32);
    v12 = &v23 + 9 * v7;
    if ((v11 & 0x3FFF00) == 0)
      LODWORD(v11) = 2303;
    *v12 = *(unsigned int *)(a1 + 100);
    *((_DWORD *)v12 + 2) = 655343;
    *((_DWORD *)v12 + 3) = v11;
    v12[2] = v2;
    *((_DWORD *)v12 + 6) = 4;
    *(_OWORD *)((char *)v12 + 28) = 0u;
    *(_OWORD *)((char *)v12 + 44) = 0u;
    *((_DWORD *)v12 + 15) = 0;
    v12[8] = v3;
    v13 = _dispatch_kq_poll(v2, (uint64_t)&v23, v10, (uint64_t)&v23, v10, 0, 0, 3);
    if (v13 >= 1)
    {
      v14 = 0;
      v15 = (uint64_t *)((char *)&v27 + 4);
      do
      {
        v16 = *((unsigned int *)v15 - 2);
        v17 = *v15;
        v18 = *((_WORD *)v15 - 11) & 0xBFFF;
        *((_WORD *)v15 - 11) = v18;
        *((_DWORD *)v15 - 1) = v17;
        *v15 = 0;
        if ((_DWORD)v17 != 4)
        {
          switch((_DWORD)v17)
          {
            case 2:
              _dispatch_event_loop_cancel_waiter_VARIANT_mp_cold_3(v16, v18);
            case 0x22:
              _dispatch_event_loop_wait_for_ownership_VARIANT_mp_cold_5((uint64_t)&v23, v14);
            case 0x69:
              _dispatch_event_loop_wait_for_ownership_VARIANT_mp_cold_4((uint64_t)&v23, v14);
          }
LABEL_39:
          _dispatch_sync_ipc_handoff_begin_VARIANT_mp_cold_1(v17);
        }
        if ((v16 & 4) == 0)
          goto LABEL_39;
        v15 += 9;
        ++v14;
      }
      while (v13 != v14);
    }
    if (!v13)
      break;
    v7 = 0;
    v3 = v32;
  }
  v19 = *(_BYTE *)(a1 + 106);
  if ((v19 & 0x20) != 0)
  {
    _dispatch_event_loop_cancel_waiter_VARIANT_mp(a1);
    v19 = *(_BYTE *)(a1 + 106) & 0xDF;
    *(_BYTE *)(a1 + 106) = v19;
  }
  if ((v19 & 0x40) != 0)
  {
    v20 = *(unsigned int **)(a1 + 48);
    v21 = v20 + 24;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 - 1, v21));
    if (v22 <= 0)
    {
      if (v22 < 0)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      *((_QWORD *)v20 + 7) = 0xDEAD000000000000;
      _dispatch_object_dealloc_VARIANT_mp(v20);
    }
  }
}

uint64_t _dispatch_event_loop_ensure_ownership_VARIANT_mp(uint64_t a1)
{
  uint64_t result;
  int v2;
  unsigned __int16 v3;
  uint64_t v4;
  _QWORD v5[2];
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  int v9;
  uint64_t v10;

  v4 = *(unsigned int *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  v5[0] = 655343;
  v5[1] = a1;
  v6 = 136;
  v8 = 0u;
  v7 = 0u;
  v9 = 0;
  v10 = v4;
  *(_QWORD *)((char *)&v8 + 4) = a1 + 56;
  result = _dispatch_kq_poll(a1, &v4, 1, &v4, 1, 0, 0, 3);
  if ((_DWORD)result)
  {
    v2 = DWORD1(v7);
    v3 = WORD1(v5[0]) & 0xBFFF;
    WORD1(v5[0]) &= ~0x4000u;
    LODWORD(v7) = DWORD1(v7);
    *(_QWORD *)((char *)&v7 + 4) = 0;
    if ((_DWORD)v7 != 105)
    {
      if (v2 != 34)
      {
        if (v2 == 2)
          _dispatch_event_loop_leave_immediate_VARIANT_mp_cold_3(&v6, v3);
        _dispatch_sync_ipc_handoff_begin_VARIANT_mp_cold_1(v2);
      }
      _dispatch_event_loop_leave_immediate_VARIANT_mp_cold_4((int *)v5 + 1);
    }
    _dispatch_event_loop_leave_immediate_VARIANT_mp_cold_2(&v10);
  }
  return result;
}

uint64_t _dispatch_event_loop_end_ownership_VARIANT_mp(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v5;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  uint64_t *v14;
  uint64_t result;
  const char *v16;
  int v17;
  unsigned int *v18;
  unsigned int v19;
  signed int v20;
  int v21;
  unsigned __int16 v22;
  uint64_t v23;
  __int16 v24;
  __int16 v25;
  int v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v5 = a3;
  v34 = *MEMORY[0x1E0C874D8];
  if ((a3 & 1) != 0)
  {
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 84);
    if ((v8 & 0x8000000) != 0)
      _dispatch_event_loop_leave_deferred_VARIANT_mp_cold_1(v8);
    v9 = (v8 >> 8) & 0xF;
    if (v9 <= (BYTE4(a3) & 7u))
      v9 = BYTE4(a3) & 7;
    if (v9 <= 1)
      LOBYTE(v9) = 1;
    v10 = 256 << (v9 - 1);
    v11 = a3 & 2 | 0x3700000001;
    LODWORD(a3) = v8 & 0x80000000 | v10 | 0xFF;
    if ((v5 & 2) != 0)
      v12 = 401;
    else
      v12 = 273;
    v13 = 5;
  }
  else
  {
    a3 = 0;
    if ((a2 & 1) == 0)
      goto LABEL_14;
    v12 = 257;
    v13 = 7;
    v11 = 1;
  }
  v23 = a1;
  v24 = -17;
  v25 = v13;
  v26 = a3;
  v27 = a1;
  v28 = v12;
  v29 = 0uLL;
  v30 = 0;
  v31 = a1 + 56;
  v32 = v11;
  a3 = 1;
  v33 = v5;
LABEL_14:
  if ((a2 & 2) == 0)
  {
    v14 = &v23 + 9 * a3;
    *v14 = *(unsigned int *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    v14[1] = 458735;
    a3 = (a3 + 1);
    v14[2] = a1;
    *((_DWORD *)v14 + 6) = 40;
    *(_OWORD *)((char *)v14 + 28) = 0u;
    *(_OWORD *)((char *)v14 + 44) = 0u;
    *((_DWORD *)v14 + 15) = 0;
    v14[8] = v5;
  }
  result = _dispatch_kq_poll(a1, &v23, a3, &v23, a3, 0, 0, 3);
  if ((_DWORD)result)
  {
    v21 = DWORD1(v29);
    v22 = v25 & 0xBFFF;
    v25 &= ~0x4000u;
    LODWORD(v29) = DWORD1(v29);
    *(_QWORD *)((char *)&v29 + 4) = 0;
    if ((_DWORD)v29 != 105)
    {
      if (v21 != 34)
      {
        if (v21 == 2)
          _dispatch_event_loop_wake_owner_VARIANT_mp_cold_4((uint64_t)&v23, v22);
        _dispatch_sync_ipc_handoff_begin_VARIANT_mp_cold_1(v21);
      }
      _dispatch_event_loop_wake_owner_VARIANT_mp_cold_5((uint64_t)&v23);
    }
    _dispatch_event_loop_cancel_waiter_VARIANT_mp_cold_2((uint64_t)&v23);
  }
  v17 = (a2 & 1 | (2 * (a4 & 1))) - (v5 & 1);
  if (v17 >= 1 && *(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    v18 = (unsigned int *)(a1 + 8);
    do
    {
      v19 = __ldxr(v18);
      v20 = v19 - v17;
    }
    while (__stlxr(v20, v18));
    if (v20 <= 0)
    {
      if (v20 < 0)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      return _os_object_dispose((void *)a1, v16);
    }
  }
  return result;
}

void _dispatch_event_loop_timer_arm_VARIANT_mp(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v9 = a2 / 3uLL;
  v10 = *(_QWORD *)(a5 + 8 * v9);
  if (!v10)
  {
    mach_get_times();
    *(_QWORD *)(a5 + 16) = 0;
    v10 = *(_QWORD *)(a5 + 8 * v9);
  }
  v11 = v10 + a3;
  if (_dispatch_timers_force_max_leeway)
    v12 = 0;
  else
    v12 = a4;
  if (_dispatch_timers_force_max_leeway)
    v13 = v11 + a4;
  else
    v13 = v11;
  _dispatch_event_loop_timer_program(a1, a2, v13, v12, 5);
  if (a2 - 6 <= 2 && _dispatch_mach_calendar_pred != -1)
    dispatch_once_f_VARIANT_mp((unint64_t *)&_dispatch_mach_calendar_pred, 0, (uint64_t (*)(void))_dispatch_mach_host_notify_update);
}

double _dispatch_event_loop_timer_program(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  uint64_t v6;
  int v7;
  double result;
  unint64_t v9;
  __int16 v10;
  __int16 v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 216);
  if (v6 == -4)
  {
    v7 = 0x2000000;
  }
  else if (*(_BYTE *)(a1 + 32 * a2 + 5))
  {
    v7 = (256 << (*(_BYTE *)(a1 + 32 * a2 + 5) - 1)) | 0xFF;
  }
  else
  {
    v7 = 255;
  }
  v9 = a2 | 0xFFFFFFFFFFFFFF00;
  v10 = -7;
  v11 = a5 | 0x10;
  v12 = v7;
  v13 = a1;
  v14 = _dispatch_timer_index_to_fflags[a2];
  v15 = 0;
  v16 = a3;
  v17 = 0;
  v19 = 0u;
  v18 = a4;
  *(_QWORD *)&result = _dispatch_kq_deferred_update(v6, (uint64_t)&v9).n128_u64[0];
  return result;
}

double _dispatch_event_loop_timer_delete_VARIANT_mp(uint64_t a1, unsigned int a2)
{
  return _dispatch_event_loop_timer_program(a1, a2, 0, 0, 2);
}

char *_dispatch_source_proc_create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  char *result;

  v3 = a3;
  result = _dispatch_unote_create_with_handle_VARIANT_mp(a1, a2, a3);
  if ((v3 & 0x4000000) != 0)
  {
    if (result)
      result[29] |= 4u;
  }
  return result;
}

char *_dispatch_source_vm_create(uint64_t a1, uint64_t a2)
{
  char *result;

  result = _dispatch_unote_create_without_handle_VARIANT_mp((uint64_t)&_dispatch_source_type_memorypressure_VARIANT_mp, a2, 2);
  if (result)
    result[29] |= 0x10u;
  return result;
}

BOOL _dispatch_mach_msg_sender_is_kernel_VARIANT_mp(uint64_t a1)
{
  _DWORD *v1;

  v1 = (_DWORD *)(a1 + ((*(unsigned int *)(a1 + 4) + 3) & 0x1FFFFFFFCLL));
  if (*v1 || v1[1] <= 0x33u)
    _dispatch_mach_msg_sender_is_kernel_VARIANT_mp_cold_1();
  return v1[10] == 0;
}

uint64_t _dispatch_get_mach_host_port_VARIANT_mp()
{
  if (_dispatch_mach_host_port_pred != -1)
    dispatch_once_f_VARIANT_mp((unint64_t *)&_dispatch_mach_host_port_pred, 0, (uint64_t (*)(void))_dispatch_mach_host_port_init);
  return _dispatch_mach_host_port;
}

void _dispatch_mach_host_port_init()
{
  mach_port_t v0;
  kern_return_t special_port;
  int v2;
  kern_return_t v3;
  mach_port_t port;

  port = 0;
  v0 = MEMORY[0x18D766C14]();
  special_port = host_get_special_port(v0, -1, 1, &port);
  if (special_port == -301)
    _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
  v2 = special_port;
  if (special_port)
  {
    if (special_port != 4)
      _dispatch_bug(2859, special_port);
  }
  else
  {
    v3 = mach_port_deallocate(*MEMORY[0x1E0C883F0], v0);
    if (v3 == -301)
      _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
    v2 = v3;
    v0 = port;
  }
  if (!v0)
    _dispatch_mach_host_port_init_cold_1(v2);
  _dispatch_mach_host_port = v0;
}

uint64_t _dispatch_mach_notify_port_deleted_VARIANT_mp(uint64_t a1, uint64_t a2)
{
  _dispatch_mach_notify_merge(a2, 4, 1);
  return 0;
}

uint64_t _dispatch_mach_notify_merge(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v3 = _dispatch_sources[((unint64_t)result >> 8) & 0x3F];
  if (v3)
  {
    while (*(_QWORD *)(v3 + 24) != result || *(__int16 *)(v3 + 32) != -24)
    {
      v3 = *(_QWORD *)v3;
      if (!v3)
        return result;
    }
    *(_QWORD *)(v3 + 56) &= 0xFFFFFFFFFFFFFFF2;
    if ((a3 & 1) != 0 || (result = _dispatch_kevent_mach_notify_resume(v3, a2, 0), (result & 1) == 0))
    {
      *(_WORD *)(v3 + 34) |= 2u;
      v6 = 16;
    }
    else
    {
      v6 = 4;
    }
    *(_QWORD *)(v3 + 64) = 0;
    v7 = *(uint64_t **)(v3 + 16);
    if (v7)
    {
      do
      {
        v8 = (uint64_t *)*v7;
        if (*(_QWORD *)(v3 + 64))
          break;
        v9 = (_DWORD)v7[7] & a2;
        *((_BYTE *)v7 + 54) = 0;
        if ((a3 & 1) != 0 || (_DWORD)v9)
        {
          if (*(_DWORD *)(7 - v7[4]) != 0x7FFFFFFF)
          {
            v10 = (unsigned int *)(7 - v7[4]);
            do
              v11 = __ldxr(v10);
            while (__stxr(v11 + 2, v10));
            if (v11 <= 0)
            {
              qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
              __break(1u);
              return result;
            }
          }
          if (a3)
            _dispatch_unote_unregister_muxed_VARIANT_mp(v7 + 3);
          v12 = v7[3];
          if ((_DWORD)v9 && *(_BYTE *)(v12 + 9) == 2)
          {
            v13 = (unint64_t *)(v7 + 12);
            do
              v14 = __ldxr(v13);
            while (__stxr(v14 | v9, v13));
          }
          result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, _QWORD))(v12 + 48))(v7 + 3, v6, v9, 0);
        }
        v7 = v8;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t _dispatch_mach_notify_dead_name_VARIANT_mp(uint64_t a1, uint64_t a2)
{
  mach_port_name_t v2;

  v2 = a2;
  _dispatch_mach_notify_merge(a2, 1, 1);
  if (mach_port_deallocate(*MEMORY[0x1E0C883F0], v2) == -301)
    _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
  return 0;
}

uint64_t _dispatch_mach_notify_send_possible_VARIANT_mp(uint64_t a1, uint64_t a2)
{
  _dispatch_mach_notify_merge(a2, 8, 0);
  return 0;
}

uint64_t _dispatch_mach_notification_set_armed_VARIANT_mp(uint64_t result)
{
  uint64_t v1;
  uint64_t *i;

  v1 = *(_QWORD *)(result - 8);
  if (v1)
  {
    *(_QWORD *)(v1 + 64) = 1;
    for (i = *(uint64_t **)(v1 + 16); i; i = (uint64_t *)*i)
      *((_BYTE *)i + 54) = 1;
  }
  return result;
}

char *_dispatch_source_mach_send_create(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 <= 1)
    a3 = 1;
  if (!a2)
    a2 = 0xFFFFFFFFLL;
  return _dispatch_unote_create_with_handle_VARIANT_mp(a1, a2, a3);
}

uint64_t _dispatch_mach_send_update(uint64_t a1)
{
  int v1;
  int v2;

  v1 = *(_DWORD *)(a1 + 48);
  if ((*(_WORD *)(a1 + 34) & 2) != 0)
  {
    v2 = 0;
  }
  else
  {
    v2 = *(_DWORD *)(a1 + 48);
    v1 = 0;
  }
  return _dispatch_kevent_mach_notify_resume(a1, v2, v1);
}

char *_dispatch_mach_send_create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *result;

  result = _dispatch_unote_create_without_handle_VARIANT_mp(a1, a2, a3);
  if (result)
  {
    *((_DWORD *)result + 22) = 0x80000000;
    *((_QWORD *)result + 7) = 0;
  }
  return result;
}

void _dispatch_mach_notification_event(uint64_t a1)
{
  uint64_t v1;

  v1 = *(unsigned int *)(a1 + 24);
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected non message event";
  qword_1EDF52D38 = v1;
  __break(1u);
}

void _dispatch_mach_notification_merge_msg(uint64_t a1, int a2, mach_msg_header_t *a3)
{
  int v6;
  uint64_t v8;
  _OWORD v9[2];
  int v10;

  v10 = 0;
  memset(v9, 0, sizeof(v9));
  if (a3->msgh_id > 77 || _dispatch_mach_msg_sender_is_kernel_VARIANT_mp((uint64_t)a3))
  {
    v6 = libdispatch_internal_protocol_server(a3, (uint64_t)v9);
    if (v6 || v10 != -303)
    {
      if (v6)
      {
        if (v10 == -305 || v10 == 0)
          goto LABEL_13;
        _dispatch_bug(2806, v10);
        if (v10 == -305 || !v10)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((a3->msgh_id & 0xFFFFFFFE) == 0x3B6)
    {
      byte_1ECCEA61F |= 2u;
      byte_1ECCEA63F |= 2u;
      byte_1ECCEA65F |= 2u;
      byte_1ECCEA55E |= 0x87u;
      _dispatch_mach_host_notify_update();
      v10 = 0;
      goto LABEL_13;
    }
    v8 = 2805;
  }
  else
  {
    v8 = 2790;
  }
  _dispatch_bug(v8, 0);
LABEL_18:
  mach_msg_destroy(a3);
LABEL_13:
  if ((a2 & 0x10000) != 0)
    free(a3);
  _dispatch_unote_resume_VARIANT_mp(a1);
}

uint64_t _dispatch_mach_recv_direct_merge_evt(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4)
{
  if (((unsigned __int16)a2 & 0x200) != 0)
    _dispatch_mach_recv_direct_merge_evt_cold_1();
  return _dispatch_source_merge_evt_VARIANT_mp(a1, a2, a3, a4);
}

void _dispatch_mach_reply_merge_evt(uint64_t a1, uint64_t a2, int a3)
{
  if ((a2 & 0x200) == 0)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected event";
    qword_1EDF52D38 = a3 | (unint64_t)(a2 << 32);
    __break(1u);
  }
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected EV_VANISHED (do not destroy random mach ports)";
  __break(1u);
}

uint64_t _dispatch_kevent_workloop_override_self(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  signed int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *(_QWORD *)(result + 24);
  *(_BYTE *)(result + 45) &= ~2u;
  v4 = (unsigned int *)*(unsigned int *)(*(_QWORD *)(v3 + 24) + 84);
  if ((v4 & 0x8000000) != 0)
    goto LABEL_17;
  v6 = (v4 >> 8) & 0xF;
  if (v6 <= (BYTE4(a2) & 7u))
    v6 = BYTE4(a2) & 7;
  v13 = v3;
  if (v6 <= 1)
    LOBYTE(v6) = 1;
  v14 = 393199;
  v15 = v4 & 0x80000000 | (256 << (v6 - 1)) | 0xFF;
  v16 = v3;
  if ((a2 & 2) != 0)
    v7 = 401;
  else
    v7 = 273;
  v17 = v7;
  v18 = 0uLL;
  v19 = 0;
  v20 = v3 + 56;
  v21 = a2 & 2 | 0x3700000001;
  v22 = a2;
  result = _dispatch_kq_poll(v3, &v13, 1, &v13, 1, 0, 0, 3);
  if ((_DWORD)result)
  {
LABEL_18:
    v11 = DWORD1(v18);
    v12 = HIWORD(v14) & 0xBFFF;
    HIWORD(v14) &= ~0x4000u;
    LODWORD(v18) = DWORD1(v18);
    *(_QWORD *)((char *)&v18 + 4) = 0;
    if ((_DWORD)v18 != 105)
    {
      if (v11 == 34)
      {
LABEL_23:
        v11 = v15;
        qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Broken priority";
        qword_1EDF52D38 = v15;
        __break(1u);
        goto LABEL_24;
      }
      if (v11 != 2)
      {
LABEL_24:
        qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
        qword_1EDF52D38 = v11;
        __break(1u);
        return result;
      }
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
      qword_1EDF52D38 = ((unint64_t)v17 << 32) | (v12 << 16) | 2;
      __break(1u);
    }
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid workloop owner, possible memory corruption";
    qword_1EDF52D38 = v22;
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) != 0 && *(_DWORD *)(v3 + 8) != 0x7FFFFFFF)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v8 = __ldxr(v4);
      v9 = __OFSUB__(v8, 2);
      v10 = v8 - 2;
    }
    while (__stlxr(v10, v4));
    if ((v10 < 0) ^ v9 | (v10 == 0))
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
LABEL_17:
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Waking up a kq with cooperative thread request is not supported";
      qword_1EDF52D38 = (uint64_t)v4;
      __break(1u);
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t _dispatch_kevent_workloop_poke_drain(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  unint64_t v16;
  int v17;
  uint64_t v18;

  v1 = *(unsigned int *)(result + 24);
  if ((v1 & 0x80000000) != 0)
    return result;
  v2 = result;
  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  result = *(_QWORD *)(result + 16);
  v4 = *(unsigned __int16 *)(v2 + 10);
  if ((v4 & 0x4000) == 0)
  {
    if ((*(_BYTE *)(v3 + 45) & 1) != 0)
      return result;
    *(_BYTE *)(v3 + 45) |= 1u;
    if (*(_DWORD *)(result + 8) == 0x7FFFFFFF)
      goto LABEL_8;
    v5 = result + 8;
    do
    {
      v6 = __ldxr((unsigned int *)v5);
      v1 = (v6 + 1);
      LODWORD(v7) = __stxr(v1, (unsigned int *)v5);
    }
    while ((_DWORD)v7);
    if (v6 > 0)
      goto LABEL_8;
    goto LABEL_36;
  }
  v7 = *(_QWORD *)(v2 + 32);
  *(_DWORD *)(v2 + 28) = v7;
  v5 = *(_QWORD *)(v2 + 64);
  v4 &= ~0x4000uLL;
  *(_WORD *)(v2 + 10) = v4;
  *(_QWORD *)(v2 + 32) = 0;
  if ((_DWORD)v7 != 70)
  {
LABEL_37:
    switch((_DWORD)v7)
    {
      case 0x69:
LABEL_42:
        qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid workloop owner, possible memory corruption";
        qword_1EDF52D38 = v5;
        __break(1u);
        goto LABEL_43;
      case 0x22:
LABEL_43:
        v18 = *(int *)(v2 + 12);
        qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Broken priority";
        qword_1EDF52D38 = v18;
        __break(1u);
        goto LABEL_44;
      case 2:
        qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
        qword_1EDF52D38 = (v4 << 16) | (v1 << 32) | 2;
        __break(1u);
        break;
    }
LABEL_41:
    v5 = (int)v7;
    qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
    qword_1EDF52D38 = (int)v7;
    __break(1u);
    goto LABEL_42;
  }
  if ((v1 & 0x100) != 0 || !*(_QWORD *)(v2 + 48) || !*(_QWORD *)(v2 + 56))
    goto LABEL_41;
  if ((v5 & 0x2000000000) == 0)
    return result;
  if ((v5 & 1) == 0)
  {
    v10 = 0;
    v11 = 1;
    v12 = 7;
    v13 = 1;
    goto LABEL_30;
  }
  if ((v5 & 0xFFFFFFFC) != 0)
  {
    v3 = *(unsigned int *)(*(_QWORD *)(result + 24) + 84);
    if ((v3 & 0x8000000) != 0)
    {
LABEL_44:
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Waking up a kq with cooperative thread request is not supported";
      qword_1EDF52D38 = v3;
      __break(1u);
      return result;
    }
    v14 = (v3 >> 8) & 0xF;
    if (v14 <= (BYTE4(v5) & 7u))
      v14 = BYTE4(v5) & 7;
    if (v14 <= 1)
      LOBYTE(v14) = 1;
    v16 = v5 & 2;
    v15 = v16 == 0;
    v11 = v16 | 0x3700000001;
    v10 = v3 & 0x80000000 | (256 << (v14 - 1)) | 0xFF;
    if (v15)
      v13 = 273;
    else
      v13 = 401;
    v12 = 5;
LABEL_30:
    *(_QWORD *)v2 = result;
    *(_WORD *)(v2 + 8) = -17;
    *(_WORD *)(v2 + 10) = v12;
    *(_DWORD *)(v2 + 12) = v10;
    *(_DWORD *)(v2 + 24) = v13;
    *(_QWORD *)(v2 + 28) = 0;
    *(_QWORD *)(v2 + 36) = 0;
    *(_DWORD *)(v2 + 44) = 0;
    *(_QWORD *)(v2 + 48) = result + 56;
    *(_QWORD *)(v2 + 56) = v11;
    return _dispatch_kq_deferred_update();
  }
  *(_BYTE *)(v3 + 45) |= 1u;
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    v5 = result + 8;
    do
    {
      v17 = __ldxr((unsigned int *)v5);
      v1 = (v17 + 1);
      LODWORD(v7) = __stxr(v1, (unsigned int *)v5);
    }
    while ((_DWORD)v7);
    if (v17 <= 0)
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
LABEL_36:
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
      goto LABEL_37;
    }
  }
LABEL_8:
  *(_QWORD *)v3 = *(_QWORD *)(result + 24);
  *(_QWORD *)(v3 + 8) = result;
  v8 = __clz(__rbit32((*(_DWORD *)(v2 + 12) >> 8) & 0x3FFF));
  if (((*(_DWORD *)(v2 + 12) >> 8) & 0x3FFF) != 0)
    v9 = v8 + 1;
  else
    v9 = 0;
  *(_DWORD *)(v3 + 16) = v9;
  return result;
}

void _dispatch_kevent_print_error(uint64_t a1)
{
  __int16 v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;

  v2 = *(_WORD *)(a1 + 10);
  if ((v2 & 2) != 0)
  {
    if ((*(_WORD *)(a1 + 10) & 0x100) != 0 && *(_QWORD *)(a1 + 32) == 36)
      return;
    v3 = 0;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 16);
    if ((v3 & 1) != 0)
    {
      v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
      v3 = 0;
      v2 |= *(_WORD *)(v4 + 34);
      goto LABEL_10;
    }
    if (v3 && !*(_QWORD *)(v3 + 16))
    {
      v2 |= 1u;
LABEL_10:
      *(_WORD *)(a1 + 10) = v2;
    }
  }
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    if (v5 == 34)
    {
      v11 = *(int *)(a1 + 12);
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Invalid kevent priority";
      qword_1EDF52D38 = v11;
      __break(1u);
    }
    else
    {
      v6 = _evfiltstr(*(__int16 *)(a1 + 8));
      v7 = *(_QWORD *)(a1 + 16);
      v8 = "enable";
      if ((v2 & 4) == 0)
        v8 = "monitor";
      if ((v2 & 1) != 0)
        v9 = "add";
      else
        v9 = v8;
      if ((v2 & 2) != 0)
        v9 = "delete";
      if (v7)
        v10 = v9;
      else
        v10 = 0;
      _dispatch_bug_kevent_client("kevent", v6, v10, v5, *(_QWORD *)a1, v7, v3);
    }
  }
}

void _dispatch_kevent_mach_msg_drain(uint64_t a1)
{
  _DWORD *v1;
  _DWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  mach_error_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  mach_error_t v14;
  uint64_t v15;
  _BYTE v16[32];
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  int v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C874D8];
  v4 = *(_QWORD *)(a1 + 48);
  v5 = v4;
  v6 = *(_QWORD **)(a1 + 16);
  v7 = *(unsigned int *)(a1 + 60);
  v8 = *(int *)(a1 + 12);
  v9 = *(unsigned __int16 *)(a1 + 10);
  v10 = *(_DWORD *)(a1 + 24);
  if (v10 != 268451844)
  {
    if (v10 == 268451848)
    {
      v17 = *(int *)(a1 + 12);
      v18 = v6;
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unable to copyout msg, possible port leak";
      qword_1EDF52D38 = 268451848;
      __break(1u);
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 40);
      if (v11)
      {
        if (!v10)
        {
          if (*(_DWORD *)(a1 + 64))
            v12 = v4 + v11;
          else
            v12 = 0;
          _dispatch_kevent_mach_msg_recv(*(_QWORD **)(a1 + 16), v9, v11, v12, v7, v8);
          return;
        }
        goto LABEL_26;
      }
    }
    v17 = v8;
    v18 = v6;
    qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: EVFILT_MACHPORT with no message";
    qword_1EDF52D38 = v10;
    __break(1u);
    goto LABEL_20;
  }
  if (!(_DWORD)v4)
  {
LABEL_20:
    v5 = 268451844;
    v17 = v8;
    v18 = v6;
    qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: EVFILT_MACHPORT with no message size";
    qword_1EDF52D38 = 268451844;
    __break(1u);
LABEL_21:
    v17 = v8;
    v18 = v6;
    qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: EVFILT_MACHPORT with overlarge message";
    qword_1EDF52D38 = v5;
    __break(1u);
    goto LABEL_22;
  }
  if (!*(_QWORD *)(a1 + 32))
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: MACH_RCV_LARGE_IDENTITY with no identity";
    __break(1u);
    return;
  }
  if (v4 >= 0xFFFFFFBC)
    goto LABEL_21;
  v13 = v4 + 68;
  v1 = malloc_type_malloc((v4 + 68), 0xE77C1C11uLL);
  v2 = v16;
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  if (!MEMORY[0x1E0C86820]())
  {
LABEL_22:
    _dispatch_bug(3256, (uint64_t)v1);
    v13 = 0;
  }
  v22 = v1;
  v23 = 0;
  v24 = 0;
  v25 = v13;
  v26 = v2;
  v27 = 0;
  v28 = 0x2800000000;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v14 = mach_msg2();
  if (!v14)
  {
    if (*v2)
      v15 = (uint64_t)v2;
    else
      v15 = 0;
    _dispatch_kevent_mach_msg_recv(v6, v9 | 0x10000, (uint64_t)v1, v15, v7, v8);
    return;
  }
  v10 = v14;
  if (v14 == 268451844)
  {
    _dispatch_log("BUG in libdispatch client: _dispatch_kevent_mach_msg_drain: dropped message too large to fit in memory: id = 0x%x, size = %u", v1[5], *(_QWORD *)(a1 + 48));
    v10 = 0;
  }
  free(v1);
LABEL_26:
  if (v10)
    _dispatch_bug_mach_client("_dispatch_kevent_mach_msg_drain: message reception failed", v10);
}

_QWORD *_dispatch_kevent_merge_muxed(uint64_t a1)
{
  unint64_t v2;
  _QWORD *result;
  _QWORD *v4;

  v2 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_WORD *)(a1 + 10) & 0x12) != 0)
    *(_WORD *)(v2 + 34) |= 2u;
  result = *(_QWORD **)(v2 + 16);
  if (result)
  {
    do
    {
      v4 = (_QWORD *)*result;
      _dispatch_kevent_merge((uint64_t)(result + 3), a1);
      result = v4;
    }
    while (v4);
  }
  return result;
}

uint64_t _dispatch_kevent_merge(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unsigned int *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t *v13;
  unint64_t v14;
  __int16 v15;
  unint64_t v16;

  v5 = *(unsigned __int8 *)(*(_QWORD *)a1 + 9);
  if (*(_DWORD *)(7 - *(_QWORD *)(a1 + 8)) != 0x7FFFFFFF)
  {
    v6 = (unsigned int *)(7 - *(_QWORD *)(a1 + 8));
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if (v7 <= 0)
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
LABEL_36:
      _dispatch_unote_unregister_VARIANT_mp(a1, 5);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, *(unsigned __int16 *)(a2 + 10), v2, *(_DWORD *)(a2 + 12) & 0xFFFFFF);
    }
  }
  switch((int)v5)
  {
    case 0:
      v2 = *(_QWORD *)(a2 + 32);
      break;
    case 1:
      if (*(unsigned __int8 *)(a1 + 28) == 248)
        v2 = 2;
      else
        v2 = *(unsigned int *)(a2 + 24);
      break;
    case 2:
      v2 = (*(_DWORD *)(a1 + 32) & *(_DWORD *)(a2 + 24));
      if ((*(_BYTE *)(a1 + 29) & 4) != 0)
      {
        v10 = (unint64_t *)(a1 + 72);
        v11 = (*(_QWORD *)(a2 + 32) << 32) | v2;
        do
          v12 = __ldxr(v10);
        while (__stxr(v12 | (unint64_t)v11, v10));
      }
      else if (*(unsigned __int8 *)(a1 + 28) == 248)
      {
        v2 = 2;
        *(_QWORD *)(a1 + 72) = 2;
      }
      else if ((_DWORD)v2)
      {
        v13 = (unint64_t *)(a1 + 72);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 | v2, v13));
      }
      else
      {
        v2 = 0;
      }
      break;
    case 3:
      v2 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 72) = ~v2;
      break;
    case 4:
      v2 = *(_QWORD *)(a2 + 32);
      if (v2)
      {
        v8 = (unint64_t *)(a1 + 72);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + v2, v8));
      }
      break;
    default:
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Corrupt unote action";
      qword_1EDF52D38 = v5;
      __break(1u);
      JUMPOUT(0x18A016FF0);
  }
  v15 = *(_WORD *)(a2 + 10);
  if ((v15 & 0x110) == 0x10)
    goto LABEL_36;
  if ((v15 & 2) != 0)
  {
    v16 = 2;
    goto LABEL_33;
  }
  if ((*(_WORD *)(a2 + 10) & 0x210) != 0)
  {
    v16 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL | 2;
LABEL_33:
    *(_QWORD *)(a1 + 16) = v16;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, *(unsigned __int16 *)(a2 + 10), v2, *(_DWORD *)(a2 + 12) & 0xFFFFFF);
  }
  if ((v15 & 0x80) != 0)
  {
    v16 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFELL;
    goto LABEL_33;
  }
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, *(unsigned __int16 *)(a2 + 10), v2, *(_DWORD *)(a2 + 12) & 0xFFFFFF);
}

const char *_evfiltstr(unsigned int a1)
{
  if (a1 < 0xFFFFFFE8)
    return "EVFILT_missing";
  else
    return off_1E1E86F00[(int)a1 + 24];
}

uint64_t _dispatch_kevent_mach_msg_recv(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6;
  unsigned int *v13;
  int v14;
  unint64_t v15;

  v6 = *(_DWORD *)(a3 + 4);
  if (v6 >= 0xFFFFFFBC)
    _dispatch_kevent_mach_msg_recv_cold_1(*(_DWORD *)(a3 + 4));
  if (!*(_DWORD *)(a3 + 12))
    _dispatch_kevent_mach_msg_recv_cold_2(a3);
  if (*(_DWORD *)(7 - a1[1]) != 0x7FFFFFFF)
  {
    v13 = (unsigned int *)(7 - a1[1]);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if (v14 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  if ((a2 & 0x110) == 0x10)
  {
    _dispatch_unote_unregister_VARIANT_mp((uint64_t)a1, 5);
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*a1 + 56))(a1, a2, a3, v6 + 68, a4, a5, a6);
  }
  if ((a2 & 2) != 0)
  {
    v15 = 2;
    goto LABEL_14;
  }
  if ((a2 & 0x210) != 0)
  {
    v15 = a1[2] & 0xFFFFFFFFFFFFFFFCLL | 2;
LABEL_14:
    a1[2] = v15;
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*a1 + 56))(a1, a2, a3, v6 + 68, a4, a5, a6);
  }
  if ((a2 & 0x80) != 0)
  {
    v15 = a1[2] & 0xFFFFFFFFFFFFFFFELL;
    goto LABEL_14;
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*a1 + 56))(a1, a2, a3, v6 + 68, a4, a5, a6);
}

uint64_t mach_msg2()
{
  return mach_msg2_internal();
}

uint64_t _dispatch_kq_init(_BYTE *a1)
{
  unint64_t StatusReg;
  uint64_t result;
  int v4;

  if ((_dispatch_unsafe_fork & 1) == 0)
    _dispatch_fork_becomes_unsafe_slow_VARIANT_mp();
  if (getenv("LIBDISPATCH_TIMERS_FORCE_MAX_LEEWAY"))
    _dispatch_timers_force_max_leeway = 1;
  *a1 = 1;
  _dispatch_kevent_workqueue_init_VARIANT_mp();
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    result = kevent_qos();
    if ((_DWORD)result != -1)
      break;
    v4 = **(_DWORD **)(StatusReg + 8);
    if (v4 != 4)
      _dispatch_kq_init_cold_1(v4);
  }
  return result;
}

void _dispatch_memorypressure_create(uint64_t a1)
{
  void *VARIANT_mp;
  const char *v2;

  VARIANT_mp = (void *)dispatch_source_create_VARIANT_mp((uint64_t)&_dispatch_source_type_memorypressure_VARIANT_mp, 0, a1, &_dispatch_mgr_q);
  dispatch_set_context_VARIANT_mp(VARIANT_mp, (const char *)VARIANT_mp);
  dispatch_source_set_event_handler_f_VARIANT_mp((uint64_t)VARIANT_mp, (void (**)(void (**)(void)))_dispatch_memorypressure_handler);
  dispatch_activate_VARIANT_mp((uint64_t)VARIANT_mp);
  if (_dispatch_memorypressure_source)
  {
    dispatch_source_cancel_VARIANT_mp((unsigned int *)_dispatch_memorypressure_source);
    dispatch_release_VARIANT_mp((unsigned int *)_dispatch_memorypressure_source, v2);
  }
  _dispatch_memorypressure_source = (uint64_t)VARIANT_mp;
}

uint64_t _dispatch_memorypressure_handler(uint64_t a1)
{
  int data_VARIANT_mp;
  char v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  data_VARIANT_mp = dispatch_source_get_data_VARIANT_mp(a1);
  v2 = data_VARIANT_mp;
  if ((data_VARIANT_mp & 0xF0000000) != 0
    && dispatch_source_get_mask_VARIANT_mp(_dispatch_memorypressure_source) != *MEMORY[0x1E0C88958])
  {
    _dispatch_memorypressure_create();
  }
  if ((v2 & 1) != 0)
  {
    _dispatch_memory_warn = 0;
    _dispatch_continuation_cache_limit = 112;
    v3 = _firehose_task_buffer;
    if (_firehose_task_buffer)
    {
      v4 = (unint64_t *)(_firehose_task_buffer + 512);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 & 0xFFFFFFFFFFFFFFFELL, v4));
      if ((v5 & 1) != 0)
        firehose_buffer_update_limits_VARIANT_mp(v3);
    }
  }
  if ((v2 & 2) != 0)
  {
    _dispatch_memory_warn = 1;
    _dispatch_continuation_cache_limit = 16;
    v6 = _firehose_task_buffer;
    if (_firehose_task_buffer)
    {
      v7 = (unint64_t *)(_firehose_task_buffer + 512);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 | 1, v7));
      if (v8 != (v8 | 1))
        firehose_buffer_update_limits_VARIANT_mp(v6);
    }
  }
  return malloc_memory_event_handler();
}

void _dispatch_mach_host_notify_update()
{
  host_t v0;
  kern_return_t v1;

  if (_dispatch_mach_host_port_pred != -1)
    dispatch_once_f_VARIANT_mp((unint64_t *)&_dispatch_mach_host_port_pred, 0, (uint64_t (*)(void))_dispatch_mach_host_port_init);
  v0 = _dispatch_mach_host_port;
  if (_dispatch_mach_notify_port_pred != -1)
    dispatch_once_f_VARIANT_mp((unint64_t *)&_dispatch_mach_notify_port_pred, 0, (uint64_t (*)(void))_dispatch_mach_notify_port_init);
  v1 = host_request_notification(v0, 1, _dispatch_mach_notify_port);
  if (v1 == -301)
    _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
  if (v1)
    _dispatch_bug(2893, v1);
}

void _dispatch_mach_notify_port_init()
{
  char *v0;
  kern_return_t v1;
  mach_port_options_t v2;

  v2.reserved[1] = 0;
  *(_OWORD *)&v2.flags = xmmword_18A06E800;
  v0 = (char *)&_dispatch_mach_notify_port;
  v1 = mach_port_construct(*MEMORY[0x1E0C883F0], &v2, (mach_port_context_t)&_dispatch_mach_notify_port, (mach_port_name_t *)&_dispatch_mach_notify_port);
  if (v1)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: mach_port_construct() failed: cannot create receive right";
    qword_1EDF52D38 = v1;
    __break(1u);
    goto LABEL_5;
  }
  v0 = _dispatch_unote_create_with_handle_VARIANT_mp((uint64_t)&_dispatch_mach_type_notification_VARIANT_mp, _dispatch_mach_notify_port, 0);
  *((_QWORD *)v0 + 1) = ~(unint64_t)&_dispatch_mgr_q;
  if ((_dispatch_unote_register_VARIANT_mp((uint64_t)v0, -4, 0x2000000u) & 1) == 0)
LABEL_5:
    _dispatch_bug(2842, 0);
  _dispatch_mach_notify_unote = (uint64_t)v0;
}

uint64_t _dispatch_kevent_mach_notify_resume(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  _QWORD *v4;
  mach_port_name_t v5;
  uint64_t v6;
  uint64_t v7;
  ipc_space_t v8;
  kern_return_t v9;
  kern_return_t v10;
  int v12;
  kern_return_t v13;
  uint64_t v15;
  char v16;
  mach_port_t previous;
  int v18;

  if (((a3 | a2) & 0xD) == 0)
    return 1;
  v4 = (_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(a1 + 24);
  v6 = (v3 | (*(_DWORD *)(a1 + 48) | a2) & 0xD) & (~a3 | 0xFFFFFFF2);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = v6 & 0xD;
  if ((v3 & 0xD) != 0 || !v7)
  {
    v12 = 0;
    if ((v3 & 0xD) == 0 || v7)
      return v12 == 0;
    previous = 0;
    v13 = mach_port_request_notification(*MEMORY[0x1E0C883F0], v5, 66, 0, 0, 0x12u, &previous);
    v10 = 0;
    if (v13 > 0x11 || ((1 << v13) & 0x28011) == 0)
    {
      if (v13 == -301)
        _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
      _dispatch_bug(2966, v13);
      v10 = 0;
    }
    goto LABEL_17;
  }
  previous = 0;
  v8 = *MEMORY[0x1E0C883F0];
  if (_dispatch_mach_notify_port_pred != -1)
    dispatch_once_f_VARIANT_mp((unint64_t *)&_dispatch_mach_notify_port_pred, 0, (uint64_t (*)(void))_dispatch_mach_notify_port_init);
  v9 = mach_port_request_notification(v8, v5, 66, 0, _dispatch_mach_notify_port, 0x15u, &previous);
  v10 = v9;
  if (v9 <= 14)
  {
    if (v9 == -301)
      _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
    if (!v9)
    {
      v12 = previous;
      if (!previous)
        return v12 == 0;
      v16 = _dispatch_kevent_mach_notify_resume_cold_3(previous, &previous, &v18);
      v12 = v18;
      if ((v16 & 1) == 0)
        return v12 == 0;
      v10 = 0;
      v15 = 2947;
      goto LABEL_31;
    }
  }
  else if (v9 == 15 || v9 == 17)
  {
    *v4 &= 0xFFFFFFF2uLL;
    goto LABEL_17;
  }
  _dispatch_kevent_mach_notify_resume_cold_1(v9, v4);
LABEL_17:
  if (!previous)
    goto LABEL_18;
  v12 = _dispatch_send_consume_send_once_right(previous);
  if (!v12)
    goto LABEL_18;
  v15 = 2976;
LABEL_31:
  _dispatch_bug(v15, v12);
LABEL_18:
  v12 = v10;
  return v12 == 0;
}

uint64_t voucher_adopt_VARIANT_mp(uint64_t a1)
{
  unint64_t StatusReg;
  uint64_t v2;
  int v3;
  int v4;
  unsigned int *v5;
  int v6;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v2 = *(_QWORD *)(StatusReg + 224);
  if (a1 != -3)
  {
    if (v2 == a1)
      return a1;
    *(_QWORD *)(StatusReg + 224) = a1;
    if (a1)
    {
      v3 = *(_DWORD *)(a1 + 32);
      if (v2)
      {
LABEL_5:
        v4 = *(_DWORD *)(v2 + 32);
LABEL_14:
        if (v3 != -1 && v3 != v4)
          _dispatch_set_priority_and_mach_voucher_slow_VARIANT_mp(0, v3);
        return v2;
      }
    }
    else
    {
      v3 = 0;
      if (v2)
        goto LABEL_5;
    }
    v4 = 0;
    goto LABEL_14;
  }
  if (v2)
  {
    v5 = (unsigned int *)(v2 + 12);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    if (v6 <= 0)
      dispatch_group_notify_VARIANT_mp_cold_3();
  }
  return v2;
}

uint64_t voucher_copy_VARIANT_mp()
{
  uint64_t result;
  unsigned int *v1;
  int v2;

  result = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (result)
  {
    v1 = (unsigned int *)(result + 12);
    do
      v2 = __ldxr(v1);
    while (__stxr(v2 + 1, v1));
    if (v2 <= 0)
      dispatch_group_notify_VARIANT_mp_cold_3();
  }
  return result;
}

uint64_t voucher_copy_without_importance_VARIANT_mp()
{
  uint64_t result;

  result = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (result)
    return _voucher_create_without_importance_VARIANT_mp(result);
  return result;
}

uint64_t voucher_retain_VARIANT_mp(uint64_t result)
{
  unsigned int *v1;
  int v2;

  v1 = (unsigned int *)(result + 12);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  if (v2 <= 0)
    dispatch_group_notify_VARIANT_mp_cold_3();
  return result;
}

uint64_t voucher_release_VARIANT_mp(uint64_t result, const char *a2)
{
  unsigned int *v2;
  int v3;

  v2 = (unsigned int *)(result + 12);
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 - 1, v2));
  if (v3 <= 1)
  {
    if (v3 != 1)
      _dispatch_async_redirect_invoke_cold_1();
    return _voucher_xref_dispose_VARIANT_mp(result, a2);
  }
  return result;
}

uint64_t _voucher_thread_cleanup_VARIANT_mp(uint64_t result, const char *a2)
{
  unsigned int *v2;
  int v3;

  v2 = (unsigned int *)(result + 12);
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 - 1, v2));
  if (v3 <= 1)
  {
    if (v3 != 1)
      _dispatch_async_redirect_invoke_cold_1();
    return _voucher_xref_dispose_VARIANT_mp(result, a2);
  }
  return result;
}

void _voucher_dealloc_mach_voucher_VARIANT_mp(mach_port_name_t a1)
{
  kern_return_t v1;

  v1 = mach_voucher_deallocate(a1);
  if (v1 == -301)
    _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
  if (v1)
    _dispatch_bug(302, v1);
}

uint64_t _voucher_task_mach_voucher_init_VARIANT_mp()
{
  host_t mach_host_port_VARIANT_mp;
  uint64_t result;
  ipc_voucher_t voucher;

  mach_host_port_VARIANT_mp = _dispatch_get_mach_host_port_VARIANT_mp();
  voucher = 0;
  result = host_create_mach_voucher(mach_host_port_VARIANT_mp, _voucher_task_mach_voucher_init_VARIANT_mp_task_create_recipe, 0x10u, &voucher);
  if ((_DWORD)result == -301)
    _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
  if ((_DWORD)result)
    _voucher_task_mach_voucher_init_VARIANT_mp_cold_2(result);
  _voucher_default_task_mach_voucher = voucher;
  _voucher_task_mach_voucher = voucher;
  return result;
}

void voucher_replace_default_voucher_VARIANT_mp()
{
  uint64_t v0;
  int v1;
  int v2;
  host_t mach_host_port_VARIANT_mp;
  kern_return_t v4;
  ipc_voucher_t v5;
  int v6;
  mach_port_name_t v7;
  BOOL v8;
  uint8_t recipes[8];
  int v10;
  int v11;
  ipc_voucher_t voucher;

  if (_voucher_task_mach_voucher_pred != -1)
    dispatch_once_f_VARIANT_mp((unint64_t *)&_voucher_task_mach_voucher_pred, 0, _voucher_task_mach_voucher_init_VARIANT_mp);
  v0 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (v0)
  {
    v1 = *(_DWORD *)(v0 + 32);
    if (v1)
    {
      v2 = *(_DWORD *)(v0 + 36);
      if (!v2)
        v2 = v1;
      *(_QWORD *)recipes = 0x100000003;
      v10 = v2;
      v11 = 0;
      mach_host_port_VARIANT_mp = _dispatch_get_mach_host_port_VARIANT_mp();
      voucher = 0;
      v4 = host_create_mach_voucher(mach_host_port_VARIANT_mp, recipes, 0x10u, &voucher);
      if (v4 == -301)
        _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
      if (v4)
      {
        _dispatch_bug(362, v4);
      }
      else
      {
        v5 = voucher;
        if (voucher)
        {
          v6 = _voucher_default_task_mach_voucher;
          goto LABEL_13;
        }
      }
    }
  }
  v6 = _voucher_default_task_mach_voucher;
  v5 = _voucher_default_task_mach_voucher;
  do
LABEL_13:
    v7 = __ldxr((unsigned int *)&_voucher_task_mach_voucher);
  while (__stxr(v5, (unsigned int *)&_voucher_task_mach_voucher));
  if (v7)
    v8 = v7 == v6;
  else
    v8 = 1;
  if (!v8)
    _voucher_dealloc_mach_voucher_VARIANT_mp(v7);
}

uint64_t _voucher_get_mach_voucher_VARIANT_mp(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    result = *(unsigned int *)(result + 36);
    if (!(_DWORD)result)
    {
      result = *(unsigned int *)(v1 + 32);
      if (!(_DWORD)result)
      {
        if (_voucher_task_mach_voucher_pred != -1)
          dispatch_once_f_VARIANT_mp((unint64_t *)&_voucher_task_mach_voucher_pred, 0, _voucher_task_mach_voucher_init_VARIANT_mp);
        return _voucher_task_mach_voucher;
      }
    }
  }
  return result;
}

uint64_t _voucher_create_without_importance_VARIANT_mp(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  int v3;
  mach_port_name_t v5;
  host_t mach_host_port_VARIANT_mp;
  kern_return_t v7;
  ipc_voucher_t v8;
  unsigned int *v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  ipc_voucher_t voucher;
  uint8_t recipes[8];
  mach_port_name_t v16;
  __int128 v17;
  int v18;
  uint64_t v19;

  v1 = a1;
  v19 = *MEMORY[0x1E0C874D8];
  if (!a1)
    return v1;
  if (!*(_DWORD *)(a1 + 32) || (*(_BYTE *)(a1 + 72) & 1) == 0)
  {
    v2 = (unsigned int *)(a1 + 12);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
    if (v3 <= 0)
      dispatch_group_notify_VARIANT_mp_cold_3();
    return v1;
  }
  if (*(_DWORD *)(a1 + 36))
    v5 = *(_DWORD *)(a1 + 36);
  else
    v5 = *(_DWORD *)(a1 + 32);
  *(_QWORD *)recipes = 0x1FFFFFFFFLL;
  v16 = v5;
  v17 = xmmword_18A06E830;
  v18 = 0;
  mach_host_port_VARIANT_mp = _dispatch_get_mach_host_port_VARIANT_mp();
  voucher = 0;
  v7 = host_create_mach_voucher(mach_host_port_VARIANT_mp, recipes, 0x20u, &voucher);
  if (v7 == -301)
    _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
  if (v7)
  {
    _dispatch_bug(639, v7);
    goto LABEL_29;
  }
  v8 = voucher;
  if (!voucher)
  {
LABEL_29:
    if (*(_DWORD *)(v1 + 36))
      return 0;
    v8 = 0;
  }
  if (v8 == v5)
  {
    _voucher_dealloc_mach_voucher_VARIANT_mp(v5);
    v9 = (unsigned int *)(v1 + 12);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    if (v10 <= 0)
      dispatch_group_notify_VARIANT_mp_cold_3();
  }
  else
  {
    v11 = _voucher_find_and_retain(v8);
    if (v11 && *(_DWORD *)(v1 + 36))
    {
      _voucher_dealloc_mach_voucher_VARIANT_mp(v8);
      return v11;
    }
    else
    {
      v12 = _os_object_alloc_realized((objc_class *)OS_voucher, 80);
      v13 = v12;
      *((_OWORD *)v12 + 3) = *(_OWORD *)(v1 + 48);
      *((_QWORD *)v12 + 8) = *(_QWORD *)(v1 + 64);
      v12[8] = v8;
      if (*(_DWORD *)(v1 + 36))
      {
        v12[9] = v8;
        _voucher_insert((uint64_t)v12);
      }
      else if (v11)
      {
        *((_QWORD *)v12 + 5) = v11;
        _voucher_dealloc_mach_voucher_VARIANT_mp(v8);
      }
      return (uint64_t)v13;
    }
  }
  return v1;
}

uint64_t _voucher_find_and_retain(unsigned int a1)
{
  unint64_t StatusReg;
  unsigned int v3;
  uint64_t v5;
  uint64_t i;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  if (!a1)
    return 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr((unsigned int *)&_voucher_hash_lock))
  {
    if (!__stxr(v3, (unsigned int *)&_voucher_hash_lock))
      goto LABEL_8;
  }
  __clrex();
  _dispatch_unfair_lock_lock_slow_VARIANT_mp((uint64_t)&_voucher_hash_lock);
LABEL_8:
  for (i = *((_QWORD *)&_voucher_hash + ((a1 >> 8) & 0x3F)); ; i = *(_QWORD *)(15 - i))
  {
    v5 = ~i;
    if (i == -1)
      break;
    if (*(_DWORD *)(35 - i) == a1)
    {
      v7 = (unsigned int *)(11 - i);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      if ((v8 & 0x80000000) != 0)
        _dispatch_async_redirect_invoke_cold_1();
      if (!v8)
      {
        v9 = (unsigned int *)(v5 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      break;
    }
  }
  v11 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    v12 = __ldxr((unsigned int *)&_voucher_hash_lock);
  while (__stlxr(0, (unsigned int *)&_voucher_hash_lock));
  if (v12 != v11)
    _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)&_voucher_hash_lock, v12);
  return v5;
}

uint64_t _voucher_insert(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t StatusReg;
  unsigned int v4;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  v1 = *(unsigned int *)(result + 36);
  if ((_DWORD)v1)
  {
    v2 = result;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v4 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    while (!__ldaxr((unsigned int *)&_voucher_hash_lock))
    {
      if (!__stxr(v4, (unsigned int *)&_voucher_hash_lock))
        goto LABEL_7;
    }
    __clrex();
    _dispatch_unfair_lock_lock_slow_VARIANT_mp((uint64_t)&_voucher_hash_lock);
LABEL_7:
    if (*(_QWORD *)(v2 + 24))
      _voucher_insert_cold_3();
    v6 = *(_QWORD *)(v2 + 48);
    if (v6)
      _voucher_insert_cold_2(v6);
    result = *(_QWORD *)(v2 + 40);
    if (result)
      _voucher_insert_cold_1(result);
    v7 = (unint64_t *)&_voucher_hash + ((v1 >> 8) & 0x3F);
    v8 = *v7;
    *(_QWORD *)(v2 + 16) = *v7;
    if (v8 != -1)
      *(_QWORD *)(23 - v8) = ~(v2 + 16);
    *v7 = ~v2;
    *(_QWORD *)(v2 + 24) = ~(unint64_t)v7;
    v9 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    do
      v10 = __ldxr((unsigned int *)&_voucher_hash_lock);
    while (__stlxr(0, (unsigned int *)&_voucher_hash_lock));
    if (v10 != v9)
      return _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)&_voucher_hash_lock, v10);
  }
  return result;
}

_DWORD *_voucher_create_with_mach_msgv_VARIANT_mp(unsigned int *a1, unsigned int *a2)
{
  unsigned int v3;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t v10;

  v3 = *a1;
  if ((*a1 & 0x1F0000) == 0)
  {
    v6 = 0;
    v5 = 0;
    if (a2)
      goto LABEL_3;
LABEL_8:
    v10 = 0;
    v8 = 0;
    return _voucher_create_with_mach_voucher(v5, v6, v10, v8);
  }
  v5 = a1[4];
  a1[4] = 0;
  v6 = v3 & 0x201F0000;
  *a1 = v3 & 0xDFE0FFFF;
  if (!a2)
    goto LABEL_8;
LABEL_3:
  v7 = *a2;
  if (*a2 <= 7)
    _voucher_create_with_mach_msgv_VARIANT_mp_cold_1(*a2);
  v8 = v7 - 8;
  v9 = a2 + 2;
  if (v7 == 8)
    v10 = 0;
  else
    v10 = (uint64_t)v9;
  return _voucher_create_with_mach_voucher(v5, v6, v10, v8);
}

_DWORD *_voucher_create_with_mach_voucher(unsigned int a1, int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  const char *v13;
  _DWORD *v14;
  _DWORD *v15;
  unsigned int *v16;
  int v17;

  if (a1)
  {
    v8 = _voucher_find_and_retain(a1);
    if (v8)
    {
      v9 = (_DWORD *)v8;
      _voucher_dealloc_mach_voucher_VARIANT_mp(a1);
    }
    else
    {
      v9 = _os_object_alloc_realized((objc_class *)OS_voucher, 80);
      v9[8] = a1;
      v9[9] = a1;
      *((_BYTE *)v9 + 72) = v9[18] & 0xFE | ((a2 & 0x20000000) != 0);
      _voucher_insert((uint64_t)v9);
    }
  }
  else
  {
    v9 = 0;
  }
  if (a4 >= 0x20 && *(_DWORD *)a3 == 59821818 && *(_QWORD *)(a3 + 8))
  {
    if (v9)
    {
      v10 = *((_QWORD *)v9 + 6);
      if (v10)
        _voucher_insert_cold_2(v10);
      v11 = *((_QWORD *)v9 + 5);
      if (v11)
        _voucher_insert_cold_1(v11);
      v12 = _os_object_alloc_realized((objc_class *)OS_voucher, 80);
      v14 = v12;
      if (v9[8])
      {
        v15 = (_DWORD *)*((_QWORD *)v9 + 5);
        if (!v15)
          v15 = v9;
        v16 = v15 + 3;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        if (v17 <= 0)
          dispatch_group_notify_VARIANT_mp_cold_3();
        *((_QWORD *)v12 + 5) = v15;
        v12[8] = v15[8];
        *((_BYTE *)v12 + 72) = v12[18] & 0xFE | v15[18] & 1;
      }
      voucher_release_VARIANT_mp((uint64_t)v9, v13);
    }
    else
    {
      v14 = _os_object_alloc_realized((objc_class *)OS_voucher, 80);
    }
    *((_OWORD *)v14 + 3) = *(_OWORD *)(a3 + 8);
    *((_QWORD *)v14 + 8) = *(_QWORD *)(a3 + 24);
    return v14;
  }
  return v9;
}

_DWORD *voucher_create_with_mach_msg_VARIANT_mp(unsigned int *a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;

  v1 = *a1;
  if ((*a1 & 0x1F0000) != 0)
  {
    v3 = a1[4];
    a1[4] = 0;
    v4 = v1 & 0x201F0000;
    *a1 = v1 & 0xDFE0FFFF;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  return _voucher_create_with_mach_voucher(v3, v4, 0, 0);
}

void voucher_decrement_importance_count4CF_VARIANT_mp(uint64_t a1)
{
  ipc_voucher_t v1;
  kern_return_t v2;
  mach_msg_type_number_t out_contentCnt;
  uint8_t in_content[4];

  if (a1 && *(_DWORD *)(a1 + 32) && (*(_BYTE *)(a1 + 72) & 1) != 0)
  {
    v1 = *(_DWORD *)(a1 + 36) ? *(_DWORD *)(a1 + 36) : *(_DWORD *)(a1 + 32);
    *(_DWORD *)in_content = 1;
    out_contentCnt = 0;
    v2 = mach_voucher_attr_command(v1, 2u, 2u, in_content, 4u, 0, &out_contentCnt);
    if (v2 != 16)
    {
      if (v2 == -301)
        _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
      if (v2)
        voucher_decrement_importance_count4CF_VARIANT_mp_cold_1(v2, v2);
    }
  }
}

uint64_t _voucher_xref_dispose_VARIANT_mp(uint64_t result, const char *a2)
{
  uint64_t v2;
  int v3;
  unint64_t StatusReg;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  int v11;

  v2 = result;
  if (*(_QWORD *)(result + 24))
  {
    v3 = *(_DWORD *)(result + 36);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v5 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    while (!__ldaxr((unsigned int *)&_voucher_hash_lock))
    {
      if (!__stxr(v5, (unsigned int *)&_voucher_hash_lock))
        goto LABEL_7;
    }
    __clrex();
    result = _dispatch_unfair_lock_lock_slow_VARIANT_mp((uint64_t)&_voucher_hash_lock);
LABEL_7:
    if (!v3)
      _voucher_insert_cold_3();
    if (*(int *)(v2 + 12) <= 0)
    {
      v7 = *(_QWORD *)(v2 + 24);
      if (v7)
      {
        v8 = *(_QWORD *)(v2 + 16);
        if (v8 != -1)
          *(_QWORD *)(23 - v8) = v7;
        *(_QWORD *)~v7 = v8;
        *(_OWORD *)(v2 + 16) = xmmword_18A06E840;
      }
    }
    v9 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    do
      a2 = (const char *)__ldxr((unsigned int *)&_voucher_hash_lock);
    while (__stlxr(0, (unsigned int *)&_voucher_hash_lock));
    if ((_DWORD)a2 != v9)
      result = _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)&_voucher_hash_lock, a2);
  }
  if (*(_DWORD *)(v2 + 8) != 0x7FFFFFFF)
  {
    v10 = (unsigned int *)(v2 + 8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (v11 <= 1)
    {
      if (v11 != 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      return _os_object_dispose((void *)v2, a2);
    }
  }
  return result;
}

uint64_t _voucher_dispose_VARIANT_mp(uint64_t a1, const char *a2)
{
  mach_port_name_t v3;
  mach_port_name_t v4;
  uint64_t result;
  unsigned int *v6;
  int v7;

  if (*(_QWORD *)(a1 + 24))
    _voucher_insert_cold_3();
  *(_OWORD *)(a1 + 16) = xmmword_18A06E840;
  v3 = *(_DWORD *)(a1 + 36);
  if (v3)
  {
    if (v3 != *(_DWORD *)(a1 + 32))
      _voucher_dealloc_mach_voucher_VARIANT_mp(v3);
    *(_DWORD *)(a1 + 36) = 0;
  }
  v4 = *(_DWORD *)(a1 + 32);
  if (v4)
  {
    if (!*(_QWORD *)(a1 + 40))
      _voucher_dealloc_mach_voucher_VARIANT_mp(v4);
    *(_DWORD *)(a1 + 32) = 0;
  }
  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    v6 = (unsigned int *)(result + 12);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 - 1, v6));
    if (v7 <= 1)
    {
      if (v7 != 1)
        _dispatch_async_redirect_invoke_cold_1();
      result = _voucher_xref_dispose_VARIANT_mp(result, a2);
    }
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  return result;
}

void _voucher_activity_debug_channel_init_VARIANT_mp()
{
  uint64_t v0;
  kern_return_t v1;
  uint64_t f_VARIANT_mp;
  mach_port_t special_port;

  if (_voucher_libtrace_hooks)
  {
    v0 = *(_QWORD *)(_voucher_libtrace_hooks + 16);
    if (v0)
    {
      special_port = 0;
      v1 = task_get_special_port(*MEMORY[0x1E0C883F0], 10, &special_port);
      if (v1)
      {
        if (v1 == -301)
          _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
        _voucher_activity_debug_channel_init_VARIANT_mp_cold_1(v1);
      }
      if (special_port)
      {
        f_VARIANT_mp = dispatch_mach_create_f_VARIANT_mp((uint64_t)"com.apple.debug-channel", 0, 0, v0);
        *(_BYTE *)(*(_QWORD *)(f_VARIANT_mp + 88) + 29) &= ~0x20u;
        dispatch_mach_connect_VARIANT_mp(f_VARIANT_mp, special_port, 0, 0);
        _voucher_activity_debug_channel = f_VARIANT_mp;
      }
    }
  }
}

uint64_t _voucher_atfork_prepare_VARIANT_mp()
{
  unsigned int v0;
  uint64_t result;

  v0 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFC;
  while (!__ldaxr((unsigned int *)&_voucher_hash_lock))
  {
    if (!__stxr(v0, (unsigned int *)&_voucher_hash_lock))
      return result;
  }
  __clrex();
  return _dispatch_unfair_lock_lock_slow_VARIANT_mp((uint64_t)&_voucher_hash_lock);
}

uint64_t _voucher_atfork_parent_VARIANT_mp()
{
  unsigned int v0;
  unsigned int v1;
  uint64_t result;

  v0 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFC;
  do
    v1 = __ldxr((unsigned int *)&_voucher_hash_lock);
  while (__stlxr(0, (unsigned int *)&_voucher_hash_lock));
  if (v1 != v0)
    return _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)&_voucher_hash_lock, v1);
  return result;
}

__n128 _voucher_atfork_child_VARIANT_mp()
{
  uint64_t i;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;

  for (i = 0; i != 64; ++i)
  {
    while (1)
    {
      v1 = *((_QWORD *)&_voucher_hash + i);
      if (v1 == -1)
        break;
      v2 = ~v1;
      *(_QWORD *)(v2 + 32) = 0;
      v3 = *(_QWORD *)(v2 + 16);
      v4 = *(_QWORD *)(v2 + 24);
      if (v3 != -1)
        *(_QWORD *)(23 - v3) = v4;
      *(_QWORD *)~v4 = v3;
      *(_OWORD *)(v2 + 16) = xmmword_18A06E840;
    }
  }
  result.n128_u64[0] = -1;
  result.n128_u64[1] = -1;
  xmmword_1ECCE9AA0 = (__int128)result;
  unk_1ECCE9AB0 = result;
  xmmword_1ECCE9A80 = (__int128)result;
  unk_1ECCE9A90 = result;
  xmmword_1ECCE9A60 = (__int128)result;
  unk_1ECCE9A70 = result;
  xmmword_1ECCE9A40 = (__int128)result;
  unk_1ECCE9A50 = result;
  xmmword_1ECCE9A20 = (__int128)result;
  unk_1ECCE9A30 = result;
  xmmword_1ECCE9A00 = (__int128)result;
  unk_1ECCE9A10 = result;
  xmmword_1ECCE99E0 = (__int128)result;
  unk_1ECCE99F0 = result;
  xmmword_1ECCE99C0 = (__int128)result;
  unk_1ECCE99D0 = result;
  xmmword_1ECCE99A0 = (__int128)result;
  unk_1ECCE99B0 = result;
  xmmword_1ECCE9980 = (__int128)result;
  unk_1ECCE9990 = result;
  xmmword_1ECCE9960 = (__int128)result;
  unk_1ECCE9970 = result;
  xmmword_1ECCE9940 = (__int128)result;
  unk_1ECCE9950 = result;
  xmmword_1ECCE9920 = (__int128)result;
  unk_1ECCE9930 = result;
  xmmword_1ECCE9900 = (__int128)result;
  unk_1ECCE9910 = result;
  xmmword_1ECCE98E0 = (__int128)result;
  unk_1ECCE98F0 = result;
  _voucher_hash = (__int128)result;
  unk_1ECCE98D0 = result;
  _voucher_hash_lock = 0;
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224) = 0;
  _voucher_task_mach_voucher_pred = 0;
  _voucher_task_mach_voucher = 0;
  _voucher_default_task_mach_voucher = 0;
  _voucher_aid_next = 0;
  _firehose_task_buffer_pred = 0;
  _firehose_task_buffer = 0;
  return result;
}

uint64_t voucher_process_can_use_arbitrary_personas_VARIANT_mp()
{
  if (_voucher_process_can_use_arbitrary_personas_pred != -1)
    dispatch_once_f_VARIANT_mp((unint64_t *)&_voucher_process_can_use_arbitrary_personas_pred, 0, _voucher_process_can_use_arbitrary_personas_init);
  return _voucher_process_can_use_arbitrary_personas;
}

uint64_t _voucher_process_can_use_arbitrary_personas_init()
{
  uint64_t result;
  uint8_t out_content[4];
  mach_msg_type_number_t out_contentCnt;

  if (_voucher_task_mach_voucher_pred != -1)
    dispatch_once_f_VARIANT_mp((unint64_t *)&_voucher_task_mach_voucher_pred, 0, _voucher_task_mach_voucher_init_VARIANT_mp);
  *(_DWORD *)out_content = 0;
  out_contentCnt = 4;
  result = mach_voucher_attr_command(_voucher_task_mach_voucher, 3u, 4u, 0, 0, out_content, &out_contentCnt);
  if ((_DWORD)result)
    _voucher_process_can_use_arbitrary_personas_init_cold_1(result);
  _voucher_process_can_use_arbitrary_personas = *(_DWORD *)out_content != 0;
  return result;
}

uint64_t voucher_copy_with_persona_mach_voucher_VARIANT_mp(int a1)
{
  uint64_t v1;
  mach_port_name_t v2;
  unsigned int *v3;
  int v4;
  host_t mach_host_port_VARIANT_mp;
  kern_return_t v6;
  kern_return_t v7;
  ipc_voucher_t v8;
  unsigned int *v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  ipc_voucher_t voucher;
  uint8_t recipes[8];
  mach_port_name_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C874D8];
  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (a1)
  {
    if (v1)
    {
      v2 = *(_DWORD *)(v1 + 36);
      if (!v2)
        v2 = *(_DWORD *)(v1 + 32);
    }
    else
    {
      v2 = 0;
    }
    *(_QWORD *)recipes = 0x1FFFFFFFFLL;
    v17 = v2;
    v18 = 0x300000000;
    v19 = 10;
    v20 = a1;
    v21 = 0;
    mach_host_port_VARIANT_mp = _dispatch_get_mach_host_port_VARIANT_mp();
    voucher = 0;
    v6 = host_create_mach_voucher(mach_host_port_VARIANT_mp, recipes, 0x20u, &voucher);
    if (v6 == -301)
      _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
    v7 = v6;
    if (v6)
    {
      _dispatch_bug(944, v6);
      if (v7 == 20)
        return -1;
      if (!v2)
        goto LABEL_16;
      v8 = 0;
    }
    else
    {
      v8 = voucher;
      if (voucher == v2)
      {
        if (v2)
          _voucher_dealloc_mach_voucher_VARIANT_mp(v2);
LABEL_16:
        v9 = (unsigned int *)(v1 + 12);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
        if (v10 <= 0)
          dispatch_group_notify_VARIANT_mp_cold_3();
        return v1;
      }
    }
    v11 = _voucher_find_and_retain(v8);
    if (v11)
    {
      if (!v1 || *(_DWORD *)(v1 + 36))
      {
        _voucher_dealloc_mach_voucher_VARIANT_mp(v8);
        return v11;
      }
      v13 = _os_object_alloc_realized((objc_class *)OS_voucher, 80);
    }
    else
    {
      v12 = _os_object_alloc_realized((objc_class *)OS_voucher, 80);
      v13 = v12;
      if (!v1)
      {
        v12[8] = v8;
        goto LABEL_32;
      }
    }
    *((_OWORD *)v13 + 3) = *(_OWORD *)(v1 + 48);
    *((_QWORD *)v13 + 8) = *(_QWORD *)(v1 + 64);
    v13[8] = v8;
    if (!*(_DWORD *)(v1 + 36))
    {
      if (v11)
      {
        *((_QWORD *)v13 + 5) = v11;
        _voucher_dealloc_mach_voucher_VARIANT_mp(v8);
      }
      return (uint64_t)v13;
    }
LABEL_32:
    v13[9] = v8;
    _voucher_insert((uint64_t)v13);
    return (uint64_t)v13;
  }
  if (v1)
  {
    v3 = (unsigned int *)(v1 + 12);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
    if (v4 <= 0)
      dispatch_group_notify_VARIANT_mp_cold_3();
  }
  return v1;
}

uint64_t mach_voucher_persona_self_VARIANT_mp(ipc_voucher_t *a1)
{
  host_t mach_host_port_VARIANT_mp;
  uint64_t v3;
  uint64_t v4;
  ipc_voucher_t v5;
  ipc_voucher_t voucher;
  uint8_t recipes[16];
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C874D8];
  *(_OWORD *)recipes = xmmword_18A06E880;
  v9 = unk_18A06E890;
  mach_host_port_VARIANT_mp = _dispatch_get_mach_host_port_VARIANT_mp();
  voucher = 0;
  v3 = host_create_mach_voucher(mach_host_port_VARIANT_mp, recipes, 0x20u, &voucher);
  if ((_DWORD)v3 == -301)
    _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
  v4 = v3;
  if ((_DWORD)v3)
  {
    _dispatch_bug(1000, (int)v3);
    v5 = 0;
  }
  else
  {
    v5 = voucher;
  }
  *a1 = v5;
  return v4;
}

uint64_t mach_voucher_persona_for_originator_VARIANT_mp(int a1, int a2, uint64_t a3, ipc_voucher_t *a4)
{
  host_t mach_host_port_VARIANT_mp;
  uint64_t result;
  ipc_voucher_t v7;
  ipc_voucher_t voucher;
  uint8_t recipes[8];
  int v10;
  __int128 v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C874D8];
  *(_QWORD *)recipes = 0x100000003;
  v10 = a2;
  v11 = xmmword_18A06E850;
  v12 = 16;
  v13 = a1;
  v14 = 0;
  v15 = a3;
  mach_host_port_VARIANT_mp = _dispatch_get_mach_host_port_VARIANT_mp();
  voucher = 0;
  result = host_create_mach_voucher(mach_host_port_VARIANT_mp, recipes, 0x30u, &voucher);
  if ((_DWORD)result == -301)
    _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
  v7 = voucher;
  if ((_DWORD)result)
    v7 = 0;
  *a4 = v7;
  return result;
}

uint64_t voucher_get_current_persona_VARIANT_mp()
{
  unint64_t StatusReg;
  uint64_t v1;
  ipc_voucher_t v2;
  ipc_voucher_t v3;
  ipc_voucher_t v4;
  kern_return_t v5;
  int v7;
  uint8_t out_content[4];
  mach_msg_type_number_t out_contentCnt;

  *(_DWORD *)out_content = -1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v1 = *(_QWORD *)(StatusReg + 224);
  if (v1)
  {
    v2 = *(_DWORD *)(v1 + 32);
    if (v2)
    {
      v3 = *(_DWORD *)(v1 + 36);
      if (v3)
        v4 = v3;
      else
        v4 = v2;
      out_contentCnt = 4;
      v5 = mach_voucher_attr_command(v4, 3u, 3u, 0, 0, out_content, &out_contentCnt);
      if (v5 > 0x2E || ((1 << v5) & 0x400000040011) == 0)
      {
        _dispatch_bug(1103, v5);
      }
      else if (!v5)
      {
        return *(unsigned int *)out_content;
      }
    }
  }
  if ((kpersona_get() & 0x80000000) != 0)
  {
    v7 = **(_DWORD **)(StatusReg + 8);
    if (v7 != 3 && v7 != 0)
      _dispatch_bug(1126, v7);
  }
  return *(unsigned int *)out_content;
}

double voucher_get_current_persona_originator_info_VARIANT_mp(_OWORD *a1)
{
  double result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C874D8];
  v8 = 0u;
  v9 = 0u;
  v6 = 0u;
  v7 = 0u;
  v4 = 0u;
  v5 = 0u;
  if (!_voucher_get_current_persona_token((mach_voucher_attr_content_t)&v4))
  {
    v3 = v5;
    *a1 = v4;
    a1[1] = v3;
    result = *(double *)&v6;
    a1[2] = v6;
  }
  return result;
}

uint64_t _voucher_get_current_persona_token(mach_voucher_attr_content_t out_content)
{
  uint64_t v1;
  ipc_voucher_t v2;
  ipc_voucher_t v4;
  ipc_voucher_t v5;
  uint64_t result;
  uint64_t v8;
  mach_msg_type_number_t out_contentCnt;

  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (!v1)
    return 5;
  v2 = *(_DWORD *)(v1 + 32);
  if (!v2)
    return 5;
  v4 = *(_DWORD *)(v1 + 36);
  if (v4)
    v5 = v4;
  else
    v5 = v2;
  out_contentCnt = 96;
  result = mach_voucher_attr_command(v5, 3u, 2u, 0, 0, out_content, &out_contentCnt);
  if (result > 0x2E || ((1 << result) & 0x400000040011) == 0)
  {
    v8 = result;
    _dispatch_bug(1075, (int)result);
    return v8;
  }
  return result;
}

double voucher_get_current_persona_proximate_info_VARIANT_mp(_OWORD *a1)
{
  double result;
  __int128 v3;
  _OWORD v4[3];
  __int128 v5;
  __int128 v6;
  double v7[3];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C874D8];
  v6 = 0u;
  *(_OWORD *)v7 = 0u;
  v5 = 0u;
  memset(v4, 0, sizeof(v4));
  if (!_voucher_get_current_persona_token((mach_voucher_attr_content_t)v4))
  {
    v3 = v6;
    *a1 = v5;
    a1[1] = v3;
    result = v7[0];
    a1[2] = *(_OWORD *)v7;
  }
  return result;
}

uint64_t voucher_mach_msg_set_VARIANT_mp(int *a1)
{
  uint64_t v2;
  int mach_voucher_VARIANT_mp;
  int v4;

  if ((*((_BYTE *)a1 + 2) & 0x1F) != 0)
    return 0;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (v2)
  {
    mach_voucher_VARIANT_mp = _voucher_get_mach_voucher_VARIANT_mp(v2);
  }
  else
  {
    if (_voucher_task_mach_voucher_pred != -1)
      dispatch_once_f_VARIANT_mp((unint64_t *)&_voucher_task_mach_voucher_pred, 0, _voucher_task_mach_voucher_init_VARIANT_mp);
    mach_voucher_VARIANT_mp = _voucher_task_mach_voucher;
  }
  v4 = *a1;
  if (!mach_voucher_VARIANT_mp || (*a1 & 0x1F0000) != 0)
    return 0;
  a1[4] = mach_voucher_VARIANT_mp;
  *a1 = v4 | 0x130000;
  return 1;
}

void voucher_mach_msg_clear_VARIANT_mp(unsigned int *a1)
{
  unsigned int v2;
  int v3;
  mach_port_name_t v4;

  v2 = *a1;
  v3 = HIWORD(*a1) & 0x1F;
  v4 = a1[4];
  if ((v3 == 17 || v3 == 19) && v4 != 0)
  {
    if (v3 == 17)
    {
      _voucher_dealloc_mach_voucher_VARIANT_mp(v4);
      v2 = *a1;
    }
    a1[4] = 0;
    *a1 = v2 & 0xFFE0FFFF;
  }
}

uint64_t voucher_mach_msg_adopt_VARIANT_mp(unsigned int *a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  unint64_t StatusReg;
  unsigned int *v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  _DWORD *v13;
  _DWORD *v15;
  int v16;
  int v17;

  v1 = *a1;
  if ((*a1 & 0x1F0000) == 0)
    return -1;
  v3 = a1[4];
  a1[4] = 0;
  *a1 = v1 & 0xDFE0FFFF;
  if (!v3)
    return -1;
  v4 = v1 & 0x201F0000;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = *(unsigned int **)(StatusReg + 984);
  if (v6)
  {
    v9 = *v6;
    v7 = v6 + 2;
    v8 = v9;
    v10 = v9 - 8;
    if (v9 == 8)
      v7 = 0;
    if (v8 <= 7)
      v11 = 0;
    else
      v11 = (uint64_t)v7;
    if (v8 <= 7)
      v12 = 0;
    else
      v12 = v10;
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v15 = _voucher_create_with_mach_voucher(v3, v4, v11, v12);
  v13 = *(_DWORD **)(StatusReg + 224);
  if (v13 == v15)
    return (uint64_t)v15;
  *(_QWORD *)(StatusReg + 224) = v15;
  if (!v15)
  {
    v16 = 0;
    if (v13)
      goto LABEL_18;
LABEL_21:
    v17 = 0;
    goto LABEL_22;
  }
  v16 = v15[8];
  if (!v13)
    goto LABEL_21;
LABEL_18:
  v17 = v13[8];
LABEL_22:
  if (v16 != -1 && v16 != v17)
    _dispatch_set_priority_and_mach_voucher_slow_VARIANT_mp(0, v16);
  return (uint64_t)v13;
}

void voucher_mach_msg_revert_VARIANT_mp(uint64_t a1, const char *a2)
{
  unint64_t StatusReg;
  uint64_t v3;
  int v4;
  unsigned int *v5;
  int v6;

  if (a1 == -1)
    return;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_QWORD *)(StatusReg + 224);
  if (v3 != a1)
  {
    *(_QWORD *)(StatusReg + 224) = a1;
    if (a1)
    {
      a2 = (const char *)*(unsigned int *)(a1 + 32);
      if (v3)
      {
LABEL_5:
        v4 = *(_DWORD *)(v3 + 32);
LABEL_8:
        if ((_DWORD)a2 != -1 && (_DWORD)a2 != v4)
          _dispatch_set_priority_and_mach_voucher_slow_VARIANT_mp(0, (int)a2);
        goto LABEL_11;
      }
    }
    else
    {
      a2 = 0;
      if (v3)
        goto LABEL_5;
    }
    v4 = 0;
    goto LABEL_8;
  }
LABEL_11:
  if (v3)
  {
    v5 = (unsigned int *)(v3 + 12);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 - 1, v5));
    if (v6 <= 1)
    {
      if (v6 != 1)
        _dispatch_async_redirect_invoke_cold_1();
      _voucher_xref_dispose_VARIANT_mp(v3, a2);
    }
  }
}

uint64_t voucher_activity_initialize_4libtrace_VARIANT_mp(uint64_t *a1)
{
  uint64_t result;

  if (*a1 <= 2)
    voucher_activity_initialize_4libtrace_VARIANT_mp_cold_1(*a1);
  do
  {
    if (__ldxr((unint64_t *)&_voucher_libtrace_hooks))
    {
      __clrex();
      voucher_activity_initialize_4libtrace_VARIANT_mp_cold_2();
    }
  }
  while (__stxr((unint64_t)a1, (unint64_t *)&_voucher_libtrace_hooks));
  result = _dispatch_getenv_BOOL("LIBDISPATCH_NO_FAULTS", 0);
  if ((result & 1) == 0)
  {
    result = getpid();
    if ((_DWORD)result != 1)
    {
      result = os_variant_has_internal_diagnostics();
      if ((_DWORD)result)
      {
        if ((MEMORY[0xFFFFFC104] & 0x80000000) == 0)
          _dispatch_mode &= ~2u;
      }
    }
  }
  return result;
}

uint64_t _voucher_init_VARIANT_mp()
{
  return __libkernel_voucher_init();
}

unint64_t voucher_activity_id_allocate_VARIANT_mp(unsigned __int8 a1)
{
  uint64_t slow;

  while (1)
  {
    slow = __ldxr((unint64_t *)&_voucher_aid_next);
    if (!slow || ((slow + 1) & 0xF) == 0)
      break;
    if (!__stxr(slow + 1, (unint64_t *)&_voucher_aid_next))
      return slow & 0xFFFFFFFFFFFFFFLL | ((unint64_t)a1 << 56);
  }
  __clrex();
  slow = _voucher_activity_id_allocate_slow();
  return slow & 0xFFFFFFFFFFFFFFLL | ((unint64_t)a1 << 56);
}

mach_vm_address_t voucher_activity_get_logging_preferences_VARIANT_mp(mach_vm_size_t *a1)
{
  if (_firehose_task_buffer_pred != -1)
    dispatch_once_f_VARIANT_mp((unint64_t *)&_firehose_task_buffer_pred, 0, _firehose_task_buffer_init);
  if (_firehose_task_buffer && *(_DWORD *)(_firehose_task_buffer + 1552) != -1)
    return firehose_buffer_get_logging_prefs_VARIANT_mp(_firehose_task_buffer, a1);
  *a1 = 0;
  return 0;
}

BOOL voucher_activity_should_send_strings_VARIANT_mp()
{
  if (_firehose_task_buffer_pred != -1)
    dispatch_once_f_VARIANT_mp((unint64_t *)&_firehose_task_buffer_pred, 0, _firehose_task_buffer_init);
  return _firehose_task_buffer
      && *(_DWORD *)(_firehose_task_buffer + 1552) != -1
      && firehose_buffer_should_send_strings_VARIANT_mp((int *)_firehose_task_buffer);
}

uint64_t voucher_activity_get_metadata_buffer_VARIANT_mp(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;

  if (_firehose_task_buffer_pred != -1)
    dispatch_once_f_VARIANT_mp((unint64_t *)&_firehose_task_buffer_pred, 0, _firehose_task_buffer_init);
  v2 = _firehose_task_buffer;
  if (!_firehose_task_buffer || *(_DWORD *)(_firehose_task_buffer + 1552) == -1)
  {
    result = 0;
    *a1 = 0;
  }
  else
  {
    *a1 = 2048;
    return v2 + 2048;
  }
  return result;
}

_DWORD *voucher_activity_create_with_data_2_VARIANT_mp(unint64_t *a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5, char a6)
{
  size_t v7;
  unint64_t v8;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  unsigned int *v21;
  int v22;
  unint64_t v23;
  uint64_t slow;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  _BOOL4 v43;
  unsigned __int16 v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  char v54;
  unint64_t v55;
  unint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  _BOOL4 v60;
  unsigned __int16 v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  unint64_t v76;
  unint64_t *v77;
  char v78;
  unint64_t *v79;
  int *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v84;
  unsigned __int16 v85;
  unint64_t v86;
  _DWORD *v87;
  int v88;
  size_t v89;
  size_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v95;
  int v96;
  unint64_t StatusReg;
  uint64_t v98;
  uint64_t v99;

  v7 = a5 + 8;
  v8 = (unsigned __int16)(a5 + 8);
  if (a5 >= 0xFFFFFFFFFFFFFFF8 || v7 >> 16 || v8 >= 0x81)
    voucher_activity_create_with_data_2_VARIANT_mp_cold_1(v8);
  v11 = *a1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v12 = *(_QWORD *)(StatusReg + 224);
  if (a2 == -3)
    v13 = *(_QWORD *)(StatusReg + 224);
  else
    v13 = a2;
  v86 = v11;
  v14 = v11 >> 16;
  v15 = (v11 >> 16) & 0xFFFFFFEF;
  if (v12)
  {
    v16 = *(_QWORD *)(v12 + 48);
    if (v16)
    {
      LOWORD(v15) = v15 | 1;
      v17 = *(_QWORD *)(v12 + 56);
      LODWORD(v7) = a5 + 24;
      if (v17)
        LOWORD(v15) = v14 | 0x11;
      else
        LODWORD(v7) = a5 + 16;
      if (!v13)
        goto LABEL_13;
LABEL_16:
      v18 = *(_QWORD *)(v13 + 48);
      goto LABEL_17;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = 0;
  if (v13)
    goto LABEL_16;
LABEL_13:
  v18 = 0;
LABEL_17:
  if (v18)
    LOWORD(v15) = v15 | 0x200;
  v85 = v15;
  if (v18)
    v7 = (v7 + 8);
  else
    v7 = v7;
  v90 = v7;
  v19 = MEMORY[0xFFFFFC104];
  v87 = _os_object_alloc_realized((objc_class *)OS_voucher, 80);
  if (v13 && *(_DWORD *)(v13 + 32))
  {
    v20 = *(_QWORD *)(v13 + 40);
    if (!v20)
      v20 = v13;
    v21 = (unsigned int *)(v20 + 12);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    if (v22 <= 0)
      dispatch_group_notify_VARIANT_mp_cold_3();
    *((_QWORD *)v87 + 5) = v20;
    v87[8] = *(_DWORD *)(v20 + 32);
    *((_BYTE *)v87 + 72) = v87[18] & 0xFE | *(_BYTE *)(v20 + 72) & 1;
  }
  v88 = a6 & 1;
  v23 = a3 | HIBYTE(v18) | ~v19 & 0x80;
  while (1)
  {
    slow = __ldxr((unint64_t *)&_voucher_aid_next);
    if (!slow || ((slow + 1) & 0xF) == 0)
      break;
    if (!__stxr(slow + 1, (unint64_t *)&_voucher_aid_next))
      goto LABEL_36;
  }
  __clrex();
  slow = _voucher_activity_id_allocate_slow();
LABEL_36:
  v26 = slow & 0xFFFFFFFFFFFFFFLL | ((unint64_t)v23 << 56);
  v27 = _voucher_unique_pid;
  *((_QWORD *)v87 + 6) = v26;
  *((_QWORD *)v87 + 7) = v27;
  *((_QWORD *)v87 + 8) = v18;
  v91 = v17;
  v92 = v16;
  v84 = a1;
  if (_firehose_task_buffer_pred != -1)
    dispatch_once_f_VARIANT_mp((unint64_t *)&_firehose_task_buffer_pred, 0, _firehose_task_buffer_init);
  if (_firehose_task_buffer && *(_DWORD *)(_firehose_task_buffer + 1552) != -1)
  {
    if ((v23 & 0x80) != 0 || (MEMORY[0xFFFFFC104] & 0x80) == 0)
      v28 = mach_continuous_time();
    else
      v28 = mach_continuous_approximate_time();
    v29 = v28;
    v30 = 0;
    LODWORD(v31) = (unsigned __int16)v90 + 24;
    v96 = (unsigned __int16)(v90 + 24);
    if ((v90 & 7) != 0)
      v31 = (v90 & 0xFFF8) + 32;
    else
      v31 = v31;
    v95 = v31;
    v89 = v90 << 48;
    v32 = 1;
    while (1)
    {
      v33 = v32;
      v34 = voucher_activity_create_with_data_2_VARIANT_mp_streams[v30];
      v35 = _firehose_task_buffer;
      v36 = (unint64_t *)(_firehose_task_buffer + (v34 << 7) + 640);
      v37 = *v36;
      if ((v32 & 1) == 0)
        break;
      while (1)
      {
        v38 = HIDWORD(v37);
        if ((BYTE4(v37) - 1) <= 0xFDu)
          break;
LABEL_66:
        if ((_DWORD)v37)
        {
LABEL_75:
          v50 = v37 | 1;
          v51 = v50 | ((unint64_t)v38 << 32) | v37 & 0xFFFFFF0000000000;
          if (v51 == v37)
            goto LABEL_81;
          while (1)
          {
            v52 = __ldxr(v36);
            if (v52 != v37)
              break;
            if (!__stxr(v51, v36))
            {
              v53 = 1;
              goto LABEL_80;
            }
          }
          v53 = 0;
          __clrex();
LABEL_80:
          v37 = v52;
          if (v53)
          {
LABEL_81:
            _dispatch_firehose_gate_wait_VARIANT_mp((uint64_t)v36, v50);
            v37 = *v36;
          }
        }
        else
        {
LABEL_67:
          v48 = v37 & 0xFFFFFFFF00000000;
          v49 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL | ((unint64_t)v38 << 32) | v37 & 0xFFFFFF0000000000;
          while (1)
          {
            v37 = __ldxr(v36);
            if (v37 != v48)
              break;
            if (!__stxr(v49, v36))
            {
              v98 = v29;
              v99 = (unsigned __int16)v90;
              BYTE4(v99) = v34;
              v78 = (((1 << v34) & 0x13) != 0) | (2 * *(_BYTE *)(v35 + 1569)) | 4;
              goto LABEL_134;
            }
          }
          __clrex();
        }
      }
      v39 = (unint64_t *)(v35 + ((unint64_t)BYTE4(v37) << 12));
      v40 = v29 - v39[1];
      do
      {
        v41 = __ldxr(v39);
        if (!v41 || (HIWORD(v41) & 0x1FF) != v34)
        {
          LOBYTE(v38) = 0;
          __clrex();
          if (!(_DWORD)v37)
            goto LABEL_67;
          goto LABEL_75;
        }
        v43 = v96 + (unsigned __int16)v41 > WORD1(v41) || HIWORD(v40) != 0;
        v44 = v41 + v95;
        v45 = v41 + v95 + 0x100000000;
        v46 = (v41 + v95) >> 16;
        v47 = ((unsigned __int16)(v41 + v95) + 40 > (unsigned __int16)v46) | HIBYTE(v45);
        if (v43)
        {
          v45 = v41;
          v47 = HIBYTE(v41) | 1;
          v46 = v41 >> 16;
          v44 = v41;
        }
      }
      while (__stxr(((_DWORD)v46 << 16) | v45 & 0xFFFFFF00000000 | (v47 << 56) | v44, v39));
      if (v43)
      {
        if ((v45 & 0xFF00000000) == 0)
          firehose_buffer_ring_enqueue_VARIANT_mp((int *)v35, BYTE4(v37));
LABEL_65:
        LOBYTE(v38) = 0;
        goto LABEL_66;
      }
      if (!(_WORD)v41)
        goto LABEL_65;
      v76 = *(_QWORD *)(StatusReg - 8);
      v77 = (unint64_t *)((char *)v39 + (unsigned __int16)v41);
      v77[2] = (v29 - v39[1]) | v89;
LABEL_133:
      v77[1] = v76;
LABEL_135:
      if (v92)
      {
        v77[3] = v92;
        v79 = v77 + 4;
      }
      else
      {
        v79 = v77 + 3;
      }
      if (v91)
        *v79++ = v91;
      if (v18)
        *v79++ = v18;
      *v79 = v26;
      memcpy(v79 + 1, a4, a5);
      v80 = (int *)_firehose_task_buffer;
      v81 = (unint64_t *)((unint64_t)v77 & 0xFFFFFFFFFFFFF000);
      atomic_store(v86 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)v85 << 16), v77);
      do
        v82 = __ldxr(v81);
      while (__stxr(v82 - 0x100000000, v81));
      if ((v82 & 0x10000FF00000000) == 0x100000100000000)
        firehose_buffer_ring_enqueue_VARIANT_mp(v80, (((_DWORD)v81 - (_DWORD)v80) >> 12));
LABEL_146:
      v32 = 0;
      v30 = 1u;
      if ((v33 & 1) == 0)
        goto LABEL_147;
    }
    v54 = 1;
    while (1)
    {
LABEL_83:
      v55 = HIDWORD(v37);
      if ((BYTE4(v37) - 1) <= 0xFDu)
      {
        v56 = (unint64_t *)(v35 + ((unint64_t)BYTE4(v37) << 12));
        v57 = v29 - v56[1];
        do
        {
          v58 = __ldxr(v56);
          if (!v58 || (HIWORD(v58) & 0x1FF) != v34)
          {
            LOBYTE(v55) = 0;
            __clrex();
            goto LABEL_100;
          }
          v60 = v96 + (unsigned __int16)v58 > WORD1(v58) || HIWORD(v57) != 0;
          v61 = v58 + v95;
          v62 = v58 + v95 + 0x100000000;
          v63 = (v58 + v95) >> 16;
          v64 = ((unsigned __int16)(v58 + v95) + 40 > (unsigned __int16)v63) | HIBYTE(v62);
          if (v60)
          {
            v62 = v58;
            v64 = HIBYTE(v58) | 1;
            v63 = v58 >> 16;
            v61 = v58;
          }
        }
        while (__stxr(((_DWORD)v63 << 16) | v62 & 0xFFFFFF00000000 | (v64 << 56) | v61, v56));
        if (v60)
        {
          if ((v62 & 0xFF00000000) == 0)
            firehose_buffer_ring_enqueue_VARIANT_mp((int *)v35, BYTE4(v37));
          goto LABEL_99;
        }
        if (!(_WORD)v58)
        {
LABEL_99:
          LOBYTE(v55) = 0;
          goto LABEL_100;
        }
        v76 = *(_QWORD *)(StatusReg - 8);
        v77 = (unint64_t *)((char *)v56 + (unsigned __int16)v58);
        v77[2] = (v29 - v56[1]) | v89;
        goto LABEL_133;
      }
LABEL_100:
      if (!v88)
        break;
      if (((v37 >> 40) & 0x80) != 0 || !((((v37 >> 40) & 0x40) == 0) | v54 & 1))
      {
        v68 = (v37 >> 40) & 0x3F;
        if (v68 >= 0x3E)
          LODWORD(v68) = 62;
        v69 = ((((int)v68 + 1) | (v37 >> 40) & 0xC0) << 40) | ((unint64_t)v55 << 32) | v37 & 0xFFFF0000FFFFFFFFLL;
        while (1)
        {
          v70 = __ldxr(v36);
          if (v70 != v37)
            break;
          if (!__stxr(v69, v36))
          {
            v71 = 1;
            goto LABEL_120;
          }
        }
        v71 = 0;
        __clrex();
LABEL_120:
        if ((v71 & 1) != 0)
          goto LABEL_146;
        v37 = v70;
      }
      else
      {
        if (!(_DWORD)v37)
        {
LABEL_108:
          v66 = v37 & 0xFFFFFFFF00000000;
          v67 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL | ((unint64_t)v55 << 32) | v37 & 0xFFFFFF0000000000;
          do
          {
            v37 = __ldxr(v36);
            if (v37 != v66)
            {
              __clrex();
              goto LABEL_83;
            }
          }
          while (__stxr(v67, v36));
          v98 = v29;
          v99 = (unsigned __int16)v90;
          BYTE4(v99) = v34;
          v78 = ((4 * v88) | (2 * *(_BYTE *)(v35 + 1569)) | (((1 << v34) & 0x13) != 0)) ^ 4;
LABEL_134:
          BYTE6(v99) = v78;
          v77 = (unint64_t *)firehose_buffer_tracepoint_reserve_slow_VARIANT_mp(v35, (unsigned __int8 *)&v98, 0);
          if (!v77)
            goto LABEL_146;
          goto LABEL_135;
        }
        v65 = 2;
LABEL_124:
        v72 = v65 | v37;
        v73 = v72 | ((unint64_t)v55 << 32) | v37 & 0xFFFFFF0000000000;
        if (v73 == v37)
          goto LABEL_130;
        while (1)
        {
          v74 = __ldxr(v36);
          if (v74 != v37)
            break;
          if (!__stxr(v73, v36))
          {
            v75 = 1;
            goto LABEL_129;
          }
        }
        v75 = 0;
        __clrex();
LABEL_129:
        v37 = v74;
        if (v75)
        {
LABEL_130:
          _dispatch_firehose_gate_wait_VARIANT_mp((uint64_t)v36, v72);
          v54 = 0;
          v37 = *v36;
        }
      }
    }
    if (!(_DWORD)v37)
      goto LABEL_108;
    v65 = 1;
    goto LABEL_124;
  }
LABEL_147:
  *v84 = v86 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)v85 << 16);
  return v87;
}

_DWORD *voucher_activity_create_with_data_VARIANT_mp(unint64_t *a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5)
{
  return voucher_activity_create_with_data_2_VARIANT_mp(a1, a2, a3, a4, a5, 0);
}

_DWORD *voucher_activity_create_with_location_VARIANT_mp(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a4;
  return voucher_activity_create_with_data_2_VARIANT_mp(a1, a2, a3, &v5, 8uLL, 0);
}

uint64_t voucher_get_activity_id_and_creator_VARIANT_mp(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  if (a1 == (_QWORD *)-3)
  {
    a1 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
    if (a1)
      goto LABEL_3;
  }
  else if (a1)
  {
LABEL_3:
    if (a2)
      *a2 = a1[7];
    if (a3)
      *a3 = a1[8];
    return a1[6];
  }
  if (a2)
    *a2 = 0;
  result = 0;
  if (a3)
    *a3 = 0;
  return result;
}

uint64_t voucher_get_activity_id_VARIANT_mp(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 == -3)
  {
    a1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
    if (a1)
      goto LABEL_3;
  }
  else if (a1)
  {
LABEL_3:
    if (a2)
      *a2 = *(_QWORD *)(a1 + 64);
    return *(_QWORD *)(a1 + 48);
  }
  result = 0;
  if (a2)
    *a2 = 0;
  return result;
}

void voucher_activity_flush_VARIANT_mp(unsigned int a1)
{
  int *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _BOOL4 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  if (_firehose_task_buffer_pred != -1)
    dispatch_once_f_VARIANT_mp((unint64_t *)&_firehose_task_buffer_pred, 0, _firehose_task_buffer_init);
  v2 = (int *)_firehose_task_buffer;
  if (_firehose_task_buffer && *(_DWORD *)(_firehose_task_buffer + 1552) != -1)
  {
    v3 = a1;
    v4 = _firehose_task_buffer + ((unint64_t)a1 << 7);
    v5 = *(_QWORD *)(v4 + 640);
    if ((~v5 & 0xFF00000000) == 0 || BYTE4(*(_QWORD *)(v4 + 640)) == 0)
    {
      firehose_buffer_force_connect_VARIANT_mp((int *)_firehose_task_buffer);
    }
    else
    {
      v7 = (unint64_t *)(v4 + 640);
      v8 = (unint64_t *)(_firehose_task_buffer + ((unint64_t)BYTE4(v5) << 12));
      v9 = v8[1];
      do
      {
        v10 = __ldxr(v8);
        if (!v10 || (HIWORD(v10) & 0x1FF) != v3)
        {
          __clrex();
          goto LABEL_28;
        }
        v12 = (unsigned __int16)v10 + 25 > WORD1(v10) || v9 < 0xFFFF000000000000;
        v13 = v10 + 0x100000020;
        v14 = (v10 + 0x100000020) >> 16;
        v15 = ((unsigned __int16)(v10 + 32) + 40 > (unsigned __int16)v14) | ((v10 + 0x100000020) >> 56);
        if (v12)
        {
          v13 = v10;
          v15 = HIBYTE(v10) | 1;
          v14 = v10 >> 16;
        }
      }
      while (__stxr(((_DWORD)v14 << 16) | v13 & 0xFFFFFF00000000 | (v15 << 56) | (unsigned __int16)v13, v8));
      if (v12)
      {
        if ((v13 & 0xFF00000000) == 0)
          firehose_buffer_ring_enqueue_VARIANT_mp(v2, BYTE4(v5));
      }
      else if ((_WORD)v10)
      {
        voucher_activity_flush_VARIANT_mp_cold_1((unsigned __int16)v10);
      }
LABEL_28:
      while (1)
      {
        v16 = __ldxr(v7);
        if (v16 != v5)
          break;
        if (!__stxr(v5 & 0xFFFFFF00FFFFFFFFLL, v7))
          return;
      }
      __clrex();
    }
  }
}

unint64_t *voucher_activity_trace_v_2_VARIANT_mp(unint64_t *result, unint64_t a2, size_t a3, uint64_t a4, char *a5, unint64_t a6, char a7)
{
  uint64_t v7;
  unsigned int v13;
  uint64_t v14;
  unint64_t StatusReg;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  char *v21;
  uint64_t v22;
  _BOOL4 v23;
  unsigned __int16 v24;
  char *v25;
  unsigned __int16 v26;
  char *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  size_t v34;
  unint64_t v35;
  _BOOL4 v37;
  unsigned __int16 v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  size_t v62;
  unint64_t v63;
  BOOL v64;
  unint64_t v65;
  int *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int v72;
  unint64_t v73;
  size_t v74;
  int v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  _BOOL4 v79;
  _BOOL4 v80;
  BOOL v81;
  char v82;
  unsigned __int16 v83;
  uint64_t v84;
  uint64_t v85;
  void *__dst;
  size_t v87;
  uint64_t v88;

  LOBYTE(v7) = a7;
  v13 = result;
  if (_firehose_task_buffer_pred != -1)
LABEL_111:
    result = dispatch_once_f_VARIANT_mp((unint64_t *)&_firehose_task_buffer_pred, 0, _firehose_task_buffer_init);
  v14 = _firehose_task_buffer;
  if (!_firehose_task_buffer || *(_DWORD *)(_firehose_task_buffer + 1552) == -1)
    return 0;
  __dst = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v16 = *(_QWORD *)(StatusReg + 224);
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 48);
    v18 = *(_QWORD *)(v16 + 56);
  }
  else
  {
    v18 = 0;
    v17 = 0;
  }
  v19 = a5 + 8;
  if (!v17)
    v19 = a5;
  v20 = (v17 != 0) | (a2 >> 16) & 0xFFFFFFEF;
  v21 = v19 + 8;
  if (v18)
    LOWORD(v20) = (v17 != 0) | WORD1(a2);
  else
    v21 = v19;
  if ((a2 & 0x100000) != 0)
    v22 = v18;
  else
    v22 = 0;
  v23 = (a2 & 0x100000) == 0 || v18 == 0;
  if ((a2 & 0x100000) != 0)
    v24 = v20;
  else
    v24 = (v17 != 0) | WORD1(a2);
  if ((a2 & 0x100000) != 0)
    v25 = v21;
  else
    v25 = v19;
  v26 = v24 | 0x100;
  if (a6)
  {
    v27 = v25 + 4;
  }
  else
  {
    v26 = v24;
    v27 = v25;
  }
  if ((unint64_t)&v27[a6 + 24] >= 0xFF1)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Log is too large";
    qword_1EDF52D38 = (uint64_t)&v27[a6 + 24];
    __break(1u);
    return result;
  }
  v28 = v7 & 1;
  v29 = v13;
  v7 = v14 + ((unint64_t)v13 << 7) + 640;
  v30 = *(_QWORD *)v7;
  LODWORD(v31) = (unsigned __int16)v27 + 24;
  if ((v27 & 7) != 0)
    v31 = ((unsigned __int16)v27 & 0xFFF8u) + 32;
  else
    v31 = v31;
  v84 = v31;
  v83 = v26;
  v82 = 1;
  while (1)
  {
    while (1)
    {
LABEL_32:
      v32 = HIDWORD(v30);
      if ((BYTE4(v30) - 1) <= 0xFDu)
      {
        v33 = (unint64_t *)(v14 + ((unint64_t)BYTE4(v30) << 12));
        v34 = a3 - v33[1];
        do
        {
          v35 = __ldxr(v33);
          if (!v35 || (HIWORD(v35) & 0x1FF) != v29)
          {
            LOBYTE(v32) = 0;
            __clrex();
            goto LABEL_55;
          }
          v37 = (unsigned __int16)((_WORD)v27 + 24 + a6) + (unsigned __int16)v35 > WORD1(v35)
             || HIWORD(v34) != 0;
          v38 = v35 + v84;
          v39 = v35 + v84 - ((_DWORD)a6 << 16);
          v40 = v39 >> 16;
          v41 = ((unsigned __int16)(v35 + v84) + 40 > WORD1(v39)) | ((v39 + 0x100000000) >> 56);
          if (v37)
            v42 = v35;
          else
            v42 = v39 + 0x100000000;
          if (v37)
          {
            v41 = HIBYTE(v35) | 1;
            v43 = v35 >> 16;
          }
          else
          {
            LODWORD(v43) = v40;
          }
          if (v37)
            v38 = v35;
        }
        while (__stxr(((_DWORD)v43 << 16) | v42 & 0xFFFFFF00000000 | (v41 << 56) | v38, v33));
        if (!v37)
        {
          __dst = (char *)v33 + (unsigned __int16)v43;
          v32 = (unsigned __int16)v35;
          if (!(_WORD)v35)
            goto LABEL_55;
          v60 = *(_QWORD *)(StatusReg - 8);
          v61 = (uint64_t)v33 + v32;
          *(_QWORD *)(v61 + 16) = (a3 - v33[1]) | ((_QWORD)v27 << 48);
          *(_QWORD *)(v61 + 8) = v60;
          if (v17)
          {
LABEL_89:
            *(_QWORD *)(v61 + 24) = v17;
            a3 = v61 + 32;
            if (!v23)
              goto LABEL_90;
            goto LABEL_91;
          }
LABEL_108:
          a3 = v61 + 24;
          if (!v23)
          {
LABEL_90:
            *(_QWORD *)a3 = v22;
            a3 += 8;
          }
LABEL_91:
          if (a6)
          {
            *(_DWORD *)a3 = (unsigned __int16)((_WORD)__dst - (v61 & 0xF000)) | ((unsigned __int16)a6 << 16);
            a3 += 4;
          }
          while (a5)
          {
            v62 = *(_QWORD *)(a4 + 8);
            memcpy((void *)a3, *(const void **)a4, v62);
            v63 = *(_QWORD *)(a4 + 8);
            v64 = (unint64_t)a5 >= v63;
            a5 -= v63;
            if (!v64)
            {
              qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid arguments";
              __break(1u);
LABEL_110:
              qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid arguments";
              __break(1u);
              goto LABEL_111;
            }
            a3 += v62;
            a4 += 16;
          }
          if (a6)
          {
            a5 = (char *)__dst;
            do
            {
              a3 = *(_QWORD *)(a4 + 8);
              memcpy(a5, *(const void **)a4, a3);
              a5 += a3;
              __dst = a5;
              v65 = *(_QWORD *)(a4 + 8);
              v64 = a6 >= v65;
              a6 -= v65;
              if (!v64)
                goto LABEL_110;
              a4 += 16;
            }
            while (a6);
          }
          v66 = (int *)_firehose_task_buffer;
          v59 = a2 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)v83 << 16);
          v67 = (unint64_t *)(v61 & 0xFFFFFFFFFFFFF000);
          atomic_store(v59, (unint64_t *)v61);
          do
            v68 = __ldxr(v67);
          while (__stxr(v68 - 0x100000000, v67));
          if ((v68 & 0x10000FF00000000) == 0x100000100000000)
            firehose_buffer_ring_enqueue_VARIANT_mp(v66, (((_DWORD)v67 - (_DWORD)v66) >> 12));
          return (unint64_t *)v59;
        }
        if ((v42 & 0xFF00000000) == 0)
        {
          v73 = a2;
          v74 = a3;
          v72 = v13;
          v77 = v17;
          v44 = v22;
          v79 = v23;
          v45 = StatusReg;
          v75 = v28;
          v46 = v29;
          firehose_buffer_ring_enqueue_VARIANT_mp((int *)v14, BYTE4(v30));
          v28 = v75;
          v29 = v46;
          StatusReg = v45;
          v23 = v79;
          v22 = v44;
          v17 = v77;
          v13 = v72;
          a2 = v73;
          a3 = v74;
        }
        LOBYTE(v32) = 0;
      }
LABEL_55:
      if (v28)
        break;
      if (!(_DWORD)v30)
        goto LABEL_63;
      v47 = 1;
LABEL_79:
      v54 = v47 | v30;
      v55 = v54 | ((unint64_t)v32 << 32) | v30 & 0xFFFFFF0000000000;
      if (v55 != v30)
      {
        while (1)
        {
          v56 = __ldxr((unint64_t *)v7);
          if (v56 != v30)
            break;
          if (!__stxr(v55, (unint64_t *)v7))
          {
            v57 = 1;
            goto LABEL_84;
          }
        }
        v57 = 0;
        __clrex();
LABEL_84:
        v30 = v56;
        if (!v57)
          continue;
      }
      v76 = v28;
      v70 = v29;
      v71 = StatusReg;
      v80 = v23;
      v78 = v17;
      v58 = v22;
      _dispatch_firehose_gate_wait_VARIANT_mp(v7, v54);
      v28 = v76;
      v29 = v70;
      StatusReg = v71;
      v23 = v80;
      v22 = v58;
      v17 = v78;
      v82 = 0;
      v30 = *(_QWORD *)v7;
    }
    if (((v30 >> 40) & 0x80) == 0 && (((v30 >> 40) & 0x40) == 0) | v82 & 1)
      break;
    v50 = (v30 >> 40) & 0x3F;
    if (v50 >= 0x3E)
      LODWORD(v50) = 62;
    v51 = ((((int)v50 + 1) | (v30 >> 40) & 0xC0) << 40) | ((unint64_t)v32 << 32) | v30 & 0xFFFF0000FFFFFFFFLL;
    while (1)
    {
      v52 = __ldxr((unint64_t *)v7);
      if (v52 != v30)
        break;
      if (!__stxr(v51, (unint64_t *)v7))
      {
        v53 = 1;
        goto LABEL_75;
      }
    }
    v53 = 0;
    __clrex();
LABEL_75:
    if ((v53 & 1) != 0)
      return 0;
    v30 = v52;
  }
  if ((_DWORD)v30)
  {
    v47 = 2;
    goto LABEL_79;
  }
LABEL_63:
  v48 = v30 & 0xFFFFFFFF00000000;
  v49 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL | ((unint64_t)v32 << 32) | v30 & 0xFFFFFF0000000000;
  do
  {
    v30 = __ldxr((unint64_t *)v7);
    if (v30 != v48)
    {
      __clrex();
      goto LABEL_32;
    }
  }
  while (__stxr(v49, (unint64_t *)v7));
  v81 = v23;
  v85 = v22;
  v7 = v17;
  v87 = a3;
  v88 = (unsigned __int16)v27;
  WORD1(v88) = a6;
  BYTE4(v88) = v13;
  BYTE6(v88) = ((2 * *(_BYTE *)(v14 + 1569)) | (4 * v28) | (((1 << v29) & 0x13) != 0)) ^ 4;
  v69 = firehose_buffer_tracepoint_reserve_slow_VARIANT_mp(v14, (unsigned __int8 *)&v87, &__dst);
  v59 = 0;
  if (v69)
  {
    v61 = v69;
    v17 = v7;
    v22 = v85;
    LOBYTE(v23) = v81;
    if (v7)
      goto LABEL_89;
    goto LABEL_108;
  }
  return (unint64_t *)v59;
}

unint64_t *voucher_activity_trace_v_VARIANT_mp(unint64_t *a1, unint64_t a2, size_t a3, uint64_t a4, char *a5, unint64_t a6)
{
  return voucher_activity_trace_v_2_VARIANT_mp(a1, a2, a3, a4, a5, a6, 0);
}

unint64_t *voucher_activity_trace_VARIANT_mp(unint64_t *a1, unint64_t a2, size_t a3, uint64_t a4, char *a5)
{
  _QWORD v6[2];

  v6[0] = a4;
  v6[1] = a5;
  return voucher_activity_trace_v_VARIANT_mp(a1, a2, a3, (uint64_t)v6, a5, 0);
}

size_t _voucher_debug_VARIANT_mp(uint64_t a1, char *__str, size_t __size)
{
  int v6;
  size_t v7;
  size_t v8;
  size_t v9;
  int v10;
  size_t v11;
  int v12;
  int v13;
  uint64_t v14;
  size_t v15;
  int v16;
  size_t v17;
  size_t v18;
  int v19;
  size_t v20;
  size_t v22;
  const char *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  int v27;
  size_t v28;
  size_t v29;
  size_t v30;
  size_t v31;
  size_t v32;
  int v33;
  size_t v34;

  v6 = snprintf(__str, __size, "voucher[%p] = { xref = %d, ref = %d", (const void *)a1, *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 8));
  v7 = v6;
  if (v6 >= __size)
    v7 = __size;
  if (v6 >= 0)
    v8 = v7;
  else
    v8 = 0;
  if (*(_QWORD *)(a1 + 40))
  {
    if (__size >= v8)
      v9 = __size - v8;
    else
      v9 = 0;
    v10 = snprintf(&__str[v8], v9, ", base voucher %p", *(const void **)(a1 + 40));
    v11 = v10;
    if (v9 < v10)
      v11 = v9;
    if (v10 < 0)
      v11 = 0;
    v8 += v11;
  }
  v12 = *(_DWORD *)(a1 + 32);
  if (v12)
  {
    if (__size >= v8)
      v22 = __size - v8;
    else
      v22 = 0;
    if (v12 == *(_DWORD *)(a1 + 36))
      v23 = " & ipc kvoucher";
    else
      v23 = (const char *)&unk_18A069831;
    snprintf(&__str[v8], v22, ", kvoucher%s 0x%x [\n", v23, v12);
    v24 = voucher_kvoucher_debug_VARIANT_mp(*MEMORY[0x1E0C883F0], *(unsigned int *)(a1 + 32));
    v25 = v24;
    if (__size >= v24)
      v26 = __size - v24;
    else
      v26 = 0;
    v27 = snprintf(&__str[v24], v26, "]");
    v28 = v27;
    if (v26 < v27)
      v28 = v26;
    if (v27 < 0)
      v28 = 0;
    v8 = v28 + v25;
  }
  v13 = *(_DWORD *)(a1 + 36);
  if (v13 && v13 != *(_DWORD *)(a1 + 32))
  {
    if (__size >= v8)
      v29 = __size - v8;
    else
      v29 = 0;
    snprintf(&__str[v8], v29, ", ipc kvoucher 0x%x [\n", *(_DWORD *)(a1 + 36));
    v30 = voucher_kvoucher_debug_VARIANT_mp(*MEMORY[0x1E0C883F0], *(unsigned int *)(a1 + 36));
    v31 = v30;
    if (__size >= v30)
      v32 = __size - v30;
    else
      v32 = 0;
    v33 = snprintf(&__str[v30], v32, "]");
    v34 = v33;
    if (v32 < v33)
      v34 = v32;
    if (v33 < 0)
      v34 = 0;
    v8 = v34 + v31;
  }
  v14 = *(_QWORD *)(a1 + 48);
  if (v14)
  {
    if (__size >= v8)
      v15 = __size - v8;
    else
      v15 = 0;
    v16 = snprintf(&__str[v8], v15, ", activity 0x%llx (pid: 0x%16llx, parent 0x%llx)", v14, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
    v17 = v16;
    if (v15 < v16)
      v17 = v15;
    if (v16 < 0)
      v17 = 0;
    v8 += v17;
  }
  if (__size >= v8)
    v18 = __size - v8;
  else
    v18 = 0;
  v19 = snprintf(&__str[v8], v18, " }");
  v20 = v19;
  if (v18 < v19)
    v20 = v18;
  if (v19 < 0)
    v20 = 0;
  return v20 + v8;
}

uint64_t voucher_mach_msg_fill_aux(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (!v2)
    return 0;
  v3 = 0;
  if (a2 >= 0x28)
  {
    v4 = *(_QWORD *)(v2 + 48);
    if (v4)
    {
      *(_OWORD *)a1 = xmmword_18A06E860;
      v5 = *(_OWORD *)(v2 + 56);
      *(_QWORD *)(a1 + 16) = v4;
      *(_OWORD *)(a1 + 24) = v5;
      return 40;
    }
  }
  return v3;
}

uint64_t _voucher_activity_id_allocate_slow()
{
  uint64_t result;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t activity_id;

  activity_id = 0;
  result = mach_generate_activity_id(*MEMORY[0x1E0C883F0], 1, &activity_id);
  if ((_DWORD)result)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Could not generate an activity ID";
    qword_1EDF52D38 = (int)result;
    __break(1u);
  }
  else
  {
    v1 = 16 * (activity_id & 0xFFFFFFFFFFFFFLL);
    if (!v1)
      v1 = 1;
    activity_id = v1;
    do
    {
      v2 = __ldxr((unint64_t *)&_voucher_aid_next);
      v3 = activity_id;
      if (v2)
        v4 = activity_id;
      else
        v4 = activity_id + 1;
    }
    while (__stxr(v4, (unint64_t *)&_voucher_aid_next));
    if (v2)
      return v2;
    else
      return v3;
  }
  return result;
}

uint64_t _firehose_task_buffer_init()
{
  pid_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C874D8];
  v8 = 0;
  v6 = 0u;
  v7 = 0u;
  v5 = 0u;
  v0 = getpid();
  result = proc_pidinfo(v0, 17, 1uLL, &v5, 56);
  if ((_DWORD)result != 56)
  {
    if (!(_DWORD)result)
    {
      v4 = **(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Unable to get the unique pid (error)";
      qword_1EDF52D38 = v4;
      __break(1u);
    }
    qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Unable to get the unique pid (size)";
    qword_1EDF52D38 = (int)result;
    __break(1u);
  }
  _voucher_unique_pid = v6;
  if (_voucher_libtrace_hooks)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(_voucher_libtrace_hooks + 8))(result, v2);
    if ((_DWORD)result)
    {
      result = firehose_buffer_create_VARIANT_mp(result, _voucher_unique_pid, _dispatch_memory_warn);
      _firehose_task_buffer = result;
      if (*(uint64_t *)_voucher_libtrace_hooks >= 4)
      {
        v3 = *(uint64_t (**)(uint64_t, uint64_t))(_voucher_libtrace_hooks + 32);
        if (v3)
          return v3(result + 2048, 2048);
      }
    }
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_1()
{
  uint64_t v0;
  uint64_t v1;

  return v0 + v1;
}

uint64_t OUTLINED_FUNCTION_3_2()
{
  uint64_t v0;
  uint64_t v1;

  return v0 + v1;
}

uint64_t OUTLINED_FUNCTION_4_1()
{
  uint64_t v0;
  uint64_t v1;

  return v0 + v1;
}

uint64_t OUTLINED_FUNCTION_6()
{
  uint64_t v0;
  uint64_t v1;

  return v0 + v1;
}

uint64_t OUTLINED_FUNCTION_7()
{
  uint64_t v0;
  uint64_t v1;

  return v0 + v1;
}

uint64_t OUTLINED_FUNCTION_8()
{
  uint64_t v0;
  uint64_t v1;

  return v0 + v1;
}

uint64_t OUTLINED_FUNCTION_9()
{
  uint64_t v0;
  uint64_t v1;

  return v0 + v1;
}

mach_vm_address_t firehose_buffer_create_VARIANT_mp(mach_port_name_t a1, uint64_t a2, uint64_t a3)
{
  ipc_space_t *v6;
  kern_return_t v7;
  mach_vm_address_t v8;
  kern_return_t v9;
  uint64_t i;
  kern_return_t v12;
  mach_vm_address_t address;
  mach_port_options_t options;
  mach_port_name_t name;

  address = *MEMORY[0x1E0C88820];
  if (0x4000 % address)
    firehose_buffer_create_VARIANT_mp_cold_4();
  v6 = (ipc_space_t *)MEMORY[0x1E0C883F0];
  v7 = mach_vm_map(*MEMORY[0x1E0C883F0], &address, 0x40000uLL, 0, 1308622851, 0, 0, 0, 3, 7, 2u);
  if (v7)
  {
    if (v7 != 3)
      _dispatch_bug(346, v7);
    v12 = mach_port_deallocate(*v6, a1);
    if (v12 == -301)
      _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
    if (v12)
      _dispatch_bug(91, v12);
    return 0;
  }
  else
  {
    v8 = address;
    *(_DWORD *)(address + 1548) = a1;
    *(_DWORD *)(v8 + 1544) = getpid();
    *(_QWORD *)(v8 + 1536) = a2;
    name = 0;
    *(_QWORD *)&options.flags = 0x500000033;
    options.8 = 0uLL;
    v9 = mach_port_construct(*v6, &options, v8, &name);
    if (v9)
    {
      if (v9 == -301)
        _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
      firehose_buffer_create_VARIANT_mp_cold_2(v9);
    }
    *(_DWORD *)(v8 + 1560) = name;
    *(_DWORD *)(v8 + 264) = 20180226;
    *(_QWORD *)(v8 + 512) = a3;
    for (i = 644; i != 1540; i += 128)
    {
      if (i != 1028)
        *(_BYTE *)(v8 + i) = -1;
    }
    firehose_buffer_update_limits_unlocked(v8);
    *(_QWORD *)(v8 + 520) = 31;
    *(_WORD *)v8 = 1;
    *(_WORD *)(v8 + 2) = 2;
    *(_WORD *)(v8 + 4) = 3;
    *(_WORD *)(v8 + 6) = 4;
    *(_QWORD *)(v8 + 464) = 4;
    *(_WORD *)(v8 + 320) = 4;
    *(_WORD *)(v8 + 256) = 0;
    *(_WORD *)(v8 + 258) = 4;
    *(_WORD *)(v8 + 260) = 0;
    *(_WORD *)(v8 + 262) = 0;
  }
  return v8;
}

uint64_t firehose_buffer_update_limits_unlocked(uint64_t result)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unint64_t *v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  __int16 v13;
  unsigned __int16 v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  __int16 v18;
  __int16 v19;
  unsigned int v20;
  unsigned __int16 v21;
  unsigned int v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v1 = 0;
  v2 = 0;
  v3 = 0;
  v4 = *(_QWORD *)(result + 512);
  v5 = (unsigned __int8 *)(result + 644);
  do
  {
    v7 = *v5;
    v5 += 128;
    v6 = v7;
    if (((1 << v3) & 0x13) != 0)
      v8 = v2;
    else
      v8 = v2 + 1;
    if (((1 << v3) & 0x13) != 0)
      v9 = v1 + 1;
    else
      v9 = v1;
    if (v6 != 255)
    {
      v2 = v8;
      v1 = v9;
    }
    ++v3;
  }
  while (v3 != 7);
  v10 = (unint64_t *)(result + 448);
  v11 = (2 * (v1 + v2)) | 1;
  if ((v4 & 2) != 0)
    v11 = 3 * v1 + 6 * v2 + 1;
  v12 = v1 + v2 + 3;
  v13 = v1 + 4 * v2;
  if ((v4 & 2) != 0)
    v14 = v13 + 1;
  else
    v14 = v12;
  if ((v4 & 1) == 0)
    v14 = v11;
  v15 = *MEMORY[0x1E0C88820];
  if ((*MEMORY[0x1E0C88820] & 0xFFFE000) != 0)
  {
    v16 = v15 >> 12;
    v17 = v14 % (unsigned __int16)(v15 >> 12);
    v18 = v16 - v17;
    if (v17)
      v19 = v18;
    else
      v19 = 0;
    v14 += v19;
  }
  if ((v4 & 1) != 0)
    v20 = 4;
  else
    v20 = 8;
  if (v20 <= v14)
    v20 = v14;
  v21 = v20 - 1;
  v22 = 2 * (unsigned __int16)v1;
  if ((3 * v20) >> 3 > v22)
    v22 = (3 * v20) >> 3;
  v23 = v20 + 1;
  v24 = *(_QWORD *)(result + 528);
  *(_WORD *)(result + 528) = v21;
  *(_WORD *)(result + 530) = v22;
  *(_BYTE *)(result + 532) = v23;
  *(_BYTE *)(result + 533) = 0;
  *(_WORD *)(result + 534) = 0;
  v25 = ((v22 << 16) | ((unint64_t)v23 << 32) | v21) - v24;
  if (v25)
  {
    do
      v26 = __ldxr(v10);
    while (__stxr(v26 + v25, v10));
  }
  return result;
}

mach_vm_address_t firehose_buffer_get_logging_prefs_VARIANT_mp(uint64_t a1, mach_vm_size_t *a2)
{
  int v3;
  int logging_prefs;
  ipc_space_t *v5;
  kern_return_t v6;
  kern_return_t v7;
  mach_vm_address_t result;
  mach_vm_address_t address;
  mach_vm_size_t size;
  mach_port_name_t v11;

  v3 = *(_DWORD *)(a1 + 1548);
  v11 = 0;
  address = 0;
  size = 0;
  if ((v3 + 1) <= 1)
  {
LABEL_16:
    result = 0;
    *a2 = 0;
    return result;
  }
  logging_prefs = firehose_send_get_logging_prefs(v3, &v11, &size);
  if (logging_prefs)
  {
    if (logging_prefs != 268435459)
    {
      if (logging_prefs == -301)
        _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
      _dispatch_bug(601, logging_prefs);
    }
    goto LABEL_16;
  }
  v5 = (ipc_space_t *)MEMORY[0x1E0C883F0];
  v6 = mach_vm_map(*MEMORY[0x1E0C883F0], &address, size, 0, 1, v11, 0, 0, 1, 1, 2u);
  if (v6 == -301)
    _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
  if (v6)
  {
    _dispatch_bug(612, v6);
    address = 0;
    size = 0;
  }
  v7 = mach_port_deallocate(*v5, v11);
  if (v7 == -301)
    _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
  if (v7)
    _dispatch_bug(618, v7);
  result = address;
  *a2 = size;
  return result;
}

BOOL firehose_buffer_should_send_strings_VARIANT_mp(int *guard)
{
  int v1;
  int v3;
  int v5;
  int should_send_strings;
  int v7;

  v1 = guard[388];
  v7 = 0;
  if (v1 == -1)
    return 0;
  if (!v1)
  {
LABEL_10:
    v5 = firehose_client_reconnect(guard, v1, 0);
    if ((v5 - 1) <= 0xFFFFFFFD)
    {
      should_send_strings = firehose_send_should_send_strings(v5, &v7);
      if (!should_send_strings)
        return v7 != 0;
      if (should_send_strings != 268435459)
      {
        if (should_send_strings == -301)
          _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
        _dispatch_bug(654, should_send_strings);
      }
    }
    return 0;
  }
  v3 = firehose_send_should_send_strings(v1, &v7);
  if (v3)
  {
    if (v3 != 268435459)
    {
      if (v3 == -301)
        _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
      _dispatch_bug(642, v3);
    }
    goto LABEL_10;
  }
  return v7 != 0;
}

uint64_t firehose_client_reconnect(int *guard, int a2, unsigned int a3)
{
  unsigned int *v6;
  unint64_t StatusReg;
  unsigned int v8;
  uint64_t v10;
  ipc_space_t *v12;
  uint64_t v13;
  char v14;
  char v15;
  int *v16;
  mach_port_name_t v17;
  kern_return_t v18;
  kern_return_t memory_entry_64;
  uint64_t (*v20)(int **, memory_object_size_t *);
  int v21;
  memory_object_size_t v22;
  BOOL v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  char v27;
  kern_return_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  kern_return_t v35;
  kern_return_t v36;
  uint64_t v37;
  char v38;
  char v39;
  mach_port_name_t v40;
  kern_return_t v41;
  kern_return_t v42;
  kern_return_t v43;
  int *v44;
  memory_object_size_t size;
  mach_port_t object_handle[2];
  mach_port_options_t options;
  mach_port_name_t name;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C874D8];
  *(_QWORD *)object_handle = 0;
  v6 = (unsigned int *)(guard + 391);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v8 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v6))
  {
    if (!__stxr(v8, v6))
      goto LABEL_6;
  }
  __clrex();
  _dispatch_unfair_lock_lock_slow_VARIANT_mp((uint64_t)(guard + 391));
LABEL_6:
  v10 = guard[a3 + 388];
  if ((_DWORD)v10 == a2 && (_DWORD)v10 != -1)
  {
    v12 = (ipc_space_t *)MEMORY[0x1E0C883F0];
    if (a2)
    {
      v13 = 0;
      v14 = 1;
      do
      {
        v15 = v14;
        v16 = &guard[v13];
        v17 = v16[388];
        if (mach_port_destruct(*v12, v17, 0, (mach_port_context_t)guard) == -301)
          _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
        v18 = mach_port_deallocate(*v12, v17);
        if (v18 == -301)
          _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
        if (v18)
          _dispatch_bug(91, v18);
        v14 = 0;
        v16[388] = 0;
        v13 = 1;
      }
      while ((v15 & 1) != 0);
    }
    v44 = guard;
    size = 0x40000;
    memory_entry_64 = mach_make_memory_entry_64(*v12, &size, (memory_object_offset_t)guard, 4194305, &object_handle[1], 0);
    if (!(size >> 18))
      firehose_client_reconnect_cold_1(size);
    if (memory_entry_64)
      firehose_client_reconnect_cold_9(memory_entry_64);
    if (a2
      && (v20 = *(uint64_t (**)(int **, memory_object_size_t *))(_voucher_libtrace_hooks + 24)) != 0
      && ((v21 = v20(&v44, &size), v22 = size, !v21) ? (v23 = v44 == 0) : (v23 = 1),
          !v23 ? (v24 = size == 0) : (v24 = 1),
          !v24))
    {
      v35 = mach_make_memory_entry_64(*v12, &size, (memory_object_offset_t)v44, 4194305, object_handle, 0);
      if (v35)
        firehose_client_reconnect_cold_9(v35);
      v36 = mach_vm_deallocate(*v12, (mach_vm_address_t)v44, size);
      if (v36)
        _dispatch_bug(209, v36);
    }
    else
    {
      v22 = 0;
    }
    v25 = 0;
    v26 = 1;
    do
    {
      v27 = v26;
      name = 0;
      *(_QWORD *)&options.flags = 0x100000017;
      options.8 = 0uLL;
      v28 = mach_port_construct(*v12, &options, (mach_port_context_t)guard, &name);
      if (v28)
      {
        if (v28 == -301)
          _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
        firehose_buffer_create_VARIANT_mp_cold_2(v28);
      }
      v26 = 0;
      *(&v49 + v25) = name;
      v25 = 1;
    }
    while ((v27 & 1) != 0);
    v10 = *(&v49 + a3);
    v29 = v49;
    v30 = v50;
    v31 = firehose_send_register(guard[387], object_handle[1], 0x40000, v49, v50, guard[390], object_handle[0], v22);
    if (v31)
    {
      if (v31 != 268435459)
        firehose_client_reconnect_cold_3(v31);
      v37 = 0;
      v38 = 1;
      do
      {
        v39 = v38;
        v40 = *(&v49 + v37);
        if (mach_port_destruct(*v12, v40, 0, (mach_port_context_t)guard) == -301)
          _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
        v41 = mach_port_deallocate(*v12, v40);
        if (v41 == -301)
          _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
        if (v41)
          _dispatch_bug(91, v41);
        v38 = 0;
        guard[v37 + 388] = -1;
        v37 = 1;
      }
      while ((v39 & 1) != 0);
      v42 = mach_port_deallocate(*v12, object_handle[1]);
      if (v42 == -301)
        _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
      if (v42)
        _dispatch_bug(91, v42);
      if (object_handle[0])
      {
        v43 = mach_port_deallocate(*v12, object_handle[0]);
        if (v43 == -301)
          _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
        if (v43)
          _dispatch_bug(91, v43);
      }
      v10 = 0xFFFFFFFFLL;
    }
    else
    {
      guard[388] = v29;
      guard[389] = v30;
    }
  }
  v32 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    v33 = __ldxr(v6);
  while (__stlxr(0, v6));
  if (v33 != v32)
    _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)v6, v33);
  return v10;
}

void firehose_client_push_reply_VARIANT_mp(uint64_t a1, int a2)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: firehose_push_reply should never be sent to the buffer receive port";
  qword_1EDF52D38 = a2;
  __break(1u);
}

uint64_t firehose_client_push_notify_async_VARIANT_mp(uint64_t a1, unint64_t a2, unint64_t a3, int a4)
{
  unint64_t v4;

  v4 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 184;
  do
    v4 = *(_QWORD *)v4;
  while (v4 && *(char **)(v4 + 8) != "firehose");
  firehose_client_merge_updates(*(_QWORD *)(v4 + 16), 1, a2, a3, a4 != 0, 0);
  return 0;
}

uint64_t firehose_client_merge_updates(uint64_t result, int a2, unint64_t a3, unint64_t a4, int a5, unint64_t *a6)
{
  unsigned __int8 *v6;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned __int16 v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  if (a5 && !*(_BYTE *)(result + 1568))
  {
    v6 = (unsigned __int8 *)(result + 1568);
    while (!__ldxr(v6))
    {
      if (!__stxr(1u, v6))
        goto LABEL_8;
    }
    __clrex();
  }
LABEL_8:
  v8 = (unint64_t *)(result + 448);
  v9 = (unint64_t *)(result + 464);
  while (1)
  {
    v10 = __ldxr(v9);
    if (a3 <= v10)
      break;
    if (!__stxr(a3, v9))
      goto LABEL_11;
  }
  __clrex();
LABEL_11:
  if (a3 <= v10)
    v11 = 0;
  else
    v11 = a3 - v10;
  v12 = (unint64_t *)(result + 488);
  while (1)
  {
    v13 = __ldxr(v12);
    if (a4 <= v13)
      break;
    if (!__stxr(a4, v12))
      goto LABEL_17;
  }
  __clrex();
LABEL_17:
  if (a4 <= v13)
    v14 = 0;
  else
    v14 = a4 - v13;
  if (v11 | (unsigned __int16)v14)
  {
    v15 = (unint64_t *)(result + 256);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 & 0xFFFF00000000 | ((unint64_t)(v14 + HIWORD(v16)) << 48) | ((unint64_t)(unsigned __int16)(v11 + WORD1(v16)) << 16) | (unsigned __int16)v16, v15));
    v17 = v11 | ((unint64_t)(unsigned __int16)v14 << 16);
    do
      v18 = __ldxr(v8);
    while (__stlxr(v18 + v17, v8));
    if (a6)
      *a6 = v18 + v17;
    if (a2)
    {
      if ((_WORD)v14)
      {
        v19 = (unint64_t *)(result + 496);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      if (v11)
      {
        v21 = (unint64_t *)(result + 472);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
    }
  }
  else if (a6)
  {
    *a6 = *v8;
  }
  return result;
}

uint64_t firehose_buffer_update_limits_VARIANT_mp(uint64_t a1)
{
  unsigned int *v2;
  unint64_t StatusReg;
  unsigned int v4;
  uint64_t result;
  unsigned int v7;
  unsigned int v8;

  v2 = (unsigned int *)(a1 + 536);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v4 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v2))
  {
    if (!__stxr(v4, v2))
      goto LABEL_6;
  }
  __clrex();
  _dispatch_unfair_lock_lock_slow_VARIANT_mp(a1 + 536);
LABEL_6:
  result = firehose_buffer_update_limits_unlocked(a1);
  v7 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    v8 = __ldxr(v2);
  while (__stlxr(0, v2));
  if (v8 != v7)
    return _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)v2, v8);
  return result;
}

void firehose_buffer_ring_enqueue_VARIANT_mp(int *guard, unsigned int a2)
{
  unint64_t v3;
  int *v4;
  unsigned __int16 *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t StatusReg;
  uint64_t v9;
  int v10;
  unsigned __int16 *v11;
  unsigned __int16 v12;
  int v13;
  int v14;
  mach_port_context_t v15;
  int v16;
  int v17;
  mach_port_t v18;
  int v19;
  uint64_t v21;
  int v22;
  int *v23;
  unsigned __int16 *v24;
  int v25;
  unsigned __int16 *v26;
  unint64_t v27;
  unsigned int v28;

  v3 = HIBYTE(guard[1024 * (unint64_t)a2 + 1]) & 2;
  v4 = guard + 32;
  v5 = (unsigned __int16 *)(guard + 96);
  if ((guard[1024 * (unint64_t)a2 + 1] & 0x2000000) != 0)
    v6 = 96;
  else
    v6 = 80;
  if ((guard[1024 * (unint64_t)a2 + 1] & 0x2000000) == 0)
  {
    v5 = (unsigned __int16 *)(guard + 80);
    v4 = guard;
  }
  v7 = LOWORD(guard[v6]);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_7:
  v9 = v7;
  v10 = v7 & 0xFFFFFFC0;
  *(_QWORD *)(StatusReg + 976) = v5;
  v11 = (unsigned __int16 *)v4 + (v7 & 0x3F);
  v12 = v7 & 0xFFC0 | a2;
  do
  {
    v13 = __ldxr(v11);
    if (v13 != (unsigned __int16)v10)
    {
      __clrex();
      *(_QWORD *)(StatusReg + 976) = 0;
      v7 = LOWORD(guard[v6]);
      if ((_DWORD)v7 == (unsigned __int16)v9)
      {
        v14 = -1024;
        while (*v11 != (unsigned __int16)v10)
        {
          if (v14 < 0)
          {
            __yield();
          }
          else
          {
            v28 = a2;
            v23 = v4;
            v24 = v5;
            v26 = v11;
            v27 = StatusReg;
            v22 = v10;
            v21 = v9;
            v25 = v14;
            _pthread_yield_to_enqueuer_4dispatch();
            v14 = v25;
            v9 = v21;
            v11 = v26;
            StatusReg = v27;
            v10 = v22;
            v4 = v23;
            v5 = v24;
            a2 = v28;
          }
          v7 = LOWORD(guard[v6]);
          ++v14;
          if ((_DWORD)v7 != (unsigned __int16)v9)
            goto LABEL_7;
        }
        v7 = v9;
      }
      goto LABEL_7;
    }
  }
  while (__stxr(v12, v11));
  do
  {
    v7 = __ldxr(v5);
    if ((_DWORD)v7 != (unsigned __int16)v9)
    {
      __clrex();
      *v11 = v10;
      *(_QWORD *)(StatusReg + 976) = 0;
      goto LABEL_7;
    }
  }
  while (__stlxr(v9 + 1, v5));
  *(_QWORD *)(StatusReg + 976) = 0;
  v15 = (mach_port_context_t)guard + 2 * v3;
  v16 = *(_DWORD *)(v15 + 1552);
  if (v16 == -1)
    return;
  if (v16)
  {
    v17 = firehose_send_push_async(*(_DWORD *)(v15 + 1552), 0, 0);
    if (v17 <= 268435458)
    {
      if (!v17)
        return;
      if (v17 == -301)
      {
        qword_1EDF52D08 = (uint64_t)"MIG_REPLY_MISMATCH";
        qword_1EDF52D38 = -301;
        __break(1u);
LABEL_42:
        qword_1EDF52D08 = (uint64_t)"MIG_REPLY_MISMATCH";
        qword_1EDF52D38 = -301;
        __break(1u);
        return;
      }
      goto LABEL_31;
    }
    if (v17 != 268435459)
    {
      if (v17 == 268435460)
        return;
LABEL_31:
      _dispatch_bug(476, v17);
    }
  }
  v18 = firehose_client_reconnect(guard, v16, v3 >> 1);
  if (v18 - 1 <= 0xFFFFFFFD)
  {
    v19 = firehose_send_push_async(v18, 0, 0);
    if ((v19 - 268435459) >= 2 && v19 != 0)
    {
      if (v19 != -301)
      {
        _dispatch_bug(488, v19);
        return;
      }
      goto LABEL_42;
    }
  }
}

int *firehose_buffer_force_connect_VARIANT_mp(int *result)
{
  if (!result[388])
    return (int *)firehose_client_reconnect(result, 0, 0);
  return result;
}

uint64_t firehose_buffer_tracepoint_reserve_slow_VARIANT_mp(uint64_t a1, unsigned __int8 *a2, _QWORD *a3)
{
  unsigned __int8 *v4;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unsigned int *v16;
  unint64_t v17;
  unint64_t StatusReg;
  unint64_t v19;
  unint64_t v20;
  unsigned __int16 v21;
  unint64_t v22;
  unsigned __int8 *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  __int16 v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int v35;
  unsigned int *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int *v52;
  char v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  unsigned int *v69;
  unsigned int *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  unint64_t v79;

  v4 = a2;
  v6 = a2[14] & 1;
  v7 = (unint64_t *)(a1 + 448);
  firehose_drain_notifications_once(a1);
  v8 = *(_QWORD *)(a1 + 448);
  v79 = v8;
  do
  {
    if (!*(_WORD *)((unint64_t)&v79 | (2 * v6)))
    {
      v30 = 0;
      v50 = 0;
      if ((v4[14] & 4) == 0)
        return firehose_buffer_stream_chunk_install(a1, (uint64_t)v4, a3, v30);
      goto LABEL_65;
    }
    v78 = v8;
    --*(_WORD *)((unint64_t)&v78 | (2 * v6));
    v9 = v78;
    while (1)
    {
      v10 = __ldaxr(v7);
      if (v10 != v8)
        break;
      if (!__stxr(v9, v7))
      {
        v11 = 1;
        goto LABEL_8;
      }
    }
    v11 = 0;
    __clrex();
LABEL_8:
    v79 = v10;
    v8 = v10;
  }
  while (!v11);
  v77 = v6;
  v12 = v78;
  v13 = (unint64_t *)(a1 + 256);
  v14 = a1 + 128;
  v15 = (unint64_t *)(a1 + 456);
  v16 = (unsigned int *)(a1 + 536);
  v17 = HIDWORD(v78);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    v19 = __ldxr(v13);
    v20 = HIDWORD(v19);
    if ((unsigned __int16)v19 != WORD1(v19))
    {
      v21 = v19 + 1;
      v22 = HIDWORD(v19);
      goto LABEL_12;
    }
    if (HIWORD(v19) == WORD2(v19))
      break;
    LOWORD(v22) = WORD2(v19) + 1;
    v21 = v19;
LABEL_12:
    if (!__stxr(v19 & 0xFFFF0000FFFF0000 | ((unint64_t)(unsigned __int16)v22 << 32) | v21, v13))
    {
      v23 = v4;
      v24 = a3;
      if ((unsigned __int16)v22 == WORD2(v19))
      {
        v25 = a1;
      }
      else
      {
        v19 >>= 32;
        v25 = v14;
      }
      v26 = v19 & 0x3F;
      v27 = *(_WORD *)(v25 + 2 * v26);
      v28 = v27 & 0x3F;
      if ((v27 & 0x3F) == 0)
      {
        v35 = -1024;
        do
        {
          if (v35 < 0)
          {
            __yield();
          }
          else
          {
            v69 = v16;
            v71 = StatusReg;
            v67 = v14;
            v68 = v12;
            v74 = v17;
            v66 = v35;
            MEMORY[0x18D767268](0, 4, (v35 + 1));
            v35 = v66;
            StatusReg = v71;
            v17 = v74;
            v14 = v67;
            v12 = v68;
            v16 = v69;
          }
          v27 = *(_WORD *)(v25 + 2 * v26);
          ++v35;
          v28 = v27 & 0x3F;
        }
        while ((v27 & 0x3F) == 0);
      }
      v29 = (unsigned __int16)v22;
      v30 = v28;
      v31 = a1 + ((unint64_t)v28 << 12);
      if (v29 == (unsigned __int16)v20 && *(_BYTE *)(v31 + 6) == 3)
      {
        do
          v32 = __ldxr(v15);
        while (__stxr(v32 & ~(1 << v30), v15));
      }
      *(_QWORD *)v31 = 0x100000000000000;
      *(_WORD *)(v25 + 2 * v26) = (v27 & 0xFFC0) + 64;
      a3 = v24;
      v4 = v23;
      if (v30 < v17)
        return firehose_buffer_stream_chunk_install(a1, (uint64_t)v4, a3, v30);
      v33 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
      while (!__ldaxr(v16))
      {
        if (!__stxr(v33, v16))
          goto LABEL_34;
      }
      __clrex();
      v36 = v16;
      v37 = v12;
      v38 = v14;
      v72 = StatusReg;
      v75 = v17;
      _dispatch_unfair_lock_lock_slow_VARIANT_mp((uint64_t)v16);
      StatusReg = v72;
      v17 = v75;
      v14 = v38;
      v12 = v37;
      v16 = v36;
LABEL_34:
      if (*(unsigned __int8 *)(a1 + 532) <= v30)
      {
        v39 = *(_QWORD *)(a1 + 520) & ~(1 << v30);
        *(_QWORD *)(a1 + 520) = v39;
        v40 = v30 & 0x3C;
        if (((v39 >> (v30 & 0x3C)) & 0xF) == 0)
        {
          v70 = v16;
          v41 = StatusReg;
          v42 = v12;
          v43 = v14;
          v44 = v17;
          madvise((void *)(a1 + (v40 << 12)), 0x4000uLL, 5);
          StatusReg = v41;
          v17 = v44;
          v14 = v43;
          v12 = v42;
          v16 = v70;
        }
        v30 = 0;
      }
      v45 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
      do
        v46 = __ldxr(v16);
      while (__stlxr(0, v16));
      if (v46 != v45)
      {
        v47 = v16;
        v48 = v12;
        v49 = v14;
        v73 = StatusReg;
        v76 = v17;
        _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)v16, v46);
        StatusReg = v73;
        v17 = v76;
        v14 = v49;
        v12 = v48;
        v16 = v47;
      }
      if (v30)
        return firehose_buffer_stream_chunk_install(a1, (uint64_t)v4, a3, v30);
    }
  }
  v52 = v16;
  __clrex();
  v53 = BYTE4(v12);
  v54 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v55 = *(_DWORD *)(v54 + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v16))
  {
    if (!__stxr(v55, v16))
      goto LABEL_51;
  }
  __clrex();
  _dispatch_unfair_lock_lock_slow_VARIANT_mp((uint64_t)v16);
LABEL_51:
  v57 = *(_QWORD *)(a1 + 520);
  v58 = v57 | (-1 << v53);
  if (v58 == -1)
  {
    v30 = 0;
  }
  else
  {
    v30 = __clz(__rbit64(~v58));
    *(_QWORD *)(a1 + 520) = v57 | (1 << v30);
  }
  v59 = *(_DWORD *)(v54 + 24) & 0xFFFFFFFC;
  do
    v60 = __ldxr(v52);
  while (__stlxr(0, v52));
  if (v60 != v59)
    _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)v52, v60);
  if (v30)
    return firehose_buffer_stream_chunk_install(a1, (uint64_t)v4, a3, v30);
  if ((v4[14] & 4) == 0)
  {
    v61 = 0x10000;
    if (!v77)
      v61 = 1;
    do
    {
      v30 = 0;
      v62 = __ldxr(v7);
    }
    while (__stxr(v62 + v61, v7));
    return firehose_buffer_stream_chunk_install(a1, (uint64_t)v4, a3, v30);
  }
  v50 = 1;
LABEL_65:
  v63 = a1 + ((unint64_t)v4[12] << 7);
  v64 = (unint64_t *)(v63 + 640);
  if ((*(_QWORD *)(v63 + 640) & 0x400000000000) != 0)
  {
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 & 0xFFFF3FFFFFFFFFFDLL | 0xC00000000000, v64));
  }
  else
  {
    *(_QWORD *)(v63 + 648) = mach_continuous_time();
    do
      v65 = __ldxr(v64);
    while (__stlxr(v65 & 0xFFFF3FFFFFFFFFFDLL | 0xC00000000000, v64));
  }
  if ((v65 & 2) != 0)
    _dispatch_gate_broadcast_slow_VARIANT_mp(v63 + 640, v65);
  v4[13] = v50;
  return firehose_buffer_tracepoint_reserve_wait_for_chunks_from_logd(a1, (uint64_t)v4, a3);
}

BOOL firehose_drain_notifications_once(uint64_t a1)
{
  mach_msg_return_t v2;
  mach_msg_return_t v3;
  unint64_t StatusReg;
  char v5;
  int v6;
  _QWORD v8[3];
  _BYTE msg[124];
  _DWORD v10[8];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C874D8];
  memset(msg, 0, sizeof(msg));
  v2 = mach_msg((mach_msg_header_t *)msg, 67109126, 0, 0x7Cu, *(_DWORD *)(a1 + 1560), 0, 0);
  v3 = v2;
  if (v2)
  {
    if (v2 != 268451843)
      firehose_drain_notifications_once_cold_2(v2);
  }
  else
  {
    v8[1] = "firehose";
    v8[2] = a1;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v8[0] = *(_QWORD *)(StatusReg + 184);
    *(_QWORD *)(StatusReg + 184) = v8;
    v5 = msg[0];
    memset(v10, 0, sizeof(v10));
    v11 = 0;
    if (!firehoseReply_server(msg, (uint64_t)v10))
      goto LABEL_12;
    if (v10[0] >= 0)
      v6 = v11;
    else
      v6 = 0;
    if (!v6 && (v5 & 0x1F) == 0x12)
      firehose_drain_notifications_once_cold_1((uint64_t)v10);
    if (v6 != -305 && v6)
    {
LABEL_12:
      *(_DWORD *)&msg[8] = 0;
      mach_msg_destroy((mach_msg_header_t *)msg);
    }
    *(_QWORD *)(StatusReg + 184) = v8[0];
  }
  return v3 == 0;
}

unint64_t firehose_buffer_stream_chunk_install(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int a4)
{
  uint64_t v5;
  unint64_t *v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int16 v18;
  __int16 v19;
  unsigned __int16 v20;
  unint64_t v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int16 v32;
  __int16 v33;
  unsigned __int16 v34;
  uint64_t v35;
  unsigned __int8 *v36;
  int v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  char v42;

  v5 = *(unsigned __int8 *)(a2 + 12);
  v6 = (unint64_t *)(a1 + (v5 << 7) + 640);
  if (a4)
  {
    v9 = a4;
    v10 = a1 + ((unint64_t)a4 << 12);
    if (*(_QWORD *)v10)
      bzero((void *)(v10 + 16), 0xFF0uLL);
    if (*(_BYTE *)(a2 + 12) == 3)
    {
      v11 = (unint64_t *)(a1 + 456);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 | (1 << v9), v11));
    }
    v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) - 8);
    v14 = v9 << 32;
    if ((*v6 & 0x3F0000000000) == 0)
    {
      if (*(_QWORD *)a2 >= 0x1000000000uLL)
        v15 = *(_QWORD *)a2 - 0x1000000000;
      else
        v15 = 0;
      *(_QWORD *)(v10 + 8) = v15;
      v16 = v10 + 16;
      v17 = *(unsigned __int16 *)(a2 + 8);
      v18 = v17 + 24;
      if ((v17 & 7) != 0)
        v18 = (v17 & 0xFFF8) + 32;
      v19 = v18 + 16;
      v20 = 4096 - *(_WORD *)(a2 + 10);
      *(_QWORD *)(v10 + 32) = (*(_QWORD *)a2 - v15) | (v17 << 48);
      *(_QWORD *)(v10 + 24) = v13;
      v41 = *(_BYTE *)(a2 + 12);
      v39 = 2 * (*(_BYTE *)(a2 + 14) & 3);
      *(_WORD *)v10 = v19;
      *(_WORD *)(v10 + 2) = v20;
      *(_BYTE *)(v10 + 4) = 1;
      *(_BYTE *)(v10 + 5) = 0;
      *(_BYTE *)(v10 + 6) = v41;
      *(_BYTE *)(v10 + 7) = v39;
      if (a3)
        *a3 = v10 + v20;
      while (1)
      {
        v21 = __ldxr(v6);
        if ((v21 & 0x3F0000000000) != 0)
          break;
        if (!__stlxr((v21 & 0xFFFF000000000000 | v14) + 0x1000000000000, v6))
          goto LABEL_17;
      }
      __clrex();
    }
    atomic_load(v6);
    v23 = a1 + (v5 << 7);
    v24 = *(_QWORD *)(v23 + 648);
    *(_QWORD *)(v23 + 648) = 0;
    v25 = mach_continuous_time();
    v26 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 >= v24)
      v26 = v24;
    v27 = v26 >= 0x1000000000;
    v28 = v26 - 0x1000000000;
    if (!v27)
      v28 = 0;
    *(_QWORD *)(v10 + 8) = v28;
    v29 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 - v28) >> 48)
    {
      v28 = v29 - 0x1000000000;
      *(_QWORD *)(v10 + 8) = v29 - 0x1000000000;
    }
    v30 = v24 - v28;
    if ((v24 - v28) >> 48)
      v30 = *(_QWORD *)a2 - v28;
    *(_QWORD *)(v10 + 32) = v30 | 0x18000000000000;
    *(_QWORD *)(v10 + 24) = v13;
    v16 = v10 + 64;
    v31 = *(unsigned __int16 *)(a2 + 8);
    v32 = v31 + 24;
    if ((v31 & 7) != 0)
      v32 = (v31 & 0xFFF8) + 32;
    v33 = v32 + 64;
    v34 = 4096 - *(_WORD *)(a2 + 10);
    *(_QWORD *)(v10 + 80) = (*(_QWORD *)a2 - v28) | (v31 << 48);
    *(_QWORD *)(v10 + 72) = v13;
    v42 = *(_BYTE *)(a2 + 12);
    v40 = 2 * (*(_BYTE *)(a2 + 14) & 3);
    *(_WORD *)v10 = v33;
    *(_WORD *)(v10 + 2) = v34;
    *(_BYTE *)(v10 + 4) = 1;
    *(_BYTE *)(v10 + 5) = 0;
    *(_BYTE *)(v10 + 6) = v42;
    *(_BYTE *)(v10 + 7) = v40;
    if (a3)
      *a3 = v10 + v34;
    do
      v21 = __ldxr(v6);
    while (__stlxr((v21 & 0xFFFF000000000000 | v14) + 0x1000000000000, v6));
    *(_QWORD *)(v10 + 40) = v24;
    *(_QWORD *)(v10 + 48) = v25;
    *(_QWORD *)(v10 + 56) = (v21 >> 40) & 0x3F;
    atomic_store(((unint64_t)*(unsigned __int8 *)(a2 + 12) << 32) | 7, (unint64_t *)(v10 + 16));
  }
  else if ((*v6 & 0x400000000000) != 0)
  {
    do
    {
      v16 = 0;
      v21 = __ldxr(v6);
      v38 = (v21 >> 40) & 0x3F;
      if (v38 >= 0x3E)
        LODWORD(v38) = 62;
    }
    while (__stxr(v21 & 0xFFFF000000000000 | ((unint64_t)(((_DWORD)v38 + 1) | 0x40u) << 40), v6));
  }
  else
  {
    *(_QWORD *)(a1 + (v5 << 7) + 648) = mach_continuous_time();
    do
    {
      v16 = 0;
      v21 = __ldxr(v6);
      v35 = (v21 >> 40) & 0x3F;
      if (v35 >= 0x3E)
        LODWORD(v35) = 62;
    }
    while (__stlxr(v21 & 0xFFFF000000000000 | ((unint64_t)(((_DWORD)v35 + 1) | 0x40u) << 40), v6));
  }
LABEL_17:
  if ((v21 & 3) != 0)
    _dispatch_gate_broadcast_slow_VARIANT_mp((uint64_t)v6, v21);
  if ((~v21 & 0xFF00000000) == 0)
    firehose_buffer_update_limits_VARIANT_mp(a1);
  if (*(_BYTE *)(a1 + 1568) == 1)
  {
    v36 = (unsigned __int8 *)(a1 + 1568);
    while (1)
    {
      v37 = __ldxr(v36);
      if (v37 != 1)
        break;
      if (!__stxr(2u, v36))
      {
        firehose_client_start_quarantine(a1);
        return v16;
      }
    }
    __clrex();
  }
  return v16;
}

uint64_t firehose_buffer_tracepoint_reserve_wait_for_chunks_from_logd(uint64_t guard, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  int v7;
  BOOL v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unsigned int *v12;
  uint64_t v13;
  mach_port_context_t v14;
  unint64_t StatusReg;
  unint64_t v16;
  unint64_t v17;
  unsigned __int16 v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int16 v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v30;
  unsigned int *v31;
  uint64_t v32;
  mach_port_context_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  mach_port_context_t v38;
  unint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int *v43;
  unint64_t v44;
  unsigned int v45;
  unsigned int *v47;
  uint64_t v48;
  mach_port_context_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t result;
  _DWORD *v54;
  _WORD *v55;
  uint64_t v56;
  _WORD *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  int v62;
  uint64_t v63;
  unsigned int *v64;
  mach_port_context_t v65;
  _DWORD *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;

  v5 = *(_BYTE *)(a2 + 14) & 1;
  v6 = (unint64_t *)(guard + 448);
  v7 = -6;
  do
    v8 = __CFADD__(v7++, 1);
  while (!v8 && firehose_drain_notifications_once(guard));
  v72 = 0;
  if (*(_BYTE *)(a2 + 13))
  {
    LOBYTE(v9) = *(_BYTE *)(guard + 452);
  }
  else
  {
    v72 = *(_QWORD *)(guard + 448);
    v54 = (_DWORD *)(guard + 4 * v5 + 1552);
    v55 = (_WORD *)((unint64_t)&v74 | (2 * v5));
    v56 = v5;
    v57 = (_WORD *)((unint64_t)&v73 | (2 * v5));
LABEL_62:
    v58 = v72;
    v74 = v72;
    do
    {
      if (!*v55)
      {
        if ((*(_BYTE *)(a2 + 14) & 2) != 0)
          __FIREHOSE_CLIENT_THROTTLED_DUE_TO_HEAVY_LOGGING__(guard, v56, &v72);
        else
          firehose_client_send_push_and_wait(guard, v56, &v72);
        result = 0;
        if (*v54 == -1)
          return result;
        goto LABEL_62;
      }
      v73 = v58;
      --*v57;
      v59 = v73;
      while (1)
      {
        v60 = __ldaxr(v6);
        if (v60 != v58)
          break;
        if (!__stxr(v59, v6))
        {
          v61 = 1;
          goto LABEL_69;
        }
      }
      v61 = 0;
      __clrex();
LABEL_69:
      v74 = v60;
      v58 = v60;
    }
    while ((v61 & 1) == 0);
    v72 = v73;
    v9 = HIDWORD(v73);
    v5 = v56;
  }
  v10 = (unint64_t *)(guard + 256);
  v11 = (unint64_t *)(guard + 456);
  v12 = (unsigned int *)(guard + 536);
  v13 = -1 << v9;
  v70 = v5;
  v14 = guard + 4 * v5 + 1552;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    while (1)
    {
      v16 = __ldxr(v10);
      v17 = HIDWORD(v16);
      if ((unsigned __int16)v16 != WORD1(v16))
      {
        v18 = v16 + 1;
        v19 = HIDWORD(v16);
        goto LABEL_9;
      }
      if (HIWORD(v16) == WORD2(v16))
        break;
      LOWORD(v19) = WORD2(v16) + 1;
      v18 = v16;
LABEL_9:
      if (!__stxr(v16 & 0xFFFF0000FFFF0000 | ((unint64_t)(unsigned __int16)v19 << 32) | v18, v10))
      {
        if ((unsigned __int16)v19 == WORD2(v16))
        {
          v20 = guard;
        }
        else
        {
          v16 >>= 32;
          v20 = guard + 128;
        }
        v21 = v16 & 0x3F;
        v22 = *(_WORD *)(v20 + 2 * v21);
        v23 = v22 & 0x3F;
        if ((v22 & 0x3F) == 0)
        {
          v30 = -1024;
          do
          {
            if (v30 < 0)
            {
              __yield();
            }
            else
            {
              v63 = v13;
              v64 = v12;
              v65 = v14;
              v67 = StatusReg;
              v62 = v30;
              MEMORY[0x18D767268](0, 4, (v30 + 1));
              v30 = v62;
              v14 = v65;
              StatusReg = v67;
              v13 = v63;
              v12 = v64;
            }
            v22 = *(_WORD *)(v20 + 2 * v21);
            ++v30;
            v23 = v22 & 0x3F;
          }
          while ((v22 & 0x3F) == 0);
        }
        v24 = (unsigned __int16)v19;
        v25 = v23;
        v26 = guard + ((unint64_t)v23 << 12);
        if (v24 == (unsigned __int16)v17 && *(_BYTE *)(v26 + 6) == 3)
        {
          do
            v27 = __ldxr(v11);
          while (__stxr(v27 & ~(1 << v25), v11));
        }
        *(_QWORD *)v26 = 0x100000000000000;
        *(_WORD *)(v20 + 2 * v21) = (v22 & 0xFFC0) + 64;
        if (v25 < v9)
          return firehose_buffer_stream_chunk_install(guard, a2, a3, v25);
        v28 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        while (!__ldaxr(v12))
        {
          if (!__stxr(v28, v12))
            goto LABEL_31;
        }
        __clrex();
        v31 = v12;
        v32 = v13;
        v33 = v14;
        v68 = StatusReg;
        _dispatch_unfair_lock_lock_slow_VARIANT_mp((uint64_t)v12);
        StatusReg = v68;
        v14 = v33;
        v13 = v32;
        v12 = v31;
LABEL_31:
        if (*(unsigned __int8 *)(guard + 532) <= v25)
        {
          v34 = *(_QWORD *)(guard + 520) & ~(1 << v25);
          *(_QWORD *)(guard + 520) = v34;
          v35 = v25 & 0x3C;
          if (((v34 >> (v25 & 0x3C)) & 0xF) == 0)
          {
            v36 = v12;
            v37 = v13;
            v38 = v14;
            v39 = StatusReg;
            madvise((void *)(guard + (v35 << 12)), 0x4000uLL, 5);
            StatusReg = v39;
            v14 = v38;
            v13 = v37;
            v12 = v36;
          }
          v25 = 0;
        }
        v40 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        do
          v41 = __ldxr(v12);
        while (__stlxr(0, v12));
        if (v41 != v40)
        {
          v47 = v12;
          v48 = v13;
          v49 = v14;
          v69 = StatusReg;
          _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)v12, v41);
          StatusReg = v69;
          v14 = v49;
          v13 = v48;
          v12 = v47;
        }
        if (v25)
          return firehose_buffer_stream_chunk_install(guard, a2, a3, v25);
      }
    }
    v66 = (_DWORD *)v14;
    v42 = v13;
    v43 = v12;
    __clrex();
    v44 = StatusReg;
    v45 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    while (!__ldaxr(v12))
    {
      if (!__stxr(v45, v12))
        goto LABEL_46;
    }
    __clrex();
    _dispatch_unfair_lock_lock_slow_VARIANT_mp((uint64_t)v12);
LABEL_46:
    v50 = *(_QWORD *)(guard + 520);
    if ((v50 | v42) == 0xFFFFFFFFFFFFFFFFLL)
    {
      v25 = 0;
    }
    else
    {
      v25 = __clz(__rbit64(~(v50 | v42)));
      *(_QWORD *)(guard + 520) = v50 | (1 << v25);
    }
    v51 = *(_DWORD *)(v44 + 24) & 0xFFFFFFFC;
    do
      v52 = __ldxr(v43);
    while (__stlxr(0, v43));
    if (v52 == v51)
    {
      if (v25)
        return firehose_buffer_stream_chunk_install(guard, a2, a3, v25);
    }
    else
    {
      _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)v43, v52);
      if (v25)
        return firehose_buffer_stream_chunk_install(guard, a2, a3, v25);
    }
    if ((*(_BYTE *)(a2 + 14) & 2) != 0)
      __FIREHOSE_CLIENT_THROTTLED_DUE_TO_HEAVY_LOGGING__(guard, v70, 0);
    else
      firehose_client_send_push_and_wait(guard, v70, 0);
    v14 = (mach_port_context_t)v66;
    v12 = v43;
    v13 = v42;
    StatusReg = v44;
  }
  while (*v66 != -1);
  v25 = 0;
  return firehose_buffer_stream_chunk_install(guard, a2, a3, v25);
}

void firehose_client_start_quarantine(uint64_t a1)
{
  void (*v1)(void);
  uint64_t v3;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BOOL4 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _BOOL4 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _BOOL4 v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;

  if (*(uint64_t *)_voucher_libtrace_hooks >= 5)
  {
    v1 = *(void (**)(void))(_voucher_libtrace_hooks + 40);
    if (v1)
    {
      v1();
      *(_BYTE *)(a1 + 1569) = 1;
      v3 = *(_QWORD *)(a1 + 768);
      if ((~v3 & 0xFF00000000) == 0 || BYTE4(*(_QWORD *)(a1 + 768)) == 0)
      {
        if (!*(_DWORD *)(a1 + 1552))
          firehose_client_reconnect((int *)a1, 0, 0);
      }
      else
      {
        v5 = (unint64_t *)(a1 + 768);
        v6 = (unint64_t *)(a1 + ((unint64_t)BYTE4(v3) << 12));
        v7 = v6[1];
        do
        {
          v8 = __ldxr(v6);
          if (!v8 || (v8 & 0x1FF000000000000) != 0x1000000000000)
            goto LABEL_27;
          v9 = v8 >> 16;
          v11 = (unsigned __int16)v8 + 25 > WORD1(v8) || v7 < 0xFFFF000000000000;
          v12 = v8 + 0x100000020;
          v13 = ((unsigned __int16)(v8 + 32) + 40 > (v8 + 32) >> 16) | ((v8 + 0x100000020) >> 56);
          if (v11)
          {
            v12 = v8;
            v13 = HIBYTE(v8) | 1;
          }
          else
          {
            v9 = (v8 + 0x100000020) >> 16;
          }
        }
        while (__stxr(((_DWORD)v9 << 16) | v12 & 0xFFFFFF00000000 | (v13 << 56) | (unsigned __int16)v12, v6));
        if (!v11)
        {
          if (!(_WORD)v8)
            goto LABEL_28;
          qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Allocation should always fail";
          qword_1EDF52D38 = (unsigned __int16)v8;
          __break(1u);
LABEL_27:
          __clrex();
          goto LABEL_28;
        }
        if ((v12 & 0xFF00000000) == 0)
          firehose_buffer_ring_enqueue_VARIANT_mp((int *)a1, BYTE4(v3));
LABEL_28:
        while (1)
        {
          v14 = __ldxr(v5);
          if (v14 != v3)
            break;
          if (!__stxr(v3 & 0xFFFFFF00FFFFFFFFLL, v5))
            goto LABEL_32;
        }
        __clrex();
      }
LABEL_32:
      v15 = *(_QWORD *)(a1 + 640);
      if ((~v15 & 0xFF00000000) == 0 || BYTE4(*(_QWORD *)(a1 + 640)) == 0)
      {
        if (!*(_DWORD *)(a1 + 1552))
          firehose_client_reconnect((int *)a1, 0, 0);
      }
      else
      {
        v17 = (unint64_t *)(a1 + 640);
        v18 = (unint64_t *)(a1 + ((unint64_t)BYTE4(v15) << 12));
        v19 = v18[1];
        do
        {
          v20 = __ldxr(v18);
          if (!v20 || (v20 & 0x1FF000000000000) != 0)
            goto LABEL_56;
          v21 = v20 >> 16;
          v23 = (unsigned __int16)v20 + 25 > WORD1(v20) || v19 < 0xFFFF000000000000;
          v24 = v20 + 0x100000020;
          v25 = ((unsigned __int16)(v20 + 32) + 40 > (v20 + 32) >> 16) | ((v20 + 0x100000020) >> 56);
          if (v23)
          {
            v24 = v20;
            v25 = HIBYTE(v20) | 1;
          }
          else
          {
            v21 = (v20 + 0x100000020) >> 16;
          }
        }
        while (__stxr(((_DWORD)v21 << 16) | v24 & 0xFFFFFF00000000 | (v25 << 56) | (unsigned __int16)v24, v18));
        if (!v23)
        {
          if (!(_WORD)v20)
            goto LABEL_57;
          qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Allocation should always fail";
          qword_1EDF52D38 = (unsigned __int16)v20;
          __break(1u);
LABEL_56:
          __clrex();
          goto LABEL_57;
        }
        if ((v24 & 0xFF00000000) == 0)
          firehose_buffer_ring_enqueue_VARIANT_mp((int *)a1, BYTE4(v15));
LABEL_57:
        while (1)
        {
          v26 = __ldxr(v17);
          if (v26 != v15)
            break;
          if (!__stxr(v15 & 0xFFFFFF00FFFFFFFFLL, v17))
            goto LABEL_61;
        }
        __clrex();
      }
LABEL_61:
      v27 = *(_QWORD *)(a1 + 896);
      if ((~v27 & 0xFF00000000) == 0 || BYTE4(*(_QWORD *)(a1 + 896)) == 0)
      {
        if (!*(_DWORD *)(a1 + 1552))
          firehose_client_reconnect((int *)a1, 0, 0);
      }
      else
      {
        v29 = (unint64_t *)(a1 + 896);
        v30 = (unint64_t *)(a1 + ((unint64_t)BYTE4(v27) << 12));
        v31 = v30[1];
        do
        {
          v32 = __ldxr(v30);
          if (!v32 || (v32 & 0x1FF000000000000) != 0x2000000000000)
            goto LABEL_85;
          v33 = v32 >> 16;
          v35 = (unsigned __int16)v32 + 25 > WORD1(v32) || v31 < 0xFFFF000000000000;
          v36 = v32 + 0x100000020;
          v37 = ((unsigned __int16)(v32 + 32) + 40 > (v32 + 32) >> 16) | ((v32 + 0x100000020) >> 56);
          if (v35)
          {
            v36 = v32;
            v37 = HIBYTE(v32) | 1;
          }
          else
          {
            v33 = (v32 + 0x100000020) >> 16;
          }
        }
        while (__stxr(((_DWORD)v33 << 16) | v36 & 0xFFFFFF00000000 | (v37 << 56) | (unsigned __int16)v36, v30));
        if (!v35)
        {
          if (!(_WORD)v32)
            goto LABEL_86;
          qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Allocation should always fail";
          qword_1EDF52D38 = (unsigned __int16)v32;
          __break(1u);
LABEL_85:
          __clrex();
          goto LABEL_86;
        }
        if ((v36 & 0xFF00000000) == 0)
          firehose_buffer_ring_enqueue_VARIANT_mp((int *)a1, BYTE4(v27));
LABEL_86:
        while (1)
        {
          v38 = __ldxr(v29);
          if (v38 != v27)
            break;
          if (!__stxr(v27 & 0xFFFFFF00FFFFFFFFLL, v29))
            return;
        }
        __clrex();
      }
    }
  }
}

void __FIREHOSE_CLIENT_THROTTLED_DUE_TO_HEAVY_LOGGING__(uint64_t a1, unsigned int a2, unint64_t *a3)
{
  firehose_client_send_push_and_wait(a1, a2, a3);
}

void firehose_client_send_push_and_wait(uint64_t guard, unsigned int a2, unint64_t *a3)
{
  int v3;
  int v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  int v12;
  __int128 v13;

  v3 = *(_DWORD *)(guard + 4 * a2 + 1552);
  v13 = 0uLL;
  v12 = 0;
  if (v3 == -1)
    return;
  if (v3)
  {
    v7 = firehose_send_push_and_wait(v3, &v13, &v12);
    if (!v7)
    {
LABEL_4:
      if (((unint64_t)v13 & *((_QWORD *)&v13 + 1)) != 0xFFFFFFFFFFFFFFFFLL)
      {
        v8 = 32;
        if (a2)
          v8 = 56;
        v9 = (unint64_t *)(guard + v8 + 448);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
        firehose_client_merge_updates(guard, 0, v13, *((unint64_t *)&v13 + 1), v12 != 0, a3);
        return;
      }
      goto LABEL_20;
    }
    if (v7 != 268435459)
    {
      if (v7 == -301)
      {
        qword_1EDF52D08 = (uint64_t)"MIG_REPLY_MISMATCH";
        qword_1EDF52D38 = -301;
        __break(1u);
      }
      _dispatch_bug(681, v7);
    }
  }
  v11 = firehose_client_reconnect((int *)guard, v3, a2);
  if ((v11 - 1) > 0xFFFFFFFD)
    goto LABEL_22;
  v7 = firehose_send_push_and_wait(v11, &v13, &v12);
  switch(v7)
  {
    case 0:
      goto LABEL_4;
    case 268435459:
      goto LABEL_22;
    case -301:
      qword_1EDF52D08 = (uint64_t)"MIG_REPLY_MISMATCH";
      qword_1EDF52D38 = -301;
      __break(1u);
LABEL_20:
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Memory corruption in the logging buffers";
      __break(1u);
      break;
  }
  _dispatch_bug(693, v7);
LABEL_22:
  if (a3)
    *a3 = *(_QWORD *)(guard + 448);
}

uint64_t _dispatch_iocntl_VARIANT_mp(uint64_t result, uint64_t a2)
{
  switch((int)result)
  {
    case 1:
      dispatch_io_defaults = *MEMORY[0x1E0C88820] * a2;
      break;
    case 2:
      qword_1EDF51AC8 = a2;
      break;
    case 3:
      byte_1EDF51AD8 = a2 != 0;
      break;
    case 4:
      qword_1EDF51AD0 = a2;
      break;
    default:
      return result;
  }
  return result;
}

void _dispatch_io_dispose_VARIANT_mp(uint64_t a1, const char *a2)
{
  uint64_t v3;
  _QWORD *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;

  v3 = *(_QWORD *)(a1 + 112);
  if (v3 && (*(_BYTE *)(a1 + 120) & 3) == 0)
  {
    v4 = *(_QWORD **)(v3 + 8);
    if (v4)
    {
      *v4 = 0;
      v3 = *(_QWORD *)(a1 + 112);
    }
    dispatch_resume_VARIANT_mp(*(_QWORD *)(v3 + 64));
  }
  v5 = *(unsigned int **)(a1 + 48);
  if (v5)
    dispatch_release_VARIANT_mp(v5, a2);
  v6 = *(unsigned int **)(a1 + 56);
  if (v6)
    dispatch_release_VARIANT_mp(v6, a2);
  v7 = *(unsigned int **)(a1 + 64);
  if (v7)
    dispatch_release_VARIANT_mp(v7, a2);
}

_QWORD *dispatch_io_create_VARIANT_mp(unint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  unsigned int *v9;
  int v10;
  unsigned int *v11;
  int v12;
  _QWORD v14[8];

  if (a1 > 1)
    return 0;
  v4 = _dispatch_io_create(a1);
  *((_DWORD *)v4 + 31) = a2;
  *((_DWORD *)v4 + 32) = a2;
  dispatch_suspend_VARIANT_mp(v4[6]);
  if (*(_DWORD *)(a3 + 8) != 0x7FFFFFFF)
  {
    v9 = (unsigned int *)(a3 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    if (v10 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  if (*((_DWORD *)v4 + 2) != 0x7FFFFFFF)
  {
    v11 = (unsigned int *)(v4 + 1);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    if (v12 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v14[0] = MEMORY[0x1E0C87450];
  v14[1] = 0x40000000;
  v14[2] = __dispatch_io_create_VARIANT_mp_block_invoke;
  v14[3] = &unk_1E1E86FF8;
  v14[6] = a1;
  v14[7] = a3;
  v14[4] = a4;
  v14[5] = v4;
  _dispatch_fd_entry_init_async(a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v14);
  return v4;
}

_QWORD *_dispatch_io_create(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)_dispatch_object_alloc_VARIANT_mp(OS_dispatch_io, 152);
  v2[2] = -1985229329;
  v2[3] = &off_1ECCEA100;
  v3 = dispatch_io_defaults * qword_1EDF51AC8;
  v2[9] = a1;
  v2[10] = v3;
  v2[11] = -1;
  v2[6] = dispatch_queue_create_VARIANT_mp("com.apple.libdispatch-io.channelq", 0);
  return v2;
}

uint64_t _dispatch_fd_entry_init_async(int a1, uint64_t (*a2)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  uint64_t (*v5[5])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v6;

  if (_dispatch_io_init_pred != -1)
    dispatch_once_f_VARIANT_mp((unint64_t *)&_dispatch_io_init_pred, 0, _dispatch_io_queues_init);
  v5[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  v5[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  v5[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_fd_entry_init_async_block_invoke;
  v5[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&unk_1E1E877B0;
  v6 = a1;
  v5[4] = a2;
  return dispatch_async_VARIANT_mp((unsigned int *)_dispatch_io_fds_lockq, v5);
}

uint64_t _dispatch_io_init(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t (*a5)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  unsigned int *v7;
  int v8;
  unsigned int **v9;
  unsigned int *v10;
  uint64_t result;
  uint64_t (*aBlock[6])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v13;

  if (a5)
  {
    if (*(_DWORD *)(a3 + 8) != 0x7FFFFFFF)
    {
      v7 = (unsigned int *)(a3 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      if (v8 <= 0)
        dispatch_set_target_queue_VARIANT_mp_cold_2();
    }
    v9 = (unsigned int **)(a2 + 64);
    if (a4)
      v9 = (unsigned int **)(a1 + 6);
    v10 = *v9;
    aBlock[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
    aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
    aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_io_init_block_invoke;
    aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&unk_1E1E87568;
    aBlock[4] = a5;
    aBlock[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a3;
    v13 = a4;
    dispatch_async_VARIANT_mp(v10, aBlock);
  }
  if (a2)
  {
    a1[14] = a2;
    dispatch_retain_VARIANT_mp(*(_QWORD *)(a2 + 72));
    dispatch_retain_VARIANT_mp(*(_QWORD *)(a2 + 80));
    result = *(_QWORD *)(a2 + 80);
    a1[7] = *(_QWORD *)(a2 + 72);
  }
  else
  {
    a1[7] = dispatch_queue_create_VARIANT_mp("com.apple.libdispatch-io.barrierq", 0);
    result = dispatch_group_create_VARIANT_mp();
  }
  a1[8] = result;
  return result;
}

_QWORD *dispatch_io_create_f_VARIANT_mp(unint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD v7[6];

  if (a5)
  {
    v7[0] = MEMORY[0x1E0C87450];
    v7[1] = 0x40000000;
    v7[2] = __dispatch_io_create_f_VARIANT_mp_block_invoke;
    v7[3] = &__block_descriptor_tmp_2;
    v7[4] = a5;
    v7[5] = a4;
    v5 = v7;
  }
  else
  {
    v5 = 0;
  }
  return dispatch_io_create_VARIANT_mp(a1, a2, a3, (uint64_t)v5);
}

_QWORD *dispatch_io_create_with_path_VARIANT_mp(unint64_t a1, char *__s, int a3, __int16 a4, uint64_t a5, uint64_t (*a6)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  size_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _QWORD *v15;
  unsigned int *v16;
  int v17;
  unsigned int *v18;
  int v19;
  unsigned int *v20;
  uint64_t (*v22[8])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (a1 > 1)
    return 0;
  if (*__s != 47)
    return 0;
  v12 = strlen(__s);
  v13 = malloc_type_malloc(v12 + 25, 0x5B08A984uLL);
  if (!v13)
    return 0;
  v14 = v13;
  v15 = _dispatch_io_create(a1);
  *(_QWORD *)((char *)v15 + 124) = -1;
  *(_QWORD *)v14 = v15;
  v14[2] = a3;
  *((_WORD *)v14 + 6) = a4;
  *((_QWORD *)v14 + 2) = v12;
  memcpy(v14 + 6, __s, v12 + 1);
  if (*(_DWORD *)(a5 + 8) != 0x7FFFFFFF)
  {
    v16 = (unsigned int *)(a5 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    if (v17 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  if (*((_DWORD *)v15 + 2) != 0x7FFFFFFF)
  {
    v18 = (unsigned int *)(v15 + 1);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    if (v19 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v20 = (unsigned int *)v15[6];
  v22[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  v22[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  v22[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__dispatch_io_create_with_path_VARIANT_mp_block_invoke;
  v22[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&unk_1E1E87068;
  v22[6] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v15;
  v22[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a5;
  v22[4] = a6;
  v22[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v14;
  dispatch_async_VARIANT_mp(v20, v22);
  return v15;
}

uint64_t _dispatch_io_queues_init()
{
  uint64_t result;

  _dispatch_io_fds_lockq = dispatch_queue_create_VARIANT_mp("com.apple.libdispatch-io.fd_lockq", 0);
  result = dispatch_queue_create_VARIANT_mp("com.apple.libdispatch-io.dev_lockq", 0);
  _dispatch_io_devs_lockq = result;
  return result;
}

_QWORD *_dispatch_fd_entry_create_with_path(uint64_t a1, unsigned int a2, __int16 a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int *v9;
  unsigned int *v10;
  uint64_t (*v12[5])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*aBlock[5])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v6 = _dispatch_fd_entry_create(*(__objc2_class ***)(*(_QWORD *)a1 + 48));
  v7 = v6;
  if ((a3 & 0xF000) == 0x8000)
    _dispatch_disk_init((uint64_t)v6, HIBYTE(a2));
  else
    _dispatch_stream_init((uint64_t)v6);
  *(_DWORD *)v7 = -1;
  *((_DWORD *)v7 + 4) = -1;
  v7[1] = a1;
  *((_DWORD *)v7 + 8) = a2;
  *((_WORD *)v7 + 18) = a3;
  v7[9] = dispatch_queue_create_VARIANT_mp("com.apple.libdispatch-io.barrierq", 0);
  v7[10] = dispatch_group_create_VARIANT_mp();
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  v9 = (unsigned int *)v7[8];
  aBlock[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_fd_entry_create_with_path_block_invoke;
  aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_79;
  aBlock[4] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v7;
  dispatch_async_VARIANT_mp(v9, aBlock);
  v10 = (unsigned int *)v7[8];
  v12[0] = v8;
  v12[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  v12[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_fd_entry_create_with_path_block_invoke_2;
  v12[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_80;
  v12[4] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v7;
  dispatch_async_VARIANT_mp(v10, v12);
  return v7;
}

_QWORD *dispatch_io_create_with_path_f_VARIANT_mp(unint64_t a1, char *a2, int a3, __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD v9[6];

  if (a7)
  {
    v9[0] = MEMORY[0x1E0C87450];
    v9[1] = 0x40000000;
    v9[2] = __dispatch_io_create_with_path_f_VARIANT_mp_block_invoke;
    v9[3] = &__block_descriptor_tmp_6;
    v9[4] = a7;
    v9[5] = a6;
    v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v9;
  }
  else
  {
    v7 = 0;
  }
  return dispatch_io_create_with_path_VARIANT_mp(a1, a2, a3, a4, a5, v7);
}

_QWORD *dispatch_io_create_with_io_VARIANT_mp(uint64_t (*a1)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  _QWORD *v4;
  unsigned int *v9;
  int v10;
  unsigned int *v11;
  int v12;
  unsigned int *v13;
  int v14;
  unsigned int *v15;
  uint64_t (*aBlock[9])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if ((unint64_t)a1 > 1)
    return 0;
  v4 = _dispatch_io_create((uint64_t)a1);
  dispatch_suspend_VARIANT_mp(v4[6]);
  if (*(_DWORD *)(a3 + 8) != 0x7FFFFFFF)
  {
    v9 = (unsigned int *)(a3 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    if (v10 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  if (*((_DWORD *)v4 + 2) != 0x7FFFFFFF)
  {
    v11 = (unsigned int *)(v4 + 1);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    if (v12 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF)
  {
    v13 = (unsigned int *)(a2 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    if (v14 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v15 = *(unsigned int **)(a2 + 48);
  aBlock[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__dispatch_io_create_with_io_VARIANT_mp_block_invoke;
  aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&unk_1E1E87100;
  aBlock[6] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v4;
  aBlock[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a3;
  aBlock[4] = a4;
  aBlock[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a2;
  aBlock[8] = a1;
  dispatch_async_VARIANT_mp(v15, aBlock);
  return v4;
}

_QWORD *dispatch_io_create_with_io_f_VARIANT_mp(uint64_t (*a1)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD v7[6];

  if (a5)
  {
    v7[0] = MEMORY[0x1E0C87450];
    v7[1] = 0x40000000;
    v7[2] = __dispatch_io_create_with_io_f_VARIANT_mp_block_invoke;
    v7[3] = &__block_descriptor_tmp_10;
    v7[4] = a5;
    v7[5] = a4;
    v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v7;
  }
  else
  {
    v5 = 0;
  }
  return dispatch_io_create_with_io_VARIANT_mp(a1, a2, a3, v5);
}

uint64_t dispatch_io_set_high_water_VARIANT_mp(uint64_t a1, uint64_t (*a2)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  unsigned int *v2;
  int v3;
  unsigned int *v4;
  uint64_t (*v6[6])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    v2 = (unsigned int *)(a1 + 8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
    if (v3 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v4 = *(unsigned int **)(a1 + 48);
  v6[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  v6[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  v6[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__dispatch_io_set_high_water_VARIANT_mp_block_invoke;
  v6[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_11;
  v6[4] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a1;
  v6[5] = a2;
  return dispatch_async_VARIANT_mp(v4, v6);
}

uint64_t dispatch_io_set_low_water_VARIANT_mp(uint64_t a1, uint64_t (*a2)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  unsigned int *v2;
  int v3;
  unsigned int *v4;
  uint64_t (*v6[6])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    v2 = (unsigned int *)(a1 + 8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
    if (v3 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v4 = *(unsigned int **)(a1 + 48);
  v6[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  v6[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  v6[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__dispatch_io_set_low_water_VARIANT_mp_block_invoke;
  v6[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_12;
  v6[4] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a1;
  v6[5] = a2;
  return dispatch_async_VARIANT_mp(v4, v6);
}

uint64_t dispatch_io_set_interval_VARIANT_mp(uint64_t a1, uint64_t (*a2)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), uint64_t (*a3)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  unsigned int *v3;
  int v4;
  unsigned int *v5;
  uint64_t (*aBlock[7])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    v3 = (unsigned int *)(a1 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
    if (v4 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v5 = *(unsigned int **)(a1 + 48);
  aBlock[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__dispatch_io_set_interval_VARIANT_mp_block_invoke;
  aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_13;
  aBlock[4] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a1;
  aBlock[5] = a2;
  aBlock[6] = a3;
  return dispatch_async_VARIANT_mp(v5, aBlock);
}

uint64_t _dispatch_io_set_target_queue_VARIANT_mp(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  int v3;
  unsigned int *v4;
  int v5;
  unsigned int *v6;
  uint64_t (*v8[6])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF)
  {
    v2 = (unsigned int *)(a2 + 8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
    if (v3 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    v4 = (unsigned int *)(a1 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    if (v5 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v6 = *(unsigned int **)(a1 + 48);
  v8[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  v8[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  v8[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_io_set_target_queue_VARIANT_mp_block_invoke;
  v8[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_14;
  v8[4] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a1;
  v8[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a2;
  return dispatch_async_VARIANT_mp(v6, v8);
}

uint64_t dispatch_io_get_descriptor_VARIANT_mp(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  if ((*(_BYTE *)(a1 + 120) & 3) != 0)
    return 0xFFFFFFFFLL;
  result = *(unsigned int *)(a1 + 128);
  if ((_DWORD)result == -1)
  {
    if (!*(_DWORD *)(a1 + 144))
    {
      v3 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 184;
      while (1)
      {
        v3 = *(_QWORD *)v3;
        if (!v3)
          break;
        if (*(char **)(v3 + 8) == "io")
        {
          if (*(_QWORD *)(v3 + 16) != a1)
            return 0xFFFFFFFFLL;
          _dispatch_fd_entry_open(*(_QWORD *)(a1 + 112), a1);
          return *(unsigned int *)(a1 + 128);
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t _dispatch_fd_entry_open(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v5;
  unint64_t StatusReg;
  unsigned int v8;
  unsigned int v10;

  if (*(_DWORD *)a1 == -1 && *(_QWORD *)(a1 + 8))
  {
    v5 = (unsigned int *)(a1 + 24);
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      return v2;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      v8 = guarded_open_np();
      if (v8 != -1)
        break;
      **(_DWORD **)(StatusReg + 8) = 0;
      v8 = open_NOCANCEL();
      if (v8 != -1)
        goto LABEL_15;
      v2 = **(unsigned int **)(StatusReg + 8);
      if ((_DWORD)v2 != 4)
      {
        while (!__ldxr(v5))
        {
          if (!__stxr(v2, v5))
            return v2;
        }
        __clrex();
        return v2;
      }
    }
    *(_DWORD *)(a1 + 28) = 15;
LABEL_15:
    while (1)
    {
      v10 = __ldxr((unsigned int *)a1);
      if (v10 != -1)
        break;
      v2 = __stxr(v8, (unsigned int *)a1);
      if (!(_DWORD)v2)
      {
        *(_DWORD *)(a2 + 128) = v8;
        return v2;
      }
    }
    __clrex();
    if (*(_DWORD *)(a1 + 28))
      guarded_close_np();
    else
      close_NOCANCEL();
  }
  return 0;
}

uint64_t dispatch_io_close_VARIANT_mp(uint64_t result, char a2)
{
  unsigned int *v2;
  int v3;
  unsigned int *v4;
  int v5;
  unsigned int *v6;
  uint64_t (**v7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int v8;
  unsigned int *v9;
  int v10;
  _QWORD v11[5];
  _QWORD aBlock[5];

  v2 = (unsigned int *)(result + 120);
  v3 = *(_DWORD *)(result + 120);
  if ((a2 & 1) != 0)
  {
    if ((v3 & 2) != 0)
      return result;
    do
      v8 = __ldxr(v2);
    while (__stxr(v8 | 2, v2));
    if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
    {
      v9 = (unsigned int *)(result + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      if (v10 <= 0)
        dispatch_set_target_queue_VARIANT_mp_cold_2();
    }
    v6 = *(unsigned int **)(result + 48);
    aBlock[0] = MEMORY[0x1E0C87450];
    aBlock[1] = 0x40000000;
    aBlock[2] = ___dispatch_io_stop_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_54;
    aBlock[4] = result;
    v7 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))aBlock;
  }
  else
  {
    if ((v3 & 3) != 0)
      return result;
    if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
    {
      v4 = (unsigned int *)(result + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
      if (v5 <= 0)
        dispatch_set_target_queue_VARIANT_mp_cold_2();
    }
    v6 = *(unsigned int **)(result + 48);
    v11[0] = MEMORY[0x1E0C87450];
    v11[1] = 0x40000000;
    v11[2] = __dispatch_io_close_VARIANT_mp_block_invoke;
    v11[3] = &__block_descriptor_tmp_17;
    v11[4] = result;
    v7 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v11;
  }
  return dispatch_async_VARIANT_mp(v6, v7);
}

uint64_t dispatch_io_barrier_VARIANT_mp(uint64_t a1, uint64_t (*a2)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  unsigned int *v2;
  int v3;
  unsigned int *v4;
  uint64_t (*v6[6])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    v2 = (unsigned int *)(a1 + 8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
    if (v3 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v4 = *(unsigned int **)(a1 + 48);
  v6[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  v6[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  v6[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__dispatch_io_barrier_VARIANT_mp_block_invoke;
  v6[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&unk_1E1E87258;
  v6[4] = a2;
  v6[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a1;
  return dispatch_async_VARIANT_mp(v4, v6);
}

uint64_t dispatch_io_barrier_f_VARIANT_mp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[0] = MEMORY[0x1E0C87450];
  v4[1] = 0x40000000;
  v4[2] = __dispatch_io_barrier_f_VARIANT_mp_block_invoke;
  v4[3] = &__block_descriptor_tmp_21;
  v4[4] = a3;
  v4[5] = a2;
  return dispatch_io_barrier_VARIANT_mp(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v4);
}

uint64_t dispatch_io_read_VARIANT_mp(uint64_t a1, uint64_t (*a2)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), uint64_t (*a3)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), uint64_t a4, uint64_t (*a5)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  unsigned int *v5;
  int v6;
  unsigned int *v7;
  int v8;
  unsigned int *v9;
  uint64_t (*aBlock[9])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    v5 = (unsigned int *)(a1 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    if (v6 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  if (*(_DWORD *)(a4 + 8) != 0x7FFFFFFF)
  {
    v7 = (unsigned int *)(a4 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    if (v8 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v9 = *(unsigned int **)(a1 + 48);
  aBlock[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__dispatch_io_read_VARIANT_mp_block_invoke;
  aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&unk_1E1E872C0;
  aBlock[6] = a2;
  aBlock[7] = a3;
  aBlock[8] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a4;
  aBlock[4] = a5;
  aBlock[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a1;
  return dispatch_async_VARIANT_mp(v9, aBlock);
}

uint64_t _dispatch_operation_create(int a1, uint64_t a2, uint64_t a3, uint64_t a4, id a5, uint64_t a6, uint64_t (*a7)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  int v12;
  unsigned int *v13;
  int v14;
  unsigned int *v15;
  int v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int *v22;
  int v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*aBlock[8])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v29;
  int v30;

  if ((*(_BYTE *)(a2 + 120) & 3) != 0)
  {
    v12 = 89;
LABEL_3:
    _dispatch_objc_retain(a5);
    if (*(_DWORD *)(a6 + 8) != 0x7FFFFFFF)
    {
      v13 = (unsigned int *)(a6 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      if (v14 <= 0)
        dispatch_set_target_queue_VARIANT_mp_cold_2();
    }
    if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF)
    {
      v15 = (unsigned int *)(a2 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      if (v16 <= 0)
        dispatch_set_target_queue_VARIANT_mp_cold_2();
    }
    v17 = *(unsigned int **)(a2 + 56);
    aBlock[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
    aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
    aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_operation_create_block_invoke;
    aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&unk_1E1E87658;
    v29 = a1;
    v30 = v12;
    aBlock[4] = a7;
    aBlock[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a6;
    aBlock[6] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a5;
    aBlock[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a2;
    dispatch_async_VARIANT_mp(v17, aBlock);
    return 0;
  }
  v12 = *(_DWORD *)(a2 + 144);
  if (!a4 || v12)
    goto LABEL_3;
  v18 = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_operation, 272);
  *(_QWORD *)(v18 + 16) = -1985229329;
  *(_DWORD *)(v18 + 12) = 0;
  *(_QWORD *)(v18 + 48) = dispatch_queue_create_with_target_V2_VARIANT_mp("com.apple.libdispatch-io.opq", 0, (__objc2_class **)a6);
  *(_BYTE *)(v18 + 160) = 0;
  *(_DWORD *)(v18 + 56) = a1;
  *(_QWORD *)(v18 + 104) = *(_QWORD *)(a2 + 136) + a3;
  *(_QWORD *)(v18 + 112) = a4;
  *(_QWORD *)(v18 + 128) = _dispatch_Block_copy(a7);
  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF)
  {
    v22 = (unsigned int *)(a2 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    if (v23 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  *(_QWORD *)(v18 + 136) = a2;
  v24 = *(_OWORD *)(a2 + 72);
  v25 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(v18 + 96) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(v18 + 64) = v24;
  *(_OWORD *)(v18 + 80) = v25;
  v26 = *(_QWORD *)(a2 + 24);
  do
  {
    v27 = v26;
    v26 = *(_QWORD *)(v26 + 24);
  }
  while (v26);
  *(_QWORD *)(v18 + 24) = v27;
  return v18;
}

uint64_t _dispatch_operation_enqueue(uint64_t a1, unsigned int a2, id a3)
{
  uint64_t v6;
  int v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int *v9;
  uint64_t result;
  const char *v11;
  unsigned int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t (**v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int **v19;
  _QWORD v20[7];
  _QWORD v21[7];
  uint64_t (*aBlock[6])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int v23;
  int v24;

  _dispatch_objc_retain(a3);
  v6 = *(_QWORD *)(a1 + 136);
  if ((*(_BYTE *)(v6 + 120) & 3) != 0)
  {
    v7 = 89;
  }
  else
  {
    v7 = *(_DWORD *)(v6 + 144);
    if (!v7)
    {
      v14 = *(_QWORD *)(v6 + 112);
      *(_QWORD *)(a1 + 144) = v14;
      dispatch_suspend_VARIANT_mp(*(_QWORD *)(v14 + 64));
      dispatch_group_enter_VARIANT_mp(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 80));
      v15 = *(_QWORD *)(a1 + 144);
      v16 = *(_QWORD *)(v15 + 56);
      if (v16)
      {
        v17 = *(unsigned int **)(v16 + 72);
        v20[0] = MEMORY[0x1E0C87450];
        v20[1] = 0x40000000;
        v20[2] = ___dispatch_operation_enqueue_block_invoke_3;
        v20[3] = &__block_descriptor_tmp_62;
        v20[4] = v16;
        v20[5] = a1;
        v20[6] = a3;
        v18 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v20;
      }
      else
      {
        v19 = *(unsigned int ***)(v15 + 8 * a2 + 40);
        v17 = *v19;
        v21[0] = MEMORY[0x1E0C87450];
        v21[1] = 0x40000000;
        v21[2] = ___dispatch_operation_enqueue_block_invoke_2;
        v21[3] = &__block_descriptor_tmp_61;
        v21[4] = v19;
        v21[5] = a1;
        v21[6] = a3;
        v18 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v21;
      }
      return dispatch_async_VARIANT_mp(v17, v18);
    }
  }
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 128);
  v9 = *(unsigned int **)(a1 + 48);
  aBlock[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_operation_enqueue_block_invoke;
  aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&unk_1E1E87680;
  v23 = a2;
  v24 = v7;
  aBlock[4] = v8;
  aBlock[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a3;
  result = dispatch_async_VARIANT_mp(v9, aBlock);
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    v12 = (unsigned int *)(a1 + 8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (v13 <= 1)
    {
      if (v13 != 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      return _os_object_dispose((void *)a1, v11);
    }
  }
  return result;
}

uint64_t dispatch_io_read_f_VARIANT_mp(uint64_t a1, uint64_t (*a2)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), uint64_t (*a3)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[6];

  v7[0] = MEMORY[0x1E0C87450];
  v7[1] = 0x40000000;
  v7[2] = __dispatch_io_read_f_VARIANT_mp_block_invoke;
  v7[3] = &__block_descriptor_tmp_25;
  v7[4] = a6;
  v7[5] = a5;
  return dispatch_io_read_VARIANT_mp(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v7);
}

uint64_t dispatch_io_write_VARIANT_mp(uint64_t a1, uint64_t (*a2)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), id a3, uint64_t a4, uint64_t (*a5)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  unsigned int *v10;
  int v11;
  unsigned int *v12;
  int v13;
  unsigned int *v14;
  uint64_t (*aBlock[9])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  _dispatch_objc_retain(a3);
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    v10 = (unsigned int *)(a1 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    if (v11 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  if (*(_DWORD *)(a4 + 8) != 0x7FFFFFFF)
  {
    v12 = (unsigned int *)(a4 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    if (v13 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v14 = *(unsigned int **)(a1 + 48);
  aBlock[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__dispatch_io_write_VARIANT_mp_block_invoke;
  aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&unk_1E1E87328;
  aBlock[6] = a2;
  aBlock[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a3;
  aBlock[8] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a4;
  aBlock[4] = a5;
  aBlock[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a1;
  return dispatch_async_VARIANT_mp(v14, aBlock);
}

uint64_t dispatch_io_write_f_VARIANT_mp(uint64_t a1, uint64_t (*a2)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[6];

  v7[0] = MEMORY[0x1E0C87450];
  v7[1] = 0x40000000;
  v7[2] = __dispatch_io_write_f_VARIANT_mp_block_invoke;
  v7[3] = &__block_descriptor_tmp_28;
  v7[4] = a6;
  v7[5] = a5;
  return dispatch_io_write_VARIANT_mp(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v7);
}

uint64_t dispatch_read_VARIANT_mp(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v4;
  int v5;
  _QWORD v7[7];
  int v8;

  if (*(_DWORD *)(a3 + 8) != 0x7FFFFFFF)
  {
    v4 = (unsigned int *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    if (v5 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v7[0] = MEMORY[0x1E0C87450];
  v7[1] = 0x40000000;
  v7[2] = __dispatch_read_VARIANT_mp_block_invoke;
  v7[3] = &unk_1E1E87410;
  v7[4] = a4;
  v7[5] = a3;
  v8 = a1;
  v7[6] = a2;
  return _dispatch_fd_entry_init_async(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v7);
}

uint64_t dispatch_read_f_VARIANT_mp(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[6];

  v6[0] = MEMORY[0x1E0C87450];
  v6[1] = 0x40000000;
  v6[2] = __dispatch_read_f_VARIANT_mp_block_invoke;
  v6[3] = &__block_descriptor_tmp_35;
  v6[4] = a5;
  v6[5] = a4;
  return dispatch_read_VARIANT_mp(a1, a2, a3, (uint64_t)v6);
}

uint64_t dispatch_write_VARIANT_mp(int a1, id a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v8;
  int v9;
  _QWORD v11[7];
  int v12;

  _dispatch_objc_retain(a2);
  if (*(_DWORD *)(a3 + 8) != 0x7FFFFFFF)
  {
    v8 = (unsigned int *)(a3 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    if (v9 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v11[0] = MEMORY[0x1E0C87450];
  v11[1] = 0x40000000;
  v11[2] = __dispatch_write_VARIANT_mp_block_invoke;
  v11[3] = &unk_1E1E874F8;
  v11[4] = a4;
  v11[5] = a3;
  v12 = a1;
  v11[6] = a2;
  return _dispatch_fd_entry_init_async(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v11);
}

uint64_t dispatch_write_f_VARIANT_mp(int a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[6];

  v6[0] = MEMORY[0x1E0C87450];
  v6[1] = 0x40000000;
  v6[2] = __dispatch_write_f_VARIANT_mp_block_invoke;
  v6[3] = &__block_descriptor_tmp_41;
  v6[4] = a5;
  v6[5] = a4;
  return dispatch_write_VARIANT_mp(a1, a2, a3, (uint64_t)v6);
}

void _dispatch_operation_dispose_VARIANT_mp(uint64_t a1, const char *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  int v5;
  unsigned int *v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned int *v10;

  if (*(_QWORD *)(a1 + 144))
  {
    _dispatch_operation_deliver_data(a1, 2);
    dispatch_group_leave_VARIANT_mp(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 80));
    dispatch_resume_VARIANT_mp(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 64));
  }
  v3 = *(unsigned int **)(a1 + 136);
  if (v3)
  {
    if (v3[2] != 0x7FFFFFFF)
    {
      v4 = v3 + 2;
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (v5 <= 1)
      {
        if (v5 != 1)
          _os_object_allows_weak_reference_VARIANT_mp_cold_1();
        _os_object_dispose(v3, a2);
      }
    }
  }
  v6 = *(unsigned int **)(a1 + 152);
  if (v6)
    dispatch_release_VARIANT_mp(v6, a2);
  v7 = *(void **)(a1 + 176);
  if (v7 && !*(_DWORD *)(a1 + 56))
    free(v7);
  v8 = *(void **)(a1 + 224);
  if (v8)
    _dispatch_objc_release(v8);
  v9 = *(void **)(a1 + 232);
  if (v9)
    _dispatch_objc_release(v9);
  v10 = *(unsigned int **)(a1 + 48);
  if (v10)
    dispatch_release_VARIANT_mp(v10, a2);
  _Block_release(*(const void **)(a1 + 128));
}

void _dispatch_operation_deliver_data(uint64_t a1, int a2)
{
  __objc2_class *v4;
  char *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  __objc2_class **VARIANT_mp;
  void *subrange_VARIANT_mp;
  void *v12;
  __objc2_class **v13;
  __objc2_class **v14;
  int v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  int v20;
  unsigned int *v21;
  uint64_t (*v22[8])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v23;
  int v24;
  int v25;

  v4 = *(__objc2_class **)(a1 + 200);
  v5 = (char *)v4 + *(_QWORD *)(a1 + 208);
  if ((a2 & 3) != 0)
  {
    *(_DWORD *)(a1 + 184) = 0;
LABEL_7:
    v8 = *(_DWORD *)(a1 + 120);
    if (v8)
    {
LABEL_11:
      v7 = 1;
      goto LABEL_12;
    }
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 136) + 120) & 2) != 0)
    {
      v8 = 89;
      *(_DWORD *)(a1 + 120) = 89;
      goto LABEL_11;
    }
LABEL_9:
    v8 = 0;
    goto LABEL_11;
  }
  v6 = *(_DWORD *)(a1 + 184);
  *(_DWORD *)(a1 + 184) = 0;
  if ((v6 & 1) != 0)
    goto LABEL_7;
  if ((unint64_t)v5 >= *(_QWORD *)(a1 + 72))
    goto LABEL_9;
  if ((unint64_t)v4 < *(_QWORD *)(a1 + 192))
    return;
  v7 = 0;
  v8 = 0;
LABEL_12:
  v9 = *(_DWORD *)(a1 + 56);
  if (v9 == 1)
  {
    if (v7)
      subrange_VARIANT_mp = dispatch_data_create_subrange_VARIANT_mp(*(__objc2_class **)(a1 + 232), v4, *(__objc2_class **)(a1 + 112));
    else
      subrange_VARIANT_mp = 0;
    v12 = *(void **)(a1 + 224);
    if (v12 && *(_QWORD *)(a1 + 200) == *(_QWORD *)(a1 + 192))
    {
      _dispatch_objc_release(v12);
      *(_QWORD *)(a1 + 224) = 0;
      *(_QWORD *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 200) = 0;
      if (v7)
      {
        _dispatch_objc_retain(subrange_VARIANT_mp);
        v13 = (__objc2_class **)subrange_VARIANT_mp;
      }
      else
      {
        v13 = dispatch_data_create_subrange_VARIANT_mp(*(__objc2_class **)(a1 + 232), *(__objc2_class **)(a1 + 192), *(__objc2_class **)(a1 + 112));
      }
      _dispatch_objc_release(*(id *)(a1 + 232));
      *(_QWORD *)(a1 + 232) = v13;
      if (!v7)
        goto LABEL_37;
      goto LABEL_28;
    }
  }
  else
  {
    if (v9)
      return;
    if (v4)
    {
      VARIANT_mp = dispatch_data_create_VARIANT_mp(*(void **)(a1 + 176), (size_t)v4, 0, &__block_literal_global);
      *(_QWORD *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 200) = 0;
      subrange_VARIANT_mp = dispatch_data_create_concat_VARIANT_mp(*(_QWORD **)(a1 + 232), VARIANT_mp);
      _dispatch_objc_release(*(id *)(a1 + 232));
      _dispatch_objc_release(VARIANT_mp);
    }
    else
    {
      subrange_VARIANT_mp = *(void **)(a1 + 232);
    }
    v14 = &_dispatch_data_empty;
    if (!v7)
      v14 = (__objc2_class **)subrange_VARIANT_mp;
    *(_QWORD *)(a1 + 232) = v14;
  }
  if (!v7)
  {
LABEL_37:
    *(_QWORD *)(a1 + 208) = v5;
    return;
  }
LABEL_28:
  if ((a2 & 8) != 0 && !dispatch_data_get_size_VARIANT_mp((uint64_t)subrange_VARIANT_mp))
    goto LABEL_37;
  *(_QWORD *)(a1 + 208) = 0;
  v15 = *(_DWORD *)(a1 + 56);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 128);
  v17 = *(_QWORD *)(a1 + 144);
  dispatch_suspend_VARIANT_mp(*(_QWORD *)(v17 + 64));
  v18 = *(_QWORD *)(a1 + 136);
  if (*(_DWORD *)(v18 + 8) != 0x7FFFFFFF)
  {
    v19 = (unsigned int *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    if (v20 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v21 = *(unsigned int **)(a1 + 48);
  v22[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  v22[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  v22[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_operation_deliver_data_block_invoke;
  v22[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&unk_1E1E878B8;
  v23 = a2;
  v24 = v15;
  v25 = v8;
  v22[4] = v16;
  v22[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))subrange_VARIANT_mp;
  v22[6] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v18;
  v22[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v17;
  dispatch_async_VARIANT_mp(v21, v22);
}

void _dispatch_disk_dispose_VARIANT_mp(uint64_t a1, const char *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 112);
  if (v2)
    *(_QWORD *)(v2 + 120) = *(_QWORD *)(a1 + 120);
  **(_QWORD **)(a1 + 120) = v2;
  dispatch_release_VARIANT_mp(*(unsigned int **)(a1 + 72), a2);
}

unsigned int *___dispatch_io_init_block_invoke(uint64_t a1)
{
  unsigned int *v2;
  const char *v3;
  unsigned int *result;
  unsigned int *v5;
  int v6;
  uint64_t (*v7[5])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v8;

  v7[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  v7[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  v7[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_io_init_block_invoke_2;
  v7[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&unk_1E1E87540;
  v2 = *(unsigned int **)(a1 + 40);
  v7[4] = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  v8 = *(_DWORD *)(a1 + 48);
  dispatch_async_VARIANT_mp(v2, v7);
  result = *(unsigned int **)(a1 + 40);
  if (result[2] != 0x7FFFFFFF)
  {
    v5 = result + 2;
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (v6 <= 1)
    {
      if (v6 != 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      return (unsigned int *)_os_object_dispose(result, v3);
    }
  }
  return result;
}

uint64_t ___dispatch_io_init_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

uint64_t ___dispatch_io_stop_block_invoke(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  uint64_t (*aBlock[5])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned int **)(v1 + 56);
  aBlock[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_io_stop_block_invoke_2;
  aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_53;
  aBlock[4] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v1;
  return dispatch_async_VARIANT_mp(v2, aBlock);
}

unsigned int *___dispatch_io_stop_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned int *v6;
  int v7;
  unsigned int *result;
  unsigned int *v9;
  int v10;
  uint64_t (*aBlock[5])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 112);
  if (v3)
  {
    _dispatch_fd_entry_cleanup_operations(*(_QWORD *)(v2 + 112), v2);
    v4 = *(_QWORD *)(a1 + 32);
    if ((*(_BYTE *)(v4 + 120) & 1) == 0)
    {
      v5 = *(_QWORD **)(v3 + 8);
      if (v5)
      {
        *v5 = 0;
        v4 = *(_QWORD *)(a1 + 32);
      }
      *(_QWORD *)(v4 + 112) = 0;
      dispatch_resume_VARIANT_mp(*(_QWORD *)(v3 + 64));
    }
  }
  else if (*(_DWORD *)(v2 + 124) != -1)
  {
    if (*(_DWORD *)(v2 + 8) != 0x7FFFFFFF)
    {
      v6 = (unsigned int *)(v2 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
      if (v7 < 1)
        dispatch_set_target_queue_VARIANT_mp_cold_2();
      v2 = *(_QWORD *)(a1 + 32);
    }
    aBlock[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
    aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
    aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_io_stop_block_invoke_3;
    aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_52;
    aBlock[4] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v2;
    dispatch_async_VARIANT_mp((unsigned int *)_dispatch_io_fds_lockq, aBlock);
  }
  result = *(unsigned int **)(a1 + 32);
  if (result[2] != 0x7FFFFFFF)
  {
    v9 = result + 2;
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (v10 <= 1)
    {
      if (v10 != 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      return (unsigned int *)_os_object_dispose(result, (const char *)v2);
    }
  }
  return result;
}

uint64_t _dispatch_fd_entry_cleanup_operations(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  int v6;
  unsigned int *v7;
  unsigned int *v8;
  char v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v13;
  unsigned int *v14;
  uint64_t (*v15[7])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*aBlock[6])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v3 = result;
  v4 = *(_QWORD *)(result + 56);
  if (v4)
  {
    if (a2 && *(_DWORD *)(a2 + 8) != 0x7FFFFFFF)
    {
      v5 = (unsigned int *)(a2 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
      if (v6 <= 0)
        dispatch_set_target_queue_VARIANT_mp_cold_2();
    }
    dispatch_suspend_VARIANT_mp(*(_QWORD *)(result + 64));
    v7 = *(unsigned int **)(*(_QWORD *)(v3 + 56) + 72);
    aBlock[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
    aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
    aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_fd_entry_cleanup_operations_block_invoke;
    aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_55;
    aBlock[4] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v3;
    aBlock[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a2;
    return dispatch_async_VARIANT_mp(v7, aBlock);
  }
  else
  {
    v8 = (unsigned int *)(a2 + 8);
    v9 = 1;
    v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
    do
    {
      v11 = v9;
      v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 8 * v4 + 40);
      if (v12)
      {
        if (a2 && *v8 != 0x7FFFFFFF)
        {
          do
            v13 = __ldxr(v8);
          while (__stxr(v13 + 1, v8));
          if (v13 <= 0)
            dispatch_set_target_queue_VARIANT_mp_cold_2();
        }
        dispatch_suspend_VARIANT_mp(*(_QWORD *)(v3 + 64));
        v14 = *(unsigned int **)v12;
        v15[0] = v10;
        v15[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
        v15[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_fd_entry_cleanup_operations_block_invoke_2;
        v15[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_56;
        v15[4] = v12;
        v15[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a2;
        v15[6] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v3;
        result = dispatch_async_VARIANT_mp(v14, v15);
      }
      v9 = 0;
      v4 = 1;
    }
    while ((v11 & 1) != 0);
  }
  return result;
}

uint64_t ___dispatch_io_stop_block_invoke_3(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t result;
  unsigned int *v5;
  int v6;

  v2 = *(unsigned int **)(a1 + 32);
  v3 = v2[31];
  result = _dispatch_io_fds[v3 & 0x3F];
  if (result)
  {
    while (*(_DWORD *)result != v3)
    {
      result = *(_QWORD *)(result + 112);
      if (!result)
        goto LABEL_6;
    }
    result = _dispatch_fd_entry_cleanup_operations(result, (uint64_t)v2);
    v2 = *(unsigned int **)(a1 + 32);
  }
LABEL_6:
  if (v2[2] != 0x7FFFFFFF)
  {
    v5 = v2 + 2;
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (v6 <= 1)
    {
      if (v6 != 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      return _os_object_dispose(v2, (const char *)v2);
    }
  }
  return result;
}

unsigned int *___dispatch_fd_entry_cleanup_operations_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  unsigned int *result;
  unsigned int *v9;
  int v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 56);
  v4 = *(_QWORD *)(v3 + 48);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 40);
    do
    {
      while (1)
      {
        v6 = v4;
        v4 = *(_QWORD *)(v4 + 240);
        if (!*(_BYTE *)(v6 + 160) && (!v5 || *(_QWORD *)(v6 + 136) == v5))
          break;
        if (!v4)
          goto LABEL_9;
      }
      _dispatch_disk_complete_operation(v3, v6);
    }
    while (v4);
LABEL_9:
    v2 = *(_QWORD *)(a1 + 32);
  }
  dispatch_resume_VARIANT_mp(*(_QWORD *)(v2 + 64));
  result = *(unsigned int **)(a1 + 40);
  if (result)
  {
    if (result[2] != 0x7FFFFFFF)
    {
      v9 = result + 2;
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (v10 <= 1)
      {
        if (v10 != 1)
          _os_object_allows_weak_reference_VARIANT_mp_cold_1();
        return (unsigned int *)_os_object_dispose(result, v7);
      }
    }
  }
  return result;
}

unsigned int *___dispatch_fd_entry_cleanup_operations_block_invoke_2(uint64_t *a1)
{
  const char *v2;
  unsigned int *result;
  unsigned int *v4;
  int v5;

  _dispatch_stream_cleanup_operations(a1[4], a1[5]);
  dispatch_resume_VARIANT_mp(*(_QWORD *)(a1[6] + 64));
  result = (unsigned int *)a1[5];
  if (result)
  {
    if (result[2] != 0x7FFFFFFF)
    {
      v4 = result + 2;
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (v5 <= 1)
      {
        if (v5 != 1)
          _os_object_allows_weak_reference_VARIANT_mp_cold_1();
        return (unsigned int *)_os_object_dispose(result, v2);
      }
    }
  }
  return result;
}

uint64_t _dispatch_stream_cleanup_operations(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  v4 = *(_QWORD *)(result + 48);
  if (v4)
  {
    do
    {
      v5 = *(_QWORD *)(v4 + 240);
      if (!a2 || *(_QWORD *)(v4 + 136) == a2)
        result = (uint64_t)_dispatch_stream_complete_operation(v3, v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = *(_QWORD *)(v3 + 32);
  if (v6)
  {
    do
    {
      v7 = *(_QWORD *)(v6 + 240);
      if (!a2 || *(_QWORD *)(v6 + 136) == a2)
        result = (uint64_t)_dispatch_stream_complete_operation(v3, v6);
      v6 = v7;
    }
    while (v7);
  }
  if (*(_BYTE *)(v3 + 24) && !*(_QWORD *)(v3 + 48) && !*(_QWORD *)(v3 + 32))
  {
    result = dispatch_suspend_VARIANT_mp(*(_QWORD *)(v3 + 8));
    *(_BYTE *)(v3 + 24) = 0;
  }
  return result;
}

unsigned int *_dispatch_disk_complete_operation(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int *result;
  unsigned int *v9;
  int v10;

  if (*(_QWORD *)(a1 + 64) == a2)
    *(_QWORD *)(a1 + 64) = **(_QWORD **)(*(_QWORD *)(a2 + 248) + 8);
  if (!*(_QWORD *)(a2 + 64))
  {
    v3 = *(_QWORD **)(a2 + 256);
    v4 = *(_QWORD **)(a2 + 264);
    if (v3)
    {
      v3[33] = v4;
      **(_QWORD **)(a2 + 264) = v3;
      v3[30] = 0;
      v5 = *(_QWORD **)(a1 + 56);
      v3[31] = v5;
      *v5 = v3;
      *(_QWORD *)(a1 + 56) = v3 + 30;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a2 + 144) + 104) = v4;
      *v4 = 0;
    }
  }
  v6 = *(_QWORD *)(a2 + 240);
  v7 = *(_QWORD **)(a2 + 248);
  if (v6)
  {
    *(_QWORD *)(v6 + 248) = v7;
    v7 = *(_QWORD **)(a2 + 248);
  }
  else
  {
    *(_QWORD *)(a1 + 56) = v7;
  }
  *v7 = v6;
  result = *(unsigned int **)(a2 + 152);
  if (result)
    result = (unsigned int *)dispatch_source_cancel_VARIANT_mp(result);
  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF)
  {
    v9 = (unsigned int *)(a2 + 8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (v10 <= 1)
    {
      if (v10 != 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      return (unsigned int *)_os_object_dispose((void *)a2, (const char *)a2);
    }
  }
  return result;
}

unsigned int *_dispatch_stream_complete_operation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  unsigned int *result;
  unsigned int *v6;
  int v7;

  v3 = *(_QWORD *)(a2 + 240);
  if (v3)
    v4 = (_QWORD *)(v3 + 248);
  else
    v4 = (_QWORD *)(a1 + 16 * *(_QWORD *)(a2 + 64) + 40);
  *v4 = *(_QWORD *)(a2 + 248);
  **(_QWORD **)(a2 + 248) = v3;
  if (*(_QWORD *)(a1 + 16) == a2)
    *(_QWORD *)(a1 + 16) = 0;
  result = *(unsigned int **)(a2 + 152);
  if (result)
    result = (unsigned int *)dispatch_source_cancel_VARIANT_mp(result);
  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF)
  {
    v6 = (unsigned int *)(a2 + 8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (v7 <= 1)
    {
      if (v7 != 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      return (unsigned int *)_os_object_dispose((void *)a2, (const char *)a2);
    }
  }
  return result;
}

unsigned int *___dispatch_operation_create_block_invoke(uint64_t a1)
{
  unsigned int *v2;
  const char *v3;
  unsigned int *result;
  unsigned int *v5;
  int v6;
  uint64_t (*v7[5])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  __int128 v8;
  uint64_t v9;

  v7[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  v7[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  v7[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_operation_create_block_invoke_2;
  v7[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&unk_1E1E87630;
  v9 = *(_QWORD *)(a1 + 64);
  v2 = *(unsigned int **)(a1 + 40);
  v7[4] = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  v8 = *(_OWORD *)(a1 + 48);
  dispatch_async_VARIANT_mp(v2, v7);
  result = *(unsigned int **)(a1 + 40);
  if (result[2] != 0x7FFFFFFF)
  {
    v5 = result + 2;
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (v6 <= 1)
    {
      if (v6 != 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      return (unsigned int *)_os_object_dispose(result, v3);
    }
  }
  return result;
}

void ___dispatch_operation_create_block_invoke_2(uint64_t a1)
{
  const char *v2;
  unsigned int *v3;
  unsigned int *v4;
  int v5;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v3 = *(unsigned int **)(a1 + 48);
  if (v3[2] != 0x7FFFFFFF)
  {
    v4 = v3 + 2;
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (v5 <= 1)
    {
      if (v5 != 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      _os_object_dispose(v3, v2);
    }
  }
  _dispatch_objc_release(*(id *)(a1 + 40));
}

void ___dispatch_operation_enqueue_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  _dispatch_objc_release(*(id *)(a1 + 40));
}

void ___dispatch_operation_enqueue_block_invoke_2(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  BOOL v4;
  uint64_t *v5;

  v3 = *(uint64_t **)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 40);
  if (_dispatch_operation_should_enqueue((uint64_t)v2, (__objc2_class **)*v3, *(id *)(a1 + 48)))
  {
    if (v3[6])
      v4 = 1;
    else
      v4 = v3[4] != 0;
    v2[30] = 0;
    v5 = &v3[2 * v2[8]];
    v2[31] = v5[5];
    *(_QWORD *)v5[5] = v2;
    v5[5] = (uint64_t)(v2 + 30);
    if (!v4)
      dispatch_async_f_VARIANT_mp((_DWORD *)*v3, *v3, (uint64_t)_dispatch_stream_queue_handler);
  }
  _dispatch_objc_release(*(id *)(a1 + 48));
}

void ___dispatch_operation_enqueue_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 40);
  if (_dispatch_operation_should_enqueue((uint64_t)v3, *(__objc2_class ***)(v2 + 72), *(id *)(a1 + 48)))
  {
    if (v3[8])
    {
      v3[30] = 0;
      v4 = *(_QWORD **)(v2 + 56);
      v3[31] = v4;
      *v4 = v3;
      *(_QWORD *)(v2 + 56) = v3 + 30;
    }
    else
    {
      v5 = v3[18];
      if (!*(_QWORD *)(v5 + 96))
      {
        v3[30] = 0;
        v6 = *(_QWORD **)(v2 + 56);
        v3[31] = v6;
        *v6 = v3;
        *(_QWORD *)(v2 + 56) = v3 + 30;
        v5 = v3[18];
      }
      v7 = *(_QWORD **)(v5 + 104);
      v3[32] = 0;
      v3[33] = v7;
      *v7 = v3;
      *(_QWORD *)(v3[18] + 104) = v3 + 32;
    }
    _dispatch_disk_handler((unsigned int *)v2);
  }
  _dispatch_objc_release(*(id *)(a1 + 48));
}

uint64_t _dispatch_operation_should_enqueue(uint64_t a1, __objc2_class **a2, id a3)
{
  const char *v6;
  int v7;
  int v8;
  unsigned int *v9;
  int v10;
  void (*VARIANT_mp)(void (**)(void));
  dispatch_time_t v13;
  void (*v14[6])(void (**)(void));

  _dispatch_objc_retain(a3);
  *(_QWORD *)(a1 + 232) = a3;
  v7 = *(_DWORD *)(*(_QWORD *)(a1 + 136) + 120);
  if ((v7 & 3) != 0)
  {
    if ((v7 & 2) != 0)
    {
      v8 = 89;
      goto LABEL_5;
    }
  }
  else
  {
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 144) + 24);
    if (v8)
    {
LABEL_5:
      *(_DWORD *)(a1 + 120) = v8;
      if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
      {
        v9 = (unsigned int *)(a1 + 8);
        do
          v10 = __ldxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (v10 <= 1)
        {
          if (v10 != 1)
            _os_object_allows_weak_reference_VARIANT_mp_cold_1();
          _os_object_dispose((void *)a1, v6);
        }
      }
      return 0;
    }
  }
  if (*(_QWORD *)(a1 + 88))
  {
    VARIANT_mp = *(void (**)(void (**)(void)))(a1 + 152);
    if (!VARIANT_mp)
    {
      VARIANT_mp = (void (*)(void (**)(void)))dispatch_source_create_VARIANT_mp((uint64_t)&_dispatch_source_type_timer_VARIANT_mp, 0, 0, a2);
      v13 = dispatch_time(0, *(_QWORD *)(a1 + 88));
      dispatch_source_set_timer_VARIANT_mp(VARIANT_mp, v13, *(_QWORD *)(a1 + 88), 0);
      v14[0] = (void (*)(void (**)(void)))MEMORY[0x1E0C87450];
      v14[1] = (void (*)(void (**)(void)))0x40000000;
      v14[2] = (void (*)(void (**)(void)))___dispatch_operation_timer_block_invoke;
      v14[3] = (void (*)(void (**)(void)))&__block_descriptor_tmp_63;
      v14[4] = VARIANT_mp;
      v14[5] = (void (*)(void (**)(void)))a1;
      dispatch_source_set_event_handler_VARIANT_mp((uint64_t)VARIANT_mp, v14);
      *(_QWORD *)(a1 + 152) = VARIANT_mp;
    }
    dispatch_resume_VARIANT_mp((uint64_t)VARIANT_mp);
  }
  return 1;
}

unsigned int *_dispatch_stream_queue_handler(unint64_t *a1)
{
  unsigned int *result;

  result = (unsigned int *)dispatch_get_context_VARIANT_mp(a1);
  if (result)
    return _dispatch_stream_handler(result);
  return result;
}

void ___dispatch_operation_timer_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  if (!dispatch_source_testcancel_VARIANT_mp(*(_QWORD *)(a1 + 32)))
  {
    v2 = *(_QWORD *)(a1 + 40);
    v3 = *(_QWORD *)(v2 + 96) & 1;
    if (*(_BYTE *)(v2 + 160))
      v4 = (*(_QWORD *)(v2 + 96) & 1) == 0;
    else
      v4 = 1;
    if (v4)
      _dispatch_operation_deliver_data(v2, v3);
    else
      *(_DWORD *)(v2 + 184) = v3;
  }
}

unsigned int *_dispatch_stream_handler(unsigned int *result)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  void *VARIANT_mp;
  int v10;
  char **v11;
  unsigned int *v12;
  void (*v13)(void (**)(void));
  uint64_t (*v14[5])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v15[5])(void (**)(void));

  for (i = (uint64_t)result; ; result = _dispatch_stream_complete_operation(i, v2))
  {
    v2 = *(_QWORD *)(i + 16);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 64);
      if (v3)
      {
        if (v3 != 1)
          return result;
        v2 = *(_QWORD *)(v2 + 240);
        if (!v2)
        {
          v2 = *(_QWORD *)(i + 48);
          if (!v2)
            return result;
        }
      }
    }
    else
    {
      v4 = *(_QWORD *)(i + 32);
      if (!(*(_QWORD *)(i + 48) | v4))
        return result;
      v2 = v4 ? *(_QWORD *)(i + 32) : *(_QWORD *)(i + 48);
      if (!v2)
        return result;
    }
    v5 = *(_DWORD *)(*(_QWORD *)(v2 + 136) + 120);
    if ((v5 & 3) != 0)
      break;
    v7 = *(_QWORD *)(v2 + 144);
    v6 = *(_DWORD *)(v7 + 24);
    if (!v6)
      goto LABEL_19;
LABEL_17:
    *(_DWORD *)(v2 + 120) = v6;
  }
  if ((v5 & 2) != 0)
  {
    v6 = 89;
    goto LABEL_17;
  }
  v7 = *(_QWORD *)(v2 + 144);
LABEL_19:
  *(_QWORD *)(i + 16) = v2;
  dispatch_suspend_VARIANT_mp(*(_QWORD *)(v7 + 64));
  if (*(_QWORD *)(v2 + 216))
    v8 = 1;
  else
    v8 = byte_1EDF51AD8 == 0;
  if (!v8)
    _dispatch_operation_deliver_data(v2, 1);
  switch(_dispatch_operation_perform(v2))
  {
    case 1u:
      goto LABEL_27;
    case 2u:
      _dispatch_operation_deliver_data(v2, 0);
      goto LABEL_28;
    case 3u:
      _dispatch_operation_deliver_data(v2, 9);
LABEL_27:
      _dispatch_stream_complete_operation(i, v2);
LABEL_28:
      if (*(_QWORD *)(i + 48) || *(_QWORD *)(i + 32))
        dispatch_async_f_VARIANT_mp(*(_DWORD **)i, *(_QWORD *)i, (uint64_t)_dispatch_stream_queue_handler);
      return (unsigned int *)dispatch_resume_VARIANT_mp(*(_QWORD *)(v7 + 64));
    case 4u:
      _dispatch_stream_complete_operation(i, v2);
      goto LABEL_32;
    case 5u:
LABEL_32:
      if (!*(_QWORD *)(i + 48) && !*(_QWORD *)(i + 32))
        return (unsigned int *)dispatch_resume_VARIANT_mp(*(_QWORD *)(v7 + 64));
      *(_BYTE *)(i + 24) = 1;
      VARIANT_mp = *(void **)(i + 8);
      if (VARIANT_mp)
        goto LABEL_43;
      v10 = *(_DWORD *)(v2 + 56);
      if (!v10)
      {
        v11 = &_dispatch_source_type_read_VARIANT_mp;
        goto LABEL_41;
      }
      if (v10 == 1)
      {
        v11 = &_dispatch_source_type_write_VARIANT_mp;
LABEL_41:
        VARIANT_mp = (void *)dispatch_source_create_VARIANT_mp((uint64_t)v11, **(int **)(v2 + 144), 0, *(__objc2_class ***)i);
        dispatch_set_context_VARIANT_mp(VARIANT_mp, (const char *)i);
        dispatch_source_set_event_handler_f_VARIANT_mp((uint64_t)VARIANT_mp, (void (**)(void (**)(void)))_dispatch_stream_source_handler);
        v13 = *(void (**)(void (**)(void)))(*(_QWORD *)(v2 + 144) + 64);
        v15[0] = (void (*)(void (**)(void)))MEMORY[0x1E0C87450];
        v15[1] = (void (*)(void (**)(void)))0x40000000;
        v15[2] = (void (*)(void (**)(void)))___dispatch_stream_source_block_invoke;
        v15[3] = (void (*)(void (**)(void)))&__block_descriptor_tmp_67;
        v15[4] = v13;
        dispatch_source_set_mandatory_cancel_handler_VARIANT_mp((uint64_t)VARIANT_mp, v15);
        *(_QWORD *)(i + 8) = VARIANT_mp;
        goto LABEL_43;
      }
      VARIANT_mp = 0;
LABEL_43:
      dispatch_resume_VARIANT_mp((uint64_t)VARIANT_mp);
      return (unsigned int *)dispatch_resume_VARIANT_mp(*(_QWORD *)(v7 + 64));
    case 6u:
      _dispatch_stream_cleanup_operations(i, *(_QWORD *)(v2 + 136));
      return (unsigned int *)dispatch_resume_VARIANT_mp(*(_QWORD *)(v7 + 64));
    case 7u:
      dispatch_suspend_VARIANT_mp(*(_QWORD *)(v7 + 64));
      v12 = *(unsigned int **)(v7 + 72);
      v14[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
      v14[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
      v14[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_stream_handler_block_invoke;
      v14[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_64;
      v14[4] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v7;
      dispatch_async_VARIANT_mp(v12, v14);
      return (unsigned int *)dispatch_resume_VARIANT_mp(*(_QWORD *)(v7 + 64));
    default:
      return (unsigned int *)dispatch_resume_VARIANT_mp(*(_QWORD *)(v7 + 64));
  }
}

uint64_t _dispatch_operation_perform(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  _DWORD *v5;
  unint64_t StatusReg;
  int v7;
  uint64_t v8;
  uint64_t NOCANCEL;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t size_VARIANT_mp;
  size_t v15;
  uint64_t v16;
  size_t v17;
  unsigned int *v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __objc2_class *v24;
  __objc2_class **subrange_VARIANT_mp;
  _QWORD v26[6];

  if (a1)
  {
    v2 = *(_DWORD *)(*(_QWORD *)(a1 + 136) + 120);
    if ((v2 & 3) == 0)
    {
      v3 = *(_QWORD *)(a1 + 144) + 24;
      goto LABEL_8;
    }
  }
  else
  {
    LOBYTE(v2) = MEMORY[0x78];
    if ((MEMORY[0x78] & 3) == 0)
    {
      v3 = 144;
LABEL_8:
      v4 = *(_DWORD *)v3;
      if (*(_DWORD *)v3)
        goto LABEL_36;
      goto LABEL_9;
    }
  }
  if ((v2 & 2) != 0)
  {
    *(_DWORD *)(a1 + 120) = 89;
    return 6;
  }
LABEL_9:
  if (*(_QWORD *)(a1 + 176))
    goto LABEL_10;
  v11 = *(_QWORD *)(a1 + 80);
  v12 = dispatch_io_defaults;
  v13 = *(_DWORD *)(a1 + 56);
  if (v13 == 1)
  {
    if (dispatch_io_defaults >= v11)
      v22 = *(_QWORD *)(a1 + 80);
    else
      v22 = dispatch_io_defaults;
    *(_QWORD *)(a1 + 192) = 0;
    v23 = *(_QWORD **)(a1 + 232);
    v26[0] = MEMORY[0x1E0C87450];
    v26[1] = 0x40000000;
    v26[2] = ___dispatch_operation_perform_block_invoke;
    v26[3] = &__block_descriptor_tmp_66;
    v26[4] = a1;
    v26[5] = v22;
    dispatch_data_apply_VARIANT_mp(v23, (uint64_t)v26);
    v24 = *(__objc2_class **)(a1 + 192);
    if ((unint64_t)v24 > v11)
    {
      *(_QWORD *)(a1 + 192) = v11;
      v24 = (__objc2_class *)v11;
    }
    subrange_VARIANT_mp = dispatch_data_create_subrange_VARIANT_mp(*(__objc2_class **)(a1 + 232), 0, v24);
    *(_QWORD *)(a1 + 224) = dispatch_data_create_map_VARIANT_mp(subrange_VARIANT_mp, (_QWORD *)(a1 + 176), 0);
    _dispatch_objc_release(subrange_VARIANT_mp);
    goto LABEL_10;
  }
  if (v13)
    goto LABEL_10;
  size_VARIANT_mp = dispatch_data_get_size_VARIANT_mp(*(_QWORD *)(a1 + 232));
  if (v11 - size_VARIANT_mp >= v12)
    v15 = v12;
  else
    v15 = v11 - size_VARIANT_mp;
  v16 = *(_QWORD *)(a1 + 112);
  if (v16 != -1)
  {
    v17 = v16 - *(_QWORD *)(a1 + 216);
    if (v17 < v15)
      v15 = v17;
  }
  *(_QWORD *)(a1 + 192) = v15;
  v4 = malloc_type_posix_memalign((void **)(a1 + 176), *MEMORY[0x1E0C88820], v15, 0x23812559uLL);
  if (!v4)
  {
LABEL_10:
    v5 = *(_DWORD **)(a1 + 144);
    if (*v5 == -1)
    {
      v4 = _dispatch_fd_entry_open((uint64_t)v5, *(_QWORD *)(a1 + 136));
      if (v4)
        goto LABEL_36;
    }
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      v7 = *(_DWORD *)(a1 + 56);
      if (v7 == 1)
      {
        v10 = *(_QWORD *)(a1 + 64);
        if (v10 == 1)
        {
          NOCANCEL = pwrite_NOCANCEL();
        }
        else
        {
          if (v10)
            goto LABEL_23;
          NOCANCEL = write_NOCANCEL();
        }
      }
      else
      {
        if (v7)
          goto LABEL_23;
        v8 = *(_QWORD *)(a1 + 64);
        if (v8 == 1)
        {
          NOCANCEL = pread_NOCANCEL();
        }
        else
        {
          if (v8)
            goto LABEL_23;
          NOCANCEL = read_NOCANCEL();
        }
      }
      if (NOCANCEL != -1)
      {
        if (!NOCANCEL)
          return 3;
        *(_QWORD *)(a1 + 200) += NOCANCEL;
        v21 = *(_QWORD *)(a1 + 216) + NOCANCEL;
        *(_QWORD *)(a1 + 216) = v21;
        if (v21 == *(_QWORD *)(a1 + 112))
          return 1;
        else
          return 2;
      }
LABEL_23:
      v4 = **(_DWORD **)(StatusReg + 8);
    }
    while (v4 == 4);
  }
LABEL_36:
  if (v4 == 35)
  {
    if (!*(_DWORD *)(a1 + 56)
      && *(_QWORD *)(a1 + 216)
      && *(_QWORD *)(a1 + 136) == *(_QWORD *)(*(_QWORD *)(a1 + 144) + 88))
    {
      return 4;
    }
    else
    {
      return 5;
    }
  }
  *(_DWORD *)(a1 + 120) = v4;
  if (v4 == 89)
    return 6;
  if (v4 != 9)
    return 1;
  v19 = (unsigned int *)(*(_QWORD *)(a1 + 144) + 24);
  while (!__ldxr(v19))
  {
    if (!__stxr(9u, v19))
      return 7;
  }
  __clrex();
  return 7;
}

uint64_t ___dispatch_stream_handler_block_invoke(uint64_t a1)
{
  _dispatch_fd_entry_cleanup_operations(*(_QWORD *)(a1 + 32), 0);
  return dispatch_resume_VARIANT_mp(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64));
}

BOOL ___dispatch_operation_perform_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 192);
  v7 = v6 + a5;
  if (!v6 || (v8 = *(_QWORD *)(a1 + 40), v7 <= v8))
  {
    *(_QWORD *)(v5 + 192) = v7;
    v8 = *(_QWORD *)(a1 + 40);
  }
  return v7 < v8;
}

uint64_t _dispatch_stream_source_handler(uint64_t a1)
{
  dispatch_suspend_VARIANT_mp(*(_QWORD *)(a1 + 8));
  *(_BYTE *)(a1 + 24) = 0;
  return _dispatch_stream_handler(a1);
}

uint64_t ___dispatch_stream_source_block_invoke(uint64_t a1)
{
  return dispatch_resume_VARIANT_mp(*(_QWORD *)(a1 + 32));
}

unsigned int *_dispatch_disk_handler(unsigned int *result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  int v11;
  unsigned int *v12;
  int v13;
  uint64_t v14;

  if (!*((_BYTE *)result + 108))
  {
    v1 = (uint64_t)result;
    v3 = *((_QWORD *)result + 10);
    v2 = *((_QWORD *)result + 11);
    v4 = v2;
    if (v2 <= v3)
      v4 = *((_QWORD *)result + 16) + v2;
    if (v3 > v4)
    {
LABEL_33:
      *(_QWORD *)(v1 + 80) = v3 % *(_QWORD *)(v1 + 128);
      v14 = *(_QWORD *)(v1 + 8 * v2 + 136);
      if (v14)
      {
        *(_BYTE *)(v1 + 108) = 1;
        return dispatch_async_f_VARIANT_mp(*(_DWORD **)(v14 + 24), v1, (uint64_t)_dispatch_disk_perform);
      }
      return result;
    }
    while (1)
    {
      v5 = v3 % *(_QWORD *)(v1 + 128);
      if (*(_QWORD *)(v1 + 8 * v5 + 136) || (v6 = *(_QWORD *)(v1 + 48)) == 0)
      {
LABEL_32:
        v2 = *(_QWORD *)(v1 + 88);
        goto LABEL_33;
      }
      v7 = *(_QWORD *)(v1 + 64);
      v8 = v7;
      if (v7)
      {
        do
        {
          if (*(_QWORD *)(v8 + 240))
            v8 = *(_QWORD *)(v8 + 240);
          else
            v8 = *(_QWORD *)(v1 + 48);
          if (*(_BYTE *)(v8 + 160))
            v9 = v8 == v7;
          else
            v9 = 1;
        }
        while (!v9);
        if (*(_BYTE *)(v8 + 160))
          goto LABEL_32;
      }
      else
      {
        v8 = *(_QWORD *)(v1 + 48);
        if (*(_BYTE *)(v6 + 160))
          goto LABEL_32;
      }
      *(_QWORD *)(v1 + 64) = v8;
      v10 = *(_DWORD *)(*(_QWORD *)(v8 + 136) + 120);
      if ((v10 & 3) != 0)
      {
        if ((v10 & 2) == 0)
          goto LABEL_25;
        v11 = 89;
      }
      else
      {
        v11 = *(_DWORD *)(*(_QWORD *)(v8 + 144) + 24);
        if (!v11)
        {
LABEL_25:
          if (*(_DWORD *)(v8 + 8) != 0x7FFFFFFF)
          {
            v12 = (unsigned int *)(v8 + 8);
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            if (v13 < 1)
              dispatch_set_target_queue_VARIANT_mp_cold_2();
            v5 = v3 % *(_QWORD *)(v1 + 128);
          }
          *(_QWORD *)(v1 + 8 * v5 + 136) = v8;
          *(_BYTE *)(v8 + 160) = 1;
          ++v3;
          goto LABEL_31;
        }
      }
      *(_DWORD *)(v8 + 120) = v11;
      result = _dispatch_disk_complete_operation(v1, v8);
LABEL_31:
      if (v3 > v4)
        goto LABEL_32;
    }
  }
  return result;
}

uint64_t _dispatch_disk_perform(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t StatusReg;
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  BOOL v10;
  int v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t (*aBlock[6])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v27;
  int64_t v28;
  uint64_t v29;

  v2 = dispatch_io_defaults;
  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(_QWORD *)(a1 + 80);
  if (v4 <= v3)
    v4 += *(_QWORD *)(a1 + 128);
  v5 = (unint64_t *)MEMORY[0x1E0C88820];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    v7 = v3 % *(_QWORD *)(a1 + 128);
    v8 = *(_QWORD *)(a1 + 8 * v7 + 136);
    if (!v8)
      break;
    if (*(_DWORD *)(v8 + 56) != 1)
    {
      v9 = *(_DWORD **)(v8 + 144);
      if (*v9 != -1 || !_dispatch_fd_entry_open((uint64_t)v9, *(_QWORD *)(v8 + 136)))
      {
        if (*(_QWORD *)(v8 + 216))
          v10 = 1;
        else
          v10 = byte_1EDF51AD8 == 0;
        if (!v10)
          _dispatch_operation_deliver_data(v8, 1);
        if (v4 - v3 == 1 && !*(_QWORD *)(a1 + 8 * *(_QWORD *)(a1 + 80) + 136))
          v2 <<= *(_QWORD *)(v8 + 168) == 0;
        v11 = *(_DWORD *)(*(_QWORD *)(v8 + 136) + 120);
        if ((v11 & 3) != 0)
        {
          if ((v11 & 2) == 0)
            goto LABEL_23;
        }
        else if (!*(_DWORD *)(*(_QWORD *)(v8 + 144) + 24))
        {
LABEL_23:
          v29 = 0;
          v12 = *(_QWORD *)(v8 + 168);
          v13 = *v5;
          v14 = *(_QWORD *)(v8 + 104) + v2;
          if (v12 <= (uint64_t)(v14 + *(_QWORD *)(v8 + 216) + *v5))
          {
            if (v12)
            {
              v15 = v2;
            }
            else
            {
              v16 = v14 % v13;
              v17 = v13 - v14 % v13;
              if (v16)
                v18 = v17;
              else
                v18 = 0;
              v15 = v18 + v2;
              v12 = *(_QWORD *)(v8 + 104);
            }
            LODWORD(v29) = v15;
            v28 = v12;
            *(_QWORD *)(v8 + 168) = v12 + v15;
            while (fcntl_NOCANCEL() == -1)
            {
              v19 = **(_DWORD **)(StatusReg + 8);
              if (v19 != 4)
              {
                if (v19 > 0x2D || ((1 << v19) & 0x200008000001) == 0)
                  _dispatch_bug(2308, (int)v19);
                break;
              }
            }
          }
        }
      }
    }
    if (++v3 >= v4)
    {
      v7 = v3 % *(_QWORD *)(a1 + 128);
      break;
    }
  }
  *(_QWORD *)(a1 + 96) = v7;
  v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 136 + 8 * *(_QWORD *)(a1 + 88));
  v22 = _dispatch_operation_perform((uint64_t)v21);
  v23 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 136 + 8 * v23) = 0;
  *(_QWORD *)(a1 + 88) = (unint64_t)(v23 + 1) % *(_QWORD *)(a1 + 128);
  v24 = *(unsigned int **)(a1 + 72);
  aBlock[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_disk_perform_block_invoke;
  aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_68;
  v27 = v22;
  aBlock[4] = v21;
  aBlock[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a1;
  return dispatch_async_VARIANT_mp(v24, aBlock);
}

unsigned int *___dispatch_disk_perform_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  unsigned int *result;
  unsigned int *v8;
  int v9;

  switch(*(_DWORD *)(a1 + 48))
  {
    case 1:
      goto LABEL_4;
    case 2:
      _dispatch_operation_deliver_data(*(_QWORD *)(a1 + 32), 0);
      break;
    case 3:
      _dispatch_operation_deliver_data(*(_QWORD *)(a1 + 32), 9);
LABEL_4:
      _dispatch_disk_complete_operation(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
      break;
    case 6:
      _dispatch_disk_cleanup_operations(*(unsigned int **)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136));
      break;
    case 7:
      v2 = *(_QWORD *)(a1 + 40);
      v3 = *(_QWORD *)(v2 + 48);
      if (v3)
      {
        do
        {
          v4 = *(_QWORD *)(v3 + 240);
          _dispatch_disk_complete_operation(v2, v3);
          v3 = v4;
        }
        while (v4);
      }
      break;
    default:
      break;
  }
  v5 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 160) = 0;
  *(_BYTE *)(v5 + 108) = 0;
  _dispatch_disk_handler();
  result = *(unsigned int **)(a1 + 32);
  if (result[2] != 0x7FFFFFFF)
  {
    v8 = result + 2;
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (v9 <= 1)
    {
      if (v9 != 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      return (unsigned int *)_os_object_dispose(result, v6);
    }
  }
  return result;
}

unsigned int *_dispatch_disk_cleanup_operations(unsigned int *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((_QWORD *)result + 6);
  if (v3)
  {
    v4 = (uint64_t)result;
    do
    {
      v5 = *(_QWORD *)(v3 + 240);
      if (!a2 || *(_QWORD *)(v3 + 136) == a2)
        result = _dispatch_disk_complete_operation(v4, v3);
      v3 = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t ___dispatch_fd_entry_init_async_block_invoke(uint64_t a1)
{
  int v2;
  uint64_t (**v3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t (*v13[6])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v14[5])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v15;
  uint64_t (*v16[5])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*aBlock[5])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v18;

  v2 = *(_DWORD *)(a1 + 40);
  v3 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&_dispatch_io_fds[v2 & 0x3F];
  v4 = *v3;
  v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  if (*v3)
  {
    while (*(_DWORD *)v4 != v2)
    {
      v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*((_QWORD *)v4 + 14);
      if (!v4)
        goto LABEL_4;
    }
    dispatch_suspend_VARIANT_mp(*((_QWORD *)v4 + 8));
  }
  else
  {
LABEL_4:
    v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))_dispatch_fd_entry_create((__objc2_class **)_dispatch_io_fds_lockq);
    v4 = v6;
    *(_DWORD *)v6 = v2;
    v7 = *v3;
    *((_QWORD *)v6 + 14) = *v3;
    if (v7)
      *((_QWORD *)v7 + 15) = (char *)v6 + 112;
    *v3 = v6;
    *((_QWORD *)v6 + 15) = v3;
    *((_QWORD *)v6 + 9) = dispatch_queue_create_VARIANT_mp("com.apple.libdispatch-io.barrierq", 0);
    *((_QWORD *)v4 + 10) = dispatch_group_create_VARIANT_mp();
    v8 = (unsigned int *)*((_QWORD *)v4 + 9);
    aBlock[0] = v5;
    aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
    aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_fd_entry_create_with_fd_block_invoke;
    aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_72;
    v18 = v2;
    aBlock[4] = v4;
    dispatch_async_VARIANT_mp(v8, aBlock);
    v9 = (unsigned int *)*((_QWORD *)v4 + 8);
    v16[0] = v5;
    v16[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
    v16[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_fd_entry_create_with_fd_block_invoke_3;
    v16[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_74;
    v16[4] = v4;
    dispatch_async_VARIANT_mp(v9, v16);
    v10 = (unsigned int *)*((_QWORD *)v4 + 8);
    v14[0] = v5;
    v14[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
    v14[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_fd_entry_create_with_fd_block_invoke_5;
    v14[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_75;
    v14[4] = v4;
    v15 = v2;
    dispatch_async_VARIANT_mp(v10, v14);
  }
  v11 = (unsigned int *)*((_QWORD *)v4 + 9);
  v13[0] = v5;
  v13[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  v13[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_fd_entry_init_async_block_invoke_2;
  v13[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&unk_1E1E87788;
  v13[4] = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  v13[5] = v4;
  return dispatch_async_VARIANT_mp(v11, v13);
}

uint64_t ___dispatch_fd_entry_init_async_block_invoke_2(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return dispatch_resume_VARIANT_mp(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 64));
}

_QWORD *_dispatch_fd_entry_create(__objc2_class **a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = _dispatch_calloc(1uLL, 0x80uLL);
  v3 = dispatch_queue_create_with_target_V2_VARIANT_mp("com.apple.libdispatch-io.closeq", 0, a1);
  v2[8] = v3;
  dispatch_suspend_VARIANT_mp(v3);
  return v2;
}

uint64_t ___dispatch_fd_entry_create_with_fd_block_invoke(uint64_t a1)
{
  unint64_t StatusReg;
  uint64_t result;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  int st_dev_high;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t (*aBlock[5])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v22;
  stat v23;

  memset(&v23.st_uid, 0, 128);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)&v23.st_dev = *(_OWORD *)&v23.st_blksize;
  while (1)
  {
    result = fstat(*(_DWORD *)(a1 + 40), &v23);
    if ((_DWORD)result != -1)
      break;
    v4 = **(_DWORD **)(StatusReg + 8);
    if (v4 != 4)
    {
      if (v4)
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 32) + 24) = v4;
        return result;
      }
      break;
    }
  }
  v5 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v5 + 32) = v23.st_dev;
  *(_WORD *)(v5 + 36) = v23.st_mode;
  v6 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    v7 = fcntl_NOCANCEL();
    if (v7 != -1)
      break;
    v8 = **(_DWORD **)(v6 + 8);
    if (v8 != 4)
    {
      if (v8)
        _dispatch_bug(1471, v8);
      break;
    }
  }
  if ((v23.st_mode & 0xF000) == 0x1000)
  {
    v9 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      if (fcntl_NOCANCEL() != -1)
      {
        v12 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        do
        {
          v13 = fcntl_NOCANCEL();
          if (v13 != -1)
          {
            v14 = v13;
            goto LABEL_22;
          }
          v10 = **(_DWORD **)(v12 + 8);
        }
        while (v10 == 4);
        if (!v10)
          goto LABEL_21;
        v11 = 1484;
        goto LABEL_42;
      }
      v10 = **(_DWORD **)(v9 + 8);
    }
    while (v10 == 4);
    if (!v10)
      goto LABEL_21;
    v11 = 1477;
LABEL_42:
    _dispatch_bug(v11, v10);
  }
LABEL_21:
  v14 = -1;
LABEL_22:
  if ((v23.st_mode & 0xF000) == 0x8000)
  {
    if (v7 != -1)
    {
      v15 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (fcntl_NOCANCEL() == -1)
      {
        v16 = **(_DWORD **)(v15 + 8);
        if (v16 != 4)
        {
          if (v16)
          {
            _dispatch_bug(1496, v16);
            v7 = -1;
          }
          break;
        }
      }
    }
    st_dev_high = HIBYTE(v23.st_dev);
    dispatch_suspend_VARIANT_mp(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 72));
    if (_dispatch_io_init_pred != -1)
      dispatch_once_f_VARIANT_mp((unint64_t *)&_dispatch_io_init_pred, 0, _dispatch_io_queues_init);
    aBlock[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
    aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
    aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_fd_entry_create_with_fd_block_invoke_2;
    aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_71;
    aBlock[4] = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
    v22 = st_dev_high;
    result = dispatch_async_VARIANT_mp((unsigned int *)_dispatch_io_devs_lockq, aBlock);
  }
  else
  {
    if (v7 != -1)
    {
      v18 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (fcntl_NOCANCEL() == -1)
      {
        v19 = **(_DWORD **)(v18 + 8);
        if (v19 != 4)
        {
          if (v19)
          {
            _dispatch_bug(1516, v19);
            v7 = -1;
          }
          break;
        }
      }
    }
    result = (uint64_t)_dispatch_stream_init(*(_QWORD *)(a1 + 32));
  }
  v20 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v20 + 16) = v7;
  *(_DWORD *)(v20 + 20) = v14;
  return result;
}

uint64_t ___dispatch_fd_entry_create_with_fd_block_invoke_2(uint64_t a1)
{
  _dispatch_disk_init(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 40));
  return dispatch_resume_VARIANT_mp(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 72));
}

uint64_t _dispatch_disk_init(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  int v9;
  uint64_t v10;
  char __str[45];
  uint64_t v12;

  v3 = result;
  v12 = *MEMORY[0x1E0C874D8];
  v4 = (uint64_t *)((char *)&_dispatch_io_devs + 8 * (a2 & 0x3F));
  v5 = *v4;
  if (*v4)
  {
    while (*(_DWORD *)(v5 + 104) != a2)
    {
      v5 = *(_QWORD *)(v5 + 112);
      if (!v5)
        goto LABEL_4;
    }
    if (*(_DWORD *)(v5 + 8) != 0x7FFFFFFF)
    {
      v8 = (unsigned int *)(v5 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      if (v9 <= 0)
        dispatch_set_target_queue_VARIANT_mp_cold_2();
    }
  }
  else
  {
LABEL_4:
    v6 = qword_1EDF51AD0;
    v5 = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_disk, 8 * qword_1EDF51AD0 + 136);
    *(_QWORD *)(v5 + 16) = -1985229329;
    *(_DWORD *)(v5 + 12) = 0;
    *(_QWORD *)(v5 + 128) = v6;
    *(_QWORD *)(v5 + 24) = &unk_1ECCEA080;
    *(_DWORD *)(v5 + 104) = a2;
    *(_QWORD *)(v5 + 48) = 0;
    *(_QWORD *)(v5 + 56) = v5 + 48;
    *(_QWORD *)(v5 + 64) = 0;
    snprintf(__str, 0x2DuLL, "com.apple.libdispatch-io.deviceq.%d", a2);
    result = dispatch_queue_create_VARIANT_mp(__str, 0);
    *(_QWORD *)(v5 + 72) = result;
    v7 = *v4;
    *(_QWORD *)(v5 + 112) = *v4;
    if (v7)
      *(_QWORD *)(v7 + 120) = v5 + 112;
    *v4 = v5;
    *(_QWORD *)(v5 + 120) = v4;
  }
  *(_QWORD *)(v3 + 96) = 0;
  v10 = v3 + 96;
  *(_QWORD *)(v10 - 40) = v5;
  *(_QWORD *)(v10 + 8) = v10;
  return result;
}

void *_dispatch_stream_init(uint64_t a1)
{
  uint64_t v2;
  char v3;
  char v4;
  char *v5;
  void *v6;
  void *result;

  v2 = 0;
  v3 = 1;
  do
  {
    v4 = v3;
    v5 = (char *)_dispatch_calloc(1uLL, 0x40uLL);
    v6 = (void *)dispatch_queue_create_with_target_V2_VARIANT_mp("com.apple.libdispatch-io.streamq", 0, (__objc2_class **)&unk_1ECCEA080);
    *(_QWORD *)v5 = v6;
    result = dispatch_set_context_VARIANT_mp(v6, v5);
    v3 = 0;
    *((_QWORD *)v5 + 6) = 0;
    *((_QWORD *)v5 + 7) = v5 + 48;
    *((_QWORD *)v5 + 4) = 0;
    *((_QWORD *)v5 + 5) = v5 + 32;
    *(_QWORD *)(a1 + 8 * v2 + 40) = v5;
    v2 = 1;
  }
  while ((v4 & 1) != 0);
  return result;
}

void ___dispatch_fd_entry_create_with_fd_block_invoke_3(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t (*aBlock[5])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 56);
  if (v2)
  {
    aBlock[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
    aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
    aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_fd_entry_create_with_fd_block_invoke_4;
    aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_73;
    aBlock[4] = v2;
    dispatch_async_VARIANT_mp((unsigned int *)_dispatch_io_devs_lockq, aBlock);
  }
  else
  {
    _dispatch_stream_dispose(*(_QWORD *)(a1 + 32), 0);
    _dispatch_stream_dispose(*(_QWORD *)(a1 + 32), 1u);
  }
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(v3 + 112);
  if (v4)
  {
    *(_QWORD *)(v4 + 120) = *(_QWORD *)(v3 + 120);
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(v3 + 112);
  }
  **(_QWORD **)(v3 + 120) = v4;
}

void _dispatch_stream_dispose(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  const char *v3;
  const char *v4;

  v2 = *(_QWORD *)(a1 + 8 * a2 + 40);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      dispatch_suspend_VARIANT_mp(*(_QWORD *)(a1 + 64));
      dispatch_source_cancel_VARIANT_mp(*(unsigned int **)(v2 + 8));
      dispatch_resume_VARIANT_mp(*(_QWORD *)(v2 + 8));
      dispatch_release_VARIANT_mp(*(unsigned int **)(v2 + 8), v3);
    }
    dispatch_set_context_VARIANT_mp(*(void **)v2, 0);
    dispatch_release_VARIANT_mp(*(unsigned int **)v2, v4);
    free((void *)v2);
  }
}

unsigned int *___dispatch_fd_entry_create_with_fd_block_invoke_4(uint64_t a1, const char *a2)
{
  unsigned int *result;
  unsigned int *v3;
  int v4;

  result = *(unsigned int **)(a1 + 32);
  if (result[2] != 0x7FFFFFFF)
  {
    v3 = result + 2;
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (v4 <= 1)
    {
      if (v4 != 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      return (unsigned int *)_os_object_dispose(result, a2);
    }
  }
  return result;
}

void ___dispatch_fd_entry_create_with_fd_block_invoke_5(uint64_t a1, const char *a2)
{
  const char *v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  unint64_t StatusReg;
  unint64_t v8;
  uint64_t v9;

  dispatch_release_VARIANT_mp(*(unsigned int **)(*(_QWORD *)(a1 + 32) + 64), a2);
  dispatch_release_VARIANT_mp(*(unsigned int **)(*(_QWORD *)(a1 + 32) + 72), v3);
  dispatch_release_VARIANT_mp(*(unsigned int **)(*(_QWORD *)(a1 + 32) + 80), v4);
  v6 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v6 + 16) != -1)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (fcntl_NOCANCEL() == -1 && **(_DWORD **)(StatusReg + 8) == 4)
      ;
    v6 = *(_QWORD *)(a1 + 32);
  }
  if (*(_DWORD *)(v6 + 20) != -1)
  {
    v8 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (fcntl_NOCANCEL() == -1 && **(_DWORD **)(v8 + 8) == 4)
      ;
    v6 = *(_QWORD *)(a1 + 32);
  }
  v9 = *(_QWORD *)(v6 + 88);
  if (v9)
  {
    *(_QWORD *)(v9 + 112) = 0;
    dispatch_release_VARIANT_mp(*(unsigned int **)(*(_QWORD *)(a1 + 32) + 88), v5);
    v6 = *(_QWORD *)(a1 + 32);
  }
  free((void *)v6);
}

uint64_t ___dispatch_fd_entry_create_with_path_block_invoke(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(unsigned int **)(a1 + 32);
  if (!*((_QWORD *)v2 + 7))
  {
    _dispatch_stream_dispose(*(_QWORD *)(a1 + 32), 0);
    _dispatch_stream_dispose(*(_QWORD *)(a1 + 32), 1u);
    v2 = *(unsigned int **)(a1 + 32);
  }
  result = *v2;
  if ((_DWORD)result != -1)
  {
    if (v2[7])
      result = guarded_close_np();
    else
      result = close_NOCANCEL();
  }
  v4 = **(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  if (v4)
    *(_QWORD *)(v4 + 112) = 0;
  return result;
}

void ___dispatch_fd_entry_create_with_path_block_invoke_2(uint64_t a1, const char *a2)
{
  const char *v3;
  const char *v4;

  dispatch_release_VARIANT_mp(*(unsigned int **)(*(_QWORD *)(a1 + 32) + 64), a2);
  dispatch_release_VARIANT_mp(*(unsigned int **)(*(_QWORD *)(a1 + 32) + 72), v3);
  dispatch_release_VARIANT_mp(*(unsigned int **)(*(_QWORD *)(a1 + 32) + 80), v4);
  free(*(void **)(*(_QWORD *)(a1 + 32) + 8));
  free(*(void **)(a1 + 32));
}

void ___dispatch_operation_deliver_data_block_invoke(uint64_t a1)
{
  const char *v2;
  unsigned int *v3;
  unsigned int *v4;
  int v5;

  if ((*(_DWORD *)(a1 + 64) & 2) != 0
    && !*(_DWORD *)(a1 + 68)
    && *(_DWORD *)(a1 + 72)
    && dispatch_data_get_size_VARIANT_mp(*(_QWORD *)(a1 + 40)))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v3 = *(unsigned int **)(a1 + 48);
  if (v3[2] != 0x7FFFFFFF)
  {
    v4 = v3 + 2;
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (v5 <= 1)
    {
      if (v5 != 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      _os_object_dispose(v3, v2);
    }
  }
  dispatch_resume_VARIANT_mp(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 64));
  _dispatch_objc_release(*(id *)(a1 + 40));
}

uint64_t OUTLINED_FUNCTION_1_4(char *a1, uint64_t a2, const char *a3)
{
  size_t v3;

  return snprintf(a1, v3, a3);
}

const char *OUTLINED_FUNCTION_2_2(id a1)
{
  return object_getClassName(a1);
}

size_t OUTLINED_FUNCTION_3_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return _dispatch_object_debug_attr_VARIANT_mp(v2, (char *)(v1 + v3), v0 - v3);
}

uint64_t OUTLINED_FUNCTION_5_0()
{
  uint64_t v0;

  return v0;
}

void _dispatch_data_init_with_bytes_VARIANT_mp(_QWORD *a1, mach_vm_address_t a2, mach_vm_size_t a3, void *aBlock)
{
  mach_vm_size_t v4;
  mach_vm_address_t v5;
  void *v7;

  v4 = a3;
  v5 = a2;
  if (!a2 || !a3)
  {
    if (aBlock)
    {
      v7 = _dispatch_Block_copy(aBlock);
      _dispatch_data_destroy_buffer(v5, v4, 0, v7);
    }
    v5 = 0;
    v4 = 0;
    aBlock = &__block_literal_global_27;
  }
  a1[5] = aBlock;
  a1[6] = v4;
  a1[4] = v5;
}

void _dispatch_data_destroy_buffer(mach_vm_address_t address, mach_vm_size_t size, _DWORD *a3, void *a4)
{
  _DWORD *v4;

  if (&__block_literal_global == a4)
  {
    free((void *)address);
  }
  else if (&__block_literal_global_27 != a4)
  {
    if (&__block_literal_global_30 == a4)
    {
      mach_vm_deallocate(*MEMORY[0x1E0C883F0], address, size);
    }
    else
    {
      if (a3)
        v4 = a3;
      else
        v4 = &unk_1ECCEA080;
      dispatch_async_f_VARIANT_mp(v4, (uint64_t)a4, (uint64_t)_dispatch_call_block_and_release);
    }
  }
}

__objc2_class **dispatch_data_create_VARIANT_mp(void *__src, size_t __n, _DWORD *a3, void *aBlock)
{
  const void *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  size_t v13;
  unsigned int *v14;
  int v15;

  v7 = __src;
  if (__src && __n)
  {
    if (aBlock)
    {
      if (&__block_literal_global_33 != aBlock)
      {
        v8 = (_QWORD *)_dispatch_object_alloc_bridged_VARIANT_mp(OS_dispatch_data, 64);
        v8[7] = 0;
        v9 = _dispatch_Block_copy(aBlock);
        goto LABEL_16;
      }
      v13 = __n + 64;
      if (__n < 0xFFFFFFFFFFFFFFC0)
      {
        v8 = (_QWORD *)_dispatch_object_alloc_bridged_VARIANT_mp(OS_dispatch_data, v13);
        v8[7] = 0;
      }
      else
      {
        v8 = 0;
      }
      v12 = v8 + 8;
      memcpy(v8 + 8, v7, __n);
      v9 = &__block_literal_global_27;
    }
    else
    {
      v11 = malloc_type_malloc(__n, 0xF1E95671uLL);
      if (!v11)
        return 0;
      v12 = v11;
      memcpy(v11, v7, __n);
      v8 = (_QWORD *)_dispatch_object_alloc_bridged_VARIANT_mp(OS_dispatch_data, 64);
      v8[7] = 0;
      v9 = &__block_literal_global;
    }
    v7 = v12;
LABEL_16:
    v8[5] = v9;
    v8[6] = __n;
    v8[4] = v7;
    if (a3)
    {
      if (a3[2] != 0x7FFFFFFF)
      {
        v14 = a3 + 2;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
        if (v15 <= 0)
          dispatch_set_target_queue_VARIANT_mp_cold_2();
      }
      v8[1] = a3;
    }
    return (__objc2_class **)v8;
  }
  if (aBlock)
  {
    v10 = _dispatch_Block_copy(aBlock);
    _dispatch_data_destroy_buffer((mach_vm_address_t)v7, __n, a3, v10);
  }
  return &_dispatch_data_empty;
}

__objc2_class **dispatch_data_create_f_VARIANT_mp(void *a1, size_t a2, _DWORD *a3, _QWORD *a4)
{
  _QWORD v8[6];

  if (a4)
  {
    if (&__block_literal_global != (_UNKNOWN *)a4
      && &__block_literal_global_27 != (_UNKNOWN *)a4
      && &__block_literal_global_30 != (_UNKNOWN *)a4
      && &__block_literal_global_33 != (_UNKNOWN *)a4)
    {
      v8[0] = MEMORY[0x1E0C87450];
      v8[1] = 0x40000000;
      v8[2] = __dispatch_data_create_f_VARIANT_mp_block_invoke;
      v8[3] = &__block_descriptor_tmp_0;
      v8[4] = a4;
      v8[5] = a1;
      a4 = v8;
    }
  }
  return dispatch_data_create_VARIANT_mp(a1, a2, a3, a4);
}

__objc2_class **dispatch_data_create_alloc_VARIANT_mp(unint64_t a1, __objc2_class ***a2)
{
  __objc2_class **result;
  __objc2_class **v5;

  if (!a1)
  {
    v5 = 0;
    result = &_dispatch_data_empty;
    if (!a2)
      return result;
    goto LABEL_6;
  }
  if (a1 < 0xFFFFFFFFFFFFFFC0)
  {
    result = (__objc2_class **)_dispatch_object_alloc_bridged_VARIANT_mp(OS_dispatch_data, a1 + 64);
    result[7] = 0;
  }
  else
  {
    result = 0;
  }
  v5 = result + 8;
  result[5] = (__objc2_class *)&__block_literal_global_27;
  result[6] = (__objc2_class *)a1;
  result[4] = (__objc2_class *)(result + 8);
  if (a2)
LABEL_6:
    *a2 = v5;
  return result;
}

void _dispatch_data_dispose_VARIANT_mp(uint64_t a1)
{
  unint64_t v2;
  void **v3;
  void *v4;
  unint64_t v5;

  if (*(_QWORD *)(a1 + 56))
  {
    v2 = 0;
    v3 = (void **)(a1 + 64);
    do
    {
      v4 = *v3;
      v3 += 3;
      _dispatch_objc_release(v4);
      ++v2;
      v5 = *(_QWORD *)(a1 + 56);
      if (v5 <= 1)
        v5 = 1;
    }
    while (v2 < v5);
    free(*(void **)(a1 + 32));
  }
  else
  {
    _dispatch_data_destroy_buffer(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(_DWORD **)(a1 + 8), *(void **)(a1 + 40));
  }
}

unsigned int *_dispatch_data_set_target_queue_VARIANT_mp(uint64_t a1, const char *a2)
{
  const char *v2;
  unsigned int *v3;
  int v4;
  unint64_t *v5;
  unsigned int *result;
  unsigned int *v7;
  int v8;

  v2 = (const char *)&unk_1ECCEA080;
  if (a2)
    v2 = a2;
  if (*((_DWORD *)v2 + 2) != 0x7FFFFFFF)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
    if (v4 <= 0)
      dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v5 = (unint64_t *)(a1 + 24);
  do
    result = (unsigned int *)__ldxr(v5);
  while (__stlxr((unint64_t)v2, v5));
  if (result)
  {
    if (result[2] != 0x7FFFFFFF)
    {
      v7 = result + 2;
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (v8 <= 1)
      {
        if (v8 != 1)
          _os_object_allows_weak_reference_VARIANT_mp_cold_1();
        return (unsigned int *)_os_object_dispose(result, a2);
      }
    }
  }
  return result;
}

uint64_t dispatch_data_get_size_VARIANT_mp(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *dispatch_data_create_concat_VARIANT_mp(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v2 = a2;
  v3 = a1[6];
  if (!v3)
    goto LABEL_15;
  v5 = a2[6];
  if (!v5)
  {
    v2 = a1;
LABEL_15:
    _dispatch_objc_retain(v2);
    return v2;
  }
  v6 = a1[7];
  if (v6 <= 1)
    v7 = 1;
  else
    v7 = a1[7];
  v8 = a2[7];
  if (v8 <= 1)
    v8 = 1;
  v9 = 0;
  v10 = v7 + v8;
  if (!__CFADD__(v7, v8))
  {
    if (is_mul_ok(v10, 0x18uLL) && 24 * v10 < 0xFFFFFFFFFFFFFFC0)
    {
      v9 = (_QWORD *)_dispatch_object_alloc_bridged_VARIANT_mp(OS_dispatch_data, 24 * v10 + 64);
      v9[7] = v10;
      v5 = v2[6];
      v3 = a1[6];
      v6 = a1[7];
    }
    v9[6] = v5 + v3;
    if (v6)
    {
      memcpy(v9 + 8, a1 + 8, 24 * v6);
    }
    else
    {
      v11 = a1[6];
      v9[9] = 0;
      v9[10] = v11;
      v9[8] = a1;
    }
    v12 = v2[7];
    v13 = a1[7];
    if (v13 <= 1)
      v13 = 1;
    if (v12)
    {
      memcpy(&v9[3 * v13 + 8], v2 + 8, 24 * v12);
    }
    else
    {
      v14 = v2[6];
      v15 = &v9[3 * v13];
      v15[9] = 0;
      v15[10] = v14;
      v15[8] = v2;
    }
    v16 = 0;
    v17 = 8;
    do
    {
      _dispatch_objc_retain((id)v9[v17]);
      ++v16;
      v18 = v9[7];
      if (v18 <= 1)
        v18 = 1;
      v17 += 3;
    }
    while (v16 < v18);
  }
  return v9;
}

__objc2_class **dispatch_data_create_subrange_VARIANT_mp(__objc2_class *a1, __objc2_class *a2, __objc2_class *a3)
{
  __objc2_class **p_isa;
  __objc2_class *v5;
  __objc2_class *superclass;
  __objc2_class *v7;
  unint64_t cache;
  uint64_t v9;
  __objc2_class **p_superclass;
  __objc2_class *v11;
  __objc2_class *v12;
  __objc2_class *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  __objc2_class *v19;
  uint64_t v20;

  p_isa = &_dispatch_data_empty;
  if (!a3)
    return p_isa;
  v5 = a1;
  superclass = a1[1].superclass;
  while (1)
  {
    if (superclass <= a2)
      return p_isa;
    v7 = (__objc2_class *)((char *)superclass - (char *)a2);
    if ((char *)superclass - (char *)a2 >= (unint64_t)a3)
    {
      v7 = a3;
      if (superclass == a3)
      {
        p_isa = &v5->isa;
        goto LABEL_18;
      }
    }
    cache = (unint64_t)v5[1].cache;
    if (!cache)
    {
      p_isa = (__objc2_class **)_dispatch_object_alloc_bridged_VARIANT_mp(OS_dispatch_data, 88);
      p_isa[6] = v7;
      p_isa[7] = (__objc2_class *)1;
      p_isa[9] = a2;
      p_isa[10] = v7;
      p_isa[8] = v5;
LABEL_18:
      _dispatch_objc_retain(v5);
      return p_isa;
    }
    v9 = 0;
    p_superclass = &v5[3].superclass;
    v11 = a2;
    while (1)
    {
      v12 = *(p_superclass - 6);
      if (v11 < v12)
        break;
      ++v9;
      p_superclass += 3;
      v11 = (__objc2_class *)((char *)v11 - (uint64_t)v12);
      if (cache == v9)
        dispatch_data_create_subrange_VARIANT_mp_cold_1(cache);
    }
    v13 = (__objc2_class *)((char *)v7 + (_QWORD)v11 - (char *)v12);
    if ((char *)v7 + (unint64_t)v11 > (char *)v12)
      break;
    if (!v7)
      return p_isa;
    v5 = *(p_superclass - 8);
    a2 = (__objc2_class *)((char *)v11 + (_QWORD)*(p_superclass - 7));
    superclass = v5[1].superclass;
    a3 = v7;
  }
  v14 = cache - v9;
  if ((__objc2_class *)((char *)a2 + (_QWORD)v7) == superclass)
  {
    v13 = 0;
    v15 = cache - v9;
  }
  else if (v9 + 1 >= cache)
  {
    v15 = 1;
  }
  else
  {
    v16 = (unint64_t)*(p_superclass - 3);
    v15 = 2;
    if ((unint64_t)v13 > v16)
    {
      v17 = (unint64_t *)p_superclass;
      do
      {
        if (v14 == v15)
          dispatch_data_create_subrange_VARIANT_mp_cold_1(cache);
        v13 = (__objc2_class *)((char *)v13 - v16);
        ++v15;
        v18 = *v17;
        v17 += 3;
        v16 = v18;
      }
      while ((unint64_t)v13 > v18);
    }
  }
  p_isa = (__objc2_class **)_dispatch_object_alloc_bridged_VARIANT_mp(OS_dispatch_data, 24 * v15 + 64);
  p_isa[6] = v7;
  p_isa[7] = (__objc2_class *)v15;
  memcpy(p_isa + 8, p_superclass - 8, 24 * v15);
  if (v11)
  {
    v19 = (__objc2_class *)((char *)p_isa[10] - (char *)v11);
    p_isa[9] = (__objc2_class *)((char *)v11 + (_QWORD)p_isa[9]);
    p_isa[10] = v19;
  }
  if ((__objc2_class *)((char *)a2 + (_QWORD)v7) != superclass)
    p_isa[3 * v15 + 7] = v13;
  if (v15)
  {
    v20 = 8;
    do
    {
      _dispatch_objc_retain(p_isa[v20]);
      v20 += 3;
      --v15;
    }
    while (v15);
  }
  return p_isa;
}

__objc2_class **dispatch_data_create_map_VARIANT_mp(__objc2_class **a1, _QWORD *a2, size_t *a3)
{
  size_t v5;
  __objc2_class **VARIANT_mp;
  __objc2_class *v7;
  __objc2_class *v8;
  __objc2_class *v9;
  __objc2_class_ro *info;
  char *v11;
  char *v12;

  v5 = (size_t)a1[6];
  if (!v5)
  {
    v11 = 0;
    VARIANT_mp = &_dispatch_data_empty;
    if (a2)
      goto LABEL_14;
    goto LABEL_15;
  }
  VARIANT_mp = a1;
  v7 = a1[7];
  if (v7 == (__objc2_class *)1)
  {
    v9 = a1[8];
    v8 = a1[9];
    if (!v9[1].cache)
      goto LABEL_4;
  }
  else
  {
    v8 = 0;
    v9 = (__objc2_class *)a1;
    if (!v7)
    {
LABEL_4:
      info = v9->info;
      goto LABEL_5;
    }
  }
  info = v9->info;
  if (info)
  {
LABEL_5:
    v11 = (char *)v8 + (_QWORD)info;
    if ((__objc2_class *)((char *)v8 + (_QWORD)info))
    {
      _dispatch_objc_retain(a1);
      if (!a2)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  v12 = (char *)_dispatch_data_flatten(a1);
  v11 = v12;
  if (v12)
  {
    VARIANT_mp = dispatch_data_create_VARIANT_mp(v12, v5, 0, &__block_literal_global);
    if (!a2)
      goto LABEL_15;
    goto LABEL_14;
  }
  v5 = 0;
  VARIANT_mp = 0;
  if (a2)
LABEL_14:
    *a2 = v11;
LABEL_15:
  if (a3)
    *a3 = v5;
  return VARIANT_mp;
}

void *_dispatch_data_flatten(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD v6[5];

  v2 = malloc_type_malloc(a1[6], 0x4CB264A7uLL);
  v3 = v2;
  if (v2)
  {
    v6[0] = MEMORY[0x1E0C87450];
    v6[1] = 0x40000000;
    v6[2] = ___dispatch_data_flatten_block_invoke;
    v6[3] = &__block_descriptor_tmp_12_0;
    v6[4] = v2;
    v4 = a1[6];
    if (v4)
      _dispatch_data_apply(a1, 0, 0, v4, (uint64_t)v6, (uint64_t)___dispatch_data_flatten_block_invoke);
  }
  return v3;
}

char *dispatch_data_get_flattened_bytes_4libxpc_VARIANT_mp(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  char v8;
  _QWORD *v10;

  v1 = a1[6];
  if (!v1)
    return (char *)v1;
  v2 = a1[7];
  if (v2 == 1)
  {
    v10 = a1 + 8;
    a1 = (_QWORD *)a1[8];
    v3 = v10[1];
    v2 = a1[7];
  }
  else
  {
    v3 = 0;
  }
  v4 = a1 + 4;
  if (!v2)
  {
    v5 = *v4;
    goto LABEL_6;
  }
  v5 = *v4;
  if (*v4)
  {
LABEL_6:
    v1 = v5 + v3;
    if (v1)
      return (char *)v1;
  }
  v6 = (char *)_dispatch_data_flatten(a1);
  if (!v6)
    return 0;
  while (1)
  {
    v7 = __ldxr(v4);
    if (v7)
      break;
    if (!__stlxr((unint64_t)v6, v4))
    {
      v8 = 1;
      goto LABEL_12;
    }
  }
  v8 = 0;
  __clrex();
LABEL_12:
  if ((v8 & 1) == 0)
  {
    free(v6);
    v6 = (char *)v7;
  }
  return &v6[v3];
}

uint64_t dispatch_data_apply_f_VARIANT_mp(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a1[6];
  if (v3)
    return _dispatch_data_apply(a1, 0, 0, v3, a2, a3);
  else
    return 1;
}

uint64_t _dispatch_data_apply(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v8 = a2;
  v10 = a1[7];
  if (v10 == 1)
  {
    v12 = (_QWORD *)a1[8];
    v11 = a1[9];
    if (!v12[7])
      goto LABEL_3;
LABEL_7:
    v13 = v12[4];
    if (!v13)
      goto LABEL_8;
    goto LABEL_4;
  }
  v11 = 0;
  v12 = a1;
  if (v10)
    goto LABEL_7;
LABEL_3:
  v13 = v12[4];
LABEL_4:
  v14 = v13 + v11;
  if (v14)
    return _dispatch_data_apply_client_callout(a5, a1, a2, v14 + a3, a4, a6);
LABEL_8:
  v16 = a1 + 10;
  v17 = 1;
  do
  {
    result = _dispatch_data_apply(*(v16 - 2), v8, *(v16 - 1), *v16, a5, a6);
    v18 = a1[7];
    if (v18 <= 1)
      v18 = 1;
    if (v17 >= v18)
      break;
    v19 = *v16;
    v16 += 3;
    v8 += v19;
    ++v17;
  }
  while ((result & 1) != 0);
  return result;
}

uint64_t dispatch_data_apply_VARIANT_mp(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a1[6];
  if (v2)
    return _dispatch_data_apply(a1, 0, 0, v2, a2, *(_QWORD *)(a2 + 16));
  else
    return 1;
}

__objc2_class **dispatch_data_copy_region_VARIANT_mp(_QWORD *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *i;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;

  v3 = a1[6];
  if (v3 <= a2)
  {
    *a3 = v3;
    return &_dispatch_data_empty;
  }
  v4 = a1;
  v5 = 0;
  v6 = 0;
  *a3 = 0;
  v7 = v4[6];
LABEL_4:
  if (v4[6] == v7)
    v8 = v4;
  else
    v8 = 0;
LABEL_7:
  v9 = v4[7];
  if (v9 == 1)
  {
    v16 = v4 + 8;
    v4 = (_QWORD *)v4[8];
    v6 += v16[1];
    v9 = v4[7];
    if (!v9)
      goto LABEL_9;
LABEL_24:
    v10 = v4[4];
    if (!v10)
      goto LABEL_11;
    goto LABEL_10;
  }
  if (v9)
    goto LABEL_24;
LABEL_9:
  v10 = v4[4];
LABEL_10:
  if (!(v10 + v6))
  {
LABEL_11:
    v11 = 0;
    if (v9 <= 1)
      v12 = 1;
    else
      v12 = v9;
    for (i = v4 + 10; ; i += 3)
    {
      v14 = *i;
      if (v6 >= *i)
      {
        v6 -= *i;
      }
      else
      {
        v7 = v14 - v6;
        v15 = v14 - v6 + v11;
        if (v15 > a2)
        {
          v4 = (_QWORD *)*(i - 2);
          v6 += *(i - 1);
          v5 += v11;
          *a3 = v5;
          a2 -= v11;
          if (!v6)
            goto LABEL_4;
          v8 = 0;
          goto LABEL_7;
        }
        v6 = 0;
        v11 = v15;
      }
      if (!--v12)
        dispatch_data_copy_region_VARIANT_mp_cold_1(v5, v11);
    }
  }
  if (v8)
  {
    _dispatch_objc_retain(v8);
  }
  else
  {
    _dispatch_objc_retain(v4);
    if (v6 || v4[6] != v7)
    {
      v8 = (_QWORD *)_dispatch_object_alloc_bridged_VARIANT_mp(OS_dispatch_data, 88);
      v8[6] = v7;
      v8[7] = 1;
      v8[9] = v6;
      v8[10] = v7;
      v8[8] = v4;
    }
    else
    {
      return (__objc2_class **)v4;
    }
  }
  return (__objc2_class **)v8;
}

uint64_t dispatch_data_make_memory_entry_VARIANT_mp(_QWORD *a1)
{
  memory_object_size_t v2;
  BOOL v3;
  mach_vm_address_t *v4;
  vm_map_t *v5;
  uint64_t v6;
  BOOL v7;
  kern_return_t v8;
  mach_vm_address_t v9;
  uint64_t v10;
  kern_return_t memory_entry_64;
  kern_return_t v12;
  uint64_t v13;
  _QWORD v15[5];
  mach_vm_address_t address;
  memory_object_size_t size;
  mach_port_t object_handle;

  object_handle = 0;
  size = 0;
  v2 = a1[6];
  v3 = a1[5] != (_QWORD)&__block_literal_global_30;
  v4 = (mach_vm_address_t *)MEMORY[0x1E0C88820];
  v5 = (vm_map_t *)MEMORY[0x1E0C883F0];
  v6 = MEMORY[0x1E0C87450];
  while (1)
  {
    v7 = v3;
    if (v3)
    {
      address = *v4;
      v8 = mach_vm_allocate(*v5, &address, v2, 1);
      if (v8)
      {
        if (v8 == 3)
          return object_handle;
        v13 = 704;
        goto LABEL_17;
      }
      v15[0] = v6;
      v15[1] = 0x40000000;
      v15[2] = __dispatch_data_make_memory_entry_VARIANT_mp_block_invoke;
      v15[3] = &__block_descriptor_tmp_9_0;
      v9 = address;
      v15[4] = address;
      v10 = a1[6];
      if (v10)
      {
        _dispatch_data_apply(a1, 0, 0, v10, (uint64_t)v15, (uint64_t)__dispatch_data_make_memory_entry_VARIANT_mp_block_invoke);
        v9 = address;
      }
    }
    else
    {
      v9 = a1[4];
      address = v9;
    }
    size = v2;
    memory_entry_64 = mach_make_memory_entry_64(*v5, &size, v9, 2097219, &object_handle, 0);
    if (memory_entry_64 == 18)
      memory_entry_64 = mach_make_memory_entry_64(*v5, &size, address, 67, &object_handle, 0);
    if (memory_entry_64)
      break;
    if (size >= v2)
      goto LABEL_19;
    v12 = mach_port_deallocate(*v5, object_handle);
    if (v12)
      _dispatch_bug(731, v12);
    v3 = 1;
    if (v7)
    {
      object_handle = 0;
      goto LABEL_20;
    }
  }
  _dispatch_bug(726, memory_entry_64);
  object_handle = 0;
LABEL_19:
  if (v7)
  {
LABEL_20:
    v8 = mach_vm_deallocate(*v5, address, v2);
    if (!v8)
      return object_handle;
    v13 = 740;
LABEL_17:
    _dispatch_bug(v13, v8);
  }
  return object_handle;
}

uint64_t ___dispatch_data_flatten_block_invoke(uint64_t a1, int a2, uint64_t a3, void *__src, size_t __n)
{
  memcpy((void *)(*(_QWORD *)(a1 + 32) + a3), __src, __n);
  return 1;
}

void *_dispatch_continuation_alloc_from_heap_VARIANT_mp()
{
  void *result;

  if (_dispatch_continuation_alloc_init_pred != -1)
    dispatch_once_f_VARIANT_mp((unint64_t *)&_dispatch_continuation_alloc_init_pred, 0, (uint64_t (*)(void))_dispatch_continuation_alloc_init);
  if (_dispatch_use_dispatch_alloc)
    return (void *)_dispatch_alloc_continuation_alloc();
  while (1)
  {
    result = malloc_type_calloc(1uLL, 0x40uLL, 0x791BAC36uLL);
    if (result)
      break;
    _dispatch_temporary_resource_shortage();
  }
  return result;
}

unint64_t _dispatch_alloc_continuation_alloc()
{
  __int16 StatusReg;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t result;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;

  if (!_dispatch_main_heap)
    return _dispatch_alloc_continuation_from_heap_slow();
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  v1 = _dispatch_main_heap;
  v2 = *(_QWORD *)(_dispatch_main_heap + ((unint64_t)(StatusReg & 0xFFF) << 20) + 8);
  if (v2)
  {
    v3 = 0;
    while (2)
    {
      v4 = (unint64_t *)(v2 + 8 * v3);
      while (1)
      {
        v5 = __ldxr(v4);
        if (v5 == -1)
          break;
        v6 = __clz(__rbit64(~v5));
        if (!__stxr((1 << v6) | v5, v4))
        {
          v8 = ((unint64_t)v4 & 0xFFFFF) - 64;
          v9 = v8 >> 3;
          v10 = (v8 >> 9) & 0x3FFFFFF;
          result = ((((unint64_t)v4 & 0xFFFFFFFFFFF00000) + (v10 << 18)) & 0xFFFFFFFFFFFC0FFFLL | ((v9 & 0x3F) << 12))
                 + (v6 << 6)
                 + 0x4000;
          v11 = (unint64_t *)(((unint64_t)v4 & 0xFFFFFFFFFFF00000) + 8 * v10 + 16);
          v12 = 1 << v9;
          while (1)
          {
            v13 = __ldxr(v11);
            if (*v4 != -1)
              break;
            if (!__stxr(v13 | v12, v11))
              return result;
          }
          __clrex();
          return result;
        }
      }
      __clrex();
      if (++v3 != 4)
        continue;
      break;
    }
    v1 = _dispatch_main_heap;
  }
  result = _dispatch_alloc_continuation_from_heap(v1);
  if (!result)
    return _dispatch_alloc_continuation_from_heap_slow();
  return result;
}

void _dispatch_continuation_free_to_heap_VARIANT_mp(uint64_t a1)
{
  if (_dispatch_use_dispatch_alloc)
    _dispatch_alloc_continuation_free(a1);
  else
    free((void *)a1);
}

void _dispatch_alloc_continuation_free(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  *(_QWORD *)a1 = 0;
  v1 = a1 - (a1 & 0xFFFFFFFFFFF00000);
  v2 = (v1 - 0x4000) >> 6;
  v3 = ((v1 - 0x4000) >> 18) & 0xFFFFF;
  v4 = (a1 & 0xFFFFFFFFFFF00000) + 8 * v3 + 16;
  v5 = (unint64_t *)((a1 & 0xFFFFFFFFFFF00000) + (v3 << 9) + 8 * ((v2 >> 6) & 0x3F) + 64);
  v6 = (v1 - 1664) >> 6;
  v7 = v6 >> 6;
  if ((a1 & 0xFC000) != 0)
  {
    v8 = (unint64_t *)v4;
  }
  else
  {
    v5 = (unint64_t *)((a1 & 0xFFFFFFFFFFF00000) + 8 * v7 + 1600);
    v8 = 0;
  }
  if ((a1 & 0xFC000) != 0)
    LOBYTE(v7) = (v2 >> 6) & 0x3F;
  else
    LOBYTE(v2) = v6;
  v9 = 1 << v2;
  v10 = *v5;
  if ((v9 & *v5) == 0)
  {
    v8 = (unint64_t *)*v5;
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption: failed to clear bit exclusively";
    qword_1EDF52D38 = (uint64_t)v8;
    __break(1u);
LABEL_13:
    v11 = v10 & v9;
    v12 = ~(1 << v7);
    do
      v13 = __ldxr(v8);
    while (__stlxr(v13 & v12, v8));
    if (!v11)
      _dispatch_alloc_maybe_madvise_page(a1);
    return;
  }
  v9 = ~v9;
  do
    v10 = __ldxr(v5);
  while (__stlxr(v10 & v9, v5));
  if (v8)
    goto LABEL_13;
}

const char *_dispatch_continuation_alloc_init()
{
  int v0;
  const char *result;
  BOOL v2;

  v0 = malloc_engaged_nano();
  result = getenv("LIBDISPATCH_CONTINUATION_ALLOCATOR");
  if (result)
  {
    result = (const char *)atoi(result);
    v2 = (_DWORD)result != 0;
  }
  else
  {
    v2 = v0 == 0;
  }
  _dispatch_use_dispatch_alloc = v2;
  return result;
}

uint64_t _dispatch_alloc_continuation_from_heap(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  __int16 StatusReg;
  unint64_t v20;

  v1 = 0;
  v2 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) & 0xFFF;
  while (2)
  {
    v3 = (unint64_t *)(a1 + (v2 << 20) + 8 * v1 + 1600);
    while (1)
    {
      v4 = __ldxr(v3);
      if (v4 == -1)
        break;
      v5 = __clz(__rbit64(~v4));
      if (!__stxr((1 << v5) | v4, v3))
      {
        v7 = ((_DWORD)v1 << 6);
        return a1 + (v2 << 20) + ((v5 | v7) << 6) + 1664;
      }
    }
    __clrex();
    if (++v1 != 3)
      continue;
    break;
  }
  v6 = (unint64_t *)(a1 + (v2 << 20) + 1624);
  v7 = 192;
  while (1)
  {
    v8 = __ldxr(v6);
    if (v8 == -1)
      break;
    v5 = __clz(__rbit64(~v8));
    if (v5 > 0x25)
      break;
    if (!__stxr((1 << v5) | v8, v6))
      return a1 + (v2 << 20) + ((v5 | v7) << 6) + 1664;
  }
  v11 = 0;
  __clrex();
  do
  {
    v12 = a1 + (v2 << 20) + 8 * v11;
    v14 = *(_QWORD *)(v12 + 16);
    v13 = (unint64_t *)(v12 + 16);
    if (v14 != -1)
    {
      v15 = 0;
      while (2)
      {
        v16 = (unint64_t *)(a1 + (v2 << 20) + (v11 << 9) + 8 * v15 + 64);
        while (1)
        {
          v17 = __ldxr(v16);
          if (v17 == -1)
            break;
          v18 = __clz(__rbit64(~v17));
          if (!__stxr((1 << v18) | v17, v16))
          {
            StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
            *(_QWORD *)(_dispatch_main_heap + ((unint64_t)(StatusReg & 0xFFF) << 20) + 8) = (unint64_t)v16 & 0xFFFFFFFFFFFFFFE0;
            while (1)
            {
              v20 = __ldxr(v13);
              if (*v16 != -1)
                break;
              if (!__stxr(v20 | (1 << v15), v13))
                return a1 + (v2 << 20) + (v11 << 18) + (v15 << 12) + (v18 << 6) + 0x4000;
            }
            __clrex();
            return a1 + (v2 << 20) + (v11 << 18) + (v15 << 12) + (v18 << 6) + 0x4000;
          }
        }
        __clrex();
        if (++v15 != 64)
          continue;
        break;
      }
    }
    v9 = 0;
    ++v11;
  }
  while (v11 != 3);
  return v9;
}

uint64_t _dispatch_alloc_continuation_from_heap_slow()
{
  unint64_t *i;
  uint64_t v1;
  uint64_t result;

  for (i = (unint64_t *)&_dispatch_main_heap; ; i = (unint64_t *)*i)
  {
    v1 = *i;
    if (!*i)
    {
      _dispatch_alloc_try_create_heap(i);
      v1 = *i;
    }
    result = _dispatch_alloc_continuation_from_heap(v1);
    if (result)
      break;
  }
  return result;
}

void _dispatch_alloc_try_create_heap(unint64_t *a1)
{
  mach_vm_size_t v2;
  mach_vm_address_t *v3;
  vm_map_t *v4;
  kern_return_t v5;
  void *v6;
  mach_vm_address_t address;

  v2 = (unint64_t)MEMORY[0xFFFFFC036] << 20;
  v3 = (mach_vm_address_t *)MEMORY[0x1E0C88820];
  v4 = (vm_map_t *)MEMORY[0x1E0C883F0];
  while (1)
  {
    address = *v3;
    v5 = mach_vm_map(*v4, &address, v2, 0xFFFFFuLL, 1241513985, 0, 0, 0, 3, 7, 1u);
    if (!v5)
      break;
    if (v5 != 3)
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Could not allocate heap";
      qword_1EDF52D38 = v5;
      __break(1u);
LABEL_12:
      _dispatch_bug(427, v5);
      return;
    }
    _dispatch_temporary_resource_shortage();
  }
  v6 = (void *)address;
  while (!__ldxr(a1))
  {
    if (!__stxr((unint64_t)v6, a1))
      return;
  }
  __clrex();
  v5 = munmap(v6, (unint64_t)MEMORY[0xFFFFFC036] << 20);
  if (v5)
    goto LABEL_12;
}

void _dispatch_alloc_maybe_madvise_page(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if ((a1 & 0xFC000) != 0)
  {
    v2 = (void *)(a1 & 0xFFFFFFFFFFFFC000);
    if (v2)
    {
      v3 = 0;
      v4 = a1 & 0xFFFFFFFFFFF00000;
      v5 = (unint64_t)v2 - (a1 & 0xFFFFFFFFFFF00000) - 0x4000;
      v6 = (v5 >> 12) & 0x3F;
      v7 = (v5 >> 18) & 0xFFFFF;
      v8 = (_QWORD *)(((v4 + (v7 << 9)) & 0xFFFFFFFFFFFFFE07 | (8 * v6)) + 64);
      while (!v8[v3])
      {
        if (++v3 == 4)
        {
          v9 = 0;
LABEL_8:
          v10 = &v8[v9];
          while (!__ldxr(v10))
          {
            if (!__stxr(0xFFFFFFFFFFFFFFFFLL, v10))
            {
              if (++v9 != 4)
                goto LABEL_8;
              v19 = v7;
              v17 = v4;
              v18 = v6;
              v16 = ((v4 + (v7 << 9)) & 0xFFFFFFFFFFFFFE07 | (8 * v6)) + 64;
              v12 = madvise(v2, 0x4000uLL, 5);
              if (v12)
                _dispatch_bug(563, v12);
              v9 = 4;
              v8 = (_QWORD *)v16;
              v4 = v17;
              v6 = v18;
              v7 = v19;
              goto LABEL_16;
            }
          }
          __clrex();
          if ((int)v9 > 1)
          {
LABEL_16:
            v13 = v9 + 7;
            v14 = v4 + ((8 * v6) | (v7 << 9));
            do
            {
              *(_QWORD *)(v14 + 8 * v13) = 0;
              v15 = v13 - 7;
              --v13;
            }
            while (v15 > 2);
            goto LABEL_20;
          }
          if (!(_DWORD)v9)
            return;
LABEL_20:
          *v8 = 0;
          return;
        }
      }
    }
  }
}

void _os_eventlink_dispose_VARIANT_armv81(uint64_t a1)
{
  mach_port_name_t v2;
  mach_port_name_t v3;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    free(*(void **)(a1 + 16));
  v2 = *(_DWORD *)(a1 + 32);
  if (v2 + 1 >= 2)
    mach_port_deallocate(*MEMORY[0x1E0C883F0], v2);
  v3 = *(_DWORD *)(a1 + 36);
  if (v3 + 1 >= 2)
    mach_port_deallocate(*MEMORY[0x1E0C883F0], v3);
}

_DWORD *os_eventlink_create_VARIANT_armv81(const char *a1)
{
  _DWORD *v2;
  const char *v3;

  v2 = _os_object_alloc((uint64_t)OS_os_eventlink, 48);
  if (v2)
  {
    if (a1)
    {
      v3 = _dispatch_strdup_if_mutable(a1);
      if (v3 != a1)
        *((_QWORD *)v2 + 3) |= 1uLL;
      *((_QWORD *)v2 + 2) = v3;
    }
  }
  else
  {
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 12;
  }
  return v2;
}

uint64_t os_eventlink_activate_VARIANT_armv81(uint64_t a1)
{
  int v2;
  uint64_t result;
  _DWORD *v4;
  uint64_t v5;

  if ((*(_DWORD *)(a1 + 32) + 1) > 1)
    return 0;
  if ((*(_BYTE *)(a1 + 24) & 2) == 0)
  {
    v2 = mach_eventlink_create();
    result = 0xFFFFFFFFLL;
    if (v2 <= 13)
    {
      if (v2)
      {
        if (v2 == 4)
        {
          result = 22;
        }
        else
        {
          if (v2 != 13)
            return result;
          result = 37;
        }
      }
      else
      {
        v5 = 0;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 32), (unint64_t *)&v5, 0, memory_order_relaxed, memory_order_relaxed);
        if (v5)
          return 22;
        result = 0;
      }
      goto LABEL_22;
    }
    if (v2 > 36)
    {
      if (v2 != 37)
      {
        if (v2 != 49)
          return result;
        result = 60;
        goto LABEL_22;
      }
    }
    else
    {
      if (v2 == 14)
      {
        result = 53;
        goto LABEL_22;
      }
      if (v2 != 15)
        return result;
    }
    result = 89;
LABEL_22:
    v4 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    goto LABEL_23;
  }
  v4 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  result = 89;
LABEL_23:
  *v4 = result;
  return result;
}

uint64_t os_eventlink_extract_remote_port_VARIANT_armv81(uint64_t a1, _DWORD *a2)
{
  unsigned int *v2;
  uint64_t result;
  _DWORD *v4;

  if (!*(_DWORD *)(a1 + 32))
  {
LABEL_7:
    v4 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    result = 22;
    goto LABEL_8;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) == 0)
  {
    v2 = (unsigned int *)(a1 + 36);
    __swp(v2, v2);
    if ((a1 + 35) < 0xFFFFFFFE)
    {
      result = 0;
      *a2 = (_DWORD)v2;
      return result;
    }
    goto LABEL_7;
  }
  v4 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  result = 89;
LABEL_8:
  *v4 = result;
  return result;
}

_DWORD *os_eventlink_create_with_port_VARIANT_armv81(const char *a1, mach_port_name_t a2)
{
  _DWORD *v4;
  const char *v5;

  v4 = _os_object_alloc((uint64_t)OS_os_eventlink, 48);
  if (v4)
  {
    if (a1)
    {
      v5 = _dispatch_strdup_if_mutable(a1);
      if (v5 != a1)
        *((_QWORD *)v4 + 3) |= 1uLL;
      *((_QWORD *)v4 + 2) = v5;
    }
    if (mach_port_mod_refs(*MEMORY[0x1E0C883F0], a2, 0, 1))
      os_eventlink_create_with_port_VARIANT_mp_cold_1();
    if (v4[8])
      os_eventlink_create_with_port_VARIANT_mp_cold_1();
    v4[8] = a2;
  }
  else
  {
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 12;
  }
  return v4;
}

_DWORD *os_eventlink_create_remote_with_eventlink_VARIANT_armv81(const char *a1, uint64_t a2)
{
  int v3;
  mach_port_name_t v5;
  _DWORD *v6;
  mach_port_name_t v7;

  v7 = 0;
  v3 = os_eventlink_extract_remote_port_VARIANT_armv81(a2, &v7);
  if (v3)
  {
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = v3;
    return 0;
  }
  else
  {
    v5 = v7;
    v6 = os_eventlink_create_with_port_VARIANT_armv81(a1, v7);
    mach_port_mod_refs(*MEMORY[0x1E0C883F0], v5, 0, -1);
    return v6;
  }
}

uint64_t os_eventlink_associate_VARIANT_armv81(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t StatusReg;
  int v4;

  if (!*(_DWORD *)(a1 + 32))
  {
    result = 22;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_25:
    **(_DWORD **)(StatusReg + 8) = result;
    return result;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    result = 89;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_25;
  }
  if (a2 != 1)
    _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v4 = mach_eventlink_associate();
  result = 0xFFFFFFFFLL;
  if (v4 <= 13)
  {
    if (v4)
    {
      if (v4 == 4)
      {
        result = 22;
      }
      else
      {
        if (v4 != 13)
          return result;
        result = 37;
      }
    }
    else
    {
      result = 0;
    }
    goto LABEL_24;
  }
  if (v4 > 36)
  {
    if (v4 != 37)
    {
      if (v4 != 49)
        return result;
      result = 60;
      goto LABEL_24;
    }
    goto LABEL_20;
  }
  if (v4 == 14)
  {
    result = 53;
    goto LABEL_24;
  }
  if (v4 == 15)
  {
LABEL_20:
    result = 89;
LABEL_24:
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_25;
  }
  return result;
}

uint64_t os_eventlink_disassociate_VARIANT_armv81(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t result;
  _DWORD *v4;

  if (*(_DWORD *)(a1 + 32))
  {
    if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      return 0;
    v1 = mach_eventlink_disassociate();
    v2 = v1;
    if (v1 <= 13)
    {
      switch(v1)
      {
        case 0:
          result = 0;
          goto LABEL_20;
        case 4:
          result = 22;
          goto LABEL_20;
        case 13:
          result = 37;
          goto LABEL_20;
      }
    }
    else if (v1 > 36)
    {
      result = 0;
      if (v2 == 37)
        return result;
      if (v2 == 49)
      {
        result = 60;
        goto LABEL_20;
      }
    }
    else
    {
      if (v1 == 14)
      {
        result = 53;
        goto LABEL_20;
      }
      if (v1 == 15)
      {
        result = 89;
LABEL_20:
        v4 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        goto LABEL_21;
      }
    }
    return 0xFFFFFFFFLL;
  }
  v4 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  result = 22;
LABEL_21:
  *v4 = result;
  return result;
}

uint64_t os_eventlink_wait_until_VARIANT_armv81(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;

  if (a2 != 32)
    a3 = 0;
  v8 = mach_absolute_time() + a3;
  return os_eventlink_wait_until_internal(a1, a2, v8, a4);
}

uint64_t os_eventlink_wait_VARIANT_armv81(uint64_t a1, _QWORD *a2)
{
  return os_eventlink_wait_until_internal(a1, 32, 0, a2);
}

uint64_t os_eventlink_signal_VARIANT_armv81(uint64_t a1)
{
  int v1;
  uint64_t result;
  unint64_t StatusReg;

  if (!*(_DWORD *)(a1 + 32))
  {
    result = 22;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_22:
    **(_DWORD **)(StatusReg + 8) = result;
    return result;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    result = 89;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_22;
  }
  v1 = mach_eventlink_signal();
  result = 0xFFFFFFFFLL;
  if (v1 <= 13)
  {
    if (v1)
    {
      if (v1 == 4)
      {
        result = 22;
      }
      else
      {
        if (v1 != 13)
          return result;
        result = 37;
      }
    }
    else
    {
      result = 0;
    }
    goto LABEL_21;
  }
  if (v1 > 36)
  {
    if (v1 != 37)
    {
      if (v1 != 49)
        return result;
      result = 60;
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  if (v1 == 14)
  {
    result = 53;
    goto LABEL_21;
  }
  if (v1 == 15)
  {
LABEL_17:
    result = 89;
LABEL_21:
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_22;
  }
  return result;
}

uint64_t os_eventlink_signal_and_wait_VARIANT_armv81(uint64_t a1, _QWORD *a2)
{
  return os_eventlink_signal_and_wait_until_internal(a1, 32, 0, a2);
}

uint64_t os_eventlink_signal_and_wait_until_VARIANT_armv81(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;

  if (a2 != 32)
    a3 = 0;
  v8 = mach_absolute_time() + a3;
  return os_eventlink_signal_and_wait_until_internal(a1, a2, v8, a4);
}

uint64_t os_eventlink_cancel_VARIANT_armv81(uint64_t result)
{
  mach_port_name_t v1;

  if ((*(_BYTE *)(result + 24) & 2) == 0)
  {
    atomic_fetch_or_explicit((atomic_ullong *volatile)(result + 24), 2uLL, memory_order_relaxed);
    v1 = *(_DWORD *)(result + 32);
    if (v1 - 1 <= 0xFFFFFFFD)
    {
      if (mach_port_mod_refs(*MEMORY[0x1E0C883F0], v1, 0, 1))
        os_eventlink_create_with_port_VARIANT_mp_cold_1();
      return mach_eventlink_destroy();
    }
  }
  return result;
}

void _os_workgroup_xref_dispose_VARIANT_armv81(uint64_t a1)
{
  void (**v1)(_QWORD);

  v1 = *(void (***)(_QWORD))(a1 + 48);
  if (v1)
  {
    v1[1](*v1);
    free(v1);
  }
}

uint64_t _os_workgroup_interval_xref_dispose_VARIANT_armv81(uint64_t result)
{
  if ((*(_QWORD *)(result + 24) & 8) != 0)
    _os_workgroup_interval_xref_dispose_VARIANT_mp_cold_1();
  return result;
}

void _os_workgroup_dispose_VARIANT_armv81(uint64_t a1)
{
  uint64_t v2;
  mach_port_name_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_DWORD *)(a1 + 40);
  if (!v3)
    goto LABEL_6;
  if (mach_port_mod_refs(*MEMORY[0x1E0C883F0], v3, 0, -1))
  {
    _os_assumes_log();
    if ((v2 & 1) == 0)
      goto LABEL_6;
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_6;
  }
  if (work_interval_destroy())
    _os_assumes_log();
LABEL_6:
  if ((v2 & 4) != 0)
    free(*(void **)(a1 + 16));
}

uint64_t _os_workgroup_debug_VARIANT_armv81(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, "wg[%p] = {xref = %d, ref = %d, name = %s}", (const void *)a1, *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 8), *(const char **)(a1 + 16));
}

uint64_t _os_workgroup_interval_dispose_VARIANT_armv81()
{
  return work_interval_instance_free();
}

uint64_t _os_workgroup_tsd_cleanup_VARIANT_armv81(uint64_t result)
{
  char v1[512];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C874D8];
  if (result)
    _os_workgroup_tsd_cleanup_VARIANT_mp_cold_1(v1, result);
  return result;
}

void _os_workgroup_join_token_tsd_cleanup_VARIANT_armv81(_QWORD *a1, const char *a2)
{
  if (a1)
  {
    if (a1[1])
      os_eventlink_create_with_port_VARIANT_mp_cold_1();
    _os_workgroup_leave_update_wg_VARIANT_armv81(a1[2], a2);
    free(a1);
  }
}

void *_os_workgroup_leave_update_wg_VARIANT_armv81(uint64_t a1, const char *a2)
{
  unint64_t StatusReg;
  void *result;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(_QWORD *)(StatusReg + 928) != a1)
    os_eventlink_create_with_port_VARIANT_mp_cold_1();
  if (!atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 60), 0xFFFFFFFF, memory_order_relaxed))
    _os_workgroup_leave_update_wg_VARIANT_mp_cold_1();
  result = *(void **)(StatusReg + 928);
  *(_QWORD *)(StatusReg + 928) = 0;
  if (result)
    return _os_object_release_internal_VARIANT_armv81(result, a2);
  return result;
}

uint64_t _workgroup_init_VARIANT_armv81()
{
  return pthread_install_workgroup_functions_np();
}

uint64_t os_workgroup_interval_data_set_flags_VARIANT_armv81(_DWORD *a1, unsigned int a2)
{
  uint64_t result;

  if (!a1)
    return 22;
  result = 22;
  if (a2 <= 1 && *a1 == 1386695757)
  {
    result = 0;
    a1[1] = a2;
  }
  return result;
}

uint64_t os_workgroup_interval_data_set_telemetry_VARIANT_armv81(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2 == 1 && a4 == 40)
  {
    result = 0;
    *(_DWORD *)(a1 + 16) = 2621441;
    *(_QWORD *)(a1 + 8) = a3;
  }
  else
  {
    result = 22;
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
  }
  return result;
}

uint64_t os_workgroup_attr_set_interval_type_VARIANT_armv81(uint64_t a1, int a2)
{
  BOOL v3;
  uint64_t result;

  if (!a1)
    return 22;
  v3 = *(_DWORD *)a1 == 799564740 || *(_DWORD *)a1 == 799564724;
  if (!v3 || (a2 - 1) > 9)
    return 22;
  result = 0;
  *(_WORD *)(a1 + 8) = a2;
  return result;
}

uint64_t os_workgroup_attr_set_flags_VARIANT_armv81(_DWORD *a1, int a2)
{
  uint64_t result;

  if (!a1)
    return 22;
  if (*a1 != 799564740 && *a1 != 799564724)
    return 22;
  result = 0;
  a1[1] = a2;
  return result;
}

uint64_t os_workgroup_attr_set_telemetry_flavor_VARIANT_armv81(uint64_t a1, int a2)
{
  BOOL v3;
  uint64_t result;

  if (!a1)
    return 22;
  v3 = *(_DWORD *)a1 == 799564740 || *(_DWORD *)a1 == 799564724;
  if (!v3 || a2 != 1)
    return 22;
  result = 0;
  *(_WORD *)(a1 + 10) = 1;
  return result;
}

void *os_workgroup_interval_copy_current_4AudioToolbox_VARIANT_armv81()
{
  unsigned __int16 *v0;

  v0 = *(unsigned __int16 **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 928);
  if (v0 && v0[28] - 3 <= 1)
    return os_retain(v0);
  else
    return 0;
}

_DWORD *os_workgroup_create_VARIANT_armv81(const char *a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  BOOL v6;
  _DWORD *v7;
  int *v8;
  int v9;
  uint64_t work_interval_0;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  if (a2)
  {
    if (*(_DWORD *)a2 != 799564740 && *(_DWORD *)a2 != 799564724)
      goto LABEL_17;
    v4 = a2[1];
    v13 = *a2;
    v14 = v4;
    v5 = a2[3];
    v15 = a2[2];
    v16 = v5;
    v6 = (_DWORD)v13 == 799564724 || (_DWORD)v13 == 799564740;
    if (!v6 || (LODWORD(v13) = 2015762650, WORD4(v13)))
    {
LABEL_17:
      v7 = 0;
      v8 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      v9 = 22;
LABEL_20:
      *v8 = v9;
      return v7;
    }
  }
  else
  {
    v13 = _os_workgroup_attr_default_0;
    v14 = unk_18A06E8E8;
    v15 = xmmword_18A06E8F8;
    v16 = unk_18A06E908;
  }
  if ((BYTE4(v13) & 2) == 0 || WORD5(v13))
  {
    v7 = 0;
    v8 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    v9 = 45;
    goto LABEL_20;
  }
  work_interval_0 = _os_workgroup_create_work_interval_0((uint64_t)&v13);
  if (!work_interval_0)
    return 0;
  v12 = work_interval_0;
  v7 = _os_object_alloc((uint64_t)OS_os_workgroup, 64);
  *((_QWORD *)v7 + 4) = v12;
  v7[10] = 0;
  *((_QWORD *)v7 + 3) = 1;
  *((_WORD *)v7 + 28) = WORD4(v13);
  _os_workgroup_set_name((uint64_t)v7, a1);
  return v7;
}

uint64_t _os_workgroup_create_work_interval_0(uint64_t a1)
{
  int v1;
  uint64_t result;
  int v3;

  _wg_type_to_wi_flags_0(*(unsigned __int16 *)(a1 + 8));
  v1 = work_interval_create();
  result = 0;
  if (!v1)
  {
    v3 = work_interval_copy_port();
    result = 0;
    if (v3 < 0)
    {
      work_interval_destroy();
      return 0;
    }
  }
  return result;
}

_DWORD *os_workgroup_interval_create_VARIANT_armv81(const char *a1, int a2, __int128 *a3)
{
  __int128 v6;
  __int128 v7;
  int v8;
  int v9;
  _DWORD *v10;
  int *v11;
  int v12;
  uint64_t work_interval_0;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  if (a3)
  {
    if (*(_DWORD *)a3 != 799564740 && *(_DWORD *)a3 != 799564724)
      goto LABEL_22;
    v6 = a3[1];
    v16 = *a3;
    v17 = v6;
    v7 = a3[3];
    v18 = a3[2];
    v19 = v7;
    if ((_DWORD)v16 == 799564724)
    {
      v9 = DWORD1(v16);
      if (!DWORD1(v16))
        v9 = 2;
      DWORD1(v16) = v9;
      if (WORD4(v16) <= 1u)
        v8 = 1;
      else
        v8 = WORD4(v16);
      WORD4(v16) = v8;
    }
    else
    {
      if ((_DWORD)v16 != 799564740)
        goto LABEL_22;
      v8 = WORD4(v16);
    }
    LODWORD(v16) = 2015762650;
    if ((v8 - 1) >= 0xA)
    {
LABEL_22:
      v10 = 0;
      v11 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      v12 = 22;
      goto LABEL_23;
    }
  }
  else
  {
    v16 = _os_workgroup_interval_attr_default_0;
    v17 = unk_18A06E928;
    v18 = xmmword_18A06E938;
    v19 = unk_18A06E948;
    LOWORD(v8) = 1;
  }
  if ((BYTE4(v16) & 4) != 0)
    goto LABEL_22;
  if ((BYTE4(v16) & 2) == 0)
  {
    v10 = 0;
    v11 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    v12 = 45;
LABEL_23:
    *v11 = v12;
    return v10;
  }
  work_interval_0 = _os_workgroup_create_work_interval_0((uint64_t)&v16);
  if (!work_interval_0)
    return 0;
  v15 = work_interval_0;
  v10 = _os_object_alloc((uint64_t)OS_os_workgroup_interval, 80);
  *((_QWORD *)v10 + 4) = v15;
  v10[10] = 0;
  v10[16] = a2;
  *((_QWORD *)v10 + 9) = work_interval_instance_alloc();
  v10[17] = 0;
  *((_WORD *)v10 + 28) = v8;
  *((_QWORD *)v10 + 3) = 1;
  *((_WORD *)v10 + 22) = WORD5(v16);
  _os_workgroup_set_name((uint64_t)v10, a1);
  return v10;
}

_DWORD *os_workgroup_create_with_workload_id_VARIANT_armv81(const char *a1, char *a2, __int128 *a3)
{
  __int128 v6;
  __int128 v7;
  int v8;
  int v9;
  _DWORD *v10;
  unint64_t StatusReg;
  int *v12;
  int v13;
  uint64_t work_interval_0;
  uint64_t v15;
  const char *v16;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  if (a3)
  {
    if (*(_DWORD *)a3 != 799564740 && *(_DWORD *)a3 != 799564724)
      goto LABEL_32;
    v6 = a3[1];
    v19 = *a3;
    v20 = v6;
    v7 = a3[3];
    v21 = a3[2];
    v22 = v7;
    if ((_DWORD)v19 != 799564740)
    {
      if ((_DWORD)v19 != 799564724)
      {
LABEL_32:
        os_workgroup_create_with_workload_id_VARIANT_armv81_cold_2();
        return 0;
      }
      v8 = DWORD1(v19);
      if (!DWORD1(v19))
        v8 = 2;
      DWORD1(v19) = v8;
    }
    LODWORD(v19) = 2015762650;
  }
  else
  {
    v19 = _os_workgroup_with_workload_id_attr_default_0;
    v20 = unk_18A06E968;
    v21 = xmmword_18A06E978;
    v22 = unk_18A06E988;
  }
  LOWORD(v18) = 0;
  v9 = _os_workgroup_lookup_type_from_workload_id_0(a2, (unsigned int *)((unint64_t)&v19 | 0xC), &v18);
  if (v9)
  {
    if (!WORD4(v19) || WORD4(v19) == (unsigned __int16)v18)
    {
      WORD4(v19) = v9;
    }
    else if (v9 != WORD4(v19))
    {
      _dispatch_log("BUG IN CLIENT of %s: Mismatched workload ID and attribute interval type: %s vs %hd", "os_workgroup_create_with_workload_id$VARIANT$armv81", a2, WORD4(v19));
      v10 = 0;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_31:
      v12 = *(int **)(StatusReg + 8);
      v13 = 22;
      goto LABEL_24;
    }
  }
  if (DWORD1(v19) != 2)
  {
    os_workgroup_create_with_workload_id_VARIANT_armv81_cold_1(SDWORD1(v19));
    return 0;
  }
  if (WORD4(v19))
  {
    _dispatch_log("BUG IN CLIENT of %s: Non-default workload type: %s (%hd)", "os_workgroup_create_with_workload_id$VARIANT$armv81", a2, WORD4(v19));
    v10 = 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_31;
  }
  if (!WORD5(v19))
  {
    v18 = 0;
    work_interval_0 = _os_workgroup_create_work_interval_0((uint64_t)&v19);
    if (work_interval_0)
    {
      v15 = work_interval_0;
      v10 = _os_object_alloc((uint64_t)OS_os_workgroup, 64);
      *((_QWORD *)v10 + 4) = v15;
      v10[10] = v18;
      *((_QWORD *)v10 + 3) = 1;
      *((_WORD *)v10 + 28) = 0;
      if (!_os_workgroup_set_work_interval_workload_id_0((uint64_t)v10, a2, SHIDWORD(v19)))
      {
        _os_workgroup_set_name((uint64_t)v10, a1);
        return v10;
      }
      _os_object_release_VARIANT_armv81(v10, v16);
    }
    return 0;
  }
  v10 = 0;
  v12 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  v13 = 45;
LABEL_24:
  *v12 = v13;
  return v10;
}

uint64_t _os_workgroup_set_work_interval_workload_id_0(uint64_t a1, const char *a2, int a3)
{
  unsigned int v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v4 = *(_DWORD *)(a1 + 40);
  if (v4 + 1 <= 1)
    _os_workgroup_set_work_interval_workload_id_cold_1(v4);
  if (!a3)
    return 0;
  v6 = a3 & 0xFFFFFFFE;
  __strlcpy_chk();
  _wg_type_to_wi_flags_0(*(unsigned __int16 *)(a1 + 56));
  v7 = __work_interval_ctl();
  if ((_DWORD)v7)
  {
    if ((_DWORD)v7 != -1)
    {
      v9 = 0;
      v8 = v7;
      goto LABEL_12;
    }
    v8 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if ((_DWORD)v8)
    {
      _dispatch_bug(576, (int)v8);
      v9 = 0;
      LODWORD(v7) = v8;
      goto LABEL_12;
    }
  }
  v9 = v6;
  if ((v6 & 1) != 0)
  {
    LODWORD(v7) = 0;
    v8 = 37;
LABEL_12:
    _dispatch_log("BUG IN CLIENT of %s: Unable to set kernel workload ID: %s (0x%x) -> %d (0x%x)", "_os_workgroup_set_work_interval_workload_id", a2, v6, v7, v9);
    return v8;
  }
  v8 = 0;
  *(_QWORD *)(a1 + 24) |= 0x10uLL;
  return v8;
}

_DWORD *os_workgroup_interval_create_with_workload_id_VARIANT_armv81(const char *a1, char *a2, int a3, __int128 *a4)
{
  __int128 v8;
  __int128 v9;
  int v10;
  __int16 v11;
  int v12;
  _DWORD *v13;
  unint64_t StatusReg;
  __int16 v15;
  uint64_t work_interval_0;
  uint64_t v17;
  const char *v18;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  if (a4)
  {
    if (*(_DWORD *)a4 != 799564740 && *(_DWORD *)a4 != 799564724)
      goto LABEL_33;
    v8 = a4[1];
    v21 = *a4;
    v22 = v8;
    v9 = a4[3];
    v23 = a4[2];
    v24 = v9;
    if ((_DWORD)v21 != 799564740)
    {
      if ((_DWORD)v21 != 799564724)
      {
LABEL_33:
        os_workgroup_interval_create_with_workload_id_VARIANT_armv81_cold_2();
        return 0;
      }
      v10 = DWORD1(v21);
      if (!DWORD1(v21))
        v10 = 2;
      DWORD1(v21) = v10;
      v11 = WORD4(v21);
      if (WORD4(v21) <= 1u)
        v11 = 1;
      WORD4(v21) = v11;
    }
    LODWORD(v21) = 2015762650;
  }
  else
  {
    v21 = _os_workgroup_interval_attr_default_0;
    v22 = unk_18A06E928;
    v23 = xmmword_18A06E938;
    v24 = unk_18A06E948;
  }
  LOWORD(v20) = 0;
  v12 = _os_workgroup_lookup_type_from_workload_id_0(a2, (unsigned int *)((unint64_t)&v21 | 0xC), &v20);
  if (v12)
  {
    if (WORD4(v21) == 1 || WORD4(v21) == (unsigned __int16)v20)
    {
      WORD4(v21) = v12;
    }
    else if (v12 != WORD4(v21))
    {
      _dispatch_log("BUG IN CLIENT of %s: Mismatched workload ID and attribute interval type: %s vs %hd", "os_workgroup_interval_create_with_workload_id$VARIANT$armv81", a2, WORD4(v21));
      v13 = 0;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_31:
      **(_DWORD **)(StatusReg + 8) = 22;
      return v13;
    }
  }
  if (DWORD1(v21) == 2)
  {
    v15 = WORD4(v21);
    if (WORD4(v21) - 1 >= 0xA)
    {
      _dispatch_log("BUG IN CLIENT of %s: Invalid workload interval type: %s (%hd)", "os_workgroup_interval_create_with_workload_id$VARIANT$armv81", a2, WORD4(v21));
      v13 = 0;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      goto LABEL_31;
    }
    v20 = 0;
    work_interval_0 = _os_workgroup_create_work_interval_0((uint64_t)&v21);
    if (work_interval_0)
    {
      v17 = work_interval_0;
      v13 = _os_object_alloc((uint64_t)OS_os_workgroup_interval, 80);
      *((_QWORD *)v13 + 4) = v17;
      v13[10] = v20;
      v13[16] = a3;
      *((_QWORD *)v13 + 9) = work_interval_instance_alloc();
      v13[17] = 0;
      *((_WORD *)v13 + 28) = v15;
      *((_QWORD *)v13 + 3) = 1;
      *((_WORD *)v13 + 22) = WORD5(v21);
      if (!_os_workgroup_set_work_interval_workload_id_0((uint64_t)v13, a2, SHIDWORD(v21)))
      {
        _os_workgroup_set_name((uint64_t)v13, a1);
        return v13;
      }
      _os_object_release_VARIANT_armv81(v13, v18);
    }
  }
  else
  {
    os_workgroup_interval_create_with_workload_id_VARIANT_armv81_cold_1(SDWORD1(v21));
  }
  return 0;
}

uint64_t os_workgroup_join_VARIANT_armv81(uint64_t a1, uint64_t a2)
{
  unint64_t StatusReg;
  _DWORD *v3;
  uint64_t result;
  uint64_t v6;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(_QWORD *)(StatusReg + 928))
  {
    v3 = *(_DWORD **)(StatusReg + 8);
    result = 37;
LABEL_9:
    *v3 = result;
    return result;
  }
  v6 = *(_QWORD *)(a1 + 24);
  if ((v6 & 2) != 0)
  {
    v3 = *(_DWORD **)(StatusReg + 8);
    result = 22;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a1 + 40))
  {
    if ((v6 & 1) != 0)
    {
      if (work_interval_join())
        return **(unsigned int **)(StatusReg + 8);
    }
    else if (work_interval_join_port())
    {
      return **(unsigned int **)(StatusReg + 8);
    }
  }
  _os_workgroup_join_update_wg_VARIANT_armv81(a1, a2);
  return 0;
}

void *os_workgroup_leave_VARIANT_armv81(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t StatusReg;
  uint64_t v5;

  if (*(_DWORD *)a2 != 1298094680)
    os_workgroup_leave_VARIANT_mp_cold_5();
  v2 = *(_DWORD *)(a2 + 4);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (v2 != *(_DWORD *)(StatusReg + 24))
    os_workgroup_leave_VARIANT_mp_cold_4();
  v5 = *(_QWORD *)(StatusReg + 928);
  if (v5 != a1 || *(_QWORD *)(a2 + 16) != v5)
    os_workgroup_leave_VARIANT_mp_cold_3();
  if (*(_QWORD *)(a2 + 8))
    os_eventlink_create_with_port_VARIANT_mp_cold_1();
  if (*(_DWORD *)(a1 + 40) && work_interval_leave())
    os_workgroup_leave_VARIANT_mp_cold_1();
  return _os_workgroup_leave_update_wg_VARIANT_armv81(a1, (const char *)a2);
}

_DWORD *os_workgroup_parallel_create_VARIANT_armv81(const char *a1, int *a2)
{
  int v3;
  int v5;
  _DWORD *v6;
  int *v7;
  int v8;

  if (!a2)
    goto LABEL_19;
  v3 = *a2;
  if (*a2 != 799564724 && v3 != 799564740)
    goto LABEL_15;
  v5 = a2[1];
  if (v3 != 799564740)
  {
    if (v3 != 799564724)
      goto LABEL_15;
    if (!v5)
      LOBYTE(v5) = 6;
    if (!*((_WORD *)a2 + 4))
    {
LABEL_13:
      if ((v5 & 2) == 0 || *((_WORD *)a2 + 5))
      {
        v6 = 0;
        v7 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        v8 = 45;
        goto LABEL_18;
      }
LABEL_19:
      v6 = _os_object_alloc((uint64_t)OS_os_workgroup_parallel, 64);
      *((_QWORD *)v6 + 4) = 0;
      *((_QWORD *)v6 + 3) = 1;
      *((_WORD *)v6 + 28) = 64;
      _os_workgroup_set_name((uint64_t)v6, a1);
      return v6;
    }
  }
  if (*((_WORD *)a2 + 4) == 64)
    goto LABEL_13;
LABEL_15:
  v6 = 0;
  v7 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  v8 = 22;
LABEL_18:
  *v7 = v8;
  return v6;
}

uint64_t os_workgroup_copy_port_VARIANT_armv81(uint64_t a1, _DWORD *a2)
{
  mach_port_name_t v4;
  uint64_t result;

  if (!a1)
    os_eventlink_create_with_port_VARIANT_mp_cold_1();
  if (!a2)
    os_eventlink_create_with_port_VARIANT_mp_cold_1();
  *a2 = 0;
  if ((*(_QWORD *)(a1 + 24) & 2) != 0)
    return 22;
  v4 = *(_DWORD *)(a1 + 40);
  if (!v4)
    return 22;
  result = mach_port_mod_refs(*MEMORY[0x1E0C883F0], v4, 0, 1);
  if ((_DWORD)result)
  {
    os_workgroup_copy_port_VARIANT_mp_cold_3();
    return 12;
  }
  else
  {
    *a2 = *(_DWORD *)(a1 + 40);
  }
  return result;
}

_DWORD *os_workgroup_create_with_port_VARIANT_armv81(const char *a1, mach_port_name_t a2)
{
  _DWORD *v4;

  if (a2 - 1 >= 0xFFFFFFFE)
  {
    v4 = 0;
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
  }
  else
  {
    if (!work_interval_get_flags_from_port())
    {
      if (!mach_port_mod_refs(*MEMORY[0x1E0C883F0], a2, 0, 1))
      {
        v4 = _os_object_alloc((uint64_t)OS_os_workgroup, 64);
        v4[10] = a2;
        *((_WORD *)v4 + 28) = 0;
        _os_workgroup_set_name((uint64_t)v4, a1);
        return v4;
      }
      os_workgroup_create_with_port_VARIANT_mp_cold_2();
    }
    return 0;
  }
  return v4;
}

_DWORD *os_workgroup_create_with_workload_id_and_port_VARIANT_armv81(const char *a1, char *a2, mach_port_name_t a3)
{
  unsigned int v6;
  unsigned __int16 v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _DWORD *v11;
  int v12;
  const char *v13;
  unsigned int v15;
  unsigned int v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C874D8];
  if (a3 - 1 >= 0xFFFFFFFE)
  {
    os_workgroup_create_with_workload_id_and_port_VARIANT_armv81_cold_3(a3);
    return 0;
  }
  v15 = 0;
  if (work_interval_get_flags_from_port())
  {
    _dispatch_log("BUG IN CLIENT of %s: Invalid mach port 0x%x", "os_workgroup_create_with_workload_id_and_port$VARIANT$armv81", a3);
    return 0;
  }
  v6 = v15;
  v7 = 0;
  switch(v15 >> 28)
  {
    case 0u:
      break;
    case 1u:
      v7 = 4;
      break;
    case 2u:
      v7 = 5;
      break;
    case 3u:
      v7 = 2;
      break;
    case 4u:
      v7 = 7;
      break;
    case 5u:
      v7 = 8;
      break;
    case 6u:
      v7 = 9;
      break;
    case 7u:
      v7 = 10;
      break;
    default:
      os_workgroup_create_with_port_VARIANT_mp_cold_1((char *)v16, v15);
  }
  v16[0] = 0;
  LOWORD(v15) = 0;
  v8 = _os_workgroup_lookup_type_from_workload_id_0(a2, v16, &v15);
  if (v8)
  {
    v9 = v8;
    v10 = v6 & 0xF0000000;
    if ((_wg_type_to_wi_flags_0((unsigned __int16)v15) & 0x70000000) != v10
      && (_wg_type_to_wi_flags_0(v9) & 0x70000000) != v10)
    {
      _dispatch_log("BUG IN CLIENT of %s: Mismatched workload ID and port interval type: %s vs %hd", "os_workgroup_create_with_workload_id_and_port$VARIANT$armv81", a2, v7);
      v11 = 0;
      **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
      return v11;
    }
  }
  if (mach_port_mod_refs(*MEMORY[0x1E0C883F0], a3, 0, 1))
  {
    os_workgroup_create_with_workload_id_and_port_VARIANT_armv81_cold_2(a3);
    return 0;
  }
  v11 = _os_object_alloc((uint64_t)OS_os_workgroup, 64);
  v11[10] = a3;
  *((_WORD *)v11 + 28) = v7;
  v12 = _os_workgroup_set_work_interval_workload_id_0((uint64_t)v11, a2, v16[0]);
  if (v12 && v12 != 37)
  {
    _os_object_release_VARIANT_armv81(v11, v13);
    return 0;
  }
  _os_workgroup_set_name((uint64_t)v11, a1);
  return v11;
}

_DWORD *os_workgroup_create_with_workgroup_VARIANT_armv81(const char *a1, uint64_t a2)
{
  _DWORD *v4;
  mach_port_name_t v5;

  if ((*(_QWORD *)(a2 + 24) & 2) != 0)
  {
    v4 = 0;
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
    return v4;
  }
  v4 = _os_object_alloc((uint64_t)OS_os_workgroup, 64);
  *((_WORD *)v4 + 28) = *(_WORD *)(a2 + 56);
  v5 = *(_DWORD *)(a2 + 40);
  if (!v5)
  {
LABEL_7:
    _os_workgroup_set_name((uint64_t)v4, a1);
    return v4;
  }
  if (!mach_port_mod_refs(*MEMORY[0x1E0C883F0], v5, 0, 1))
  {
    v4[10] = *(_DWORD *)(a2 + 40);
    goto LABEL_7;
  }
  free(v4);
  return 0;
}

_DWORD *os_workgroup_create_with_workload_id_and_workgroup_VARIANT_armv81(const char *a1, char *a2, uint64_t a3)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  _DWORD *v10;
  mach_port_name_t v11;
  kern_return_t v12;
  int v13;
  int v14;
  const char *v15;
  unsigned int v17;
  unsigned __int16 v18;

  if ((*(_QWORD *)(a3 + 24) & 2) != 0)
  {
    os_workgroup_create_with_workload_id_and_workgroup_VARIANT_armv81_cold_1();
    return 0;
  }
  v17 = 0;
  v6 = _wg_type_to_wi_flags_0(*(unsigned __int16 *)(a3 + 56));
  v18 = 0;
  v7 = _os_workgroup_lookup_type_from_workload_id_0(a2, &v17, &v18);
  if (v7)
  {
    v8 = v7;
    v9 = v6 & 0x70000000;
    if ((_wg_type_to_wi_flags_0(v18) & 0x70000000) != v9 && (_wg_type_to_wi_flags_0(v8) & 0x70000000) != v9)
    {
      _dispatch_log("BUG IN CLIENT of %s: Mismatched workload ID and workgroup interval type: %s vs %hd", "os_workgroup_create_with_workload_id_and_workgroup$VARIANT$armv81", a2, *(unsigned __int16 *)(a3 + 56));
      v10 = 0;
      **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
      return v10;
    }
  }
  v10 = _os_object_alloc((uint64_t)OS_os_workgroup, 64);
  *((_WORD *)v10 + 28) = *(_WORD *)(a3 + 56);
  v11 = *(_DWORD *)(a3 + 40);
  if (!v11)
    goto LABEL_9;
  v12 = mach_port_mod_refs(*MEMORY[0x1E0C883F0], v11, 0, 1);
  v13 = *(_DWORD *)(a3 + 40);
  if (v12)
  {
    _dispatch_log("BUG IN CLIENT of %s: Invalid workgroup port 0x%x", "os_workgroup_create_with_workload_id_and_workgroup$VARIANT$armv81", v13);
    free(v10);
    return 0;
  }
  v10[10] = v13;
  v14 = _os_workgroup_set_work_interval_workload_id_0((uint64_t)v10, a2, v17);
  if (v14 && v14 != 37)
  {
    _os_object_release_VARIANT_armv81(v10, v15);
    return 0;
  }
LABEL_9:
  _os_workgroup_set_name((uint64_t)v10, a1);
  return v10;
}

uint64_t os_workgroup_max_parallel_threads_VARIANT_armv81(uint64_t a1)
{
  if (!a1)
    os_eventlink_create_with_port_VARIANT_mp_cold_1();
  if (*(unsigned __int16 *)(a1 + 56) - 3 > 1)
    return pthread_qos_max_parallelism();
  else
    return pthread_time_constraint_max_parallelism();
}

void *_os_workgroup_join_update_wg_VARIANT_armv81(uint64_t a1, uint64_t a2)
{
  unint64_t StatusReg;
  uint64_t v4;
  void *result;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(_QWORD *)(StatusReg + 928))
    _os_workgroup_join_update_wg_VARIANT_armv81_cold_1();
  atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 60), 1u, memory_order_relaxed);
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v4 = *(_QWORD *)(StatusReg + 24);
  *(_DWORD *)a2 = 1298094680;
  *(_DWORD *)(a2 + 4) = v4;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = a1;
  if (a1)
    _os_object_retain_internal_VARIANT_armv81(a1);
  result = *(void **)(StatusReg + 928);
  *(_QWORD *)(StatusReg + 928) = a1;
  if (result)
    return _os_object_release_internal_VARIANT_armv81(result, (const char *)a2);
  return result;
}

uint64_t os_workgroup_set_working_arena_VARIANT_armv81(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  void (**v10)(_QWORD);
  uint64_t result;
  _DWORD *v17;

  _X0 = malloc_type_calloc(4 * a3 + 24, 1uLL, 0xB26F0EFuLL);
  if (_X0)
  {
    _X0[4] = a3;
    *(_QWORD *)_X0 = a2;
    *((_QWORD *)_X0 + 1) = a4;
    _X2 = *(void (***)(_QWORD))(a1 + 48);
    do
    {
      if (HIDWORD(*(_QWORD *)(a1 + 56)))
      {
        free(_X0);
        v17 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        result = 16;
        goto LABEL_9;
      }
      v10 = _X2;
      _X3 = *(_QWORD *)(a1 + 56);
      __asm { CASP            X2, X3, X0, X1, [X9] }
    }
    while (_X2 != v10);
    if (v10)
    {
      v10[1](*v10);
      free(v10);
    }
    return 0;
  }
  else
  {
    v17 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    result = 12;
LABEL_9:
    *v17 = result;
  }
  return result;
}

uint64_t os_workgroup_get_working_arena_VARIANT_armv81(uint64_t a1, _DWORD *a2)
{
  unint64_t StatusReg;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(_QWORD *)(StatusReg + 928) != a1)
    os_workgroup_get_working_arena_VARIANT_mp_cold_3();
  v3 = *(_QWORD *)(a1 + 48);
  if (!v3)
    return 0;
  if (a2)
  {
    v4 = *(unsigned int *)(v3 + 16);
    if (!(_DWORD)v4)
      os_workgroup_get_working_arena_VARIANT_mp_cold_1();
    v5 = 0;
    while (*(_DWORD *)(v3 + 24 + 4 * v5) != *(_DWORD *)(StatusReg + 24))
    {
      if (v4 == ++v5)
      {
        LODWORD(v5) = atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 20), 1u, memory_order_relaxed);
        if (v5 >= v4)
          os_workgroup_get_working_arena_VARIANT_mp_cold_2();
        *(_DWORD *)(v3 + 4 * v5 + 24) = *(_QWORD *)(StatusReg + 24);
        break;
      }
    }
    *a2 = v5;
  }
  return *(_QWORD *)v3;
}

uint64_t os_workgroup_cancel_VARIANT_armv81(uint64_t result)
{
  atomic_fetch_or_explicit((atomic_ullong *volatile)(result + 24), 2uLL, memory_order_relaxed);
  return result;
}

uint64_t os_workgroup_testcancel_VARIANT_armv81(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 24) >> 1) & 1;
}

uint64_t os_workgroup_interval_start_VARIANT_armv81(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t StatusReg;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(_QWORD *)(StatusReg + 928) != a1)
    os_workgroup_get_working_arena_VARIANT_mp_cold_3();
  if (a4 && *(_WORD *)(a4 + 16) == 1 && *(_WORD *)(a1 + 44) != 1
    || a3 < a2
    || *(_DWORD *)(a1 + 64) == 32 && mach_absolute_time() < a2)
  {
    v7 = *(_DWORD **)(StatusReg + 8);
    v8 = 22;
LABEL_7:
    *v7 = v8;
    return v8;
  }
  if (!os_unfair_lock_trylock((os_unfair_lock_t)(a1 + 68)))
  {
    v7 = *(_DWORD **)(StatusReg + 8);
    v8 = 16;
    goto LABEL_7;
  }
  if (a4 && *(_DWORD *)a4 == 1386695757)
    v10 = *(_DWORD *)(a4 + 4) & 1;
  else
    v10 = 0;
  v11 = *(_QWORD *)(a1 + 24);
  while (1)
  {
    if ((v11 & 0xA) != 0)
    {
      v8 = 22;
LABEL_32:
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 68));
      v7 = *(_DWORD **)(StatusReg + 8);
      goto LABEL_7;
    }
    if ((v11 & 1) == 0)
    {
      v8 = 1;
      goto LABEL_32;
    }
    if (v10 && (v11 & 0x10) == 0)
      break;
    v12 = v11;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 24), (unint64_t *)&v12, v11 | 8, memory_order_relaxed, memory_order_relaxed);
    v13 = v12 == v11;
    v11 = v12;
    if (v13)
      goto LABEL_24;
  }
  **(_DWORD **)(StatusReg + 8) = 22;
LABEL_24:
  work_interval_instance_clear();
  work_interval_instance_set_start();
  work_interval_instance_set_deadline();
  work_interval_instance_set_complexity();
  v8 = work_interval_instance_start();
  if ((_DWORD)v8)
  {
    atomic_fetch_and_explicit((atomic_ullong *volatile)(a1 + 24), 0xFFFFFFFFFFFFFFF7, memory_order_relaxed);
  }
  else if (a4 && *(_WORD *)(a4 + 16) == 1)
  {
    _os_workgroup_interval_copy_telemetry_data_0(a1, a4);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 68));
  return v8;
}

double _os_workgroup_interval_copy_telemetry_data_0(uint64_t a1, uint64_t a2)
{
  double result;
  uint64_t v4;
  _OWORD v5[3];

  memset(v5, 0, 40);
  work_interval_instance_get_telemetry_data();
  if (*(_WORD *)(a2 + 16) == 1)
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)v4 = *(_QWORD *)&v5[0];
    *(_OWORD *)(v4 + 24) = *(_OWORD *)((char *)&v5[1] + 8);
    result = *((double *)v5 + 1);
    *(_OWORD *)(v4 + 8) = *(_OWORD *)((char *)v5 + 8);
  }
  return result;
}

uint64_t os_workgroup_interval_update_VARIANT_armv81(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t StatusReg;
  uint64_t v4;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(_QWORD *)(StatusReg + 928) != a1)
    os_workgroup_get_working_arena_VARIANT_mp_cold_3();
  v4 = a3;
  if (!a3)
  {
    v6 = (os_unfair_lock_s *)(a1 + 68);
    if (os_unfair_lock_trylock((os_unfair_lock_t)(a1 + 68)))
      goto LABEL_9;
LABEL_12:
    v9 = *(_DWORD **)(StatusReg + 8);
    v4 = 16;
    goto LABEL_18;
  }
  if (*(_WORD *)(a3 + 16) == 1 && *(_WORD *)(a1 + 44) != 1)
    goto LABEL_17;
  v6 = (os_unfair_lock_s *)(a1 + 68);
  if (!os_unfair_lock_trylock((os_unfair_lock_t)(a1 + 68)))
    goto LABEL_12;
  if (*(_DWORD *)v4 == 1386695757)
  {
    v7 = *(_DWORD *)(v4 + 4) & 1;
    goto LABEL_10;
  }
LABEL_9:
  v7 = 0;
LABEL_10:
  v8 = *(_QWORD *)(a1 + 24);
  if ((v8 & 1) == 0)
  {
    os_unfair_lock_unlock(v6);
    v9 = *(_DWORD **)(StatusReg + 8);
    v4 = 1;
LABEL_18:
    *v9 = v4;
    return v4;
  }
  if (v7 && (v8 & 0x10) == 0 || (v8 & 8) == 0)
  {
    os_unfair_lock_unlock(v6);
LABEL_17:
    v9 = *(_DWORD **)(StatusReg + 8);
    v4 = 22;
    goto LABEL_18;
  }
  work_interval_instance_set_deadline();
  work_interval_instance_set_complexity();
  if (work_interval_instance_update())
  {
    v4 = **(unsigned int **)(StatusReg + 8);
  }
  else if (v4)
  {
    if (*(_WORD *)(v4 + 16) == 1)
      _os_workgroup_interval_copy_telemetry_data_0(a1, v4);
    v4 = 0;
  }
  os_unfair_lock_unlock(v6);
  return v4;
}

uint64_t os_workgroup_interval_finish_VARIANT_armv81(uint64_t a1, uint64_t a2)
{
  unint64_t StatusReg;
  uint64_t v3;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(_QWORD *)(StatusReg + 928) != a1)
    os_workgroup_get_working_arena_VARIANT_mp_cold_3();
  v3 = a2;
  if (!a2)
  {
    v5 = (os_unfair_lock_s *)(a1 + 68);
    if (os_unfair_lock_trylock((os_unfair_lock_t)(a1 + 68)))
      goto LABEL_9;
LABEL_12:
    v8 = *(_DWORD **)(StatusReg + 8);
    v3 = 16;
    goto LABEL_18;
  }
  if (*(_WORD *)(a2 + 16) == 1 && *(_WORD *)(a1 + 44) != 1)
    goto LABEL_17;
  v5 = (os_unfair_lock_s *)(a1 + 68);
  if (!os_unfair_lock_trylock((os_unfair_lock_t)(a1 + 68)))
    goto LABEL_12;
  if (*(_DWORD *)v3 == 1386695757)
  {
    v6 = *(_DWORD *)(v3 + 4) & 1;
    goto LABEL_10;
  }
LABEL_9:
  v6 = 0;
LABEL_10:
  v7 = *(_QWORD *)(a1 + 24);
  if ((v7 & 1) == 0)
  {
    os_unfair_lock_unlock(v5);
    v8 = *(_DWORD **)(StatusReg + 8);
    v3 = 1;
LABEL_18:
    *v8 = v3;
    return v3;
  }
  if (v6 && (v7 & 0x10) == 0 || (v7 & 8) == 0)
  {
    os_unfair_lock_unlock(v5);
LABEL_17:
    v8 = *(_DWORD **)(StatusReg + 8);
    v3 = 22;
    goto LABEL_18;
  }
  if (*(_DWORD *)(a1 + 64) == 32)
    mach_absolute_time();
  work_interval_instance_set_finish();
  work_interval_instance_set_complexity();
  if (work_interval_instance_finish())
  {
    v3 = **(unsigned int **)(StatusReg + 8);
  }
  else
  {
    atomic_fetch_and_explicit((atomic_ullong *volatile)(a1 + 24), 0xFFFFFFFFFFFFFFF7, memory_order_relaxed);
    if (v3)
    {
      if (*(_WORD *)(v3 + 16) == 1)
        _os_workgroup_interval_copy_telemetry_data_0(a1, v3);
      v3 = 0;
    }
  }
  os_unfair_lock_unlock(v5);
  return v3;
}

uint64_t _os_workgroup_pthread_create_with_workgroup_0(pthread_t *a1, void *a2, const pthread_attr_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  const char *v11;
  uint64_t v12;

  v10 = _dispatch_calloc(1uLL, 0x18uLL);
  _os_object_retain_internal_VARIANT_armv81((uint64_t)a2);
  *v10 = a2;
  v10[1] = a4;
  v10[2] = a5;
  v12 = pthread_create(a1, a3, (void *(__cdecl *)(void *))_os_workgroup_pthread_start_0, v10);
  if ((_DWORD)v12)
  {
    _os_object_release_internal_VARIANT_armv81(a2, v11);
    free(v10);
  }
  return v12;
}

uint64_t _os_workgroup_pthread_start_0(void **a1)
{
  void *v1;
  uint64_t (*v2)(void *);
  void *v3;
  int v4;
  uint64_t v5;
  const char *v6;
  _OWORD v8[2];
  uint64_t v9;

  v1 = *a1;
  v2 = (uint64_t (*)(void *))a1[1];
  v3 = a1[2];
  free(a1);
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v4 = os_workgroup_join_VARIANT_armv81((uint64_t)v1, (uint64_t)v8);
  if (v4)
    _os_workgroup_pthread_start_cold_1(v4);
  v5 = v2(v3);
  os_workgroup_leave_VARIANT_armv81((uint64_t)v1, (uint64_t)v8);
  _os_object_release_internal_VARIANT_armv81(v1, v6);
  return v5;
}

uint64_t _wg_type_to_wi_flags_0(unsigned int a1)
{
  if (a1 >= 0xB)
    _wg_type_to_wi_flags_cold_1();
  return dword_18A06E998[(__int16)a1];
}

uint64_t _os_workgroup_lookup_type_from_workload_id_0(char *a1, unsigned int *a2, _WORD *a3)
{
  uint64_t v6;
  char v7;
  char v8;
  unsigned int v9;
  uint64_t result;
  char **v11;

  if (!a1)
    _os_workgroup_lookup_type_from_workload_id_cold_1_0();
  v6 = 0;
  v7 = 1;
  while (1)
  {
    v8 = v7;
    if (!strcasecmp(a1, (&_os_workgroup_workload_id_table_0)[2 * v6]))
      break;
    v7 = 0;
    v6 = 1;
    if ((v8 & 1) == 0)
    {
      v9 = 0;
      result = 0;
      goto LABEL_7;
    }
  }
  v11 = &(&_os_workgroup_workload_id_table_0)[2 * v6];
  result = *((unsigned __int16 *)v11 + 4);
  v9 = *((_DWORD *)v11 + 3) & 0xFFFFFFFA | 1;
LABEL_7:
  if (v9 <= 1)
    v9 = 1;
  *a2 = v9;
  *a3 = result;
  return result;
}

uint64_t _os_object_retain_count_VARIANT_armv81(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 12);
  if (v1 == 0x7FFFFFFF)
    return -1;
  return v1;
}

uint64_t _os_object_retain_internal_VARIANT_armv81(uint64_t result)
{
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 1u, memory_order_relaxed) <= 0)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
  }
  return result;
}

uint64_t _os_object_retain_internal_n_VARIANT_armv81(uint64_t result, unsigned int a2)
{
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), a2, memory_order_relaxed) <= 0)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
  }
  return result;
}

void *_os_object_release_internal_VARIANT_armv81(void *a1, const char *a2)
{
  int add_explicit;

  if (*((_DWORD *)a1 + 2) != 0x7FFFFFFF)
  {
    add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)a1 + 2, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit == 1)
      {
        return (void *)_os_object_dispose(a1, a2);
      }
      else
      {
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
    }
  }
  return a1;
}

void *_os_object_release_internal_n_VARIANT_armv81(void *a1, const char *a2)
{
  unsigned int add_explicit;
  BOOL v3;
  int v4;

  if (*((_DWORD *)a1 + 2) != 0x7FFFFFFF)
  {
    add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)a1 + 2, -(int)a2, memory_order_release);
    v3 = __OFSUB__(add_explicit, (_DWORD)a2);
    v4 = add_explicit - (_DWORD)a2;
    if ((v4 < 0) ^ v3 | (v4 == 0))
    {
      if (v4 < 0)
      {
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
      else
      {
        return (void *)_os_object_dispose(a1, a2);
      }
    }
  }
  return a1;
}

uint64_t _os_object_retain_VARIANT_armv81(uint64_t result)
{
  if (*(_DWORD *)(result + 12) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(result + 12), 1u, memory_order_relaxed) <= 0)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
  }
  return result;
}

uint64_t _os_object_retain_with_resurrect_VARIANT_armv81(uint64_t result)
{
  unsigned int add_explicit;

  if (*(_DWORD *)(result + 12) == 0x7FFFFFFF
    || (add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(result + 12), 1u, memory_order_relaxed),
        (add_explicit & 0x80000000) != 0))
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an over-released object";
    __break(1u);
    return _os_object_retain_internal_VARIANT_armv81(result);
  }
  if (!add_explicit)
    return _os_object_retain_internal_VARIANT_armv81(result);
  return result;
}

void *_os_object_release_VARIANT_armv81(void *a1, const char *a2)
{
  int add_explicit;

  if (*((_DWORD *)a1 + 3) != 0x7FFFFFFF)
  {
    add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)a1 + 3, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit == 1)
      {
        return (void *)_os_object_xref_dispose(a1, a2);
      }
      else
      {
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
    }
  }
  return a1;
}

void *_os_object_release_without_xref_dispose_VARIANT_armv81(void *a1, const char *a2)
{
  int add_explicit;

  if (*((_DWORD *)a1 + 3) != 0x7FFFFFFF)
  {
    add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)a1 + 3, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit == 1)
      {
        return _os_object_release_internal_VARIANT_armv81(a1, a2);
      }
      else
      {
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
    }
  }
  return a1;
}

uint64_t _os_object_retain_weak_VARIANT_armv81(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;

  v1 = *(unsigned int *)(a1 + 12);
  while (1)
  {
    if ((_DWORD)v1 == 0x7FFFFFFF)
      return 1;
    if (!(_DWORD)v1)
      break;
    if ((v1 & 0x80000000) != 0)
      _os_object_allows_weak_reference_VARIANT_mp_cold_1();
    v2 = v1;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 12), (unsigned int *)&v2, v1 + 1, memory_order_relaxed, memory_order_relaxed);
    v3 = (_DWORD)v2 == (_DWORD)v1;
    v1 = v2;
    if (v3)
      return 1;
  }
  return 0;
}

BOOL _os_object_allows_weak_reference_VARIANT_armv81(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 12);
  if (v1 < 0)
    _os_object_allows_weak_reference_VARIANT_mp_cold_1();
  return v1 != 0;
}

id dispatch_retain_VARIANT_armv81(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)result;
  if ((*(_QWORD *)result & 1) != 0)
    return _dispatch_objc_retain((id)result);
  if (v1 < (unint64_t)OS_dispatch_object || v1 >= (unint64_t)OS_object)
    return _dispatch_objc_retain((id)result);
  else
    return (id)_os_object_retain_VARIANT_armv81(result);
}

void dispatch_release_VARIANT_armv81(atomic_uint *a1, const char *a2)
{
  unint64_t v2;
  BOOL v3;
  int add_explicit;

  v2 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 1) != 0
    || (v2 >= (unint64_t)OS_dispatch_object
      ? (v3 = v2 >= (unint64_t)OS_object)
      : (v3 = 1),
        v3))
  {
    _dispatch_objc_release(a1);
  }
  else if (a1[3] != 0x7FFFFFFF)
  {
    add_explicit = atomic_fetch_add_explicit(a1 + 3, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      atomic_load((unsigned int *)a1 + 3);
      _dispatch_xref_dispose_VARIANT_armv81((atomic_ullong *)a1, a2);
    }
  }
}

void *_dispatch_xref_dispose_VARIANT_armv81(atomic_ullong *a1, const char *a2)
{
  uint64_t v3;

  if ((*(_QWORD *)(*a1 + 40) & 0xF0) == 0x10)
  {
    _dispatch_queue_xref_dispose_VARIANT_armv81((uint64_t)a1);
    v3 = *(_QWORD *)(*a1 + 40);
    if (v3 > 786)
    {
      if (v3 == 787)
      {
        if ((*((_WORD *)a1 + 58) & 0x10) != 0)
          *(_QWORD *)(a1[11] + 48) = 195952365;
      }
      else if (v3 == 395025)
      {
        _dispatch_runloop_queue_xref_dispose_VARIANT_armv81(a1);
      }
    }
    else if (v3 == 275)
    {
      _dispatch_source_xref_dispose_VARIANT_armv81((uint64_t)a1);
    }
    else if (v3 == 531)
    {
      _dispatch_channel_xref_dispose_VARIANT_armv81((uint64_t)a1);
    }
  }
  return _os_object_release_internal_VARIANT_armv81(a1, a2);
}

void _dispatch_dispose_VARIANT_armv81(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _DWORD *v7;
  const char *v8;
  char v9;

  v3 = a1[4];
  v2 = a1[5];
  v4 = a1[3];
  v9 = 1;
  v6 = a1[2];
  v5 = a1 + 2;
  if (v6 != -1985229329)
    _dispatch_dispose_VARIANT_mp_cold_1(v5);
  if (v4)
  {
    if (*(_QWORD *)(v4 + 64) == 22)
      v7 = &unk_1ECCEA080;
    else
      v7 = (_DWORD *)v4;
  }
  else
  {
    v7 = 0;
  }
  (*(void (**)(uint64_t *, char *))(*a1 + 48))(a1, &v9);
  if (v9)
  {
    objc_destructInstance(a1);
    free(a1);
  }
  if (v2 && v3)
    dispatch_async_f_VARIANT_armv81(v7, v3, v2);
  if (v7)
    _os_object_release_internal_VARIANT_armv81(v7, v8);
}

uint64_t dispatch_get_context_VARIANT_armv81(unint64_t *a1)
{
  unint64_t v1;

  v1 = *a1;
  if ((*a1 & 1) != 0)
    return _dispatch_objc_get_context();
  if (v1 < (unint64_t)OS_dispatch_object || v1 >= (unint64_t)OS_object)
    return _dispatch_objc_get_context();
  if ((*(_BYTE *)(v1 + 42) & 4) != 0)
    return 0;
  return a1[4];
}

void *dispatch_set_context_VARIANT_armv81(void *a1, const char *a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 1) != 0)
    return (void *)_dispatch_objc_set_context(a1, a2);
  if (v2 < (unint64_t)OS_dispatch_object || v2 >= (unint64_t)OS_object)
    return (void *)_dispatch_objc_set_context(a1, a2);
  if ((*(_BYTE *)(v2 + 42) & 4) == 0)
    *((_QWORD *)a1 + 4) = a2;
  return a1;
}

void *dispatch_set_finalizer_f_VARIANT_armv81(void *a1, const char *a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 1) != 0)
    return (void *)_dispatch_objc_set_finalizer_f(a1, a2);
  if (v2 < (unint64_t)OS_dispatch_object || v2 >= (unint64_t)OS_object)
    return (void *)_dispatch_objc_set_finalizer_f(a1, a2);
  if ((*(_BYTE *)(v2 + 42) & 4) == 0)
    *((_QWORD *)a1 + 5) = a2;
  return a1;
}

atomic_uint *dispatch_set_target_queue_VARIANT_armv81(atomic_uint *result, uint64_t a2)
{
  atomic_ullong *v3;
  unint64_t v4;
  uint64_t v6;
  _DWORD *v7;
  int add_explicit;

  v3 = (atomic_ullong *)result;
  v4 = *(_QWORD *)result;
  if ((*(_QWORD *)result & 1) != 0)
    return (atomic_uint *)_dispatch_objc_set_target_queue(result, (const char *)a2);
  if (v4 < (unint64_t)OS_dispatch_object || v4 >= (unint64_t)OS_object)
    return (atomic_uint *)_dispatch_objc_set_target_queue(result, (const char *)a2);
  if (result[2] != 0x7FFFFFFF)
  {
    v6 = *(_QWORD *)(v4 + 40);
    if ((v6 & 0x30000) == 0)
    {
      if (a2 && (*(_BYTE *)(a2 + 87) & 8) != 0 && v6 != 1 && v4 >= 0x1000)
      {
        if (*(_QWORD *)(v4 + 40) != 19
          || !_dispatch_source_is_timer_VARIANT_mp((uint64_t)result))
        {
          dispatch_set_target_queue_VARIANT_mp_cold_3((uint64_t)v3);
        }
        v6 = *(_QWORD *)(*v3 + 40);
      }
      if ((v6 & 0xF0) == 0x10)
      {
        return (atomic_uint *)_dispatch_lane_set_target_queue_VARIANT_armv81(v3, (char *)a2);
      }
      else if (v6 == 4)
      {
        return (atomic_uint *)_dispatch_io_set_target_queue_VARIANT_armv81((uint64_t)v3, a2);
      }
      else
      {
        v7 = &unk_1ECCEA080;
        if (a2)
          v7 = (_DWORD *)a2;
        if (v7[2] != 0x7FFFFFFF && (int)atomic_fetch_add_explicit(v7 + 2, 1u, memory_order_relaxed) <= 0)
          dispatch_set_target_queue_VARIANT_mp_cold_2();
        result = (atomic_uint *)atomic_exchange_explicit(v3 + 3, (unint64_t)v7, memory_order_release);
        if (result)
        {
          if (result[2] != 0x7FFFFFFF)
          {
            add_explicit = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release);
            if (add_explicit <= 1)
            {
              if (add_explicit != 1)
                _os_object_allows_weak_reference_VARIANT_mp_cold_1();
              return (atomic_uint *)_os_object_dispose(result, (const char *)a2);
            }
          }
        }
      }
    }
  }
  return result;
}

void dispatch_activate_VARIANT_armv81(uint64_t a1)
{
  unint64_t v1;
  BOOL v2;
  uint64_t v3;

  v1 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 1) != 0
    || (v1 >= (unint64_t)OS_dispatch_object
      ? (v2 = v1 >= (unint64_t)OS_object)
      : (v2 = 1),
        v2))
  {
    _dispatch_objc_activate();
  }
  else if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    v3 = *(unsigned __int8 *)(v1 + 40);
    if (v3 == 18)
    {
      _dispatch_workloop_activate_VARIANT_armv81(a1);
    }
    else if ((v3 & 0xF0) == 0x10)
    {
      _dispatch_queue_resume_VARIANT_armv81(a1, 1);
    }
  }
}

uint64_t dispatch_suspend_VARIANT_armv81(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;

  v1 = result;
  v2 = *(_QWORD *)result;
  if ((*(_QWORD *)result & 1) != 0)
    return _dispatch_objc_suspend(result);
  if (v2 < (unint64_t)OS_dispatch_object || v2 >= (unint64_t)OS_object)
    return _dispatch_objc_suspend(result);
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(v2 + 40);
    if ((v4 & 0x300F0) == 0x10)
    {
      if (v4 == 18 && _dispatch_workloop_uses_bound_thread_VARIANT_mp(result))
        dispatch_suspend_VARIANT_armv81_cold_1();
      return _dispatch_lane_suspend_VARIANT_armv81(v1);
    }
  }
  return result;
}

uint64_t dispatch_resume_VARIANT_armv81(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;

  v1 = result;
  v2 = *(_QWORD *)result;
  if ((*(_QWORD *)result & 1) != 0)
    return _dispatch_objc_resume(result);
  if (v2 < (unint64_t)OS_dispatch_object || v2 >= (unint64_t)OS_object)
    return _dispatch_objc_resume(result);
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(v2 + 40);
    if ((v4 & 0x300F0) == 0x10)
    {
      if (v4 == 18 && _dispatch_workloop_uses_bound_thread_VARIANT_mp(result))
        dispatch_resume_VARIANT_armv81_cold_1();
      return _dispatch_queue_resume_VARIANT_armv81(v1, 0);
    }
  }
  return result;
}

uint64_t _dispatch_sema4_create_slow_VARIANT_armv81(atomic_uint *a1, int policy)
{
  task_t *v4;
  uint64_t result;
  int v6;
  semaphore_t v7;
  unint64_t StatusReg;
  int v9;
  uint64_t v10;
  semaphore_t semaphore;

  semaphore = 0;
  if ((_dispatch_unsafe_fork & 1) != 0)
  {
    if (policy)
    {
LABEL_3:
      v4 = (task_t *)MEMORY[0x1E0C883F0];
      result = semaphore_create(*MEMORY[0x1E0C883F0], &semaphore, policy, 0);
      if ((_DWORD)result == -301)
        _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
      if ((_DWORD)result)
      {
        if ((_DWORD)result == 15)
          _dispatch_sema4_create_slow_VARIANT_mp_cold_3();
        _dispatch_sema4_create_slow_VARIANT_mp_cold_1(result);
      }
      v6 = 0;
      v7 = semaphore;
      atomic_compare_exchange_strong_explicit(a1, (unsigned int *)&v6, semaphore, memory_order_relaxed, memory_order_relaxed);
      if (v6)
      {
        result = semaphore_destroy(*v4, v7);
        if ((_DWORD)result == -301)
          _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
        if ((_DWORD)result)
        {
          if ((_DWORD)result == 15)
            _dispatch_sema4_create_slow_VARIANT_mp_cold_3();
          _dispatch_sema4_create_slow_VARIANT_mp_cold_1(result);
        }
      }
      return result;
    }
  }
  else
  {
    _dispatch_fork_becomes_unsafe_slow_VARIANT_armv81();
    if (policy)
      goto LABEL_3;
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  result = *(_QWORD *)(StatusReg + 72);
  if (result)
    *(_QWORD *)(StatusReg + 72) = 0;
  else
    result = _os_semaphore_create();
  v9 = 0;
  atomic_compare_exchange_strong_explicit(a1, (unsigned int *)&v9, result, memory_order_relaxed, memory_order_relaxed);
  if (v9)
  {
    v10 = result;
    result = *(_QWORD *)(StatusReg + 72);
    *(_QWORD *)(StatusReg + 72) = v10;
    if (result)
      return _os_semaphore_dispose();
  }
  return result;
}

uint64_t _dispatch_wait_on_address_VARIANT_armv81(uint64_t a1, unsigned int a2, int64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t result;

  v6 = _dispatch_timeout(a3);
  if (v6 == -1)
    return _dlock_wait_0(a1, a2, 0);
  if (!v6)
    return 60;
  while (1)
  {
    v7 = v6 == 1000 * (v6 / 0x3E8) ? v6 / 0x3E8 : v6 / 0x3E8 + 1;
    v8 = v7 >= 0xFFFFFFFF ? -1 : v7;
    result = _dlock_wait_0(a1, a2, v8);
    if (v7 < 0xFFFFFFFF || (_DWORD)result != 60)
      break;
    v6 = _dispatch_timeout(a3);
    if (!v6)
      return 60;
  }
  return result;
}

uint64_t _dispatch_thread_event_wait_slow_VARIANT_armv81(unsigned int *a1)
{
  uint64_t result;

  while (1)
  {
    result = atomic_load(a1);
    if (!(_DWORD)result)
      break;
    if ((_DWORD)result != -1)
      _dispatch_thread_event_wait_slow_VARIANT_mp_cold_1(result);
    _dlock_wait_0((uint64_t)a1, 0xFFFFFFFF, 0);
  }
  return result;
}

uint64_t _dispatch_unfair_lock_lock_slow_VARIANT_armv81(uint64_t result)
{
  atomic_uint *v1;
  int v2;
  unsigned int i;
  unsigned __int32 v4;
  unsigned __int32 v5;
  unsigned int v6;

  v1 = (atomic_uint *)result;
  v2 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  for (i = v2 & 0xFFFFFFFC; ; i |= (_DWORD)result == 66)
  {
    v4 = *v1;
    while (1)
    {
      v5 = v4;
      v6 = i;
      if (v4 >= 4)
      {
        v6 = v4 | 1;
        if ((v4 | 1) == v4)
          break;
      }
      atomic_compare_exchange_strong_explicit(v1, &v4, v6, memory_order_acquire, memory_order_acquire);
      if (v4 == v5)
        goto LABEL_8;
    }
    v6 = v4;
LABEL_8:
    if ((v5 ^ v2) <= 3)
      _dispatch_unfair_lock_lock_slow_VARIANT_mp_cold_1();
    if (v6 == i)
      break;
    result = _dlock_wait_0((uint64_t)v1, v6, 0);
  }
  return result;
}

uint64_t _dispatch_once_wait_VARIANT_armv81(uint64_t result)
{
  atomic_ullong *v1;
  uint64_t v2;
  atomic_ullong v3;
  atomic_ullong v4;
  uint64_t v5;

  v1 = (atomic_ullong *)result;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
LABEL_2:
  v3 = *v1;
  while (v3 != -1)
  {
    v4 = v3;
    if ((v3 & 3) == 2)
    {
      __dmb(9u);
      if ((unint64_t)(4 * MEMORY[0xFFFFFC180] - v3 - 14) <= 0xFFFFFFFFFFFFFFEFLL)
        *v1 = -1;
      return result;
    }
    v5 = v3 | 1;
    if ((v3 | 1) == v3)
    {
      LODWORD(v5) = v3;
LABEL_7:
      if (((v4 ^ v2) & 0xFFFFFFFC) == 0)
        _dispatch_unfair_lock_lock_slow_VARIANT_mp_cold_1();
      result = _dlock_wait_0((uint64_t)v1, v5, 0);
      goto LABEL_2;
    }
    atomic_compare_exchange_strong_explicit(v1, (unint64_t *)&v3, v5, memory_order_relaxed, memory_order_relaxed);
    if (v3 == v4)
      goto LABEL_7;
  }
  return result;
}

uint64_t _dispatch_firehose_gate_wait_VARIANT_armv81(uint64_t a1, unsigned int a2)
{
  return _dlock_wait_0(a1, a2, 0);
}

uint64_t _dlock_wait_0(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;

  v4 = a2;
  while (1)
  {
    v5 = __ulock_wait();
    if (v5 > 0)
      return 66;
    v6 = v5;
    result = -v5;
    if (v6 != -4)
      break;
    if (a3)
      return result;
  }
  if (result > 0x3C || ((1 << result) & 0x1000000000004001) == 0)
  {
    if ((_DWORD)result == 105)
      _dlock_wait_cold_2_0(v4);
    _dlock_wait_cold_1(result);
  }
  return result;
}

uint64_t dispatch_semaphore_create_VARIANT_armv81(uint64_t a1)
{
  uint64_t result;

  if (a1 < 0)
    return 0;
  result = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_semaphore, 72);
  *(_QWORD *)(result + 16) = -1985229329;
  *(_QWORD *)(result + 24) = &unk_1ECCEA080;
  *(_QWORD *)(result + 48) = a1;
  *(_DWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 56) = a1;
  return result;
}

_DWORD *_dispatch_semaphore_dispose_VARIANT_armv81(uint64_t a1)
{
  uint64_t v1;
  _DWORD *result;
  int v3;

  v1 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 48) < v1)
    _dispatch_semaphore_dispose_VARIANT_mp_cold_1((_QWORD *)(a1 + 48), v1);
  v3 = *(_DWORD *)(a1 + 64);
  result = (_DWORD *)(a1 + 64);
  if (v3)
    return (_DWORD *)_dispatch_sema4_dispose_slow_VARIANT_mp(result, 0);
  return result;
}

uint64_t _dispatch_semaphore_signal_slow_VARIANT_armv81(uint64_t a1)
{
  unsigned int *v1;

  v1 = (unsigned int *)(a1 + 64);
  if (!*(_DWORD *)(a1 + 64))
    _dispatch_sema4_create_slow_VARIANT_armv81((atomic_uint *)(a1 + 64), 0);
  _dispatch_sema4_signal_VARIANT_mp(v1, 1);
  return 1;
}

uint64_t dispatch_semaphore_signal_VARIANT_armv81(uint64_t a1)
{
  if ((atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 48), 1uLL, memory_order_release) & 0x8000000000000000) != 0)
    return _dispatch_semaphore_signal_slow_VARIANT_armv81(a1);
  else
    return 0;
}

uint64_t dispatch_semaphore_wait_VARIANT_armv81(uint64_t a1, int64_t a2)
{
  if ((uint64_t)atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL, memory_order_acquire) <= 0)return _dispatch_semaphore_wait_slow_0(a1, a2);
  else
    return 0;
}

uint64_t _dispatch_semaphore_wait_slow_0(uint64_t a1, int64_t a2)
{
  semaphore_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  BOOL v8;

  v4 = (semaphore_t *)(a1 + 64);
  if (!*(_DWORD *)(a1 + 64))
    _dispatch_sema4_create_slow_VARIANT_armv81((atomic_uint *)(a1 + 64), 0);
  if (a2 != -1)
  {
    if (a2 && !_dispatch_sema4_timedwait_VARIANT_mp(v4, a2))
      return 0;
    v5 = *(_QWORD *)(a1 + 48);
    result = 49;
    while (v5 < 0)
    {
      v7 = v5;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 48), (unint64_t *)&v7, v5 + 1, memory_order_relaxed, memory_order_relaxed);
      v8 = v7 == v5;
      v5 = v7;
      if (v8)
        return result;
    }
  }
  _dispatch_sema4_wait_VARIANT_mp(v4);
  return 0;
}

uint64_t dispatch_group_create_VARIANT_armv81()
{
  uint64_t result;

  result = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_group, 72);
  *(_QWORD *)(result + 16) = -1985229329;
  *(_QWORD *)(result + 24) = &unk_1ECCEA080;
  return result;
}

uint64_t _dispatch_group_create_and_enter_VARIANT_armv81()
{
  uint64_t result;

  result = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_group, 72);
  *(_QWORD *)(result + 16) = -1985229329;
  *(_QWORD *)(result + 24) = &unk_1ECCEA080;
  *(_DWORD *)(result + 48) = -4;
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  return result;
}

uint64_t _dispatch_group_dispose_VARIANT_armv81(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  if ((_DWORD)result)
    _dispatch_group_dispose_VARIANT_armv81_cold_1(result);
  return result;
}

uint64_t dispatch_group_wait_VARIANT_armv81(uint64_t a1, int64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 48);
  result = 49;
  while ((v3 & 0xFFFFFFFC) != 0)
  {
    if (!a2)
      return result;
    v5 = v3;
    if ((v3 & 1) == 0)
    {
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 48), (unint64_t *)&v3, v3 | 1, memory_order_relaxed, memory_order_relaxed);
      if (v3 != v5)
        continue;
    }
    return _dispatch_group_wait_slow_0(a1, HIDWORD(v5), a2);
  }
  result = 0;
  __dmb(9u);
  return result;
}

uint64_t _dispatch_group_wait_slow_0(uint64_t a1, unsigned int a2, int64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;

  v5 = (unsigned int *)(a1 + 52);
  v6 = 49;
  while (1)
  {
    v7 = _dispatch_wait_on_address_VARIANT_armv81((uint64_t)v5, a2, a3);
    v8 = atomic_load(v5);
    if (v8 != a2)
      break;
    if (v7 == 60)
      return v6;
  }
  return 0;
}

uint64_t dispatch_group_leave_VARIANT_armv81(uint64_t result)
{
  unint64_t add_explicit;
  uint64_t v2;
  const char *v3;
  const char *v4;
  unint64_t v5;
  unint64_t v6;

  add_explicit = atomic_fetch_add_explicit((atomic_ullong *volatile)(result + 48), 4uLL, memory_order_release);
  v2 = add_explicit & 0xFFFFFFFC;
  if ((add_explicit & 0xFFFFFFFC) == 0xFFFFFFFC)
  {
    v3 = (const char *)(add_explicit + 4);
    do
    {
      v4 = v3;
      v5 = (unint64_t)v3 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v4 & 0xFFFFFFFC) != 0)
        v5 = (unint64_t)v4;
      v6 = v5 & 0xFFFFFFFFFFFFFFFDLL;
      if (v4 == (const char *)(v5 & 0xFFFFFFFFFFFFFFFDLL))
        break;
      v3 = v4;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(result + 48), (unint64_t *)&v3, v6, memory_order_relaxed, memory_order_relaxed);
    }
    while (v3 != v4);
    return _dispatch_group_wake_0(result, v4, 1);
  }
  else if (!(_DWORD)v2)
  {
    dispatch_group_leave_VARIANT_armv81_cold_1(v2);
  }
  return result;
}

uint64_t _dispatch_group_wake_0(uint64_t result, const char *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  atomic_uint *v8;
  unsigned int v9;
  uint64_t v10;
  const char *v11;
  int add_explicit;
  signed int v13;
  const char *v14;

  v4 = result;
  if ((a2 & 2) != 0)
  {
    v14 = a2;
    v5 = *(_QWORD *)(result + 56);
    if (!v5)
      v5 = _dispatch_wait_for_enqueuer((unint64_t *)(result + 56));
    *(_QWORD *)(v4 + 56) = 0;
    v6 = atomic_exchange_explicit((atomic_ullong *volatile)(v4 + 64), 0, memory_order_release);
    do
    {
      while (1)
      {
        v7 = v5;
        v8 = *(atomic_uint **)(v5 + 48);
        if (v5 == v6)
        {
          v5 = 0;
        }
        else
        {
          v5 = *(_QWORD *)(v5 + 16);
          if (!v5)
            v5 = _dispatch_wait_for_enqueuer((unint64_t *)(v7 + 16));
        }
        v9 = __clz(__rbit32((*(_DWORD *)(v7 + 8) >> 8) & 0x3FFF));
        v10 = ((*(_DWORD *)(v7 + 8) >> 8) & 0x3FFF) != 0 ? v9 + 1 : 0;
        result = (*(uint64_t (**)(atomic_uint *, uint64_t, uint64_t))(*(_QWORD *)v8 + 88))(v8, v7, v10);
        if (v8[2] != 0x7FFFFFFF)
        {
          add_explicit = atomic_fetch_add_explicit(v8 + 2, 0xFFFFFFFF, memory_order_release);
          if (add_explicit <= 1)
            break;
        }
        if (!v5)
          goto LABEL_19;
      }
      if (add_explicit != 1)
      {
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
        goto LABEL_31;
      }
      result = _os_object_dispose(v8, v11);
    }
    while (v5);
LABEL_19:
    if (a3)
      LOWORD(a3) = 2;
    else
      LOWORD(a3) = 1;
    a2 = v14;
  }
  if ((a2 & 1) != 0)
    result = _dispatch_wake_by_address_VARIANT_mp();
  if ((_WORD)a3)
  {
    if (*(_DWORD *)(v4 + 8) != 0x7FFFFFFF)
    {
      v13 = atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), -(unsigned __int16)a3, memory_order_release)
          - (unsigned __int16)a3;
      if (v13 <= 0)
      {
        if (v13 < 0)
        {
LABEL_31:
          qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
          __break(1u);
        }
        else
        {
          return _os_object_dispose((void *)v4, a2);
        }
      }
    }
  }
  return result;
}

uint64_t dispatch_group_enter_VARIANT_armv81(uint64_t result)
{
  unsigned int add_explicit;

  add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(result + 48), 0xFFFFFFFC, memory_order_acquire);
  if ((add_explicit & 0xFFFFFFFC) != 0)
  {
    if ((add_explicit & 0xFFFFFFFC) == 4)
      dispatch_group_enter_VARIANT_mp_cold_2(add_explicit);
  }
  else if (*(_DWORD *)(result + 8) != 0x7FFFFFFF
         && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  return result;
}

_QWORD *dispatch_group_notify_f_VARIANT_armv81(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *StatusReg;
  _QWORD *result;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  BOOL v17;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  result = (_QWORD *)StatusReg[22];
  if (result)
    StatusReg[22] = result[2];
  else
    result = _dispatch_continuation_alloc_from_heap_VARIANT_armv81();
  *result = 260;
  result[4] = a4;
  result[5] = a3;
  v10 = StatusReg[4] & 0xFFFFFFLL;
  if (v10 >= 0x10FF)
    v10 = 4351;
  v11 = StatusReg[28];
  if (v11 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 12), 1u, memory_order_relaxed) <= 0)
    goto LABEL_26;
  result[3] = v11;
  if (v10)
  {
    v12 = (*(_DWORD *)(a2 + 84) >> 30) & 1;
    if ((*(_DWORD *)(a2 + 84) & 0xFFF) == 0)
      v12 = 1;
    if (!v12)
      v10 = 0;
  }
  result[1] = v10;
  result[6] = a2;
  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 1u, memory_order_relaxed) <= 0)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
LABEL_26:
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
LABEL_27:
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
    return result;
  }
  result[2] = 0;
  StatusReg[122] = a1 + 64;
  v13 = atomic_exchange_explicit((atomic_ullong *volatile)(a1 + 64), (unint64_t)result, memory_order_release);
  if (v13)
  {
    *(_QWORD *)(v13 + 16) = result;
    StatusReg[122] = 0;
    return result;
  }
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 1u, memory_order_relaxed) <= 0)
  {
    goto LABEL_27;
  }
  *(_QWORD *)(a1 + 56) = result;
  StatusReg[122] = 0;
  v14 = *(_QWORD *)(a1 + 48);
  while (1)
  {
    v15 = (const char *)(v14 | 2);
    if (!(_DWORD)v14)
      break;
    v16 = v14;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 48), (unint64_t *)&v16, (unint64_t)v15, memory_order_release, memory_order_relaxed);
    v17 = v16 == v14;
    v14 = v16;
    if (v17)
      return result;
  }
  return (_QWORD *)_dispatch_group_wake_0(a1, v15, 0);
}

void *dispatch_group_notify_VARIANT_armv81(uint64_t a1, atomic_uint *a2, uint64_t (**aBlock)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  _QWORD *StatusReg;
  uint64_t *v7;
  void *result;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  BOOL v17;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = (uint64_t *)StatusReg[22];
  if (v7)
    StatusReg[22] = v7[2];
  else
    v7 = (uint64_t *)_dispatch_continuation_alloc_from_heap_VARIANT_armv81();
  result = _dispatch_Block_copy(aBlock);
  v9 = aBlock[2];
  *v7 = 276;
  if (v9 == ___dispatch_block_create_block_invoke)
  {
    v7[5] = (uint64_t)result;
    result = _dispatch_continuation_init_slow_VARIANT_armv81(v7, a2, 0);
  }
  else
  {
    v7[4] = (uint64_t)_dispatch_call_block_and_release;
    v7[5] = (uint64_t)result;
    v10 = StatusReg[4] & 0xFFFFFFLL;
    if (v10 >= 0x10FF)
      v10 = 4351;
    v11 = StatusReg[28];
    if (v11 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 12), 1u, memory_order_relaxed) <= 0)
      dispatch_group_notify_VARIANT_mp_cold_3();
    v7[3] = v11;
    if (v10)
    {
      v12 = (a2[21] >> 30) & 1;
      if ((a2[21] & 0xFFF) == 0)
        v12 = 1;
      if (!v12)
        v10 = 0;
    }
    v7[1] = v10;
  }
  v7[6] = (uint64_t)a2;
  if (a2[2] != 0x7FFFFFFF && (int)atomic_fetch_add_explicit(a2 + 2, 1u, memory_order_relaxed) <= 0)
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  v7[2] = 0;
  StatusReg[122] = a1 + 64;
  v13 = atomic_exchange_explicit((atomic_ullong *volatile)(a1 + 64), (unint64_t)v7, memory_order_release);
  if (v13)
  {
    *(_QWORD *)(v13 + 16) = v7;
    StatusReg[122] = 0;
  }
  else
  {
    if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 1u, memory_order_relaxed) <= 0)
    {
      dispatch_set_target_queue_VARIANT_mp_cold_2();
    }
    *(_QWORD *)(a1 + 56) = v7;
    StatusReg[122] = 0;
    v14 = *(_QWORD *)(a1 + 48);
    while (1)
    {
      v15 = (const char *)(v14 | 2);
      if (!(_DWORD)v14)
        break;
      v16 = v14;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 48), (unint64_t *)&v16, (unint64_t)v15, memory_order_release, memory_order_relaxed);
      v17 = v16 == v14;
      v14 = v16;
      if (v17)
        return result;
    }
    return (void *)_dispatch_group_wake_0(a1, v15, 0);
  }
  return result;
}

_QWORD *dispatch_group_async_f_VARIANT_armv81(_QWORD *result, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *StatusReg;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v7 = (uint64_t)result;
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v9 = (_QWORD *)StatusReg[22];
  if (v9)
  {
    StatusReg[22] = v9[2];
  }
  else
  {
    result = _dispatch_continuation_alloc_from_heap_VARIANT_armv81();
    v9 = result;
  }
  *v9 = 268;
  v9[4] = a4;
  v9[5] = a3;
  v10 = StatusReg[4] & 0xFFFFFFLL;
  if (v10 >= 0x10FF)
    v10 = 4351;
  v11 = StatusReg[28];
  if (v11 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 12), 1u, memory_order_relaxed) <= 0)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
  else
  {
    v9[3] = v11;
    if (v10)
    {
      v12 = a2[21];
      if ((v12 & 0x40000000) != 0 || (v12 & 0xFFF) == 0)
      {
        v13 = __clz(__rbit32(v10 >> 8)) + 1;
      }
      else
      {
        v13 = 0;
        v10 = 0;
      }
    }
    else
    {
      v13 = 0;
    }
    v9[1] = v10;
    dispatch_group_enter_VARIANT_armv81(v7);
    v9[6] = v7;
    return (_QWORD *)(*(uint64_t (**)(_DWORD *, _QWORD *, uint64_t))(*(_QWORD *)a2 + 88))(a2, v9, v13);
  }
  return result;
}

uint64_t dispatch_group_async_VARIANT_armv81(uint64_t a1, atomic_uint *a2, uint64_t (**aBlock)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  _QWORD *StatusReg;
  uint64_t *v7;
  void *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v10;
  uint64_t v11;
  atomic_uint v12;
  uint64_t *inited;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = (uint64_t *)StatusReg[22];
  if (v7)
    StatusReg[22] = v7[2];
  else
    v7 = (uint64_t *)_dispatch_continuation_alloc_from_heap_VARIANT_armv81();
  v8 = _dispatch_Block_copy(aBlock);
  v9 = aBlock[2];
  *v7 = 284;
  if (v9 == ___dispatch_block_create_block_invoke)
  {
    v7[5] = (uint64_t)v8;
    inited = _dispatch_continuation_init_slow_VARIANT_armv81(v7, a2, 0);
  }
  else
  {
    v7[4] = (uint64_t)_dispatch_call_block_and_release;
    v7[5] = (uint64_t)v8;
    v10 = StatusReg[4] & 0xFFFFFFLL;
    if (v10 >= 0x10FF)
      v10 = 4351;
    v11 = StatusReg[28];
    if (v11 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 12), 1u, memory_order_relaxed) <= 0)
      dispatch_group_notify_VARIANT_mp_cold_3();
    v7[3] = v11;
    if (v10)
    {
      v12 = a2[21];
      if ((v12 & 0x40000000) != 0 || (v12 & 0xFFF) == 0)
      {
        inited = (uint64_t *)(__clz(__rbit32(v10 >> 8)) + 1);
      }
      else
      {
        inited = 0;
        v10 = 0;
      }
    }
    else
    {
      inited = 0;
    }
    v7[1] = v10;
  }
  dispatch_group_enter_VARIANT_armv81(a1);
  v7[6] = a1;
  return (*(uint64_t (**)(atomic_uint *, uint64_t *, uint64_t *))(*(_QWORD *)a2 + 88))(a2, v7, inited);
}

atomic_ullong *dispatch_once_VARIANT_armv81(atomic_ullong *a1, uint64_t a2)
{
  return dispatch_once_f_VARIANT_armv81(a1, a2, *(uint64_t (**)(void))(a2 + 16));
}

atomic_ullong *dispatch_once_f_VARIANT_armv81(atomic_ullong *a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t v3;
  uint64_t v4;

  v3 = atomic_load((unint64_t *)a1);
  if (v3 != -1)
  {
    if ((v3 & 3) == 2)
    {
      if (4 * MEMORY[0xFFFFFC180] - v3 - 14 <= 0xFFFFFFFFFFFFFFEFLL)
        *a1 = -1;
    }
    else
    {
      v4 = 0;
      atomic_compare_exchange_strong_explicit(a1, (unint64_t *)&v4, *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFCLL, memory_order_relaxed, memory_order_relaxed);
      if (v4)
        return (atomic_ullong *)_dispatch_once_wait_VARIANT_armv81((uint64_t)a1);
      else
        return (atomic_ullong *)_dispatch_once_callout_0(a1, a2, a3);
    }
  }
  return a1;
}

uint64_t _dispatch_once_callout_0(atomic_ullong *a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result;
  unsigned int v5;
  unsigned int v6;

  result = _dispatch_client_callout(a2, a3);
  v5 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFC;
  v6 = atomic_exchange_explicit(a1, (4 * MEMORY[0xFFFFFC180]) | 2, memory_order_release);
  if (v5 != v6)
    return _dispatch_gate_broadcast_slow_VARIANT_mp((uint64_t)a1, v6);
  return result;
}

void dispatch_mach_hooks_install_4libxpc_VARIANT_armv81(_QWORD *a1)
{
  void *v1;

  if (*a1 <= 2uLL)
    dispatch_mach_hooks_install_4libxpc_VARIANT_mp_cold_1((uint64_t)a1);
  v1 = &_dispatch_mach_xpc_hooks_default;
  atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)&_dispatch_mach_xpc_hooks, (unint64_t *)&v1, (unint64_t)a1, memory_order_relaxed, memory_order_relaxed);
  if (v1 != &_dispatch_mach_xpc_hooks_default)
    dispatch_mach_hooks_install_4libxpc_VARIANT_mp_cold_2();
}

void _dispatch_mach_hooks_install_default_VARIANT_armv81()
{
  _dispatch_mach_xpc_hooks = &_dispatch_mach_xpc_hooks_default;
}

uint64_t dispatch_mach_create_VARIANT_armv81(uint64_t a1, __objc2_class **a2, void *aBlock)
{
  _QWORD *v5;

  v5 = _dispatch_Block_copy(aBlock);
  return _dispatch_mach_create_0(a1, a2, (uint64_t)v5, v5[2], 1u);
}

uint64_t _dispatch_mach_create_0(uint64_t a1, __objc2_class **a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  char *v14;

  v10 = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_mach, 136);
  v11 = v10;
  *(_DWORD *)(v10 + 8) += 2;
  if (*(_BYTE *)(*(_QWORD *)v10 + 40) == 19)
    ++*(_DWORD *)(v10 + 8);
  *(_QWORD *)(v10 + 16) = -1985229329;
  *(_DWORD *)(v10 + 80) = 4194305;
  *(_QWORD *)(v10 + 56) = 0x19FFE0000000000;
  *(_QWORD *)(v10 + 64) = atomic_fetch_add_explicit((atomic_ullong *volatile)&_dispatch_queue_serial_numbers, 1uLL, memory_order_relaxed);
  *(_QWORD *)(v10 + 72) = a1;
  *(_WORD *)(v10 + 116) = (8 * a5) & 0x10 | (((a5 >> 2) & 1) << 7) | *(_WORD *)(v10 + 116) & 0xFF6F;
  v12 = _dispatch_unote_create_without_handle_VARIANT_armv81((uint64_t)&_dispatch_mach_type_recv_VARIANT_armv81, 0, 0);
  v13 = v12[29];
  *((_QWORD *)v12 + 1) = ~v11;
  *((_QWORD *)v12 + 5) = a4;
  *((_QWORD *)v12 + 6) = a3;
  v12[29] = v13 & 0xBF | ((a5 & 1) << 6);
  if ((*(_BYTE *)(v11 + 116) & 0x80) != 0)
    *((_DWORD *)v12 + 8) |= 0x200u;
  *(_QWORD *)(v11 + 88) = v12;
  v14 = _dispatch_mach_send_create_0((uint64_t)&_dispatch_mach_type_send_VARIANT_armv81, 0, 9);
  *((_QWORD *)v14 + 1) = ~v11;
  *(_QWORD *)(v11 + 120) = v14;
  if (a2)
  {
    if ((*((_BYTE *)a2 + 87) & 8) != 0)
      _dispatch_mach_create_cold_2((uint64_t)a2);
    if (*((_DWORD *)a2 + 2) != 0x7FFFFFFF
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)a2 + 2, 1u, memory_order_relaxed) <= 0)
    {
      dispatch_set_target_queue_VARIANT_mp_cold_2();
    }
  }
  else
  {
    a2 = &off_1ECCEA100;
  }
  *(_QWORD *)(v11 + 24) = a2;
  return v11;
}

uint64_t dispatch_mach_create_f_VARIANT_armv81(uint64_t a1, __objc2_class **a2, uint64_t a3, uint64_t a4)
{
  return _dispatch_mach_create_0(a1, a2, a3, a4, 0);
}

uint64_t dispatch_mach_create_4libxpc_VARIANT_armv81(uint64_t a1, __objc2_class **a2, uint64_t a3, uint64_t a4)
{
  return _dispatch_mach_create_0(a1, a2, a3, a4, 6u);
}

void _dispatch_mach_dispose_VARIANT_armv81(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4;

  _dispatch_unote_dispose_VARIANT_mp(a1[11]);
  a1[11] = 0;
  _dispatch_unote_dispose_VARIANT_mp(a1[15]);
  a1[15] = 0;
  v4 = a1[16];
  if (v4)
  {
    _dispatch_unote_dispose_VARIANT_mp(v4);
    a1[16] = 0;
  }
  _dispatch_lane_class_dispose_VARIANT_armv81(a1, a2);
}

uint64_t dispatch_mach_request_no_senders_VARIANT_armv81(uint64_t a1)
{
  uint64_t result;

  *(_WORD *)(a1 + 116) |= 0x20u;
  result = *(_QWORD *)(a1 + 56);
  if ((~result & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_VARIANT_mp_cold_1(result);
  return result;
}

uint64_t dispatch_mach_notify_no_senders_VARIANT_armv81(uint64_t a1, int a2)
{
  __int16 v2;
  uint64_t result;

  if (a2)
    v2 = 96;
  else
    v2 = 32;
  *(_WORD *)(a1 + 116) = v2 | *(_WORD *)(a1 + 116) & 0xFF9F;
  result = *(_QWORD *)(a1 + 56);
  if ((~result & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_VARIANT_mp_cold_1(result);
  return result;
}

uint64_t dispatch_mach_set_flags_VARIANT_armv81(uint64_t a1, char a2)
{
  uint64_t result;

  *(_WORD *)(a1 + 116) = *(_WORD *)(a1 + 116) & 0xFF7F | ((a2 & 1) << 7);
  result = *(_QWORD *)(a1 + 56);
  if ((~result & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_VARIANT_mp_cold_1(result);
  return result;
}

void dispatch_mach_connect_VARIANT_armv81(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v6 = *(_QWORD *)(a1 + 120);
  if ((a2 - 1) <= 0xFFFFFFFD)
    *(_DWORD *)(*(_QWORD *)(a1 + 88) + 24) = a2;
  *(_DWORD *)(v6 + 92) = a3;
  if ((a3 - 1) <= 0xFFFFFFFD)
  {
    if (a4)
    {
      dispatch_retain_VARIANT_armv81(a4);
      *(_DWORD *)(a4 + 48) = 0x40000;
      v7 = a4 + 88;
      if (*(_DWORD *)(a4 + 72))
        v7 = *(_QWORD *)v7;
      *(_DWORD *)(v6 + 96) = *(_DWORD *)(v7 + 8);
    }
    *(_QWORD *)(v6 + 48) = a4;
  }
  if ((*(_WORD *)(a1 + 116) & 0x20) != 0 && !*(_QWORD *)(v6 + 48))
    _dispatch_mach_arm_no_senders(a1, 0);
  v8 = atomic_fetch_and_explicit((atomic_uint *volatile)(v6 + 88), 0x7FFFFFFFu, memory_order_relaxed);
  if ((v8 & 0x80000000) == 0)
    dispatch_mach_connect_VARIANT_mp_cold_1(v8);
  dispatch_activate_VARIANT_armv81(a1);
}

void *_dispatch_mach_merge_msg_VARIANT_armv81(uint64_t a1, unsigned int a2, mach_msg_header_t *a3, unsigned int a4, unsigned int *a5, int a6, unsigned int a7)
{
  uint64_t v10;
  _DWORD *v14;
  uint64_t v15;
  uint64_t VARIANT_armv81;
  unint64_t StatusReg;
  _QWORD *v19;

  if ((a2 & 0x200) != 0)
    _dispatch_mach_merge_msg_VARIANT_mp_cold_2(a1);
  v10 = ~*(_QWORD *)(a1 + 8);
  if ((*(_DWORD *)(79 - *(_QWORD *)(a1 + 8)) & 0x10000000) == 0)
  {
    if (a3->msgh_id != 70 || (*(_WORD *)(115 - *(_QWORD *)(a1 + 8)) & 0x20) == 0)
    {
      v14 = _voucher_create_with_mach_msgv_VARIANT_armv81(&a3->msgh_bits, a5);
      if ((*(_QWORD *)&a6 & 0xFFFFFFuLL) >= 0x10FF)
        v15 = 4351;
      else
        v15 = *(_QWORD *)&a6 & 0xFFFFFFLL;
      VARIANT_armv81 = dispatch_mach_msg_create_VARIANT_armv81(a3, a4, HIWORD(a2) & 1, 0);
      if ((a2 & 0x10000) == 0 && MEMORY[0xFFFFFC100])
        kdebug_trace();
      *(_QWORD *)(VARIANT_armv81 + 56) = v15;
      *(_QWORD *)(VARIANT_armv81 + 64) = v14;
      *(_QWORD *)(VARIANT_armv81 + 32) = 0;
      *(_DWORD *)(VARIANT_armv81 + 48) = -117964798;
      _dispatch_mach_handle_or_push_received_msg_0(v10, VARIANT_armv81, a7);
      goto LABEL_12;
    }
    if (_dispatch_mach_msg_sender_is_kernel_VARIANT_mp((uint64_t)a3))
    {
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v19 = *(_QWORD **)(StatusReg + 176);
      if (v19)
        *(_QWORD *)(StatusReg + 176) = v19[2];
      else
        v19 = _dispatch_continuation_alloc_from_heap_VARIANT_armv81();
      v19[4] = _dispatch_mach_no_senders_invoke_0;
      v19[5] = v10;
      v19[3] = 0;
      *(_OWORD *)v19 = xmmword_18A06E770;
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
    }
    else
    {
      _dispatch_mach_merge_msg_VARIANT_mp_cold_1();
    }
  }
  mach_msg_destroy(a3);
  if ((a2 & 0x10000) != 0)
    free(a3);
LABEL_12:
  if ((*(_QWORD *)(a1 + 16) & 2) != 0 || (*(_DWORD *)(v10 + 60) & 0x1800000) == 0x800000)
    return (void *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v10 + 80))(v10, 0, 51);
  else
    return _os_object_release_internal_n_VARIANT_armv81((void *)v10, (const char *)2);
}

uint64_t _dispatch_mach_no_senders_invoke_0(uint64_t result)
{
  if ((*(_DWORD *)(result + 80) & 0x10000000) == 0)
    return _dispatch_client_callout4(*(_QWORD *)(*(_QWORD *)(result + 88) + 48), 13, 0, 0, *(uint64_t (**)(void))(*(_QWORD *)(result + 88) + 40));
  return result;
}

void _dispatch_mach_handle_or_push_received_msg_0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  unsigned int v10;
  unsigned int v11;

  v6 = *(_DWORD *)(a2 + 48);
  v7 = 3;
  if (v6)
    v7 = 4;
  if ((v6 & 0xFFFFC000) == 0xF8F80000)
    v8 = v6 & 0x3FFF;
  else
    v8 = v7;
  if (v8 != 2
    && (*(_WORD *)(a1 + 116) & 0x10) != 0
    && ((*((uint64_t (**)(_QWORD))_dispatch_mach_xpc_hooks + 1))(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 48)) & 1) != 0)
  {
    *(_QWORD *)(a2 + 16) = -1985229329;
    dispatch_release_VARIANT_armv81((atomic_uint *)a2, v9);
  }
  else
  {
    v10 = (a3 >> 8) & 0x3FFF;
    if (v10)
      v11 = __clz(__rbit32(v10)) + 1;
    else
      v11 = (*(_DWORD *)(a1 + 84) >> 8) & 0xF;
    _dispatch_lane_push_VARIANT_armv81(a1, (_QWORD *)a2, v11);
  }
}

void _dispatch_mach_reply_merge_msg_VARIANT_armv81(uint64_t a1, unsigned int a2, mach_msg_header_t *a3, unsigned int a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v10;
  mach_msg_bits_t msgh_bits;
  mach_msg_bits_t v14;
  mach_port_name_t msgh_voucher_port;
  uint64_t v18;
  uint64_t v19;
  uint64_t VARIANT_armv81;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  uint64_t v26;
  char v27;

  v10 = ~*(_QWORD *)(a1 + 8);
  if ((*(_DWORD *)(79 - *(_QWORD *)(a1 + 8)) & 0x10000000) != 0)
  {
    mach_msg_destroy(a3);
    if ((a2 & 0x10000) != 0)
      free(a3);
    v27 = 117;
  }
  else
  {
    msgh_bits = a3->msgh_bits;
    v14 = HIWORD(a3->msgh_bits) & 0x1F;
    msgh_voucher_port = a3->msgh_voucher_port;
    if ((v14 == 17 || v14 == 19) && msgh_voucher_port != 0)
    {
      if (v14 == 17)
      {
        _voucher_dealloc_mach_voucher_VARIANT_mp(msgh_voucher_port);
        msgh_bits = a3->msgh_bits;
      }
      a3->msgh_voucher_port = 0;
      a3->msgh_bits = msgh_bits & 0xFFE0FFFF;
    }
    v18 = *(unsigned int *)(a1 + 40);
    v19 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    VARIANT_armv81 = dispatch_mach_msg_create_VARIANT_armv81(a3, a4, HIWORD(a2) & 1, 0);
    if ((a2 & 0x10000) == 0 && MEMORY[0xFFFFFC100])
      kdebug_trace();
    *(_QWORD *)(VARIANT_armv81 + 56) = v18;
    *(_QWORD *)(VARIANT_armv81 + 64) = v19;
    v21 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(VARIANT_armv81 + 32) = v21;
    *(_DWORD *)(VARIANT_armv81 + 48) = -117964798;
    if ((*(_BYTE *)(v10 + 116) & 0x10) != 0 && v21)
    {
      v22 = (*((uint64_t (**)(void))_dispatch_mach_xpc_hooks + 2))();
      if (v22)
        v23 = v22;
      else
        v23 = v10;
      v24 = _dispatch_mach_msg_async_reply_wrap_0(VARIANT_armv81, v10);
      v25 = __clz(__rbit32((*(_DWORD *)(VARIANT_armv81 + 56) >> 8) & 0x3FFF));
      if (((*(_DWORD *)(VARIANT_armv81 + 56) >> 8) & 0x3FFF) != 0)
        v26 = v25 + 1;
      else
        v26 = 0;
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v23 + 88))(v23, v24, v26);
    }
    else
    {
      _dispatch_mach_handle_or_push_received_msg_0(v10, VARIANT_armv81, a7);
    }
    v27 = 101;
  }
  _dispatch_mach_reply_unregister_0((_QWORD *)v10, (const char *)a1, v27);
}

void _dispatch_mach_reply_unregister_0(_QWORD *a1, const char *a2, char a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  int v9;
  unint64_t StatusReg;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int add_explicit;
  uint64_t reply_disconnected_0;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  uint64_t v24;

  v4 = a2;
  v6 = *(_QWORD *)a2;
  v7 = a1[15];
  if ((a3 & 0x20) != 0)
  {
    v9 = 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v7 + 40), (unsigned int *)&v9, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
    if (v9)
      _dispatch_unfair_lock_lock_slow_VARIANT_armv81(v7 + 40);
    v11 = v4[8];
    if (v11)
      *(_QWORD *)(v11 + 72) = v4[9];
    *(_QWORD *)v4[9] = v11;
    v4[9] = 0;
    if (*(_QWORD *)(v7 + 56))
      v8 = 0;
    else
      v8 = *(_DWORD *)(v7 + 88) != 0;
    v12 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    a2 = (const char *)atomic_exchange_explicit((atomic_uint *volatile)(v7 + 40), 0, memory_order_release);
    if ((_DWORD)a2 != v12)
      _dispatch_unfair_lock_unlock_slow_VARIANT_mp(v7 + 40, a2);
  }
  else
  {
    v8 = 0;
  }
  if (!v4[2] || (_dispatch_unote_unregister_VARIANT_armv81((uint64_t)v4, a3 & 0xF) & 1) != 0)
  {
    if ((a3 & 0x10) != 0)
    {
      if ((*((_WORD *)a1 + 58) & 0x10) != 0 && v4[6])
      {
        v17 = (*((uint64_t (**)(void))_dispatch_mach_xpc_hooks + 2))();
        if (v17)
          v16 = (_QWORD *)v17;
        else
          v16 = a1;
      }
      else
      {
        v16 = 0;
      }
      if (v16)
        v21 = 12;
      else
        v21 = 7;
      reply_disconnected_0 = _dispatch_mach_msg_create_reply_disconnected_0(0, (uint64_t)v4, v21);
    }
    else
    {
      v13 = v4[7];
      if (v13)
      {
        add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 12), 0xFFFFFFFF, memory_order_relaxed);
        if (add_explicit <= 1)
        {
          if (add_explicit != 1)
          {
            qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
            __break(1u);
            return;
          }
          _voucher_xref_dispose_VARIANT_armv81(v13, a2);
        }
        reply_disconnected_0 = 0;
        v16 = 0;
        v4[7] = 0;
      }
      else
      {
        reply_disconnected_0 = 0;
        v16 = 0;
      }
    }
    if (v6 != -2)
      _dispatch_unote_dispose_VARIANT_mp((uint64_t)v4);
    if (reply_disconnected_0)
    {
      if (!v16)
      {
        _dispatch_mach_handle_or_push_received_msg_0((uint64_t)a1, reply_disconnected_0, 0);
        if ((a3 & 0x40) == 0)
          return;
        goto LABEL_44;
      }
      v22 = _dispatch_mach_msg_async_reply_wrap_0(reply_disconnected_0, (uint64_t)a1);
      v23 = __clz(__rbit32((*(_DWORD *)(reply_disconnected_0 + 56) >> 8) & 0x3FFF));
      if (((*(_DWORD *)(reply_disconnected_0 + 56) >> 8) & 0x3FFF) != 0)
        v24 = v23 + 1;
      else
        v24 = 0;
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*v16 + 88))(v16, v22, v24);
    }
    if ((a3 & 0x40) == 0)
      return;
LABEL_44:
    if (v8)
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*a1 + 80))(a1, 0, 3);
    else
      _os_object_release_internal_n_VARIANT_armv81(a1, (const char *)2);
    return;
  }
  if (a3 < 0)
  {
    v20 = *(_QWORD *)(v7 + 56);
    v19 = (_QWORD *)(v7 + 56);
    v18 = v20;
    v4[8] = v20;
    if (v20)
      *(_QWORD *)(v18 + 72) = v4 + 8;
    *v19 = v4;
    v4[9] = v19;
  }
}

void _dispatch_mach_send_barrier_drain_invoke_VARIANT_armv81(_QWORD *a1, uint64_t a2, const char *a3)
{
  _QWORD *StatusReg;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = StatusReg[20];
  v7 = (_OWORD *)StatusReg[21];
  *((_OWORD *)StatusReg + 10) = *v7;
  v8 = a1[3];
  a1[3] = -1;
  v9 = a1[1];
  if (v9 == -1)
  {
    v16 = 0;
  }
  else
  {
    v10 = StatusReg[25];
    if (((v10 >> 8) & 0xF) != 0)
      v11 = 256 << ((BYTE1(v10) & 0xFu) - 1);
    else
      v11 = 0;
    v12 = v11 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    v13 = v9 & 0xFFFFFF;
    if ((v9 & 0xFFFFFF) != 0)
    {
      v14 = v11 & 0xFFFFFF00;
      if ((v10 & 0x44000000) == 0 && (a1[1] & 0x10000000) == 0)
        v16 = v12;
      else
        v16 = v9 & 0xFFFFFF;
      if (v13 < v14)
        v16 = v12;
    }
    else if ((unsigned __int16)v10 >> 12)
    {
      v16 = (256 << (((unsigned __int16)v10 >> 12) - 1)) | 0xFF;
    }
    else
    {
      v16 = v11 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    }
  }
  v17 = v16 & 0xFFFFFFFF02FFFFFFLL;
  v18 = StatusReg[4];
  if ((v18 & 0x1000000) != 0)
  {
    if (v17)
    {
LABEL_37:
      _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(v17, v8, 6);
      goto LABEL_22;
    }
    v17 = v18 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v17 == (v18 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_18;
  }
  if (v17)
    goto LABEL_37;
LABEL_18:
  if (v8 == -1)
    goto LABEL_22;
  if (StatusReg[28] != v8)
  {
    v17 = 0;
    goto LABEL_37;
  }
  if (v8 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
    __break(1u);
    return;
  }
LABEL_22:
  v19 = StatusReg[22];
  if (v19)
    v20 = *(_DWORD *)(v19 + 8) + 1;
  else
    v20 = 1;
  if (v20 > _dispatch_continuation_cache_limit)
  {
    _dispatch_mach_send_invoke_0(v6, a3, 6u);
    _dispatch_continuation_free_to_cache_limit_VARIANT_armv81((uint64_t)a1);
  }
  else
  {
    a1[2] = v19;
    *((_DWORD *)a1 + 2) = v20;
    StatusReg[22] = a1;
    _dispatch_mach_send_invoke_0(v6, a3, 6u);
  }
  StatusReg[20] = v6;
  StatusReg[21] = v7;
}

void _dispatch_mach_send_invoke_0(uint64_t a1, const char *a2, unsigned int a3)
{
  uint64_t v6;
  unint64_t StatusReg;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t i;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;

  v6 = *(_QWORD *)(a1 + 120);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v8 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
  v9 = 0xFFFFFFFFLL;
  if ((a3 & 4) == 0)
    v9 = 0x10FFFFFFFFLL;
  if ((a3 & 2) != 0)
    v10 = 0x10FFFFFFFFLL;
  else
    v10 = v9;
  v11 = (unint64_t)(a3 & 2) << 35;
  v12 = *(_DWORD *)(StatusReg + 200);
  v13 = (v12 >> 8) & 0xF;
  v14 = (unsigned __int16)v12 >> 12;
  v15 = HIWORD(v12) & 0xF;
  if (v13 <= v14)
    v13 = v14;
  if (v13 > v15)
    v15 = v13;
LABEL_10:
  for (i = *(_QWORD *)(v6 + 64); ; i = v18)
  {
    if ((i & v10) != v11)
    {
      if ((a3 & 1) == 0)
        return;
      v18 = i;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v6 + 64), &v18, i | 0x2000000000, memory_order_acquire, memory_order_acquire);
      if (v18 == i)
        return;
      continue;
    }
    v17 = HIDWORD(i) & 7;
    if (v15 < v17)
    {
      _pthread_workqueue_override_start_direct();
      v19 = *(_DWORD *)(StatusReg + 200);
      v15 = v17;
      if ((HIWORD(v19) & 0xF) < v17)
      {
        *(_QWORD *)(StatusReg + 200) = v19 & 0xFFF0FFFF | ((_DWORD)v17 << 16);
        v15 = v17;
      }
      goto LABEL_10;
    }
    v18 = i;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v6 + 64), &v18, i & 0xFFFFFFC7FFFFFFFFLL | v8, memory_order_acquire, memory_order_acquire);
    if (v18 == i)
      break;
  }
  _dispatch_mach_send_drain_0((_DWORD *)a1, a2, a3);
}

void *_dispatch_mach_notification_merge_evt_VARIANT_armv81(uint64_t a1, uint64_t a2, int a3)
{
  void *v3;

  v3 = (void *)~*(_QWORD *)(a1 + 8);
  if ((*(_DWORD *)(a1 + 32) & a3) != 0)
    _dispatch_mach_send_invoke_0(~*(_QWORD *)(a1 + 8), (const char *)0x40000, 1u);
  return _os_object_release_internal_n_VARIANT_armv81(v3, (const char *)2);
}

uint64_t dispatch_mach_send_VARIANT_armv81(uint64_t a1, uint64_t a2, int a3)
{
  return _dispatch_mach_send_msg_0(a1, a2, 0, a3 & 0xFFFF0000);
}

uint64_t _dispatch_mach_send_msg_0(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  atomic_uint *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t StatusReg;
  uint64_t v16;
  int add_explicit;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v23;
  char v24;
  unint64_t v25;
  char v26;
  int v27;
  uint64_t v28;

  v5 = *(_QWORD *)(result + 120);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = v6 == -1985229329;
  if (v6 != -1985229329)
  {
    v28 = *(_QWORD *)(a2 + 16);
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Message already enqueued";
    qword_1EDF52D38 = v28;
    __break(1u);
LABEL_38:
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
LABEL_39:
    if (!v7)
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
      __break(1u);
      return result;
    }
    _voucher_xref_dispose_VARIANT_armv81(result, (const char *)a2);
LABEL_35:
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 16) = -1985229329;
    dispatch_release_VARIANT_armv81((atomic_uint *)a2, (const char *)a2);
    return 1;
  }
  v8 = a4;
  v10 = (atomic_uint *)result;
  if ((a4 & 0x40000) != 0)
  {
    v14 = 0;
  }
  else
  {
    v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
    v12 = v11 & 0xFFFFFF;
    v13 = (unsigned __int16)(v11 >> 8) > 0x10uLL && (a4 & 4) == 0;
    v14 = 4351;
    if (!v13)
      v14 = v12;
  }
  *(_QWORD *)(a2 + 56) = v14;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v16 = *(_QWORD *)(StatusReg + 224);
  if (v16)
  {
    add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 12), 1u, memory_order_relaxed);
    v7 = add_explicit == 0;
    if (add_explicit <= 0)
      goto LABEL_38;
  }
  *(_QWORD *)(a2 + 64) = v16;
  *(_DWORD *)(a2 + 48) = a4 | (((*(_QWORD *)(StatusReg + 32) & 0x300) != 0) << 18);
  dispatch_retain_VARIANT_armv81(a2);
  v18 = __clz(__rbit32((*(_DWORD *)(a2 + 56) >> 8) & 0x3FFF));
  if (((*(_DWORD *)(a2 + 56) >> 8) & 0x3FFF) != 0)
    v19 = v18 + 1;
  else
    v19 = 0;
  v20 = a2 + 88;
  if (*(_DWORD *)(a2 + 72))
    v20 = *(_QWORD *)v20;
  v21 = *(_DWORD *)v20;
  if ((*(_DWORD *)v20 & 0x1F00) != 0x1500 || (*(_DWORD *)(v20 + 12) - 1) >= 0xFFFFFFFE)
    v23 = 0;
  else
    v23 = *(_DWORD *)(v20 + 12);
  *(_DWORD *)(a2 + 52) = v23;
  if ((v21 & 0x1F) != 0x12 || v23 || *(_DWORD *)(v5 + 88) || (v10[20] & 0x10000000) != 0)
  {
    if (a3)
      v25 = a3;
    else
      v25 = a2;
    _dispatch_mach_send_push_and_trydrain_0(v10, v25, v19, 8 * (v8 & 1));
    if ((v26 & 1) == 0)
      return 0;
LABEL_33:
    result = *(_QWORD *)(a2 + 64);
    if (!result)
      goto LABEL_35;
    v27 = atomic_fetch_add_explicit((atomic_uint *volatile)(result + 12), 0xFFFFFFFF, memory_order_relaxed);
    v7 = v27 == 1;
    if (v27 > 1)
      goto LABEL_35;
    goto LABEL_39;
  }
  v24 = _dispatch_mach_msg_send_0((unint64_t)v10, a2, 0, 0, (int *)(8 * (v8 & 1u)));
  result = 0;
  if ((v24 & 2) != 0)
    goto LABEL_33;
  return result;
}

uint64_t dispatch_mach_send_with_result_VARIANT_armv81(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, _DWORD *a6)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a4)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid send flags";
    qword_1EDF52D38 = a4;
    __break(1u);
  }
  else
  {
    result = _dispatch_mach_send_msg_0(result, a2, 0, a3 & 0xFFFF0000 | 1);
    if ((_DWORD)result)
    {
      v9 = *(_DWORD *)(a2 + 48);
      v10 = v9 & 0x3FFF;
      v11 = 3;
      if (v9)
        v11 = 4;
      if ((v9 & 0xFFFFC000) == 0xF8F80000)
      {
        v9 = 0;
        v12 = v10;
      }
      else
      {
        v12 = v11;
      }
    }
    else
    {
      v9 = 0;
      v12 = 10;
    }
    *a5 = v12;
    *a6 = v9;
  }
  return result;
}

uint64_t dispatch_mach_send_and_wait_for_reply_VARIANT_armv81(uint64_t a1, uint64_t a2, int a3)
{
  char v4;

  return _dispatch_mach_send_and_wait_for_reply_0(a1, a2, a3 & 0xFFFF0000, &v4);
}

uint64_t _dispatch_mach_send_and_wait_for_reply_0(uint64_t a1, uint64_t a2, int a3, _BYTE *a4)
{
  unint64_t StatusReg;
  int v9;
  _DWORD *v10;
  _DWORD *v11;
  unsigned int v12;
  unsigned int special_reply_port;
  uint64_t v14;
  mach_port_name_t v15;
  uint64_t v16;
  uint64_t v17;
  mach_msg_header_t *v18;
  size_t v19;
  uint64_t v20;
  mach_msg_header_t *v21;
  int v22;
  mach_port_name_t v23;
  mach_msg_option_t v24;
  mach_msg_return_t v25;
  mach_msg_return_t v26;
  uint64_t msgh_size;
  mach_msg_header_t *v28;
  uint64_t v29;
  uint64_t VARIANT_armv81;
  mach_msg_header_t *v31;
  mach_msg_header_t *v32;
  int v33;
  uint64_t msgh_local_port;
  atomic_uint *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C874D8];
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v57 = 0u;
  v58 = 0u;
  v56 = -2;
  *((_QWORD *)&v59 + 1) = *(_QWORD *)(a2 + 32);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  DWORD2(v61) = *(_QWORD *)(StatusReg + 24);
  v9 = *(_DWORD *)(a2 + 72);
  v10 = (_DWORD *)(a2 + 88);
  v11 = (_DWORD *)(a2 + 88);
  if (v9)
    v11 = *(_DWORD **)v10;
  v12 = v11[3];
  if (v12 - 1 > 0xFFFFFFFD || (*v11 & 0x1F00) != 0x1500)
  {
    v12 = *(_DWORD *)(StatusReg + 64);
    if (!v12)
    {
      special_reply_port = thread_get_special_reply_port();
      *(_QWORD *)(StatusReg + 64) = special_reply_port;
      if (special_reply_port + 1 < 2)
        _dispatch_mach_send_and_wait_for_reply_cold_6_0();
      v12 = special_reply_port;
      v9 = *(_DWORD *)(a2 + 72);
    }
    if (v9)
      v10 = *(_DWORD **)v10;
    v10[3] = v12;
    BYTE6(v58) = 1;
  }
  v49 = xmmword_18A06E780;
  v50 = 0;
  v51 = -1;
  v52 = 0;
  v53 = 0;
  v54 = a2;
  v55 = &v56;
  v14 = _dispatch_mach_send_msg_0(a1, a2, (unint64_t)&v49, a3 | 4u);
  *a4 = v14;
  if (BYTE6(v58))
  {
    if (v12 == *(_DWORD *)(StatusReg + 64))
      *(_QWORD *)(StatusReg + 64) = 0;
    v15 = *(_DWORD *)(*(_QWORD *)(a1 + 120) + 92);
  }
  else
  {
    v15 = 0;
  }
  if (v12 + 1 <= 1)
    _dispatch_mach_send_and_wait_for_reply_cold_1(v12);
  v48 = &v45;
  v46 = *((_QWORD *)&v59 + 1);
  v16 = (*MEMORY[0x1E0C88810] + 0x4000) & ~*MEMORY[0x1E0C88810];
  MEMORY[0x1E0C86820](v14, (*MEMORY[0x1E0C88810] + 0x4000) & ~*MEMORY[0x1E0C88810]);
  v18 = (mach_msg_header_t *)((char *)&v45 - v17);
  bzero((char *)&v45 - v17, v19);
  LODWORD(v20) = 0;
  v21 = 0;
  if (v15 - 1 >= 0xFFFFFFFE)
    v22 = 117440526;
  else
    v22 = 117456910;
  if (v15 - 1 >= 0xFFFFFFFE)
    v23 = 0;
  else
    v23 = v15;
  v47 = a1;
  v24 = v22 & 0xFFFFFDFF | (((*(unsigned __int16 *)(a1 + 116) >> 7) & 1) << 9);
  while (1)
  {
    v25 = mach_msg(v18, v24, 0, v16, v12, 0, v23);
    v26 = v25;
    if (v25 != 268451844)
      break;
    msgh_size = v18->msgh_size;
    if (msgh_size >= 0xFFFFFFBC)
      _dispatch_mach_send_and_wait_for_reply_cold_3(msgh_size);
    if ((v24 & 4) == 0)
    {
      _dispatch_log("BUG in libdispatch client: dispatch_mach_send_and_wait_for_reply: dropped message too large to fit in memory: id = 0x%x, size = %u", v18->msgh_id, msgh_size);
      goto LABEL_42;
    }
    v20 = msgh_size + 68;
    v28 = (mach_msg_header_t *)malloc_type_malloc(msgh_size + 68, 0x62EACE2EuLL);
    v21 = v28;
    v29 = v20;
    if (!v28)
    {
      _dispatch_mach_send_and_wait_for_reply_cold_5();
      v28 = v18;
      v29 = v16;
    }
    v24 = v24 & 0xFFFFFEFB | 0x100;
    v16 = v29;
    v18 = v28;
  }
  if ((v25 - 268451842) <= 7 && ((1 << (v25 - 2)) & 0x91) != 0)
  {
    if (BYTE6(v58))
      _dispatch_destruct_reply_port();
    goto LABEL_34;
  }
  if (v25)
    _dispatch_mach_send_and_wait_for_reply_cold_2(v25);
  LODWORD(v16) = v18->msgh_size + 68;
  if (v21 && v16 < v20)
  {
    v31 = (mach_msg_header_t *)malloc_type_realloc(v21, v20, 0x7CF7F135uLL);
    if (v31)
    {
      v21 = v31;
      v32 = v31;
    }
    else
    {
      v32 = v18;
    }
  }
  else
  {
LABEL_42:
    v32 = v18;
  }
  v33 = 0;
  msgh_local_port = v32->msgh_local_port;
  v35 = (atomic_uint *)(*(_QWORD *)(v47 + 120) + 40);
  atomic_compare_exchange_strong_explicit(v35, (unsigned int *)&v33, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
  if (v33)
    _dispatch_unfair_lock_lock_slow_VARIANT_armv81((uint64_t)v35);
  v36 = v61;
  if ((_QWORD)v61)
  {
    v37 = *((_QWORD *)&v60 + 1);
    v38 = (_QWORD *)v61;
    if (*((_QWORD *)&v60 + 1))
    {
      *(_QWORD *)(*((_QWORD *)&v60 + 1) + 72) = v61;
      v38 = (_QWORD *)v61;
    }
    *v38 = v37;
    *(_QWORD *)&v61 = 0;
  }
  v39 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  v40 = atomic_exchange_explicit(v35, 0, memory_order_release);
  if (v40 != v39)
    _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)v35, v40);
  if (BYTE6(v58))
  {
    if ((_DWORD)v58 != (_DWORD)msgh_local_port)
    {
      if ((msgh_local_port - 1) < 0xFFFFFFFE || v36)
        _dispatch_mach_send_and_wait_for_reply_cold_4(msgh_local_port);
      goto LABEL_61;
    }
    if (!v36 || *(_DWORD *)(StatusReg + 64))
    {
LABEL_61:
      _dispatch_destruct_reply_port();
      goto LABEL_62;
    }
    *(_QWORD *)(StatusReg + 64) = msgh_local_port;
  }
  else if ((msgh_local_port - 1) <= 0xFFFFFFFD && v36)
  {
    v41 = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_mach_msg, 112);
    *(_QWORD *)(v41 + 16) = -1985229329;
    *(_QWORD *)(v41 + 24) = &unk_1ECCEA080;
    *(_DWORD *)(v41 + 72) = 0;
    *(_QWORD *)(v41 + 80) = 24;
    *(_DWORD *)(v41 + 100) = msgh_local_port;
    v43 = *((_QWORD *)&v59 + 1);
    v42 = v60;
    *(_QWORD *)&v60 = 0;
    *(_QWORD *)(v41 + 56) = v59;
    *(_QWORD *)(v41 + 64) = v42;
    *(_QWORD *)(v41 + 32) = v43;
    *(_DWORD *)(v41 + 48) = -117964791;
    _dispatch_mach_handle_or_push_received_msg_0(v47, v41, 0);
  }
LABEL_62:
  v32->msgh_local_port = 0;
  if (*(_DWORD *)(v47 + 80) & 0x10000000 | v26)
  {
    if (!v26)
      mach_msg_destroy(v32);
LABEL_34:
    free(v21);
    return 0;
  }
  VARIANT_armv81 = dispatch_mach_msg_create_VARIANT_armv81(v32, v16, v21 != 0, 0);
  if ((!v21 || v32 != v18) && MEMORY[0xFFFFFC100])
    kdebug_trace();
  *(_QWORD *)(VARIANT_armv81 + 32) = v46;
  return VARIANT_armv81;
}

uint64_t dispatch_mach_send_with_result_and_wait_for_reply_VARIANT_armv81(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, _DWORD *a6)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;

  if (a4)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid send flags";
    qword_1EDF52D38 = a4;
    __break(1u);
  }
  else
  {
    v13 = 0;
    result = _dispatch_mach_send_and_wait_for_reply_0(result, a2, a3 & 0xFFFF0000 | 1, &v13);
    v9 = v13;
    if (v13)
    {
      v9 = *(_DWORD *)(a2 + 48);
      v10 = v9 & 0x3FFF;
      v11 = 3;
      if (v9)
        v11 = 4;
      if ((v9 & 0xFFFFC000) == 0xF8F80000)
      {
        v9 = 0;
        v12 = v10;
      }
      else
      {
        v12 = v11;
      }
    }
    else
    {
      v12 = 10;
    }
    *a5 = v12;
    *a6 = v9;
  }
  return result;
}

uint64_t dispatch_mach_send_with_result_and_async_reply_4libxpc_VARIANT_armv81(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, _DWORD *a6)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a4)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid send flags";
    qword_1EDF52D38 = a4;
    __break(1u);
    goto LABEL_16;
  }
  if ((*(_WORD *)(result + 116) & 0x10) == 0)
  {
LABEL_16:
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_mach_send_with_result_and_wait_for_reply is XPC only";
    __break(1u);
LABEL_17:
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Reply port needed for async send with reply";
    __break(1u);
    return result;
  }
  v9 = a2 + 88;
  if (*(_DWORD *)(a2 + 72))
    v9 = *(_QWORD *)v9;
  if ((*(_DWORD *)(v9 + 12) - 1) > 0xFFFFFFFD || (*(_DWORD *)v9 & 0x1F00) != 0x1500)
    goto LABEL_17;
  result = _dispatch_mach_send_msg_0(result, a2, 0, a3 & 0xFFFF0000 | 1);
  if ((_DWORD)result)
  {
    v10 = *(_DWORD *)(a2 + 48);
    v11 = v10 & 0x3FFF;
    v12 = 3;
    if (v10)
      v12 = 4;
    if ((v10 & 0xFFFFC000) == 0xF8F80000)
    {
      v10 = 0;
      v13 = v11;
    }
    else
    {
      v13 = v12;
    }
  }
  else
  {
    v10 = 0;
    v13 = 10;
  }
  *a5 = v13;
  *a6 = v10;
  return result;
}

atomic_uint *dispatch_mach_reconnect_VARIANT_armv81(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  int v8;
  uint64_t v9;
  unint64_t StatusReg;
  _QWORD *v11;

  v3 = a3;
  v6 = *(_QWORD *)(a1 + 120);
  atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 88), 1u, memory_order_relaxed);
  if (a2 - 1 > 0xFFFFFFFD || a3 == 0)
  {
    v8 = 0;
    if (a3 == -1)
      v3 = -1;
    else
      v3 = 0;
  }
  else
  {
    dispatch_retain_VARIANT_armv81(a3);
    *(_DWORD *)(v3 + 48) = 0x40000;
    v9 = v3 + 88;
    if (*(_DWORD *)(v3 + 72))
      v9 = *(_QWORD *)v9;
    v8 = *(_DWORD *)(v9 + 8);
  }
  *(_DWORD *)(v6 + 96) = v8;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v11 = *(_QWORD **)(StatusReg + 176);
  if (v11)
    *(_QWORD *)(StatusReg + 176) = v11[2];
  else
    v11 = _dispatch_continuation_alloc_from_heap_VARIANT_armv81();
  v11[5] = v11;
  v11[6] = v3;
  v11[7] = a2;
  v11[3] = -1;
  v11[4] = _dispatch_mach_reconnect_invoke_0;
  *(_OWORD *)v11 = xmmword_18A06E790;
  return _dispatch_mach_send_push_0((atomic_uint *)a1, (unint64_t)v11, 0);
}

BOOL _dispatch_mach_reconnect_invoke_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  unint64_t StatusReg;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)(a1 + 120);
  if (*(_QWORD *)(v4 + 16))
  {
    _dispatch_unote_unregister_VARIANT_armv81(*(_QWORD *)(a1 + 120), 5);
    *(_DWORD *)(*(_QWORD *)(a1 + 120) + 24) = 0;
  }
  v5 = *(_DWORD *)(v4 + 92);
  if ((v5 + 1) >= 2)
  {
    v6 = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_mach_msg, 112);
    *(_QWORD *)(v6 + 16) = -1985229329;
    *(_QWORD *)(v6 + 24) = &unk_1ECCEA080;
    *(_DWORD *)(v6 + 72) = 0;
    *(_QWORD *)(v6 + 80) = 24;
    *(_DWORD *)(v6 + 96) = v5;
    *(_DWORD *)(v6 + 48) = -117964793;
    _dispatch_mach_handle_or_push_received_msg_0(a1, v6, 0);
    *(_DWORD *)(v4 + 92) = 0;
  }
  v7 = *(_QWORD *)(v4 + 48);
  if (v7)
  {
    _dispatch_mach_msg_not_sent_0(a1, v7, 0);
    *(_QWORD *)(v4 + 48) = 0;
  }
  v8 = 0;
  *(_WORD *)(a1 + 118) &= ~1u;
  v24 = 0;
  if ((*(_DWORD *)(a1 + 80) & 0x40000000) != 0)
    v9 = -112;
  else
    v9 = -110;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v4 + 40), (unsigned int *)&v8, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
  if (v8)
    _dispatch_unfair_lock_lock_slow_VARIANT_armv81(v4 + 40);
  v11 = v24;
  v24 = *(_QWORD *)(v4 + 56);
  v12 = v24;
  *(_QWORD *)(v4 + 56) = v11;
  if (v12)
  {
    *(_QWORD *)(v12 + 72) = &v24;
    do
    {
      v13 = *(_QWORD *)(v12 + 64);
      *(_QWORD *)(v12 + 72) = 0;
      _dispatch_mach_reply_unregister_0((_QWORD *)a1, (const char *)v12, v9);
      v12 = v13;
    }
    while (v13);
    v11 = *(_QWORD *)(v4 + 56);
  }
  v14 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  v15 = atomic_exchange_explicit((atomic_uint *volatile)(v4 + 40), 0, memory_order_release);
  if (v15 != v14)
  {
    _dispatch_unfair_lock_unlock_slow_VARIANT_mp(v4 + 40, v15);
    if (v11)
      return v11 == 0;
LABEL_18:
    v16 = *(_QWORD *)(StatusReg + 176);
    if (v16)
      v17 = *(_DWORD *)(v16 + 8) + 1;
    else
      v17 = 1;
    v18 = *(_DWORD *)(a2 + 56);
    v19 = *(_QWORD *)(a2 + 48);
    if (v17 > _dispatch_continuation_cache_limit)
    {
      _dispatch_continuation_free_to_cache_limit_VARIANT_armv81(a2);
    }
    else
    {
      *(_QWORD *)(a2 + 16) = v16;
      *(_DWORD *)(a2 + 8) = v17;
      *(_QWORD *)(StatusReg + 176) = a2;
    }
    v20 = *(_WORD *)(a1 + 118);
    if (v19 == -1)
    {
      v19 = 0;
      v21 = v20 | 2;
      *(_WORD *)(a1 + 118) = v21;
      if ((v21 & 2) == 0)
        goto LABEL_25;
    }
    else if ((v20 & 2) == 0)
    {
LABEL_25:
      *(_DWORD *)(v4 + 92) = v18;
      *(_QWORD *)(v4 + 48) = v19;
LABEL_31:
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 88), 0xFFFFFFFF, memory_order_relaxed);
      return v11 == 0;
    }
    if ((v18 - 1) <= 0xFFFFFFFD)
    {
      v22 = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_mach_msg, 112);
      *(_QWORD *)(v22 + 16) = -1985229329;
      *(_QWORD *)(v22 + 24) = &unk_1ECCEA080;
      *(_DWORD *)(v22 + 72) = 0;
      *(_QWORD *)(v22 + 80) = 24;
      *(_DWORD *)(v22 + 96) = v18;
      *(_DWORD *)(v22 + 48) = -117964793;
      _dispatch_mach_handle_or_push_received_msg_0(a1, v22, 0);
    }
    if (v19)
      _dispatch_mach_msg_not_sent_0(a1, v19, 0);
    goto LABEL_31;
  }
  if (!v11)
    goto LABEL_18;
  return v11 == 0;
}

atomic_uint *_dispatch_mach_send_push_0(atomic_uint *result, unint64_t a2, uint64_t a3)
{
  atomic_uint *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  unint64_t StatusReg;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(void);
  unint64_t v15;
  unint64_t v16;

  v3 = result;
  v4 = *((_QWORD *)result + 15);
  v5 = *(_UNKNOWN **)a2 == &unk_1E1E87A40 && *(_QWORD *)a2 > 0xFFFuLL;
  v6 = 0xB000000000;
  if (!v5)
    v6 = 0xA000000000;
  *(_QWORD *)(a2 + 16) = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_QWORD *)(StatusReg + 976) = v4 + 72;
  v8 = atomic_exchange_explicit((atomic_ullong *volatile)(v4 + 72), a2, memory_order_release);
  if (v8)
    v9 = 2;
  else
    v9 = 4;
  atomic_fetch_add_explicit(result + 2, v9, memory_order_relaxed);
  v10 = a3 << 32;
  if (v8)
  {
    *(_QWORD *)(v8 + 16) = a2;
    *(_QWORD *)(StatusReg + 976) = 0;
    v11 = *(_QWORD *)(v4 + 64);
    while (1)
    {
      v12 = v11;
      v13 = v10 | v11 & 0xFFFFFFF0FFFFFFFFLL | 0x2800000000;
      if ((v11 & 0x700000000) >= v10)
        v13 = v11;
      if (v11 == v13)
        break;
      v6 = 0;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v4 + 64), &v11, v13, memory_order_relaxed, memory_order_relaxed);
      if (v11 == v12)
        goto LABEL_15;
    }
    v6 = 0;
    v13 = v11;
LABEL_15:
    if (v12 >= 4)
    {
      if ((v12 & 0x700000000) < (v13 & 0x700000000))
        _pthread_workqueue_override_start_direct_check_owner();
    }
    else if ((v6 & 0x1000000000) != 0)
    {
      _dispatch_mach_push_send_barrier_drain_0((uint64_t)result, BYTE4(v13) & 7);
    }
    else
    {
      if (!v8 || *(_DWORD *)(v4 + 88) || (result[20] & 0x10000000) != 0)
      {
        v14 = *(uint64_t (**)(void))(*(_QWORD *)result + 80);
        return (atomic_uint *)v14();
      }
      if ((v12 & 0x1000000000) != 0)
      {
        v14 = *(uint64_t (**)(void))(*(_QWORD *)result + 80);
        return (atomic_uint *)v14();
      }
    }
    return (atomic_uint *)_os_object_release_internal_n_VARIANT_armv81(v3, (const char *)2);
  }
  *(_QWORD *)(v4 + 80) = a2;
  *(_QWORD *)(StatusReg + 976) = 0;
  v15 = *(_QWORD *)(v4 + 64);
  do
  {
    v12 = v15;
    if ((v15 & 0x700000000) >= v10)
      v16 = v15;
    else
      v16 = v10 | v15 & 0xFFFFFF50FFFFFFFFLL | 0x800000000;
    v13 = v16 | v6;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v4 + 64), &v15, v13, memory_order_release, memory_order_relaxed);
  }
  while (v15 != v12);
  if ((v12 & 0x8000000000) == 0
    || result[2] == 0x7FFFFFFF
    || (int)atomic_fetch_add_explicit(result + 2, 0xFFFFFFFE, memory_order_release) > 2)
  {
    goto LABEL_15;
  }
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
  return result;
}

uint64_t dispatch_mach_get_checkin_port_VARIANT_armv81(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 80) & 0x10000000) != 0)
    return 0xFFFFFFFFLL;
  else
    return *(unsigned int *)(*(_QWORD *)(a1 + 120) + 96);
}

BOOL dispatch_mach_can_handoff_4libxpc_VARIANT_armv81()
{
  unint64_t v0;
  uint64_t v1;

  v0 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 184;
  while (1)
  {
    v0 = *(_QWORD *)v0;
    if (!v0)
      break;
    if (*(char **)(v0 + 8) == "mach_msg")
    {
      v1 = *(_QWORD *)(v0 + 16);
      if (v1)
        return *(_QWORD *)(v1 + 56) == 0;
      return 0;
    }
  }
  return 0;
}

uint64_t dispatch_mach_handoff_reply_f_VARIANT_armv81(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  _QWORD *v8;
  uint64_t result;
  unint64_t StatusReg;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;

  v7 = _dispatch_mach_handoff_context_0(a2);
  v8 = *(_QWORD **)(v7 + 16);
  result = _dispatch_mach_handoff_set_wlh_0((uint64_t)v8, a1);
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  *(_QWORD *)(v7 + 24) = a1;
  *v8 = 260;
  v8[4] = a4;
  v8[5] = a3;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v11 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
  if (v11 >= 0x10FF)
    v11 = 4351;
  v12 = *(_QWORD *)(StatusReg + 224);
  if (v12 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 12), 1u, memory_order_relaxed) <= 0)
    dispatch_group_notify_VARIANT_mp_cold_3();
  v8[3] = v12;
  if (v11)
  {
    v13 = *(_DWORD *)(a1 + 84);
    if ((v13 & 0x40000000) != 0 || (v13 & 0xFFF) == 0)
    {
      v14 = __clz(__rbit32(v11 >> 8)) + 1;
    }
    else
    {
      v14 = 0;
      v11 = 0;
    }
  }
  else
  {
    v14 = 0;
  }
  v8[1] = v11;
  *(_DWORD *)(v7 + 32) = v14;
  *v8 = &unk_1E1E87BF0;
  return result;
}

unint64_t _dispatch_mach_handoff_context_0(unsigned int a1)
{
  unint64_t v2;
  atomic_uint *v3;

  v2 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 184;
  do
  {
    v2 = *(_QWORD *)v2;
    if (!v2)
      goto LABEL_10;
  }
  while (*(char **)(v2 + 8) != "mach_msg");
  v3 = *(atomic_uint **)(v2 + 16);
  if (!v3)
LABEL_10:
    _dispatch_mach_handoff_context_cold_1_0();
  if (*(_QWORD *)(*(_QWORD *)v3 + 40) == 515)
  {
    v3 = (atomic_uint *)_dispatch_calloc(1uLL, 0x50uLL);
    *(_QWORD *)(v2 + 16) = v3;
    v3[18] = 1;
  }
  else
  {
    atomic_fetch_add_explicit(v3 + 18, 1u, memory_order_relaxed);
  }
  if (*((_QWORD *)v3 + 7))
    _dispatch_mach_handoff_context_cold_2_0();
  *((_QWORD *)v3 + 7) = a1;
  return v2;
}

uint64_t _dispatch_mach_handoff_set_wlh_0(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t StatusReg;
  uint64_t v4;
  uint64_t v5;
  int v6;
  atomic_uint *v7;
  unsigned int v8;
  unsigned int v9;
  char v10;
  atomic_uint *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = (_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a2 + 24))
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      if ((*(_DWORD *)(a2 + 80) & 0x400000) != 0)
      {
        v6 = 0;
        v7 = (atomic_uint *)(a2 + 100);
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a2 + 100), (unsigned int *)&v6, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
        if (v6)
        {
          v19 = result;
          v15 = StatusReg;
          v17 = a2;
          v11 = (atomic_uint *)(a2 + 100);
          v13 = v2;
          _dispatch_unfair_lock_lock_slow_VARIANT_armv81(a2 + 100);
          v2 = v13;
          StatusReg = v15;
          v7 = v11;
          a2 = v17;
          result = v19;
        }
        atomic_fetch_and_explicit((atomic_uint *volatile)(a2 + 80), 0xFFBFFFFF, memory_order_relaxed);
        v8 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        v9 = atomic_exchange_explicit(v7, 0, memory_order_release);
        if (v9 != v8)
        {
          v18 = result;
          v14 = StatusReg;
          v16 = a2;
          v10 = v9;
          v12 = v2;
          _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)v7, v9);
          v2 = v12;
          StatusReg = v14;
          a2 = v16;
          result = v18;
          if ((v10 & 2) != 0 && (*(_QWORD *)(v14 + 200) & 0xF0000) == 0)
            *(_QWORD *)(v14 + 200) = *(_QWORD *)(v14 + 200) & 0xFFF0FFFFLL | 0x10000;
        }
      }
      if ((*(_QWORD *)(a2 + 56) & 0x2000000000) != 0)
        break;
      a2 = *v2;
      v4 = *v2;
      v5 = *(_QWORD *)(v4 + 24);
      v2 = (_QWORD *)(v4 + 24);
      if (!v5)
        goto LABEL_13;
    }
  }
  else
  {
LABEL_13:
    a2 = 0;
  }
  *(_QWORD *)(result + 64) = a2;
  return result;
}

uint64_t *dispatch_mach_handoff_reply_VARIANT_armv81(atomic_uint *a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t *v6;
  void *v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t StatusReg;
  unint64_t v10;
  uint64_t v11;
  atomic_uint v12;
  uint64_t *result;

  v5 = _dispatch_mach_handoff_context_0(a2);
  v6 = *(uint64_t **)(v5 + 16);
  _dispatch_mach_handoff_set_wlh_0((uint64_t)v6, (uint64_t)a1);
  if (a1[2] != 0x7FFFFFFF && (int)atomic_fetch_add_explicit(a1 + 2, 1u, memory_order_relaxed) <= 0)
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  *(_QWORD *)(v5 + 24) = a1;
  v7 = _dispatch_Block_copy(a3);
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a3[2];
  *v6 = 276;
  if (v8 == ___dispatch_block_create_block_invoke)
  {
    v6[5] = (uint64_t)v7;
    result = _dispatch_continuation_init_slow_VARIANT_armv81(v6, a1, 0);
  }
  else
  {
    v6[4] = (uint64_t)_dispatch_call_block_and_release;
    v6[5] = (uint64_t)v7;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v10 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
    if (v10 >= 0x10FF)
      v10 = 4351;
    v11 = *(_QWORD *)(StatusReg + 224);
    if (v11 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 12), 1u, memory_order_relaxed) <= 0)
      dispatch_group_notify_VARIANT_mp_cold_3();
    v6[3] = v11;
    if (v10)
    {
      v12 = a1[21];
      if ((v12 & 0x40000000) != 0 || (v12 & 0xFFF) == 0)
      {
        result = (uint64_t *)(__clz(__rbit32(v10 >> 8)) + 1);
      }
      else
      {
        result = 0;
        v10 = 0;
      }
    }
    else
    {
      result = 0;
    }
    v6[1] = v10;
  }
  *(_DWORD *)(v5 + 32) = (_DWORD)result;
  v6[6] = *v6;
  *v6 = (uint64_t)&unk_1E1E87BF0;
  return result;
}

double _dispatch_mach_ipc_handoff_invoke_VARIANT_armv81(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  _QWORD *StatusReg;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  double result;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v22[1] = "mach_msg";
  v22[2] = a1;
  v23 = 0;
  v24 = 0;
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_DWORD *)(a1 + 56);
  __swp(v3, (unsigned int *)(a1 + 64));
  if (v3)
  {
    if ((v3 & 1) != 0)
      v3 = ~v3;
    else
      _dispatch_sync_ipc_handoff_begin_VARIANT_armv81(v3, v7, a1 + 64);
  }
  *(_QWORD *)(a1 + 16) = -1985229329;
  *(_QWORD *)(a1 + 56) = 0;
  v22[0] = StatusReg[23];
  StatusReg[23] = v22;
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = -1;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9 == -1)
  {
    v16 = 0;
  }
  else
  {
    v10 = StatusReg[25];
    if (((v10 >> 8) & 0xF) != 0)
      v11 = 256 << ((BYTE1(v10) & 0xFu) - 1);
    else
      v11 = 0;
    v12 = v11 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    v13 = v9 & 0xFFFFFF;
    if ((v9 & 0xFFFFFF) != 0)
    {
      v14 = v11 & 0xFFFFFF00;
      if ((v10 & 0x44000000) == 0 && (*(_QWORD *)(a1 + 8) & 0x10000000) == 0)
        v16 = v12;
      else
        v16 = v9 & 0xFFFFFF;
      if (v13 < v14)
        v16 = v12;
    }
    else if ((unsigned __int16)v10 >> 12)
    {
      v16 = (256 << (((unsigned __int16)v10 >> 12) - 1)) | 0xFF;
    }
    else
    {
      v16 = v11 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    }
  }
  v17 = v16 & 0xFFFFFFFF02FFFFFFLL;
  v18 = StatusReg[4];
  if ((v18 & 0x1000000) != 0)
  {
    if (v17)
      goto LABEL_36;
    v17 = v18 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v17 == (v18 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_22;
  }
  if (v17)
  {
LABEL_36:
    _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(v17, v8, 6);
    if ((a3 & 0x1000000) == 0)
      goto LABEL_27;
    goto LABEL_37;
  }
LABEL_22:
  if (v8 == -1)
    goto LABEL_26;
  if (StatusReg[28] != v8)
  {
    v17 = 0;
    goto LABEL_36;
  }
  if (v8 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
    _dispatch_async_redirect_invoke_cold_1();
LABEL_26:
  if ((a3 & 0x1000000) == 0)
  {
LABEL_27:
    v19 = 0;
    goto LABEL_38;
  }
LABEL_37:
  v19 = (void *)MEMORY[0x18D766D94]();
LABEL_38:
  _dispatch_client_callout(*(_QWORD *)(a1 + 40), *(uint64_t (**)(void))(a1 + 32));
  if (v19)
    objc_autoreleasePoolPop(v19);
  v21 = v23;
  StatusReg[23] = v22[0];
  if (v21)
  {
    _dispatch_mach_ipc_handoff_async_0((uint64_t)v22);
  }
  else if (!atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 72), 0xFFFFFFFF, memory_order_relaxed))
  {
    free((void *)a1);
  }
  if (v3)
    return _dispatch_sync_ipc_handoff_end_VARIANT_armv81(v3, v7);
  return result;
}

void *_dispatch_mach_ipc_handoff_async_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  unint64_t v6;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 56);
  v4 = *(_QWORD *)(v2 + 64);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24), v2, *(unsigned int *)(a1 + 32));
  if (v4)
  {
    _dispatch_sync_ipc_handoff_begin_VARIANT_armv81(v4, v3, v2 + 64);
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v2 + 64), &v6, ~v4, memory_order_relaxed, memory_order_relaxed);
  }
  if (!atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 72), 0xFFFFFFFF, memory_order_relaxed))
    free((void *)v2);
  return _os_object_release_internal_VARIANT_armv81(*(void **)(a1 + 24), v5);
}

void _dispatch_mach_msg_invoke_VARIANT_armv81(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *StatusReg;
  uint64_t v6;
  _OWORD *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  mach_msg_header_t *v24;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = StatusReg[20];
  v7 = (_OWORD *)StatusReg[21];
  *((_OWORD *)StatusReg + 10) = *v7;
  v8 = *(_DWORD *)(a1 + 48);
  v9 = v8 & 0xFFFFC000;
  v10 = 3;
  if (v8)
    v10 = 4;
  if (v9 == -117964800)
    v11 = 0;
  else
    v11 = v8;
  if (v9 == -117964800)
    v12 = v8 & 0x3FFF;
  else
    v12 = v10;
  v26 = 0;
  v27 = 0;
  v25[1] = "mach_msg";
  v25[2] = a1;
  v25[0] = StatusReg[23];
  StatusReg[23] = v25;
  v13 = *(_QWORD *)(v6 + 88);
  *(_QWORD *)(a1 + 16) = -1985229329;
  v15 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(a1 + 64);
  if (v15 == -1)
  {
    v18 = 0;
  }
  else
  {
    v16 = StatusReg[25];
    if (((v16 >> 8) & 0xF) != 0)
      v17 = 256 << ((BYTE1(v16) & 0xFu) - 1);
    else
      v17 = 0;
    v18 = v15 & 0xFFFFFF;
    if (v18)
    {
      if (v18 < (v17 & 0xFFFFFF00))
        v18 = v17 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    }
    else if ((unsigned __int16)v16 >> 12)
    {
      v18 = (256 << (((unsigned __int16)v16 >> 12) - 1)) | 0xFF;
    }
    else
    {
      v18 = v17 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    }
  }
  v19 = v18 & 0xFFFFFFFF02FFFFFFLL;
  v20 = StatusReg[4];
  if ((v20 & 0x1000000) != 0)
  {
    if (v19)
    {
LABEL_50:
      _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(v19, v14, 7);
      goto LABEL_24;
    }
    v19 = v20 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v19 == (v20 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_20;
  }
  if (v19)
    goto LABEL_50;
LABEL_20:
  if (v14 == -1)
    goto LABEL_24;
  if (StatusReg[28] != v14)
  {
    v19 = 0;
    goto LABEL_50;
  }
  if (v14 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
    __break(1u);
    return;
  }
LABEL_24:
  v21 = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if ((a3 & 0x1000000) != 0)
    v21 = (void *)MEMORY[0x18D766D94]();
  if ((a3 & 4) == 0)
  {
    if ((*(_WORD *)(v6 + 116) & 4) == 0)
      _dispatch_mach_connect_invoke(v6);
    if (v12 == 2 && (*(_DWORD *)(v6 + 80) & 0x10000000) != 0)
    {
      v24 = (mach_msg_header_t *)(a1 + 88);
      if (*(_DWORD *)(a1 + 72))
        v24 = *(mach_msg_header_t **)&v24->msgh_bits;
      mach_msg_destroy(v24);
      if (!v21)
        goto LABEL_35;
    }
    else
    {
      _dispatch_client_callout4(*(_QWORD *)(v13 + 48), v12, a1, v11, *(uint64_t (**)(void))(v13 + 40));
      if (!v21)
        goto LABEL_35;
    }
    goto LABEL_34;
  }
  _dispatch_client_callout3(*(_QWORD *)(v13 + 48), v12, a1, *((uint64_t (**)(void))_dispatch_mach_xpc_hooks + 3));
  if (v21)
LABEL_34:
    objc_autoreleasePoolPop(v21);
LABEL_35:
  dispatch_release_VARIANT_armv81((atomic_uint *)a1, v22);
  v23 = v26;
  StatusReg[23] = v25[0];
  if (v23)
    _dispatch_mach_ipc_handoff_async_0((uint64_t)v25);
  StatusReg[20] = v6;
  StatusReg[21] = v7;
}

void _dispatch_mach_barrier_invoke_VARIANT_armv81(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t StatusReg;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  void *v27;
  void *v28;

  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if (v6 == 1024)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v8 = *(_QWORD *)(StatusReg + 160);
    v9 = *(_OWORD **)(StatusReg + 168);
    *(_OWORD *)(StatusReg + 160) = *v9;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = *(_QWORD *)(v5 + 88);
  if ((*(_WORD *)(v5 + 116) & 4) == 0)
  {
    if ((a3 & 0x1000000) != 0)
    {
      v28 = (void *)MEMORY[0x18D766D94]();
      _dispatch_mach_connect_invoke(v5);
      objc_autoreleasePoolPop(v28);
    }
    else
    {
      _dispatch_mach_connect_invoke(v5);
    }
  }
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = -1;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12 == -1)
  {
    v20 = 0;
  }
  else
  {
    v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 200);
    if (((v13 >> 8) & 0xF) != 0)
      v14 = 256 << ((BYTE1(v13) & 0xFu) - 1);
    else
      v14 = 0;
    v15 = v14 & 0xFFFFFFFFFFFFFF00 | v13;
    v16 = v12 & 0xFFFFFF;
    if ((v12 & 0xFFFFFF) != 0)
    {
      v17 = v14 & 0xFFFFFF00;
      v18 = v12 & 0x10000000;
      if ((v13 & 0x44000000) == 0 && v18 == 0)
        v20 = v15;
      else
        v20 = v16;
      if (v16 < v17)
        v20 = v15;
    }
    else if ((unsigned __int16)v13 >> 12)
    {
      v20 = (256 << (((unsigned __int16)v13 >> 12) - 1)) | 0xFF;
    }
    else
    {
      v20 = v14 & 0xFFFFFFFFFFFFFF00 | v13;
    }
  }
  v21 = v20 & 0xFFFFFFFF02FFFFFFLL;
  v22 = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v23 = v22[4];
  if ((v23 & 0x1000000) != 0)
  {
    if (v21)
    {
LABEL_51:
      _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(v21, v11, 6);
      goto LABEL_26;
    }
    v21 = v23 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v21 == (v23 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_22;
  }
  if (v21)
    goto LABEL_51;
LABEL_22:
  if (v11 == -1)
    goto LABEL_26;
  if (v22[28] != v11)
  {
    v21 = 0;
    goto LABEL_51;
  }
  if (v11 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
    __break(1u);
    return;
  }
LABEL_26:
  v24 = v22[22];
  if (v24)
    v25 = *(_DWORD *)(v24 + 8) + 1;
  else
    v25 = 1;
  v26 = a1;
  if (v25 <= _dispatch_continuation_cache_limit)
  {
    v26 = 0;
    *(_QWORD *)(a1 + 16) = v24;
    *(_DWORD *)(a1 + 8) = v25;
    v22[22] = a1;
  }
  if ((a3 & 0x1000000) != 0)
    v27 = (void *)MEMORY[0x18D766D94]();
  else
    v27 = 0;
  _dispatch_client_callout(*(_QWORD *)(a1 + 40), *(uint64_t (**)(void))(a1 + 32));
  _dispatch_client_callout4(*(_QWORD *)(v10 + 48), 6, 0, 0, *(uint64_t (**)(void))(v10 + 40));
  if (v27)
    objc_autoreleasePoolPop(v27);
  if (v26)
    _dispatch_continuation_free_to_cache_limit_VARIANT_armv81(v26);
  if (v6 == 1024)
  {
    v22[20] = v8;
    v22[21] = v9;
  }
}

atomic_uint *dispatch_mach_send_barrier_f_VARIANT_armv81(atomic_uint *result, uint64_t a2, uint64_t a3)
{
  atomic_uint *v5;
  _QWORD *StatusReg;
  atomic_uint *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;

  v5 = result;
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = (atomic_uint *)StatusReg[22];
  if (v7)
  {
    StatusReg[22] = *((_QWORD *)v7 + 2);
  }
  else
  {
    result = (atomic_uint *)_dispatch_continuation_alloc_from_heap_VARIANT_armv81();
    v7 = result;
  }
  *(_QWORD *)v7 = 260;
  *((_QWORD *)v7 + 4) = a3;
  *((_QWORD *)v7 + 5) = a2;
  v8 = StatusReg[4] & 0xFFFFFFLL;
  if (v8 >= 0x10FF)
    v8 = 4351;
  v9 = StatusReg[28];
  if (v9 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 12), 1u, memory_order_relaxed) <= 0)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
  else
  {
    *((_QWORD *)v7 + 3) = v9;
    if (v8)
    {
      v10 = (v5[21] >> 30) & 1;
      if ((v5[21] & 0xFFF) == 0)
        v10 = 1;
      if (!v10)
        v8 = 0;
    }
    *((_QWORD *)v7 + 6) = *(_QWORD *)v7;
    *((_QWORD *)v7 + 7) = v5;
    *(_QWORD *)v7 = &unk_1E1E87A40;
    *((_QWORD *)v7 + 1) = v8;
    v11 = __clz(__rbit32(v8 >> 8));
    if (v8 >= 0x100)
      v12 = v11 + 1;
    else
      v12 = 0;
    return _dispatch_mach_send_push_0(v5, (unint64_t)v7, v12);
  }
  return result;
}

atomic_uint *dispatch_mach_send_barrier_VARIANT_armv81(atomic_uint *a1, uint64_t (**aBlock)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  _QWORD *StatusReg;
  uint64_t *v5;
  atomic_uint *result;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = (uint64_t *)StatusReg[22];
  if (v5)
    StatusReg[22] = v5[2];
  else
    v5 = (uint64_t *)_dispatch_continuation_alloc_from_heap_VARIANT_armv81();
  result = (atomic_uint *)_dispatch_Block_copy(aBlock);
  v7 = aBlock[2];
  *v5 = 276;
  if (v7 == ___dispatch_block_create_block_invoke)
  {
    v5[5] = (uint64_t)result;
    _dispatch_continuation_init_slow_VARIANT_armv81(v5, a1, 0);
    v8 = v5[1];
  }
  else
  {
    v5[4] = (uint64_t)_dispatch_call_block_and_release;
    v5[5] = (uint64_t)result;
    v8 = StatusReg[4] & 0xFFFFFFLL;
    if (v8 >= 0x10FF)
      v8 = 4351;
    v9 = StatusReg[28];
    if (v9 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 12), 1u, memory_order_relaxed) <= 0)
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
      __break(1u);
      return result;
    }
    v5[3] = v9;
    if (v8)
    {
      v10 = (a1[21] >> 30) & 1;
      if ((a1[21] & 0xFFF) == 0)
        v10 = 1;
      if (!v10)
        v8 = 0;
    }
    v5[1] = v8;
  }
  v5[6] = *v5;
  v5[7] = (uint64_t)a1;
  *v5 = (uint64_t)&unk_1E1E87A40;
  v12 = (v8 >> 8) & 0x3FFF;
  v11 = v12 == 0;
  v13 = __clz(__rbit32(v12));
  if (v11)
    v14 = 0;
  else
    v14 = v13 + 1;
  return _dispatch_mach_send_push_0(a1, (unint64_t)v5, v14);
}

_DWORD *dispatch_mach_receive_barrier_f_VARIANT_armv81(_DWORD *result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  _QWORD *StatusReg;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;

  v5 = result;
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = (_QWORD *)StatusReg[22];
  if (v7)
  {
    StatusReg[22] = v7[2];
  }
  else
  {
    result = _dispatch_continuation_alloc_from_heap_VARIANT_armv81();
    v7 = result;
  }
  *v7 = 260;
  v7[4] = a3;
  v7[5] = a2;
  v8 = StatusReg[4] & 0xFFFFFFLL;
  if (v8 >= 0x10FF)
    v8 = 4351;
  v9 = StatusReg[28];
  if (v9 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 12), 1u, memory_order_relaxed) <= 0)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
  else
  {
    v7[3] = v9;
    if (v8)
    {
      v10 = v5[21];
      if ((v10 & 0x40000000) == 0 && (v10 & 0xFFF) != 0)
        v8 = 0;
    }
    v7[6] = *v7;
    v7[7] = v5;
    *v7 = &unk_1E1E87A88;
    v7[1] = v8;
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 88))(v5);
  }
  return result;
}

void *dispatch_mach_receive_barrier_VARIANT_armv81(atomic_uint *a1, uint64_t (**aBlock)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  _QWORD *StatusReg;
  uint64_t *v5;
  void *result;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v8;
  uint64_t v9;
  atomic_uint v10;
  uint64_t *inited;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = (uint64_t *)StatusReg[22];
  if (v5)
    StatusReg[22] = v5[2];
  else
    v5 = (uint64_t *)_dispatch_continuation_alloc_from_heap_VARIANT_armv81();
  result = _dispatch_Block_copy(aBlock);
  v7 = aBlock[2];
  *v5 = 276;
  if (v7 == ___dispatch_block_create_block_invoke)
  {
    v5[5] = (uint64_t)result;
    inited = _dispatch_continuation_init_slow_VARIANT_armv81(v5, a1, 0);
LABEL_14:
    v5[6] = *v5;
    v5[7] = (uint64_t)a1;
    *v5 = (uint64_t)&unk_1E1E87A88;
    return (void *)(*(uint64_t (**)(atomic_uint *, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 88))(a1, v5, inited);
  }
  v5[4] = (uint64_t)_dispatch_call_block_and_release;
  v5[5] = (uint64_t)result;
  v8 = StatusReg[4] & 0xFFFFFFLL;
  if (v8 >= 0x10FF)
    v8 = 4351;
  v9 = StatusReg[28];
  if (!v9 || (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 12), 1u, memory_order_relaxed) > 0)
  {
    v5[3] = v9;
    if (v8)
    {
      v10 = a1[21];
      if ((v10 & 0x40000000) != 0 || (v10 & 0xFFF) == 0)
      {
        inited = (uint64_t *)(__clz(__rbit32(v8 >> 8)) + 1);
      }
      else
      {
        inited = 0;
        v8 = 0;
      }
    }
    else
    {
      inited = 0;
    }
    v5[1] = v8;
    goto LABEL_14;
  }
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
  __break(1u);
  return result;
}

atomic_uint *dispatch_mach_cancel_VARIANT_armv81(atomic_uint *result, const char *a2)
{
  atomic_uint *v2;

  v2 = result;
  if (result[2] == 0x7FFFFFFF || (int)atomic_fetch_add_explicit(result + 2, 1u, memory_order_relaxed) > 0)
  {
    if ((atomic_fetch_or_explicit(result + 20, 0x10000000u, memory_order_relaxed) & 0x10000000) == 0)
      dispatch_mach_reconnect_VARIANT_armv81((uint64_t)result, 0, -1);
    return (atomic_uint *)_os_object_release_internal_VARIANT_armv81(v2, a2);
  }
  else
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
  }
  return result;
}

uint64_t _dispatch_mach_activate_VARIANT_armv81(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = _dispatch_lane_activate_VARIANT_armv81(a1);
  if ((*(_WORD *)(a1 + 116) & 1) == 0)
  {
    v3 = 0;
    result = _dispatch_queue_compute_priority_and_wlh_VARIANT_armv81(a1, &v3);
    if ((_DWORD)result)
      return _dispatch_mach_install_0(a1, v3, result);
  }
  return result;
}

uint64_t _dispatch_mach_install_0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t result;
  char *v10;

  v4 = *(_DWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_WORD *)(a1 + 116);
  *(_WORD *)(a1 + 116) = v6 | 1;
  result = *(unsigned int *)(*(_QWORD *)(a1 + 120) + 88);
  if ((result & 0x80000000) != 0)
    _dispatch_mach_install_cold_1(result);
  if (*(_DWORD *)(a1 + 84))
  {
    if ((v4 & 0x10000000) != 0)
      return result;
  }
  else
  {
    *(_DWORD *)(a1 + 84) = a3;
    if ((v4 & 0x10000000) != 0)
      return result;
  }
  if ((v6 & 0x10) != 0)
  {
    result = (*((uint64_t (**)(_QWORD))_dispatch_mach_xpc_hooks + 4))(*(_QWORD *)(v5 + 48));
    if ((_DWORD)result)
    {
      v10 = _dispatch_unote_create_with_handle_VARIANT_armv81((uint64_t)&_dispatch_xpc_type_sigterm_VARIANT_armv81, 15, 0);
      *((_QWORD *)v10 + 1) = ~a1;
      *(_QWORD *)(a1 + 128) = v10;
      result = _dispatch_unote_register_VARIANT_armv81((uint64_t)v10, a2, a3);
    }
  }
  if (*(_DWORD *)(v5 + 24))
    return _dispatch_unote_register_VARIANT_armv81(v5, a2, a3);
  return result;
}

_QWORD *_dispatch_mach_invoke_VARIANT_armv81(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  const char *v15;
  unsigned int v16;
  unint64_t v17;
  __objc2_class **v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v27;
  int v28;
  _BOOL4 v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v45;
  unint64_t StatusReg;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t i;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v66;
  uint64_t v67;

  v4 = a2;
  v67 = 0;
  if ((a3 & 3) == 0)
    *(_QWORD *)(a1 + 16) = -1985229329;
  if ((a3 & 2) != 0)
  {
    v67 = 0x40020000000001;
    v6 = a3 & 0x40000;
  }
  else
  {
    v45 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) - 0x20000000000;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v47 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
    v6 = a3 & 0x40000;
    v48 = 0xFFE00000FFFFFFFCLL;
    if ((a3 & 0x40000) != 0)
    {
      v49 = 0x4000000000;
    }
    else
    {
      v48 = 0xFFE00040FFFFFFFCLL;
      v49 = 1;
    }
    if ((a3 & 1) != 0)
      v50 = 0xFFE00040FFFFFFFCLL;
    else
      v50 = v48;
    v51 = *(_DWORD *)(StatusReg + 200);
    v52 = (v51 >> 8) & 0xF;
    v53 = (unsigned __int16)v51 >> 12;
    v54 = HIWORD(v51) & 0xF;
    if (v52 <= v53)
      v52 = v53;
    if (v52 > v54)
      v54 = v52;
LABEL_138:
    for (i = *(_QWORD *)(a1 + 56); ; i = v60)
    {
      while ((i & v50) != 0)
      {
        if ((a3 & 1) != 0
          || (v61 = i,
              atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v61, i ^ v49, memory_order_acquire, memory_order_acquire), v61 == i))
        {
          v67 = 0;
          return _os_object_release_internal_n_VARIANT_armv81((void *)a1, (const char *)2);
        }
        i = v61;
      }
      if ((i & 0x1000000000) != 0)
      {
        v56 = HIDWORD(i) & 7;
        if (v56 > v54)
        {
          _pthread_workqueue_override_start_direct();
          v62 = *(_DWORD *)(StatusReg + 200);
          v54 = v56;
          if ((HIWORD(v62) & 0xF) < v56)
          {
            *(_QWORD *)(StatusReg + 200) = v62 & 0xFFF0FFFF | ((_DWORD)v56 << 16);
            v54 = v56;
          }
          goto LABEL_138;
        }
      }
      v57 = (i >> 40) & 1;
      if (!((v45 + i) >> 53))
        LODWORD(v57) = 1;
      v58 = (_DWORD)v57 ? 0x60000000000000 : 0x20000000000000;
      v59 = v47 | i & 0x7700000001 | v58;
      v60 = i;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v60, v59, memory_order_acquire, memory_order_acquire);
      if (v60 == i)
        break;
    }
    v63 = 0x60000000000000;
    if ((a3 & 1) == 0)
      v63 = v49 | 0x60000000000000;
    v67 = (v59 & v63) - (i & 0x3FFE0000000000);
    v4 = a2;
    if (!v67)
      return _os_object_release_internal_n_VARIANT_armv81((void *)a1, (const char *)2);
  }
  if (v6)
  {
    v64 = 0;
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 84);
    v8 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v9 = *(_QWORD *)(v8 + 200);
    if ((_DWORD)v9)
    {
      v10 = v7 & 0xFFF;
      if ((v7 & 0xFFF) != 0)
      {
        if (((unsigned __int16)v9 & 0xFFFu) > v10)
          v10 = v9 & 0xFFF;
        if ((unsigned __int16)v7 >> 12 <= v10 >> 8)
          v11 = 0x40000000;
        else
          v11 = 1140912128;
        v12 = v9 & 0x880F0000 | v10 | v11 & v7;
      }
      else
      {
        v13 = v9 | 0x40000000;
        if ((v9 & 0xFFF) == 0)
          v13 = *(_QWORD *)(v8 + 200);
        v14 = (unsigned __int16)v7 >> 12;
        v12 = v13 & 0xFFFF0FFF | v7 & 0x400F000;
        if (v14 <= ((v13 >> 8) & 0xF))
          v12 = v13;
      }
    }
    else
    {
      v12 = v7 & 0xFFF0FFFF;
    }
    *(_QWORD *)(v8 + 200) = v12;
    v64 = v9 & 0xFFF0FFFF;
  }
  if ((a3 & 0x100000) != 0 && (*(_DWORD *)(a1 + 80) & 0x400000) != 0)
    atomic_fetch_and_explicit((atomic_uint *volatile)(a1 + 80), 0xFFBFFFFF, memory_order_relaxed);
  if (((*(_DWORD *)(a1 + 80) << 8) & 0x3000000) != 0)
    v15 = (const char *)((*(_DWORD *)(a1 + 80) << 8) & 0x3000000 | a3 & 0xFCFFFFF7 | 8);
  else
    v15 = (const char *)(a3 | 8u);
  v16 = v15 & 0x1000002;
  v17 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (2)
  {
    while (2)
    {
      if (v16 == 2)
        _dispatch_last_resort_autorelease_pool_push(v4);
      v19 = (unint64_t *)(v17 + 160);
      v18 = *(__objc2_class ***)(v17 + 160);
      v20 = *(_QWORD *)(a1 + 120);
      v21 = *(_QWORD *)(a1 + 88);
      if ((v15 & 0x40000) == 0 && v21)
      {
        v22 = *(_QWORD *)(v17 + 232);
        v23 = v22 ? *(_QWORD *)(v22 + 24) : -4;
        v24 = *(_QWORD *)(v21 + 16) & 0xFFFFFFFFFFFFFFFCLL;
        v25 = v24 == -4 || v24 == 0;
        if (!v25 && v23 != v24)
          _dispatch_mach_handle_wlh_change_0(a1);
      }
      if ((*(_WORD *)(a1 + 116) & 1) == 0)
      {
        if ((v15 & 0x40000) != 0)
        {
          v27 = *(_QWORD *)(a1 + 24);
          goto LABEL_84;
        }
        if ((v15 & 0x10000) != 0)
          v39 = *(_DWORD *)(v17 + 200);
        else
          v39 = 0x2000000;
        v40 = *(_QWORD *)(v17 + 232);
        if (v40)
          v41 = *(_QWORD *)(v40 + 24);
        else
          v41 = -4;
        _dispatch_mach_install_0(a1, v41, v39);
      }
      if (!*(_QWORD *)(a1 + 48))
      {
        v27 = 0;
        goto LABEL_47;
      }
      v27 = *(_QWORD *)(a1 + 24);
      if (v18 != (__objc2_class **)v27)
        goto LABEL_47;
      while (1)
      {
        while (1)
        {
          v27 = _dispatch_lane_serial_drain_VARIANT_armv81(a1, a2, v15, &v67);
LABEL_47:
          v28 = *(_DWORD *)(a1 + 80);
          if (v27 || (v28 & 0x10000000) != 0)
            break;
          if (!*(_QWORD *)(v21 + 16) || (*(_QWORD *)(v21 + 16) & 3) != 0)
            break;
          _dispatch_unote_resume_VARIANT_armv81(v21);
          if (v18 == *(__objc2_class ***)(a1 + 24)
            && !v18[3]
            && !*(_QWORD *)(v20 + 72)
            && (*((_DWORD *)v18 + 21) & 0x80000000) != 0)
          {
            if (*(_QWORD *)(v17 + 40))
            {
              v37 = *(_QWORD *)(v17 + 232);
              if (v37)
              {
                v38 = *(_QWORD *)(v37 + 24);
                if (v38 != -4 && v38 == (*(_QWORD *)(v21 + 16) & 0xFFFFFFFFFFFFFFFCLL))
                {
                  _dispatch_event_loop_drain_VARIANT_armv81(1);
                  if (*(_QWORD *)(a1 + 48))
                    continue;
                }
              }
            }
          }
          v28 = *(_DWORD *)(a1 + 80);
          break;
        }
        if (!*(_QWORD *)(v20 + 72))
          goto LABEL_74;
        if ((*(_BYTE *)(v20 + 30) & 1) != 0 && !*(_DWORD *)(v20 + 88))
          goto LABEL_70;
        v30 = *(_DWORD *)(v20 + 88) ? *(_QWORD *)(v20 + 16) != 0 : *(_WORD *)(a1 + 118) & 1;
        if (v30 && v18 != &_dispatch_mgr_q)
          break;
        _dispatch_mach_send_invoke_0(a1, v15, 4 * (v18 != &_dispatch_mgr_q));
        if (v27)
          goto LABEL_74;
        if (*(_QWORD *)(a1 + 48))
        {
          v27 = *(_QWORD *)(a1 + 24);
LABEL_70:
          if (v27)
            goto LABEL_74;
        }
        if (*(_QWORD *)(v20 + 72))
          v27 = -1;
        else
          v27 = 0;
LABEL_74:
        if ((v28 & 0x10000000) == 0)
          goto LABEL_84;
        if ((v28 & 0x80000000) == 0)
        {
          _dispatch_mach_cancel_0(a1);
          if ((v31 & 1) == 0)
          {
            if (!v27)
              v27 = -1;
            goto LABEL_84;
          }
        }
        if ((*(_WORD *)(a1 + 116) & 8) != 0)
          goto LABEL_84;
        if (v18 != *(__objc2_class ***)(a1 + 24))
        {
          if (!v27)
            v27 = *(_QWORD *)(a1 + 24);
          goto LABEL_84;
        }
        if (*(_QWORD *)(a1 + 56) >> 55)
        {
          v27 = (unint64_t)v18;
          goto LABEL_84;
        }
        if (!*(_QWORD *)(a1 + 48))
        {
          _dispatch_mach_cancel_invoke(a1, (int)v15);
          goto LABEL_84;
        }
      }
      if (!v27)
        v27 = (unint64_t)&_dispatch_mgr_q;
LABEL_84:
      v16 = v15 & 0x1000002;
      v4 = a2;
      if ((v15 & 0x1000002) == 2)
      {
        v66 = *(_OWORD *)v19;
        *(_QWORD *)(v17 + 160) = a1;
        *(_QWORD *)(v17 + 168) = &v66;
        _dispatch_last_resort_autorelease_pool_pop(a2);
        *(_OWORD *)v19 = v66;
      }
      if (v27 + 1 > 1)
        goto LABEL_124;
      v32 = v67;
      v33 = *(_QWORD *)(a1 + 56);
      while (2)
      {
        v34 = v33;
        v35 = v33 - v32;
        v36 = v35 & 0xFFFFFFF700000001;
        if (v34 >> 55)
        {
LABEL_92:
          v33 = v34;
          atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v33, v36, memory_order_release, memory_order_relaxed);
          if (v33 == v34)
          {
            if ((~v34 & 0x1800000000) == 0)
            {
              v42 = HIDWORD(v34) & 7;
              v43 = *(_DWORD *)(v17 + 200);
              if ((HIWORD(v43) & 0xF) < v42)
                *(_QWORD *)(v17 + 200) = v43 & 0xFFF0FFFF | ((_DWORD)v42 << 16);
            }
            v27 = 0;
            v67 = 0;
            goto LABEL_124;
          }
          continue;
        }
        break;
      }
      if ((v34 & 0x8000000000) == 0)
      {
        if (v27)
          v36 = v35 & 0xFFFFFF7700000001 | 0x8000000000;
        else
          v36 = v35 & 0xFFFFFFF000000001;
        goto LABEL_92;
      }
      atomic_fetch_xor_explicit((atomic_ullong *volatile)(a1 + 56), 0x8000000000uLL, memory_order_acquire);
      if ((a3 & 1) != 0)
        continue;
      break;
    }
    v27 = *v19;
    if ((*(_QWORD *)(*(_QWORD *)*v19 + 40) & 0x10000) != 0)
      continue;
    break;
  }
LABEL_124:
  if ((v15 & 0x40000) == 0)
    *(_QWORD *)(v17 + 200) = *(_QWORD *)(v17 + 200) & 0xF0000 | v64;
  if (v27)
    return _dispatch_queue_invoke_finish_VARIANT_armv81((atomic_ullong *)a1, a2, (__objc2_class **)v27, v67);
  return _os_object_release_internal_n_VARIANT_armv81((void *)a1, (const char *)2);
}

void _dispatch_mach_wakeup_VARIANT_armv81(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  BOOL v7;

  v3 = *(_QWORD *)(a1 + 120);
  v4 = *(_DWORD *)(a1 + 80);
  if ((*(_WORD *)(a1 + 116) & 1) == 0 || *(_QWORD *)(a1 + 48))
    goto LABEL_3;
  if (!*(_QWORD *)(v3 + 72))
  {
    v5 = 0;
    if ((v4 & 0x10000000) == 0 || !(a3 & 0x10 | ~v4 & 0x50000000))
      goto LABEL_6;
    if ((*(_WORD *)(a1 + 116) & 8) == 0)
    {
LABEL_3:
      if (*(__objc2_class ***)(a1 + 24) == &_dispatch_mgr_q)
        v5 = (uint64_t)&_dispatch_mgr_q;
      else
        v5 = 1;
      goto LABEL_6;
    }
LABEL_16:
    v5 = 0;
    goto LABEL_6;
  }
  if (*(_DWORD *)(v3 + 64) > 3u || (*(_BYTE *)(v3 + 30) & 1) != 0 && !*(_DWORD *)(v3 + 88))
    goto LABEL_16;
  if (*(_DWORD *)(v3 + 88))
    v6 = *(_QWORD *)(v3 + 16) != 0;
  else
    v6 = *(_WORD *)(a1 + 118) & 1;
  v5 = (uint64_t)&_dispatch_mgr_q;
  if (v6)
    v7 = &_dispatch_mgr_q == (__objc2_class **)1;
  else
    v7 = 1;
  if (v7)
    goto LABEL_3;
LABEL_6:
  _dispatch_queue_wakeup_VARIANT_armv81(a1, a2, a3, v5);
}

uint64_t _dispatch_xpc_sigterm_merge_evt_VARIANT_armv81(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v5 = ~*(_QWORD *)(a1 + 8);
  _dispatch_barrier_async_detached_f_VARIANT_armv81(v5, v5, (uint64_t)_dispatch_mach_sigterm_invoke_0);
  v6 = __clz(__rbit32((a4 >> 8) & 0x3FFF));
  if (((a4 >> 8) & 0x3FFF) != 0)
    v7 = v6 + 1;
  else
    v7 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 80))(v5, v7, 19);
}

uint64_t _dispatch_mach_sigterm_invoke_0(uint64_t a1)
{
  uint64_t result;

  result = _dispatch_unote_unregister_VARIANT_armv81(*(_QWORD *)(a1 + 128), 5);
  if ((*(_DWORD *)(a1 + 80) & 0x10000000) == 0)
    return _dispatch_client_callout4(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 48), 11, 0, 0, *(uint64_t (**)(void))(*(_QWORD *)(a1 + 88) + 40));
  return result;
}

uint64_t dispatch_mach_msg_create_VARIANT_armv81(const void *a1, size_t a2, int a3, _QWORD *a4)
{
  const void *v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;

  if (a2 < 0x18 || (v7 = a1) == 0 && a3)
    dispatch_mach_msg_create_VARIANT_mp_cold_1(a2);
  if (a3)
  {
    v8 = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_mach_msg, 96);
    *(_QWORD *)(v8 + 88) = v7;
    *(_QWORD *)(v8 + 16) = -1985229329;
    *(_QWORD *)(v8 + 24) = &unk_1ECCEA080;
    *(_DWORD *)(v8 + 72) = a3;
    *(_QWORD *)(v8 + 80) = a2;
    if (!a4)
      return v8;
    goto LABEL_12;
  }
  v9 = a2 + 88;
  if (a2 - 8 >= 0xFFFFFFFFFFFFFFA0)
    dispatch_mach_msg_create_VARIANT_mp_cold_2(a2);
  v10 = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_mach_msg, v9);
  v8 = v10;
  if (v7)
    memcpy((void *)(v10 + 88), v7, a2);
  *(_QWORD *)(v8 + 16) = -1985229329;
  *(_QWORD *)(v8 + 24) = &unk_1ECCEA080;
  *(_DWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 80) = a2;
  if (a4)
  {
    v7 = (const void *)(v8 + 88);
LABEL_12:
    *a4 = v7;
  }
  return v8;
}

void _dispatch_mach_msg_dispose_VARIANT_armv81(uint64_t a1, const char *a2)
{
  uint64_t v3;
  int add_explicit;
  int v5;
  kern_return_t v6;

  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
  {
    add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 12), 0xFFFFFFFF, memory_order_relaxed);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1)
        _dispatch_async_redirect_invoke_cold_1();
      _voucher_xref_dispose_VARIANT_armv81(v3, a2);
    }
    *(_QWORD *)(a1 + 64) = 0;
  }
  v5 = *(_DWORD *)(a1 + 72);
  if (v5 == 2)
  {
    v6 = mach_vm_deallocate(*MEMORY[0x1E0C883F0], *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 80));
    if (v6)
      _dispatch_bug(3000, v6);
  }
  else if (v5 == 1)
  {
    free(*(void **)(a1 + 88));
  }
}

uint64_t dispatch_mach_msg_get_msg_VARIANT_armv81(uint64_t a1, _QWORD *a2)
{
  int v2;
  uint64_t result;

  if (a2)
    *a2 = *(_QWORD *)(a1 + 80);
  v2 = *(_DWORD *)(a1 + 72);
  result = a1 + 88;
  if (v2)
    return *(_QWORD *)result;
  return result;
}

void _dispatch_mach_msg_async_reply_invoke_VARIANT_armv81(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *StatusReg;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  atomic_uint *v23;
  int add_explicit;
  uint64_t v25;
  int v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(v6 + 48);
  v8 = 3;
  if (v7)
    v8 = 4;
  if (v7 >> 14 == 254944)
    v9 = v7 & 0x3FFF;
  else
    v9 = v8;
  v28 = 0;
  v29 = 0;
  v27[1] = "mach_msg";
  v27[2] = v6;
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v27[0] = StatusReg[23];
  StatusReg[23] = v27;
  v11 = *(_QWORD *)(v5 + 88);
  *(_QWORD *)(v6 + 16) = -1985229329;
  v13 = *(_QWORD *)(v6 + 56);
  v12 = *(_QWORD *)(v6 + 64);
  if (v13 == -1)
  {
    v16 = 0;
  }
  else
  {
    v14 = StatusReg[25];
    if (((v14 >> 8) & 0xF) != 0)
      v15 = 256 << ((BYTE1(v14) & 0xFu) - 1);
    else
      v15 = 0;
    v16 = v13 & 0xFFFFFF;
    if (v16)
    {
      if (v16 < (v15 & 0xFFFFFF00))
        v16 = v15 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    }
    else if ((unsigned __int16)v14 >> 12)
    {
      v16 = (256 << (((unsigned __int16)v14 >> 12) - 1)) | 0xFF;
    }
    else
    {
      v16 = v15 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    }
  }
  v17 = v16 & 0xFFFFFFFF02FFFFFFLL;
  v18 = StatusReg[4];
  if ((v18 & 0x1000000) != 0)
  {
    if (v17)
    {
LABEL_45:
      _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(v17, v12, 7);
      goto LABEL_21;
    }
    v17 = v18 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v17 == (v18 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_17;
  }
  if (v17)
    goto LABEL_45;
LABEL_17:
  if (v12 == -1)
    goto LABEL_21;
  if (StatusReg[28] != v12)
  {
    v17 = 0;
    goto LABEL_45;
  }
  if (v12 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
    __break(1u);
    goto LABEL_47;
  }
LABEL_21:
  v19 = 0;
  *(_QWORD *)(v6 + 64) = 0;
  if ((a3 & 0x1000000) != 0)
    v19 = (void *)MEMORY[0x18D766D94]();
  _dispatch_client_callout3(*(_QWORD *)(v11 + 48), v9, v6, *((uint64_t (**)(void))_dispatch_mach_xpc_hooks + 3));
  if (v19)
    objc_autoreleasePoolPop(v19);
  dispatch_release_VARIANT_armv81((atomic_uint *)v6, v20);
  v22 = v28;
  StatusReg[23] = v27[0];
  if (v22)
    _dispatch_mach_ipc_handoff_async_0((uint64_t)v27);
  v23 = *(atomic_uint **)(a1 + 56);
  if (v23[2] == 0x7FFFFFFF)
    goto LABEL_29;
  add_explicit = atomic_fetch_add_explicit(v23 + 2, 0xFFFFFFFF, memory_order_release);
  if (add_explicit > 1)
    goto LABEL_29;
  if (add_explicit != 1)
  {
LABEL_47:
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
    __break(1u);
    return;
  }
  _os_object_dispose(v23, v21);
LABEL_29:
  v25 = StatusReg[22];
  if (v25)
    v26 = *(_DWORD *)(v25 + 8) + 1;
  else
    v26 = 1;
  if (v26 > _dispatch_continuation_cache_limit)
  {
    _dispatch_continuation_free_to_cache_limit_VARIANT_armv81(a1);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v25;
    *(_DWORD *)(a1 + 8) = v26;
    StatusReg[22] = a1;
  }
}

uint64_t dispatch_mach_msg_get_filter_policy_id_VARIANT_armv81(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t result;

  if (!a2)
    dispatch_mach_msg_get_filter_policy_id_VARIANT_mp_cold_1();
  v2 = a1 + 88;
  if (*(_DWORD *)(a1 + 72))
  {
    v2 = *(_QWORD *)v2;
    if (!v2)
      dispatch_mach_msg_get_filter_policy_id_VARIANT_mp_cold_4(a1);
  }
  v3 = (unsigned int *)(v2 + ((*(unsigned int *)(v2 + 4) + 3) & 0x1FFFFFFFCLL));
  if (*v3)
    dispatch_mach_msg_get_filter_policy_id_VARIANT_mp_cold_3(*v3);
  result = v3[1];
  if (result < 0x44)
    dispatch_mach_msg_get_filter_policy_id_VARIANT_mp_cold_2(result);
  *a2 = v3[15];
  return result;
}

uint64_t dispatch_mig_server_VARIANT_armv81(uint64_t a1, uint64_t a2, unsigned int (*a3)(mach_msg_header_t *, mach_msg_header_t *))
{
  mach_msg_option_t v4;
  size_t v5;
  uint64_t v6;
  mach_msg_header_t *v7;
  uint64_t v8;
  uint64_t v9;
  mach_msg_header_t *v10;
  char v11;
  int v12;
  unint64_t StatusReg;
  int v14;
  mach_msg_header_t *v15;
  BOOL v16;
  uint64_t v17;
  _DWORD *v18;
  const char *v19;
  uint64_t v20;
  int v21;
  int add_explicit;
  mach_port_t msgh_remote_port;
  mach_port_t v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  unsigned int (*v29)(mach_msg_header_t *, mach_msg_header_t *);
  uint64_t v30;
  uint64_t v31;

  v29 = a3;
  v31 = *MEMORY[0x1E0C874D8];
  v4 = 117442818;
  v5 = a2 + 68;
  v30 = *(_QWORD *)(a1 + 88);
  MEMORY[0x1E0C86820](a1, a2);
  v7 = (mach_msg_header_t *)((char *)&v28 - ((v6 + 83) & 0xFFFFFFFFFFFFFFF0));
  bzero(v7, v5);
  v7[1].msgh_remote_port = 0;
  MEMORY[0x1E0C86820](v8, v9);
  v10 = v7;
  bzero(v7, v5);
  v11 = 0;
  v7->msgh_size = 0;
  v12 = 1000;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v14 = 117442818;
  while (1)
  {
    v15 = v10;
    v10 = v7;
    if (*(_QWORD *)(a1 + 56) >> 55)
      v16 = 0;
    else
      v16 = (*(_DWORD *)(a1 + 80) & 0x10000000) == 0;
    if (!v16 || (--v12, !v12))
    {
      if ((v4 & 1) == 0)
        return 0;
      v14 &= ~2u;
      v4 &= ~2u;
    }
    v17 = mach_msg(v15, v4, v15->msgh_size, v5, *(_DWORD *)(v30 + 24), 0, 0);
    if ((_DWORD)v17)
      break;
    if ((v14 & 2) == 0)
      return 0;
    v18 = voucher_create_with_mach_msg_VARIANT_armv81(&v15->msgh_bits);
    v20 = *(_QWORD *)(StatusReg + 224);
    if ((_DWORD *)v20 == v18)
      goto LABEL_21;
    *(_QWORD *)(StatusReg + 224) = v18;
    if (v18)
    {
      v19 = (const char *)v18[8];
      if (!v20)
        goto LABEL_17;
    }
    else
    {
      v19 = 0;
      if (!v20)
      {
LABEL_17:
        v21 = 0;
        goto LABEL_18;
      }
    }
    v21 = *(_DWORD *)(v20 + 32);
LABEL_18:
    if ((_DWORD)v19 != -1 && (_DWORD)v19 != v21)
      _dispatch_set_priority_and_mach_voucher_slow_VARIANT_armv81(0, (int)v19);
LABEL_21:
    if (v20)
    {
      add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v20 + 12), 0xFFFFFFFF, memory_order_relaxed);
      if (add_explicit <= 1)
      {
        if (add_explicit != 1)
          _dispatch_async_redirect_invoke_cold_1();
        _voucher_xref_dispose_VARIANT_armv81(v20, v19);
      }
    }
    *(_QWORD *)&v7->msgh_bits = 0;
    *(_QWORD *)&v7->msgh_remote_port = 0;
    *(_QWORD *)&v7->msgh_voucher_port = 0;
    if (!v29(v15, v7))
      goto LABEL_28;
    if ((v7->msgh_bits & 0x80000000) != 0)
      goto LABEL_29;
    msgh_remote_port = v7[1].msgh_remote_port;
    if (!msgh_remote_port)
      goto LABEL_29;
    if (msgh_remote_port == -305)
    {
      v7->msgh_remote_port = 0;
    }
    else
    {
LABEL_28:
      v15->msgh_remote_port = 0;
      mach_msg_destroy(v15);
    }
LABEL_29:
    v24 = v7->msgh_remote_port;
    v11 = 1;
    v7 = v15;
    v4 = v14;
    if (v24)
    {
      if ((v10->msgh_bits & 0x1F) == 0x12)
        v25 = 1;
      else
        v25 = 17;
      v4 = v25 | v14;
      v7 = v15;
    }
  }
  v26 = v17;
  if ((v17 - 268435459) < 2)
  {
    _dispatch_mig_consume_unsent_message(v15);
  }
  else if ((_DWORD)v17 != 268451842)
  {
    if ((_DWORD)v17 == 268451843)
    {
      if (v11 & 1 | (v15->msgh_remote_port != 0))
        return 0;
      else
        return 268451843;
    }
    else
    {
      _dispatch_bug_mach_client("dispatch_mig_server: mach_msg() failed", v17);
    }
  }
  return v26;
}

uint64_t dispatch_mach_mig_demux_VARIANT_armv81(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  mach_msg_header_t *v4;
  mach_msg_id_t msgh_id;
  uint64_t v6;
  int v7;
  BOOL v8;
  int v9;
  uint64_t v11;
  void (**v12)(mach_msg_header_t *, char *);
  uint64_t v13;
  unint64_t StatusReg;
  uint64_t v15;
  mach_msg_header_t *v16;
  size_t v17;
  mach_port_t msgh_remote_port;
  mach_port_t v19;
  mach_msg_option_t v20;
  mach_msg_return_t v21;
  mach_port_name_t msgh_local_port;
  int v23;
  kern_return_t v24;
  _QWORD v25[4];

  v25[3] = *MEMORY[0x1E0C874D8];
  v25[1] = "mach_mig_demux";
  v25[2] = a1;
  v4 = (mach_msg_header_t *)(a4 + 88);
  if (*(_DWORD *)(a4 + 72))
    v4 = *(mach_msg_header_t **)&v4->msgh_bits;
  if (!a3)
    return 0;
  msgh_id = v4->msgh_id;
  while (1)
  {
    v6 = *a2;
    v7 = *(_DWORD *)(*a2 + 8);
    v8 = __OFSUB__(msgh_id, v7);
    v9 = msgh_id - v7;
    if (v9 < 0 == v8 && *(_DWORD *)(v6 + 12) > msgh_id)
      break;
    ++a2;
    if (!--a3)
      return 0;
  }
  v11 = v6 + 40 * v9;
  v13 = *(_QWORD *)(v11 + 40);
  v12 = (void (**)(mach_msg_header_t *, char *))(v11 + 40);
  if (!v13)
    return 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v25[0] = *(_QWORD *)(StatusReg + 184);
  *(_QWORD *)(StatusReg + 184) = v25;
  MEMORY[0x1E0C86820](a1, (*(_DWORD *)(v6 + 40 * v9 + 64) + 68));
  v16 = (mach_msg_header_t *)((char *)v25 - v15);
  bzero((char *)v25 - v15, v17);
  msgh_remote_port = v4->msgh_remote_port;
  v16->msgh_bits = v4->msgh_bits & 0x1F;
  v16->msgh_size = 36;
  *(_QWORD *)&v16->msgh_remote_port = msgh_remote_port;
  v16->msgh_voucher_port = 0;
  v16->msgh_id = msgh_id + 100;
  (*v12)(v4, (char *)v16);
  if ((v16->msgh_bits & 0x80000000) == 0)
  {
    v19 = v16[1].msgh_remote_port;
    if (v19 == -305)
      goto LABEL_32;
    if (v19)
    {
      v4->msgh_remote_port = 0;
      mach_msg_destroy(v4);
    }
  }
  if (v16->msgh_remote_port)
  {
    if ((v16->msgh_bits & 0x1F) == 0x12)
      v20 = 1;
    else
      v20 = 17;
    v21 = mach_msg(v16, v20, v16->msgh_size, 0, 0, 0, 0);
    if ((v21 - 268435459) >= 2)
    {
      if (v21)
      {
        if (v21 == -301)
          _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
        dispatch_mach_mig_demux_VARIANT_mp_cold_1(v21);
      }
      goto LABEL_32;
    }
    msgh_local_port = v16->msgh_local_port;
    if (msgh_local_port - 1 > 0xFFFFFFFD)
      goto LABEL_31;
    v23 = (v16->msgh_bits >> 8) & 0x1F;
    if ((v23 - 17) >= 2)
    {
      if (v23 != 16)
      {
LABEL_31:
        mach_msg_destroy(v16);
        goto LABEL_32;
      }
      v24 = mach_port_mod_refs(*MEMORY[0x1E0C883F0], msgh_local_port, 1u, -1);
    }
    else
    {
      v24 = mach_port_deallocate(*MEMORY[0x1E0C883F0], msgh_local_port);
    }
    if (v24 == -301)
      _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
    if (v24)
      _dispatch_bug(3170, v24);
    goto LABEL_31;
  }
LABEL_32:
  *(_QWORD *)(StatusReg + 184) = v25[0];
  return 1;
}

uint64_t dispatch_mach_mig_demux_get_context_VARIANT_armv81()
{
  unint64_t v0;

  v0 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 184;
  do
  {
    v0 = *(_QWORD *)v0;
    if (!v0)
      dispatch_mach_mig_demux_get_context_VARIANT_armv81_cold_1();
  }
  while (*(char **)(v0 + 8) != "mach_mig_demux");
  return *(_QWORD *)(v0 + 16);
}

uint64_t _dispatch_mach_msg_create_reply_disconnected_0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int *v5;
  int v6;
  uint64_t result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int add_explicit;

  v5 = (int *)a1 + 13;
  if (!a1)
    v5 = (int *)(a2 + 24);
  v6 = *v5;
  if (*v5)
  {
    if (a2 && !*(_QWORD *)(a2 + 16) && *(_BYTE *)(a2 + 30))
    {
      v14 = *(_QWORD *)(a2 + 56);
      if (v14)
      {
        add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 12), 0xFFFFFFFF, memory_order_relaxed);
        if (add_explicit <= 1)
        {
          if (add_explicit != 1)
            _dispatch_async_redirect_invoke_cold_1();
          _voucher_xref_dispose_VARIANT_armv81(v14, (const char *)a2);
        }
        *(_QWORD *)(a2 + 56) = 0;
      }
      _dispatch_destruct_reply_port();
      return 0;
    }
    result = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_mach_msg, 112);
    *(_QWORD *)(result + 16) = -1985229329;
    *(_QWORD *)(result + 24) = &unk_1ECCEA080;
    *(_DWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 24;
    *(_DWORD *)(result + 100) = v6;
    if (a1)
    {
      *(_QWORD *)(result + 32) = a1[4];
      v9 = a1[8];
      *(_QWORD *)(result + 56) = a1[7];
      *(_QWORD *)(result + 64) = v9;
      if (v9 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 12), 1u, memory_order_relaxed) <= 0)
        dispatch_group_notify_VARIANT_mp_cold_3();
    }
    else
    {
      v11 = *(unsigned int *)(a2 + 40);
      v12 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(result + 56) = v11;
      *(_QWORD *)(result + 64) = v12;
      *(_QWORD *)(a2 + 56) = 0;
    }
    v13 = a3 | 0xF8F80000;
    if (!a3)
      v13 = 0;
    *(_DWORD *)(result + 48) = v13;
  }
  else
  {
    if (a1)
      return 0;
    result = *(_QWORD *)(a2 + 56);
    if (result)
    {
      v10 = atomic_fetch_add_explicit((atomic_uint *volatile)(result + 12), 0xFFFFFFFF, memory_order_relaxed);
      if (v10 <= 1)
      {
        if (v10 != 1)
          _dispatch_async_redirect_invoke_cold_1();
        _voucher_xref_dispose_VARIANT_armv81(result, (const char *)a2);
      }
      result = 0;
      *(_QWORD *)(a2 + 56) = 0;
    }
  }
  return result;
}

void _dispatch_mach_send_drain_0(_DWORD *a1, const char *a2, unsigned int a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  atomic_ullong *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  int add_explicit;
  unsigned int v31;
  unint64_t StatusReg;
  unsigned int v33;
  uint64_t v35;

  v33 = a2;
  v4 = 0;
  v5 = 0;
  v6 = *((_QWORD *)a1 + 15);
  v7 = HIDWORD(*(_QWORD *)(v6 + 64)) & 7;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v35 = v7;
  do
  {
    v8 = (atomic_ullong *)(v6 + 72);
    if (*(_QWORD *)(v6 + 72))
    {
      v31 = v4;
      v9 = v6;
      v10 = (unint64_t *)(v6 + 80);
      v11 = a3;
LABEL_4:
      v12 = *v10;
      if (!*v10)
        v12 = _dispatch_wait_for_enqueuer(v10);
      while (1)
      {
        v13 = (_QWORD *)v12;
        v14 = (unint64_t *)(v12 + 16);
        v12 = *(_QWORD *)(v12 + 16);
        *v10 = v12;
        if (!v12)
        {
          v15 = v13;
          atomic_compare_exchange_strong_explicit(v8, (unint64_t *)&v15, 0, memory_order_release, memory_order_relaxed);
          if (v15 != v13)
          {
            v12 = *v14;
            if (!*v14)
              v12 = _dispatch_wait_for_enqueuer(v14);
            *v10 = v12;
          }
        }
        v16 = *v13;
        if (*v13 < 0x1000uLL)
        {
          if ((v16 & 1) == 0)
          {
            v6 = v9;
            if (*(_QWORD *)(v9 + 16) && *(__objc2_class ***)(StatusReg + 160) != &_dispatch_mgr_q)
            {
              *((_WORD *)a1 + 59) |= 1u;
              v4 = v31 | 2;
LABEL_34:
              *v14 = v12;
              if (!v12)
              {
                v20 = 0;
                atomic_compare_exchange_strong_explicit(v8, (unint64_t *)&v20, (unint64_t)v13, memory_order_release, memory_order_relaxed);
                if (v20)
                {
                  v28 = *v10;
                  if (!*v10)
                  {
                    v29 = v4;
                    v28 = _dispatch_wait_for_enqueuer(v10);
                    v4 = v29;
                    v6 = v9;
                  }
                  v13[2] = v28;
                }
              }
              *v10 = (unint64_t)v13;
              if (*v13 >= 0x1000uLL && *(_QWORD *)(*v13 + 40) == 768)
              {
                v21 = *(_QWORD *)(v6 + 64);
                do
                {
                  v22 = v21;
                  v23 = v21 & 0xFFFFFFC700000000 | 0x3000000000;
                  atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v6 + 64), &v21, v23, memory_order_release, memory_order_relaxed);
                }
                while (v21 != v22);
              }
              else
              {
                v24 = *(_QWORD *)(v6 + 64);
                do
                {
                  v22 = v24;
                  v23 = v24 & 0xFFFFFFC7FFFFFFFFLL;
                  if ((v24 & 0x2800000000) == 0)
                    v23 = v24 & 0xFFFFFFDF00000000 | 0x2000000000;
                  atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v6 + 64), &v24, v23, memory_order_release, memory_order_relaxed);
                }
                while (v24 != v22);
              }
              a3 &= ~8u;
              goto LABEL_48;
            }
            if (!_dispatch_mach_reconnect_invoke_0((uint64_t)a1, (uint64_t)v13))
            {
              v4 = v31;
              goto LABEL_34;
            }
            goto LABEL_23;
          }
          v18 = v13[6];
          v17 = v13[7];
        }
        else
        {
          if (*(_QWORD *)(v16 + 40) == 768)
          {
            if ((a3 & 4) == 0)
            {
              v4 = v31;
LABEL_32:
              v6 = v9;
              goto LABEL_34;
            }
            _dispatch_continuation_pop_VARIANT_armv81((uint64_t)v13, 0, v33, (uint64_t)a1);
            goto LABEL_23;
          }
          v17 = 0;
          v18 = (uint64_t)v13;
        }
        if (*(_DWORD *)(v9 + 88) || (a1[20] & 0x10000000) != 0)
        {
          _dispatch_mach_msg_not_sent_0((uint64_t)a1, v18, v17);
        }
        else
        {
          v19 = _dispatch_mach_msg_send_0((unint64_t)a1, v18, v17, v35, (int *)v11);
          if (!v19)
          {
            v4 = v31 | (2 * (*((_WORD *)a1 + 59) & 1));
            goto LABEL_32;
          }
          v5 |= (v19 & 2) >> 1;
        }
LABEL_23:
        v11 = a3 & 0xFFFFFFF7;
        if (!v12)
        {
          v11 = a3 & 0xFFFFFFF7;
          if (*v8)
            goto LABEL_4;
          a3 &= ~8u;
          v4 = v31;
          v6 = v9;
          break;
        }
      }
    }
    v25 = *(_QWORD *)(v6 + 64);
    do
    {
      v22 = v25;
      v23 = v25 & ((uint64_t)(v25 << 26) >> 63) & 0xFFFFFFC7FFFFFFFFLL;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v6 + 64), &v25, v23, memory_order_release, memory_order_relaxed);
    }
    while (v25 != v22);
LABEL_48:
    if ((v22 & 0x800000000) != 0)
    {
      v26 = HIDWORD(v22) & 7;
      v27 = *(_DWORD *)(StatusReg + 200);
      if ((HIWORD(v27) & 0xF) < v26)
        *(_QWORD *)(StatusReg + 200) = v27 & 0xFFF0FFFF | ((_DWORD)v26 << 16);
    }
    v35 = HIDWORD(v23) & 7;
  }
  while ((_DWORD)v23);
  if ((v23 & 0x1000000000) != 0)
  {
    _dispatch_mach_push_send_barrier_drain_0((uint64_t)a1, v35);
    return;
  }
  if (!v23 && (*((_WORD *)a1 + 59) & 2) != 0)
  {
    if ((a1[29] & 8) != 0)
      v4 = v4;
    else
      v4 = v4 | 0x12;
  }
  if (((v22 ^ v23) & 0x8000000000) == 0)
  {
    if (!(_DWORD)v4)
      return;
LABEL_69:
    (*(void (**)(_DWORD *, _QWORD, uint64_t))(*(_QWORD *)a1 + 80))(a1, (*((unsigned __int16 *)a1 + 59) << 31 >> 31) & v35, v4);
    return;
  }
  if ((_DWORD)v4)
  {
    v4 = v4 | 1;
    goto LABEL_69;
  }
  if (a1[2] != 0x7FFFFFFF)
  {
    add_explicit = atomic_fetch_add_explicit(a1 + 2, 0xFFFFFFFE, memory_order_release);
    if (add_explicit <= 2)
    {
      if (add_explicit == 2)
      {
        _os_object_dispose(a1, a2);
      }
      else
      {
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
    }
  }
}

void _dispatch_mach_msg_not_sent_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t reply_disconnected_0;
  int v11;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v14;

  v6 = *(_DWORD *)(a2 + 48);
  if ((*(_WORD *)(a1 + 116) & 0x10) != 0 && *(_QWORD *)(a2 + 32))
  {
    v7 = (*((uint64_t (**)(void))_dispatch_mach_xpc_hooks + 2))();
    if (v7)
      v8 = v7;
    else
      v8 = a1;
  }
  else
  {
    v8 = 0;
  }
  if (v8)
    v9 = 12;
  else
    v9 = 7;
  reply_disconnected_0 = _dispatch_mach_msg_create_reply_disconnected_0((_QWORD *)a2, a3, v9);
  if ((v6 & 2) != 0)
    v11 = 0;
  else
    v11 = -117964795;
  *(_DWORD *)(a2 + 48) = v11;
  _dispatch_mach_handle_or_push_received_msg_0(a1, a2, 0);
  if (reply_disconnected_0)
  {
    if (v8)
    {
      v12 = _dispatch_mach_msg_async_reply_wrap_0(reply_disconnected_0, a1);
      v13 = __clz(__rbit32((*(_DWORD *)(reply_disconnected_0 + 56) >> 8) & 0x3FFF));
      if (((*(_DWORD *)(reply_disconnected_0 + 56) >> 8) & 0x3FFF) != 0)
        v14 = v13 + 1;
      else
        v14 = 0;
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v8 + 88))(v8, v12, v14);
    }
    else
    {
      _dispatch_mach_handle_or_push_received_msg_0(a1, reply_disconnected_0, 0);
    }
  }
}

uint64_t _dispatch_mach_msg_send_0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v5;
  unsigned int v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int *v14;
  int v15;
  int v16;
  __int16 v17;
  __int16 v18;
  uint64_t v19;
  BOOL v20;
  __int16 v21;
  uint64_t v22;
  int v23;
  int v24;
  char v25;
  int mach_voucher_VARIANT_armv81;
  int v27;
  int v28;
  int v29;
  unint64_t v30;
  int v31;
  char v32;
  char v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  const char *v38;
  mach_port_name_t v39;
  int v40;
  int v41;
  BOOL v42;
  char v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t reply_disconnected_0;
  _QWORD *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  unint64_t StatusReg;
  unint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int add_explicit;
  unint64_t v64;
  char v65;
  int v66;
  __int16 v67;
  int *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD v73[3];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;

  v6 = a4;
  v8 = a1;
  v77 = *MEMORY[0x1E0C874D8];
  v9 = *(_QWORD *)(a1 + 120);
  v10 = a2 + 88;
  if (*(_DWORD *)(a2 + 72))
    v10 = *(_QWORD *)v10;
  v11 = *(_QWORD *)(a2 + 64);
  v12 = *(_DWORD *)v10 & 0x1F;
  v13 = *(unsigned int *)(a2 + 52);
  v75 = 0u;
  v76 = 0u;
  v74 = 0u;
  memset(v73, 0, 40);
  if (v12 == 18)
  {
    v14 = (int *)(a2 + 48);
    v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 2) == 0)
    {
      v69 = 18;
      v15 = 0;
      v16 = 0;
      LOBYTE(v17) = 1;
      goto LABEL_42;
    }
LABEL_19:
    v23 = 0;
    goto LABEL_74;
  }
  v18 = *(_WORD *)(a1 + 118);
  *(_WORD *)(a1 + 118) = v18 & 0xFFFE;
  v19 = *(_QWORD *)(v9 + 48);
  if (v19)
    v20 = v19 == a2;
  else
    v20 = 1;
  if (!v20)
  {
    if (*(_QWORD *)(v9 + 16)
      && *(__objc2_class ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160) != &_dispatch_mgr_q)
    {
      v44 = 0;
      v45 = v18 | 1;
      goto LABEL_72;
    }
    v54 = v13;
    v14 = a5;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v56 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
    if (v56 >= 0x10FF)
      v56 = 4351;
    *(_QWORD *)(v19 + 56) = v56;
    v57 = *(_QWORD *)(StatusReg + 224);
    if (v57 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v57 + 12), 1u, memory_order_relaxed) <= 0)
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
      __break(1u);
      goto LABEL_131;
    }
    *(_QWORD *)(v19 + 64) = v57;
    *(_DWORD *)(v19 + 48) = ((*(_QWORD *)(StatusReg + 32) & 0x300) != 0) << 18;
    if (!_dispatch_mach_msg_send_0(a1, *(_QWORD *)(v9 + 48), 0, a4, 0))
      goto LABEL_126;
    if ((*(_WORD *)(v8 + 116) & 0x20) != 0)
      _dispatch_mach_arm_no_senders(v8, 1);
    v19 = 0;
    *(_QWORD *)(v9 + 48) = 0;
    LOBYTE(a5) = (_BYTE)v14;
    LODWORD(v13) = v54;
  }
  v14 = (int *)(a2 + 48);
  v5 = *(_DWORD *)(a2 + 48);
  if ((v5 & 2) != 0)
    goto LABEL_19;
  v69 = v12;
  LOWORD(v12) = 0;
  v21 = 1;
  if (v19 != a2)
    *(_DWORD *)(v10 + 8) = *(_DWORD *)(v9 + 92);
  if (*(__objc2_class ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160) != &_dispatch_mgr_q)
  {
    if (v11)
      goto LABEL_16;
LABEL_23:
    if ((*(_BYTE *)(v10 + 2) & 0x1F) == 0)
    {
      v70 = v9;
      v67 = v21;
      v24 = v13;
      v25 = (char)a5;
      if (_voucher_task_mach_voucher_pred != -1)
        dispatch_once_f_VARIANT_armv81(&_voucher_task_mach_voucher_pred, 0, _voucher_task_mach_voucher_init_VARIANT_armv81);
      v15 = 0;
      mach_voucher_VARIANT_armv81 = _voucher_task_mach_voucher;
      goto LABEL_31;
    }
    v15 = 0;
    goto LABEL_25;
  }
  if (!*(_QWORD *)(v9 + 16))
  {
    v66 = v13;
    v54 = v9;
    LOBYTE(v9) = (_BYTE)a5;
    v64 = v8;
    v62 = *(_QWORD *)(v8 + 120);
    *(_DWORD *)(v62 + 24) = *(_DWORD *)(v10 + 8);
    if ((_dispatch_unote_register_VARIANT_armv81(v62, -4, 0x2000000u) & 1) != 0)
    {
LABEL_124:
      LOBYTE(a5) = v9;
      v9 = v54;
      LODWORD(v13) = v66;
      v8 = v64;
      goto LABEL_21;
    }
LABEL_131:
    _dispatch_bug(1743, 0);
    goto LABEL_124;
  }
LABEL_21:
  if ((*(_BYTE *)(v9 + 30) & 1) != 0)
    return 0;
  v21 = v12 | 0x81;
  if (!v11)
    goto LABEL_23;
LABEL_16:
  v22 = *(_QWORD *)(v11 + 48);
  if (!v22)
  {
    v15 = 0;
    v16 = 0;
    if ((*(_BYTE *)(v10 + 2) & 0x1F) != 0)
      goto LABEL_36;
    goto LABEL_27;
  }
  *((_QWORD *)&v73[0] + 1) = 59821818;
  *(_QWORD *)&v73[1] = v22;
  *(_OWORD *)((char *)&v73[1] + 8) = *(_OWORD *)(v11 + 56);
  LODWORD(v73[0]) = 40;
  v15 = 32;
  if ((*(_BYTE *)(v10 + 2) & 0x1F) != 0)
  {
LABEL_25:
    v16 = 0;
    goto LABEL_36;
  }
LABEL_27:
  v67 = v21;
  v24 = v13;
  v70 = v9;
  v25 = (char)a5;
  mach_voucher_VARIANT_armv81 = _voucher_get_mach_voucher_VARIANT_armv81(v11);
LABEL_31:
  v16 = 0;
  if (mach_voucher_VARIANT_armv81)
  {
    v27 = *(_DWORD *)v10;
    LOBYTE(a5) = v25;
    LODWORD(v13) = v24;
    v21 = v67;
    if ((*(_DWORD *)v10 & 0x1F0000) == 0)
    {
      *(_DWORD *)(v10 + 16) = mach_voucher_VARIANT_armv81;
      *(_DWORD *)v10 = v27 | 0x130000;
      v16 = 1;
    }
    v9 = v70;
  }
  else
  {
    LOBYTE(a5) = v25;
    v9 = v70;
    LODWORD(v13) = v24;
    v21 = v67;
  }
LABEL_36:
  if (v6 >= 5)
    v28 = 5;
  else
    v28 = v6;
  if (v28)
  {
    v17 = v21 | 0x30;
    if (!(_DWORD)v13)
      goto LABEL_42;
    goto LABEL_41;
  }
  v17 = v21 | 0x10;
  if ((_DWORD)v13)
LABEL_41:
    v17 |= (4 * *(_WORD *)(v8 + 116)) & 0x200;
LABEL_42:
  v71 = v9;
  v68 = v14;
  if ((v5 & 4) != 0)
  {
    if (*(_BYTE *)(a3 + 30))
    {
      v29 = v15;
      v30 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      if ((_DWORD)v13 == *(_DWORD *)(v30 + 64))
      {
        v31 = v16;
        v32 = v17;
        v33 = (char)a5;
        *(_QWORD *)(v30 + 64) = 0;
LABEL_49:
        v34 = v13;
        _dispatch_mach_reply_waiter_register_0(v8, a3, v13, (_QWORD *)a2);
        LOBYTE(v17) = v32;
        v15 = v29;
        goto LABEL_50;
      }
    }
    else
    {
      v29 = v15;
    }
    v31 = v16;
    v32 = v17;
    v33 = (char)a5;
    goto LABEL_49;
  }
  v31 = v16;
  v34 = v13;
  v33 = (char)a5;
LABEL_50:
  v35 = *(_DWORD *)(v10 + 4);
  v74 = (unint64_t)v10;
  *(_QWORD *)&v75 = v35;
  v36 = v73[0];
  if (!v15)
    v36 = 0;
  *((_QWORD *)&v75 + 1) = v73;
  *(_QWORD *)&v76 = 0;
  *((_QWORD *)&v76 + 1) = v36;
  v65 = v17;
  v37 = mach_msg2_internal();
  v23 = v37;
  if ((v5 & 4) != 0 && v37)
    _dispatch_mach_reply_unregister_0((_QWORD *)v8, (const char *)a3, 36);
  LOBYTE(a5) = v33;
  v9 = v71;
  LODWORD(v13) = v34;
  if (!v31)
  {
LABEL_67:
    if (v23 == 268435460)
    {
      v23 = 268435460;
      v12 = v69;
      v14 = v68;
      if ((v65 & 0x10) != 0)
      {
        if (*(_DWORD *)(v10 + 8) == -1)
        {
          *(_DWORD *)v10 = *(_DWORD *)v10 & 0xFFFFFFE0 | 0x13;
          if ((v65 & 0x80) == 0)
            goto LABEL_71;
        }
        else if ((v65 & 0x80) == 0)
        {
LABEL_71:
          v44 = 0;
          v45 = *(_WORD *)(v8 + 118) | 1;
LABEL_72:
          *(_WORD *)(v8 + 118) = v45;
          return v44;
        }
        _dispatch_mach_notification_set_armed_VARIANT_mp(v9);
        return 0;
      }
    }
    else
    {
      v12 = v69;
      v14 = v68;
    }
LABEL_74:
    if (!(v5 & 4 | v23))
    {
      if ((_DWORD)v13)
      {
        v46 = *(_QWORD *)(v8 + 88);
        if (!*(_QWORD *)(v46 + 16) || *(_DWORD *)(v46 + 24) != (_DWORD)v13)
        {
          v47 = (char)a5;
          _dispatch_mach_reply_kevent_register_0(v8, v13, (_QWORD *)a2);
          LOBYTE(a5) = v47;
        }
      }
    }
    if (v12 != 18 && *(_QWORD *)(v9 + 48) == a2 && *(_QWORD *)(v9 + 16))
    {
      v58 = (char)a5;
      _dispatch_unote_unregister_VARIANT_armv81(*(_QWORD *)(v8 + 120), 5);
      LOBYTE(a5) = v58;
      *(_DWORD *)(*(_QWORD *)(v8 + 120) + 24) = 0;
      if (!v23)
        goto LABEL_83;
    }
    else if (!v23)
    {
LABEL_83:
      v48 = 0;
      reply_disconnected_0 = 0;
      goto LABEL_84;
    }
    if ((*(_WORD *)(v8 + 116) & 0x10) != 0)
    {
      v59 = (char)a5;
      if (*(_QWORD *)(a2 + 32))
      {
        v60 = (*((uint64_t (**)(void))_dispatch_mach_xpc_hooks + 2))();
        if (v60)
          v48 = v60;
        else
          v48 = v8;
LABEL_119:
        if (v48)
          v61 = 12;
        else
          v61 = 7;
        reply_disconnected_0 = _dispatch_mach_msg_create_reply_disconnected_0((_QWORD *)a2, a3, v61);
        LOBYTE(a5) = v59;
LABEL_84:
        *v14 = v23;
        if ((a5 & 8) != 0 && (v5 & 1) != 0)
        {
          v44 = 3;
          if (!reply_disconnected_0)
            return v44;
        }
        else
        {
          _dispatch_mach_handle_or_push_received_msg_0(v8, a2, 0);
          v44 = 1;
          if (!reply_disconnected_0)
            return v44;
        }
        if (v48)
        {
          v50 = _dispatch_mach_msg_async_reply_wrap_0(reply_disconnected_0, v8);
          v51 = __clz(__rbit32((*(_DWORD *)(reply_disconnected_0 + 56) >> 8) & 0x3FFF));
          if (((*(_DWORD *)(reply_disconnected_0 + 56) >> 8) & 0x3FFF) != 0)
            v52 = v51 + 1;
          else
            v52 = 0;
          (*(void (**)(unint64_t, _QWORD *, uint64_t))(*(_QWORD *)v48 + 88))(v48, v50, v52);
        }
        else
        {
          _dispatch_mach_handle_or_push_received_msg_0(v8, reply_disconnected_0, 0);
        }
        return v44;
      }
    }
    else
    {
      v59 = (char)a5;
    }
    v48 = 0;
    goto LABEL_119;
  }
  v39 = *(_DWORD *)(v10 + 16);
  if (v23 != 268435461 || !v39)
  {
    v40 = *(_DWORD *)v10;
    v41 = HIWORD(*(_DWORD *)v10) & 0x1F;
    v42 = v41 == 17 || v41 == 19;
    if (v42 && v39)
    {
      if (v41 == 17)
      {
        v43 = (char)a5;
        _voucher_dealloc_mach_voucher_VARIANT_mp(v39);
        LODWORD(v13) = v34;
        LOBYTE(a5) = v43;
        v9 = v71;
        v40 = *(_DWORD *)v10;
      }
      *(_DWORD *)(v10 + 16) = 0;
      *(_DWORD *)v10 = v40 & 0xFFE0FFFF;
    }
    goto LABEL_67;
  }
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Voucher port corruption";
  qword_1EDF52D38 = 268435461;
  __break(1u);
LABEL_126:
  result = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 64);
  if (!result)
    return 0;
  add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(result + 12), 0xFFFFFFFF, memory_order_relaxed);
  if (add_explicit > 1)
  {
LABEL_128:
    v44 = 0;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 64) = 0;
    return v44;
  }
  if (add_explicit == 1)
  {
    _voucher_xref_dispose_VARIANT_armv81(result, v38);
    goto LABEL_128;
  }
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
  __break(1u);
  return result;
}

void _dispatch_mach_push_send_barrier_drain_0(uint64_t a1, unsigned int a2)
{
  unint64_t StatusReg;
  _QWORD *v5;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_QWORD **)(StatusReg + 176);
  if (v5)
    *(_QWORD *)(StatusReg + 176) = v5[2];
  else
    v5 = _dispatch_continuation_alloc_from_heap_VARIANT_armv81();
  v5[4] = 0;
  v5[5] = 0;
  v5[3] = -1;
  *v5 = &unk_1E1E879F8;
  v5[1] = -1;
  _dispatch_lane_push_VARIANT_armv81(a1, v5, a2);
}

uint64_t _dispatch_mach_reply_waiter_register_0(uint64_t result, uint64_t a2, int a3, _QWORD *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  atomic_uint *v8;
  unint64_t StatusReg;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;

  *(_QWORD *)(a2 + 8) = ~result;
  *(_BYTE *)(a2 + 28) = -8;
  *(_DWORD *)(a2 + 24) = a3;
  if (!*(_BYTE *)(a2 + 30))
  {
    v5 = a4[8];
    if (v5)
    {
      if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 12), 1u, memory_order_relaxed) <= 0)
      {
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
        __break(1u);
        return result;
      }
      *(_QWORD *)(a2 + 56) = v5;
    }
    *(_DWORD *)(a2 + 40) = a4[7];
    *(_QWORD *)(a2 + 48) = a4[4];
  }
  v6 = 0;
  v7 = *(_QWORD *)(result + 120);
  v8 = (atomic_uint *)(v7 + 40);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v7 + 40), (unsigned int *)&v6, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
  if (v6)
    result = _dispatch_unfair_lock_lock_slow_VARIANT_armv81(v7 + 40);
  v12 = *(_QWORD *)(v7 + 56);
  v11 = (_QWORD *)(v7 + 56);
  v10 = v12;
  *(_QWORD *)(a2 + 64) = v12;
  if (v12)
    *(_QWORD *)(v10 + 72) = a2 + 64;
  *v11 = a2;
  *(_QWORD *)(a2 + 72) = v11;
  v13 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  v14 = atomic_exchange_explicit(v8, 0, memory_order_release);
  if (v14 != v13)
    return _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)v8, v14);
  return result;
}

void _dispatch_mach_reply_kevent_register_0(unint64_t a1, unsigned int a2, _QWORD *a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  int v12;
  int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  atomic_uint *v21;
  unint64_t StatusReg;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;

  v5 = _dispatch_unote_create_with_handle_VARIANT_armv81((uint64_t)&_dispatch_mach_type_reply_VARIANT_armv81, a2, 0);
  v6 = (uint64_t)v5;
  *((_QWORD *)v5 + 1) = ~a1;
  v7 = a3[8];
  if (v7)
  {
    if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 12), 1u, memory_order_relaxed) <= 0)
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
      __break(1u);
LABEL_45:
      v28 = *(_QWORD *)(v7 + 16) & 0xFFFFFFFFFFFFFFFCLL;
      v13 = (int *)(a1 + 84);
      goto LABEL_21;
    }
    *((_QWORD *)v5 + 7) = v7;
  }
  v8 = 0;
  *((_DWORD *)v5 + 10) = a3[7];
  v9 = a3[4];
  *(_QWORD *)(v6 + 48) = v9;
  v10 = *(_WORD *)(a1 + 116);
  if ((v10 & 0x10) != 0 && v9)
  {
    v11 = (*((uint64_t (**)(void))_dispatch_mach_xpc_hooks + 2))();
    if (v11)
      v8 = v11;
    else
      v8 = a1;
    v10 = *(_WORD *)(a1 + 116);
  }
  if ((v10 & 0x80) != 0)
    *(_DWORD *)(v6 + 32) |= 0x200u;
  v28 = 0;
  if (!v8 || v8 == a1)
  {
    v7 = *(_QWORD *)(a1 + 88);
    if (*(_QWORD *)(v7 + 16) >= 4uLL)
      goto LABEL_45;
  }
  if ((*(_BYTE *)(*(_QWORD *)v8 + 42) & 1) == 0)
  {
    v12 = _dispatch_queue_compute_priority_and_wlh_VARIANT_armv81(v8, (uint64_t *)&v28);
    if (v12)
      goto LABEL_22;
    v28 = -4;
    goto LABEL_20;
  }
  v28 = -4;
  v12 = 0x2000000;
  if (v8 >= (unint64_t)&_dispatch_root_queues && v8 < (unint64_t)&_dispatch_queue_serial_numbers)
  {
LABEL_20:
    v13 = (int *)(v8 + 84);
LABEL_21:
    v12 = *v13;
  }
LABEL_22:
  v14 = *((_DWORD *)a3 + 14);
  v15 = (__clz(__rbit32((v14 >> 8) & 0x3FFF)) << 8) + 256;
  if (((v14 >> 8) & 0x3FFF) == 0)
    v15 = 0;
  v16 = v15 & 0xFFFFFF00 | *((_DWORD *)a3 + 14);
  v17 = v12 & 0x80000000;
  if ((v12 & 0xFFF) != 0)
  {
    if ((v12 & 0xFFFu) > v16)
      v16 = v12 & 0xFFF;
    goto LABEL_30;
  }
  if ((unsigned __int16)v12 >> 12 && v16)
  {
LABEL_30:
    v18 = v16 | v17;
    goto LABEL_31;
  }
  if (!((unsigned __int16)v12 >> 12) || v16)
  {
    v28 = -4;
    v18 = 0x2000000;
  }
  else
  {
    v18 = v17 | ((unsigned __int16)v12 >> 12 << 8) | 0xFF;
  }
LABEL_31:
  v19 = 0;
  v20 = *(_QWORD *)(a1 + 120);
  v21 = (atomic_uint *)(v20 + 40);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v20 + 40), (unsigned int *)&v19, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
  if (v19)
    _dispatch_unfair_lock_lock_slow_VARIANT_armv81(v20 + 40);
  v25 = *(_QWORD *)(v20 + 56);
  v24 = (uint64_t *)(v20 + 56);
  v23 = v25;
  *(_QWORD *)(v6 + 64) = v25;
  if (v25)
    *(_QWORD *)(v23 + 72) = v6 + 64;
  *v24 = v6;
  *(_QWORD *)(v6 + 72) = v24;
  v26 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  v27 = atomic_exchange_explicit(v21, 0, memory_order_release);
  if (v27 != v26)
    _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)v21, v27);
  if ((_dispatch_unote_register_VARIANT_armv81(v6, v28, v18) & 1) == 0)
    _dispatch_mach_reply_unregister_0((_QWORD *)a1, (const char *)v6, 52);
}

_QWORD *_dispatch_mach_msg_async_reply_wrap_0(uint64_t a1, uint64_t a2)
{
  unint64_t StatusReg;
  _QWORD *result;

  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  result = *(_QWORD **)(StatusReg + 176);
  if (result)
    *(_QWORD *)(StatusReg + 176) = result[2];
  else
    result = _dispatch_continuation_alloc_from_heap_VARIANT_armv81();
  result[6] = a1;
  result[7] = a2;
  *result = &unk_1E1E87AD0;
  result[1] = -1;
  result[3] = -1;
  return result;
}

void _dispatch_mach_send_push_and_trydrain_0(atomic_uint *a1, unint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5;
  unint64_t StatusReg;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  atomic_ullong *v13;
  atomic_ullong v14;
  unint64_t v15;
  atomic_ullong v16;
  unint64_t v17;
  atomic_ullong v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int add_explicit;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v5 = *((_QWORD *)a1 + 15);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_QWORD *)(StatusReg + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(StatusReg + 976) = v5 + 72;
  v8 = atomic_exchange_explicit((atomic_ullong *volatile)(v5 + 72), a2, memory_order_release);
  if (v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = (unint64_t *)(v8 + 16);
  }
  else
  {
    if (a1[2] != 0x7FFFFFFF && (int)atomic_fetch_add_explicit(a1 + 2, 2u, memory_order_relaxed) <= 0)
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
LABEL_55:
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
      goto LABEL_56;
    }
    v11 = (unint64_t *)(v5 + 80);
    v10 = 3;
    v9 = 0xA000000000;
  }
  *v11 = a2;
  *(_QWORD *)(StatusReg + 976) = 0;
  if (*(_DWORD *)(v5 + 88) || (a1[20] & 0x10000000) != 0)
  {
    v23 = *(_QWORD *)(v5 + 64);
    v24 = a3 << 32;
    do
    {
      v25 = v23;
      if ((v23 & 0x700000000) >= v24)
        v26 = v23;
      else
        v26 = v24 | v23 & 0xFFFFFFF0FFFFFFFFLL | 0x2800000000;
      v27 = v26 | v9;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v5 + 64), &v23, v27, memory_order_release, memory_order_relaxed);
    }
    while (v23 != v25);
    if (((v27 ^ v25) & 0x8000000000) != 0)
      v28 = v10 & 2;
    else
      v28 = v10;
    (*(void (**)(atomic_uint *, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a3, v28);
    return;
  }
  v12 = v7 & 0xFFFFFFFC;
  v13 = (atomic_ullong *)(v5 + 64);
  if (!v8)
  {
    v18 = *v13;
    v19 = a3 << 32;
    do
    {
      v16 = v18;
      if ((v18 & 0x700000000uLL) >= v19)
        v20 = v18;
      else
        v20 = v19 | v18 & 0xFFFFFFF0FFFFFFFFLL | 0x2800000000;
      v21 = v20 | v9;
      if ((v18 & 0x10FFFFFFFFLL) == 0)
        v21 = v21 & 0xFFFFFFC7FFFFFFFFLL | v12;
      atomic_compare_exchange_strong(v13, (unint64_t *)&v18, v21);
    }
    while (v18 != v16);
    if (((v21 ^ v16) & 0x8000000000) != 0)
      v10 &= 2u;
    else
      v10 = v10;
LABEL_26:
    if (v16 >= 4)
    {
      if ((v16 & 0x700000000uLL) < a3 << 32)
        _pthread_workqueue_override_start_direct_check_owner();
      if ((v10 & 1) == 0)
        return;
      if (a1[2] == 0x7FFFFFFF)
        return;
      add_explicit = atomic_fetch_add_explicit(a1 + 2, 0xFFFFFFFE, memory_order_release);
      if (add_explicit > 2)
        return;
      if (add_explicit == 2)
      {
        _os_object_dispose(a1, (const char *)a2);
        return;
      }
LABEL_56:
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
      return;
    }
    if ((v16 & 0x1000000000) != 0)
    {
      (*(void (**)(atomic_uint *, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a3, v10);
      return;
    }
    if ((_DWORD)v10 && *(_QWORD *)(v5 + 80) == a2)
    {
      if ((v10 & 1) != 0)
      {
LABEL_31:
        if (a1[2] == 0x7FFFFFFF || (int)atomic_fetch_add_explicit(a1 + 2, 0xFFFFFFFE, memory_order_release) > 2)
          goto LABEL_33;
        goto LABEL_55;
      }
    }
    else
    {
      a4 &= ~8u;
      if ((v10 & 1) != 0)
        goto LABEL_31;
    }
LABEL_33:
    _dispatch_mach_send_drain_0(a1, 0, a4);
    return;
  }
  v14 = *v13;
  v15 = a3 << 32;
  while (1)
  {
    v16 = v14;
    if ((v14 & 0x700000000uLL) >= v15 || (v14 & 0xFFFFFFD0FFFFFFFFLL | v15 | 0x2800000000) == v14)
      break;
    v17 = v14 & 0xFFFFFFC0FFFFFFFFLL | v15 & 0xFFFFFFC7FFFFFFFFLL | v12;
    if ((v14 & 0x10FFFFFFFFLL) != 0)
      v17 = v14 & 0xFFFFFFD0FFFFFFFFLL | v15 | 0x2800000000;
    atomic_compare_exchange_strong_explicit(v13, (unint64_t *)&v14, v17, memory_order_acquire, memory_order_acquire);
    if (v14 == v16)
      goto LABEL_26;
  }
}

void _dispatch_mach_handle_wlh_change_0(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_fetch_or_explicit((atomic_uint *volatile)(a1 + 80), 0x8000000u, memory_order_relaxed);
  if ((v1 & 0x400000) != 0)
  {
    if ((v1 & 0x8000000) == 0)
    {
      if ((*(_WORD *)(a1 + 116) & 0x10) != 0)
        _dispatch_bug_deprecated("Changing target queue hierarchy after xpc connection was activated");
      else
        _dispatch_bug_deprecated("Changing target queue hierarchy after mach channel was connected");
    }
  }
  else
  {
    if ((*(_WORD *)(a1 + 116) & 0x10) == 0)
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Changing target queue hierarchy after mach channel was connected";
      __break(1u);
    }
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Changing target queue hierarchy after xpc connection was activated";
    __break(1u);
  }
}

void _dispatch_mach_cancel_0(uint64_t a1)
{
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  if (*(_DWORD *)(*(_QWORD *)(a1 + 120) + 88))
    v2 = 0;
  else
    v2 = (*(unsigned __int16 *)(a1 + 118) >> 1) & 1;
  if ((*(_DWORD *)(a1 + 80) & 0x40000000) != 0)
    v3 = 1;
  else
    v3 = 3;
  v4 = *(_QWORD *)(a1 + 128);
  if (v4)
    v2 &= _dispatch_unote_unregister_VARIANT_armv81(v4, v3);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_DWORD *)(v5 + 24);
  if (v6)
  {
    if (!_dispatch_unote_unregister_VARIANT_armv81(*(_QWORD *)(a1 + 88), v3))
      goto LABEL_12;
    v7 = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_mach_msg, 112);
    *(_QWORD *)(v7 + 16) = -1985229329;
    *(_QWORD *)(v7 + 24) = &unk_1ECCEA080;
    *(_DWORD *)(v7 + 72) = 0;
    *(_QWORD *)(v7 + 80) = 24;
    *(_DWORD *)(v7 + 100) = v6;
    *(_DWORD *)(v7 + 48) = -117964793;
    _dispatch_mach_handle_or_push_received_msg_0(a1, v7, 0);
    *(_DWORD *)(v5 + 24) = 0;
    if ((v2 & 1) == 0)
      goto LABEL_12;
  }
  else if (!v2)
  {
LABEL_12:
    atomic_fetch_or_explicit((atomic_uint *volatile)(a1 + 80), 0x40000000u, memory_order_relaxed);
    return;
  }
  v8 = *(_DWORD *)(a1 + 80);
  do
  {
    v9 = v8;
    v10 = v8 & 0x3FFFFFFF | 0x80000000;
    if (v10 == v8)
      break;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 80), &v8, v10, memory_order_relaxed, memory_order_relaxed);
  }
  while (v8 != v9);
  if ((v9 & 0xA0000000) != 0)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupt channel state";
    qword_1EDF52D38 = v9;
    __break(1u);
LABEL_22:
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
    __break(1u);
    return;
  }
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 0xFFFFFFFF, memory_order_release) <= 1)
  {
    goto LABEL_22;
  }
}

_QWORD *dispatch_assert_queue_V2_VARIANT_armv81(_QWORD *result)
{
  uint64_t v1;
  unint64_t StatusReg;
  _QWORD *v3;
  _BOOL4 v4;
  BOOL v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if ((unint64_t)*(unsigned __int8 *)(*result + 40) - 19 <= 0xFFFFFFFFFFFFFFFDLL)
    dispatch_assert_queue_V2_VARIANT_armv81_cold_1(*(unsigned __int8 *)(*result + 40));
  v1 = result[7];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (((v1 ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) != 0)
  {
    v3 = *(_QWORD **)(StatusReg + 160);
    v4 = v3 == 0;
    if (v3)
      v5 = v3 == result;
    else
      v5 = 1;
    if (v5)
    {
LABEL_21:
      if (v4)
        _dispatch_assert_queue_fail(result, 1);
      return result;
    }
    v6 = *(_QWORD **)(StatusReg + 168);
    while (1)
    {
      v7 = (_QWORD *)v3[3];
      if (v6)
      {
        if (!v7)
        {
          v7 = (_QWORD *)*v6;
LABEL_15:
          v6 = (_QWORD *)v6[1];
          goto LABEL_16;
        }
        if (v3 == (_QWORD *)*v6)
          goto LABEL_15;
      }
LABEL_16:
      v4 = v7 == 0;
      if (v7)
        v8 = v7 == result;
      else
        v8 = 1;
      v3 = v7;
      if (v8)
        goto LABEL_21;
    }
  }
  return result;
}

_QWORD *dispatch_assert_queue_not_V2_VARIANT_armv81(_QWORD *result)
{
  uint64_t v1;
  unint64_t StatusReg;
  _QWORD *v3;
  BOOL v4;
  BOOL v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if ((unint64_t)*(unsigned __int8 *)(*result + 40) - 19 <= 0xFFFFFFFFFFFFFFFDLL)
    dispatch_assert_queue_not_V2_VARIANT_armv81_cold_1(*(unsigned __int8 *)(*result + 40));
  v1 = result[7];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (((v1 ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) == 0)
    goto LABEL_20;
  v3 = *(_QWORD **)(StatusReg + 160);
  v4 = v3 == 0;
  if (v3)
    v5 = v3 == result;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = *(_QWORD **)(StatusReg + 168);
    do
    {
      v7 = (_QWORD *)v3[3];
      if (v6)
      {
        if (!v7)
        {
          v7 = (_QWORD *)*v6;
LABEL_13:
          v6 = (_QWORD *)v6[1];
          goto LABEL_14;
        }
        if (v3 == (_QWORD *)*v6)
          goto LABEL_13;
      }
LABEL_14:
      v4 = v7 == 0;
      if (v7)
        v8 = v7 == result;
      else
        v8 = 1;
      v3 = v7;
    }
    while (!v8);
  }
  if (!v4)
LABEL_20:
    _dispatch_assert_queue_fail(result, 0);
  return result;
}

_QWORD *dispatch_assert_queue_barrier_VARIANT_armv81(uint64_t a1)
{
  _QWORD *result;

  result = dispatch_assert_queue_V2_VARIANT_armv81((_QWORD *)a1);
  if (*(_WORD *)(a1 + 80) != 1 && (!*(_QWORD *)(a1 + 24) || (*(_QWORD *)(a1 + 56) & 0x40000000000000) == 0))
    _dispatch_assert_queue_barrier_fail((_QWORD *)a1);
  return result;
}

void _dispatch_set_priority_and_mach_voucher_slow_VARIANT_armv81(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t StatusReg;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = a1;
  if (!a1 || (StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)), v4 = *(_QWORD *)(StatusReg + 32), v4 == a1))
  {
    v5 = 0;
    goto LABEL_11;
  }
  if ((v4 & 0x1000000) != 0)
  {
    v7 = *(_QWORD *)(StatusReg + 200) & 0x80000000;
    v6 = 16;
  }
  else
  {
    v6 = 0;
    v7 = *(_QWORD *)(StatusReg + 32) & 0x88000000;
  }
  v8 = v7 | a1;
  if (((LODWORD(qword_1ECCE9BB8[0]) ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) == 0)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Changing the QoS while on the manager queue";
    qword_1EDF52D38 = v8;
    __break(1u);
LABEL_23:
    _dispatch_bug(206, (int)a1);
    return;
  }
  if ((a1 & 0x2000000) != 0)
  {
    v4 = v8;
    qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Cannot raise oneself to manager";
    qword_1EDF52D38 = v8;
    __break(1u);
    goto LABEL_25;
  }
  if ((v4 & 0x2000000) != 0)
  {
LABEL_25:
    qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Cannot turn a manager thread into a normal one";
    qword_1EDF52D38 = v4;
    __break(1u);
    return;
  }
  v5 = v6 | ((v4 & 0xFFFFFF) != 0);
  v2 = v8;
LABEL_11:
  if (a2 == -1)
    v9 = v5;
  else
    v9 = v5 | 2;
  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  if (v10 && (*(_BYTE *)(v10 + 45) & 2) != 0)
    _dispatch_event_loop_drain_VARIANT_armv81(1);
  if (v9)
  {
    LODWORD(a1) = _pthread_set_properties_self();
    if ((_DWORD)a1 == 22)
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: _pthread_set_properties_self failed";
      qword_1EDF52D38 = v2;
      __break(1u);
    }
    if ((_DWORD)a1)
      goto LABEL_23;
  }
}

void _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t StatusReg;
  uint64_t v5;
  int v6;
  int v7;
  int add_explicit;

  if (a2 == -1)
    goto LABEL_8;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_QWORD *)(StatusReg + 224);
  if ((a3 & 2) == 0 || v5 != a2)
  {
    if (a2
      && (a3 & 4) == 0
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 12), 1u, memory_order_relaxed) <= 0)
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
      __break(1u);
LABEL_31:
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
      __break(1u);
      return;
    }
    if (v5 == a2)
    {
      v6 = -1;
      v5 = a2;
      goto LABEL_21;
    }
    *(_QWORD *)(StatusReg + 224) = a2;
    if (a2)
    {
      v6 = *(_DWORD *)(a2 + 32);
      if (v5)
      {
LABEL_15:
        v7 = *(_DWORD *)(v5 + 32);
        goto LABEL_19;
      }
    }
    else
    {
      v6 = 0;
      if (v5)
        goto LABEL_15;
    }
    v7 = 0;
LABEL_19:
    if (v6 == v7)
      v6 = -1;
    goto LABEL_21;
  }
  v6 = -1;
  v5 = -1;
  if (a2
    && (a3 & 4) != 0
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
    __break(1u);
LABEL_8:
    v6 = -1;
    v5 = -1;
  }
LABEL_21:
  if ((a3 & 8) == 0)
    _dispatch_set_priority_and_mach_voucher_slow_VARIANT_armv81(a1, v6);
  if (v5 != -1 && (a3 & 2) != 0)
  {
    if (v5)
    {
      add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 12), 0xFFFFFFFF, memory_order_relaxed);
      if (add_explicit <= 1)
      {
        if (add_explicit == 1)
        {
          _voucher_xref_dispose_VARIANT_armv81(v5, (const char *)a2);
          return;
        }
        goto LABEL_31;
      }
    }
  }
}

void _dispatch_async_redirect_invoke_0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *StatusReg;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  BOOL v37;
  __int128 v38;

  v5 = *(_DWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  if (v5)
    v9 = a3 & 0xFCFFFFFF | v5;
  else
    v9 = a3;
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v12 = (__int128 *)(StatusReg + 20);
  v11 = StatusReg[20];
  if (v6)
  {
    v13 = StatusReg[25];
    v14 = *(_DWORD *)(v6 + 84);
    v15 = v14 & 0xFFF0FFFF | ((WORD1(v13) & 0xF) << 16);
    StatusReg[20] = v6;
    v16 = *(_DWORD *)(v7 + 84);
    if (v15)
    {
      if ((v16 & 0xFFF) != 0)
      {
        v17 = v14 & 0x88000000 | ((WORD1(v13) & 0xF) << 16) & 0x880F0000;
        v18 = v14 & 0xFFF;
        if (v18 <= (*(_DWORD *)(v7 + 84) & 0xFFFu))
          v18 = *(_DWORD *)(v7 + 84) & 0xFFF;
LABEL_13:
        if ((unsigned __int16)v16 >> 12 <= v18 >> 8)
          v19 = 0x40000000;
        else
          v19 = 1140912128;
        v20 = v17 | v18 | v19 & v16;
        goto LABEL_24;
      }
      if ((v14 & 0xFFF) != 0)
        v21 = v15 | 0x40000000;
      else
        v21 = v14 & 0xFFF0FFFF | ((WORD1(v13) & 0xF) << 16);
      goto LABEL_22;
    }
LABEL_55:
    v20 = v16 & 0xFFF0FFFF;
    goto LABEL_24;
  }
  v16 = *(_DWORD *)(v7 + 84);
  v13 = StatusReg[25];
  if (!(_DWORD)v13)
    goto LABEL_55;
  v18 = *(_DWORD *)(v7 + 84) & 0xFFF;
  if ((v16 & 0xFFF) != 0)
  {
    v17 = v13 & 0x880F0000;
    if (((unsigned __int16)v13 & 0xFFFu) > v18)
      v18 = v13 & 0xFFF;
    goto LABEL_13;
  }
  v21 = v13 | 0x40000000;
  if ((v13 & 0xFFF) == 0)
    v21 = StatusReg[25];
LABEL_22:
  v22 = (unsigned __int16)v16 >> 12;
  v20 = v21 & 0xFFFF0FFF | v16 & 0x400F000;
  if (v22 <= ((v21 >> 8) & 0xF))
    v20 = v21;
LABEL_24:
  StatusReg[25] = v20;
  v38 = *v12;
  StatusReg[20] = v7;
  StatusReg[21] = &v38;
  v23 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = -1;
  v24 = *(_QWORD *)(a1 + 8);
  if (v24 == -1)
  {
    v31 = 0;
  }
  else
  {
    v25 = StatusReg[25];
    if (((v25 >> 8) & 0xF) != 0)
      v26 = 256 << ((BYTE1(v25) & 0xFu) - 1);
    else
      v26 = 0;
    v27 = v26 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    v28 = v24 & 0xFFFFFF;
    if ((v24 & 0xFFFFFF) != 0)
    {
      v29 = v26 & 0xFFFFFF00;
      if ((v25 & 0x44000000) == 0 && (*(_QWORD *)(a1 + 8) & 0x10000000) == 0)
        v31 = v27;
      else
        v31 = v24 & 0xFFFFFF;
      if (v28 < v29)
        v31 = v27;
    }
    else if ((unsigned __int16)v25 >> 12)
    {
      v31 = (256 << (((unsigned __int16)v25 >> 12) - 1)) | 0xFF;
    }
    else
    {
      v31 = v26 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    }
  }
  v32 = v31 & 0xFFFFFFFF02FFFFFFLL;
  v33 = StatusReg[4];
  if ((v33 & 0x1000000) != 0)
  {
    if (v32)
    {
LABEL_70:
      _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(v32, v23, 6);
      goto LABEL_45;
    }
    v32 = v33 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v32 == (v33 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_41;
  }
  if (v32)
    goto LABEL_70;
LABEL_41:
  if (v23 == -1)
    goto LABEL_45;
  if (StatusReg[28] != v23)
  {
    v32 = 0;
    goto LABEL_70;
  }
  if (v23 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v23 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
    _dispatch_async_redirect_invoke_cold_1();
LABEL_45:
  v34 = StatusReg[22];
  if (v34)
    v35 = *(_DWORD *)(v34 + 8) + 1;
  else
    v35 = 1;
  if (v35 > _dispatch_continuation_cache_limit)
  {
    _dispatch_continuation_pop_VARIANT_armv81(v8, a2, v9, v7);
    _dispatch_continuation_free_to_cache_limit_VARIANT_armv81(a1);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v34;
    *(_DWORD *)(a1 + 8) = v35;
    StatusReg[22] = a1;
    _dispatch_continuation_pop_VARIANT_armv81(v8, a2, v9, v7);
  }
  *v12 = v38;
  if (v6)
    *(_QWORD *)v12 = v11;
  StatusReg[25] = StatusReg[25] & 0xF0000 | v13 & 0xFFF0FFFF;
  v36 = *(_QWORD *)(v7 + 24);
  if (*(_QWORD *)(v36 + 24) && v36 != v11)
  {
    do
    {
      _dispatch_lane_non_barrier_complete_0(v36, 0);
      v36 = *(_QWORD *)(v36 + 24);
      if (*(_QWORD *)(v36 + 24))
        v37 = v36 == v11;
      else
        v37 = 1;
    }
    while (!v37);
  }
  _dispatch_lane_non_barrier_complete_0(v7, 1);
}

void _dispatch_workloop_stealer_invoke_0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  _QWORD *StatusReg;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = -1;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7 == -1)
  {
    v15 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 200);
    if (((v8 >> 8) & 0xF) != 0)
      v9 = 256 << ((BYTE1(v8) & 0xFu) - 1);
    else
      v9 = 0;
    v10 = v9 & 0xFFFFFFFFFFFFFF00 | v8;
    v11 = v7 & 0xFFFFFF;
    if ((v7 & 0xFFFFFF) != 0)
    {
      v12 = v9 & 0xFFFFFF00;
      v13 = v7 & 0x10000000;
      if ((v8 & 0x44000000) == 0 && v13 == 0)
        v15 = v10;
      else
        v15 = v11;
      if (v11 < v12)
        v15 = v10;
    }
    else if ((unsigned __int16)v8 >> 12)
    {
      v15 = (256 << (((unsigned __int16)v8 >> 12) - 1)) | 0xFF;
    }
    else
    {
      v15 = v9 & 0xFFFFFFFFFFFFFF00 | v8;
    }
  }
  v16 = v15 & 0xFFFFFFFF02FFFFFFLL;
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v18 = StatusReg[4];
  if ((v18 & 0x1000000) != 0)
  {
    if (v16)
    {
LABEL_38:
      _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(v16, v6, 6);
      goto LABEL_22;
    }
    v16 = v18 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v16 == (v18 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_18;
  }
  if (v16)
    goto LABEL_38;
LABEL_18:
  if (v6 == -1)
    goto LABEL_22;
  if (StatusReg[28] != v6)
  {
    v16 = 0;
    goto LABEL_38;
  }
  if (v6 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
    _dispatch_async_redirect_invoke_cold_1();
LABEL_22:
  v19 = StatusReg[22];
  if (v19)
    v20 = *(_DWORD *)(v19 + 8) + 1;
  else
    v20 = 1;
  v21 = a1;
  if (v20 <= _dispatch_continuation_cache_limit)
  {
    v21 = 0;
    *(_QWORD *)(a1 + 16) = v19;
    *(_DWORD *)(a1 + 8) = v20;
    StatusReg[22] = a1;
  }
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 48) + 64))(*(_QWORD *)(a1 + 48), a2, a3 | 1u);
  if (v21)
    _dispatch_continuation_free_to_cache_limit_VARIANT_armv81(v21);
}

void _dispatch_queue_override_invoke_0(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  _QWORD *StatusReg;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;

  v5 = (uint64_t)a1;
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = StatusReg[20];
  v9 = a1[6];
  v8 = a1[7];
  v10 = StatusReg[25];
  StatusReg[25] = *(_DWORD *)(v8 + 84) & 0xFFF0FFFF | ((WORD1(v10) & 0xF) << 16);
  StatusReg[20] = v8;
  v11 = a1[1];
  v20 = *(_QWORD *)(*a1 + 40) == 1792;
  v12 = a1[3];
  a1[3] = -1;
  v13 = v20;
  if (v11 == -1)
  {
    v21 = 0;
  }
  else
  {
    v14 = StatusReg[25];
    if (((v14 >> 8) & 0xF) != 0)
      v15 = 256 << ((BYTE1(v14) & 0xFu) - 1);
    else
      v15 = 0;
    v16 = v15 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    v17 = v11 & 0xFFFFFF;
    if ((v11 & 0xFFFFFF) != 0)
    {
      v18 = v15 & 0xFFFFFF00;
      v19 = v11 & 0x10000000;
      v20 = (v14 & 0x44000000) == 0 && v19 == 0;
      if (v20)
        v21 = v16;
      else
        v21 = v17;
      if (v17 < v18)
        v21 = v16;
    }
    else if ((unsigned __int16)v14 >> 12)
    {
      v21 = (256 << (((unsigned __int16)v14 >> 12) - 1)) | 0xFF;
    }
    else
    {
      v21 = v15 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    }
  }
  v22 = v21 & 0xFFFFFFFF02FFFFFFLL;
  v23 = StatusReg[4];
  if ((v23 & 0x1000000) != 0)
  {
    if (v22)
    {
LABEL_68:
      _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(v22, v12, 6);
      goto LABEL_25;
    }
    v22 = v23 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v22 == (v23 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_21;
  }
  if (v22)
    goto LABEL_68;
LABEL_21:
  if (v12 == -1)
    goto LABEL_25;
  if (StatusReg[28] != v12)
  {
    v22 = 0;
    goto LABEL_68;
  }
  if (v12 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
    _dispatch_async_redirect_invoke_cold_1();
LABEL_25:
  v24 = StatusReg[22];
  if (v24)
    v25 = *(_DWORD *)(v24 + 8) + 1;
  else
    v25 = 1;
  if (v25 <= _dispatch_continuation_cache_limit)
  {
    *(_QWORD *)(v5 + 16) = v24;
    *(_DWORD *)(v5 + 8) = v25;
    StatusReg[22] = v5;
    v5 = 0;
  }
  v26 = *(_QWORD *)v9;
  if (*(_QWORD *)v9 < 0x1000uLL)
  {
    if ((a3 & 0x1000000) != 0)
    {
      v27 = (void *)MEMORY[0x18D766D94]();
      v26 = *(_QWORD *)v9;
    }
    else
    {
      v27 = 0;
    }
    v28 = *(_QWORD *)(v9 + 24);
    if ((v26 & 4) != 0)
      *(_QWORD *)(v9 + 24) = -1;
    v29 = v26 & 4;
    v30 = *(_QWORD *)(v9 + 8);
    if (v30 == -1)
    {
      v33 = 0;
    }
    else
    {
      v31 = StatusReg[25];
      if (((v31 >> 8) & 0xF) != 0)
        v32 = 256 << ((BYTE1(v31) & 0xFu) - 1);
      else
        v32 = 0;
      v33 = v32 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
      if ((v30 & 0xFFFFFF) != 0)
      {
        if ((v30 & 0xFFFFFFuLL) >= (v32 & 0xFFFFFF00)
          && ((v31 & 0x44000000) != 0 || (*(_QWORD *)(v9 + 8) & 0x10000000) != 0))
        {
          v33 = v30 & 0xFFFFFF;
        }
      }
      else if ((unsigned __int16)v31 >> 12)
      {
        v33 = (256 << (((unsigned __int16)v31 >> 12) - 1)) | 0xFF;
      }
    }
    v35 = v33 & 0xFFFFFFFF02FFFFFFLL;
    v36 = StatusReg[4];
    if ((v36 & 0x1000000) != 0)
    {
      if (v35)
        goto LABEL_78;
      v35 = v36 & 0xFFFFFFFFFEFFFFFFLL;
    }
    else if (v35 == (v36 & 0xFFFFFFFF77FFFFFFLL))
    {
LABEL_54:
      if (v28 == -1)
        goto LABEL_79;
      if (StatusReg[28] == v28)
      {
        if ((v26 & 4) != 0 && v28)
        {
          if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v28 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
            _dispatch_async_redirect_invoke_cold_1();
LABEL_80:
          v37 = StatusReg[22];
          if (v37)
            v38 = *(_DWORD *)(v37 + 8) + 1;
          else
            v38 = 1;
          v29 = v9;
          if (v38 <= _dispatch_continuation_cache_limit)
          {
            v29 = 0;
            *(_QWORD *)(v9 + 16) = v37;
            *(_DWORD *)(v9 + 8) = v38;
            StatusReg[22] = v9;
          }
LABEL_85:
          if ((v26 & 8) != 0)
          {
            v39 = *(_QWORD *)(v9 + 48);
            v40 = *(_QWORD *)(*(_QWORD *)v39 + 40);
            if (v40 != 514)
              _dispatch_queue_override_invoke_cold_1(v40);
            _dispatch_client_callout(*(_QWORD *)(v9 + 40), *(uint64_t (**)(void))(v9 + 32));
            dispatch_group_leave_VARIANT_armv81(v39);
            if (!v29)
            {
LABEL_87:
              if (!v27)
                goto LABEL_89;
              goto LABEL_88;
            }
          }
          else
          {
            _dispatch_client_callout(*(_QWORD *)(v9 + 40), *(uint64_t (**)(void))(v9 + 32));
            if (!v29)
              goto LABEL_87;
          }
          _dispatch_continuation_free_to_cache_limit_VARIANT_armv81(v29);
          if (!v27)
            goto LABEL_89;
LABEL_88:
          objc_autoreleasePoolPop(v27);
          goto LABEL_89;
        }
LABEL_79:
        if ((v26 & 4) == 0)
          goto LABEL_85;
        goto LABEL_80;
      }
      v35 = 0;
LABEL_78:
      _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(v35, v28, v29 | 2);
      goto LABEL_79;
    }
    if (v35)
      goto LABEL_78;
    goto LABEL_54;
  }
  if (*(_QWORD *)(v26 + 40) == 1)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v26 + 48))(v9, 0, (a3 >> 21) & 1);
  else
    (*(void (**)(uint64_t, uint64_t, _QWORD))(v26 + 64))(v9, a2, v13 | a3);
LABEL_89:
  if (v5)
    _dispatch_continuation_free_to_cache_limit_VARIANT_armv81(v5);
  StatusReg[25] = StatusReg[25] & 0xF0000 | v10 & 0xFFF0FFFF;
  StatusReg[20] = v7;
}

void _dispatch_continuation_free_to_cache_limit_VARIANT_armv81(uint64_t a1)
{
  unint64_t StatusReg;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;

  _dispatch_continuation_free_to_heap_VARIANT_armv81(a1);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v2 = *(_QWORD *)(StatusReg + 176);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 8);
    if (v3 - _dispatch_continuation_cache_limit >= 1)
    {
      v4 = _dispatch_continuation_cache_limit - v3 + 1;
      do
      {
        v5 = v2;
        v2 = *(_QWORD *)(v2 + 16);
        _dispatch_continuation_free_to_heap_VARIANT_armv81(v5);
        if (!v4)
          break;
        ++v4;
      }
      while (v2);
      *(_QWORD *)(StatusReg + 176) = v2;
    }
  }
}

void _dispatch_continuation_pop_VARIANT_armv81(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  _QWORD *StatusReg;
  void (**v9)(uint64_t);
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v19;
  uint64_t add_explicit;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v9 = (void (**)(uint64_t))StatusReg[24];
  if (v9)
    (*v9)(a4);
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 >= 0x1000uLL)
  {
    if (*(_QWORD *)(v10 + 40) == 1)
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v10 + 48))(a1, 0, (a3 >> 21) & 1);
    else
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v10 + 64))(a1, a2, a3 & 0xFFFF0000);
    goto LABEL_52;
  }
  if ((a3 & 0x1000000) != 0)
  {
    v11 = (void *)MEMORY[0x18D766D94]();
    v10 = *(_QWORD *)a1;
  }
  else
  {
    v11 = 0;
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v10 & 4) != 0)
    *(_QWORD *)(a1 + 24) = -1;
  v13 = v10 & 4;
  v14 = *(_QWORD *)(a1 + 8);
  if (v14 == -1)
  {
    v17 = 0;
  }
  else
  {
    v15 = StatusReg[25];
    if (((v15 >> 8) & 0xF) != 0)
      v16 = 256 << ((BYTE1(v15) & 0xFu) - 1);
    else
      v16 = 0;
    v17 = v16 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    if ((v14 & 0xFFFFFF) != 0)
    {
      if ((v14 & 0xFFFFFFuLL) >= (v16 & 0xFFFFFF00)
        && ((v15 & 0x44000000) != 0 || (*(_QWORD *)(a1 + 8) & 0x10000000) != 0))
      {
        v17 = v14 & 0xFFFFFF;
      }
    }
    else if ((unsigned __int16)v15 >> 12)
    {
      v17 = (256 << (((unsigned __int16)v15 >> 12) - 1)) | 0xFF;
    }
  }
  v19 = v17 & 0xFFFFFFFF02FFFFFFLL;
  add_explicit = StatusReg[4];
  if ((add_explicit & 0x1000000) != 0)
    goto LABEL_33;
  if (v19 != (add_explicit & 0xFFFFFFFF77FFFFFFLL))
    goto LABEL_35;
  while (v12 != -1)
  {
    if (StatusReg[28] != v12)
    {
      v19 = 0;
LABEL_41:
      _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(v19, v12, v13 | 2);
      break;
    }
    if ((v10 & 4) == 0 || !v12)
      break;
    add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 12), 0xFFFFFFFF, memory_order_relaxed);
    if ((int)add_explicit > 1)
      goto LABEL_43;
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
    __break(1u);
LABEL_33:
    if (!v19)
    {
      v19 = add_explicit & 0xFFFFFFFFFEFFFFFFLL;
LABEL_35:
      if (!v19)
        continue;
    }
    goto LABEL_41;
  }
  if ((v10 & 4) == 0)
    goto LABEL_48;
LABEL_43:
  v21 = StatusReg[22];
  if (v21)
    v22 = *(_DWORD *)(v21 + 8) + 1;
  else
    v22 = 1;
  v13 = a1;
  if (v22 <= _dispatch_continuation_cache_limit)
  {
    v13 = 0;
    *(_QWORD *)(a1 + 16) = v21;
    *(_DWORD *)(a1 + 8) = v22;
    StatusReg[22] = a1;
  }
LABEL_48:
  if ((v10 & 8) != 0)
  {
    v23 = *(_QWORD *)(a1 + 48);
    v24 = *(_QWORD *)(*(_QWORD *)v23 + 40);
    if (v24 != 514)
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected object type";
      qword_1EDF52D38 = v24;
      __break(1u);
      return;
    }
    _dispatch_client_callout(*(_QWORD *)(a1 + 40), *(uint64_t (**)(void))(a1 + 32));
    dispatch_group_leave_VARIANT_armv81(v23);
    if (!v13)
    {
LABEL_50:
      if (!v11)
        goto LABEL_52;
      goto LABEL_51;
    }
  }
  else
  {
    _dispatch_client_callout(*(_QWORD *)(a1 + 40), *(uint64_t (**)(void))(a1 + 32));
    if (!v13)
      goto LABEL_50;
  }
  _dispatch_continuation_free_to_cache_limit_VARIANT_armv81(v13);
  if (v11)
LABEL_51:
    objc_autoreleasePoolPop(v11);
LABEL_52:
  if (v9)
    v9[1](a4);
}

void *dispatch_block_create_VARIANT_armv81(uint64_t a1, void *aBlock, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  if ((a1 & 0xFFFFFF00) != 0)
    return 0;
  v10 = a1 | 0x40000000;
  if ((a1 & 0xA) == 0)
    v10 = a1;
  if ((v10 & 0x20) != 0)
    v11 = v10 & 0xFFFFFFFFFFFFFFEFLL;
  else
    v11 = v10;
  if ((v11 & 0x80000000) != 0)
  {
    v13 = 0;
    v12 = v11;
    goto LABEL_16;
  }
  if ((v11 & 2) != 0)
  {
    v13 = 0;
    v12 = v11 | 0x80000000;
    goto LABEL_16;
  }
  if ((v11 & 0x40) != 0)
  {
    v12 = v11 | 0x80000000;
    v13 = -1;
    goto LABEL_16;
  }
  if ((v11 & 4) != 0)
  {
    v12 = v11 | 0x80000000;
    v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
LABEL_16:
    v14 = 0;
    if ((v11 & 4) == 0 || (v12 & 0x40000000) != 0)
    {
      v11 = v12;
    }
    else
    {
      v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) & 0xFFFFFFLL;
      if (v15 >= 0x10FF)
        v14 = 4351;
      else
        v14 = v15;
      v11 = v12 | 0x40000000;
    }
    return _dispatch_block_create(v11, v13, v14, aBlock, a5, a6, a7, a8);
  }
  v13 = 0;
  v14 = 0;
  return _dispatch_block_create(v11, v13, v14, aBlock, a5, a6, a7, a8);
}

void *dispatch_block_create_with_qos_class_VARIANT_armv81(uint64_t a1, unsigned int a2, unsigned int a3, void *a4)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;

  if ((a1 & 0xFFFFFF00) != 0 || a2 > 0x21 || ((1 << a2) & 0x202220221) == 0 || a3 != 0 && a3 < 0xFFFFFFF1)
    return 0;
  v5 = a1;
  v6 = a1 | 0x40000000;
  v7 = _pthread_qos_class_encode();
  v12 = 0;
  if ((v5 & 0x20) != 0)
    v13 = v6 & 0xFFFFFFFFFFFFFFEFLL;
  else
    v13 = v6;
  v14 = v13;
  if ((v13 & 0x80000000) != 0)
  {
LABEL_15:
    if ((v13 & 4) == 0)
      goto LABEL_22;
LABEL_16:
    if ((v14 & 0x40000000) == 0)
    {
      v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) & 0xFFFFFFLL;
      if (v16 >= 0x10FF)
        v7 = 4351;
      else
        v7 = v16;
      v13 = v14 | 0x40000000;
      return _dispatch_block_create(v13, v12, v7, a4, v8, v9, v10, v11);
    }
    goto LABEL_22;
  }
  if ((v13 & 2) != 0)
  {
    v12 = 0;
    v14 = v13 | 0x80000000;
    goto LABEL_15;
  }
  if ((v13 & 0x40) == 0)
  {
    if ((v13 & 4) == 0)
    {
      v12 = 0;
      return _dispatch_block_create(v13, v12, v7, a4, v8, v9, v10, v11);
    }
    v14 = v13 | 0x80000000;
    v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
    goto LABEL_16;
  }
  v14 = v13 | 0x80000000;
  v12 = -1;
  if ((v13 & 4) != 0)
    goto LABEL_16;
LABEL_22:
  v13 = v14;
  return _dispatch_block_create(v13, v12, v7, a4, v8, v9, v10, v11);
}

void *dispatch_block_create_with_voucher_VARIANT_armv81(uint64_t a1, uint64_t a2, void *aBlock, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if ((a1 & 0xFFFFFF00) != 0)
    return 0;
  v10 = 3221225472;
  if ((a1 & 0xA) == 0)
    v10 = 0x80000000;
  if ((a1 & 0x20) != 0)
    v11 = v10 & 0xFFFFFFFFFFFFFFEFLL | a1 & 0xFFFFFFFF7FFFFFAFLL;
  else
    v11 = v10 | a1 & 0xFFFFFFFF7FFFFFBFLL;
  if (a2 == -3)
    a2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if ((v11 & 0x40000004) == 4)
  {
    v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) & 0xFFFFFFLL;
    if (v12 >= 0x10FF)
      v13 = 4351;
    else
      v13 = v12;
    v11 |= 0x40000000uLL;
  }
  else
  {
    v13 = 0;
  }
  return _dispatch_block_create(v11, a2, v13, aBlock, a5, a6, a7, a8);
}

void *dispatch_block_create_with_voucher_and_qos_class_VARIANT_armv81(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, void *a5)
{
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  if ((a1 & 0xFFFFFF00) != 0 || a3 > 0x21 || ((1 << a3) & 0x202220221) == 0 || a4 != 0 && a4 < 0xFFFFFFF1)
    return 0;
  v7 = a1;
  v8 = a1 & 0xFFFFFFFF3FFFFFB7 | 0xC0000000;
  v9 = _pthread_qos_class_encode();
  if ((v7 & 0x20) != 0)
    v14 = v8 & 0xFFFFFFFFFFFFFFEFLL;
  else
    v14 = v8;
  if (a2 == -3)
    a2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  return _dispatch_block_create(v14, a2, v9, a5, v10, v11, v12, v13);
}

void dispatch_block_perform_VARIANT_armv81(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((a1 & 0xFFFFFF00) != 0)
    dispatch_block_perform_VARIANT_armv81_cold_1(a1);
  v2 = a1 | 0x40000000;
  if ((a1 & 0xA) == 0)
    v2 = a1;
  if ((v2 & 0x20) != 0)
    v2 &= ~0x10uLL;
  v4[0] = 3512316172;
  v4[1] = v2 | ((unint64_t)(v2 & 2) << 30);
  v5 = 8;
  v6 = 0;
  if ((v2 & 2) != 0)
    v3 = 0;
  else
    v3 = -1;
  v7 = 0;
  v8 = v3;
  v11 = 0;
  v12 = 0;
  v9 = a2;
  v10 = 0;
  _dispatch_block_invoke_direct_VARIANT_armv81((uint64_t)v4);
}

void _dispatch_block_sync_invoke_VARIANT_armv81(uint64_t a1, const char *a2)
{
  atomic_uint *v3;
  int v4;
  uint64_t v5;
  _QWORD *StatusReg;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int add_explicit;
  uint64_t v17;

  v3 = *(atomic_uint **)(a1 + 32);
  if (v3 != (atomic_uint *)3512316172)
    _dispatch_block_sync_invoke_VARIANT_mp_cold_5((uint64_t)v3);
  v4 = *(_DWORD *)(a1 + 48);
  if ((v4 & 4) != 0)
    _dispatch_block_invoke_direct_VARIANT_mp_cold_3(*(_DWORD *)(a1 + 48));
  if ((v4 & 1) != 0)
  {
LABEL_21:
    if ((v4 & 8) != 0)
      goto LABEL_24;
    goto LABEL_22;
  }
  if ((*(_QWORD *)(a1 + 40) & 0x80000000) == 0)
  {
    v5 = -1;
    goto LABEL_16;
  }
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = StatusReg[25];
  v8 = 256 << ((BYTE1(v7) & 0xFu) - 1);
  if (((v7 >> 8) & 0xF) == 0)
    v8 = 0;
  v9 = (unsigned __int16)v7 >> 12 == 0;
  v5 = *(_QWORD *)(a1 + 64);
  v10 = v8 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
  v11 = (256 << (((v7 >> 12) & 0xF) - 1)) | 0xFF;
  if (v9)
    v11 = v10;
  v12 = v11 & 0xFFFFFFFF02FFFFFFLL;
  v13 = StatusReg[4];
  if ((v13 & 0x1000000) != 0)
  {
    if (v12)
    {
LABEL_43:
      _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(v12, *(_QWORD *)(a1 + 64), 0);
      v5 = v17;
      goto LABEL_16;
    }
    v12 = v13 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v12 == (v13 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_12;
  }
  if (v12)
    goto LABEL_43;
LABEL_12:
  if (v5 == -1)
    goto LABEL_16;
  if (StatusReg[28] != v5)
  {
    v12 = 0;
    goto LABEL_43;
  }
  if (v5 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 12), 1u, memory_order_relaxed) <= 0)
    dispatch_group_notify_VARIANT_mp_cold_3();
LABEL_16:
  v3 = (atomic_uint *)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  v14 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v15 = *(_QWORD *)(v14 + 32);
  if ((v15 & 0x1000000) == 0 || (v3 = (atomic_uint *)(v15 & 0xFFFFFFFFFEFFFFFFLL), (v15 & 0xFFFFFFFFFEFFFFFFLL) == 0))
  {
    if (v5 == -1)
      goto LABEL_21;
    if (*(_QWORD *)(v14 + 224) == v5)
    {
      if (v5 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
        _dispatch_async_redirect_invoke_cold_1();
      goto LABEL_21;
    }
    v3 = 0;
  }
  _dispatch_set_priority_and_voucher_slow_VARIANT_armv81((uint64_t)v3, v5, 6);
  if ((v4 & 8) != 0)
    goto LABEL_24;
LABEL_22:
  if (!atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 52), 1u, memory_order_relaxed))
    v3 = (atomic_uint *)dispatch_group_leave_VARIANT_armv81(*(_QWORD *)(a1 + 80));
LABEL_24:
  __swp(v3, (unsigned int *)(a1 + 88));
  if (v3)
  {
    if (v3[2] != 0x7FFFFFFF)
    {
      add_explicit = atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFE, memory_order_release);
      if (add_explicit <= 2)
      {
        if (add_explicit != 2)
          _os_object_allows_weak_reference_VARIANT_mp_cold_1();
        _os_object_dispose(v3, a2);
      }
    }
  }
}

uint64_t dispatch_block_cancel_VARIANT_armv81(uint64_t result)
{
  if (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(result + 16) != ___dispatch_block_create_block_invoke)
    dispatch_block_cancel_VARIANT_armv81_cold_2();
  if (*(_QWORD *)(result + 32) != 3512316172)
    _dispatch_block_sync_invoke_VARIANT_mp_cold_5(*(_QWORD *)(result + 32));
  atomic_fetch_or_explicit((atomic_uint *volatile)(result + 48), 1u, memory_order_relaxed);
  return result;
}

uint64_t dispatch_block_testcancel_VARIANT_armv81(uint64_t a1)
{
  if (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 16) != ___dispatch_block_create_block_invoke)
    dispatch_block_testcancel_VARIANT_armv81_cold_2();
  if (*(_QWORD *)(a1 + 32) != 3512316172)
    _dispatch_block_sync_invoke_VARIANT_mp_cold_5(*(_QWORD *)(a1 + 32));
  return *(_DWORD *)(a1 + 48) & 1;
}

uint64_t dispatch_block_wait_VARIANT_armv81(uint64_t a1, int64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  atomic_uint *v14;

  if (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 16) != ___dispatch_block_create_block_invoke)
    dispatch_block_wait_VARIANT_armv81_cold_4();
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 != 3512316172)
    _dispatch_block_sync_invoke_VARIANT_mp_cold_5(v4);
  v5 = atomic_fetch_or_explicit((atomic_uint *volatile)(a1 + 48), 2u, memory_order_relaxed);
  if ((v5 & 6) != 0)
    dispatch_block_wait_VARIANT_mp_cold_2(v5);
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
  __swp(v2, (unsigned int *)(a1 + 88));
  if (v2)
  {
    v8 = __clz(__rbit32((v7 >> 8) & 0x3FFF));
    if (((v7 >> 8) & 0x3FFF) != 0)
      v9 = v8 + 1;
    else
      v9 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 80))(v2, v9, 9);
  }
  v10 = *(_DWORD *)(a1 + 96);
  if (v10)
  {
    _pthread_qos_override_start_direct();
    v11 = v2 == 0;
  }
  else
  {
    v11 = 1;
  }
  v12 = *(_DWORD *)(a1 + 52);
  if (!v11 || v12 >= 2)
    dispatch_block_wait_VARIANT_mp_cold_1(v12);
  v13 = dispatch_group_wait_VARIANT_armv81(*(_QWORD *)(a1 + 80), a2);
  if (v10)
    _pthread_qos_override_end_direct();
  v14 = (atomic_uint *)(a1 + 48);
  if (v13)
    atomic_fetch_and_explicit(v14, 0xFFFFFFFD, memory_order_relaxed);
  else
    atomic_fetch_or_explicit(v14, 4u, memory_order_relaxed);
  return v13;
}

void *dispatch_block_notify_VARIANT_armv81(uint64_t a1, atomic_uint *a2, uint64_t (**a3)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  if (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 16) != ___dispatch_block_create_block_invoke)
    dispatch_block_notify_VARIANT_armv81_cold_3(a1);
  if (*(_QWORD *)(a1 + 32) != 3512316172)
    _dispatch_block_sync_invoke_VARIANT_mp_cold_5(*(_QWORD *)(a1 + 32));
  if (*(int *)(a1 + 52) >= 2)
    dispatch_block_notify_VARIANT_mp_cold_1(*(_DWORD *)(a1 + 52));
  return dispatch_group_notify_VARIANT_armv81(*(_QWORD *)(a1 + 80), a2, a3);
}

uint64_t *_dispatch_continuation_init_slow_VARIANT_armv81(uint64_t *result, atomic_uint *a2, int a3)
{
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int add_explicit;
  BOOL v13;
  uint64_t v14;
  int v15;
  void (*v16)(char *);
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;

  v5 = result;
  v6 = result[5];
  if (*(uint64_t (**)())(v6 + 16) == ___dispatch_block_create_block_invoke)
  {
    v9 = *(_QWORD *)(v6 + 32);
    v7 = (_QWORD *)(v6 + 32);
    v8 = v9;
    if (v9 != 3512316172)
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption of dispatch block object";
      qword_1EDF52D38 = v8;
      __break(1u);
      goto LABEL_42;
    }
  }
  else
  {
    v7 = 0;
  }
  v10 = v7[1];
  v11 = *result;
  if (a2[2] != 0x7FFFFFFF)
  {
    add_explicit = atomic_fetch_add_explicit(a2 + 2, 2u, memory_order_relaxed);
    v13 = add_explicit == 0;
    if (add_explicit <= 0)
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
      goto LABEL_38;
    }
  }
  v14 = 0;
  atomic_compare_exchange_strong_explicit(v7 + 7, (unint64_t *)&v14, (unint64_t)a2, memory_order_relaxed, memory_order_relaxed);
  if (v14)
  {
    if (a2[2] != 0x7FFFFFFF)
    {
      v15 = atomic_fetch_add_explicit(a2 + 2, 0xFFFFFFFE, memory_order_release);
      v13 = v15 == 2;
      if (v15 <= 2)
      {
LABEL_38:
        if (v13)
        {
          _os_object_dispose(a2, (const char *)a2);
          goto LABEL_9;
        }
LABEL_42:
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
        return result;
      }
    }
  }
LABEL_9:
  v16 = _dispatch_block_async_invoke_and_release_0;
  if ((v11 & 4) == 0)
    v16 = _dispatch_block_async_invoke_0;
  v5[4] = (uint64_t)v16;
  v17 = v10 | a3;
  if ((v10 & 0x40000000) != 0)
  {
    v18 = v7[3];
LABEL_16:
    v19 = v18 & 0xFFFFFF;
    if (!v19)
      goto LABEL_25;
    goto LABEL_17;
  }
  if ((v17 & 0x40000000) != 0)
  {
    v19 = 0;
    goto LABEL_25;
  }
  v18 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
  if ((unsigned __int16)(v18 >> 8) <= 0x10uLL)
    goto LABEL_16;
  v19 = 4351;
LABEL_17:
  if ((v17 & 0x20) != 0)
  {
    v19 |= 0x10000000uLL;
  }
  else
  {
    v20 = (a2[21] >> 30) & 1;
    if ((a2[21] & 0xFFF) == 0)
      v20 = 1;
    if (!v20)
      v19 = 0;
  }
LABEL_25:
  v5[1] = v19;
  if ((v10 & 0x80000000) == 0)
  {
    if ((v17 & 0x40) != 0)
      goto LABEL_33;
    v21 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
    if (!v21 || (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v21 + 12), 1u, memory_order_relaxed) > 0)
      goto LABEL_34;
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
  v21 = v7[4];
  if ((unint64_t)(v21 + 1) < 2
    || (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v21 + 12), 1u, memory_order_relaxed) > 0)
  {
    goto LABEL_34;
  }
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
  __break(1u);
LABEL_33:
  v21 = 0;
LABEL_34:
  v5[3] = v21;
  *v5 = v11 | (2 * (v10 & 1)) | 0x20;
  v22 = __clz(__rbit32((*((_DWORD *)v5 + 2) >> 8) & 0x3FFF));
  if (((*((_DWORD *)v5 + 2) >> 8) & 0x3FFF) != 0)
    return (uint64_t *)(v22 + 1);
  else
    return 0;
}

void _dispatch_block_async_invoke_and_release_0(char *a1)
{
  _dispatch_block_async_invoke2_0(a1, (const char *)1);
}

void _dispatch_block_async_invoke_0(char *a1)
{
  _dispatch_block_async_invoke2_0(a1, 0);
}

_DWORD *dispatch_barrier_async_f_VARIANT_armv81(_DWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *StatusReg;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = (_QWORD *)StatusReg[22];
  if (!v5)
    return (_DWORD *)_dispatch_async_f_slow_0(result, a2, a3, 0, 6);
  StatusReg[22] = v5[2];
  *v5 = 262;
  v5[4] = a3;
  v5[5] = a2;
  v6 = StatusReg[4] & 0xFFFFFFLL;
  if (v6 >= 0x10FF)
    v6 = 4351;
  v7 = StatusReg[28];
  if (v7 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 12), 1u, memory_order_relaxed) <= 0)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
  else
  {
    v5[3] = v7;
    if (v6)
    {
      v8 = result[21];
      if ((v8 & 0x40000000) == 0 && (v8 & 0xFFF) != 0)
        v6 = 0;
    }
    v5[1] = v6;
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 88))(result);
  }
  return result;
}

uint64_t _dispatch_async_f_slow_0(_DWORD *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  _QWORD *v10;
  unint64_t StatusReg;
  unint64_t v12;
  uint64_t v13;
  int v14;

  v10 = _dispatch_continuation_alloc_from_heap_VARIANT_armv81();
  *v10 = a5 | 0x100;
  v10[4] = a3;
  v10[5] = a2;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v12 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
  if (v12 >= 0x10FF)
    v12 = 4351;
  if ((a4 & 0x40) != 0)
    goto LABEL_7;
  v13 = *(_QWORD *)(StatusReg + 224);
  if (v13 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 12), 1u, memory_order_relaxed) <= 0)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
LABEL_7:
    v13 = 0;
  }
  v10[3] = v13;
  if (v12)
  {
    if ((a4 & 0x20) != 0)
    {
      v12 |= 0x10000000uLL;
    }
    else
    {
      v14 = a1[21];
      if ((v14 & 0x40000000) == 0 && (v14 & 0xFFF) != 0)
        v12 = 0;
    }
  }
  v10[1] = v12;
  return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 88))(a1);
}

uint64_t _dispatch_barrier_async_detached_f_VARIANT_armv81(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t StatusReg;
  _QWORD *v7;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_QWORD **)(StatusReg + 176);
  if (v7)
    *(_QWORD *)(StatusReg + 176) = v7[2];
  else
    v7 = _dispatch_continuation_alloc_from_heap_VARIANT_armv81();
  v7[4] = a3;
  v7[5] = a2;
  v7[3] = -1;
  *(_OWORD *)v7 = xmmword_18A06E590;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
}

uint64_t dispatch_barrier_async_VARIANT_armv81(atomic_uint *a1, uint64_t (**aBlock)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  _QWORD *StatusReg;
  uint64_t *v5;
  void *v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v8;
  uint64_t v9;
  atomic_uint v10;
  uint64_t *inited;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = (uint64_t *)StatusReg[22];
  if (v5)
    StatusReg[22] = v5[2];
  else
    v5 = (uint64_t *)_dispatch_continuation_alloc_from_heap_VARIANT_armv81();
  v6 = _dispatch_Block_copy(aBlock);
  v7 = aBlock[2];
  *v5 = 278;
  if (v7 == ___dispatch_block_create_block_invoke)
  {
    v5[5] = (uint64_t)v6;
    inited = _dispatch_continuation_init_slow_VARIANT_armv81(v5, a1, 0);
  }
  else
  {
    v5[4] = (uint64_t)_dispatch_call_block_and_release;
    v5[5] = (uint64_t)v6;
    v8 = StatusReg[4] & 0xFFFFFFLL;
    if (v8 >= 0x10FF)
      v8 = 4351;
    v9 = StatusReg[28];
    if (v9 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 12), 1u, memory_order_relaxed) <= 0)
      dispatch_group_notify_VARIANT_mp_cold_3();
    v5[3] = v9;
    if (v8)
    {
      v10 = a1[21];
      if ((v10 & 0x40000000) != 0 || (v10 & 0xFFF) == 0)
      {
        inited = (uint64_t *)(__clz(__rbit32(v8 >> 8)) + 1);
      }
      else
      {
        inited = 0;
        v8 = 0;
      }
    }
    else
    {
      inited = 0;
    }
    v5[1] = v8;
  }
  return (*(uint64_t (**)(atomic_uint *, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 88))(a1, v5, inited);
}

_DWORD *dispatch_async_f_VARIANT_armv81(_DWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *StatusReg;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = (_QWORD *)StatusReg[22];
  if (!v5)
    return (_DWORD *)_dispatch_async_f_slow_0(result, a2, a3, 0, 4);
  StatusReg[22] = v5[2];
  *v5 = 260;
  v5[4] = a3;
  v5[5] = a2;
  v6 = StatusReg[4] & 0xFFFFFFLL;
  if (v6 >= 0x10FF)
    v6 = 4351;
  v7 = StatusReg[28];
  if (v7 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 12), 1u, memory_order_relaxed) <= 0)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
  else
  {
    v5[3] = v7;
    if (v6)
    {
      v8 = result[21];
      if ((v8 & 0x40000000) == 0 && (v8 & 0xFFF) != 0)
        v6 = 0;
    }
    v5[1] = v6;
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 88))(result);
  }
  return result;
}

_DWORD *dispatch_async_enforce_qos_class_f_VARIANT_armv81(_DWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *StatusReg;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = (_QWORD *)StatusReg[22];
  if (!v5)
    return (_DWORD *)_dispatch_async_f_slow_0(result, a2, a3, 32, 4);
  StatusReg[22] = v5[2];
  *v5 = 260;
  v5[4] = a3;
  v5[5] = a2;
  v6 = StatusReg[4] & 0xFFFFFFLL;
  if (v6 >= 0x10FF)
    v6 = 4351;
  v7 = StatusReg[28];
  if (v7 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 12), 1u, memory_order_relaxed) <= 0)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
  else
  {
    v5[3] = v7;
    if (v6)
      v8 = v6 | 0x10000000;
    else
      v8 = 0;
    v5[1] = v8;
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 88))(result);
  }
  return result;
}

uint64_t dispatch_async_VARIANT_armv81(atomic_uint *a1, uint64_t (**aBlock)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  _QWORD *StatusReg;
  uint64_t *v5;
  void *v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v8;
  uint64_t v9;
  atomic_uint v10;
  uint64_t *inited;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = (uint64_t *)StatusReg[22];
  if (v5)
    StatusReg[22] = v5[2];
  else
    v5 = (uint64_t *)_dispatch_continuation_alloc_from_heap_VARIANT_armv81();
  v6 = _dispatch_Block_copy(aBlock);
  v7 = aBlock[2];
  *v5 = 276;
  if (v7 == ___dispatch_block_create_block_invoke)
  {
    v5[5] = (uint64_t)v6;
    inited = _dispatch_continuation_init_slow_VARIANT_armv81(v5, a1, 0);
  }
  else
  {
    v5[4] = (uint64_t)_dispatch_call_block_and_release;
    v5[5] = (uint64_t)v6;
    v8 = StatusReg[4] & 0xFFFFFFLL;
    if (v8 >= 0x10FF)
      v8 = 4351;
    v9 = StatusReg[28];
    if (v9 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 12), 1u, memory_order_relaxed) <= 0)
      dispatch_group_notify_VARIANT_mp_cold_3();
    v5[3] = v9;
    if (v8)
    {
      v10 = a1[21];
      if ((v10 & 0x40000000) != 0 || (v10 & 0xFFF) == 0)
      {
        inited = (uint64_t *)(__clz(__rbit32(v8 >> 8)) + 1);
      }
      else
      {
        inited = 0;
        v8 = 0;
      }
    }
    else
    {
      inited = 0;
    }
    v5[1] = v8;
  }
  return (*(uint64_t (**)(atomic_uint *, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 88))(a1, v5, inited);
}

atomic_ullong *_dispatch_barrier_trysync_or_async_f_VARIANT_armv81(atomic_ullong *a1, uint64_t a2, uint64_t (*a3)(void), char a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  atomic_ullong v7;
  atomic_ullong v8;
  BOOL v9;

  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  v5 = (unint64_t)*((unsigned __int16 *)a1 + 40) << 41;
  v6 = v4 & 0xFFFFFFFC | ((unint64_t)(a4 & 1) << 58);
  v7 = a1[7];
  do
  {
    if (v7 != (v7 & 0x3000000000) - v5 + 0x20000000000000)
      return (atomic_ullong *)_dispatch_barrier_async_detached_f_VARIANT_armv81((uint64_t)a1, a2, (uint64_t)a3);
    v8 = v7;
    atomic_compare_exchange_strong_explicit(a1 + 7, (unint64_t *)&v8, v7 & 0x3000000000 | v6 | 0x60000000000002, memory_order_acquire, memory_order_acquire);
    v9 = v8 == v7;
    v7 = v8;
  }
  while (!v9);
  if ((a4 & 1) == 0
    || *((_DWORD *)a1 + 2) == 0x7FFFFFFF
    || (int)atomic_fetch_add_explicit((atomic_uint *volatile)a1 + 2, 2u, memory_order_relaxed) > 0)
  {
    return (atomic_ullong *)_dispatch_barrier_trysync_or_async_f_complete_0(a1, a2, a3, a4);
  }
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
  __break(1u);
  return a1;
}

uint64_t _dispatch_barrier_trysync_or_async_f_complete_0(atomic_ullong *a1, uint64_t a2, uint64_t (*a3)(void), char a4)
{
  unint64_t StatusReg;
  uint64_t v7;
  __int128 v9;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v9 = *(_OWORD *)(StatusReg + 160);
  *(_QWORD *)(StatusReg + 160) = a1;
  *(_QWORD *)(StatusReg + 168) = &v9;
  _dispatch_client_callout(a2, a3);
  *(_OWORD *)(StatusReg + 160) = v9;
  v7 = 4;
  if ((a4 & 1) != 0)
  {
    if (atomic_fetch_add_explicit(a1 + 7, 0xFC00000000000000, memory_order_relaxed) >> 55 == 8)
      v7 = 5;
    else
      v7 = 4;
  }
  return (*(uint64_t (**)(atomic_ullong *, _QWORD, uint64_t))(*a1 + 80))(a1, 0, v7);
}

double dispatch_barrier_sync_f_VARIANT_armv81(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  double result;

  if (*(_BYTE *)(*(_QWORD *)a1 + 40) != 17
    || (v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24),
        v4 = *(_DWORD *)(a1 + 80),
        (v4 & 0x1000000) != 0)
    && (v4 = *(_DWORD *)(a1 + 80), (v4 & 0x40000) != 0))
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Queue type doesn't support dispatch_sync";
    __break(1u);
    return _dispatch_sync_recurse_0(a1, a2, a3, 2uLL);
  }
  else
  {
    v5 = (unint64_t)(unsigned __int16)v4 << 41;
    v6 = v3 & 0xFFFFFFFC;
    v7 = *(_QWORD *)(a1 + 56);
    do
    {
      if (v7 != (v7 & 0x3000000000) - v5 + 0x20000000000000)
        return _dispatch_sync_f_slow_0(a1, a2, a3, 2uLL, (atomic_ullong *)a1, 2);
      v8 = v7;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), (unint64_t *)&v8, v6 | v7 & 0x3000000000 | 0x60000000000002, memory_order_acquire, memory_order_acquire);
      v9 = v8 == v7;
      v7 = v8;
    }
    while (!v9);
    if (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24))
      return _dispatch_sync_recurse_0(a1, a2, a3, 2uLL);
    _dispatch_lane_barrier_sync_invoke_and_complete_0(a1, a2, a3);
  }
  return result;
}

double dispatch_sync_f_VARIANT_armv81(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  double result;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (*(_WORD *)(a1 + 80) == 1)
    return _dispatch_barrier_sync_f_0(a1, a2, a3, 0);
  if (*(_BYTE *)(*(_QWORD *)a1 + 40) != 17
    || (*(_DWORD *)(a1 + 80) & 0x1000000) != 0 && (*(_DWORD *)(a1 + 80) & 0x40000) != 0)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Queue type doesn't support dispatch_sync";
    __break(1u);
    return _dispatch_sync_recurse_0(a1, a2, a3, 0);
  }
  else
  {
    if (!*(_QWORD *)(a1 + 48))
    {
      v4 = *(_QWORD *)(a1 + 56);
      while ((v4 & 0xFFC0018000000000) == 0)
      {
        v5 = v4;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), (unint64_t *)&v5, v4 + 0x20000000000, memory_order_relaxed, memory_order_relaxed);
        v6 = v5 == v4;
        v4 = v5;
        if (v6)
        {
          if (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24))
            return _dispatch_sync_recurse_0(a1, a2, a3, 0);
          _dispatch_sync_invoke_and_complete_0(a1, a2, a3);
          return result;
        }
      }
    }
    return _dispatch_sync_f_slow_0(a1, a2, a3, 0, (atomic_ullong *)a1, 0);
  }
}

void dispatch_barrier_sync_VARIANT_armv81(atomic_uint *a1, uint64_t a2)
{
  uint64_t (*v2)(void);

  v2 = *(uint64_t (**)(void))(a2 + 16);
  if ((char *)v2 == (char *)___dispatch_block_create_block_invoke)
    _dispatch_sync_block_with_privdata_0(a1, a2, 18);
  else
    _dispatch_barrier_sync_f_0((uint64_t)a1, a2, v2, 18);
}

void _dispatch_sync_block_with_privdata_0(atomic_uint *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t add_explicit;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BOOL4 v13;
  _BOOL4 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t StatusReg;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;

  if (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 16) == ___dispatch_block_create_block_invoke)
  {
    v6 = (_QWORD *)(a2 + 32);
    add_explicit = *(_QWORD *)(a2 + 32);
    if (add_explicit != 3512316172)
    {
LABEL_56:
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption of dispatch block object";
      qword_1EDF52D38 = add_explicit;
      __break(1u);
      goto LABEL_57;
    }
  }
  else
  {
    v6 = 0;
  }
  v8 = 0;
  v9 = v6[1];
  if ((v9 & 1) != 0)
    v10 = 34;
  else
    v10 = 32;
  if ((v9 & 0x40000000) != 0)
  {
    v11 = 0;
    if ((v6[1] & 0x30) != 0x10)
    {
      v11 = v6[3];
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) & 0xFFFFFFLL;
      v13 = v12 != 0;
      v14 = v12 < (v11 & 0xFFFFFFuLL);
      v8 = v13 && v14 ? v12 : 0;
      if (!v13 || !v14)
        v11 = 0;
    }
    if ((v9 & 0x80000000) == 0)
      goto LABEL_15;
  }
  else
  {
    v11 = 0;
    if ((v9 & 0x80000000) == 0)
    {
LABEL_15:
      v15 = -1;
      goto LABEL_18;
    }
  }
  v15 = v6[4];
LABEL_18:
  v16 = v11 & 0xFFFFFFFF02FFFFFFLL;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v18 = *(_QWORD *)(StatusReg + 32);
  if ((v18 & 0x1000000) != 0)
  {
    if (v16)
    {
LABEL_49:
      _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(v16, v15, 0);
      v15 = v23;
      goto LABEL_24;
    }
    v16 = v18 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v16 == (v18 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_20;
  }
  if (v16)
    goto LABEL_49;
LABEL_20:
  if (v15 == -1)
    goto LABEL_24;
  if (*(_QWORD *)(StatusReg + 224) != v15)
  {
    v16 = 0;
    goto LABEL_49;
  }
  if (v15)
  {
    add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v15 + 12), 1u, memory_order_relaxed);
    if ((int)add_explicit <= 0)
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
      __break(1u);
LABEL_55:
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
      __break(1u);
      goto LABEL_56;
    }
  }
LABEL_24:
  if (a1[2] == 0x7FFFFFFF || (v19 = atomic_fetch_add_explicit(a1 + 2, 2u, memory_order_relaxed), (int)v19 > 0))
  {
    v20 = 0;
    atomic_compare_exchange_strong_explicit(v6 + 7, (unint64_t *)&v20, (unint64_t)a1, memory_order_relaxed, memory_order_relaxed);
    if (v20)
    {
      if (a1[2] != 0x7FFFFFFF)
      {
        v21 = atomic_fetch_add_explicit(a1 + 2, 0xFFFFFFFE, memory_order_release);
        if (v21 <= 2)
        {
          if (v21 != 2)
          {
LABEL_57:
            qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
            __break(1u);
            return;
          }
          _os_object_dispose(a1, (const char *)a2);
        }
      }
    }
    v22 = v10 | a3;
    if (((v10 | a3) & 2) != 0)
      _dispatch_barrier_sync_f_0((uint64_t)a1, a2, (uint64_t (*)(void))_dispatch_block_sync_invoke_VARIANT_armv81, v22);
    else
      _dispatch_sync_f_0((uint64_t)a1, a2, (uint64_t (*)(void))_dispatch_block_sync_invoke_VARIANT_armv81, v22);
    v19 = *(_QWORD *)(StatusReg + 32);
    if ((v19 & 0x1000000) == 0)
    {
      if (v8 == (v19 & 0xFFFFFFFF77FFFFFFLL))
        goto LABEL_34;
      goto LABEL_46;
    }
  }
  else
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
  }
  if (v8)
  {
LABEL_51:
    _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(v8, v15, 6);
    return;
  }
  v8 = v19 & 0xFFFFFFFFFEFFFFFFLL;
LABEL_46:
  if (v8)
    goto LABEL_51;
LABEL_34:
  if (v15 == -1)
    return;
  if (*(_QWORD *)(StatusReg + 224) != v15)
  {
    v8 = 0;
    goto LABEL_51;
  }
  if (v15)
  {
    add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v15 + 12), 0xFFFFFFFF, memory_order_relaxed);
    if ((int)add_explicit <= 1)
      goto LABEL_55;
  }
}

double _dispatch_barrier_sync_f_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  double result;

  if (*(_BYTE *)(*(_QWORD *)a1 + 40) != 17
    || (v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24),
        v5 = *(_DWORD *)(a1 + 80),
        (v5 & 0x1000000) != 0)
    && (v5 = *(_DWORD *)(a1 + 80), (v5 & 0x40000) != 0))
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Queue type doesn't support dispatch_sync";
    __break(1u);
    return _dispatch_sync_recurse_0(a1, a2, a3, a4 | 2);
  }
  else
  {
    v6 = (unint64_t)(unsigned __int16)v5 << 41;
    v7 = v4 & 0xFFFFFFFC;
    v8 = *(_QWORD *)(a1 + 56);
    do
    {
      if (v8 != (v8 & 0x3000000000) - v6 + 0x20000000000000)
        return _dispatch_sync_f_slow_0(a1, a2, a3, 2uLL, (atomic_ullong *)a1, a4 | 2);
      v9 = v8;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), (unint64_t *)&v9, v7 | v8 & 0x3000000000 | 0x60000000000002, memory_order_acquire, memory_order_acquire);
      v10 = v9 == v8;
      v8 = v9;
    }
    while (!v10);
    if (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24))
      return _dispatch_sync_recurse_0(a1, a2, a3, a4 | 2);
    _dispatch_lane_barrier_sync_invoke_and_complete_0(a1, a2, a3);
  }
  return result;
}

void dispatch_sync_VARIANT_armv81(atomic_uint *a1, uint64_t a2)
{
  uint64_t (*v2)(void);

  v2 = *(uint64_t (**)(void))(a2 + 16);
  if ((char *)v2 == (char *)___dispatch_block_create_block_invoke)
    _dispatch_sync_block_with_privdata_0(a1, a2, 16);
  else
    _dispatch_sync_f_0((uint64_t)a1, a2, v2, 0x10uLL);
}

double _dispatch_sync_f_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t a4)
{
  double result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  if (*(_WORD *)(a1 + 80) == 1)
    return _dispatch_barrier_sync_f_0(a1, a2, a3, a4);
  if (*(_BYTE *)(*(_QWORD *)a1 + 40) != 17
    || (*(_DWORD *)(a1 + 80) & 0x1000000) != 0 && (*(_DWORD *)(a1 + 80) & 0x40000) != 0)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Queue type doesn't support dispatch_sync";
    __break(1u);
    return _dispatch_sync_recurse_0(a1, a2, a3, a4);
  }
  else
  {
    if (!*(_QWORD *)(a1 + 48))
    {
      v5 = *(_QWORD *)(a1 + 56);
      while ((v5 & 0xFFC0018000000000) == 0)
      {
        v6 = v5;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), (unint64_t *)&v6, v5 + 0x20000000000, memory_order_relaxed, memory_order_relaxed);
        v7 = v6 == v5;
        v5 = v6;
        if (v7)
        {
          if (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24))
            return _dispatch_sync_recurse_0(a1, a2, a3, a4);
          _dispatch_sync_invoke_and_complete_0(a1, a2, a3);
          return result;
        }
      }
    }
    return _dispatch_sync_f_slow_0(a1, a2, a3, 0, (atomic_ullong *)a1, a4);
  }
}

double dispatch_async_and_wait_f_VARIANT_armv81(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t v3;
  double result;

  if (!*(_QWORD *)(a1 + 24))
    return _dispatch_sync_function_invoke(a1, a2, a3);
  if (*(_WORD *)(a1 + 80) == 1)
    v3 = 130;
  else
    v3 = 128;
  _dispatch_async_and_wait_f_0(a1, a2, (uint64_t)a3, v3);
  return result;
}

void _dispatch_async_and_wait_f_0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t StatusReg;
  uint64_t v5;
  int v6;
  _QWORD v7[12];
  int v8;
  int v9;
  uint64_t v10;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_QWORD *)(StatusReg + 32);
  v6 = *(_DWORD *)(StatusReg + 24);
  v10 = 0;
  v7[0] = a4;
  v7[1] = v5 | 0x10000000;
  v7[2] = 0;
  v7[3] = *(_QWORD *)(StatusReg + 224);
  v7[4] = _dispatch_async_and_wait_invoke_0;
  v7[5] = v7;
  v7[6] = 0;
  v7[7] = a1;
  v7[8] = a3;
  v7[10] = 0;
  v7[11] = 0;
  v7[9] = a2;
  v8 = 0;
  v9 = v6;
  _dispatch_async_and_wait_recurse_0(a1, (uint64_t)v7, v6, a4);
}

double dispatch_barrier_async_and_wait_f_VARIANT_armv81(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  double result;

  if (!*(_QWORD *)(a1 + 24))
    return _dispatch_sync_function_invoke(a1, a2, a3);
  _dispatch_async_and_wait_f_0(a1, a2, (uint64_t)a3, 0x82uLL);
  return result;
}

void dispatch_barrier_async_and_wait_VARIANT_armv81(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 16);
    if (v2 == ___dispatch_block_create_block_invoke)
      _dispatch_async_and_wait_block_with_privdata_0((atomic_uint *)a1, a2, 146);
    else
      _dispatch_async_and_wait_f_0(a1, a2, (uint64_t)v2, 0x92uLL);
  }
  else
  {
    dispatch_barrier_sync_VARIANT_armv81((atomic_uint *)a1, a2);
  }
}

void _dispatch_async_and_wait_block_with_privdata_0(atomic_uint *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  int add_explicit;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  _QWORD v20[12];
  int v21;
  int v22;
  uint64_t v23;

  if (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 16) == ___dispatch_block_create_block_invoke)
  {
    v6 = (_QWORD *)(a2 + 32);
    v7 = *(_QWORD *)(a2 + 32);
    if (v7 != 3512316172)
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption of dispatch block object";
      qword_1EDF52D38 = v7;
      __break(1u);
      goto LABEL_27;
    }
  }
  else
  {
    v6 = 0;
  }
  v8 = v6[1];
  if ((v8 & 0x40000000) == 0
    || (v6[1] & 0x30) == 0x10
    || ((v9 = v6[3], (v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) & 0xFFFFFFLL) != 0)
      ? (v11 = v10 >= (v9 & 0xFFFFFFuLL))
      : (v11 = 1),
        v11))
  {
    v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
  }
  v12 = (uint64_t *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if ((int)v8 < 0)
    v12 = v6 + 4;
  v13 = *v12;
  if (a1[2] != 0x7FFFFFFF)
  {
    add_explicit = atomic_fetch_add_explicit(a1 + 2, 2u, memory_order_relaxed);
    v15 = add_explicit == 0;
    if (add_explicit <= 0)
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
      goto LABEL_23;
    }
  }
  v16 = 0;
  atomic_compare_exchange_strong_explicit(v6 + 7, (unint64_t *)&v16, (unint64_t)a1, memory_order_relaxed, memory_order_relaxed);
  if (v16)
  {
    if (a1[2] != 0x7FFFFFFF)
    {
      v17 = atomic_fetch_add_explicit(a1 + 2, 0xFFFFFFFE, memory_order_release);
      v15 = v17 == 2;
      if (v17 <= 2)
      {
LABEL_23:
        if (v15)
        {
          _os_object_dispose(a1, (const char *)a2);
          goto LABEL_19;
        }
LABEL_27:
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
        return;
      }
    }
  }
LABEL_19:
  v18 = 34;
  if ((v8 & 1) == 0)
    v18 = 32;
  v19 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  v20[0] = v18 | a3;
  v20[1] = v9 | 0x10000000;
  v20[2] = 0;
  v20[3] = v13;
  v20[4] = _dispatch_async_and_wait_invoke_0;
  v20[5] = v20;
  v20[6] = 0;
  v20[7] = a1;
  v20[8] = _dispatch_block_sync_invoke_VARIANT_armv81;
  v20[10] = 0;
  v20[11] = 0;
  v20[9] = a2;
  v21 = 0;
  v22 = v19;
  v23 = 0;
  _dispatch_async_and_wait_recurse_0((uint64_t)a1, (uint64_t)v20, v19, v18 | a3);
}

void dispatch_async_and_wait_VARIANT_armv81(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_WORD *)(a1 + 80) == 1)
      v2 = 146;
    else
      v2 = 144;
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 16);
    if (v3 == ___dispatch_block_create_block_invoke)
      _dispatch_async_and_wait_block_with_privdata_0((atomic_uint *)a1, a2, v2);
    else
      _dispatch_async_and_wait_f_0(a1, a2, (uint64_t)v3, v2);
  }
  else
  {
    dispatch_sync_VARIANT_armv81((atomic_uint *)a1, a2);
  }
}

void dispatch_queue_set_specific_VARIANT_armv81(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  unint64_t StatusReg;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int v20;
  unsigned int v21;

  if (a2)
  {
    v8 = a1[11];
    v9 = *(_QWORD *)(*a1 + 40);
    LODWORD(v10) = v9;
    if (v9 != 17)
      goto LABEL_8;
    v10 = v9 & 0x20000;
    if (v9 != 394769 && v10 != 0)
    {
      do
      {
        qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Queue doesn't support dispatch_queue_set_specific";
        __break(1u);
LABEL_8:
        ;
      }
      while ((_DWORD)v10 != 18);
    }
    if (!a3 || v8)
    {
      if (!v8)
        return;
    }
    else
    {
      _dispatch_queue_init_specific_0((uint64_t)a1);
      v8 = a1[11];
    }
    v12 = 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v8, (unsigned int *)&v12, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
    if (v12)
      _dispatch_unfair_lock_lock_slow_VARIANT_armv81(v8);
    v14 = *(_QWORD **)(v8 + 8);
    if (v14)
    {
      while (*v14 != a2)
      {
        v14 = (_QWORD *)v14[3];
        if (!v14)
          goto LABEL_18;
      }
      v17 = v14[2];
      if (v17)
        _dispatch_barrier_async_detached_f_VARIANT_armv81((uint64_t)&unk_1ECCEA080, v14[1], v17);
      if (a3)
      {
        v14[1] = a3;
        v14[2] = a4;
      }
      else
      {
        v18 = v14[3];
        v19 = (_QWORD *)v14[4];
        if (v18)
        {
          *(_QWORD *)(v18 + 32) = v19;
          v19 = (_QWORD *)v14[4];
        }
        else
        {
          *(_QWORD *)(v8 + 16) = v19;
        }
        *v19 = v18;
        free(v14);
      }
    }
    else
    {
LABEL_18:
      if (a3)
      {
        v15 = _dispatch_calloc(1uLL, 0x28uLL);
        *v15 = a2;
        v15[1] = a3;
        v15[2] = a4;
        v15[3] = 0;
        v16 = *(_QWORD **)(v8 + 16);
        v15[4] = v16;
        *v16 = v15;
        *(_QWORD *)(v8 + 16) = v15 + 3;
      }
    }
    v20 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    v21 = atomic_exchange_explicit((atomic_uint *volatile)v8, 0, memory_order_release);
    if (v21 != v20)
      _dispatch_unfair_lock_unlock_slow_VARIANT_mp(v8, v21);
  }
}

void _dispatch_queue_init_specific_0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = _dispatch_calloc(1uLL, 0x18uLL);
  v3 = 0;
  v2[1] = 0;
  v2[2] = v2 + 1;
  atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 88), (unint64_t *)&v3, (unint64_t)v2, memory_order_release, memory_order_relaxed);
  if (v3)
    _dispatch_queue_specific_head_dispose_0(v2);
}

uint64_t dispatch_queue_get_specific_VARIANT_armv81(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v7;
  int v9;
  unint64_t StatusReg;
  _QWORD *v11;
  unsigned int v12;
  unsigned int v13;

  v2 = a2;
  if (a2)
  {
    v3 = a1[11];
    v4 = *(_QWORD *)(*a1 + 40);
    v5 = v4;
    v7 = (v4 & 0x20000) == 0 || v4 == 394769;
    if (v5 != 17)
      v7 = v5 == 18;
    if (!v7 || v3 == 0)
    {
      return 0;
    }
    else
    {
      v9 = 0;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v3, (unsigned int *)&v9, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
      if (v9)
        _dispatch_unfair_lock_lock_slow_VARIANT_armv81(v3);
      v11 = *(_QWORD **)(v3 + 8);
      if (v11)
      {
        while (*v11 != v2)
        {
          v11 = (_QWORD *)v11[3];
          if (!v11)
            goto LABEL_19;
        }
        v2 = v11[1];
      }
      else
      {
LABEL_19:
        v2 = 0;
      }
      v12 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
      v13 = atomic_exchange_explicit((atomic_uint *volatile)v3, 0, memory_order_release);
      if (v13 != v12)
        _dispatch_unfair_lock_unlock_slow_VARIANT_mp(v3, v13);
    }
  }
  return v2;
}

uint64_t dispatch_get_specific_VARIANT_armv81(uint64_t a1)
{
  uint64_t v1;
  unint64_t StatusReg;
  _QWORD *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v9;
  int v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;

  v1 = 0;
  if (a1)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    for (i = *(_QWORD **)(StatusReg + 160); i; i = (_QWORD *)i[3])
    {
      v5 = i[11];
      v6 = *(_QWORD *)(*i + 40);
      v7 = v6;
      v9 = (v6 & 0x20000) == 0 || v6 == 394769;
      if (v7 != 17)
        v9 = v7 == 18;
      if (!v9 || v5 == 0)
      {
        v1 = 0;
      }
      else
      {
        v11 = 0;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v5, (unsigned int *)&v11, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
        if (v11)
          _dispatch_unfair_lock_lock_slow_VARIANT_armv81(v5);
        v12 = *(_QWORD **)(v5 + 8);
        if (v12)
        {
          while (*v12 != a1)
          {
            v12 = (_QWORD *)v12[3];
            if (!v12)
              goto LABEL_20;
          }
          v1 = v12[1];
        }
        else
        {
LABEL_20:
          v1 = 0;
        }
        v13 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        v14 = atomic_exchange_explicit((atomic_uint *volatile)v5, 0, memory_order_release);
        if (v14 != v13)
          _dispatch_unfair_lock_unlock_slow_VARIANT_mp(v5, v14);
      }
      if (v1)
        break;
    }
  }
  return v1;
}

uint64_t dispatch_queue_set_label_nocopy_VARIANT_armv81(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    if ((*(_DWORD *)(result + 80) & 0x200000) != 0)
      dispatch_queue_set_label_nocopy_VARIANT_armv81_cold_1(result);
    *(_QWORD *)(result + 72) = a2;
  }
  return result;
}

uint64_t _dispatch_queue_compute_priority_and_wlh_VARIANT_armv81(uint64_t a1, uint64_t *a2)
{
  int v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  unsigned int v17;

  v2 = *(_DWORD *)(a1 + 84);
  v3 = (unsigned __int16)v2 >> 12;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = -4;
  if ((*(_QWORD *)(a1 + 56) & 0x2000000000) != 0)
    v5 = a1;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 40);
  if ((v6 & 0x10000) == 0)
  {
    v7 = *(_DWORD *)(a1 + 84) & 0xFFF;
    while ((__objc2_class **)v4 != &_dispatch_mgr_q)
    {
      if ((*(_DWORD *)(v4 + 80) & 0x40000) != 0 && (*(_DWORD *)(v4 + 80) & 0x1000000) == 0)
      {
        if (a2)
          *a2 = -4;
        return *(unsigned int *)(v4 + 84);
      }
      if (*(_QWORD *)(v4 + 56) >> 55)
        goto LABEL_43;
      if ((*(_QWORD *)(v4 + 56) & 0x2000000000) != 0)
      {
        v5 = v4;
        if (v6 == 18)
        {
          atomic_fetch_and_explicit((atomic_uint *volatile)(a1 + 80), 0xFFBFFFFF, memory_order_relaxed);
          v5 = v4;
        }
      }
      else if ((*(_DWORD *)(v4 + 80) & 0x400000) != 0)
      {
LABEL_43:
        if (MEMORY[0xFFFFFC100])
          kdebug_trace();
        result = 0;
        if (a2)
          *a2 = 0;
        return result;
      }
      v16 = *(_DWORD *)(v4 + 84);
      v4 = *(_QWORD *)(v4 + 24);
      if ((v16 & 0x20000000) == 0)
      {
        if (!v3)
          v3 = (unsigned __int16)v16 >> 12;
        v17 = v16 & 0xFFF;
        if (v7 <= v17)
          v7 = v17;
        v6 = *(_QWORD *)(*(_QWORD *)v4 + 40);
        if ((v6 & 0x10000) == 0)
          continue;
      }
      goto LABEL_5;
    }
    if (a2)
      *a2 = -4;
    return 0x2000000;
  }
  v7 = *(_DWORD *)(a1 + 84) & 0xFFF;
LABEL_5:
  v8 = v4 < (unint64_t)&_dispatch_root_queues || v4 >= (unint64_t)&_dispatch_queue_serial_numbers;
  if (v8 && *(_QWORD *)(v4 + 64) != 22)
  {
    if (a2)
      *a2 = -4;
    return 0x2000000;
  }
  v9 = *(_DWORD *)(v4 + 84);
  v10 = (unsigned __int16)v9 >> 12;
  if (v3)
    v10 = v3;
  v11 = *(_DWORD *)(v4 + 84) & 0xFFF;
  if (v7 > v11)
    v11 = v7;
  result = v11 | v9 & 0x88000000;
  if ((v2 & 0x40000000) != 0 || (v2 & 0xFFF) == 0)
  {
    v13 = result | v2 & 0x40000000;
    v14 = v10 > ((v11 >> 8) & 0xF);
    v15 = v13 | ((v10 & 0xF) << 12) | 0x4000000;
    if (v14)
      result = v15;
    else
      result = v13;
  }
  if (a2)
    *a2 = v5;
  return result;
}

uint64_t dispatch_set_qos_class_floor_VARIANT_armv81(uint64_t a1, int a2, char a3)
{
  uint64_t result;
  unsigned int v4;
  unint64_t v5;
  int v6;

  if ((*(_QWORD *)(*(_QWORD *)a1 + 40) & 0xF0) != 0x10)
    dispatch_set_qos_class_floor_VARIANT_armv81_cold_2();
  if (*(_QWORD *)(*(_QWORD *)a1 + 40) == 18)
    return (uint64_t)dispatch_workloop_set_qos_class_floor_VARIANT_armv81(a1, a2, a3, 0);
  HIDWORD(v5) = a2 - 5;
  LODWORD(v5) = a2 - 5;
  v4 = v5 >> 2;
  if (v4 <= 7 && ((0xBBu >> v4) & 1) != 0)
    v6 = (a3 - 1) | dword_18A06E9E4[v4] | 0x40000000;
  else
    v6 = 0;
  *(_DWORD *)(a1 + 84) = v6 | *(_DWORD *)(a1 + 84) & 0xBFFFF000;
  result = *(_QWORD *)(a1 + 56);
  if ((~result & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_VARIANT_mp_cold_1(result);
  return result;
}

_DWORD *dispatch_workloop_set_qos_class_floor_VARIANT_armv81(uint64_t a1, int a2, char a3, char a4)
{
  uint64_t v5;
  _DWORD *result;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v5 = *(_QWORD *)(a1 + 56);
  if ((~v5 & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_VARIANT_mp_cold_1(v5);
  result = *(_DWORD **)(a1 + 200);
  if (!result)
  {
    result = _dispatch_calloc(1uLL, 0x38uLL);
    *(_QWORD *)(a1 + 200) = result;
  }
  HIDWORD(v11) = a2 - 5;
  LODWORD(v11) = a2 - 5;
  v10 = v11 >> 2;
  if (v10 <= 7 && ((0xBBu >> v10) & 1) != 0)
  {
    result[1] = dword_18A06E9E4[v10] | (a3 - 1);
    v12 = *result | 8;
    if ((a4 & 1) == 0)
      goto LABEL_7;
LABEL_9:
    result[4] = 2;
    v13 = v12 | 2;
    goto LABEL_10;
  }
  result[1] = 0;
  v12 = *result & 0xFFFFFFF7;
  if ((a4 & 1) != 0)
    goto LABEL_9;
LABEL_7:
  v13 = v12 & 0xFFFFFFFD;
LABEL_10:
  *result = v13;
  return result;
}

uint64_t dispatch_set_qos_class_VARIANT_armv81(uint64_t a1, int a2, char a3)
{
  unsigned int v4;
  unint64_t v5;
  int v6;
  uint64_t result;

  if ((*(_QWORD *)(*(_QWORD *)a1 + 40) & 0xF0) != 0x10
    || *(_QWORD *)(*(_QWORD *)a1 + 40) == 18)
  {
    dispatch_set_qos_class_VARIANT_armv81_cold_1();
  }
  HIDWORD(v5) = a2 - 5;
  LODWORD(v5) = a2 - 5;
  v4 = v5 >> 2;
  if (v4 <= 7 && ((0xBBu >> v4) & 1) != 0)
    v6 = dword_18A06E9E4[v4] | (a3 - 1);
  else
    v6 = 0;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a1 + 84) & 0xBFFFF000 | v6;
  result = *(_QWORD *)(a1 + 56);
  if ((~result & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_VARIANT_mp_cold_1(result);
  return result;
}

uint64_t dispatch_set_qos_class_fallback_VARIANT_armv81(uint64_t a1, int a2)
{
  unsigned int v2;
  unint64_t v3;
  int v4;
  uint64_t result;

  if ((*(_QWORD *)(*(_QWORD *)a1 + 40) & 0xF0) != 0x10)
    dispatch_set_qos_class_fallback_VARIANT_armv81_cold_2();
  HIDWORD(v3) = a2 - 5;
  LODWORD(v3) = a2 - 5;
  v2 = v3 >> 2;
  if (v2 > 7)
    v4 = 0;
  else
    v4 = dword_18A06EA04[v2];
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a1 + 84) & 0xFBFF0FFF | v4;
  result = *(_QWORD *)(a1 + 56);
  if ((~result & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_VARIANT_mp_cold_1(result);
  return result;
}

uint64_t dispatch_queue_create_with_target_V2_VARIANT_armv81(const char *a1, uint64_t *a2, __objc2_class **a3)
{
  return _dispatch_lane_create_with_target_0(a1, a2, a3, 0);
}

uint64_t _dispatch_lane_create_with_target_0(const char *a1, uint64_t *a2, __objc2_class **a3, unsigned __int8 a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t add_explicit;
  int v14;
  int v15;
  __objc2_class *v16;
  unsigned int v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  result = (uint64_t)_dispatch_queue_attr_to_info(a2);
  v8 = result;
  v9 = result;
  v10 = WORD1(result) & 3;
  if (a3 && v10)
  {
    if (!a3[3])
      goto LABEL_6;
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot specify both overcommit and a non-global target queue";
    qword_1EDF52D38 = (uint64_t)a3;
    __break(1u);
  }
  if (!a3)
  {
    if ((result & 0x100000) != 0)
      v12 = 2;
    else
      v12 = 1;
    if (!v10)
      v10 = v12;
    goto LABEL_28;
  }
LABEL_6:
  if ((*a3)[1].isa == (__objc2_class *)328465)
  {
    if (v10)
    {
      if (!(_BYTE)result)
      {
LABEL_29:
        LODWORD(add_explicit) = (*((_DWORD *)a3 + 21) >> 8) & 0xF;
        goto LABEL_30;
      }
    }
    else
    {
      if (*((int *)a3 + 21) < 0)
        v10 = 1;
      else
        v10 = 2;
      if (!(_BYTE)result)
        goto LABEL_29;
    }
LABEL_28:
    LODWORD(add_explicit) = result;
LABEL_30:
    if ((_DWORD)add_explicit)
      add_explicit = add_explicit;
    else
      add_explicit = 4;
    if ((add_explicit - 7) <= 0xFFFFFFF9)
    {
LABEL_70:
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupted priority";
      qword_1EDF52D38 = add_explicit;
      __break(1u);
      goto LABEL_71;
    }
    v14 = 3 * add_explicit;
    if (v10 == 1)
      ++v14;
    a3 = &_dispatch_root_queues + 16 * (unint64_t)(v14 - 3);
LABEL_38:
    if ((((result & 0x2C0000) == 0) & a4) != 0)
      v15 = 0x400000;
    else
      v15 = 0;
    if ((result & 0x100000) != 0)
      v16 = OS_dispatch_queue_concurrent;
    else
      v16 = OS_dispatch_queue_serial;
    v17 = (result >> 18) & 3;
    if (v17 == 1)
    {
      v15 |= 0x10000u;
      if (a1)
      {
LABEL_48:
        v18 = _dispatch_strdup_if_mutable(a1);
        if (v18 != a1)
          v15 |= 0x200000u;
        goto LABEL_52;
      }
    }
    else
    {
      if (v17 == 2)
        v15 |= 0x20000u;
      if (a1)
        goto LABEL_48;
    }
    v18 = 0;
LABEL_52:
    result = _dispatch_object_alloc_VARIANT_mp(v16, 120);
    v19 = result;
    if ((v8 & 0x100000) != 0)
      v20 = 4094;
    else
      v20 = 1;
    v21 = 0x180000000000000;
    if ((v8 & 0x200000) != 0)
    {
      *(_DWORD *)(result + 8) += 2;
      if (*(_BYTE *)(*(_QWORD *)result + 40) == 19)
        ++*(_DWORD *)(result + 8);
    }
    else
    {
      v21 = 0;
    }
    *(_QWORD *)(result + 16) = -1985229329;
    *(_DWORD *)(result + 80) = v15 | v20;
    *(_QWORD *)(result + 56) = v21 - (v20 << 41) + 0x20000000000000;
    *(_QWORD *)(result + 64) = atomic_fetch_add_explicit((atomic_ullong *volatile)&_dispatch_queue_serial_numbers, 1uLL, memory_order_relaxed);
    *(_QWORD *)(result + 72) = v18;
    if (v9)
      v22 = (BYTE1(v8) - 1) | ((v9 & 0xF) << 8);
    else
      v22 = 0;
    if (v10 == 1)
      v22 |= 0x80000000;
    *(_DWORD *)(result + 84) = v22;
    if ((v8 & 0x200000) == 0)
    {
      _dispatch_queue_priority_inherit_from_target(result, (unint64_t)a3);
      result = _dispatch_lane_inherit_wlh_from_target_0(v19, (unint64_t)a3);
    }
    if (*((_DWORD *)a3 + 2) == 0x7FFFFFFF
      || (add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)a3 + 2, 1u, memory_order_relaxed),
          (int)add_explicit > 0))
    {
      *(_QWORD *)(v19 + 24) = a3;
      return v19;
    }
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
    goto LABEL_70;
  }
  if ((*((_BYTE *)a3 + 87) & 8) != 0)
  {
LABEL_71:
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot target object to cooperative root queue - not implemented";
    qword_1EDF52D38 = (uint64_t)a3;
    __break(1u);
    goto LABEL_72;
  }
  if (a3[3])
  {
    if ((result & 0x100000) != 0)
      v11 = 2;
    else
      v11 = 1;
    if (!v10)
      v10 = v11;
    goto LABEL_38;
  }
  if (!v10)
    goto LABEL_38;
LABEL_72:
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot specify an overcommit attribute and use this kind of target queue";
  qword_1EDF52D38 = (uint64_t)a3;
  __break(1u);
  return result;
}

uint64_t dispatch_queue_create_VARIANT_armv81(const char *a1, uint64_t *a2)
{
  return _dispatch_lane_create_with_target_0(a1, a2, 0, 1u);
}

void dispatch_queue_create_with_accounting_override_voucher_VARIANT_armv81()
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unsupported interface";
  __break(1u);
}

void _dispatch_lane_class_dispose_VARIANT_armv81(uint64_t *a1, _BYTE *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (a1[6])
    _dispatch_lane_class_dispose_VARIANT_mp_cold_3(a1 + 6);
  a1[13] = 512;
  a1[6] = 512;
  v2 = a1[7];
  v3 = 0x20000000000000 - ((unint64_t)*((unsigned __int16 *)a1 + 40) << 41);
  if ((*(_BYTE *)(*a1 + 42) & 1) != 0)
    v3 = 0x60000000000000;
  if ((v2 & 0xFFFFFF48FFFFFFFFLL) != v3)
  {
    v4 = a1[7];
    if ((v2 & 0xFFFFFFFC) == 0)
      _dispatch_lane_class_dispose_VARIANT_armv81_cold_1(v4);
    _dispatch_lane_class_dispose_VARIANT_armv81_cold_2(v4);
  }
  _dispatch_queue_dispose_0(a1, a2);
}

void _dispatch_queue_dispose_0(id obj, _BYTE *a2)
{
  _QWORD *v4;
  int add_explicit;

  v4 = (_QWORD *)*((_QWORD *)obj + 9);
  if (v4 && (*((_DWORD *)obj + 20) & 0x200000) != 0)
    free(v4);
  __swp(v4, (unsigned int *)obj + 22);
  if (v4)
    _dispatch_queue_specific_head_dispose_0(v4);
  if (*((_DWORD *)obj + 24))
  {
    _dispatch_object_finalize_VARIANT_mp(obj);
    *a2 = 0;
    *((_QWORD *)obj + 9) = "<released queue, pending free>";
    *((_QWORD *)obj + 4) = 0;
    *((_QWORD *)obj + 5) = 0;
    *((_QWORD *)obj + 3) = 0;
    add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)obj + 24, 0xFFFFFFFF, memory_order_relaxed);
    if (add_explicit <= 0)
    {
      if (add_explicit < 0)
      {
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
      else
      {
        *((_QWORD *)obj + 7) = 0xDEAD000000000000;
        _dispatch_object_dealloc_VARIANT_mp(obj);
      }
    }
  }
  else
  {
    *((_QWORD *)obj + 7) = 0xDEAD000000000000;
  }
}

unint64_t _dispatch_queue_xref_dispose_VARIANT_armv81(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 56);
  if (result >> 55)
  {
    if ((result & 0x180000000000000) == 0)
      _dispatch_queue_xref_dispose_VARIANT_armv81_cold_1(result);
    _dispatch_queue_xref_dispose_VARIANT_armv81_cold_2(result);
  }
  atomic_fetch_or_explicit((atomic_uint *volatile)(a1 + 80), 0x800000u, memory_order_relaxed);
  return result;
}

uint64_t _dispatch_lane_suspend_VARIANT_armv81(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(result + 56);
  do
  {
    if (v1 >= 0xFC00000000000000)
      return _dispatch_lane_suspend_slow_0(result);
    v2 = v1;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(result + 56), &v1, v1 + 0x400000000000000, memory_order_relaxed, memory_order_relaxed);
  }
  while (v1 != v2);
  if (!(v2 >> 55)
    && *(_DWORD *)(result + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 2u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  return result;
}

uint64_t _dispatch_lane_suspend_slow_0(uint64_t result)
{
  uint64_t v1;
  int v2;
  atomic_uint *v3;
  unint64_t StatusReg;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  char v14;

  v1 = result;
  v2 = 0;
  v3 = (atomic_uint *)(result + 100);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(result + 100), (unsigned int *)&v2, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
  if (v2)
    result = _dispatch_unfair_lock_lock_slow_VARIANT_armv81(result + 100);
  v5 = *(_DWORD *)(v1 + 112);
  v6 = 0x7C00000000000000;
  if (!v5)
    v6 = 0x7A00000000000000;
  v7 = *(_QWORD *)(v1 + 56);
  do
  {
    if (v7 < v6)
    {
      v11 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
      v12 = atomic_exchange_explicit(v3, 0, memory_order_release);
      if (v12 != v11)
      {
        v13 = (uint64_t)v3;
        v14 = v12;
        _dispatch_unfair_lock_unlock_slow_VARIANT_mp(v13, v12);
        if ((v14 & 2) != 0 && (*(_QWORD *)(StatusReg + 200) & 0xF0000) == 0)
          *(_QWORD *)(StatusReg + 200) = *(_QWORD *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
      }
      return _dispatch_lane_suspend_VARIANT_armv81(v1);
    }
    v8 = v7;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v1 + 56), &v8, v7 - v6, memory_order_relaxed, memory_order_relaxed);
    v9 = v8 == v7;
    v7 = v8;
  }
  while (!v9);
  *(_DWORD *)(v1 + 112) = v5 + 32;
  if (v5 >= 0xFFFFFFE0)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Too many nested calls to dispatch_suspend()";
    __break(1u);
  }
  else
  {
    v10 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    LODWORD(v1) = atomic_exchange_explicit(v3, 0, memory_order_release);
    if ((_DWORD)v1 == v10)
      return result;
  }
  result = _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)v3, v1);
  if ((v1 & 2) != 0 && (*(_QWORD *)(StatusReg + 200) & 0xF0000) == 0)
    *(_QWORD *)(StatusReg + 200) = *(_QWORD *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
  return result;
}

uint64_t _dispatch_queue_resume_VARIANT_armv81(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t add_explicit;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  if ((_DWORD)a2 == 2)
  {
    v6 = *(_QWORD *)(a1 + 56);
    do
    {
      if ((v6 & 0x180000000000000) == 0)
        return (uint64_t)_os_object_release_internal_n_VARIANT_armv81((void *)a1, (const char *)2);
      add_explicit = v6;
      v7 = v6 - 0x80000000000000;
      v8 = v7 >> 53;
      v9 = v7 & 0xFFFFFFF000000001;
      v10 = v7 | 0x8000000000;
      if ((add_explicit & 0xFFFFFFFC) != 0)
        v9 = v10;
      if (v8)
        v5 = v10;
      else
        v5 = v9;
      v6 = add_explicit;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v6, v5, memory_order_release, memory_order_relaxed);
    }
    while (v6 != add_explicit);
    if ((v5 & 0x180000000000000) == 0)
      goto LABEL_19;
    add_explicit = a1;
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupt activation state";
    qword_1EDF52D38 = a1;
    __break(1u);
LABEL_52:
    if ((add_explicit & 0x200000000000000) != 0)
      return _dispatch_lane_resume_slow_0(a1);
    goto LABEL_54;
  }
  if ((_DWORD)a2 == 1)
  {
    v2 = *(_QWORD *)(a1 + 56);
    while ((~v2 & 0x180000000000000) == 0)
    {
      add_explicit = v2;
      if (v2 >> 58)
        v4 = 0xFF80000000000000;
      else
        v4 = 0xFF00000000000000;
      v5 = v2 + v4;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v2, v5, memory_order_relaxed, memory_order_relaxed);
      if (v2 == add_explicit)
        goto LABEL_19;
    }
    return a1;
  }
  v11 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) - 0x20000000000;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFCLL;
  v13 = *(unsigned __int8 *)(*(_QWORD *)a1 + 40);
  v14 = *(_QWORD *)(a1 + 56);
  a2 = v12 | 0x60000000000002;
  do
  {
    add_explicit = v14;
    if (v13 == 19 && (v14 & 0xFF80000000000000) == 0x180000000000000)
    {
      v5 = v14 - 0x100000000000000;
    }
    else
    {
      v15 = v14 - 0x400000000000000;
      if (v14 < 0x400000000000000)
        goto LABEL_52;
      if ((v15 & 0x180000000000000) == 0x100000000000000)
      {
        v5 = v14 - 0x480000000000000;
      }
      else if (v15 >> 53 || (v14 & 0xFFFFFFFC) != 0)
      {
        v5 = v15 | 0x8000000000;
      }
      else if (v13 == 19 || (v15 & 0x10000000000) == 0 && (v11 + v15) >> 53)
      {
        v5 = v15 & 0xFFFFFFF000000001;
      }
      else
      {
        v5 = a2 | v15 & 0x7700000001;
      }
    }
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v14, v5, memory_order_release, memory_order_relaxed);
  }
  while (v14 != add_explicit);
LABEL_19:
  if ((v5 & 0x180000000000000) == 0x80000000000000)
    return _dispatch_lane_resume_activate_0(a1);
  if (!(v5 >> 55))
  {
    if (((add_explicit ^ v5) & 0x40000000000000) != 0)
    {
      v16 = 5;
      return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, HIDWORD(add_explicit) & 7, v16);
    }
    if (!(v5 >> 53))
    {
      v16 = 1;
      return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, HIDWORD(add_explicit) & 7, v16);
    }
    if (*(_DWORD *)(a1 + 8) == 0x7FFFFFFF)
      return a1;
    add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 0xFFFFFFFE, memory_order_release);
    if ((int)add_explicit > 2)
      return a1;
    if ((_DWORD)add_explicit == 2)
      return _os_object_dispose((void *)a1, (const char *)a2);
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
    __break(1u);
LABEL_54:
    if ((~add_explicit & 0x180000000000000) != 0)
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Over-resume of an object";
      qword_1EDF52D38 = a1;
      __break(1u);
    }
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Over-resume of an inactive object";
    qword_1EDF52D38 = a1;
    __break(1u);
  }
  return a1;
}

uint64_t _dispatch_lane_resume_slow_0(uint64_t result)
{
  uint64_t v1;
  int v2;
  atomic_uint *v3;
  unint64_t StatusReg;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  char v16;

  v1 = result;
  v2 = 0;
  v3 = (atomic_uint *)(result + 100);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(result + 100), (unsigned int *)&v2, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
  if (v2)
    result = _dispatch_unfair_lock_lock_slow_VARIANT_armv81(result + 100);
  v5 = *(_DWORD *)(v1 + 112);
  if (v5)
  {
    v6 = 0x7C00000000000000;
    v7 = v5 - 32;
    if (!v7)
      v6 = 0x7A00000000000000;
    v8 = *(_QWORD *)(v1 + 56);
    while (!__CFADD__(v8, v6))
    {
      v9 = v8;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v1 + 56), (unint64_t *)&v9, v8 + v6, memory_order_relaxed, memory_order_relaxed);
      v10 = v9 == v8;
      v8 = v9;
      if (v10)
      {
        *(_DWORD *)(v1 + 112) = v7;
        v11 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        v12 = atomic_exchange_explicit((atomic_uint *volatile)(v1 + 100), 0, memory_order_release);
        if (v12 != v11)
        {
          result = _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)v3, v12);
          if ((v12 & 2) != 0 && (*(_QWORD *)(StatusReg + 200) & 0xF0000) == 0)
            *(_QWORD *)(StatusReg + 200) = *(_QWORD *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
        }
        return result;
      }
    }
  }
  v13 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  v14 = atomic_exchange_explicit(v3, 0, memory_order_release);
  if (v14 != v13)
  {
    v15 = (uint64_t)v3;
    v16 = v14;
    _dispatch_unfair_lock_unlock_slow_VARIANT_mp(v15, v14);
    if ((v16 & 2) != 0 && (*(_QWORD *)(StatusReg + 200) & 0xF0000) == 0)
      *(_QWORD *)(StatusReg + 200) = *(_QWORD *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
  }
  return _dispatch_queue_resume_VARIANT_armv81(v1, 0);
}

uint64_t _dispatch_lane_resume_activate_0(uint64_t a1)
{
  void (*v2)(uint64_t);

  v2 = *(void (**)(uint64_t))(*(_QWORD *)a1 + 72);
  if (v2)
    v2(a1);
  return _dispatch_queue_resume_VARIANT_armv81(a1, 2);
}

__objc2_class *dispatch_queue_get_label_VARIANT_armv81(__objc2_class **a1)
{
  __objc2_class **v2;

  if (!a1)
  {
    v2 = *(__objc2_class ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160);
    if (v2)
      a1 = v2;
    else
      a1 = &off_1ECCEA100;
  }
  if (a1[9])
    return a1[9];
  else
    return (__objc2_class *)&unk_18A069831;
}

uint64_t dispatch_queue_get_qos_class_VARIANT_armv81(uint64_t a1, int *a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = *(unsigned int *)(a1 + 84);
  v3 = (v2 >> 8) & 0xF;
  if (a2)
  {
    if ((v2 & 0xF00) != 0)
      v4 = (char)v2 + 1;
    else
      v4 = 0;
    if (!(_DWORD)v3)
      v4 = 0;
    *a2 = v4;
  }
  v5 = v3 - 1;
  if (v5 > 5)
    return 0;
  else
    return dword_18A06EA24[v5];
}

atomic_ullong *dispatch_queue_set_width_VARIANT_armv81(atomic_ullong *a1, uint64_t a2)
{
  if (*(_QWORD *)(*a1 + 40) != 17)
    dispatch_queue_set_width_VARIANT_armv81_cold_2(*(_QWORD *)(*a1 + 40));
  if (*(_QWORD *)(*a1 + 40) != 529)
    dispatch_queue_set_width_VARIANT_armv81_cold_1(*(_QWORD *)(*a1 + 40));
  if ((a2 & 0x80000000) != 0)
    return (atomic_ullong *)_dispatch_barrier_async_detached_f_VARIANT_armv81((uint64_t)a1, a2, (uint64_t)_dispatch_lane_set_width_0);
  else
    return _dispatch_barrier_trysync_or_async_f_VARIANT_armv81(a1, a2, (uint64_t (*)(void))_dispatch_lane_set_width_0, 1);
}

unint64_t _dispatch_lane_set_width_0(int a1)
{
  unint64_t StatusReg;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  BOOL v6;
  int v8;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v2 = *(_QWORD *)(StatusReg + 160);
  if (a1 < 0)
  {
    v8 = (*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF;
    if (a1 == -1)
    {
      if (!v8 || (a1 = pthread_qos_max_parallelism(), a1 <= 0))
        a1 = MEMORY[0xFFFFFC036];
      if (a1 >= MEMORY[0xFFFFFC034])
        a1 = MEMORY[0xFFFFFC034];
    }
    else if (a1 == -2)
    {
      if (!v8 || (a1 = pthread_qos_max_parallelism(), a1 <= 0))
        a1 = MEMORY[0xFFFFFC035];
    }
    else if (!v8 || (a1 = pthread_qos_max_parallelism(), a1 <= 0))
    {
      a1 = MEMORY[0xFFFFFC036];
    }
  }
  else if (a1 <= 1)
  {
    a1 = 1;
  }
  if (a1 >= 0xFFE)
    v3 = 4094;
  else
    v3 = a1;
  v4 = *(_DWORD *)(v2 + 80);
  v5 = v4;
  do
  {
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v2 + 80), (unsigned int *)&v5, v4 & 0xFFFF0000 | v3, memory_order_relaxed, memory_order_relaxed);
    v6 = v5 == v4;
    v4 = v5;
  }
  while (!v6);
  return _dispatch_lane_inherit_wlh_from_target_0(v2, *(_QWORD *)(v2 + 24));
}

atomic_ullong *_dispatch_lane_set_target_queue_VARIANT_armv81(atomic_ullong *a1, char *a2)
{
  uint64_t v3;
  atomic_ullong v4;
  atomic_ullong v5;
  atomic_uint *v6;
  int add_explicit;
  uint64_t v9;
  int v10;
  const char *v11;
  char *v12;

  if (!a2)
  {
    v3 = 1152;
    if (*((_WORD *)a1 + 40) == 1)
      v3 = 1280;
    a2 = (char *)&_dispatch_root_queues + v3;
  }
  v4 = a1[7];
  while ((~v4 & 0x180000000000000) == 0)
  {
    v5 = v4;
    atomic_compare_exchange_strong_explicit(a1 + 7, (unint64_t *)&v4, v4 + 0x400000000000000, memory_order_relaxed, memory_order_relaxed);
    if (v4 == v5)
    {
      if ((v5 & 0x200000000000000) != 0)
        _dispatch_lane_set_target_queue_VARIANT_armv81_cold_3();
      if (*((_DWORD *)a2 + 2) != 0x7FFFFFFF
        && (int)atomic_fetch_add_explicit((atomic_uint *volatile)a2 + 2, 1u, memory_order_relaxed) <= 0)
      {
        dispatch_set_target_queue_VARIANT_mp_cold_2();
      }
      v6 = (atomic_uint *)atomic_exchange_explicit(a1 + 3, (unint64_t)a2, memory_order_release);
      if (v6)
      {
        if (v6[2] != 0x7FFFFFFF)
        {
          add_explicit = atomic_fetch_add_explicit(v6 + 2, 0xFFFFFFFF, memory_order_release);
          if (add_explicit <= 1)
          {
            if (add_explicit != 1)
              _os_object_allows_weak_reference_VARIANT_mp_cold_1();
            _os_object_dispose(v6, a2);
          }
        }
      }
      return (atomic_ullong *)_dispatch_queue_resume_VARIANT_armv81((uint64_t)a1, 0);
    }
  }
  if ((a1[10] & 0x400000) == 0)
  {
    if ((a1[10] & 0x100000) == 0)
      _dispatch_lane_set_target_queue_VARIANT_mp_cold_4();
    _dispatch_lane_set_target_queue_VARIANT_armv81_cold_5();
  }
  v9 = *(_QWORD *)(*a1 + 40);
  v10 = *(_QWORD *)(*a1 + 40);
  if (v10 == 17)
  {
    if ((a1[10] & 0x100000) == 0)
      goto LABEL_18;
    v12 = a2;
    v11 = "Changing the target of a queue already targeted by other dispatch objects";
  }
  else
  {
    v12 = a2;
    if (v10 != 19)
      _dispatch_lane_set_target_queue_VARIANT_mp_cold_6(v9);
    if (MEMORY[0xFFFFFC100])
      kdebug_trace();
    v11 = "Changing the target of a source after it has been activated";
  }
  _dispatch_bug_deprecated(v11);
  a2 = v12;
LABEL_18:
  if (*((_DWORD *)a2 + 2) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)a2 + 2, 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  return _dispatch_barrier_trysync_or_async_f_VARIANT_armv81(a1, (uint64_t)a2, (uint64_t (*)(void))_dispatch_lane_legacy_set_target_queue_0, 1);
}

void *_dispatch_lane_legacy_set_target_queue_0(unint64_t a1)
{
  unint64_t StatusReg;
  uint64_t v3;
  void *v4;
  __objc2_class **v5;
  const char *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_QWORD *)(StatusReg + 160);
  v4 = *(void **)(v3 + 24);
  if ((*(_DWORD *)(v3 + 80) & 0x100000) != 0)
    _dispatch_lane_legacy_set_target_queue_cold_2();
  v5 = _dispatch_queue_priority_inherit_from_target(v3, a1);
  _dispatch_lane_inherit_wlh_from_target_0(v3, (unint64_t)v5);
  v7 = 0;
  v8 = v3 + 100;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v3 + 100), (unsigned int *)&v7, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
  if (v7)
    _dispatch_unfair_lock_lock_slow_VARIANT_armv81(v3 + 100);
  if ((*(_DWORD *)(v3 + 80) & 0x400000) == 0)
    _dispatch_lane_set_target_queue_VARIANT_mp_cold_4();
  *(_QWORD *)(v3 + 24) = v5;
  v9 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  v10 = atomic_exchange_explicit((atomic_uint *volatile)(v3 + 100), 0, memory_order_release);
  if (v10 != v9)
  {
    _dispatch_unfair_lock_unlock_slow_VARIANT_mp(v8, v10);
    if ((v10 & 2) != 0 && (*(_QWORD *)(StatusReg + 200) & 0xF0000) == 0)
      *(_QWORD *)(StatusReg + 200) = *(_QWORD *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
  }
  return _os_object_release_internal_VARIANT_armv81(v4, v6);
}

uint64_t _dispatch_return_to_kernel_0()
{
  unint64_t StatusReg;
  uint64_t v1;
  uint64_t result;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v1 = *(_QWORD *)(StatusReg + 232);
  if (v1 && *(_QWORD *)(v1 + 24) != -4)
    return _dispatch_event_loop_drain_VARIANT_armv81(1);
  *(_QWORD *)(StatusReg + 40) = 0;
  return result;
}

BOOL dispatch_swift_job_should_yield_VARIANT_armv81()
{
  return *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 960) != 0;
}

unint64_t _dispatch_lane_serial_drain_VARIANT_armv81(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t StatusReg;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (**v14)(uint64_t);
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  unint64_t result;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v34;
  atomic_ullong *v36;
  uint64_t v37;
  __int128 v38;

  v5 = *(_QWORD *)(a1 + 24);
  LOBYTE(v6) = a1 + 48;
  v36 = (atomic_ullong *)(a1 + 48);
  if (!*(_QWORD *)(a1 + 48))
    return 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v38 = *(_OWORD *)(StatusReg + 160);
  *(_QWORD *)(StatusReg + 160) = a1;
  *(_QWORD *)(StatusReg + 168) = &v38;
  v10 = (unint64_t *)(a1 + 104);
  v11 = *(_QWORD *)(a1 + 104);
  if (!v11)
    v11 = _dispatch_wait_for_enqueuer((unint64_t *)(a1 + 104));
  v34 = (_OWORD *)(StatusReg + 160);
  if (!(*(_QWORD *)(a1 + 56) >> 55))
  {
    v37 = v5;
    while (v5 == *(_QWORD *)(a1 + 24))
    {
      if (*(_QWORD *)v11 <= 0xFFFuLL && (a3 & 0x80000) == 0 && (*(_QWORD *)v11 & 1) != 0)
      {
        v32 = a2;
        *(_QWORD *)(a2 + 8) = v11;
        if ((a3 & 8) == 0)
          goto LABEL_87;
        qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Deferred continuation on source, mach channel or mgr";
        __break(1u);
        goto LABEL_96;
      }
      v12 = *(_QWORD *)(v11 + 16);
      *v10 = v12;
      if (!v12)
      {
        v13 = v11;
        atomic_compare_exchange_strong_explicit(v36, (unint64_t *)&v13, 0, memory_order_release, memory_order_relaxed);
        if (v13 != v11)
        {
          v12 = *(_QWORD *)(v11 + 16);
          if (!v12)
            v12 = _dispatch_wait_for_enqueuer((unint64_t *)(v11 + 16));
          *v10 = v12;
        }
      }
      v14 = *(void (***)(uint64_t))(StatusReg + 192);
      if (v14)
        (*v14)(a1);
      v15 = *(_QWORD *)v11;
      if (*(_QWORD *)v11 >= 0x1000uLL)
      {
        if (*(_QWORD *)(v15 + 40) == 1)
          (*(void (**)(uint64_t, _QWORD, _QWORD))(v15 + 48))(v11, 0, (a3 >> 21) & 1);
        else
          (*(void (**)(uint64_t, uint64_t, _QWORD))(v15 + 64))(v11, a2, a3 & 0xFFFD0000);
        goto LABEL_65;
      }
      if ((a3 & 0x1000000) != 0)
      {
        v16 = (void *)MEMORY[0x18D766D94]();
        v15 = *(_QWORD *)v11;
      }
      else
      {
        v16 = 0;
      }
      v17 = *(_QWORD *)(v11 + 24);
      if ((v15 & 4) != 0)
        *(_QWORD *)(v11 + 24) = -1;
      v18 = *(_QWORD *)(v11 + 8);
      if (v18 == -1)
      {
        v21 = 0;
      }
      else
      {
        v19 = *(_QWORD *)(StatusReg + 200);
        if (((v19 >> 8) & 0xF) != 0)
          v20 = 256 << ((BYTE1(v19) & 0xFu) - 1);
        else
          v20 = 0;
        v21 = v20 & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(StatusReg + 200);
        if ((v18 & 0xFFFFFF) != 0)
        {
          if ((v18 & 0xFFFFFFuLL) >= (v20 & 0xFFFFFF00)
            && ((v19 & 0x44000000) != 0 || (*(_QWORD *)(v11 + 8) & 0x10000000) != 0))
          {
            v21 = v18 & 0xFFFFFF;
          }
        }
        else if ((unsigned __int16)v19 >> 12)
        {
          v21 = (256 << (((unsigned __int16)v19 >> 12) - 1)) | 0xFF;
        }
      }
      v23 = v15 & 4;
      result = v21 & 0xFFFFFFFF02FFFFFFLL;
      v25 = *(_QWORD *)(StatusReg + 32);
      if ((v25 & 0x1000000) != 0)
      {
        if (result)
          goto LABEL_54;
        result = v25 & 0xFFFFFFFFFEFFFFFFLL;
      }
      else if (result == (v25 & 0xFFFFFFFF77FFFFFFLL))
      {
        goto LABEL_38;
      }
      if (result)
        goto LABEL_54;
LABEL_38:
      if (v17 == -1)
        goto LABEL_55;
      if (*(_QWORD *)(StatusReg + 224) != v17)
      {
        result = 0;
LABEL_54:
        result = _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(result, v17, v23 | 2);
LABEL_55:
        if ((v15 & 4) == 0)
          goto LABEL_61;
        goto LABEL_56;
      }
      if ((v15 & 4) == 0 || !v17)
        goto LABEL_55;
      if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v17 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
      {
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
        __break(1u);
        return 0;
      }
LABEL_56:
      v26 = *(_QWORD *)(StatusReg + 176);
      if (v26)
        v27 = *(_DWORD *)(v26 + 8) + 1;
      else
        v27 = 1;
      v23 = v11;
      if (v27 <= _dispatch_continuation_cache_limit)
      {
        v23 = 0;
        *(_QWORD *)(v11 + 16) = v26;
        *(_DWORD *)(v11 + 8) = v27;
        *(_QWORD *)(StatusReg + 176) = v11;
      }
LABEL_61:
      if ((v15 & 8) != 0)
      {
        v29 = *(_QWORD *)(v11 + 48);
        v30 = *(_QWORD *)(*(_QWORD *)v29 + 40);
        if (v30 != 514)
        {
          qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected object type";
          qword_1EDF52D38 = v30;
          __break(1u);
          return result;
        }
        _dispatch_client_callout(*(_QWORD *)(v11 + 40), *(uint64_t (**)(void))(v11 + 32));
        dispatch_group_leave_VARIANT_armv81(v29);
        if (!v23)
          goto LABEL_63;
      }
      else
      {
        _dispatch_client_callout(*(_QWORD *)(v11 + 40), *(uint64_t (**)(void))(v11 + 32));
        if (!v23)
          goto LABEL_63;
      }
      _dispatch_continuation_free_to_cache_limit_VARIANT_armv81(v23);
LABEL_63:
      v5 = v37;
      if (v16)
        objc_autoreleasePoolPop(v16);
LABEL_65:
      if (v14)
        v14[1](a1);
      v11 = v12;
      if (!v12)
      {
        if (!*v36)
        {
          v32 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) + 0x40000000000000;
          goto LABEL_90;
        }
        v11 = *v10;
        if (!*v10)
          v11 = _dispatch_wait_for_enqueuer(v10);
      }
      if (*(_QWORD *)(StatusReg + 40))
        _dispatch_return_to_kernel_0();
      if (*(_WORD *)(a1 + 80) == 1 && ((a3 & 0x4000000) != 0 || (*(_BYTE *)(StatusReg + 960) & 1) == 0))
      {
        if ((a3 & 0x100000) == 0
          || (v28 = *(_QWORD *)(StatusReg + 216),
              LODWORD(v6) = *(_DWORD *)(v28 + 60) & 7,
              v6 <= *(unsigned __int8 *)(v28 + 100)))
        {
          if (!(*(_QWORD *)(a1 + 56) >> 55))
            continue;
        }
      }
      break;
    }
  }
  v31 = *(unsigned __int16 *)(a1 + 80);
  v32 = (v31 << 41) + 0x40000000000000;
  if (!v11)
  {
LABEL_90:
    result = 0;
    *a4 = *a4 & 0x4000000001 | v32;
    *v34 = v38;
    return result;
  }
  v4 = a4;
  if (v31 >= 2)
  {
    v6 = *(_QWORD *)v11;
    if (*(_QWORD *)v11 < 0x1000uLL)
    {
LABEL_96:
      if ((v6 & 2) == 0)
        goto LABEL_85;
    }
    else if ((*(_QWORD *)(v6 + 40) & 0xF0) != 0x10 || (*(_DWORD *)(v11 + 80) & 0x80000) == 0)
    {
      goto LABEL_85;
    }
    v32 = 0x40010000000000;
  }
LABEL_85:
  *v4 = *v4 & 0x4000000001 | v32;
LABEL_87:
  *v34 = v38;
  return *(_QWORD *)(a1 + 24);
}

_QWORD *_dispatch_queue_invoke_finish_VARIANT_armv81(atomic_ullong *a1, uint64_t a2, __objc2_class **a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  atomic_ullong v9;
  atomic_ullong v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t StatusReg;
  unsigned int v17;

  v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(v5 + 106) |= 0x80u;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    if (v6)
      return (_QWORD *)_dispatch_workloop_drain_barrier_waiter_0((uint64_t)a1, v5, v6, 1, a4 & 0x4000000001);
    else
      return (_QWORD *)_dispatch_lane_drain_barrier_waiter_0(a1, v5, 1, a4 & 0x4000000001);
  }
  else
  {
    if (a3 == &_dispatch_mgr_q)
      v8 = 0x4000000000;
    else
      v8 = 1;
    v9 = a1[7];
    v10 = v9;
    do
    {
      v11 = v9 - a4;
      if ((v9 - a4) & 0x4000000001 | ((unint64_t)(v9 - a4) >> 53))
        v12 = 0;
      else
        v12 = v8;
      v13 = (v9 - a4) & 0xFFFFFF7700000001 | v12 | 0x8000000000;
      atomic_compare_exchange_strong_explicit(a1 + 7, (unint64_t *)&v10, v13, memory_order_release, memory_order_relaxed);
      v14 = v10 == v9;
      v9 = v10;
    }
    while (!v14);
    if ((~v11 & 0x1800000000) == 0)
    {
      v15 = HIDWORD(v11) & 7;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v17 = *(_DWORD *)(StatusReg + 200);
      if ((HIWORD(v17) & 0xF) < v15)
        *(_QWORD *)(StatusReg + 200) = v17 & 0xFFF0FFFF | ((_DWORD)v15 << 16);
    }
    if (((v13 ^ v11) & v8) != 0)
    {
      if ((v11 & 0x2000000000) != 0)
        return _dispatch_event_loop_poke_VARIANT_armv81(a1, v13, 1);
      else
        return (_QWORD *)((uint64_t (*)(__objc2_class **, atomic_ullong *, unint64_t))(*a3)[2].superclass)(a3, a1, HIDWORD(v11) & 7);
    }
    else
    {
      return _os_object_release_internal_n_VARIANT_armv81(a1, (const char *)2);
    }
  }
}

uint64_t _dispatch_workloop_drain_barrier_waiter_0(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v20;
  uint64_t v21;

  v8 = *(_DWORD *)(a2 + 100) & 0xFFFFFFFC;
  v9 = *(_QWORD *)(a2 + 16);
  v10 = a1 + 8 * (a3 - 1);
  *(_QWORD *)(v10 + 104) = v9;
  if (!v9)
  {
    v11 = a2;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 8 * (a3 - 1) + 152), (unint64_t *)&v11, 0, memory_order_release, memory_order_relaxed);
    if (v11 != a2)
    {
      v20 = (uint64_t *)(v10 + 104);
      v9 = *(_QWORD *)(a2 + 16);
      if (!v9)
      {
        v21 = a5;
        v9 = _dispatch_wait_for_enqueuer((unint64_t *)(a2 + 16));
        a5 = v21;
      }
      *v20 = v9;
    }
  }
  v12 = v9 != 0;
  v13 = v8 - a5;
LABEL_4:
  if (v12)
  {
    v12 = 1;
  }
  else
  {
    v14 = 0;
    do
    {
      v12 = v14 != -48;
      if (v14 == -48)
        break;
      v15 = *(_QWORD *)(a1 + 192 + v14);
      v14 -= 8;
    }
    while (!v15);
  }
  v16 = *(_QWORD *)(a1 + 56);
  do
  {
    v17 = v16;
    if ((v16 & 0x2000000000) != 0)
    {
      if ((v16 & 2) != 0 && (v16 & 0x800000001) != 0)
      {
        _dispatch_event_loop_ensure_ownership_VARIANT_armv81(a1);
        atomic_fetch_and_explicit((atomic_ullong *volatile)(a1 + 56), 0xFFFFFFF7FFFFFFFDLL, memory_order_relaxed);
        goto LABEL_4;
      }
      v18 = v16 & 0xFFFFFF7700000001 | v8;
      if (!v12)
      {
        if ((v16 & 0x8000000000) != 0)
        {
          atomic_fetch_xor_explicit((atomic_ullong *volatile)(a1 + 56), 0x8000000000uLL, memory_order_acquire);
          goto LABEL_4;
        }
        v18 = v16 & 0xFFFFFF7000000000 | v8 & 0xFFFFFF70FFFFFFFCLL;
      }
    }
    else
    {
      v18 = v13 + (v16 & 0xFFFFFF7700000001);
    }
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v16, v18, memory_order_release, memory_order_relaxed);
  }
  while (v16 != v17);
  return _dispatch_barrier_waiter_redirect_or_wake_0(a1, a2, a4, v17, v18);
}

uint64_t _dispatch_lane_drain_barrier_waiter_0(atomic_ullong *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v7 = *(_DWORD *)(a2 + 100) & 0xFFFFFFFC;
  v8 = *(_QWORD *)(a2 + 16);
  a1[13] = v8;
  if (!v8)
  {
    v9 = a2;
    atomic_compare_exchange_strong_explicit(a1 + 6, (unint64_t *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 != a2)
    {
      v8 = *(_QWORD *)(a2 + 16);
      if (!v8)
      {
        v15 = a4;
        v16 = _dispatch_wait_for_enqueuer((unint64_t *)(a2 + 16));
        a4 = v15;
        v8 = v16;
      }
      a1[13] = v8;
    }
  }
  v10 = v7 - a4;
LABEL_4:
  v11 = a1[7];
  do
  {
    v12 = v11;
    if ((v11 & 0x2000000000) != 0)
    {
      if ((v11 & 2) != 0 && (v11 & 0x800000001) != 0)
      {
        _dispatch_event_loop_ensure_ownership_VARIANT_armv81((uint64_t)a1);
        atomic_fetch_and_explicit(a1 + 7, 0xFFFFFFF7FFFFFFFDLL, memory_order_relaxed);
        goto LABEL_4;
      }
      v13 = v11 & 0xFFFFFF7700000001 | v7;
      if (!v8)
      {
        if ((v11 & 0x8000000000) != 0)
        {
          atomic_fetch_xor_explicit(a1 + 7, 0x8000000000uLL, memory_order_acquire);
          v8 = a1[13];
          goto LABEL_4;
        }
        v13 = v11 & 0xFFFFFF7000000000 | v7 & 0xFFFFFF70FFFFFFFCLL;
      }
    }
    else
    {
      v13 = v10 + (v11 & 0xFFFFFF7700000001);
    }
    atomic_compare_exchange_strong_explicit(a1 + 7, &v11, v13, memory_order_release, memory_order_relaxed);
  }
  while (v11 != v12);
  return _dispatch_barrier_waiter_redirect_or_wake_0((uint64_t)a1, a2, a3, v12, v13);
}

unint64_t _dispatch_lane_activate_VARIANT_armv81(uint64_t a1)
{
  unint64_t v2;
  unsigned int v3;
  unsigned int v4;
  __objc2_class **v5;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_DWORD *)(a1 + 84);
  v4 = (v3 >> 8) & 0xF;
  if ((unsigned __int16)v3 >> 12 <= v4 || (v3 & 0x40000000) == 0 && v4)
    *(_DWORD *)(a1 + 84) = v3 & 0xFBFF0FFF;
  v5 = _dispatch_queue_priority_inherit_from_target(a1, v2);
  return _dispatch_lane_inherit_wlh_from_target_0(a1, (unint64_t)v5);
}

unint64_t _dispatch_lane_inherit_wlh_from_target_0(uint64_t a1, unint64_t a2)
{
  char v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t result;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  BOOL v18;

  if ((*(_BYTE *)(*(_QWORD *)a2 + 42) & 1) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)a1 + 40) == 133137
      || (*(_QWORD *)(*(_QWORD *)a1 + 40) != 19
       || (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 29) & 0x20) != 0)
      && *(_WORD *)(a1 + 80) == 1
      && (a2 >= (unint64_t)&_dispatch_root_queues
        ? (v6 = (unint64_t)&_dispatch_queue_serial_numbers > a2)
        : (v6 = 0),
          v6))
    {
      v5 = 0x2000000000;
      v4 = 1;
    }
    else
    {
      v4 = 0;
      v5 = 0x1000000000;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v7 = *(_QWORD *)(a1 + 56);
  while (1)
  {
    v8 = v7;
    result = v7 & 0xFFFFFFCFFFFFFFFFLL | v5;
    if (v7 == result)
      break;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v7, result, memory_order_relaxed, memory_order_relaxed);
    if (v7 == v8)
      goto LABEL_16;
  }
  result = v7;
LABEL_16:
  if ((v8 & 0x2000000000) == 0)
    v4 = 1;
  if ((v4 & 1) == 0)
  {
    v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
    if (v10)
    {
      if (*(_QWORD *)(v10 + 24) == a1)
        result = _dispatch_event_loop_leave_immediate_VARIANT_armv81(result);
    }
  }
  if ((*(_QWORD *)(*(_QWORD *)a2 + 40) & 0x10000) == 0)
  {
    if (*(_QWORD *)(*(_QWORD *)a2 + 40) == 18)
    {
      v11 = *(_QWORD *)(a2 + 24);
      if (v11 < (unint64_t)&_dispatch_root_queues || v11 >= (unint64_t)&_dispatch_queue_serial_numbers)
      {
        v13 = *(_BYTE **)(a2 + 200);
        v14 = 0x1000000;
        if (v13)
        {
          if ((*v13 & 0x40) != 0)
            v14 = 17039360;
          else
            v14 = 0x1000000;
        }
      }
      else
      {
        v14 = 0;
      }
      v15 = *(unsigned int *)(a2 + 80);
      do
      {
        v16 = v15 & 0xFFAFFFFF | 0x100000;
        if (v16 == (_DWORD)v15)
          break;
        v17 = v15;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a2 + 80), (unsigned int *)&v17, v16, memory_order_relaxed, memory_order_relaxed);
        v18 = (_DWORD)v17 == (_DWORD)v15;
        v15 = v17;
      }
      while (!v18);
    }
    else
    {
      v14 = *(_DWORD *)(a2 + 80) & 0x1000000;
      if (v14)
        v14 = *(_DWORD *)(a2 + 80) & 0x1040000;
      atomic_fetch_or_explicit((atomic_uint *volatile)(a2 + 80), 0x100000u, memory_order_relaxed);
    }
    if (v14)
      atomic_fetch_or_explicit((atomic_uint *volatile)(a1 + 80), v14, memory_order_relaxed);
  }
  return result;
}

_QWORD *_dispatch_lane_invoke_VARIANT_armv81(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  __objc2_class **v19;
  __objc2_class ***v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v30;
  unint64_t StatusReg;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t i;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  __int128 v49;
  uint64_t v50;

  v50 = 0;
  if ((a3 & 3) == 0)
    *(_QWORD *)(a1 + 16) = -1985229329;
  if ((a3 & 2) != 0)
  {
    v50 = 0x40020000000001;
    v6 = a3 & 0x40000;
  }
  else
  {
    v30 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) - 0x20000000000;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v32 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
    v6 = a3 & 0x40000;
    if ((a3 & 0x40000) != 0)
      v33 = 0x4000000000;
    else
      v33 = 1;
    if ((a3 & 0x40001) == 0x40000)
      v34 = 0xFFE00000FFFFFFFCLL;
    else
      v34 = 0xFFE00040FFFFFFFCLL;
    v35 = *(_DWORD *)(StatusReg + 200);
    v36 = (v35 >> 8) & 0xF;
    v37 = (unsigned __int16)v35 >> 12;
    v38 = HIWORD(v35) & 0xF;
    if (v36 <= v37)
      v36 = v37;
    if (v36 > v38)
      v38 = v36;
LABEL_66:
    for (i = *(_QWORD *)(a1 + 56); ; i = v44)
    {
      while ((i & v34) != 0)
      {
        if ((a3 & 1) != 0)
          return _os_object_release_internal_n_VARIANT_armv81((void *)a1, (const char *)2);
        v45 = i;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v45, i ^ v33, memory_order_acquire, memory_order_acquire);
        if (v45 == i)
          return _os_object_release_internal_n_VARIANT_armv81((void *)a1, (const char *)2);
        i = v45;
      }
      if ((i & 0x1000000000) != 0)
      {
        v40 = HIDWORD(i) & 7;
        if (v40 > v38)
        {
          v48 = v30;
          _pthread_workqueue_override_start_direct();
          v30 = v48;
          v46 = *(_DWORD *)(StatusReg + 200);
          v38 = v40;
          if ((HIWORD(v46) & 0xF) < v40)
          {
            *(_QWORD *)(StatusReg + 200) = v46 & 0xFFF0FFFF | ((_DWORD)v40 << 16);
            v38 = v40;
          }
          goto LABEL_66;
        }
      }
      v41 = (i >> 40) & 1;
      if (!((v30 + i) >> 53))
        LODWORD(v41) = 1;
      v42 = (_DWORD)v41 ? 0x60000000000000 : 0x20000000000000;
      v43 = v32 | i & 0x7700000001 | v42;
      v44 = i;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v44, v43, memory_order_acquire, memory_order_acquire);
      if (v44 == i)
        break;
    }
    v47 = 0x60000000000000;
    if ((a3 & 1) == 0)
      v47 = v33 | 0x60000000000000;
    v50 = (v43 & v47) - (i & 0x3FFE0000000000);
    if (!v50)
      return _os_object_release_internal_n_VARIANT_armv81((void *)a1, (const char *)2);
  }
  if (!v6)
  {
    v8 = *(_DWORD *)(a1 + 84);
    v9 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v10 = *(_QWORD *)(v9 + 200);
    if ((_DWORD)v10)
    {
      v11 = (unsigned __int16)v8 >> 12;
      v12 = v8 & 0xFFF;
      if ((v8 & 0xFFF) != 0)
      {
        if (((unsigned __int16)v10 & 0xFFFu) > v12)
          v12 = v10 & 0xFFF;
        if (v11 <= v12 >> 8)
          v13 = 0x40000000;
        else
          v13 = 1140912128;
        v14 = v10 & 0x880F0000 | v12 | v13 & v8;
      }
      else
      {
        v15 = v10 | 0x40000000;
        if ((v10 & 0xFFF) == 0)
          v15 = *(_QWORD *)(v9 + 200);
        v14 = v15 & 0xFFFF0FFF | v8 & 0x400F000;
        if (v11 <= ((v15 >> 8) & 0xF))
          v14 = v15;
      }
    }
    else
    {
      v14 = v8 & 0xFFF0FFFF;
    }
    *(_QWORD *)(v9 + 200) = v14;
    v7 = v10 & 0xFFF0FFFF;
    if ((a3 & 0x100000) == 0)
      goto LABEL_23;
    goto LABEL_21;
  }
  v7 = 0;
  if ((a3 & 0x100000) != 0)
  {
LABEL_21:
    if ((*(_DWORD *)(a1 + 80) & 0x400000) != 0)
      atomic_fetch_and_explicit((atomic_uint *volatile)(a1 + 80), 0xFFBFFFFF, memory_order_relaxed);
  }
LABEL_23:
  if (((*(_DWORD *)(a1 + 80) << 8) & 0x3000000) != 0)
    v16 = (*(_DWORD *)(a1 + 80) << 8) & 0x3000000 | a3 & 0xFCFFFFFF;
  else
    v16 = a3;
  v17 = v16 & 0x1000002;
  v18 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_27:
  if (v17 == 2)
    _dispatch_last_resort_autorelease_pool_push(a2);
  v19 = *(__objc2_class ***)(a1 + 24);
  v20 = (__objc2_class ***)(v18 + 160);
  if (*(__objc2_class ***)(v18 + 160) == v19)
  {
    if (*(_WORD *)(a1 + 80) == 1)
      v21 = _dispatch_lane_serial_drain_VARIANT_armv81(a1, a2, v16, &v50);
    else
      _dispatch_lane_concurrent_drain_0(a1, a2, v16, &v50);
    v19 = (__objc2_class **)v21;
  }
  if (v17 == 2)
  {
    v49 = *(_OWORD *)v20;
    *(_QWORD *)(v18 + 160) = a1;
    *(_QWORD *)(v18 + 168) = &v49;
    _dispatch_last_resort_autorelease_pool_pop(a2);
    *(_OWORD *)v20 = v49;
  }
  if ((unint64_t)v19 + 1 <= 1)
  {
    v22 = v50;
    v23 = *(_QWORD *)(a1 + 56);
    while (1)
    {
      v24 = v23;
      v25 = v23 - v22;
      v26 = v25 & 0xFFFFFFF700000001;
      if (!(v24 >> 55))
      {
        if ((v24 & 0x8000000000) != 0)
        {
          atomic_fetch_xor_explicit((atomic_ullong *volatile)(a1 + 56), 0x8000000000uLL, memory_order_acquire);
          if ((a3 & 1) != 0)
            goto LABEL_27;
          v19 = *v20;
          if (((uint64_t)(**v20)[1].isa & 0x10000) != 0)
            goto LABEL_27;
          break;
        }
        if (v19)
          v26 = v25 & 0xFFFFFF7700000001 | 0x8000000000;
        else
          v26 = v25 & 0xFFFFFFF000000001;
      }
      v23 = v24;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v23, v26, memory_order_release, memory_order_relaxed);
      if (v23 == v24)
      {
        if ((~v24 & 0x1800000000) == 0)
        {
          v27 = HIDWORD(v24) & 7;
          v28 = *(_DWORD *)(v18 + 200);
          if ((HIWORD(v28) & 0xF) < v27)
            *(_QWORD *)(v18 + 200) = v28 & 0xFFF0FFFF | ((_DWORD)v27 << 16);
        }
        v19 = 0;
        v50 = 0;
        break;
      }
    }
  }
  if ((v16 & 0x40000) == 0)
    *(_QWORD *)(v18 + 200) = *(_QWORD *)(v18 + 200) & 0xF0000 | v7;
  if (v19)
    return _dispatch_queue_invoke_finish_VARIANT_armv81((atomic_ullong *)a1, a2, v19, v50);
  return _os_object_release_internal_n_VARIANT_armv81((void *)a1, (const char *)2);
}

uint64_t dispatch_workloop_copy_current_VARIANT_armv81()
{
  uint64_t v0;
  BOOL v1;

  v0 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 216);
  v1 = v0 == -4 || v0 == 0;
  if (v1 || *(_BYTE *)(*(_QWORD *)v0 + 40) != 18)
    return 0;
  _os_object_retain_with_resurrect_VARIANT_armv81(v0);
  return v0;
}

BOOL dispatch_workloop_is_current_VARIANT_armv81(uint64_t a1)
{
  return *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 216) == a1;
}

BOOL _dispatch_workloop_should_yield_4NW_VARIANT_armv81()
{
  uint64_t v0;
  BOOL v1;

  v0 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 216);
  v1 = v0 == -4 || v0 == 0;
  return !v1 && *(_BYTE *)(*(_QWORD *)v0 + 40) == 18 && (*(_DWORD *)(v0 + 60) & 7u) > *(unsigned __int8 *)(v0 + 100);
}

uint64_t dispatch_workloop_create_VARIANT_armv81(const char *a1)
{
  return _dispatch_workloop_create_0(a1, 0);
}

uint64_t _dispatch_workloop_create_0(const char *a1, uint64_t a2)
{
  int v3;
  const char *v5;
  uint64_t result;

  v3 = 65537;
  if (a1)
  {
    v5 = _dispatch_strdup_if_mutable(a1);
    if (v5 == a1)
      v3 = 65537;
    else
      v3 = 2162689;
  }
  else
  {
    v5 = 0;
  }
  result = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_workloop, 208);
  if ((a2 & 0x180000000000000) != 0)
  {
    *(_DWORD *)(result + 8) += 2;
    if (*(_BYTE *)(*(_QWORD *)result + 40) == 19)
      ++*(_DWORD *)(result + 8);
  }
  *(_QWORD *)(result + 16) = -1985229329;
  *(_DWORD *)(result + 80) = v3;
  *(_QWORD *)(result + 56) = a2 | 0x1FFE2000000000;
  *(_QWORD *)(result + 64) = atomic_fetch_add_explicit((atomic_ullong *volatile)&_dispatch_queue_serial_numbers, 1uLL, memory_order_relaxed);
  *(_QWORD *)(result + 72) = v5;
  *(_QWORD *)(result + 24) = &off_1ECCEA100;
  if ((a2 & 0x180000000000000) == 0)
    *(_DWORD *)(result + 84) = -2080358400;
  return result;
}

uint64_t dispatch_workloop_create_inactive_VARIANT_armv81(const char *a1)
{
  return _dispatch_workloop_create_0(a1, 0x180000000000000);
}

uint64_t dispatch_workloop_set_autorelease_frequency_VARIANT_armv81(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t result;

  v2 = *(unsigned int *)(a1 + 80);
  if (a2 == 1)
  {
    do
    {
      v3 = v2 & 0xFFFCFFFF | 0x10000;
      if (v3 == (_DWORD)v2)
        break;
      v4 = v2;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 80), (unsigned int *)&v4, v3, memory_order_relaxed, memory_order_relaxed);
      v5 = (_DWORD)v4 == (_DWORD)v2;
      v2 = v4;
    }
    while (!v5);
  }
  else
  {
    do
    {
      v6 = v2 & 0xFFFCFFFF | 0x20000;
      if (v6 == (_DWORD)v2)
        break;
      v7 = v2;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 80), (unsigned int *)&v7, v6, memory_order_relaxed, memory_order_relaxed);
      v5 = (_DWORD)v7 == (_DWORD)v2;
      v2 = v7;
    }
    while (!v5);
  }
  result = *(_QWORD *)(a1 + 56);
  if ((~result & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_VARIANT_mp_cold_1(result);
  return result;
}

_DWORD *dispatch_workloop_set_scheduler_priority_VARIANT_armv81(uint64_t a1, int a2, char a3)
{
  uint64_t v4;
  _DWORD *result;
  unsigned int v8;
  unsigned int v9;

  v4 = *(_QWORD *)(a1 + 56);
  if ((~v4 & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_VARIANT_mp_cold_1(v4);
  result = *(_DWORD **)(a1 + 200);
  if (result)
  {
    if (a2)
      goto LABEL_4;
LABEL_8:
    result[2] = 0;
    v8 = *result & 0xFFFFFFFE;
    if ((a3 & 1) == 0)
      goto LABEL_5;
LABEL_9:
    result[4] = 2;
    v9 = v8 | 2;
    goto LABEL_10;
  }
  result = _dispatch_calloc(1uLL, 0x38uLL);
  *(_QWORD *)(a1 + 200) = result;
  if (!a2)
    goto LABEL_8;
LABEL_4:
  result[2] = a2;
  v8 = *result | 1;
  if ((a3 & 1) != 0)
    goto LABEL_9;
LABEL_5:
  v9 = v8 & 0xFFFFFFFD;
LABEL_10:
  *result = v9;
  return result;
}

uint64_t dispatch_workloop_set_uses_bound_thread_VARIANT_armv81(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t result;

  if (_dispatch_workloop_bound_thread_pred != -1)
    dispatch_once_f_VARIANT_armv81(&_dispatch_workloop_bound_thread_pred, 0, (uint64_t (*)(void))_dispatch_workloop_bound_thread_init_once_0);
  if (!_dispatch_thread_bound_kqwl_enabled)
    return 0xFFFFFFFFLL;
  v2 = *(_QWORD *)(a1 + 56);
  if ((~v2 & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_VARIANT_mp_cold_1(v2);
  v3 = *(_DWORD **)(a1 + 200);
  if (!v3)
  {
    v3 = _dispatch_calloc(1uLL, 0x38uLL);
    *(_QWORD *)(a1 + 200) = v3;
  }
  result = 0;
  *v3 |= 0x40u;
  return result;
}

uint64_t dispatch_workloop_set_os_workgroup_VARIANT_armv81(uint64_t a1, const char *a2)
{
  uint64_t v3;
  _QWORD *v5;
  void *v6;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 56);
  if ((~v3 & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_VARIANT_mp_cold_1(v3);
  v5 = *(_QWORD **)(a1 + 200);
  if (!v5)
  {
    v5 = _dispatch_calloc(1uLL, 0x38uLL);
    *(_QWORD *)(a1 + 200) = v5;
  }
  v6 = (void *)v5[4];
  if (v6)
    _os_object_release_VARIANT_armv81(v6, a2);
  result = _os_object_retain_VARIANT_armv81((uint64_t)a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 200) + 32) = a2;
  return result;
}

_DWORD *dispatch_workloop_set_qos_class_VARIANT_armv81(uint64_t a1, int a2, char a3)
{
  return dispatch_workloop_set_qos_class_floor_VARIANT_armv81(a1, a2, 0, a3);
}

_BYTE *dispatch_workloop_set_cpupercent_VARIANT_armv81(uint64_t a1, char a2, int a3)
{
  uint64_t v4;
  _BYTE *result;
  int v8;

  v4 = *(_QWORD *)(a1 + 56);
  if ((~v4 & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_VARIANT_mp_cold_1(v4);
  result = *(_BYTE **)(a1 + 200);
  if (!result)
  {
    result = _dispatch_calloc(1uLL, 0x38uLL);
    *(_QWORD *)(a1 + 200) = result;
  }
  v8 = *(_DWORD *)result;
  if ((*(_DWORD *)result & 9) == 0)
    dispatch_workloop_set_cpupercent_VARIANT_armv81_cold_1();
  result[20] = a2;
  *((_DWORD *)result + 6) = a3;
  *(_DWORD *)result = v8 | 4;
  return result;
}

__n128 _dispatch_workloop_set_observer_hooks_4IOHID_VARIANT_armv81(uint64_t a1, __n128 *a2)
{
  uint64_t v3;
  char *v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 56);
  if ((~v3 & 0x180000000000000) != 0)
    dispatch_set_qos_class_floor_VARIANT_mp_cold_1(v3);
  v5 = *(char **)(a1 + 200);
  if (!v5)
  {
    v5 = (char *)_dispatch_calloc(1uLL, 0x38uLL);
    *(_QWORD *)(a1 + 200) = v5;
  }
  result = *a2;
  *(__n128 *)(v5 + 40) = *a2;
  **(_DWORD **)(a1 + 200) |= 0x20u;
  return result;
}

void _dispatch_workloop_dispose_VARIANT_armv81(_QWORD *obj, char *a2)
{
  uint64_t v3;
  uint64_t i;
  char *v6;
  uint64_t v7;
  void *v8;
  _BYTE *v9;
  int v10;
  void **v11;

  v3 = obj[7];
  if (v3 != 0x1FFE2000000000)
  {
    if ((v3 & 0xFFFFFFFC) == 0)
      _dispatch_workloop_dispose_VARIANT_armv81_cold_2(v3);
    _dispatch_workloop_dispose_VARIANT_armv81_cold_3(v3);
  }
  for (i = 0; i != 6; ++i)
  {
    v6 = (char *)&obj[i];
    v7 = obj[i + 19];
    if (v7)
      _dispatch_workloop_dispose_VARIANT_armv81_cold_1(v7);
    *((_QWORD *)v6 + 19) = 512;
    *((_QWORD *)v6 + 13) = 512;
  }
  v8 = (void *)obj[6];
  if (v8)
  {
    free(v8);
    obj[6] = 0;
  }
  v9 = (_BYTE *)obj[25];
  if (v9)
  {
    if ((*v9 & 0x10) != 0)
    {
      v10 = _pthread_workloop_destroy();
      if (v10)
        _dispatch_bug(4566, v10);
    }
    v11 = (void **)obj[25];
    if (v11)
    {
      if (v11[4])
      {
        _os_object_release_VARIANT_armv81(v11[4], a2);
        v11 = (void **)obj[25];
      }
      free(v11);
    }
  }
  _dispatch_queue_dispose_0(obj, a2);
}

void _dispatch_workloop_activate_VARIANT_armv81(uint64_t a1)
{
  int *v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  const sched_param *v9;
  int sched_priority;
  int v11;
  int v12;
  unsigned int v13;
  pthread_attr_t v14;
  pthread_attr_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C874D8];
  if ((~atomic_fetch_and_explicit((atomic_ullong *volatile)(a1 + 56), 0xFEFFFFFFFFFFFFFFLL, memory_order_relaxed) & 0x180000000000000) != 0)
    return;
  v2 = *(int **)(a1 + 200);
  if (v2)
  {
    memset(&v14, 0, sizeof(v14));
    pthread_attr_init(&v14);
    v3 = *v2;
    if ((*v2 & 8) != 0)
      *(_DWORD *)(a1 + 84) |= v2[1] | 0x40000000;
    if ((v3 & 1) != 0)
    {
      pthread_attr_setschedparam(&v14, (const sched_param *)v2 + 1);
      *(_QWORD *)(a1 + 24) = &_dispatch_custom_workloop_root_queue;
    }
    v4 = *((_QWORD *)v2 + 4);
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = &_dispatch_custom_workloop_root_queue;
      if (_os_workgroup_get_backing_workinterval_VARIANT_mp(v4))
        pthread_attr_setworkinterval_np();
    }
    v5 = *v2;
    if ((*v2 & 0x40) != 0)
    {
      if (_dispatch_root_queues_pred != -1)
        dispatch_once_f_VARIANT_armv81(&_dispatch_root_queues_pred, 0, _dispatch_root_queues_init_once_0);
      *(_QWORD *)(a1 + 24) = &_dispatch_custom_workloop_overcommit_root_queue;
      v5 = *v2;
      if ((*v2 & 2) == 0)
      {
LABEL_17:
        if ((v5 & 4) != 0)
          pthread_attr_setcpupercent_np();
        v6 = *(_QWORD *)(a1 + 200);
        if (!v6)
          goto LABEL_44;
        if ((*(_BYTE *)v6 & 0x47) == 0)
        {
          v8 = *(_QWORD *)(v6 + 32);
          if (!v8 || !_os_workgroup_get_backing_workinterval_VARIANT_mp(v8))
            goto LABEL_44;
        }
        v7 = _pthread_workloop_create();
        if (v7 <= 44)
        {
          if (v7)
          {
            if (v7 == 33)
              _dispatch_workloop_activate_VARIANT_armv81_cold_1(a1);
          }
          else
          {
            *v2 |= 0x10u;
          }
          goto LABEL_44;
        }
        if (v7 != 45)
        {
          if (v7 == 78)
            _dispatch_workloop_activate_simulator_fallback_0(a1, (__int128 *)&v14.__sig);
LABEL_44:
          pthread_attr_destroy(&v14);
          goto LABEL_45;
        }
        v9 = *(const sched_param **)(a1 + 200);
        memset(&v15, 0, sizeof(v15));
        pthread_attr_init(&v15);
        sched_priority = v9->sched_priority;
        if ((v9->sched_priority & 1) != 0)
        {
          pthread_attr_setschedparam(&v15, v9 + 1);
          sched_priority = v9->sched_priority;
          if ((v9->sched_priority & 2) == 0)
          {
LABEL_32:
            if ((sched_priority & 4) == 0)
            {
LABEL_34:
              v11 = _pthread_workloop_create();
              if (v11 == 45)
              {
                _dispatch_workloop_activate_simulator_fallback_0(a1, (__int128 *)&v15.__sig);
              }
              else if (!v11)
              {
                v9->sched_priority |= 0x10u;
              }
              pthread_attr_destroy(&v15);
              goto LABEL_44;
            }
LABEL_33:
            pthread_attr_setcpupercent_np();
            goto LABEL_34;
          }
        }
        else if ((sched_priority & 2) == 0)
        {
          goto LABEL_32;
        }
        pthread_attr_setschedpolicy(&v15, v9[2].sched_priority);
        if ((v9->sched_priority & 4) == 0)
          goto LABEL_34;
        goto LABEL_33;
      }
    }
    else if ((v5 & 2) == 0)
    {
      goto LABEL_17;
    }
    pthread_attr_setschedpolicy(&v14, v2[4]);
    v5 = *v2;
    goto LABEL_17;
  }
LABEL_45:
  v12 = *(_DWORD *)(a1 + 84);
  if (v12)
    v13 = v12 | 0x80000000;
  else
    v13 = -2080358400;
  *(_DWORD *)(a1 + 84) = v13;
  atomic_fetch_and_explicit((atomic_ullong *volatile)(a1 + 56), 0xFF7FFFFFFFFFFFFFLL, memory_order_relaxed);
  _dispatch_workloop_wakeup_VARIANT_armv81(a1, 0, 1u);
}

void _dispatch_workloop_wakeup_VARIANT_armv81(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unsigned int v12;

  if ((a3 & 4) != 0)
  {
    _dispatch_workloop_barrier_complete_0(a1, a2, a3);
    return;
  }
  if ((a3 & 1) == 0)
    _dispatch_workloop_wakeup_VARIANT_mp_cold_1(a3);
  if ((a3 & 8) != 0)
    goto LABEL_26;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = a2 << 32;
  do
  {
    v6 = v4;
    v7 = v4 & 0x700000000;
    v8 = v6 & 0xFFFFFFF8FFFFFFFFLL | v5;
    if (v6 & 0x1000000000 | v5 & 0x1000000000)
      v8 |= 0x800000000uLL;
    if (v7 < v5)
      v9 = v8;
    else
      v9 = v6;
    v10 = v9 | ((v9 & 0x700000000) != 0);
    if ((a3 & 2) != 0)
    {
      v10 |= 0x8000000000uLL;
    }
    else if (v10 == v6)
    {
      goto LABEL_26;
    }
    v4 = v6;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v4, v10, memory_order_release, memory_order_relaxed);
  }
  while (v4 != v6);
  if (v6 >> 55)
    _dispatch_workloop_wakeup_VARIANT_armv81_cold_2(v6);
  if (((v10 ^ v6) & 1) != 0)
  {
    if ((v10 & 0x2000000000) != 0)
    {
      v11 = (_QWORD *)a1;
      v12 = 1;
LABEL_19:
      _dispatch_event_loop_poke_VARIANT_armv81(v11, v10, v12);
      return;
    }
    (*(void (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24), a1, HIDWORD(v10) & 7);
    return;
  }
  if (((v10 ^ v6) & 0x700000000) == 0)
  {
LABEL_26:
    _os_object_release_internal_n_VARIANT_armv81((void *)a1, (const char *)2);
    return;
  }
  if ((v10 & 0x2000000000) != 0)
  {
    v12 = a3 | 0x80000000;
    v11 = (_QWORD *)a1;
    goto LABEL_19;
  }
  _dispatch_queue_wakeup_with_override_slow_0(a1, v10, a3);
}

_QWORD *_dispatch_workloop_invoke_VARIANT_armv81(uint64_t started, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (**v31)(uint64_t);
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  __objc2_class **v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t v55;
  unint64_t StatusReg;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  __objc2_class ***v77;
  unint64_t v78;
  __int128 v80;

  v3 = started;
  if ((a3 & 3) == 0)
    *(_QWORD *)(started + 16) = -1985229329;
  if ((a3 & 2) != 0)
  {
    v4 = a3 & 0x40000;
    v5 = 0x40020000000001;
    goto LABEL_5;
  }
  v55 = ((unint64_t)*(unsigned __int16 *)(started + 80) << 41) - 0x20000000000;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v57 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
  v4 = a3 & 0x40000;
  if ((a3 & 0x40000) != 0)
    v58 = 0x4000000000;
  else
    v58 = 1;
  v59 = a3;
  if ((a3 & 0x40001) == 0x40000)
    v60 = 0xFFE00000FFFFFFFCLL;
  else
    v60 = 0xFFE00040FFFFFFFCLL;
  v61 = *(_DWORD *)(StatusReg + 200);
  v62 = (v61 >> 8) & 0xF;
  v63 = (unsigned __int16)v61 >> 12;
  v64 = HIWORD(v61) & 0xF;
  if (v62 <= v63)
    v62 = v63;
  if (v62 > v64)
    v64 = v62;
LABEL_149:
  v65 = *(_QWORD *)(v3 + 56);
  while (1)
  {
    v66 = v65;
    v67 = v65 & v60;
    if ((v65 & v60) != 0)
      break;
    if ((v65 & 0x1000000000) != 0)
    {
      v68 = HIDWORD(v65) & 7;
      if (v68 > v64)
      {
        v78 = v55;
        started = _pthread_workqueue_override_start_direct();
        v55 = v78;
        v72 = *(_DWORD *)(StatusReg + 200);
        v64 = v68;
        if ((HIWORD(v72) & 0xF) < v68)
        {
          *(_QWORD *)(StatusReg + 200) = v72 & 0xFFF0FFFF | ((_DWORD)v68 << 16);
          v64 = v68;
        }
        goto LABEL_149;
      }
    }
    v69 = (v65 >> 40) & 1;
    if (!((v55 + v66) >> 53))
      LODWORD(v69) = 1;
    if ((_DWORD)v69)
      v70 = 0x60000000000000;
    else
      v70 = 0x20000000000000;
    v71 = v57 | v66 & 0x7700000001 | v70;
LABEL_159:
    v65 = v66;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v3 + 56), &v65, v71, memory_order_acquire, memory_order_acquire);
    if (v65 == v66)
      goto LABEL_167;
  }
  if ((v59 & 1) == 0)
  {
    v71 = v65 ^ v58;
    goto LABEL_159;
  }
  v71 = v65;
LABEL_167:
  v73 = 0x60000000000000;
  if ((v59 & 1) == 0)
    v73 = v58 | 0x60000000000000;
  if (v67)
    return _os_object_release_internal_n_VARIANT_armv81((void *)v3, (const char *)2);
  a3 = v59;
  v5 = (v71 & v73) - (v66 & 0x3FFE0000000000);
  if (!v5)
    return _os_object_release_internal_n_VARIANT_armv81((void *)v3, (const char *)2);
LABEL_5:
  if (!v4)
  {
    v6 = *(_DWORD *)(v3 + 84);
    v7 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v8 = *(_QWORD *)(v7 + 200);
    if ((_DWORD)v8)
    {
      v9 = (unsigned __int16)v6 >> 12;
      v10 = v6 & 0xFFF;
      if ((v6 & 0xFFF) != 0)
      {
        if (((unsigned __int16)v8 & 0xFFFu) > v10)
          v10 = v8 & 0xFFF;
        if (v9 <= v10 >> 8)
          v11 = 0x40000000;
        else
          v11 = 1140912128;
        v12 = v11 & v6;
        v13 = v8 & 0x880F0000 | v10;
      }
      else
      {
        v14 = v8 | 0x40000000;
        if ((v8 & 0xFFF) == 0)
          v14 = *(_QWORD *)(v7 + 200);
        if (v9 <= ((v14 >> 8) & 0xF))
          goto LABEL_20;
        v13 = v14 & 0xFFFF0FFF;
        v12 = v6 & 0x400F000;
      }
      v14 = v13 | v12;
    }
    else
    {
      v14 = v6 & 0xFFF0FFFF;
    }
LABEL_20:
    *(_QWORD *)(v7 + 200) = v14;
    v75 = v8 & 0xFFF0FFFF;
    goto LABEL_21;
  }
  v75 = 0;
LABEL_21:
  v74 = a3;
  if ((*(_DWORD *)(v3 + 80) & 0x400000) != 0)
    atomic_fetch_and_explicit((atomic_uint *volatile)(v3 + 80), 0xFFBFFFFF, memory_order_relaxed);
  if (((*(_DWORD *)(v3 + 80) << 8) & 0x3000000) != 0)
    v15 = (*(_DWORD *)(v3 + 80) << 8) & 0x3000000 | a3 & 0xFCEDFFFF | 0x100000;
  else
    v15 = a3 & 0xFFEDFFFF | 0x100000;
  v16 = v15 & 0x1000002;
  v17 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_27:
  if (v16 == 2)
    started = _dispatch_last_resort_autorelease_pool_push(a2);
  v76 = v5;
  v18 = *(_BYTE **)(v3 + 200);
  v80 = 0uLL;
  if (v18 && (*v18 & 0x20) != 0)
    *(_QWORD *)(v17 + 192) = v18 + 40;
  v77 = (__objc2_class ***)(v17 + 160);
  v80 = *(_OWORD *)(v17 + 160);
  *(_QWORD *)(v17 + 160) = v3;
  *(_QWORD *)(v17 + 168) = &v80;
LABEL_33:
  v19 = 6;
  while (v19)
  {
    v20 = v19--;
    if (*(_QWORD *)(v3 + 8 * v19 + 152))
    {
      v21 = v20;
      v22 = v20 << 32;
      v23 = *(_QWORD *)(v3 + 56);
      while (1)
      {
        if ((v23 & 0x700000000uLL) <= v22)
          goto LABEL_43;
        if ((v23 & 0x8000000000) != 0)
          break;
        v24 = v23;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v3 + 56), (unint64_t *)&v24, v23 & 0xFFFFFFF8FFFFFFFFLL | v22, memory_order_relaxed, memory_order_relaxed);
        v39 = v24 == v23;
        v23 = v24;
        if (v39)
        {
          v25 = *(_QWORD *)(v17 + 232);
          if (v25)
          {
            *(_BYTE *)(v25 + 45) |= 2u;
            started = _dispatch_return_to_kernel_0();
          }
LABEL_43:
          *(_BYTE *)(v3 + 100) = v20;
          v26 = v3 + 8 * v19;
          v27 = *(_QWORD *)(v26 + 104);
          if (!v27)
          {
            started = _dispatch_wait_for_enqueuer((unint64_t *)(v26 + 104));
            v27 = started;
          }
          while (2)
          {
            if ((*(_QWORD *)v27 & 0xFFFFFFFFFFFFF001) == 1)
            {
              *(_DWORD *)(a2 + 16) = v21;
              *(_QWORD *)(a2 + 8) = v27;
              *(_BYTE *)(v3 + 100) = 0;
              v5 = v76;
              *(_OWORD *)v77 = v80;
              *(_QWORD *)(v17 + 192) = 0;
              v47 = *(__objc2_class ***)(v3 + 24);
              goto LABEL_115;
            }
            v28 = *(_QWORD *)(v27 + 16);
            v29 = v3 + 8 * ((int)v21 - 1);
            *(_QWORD *)(v29 + 104) = v28;
            if (!v28)
            {
              v30 = v27;
              atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v29 + 152), (unint64_t *)&v30, 0, memory_order_release, memory_order_relaxed);
              if (v30 != v27)
              {
                started = v27 + 16;
                v28 = *(_QWORD *)(v27 + 16);
                if (!v28)
                {
                  started = _dispatch_wait_for_enqueuer((unint64_t *)started);
                  v28 = started;
                }
                *(_QWORD *)(v29 + 104) = v28;
              }
            }
            if (*(_QWORD *)(v17 + 40))
              started = _dispatch_return_to_kernel_0();
            v31 = *(uint64_t (***)(uint64_t))(v17 + 192);
            if (v31)
              started = (*v31)(v3);
            v32 = *(_QWORD *)v27;
            if (*(_QWORD *)v27 >= 0x1000uLL)
            {
              if (*(_QWORD *)(v32 + 40) == 1)
                started = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v32 + 48))(v27, 0, (v15 >> 21) & 1);
              else
                started = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v32 + 64))(v27, a2, v15 & 0xFFFD0000);
LABEL_104:
              if (v31)
                started = v31[1](v3);
              if (!v28)
                goto LABEL_33;
              v21 = *(unsigned __int8 *)(v3 + 100);
              v27 = v28;
              if ((*(_DWORD *)(v3 + 60) & 7u) > v21)
                goto LABEL_33;
              continue;
            }
            break;
          }
          if ((v15 & 0x1000000) != 0)
          {
            v33 = (void *)MEMORY[0x18D766D94](started);
            v32 = *(_QWORD *)v27;
          }
          else
          {
            v33 = 0;
          }
          v34 = *(_QWORD *)(v27 + 24);
          if ((v32 & 4) != 0)
            *(_QWORD *)(v27 + 24) = -1;
          v35 = *(_QWORD *)(v27 + 8);
          if (v35 == -1)
          {
            v38 = 0;
          }
          else
          {
            v36 = *(_QWORD *)(v17 + 200);
            if (((v36 >> 8) & 0xF) != 0)
              v37 = 256 << ((BYTE1(v36) & 0xFu) - 1);
            else
              v37 = 0;
            v38 = v37 & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(v17 + 200);
            if ((v35 & 0xFFFFFF) != 0)
            {
              if ((v35 & 0xFFFFFFuLL) >= (v37 & 0xFFFFFF00))
              {
                v39 = (v36 & 0x44000000) == 0 && (*(_QWORD *)(v27 + 8) & 0x10000000) == 0;
                if (!v39)
                  v38 = v35 & 0xFFFFFF;
              }
            }
            else if ((unsigned __int16)v36 >> 12)
            {
              v38 = (256 << (((unsigned __int16)v36 >> 12) - 1)) | 0xFF;
            }
          }
          v40 = v32 & 4;
          v41 = v38 & 0xFFFFFFFF02FFFFFFLL;
          v42 = *(_QWORD *)(v17 + 32);
          if ((v42 & 0x1000000) != 0)
          {
            if (!v41)
            {
              v41 = v42 & 0xFFFFFFFFFEFFFFFFLL;
              goto LABEL_84;
            }
LABEL_93:
            _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(v41, v34, v40 | 2);
          }
          else
          {
            if (v41 == (v42 & 0xFFFFFFFF77FFFFFFLL))
              goto LABEL_76;
LABEL_84:
            if (v41)
              goto LABEL_93;
LABEL_76:
            if (v34 != -1)
            {
              if (*(_QWORD *)(v17 + 224) != v34)
              {
                v41 = 0;
                goto LABEL_93;
              }
              if ((v32 & 4) != 0 && v34)
              {
                if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v34 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
                  _dispatch_async_redirect_invoke_cold_1();
LABEL_95:
                v43 = *(_QWORD *)(v17 + 176);
                if (v43)
                  v44 = *(_DWORD *)(v43 + 8) + 1;
                else
                  v44 = 1;
                v40 = v27;
                if (v44 <= _dispatch_continuation_cache_limit)
                {
                  v40 = 0;
                  *(_QWORD *)(v27 + 16) = v43;
                  *(_DWORD *)(v27 + 8) = v44;
                  *(_QWORD *)(v17 + 176) = v27;
                }
LABEL_100:
                if ((v32 & 8) != 0)
                {
                  v45 = *(_QWORD *)(v27 + 48);
                  v46 = *(_QWORD *)(*(_QWORD *)v45 + 40);
                  if (v46 != 514)
                    _dispatch_queue_override_invoke_cold_1(v46);
                  _dispatch_client_callout(*(_QWORD *)(v27 + 40), *(uint64_t (**)(void))(v27 + 32));
                  started = dispatch_group_leave_VARIANT_armv81(v45);
                  if (!v40)
                    goto LABEL_102;
                }
                else
                {
                  started = _dispatch_client_callout(*(_QWORD *)(v27 + 40), *(uint64_t (**)(void))(v27 + 32));
                  if (!v40)
                  {
LABEL_102:
                    if (!v33)
                      goto LABEL_104;
                    goto LABEL_103;
                  }
                }
                _dispatch_continuation_free_to_cache_limit_VARIANT_armv81(v40);
                if (!v33)
                  goto LABEL_104;
LABEL_103:
                objc_autoreleasePoolPop(v33);
                goto LABEL_104;
              }
            }
          }
          if ((v32 & 4) != 0)
            goto LABEL_95;
          goto LABEL_100;
        }
      }
      atomic_fetch_xor_explicit((atomic_ullong *volatile)(v3 + 56), 0x8000000000uLL, memory_order_acquire);
      goto LABEL_33;
    }
  }
  v47 = 0;
  v5 = v76 & 1 | 0x40020000000000;
  *(_OWORD *)v77 = v80;
  *(_QWORD *)(v17 + 192) = 0;
LABEL_115:
  v16 = v15 & 0x1000002;
  if ((v15 & 0x1000002) == 2)
  {
    v80 = *(_OWORD *)v77;
    *(_QWORD *)(v17 + 160) = v3;
    *(_QWORD *)(v17 + 168) = &v80;
    _dispatch_last_resort_autorelease_pool_pop(a2);
    *(_OWORD *)v77 = v80;
  }
  if ((unint64_t)v47 + 1 > 1)
  {
LABEL_133:
    if ((v15 & 0x40000) == 0)
LABEL_134:
      *(_QWORD *)(v17 + 200) = *(_QWORD *)(v17 + 200) & 0xF0000 | v75;
  }
  else
  {
    v48 = *(_QWORD *)(v3 + 56);
    do
    {
      v49 = v48;
      v50 = v48 - v5;
      v51 = v50 & 0xFFFFFFF700000001;
      if (!(v49 >> 55))
      {
        if ((v49 & 0x8000000000) != 0)
        {
          atomic_fetch_xor_explicit((atomic_ullong *volatile)(v3 + 56), 0x8000000000uLL, memory_order_acquire);
          if ((v74 & 1) != 0)
            goto LABEL_27;
          v47 = *v77;
          if (((uint64_t)(**v77)[1].isa & 0x10000) != 0)
            goto LABEL_27;
          goto LABEL_133;
        }
        if (v47)
          v51 = v50 & 0xFFFFFF7700000001 | 0x8000000000;
        else
          v51 = v50 & 0xFFFFFFF000000001;
      }
      v48 = v49;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v3 + 56), &v48, v51, memory_order_release, memory_order_relaxed);
    }
    while (v48 != v49);
    if ((~v49 & 0x1800000000) == 0)
    {
      v52 = HIDWORD(v49) & 7;
      v53 = *(_DWORD *)(v17 + 200);
      if ((HIWORD(v53) & 0xF) < v52)
      {
        v5 = 0;
        v47 = 0;
        *(_QWORD *)(v17 + 200) = v53 & 0xFFF0FFFF | ((_DWORD)v52 << 16);
        goto LABEL_133;
      }
    }
    v5 = 0;
    v47 = 0;
    if ((v15 & 0x40000) == 0)
      goto LABEL_134;
  }
  if (!v47)
    return _os_object_release_internal_n_VARIANT_armv81((void *)v3, (const char *)2);
  return _dispatch_queue_invoke_finish_VARIANT_armv81((atomic_ullong *)v3, a2, v47, v5);
}

void _dispatch_workloop_barrier_complete_0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t StatusReg;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;

  v5 = 0;
  v6 = a2 << 32;
  v7 = (_QWORD *)(a1 + 192);
LABEL_2:
  v8 = v7;
  v9 = 6;
  do
  {
    if (*v8)
    {
      v10 = (_QWORD *)*(v8 - 6);
      if (!v10)
        v10 = (_QWORD *)_dispatch_wait_for_enqueuer(v8 - 6);
      if (*v10 <= 0xFFFuLL && (*v10 & 0x81) != 0)
      {
        _dispatch_workloop_drain_barrier_waiter_0(a1, (uint64_t)v10, v9, a3, 0);
        return;
      }
      v5 = 1;
    }
    --v8;
    --v9;
  }
  while (v9);
  if (v5 && (a3 & 1) == 0)
  {
    if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 2u, memory_order_relaxed) <= 0)
    {
      dispatch_set_target_queue_VARIANT_mp_cold_2();
    }
    a3 |= 1u;
  }
LABEL_15:
  v12 = *(_QWORD *)(a1 + 56);
  while (1)
  {
    if ((~v12 & 0x2000000002) == 0 && (v12 & 0x800000001) != 0)
    {
      _dispatch_event_loop_ensure_ownership_VARIANT_armv81(a1);
      atomic_fetch_and_explicit((atomic_ullong *volatile)(a1 + 56), 0xFFFFFFF7FFFFFFFDLL, memory_order_relaxed);
      goto LABEL_15;
    }
    v14 = v12 & 0xFFFFFFF8FFFFFFFFLL | v6;
    if (v12 & 0x1000000000 | v6 & 0x1000000000)
      v14 |= 0x800000000uLL;
    v15 = (v12 & 0x700000000) < v6 ? v14 : v12;
    v16 = (v15 & 0xFFFFFFF700000001) - 0x40020000000000;
    if (v5)
      break;
    if ((v12 & 0x8000000000) != 0)
    {
      atomic_fetch_xor_explicit((atomic_ullong *volatile)(a1 + 56), 0x8000000000uLL, memory_order_acquire);
      goto LABEL_2;
    }
    if ((v12 & 0x2000000000) != 0)
    {
      v17 = v16 & 0xFFFFFFF000000000;
      v18 = v12;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v18, v17, memory_order_release, memory_order_relaxed);
      if (v18 == v12)
        goto LABEL_48;
LABEL_32:
      v12 = v18;
    }
    else
    {
      v17 = v16 & 0xFFFFFFF000000001;
      v19 = v12;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v19, v17, memory_order_release, memory_order_relaxed);
      if (v19 == v12)
        goto LABEL_40;
      v12 = v19;
    }
  }
  v17 = v16 | 1;
  v18 = v12;
  atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v18, v17, memory_order_release, memory_order_relaxed);
  if (v18 != v12)
    goto LABEL_32;
  if ((v12 & 0x2000000000) != 0)
  {
LABEL_48:
    if ((v12 & 3) != 2 || (v17 & 1) != 0)
    {
      _dispatch_event_loop_end_ownership_VARIANT_armv81(a1, v12, v17, a3);
      return;
    }
    goto LABEL_50;
  }
LABEL_40:
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if ((~v12 & 0x1800000000) == 0)
  {
    v21 = HIDWORD(v12) & 7;
    v22 = *(_DWORD *)(StatusReg + 200);
    if ((HIWORD(v22) & 0xF) < v21)
      *(_QWORD *)(StatusReg + 200) = v22 & 0xFFF0FFFF | ((_DWORD)v21 << 16);
  }
  if (!v5)
    goto LABEL_50;
  if (((v17 ^ v12) & 1) != 0)
  {
    if ((v17 & 0x2000000000) != 0)
    {
      v23 = (_QWORD *)a1;
      v24 = v17;
      v25 = 1;
LABEL_47:
      _dispatch_event_loop_poke_VARIANT_armv81(v23, v24, v25);
      return;
    }
    (*(void (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24), a1, HIDWORD(v17) & 7);
    return;
  }
  if ((v17 & 0xFF80004000000000) != 0 || (v17 & 0xFFFFFFFD) == 0)
  {
LABEL_50:
    if ((a3 & 1) != 0)
      _os_object_release_internal_n_VARIANT_armv81((void *)a1, (const char *)2);
    return;
  }
  if ((v17 & 0x2000000000) != 0)
  {
    v23 = (_QWORD *)a1;
    v24 = v17;
    v25 = a3 | 0x80000000;
    goto LABEL_47;
  }
  _dispatch_queue_wakeup_with_override_slow_0(a1, v17, a3);
}

_QWORD *_dispatch_workloop_push_VARIANT_armv81(_QWORD *result, _QWORD *a2, unsigned int a3)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  unint64_t StatusReg;
  unint64_t v8;

  if (*a2 <= 0xFFFuLL && (*a2 & 0x81) != 0)
    return _dispatch_workloop_push_waiter_0(result, (unint64_t)a2, a3);
  v4 = *((_DWORD *)result + 21);
  v5 = (v4 >> 8) & 0xF;
  v6 = (unsigned __int16)v4 >> 12;
  if (a3)
    v6 = a3;
  if (v5 > a3)
    v6 = v5;
  a2[2] = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_QWORD *)(StatusReg + 976) = &result[v6 + 18];
  v8 = atomic_exchange_explicit(&result[v6 + 18], (unint64_t)a2, memory_order_release);
  if (v8)
  {
    *(_QWORD *)(v8 + 16) = a2;
    *(_QWORD *)(StatusReg + 976) = 0;
  }
  else
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)result + 2, 2u, memory_order_relaxed);
    result[v6 + 12] = a2;
    *(_QWORD *)(StatusReg + 976) = 0;
    return (_QWORD *)_dispatch_workloop_wakeup_VARIANT_armv81();
  }
  return result;
}

_QWORD *_dispatch_workloop_push_waiter_0(_QWORD *result, unint64_t a2, unsigned int a3)
{
  uint64_t v3;
  atomic_ullong *v4;
  unint64_t StatusReg;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  atomic_ullong *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t *v31;

  LODWORD(v3) = (__clz(__rbit32((*(_DWORD *)(a2 + 8) >> 8) & 0x3FFF)) + 1) & 0xF;
  if (((*(_DWORD *)(a2 + 8) >> 8) & 0x3FFF) == 0)
    LODWORD(v3) = 0;
  if (v3 <= a3)
    LODWORD(v3) = a3;
  if ((_DWORD)v3)
    v3 = v3;
  else
    v3 = 4;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = &result[(int)v3 + 18];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_QWORD *)(StatusReg + 976) = v4;
  v6 = atomic_exchange_explicit(v4, a2, memory_order_release);
  if (v6)
  {
    *(_QWORD *)(v6 + 16) = a2;
    *(_QWORD *)(StatusReg + 976) = 0;
    return result;
  }
  v7 = &result[(int)v3 - 1];
  v7[13] = a2;
  *(_QWORD *)(StatusReg + 976) = 0;
  v8 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 0x80) != 0)
  {
    v9 = result[3];
    if (v9 < (unint64_t)&_dispatch_root_queues || v9 >= (unint64_t)&_dispatch_queue_serial_numbers)
    {
      *(_QWORD *)(a2 + 56) = result;
      *(_QWORD *)a2 = v8 & 0xFFFFFFFFFFFFFF7FLL;
      atomic_fetch_add_explicit((atomic_uint *volatile)result + 2, 2u, memory_order_relaxed);
      return (_QWORD *)_dispatch_workloop_wakeup_VARIANT_armv81();
    }
  }
  v10 = (unint64_t *)(a2 + 16);
  v11 = v7 + 13;
  v12 = result[7];
  v13 = v3 << 32;
  v14 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL | 0x60000000000002;
  do
  {
    v15 = v12;
    v16 = v12 & 0xFFFFFFF8FFFFFFFFLL | v13;
    if (v12 & 0x1000000000 | v13 & 0x1000000000)
      v16 |= 0x800000000uLL;
    if ((v12 & 0x700000000) < v13)
      v17 = v16;
    else
      v17 = v12;
    v18 = v17 | 0x8000000000;
    v19 = v14 | v17 & 0x7700000001;
    if ((v12 & 0x40FFFFFFFDLL) != 0)
      v19 = v18;
    atomic_compare_exchange_strong_explicit(result + 7, &v12, v19, memory_order_release, memory_order_relaxed);
  }
  while (v12 != v15);
  if ((v19 & 0x2000000000) != 0 && *(_QWORD *)(a2 + 48) != -4)
    *(_BYTE *)(a2 + 106) = *(_BYTE *)(a2 + 106) & 0xFB | (4 * (*(_DWORD *)(a2 + 100) == *(_DWORD *)(StatusReg + 24)));
  if (((v19 ^ v15) & 0x40000000000000) != 0)
  {
    if ((*(_BYTE *)(a2 + 106) & 4) == 0)
      return (_QWORD *)_dispatch_workloop_barrier_complete_0();
    v20 = *v11;
    if (!*v11)
    {
      v27 = a2;
      v28 = result;
      v29 = (uint64_t)&result[(int)v3 + 18];
      v31 = v11;
      v26 = (unint64_t *)(a2 + 16);
      v25 = _dispatch_wait_for_enqueuer(v11);
      v10 = v26;
      v4 = (atomic_ullong *)v29;
      v11 = v31;
      v20 = v25;
      a2 = v27;
      result = v28;
    }
    if (v20 == a2)
    {
      v21 = v10;
      v30 = v11;
      v22 = v4;
      *(_BYTE *)(a2 + 106) |= 8u;
      if ((*(_BYTE *)a2 & 0x80) != 0)
        *(_QWORD *)(a2 + 56) = result;
      v23 = *v10;
      *v11 = *v21;
      if (!v23)
      {
        v24 = a2;
        atomic_compare_exchange_strong_explicit(v22, &v24, 0, memory_order_release, memory_order_relaxed);
        if (v24 != a2)
        {
          result = (_QWORD *)*v21;
          if (!*v21)
            result = (_QWORD *)_dispatch_wait_for_enqueuer(v21);
          *v30 = (unint64_t)result;
        }
      }
    }
    else
    {
      return (_QWORD *)_dispatch_workloop_barrier_complete_0();
    }
  }
  else if (((v19 ^ v15) & 0x700000000) != 0 && (v19 & 0xFF80004000000000) == 0)
  {
    if ((v19 & 1) != 0)
    {
      if ((v19 & 0x2000000000) != 0)
        return _dispatch_event_loop_poke_VARIANT_armv81(result, v19, 0x80000000);
      return (_QWORD *)_dispatch_queue_wakeup_with_override_slow_0();
    }
    if ((v19 & 0x2000000000) == 0 && (v19 & 0xFFFFFFFC) != 0)
      return (_QWORD *)_dispatch_queue_wakeup_with_override_slow_0();
  }
  return result;
}

uint64_t dispatch_thread_get_current_override_qos_floor_VARIANT_armv81()
{
  unsigned int v0;
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t result;
  uint64_t v6;

  v0 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 200);
  v1 = (v0 >> 8) & 0xF;
  v2 = (unsigned __int16)v0 >> 12;
  v3 = HIWORD(v0) & 0xF;
  if (v1 <= v2)
    v1 = v2;
  if (v1 > v3)
    v3 = v1;
  v4 = v3 - 1;
  result = 0;
  v6 = 0x2100000001;
  switch(v4)
  {
    case 0u:
      return 0x500000001;
    case 1u:
      return 0x900000001;
    case 2u:
      return 0x1100000001;
    case 3u:
      return 0x1500000001;
    case 4u:
      return 0x1900000001;
    case 5u:
      return v6;
    case 0xEu:
      return result;
    default:
      return 1;
  }
}

uint64_t dispatch_thread_override_self_VARIANT_armv81(int a1)
{
  unsigned int v1;
  unint64_t v2;
  unsigned int v3;
  unint64_t StatusReg;
  unsigned int v5;

  HIDWORD(v2) = a1 - 5;
  LODWORD(v2) = a1 - 5;
  v1 = v2 >> 2;
  v3 = 6;
  switch(v1)
  {
    case 0u:
      v3 = 1;
      break;
    case 1u:
      v3 = 2;
      break;
    case 3u:
    case 4u:
    case 5u:
      v3 = v1;
      break;
    case 7u:
      break;
    default:
      v3 = 0;
      break;
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  _pthread_workqueue_override_start_direct();
  v5 = *(_DWORD *)(StatusReg + 200);
  if ((HIWORD(v5) & 0xF) < v3)
    *(_QWORD *)(StatusReg + 200) = v5 & 0xFFF0FFFF | (v3 << 16);
  return 0;
}

uint64_t dispatch_lock_override_start_with_debounce_VARIANT_armv81()
{
  return _pthread_workqueue_override_start_direct_check_owner();
}

uint64_t dispatch_lock_override_end_VARIANT_armv81(int a1)
{
  unsigned int v1;
  unint64_t v2;
  unsigned int v3;
  unint64_t StatusReg;
  unsigned int v5;

  HIDWORD(v2) = a1 - 5;
  LODWORD(v2) = a1 - 5;
  v1 = v2 >> 2;
  if (v1 > 7)
    v3 = 0;
  else
    v3 = dword_18A06EA80[v1];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_DWORD *)(StatusReg + 200);
  if ((HIWORD(v5) & 0xF) < v3)
    *(_QWORD *)(StatusReg + 200) = v5 & 0xFFF0FFFF | (v3 << 16);
  return 0;
}

void _dispatch_queue_wakeup_VARIANT_armv81(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _BOOL8 v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;

  if (a4 && (a3 & 1) == 0)
  {
    if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 2u, memory_order_relaxed) <= 0)
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
      return;
    }
    a3 |= 1u;
  }
  if ((a3 & 4) != 0)
  {
    v28 = *(_DWORD *)(a1 + 84);
    v29 = (unsigned __int16)v28 >> 12;
    if ((_DWORD)a2)
      v29 = a2;
    v30 = (v28 >> 8) & 0xF;
    if (v29 <= v30)
      v31 = v30;
    else
      v31 = v29;
    _dispatch_lane_class_barrier_complete_0((atomic_ullong *)a1, v31, a3, (__objc2_class **)a4, 0x40020000000000);
    return;
  }
  if (!a4)
  {
    if (!(_DWORD)a2)
      goto LABEL_72;
    v20 = *(_QWORD *)(a1 + 56);
    v21 = a2 << 32;
    do
    {
      if ((v20 & 0x40FFFFFFFDLL) == 0)
        goto LABEL_72;
      v22 = v20;
      v23 = v20 & 0x700000000;
      v24 = v22 & 0xFFFFFFF8FFFFFFFFLL | v21;
      if (v22 & 0x1000000000 | v21 & 0x1000000000)
        v24 |= 0x800000000uLL;
      v25 = v23 < v21 ? v24 : v22;
      v26 = (v22 & 0xFF80002000000000) == 0x2000000000 && (unint64_t)((v22 & 0x4000000000) == 0);
      v18 = v25 | v26;
      if ((v25 | v26) == v22)
        goto LABEL_72;
      v20 = v22;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v20, v18, memory_order_relaxed, memory_order_relaxed);
    }
    while (v20 != v22);
    v19 = v18 ^ v22;
    v4 = 1;
    if ((a3 & 1) == 0 && (v19 & 1) != 0)
    {
      if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF
        && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 2u, memory_order_relaxed) <= 0)
      {
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
        __break(1u);
        goto LABEL_78;
      }
      a3 |= 1u;
      v4 = 1;
    }
    a4 = 1;
    goto LABEL_59;
  }
  v4 = 0x4000000000;
  if ((__objc2_class **)a4 != &_dispatch_mgr_q)
    v4 = 1;
  v5 = *(_DWORD *)(a1 + 84);
  v6 = (unsigned __int16)v5 >> 12;
  if ((_DWORD)a2)
    v6 = a2;
  LODWORD(v7) = (v5 >> 8) & 0xF;
  if (v6 <= v7)
    v7 = v7;
  else
    v7 = v6;
  v8 = *(_QWORD *)(a1 + 56);
  v9 = v7 << 32;
  do
  {
    v10 = v8;
    v11 = v8 & 0x700000000;
    v12 = v10 & 0xFFFFFFF8FFFFFFFFLL | v9;
    if (v10 & 0x1000000000 | v9 & 0x1000000000)
      v12 |= 0x800000000uLL;
    if (v11 < v9)
      v13 = v12;
    else
      v13 = v10;
    if ((v10 & 0x180000000000000) == 0x80000000000000)
      v14 = v13 & 0xFF7FFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if ((a3 & 0x20) != 0)
      v13 = v14;
    v15 = (unint64_t)((v10 & 0xFFFFFFFC) == 0) << 38;
    if ((__objc2_class **)a4 != &_dispatch_mgr_q)
      v15 = 1;
    v16 = v13 | v15;
    if (v13 >> 55)
      v17 = v13;
    else
      v17 = v16;
    if ((v10 & 0x4000000001) != 0)
      v18 = v13;
    else
      v18 = v17;
    if ((a3 & 2) != 0)
    {
      v18 |= 0x8000000000uLL;
    }
    else if (v18 == v10)
    {
      goto LABEL_72;
    }
    v8 = v10;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v8, v18, memory_order_release, memory_order_relaxed);
  }
  while (v8 != v10);
  v19 = v10 ^ v18;
LABEL_59:
  if ((v19 & v4) != 0)
  {
    if (a4 == 1)
      a4 = *(_QWORD *)(a1 + 24);
    if ((v18 & 0x2000000000) != 0)
    {
      v27 = 1;
LABEL_64:
      _dispatch_event_loop_poke_VARIANT_armv81((_QWORD *)a1, v18, v27);
      return;
    }
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)a4 + 88))(a4, a1, HIDWORD(v18) & 7);
    return;
  }
  if ((v19 & 0x700000000) == 0)
  {
LABEL_72:
    if ((a3 & 1) != 0)
      _os_object_release_internal_n_VARIANT_armv81((void *)a1, (const char *)2);
    return;
  }
LABEL_78:
  if ((v18 & 0xFF80004000000000) != 0 || (v18 & 0xFFFFFFFD) == 0)
    goto LABEL_72;
  if ((v18 & 0x2000000000) != 0)
  {
    v27 = a3 | 0x80000000;
    goto LABEL_64;
  }
  _dispatch_queue_wakeup_with_override_slow_0(a1, v18, a3);
}

void _dispatch_lane_class_barrier_complete_0(atomic_ullong *a1, uint64_t a2, int a3, __objc2_class **a4, uint64_t a5)
{
  char v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t StatusReg;
  uint64_t v23;
  unsigned int v24;
  atomic_ullong *v25;
  uint64_t v26;
  unsigned int v27;
  int v28;

  if (a4 == &_dispatch_mgr_q)
  {
    v10 = 0;
    v11 = 0x4000000000;
    a4 = &_dispatch_mgr_q;
  }
  else if (a4)
  {
    v10 = 0;
    if (a4 == (__objc2_class **)1)
      a4 = (__objc2_class **)a1[3];
    v11 = 1;
  }
  else
  {
    v11 = 0;
    v10 = 1;
  }
  v12 = a2 << 32;
LABEL_9:
  v13 = a1[7];
  do
  {
    if ((~v13 & 0x2000000002) == 0 && (v13 & 0x800000001) != 0)
    {
      v28 = a3;
      _dispatch_event_loop_ensure_ownership_VARIANT_armv81((uint64_t)a1);
      a3 = v28;
      atomic_fetch_and_explicit(a1 + 7, 0xFFFFFFF7FFFFFFFDLL, memory_order_relaxed);
      goto LABEL_9;
    }
    v14 = v13 - a5;
    v15 = (v13 - a5) & 0xFFFFFFF8FFFFFFFFLL | v12;
    if ((v13 - a5) & 0x1000000000 | v12 & 0x1000000000)
      v15 |= 0x800000000uLL;
    if (((v13 - a5) & 0x700000000) < v12)
      v16 = v15;
    else
      v16 = v13 - a5;
    v17 = v16 & 0xFFFFFFF700000001;
    if (v13 >> 55)
    {
      v18 = v16 & 0xFFFFFFF700000000;
      if ((v13 & 0x2000000000) == 0)
        v18 = v17;
    }
    else if ((v10 & 1) != 0)
    {
      if ((v13 & 0x8000000000) != 0)
      {
        atomic_fetch_xor_explicit(a1 + 7, 0x8000000000uLL, memory_order_acquire);
        (*(void (**)(atomic_ullong *, uint64_t, _QWORD))(*a1 + 80))(a1, a2, a3 | 4u);
        return;
      }
      v18 = v16 & 0xFFFFFFF000000001;
    }
    else
    {
      if ((v13 & 0x4000000001) != 0)
        v19 = 0;
      else
        v19 = v11;
      v18 = v17 | v19;
    }
    v20 = v13;
    atomic_compare_exchange_strong_explicit(a1 + 7, &v20, v18, memory_order_release, memory_order_relaxed);
    v21 = v20 == v13;
    v13 = v20;
  }
  while (!v21);
  if ((v14 & 0x2000000000) != 0)
  {
    if ((v14 & 2) == 0 || ((v18 | v14) & 1) != 0)
    {
      _dispatch_event_loop_end_ownership_VARIANT_armv81((uint64_t)a1, v14, v18, a3);
      return;
    }
    goto LABEL_42;
  }
  if ((~v14 & 0x1800000000) == 0)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v23 = HIDWORD(v14) & 7;
    v24 = *(_DWORD *)(StatusReg + 200);
    if ((HIWORD(v24) & 0xF) < v23)
      *(_QWORD *)(StatusReg + 200) = v24 & 0xFFF0FFFF | ((_DWORD)v23 << 16);
  }
  if (!a4)
    goto LABEL_42;
  if (((v18 ^ v14) & v11) != 0)
  {
    if ((v18 & 0x2000000000) != 0)
    {
      v25 = a1;
      v26 = v18;
      v27 = 1;
LABEL_39:
      _dispatch_event_loop_poke_VARIANT_armv81(v25, v26, v27);
      return;
    }
    ((void (*)(__objc2_class **, atomic_ullong *, unint64_t))(*a4)[2].superclass)(a4, a1, HIDWORD(v18) & 7);
    return;
  }
  if ((v18 & 0xFF80004000000000) != 0 || (v18 & 0xFFFFFFFD) == 0)
  {
LABEL_42:
    if ((a3 & 1) != 0)
      _os_object_release_internal_n_VARIANT_armv81(a1, (const char *)2);
    return;
  }
  if ((v18 & 0x2000000000) != 0)
  {
    v27 = a3 | 0x80000000;
    v25 = a1;
    v26 = v18;
    goto LABEL_39;
  }
  _dispatch_queue_wakeup_with_override_slow_0((uint64_t)a1, v18, a3);
}

void _dispatch_lane_wakeup_VARIANT_armv81(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 4) != 0)
    _dispatch_lane_barrier_complete_0(a1, a2, a3);
  else
    _dispatch_queue_wakeup_VARIANT_armv81(a1, a2, a3, *(_QWORD *)(a1 + 48) != 0);
}

void _dispatch_lane_barrier_complete_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;

  if (!*(_QWORD *)(a1 + 48) || *(_QWORD *)(a1 + 56) >> 55)
  {
    v6 = 0;
LABEL_30:
    _dispatch_lane_class_barrier_complete_0((atomic_ullong *)a1, a2, a3, (__objc2_class **)v6, ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) + 0x40000000000000);
    return;
  }
  v7 = *(_QWORD *)(a1 + 104);
  if (!v7)
    v7 = _dispatch_wait_for_enqueuer((unint64_t *)(a1 + 104));
  v8 = *(unsigned __int16 *)(a1 + 80);
  v9 = *(_QWORD *)v7;
  if (v8 == 1)
  {
    if (v9 <= 0xFFF && (*(_QWORD *)v7 & 0x81) != 0)
      goto LABEL_21;
    goto LABEL_25;
  }
  if (v9 >= 0x1000)
  {
    if ((*(_QWORD *)(v9 + 40) & 0xF0) == 0x10)
    {
      if ((*(_DWORD *)(v7 + 80) & 0x80000) != 0 || v8 <= 1 || (*(_DWORD *)(v7 + 80) & 0x80000) != 0)
        goto LABEL_25;
    }
    else if (v8 <= 1)
    {
      goto LABEL_25;
    }
LABEL_23:
    _dispatch_lane_drain_non_barriers_0((atomic_ullong *)a1, v7, a3);
    return;
  }
  if ((v9 & 2) == 0)
  {
    if (v8 < 2)
      goto LABEL_25;
    goto LABEL_23;
  }
  if ((v9 & 0x81) != 0)
  {
LABEL_21:
    _dispatch_lane_drain_barrier_waiter_0((atomic_ullong *)a1, v7, a3, 0);
    return;
  }
LABEL_25:
  if ((a3 & 1) != 0)
  {
LABEL_29:
    v6 = 1;
    goto LABEL_30;
  }
  if (*(_DWORD *)(a1 + 8) == 0x7FFFFFFF
    || (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 2u, memory_order_relaxed) > 0)
  {
    LODWORD(a3) = a3 | 1;
    goto LABEL_29;
  }
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
  __break(1u);
}

void _dispatch_lane_push_VARIANT_armv81(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  uint64_t v4;
  unint64_t StatusReg;
  unint64_t v6;
  _QWORD *v8;
  uint64_t v9;

  if (*a2 <= 0xFFFuLL && (*a2 & 0x81) != 0)
  {
    _dispatch_lane_push_waiter_0((_QWORD *)a1, (unint64_t)a2, a3);
    return;
  }
  if (((*(_DWORD *)(a1 + 84) >> 8) & 0xFu) >= a3)
    v4 = 0;
  else
    v4 = a3;
  a2[2] = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_QWORD *)(StatusReg + 976) = a1 + 48;
  v6 = atomic_exchange_explicit((atomic_ullong *volatile)(a1 + 48), (unint64_t)a2, memory_order_release);
  if (v6)
  {
    if ((*(_DWORD *)(a1 + 60) & 7) != 0 && (*(_DWORD *)(a1 + 60) & 7u) >= v4)
    {
      *(_QWORD *)(v6 + 16) = a2;
      *(_QWORD *)(StatusReg + 976) = 0;
      return;
    }
    atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 2u, memory_order_relaxed);
    v8 = (_QWORD *)(v6 + 16);
    v9 = 1;
  }
  else
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 2u, memory_order_relaxed);
    v8 = (_QWORD *)(a1 + 104);
    v9 = 3;
  }
  *v8 = a2;
  *(_QWORD *)(StatusReg + 976) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v4, v9);
}

void _dispatch_lane_push_waiter_0(_QWORD *a1, unint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unint64_t StatusReg;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;

  if (*(_QWORD *)(a2 + 48) == -4)
    v3 = a3;
  else
    v3 = 0;
  *(_QWORD *)(a2 + 16) = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_QWORD *)(StatusReg + 976) = a1 + 6;
  v5 = atomic_exchange_explicit(a1 + 6, a2, memory_order_release);
  if (v5)
  {
    *(_QWORD *)(v5 + 16) = a2;
    *(_QWORD *)(StatusReg + 976) = 0;
    if ((_DWORD)v3)
    {
      v9 = a1[7];
      v10 = v3 << 32;
      while (1)
      {
        v11 = v9 & 0xFFFFFFF8FFFFFFFFLL | v10;
        if (v9 & 0x1000000000 | v10 & 0x1000000000)
          v11 |= 0x800000000uLL;
        v12 = (v9 & 0x700000000) < v10 ? v11 : v9;
        if (v9 == v12)
          break;
        v13 = v9;
        atomic_compare_exchange_strong_explicit(a1 + 7, &v13, v12, memory_order_relaxed, memory_order_relaxed);
        v14 = v13 == v9;
        v9 = v13;
        if (v14)
        {
          if ((v12 & 0xFF80004000000000) != 0)
            return;
          if ((v12 & 1) != 0)
          {
            if ((v12 & 0x2000000000) == 0)
              goto LABEL_24;
            goto LABEL_55;
          }
          if ((v12 & 0x2000000000) != 0 || (v12 & 0xFFFFFFFC) == 0)
            return;
          goto LABEL_24;
        }
      }
    }
    return;
  }
  a1[13] = a2;
  *(_QWORD *)(StatusReg + 976) = 0;
  v6 = *((_DWORD *)a1 + 20);
  if ((v6 & 0x40000) != 0)
  {
    v6 = *((_DWORD *)a1 + 20);
    if ((v6 & 0x1000000) == 0)
    {
      v7 = *(_QWORD *)a2;
      goto LABEL_64;
    }
  }
  v7 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 0x80) == 0)
  {
    v8 = a1[7];
    goto LABEL_29;
  }
  v8 = a1[7];
  v6 = *((_DWORD *)a1 + 20);
  if ((v6 & 0x1000000) != 0
    || (v8 & 0x3000000000) != 0
    && ((v15 = a1[3], v15 < (unint64_t)&_dispatch_root_queues)
     || v15 >= (unint64_t)&_dispatch_queue_serial_numbers))
  {
LABEL_64:
    *(_QWORD *)a2 = v7 & 0xFFFFFFFFFFFFFF7FLL;
    *(_QWORD *)(a2 + 56) = a1;
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 80))(a1, v3, 2);
    return;
  }
LABEL_29:
  v16 = (uint64_t *)(a2 + 16);
  v17 = ((unint64_t)(unsigned __int16)v6 << 41) - 0x20000000000;
  v18 = v3 << 32;
  v19 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL | 0x60000000000002;
  do
  {
    v20 = v8;
    v21 = v8 & 0x700000000;
    v22 = v8 & 0xFFFFFFF8FFFFFFFFLL | v18;
    if ((v22 & 0x1000000000) != 0)
      v22 |= 0x800000000uLL;
    if (v21 >= v18)
      v22 = v20;
    v23 = v22 | 0x8000000000;
    if ((v20 & 0xFFE00000FFFFFFFCLL) == 0
      && ((v20 & 0x2000000000) == 0 || (v20 & 0x4000000001) == 0)
      && ((v20 & 0x10000000000) != 0 || !((v17 + v22) >> 53)))
    {
      v23 = v19 | v22 & 0x7700000001;
    }
    v8 = v20;
    atomic_compare_exchange_strong_explicit(a1 + 7, &v8, v23, memory_order_release, memory_order_relaxed);
  }
  while (v8 != v20);
  if ((v20 & 0x2000000000) != 0 && *(_QWORD *)(a2 + 48) != -4)
    *(_BYTE *)(a2 + 106) = *(_BYTE *)(a2 + 106) & 0xFB | (4 * (*(_DWORD *)(a2 + 100) == *(_DWORD *)(StatusReg + 24)));
  if (((v23 ^ v20) & 0x40000000000000) != 0)
  {
    if ((*(_BYTE *)(a2 + 106) & 4) != 0 && a1[13] == a2)
    {
      *(_BYTE *)(a2 + 106) |= 8u;
      if ((*(_BYTE *)a2 & 0x80) != 0)
        *(_QWORD *)(a2 + 56) = a1;
      v24 = *v16;
      a1[13] = *v16;
      if (!v24)
      {
        v25 = a2;
        atomic_compare_exchange_strong_explicit(a1 + 6, &v25, 0, memory_order_release, memory_order_relaxed);
        if (v25 != a2)
        {
          v26 = *v16;
          if (!*v16)
            v26 = _dispatch_wait_for_enqueuer((unint64_t *)(a2 + 16));
          a1[13] = v26;
        }
      }
    }
    else
    {
      _dispatch_lane_barrier_complete_0((uint64_t)a1, v3, 0);
    }
    return;
  }
  if (((v23 ^ v20) & 0x700000000) == 0 || (v23 & 0xFF80004000000000) != 0)
    return;
  if ((v23 & 1) != 0)
  {
    if ((v23 & 0x2000000000) != 0)
    {
      v12 = v23;
LABEL_55:
      _dispatch_event_loop_poke_VARIANT_armv81(a1, v12, 0x80000000);
      return;
    }
  }
  else if ((v23 & 0x2000000000) != 0 || (v23 & 0xFFFFFFFC) == 0)
  {
    return;
  }
  v12 = v23;
LABEL_24:
  _dispatch_queue_wakeup_with_override_slow_0((uint64_t)a1, v12, 0);
}

void _dispatch_lane_concurrent_push_VARIANT_armv81(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  if ((*(_BYTE *)(a1 + 87) & 8) == 0
    || *(_QWORD *)a2 < 0x1000uLL
    || *(_QWORD *)(*(_QWORD *)a2 + 40) == 1
    || *(_QWORD *)(*(_QWORD *)a2 + 40) == 19 && (_dispatch_source_is_timer_VARIANT_mp(a2) & 1) != 0)
  {
    if (*(_QWORD *)(a1 + 48))
    {
LABEL_7:
      _dispatch_lane_push_VARIANT_armv81(a1, (_QWORD *)a2, a3);
      return;
    }
    v6 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 <= 0xFFFuLL)
    {
      if ((v6 & 0x83) != 0)
        goto LABEL_7;
    }
    else if ((*(_QWORD *)(v6 + 40) & 0xF0) == 0x10 && (*(_DWORD *)(a2 + 80) & 0x80000) != 0)
    {
      goto LABEL_7;
    }
    v7 = *(_QWORD *)(a1 + 56);
    while ((v7 & 0xFFE0018000000000) == 0)
    {
      v8 = v7;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), (unint64_t *)&v8, v7 + 0x20000000000, memory_order_acquire, memory_order_acquire);
      v9 = v8 == v7;
      v7 = v8;
      if (v9)
      {
        _dispatch_continuation_redirect_push_0((_DWORD *)a1, (_QWORD *)a2);
        return;
      }
    }
    goto LABEL_7;
  }
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot target the cooperative root queue - not implemented";
  qword_1EDF52D38 = a2;
  __break(1u);
}

_DWORD *_dispatch_continuation_redirect_push_0(_DWORD *result, _QWORD *a2)
{
  _DWORD *v3;
  unint64_t StatusReg;
  _QWORD *v5;

  v3 = result;
  if (*a2 >= 0x1000uLL && *(_QWORD *)(*a2 + 40) == 256)
  {
    if (!a2[5])
      a2[5] = (result[20] << 8) & 0x3000000;
    return (_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 3) + 88))(*((_QWORD *)v3 + 3));
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_QWORD **)(StatusReg + 176);
  if (v5)
  {
    *(_QWORD *)(StatusReg + 176) = v5[2];
  }
  else
  {
    result = _dispatch_continuation_alloc_from_heap_VARIANT_armv81();
    v5 = result;
  }
  a2[2] = 0;
  *v5 = &unk_1E1E879B0;
  v5[4] = 0;
  v5[5] = (v3[20] << 8) & 0x3000000;
  v5[6] = v3;
  v5[7] = a2;
  v5[3] = -1;
  v5[1] = -1;
  if (v3[2] == 0x7FFFFFFF || (int)atomic_fetch_add_explicit(v3 + 2, 2u, memory_order_relaxed) > 0)
    return (_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 3) + 88))(*((_QWORD *)v3 + 3));
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
  __break(1u);
  return result;
}

uint64_t dispatch_async_swift_job_VARIANT_armv81(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(*(_QWORD *)a2 + 40) != 1)
    dispatch_async_swift_job_VARIANT_armv81_cold_1(*(_QWORD *)(*(_QWORD *)a2 + 40));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
}

void _dispatch_channel_dispose_VARIANT_armv81(uint64_t *a1, _BYTE *a2)
{
  a1[11] = 0;
  _dispatch_lane_class_dispose_VARIANT_armv81(a1, a2);
}

uint64_t _dispatch_channel_xref_dispose_VARIANT_armv81(uint64_t a1)
{
  BOOL v1;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 88) + 24))
    v1 = (*(_DWORD *)(a1 + 80) & 0x10000000) == 0;
  else
    v1 = 0;
  if (v1)
    _dispatch_channel_xref_dispose_VARIANT_armv81_cold_1(a1);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 80))(a1, 0, 2);
}

_QWORD *_dispatch_channel_invoke_VARIANT_armv81(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (**v25)(uint64_t);
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  __objc2_class **v40;
  uint64_t v41;
  uint64_t v42;
  __objc2_class ***v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v52;
  unint64_t StatusReg;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  atomic_ullong *v75;
  _BYTE v77[24];
  uint64_t v78;
  unsigned int v79;
  int v80;
  uint64_t v81;
  __int128 v82;

  if ((a3 & 3) == 0)
    *(_QWORD *)(a1 + 16) = -1985229329;
  if ((a3 & 2) != 0)
  {
    v4 = a3 & 0x40000;
    v5 = 0x40020000000001;
    goto LABEL_5;
  }
  v52 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) - 0x20000000000;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v54 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
  v4 = a3 & 0x40000;
  v55 = 0xFFE00000FFFFFFFCLL;
  if ((a3 & 0x40000) != 0)
  {
    v56 = 0x4000000000;
  }
  else
  {
    v55 = 0xFFE00040FFFFFFFCLL;
    v56 = 1;
  }
  v57 = a3;
  if ((a3 & 1) != 0)
    v58 = 0xFFE00040FFFFFFFCLL;
  else
    v58 = v55;
  v59 = *(_DWORD *)(StatusReg + 200);
  v60 = (v59 >> 8) & 0xF;
  v61 = (unsigned __int16)v59 >> 12;
  v62 = HIWORD(v59) & 0xF;
  if (v60 <= v61)
    v60 = v61;
  if (v60 > v62)
    v62 = v60;
LABEL_148:
  v63 = *(_QWORD *)(a1 + 56);
  while (1)
  {
    v64 = v63;
    v65 = v63 & v58;
    if ((v63 & v58) != 0)
      break;
    if ((v63 & 0x1000000000) != 0)
    {
      v66 = HIDWORD(v63) & 7;
      if (v66 > v62)
      {
        _pthread_workqueue_override_start_direct();
        v70 = *(_DWORD *)(StatusReg + 200);
        v62 = v66;
        if ((HIWORD(v70) & 0xF) < v66)
        {
          *(_QWORD *)(StatusReg + 200) = v70 & 0xFFF0FFFF | ((_DWORD)v66 << 16);
          v62 = v66;
        }
        goto LABEL_148;
      }
    }
    v67 = (v63 >> 40) & 1;
    if (!((v52 + v64) >> 53))
      LODWORD(v67) = 1;
    if ((_DWORD)v67)
      v68 = 0x60000000000000;
    else
      v68 = 0x20000000000000;
    v69 = v54 | v64 & 0x7700000001 | v68;
LABEL_158:
    v63 = v64;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v63, v69, memory_order_acquire, memory_order_acquire);
    if (v63 == v64)
      goto LABEL_166;
  }
  if ((v57 & 1) == 0)
  {
    v69 = v63 ^ v56;
    goto LABEL_158;
  }
  v69 = v63;
LABEL_166:
  v71 = 0x60000000000000;
  if ((v57 & 1) == 0)
    v71 = v56 | 0x60000000000000;
  if (v65)
    return _os_object_release_internal_n_VARIANT_armv81((void *)a1, (const char *)2);
  a3 = v57;
  v5 = (v69 & v71) - (v64 & 0x3FFE0000000000);
  if (!v5)
    return _os_object_release_internal_n_VARIANT_armv81((void *)a1, (const char *)2);
LABEL_5:
  if (v4)
  {
    v73 = 0;
    goto LABEL_21;
  }
  v6 = *(_DWORD *)(a1 + 84);
  v7 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v8 = *(_QWORD *)(v7 + 200);
  if ((_DWORD)v8)
  {
    v9 = (unsigned __int16)v6 >> 12;
    v10 = v6 & 0xFFF;
    if ((v6 & 0xFFF) != 0)
    {
      if (((unsigned __int16)v8 & 0xFFFu) > v10)
        v10 = v8 & 0xFFF;
      if (v9 <= v10 >> 8)
        v11 = 0x40000000;
      else
        v11 = 1140912128;
      v12 = v11 & v6;
      v13 = v8 & 0x880F0000 | v10;
LABEL_19:
      v14 = v13 | v12;
    }
    else
    {
      v14 = v8 | 0x40000000;
      if ((v8 & 0xFFF) == 0)
        v14 = *(_QWORD *)(v7 + 200);
      if (v9 > ((v14 >> 8) & 0xF))
      {
        v13 = v14 & 0xFFFF0FFF;
        v12 = v6 & 0x400F000;
        goto LABEL_19;
      }
    }
  }
  else
  {
    v14 = v6 & 0xFFF0FFFF;
  }
  *(_QWORD *)(v7 + 200) = v14;
  v73 = v8 & 0xFFF0FFFF;
LABEL_21:
  v72 = a3;
  if ((a3 & 0x100000) != 0 && (*(_DWORD *)(a1 + 80) & 0x400000) != 0)
    atomic_fetch_and_explicit((atomic_uint *volatile)(a1 + 80), 0xFFBFFFFF, memory_order_relaxed);
  v15 = *(_DWORD *)(a1 + 80);
  if (((v15 << 8) & 0x3000000) != 0)
    v16 = (v15 << 8) & 0x3000000 | a3 & 0xFCFFFFF7 | 8;
  else
    v16 = a3 | 8;
  v17 = v16 & 0x1000002;
  v75 = (atomic_ullong *)(a1 + 48);
  v18 = (uint64_t *)(a1 + 104);
  v74 = v5;
  v19 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_28:
  if (v17 == 2)
    _dispatch_last_resort_autorelease_pool_push(a2);
  v20 = *(_QWORD *)(a1 + 88);
  v80 = 0;
  v82 = 0u;
  *(_QWORD *)v77 = a1;
  v78 = a2;
  v79 = v16 & 0xFFFDFFFF;
  v81 = 0;
  *(_QWORD *)&v82 = 0;
  BYTE8(v82) = 0;
  *(_OWORD *)&v77[8] = *(_OWORD *)(v19 + 160);
  *(_QWORD *)(v19 + 160) = a1;
  *(_QWORD *)(v19 + 168) = &v77[8];
  if (_dispatch_channel_invoke_cancel_check_0(a1, (uint64_t)v77, v20))
  {
    while (2)
    {
      v21 = v82;
      if (!(_QWORD)v82)
      {
        if (!*v75)
          goto LABEL_112;
        v21 = *v18;
        if (!*v18)
          v21 = _dispatch_wait_for_enqueuer((unint64_t *)(a1 + 104));
      }
      v22 = *(_QWORD *)v21;
      if (*(_QWORD *)v21 > 0xFFFuLL)
        goto LABEL_35;
      if ((v22 & 1) != 0)
        _dispatch_channel_invoke_VARIANT_armv81_cold_4();
      if ((v22 & 0x400) == 0)
      {
LABEL_35:
        v23 = *(_QWORD *)(v21 + 16);
        *v18 = v23;
        if (!v23)
        {
          v24 = v21;
          atomic_compare_exchange_strong_explicit(v75, (unint64_t *)&v24, 0, memory_order_release, memory_order_relaxed);
          if (v24 != v21)
          {
            v23 = *(_QWORD *)(v21 + 16);
            if (!v23)
              v23 = _dispatch_wait_for_enqueuer((unint64_t *)(v21 + 16));
            *v18 = v23;
          }
        }
        *(_QWORD *)&v82 = v23;
        v25 = *(void (***)(uint64_t))(v19 + 192);
        if (v25)
          (*v25)(a1);
        v26 = *(_QWORD *)v21;
        if (*(_QWORD *)v21 >= 0x1000uLL)
        {
          if (*(_QWORD *)(v26 + 40) == 1)
            (*(void (**)(uint64_t, _QWORD, _QWORD))(v26 + 48))(v21, 0, (v16 >> 21) & 1);
          else
            (*(void (**)(uint64_t, uint64_t, _QWORD))(v26 + 64))(v21, a2, v16 & 0xFFFF0000);
          goto LABEL_103;
        }
        if ((v16 & 0x1000000) != 0)
        {
          v27 = (void *)MEMORY[0x18D766D94]();
          v26 = *(_QWORD *)v21;
        }
        else
        {
          v27 = 0;
        }
        v29 = *(_QWORD *)(v21 + 24);
        if ((v26 & 4) != 0)
          *(_QWORD *)(v21 + 24) = -1;
        v30 = *(_QWORD *)(v21 + 8);
        if (v30 == -1)
        {
          v33 = 0;
        }
        else
        {
          v31 = *(_QWORD *)(v19 + 200);
          if (((v31 >> 8) & 0xF) != 0)
            v32 = 256 << ((BYTE1(v31) & 0xFu) - 1);
          else
            v32 = 0;
          v33 = v32 & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(v19 + 200);
          if ((v30 & 0xFFFFFF) != 0)
          {
            if ((v30 & 0xFFFFFFuLL) >= (v32 & 0xFFFFFF00)
              && ((v31 & 0x44000000) != 0 || (*(_QWORD *)(v21 + 8) & 0x10000000) != 0))
            {
              v33 = v30 & 0xFFFFFF;
            }
          }
          else if ((unsigned __int16)v31 >> 12)
          {
            v33 = (256 << (((unsigned __int16)v31 >> 12) - 1)) | 0xFF;
          }
        }
        v35 = v26 & 4;
        v36 = v33 & 0xFFFFFFFF02FFFFFFLL;
        v37 = *(_QWORD *)(v19 + 32);
        if ((v37 & 0x1000000) != 0)
        {
          if (!v36)
          {
            v36 = v37 & 0xFFFFFFFFFEFFFFFFLL;
            goto LABEL_83;
          }
LABEL_92:
          _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(v36, v29, v35 | 2);
        }
        else
        {
          if (v36 == (v37 & 0xFFFFFFFF77FFFFFFLL))
            goto LABEL_65;
LABEL_83:
          if (v36)
            goto LABEL_92;
LABEL_65:
          if (v29 != -1)
          {
            if (*(_QWORD *)(v19 + 224) != v29)
            {
              v36 = 0;
              goto LABEL_92;
            }
            if ((v26 & 4) != 0 && v29)
            {
              if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v29 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
                _dispatch_async_redirect_invoke_cold_1();
LABEL_94:
              v38 = *(_QWORD *)(v19 + 176);
              if (v38)
                v39 = *(_DWORD *)(v38 + 8) + 1;
              else
                v39 = 1;
              v35 = v21;
              if (v39 <= _dispatch_continuation_cache_limit)
              {
                v35 = 0;
                *(_QWORD *)(v21 + 16) = v38;
                *(_DWORD *)(v21 + 8) = v39;
                *(_QWORD *)(v19 + 176) = v21;
              }
LABEL_99:
              if ((v26 & 8) == 0)
              {
                _dispatch_client_callout(*(_QWORD *)(v21 + 40), *(uint64_t (**)(void))(v21 + 32));
                if (!v35)
                  goto LABEL_101;
LABEL_110:
                _dispatch_continuation_free_to_cache_limit_VARIANT_armv81(v35);
                if (!v27)
                  goto LABEL_103;
LABEL_102:
                objc_autoreleasePoolPop(v27);
                goto LABEL_103;
              }
              v41 = *(_QWORD *)(v21 + 48);
              v42 = *(_QWORD *)(*(_QWORD *)v41 + 40);
              if (v42 != 514)
                _dispatch_queue_override_invoke_cold_1(v42);
              _dispatch_client_callout(*(_QWORD *)(v21 + 40), *(uint64_t (**)(void))(v21 + 32));
              dispatch_group_leave_VARIANT_armv81(v41);
              if (v35)
                goto LABEL_110;
LABEL_101:
              if (v27)
                goto LABEL_102;
LABEL_103:
              if (v25)
                v25[1](a1);
              if (!_dispatch_channel_invoke_checks_0(a1, (uint64_t)v77, v20))
                goto LABEL_112;
LABEL_106:
              v40 = (__objc2_class **)v81;
              if (v81)
                goto LABEL_113;
              continue;
            }
          }
        }
        if ((v26 & 4) != 0)
          goto LABEL_94;
        goto LABEL_99;
      }
      break;
    }
    *(_QWORD *)&v82 = v21;
    BYTE8(v82) = 0;
    if ((v79 & 0x1000000) != 0)
      v28 = (void *)MEMORY[0x18D766D94]();
    else
      v28 = 0;
    if ((*(unsigned int (**)(uint64_t, _BYTE *, _QWORD))(v20 + 16))(a1, v77, *(_QWORD *)(a1 + 32)))
    {
      if (!BYTE8(v82))
        _dispatch_channel_invoke_VARIANT_armv81_cold_3();
      if (!v28)
        goto LABEL_106;
    }
    else
    {
      v81 = -1;
      if (!v28)
        goto LABEL_106;
    }
    objc_autoreleasePoolPop(v28);
    goto LABEL_106;
  }
LABEL_112:
  v40 = (__objc2_class **)v81;
LABEL_113:
  v43 = (__objc2_class ***)(v19 + 160);
  *(_OWORD *)(v19 + 160) = *(_OWORD *)&v77[8];
  v17 = v16 & 0x1000002;
  v44 = v74;
  if ((v16 & 0x1000002) == 2)
  {
    *(_OWORD *)v77 = *(_OWORD *)v43;
    *(_QWORD *)(v19 + 160) = a1;
    *(_QWORD *)(v19 + 168) = v77;
    _dispatch_last_resort_autorelease_pool_pop(a2);
    *(_OWORD *)v43 = *(_OWORD *)v77;
  }
  if ((unint64_t)v40 + 1 > 1)
  {
LABEL_130:
    if ((v16 & 0x40000) == 0)
LABEL_131:
      *(_QWORD *)(v19 + 200) = *(_QWORD *)(v19 + 200) & 0xF0000 | v73;
  }
  else
  {
    v45 = *(_QWORD *)(a1 + 56);
    do
    {
      v46 = v45;
      v47 = v45 - v74;
      v48 = v47 & 0xFFFFFFF700000001;
      if (!(v46 >> 55))
      {
        if ((v46 & 0x8000000000) != 0)
        {
          atomic_fetch_xor_explicit((atomic_ullong *volatile)(a1 + 56), 0x8000000000uLL, memory_order_acquire);
          if ((v72 & 1) != 0)
            goto LABEL_28;
          v40 = *v43;
          if (((uint64_t)(**v43)[1].isa & 0x10000) != 0)
            goto LABEL_28;
          goto LABEL_130;
        }
        if (v40)
          v48 = v47 & 0xFFFFFF7700000001 | 0x8000000000;
        else
          v48 = v47 & 0xFFFFFFF000000001;
      }
      v45 = v46;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v45, v48, memory_order_release, memory_order_relaxed);
    }
    while (v45 != v46);
    if ((~v46 & 0x1800000000) == 0)
    {
      v49 = HIDWORD(v46) & 7;
      v50 = *(_DWORD *)(v19 + 200);
      if ((HIWORD(v50) & 0xF) < v49)
      {
        v44 = 0;
        v40 = 0;
        *(_QWORD *)(v19 + 200) = v50 & 0xFFF0FFFF | ((_DWORD)v49 << 16);
        goto LABEL_130;
      }
    }
    v44 = 0;
    v40 = 0;
    if ((v16 & 0x40000) == 0)
      goto LABEL_131;
  }
  if (!v40)
    return _os_object_release_internal_n_VARIANT_armv81((void *)a1, (const char *)2);
  return _dispatch_queue_invoke_finish_VARIANT_armv81((atomic_ullong *)a1, a2, v40, v44);
}

uint64_t dispatch_channel_foreach_work_item_peek_f_VARIANT_armv81(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD))
{
  _QWORD *v3;
  _QWORD *v6;

  if (*(_BYTE *)(result + 56))
    dispatch_channel_foreach_work_item_peek_f_VARIANT_armv81_cold_1();
  v3 = *(_QWORD **)(result + 48);
  if ((*v3 & 0xFFFFFFFFFFFFF400) == 0x400)
  {
    v6 = (_QWORD *)(*(_QWORD *)result + 48);
    do
    {
      result = a3(a2, v3[5]);
      if (!(_DWORD)result || v3 == (_QWORD *)*v6)
        break;
      result = v3[2];
      if (!result)
        result = _dispatch_wait_for_enqueuer(v3 + 2);
      v3 = (_QWORD *)result;
    }
    while ((*(_QWORD *)result & 0xFFFFFFFFFFFFF400) == 0x400);
  }
  return result;
}

void dispatch_channel_drain_f_VARIANT_armv81(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD, uint64_t *))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v8;
  _QWORD *StatusReg;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  atomic_ullong *v34;
  uint64_t v35;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v35 = 0;
  if (*(_BYTE *)(a1 + 56))
    dispatch_channel_drain_f_VARIANT_armv81_cold_3();
  *(_BYTE *)(a1 + 56) = 1;
  v34 = (atomic_ullong *)(v3 + 48);
  v8 = (uint64_t *)(v3 + 104);
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    v10 = *(_QWORD **)(a1 + 48);
    if (!v10)
    {
      if (!*v34)
        break;
      v10 = (_QWORD *)*v8;
      if (!*v8)
        v10 = (_QWORD *)_dispatch_wait_for_enqueuer((unint64_t *)(v3 + 104));
    }
    if ((*v10 & 0xFFFFFFFFFFFFF400) != 0x400)
      break;
    v11 = v10[2];
    *v8 = v11;
    if (!v11)
    {
      v12 = v10;
      atomic_compare_exchange_strong_explicit(v34, (unint64_t *)&v12, 0, memory_order_release, memory_order_relaxed);
      if (v12 != v10)
      {
        v11 = v10[2];
        if (!v11)
          v11 = _dispatch_wait_for_enqueuer(v10 + 2);
        *v8 = v11;
      }
    }
    *(_QWORD *)(a1 + 48) = v11;
    v13 = v10[3];
    v10[3] = -1;
    v14 = v10[1];
    if (v14 == -1)
    {
      v17 = 0;
    }
    else
    {
      v15 = StatusReg[25];
      v16 = ((v15 >> 8) & 0xF) != 0 ? 256 << ((BYTE1(v15) & 0xFu) - 1) : 0;
      v17 = v16 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
      if ((v14 & 0xFFFFFF) != 0)
      {
        if ((v14 & 0xFFFFFFuLL) >= (v16 & 0xFFFFFF00)
          && ((v15 & 0x44000000) != 0 || (v10[1] & 0x10000000) != 0))
        {
          v17 = v14 & 0xFFFFFF;
        }
      }
      else if ((unsigned __int16)v15 >> 12)
      {
        v17 = (256 << (((unsigned __int16)v15 >> 12) - 1)) | 0xFF;
      }
    }
    v19 = v17 & 0xFFFFFFFF02FFFFFFLL;
    v20 = StatusReg[4];
    if ((v20 & 0x1000000) != 0)
    {
      if (v19)
        goto LABEL_51;
      v19 = v20 & 0xFFFFFFFFFEFFFFFFLL;
    }
    else if (v19 == (v20 & 0xFFFFFFFF77FFFFFFLL))
    {
      goto LABEL_22;
    }
    if (v19)
      goto LABEL_51;
LABEL_22:
    if (v13 == -1)
      goto LABEL_26;
    if (StatusReg[28] != v13)
    {
      v19 = 0;
LABEL_51:
      _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(v19, v13, 6);
      goto LABEL_26;
    }
    if (v13 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
      _dispatch_async_redirect_invoke_cold_1();
LABEL_26:
    v21 = StatusReg[22];
    if (v21)
      v22 = *(_DWORD *)(v21 + 8) + 1;
    else
      v22 = 1;
    v23 = (uint64_t)v10;
    if (v22 <= _dispatch_continuation_cache_limit)
    {
      v23 = 0;
      v10[2] = v21;
      *((_DWORD *)v10 + 2) = v22;
      StatusReg[22] = v10;
    }
    if ((*(_BYTE *)(a1 + 35) & 1) != 0)
    {
      v25 = (void *)MEMORY[0x18D766D94]();
      v24 = a3(a2, v10[5], &v35);
      objc_autoreleasePoolPop(v25);
    }
    else
    {
      v24 = a3(a2, v10[5], &v35);
    }
    if (!v23)
    {
      if (!v24)
        break;
      continue;
    }
    _dispatch_continuation_free_to_cache_limit_VARIANT_armv81(v23);
    if (!v24)
      break;
  }
  while ((_dispatch_channel_invoke_checks_0(v3, a1, v4) & 1) != 0);
  v26 = v35;
  if (v35)
  {
    v27 = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v28 = (_QWORD *)v27[22];
    if (v28)
    {
      v27[22] = v28[2];
    }
    else
    {
      v28 = _dispatch_continuation_alloc_from_heap_VARIANT_armv81();
      v26 = v35;
    }
    *v28 = 1284;
    v28[4] = 0;
    v28[5] = v26;
    v29 = v27[4] & 0xFFFFFFLL;
    if (v29 >= 0x10FF)
      v29 = 4351;
    v30 = v27[28];
    if (v30 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v30 + 12), 1u, memory_order_relaxed) <= 0)
      dispatch_group_notify_VARIANT_mp_cold_3();
    v28[3] = v30;
    if (v29)
    {
      v31 = (*(_DWORD *)(v3 + 84) >> 30) & 1;
      if ((*(_DWORD *)(v3 + 84) & 0xFFF) == 0)
        v31 = 1;
      if (!v31)
        v29 = 0;
    }
    v28[1] = v29;
    v32 = *(_QWORD *)(a1 + 48);
    v28[2] = v32;
    if (!v32)
    {
      atomic_compare_exchange_strong_explicit(v34, (unint64_t *)&v32, (unint64_t)v28, memory_order_release, memory_order_relaxed);
      if (v32)
      {
        v33 = *v8;
        if (!*v8)
          v33 = _dispatch_wait_for_enqueuer((unint64_t *)(v3 + 104));
        v28[2] = v33;
      }
    }
    *v8 = (uint64_t)v28;
    *(_QWORD *)(a1 + 48) = v28;
  }
}

uint64_t _dispatch_channel_invoke_checks_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unint64_t StatusReg;

  result = _dispatch_channel_invoke_cancel_check_0(a1, a2, a3);
  if ((_DWORD)result)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    if (*(_QWORD *)(StatusReg + 40))
      _dispatch_return_to_kernel_0();
    if ((*(_BYTE *)(a2 + 34) & 0x10) != 0
      && (*(_DWORD *)(*(_QWORD *)(StatusReg + 216) + 60) & 7u) > *(unsigned __int8 *)(*(_QWORD *)(StatusReg + 216)
                                                                                      + 100)
      || (*(_BYTE *)(StatusReg + 960) & 1) != 0
      || *(_QWORD *)(a1 + 56) >> 55)
    {
      result = 0;
      *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 24);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t dispatch_channel_foreach_work_item_peek_VARIANT_armv81(uint64_t a1, uint64_t a2)
{
  return dispatch_channel_foreach_work_item_peek_f_VARIANT_armv81(a1, a2, *(uint64_t (**)(uint64_t, _QWORD))(a2 + 16));
}

void dispatch_channel_drain_VARIANT_armv81(uint64_t a1, uint64_t a2)
{
  dispatch_channel_drain_f_VARIANT_armv81(a1, a2, *(uint64_t (**)(uint64_t, _QWORD, uint64_t *))(a2 + 16));
}

void _dispatch_channel_wakeup_VARIANT_armv81(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 88) + 8))(a1, *(_QWORD *)(a1 + 32)))
  {
    if (*(_QWORD *)(a1 + 48))
      v6 = 1;
    else
      v6 = (*(_DWORD *)(a1 + 80) & 0x10000000) != 0 && (*(_WORD *)(a1 + 116) & 8) == 0;
  }
  else
  {
    v6 = -1;
  }
  _dispatch_queue_wakeup_VARIANT_armv81(a1, a2, a3, v6);
}

uint64_t dispatch_channel_create_VARIANT_armv81(const char *a1, __objc2_class **a2, uint64_t a3, _QWORD *a4)
{
  __objc2_class **v6;
  int v8;
  const char *v9;
  uint64_t result;

  if (!*a4)
    dispatch_channel_create_VARIANT_mp_cold_1();
  v6 = a2;
  v8 = 67108865;
  if (!a1)
  {
    v9 = 0;
    if (a2)
      goto LABEL_7;
LABEL_15:
    v6 = &off_1ECCEA100;
    goto LABEL_9;
  }
  v9 = _dispatch_strdup_if_mutable(a1);
  if (v9 == a1)
    v8 = 67108865;
  else
    v8 = 69206017;
  if (!v6)
    goto LABEL_15;
LABEL_7:
  if (*((_DWORD *)v6 + 2) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)v6 + 2, 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
LABEL_9:
  result = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_channel, 120);
  *(_DWORD *)(result + 8) += 2;
  if (*(_BYTE *)(*(_QWORD *)result + 40) == 19)
    ++*(_DWORD *)(result + 8);
  *(_QWORD *)(result + 16) = -1985229329;
  *(_DWORD *)(result + 80) = v8;
  *(_QWORD *)(result + 56) = 0x19FFE0000000000;
  *(_QWORD *)(result + 64) = atomic_fetch_add_explicit((atomic_ullong *volatile)&_dispatch_queue_serial_numbers, 1uLL, memory_order_relaxed);
  *(_QWORD *)(result + 72) = v9;
  *(_QWORD *)(result + 88) = a4;
  *(_QWORD *)(result + 24) = v6;
  *(_QWORD *)(result + 32) = a3;
  if (!a4[3])
  {
    *(_WORD *)(result + 116) |= 8u;
    --*(_DWORD *)(result + 8);
  }
  return result;
}

_DWORD *dispatch_channel_enqueue_VARIANT_armv81(_DWORD *result, uint64_t a2)
{
  _QWORD *StatusReg;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  int v7;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v4 = (_QWORD *)StatusReg[22];
  if (!v4)
    return _dispatch_channel_enqueue_slow_0(result, a2);
  StatusReg[22] = v4[2];
  *v4 = 1284;
  v4[4] = 0;
  v4[5] = a2;
  v5 = StatusReg[4] & 0xFFFFFFLL;
  if (v5 >= 0x10FF)
    v5 = 4351;
  v6 = StatusReg[28];
  if (v6 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 12), 1u, memory_order_relaxed) <= 0)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
  else
  {
    v4[3] = v6;
    if (v5)
    {
      v7 = result[21];
      if ((v7 & 0x40000000) == 0 && (v7 & 0xFFF) != 0)
        v5 = 0;
    }
    v4[1] = v5;
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 88))(result);
  }
  return result;
}

_QWORD *_dispatch_channel_enqueue_slow_0(_DWORD *a1, uint64_t a2)
{
  _QWORD *result;
  unint64_t StatusReg;
  unint64_t v6;
  uint64_t v7;
  int v8;

  result = _dispatch_continuation_alloc_from_heap_VARIANT_armv81();
  *result = 1284;
  result[4] = 0;
  result[5] = a2;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
  if (v6 >= 0x10FF)
    v6 = 4351;
  v7 = *(_QWORD *)(StatusReg + 224);
  if (v7 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 12), 1u, memory_order_relaxed) <= 0)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
  else
  {
    result[3] = v7;
    if (v6)
    {
      v8 = a1[21];
      if ((v8 & 0x40000000) == 0 && (v8 & 0xFFF) != 0)
        v6 = 0;
    }
    result[1] = v6;
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 88))(a1);
  }
  return result;
}

uint64_t dispatch_channel_wakeup_VARIANT_armv81(uint64_t a1, int a2)
{
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;

  HIDWORD(v3) = a2 - 5;
  LODWORD(v3) = a2 - 5;
  v2 = v3 >> 2;
  if (v2 > 7)
    v4 = 0;
  else
    v4 = dword_18A06EA80[v2];
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v4, 2);
}

atomic_ullong *_dispatch_mgr_queue_push_VARIANT_armv81(atomic_ullong *result, _QWORD *a2)
{
  unint64_t StatusReg;
  unint64_t v4;

  if (*a2 <= 0xFFFuLL && (*a2 & 0x81) != 0)
    _dispatch_mgr_queue_push_VARIANT_armv81_cold_1();
  a2[2] = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_QWORD *)(StatusReg + 976) = result + 6;
  v4 = atomic_exchange_explicit(result + 6, (unint64_t)a2, memory_order_release);
  if (v4)
  {
    *(_QWORD *)(v4 + 16) = a2;
    *(_QWORD *)(StatusReg + 976) = 0;
  }
  else
  {
    result[13] = (atomic_ullong)a2;
    *(_QWORD *)(StatusReg + 976) = 0;
    if (((atomic_fetch_or_explicit(result + 7, 0x8000000000uLL, memory_order_release) ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) != 0)
      return _dispatch_event_loop_poke_VARIANT_armv81((_QWORD *)0xFFFFFFFFFFFFFFF8, 0, 0);
  }
  return result;
}

void _dispatch_mgr_queue_wakeup_VARIANT_armv81()
{
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Don't try to wake up or override the manager";
  __break(1u);
}

void _dispatch_kevent_workqueue_init_VARIANT_armv81()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if (_dispatch_root_queues_pred != -1)
    dispatch_once_f_VARIANT_armv81(&_dispatch_root_queues_pred, 0, _dispatch_root_queues_init_once_0);
  if (_dispatch_mgr_sched_pred != -1)
    dispatch_once_f_VARIANT_armv81(&_dispatch_mgr_sched_pred, 0, _dispatch_mgr_sched_init_0);
  v0 = _dispatch_mgr_sched;
  if (dword_1ECCEA51C)
    v1 = _pthread_qos_class_encode();
  else
    v1 = 0;
  if ((int)v0 > dword_1ECCEA520)
    v1 = v0 | 0x20000000;
  if (v1)
  {
    v2 = _pthread_workqueue_set_event_manager_priority();
    if (v2)
      _dispatch_bug(6510, v2);
  }
}

uint64_t _dispatch_mgr_sched_init_0()
{
  int v0;
  int v1;
  int v2;
  uint64_t result;
  int v4;
  int sched_priority;
  unsigned int v6;
  unint64_t v7;
  sched_param v8;
  pthread_attr_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C874D8];
  v8 = 0;
  memset(&v9, 0, sizeof(v9));
  v0 = pthread_attr_init(&v9);
  if (v0)
    _dispatch_bug(6165, v0);
  v1 = pthread_attr_getschedpolicy(&v9, dword_1ECCEA524);
  if (v1)
    _dispatch_bug(6167, v1);
  v2 = pthread_attr_getschedparam(&v9, &v8);
  if (v2)
    _dispatch_bug(6168, v2);
  result = qos_class_main();
  if ((_DWORD)result == 21)
    v4 = 25;
  else
    v4 = result;
  if (v4)
  {
    dword_1ECCEA51C = v4;
    if (v4 == 5)
    {
      sched_priority = 4;
    }
    else
    {
      HIDWORD(v7) = v4 - 9;
      LODWORD(v7) = v4 - 9;
      v6 = v7 >> 2;
      if (v6 > 6)
        sched_priority = 0;
      else
        sched_priority = dword_18A06EB00[v6];
    }
  }
  else
  {
    sched_priority = v8.sched_priority;
  }
  dword_1ECCEA520 = sched_priority;
  _dispatch_mgr_sched = sched_priority;
  return result;
}

void _dispatch_root_queue_poke_VARIANT_armv81(unsigned int *a1, signed int a2, int a3)
{
  uint64_t v3;
  BOOL v4;
  int v5;

  if (*((_QWORD *)a1 + 6))
  {
    v3 = *(_QWORD *)(*(_QWORD *)a1 + 40);
    v4 = v3 == 330001 || v3 == 328465;
    if (!v4
      || (v5 = 0,
          atomic_compare_exchange_strong_explicit((atomic_uint *volatile)a1 + 28, (unsigned int *)&v5, a2, memory_order_release, memory_order_relaxed), !v5))
    {
      _dispatch_root_queue_poke_slow_0(a1, a2, a3);
    }
  }
}

void _dispatch_root_queue_poke_slow_0(unsigned int *a1, signed int a2, int a3)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  pthread_t v16;

  LODWORD(v3) = a3;
  if (_dispatch_root_queues_pred != -1)
LABEL_36:
    dispatch_once_f_VARIANT_armv81(&_dispatch_root_queues_pred, 0, _dispatch_root_queues_init_once_0);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if (v6 == 330001)
  {
    v10 = _pthread_workqueue_add_cooperativethreads();
    if (v10)
      _dispatch_bug(6848, v10);
  }
  else if (v6 == 328465)
  {
    v9 = _pthread_workqueue_addthreads();
    if (v9)
      _dispatch_bug(6840, v9);
  }
  else
  {
    v7 = *((_QWORD *)a1 + 4);
    if (*(_QWORD *)(v7 + 72))
    {
      while (dispatch_semaphore_signal_VARIANT_armv81(v7 + 72))
      {
        if (!--a2)
          return;
      }
    }
    if ((a1[21] & 0x80000000) != 0)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)a1 + 28, a2, memory_order_relaxed);
    }
    else
    {
      v8 = 0;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)a1 + 28, (unsigned int *)&v8, a2, memory_order_relaxed, memory_order_relaxed);
      if (v8)
        return;
    }
    v11 = a1[25];
    while (1)
    {
      v12 = v11 - (_DWORD)v3;
      if ((int)v11 < (int)v3)
        v12 = 0;
      if (a2 > v12)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)a1 + 28, v12 - a2, memory_order_relaxed);
        a2 = v12;
      }
      if (!a2)
        break;
      v13 = v11;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)a1 + 25, (unsigned int *)&v13, v11 - a2, memory_order_acquire, memory_order_acquire);
      v14 = (_DWORD)v13 == (_DWORD)v11;
      v11 = v13;
      if (v14)
      {
        v16 = 0;
        v3 = _dispatch_worker_thread_0;
LABEL_27:
        if (a1[2] != 0x7FFFFFFF
          && (int)atomic_fetch_add_explicit((atomic_uint *volatile)a1 + 2, 1u, memory_order_relaxed) < 1)
        {
          qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
          __break(1u);
          goto LABEL_36;
        }
        while (1)
        {
          v15 = pthread_create(&v16, (const pthread_attr_t *)v7, (void *(__cdecl *)(void *))_dispatch_worker_thread_0, a1);
          if (v15 != 35)
          {
            if (!v15)
            {
              if (!--a2)
                return;
              goto LABEL_27;
            }
            _dispatch_bug(6907, v15);
          }
          _dispatch_temporary_resource_shortage();
        }
      }
    }
  }
}

void _dispatch_root_queue_poke_and_wakeup_VARIANT_armv81(unsigned int *a1, signed int a2, int a3)
{
  uint64_t v3;
  unsigned int v5;
  int v6;
  unsigned int v7;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if (v3 != 330001 && v3 != 328465)
    goto LABEL_12;
  v5 = a1[28];
  do
  {
    v6 = v5;
    if (v5)
      v7 = v5;
    else
      v7 = a2;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)a1 + 28, &v5, v7, memory_order_release, memory_order_relaxed);
  }
  while (v5 != v6);
  if (v6 <= 0)
LABEL_12:
    _dispatch_root_queue_poke_slow_0(a1, a2, a3);
}

unsigned int *_dispatch_root_queue_wakeup_VARIANT_armv81(unsigned int *result, uint64_t a2, char a3)
{
  uint64_t v3;

  if ((a3 & 8) != 0)
  {
    if ((a3 & 1) != 0)
      return (unsigned int *)_os_object_release_internal_n_VARIANT_armv81(result, (const char *)2);
  }
  else
  {
    v3 = result[21];
    qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Don't try to wake up or override a root queue";
    qword_1EDF52D38 = v3;
    __break(1u);
  }
  return result;
}

void _dispatch_root_queue_push_VARIANT_armv81(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t StatusReg;
  uint64_t *v6;
  _QWORD *v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;

  v3 = a3;
  v4 = a1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = *(uint64_t **)(StatusReg + 232);
  if (v6 && *((_BYTE *)v6 + 44) && ((v7 = (_QWORD *)v6[1], v12 = *(_DWORD *)(a1 + 84), !v7) || v12 < 0))
  {
    v13 = *v6;
    v14 = *((_DWORD *)v6 + 4);
    *v6 = a1;
    v6[1] = (uint64_t)a2;
    *((_DWORD *)v6 + 4) = a3;
    if (v12 < 0)
      *((_BYTE *)v6 + 44) = 0;
    if (!v7)
      return;
    v3 = v14;
    v4 = v13;
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_DWORD *)(v4 + 84);
  if ((v8 & 0x8000000) != 0 && *v7 >= 0x1000uLL && *(_QWORD *)(*v7 + 40) != 1)
  {
    if (*(_QWORD *)(*v7 + 40) != 19
      || !_dispatch_source_is_timer_VARIANT_mp((uint64_t)v7))
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot target the cooperative root queue - not implemented";
      qword_1EDF52D38 = (uint64_t)v7;
      __break(1u);
      return;
    }
    v8 = *(_DWORD *)(v4 + 84);
  }
  if ((unsigned __int16)v8 >> 12)
  {
    if (v3 && (unsigned __int16)v8 >> 12 != v3)
    {
LABEL_13:
      _dispatch_root_queue_push_override_0((__objc2_class **)v4, v7, v3);
      return;
    }
  }
  else
  {
    v9 = (v8 >> 8) & 0xF;
    if (v9)
      v10 = v9 >= v3;
    else
      v10 = 1;
    if (!v10)
      goto LABEL_13;
  }
  v7[2] = 0;
  *(_QWORD *)(StatusReg + 976) = v4 + 48;
  v11 = atomic_exchange_explicit((atomic_ullong *volatile)(v4 + 48), (unint64_t)v7, memory_order_release);
  if (v11)
  {
    *(_QWORD *)(v11 + 16) = v7;
    *(_QWORD *)(StatusReg + 976) = 0;
  }
  else
  {
    *(_QWORD *)(v4 + 104) = v7;
    *(_QWORD *)(StatusReg + 976) = 0;
    _dispatch_root_queue_poke_and_wakeup_VARIANT_armv81((unsigned int *)v4, 1, 0);
  }
}

void _dispatch_root_queue_push_override_0(__objc2_class **a1, _QWORD *a2, unsigned int a3)
{
  unint64_t v4;
  __objc2_class *v5;
  int v6;
  unsigned int v7;
  unint64_t StatusReg;
  int v9;
  unint64_t v10;
  unint64_t v11;

  v4 = (unint64_t)a2;
  v5 = (__objc2_class *)a1;
  v6 = *((_DWORD *)a1 + 21);
  if (v6 < 0)
    v7 = 2;
  else
    v7 = (v6 >> 25) & 4;
  if (*a2 >= 0x1000uLL && *(_QWORD *)(*a2 + 40) == 256)
  {
    a2[4] = a1;
  }
  else
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    a1 = *(__objc2_class ***)(StatusReg + 176);
    if (a1)
      *(_QWORD *)(StatusReg + 176) = a1[2];
    else
      a1 = (__objc2_class **)_dispatch_continuation_alloc_from_heap_VARIANT_armv81();
    a1[6] = (__objc2_class *)v4;
    a1[7] = v5;
    a1[5] = (__objc2_class *)a1;
    *a1 = (__objc2_class *)&unk_1E1E87BA8;
    a1[1] = (__objc2_class *)-1;
    a1[3] = (__objc2_class *)-1;
    v4 = (unint64_t)a1;
  }
  if (a3 - 7 <= 0xFFFFFFF9)
  {
    v10 = a3;
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupted priority";
    qword_1EDF52D38 = a3;
    __break(1u);
  }
  else
  {
    v9 = 2 * (v7 > 3);
    if ((v7 & 2) != 0)
      v9 = 1;
    *(_QWORD *)(v4 + 16) = 0;
    a1 = &_dispatch_root_queues + 16 * (unint64_t)(3 * a3 + v9 - 3);
    v10 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(_QWORD *)(v10 + 976) = a1 + 6;
    v11 = atomic_exchange_explicit((atomic_ullong *volatile)a1 + 6, v4, memory_order_release);
    if (v11)
    {
      *(_QWORD *)(v11 + 16) = v4;
      *(_QWORD *)(v10 + 976) = 0;
      return;
    }
  }
  a1[13] = (__objc2_class *)v4;
  *(_QWORD *)(v10 + 976) = 0;
  _dispatch_root_queue_poke_and_wakeup_VARIANT_armv81((unsigned int *)a1, 1, 0);
}

uint64_t dispatch_pthread_root_queue_create_VARIANT_armv81(const char *a1, int a2, __int128 *a3, void *a4)
{
  return _dispatch_pthread_root_queue_create_0(a1, a2, a3, a4, 0);
}

uint64_t _dispatch_pthread_root_queue_create_0(const char *a1, int a2, __int128 *a3, void *a4, _OWORD *a5)
{
  int v8;
  int v9;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  int v21;

  if (a2 < 0)
    v8 = (char)a2;
  else
    v8 = 0;
  v9 = 4095;
  if (a1)
  {
    v11 = _dispatch_strdup_if_mutable(a1);
    if (v11 == a1)
      v9 = 4095;
    else
      v9 = 2101247;
  }
  else
  {
    v11 = 0;
  }
  v12 = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_queue_pthread_root, 320);
  v13 = v12;
  *(_QWORD *)(v12 + 16) = -1985229329;
  *(_DWORD *)(v12 + 80) = v9;
  *(_QWORD *)(v12 + 56) = 0x20000000000;
  *(_QWORD *)(v12 + 64) = atomic_fetch_add_explicit((atomic_ullong *volatile)&_dispatch_queue_serial_numbers, 1uLL, memory_order_relaxed);
  *(_QWORD *)(v12 + 72) = v11;
  *(_QWORD *)(v12 + 56) = 0x60000000000000;
  *(_DWORD *)(v12 + 84) = 0x80000000;
  v14 = v12 + 120;
  *(_QWORD *)(v12 + 32) = v12 + 120;
  if (v8 >= 32 || v8 == 0)
    v16 = 32;
  else
    v16 = v8;
  *(_DWORD *)(v12 + 100) = v16;
  *(_QWORD *)(v12 + 192) = OS_dispatch_semaphore;
  *(_DWORD *)(v12 + 256) = 0;
  _dispatch_sema4_create_slow_VARIANT_armv81((atomic_uint *)(v12 + 256), 2);
  if (a3)
  {
    v17 = *a3;
    v18 = a3[1];
    v19 = a3[3];
    *(_OWORD *)(v14 + 32) = a3[2];
    *(_OWORD *)(v14 + 48) = v19;
    *(_OWORD *)v14 = v17;
    *(_OWORD *)(v14 + 16) = v18;
    _dispatch_mgr_priority_raise_0((pthread_attr_t *)v14);
  }
  else
  {
    v20 = pthread_attr_init((pthread_attr_t *)v14);
    if (v20)
      _dispatch_bug(7641, v20);
  }
  v21 = pthread_attr_setdetachstate((pthread_attr_t *)v14, 2);
  if (!v21)
  {
    if (!a4)
      goto LABEL_22;
    goto LABEL_21;
  }
  _dispatch_bug(7644, v21);
  if (a4)
LABEL_21:
    *(_QWORD *)(v13 + 184) = _dispatch_Block_copy(a4);
LABEL_22:
  if (a5)
    *(_OWORD *)(v13 + 264) = *a5;
  return v13;
}

uint64_t _dispatch_pthread_root_queue_create_with_observer_hooks_4IOHID_VARIANT_armv81(const char *a1, int a2, __int128 *a3, uint64_t a4, void *a5)
{
  if (!*(_QWORD *)a4 || !*(_QWORD *)(a4 + 8))
    _dispatch_pthread_root_queue_create_with_observer_hooks_4IOHID_VARIANT_armv81_cold_1();
  return _dispatch_pthread_root_queue_create_0(a1, a2, a3, a5, (_OWORD *)a4);
}

BOOL _dispatch_queue_is_exclusively_owned_by_current_thread_4IOHID_VARIANT_armv81(uint64_t a1)
{
  int v2;
  uint64_t v3;

  v2 = *(unsigned __int16 *)(a1 + 80);
  if (v2 != 1)
    _dispatch_queue_is_exclusively_owned_by_current_thread_4IOHID_VARIANT_mp_cold_1(v2);
  v3 = *(_QWORD *)(a1 + 56);
  return ((v3 ^ *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24)) & 0xFFFFFFFC) == 0;
}

uint64_t dispatch_pthread_root_queue_copy_current_VARIANT_armv81()
{
  uint64_t v0;
  uint64_t v1;

  v0 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160);
  if (!v0)
    return 0;
  do
  {
    v1 = v0;
    v0 = *(_QWORD *)(v0 + 24);
  }
  while (v0);
  if (*(_QWORD *)(*(_QWORD *)v1 + 40) != 328721)
    return 0;
  _os_object_retain_with_resurrect_VARIANT_armv81(v1);
  return v1;
}

void _dispatch_pthread_root_queue_dispose_VARIANT_armv81(uint64_t *a1, _BYTE *a2)
{
  pthread_attr_t *v4;
  const void *sig;

  v4 = (pthread_attr_t *)a1[4];
  pthread_attr_destroy(v4);
  _dispatch_semaphore_dispose_VARIANT_armv81((uint64_t)v4[1].__opaque);
  sig = (const void *)v4[1].__sig;
  if (sig)
    _Block_release(sig);
  a1[3] = (uint64_t)&unk_1ECCEA080;
  _dispatch_lane_class_dispose_VARIANT_armv81(a1, a2);
}

void _dispatch_runloop_queue_wakeup_VARIANT_armv81(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  if ((*(_DWORD *)(a1 + 80) & 0x800000) != 0
    || (a3 & 2) != 0
    && (atomic_fetch_or_explicit((atomic_ullong *volatile)(a1 + 56), 0x8000000000uLL, memory_order_release) & 0xFFFFFFFC) == 0)
  {
    _dispatch_lane_wakeup_VARIANT_armv81(a1, a2, a3);
  }
  else if (*(_QWORD *)(a1 + 48))
  {
    _dispatch_runloop_queue_poke_0(a1, a2, a3);
  }
  else
  {
    v3 = (atomic_fetch_and_explicit((atomic_ullong *volatile)(a1 + 56), 0xFFFFFFF0FFFFFFFFLL, memory_order_relaxed) >> 32) & 7;
    if ((_DWORD)v3)
    {
      if (*(_QWORD *)(a1 + 48))
        _dispatch_runloop_queue_poke_0(a1, v3, a3);
      _pthread_qos_override_end_direct();
    }
    else if ((a3 & 1) != 0)
    {
      _os_object_release_internal_n_VARIANT_armv81((void *)a1, (const char *)2);
    }
  }
}

void _dispatch_runloop_queue_poke_0(uint64_t a1, unsigned int a2, char a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  mach_port_t v16;
  int v17;
  BOOL v18;
  BOOL v19;

  if (*(_QWORD *)(*(_QWORD *)a1 + 40) == 394769 && _dispatch_main_q_handle_pred != -1)
    dispatch_once_f_VARIANT_armv81(&_dispatch_main_q_handle_pred, a1, (uint64_t (*)(void))_dispatch_runloop_queue_handle_init_0);
  v6 = *(_DWORD *)(a1 + 84);
  v7 = (unsigned __int16)v6 >> 12;
  if (a2)
    v7 = a2;
  v8 = (v6 >> 8) & 0xF;
  if (v7 <= v8)
    v9 = v8;
  else
    v9 = v7;
  v10 = *(_QWORD *)(a1 + 56);
  v11 = v9 << 32;
  while (1)
  {
    v12 = v10;
    v13 = v10 & 0x700000000;
    v14 = v10 & 0xFFFFFFF8FFFFFFFFLL | v11;
    if ((v14 & 0x1000000000) != 0)
      v14 |= 0x800000000uLL;
    v15 = v13 < v11 ? v14 : v12;
    if (v12 == v15)
      break;
    v10 = v12;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v10, v15, memory_order_relaxed, memory_order_relaxed);
    if (v10 == v12)
    {
      if (v8 < v7)
      {
        _pthread_qos_override_start_direct();
        if ((BYTE4(v12) & 7u) > v8)
          _pthread_qos_override_end_direct();
      }
      break;
    }
  }
  v16 = *(_DWORD *)(a1 + 32);
  if (v16 - 1 > 0xFFFFFFFD
    || ((v17 = _dispatch_send_wakeup_runloop_thread(v16, 0), (v17 - 268435459) >= 2)
      ? (v18 = v17 == 16)
      : (v18 = 1),
        !v18 ? (v19 = v17 == 0) : (v19 = 1),
        v19))
  {
    if ((a3 & 1) != 0)
LABEL_32:
      _os_object_release_internal_n_VARIANT_armv81((void *)a1, (const char *)2);
  }
  else
  {
    _dispatch_bug(7895, v17);
    if ((a3 & 1) != 0)
      goto LABEL_32;
  }
}

uint64_t _dispatch_runloop_root_queue_create_4CF_VARIANT_armv81(const char *a1, uint64_t a2)
{
  unint64_t StatusReg;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t add_explicit;
  const char *v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  if (a2)
    return 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v4 = *(_QWORD *)(StatusReg + 32);
  v5 = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_queue_runloop, 120);
  v6 = v5;
  *(_QWORD *)(v5 + 16) = -1985229329;
  *(_DWORD *)(v5 + 80) = 262145;
  *(_QWORD *)(v5 + 56) = 0x1FFE1000000000;
  add_explicit = atomic_fetch_add_explicit((atomic_ullong *volatile)&_dispatch_queue_serial_numbers, 1uLL, memory_order_relaxed);
  *(_QWORD *)(v5 + 24) = &off_1ECCEA100;
  v8 = "runloop-queue";
  if (a1)
    v8 = a1;
  *(_QWORD *)(v5 + 64) = add_explicit;
  *(_QWORD *)(v5 + 72) = v8;
  v9 = (v4 & 0x22000000) != 0 || (v4 & 0x3F00) == 0;
  if (!v9)
  {
    v10 = (__clz(__rbit32((v4 >> 8) & 0x3FFF)) << 8) + 256;
    if (((v4 >> 8) & 0x3FFF) == 0)
      v10 = 0;
    *(_DWORD *)(v5 + 84) = v10 & 0xFFFFFF00 | v4;
  }
  _dispatch_runloop_queue_handle_init_0((_QWORD *)v5);
  v11 = *(_QWORD *)(v6 + 56);
  v12 = v11;
  do
  {
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v6 + 56), (unint64_t *)&v12, v11 & 0xFFFFFFFF00000003 | (4 * ((*(_QWORD *)(StatusReg + 24) >> 2) & 0x3FFFFFFFLL)), memory_order_relaxed, memory_order_relaxed);
    v9 = v12 == v11;
    v11 = v12;
  }
  while (!v9);
  return v6;
}

void _dispatch_runloop_queue_handle_init_0(_QWORD *context)
{
  kern_return_t v2;
  mach_port_name_t name;
  mach_port_options_t options;

  if ((_dispatch_unsafe_fork & 1) == 0)
    _dispatch_fork_becomes_unsafe_slow_VARIANT_armv81();
  options.reserved[1] = 0;
  *(_OWORD *)&options.flags = xmmword_18A06E9C8;
  name = 0;
  if (*(_QWORD *)(*context + 40) == 394769)
    *(_QWORD *)&options.flags = 0x100000033;
  v2 = mach_port_construct(*MEMORY[0x1E0C883F0], &options, (mach_port_context_t)context, &name);
  if (v2 == -301)
    _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
  if (v2)
    _dispatch_bug(7808, v2);
  context[4] = name;
  _dispatch_program_is_probably_callback_driven = 1;
}

uint64_t _dispatch_runloop_queue_xref_dispose_VARIANT_armv81(atomic_ullong *a1)
{
  unint64_t v1;
  uint64_t result;

  v1 = (atomic_fetch_and_explicit(a1 + 7, 0xFFFFFFF0FFFFFFFFLL, memory_order_relaxed) >> 32) & 7;
  atomic_fetch_and_explicit(a1 + 7, 0xFFFFFFFF00000003, memory_order_relaxed);
  result = (*(uint64_t (**)(atomic_ullong *, unint64_t, uint64_t))(*a1 + 80))(a1, v1, 2);
  if ((_DWORD)v1)
    return _pthread_qos_override_end_direct();
  return result;
}

void _dispatch_runloop_queue_dispose_VARIANT_armv81(uint64_t *a1, _BYTE *a2)
{
  _dispatch_runloop_queue_handle_dispose((mach_port_context_t)a1);
  _dispatch_lane_class_dispose_VARIANT_armv81(a1, a2);
}

BOOL _dispatch_runloop_root_queue_perform_4CF_VARIANT_armv81(atomic_uint *a1)
{
  uint64_t v2;
  const char *v3;
  unint64_t StatusReg;
  unint64_t v5;
  int add_explicit;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  _BOOL8 v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (**v21)(atomic_uint *);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _OWORD v45[2];
  __int128 v46;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if (v2 != 395025)
    _dispatch_runloop_root_queue_perform_4CF_VARIANT_mp_cold_6(v2);
  dispatch_retain_VARIANT_armv81((uint64_t)a1);
  if (!*((_QWORD *)a1 + 6))
  {
    v15 = 0;
    goto LABEL_105;
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_QWORD *)(StatusReg + 216) & 0xFFFFFFFFFFFFFFFELL;
  if (v5 != -4)
  {
    if (v5)
    {
      add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 96), 0xFFFFFFFF, memory_order_relaxed);
      if (add_explicit <= 0)
      {
        if (add_explicit < 0)
          _os_object_allows_weak_reference_VARIANT_mp_cold_1();
        *(_QWORD *)(v5 + 56) = 0xDEAD000000000000;
        _dispatch_object_dealloc_VARIANT_mp((void *)v5);
      }
    }
    *(_QWORD *)(StatusReg + 216) = -4;
  }
  v46 = *(_OWORD *)(StatusReg + 160);
  *(_QWORD *)(StatusReg + 160) = a1;
  *(_QWORD *)(StatusReg + 168) = &v46;
  v7 = *(_QWORD *)(StatusReg + 32);
  v8 = (__clz(__rbit32((v7 >> 8) & 0x3FFF)) << 8) + 256;
  if (((v7 >> 8) & 0x3FFF) != 0)
    v9 = v8;
  else
    v9 = 0;
  v10 = *(_QWORD *)(StatusReg + 224);
  if (v10 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 12), 1u, memory_order_relaxed) <= 0)
    dispatch_group_notify_VARIANT_mp_cold_3();
  LODWORD(v11) = v9 | v7 & 0x8E0000FF;
  v12 = *(_QWORD *)(StatusReg + 200);
  v44 = v5;
  if ((_DWORD)v12)
  {
    v13 = v9 & 0xFFF | v7;
    if (v13)
    {
      if (((unsigned __int16)v12 & 0xFFFu) > v13)
        v13 = v12 & 0xFFF;
      v14 = v9 & 0x4003000 | v7 & 0x4000000;
      if (v9 >> 12 <= v13 >> 8)
        v14 = 0;
      LODWORD(v11) = v12 & 0x880F0000 | v13 | v14;
    }
    else
    {
      v16 = v12 | 0x40000000;
      if ((v12 & 0xFFF) == 0)
        v16 = *(_QWORD *)(StatusReg + 200);
      LODWORD(v11) = v16 & 0xFFFF0FFF | v9 & 0x4003000 | v7 & 0x4000000;
      if (((v16 >> 8) & 0xF) >= v9 >> 12)
        LODWORD(v11) = v16;
    }
  }
  if ((~(_DWORD)v11 & 0xF0000) != 0)
    v11 = v11 | 0xF0000;
  else
    v11 = v11;
  *(_QWORD *)(StatusReg + 200) = v11;
  memset(v45, 0, sizeof(v45));
  v17 = (uint64_t *)(a1 + 26);
  v18 = *((_QWORD *)a1 + 13);
  if (!v18)
    v18 = _dispatch_wait_for_enqueuer((unint64_t *)a1 + 13);
  v19 = *(_QWORD *)(v18 + 16);
  *v17 = v19;
  if (!v19)
  {
    v20 = v18;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)a1 + 6, (unint64_t *)&v20, 0, memory_order_release, memory_order_relaxed);
    if (v20 != v18)
    {
      v19 = *(_QWORD *)(v18 + 16);
      if (!v19)
        v19 = _dispatch_wait_for_enqueuer((unint64_t *)(v18 + 16));
      *v17 = v19;
    }
  }
  v21 = *(void (***)(atomic_uint *))(StatusReg + 192);
  if (v21)
    (*v21)(a1);
  v22 = *(_QWORD *)v18;
  if (*(_QWORD *)v18 < 0x1000uLL)
  {
    v23 = *(_QWORD *)(v18 + 24);
    if ((v22 & 4) != 0)
      *(_QWORD *)(v18 + 24) = -1;
    v24 = v22 & 4;
    v25 = *(_QWORD *)(v18 + 8);
    if (v25 == -1)
    {
      v28 = 0;
    }
    else
    {
      v26 = *(_QWORD *)(StatusReg + 200);
      if (((v26 >> 8) & 0xF) != 0)
        v27 = 256 << ((BYTE1(v26) & 0xFu) - 1);
      else
        v27 = 0;
      v28 = v27 & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(StatusReg + 200);
      v29 = v25 & 0xFFFFFF;
      if ((v25 & 0xFFFFFF) != 0)
      {
        v30 = v27 & 0xFFFFFF00;
        if ((v26 & 0x44000000) == 0 && (*(_QWORD *)(v18 + 8) & 0x10000000) == 0)
          v32 = v28;
        else
          v32 = v25 & 0xFFFFFF;
        if (v29 >= v30)
          v28 = v32;
      }
      else if ((unsigned __int16)v26 >> 12)
      {
        v28 = (256 << (((unsigned __int16)v26 >> 12) - 1)) | 0xFF;
      }
    }
    v33 = v28 & 0xFFFFFFFF02FFFFFFLL;
    v34 = *(_QWORD *)(StatusReg + 32);
    if ((v34 & 0x1000000) != 0)
    {
      if (v33)
        goto LABEL_79;
      v33 = v34 & 0xFFFFFFFFFEFFFFFFLL;
    }
    else if (v33 == (v34 & 0xFFFFFFFF77FFFFFFLL))
    {
LABEL_60:
      if (v23 == -1)
        goto LABEL_80;
      if (*(_QWORD *)(StatusReg + 224) == v23)
      {
        if ((v22 & 4) != 0 && v23)
        {
          if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v23 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
            _dispatch_async_redirect_invoke_cold_1();
LABEL_81:
          v35 = *(_QWORD *)(StatusReg + 176);
          if (v35)
            v36 = *(_DWORD *)(v35 + 8) + 1;
          else
            v36 = 1;
          v24 = v18;
          if (v36 <= _dispatch_continuation_cache_limit)
          {
            v24 = 0;
            *(_QWORD *)(v18 + 16) = v35;
            *(_DWORD *)(v18 + 8) = v36;
            *(_QWORD *)(StatusReg + 176) = v18;
          }
LABEL_86:
          if ((v22 & 8) != 0)
          {
            v42 = *(_QWORD *)(v18 + 48);
            v43 = *(_QWORD *)(*(_QWORD *)v42 + 40);
            if (v43 != 514)
              _dispatch_queue_override_invoke_cold_1(v43);
            _dispatch_client_callout(*(_QWORD *)(v18 + 40), *(uint64_t (**)(void))(v18 + 32));
            dispatch_group_leave_VARIANT_armv81(v42);
            if (!v24)
            {
LABEL_88:
              if (!v21)
                goto LABEL_90;
              goto LABEL_89;
            }
          }
          else
          {
            _dispatch_client_callout(*(_QWORD *)(v18 + 40), *(uint64_t (**)(void))(v18 + 32));
            if (!v24)
              goto LABEL_88;
          }
          _dispatch_continuation_free_to_cache_limit_VARIANT_armv81(v24);
          if (!v21)
            goto LABEL_90;
LABEL_89:
          v21[1](a1);
          goto LABEL_90;
        }
LABEL_80:
        if ((v22 & 4) == 0)
          goto LABEL_86;
        goto LABEL_81;
      }
      v33 = 0;
LABEL_79:
      _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(v33, v23, v24 | 2);
      goto LABEL_80;
    }
    if (v33)
      goto LABEL_79;
    goto LABEL_60;
  }
  if (*(_QWORD *)(v22 + 40) == 1)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v22 + 48))(v18, 0, 0);
  else
    (*(void (**)(uint64_t, _OWORD *, uint64_t))(v22 + 64))(v18, v45, 0x80000);
  if (v21)
    goto LABEL_89;
LABEL_90:
  v15 = v19 != 0;
  if (!v19)
    (*(void (**)(atomic_uint *, _QWORD, _QWORD))(*(_QWORD *)a1 + 80))(a1, 0, 0);
  *(_QWORD *)(StatusReg + 200) = v12 & 0xFFF0FFFF;
  v37 = v7 & 0xFFFFFFFF02FFFFFFLL;
  if (v7 == -1)
    v38 = 0;
  else
    v38 = v7 & 0xFFFFFFFF02FFFFFFLL;
  v39 = *(_QWORD *)(StatusReg + 32);
  if ((v39 & 0x1000000) != 0)
  {
    if (v38)
    {
LABEL_111:
      _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(v37, v10, 6);
      goto LABEL_101;
    }
    v38 = v39 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v38 == (v39 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_97;
  }
  v37 = v38;
  if (v38)
    goto LABEL_111;
LABEL_97:
  if (v10 != -1)
  {
    if (*(_QWORD *)(StatusReg + 224) == v10)
    {
      if (v10
        && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
      {
        _dispatch_async_redirect_invoke_cold_1();
      }
      goto LABEL_101;
    }
    v37 = 0;
    goto LABEL_111;
  }
LABEL_101:
  *(_OWORD *)(StatusReg + 160) = v46;
  if (v44 != -4)
  {
    *(_QWORD *)(StatusReg + 216) = 0;
    *(_QWORD *)(StatusReg + 40) = 0;
  }
  v40 = *(_QWORD *)(StatusReg + 176);
  if (v40)
  {
    *(_QWORD *)(StatusReg + 176) = 0;
    _dispatch_cache_cleanup_0(v40);
  }
LABEL_105:
  dispatch_release_VARIANT_armv81(a1, v3);
  return v15;
}

void _dispatch_runloop_root_queue_wakeup_4CF_VARIANT_armv81(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)a1 + 40) != 395025)
    _dispatch_runloop_root_queue_perform_4CF_VARIANT_mp_cold_6(*(_QWORD *)(*(_QWORD *)a1 + 40));
  _dispatch_runloop_queue_wakeup_VARIANT_armv81(a1, 0, 0);
}

uint64_t _dispatch_runloop_root_queue_get_port_4CF_VARIANT_armv81(unsigned int *a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if (v2 != 395025)
    _dispatch_runloop_root_queue_perform_4CF_VARIANT_mp_cold_6(v2);
  return a1[8];
}

uint64_t _dispatch_get_main_queue_handle_4CF_VARIANT_armv81()
{
  if (_dispatch_main_q_handle_pred != -1)
    dispatch_once_f_VARIANT_armv81(&_dispatch_main_q_handle_pred, (uint64_t)&_dispatch_main_q, (uint64_t (*)(void))_dispatch_runloop_queue_handle_init_0);
  return dword_1ECCE9B20;
}

uint64_t _dispatch_get_main_queue_port_4CF_VARIANT_armv81()
{
  if (_dispatch_main_q_handle_pred != -1)
    dispatch_once_f_VARIANT_armv81(&_dispatch_main_q_handle_pred, (uint64_t)&_dispatch_main_q, (uint64_t (*)(void))_dispatch_runloop_queue_handle_init_0);
  return dword_1ECCE9B20;
}

void _dispatch_main_queue_callback_4CF_VARIANT_armv81()
{
  if (!dword_1ECCE9B70)
  {
    dword_1ECCE9B70 = 1;
    _dispatch_main_queue_drain_0();
    dword_1ECCE9B70 = 0;
  }
}

void _dispatch_main_queue_drain_0()
{
  uint64_t v0;
  unint64_t StatusReg;
  unint64_t v2;
  int add_explicit;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  void (**v21)(__objc2_class **);
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[2];
  __int128 v45;

  v45 = 0uLL;
  if (!qword_1ECCE9B30)
    return;
  if ((dword_1ECCE9B50 & 0x40000) == 0)
    _dispatch_main_queue_drain_cold_1_0();
  v0 = qword_1ECCE9B38[0];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (((v0 ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) != 0)
    _dispatch_main_queue_drain_cold_8_0(v0);
  if (_dispatch_main_q_handle_pred != -1)
    dispatch_once_f_VARIANT_armv81(&_dispatch_main_q_handle_pred, (uint64_t)&_dispatch_main_q, (uint64_t (*)(void))_dispatch_runloop_queue_handle_init_0);
  v2 = *(_QWORD *)(StatusReg + 216) & 0xFFFFFFFFFFFFFFFELL;
  if (v2)
  {
    if (v2 == -4)
      _dispatch_main_queue_drain_cold_7();
    add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 96), 0xFFFFFFFF, memory_order_relaxed);
    if (add_explicit <= 0)
    {
      if (add_explicit < 0)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      *(_QWORD *)(v2 + 56) = 0xDEAD000000000000;
      _dispatch_object_dealloc_VARIANT_mp((void *)v2);
    }
  }
  *(_QWORD *)(StatusReg + 216) = -4;
  v45 = *(_OWORD *)(StatusReg + 160);
  *(_QWORD *)(StatusReg + 160) = &_dispatch_main_q;
  *(_QWORD *)(StatusReg + 168) = 0;
  v4 = *(_QWORD *)(StatusReg + 32);
  v5 = (__clz(__rbit32((v4 >> 8) & 0x3FFF)) << 8) + 256;
  if (((v4 >> 8) & 0x3FFF) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = *(_QWORD *)(StatusReg + 224);
  if (v7 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 12), 1u, memory_order_relaxed) <= 0)
    dispatch_group_notify_VARIANT_mp_cold_3();
  v8 = v4 & 0x8E0000FF;
  if ((((unsigned __int16)dword_1ECCE9B54 ^ (unsigned __int16)v6) & 0xF00) != 0)
    _dispatch_main_queue_update_priority_from_thread();
  v9 = v6 | v8;
  v10 = *(_QWORD *)(StatusReg + 200);
  v42 = v4;
  v43 = v7;
  v41 = v10;
  if ((_DWORD)v10)
  {
    v11 = v9 & 0xFFF;
    if ((v9 & 0xFFF) != 0)
    {
      v12 = v10 & 0x880F0000;
      v13 = v10 & 0xFFF;
      if (v13 > v11)
        v11 = v13;
      v14 = v9 & 0x4003000;
      if (v6 >> 12 <= v11 >> 8)
        v14 = 0;
      v15 = v12 | v11;
    }
    else
    {
      v16 = v10 | 0x40000000;
      if ((v10 & 0xFFF) == 0)
        v16 = *(_QWORD *)(StatusReg + 200);
      if (((v16 >> 8) & 0xF) >= v6 >> 12)
        goto LABEL_30;
      v15 = v16 & 0xFFFF0FFF;
      v14 = v9 & 0x4003000;
    }
    v16 = v15 | v14;
  }
  else
  {
    v16 = v6 | v8;
  }
LABEL_30:
  LODWORD(v17) = v16 | 0xF0000;
  if ((~v16 & 0xF0000) != 0)
    v17 = v17;
  else
    v17 = v16;
  *(_QWORD *)(StatusReg + 200) = v17;
  memset(v44, 0, sizeof(v44));
  v18 = (uint64_t *)off_1ECCE9B68;
  if (!off_1ECCE9B68)
    v18 = (uint64_t *)_dispatch_wait_for_enqueuer((unint64_t *)&off_1ECCE9B68);
  off_1ECCE9B68 = 0;
  v19 = atomic_exchange_explicit(&qword_1ECCE9B30, 0, memory_order_release);
  do
  {
    if (v18 == (uint64_t *)v19)
    {
      v20 = 0;
    }
    else
    {
      v20 = v18[2];
      if (!v20)
        v20 = _dispatch_wait_for_enqueuer((unint64_t *)v18 + 2);
    }
    v21 = *(void (***)(__objc2_class **))(StatusReg + 192);
    if (v21)
      (*v21)(&_dispatch_main_q);
    v22 = *v18;
    if ((unint64_t)*v18 >= 0x1000)
    {
      if (*(_QWORD *)(v22 + 40) == 1)
        (*(void (**)(uint64_t *, _QWORD, _QWORD))(v22 + 48))(v18, 0, 0);
      else
        (*(void (**)(uint64_t *, _OWORD *, uint64_t))(v22 + 64))(v18, v44, 0x80000);
      if (v21)
        goto LABEL_89;
      goto LABEL_90;
    }
    v23 = v18[3];
    if ((v22 & 4) != 0)
      v18[3] = -1;
    v24 = v18[1];
    if (v24 == -1)
    {
      v27 = 0;
    }
    else
    {
      v25 = *(_QWORD *)(StatusReg + 200);
      if (((v25 >> 8) & 0xF) != 0)
        v26 = 256 << ((BYTE1(v25) & 0xFu) - 1);
      else
        v26 = 0;
      v27 = v26 & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(StatusReg + 200);
      if ((v24 & 0xFFFFFF) != 0)
      {
        if ((v24 & 0xFFFFFFuLL) >= (v26 & 0xFFFFFF00)
          && ((v25 & 0x44000000) != 0 || (v18[1] & 0x10000000) != 0))
        {
          v27 = v24 & 0xFFFFFF;
        }
      }
      else if ((unsigned __int16)v25 >> 12)
      {
        v27 = (256 << (((unsigned __int16)v25 >> 12) - 1)) | 0xFF;
      }
    }
    v29 = v22 & 4;
    v30 = v27 & 0xFFFFFFFF02FFFFFFLL;
    v31 = *(_QWORD *)(StatusReg + 32);
    if ((v31 & 0x1000000) != 0)
    {
      if (v30)
        goto LABEL_79;
      v30 = v31 & 0xFFFFFFFFFEFFFFFFLL;
    }
    else if (v30 == (v31 & 0xFFFFFFFF77FFFFFFLL))
    {
      goto LABEL_65;
    }
    if (v30)
      goto LABEL_79;
LABEL_65:
    if (v23 == -1)
      goto LABEL_80;
    if (*(_QWORD *)(StatusReg + 224) != v23)
    {
      v30 = 0;
LABEL_79:
      _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(v30, v23, v29 | 2);
      goto LABEL_80;
    }
    if ((v22 & 4) != 0 && v23)
    {
      if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v23 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
        _dispatch_async_redirect_invoke_cold_1();
LABEL_81:
      v32 = *(_QWORD *)(StatusReg + 176);
      if (v32)
        v33 = *(_DWORD *)(v32 + 8) + 1;
      else
        v33 = 1;
      v29 = (uint64_t)v18;
      if (v33 <= _dispatch_continuation_cache_limit)
      {
        v29 = 0;
        v18[2] = v32;
        *((_DWORD *)v18 + 2) = v33;
        *(_QWORD *)(StatusReg + 176) = v18;
      }
      goto LABEL_86;
    }
LABEL_80:
    if ((v22 & 4) != 0)
      goto LABEL_81;
LABEL_86:
    if ((v22 & 8) != 0)
    {
      v34 = v18[6];
      v35 = *(_QWORD *)(*(_QWORD *)v34 + 40);
      if (v35 != 514)
        _dispatch_queue_override_invoke_cold_1(v35);
      _dispatch_client_callout(v18[5], (uint64_t (*)(void))v18[4]);
      dispatch_group_leave_VARIANT_armv81(v34);
      if (!v29)
      {
LABEL_88:
        if (!v21)
          goto LABEL_90;
LABEL_89:
        v21[1](&_dispatch_main_q);
        goto LABEL_90;
      }
    }
    else
    {
      _dispatch_client_callout(v18[5], (uint64_t (*)(void))v18[4]);
      if (!v29)
        goto LABEL_88;
    }
    _dispatch_continuation_free_to_cache_limit_VARIANT_armv81(v29);
    if (v21)
      goto LABEL_89;
LABEL_90:
    v18 = (uint64_t *)v20;
  }
  while (v20);
  ((void (*)(__objc2_class **, _QWORD, _QWORD))_dispatch_main_q[2].isa)(&_dispatch_main_q, 0, 0);
  *(_QWORD *)(StatusReg + 200) = v41 & 0xFFF0FFFF;
  v36 = v42 & 0xFFFFFFFF02FFFFFFLL;
  if (v42 == -1)
    v37 = 0;
  else
    v37 = v42 & 0xFFFFFFFF02FFFFFFLL;
  v38 = *(_QWORD *)(StatusReg + 32);
  if ((v38 & 0x1000000) != 0)
  {
    v39 = v43;
    if (!v37)
    {
      v37 = v38 & 0xFFFFFFFFFEFFFFFFLL;
      goto LABEL_113;
    }
LABEL_117:
    _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(v36, v39, 6);
  }
  else
  {
    v39 = v43;
    if (v37 == (v38 & 0xFFFFFFFF77FFFFFFLL))
      goto LABEL_101;
LABEL_113:
    v36 = v37;
    if (v37)
      goto LABEL_117;
LABEL_101:
    if (v39 != -1)
    {
      if (*(_QWORD *)(StatusReg + 224) != v39)
      {
        v36 = 0;
        goto LABEL_117;
      }
      if (v39
        && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v39 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
      {
        _dispatch_async_redirect_invoke_cold_1();
      }
    }
  }
  *(_OWORD *)(StatusReg + 160) = v45;
  *(_QWORD *)(StatusReg + 216) = 0;
  *(_QWORD *)(StatusReg + 40) = 0;
  v40 = *(_QWORD *)(StatusReg + 176);
  if (v40)
  {
    *(_QWORD *)(StatusReg + 176) = 0;
    _dispatch_cache_cleanup_0(v40);
  }
}

uint64_t _dispatch_main_queue_push_VARIANT_armv81(uint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t StatusReg;
  unint64_t v4;
  uint64_t v5;

  *(_QWORD *)(a2 + 16) = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_QWORD *)(StatusReg + 976) = result + 48;
  v4 = atomic_exchange_explicit((atomic_ullong *volatile)(result + 48), a2, memory_order_release);
  if (v4)
  {
    *(_QWORD *)(v4 + 16) = a2;
    *(_QWORD *)(StatusReg + 976) = 0;
    if (((*(_DWORD *)(result + 84) >> 8) & 0xFu) >= a3)
      v5 = 0;
    else
      v5 = a3;
    if ((*(_DWORD *)(result + 60) & 7) == 0 || (*(_DWORD *)(result + 60) & 7u) < v5)
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)result + 80))(result, v5, 0);
  }
  else
  {
    *(_QWORD *)(result + 104) = a2;
    *(_QWORD *)(StatusReg + 976) = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 80))(result, a3, 2);
  }
  return result;
}

void _dispatch_main_queue_wakeup_VARIANT_armv81(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_DWORD *)(a1 + 80) & 0x40000) != 0)
    _dispatch_runloop_queue_wakeup_VARIANT_armv81(a1, a2, a3);
  else
    _dispatch_lane_wakeup_VARIANT_armv81(a1, a2, a3);
}

void dispatch_main_VARIANT_armv81()
{
  if (_dispatch_root_queues_pred != -1)
    goto LABEL_9;
  while (1)
  {
    if (!pthread_main_np())
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_main() must be called on the main thread";
      __break(1u);
    }
    if (!dword_1ECCE9B70)
    {
      dword_1ECCE9B70 = 1;
      _dispatch_main_queue_drain_0();
      dword_1ECCE9B70 = 0;
      _dispatch_program_is_probably_callback_driven = 1;
      if (MEMORY[0xFFFFFC100])
        kdebug_trace();
      pthread_exit(0);
    }
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_main called from a block on the main queue";
    __break(1u);
LABEL_9:
    dispatch_once_f_VARIANT_armv81(&_dispatch_root_queues_pred, 0, _dispatch_root_queues_init_once_0);
  }
}

__objc2_class **dispatch_get_global_queue_VARIANT_armv81(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;

  if ((a2 & 0xFFFFFFFFFFFFFFF9) != 0 || (~(_BYTE)a2 & 6) == 0)
    return 0;
  if (a1 <= -3)
  {
    if (a1 == -32768)
    {
      v3 = 3;
      goto LABEL_17;
    }
    if (a1 != -128)
      goto LABEL_14;
LABEL_11:
    v3 = 6;
    goto LABEL_17;
  }
  switch(a1)
  {
    case -2:
      goto LABEL_11;
    case 0:
      v3 = 9;
      goto LABEL_17;
    case 2:
      v3 = 12;
      goto LABEL_17;
  }
LABEL_14:
  HIDWORD(v5) = a1 - 5;
  LODWORD(v5) = a1 - 5;
  v4 = v5 >> 2;
  if (v4 > 7 || ((0xBBu >> v4) & 1) == 0)
    return 0;
  v3 = qword_18A06EAA0[v4];
LABEL_17:
  v6 = (a2 >> 1) & 2;
  if ((a2 & 2) != 0)
    v6 = 1;
  return &_dispatch_root_queues + 16 * (v3 + v6);
}

uint64_t libdispatch_init_VARIANT_armv81()
{
  unsigned int v0;
  unint64_t v1;
  int v2;
  _QWORD *StatusReg;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;

  if (_dispatch_getenv_BOOL("LIBDISPATCH_STRICT", 0))
    _dispatch_mode |= 1u;
  if (_dispatch_getenv_BOOL("LIBDISPATCH_COOPERATIVE_POOL_STRICT", 0))
    _dispatch_mode |= 4u;
  HIDWORD(v1) = qos_class_main() - 5;
  LODWORD(v1) = HIDWORD(v1);
  v0 = v1 >> 2;
  if (v0 > 7)
    v2 = 0;
  else
    v2 = dword_18A06EAE0[v0];
  dword_1ECCE9B54 = v2;
  pthread_key_init_np();
  pthread_key_init_np();
  pthread_key_init_np();
  pthread_key_init_np();
  pthread_key_init_np();
  pthread_key_init_np();
  pthread_key_init_np();
  pthread_key_init_np();
  pthread_key_init_np();
  pthread_key_init_np();
  qword_1ECCE9B18 = (uint64_t)&off_1ECCEA100;
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  StatusReg[20] = &_dispatch_main_q;
  v4 = qword_1ECCE9B38[0];
  v5 = qword_1ECCE9B38[0];
  do
  {
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)qword_1ECCE9B38, &v5, v4 & 0xFFFFFFFF00000003 | (4 * ((StatusReg[3] >> 2) & 0x3FFFFFFFLL)), memory_order_relaxed, memory_order_relaxed);
    v6 = v5 == v4;
    v4 = v5;
  }
  while (!v6);
  if ((~*((_DWORD *)StatusReg + 50) & 0xF0000) != 0)
    StatusReg[25] = StatusReg[25] | 0xF0000;
  _dispatch_time_init();
  _dispatch_vtable_init();
  _os_object_init();
  _voucher_init_VARIANT_armv81();
  return _workgroup_init_VARIANT_armv81();
}

void _dispatch_queue_cleanup_0(__objc2_class **a1)
{
  if (a1 != &_dispatch_main_q)
    _dispatch_queue_cleanup_cold_1_0((uint64_t)a1);
  _dispatch_queue_cleanup2_0();
}

void _dispatch_frame_cleanup_0(uint64_t a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Premature thread exit while a dispatch frame is active";
  qword_1EDF52D38 = a1;
  __break(1u);
}

uint64_t _dispatch_cache_cleanup_0(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    do
    {
      v1 = *(_QWORD *)(result + 16);
      _dispatch_continuation_free_to_heap_VARIANT_armv81(result);
      result = v1;
    }
    while (v1);
  }
  return result;
}

void _dispatch_context_cleanup_0(uint64_t a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Premature thread exit while a dispatch context is set";
  qword_1EDF52D38 = a1;
  __break(1u);
}

void _dispatch_wlh_cleanup_0(uint64_t a1)
{
  unint64_t v1;
  int add_explicit;

  v1 = a1 & 0xFFFFFFFFFFFFFFFELL;
  add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v1 + 96), 0xFFFFFFFF, memory_order_relaxed);
  if (add_explicit <= 0)
  {
    if (add_explicit < 0)
      _os_object_allows_weak_reference_VARIANT_mp_cold_1();
    *(_QWORD *)(v1 + 56) = 0xDEAD000000000000;
    _dispatch_object_dealloc_VARIANT_mp((void *)v1);
  }
}

void _dispatch_deferred_items_cleanup_0(uint64_t a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Premature thread exit with unhandled deferred items";
  qword_1EDF52D38 = a1;
  __break(1u);
}

void _dispatch_queue_atfork_child_VARIANT_armv81()
{
  unint64_t v0;
  unint64_t StatusReg;
  unint64_t v2;
  BOOL v3;
  uint64_t v4;
  char *v5;

  if ((dword_1ECCE9B50 & 0x40000) != 0)
  {
    v0 = qword_1ECCE9B38[0];
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v2 = v0;
    do
    {
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)qword_1ECCE9B38, &v2, v0 & 0xFFFFFFFF00000003 | (4 * ((*(_QWORD *)(StatusReg + 24) >> 2) & 0x3FFFFFFFLL)), memory_order_relaxed, memory_order_relaxed);
      v3 = v2 == v0;
      v0 = v2;
    }
    while (!v3);
  }
  if ((_dispatch_unsafe_fork & 1) != 0)
  {
    v4 = 0;
    off_1ECCE9B68 = (_UNKNOWN *)256;
    qword_1ECCE9B30 = 256;
    qword_1ECCE9BE8 = 256;
    qword_1ECCE9BB0 = 256;
    do
    {
      v5 = (char *)&_dispatch_root_queues + v4;
      *((_QWORD *)v5 + 13) = 256;
      *((_QWORD *)v5 + 6) = 256;
      v4 += 128;
    }
    while (v4 != 2304);
  }
}

void _dispatch_fork_becomes_unsafe_slow_VARIANT_armv81()
{
  if ((atomic_fetch_or_explicit(&_dispatch_unsafe_fork, 1u, memory_order_relaxed) & 2) != 0)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Transition to multithreaded is prohibited";
    __break(1u);
  }
}

uint64_t _dispatch_prohibit_transition_to_multithreaded_VARIANT_armv81(uint64_t result)
{
  if ((_DWORD)result)
  {
    if ((atomic_fetch_or_explicit(&_dispatch_unsafe_fork, 2u, memory_order_relaxed) & 1) != 0)
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: The executable is already multithreaded";
      __break(1u);
    }
  }
  else
  {
    atomic_fetch_and_explicit(&_dispatch_unsafe_fork, 0xFDu, memory_order_relaxed);
  }
  return result;
}

void _dispatch_block_async_invoke2_0(char *aBlock, const char *a2)
{
  char v2;
  char *v3;
  uint64_t (*v4)();
  BOOL v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int add_explicit;

  v2 = (char)a2;
  v3 = aBlock;
  v4 = (uint64_t (*)())*((_QWORD *)aBlock + 2);
  v5 = v4 == ___dispatch_block_create_block_invoke;
  if (v4 == ___dispatch_block_create_block_invoke)
  {
    v6 = aBlock + 32;
    v7 = *((_QWORD *)aBlock + 4);
    v5 = v7 == 3512316172;
    if (v7 != 3512316172)
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption of dispatch block object";
      qword_1EDF52D38 = v7;
      __break(1u);
      goto LABEL_21;
    }
  }
  else
  {
    v6 = 0;
  }
  v8 = *((unsigned int *)v6 + 4);
  if ((v8 & 4) != 0)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: A block object may not be both run more than once and waited for";
    qword_1EDF52D38 = v8;
    __break(1u);
  }
  else
  {
    if ((v8 & 1) == 0)
      aBlock = (char *)(*(uint64_t (**)(void))(*((_QWORD *)v6 + 5) + 16))();
    if ((v8 & 8) == 0 && !atomic_fetch_add_explicit((atomic_uint *volatile)v6 + 5, 1u, memory_order_relaxed))
      aBlock = (char *)dispatch_group_leave_VARIANT_armv81(*((_QWORD *)v6 + 6));
    __swp(aBlock, (unsigned int *)v6 + 14);
    if (!aBlock
      || *((_DWORD *)aBlock + 2) == 0x7FFFFFFF
      || (add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)aBlock + 2, 0xFFFFFFFE, memory_order_release),
          v5 = add_explicit == 2,
          add_explicit > 2))
    {
      if ((v2 & 1) == 0)
        return;
LABEL_19:
      _Block_release(v3);
      return;
    }
  }
  if (!v5)
  {
LABEL_21:
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
    __break(1u);
    return;
  }
  _os_object_dispose(aBlock, a2);
  if ((v2 & 1) != 0)
    goto LABEL_19;
}

void _dispatch_lane_non_barrier_complete_0(uint64_t a1, uint64_t a2)
{
  unint64_t StatusReg;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
  v4 = *(_QWORD *)(a1 + 56);
  do
  {
    v5 = v4;
    v6 = v4 - 0x20000000000;
    if ((v4 & 0xFFFFFFFC) != 0)
    {
      v6 |= 0x8000000000uLL;
    }
    else if (!(v6 >> 53))
    {
      v7 = (v4 & 0x10000000000) != 0
         ? v4 - 0x10000000000
         : v6 + ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41);
      v8 = (v7 & 0x3FFE0000000000) == 0x20000000000000;
      v6 |= (v5 >> 39) & 1;
      v9 = ((v7 & 0xFFFFFF7FFFFFFFFFLL) + 0x40000000000000) | v3;
      if (v8)
        v6 = v9;
    }
    v4 = v5;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v4, v6, memory_order_relaxed, memory_order_relaxed);
  }
  while (v4 != v5);
  if ((~v5 & 0x1800000000) == 0)
  {
    v10 = HIDWORD(v5) & 7;
    v11 = *(_DWORD *)(StatusReg + 200);
    if ((HIWORD(v11) & 0xF) < v10)
      *(_QWORD *)(StatusReg + 200) = v11 & 0xFFF0FFFF | ((_DWORD)v10 << 16);
  }
  if (((v6 ^ v5) & 0x40000000000000) != 0)
  {
    _dispatch_lane_barrier_complete_0(a1, 0, a2);
  }
  else if (((v6 ^ v5) & 1) != 0)
  {
    if ((a2 & 1) != 0
      || *(_DWORD *)(a1 + 8) == 0x7FFFFFFF
      || (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 2u, memory_order_relaxed) > 0)
    {
      (*(void (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24), a1, HIDWORD(v6) & 7);
    }
    else
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
    }
  }
  else if ((a2 & 1) != 0)
  {
    _os_object_release_internal_n_VARIANT_armv81((void *)a1, (const char *)2);
  }
}

double _dispatch_sync_f_slow_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t a4, atomic_ullong *a5, uint64_t a6)
{
  _QWORD *StatusReg;
  uint64_t v11;
  double result;
  _QWORD v13[7];
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;

  if (!a5[3])
    return _dispatch_sync_function_invoke((uint64_t)a5, a2, a3);
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v11 = StatusReg[4];
  v21 = 0;
  v13[0] = a6 | 1;
  v13[1] = v11 | 0x10000000;
  v13[2] = 0;
  v13[3] = StatusReg[28];
  v13[4] = _dispatch_async_and_wait_invoke_0;
  v13[5] = v13;
  v13[6] = 0;
  v14 = a1;
  v15 = a3;
  v17 = 0;
  v18 = 0;
  v16 = a2;
  v19 = 0;
  v20 = StatusReg[3];
  __DISPATCH_WAIT_FOR_QUEUE___0((uint64_t)v13, a5);
  if (v15)
    _dispatch_sync_invoke_and_complete_recurse_0(a1, a2, a3, a4);
  else
    _dispatch_sync_complete_recurse_0(a1, v14, a4);
  return result;
}

double _dispatch_sync_recurse_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t a4)
{
  unint64_t StatusReg;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
LABEL_2:
  if (*(_WORD *)(v5 + 80) == 1)
  {
    v7 = *(_QWORD *)(v5 + 56);
    while (v7 == (v7 & 0x3000000000 | 0x1FFE0000000000))
    {
      v8 = v7;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v5 + 56), (unint64_t *)&v8, v6 | v7 & 0x3000000000 | 0x60000000000002, memory_order_acquire, memory_order_acquire);
      v9 = v8 == v7;
      v7 = v8;
      if (v9)
        goto LABEL_7;
    }
    v13 = 2;
  }
  else
  {
    if (!*(_QWORD *)(v5 + 48))
    {
      v10 = *(_QWORD *)(v5 + 56);
      while ((v10 & 0xFFC0018000000000) == 0)
      {
        v11 = v10;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v5 + 56), (unint64_t *)&v11, v10 + 0x20000000000, memory_order_relaxed, memory_order_relaxed);
        v9 = v11 == v10;
        v10 = v11;
        if (v9)
        {
LABEL_7:
          v5 = *(_QWORD *)(v5 + 24);
          if (*(_QWORD *)(v5 + 24))
            goto LABEL_2;
          _dispatch_sync_invoke_and_complete_recurse_0(a1, a2, a3, a4);
          return result;
        }
      }
    }
    v13 = 0;
  }
  return _dispatch_sync_f_slow_0(a1, a2, a3, a4, (atomic_ullong *)v5, v13);
}

void _dispatch_lane_barrier_sync_invoke_and_complete_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t StatusReg;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v8 = *(_OWORD *)(StatusReg + 160);
  *(_QWORD *)(StatusReg + 160) = a1;
  *(_QWORD *)(StatusReg + 168) = &v8;
  _dispatch_client_callout(a2, a3);
  *(_OWORD *)(StatusReg + 160) = v8;
  if (!*(_QWORD *)(a1 + 48) && *(unsigned __int16 *)(a1 + 80) < 2u)
  {
    v5 = *(_QWORD *)(a1 + 56);
    while ((v5 & 0xFF80008800000001) == 0)
    {
      v6 = v5;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), (unint64_t *)&v6, (v5 & 0xFFFFFFF000000001) - 0x40020000000000, memory_order_release, memory_order_relaxed);
      v7 = v6 == v5;
      v5 = v6;
      if (v7)
        return;
    }
  }
  _dispatch_lane_barrier_complete_0(a1, 0, 0);
}

uint64_t _dispatch_async_and_wait_invoke_0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  unint64_t StatusReg;
  uint64_t result;
  __int128 v6;

  v2 = *(_QWORD *)(a1 + 56);
  if ((*(_BYTE *)(a1 + 106) & 1) != 0)
    v3 = (void *)MEMORY[0x18D766D94]();
  else
    v3 = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = *(_OWORD *)(StatusReg + 160);
  *(_QWORD *)(StatusReg + 160) = v2;
  *(_QWORD *)(StatusReg + 168) = a1 + 80;
  _dispatch_client_callout(*(_QWORD *)(a1 + 72), *(uint64_t (**)(void))(a1 + 64));
  *(_OWORD *)(StatusReg + 160) = v6;
  if (v3)
    objc_autoreleasePoolPop(v3);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(StatusReg + 160);
  *(_QWORD *)(a1 + 64) = 0;
  if (*(_QWORD *)(a1 + 48) != -4)
    return _dispatch_event_loop_cancel_waiter_VARIANT_armv81(a1);
  result = a1 + 96;
  if (atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 96), 1u, memory_order_release))
    return _dispatch_thread_event_signal_slow_VARIANT_mp();
  return result;
}

void __DISPATCH_WAIT_FOR_QUEUE___0(uint64_t a1, atomic_ullong *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t StatusReg;
  _QWORD *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  atomic_ullong *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v4 = a2[7];
  while ((v4 & 0xFF80002000000002) == 0x2000000002)
  {
    v5 = v4 | 0x800000000;
    v6 = v4;
    atomic_compare_exchange_strong_explicit(a2 + 7, (unint64_t *)&v6, v4 | 0x800000000, memory_order_relaxed, memory_order_relaxed);
    v7 = v6 == v4;
    v4 = v6;
    if (v7)
      goto LABEL_5;
  }
  v5 = v4;
LABEL_5:
  if ((*(_DWORD *)(a1 + 100) ^ v5) <= 3)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_sync called on queue already owned by current thread";
    qword_1EDF52D38 = v5;
    __break(1u);
    return;
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(StatusReg + 160);
  if ((v5 & 0xFF80001000000000) != 0)
  {
    *(_QWORD *)(a1 + 48) = -4;
    v9 = (_QWORD *)(a1 + 48);
LABEL_8:
    v10 = *(_DWORD *)(StatusReg + 200);
    v11 = (v10 >> 8) & 0xF;
    v12 = (unsigned __int16)v10 >> 12;
    v13 = HIWORD(v10) & 0xF;
    if (v11 <= v12)
      v11 = v12;
    if (v11 > v13)
      LOBYTE(v13) = v11;
    *(_BYTE *)(a1 + 105) = v13;
    *(_BYTE *)(a1 + 104) = v13;
    *(_DWORD *)(a1 + 96) = 0;
    goto LABEL_17;
  }
  if ((v5 & 0x2000000000) != 0)
  {
    *(_QWORD *)(a1 + 48) = a2;
    v14 = a2;
  }
  else
  {
    _dispatch_wait_compute_wlh_0((uint64_t)a2, a1);
    v14 = *(atomic_ullong **)(a1 + 48);
  }
  v9 = (_QWORD *)(a1 + 48);
  if (v14 == (atomic_ullong *)-4)
    goto LABEL_8;
LABEL_17:
  *(_QWORD *)(StatusReg + 968) = a1;
  v15 = __clz(__rbit32((*(_DWORD *)(a1 + 8) >> 8) & 0x3FFF));
  if (((*(_DWORD *)(a1 + 8) >> 8) & 0x3FFF) != 0)
    v16 = v15 + 1;
  else
    v16 = 0;
  (*(void (**)(atomic_ullong *, uint64_t, uint64_t))(*a2 + 88))(a2, a1, v16);
  if (*(_QWORD *)(a1 + 48) == -4)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 96), 0xFFFFFFFF, memory_order_acquire) != 1)
      _dispatch_thread_event_wait_slow_VARIANT_armv81((unsigned int *)(a1 + 96));
  }
  else if ((*(_BYTE *)(a1 + 106) & 8) == 0)
  {
    _dispatch_event_loop_wait_for_ownership_VARIANT_armv81(a1);
  }
  *(_QWORD *)(StatusReg + 968) = 0;
  if (*v9 == -4)
  {
    v17 = *(unsigned __int8 *)(a1 + 105);
    if (v17 > *(unsigned __int8 *)(a1 + 104))
    {
      v18 = *(_DWORD *)(StatusReg + 200);
      if ((HIWORD(v18) & 0xF) < v17)
        *(_QWORD *)(StatusReg + 200) = v18 & 0xFFF0FFFF | (v17 << 16);
    }
  }
}

void _dispatch_sync_complete_recurse_0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;

  v5 = (a3 >> 1) & 1;
  do
  {
    if (a1 == a2)
      break;
    if ((v5 & 1) != 0)
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 80))(a1, 0, 4);
    else
      _dispatch_lane_non_barrier_complete_0(a1, 0);
    a1 = *(_QWORD *)(a1 + 24);
    LOBYTE(v5) = *(unsigned __int16 *)(a1 + 80) == 1;
  }
  while (*(_QWORD *)(a1 + 24));
}

void _dispatch_sync_invoke_and_complete_recurse_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t a4)
{
  unint64_t StatusReg;
  __int128 v7;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_OWORD *)(StatusReg + 160);
  *(_QWORD *)(StatusReg + 160) = a1;
  *(_QWORD *)(StatusReg + 168) = &v7;
  _dispatch_client_callout(a2, a3);
  *(_OWORD *)(StatusReg + 160) = v7;
  _dispatch_sync_complete_recurse_0(a1, 0, a4);
}

uint64_t _dispatch_wait_compute_wlh_0(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t StatusReg;
  unsigned int v13;
  unsigned int v14;

  v4 = *(_DWORD *)(a1 + 80);
  if ((v4 & 0x400000) != 0)
  {
    v5 = 0;
    *(_BYTE *)(a2 + 106) |= 0x40u;
    v6 = a1 + 100;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 100), (unsigned int *)&v5, *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
    if (v5)
      _dispatch_unfair_lock_lock_slow_VARIANT_armv81(v6);
  }
  result = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(result + 56);
  while (1)
  {
    if (v8 >> 55)
      goto LABEL_18;
    if ((~v8 & 0x2000000002) != 0)
      break;
    v9 = v8 | 0x800000000;
    v10 = v8;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(result + 56), &v10, v8 | 0x800000000, memory_order_relaxed, memory_order_relaxed);
    v11 = v10 == v8;
    v8 = v10;
    if (v11)
    {
      if ((v9 & 0x1000000000) == 0)
        goto LABEL_10;
LABEL_18:
      *(_BYTE *)(a2 + 106) &= ~0x40u;
      *(_QWORD *)(a2 + 48) = -4;
      goto LABEL_19;
    }
  }
  v9 = v8;
  if ((v8 & 0x1000000000) != 0)
    goto LABEL_18;
LABEL_10:
  if ((v9 & 0x2000000000) != 0)
  {
    if (*(_BYTE *)(*(_QWORD *)result + 40) == 18)
    {
      *(_BYTE *)(a2 + 106) = *(_BYTE *)(a2 + 106) & 0xAF | 0x10;
    }
    else if ((*(_BYTE *)(a2 + 106) & 0x40) != 0
           && (atomic_fetch_add_explicit((atomic_uint *volatile)(result + 96), 1u, memory_order_relaxed) & 0x80000000) != 0)
    {
      dispatch_set_target_queue_VARIANT_mp_cold_2();
    }
    *(_QWORD *)(a2 + 48) = result;
  }
  else
  {
    result = _dispatch_wait_compute_wlh_0();
  }
LABEL_19:
  if ((v4 & 0x400000) != 0)
  {
    if ((*(_BYTE *)(a2 + 106) & 0x10) != 0)
      atomic_fetch_and_explicit((atomic_uint *volatile)(a1 + 80), 0xFFBFFFFF, memory_order_relaxed);
    result = a1 + 100;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v13 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    v14 = atomic_exchange_explicit((atomic_uint *volatile)(a1 + 100), 0, memory_order_release);
    if (v14 != v13)
    {
      result = _dispatch_unfair_lock_unlock_slow_VARIANT_mp(result, v14);
      if ((v14 & 2) != 0 && (*(_QWORD *)(StatusReg + 200) & 0xF0000) == 0)
        *(_QWORD *)(StatusReg + 200) = *(_QWORD *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
    }
  }
  return result;
}

void _dispatch_sync_invoke_and_complete_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t StatusReg;
  __int128 v5;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_OWORD *)(StatusReg + 160);
  *(_QWORD *)(StatusReg + 160) = a1;
  *(_QWORD *)(StatusReg + 168) = &v5;
  _dispatch_client_callout(a2, a3);
  *(_OWORD *)(StatusReg + 160) = v5;
  _dispatch_lane_non_barrier_complete_0(a1, 0);
}

void _dispatch_async_and_wait_recurse_0(uint64_t a1, uint64_t a2, int a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_QWORD *)(a1 + 56);
  v6 = a1;
  if ((*(_DWORD *)(a1 + 80) & 0x1000000) != 0)
    goto LABEL_34;
  v7 = (_DWORD *)(a1 + 80);
  v8 = a3 & 0xFFFFFFFC;
  v9 = a1;
  v10 = a4;
LABEL_3:
  if ((v5 & 0x3000000000) != 0)
  {
    v11 = *(_QWORD *)(v9 + 24);
    if (v11 < (unint64_t)&_dispatch_root_queues || v11 >= (unint64_t)&_dispatch_queue_serial_numbers)
    {
      v6 = v9;
LABEL_34:
      *(_QWORD *)a2 &= ~0x80uLL;
      *(_QWORD *)(a2 + 56) = v6;
      v9 = v6;
      goto LABEL_32;
    }
  }
  if ((v10 & 2) != 0)
  {
    v13 = (unint64_t)*(unsigned __int16 *)(v9 + 80) << 41;
    v14 = *(_QWORD *)(v9 + 56);
    while (v14 == (v14 & 0x3000000000) - v13 + 0x20000000000000)
    {
      v15 = v14;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v9 + 56), (unint64_t *)&v15, v14 & 0x3000000000 | v8 | 0x60000000000002, memory_order_acquire, memory_order_acquire);
      v16 = v15 == v14;
      v14 = v15;
      if (v16)
        goto LABEL_13;
    }
  }
  else if (!*(_QWORD *)(v9 + 48))
  {
    v21 = *(_QWORD *)(v9 + 56);
    while ((v21 & 0xFFC0018000000000) == 0)
    {
      v22 = v21;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v9 + 56), (unint64_t *)&v22, v21 + 0x20000000000, memory_order_relaxed, memory_order_relaxed);
      v16 = v22 == v21;
      v21 = v22;
      if (v16)
      {
LABEL_13:
        v17 = *(_DWORD *)(v9 + 84) & 0xFFF;
        if (v17)
        {
          v18 = v17 >= 0x100 ? 256 << (BYTE1(v17) - 1) : 0;
          v19 = v18 & 0xFFFFFFFFFFFFFF00 | *(_DWORD *)(v9 + 84);
          if (v19 > (*(_QWORD *)(a2 + 8) & 0xFFFFFFuLL))
            *(_QWORD *)(a2 + 8) = v19 | 0x10000000;
        }
        if ((*(_BYTE *)(a2 + 106) & 3) == 0)
          *(_BYTE *)(a2 + 106) = *(_BYTE *)(a2 + 106) & 0xFC | HIWORD(*v7) & 3;
        v6 = *(_QWORD *)(v9 + 24);
        if (!*(_QWORD *)(v6 + 24))
        {
          _dispatch_async_and_wait_invoke_and_complete_recurse_0(a1, a2, v9, a4);
          return;
        }
        v7 = (_DWORD *)(v6 + 80);
        v20 = v10 & 0xFFFFFFFFFFFFFFFDLL;
        v10 |= 2uLL;
        if (*(_WORD *)(v6 + 80) != 1)
          v10 = v20;
        *(_QWORD *)a2 = v10;
        v5 = *(_QWORD *)(v6 + 56);
        v9 = v6;
        if ((*(_DWORD *)(v6 + 80) & 0x1000000) == 0)
          goto LABEL_3;
        goto LABEL_34;
      }
    }
  }
LABEL_32:
  _dispatch_async_and_wait_f_slow_0(a1, a4, a2, (atomic_ullong *)v9);
}

void _dispatch_async_and_wait_f_slow_0(uint64_t a1, unint64_t a2, uint64_t a3, atomic_ullong *a4)
{
  __DISPATCH_WAIT_FOR_QUEUE___0(a3, a4);
  if (*(_QWORD *)(a3 + 64))
    _dispatch_async_and_wait_invoke_and_complete_recurse_0(a1, a3, *(_QWORD *)(a3 + 56), a2);
  else
    _dispatch_sync_complete_recurse_0(a1, *(_QWORD *)(a3 + 56), a2);
}

void _dispatch_async_and_wait_invoke_and_complete_recurse_0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t StatusReg;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  if (*(_BYTE *)(*(_QWORD *)a3 + 40) != 18 && (*(_QWORD *)(a3 + 56) & 0x2000000000) == 0)
    a3 = -4;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v8 = *(_QWORD *)(StatusReg + 216);
  *(_QWORD *)(StatusReg + 216) = a3;
  if ((*(_BYTE *)(a2 + 106) & 1) != 0)
    v9 = (void *)MEMORY[0x18D766D94]();
  else
    v9 = 0;
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 24);
  v20 = *(_OWORD *)(StatusReg + 160);
  *(_QWORD *)(StatusReg + 160) = a1;
  *(_QWORD *)(StatusReg + 168) = &v20;
  v12 = *(_QWORD *)(StatusReg + 32);
  v13 = v12 & 0xFFFFFF;
  v14 = (v12 & 0xFFFFFFuLL) >= (v10 & 0xFFFFFFuLL) || (v12 & 0xFFFFFF) == 0;
  if (v14)
    v15 = 0;
  else
    v15 = v12 & 0xFFFFFF;
  v16 = v10 & 0xFFFFFFFF02FFFFFFLL;
  if (v14)
    v17 = 0;
  else
    v17 = v10 & 0xFFFFFFFF02FFFFFFLL;
  if ((v12 & 0x1000000) != 0)
  {
    if (v17)
    {
LABEL_41:
      _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(v16, v11, 0);
      v11 = v19;
      goto LABEL_20;
    }
    v17 = v12 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v17 == (v12 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_16;
  }
  v16 = v17;
  if (v17)
    goto LABEL_41;
LABEL_16:
  if (v11 == -1)
    goto LABEL_20;
  if (*(_QWORD *)(StatusReg + 224) != v11)
  {
    v16 = 0;
    goto LABEL_41;
  }
  if (v11 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 12), 1u, memory_order_relaxed) <= 0)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
LABEL_45:
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
    __break(1u);
    return;
  }
LABEL_20:
  _dispatch_client_callout(*(_QWORD *)(a2 + 72), *(uint64_t (**)(void))(a2 + 64));
  v18 = *(_QWORD *)(StatusReg + 32);
  if ((v18 & 0x1000000) != 0)
  {
    if (!v14)
    {
LABEL_43:
      _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(v13, v11, 6);
      goto LABEL_26;
    }
    v13 = v18 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else
  {
    if (v15 == (v18 & 0xFFFFFFFF77FFFFFFLL))
      goto LABEL_22;
    v13 = v15;
  }
  if (v13)
    goto LABEL_43;
LABEL_22:
  if (v11 == -1)
    goto LABEL_26;
  if (*(_QWORD *)(StatusReg + 224) != v11)
  {
    v13 = 0;
    goto LABEL_43;
  }
  if (v11 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
    goto LABEL_45;
LABEL_26:
  *(_OWORD *)(StatusReg + 160) = v20;
  if (v9)
    objc_autoreleasePoolPop(v9);
  *(_QWORD *)(StatusReg + 216) = v8;
  _dispatch_sync_complete_recurse_0(a1, 0, a4);
}

void _dispatch_queue_specific_head_dispose_0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD v7[2];

  v3 = a1 + 1;
  v2 = (_QWORD *)a1[1];
  if (!v2)
    goto LABEL_9;
  v2[4] = v7;
  v4 = a1[2];
  v7[0] = v2;
  v7[1] = v4;
  a1[1] = 0;
  a1[2] = v3;
  do
  {
    v5 = (_QWORD *)v2[3];
    if (v2[2])
    {
      v2[3] = 0;
      v6 = (_QWORD *)a1[2];
      v2[4] = v6;
      *v6 = v2;
      a1[2] = v2 + 3;
    }
    else
    {
      free(v2);
    }
    v2 = v5;
  }
  while (v5);
  if (*v3)
    _dispatch_barrier_async_detached_f_VARIANT_armv81((uint64_t)&unk_1ECCEA080, (uint64_t)a1, (uint64_t)_dispatch_queue_specific_head_dispose_slow_0);
  else
LABEL_9:
    free(a1);
}

void _dispatch_queue_specific_head_dispose_slow_0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  if (v2)
  {
    do
    {
      v3 = *(_QWORD *)(v2 + 24);
      _dispatch_client_callout(*(_QWORD *)(v2 + 8), *(uint64_t (**)(void))(v2 + 16));
      free((void *)v2);
      v2 = v3;
    }
    while (v3);
  }
  free(a1);
}

uint64_t _dispatch_non_barrier_waiter_redirect_or_wake_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

uint64_t _dispatch_waiter_wake_wlh_anon_0(uint64_t a1)
{
  uint64_t result;

  if (*(unsigned __int8 *)(a1 + 105) > *(unsigned __int8 *)(a1 + 104))
    _pthread_workqueue_override_start_direct();
  result = a1 + 96;
  if (atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 96), 1u, memory_order_release))
    return _dispatch_thread_event_signal_slow_VARIANT_mp();
  return result;
}

uint64_t _dispatch_barrier_waiter_redirect_or_wake_0(uint64_t a1, uint64_t a2, char a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t StatusReg;
  unsigned int v7;
  uint64_t v8;
  uint64_t add_explicit;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  if (*(_QWORD *)(a2 + 48) == -4 && (BYTE4(a4) & 7u) > *(unsigned __int8 *)(a2 + 105))
    *(_BYTE *)(a2 + 105) = BYTE4(a4) & 7;
  if ((a4 & 0x2000000000) != 0)
  {
    v8 = a1;
    if ((a3 & 1) == 0)
    {
      if ((a4 & 1) == 0)
        goto LABEL_22;
      v8 = a1;
      if ((a5 & 1) != 0)
        goto LABEL_22;
      v8 = a1;
      if (*(_DWORD *)(a1 + 8) == 0x7FFFFFFF)
        goto LABEL_22;
      v8 = a1;
      if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 0xFFFFFFFF, memory_order_release) > 1)
        goto LABEL_22;
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
    }
    if ((a5 & 1) != 0)
      goto LABEL_20;
  }
  else
  {
    if ((~a4 & 0x1800000000) == 0)
    {
      v5 = HIDWORD(a4) & 7;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v7 = *(_DWORD *)(StatusReg + 200);
      if ((HIWORD(v7) & 0xF) < v5)
        *(_QWORD *)(StatusReg + 200) = v7 & 0xFFF0FFFF | ((_DWORD)v5 << 16);
    }
    v8 = -4;
    if ((a3 & 1) == 0)
      goto LABEL_22;
  }
  if (*(_DWORD *)(a1 + 8) == 0x7FFFFFFF
    || (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 0xFFFFFFFE, memory_order_release) > 2)
  {
    goto LABEL_22;
  }
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
LABEL_20:
  v8 = a1;
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 0xFFFFFFFF, memory_order_release);
    v8 = a1;
    if ((int)add_explicit <= 1)
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
      goto LABEL_39;
    }
  }
LABEL_22:
  if ((a4 & 0x3000000000) == 0)
  {
    v8 = *(_QWORD *)(a1 + 24);
    add_explicit = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 & 0x80) != 0)
    {
      v11 = *(_DWORD *)(a1 + 84) & 0xFFF;
      if (v11)
      {
        v12 = v11 >= 0x100 ? 256 << (BYTE1(v11) - 1) : 0;
        v13 = v12 & 0xFFFFFFFFFFFFFF00 | *(_DWORD *)(a1 + 84);
        if (v13 > (*(_QWORD *)(a2 + 8) & 0xFFFFFFuLL))
          *(_QWORD *)(a2 + 8) = v13 | 0x10000000;
      }
      if ((*(_BYTE *)(a2 + 106) & 3) == 0)
        *(_BYTE *)(a2 + 106) = *(_BYTE *)(a2 + 106) & 0xFC | HIWORD(*(_DWORD *)(a1 + 80)) & 3;
    }
    if (*(_WORD *)(v8 + 80) == 1)
    {
      *(_QWORD *)a2 = add_explicit | 2;
LABEL_37:
      *(_BYTE *)(a2 + 106) &= ~0x80u;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 88))(v8);
    }
LABEL_39:
    *(_QWORD *)a2 = add_explicit & 0xFFFFFFFFFFFFFFFDLL;
    if (!*(_QWORD *)(v8 + 48))
    {
      v14 = *(_QWORD *)(v8 + 56);
      while ((v14 & 0xFFC0018000000000) == 0)
      {
        v15 = v14;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v8 + 56), (unint64_t *)&v15, v14 + 0x20000000000, memory_order_relaxed, memory_order_relaxed);
        v16 = v15 == v14;
        v14 = v15;
        if (v16)
          return _dispatch_non_barrier_waiter_redirect_or_wake_0(v8, a2);
      }
    }
    goto LABEL_37;
  }
  if ((*(_BYTE *)a2 & 0x80) != 0)
    *(_QWORD *)(a2 + 56) = a1;
  return _dispatch_waiter_wake_0(a2, v8, a4, a5);
}

uint64_t _dispatch_waiter_wake_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 48);
  if (((a3 & 0x2000000000) == 0 || *(char *)(a1 + 106) < 0) && (a4 & 0x2000000000) == 0 && v5 == -4)
    return _dispatch_waiter_wake_wlh_anon_0(a1);
  result = _dispatch_event_loop_wake_owner_VARIANT_armv81(a1, a2, a3, a4);
  if (v5 == -4)
    return _dispatch_waiter_wake_wlh_anon_0(a1);
  return result;
}

void _dispatch_lane_concurrent_drain_0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t StatusReg;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (**v20)(uint64_t);
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _OWORD *v40;
  uint64_t v42;
  atomic_ullong *v43;
  unint64_t *v44;
  __int128 v45;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *a4;
  v43 = (atomic_ullong *)(a1 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v45 = *(_OWORD *)(StatusReg + 160);
    *(_QWORD *)(StatusReg + 160) = a1;
    *(_QWORD *)(StatusReg + 168) = &v45;
    if ((v5 & 0x40000000000000) != 0)
      v9 = 0x40000000000000;
    else
      v9 = v5 & 0x3FFE0000000000;
    v44 = (unint64_t *)(a1 + 104);
    v10 = *(_QWORD *)(a1 + 104);
    if (!v10)
      v10 = _dispatch_wait_for_enqueuer(v44);
    v40 = (_OWORD *)(StatusReg + 160);
    v11 = *(_QWORD *)(a1 + 56);
    if (!(v11 >> 55))
    {
      v42 = v4;
      while (v4 == *(_QWORD *)(a1 + 24))
      {
        v12 = *(_QWORD *)v10;
        if (*(_QWORD *)v10 >= 0x1000uLL)
        {
          if ((*(_QWORD *)(v12 + 40) & 0xF0) == 0x10 && (*(_DWORD *)(v10 + 80) & 0x80000) != 0)
          {
LABEL_17:
            if (v9 != 0x40000000000000)
            {
              v13 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) - 0x10000000000;
              v14 = v11;
              do
              {
                if ((v11 & 0x10000000000) != 0)
                  v15 = 0;
                else
                  v15 = v13;
                v16 = v15 + v11 - v9;
                if (!(v16 >> 53))
                  v16 += 0x40010000000000;
                atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v14, v16 & 0xFFFFFF7FFFFFFFFFLL, memory_order_acquire, memory_order_acquire);
                v28 = v14 == v11;
                v11 = v14;
              }
              while (!v28);
              if ((v16 & 0x40000000000000) == 0)
                goto LABEL_124;
              v12 = *(_QWORD *)v10;
            }
            if (v12 <= 0xFFF && (a3 & 0x80000) == 0 && (v12 & 1) != 0)
            {
              v35 = a2;
              *(_QWORD *)(a2 + 8) = v10;
              if ((a3 & 8) != 0)
              {
                qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Deferred continuation on source, mach channel or mgr";
                __break(1u);
LABEL_142:
                qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected object type";
                qword_1EDF52D38 = v35;
                __break(1u);
              }
              else
              {
                *v40 = v45;
              }
              return;
            }
            v17 = *(_QWORD *)(v10 + 16);
            *v44 = v17;
            if (!v17)
            {
              v18 = v10;
              atomic_compare_exchange_strong_explicit(v43, (unint64_t *)&v18, 0, memory_order_release, memory_order_relaxed);
              if (v18 != v10)
              {
                v17 = *(_QWORD *)(v10 + 16);
                if (!v17)
                  v17 = _dispatch_wait_for_enqueuer((unint64_t *)(v10 + 16));
                *v44 = v17;
              }
            }
            v9 = 0x40000000000000;
            goto LABEL_41;
          }
        }
        else if ((v12 & 2) != 0)
        {
          goto LABEL_17;
        }
        if (v9 == 0x40000000000000)
        {
          atomic_fetch_xor_explicit((atomic_ullong *volatile)(a1 + 56), 0x40000000000000uLL, memory_order_release);
          v9 = (unint64_t)*(unsigned __int16 *)(a1 + 80) << 41;
        }
        else if (!v9)
        {
          if (v12 > 0xFFF || (v12 & 0x81) == 0)
          {
            while ((v11 & 0xFFE0018000000000) == 0)
            {
              v36 = v11;
              atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v36, v11 + 0x20000000000, memory_order_acquire, memory_order_acquire);
              v28 = v36 == v11;
              v11 = v36;
              if (v28)
              {
                v9 = 0x20000000000;
                goto LABEL_35;
              }
            }
LABEL_124:
            *a4 &= 0x4000000001uLL;
            *v40 = v45;
            return;
          }
          v9 = 0x20000000000;
          atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 56), 0x20000000000uLL, memory_order_relaxed);
        }
LABEL_35:
        v17 = *(_QWORD *)(v10 + 16);
        *v44 = v17;
        if (!v17)
        {
          v19 = v10;
          atomic_compare_exchange_strong_explicit(v43, (unint64_t *)&v19, 0, memory_order_release, memory_order_relaxed);
          if (v19 != v10)
          {
            v17 = *(_QWORD *)(v10 + 16);
            if (!v17)
              v17 = _dispatch_wait_for_enqueuer((unint64_t *)(v10 + 16));
            *v44 = v17;
          }
        }
        if (*(_QWORD *)v10 <= 0xFFFuLL && (*(_QWORD *)v10 & 0x81) != 0)
        {
          v9 -= 0x20000000000;
          _dispatch_non_barrier_waiter_redirect_or_wake_0(a1, v10);
          goto LABEL_102;
        }
        if ((a3 & 0x20000) != 0)
        {
          v9 -= 0x20000000000;
          _dispatch_continuation_redirect_push_0((_DWORD *)a1, (_QWORD *)v10);
          goto LABEL_102;
        }
LABEL_41:
        v20 = *(void (***)(uint64_t))(StatusReg + 192);
        if (v20)
          (*v20)(a1);
        v21 = *(_QWORD *)v10;
        if (*(_QWORD *)v10 < 0x1000uLL)
        {
          if ((a3 & 0x1000000) != 0)
          {
            v22 = (void *)MEMORY[0x18D766D94]();
            v21 = *(_QWORD *)v10;
          }
          else
          {
            v22 = 0;
          }
          v23 = *(_QWORD *)(v10 + 24);
          if ((v21 & 4) != 0)
            *(_QWORD *)(v10 + 24) = -1;
          v24 = *(_QWORD *)(v10 + 8);
          if (v24 == -1)
          {
            v27 = 0;
          }
          else
          {
            v25 = *(_QWORD *)(StatusReg + 200);
            if (((v25 >> 8) & 0xF) != 0)
              v26 = 256 << ((BYTE1(v25) & 0xFu) - 1);
            else
              v26 = 0;
            v27 = v26 & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(StatusReg + 200);
            if ((v24 & 0xFFFFFF) != 0)
            {
              if ((v24 & 0xFFFFFFuLL) >= (v26 & 0xFFFFFF00))
              {
                v28 = (v25 & 0x44000000) == 0 && (*(_QWORD *)(v10 + 8) & 0x10000000) == 0;
                if (!v28)
                  v27 = v24 & 0xFFFFFF;
              }
            }
            else if ((unsigned __int16)v25 >> 12)
            {
              v27 = (256 << (((unsigned __int16)v25 >> 12) - 1)) | 0xFF;
            }
          }
          v29 = v21 & 4;
          v30 = v27 & 0xFFFFFFFF02FFFFFFLL;
          v31 = *(_QWORD *)(StatusReg + 32);
          if ((v31 & 0x1000000) != 0)
          {
            if (!v30)
            {
              v30 = v31 & 0xFFFFFFFFFEFFFFFFLL;
              goto LABEL_79;
            }
LABEL_87:
            _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(v30, v23, v29 | 2);
          }
          else
          {
            if (v30 == (v31 & 0xFFFFFFFF77FFFFFFLL))
              goto LABEL_68;
LABEL_79:
            if (v30)
              goto LABEL_87;
LABEL_68:
            if (v23 != -1)
            {
              if (*(_QWORD *)(StatusReg + 224) != v23)
              {
                v30 = 0;
                goto LABEL_87;
              }
              if ((v21 & 4) != 0 && v23)
              {
                if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v23 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
                {
                  qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
                  __break(1u);
                  return;
                }
LABEL_89:
                v32 = *(_QWORD *)(StatusReg + 176);
                if (v32)
                  v33 = *(_DWORD *)(v32 + 8) + 1;
                else
                  v33 = 1;
                v29 = v10;
                if (v33 <= _dispatch_continuation_cache_limit)
                {
                  v29 = 0;
                  *(_QWORD *)(v10 + 16) = v32;
                  *(_DWORD *)(v10 + 8) = v33;
                  *(_QWORD *)(StatusReg + 176) = v10;
                }
LABEL_94:
                if ((v21 & 8) != 0)
                {
                  v34 = *(_QWORD *)(v10 + 48);
                  v35 = *(_QWORD *)(*(_QWORD *)v34 + 40);
                  if (v35 != 514)
                    goto LABEL_142;
                  _dispatch_client_callout(*(_QWORD *)(v10 + 40), *(uint64_t (**)(void))(v10 + 32));
                  dispatch_group_leave_VARIANT_armv81(v34);
                }
                else
                {
                  _dispatch_client_callout(*(_QWORD *)(v10 + 40), *(uint64_t (**)(void))(v10 + 32));
                }
                if (v29)
                  _dispatch_continuation_free_to_cache_limit_VARIANT_armv81(v29);
                v4 = v42;
                if (v22)
                  objc_autoreleasePoolPop(v22);
                goto LABEL_100;
              }
            }
          }
          if ((v21 & 4) != 0)
            goto LABEL_89;
          goto LABEL_94;
        }
        if (*(_QWORD *)(v21 + 40) == 1)
          (*(void (**)(uint64_t, _QWORD, _QWORD))(v21 + 48))(v10, 0, (a3 >> 21) & 1);
        else
          (*(void (**)(uint64_t, uint64_t, _QWORD))(v21 + 64))(v10, a2, a3 & 0xFFFF0000);
LABEL_100:
        if (v20)
          v20[1](a1);
LABEL_102:
        v10 = v17;
        if (!v17)
        {
          if (!*v43)
          {
            v10 = 0;
            break;
          }
          v10 = *v44;
          if (!*v44)
            v10 = _dispatch_wait_for_enqueuer(v44);
        }
        if (*(_QWORD *)(StatusReg + 40))
          _dispatch_return_to_kernel_0();
        if (*(_WORD *)(a1 + 80) != 1
          && ((a3 & 0x4000000) != 0 || (*(_BYTE *)(StatusReg + 960) & 1) == 0)
          && ((a3 & 0x100000) == 0
           || (*(_DWORD *)(*(_QWORD *)(StatusReg + 216) + 60) & 7u) <= *(unsigned __int8 *)(*(_QWORD *)(StatusReg + 216)
                                                                                            + 100)))
        {
          v11 = *(_QWORD *)(a1 + 56);
          if (!(v11 >> 55))
            continue;
        }
        break;
      }
    }
    if (v9 == 0x40000000000000)
      v9 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) + 0x40000000000000;
    if (v10)
    {
      v37 = *(unsigned __int16 *)(a1 + 80);
      if (v37 < 2)
      {
LABEL_133:
        *a4 = *a4 & 0x4000000001 | v9;
        *v40 = v45;
        return;
      }
      v38 = *(_QWORD *)v10;
      if (*(_QWORD *)v10 < 0x1000uLL)
      {
        if ((v38 & 2) == 0)
          goto LABEL_133;
      }
      else if ((*(_QWORD *)(v38 + 40) & 0xF0) != 0x10 || (*(_DWORD *)(v10 + 80) & 0x80000) == 0)
      {
        goto LABEL_133;
      }
      v9 = v9 - (v37 << 41) + 0x10000000000;
      goto LABEL_133;
    }
    *a4 = *a4 & 0x4000000001 | v9;
    *v40 = v45;
  }
}

void _dispatch_workloop_bound_thread_init_once_0()
{
  int v0;
  size_t v1;
  int v2;

  v2 = 0;
  v1 = 4;
  v0 = sysctlbyname("kern.kern_event.thread_bound_kqwl_support_enabled", &v2, &v1, 0, 0);
  if (v0)
    _dispatch_bug(4220, v0);
  if (v2)
    _dispatch_thread_bound_kqwl_enabled = 1;
}

void _dispatch_workloop_activate_simulator_fallback_0(uint64_t a1, __int128 *a2)
{
  atomic_uint *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  v3 = (atomic_uint *)_dispatch_pthread_root_queue_create_0("com.apple.libdispatch.workloop_fallback", 0, a2, 0, 0);
  *(_QWORD *)(a1 + 24) = v3;
  if (v3[2] != 0x7FFFFFFF && (int)atomic_fetch_add_explicit(v3 + 2, 1u, memory_order_relaxed) <= 0)
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  dispatch_release_VARIANT_armv81(v3, v4);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = v5;
  do
  {
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), (unint64_t *)&v6, v5 & 0xFFFFFFCFFFFFFFFFLL | 0x1000000000, memory_order_relaxed, memory_order_relaxed);
    v7 = v6 == v5;
    v5 = v6;
  }
  while (!v7);
}

void _dispatch_queue_wakeup_with_override_slow_0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v5;
  int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  char v11;
  atomic_uint *v13;
  unint64_t StatusReg;
  unsigned int v15;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = HIDWORD(a2) & 7;
  v6 = *(int **)(a1 + 24);
  if ((a2 & 0x1000000000) != 0)
  {
    if (v6 < (int *)&_dispatch_root_queues || v6 >= (int *)&_dispatch_queue_serial_numbers)
      goto LABEL_41;
    if (a2 >= 4)
    {
      _pthread_workqueue_override_start_direct_check_owner();
      goto LABEL_41;
    }
    goto LABEL_16;
  }
  if ((*(_DWORD *)(a1 + 80) & 0x400000) == 0)
  {
LABEL_16:
    v11 = 1;
    goto LABEL_17;
  }
  v7 = *(_DWORD *)(a1 + 100);
  v8 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFC;
  do
  {
    v9 = v7;
    v10 = v7 | 2;
    if (v7 < 4)
      v10 = v8;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 100), &v7, v10, memory_order_acquire, memory_order_acquire);
  }
  while (v7 != v9);
  if (v9 > 3)
  {
    _pthread_workqueue_override_start_direct_check_owner();
    if (MEMORY[0xFFFFFC100])
      kdebug_trace();
    goto LABEL_41;
  }
  v6 = *(int **)(a1 + 24);
  if (MEMORY[0xFFFFFC100])
  {
    v20 = HIDWORD(a2) & 7;
    kdebug_trace();
    v5 = v20;
  }
  v11 = 0;
LABEL_17:
  v13 = (atomic_uint *)(a1 + 100);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    v15 = v5;
    if ((*(_QWORD *)(*(_QWORD *)v6 + 40) & 0x10000) != 0)
    {
      if (v5 > ((v6[21] >> 8) & 0xF))
        _dispatch_root_queue_push_override_stealer_0(v6, a1, v5);
    }
    else if (*(_QWORD *)(*(_QWORD *)v6 + 40) == 18)
    {
      _dispatch_workloop_push_stealer_0(v6, a1, v5);
    }
    else if ((v6[15] & 7) == 0 || (v6[15] & 7u) < v5)
    {
      (*(void (**)(int *, uint64_t, _QWORD))(*(_QWORD *)v6 + 80))(v6, v5, 0);
    }
    if ((v11 & 1) != 0)
      break;
    do
    {
      for (i = *v13; ; i = v19)
      {
        while ((i & 2) == 0)
        {
          v18 = i;
          atomic_compare_exchange_strong_explicit(v13, (unsigned int *)&v18, 0, memory_order_release, memory_order_relaxed);
          if ((_DWORD)v18 == (_DWORD)i)
            goto LABEL_43;
          i = v18;
        }
        v19 = i;
        atomic_compare_exchange_strong_explicit(v13, (unsigned int *)&v19, i ^ 2, memory_order_release, memory_order_relaxed);
        if ((_DWORD)v19 == (_DWORD)i)
          break;
      }
      if (i == 2)
      {
LABEL_43:
        if ((i & 1) != 0)
          _dispatch_unfair_lock_unlock_slow_VARIANT_mp(a1 + 100, i);
        goto LABEL_41;
      }
      __dmb(9u);
      if ((*(_QWORD *)(StatusReg + 200) & 0xF0000) == 0)
        *(_QWORD *)(StatusReg + 200) = *(_QWORD *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
      v5 = *(_DWORD *)(a1 + 60) & 7;
    }
    while ((*(_DWORD *)(a1 + 60) & 7u) <= v15);
  }
LABEL_41:
  if ((a3 & 1) != 0)
    _os_object_release_internal_n_VARIANT_armv81((void *)a1, (const char *)2);
}

void _dispatch_root_queue_push_override_stealer_0(int *a1, uint64_t a2, unsigned int a3)
{
  __objc2_class **v3;
  uint64_t v4;
  int *v5;
  unint64_t StatusReg;
  int v7;
  int v9;
  unsigned int v10;
  __objc2_class *v11;
  uint64_t v12;
  uint64_t add_explicit;
  unint64_t v14;

  if (a3 - 7 <= 0xFFFFFFF9)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupted priority";
    qword_1EDF52D38 = a3;
    __break(1u);
LABEL_15:
    v11 = (__objc2_class *)_dispatch_continuation_alloc_from_heap_VARIANT_armv81();
    goto LABEL_10;
  }
  v4 = a2;
  v5 = a1;
  v9 = a1[21];
  if (v9 < 0)
    v10 = 2;
  else
    v10 = (v9 >> 25) & 4;
  if ((v10 & 2) != 0)
    v7 = 1;
  else
    v7 = 2 * (v10 > 3);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v11 = *(__objc2_class **)(StatusReg + 176);
  if (!v11)
    goto LABEL_15;
  *(_QWORD *)(StatusReg + 176) = v11->cache;
LABEL_10:
  v11->isa = (__objc2_class *)&unk_1E1E87B60;
  if (*(_DWORD *)(v4 + 8) == 0x7FFFFFFF
    || (v12 = 2,
        add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 2u, memory_order_relaxed),
        (int)add_explicit > 0))
  {
    add_explicit = 3 * a3 + v7 - 3;
    v12 = (uint64_t)&_dispatch_root_queues;
    v11[1].superclass = (__objc2_class *)v4;
    v11[1].cache = v5;
    v11->info = 0;
    v11[1].isa = v11;
    v11->superclass = (__objc2_class *)-1;
    v11->vtable = (void *)-1;
    v11->cache = 0;
    v3 = &_dispatch_root_queues + 16 * add_explicit;
    *(_QWORD *)(StatusReg + 976) = v3 + 6;
    v14 = atomic_exchange_explicit((atomic_ullong *volatile)v3 + 6, (unint64_t)v11, memory_order_release);
    if (v14)
    {
      *(_QWORD *)(v14 + 16) = v11;
      *(_QWORD *)(StatusReg + 976) = 0;
      return;
    }
  }
  else
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
  }
  v3[13] = v11;
  *(_QWORD *)(StatusReg + 976) = 0;
  _dispatch_root_queue_poke_and_wakeup_VARIANT_armv81((unsigned int *)(v12 + (add_explicit << 7)), 1, 0);
}

_QWORD *_dispatch_workloop_push_stealer_0(_QWORD *result, uint64_t a2, unsigned int a3)
{
  _QWORD *v5;
  unint64_t StatusReg;
  _QWORD *v7;

  v5 = result;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_QWORD **)(StatusReg + 176);
  if (v7)
  {
    *(_QWORD *)(StatusReg + 176) = v7[2];
  }
  else
  {
    result = _dispatch_continuation_alloc_from_heap_VARIANT_armv81();
    v7 = result;
  }
  *v7 = &unk_1E1E87B18;
  if (*(_DWORD *)(a2 + 8) == 0x7FFFFFFF
    || (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 2u, memory_order_relaxed) > 0)
  {
    v7[6] = a2;
    v7[7] = 0;
    v7[4] = 0;
    v7[5] = v7;
    v7[1] = -1;
    v7[3] = -1;
    return _dispatch_workloop_push_VARIANT_armv81(v5, v7, a3);
  }
  else
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
  }
  return result;
}

atomic_ullong *_dispatch_lane_drain_non_barriers_0(atomic_ullong *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  atomic_ullong *v6;
  unint64_t StatusReg;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;

  v4 = (uint64_t)result;
  v5 = *((unsigned __int16 *)result + 40);
  atomic_fetch_and_explicit(result + 7, 0xFFBFFFFFFFFFFFFFLL, memory_order_release);
  v6 = result + 6;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (v5)
  {
    --v5;
LABEL_4:
    v8 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(v4 + 104) = v8;
    if (!v8)
    {
      v9 = a2;
      atomic_compare_exchange_strong_explicit(v6, (unint64_t *)&v9, 0, memory_order_release, memory_order_relaxed);
      if (v9 != a2)
      {
        v8 = *(_QWORD *)(a2 + 16);
        if (!v8)
        {
          v25 = a2;
          v26 = _dispatch_wait_for_enqueuer((unint64_t *)(a2 + 16));
          a2 = v25;
          v8 = v26;
        }
        *(_QWORD *)(v4 + 104) = v8;
      }
    }
    v10 = *(_QWORD *)a2 > 0xFFFuLL || (*(_QWORD *)a2 & 0x81) == 0;
    if (v10)
      result = (atomic_ullong *)_dispatch_continuation_redirect_push_0((_DWORD *)v4, (_QWORD *)a2);
    else
      result = (atomic_ullong *)_dispatch_non_barrier_waiter_redirect_or_wake_0(v4, a2);
    a2 = v8;
    if (!v8)
      goto LABEL_18;
LABEL_13:
    v11 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 <= 0xFFFuLL)
    {
      if ((v11 & 2) != 0)
        goto LABEL_18;
    }
    else if ((*(_QWORD *)(v11 + 40) & 0xF0) == 0x10 && (*(_DWORD *)(a2 + 80) & 0x80000) != 0)
    {
      goto LABEL_18;
    }
  }
  if (*(_QWORD *)a2 <= 0xFFFuLL && (*(_QWORD *)a2 & 0x81) != 0)
  {
    v5 = 0;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 56), 0x20000000000uLL, memory_order_relaxed);
    goto LABEL_4;
  }
  v22 = *(_QWORD *)(v4 + 56);
  while ((v22 & 0xFFE0018000000000) == 0)
  {
    v23 = v22;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v4 + 56), (unint64_t *)&v23, v22 + 0x20000000000, memory_order_acquire, memory_order_acquire);
    v10 = v23 == v22;
    v22 = v23;
    if (v10)
    {
      v5 = 0;
      goto LABEL_4;
    }
  }
  v5 = 0;
LABEL_18:
  v12 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
  v13 = v5 << 41;
  if (a2)
  {
    v14 = *(unsigned __int16 *)(v4 + 80);
    if (v14 >= 2)
    {
      v24 = *(_QWORD *)a2;
      if (*(_QWORD *)a2 < 0x1000uLL)
      {
        if ((v24 & 2) == 0)
          goto LABEL_20;
      }
      else if ((*(_QWORD *)(v24 + 40) & 0xF0) != 0x10 || (*(_DWORD *)(a2 + 80) & 0x80000) == 0)
      {
        goto LABEL_20;
      }
      v13 = (v13 | 0x10000000000) - (v14 << 41);
    }
  }
LABEL_20:
  v15 = *(_QWORD *)(v4 + 56);
  do
  {
    v16 = v15 - v13;
    v17 = (v15 - v13) & 0xFFFFFF7700000001;
    if (a2)
    {
      v19 = v17 | 0x8000000000;
      if ((v16 & 0x10000000000) != 0)
        v20 = v17 + 0x18000000000;
      else
        v20 = v19 + ((unint64_t)*(unsigned __int16 *)(v4 + 80) << 41);
      v17 = (v15 - v13) & 0xFFFFFF7700000000 | 0x8000000001;
      if ((v15 & 0x8000000000) == 0)
        v17 = v19;
      if ((v20 & 0x3FFE0000000000) == 0x20000000000000)
        v17 = ((v20 & 0xFFFFFF7FFFFFFFFFLL) + 0x40000000000000) | v12;
    }
    else if ((v15 & 0x8000000000) != 0)
    {
      atomic_fetch_xor_explicit((atomic_ullong *volatile)(v4 + 56), 0x8000000000uLL, memory_order_acquire);
      a2 = *(_QWORD *)(v4 + 104);
      if (a2)
        goto LABEL_13;
      goto LABEL_18;
    }
    v18 = v15;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v4 + 56), (unint64_t *)&v18, v17, memory_order_relaxed, memory_order_relaxed);
    v10 = v18 == v15;
    v15 = v18;
  }
  while (!v10);
  if ((~v16 & 0x1800000000) == 0)
  {
    v27 = HIDWORD(v16) & 7;
    v28 = *(_DWORD *)(StatusReg + 200);
    if ((HIWORD(v28) & 0xF) < v27)
      *(_QWORD *)(StatusReg + 200) = v28 & 0xFFF0FFFF | ((_DWORD)v27 << 16);
  }
  if (((v17 ^ v16) & 0x40000000000000) != 0)
    return (atomic_ullong *)_dispatch_lane_barrier_complete_0(v4, 0, a3);
  if (((v17 ^ v16) & 1) != 0)
  {
    if ((a3 & 1) != 0
      || *(_DWORD *)(v4 + 8) == 0x7FFFFFFF
      || (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 2u, memory_order_relaxed) > 0)
    {
      return (atomic_ullong *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(v4 + 24)
                                                                                           + 88))(*(_QWORD *)(v4 + 24), v4, HIDWORD(v17) & 7);
    }
    else
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
    }
  }
  else if ((a3 & 1) != 0)
  {
    return (atomic_ullong *)_os_object_release_internal_n_VARIANT_armv81((void *)v4, (const char *)2);
  }
  return result;
}

uint64_t _dispatch_channel_invoke_cancel_check_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  int v7;
  uint64_t result;

  if ((*(_WORD *)(a1 + 116) & 8) != 0 || (*(_DWORD *)(a1 + 80) & 0x10000000) == 0)
    return 1;
  if ((*(_BYTE *)(a2 + 35) & 1) != 0)
    v6 = (void *)MEMORY[0x18D766D94]();
  else
    v6 = 0;
  v7 = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 24))(a1, *(_QWORD *)(a1 + 32));
  if (v6)
    objc_autoreleasePoolPop(v6);
  if (v7)
  {
    *(_WORD *)(a1 + 116) |= 8u;
    if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 0xFFFFFFFF, memory_order_release) <= 1)
    {
      _os_object_allows_weak_reference_VARIANT_mp_cold_1();
    }
    return 1;
  }
  result = 0;
  *(_QWORD *)(a2 + 40) = -1;
  return result;
}

uint64_t _dispatch_worker_thread_0(uint64_t a1)
{
  uint64_t v2;
  int add_explicit;
  const char *v4;
  uint64_t v5;
  unint64_t StatusReg;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  dispatch_time_t v16;
  const char *v17;
  int v18;

  v2 = *(_QWORD *)(a1 + 32);
  add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 112), 0xFFFFFFFF, memory_order_acquire);
  if (add_explicit <= 0)
    _dispatch_worker_thread_cold_1(add_explicit);
  if (*(_QWORD *)(v2 + 144))
    *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 192) = v2 + 144;
  v4 = *(const char **)(a1 + 72);
  if (v4)
    pthread_setname_np(v4);
  v5 = *(_QWORD *)(v2 + 64);
  if (v5)
    (*(void (**)(void))(v5 + 16))();
  _dispatch_sigmask();
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_QWORD *)(StatusReg + 32);
  v8 = *(unsigned int *)(a1 + 84);
  if ((v8 & 0x46000FFF) == 0)
  {
    v9 = v8 & 0x80000000;
    if ((v7 & 0x22000000) != 0 || (v7 & 0x3F00) == 0)
    {
      v8 = v9 | 0xF0000;
    }
    else
    {
      v10 = (__clz(__rbit32((v7 >> 8) & 0x3FFF)) << 8) + 256;
      if (((v7 >> 8) & 0x3FFF) == 0)
        v10 = 0;
      v8 = v7 & 0x8E0000FF | v9 | v10;
    }
  }
  v11 = v7 & 0xFFFFFFFF02FFFFFFLL;
  if (v7 == -1)
    v12 = 0;
  else
    v12 = v7 & 0xFFFFFFFF02FFFFFFLL;
  v13 = v2 + 72;
  do
  {
    _dispatch_root_queue_drain_0(a1, v8, 0x20000);
    v14 = *(_QWORD *)(StatusReg + 32);
    if ((v14 & 0x1000000) != 0)
    {
      v15 = v11;
      if (v12)
        goto LABEL_29;
      v15 = v14 & 0xFFFFFFFFFEFFFFFFLL;
LABEL_26:
      if (v15)
        goto LABEL_29;
      goto LABEL_21;
    }
    v15 = v12;
    if (v12 != (v14 & 0xFFFFFFFF77FFFFFFLL))
      goto LABEL_26;
LABEL_21:
    if (!*(_QWORD *)(StatusReg + 224))
      goto LABEL_22;
    v15 = 0;
LABEL_29:
    _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(v15, 0, 6);
LABEL_22:
    v16 = dispatch_time(0, 5000000000);
  }
  while (!dispatch_semaphore_wait_VARIANT_armv81(v13, v16));
  atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 100), 1u, memory_order_release);
  _dispatch_root_queue_poke_VARIANT_armv81(a1, 1, 0);
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    v18 = atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 0xFFFFFFFF, memory_order_release);
    if (v18 <= 1)
    {
      if (v18 != 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      _os_object_dispose((void *)a1, v17);
    }
  }
  return 0;
}

void _dispatch_root_queue_drain_0(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  unint64_t StatusReg;
  unint64_t v7;
  int add_explicit;
  BOOL v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_QWORD *)(StatusReg + 160) = a1;
  *(_QWORD *)(StatusReg + 200) = a2;
  v7 = *(_QWORD *)(StatusReg + 216) & 0xFFFFFFFFFFFFFFFELL;
  if (v7)
  {
    if (v7 == -4)
      _dispatch_main_queue_drain_cold_7();
    add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 96), 0xFFFFFFFF, memory_order_relaxed);
    if (add_explicit <= 0)
    {
      if (add_explicit < 0)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      *(_QWORD *)(v7 + 56) = 0xDEAD000000000000;
      _dispatch_object_dealloc_VARIANT_mp((void *)v7);
    }
  }
  *(_QWORD *)(StatusReg + 216) = -4;
  memset(v37, 0, sizeof(v37));
  _dispatch_last_resort_autorelease_pool_push((uint64_t)v37);
  v9 = 0;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v10 = __swp(v3, (unsigned int *)(a1 + 104));
        if (v3)
          break;
        v28 = -1;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 104), (unint64_t *)&v28, 0, memory_order_relaxed, memory_order_relaxed);
        if (v28 == -1)
        {
          if (!*(_QWORD *)(a1 + 48))
            goto LABEL_86;
          v29 = a1;
          v30 = _dispatch_root_queue_head_tail_quiesced_0;
          goto LABEL_51;
        }
      }
      if (v3 != -1)
        break;
      v29 = a1;
      v30 = (uint64_t (*)(uint64_t))_dispatch_root_queue_mediator_is_gone_0;
LABEL_51:
      if (!__DISPATCH_ROOT_QUEUE_CONTENDED_WAIT___0(v29, v30))
        goto LABEL_86;
    }
    v11 = (unint64_t *)(v3 + 16);
    v12 = *(_QWORD *)(v3 + 16);
    if (v12)
      goto LABEL_10;
    *(_QWORD *)(a1 + 104) = 0;
    v31 = v3;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 48), (unint64_t *)&v31, 0, memory_order_release, memory_order_relaxed);
    if (v31 != v3)
    {
      v12 = *v11;
      if (!*v11)
        v12 = _dispatch_wait_for_enqueuer(v11);
LABEL_10:
      *(_QWORD *)(a1 + 104) = v12;
      _dispatch_root_queue_poke_VARIANT_armv81((unsigned int *)a1, 1, 0);
    }
    if (v9)
      v11 = (unint64_t *)_pthread_workqueue_override_reset();
    v13 = *(_QWORD *)(StatusReg + 192);
    if (v13)
      v11 = (unint64_t *)(*(uint64_t (**)(uint64_t))v13)(a1);
    v14 = *(_QWORD *)v3;
    if (*(_QWORD *)v3 >= 0x1000uLL)
    {
      if (*(_QWORD *)(v14 + 40) == 1)
        (*(void (**)(uint64_t, _QWORD, _QWORD))(v14 + 48))(v3, 0, (a3 >> 21) & 1);
      else
        (*(void (**)(uint64_t, _OWORD *, _QWORD))(v14 + 64))(v3, v37, a3 & 0xFFFF0000);
      goto LABEL_74;
    }
    if ((a3 & 0x1000000) != 0)
    {
      v15 = (void *)MEMORY[0x18D766D94](v11);
      v14 = *(_QWORD *)v3;
    }
    else
    {
      v15 = 0;
    }
    v16 = *(_QWORD *)(v3 + 24);
    if ((v14 & 4) != 0)
      *(_QWORD *)(v3 + 24) = v10;
    v17 = *(_QWORD *)(v3 + 8);
    if (v17 == -1)
    {
      v20 = 0;
    }
    else
    {
      v18 = *(_QWORD *)(StatusReg + 200);
      v19 = ((v18 >> 8) & 0xF) != 0 ? 256 << ((BYTE1(v18) & 0xFu) - 1) : 0;
      v20 = v19 & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(StatusReg + 200);
      v21 = v17 & 0xFFFFFF;
      if ((v17 & 0xFFFFFF) != 0)
      {
        v22 = v19 & 0xFFFFFF00;
        if ((v18 & 0x44000000) == 0 && (*(_QWORD *)(v3 + 8) & 0x10000000) == 0)
          v24 = v20;
        else
          v24 = v17 & 0xFFFFFF;
        if (v21 >= v22)
          v20 = v24;
      }
      else if ((unsigned __int16)v18 >> 12)
      {
        v20 = (256 << (((unsigned __int16)v18 >> 12) - 1)) | 0xFF;
      }
    }
    v25 = v14 & 4;
    v26 = v20 & 0xFFFFFFFF02FFFFFFLL;
    v27 = *(_QWORD *)(StatusReg + 32);
    if ((v27 & 0x1000000) != 0)
    {
      if (v26)
        goto LABEL_63;
      v26 = v27 & 0xFFFFFFFFFEFFFFFFLL;
    }
    else if (v26 == (v27 & 0xFFFFFFFF77FFFFFFLL))
    {
      goto LABEL_41;
    }
    if (v26)
      goto LABEL_63;
LABEL_41:
    if (v16 == -1)
      goto LABEL_64;
    if (*(_QWORD *)(StatusReg + 224) != v16)
    {
      v26 = 0;
LABEL_63:
      _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(v26, v16, v25 | 2);
      goto LABEL_64;
    }
    if ((v14 & 4) != 0 && v16)
    {
      if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
        _dispatch_async_redirect_invoke_cold_1();
      goto LABEL_65;
    }
LABEL_64:
    if ((v14 & 4) == 0)
      goto LABEL_70;
LABEL_65:
    v32 = *(_QWORD *)(StatusReg + 176);
    if (v32)
      v33 = *(_DWORD *)(v32 + 8) + 1;
    else
      v33 = 1;
    if (v33 <= _dispatch_continuation_cache_limit)
    {
      v25 = 0;
      *(_QWORD *)(v3 + 16) = v32;
      *(_DWORD *)(v3 + 8) = v33;
      *(_QWORD *)(StatusReg + 176) = v3;
LABEL_70:
      if ((v14 & 8) != 0)
        goto LABEL_82;
      goto LABEL_71;
    }
    v25 = v3;
    if ((v14 & 8) != 0)
    {
LABEL_82:
      v35 = *(_QWORD *)(v3 + 48);
      v36 = *(_QWORD *)(*(_QWORD *)v35 + 40);
      if (v36 != 514)
        _dispatch_queue_override_invoke_cold_1(v36);
      _dispatch_client_callout(*(_QWORD *)(v3 + 40), *(uint64_t (**)(void))(v3 + 32));
      dispatch_group_leave_VARIANT_armv81(v35);
      if (!v25)
      {
LABEL_72:
        if (!v15)
          goto LABEL_74;
LABEL_73:
        objc_autoreleasePoolPop(v15);
        goto LABEL_74;
      }
      goto LABEL_84;
    }
LABEL_71:
    _dispatch_client_callout(*(_QWORD *)(v3 + 40), *(uint64_t (**)(void))(v3 + 32));
    if (!v25)
      goto LABEL_72;
LABEL_84:
    _dispatch_continuation_free_to_cache_limit_VARIANT_armv81(v25);
    if (v15)
      goto LABEL_73;
LABEL_74:
    if (v13)
      (*(void (**)(uint64_t))(v13 + 8))(a1);
    v34 = WORD1(*(_QWORD *)(StatusReg + 200)) & 0xF;
    if (v34)
    {
      *(_QWORD *)(StatusReg + 200) &= 0xFFF0FFFFuLL;
      v9 = v34 != 15;
    }
    else
    {
      v9 = 0;
    }
    if ((*(_BYTE *)(StatusReg + 960) & 1) != 0)
      break;
    *(_QWORD *)(StatusReg + 960) = 0;
  }
LABEL_86:
  _dispatch_last_resort_autorelease_pool_pop((uint64_t)v37);
  *(_QWORD *)(StatusReg + 216) = 0;
  *(_QWORD *)(StatusReg + 40) = 0;
  *(_QWORD *)(StatusReg + 200) = 0;
  *(_QWORD *)(StatusReg + 160) = 0;
}

BOOL __DISPATCH_ROOT_QUEUE_CONTENDED_WAIT___0(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  char v4;
  uint64_t v5;
  int v6;
  int v8;
  unsigned int v9;

  v4 = 0;
  v5 = 500;
LABEL_2:
  v6 = -80;
  do
  {
    if (__CFADD__(v6++, 1))
    {
      if ((v4 & 1) == 0)
        atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 112), 1u, memory_order_release);
      MEMORY[0x18D767268](0, 3, v5);
      v8 = a2(a1);
      if (!v8)
      {
        v9 = (v5 >> 4) & 0x7FFFFFF;
        v5 = (2 * v5);
        v4 = 1;
        if (v9 < 0xC35)
          goto LABEL_2;
        v8 = 0;
      }
      goto LABEL_12;
    }
    __yield();
    v8 = a2(a1);
  }
  while (!v8);
  if ((v4 & 1) == 0)
    return v8 == 1;
LABEL_12:
  atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 112), 0xFFFFFFFF, memory_order_acquire);
  if (*(_QWORD *)(a1 + 48))
  {
    v8 = 1;
  }
  else if (!v8)
  {
    _dispatch_root_queue_poke_VARIANT_armv81((unsigned int *)a1, 1, 0);
    v8 = 0;
  }
  return v8 == 1;
}

uint64_t _dispatch_root_queue_head_tail_quiesced_0(uint64_t a1)
{
  unsigned int v1;

  if (*(_QWORD *)(a1 + 48))
    v1 = 1;
  else
    v1 = 2;
  if ((*(_QWORD *)(a1 + 104) != 0) != (*(_QWORD *)(a1 + 48) == 0))
    return v1;
  else
    return 0;
}

BOOL _dispatch_root_queue_mediator_is_gone_0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104) != -1;
}

void _dispatch_mgr_priority_raise_0(pthread_attr_t *a1)
{
  int v2;
  qos_class_t v3;
  int sched_priority;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  qos_class_t __qos_class;
  sched_param v14;

  if (_dispatch_mgr_sched_pred != -1)
    dispatch_once_f_VARIANT_armv81(&_dispatch_mgr_sched_pred, 0, _dispatch_mgr_sched_init_0);
  v14 = 0;
  v2 = pthread_attr_getschedparam(a1, &v14);
  if (v2)
    _dispatch_bug(6293, v2);
  __qos_class = QOS_CLASS_UNSPECIFIED;
  pthread_attr_get_qos_class_np(a1, &__qos_class, 0);
  v3 = __qos_class;
  if (__qos_class == 5)
  {
    sched_priority = 4;
    goto LABEL_12;
  }
  if (__qos_class)
  {
    HIDWORD(v6) = __qos_class - 9;
    LODWORD(v6) = __qos_class - 9;
    v5 = v6 >> 2;
    if (v5 > 6)
      sched_priority = 0;
    else
      sched_priority = dword_18A06EB00[v5];
LABEL_12:
    v14.sched_priority = sched_priority;
    v7 = dword_1ECCEA51C;
    do
    {
      if (v7 >= v3)
        break;
      v8 = v7;
      atomic_compare_exchange_strong_explicit(&dword_1ECCEA51C, (unsigned int *)&v8, v3, memory_order_relaxed, memory_order_relaxed);
      v9 = (_DWORD)v8 == (_DWORD)v7;
      v7 = v8;
    }
    while (!v9);
    goto LABEL_16;
  }
  sched_priority = v14.sched_priority;
LABEL_16:
  v10 = _dispatch_mgr_sched;
  while ((int)v10 < sched_priority)
  {
    v11 = v10;
    atomic_compare_exchange_strong_explicit(&_dispatch_mgr_sched, (unsigned int *)&v11, sched_priority, memory_order_relaxed, memory_order_relaxed);
    v9 = (_DWORD)v11 == (_DWORD)v10;
    v10 = v11;
    if (v9)
    {
      if (_dispatch_root_queues_pred != -1)
        dispatch_once_f_VARIANT_armv81(&_dispatch_root_queues_pred, 0, _dispatch_root_queues_init_once_0);
      if (sched_priority > dword_1ECCEA520 || __qos_class && _pthread_qos_class_encode())
      {
        v12 = _pthread_workqueue_set_event_manager_priority();
        if (v12)
          _dispatch_bug(6325, v12);
      }
      return;
    }
  }
}

uint64_t _dispatch_root_queues_init_once_0()
{
  int v0;
  int v1;
  uint64_t result;
  int v3;
  uint64_t v4;
  void (*v5)(uint64_t *, int *);
  void (*v6)(uint64_t *, uint64_t *, int *);
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  if ((_dispatch_unsafe_fork & 1) == 0)
    _dispatch_fork_becomes_unsafe_slow_VARIANT_armv81();
  v0 = _pthread_workqueue_supported();
  v1 = v0;
  if ((v0 & 0x10) == 0)
    _dispatch_root_queues_init_once_cold_1(v0);
  v4 = 0x200000000;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 64;
  v9 = 72;
  if ((v0 & 0x80) != 0)
  {
    v5 = _dispatch_kevent_worker_thread_0;
    v6 = _dispatch_workloop_worker_thread_0;
    v7 = _dispatch_worker_thread2_0;
  }
  else
  {
    if ((v0 & 0x40) == 0)
      _dispatch_root_queues_init_once_cold_2(v0);
    v7 = _dispatch_worker_thread2_0;
    v5 = _dispatch_kevent_worker_thread_0;
  }
  result = pthread_workqueue_setup();
  if ((_DWORD)result)
    _dispatch_root_queues_init_once_cold_4(result, v1);
  if ((_dispatch_mode & 4) != 0)
  {
    v3 = -1;
    result = sysctlbyname("kern.wq_limit_cooperative_threads", 0, 0, &v3, 4uLL);
    if ((_DWORD)result)
      _dispatch_root_queues_init_once_cold_3();
  }
  return result;
}

void _dispatch_worker_thread2_0(uint64_t a1)
{
  _QWORD *StatusReg;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  __objc2_class **v7;
  uint64_t v8;
  unint64_t v9;

  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  StatusReg[120] = 0;
  StatusReg[4] = a1 & 0xFFFFFFFF88FFFFFFLL;
  v2 = __clz(__rbit32((a1 >> 8) & 0x3FFF));
  if (((a1 >> 8) & 0x3FFF) != 0)
    v3 = v2 + 1;
  else
    v3 = 0;
  if (v3 - 7 <= 0xFFFFFFF9)
    _dispatch_queue_priority_inherit_from_target_cold_1(v3);
  if ((a1 & 0x8000000) != 0)
    v4 = 2293760;
  else
    v4 = 196608;
  v5 = ((a1 & 0x8000000) >> 26) | 0xFFFFFFFD;
  v6 = 3 * v3;
  if ((a1 & 0x88000000) == 0x80000000)
    v5 = -2;
  v7 = &_dispatch_root_queues + 16 * (unint64_t)(v5 + v6);
  atomic_fetch_add_explicit((atomic_uint *volatile)v7 + 28, 0xFFFFFFFF, memory_order_acquire);
  _dispatch_root_queue_drain_0((uint64_t)v7, *((_DWORD *)v7 + 21), v4);
  v8 = StatusReg[4];
  if ((v8 & 0x1000000) != 0)
  {
    v9 = v8 & 0xFFFFFFFFFEFFFFFFLL;
    if ((v8 & 0xFFFFFFFFFEFFFFFFLL) != 0)
      goto LABEL_17;
  }
  if (StatusReg[28])
  {
    v9 = 0;
LABEL_17:
    _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(v9, 0, 14);
  }
  StatusReg[120] = 0;
}

void _dispatch_kevent_worker_thread_0(uint64_t *a1, int *a2)
{
  _QWORD *StatusReg;
  unint64_t v5;
  int add_explicit;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  if (!a1 || !a2)
  {
    _dispatch_bug(6755, 0);
    return;
  }
  if (*a2 && *a1)
  {
    StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v5 = StatusReg[27] & 0xFFFFFFFFFFFFFFFELL;
    if (v5)
    {
      if (v5 == -4)
        goto LABEL_32;
      add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 96), 0xFFFFFFFF, memory_order_relaxed);
      if (add_explicit <= 0)
      {
        if ((add_explicit & 0x80000000) == 0)
        {
          *(_QWORD *)(v5 + 56) = 0xDEAD000000000000;
          _dispatch_object_dealloc_VARIANT_mp((void *)v5);
          goto LABEL_10;
        }
LABEL_31:
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
LABEL_32:
        qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Lingering DISPATCH_WLH_ANON";
        __break(1u);
        return;
      }
    }
LABEL_10:
    StatusReg[27] = -4;
    v7 = *a1;
    StatusReg[120] = 0;
    v16 = 0;
    v15 = 0u;
    v17 = -4;
    v18 = (unint64_t)v7;
    v8 = StatusReg[4];
    if ((v8 & 0x2000000) != 0)
    {
      if ((v8 & 0x20000000) != 0)
        v8 = StatusReg[4] & 0xFE000000;
      StatusReg[4] = v8 & 0xFFFFFFFFFEFFFFFFLL;
      StatusReg[25] = 34537472;
      StatusReg[20] = &_dispatch_mgr_q;
      v9 = qword_1ECCE9BB8[0];
      v10 = StatusReg[3] & 0xFFFFFFFCLL | 0x40020000000000;
      do
      {
        if ((v9 & 0xFFE00000FFFFFFFCLL) != 0)
        {
          qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Locking the manager should not fail";
          qword_1EDF52D38 = v9;
          __break(1u);
          goto LABEL_31;
        }
        v11 = v9;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)qword_1ECCE9BB8, &v11, v10 | v9 & 0x7700000001, memory_order_acquire, memory_order_acquire);
        v12 = v11 == v9;
        v9 = v11;
      }
      while (!v12);
      v17 = -4;
      StatusReg[29] = &v15;
      _dispatch_event_loop_merge_VARIANT_armv81(v7, *a2);
      _dispatch_mgr_queue_drain_0();
      if (byte_1ECCEA55E)
        _dispatch_event_loop_drain_timers_VARIANT_armv81(&_dispatch_timers_heap, 9);
      v13 = qword_1ECCE9BB8[0];
      do
      {
        v14 = v13;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)qword_1ECCE9BB8, &v13, (v13 & 0xFFFFFFF000000001) - 0x40020000000000, memory_order_release, memory_order_relaxed);
      }
      while (v13 != v14);
      StatusReg[25] = 0;
      StatusReg[20] = 0;
      if ((v14 & 0x8000000000) != 0)
        _dispatch_event_loop_poke_VARIANT_armv81((_QWORD *)0xFFFFFFFFFFFFFFF8, 0, 0);
    }
    else
    {
      StatusReg[4] = v8 & 0xFFFFFFFF88FFFFFFLL | 0x1000000;
      BYTE12(v18) = 1;
      StatusReg[29] = &v15;
      _dispatch_event_loop_merge_VARIANT_armv81(v7, *a2);
      if (*((_QWORD *)&v15 + 1))
      {
        if (v17 == -4)
        {
          StatusReg[29] = 0;
          _dispatch_root_queue_drain_deferred_item_0((uint64_t *)&v15);
        }
        else
        {
          _dispatch_root_queue_drain_deferred_wlh_0((uint64_t)&v15);
        }
      }
    }
    StatusReg[29] = 0;
    StatusReg[120] = 0;
    *a2 = WORD4(v18);
    StatusReg[27] = 0;
    StatusReg[5] = 0;
  }
}

void _dispatch_workloop_worker_thread_0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v5;
  _QWORD *StatusReg;
  unint64_t v7;
  int add_explicit;
  uint64_t v9;
  int *v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;

  if (!a1 || !a2 || !a3)
  {
    _dispatch_bug(6774, 0);
    return;
  }
  v5 = *a1;
  if (!*a1)
  {
    _dispatch_bug(6777, 0);
    _dispatch_kevent_worker_thread_0(a2, a3);
    return;
  }
  if (*a3 && *a2)
  {
    StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v7 = StatusReg[27] & 0xFFFFFFFFFFFFFFFELL;
    if (v7 == -4)
    {
LABEL_69:
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Lingering DISPATCH_WLH_ANON";
      __break(1u);
      goto LABEL_70;
    }
    if (v7 == v5)
    {
LABEL_15:
      StatusReg[27] = v5;
      v9 = *a2;
      StatusReg[120] = 0;
      v29 = 0;
      v28 = 0u;
      v30 = v5;
      v31 = (unint64_t)v9;
      if (v5 == -4)
      {
        v12 = 0;
        v13 = 0;
        v27 = 0;
        v25 = 0uLL;
        v26 = 0uLL;
        goto LABEL_35;
      }
      if (*(_QWORD *)(*(_QWORD *)v5 + 40) == 131090 && (v10 = *(int **)(v5 + 200)) != 0)
      {
        v11 = *v10;
        v27 = 0;
        v25 = 0uLL;
        v26 = 0uLL;
        if ((v11 & 0x40) != 0)
        {
          v7 = *(_QWORD *)(v5 + 72);
          if (!v7
            || StatusReg[124]
            || (LODWORD(v7) = pthread_setname_np((const char *)v7),
                v12 = 1,
                StatusReg[124] = 1,
                (v10 = *(int **)(v5 + 200)) != 0))
          {
            if (*((_QWORD *)v10 + 4) && !StatusReg[115])
            {
              v24 = _dispatch_calloc(1uLL, 0x28uLL);
              LODWORD(v7) = _os_workgroup_join_update_wg_VARIANT_armv81(*(_QWORD *)(*(_QWORD *)(v5 + 200) + 32), (uint64_t)v24);
              v13 = 0;
              StatusReg[115] = v24;
              v12 = 1;
            }
            else
            {
              v13 = 0;
              v12 = 1;
            }
            goto LABEL_35;
          }
          goto LABEL_32;
        }
      }
      else
      {
        v27 = 0;
        v25 = 0uLL;
        v26 = 0uLL;
      }
      if (*(_QWORD *)(*(_QWORD *)v5 + 40) != 131090)
        goto LABEL_31;
      v14 = *(_QWORD *)(v5 + 200);
      if (!v14)
        goto LABEL_31;
      v13 = *(_QWORD *)(v14 + 32);
      if (!v13 || (LODWORD(v7) = os_workgroup_join_VARIANT_armv81(*(_QWORD *)(v14 + 32), (uint64_t)&v25), !(_DWORD)v7))
      {
        v12 = 0;
        goto LABEL_35;
      }
      if ((_DWORD)v7 == 22)
      {
LABEL_31:
        v12 = 0;
LABEL_32:
        v13 = 0;
LABEL_35:
        v15 = StatusReg[4];
        if ((v15 & 0x2000000) != 0)
        {
          if ((v15 & 0x20000000) != 0)
            v15 = StatusReg[4] & 0xFE000000;
          StatusReg[4] = v15 & 0xFFFFFFFFFEFFFFFFLL;
          StatusReg[25] = 34537472;
          StatusReg[20] = &_dispatch_mgr_q;
          v17 = qword_1ECCE9BB8[0];
          v18 = StatusReg[3] & 0xFFFFFFFCLL | 0x40020000000000;
          do
          {
            if ((v17 & 0xFFE00000FFFFFFFCLL) != 0)
            {
              qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Locking the manager should not fail";
              qword_1EDF52D38 = v17;
              __break(1u);
              goto LABEL_67;
            }
            v19 = v17;
            atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)qword_1ECCE9BB8, &v19, v18 | v17 & 0x7700000001, memory_order_acquire, memory_order_acquire);
            v20 = v19 == v17;
            v17 = v19;
          }
          while (!v20);
          v30 = -4;
          StatusReg[29] = &v28;
          _dispatch_event_loop_merge_VARIANT_armv81(v9, *a3);
          _dispatch_mgr_queue_drain_0();
          if (byte_1ECCEA55E)
            _dispatch_event_loop_drain_timers_VARIANT_armv81(&_dispatch_timers_heap, 9);
          v21 = qword_1ECCE9BB8[0];
          do
          {
            v22 = v21;
            atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)qword_1ECCE9BB8, &v21, (v21 & 0xFFFFFFF000000001) - 0x40020000000000, memory_order_release, memory_order_relaxed);
          }
          while (v21 != v22);
          StatusReg[25] = 0;
          StatusReg[20] = 0;
          if ((v22 & 0x8000000000) != 0)
            _dispatch_event_loop_poke_VARIANT_armv81((_QWORD *)0xFFFFFFFFFFFFFFF8, 0, 0);
        }
        else
        {
          v16 = v15 & 0xFFFFFFFF88FFFFFFLL;
          if (v5 == -4)
            v16 |= 0x1000000uLL;
          StatusReg[4] = v16;
          if (v5 == -4)
            BYTE12(v31) = 1;
          StatusReg[29] = &v28;
          _dispatch_event_loop_merge_VARIANT_armv81(v9, *a3);
          if (*((_QWORD *)&v28 + 1))
          {
            if (v30 == -4)
            {
              StatusReg[29] = 0;
              _dispatch_root_queue_drain_deferred_item_0((uint64_t *)&v28);
            }
            else
            {
              _dispatch_root_queue_drain_deferred_wlh_0((uint64_t)&v28);
            }
          }
        }
        if (v13)
          v23 = v12;
        else
          v23 = 1;
        if ((v23 & 1) == 0)
          os_workgroup_leave_VARIANT_armv81(v13, (uint64_t)&v25);
        StatusReg[29] = 0;
        StatusReg[5] = 0;
        StatusReg[120] = 0;
        *a3 = WORD4(v31);
        StatusReg[27] = v5 | 1;
        return;
      }
LABEL_70:
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_workloop os_workgroup_join failed";
      qword_1EDF52D38 = (int)v7;
      __break(1u);
      return;
    }
    if (v7)
    {
      add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 96), 0xFFFFFFFF, memory_order_relaxed);
      if (add_explicit <= 0)
      {
        if (add_explicit < 0)
        {
LABEL_67:
          qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
          __break(1u);
LABEL_68:
          qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
          __break(1u);
          goto LABEL_69;
        }
        *(_QWORD *)(v7 + 56) = 0xDEAD000000000000;
        _dispatch_object_dealloc_VARIANT_mp((void *)v7);
      }
    }
    if (v5 == -4
      || (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 96), 1u, memory_order_relaxed) & 0x80000000) == 0)
    {
      goto LABEL_15;
    }
    goto LABEL_68;
  }
}

void _dispatch_mgr_queue_drain_0()
{
  unint64_t StatusReg;
  const char *v1;
  uint64_t v2;
  int add_explicit;
  uint64_t v4;
  _OWORD v5[2];

  memset(v5, 0, sizeof(v5));
  v4 = 0x40020000000000;
  if (qword_1ECCE9BB0)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    if ((~*(_DWORD *)(StatusReg + 200) & 0xF0000) != 0)
      *(_QWORD *)(StatusReg + 200) = *(_QWORD *)(StatusReg + 200) & 0xFFF0FFFFLL | 0xF0000;
    if (_dispatch_lane_serial_drain_VARIANT_armv81((uint64_t)&_dispatch_mgr_q, (uint64_t)v5, 0x40000u, &v4))
      _dispatch_mgr_queue_drain_cold_2_0();
    v2 = *(_QWORD *)(StatusReg + 224);
    if (v2)
    {
      *(_QWORD *)(StatusReg + 224) = 0;
      if (*(_DWORD *)(v2 + 32))
        _dispatch_set_priority_and_mach_voucher_slow_VARIANT_armv81(0, 0);
      add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 12), 0xFFFFFFFF, memory_order_relaxed);
      if (add_explicit <= 1)
      {
        if (add_explicit != 1)
          _dispatch_async_redirect_invoke_cold_1();
        _voucher_xref_dispose_VARIANT_armv81(v2, v1);
      }
    }
    if ((*(_QWORD *)(StatusReg + 200) & 0xF0000) != 0)
      *(_QWORD *)(StatusReg + 200) &= 0xFFF0FFFFuLL;
  }
}

void _dispatch_root_queue_drain_deferred_item_0(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *StatusReg;
  uint64_t v4;
  void (**v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[2];

  v2 = *a1;
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  StatusReg[20] = v2;
  memset(v22, 0, sizeof(v22));
  _dispatch_last_resort_autorelease_pool_push((uint64_t)v22);
  StatusReg[25] = *(unsigned int *)(v2 + 84);
  v4 = a1[1];
  v5 = (void (**)(uint64_t))StatusReg[24];
  if (v5)
    (*v5)(v2);
  v6 = *(_QWORD *)v4;
  if (*(_QWORD *)v4 < 0x1000uLL)
  {
    v7 = *(_QWORD *)(v4 + 24);
    if ((v6 & 4) != 0)
      *(_QWORD *)(v4 + 24) = -1;
    v8 = v6 & 4;
    v9 = *(_QWORD *)(v4 + 8);
    if (v9 == -1)
    {
      v12 = 0;
    }
    else
    {
      v10 = StatusReg[25];
      if (((v10 >> 8) & 0xF) != 0)
        v11 = 256 << ((BYTE1(v10) & 0xFu) - 1);
      else
        v11 = 0;
      v12 = v11 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
      if ((v9 & 0xFFFFFF) != 0)
      {
        if ((v9 & 0xFFFFFFuLL) >= (v11 & 0xFFFFFF00)
          && ((v10 & 0x44000000) != 0 || (*(_QWORD *)(v4 + 8) & 0x10000000) != 0))
        {
          v12 = v9 & 0xFFFFFF;
        }
      }
      else if ((unsigned __int16)v10 >> 12)
      {
        v12 = (256 << (((unsigned __int16)v10 >> 12) - 1)) | 0xFF;
      }
    }
    v14 = v12 & 0xFFFFFFFF02FFFFFFLL;
    v15 = StatusReg[4];
    if ((v15 & 0x1000000) != 0)
    {
      if (v14)
        goto LABEL_40;
      v14 = v15 & 0xFFFFFFFFFEFFFFFFLL;
    }
    else if (v14 == (v15 & 0xFFFFFFFF77FFFFFFLL))
    {
LABEL_26:
      if (v7 == -1)
        goto LABEL_41;
      if (StatusReg[28] == v7)
      {
        if ((v6 & 4) != 0 && v7)
        {
          if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
            _dispatch_async_redirect_invoke_cold_1();
LABEL_42:
          v16 = StatusReg[22];
          if (v16)
            v17 = *(_DWORD *)(v16 + 8) + 1;
          else
            v17 = 1;
          v8 = v4;
          if (v17 <= _dispatch_continuation_cache_limit)
          {
            v8 = 0;
            *(_QWORD *)(v4 + 16) = v16;
            *(_DWORD *)(v4 + 8) = v17;
            StatusReg[22] = v4;
          }
LABEL_47:
          if ((v6 & 8) != 0)
          {
            v20 = *(_QWORD *)(v4 + 48);
            v21 = *(_QWORD *)(*(_QWORD *)v20 + 40);
            if (v21 != 514)
              _dispatch_queue_override_invoke_cold_1(v21);
            _dispatch_client_callout(*(_QWORD *)(v4 + 40), *(uint64_t (**)(void))(v4 + 32));
            dispatch_group_leave_VARIANT_armv81(v20);
            if (!v8)
            {
LABEL_49:
              if (!v5)
                goto LABEL_51;
LABEL_50:
              v5[1](v2);
              goto LABEL_51;
            }
          }
          else
          {
            _dispatch_client_callout(*(_QWORD *)(v4 + 40), *(uint64_t (**)(void))(v4 + 32));
            if (!v8)
              goto LABEL_49;
          }
          _dispatch_continuation_free_to_cache_limit_VARIANT_armv81(v8);
          if (!v5)
            goto LABEL_51;
          goto LABEL_50;
        }
LABEL_41:
        if ((v6 & 4) == 0)
          goto LABEL_47;
        goto LABEL_42;
      }
      v14 = 0;
LABEL_40:
      _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(v14, v7, v8 | 2);
      goto LABEL_41;
    }
    if (v14)
      goto LABEL_40;
    goto LABEL_26;
  }
  if (*(_QWORD *)(v6 + 40) == 1)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v6 + 48))(v4, 0, 0);
  else
    (*(void (**)(uint64_t, _OWORD *, uint64_t))(v6 + 64))(v4, v22, 196608);
  if (v5)
    goto LABEL_50;
LABEL_51:
  _dispatch_last_resort_autorelease_pool_pop((uint64_t)v22);
  StatusReg[25] = 0;
  StatusReg[20] = 0;
  v18 = StatusReg[4];
  if ((v18 & 0x1000000) != 0)
  {
    v19 = v18 & 0xFFFFFFFFFEFFFFFFLL;
    if ((v18 & 0xFFFFFFFFFEFFFFFFLL) != 0)
      goto LABEL_57;
  }
  if (StatusReg[28])
  {
    v19 = 0;
LABEL_57:
    _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(v19, 0, 14);
  }
}

uint64_t _dispatch_root_queue_drain_deferred_wlh_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *StatusReg;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  _OWORD v12[2];

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  StatusReg[20] = v2;
  memset(v12, 0, sizeof(v12));
  StatusReg[25] = *(unsigned int *)(v2 + 84) | 0xF0000;
  *(_BYTE *)(a1 + 45) |= 4u;
  v5 = *(_QWORD *)(v3 + 56);
  while (2)
  {
    v6 = StatusReg[3] & 0xFFFFFFFCLL;
    while (1)
    {
      v7 = v5;
      if (v5 >> 55)
      {
        v8 = v5 & 0xFFFFFFFFFFFFFFFELL;
        goto LABEL_6;
      }
      if ((v5 & 0xFFFFFFFC) != 0)
        break;
      v8 = v6 | v5 & 0x7700000001 | 0x60000000000000;
LABEL_6:
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v3 + 56), &v5, v8, memory_order_acquire, memory_order_acquire);
      if (v5 == v7)
        goto LABEL_12;
    }
    if ((v5 & 2) != 0)
    {
      v8 = v5 | 0x800000000;
      goto LABEL_6;
    }
    v8 = v5;
LABEL_12:
    if ((v7 & 0x6000000001) != 0x2000000001)
      _dispatch_root_queue_drain_deferred_wlh_cold_4_0(v7);
    if ((v7 & 0xFF800000FFFFFFFCLL) != 0)
    {
      v11 = *(_DWORD *)(v3 + 8);
      if (v8 >> 55)
      {
        if (v11 != 0x7FFFFFFF
          && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 0xFFFFFFFE, memory_order_release) <= 2)
        {
          _os_object_allows_weak_reference_VARIANT_mp_cold_1();
        }
      }
      else if (v11 != 0x7FFFFFFF
             && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 0xFFFFFFFF, memory_order_release) <= 1)
      {
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      }
      goto LABEL_21;
    }
    result = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v3 + 64))(v3, v12, 196610);
    if ((*(_BYTE *)(a1 + 45) & 1) != 0)
    {
      v5 = *(_QWORD *)(v3 + 56);
      if ((v5 & 0x2000000000) != 0)
      {
        if ((v5 & 1) != 0)
        {
          if (*(_DWORD *)(v3 + 8) != 0x7FFFFFFF
            && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed) <= 0)
          {
            dispatch_set_target_queue_VARIANT_mp_cold_2();
          }
          continue;
        }
        v8 = *(_QWORD *)(v3 + 56);
LABEL_21:
        result = _dispatch_event_loop_leave_deferred_VARIANT_mp(a1, v8);
      }
    }
    break;
  }
  StatusReg[25] = 0;
  StatusReg[20] = 0;
  v10 = StatusReg[4];
  if ((v10 & 0x1000000) != 0)
  {
    result = v10 & 0xFFFFFFFFFEFFFFFFLL;
    if ((v10 & 0xFFFFFFFFFEFFFFFFLL) != 0)
      return _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(result, 0, 14);
  }
  if (StatusReg[28])
  {
    result = 0;
    return _dispatch_set_priority_and_voucher_slow_VARIANT_armv81(result, 0, 14);
  }
  return result;
}

void _dispatch_queue_cleanup2_0()
{
  unint64_t v0;
  unint64_t v1;
  BOOL v2;
  int v3;
  pthread_t v4;
  pthread_attr_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C874D8];
  v0 = qword_1ECCE9B38[0];
  v1 = qword_1ECCE9B38[0];
  do
  {
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)qword_1ECCE9B38, &v1, (v0 & 0xFFFFFF7FFFFFFFFFLL) + 0x40020000000000, memory_order_acquire, memory_order_acquire);
    v2 = v1 == v0;
    v0 = v1;
  }
  while (!v2);
  atomic_fetch_and_explicit(&dword_1ECCE9B50, 0xFFFBFFFF, memory_order_relaxed);
  _dispatch_lane_barrier_complete_0((uint64_t)&_dispatch_main_q, 0, 0);
  if (_dispatch_program_is_probably_callback_driven)
  {
    memset(&v5, 0, sizeof(v5));
    pthread_attr_init(&v5);
    pthread_attr_setdetachstate(&v5, 2);
    v4 = 0;
    v3 = pthread_create(&v4, &v5, (void *(__cdecl *)(void *))_dispatch_sig_thread_0, 0);
    if (v3)
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unable to create signal thread";
      qword_1EDF52D38 = v3;
      __break(1u);
    }
    pthread_attr_destroy(&v5);
    sleep_NOCANCEL();
  }
  if (_dispatch_main_q_handle_pred != -1)
    dispatch_once_f_VARIANT_armv81(&_dispatch_main_q_handle_pred, (uint64_t)&_dispatch_main_q, (uint64_t (*)(void))_dispatch_runloop_queue_handle_init_0);
  _dispatch_runloop_queue_handle_dispose((mach_port_context_t)&_dispatch_main_q);
}

void _dispatch_sig_thread_0()
{
  _opaque_pthread_t *v0;
  _BYTE *stackaddr_np;
  uint64_t vars0;

  v0 = pthread_self();
  stackaddr_np = pthread_get_stackaddr_np(v0);
  bzero(&vars0, stackaddr_np - (_BYTE *)&vars0);
  _dispatch_sigsuspend_0();
}

void _dispatch_sigsuspend_0()
{
  pthread_sigmask(3, &_dispatch_sigsuspend_mask_0, 0);
  while (1)
    sigsuspend_NOCANCEL();
}

void _dispatch_apply_invoke_VARIANT_armv81(uint64_t a1)
{
  unsigned int add_explicit;
  atomic_ullong *v3;
  void *v4;
  _OWORD *v5;
  unint64_t StatusReg;
  uint64_t v7;
  int v8;
  _QWORD v9[3];

  add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 52), 1u, memory_order_relaxed);
  v9[1] = 0;
  v9[2] = 0;
  v9[0] = a1;
  _dispatch_apply_set_attr_behavior(*(_QWORD *)(a1 + 56));
  v3 = (atomic_ullong *)(*(_QWORD *)(a1 + 32) + 8 * add_explicit);
  if (*v3 != -1)
    dispatch_once_f_VARIANT_armv81(v3, (uint64_t)v9, (uint64_t (*)(void))_dispatch_apply_invoke3_0);
  _dispatch_apply_clear_attr_behavior(*(_QWORD *)(a1 + 56));
  if (atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 44), 0xFFFFFFFF, memory_order_relaxed) == 1)
  {
    v4 = *(void **)(a1 + 32);
    if (v4)
      free(v4);
    v5 = *(_OWORD **)(a1 + 56);
    if (v5)
    {
      v5[2] = 0u;
      v5[3] = 0u;
      *v5 = 0u;
      v5[1] = 0u;
      free(*(void **)(a1 + 56));
    }
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v7 = *(_QWORD *)(StatusReg + 176);
    if (v7)
      v8 = *(_DWORD *)(v7 + 8) + 1;
    else
      v8 = 1;
    if (v8 > _dispatch_continuation_cache_limit)
    {
      _dispatch_continuation_free_to_cache_limit_VARIANT_armv81(a1);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v7;
      *(_DWORD *)(a1 + 8) = v8;
      *(_QWORD *)(StatusReg + 176) = a1;
    }
  }
}

void _dispatch_apply_redirect_invoke_VARIANT_armv81(uint64_t a1)
{
  unsigned int add_explicit;
  atomic_ullong *v3;
  void *v4;
  _OWORD *v5;
  unint64_t StatusReg;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 v10;

  add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 52), 1u, memory_order_relaxed);
  v9 = a1;
  v10 = xmmword_18A06E700;
  _dispatch_apply_set_attr_behavior(*(_QWORD *)(a1 + 56));
  v3 = (atomic_ullong *)(*(_QWORD *)(a1 + 32) + 8 * add_explicit);
  if (*v3 != -1)
    dispatch_once_f_VARIANT_armv81(v3, (uint64_t)&v9, (uint64_t (*)(void))_dispatch_apply_invoke3_0);
  _dispatch_apply_clear_attr_behavior(*(_QWORD *)(a1 + 56));
  if (atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 44), 0xFFFFFFFF, memory_order_relaxed) == 1)
  {
    v4 = *(void **)(a1 + 32);
    if (v4)
      free(v4);
    v5 = *(_OWORD **)(a1 + 56);
    if (v5)
    {
      v5[2] = 0u;
      v5[3] = 0u;
      *v5 = 0u;
      v5[1] = 0u;
      free(*(void **)(a1 + 56));
    }
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v7 = *(_QWORD *)(StatusReg + 176);
    if (v7)
      v8 = *(_DWORD *)(v7 + 8) + 1;
    else
      v8 = 1;
    if (v8 > _dispatch_continuation_cache_limit)
    {
      _dispatch_continuation_free_to_cache_limit_VARIANT_armv81(a1);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v7;
      *(_DWORD *)(a1 + 8) = v8;
      *(_QWORD *)(StatusReg + 176) = a1;
    }
  }
}

void dispatch_apply_f_VARIANT_armv81(unint64_t a1, __objc2_class **a2, uint64_t a3, uint64_t a4)
{
  _dispatch_apply_with_attr_f_0(a1, 0, a2, a3, a4, 1);
}

void _dispatch_apply_with_attr_f_0(unint64_t a1, uint64_t a2, __objc2_class **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __objc2_class **v8;
  unint64_t StatusReg;
  unint64_t v12;
  unint64_t v13;
  __int128 *v14;
  __objc2_class **v15;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  unint64_t v34;
  __objc2_class **v35;
  int v36;
  __objc2_class *v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  __objc2_class *v41;
  atomic_uint *v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t (*v45)(void);
  uint64_t v46;
  __objc2_class **v48;
  __objc2_class **v49;
  signed int v51;
  __int128 v52;
  _QWORD v53[8];

  if (!a1)
    return;
  v8 = a3;
  if (a2 && (*(_DWORD *)a2 != -1592086528 || ~*(_QWORD *)(a2 + 16) != a2))
    _dispatch_apply_with_attr_f_cold_4(a2);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v12 = StatusReg + 184;
  while (1)
  {
    v12 = *(_QWORD *)v12;
    if (!v12)
      break;
    if (*(char **)(v12 + 8) == "apply")
    {
      v13 = *(_QWORD *)(v12 + 16);
      goto LABEL_10;
    }
  }
  v13 = 0;
LABEL_10:
  v14 = (__int128 *)(StatusReg + 160);
  if (!a3)
  {
    if (!*(_QWORD *)(StatusReg + 160))
      goto LABEL_24;
    v15 = *(__objc2_class ***)(StatusReg + 160);
    do
    {
      v8 = v15;
      v15 = (__objc2_class **)v15[3];
      if (!v15)
        break;
    }
    while (v15 != &_dispatch_custom_workloop_root_queue && v15 != &_dispatch_custom_workloop_overcommit_root_queue);
    if (v8 >= &_dispatch_root_queues && v8 < (__objc2_class **)&_dispatch_queue_serial_numbers)
    {
LABEL_24:
      v18 = __clz(__rbit32((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF));
      if (((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF) != 0)
        v19 = v18 + 1;
      else
        v19 = 4;
      if (v19 - 7 <= 0xFFFFFFF9)
        _dispatch_queue_priority_inherit_from_target_cold_1(v19);
      v8 = &_dispatch_root_queues + 16 * (unint64_t)(3 * v19 - 3);
    }
  }
  v48 = *(__objc2_class ***)(StatusReg + 160);
  v20 = *((_DWORD *)v8 + 21);
  v21 = (unsigned __int16)v20 >> 12;
  v22 = (v20 >> 8) & 0xF;
  if (v22)
    v23 = v22;
  else
    v23 = v21;
  if (v8[3])
  {
    v44 = __clz(__rbit32((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF));
    if (((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF) != 0)
      v23 = v44 + 1;
    else
      v23 = 0;
  }
  if (a2)
  {
    if (*(_DWORD *)a2 != -1592086528 || ~*(_QWORD *)(a2 + 16) != a2)
      _dispatch_apply_with_attr_f_cold_4(a2);
    v24 = a4;
    if (v13)
    {
      v25 = a6;
      v31 = 0xFFFFLL;
      v29 = 1;
    }
    else
    {
      v25 = a6;
      switch(v23)
      {
        case 0:
          goto LABEL_38;
        default:
          v26 = pthread_qos_max_parallelism();
          if (v26 <= 0)
LABEL_38:
            v26 = MEMORY[0xFFFFFC036];
          if (v26 >= MEMORY[0xFFFFFC034])
            v28 = MEMORY[0xFFFFFC034];
          else
            v28 = v26;
          if (*(_QWORD *)(a2 + 8))
          {
            v30 = pthread_qos_max_parallelism();
            if (v30 < 1)
              v29 = 0;
            else
              v29 = (v30 * *(_DWORD *)(a2 + 8));
          }
          else
          {
            v29 = -1;
          }
          if (v29 >= v28)
            v29 = v28;
          if (!v29)
            goto LABEL_117;
          v31 = 0xFFFFLL;
          break;
      }
    }
  }
  else
  {
    switch(v23)
    {
      case 0:
        goto LABEL_40;
      default:
        v27 = pthread_qos_max_parallelism();
        if (v27 <= 0)
LABEL_40:
          v27 = MEMORY[0xFFFFFC036];
        if (v27 >= MEMORY[0xFFFFFC034])
          v29 = MEMORY[0xFFFFFC034];
        else
          v29 = v27;
        v24 = a4;
        v25 = a6;
        if (v13)
        {
          if (v13 >= v29)
            v29 = 1;
          else
            v29 /= v13;
          if (v13 >= 0xFFFF || a1 >= 0xFFFF)
            v31 = 0xFFFFLL;
          else
            v31 = v13 * a1;
        }
        else
        {
          v31 = a1;
          if (!(_DWORD)v29)
LABEL_117:
            _dispatch_apply_with_attr_f_cold_2_0(a2);
        }
        return;
    }
  }
  if (v29 >= a1)
    v32 = a1;
  else
    v32 = v29;
  memset(v53, 0, 32);
  v53[4] = a5;
  v53[5] = v24;
  v53[6] = v25;
  v53[7] = v8;
  v33 = *(void **)(StatusReg + 176);
  if (v33)
    *(_QWORD *)(StatusReg + 176) = *((_QWORD *)v33 + 2);
  else
    v33 = _dispatch_continuation_alloc_from_heap_VARIANT_armv81();
  *((_QWORD *)v33 + 1) = 0;
  *((_QWORD *)v33 + 2) = a1;
  *((_QWORD *)v33 + 3) = v31;
  *((_DWORD *)v33 + 11) = v32;
  *((_DWORD *)v33 + 13) = 0;
  if (a2)
  {
    v34 = (unint64_t)_dispatch_calloc(1uLL, 0x40uLL);
    *(_OWORD *)v34 = 0u;
    *(_OWORD *)(v34 + 16) = 0u;
    *(_OWORD *)(v34 + 32) = 0u;
    *(_OWORD *)(v34 + 48) = 0u;
    *(_DWORD *)v34 = -1592086528;
    *(_QWORD *)(v34 + 16) = ~v34;
    *(_QWORD *)(v34 + 8) = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(v34 + 4) = *(_DWORD *)(a2 + 4);
  }
  else
  {
    v34 = 0;
  }
  *((_QWORD *)v33 + 7) = v34;
  *((_QWORD *)v33 + 4) = 0;
  *(_QWORD *)v33 = v53;
  *((_DWORD *)v33 + 10) = 0;
  v35 = (__objc2_class **)v8[3];
  if (v35 == &_dispatch_custom_workloop_root_queue || v35 == &_dispatch_custom_workloop_overcommit_root_queue)
  {
    if (((v8[7] ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) != 0)
      dispatch_async_and_wait_f_VARIANT_armv81((uint64_t)v8, (uint64_t)v33, (uint64_t (*)(void))_dispatch_apply_serial_0);
    else
      _dispatch_apply_serial_0((uint64_t)v33);
    return;
  }
  if (v32 < 2 || *((_WORD *)v8 + 40) == 1)
  {
    v45 = (uint64_t (*)(void))_dispatch_apply_serial_0;
    goto LABEL_99;
  }
  if (v35)
  {
    v46 = (uint64_t)v48;
    if (v8 == v48)
    {
      v45 = (uint64_t (*)(void))_dispatch_apply_serial_0;
      goto LABEL_100;
    }
    v45 = (uint64_t (*)(void))_dispatch_apply_redirect_0;
LABEL_99:
    v46 = (uint64_t)v8;
LABEL_100:
    dispatch_sync_f_VARIANT_armv81(v46, (uint64_t)v33, v45);
    return;
  }
  v52 = *v14;
  *(_QWORD *)(StatusReg + 160) = v8;
  *(_QWORD *)(StatusReg + 168) = &v52;
  v36 = *((_DWORD *)v33 + 11);
  v51 = v36 - 1;
  if (v36 < 2)
  {
    v38 = 0;
    v41 = 0;
  }
  else
  {
    v49 = v8;
    v37 = 0;
    v38 = 0;
    v39 = *(_QWORD *)(StatusReg + 32) | 0x10000000;
    v40 = v36 - 1;
    do
    {
      v41 = *(__objc2_class **)(StatusReg + 176);
      if (v41)
        *(_QWORD *)(StatusReg + 176) = v41->cache;
      else
        v41 = (__objc2_class *)_dispatch_continuation_alloc_from_heap_VARIANT_armv81();
      v41->isa = (__objc2_class *)260;
      v41->info = (__objc2_class_ro *)_dispatch_apply_invoke_VARIANT_armv81;
      v41[1].isa = (__objc2_class *)v33;
      v42 = *(atomic_uint **)(StatusReg + 224);
      if (v42 && (int)atomic_fetch_add_explicit(v42 + 3, 1u, memory_order_relaxed) <= 0)
        dispatch_group_notify_VARIANT_mp_cold_3();
      v41->vtable = v42;
      v41->superclass = (__objc2_class *)v39;
      v41->cache = v37;
      if (!v38)
        v38 = (unint64_t)v41;
      v37 = v41;
      --v40;
    }
    while (v40);
    v36 = *((_DWORD *)v33 + 11);
    v14 = (__int128 *)(StatusReg + 160);
    v8 = v49;
  }
  *((_DWORD *)v33 + 12) = v36;
  *((_QWORD *)v33 + 4) = _dispatch_calloc(v36, 8uLL);
  *(_QWORD *)(v38 + 16) = 0;
  *(_QWORD *)(StatusReg + 976) = v8 + 6;
  v43 = atomic_exchange_explicit((atomic_ullong *volatile)v8 + 6, v38, memory_order_release);
  if (v43)
  {
    *(_QWORD *)(v43 + 16) = v41;
    *(_QWORD *)(StatusReg + 976) = 0;
  }
  else
  {
    v8[13] = v41;
    *(_QWORD *)(StatusReg + 976) = 0;
    _dispatch_root_queue_poke_and_wakeup_VARIANT_armv81((unsigned int *)v8, v51, 0);
  }
  _dispatch_apply_invoke_and_wait_0((uint64_t)v33);
  *v14 = v52;
}

void dispatch_apply_with_attr_f_VARIANT_armv81(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _dispatch_apply_with_attr_f_0(a1, a2, 0, a3, a4, 2);
}

void dispatch_apply_VARIANT_armv81(unint64_t a1, __objc2_class **a2, void *aBlock)
{
  uint64_t *v5;

  v5 = (uint64_t *)_dispatch_Block_copy(aBlock);
  dispatch_apply_f_VARIANT_armv81(a1, a2, (uint64_t)v5, v5[2]);
  _Block_release(v5);
}

void dispatch_apply_with_attr_VARIANT_armv81(unint64_t a1, uint64_t a2, void *aBlock)
{
  uint64_t *v5;

  v5 = (uint64_t *)_dispatch_Block_copy(aBlock);
  _dispatch_apply_with_attr_f_0(a1, a2, 0, (uint64_t)v5, v5[2], 2);
  _Block_release(v5);
}

double dispatch_apply_attr_init_VARIANT_armv81(unint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)a1 = -1592086528;
  *(_QWORD *)(a1 + 16) = ~a1;
  return result;
}

double dispatch_apply_attr_destroy_VARIANT_armv81(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t dispatch_apply_attr_set_parallelism_VARIANT_armv81(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 == -1 || a2 == 2)
  {
    if (a3 != 1)
    {
      if (!a3)
        dispatch_apply_attr_set_parallelism_VARIANT_mp_cold_4();
      dispatch_apply_attr_set_parallelism_VARIANT_armv81_cold_3(a3);
    }
    if (result && (*(_DWORD *)result != -1592086528 || ~*(_QWORD *)(result + 16) != result))
      _dispatch_apply_with_attr_f_cold_4(result);
    *(_QWORD *)(result + 8) = 1;
  }
  else
  {
    if (a2 != 1)
      dispatch_apply_attr_set_parallelism_VARIANT_armv81_cold_1(a2);
    if (a3 != 1)
      dispatch_apply_attr_set_parallelism_VARIANT_armv81_cold_2(a3);
  }
  return result;
}

unint64_t dispatch_apply_attr_query_VARIANT_armv81(unint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  unint64_t StatusReg;
  unint64_t v5;
  unint64_t v6;
  __objc2_class **v7;
  __objc2_class **v8;
  BOOL v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  int v21;

  v3 = result;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = StatusReg + 184;
  while (1)
  {
    v5 = *(_QWORD *)v5;
    if (!v5)
      break;
    if (*(char **)(v5 + 8) == "apply")
    {
      v6 = *(_QWORD *)(v5 + 16);
      goto LABEL_6;
    }
  }
  v6 = 0;
LABEL_6:
  v7 = *(__objc2_class ***)(StatusReg + 160);
  if (!v7)
    goto LABEL_18;
  do
  {
    v8 = v7;
    v7 = (__objc2_class **)v7[3];
    if (!v7)
      break;
    v9 = v7 == &_dispatch_custom_workloop_root_queue || v7 == &_dispatch_custom_workloop_overcommit_root_queue;
  }
  while (!v9);
  if (v8 >= &_dispatch_root_queues && v8 < (__objc2_class **)&_dispatch_queue_serial_numbers)
  {
LABEL_18:
    v11 = (*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF;
    v9 = v11 == 0;
    v12 = __clz(__rbit32(v11));
    if (v9)
      result = 4;
    else
      result = v12 + 1;
    if ((result - 7) <= 0xFFFFFFF9)
      _dispatch_queue_priority_inherit_from_target_cold_1(result);
    v8 = &_dispatch_root_queues + 16 * (unint64_t)(3 * result - 3);
  }
  v13 = *((_DWORD *)v8 + 21);
  v14 = (unsigned __int16)v13 >> 12;
  v15 = (v13 >> 8) & 0xF;
  if (v15)
    v16 = v15;
  else
    v16 = v14;
  switch(a2)
  {
    case 0:
      return dispatch_apply_attr_query_VARIANT_armv81(v3, 1) != 0;
    case 1:
      if ((a3 & 1) != 0)
      {
        if (v3)
        {
          if (*(_DWORD *)v3 != -1592086528 || ~*(_QWORD *)(v3 + 16) != v3)
            _dispatch_apply_with_attr_f_cold_4(v3);
          if (!v6)
          {
            switch(v16)
            {
              case 0:
                goto LABEL_48;
              default:
LABEL_55:
                v19 = pthread_qos_max_parallelism();
                if (v19 <= 0)
LABEL_48:
                  v19 = MEMORY[0xFFFFFC036];
                if (v19 >= MEMORY[0xFFFFFC034])
                  v18 = MEMORY[0xFFFFFC034];
                else
                  v18 = v19;
                if (!*(_QWORD *)(v3 + 8))
                  goto LABEL_60;
                goto LABEL_61;
            }
          }
          return 1;
        }
        switch(v16)
        {
          case 0:
            goto LABEL_54;
          default:
LABEL_66:
            LODWORD(result) = pthread_qos_max_parallelism();
            if ((int)result <= 0)
LABEL_54:
              LODWORD(result) = MEMORY[0xFFFFFC036];
            if (result >= MEMORY[0xFFFFFC034])
              result = MEMORY[0xFFFFFC034];
            else
              result = result;
            if (!v6)
              return result;
            if (v6 >= result)
              return 1;
            result /= v6;
            break;
        }
      }
      else if (v3)
      {
        if (*(_DWORD *)v3 != -1592086528 || ~*(_QWORD *)(v3 + 16) != v3)
          _dispatch_apply_with_attr_f_cold_4(v3);
        v17 = pthread_qos_max_parallelism();
        if (v17 <= 0)
          v17 = MEMORY[0xFFFFFC036];
        v18 = v17;
        if (*(_QWORD *)(v3 + 8))
        {
LABEL_61:
          v21 = pthread_qos_max_parallelism();
          if (v21 < 1)
            v20 = 0;
          else
            v20 = (v21 * *(_DWORD *)(v3 + 8));
        }
        else
        {
LABEL_60:
          v20 = -1;
        }
        if (v20 >= v18)
          return v18;
        else
          return v20;
      }
      else
      {
        LODWORD(result) = pthread_qos_max_parallelism();
        if ((int)result <= 0)
          LODWORD(result) = MEMORY[0xFFFFFC036];
        return result;
      }
      break;
    case 2:
      if (!v3)
      {
        switch(v16)
        {
          case 0:
            goto LABEL_54;
          default:
            goto LABEL_66;
        }
      }
      if (*(_DWORD *)v3 != -1592086528 || ~*(_QWORD *)(v3 + 16) != v3)
        _dispatch_apply_with_attr_f_cold_4(v3);
      if (!v6)
      {
        switch(v16)
        {
          case 0:
            goto LABEL_48;
          default:
            goto LABEL_55;
        }
      }
      return 1;
  }
  return result;
}

void _dispatch_apply_invoke3_0(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t add_explicit;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t StatusReg;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  _QWORD v23[3];

  v1 = *a1;
  v2 = *(_QWORD *)(*a1 + 16);
  add_explicit = atomic_fetch_add_explicit((atomic_ullong *volatile)(*a1 + 8), 1uLL, memory_order_relaxed);
  if (add_explicit >= v2)
    return;
  v5 = 0;
  v6 = *(uint64_t (**)(void))(*(_QWORD *)v1 + 32);
  v7 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v8 = "apply";
  v9 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  v10 = *(_QWORD *)(v1 + 24);
  v23[1] = "apply";
  v23[2] = v10;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v23[0] = *(_QWORD *)(StatusReg + 184);
  *(_QWORD *)(StatusReg + 184) = v23;
  v22 = 0uLL;
  if ((a1[1] & 1) != 0)
  {
    v12 = *(_QWORD *)(*(_QWORD *)v1 + 56);
    v22 = *(_OWORD *)(StatusReg + 160);
    *(_QWORD *)(StatusReg + 160) = v12;
    *(_QWORD *)(StatusReg + 168) = &v22;
    LODWORD(v8) = *(_DWORD *)(v12 + 84);
    v13 = *(_QWORD *)(StatusReg + 200);
    if ((_DWORD)v13)
    {
      v14 = (unsigned __int16)v8 & 0xFFF;
      if (((unsigned __int16)v8 & 0xFFF) != 0)
      {
        if (((unsigned __int16)v13 & 0xFFFu) > v14)
          v14 = v13 & 0xFFF;
        if ((unsigned __int16)v8 >> 12 <= v14 >> 8)
          v15 = 0x40000000;
        else
          v15 = 1140912128;
        LODWORD(v8) = v13 & 0x880F0000 | v14 | v15 & v8;
      }
      else
      {
        v16 = v13 | 0x40000000;
        if ((v13 & 0xFFF) == 0)
          v16 = *(_QWORD *)(StatusReg + 200);
        v17 = (unsigned __int16)v8 >> 12;
        LODWORD(v8) = v16 & 0xFFFF0FFF | v8 & 0x400F000;
        if (v17 <= ((v16 >> 8) & 0xF))
          LODWORD(v8) = v16;
      }
    }
    else
    {
LABEL_31:
      LODWORD(v8) = v8 & 0xFFF0FFFF;
    }
    *(_QWORD *)(StatusReg + 200) = v8;
    v5 = v13 & 0xFFF0FFFF;
  }
  v20 = v5;
  v21 = StatusReg;
  v18 = *(_DWORD *)(v1 + 40);
  do
  {
    if ((v18 & 0x1000000) != 0)
    {
      v19 = (void *)MEMORY[0x18D766D94]();
      if ((v9 & 1) != 0)
      {
LABEL_19:
        _dispatch_client_callout2(v7, add_explicit, v6);
        goto LABEL_23;
      }
    }
    else
    {
      v19 = 0;
      if ((v9 & 1) != 0)
        goto LABEL_19;
    }
    if ((v9 & 2) == 0)
    {
      LODWORD(v13) = v9;
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: apply continuation has invalid flags";
      qword_1EDF52D38 = v9;
      __break(1u);
      goto LABEL_31;
    }
    _dispatch_client_callout3_a(v7, add_explicit, *((unsigned int *)a1 + 4), v6);
LABEL_23:
    add_explicit = atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
    if (v19)
      objc_autoreleasePoolPop(v19);
  }
  while (add_explicit < v2);
  if ((a1[1] & 1) != 0)
  {
    *(_QWORD *)(v21 + 200) = *(_QWORD *)(v21 + 200) & 0xF0000 | v20;
    *(_OWORD *)(v21 + 160) = v22;
  }
  *(_QWORD *)(v21 + 184) = v23[0];
}

void _dispatch_apply_serial_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  _OWORD *v12;
  unint64_t StatusReg;
  uint64_t v14;
  int v15;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  if (v3)
  {
    do
    {
      v4 = *(_DWORD *)(v3 + 80);
      v3 = *(_QWORD *)(v3 + 24);
      if (v3)
        v5 = (v4 & 0x30000) == 0;
      else
        v5 = 0;
    }
    while (v5);
    v6 = (v4 & 0x10000) == 0;
  }
  else
  {
    v6 = 1;
  }
  v7 = 0;
  if (*(_QWORD *)(a1 + 16) <= 1uLL)
    v8 = 1;
  else
    v8 = *(_QWORD *)(a1 + 16);
  do
  {
    if (v6)
      v9 = 0;
    else
      v9 = (void *)MEMORY[0x18D766D94]();
    v10 = *(_QWORD *)(v2 + 48);
    if ((v10 & 1) != 0)
    {
      _dispatch_client_callout2(*(_QWORD *)(v2 + 40), v7, *(uint64_t (**)(void))(v2 + 32));
      if (!v9)
        goto LABEL_20;
LABEL_19:
      objc_autoreleasePoolPop(v9);
      goto LABEL_20;
    }
    if ((v10 & 2) == 0)
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: apply continuation has invalid flags";
      qword_1EDF52D38 = v10;
      __break(1u);
      return;
    }
    _dispatch_client_callout3_a(*(_QWORD *)(v2 + 40), v7, 0, *(uint64_t (**)(void))(v2 + 32));
    if (v9)
      goto LABEL_19;
LABEL_20:
    ++v7;
  }
  while (v8 != v7);
  v11 = *(void **)(a1 + 32);
  if (v11)
    free(v11);
  v12 = *(_OWORD **)(a1 + 56);
  if (v12)
  {
    v12[2] = 0u;
    v12[3] = 0u;
    *v12 = 0u;
    v12[1] = 0u;
    free(*(void **)(a1 + 56));
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v14 = *(_QWORD *)(StatusReg + 176);
  if (v14)
    v15 = *(_DWORD *)(v14 + 8) + 1;
  else
    v15 = 1;
  if (v15 > _dispatch_continuation_cache_limit)
  {
    _dispatch_continuation_free_to_cache_limit_VARIANT_armv81(a1);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v14;
    *(_DWORD *)(a1 + 8) = v15;
    *(_QWORD *)(StatusReg + 176) = a1;
  }
}

void _dispatch_apply_redirect_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *StatusReg;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  signed int v21;

  v1 = (*(_DWORD *)(a1 + 44) - 1);
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v3 = v2;
  do
  {
    if (*(_WORD *)(v3 + 80) != 1)
    {
      v4 = *(_QWORD *)(v3 + 56);
      while ((v4 & 0x20000000000000) == 0)
      {
        v5 = (v4 >> 41) & 0x1FFF;
        if ((_DWORD)v5 == 4096)
          break;
        LODWORD(v5) = 4096 - v5;
        if ((int)v5 >= (int)v1)
          v5 = v1;
        else
          v5 = v5;
        v6 = v4;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v3 + 56), &v6, v4 + (v5 << 41), memory_order_relaxed, memory_order_relaxed);
        v7 = v6 == v4;
        v4 = v6;
        if (v7)
          goto LABEL_11;
      }
    }
    v5 = 0;
LABEL_11:
    v8 = (v1 - v5);
    if ((int)v1 > (int)v5)
    {
      if (v2 != v3)
      {
        v9 = v2;
        do
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 56), 0xFFFFFE0000000000 * v8, memory_order_relaxed);
          v9 = *(_QWORD *)(v9 + 24);
        }
        while (v9 != v3);
      }
      if (!(_DWORD)v5)
      {
        _dispatch_apply_serial_0(a1);
        return;
      }
      *(_DWORD *)(a1 + 44) -= v8;
      v1 = v5;
    }
    if (!*(_DWORD *)(a1 + 40))
      *(_DWORD *)(a1 + 40) = (*(_DWORD *)(v3 + 80) << 8) & 0x3000000;
    v3 = *(_QWORD *)(v3 + 24);
  }
  while (*(_QWORD *)(v3 + 24));
  StatusReg = (_QWORD *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v11 = *(_DWORD *)(a1 + 44);
  v12 = (v11 - 1);
  v21 = v11 - 1;
  if (v11 < 2)
  {
    v13 = 0;
    v15 = 0;
LABEL_34:
    *(_DWORD *)(a1 + 48) = v11;
    v12 = a1;
    *(_QWORD *)(a1 + 32) = _dispatch_calloc(v11, 8uLL);
    *(_QWORD *)(v13 + 16) = 0;
    StatusReg[122] = v3 + 48;
    v17 = atomic_exchange_explicit((atomic_ullong *volatile)(v3 + 48), v13, memory_order_release);
    if (v17)
    {
      v18 = v12;
      *(_QWORD *)(v17 + 16) = v15;
      StatusReg[122] = 0;
      goto LABEL_36;
    }
  }
  else
  {
    v20 = (_QWORD *)v1;
    v1 = 0;
    v13 = 0;
    v14 = StatusReg[4] | 0x10000000;
    while (1)
    {
      v15 = (_QWORD *)StatusReg[22];
      if (v15)
      {
        StatusReg[22] = v15[2];
      }
      else
      {
        v19 = a1;
        v15 = _dispatch_continuation_alloc_from_heap_VARIANT_armv81();
        a1 = v19;
      }
      *v15 = 260;
      v15[4] = _dispatch_apply_redirect_invoke_VARIANT_armv81;
      v15[5] = a1;
      v16 = StatusReg[28];
      if (v16)
      {
        if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 12), 1u, memory_order_relaxed) <= 0)
          break;
      }
      v15[3] = v16;
      v15[1] = v14;
      v15[2] = v1;
      if (!v13)
        v13 = (unint64_t)v15;
      v1 = (uint64_t)v15;
      v12 = (v12 - 1);
      if (!(_DWORD)v12)
      {
        v11 = *(_DWORD *)(a1 + 44);
        v1 = (uint64_t)v20;
        goto LABEL_34;
      }
    }
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
  *(_QWORD *)(v3 + 104) = v15;
  StatusReg[122] = 0;
  _dispatch_root_queue_poke_and_wakeup_VARIANT_armv81((unsigned int *)v3, v21, 0);
  v18 = v12;
LABEL_36:
  _dispatch_apply_invoke_and_wait_0(v18);
  for (; v2 != v3; v2 = *(_QWORD *)(v2 + 24))
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 56), 0xFFFFFE0000000000 * v1, memory_order_relaxed);
}

void _dispatch_apply_invoke_and_wait_0(uint64_t a1)
{
  uint64_t add_explicit;
  atomic_ullong *v3;
  int v4;
  uint64_t v5;
  uint64_t i;
  atomic_ullong *v7;
  void *v8;
  _OWORD *v9;
  unint64_t StatusReg;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;

  add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 52), 1u, memory_order_relaxed);
  v13 = a1;
  v14 = xmmword_18A06E710;
  _dispatch_apply_set_attr_behavior(*(_QWORD *)(a1 + 56));
  v3 = (atomic_ullong *)(*(_QWORD *)(a1 + 32) + 8 * add_explicit);
  if (*v3 != -1)
    dispatch_once_f_VARIANT_armv81(v3, (uint64_t)&v13, (uint64_t (*)(void))_dispatch_apply_invoke3_0);
  _dispatch_apply_clear_attr_behavior(*(_QWORD *)(a1 + 56));
  v4 = *(_DWORD *)(a1 + 48);
  if (v4 >= 1)
  {
    v5 = 0;
    for (i = 0; i < v4; ++i)
    {
      if (8 * add_explicit != v5)
      {
        v7 = (atomic_ullong *)(*(_QWORD *)(a1 + 32) + v5);
        if (*v7 != -1)
          dispatch_once_f_VARIANT_armv81(v7, 0, _dispatch_no_op_0);
        v4 = *(_DWORD *)(a1 + 48);
      }
      v5 += 8;
    }
  }
  if (atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 44), 0xFFFFFFFF, memory_order_relaxed) == 1)
  {
    v8 = *(void **)(a1 + 32);
    if (v8)
      free(v8);
    v9 = *(_OWORD **)(a1 + 56);
    if (v9)
    {
      v9[2] = 0u;
      v9[3] = 0u;
      *v9 = 0u;
      v9[1] = 0u;
      free(*(void **)(a1 + 56));
    }
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v11 = *(_QWORD *)(StatusReg + 176);
    if (v11)
      v12 = *(_DWORD *)(v11 + 8) + 1;
    else
      v12 = 1;
    if (v12 > _dispatch_continuation_cache_limit)
    {
      _dispatch_continuation_free_to_cache_limit_VARIANT_armv81(a1);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v11;
      *(_DWORD *)(a1 + 8) = v12;
      *(_QWORD *)(StatusReg + 176) = a1;
    }
  }
}

uint64_t dispatch_source_create_VARIANT_armv81(uint64_t a1, unint64_t a2, uint64_t a3, __objc2_class **a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;

  v6 = (*(uint64_t (**)(void))(a1 + 32))();
  if (!v6)
    return 0;
  v7 = v6;
  v8 = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_source, 120);
  v9 = v8;
  v10 = *(_BYTE *)(*(_QWORD *)v7 + 10);
  *(_DWORD *)(v8 + 8) += 2;
  if (*(_BYTE *)(*(_QWORD *)v8 + 40) == 19)
    ++*(_DWORD *)(v8 + 8);
  *(_QWORD *)(v8 + 16) = -1985229329;
  if ((v10 & 2) != 0)
    v11 = 67108865;
  else
    v11 = 4194305;
  *(_DWORD *)(v8 + 80) = v11;
  *(_QWORD *)(v8 + 56) = 0x19FFE0000000000;
  *(_QWORD *)(v8 + 64) = atomic_fetch_add_explicit((atomic_ullong *volatile)&_dispatch_queue_serial_numbers, 1uLL, memory_order_relaxed);
  *(_QWORD *)(v8 + 72) = "source";
  *(_QWORD *)(v8 + 88) = v7;
  *(_QWORD *)(v7 + 8) = ~v8;
  if (a4)
  {
    if ((*((_BYTE *)a4 + 87) & 8) != 0 && (*(_BYTE *)(v7 + 29) & 2) == 0)
      dispatch_source_create_VARIANT_armv81_cold_2(v8);
    if (*((_DWORD *)a4 + 2) != 0x7FFFFFFF
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)a4 + 2, 1u, memory_order_relaxed) <= 0)
    {
      dispatch_set_target_queue_VARIANT_mp_cold_2();
    }
  }
  else
  {
    a4 = &off_1ECCEA100;
  }
  *(_QWORD *)(v8 + 24) = a4;
  if ((*(_BYTE *)(v7 + 29) & 2) != 0 && (*(_BYTE *)(v7 + 30) & 0x10) != 0)
    dispatch_source_set_timer_VARIANT_armv81((_QWORD *)v8, 0, a2, 0xFFFFFFFFFFFFFFFFLL);
  return v9;
}

unint64_t dispatch_source_set_timer_VARIANT_armv81(_QWORD *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  _DWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v10;
  unint64_t v11;
  unint64_t result;
  int v13;
  uint64_t (*v14)(unint64_t);
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;

  v8 = a1[11];
  if ((*(_BYTE *)(v8 + 29) & 2) == 0)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Attempt to set timer on a non-timer source";
    qword_1EDF52D38 = (uint64_t)a1;
    __break(1u);
    goto LABEL_51;
  }
  v5 = a4;
  v6 = a2;
  v10 = *(_BYTE *)(v8 + 30);
  if ((v10 & 0x10) == 0)
  {
    v4 = _dispatch_calloc(1uLL, 0x20uLL);
    if (a3)
    {
      if (a3 >= 0x7FFFFFFFFFFFFFFFLL)
        a3 = 0x7FFFFFFFFFFFFFFFLL;
      if (v5 >= 0x7FFFFFFFFFFFFFFFLL)
        v11 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v11 = v5;
      if (v6 != -1)
        goto LABEL_10;
      goto LABEL_56;
    }
LABEL_51:
    if (v6 != -1)
    {
      _dispatch_bug_deprecated("Setting timer interval to 0 requests a 1ns timer, did you mean FOREVER (a one-shot timer)?");
      if (v5 >= 0x7FFFFFFFFFFFFFFFLL)
        v11 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v11 = v5;
      a3 = 1;
LABEL_10:
      switch(v6)
      {
        case -9223372036854775808:
          v13 = 1;
          result = mach_continuous_time();
          goto LABEL_58;
        case -2:
          result = clock_gettime_nsec_np(_CLOCK_REALTIME);
          v13 = 2;
          goto LABEL_69;
        case 0:
          result = mach_absolute_time();
          v13 = 0;
LABEL_58:
          if (!_dispatch_host_time_nano2mach)
          {
            if (a3 > 0x7FFFFFFFFFFFFFFELL)
            {
              a3 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              v24 = (3 * a3 * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
              v25 = (v24 + ((3 * a3 - v24) >> 1)) >> 6;
              if (a3 > 0x5555555555555554)
                v25 = 3 * (a3 / 0x7D);
              if (v25 <= 1)
                a3 = 1;
              else
                a3 = v25;
            }
            goto LABEL_65;
          }
          v30 = result;
          v31 = _dispatch_host_time_nano2mach(a3);
          if (v31 <= 1)
            a3 = 1;
          else
            a3 = v31;
          if (!_dispatch_host_time_nano2mach)
          {
            result = v30;
LABEL_65:
            if (v11)
            {
              if (v11 > 0x7FFFFFFFFFFFFFFELL)
              {
                v11 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else if (v11 > 0x5555555555555554)
              {
                v11 = 3 * (v11 / 0x7D);
              }
              else
              {
                v26 = (3 * v11 * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
                v11 = (v26 + ((3 * v11 - v26) >> 1)) >> 6;
              }
            }
            goto LABEL_69;
          }
          v11 = _dispatch_host_time_nano2mach(v11);
          result = v30;
LABEL_69:
          v27 = a3 >> 1;
          if (v11 < a3 >> 1)
            v27 = v11;
          if (a3 >= 0x7FFFFFFFFFFFFFFFLL)
            v27 = v11;
          v4[6] = v13;
          v28 = v27 + result;
          if (v28 >= 0x7FFFFFFFFFFFFFFFLL)
            v28 = 0x7FFFFFFFFFFFFFFFLL;
          *(_QWORD *)v4 = result;
          *((_QWORD *)v4 + 1) = v28;
          *((_QWORD *)v4 + 2) = a3;
          goto LABEL_76;
      }
      v21 = v6 & 0x7FFFFFFFFFFFFFFFLL;
      if ((v6 & 0x4000000000000000) != 0)
        v22 = 2;
      else
        v22 = 1;
      if ((v6 & 0x4000000000000000) != 0)
        v21 = -v6;
      if (v6 < 0)
        v13 = v22;
      else
        v13 = 0;
      if (v6 >= 0)
        v21 = v6;
      if (v21 >> 62)
        result = -1;
      else
        result = v21;
LABEL_57:
      if (v13 == 2)
        goto LABEL_69;
      goto LABEL_58;
    }
    if (v5 >= 0x7FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v5;
    a3 = 1;
LABEL_56:
    v13 = (*(unsigned __int8 *)(v8 + 30) >> 2) & 3;
    result = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_57;
  }
  result = (unint64_t)_dispatch_calloc(1uLL, 0x20uLL);
  v4 = (_DWORD *)result;
  *(_DWORD *)(result + 24) = 0;
  if (!v6)
  {
    if (a3)
    {
      v15 = 16666666;
      v16 = 1892160075;
      if ((v10 & 0x20) == 0)
      {
        v16 = 31536000000;
        v15 = 1000000;
      }
      v17 = v15 * a3;
      if (v16 >= a3)
        result = v17;
      else
        result = 31536000000000000;
      v6 = (uint64_t)&_dispatch_host_time_nano2mach;
      v14 = _dispatch_host_time_nano2mach;
      if (!_dispatch_host_time_nano2mach)
      {
        if (result > 0x7FFFFFFFFFFFFFFELL)
        {
          v19 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else if (result > 0x5555555555555554)
        {
          v19 = 3 * (result / 0x7D);
        }
        else
        {
          v18 = (3 * result * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
          v19 = (v18 + ((3 * result - v18) >> 1)) >> 6;
        }
        goto LABEL_27;
      }
    }
    else
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Setting interval to 0";
      __break(1u);
    }
    v19 = v14(result);
LABEL_27:
    result = mach_absolute_time();
    v20 = result;
    if (v5 > 0x3E8)
    {
      if (v5 != -1)
      {
LABEL_105:
        qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Passing an invalid leeway";
        __break(1u);
        return result;
      }
      if ((v10 & 0x20) != 0)
      {
        if (*(_QWORD *)v6)
          result = (*(uint64_t (**)(uint64_t))v6)(16666666);
        else
          result = 399999;
      }
      else
      {
        result = v19 >> 1;
      }
    }
    else
    {
      result = v19 * v5 / 0x3E8;
    }
    v13 = 0;
    v23 = (v20 + v19) / v19 * v19;
    v4[6] = 0;
    *(_QWORD *)v4 = v23;
    *((_QWORD *)v4 + 1) = result + v23;
    *((_QWORD *)v4 + 2) = v19;
    goto LABEL_76;
  }
  if (v6 != -1)
  {
LABEL_104:
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Start value is not DISPATCH_TIME_NOW or DISPATCH_TIME_FOREVER";
    __break(1u);
    goto LABEL_105;
  }
  v13 = 0;
  *(_QWORD *)(result + 16) = 0x7FFFFFFFFFFFFFFFLL;
  *(int64x2_t *)result = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
LABEL_76:
  if (v13 != ((*(unsigned __int8 *)(v8 + 30) >> 2) & 3) && *(unsigned __int8 *)(v8 + 28) == 236)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Attempting to modify timer clock";
    __break(1u);
    goto LABEL_104;
  }
  if (_dispatch_source_timer_telemetry_pred != -1)
    dispatch_once_f_VARIANT_armv81(&_dispatch_source_timer_telemetry_pred, 0, (uint64_t (*)(void))_dispatch_source_timer_telemetry_init_0);
  if (_dispatch_source_timer_use_telemetry)
    _dispatch_source_timer_telemetry_slow_0();
  v29 = (void *)atomic_exchange_explicit((atomic_ullong *volatile)(v8 + 104), (unint64_t)v4, memory_order_release);
  if (v29)
    free(v29);
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*a1 + 80))(a1, 0, 2);
}

void _dispatch_source_dispose_VARIANT_armv81(uint64_t *a1, char *a2)
{
  __swp(a1, (unsigned int *)(a1[11] + 56));
  if (a1)
    _dispatch_source_handler_dispose_0((uint64_t)a1, a2);
  __swp(a1, (unsigned int *)(a1[11] + 40));
  if (a1)
    _dispatch_source_handler_dispose_0((uint64_t)a1, a2);
  __swp(a1, (unsigned int *)(a1[11] + 48));
  if (a1)
    _dispatch_source_handler_dispose_0((uint64_t)a1, a2);
  _dispatch_unote_dispose_VARIANT_mp(a1[11]);
  a1[11] = 0;
  _dispatch_lane_class_dispose_VARIANT_armv81(a1, a2);
}

uint64_t _dispatch_source_xref_dispose_VARIANT_armv81(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 80) & 0x14000000) == 0x4000000 && *(_QWORD *)(*(_QWORD *)(a1 + 88) + 48))
    _dispatch_source_xref_dispose_VARIANT_mp_cold_1(*(_DWORD *)(a1 + 80));
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 80))(a1, 0, 2);
}

unint64_t dispatch_source_testcancel_VARIANT_armv81(uint64_t a1)
{
  return ((unint64_t)*(unsigned int *)(a1 + 80) >> 28) & 1;
}

uint64_t dispatch_source_get_mask_VARIANT_armv81(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 88);
  if ((*(_DWORD *)(a1 + 80) & 0x10000000) != 0)
    return 0;
  if ((*(_BYTE *)(v1 + 29) & 0x10) != 0)
    return 0x80000000;
  if ((*(_BYTE *)(v1 + 29) & 2) != 0)
    return *(unsigned __int8 *)(v1 + 30);
  return *(unsigned int *)(v1 + 32);
}

unint64_t dispatch_source_get_handle_VARIANT_armv81(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(a1 + 88);
  if (*(unsigned __int8 *)(v1 + 28) == 236
    && (v2 = ((unint64_t)*(unsigned __int8 *)(v1 + 30) >> 2) & 3, (_DWORD)v2 != 3))
  {
    return v2 + 1;
  }
  else
  {
    return *(unsigned int *)(v1 + 24);
  }
}

uint64_t dispatch_source_get_data_VARIANT_armv81(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 88);
  v2 = *(_BYTE *)(v1 + 29);
  if ((v2 & 0x10) != 0)
    return 0x80000000;
  v3 = *(_QWORD *)(v1 + 64);
  if ((v2 & 4) != 0)
    return v3;
  else
    return v3;
}

uint64_t dispatch_source_get_extended_data_VARIANT_armv81(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if (a3)
  {
    v4 = *(_QWORD *)(a1 + 88);
    if ((*(_BYTE *)(v4 + 29) & 4) != 0)
    {
      v7 = *(_QWORD *)(v4 + 64);
      v6 = v7;
      v5 = HIDWORD(v7);
    }
    else
    {
      v5 = 0;
      v6 = (*(_BYTE *)(v4 + 29) & 0x10) != 0 ? 0x80000000 : *(_QWORD *)(v4 + 64);
    }
    if (a3 >= 8)
    {
      *a2 = v6;
      if (a3 >= 0x10)
      {
        a2[1] = v5;
        if (a3 != 16)
          bzero(a2 + 2, a3 - 16);
      }
    }
  }
  if (a3 >= 0x10)
    return 16;
  else
    return a3;
}

uint64_t dispatch_source_merge_data_VARIANT_armv81(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  if ((*(_DWORD *)(result + 80) & 0x10800000) == 0)
  {
    v2 = *(_QWORD *)(result + 88);
    v3 = *(char *)(v2 + 28);
    switch(v3)
    {
      case -23:
        *(_QWORD *)(v2 + 72) = a2;
        break;
      case -22:
        atomic_fetch_or_explicit((atomic_ullong *volatile)(v2 + 72), a2, memory_order_relaxed);
        break;
      case -21:
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 72), a2, memory_order_relaxed);
        break;
      default:
        dispatch_source_merge_data_VARIANT_mp_cold_1(v3);
    }
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)result + 80))(result, 0, 2);
  }
  return result;
}

atomic_ullong *dispatch_source_set_event_handler_VARIANT_armv81(uint64_t a1, uint64_t (**a2)())
{
  return _dispatch_source_set_handler_0(a1, a2, 0, 1);
}

atomic_ullong *_dispatch_source_set_handler_0(uint64_t a1, uint64_t (**aBlock)(), uint64_t a3, int a4)
{
  unint64_t StatusReg;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v21;
  const char *v22;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v9 = *(uint64_t **)(StatusReg + 176);
  if (v9)
  {
    *(_QWORD *)(StatusReg + 176) = v9[2];
    if (aBlock)
      goto LABEL_3;
  }
  else
  {
    v9 = (uint64_t *)_dispatch_continuation_alloc_from_heap_VARIANT_armv81();
    if (aBlock)
    {
LABEL_3:
      v10 = 4 * (a3 != 0);
      if (a4)
      {
        v11 = _dispatch_Block_copy(aBlock);
        v12 = v10 | 0x110;
        v13 = aBlock[2];
        if (v13 == ___dispatch_block_create_block_invoke)
        {
          *v9 = v12;
          v9[5] = (uint64_t)v11;
          _dispatch_continuation_init_slow_VARIANT_armv81(v9, (atomic_uint *)a1, 1073741888);
        }
        else
        {
          if (a3)
            v13 = (uint64_t (*)())_dispatch_call_block_and_release;
          v9[4] = (uint64_t)v13;
          v9[5] = (uint64_t)v11;
          v9[3] = 0;
          *v9 = v12;
          v9[1] = 0;
        }
      }
      else
      {
        v14 = *(_QWORD *)(a1 + 32);
        v9[4] = (uint64_t)aBlock;
        v9[5] = v14;
        v9[3] = 0;
        *v9 = v10 | 0x140;
        v9[1] = 0;
      }
      goto LABEL_11;
    }
  }
  *v9 = 256;
  v9[4] = 0;
LABEL_11:
  v15 = *(_QWORD *)(a1 + 56);
  do
  {
    if ((~v15 & 0x180000000000000) != 0)
    {
      v21 = *(_DWORD *)(a1 + 80);
      if ((v21 & 0x4000000) != 0)
      {
        qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot change a handler of this source after it has been activated";
        qword_1EDF52D38 = a3;
        __break(1u);
      }
      else
      {
        if ((v21 & 0x10000000) != 0)
        {
LABEL_32:
          v9[6] = a3;
          return _dispatch_barrier_trysync_or_async_f_VARIANT_armv81((atomic_ullong *)a1, (uint64_t)v9, (uint64_t (*)(void))_dispatch_source_set_handler_slow_0, 0);
        }
        if (!MEMORY[0xFFFFFC100])
        {
LABEL_30:
          if (a3 == 2 || !aBlock)
          {
            if (a3 == 2)
              v22 = "Setting registration handler after the source has been activated";
            else
              v22 = "Clearing handler after the source has been activated";
            _dispatch_bug_deprecated(v22);
          }
          goto LABEL_32;
        }
      }
      kdebug_trace();
      goto LABEL_30;
    }
    v16 = v15;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), (unint64_t *)&v15, v15 + 0x400000000000000, memory_order_relaxed, memory_order_relaxed);
  }
  while (v15 != v16);
  if ((v16 & 0x200000000000000) != 0)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Too many calls to dispatch_suspend() prior to calling dispa"
                               "tch_set_target_queue() or dispatch_set_*_handler()";
    __break(1u);
LABEL_34:
    _dispatch_continuation_free_to_cache_limit_VARIANT_armv81((uint64_t)v9);
    goto LABEL_23;
  }
  if (v9[4])
  {
    if ((*(_BYTE *)v9 & 0x40) != 0)
      v9[5] = *(_QWORD *)(a1 + 32);
    goto LABEL_24;
  }
  v17 = *(_QWORD *)(StatusReg + 176);
  if (v17)
    v18 = *(_DWORD *)(v17 + 8) + 1;
  else
    v18 = 1;
  if (v18 > _dispatch_continuation_cache_limit)
    goto LABEL_34;
  v9[2] = v17;
  *((_DWORD *)v9 + 2) = v18;
  *(_QWORD *)(StatusReg + 176) = v9;
LABEL_23:
  v9 = 0;
LABEL_24:
  v19 = atomic_exchange_explicit((atomic_ullong *volatile)(*(_QWORD *)(a1 + 88) + 8 * a3 + 40), (unint64_t)v9, memory_order_release);
  if (v19)
    _dispatch_source_handler_dispose_0(v19, (const char *)aBlock);
  return (atomic_ullong *)_dispatch_queue_resume_VARIANT_armv81(a1, 0);
}

atomic_ullong *dispatch_source_set_event_handler_f_VARIANT_armv81(uint64_t a1, uint64_t (**a2)())
{
  return _dispatch_source_set_handler_0(a1, a2, 0, 0);
}

atomic_ullong *dispatch_source_set_cancel_handler_VARIANT_armv81(uint64_t a1, uint64_t (**a2)())
{
  return _dispatch_source_set_handler_0(a1, a2, 1, 1);
}

atomic_ullong *dispatch_source_set_mandatory_cancel_handler_VARIANT_armv81(uint64_t a1, uint64_t (**a2)())
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  BOOL v5;

  v2 = *(unsigned int *)(a1 + 80);
  do
  {
    v3 = v2 & 0xFBBFFFFF | 0x4000000;
    if (v3 == (_DWORD)v2)
      break;
    v4 = v2;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 80), (unsigned int *)&v4, v3, memory_order_relaxed, memory_order_relaxed);
    v5 = (_DWORD)v4 == (_DWORD)v2;
    v2 = v4;
  }
  while (!v5);
  return _dispatch_source_set_handler_0(a1, a2, 1, 1);
}

atomic_ullong *dispatch_source_set_cancel_handler_f_VARIANT_armv81(uint64_t a1, uint64_t (**a2)())
{
  return _dispatch_source_set_handler_0(a1, a2, 1, 0);
}

atomic_ullong *dispatch_source_set_mandatory_cancel_handler_f_VARIANT_armv81(uint64_t a1, uint64_t (**a2)())
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  BOOL v5;

  v2 = *(unsigned int *)(a1 + 80);
  do
  {
    v3 = v2 & 0xFBBFFFFF | 0x4000000;
    if (v3 == (_DWORD)v2)
      break;
    v4 = v2;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 80), (unsigned int *)&v4, v3, memory_order_relaxed, memory_order_relaxed);
    v5 = (_DWORD)v4 == (_DWORD)v2;
    v2 = v4;
  }
  while (!v5);
  return _dispatch_source_set_handler_0(a1, a2, 1, 0);
}

atomic_ullong *dispatch_source_set_registration_handler_VARIANT_armv81(uint64_t a1, uint64_t (**a2)())
{
  return _dispatch_source_set_handler_0(a1, a2, 2, 1);
}

atomic_ullong *dispatch_source_set_registration_handler_f_VARIANT_armv81(uint64_t a1, uint64_t (**a2)())
{
  return _dispatch_source_set_handler_0(a1, a2, 2, 0);
}

BOOL _dispatch_source_will_reenable_kevent_4NW_VARIANT_armv81(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 56);
  if (((v1 ^ *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24)) & 0xFFFFFFFC) != 0)
    _dispatch_source_will_reenable_kevent_4NW_VARIANT_armv81_cold_1();
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16);
  return (v2 & 3) == 0 && v2 != 0;
}

atomic_uint *_dispatch_source_activate_VARIANT_armv81(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  atomic_uint *result;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;

  v3 = *(_QWORD *)(a1 + 88);
  v12 = 0;
  if ((*(_DWORD *)(a1 + 80) & 0x10000000) != 0)
  {
    *(_WORD *)(a1 + 116) |= 1u;
    return _dispatch_source_refs_finalize_unregistration_0((atomic_uint *)a1, a2);
  }
  v4 = *(uint64_t **)(v3 + 40);
  if (v4)
  {
    v5 = *v4;
    if ((unint64_t)*v4 < 0x1000)
    {
      if ((v5 & 2) == 0)
        goto LABEL_9;
    }
    else if ((*(_QWORD *)(v5 + 40) & 0xF0) != 0x10 || (v4[10] & 0x80000) == 0)
    {
      goto LABEL_9;
    }
    atomic_fetch_or_explicit((atomic_uint *volatile)(a1 + 80), 0x80000u, memory_order_relaxed);
LABEL_9:
    v6 = v4[1];
    if ((v6 & 0x10000000) != 0 || (v7 = *(_DWORD *)(a1 + 84), (v7 & 0x20000000) != 0) || (v7 & 0x44000FFF) == 0)
    {
      v8 = (__clz(__rbit32((v6 >> 8) & 0x3FFF)) << 8) + 256;
      if (((v6 >> 8) & 0x3FFF) == 0)
        v8 = 0;
      *(_DWORD *)(a1 + 84) = v8 & 0xFFFFFF00 | v4[1];
    }
    if ((*(_BYTE *)v4 & 0x40) != 0)
      v4[5] = *(_QWORD *)(a1 + 32);
    goto LABEL_17;
  }
  _dispatch_bug_deprecated("dispatch source activated with no event handler set");
LABEL_17:
  result = (atomic_uint *)_dispatch_lane_activate_VARIANT_armv81(a1);
  if ((*(_BYTE *)(v3 + 29) & 3) != 0 && (*(_WORD *)(a1 + 116) & 1) == 0)
  {
    result = (atomic_uint *)_dispatch_queue_compute_priority_and_wlh_VARIANT_armv81(a1, (uint64_t *)&v12);
    if ((_DWORD)result)
    {
      v10 = result;
      v11 = (uint64_t)v12;
      if (v12 != (_QWORD *)-4
        && v12
        && *(_BYTE *)(*v12 + 40) == 18
        && *(unsigned __int8 *)(v3 + 28) == 236
        && *(_DWORD *)(v3 + 24) <= 5u)
      {
        if (!v12[6])
        {
          *(_QWORD *)(v11 + 48) = _dispatch_calloc(6uLL, 0x20uLL);
          v11 = (uint64_t)v12;
        }
        *(_BYTE *)(v3 + 29) |= 1u;
        if (v11 != -4
          && v11
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 96), 1u, memory_order_relaxed) & 0x80000000) != 0)
        {
          dispatch_set_target_queue_VARIANT_mp_cold_2();
        }
        *(_QWORD *)(v3 + 16) = v11;
      }
      return (atomic_uint *)_dispatch_source_install_0(a1, v11, v10);
    }
  }
  return result;
}

atomic_uint *_dispatch_source_refs_finalize_unregistration_0(atomic_uint *a1, const char *a2)
{
  atomic_uint *result;
  atomic_uint v4;
  atomic_uint v5;
  unsigned int v6;
  unsigned int v7;

  v5 = a1[20];
  result = a1 + 20;
  v4 = v5;
  do
  {
    v6 = v4;
    v7 = v4 & 0x1FFFFFFF | 0x80000000;
    if (v7 == v4)
      break;
    atomic_compare_exchange_strong_explicit(result, (unsigned int *)&v4, v7, memory_order_relaxed, memory_order_relaxed);
  }
  while (v4 != v6);
  if ((v6 & 0x80000000) != 0)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Source finalized twice";
    qword_1EDF52D38 = v6;
    __break(1u);
  }
  else
  {
    if ((v6 & 0x20000000) != 0)
      _dispatch_wake_by_address_VARIANT_mp();
    return (atomic_uint *)_os_object_release_internal_VARIANT_armv81(a1, a2);
  }
  return result;
}

uint64_t _dispatch_source_install_0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t result;
  const char *v6;

  v4 = *(_QWORD *)(a1 + 88);
  *(_WORD *)(a1 + 116) |= 1u;
  result = _dispatch_unote_register_VARIANT_armv81(v4, a2, a3);
  if ((result & 1) == 0)
    return (uint64_t)_dispatch_source_refs_finalize_unregistration_0((atomic_uint *)a1, v6);
  return result;
}

void _dispatch_source_invoke_VARIANT_armv81(uint64_t a1, const char *a2, int a3)
{
  uint64_t v4;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v26;
  unsigned int v27;
  __objc2_class **v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  const char *v34;
  int v35;
  int v36;
  char v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  __uint64_t *v43;
  unint64_t v44;
  unsigned int v45;
  __uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  __int16 v59;
  BOOL v60;
  __uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t StatusReg;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unint64_t i;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  __uint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  void *contexta;
  void *context;
  uint64_t v95;
  unint64_t *v96;
  __int128 v98;
  uint64_t v99;

  v4 = (uint64_t)a2;
  v99 = 0;
  if ((a3 & 3) == 0)
    *(_QWORD *)(a1 + 16) = -1985229329;
  if ((a3 & 2) != 0)
  {
    v99 = 0x40020000000001;
    v6 = a3 & 0x40000;
  }
  else
  {
    v68 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) - 0x20000000000;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v70 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
    v6 = a3 & 0x40000;
    v71 = 0xFFE00000FFFFFFFCLL;
    if ((a3 & 0x40000) != 0)
    {
      v72 = 0x4000000000;
    }
    else
    {
      v71 = 0xFFE00040FFFFFFFCLL;
      v72 = 1;
    }
    if ((a3 & 1) != 0)
      v73 = 0xFFE00040FFFFFFFCLL;
    else
      v73 = v71;
    v74 = *(_DWORD *)(StatusReg + 200);
    v75 = (v74 >> 8) & 0xF;
    v76 = (unsigned __int16)v74 >> 12;
    v77 = HIWORD(v74) & 0xF;
    if (v75 <= v76)
      v75 = v76;
    if (v75 > v77)
      v77 = v75;
LABEL_210:
    for (i = *(_QWORD *)(a1 + 56); ; i = v83)
    {
      while ((i & v73) != 0)
      {
        if ((a3 & 1) != 0
          || (v84 = i,
              atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v84, i ^ v72, memory_order_acquire, memory_order_acquire), v84 == i))
        {
          v99 = 0;
          goto LABEL_229;
        }
        i = v84;
      }
      if ((i & 0x1000000000) != 0)
      {
        v79 = HIDWORD(i) & 7;
        if (v79 > v77)
        {
          _pthread_workqueue_override_start_direct();
          v85 = *(_DWORD *)(StatusReg + 200);
          v77 = v79;
          if ((HIWORD(v85) & 0xF) < v79)
          {
            *(_QWORD *)(StatusReg + 200) = v85 & 0xFFF0FFFF | ((_DWORD)v79 << 16);
            v77 = v79;
          }
          goto LABEL_210;
        }
      }
      v80 = (i >> 40) & 1;
      if (!((v68 + i) >> 53))
        LODWORD(v80) = 1;
      v81 = (_DWORD)v80 ? 0x60000000000000 : 0x20000000000000;
      v82 = v70 | i & 0x7700000001 | v81;
      v83 = i;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v83, v82, memory_order_acquire, memory_order_acquire);
      if (v83 == i)
        break;
    }
    v86 = 0x60000000000000;
    if ((a3 & 1) == 0)
      v86 = v72 | 0x60000000000000;
    v99 = (v82 & v86) - (i & 0x3FFE0000000000);
    v4 = (uint64_t)a2;
    if (!v99)
      goto LABEL_229;
  }
  if ((_DWORD)v6)
  {
    v95 = 0;
    goto LABEL_21;
  }
  v7 = *(_DWORD *)(a1 + 84);
  v8 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v9 = *(_QWORD *)(v8 + 200);
  if ((_DWORD)v9)
  {
    v10 = (unsigned __int16)v7 >> 12;
    v11 = v7 & 0xFFF;
    if ((v7 & 0xFFF) != 0)
    {
      if (((unsigned __int16)v9 & 0xFFFu) > v11)
        v11 = v9 & 0xFFF;
      if (v10 <= v11 >> 8)
        v12 = 0x40000000;
      else
        v12 = 1140912128;
      v13 = v12 & v7;
      v14 = v9 & 0x880F0000 | v11;
    }
    else
    {
      v15 = v9 | 0x40000000;
      if ((v9 & 0xFFF) == 0)
        v15 = *(_QWORD *)(v8 + 200);
      if (v10 <= ((v15 >> 8) & 0xF))
        goto LABEL_20;
      v14 = v15 & 0xFFFF0FFF;
      v13 = v7 & 0x400F000;
    }
    v15 = v14 | v13;
  }
  else
  {
    v15 = v7 & 0xFFF0FFFF;
  }
LABEL_20:
  *(_QWORD *)(v8 + 200) = v15;
  v95 = v9 & 0xFFF0FFFF;
LABEL_21:
  if ((a3 & 0x100000) != 0 && (*(_DWORD *)(a1 + 80) & 0x400000) != 0)
    atomic_fetch_and_explicit((atomic_uint *volatile)(a1 + 80), 0xFFBFFFFF, memory_order_relaxed);
  if (((*(_DWORD *)(a1 + 80) << 8) & 0x3000000) != 0)
    v16 = (*(_DWORD *)(a1 + 80) << 8) & 0x3000000 | a3 & 0xFCFFFFF7 | 8;
  else
    v16 = a3 | 8;
  v17 = v16 & 0x1000002;
  v18 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (2)
  {
    while (2)
    {
      if (v17 == 2)
        _dispatch_last_resort_autorelease_pool_push(v4);
      v19 = *(_QWORD *)(v18 + 160);
      v96 = (unint64_t *)(v18 + 160);
      v20 = *(_QWORD *)(a1 + 88);
      if ((v16 & 0x40000) == 0)
      {
        v21 = *(_QWORD *)(v18 + 232);
        v22 = v21 ? *(_QWORD *)(v21 + 24) : -4;
        v23 = *(_QWORD *)(v20 + 16) & 0xFFFFFFFFFFFFFFFCLL;
        v24 = v23 == -4 || v23 == 0;
        if (!v24 && v22 != v23)
          _dispatch_source_handle_wlh_change_0(a1);
      }
      if (*(_QWORD *)(a1 + 48))
      {
        v26 = _dispatch_lane_serial_drain_VARIANT_armv81(a1, v4, v16 | 0x4000000, &v99);
        v27 = v16 & 0xFBFFFFFF;
      }
      else
      {
        v26 = 0;
        v27 = v16;
      }
      v28 = &_dispatch_mgr_q;
      if ((*(_BYTE *)(v20 + 29) & 1) != 0)
        v28 = *(__objc2_class ***)(a1 + 24);
      if ((*(_WORD *)(a1 + 116) & 1) == 0)
      {
        if ((__objc2_class **)v19 != v28)
        {
LABEL_49:
          v26 = (unint64_t)v28;
          goto LABEL_104;
        }
        if ((v27 & 0x10000) != 0)
          v29 = *(_DWORD *)(v18 + 200);
        else
          v29 = 0x2000000;
        v30 = *(_QWORD *)(v18 + 232);
        if (v30)
          v31 = *(_QWORD *)(v30 + 24);
        else
          v31 = -4;
        _dispatch_source_install_0(a1, v31, v29);
      }
      if (*(_QWORD *)(a1 + 56) >> 55)
      {
LABEL_153:
        v26 = *(_QWORD *)(a1 + 24);
        goto LABEL_104;
      }
      if ((*(_BYTE *)(v20 + 29) & 2) != 0 && *(_QWORD *)(v20 + 104) && (*(_DWORD *)(a1 + 80) & 0x10800000) == 0)
      {
        if ((__objc2_class **)v19 != v28)
          goto LABEL_49;
        _dispatch_timer_unote_configure_VARIANT_armv81(*(unsigned int **)(a1 + 88));
      }
      if (*(_QWORD *)(v20 + 56))
      {
        v6 = v19;
        v32 = v27;
        v33 = v26;
        v26 = *(_QWORD *)(a1 + 24);
        if (v6 != v26)
          goto LABEL_104;
        __swp(v26, (unsigned int *)(*(_QWORD *)(a1 + 88) + 56));
        if ((*(_DWORD *)(a1 + 80) & 0x10800000) != 0)
        {
          if ((v32 & 0x1000000) != 0)
          {
            contexta = (void *)MEMORY[0x18D766D94]();
            _dispatch_source_handler_dispose_0(v26, v34);
            objc_autoreleasePoolPop(contexta);
          }
          else
          {
            _dispatch_source_handler_dispose_0(v26, a2);
          }
          v26 = v33;
          v27 = v32;
          v19 = v6;
        }
        else
        {
          if ((*(_BYTE *)v26 & 0x40) != 0)
            *(_QWORD *)(v26 + 40) = *(_QWORD *)(a1 + 32);
          _dispatch_continuation_pop_VARIANT_armv81(v26, 0, v32, v6);
          v26 = v33;
          v27 = v32;
          v19 = v6;
        }
      }
      if ((*(_QWORD *)(v20 + 16) & 2) != 0)
        _dispatch_source_refs_unregister_0(a1, 5);
      v35 = *(_DWORD *)(a1 + 80);
      v36 = v35 & 0x10800000;
      if ((v35 & 0x10800000) != 0)
      {
        v6 = 0;
        if ((v35 & 0x80000000) == 0)
          goto LABEL_76;
        goto LABEL_85;
      }
      if (*(_QWORD *)(v20 + 72))
      {
        context = (void *)v26;
        v26 = *(_QWORD *)(a1 + 24);
        if (v19 != v26)
          goto LABEL_104;
        v38 = *(_QWORD *)(a1 + 88);
        v39 = *(_QWORD **)(v38 + 40);
        __swp(v6, (unsigned int *)(v38 + 72));
        v40 = *(unsigned __int8 *)(*(_QWORD *)v38 + 9);
        if (v40 == 3)
        {
          v41 = ~v6;
        }
        else if (v40 == 5)
        {
          v41 = v6 >> 1;
          if ((v6 & 1) != 0)
          {
            v42 = *(_QWORD *)(a1 + 88);
            v44 = *(_QWORD *)(v42 + 80);
            v43 = (__uint64_t *)(v42 + 80);
            if (v44 <= 0x7FFFFFFFFFFFFFFELL)
            {
              v45 = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 24) / 3u;
              v90 = v6 >> 1;
              v91 = v39;
              v89 = *(_QWORD *)(a1 + 88);
              v88 = v43;
              if (v45 == 2)
                v46 = clock_gettime_nsec_np(_CLOCK_REALTIME);
              else
                v46 = v45 == 1 ? mach_continuous_time() : mach_absolute_time();
              v60 = v46 >= *v88;
              v61 = v46 - *v88;
              v41 = v6 >> 1;
              v39 = v91;
              if (v60)
              {
                v62 = *(_QWORD *)(v89 + 96);
                v63 = v61 / v62;
                if ((uint64_t)(v63 + 1 + v90) >= 0)
                  v64 = v63 + 1;
                else
                  v64 = v90 ^ 0x7FFFFFFFFFFFFFFFLL;
                if (v62 > 0x7FFFFFFFFFFFFFFELL)
                {
                  *v88 = -1;
                  v88[1] = -1;
                }
                else
                {
                  v65 = v64 * v62;
                  *v88 += v65;
                  *(_QWORD *)(v89 + 88) += v65;
                }
                v41 = v64 + v90;
              }
            }
          }
        }
        else
        {
          v41 = v6;
          if (!v6)
          {
            if (*(unsigned __int8 *)(v38 + 28) == 233)
              goto LABEL_160;
            *(_QWORD *)(v38 + 64) = 0;
            if (v39)
              goto LABEL_149;
            goto LABEL_185;
          }
        }
        *(_QWORD *)(v38 + 64) = v41;
        if (v39)
        {
          if (v6)
          {
            if (*(unsigned __int8 *)(v38 + 28) == 242)
            {
              v92 = v39;
              _dispatch_continuation_get_function_symbol(v39);
              v39 = v92;
              if (MEMORY[0xFFFFFC100])
              {
                kdebug_trace();
                v39 = v92;
              }
            }
            _dispatch_continuation_pop_VARIANT_armv81((uint64_t)v39, 0, v27, v19);
            if (*(unsigned __int8 *)(v38 + 28) == 242 && MEMORY[0xFFFFFC100])
              v57 = kdebug_trace();
            if ((*(_BYTE *)(v38 + 29) & 2) != 0)
            {
              if ((v6 & 1) != 0 && *(_QWORD *)(v38 + 104))
                _dispatch_timer_unote_configure_VARIANT_armv81(*(unsigned int **)(a1 + 88));
              if ((*(_BYTE *)(v38 + 30) & 0x40) != 0)
              {
                if ((v27 & 0x1000000) != 0)
                {
                  v57 = MEMORY[0x18D766D94]();
                  v58 = (void *)v57;
                }
                else
                {
                  v58 = 0;
                }
                __swp(v57, (unsigned int *)(v38 + 40));
                if (v57)
                  _dispatch_source_handler_dispose_0(v57, a2);
                if (v58)
                  objc_autoreleasePoolPop(v58);
                dispatch_release_VARIANT_armv81((atomic_uint *)a1, a2);
              }
            }
            goto LABEL_160;
          }
LABEL_149:
          _dispatch_bug(586, 0);
          goto LABEL_160;
        }
LABEL_185:
        if (MEMORY[0xFFFFFC100])
          kdebug_trace();
LABEL_160:
        v35 = *(_DWORD *)(a1 + 80);
        if ((v35 & 0x90000000) != 0)
        {
          v6 = 0;
          v26 = (unint64_t)context;
        }
        else
        {
          v26 = (unint64_t)context;
          if (*(_QWORD *)(v19 + 24))
            v6 = 1;
          else
            v6 = *(_DWORD *)(v19 + 84) >= 0;
        }
        *(_WORD *)(a1 + 116) |= 2u;
        v36 = v35 & 0x10800000;
        if ((v35 & 0x80000000) == 0)
        {
LABEL_76:
          if (v36)
          {
            if (((*(_BYTE *)(v20 + 29) & 2) == 0 || (*(_QWORD *)(v20 + 16) & 1) != 0) && (__objc2_class **)v19 != v28)
              goto LABEL_49;
            if ((v35 & 0x40000000) != 0)
              v37 = 1;
            else
              v37 = 3;
            _dispatch_source_refs_unregister_0(a1, v37);
            v35 = *(_DWORD *)(a1 + 80);
            if ((v35 & 0x80000000) == 0)
            {
              if (!v26)
                v26 = -1;
              goto LABEL_104;
            }
            v36 = v35 & 0x10800000;
          }
        }
LABEL_85:
        if (v35 < 0 && v36)
        {
          if (v19 != *(_QWORD *)(a1 + 24) && (*(_QWORD *)(v20 + 40) || *(_QWORD *)(v20 + 48) || *(_QWORD *)(v20 + 56)))
          {
            v6 = 0;
            v26 = *(_QWORD *)(a1 + 24);
          }
          else
          {
            _dispatch_source_cancel_callout_0(a1, (const char *)v19, v27);
            v6 = 0;
            v35 = *(_DWORD *)(a1 + 80);
          }
        }
        goto LABEL_103;
      }
      v6 = 0;
LABEL_103:
      if ((v35 & 0x10800000) == 0)
      {
        if ((*(_BYTE *)(v20 + 29) & 2) != 0)
        {
          if (!*(_QWORD *)(v20 + 104))
          {
            v56 = *(_QWORD *)(v20 + 16);
            if (!v56 || (v56 & 3) != 0 || *(_QWORD *)(v20 + 80) > 0x7FFFFFFFFFFFFFFEuLL)
              goto LABEL_104;
          }
        }
        else
        {
          v52 = *(_QWORD *)(v20 + 16);
          if (!v52 || (v52 & 3) != 0)
            goto LABEL_104;
        }
        v53 = v26;
        v26 = (unint64_t)v28;
        if ((__objc2_class **)v19 == v28)
        {
          if (!(*(_QWORD *)(a1 + 56) >> 55))
          {
            v26 = v53;
            if ((*(_BYTE *)(v20 + 29) & 1) == 0 || (~*(_QWORD *)(v20 + 16) & 0xFFFFFFFFFFFFFFFCLL) != 0)
            {
              _dispatch_unote_resume_VARIANT_armv81(v20);
              if ((v6 & 1) == 0)
              {
                if (*(_QWORD *)(v18 + 40))
                {
                  v54 = *(_QWORD *)(v18 + 232);
                  if (v54)
                  {
                    v55 = *(_QWORD *)(v54 + 24);
                    if (v55 != -4 && v55 == (*(_QWORD *)(v20 + 16) & 0xFFFFFFFFFFFFFFFCLL))
                      _dispatch_event_loop_drain_VARIANT_armv81(1);
                  }
                }
              }
              goto LABEL_104;
            }
            v59 = *(_WORD *)(a1 + 116);
            if ((v59 & 2) != 0)
            {
              *(_WORD *)(a1 + 116) = v59 & 0xFFFD;
              _dispatch_unote_resume_VARIANT_armv81(v20);
            }
            if (!(_DWORD)v6)
              goto LABEL_104;
          }
          goto LABEL_153;
        }
      }
LABEL_104:
      v17 = v16 & 0x1000002;
      v4 = (uint64_t)a2;
      if ((v16 & 0x1000002) == 2)
      {
        v6 = v18 + 160;
        v98 = *(_OWORD *)v96;
        *(_QWORD *)(v18 + 160) = a1;
        *(_QWORD *)(v18 + 168) = &v98;
        _dispatch_last_resort_autorelease_pool_pop((uint64_t)a2);
        *(_OWORD *)v96 = v98;
      }
      if (v26 + 1 > 1)
        goto LABEL_195;
      v47 = v99;
      v48 = *(_QWORD *)(a1 + 56);
      while (1)
      {
        v49 = v48;
        v50 = v48 - v47;
        v51 = v50 & 0xFFFFFFF700000001;
        if (!(v49 >> 55))
          break;
LABEL_112:
        v48 = v49;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v48, v51, memory_order_release, memory_order_relaxed);
        if (v48 == v49)
        {
          if ((~v49 & 0x1800000000) == 0)
          {
            v66 = HIDWORD(v49) & 7;
            v67 = *(_DWORD *)(v18 + 200);
            if ((HIWORD(v67) & 0xF) < v66)
              *(_QWORD *)(v18 + 200) = v67 & 0xFFF0FFFF | ((_DWORD)v66 << 16);
          }
          v26 = 0;
          v99 = 0;
          goto LABEL_195;
        }
      }
      if ((v49 & 0x8000000000) == 0)
      {
        if (v26)
          v51 = v50 & 0xFFFFFF7700000001 | 0x8000000000;
        else
          v51 = v50 & 0xFFFFFFF000000001;
        goto LABEL_112;
      }
      atomic_fetch_xor_explicit((atomic_ullong *volatile)(a1 + 56), 0x8000000000uLL, memory_order_acquire);
      if ((a3 & 1) != 0)
        continue;
      break;
    }
    v26 = *v96;
    if ((*(_QWORD *)(*(_QWORD *)*v96 + 40) & 0x10000) != 0)
      continue;
    break;
  }
LABEL_195:
  if ((v16 & 0x40000) == 0)
    *(_QWORD *)(v18 + 200) = *(_QWORD *)(v18 + 200) & 0xF0000 | v95;
  if (!v26)
  {
LABEL_229:
    _os_object_release_internal_n_VARIANT_armv81((void *)a1, (const char *)2);
    if ((a3 & 0x100000) != 0)
      goto LABEL_230;
    return;
  }
  _dispatch_queue_invoke_finish_VARIANT_armv81((atomic_ullong *)a1, (uint64_t)a2, (__objc2_class **)v26, v99);
  if ((a3 & 0x100000) == 0)
    return;
LABEL_230:
  v87 = *(_QWORD *)(*(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 216) + 48);
  if (v87)
  {
    if (*(_BYTE *)(v87 + 6))
      _dispatch_event_loop_drain_timers_VARIANT_armv81(v87, 6u);
  }
}

void _dispatch_source_wakeup_VARIANT_armv81(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_DWORD *)(a1 + 80);
  v5 = *(_BYTE *)(v3 + 29);
  if ((*(_WORD *)(a1 + 116) & 1) == 0)
    goto LABEL_2;
  if ((v4 & 0x10800000) != 0)
  {
    if (*(_QWORD *)(v3 + 56) | *(_QWORD *)(v3 + 16) & 2)
    {
LABEL_27:
      if (*(__objc2_class ***)(a1 + 24) == &_dispatch_mgr_q)
        v6 = (uint64_t)&_dispatch_mgr_q;
      else
        v6 = 1;
      goto LABEL_4;
    }
    if (v4 < 0)
    {
      if (*(_QWORD *)(v3 + 40) || *(_QWORD *)(v3 + 48) || *(_QWORD *)(v3 + 56))
        goto LABEL_27;
      goto LABEL_12;
    }
    if ((*(_BYTE *)(v3 + 29) & 2) != 0 && (*(_QWORD *)(v3 + 16) & 1) == 0)
      goto LABEL_27;
    if ((a3 & 0x10) == 0 && (v4 & 0x40000000) != 0)
    {
LABEL_12:
      if (!*(_QWORD *)(a1 + 48))
      {
        v6 = 0;
        goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else
  {
    if ((*(_BYTE *)(v3 + 29) & 2) != 0 && *(_QWORD *)(v3 + 104))
      goto LABEL_2;
    if (*(_QWORD *)(v3 + 56) | *(_QWORD *)(v3 + 16) & 2 || *(_QWORD *)(v3 + 72))
      goto LABEL_27;
    if ((*(_BYTE *)(v3 + 29) & 2) != 0)
    {
      if (*(_QWORD *)(v3 + 104))
        goto LABEL_2;
      v9 = *(_QWORD *)(v3 + 16);
      if (v9)
      {
        if ((v9 & 3) == 0 && *(_QWORD *)(v3 + 80) < 0x7FFFFFFFFFFFFFFFuLL)
          goto LABEL_2;
      }
      goto LABEL_12;
    }
    v7 = *(_QWORD *)(v3 + 16);
    if (v7)
      v8 = (v7 & 3) == 0;
    else
      v8 = 0;
    if (!v8)
      goto LABEL_12;
  }
LABEL_2:
  if ((v5 & 1) != 0)
    goto LABEL_27;
  v6 = (uint64_t)&_dispatch_mgr_q;
  if (&_dispatch_mgr_q == (__objc2_class **)1)
    goto LABEL_27;
LABEL_4:
  _dispatch_queue_wakeup_VARIANT_armv81(a1, a2, a3, v6);
}

void *dispatch_source_cancel_VARIANT_armv81(atomic_uint *a1)
{
  if (a1[2] != 0x7FFFFFFF && (int)atomic_fetch_add_explicit(a1 + 2, 2u, memory_order_relaxed) <= 0)
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  if ((atomic_fetch_or_explicit(a1 + 20, 0x10000000u, memory_order_relaxed) & 0x10000000) != 0)
    return _os_object_release_internal_n_VARIANT_armv81(a1, (const char *)2);
  else
    return (void *)(*(uint64_t (**)(atomic_uint *, _QWORD, uint64_t))(*(_QWORD *)a1 + 80))(a1, 0, 3);
}

void dispatch_source_cancel_and_wait_VARIANT_armv81(uint64_t a1)
{
  uint64_t v2;
  int v3;
  atomic_uint *v4;
  int v5;
  unsigned int v6;
  unint64_t StatusReg;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(v2 + 48))
    dispatch_source_cancel_and_wait_VARIANT_armv81_cold_4(a1);
  v4 = (atomic_uint *)(a1 + 80);
  v3 = *(_DWORD *)(a1 + 80);
  do
  {
    v5 = v3;
    v6 = v3 | 0x10000000;
    if ((v3 & 0x20000000) != 0)
      break;
    if ((v3 & 0x80000000) == 0 && ((v3 & 0x40000000) != 0 || (*(_BYTE *)(v2 + 29) & 3) != 1))
      v6 = v3 | 0x30000000;
    atomic_compare_exchange_strong_explicit(v4, (unsigned int *)&v3, v6, memory_order_relaxed, memory_order_relaxed);
  }
  while (v3 != v5);
  if ((v5 & 0x800000) != 0)
    dispatch_source_cancel_and_wait_VARIANT_armv81_cold_3(a1);
  if (v5 < 0)
    return;
  if ((v6 & 0x20000000) != 0)
  {
LABEL_29:
    v14 = (*(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) >> 8) & 0x3FFF;
    v13 = v14 == 0;
    v15 = __clz(__rbit32(v14));
    if (v13)
      v16 = 0;
    else
      v16 = v15 + 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v16, 2);
    dispatch_activate_VARIANT_armv81(a1);
LABEL_33:
    v17 = *v4;
    if ((v17 & 0x80000000) == 0)
    {
      do
      {
        if ((v17 & 0x20000000) != 0
          || (v18 = v17,
              atomic_compare_exchange_strong_explicit(v4, (unsigned int *)&v18, v17 | 0x20000000, memory_order_relaxed, memory_order_relaxed), v13 = (_DWORD)v18 == (_DWORD)v17, LODWORD(v17) = v17 | 0x20000000, v13))
        {
          _dispatch_wait_on_address_VARIANT_armv81(a1 + 80, v17, -1);
          v18 = *v4;
        }
        v17 = v18;
      }
      while ((v18 & 0x80000000) == 0);
    }
    return;
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v8 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL;
  v9 = *(_QWORD *)(a1 + 56);
  while (1)
  {
    v10 = v9;
    v11 = v9 & 0xFFE00000FFFFFFFCLL;
    if ((v9 & 0xFFE00000FFFFFFFCLL) != 0)
      break;
    v12 = v8 | v9 & 0x7700000001 | 0x60000000000000;
LABEL_15:
    atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 56), &v9, v12);
    if (v9 == v10)
    {
      if (!(v10 >> 55))
      {
        if (!v11)
        {
          if ((*v4 & 0x80000000) == 0)
            _dispatch_source_refs_unregister_0(a1, 3);
          if (*v4 < 0)
            _dispatch_source_cancel_callout_0(a1, 0, 0);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 80))(a1, 0, 20);
          goto LABEL_33;
        }
        goto LABEL_28;
      }
      goto LABEL_35;
    }
  }
  if ((v5 & 0x10000000) == 0)
  {
    v12 = v9 | 0x8000000000;
    goto LABEL_15;
  }
  if (!(v9 >> 55))
  {
LABEL_28:
    if (((v10 ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) == 0)
      dispatch_source_cancel_and_wait_VARIANT_armv81_cold_2(a1);
    goto LABEL_29;
  }
LABEL_35:
  if (v10 >> 58)
    dispatch_source_cancel_and_wait_VARIANT_armv81_cold_1(a1);
  dispatch_activate_VARIANT_armv81(a1);
}

atomic_uint *_dispatch_source_refs_unregister_0(uint64_t a1, char a2)
{
  atomic_uint *result;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = (atomic_uint *)_dispatch_unote_unregister_VARIANT_armv81(*(_QWORD *)(a1 + 88), a2);
  if ((_DWORD)result)
    return _dispatch_source_refs_finalize_unregistration_0((atomic_uint *)a1, v4);
  v5 = *(unsigned int *)(a1 + 80);
  do
  {
    if (v5 >> 30)
      break;
    v6 = v5;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 80), (unsigned int *)&v6, v5 | 0x40000000, memory_order_relaxed, memory_order_relaxed);
    v7 = (_DWORD)v6 == (_DWORD)v5;
    v5 = v6;
  }
  while (!v7);
  return result;
}

void _dispatch_source_cancel_callout_0(uint64_t a1, const char *a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = a1;
  v7 = *(_QWORD *)(a1 + 88);
  if ((a3 & 0x1000000) != 0)
  {
    a1 = MEMORY[0x18D766D94]();
    v8 = (void *)a1;
  }
  else
  {
    v8 = 0;
  }
  __swp(v3, (unsigned int *)(v7 + 48));
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 72) = 0;
  __swp(a1, (unsigned int *)(v7 + 40));
  if (a1)
    _dispatch_source_handler_dispose_0(a1, a2);
  __swp(a1, (unsigned int *)(v7 + 56));
  if (a1)
    _dispatch_source_handler_dispose_0(a1, a2);
  if (!v3)
  {
LABEL_11:
    if (!v8)
      return;
    goto LABEL_12;
  }
  if ((*(_DWORD *)(v6 + 80) & 0x10000000) == 0)
  {
    _dispatch_source_handler_dispose_0(v3, a2);
    goto LABEL_11;
  }
  if ((*(_BYTE *)v3 & 0x40) != 0)
    *(_QWORD *)(v3 + 40) = *(_QWORD *)(v6 + 32);
  _dispatch_continuation_pop_VARIANT_armv81(v3, 0, a3 & 0xFEFFFFFF, (uint64_t)a2);
  if (v8)
LABEL_12:
    objc_autoreleasePoolPop(v8);
}

uint64_t _dispatch_source_merge_evt_VARIANT_armv81(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4)
{
  __int16 v5;
  _DWORD *v7;
  unsigned int v8;
  uint64_t v9;

  v5 = (__int16)a2;
  v7 = (_DWORD *)~*(_QWORD *)(a1 + 8);
  if (((unsigned __int16)a2 & 0x100) == 0 && !*(_QWORD *)(a1 + 16) && (*(_BYTE *)(a1 + 29) & 2) == 0)
    _dispatch_source_refs_finalize_unregistration_0((atomic_uint *)~*(_QWORD *)(a1 + 8), a2);
  if ((v5 & 0x200) != 0)
  {
    if ((v7[20] & 0x4000000) != 0)
      _dispatch_source_merge_evt_VARIANT_mp_cold_1(a1);
    _dispatch_bug_kevent_vanished(a1);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v8 = __clz(__rbit32((a4 >> 8) & 0x3FFF));
  if (((a4 >> 8) & 0x3FFF) != 0)
    v9 = v8 + 1;
  else
    v9 = 0;
  return (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)v7 + 80))(v7, v9, 51);
}

void dispatch_after_f_VARIANT_armv81(int64_t a1, __objc2_class **a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t StatusReg;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t VARIANT_armv81;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;

  if (a1 != -1)
  {
    v7 = a1;
    v8 = _dispatch_timeout(a1);
    if (!v8)
    {
      dispatch_async_f_VARIANT_armv81(a2, a3, a4);
      return;
    }
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v10 = __clz(__rbit32((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF));
    if (((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF) != 0)
      v11 = v10 + 1;
    else
      v11 = 0;
    if (v11 > 5)
      v12 = 20;
    else
      v12 = qword_18A06EB38[v11];
    v13 = v8 / v12;
    if (v13 <= 0xF4240)
      v13 = 1000000;
    if (v13 >= 0xDF8475800)
      v14 = 60000000000;
    else
      v14 = v13;
    VARIANT_armv81 = dispatch_source_create_VARIANT_armv81((uint64_t)&_dispatch_source_type_after_VARIANT_armv81, 0, 0, a2);
    v16 = *(_QWORD *)(VARIANT_armv81 + 88);
    v17 = *(_QWORD **)(StatusReg + 176);
    if (v17)
      *(_QWORD *)(StatusReg + 176) = v17[2];
    else
      v17 = _dispatch_continuation_alloc_from_heap_VARIANT_armv81();
    *v17 = 256;
    v17[4] = a4;
    v17[5] = a3;
    v18 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
    if (v18 >= 0x10FF)
      v18 = 4351;
    v19 = *(_QWORD *)(StatusReg + 224);
    if (!v19 || (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v19 + 12), 1u, memory_order_relaxed) > 0)
    {
      v17[3] = v19;
      if (v18)
      {
        v20 = (*((_DWORD *)a2 + 21) >> 30) & 1;
        if ((*((_DWORD *)a2 + 21) & 0xFFF) == 0)
          v20 = 1;
        if (!v20)
          v18 = 0;
      }
      v17[1] = v18;
      v17[6] = VARIANT_armv81;
      *(_QWORD *)(v16 + 40) = v17;
      if ((v7 & 0x8000000000000000) != 0)
      {
        if ((v7 & 0x4000000000000000) != 0)
        {
          if ((unint64_t)-(uint64_t)v7 >> 62)
            v7 = -1;
          else
            v7 = -(uint64_t)v7;
          v21 = 2;
LABEL_35:
          *(_BYTE *)(v16 + 30) |= 4 * v21;
          *(_QWORD *)(v16 + 80) = v7;
          *(_QWORD *)(v16 + 88) = v14 + v7;
          *(_QWORD *)(v16 + 96) = -1;
          dispatch_activate_VARIANT_armv81(VARIANT_armv81);
          return;
        }
        v7 &= ~0x8000000000000000;
        v21 = 1;
      }
      else
      {
        v21 = 0;
      }
      if (v7 >> 62)
        v7 = -1;
      if (_dispatch_host_time_nano2mach)
      {
        v14 = _dispatch_host_time_nano2mach(v14);
      }
      else
      {
        v22 = (3 * v14 * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
        v14 = (v22 + ((3 * v14 - v22) >> 1)) >> 6;
      }
      goto LABEL_35;
    }
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
}

void dispatch_after_VARIANT_armv81(int64_t a1, atomic_uint *a2, uint64_t (**a3)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  unint64_t v5;
  unint64_t v6;
  unint64_t StatusReg;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t VARIANT_armv81;
  uint64_t v14;
  uint64_t *v15;
  void *v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;

  if (a1 != -1)
  {
    v5 = a1;
    v6 = _dispatch_timeout(a1);
    if (!v6)
    {
      dispatch_async_VARIANT_armv81(a2, a3);
      return;
    }
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v8 = __clz(__rbit32((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF));
    if (((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF) != 0)
      v9 = v8 + 1;
    else
      v9 = 0;
    if (v9 > 5)
      v10 = 20;
    else
      v10 = qword_18A06EB38[v9];
    v11 = v6 / v10;
    if (v11 <= 0xF4240)
      v11 = 1000000;
    if (v11 >= 0xDF8475800)
      v12 = 60000000000;
    else
      v12 = v11;
    VARIANT_armv81 = dispatch_source_create_VARIANT_armv81((uint64_t)&_dispatch_source_type_after_VARIANT_armv81, 0, 0, (__objc2_class **)a2);
    v14 = *(_QWORD *)(VARIANT_armv81 + 88);
    v15 = *(uint64_t **)(StatusReg + 176);
    if (v15)
      *(_QWORD *)(StatusReg + 176) = v15[2];
    else
      v15 = (uint64_t *)_dispatch_continuation_alloc_from_heap_VARIANT_armv81();
    v16 = _dispatch_Block_copy(a3);
    v17 = a3[2];
    *v15 = 272;
    if (v17 == ___dispatch_block_create_block_invoke)
    {
      v15[5] = (uint64_t)v16;
      _dispatch_continuation_init_slow_VARIANT_armv81(v15, a2, 0);
    }
    else
    {
      v15[4] = (uint64_t)v17;
      v15[5] = (uint64_t)v16;
      v18 = *(_QWORD *)(StatusReg + 32) & 0xFFFFFFLL;
      if (v18 >= 0x10FF)
        v18 = 4351;
      v19 = *(_QWORD *)(StatusReg + 224);
      if (v19 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v19 + 12), 1u, memory_order_relaxed) <= 0)
        dispatch_group_notify_VARIANT_mp_cold_3();
      v15[3] = v19;
      if (v18)
      {
        v20 = (a2[21] >> 30) & 1;
        if ((a2[21] & 0xFFF) == 0)
          v20 = 1;
        if (!v20)
          v18 = 0;
      }
      v15[1] = v18;
    }
    v15[6] = VARIANT_armv81;
    *(_QWORD *)(v14 + 40) = v15;
    if ((v5 & 0x8000000000000000) != 0)
    {
      if ((v5 & 0x4000000000000000) != 0)
      {
        if ((unint64_t)-(uint64_t)v5 >> 62)
          v5 = -1;
        else
          v5 = -(uint64_t)v5;
        v21 = 2;
LABEL_37:
        *(_BYTE *)(v14 + 30) |= 4 * v21;
        *(_QWORD *)(v14 + 80) = v5;
        *(_QWORD *)(v14 + 88) = v12 + v5;
        *(_QWORD *)(v14 + 96) = -1;
        dispatch_activate_VARIANT_armv81(VARIANT_armv81);
        return;
      }
      v5 &= ~0x8000000000000000;
      v21 = 1;
    }
    else
    {
      v21 = 0;
    }
    if (v5 >> 62)
      v5 = -1;
    if (_dispatch_host_time_nano2mach)
    {
      v12 = _dispatch_host_time_nano2mach(v12);
    }
    else
    {
      v22 = (3 * v12 * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
      v12 = (v22 + ((3 * v12 - v22) >> 1)) >> 6;
    }
    goto LABEL_37;
  }
}

void _dispatch_source_handler_dispose_0(uint64_t a1, const char *a2)
{
  uint64_t v3;
  int add_explicit;
  unint64_t StatusReg;
  uint64_t v6;
  int v7;

  if ((*(_BYTE *)a1 & 0x10) != 0)
    _Block_release(*(const void **)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 12), 0xFFFFFFFF, memory_order_relaxed);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1)
      {
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
        __break(1u);
        return;
      }
      _voucher_xref_dispose_VARIANT_armv81(v3, a2);
    }
    *(_QWORD *)(a1 + 24) = -1;
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = *(_QWORD *)(StatusReg + 176);
  if (v6)
    v7 = *(_DWORD *)(v6 + 8) + 1;
  else
    v7 = 1;
  if (v7 > _dispatch_continuation_cache_limit)
  {
    _dispatch_continuation_free_to_cache_limit_VARIANT_armv81(a1);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v6;
    *(_DWORD *)(a1 + 8) = v7;
    *(_QWORD *)(StatusReg + 176) = a1;
  }
}

void _dispatch_source_set_handler_slow_0(unint64_t a1, const char *a2)
{
  unint64_t StatusReg;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_QWORD *)(StatusReg + 160);
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (*(_QWORD *)(a1 + 32))
  {
    if ((*(_BYTE *)a1 & 0x40) != 0)
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v3 + 32);
  }
  else
  {
    v5 = *(_QWORD *)(StatusReg + 176);
    if (v5)
      v6 = *(_DWORD *)(v5 + 8) + 1;
    else
      v6 = 1;
    if (v6 > _dispatch_continuation_cache_limit)
    {
      _dispatch_continuation_free_to_cache_limit_VARIANT_armv81(a1);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v5;
      *(_DWORD *)(a1 + 8) = v6;
      *(_QWORD *)(StatusReg + 176) = a1;
    }
    a1 = 0;
  }
  v7 = atomic_exchange_explicit((atomic_ullong *volatile)(*(_QWORD *)(v3 + 88) + 8 * v4 + 40), a1, memory_order_release);
  if (v7)
    _dispatch_source_handler_dispose_0(v7, a2);
}

void _dispatch_source_handle_wlh_change_0(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_fetch_or_explicit((atomic_uint *volatile)(a1 + 80), 0x8000000u, memory_order_relaxed);
  if ((v1 & 0x400000) != 0)
  {
    if ((v1 & 0x8000000) == 0)
      _dispatch_bug_deprecated("Changing target queue hierarchy after source was activated");
  }
  else
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Changing target queue hierarchy after source was activated";
    __break(1u);
  }
}

void _dispatch_source_timer_telemetry_slow_0()
{
  uint64_t v0;

  if (_dispatch_source_timer_use_telemetry && __telemetry() == -1)
  {
    v0 = **(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if ((_DWORD)v0)
      _dispatch_bug(1254, v0);
  }
}

char *_dispatch_source_timer_telemetry_init_0()
{
  char *result;

  result = getenv("LIBDISPATCH_TIMERS_USE_TELEMETRY");
  if (result)
    _dispatch_source_timer_use_telemetry = 1;
  return result;
}

char *_dispatch_unote_create_with_handle_VARIANT_armv81(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
    return _dispatch_unote_create(a1, a2, a3);
  else
    return 0;
}

char *_dispatch_unote_create_without_handle_VARIANT_armv81(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
    return 0;
  else
    return _dispatch_unote_create(a1, 0, a3);
}

uint64_t _dispatch_unote_register_VARIANT_armv81(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((a3 & 0x4600FFFF) == 0x4004000 && MEMORY[0xFFFFFC100])
    kdebug_trace();
  *(_DWORD *)(a1 + 36) = a3;
  if ((*(char *)(a1 + 28) + 23) <= 2)
  {
    *(_QWORD *)(a1 + 16) = -3;
    return 1;
  }
  if ((*(_BYTE *)(a1 + 29) & 2) != 0)
  {
    _dispatch_timer_unote_register_0(a1, a2, a3);
    return 1;
  }
  if ((*(_BYTE *)(a1 + 29) & 1) != 0)
    return _dispatch_unote_register_direct_VARIANT_armv81((unsigned int *)a1, a2);
  else
    return _dispatch_unote_register_muxed_VARIANT_armv81(a1);
}

void _dispatch_timer_unote_register_0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  if (((a3 >> 8) & 0xF) - 1 <= 1)
  {
    v3 = *(unsigned __int8 *)(a1 + 30);
    if ((v3 & 1) != 0)
    {
      if (MEMORY[0xFFFFFC100])
      {
        v4 = a2;
        v5 = a1;
        kdebug_trace();
        a2 = v4;
        a1 = v5;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 30) = v3 | 2;
      *(_DWORD *)(a1 + 24) = 3 * ((v3 >> 2) & 3) + (v3 & 1 | 2);
    }
  }
  if ((*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL) != a2)
    *(_QWORD *)(a1 + 16) = -4;
  if (*(_QWORD *)(a1 + 104))
    _dispatch_timer_unote_configure_VARIANT_armv81((unsigned int *)a1);
}

void _dispatch_unote_resume_VARIANT_armv81(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 29) & 2) != 0)
  {
    _dispatch_timer_unote_resume_0(a1);
  }
  else if ((*(_BYTE *)(a1 + 29) & 1) != 0)
  {
    _dispatch_unote_resume_direct_VARIANT_armv81(a1);
  }
  else
  {
    _dispatch_unote_resume_muxed_VARIANT_armv81(a1);
  }
}

void _dispatch_timer_unote_resume_0(uint64_t a1)
{
  _BOOL4 v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  void *v8;
  unsigned int v9;

  v2 = !(*(_QWORD *)(55 - *(_QWORD *)(a1 + 8)) >> 55)
    && *(_DWORD *)(a1 + 24) != -1
    && *(_QWORD *)(a1 + 80) < 0x7FFFFFFFFFFFFFFFuLL;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(unsigned __int8 *)(a1 + 30);
  v5 = (v4 >> 2) & 3;
  v6 = v4 & 3;
  v7 = 3 * v5;
  if ((v3 & 0xFFFFFFFFFFFFFFFCLL) == 0xFFFFFFFFFFFFFFFCLL)
    v8 = &_dispatch_timers_heap;
  else
    v8 = *(void **)((v3 & 0xFFFFFFFFFFFFFFFCLL) + 48);
  v9 = v7 + v6;
  if ((v3 & v2) == 1)
  {
    if (*(_DWORD *)(a1 + 24) == v9)
    {
      if (v2)
        goto LABEL_11;
LABEL_19:
      if ((v3 & 1) != 0)
        _os_object_release_internal_n_VARIANT_armv81((void *)~*(_QWORD *)(a1 + 8), (const char *)2);
      return;
    }
  }
  else if ((v3 & 1) == 0)
  {
    if (!v2)
      return;
    goto LABEL_15;
  }
  _dispatch_timer_unote_disarm(a1, (uint64_t)v8);
  if (!v2)
    goto LABEL_19;
LABEL_11:
  if ((v3 & 1) != 0)
  {
LABEL_17:
    _dispatch_timer_unote_arm(a1, (uint64_t)v8, v9);
    return;
  }
LABEL_15:
  if (*(_DWORD *)(7 - *(_QWORD *)(a1 + 8)) == 0x7FFFFFFF
    || (int)atomic_fetch_add_explicit((atomic_uint *volatile)(7 - *(_QWORD *)(a1 + 8)), 2u, memory_order_relaxed) > 0)
  {
    goto LABEL_17;
  }
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
  __break(1u);
}

uint64_t _dispatch_unote_unregister_VARIANT_armv81(uint64_t a1, char a2)
{
  if (!*(_QWORD *)(a1 + 16))
    return 1;
  if ((*(char *)(a1 + 28) + 23) <= 2)
  {
    *(_QWORD *)(a1 + 16) = 0;
    return 1;
  }
  if ((*(_BYTE *)(a1 + 29) & 2) != 0)
  {
    _dispatch_timer_unote_unregister_0(a1);
    return 1;
  }
  if ((*(_BYTE *)(a1 + 29) & 1) != 0)
    return _dispatch_unote_unregister_direct_VARIANT_armv81(a1, a2);
  else
    return _dispatch_unote_unregister_muxed_VARIANT_armv81((uint64_t *)a1);
}

void _dispatch_timer_unote_unregister_0(uint64_t a1)
{
  unint64_t v2;
  void *v3;
  unint64_t v4;
  int add_explicit;

  v2 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if (v2 == -4)
    v3 = &_dispatch_timers_heap;
  else
    v3 = *(void **)(v2 + 48);
  if ((*(_QWORD *)(a1 + 16) & 1) != 0
    && (_dispatch_timer_unote_disarm(a1, (uint64_t)v3), *(_DWORD *)(7 - *(_QWORD *)(a1 + 8)) != 0x7FFFFFFF)
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(7 - *(_QWORD *)(a1 + 8)), 0xFFFFFFFE, memory_order_release) <= 2)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
    if (v4 == -4 || v4 == 0)
      goto LABEL_14;
    add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 96), 0xFFFFFFFF, memory_order_relaxed);
    if (add_explicit > 0)
      goto LABEL_14;
    if ((add_explicit & 0x80000000) == 0)
    {
      *(_QWORD *)(v4 + 56) = 0xDEAD000000000000;
      _dispatch_object_dealloc_VARIANT_mp((void *)v4);
LABEL_14:
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = -1;
      return;
    }
  }
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
}

_BYTE *_dispatch_source_data_create_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *result;

  if (a3 | a2)
    return 0;
  result = _dispatch_calloc(1uLL, *(unsigned int *)(a1 + 24));
  *(_QWORD *)result = a1;
  result[28] = *(_BYTE *)(a1 + 8);
  result[29] |= 1u;
  return result;
}

char *_dispatch_source_signal_create_0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 <= 0x1F)
    return _dispatch_unote_create_with_handle_VARIANT_armv81(a1, a2, a3);
  else
    return 0;
}

void _dispatch_timer_unote_configure_VARIANT_armv81(unsigned int *a1)
{
  unsigned int v2;
  char v3;
  __int128 v4;

  __swp(a1, a1 + 26);
  v2 = *((unsigned __int8 *)a1 + 30);
  if (a1[6] != ((v2 >> 2) & 3))
  {
    v3 = v2 & 0xF3;
    *((_BYTE *)a1 + 30) = v3;
    *((_BYTE *)a1 + 30) = v3 | (4 * *((_BYTE *)a1 + 24));
  }
  v4 = *(_OWORD *)a1;
  *((_QWORD *)a1 + 12) = *((_QWORD *)a1 + 2);
  *((_OWORD *)a1 + 5) = v4;
  free(a1);
  *((_QWORD *)a1 + 9) = 0;
  if ((*((_QWORD *)a1 + 2) & 1) != 0)
    _dispatch_timer_unote_resume_0((uint64_t)a1);
}

double _dispatch_source_timer_create_0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  char **v4;
  unsigned __int8 *v5;
  unsigned int v6;
  double result;

  if ((a3 & 1) != 0)
    v3 = a3 & 0xFFFFFFFD;
  else
    v3 = a3;
  if ((v3 & ~*(_DWORD *)(a1 + 20)) != 0)
    return result;
  v4 = (char **)a1;
  if ((*(_BYTE *)(a1 + 11) & 0x10) != 0)
  {
    if (!a2)
      return result;
LABEL_16:
    v5 = (unsigned __int8 *)_dispatch_calloc(1uLL, *((unsigned int *)v4 + 6));
    *(_QWORD *)v5 = v4;
    v5[28] = *((_BYTE *)v4 + 8);
    v5[29] |= 2u;
    v6 = *((unsigned __int8 *)v4 + 11) | v3 | v5[30];
    v5[30] = v6;
    *((_DWORD *)v5 + 6) = 3 * ((v6 >> 2) & 3) + (v6 & 3);
    result = NAN;
    *((_QWORD *)v5 + 14) = -1;
    *((_QWORD *)v5 + 10) = -1;
    *((_QWORD *)v5 + 11) = -1;
    *((_QWORD *)v5 + 12) = -1;
    return result;
  }
  if (*(unsigned __int8 *)(a1 + 8) != 236)
  {
    switch(a2)
    {
      case 0:
        goto LABEL_16;
      case 1:
        goto LABEL_15;
      case 2:
        v3 |= 4u;
        goto LABEL_15;
      case 3:
        v3 |= 8u;
LABEL_15:
        v4 = &_dispatch_source_type_timer_with_clock_VARIANT_armv81;
        goto LABEL_16;
      default:
        return result;
    }
  }
  if (!a2)
    goto LABEL_16;
  return result;
}

void _dispatch_event_loop_drain_timers_VARIANT_armv81(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  int add_explicit;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  _QWORD v57[2];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v57[0] = 0;
  v57[1] = 0;
  v58 = 0;
  v3 = a2;
  do
  {
    if (!a2)
    {
      *(_BYTE *)(a1 + 6) = 0;
      return;
    }
    v4 = 0;
    do
    {
      v5 = a1 + 32 * v4;
      v8 = *(_QWORD *)(v5 + 8);
      v6 = (uint64_t *)(v5 + 8);
      v7 = v8;
      if (v8)
      {
        v9 = v4 / 3uLL;
        while (1)
        {
          v10 = v57[v9];
          if (!v10)
          {
            v59 = 0;
            v60 = 0;
            mach_get_times();
            v58 = v60 + 1000000000 * v59;
            v10 = v57[v9];
          }
          v11 = *(_QWORD *)(v7 + 80);
          v12 = v10 >= v11;
          v13 = v10 - v11;
          if (!v12)
            goto LABEL_41;
          if ((*(_BYTE *)(v7 + 30) & 0x40) != 0)
          {
            _dispatch_timer_unote_disarm(v7, a1);
            v14 = *(_QWORD *)(v7 + 16) & 0xFFFFFFFFFFFFFFFCLL;
            if (v14 != -4 && v14 != 0)
            {
              add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 96), 0xFFFFFFFF, memory_order_relaxed);
              if (add_explicit <= 0)
              {
                if (add_explicit < 0)
                  _os_object_allows_weak_reference_VARIANT_mp_cold_1();
                *(_QWORD *)(v14 + 56) = 0xDEAD000000000000;
                _dispatch_object_dealloc_VARIANT_mp((void *)v14);
              }
            }
            *(_QWORD *)(v7 + 16) = 0;
            *(_QWORD *)(v7 + 72) = 2;
            goto LABEL_21;
          }
          if (!*(_QWORD *)(v7 + 104))
            break;
          _dispatch_timer_unote_configure_VARIANT_armv81((unsigned int *)v7);
LABEL_22:
          v7 = *v6;
          if (!*v6)
            goto LABEL_41;
        }
        if (*(_QWORD *)(v7 + 72))
        {
          _dispatch_timer_unote_disarm(v7, a1);
          atomic_fetch_or_explicit((atomic_ullong *volatile)(v7 + 72), 1uLL, memory_order_relaxed);
        }
        else
        {
          v17 = *(_QWORD *)(v7 + 96);
          v18 = v13 / v17;
          if (v18 + 1 < 0x7FFFFFFFFFFFFFFFLL)
            v19 = v18 + 1;
          else
            v19 = 0x7FFFFFFFFFFFFFFFLL;
          if (v17 > 0x7FFFFFFFFFFFFFFELL)
          {
            v20 = -1;
            *(_QWORD *)(v7 + 80) = -1;
            *(_QWORD *)(v7 + 88) = -1;
          }
          else
          {
            v20 = v19 * v17 + v11;
            v21 = *(_QWORD *)(v7 + 88) + v19 * v17;
            *(_QWORD *)(v7 + 80) = v20;
            *(_QWORD *)(v7 + 88) = v21;
          }
          v22 = 2 * v19;
          if (*(_QWORD *)(55 - *(_QWORD *)(v7 + 8)) >> 55)
          {
            if (MEMORY[0xFFFFFC100])
              kdebug_trace();
          }
          else if (*(_DWORD *)(v7 + 24) != -1 && v20 <= 0x7FFFFFFFFFFFFFFELL)
          {
            if (*(_DWORD *)(7 - *(_QWORD *)(v7 + 8)) != 0x7FFFFFFF
              && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(7 - *(_QWORD *)(v7 + 8)), 2u, memory_order_relaxed) <= 0)
            {
              dispatch_set_target_queue_VARIANT_mp_cold_2();
            }
            _dispatch_timer_unote_arm(v7, a1, v4);
            *(_QWORD *)(v7 + 72) = v22;
            goto LABEL_21;
          }
          _dispatch_timer_unote_disarm(v7, a1);
          atomic_store(v22 | 1, (unint64_t *)(v7 + 72));
        }
LABEL_21:
        (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 48))(v7, 16, 0, 0);
        goto LABEL_22;
      }
LABEL_41:
      ++v4;
    }
    while (v4 != v3);
    *(_BYTE *)(a1 + 6) = 0;
    v23 = 0;
    do
    {
      v24 = a1 + 32 * v23;
      v25 = (char *)(v24 + 7);
      if ((*(_BYTE *)(v24 + 7) & 2) == 0)
        goto LABEL_91;
      v26 = *(_QWORD *)(v24 + 8);
      if (!v26)
        goto LABEL_87;
      v27 = *(_QWORD *)(v26 + 80);
      v28 = *(_QWORD *)(*(_QWORD *)(a1 + 32 * v23 + 16) + 88);
      v29 = v57[v23 / 3];
      if (!v29)
      {
        v59 = 0;
        v60 = 0;
        mach_get_times();
        v58 = v60 + 1000000000 * v59;
        v29 = v57[v23 / 3];
      }
      v30 = v23 % 3;
      if (v27 <= v29)
        goto LABEL_86;
      v31 = *(_DWORD *)v24;
      if (*(_DWORD *)v24 >= 3u)
      {
        v32 = _dispatch_kevent_coalescing_window_0[v30];
        if (v32 + v27 < v28)
        {
          v33 = v28 - v32;
          v27 = *(_QWORD *)(*(_QWORD *)(v24 + 8) + 80);
          v34 = a1 + 32 * v23;
          v35 = *(unsigned __int8 *)(v34 + 4);
          v36 = (uint64_t *)(v34 + 24);
          v37 = 2;
          do
          {
            if (v37 > 1)
            {
              v39 = __clz((v37 - 2) | 7);
              v40 = v36;
              if (30 - v39 != v35)
                v40 = (uint64_t *)(*v36 + 8 * ((8 << (v35 - 2)) - 30 + v39));
              v41 = *v40;
              if (v39 == 29)
                v42 = 0;
              else
                v42 = -8 << (28 - v39);
              v38 = v41 + 8 * (v42 + v37 - 2);
            }
            else
            {
              v38 = a1 + 32 * v23 + 8 * v37 + 8;
            }
            v43 = *(_QWORD *)(*(_QWORD *)v38 + 80);
            if (v43 <= v27)
              v44 = v27;
            else
              v44 = v43;
            v45 = (v37 & 0xFFFFFFFE) + 2;
            if (v45 == v31)
              v46 = ((v37 - 2) >> 1) & 0x7FFFFFFE;
            else
              v46 = v37 & 0xFFFFFFFE;
            v47 = (v46 + 3) >> __clz(__rbit32(-4 - v46));
            v48 = v37 & 1 | (2 * v47);
            if (!v47)
              v48 = -1;
            if (2 * v37 - (v37 & 1) + 2 < v31)
              v48 = 2 * v37 - (v37 & 1) + 2;
            if (v45 == v31)
              v49 = ((v37 - 2) >> 1) & 0x7FFFFFFE;
            else
              v49 = v37 & 0xFFFFFFFE;
            v50 = (v49 + 3) >> __clz(__rbit32(-4 - v49));
            v37 = v37 & 1 | (2 * v50);
            if (!v50)
              v37 = -1;
            if (v43 <= v33)
            {
              v37 = v48;
              v27 = v44;
            }
          }
          while (v37 < v31);
        }
      }
      v51 = v27 - v29;
      v52 = v51 >= 0x7FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v51;
      v53 = v28 - v27 >= 0x7FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v28 - v27;
      if (!v52)
      {
LABEL_86:
        *(_BYTE *)(a1 + 6) |= (1 << v30) | 0x80;
LABEL_87:
        v55 = *v25;
        if ((*v25 & 1) != 0)
        {
          _dispatch_event_loop_timer_delete_VARIANT_armv81(a1, v23);
          v55 = *v25;
        }
        v54 = v55 & 0xFC;
        goto LABEL_90;
      }
      if ((unint64_t)(v52 - 0x7FFFFFFFFFFFFFFFLL) <= 0x8000000000000001)
        goto LABEL_87;
      _dispatch_event_loop_timer_arm_VARIANT_armv81(a1, v23, v52, v53, (uint64_t)v57);
      v54 = *v25 & 0xFC | 1;
LABEL_90:
      *v25 = v54;
LABEL_91:
      ++v23;
    }
    while (v23 != v3);
  }
  while (*(_BYTE *)(a1 + 6));
}

uint64_t _dispatch_sync_ipc_handoff_begin_VARIANT_armv81(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t result;
  _QWORD v4[3];
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4[0] = a2;
  v4[1] = 655343;
  v4[2] = a1;
  v5 = -2147483392;
  v7 = 0;
  v6 = 0;
  v8 = 0;
  v9 = a3;
  v10 = -1;
  v11 = a1;
  result = _dispatch_kq_immediate_update_0(a1, (uint64_t)v4);
  if ((result & 0xFFFFFFFD) != 0)
    _dispatch_sync_ipc_handoff_begin_VARIANT_mp_cold_1(result);
  return result;
}

uint64_t _dispatch_kq_immediate_update_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  int v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  if (v2 && *(_QWORD *)(v2 + 24) == a1)
  {
    v3 = *(_QWORD *)(v2 + 32);
    v4 = *(unsigned __int16 *)(v2 + 40);
    if (*(_WORD *)(v2 + 40))
    {
      v5 = 0;
      v6 = (unsigned __int16 *)(v3 + 8);
      v7 = (unsigned __int16 *)(v3 + 8);
      while (1)
      {
        v8 = *v7;
        v7 += 36;
        if (v8 == *(unsigned __int16 *)(a2 + 8)
          && *((_QWORD *)v6 - 1) == *(_QWORD *)a2
          && *((_QWORD *)v6 + 1) == *(_QWORD *)(a2 + 16))
        {
          break;
        }
        ++v5;
        v6 = v7;
        if (v4 == v5)
          return _dispatch_kq_drain_0(a1, a2, 1, 3);
      }
    }
    else
    {
      LODWORD(v5) = 0;
    }
    if (v5 < v4)
    {
      v9 = v4 - 1;
      *(_WORD *)(v2 + 40) = v9;
      if ((_DWORD)v5 != v9)
      {
        v10 = v3 + 72 * v5;
        v11 = v3 + 72 * v9;
        *(_OWORD *)v10 = *(_OWORD *)v11;
        v12 = *(_OWORD *)(v11 + 16);
        v13 = *(_OWORD *)(v11 + 32);
        v14 = *(_OWORD *)(v11 + 48);
        *(_QWORD *)(v10 + 64) = *(_QWORD *)(v11 + 64);
        *(_OWORD *)(v10 + 32) = v13;
        *(_OWORD *)(v10 + 48) = v14;
        *(_OWORD *)(v10 + 16) = v12;
      }
    }
  }
  return _dispatch_kq_drain_0(a1, a2, 1, 3);
}

double _dispatch_sync_ipc_handoff_end_VARIANT_armv81(uint64_t a1, unsigned int a2)
{
  double result;
  _QWORD v3[3];
  unsigned int v4;
  __int128 v5;
  _BYTE v6[28];

  v3[0] = a2;
  v3[1] = 524271;
  v3[2] = a1;
  v4 = 0x80000000;
  v5 = 0u;
  memset(v6, 0, sizeof(v6));
  *(_QWORD *)&result = _dispatch_kq_deferred_update_0(a1, (uint64_t)v3).n128_u64[0];
  return result;
}

__n128 _dispatch_kq_deferred_update_0(uint64_t a1, uint64_t a2)
{
  unint64_t StatusReg;
  uint64_t v3;
  __n128 result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 *v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_QWORD *)(StatusReg + 232);
  if (v3 && *(_QWORD *)(v3 + 24) == a1 && (v5 = *(unsigned __int16 *)(v3 + 42), *(_WORD *)(v3 + 42)))
  {
    v6 = *(unsigned __int16 *)(v3 + 40);
    if (*(_WORD *)(v3 + 40))
    {
      v7 = 0;
      v8 = *(_QWORD *)(v3 + 32) + 8;
      v9 = (unsigned __int16 *)v8;
      while (1)
      {
        v10 = *v9;
        v9 += 36;
        if (v10 == *(unsigned __int16 *)(a2 + 8)
          && *(_QWORD *)(v8 - 8) == *(_QWORD *)a2
          && *(_QWORD *)(v8 + 8) == *(_QWORD *)(a2 + 16))
        {
          break;
        }
        ++v7;
        v8 = (uint64_t)v9;
        if (v6 == v7)
        {
          LODWORD(v7) = *(unsigned __int16 *)(v3 + 40);
          break;
        }
      }
    }
    else
    {
      LODWORD(v7) = 0;
    }
    if (a1 != -4)
      *(_QWORD *)(StatusReg + 40) = 1;
    if ((_DWORD)v7 == v5)
    {
      *(_WORD *)(v3 + 40) = 1;
      v14 = a2;
      v15 = v3;
      _dispatch_kq_drain_0(a1, *(_QWORD *)(v3 + 32), v6, 3);
      a2 = v14;
      v3 = v15;
      LODWORD(v7) = 0;
    }
    else if ((_DWORD)v7 == (_DWORD)v6)
    {
      *(_WORD *)(v3 + 40) = v6 + 1;
      LODWORD(v7) = v6;
    }
    v11 = *(_QWORD *)(v3 + 32) + 72 * v7;
    *(_OWORD *)v11 = *(_OWORD *)a2;
    result = *(__n128 *)(a2 + 16);
    v12 = *(_OWORD *)(a2 + 32);
    v13 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(v11 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(v11 + 32) = v12;
    *(_OWORD *)(v11 + 48) = v13;
    *(__n128 *)(v11 + 16) = result;
  }
  else
  {
    _dispatch_kq_drain_0(a1, a2, 1, 3);
  }
  return result;
}

uint64_t _dispatch_unote_register_muxed_VARIANT_armv81(uint64_t a1)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  _QWORD **v5;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  __int16 v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t (*v12)(int64_t, uint64_t);
  uint64_t result;
  int v14;
  int v15;
  int v16;
  uint64_t (*v17)(_QWORD *);
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(unsigned int *)(a1 + 24);
  v3 = *(char *)(a1 + 28);
  v4 = v2 >> 8;
  if ((v3 | 0x10) != 0xFFFFFFF8)
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
  v5 = (_QWORD **)((char *)&_dispatch_sources + 8 * (v4 & 0x3F));
  v6 = *v5;
  if (!*v5)
  {
LABEL_7:
    v7 = (int64_t)_dispatch_calloc(1uLL, 0x60uLL);
    v6 = (_QWORD *)v7;
    *(_QWORD *)(v7 + 24) = *(unsigned int *)(a1 + 24);
    v8 = v7 + 24;
    v9 = *(_WORD *)(*(_QWORD *)a1 + 12) | 5;
    v10 = *(_DWORD *)(*(_QWORD *)a1 + 16) | *(_DWORD *)(a1 + 32);
    v11 = *(unsigned __int16 *)(*(_QWORD *)a1 + 14);
    *(_WORD *)(v7 + 32) = *(char *)(*(_QWORD *)a1 + 8);
    *(_WORD *)(v7 + 34) = v9;
    *(_QWORD *)(v7 + 48) = v10;
    *(_QWORD *)(v7 + 56) = v11;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_DWORD *)(v7 + 36) = 0x2000000;
    *(_QWORD *)(v7 + 40) = v7 | 1;
    v12 = *(uint64_t (**)(int64_t, uint64_t))(*(_QWORD *)a1 + 40);
    if (v12)
    {
      if ((v12(v7, v8) & 1) == 0)
        goto LABEL_9;
    }
    else if (_dispatch_kq_immediate_update_0(-4, v8))
    {
LABEL_9:
      free(v6);
      return 0;
    }
    *((_WORD *)v6 + 17) &= 0xFDFEu;
    v18 = *v5;
    *v6 = *v5;
    if (v18)
      v18[1] = v6;
    *v5 = v6;
    v6[1] = v5;
    goto LABEL_18;
  }
  while (v6[3] != v2 || *((unsigned __int16 *)v6 + 16) != (unsigned __int16)v3)
  {
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_7;
  }
  v14 = *(_DWORD *)(a1 + 32);
  v15 = *((_DWORD *)v6 + 12);
  v16 = v14 & ~v15;
  if (v16)
  {
    *((_DWORD *)v6 + 12) = v15 | v14;
    v17 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)a1 + 40);
    if (v17)
    {
      if ((v17(v6) & 1) == 0)
        goto LABEL_13;
    }
    else if (_dispatch_kq_immediate_update_0(-4, (uint64_t)(v6 + 3)))
    {
LABEL_13:
      result = 0;
      *((_DWORD *)v6 + 12) &= ~v16;
      return result;
    }
  }
LABEL_18:
  v19 = v6 + 2;
  v20 = v6[2];
  *(_QWORD *)(a1 - 24) = v20;
  v21 = a1 - 24;
  if (v20)
    *(_QWORD *)(v20 + 8) = v21;
  *v19 = v21;
  *(_QWORD *)(a1 - 16) = v19;
  if (*(unsigned __int8 *)(a1 + 28) == 232)
    *(_BYTE *)(a1 + 30) = v6[8] != 0;
  *(_QWORD *)(a1 - 8) = v6;
  *(_QWORD *)(a1 + 16) = -3;
  return 1;
}

void _dispatch_unote_resume_muxed_VARIANT_armv81(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);

  *(_QWORD *)(a1 + 16) |= 1uLL;
  v2 = a1 - 8;
  v1 = *(_QWORD *)(a1 - 8);
  v3 = *(void (**)(uint64_t))(*(_QWORD *)(v2 + 8) + 40);
  if (v3)
    v3(v1);
  else
    _dispatch_kq_deferred_update_0(-4, v1 + 24);
}

uint64_t _dispatch_unote_unregister_muxed_VARIANT_armv81(uint64_t *a1)
{
  __int16 *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  __int16 v8;
  uint64_t (*v9)(__int16 *);
  uint64_t v10;

  v1 = (__int16 *)*(a1 - 1);
  if (v1[16] == -24)
    *((_BYTE *)a1 + 30) = 0;
  a1[2] = 0;
  v2 = *(a1 - 3);
  if (v2)
    *(_QWORD *)(v2 + 8) = *(a1 - 2);
  *(_QWORD *)*(a1 - 2) = v2;
  *(a1 - 1) = 0;
  v3 = *((_QWORD *)v1 + 2);
  if (v3)
  {
    v4 = *(_DWORD *)(*a1 + 16);
    v5 = (uint64_t *)*((_QWORD *)v1 + 2);
    do
    {
      v6 = v5;
      v4 |= *((_DWORD *)v5 + 14);
      v5 = (uint64_t *)*v5;
    }
    while (v5);
    v7 = *((_DWORD *)v1 + 12);
    if ((v7 & ~v4) == 0)
      goto LABEL_13;
    a1 = v6 + 3;
    *((_DWORD *)v1 + 12) = v7 & v4;
LABEL_11:
    v9 = *(uint64_t (**)(__int16 *))(*a1 + 40);
    if (v9)
    {
      if ((v9(v1) & 1) == 0)
        _dispatch_unote_unregister_muxed_VARIANT_mp_cold_1();
    }
    else
    {
      _dispatch_kq_deferred_update_0(-4, v1 + 12);
    }
LABEL_13:
    if (v3)
      return 1;
    goto LABEL_14;
  }
  v8 = v1[17];
  v1[17] = v8 | 2;
  if ((v8 & 2) == 0)
    goto LABEL_11;
LABEL_14:
  v10 = *(_QWORD *)v1;
  if (*(_QWORD *)v1)
    *(_QWORD *)(v10 + 8) = *((_QWORD *)v1 + 1);
  **((_QWORD **)v1 + 1) = v10;
  free(v1);
  return 1;
}

uint64_t _dispatch_unote_register_direct_VARIANT_armv81(unsigned int *a1, uint64_t a2)
{
  return _dispatch_kq_unote_update_0(a2, a1, 5);
}

uint64_t _dispatch_kq_unote_update_0(uint64_t result, unsigned int *a2, __int16 a3)
{
  __int16 v3;
  uint64_t v5;
  unint64_t StatusReg;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;
  int add_explicit;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  __int16 v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int16 v40;
  __int16 v41;
  unsigned int v42;
  unsigned int *v43;
  int v44;
  int v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;

  v3 = a3;
  v5 = result;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_QWORD *)(StatusReg + 232);
  if ((a3 & 1) != 0)
  {
    if (result != -4
      && result
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(result + 96), 1u, memory_order_relaxed) & 0x80000000) != 0)
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
LABEL_63:
      *(_WORD *)(v7 + 40) = 1;
      result = _dispatch_kq_drain_0(result, *(_QWORD *)(v7 + 32));
      LODWORD(v20) = 0;
      v18 = a2[6];
      goto LABEL_45;
    }
    *((_QWORD *)a2 + 2) = result | 1;
  }
  if (!v7 || *(_QWORD *)(v7 + 24) != result)
    goto LABEL_8;
  v18 = a2[6];
  v19 = *(_QWORD *)(v7 + 32);
  v20 = *(unsigned __int16 *)(v7 + 40);
  if (*(_WORD *)(v7 + 40))
  {
    v21 = 0;
    v22 = (unsigned __int16 *)(v19 + 8);
    v23 = (unsigned __int16 *)(v19 + 8);
    while (1)
    {
      v24 = *v23;
      v23 += 36;
      if (v24 == (unsigned __int16)*((char *)a2 + 28)
        && *((_QWORD *)v22 - 1) == v18
        && *((unsigned int **)v22 + 1) == a2)
      {
        break;
      }
      ++v21;
      v22 = v23;
      if (v20 == v21)
      {
        LODWORD(v21) = *(unsigned __int16 *)(v7 + 40);
        goto LABEL_38;
      }
    }
  }
  else
  {
    LODWORD(v21) = 0;
  }
  if (v21 >= v20)
  {
LABEL_38:
    if ((v3 & 5) != 4)
      goto LABEL_8;
  }
  else
  {
    v3 |= *(_WORD *)(v19 + 72 * v21 + 10) & 4;
    if ((v3 & 5) != 4)
    {
      *(_WORD *)(v7 + 40) = v20 - 1;
      if ((_DWORD)v21 != (unsigned __int16)(v20 - 1))
      {
        v25 = v19 + 72 * v21;
        v26 = v19 + 72 * (unsigned __int16)(v20 - 1);
        *(_OWORD *)v25 = *(_OWORD *)v26;
        v27 = *(_OWORD *)(v26 + 16);
        v28 = *(_OWORD *)(v26 + 32);
        v29 = *(_OWORD *)(v26 + 48);
        *(_QWORD *)(v25 + 64) = *(_QWORD *)(v26 + 64);
        *(_OWORD *)(v25 + 32) = v28;
        *(_OWORD *)(v25 + 48) = v29;
        *(_OWORD *)(v25 + 16) = v27;
      }
LABEL_8:
      v8 = *(_QWORD *)a2;
      v9 = *(_WORD *)(*(_QWORD *)a2 + 12) | v3;
      if ((v9 & 0x201) == 0x200)
        v9 &= ~0x200u;
      v10 = a2[6];
      v11 = *(char *)(v8 + 8);
      v12 = a2[9];
      if ((v12 & 0x4000000) != 0)
      {
        v13 = v12 & 0x8E000000 | 0xFF;
        LOWORD(v12) = (unsigned __int16)v12 >> 12;
      }
      else
      {
        v13 = v12 & 0x8E0000FF;
        v12 = (v12 >> 8) & 0xF;
        if (!v12)
          goto LABEL_15;
      }
      v13 |= 256 << (v12 - 1);
LABEL_15:
      v14 = *(_DWORD *)(v8 + 16) | a2[8];
      v15 = *(unsigned __int16 *)(v8 + 14);
      v47 = 0u;
      v48 = 0u;
      v39 = v10;
      v40 = v11;
      v41 = v9;
      v42 = v13;
      v43 = a2;
      v44 = v14;
      v45 = 0;
      v46 = v15;
      result = _dispatch_kq_drain_0(result, &v39);
      v16 = result;
      if ((v3 & 1) == 0)
      {
        if ((v3 & 2) == 0)
          goto LABEL_59;
        if ((_DWORD)result == 36)
          return 0;
        goto LABEL_53;
      }
      if ((_DWORD)result)
      {
        if (v5 != -4)
        {
          if (v5)
          {
            add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 96), 0xFFFFFFFF, memory_order_relaxed);
            if (add_explicit <= 0)
            {
              if (add_explicit < 0)
                goto LABEL_65;
              *(_QWORD *)(v5 + 56) = 0xDEAD000000000000;
              _dispatch_object_dealloc_VARIANT_mp((void *)v5);
            }
          }
        }
        result = 0;
        *((_QWORD *)a2 + 2) = 0;
        return result;
      }
      return 1;
    }
  }
  if (result != -4)
    *(_QWORD *)(StatusReg + 40) = 1;
  if ((_DWORD)v21 == *(unsigned __int16 *)(v7 + 42))
    goto LABEL_63;
  if ((_DWORD)v21 == (_DWORD)v20)
    *(_WORD *)(v7 + 40) = v20 + 1;
  else
    LODWORD(v20) = v21;
LABEL_45:
  v30 = *(_QWORD *)(v7 + 32) + 72 * v20;
  v31 = *(_QWORD *)a2;
  v32 = *(_WORD *)(*(_QWORD *)a2 + 12) | v3;
  if ((v32 & 0x201) == 0x200)
    v32 &= ~0x200u;
  v33 = *(char *)(v31 + 8);
  v34 = a2[9];
  if ((v34 & 0x4000000) != 0)
  {
    v35 = v34 & 0x8E000000 | 0xFF;
    LOWORD(v34) = (unsigned __int16)v34 >> 12;
    goto LABEL_51;
  }
  v35 = v34 & 0x8E0000FF;
  v34 = (v34 >> 8) & 0xF;
  if (v34)
LABEL_51:
    v35 |= 256 << (v34 - 1);
  v16 = 0;
  v36 = *(_DWORD *)(v31 + 16) | a2[8];
  v37 = *(unsigned __int16 *)(v31 + 14);
  *(_QWORD *)v30 = v18;
  *(_WORD *)(v30 + 8) = v33;
  *(_WORD *)(v30 + 10) = v32;
  *(_DWORD *)(v30 + 12) = v35;
  *(_QWORD *)(v30 + 16) = a2;
  *(_QWORD *)(v30 + 24) = v36;
  *(_QWORD *)(v30 + 32) = v37;
  *(_OWORD *)(v30 + 40) = 0u;
  *(_OWORD *)(v30 + 56) = 0u;
  if ((v3 & 3) != 2)
    return 1;
LABEL_53:
  if (v5 == -4)
    goto LABEL_58;
  if (!v5)
    goto LABEL_58;
  v38 = atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 96), 0xFFFFFFFF, memory_order_relaxed);
  if (v38 > 0)
    goto LABEL_58;
  if ((v38 & 0x80000000) == 0)
  {
    *(_QWORD *)(v5 + 56) = 0xDEAD000000000000;
    _dispatch_object_dealloc_VARIANT_mp((void *)v5);
LABEL_58:
    *((_QWORD *)a2 + 2) = 0;
LABEL_59:
    if (v16)
      _dispatch_bug(1077, v16);
    return 1;
  }
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
LABEL_65:
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
  return result;
}

uint64_t _dispatch_unote_resume_direct_VARIANT_armv81(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) |= 1uLL;
  return _dispatch_kq_unote_update_0(*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL, (unsigned int *)a1, 4);
}

uint64_t _dispatch_unote_unregister_direct_VARIANT_armv81(uint64_t a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v10;
  BOOL v11;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = v4 & 0xFFFFFFFFFFFFFFFCLL;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  v7 = 2;
  if ((v4 & 0xFFFFFFFFFFFFFFFCLL) != 0xFFFFFFFFFFFFFFFCLL && v6 != 0)
  {
    if (*(_QWORD *)(v6 + 24) == v5)
    {
      a2 |= 5u;
      v7 = 6;
    }
    else
    {
      v7 = 2;
    }
  }
  if ((v4 & 2) != 0 && (a2 & 1) == 0)
    goto LABEL_10;
  if (v4 == 2)
  {
    *(_QWORD *)(a1 + 16) = 0;
    return 1;
  }
  if ((v4 & 1) != 0)
  {
    v10 = v7;
  }
  else
  {
    a2 |= 4u;
    v10 = 6;
  }
  v11 = v10 <= 3 && (a2 & 2) == 0;
  if (!v11 && (_dispatch_kq_unote_update_0(v5, (unsigned int *)a1, v10) & 1) != 0)
    return 1;
LABEL_10:
  if ((a2 & 4) != 0)
    _dispatch_unote_unregister_direct_VARIANT_armv81_cold_1();
  return 0;
}

void _dispatch_event_loop_atfork_child_VARIANT_armv81()
{
  _dispatch_mach_host_port_pred = 0;
  _dispatch_mach_host_port = 0;
}

_QWORD *_dispatch_event_loop_poke_VARIANT_armv81(_QWORD *result, uint64_t a2, int a3)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  __int16 v7;
  int v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[2];
  __int128 v20;

  if (result == (_QWORD *)-8)
  {
    v17 = 65526;
    memset(v19, 0, sizeof(v19));
    v20 = 0u;
    v16 = 1;
    v18 = -8;
    LODWORD(v19[0]) = 0x1000000;
    return (_QWORD *)_dispatch_kq_deferred_update_0(-4, &v16);
  }
  v3 = (uint64_t)result;
  if (result == (_QWORD *)-4 || !result)
    goto LABEL_47;
  if ((a2 & 0x4000000000) != 0)
    return (_QWORD *)((uint64_t (*)(void))_dispatch_mgr_q[2].superclass)();
  result = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  if (!result || result[3] != v3)
  {
    if ((a2 & 1) != 0)
    {
      v9 = *(unsigned int *)(*(_QWORD *)(v3 + 24) + 84);
      if ((v9 & 0x8000000) != 0)
        goto LABEL_52;
      v10 = (v9 >> 8) & 0xF;
      if (v10 <= (BYTE4(a2) & 7u))
        v10 = BYTE4(a2) & 7;
      if (v10 <= 1)
        LOBYTE(v10) = 1;
      v11 = 256 << (v10 - 1);
      v6 = a2 & 2 | 0x3700000001;
      v5 = v9 & 0x80000000 | v11 | 0xFF;
      if ((a2 & 2) != 0)
        v8 = 401;
      else
        v8 = 273;
      v7 = 5;
    }
    else
    {
      v5 = 0;
      v6 = 1;
      v7 = 7;
      v8 = 1;
    }
    v16 = v3;
    LOWORD(v17) = -17;
    WORD1(v17) = v7;
    HIDWORD(v17) = v5;
    v18 = v3;
    LODWORD(v19[0]) = v8;
    memset((char *)v19 + 4, 0, 20);
    *((_QWORD *)&v19[1] + 1) = v3 + 56;
    *(_QWORD *)&v20 = v6;
    *((_QWORD *)&v20 + 1) = a2;
    result = (_QWORD *)_dispatch_kq_poll_0(v3, &v16, 1, &v16, 1, 0, 0, 3);
    if (!(_DWORD)result)
    {
      if ((a3 & 0x80000000) == 0)
        return _os_object_release_internal_VARIANT_armv81((void *)v3, v12);
      if ((a3 & 1) != 0)
        return _os_object_release_internal_n_VARIANT_armv81((void *)v3, (const char *)2);
      return result;
    }
LABEL_48:
    v14 = DWORD2(v19[0]);
    v15 = WORD1(v17) & 0xBFFF;
    WORD1(v17) &= ~0x4000u;
    DWORD1(v19[0]) = DWORD2(v19[0]);
    *((_QWORD *)&v19[0] + 1) = 0;
    if (DWORD1(v19[0]) == 105)
    {
LABEL_53:
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid workloop owner, possible memory corruption";
      qword_1EDF52D38 = *((_QWORD *)&v20 + 1);
      __break(1u);
      goto LABEL_54;
    }
    if (v14 == 34)
    {
LABEL_54:
      v14 = HIDWORD(v17);
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Broken priority";
      qword_1EDF52D38 = SHIDWORD(v17);
      __break(1u);
      goto LABEL_55;
    }
    if (v14 != 2)
    {
LABEL_55:
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
      qword_1EDF52D38 = v14;
      __break(1u);
      return result;
    }
    v9 = ((unint64_t)LODWORD(v19[0]) << 32) | (v15 << 16) | 2;
    qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
    qword_1EDF52D38 = v9;
    __break(1u);
LABEL_52:
    qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Waking up a kq with cooperative thread request is not supported";
    qword_1EDF52D38 = v9;
    __break(1u);
    goto LABEL_53;
  }
  if ((*((_BYTE *)result + 45) & 4) != 0)
  {
LABEL_31:
    if ((a3 & 0x80000000) == 0)
    {
      if (*(_DWORD *)(v3 + 8) == 0x7FFFFFFF
        || (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 0xFFFFFFFF, memory_order_release) > 1)
      {
        return (_QWORD *)_dispatch_event_loop_leave_deferred_VARIANT_mp((uint64_t)result, a2);
      }
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
      goto LABEL_46;
    }
    return (_QWORD *)_dispatch_kevent_workloop_override_self_0((uint64_t)result, a2, a3);
  }
  if ((*((_BYTE *)result + 45) & 1) == 0)
  {
    if (a3 < 0)
    {
      v13 = *(_DWORD *)(v3 + 8);
      if ((a3 & 1) != 0)
      {
        if (v13 != 0x7FFFFFFF
          && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 0xFFFFFFFF, memory_order_release) <= 1)
        {
LABEL_46:
          qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
          __break(1u);
LABEL_47:
          qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Unsupported wlh configuration";
          qword_1EDF52D38 = v3;
          __break(1u);
          goto LABEL_48;
        }
      }
      else if (v13 != 0x7FFFFFFF
             && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed) <= 0)
      {
        qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
        __break(1u);
        goto LABEL_31;
      }
    }
    *((_BYTE *)result + 45) |= 3u;
    *result = *(_QWORD *)(v3 + 24);
    result[1] = v3;
    *((_DWORD *)result + 4) = BYTE4(a2) & 7;
    return result;
  }
  if ((a3 & 1) != 0
    && *(_DWORD *)(v3 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 0xFFFFFFFE, memory_order_release) <= 2)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
    __break(1u);
    return (_QWORD *)_dispatch_kevent_workloop_override_self_0((uint64_t)result, a2, a3);
  }
  return result;
}

void _dispatch_event_loop_drain_VARIANT_armv81(int a1)
{
  unint64_t StatusReg;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_QWORD *)(StatusReg + 232);
  v4 = *(uint64_t **)(v3 + 24);
  v5 = v4 + 7;
  v6 = a1 & 3;
  while ((*(_BYTE *)(v3 + 45) & 2) == 0)
  {
LABEL_23:
    v19 = *(unsigned __int16 *)(v3 + 40);
    *(_WORD *)(v3 + 40) = 0;
    _dispatch_kq_drain_0((uint64_t)v4, *(_QWORD *)(v3 + 32), v19, a1);
    if (v4 != (uint64_t *)-4)
    {
      if (v4)
      {
        if (*(_BYTE *)(*v4 + 40) == 18)
        {
          v20 = v4[6];
          if (v20)
          {
            if (*(_BYTE *)(v20 + 6))
              _dispatch_event_loop_drain_timers_VARIANT_armv81(v20, 6u);
          }
        }
      }
    }
    if (v6 != 1 || !*(_QWORD *)(StatusReg + 40))
      return;
  }
  v7 = *v5;
  *(_BYTE *)(v3 + 45) &= ~2u;
  v8 = *(_QWORD *)(v3 + 32);
  v9 = *(unsigned __int16 *)(v3 + 40);
  if (*(_WORD *)(v3 + 40))
  {
    v10 = 0;
    v11 = (uint64_t **)(v8 + 8);
    v12 = (uint64_t **)(v8 + 8);
    while (1)
    {
      v13 = *(__int16 *)v12;
      v12 += 9;
      if (v13 == -17 && *(v11 - 1) == v4 && v11[1] == v4)
        break;
      ++v10;
      v11 = v12;
      if (v9 == v10)
      {
        LODWORD(v10) = *(unsigned __int16 *)(v3 + 40);
        goto LABEL_12;
      }
    }
  }
  else
  {
    LODWORD(v10) = 0;
  }
  if ((_DWORD)v10 == (_DWORD)v9)
LABEL_12:
    *(_WORD *)(v3 + 40) = v9 + 1;
  v14 = *(unsigned int *)(v4[3] + 84);
  if ((v14 & 0x8000000) == 0)
  {
    v15 = (v14 >> 8) & 0xF;
    if (v15 <= (BYTE4(v7) & 7u))
      v15 = BYTE4(v7) & 7;
    v16 = v8 + 72 * v10;
    *(_QWORD *)v16 = v4;
    if (v15 <= 1)
      v17 = 1;
    else
      v17 = v15;
    *(_DWORD *)(v16 + 8) = 393199;
    *(_DWORD *)(v16 + 12) = v14 & 0x80000000 | (256 << (v17 - 1)) | 0xFF;
    *(_QWORD *)(v16 + 16) = v4;
    if ((v7 & 2) != 0)
      v18 = 401;
    else
      v18 = 273;
    *(_DWORD *)(v16 + 24) = v18;
    *(_QWORD *)(v16 + 36) = 0;
    *(_QWORD *)(v16 + 28) = 0;
    *(_DWORD *)(v16 + 44) = 0;
    *(_QWORD *)(v16 + 48) = v5;
    *(_QWORD *)(v16 + 56) = v7 & 2 | 0x3700000001;
    *(_QWORD *)(v16 + 64) = v7;
    goto LABEL_23;
  }
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Waking up a kq with cooperative thread request is not supported";
  qword_1EDF52D38 = v14;
  __break(1u);
}

uint64_t _dispatch_kq_drain_0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t StatusReg;
  uint64_t result;
  uint64_t v10;
  _WORD *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _WORD *v15;
  _BYTE v16[32768];
  uint64_t v17;
  _WORD v18[576];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C874D8];
  if ((a4 & 2) == 0)
  {
    v17 = 0x8000;
    MEMORY[0x1E0C86820](a1, a2);
    bzero(v16, 0x8000uLL);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(_QWORD *)(StatusReg + 40) = 0;
    result = _dispatch_kq_poll_0(a1, a2, a3, (uint64_t)v18, 16, (uint64_t)v16, (uint64_t)&v17, a4);
    if (!(_DWORD)result)
      return result;
    if ((v18[5] & 0x4000) != 0)
      *(_QWORD *)(StatusReg + 40) = 1;
    if ((int)result >= 1)
    {
      v10 = result;
      v11 = v18;
      do
      {
        _dispatch_kevent_drain_0((uint64_t)v11);
        v11 += 36;
        --v10;
      }
      while (v10);
    }
    return 0;
  }
  v12 = _dispatch_kq_poll_0(a1, a2, a3, (uint64_t)v18, 16, 0, 0, a4);
  if (v12 < 1)
    return 0;
  v13 = v12;
  result = 0;
  v14 = v13;
  v15 = v18;
  do
  {
    if ((v15[5] & 0x4000) != 0 && *((_QWORD *)v15 + 4))
    {
      _dispatch_kevent_drain_0((uint64_t)v15);
      result = *((unsigned int *)v15 + 8);
    }
    v15 += 36;
    --v14;
  }
  while (v14);
  return result;
}

void _dispatch_event_loop_merge_VARIANT_armv81(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  const void *v7;
  size_t v8;
  uint64_t v9;
  _QWORD v10[2];

  LODWORD(v2) = a2;
  v10[1] = *MEMORY[0x1E0C874D8];
  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  v4 = *(_QWORD **)(v3 + 24);
  MEMORY[0x1E0C86820](a1, a1);
  v6 = (char *)v10 - v5;
  memcpy((char *)v10 - v5, v7, v8);
  *(_WORD *)(v3 + 42) = 14;
  if ((int)v2 >= 1)
  {
    v2 = v2;
    do
    {
      _dispatch_kevent_drain_0((uint64_t)v6);
      v6 += 72;
      --v2;
    }
    while (v2);
  }
  if (v4 == (_QWORD *)-4)
  {
    if (*(_QWORD *)(v3 + 8) && *(_WORD *)(v3 + 40))
      _dispatch_event_loop_drain_VARIANT_armv81(3);
  }
  else if (*(_BYTE *)(*v4 + 40) == 18)
  {
    v9 = v4[6];
    if (v9)
    {
      if (*(_BYTE *)(v9 + 6))
        _dispatch_event_loop_drain_timers_VARIANT_armv81();
    }
  }
}

void _dispatch_kevent_drain_0(uint64_t a1)
{
  int v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(unsigned __int16 *)(a1 + 8);
  if (v1 != 65526)
  {
    if (v1 == 65519)
    {
      _dispatch_kevent_workloop_poke_drain_0(a1);
      return;
    }
    if ((*(_WORD *)(a1 + 10) & 0x4000) != 0)
    {
      if (v1 != 65531 || *(_QWORD *)(a1 + 32) != 3)
      {
        _dispatch_kevent_print_error_0(a1);
        return;
      }
      *(_WORD *)(a1 + 10) = 274;
      *(_DWORD *)(a1 + 24) = -2080374784;
      *(_QWORD *)(a1 + 32) = 0;
    }
    else if (v1 == 65528)
    {
      if (*(_DWORD *)(a1 + 48) || *(_DWORD *)(a1 + 24) >> 14 == 16385)
      {
        _dispatch_kevent_mach_msg_drain_0(a1);
        return;
      }
    }
    else if (v1 == 65529)
    {
      v3 = *(_QWORD *)(a1 + 16);
      v4 = *(_QWORD *)a1;
      *(_BYTE *)(v3 + 6) |= (1 << (*(_QWORD *)a1 % 3u)) | 0x80;
      *(_BYTE *)(v3 + 32 * v4 + 7) = *(_BYTE *)(v3 + 32 * v4 + 7) & 0xFC | 2;
      return;
    }
    v5 = *(_QWORD *)(a1 + 16);
    if ((v5 & 1) != 0)
      _dispatch_kevent_merge_muxed_0(a1);
    else
      _dispatch_kevent_merge_0(v5, a1);
  }
}

uint64_t _dispatch_event_loop_leave_immediate_VARIANT_armv81(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  int v4;
  unsigned __int16 v5;
  uint64_t v6;
  _QWORD v7[2];
  unsigned int v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  v2 = *(_QWORD *)(v1 + 24);
  *(_BYTE *)(v1 + 45) &= 0xFCu;
  v6 = v2;
  v7[0] = 524271;
  v7[1] = v2;
  v8 = 33;
  v9 = 0uLL;
  v10 = 0;
  v11 = v2 + 56;
  v12 = 0;
  v13 = a1;
  result = _dispatch_kq_poll_0(v2, (uint64_t)&v6, 1, (uint64_t)&v6, 1, 0, 0, 131075);
  if ((_DWORD)result)
  {
    v4 = DWORD1(v9);
    v5 = WORD1(v7[0]) & 0xBFFF;
    WORD1(v7[0]) &= ~0x4000u;
    LODWORD(v9) = DWORD1(v9);
    *(_QWORD *)((char *)&v9 + 4) = 0;
    if ((_DWORD)v9 != 105)
    {
      if (v4 != 34)
      {
        if (v4 == 2)
          _dispatch_event_loop_leave_immediate_VARIANT_mp_cold_3(&v8, v5);
        _dispatch_sync_ipc_handoff_begin_VARIANT_mp_cold_1(v4);
      }
      _dispatch_event_loop_leave_immediate_VARIANT_mp_cold_4((int *)v7 + 1);
    }
    _dispatch_event_loop_leave_immediate_VARIANT_mp_cold_2(&v13);
  }
  return result;
}

uint64_t _dispatch_kq_poll_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  __objc2_class **v10;
  __objc2_class **v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  unint64_t StatusReg;
  char v16;

  v16 = 0;
  if (_dispatch_kq_poll_pred != -1)
  {
    dispatch_once_f_VARIANT_armv81(&_dispatch_kq_poll_pred, (uint64_t)&v16, (uint64_t (*)(void))_dispatch_kq_init_0);
    if (v16)
    {
      _dispatch_memorypressure_create_0(*MEMORY[0x1E0C88950]);
      _voucher_activity_debug_channel_init_VARIANT_armv81();
    }
  }
  if (a1)
  {
    v10 = &_dispatch_mgr_q;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      while (1)
      {
        if (a1 == -4)
        {
          v11 = v10;
          a8 |= 0x20u;
          result = kevent_qos();
        }
        else
        {
          v11 = v10;
          if ((a8 & 2) != 0)
            v13 = 1024;
          else
            v13 = 132096;
          a8 |= v13;
          result = kevent_id();
        }
        if ((_DWORD)result != -1)
          return result;
        LODWORD(v14) = **(_DWORD **)(StatusReg + 8);
        if ((int)v14 > 8)
          break;
        v10 = v11;
        if ((_DWORD)v14 != 4)
          goto LABEL_19;
      }
      if ((_DWORD)v14 != 12)
        break;
      _dispatch_temporary_resource_shortage();
      v10 = v11;
    }
    if ((_DWORD)v14 == 9)
    {
      LODWORD(v14) = 9;
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Do not close random Unix descriptors";
      qword_1EDF52D38 = 9;
      __break(1u);
    }
LABEL_25:
    v14 = (int)v14;
    goto LABEL_26;
  }
  LODWORD(v14) = 0;
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Invalid wlh";
  qword_1EDF52D38 = 0;
  __break(1u);
LABEL_19:
  if ((_DWORD)v14 != 2)
    goto LABEL_25;
  if ((~a8 & 0x20002) != 0)
  {
    while (1)
    {
      v14 = 2;
LABEL_26:
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected error from kevent";
      qword_1EDF52D38 = v14;
      __break(1u);
    }
  }
  return 0;
}

uint64_t _dispatch_event_loop_cancel_waiter_VARIANT_armv81(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  char v4;
  int v5;
  char v6;
  unsigned __int16 v7;
  uint64_t v8;
  _QWORD v9[2];
  unsigned int v10;
  __int128 v11;
  _BYTE v12[28];

  v2 = *(_QWORD *)(a1 + 48);
  while (1)
  {
    v8 = *(unsigned int *)(a1 + 100);
    v9[0] = 458735;
    v9[1] = v2;
    v10 = 40;
    v11 = 0u;
    memset(v12, 0, sizeof(v12));
    result = _dispatch_kq_poll_0(v2, &v8, 1, &v8, 1, 0, 0, 3);
    if (!(_DWORD)result)
      break;
    v4 = *(_BYTE *)(a1 + 106);
    v5 = DWORD1(v11);
    v6 = BYTE2(v9[0]);
    v7 = WORD1(v9[0]) & 0xBFFF;
    WORD1(v9[0]) &= ~0x4000u;
    LODWORD(v11) = DWORD1(v11);
    *(_QWORD *)((char *)&v11 + 4) = 0;
    if ((_DWORD)v11 != 2)
    {
      if (v5 != 34)
      {
        if (v5 == 105)
          _dispatch_event_loop_cancel_waiter_VARIANT_mp_cold_2((uint64_t)&v8);
        _dispatch_sync_ipc_handoff_begin_VARIANT_mp_cold_1(v5);
      }
      _dispatch_event_loop_leave_immediate_VARIANT_mp_cold_4((int *)v9 + 1);
    }
    if ((v4 & 0x20) != 0 || (v6 & 2) == 0 || (v10 & 0x28) != 0x28)
      _dispatch_event_loop_cancel_waiter_VARIANT_mp_cold_3(v10, v7);
    MEMORY[0x18D767268](*(unsigned int *)(a1 + 100), 4, 1);
  }
  return result;
}

uint64_t _dispatch_event_loop_wake_owner_VARIANT_armv81(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t StatusReg;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 *v18;
  __int16 *v19;
  int v20;
  int v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 *v32;
  __int16 *v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned __int16 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v5 = result;
  v47 = *MEMORY[0x1E0C874D8];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_QWORD *)(result + 48);
  if (a2 == -4
    || (v8 = *(_QWORD *)(StatusReg + 232)) == 0
    || *(_QWORD *)(v8 + 24) != a2
    || (*(_BYTE *)(v8 + 45) &= 0xFCu, v7 != a2))
  {
    if (((a4 ^ a3) & 1) != 0)
    {
      v38 = a2;
      v39 = 524271;
      v40 = a2;
      v41 = 257;
      v42 = 0uLL;
      v43 = 0;
      v9 = 1;
      v44 = a2 + 56;
      v45 = 1;
      v46 = a4;
      if ((a4 & 0x2000000000) == 0)
        goto LABEL_10;
    }
    else
    {
      v9 = 0;
      if ((a4 & 0x2000000000) == 0)
      {
LABEL_10:
        if ((a3 & 0x2000000002) == 0x2000000000 && (*(char *)(result + 106) & 0x80000000) == 0)
        {
          v11 = *(unsigned int *)(StatusReg + 24);
          v12 = &v38 + 9 * v9;
          *v12 = v11;
          v12[1] = 458735;
          v12[2] = a2;
          *((_DWORD *)v12 + 6) = 40;
          *(_OWORD *)((char *)v12 + 28) = 0u;
          *(_OWORD *)((char *)v12 + 44) = 0u;
          *((_DWORD *)v12 + 15) = 0;
          v12[8] = a3;
          v9 = (v9 + 1);
        }
        result = _dispatch_kq_poll_0(a2, &v38, v9, &v38, v9, 0, 0, 3);
        v14 = v7 != -4 && v7 != a2;
        if ((_DWORD)result)
        {
          if (v14)
            _dispatch_bug_deprecated("Changing target queue hierarchy with a dispatch_sync in flight");
          v36 = DWORD1(v42);
          v37 = WORD1(v39) & 0xBFFF;
          WORD1(v39) &= ~0x4000u;
          LODWORD(v42) = DWORD1(v42);
          *(_QWORD *)((char *)&v42 + 4) = 0;
          if ((_DWORD)v42 != 105)
          {
            if (v36 != 34)
            {
              if (v36 == 2)
                _dispatch_event_loop_wake_owner_VARIANT_mp_cold_4((uint64_t)&v38, v37);
              _dispatch_sync_ipc_handoff_begin_VARIANT_mp_cold_1(v36);
            }
            _dispatch_event_loop_wake_owner_VARIANT_mp_cold_5((uint64_t)&v38);
          }
          _dispatch_event_loop_cancel_waiter_VARIANT_mp_cold_2((uint64_t)&v38);
        }
        if (v14)
        {
          _dispatch_bug_deprecated("Changing target queue hierarchy with a dispatch_sync in flight");
          return _dispatch_event_loop_cancel_waiter_VARIANT_armv81(v5);
        }
        return result;
      }
    }
    v10 = &v38 + 9 * v9;
    *v10 = *(unsigned int *)(result + 100);
    v10[1] = 655343;
    v10[2] = a2;
    *((_DWORD *)v10 + 6) = 136;
    *(_OWORD *)((char *)v10 + 44) = 0u;
    *(_OWORD *)((char *)v10 + 28) = 0u;
    *((_DWORD *)v10 + 15) = 0;
    v10[8] = a4;
    v10[6] = a2 + 56;
    v9 = (v9 + 1);
    goto LABEL_10;
  }
  v15 = *(_QWORD *)(v8 + 32);
  v16 = *(unsigned __int16 *)(v8 + 40);
  if (*(_WORD *)(v8 + 40))
  {
    v17 = 0;
    v18 = (__int16 *)(v15 + 8);
    v19 = (__int16 *)(v15 + 8);
    while (1)
    {
      v20 = *v19;
      v19 += 36;
      if (v20 == -17 && *((_QWORD *)v18 - 1) == a2 && *((_QWORD *)v18 + 1) == a2)
        break;
      ++v17;
      v18 = v19;
      if (v16 == v17)
      {
        LODWORD(v17) = *(unsigned __int16 *)(v8 + 40);
        goto LABEL_32;
      }
    }
  }
  else
  {
    LODWORD(v17) = 0;
  }
  if ((_DWORD)v17 == (_DWORD)v16)
LABEL_32:
    *(_WORD *)(v8 + 40) = v16 + 1;
  if ((a4 & 1) != 0)
  {
    result = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 84);
    if ((result & 0x8000000) != 0)
      _dispatch_event_loop_leave_deferred_VARIANT_mp_cold_1(result);
    v25 = (result >> 8) & 0xF;
    if (v25 <= (BYTE4(a4) & 7u))
      v25 = BYTE4(a4) & 7;
    if (v25 <= 1)
      LOBYTE(v25) = 1;
    v26 = 256 << (v25 - 1);
    v24 = a4 & 2 | 0x3700000001;
    v21 = result & 0x80000000 | v26 | 0xFF;
    if ((a4 & 2) != 0)
      v22 = 401;
    else
      v22 = 273;
    v23 = 5;
  }
  else
  {
    v21 = 0;
    v22 = 257;
    v23 = 7;
    v24 = 1;
  }
  v27 = v15 + 72 * v17;
  *(_QWORD *)v27 = a2;
  *(_WORD *)(v27 + 8) = -17;
  *(_WORD *)(v27 + 10) = v23;
  *(_DWORD *)(v27 + 12) = v21;
  *(_QWORD *)(v27 + 16) = a2;
  *(_DWORD *)(v27 + 24) = v22;
  *(_QWORD *)(v27 + 36) = 0;
  *(_QWORD *)(v27 + 28) = 0;
  *(_DWORD *)(v27 + 44) = 0;
  *(_QWORD *)(v27 + 48) = a2 + 56;
  *(_QWORD *)(v27 + 56) = v24;
  *(_QWORD *)(v27 + 64) = a4;
  v28 = *(unsigned int *)(v5 + 100);
  v29 = *(_QWORD *)(v8 + 32);
  v30 = *(unsigned __int16 *)(v8 + 40);
  if (*(_WORD *)(v8 + 40))
  {
    v31 = 0;
    v32 = (__int16 *)(v29 + 8);
    v33 = (__int16 *)(v29 + 8);
    while (1)
    {
      v34 = *v33;
      v33 += 36;
      if (v34 == -17 && *((_QWORD *)v32 - 1) == a2 && *((_QWORD *)v32 + 1) == v28)
        break;
      ++v31;
      v32 = v33;
      if (v30 == v31)
      {
        LODWORD(v31) = *(unsigned __int16 *)(v8 + 40);
        goto LABEL_53;
      }
    }
  }
  else
  {
    LODWORD(v31) = 0;
  }
  if ((_DWORD)v31 == (_DWORD)v30)
LABEL_53:
    *(_WORD *)(v8 + 40) = v30 + 1;
  v35 = v29 + 72 * v31;
  *(_QWORD *)v35 = v28;
  *(_QWORD *)(v35 + 8) = 655343;
  *(_QWORD *)(v35 + 16) = a2;
  *(_DWORD *)(v35 + 24) = 136;
  *(_OWORD *)(v35 + 44) = 0u;
  *(_OWORD *)(v35 + 28) = 0u;
  *(_DWORD *)(v35 + 60) = 0;
  *(_QWORD *)(v35 + 64) = a4;
  *(_QWORD *)(v35 + 48) = a2 + 56;
  return result;
}

void _dispatch_event_loop_wait_for_ownership_VARIANT_armv81(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t StatusReg;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  char v19;
  uint64_t v20;
  int add_explicit;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C874D8];
  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(v2 + 56);
  if ((v3 & 0xFFFFFFFD) == 1)
  {
    v4 = *(_DWORD *)(*(_QWORD *)(v2 + 24) + 84);
    if ((v4 & 0x8000000) != 0)
      _dispatch_event_loop_leave_deferred_VARIANT_mp_cold_1(v4);
    v5 = (v4 >> 8) & 0xF;
    if (v5 <= (BYTE4(v3) & 7u))
      v5 = BYTE4(v3) & 7;
    v22 = v2;
    if (v5 <= 1)
      LOBYTE(v5) = 1;
    LODWORD(v23) = 393199;
    HIDWORD(v23) = v4 & 0x80000000 | (256 << (v5 - 1)) | 0xFF;
    v24 = v2;
    if ((v3 & 2) != 0)
      v6 = 401;
    else
      v6 = 273;
    v25 = v6;
    v27 = 0;
    v26 = 0;
    v28 = 0;
    v29 = v2 + 56;
    v30 = v3 & 2 | 0x3700000001;
    v31 = v3;
    v7 = 1;
  }
  else if ((~v3 & 0x2800000000) != 0)
  {
    v7 = 0;
  }
  else
  {
    v8 = v3 & 0xFFFFFFFC | 3;
    if ((v3 & 0xFFFFFFFC) == 0)
      v8 = 0;
    v22 = v8;
    v23 = 655343;
    v24 = v2;
    v25 = 392;
    v27 = 0;
    v26 = 0;
    v28 = 0;
    v30 = 0x3800000002;
    v31 = v3;
    v7 = 1;
    v29 = v2 + 56;
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    v10 = v7 + 1;
    v11 = *(_QWORD *)(StatusReg + 32);
    v12 = &v22 + 9 * v7;
    if ((v11 & 0x3FFF00) == 0)
      LODWORD(v11) = 2303;
    *v12 = *(unsigned int *)(a1 + 100);
    *((_DWORD *)v12 + 2) = 655343;
    *((_DWORD *)v12 + 3) = v11;
    v12[2] = v2;
    *((_DWORD *)v12 + 6) = 4;
    *(_OWORD *)((char *)v12 + 28) = 0u;
    *(_OWORD *)((char *)v12 + 44) = 0u;
    *((_DWORD *)v12 + 15) = 0;
    v12[8] = v3;
    v13 = _dispatch_kq_poll_0(v2, (uint64_t)&v22, v10, (uint64_t)&v22, v10, 0, 0, 3);
    if (v13 >= 1)
    {
      v14 = 0;
      v15 = (uint64_t *)((char *)&v26 + 4);
      do
      {
        v16 = *((unsigned int *)v15 - 2);
        v17 = *v15;
        v18 = *((_WORD *)v15 - 11) & 0xBFFF;
        *((_WORD *)v15 - 11) = v18;
        *((_DWORD *)v15 - 1) = v17;
        *v15 = 0;
        if ((_DWORD)v17 != 4)
        {
          switch((_DWORD)v17)
          {
            case 2:
              _dispatch_event_loop_cancel_waiter_VARIANT_mp_cold_3(v16, v18);
            case 0x22:
              _dispatch_event_loop_wait_for_ownership_VARIANT_mp_cold_5((uint64_t)&v22, v14);
            case 0x69:
              _dispatch_event_loop_wait_for_ownership_VARIANT_mp_cold_4((uint64_t)&v22, v14);
          }
LABEL_37:
          _dispatch_sync_ipc_handoff_begin_VARIANT_mp_cold_1(v17);
        }
        if ((v16 & 4) == 0)
          goto LABEL_37;
        v15 += 9;
        ++v14;
      }
      while (v13 != v14);
    }
    if (!v13)
      break;
    v7 = 0;
    v3 = v31;
  }
  v19 = *(_BYTE *)(a1 + 106);
  if ((v19 & 0x20) != 0)
  {
    _dispatch_event_loop_cancel_waiter_VARIANT_armv81(a1);
    v19 = *(_BYTE *)(a1 + 106) & 0xDF;
    *(_BYTE *)(a1 + 106) = v19;
  }
  if ((v19 & 0x40) != 0)
  {
    v20 = *(_QWORD *)(a1 + 48);
    add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v20 + 96), 0xFFFFFFFF, memory_order_relaxed);
    if (add_explicit <= 0)
    {
      if (add_explicit < 0)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      *(_QWORD *)(v20 + 56) = 0xDEAD000000000000;
      _dispatch_object_dealloc_VARIANT_mp((void *)v20);
    }
  }
}

uint64_t _dispatch_event_loop_ensure_ownership_VARIANT_armv81(uint64_t a1)
{
  uint64_t result;
  int v2;
  unsigned __int16 v3;
  uint64_t v4;
  _QWORD v5[2];
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  int v9;
  uint64_t v10;

  v4 = *(unsigned int *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  v5[0] = 655343;
  v5[1] = a1;
  v6 = 136;
  v8 = 0u;
  v7 = 0u;
  v9 = 0;
  v10 = v4;
  *(_QWORD *)((char *)&v8 + 4) = a1 + 56;
  result = _dispatch_kq_poll_0(a1, &v4, 1, &v4, 1, 0, 0, 3);
  if ((_DWORD)result)
  {
    v2 = DWORD1(v7);
    v3 = WORD1(v5[0]) & 0xBFFF;
    WORD1(v5[0]) &= ~0x4000u;
    LODWORD(v7) = DWORD1(v7);
    *(_QWORD *)((char *)&v7 + 4) = 0;
    if ((_DWORD)v7 != 105)
    {
      if (v2 != 34)
      {
        if (v2 == 2)
          _dispatch_event_loop_leave_immediate_VARIANT_mp_cold_3(&v6, v3);
        _dispatch_sync_ipc_handoff_begin_VARIANT_mp_cold_1(v2);
      }
      _dispatch_event_loop_leave_immediate_VARIANT_mp_cold_4((int *)v5 + 1);
    }
    _dispatch_event_loop_leave_immediate_VARIANT_mp_cold_2(&v10);
  }
  return result;
}

uint64_t _dispatch_event_loop_end_ownership_VARIANT_armv81(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v5;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  uint64_t *v14;
  uint64_t result;
  const char *v16;
  int v17;
  unsigned int add_explicit;
  BOOL v19;
  int v20;
  int v21;
  unsigned __int16 v22;
  uint64_t v23;
  __int16 v24;
  __int16 v25;
  int v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v5 = a3;
  v34 = *MEMORY[0x1E0C874D8];
  if ((a3 & 1) != 0)
  {
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 84);
    if ((v8 & 0x8000000) != 0)
      _dispatch_event_loop_leave_deferred_VARIANT_mp_cold_1(v8);
    v9 = (v8 >> 8) & 0xF;
    if (v9 <= (BYTE4(a3) & 7u))
      v9 = BYTE4(a3) & 7;
    if (v9 <= 1)
      LOBYTE(v9) = 1;
    v10 = 256 << (v9 - 1);
    v11 = a3 & 2 | 0x3700000001;
    LODWORD(a3) = v8 & 0x80000000 | v10 | 0xFF;
    if ((v5 & 2) != 0)
      v12 = 401;
    else
      v12 = 273;
    v13 = 5;
  }
  else
  {
    a3 = 0;
    if ((a2 & 1) == 0)
      goto LABEL_14;
    v12 = 257;
    v13 = 7;
    v11 = 1;
  }
  v23 = a1;
  v24 = -17;
  v25 = v13;
  v26 = a3;
  v27 = a1;
  v28 = v12;
  v29 = 0uLL;
  v30 = 0;
  v31 = a1 + 56;
  v32 = v11;
  a3 = 1;
  v33 = v5;
LABEL_14:
  if ((a2 & 2) == 0)
  {
    v14 = &v23 + 9 * a3;
    *v14 = *(unsigned int *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    v14[1] = 458735;
    a3 = (a3 + 1);
    v14[2] = a1;
    *((_DWORD *)v14 + 6) = 40;
    *(_OWORD *)((char *)v14 + 28) = 0u;
    *(_OWORD *)((char *)v14 + 44) = 0u;
    *((_DWORD *)v14 + 15) = 0;
    v14[8] = v5;
  }
  result = _dispatch_kq_poll_0(a1, &v23, a3, &v23, a3, 0, 0, 3);
  if ((_DWORD)result)
  {
    v21 = DWORD1(v29);
    v22 = v25 & 0xBFFF;
    v25 &= ~0x4000u;
    LODWORD(v29) = DWORD1(v29);
    *(_QWORD *)((char *)&v29 + 4) = 0;
    if ((_DWORD)v29 != 105)
    {
      if (v21 != 34)
      {
        if (v21 == 2)
          _dispatch_event_loop_wake_owner_VARIANT_mp_cold_4((uint64_t)&v23, v22);
        _dispatch_sync_ipc_handoff_begin_VARIANT_mp_cold_1(v21);
      }
      _dispatch_event_loop_wake_owner_VARIANT_mp_cold_5((uint64_t)&v23);
    }
    _dispatch_event_loop_cancel_waiter_VARIANT_mp_cold_2((uint64_t)&v23);
  }
  v17 = (a2 & 1 | (2 * (a4 & 1))) - (v5 & 1);
  if (v17 >= 1 && *(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), (v5 & 1) - (a2 & 1 | (2 * (a4 & 1))), memory_order_release);
    v19 = __OFSUB__(add_explicit, v17);
    v20 = add_explicit - v17;
    if ((v20 < 0) ^ v19 | (v20 == 0))
    {
      if (v20 < 0)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      return _os_object_dispose((void *)a1, v16);
    }
  }
  return result;
}

void _dispatch_event_loop_timer_arm_VARIANT_armv81(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v9 = a2 / 3uLL;
  v10 = *(_QWORD *)(a5 + 8 * v9);
  if (!v10)
  {
    mach_get_times();
    *(_QWORD *)(a5 + 16) = 0;
    v10 = *(_QWORD *)(a5 + 8 * v9);
  }
  v11 = v10 + a3;
  if (_dispatch_timers_force_max_leeway)
    v12 = 0;
  else
    v12 = a4;
  if (_dispatch_timers_force_max_leeway)
    v13 = v11 + a4;
  else
    v13 = v11;
  _dispatch_event_loop_timer_program_0(a1, a2, v13, v12, 5);
  if (a2 - 6 <= 2 && _dispatch_mach_calendar_pred != -1)
    dispatch_once_f_VARIANT_armv81(&_dispatch_mach_calendar_pred, 0, (uint64_t (*)(void))_dispatch_mach_host_notify_update_0);
}

double _dispatch_event_loop_timer_program_0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  uint64_t v6;
  int v7;
  double result;
  unint64_t v9;
  __int16 v10;
  __int16 v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 216);
  if (v6 == -4)
  {
    v7 = 0x2000000;
  }
  else if (*(_BYTE *)(a1 + 32 * a2 + 5))
  {
    v7 = (256 << (*(_BYTE *)(a1 + 32 * a2 + 5) - 1)) | 0xFF;
  }
  else
  {
    v7 = 255;
  }
  v9 = a2 | 0xFFFFFFFFFFFFFF00;
  v10 = -7;
  v11 = a5 | 0x10;
  v12 = v7;
  v13 = a1;
  v14 = _dispatch_timer_index_to_fflags_0[a2];
  v15 = 0;
  v16 = a3;
  v17 = 0;
  v19 = 0u;
  v18 = a4;
  *(_QWORD *)&result = _dispatch_kq_deferred_update_0(v6, (uint64_t)&v9).n128_u64[0];
  return result;
}

double _dispatch_event_loop_timer_delete_VARIANT_armv81(uint64_t a1, unsigned int a2)
{
  return _dispatch_event_loop_timer_program_0(a1, a2, 0, 0, 2);
}

char *_dispatch_source_proc_create_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  char *result;

  v3 = a3;
  result = _dispatch_unote_create_with_handle_VARIANT_armv81(a1, a2, a3);
  if ((v3 & 0x4000000) != 0)
  {
    if (result)
      result[29] |= 4u;
  }
  return result;
}

char *_dispatch_source_vm_create_0(uint64_t a1, uint64_t a2)
{
  char *result;

  result = _dispatch_unote_create_without_handle_VARIANT_armv81((uint64_t)&_dispatch_source_type_memorypressure_VARIANT_armv81, a2, 2);
  if (result)
    result[29] |= 0x10u;
  return result;
}

uint64_t _dispatch_get_mach_host_port_VARIANT_armv81()
{
  if (_dispatch_mach_host_port_pred != -1)
    dispatch_once_f_VARIANT_armv81(&_dispatch_mach_host_port_pred, 0, (uint64_t (*)(void))_dispatch_mach_host_port_init_0);
  return _dispatch_mach_host_port;
}

void _dispatch_mach_host_port_init_0()
{
  mach_port_t v0;
  kern_return_t special_port;
  int v2;
  kern_return_t v3;
  mach_port_t port;

  port = 0;
  v0 = MEMORY[0x18D766C14]();
  special_port = host_get_special_port(v0, -1, 1, &port);
  if (special_port == -301)
    _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
  v2 = special_port;
  if (special_port)
  {
    if (special_port != 4)
      _dispatch_bug(2859, special_port);
  }
  else
  {
    v3 = mach_port_deallocate(*MEMORY[0x1E0C883F0], v0);
    if (v3 == -301)
      _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
    v2 = v3;
    v0 = port;
  }
  if (!v0)
    _dispatch_mach_host_port_init_cold_1(v2);
  _dispatch_mach_host_port = v0;
}

uint64_t _dispatch_mach_notify_port_deleted_VARIANT_armv81(uint64_t a1, uint64_t a2)
{
  _dispatch_mach_notify_merge_0(a2, 4, 1);
  return 0;
}

uint64_t _dispatch_mach_notify_merge_0(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;

  v3 = _dispatch_sources[((unint64_t)result >> 8) & 0x3F];
  if (v3)
  {
    while (*(_QWORD *)(v3 + 24) != result || *(__int16 *)(v3 + 32) != -24)
    {
      v3 = *(_QWORD *)v3;
      if (!v3)
        return result;
    }
    *(_QWORD *)(v3 + 56) &= 0xFFFFFFFFFFFFFFF2;
    if ((a3 & 1) != 0 || (result = _dispatch_kevent_mach_notify_resume_0(v3, a2, 0), (result & 1) == 0))
    {
      *(_WORD *)(v3 + 34) |= 2u;
      v6 = 16;
    }
    else
    {
      v6 = 4;
    }
    *(_QWORD *)(v3 + 64) = 0;
    v7 = *(uint64_t **)(v3 + 16);
    if (v7)
    {
      do
      {
        v8 = (uint64_t *)*v7;
        if (*(_QWORD *)(v3 + 64))
          break;
        v9 = (_DWORD)v7[7] & a2;
        *((_BYTE *)v7 + 54) = 0;
        if ((a3 & 1) != 0 || (_DWORD)v9)
        {
          if (*(_DWORD *)(7 - v7[4]) != 0x7FFFFFFF
            && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(7 - v7[4]), 2u, memory_order_relaxed) <= 0)
          {
            qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
            __break(1u);
            return result;
          }
          if (a3)
            _dispatch_unote_unregister_muxed_VARIANT_armv81(v7 + 3);
          v10 = v7[3];
          if ((_DWORD)v9)
          {
            if (*(_BYTE *)(v10 + 9) == 2)
              atomic_fetch_or_explicit(v7 + 12, v9, memory_order_relaxed);
          }
          result = (*(uint64_t (**)(uint64_t *, uint64_t, unint64_t, _QWORD))(v10 + 48))(v7 + 3, v6, v9, 0);
        }
        v7 = v8;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t _dispatch_mach_notify_dead_name_VARIANT_armv81(uint64_t a1, uint64_t a2)
{
  mach_port_name_t v2;

  v2 = a2;
  _dispatch_mach_notify_merge_0(a2, 1, 1);
  if (mach_port_deallocate(*MEMORY[0x1E0C883F0], v2) == -301)
    _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
  return 0;
}

uint64_t _dispatch_mach_notify_send_possible_VARIANT_armv81(uint64_t a1, uint64_t a2)
{
  _dispatch_mach_notify_merge_0(a2, 8, 0);
  return 0;
}

char *_dispatch_source_mach_send_create_0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 <= 1)
    a3 = 1;
  if (!a2)
    a2 = 0xFFFFFFFFLL;
  return _dispatch_unote_create_with_handle_VARIANT_armv81(a1, a2, a3);
}

uint64_t _dispatch_mach_send_update_0(uint64_t a1)
{
  int v1;
  int v2;

  v1 = *(_DWORD *)(a1 + 48);
  if ((*(_WORD *)(a1 + 34) & 2) != 0)
  {
    v2 = 0;
  }
  else
  {
    v2 = *(_DWORD *)(a1 + 48);
    v1 = 0;
  }
  return _dispatch_kevent_mach_notify_resume_0(a1, v2, v1);
}

char *_dispatch_mach_send_create_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *result;

  result = _dispatch_unote_create_without_handle_VARIANT_armv81(a1, a2, a3);
  if (result)
  {
    *((_DWORD *)result + 22) = 0x80000000;
    *((_QWORD *)result + 7) = 0;
  }
  return result;
}

void _dispatch_mach_notification_event_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(unsigned int *)(a1 + 24);
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected non message event";
  qword_1EDF52D38 = v1;
  __break(1u);
}

void _dispatch_mach_notification_merge_msg_0(uint64_t a1, int a2, mach_msg_header_t *a3)
{
  int v6;
  uint64_t v8;
  _OWORD v9[2];
  int v10;

  v10 = 0;
  memset(v9, 0, sizeof(v9));
  if (a3->msgh_id > 77 || _dispatch_mach_msg_sender_is_kernel_VARIANT_mp((uint64_t)a3))
  {
    v6 = libdispatch_internal_protocol_server(a3, (uint64_t)v9);
    if (v6 || v10 != -303)
    {
      if (v6)
      {
        if (v10 == -305 || v10 == 0)
          goto LABEL_13;
        _dispatch_bug(2806, v10);
        if (v10 == -305 || !v10)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((a3->msgh_id & 0xFFFFFFFE) == 0x3B6)
    {
      byte_1ECCEA61F |= 2u;
      byte_1ECCEA63F |= 2u;
      byte_1ECCEA65F |= 2u;
      byte_1ECCEA55E |= 0x87u;
      _dispatch_mach_host_notify_update_0();
      v10 = 0;
      goto LABEL_13;
    }
    v8 = 2805;
  }
  else
  {
    v8 = 2790;
  }
  _dispatch_bug(v8, 0);
LABEL_18:
  mach_msg_destroy(a3);
LABEL_13:
  if ((a2 & 0x10000) != 0)
    free(a3);
  _dispatch_unote_resume_VARIANT_armv81(a1);
}

uint64_t _dispatch_mach_recv_direct_merge_evt_0(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4)
{
  if (((unsigned __int16)a2 & 0x200) != 0)
    _dispatch_mach_recv_direct_merge_evt_cold_1();
  return _dispatch_source_merge_evt_VARIANT_armv81(a1, a2, a3, a4);
}

void _dispatch_mach_reply_merge_evt_0(uint64_t a1, uint64_t a2, int a3)
{
  if ((a2 & 0x200) == 0)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected event";
    qword_1EDF52D38 = a3 | (unint64_t)(a2 << 32);
    __break(1u);
  }
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected EV_VANISHED (do not destroy random mach ports)";
  __break(1u);
}

uint64_t _dispatch_kevent_workloop_override_self_0(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t add_explicit;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD *)(result + 24);
  *(_BYTE *)(result + 45) &= ~2u;
  add_explicit = *(unsigned int *)(*(_QWORD *)(v3 + 24) + 84);
  if ((add_explicit & 0x8000000) != 0)
    goto LABEL_15;
  v6 = (add_explicit >> 8) & 0xF;
  if (v6 <= (BYTE4(a2) & 7u))
    v6 = BYTE4(a2) & 7;
  v10 = v3;
  if (v6 <= 1)
    LOBYTE(v6) = 1;
  v11 = 393199;
  v12 = add_explicit & 0x80000000 | (256 << (v6 - 1)) | 0xFF;
  v13 = v3;
  if ((a2 & 2) != 0)
    v7 = 401;
  else
    v7 = 273;
  v14 = v7;
  v15 = 0uLL;
  v16 = 0;
  v17 = v3 + 56;
  v18 = a2 & 2 | 0x3700000001;
  v19 = a2;
  result = _dispatch_kq_poll_0(v3, &v10, 1, &v10, 1, 0, 0, 3);
  if ((_DWORD)result)
  {
LABEL_16:
    v8 = DWORD1(v15);
    v9 = HIWORD(v11) & 0xBFFF;
    HIWORD(v11) &= ~0x4000u;
    LODWORD(v15) = DWORD1(v15);
    *(_QWORD *)((char *)&v15 + 4) = 0;
    if ((_DWORD)v15 != 105)
    {
      if (v8 == 34)
      {
LABEL_21:
        v8 = v12;
        qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Broken priority";
        qword_1EDF52D38 = v12;
        __break(1u);
        goto LABEL_22;
      }
      if (v8 != 2)
      {
LABEL_22:
        qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
        qword_1EDF52D38 = v8;
        __break(1u);
        return result;
      }
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
      qword_1EDF52D38 = ((unint64_t)v14 << 32) | (v9 << 16) | 2;
      __break(1u);
    }
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid workloop owner, possible memory corruption";
    qword_1EDF52D38 = v19;
    __break(1u);
    goto LABEL_21;
  }
  if ((a3 & 1) != 0 && *(_DWORD *)(v3 + 8) != 0x7FFFFFFF)
  {
    add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 0xFFFFFFFE, memory_order_release);
    if ((int)add_explicit <= 2)
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
LABEL_15:
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Waking up a kq with cooperative thread request is not supported";
      qword_1EDF52D38 = add_explicit;
      __break(1u);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t _dispatch_kevent_workloop_poke_drain_0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t add_explicit;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(result + 24);
  if ((v2 & 0x80000000) != 0)
    return result;
  v3 = result;
  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  result = *(_QWORD *)(result + 16);
  v5 = *(unsigned __int16 *)(v3 + 10);
  if ((v5 & 0x4000) == 0)
  {
    if ((*(_BYTE *)(v4 + 45) & 1) != 0)
      return result;
    *(_BYTE *)(v4 + 45) |= 1u;
    if (*(_DWORD *)(result + 8) == 0x7FFFFFFF)
      goto LABEL_6;
    add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 1u, memory_order_relaxed);
    if ((int)add_explicit > 0)
      goto LABEL_6;
    goto LABEL_32;
  }
  v1 = *(_QWORD *)(v3 + 32);
  *(_DWORD *)(v3 + 28) = v1;
  add_explicit = *(_QWORD *)(v3 + 64);
  v5 &= ~0x4000uLL;
  *(_WORD *)(v3 + 10) = v5;
  *(_QWORD *)(v3 + 32) = 0;
  if ((_DWORD)v1 != 70)
  {
LABEL_33:
    switch((_DWORD)v1)
    {
      case 0x69:
LABEL_38:
        qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid workloop owner, possible memory corruption";
        qword_1EDF52D38 = add_explicit;
        __break(1u);
        goto LABEL_39;
      case 0x22:
LABEL_39:
        v16 = *(int *)(v3 + 12);
        qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Broken priority";
        qword_1EDF52D38 = v16;
        __break(1u);
        goto LABEL_40;
      case 2:
        qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
        qword_1EDF52D38 = (v5 << 16) | (v2 << 32) | 2;
        __break(1u);
        break;
    }
LABEL_37:
    add_explicit = (int)v1;
    qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
    qword_1EDF52D38 = (int)v1;
    __break(1u);
    goto LABEL_38;
  }
  if ((v2 & 0x100) != 0)
    goto LABEL_37;
  if (!*(_QWORD *)(v3 + 48))
    goto LABEL_37;
  v2 = *(_QWORD *)(v3 + 56);
  if (!v2)
    goto LABEL_37;
  if ((add_explicit & 0x2000000000) == 0)
    return result;
  if ((add_explicit & 1) == 0)
  {
    v9 = 0;
    v10 = 1;
    v11 = 7;
    v12 = 1;
    goto LABEL_28;
  }
  if ((add_explicit & 0xFFFFFFFC) != 0)
  {
    v4 = *(unsigned int *)(*(_QWORD *)(result + 24) + 84);
    if ((v4 & 0x8000000) != 0)
    {
LABEL_40:
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Waking up a kq with cooperative thread request is not supported";
      qword_1EDF52D38 = v4;
      __break(1u);
      return result;
    }
    v13 = (v4 >> 8) & 0xF;
    if (v13 <= (BYTE4(add_explicit) & 7u))
      v13 = BYTE4(add_explicit) & 7;
    if (v13 <= 1)
      LOBYTE(v13) = 1;
    v15 = add_explicit & 2;
    v14 = v15 == 0;
    v10 = v15 | 0x3700000001;
    v9 = v4 & 0x80000000 | (256 << (v13 - 1)) | 0xFF;
    if (v14)
      v12 = 273;
    else
      v12 = 401;
    v11 = 5;
LABEL_28:
    *(_QWORD *)v3 = result;
    *(_WORD *)(v3 + 8) = -17;
    *(_WORD *)(v3 + 10) = v11;
    *(_DWORD *)(v3 + 12) = v9;
    *(_DWORD *)(v3 + 24) = v12;
    *(_QWORD *)(v3 + 28) = 0;
    *(_QWORD *)(v3 + 36) = 0;
    *(_DWORD *)(v3 + 44) = 0;
    *(_QWORD *)(v3 + 48) = result + 56;
    *(_QWORD *)(v3 + 56) = v10;
    return _dispatch_kq_deferred_update_0();
  }
  *(_BYTE *)(v4 + 45) |= 1u;
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 1u, memory_order_relaxed);
    if ((int)add_explicit <= 0)
    {
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
LABEL_32:
      qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
      goto LABEL_33;
    }
  }
LABEL_6:
  *(_QWORD *)v4 = *(_QWORD *)(result + 24);
  *(_QWORD *)(v4 + 8) = result;
  v7 = __clz(__rbit32((*(_DWORD *)(v3 + 12) >> 8) & 0x3FFF));
  if (((*(_DWORD *)(v3 + 12) >> 8) & 0x3FFF) != 0)
    v8 = v7 + 1;
  else
    v8 = 0;
  *(_DWORD *)(v4 + 16) = v8;
  return result;
}

void _dispatch_kevent_print_error_0(uint64_t a1)
{
  __int16 v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;

  v2 = *(_WORD *)(a1 + 10);
  if ((v2 & 2) != 0)
  {
    if ((*(_WORD *)(a1 + 10) & 0x100) != 0 && *(_QWORD *)(a1 + 32) == 36)
      return;
    v3 = 0;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 16);
    if ((v3 & 1) != 0)
    {
      v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
      v3 = 0;
      v2 |= *(_WORD *)(v4 + 34);
      goto LABEL_10;
    }
    if (v3 && !*(_QWORD *)(v3 + 16))
    {
      v2 |= 1u;
LABEL_10:
      *(_WORD *)(a1 + 10) = v2;
    }
  }
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    if (v5 == 34)
    {
      v11 = *(int *)(a1 + 12);
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Invalid kevent priority";
      qword_1EDF52D38 = v11;
      __break(1u);
    }
    else
    {
      v6 = _evfiltstr_0(*(__int16 *)(a1 + 8));
      v7 = *(_QWORD *)(a1 + 16);
      v8 = "enable";
      if ((v2 & 4) == 0)
        v8 = "monitor";
      if ((v2 & 1) != 0)
        v9 = "add";
      else
        v9 = v8;
      if ((v2 & 2) != 0)
        v9 = "delete";
      if (v7)
        v10 = v9;
      else
        v10 = 0;
      _dispatch_bug_kevent_client("kevent", v6, v10, v5, *(_QWORD *)a1, v7, v3);
    }
  }
}

void _dispatch_kevent_mach_msg_drain_0(uint64_t a1)
{
  _DWORD *v1;
  _DWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  mach_error_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  mach_error_t v15;
  uint64_t v16;
  _BYTE v17[32];
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  int v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C874D8];
  v4 = *(_QWORD *)(a1 + 48);
  v5 = v4;
  v6 = *(_QWORD **)(a1 + 16);
  v7 = *(unsigned int *)(a1 + 60);
  v8 = *(int *)(a1 + 12);
  v9 = *(unsigned __int16 *)(a1 + 10);
  v10 = *(_DWORD *)(a1 + 24);
  if (v10 != 268451844)
  {
    if (v10 == 268451848)
    {
      v18 = *(int *)(a1 + 12);
      v19 = v6;
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unable to copyout msg, possible port leak";
      qword_1EDF52D38 = 268451848;
      __break(1u);
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 40);
      if (v11)
      {
        if (!v10)
        {
          if (*(_DWORD *)(a1 + 64))
            v12 = v4 + v11;
          else
            v12 = 0;
          _dispatch_kevent_mach_msg_recv_0(*(_QWORD **)(a1 + 16), v9, v11, v12, v7, v8);
          return;
        }
        goto LABEL_26;
      }
    }
    v18 = v8;
    v19 = v6;
    qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: EVFILT_MACHPORT with no message";
    qword_1EDF52D38 = v10;
    __break(1u);
    goto LABEL_20;
  }
  if (!(_DWORD)v4)
  {
LABEL_20:
    v5 = 268451844;
    v18 = v8;
    v19 = v6;
    qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: EVFILT_MACHPORT with no message size";
    qword_1EDF52D38 = 268451844;
    __break(1u);
LABEL_21:
    v18 = v8;
    v19 = v6;
    qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: EVFILT_MACHPORT with overlarge message";
    qword_1EDF52D38 = v5;
    __break(1u);
    goto LABEL_22;
  }
  if (!*(_QWORD *)(a1 + 32))
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: MACH_RCV_LARGE_IDENTITY with no identity";
    __break(1u);
    return;
  }
  if (v4 >= 0xFFFFFFBC)
    goto LABEL_21;
  v13 = v4 + 68;
  v1 = malloc_type_malloc((v4 + 68), 0xE77C1C11uLL);
  v2 = v17;
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  if (!MEMORY[0x1E0C86820](v1, v14))
  {
LABEL_22:
    _dispatch_bug(3256, (uint64_t)v1);
    v13 = 0;
  }
  v23 = v1;
  v24 = 0;
  v25 = 0;
  v26 = v13;
  v27 = v2;
  v28 = 0;
  v29 = 0x2800000000;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v15 = mach_msg2();
  if (!v15)
  {
    if (*v2)
      v16 = (uint64_t)v2;
    else
      v16 = 0;
    _dispatch_kevent_mach_msg_recv_0(v6, v9 | 0x10000, (uint64_t)v1, v16, v7, v8);
    return;
  }
  v10 = v15;
  if (v15 == 268451844)
  {
    _dispatch_log("BUG in libdispatch client: _dispatch_kevent_mach_msg_drain: dropped message too large to fit in memory: id = 0x%x, size = %u", v1[5], *(_QWORD *)(a1 + 48));
    v10 = 0;
  }
  free(v1);
LABEL_26:
  if (v10)
    _dispatch_bug_mach_client("_dispatch_kevent_mach_msg_drain: message reception failed", v10);
}

_QWORD *_dispatch_kevent_merge_muxed_0(uint64_t a1)
{
  unint64_t v2;
  _QWORD *result;
  _QWORD *v4;

  v2 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_WORD *)(a1 + 10) & 0x12) != 0)
    *(_WORD *)(v2 + 34) |= 2u;
  result = *(_QWORD **)(v2 + 16);
  if (result)
  {
    do
    {
      v4 = (_QWORD *)*result;
      _dispatch_kevent_merge_0((uint64_t)(result + 3), a1);
      result = v4;
    }
    while (v4);
  }
  return result;
}

uint64_t _dispatch_kevent_merge_0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  __int16 v10;
  unint64_t v11;

  v5 = *(unsigned __int8 *)(*(_QWORD *)a1 + 9);
  if (*(_DWORD *)(7 - *(_QWORD *)(a1 + 8)) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(7 - *(_QWORD *)(a1 + 8)), 2u, memory_order_relaxed) <= 0)
  {
    qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
LABEL_30:
    _dispatch_unote_unregister_VARIANT_armv81(a1, 5);
    return (*(uint64_t (**)(uint64_t, _QWORD, unint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, *(unsigned __int16 *)(a2 + 10), v2, *(_DWORD *)(a2 + 12) & 0xFFFFFF);
  }
  switch((int)v5)
  {
    case 0:
      v2 = *(_QWORD *)(a2 + 32);
      break;
    case 1:
      if (*(unsigned __int8 *)(a1 + 28) == 248)
        v2 = 2;
      else
        v2 = *(unsigned int *)(a2 + 24);
      break;
    case 2:
      v2 = (*(_DWORD *)(a1 + 32) & *(_DWORD *)(a2 + 24));
      if ((*(_BYTE *)(a1 + 29) & 4) != 0)
      {
        v6 = *(_QWORD *)(a1 + 72);
        v7 = (*(_QWORD *)(a2 + 32) << 32) | v2;
        v8 = v6;
        do
        {
          atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 72), (unint64_t *)&v8, v6 | v7, memory_order_relaxed, memory_order_relaxed);
          v9 = v8 == v6;
          v6 = v8;
        }
        while (!v9);
      }
      else if (*(unsigned __int8 *)(a1 + 28) == 248)
      {
        v2 = 2;
        *(_QWORD *)(a1 + 72) = 2;
      }
      else if ((_DWORD)v2)
      {
        atomic_fetch_or_explicit((atomic_ullong *volatile)(a1 + 72), v2, memory_order_relaxed);
      }
      else
      {
        v2 = 0;
      }
      break;
    case 3:
      v2 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 72) = ~v2;
      break;
    case 4:
      v2 = *(_QWORD *)(a2 + 32);
      if (v2)
        atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 72), v2, memory_order_relaxed);
      break;
    default:
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Corrupt unote action";
      qword_1EDF52D38 = v5;
      __break(1u);
      JUMPOUT(0x18A0439D0);
  }
  v10 = *(_WORD *)(a2 + 10);
  if ((v10 & 0x110) == 0x10)
    goto LABEL_30;
  if ((v10 & 2) != 0)
  {
    v11 = 2;
    goto LABEL_27;
  }
  if ((*(_WORD *)(a2 + 10) & 0x210) != 0)
  {
    v11 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL | 2;
LABEL_27:
    *(_QWORD *)(a1 + 16) = v11;
    return (*(uint64_t (**)(uint64_t, _QWORD, unint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, *(unsigned __int16 *)(a2 + 10), v2, *(_DWORD *)(a2 + 12) & 0xFFFFFF);
  }
  if ((v10 & 0x80) != 0)
  {
    v11 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFELL;
    goto LABEL_27;
  }
  return (*(uint64_t (**)(uint64_t, _QWORD, unint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, *(unsigned __int16 *)(a2 + 10), v2, *(_DWORD *)(a2 + 12) & 0xFFFFFF);
}

const char *_evfiltstr_0(unsigned int a1)
{
  if (a1 < 0xFFFFFFE8)
    return "EVFILT_missing";
  else
    return off_1E1E88278[(int)a1 + 24];
}

uint64_t _dispatch_kevent_mach_msg_recv_0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6;
  unint64_t v13;

  v6 = *(_DWORD *)(a3 + 4);
  if (v6 >= 0xFFFFFFBC)
    _dispatch_kevent_mach_msg_recv_cold_1(*(_DWORD *)(a3 + 4));
  if (!*(_DWORD *)(a3 + 12))
    _dispatch_kevent_mach_msg_recv_cold_2(a3);
  if (*(_DWORD *)(7 - a1[1]) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(7 - a1[1]), 2u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  if ((a2 & 0x110) == 0x10)
  {
    _dispatch_unote_unregister_VARIANT_armv81((uint64_t)a1, 5);
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*a1 + 56))(a1, a2, a3, v6 + 68, a4, a5, a6);
  }
  if ((a2 & 2) != 0)
  {
    v13 = 2;
    goto LABEL_12;
  }
  if ((a2 & 0x210) != 0)
  {
    v13 = a1[2] & 0xFFFFFFFFFFFFFFFCLL | 2;
LABEL_12:
    a1[2] = v13;
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*a1 + 56))(a1, a2, a3, v6 + 68, a4, a5, a6);
  }
  if ((a2 & 0x80) != 0)
  {
    v13 = a1[2] & 0xFFFFFFFFFFFFFFFELL;
    goto LABEL_12;
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*a1 + 56))(a1, a2, a3, v6 + 68, a4, a5, a6);
}

uint64_t _dispatch_kq_init_0(_BYTE *a1)
{
  unint64_t StatusReg;
  uint64_t result;
  int v4;

  if ((_dispatch_unsafe_fork & 1) == 0)
    _dispatch_fork_becomes_unsafe_slow_VARIANT_armv81();
  if (getenv("LIBDISPATCH_TIMERS_FORCE_MAX_LEEWAY"))
    _dispatch_timers_force_max_leeway = 1;
  *a1 = 1;
  _dispatch_kevent_workqueue_init_VARIANT_armv81();
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    result = kevent_qos();
    if ((_DWORD)result != -1)
      break;
    v4 = **(_DWORD **)(StatusReg + 8);
    if (v4 != 4)
      _dispatch_kq_init_cold_1(v4);
  }
  return result;
}

void _dispatch_memorypressure_create_0(uint64_t a1)
{
  void *VARIANT_armv81;
  const char *v2;

  VARIANT_armv81 = (void *)dispatch_source_create_VARIANT_armv81((uint64_t)&_dispatch_source_type_memorypressure_VARIANT_armv81, 0, a1, &_dispatch_mgr_q);
  dispatch_set_context_VARIANT_armv81(VARIANT_armv81, (const char *)VARIANT_armv81);
  dispatch_source_set_event_handler_f_VARIANT_armv81((uint64_t)VARIANT_armv81, (uint64_t (**)())_dispatch_memorypressure_handler_0);
  dispatch_activate_VARIANT_armv81((uint64_t)VARIANT_armv81);
  if (_dispatch_memorypressure_source)
  {
    dispatch_source_cancel_VARIANT_armv81((atomic_uint *)_dispatch_memorypressure_source);
    dispatch_release_VARIANT_armv81((atomic_uint *)_dispatch_memorypressure_source, v2);
  }
  _dispatch_memorypressure_source = (uint64_t)VARIANT_armv81;
}

uint64_t _dispatch_memorypressure_handler_0(uint64_t a1)
{
  int data_VARIANT_armv81;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  data_VARIANT_armv81 = dispatch_source_get_data_VARIANT_armv81(a1);
  v2 = data_VARIANT_armv81;
  if ((data_VARIANT_armv81 & 0xF0000000) != 0
    && dispatch_source_get_mask_VARIANT_armv81(_dispatch_memorypressure_source) != *MEMORY[0x1E0C88958])
  {
    _dispatch_memorypressure_create_0();
  }
  if ((v2 & 1) != 0)
  {
    _dispatch_memory_warn = 0;
    _dispatch_continuation_cache_limit = 112;
    v3 = _firehose_task_buffer;
    if (_firehose_task_buffer)
    {
      if ((atomic_fetch_and_explicit((atomic_ullong *volatile)(_firehose_task_buffer + 512), 0xFFFFFFFFFFFFFFFELL, memory_order_relaxed) & 1) != 0)firehose_buffer_update_limits_VARIANT_armv81(v3);
    }
  }
  if ((v2 & 2) != 0)
  {
    _dispatch_memory_warn = 1;
    _dispatch_continuation_cache_limit = 16;
    v4 = _firehose_task_buffer;
    if (_firehose_task_buffer)
    {
      v5 = atomic_fetch_or_explicit((atomic_ullong *volatile)(_firehose_task_buffer + 512), 1uLL, memory_order_relaxed);
      if (v5 != (v5 | 1))
        firehose_buffer_update_limits_VARIANT_armv81(v4);
    }
  }
  return malloc_memory_event_handler();
}

void _dispatch_mach_host_notify_update_0()
{
  host_t v0;
  kern_return_t v1;

  if (_dispatch_mach_host_port_pred != -1)
    dispatch_once_f_VARIANT_armv81(&_dispatch_mach_host_port_pred, 0, (uint64_t (*)(void))_dispatch_mach_host_port_init_0);
  v0 = _dispatch_mach_host_port;
  if (_dispatch_mach_notify_port_pred != -1)
    dispatch_once_f_VARIANT_armv81(&_dispatch_mach_notify_port_pred, 0, (uint64_t (*)(void))_dispatch_mach_notify_port_init_0);
  v1 = host_request_notification(v0, 1, _dispatch_mach_notify_port);
  if (v1 == -301)
    _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
  if (v1)
    _dispatch_bug(2893, v1);
}

void _dispatch_mach_notify_port_init_0()
{
  char *v0;
  kern_return_t v1;
  mach_port_options_t v2;

  v2.reserved[1] = 0;
  *(_OWORD *)&v2.flags = xmmword_18A06EBB0;
  v1 = mach_port_construct(*MEMORY[0x1E0C883F0], &v2, (mach_port_context_t)&_dispatch_mach_notify_port, (mach_port_name_t *)&_dispatch_mach_notify_port);
  if (v1)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: mach_port_construct() failed: cannot create receive right";
    qword_1EDF52D38 = v1;
    __break(1u);
    goto LABEL_5;
  }
  v0 = _dispatch_unote_create_with_handle_VARIANT_armv81((uint64_t)&_dispatch_mach_type_notification_VARIANT_armv81, _dispatch_mach_notify_port, 0);
  *((_QWORD *)v0 + 1) = ~(unint64_t)&_dispatch_mgr_q;
  if ((_dispatch_unote_register_VARIANT_armv81((uint64_t)v0, -4, 0x2000000u) & 1) == 0)
LABEL_5:
    _dispatch_bug(2842, 0);
  _dispatch_mach_notify_unote = (uint64_t)v0;
}

uint64_t _dispatch_kevent_mach_notify_resume_0(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  _QWORD *v4;
  mach_port_name_t v5;
  uint64_t v6;
  uint64_t v7;
  ipc_space_t v8;
  kern_return_t v9;
  kern_return_t v10;
  int v12;
  kern_return_t v13;
  uint64_t v15;
  char v16;
  mach_port_t previous;
  int v18;

  if (((a3 | a2) & 0xD) == 0)
    return 1;
  v4 = (_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 56);
  v5 = *(_DWORD *)(a1 + 24);
  v6 = (v3 | (*(_DWORD *)(a1 + 48) | a2) & 0xD) & (~a3 | 0xFFFFFFF2);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = v6 & 0xD;
  if ((v3 & 0xD) != 0 || !v7)
  {
    v12 = 0;
    if ((v3 & 0xD) == 0 || v7)
      return v12 == 0;
    previous = 0;
    v13 = mach_port_request_notification(*MEMORY[0x1E0C883F0], v5, 66, 0, 0, 0x12u, &previous);
    v10 = 0;
    if (v13 > 0x11 || ((1 << v13) & 0x28011) == 0)
    {
      if (v13 == -301)
        _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
      _dispatch_bug(2966, v13);
      v10 = 0;
    }
    goto LABEL_17;
  }
  previous = 0;
  v8 = *MEMORY[0x1E0C883F0];
  if (_dispatch_mach_notify_port_pred != -1)
    dispatch_once_f_VARIANT_armv81(&_dispatch_mach_notify_port_pred, 0, (uint64_t (*)(void))_dispatch_mach_notify_port_init_0);
  v9 = mach_port_request_notification(v8, v5, 66, 0, _dispatch_mach_notify_port, 0x15u, &previous);
  v10 = v9;
  if (v9 <= 14)
  {
    if (v9 == -301)
      _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
    if (!v9)
    {
      v12 = previous;
      if (!previous)
        return v12 == 0;
      v16 = _dispatch_kevent_mach_notify_resume_cold_3(previous, &previous, &v18);
      v12 = v18;
      if ((v16 & 1) == 0)
        return v12 == 0;
      v10 = 0;
      v15 = 2947;
      goto LABEL_31;
    }
  }
  else if (v9 == 15 || v9 == 17)
  {
    *v4 &= 0xFFFFFFF2uLL;
    goto LABEL_17;
  }
  _dispatch_kevent_mach_notify_resume_cold_1(v9, v4);
LABEL_17:
  if (!previous)
    goto LABEL_18;
  v12 = _dispatch_send_consume_send_once_right(previous);
  if (!v12)
    goto LABEL_18;
  v15 = 2976;
LABEL_31:
  _dispatch_bug(v15, v12);
LABEL_18:
  v12 = v10;
  return v12 == 0;
}

uint64_t voucher_adopt_VARIANT_armv81(uint64_t a1)
{
  unint64_t StatusReg;
  uint64_t v2;
  int v3;
  int v4;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v2 = *(_QWORD *)(StatusReg + 224);
  if (a1 != -3)
  {
    if (v2 == a1)
      return a1;
    *(_QWORD *)(StatusReg + 224) = a1;
    if (a1)
    {
      v3 = *(_DWORD *)(a1 + 32);
      if (v2)
      {
LABEL_5:
        v4 = *(_DWORD *)(v2 + 32);
LABEL_12:
        if (v3 != -1 && v3 != v4)
          _dispatch_set_priority_and_mach_voucher_slow_VARIANT_armv81(0, v3);
        return v2;
      }
    }
    else
    {
      v3 = 0;
      if (v2)
        goto LABEL_5;
    }
    v4 = 0;
    goto LABEL_12;
  }
  if (v2 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 12), 1u, memory_order_relaxed) <= 0)
    dispatch_group_notify_VARIANT_mp_cold_3();
  return v2;
}

uint64_t voucher_copy_VARIANT_armv81()
{
  uint64_t result;

  result = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (result)
  {
    if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(result + 12), 1u, memory_order_relaxed) <= 0)
      dispatch_group_notify_VARIANT_mp_cold_3();
  }
  return result;
}

uint64_t voucher_copy_without_importance_VARIANT_armv81()
{
  uint64_t result;

  result = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (result)
    return _voucher_create_without_importance_VARIANT_armv81(result);
  return result;
}

uint64_t voucher_retain_VARIANT_armv81(uint64_t result)
{
  if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(result + 12), 1u, memory_order_relaxed) <= 0)
    dispatch_group_notify_VARIANT_mp_cold_3();
  return result;
}

uint64_t voucher_release_VARIANT_armv81(uint64_t result, const char *a2)
{
  int add_explicit;

  add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(result + 12), 0xFFFFFFFF, memory_order_relaxed);
  if (add_explicit <= 1)
  {
    if (add_explicit != 1)
      _dispatch_async_redirect_invoke_cold_1();
    return _voucher_xref_dispose_VARIANT_armv81(result, a2);
  }
  return result;
}

uint64_t _voucher_thread_cleanup_VARIANT_armv81(uint64_t result, const char *a2)
{
  int add_explicit;

  add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(result + 12), 0xFFFFFFFF, memory_order_relaxed);
  if (add_explicit <= 1)
  {
    if (add_explicit != 1)
      _dispatch_async_redirect_invoke_cold_1();
    return _voucher_xref_dispose_VARIANT_armv81(result, a2);
  }
  return result;
}

uint64_t _voucher_task_mach_voucher_init_VARIANT_armv81()
{
  host_t mach_host_port_VARIANT_armv81;
  uint64_t result;
  ipc_voucher_t voucher;

  mach_host_port_VARIANT_armv81 = _dispatch_get_mach_host_port_VARIANT_armv81();
  voucher = 0;
  result = host_create_mach_voucher(mach_host_port_VARIANT_armv81, _voucher_task_mach_voucher_init_VARIANT_armv81_task_create_recipe, 0x10u, &voucher);
  if ((_DWORD)result == -301)
    _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
  if ((_DWORD)result)
    _voucher_task_mach_voucher_init_VARIANT_mp_cold_2(result);
  _voucher_default_task_mach_voucher = voucher;
  _voucher_task_mach_voucher = voucher;
  return result;
}

void voucher_replace_default_voucher_VARIANT_armv81(kern_return_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  host_t mach_host_port_VARIANT_armv81;
  int v5;
  BOOL v6;
  uint8_t recipes[8];
  int v8;
  int v9;
  ipc_voucher_t voucher;

  if (_voucher_task_mach_voucher_pred != -1)
    a1 = dispatch_once_f_VARIANT_armv81(&_voucher_task_mach_voucher_pred, 0, _voucher_task_mach_voucher_init_VARIANT_armv81);
  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (v1)
  {
    v2 = *(_DWORD *)(v1 + 32);
    if (v2)
    {
      v3 = *(_DWORD *)(v1 + 36);
      if (!v3)
        v3 = v2;
      *(_QWORD *)recipes = 0x100000003;
      v8 = v3;
      v9 = 0;
      mach_host_port_VARIANT_armv81 = _dispatch_get_mach_host_port_VARIANT_armv81();
      voucher = 0;
      a1 = host_create_mach_voucher(mach_host_port_VARIANT_armv81, recipes, 0x10u, &voucher);
      if (a1 == -301)
        _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
      if (a1)
      {
        _dispatch_bug(362, a1);
      }
      else if (voucher)
      {
        v5 = _voucher_default_task_mach_voucher;
        goto LABEL_13;
      }
    }
  }
  v5 = _voucher_default_task_mach_voucher;
LABEL_13:
  __swp(a1, (unsigned int *)&_voucher_task_mach_voucher);
  if (a1)
    v6 = a1 == v5;
  else
    v6 = 1;
  if (!v6)
    _voucher_dealloc_mach_voucher_VARIANT_mp(a1);
}

uint64_t _voucher_get_mach_voucher_VARIANT_armv81(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    result = *(unsigned int *)(result + 36);
    if (!(_DWORD)result)
    {
      result = *(unsigned int *)(v1 + 32);
      if (!(_DWORD)result)
      {
        if (_voucher_task_mach_voucher_pred != -1)
          dispatch_once_f_VARIANT_armv81(&_voucher_task_mach_voucher_pred, 0, _voucher_task_mach_voucher_init_VARIANT_armv81);
        return _voucher_task_mach_voucher;
      }
    }
  }
  return result;
}

uint64_t _voucher_create_without_importance_VARIANT_armv81(uint64_t a1)
{
  uint64_t v1;
  mach_port_name_t v3;
  host_t mach_host_port_VARIANT_armv81;
  kern_return_t v5;
  ipc_voucher_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  ipc_voucher_t voucher;
  uint8_t recipes[8];
  mach_port_name_t v12;
  __int128 v13;
  int v14;
  uint64_t v15;

  v1 = a1;
  v15 = *MEMORY[0x1E0C874D8];
  if (!a1)
    return v1;
  if (!*(_DWORD *)(a1 + 32) || (*(_BYTE *)(a1 + 72) & 1) == 0)
  {
    if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 12), 1u, memory_order_relaxed) <= 0)
      dispatch_group_notify_VARIANT_mp_cold_3();
    return v1;
  }
  if (*(_DWORD *)(a1 + 36))
    v3 = *(_DWORD *)(a1 + 36);
  else
    v3 = *(_DWORD *)(a1 + 32);
  *(_QWORD *)recipes = 0x1FFFFFFFFLL;
  v12 = v3;
  v13 = xmmword_18A06E830;
  v14 = 0;
  mach_host_port_VARIANT_armv81 = _dispatch_get_mach_host_port_VARIANT_armv81();
  voucher = 0;
  v5 = host_create_mach_voucher(mach_host_port_VARIANT_armv81, recipes, 0x20u, &voucher);
  if (v5 == -301)
    _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
  if (v5)
  {
    _dispatch_bug(639, v5);
    goto LABEL_25;
  }
  v6 = voucher;
  if (!voucher)
  {
LABEL_25:
    if (*(_DWORD *)(v1 + 36))
      return 0;
    v6 = 0;
  }
  if (v6 == v3)
  {
    _voucher_dealloc_mach_voucher_VARIANT_mp(v3);
    if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v1 + 12), 1u, memory_order_relaxed) <= 0)
      dispatch_group_notify_VARIANT_mp_cold_3();
  }
  else
  {
    v7 = _voucher_find_and_retain_0(v6);
    if (v7 && *(_DWORD *)(v1 + 36))
    {
      _voucher_dealloc_mach_voucher_VARIANT_mp(v6);
      return v7;
    }
    else
    {
      v8 = _os_object_alloc_realized((objc_class *)OS_voucher, 80);
      v9 = v8;
      *((_OWORD *)v8 + 3) = *(_OWORD *)(v1 + 48);
      *((_QWORD *)v8 + 8) = *(_QWORD *)(v1 + 64);
      v8[8] = v6;
      if (*(_DWORD *)(v1 + 36))
      {
        v8[9] = v6;
        _voucher_insert_0((uint64_t)v8);
      }
      else if (v7)
      {
        *((_QWORD *)v8 + 5) = v7;
        _voucher_dealloc_mach_voucher_VARIANT_mp(v6);
      }
      return (uint64_t)v9;
    }
  }
  return v1;
}

uint64_t _voucher_find_and_retain_0(unsigned int a1)
{
  int v2;
  unint64_t StatusReg;
  uint64_t i;
  uint64_t v5;
  unsigned int add_explicit;
  unsigned int v7;
  unsigned int v8;

  if (!a1)
    return 0;
  v2 = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  atomic_compare_exchange_strong_explicit(&_voucher_hash_lock, (unsigned int *)&v2, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
  if (v2)
    _dispatch_unfair_lock_lock_slow_VARIANT_armv81((uint64_t)&_voucher_hash_lock);
  for (i = *((_QWORD *)&_voucher_hash + ((a1 >> 8) & 0x3F)); ; i = *(_QWORD *)(15 - i))
  {
    v5 = ~i;
    if (i == -1)
      break;
    if (*(_DWORD *)(35 - i) == a1)
    {
      add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(11 - i), 1u, memory_order_relaxed);
      if ((add_explicit & 0x80000000) != 0)
        _dispatch_async_redirect_invoke_cold_1();
      if (!add_explicit)
        atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
      break;
    }
  }
  v7 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  v8 = atomic_exchange_explicit(&_voucher_hash_lock, 0, memory_order_release);
  if (v8 != v7)
    _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)&_voucher_hash_lock, v8);
  return v5;
}

uint64_t _voucher_insert_0(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  int v3;
  unint64_t StatusReg;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  v1 = *(unsigned int *)(result + 36);
  if ((_DWORD)v1)
  {
    v2 = result;
    v3 = 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    atomic_compare_exchange_strong_explicit(&_voucher_hash_lock, (unsigned int *)&v3, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
    if (v3)
      _dispatch_unfair_lock_lock_slow_VARIANT_armv81((uint64_t)&_voucher_hash_lock);
    if (*(_QWORD *)(v2 + 24))
      _voucher_insert_cold_3();
    v5 = *(_QWORD *)(v2 + 48);
    if (v5)
      _voucher_insert_cold_2(v5);
    result = *(_QWORD *)(v2 + 40);
    if (result)
      _voucher_insert_cold_1(result);
    v6 = (unint64_t *)&_voucher_hash + ((v1 >> 8) & 0x3F);
    v7 = *v6;
    *(_QWORD *)(v2 + 16) = *v6;
    if (v7 != -1)
      *(_QWORD *)(23 - v7) = ~(v2 + 16);
    *v6 = ~v2;
    *(_QWORD *)(v2 + 24) = ~(unint64_t)v6;
    v8 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    v9 = atomic_exchange_explicit(&_voucher_hash_lock, 0, memory_order_release);
    if (v9 != v8)
      return _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)&_voucher_hash_lock, v9);
  }
  return result;
}

_DWORD *_voucher_create_with_mach_msgv_VARIANT_armv81(unsigned int *a1, unsigned int *a2)
{
  unsigned int v3;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t v10;

  v3 = *a1;
  if ((*a1 & 0x1F0000) == 0)
  {
    v6 = 0;
    v5 = 0;
    if (a2)
      goto LABEL_3;
LABEL_8:
    v10 = 0;
    v8 = 0;
    return _voucher_create_with_mach_voucher_0(v5, v6, v10, v8);
  }
  v5 = a1[4];
  a1[4] = 0;
  v6 = v3 & 0x201F0000;
  *a1 = v3 & 0xDFE0FFFF;
  if (!a2)
    goto LABEL_8;
LABEL_3:
  v7 = *a2;
  if (*a2 <= 7)
    _voucher_create_with_mach_msgv_VARIANT_mp_cold_1(*a2);
  v8 = v7 - 8;
  v9 = a2 + 2;
  if (v7 == 8)
    v10 = 0;
  else
    v10 = (uint64_t)v9;
  return _voucher_create_with_mach_voucher_0(v5, v6, v10, v8);
}

_DWORD *_voucher_create_with_mach_voucher_0(unsigned int a1, int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  const char *v13;
  _DWORD *v14;
  _DWORD *v15;

  if (a1)
  {
    v8 = _voucher_find_and_retain_0(a1);
    if (v8)
    {
      v9 = (_DWORD *)v8;
      _voucher_dealloc_mach_voucher_VARIANT_mp(a1);
    }
    else
    {
      v9 = _os_object_alloc_realized((objc_class *)OS_voucher, 80);
      v9[8] = a1;
      v9[9] = a1;
      *((_BYTE *)v9 + 72) = v9[18] & 0xFE | ((a2 & 0x20000000) != 0);
      _voucher_insert_0((uint64_t)v9);
    }
  }
  else
  {
    v9 = 0;
  }
  if (a4 >= 0x20 && *(_DWORD *)a3 == 59821818 && *(_QWORD *)(a3 + 8))
  {
    if (v9)
    {
      v10 = *((_QWORD *)v9 + 6);
      if (v10)
        _voucher_insert_cold_2(v10);
      v11 = *((_QWORD *)v9 + 5);
      if (v11)
        _voucher_insert_cold_1(v11);
      v12 = _os_object_alloc_realized((objc_class *)OS_voucher, 80);
      v14 = v12;
      if (v9[8])
      {
        v15 = (_DWORD *)*((_QWORD *)v9 + 5);
        if (!v15)
          v15 = v9;
        if ((int)atomic_fetch_add_explicit(v15 + 3, 1u, memory_order_relaxed) <= 0)
          dispatch_group_notify_VARIANT_mp_cold_3();
        *((_QWORD *)v12 + 5) = v15;
        v12[8] = v15[8];
        *((_BYTE *)v12 + 72) = v12[18] & 0xFE | v15[18] & 1;
      }
      voucher_release_VARIANT_armv81((uint64_t)v9, v13);
    }
    else
    {
      v14 = _os_object_alloc_realized((objc_class *)OS_voucher, 80);
    }
    *((_OWORD *)v14 + 3) = *(_OWORD *)(a3 + 8);
    *((_QWORD *)v14 + 8) = *(_QWORD *)(a3 + 24);
    return v14;
  }
  return v9;
}

_DWORD *voucher_create_with_mach_msg_VARIANT_armv81(unsigned int *a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;

  v1 = *a1;
  if ((*a1 & 0x1F0000) != 0)
  {
    v3 = a1[4];
    a1[4] = 0;
    v4 = v1 & 0x201F0000;
    *a1 = v1 & 0xDFE0FFFF;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  return _voucher_create_with_mach_voucher_0(v3, v4, 0, 0);
}

void voucher_decrement_importance_count4CF_VARIANT_armv81(uint64_t a1)
{
  ipc_voucher_t v1;
  kern_return_t v2;
  mach_msg_type_number_t out_contentCnt;
  uint8_t in_content[4];

  if (a1 && *(_DWORD *)(a1 + 32) && (*(_BYTE *)(a1 + 72) & 1) != 0)
  {
    v1 = *(_DWORD *)(a1 + 36) ? *(_DWORD *)(a1 + 36) : *(_DWORD *)(a1 + 32);
    *(_DWORD *)in_content = 1;
    out_contentCnt = 0;
    v2 = mach_voucher_attr_command(v1, 2u, 2u, in_content, 4u, 0, &out_contentCnt);
    if (v2 != 16)
    {
      if (v2 == -301)
        _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
      if (v2)
        voucher_decrement_importance_count4CF_VARIANT_mp_cold_1(v2, v2);
    }
  }
}

uint64_t _voucher_xref_dispose_VARIANT_armv81(uint64_t result, const char *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unint64_t StatusReg;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int add_explicit;

  v2 = result;
  if (!*(_QWORD *)(result + 24))
    goto LABEL_11;
  v3 = 0;
  v4 = *(_DWORD *)(result + 36);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  atomic_compare_exchange_strong_explicit(&_voucher_hash_lock, (unsigned int *)&v3, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
  if (!v3)
  {
    if (v4)
      goto LABEL_4;
LABEL_18:
    _voucher_insert_cold_3();
  }
  result = _dispatch_unfair_lock_lock_slow_VARIANT_armv81((uint64_t)&_voucher_hash_lock);
  if (!v4)
    goto LABEL_18;
LABEL_4:
  if (*(int *)(v2 + 12) <= 0)
  {
    v6 = *(_QWORD *)(v2 + 24);
    if (v6)
    {
      v7 = *(_QWORD *)(v2 + 16);
      if (v7 != -1)
        *(_QWORD *)(23 - v7) = v6;
      *(_QWORD *)~v6 = v7;
      *(_OWORD *)(v2 + 16) = xmmword_18A06E840;
    }
  }
  v8 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  a2 = (const char *)atomic_exchange_explicit(&_voucher_hash_lock, 0, memory_order_release);
  if ((_DWORD)a2 != v8)
    result = _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)&_voucher_hash_lock, a2);
LABEL_11:
  if (*(_DWORD *)(v2 + 8) != 0x7FFFFFFF)
  {
    add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      return _os_object_dispose((void *)v2, a2);
    }
  }
  return result;
}

uint64_t _voucher_dispose_VARIANT_armv81(uint64_t a1, const char *a2)
{
  mach_port_name_t v3;
  mach_port_name_t v4;
  uint64_t result;
  int add_explicit;

  if (*(_QWORD *)(a1 + 24))
    _voucher_insert_cold_3();
  *(_OWORD *)(a1 + 16) = xmmword_18A06E840;
  v3 = *(_DWORD *)(a1 + 36);
  if (v3)
  {
    if (v3 != *(_DWORD *)(a1 + 32))
      _voucher_dealloc_mach_voucher_VARIANT_mp(v3);
    *(_DWORD *)(a1 + 36) = 0;
  }
  v4 = *(_DWORD *)(a1 + 32);
  if (v4)
  {
    if (!*(_QWORD *)(a1 + 40))
      _voucher_dealloc_mach_voucher_VARIANT_mp(v4);
    *(_DWORD *)(a1 + 32) = 0;
  }
  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(result + 12), 0xFFFFFFFF, memory_order_relaxed);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1)
        _dispatch_async_redirect_invoke_cold_1();
      result = _voucher_xref_dispose_VARIANT_armv81(result, a2);
    }
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  return result;
}

void _voucher_activity_debug_channel_init_VARIANT_armv81()
{
  uint64_t v0;
  kern_return_t v1;
  uint64_t f_VARIANT_armv81;
  mach_port_t special_port;

  if (_voucher_libtrace_hooks)
  {
    v0 = *(_QWORD *)(_voucher_libtrace_hooks + 16);
    if (v0)
    {
      special_port = 0;
      v1 = task_get_special_port(*MEMORY[0x1E0C883F0], 10, &special_port);
      if (v1)
      {
        if (v1 == -301)
          _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
        _voucher_activity_debug_channel_init_VARIANT_mp_cold_1(v1);
      }
      if (special_port)
      {
        f_VARIANT_armv81 = dispatch_mach_create_f_VARIANT_armv81((uint64_t)"com.apple.debug-channel", 0, 0, v0);
        *(_BYTE *)(*(_QWORD *)(f_VARIANT_armv81 + 88) + 29) &= ~0x20u;
        dispatch_mach_connect_VARIANT_armv81(f_VARIANT_armv81, special_port, 0, 0);
        _voucher_activity_debug_channel = f_VARIANT_armv81;
      }
    }
  }
}

uint64_t _voucher_atfork_prepare_VARIANT_armv81()
{
  int v0;
  uint64_t result;

  v0 = 0;
  atomic_compare_exchange_strong_explicit(&_voucher_hash_lock, (unsigned int *)&v0, *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
  if (v0)
    return _dispatch_unfair_lock_lock_slow_VARIANT_armv81((uint64_t)&_voucher_hash_lock);
  return result;
}

uint64_t _voucher_atfork_parent_VARIANT_armv81()
{
  unsigned int v0;
  unsigned int v1;
  uint64_t result;

  v0 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFC;
  v1 = atomic_exchange_explicit(&_voucher_hash_lock, 0, memory_order_release);
  if (v1 != v0)
    return _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)&_voucher_hash_lock, v1);
  return result;
}

__n128 _voucher_atfork_child_VARIANT_armv81()
{
  uint64_t i;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;

  for (i = 0; i != 64; ++i)
  {
    while (1)
    {
      v1 = *((_QWORD *)&_voucher_hash + i);
      if (v1 == -1)
        break;
      v2 = ~v1;
      *(_QWORD *)(v2 + 32) = 0;
      v3 = *(_QWORD *)(v2 + 16);
      v4 = *(_QWORD *)(v2 + 24);
      if (v3 != -1)
        *(_QWORD *)(23 - v3) = v4;
      *(_QWORD *)~v4 = v3;
      *(_OWORD *)(v2 + 16) = xmmword_18A06E840;
    }
  }
  result.n128_u64[0] = -1;
  result.n128_u64[1] = -1;
  xmmword_1ECCE9AA0 = (__int128)result;
  unk_1ECCE9AB0 = result;
  xmmword_1ECCE9A80 = (__int128)result;
  unk_1ECCE9A90 = result;
  xmmword_1ECCE9A60 = (__int128)result;
  unk_1ECCE9A70 = result;
  xmmword_1ECCE9A40 = (__int128)result;
  unk_1ECCE9A50 = result;
  xmmword_1ECCE9A20 = (__int128)result;
  unk_1ECCE9A30 = result;
  xmmword_1ECCE9A00 = (__int128)result;
  unk_1ECCE9A10 = result;
  xmmword_1ECCE99E0 = (__int128)result;
  unk_1ECCE99F0 = result;
  xmmword_1ECCE99C0 = (__int128)result;
  unk_1ECCE99D0 = result;
  xmmword_1ECCE99A0 = (__int128)result;
  unk_1ECCE99B0 = result;
  xmmword_1ECCE9980 = (__int128)result;
  unk_1ECCE9990 = result;
  xmmword_1ECCE9960 = (__int128)result;
  unk_1ECCE9970 = result;
  xmmword_1ECCE9940 = (__int128)result;
  unk_1ECCE9950 = result;
  xmmword_1ECCE9920 = (__int128)result;
  unk_1ECCE9930 = result;
  xmmword_1ECCE9900 = (__int128)result;
  unk_1ECCE9910 = result;
  xmmword_1ECCE98E0 = (__int128)result;
  unk_1ECCE98F0 = result;
  _voucher_hash = (__int128)result;
  unk_1ECCE98D0 = result;
  _voucher_hash_lock = 0;
  *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224) = 0;
  _voucher_task_mach_voucher_pred = 0;
  _voucher_task_mach_voucher = 0;
  _voucher_default_task_mach_voucher = 0;
  _voucher_aid_next = 0;
  _firehose_task_buffer_pred = 0;
  _firehose_task_buffer = 0;
  return result;
}

uint64_t voucher_process_can_use_arbitrary_personas_VARIANT_armv81()
{
  if (_voucher_process_can_use_arbitrary_personas_pred != -1)
    dispatch_once_f_VARIANT_armv81(&_voucher_process_can_use_arbitrary_personas_pred, 0, _voucher_process_can_use_arbitrary_personas_init_0);
  return _voucher_process_can_use_arbitrary_personas;
}

uint64_t _voucher_process_can_use_arbitrary_personas_init_0()
{
  uint64_t result;
  uint8_t out_content[4];
  mach_msg_type_number_t out_contentCnt;

  if (_voucher_task_mach_voucher_pred != -1)
    dispatch_once_f_VARIANT_armv81(&_voucher_task_mach_voucher_pred, 0, _voucher_task_mach_voucher_init_VARIANT_armv81);
  *(_DWORD *)out_content = 0;
  out_contentCnt = 4;
  result = mach_voucher_attr_command(_voucher_task_mach_voucher, 3u, 4u, 0, 0, out_content, &out_contentCnt);
  if ((_DWORD)result)
    _voucher_process_can_use_arbitrary_personas_init_cold_1(result);
  _voucher_process_can_use_arbitrary_personas = *(_DWORD *)out_content != 0;
  return result;
}

uint64_t voucher_copy_with_persona_mach_voucher_VARIANT_armv81(int a1)
{
  uint64_t v1;
  mach_port_name_t v2;
  host_t mach_host_port_VARIANT_armv81;
  kern_return_t v4;
  kern_return_t v5;
  ipc_voucher_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  ipc_voucher_t voucher;
  uint8_t recipes[8];
  mach_port_name_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C874D8];
  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (a1)
  {
    if (v1)
    {
      v2 = *(_DWORD *)(v1 + 36);
      if (!v2)
        v2 = *(_DWORD *)(v1 + 32);
    }
    else
    {
      v2 = 0;
    }
    *(_QWORD *)recipes = 0x1FFFFFFFFLL;
    v13 = v2;
    v14 = 0x300000000;
    v15 = 10;
    v16 = a1;
    v17 = 0;
    mach_host_port_VARIANT_armv81 = _dispatch_get_mach_host_port_VARIANT_armv81();
    voucher = 0;
    v4 = host_create_mach_voucher(mach_host_port_VARIANT_armv81, recipes, 0x20u, &voucher);
    if (v4 == -301)
      _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
    v5 = v4;
    if (v4)
    {
      _dispatch_bug(944, v4);
      if (v5 == 20)
        return -1;
      if (!v2)
        goto LABEL_14;
      v6 = 0;
    }
    else
    {
      v6 = voucher;
      if (voucher == v2)
      {
        if (v2)
          _voucher_dealloc_mach_voucher_VARIANT_mp(v2);
LABEL_14:
        if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v1 + 12), 1u, memory_order_relaxed) <= 0)
          dispatch_group_notify_VARIANT_mp_cold_3();
        return v1;
      }
    }
    v7 = _voucher_find_and_retain_0(v6);
    if (v7)
    {
      if (!v1 || *(_DWORD *)(v1 + 36))
      {
        _voucher_dealloc_mach_voucher_VARIANT_mp(v6);
        return v7;
      }
      v9 = _os_object_alloc_realized((objc_class *)OS_voucher, 80);
    }
    else
    {
      v8 = _os_object_alloc_realized((objc_class *)OS_voucher, 80);
      v9 = v8;
      if (!v1)
      {
        v8[8] = v6;
        goto LABEL_28;
      }
    }
    *((_OWORD *)v9 + 3) = *(_OWORD *)(v1 + 48);
    *((_QWORD *)v9 + 8) = *(_QWORD *)(v1 + 64);
    v9[8] = v6;
    if (!*(_DWORD *)(v1 + 36))
    {
      if (v7)
      {
        *((_QWORD *)v9 + 5) = v7;
        _voucher_dealloc_mach_voucher_VARIANT_mp(v6);
      }
      return (uint64_t)v9;
    }
LABEL_28:
    v9[9] = v6;
    _voucher_insert_0((uint64_t)v9);
    return (uint64_t)v9;
  }
  if (v1 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v1 + 12), 1u, memory_order_relaxed) <= 0)
    dispatch_group_notify_VARIANT_mp_cold_3();
  return v1;
}

uint64_t mach_voucher_persona_self_VARIANT_armv81(ipc_voucher_t *a1)
{
  host_t mach_host_port_VARIANT_armv81;
  uint64_t v3;
  uint64_t v4;
  ipc_voucher_t v5;
  ipc_voucher_t voucher;
  uint8_t recipes[16];
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C874D8];
  *(_OWORD *)recipes = xmmword_18A06EBD8;
  v9 = unk_18A06EBE8;
  mach_host_port_VARIANT_armv81 = _dispatch_get_mach_host_port_VARIANT_armv81();
  voucher = 0;
  v3 = host_create_mach_voucher(mach_host_port_VARIANT_armv81, recipes, 0x20u, &voucher);
  if ((_DWORD)v3 == -301)
    _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
  v4 = v3;
  if ((_DWORD)v3)
  {
    _dispatch_bug(1000, (int)v3);
    v5 = 0;
  }
  else
  {
    v5 = voucher;
  }
  *a1 = v5;
  return v4;
}

uint64_t mach_voucher_persona_for_originator_VARIANT_armv81(int a1, int a2, uint64_t a3, ipc_voucher_t *a4)
{
  host_t mach_host_port_VARIANT_armv81;
  uint64_t result;
  ipc_voucher_t v7;
  ipc_voucher_t voucher;
  uint8_t recipes[8];
  int v10;
  __int128 v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C874D8];
  *(_QWORD *)recipes = 0x100000003;
  v10 = a2;
  v11 = xmmword_18A06E850;
  v12 = 16;
  v13 = a1;
  v14 = 0;
  v15 = a3;
  mach_host_port_VARIANT_armv81 = _dispatch_get_mach_host_port_VARIANT_armv81();
  voucher = 0;
  result = host_create_mach_voucher(mach_host_port_VARIANT_armv81, recipes, 0x30u, &voucher);
  if ((_DWORD)result == -301)
    _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
  v7 = voucher;
  if ((_DWORD)result)
    v7 = 0;
  *a4 = v7;
  return result;
}

uint64_t voucher_get_current_persona_VARIANT_armv81()
{
  unint64_t StatusReg;
  uint64_t v1;
  ipc_voucher_t v2;
  ipc_voucher_t v3;
  ipc_voucher_t v4;
  kern_return_t v5;
  int v7;
  uint8_t out_content[4];
  mach_msg_type_number_t out_contentCnt;

  *(_DWORD *)out_content = -1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v1 = *(_QWORD *)(StatusReg + 224);
  if (v1)
  {
    v2 = *(_DWORD *)(v1 + 32);
    if (v2)
    {
      v3 = *(_DWORD *)(v1 + 36);
      if (v3)
        v4 = v3;
      else
        v4 = v2;
      out_contentCnt = 4;
      v5 = mach_voucher_attr_command(v4, 3u, 3u, 0, 0, out_content, &out_contentCnt);
      if (v5 > 0x2E || ((1 << v5) & 0x400000040011) == 0)
      {
        _dispatch_bug(1103, v5);
      }
      else if (!v5)
      {
        return *(unsigned int *)out_content;
      }
    }
  }
  if ((kpersona_get() & 0x80000000) != 0)
  {
    v7 = **(_DWORD **)(StatusReg + 8);
    if (v7 != 3 && v7 != 0)
      _dispatch_bug(1126, v7);
  }
  return *(unsigned int *)out_content;
}

double voucher_get_current_persona_originator_info_VARIANT_armv81(_OWORD *a1)
{
  double result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C874D8];
  v8 = 0u;
  v9 = 0u;
  v6 = 0u;
  v7 = 0u;
  v4 = 0u;
  v5 = 0u;
  if (!_voucher_get_current_persona_token((mach_voucher_attr_content_t)&v4))
  {
    v3 = v5;
    *a1 = v4;
    a1[1] = v3;
    result = *(double *)&v6;
    a1[2] = v6;
  }
  return result;
}

double voucher_get_current_persona_proximate_info_VARIANT_armv81(_OWORD *a1)
{
  double result;
  __int128 v3;
  _OWORD v4[3];
  __int128 v5;
  __int128 v6;
  double v7[3];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C874D8];
  v6 = 0u;
  *(_OWORD *)v7 = 0u;
  v5 = 0u;
  memset(v4, 0, sizeof(v4));
  if (!_voucher_get_current_persona_token((mach_voucher_attr_content_t)v4))
  {
    v3 = v6;
    *a1 = v5;
    a1[1] = v3;
    result = v7[0];
    a1[2] = *(_OWORD *)v7;
  }
  return result;
}

uint64_t voucher_mach_msg_set_VARIANT_armv81(int *a1)
{
  uint64_t v2;
  int mach_voucher_VARIANT_armv81;
  int v4;

  if ((*((_BYTE *)a1 + 2) & 0x1F) != 0)
    return 0;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (v2)
  {
    mach_voucher_VARIANT_armv81 = _voucher_get_mach_voucher_VARIANT_armv81(v2);
  }
  else
  {
    if (_voucher_task_mach_voucher_pred != -1)
      dispatch_once_f_VARIANT_armv81(&_voucher_task_mach_voucher_pred, 0, _voucher_task_mach_voucher_init_VARIANT_armv81);
    mach_voucher_VARIANT_armv81 = _voucher_task_mach_voucher;
  }
  v4 = *a1;
  if (!mach_voucher_VARIANT_armv81 || (*a1 & 0x1F0000) != 0)
    return 0;
  a1[4] = mach_voucher_VARIANT_armv81;
  *a1 = v4 | 0x130000;
  return 1;
}

void voucher_mach_msg_clear_VARIANT_armv81(unsigned int *a1)
{
  unsigned int v2;
  int v3;
  mach_port_name_t v4;

  v2 = *a1;
  v3 = HIWORD(*a1) & 0x1F;
  v4 = a1[4];
  if ((v3 == 17 || v3 == 19) && v4 != 0)
  {
    if (v3 == 17)
    {
      _voucher_dealloc_mach_voucher_VARIANT_mp(v4);
      v2 = *a1;
    }
    a1[4] = 0;
    *a1 = v2 & 0xFFE0FFFF;
  }
}

uint64_t voucher_mach_msg_adopt_VARIANT_armv81(unsigned int *a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  unint64_t StatusReg;
  unsigned int *v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  _DWORD *v13;
  _DWORD *v15;
  int v16;
  int v17;

  v1 = *a1;
  if ((*a1 & 0x1F0000) == 0)
    return -1;
  v3 = a1[4];
  a1[4] = 0;
  *a1 = v1 & 0xDFE0FFFF;
  if (!v3)
    return -1;
  v4 = v1 & 0x201F0000;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v6 = *(unsigned int **)(StatusReg + 984);
  if (v6)
  {
    v9 = *v6;
    v7 = v6 + 2;
    v8 = v9;
    v10 = v9 - 8;
    if (v9 == 8)
      v7 = 0;
    if (v8 <= 7)
      v11 = 0;
    else
      v11 = (uint64_t)v7;
    if (v8 <= 7)
      v12 = 0;
    else
      v12 = v10;
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v15 = _voucher_create_with_mach_voucher_0(v3, v4, v11, v12);
  v13 = *(_DWORD **)(StatusReg + 224);
  if (v13 == v15)
    return (uint64_t)v15;
  *(_QWORD *)(StatusReg + 224) = v15;
  if (!v15)
  {
    v16 = 0;
    if (v13)
      goto LABEL_18;
LABEL_21:
    v17 = 0;
    goto LABEL_22;
  }
  v16 = v15[8];
  if (!v13)
    goto LABEL_21;
LABEL_18:
  v17 = v13[8];
LABEL_22:
  if (v16 != -1 && v16 != v17)
    _dispatch_set_priority_and_mach_voucher_slow_VARIANT_armv81(0, v16);
  return (uint64_t)v13;
}

void voucher_mach_msg_revert_VARIANT_armv81(uint64_t a1, const char *a2)
{
  unint64_t StatusReg;
  uint64_t v3;
  int v4;
  int add_explicit;

  if (a1 == -1)
    return;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_QWORD *)(StatusReg + 224);
  if (v3 != a1)
  {
    *(_QWORD *)(StatusReg + 224) = a1;
    if (a1)
    {
      a2 = (const char *)*(unsigned int *)(a1 + 32);
      if (v3)
      {
LABEL_5:
        v4 = *(_DWORD *)(v3 + 32);
LABEL_8:
        if ((_DWORD)a2 != -1 && (_DWORD)a2 != v4)
          _dispatch_set_priority_and_mach_voucher_slow_VARIANT_armv81(0, (int)a2);
        goto LABEL_11;
      }
    }
    else
    {
      a2 = 0;
      if (v3)
        goto LABEL_5;
    }
    v4 = 0;
    goto LABEL_8;
  }
LABEL_11:
  if (v3)
  {
    add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 12), 0xFFFFFFFF, memory_order_relaxed);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1)
        _dispatch_async_redirect_invoke_cold_1();
      _voucher_xref_dispose_VARIANT_armv81(v3, a2);
    }
  }
}

uint64_t voucher_activity_initialize_4libtrace_VARIANT_armv81(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  if (*a1 <= 2)
    voucher_activity_initialize_4libtrace_VARIANT_armv81_cold_1(*a1);
  v1 = 0;
  atomic_compare_exchange_strong_explicit(&_voucher_libtrace_hooks, (unint64_t *)&v1, (unint64_t)a1, memory_order_relaxed, memory_order_relaxed);
  if (v1)
    voucher_activity_initialize_4libtrace_VARIANT_mp_cold_2();
  result = _dispatch_getenv_BOOL("LIBDISPATCH_NO_FAULTS", 0);
  if ((result & 1) == 0)
  {
    result = getpid();
    if ((_DWORD)result != 1)
    {
      result = os_variant_has_internal_diagnostics();
      if ((_DWORD)result)
      {
        if ((MEMORY[0xFFFFFC104] & 0x80000000) == 0)
          _dispatch_mode &= ~2u;
      }
    }
  }
  return result;
}

uint64_t _voucher_init_VARIANT_armv81()
{
  return __libkernel_voucher_init();
}

unint64_t voucher_activity_id_allocate_VARIANT_armv81(unsigned __int8 a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = _voucher_aid_next;
  while (1)
  {
    v3 = v2;
    if (!v2 || ((v2 + 1) & 0xF) == 0)
      break;
    atomic_compare_exchange_strong_explicit(&_voucher_aid_next, (unint64_t *)&v2, v2 + 1, memory_order_relaxed, memory_order_relaxed);
    if (v2 == v3)
      return v3 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)a1 << 56);
  }
  _voucher_activity_id_allocate_slow_0(v2);
  return v3 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)a1 << 56);
}

mach_vm_address_t voucher_activity_get_logging_preferences_VARIANT_armv81(mach_vm_size_t *a1)
{
  if (_firehose_task_buffer_pred != -1)
    dispatch_once_f_VARIANT_armv81(&_firehose_task_buffer_pred, 0, _firehose_task_buffer_init_0);
  if (_firehose_task_buffer && *(_DWORD *)(_firehose_task_buffer + 1552) != -1)
    return firehose_buffer_get_logging_prefs_VARIANT_mp(_firehose_task_buffer, a1);
  *a1 = 0;
  return 0;
}

BOOL voucher_activity_should_send_strings_VARIANT_armv81()
{
  if (_firehose_task_buffer_pred != -1)
    dispatch_once_f_VARIANT_armv81(&_firehose_task_buffer_pred, 0, _firehose_task_buffer_init_0);
  return _firehose_task_buffer
      && *(_DWORD *)(_firehose_task_buffer + 1552) != -1
      && firehose_buffer_should_send_strings_VARIANT_armv81((int *)_firehose_task_buffer);
}

uint64_t voucher_activity_get_metadata_buffer_VARIANT_armv81(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;

  if (_firehose_task_buffer_pred != -1)
    dispatch_once_f_VARIANT_armv81(&_firehose_task_buffer_pred, 0, _firehose_task_buffer_init_0);
  v2 = _firehose_task_buffer;
  if (!_firehose_task_buffer || *(_DWORD *)(_firehose_task_buffer + 1552) == -1)
  {
    result = 0;
    *a1 = 0;
  }
  else
  {
    *a1 = 2048;
    return v2 + 2048;
  }
  return result;
}

_QWORD *voucher_activity_create_with_data_2_VARIANT_armv81(unint64_t *a1, uint64_t a2, unsigned __int8 a3, const void *a4, size_t a5, char a6)
{
  size_t v7;
  unint64_t v8;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  _DWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  atomic_ullong *v36;
  unint64_t v37;
  unint64_t v38;
  atomic_ullong *v39;
  unint64_t v40;
  uint64_t v41;
  BOOL v42;
  int v43;
  unsigned __int16 v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  atomic_ullong *v57;
  unint64_t v58;
  uint64_t v59;
  _BOOL4 v61;
  unsigned __int16 v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  int *v80;
  _QWORD *result;
  size_t v82;
  _QWORD *v83;
  unint64_t *v84;
  unsigned __int16 v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v92;
  int v93;
  size_t v94;
  unint64_t StatusReg;
  uint64_t v96;
  uint64_t v97;

  v7 = a5 + 8;
  v8 = (unsigned __int16)(a5 + 8);
  if (a5 >= 0xFFFFFFFFFFFFFFF8 || v7 >> 16 || v8 >= 0x81)
    voucher_activity_create_with_data_2_VARIANT_armv81_cold_1(v8);
  v11 = *a1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v12 = *(_QWORD *)(StatusReg + 224);
  if (a2 == -3)
    v13 = *(_QWORD *)(StatusReg + 224);
  else
    v13 = a2;
  v86 = v11;
  v14 = v11 >> 16;
  v15 = (v11 >> 16) & 0xFFFFFFEF;
  if (v12)
  {
    v16 = *(_QWORD *)(v12 + 48);
    if (v16)
    {
      LOWORD(v15) = v15 | 1;
      v17 = *(_QWORD *)(v12 + 56);
      LODWORD(v7) = a5 + 24;
      if (v17)
        LOWORD(v15) = v14 | 0x11;
      else
        LODWORD(v7) = a5 + 16;
      if (!v13)
        goto LABEL_13;
LABEL_16:
      v18 = *(_QWORD *)(v13 + 48);
      goto LABEL_17;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = 0;
  if (v13)
    goto LABEL_16;
LABEL_13:
  v18 = 0;
LABEL_17:
  v92 = v18;
  if (v18)
    LOWORD(v15) = v15 | 0x200;
  v85 = v15;
  if (v18)
    v7 = (v7 + 8);
  else
    v7 = v7;
  v94 = v7;
  v19 = MEMORY[0xFFFFFC104];
  v20 = _os_object_alloc_realized((objc_class *)OS_voucher, 80);
  v21 = v20;
  if (v13 && *(_DWORD *)(v13 + 32))
  {
    v22 = *(_QWORD *)(v13 + 40);
    if (!v22)
      v22 = v13;
    if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v22 + 12), 1u, memory_order_relaxed) <= 0)
      dispatch_group_notify_VARIANT_mp_cold_3();
    *((_QWORD *)v20 + 5) = v22;
    v20[8] = *(_DWORD *)(v22 + 32);
    *((_BYTE *)v20 + 72) = v20[18] & 0xFE | *(_BYTE *)(v22 + 72) & 1;
  }
  v93 = a6 & 1;
  v23 = _voucher_aid_next;
  while (1)
  {
    v24 = v23;
    if (!v23 || ((v23 + 1) & 0xF) == 0)
      break;
    atomic_compare_exchange_strong_explicit(&_voucher_aid_next, (unint64_t *)&v23, v23 + 1, memory_order_relaxed, memory_order_relaxed);
    if (v23 == v24)
      goto LABEL_32;
  }
  _voucher_activity_id_allocate_slow_0(v23);
LABEL_32:
  v25 = v24 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)(a3 | HIBYTE(v92) | ~v19 & 0x80u) << 56);
  v26 = _voucher_unique_pid;
  v21[6] = v25;
  v21[7] = v26;
  v21[8] = v92;
  v88 = v25;
  v89 = v16;
  v87 = v17;
  v83 = v21;
  v84 = a1;
  if (_firehose_task_buffer_pred != -1)
    dispatch_once_f_VARIANT_armv81(&_firehose_task_buffer_pred, 0, _firehose_task_buffer_init_0);
  if (_firehose_task_buffer && *(_DWORD *)(_firehose_task_buffer + 1552) != -1)
  {
    if ((a3 | HIBYTE(v92)) & 0x80 | ~v19 & 0x80 || (MEMORY[0xFFFFFC104] & 0x80) == 0)
      v27 = mach_continuous_time();
    else
      v27 = mach_continuous_approximate_time();
    v28 = v27;
    v29 = 0;
    v30 = (unsigned __int16)(v94 + 24);
    if ((v94 & 7) != 0)
      v31 = (v94 & 0xFFF8) + 32;
    else
      v31 = (unsigned __int16)v94 + 24;
    v82 = v94 << 48;
    v32 = 1;
    while (1)
    {
      v33 = v32;
      v34 = voucher_activity_create_with_data_2_VARIANT_armv81_streams[v29];
      v35 = _firehose_task_buffer;
      v36 = (atomic_ullong *)(_firehose_task_buffer + (v34 << 7) + 640);
      v37 = *v36;
      if ((v32 & 1) == 0)
        break;
      do
      {
        while (1)
        {
          v38 = HIDWORD(v37);
          if ((BYTE4(v37) - 1) <= 0xFDu)
          {
            v39 = (atomic_ullong *)(v35 + ((unint64_t)BYTE4(v37) << 12));
            v40 = *v39;
            if (*v39)
            {
              v41 = v28 - v39[1];
              while ((HIWORD(v40) & 0x1FF) == v34)
              {
                v42 = v30 + (unsigned __int16)v40 <= WORD1(v40) && HIWORD(v41) == 0;
                v43 = !v42;
                v44 = v40 + v31;
                v45 = v40 + v31 + 0x100000000;
                v46 = (v40 + v31) >> 16;
                v47 = ((unsigned __int16)(v40 + v31) + 40 > (unsigned __int16)v46) | HIBYTE(v45);
                if (v43 == 1)
                {
                  v45 = v40;
                  v47 = HIBYTE(v40) | 1;
                  v46 = v40 >> 16;
                  v44 = v40;
                }
                v48 = ((_DWORD)v46 << 16) | v45 & 0xFFFFFF00000000 | (v47 << 56) | v44;
                v49 = v40;
                atomic_compare_exchange_strong_explicit(v39, &v49, v48, memory_order_relaxed, memory_order_relaxed);
                if (v49 == v40)
                {
                  if (v43)
                  {
                    if ((v45 & 0xFF00000000) == 0)
                      firehose_buffer_ring_enqueue_VARIANT_armv81((int *)v35, BYTE4(v37));
                    break;
                  }
                  if (!(_WORD)v40)
                    break;
                  v78 = *(_QWORD *)(StatusReg - 8);
                  v77 = (unint64_t *)((char *)v39 + (unsigned __int16)v40);
                  v77[2] = v41 | v82;
                  goto LABEL_118;
                }
                v40 = v49;
                if (!v49)
                  break;
              }
            }
            LOBYTE(v38) = 0;
          }
          if (!(_DWORD)v37)
            break;
          v52 = v37 | 1;
          v53 = v52 | ((unint64_t)v38 << 32) | v37 & 0xFFFFFF0000000000;
          if (v53 != v37)
          {
            v54 = v37;
            atomic_compare_exchange_strong_explicit(v36, &v54, v53, memory_order_relaxed, memory_order_relaxed);
            v42 = v54 == v37;
            v37 = v54;
            if (!v42)
              continue;
          }
          _dispatch_firehose_gate_wait_VARIANT_armv81((uint64_t)v36, v52);
          v37 = *v36;
        }
        v51 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL | ((unint64_t)v38 << 32) | v37 & 0xFFFFFF0000000000;
        v37 &= 0xFFFFFFFF00000000;
        v50 = v37;
        atomic_compare_exchange_strong_explicit(v36, &v37, v51, memory_order_relaxed, memory_order_relaxed);
      }
      while (v37 != v50);
      v96 = v28;
      v97 = (unsigned __int16)v94;
      BYTE4(v97) = v34;
      v76 = (((1 << v34) & 0x13) != 0) | (2 * *(_BYTE *)(v35 + 1569)) | 4;
LABEL_114:
      BYTE6(v97) = v76;
      v77 = (unint64_t *)firehose_buffer_tracepoint_reserve_slow_VARIANT_armv81(v35, (unsigned __int8 *)&v96, 0);
      if (v77)
      {
LABEL_119:
        if (v89)
        {
          v77[3] = v89;
          v79 = v77 + 4;
        }
        else
        {
          v79 = v77 + 3;
        }
        if (v87)
          *v79++ = v87;
        if (v92)
          *v79++ = v92;
        *v79 = v88;
        memcpy(v79 + 1, a4, a5);
        v80 = (int *)_firehose_task_buffer;
        atomic_store(v86 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)v85 << 16), v77);
        if ((atomic_fetch_add_explicit((atomic_ullong *volatile)((unint64_t)v77 & 0xFFFFFFFFFFFFF000), 0xFFFFFFFF00000000, memory_order_relaxed) & 0x10000FF00000000) == 0x100000100000000)firehose_buffer_ring_enqueue_VARIANT_armv81(v80, (((v77 & 0xFFFFF000) - v80) >> 12));
      }
LABEL_128:
      v32 = 0;
      v29 = 1u;
      if ((v33 & 1) == 0)
        goto LABEL_129;
    }
    v55 = 1;
    while (1)
    {
      v56 = HIDWORD(v37);
      if ((BYTE4(v37) - 1) <= 0xFDu)
      {
        v57 = (atomic_ullong *)(v35 + ((unint64_t)BYTE4(v37) << 12));
        v58 = *v57;
        if (*v57)
        {
          v59 = v28 - v57[1];
          while ((HIWORD(v58) & 0x1FF) == v34)
          {
            v61 = v30 + (unsigned __int16)v58 > WORD1(v58) || HIWORD(v59) != 0;
            v62 = v58 + v31;
            v63 = v58 + v31 + 0x100000000;
            v64 = (v58 + v31) >> 16;
            v65 = ((unsigned __int16)(v58 + v31) + 40 > (unsigned __int16)v64) | HIBYTE(v63);
            if (v61)
            {
              v63 = v58;
              v65 = HIBYTE(v58) | 1;
              v64 = v58 >> 16;
              v62 = v58;
            }
            v66 = ((_DWORD)v64 << 16) | v63 & 0xFFFFFF00000000 | (v65 << 56) | v62;
            v67 = v58;
            atomic_compare_exchange_strong_explicit(v57, &v67, v66, memory_order_relaxed, memory_order_relaxed);
            if (v67 == v58)
            {
              if (v61)
              {
                if ((v63 & 0xFF00000000) == 0)
                  firehose_buffer_ring_enqueue_VARIANT_armv81((int *)v35, BYTE4(v37));
                break;
              }
              if (!(_WORD)v58)
                break;
              v78 = *(_QWORD *)(StatusReg - 8);
              v77 = (unint64_t *)((char *)v57 + (unsigned __int16)v58);
              v77[2] = v59 | v82;
LABEL_118:
              v77[1] = v78;
              goto LABEL_119;
            }
            v58 = v67;
            if (!v67)
              break;
          }
        }
        LOBYTE(v56) = 0;
      }
      if (!v93)
        break;
      if (((v37 >> 40) & 0x80) != 0 || !((((v37 >> 40) & 0x40) == 0) | v55 & 1))
      {
        v71 = (v37 >> 40) & 0x3F;
        if (v71 >= 0x3E)
          LODWORD(v71) = 62;
        v72 = ((((int)v71 + 1) | (v37 >> 40) & 0xC0) << 40) | ((unint64_t)v56 << 32) | v37 & 0xFFFF0000FFFFFFFFLL;
        v70 = v37;
        atomic_compare_exchange_strong_explicit(v36, &v70, v72, memory_order_relaxed, memory_order_relaxed);
        if (v70 == v37)
          goto LABEL_128;
        goto LABEL_104;
      }
      if ((_DWORD)v37)
      {
        v68 = 2;
LABEL_108:
        v73 = v68 | v37;
        v74 = v73 | ((unint64_t)v56 << 32) | v37 & 0xFFFFFF0000000000;
        if (v74 == v37
          || (v75 = v37,
              atomic_compare_exchange_strong_explicit(v36, &v75, v74, memory_order_relaxed, memory_order_relaxed),
              v42 = v75 == v37,
              v37 = v75,
              v42))
        {
          _dispatch_firehose_gate_wait_VARIANT_armv81((uint64_t)v36, v73);
          v55 = 0;
          v37 = *v36;
        }
      }
      else
      {
LABEL_99:
        v69 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL | ((unint64_t)v56 << 32) | v37 & 0xFFFFFF0000000000;
        v70 = v37 & 0xFFFFFFFF00000000;
        atomic_compare_exchange_strong_explicit(v36, &v70, v69, memory_order_relaxed, memory_order_relaxed);
        if (v70 == (v37 & 0xFFFFFFFF00000000))
        {
          v96 = v28;
          v97 = (unsigned __int16)v94;
          BYTE4(v97) = v34;
          v76 = ((4 * v93) | (2 * *(_BYTE *)(v35 + 1569)) | (((1 << v34) & 0x13) != 0)) ^ 4;
          goto LABEL_114;
        }
LABEL_104:
        v37 = v70;
      }
    }
    if ((_DWORD)v37)
    {
      v68 = 1;
      goto LABEL_108;
    }
    goto LABEL_99;
  }
LABEL_129:
  result = v83;
  *v84 = v86 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)v85 << 16);
  return result;
}

_QWORD *voucher_activity_create_with_data_VARIANT_armv81(unint64_t *a1, uint64_t a2, unsigned __int8 a3, const void *a4, size_t a5)
{
  return voucher_activity_create_with_data_2_VARIANT_armv81(a1, a2, a3, a4, a5, 0);
}

_QWORD *voucher_activity_create_with_location_VARIANT_armv81(unint64_t *a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a4;
  return voucher_activity_create_with_data_2_VARIANT_armv81(a1, a2, a3, &v5, 8uLL, 0);
}

uint64_t voucher_get_activity_id_and_creator_VARIANT_armv81(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  if (a1 == (_QWORD *)-3)
  {
    a1 = *(_QWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
    if (a1)
      goto LABEL_3;
  }
  else if (a1)
  {
LABEL_3:
    if (a2)
      *a2 = a1[7];
    if (a3)
      *a3 = a1[8];
    return a1[6];
  }
  if (a2)
    *a2 = 0;
  result = 0;
  if (a3)
    *a3 = 0;
  return result;
}

uint64_t voucher_get_activity_id_VARIANT_armv81(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 == -3)
  {
    a1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
    if (a1)
      goto LABEL_3;
  }
  else if (a1)
  {
LABEL_3:
    if (a2)
      *a2 = *(_QWORD *)(a1 + 64);
    return *(_QWORD *)(a1 + 48);
  }
  result = 0;
  if (a2)
    *a2 = 0;
  return result;
}

void voucher_activity_flush_VARIANT_armv81(unsigned int a1)
{
  int *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  atomic_ullong *v7;
  unint64_t v8;
  unint64_t v9;
  _BOOL4 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  if (_firehose_task_buffer_pred != -1)
    dispatch_once_f_VARIANT_armv81(&_firehose_task_buffer_pred, 0, _firehose_task_buffer_init_0);
  v2 = (int *)_firehose_task_buffer;
  if (_firehose_task_buffer && *(_DWORD *)(_firehose_task_buffer + 1552) != -1)
  {
    v3 = a1;
    v4 = _firehose_task_buffer + ((unint64_t)a1 << 7);
    v5 = *(_QWORD *)(v4 + 640);
    if ((~v5 & 0xFF00000000) == 0 || BYTE4(*(_QWORD *)(v4 + 640)) == 0)
    {
      firehose_buffer_force_connect_VARIANT_armv81((int *)_firehose_task_buffer);
    }
    else
    {
      v7 = (atomic_ullong *)(_firehose_task_buffer + ((unint64_t)BYTE4(v5) << 12));
      v8 = *v7;
      if (*v7)
      {
        v9 = v7[1];
        while ((HIWORD(v8) & 0x1FF) == v3)
        {
          v11 = (unsigned __int16)v8 + 25 > WORD1(v8) || v9 < 0xFFFF000000000000;
          v12 = v8 + 0x100000020;
          v13 = (v8 + 0x100000020) >> 16;
          v14 = ((unsigned __int16)(v8 + 32) + 40 > (unsigned __int16)v13) | ((v8 + 0x100000020) >> 56);
          if (v11)
          {
            v12 = v8;
            v14 = HIBYTE(v8) | 1;
            v13 = v8 >> 16;
          }
          v15 = ((_DWORD)v13 << 16) | v12 & 0xFFFFFF00000000 | (v14 << 56) | (unsigned __int16)v12;
          v16 = v8;
          atomic_compare_exchange_strong_explicit(v7, &v16, v15, memory_order_relaxed, memory_order_relaxed);
          if (v16 == v8)
          {
            if (v11)
            {
              if ((v12 & 0xFF00000000) == 0)
                firehose_buffer_ring_enqueue_VARIANT_armv81(v2, BYTE4(v5));
            }
            else if ((_WORD)v8)
            {
              voucher_activity_flush_VARIANT_armv81_cold_1((unsigned __int16)v8);
            }
            break;
          }
          v8 = v16;
          if (!v16)
            break;
        }
      }
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v4 + 640), &v17, v5 & 0xFFFFFF00FFFFFFFFLL, memory_order_relaxed, memory_order_relaxed);
    }
  }
}

atomic_ullong *voucher_activity_trace_v_2_VARIANT_armv81(atomic_ullong *result, unint64_t a2, uint64_t a3, uint64_t a4, char *a5, unint64_t a6, char a7)
{
  uint64_t v7;
  uint64_t v11;
  unsigned int v13;
  uint64_t v14;
  unint64_t StatusReg;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  char *v21;
  uint64_t v22;
  _BOOL4 v23;
  unsigned __int16 v24;
  char *v25;
  unsigned __int16 v26;
  char *v27;
  int v28;
  atomic_ullong *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  atomic_ullong *v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;
  int v37;
  unsigned __int16 v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  BOOL v56;
  uint64_t v57;
  unint64_t *v58;
  _QWORD *v59;
  size_t v60;
  unint64_t v61;
  BOOL v62;
  size_t v63;
  unint64_t v64;
  int *v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  int v71;
  _BOOL4 v72;
  _BOOL4 v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unsigned __int16 v81;
  unint64_t v82;
  char v83;
  void *__dst;
  uint64_t v85;
  uint64_t v86;

  LOBYTE(v7) = a7;
  v11 = a3;
  v13 = result;
  if (_firehose_task_buffer_pred != -1)
  {
LABEL_99:
    v67 = v13;
    v68 = v11;
    result = dispatch_once_f_VARIANT_armv81(&_firehose_task_buffer_pred, 0, _firehose_task_buffer_init_0);
    v11 = v68;
    v13 = v67;
  }
  v14 = _firehose_task_buffer;
  if (!_firehose_task_buffer || *(_DWORD *)(_firehose_task_buffer + 1552) == -1)
    return 0;
  __dst = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v16 = *(_QWORD *)(StatusReg + 224);
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 48);
    v18 = *(_QWORD *)(v16 + 56);
  }
  else
  {
    v18 = 0;
    v17 = 0;
  }
  v19 = a5 + 8;
  if (!v17)
    v19 = a5;
  v20 = (v17 != 0) | (a2 >> 16) & 0xFFFFFFEF;
  v21 = v19 + 8;
  if (v18)
    LOWORD(v20) = (v17 != 0) | WORD1(a2);
  else
    v21 = v19;
  if ((a2 & 0x100000) != 0)
    v22 = v18;
  else
    v22 = 0;
  v23 = (a2 & 0x100000) == 0 || v18 == 0;
  if ((a2 & 0x100000) != 0)
    v24 = v20;
  else
    v24 = (v17 != 0) | WORD1(a2);
  if ((a2 & 0x100000) != 0)
    v25 = v21;
  else
    v25 = v19;
  v26 = v24 | 0x100;
  if (a6)
  {
    v27 = v25 + 4;
  }
  else
  {
    v26 = v24;
    v27 = v25;
  }
  if ((unint64_t)&v27[a6 + 24] >= 0xFF1)
  {
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Log is too large";
    qword_1EDF52D38 = (uint64_t)&v27[a6 + 24];
    __break(1u);
    return result;
  }
  v80 = v22;
  v81 = v26;
  v82 = a2;
  v28 = v7 & 1;
  v7 = v13;
  v29 = (atomic_ullong *)(v14 + ((unint64_t)v13 << 7) + 640);
  v30 = *v29;
  a2 = (unsigned __int16)((_WORD)v27 + 24 + a6);
  if ((v27 & 7) != 0)
    v31 = ((unsigned __int16)v27 & 0xFFF8u) + 32;
  else
    v31 = (unsigned __int16)v27 + 24;
  v83 = 1;
  while (1)
  {
    v32 = HIDWORD(v30);
    if ((BYTE4(v30) - 1) <= 0xFDu)
    {
      v33 = (atomic_ullong *)(v14 + ((unint64_t)BYTE4(v30) << 12));
      v34 = *v33;
      if (*v33)
      {
        v35 = v11 - v33[1];
        while ((HIWORD(v34) & 0x1FF) == v7)
        {
          v36 = a2 + (unsigned __int16)v34 <= WORD1(v34) && HIWORD(v35) == 0;
          v37 = !v36;
          v38 = v34 + v31;
          v39 = v34 + v31 - ((_DWORD)a6 << 16);
          v40 = v39 >> 16;
          v41 = ((unsigned __int16)(v34 + v31) + 40 > WORD1(v39)) | ((v39 + 0x100000000) >> 56);
          if (v37 == 1)
            v42 = v34;
          else
            v42 = v39 + 0x100000000;
          if (v37 == 1)
          {
            v41 = HIBYTE(v34) | 1;
            v43 = v34 >> 16;
          }
          else
          {
            LODWORD(v43) = v40;
          }
          if (v37 == 1)
            v38 = v34;
          v44 = ((_DWORD)v43 << 16) | v42 & 0xFFFFFF00000000 | (v41 << 56) | v38;
          v45 = v34;
          atomic_compare_exchange_strong_explicit(v33, &v45, v44, memory_order_relaxed, memory_order_relaxed);
          if (v45 == v34)
          {
            if (v37)
            {
              if ((v42 & 0xFF00000000) == 0)
              {
                v78 = v17;
                v76 = v13;
                v74 = v11;
                v70 = v28;
                v72 = v23;
                v69 = StatusReg;
                firehose_buffer_ring_enqueue_VARIANT_armv81((int *)v14, BYTE4(v30));
                StatusReg = v69;
                v28 = v70;
                v23 = v72;
                v11 = v74;
                v13 = v76;
                v17 = v78;
              }
              break;
            }
            __dst = (char *)v33 + (unsigned __int16)v43;
            v32 = (unsigned __int16)v34;
            if (!(_WORD)v34)
              goto LABEL_57;
            v66 = *(_QWORD *)(StatusReg - 8);
            v58 = (unint64_t *)((char *)v33 + v32);
            v58[2] = v35 | ((_QWORD)v27 << 48);
            v58[1] = v66;
            if (v17)
              goto LABEL_79;
            goto LABEL_96;
          }
          v34 = v45;
          if (!v45)
            break;
        }
      }
      LOBYTE(v32) = 0;
    }
LABEL_57:
    if (!v28)
      break;
    if (((v30 >> 40) & 0x80) != 0 || !((((v30 >> 40) & 0x40) == 0) | v83 & 1))
    {
      v49 = (v30 >> 40) & 0x3F;
      if (v49 >= 0x3E)
        LODWORD(v49) = 62;
      v50 = ((((int)v49 + 1) | (v30 >> 40) & 0xC0) << 40) | ((unint64_t)v32 << 32) | v30 & 0xFFFF0000FFFFFFFFLL;
      v48 = v30;
      atomic_compare_exchange_strong_explicit(v29, &v48, v50, memory_order_relaxed, memory_order_relaxed);
      if (v48 == v30)
        return 0;
LABEL_68:
      v30 = v48;
    }
    else
    {
      if (!(_DWORD)v30)
        goto LABEL_63;
      v46 = 2;
LABEL_72:
      v51 = v46 | v30;
      v52 = v51 | ((unint64_t)v32 << 32) | v30 & 0xFFFFFF0000000000;
      if (v52 == v30
        || (v53 = v30,
            atomic_compare_exchange_strong_explicit(v29, &v53, v52, memory_order_relaxed, memory_order_relaxed),
            v36 = v53 == v30,
            v30 = v53,
            v36))
      {
        v79 = v17;
        v77 = v13;
        v75 = v11;
        v71 = v28;
        v73 = v23;
        v54 = StatusReg;
        _dispatch_firehose_gate_wait_VARIANT_armv81((uint64_t)v29, v51);
        v28 = v71;
        v23 = v73;
        StatusReg = v54;
        v11 = v75;
        v13 = v77;
        v17 = v79;
        v83 = 0;
        v30 = *v29;
      }
    }
  }
  if ((_DWORD)v30)
  {
    v46 = 1;
    goto LABEL_72;
  }
LABEL_63:
  v47 = *(_QWORD *)(StatusReg + 24) & 0xFFFFFFFCLL | ((unint64_t)v32 << 32) | v30 & 0xFFFFFF0000000000;
  v48 = v30 & 0xFFFFFFFF00000000;
  atomic_compare_exchange_strong_explicit(v29, &v48, v47, memory_order_relaxed, memory_order_relaxed);
  if (v48 != (v30 & 0xFFFFFFFF00000000))
    goto LABEL_68;
  v56 = v23;
  a2 = v17;
  v85 = v11;
  v86 = (unsigned __int16)v27;
  WORD1(v86) = a6;
  BYTE4(v86) = v13;
  BYTE6(v86) = ((2 * *(_BYTE *)(v14 + 1569)) | (4 * v28) | (((1 << v7) & 0x13) != 0)) ^ 4;
  v57 = firehose_buffer_tracepoint_reserve_slow_VARIANT_armv81(v14, (unsigned __int8 *)&v85, &__dst);
  v55 = 0;
  if (v57)
  {
    v58 = (unint64_t *)v57;
    v17 = a2;
    LOBYTE(v23) = v56;
    if (a2)
    {
LABEL_79:
      v58[3] = v17;
      v59 = v58 + 4;
      if (!v23)
        goto LABEL_80;
    }
    else
    {
LABEL_96:
      v59 = v58 + 3;
      if (!v23)
LABEL_80:
        *v59++ = v80;
    }
    if (a6)
    {
      *(_DWORD *)v59 = (unsigned __int16)((_WORD)__dst - ((unsigned __int16)v58 & 0xF000)) | ((unsigned __int16)a6 << 16);
      v59 = (_QWORD *)((char *)v59 + 4);
    }
    while (a5)
    {
      v60 = *(_QWORD *)(a4 + 8);
      memcpy(v59, *(const void **)a4, v60);
      v61 = *(_QWORD *)(a4 + 8);
      v62 = (unint64_t)a5 >= v61;
      a5 -= v61;
      if (!v62)
      {
        qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid arguments";
        __break(1u);
LABEL_98:
        qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid arguments";
        __break(1u);
        goto LABEL_99;
      }
      v59 = (_QWORD *)((char *)v59 + v60);
      a4 += 16;
    }
    if (a6)
    {
      a5 = (char *)__dst;
      do
      {
        v63 = *(_QWORD *)(a4 + 8);
        memcpy(a5, *(const void **)a4, v63);
        a5 += v63;
        __dst = a5;
        v64 = *(_QWORD *)(a4 + 8);
        v62 = a6 >= v64;
        a6 -= v64;
        if (!v62)
          goto LABEL_98;
        a4 += 16;
      }
      while (a6);
    }
    v65 = (int *)_firehose_task_buffer;
    v55 = v82 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)v81 << 16);
    atomic_store(v55, v58);
    if ((atomic_fetch_add_explicit((atomic_ullong *volatile)((unint64_t)v58 & 0xFFFFFFFFFFFFF000), 0xFFFFFFFF00000000, memory_order_relaxed) & 0x10000FF00000000) == 0x100000100000000)firehose_buffer_ring_enqueue_VARIANT_armv81(v65, (((v58 & 0xFFFFF000) - v65) >> 12));
  }
  return (atomic_ullong *)v55;
}

atomic_ullong *voucher_activity_trace_v_VARIANT_armv81(atomic_ullong *a1, unint64_t a2, uint64_t a3, uint64_t a4, char *a5, unint64_t a6)
{
  return voucher_activity_trace_v_2_VARIANT_armv81(a1, a2, a3, a4, a5, a6, 0);
}

atomic_ullong *voucher_activity_trace_VARIANT_armv81(atomic_ullong *a1, unint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  _QWORD v6[2];

  v6[0] = a4;
  v6[1] = a5;
  return voucher_activity_trace_v_VARIANT_armv81(a1, a2, a3, (uint64_t)v6, a5, 0);
}

size_t _voucher_debug_VARIANT_armv81(uint64_t a1, char *__str, size_t __size)
{
  int v6;
  size_t v7;
  size_t v8;
  size_t v9;
  int v10;
  size_t v11;
  int v12;
  int v13;
  uint64_t v14;
  size_t v15;
  int v16;
  size_t v17;
  size_t v18;
  int v19;
  size_t v20;
  size_t v22;
  const char *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  int v27;
  size_t v28;
  size_t v29;
  size_t v30;
  size_t v31;
  size_t v32;
  int v33;
  size_t v34;

  v6 = snprintf(__str, __size, "voucher[%p] = { xref = %d, ref = %d", (const void *)a1, *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 8));
  v7 = v6;
  if (v6 >= __size)
    v7 = __size;
  if (v6 >= 0)
    v8 = v7;
  else
    v8 = 0;
  if (*(_QWORD *)(a1 + 40))
  {
    if (__size >= v8)
      v9 = __size - v8;
    else
      v9 = 0;
    v10 = snprintf(&__str[v8], v9, ", base voucher %p", *(const void **)(a1 + 40));
    v11 = v10;
    if (v9 < v10)
      v11 = v9;
    if (v10 < 0)
      v11 = 0;
    v8 += v11;
  }
  v12 = *(_DWORD *)(a1 + 32);
  if (v12)
  {
    if (__size >= v8)
      v22 = __size - v8;
    else
      v22 = 0;
    if (v12 == *(_DWORD *)(a1 + 36))
      v23 = " & ipc kvoucher";
    else
      v23 = (const char *)&unk_18A069831;
    snprintf(&__str[v8], v22, ", kvoucher%s 0x%x [\n", v23, v12);
    v24 = voucher_kvoucher_debug_VARIANT_armv81(*MEMORY[0x1E0C883F0], *(unsigned int *)(a1 + 32));
    v25 = v24;
    if (__size >= v24)
      v26 = __size - v24;
    else
      v26 = 0;
    v27 = snprintf(&__str[v24], v26, "]");
    v28 = v27;
    if (v26 < v27)
      v28 = v26;
    if (v27 < 0)
      v28 = 0;
    v8 = v28 + v25;
  }
  v13 = *(_DWORD *)(a1 + 36);
  if (v13 && v13 != *(_DWORD *)(a1 + 32))
  {
    if (__size >= v8)
      v29 = __size - v8;
    else
      v29 = 0;
    snprintf(&__str[v8], v29, ", ipc kvoucher 0x%x [\n", *(_DWORD *)(a1 + 36));
    v30 = voucher_kvoucher_debug_VARIANT_armv81(*MEMORY[0x1E0C883F0], *(unsigned int *)(a1 + 36));
    v31 = v30;
    if (__size >= v30)
      v32 = __size - v30;
    else
      v32 = 0;
    v33 = snprintf(&__str[v30], v32, "]");
    v34 = v33;
    if (v32 < v33)
      v34 = v32;
    if (v33 < 0)
      v34 = 0;
    v8 = v34 + v31;
  }
  v14 = *(_QWORD *)(a1 + 48);
  if (v14)
  {
    if (__size >= v8)
      v15 = __size - v8;
    else
      v15 = 0;
    v16 = snprintf(&__str[v8], v15, ", activity 0x%llx (pid: 0x%16llx, parent 0x%llx)", v14, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
    v17 = v16;
    if (v15 < v16)
      v17 = v15;
    if (v16 < 0)
      v17 = 0;
    v8 += v17;
  }
  if (__size >= v8)
    v18 = __size - v8;
  else
    v18 = 0;
  v19 = snprintf(&__str[v8], v18, " }");
  v20 = v19;
  if (v18 < v19)
    v20 = v18;
  if (v19 < 0)
    v20 = 0;
  return v20 + v8;
}

uint64_t voucher_mach_msg_fill_aux_0(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (!v2)
    return 0;
  v3 = 0;
  if (a2 >= 0x28)
  {
    v4 = *(_QWORD *)(v2 + 48);
    if (v4)
    {
      *(_OWORD *)a1 = xmmword_18A06E860;
      v5 = *(_OWORD *)(v2 + 56);
      *(_QWORD *)(a1 + 16) = v4;
      *(_OWORD *)(a1 + 24) = v5;
      return 40;
    }
  }
  return v3;
}

void _voucher_activity_id_allocate_slow_0(uint64_t a1)
{
  uint64_t v2;
  atomic_ullong *v3;
  uint64_t v4;
  uint64_t activity_id;

  activity_id = 0;
  v2 = mach_generate_activity_id(*MEMORY[0x1E0C883F0], 1, &activity_id);
  if ((_DWORD)v2)
  {
    v3 = (atomic_ullong *)(int)v2;
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Could not generate an activity ID";
    qword_1EDF52D38 = (int)v2;
    __break(1u);
  }
  else
  {
    if (16 * (activity_id & 0xFFFFFFFFFFFFFLL))
      v2 = 16 * (activity_id & 0xFFFFFFFFFFFFFLL);
    else
      v2 = 1;
    v3 = &_voucher_aid_next;
    if (a1)
      goto LABEL_6;
  }
  v4 = 0;
  atomic_compare_exchange_strong_explicit(v3, (unint64_t *)&v4, v2 + 1, memory_order_relaxed, memory_order_relaxed);
  if (v4)
LABEL_6:
    __swp(v2, (unsigned int *)v3);
}

uint64_t _firehose_task_buffer_init_0()
{
  pid_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C874D8];
  v8 = 0;
  v6 = 0u;
  v7 = 0u;
  v5 = 0u;
  v0 = getpid();
  result = proc_pidinfo(v0, 17, 1uLL, &v5, 56);
  if ((_DWORD)result != 56)
  {
    if (!(_DWORD)result)
    {
      v4 = **(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Unable to get the unique pid (error)";
      qword_1EDF52D38 = v4;
      __break(1u);
    }
    qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Unable to get the unique pid (size)";
    qword_1EDF52D38 = (int)result;
    __break(1u);
  }
  _voucher_unique_pid = v6;
  if (_voucher_libtrace_hooks)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(_voucher_libtrace_hooks + 8))(result, v2);
    if ((_DWORD)result)
    {
      result = firehose_buffer_create_VARIANT_armv81(result, _voucher_unique_pid, _dispatch_memory_warn);
      _firehose_task_buffer = result;
      if (*(uint64_t *)_voucher_libtrace_hooks >= 4)
      {
        v3 = *(uint64_t (**)(uint64_t, uint64_t))(_voucher_libtrace_hooks + 32);
        if (v3)
          return v3(result + 2048, 2048);
      }
    }
  }
  return result;
}

mach_vm_address_t firehose_buffer_create_VARIANT_armv81(mach_port_name_t a1, uint64_t a2, uint64_t a3)
{
  ipc_space_t *v6;
  kern_return_t v7;
  mach_vm_address_t v8;
  kern_return_t v9;
  uint64_t i;
  kern_return_t v12;
  mach_vm_address_t address;
  mach_port_options_t options;
  mach_port_name_t name;

  address = *MEMORY[0x1E0C88820];
  if (0x4000 % address)
    firehose_buffer_create_VARIANT_mp_cold_4();
  v6 = (ipc_space_t *)MEMORY[0x1E0C883F0];
  v7 = mach_vm_map(*MEMORY[0x1E0C883F0], &address, 0x40000uLL, 0, 1308622851, 0, 0, 0, 3, 7, 2u);
  if (v7)
  {
    if (v7 != 3)
      _dispatch_bug(346, v7);
    v12 = mach_port_deallocate(*v6, a1);
    if (v12 == -301)
      _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
    if (v12)
      _dispatch_bug(91, v12);
    return 0;
  }
  else
  {
    v8 = address;
    *(_DWORD *)(address + 1548) = a1;
    *(_DWORD *)(v8 + 1544) = getpid();
    *(_QWORD *)(v8 + 1536) = a2;
    name = 0;
    *(_QWORD *)&options.flags = 0x500000033;
    options.8 = 0uLL;
    v9 = mach_port_construct(*v6, &options, v8, &name);
    if (v9)
    {
      if (v9 == -301)
        _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
      firehose_buffer_create_VARIANT_mp_cold_2(v9);
    }
    *(_DWORD *)(v8 + 1560) = name;
    *(_DWORD *)(v8 + 264) = 20180226;
    *(_QWORD *)(v8 + 512) = a3;
    for (i = 644; i != 1540; i += 128)
    {
      if (i != 1028)
        *(_BYTE *)(v8 + i) = -1;
    }
    firehose_buffer_update_limits_unlocked_0(v8);
    *(_QWORD *)(v8 + 520) = 31;
    *(_WORD *)v8 = 1;
    *(_WORD *)(v8 + 2) = 2;
    *(_WORD *)(v8 + 4) = 3;
    *(_WORD *)(v8 + 6) = 4;
    *(_QWORD *)(v8 + 464) = 4;
    *(_WORD *)(v8 + 320) = 4;
    *(_WORD *)(v8 + 256) = 0;
    *(_WORD *)(v8 + 258) = 4;
    *(_WORD *)(v8 + 260) = 0;
    *(_WORD *)(v8 + 262) = 0;
  }
  return v8;
}

uint64_t firehose_buffer_update_limits_unlocked_0(uint64_t result)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  __int16 v12;
  unsigned __int16 v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  __int16 v17;
  __int16 v18;
  unsigned int v19;
  unsigned __int16 v20;
  unsigned int v21;
  unsigned __int8 v22;
  uint64_t v23;
  unint64_t v24;

  v1 = 0;
  v2 = 0;
  v3 = 0;
  v4 = *(_QWORD *)(result + 512);
  v5 = (unsigned __int8 *)(result + 644);
  do
  {
    v7 = *v5;
    v5 += 128;
    v6 = v7;
    if (((1 << v3) & 0x13) != 0)
      v8 = v2;
    else
      v8 = v2 + 1;
    if (((1 << v3) & 0x13) != 0)
      v9 = v1 + 1;
    else
      v9 = v1;
    if (v6 != 255)
    {
      v2 = v8;
      v1 = v9;
    }
    ++v3;
  }
  while (v3 != 7);
  v10 = (2 * (v1 + v2)) | 1;
  if ((v4 & 2) != 0)
    v10 = 3 * v1 + 6 * v2 + 1;
  v11 = v1 + v2 + 3;
  v12 = v1 + 4 * v2;
  if ((v4 & 2) != 0)
    v13 = v12 + 1;
  else
    v13 = v11;
  if ((v4 & 1) == 0)
    v13 = v10;
  v14 = *MEMORY[0x1E0C88820];
  if ((*MEMORY[0x1E0C88820] & 0xFFFE000) != 0)
  {
    v15 = v14 >> 12;
    v16 = v13 % (unsigned __int16)(v14 >> 12);
    v17 = v15 - v16;
    if (v16)
      v18 = v17;
    else
      v18 = 0;
    v13 += v18;
  }
  if ((v4 & 1) != 0)
    v19 = 4;
  else
    v19 = 8;
  if (v19 <= v13)
    v19 = v13;
  v20 = v19 - 1;
  v21 = 2 * (unsigned __int16)v1;
  if ((3 * v19) >> 3 > v21)
    v21 = (3 * v19) >> 3;
  v22 = v19 + 1;
  v23 = *(_QWORD *)(result + 528);
  *(_WORD *)(result + 528) = v20;
  *(_WORD *)(result + 530) = v21;
  *(_BYTE *)(result + 532) = v22;
  *(_BYTE *)(result + 533) = 0;
  *(_WORD *)(result + 534) = 0;
  v24 = ((v21 << 16) | ((unint64_t)v22 << 32) | v20) - v23;
  if (v24)
    atomic_fetch_add_explicit((atomic_ullong *volatile)(result + 448), v24, memory_order_relaxed);
  return result;
}

BOOL firehose_buffer_should_send_strings_VARIANT_armv81(int *guard)
{
  int v1;
  int v3;
  int v5;
  int should_send_strings;
  int v7;

  v1 = guard[388];
  v7 = 0;
  if (v1 == -1)
    return 0;
  if (!v1)
  {
LABEL_10:
    v5 = firehose_client_reconnect_0(guard, v1, 0);
    if ((v5 - 1) <= 0xFFFFFFFD)
    {
      should_send_strings = firehose_send_should_send_strings(v5, &v7);
      if (!should_send_strings)
        return v7 != 0;
      if (should_send_strings != 268435459)
      {
        if (should_send_strings == -301)
          _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
        _dispatch_bug(654, should_send_strings);
      }
    }
    return 0;
  }
  v3 = firehose_send_should_send_strings(v1, &v7);
  if (v3)
  {
    if (v3 != 268435459)
    {
      if (v3 == -301)
        _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
      _dispatch_bug(642, v3);
    }
    goto LABEL_10;
  }
  return v7 != 0;
}

uint64_t firehose_client_reconnect_0(int *guard, int a2, unsigned int a3)
{
  int v6;
  atomic_uint *v7;
  unint64_t StatusReg;
  uint64_t v9;
  ipc_space_t *v11;
  uint64_t v12;
  char v13;
  char v14;
  int *v15;
  mach_port_name_t v16;
  kern_return_t v17;
  kern_return_t memory_entry_64;
  uint64_t (*v19)(int **, memory_object_size_t *);
  int v20;
  memory_object_size_t v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  char v25;
  char v26;
  kern_return_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  kern_return_t v34;
  kern_return_t v35;
  uint64_t v36;
  char v37;
  char v38;
  mach_port_name_t v39;
  kern_return_t v40;
  kern_return_t v41;
  kern_return_t v42;
  int *v43;
  memory_object_size_t size;
  mach_port_t object_handle[2];
  mach_port_options_t options;
  mach_port_name_t name;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;

  v6 = 0;
  v50 = *MEMORY[0x1E0C874D8];
  *(_QWORD *)object_handle = 0;
  v7 = guard + 391;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  atomic_compare_exchange_strong_explicit(guard + 391, (unsigned int *)&v6, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
  if (v6)
    _dispatch_unfair_lock_lock_slow_VARIANT_armv81((uint64_t)(guard + 391));
  v9 = guard[a3 + 388];
  if ((_DWORD)v9 == a2 && (_DWORD)v9 != -1)
  {
    v11 = (ipc_space_t *)MEMORY[0x1E0C883F0];
    if (a2)
    {
      v12 = 0;
      v13 = 1;
      do
      {
        v14 = v13;
        v15 = &guard[v12];
        v16 = v15[388];
        if (mach_port_destruct(*v11, v16, 0, (mach_port_context_t)guard) == -301)
          _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
        v17 = mach_port_deallocate(*v11, v16);
        if (v17 == -301)
          _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
        if (v17)
          _dispatch_bug(91, v17);
        v13 = 0;
        v15[388] = 0;
        v12 = 1;
      }
      while ((v14 & 1) != 0);
    }
    v43 = guard;
    size = 0x40000;
    memory_entry_64 = mach_make_memory_entry_64(*v11, &size, (memory_object_offset_t)guard, 4194305, &object_handle[1], 0);
    if (!(size >> 18))
      firehose_client_reconnect_cold_1_0(size);
    if (memory_entry_64)
      firehose_client_reconnect_cold_9(memory_entry_64);
    if (a2
      && (v19 = *(uint64_t (**)(int **, memory_object_size_t *))(_voucher_libtrace_hooks + 24)) != 0
      && ((v20 = v19(&v43, &size), v21 = size, !v20) ? (v22 = v43 == 0) : (v22 = 1),
          !v22 ? (v23 = size == 0) : (v23 = 1),
          !v23))
    {
      v34 = mach_make_memory_entry_64(*v11, &size, (memory_object_offset_t)v43, 4194305, object_handle, 0);
      if (v34)
        firehose_client_reconnect_cold_9(v34);
      v35 = mach_vm_deallocate(*v11, (mach_vm_address_t)v43, size);
      if (v35)
        _dispatch_bug(209, v35);
    }
    else
    {
      v21 = 0;
    }
    v24 = 0;
    v25 = 1;
    do
    {
      v26 = v25;
      name = 0;
      *(_QWORD *)&options.flags = 0x100000017;
      options.8 = 0uLL;
      v27 = mach_port_construct(*v11, &options, (mach_port_context_t)guard, &name);
      if (v27)
      {
        if (v27 == -301)
          _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
        firehose_buffer_create_VARIANT_mp_cold_2(v27);
      }
      v25 = 0;
      *(&v48 + v24) = name;
      v24 = 1;
    }
    while ((v26 & 1) != 0);
    v9 = *(&v48 + a3);
    v28 = v48;
    v29 = v49;
    v30 = firehose_send_register(guard[387], object_handle[1], 0x40000, v48, v49, guard[390], object_handle[0], v21);
    if (v30)
    {
      if (v30 != 268435459)
        firehose_client_reconnect_cold_3(v30);
      v36 = 0;
      v37 = 1;
      do
      {
        v38 = v37;
        v39 = *(&v48 + v36);
        if (mach_port_destruct(*v11, v39, 0, (mach_port_context_t)guard) == -301)
          _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
        v40 = mach_port_deallocate(*v11, v39);
        if (v40 == -301)
          _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
        if (v40)
          _dispatch_bug(91, v40);
        v37 = 0;
        guard[v36 + 388] = -1;
        v36 = 1;
      }
      while ((v38 & 1) != 0);
      v41 = mach_port_deallocate(*v11, object_handle[1]);
      if (v41 == -301)
        _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
      if (v41)
        _dispatch_bug(91, v41);
      if (object_handle[0])
      {
        v42 = mach_port_deallocate(*v11, object_handle[0]);
        if (v42 == -301)
          _dispatch_sema4_create_slow_VARIANT_mp_cold_2();
        if (v42)
          _dispatch_bug(91, v42);
      }
      v9 = 0xFFFFFFFFLL;
    }
    else
    {
      guard[388] = v28;
      guard[389] = v29;
    }
  }
  v31 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  v32 = atomic_exchange_explicit(v7, 0, memory_order_release);
  if (v32 != v31)
    _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)v7, v32);
  return v9;
}

void firehose_client_push_reply_VARIANT_armv81(uint64_t a1, int a2)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: firehose_push_reply should never be sent to the buffer receive port";
  qword_1EDF52D38 = a2;
  __break(1u);
}

uint64_t firehose_client_push_notify_async_VARIANT_armv81(uint64_t a1, unint64_t a2, unint64_t a3, int a4)
{
  unint64_t v4;

  v4 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 184;
  do
    v4 = *(_QWORD *)v4;
  while (v4 && *(char **)(v4 + 8) != "firehose");
  firehose_client_merge_updates_0(*(_QWORD *)(v4 + 16), 1, a2, a3, a4 != 0, 0);
  return 0;
}

uint64_t firehose_client_merge_updates_0(uint64_t result, int a2, unint64_t a3, unint64_t a4, int a5, _QWORD *a6)
{
  char v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int16 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t add_explicit;

  if (a5)
  {
    v6 = *(_BYTE *)(result + 1568);
    if (!v6)
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 1568), (unsigned __int8 *)&v6, 1u, memory_order_relaxed, memory_order_relaxed);
  }
  v7 = *(_QWORD *)(result + 464);
  do
  {
    v8 = v7;
    if (a3 <= v7)
      break;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(result + 464), &v7, a3, memory_order_relaxed, memory_order_relaxed);
  }
  while (v7 != v8);
  if (a3 <= v8)
    v9 = 0;
  else
    v9 = a3 - v8;
  v10 = *(_QWORD *)(result + 488);
  do
  {
    v11 = v10;
    if (a4 <= v10)
      break;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(result + 488), &v10, a4, memory_order_relaxed, memory_order_relaxed);
  }
  while (v10 != v11);
  if (a4 <= v11)
    v12 = 0;
  else
    v12 = a4 - v11;
  if (v9 | (unsigned __int16)v12)
  {
    v13 = *(_QWORD *)(result + 256);
    v14 = v13;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(result + 256), &v14, ((unint64_t)(unsigned __int16)(v9 + WORD1(v13)) << 16) | ((unint64_t)(v12 + HIWORD(v13)) << 48) | v13 & 0xFFFF0000FFFFLL, memory_order_relaxed, memory_order_relaxed);
    if (v14 != v13)
    {
      v15 = v14;
      do
      {
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(result + 256), &v15, ((unint64_t)(unsigned __int16)(v9 + WORD1(v14)) << 16) | ((unint64_t)(v12+ HIWORD(v14)) << 48) | v14 & 0xFFFF0000FFFFLL, memory_order_relaxed, memory_order_relaxed);
        v16 = v15 == v14;
        v14 = v15;
      }
      while (!v16);
    }
    v17 = v9 | ((unint64_t)(unsigned __int16)v12 << 16);
    add_explicit = atomic_fetch_add_explicit((atomic_ullong *volatile)(result + 448), v17, memory_order_release);
    if (a6)
      *a6 = add_explicit + v17;
    if (a2)
    {
      if ((_WORD)v12)
        atomic_fetch_add_explicit((atomic_ullong *volatile)(result + 496), 1uLL, memory_order_relaxed);
      if (v9)
        atomic_fetch_add_explicit((atomic_ullong *volatile)(result + 472), 1uLL, memory_order_relaxed);
    }
  }
  else if (a6)
  {
    *a6 = *(_QWORD *)(result + 448);
  }
  return result;
}

uint64_t firehose_buffer_update_limits_VARIANT_armv81(uint64_t a1)
{
  int v2;
  atomic_uint *v3;
  unint64_t StatusReg;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;

  v2 = 0;
  v3 = (atomic_uint *)(a1 + 536);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 536), (unsigned int *)&v2, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
  if (v2)
    _dispatch_unfair_lock_lock_slow_VARIANT_armv81(a1 + 536);
  result = firehose_buffer_update_limits_unlocked_0(a1);
  v6 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  v7 = atomic_exchange_explicit(v3, 0, memory_order_release);
  if (v7 != v6)
    return _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)v3, v7);
  return result;
}

void firehose_buffer_ring_enqueue_VARIANT_armv81(int *guard, unsigned int a2)
{
  unint64_t v3;
  int *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  unint64_t StatusReg;
  atomic_ushort *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  mach_port_context_t v16;
  int v17;
  int v18;
  mach_port_t v19;
  int v20;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int *v26;
  int v27;
  atomic_ushort *v28;
  uint64_t v29;
  int *v30;

  v3 = HIBYTE(guard[1024 * (unint64_t)a2 + 1]) & 2;
  v4 = guard + 32;
  v5 = 384;
  if ((guard[1024 * (unint64_t)a2 + 1] & 0x2000000) != 0)
  {
    v6 = guard + 96;
  }
  else
  {
    v5 = 320;
    v6 = guard + 80;
  }
  if ((guard[1024 * (unint64_t)a2 + 1] & 0x2000000) == 0)
    v4 = guard;
  v7 = *(unsigned __int16 *)((char *)guard + v5);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v9 = (atomic_ushort *)((char *)guard + v5);
  while (1)
  {
LABEL_7:
    while (1)
    {
      v10 = v7;
      v11 = v7 & 0xFFFFFFC0;
      *(_QWORD *)(StatusReg + 976) = v6;
      v12 = v7 & 0x3F;
      v13 = v7 & 0xFFFFFFC0;
      atomic_compare_exchange_strong_explicit((atomic_ushort *volatile)v4 + v12, (unsigned __int16 *)&v13, v7 & 0xFFC0 | a2, memory_order_relaxed, memory_order_relaxed);
      if (v13 == (v7 & 0xFFC0))
        break;
      *(_QWORD *)(StatusReg + 976) = 0;
      v7 = *(unsigned __int16 *)((char *)guard + v5);
      if ((_DWORD)v7 == (unsigned __int16)v10)
      {
        v14 = -1024;
        while (*((unsigned __int16 *)v4 + v12) != (unsigned __int16)v11)
        {
          v24 = v10;
          v29 = v12;
          v27 = v11;
          v28 = v9;
          v25 = StatusReg;
          v26 = v4;
          v23 = v5;
          v30 = v6;
          v22 = a2;
          v15 = v14;
          if (v14 < 0)
            __yield();
          else
            _pthread_yield_to_enqueuer_4dispatch();
          v5 = v23;
          v10 = v24;
          v7 = *(unsigned __int16 *)((char *)guard + v23);
          v14 = v15 + 1;
          a2 = v22;
          v12 = v29;
          v6 = v30;
          StatusReg = v25;
          v4 = v26;
          v9 = v28;
          v11 = v27;
          if ((_DWORD)v7 != (unsigned __int16)v24)
            goto LABEL_7;
        }
        v7 = v10;
      }
    }
    atomic_compare_exchange_strong_explicit(v9, (unsigned __int16 *)&v7, v7 + 1, memory_order_release, memory_order_relaxed);
    if ((_DWORD)v7 == (unsigned __int16)v10)
      break;
    *((_WORD *)v4 + v12) = v11;
    *(_QWORD *)(StatusReg + 976) = 0;
  }
  *(_QWORD *)(StatusReg + 976) = 0;
  v16 = (mach_port_context_t)guard + 2 * v3;
  v17 = *(_DWORD *)(v16 + 1552);
  if (v17 == -1)
    return;
  if (v17)
  {
    v18 = firehose_send_push_async(*(_DWORD *)(v16 + 1552), 0, 0);
    if (v18 <= 268435458)
    {
      if (!v18)
        return;
      if (v18 == -301)
      {
        qword_1EDF52D08 = (uint64_t)"MIG_REPLY_MISMATCH";
        qword_1EDF52D38 = -301;
        __break(1u);
LABEL_38:
        qword_1EDF52D08 = (uint64_t)"MIG_REPLY_MISMATCH";
        qword_1EDF52D38 = -301;
        __break(1u);
        return;
      }
      goto LABEL_27;
    }
    if (v18 != 268435459)
    {
      if (v18 == 268435460)
        return;
LABEL_27:
      _dispatch_bug(476, v18);
    }
  }
  v19 = firehose_client_reconnect_0(guard, v17, v3 >> 1);
  if (v19 - 1 <= 0xFFFFFFFD)
  {
    v20 = firehose_send_push_async(v19, 0, 0);
    if ((v20 - 268435459) >= 2 && v20 != 0)
    {
      if (v20 != -301)
      {
        _dispatch_bug(488, v20);
        return;
      }
      goto LABEL_38;
    }
  }
}

int *firehose_buffer_force_connect_VARIANT_armv81(int *result)
{
  if (!result[388])
    return (int *)firehose_client_reconnect_0(result, 0, 0);
  return result;
}

uint64_t firehose_buffer_tracepoint_reserve_slow_VARIANT_armv81(uint64_t a1, unsigned __int8 *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  atomic_uint *v12;
  unint64_t StatusReg;
  unint64_t i;
  unint64_t v15;
  unsigned __int16 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  atomic_uint *v37;
  unint64_t v38;
  atomic_uint *v39;
  unint64_t v40;
  char v41;
  int v43;
  char v44;
  unint64_t v45;
  atomic_uint *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  atomic_ullong *v54;
  atomic_ullong v55;
  unint64_t v56;
  atomic_ullong k;
  unint64_t v58;
  atomic_ullong j;
  unint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  atomic_uint *v67;
  atomic_uint *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;

  v6 = a2[14] & 1;
  firehose_drain_notifications_once_0(a1);
  v7 = *(_QWORD *)(a1 + 448);
  v78 = v7;
  while (*(_WORD *)((unint64_t)&v78 | (2 * v6)))
  {
    v77 = v7;
    --*(_WORD *)((unint64_t)&v77 | (2 * v6));
    v8 = v7;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 448), &v8, v77, memory_order_acquire, memory_order_acquire);
    v78 = v8;
    v9 = v8 == v7;
    v7 = v8;
    if (v9)
    {
      v10 = v77;
      v11 = a1 + 128;
      v12 = (atomic_uint *)(a1 + 536);
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (2)
      {
        for (i = *(_QWORD *)(a1 + 256); ; i = v19)
        {
          v15 = HIDWORD(i);
          if ((unsigned __int16)i == WORD1(i))
          {
            if (HIWORD(i) == WORD2(i))
            {
              v71 = v6;
              v43 = 0;
              v44 = BYTE4(v10);
              v45 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
              v46 = v12;
              atomic_compare_exchange_strong_explicit(v12, (unsigned int *)&v43, *(_DWORD *)(v45 + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
              if (v43)
                _dispatch_unfair_lock_lock_slow_VARIANT_armv81((uint64_t)v12);
              v47 = *(_QWORD *)(a1 + 520);
              v48 = v47 | (-1 << v44);
              if (v48 == -1)
              {
                v26 = 0;
              }
              else
              {
                v49 = __clz(__rbit64(~v48));
                *(_QWORD *)(a1 + 520) = v47 | (1 << v49);
                v26 = v49;
              }
              v50 = *(_DWORD *)(v45 + 24) & 0xFFFFFFFC;
              v51 = atomic_exchange_explicit(v46, 0, memory_order_release);
              if (v51 == v50)
              {
                if (v26)
                  return firehose_buffer_stream_chunk_install_0(a1, (uint64_t)a2, a3, v26);
              }
              else
              {
                _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)v46, v51);
                if (v26)
                  return firehose_buffer_stream_chunk_install_0(a1, (uint64_t)a2, a3, v26);
              }
              if ((a2[14] & 4) != 0)
              {
                v41 = 1;
                goto LABEL_56;
              }
              v26 = 0;
              v52 = 0x10000;
              if (!v71)
                v52 = 1;
              atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 448), v52, memory_order_relaxed);
              return firehose_buffer_stream_chunk_install_0(a1, (uint64_t)a2, a3, v26);
            }
            LODWORD(v17) = HIDWORD(i) + 1;
            v16 = i;
          }
          else
          {
            v16 = i + 1;
            v17 = HIDWORD(i);
          }
          v18 = v16 | ((unint64_t)(unsigned __int16)v17 << 32) | i & 0xFFFF0000FFFF0000;
          v19 = i;
          atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 256), &v19, v18, memory_order_relaxed, memory_order_relaxed);
          if (v19 == i)
            break;
        }
        if ((unsigned __int16)v17 == WORD2(i))
          LOBYTE(v20) = i;
        else
          v20 = HIDWORD(i);
        if ((unsigned __int16)v17 == WORD2(i))
          v21 = a1;
        else
          v21 = v11;
        v22 = v20 & 0x3F;
        v23 = *(_WORD *)(v21 + 2 * v22);
        v24 = v23 & 0x3F;
        if ((v23 & 0x3F) == 0)
        {
          v35 = -1024;
          do
          {
            if (v35 < 0)
            {
              __yield();
            }
            else
            {
              v64 = v11;
              v68 = v12;
              v36 = v10;
              v73 = StatusReg;
              v60 = v15;
              v62 = v22;
              v63 = v21;
              v61 = v17;
              MEMORY[0x18D767268](0, 4, (v35 + 1));
              v22 = v62;
              v21 = v63;
              LODWORD(v17) = v61;
              v15 = v60;
              v12 = v68;
              StatusReg = v73;
              v11 = v64;
              v10 = v36;
            }
            v23 = *(_WORD *)(v21 + 2 * v22);
            ++v35;
            v24 = v23 & 0x3F;
          }
          while ((v23 & 0x3F) == 0);
        }
        v25 = (unsigned __int16)v17;
        v26 = v24;
        v27 = a1 + ((unint64_t)v24 << 12);
        if (v25 == (unsigned __int16)v15 && *(_BYTE *)(v27 + 6) == 3)
          atomic_fetch_and_explicit((atomic_ullong *volatile)(a1 + 456), ~(1 << v24), memory_order_relaxed);
        *(_QWORD *)v27 = 0x100000000000000;
        *(_WORD *)(v21 + 2 * v22) = (v23 & 0xFFC0) + 64;
        if (v24 >= BYTE4(v10))
        {
          v28 = 0;
          atomic_compare_exchange_strong_explicit(v12, (unsigned int *)&v28, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
          if (v28)
          {
            v65 = v11;
            v69 = v6;
            v37 = v12;
            v38 = v10;
            v74 = StatusReg;
            _dispatch_unfair_lock_lock_slow_VARIANT_armv81((uint64_t)v12);
            v11 = v65;
            v10 = v38;
            v12 = v37;
            v6 = v69;
            StatusReg = v74;
          }
          if (*(unsigned __int8 *)(a1 + 532) <= v26)
          {
            v29 = *(_QWORD *)(a1 + 520) & ~(1 << v26);
            *(_QWORD *)(a1 + 520) = v29;
            if (((v29 >> (v26 & 0x3C)) & 0xF) == 0)
            {
              v30 = (void *)(a1 + ((unint64_t)(v26 & 0x3C) << 12));
              v67 = v12;
              v72 = StatusReg;
              v31 = v10;
              v32 = v11;
              madvise(v30, 0x4000uLL, 5);
              v12 = v67;
              StatusReg = v72;
              v11 = v32;
              v10 = v31;
            }
            v26 = 0;
          }
          v33 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
          v34 = atomic_exchange_explicit(v12, 0, memory_order_release);
          if (v34 != v33)
          {
            v66 = v11;
            v70 = v6;
            v39 = v12;
            v40 = v10;
            v75 = StatusReg;
            _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)v12, v34);
            v11 = v66;
            v10 = v40;
            v12 = v39;
            v6 = v70;
            StatusReg = v75;
          }
          if (!v26)
            continue;
        }
        return firehose_buffer_stream_chunk_install_0(a1, (uint64_t)a2, a3, v26);
      }
    }
  }
  v26 = 0;
  v41 = 0;
  if ((a2[14] & 4) == 0)
    return firehose_buffer_stream_chunk_install_0(a1, (uint64_t)a2, a3, v26);
LABEL_56:
  v76 = v41;
  v53 = a1 + ((unint64_t)a2[12] << 7);
  v54 = (atomic_ullong *)(v53 + 640);
  v55 = *(_QWORD *)(v53 + 640);
  if ((v55 & 0x400000000000) != 0)
  {
    v58 = v55 & 0xFFFF3FFFFFFFFFFDLL | 0xC00000000000;
    for (j = *(_QWORD *)(v53 + 640); ; v58 = j & 0xFFFF3FFFFFFFFFFDLL | 0xC00000000000)
    {
      atomic_compare_exchange_strong_explicit(v54, (unint64_t *)&j, v58, memory_order_relaxed, memory_order_relaxed);
      if (j == v55)
        break;
      v55 = j;
    }
  }
  else
  {
    *(_QWORD *)(v53 + 648) = mach_continuous_time();
    v55 = *v54;
    v56 = *v54 & 0xFFFF3FFFFFFFFFFDLL | 0xC00000000000;
    for (k = *v54; ; v56 = k & 0xFFFF3FFFFFFFFFFDLL | 0xC00000000000)
    {
      atomic_compare_exchange_strong_explicit(v54, (unint64_t *)&k, v56, memory_order_release, memory_order_relaxed);
      if (k == v55)
        break;
      v55 = k;
    }
  }
  if ((v55 & 2) != 0)
    _dispatch_gate_broadcast_slow_VARIANT_mp(v53 + 640, v55);
  a2[13] = v76;
  return firehose_buffer_tracepoint_reserve_wait_for_chunks_from_logd_0(a1, (uint64_t)a2, a3);
}

BOOL firehose_drain_notifications_once_0(uint64_t a1)
{
  mach_msg_return_t v2;
  mach_msg_return_t v3;
  unint64_t StatusReg;
  char v5;
  int v6;
  _QWORD v8[3];
  _BYTE msg[124];
  _DWORD v10[8];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C874D8];
  memset(msg, 0, sizeof(msg));
  v2 = mach_msg((mach_msg_header_t *)msg, 67109126, 0, 0x7Cu, *(_DWORD *)(a1 + 1560), 0, 0);
  v3 = v2;
  if (v2)
  {
    if (v2 != 268451843)
      firehose_drain_notifications_once_cold_2(v2);
  }
  else
  {
    v8[1] = "firehose";
    v8[2] = a1;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v8[0] = *(_QWORD *)(StatusReg + 184);
    *(_QWORD *)(StatusReg + 184) = v8;
    v5 = msg[0];
    memset(v10, 0, sizeof(v10));
    v11 = 0;
    if (!firehoseReply_server(msg, (uint64_t)v10))
      goto LABEL_12;
    if (v10[0] >= 0)
      v6 = v11;
    else
      v6 = 0;
    if (!v6 && (v5 & 0x1F) == 0x12)
      firehose_drain_notifications_once_cold_1((uint64_t)v10);
    if (v6 != -305 && v6)
    {
LABEL_12:
      *(_DWORD *)&msg[8] = 0;
      mach_msg_destroy((mach_msg_header_t *)msg);
    }
    *(_QWORD *)(StatusReg + 184) = v8[0];
  }
  return v3 == 0;
}

unint64_t firehose_buffer_stream_chunk_install_0(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int a4)
{
  uint64_t v5;
  atomic_ullong *v6;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  __int16 v16;
  unsigned __int16 v17;
  unint64_t v18;
  unint64_t v19;
  atomic_ullong v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __int16 v30;
  __int16 v31;
  unsigned __int16 v32;
  unint64_t v33;
  atomic_ullong i;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  char v55;
  char v56;

  v5 = *(unsigned __int8 *)(a2 + 12);
  v6 = (atomic_ullong *)(a1 + (v5 << 7) + 640);
  if (!a4)
  {
    v18 = *v6;
    if ((*v6 & 0x400000000000) != 0)
    {
      v48 = (v18 >> 40) & 0x3F;
      if (v48 >= 0x3E)
        LODWORD(v48) = 62;
      v49 = v18 & 0xFFFF000000000000 | ((unint64_t)(((_DWORD)v48 + 1) | 0x40u) << 40);
      v50 = *v6;
      atomic_compare_exchange_strong_explicit(v6, &v50, v49, memory_order_relaxed, memory_order_relaxed);
      if (v50 != v18)
      {
        v51 = v50;
        do
        {
          v19 = 0;
          v18 = v50;
          v52 = (v50 >> 40) & 0x3F;
          if (v52 >= 0x3E)
            LODWORD(v52) = 62;
          atomic_compare_exchange_strong_explicit(v6, &v51, v50 & 0xFFFF000000000000 | ((unint64_t)(((_DWORD)v52 + 1) | 0x40u) << 40), memory_order_relaxed, memory_order_relaxed);
          v41 = v51 == v50;
          v50 = v51;
        }
        while (!v41);
        goto LABEL_34;
      }
    }
    else
    {
      *(_QWORD *)(a1 + (v5 << 7) + 648) = mach_continuous_time();
      v18 = *v6;
      v36 = ((unint64_t)*v6 >> 40) & 0x3F;
      if (v36 >= 0x3E)
        LODWORD(v36) = 62;
      v37 = *v6 & 0xFFFF000000000000 | ((unint64_t)(((_DWORD)v36 + 1) | 0x40u) << 40);
      v38 = *v6;
      atomic_compare_exchange_strong_explicit(v6, &v38, v37, memory_order_release, memory_order_relaxed);
      if (v38 != v18)
      {
        v39 = v38;
        do
        {
          v19 = 0;
          v18 = v38;
          v40 = (v38 >> 40) & 0x3F;
          if (v40 >= 0x3E)
            LODWORD(v40) = 62;
          atomic_compare_exchange_strong_explicit(v6, &v39, v38 & 0xFFFF000000000000 | ((unint64_t)(((_DWORD)v40 + 1) | 0x40u) << 40), memory_order_release, memory_order_relaxed);
          v41 = v39 == v38;
          v38 = v39;
        }
        while (!v41);
        goto LABEL_34;
      }
    }
    v19 = 0;
    goto LABEL_34;
  }
  v9 = a4;
  v10 = a1 + ((unint64_t)a4 << 12);
  if (*(_QWORD *)v10)
    bzero((void *)(v10 + 16), 0xFF0uLL);
  if (*(_BYTE *)(a2 + 12) == 3)
    atomic_fetch_or_explicit((atomic_ullong *volatile)(a1 + 456), 1 << v9, memory_order_relaxed);
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) - 8);
  v12 = v9 << 32;
  if ((*v6 & 0x3F0000000000) != 0)
    goto LABEL_18;
  if (*(_QWORD *)a2 >= 0x1000000000uLL)
    v13 = *(_QWORD *)a2 - 0x1000000000;
  else
    v13 = 0;
  *(_QWORD *)(v10 + 8) = v13;
  v14 = *(unsigned __int16 *)(a2 + 8);
  v15 = v14 + 24;
  if ((v14 & 7) != 0)
    v15 = (v14 & 0xFFF8) + 32;
  v16 = v15 + 16;
  v17 = 4096 - *(_WORD *)(a2 + 10);
  *(_QWORD *)(v10 + 32) = (*(_QWORD *)a2 - v13) | (v14 << 48);
  *(_QWORD *)(v10 + 24) = v11;
  v55 = *(_BYTE *)(a2 + 12);
  v53 = 2 * (*(_BYTE *)(a2 + 14) & 3);
  *(_WORD *)v10 = v16;
  *(_WORD *)(v10 + 2) = v17;
  *(_BYTE *)(v10 + 4) = 1;
  *(_BYTE *)(v10 + 5) = 0;
  *(_BYTE *)(v10 + 6) = v55;
  *(_BYTE *)(v10 + 7) = v53;
  if (a3)
    *a3 = v10 + v17;
  v18 = *v6;
  if ((*v6 & 0x3F0000000000) != 0)
  {
LABEL_18:
    atomic_load((unint64_t *)v6);
    v21 = a1 + (v5 << 7);
    v22 = *(_QWORD *)(v21 + 648);
    *(_QWORD *)(v21 + 648) = 0;
    v23 = mach_continuous_time();
    v24 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 >= v22)
      v24 = v22;
    v25 = v24 >= 0x1000000000;
    v26 = v24 - 0x1000000000;
    if (!v25)
      v26 = 0;
    *(_QWORD *)(v10 + 8) = v26;
    v27 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 - v26) >> 48)
    {
      v26 = v27 - 0x1000000000;
      *(_QWORD *)(v10 + 8) = v27 - 0x1000000000;
    }
    v28 = v22 - v26;
    if ((v22 - v26) >> 48)
      v28 = *(_QWORD *)a2 - v26;
    *(_QWORD *)(v10 + 32) = v28 | 0x18000000000000;
    *(_QWORD *)(v10 + 24) = v11;
    v29 = *(unsigned __int16 *)(a2 + 8);
    v30 = v29 + 24;
    if ((v29 & 7) != 0)
      v30 = (v29 & 0xFFF8) + 32;
    v31 = v30 + 64;
    v32 = 4096 - *(_WORD *)(a2 + 10);
    *(_QWORD *)(v10 + 80) = (*(_QWORD *)a2 - v26) | (v29 << 48);
    *(_QWORD *)(v10 + 72) = v11;
    v56 = *(_BYTE *)(a2 + 12);
    v54 = 2 * (*(_BYTE *)(a2 + 14) & 3);
    *(_WORD *)v10 = v31;
    *(_WORD *)(v10 + 2) = v32;
    *(_BYTE *)(v10 + 4) = 1;
    *(_BYTE *)(v10 + 5) = 0;
    *(_BYTE *)(v10 + 6) = v56;
    *(_BYTE *)(v10 + 7) = v54;
    if (a3)
      *a3 = v10 + v32;
    v19 = v10 + 64;
    v18 = *v6;
    v33 = (*v6 & 0xFFFF000000000000 | ((unint64_t)v9 << 32)) + 0x1000000000000;
    for (i = *v6; ; v33 = (i & 0xFFFF000000000000 | v12) + 0x1000000000000)
    {
      atomic_compare_exchange_strong_explicit(v6, (unint64_t *)&i, v33, memory_order_release, memory_order_relaxed);
      if (i == v18)
        break;
      v18 = i;
    }
    *(_QWORD *)(v10 + 40) = v22;
    *(_QWORD *)(v10 + 48) = v23;
    *(_QWORD *)(v10 + 56) = (v18 >> 40) & 0x3F;
    atomic_store(((unint64_t)*(unsigned __int8 *)(a2 + 12) << 32) | 7, (unint64_t *)(v10 + 16));
  }
  else
  {
    v19 = v10 + 16;
    v20 = *v6;
    while (1)
    {
      atomic_compare_exchange_strong_explicit(v6, (unint64_t *)&v20, (v18 & 0xFFFF000000000000 | v12) + 0x1000000000000, memory_order_release, memory_order_relaxed);
      if (v20 == v18)
        break;
      v18 = v20;
      if ((v20 & 0x3F0000000000) != 0)
        goto LABEL_18;
    }
  }
LABEL_34:
  if ((v18 & 3) != 0)
  {
    v42 = (uint64_t)v6;
    v43 = v19;
    _dispatch_gate_broadcast_slow_VARIANT_mp(v42, v18);
    v19 = v43;
  }
  if ((~v18 & 0xFF00000000) == 0)
  {
    v44 = v19;
    firehose_buffer_update_limits_VARIANT_armv81(a1);
    v19 = v44;
  }
  if (*(_BYTE *)(a1 + 1568) == 1)
  {
    v45 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 1568), (unsigned __int8 *)&v45, 2u, memory_order_relaxed, memory_order_relaxed);
    if (v45 == 1)
    {
      v46 = a1;
      v47 = v19;
      firehose_client_start_quarantine_0(v46);
      return v47;
    }
  }
  return v19;
}

uint64_t firehose_buffer_tracepoint_reserve_wait_for_chunks_from_logd_0(uint64_t guard, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  atomic_uint *v11;
  uint64_t v12;
  mach_port_context_t v13;
  unint64_t StatusReg;
  unint64_t i;
  unint64_t v16;
  unsigned __int16 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  mach_port_context_t v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  mach_port_context_t v42;
  _WORD *v43;
  _WORD *v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  mach_port_context_t v51;
  _DWORD *v52;
  mach_port_context_t v53;
  mach_port_context_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  _WORD *v78;
  atomic_uint *v79;
  atomic_uint *v80;
  atomic_uint *v81;
  atomic_uint *v82;
  atomic_uint *v83;
  _WORD *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;

  v6 = *(_BYTE *)(a2 + 14) & 1;
  v7 = -6;
  do
    v8 = __CFADD__(v7++, 1);
  while (!v8 && firehose_drain_notifications_once_0(guard));
  v85 = 0;
  if (*(_BYTE *)(a2 + 13))
  {
    v9 = *(unsigned __int8 *)(guard + 452);
LABEL_6:
    v10 = guard + 128;
    v11 = (atomic_uint *)(guard + 536);
    v12 = -1 << v9;
    v13 = guard + 4 * v6 + 1552;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_7:
    while (2)
    {
      for (i = *(_QWORD *)(guard + 256); ; i = v20)
      {
        v16 = HIDWORD(i);
        if ((unsigned __int16)i == WORD1(i))
        {
          if (HIWORD(i) == WORD2(i))
          {
            v52 = (_DWORD *)v13;
            v66 = v10;
            v71 = v12;
            v61 = v9;
            v34 = 0;
            v75 = StatusReg;
            v81 = v11;
            atomic_compare_exchange_strong_explicit(v11, (unsigned int *)&v34, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
            if (v34)
              _dispatch_unfair_lock_lock_slow_VARIANT_armv81((uint64_t)v11);
            v35 = *(_QWORD *)(guard + 520);
            if ((v35 | v71) == 0xFFFFFFFFFFFFFFFFLL)
            {
              v56 = 0;
            }
            else
            {
              v36 = __clz(__rbit64(~(v35 | v71)));
              *(_QWORD *)(guard + 520) = v35 | (1 << v36);
              v56 = v36;
            }
            v37 = *(_DWORD *)(v75 + 24) & 0xFFFFFFFC;
            v38 = atomic_exchange_explicit(v81, 0, memory_order_release);
            if (v38 != v37)
              _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)v81, v38);
            LODWORD(v24) = v56;
            if (v56)
              return firehose_buffer_stream_chunk_install_0(guard, a2, a3, v24);
            if ((*(_BYTE *)(a2 + 14) & 2) != 0)
              __FIREHOSE_CLIENT_THROTTLED_DUE_TO_HEAVY_LOGGING___0(guard, v6, 0);
            else
              firehose_client_send_push_and_wait_0(guard, v6, 0);
            v13 = (mach_port_context_t)v52;
            StatusReg = v75;
            v11 = v81;
            v9 = v61;
            v10 = v66;
            v12 = v71;
            if (*v52 == -1)
            {
              LODWORD(v24) = 0;
              return firehose_buffer_stream_chunk_install_0(guard, a2, a3, v24);
            }
            goto LABEL_7;
          }
          LODWORD(v18) = HIDWORD(i) + 1;
          v17 = i;
        }
        else
        {
          v17 = i + 1;
          v18 = HIDWORD(i);
        }
        v19 = v17 | ((unint64_t)(unsigned __int16)v18 << 32) | i & 0xFFFF0000FFFF0000;
        v20 = i;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(guard + 256), &v20, v19, memory_order_relaxed, memory_order_relaxed);
        if (v20 == i)
          break;
      }
      if ((unsigned __int16)v18 == WORD2(i))
      {
        v21 = guard;
      }
      else
      {
        i >>= 32;
        v21 = v10;
      }
      v22 = i & 0x3F;
      v23 = *(_WORD *)(v21 + 2 * v22);
      v24 = v23 & 0x3F;
      if ((v23 & 0x3F) == 0)
      {
        v32 = -1024;
        do
        {
          if (v32 < 0)
          {
            __yield();
          }
          else
          {
            v33 = v32;
            v74 = StatusReg;
            v80 = v11;
            v55 = v22;
            v60 = v9;
            v65 = v10;
            v70 = v12;
            v51 = v13;
            v48 = v21;
            v49 = v16;
            v50 = v18;
            MEMORY[0x18D767268](0, 4, (v32 + 1), v24);
            v32 = v33;
            v13 = v51;
            v22 = v55;
            v21 = v48;
            v16 = v49;
            LODWORD(v18) = v50;
            v12 = v70;
            StatusReg = v74;
            v9 = v60;
            v10 = v65;
            v11 = v80;
          }
          v23 = *(_WORD *)(v21 + 2 * v22);
          ++v32;
          v24 = v23 & 0x3F;
        }
        while ((v23 & 0x3F) == 0);
      }
      v25 = (unsigned __int16)v18;
      v26 = guard + ((unint64_t)v24 << 12);
      if (v25 == (unsigned __int16)v16 && *(_BYTE *)(v26 + 6) == 3)
        atomic_fetch_and_explicit((atomic_ullong *volatile)(guard + 456), ~(1 << v24), memory_order_relaxed);
      *(_QWORD *)v26 = 0x100000000000000;
      *(_WORD *)(v21 + 2 * v22) = (v23 & 0xFFC0) + 64;
      if (v24 >= v9)
      {
        v27 = 0;
        atomic_compare_exchange_strong_explicit(v11, (unsigned int *)&v27, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
        if (v27)
        {
          v76 = StatusReg;
          v82 = v11;
          v57 = v24;
          v62 = v9;
          v67 = v10;
          v39 = v12;
          v53 = v13;
          _dispatch_unfair_lock_lock_slow_VARIANT_armv81((uint64_t)v11);
          StatusReg = v76;
          v11 = v82;
          v13 = v53;
          LODWORD(v24) = v57;
          v12 = v39;
          v9 = v62;
          v10 = v67;
        }
        if (*(unsigned __int8 *)(guard + 532) <= v24)
        {
          v28 = *(_QWORD *)(guard + 520) & ~(1 << v24);
          *(_QWORD *)(guard + 520) = v28;
          if (((v28 >> (v24 & 0x3C)) & 0xF) == 0)
          {
            v73 = StatusReg;
            v79 = v11;
            v59 = v9;
            v64 = v10;
            v69 = v12;
            v29 = v13;
            madvise((void *)(guard + ((unint64_t)(v24 & 0x3C) << 12)), 0x4000uLL, 5);
            v12 = v69;
            StatusReg = v73;
            v13 = v29;
            v9 = v59;
            v10 = v64;
            v11 = v79;
          }
          LODWORD(v24) = 0;
        }
        v30 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        v31 = atomic_exchange_explicit(v11, 0, memory_order_release);
        if (v31 != v30)
        {
          v77 = StatusReg;
          v83 = v11;
          v58 = v24;
          v63 = v9;
          v68 = v10;
          v40 = v12;
          v54 = v13;
          _dispatch_unfair_lock_unlock_slow_VARIANT_mp((uint64_t)v11, v31);
          StatusReg = v77;
          v11 = v83;
          v13 = v54;
          LODWORD(v24) = v58;
          v12 = v40;
          v9 = v63;
          v10 = v68;
        }
        if (!(_DWORD)v24)
          continue;
      }
      return firehose_buffer_stream_chunk_install_0(guard, a2, a3, v24);
    }
  }
  else
  {
    v85 = *(_QWORD *)(guard + 448);
    v42 = guard + 4 * v6 + 1552;
    v43 = (_WORD *)((unint64_t)&v87 | (2 * v6));
    v44 = (_WORD *)((unint64_t)&v86 | (2 * v6));
    do
    {
      v45 = v85;
      v87 = v85;
      while (*v43)
      {
        v86 = v45;
        --*v44;
        v46 = v45;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(guard + 448), &v46, v86, memory_order_acquire, memory_order_acquire);
        v87 = v46;
        v47 = v46 == v45;
        v45 = v46;
        if (v47)
        {
          v85 = v86;
          v9 = HIDWORD(v86);
          goto LABEL_6;
        }
      }
      v78 = v43;
      v84 = v44;
      v72 = (_DWORD *)v42;
      if ((*(_BYTE *)(a2 + 14) & 2) != 0)
        __FIREHOSE_CLIENT_THROTTLED_DUE_TO_HEAVY_LOGGING___0(guard, v6, &v85);
      else
        firehose_client_send_push_and_wait_0(guard, v6, &v85);
      result = 0;
      v42 = (mach_port_context_t)v72;
      v43 = v78;
      v44 = v84;
    }
    while (*v72 != -1);
  }
  return result;
}

void firehose_client_start_quarantine_0(uint64_t a1)
{
  void (*v1)(void);
  uint64_t v3;
  atomic_ullong *v5;
  unint64_t v6;
  unint64_t v7;
  atomic_ullong v8;
  _BOOL4 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  atomic_ullong *v15;
  BOOL v16;
  unint64_t v17;
  atomic_ullong v18;
  _BOOL4 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  atomic_ullong *v26;
  unint64_t v27;
  atomic_ullong v28;
  BOOL v29;
  _BOOL4 v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;

  if (*(uint64_t *)_voucher_libtrace_hooks < 5)
    return;
  v1 = *(void (**)(void))(_voucher_libtrace_hooks + 40);
  if (!v1)
    return;
  v1();
  *(_BYTE *)(a1 + 1569) = 1;
  v3 = *(_QWORD *)(a1 + 768);
  if ((~v3 & 0xFF00000000) == 0 || BYTE4(*(_QWORD *)(a1 + 768)) == 0)
  {
    if (!*(_DWORD *)(a1 + 1552))
      firehose_client_reconnect_0((int *)a1, 0, 0);
  }
  else
  {
    v5 = (atomic_ullong *)(a1 + ((unint64_t)BYTE4(v3) << 12));
    v6 = *v5;
    if ((*v5 & 0x1FF000000000000) == 0x1000000000000)
    {
      v7 = v5[1];
      v8 = *v5;
      while (1)
      {
        v10 = (unsigned __int16)v6 + 25 > WORD1(v6) || v7 < 0xFFFF000000000000;
        v11 = v6 + 0x100000020;
        v12 = (v6 + 0x100000020) >> 16;
        v13 = ((unsigned __int16)(v6 + 32) + 40 > (unsigned __int16)v12) | ((v6 + 0x100000020) >> 56);
        if (v10)
        {
          v11 = v6;
          v13 = HIBYTE(v6) | 1;
          v12 = v6 >> 16;
        }
        atomic_compare_exchange_strong_explicit(v5, (unint64_t *)&v8, ((_DWORD)v12 << 16) | v11 & 0xFFFFFF00000000 | (v13 << 56) | (unsigned __int16)v11, memory_order_relaxed, memory_order_relaxed);
        if (v8 == v6)
          break;
        v6 = v8;
        if ((v8 & 0x1FF000000000000) != 0x1000000000000)
          goto LABEL_26;
      }
      if (v10)
      {
        if ((v11 & 0xFF00000000) == 0)
          firehose_buffer_ring_enqueue_VARIANT_armv81((int *)a1, BYTE4(v3));
      }
      else if ((_WORD)v6)
      {
        qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Allocation should always fail";
        qword_1EDF52D38 = (unsigned __int16)v6;
        __break(1u);
        goto LABEL_79;
      }
    }
LABEL_26:
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 768), &v14, v3 & 0xFFFFFF00FFFFFFFFLL, memory_order_relaxed, memory_order_relaxed);
  }
  v3 = *(_QWORD *)(a1 + 640);
  if ((~v3 & 0xFF00000000) == 0 || !BYTE4(*(_QWORD *)(a1 + 640)))
  {
    if (!*(_DWORD *)(a1 + 1552))
      firehose_client_reconnect_0((int *)a1, 0, 0);
    goto LABEL_55;
  }
  v15 = (atomic_ullong *)(a1 + ((unint64_t)BYTE4(v3) << 12));
  v6 = *v15;
  if (*v15)
    v16 = (*v15 & 0x1FF000000000000) == 0;
  else
    v16 = 0;
  if (v16)
  {
    v17 = v15[1];
    v18 = *v15;
    while (1)
    {
      v20 = (unsigned __int16)v6 + 25 > WORD1(v6) || v17 < 0xFFFF000000000000;
      v21 = v6 + 0x100000020;
      v22 = (v6 + 0x100000020) >> 16;
      v23 = ((unsigned __int16)(v6 + 32) + 40 > (unsigned __int16)v22) | ((v6 + 0x100000020) >> 56);
      if (v20)
      {
        v21 = v6;
        v23 = HIBYTE(v6) | 1;
        v22 = v6 >> 16;
      }
      atomic_compare_exchange_strong_explicit(v15, (unint64_t *)&v18, ((_DWORD)v22 << 16) | v21 & 0xFFFFFF00000000 | (v23 << 56) | (unsigned __int16)v21, memory_order_relaxed, memory_order_relaxed);
      if (v18 == v6)
        break;
      if (v18)
        v24 = (v18 & 0x1FF000000000000) == 0;
      else
        v24 = 0;
      v6 = v18;
      if (!v24)
        goto LABEL_54;
    }
    if (v20)
    {
      if ((v21 & 0xFF00000000) == 0)
        firehose_buffer_ring_enqueue_VARIANT_armv81((int *)a1, BYTE4(v3));
      goto LABEL_54;
    }
LABEL_79:
    if ((_WORD)v6)
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Allocation should always fail";
      qword_1EDF52D38 = (unsigned __int16)v6;
      __break(1u);
      goto LABEL_81;
    }
  }
LABEL_54:
  atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 640), &v25, v3 & 0xFFFFFF00FFFFFFFFLL, memory_order_relaxed, memory_order_relaxed);
LABEL_55:
  v3 = *(_QWORD *)(a1 + 896);
  if ((~v3 & 0xFF00000000) != 0 && BYTE4(*(_QWORD *)(a1 + 896)))
  {
    v26 = (atomic_ullong *)(a1 + ((unint64_t)BYTE4(v3) << 12));
    v6 = *v26;
    if ((*v26 & 0x1FF000000000000) != 0x2000000000000)
    {
LABEL_75:
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 896), &v34, v3 & 0xFFFFFF00FFFFFFFFLL, memory_order_relaxed, memory_order_relaxed);
      return;
    }
    v27 = v26[1];
    v28 = *v26;
    while (1)
    {
      v29 = (unsigned __int16)v6 + 25 <= WORD1(v6) && v27 >= 0xFFFF000000000000;
      v30 = !v29;
      v31 = v6 + 0x100000020;
      v32 = (v6 + 0x100000020) >> 16;
      v33 = ((unsigned __int16)(v6 + 32) + 40 > (unsigned __int16)v32) | ((v6 + 0x100000020) >> 56);
      if (v30)
      {
        v31 = v6;
        v33 = HIBYTE(v6) | 1;
        v32 = v6 >> 16;
      }
      atomic_compare_exchange_strong_explicit(v26, (unint64_t *)&v28, ((_DWORD)v32 << 16) | v31 & 0xFFFFFF00000000 | (v33 << 56) | (unsigned __int16)v31, memory_order_relaxed, memory_order_relaxed);
      if (v28 == v6)
        break;
      v6 = v28;
      if ((v28 & 0x1FF000000000000) != 0x2000000000000)
        goto LABEL_75;
    }
    if (v30)
    {
      if ((v31 & 0xFF00000000) == 0)
        firehose_buffer_ring_enqueue_VARIANT_armv81((int *)a1, BYTE4(v3));
      goto LABEL_75;
    }
LABEL_81:
    if ((_WORD)v6)
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Allocation should always fail";
      qword_1EDF52D38 = (unsigned __int16)v6;
      __break(1u);
      return;
    }
    goto LABEL_75;
  }
  if (!*(_DWORD *)(a1 + 1552))
    firehose_client_reconnect_0((int *)a1, 0, 0);
}

void __FIREHOSE_CLIENT_THROTTLED_DUE_TO_HEAVY_LOGGING___0(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  firehose_client_send_push_and_wait_0(a1, a2, a3);
}

void firehose_client_send_push_and_wait_0(uint64_t guard, unsigned int a2, _QWORD *a3)
{
  int v3;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  __int128 v11;

  v3 = *(_DWORD *)(guard + 4 * a2 + 1552);
  v11 = 0uLL;
  v10 = 0;
  if (v3 == -1)
    return;
  if (v3)
  {
    v7 = firehose_send_push_and_wait(v3, &v11, &v10);
    if (!v7)
    {
LABEL_4:
      if (((unint64_t)v11 & *((_QWORD *)&v11 + 1)) != 0xFFFFFFFFFFFFFFFFLL)
      {
        v8 = 480;
        if (a2)
          v8 = 504;
        atomic_fetch_add_explicit((atomic_ullong *volatile)(guard + v8), 1uLL, memory_order_relaxed);
        firehose_client_merge_updates_0(guard, 0, v11, *((unint64_t *)&v11 + 1), v10 != 0, a3);
        return;
      }
      goto LABEL_18;
    }
    if (v7 != 268435459)
    {
      if (v7 == -301)
      {
        qword_1EDF52D08 = (uint64_t)"MIG_REPLY_MISMATCH";
        qword_1EDF52D38 = -301;
        __break(1u);
      }
      _dispatch_bug(681, v7);
    }
  }
  v9 = firehose_client_reconnect_0((int *)guard, v3, a2);
  if ((v9 - 1) > 0xFFFFFFFD)
    goto LABEL_20;
  v7 = firehose_send_push_and_wait(v9, &v11, &v10);
  switch(v7)
  {
    case 0:
      goto LABEL_4;
    case 268435459:
      goto LABEL_20;
    case -301:
      qword_1EDF52D08 = (uint64_t)"MIG_REPLY_MISMATCH";
      qword_1EDF52D38 = -301;
      __break(1u);
LABEL_18:
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Memory corruption in the logging buffers";
      __break(1u);
      break;
  }
  _dispatch_bug(693, v7);
LABEL_20:
  if (a3)
    *a3 = *(_QWORD *)(guard + 448);
}

uint64_t _dispatch_iocntl_VARIANT_armv81(uint64_t result, uint64_t a2)
{
  switch((int)result)
  {
    case 1:
      dispatch_io_defaults = *MEMORY[0x1E0C88820] * a2;
      break;
    case 2:
      qword_1EDF51AC8 = a2;
      break;
    case 3:
      byte_1EDF51AD8 = a2 != 0;
      break;
    case 4:
      qword_1EDF51AD0 = a2;
      break;
    default:
      return result;
  }
  return result;
}

void _dispatch_io_dispose_VARIANT_armv81(uint64_t a1, const char *a2)
{
  uint64_t v3;
  _QWORD *v4;
  atomic_uint *v5;
  atomic_uint *v6;
  atomic_uint *v7;

  v3 = *(_QWORD *)(a1 + 112);
  if (v3 && (*(_BYTE *)(a1 + 120) & 3) == 0)
  {
    v4 = *(_QWORD **)(v3 + 8);
    if (v4)
    {
      *v4 = 0;
      v3 = *(_QWORD *)(a1 + 112);
    }
    dispatch_resume_VARIANT_armv81(*(_QWORD *)(v3 + 64));
  }
  v5 = *(atomic_uint **)(a1 + 48);
  if (v5)
    dispatch_release_VARIANT_armv81(v5, a2);
  v6 = *(atomic_uint **)(a1 + 56);
  if (v6)
    dispatch_release_VARIANT_armv81(v6, a2);
  v7 = *(atomic_uint **)(a1 + 64);
  if (v7)
    dispatch_release_VARIANT_armv81(v7, a2);
}

_QWORD *dispatch_io_create_VARIANT_armv81(unint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD v10[8];

  if (a1 > 1)
    return 0;
  v4 = _dispatch_io_create_0(a1);
  *((_DWORD *)v4 + 31) = a2;
  *((_DWORD *)v4 + 32) = a2;
  dispatch_suspend_VARIANT_armv81(v4[6]);
  if (*(_DWORD *)(a3 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a3 + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  if (*((_DWORD *)v4 + 2) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 2, 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v10[0] = MEMORY[0x1E0C87450];
  v10[1] = 0x40000000;
  v10[2] = __dispatch_io_create_VARIANT_armv81_block_invoke;
  v10[3] = &unk_1E1E88370;
  v10[6] = a1;
  v10[7] = a3;
  v10[4] = a4;
  v10[5] = v4;
  _dispatch_fd_entry_init_async_0(a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v10);
  return v4;
}

_QWORD *_dispatch_io_create_0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)_dispatch_object_alloc_VARIANT_mp(OS_dispatch_io, 152);
  v2[2] = -1985229329;
  v2[3] = &off_1ECCEA100;
  v3 = dispatch_io_defaults * qword_1EDF51AC8;
  v2[9] = a1;
  v2[10] = v3;
  v2[11] = -1;
  v2[6] = dispatch_queue_create_VARIANT_armv81("com.apple.libdispatch-io.channelq", 0);
  return v2;
}

uint64_t _dispatch_fd_entry_init_async_0(int a1, uint64_t (*a2)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  uint64_t (*v5[5])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v6;

  if (_dispatch_io_init_pred != -1)
    dispatch_once_f_VARIANT_armv81(&_dispatch_io_init_pred, 0, _dispatch_io_queues_init_0);
  v5[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  v5[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  v5[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_fd_entry_init_async_block_invoke_0;
  v5[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&unk_1E1E88B28;
  v6 = a1;
  v5[4] = a2;
  return dispatch_async_VARIANT_armv81((atomic_uint *)_dispatch_io_fds_lockq, v5);
}

uint64_t _dispatch_io_init_0(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t (*a5)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  atomic_uint **v7;
  atomic_uint *v8;
  uint64_t result;
  uint64_t (*aBlock[6])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v11;

  if (a5)
  {
    if (*(_DWORD *)(a3 + 8) != 0x7FFFFFFF
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a3 + 8), 1u, memory_order_relaxed) <= 0)
    {
      dispatch_set_target_queue_VARIANT_mp_cold_2();
    }
    v7 = (atomic_uint **)(a2 + 64);
    if (a4)
      v7 = (atomic_uint **)(a1 + 6);
    v8 = *v7;
    aBlock[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
    aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
    aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_io_init_block_invoke_0;
    aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&unk_1E1E888E0;
    aBlock[4] = a5;
    aBlock[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a3;
    v11 = a4;
    dispatch_async_VARIANT_armv81(v8, aBlock);
  }
  if (a2)
  {
    a1[14] = a2;
    dispatch_retain_VARIANT_armv81(*(_QWORD *)(a2 + 72));
    dispatch_retain_VARIANT_armv81(*(_QWORD *)(a2 + 80));
    result = *(_QWORD *)(a2 + 80);
    a1[7] = *(_QWORD *)(a2 + 72);
  }
  else
  {
    a1[7] = dispatch_queue_create_VARIANT_armv81("com.apple.libdispatch-io.barrierq", 0);
    result = dispatch_group_create_VARIANT_armv81();
  }
  a1[8] = result;
  return result;
}

_QWORD *dispatch_io_create_f_VARIANT_armv81(unint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD v7[6];

  if (a5)
  {
    v7[0] = MEMORY[0x1E0C87450];
    v7[1] = 0x40000000;
    v7[2] = __dispatch_io_create_f_VARIANT_armv81_block_invoke;
    v7[3] = &__block_descriptor_tmp_2_0;
    v7[4] = a5;
    v7[5] = a4;
    v5 = v7;
  }
  else
  {
    v5 = 0;
  }
  return dispatch_io_create_VARIANT_armv81(a1, a2, a3, (uint64_t)v5);
}

_QWORD *dispatch_io_create_with_path_VARIANT_armv81(unint64_t a1, char *__s, int a3, __int16 a4, uint64_t a5, uint64_t (*a6)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  size_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _QWORD *v15;
  atomic_uint *v16;
  uint64_t (*v18[8])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (a1 > 1)
    return 0;
  if (*__s != 47)
    return 0;
  v12 = strlen(__s);
  v13 = malloc_type_malloc(v12 + 25, 0x5B08A984uLL);
  if (!v13)
    return 0;
  v14 = v13;
  v15 = _dispatch_io_create_0(a1);
  *(_QWORD *)((char *)v15 + 124) = -1;
  *(_QWORD *)v14 = v15;
  v14[2] = a3;
  *((_WORD *)v14 + 6) = a4;
  *((_QWORD *)v14 + 2) = v12;
  memcpy(v14 + 6, __s, v12 + 1);
  if (*(_DWORD *)(a5 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a5 + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  if (*((_DWORD *)v15 + 2) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)v15 + 2, 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v16 = (atomic_uint *)v15[6];
  v18[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  v18[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  v18[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__dispatch_io_create_with_path_VARIANT_armv81_block_invoke;
  v18[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&unk_1E1E883E0;
  v18[6] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v15;
  v18[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a5;
  v18[4] = a6;
  v18[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v14;
  dispatch_async_VARIANT_armv81(v16, v18);
  return v15;
}

uint64_t _dispatch_io_queues_init_0()
{
  uint64_t result;

  _dispatch_io_fds_lockq = dispatch_queue_create_VARIANT_armv81("com.apple.libdispatch-io.fd_lockq", 0);
  result = dispatch_queue_create_VARIANT_armv81("com.apple.libdispatch-io.dev_lockq", 0);
  _dispatch_io_devs_lockq = result;
  return result;
}

_QWORD *_dispatch_fd_entry_create_with_path_0(uint64_t a1, unsigned int a2, __int16 a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  atomic_uint *v9;
  atomic_uint *v10;
  uint64_t (*v12[5])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*aBlock[5])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v6 = _dispatch_fd_entry_create_0(*(__objc2_class ***)(*(_QWORD *)a1 + 48));
  v7 = v6;
  if ((a3 & 0xF000) == 0x8000)
    _dispatch_disk_init_0((uint64_t)v6, HIBYTE(a2));
  else
    _dispatch_stream_init_0((uint64_t)v6);
  *(_DWORD *)v7 = -1;
  *((_DWORD *)v7 + 4) = -1;
  v7[1] = a1;
  *((_DWORD *)v7 + 8) = a2;
  *((_WORD *)v7 + 18) = a3;
  v7[9] = dispatch_queue_create_VARIANT_armv81("com.apple.libdispatch-io.barrierq", 0);
  v7[10] = dispatch_group_create_VARIANT_armv81();
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  v9 = (atomic_uint *)v7[8];
  aBlock[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_fd_entry_create_with_path_block_invoke_0;
  aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_79_0;
  aBlock[4] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v7;
  dispatch_async_VARIANT_armv81(v9, aBlock);
  v10 = (atomic_uint *)v7[8];
  v12[0] = v8;
  v12[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  v12[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_fd_entry_create_with_path_block_invoke_2_0;
  v12[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_80_0;
  v12[4] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v7;
  dispatch_async_VARIANT_armv81(v10, v12);
  return v7;
}

_QWORD *dispatch_io_create_with_path_f_VARIANT_armv81(unint64_t a1, char *a2, int a3, __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD v9[6];

  if (a7)
  {
    v9[0] = MEMORY[0x1E0C87450];
    v9[1] = 0x40000000;
    v9[2] = __dispatch_io_create_with_path_f_VARIANT_armv81_block_invoke;
    v9[3] = &__block_descriptor_tmp_6_0;
    v9[4] = a7;
    v9[5] = a6;
    v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v9;
  }
  else
  {
    v7 = 0;
  }
  return dispatch_io_create_with_path_VARIANT_armv81(a1, a2, a3, a4, a5, v7);
}

_QWORD *dispatch_io_create_with_io_VARIANT_armv81(uint64_t (*a1)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  _QWORD *v4;
  atomic_uint *v9;
  uint64_t (*aBlock[9])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if ((unint64_t)a1 > 1)
    return 0;
  v4 = _dispatch_io_create_0((uint64_t)a1);
  dispatch_suspend_VARIANT_armv81(v4[6]);
  if (*(_DWORD *)(a3 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a3 + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  if (*((_DWORD *)v4 + 2) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 2, 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v9 = *(atomic_uint **)(a2 + 48);
  aBlock[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__dispatch_io_create_with_io_VARIANT_armv81_block_invoke;
  aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&unk_1E1E88478;
  aBlock[6] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v4;
  aBlock[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a3;
  aBlock[4] = a4;
  aBlock[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a2;
  aBlock[8] = a1;
  dispatch_async_VARIANT_armv81(v9, aBlock);
  return v4;
}

_QWORD *dispatch_io_create_with_io_f_VARIANT_armv81(uint64_t (*a1)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD v7[6];

  if (a5)
  {
    v7[0] = MEMORY[0x1E0C87450];
    v7[1] = 0x40000000;
    v7[2] = __dispatch_io_create_with_io_f_VARIANT_armv81_block_invoke;
    v7[3] = &__block_descriptor_tmp_10_0;
    v7[4] = a5;
    v7[5] = a4;
    v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v7;
  }
  else
  {
    v5 = 0;
  }
  return dispatch_io_create_with_io_VARIANT_armv81(a1, a2, a3, v5);
}

uint64_t dispatch_io_set_high_water_VARIANT_armv81(uint64_t a1, uint64_t (*a2)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  atomic_uint *v2;
  uint64_t (*v4[6])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v2 = *(atomic_uint **)(a1 + 48);
  v4[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  v4[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  v4[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__dispatch_io_set_high_water_VARIANT_armv81_block_invoke;
  v4[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_11_0;
  v4[4] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a1;
  v4[5] = a2;
  return dispatch_async_VARIANT_armv81(v2, v4);
}

uint64_t dispatch_io_set_low_water_VARIANT_armv81(uint64_t a1, uint64_t (*a2)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  atomic_uint *v2;
  uint64_t (*v4[6])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v2 = *(atomic_uint **)(a1 + 48);
  v4[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  v4[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  v4[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__dispatch_io_set_low_water_VARIANT_armv81_block_invoke;
  v4[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_12_1;
  v4[4] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a1;
  v4[5] = a2;
  return dispatch_async_VARIANT_armv81(v2, v4);
}

uint64_t dispatch_io_set_interval_VARIANT_armv81(uint64_t a1, uint64_t (*a2)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), uint64_t (*a3)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  atomic_uint *v3;
  uint64_t (*aBlock[7])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v3 = *(atomic_uint **)(a1 + 48);
  aBlock[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__dispatch_io_set_interval_VARIANT_armv81_block_invoke;
  aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_13_0;
  aBlock[4] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a1;
  aBlock[5] = a2;
  aBlock[6] = a3;
  return dispatch_async_VARIANT_armv81(v3, aBlock);
}

uint64_t _dispatch_io_set_target_queue_VARIANT_armv81(uint64_t a1, uint64_t a2)
{
  atomic_uint *v2;
  uint64_t (*v4[6])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v2 = *(atomic_uint **)(a1 + 48);
  v4[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  v4[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  v4[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_io_set_target_queue_VARIANT_armv81_block_invoke;
  v4[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_14_0;
  v4[4] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a1;
  v4[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a2;
  return dispatch_async_VARIANT_armv81(v2, v4);
}

uint64_t dispatch_io_get_descriptor_VARIANT_armv81(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  if ((*(_BYTE *)(a1 + 120) & 3) != 0)
    return 0xFFFFFFFFLL;
  result = *(unsigned int *)(a1 + 128);
  if ((_DWORD)result == -1)
  {
    if (!*(_DWORD *)(a1 + 144))
    {
      v3 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 184;
      while (1)
      {
        v3 = *(_QWORD *)v3;
        if (!v3)
          break;
        if (*(char **)(v3 + 8) == "io")
        {
          if (*(_QWORD *)(v3 + 16) != a1)
            return 0xFFFFFFFFLL;
          _dispatch_fd_entry_open_0(*(_QWORD *)(a1 + 112), a1);
          return *(unsigned int *)(a1 + 128);
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t _dispatch_fd_entry_open_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t StatusReg;
  unsigned int v7;
  int v8;
  int v9;

  if (*(_DWORD *)a1 == -1 && *(_QWORD *)(a1 + 8))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      return v2;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      v7 = guarded_open_np();
      if (v7 != -1)
        break;
      **(_DWORD **)(StatusReg + 8) = 0;
      v7 = open_NOCANCEL();
      if (v7 != -1)
        goto LABEL_12;
      v2 = **(unsigned int **)(StatusReg + 8);
      if ((_DWORD)v2 != 4)
      {
        v8 = 0;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 24), (unsigned int *)&v8, v2, memory_order_relaxed, memory_order_relaxed);
        return v2;
      }
    }
    *(_DWORD *)(a1 + 28) = 15;
LABEL_12:
    v9 = -1;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)a1, (unsigned int *)&v9, v7, memory_order_relaxed, memory_order_relaxed);
    if (v9 == -1)
    {
      v2 = 0;
      *(_DWORD *)(a2 + 128) = v7;
      return v2;
    }
    if (*(_DWORD *)(a1 + 28))
      guarded_close_np();
    else
      close_NOCANCEL();
  }
  return 0;
}

uint64_t dispatch_io_close_VARIANT_armv81(uint64_t result, char a2)
{
  int v2;
  atomic_uint *v3;
  uint64_t (**v4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD v5[5];
  _QWORD aBlock[5];

  v2 = *(_DWORD *)(result + 120);
  if ((a2 & 1) != 0)
  {
    if ((v2 & 2) != 0)
      return result;
    atomic_fetch_or_explicit((atomic_uint *volatile)(result + 120), 2u, memory_order_relaxed);
    if (*(_DWORD *)(result + 8) != 0x7FFFFFFF
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 1u, memory_order_relaxed) <= 0)
    {
      dispatch_set_target_queue_VARIANT_mp_cold_2();
    }
    v3 = *(atomic_uint **)(result + 48);
    aBlock[0] = MEMORY[0x1E0C87450];
    aBlock[1] = 0x40000000;
    aBlock[2] = ___dispatch_io_stop_block_invoke_0;
    aBlock[3] = &__block_descriptor_tmp_54_0;
    aBlock[4] = result;
    v4 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))aBlock;
  }
  else
  {
    if ((v2 & 3) != 0)
      return result;
    if (*(_DWORD *)(result + 8) != 0x7FFFFFFF
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 1u, memory_order_relaxed) <= 0)
    {
      dispatch_set_target_queue_VARIANT_mp_cold_2();
    }
    v3 = *(atomic_uint **)(result + 48);
    v5[0] = MEMORY[0x1E0C87450];
    v5[1] = 0x40000000;
    v5[2] = __dispatch_io_close_VARIANT_armv81_block_invoke;
    v5[3] = &__block_descriptor_tmp_17_0;
    v5[4] = result;
    v4 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v5;
  }
  return dispatch_async_VARIANT_armv81(v3, v4);
}

uint64_t dispatch_io_barrier_VARIANT_armv81(uint64_t a1, uint64_t (*a2)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  atomic_uint *v2;
  uint64_t (*v4[6])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v2 = *(atomic_uint **)(a1 + 48);
  v4[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  v4[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  v4[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__dispatch_io_barrier_VARIANT_armv81_block_invoke;
  v4[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&unk_1E1E885D0;
  v4[4] = a2;
  v4[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a1;
  return dispatch_async_VARIANT_armv81(v2, v4);
}

uint64_t dispatch_io_barrier_f_VARIANT_armv81(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[0] = MEMORY[0x1E0C87450];
  v4[1] = 0x40000000;
  v4[2] = __dispatch_io_barrier_f_VARIANT_armv81_block_invoke;
  v4[3] = &__block_descriptor_tmp_21_0;
  v4[4] = a3;
  v4[5] = a2;
  return dispatch_io_barrier_VARIANT_armv81(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v4);
}

uint64_t dispatch_io_read_VARIANT_armv81(uint64_t a1, uint64_t (*a2)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), uint64_t (*a3)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), uint64_t a4, uint64_t (*a5)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  atomic_uint *v5;
  uint64_t (*aBlock[9])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  if (*(_DWORD *)(a4 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a4 + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v5 = *(atomic_uint **)(a1 + 48);
  aBlock[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__dispatch_io_read_VARIANT_armv81_block_invoke;
  aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&unk_1E1E88638;
  aBlock[6] = a2;
  aBlock[7] = a3;
  aBlock[8] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a4;
  aBlock[4] = a5;
  aBlock[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a1;
  return dispatch_async_VARIANT_armv81(v5, aBlock);
}

uint64_t _dispatch_operation_create_0(int a1, uint64_t a2, uint64_t a3, uint64_t a4, id a5, uint64_t a6, uint64_t (*a7)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  int v12;
  atomic_uint *v13;
  uint64_t v14;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*aBlock[8])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v23;
  int v24;

  if ((*(_BYTE *)(a2 + 120) & 3) != 0)
  {
    v12 = 89;
LABEL_3:
    _dispatch_objc_retain(a5);
    if (*(_DWORD *)(a6 + 8) != 0x7FFFFFFF
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a6 + 8), 1u, memory_order_relaxed) <= 0)
    {
      dispatch_set_target_queue_VARIANT_mp_cold_2();
    }
    if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 1u, memory_order_relaxed) <= 0)
    {
      dispatch_set_target_queue_VARIANT_mp_cold_2();
    }
    v13 = *(atomic_uint **)(a2 + 56);
    aBlock[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
    aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
    aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_operation_create_block_invoke_0;
    aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&unk_1E1E889D0;
    v23 = a1;
    v24 = v12;
    aBlock[4] = a7;
    aBlock[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a6;
    aBlock[6] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a5;
    aBlock[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a2;
    dispatch_async_VARIANT_armv81(v13, aBlock);
    return 0;
  }
  v12 = *(_DWORD *)(a2 + 144);
  if (!a4 || v12)
    goto LABEL_3;
  v14 = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_operation, 272);
  *(_QWORD *)(v14 + 16) = -1985229329;
  *(_DWORD *)(v14 + 12) = 0;
  *(_QWORD *)(v14 + 48) = dispatch_queue_create_with_target_V2_VARIANT_armv81("com.apple.libdispatch-io.opq", 0, (__objc2_class **)a6);
  *(_BYTE *)(v14 + 160) = 0;
  *(_DWORD *)(v14 + 56) = a1;
  *(_QWORD *)(v14 + 104) = *(_QWORD *)(a2 + 136) + a3;
  *(_QWORD *)(v14 + 112) = a4;
  *(_QWORD *)(v14 + 128) = _dispatch_Block_copy(a7);
  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  *(_QWORD *)(v14 + 136) = a2;
  v18 = *(_OWORD *)(a2 + 72);
  v19 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(v14 + 96) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(v14 + 64) = v18;
  *(_OWORD *)(v14 + 80) = v19;
  v20 = *(_QWORD *)(a2 + 24);
  do
  {
    v21 = v20;
    v20 = *(_QWORD *)(v20 + 24);
  }
  while (v20);
  *(_QWORD *)(v14 + 24) = v21;
  return v14;
}

uint64_t _dispatch_operation_enqueue_0(uint64_t a1, unsigned int a2, id a3)
{
  uint64_t v6;
  int v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  atomic_uint *v9;
  uint64_t result;
  const char *v11;
  int add_explicit;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  atomic_uint *v16;
  uint64_t (**v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  atomic_uint **v18;
  _QWORD v19[7];
  _QWORD v20[7];
  uint64_t (*aBlock[6])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int v22;
  int v23;

  _dispatch_objc_retain(a3);
  v6 = *(_QWORD *)(a1 + 136);
  if ((*(_BYTE *)(v6 + 120) & 3) != 0)
  {
    v7 = 89;
  }
  else
  {
    v7 = *(_DWORD *)(v6 + 144);
    if (!v7)
    {
      v13 = *(_QWORD *)(v6 + 112);
      *(_QWORD *)(a1 + 144) = v13;
      dispatch_suspend_VARIANT_armv81(*(_QWORD *)(v13 + 64));
      dispatch_group_enter_VARIANT_armv81(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 80));
      v14 = *(_QWORD *)(a1 + 144);
      v15 = *(_QWORD *)(v14 + 56);
      if (v15)
      {
        v16 = *(atomic_uint **)(v15 + 72);
        v19[0] = MEMORY[0x1E0C87450];
        v19[1] = 0x40000000;
        v19[2] = ___dispatch_operation_enqueue_block_invoke_3_0;
        v19[3] = &__block_descriptor_tmp_62_0;
        v19[4] = v15;
        v19[5] = a1;
        v19[6] = a3;
        v17 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v19;
      }
      else
      {
        v18 = *(atomic_uint ***)(v14 + 8 * a2 + 40);
        v16 = *v18;
        v20[0] = MEMORY[0x1E0C87450];
        v20[1] = 0x40000000;
        v20[2] = ___dispatch_operation_enqueue_block_invoke_2_0;
        v20[3] = &__block_descriptor_tmp_61_0;
        v20[4] = v18;
        v20[5] = a1;
        v20[6] = a3;
        v17 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v20;
      }
      return dispatch_async_VARIANT_armv81(v16, v17);
    }
  }
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 128);
  v9 = *(atomic_uint **)(a1 + 48);
  aBlock[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_operation_enqueue_block_invoke_0;
  aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&unk_1E1E889F8;
  v22 = a2;
  v23 = v7;
  aBlock[4] = v8;
  aBlock[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a3;
  result = dispatch_async_VARIANT_armv81(v9, aBlock);
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      return _os_object_dispose((void *)a1, v11);
    }
  }
  return result;
}

uint64_t dispatch_io_read_f_VARIANT_armv81(uint64_t a1, uint64_t (*a2)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), uint64_t (*a3)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[6];

  v7[0] = MEMORY[0x1E0C87450];
  v7[1] = 0x40000000;
  v7[2] = __dispatch_io_read_f_VARIANT_armv81_block_invoke;
  v7[3] = &__block_descriptor_tmp_25_0;
  v7[4] = a6;
  v7[5] = a5;
  return dispatch_io_read_VARIANT_armv81(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v7);
}

uint64_t dispatch_io_write_VARIANT_armv81(uint64_t a1, uint64_t (*a2)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), id a3, uint64_t a4, uint64_t (*a5)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  atomic_uint *v10;
  uint64_t (*aBlock[9])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  _dispatch_objc_retain(a3);
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  if (*(_DWORD *)(a4 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a4 + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v10 = *(atomic_uint **)(a1 + 48);
  aBlock[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__dispatch_io_write_VARIANT_armv81_block_invoke;
  aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&unk_1E1E886A0;
  aBlock[6] = a2;
  aBlock[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a3;
  aBlock[8] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a4;
  aBlock[4] = a5;
  aBlock[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a1;
  return dispatch_async_VARIANT_armv81(v10, aBlock);
}

uint64_t dispatch_io_write_f_VARIANT_armv81(uint64_t a1, uint64_t (*a2)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[6];

  v7[0] = MEMORY[0x1E0C87450];
  v7[1] = 0x40000000;
  v7[2] = __dispatch_io_write_f_VARIANT_armv81_block_invoke;
  v7[3] = &__block_descriptor_tmp_28_0;
  v7[4] = a6;
  v7[5] = a5;
  return dispatch_io_write_VARIANT_armv81(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v7);
}

uint64_t dispatch_read_VARIANT_armv81(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[7];
  int v6;

  if (*(_DWORD *)(a3 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a3 + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v5[0] = MEMORY[0x1E0C87450];
  v5[1] = 0x40000000;
  v5[2] = __dispatch_read_VARIANT_armv81_block_invoke;
  v5[3] = &unk_1E1E88788;
  v5[4] = a4;
  v5[5] = a3;
  v6 = a1;
  v5[6] = a2;
  return _dispatch_fd_entry_init_async_0(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v5);
}

uint64_t dispatch_read_f_VARIANT_armv81(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[6];

  v6[0] = MEMORY[0x1E0C87450];
  v6[1] = 0x40000000;
  v6[2] = __dispatch_read_f_VARIANT_armv81_block_invoke;
  v6[3] = &__block_descriptor_tmp_35_0;
  v6[4] = a5;
  v6[5] = a4;
  return dispatch_read_VARIANT_armv81(a1, a2, a3, (uint64_t)v6);
}

uint64_t dispatch_write_VARIANT_armv81(int a1, id a2, uint64_t a3, uint64_t a4)
{
  _QWORD v9[7];
  int v10;

  _dispatch_objc_retain(a2);
  if (*(_DWORD *)(a3 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a3 + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v9[0] = MEMORY[0x1E0C87450];
  v9[1] = 0x40000000;
  v9[2] = __dispatch_write_VARIANT_armv81_block_invoke;
  v9[3] = &unk_1E1E88870;
  v9[4] = a4;
  v9[5] = a3;
  v10 = a1;
  v9[6] = a2;
  return _dispatch_fd_entry_init_async_0(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v9);
}

uint64_t dispatch_write_f_VARIANT_armv81(int a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[6];

  v6[0] = MEMORY[0x1E0C87450];
  v6[1] = 0x40000000;
  v6[2] = __dispatch_write_f_VARIANT_armv81_block_invoke;
  v6[3] = &__block_descriptor_tmp_41_0;
  v6[4] = a5;
  v6[5] = a4;
  return dispatch_write_VARIANT_armv81(a1, a2, a3, (uint64_t)v6);
}

void _dispatch_operation_dispose_VARIANT_armv81(uint64_t a1, const char *a2)
{
  atomic_uint *v3;
  int add_explicit;
  atomic_uint *v5;
  void *v6;
  void *v7;
  void *v8;
  atomic_uint *v9;

  if (*(_QWORD *)(a1 + 144))
  {
    _dispatch_operation_deliver_data_0(a1, 2);
    dispatch_group_leave_VARIANT_armv81(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 80));
    dispatch_resume_VARIANT_armv81(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 64));
  }
  v3 = *(atomic_uint **)(a1 + 136);
  if (v3)
  {
    if (v3[2] != 0x7FFFFFFF)
    {
      add_explicit = atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release);
      if (add_explicit <= 1)
      {
        if (add_explicit != 1)
          _os_object_allows_weak_reference_VARIANT_mp_cold_1();
        _os_object_dispose(v3, a2);
      }
    }
  }
  v5 = *(atomic_uint **)(a1 + 152);
  if (v5)
    dispatch_release_VARIANT_armv81(v5, a2);
  v6 = *(void **)(a1 + 176);
  if (v6 && !*(_DWORD *)(a1 + 56))
    free(v6);
  v7 = *(void **)(a1 + 224);
  if (v7)
    _dispatch_objc_release(v7);
  v8 = *(void **)(a1 + 232);
  if (v8)
    _dispatch_objc_release(v8);
  v9 = *(atomic_uint **)(a1 + 48);
  if (v9)
    dispatch_release_VARIANT_armv81(v9, a2);
  _Block_release(*(const void **)(a1 + 128));
}

void _dispatch_operation_deliver_data_0(uint64_t a1, int a2)
{
  __objc2_class *v4;
  char *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  __objc2_class **VARIANT_armv81;
  void *subrange_VARIANT_armv81;
  void *v12;
  __objc2_class **v13;
  __objc2_class **v14;
  int v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  atomic_uint *v19;
  uint64_t (*v20[8])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v21;
  int v22;
  int v23;

  v4 = *(__objc2_class **)(a1 + 200);
  v5 = (char *)v4 + *(_QWORD *)(a1 + 208);
  if ((a2 & 3) != 0)
  {
    *(_DWORD *)(a1 + 184) = 0;
LABEL_7:
    v8 = *(_DWORD *)(a1 + 120);
    if (v8)
    {
LABEL_11:
      v7 = 1;
      goto LABEL_12;
    }
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 136) + 120) & 2) != 0)
    {
      v8 = 89;
      *(_DWORD *)(a1 + 120) = 89;
      goto LABEL_11;
    }
LABEL_9:
    v8 = 0;
    goto LABEL_11;
  }
  v6 = *(_DWORD *)(a1 + 184);
  *(_DWORD *)(a1 + 184) = 0;
  if ((v6 & 1) != 0)
    goto LABEL_7;
  if ((unint64_t)v5 >= *(_QWORD *)(a1 + 72))
    goto LABEL_9;
  if ((unint64_t)v4 < *(_QWORD *)(a1 + 192))
    return;
  v7 = 0;
  v8 = 0;
LABEL_12:
  v9 = *(_DWORD *)(a1 + 56);
  if (v9 == 1)
  {
    if (v7)
      subrange_VARIANT_armv81 = dispatch_data_create_subrange_VARIANT_armv81(*(__objc2_class **)(a1 + 232), v4, *(__objc2_class **)(a1 + 112));
    else
      subrange_VARIANT_armv81 = 0;
    v12 = *(void **)(a1 + 224);
    if (v12 && *(_QWORD *)(a1 + 200) == *(_QWORD *)(a1 + 192))
    {
      _dispatch_objc_release(v12);
      *(_QWORD *)(a1 + 224) = 0;
      *(_QWORD *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 200) = 0;
      if (v7)
      {
        _dispatch_objc_retain(subrange_VARIANT_armv81);
        v13 = (__objc2_class **)subrange_VARIANT_armv81;
      }
      else
      {
        v13 = dispatch_data_create_subrange_VARIANT_armv81(*(__objc2_class **)(a1 + 232), *(__objc2_class **)(a1 + 192), *(__objc2_class **)(a1 + 112));
      }
      _dispatch_objc_release(*(id *)(a1 + 232));
      *(_QWORD *)(a1 + 232) = v13;
      if (!v7)
        goto LABEL_35;
      goto LABEL_28;
    }
  }
  else
  {
    if (v9)
      return;
    if (v4)
    {
      VARIANT_armv81 = dispatch_data_create_VARIANT_armv81(*(void **)(a1 + 176), (size_t)v4, 0, &__block_literal_global);
      *(_QWORD *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 200) = 0;
      subrange_VARIANT_armv81 = dispatch_data_create_concat_VARIANT_armv81(*(_QWORD **)(a1 + 232), VARIANT_armv81);
      _dispatch_objc_release(*(id *)(a1 + 232));
      _dispatch_objc_release(VARIANT_armv81);
    }
    else
    {
      subrange_VARIANT_armv81 = *(void **)(a1 + 232);
    }
    v14 = &_dispatch_data_empty;
    if (!v7)
      v14 = (__objc2_class **)subrange_VARIANT_armv81;
    *(_QWORD *)(a1 + 232) = v14;
  }
  if (!v7)
  {
LABEL_35:
    *(_QWORD *)(a1 + 208) = v5;
    return;
  }
LABEL_28:
  if ((a2 & 8) != 0 && !dispatch_data_get_size_VARIANT_armv81((uint64_t)subrange_VARIANT_armv81))
    goto LABEL_35;
  *(_QWORD *)(a1 + 208) = 0;
  v15 = *(_DWORD *)(a1 + 56);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 128);
  v17 = *(_QWORD *)(a1 + 144);
  dispatch_suspend_VARIANT_armv81(*(_QWORD *)(v17 + 64));
  v18 = *(_QWORD *)(a1 + 136);
  if (*(_DWORD *)(v18 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v18 + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  v19 = *(atomic_uint **)(a1 + 48);
  v20[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  v20[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  v20[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_operation_deliver_data_block_invoke_0;
  v20[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&unk_1E1E88C30;
  v21 = a2;
  v22 = v15;
  v23 = v8;
  v20[4] = v16;
  v20[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))subrange_VARIANT_armv81;
  v20[6] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v18;
  v20[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v17;
  dispatch_async_VARIANT_armv81(v19, v20);
}

void _dispatch_disk_dispose_VARIANT_armv81(uint64_t a1, const char *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 112);
  if (v2)
    *(_QWORD *)(v2 + 120) = *(_QWORD *)(a1 + 120);
  **(_QWORD **)(a1 + 120) = v2;
  dispatch_release_VARIANT_armv81(*(atomic_uint **)(a1 + 72), a2);
}

atomic_uint *___dispatch_io_init_block_invoke_0(uint64_t a1)
{
  atomic_uint *v2;
  const char *v3;
  atomic_uint *result;
  int add_explicit;
  uint64_t (*v6[5])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v7;

  v6[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  v6[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  v6[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_io_init_block_invoke_2_0;
  v6[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&unk_1E1E888B8;
  v2 = *(atomic_uint **)(a1 + 40);
  v6[4] = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  v7 = *(_DWORD *)(a1 + 48);
  dispatch_async_VARIANT_armv81(v2, v6);
  result = *(atomic_uint **)(a1 + 40);
  if (result[2] != 0x7FFFFFFF)
  {
    add_explicit = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      return (atomic_uint *)_os_object_dispose(result, v3);
    }
  }
  return result;
}

uint64_t ___dispatch_io_init_block_invoke_2_0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

uint64_t ___dispatch_io_stop_block_invoke_0(uint64_t a1)
{
  uint64_t v1;
  atomic_uint *v2;
  uint64_t (*aBlock[5])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(atomic_uint **)(v1 + 56);
  aBlock[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_io_stop_block_invoke_2_0;
  aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_53_0;
  aBlock[4] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v1;
  return dispatch_async_VARIANT_armv81(v2, aBlock);
}

atomic_uint *___dispatch_io_stop_block_invoke_2_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  atomic_uint *result;
  int add_explicit;
  uint64_t (*aBlock[5])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 112);
  if (v3)
  {
    _dispatch_fd_entry_cleanup_operations_0(*(_QWORD *)(v2 + 112), v2);
    v4 = *(_QWORD *)(a1 + 32);
    if ((*(_BYTE *)(v4 + 120) & 1) == 0)
    {
      v5 = *(_QWORD **)(v3 + 8);
      if (v5)
      {
        *v5 = 0;
        v4 = *(_QWORD *)(a1 + 32);
      }
      *(_QWORD *)(v4 + 112) = 0;
      dispatch_resume_VARIANT_armv81(*(_QWORD *)(v3 + 64));
    }
  }
  else if (*(_DWORD *)(v2 + 124) != -1)
  {
    if (*(_DWORD *)(v2 + 8) != 0x7FFFFFFF)
    {
      if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed) < 1)
        dispatch_set_target_queue_VARIANT_mp_cold_2();
      v2 = *(_QWORD *)(a1 + 32);
    }
    aBlock[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
    aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
    aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_io_stop_block_invoke_3_0;
    aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_52_0;
    aBlock[4] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v2;
    dispatch_async_VARIANT_armv81((atomic_uint *)_dispatch_io_fds_lockq, aBlock);
  }
  result = *(atomic_uint **)(a1 + 32);
  if (result[2] != 0x7FFFFFFF)
  {
    add_explicit = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      return (atomic_uint *)_os_object_dispose(result, (const char *)v2);
    }
  }
  return result;
}

uint64_t _dispatch_fd_entry_cleanup_operations_0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  atomic_uint *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char v7;
  char v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  atomic_uint *v10;
  uint64_t (*v11[7])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*aBlock[6])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v3 = result;
  v4 = *(_QWORD *)(result + 56);
  if (v4)
  {
    if (a2
      && *(_DWORD *)(a2 + 8) != 0x7FFFFFFF
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 1u, memory_order_relaxed) <= 0)
    {
      dispatch_set_target_queue_VARIANT_mp_cold_2();
    }
    dispatch_suspend_VARIANT_armv81(*(_QWORD *)(result + 64));
    v5 = *(atomic_uint **)(*(_QWORD *)(v3 + 56) + 72);
    aBlock[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
    aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
    aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_fd_entry_cleanup_operations_block_invoke_0;
    aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_55_0;
    aBlock[4] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v3;
    aBlock[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a2;
    return dispatch_async_VARIANT_armv81(v5, aBlock);
  }
  else
  {
    v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
    v7 = 1;
    do
    {
      v8 = v7;
      v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 8 * v4 + 40);
      if (v9)
      {
        if (a2
          && *(_DWORD *)(a2 + 8) != 0x7FFFFFFF
          && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 1u, memory_order_relaxed) <= 0)
        {
          dispatch_set_target_queue_VARIANT_mp_cold_2();
        }
        dispatch_suspend_VARIANT_armv81(*(_QWORD *)(v3 + 64));
        v10 = *(atomic_uint **)v9;
        v11[0] = v6;
        v11[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
        v11[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_fd_entry_cleanup_operations_block_invoke_2_0;
        v11[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_56_0;
        v11[4] = v9;
        v11[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a2;
        v11[6] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v3;
        result = dispatch_async_VARIANT_armv81(v10, v11);
      }
      v7 = 0;
      v4 = 1;
    }
    while ((v8 & 1) != 0);
  }
  return result;
}

uint64_t ___dispatch_io_stop_block_invoke_3_0(uint64_t a1)
{
  atomic_uint *v2;
  atomic_uint v3;
  uint64_t result;
  int add_explicit;

  v2 = *(atomic_uint **)(a1 + 32);
  v3 = v2[31];
  result = _dispatch_io_fds[v3 & 0x3F];
  if (result)
  {
    while (*(_DWORD *)result != v3)
    {
      result = *(_QWORD *)(result + 112);
      if (!result)
        goto LABEL_6;
    }
    result = _dispatch_fd_entry_cleanup_operations_0(result, (uint64_t)v2);
    v2 = *(atomic_uint **)(a1 + 32);
  }
LABEL_6:
  if (v2[2] != 0x7FFFFFFF)
  {
    add_explicit = atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      return _os_object_dispose(v2, (const char *)v2);
    }
  }
  return result;
}

atomic_uint *___dispatch_fd_entry_cleanup_operations_block_invoke_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  atomic_uint *result;
  int add_explicit;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 56);
  v4 = *(_QWORD *)(v3 + 48);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 40);
    do
    {
      while (1)
      {
        v6 = v4;
        v4 = *(_QWORD *)(v4 + 240);
        if (!*(_BYTE *)(v6 + 160) && (!v5 || *(_QWORD *)(v6 + 136) == v5))
          break;
        if (!v4)
          goto LABEL_9;
      }
      _dispatch_disk_complete_operation_0(v3, v6);
    }
    while (v4);
LABEL_9:
    v2 = *(_QWORD *)(a1 + 32);
  }
  dispatch_resume_VARIANT_armv81(*(_QWORD *)(v2 + 64));
  result = *(atomic_uint **)(a1 + 40);
  if (result)
  {
    if (result[2] != 0x7FFFFFFF)
    {
      add_explicit = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release);
      if (add_explicit <= 1)
      {
        if (add_explicit != 1)
          _os_object_allows_weak_reference_VARIANT_mp_cold_1();
        return (atomic_uint *)_os_object_dispose(result, v7);
      }
    }
  }
  return result;
}

atomic_uint *___dispatch_fd_entry_cleanup_operations_block_invoke_2_0(uint64_t *a1)
{
  const char *v2;
  atomic_uint *result;
  int add_explicit;

  _dispatch_stream_cleanup_operations_0(a1[4], a1[5]);
  dispatch_resume_VARIANT_armv81(*(_QWORD *)(a1[6] + 64));
  result = (atomic_uint *)a1[5];
  if (result)
  {
    if (result[2] != 0x7FFFFFFF)
    {
      add_explicit = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release);
      if (add_explicit <= 1)
      {
        if (add_explicit != 1)
          _os_object_allows_weak_reference_VARIANT_mp_cold_1();
        return (atomic_uint *)_os_object_dispose(result, v2);
      }
    }
  }
  return result;
}

uint64_t _dispatch_stream_cleanup_operations_0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  v4 = *(_QWORD *)(result + 48);
  if (v4)
  {
    do
    {
      v5 = *(_QWORD *)(v4 + 240);
      if (!a2 || *(_QWORD *)(v4 + 136) == a2)
        result = (uint64_t)_dispatch_stream_complete_operation_0(v3, v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = *(_QWORD *)(v3 + 32);
  if (v6)
  {
    do
    {
      v7 = *(_QWORD *)(v6 + 240);
      if (!a2 || *(_QWORD *)(v6 + 136) == a2)
        result = (uint64_t)_dispatch_stream_complete_operation_0(v3, v6);
      v6 = v7;
    }
    while (v7);
  }
  if (*(_BYTE *)(v3 + 24) && !*(_QWORD *)(v3 + 48) && !*(_QWORD *)(v3 + 32))
  {
    result = dispatch_suspend_VARIANT_armv81(*(_QWORD *)(v3 + 8));
    *(_BYTE *)(v3 + 24) = 0;
  }
  return result;
}

atomic_uint *_dispatch_disk_complete_operation_0(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  atomic_uint *result;
  int add_explicit;

  if (*(_QWORD *)(a1 + 64) == a2)
    *(_QWORD *)(a1 + 64) = **(_QWORD **)(*(_QWORD *)(a2 + 248) + 8);
  if (!*(_QWORD *)(a2 + 64))
  {
    v3 = *(_QWORD **)(a2 + 256);
    v4 = *(_QWORD **)(a2 + 264);
    if (v3)
    {
      v3[33] = v4;
      **(_QWORD **)(a2 + 264) = v3;
      v3[30] = 0;
      v5 = *(_QWORD **)(a1 + 56);
      v3[31] = v5;
      *v5 = v3;
      *(_QWORD *)(a1 + 56) = v3 + 30;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a2 + 144) + 104) = v4;
      *v4 = 0;
    }
  }
  v6 = *(_QWORD *)(a2 + 240);
  v7 = *(_QWORD **)(a2 + 248);
  if (v6)
  {
    *(_QWORD *)(v6 + 248) = v7;
    v7 = *(_QWORD **)(a2 + 248);
  }
  else
  {
    *(_QWORD *)(a1 + 56) = v7;
  }
  *v7 = v6;
  result = *(atomic_uint **)(a2 + 152);
  if (result)
    result = (atomic_uint *)dispatch_source_cancel_VARIANT_armv81(result);
  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF)
  {
    add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      return (atomic_uint *)_os_object_dispose((void *)a2, (const char *)a2);
    }
  }
  return result;
}

atomic_uint *_dispatch_stream_complete_operation_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  atomic_uint *result;
  int add_explicit;

  v3 = *(_QWORD *)(a2 + 240);
  if (v3)
    v4 = (_QWORD *)(v3 + 248);
  else
    v4 = (_QWORD *)(a1 + 16 * *(_QWORD *)(a2 + 64) + 40);
  *v4 = *(_QWORD *)(a2 + 248);
  **(_QWORD **)(a2 + 248) = v3;
  if (*(_QWORD *)(a1 + 16) == a2)
    *(_QWORD *)(a1 + 16) = 0;
  result = *(atomic_uint **)(a2 + 152);
  if (result)
    result = (atomic_uint *)dispatch_source_cancel_VARIANT_armv81(result);
  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF)
  {
    add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      return (atomic_uint *)_os_object_dispose((void *)a2, (const char *)a2);
    }
  }
  return result;
}

atomic_uint *___dispatch_operation_create_block_invoke_0(uint64_t a1)
{
  atomic_uint *v2;
  const char *v3;
  atomic_uint *result;
  int add_explicit;
  uint64_t (*v6[5])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  __int128 v7;
  uint64_t v8;

  v6[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  v6[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  v6[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_operation_create_block_invoke_2_0;
  v6[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&unk_1E1E889A8;
  v8 = *(_QWORD *)(a1 + 64);
  v2 = *(atomic_uint **)(a1 + 40);
  v6[4] = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  v7 = *(_OWORD *)(a1 + 48);
  dispatch_async_VARIANT_armv81(v2, v6);
  result = *(atomic_uint **)(a1 + 40);
  if (result[2] != 0x7FFFFFFF)
  {
    add_explicit = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      return (atomic_uint *)_os_object_dispose(result, v3);
    }
  }
  return result;
}

void ___dispatch_operation_create_block_invoke_2_0(uint64_t a1)
{
  const char *v2;
  atomic_uint *v3;
  int add_explicit;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v3 = *(atomic_uint **)(a1 + 48);
  if (v3[2] != 0x7FFFFFFF)
  {
    add_explicit = atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      _os_object_dispose(v3, v2);
    }
  }
  _dispatch_objc_release(*(id *)(a1 + 40));
}

void ___dispatch_operation_enqueue_block_invoke_0(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  _dispatch_objc_release(*(id *)(a1 + 40));
}

void ___dispatch_operation_enqueue_block_invoke_2_0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  BOOL v4;
  uint64_t *v5;

  v3 = *(uint64_t **)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 40);
  if (_dispatch_operation_should_enqueue_0((uint64_t)v2, (__objc2_class **)*v3, *(id *)(a1 + 48)))
  {
    if (v3[6])
      v4 = 1;
    else
      v4 = v3[4] != 0;
    v2[30] = 0;
    v5 = &v3[2 * v2[8]];
    v2[31] = v5[5];
    *(_QWORD *)v5[5] = v2;
    v5[5] = (uint64_t)(v2 + 30);
    if (!v4)
      dispatch_async_f_VARIANT_armv81((_DWORD *)*v3, *v3, (uint64_t)_dispatch_stream_queue_handler_0);
  }
  _dispatch_objc_release(*(id *)(a1 + 48));
}

void ___dispatch_operation_enqueue_block_invoke_3_0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 40);
  if (_dispatch_operation_should_enqueue_0((uint64_t)v3, *(__objc2_class ***)(v2 + 72), *(id *)(a1 + 48)))
  {
    if (v3[8])
    {
      v3[30] = 0;
      v4 = *(_QWORD **)(v2 + 56);
      v3[31] = v4;
      *v4 = v3;
      *(_QWORD *)(v2 + 56) = v3 + 30;
    }
    else
    {
      v5 = v3[18];
      if (!*(_QWORD *)(v5 + 96))
      {
        v3[30] = 0;
        v6 = *(_QWORD **)(v2 + 56);
        v3[31] = v6;
        *v6 = v3;
        *(_QWORD *)(v2 + 56) = v3 + 30;
        v5 = v3[18];
      }
      v7 = *(_QWORD **)(v5 + 104);
      v3[32] = 0;
      v3[33] = v7;
      *v7 = v3;
      *(_QWORD *)(v3[18] + 104) = v3 + 32;
    }
    _dispatch_disk_handler_0((atomic_uint *)v2);
  }
  _dispatch_objc_release(*(id *)(a1 + 48));
}

uint64_t _dispatch_operation_should_enqueue_0(uint64_t a1, __objc2_class **a2, id a3)
{
  const char *v6;
  int v7;
  int v8;
  int add_explicit;
  uint64_t (*VARIANT_armv81)();
  dispatch_time_t v12;
  uint64_t (*v13[6])();

  _dispatch_objc_retain(a3);
  *(_QWORD *)(a1 + 232) = a3;
  v7 = *(_DWORD *)(*(_QWORD *)(a1 + 136) + 120);
  if ((v7 & 3) != 0)
  {
    if ((v7 & 2) != 0)
    {
      v8 = 89;
      goto LABEL_5;
    }
  }
  else
  {
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 144) + 24);
    if (v8)
    {
LABEL_5:
      *(_DWORD *)(a1 + 120) = v8;
      if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
      {
        add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 0xFFFFFFFF, memory_order_release);
        if (add_explicit <= 1)
        {
          if (add_explicit != 1)
            _os_object_allows_weak_reference_VARIANT_mp_cold_1();
          _os_object_dispose((void *)a1, v6);
        }
      }
      return 0;
    }
  }
  if (*(_QWORD *)(a1 + 88))
  {
    VARIANT_armv81 = *(uint64_t (**)())(a1 + 152);
    if (!VARIANT_armv81)
    {
      VARIANT_armv81 = (uint64_t (*)())dispatch_source_create_VARIANT_armv81((uint64_t)&_dispatch_source_type_timer_VARIANT_armv81, 0, 0, a2);
      v12 = dispatch_time(0, *(_QWORD *)(a1 + 88));
      dispatch_source_set_timer_VARIANT_armv81(VARIANT_armv81, v12, *(_QWORD *)(a1 + 88), 0);
      v13[0] = (uint64_t (*)())MEMORY[0x1E0C87450];
      v13[1] = (uint64_t (*)())0x40000000;
      v13[2] = (uint64_t (*)())___dispatch_operation_timer_block_invoke_0;
      v13[3] = (uint64_t (*)())&__block_descriptor_tmp_63_0;
      v13[4] = VARIANT_armv81;
      v13[5] = (uint64_t (*)())a1;
      dispatch_source_set_event_handler_VARIANT_armv81((uint64_t)VARIANT_armv81, v13);
      *(_QWORD *)(a1 + 152) = VARIANT_armv81;
    }
    dispatch_resume_VARIANT_armv81((uint64_t)VARIANT_armv81);
  }
  return 1;
}

atomic_uint *_dispatch_stream_queue_handler_0(unint64_t *a1)
{
  atomic_uint *result;

  result = (atomic_uint *)dispatch_get_context_VARIANT_armv81(a1);
  if (result)
    return _dispatch_stream_handler_0(result);
  return result;
}

void ___dispatch_operation_timer_block_invoke_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  if (!dispatch_source_testcancel_VARIANT_armv81(*(_QWORD *)(a1 + 32)))
  {
    v2 = *(_QWORD *)(a1 + 40);
    v3 = *(_QWORD *)(v2 + 96) & 1;
    if (*(_BYTE *)(v2 + 160))
      v4 = (*(_QWORD *)(v2 + 96) & 1) == 0;
    else
      v4 = 1;
    if (v4)
      _dispatch_operation_deliver_data_0(v2, v3);
    else
      *(_DWORD *)(v2 + 184) = v3;
  }
}

atomic_uint *_dispatch_stream_handler_0(atomic_uint *result)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  void *VARIANT_armv81;
  int v10;
  char **v11;
  atomic_uint *v12;
  uint64_t (*v13)();
  uint64_t (*v14[5])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v15[5])();

  for (i = (uint64_t)result; ; result = _dispatch_stream_complete_operation_0(i, v2))
  {
    v2 = *(_QWORD *)(i + 16);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 64);
      if (v3)
      {
        if (v3 != 1)
          return result;
        v2 = *(_QWORD *)(v2 + 240);
        if (!v2)
        {
          v2 = *(_QWORD *)(i + 48);
          if (!v2)
            return result;
        }
      }
    }
    else
    {
      v4 = *(_QWORD *)(i + 32);
      if (!(*(_QWORD *)(i + 48) | v4))
        return result;
      v2 = v4 ? *(_QWORD *)(i + 32) : *(_QWORD *)(i + 48);
      if (!v2)
        return result;
    }
    v5 = *(_DWORD *)(*(_QWORD *)(v2 + 136) + 120);
    if ((v5 & 3) != 0)
      break;
    v7 = *(_QWORD *)(v2 + 144);
    v6 = *(_DWORD *)(v7 + 24);
    if (!v6)
      goto LABEL_19;
LABEL_17:
    *(_DWORD *)(v2 + 120) = v6;
  }
  if ((v5 & 2) != 0)
  {
    v6 = 89;
    goto LABEL_17;
  }
  v7 = *(_QWORD *)(v2 + 144);
LABEL_19:
  *(_QWORD *)(i + 16) = v2;
  dispatch_suspend_VARIANT_armv81(*(_QWORD *)(v7 + 64));
  if (*(_QWORD *)(v2 + 216))
    v8 = 1;
  else
    v8 = byte_1EDF51AD8 == 0;
  if (!v8)
    _dispatch_operation_deliver_data_0(v2, 1);
  switch(_dispatch_operation_perform_0(v2))
  {
    case 1u:
      goto LABEL_27;
    case 2u:
      _dispatch_operation_deliver_data_0(v2, 0);
      goto LABEL_28;
    case 3u:
      _dispatch_operation_deliver_data_0(v2, 9);
LABEL_27:
      _dispatch_stream_complete_operation_0(i, v2);
LABEL_28:
      if (*(_QWORD *)(i + 48) || *(_QWORD *)(i + 32))
        dispatch_async_f_VARIANT_armv81(*(_DWORD **)i, *(_QWORD *)i, (uint64_t)_dispatch_stream_queue_handler_0);
      return (atomic_uint *)dispatch_resume_VARIANT_armv81(*(_QWORD *)(v7 + 64));
    case 4u:
      _dispatch_stream_complete_operation_0(i, v2);
      goto LABEL_32;
    case 5u:
LABEL_32:
      if (!*(_QWORD *)(i + 48) && !*(_QWORD *)(i + 32))
        return (atomic_uint *)dispatch_resume_VARIANT_armv81(*(_QWORD *)(v7 + 64));
      *(_BYTE *)(i + 24) = 1;
      VARIANT_armv81 = *(void **)(i + 8);
      if (VARIANT_armv81)
        goto LABEL_43;
      v10 = *(_DWORD *)(v2 + 56);
      if (!v10)
      {
        v11 = &_dispatch_source_type_read_VARIANT_armv81;
        goto LABEL_41;
      }
      if (v10 == 1)
      {
        v11 = &_dispatch_source_type_write_VARIANT_armv81;
LABEL_41:
        VARIANT_armv81 = (void *)dispatch_source_create_VARIANT_armv81((uint64_t)v11, **(int **)(v2 + 144), 0, *(__objc2_class ***)i);
        dispatch_set_context_VARIANT_armv81(VARIANT_armv81, (const char *)i);
        dispatch_source_set_event_handler_f_VARIANT_armv81((uint64_t)VARIANT_armv81, (uint64_t (**)())_dispatch_stream_source_handler_0);
        v13 = *(uint64_t (**)())(*(_QWORD *)(v2 + 144) + 64);
        v15[0] = (uint64_t (*)())MEMORY[0x1E0C87450];
        v15[1] = (uint64_t (*)())0x40000000;
        v15[2] = (uint64_t (*)())___dispatch_stream_source_block_invoke_0;
        v15[3] = (uint64_t (*)())&__block_descriptor_tmp_67_0;
        v15[4] = v13;
        dispatch_source_set_mandatory_cancel_handler_VARIANT_armv81((uint64_t)VARIANT_armv81, v15);
        *(_QWORD *)(i + 8) = VARIANT_armv81;
        goto LABEL_43;
      }
      VARIANT_armv81 = 0;
LABEL_43:
      dispatch_resume_VARIANT_armv81((uint64_t)VARIANT_armv81);
      return (atomic_uint *)dispatch_resume_VARIANT_armv81(*(_QWORD *)(v7 + 64));
    case 6u:
      _dispatch_stream_cleanup_operations_0(i, *(_QWORD *)(v2 + 136));
      return (atomic_uint *)dispatch_resume_VARIANT_armv81(*(_QWORD *)(v7 + 64));
    case 7u:
      dispatch_suspend_VARIANT_armv81(*(_QWORD *)(v7 + 64));
      v12 = *(atomic_uint **)(v7 + 72);
      v14[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
      v14[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
      v14[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_stream_handler_block_invoke_0;
      v14[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_64_0;
      v14[4] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v7;
      dispatch_async_VARIANT_armv81(v12, v14);
      return (atomic_uint *)dispatch_resume_VARIANT_armv81(*(_QWORD *)(v7 + 64));
    default:
      return (atomic_uint *)dispatch_resume_VARIANT_armv81(*(_QWORD *)(v7 + 64));
  }
}

uint64_t _dispatch_operation_perform_0(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  _DWORD *v5;
  unint64_t StatusReg;
  int v7;
  uint64_t v8;
  uint64_t NOCANCEL;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t size_VARIANT_armv81;
  size_t v15;
  uint64_t v16;
  size_t v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __objc2_class *v23;
  __objc2_class **subrange_VARIANT_armv81;
  _QWORD v25[6];

  if (a1)
  {
    v2 = *(_DWORD *)(*(_QWORD *)(a1 + 136) + 120);
    if ((v2 & 3) == 0)
    {
      v3 = *(_QWORD *)(a1 + 144) + 24;
      goto LABEL_8;
    }
  }
  else
  {
    LOBYTE(v2) = MEMORY[0x78];
    if ((MEMORY[0x78] & 3) == 0)
    {
      v3 = 144;
LABEL_8:
      v4 = *(_DWORD *)v3;
      if (*(_DWORD *)v3)
        goto LABEL_36;
      goto LABEL_9;
    }
  }
  if ((v2 & 2) != 0)
  {
    *(_DWORD *)(a1 + 120) = 89;
    return 6;
  }
LABEL_9:
  if (*(_QWORD *)(a1 + 176))
    goto LABEL_10;
  v11 = *(_QWORD *)(a1 + 80);
  v12 = dispatch_io_defaults;
  v13 = *(_DWORD *)(a1 + 56);
  if (v13 == 1)
  {
    if (dispatch_io_defaults >= v11)
      v21 = *(_QWORD *)(a1 + 80);
    else
      v21 = dispatch_io_defaults;
    *(_QWORD *)(a1 + 192) = 0;
    v22 = *(_QWORD **)(a1 + 232);
    v25[0] = MEMORY[0x1E0C87450];
    v25[1] = 0x40000000;
    v25[2] = ___dispatch_operation_perform_block_invoke_0;
    v25[3] = &__block_descriptor_tmp_66_0;
    v25[4] = a1;
    v25[5] = v21;
    dispatch_data_apply_VARIANT_armv81(v22, (uint64_t)v25);
    v23 = *(__objc2_class **)(a1 + 192);
    if ((unint64_t)v23 > v11)
    {
      *(_QWORD *)(a1 + 192) = v11;
      v23 = (__objc2_class *)v11;
    }
    subrange_VARIANT_armv81 = dispatch_data_create_subrange_VARIANT_armv81(*(__objc2_class **)(a1 + 232), 0, v23);
    *(_QWORD *)(a1 + 224) = dispatch_data_create_map_VARIANT_armv81(subrange_VARIANT_armv81, (_QWORD *)(a1 + 176), 0);
    _dispatch_objc_release(subrange_VARIANT_armv81);
    goto LABEL_10;
  }
  if (v13)
    goto LABEL_10;
  size_VARIANT_armv81 = dispatch_data_get_size_VARIANT_armv81(*(_QWORD *)(a1 + 232));
  if (v11 - size_VARIANT_armv81 >= v12)
    v15 = v12;
  else
    v15 = v11 - size_VARIANT_armv81;
  v16 = *(_QWORD *)(a1 + 112);
  if (v16 != -1)
  {
    v17 = v16 - *(_QWORD *)(a1 + 216);
    if (v17 < v15)
      v15 = v17;
  }
  *(_QWORD *)(a1 + 192) = v15;
  v4 = malloc_type_posix_memalign((void **)(a1 + 176), *MEMORY[0x1E0C88820], v15, 0x23812559uLL);
  if (!v4)
  {
LABEL_10:
    v5 = *(_DWORD **)(a1 + 144);
    if (*v5 == -1)
    {
      v4 = _dispatch_fd_entry_open_0((uint64_t)v5, *(_QWORD *)(a1 + 136));
      if (v4)
        goto LABEL_36;
    }
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      v7 = *(_DWORD *)(a1 + 56);
      if (v7 == 1)
      {
        v10 = *(_QWORD *)(a1 + 64);
        if (v10 == 1)
        {
          NOCANCEL = pwrite_NOCANCEL();
        }
        else
        {
          if (v10)
            goto LABEL_23;
          NOCANCEL = write_NOCANCEL();
        }
      }
      else
      {
        if (v7)
          goto LABEL_23;
        v8 = *(_QWORD *)(a1 + 64);
        if (v8 == 1)
        {
          NOCANCEL = pread_NOCANCEL();
        }
        else
        {
          if (v8)
            goto LABEL_23;
          NOCANCEL = read_NOCANCEL();
        }
      }
      if (NOCANCEL != -1)
      {
        if (!NOCANCEL)
          return 3;
        *(_QWORD *)(a1 + 200) += NOCANCEL;
        v20 = *(_QWORD *)(a1 + 216) + NOCANCEL;
        *(_QWORD *)(a1 + 216) = v20;
        if (v20 == *(_QWORD *)(a1 + 112))
          return 1;
        else
          return 2;
      }
LABEL_23:
      v4 = **(_DWORD **)(StatusReg + 8);
    }
    while (v4 == 4);
  }
LABEL_36:
  if (v4 != 35)
  {
    *(_DWORD *)(a1 + 120) = v4;
    if (v4 != 89)
    {
      if (v4 != 9)
        return 1;
      v19 = 0;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(*(_QWORD *)(a1 + 144) + 24), (unsigned int *)&v19, 9u, memory_order_relaxed, memory_order_relaxed);
      return 7;
    }
    return 6;
  }
  if (!*(_DWORD *)(a1 + 56)
    && *(_QWORD *)(a1 + 216)
    && *(_QWORD *)(a1 + 136) == *(_QWORD *)(*(_QWORD *)(a1 + 144) + 88))
  {
    return 4;
  }
  else
  {
    return 5;
  }
}

uint64_t ___dispatch_stream_handler_block_invoke_0(uint64_t a1)
{
  _dispatch_fd_entry_cleanup_operations_0(*(_QWORD *)(a1 + 32), 0);
  return dispatch_resume_VARIANT_armv81(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64));
}

BOOL ___dispatch_operation_perform_block_invoke_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 192);
  v7 = v6 + a5;
  if (!v6 || (v8 = *(_QWORD *)(a1 + 40), v7 <= v8))
  {
    *(_QWORD *)(v5 + 192) = v7;
    v8 = *(_QWORD *)(a1 + 40);
  }
  return v7 < v8;
}

uint64_t _dispatch_stream_source_handler_0(uint64_t a1)
{
  dispatch_suspend_VARIANT_armv81(*(_QWORD *)(a1 + 8));
  *(_BYTE *)(a1 + 24) = 0;
  return _dispatch_stream_handler_0(a1);
}

uint64_t ___dispatch_stream_source_block_invoke_0(uint64_t a1)
{
  return dispatch_resume_VARIANT_armv81(*(_QWORD *)(a1 + 32));
}

atomic_uint *_dispatch_disk_handler_0(atomic_uint *result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  int v11;
  uint64_t v12;

  if (!*((_BYTE *)result + 108))
  {
    v1 = (uint64_t)result;
    v3 = *((_QWORD *)result + 10);
    v2 = *((_QWORD *)result + 11);
    v4 = v2;
    if (v2 <= v3)
      v4 = *((_QWORD *)result + 16) + v2;
    if (v3 > v4)
    {
LABEL_31:
      *(_QWORD *)(v1 + 80) = v3 % *(_QWORD *)(v1 + 128);
      v12 = *(_QWORD *)(v1 + 8 * v2 + 136);
      if (v12)
      {
        *(_BYTE *)(v1 + 108) = 1;
        return dispatch_async_f_VARIANT_armv81(*(_DWORD **)(v12 + 24), v1, (uint64_t)_dispatch_disk_perform_0);
      }
      return result;
    }
    while (1)
    {
      v5 = v3 % *(_QWORD *)(v1 + 128);
      if (*(_QWORD *)(v1 + 8 * v5 + 136) || (v6 = *(_QWORD *)(v1 + 48)) == 0)
      {
LABEL_30:
        v2 = *(_QWORD *)(v1 + 88);
        goto LABEL_31;
      }
      v7 = *(_QWORD *)(v1 + 64);
      v8 = v7;
      if (v7)
      {
        do
        {
          if (*(_QWORD *)(v8 + 240))
            v8 = *(_QWORD *)(v8 + 240);
          else
            v8 = *(_QWORD *)(v1 + 48);
          if (*(_BYTE *)(v8 + 160))
            v9 = v8 == v7;
          else
            v9 = 1;
        }
        while (!v9);
        if (*(_BYTE *)(v8 + 160))
          goto LABEL_30;
      }
      else
      {
        v8 = *(_QWORD *)(v1 + 48);
        if (*(_BYTE *)(v6 + 160))
          goto LABEL_30;
      }
      *(_QWORD *)(v1 + 64) = v8;
      v10 = *(_DWORD *)(*(_QWORD *)(v8 + 136) + 120);
      if ((v10 & 3) != 0)
      {
        if ((v10 & 2) == 0)
          goto LABEL_25;
        v11 = 89;
      }
      else
      {
        v11 = *(_DWORD *)(*(_QWORD *)(v8 + 144) + 24);
        if (!v11)
        {
LABEL_25:
          if (*(_DWORD *)(v8 + 8) != 0x7FFFFFFF)
          {
            if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed) < 1)
              dispatch_set_target_queue_VARIANT_mp_cold_2();
            v5 = v3 % *(_QWORD *)(v1 + 128);
          }
          *(_QWORD *)(v1 + 8 * v5 + 136) = v8;
          *(_BYTE *)(v8 + 160) = 1;
          ++v3;
          goto LABEL_29;
        }
      }
      *(_DWORD *)(v8 + 120) = v11;
      result = _dispatch_disk_complete_operation_0(v1, v8);
LABEL_29:
      if (v3 > v4)
        goto LABEL_30;
    }
  }
  return result;
}

uint64_t _dispatch_disk_perform_0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t StatusReg;
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  BOOL v10;
  int v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v22;
  uint64_t v23;
  atomic_uint *v24;
  uint64_t (*aBlock[6])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v27;
  int64_t v28;
  uint64_t v29;

  v2 = dispatch_io_defaults;
  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(_QWORD *)(a1 + 80);
  if (v4 <= v3)
    v4 += *(_QWORD *)(a1 + 128);
  v5 = (unint64_t *)MEMORY[0x1E0C88820];
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    v7 = v3 % *(_QWORD *)(a1 + 128);
    v8 = *(_QWORD *)(a1 + 8 * v7 + 136);
    if (!v8)
      break;
    if (*(_DWORD *)(v8 + 56) != 1)
    {
      v9 = *(_DWORD **)(v8 + 144);
      if (*v9 != -1 || !_dispatch_fd_entry_open_0((uint64_t)v9, *(_QWORD *)(v8 + 136)))
      {
        if (*(_QWORD *)(v8 + 216))
          v10 = 1;
        else
          v10 = byte_1EDF51AD8 == 0;
        if (!v10)
          _dispatch_operation_deliver_data_0(v8, 1);
        if (v4 - v3 == 1 && !*(_QWORD *)(a1 + 8 * *(_QWORD *)(a1 + 80) + 136))
          v2 <<= *(_QWORD *)(v8 + 168) == 0;
        v11 = *(_DWORD *)(*(_QWORD *)(v8 + 136) + 120);
        if ((v11 & 3) != 0)
        {
          if ((v11 & 2) == 0)
            goto LABEL_23;
        }
        else if (!*(_DWORD *)(*(_QWORD *)(v8 + 144) + 24))
        {
LABEL_23:
          v29 = 0;
          v12 = *(_QWORD *)(v8 + 168);
          v13 = *v5;
          v14 = *(_QWORD *)(v8 + 104) + v2;
          if (v12 <= (uint64_t)(v14 + *(_QWORD *)(v8 + 216) + *v5))
          {
            if (v12)
            {
              v15 = v2;
            }
            else
            {
              v16 = v14 % v13;
              v17 = v13 - v14 % v13;
              if (v16)
                v18 = v17;
              else
                v18 = 0;
              v15 = v18 + v2;
              v12 = *(_QWORD *)(v8 + 104);
            }
            LODWORD(v29) = v15;
            v28 = v12;
            *(_QWORD *)(v8 + 168) = v12 + v15;
            while (fcntl_NOCANCEL() == -1)
            {
              v19 = **(_DWORD **)(StatusReg + 8);
              if (v19 != 4)
              {
                if (v19 > 0x2D || ((1 << v19) & 0x200008000001) == 0)
                  _dispatch_bug(2308, (int)v19);
                break;
              }
            }
          }
        }
      }
    }
    if (++v3 >= v4)
    {
      v7 = v3 % *(_QWORD *)(a1 + 128);
      break;
    }
  }
  *(_QWORD *)(a1 + 96) = v7;
  v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 136 + 8 * *(_QWORD *)(a1 + 88));
  v22 = _dispatch_operation_perform_0((uint64_t)v21);
  v23 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 136 + 8 * v23) = 0;
  *(_QWORD *)(a1 + 88) = (unint64_t)(v23 + 1) % *(_QWORD *)(a1 + 128);
  v24 = *(atomic_uint **)(a1 + 72);
  aBlock[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_disk_perform_block_invoke_0;
  aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_68_0;
  v27 = v22;
  aBlock[4] = v21;
  aBlock[5] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a1;
  return dispatch_async_VARIANT_armv81(v24, aBlock);
}

atomic_uint *___dispatch_disk_perform_block_invoke_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  atomic_uint *result;
  int add_explicit;

  switch(*(_DWORD *)(a1 + 48))
  {
    case 1:
      goto LABEL_4;
    case 2:
      _dispatch_operation_deliver_data_0(*(_QWORD *)(a1 + 32), 0);
      break;
    case 3:
      _dispatch_operation_deliver_data_0(*(_QWORD *)(a1 + 32), 9);
LABEL_4:
      _dispatch_disk_complete_operation_0(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
      break;
    case 6:
      _dispatch_disk_cleanup_operations_0(*(atomic_uint **)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136));
      break;
    case 7:
      v2 = *(_QWORD *)(a1 + 40);
      v3 = *(_QWORD *)(v2 + 48);
      if (v3)
      {
        do
        {
          v4 = *(_QWORD *)(v3 + 240);
          _dispatch_disk_complete_operation_0(v2, v3);
          v3 = v4;
        }
        while (v4);
      }
      break;
    default:
      break;
  }
  v5 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 160) = 0;
  *(_BYTE *)(v5 + 108) = 0;
  _dispatch_disk_handler_0();
  result = *(atomic_uint **)(a1 + 32);
  if (result[2] != 0x7FFFFFFF)
  {
    add_explicit = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      return (atomic_uint *)_os_object_dispose(result, v6);
    }
  }
  return result;
}

atomic_uint *_dispatch_disk_cleanup_operations_0(atomic_uint *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((_QWORD *)result + 6);
  if (v3)
  {
    v4 = (uint64_t)result;
    do
    {
      v5 = *(_QWORD *)(v3 + 240);
      if (!a2 || *(_QWORD *)(v3 + 136) == a2)
        result = _dispatch_disk_complete_operation_0(v4, v3);
      v3 = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t ___dispatch_fd_entry_init_async_block_invoke_0(uint64_t a1)
{
  int v2;
  uint64_t (**v3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  atomic_uint *v8;
  atomic_uint *v9;
  atomic_uint *v10;
  atomic_uint *v11;
  uint64_t (*v13[6])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v14[5])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v15;
  uint64_t (*v16[5])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*aBlock[5])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v18;

  v2 = *(_DWORD *)(a1 + 40);
  v3 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&_dispatch_io_fds[v2 & 0x3F];
  v4 = *v3;
  v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
  if (*v3)
  {
    while (*(_DWORD *)v4 != v2)
    {
      v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*((_QWORD *)v4 + 14);
      if (!v4)
        goto LABEL_4;
    }
    dispatch_suspend_VARIANT_armv81(*((_QWORD *)v4 + 8));
  }
  else
  {
LABEL_4:
    v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))_dispatch_fd_entry_create_0((__objc2_class **)_dispatch_io_fds_lockq);
    v4 = v6;
    *(_DWORD *)v6 = v2;
    v7 = *v3;
    *((_QWORD *)v6 + 14) = *v3;
    if (v7)
      *((_QWORD *)v7 + 15) = (char *)v6 + 112;
    *v3 = v6;
    *((_QWORD *)v6 + 15) = v3;
    *((_QWORD *)v6 + 9) = dispatch_queue_create_VARIANT_armv81("com.apple.libdispatch-io.barrierq", 0);
    *((_QWORD *)v4 + 10) = dispatch_group_create_VARIANT_armv81();
    v8 = (atomic_uint *)*((_QWORD *)v4 + 9);
    aBlock[0] = v5;
    aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
    aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_fd_entry_create_with_fd_block_invoke_0;
    aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_72_0;
    v18 = v2;
    aBlock[4] = v4;
    dispatch_async_VARIANT_armv81(v8, aBlock);
    v9 = (atomic_uint *)*((_QWORD *)v4 + 8);
    v16[0] = v5;
    v16[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
    v16[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_fd_entry_create_with_fd_block_invoke_3_0;
    v16[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_74_0;
    v16[4] = v4;
    dispatch_async_VARIANT_armv81(v9, v16);
    v10 = (atomic_uint *)*((_QWORD *)v4 + 8);
    v14[0] = v5;
    v14[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
    v14[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_fd_entry_create_with_fd_block_invoke_5_0;
    v14[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_75_0;
    v14[4] = v4;
    v15 = v2;
    dispatch_async_VARIANT_armv81(v10, v14);
  }
  v11 = (atomic_uint *)*((_QWORD *)v4 + 9);
  v13[0] = v5;
  v13[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
  v13[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_fd_entry_init_async_block_invoke_2_0;
  v13[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&unk_1E1E88B00;
  v13[4] = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  v13[5] = v4;
  return dispatch_async_VARIANT_armv81(v11, v13);
}

uint64_t ___dispatch_fd_entry_init_async_block_invoke_2_0(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return dispatch_resume_VARIANT_armv81(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 64));
}

_QWORD *_dispatch_fd_entry_create_0(__objc2_class **a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = _dispatch_calloc(1uLL, 0x80uLL);
  v3 = dispatch_queue_create_with_target_V2_VARIANT_armv81("com.apple.libdispatch-io.closeq", 0, a1);
  v2[8] = v3;
  dispatch_suspend_VARIANT_armv81(v3);
  return v2;
}

uint64_t ___dispatch_fd_entry_create_with_fd_block_invoke_0(uint64_t a1)
{
  unint64_t StatusReg;
  uint64_t result;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  int st_dev_high;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t (*aBlock[5])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v22;
  stat v23;

  memset(&v23.st_uid, 0, 128);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)&v23.st_dev = *(_OWORD *)&v23.st_blksize;
  while (1)
  {
    result = fstat(*(_DWORD *)(a1 + 40), &v23);
    if ((_DWORD)result != -1)
      break;
    v4 = **(_DWORD **)(StatusReg + 8);
    if (v4 != 4)
    {
      if (v4)
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 32) + 24) = v4;
        return result;
      }
      break;
    }
  }
  v5 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v5 + 32) = v23.st_dev;
  *(_WORD *)(v5 + 36) = v23.st_mode;
  v6 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    v7 = fcntl_NOCANCEL();
    if (v7 != -1)
      break;
    v8 = **(_DWORD **)(v6 + 8);
    if (v8 != 4)
    {
      if (v8)
        _dispatch_bug(1471, v8);
      break;
    }
  }
  if ((v23.st_mode & 0xF000) == 0x1000)
  {
    v9 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      if (fcntl_NOCANCEL() != -1)
      {
        v12 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        do
        {
          v13 = fcntl_NOCANCEL();
          if (v13 != -1)
          {
            v14 = v13;
            goto LABEL_22;
          }
          v10 = **(_DWORD **)(v12 + 8);
        }
        while (v10 == 4);
        if (!v10)
          goto LABEL_21;
        v11 = 1484;
        goto LABEL_42;
      }
      v10 = **(_DWORD **)(v9 + 8);
    }
    while (v10 == 4);
    if (!v10)
      goto LABEL_21;
    v11 = 1477;
LABEL_42:
    _dispatch_bug(v11, v10);
  }
LABEL_21:
  v14 = -1;
LABEL_22:
  if ((v23.st_mode & 0xF000) == 0x8000)
  {
    if (v7 != -1)
    {
      v15 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (fcntl_NOCANCEL() == -1)
      {
        v16 = **(_DWORD **)(v15 + 8);
        if (v16 != 4)
        {
          if (v16)
          {
            _dispatch_bug(1496, v16);
            v7 = -1;
          }
          break;
        }
      }
    }
    st_dev_high = HIBYTE(v23.st_dev);
    dispatch_suspend_VARIANT_armv81(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 72));
    if (_dispatch_io_init_pred != -1)
      dispatch_once_f_VARIANT_armv81(&_dispatch_io_init_pred, 0, _dispatch_io_queues_init_0);
    aBlock[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
    aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
    aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_fd_entry_create_with_fd_block_invoke_2_0;
    aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_71_0;
    aBlock[4] = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
    v22 = st_dev_high;
    result = dispatch_async_VARIANT_armv81((atomic_uint *)_dispatch_io_devs_lockq, aBlock);
  }
  else
  {
    if (v7 != -1)
    {
      v18 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (fcntl_NOCANCEL() == -1)
      {
        v19 = **(_DWORD **)(v18 + 8);
        if (v19 != 4)
        {
          if (v19)
          {
            _dispatch_bug(1516, v19);
            v7 = -1;
          }
          break;
        }
      }
    }
    result = (uint64_t)_dispatch_stream_init_0(*(_QWORD *)(a1 + 32));
  }
  v20 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v20 + 16) = v7;
  *(_DWORD *)(v20 + 20) = v14;
  return result;
}

uint64_t ___dispatch_fd_entry_create_with_fd_block_invoke_2_0(uint64_t a1)
{
  _dispatch_disk_init_0(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 40));
  return dispatch_resume_VARIANT_armv81(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 72));
}

uint64_t _dispatch_disk_init_0(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char __str[45];
  uint64_t v10;

  v3 = result;
  v10 = *MEMORY[0x1E0C874D8];
  v4 = (uint64_t *)((char *)&_dispatch_io_devs + 8 * (a2 & 0x3F));
  v5 = *v4;
  if (*v4)
  {
    while (*(_DWORD *)(v5 + 104) != a2)
    {
      v5 = *(_QWORD *)(v5 + 112);
      if (!v5)
        goto LABEL_4;
    }
    if (*(_DWORD *)(v5 + 8) != 0x7FFFFFFF
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed) <= 0)
    {
      dispatch_set_target_queue_VARIANT_mp_cold_2();
    }
  }
  else
  {
LABEL_4:
    v6 = qword_1EDF51AD0;
    v5 = _dispatch_object_alloc_VARIANT_mp(OS_dispatch_disk, 8 * qword_1EDF51AD0 + 136);
    *(_QWORD *)(v5 + 16) = -1985229329;
    *(_DWORD *)(v5 + 12) = 0;
    *(_QWORD *)(v5 + 128) = v6;
    *(_QWORD *)(v5 + 24) = &unk_1ECCEA080;
    *(_DWORD *)(v5 + 104) = a2;
    *(_QWORD *)(v5 + 48) = 0;
    *(_QWORD *)(v5 + 56) = v5 + 48;
    *(_QWORD *)(v5 + 64) = 0;
    snprintf(__str, 0x2DuLL, "com.apple.libdispatch-io.deviceq.%d", a2);
    result = dispatch_queue_create_VARIANT_armv81(__str, 0);
    *(_QWORD *)(v5 + 72) = result;
    v7 = *v4;
    *(_QWORD *)(v5 + 112) = *v4;
    if (v7)
      *(_QWORD *)(v7 + 120) = v5 + 112;
    *v4 = v5;
    *(_QWORD *)(v5 + 120) = v4;
  }
  *(_QWORD *)(v3 + 96) = 0;
  v8 = v3 + 96;
  *(_QWORD *)(v8 - 40) = v5;
  *(_QWORD *)(v8 + 8) = v8;
  return result;
}

void *_dispatch_stream_init_0(uint64_t a1)
{
  uint64_t v2;
  char v3;
  char v4;
  char *v5;
  void *v6;
  void *result;

  v2 = 0;
  v3 = 1;
  do
  {
    v4 = v3;
    v5 = (char *)_dispatch_calloc(1uLL, 0x40uLL);
    v6 = (void *)dispatch_queue_create_with_target_V2_VARIANT_armv81("com.apple.libdispatch-io.streamq", 0, (__objc2_class **)&unk_1ECCEA080);
    *(_QWORD *)v5 = v6;
    result = dispatch_set_context_VARIANT_armv81(v6, v5);
    v3 = 0;
    *((_QWORD *)v5 + 6) = 0;
    *((_QWORD *)v5 + 7) = v5 + 48;
    *((_QWORD *)v5 + 4) = 0;
    *((_QWORD *)v5 + 5) = v5 + 32;
    *(_QWORD *)(a1 + 8 * v2 + 40) = v5;
    v2 = 1;
  }
  while ((v4 & 1) != 0);
  return result;
}

void ___dispatch_fd_entry_create_with_fd_block_invoke_3_0(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t (*aBlock[5])(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 56);
  if (v2)
  {
    aBlock[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C87450];
    aBlock[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x40000000;
    aBlock[2] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))___dispatch_fd_entry_create_with_fd_block_invoke_4_0;
    aBlock[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&__block_descriptor_tmp_73_0;
    aBlock[4] = v2;
    dispatch_async_VARIANT_armv81((atomic_uint *)_dispatch_io_devs_lockq, aBlock);
  }
  else
  {
    _dispatch_stream_dispose_0(*(_QWORD *)(a1 + 32), 0);
    _dispatch_stream_dispose_0(*(_QWORD *)(a1 + 32), 1u);
  }
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(v3 + 112);
  if (v4)
  {
    *(_QWORD *)(v4 + 120) = *(_QWORD *)(v3 + 120);
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(v3 + 112);
  }
  **(_QWORD **)(v3 + 120) = v4;
}

void _dispatch_stream_dispose_0(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  const char *v3;
  const char *v4;

  v2 = *(_QWORD *)(a1 + 8 * a2 + 40);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      dispatch_suspend_VARIANT_armv81(*(_QWORD *)(a1 + 64));
      dispatch_source_cancel_VARIANT_armv81(*(atomic_uint **)(v2 + 8));
      dispatch_resume_VARIANT_armv81(*(_QWORD *)(v2 + 8));
      dispatch_release_VARIANT_armv81(*(atomic_uint **)(v2 + 8), v3);
    }
    dispatch_set_context_VARIANT_armv81(*(void **)v2, 0);
    dispatch_release_VARIANT_armv81(*(atomic_uint **)v2, v4);
    free((void *)v2);
  }
}

atomic_uint *___dispatch_fd_entry_create_with_fd_block_invoke_4_0(uint64_t a1, const char *a2)
{
  atomic_uint *result;
  int add_explicit;

  result = *(atomic_uint **)(a1 + 32);
  if (result[2] != 0x7FFFFFFF)
  {
    add_explicit = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      return (atomic_uint *)_os_object_dispose(result, a2);
    }
  }
  return result;
}

void ___dispatch_fd_entry_create_with_fd_block_invoke_5_0(uint64_t a1, const char *a2)
{
  const char *v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  unint64_t StatusReg;
  unint64_t v8;
  uint64_t v9;

  dispatch_release_VARIANT_armv81(*(atomic_uint **)(*(_QWORD *)(a1 + 32) + 64), a2);
  dispatch_release_VARIANT_armv81(*(atomic_uint **)(*(_QWORD *)(a1 + 32) + 72), v3);
  dispatch_release_VARIANT_armv81(*(atomic_uint **)(*(_QWORD *)(a1 + 32) + 80), v4);
  v6 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v6 + 16) != -1)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (fcntl_NOCANCEL() == -1 && **(_DWORD **)(StatusReg + 8) == 4)
      ;
    v6 = *(_QWORD *)(a1 + 32);
  }
  if (*(_DWORD *)(v6 + 20) != -1)
  {
    v8 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (fcntl_NOCANCEL() == -1 && **(_DWORD **)(v8 + 8) == 4)
      ;
    v6 = *(_QWORD *)(a1 + 32);
  }
  v9 = *(_QWORD *)(v6 + 88);
  if (v9)
  {
    *(_QWORD *)(v9 + 112) = 0;
    dispatch_release_VARIANT_armv81(*(atomic_uint **)(*(_QWORD *)(a1 + 32) + 88), v5);
    v6 = *(_QWORD *)(a1 + 32);
  }
  free((void *)v6);
}

uint64_t ___dispatch_fd_entry_create_with_path_block_invoke_0(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(unsigned int **)(a1 + 32);
  if (!*((_QWORD *)v2 + 7))
  {
    _dispatch_stream_dispose_0(*(_QWORD *)(a1 + 32), 0);
    _dispatch_stream_dispose_0(*(_QWORD *)(a1 + 32), 1u);
    v2 = *(unsigned int **)(a1 + 32);
  }
  result = *v2;
  if ((_DWORD)result != -1)
  {
    if (v2[7])
      result = guarded_close_np();
    else
      result = close_NOCANCEL();
  }
  v4 = **(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  if (v4)
    *(_QWORD *)(v4 + 112) = 0;
  return result;
}

void ___dispatch_fd_entry_create_with_path_block_invoke_2_0(uint64_t a1, const char *a2)
{
  const char *v3;
  const char *v4;

  dispatch_release_VARIANT_armv81(*(atomic_uint **)(*(_QWORD *)(a1 + 32) + 64), a2);
  dispatch_release_VARIANT_armv81(*(atomic_uint **)(*(_QWORD *)(a1 + 32) + 72), v3);
  dispatch_release_VARIANT_armv81(*(atomic_uint **)(*(_QWORD *)(a1 + 32) + 80), v4);
  free(*(void **)(*(_QWORD *)(a1 + 32) + 8));
  free(*(void **)(a1 + 32));
}

void ___dispatch_operation_deliver_data_block_invoke_0(uint64_t a1)
{
  const char *v2;
  atomic_uint *v3;
  int add_explicit;

  if ((*(_DWORD *)(a1 + 64) & 2) != 0
    && !*(_DWORD *)(a1 + 68)
    && *(_DWORD *)(a1 + 72)
    && dispatch_data_get_size_VARIANT_armv81(*(_QWORD *)(a1 + 40)))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v3 = *(atomic_uint **)(a1 + 48);
  if (v3[2] != 0x7FFFFFFF)
  {
    add_explicit = atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1)
        _os_object_allows_weak_reference_VARIANT_mp_cold_1();
      _os_object_dispose(v3, v2);
    }
  }
  dispatch_resume_VARIANT_armv81(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 64));
  _dispatch_objc_release(*(id *)(a1 + 40));
}

void _dispatch_data_init_with_bytes_VARIANT_armv81(_QWORD *a1, mach_vm_address_t a2, mach_vm_size_t a3, void *aBlock)
{
  mach_vm_size_t v4;
  mach_vm_address_t v5;
  void *v7;

  v4 = a3;
  v5 = a2;
  if (!a2 || !a3)
  {
    if (aBlock)
    {
      v7 = _dispatch_Block_copy(aBlock);
      _dispatch_data_destroy_buffer_0(v5, v4, 0, v7);
    }
    v5 = 0;
    v4 = 0;
    aBlock = &__block_literal_global_27;
  }
  a1[5] = aBlock;
  a1[6] = v4;
  a1[4] = v5;
}

void _dispatch_data_destroy_buffer_0(mach_vm_address_t address, mach_vm_size_t size, _DWORD *a3, void *a4)
{
  _DWORD *v4;

  if (&__block_literal_global == a4)
  {
    free((void *)address);
  }
  else if (&__block_literal_global_27 != a4)
  {
    if (&__block_literal_global_30 == a4)
    {
      mach_vm_deallocate(*MEMORY[0x1E0C883F0], address, size);
    }
    else
    {
      if (a3)
        v4 = a3;
      else
        v4 = &unk_1ECCEA080;
      dispatch_async_f_VARIANT_armv81(v4, (uint64_t)a4, (uint64_t)_dispatch_call_block_and_release);
    }
  }
}

__objc2_class **dispatch_data_create_VARIANT_armv81(void *__src, size_t __n, _DWORD *a3, void *aBlock)
{
  const void *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  size_t v13;

  v7 = __src;
  if (__src && __n)
  {
    if (aBlock)
    {
      if (&__block_literal_global_33 != aBlock)
      {
        v8 = (_QWORD *)_dispatch_object_alloc_bridged_VARIANT_mp(OS_dispatch_data, 64);
        v8[7] = 0;
        v9 = _dispatch_Block_copy(aBlock);
        goto LABEL_16;
      }
      v13 = __n + 64;
      if (__n < 0xFFFFFFFFFFFFFFC0)
      {
        v8 = (_QWORD *)_dispatch_object_alloc_bridged_VARIANT_mp(OS_dispatch_data, v13);
        v8[7] = 0;
      }
      else
      {
        v8 = 0;
      }
      v12 = v8 + 8;
      memcpy(v8 + 8, v7, __n);
      v9 = &__block_literal_global_27;
    }
    else
    {
      v11 = malloc_type_malloc(__n, 0xF1E95671uLL);
      if (!v11)
        return 0;
      v12 = v11;
      memcpy(v11, v7, __n);
      v8 = (_QWORD *)_dispatch_object_alloc_bridged_VARIANT_mp(OS_dispatch_data, 64);
      v8[7] = 0;
      v9 = &__block_literal_global;
    }
    v7 = v12;
LABEL_16:
    v8[5] = v9;
    v8[6] = __n;
    v8[4] = v7;
    if (a3)
    {
      if (a3[2] != 0x7FFFFFFF && (int)atomic_fetch_add_explicit(a3 + 2, 1u, memory_order_relaxed) <= 0)
        dispatch_set_target_queue_VARIANT_mp_cold_2();
      v8[1] = a3;
    }
    return (__objc2_class **)v8;
  }
  if (aBlock)
  {
    v10 = _dispatch_Block_copy(aBlock);
    _dispatch_data_destroy_buffer_0((mach_vm_address_t)v7, __n, a3, v10);
  }
  return &_dispatch_data_empty;
}

__objc2_class **dispatch_data_create_f_VARIANT_armv81(void *a1, size_t a2, _DWORD *a3, _QWORD *a4)
{
  _QWORD v8[6];

  if (a4)
  {
    if (&__block_literal_global != (_UNKNOWN *)a4
      && &__block_literal_global_27 != (_UNKNOWN *)a4
      && &__block_literal_global_30 != (_UNKNOWN *)a4
      && &__block_literal_global_33 != (_UNKNOWN *)a4)
    {
      v8[0] = MEMORY[0x1E0C87450];
      v8[1] = 0x40000000;
      v8[2] = __dispatch_data_create_f_VARIANT_armv81_block_invoke;
      v8[3] = &__block_descriptor_tmp_2;
      v8[4] = a4;
      v8[5] = a1;
      a4 = v8;
    }
  }
  return dispatch_data_create_VARIANT_armv81(a1, a2, a3, a4);
}

__objc2_class **dispatch_data_create_alloc_VARIANT_armv81(unint64_t a1, __objc2_class ***a2)
{
  __objc2_class **result;
  __objc2_class **v5;

  if (!a1)
  {
    v5 = 0;
    result = &_dispatch_data_empty;
    if (!a2)
      return result;
    goto LABEL_6;
  }
  if (a1 < 0xFFFFFFFFFFFFFFC0)
  {
    result = (__objc2_class **)_dispatch_object_alloc_bridged_VARIANT_mp(OS_dispatch_data, a1 + 64);
    result[7] = 0;
  }
  else
  {
    result = 0;
  }
  v5 = result + 8;
  result[5] = (__objc2_class *)&__block_literal_global_27;
  result[6] = (__objc2_class *)a1;
  result[4] = (__objc2_class *)(result + 8);
  if (a2)
LABEL_6:
    *a2 = v5;
  return result;
}

void _dispatch_data_dispose_VARIANT_armv81(uint64_t a1)
{
  unint64_t v2;
  void **v3;
  void *v4;
  unint64_t v5;

  if (*(_QWORD *)(a1 + 56))
  {
    v2 = 0;
    v3 = (void **)(a1 + 64);
    do
    {
      v4 = *v3;
      v3 += 3;
      _dispatch_objc_release(v4);
      ++v2;
      v5 = *(_QWORD *)(a1 + 56);
      if (v5 <= 1)
        v5 = 1;
    }
    while (v2 < v5);
    free(*(void **)(a1 + 32));
  }
  else
  {
    _dispatch_data_destroy_buffer_0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(_DWORD **)(a1 + 8), *(void **)(a1 + 40));
  }
}

atomic_uint *_dispatch_data_set_target_queue_VARIANT_armv81(uint64_t a1, const char *a2)
{
  const char *v2;
  atomic_uint *result;
  int add_explicit;

  v2 = (const char *)&unk_1ECCEA080;
  if (a2)
    v2 = a2;
  if (*((_DWORD *)v2 + 2) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)v2 + 2, 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_VARIANT_mp_cold_2();
  }
  result = (atomic_uint *)atomic_exchange_explicit((atomic_ullong *volatile)(a1 + 24), (unint64_t)v2, memory_order_release);
  if (result)
  {
    if (result[2] != 0x7FFFFFFF)
    {
      add_explicit = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release);
      if (add_explicit <= 1)
      {
        if (add_explicit != 1)
          _os_object_allows_weak_reference_VARIANT_mp_cold_1();
        return (atomic_uint *)_os_object_dispose(result, a2);
      }
    }
  }
  return result;
}

uint64_t dispatch_data_get_size_VARIANT_armv81(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *dispatch_data_create_concat_VARIANT_armv81(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v2 = a2;
  v3 = a1[6];
  if (!v3)
    goto LABEL_15;
  v5 = a2[6];
  if (!v5)
  {
    v2 = a1;
LABEL_15:
    _dispatch_objc_retain(v2);
    return v2;
  }
  v6 = a1[7];
  if (v6 <= 1)
    v7 = 1;
  else
    v7 = a1[7];
  v8 = a2[7];
  if (v8 <= 1)
    v8 = 1;
  v9 = 0;
  v10 = v7 + v8;
  if (!__CFADD__(v7, v8))
  {
    if (is_mul_ok(v10, 0x18uLL) && 24 * v10 < 0xFFFFFFFFFFFFFFC0)
    {
      v9 = (_QWORD *)_dispatch_object_alloc_bridged_VARIANT_mp(OS_dispatch_data, 24 * v10 + 64);
      v9[7] = v10;
      v5 = v2[6];
      v3 = a1[6];
      v6 = a1[7];
    }
    v9[6] = v5 + v3;
    if (v6)
    {
      memcpy(v9 + 8, a1 + 8, 24 * v6);
    }
    else
    {
      v11 = a1[6];
      v9[9] = 0;
      v9[10] = v11;
      v9[8] = a1;
    }
    v12 = v2[7];
    v13 = a1[7];
    if (v13 <= 1)
      v13 = 1;
    if (v12)
    {
      memcpy(&v9[3 * v13 + 8], v2 + 8, 24 * v12);
    }
    else
    {
      v14 = v2[6];
      v15 = &v9[3 * v13];
      v15[9] = 0;
      v15[10] = v14;
      v15[8] = v2;
    }
    v16 = 0;
    v17 = 8;
    do
    {
      _dispatch_objc_retain((id)v9[v17]);
      ++v16;
      v18 = v9[7];
      if (v18 <= 1)
        v18 = 1;
      v17 += 3;
    }
    while (v16 < v18);
  }
  return v9;
}

__objc2_class **dispatch_data_create_subrange_VARIANT_armv81(__objc2_class *a1, __objc2_class *a2, __objc2_class *a3)
{
  __objc2_class **p_isa;
  __objc2_class *v5;
  __objc2_class *superclass;
  __objc2_class *v7;
  unint64_t cache;
  uint64_t v9;
  __objc2_class **p_superclass;
  __objc2_class *v11;
  __objc2_class *v12;
  __objc2_class *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  __objc2_class *v19;
  uint64_t v20;

  p_isa = &_dispatch_data_empty;
  if (!a3)
    return p_isa;
  v5 = a1;
  superclass = a1[1].superclass;
  while (1)
  {
    if (superclass <= a2)
      return p_isa;
    v7 = (__objc2_class *)((char *)superclass - (char *)a2);
    if ((char *)superclass - (char *)a2 >= (unint64_t)a3)
    {
      v7 = a3;
      if (superclass == a3)
      {
        p_isa = &v5->isa;
        goto LABEL_18;
      }
    }
    cache = (unint64_t)v5[1].cache;
    if (!cache)
    {
      p_isa = (__objc2_class **)_dispatch_object_alloc_bridged_VARIANT_mp(OS_dispatch_data, 88);
      p_isa[6] = v7;
      p_isa[7] = (__objc2_class *)1;
      p_isa[9] = a2;
      p_isa[10] = v7;
      p_isa[8] = v5;
LABEL_18:
      _dispatch_objc_retain(v5);
      return p_isa;
    }
    v9 = 0;
    p_superclass = &v5[3].superclass;
    v11 = a2;
    while (1)
    {
      v12 = *(p_superclass - 6);
      if (v11 < v12)
        break;
      ++v9;
      p_superclass += 3;
      v11 = (__objc2_class *)((char *)v11 - (uint64_t)v12);
      if (cache == v9)
        dispatch_data_create_subrange_VARIANT_mp_cold_1(cache);
    }
    v13 = (__objc2_class *)((char *)v7 + (_QWORD)v11 - (char *)v12);
    if ((char *)v7 + (unint64_t)v11 > (char *)v12)
      break;
    if (!v7)
      return p_isa;
    v5 = *(p_superclass - 8);
    a2 = (__objc2_class *)((char *)v11 + (_QWORD)*(p_superclass - 7));
    superclass = v5[1].superclass;
    a3 = v7;
  }
  v14 = cache - v9;
  if ((__objc2_class *)((char *)a2 + (_QWORD)v7) == superclass)
  {
    v13 = 0;
    v15 = cache - v9;
  }
  else if (v9 + 1 >= cache)
  {
    v15 = 1;
  }
  else
  {
    v16 = (unint64_t)*(p_superclass - 3);
    v15 = 2;
    if ((unint64_t)v13 > v16)
    {
      v17 = (unint64_t *)p_superclass;
      do
      {
        if (v14 == v15)
          dispatch_data_create_subrange_VARIANT_mp_cold_1(cache);
        v13 = (__objc2_class *)((char *)v13 - v16);
        ++v15;
        v18 = *v17;
        v17 += 3;
        v16 = v18;
      }
      while ((unint64_t)v13 > v18);
    }
  }
  p_isa = (__objc2_class **)_dispatch_object_alloc_bridged_VARIANT_mp(OS_dispatch_data, 24 * v15 + 64);
  p_isa[6] = v7;
  p_isa[7] = (__objc2_class *)v15;
  memcpy(p_isa + 8, p_superclass - 8, 24 * v15);
  if (v11)
  {
    v19 = (__objc2_class *)((char *)p_isa[10] - (char *)v11);
    p_isa[9] = (__objc2_class *)((char *)v11 + (_QWORD)p_isa[9]);
    p_isa[10] = v19;
  }
  if ((__objc2_class *)((char *)a2 + (_QWORD)v7) != superclass)
    p_isa[3 * v15 + 7] = v13;
  if (v15)
  {
    v20 = 8;
    do
    {
      _dispatch_objc_retain(p_isa[v20]);
      v20 += 3;
      --v15;
    }
    while (v15);
  }
  return p_isa;
}

__objc2_class **dispatch_data_create_map_VARIANT_armv81(__objc2_class **a1, _QWORD *a2, size_t *a3)
{
  size_t v5;
  __objc2_class **VARIANT_armv81;
  __objc2_class *v7;
  __objc2_class *v8;
  __objc2_class *v9;
  __objc2_class_ro *info;
  char *v11;
  char *v12;

  v5 = (size_t)a1[6];
  if (!v5)
  {
    v11 = 0;
    VARIANT_armv81 = &_dispatch_data_empty;
    if (a2)
      goto LABEL_14;
    goto LABEL_15;
  }
  VARIANT_armv81 = a1;
  v7 = a1[7];
  if (v7 == (__objc2_class *)1)
  {
    v9 = a1[8];
    v8 = a1[9];
    if (!v9[1].cache)
      goto LABEL_4;
  }
  else
  {
    v8 = 0;
    v9 = (__objc2_class *)a1;
    if (!v7)
    {
LABEL_4:
      info = v9->info;
      goto LABEL_5;
    }
  }
  info = v9->info;
  if (info)
  {
LABEL_5:
    v11 = (char *)v8 + (_QWORD)info;
    if ((__objc2_class *)((char *)v8 + (_QWORD)info))
    {
      _dispatch_objc_retain(a1);
      if (!a2)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  v12 = (char *)_dispatch_data_flatten_0(a1);
  v11 = v12;
  if (v12)
  {
    VARIANT_armv81 = dispatch_data_create_VARIANT_armv81(v12, v5, 0, &__block_literal_global);
    if (!a2)
      goto LABEL_15;
    goto LABEL_14;
  }
  v5 = 0;
  VARIANT_armv81 = 0;
  if (a2)
LABEL_14:
    *a2 = v11;
LABEL_15:
  if (a3)
    *a3 = v5;
  return VARIANT_armv81;
}

void *_dispatch_data_flatten_0(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD v6[5];

  v2 = malloc_type_malloc(a1[6], 0x4CB264A7uLL);
  v3 = v2;
  if (v2)
  {
    v6[0] = MEMORY[0x1E0C87450];
    v6[1] = 0x40000000;
    v6[2] = ___dispatch_data_flatten_block_invoke_0;
    v6[3] = &__block_descriptor_tmp_12_2;
    v6[4] = v2;
    v4 = a1[6];
    if (v4)
      _dispatch_data_apply(a1, 0, 0, v4, (uint64_t)v6, (uint64_t)___dispatch_data_flatten_block_invoke_0);
  }
  return v3;
}

char *dispatch_data_get_flattened_bytes_4libxpc_VARIANT_armv81(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  char *v6;

  if (!a1[6])
    return 0;
  v1 = a1;
  v2 = a1[7];
  if (v2 == 1)
  {
    v1 = (_QWORD *)a1[8];
    v3 = a1[9];
    if (!v1[7])
      goto LABEL_4;
  }
  else
  {
    v3 = 0;
    if (!v2)
    {
LABEL_4:
      v4 = v1[4];
      goto LABEL_5;
    }
  }
  v4 = v1[4];
  if (v4)
  {
LABEL_5:
    result = (char *)(v4 + v3);
    if (v4 + v3)
      return result;
  }
  result = (char *)_dispatch_data_flatten_0(v1);
  if (result)
  {
    v6 = 0;
    atomic_compare_exchange_strong_explicit(v1 + 4, (unint64_t *)&v6, (unint64_t)result, memory_order_release, memory_order_relaxed);
    if (v6)
    {
      free(result);
      result = v6;
    }
    result += v3;
  }
  return result;
}

uint64_t dispatch_data_apply_f_VARIANT_armv81(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a1[6];
  if (v3)
    return _dispatch_data_apply(a1, 0, 0, v3, a2, a3);
  else
    return 1;
}

uint64_t dispatch_data_apply_VARIANT_armv81(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a1[6];
  if (v2)
    return _dispatch_data_apply(a1, 0, 0, v2, a2, *(_QWORD *)(a2 + 16));
  else
    return 1;
}

__objc2_class **dispatch_data_copy_region_VARIANT_armv81(_QWORD *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *i;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;

  v3 = a1[6];
  if (v3 <= a2)
  {
    *a3 = v3;
    return &_dispatch_data_empty;
  }
  v4 = a1;
  v5 = 0;
  v6 = 0;
  *a3 = 0;
  v7 = v4[6];
LABEL_4:
  if (v4[6] == v7)
    v8 = v4;
  else
    v8 = 0;
LABEL_7:
  v9 = v4[7];
  if (v9 == 1)
  {
    v16 = v4 + 8;
    v4 = (_QWORD *)v4[8];
    v6 += v16[1];
    v9 = v4[7];
    if (!v9)
      goto LABEL_9;
LABEL_24:
    v10 = v4[4];
    if (!v10)
      goto LABEL_11;
    goto LABEL_10;
  }
  if (v9)
    goto LABEL_24;
LABEL_9:
  v10 = v4[4];
LABEL_10:
  if (!(v10 + v6))
  {
LABEL_11:
    v11 = 0;
    if (v9 <= 1)
      v12 = 1;
    else
      v12 = v9;
    for (i = v4 + 10; ; i += 3)
    {
      v14 = *i;
      if (v6 >= *i)
      {
        v6 -= *i;
      }
      else
      {
        v7 = v14 - v6;
        v15 = v14 - v6 + v11;
        if (v15 > a2)
        {
          v4 = (_QWORD *)*(i - 2);
          v6 += *(i - 1);
          v5 += v11;
          *a3 = v5;
          a2 -= v11;
          if (!v6)
            goto LABEL_4;
          v8 = 0;
          goto LABEL_7;
        }
        v6 = 0;
        v11 = v15;
      }
      if (!--v12)
        dispatch_data_copy_region_VARIANT_mp_cold_1(v5, v11);
    }
  }
  if (v8)
  {
    _dispatch_objc_retain(v8);
  }
  else
  {
    _dispatch_objc_retain(v4);
    if (v6 || v4[6] != v7)
    {
      v8 = (_QWORD *)_dispatch_object_alloc_bridged_VARIANT_mp(OS_dispatch_data, 88);
      v8[6] = v7;
      v8[7] = 1;
      v8[9] = v6;
      v8[10] = v7;
      v8[8] = v4;
    }
    else
    {
      return (__objc2_class **)v4;
    }
  }
  return (__objc2_class **)v8;
}

uint64_t dispatch_data_make_memory_entry_VARIANT_armv81(_QWORD *a1)
{
  memory_object_size_t v2;
  BOOL v3;
  mach_vm_address_t *v4;
  vm_map_t *v5;
  uint64_t v6;
  BOOL v7;
  kern_return_t v8;
  mach_vm_address_t v9;
  uint64_t v10;
  kern_return_t memory_entry_64;
  kern_return_t v12;
  uint64_t v13;
  _QWORD v15[5];
  mach_vm_address_t address;
  memory_object_size_t size;
  mach_port_t object_handle;

  object_handle = 0;
  size = 0;
  v2 = a1[6];
  v3 = a1[5] != (_QWORD)&__block_literal_global_30;
  v4 = (mach_vm_address_t *)MEMORY[0x1E0C88820];
  v5 = (vm_map_t *)MEMORY[0x1E0C883F0];
  v6 = MEMORY[0x1E0C87450];
  while (1)
  {
    v7 = v3;
    if (v3)
    {
      address = *v4;
      v8 = mach_vm_allocate(*v5, &address, v2, 1);
      if (v8)
      {
        if (v8 == 3)
          return object_handle;
        v13 = 704;
        goto LABEL_17;
      }
      v15[0] = v6;
      v15[1] = 0x40000000;
      v15[2] = __dispatch_data_make_memory_entry_VARIANT_armv81_block_invoke;
      v15[3] = &__block_descriptor_tmp_9_2;
      v9 = address;
      v15[4] = address;
      v10 = a1[6];
      if (v10)
      {
        _dispatch_data_apply(a1, 0, 0, v10, (uint64_t)v15, (uint64_t)__dispatch_data_make_memory_entry_VARIANT_armv81_block_invoke);
        v9 = address;
      }
    }
    else
    {
      v9 = a1[4];
      address = v9;
    }
    size = v2;
    memory_entry_64 = mach_make_memory_entry_64(*v5, &size, v9, 2097219, &object_handle, 0);
    if (memory_entry_64 == 18)
      memory_entry_64 = mach_make_memory_entry_64(*v5, &size, address, 67, &object_handle, 0);
    if (memory_entry_64)
      break;
    if (size >= v2)
      goto LABEL_19;
    v12 = mach_port_deallocate(*v5, object_handle);
    if (v12)
      _dispatch_bug(731, v12);
    v3 = 1;
    if (v7)
    {
      object_handle = 0;
      goto LABEL_20;
    }
  }
  _dispatch_bug(726, memory_entry_64);
  object_handle = 0;
LABEL_19:
  if (v7)
  {
LABEL_20:
    v8 = mach_vm_deallocate(*v5, address, v2);
    if (!v8)
      return object_handle;
    v13 = 740;
LABEL_17:
    _dispatch_bug(v13, v8);
  }
  return object_handle;
}

uint64_t ___dispatch_data_flatten_block_invoke_0(uint64_t a1, int a2, uint64_t a3, void *__src, size_t __n)
{
  memcpy((void *)(*(_QWORD *)(a1 + 32) + a3), __src, __n);
  return 1;
}

void *_dispatch_continuation_alloc_from_heap_VARIANT_armv81()
{
  void *result;

  if (_dispatch_continuation_alloc_init_pred != -1)
    dispatch_once_f_VARIANT_armv81(&_dispatch_continuation_alloc_init_pred, 0, (uint64_t (*)(void))_dispatch_continuation_alloc_init_0);
  if (_dispatch_use_dispatch_alloc)
    return (void *)_dispatch_alloc_continuation_alloc_0();
  while (1)
  {
    result = malloc_type_calloc(1uLL, 0x40uLL, 0x791BAC36uLL);
    if (result)
      break;
    _dispatch_temporary_resource_shortage();
  }
  return result;
}

unint64_t _dispatch_alloc_continuation_alloc_0()
{
  __int16 StatusReg;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  atomic_ullong *v4;
  atomic_ullong v5;
  unint64_t v6;
  atomic_ullong v7;
  BOOL v8;
  unint64_t result;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  atomic_ullong *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!_dispatch_main_heap)
    return _dispatch_alloc_continuation_from_heap_slow_0();
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  v1 = _dispatch_main_heap;
  v2 = *(_QWORD *)(_dispatch_main_heap + ((unint64_t)(StatusReg & 0xFFF) << 20) + 8);
  if (v2)
  {
    v3 = 0;
    while (2)
    {
      v4 = (atomic_ullong *)(v2 + 8 * v3);
      v5 = *v4;
      while (v5 != -1)
      {
        v6 = __clz(__rbit64(~v5));
        v7 = v5;
        atomic_compare_exchange_strong_explicit(v4, (unint64_t *)&v7, (1 << v6) | v5, memory_order_relaxed, memory_order_relaxed);
        v8 = v7 == v5;
        v5 = v7;
        if (v8)
        {
          v10 = ((unint64_t)v4 & 0xFFFFF) - 64;
          v11 = v10 >> 3;
          v12 = (v10 >> 9) & 0x3FFFFFF;
          result = ((((unint64_t)v4 & 0xFFFFFFFFFFF00000) + (v12 << 18)) & 0xFFFFFFFFFFFC0FFFLL | ((v11 & 0x3F) << 12))
                 + (v6 << 6)
                 + 0x4000;
          v13 = (atomic_ullong *)(((unint64_t)v4 & 0xFFFFFFFFFFF00000) + 8 * v12 + 16);
          v14 = *(_QWORD *)(((unint64_t)v4 & 0xFFFFFFFFFFF00000) + 8 * v12 + 0x10);
          v15 = 1 << v11;
          do
          {
            if (*v4 != -1)
              break;
            v16 = v14;
            atomic_compare_exchange_strong_explicit(v13, (unint64_t *)&v16, v14 | v15, memory_order_relaxed, memory_order_relaxed);
            v8 = v16 == v14;
            v14 = v16;
          }
          while (!v8);
          return result;
        }
      }
      if (++v3 != 4)
        continue;
      break;
    }
    v1 = _dispatch_main_heap;
  }
  result = _dispatch_alloc_continuation_from_heap_0(v1);
  if (!result)
    return _dispatch_alloc_continuation_from_heap_slow_0();
  return result;
}

void _dispatch_continuation_free_to_heap_VARIANT_armv81(uint64_t a1)
{
  if (_dispatch_use_dispatch_alloc)
    _dispatch_alloc_continuation_free_0(a1);
  else
    free((void *)a1);
}

void _dispatch_alloc_continuation_free_0(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  atomic_ullong *v8;
  uint64_t v9;

  *(_QWORD *)a1 = 0;
  v1 = a1 - (a1 & 0xFFFFFFFFFFF00000);
  v2 = (v1 - 0x4000) >> 6;
  v3 = ((v1 - 0x4000) >> 18) & 0xFFFFF;
  v4 = (a1 & 0xFFFFFFFFFFF00000) + 8 * v3 + 16;
  v5 = (a1 & 0xFFFFFFFFFFF00000) + (v3 << 9) + 8 * ((v2 >> 6) & 0x3F) + 64;
  v6 = (v1 - 1664) >> 6;
  v7 = v6 >> 6;
  if ((a1 & 0xFC000) != 0)
  {
    v8 = (atomic_ullong *)v4;
  }
  else
  {
    v5 = (a1 & 0xFFFFFFFFFFF00000) + 8 * v7 + 1600;
    v8 = 0;
  }
  if ((a1 & 0xFC000) != 0)
    LOBYTE(v7) = (v2 >> 6) & 0x3F;
  else
    LOBYTE(v2) = v6;
  v9 = 1 << v2;
  if ((v9 & *(_QWORD *)v5) != 0)
  {
    v5 = atomic_fetch_and_explicit((atomic_ullong *volatile)v5, ~v9, memory_order_release);
    if (!v8)
      return;
  }
  else
  {
    v8 = *(atomic_ullong **)v5;
    qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption: failed to clear bit exclusively";
    qword_1EDF52D38 = (uint64_t)v8;
    __break(1u);
  }
  atomic_fetch_and_explicit(v8, ~(1 << v7), memory_order_release);
  if ((v5 & ~v9) == 0)
    _dispatch_alloc_maybe_madvise_page_0(a1);
}

const char *_dispatch_continuation_alloc_init_0()
{
  int v0;
  const char *result;
  BOOL v2;

  v0 = malloc_engaged_nano();
  result = getenv("LIBDISPATCH_CONTINUATION_ALLOCATOR");
  if (result)
  {
    result = (const char *)atoi(result);
    v2 = (_DWORD)result != 0;
  }
  else
  {
    v2 = v0 == 0;
  }
  _dispatch_use_dispatch_alloc = v2;
  return result;
}

uint64_t _dispatch_alloc_continuation_from_heap_0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  atomic_ullong *v3;
  atomic_ullong v4;
  unint64_t v5;
  atomic_ullong v6;
  BOOL v7;
  atomic_ullong *v8;
  atomic_ullong v9;
  uint64_t v10;
  atomic_ullong v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v15;
  atomic_ullong *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  atomic_ullong *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int16 StatusReg;
  atomic_ullong v26;
  atomic_ullong v27;

  v1 = 0;
  v2 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) & 0xFFF;
  while (2)
  {
    v3 = (atomic_ullong *)(a1 + (v2 << 20) + 8 * v1 + 1600);
    v4 = *v3;
    while (v4 != -1)
    {
      v5 = __clz(__rbit64(~v4));
      v6 = v4;
      atomic_compare_exchange_strong_explicit(v3, (unint64_t *)&v6, (1 << v5) | v4, memory_order_relaxed, memory_order_relaxed);
      v7 = v6 == v4;
      v4 = v6;
      if (v7)
      {
        v10 = ((_DWORD)v1 << 6);
        return a1 + (v2 << 20) + ((v5 | v10) << 6) + 1664;
      }
    }
    if (++v1 != 3)
      continue;
    break;
  }
  v8 = (atomic_ullong *)(a1 + (v2 << 20) + 1624);
  v9 = *v8;
  v10 = 192;
  while (v9 != -1)
  {
    v5 = __clz(__rbit64(~v9));
    if (v5 >= 0x26)
      break;
    v11 = v9;
    atomic_compare_exchange_strong_explicit(v8, (unint64_t *)&v11, (1 << v5) | v9, memory_order_relaxed, memory_order_relaxed);
    v7 = v11 == v9;
    v9 = v11;
    if (v7)
      return a1 + (v2 << 20) + ((v5 | v10) << 6) + 1664;
  }
  for (i = 0; i != 3; ++i)
  {
    v15 = a1 + (v2 << 20) + 8 * i;
    v17 = *(_QWORD *)(v15 + 16);
    v16 = (atomic_ullong *)(v15 + 16);
    if (v17 != -1)
    {
      v18 = 0;
      while (2)
      {
        v19 = a1 + (v2 << 20) + (i << 9) + 8 * v18;
        v22 = *(_QWORD *)(v19 + 64);
        v20 = (atomic_ullong *)(v19 + 64);
        v21 = v22;
        while (v21 != -1)
        {
          v23 = __clz(__rbit64(~v21));
          v24 = v21;
          atomic_compare_exchange_strong_explicit(v20, (unint64_t *)&v24, (1 << v23) | v21, memory_order_relaxed, memory_order_relaxed);
          v7 = v24 == v21;
          v21 = v24;
          if (v7)
          {
            StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
            *(_QWORD *)(_dispatch_main_heap + ((unint64_t)(StatusReg & 0xFFF) << 20) + 8) = (unint64_t)v20 & 0xFFFFFFFFFFFFFFE0;
            v26 = *v16;
            do
            {
              if (*v20 != -1)
                break;
              v27 = v26;
              atomic_compare_exchange_strong_explicit(v16, (unint64_t *)&v27, v26 | (1 << v18), memory_order_relaxed, memory_order_relaxed);
              v7 = v27 == v26;
              v26 = v27;
            }
            while (!v7);
            return a1 + (v2 << 20) + (i << 18) + (v18 << 12) + (v23 << 6) + 0x4000;
          }
        }
        if (++v18 != 64)
          continue;
        break;
      }
    }
    v12 = 0;
  }
  return v12;
}

uint64_t _dispatch_alloc_continuation_from_heap_slow_0()
{
  uint64_t *i;
  uint64_t v1;
  uint64_t result;

  for (i = &_dispatch_main_heap; ; i = (uint64_t *)*i)
  {
    v1 = *i;
    if (!*i)
    {
      _dispatch_alloc_try_create_heap_0(i);
      v1 = *i;
    }
    result = _dispatch_alloc_continuation_from_heap_0(v1);
    if (result)
      break;
  }
  return result;
}

void _dispatch_alloc_try_create_heap_0(atomic_ullong *a1)
{
  mach_vm_size_t v2;
  mach_vm_address_t *v3;
  vm_map_t *v4;
  kern_return_t v5;
  uint64_t v6;
  void *v7;
  mach_vm_address_t address;

  v2 = (unint64_t)MEMORY[0xFFFFFC036] << 20;
  v3 = (mach_vm_address_t *)MEMORY[0x1E0C88820];
  v4 = (vm_map_t *)MEMORY[0x1E0C883F0];
  while (1)
  {
    address = *v3;
    v5 = mach_vm_map(*v4, &address, v2, 0xFFFFFuLL, 1241513985, 0, 0, 0, 3, 7, 1u);
    if (!v5)
      break;
    if (v5 != 3)
    {
      qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Could not allocate heap";
      qword_1EDF52D38 = v5;
      __break(1u);
LABEL_9:
      _dispatch_bug(427, v5);
      return;
    }
    _dispatch_temporary_resource_shortage();
  }
  v6 = 0;
  v7 = (void *)address;
  atomic_compare_exchange_strong_explicit(a1, (unint64_t *)&v6, address, memory_order_relaxed, memory_order_relaxed);
  if (v6)
  {
    v5 = munmap(v7, (unint64_t)MEMORY[0xFFFFFC036] << 20);
    if (v5)
      goto LABEL_9;
  }
}

void _dispatch_alloc_maybe_madvise_page_0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  if ((a1 & 0xFC000) != 0)
  {
    v2 = (void *)(a1 & 0xFFFFFFFFFFFFC000);
    if (v2)
    {
      v3 = 0;
      v4 = a1 & 0xFFFFFFFFFFF00000;
      v5 = (unint64_t)v2 - v4 - 0x4000;
      v6 = v5 >> 12;
      v7 = (v5 >> 12) & 0x3F;
      v8 = (v5 >> 18) & 0xFFFFF;
      v9 = (_QWORD *)(((v4 + (v8 << 9)) & 0xFFFFFFFFFFFFFE07 | (8 * (v6 & 0x3F))) + 64);
      while (!v9[v3])
      {
        if (++v3 == 4)
        {
          v10 = 0;
          v16 = v8;
          v17 = v4;
          v15 = v7;
          while (1)
          {
            v11 = 0;
            atomic_compare_exchange_strong_explicit(&v9[v10], (unint64_t *)&v11, 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed, memory_order_relaxed);
            if (v11)
              break;
            if (++v10 == 4)
            {
              v12 = madvise(v2, 0x4000uLL, 5);
              if (v12)
                _dispatch_bug(563, v12);
              v10 = 4;
LABEL_14:
              v13 = v10 + 7;
              do
              {
                *(_QWORD *)(v17 + ((8 * v15) | (v16 << 9)) + 8 * v13) = 0;
                v14 = v13 - 7;
                --v13;
              }
              while (v14 > 2);
              goto LABEL_16;
            }
          }
          if ((int)v10 >= 2)
            goto LABEL_14;
          if ((_DWORD)v10)
          {
LABEL_16:
            *v9 = 0;
            return;
          }
          return;
        }
      }
    }
  }
}

void (*_dispatch_block_invoke_direct())(uint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_block_invoke_direct_VARIANT_armv81;
  else
    return (void (*)(uint64_t))_dispatch_block_invoke_direct_VARIANT_mp;
}

size_t (*_dispatch_channel_debug())(void *a1, uint64_t a2, unint64_t a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_channel_debug_VARIANT_armv81;
  else
    return _dispatch_channel_debug_VARIANT_mp;
}

void (*_dispatch_channel_dispose())(uint64_t *a1, _BYTE *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_channel_dispose_VARIANT_armv81;
  else
    return _dispatch_channel_dispose_VARIANT_mp;
}

unsigned int *(*_dispatch_channel_invoke())(uint64_t a1, uint64_t a2, int a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (unsigned int *(*)(uint64_t, uint64_t, int))_dispatch_channel_invoke_VARIANT_armv81;
  else
    return _dispatch_channel_invoke_VARIANT_mp;
}

void (*_dispatch_channel_wakeup())(uint64_t a1, uint64_t a2, int a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_channel_wakeup_VARIANT_armv81;
  else
    return _dispatch_channel_wakeup_VARIANT_mp;
}

uint64_t (*_dispatch_channel_xref_dispose())(uint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_channel_xref_dispose_VARIANT_armv81;
  else
    return _dispatch_channel_xref_dispose_VARIANT_mp;
}

uint64_t (*_dispatch_data_debug())(_QWORD *a1, char *__str, size_t __size)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_data_debug_VARIANT_armv81;
  else
    return _dispatch_data_debug_VARIANT_mp;
}

void (*_dispatch_data_dispose())(uint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_data_dispose_VARIANT_armv81;
  else
    return _dispatch_data_dispose_VARIANT_mp;
}

void (*_dispatch_data_init_with_bytes())(_QWORD *a1, mach_vm_address_t a2, mach_vm_size_t a3, void *aBlock)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_data_init_with_bytes_VARIANT_armv81;
  else
    return _dispatch_data_init_with_bytes_VARIANT_mp;
}

unsigned int *(*_dispatch_data_set_target_queue())(uint64_t a1, const char *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (unsigned int *(*)(uint64_t, const char *))_dispatch_data_set_target_queue_VARIANT_armv81;
  else
    return _dispatch_data_set_target_queue_VARIANT_mp;
}

void (*_dispatch_disk_dispose())(uint64_t a1, const char *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_disk_dispose_VARIANT_armv81;
  else
    return _dispatch_disk_dispose_VARIANT_mp;
}

void (*_dispatch_dispose())(uint64_t *a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_dispose_VARIANT_armv81;
  else
    return _dispatch_dispose_VARIANT_mp;
}

void (*_dispatch_event_loop_atfork_child())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_event_loop_atfork_child_VARIANT_armv81;
  else
    return _dispatch_event_loop_atfork_child_VARIANT_mp;
}

uint64_t (*_dispatch_group_create_and_enter())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_group_create_and_enter_VARIANT_armv81;
  else
    return _dispatch_group_create_and_enter_VARIANT_mp;
}

size_t (*_dispatch_group_debug())(_QWORD *a1, char *a2, size_t a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_group_debug_VARIANT_armv81;
  else
    return _dispatch_group_debug_VARIANT_mp;
}

uint64_t (*_dispatch_group_dispose())(uint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_group_dispose_VARIANT_armv81;
  else
    return _dispatch_group_dispose_VARIANT_mp;
}

void (*_dispatch_io_debug())(void *a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_io_debug_VARIANT_armv81;
  else
    return _dispatch_io_debug_VARIANT_mp;
}

void (*_dispatch_io_dispose())(uint64_t a1, const char *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_io_dispose_VARIANT_armv81;
  else
    return _dispatch_io_dispose_VARIANT_mp;
}

unint64_t (*_dispatch_lane_activate())(uint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_lane_activate_VARIANT_armv81;
  else
    return _dispatch_lane_activate_VARIANT_mp;
}

void (*_dispatch_lane_concurrent_push())(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_lane_concurrent_push_VARIANT_armv81;
  else
    return _dispatch_lane_concurrent_push_VARIANT_mp;
}

uint64_t (*_dispatch_lane_dispose())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_lane_dispose_VARIANT_armv81;
  else
    return _dispatch_lane_dispose_VARIANT_mp;
}

unsigned int *(*_dispatch_lane_invoke())(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (unsigned int *(*)(uint64_t, uint64_t, unsigned int))_dispatch_lane_invoke_VARIANT_armv81;
  else
    return _dispatch_lane_invoke_VARIANT_mp;
}

void (*_dispatch_lane_push())(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_lane_push_VARIANT_armv81;
  else
    return (void (*)(uint64_t, _QWORD *, unsigned int))_dispatch_lane_push_VARIANT_mp;
}

void (*_dispatch_lane_wakeup())(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_lane_wakeup_VARIANT_armv81;
  else
    return _dispatch_lane_wakeup_VARIANT_mp;
}

uint64_t (*_dispatch_mach_activate())(uint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_mach_activate_VARIANT_armv81;
  else
    return _dispatch_mach_activate_VARIANT_mp;
}

uint64_t (*_dispatch_mach_debug())(id a1, char *a2, unint64_t a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_mach_debug_VARIANT_armv81;
  else
    return _dispatch_mach_debug_VARIANT_mp;
}

void (*_dispatch_mach_dispose())(uint64_t *a1, _BYTE *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_mach_dispose_VARIANT_armv81;
  else
    return _dispatch_mach_dispose_VARIANT_mp;
}

unsigned int *(*_dispatch_mach_invoke())(unint64_t a1, uint64_t a2, int a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (unsigned int *(*)(unint64_t, uint64_t, int))_dispatch_mach_invoke_VARIANT_armv81;
  else
    return _dispatch_mach_invoke_VARIANT_mp;
}

uint64_t (*_dispatch_mach_msg_debug())(_DWORD *a1, char *a2, unint64_t a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_mach_msg_debug_VARIANT_armv81;
  else
    return _dispatch_mach_msg_debug_VARIANT_mp;
}

void (*_dispatch_mach_msg_dispose())(uint64_t a1, const char *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_mach_msg_dispose_VARIANT_armv81;
  else
    return _dispatch_mach_msg_dispose_VARIANT_mp;
}

void (*_dispatch_mach_msg_invoke())(uint64_t a1, uint64_t a2, int a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_mach_msg_invoke_VARIANT_armv81;
  else
    return _dispatch_mach_msg_invoke_VARIANT_mp;
}

uint64_t (*_dispatch_mach_notify_dead_name())(uint64_t a1, uint64_t a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_mach_notify_dead_name_VARIANT_armv81;
  else
    return _dispatch_mach_notify_dead_name_VARIANT_mp;
}

uint64_t (*_dispatch_mach_notify_port_deleted())(uint64_t a1, uint64_t a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_mach_notify_port_deleted_VARIANT_armv81;
  else
    return _dispatch_mach_notify_port_deleted_VARIANT_mp;
}

uint64_t (*_dispatch_mach_notify_send_possible())(uint64_t a1, uint64_t a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_mach_notify_send_possible_VARIANT_armv81;
  else
    return _dispatch_mach_notify_send_possible_VARIANT_mp;
}

void (*_dispatch_mach_wakeup())(uint64_t a1, uint64_t a2, char a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_mach_wakeup_VARIANT_armv81;
  else
    return _dispatch_mach_wakeup_VARIANT_mp;
}

uint64_t (*_dispatch_main_queue_push())(uint64_t result, unint64_t a2, uint64_t a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_main_queue_push_VARIANT_armv81;
  else
    return _dispatch_main_queue_push_VARIANT_mp;
}

void (*_dispatch_main_queue_wakeup())(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_main_queue_wakeup_VARIANT_armv81;
  else
    return _dispatch_main_queue_wakeup_VARIANT_mp;
}

atomic_ullong *(*_dispatch_mgr_queue_push())(atomic_ullong *result, _QWORD *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_mgr_queue_push_VARIANT_armv81;
  else
    return _dispatch_mgr_queue_push_VARIANT_mp;
}

void (*_dispatch_mgr_queue_wakeup())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_mgr_queue_wakeup_VARIANT_armv81;
  else
    return _dispatch_mgr_queue_wakeup_VARIANT_mp;
}

void (*_dispatch_operation_debug())(void *a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_operation_debug_VARIANT_armv81;
  else
    return _dispatch_operation_debug_VARIANT_mp;
}

void (*_dispatch_operation_dispose())(uint64_t a1, const char *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_operation_dispose_VARIANT_armv81;
  else
    return _dispatch_operation_dispose_VARIANT_mp;
}

void (*_dispatch_pthread_root_queue_dispose())(uint64_t *a1, _BYTE *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_pthread_root_queue_dispose_VARIANT_armv81;
  else
    return _dispatch_pthread_root_queue_dispose_VARIANT_mp;
}

void (*_dispatch_queue_atfork_child())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_queue_atfork_child_VARIANT_armv81;
  else
    return _dispatch_queue_atfork_child_VARIANT_mp;
}

uint64_t (*_dispatch_queue_debug())(id a1, char *a2, unint64_t a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_queue_debug_VARIANT_armv81;
  else
    return _dispatch_queue_debug_VARIANT_mp;
}

unint64_t (*_dispatch_queue_xref_dispose())(uint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_queue_xref_dispose_VARIANT_armv81;
  else
    return _dispatch_queue_xref_dispose_VARIANT_mp;
}

void (*_dispatch_root_queue_push())(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_root_queue_push_VARIANT_armv81;
  else
    return _dispatch_root_queue_push_VARIANT_mp;
}

unsigned int *(*_dispatch_root_queue_wakeup())(unsigned int *result, uint64_t a2, char a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_root_queue_wakeup_VARIANT_armv81;
  else
    return _dispatch_root_queue_wakeup_VARIANT_mp;
}

void (*_dispatch_runloop_queue_dispose())(uint64_t *a1, _BYTE *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_runloop_queue_dispose_VARIANT_armv81;
  else
    return _dispatch_runloop_queue_dispose_VARIANT_mp;
}

void (*_dispatch_runloop_queue_wakeup())(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_runloop_queue_wakeup_VARIANT_armv81;
  else
    return _dispatch_runloop_queue_wakeup_VARIANT_mp;
}

uint64_t (*_dispatch_runloop_queue_xref_dispose())(unint64_t *a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (uint64_t (*)(unint64_t *))_dispatch_runloop_queue_xref_dispose_VARIANT_armv81;
  else
    return _dispatch_runloop_queue_xref_dispose_VARIANT_mp;
}

size_t (*_dispatch_semaphore_debug())(uint64_t a1, char *a2, size_t a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_semaphore_debug_VARIANT_armv81;
  else
    return _dispatch_semaphore_debug_VARIANT_mp;
}

_DWORD *(*_dispatch_semaphore_dispose())(uint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_semaphore_dispose_VARIANT_armv81;
  else
    return _dispatch_semaphore_dispose_VARIANT_mp;
}

unsigned int *(*_dispatch_source_activate())(uint64_t a1, const char *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (unsigned int *(*)(uint64_t, const char *))_dispatch_source_activate_VARIANT_armv81;
  else
    return _dispatch_source_activate_VARIANT_mp;
}

size_t (*_dispatch_source_debug())(_QWORD *a1, char *a2, size_t a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_source_debug_VARIANT_armv81;
  else
    return _dispatch_source_debug_VARIANT_mp;
}

void (*_dispatch_source_dispose())(uint64_t *a1, char *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_source_dispose_VARIANT_armv81;
  else
    return _dispatch_source_dispose_VARIANT_mp;
}

void (*_dispatch_source_invoke())(uint64_t a1, uint64_t a2, int a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (void (*)(uint64_t, uint64_t, int))_dispatch_source_invoke_VARIANT_armv81;
  else
    return _dispatch_source_invoke_VARIANT_mp;
}

void (*_dispatch_source_wakeup())(uint64_t a1, uint64_t a2, char a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_source_wakeup_VARIANT_armv81;
  else
    return _dispatch_source_wakeup_VARIANT_mp;
}

uint64_t (*_dispatch_source_xref_dispose())(uint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_source_xref_dispose_VARIANT_armv81;
  else
    return _dispatch_source_xref_dispose_VARIANT_mp;
}

void (*_dispatch_workloop_dispose())(_QWORD *obj, char *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_workloop_dispose_VARIANT_armv81;
  else
    return _dispatch_workloop_dispose_VARIANT_mp;
}

unsigned int *(*_dispatch_workloop_invoke())(uint64_t started, uint64_t a2, int a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (unsigned int *(*)(uint64_t, uint64_t, int))_dispatch_workloop_invoke_VARIANT_armv81;
  else
    return _dispatch_workloop_invoke_VARIANT_mp;
}

_QWORD *(*_dispatch_workloop_push())(_QWORD *result, _QWORD *a2, unsigned int a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_workloop_push_VARIANT_armv81;
  else
    return _dispatch_workloop_push_VARIANT_mp;
}

void (*_dispatch_workloop_wakeup())(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_workloop_wakeup_VARIANT_armv81;
  else
    return (void (*)(uint64_t, uint64_t, unsigned int))_dispatch_workloop_wakeup_VARIANT_mp;
}

void (*_os_eventlink_dispose())(uint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _os_eventlink_dispose_VARIANT_armv81;
  else
    return _os_eventlink_dispose_VARIANT_mp;
}

BOOL (*_os_object_allows_weak_reference())(uint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _os_object_allows_weak_reference_VARIANT_armv81;
  else
    return _os_object_allows_weak_reference_VARIANT_mp;
}

uint64_t (*_os_object_retain_count())(uint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _os_object_retain_count_VARIANT_armv81;
  else
    return _os_object_retain_count_VARIANT_mp;
}

uint64_t (*_os_object_retain_weak())(uint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _os_object_retain_weak_VARIANT_armv81;
  else
    return _os_object_retain_weak_VARIANT_mp;
}

uint64_t (*_os_workgroup_debug())(uint64_t a1, char *__str, size_t __size)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _os_workgroup_debug_VARIANT_armv81;
  else
    return _os_workgroup_debug_VARIANT_mp;
}

void (*_os_workgroup_dispose())(uint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _os_workgroup_dispose_VARIANT_armv81;
  else
    return _os_workgroup_dispose_VARIANT_mp;
}

uint64_t (*_os_workgroup_interval_xref_dispose())(uint64_t result)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _os_workgroup_interval_xref_dispose_VARIANT_armv81;
  else
    return _os_workgroup_interval_xref_dispose_VARIANT_mp;
}

uint64_t (*_os_workgroup_interval_dispose())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _os_workgroup_interval_dispose_VARIANT_armv81;
  else
    return _os_workgroup_interval_dispose_VARIANT_mp;
}

void (*_os_workgroup_xref_dispose())(uint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _os_workgroup_xref_dispose_VARIANT_armv81;
  else
    return _os_workgroup_xref_dispose_VARIANT_mp;
}

__n128 (*_voucher_atfork_child())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _voucher_atfork_child_VARIANT_armv81;
  else
    return _voucher_atfork_child_VARIANT_mp;
}

uint64_t (*_voucher_atfork_parent())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _voucher_atfork_parent_VARIANT_armv81;
  else
    return _voucher_atfork_parent_VARIANT_mp;
}

uint64_t (*_voucher_atfork_prepare())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _voucher_atfork_prepare_VARIANT_armv81;
  else
    return _voucher_atfork_prepare_VARIANT_mp;
}

size_t (*_voucher_debug())(uint64_t a1, char *__str, size_t __size)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _voucher_debug_VARIANT_armv81;
  else
    return _voucher_debug_VARIANT_mp;
}

uint64_t (*_voucher_dispose())(uint64_t a1, const char *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _voucher_dispose_VARIANT_armv81;
  else
    return _voucher_dispose_VARIANT_mp;
}

uint64_t (*_voucher_xref_dispose())(uint64_t result, const char *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _voucher_xref_dispose_VARIANT_armv81;
  else
    return _voucher_xref_dispose_VARIANT_mp;
}

uint64_t (*firehose_client_push_notify_async())(uint64_t a1, unint64_t a2, unint64_t a3, int a4)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return firehose_client_push_notify_async_VARIANT_armv81;
  else
    return firehose_client_push_notify_async_VARIANT_mp;
}

void (*firehose_client_push_reply())(uint64_t a1, int a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return firehose_client_push_reply_VARIANT_armv81;
  else
    return firehose_client_push_reply_VARIANT_mp;
}

uint64_t (*_dispatch_get_main_queue_handle_4CF())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_get_main_queue_handle_4CF_VARIANT_armv81;
  else
    return _dispatch_get_main_queue_handle_4CF_VARIANT_mp;
}

uint64_t (*_dispatch_get_main_queue_port_4CF())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_get_main_queue_port_4CF_VARIANT_armv81;
  else
    return _dispatch_get_main_queue_port_4CF_VARIANT_mp;
}

uint64_t (*_dispatch_iocntl())(uint64_t result, uint64_t a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_iocntl_VARIANT_armv81;
  else
    return _dispatch_iocntl_VARIANT_mp;
}

void (*_dispatch_mach_hooks_install_default())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_mach_hooks_install_default_VARIANT_armv81;
  else
    return _dispatch_mach_hooks_install_default_VARIANT_mp;
}

void (*_dispatch_main_queue_callback_4CF())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_main_queue_callback_4CF_VARIANT_armv81;
  else
    return _dispatch_main_queue_callback_4CF_VARIANT_mp;
}

uint64_t (*_dispatch_poll_for_events_4launchd())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_poll_for_events_4launchd_VARIANT_armv81;
  else
    return _dispatch_poll_for_events_4launchd_VARIANT_mp;
}

uint64_t (*_dispatch_prohibit_transition_to_multithreaded())(uint64_t result)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_prohibit_transition_to_multithreaded_VARIANT_armv81;
  else
    return _dispatch_prohibit_transition_to_multithreaded_VARIANT_mp;
}

uint64_t (*_dispatch_pthread_root_queue_create_with_observer_hooks_4IOHID())(const char *a1, int a2, __int128 *a3, uint64_t a4, void *a5)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_pthread_root_queue_create_with_observer_hooks_4IOHID_VARIANT_armv81;
  else
    return _dispatch_pthread_root_queue_create_with_observer_hooks_4IOHID_VARIANT_mp;
}

BOOL (*_dispatch_queue_is_exclusively_owned_by_current_thread_4IOHID())(uint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_queue_is_exclusively_owned_by_current_thread_4IOHID_VARIANT_armv81;
  else
    return _dispatch_queue_is_exclusively_owned_by_current_thread_4IOHID_VARIANT_mp;
}

uint64_t (*_dispatch_runloop_root_queue_create_4CF())(const char *a1, uint64_t a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_runloop_root_queue_create_4CF_VARIANT_armv81;
  else
    return _dispatch_runloop_root_queue_create_4CF_VARIANT_mp;
}

uint64_t (*_dispatch_runloop_root_queue_get_port_4CF())(unsigned int *a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_runloop_root_queue_get_port_4CF_VARIANT_armv81;
  else
    return _dispatch_runloop_root_queue_get_port_4CF_VARIANT_mp;
}

BOOL (*_dispatch_runloop_root_queue_perform_4CF())(unsigned int *a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (BOOL (*)(unsigned int *))_dispatch_runloop_root_queue_perform_4CF_VARIANT_armv81;
  else
    return _dispatch_runloop_root_queue_perform_4CF_VARIANT_mp;
}

void (*_dispatch_runloop_root_queue_wakeup_4CF())(uint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_runloop_root_queue_wakeup_4CF_VARIANT_armv81;
  else
    return _dispatch_runloop_root_queue_wakeup_4CF_VARIANT_mp;
}

BOOL (*_dispatch_source_will_reenable_kevent_4NW())(uint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_source_will_reenable_kevent_4NW_VARIANT_armv81;
  else
    return _dispatch_source_will_reenable_kevent_4NW_VARIANT_mp;
}

__n128 (*_dispatch_workloop_set_observer_hooks_4IOHID())(uint64_t a1, __n128 *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_workloop_set_observer_hooks_4IOHID_VARIANT_armv81;
  else
    return _dispatch_workloop_set_observer_hooks_4IOHID_VARIANT_mp;
}

BOOL (*_dispatch_workloop_should_yield_4NW())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _dispatch_workloop_should_yield_4NW_VARIANT_armv81;
  else
    return _dispatch_workloop_should_yield_4NW_VARIANT_mp;
}

void *(*_os_object_release())(void *a1, const char *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _os_object_release_VARIANT_armv81;
  else
    return _os_object_release_VARIANT_mp;
}

void *(*_os_object_release_internal())(void *a1, const char *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _os_object_release_internal_VARIANT_armv81;
  else
    return _os_object_release_internal_VARIANT_mp;
}

void *(*_os_object_release_internal_n())(void *a1, const char *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _os_object_release_internal_n_VARIANT_armv81;
  else
    return _os_object_release_internal_n_VARIANT_mp;
}

void *(*_os_object_release_without_xref_dispose())(void *a1, const char *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _os_object_release_without_xref_dispose_VARIANT_armv81;
  else
    return _os_object_release_without_xref_dispose_VARIANT_mp;
}

uint64_t (*_os_object_retain())(uint64_t result)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _os_object_retain_VARIANT_armv81;
  else
    return _os_object_retain_VARIANT_mp;
}

uint64_t (*_os_object_retain_internal())(uint64_t result)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _os_object_retain_internal_VARIANT_armv81;
  else
    return _os_object_retain_internal_VARIANT_mp;
}

uint64_t (*_os_object_retain_internal_n())(uint64_t result, int a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (uint64_t (*)(uint64_t, int))_os_object_retain_internal_n_VARIANT_armv81;
  else
    return _os_object_retain_internal_n_VARIANT_mp;
}

uint64_t (*_os_object_retain_with_resurrect())(uint64_t result)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return _os_object_retain_with_resurrect_VARIANT_armv81;
  else
    return _os_object_retain_with_resurrect_VARIANT_mp;
}

double (*dispatch_apply_attr_destroy())(_OWORD *a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_apply_attr_destroy_VARIANT_armv81;
  else
    return dispatch_apply_attr_destroy_VARIANT_mp;
}

double (*dispatch_apply_attr_init())(unint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_apply_attr_init_VARIANT_armv81;
  else
    return dispatch_apply_attr_init_VARIANT_mp;
}

uint64_t (*dispatch_apply_attr_set_parallelism())(uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_apply_attr_set_parallelism_VARIANT_armv81;
  else
    return dispatch_apply_attr_set_parallelism_VARIANT_mp;
}

unint64_t (*dispatch_apply_attr_query())(unint64_t result, uint64_t a2, char a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_apply_attr_query_VARIANT_armv81;
  else
    return dispatch_apply_attr_query_VARIANT_mp;
}

void (*dispatch_apply_with_attr())(unint64_t a1, uint64_t a2, void *aBlock)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_apply_with_attr_VARIANT_armv81;
  else
    return dispatch_apply_with_attr_VARIANT_mp;
}

void (*dispatch_apply_with_attr_f())(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_apply_with_attr_f_VARIANT_armv81;
  else
    return dispatch_apply_with_attr_f_VARIANT_mp;
}

void dispatch_apply_f(size_t iterations, dispatch_queue_t queue, void *context, void (__cdecl *work)(void *, size_t))
{
  ;
}

uint64_t (*dispatch_allow_send_signals())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_allow_send_signals_VARIANT_armv81;
  else
    return dispatch_allow_send_signals_VARIANT_mp;
}

_DWORD *(*dispatch_async_enforce_qos_class_f())(_DWORD *result, uint64_t a2, uint64_t a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_async_enforce_qos_class_f_VARIANT_armv81;
  else
    return dispatch_async_enforce_qos_class_f_VARIANT_mp;
}

uint64_t (*dispatch_async_swift_job())(uint64_t a1, uint64_t a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_async_swift_job_VARIANT_armv81;
  else
    return dispatch_async_swift_job_VARIANT_mp;
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_block_create_VARIANT_armv81;
  else
    return dispatch_block_create_VARIANT_mp;
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_block_create_with_qos_class_VARIANT_armv81;
  else
    return dispatch_block_create_with_qos_class_VARIANT_mp;
}

void *(*dispatch_block_create_with_voucher())(uint64_t a1, uint64_t a2, void *aBlock, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_block_create_with_voucher_VARIANT_armv81;
  else
    return dispatch_block_create_with_voucher_VARIANT_mp;
}

void *(*dispatch_block_create_with_voucher_and_qos_class())(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, void *a5)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_block_create_with_voucher_and_qos_class_VARIANT_armv81;
  else
    return dispatch_block_create_with_voucher_and_qos_class_VARIANT_mp;
}

intptr_t dispatch_block_testcancel(dispatch_block_t block)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (intptr_t)dispatch_block_testcancel_VARIANT_armv81;
  else
    return (intptr_t)dispatch_block_testcancel_VARIANT_mp;
}

intptr_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (intptr_t)dispatch_block_wait_VARIANT_armv81;
  else
    return (intptr_t)dispatch_block_wait_VARIANT_mp;
}

uint64_t (*dispatch_channel_create())(const char *a1, __objc2_class **a2, uint64_t a3, _QWORD *a4)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_channel_create_VARIANT_armv81;
  else
    return dispatch_channel_create_VARIANT_mp;
}

void (*dispatch_channel_drain())(uint64_t a1, uint64_t a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_channel_drain_VARIANT_armv81;
  else
    return dispatch_channel_drain_VARIANT_mp;
}

void (*dispatch_channel_drain_f())(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD, uint64_t *))
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_channel_drain_f_VARIANT_armv81;
  else
    return dispatch_channel_drain_f_VARIANT_mp;
}

_DWORD *(*dispatch_channel_enqueue())(_DWORD *result, uint64_t a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_channel_enqueue_VARIANT_armv81;
  else
    return dispatch_channel_enqueue_VARIANT_mp;
}

uint64_t (*dispatch_channel_foreach_work_item_peek())(uint64_t a1, uint64_t a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_channel_foreach_work_item_peek_VARIANT_armv81;
  else
    return dispatch_channel_foreach_work_item_peek_VARIANT_mp;
}

uint64_t (*dispatch_channel_foreach_work_item_peek_f())(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD))
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_channel_foreach_work_item_peek_f_VARIANT_armv81;
  else
    return dispatch_channel_foreach_work_item_peek_f_VARIANT_mp;
}

uint64_t (*dispatch_channel_wakeup())(uint64_t a1, int a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_channel_wakeup_VARIANT_armv81;
  else
    return dispatch_channel_wakeup_VARIANT_mp;
}

BOOL dispatch_data_apply(dispatch_data_t data, dispatch_data_applier_t applier)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (char)dispatch_data_apply_VARIANT_armv81;
  else
    return (char)dispatch_data_apply_VARIANT_mp;
}

uint64_t (*dispatch_data_apply_f())(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_data_apply_f_VARIANT_armv81;
  else
    return dispatch_data_apply_f_VARIANT_mp;
}

dispatch_data_t dispatch_data_copy_region(dispatch_data_t data, size_t location, size_t *offset_ptr)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (dispatch_data_t)dispatch_data_copy_region_VARIANT_armv81;
  else
    return (dispatch_data_t)dispatch_data_copy_region_VARIANT_mp;
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (dispatch_data_t)dispatch_data_create_VARIANT_armv81;
  else
    return (dispatch_data_t)dispatch_data_create_VARIANT_mp;
}

__objc2_class **(*dispatch_data_create_alloc())(unint64_t a1, __objc2_class ***a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_data_create_alloc_VARIANT_armv81;
  else
    return dispatch_data_create_alloc_VARIANT_mp;
}

dispatch_data_t dispatch_data_create_concat(dispatch_data_t data1, dispatch_data_t data2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (dispatch_data_t)dispatch_data_create_concat_VARIANT_armv81;
  else
    return (dispatch_data_t)dispatch_data_create_concat_VARIANT_mp;
}

__objc2_class **(*dispatch_data_create_f())(void *a1, size_t a2, _DWORD *a3, _QWORD *a4)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_data_create_f_VARIANT_armv81;
  else
    return dispatch_data_create_f_VARIANT_mp;
}

dispatch_data_t dispatch_data_create_map(dispatch_data_t data, const void **buffer_ptr, size_t *size_ptr)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (dispatch_data_t)dispatch_data_create_map_VARIANT_armv81;
  else
    return (dispatch_data_t)dispatch_data_create_map_VARIANT_mp;
}

dispatch_data_t dispatch_data_create_subrange(dispatch_data_t data, size_t offset, size_t length)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (dispatch_data_t)dispatch_data_create_subrange_VARIANT_armv81;
  else
    return (dispatch_data_t)dispatch_data_create_subrange_VARIANT_mp;
}

char *(*dispatch_data_get_flattened_bytes_4libxpc())(_QWORD *a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_data_get_flattened_bytes_4libxpc_VARIANT_armv81;
  else
    return dispatch_data_get_flattened_bytes_4libxpc_VARIANT_mp;
}

size_t dispatch_data_get_size(dispatch_data_t data)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (size_t)dispatch_data_get_size_VARIANT_armv81;
  else
    return (size_t)dispatch_data_get_size_VARIANT_mp;
}

uint64_t (*dispatch_data_make_memory_entry())(_QWORD *a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_data_make_memory_entry_VARIANT_armv81;
  else
    return dispatch_data_make_memory_entry_VARIANT_mp;
}

void *__cdecl dispatch_get_context(dispatch_object_t object)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_get_context_VARIANT_armv81;
  else
    return dispatch_get_context_VARIANT_mp;
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (dispatch_queue_global_t)dispatch_get_global_queue_VARIANT_armv81;
  else
    return (dispatch_queue_global_t)dispatch_get_global_queue_VARIANT_mp;
}

void *__cdecl dispatch_get_specific(const void *key)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_get_specific_VARIANT_armv81;
  else
    return dispatch_get_specific_VARIANT_mp;
}

void dispatch_group_async_f(dispatch_group_t group, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  ;
}

dispatch_group_t dispatch_group_create(void)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (dispatch_group_t)dispatch_group_create_VARIANT_armv81;
  else
    return (dispatch_group_t)dispatch_group_create_VARIANT_mp;
}

void dispatch_group_notify_f(dispatch_group_t group, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  ;
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (intptr_t)dispatch_group_wait_VARIANT_armv81;
  else
    return (intptr_t)dispatch_group_wait_VARIANT_mp;
}

uint64_t (*dispatch_io_barrier_f())(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_io_barrier_f_VARIANT_armv81;
  else
    return dispatch_io_barrier_f_VARIANT_mp;
}

dispatch_io_t dispatch_io_create(dispatch_io_type_t type, dispatch_fd_t fd, dispatch_queue_t queue, void *cleanup_handler)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (dispatch_io_t)dispatch_io_create_VARIANT_armv81;
  else
    return (dispatch_io_t)dispatch_io_create_VARIANT_mp;
}

_QWORD *(*dispatch_io_create_f())(unint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_io_create_f_VARIANT_armv81;
  else
    return dispatch_io_create_f_VARIANT_mp;
}

dispatch_io_t dispatch_io_create_with_io(dispatch_io_type_t type, dispatch_io_t io, dispatch_queue_t queue, void *cleanup_handler)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (dispatch_io_t)dispatch_io_create_with_io_VARIANT_armv81;
  else
    return (dispatch_io_t)dispatch_io_create_with_io_VARIANT_mp;
}

_QWORD *(*dispatch_io_create_with_io_f())(uint64_t (*a1)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_io_create_with_io_f_VARIANT_armv81;
  else
    return dispatch_io_create_with_io_f_VARIANT_mp;
}

dispatch_io_t dispatch_io_create_with_path(dispatch_io_type_t type, const char *path, int oflag, mode_t mode, dispatch_queue_t queue, void *cleanup_handler)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (dispatch_io_t)dispatch_io_create_with_path_VARIANT_armv81;
  else
    return (dispatch_io_t)dispatch_io_create_with_path_VARIANT_mp;
}

_QWORD *(*dispatch_io_create_with_path_f())(unint64_t a1, char *a2, int a3, __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_io_create_with_path_f_VARIANT_armv81;
  else
    return dispatch_io_create_with_path_f_VARIANT_mp;
}

dispatch_fd_t dispatch_io_get_descriptor(dispatch_io_t channel)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (int)dispatch_io_get_descriptor_VARIANT_armv81;
  else
    return (int)dispatch_io_get_descriptor_VARIANT_mp;
}

void dispatch_io_read(dispatch_io_t channel, off_t offset, size_t length, dispatch_queue_t queue, dispatch_io_handler_t io_handler)
{
  ;
}

uint64_t (*dispatch_io_read_f())(uint64_t a1, uint64_t (*a2)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), uint64_t (*a3)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_io_read_f_VARIANT_armv81;
  else
    return dispatch_io_read_f_VARIANT_mp;
}

void dispatch_io_write(dispatch_io_t channel, off_t offset, dispatch_data_t data, dispatch_queue_t queue, dispatch_io_handler_t io_handler)
{
  ;
}

uint64_t (*dispatch_io_write_f())(uint64_t a1, uint64_t (*a2)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8), void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_io_write_f_VARIANT_armv81;
  else
    return dispatch_io_write_f_VARIANT_mp;
}

uint64_t (*dispatch_lock_override_start_with_debounce())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_lock_override_start_with_debounce_VARIANT_armv81;
  else
    return dispatch_lock_override_start_with_debounce_VARIANT_mp;
}

uint64_t (*dispatch_lock_override_end())(int a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_lock_override_end_VARIANT_armv81;
  else
    return dispatch_lock_override_end_VARIANT_mp;
}

BOOL (*dispatch_mach_can_handoff_4libxpc())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_mach_can_handoff_4libxpc_VARIANT_armv81;
  else
    return dispatch_mach_can_handoff_4libxpc_VARIANT_mp;
}

unsigned int *(*dispatch_mach_cancel())(unsigned int *result, const char *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (unsigned int *(*)(unsigned int *, const char *))dispatch_mach_cancel_VARIANT_armv81;
  else
    return dispatch_mach_cancel_VARIANT_mp;
}

void (*dispatch_mach_connect())(uint64_t a1, int a2, int a3, uint64_t a4)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_mach_connect_VARIANT_armv81;
  else
    return dispatch_mach_connect_VARIANT_mp;
}

uint64_t (*dispatch_mach_create())(uint64_t a1, __objc2_class **a2, void *aBlock)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_mach_create_VARIANT_armv81;
  else
    return dispatch_mach_create_VARIANT_mp;
}

uint64_t (*dispatch_mach_create_4libxpc())(uint64_t a1, __objc2_class **a2, uint64_t a3, uint64_t a4)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_mach_create_4libxpc_VARIANT_armv81;
  else
    return dispatch_mach_create_4libxpc_VARIANT_mp;
}

uint64_t (*dispatch_mach_create_f())(uint64_t a1, __objc2_class **a2, uint64_t a3, uint64_t a4)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_mach_create_f_VARIANT_armv81;
  else
    return dispatch_mach_create_f_VARIANT_mp;
}

uint64_t (*dispatch_mach_get_checkin_port())(uint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_mach_get_checkin_port_VARIANT_armv81;
  else
    return dispatch_mach_get_checkin_port_VARIANT_mp;
}

uint64_t *(*dispatch_mach_handoff_reply())(unsigned int *a1, unsigned int a2, _QWORD *a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (uint64_t *(*)(unsigned int *, unsigned int, _QWORD *))dispatch_mach_handoff_reply_VARIANT_armv81;
  else
    return dispatch_mach_handoff_reply_VARIANT_mp;
}

uint64_t (*dispatch_mach_handoff_reply_f())(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_mach_handoff_reply_f_VARIANT_armv81;
  else
    return dispatch_mach_handoff_reply_f_VARIANT_mp;
}

void (*dispatch_mach_hooks_install_4libxpc())(_QWORD *a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_mach_hooks_install_4libxpc_VARIANT_armv81;
  else
    return (void (*)(_QWORD *))dispatch_mach_hooks_install_4libxpc_VARIANT_mp;
}

uint64_t (*dispatch_mach_mig_demux())(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_mach_mig_demux_VARIANT_armv81;
  else
    return dispatch_mach_mig_demux_VARIANT_mp;
}

uint64_t (*dispatch_mach_mig_demux_get_context())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_mach_mig_demux_get_context_VARIANT_armv81;
  else
    return dispatch_mach_mig_demux_get_context_VARIANT_mp;
}

uint64_t (*dispatch_mach_msg_create())(const void *a1, size_t a2, int a3, _QWORD *a4)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_mach_msg_create_VARIANT_armv81;
  else
    return dispatch_mach_msg_create_VARIANT_mp;
}

uint64_t (*dispatch_mach_msg_get_filter_policy_id())(uint64_t a1, _DWORD *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_mach_msg_get_filter_policy_id_VARIANT_armv81;
  else
    return dispatch_mach_msg_get_filter_policy_id_VARIANT_mp;
}

uint64_t (*dispatch_mach_msg_get_msg())(uint64_t a1, _QWORD *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_mach_msg_get_msg_VARIANT_armv81;
  else
    return dispatch_mach_msg_get_msg_VARIANT_mp;
}

uint64_t (*dispatch_mach_notify_no_senders())(uint64_t a1, int a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_mach_notify_no_senders_VARIANT_armv81;
  else
    return dispatch_mach_notify_no_senders_VARIANT_mp;
}

void *(*dispatch_mach_receive_barrier())(unsigned int *a1, uint64_t (**aBlock)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (void *(*)(unsigned int *, uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)))dispatch_mach_receive_barrier_VARIANT_armv81;
  else
    return dispatch_mach_receive_barrier_VARIANT_mp;
}

_DWORD *(*dispatch_mach_receive_barrier_f())(_DWORD *result, uint64_t a2, uint64_t a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_mach_receive_barrier_f_VARIANT_armv81;
  else
    return dispatch_mach_receive_barrier_f_VARIANT_mp;
}

unsigned int *(*dispatch_mach_reconnect())(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (unsigned int *(*)(uint64_t, unsigned int, uint64_t))dispatch_mach_reconnect_VARIANT_armv81;
  else
    return dispatch_mach_reconnect_VARIANT_mp;
}

uint64_t (*dispatch_mach_request_no_senders())(uint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_mach_request_no_senders_VARIANT_armv81;
  else
    return dispatch_mach_request_no_senders_VARIANT_mp;
}

uint64_t (*dispatch_mach_send())(uint64_t a1, uint64_t a2, int a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_mach_send_VARIANT_armv81;
  else
    return dispatch_mach_send_VARIANT_mp;
}

uint64_t (*dispatch_mach_send_and_wait_for_reply())(uint64_t a1, uint64_t a2, int a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_mach_send_and_wait_for_reply_VARIANT_armv81;
  else
    return dispatch_mach_send_and_wait_for_reply_VARIANT_mp;
}

unsigned int *(*dispatch_mach_send_barrier())(unsigned int *a1, uint64_t (**aBlock)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (unsigned int *(*)(unsigned int *, uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)))dispatch_mach_send_barrier_VARIANT_armv81;
  else
    return dispatch_mach_send_barrier_VARIANT_mp;
}

unsigned int *(*dispatch_mach_send_barrier_f())(unsigned int *result, uint64_t a2, uint64_t a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (unsigned int *(*)(unsigned int *, uint64_t, uint64_t))dispatch_mach_send_barrier_f_VARIANT_armv81;
  else
    return dispatch_mach_send_barrier_f_VARIANT_mp;
}

uint64_t (*dispatch_mach_send_with_result())(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, _DWORD *a6)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_mach_send_with_result_VARIANT_armv81;
  else
    return dispatch_mach_send_with_result_VARIANT_mp;
}

uint64_t (*dispatch_mach_send_with_result_and_async_reply_4libxpc())(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, _DWORD *a6)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_mach_send_with_result_and_async_reply_4libxpc_VARIANT_armv81;
  else
    return dispatch_mach_send_with_result_and_async_reply_4libxpc_VARIANT_mp;
}

uint64_t (*dispatch_mach_send_with_result_and_wait_for_reply())(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, _DWORD *a6)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_mach_send_with_result_and_wait_for_reply_VARIANT_armv81;
  else
    return dispatch_mach_send_with_result_and_wait_for_reply_VARIANT_mp;
}

uint64_t (*dispatch_mach_set_flags())(uint64_t a1, char a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_mach_set_flags_VARIANT_armv81;
  else
    return dispatch_mach_set_flags_VARIANT_mp;
}

uint64_t (*dispatch_mig_server())(uint64_t a1, uint64_t a2, unsigned int (*a3)(mach_msg_header_t *, mach_msg_header_t *))
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_mig_server_VARIANT_armv81;
  else
    return dispatch_mig_server_VARIANT_mp;
}

uint64_t (*dispatch_pthread_root_queue_copy_current())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_pthread_root_queue_copy_current_VARIANT_armv81;
  else
    return dispatch_pthread_root_queue_copy_current_VARIANT_mp;
}

uint64_t (*dispatch_pthread_root_queue_create())(const char *a1, int a2, __int128 *a3, void *a4)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_pthread_root_queue_create_VARIANT_armv81;
  else
    return dispatch_pthread_root_queue_create_VARIANT_mp;
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (dispatch_queue_t)dispatch_queue_create_VARIANT_armv81;
  else
    return (dispatch_queue_t)dispatch_queue_create_VARIANT_mp;
}

void (*dispatch_queue_create_with_accounting_override_voucher())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_queue_create_with_accounting_override_voucher_VARIANT_armv81;
  else
    return dispatch_queue_create_with_accounting_override_voucher_VARIANT_mp;
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (dispatch_queue_t)dispatch_queue_create_with_target_V2_VARIANT_armv81;
  else
    return (dispatch_queue_t)dispatch_queue_create_with_target_V2_VARIANT_mp;
}

const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (const char *)dispatch_queue_get_label_VARIANT_armv81;
  else
    return (const char *)dispatch_queue_get_label_VARIANT_mp;
}

dispatch_qos_class_t dispatch_queue_get_qos_class(dispatch_queue_t queue, int *relative_priority_ptr)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_queue_get_qos_class_VARIANT_armv81;
  else
    return dispatch_queue_get_qos_class_VARIANT_mp;
}

void *__cdecl dispatch_queue_get_specific(dispatch_queue_t queue, const void *key)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_queue_get_specific_VARIANT_armv81;
  else
    return dispatch_queue_get_specific_VARIANT_mp;
}

uint64_t (*dispatch_queue_set_label_nocopy())(uint64_t result, uint64_t a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_queue_set_label_nocopy_VARIANT_armv81;
  else
    return dispatch_queue_set_label_nocopy_VARIANT_mp;
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
  ;
}

unint64_t *(*dispatch_queue_set_width())(unint64_t *a1, uint64_t a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (unint64_t *(*)(unint64_t *, uint64_t))dispatch_queue_set_width_VARIANT_armv81;
  else
    return dispatch_queue_set_width_VARIANT_mp;
}

uint64_t (*dispatch_read_f())(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_read_f_VARIANT_armv81;
  else
    return dispatch_read_f_VARIANT_mp;
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (dispatch_semaphore_t)dispatch_semaphore_create_VARIANT_armv81;
  else
    return (dispatch_semaphore_t)dispatch_semaphore_create_VARIANT_mp;
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (intptr_t)dispatch_semaphore_signal_VARIANT_armv81;
  else
    return (intptr_t)dispatch_semaphore_signal_VARIANT_mp;
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (intptr_t)dispatch_semaphore_wait_VARIANT_armv81;
  else
    return (intptr_t)dispatch_semaphore_wait_VARIANT_mp;
}

uint64_t (*dispatch_set_qos_class())(uint64_t a1, int a2, char a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_set_qos_class_VARIANT_armv81;
  else
    return dispatch_set_qos_class_VARIANT_mp;
}

uint64_t (*dispatch_set_qos_class_fallback())(uint64_t a1, int a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_set_qos_class_fallback_VARIANT_armv81;
  else
    return dispatch_set_qos_class_fallback_VARIANT_mp;
}

void dispatch_set_qos_class_floor(dispatch_object_t object, dispatch_qos_class_t qos_class, int relative_priority)
{
  ;
}

void (*dispatch_source_cancel_and_wait())(uint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_source_cancel_and_wait_VARIANT_armv81;
  else
    return (void (*)(uint64_t))dispatch_source_cancel_and_wait_VARIANT_mp;
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (dispatch_source_t)dispatch_source_create_VARIANT_armv81;
  else
    return (dispatch_source_t)dispatch_source_create_VARIANT_mp;
}

uintptr_t dispatch_source_get_data(dispatch_source_t source)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (uintptr_t)dispatch_source_get_data_VARIANT_armv81;
  else
    return (uintptr_t)dispatch_source_get_data_VARIANT_mp;
}

uint64_t (*dispatch_source_get_extended_data())(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_source_get_extended_data_VARIANT_armv81;
  else
    return dispatch_source_get_extended_data_VARIANT_mp;
}

uintptr_t dispatch_source_get_handle(dispatch_source_t source)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (uintptr_t)dispatch_source_get_handle_VARIANT_armv81;
  else
    return (uintptr_t)dispatch_source_get_handle_VARIANT_mp;
}

uintptr_t dispatch_source_get_mask(dispatch_source_t source)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (uintptr_t)dispatch_source_get_mask_VARIANT_armv81;
  else
    return (uintptr_t)dispatch_source_get_mask_VARIANT_mp;
}

unint64_t *(*dispatch_source_set_mandatory_cancel_handler())(uint64_t a1, void (**a2)(void (**a1)(void)))
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (unint64_t *(*)(uint64_t, void (**)(void (**)(void))))dispatch_source_set_mandatory_cancel_handler_VARIANT_armv81;
  else
    return dispatch_source_set_mandatory_cancel_handler_VARIANT_mp;
}

unint64_t *(*dispatch_source_set_mandatory_cancel_handler_f())(uint64_t a1, void (**a2)(void (**a1)(void)))
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (unint64_t *(*)(uint64_t, void (**)(void (**)(void))))dispatch_source_set_mandatory_cancel_handler_f_VARIANT_armv81;
  else
    return dispatch_source_set_mandatory_cancel_handler_f_VARIANT_mp;
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  ;
}

intptr_t dispatch_source_testcancel(dispatch_source_t source)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (intptr_t)dispatch_source_testcancel_VARIANT_armv81;
  else
    return (intptr_t)dispatch_source_testcancel_VARIANT_mp;
}

BOOL (*dispatch_swift_job_should_yield())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_swift_job_should_yield_VARIANT_armv81;
  else
    return dispatch_swift_job_should_yield_VARIANT_mp;
}

uint64_t (*dispatch_thread_get_current_override_qos_floor())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_thread_get_current_override_qos_floor_VARIANT_armv81;
  else
    return dispatch_thread_get_current_override_qos_floor_VARIANT_mp;
}

uint64_t (*dispatch_thread_override_self())(int a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_thread_override_self_VARIANT_armv81;
  else
    return dispatch_thread_override_self_VARIANT_mp;
}

uint64_t (*dispatch_workloop_copy_current())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_workloop_copy_current_VARIANT_armv81;
  else
    return dispatch_workloop_copy_current_VARIANT_mp;
}

dispatch_workloop_t dispatch_workloop_create(const char *label)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (dispatch_workloop_t)dispatch_workloop_create_VARIANT_armv81;
  else
    return (dispatch_workloop_t)dispatch_workloop_create_VARIANT_mp;
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (dispatch_workloop_t)dispatch_workloop_create_inactive_VARIANT_armv81;
  else
    return (dispatch_workloop_t)dispatch_workloop_create_inactive_VARIANT_mp;
}

BOOL (*dispatch_workloop_is_current())(uint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_workloop_is_current_VARIANT_armv81;
  else
    return dispatch_workloop_is_current_VARIANT_mp;
}

void dispatch_workloop_set_autorelease_frequency(dispatch_workloop_t workloop, dispatch_autorelease_frequency_t frequency)
{
  ;
}

_BYTE *(*dispatch_workloop_set_cpupercent())(uint64_t a1, char a2, int a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_workloop_set_cpupercent_VARIANT_armv81;
  else
    return dispatch_workloop_set_cpupercent_VARIANT_mp;
}

_DWORD *(*dispatch_workloop_set_qos_class())(uint64_t a1, int a2, char a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_workloop_set_qos_class_VARIANT_armv81;
  else
    return dispatch_workloop_set_qos_class_VARIANT_mp;
}

_DWORD *(*dispatch_workloop_set_qos_class_floor())(uint64_t a1, int a2, char a3, char a4)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_workloop_set_qos_class_floor_VARIANT_armv81;
  else
    return dispatch_workloop_set_qos_class_floor_VARIANT_mp;
}

_DWORD *(*dispatch_workloop_set_scheduler_priority())(uint64_t a1, int a2, char a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_workloop_set_scheduler_priority_VARIANT_armv81;
  else
    return dispatch_workloop_set_scheduler_priority_VARIANT_mp;
}

uint64_t (*dispatch_workloop_set_uses_bound_thread())(uint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_workloop_set_uses_bound_thread_VARIANT_armv81;
  else
    return dispatch_workloop_set_uses_bound_thread_VARIANT_mp;
}

uint64_t (*dispatch_write_f())(int a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return dispatch_write_f_VARIANT_armv81;
  else
    return dispatch_write_f_VARIANT_mp;
}

uint64_t (*libdispatch_init())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return libdispatch_init_VARIANT_armv81;
  else
    return libdispatch_init_VARIANT_mp;
}

uint64_t (*mach_voucher_persona_self())(ipc_voucher_t *a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return mach_voucher_persona_self_VARIANT_armv81;
  else
    return mach_voucher_persona_self_VARIANT_mp;
}

uint64_t (*mach_voucher_persona_for_originator())(int a1, int a2, uint64_t a3, ipc_voucher_t *a4)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return mach_voucher_persona_for_originator_VARIANT_armv81;
  else
    return mach_voucher_persona_for_originator_VARIANT_mp;
}

_DWORD *(*os_eventlink_create())(const char *a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return os_eventlink_create_VARIANT_armv81;
  else
    return os_eventlink_create_VARIANT_mp;
}

uint64_t (*os_eventlink_cancel())(uint64_t result)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return os_eventlink_cancel_VARIANT_armv81;
  else
    return os_eventlink_cancel_VARIANT_mp;
}

uint64_t (*os_eventlink_activate())(uint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return os_eventlink_activate_VARIANT_armv81;
  else
    return os_eventlink_activate_VARIANT_mp;
}

uint64_t (*os_eventlink_extract_remote_port())(uint64_t a1, unsigned int *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return os_eventlink_extract_remote_port_VARIANT_armv81;
  else
    return os_eventlink_extract_remote_port_VARIANT_mp;
}

_DWORD *(*os_eventlink_create_with_port())(const char *a1, mach_port_name_t a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return os_eventlink_create_with_port_VARIANT_armv81;
  else
    return os_eventlink_create_with_port_VARIANT_mp;
}

_DWORD *(*os_eventlink_create_remote_with_eventlink())(const char *a1, uint64_t a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return os_eventlink_create_remote_with_eventlink_VARIANT_armv81;
  else
    return os_eventlink_create_remote_with_eventlink_VARIANT_mp;
}

uint64_t (*os_eventlink_associate())(uint64_t a1, uint64_t a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return os_eventlink_associate_VARIANT_armv81;
  else
    return os_eventlink_associate_VARIANT_mp;
}

uint64_t (*os_eventlink_disassociate())(uint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return os_eventlink_disassociate_VARIANT_armv81;
  else
    return os_eventlink_disassociate_VARIANT_mp;
}

uint64_t (*os_eventlink_wait())(uint64_t a1, _QWORD *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return os_eventlink_wait_VARIANT_armv81;
  else
    return os_eventlink_wait_VARIANT_mp;
}

uint64_t (*os_eventlink_wait_until())(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return os_eventlink_wait_until_VARIANT_armv81;
  else
    return os_eventlink_wait_until_VARIANT_mp;
}

uint64_t (*os_eventlink_signal())(uint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return os_eventlink_signal_VARIANT_armv81;
  else
    return os_eventlink_signal_VARIANT_mp;
}

uint64_t (*os_eventlink_signal_and_wait())(uint64_t a1, _QWORD *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return os_eventlink_signal_and_wait_VARIANT_armv81;
  else
    return os_eventlink_signal_and_wait_VARIANT_mp;
}

uint64_t (*os_eventlink_signal_and_wait_until())(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return os_eventlink_signal_and_wait_until_VARIANT_armv81;
  else
    return os_eventlink_signal_and_wait_until_VARIANT_mp;
}

uint64_t (*os_workgroup_attr_set_flags())(_DWORD *a1, int a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return os_workgroup_attr_set_flags_VARIANT_armv81;
  else
    return os_workgroup_attr_set_flags_VARIANT_mp;
}

uint64_t (*os_workgroup_attr_set_interval_type())(uint64_t a1, int a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return os_workgroup_attr_set_interval_type_VARIANT_armv81;
  else
    return os_workgroup_attr_set_interval_type_VARIANT_mp;
}

uint64_t (*os_workgroup_attr_set_telemetry_flavor())(uint64_t a1, int a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return os_workgroup_attr_set_telemetry_flavor_VARIANT_armv81;
  else
    return os_workgroup_attr_set_telemetry_flavor_VARIANT_mp;
}

int os_workgroup_copy_port(os_workgroup_t wg, mach_port_t *mach_port_out)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (int)os_workgroup_copy_port_VARIANT_armv81;
  else
    return (int)os_workgroup_copy_port_VARIANT_mp;
}

os_workgroup_t os_workgroup_create_with_port(const char *name, mach_port_t mach_port)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (os_workgroup_t)os_workgroup_create_with_port_VARIANT_armv81;
  else
    return (os_workgroup_t)os_workgroup_create_with_port_VARIANT_mp;
}

os_workgroup_t os_workgroup_create_with_workgroup(const char *name, os_workgroup_t wg)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (os_workgroup_t)os_workgroup_create_with_workgroup_VARIANT_armv81;
  else
    return (os_workgroup_t)os_workgroup_create_with_workgroup_VARIANT_mp;
}

_DWORD *(*os_workgroup_create_with_workload_id_and_port())(const char *a1, char *a2, mach_port_name_t a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return os_workgroup_create_with_workload_id_and_port_VARIANT_armv81;
  else
    return os_workgroup_create_with_workload_id_and_port_VARIANT_mp;
}

_DWORD *(*os_workgroup_create_with_workload_id_and_workgroup())(const char *a1, char *a2, uint64_t a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return os_workgroup_create_with_workload_id_and_workgroup_VARIANT_armv81;
  else
    return os_workgroup_create_with_workload_id_and_workgroup_VARIANT_mp;
}

_DWORD *(*os_workgroup_create_with_workload_id())(const char *a1, char *a2, __int128 *a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return os_workgroup_create_with_workload_id_VARIANT_armv81;
  else
    return os_workgroup_create_with_workload_id_VARIANT_mp;
}

_DWORD *(*os_workgroup_create())(const char *a1, __int128 *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return os_workgroup_create_VARIANT_armv81;
  else
    return os_workgroup_create_VARIANT_mp;
}

void *__cdecl os_workgroup_get_working_arena(os_workgroup_t wg, os_workgroup_index *index_out)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return os_workgroup_get_working_arena_VARIANT_armv81;
  else
    return os_workgroup_get_working_arena_VARIANT_mp;
}

void *(*os_workgroup_interval_copy_current_4AudioToolbox())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return os_workgroup_interval_copy_current_4AudioToolbox_VARIANT_armv81;
  else
    return os_workgroup_interval_copy_current_4AudioToolbox_VARIANT_mp;
}

_DWORD *(*os_workgroup_interval_create_with_workload_id())(const char *a1, char *a2, int a3, __int128 *a4)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return os_workgroup_interval_create_with_workload_id_VARIANT_armv81;
  else
    return os_workgroup_interval_create_with_workload_id_VARIANT_mp;
}

_DWORD *(*os_workgroup_interval_create())(const char *a1, int a2, __int128 *a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return os_workgroup_interval_create_VARIANT_armv81;
  else
    return os_workgroup_interval_create_VARIANT_mp;
}

uint64_t (*os_workgroup_interval_data_set_flags())(_DWORD *a1, unsigned int a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return os_workgroup_interval_data_set_flags_VARIANT_armv81;
  else
    return os_workgroup_interval_data_set_flags_VARIANT_mp;
}

uint64_t (*os_workgroup_interval_data_set_telemetry())(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return os_workgroup_interval_data_set_telemetry_VARIANT_armv81;
  else
    return os_workgroup_interval_data_set_telemetry_VARIANT_mp;
}

int os_workgroup_interval_finish(os_workgroup_interval_t wg, os_workgroup_interval_data_t data)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (int)os_workgroup_interval_finish_VARIANT_armv81;
  else
    return (int)os_workgroup_interval_finish_VARIANT_mp;
}

int os_workgroup_interval_start(os_workgroup_interval_t wg, uint64_t start, uint64_t deadline, os_workgroup_interval_data_t data)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (int)os_workgroup_interval_start_VARIANT_armv81;
  else
    return (int)os_workgroup_interval_start_VARIANT_mp;
}

int os_workgroup_interval_update(os_workgroup_interval_t wg, uint64_t deadline, os_workgroup_interval_data_t data)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (int)os_workgroup_interval_update_VARIANT_armv81;
  else
    return (int)os_workgroup_interval_update_VARIANT_mp;
}

uint64_t (*os_workgroup_join_self())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return os_workgroup_join_self_VARIANT_armv81;
  else
    return os_workgroup_join_self_VARIANT_mp;
}

int os_workgroup_join(os_workgroup_t wg, os_workgroup_join_token_t token_out)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (int)os_workgroup_join_VARIANT_armv81;
  else
    return (int)os_workgroup_join_VARIANT_mp;
}

uint64_t (*os_workgroup_leave_self())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return os_workgroup_leave_self_VARIANT_armv81;
  else
    return os_workgroup_leave_self_VARIANT_mp;
}

int os_workgroup_max_parallel_threads(os_workgroup_t wg, os_workgroup_mpt_attr_t attr)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (int)os_workgroup_max_parallel_threads_VARIANT_armv81;
  else
    return (int)os_workgroup_max_parallel_threads_VARIANT_mp;
}

os_workgroup_parallel_t os_workgroup_parallel_create(const char *name, os_workgroup_attr_t attr)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (os_workgroup_parallel_t)os_workgroup_parallel_create_VARIANT_armv81;
  else
    return (os_workgroup_parallel_t)os_workgroup_parallel_create_VARIANT_mp;
}

int os_workgroup_set_working_arena(os_workgroup_t wg, void *arena, uint32_t max_workers, os_workgroup_working_arena_destructor_t destructor)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (int)os_workgroup_set_working_arena_VARIANT_armv81;
  else
    return (int)os_workgroup_set_working_arena_VARIANT_mp;
}

BOOL os_workgroup_testcancel(os_workgroup_t wg)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (char)os_workgroup_testcancel_VARIANT_armv81;
  else
    return (char)os_workgroup_testcancel_VARIANT_mp;
}

_QWORD *(*voucher_activity_create_with_data())(unint64_t *a1, uint64_t a2, unsigned __int8 a3, const void *a4, size_t a5)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return voucher_activity_create_with_data_VARIANT_armv81;
  else
    return (_QWORD *(*)(unint64_t *, uint64_t, unsigned __int8, const void *, size_t))voucher_activity_create_with_data_VARIANT_mp;
}

_QWORD *(*voucher_activity_create_with_data_2())(unint64_t *a1, uint64_t a2, unsigned __int8 a3, const void *a4, size_t a5, char a6)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return voucher_activity_create_with_data_2_VARIANT_armv81;
  else
    return (_QWORD *(*)(unint64_t *, uint64_t, unsigned __int8, const void *, size_t, char))voucher_activity_create_with_data_2_VARIANT_mp;
}

_QWORD *(*voucher_activity_create_with_location())(unint64_t *a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return voucher_activity_create_with_location_VARIANT_armv81;
  else
    return (_QWORD *(*)(unint64_t *, uint64_t, unsigned __int8, uint64_t))voucher_activity_create_with_location_VARIANT_mp;
}

void (*voucher_activity_flush())(unsigned int a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return voucher_activity_flush_VARIANT_armv81;
  else
    return voucher_activity_flush_VARIANT_mp;
}

mach_vm_address_t (*voucher_activity_get_logging_preferences())(mach_vm_size_t *a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return voucher_activity_get_logging_preferences_VARIANT_armv81;
  else
    return voucher_activity_get_logging_preferences_VARIANT_mp;
}

uint64_t (*voucher_activity_get_metadata_buffer())(_QWORD *a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return voucher_activity_get_metadata_buffer_VARIANT_armv81;
  else
    return voucher_activity_get_metadata_buffer_VARIANT_mp;
}

unint64_t (*voucher_activity_id_allocate())(unsigned __int8 a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return voucher_activity_id_allocate_VARIANT_armv81;
  else
    return voucher_activity_id_allocate_VARIANT_mp;
}

uint64_t (*voucher_activity_initialize_4libtrace())(uint64_t *a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return voucher_activity_initialize_4libtrace_VARIANT_armv81;
  else
    return voucher_activity_initialize_4libtrace_VARIANT_mp;
}

BOOL (*voucher_activity_should_send_strings())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return voucher_activity_should_send_strings_VARIANT_armv81;
  else
    return voucher_activity_should_send_strings_VARIANT_mp;
}

unint64_t *(*voucher_activity_trace())(unint64_t *a1, unint64_t a2, size_t a3, uint64_t a4, char *a5)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (unint64_t *(*)(unint64_t *, unint64_t, size_t, uint64_t, char *))voucher_activity_trace_VARIANT_armv81;
  else
    return voucher_activity_trace_VARIANT_mp;
}

unint64_t *(*voucher_activity_trace_v())(unint64_t *a1, unint64_t a2, size_t a3, uint64_t a4, char *a5, unint64_t a6)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (unint64_t *(*)(unint64_t *, unint64_t, size_t, uint64_t, char *, unint64_t))voucher_activity_trace_v_VARIANT_armv81;
  else
    return voucher_activity_trace_v_VARIANT_mp;
}

unint64_t *(*voucher_activity_trace_v_2())(unint64_t *result, unint64_t a2, size_t a3, uint64_t a4, char *a5, unint64_t a6, char a7)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (unint64_t *(*)(unint64_t *, unint64_t, size_t, uint64_t, char *, unint64_t, char))voucher_activity_trace_v_2_VARIANT_armv81;
  else
    return voucher_activity_trace_v_2_VARIANT_mp;
}

uint64_t (*voucher_adopt())(uint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return voucher_adopt_VARIANT_armv81;
  else
    return voucher_adopt_VARIANT_mp;
}

uint64_t (*voucher_copy())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return voucher_copy_VARIANT_armv81;
  else
    return voucher_copy_VARIANT_mp;
}

uint64_t (*voucher_copy_without_importance())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return voucher_copy_without_importance_VARIANT_armv81;
  else
    return voucher_copy_without_importance_VARIANT_mp;
}

uint64_t (*voucher_copy_with_persona_mach_voucher())(int a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return voucher_copy_with_persona_mach_voucher_VARIANT_armv81;
  else
    return voucher_copy_with_persona_mach_voucher_VARIANT_mp;
}

_DWORD *(*voucher_create_with_mach_msg())(unsigned int *a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return voucher_create_with_mach_msg_VARIANT_armv81;
  else
    return voucher_create_with_mach_msg_VARIANT_mp;
}

void (*voucher_decrement_importance_count4CF())(uint64_t a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return voucher_decrement_importance_count4CF_VARIANT_armv81;
  else
    return voucher_decrement_importance_count4CF_VARIANT_mp;
}

uint64_t (*voucher_get_activity_id())(uint64_t a1, _QWORD *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return voucher_get_activity_id_VARIANT_armv81;
  else
    return voucher_get_activity_id_VARIANT_mp;
}

uint64_t (*voucher_get_activity_id_and_creator())(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return voucher_get_activity_id_and_creator_VARIANT_armv81;
  else
    return voucher_get_activity_id_and_creator_VARIANT_mp;
}

uint64_t (*voucher_get_current_persona())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return voucher_get_current_persona_VARIANT_armv81;
  else
    return voucher_get_current_persona_VARIANT_mp;
}

double (*voucher_get_current_persona_originator_info())(_OWORD *a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return voucher_get_current_persona_originator_info_VARIANT_armv81;
  else
    return voucher_get_current_persona_originator_info_VARIANT_mp;
}

double (*voucher_get_current_persona_proximate_info())(_OWORD *a1)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return voucher_get_current_persona_proximate_info_VARIANT_armv81;
  else
    return voucher_get_current_persona_proximate_info_VARIANT_mp;
}

size_t (*voucher_kvoucher_debug())(uint64_t a1, uint64_t a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return voucher_kvoucher_debug_VARIANT_armv81;
  else
    return voucher_kvoucher_debug_VARIANT_mp;
}

uint64_t (*voucher_process_can_use_arbitrary_personas())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return voucher_process_can_use_arbitrary_personas_VARIANT_armv81;
  else
    return voucher_process_can_use_arbitrary_personas_VARIANT_mp;
}

void (*voucher_replace_default_voucher())()
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return (void (*)())voucher_replace_default_voucher_VARIANT_armv81;
  else
    return voucher_replace_default_voucher_VARIANT_mp;
}

uint64_t (*voucher_release())(uint64_t result, const char *a2)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return voucher_release_VARIANT_armv81;
  else
    return voucher_release_VARIANT_mp;
}

uint64_t (*voucher_retain())(uint64_t result)
{
  if ((MEMORY[0xFFFFFC023] & 2) != 0)
    return voucher_retain_VARIANT_armv81;
  else
    return voucher_retain_VARIANT_mp;
}

uint64_t _dispatch_source_type_data_add_resolver()
{
  char **v0;
  uint64_t (**v1)(char **);

  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v0 = &_dispatch_source_type_data_add_VARIANT_armv81;
  else
    v0 = &_dispatch_source_type_data_add_VARIANT_mp;
  v1 = (uint64_t (**)(char **))&unk_1E1E868E0;
  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v1 = (uint64_t (**)(char **))&unk_1E1E87C58;
  return (*v1)(v0);
}

uint64_t _dispatch_source_type_data_or_resolver()
{
  char **v0;
  uint64_t (**v1)(char **);

  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v0 = &_dispatch_source_type_data_or_VARIANT_armv81;
  else
    v0 = &_dispatch_source_type_data_or_VARIANT_mp;
  v1 = (uint64_t (**)(char **))&unk_1E1E86920;
  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v1 = (uint64_t (**)(char **))&unk_1E1E87C98;
  return (*v1)(v0);
}

uint64_t _dispatch_source_type_data_replace_resolver()
{
  char **v0;
  uint64_t (**v1)(char **);

  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v0 = &_dispatch_source_type_data_replace_VARIANT_armv81;
  else
    v0 = &_dispatch_source_type_data_replace_VARIANT_mp;
  v1 = (uint64_t (**)(char **))&unk_1E1E86960;
  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v1 = (uint64_t (**)(char **))&unk_1E1E87CD8;
  return (*v1)(v0);
}

uint64_t _dispatch_source_type_exclaves_notification_resolver()
{
  char **v0;
  uint64_t (**v1)(char **);

  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v0 = &_dispatch_source_type_exclaves_notification_VARIANT_armv81;
  else
    v0 = &_dispatch_source_type_exclaves_notification_VARIANT_mp;
  v1 = (uint64_t (**)(char **))&unk_1E1E86D20;
  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v1 = (uint64_t (**)(char **))&unk_1E1E88098;
  return (*v1)(v0);
}

uint64_t _dispatch_source_type_interval_resolver()
{
  char **v0;
  uint64_t (**v1)(char **);

  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v0 = &_dispatch_source_type_interval_VARIANT_armv81;
  else
    v0 = &_dispatch_source_type_interval_VARIANT_mp;
  v1 = (uint64_t (**)(char **))&unk_1E1E86B20;
  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v1 = (uint64_t (**)(char **))&unk_1E1E87E98;
  return (*v1)(v0);
}

uint64_t _dispatch_source_type_mach_recv_resolver()
{
  char **v0;
  uint64_t (**v1)(char **);

  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v0 = &_dispatch_source_type_mach_recv_VARIANT_armv81;
  else
    v0 = &_dispatch_source_type_mach_recv_VARIANT_mp;
  v1 = (uint64_t (**)(char **))&unk_1E1E86DE0;
  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v1 = (uint64_t (**)(char **))&unk_1E1E88158;
  return (*v1)(v0);
}

uint64_t _dispatch_source_type_mach_send_resolver()
{
  char **v0;
  uint64_t (**v1)(char **);

  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v0 = &_dispatch_source_type_mach_send_VARIANT_armv81;
  else
    v0 = &_dispatch_source_type_mach_send_VARIANT_mp;
  v1 = (uint64_t (**)(char **))&unk_1E1E86D60;
  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v1 = (uint64_t (**)(char **))&unk_1E1E880D8;
  return (*v1)(v0);
}

uint64_t _dispatch_source_type_memorypressure_resolver()
{
  char **v0;
  uint64_t (**v1)(char **);

  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v0 = &_dispatch_source_type_memorypressure_VARIANT_armv81;
  else
    v0 = &_dispatch_source_type_memorypressure_VARIANT_mp;
  v1 = (uint64_t (**)(char **))&unk_1E1E86CA0;
  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v1 = (uint64_t (**)(char **))&unk_1E1E88018;
  return (*v1)(v0);
}

uint64_t _dispatch_source_type_nw_channel_resolver()
{
  char **v0;
  uint64_t (**v1)(char **);

  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v0 = &_dispatch_source_type_nw_channel_VARIANT_armv81;
  else
    v0 = &_dispatch_source_type_nw_channel_VARIANT_mp;
  v1 = (uint64_t (**)(char **))&unk_1E1E86C60;
  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v1 = (uint64_t (**)(char **))&unk_1E1E87FD8;
  return (*v1)(v0);
}

uint64_t _dispatch_source_type_proc_resolver()
{
  char **v0;
  uint64_t (**v1)(char **);

  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v0 = &_dispatch_source_type_proc_VARIANT_armv81;
  else
    v0 = &_dispatch_source_type_proc_VARIANT_mp;
  v1 = (uint64_t (**)(char **))&unk_1E1E86B60;
  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v1 = (uint64_t (**)(char **))&unk_1E1E87ED8;
  return (*v1)(v0);
}

uint64_t _dispatch_source_type_read_resolver()
{
  char **v0;
  uint64_t (**v1)(char **);

  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v0 = &_dispatch_source_type_read_VARIANT_armv81;
  else
    v0 = &_dispatch_source_type_read_VARIANT_mp;
  v1 = (uint64_t (**)(char **))&unk_1E1E869A0;
  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v1 = (uint64_t (**)(char **))&unk_1E1E87D18;
  return (*v1)(v0);
}

uint64_t _dispatch_source_type_signal_resolver()
{
  char **v0;
  uint64_t (**v1)(char **);

  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v0 = &_dispatch_source_type_signal_VARIANT_armv81;
  else
    v0 = &_dispatch_source_type_signal_VARIANT_mp;
  v1 = (uint64_t (**)(char **))&unk_1E1E86A20;
  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v1 = (uint64_t (**)(char **))&unk_1E1E87D98;
  return (*v1)(v0);
}

uint64_t _dispatch_source_type_sock_resolver()
{
  char **v0;
  uint64_t (**v1)(char **);

  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v0 = &_dispatch_source_type_sock_VARIANT_armv81;
  else
    v0 = &_dispatch_source_type_sock_VARIANT_mp;
  v1 = (uint64_t (**)(char **))&unk_1E1E86C20;
  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v1 = (uint64_t (**)(char **))&unk_1E1E87F98;
  return (*v1)(v0);
}

uint64_t _dispatch_source_type_timer_resolver()
{
  char **v0;
  uint64_t (**v1)(char **);

  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v0 = &_dispatch_source_type_timer_VARIANT_armv81;
  else
    v0 = &_dispatch_source_type_timer_VARIANT_mp;
  v1 = (uint64_t (**)(char **))&unk_1E1E86A60;
  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v1 = (uint64_t (**)(char **))&unk_1E1E87DD8;
  return (*v1)(v0);
}

uint64_t _dispatch_source_type_vfs_resolver()
{
  char **v0;
  uint64_t (**v1)(char **);

  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v0 = &_dispatch_source_type_vfs_VARIANT_armv81;
  else
    v0 = &_dispatch_source_type_vfs_VARIANT_mp;
  v1 = (uint64_t (**)(char **))&unk_1E1E86BE0;
  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v1 = (uint64_t (**)(char **))&unk_1E1E87F58;
  return (*v1)(v0);
}

uint64_t _dispatch_source_type_vm_resolver()
{
  char **v0;
  uint64_t (**v1)(char **);

  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v0 = &_dispatch_source_type_vm_VARIANT_armv81;
  else
    v0 = &_dispatch_source_type_vm_VARIANT_mp;
  v1 = (uint64_t (**)(char **))&unk_1E1E86CE0;
  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v1 = (uint64_t (**)(char **))&unk_1E1E88058;
  return (*v1)(v0);
}

uint64_t _dispatch_source_type_vnode_resolver()
{
  char **v0;
  uint64_t (**v1)(char **);

  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v0 = &_dispatch_source_type_vnode_VARIANT_armv81;
  else
    v0 = &_dispatch_source_type_vnode_VARIANT_mp;
  v1 = (uint64_t (**)(char **))&unk_1E1E86BA0;
  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v1 = (uint64_t (**)(char **))&unk_1E1E87F18;
  return (*v1)(v0);
}

uint64_t _dispatch_source_type_write_resolver()
{
  char **v0;
  uint64_t (**v1)(char **);

  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v0 = &_dispatch_source_type_write_VARIANT_armv81;
  else
    v0 = &_dispatch_source_type_write_VARIANT_mp;
  v1 = (uint64_t (**)(char **))&unk_1E1E869E0;
  if ((MEMORY[0xFFFFFC020] & 0x2000000) != 0)
    v1 = (uint64_t (**)(char **))&unk_1E1E87D58;
  return (*v1)(v0);
}

uint64_t dispatch_atfork_prepare(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = j___voucher_atfork_prepare(a1, a2, a3, a4, a5, a6, a7, a8);
  return _os_object_atfork_prepare(v8);
}

uint64_t dispatch_atfork_parent()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = _os_object_atfork_parent();
  return j___voucher_atfork_parent(v0, v1, v2, v3, v4, v5, v6, v7);
}

uint64_t dispatch_atfork_child()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;

  v0 = _os_object_atfork_child();
  v8 = j___voucher_atfork_child(v0, v1, v2, v3, v4, v5, v6, v7);
  v16 = j___dispatch_event_loop_atfork_child(v8, v9, v10, v11, v12, v13, v14, v15);
  if ((_dispatch_unsafe_fork & 1) != 0)
    _dispatch_child_of_unsafe_fork = 1;
  result = j___dispatch_queue_atfork_child(v16, v17, v18, v19, v20, v21, v22, v23);
  _dispatch_unsafe_fork = 0;
  return result;
}

uint64_t _dispatch_sigmask()
{
  uint64_t v0;
  uint64_t v1;
  sigset_t v3;

  v3 = -67116761;
  v0 = pthread_sigmask(1, &v3, 0);
  v1 = v0;
  if ((_DWORD)v0)
    _dispatch_bug(108, (int)v0);
  return v1;
}

uint64_t _dispatch_is_multithreaded()
{
  return _dispatch_unsafe_fork & 1;
}

uint64_t _dispatch_is_fork_of_multithreaded_parent()
{
  return _dispatch_child_of_unsafe_fork;
}

dispatch_queue_t dispatch_get_current_queue(void)
{
  NSObject *v0;

  v0 = *(NSObject **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160);
  if (v0)
    return v0;
  else
    return (dispatch_queue_t)&off_1ECCEA100;
}

uint64_t *_dispatch_queue_attr_to_info(uint64_t *result)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;

  if (result)
  {
    v1 = (char *)result - (char *)&_dispatch_queue_attr_concurrent;
    if (result < (uint64_t *)&_dispatch_queue_attr_concurrent || result >= __block_descriptor_tmp_3)
      _dispatch_queue_attr_to_info_cold_1(result);
    v3 = (((unint64_t)(v1 >> 4) >> 6) * (unsigned __int128)0x2492492492492493uLL) >> 64;
    v4 = (((unint64_t)(v1 >> 4) >> 6) * (unsigned __int128)0xC30C30C30C30C31uLL) >> 64;
    return (uint64_t *)((((_DWORD)v1 << 15) & 0x100000 | (((v1 >> 4) & 1) << 21) | -(((v1 >> 4) << 6) & 0xF00) & 0xFF00 | (((unint64_t)(v1 >> 4) >> 6) - 7 * (_DWORD)v3) | ((v3 - 3 * ((v3 * (unsigned __int128)0x5555555555555556uLL) >> 64)) << 18) | ((v4 - 3 * ((v4 * (unsigned __int128)0x5555555555555556uLL) >> 64)) << 16)) ^ 0x100000);
  }
  return result;
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  unsigned __int8 v3;
  uint64_t *v6;
  unsigned int v7;
  unint64_t v8;
  int v9;

  if (qos_class <= QOS_CLASS_USER_INTERACTIVE)
  {
    v3 = relative_priority;
    if (((1 << qos_class) & 0x202220221) != 0
      && (relative_priority == 0 || relative_priority >= 0xFFFFFFF1))
    {
      v6 = _dispatch_queue_attr_to_info((uint64_t *)attr);
      HIDWORD(v8) = qos_class - 5;
      LODWORD(v8) = qos_class - 5;
      v7 = v8 >> 2;
      if (v7 > 7)
        v9 = 0;
      else
        v9 = dword_18A06ECB4[v7];
      return (dispatch_queue_attr_t)_dispatch_queue_attr_from_info(v6 & 0x3F0000 | (v3 << 8) | v9);
    }
  }
  return attr;
}

__objc2_class **_dispatch_queue_attr_from_info(unint64_t a1)
{
  return &_dispatch_queue_attr_concurrent
       + 2
       * (((a1 >> 21) & 1 | (2
                           * ((32 * (7 * (3 * ((a1 >> 16) & 3) + ((a1 >> 18) & 3)) + a1)
                             + 2 * -((__int16)a1 >> 8)) & 0xFFFFFFFFFFFFFFFELL | (a1 >> 20) & 1))) ^ 2);
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  unsigned int v1;

  v1 = _dispatch_queue_attr_to_info((uint64_t *)attr);
  return (dispatch_queue_attr_t)_dispatch_queue_attr_from_info(v1 | 0x200000);
}

__objc2_class **dispatch_queue_attr_make_with_overcommit(uint64_t *a1, int a2)
{
  unsigned int v3;
  int v4;

  v3 = _dispatch_queue_attr_to_info(a1) & 0x3CFFFF;
  if (a2)
    v4 = 0x10000;
  else
    v4 = 0x20000;
  return _dispatch_queue_attr_from_info(v3 | v4);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  unint64_t v2;

  v2 = _dispatch_queue_attr_to_info((uint64_t *)attr) & 0x33FFFF | ((frequency & 3) << 18);
  return (dispatch_queue_attr_t)_dispatch_queue_attr_from_info(v2);
}

void _dispatch_object_no_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: do_invoke called";
  qword_1EDF52D38 = v1;
  __break(1u);
}

void _dispatch_object_no_dispose(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: do_dispose called";
  qword_1EDF52D38 = v1;
  __break(1u);
}

size_t _dispatch_object_missing_debug(int a1, char *__dst, size_t a3)
{
  return strlcpy(__dst, "missing do_debug vtable slot: ", a3);
}

void _dispatch_queue_no_activate(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: dq_activate called";
  qword_1EDF52D38 = v1;
  __break(1u);
}

void _dispatch_data_destructor_free_block_invoke()
{
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: free destructor called";
  __break(1u);
}

void _dispatch_data_destructor_none_block_invoke_2()
{
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: none destructor called";
  __break(1u);
}

void _dispatch_data_destructor_vm_deallocate_block_invoke_3()
{
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: vmdeallocate destructor called";
  __break(1u);
}

void _dispatch_data_destructor_inline_block_invoke_4()
{
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: inline destructor called";
  __break(1u);
}

BOOL _dispatch_parse_BOOL(const char *a1)
{
  return !strcasecmp(a1, "YES") || !strcasecmp(a1, "Y") || !strcasecmp(a1, "TRUE") || atoi(a1) != 0;
}

BOOL _dispatch_getenv_BOOL(const char *a1, uint64_t a2)
{
  char *v3;

  v3 = getenv(a1);
  if (v3)
    return _dispatch_parse_BOOL(v3);
  else
    return a2;
}

uint64_t _dispatch_build_init()
{
  size_t v1;
  int v2[2];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C874D8];
  *(_QWORD *)v2 = 0x4100000001;
  v1 = 16;
  return sysctl(v2, 2u, &unk_1EDF52DB8, &v1, 0, 0);
}

uint64_t _dispatch_fault(uint64_t a1, char *__format, ...)
{
  uint64_t result;
  char __str[1024];
  uint64_t v4;
  va_list va;

  va_start(va, __format);
  v4 = *MEMORY[0x1E0C874D8];
  result = vsnprintf(__str, 0x400uLL, __format, va);
  if ((_dispatch_mode & 1) != 0)
  {
    qword_1EDF52D20 = (uint64_t)__str;
  }
  else if ((_dispatch_mode & 2) == 0)
  {
    return _dispatch_fault_cold_1(__str);
  }
  return result;
}

uint64_t _dispatch_continuation_get_function_symbol(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((*a1 & 0x20) != 0)
  {
    v2 = a1[5];
    v3 = *(_QWORD *)(v2 + 32);
    if (v3 != 3512316172)
      _dispatch_block_sync_invoke_VARIANT_mp_cold_5(v3);
    v4 = *(_QWORD *)(v2 + 72);
    goto LABEL_7;
  }
  if ((*a1 & 0x10) != 0)
  {
    v4 = a1[5];
LABEL_7:
    v1 = (_QWORD *)(v4 + 16);
    return *v1;
  }
  v1 = a1 + 4;
  return *v1;
}

void _dispatch_debugv(unint64_t *a1, const char *a2, va_list a3)
{
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11[2048];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C874D8];
  if (a1)
  {
    v5 = *a1;
    if ((*a1 & 1) != 0
      || (v5 >= (unint64_t)OS_dispatch_object
        ? (v6 = v5 >= (unint64_t)OS_object)
        : (v6 = 1),
          v6))
    {
      v7 = _dispatch_objc_debug(a1, (uint64_t)v11, 2048);
    }
    else
    {
      v7 = (*(uint64_t (**)(void))(v5 + 56))();
    }
    v8 = v7 + 2;
    *(_WORD *)&v11[v7] = 8250;
    v11[v7 + 2] = 0;
  }
  else
  {
    v8 = __strlcpy_chk();
  }
  v9 = vsnprintf(&v11[v8], 2048 - v8, a2, a3);
  if (v8 + (unint64_t)(v9 & ~(v9 >> 31)) >= 0x7FF)
    v10 = 2047;
  else
    v10 = v8 + (v9 & ~(v9 >> 31));
  if (qword_1EDF52DB0 != -1)
    dispatch_once_f_0(&qword_1EDF52DB0, 0, (dispatch_function_t)_dispatch_logv_init);
  if ((_MergedGlobals & 1) == 0)
  {
    if (dispatch_logfile == -1)
      _simple_asl_log();
    else
      _dispatch_log_file((uint64_t)v11, v10);
  }
}

uint64_t _dispatch_temporary_resource_shortage()
{
  return sleep_NOCANCEL();
}

void *_dispatch_calloc(size_t a1, size_t a2)
{
  size_t v2;
  size_t v3;
  void *result;

  v2 = a2;
  v3 = a1;
  while (1)
  {
    result = malloc_type_calloc(a1, a2, 0x1B54906DuLL);
    if (result)
      break;
    _dispatch_temporary_resource_shortage();
    a1 = v3;
    a2 = v2;
  }
  return result;
}

const char *_dispatch_strdup_if_mutable(const char *a1)
{
  const char *v1;
  size_t v2;
  void *v4;
  void *v5;

  v1 = a1;
  v2 = strlen(a1) + 1;
  if ((_dyld_is_memory_immutable() & 1) == 0)
  {
    v4 = malloc_type_malloc(v2, 0x129C783DuLL);
    if (v4)
    {
      v5 = v4;
      memcpy(v4, v1, v2);
      return (const char *)v5;
    }
    else
    {
      _dispatch_strdup_if_mutable_cold_1();
      return 0;
    }
  }
  return v1;
}

void *_dispatch_Block_copy(void *aBlock)
{
  void *result;

  if (!aBlock)
    _dispatch_Block_copy_cold_1();
  while (1)
  {
    result = _Block_copy(aBlock);
    if (result)
      break;
    _dispatch_temporary_resource_shortage();
  }
  return result;
}

void _dispatch_call_block_and_release(void (**a1)(void))
{
  a1[2]();
  _Block_release(a1);
}

uint64_t dispatch_mach_msg_get_context(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + ((*(unsigned int *)(a1 + 4) + 3) & 0x1FFFFFFFCLL);
  if (*(_DWORD *)(v1 + 4) < 0x3Cu)
    return 0;
  else
    return *(_QWORD *)(v1 + 52);
}

uint64_t _dispatch_wakeup_runloop_thread()
{
  return 0;
}

void _dispatch_mach_notify_port_destroyed(uint64_t a1, unsigned int a2)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: unexpected receipt of port-destroyed";
  qword_1EDF52D38 = a2;
  __break(1u);
}

void _dispatch_mach_notify_no_senders(uint64_t a1, unsigned int a2)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: unexpected receipt of no-more-senders";
  qword_1EDF52D38 = a2;
  __break(1u);
}

uint64_t _dispatch_mach_xpc_no_handle_message()
{
  return 0;
}

uint64_t _dispatch_mach_msg_context_no_async_reply_queue()
{
  return 0;
}

void _dispatch_mach_default_async_reply_handler()
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: _dispatch_mach_default_async_reply_handler called";
  qword_1EDF52D38 = (uint64_t)_dispatch_mach_xpc_hooks;
  __break(1u);
}

uint64_t _dispatch_mach_enable_sigterm()
{
  return 1;
}

uint64_t _dispatch_logv_init()
{
  uint64_t result;
  const char *v1;
  int v2;
  pid_t v3;
  int v4;
  const char *v5;
  const char *v6;
  pid_t v7;
  timeval __str[64];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C874D8];
  result = (uint64_t)getenv("LIBDISPATCH_LOG");
  if (!result)
    goto LABEL_7;
  v1 = (const char *)result;
  result = strcmp((const char *)result, "YES");
  if (!(_DWORD)result)
    goto LABEL_7;
  result = strcmp(v1, "NO");
  if (!(_DWORD)result)
  {
    _MergedGlobals = 1;
    return result;
  }
  result = strcmp(v1, "syslog");
  if (!(_DWORD)result)
    goto LABEL_7;
  result = strcmp(v1, "file");
  if ((_DWORD)result)
  {
    result = strcmp(v1, "stderr");
    if ((_DWORD)result)
    {
LABEL_7:
      v2 = 0;
      goto LABEL_8;
    }
    dispatch_logfile = 2;
  }
  v2 = 1;
LABEL_8:
  if ((_MergedGlobals & 1) == 0)
  {
    result = dispatch_logfile;
    if (dispatch_logfile != -1)
      v2 = 0;
    if (v2 == 1)
    {
      v3 = getpid();
      snprintf((char *)__str, 0x400uLL, "/var/tmp/libdispatch.%d.log", v3);
      result = open_NOCANCEL();
      dispatch_logfile = result;
    }
    if ((_DWORD)result != -1)
    {
      __str[0].tv_sec = 0;
      *(_QWORD *)&__str[0].tv_usec = 0;
      gettimeofday(__str, 0);
      v4 = dispatch_logfile;
      v5 = getprogname();
      if (v5)
        v6 = v5;
      else
        v6 = (const char *)&unk_18A069831;
      v7 = getpid();
      return dprintf(v4, "=== log file opened for %s[%u] at %ld.%06u ===\n", v6, v7, __str[0].tv_sec, __str[0].tv_usec);
    }
  }
  return result;
}

uint64_t _dispatch_log_file(uint64_t a1, uint64_t a2)
{
  unint64_t StatusReg;
  uint64_t result;

  *(_BYTE *)(a1 + a2) = 10;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
    result = write_NOCANCEL();
  while (result == -1 && **(_DWORD **)(StatusReg + 8) == 4);
  return result;
}

uint64_t _dispatch_logv_file(char *__format, va_list a2)
{
  uint64_t result;
  int v3;
  unint64_t StatusReg;
  char __str[2048];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C874D8];
  result = vsnprintf(__str, 0x800uLL, __format, a2);
  if ((result & 0x80000000) == 0)
  {
    if (result >= 0x7FF)
      v3 = 2047;
    else
      v3 = result;
    __str[v3] = 10;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
      result = write_NOCANCEL();
    while (result == -1 && **(_DWORD **)(StatusReg + 8) == 4);
  }
  return result;
}

char *OUTLINED_FUNCTION_5_1()
{
  int v0;

  return strerror(v0);
}

const char *_os_object_init()
{
  char *v0;
  char *v1;
  const char *result;
  Block_callbacks_RR v3;

  _objc_init();
  v3 = *(Block_callbacks_RR *)ymmword_1E1E98F88;
  _Block_use_RR2(&v3);
  v0 = getenv("OBJC_DEBUG_MISSING_POOLS");
  if (v0)
    _os_object_debug_missing_pools = _dispatch_parse_BOOL(v0);
  v1 = getenv("DISPATCH_DEBUG_MISSING_POOLS");
  if (v1)
    _os_object_debug_missing_pools = _dispatch_parse_BOOL(v1);
  result = getenv("LIBDISPATCH_DEBUG_MISSING_POOLS");
  if (result)
  {
    result = (const char *)_dispatch_parse_BOOL(result);
    _os_object_debug_missing_pools = (char)result;
  }
  return result;
}

id _os_object_alloc_bridged(objc_class *a1, uint64_t a2)
{
  objc_class *v2;
  size_t v3;
  id result;

  v2 = a1;
  v3 = a2 - 8;
  while (1)
  {
    result = class_createInstance(a1, v3);
    if (result)
      break;
    _dispatch_temporary_resource_shortage();
    a1 = v2;
  }
  return result;
}

_DWORD *_os_object_alloc_realized(objc_class *a1, uint64_t a2)
{
  objc_class *v2;
  size_t v3;
  _DWORD *result;

  v2 = a1;
  v3 = a2 - 8;
  while (1)
  {
    result = class_createInstance(a1, v3);
    if (result)
      break;
    _dispatch_temporary_resource_shortage();
    a1 = v2;
  }
  result[2] = 1;
  result[3] = 1;
  return result;
}

_DWORD *_os_object_alloc(uint64_t a1, uint64_t a2)
{
  objc_class *v3;

  v3 = (objc_class *)objc_opt_class();
  return _os_object_alloc_realized(v3, a2);
}

uint64_t _os_object_xref_dispose(void *a1, const char *a2)
{
  atomic_load((unsigned int *)a1 + 3);
  return objc_msgSend(a1, "_xref_dispose");
}

uint64_t _os_object_dispose(void *a1, const char *a2)
{
  atomic_load((unsigned int *)a1 + 2);
  return objc_msgSend(a1, "dealloc");
}

id _dispatch_objc_alloc(objc_class *a1, uint64_t a2)
{
  objc_class *v2;
  size_t v3;
  id result;

  v2 = a1;
  v3 = a2 - 8;
  while (1)
  {
    result = class_createInstance(a1, v3);
    if (result)
      break;
    _dispatch_temporary_resource_shortage();
    a1 = v2;
  }
  return result;
}

uint64_t _dispatch_objc_set_context(void *a1, const char *a2)
{
  return objc_msgSend(a1, "_setContext:", a2);
}

uint64_t _dispatch_objc_set_finalizer_f(void *a1, const char *a2)
{
  return objc_msgSend(a1, "_setFinalizer:", a2);
}

uint64_t _dispatch_objc_set_target_queue(void *a1, const char *a2)
{
  return objc_msgSend(a1, "_setTargetQueue:", a2);
}

uint64_t _dispatch_last_resort_autorelease_pool_push(uint64_t result)
{
  uint64_t v1;

  if (!_os_object_debug_missing_pools)
  {
    v1 = result;
    result = MEMORY[0x18D766D94]();
    *(_QWORD *)(v1 + 24) = result;
  }
  return result;
}

void _dispatch_last_resort_autorelease_pool_pop(uint64_t a1)
{
  if (!_os_object_debug_missing_pools)
  {
    objc_autoreleasePoolPop(*(void **)(a1 + 24));
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t _dispatch_client_callout(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_18A054A98(void *a1)
{
  objc_begin_catch(a1);
  objc_terminate();
}

void sub_18A054AA4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t _dispatch_client_callout2(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

void sub_18A054AD4(void *a1)
{
  objc_begin_catch(a1);
  objc_terminate();
}

void sub_18A054AE0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t _dispatch_client_callout3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

void sub_18A054B10(void *a1)
{
  objc_begin_catch(a1);
  objc_terminate();
}

void sub_18A054B1C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t _dispatch_client_callout4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

void sub_18A054B4C(void *a1)
{
  objc_begin_catch(a1);
  objc_terminate();
}

void sub_18A054B58(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t _dispatch_client_callout3_a(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

void sub_18A054B88(void *a1)
{
  objc_begin_catch(a1);
  objc_terminate();
}

void sub_18A054B94(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void *_dispatch_block_create(uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  dispatch_group_t v17;
  _QWORD v19[4];
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void *aBlocka;
  dispatch_group_t group;
  uint64_t v28;
  int v29;
  int v30;
  int v31;

  v31 = 0;
  v30 = 0;
  v19[0] = MEMORY[0x1E0C87450];
  v19[1] = 1174405120;
  v19[2] = ___dispatch_block_create_block_invoke;
  v19[3] = &__block_descriptor_tmp_4;
  v20 = 3512316172;
  v21 = a1;
  v22 = 0;
  v23 = 0;
  v24 = a3;
  v25 = a2;
  group = 0;
  v28 = 0;
  aBlocka = 0;
  v29 = 0;
  if ((unint64_t)(a2 + 1) < 2)
  {
    if (!aBlock)
      goto LABEL_4;
    goto LABEL_3;
  }
  voucher_retain_0(a2, a2, a3, (uint64_t)aBlock, a5, a6, a7, a8);
  if (aBlock)
LABEL_3:
    aBlocka = _dispatch_Block_copy(aBlock);
LABEL_4:
  v16 = _dispatch_Block_copy(v19);
  if (v20 == 3512316172)
  {
    v17 = group;
    if (group)
    {
      if (!v23)
      {
        dispatch_group_leave_0(group);
        v17 = group;
      }
      _os_object_release_without_xref_dispose_0((uint64_t)v17, v9, v10, v11, v12, v13, v14, v15);
    }
    if (v28)
      _os_object_release_internal_n_0(v28, 2, v10, v11, v12, v13, v14, v15);
    if (aBlocka)
      _Block_release(aBlocka);
    if ((unint64_t)(v25 + 1) >= 2)
      voucher_release_0(v25, v9, v10, v11, v12, v13, v14, v15);
  }
  return v16;
}

uint64_t ___dispatch_block_create_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return j___dispatch_block_invoke_direct(a1 + 32, a2, a3, a4, a5, a6, a7, a8);
}

void *__copy_helper_block_8_32c35_ZTS29dispatch_block_private_data_s(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *result;

  v10 = a2[5];
  v12 = a2[7];
  v11 = a2[8];
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = 3512316172;
  *(_QWORD *)(a1 + 40) = v10;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 64) = v11;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  if ((unint64_t)(v11 + 1) >= 2)
    voucher_retain_0(v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  result = (void *)a2[9];
  if (result)
  {
    result = _dispatch_Block_copy(result);
    *(_QWORD *)(a1 + 72) = result;
  }
  if (a2[4])
  {
    result = (void *)j___dispatch_group_create_and_enter((uint64_t)result, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)(a1 + 80) = result;
  }
  return result;
}

uint64_t __destroy_helper_block_8_32c35_ZTS29dispatch_block_private_data_s(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  const void *v11;

  if (*(_QWORD *)(result + 32) == 3512316172)
  {
    v8 = result;
    v9 = *(NSObject **)(result + 80);
    if (v9)
    {
      if (!*(_DWORD *)(v8 + 52))
      {
        dispatch_group_leave_0(v9);
        v9 = *(NSObject **)(v8 + 80);
      }
      _os_object_release_without_xref_dispose_0((uint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
    v10 = *(_QWORD *)(v8 + 88);
    if (v10)
      _os_object_release_internal_n_0(v10, 2, a3, a4, a5, a6, a7, a8);
    v11 = *(const void **)(v8 + 72);
    if (v11)
      _Block_release(v11);
    result = *(_QWORD *)(v8 + 64);
    if ((unint64_t)(result + 1) >= 2)
      return voucher_release_0(result, a2, a3, a4, a5, a6, a7, a8);
  }
  return result;
}

uint64_t _dispatch_wait_for_enqueuer(unint64_t *a1)
{
  int v1;
  unint64_t v2;

  v1 = -10;
  while (1)
  {
    v2 = __ldxr(a1);
    if (v2)
      break;
    __wfe();
    if (__CFADD__(v1++, 1))
      return __DISPATCH_WAIT_FOR_ENQUEUER__((uint64_t *)a1);
  }
  __clrex();
  return v2;
}

uint64_t __DISPATCH_WAIT_FOR_ENQUEUER__(uint64_t *a1)
{
  uint64_t result;
  int v3;

  result = *a1;
  if (!result)
  {
    v3 = 1;
    do
    {
      _pthread_yield_to_enqueuer_4dispatch();
      result = *a1;
      ++v3;
    }
    while (!*a1);
  }
  return result;
}

NSObject *dispatch_data_create_with_transform(NSObject *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  uint64_t *v9;
  uint64_t (*v11);
  uint64_t (*v12);
  uint64_t v13;
  unsigned __int16 *v14;

  v4 = a2;
  v5 = a1;
  v6 = *a2;
  if (*a2 == 16)
  {
    v14 = 0;
    v7 = _dispatch_data_subrange_map(a1, (const void **)&v14, 0, 2uLL);
    if (!v7)
      return 0;
    v8 = *v14;
    if (v8 == 65534)
      v9 = (uint64_t *)&_dispatch_data_format_type_utf16be;
    else
      v9 = (uint64_t *)&_dispatch_data_format_type_utf8;
    dispatch_release_0(v7);
    if (v8 == 65279)
      v4 = (uint64_t *)&_dispatch_data_format_type_utf16le;
    else
      v4 = v9;
    v6 = *v4;
  }
  if ((v6 & ~a3[1]) != 0 || (*a3 & ~v4[2]) != 0)
    return 0;
  if (dispatch_data_get_size_0(v5))
  {
    v11 = (uint64_t (*))v4[3];
    if (v11)
    {
      v5 = v11(v5);
      if (!v5)
        return v5;
    }
    else
    {
      dispatch_retain_0(v5);
    }
    v12 = (uint64_t (*))a3[4];
    if (v12)
    {
      v13 = v12(v5);
    }
    else
    {
      dispatch_retain_0(v5);
      v13 = (uint64_t)v5;
    }
    dispatch_release_0(v5);
    return v13;
  }
  return v5;
}

uint64_t _dispatch_transform_from_base32(NSObject *a1)
{
  return _dispatch_transform_from_base32_with_table(a1, (uint64_t)&base32_decode_table, 91);
}

dispatch_data_t _dispatch_transform_to_base32(NSObject *a1)
{
  return _dispatch_transform_to_base32_with_table(a1, (uint64_t)"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567");
}

uint64_t _dispatch_transform_from_base32hex(NSObject *a1)
{
  return _dispatch_transform_from_base32_with_table(a1, (uint64_t)&base32hex_decode_table, 33);
}

dispatch_data_t _dispatch_transform_to_base32hex(NSObject *a1)
{
  return _dispatch_transform_to_base32_with_table(a1, (uint64_t)"0123456789ABCDEFGHIJKLMNOPQRSTUV");
}

uint64_t _dispatch_transform_from_base64(NSObject *a1)
{
  BOOL v1;
  uint64_t v2;
  _QWORD v4[8];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  __objc2_class **v8;
  _QWORD v9[4];
  _QWORD v10[4];
  _QWORD v11[4];

  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x2000000000;
  v11[3] = 0;
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2000000000;
  v10[3] = 0;
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2000000000;
  v9[3] = 0;
  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = &_dispatch_data_empty;
  v4[0] = MEMORY[0x1E0C87450];
  v4[1] = 0x40000000;
  v4[2] = ___dispatch_transform_from_base64_block_invoke;
  v4[3] = &unk_1E1E99128;
  v4[4] = v10;
  v4[5] = v9;
  v4[6] = v11;
  v4[7] = &v5;
  v1 = dispatch_data_apply_0(a1, v4);
  v2 = v6[3];
  if (!v1)
  {
    dispatch_release_0((dispatch_object_t)v6[3]);
    v2 = 0;
  }
  _Block_object_dispose(&v5, 8);
  _Block_object_dispose(v9, 8);
  _Block_object_dispose(v10, 8);
  _Block_object_dispose(v11, 8);
  return v2;
}

dispatch_data_t _dispatch_transform_to_base64(NSObject *a1)
{
  size_t size_0;
  dispatch_data_t v3;
  unint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  void *v8;
  _QWORD v10[8];
  _QWORD v11[4];
  _QWORD v12[4];

  size_0 = dispatch_data_get_size_0(a1);
  v3 = 0;
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x2000000000;
  v12[3] = 0;
  if (size_0 == 3 * (size_0 / 3))
    v4 = size_0 / 3;
  else
    v4 = size_0 / 3 + 1;
  if (!(v4 >> 62))
  {
    v5 = size_0;
    v6 = 4 * v4;
    v7 = malloc_type_malloc(4 * v4, 0x36FC11AuLL);
    if (v7)
    {
      v8 = v7;
      v11[0] = 0;
      v11[1] = v11;
      v11[2] = 0x2000000000;
      v11[3] = v7;
      v10[0] = MEMORY[0x1E0C87450];
      v10[1] = 0x40000000;
      v10[2] = ___dispatch_transform_to_base64_block_invoke;
      v10[3] = &unk_1E1E99150;
      v10[4] = v12;
      v10[5] = v11;
      v10[6] = a1;
      v10[7] = v5;
      if (dispatch_data_apply_0(a1, v10))
      {
        v3 = dispatch_data_create_0(v8, v6, 0, &__block_literal_global);
      }
      else
      {
        free(v8);
        v3 = 0;
      }
      _Block_object_dispose(v11, 8);
    }
    else
    {
      v3 = 0;
    }
  }
  _Block_object_dispose(v12, 8);
  return v3;
}

uint64_t _dispatch_transform_from_utf16le(NSObject *a1)
{
  return _dispatch_transform_from_utf16(a1, 1);
}

uint64_t _dispatch_transform_to_utf16le(NSObject *a1)
{
  return _dispatch_transform_to_utf16(a1, 1);
}

uint64_t _dispatch_transform_from_utf16be(NSObject *a1)
{
  return _dispatch_transform_from_utf16(a1, 2);
}

uint64_t _dispatch_transform_to_utf16be(NSObject *a1)
{
  return _dispatch_transform_to_utf16(a1, 2);
}

dispatch_data_t _dispatch_transform_to_utf8_without_bom(NSObject *a1)
{
  NSObject *v1;
  NSObject *v2;
  BOOL v3;
  int v4;
  size_t size_0;
  unsigned __int8 *v7;

  v1 = a1;
  v7 = 0;
  v2 = _dispatch_data_subrange_map(a1, (const void **)&v7, 0, 3uLL);
  if (v2
    && (*(unsigned __int16 *)v7 == 48111 ? (v3 = v7[2] == 191) : (v3 = 0),
        v3 ? (v4 = 0) : (v4 = 1),
        dispatch_release_0(v2),
        !v4))
  {
    size_0 = dispatch_data_get_size_0(v1);
    return dispatch_data_create_subrange_0(v1, 3uLL, size_0 - 3);
  }
  else
  {
    dispatch_retain_0(v1);
  }
  return v1;
}

dispatch_data_t _dispatch_data_subrange_map(NSObject *a1, const void **a2, size_t offset, size_t length)
{
  NSObject *subrange_0;
  dispatch_data_t map_0;

  subrange_0 = dispatch_data_create_subrange_0(a1, offset, length);
  if (dispatch_data_get_size_0(subrange_0) == length)
    map_0 = dispatch_data_create_map_0(subrange_0, a2, 0);
  else
    map_0 = 0;
  dispatch_release_0(subrange_0);
  return map_0;
}

uint64_t _dispatch_transform_from_base32_with_table(NSObject *a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  uint64_t v4;
  _QWORD v6[10];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  __objc2_class **v10;
  _QWORD v11[4];
  _QWORD v12[4];
  _QWORD v13[4];

  v13[0] = 0;
  v13[1] = v13;
  v13[2] = 0x2000000000;
  v13[3] = 0;
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x2000000000;
  v12[3] = 0;
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x2000000000;
  v11[3] = 0;
  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = &_dispatch_data_empty;
  v6[0] = MEMORY[0x1E0C87450];
  v6[1] = 0x40000000;
  v6[2] = ___dispatch_transform_from_base32_with_table_block_invoke;
  v6[3] = &unk_1E1E990D8;
  v6[8] = a3;
  v6[9] = a2;
  v6[4] = v12;
  v6[5] = v11;
  v6[6] = v13;
  v6[7] = &v7;
  v3 = dispatch_data_apply_0(a1, v6);
  v4 = v8[3];
  if (!v3)
  {
    dispatch_release_0((dispatch_object_t)v8[3]);
    v4 = 0;
  }
  _Block_object_dispose(&v7, 8);
  _Block_object_dispose(v11, 8);
  _Block_object_dispose(v12, 8);
  _Block_object_dispose(v13, 8);
  return v4;
}

uint64_t ___dispatch_transform_from_base32_with_table_block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t result;
  _BYTE *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  size_t v17;
  NSObject *v18;
  dispatch_data_t concat_0;

  v5 = a5;
  v8 = a5 >> 3;
  if ((a5 & 7) != 0)
    ++v8;
  result = (uint64_t)malloc_type_malloc(5 * v8, 0x100004077774924uLL);
  if (result)
  {
    v10 = (_BYTE *)result;
    if (v5)
    {
      v10 = (_BYTE *)result;
      do
      {
        v12 = *a4++;
        v11 = v12;
        v13 = (1 << v12) & 0x100000600;
        if (v12 > 0x20 || v13 == 0)
        {
          if (a1[8] <= v11 || (v15 = a1[9], *(unsigned __int8 *)(v15 + v11) == 255))
          {
            free((void *)result);
            return 0;
          }
          ++*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
          v16 = *(unsigned __int8 *)(v15 + v11);
          if (v16 == 254)
          {
            LOBYTE(v16) = 0;
            ++*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
          }
          *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) *= 32;
          *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) += (char)v16;
          if ((*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) & 7) == 0)
          {
            *v10 = *(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 28);
            v10[1] = BYTE3(*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24));
            v10[2] = BYTE2(*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24));
            v10[3] = BYTE1(*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24));
            v10[4] = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
            v10 += 5;
          }
        }
        --v5;
      }
      while (v5);
    }
    v17 = (size_t)&v10[-result];
    switch(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24))
    {
      case 1:
        --v17;
        break;
      case 3:
        v17 -= 2;
        break;
      case 4:
        v17 -= 3;
        break;
      case 6:
        v17 -= 4;
        break;
      default:
        break;
    }
    v18 = dispatch_data_create_0((const void *)result, v17, 0, &__block_literal_global);
    concat_0 = dispatch_data_create_concat_0(*(dispatch_data_t *)(*(_QWORD *)(a1[7] + 8) + 24), v18);
    dispatch_release_0(v18);
    dispatch_release_0(*(dispatch_object_t *)(*(_QWORD *)(a1[7] + 8) + 24));
    *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = concat_0;
    return 1;
  }
  return result;
}

dispatch_data_t _dispatch_transform_to_base32_with_table(NSObject *a1, uint64_t a2)
{
  size_t size_0;
  dispatch_data_t v5;
  unint64_t v6;
  size_t v7;
  size_t v8;
  void *v9;
  void *v10;
  _QWORD applier[9];
  _QWORD v13[4];
  _QWORD v14[4];

  size_0 = dispatch_data_get_size_0(a1);
  v5 = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2000000000;
  v14[3] = 0;
  if (size_0 == 5 * (size_0 / 5))
    v6 = size_0 / 5;
  else
    v6 = size_0 / 5 + 1;
  if (!(v6 >> 61))
  {
    v7 = size_0;
    v8 = 8 * v6;
    v9 = malloc_type_malloc(8 * v6, 0x29176DCDuLL);
    if (v9)
    {
      v10 = v9;
      v13[0] = 0;
      v13[1] = v13;
      v13[2] = 0x2000000000;
      v13[3] = v9;
      applier[0] = MEMORY[0x1E0C87450];
      applier[1] = 0x40000000;
      applier[2] = ___dispatch_transform_to_base32_with_table_block_invoke;
      applier[3] = &unk_1E1E99100;
      applier[4] = v14;
      applier[5] = v13;
      applier[6] = a1;
      applier[7] = a2;
      applier[8] = v7;
      if (dispatch_data_apply_0(a1, applier))
      {
        v5 = dispatch_data_create_0(v10, v8, 0, &__block_literal_global);
      }
      else
      {
        free(v10);
        v5 = 0;
      }
      _Block_object_dispose(v13, 8);
    }
    else
    {
      v5 = 0;
    }
  }
  _Block_object_dispose(v14, 8);
  return v5;
}

BOOL ___dispatch_transform_to_base32_with_table_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  BOOL v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  NSObject *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  _BYTE *v19;
  char v20;
  uint64_t v21;
  _BYTE *v22;
  char v23;
  uint64_t v24;
  _BYTE *v25;
  char v26;
  uint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  _BYTE *v46;
  char *v49;

  if (a5)
  {
    v8 = 0;
    v9 = 0;
    v10 = a3 - 1;
    do
    {
      v11 = *(unsigned __int8 *)(a4 + v9);
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      if (0xCCCCCCCCCCCCCCCDLL * v12 < 0x3333333333333334)
      {
        v13 = 0;
      }
      else if (v9)
      {
        v13 = *(_BYTE *)(a4 + v9 - 1);
      }
      else
      {
        v49 = 0;
        v14 = _dispatch_data_subrange_map(*(NSObject **)(a1 + 48), (const void **)&v49, v10, 1uLL);
        if (!v14)
          return v8;
        v13 = *v49;
        dispatch_release_0(v14);
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      }
      switch(v12 % 5)
      {
        case 0uLL:
          v15 = *(_QWORD *)(a1 + 56);
          v16 = v11 >> 3;
          goto LABEL_15;
        case 1uLL:
          v17 = *(_BYTE *)(*(_QWORD *)(a1 + 56) + ((4 * (v13 & 7u)) | (v11 >> 6)));
          v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          v19 = *(_BYTE **)(v18 + 24);
          *(_QWORD *)(v18 + 24) = v19 + 1;
          *v19 = v17;
          v15 = *(_QWORD *)(a1 + 56);
          v16 = (v11 >> 1) & 0x1F;
          goto LABEL_15;
        case 2uLL:
          v15 = *(_QWORD *)(a1 + 56);
          v16 = (v11 >> 4) & 0xFFFFFFEF | (16 * (v13 & 1));
          goto LABEL_15;
        case 3uLL:
          v20 = *(_BYTE *)(*(_QWORD *)(a1 + 56) + ((v11 >> 7) & 0xFFFFFFE1 | (2 * (v13 & 0xF))));
          v21 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          v22 = *(_BYTE **)(v21 + 24);
          *(_QWORD *)(v21 + 24) = v22 + 1;
          *v22 = v20;
          v15 = *(_QWORD *)(a1 + 56);
          v16 = (v11 >> 2) & 0x1F;
          goto LABEL_15;
        case 4uLL:
          v23 = *(_BYTE *)(*(_QWORD *)(a1 + 56) + ((v11 >> 5) & 0xFFFFFFE7 | (8 * (v13 & 3))));
          v24 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          v25 = *(_BYTE **)(v24 + 24);
          *(_QWORD *)(v24 + 24) = v25 + 1;
          *v25 = v23;
          v15 = *(_QWORD *)(a1 + 56);
          v16 = v11 & 0x1F;
LABEL_15:
          v26 = *(_BYTE *)(v15 + v16);
          v27 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          v28 = *(_BYTE **)(v27 + 24);
          *(_QWORD *)(v27 + 24) = v28 + 1;
          *v28 = v26;
          break;
        default:
          break;
      }
      ++v9;
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v8 = v9 >= a5;
    }
    while (a5 != v9);
  }
  if (a5 + a3 == *(_QWORD *)(a1 + 64))
  {
    v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    switch(~(5 * (v29 / 5)) + v29)
    {
      case 0uLL:
        v30 = *(_QWORD *)(a1 + 56);
        v31 = 4 * (*(_BYTE *)(a5 + a4 - 1) & 7);
        goto LABEL_23;
      case 1uLL:
        v30 = *(_QWORD *)(a1 + 56);
        v31 = 16 * (*(_BYTE *)(a5 + a4 - 1) & 1);
        goto LABEL_23;
      case 2uLL:
        v30 = *(_QWORD *)(a1 + 56);
        v31 = 2 * (*(_BYTE *)(a5 + a4 - 1) & 0xF);
        goto LABEL_23;
      case 3uLL:
        v30 = *(_QWORD *)(a1 + 56);
        v31 = 8 * (*(_BYTE *)(a5 + a4 - 1) & 3);
LABEL_23:
        v32 = *(_BYTE *)(v30 + v31);
        v33 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v34 = *(_BYTE **)(v33 + 24);
        *(_QWORD *)(v33 + 24) = v34 + 1;
        *v34 = v32;
        break;
      default:
        break;
    }
    switch(~(5 * (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) / 5uLL))
           + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    {
      case 0uLL:
        v35 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v36 = *(_BYTE **)(v35 + 24);
        *(_QWORD *)(v35 + 24) = v36 + 1;
        *v36 = 61;
        v37 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v38 = *(_BYTE **)(v37 + 24);
        *(_QWORD *)(v37 + 24) = v38 + 1;
        *v38 = 61;
        goto LABEL_26;
      case 1uLL:
LABEL_26:
        v39 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v40 = *(_BYTE **)(v39 + 24);
        *(_QWORD *)(v39 + 24) = v40 + 1;
        *v40 = 61;
        goto LABEL_27;
      case 2uLL:
LABEL_27:
        v41 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v42 = *(_BYTE **)(v41 + 24);
        *(_QWORD *)(v41 + 24) = v42 + 1;
        *v42 = 61;
        v43 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v44 = *(_BYTE **)(v43 + 24);
        *(_QWORD *)(v43 + 24) = v44 + 1;
        *v44 = 61;
        goto LABEL_28;
      case 3uLL:
LABEL_28:
        v45 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v46 = *(_BYTE **)(v45 + 24);
        *(_QWORD *)(v45 + 24) = v46 + 1;
        *v46 = 61;
        break;
      default:
        break;
    }
  }
  return 1;
}

uint64_t ___dispatch_transform_from_base64_block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t result;
  _BYTE *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v15;
  NSObject *v16;
  dispatch_data_t concat_0;

  v5 = a5;
  v8 = a5 >> 2;
  if ((a5 & 3) != 0)
    ++v8;
  result = (uint64_t)malloc_type_malloc(3 * v8, 0x100004077774924uLL);
  if (result)
  {
    v10 = (_BYTE *)result;
    if (!v5)
    {
LABEL_18:
      v16 = dispatch_data_create_0((const void *)result, (size_t)&v10[-result - *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24)], 0, &__block_literal_global);
      concat_0 = dispatch_data_create_concat_0(*(dispatch_data_t *)(*(_QWORD *)(a1[7] + 8) + 24), v16);
      dispatch_release_0(v16);
      dispatch_release_0(*(dispatch_object_t *)(*(_QWORD *)(a1[7] + 8) + 24));
      *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = concat_0;
      return 1;
    }
    v10 = (_BYTE *)result;
    while (1)
    {
      v12 = *a4++;
      v11 = v12;
      v13 = (1 << v12) & 0x100000600;
      if (v12 > 0x20 || v13 == 0)
      {
        if (v11 > 0x7A || (v15 = base64_decode_table[v11], v15 == 255))
        {
          free((void *)result);
          return 0;
        }
        ++*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
        if ((_DWORD)v11 == 61)
        {
          LOBYTE(v15) = 0;
          ++*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
        }
        *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) <<= 6;
        *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) += (char)v15;
        if ((*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) & 3) == 0)
        {
          *v10 = BYTE2(*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24));
          v10[1] = BYTE1(*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24));
          v10[2] = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
          v10 += 3;
        }
      }
      if (!--v5)
        goto LABEL_18;
    }
  }
  return result;
}

BOOL ___dispatch_transform_to_base64_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  BOOL v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  NSObject *v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  char v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _BYTE *v35;
  char *v38;

  if (a5)
  {
    v8 = 0;
    v9 = 0;
    v10 = a3 - 1;
    while (1)
    {
      v11 = *(unsigned __int8 *)(a4 + v9);
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      if (0xAAAAAAAAAAAAAAABLL * v12 < 0x5555555555555556)
      {
        v13 = 0;
      }
      else if (v9)
      {
        v13 = *(_BYTE *)(a4 + v9 - 1);
      }
      else
      {
        v38 = 0;
        v14 = _dispatch_data_subrange_map(*(NSObject **)(a1 + 48), (const void **)&v38, v10, 1uLL);
        if (!v14)
          return v8;
        v13 = *v38;
        dispatch_release_0(v14);
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      }
      v15 = v12 % 3;
      if (v15 == 2)
        break;
      if (v15 == 1)
      {
        v16 = (v11 >> 4) & 0xFFFFFFCF | (16 * (v13 & 3));
        goto LABEL_15;
      }
      if (!v15)
      {
        v16 = v11 >> 2;
LABEL_15:
        v20 = base64_encode_table[v16];
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v22 = *(char **)(v21 + 24);
        *(_QWORD *)(v21 + 24) = v22 + 1;
        *v22 = v20;
      }
      ++v9;
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v8 = v9 >= a5;
      if (a5 == v9)
        goto LABEL_17;
    }
    v17 = base64_encode_table[(4 * (v13 & 0xFu)) | (v11 >> 6)];
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v19 = *(char **)(v18 + 24);
    *(_QWORD *)(v18 + 24) = v19 + 1;
    *v19 = v17;
    v16 = v11 & 0x3F;
    goto LABEL_15;
  }
LABEL_17:
  if (a5 + a3 == *(_QWORD *)(a1 + 56))
  {
    v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) % 3uLL;
    if (v23 == 2)
    {
      v31 = base64_encode_table[4 * (*(_BYTE *)(a5 + a4 - 1) & 0xF)];
      v32 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v33 = *(char **)(v32 + 24);
      *(_QWORD *)(v32 + 24) = v33 + 1;
      *v33 = v31;
      v34 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v35 = *(_BYTE **)(v34 + 24);
      *(_QWORD *)(v34 + 24) = v35 + 1;
      *v35 = 61;
    }
    else if (v23 == 1)
    {
      v24 = base64_encode_table[16 * (*(_BYTE *)(a5 + a4 - 1) & 3)];
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v26 = *(char **)(v25 + 24);
      *(_QWORD *)(v25 + 24) = v26 + 1;
      *v26 = v24;
      v27 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v28 = *(_BYTE **)(v27 + 24);
      *(_QWORD *)(v27 + 24) = v28 + 1;
      *v28 = 61;
      v29 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v30 = *(_BYTE **)(v29 + 24);
      *(_QWORD *)(v29 + 24) = v30 + 1;
      *v30 = 61;
    }
  }
  return 1;
}

uint64_t _dispatch_transform_from_utf16(NSObject *a1, int a2)
{
  BOOL v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD applier[7];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _QWORD v13[4];

  v13[2] = 0x2000000000;
  v10 = 0x3800000000;
  v11 = xmmword_1E1E99198;
  v12 = unk_1E1E991A8;
  v13[0] = 0;
  v13[1] = v13;
  v13[3] = 0;
  v8 = 0;
  v9 = &v8;
  applier[0] = MEMORY[0x1E0C87450];
  applier[1] = 0x40000000;
  applier[2] = ___dispatch_transform_from_utf16_block_invoke;
  applier[3] = &unk_1E1E99178;
  applier[4] = &v8;
  applier[5] = v13;
  applier[6] = a1;
  v7 = a2;
  v2 = dispatch_data_apply_0(a1, applier);
  v3 = v9 + 3;
  if (v2)
  {
    v4 = *v3;
  }
  else
  {
    _dispatch_transform_buffer_new((uint64_t)v3, 0, 0);
    dispatch_release_0((dispatch_object_t)v9[3]);
    v4 = 0;
  }
  _Block_object_dispose(&v8, 8);
  _Block_object_dispose(v13, 8);
  return v4;
}

size_t ___dispatch_transform_from_utf16_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t v9;
  size_t result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int16 v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  _BYTE *v34;
  unsigned __int16 *v35;

  v5 = a5;
  if (!a3)
  {
    v9 = a5 == 3 * (a5 / 3) ? a5 / 3 : a5 / 3 + 1;
    result = _dispatch_transform_buffer_new(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24, 2 * v9, 0);
    if (!(_DWORD)result)
      return result;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v12 = *(_QWORD *)(v11 + 24);
  if (v12 >= v5)
  {
    *(_QWORD *)(v11 + 24) = v12 - v5;
    return 1;
  }
  if (v12)
  {
    a4 += v12;
    v5 -= v12;
    *(_QWORD *)(v11 + 24) = 0;
  }
  v13 = (v5 & 1) + (v5 >> 1);
  if (!v13)
  {
LABEL_55:
    _dispatch_transform_buffer_new(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24, 0, 0);
    return 1;
  }
  v14 = 0;
  while (1)
  {
    if ((v5 & 1) != 0 && v14 == v13 - 1)
    {
      v35 = 0;
      result = (size_t)_dispatch_data_subrange_map(*(NSObject **)(a1 + 48), (const void **)&v35, a3 + 2 * (v13 - 1), 2uLL);
      if (!result)
        return result;
      v15 = bswap32(*v35) >> 16;
      LOWORD(v16) = *(_DWORD *)(a1 + 56) == 1 ? *v35 : v15;
      dispatch_release_0((dispatch_object_t)result);
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    }
    else
    {
      v17 = bswap32(*(unsigned __int16 *)(a4 + 2 * v14)) >> 16;
      LOWORD(v16) = *(_DWORD *)(a1 + 56) == 1 ? *(_WORD *)(a4 + 2 * v14) : v17;
    }
    if (!(v14 | a3) && (unsigned __int16)v16 == 65534)
      return 0;
    v16 = (unsigned __int16)v16;
    if (v14 | a3 || (unsigned __int16)v16 != 65279)
    {
      if ((v16 & 0xFC00) == 0xD800)
      {
        if (++v14 >= v13)
        {
          v35 = 0;
          result = (size_t)_dispatch_data_subrange_map(*(NSObject **)(a1 + 48), (const void **)&v35, a3 + 2 * v14, 2uLL);
          if (!result)
            return result;
          v20 = bswap32(*v35) >> 16;
          if (*(_DWORD *)(a1 + 56) == 1)
            v19 = *v35;
          else
            v19 = v20;
          dispatch_release_0((dispatch_object_t)result);
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += 2;
        }
        else
        {
          v18 = bswap32(*(unsigned __int16 *)(a4 + 2 * v14)) >> 16;
          if (*(_DWORD *)(a1 + 56) == 1)
            v19 = *(_WORD *)(a4 + 2 * v14);
          else
            v19 = v18;
        }
        if (v19 >> 10 != 55)
          return 0;
        v16 = (((unsigned __int16)v16 << 10) - 56557568) | v19 & 0x3FF;
      }
      else if ((v16 & 0xFC00) == 0xDC00)
      {
        return 0;
      }
      if ((uint64_t)(v13 - v14) < 0)
        return 0;
      v21 = 2 * (v13 - v14);
      if (v16 > 0x7F)
      {
        if (v16 > 0x7FF)
        {
          v25 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24;
          if (HIWORD(v16))
          {
            result = _dispatch_transform_buffer_new(v25, 4uLL, v21);
            if (!(_DWORD)result)
              return result;
            v27 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
            v28 = *(_BYTE **)(v27 + 40);
            *(_QWORD *)(v27 + 40) = v28 + 1;
            *v28 = (v16 >> 18) | 0xF0;
            v26 = (v16 >> 12) & 0x3F | 0x80;
          }
          else
          {
            result = _dispatch_transform_buffer_new(v25, 3uLL, v21);
            if (!(_DWORD)result)
              return result;
            v26 = (v16 >> 12) | 0xE0;
          }
          v29 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
          v30 = *(_BYTE **)(v29 + 40);
          *(_QWORD *)(v29 + 40) = v30 + 1;
          *v30 = v26;
          v24 = (v16 >> 6) & 0x3F | 0x80;
        }
        else
        {
          result = _dispatch_transform_buffer_new(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24, 2uLL, v21);
          if (!(_DWORD)result)
            return result;
          v24 = (v16 >> 6) | 0xC0;
        }
        v31 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v32 = *(_BYTE **)(v31 + 40);
        *(_QWORD *)(v31 + 40) = v32 + 1;
        *v32 = v24;
        v33 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v34 = *(_BYTE **)(v33 + 40);
        *(_QWORD *)(v33 + 40) = v34 + 1;
        *v34 = v16 & 0x3F | 0x80;
      }
      else
      {
        result = _dispatch_transform_buffer_new(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24, 1uLL, v21);
        if (!(_DWORD)result)
          return result;
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v23 = *(_BYTE **)(v22 + 40);
        *(_QWORD *)(v22 + 40) = v23 + 1;
        *v23 = v16;
      }
    }
    else
    {
      v14 = 0;
    }
    if (++v14 >= v13)
      goto LABEL_55;
  }
}

size_t _dispatch_transform_buffer_new(uint64_t a1, unint64_t a2, uint64_t a3)
{
  void *v6;
  unint64_t v7;
  NSObject *v8;
  dispatch_data_t concat_0;
  size_t result;

  v6 = *(void **)(a1 + 8);
  if (a2 && (unint64_t)v6 + *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16) >= a2)
    return 1;
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7 <= (unint64_t)v6)
    {
      free(v6);
    }
    else
    {
      v8 = dispatch_data_create_0(v6, v7 - (_QWORD)v6, 0, &__block_literal_global);
      concat_0 = dispatch_data_create_concat_0(*(dispatch_data_t *)a1, v8);
      dispatch_release_0(v8);
      dispatch_release_0(*(dispatch_object_t *)a1);
      *(_QWORD *)a1 = concat_0;
    }
  }
  *(_QWORD *)(a1 + 8) = 0;
  result = a3 + a2;
  *(_QWORD *)(a1 + 24) = a3 + a2;
  if (!(a3 + a2))
    goto LABEL_11;
  if (result > 0x6400000)
    return 0;
  result = (size_t)malloc_type_malloc(result, 0xADEDD139uLL);
  *(_QWORD *)(a1 + 8) = result;
  if (result)
  {
LABEL_11:
    *(_QWORD *)(a1 + 16) = result;
    return 1;
  }
  return result;
}

uint64_t _dispatch_transform_to_utf16(NSObject *a1, int a2)
{
  BOOL v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD applier[7];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _QWORD v13[4];

  v13[2] = 0x2000000000;
  v10 = 0x3800000000;
  v11 = xmmword_1E1E99198;
  v12 = unk_1E1E991A8;
  v13[0] = 0;
  v13[1] = v13;
  v13[3] = 0;
  v8 = 0;
  v9 = &v8;
  applier[0] = MEMORY[0x1E0C87450];
  applier[1] = 0x40000000;
  applier[2] = ___dispatch_transform_to_utf16_block_invoke;
  applier[3] = &unk_1E1E991C0;
  v7 = a2;
  applier[4] = &v8;
  applier[5] = v13;
  applier[6] = a1;
  v2 = dispatch_data_apply_0(a1, applier);
  v3 = v9 + 3;
  if (v2)
  {
    v4 = *v3;
  }
  else
  {
    _dispatch_transform_buffer_new((uint64_t)v3, 0, 0);
    dispatch_release_0((dispatch_object_t)v9[3]);
    v4 = 0;
  }
  _Block_object_dispose(&v8, 8);
  _Block_object_dispose(v13, 8);
  return v4;
}

size_t ___dispatch_transform_to_utf16_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, size_t a5)
{
  size_t v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  size_t v13;
  size_t result;
  NSObject *v15;
  unsigned int utf8_sequence;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int16 v20;
  uint64_t v21;
  _WORD *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  _WORD *v27;
  __int16 v28;
  uint64_t v29;
  __int16 *v30;
  char *v31;

  v5 = a5;
  if (!a3)
  {
    result = 0;
    if ((a5 & 0x8000000000000000) != 0)
      return result;
    if (2 * a5 >= 0xFFFFFFFFFFFFFFFELL)
      return result;
    result = _dispatch_transform_buffer_new(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24, 2 * a5 + 2, 0);
    if (!(_DWORD)result)
      return result;
    if (*(_DWORD *)(a1 + 56) == 1)
      v28 = -257;
    else
      v28 = -2;
    v29 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v30 = *(__int16 **)(v29 + 40);
    *(_QWORD *)(v29 + 40) = v30 + 1;
    *v30 = v28;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v10 = *(_QWORD *)(v9 + 24);
  if (v10 >= v5)
  {
    *(_QWORD *)(v9 + 24) = v10 - v5;
    return 1;
  }
  if (!v10)
    goto LABEL_6;
  *(_QWORD *)(v9 + 24) = 0;
  v5 -= v10;
  if (!v5)
  {
LABEL_36:
    _dispatch_transform_buffer_new(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24, 0, 0);
    return 1;
  }
  a4 += v10;
LABEL_6:
  v11 = 0;
  while (1)
  {
    v12 = *a4;
    if (v12 < 0)
    {
      if ((v12 & 0xE0) == 0xC0)
      {
        v13 = 2;
      }
      else if ((v12 & 0xF0) == 0xE0)
      {
        v13 = 3;
      }
      else
      {
        if ((v12 & 0xF8) != 0xF0)
          return 0;
        v13 = 4;
      }
    }
    else
    {
      v13 = 1;
    }
    if (v13 + v11 <= v5)
    {
      utf8_sequence = _dispatch_transform_read_utf8_sequence(a4);
      v11 += v13;
    }
    else
    {
      v31 = 0;
      result = (size_t)_dispatch_data_subrange_map(*(NSObject **)(a1 + 48), (const void **)&v31, v11 + a3, v13);
      if (!result)
        return result;
      v15 = result;
      utf8_sequence = _dispatch_transform_read_utf8_sequence(v31);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += v11 - v5 + v13;
      dispatch_release_0(v15);
      v11 = v5;
    }
    if ((uint64_t)(v5 - v11) < 0)
      return 0;
    if (utf8_sequence != 65279 || v11 + a3 != 3)
    {
      if (utf8_sequence - 55296 < 0x7FF)
        return 0;
      v17 = 2 * (v5 - v11);
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24;
      if (utf8_sequence < 0x10000)
      {
        result = _dispatch_transform_buffer_new(v18, 2uLL, v17);
        if (!(_DWORD)result)
          return result;
        v25 = bswap32(utf8_sequence) >> 16;
        if (*(_DWORD *)(a1 + 56) == 1)
          LOWORD(v23) = utf8_sequence;
        else
          LOWORD(v23) = v25;
      }
      else
      {
        result = _dispatch_transform_buffer_new(v18, 4uLL, v17);
        if (!(_DWORD)result)
          return result;
        v19 = bswap32(((utf8_sequence + 983040) >> 10) & 0x3FF | 0xFFFFD800) >> 16;
        if (*(_DWORD *)(a1 + 56) == 1)
          v20 = ((utf8_sequence + 983040) >> 10) & 0x3FF | 0xD800;
        else
          v20 = v19;
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v22 = *(_WORD **)(v21 + 40);
        *(_QWORD *)(v21 + 40) = v22 + 1;
        *v22 = v20;
        v23 = utf8_sequence & 0x3FF | 0xFFFFDC00;
        v24 = bswap32(v23) >> 16;
        if (*(_DWORD *)(a1 + 56) != 1)
          LOWORD(v23) = v24;
      }
      v26 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v27 = *(_WORD **)(v26 + 40);
      *(_QWORD *)(v26 + 40) = v27 + 1;
      *v27 = v23;
    }
    a4 += v13;
    if (v5 <= v11)
      goto LABEL_36;
  }
}

uint64_t _dispatch_transform_read_utf8_sequence(char *a1)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  char *v7;
  char v8;

  v1 = *a1;
  if (*a1 < 0)
  {
    if ((v1 & 0xE0) == 0xC0)
    {
      v2 = 1;
      v3 = 31;
    }
    else
    {
      if ((v1 & 0xF0) != 0xE0)
      {
        v5 = v1 & 0xF8;
        v6 = (v1 & 7) << 6;
        if (v5 == 240)
          v4 = v6;
        else
          v4 = 0;
        if (v5 == 240)
          v2 = 3;
        else
          v2 = -1;
        goto LABEL_13;
      }
      v2 = 2;
      v3 = 15;
    }
    v4 = (v1 & v3) << 6;
LABEL_13:
    v7 = a1 + 1;
    do
    {
      v8 = *v7++;
      v1 = v4 | v8 & 0x3F;
      --v2;
      v4 = (_DWORD)v1 << 6;
    }
    while ((_BYTE)v2);
  }
  return v1;
}

void _dispatch_time_init()
{
  kern_return_t v0;
  mach_timebase_info info;

  info = 0;
  v0 = mach_timebase_info(&info);
  if (v0)
    _dispatch_bug(86, v0);
  if (info.numer != 125 || info.denom != 3)
  {
    *(double *)&_dispatch_host_time_data_0 = (double)info.numer / (double)info.denom;
    _dispatch_host_time_data_1 = info.numer == info.denom;
    _dispatch_host_time_mach2nano = (uint64_t (*)(_QWORD))_dispatch_mach_host_time_mach2nano;
    _dispatch_host_time_nano2mach = (uint64_t (*)(_QWORD))_dispatch_mach_host_time_nano2mach;
  }
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  int v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  dispatch_time_t v11;
  dispatch_time_t v12;

  if ((uint64_t)when > -2)
  {
    if (when == -1)
      return when;
    if (when)
      goto LABEL_14;
    when = mach_absolute_time();
    v3 = 0;
LABEL_9:
    if (when == -1)
      return when;
    goto LABEL_10;
  }
  if (when == 0x8000000000000000)
  {
    v3 = 1;
    when = mach_continuous_time();
    goto LABEL_9;
  }
  if (when == -2)
  {
    when = clock_gettime_nsec_np(_CLOCK_REALTIME);
    v3 = 2;
    goto LABEL_9;
  }
LABEL_14:
  if ((when & 0x8000000000000000) != 0)
  {
    if ((when & 0x4000000000000000) == 0)
    {
      when &= ~0x8000000000000000;
      v3 = 1;
      goto LABEL_21;
    }
    when = -(uint64_t)when;
    v3 = 2;
  }
  else
  {
    v3 = 0;
  }
  if (when >> 62)
    return -1;
LABEL_10:
  if (v3 == 2)
  {
    v4 = when + delta;
    if (delta < 0)
    {
      if (v4 < 1)
      {
        v4 = 2;
        return -v4;
      }
      if ((unint64_t)v4 <= 0x3FFFFFFFFFFFFFFELL)
        return -v4;
    }
    else if ((unint64_t)(v4 - 0x3FFFFFFFFFFFFFFFLL) >= 0xC000000000000002)
    {
      return -v4;
    }
    return -1;
  }
LABEL_21:
  if ((delta & 0x8000000000000000) == 0)
  {
    if (_dispatch_host_time_nano2mach)
    {
      v12 = when;
      v6 = _dispatch_host_time_nano2mach(delta);
      when = v12;
    }
    else if (delta)
    {
      if ((unint64_t)delta > 0x7FFFFFFFFFFFFFFELL)
      {
        v6 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else if ((unint64_t)delta > 0x5555555555555554)
      {
        v6 = 3 * (delta / 0x7DuLL);
      }
      else
      {
        v5 = ((unint64_t)(3 * delta) * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
        v6 = (v5 + ((unint64_t)(3 * delta - v5) >> 1)) >> 6;
      }
    }
    else
    {
      v6 = 0;
    }
    v7 = v6 + when;
    if ((unint64_t)(v7 - 0x3FFFFFFFFFFFFFFFLL) < 0xC000000000000002)
      return -1;
LABEL_37:
    if (v3 == 1)
      return v7 | 0x8000000000000000;
    else
      return v7;
  }
  v8 = -delta;
  if (_dispatch_host_time_nano2mach)
  {
    v11 = when;
    v10 = _dispatch_host_time_nano2mach(v8);
    when = v11;
  }
  else if (v8 > 0x7FFFFFFFFFFFFFFELL)
  {
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else if (v8 > 0x5555555555555554)
  {
    v10 = 3 * (v8 / 0x7D);
  }
  else
  {
    v9 = ((unint64_t)(-3 * delta) * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
    v10 = (v9 + ((unint64_t)(-3 * delta - v9) >> 1)) >> 6;
  }
  v7 = when - v10;
  if (v7 > 0)
  {
    if ((unint64_t)v7 > 0x3FFFFFFFFFFFFFFELL)
      return -1;
    goto LABEL_37;
  }
  if (v3 == 1)
    return 0x8000000000000001;
  else
    return 1;
}

uint64_t dispatch_time_to_nsecs(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;

  if ((uint64_t)a1 <= -2)
  {
    if (a1 == 0x8000000000000000)
    {
      a1 = mach_continuous_time();
      goto LABEL_10;
    }
    if (a1 == -2)
    {
      a1 = clock_gettime_nsec_np(_CLOCK_REALTIME);
LABEL_5:
      *a2 = 3;
LABEL_21:
      v6 = 1;
      goto LABEL_22;
    }
LABEL_12:
    if ((a1 & 0x8000000000000000) == 0)
    {
      if (a1 >> 62)
        a1 = -1;
      goto LABEL_15;
    }
    if ((a1 & 0x4000000000000000) != 0)
    {
      if ((unint64_t)-(uint64_t)a1 >> 62)
        a1 = -1;
      else
        a1 = -(uint64_t)a1;
      goto LABEL_5;
    }
    a1 &= ~0x8000000000000000;
LABEL_10:
    v5 = 2;
    goto LABEL_16;
  }
  if (a1 != -1)
  {
    if (!a1)
    {
      a1 = mach_absolute_time();
LABEL_15:
      v5 = 1;
LABEL_16:
      *a2 = v5;
      if (_dispatch_host_time_mach2nano)
      {
        a1 = _dispatch_host_time_mach2nano(a1);
      }
      else if (a1)
      {
        if (a1 > 0x3126E978D4FDF39)
        {
          v6 = 1;
          a1 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_22;
        }
        if (a1 > 0x20C49BA5E353F7BLL)
          a1 = 125 * (a1 / 3);
        else
          a1 = 125 * a1 / 3;
      }
      goto LABEL_21;
    }
    goto LABEL_12;
  }
  v6 = 0;
  *a2 = 0;
LABEL_22:
  *a3 = a1;
  return v6;
}

uint64_t dispatch_time_from_nsec(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (a2 <= 2)
    v3 = 2;
  else
    v3 = a2;
  if (_dispatch_host_time_nano2mach)
  {
    v5 = _dispatch_host_time_nano2mach(v3);
  }
  else if (v3 > 0x7FFFFFFFFFFFFFFELL)
  {
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else if (v3 >= 0x5555555555555555)
  {
    v5 = 3 * (v3 / 0x7D);
  }
  else
  {
    v4 = (3 * v3 * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
    v5 = (v4 + ((3 * v3 - v4) >> 1)) >> 6;
  }
  if (v5 > 0x3FFFFFFFFFFFFFFELL)
    v6 = -1;
  else
    v6 = v5;
  v7 = v5 | 0x8000000000000000;
  if (v5 > 0x3FFFFFFFFFFFFFFELL)
    v7 = -1;
  v8 = -1;
  if (v3 <= 0x3FFFFFFFFFFFFFFELL)
    v8 = -(uint64_t)v3;
  if (a1 == 2)
    v8 = v7;
  if (a1 == 1)
    return v6;
  else
    return v8;
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  __uint64_t v3;
  uint64_t v4;
  dispatch_time_t v5;

  if (when)
    v3 = when->tv_nsec + 1000000000 * when->tv_sec;
  else
    v3 = clock_gettime_nsec_np(_CLOCK_REALTIME);
  v4 = v3 + delta;
  v5 = -2;
  if (delta >= 0)
    v5 = -1;
  if (v4 >= 2)
    return -v4;
  else
    return v5;
}

int64_t _dispatch_timeout(int64_t result)
{
  unint64_t v1;
  uint64_t v2;
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  __uint64_t v6;

  if (result > -2)
  {
    if (result == -1)
      return result;
    if (!result)
      return 0;
  }
  else if (result == 0x8000000000000000 || result == -2)
  {
    return 0;
  }
  if (result < 0)
  {
    if ((result & 0x4000000000000000) != 0)
    {
      if ((unint64_t)-result >> 62)
        v5 = -1;
      else
        v5 = -result;
      v6 = clock_gettime_nsec_np(_CLOCK_REALTIME);
      if (v5 >= v6)
        return v5 - v6;
      else
        return 0;
    }
    v1 = result & 0x7FFFFFFFFFFFFFFFLL;
    v2 = mach_continuous_time();
  }
  else
  {
    if ((unint64_t)result >> 62)
      v1 = -1;
    else
      v1 = result;
    v2 = mach_absolute_time();
  }
  v3 = v1 >= v2;
  v4 = v1 - v2;
  if (v4 == 0 || !v3)
    return 0;
  if (_dispatch_host_time_mach2nano)
    return _dispatch_host_time_mach2nano();
  if (v4 > 0x3126E978D4FDF39)
    return 0x7FFFFFFFFFFFFFFFLL;
  if (v4 >= 0x20C49BA5E353F7CLL)
    return 125 * (v4 / 3);
  return 125 * v4 / 3;
}

unint64_t _dispatch_mach_host_time_mach2nano(unint64_t result)
{
  unint64_t v1;
  double v2;

  v1 = result;
  if (result)
  {
    if (!_dispatch_host_time_data_1)
    {
      result = 0x7FFFFFFFFFFFFFFFLL;
      if (v1 <= 0x7FFFFFFFFFFFFFFELL)
      {
        v2 = (double)v1 * *(double *)&_dispatch_host_time_data_0 + 0.5;
        if (v2 < 9.22337204e18)
          return (unint64_t)v2;
      }
    }
  }
  return result;
}

unint64_t _dispatch_mach_host_time_nano2mach(unint64_t result)
{
  unint64_t v1;
  double v2;

  v1 = result;
  if (result)
  {
    if (!_dispatch_host_time_data_1)
    {
      result = 0x7FFFFFFFFFFFFFFFLL;
      if (v1 <= 0x7FFFFFFFFFFFFFFELL)
      {
        v2 = (double)v1 / *(double *)&_dispatch_host_time_data_0 + 0.5;
        if (v2 < 9.22337204e18)
          return (unint64_t)v2;
      }
    }
  }
  return result;
}

uint64_t dispatch_benchmark(uint64_t a1, uint64_t a2)
{
  return dispatch_benchmark_f(a1, a2, *(void (**)(uint64_t))(a2 + 16));
}

uint64_t dispatch_benchmark_f(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v6;

  if (dispatch_benchmark_f_pred == -1)
  {
    if (a1)
      goto LABEL_3;
    return 0;
  }
  dispatch_once_f_0(&dispatch_benchmark_f_pred, &dispatch_benchmark_f_bdata, (dispatch_function_t)_dispatch_benchmark_init);
  if (!a1)
    return 0;
LABEL_3:
  mach_absolute_time();
  v6 = a1;
  do
  {
    a3(a2);
    --v6;
  }
  while (v6);
  mach_absolute_time();
  return __udivti3() - qword_1EDF52CE0;
}

uint64_t _dispatch_benchmark_init(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t);
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(void (**)(uint64_t))(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  mach_timebase_info((mach_timebase_info_t)a1);
  mach_absolute_time();
  if (v4 <= 1)
    v5 = 1;
  else
    v5 = v4;
  do
  {
    v3(v2);
    --v5;
  }
  while (v5);
  mach_absolute_time();
  __udivti3();
  result = __udivti3();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t _dispatch_send_wakeup_runloop_thread(mach_port_t a1, mach_msg_timeout_t timeout)
{
  uint64_t v2;
  mach_msg_header_t msg;

  msg.msgh_size = 0;
  msg.msgh_bits = 19;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4E00000000;
  v2 = mach_msg(&msg, 17, 0x18u, 0, 0, timeout, 0);
  if ((_DWORD)v2 == 268435460)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C883F0], msg.msgh_local_port);
    mach_msg_destroy(&msg);
  }
  return v2;
}

uint64_t _dispatch_send_consume_send_once_right(mach_port_t a1)
{
  mach_msg_header_t msg;

  msg.msgh_size = 0;
  msg.msgh_bits = 18;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4F00000000;
  return mach_msg(&msg, 1, 0x18u, 0, 0, 0, 0);
}

uint64_t (*libdispatch_internal_protocol_server_routine(uint64_t a1))()
{
  int v1;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 80) >= 0xFFFFFFF0)
    return _dispatch_libdispatch_internal_protocol_subsystem[5 * (v1 - 64) + 5];
  else
    return 0;
}

_DWORD *_Xmach_notify_port_deleted(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C87D40];
  }
  else
  {
    result = (_DWORD *)j___dispatch_mach_notify_port_deleted(result[3], result[8], a3, a4, a5, a6, a7, a8);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *_Xmach_notify_send_possible(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C87D40];
  }
  else
  {
    result = (_DWORD *)j___dispatch_mach_notify_send_possible(result[3], result[8], a3, a4, a5, a6, a7, a8);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

uint64_t _Xmach_notify_port_destroyed(uint64_t result, uint64_t a2)
{
  int v2;

  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 40)
  {
    if (*(unsigned __int16 *)(result + 38) << 16 == 0x100000)
      _dispatch_mach_notify_port_destroyed(*(unsigned int *)(result + 12), *(_DWORD *)(result + 28));
    v2 = -300;
  }
  else
  {
    v2 = -304;
  }
  *(_DWORD *)(a2 + 32) = v2;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C87D40];
  return result;
}

_DWORD *_Xmach_notify_no_senders(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) == 0 && result[1] == 36)
    _dispatch_mach_notify_no_senders(result[3], result[8]);
  *(_DWORD *)(a2 + 32) = -304;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C87D40];
  return result;
}

_DWORD *_Xmach_notify_send_once(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C87D40];
  }
  else
  {
    result = (_DWORD *)_dispatch_wakeup_runloop_thread();
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *_Xmach_notify_dead_name(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C87D40];
  }
  else
  {
    result = (_DWORD *)j___dispatch_mach_notify_dead_name(result[3], result[8], a3, a4, a5, a6, a7, a8);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *_Xwakeup_runloop_thread(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C87D40];
  }
  else
  {
    result = (_DWORD *)_dispatch_wakeup_runloop_thread();
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

_DWORD *_Xconsume_send_once_right(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C87D40];
  }
  else
  {
    result = (_DWORD *)_dispatch_wakeup_runloop_thread();
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  return result;
}

uint64_t libdispatch_internal_protocol_server(_DWORD *a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  void (*v5)(void);
  uint64_t result;

  v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  v4 = a1[5];
  if ((v4 - 80) >= 0xFFFFFFF0
    && (v5 = (void (*)(void))_dispatch_libdispatch_internal_protocol_subsystem[5 * (v4 - 64) + 5]) != 0)
  {
    v5();
    return 1;
  }
  else
  {
    result = 0;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C87D40];
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

uint64_t firehose_send_register(int a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, int a7, uint64_t a8)
{
  int v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v11 = 0u;
  v18 = 0u;
  v10 = 0u;
  DWORD2(v11) = a2;
  v12 = 1114112;
  v13 = a4;
  v14 = 0x100000;
  v15 = a5;
  v16 = 0x100000;
  v17 = a6;
  DWORD1(v18) = 1310720;
  DWORD2(v18) = a7;
  v19 = 1114112;
  v20 = *MEMORY[0x1E0C87D40];
  v21 = a3;
  v22 = a8;
  v9 = -2147483629;
  DWORD1(v10) = a1;
  *(_QWORD *)&v11 = 0x500002D50;
  return mach_msg((mach_msg_header_t *)&v9, 1, 0x70u, 0, 0, 0, 0);
}

uint64_t firehose_send_push_and_wait(int a1, _OWORD *a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int msg;
  int msg_4;
  int msg_8;
  mach_port_name_t msg_12;
  _BYTE msg_16[48];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C874D8];
  memset(&msg_16[4], 0, 44);
  msg_4 = 0;
  msg_8 = a1;
  msg_12 = mig_get_special_reply_port();
  msg = 5395;
  *(_QWORD *)msg_16 = 0x2D5100000000;
  v5 = mach_msg((mach_msg_header_t *)&msg, 3162115, 0x18u, 0x40u, msg_12, 0, 0);
  v6 = v5;
  if ((v5 - 268435458) > 0xE || ((1 << (v5 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v5)
    {
      if (*(_DWORD *)&msg_16[4] == 71)
      {
        v6 = 4294966988;
      }
      else if (*(_DWORD *)&msg_16[4] == 11701)
      {
        if ((msg & 0x80000000) == 0)
        {
          if (msg_4 == 56)
          {
            if (!msg_8)
            {
              v6 = *(unsigned int *)&msg_16[16];
              if (!*(_DWORD *)&msg_16[16])
              {
                *a2 = *(_OWORD *)&msg_16[20];
                *a3 = *(_DWORD *)&msg_16[36];
                return v6;
              }
              goto LABEL_20;
            }
          }
          else if (msg_4 == 36)
          {
            if (msg_8)
              v7 = 1;
            else
              v7 = *(_DWORD *)&msg_16[16] == 0;
            if (v7)
              v6 = 4294966996;
            else
              v6 = *(unsigned int *)&msg_16[16];
            goto LABEL_20;
          }
        }
        v6 = 4294966996;
      }
      else
      {
        v6 = 4294966995;
      }
LABEL_20:
      mach_msg_destroy((mach_msg_header_t *)&msg);
      return v6;
    }
    mig_dealloc_special_reply_port();
  }
  return v6;
}

uint64_t firehose_send_push_async(mach_port_t a1, int a2, mach_msg_timeout_t timeout)
{
  uint64_t v3;
  mach_msg_header_t msg;
  uint64_t v6;
  int v7;

  v6 = *MEMORY[0x1E0C87D40];
  v7 = a2;
  *(_QWORD *)&msg.msgh_bits = 19;
  msg.msgh_voucher_port = 0;
  msg.msgh_id = 11602;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  v3 = mach_msg(&msg, 17, 0x24u, 0, 0, timeout, 0);
  if ((_DWORD)v3 == 268435460)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C883F0], msg.msgh_local_port);
    mach_msg_destroy(&msg);
  }
  return v3;
}

uint64_t firehose_send_get_logging_prefs(int a1, _DWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  mach_port_name_t special_reply_port;
  _BYTE v11[20];
  _DWORD v12[7];

  memset(v12, 0, sizeof(v12));
  *(_OWORD *)&v11[4] = 0u;
  LODWORD(v9) = 0;
  HIDWORD(v9) = a1;
  special_reply_port = mig_get_special_reply_port();
  v8 = 5395;
  *(_QWORD *)v11 = 0x2D5300000000;
  v5 = mach_msg((mach_msg_header_t *)&v8, 3162115, 0x18u, 0x40u, special_reply_port, 0, 0);
  v6 = v5;
  if ((v5 - 268435458) > 0xE || ((1 << (v5 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v5)
    {
      if (*(_DWORD *)&v11[4] == 71)
      {
        v6 = 4294966988;
      }
      else if (*(_DWORD *)&v11[4] == 11703)
      {
        if ((v8 & 0x80000000) == 0)
        {
          if ((_DWORD)v9 == 36)
          {
            v6 = 4294966996;
            if (*(_DWORD *)&v11[16])
            {
              if (HIDWORD(v9))
                v6 = 4294966996;
              else
                v6 = *(unsigned int *)&v11[16];
            }
          }
          else
          {
            v6 = 4294966996;
          }
          goto LABEL_20;
        }
        v6 = 4294966996;
        if (*(_DWORD *)&v11[8] == 1 && v9 == 56 && HIWORD(v12[0]) << 16 == 1114112)
        {
          v6 = 0;
          *a2 = *(_DWORD *)&v11[12];
          *a3 = *(_QWORD *)&v12[3];
          return v6;
        }
      }
      else
      {
        v6 = 4294966995;
      }
LABEL_20:
      mach_msg_destroy((mach_msg_header_t *)&v8);
      return v6;
    }
    mig_dealloc_special_reply_port();
  }
  return v6;
}

uint64_t firehose_send_should_send_strings(int a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  int v7;
  int v8;
  int v9;
  mach_port_name_t special_reply_port;
  _BYTE v11[32];

  memset(&v11[4], 0, 28);
  v8 = 0;
  v9 = a1;
  special_reply_port = mig_get_special_reply_port();
  v7 = 5395;
  *(_QWORD *)v11 = 0x2D5400000000;
  v3 = mach_msg((mach_msg_header_t *)&v7, 3162115, 0x18u, 0x30u, special_reply_port, 0, 0);
  v4 = v3;
  if ((v3 - 268435458) > 0xE || ((1 << (v3 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v3)
    {
      if (*(_DWORD *)&v11[4] == 71)
      {
        v4 = 4294966988;
      }
      else if (*(_DWORD *)&v11[4] == 11704)
      {
        if ((v7 & 0x80000000) == 0)
        {
          if (v8 == 40)
          {
            if (!v9)
            {
              v4 = *(unsigned int *)&v11[16];
              if (!*(_DWORD *)&v11[16])
              {
                *a2 = *(_DWORD *)&v11[20];
                return v4;
              }
              goto LABEL_20;
            }
          }
          else if (v8 == 36)
          {
            if (v9)
              v5 = 1;
            else
              v5 = *(_DWORD *)&v11[16] == 0;
            if (v5)
              v4 = 4294966996;
            else
              v4 = *(unsigned int *)&v11[16];
            goto LABEL_20;
          }
        }
        v4 = 4294966996;
      }
      else
      {
        v4 = 4294966995;
      }
LABEL_20:
      mach_msg_destroy((mach_msg_header_t *)&v7);
      return v4;
    }
    mig_dealloc_special_reply_port();
  }
  return v4;
}

uint64_t (*firehoseReply_server_routine(uint64_t a1))()
{
  int v1;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 11705) >= 0xFFFFFFFB)
    return firehose_client_firehoseReply_subsystem[5 * (v1 - 11700) + 5];
  else
    return 0;
}

uint64_t _Xpush_reply(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 56)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C87D40];
  }
  else
  {
    result = j__firehose_client_push_reply(*(unsigned int *)(result + 12), *(unsigned int *)(result + 32), *(_QWORD *)(result + 36), *(_QWORD *)(result + 44), *(unsigned int *)(result + 52), a6, a7, a8);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

uint64_t _Xpush_notify_async(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 52)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C87D40];
  }
  else
  {
    result = j__firehose_client_push_notify_async(*(unsigned int *)(result + 12), *(_QWORD *)(result + 32), *(_QWORD *)(result + 40), *(unsigned int *)(result + 48), a5, a6, a7, a8);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

uint64_t firehoseReply_server(_DWORD *a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  void (*v5)(void);
  uint64_t result;

  v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  v4 = a1[5];
  if ((v4 - 11705) >= 0xFFFFFFFB
    && (v5 = (void (*)(void))firehose_client_firehoseReply_subsystem[5 * (v4 - 11700) + 5]) != 0)
  {
    v5();
    return 1;
  }
  else
  {
    result = 0;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C87D40];
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

void os_eventlink_create_with_port_VARIANT_mp_cold_1()
{
  OUTLINED_FUNCTION_0();
  _os_crash();
  __break(1u);
}

void _os_workgroup_interval_xref_dispose_VARIANT_mp_cold_1()
{
  _os_crash();
  __break(1u);
}

void _os_workgroup_tsd_cleanup_VARIANT_mp_cold_1(char *a1, uint64_t a2)
{
  OUTLINED_FUNCTION_5(a1, a2, "BUG IN CLIENT: Thread exiting without leaving workgroup '%s'");
  OUTLINED_FUNCTION_4();
  __break(1u);
}

void _os_workgroup_leave_update_wg_VARIANT_mp_cold_1()
{
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Joined count underflowed";
  __break(1u);
}

void _os_workgroup_set_name_cold_1()
{
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Invalid workgroup port";
  qword_1EDF52D38 = 0xFFFFFFFFLL;
  __break(1u);
}

void os_workgroup_create_with_workload_id_VARIANT_mp_cold_1(int a1)
{
  _dispatch_log("BUG IN CLIENT of %s: Non-default attribute flags: 0x%x", "os_workgroup_create_with_workload_id$VARIANT$mp", a1);
  OUTLINED_FUNCTION_0_0(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)));
  OUTLINED_FUNCTION_1();
}

void os_workgroup_create_with_workload_id_VARIANT_mp_cold_2()
{
  _dispatch_log("BUG IN CLIENT of %s: Invalid attribute pointer", "os_workgroup_create_with_workload_id$VARIANT$mp");
  OUTLINED_FUNCTION_0_0(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)));
  OUTLINED_FUNCTION_1();
}

void _os_workgroup_set_work_interval_workload_id_cold_1(unsigned int a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Invalid workgroup port";
  qword_1EDF52D38 = a1;
  __break(1u);
}

void os_workgroup_interval_create_with_workload_id_VARIANT_mp_cold_1(int a1)
{
  _dispatch_log("BUG IN CLIENT of %s: Non-default attribute flags: 0x%x", "os_workgroup_interval_create_with_workload_id$VARIANT$mp", a1);
  OUTLINED_FUNCTION_0_0(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)));
  OUTLINED_FUNCTION_1();
}

void os_workgroup_interval_create_with_workload_id_VARIANT_mp_cold_2()
{
  _dispatch_log("BUG IN CLIENT of %s: Invalid attribute pointer", "os_workgroup_interval_create_with_workload_id$VARIANT$mp");
  OUTLINED_FUNCTION_0_0(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)));
  OUTLINED_FUNCTION_1();
}

void os_workgroup_leave_VARIANT_mp_cold_1()
{
  OUTLINED_FUNCTION_3(1686);
}

void os_workgroup_leave_VARIANT_mp_cold_3()
{
  _os_crash();
  __break(1u);
}

void os_workgroup_leave_VARIANT_mp_cold_4()
{
  _os_crash();
  __break(1u);
}

void os_workgroup_leave_VARIANT_mp_cold_5()
{
  _os_crash();
  __break(1u);
}

void os_workgroup_copy_port_VARIANT_mp_cold_3()
{
  OUTLINED_FUNCTION_3(1419);
}

void os_workgroup_create_with_port_VARIANT_mp_cold_1(char *a1, uint64_t a2)
{
  OUTLINED_FUNCTION_5(a1, a2, "BUG IN DISPATCH: Invalid wi flags = %u");
  OUTLINED_FUNCTION_4();
  __break(1u);
}

void os_workgroup_create_with_port_VARIANT_mp_cold_2()
{
  _dispatch_bug(1443, 0);
}

void os_workgroup_create_with_workload_id_and_port_VARIANT_mp_cold_2(int a1)
{
  _dispatch_bug(1488, 0);
  _dispatch_log("BUG IN CLIENT of %s: Invalid mach port 0x%x", "os_workgroup_create_with_workload_id_and_port$VARIANT$mp", a1);
}

void os_workgroup_create_with_workload_id_and_port_VARIANT_mp_cold_3(int a1)
{
  _dispatch_log("BUG IN CLIENT of %s: Invalid mach port 0x%x", "os_workgroup_create_with_workload_id_and_port$VARIANT$mp", a1);
  OUTLINED_FUNCTION_0_0(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)));
  OUTLINED_FUNCTION_1();
}

void os_workgroup_create_with_workload_id_and_workgroup_VARIANT_mp_cold_1()
{
  _dispatch_log("BUG IN CLIENT of %s: Workgroup already cancelled", "os_workgroup_create_with_workload_id_and_workgroup$VARIANT$mp");
  OUTLINED_FUNCTION_0_0(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)));
  OUTLINED_FUNCTION_1();
}

void _os_workgroup_join_update_wg_VARIANT_mp_cold_1()
{
  __assert_rtn("_os_workgroup_join_update_wg$VARIANT$mp", "workgroup.c", 1653, "cur_wg == NULL");
}

void os_workgroup_get_working_arena_VARIANT_mp_cold_1()
{
  _os_crash();
  __break(1u);
}

void os_workgroup_get_working_arena_VARIANT_mp_cold_2()
{
  _os_crash();
  __break(1u);
}

void os_workgroup_get_working_arena_VARIANT_mp_cold_3()
{
  _os_crash();
  __break(1u);
}

void _os_workgroup_pthread_start_cold_1(int a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: pthread_start os_workgroup_join failed";
  qword_1EDF52D38 = a1;
  __break(1u);
}

void _wg_type_to_wi_flags_cold_1()
{
  _os_crash();
  __break(1u);
}

void _os_workgroup_lookup_type_from_workload_id_cold_1()
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Workload identifier must not be NULL";
  __break(1u);
}

size_t _dispatch_object_debug_attr_VARIANT_mp(uint64_t a1, char *__str, size_t __size)
{
  int v4;
  size_t v5;

  v4 = snprintf(__str, __size, "xref = %d, ref = %d, ", *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 8));
  v5 = v4;
  if (v4 >= __size)
    v5 = __size;
  if (v4 >= 0)
    return v5;
  else
    return 0;
}

void _os_object_retain_weak_VARIANT_mp_cold_1()
{
  __clrex();
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
}

void _os_object_allows_weak_reference_VARIANT_mp_cold_1()
{
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
}

void _dispatch_dispose_VARIANT_mp_cold_1(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Release while enqueued";
  qword_1EDF52D38 = v1;
  __break(1u);
}

void dispatch_set_target_queue_VARIANT_mp_cold_2()
{
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Resurrection of an object";
  __break(1u);
}

void dispatch_set_target_queue_VARIANT_mp_cold_3(uint64_t a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot target the cooperative root queue - not implemented";
  qword_1EDF52D38 = a1;
  __break(1u);
}

void dispatch_suspend_VARIANT_mp_cold_1()
{
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Object type does not support suspension";
  __break(1u);
}

void dispatch_resume_VARIANT_mp_cold_1()
{
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Object type does not support resume";
  __break(1u);
}

void _dispatch_sema4_create_slow_VARIANT_mp_cold_1(int a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: mach semaphore API failure";
  qword_1EDF52D38 = a1;
  __break(1u);
}

void _dispatch_sema4_create_slow_VARIANT_mp_cold_2()
{
  qword_1EDF52D08 = (uint64_t)"MIG_REPLY_MISMATCH";
  qword_1EDF52D38 = -301;
  __break(1u);
}

void _dispatch_sema4_create_slow_VARIANT_mp_cold_3()
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Use-after-free of dispatch_semaphore_t or dispatch_group_t";
  qword_1EDF52D38 = 15;
  __break(1u);
}

void _dispatch_thread_event_wait_slow_VARIANT_mp_cold_1(unsigned int a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupt thread event value";
  qword_1EDF52D38 = a1;
  __break(1u);
}

void _dispatch_unfair_lock_lock_slow_VARIANT_mp_cold_1()
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: trying to lock recursively";
  __break(1u);
}

void _dispatch_unfair_lock_unlock_slow_VARIANT_mp_cold_1(unsigned int a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: lock not owned by current thread";
  qword_1EDF52D38 = a1;
  __break(1u);
}

void _dlock_wait_cold_1(unsigned int a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: ulock_wait() failed";
  qword_1EDF52D38 = a1;
  __break(1u);
}

void _dlock_wait_cold_2(uint64_t a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Owner in ulock is unknown - possible memory corruption";
  qword_1EDF52D38 = a1;
  __break(1u);
}

void _dlock_wake_cold_1(int a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: ulock_wake() failed";
  qword_1EDF52D38 = -a1;
  __break(1u);
}

size_t _dispatch_semaphore_debug_VARIANT_mp(uint64_t a1, char *a2, size_t a3)
{
  const char *ClassName;
  int v7;
  size_t v8;
  size_t v9;
  size_t v10;
  int v11;
  size_t v12;
  size_t v13;
  size_t v14;
  int v15;
  size_t v16;

  ClassName = object_getClassName((id)a1);
  v7 = snprintf(a2, a3, "%s[%p] = { ", ClassName + 12, (const void *)a1);
  v8 = v7;
  if (v7 >= a3)
    v8 = a3;
  if (v7 >= 0)
    v9 = v8;
  else
    v9 = 0;
  v10 = v9 + _dispatch_object_debug_attr_VARIANT_mp(a1, &a2[v9], a3 - v9);
  v11 = snprintf(&a2[v10], a3 - v10, "port = 0x%x, ", *(_DWORD *)(a1 + 64));
  v12 = v11;
  if (a3 - v10 < v11)
    v12 = a3 - v10;
  if (v11 < 0)
    v12 = 0;
  v13 = v12 + v10;
  v14 = a3 - (v12 + v10);
  v15 = snprintf(&a2[v12 + v10], v14, "value = %ld, orig = %ld }", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v16 = v15;
  if (v14 < v15)
    v16 = v14;
  if (v15 < 0)
    v16 = 0;
  return v16 + v13;
}

size_t _dispatch_group_debug_VARIANT_mp(_QWORD *a1, char *a2, size_t a3)
{
  uint64_t v6;
  const char *ClassName;
  int v8;
  size_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  int v13;
  size_t v14;

  v6 = a1[6];
  ClassName = object_getClassName(a1);
  v8 = snprintf(a2, a3, "%s[%p] = { ", ClassName + 12, a1);
  v9 = v8;
  if (v8 >= a3)
    v9 = a3;
  if (v8 >= 0)
    v10 = v9;
  else
    v10 = 0;
  v11 = v10 + _dispatch_object_debug_attr_VARIANT_mp((uint64_t)a1, &a2[v10], a3 - v10);
  v12 = a3 - v11;
  v13 = snprintf(&a2[v11], v12, "count = %u, gen = %d, waiters = %d, notifs = %d }", -(v6 & 0xFFFFFFFC) >> 2, HIDWORD(v6), v6 & 1, (v6 >> 1) & 1);
  v14 = v13;
  if (v12 < v13)
    v14 = v12;
  if (v13 < 0)
    v14 = 0;
  return v14 + v11;
}

void _dispatch_semaphore_dispose_VARIANT_mp_cold_1(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2 - *a1;
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Semaphore object deallocated while in use (current value < original value)";
  qword_1EDF52D38 = v2;
  __break(1u);
}

void _dispatch_group_dispose_VARIANT_mp_cold_1(uint64_t a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Group object deallocated while in use";
  qword_1EDF52D38 = a1;
  __break(1u);
}

void dispatch_group_leave_VARIANT_mp_cold_1(uint64_t a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unbalanced call to dispatch_group_leave()";
  qword_1EDF52D38 = a1;
  __break(1u);
}

void dispatch_group_enter_VARIANT_mp_cold_2(unsigned int a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Too many nested calls to dispatch_group_enter()";
  qword_1EDF52D38 = a1;
  __break(1u);
}

void dispatch_group_notify_VARIANT_mp_cold_3()
{
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher resurrection";
  __break(1u);
}

uint64_t _dispatch_queue_debug_attr_VARIANT_mp(uint64_t a1, char *a2, unint64_t a3)
{
  uint64_t v6;
  void *v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v6 = *(_QWORD *)(a1 + 24);
  v7 = &unk_18A069831;
  if (v6 && *(_QWORD *)(v6 + 72))
    v7 = *(void **)(v6 + 72);
  v8 = *(_QWORD *)(a1 + 56);
  v54 = *(unsigned __int16 *)(a1 + 80);
  v55 = v8;
  v52 = v7;
  v53 = *(_QWORD *)(a1 + 24);
  v51 = (*(_DWORD *)(a1 + 96) + 1);
  v9 = OUTLINED_FUNCTION_3_0(a2, (uint64_t)a2, "sref = %d, target = %s[%p], width = 0x%x, state = 0x%016llx");
  v11 = v9;
  if (v9 >= a3)
    v11 = a3;
  if (v9 >= 0)
    v12 = v11;
  else
    v12 = 0;
  if (v8 >> 55)
  {
    v13 = (char *)OUTLINED_FUNCTION_2();
    v51 = v8 >> 58;
    OUTLINED_FUNCTION_1_0(v13, v14, ", suspended = %d");
    OUTLINED_FUNCTION_0_1();
    if (v16 < 0)
      v15 = 0;
    v12 += v15;
  }
  v17 = v8 & 0x180000000000000;
  if ((v8 & 0x180000000000000) == 0x80000000000000)
  {
    v18 = (char *)OUTLINED_FUNCTION_2();
    v20 = ", activating";
  }
  else if (v17 == 0x100000000000000)
  {
    v18 = (char *)OUTLINED_FUNCTION_2();
    v20 = ", activated";
  }
  else
  {
    if (v17 != 0x180000000000000)
      goto LABEL_22;
    v18 = (char *)OUTLINED_FUNCTION_2();
    v20 = ", inactive";
  }
  OUTLINED_FUNCTION_1_0(v18, v19, v20);
  OUTLINED_FUNCTION_0_1();
  if (v22 < 0)
    v21 = 0;
  v12 += v21;
LABEL_22:
  if ((v8 & 0x4000000001) != 0)
  {
    v23 = (char *)OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_1_0(v23, v24, ", enqueued");
    OUTLINED_FUNCTION_0_1();
    if (v26 < 0)
      v25 = 0;
    v12 += v25;
  }
  if ((v8 & 0x8000000000) != 0)
  {
    v27 = (char *)OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_1_0(v27, v28, ", dirty");
    OUTLINED_FUNCTION_0_1();
    if (v30 < 0)
      v29 = 0;
    v12 += v29;
  }
  if ((v8 & 0x700000000) != 0)
  {
    v51 = HIDWORD(v8) & 7;
    OUTLINED_FUNCTION_1_0(&a2[v12], v10, ", max qos %d");
    OUTLINED_FUNCTION_0_1();
    if (v32 < 0)
      v31 = 0;
    v12 += v31;
  }
  if (v8 >= 4 && ((*(_DWORD *)(a1 + 80) & 0x40000) == 0 || (*(_DWORD *)(a1 + 80) & 0x1000000) != 0))
  {
    v51 = v8 | 3;
    OUTLINED_FUNCTION_1_0(&a2[v12], v10, ", draining on 0x%x");
    OUTLINED_FUNCTION_0_1();
    if (v34 < 0)
      v33 = 0;
    v12 += v33;
  }
  v35 = (char *)OUTLINED_FUNCTION_2();
  if ((v8 & 0x40000000000000) != 0)
  {
    OUTLINED_FUNCTION_1_0(v35, v36, ", in-barrier");
    OUTLINED_FUNCTION_0_1();
    if (v43 < 0)
      v41 = 0;
    v39 = v8 & 0x10000000000;
  }
  else
  {
    v37 = (v8 >> 41) & 0x1FFF;
    LODWORD(v38) = v37 + *(unsigned __int16 *)(a1 + 80) - 4096;
    v39 = v8 & 0x10000000000;
    if (v39)
      v38 = (v37 - 4095);
    else
      v38 = v38;
    v51 = v38;
    OUTLINED_FUNCTION_1_0(v35, v36, ", in-flight = %d");
    OUTLINED_FUNCTION_0_1();
    if (v42 < 0)
      v41 = 0;
  }
  v44 = v41 + v12;
  if (v39)
  {
    v45 = snprintf(&a2[v44], a3 - v44, ", pending-barrier", v51, v52, v53, v54, v55);
    v46 = v45;
    if (a3 - v44 < v45)
      v46 = a3 - v44;
    if (v45 < 0)
      v46 = 0;
    v44 += v46;
  }
  if ((*(_DWORD *)(a1 + 80) & 0x40000) != 0 && (*(_DWORD *)(a1 + 80) & 0x1000000) == 0)
  {
    v47 = a3 - v44;
    v48 = OUTLINED_FUNCTION_3_0(&a2[v44], v40, ", thread = 0x%x ");
    v49 = v48;
    if (v47 < v48)
      v49 = v47;
    if (v48 < 0)
      v49 = 0;
    v44 += v49;
  }
  return v44;
}

uint64_t _dispatch_queue_debug_VARIANT_mp(id a1, char *a2, unint64_t a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;

  if (!*((_QWORD *)a1 + 9))
    object_getClassName(a1);
  v6 = OUTLINED_FUNCTION_3_0(a2, (uint64_t)a2, "%s[%p] = { ");
  v7 = v6;
  if (v6 >= a3)
    v7 = a3;
  if (v6 >= 0)
    v8 = v7;
  else
    v8 = 0;
  v9 = v8 + _dispatch_object_debug_attr_VARIANT_mp((uint64_t)a1, &a2[v8], a3 - v8);
  v10 = v9 + _dispatch_queue_debug_attr_VARIANT_mp((uint64_t)a1, &a2[v9], a3 - v9);
  v11 = a3 - v10;
  v13 = OUTLINED_FUNCTION_3_0(&a2[v10], v12, "}");
  v14 = v13;
  if (v11 < v13)
    v14 = v11;
  if (v13 < 0)
    v14 = 0;
  return v14 + v10;
}

size_t _dispatch_channel_debug_VARIANT_mp(void *a1, uint64_t a2, unint64_t a3)
{
  const char *ClassName;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;

  ClassName = object_getClassName(a1);
  v8 = OUTLINED_FUNCTION_4_0((uint64_t)ClassName, v7, "%s[%p] = { ");
  v9 = v8;
  if (v8 >= a3)
    v9 = a3;
  if (v8 >= 0)
    v10 = v9;
  else
    v10 = 0;
  v11 = v10 + _dispatch_object_debug_attr_VARIANT_mp((uint64_t)a1, (char *)(a2 + v10), a3 - v10);
  v12 = _dispatch_queue_debug_attr_VARIANT_mp((uint64_t)a1, (char *)(a2 + v11), a3 - v11);
  v14 = OUTLINED_FUNCTION_4_0(v12, v13, "%s%s%s");
  v15 = v14;
  if (v14 >= a3)
    v15 = a3;
  if (v14 < 0)
    v15 = 0;
  return v11 + v15 + v12;
}

void dispatch_assert_queue_V2_VARIANT_mp_cold_1(uint64_t a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: invalid queue passed to dispatch_assert_queue()";
  qword_1EDF52D38 = a1;
  __break(1u);
}

void dispatch_assert_queue_not_V2_VARIANT_mp_cold_1(uint64_t a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: invalid queue passed to dispatch_assert_queue_not()";
  qword_1EDF52D38 = a1;
  __break(1u);
}

void _dispatch_async_redirect_invoke_cold_1()
{
  qword_1EDF52D08 = (uint64_t)"API MISUSE: Voucher over-release";
  __break(1u);
}

void _dispatch_queue_override_invoke_cold_1(uint64_t a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected object type";
  qword_1EDF52D38 = a1;
  __break(1u);
}

void dispatch_block_perform_VARIANT_mp_cold_1(uint64_t a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid flags passed to dispatch_block_perform()";
  qword_1EDF52D38 = a1;
  __break(1u);
}

void _dispatch_block_sync_invoke_VARIANT_mp_cold_5(uint64_t a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption of dispatch block object";
  qword_1EDF52D38 = a1;
  __break(1u);
}

void dispatch_block_cancel_VARIANT_mp_cold_2()
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid block object passed to dispatch_block_cancel()";
  __break(1u);
}

void dispatch_block_testcancel_VARIANT_mp_cold_2()
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid block object passed to dispatch_block_testcancel()";
  __break(1u);
}

void dispatch_block_wait_VARIANT_mp_cold_1(int a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: A block object may not be both run more than once and waited for";
  qword_1EDF52D38 = a1;
  __break(1u);
}

void dispatch_block_wait_VARIANT_mp_cold_2(unsigned int a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: A block object may not be waited for more than once";
  qword_1EDF52D38 = a1;
  __break(1u);
}

void dispatch_block_wait_VARIANT_mp_cold_4()
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid block object passed to dispatch_block_wait()";
  __break(1u);
}

void dispatch_block_notify_VARIANT_mp_cold_1(unsigned int a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: A block object may not be both run more than once and observed";
  qword_1EDF52D38 = a1;
  __break(1u);
}

void dispatch_block_notify_VARIANT_mp_cold_3(uint64_t a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid block object passed to dispatch_block_notify()";
  qword_1EDF52D38 = a1;
  __break(1u);
}

void dispatch_queue_set_label_nocopy_VARIANT_mp_cold_1(uint64_t a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot change label for this queue";
  qword_1EDF52D38 = a1;
  __break(1u);
}

void dispatch_set_qos_class_floor_VARIANT_mp_cold_1(uint64_t a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch queue/source property setter called after activation";
  qword_1EDF52D38 = a1;
  __break(1u);
}

void dispatch_set_qos_class_floor_VARIANT_mp_cold_2()
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_set_qos_class_floor called on invalid object type";
  __break(1u);
}

void dispatch_set_qos_class_VARIANT_mp_cold_1()
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_set_qos_class called on invalid object type";
  __break(1u);
}

void dispatch_set_qos_class_fallback_VARIANT_mp_cold_2()
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_set_qos_class_fallback called on invalid object type";
  __break(1u);
}

void _dispatch_lane_class_dispose_VARIANT_mp_cold_1(uint64_t a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of a queue with corrupt state";
  qword_1EDF52D38 = a1;
  __break(1u);
}

void _dispatch_lane_class_dispose_VARIANT_mp_cold_2(uint64_t a1)
{
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Premature release of a locked queue";
  qword_1EDF52D38 = a1;
  __break(1u);
}

void _dispatch_lane_class_dispose_VARIANT_mp_cold_3(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  qword_1EDF52D08 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of a queue while items are enqueued";
  qword_1EDF52D38 = v1;
  __break(1u);
}

