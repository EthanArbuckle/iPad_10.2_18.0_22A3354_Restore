_BYTE *ccz_divmod(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t i;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 is_zero;
  int v31;
  __int128 v33;
  void *v34[2];
  _OWORD v35[2];
  _OWORD v36[2];
  __int128 v37;
  void *__src[2];
  char v39;

  v8 = 0;
  v39 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v39 = v8;
  if (!ccz_is_zero(a4))
  {
    v14 = ccz_n(a3);
    v15 = *(unint64_t **)(a3 + 24);
    v16 = ccz_n(a4);
    if ((ccn_cmpn(v14, v15, v16, *(unint64_t **)(a4 + 24)) & 0x80000000) != 0)
    {
      if (a2)
        ccz_set(a2, a3);
      if (a1)
        ccz_zero((_QWORD *)a1);
    }
    else
    {
      v37 = 0u;
      *(_OWORD *)__src = 0u;
      memset(v36, 0, sizeof(v36));
      memset(v35, 0, sizeof(v35));
      v33 = 0u;
      *(_OWORD *)v34 = 0u;
      ccz_init(*(_QWORD *)(a3 + 8), (uint64_t)v35);
      ccz_init(*(_QWORD *)(a3 + 8), (uint64_t)&v33);
      ccz_init(*(_QWORD *)(a3 + 8), (uint64_t)&v37);
      ccz_init(*(_QWORD *)(a3 + 8), (uint64_t)v36);
      v17 = ccz_bitlen(a3);
      v18 = ccz_bitlen(a4);
      ccz_seti((uint64_t)v35, 1);
      ccz_lsl((uint64_t)v35, (uint64_t)v35, v17 - v18);
      ccz_set((uint64_t)&v37, a3);
      ccz_set_sign((uint64_t)&v37, 1);
      ccz_lsl((uint64_t)v36, a4, v17 - v18);
      ccz_set_sign((uint64_t)v36, 1);
      for (i = v18 - v17; ; ++i)
      {
        if ((ccz_cmp((uint64_t)&v37, (uint64_t)v36) & 0x80000000) == 0)
        {
          ccz_sub((uint64_t)&v37, (uint64_t)&v37, (uint64_t)v36);
          ccz_add(&v33, (uint64_t)&v33, (uint64_t)v35);
        }
        if (!i)
          break;
        ccz_lsr((uint64_t)v36, (uint64_t)v36, 1uLL);
        ccz_lsr((uint64_t)v35, (uint64_t)v35, 1uLL);
      }
      v20 = ccz_sign(a3);
      v21 = ccz_sign(a4);
      if (a2)
      {
        v22 = ccz_n((uint64_t)&v37);
        ccz_set_capacity(a2, v22);
        v23 = ccz_n((uint64_t)&v37);
        ccz_set_n((_QWORD *)a2, v23);
        v24 = ccz_n(a2);
        ccn_set(v24, *(void **)(a2 + 24), __src[1]);
        if (ccz_is_zero(a2))
          v25 = 1;
        else
          v25 = v20;
        ccz_set_sign(a2, v25);
      }
      if (a1)
      {
        v26 = ccz_n((uint64_t)&v33);
        ccz_set_capacity(a1, v26);
        v27 = ccz_n((uint64_t)&v33);
        ccz_set_n((_QWORD *)a1, v27);
        v28 = ccz_n(a1);
        ccn_set(v28, *(void **)(a1 + 24), v34[1]);
        is_zero = ccz_is_zero(a1);
        if (v20 == v21 || is_zero)
          v31 = 1;
        else
          v31 = -1;
        ccz_set_sign(a1, v31);
      }
      ccz_free((uint64_t)v35);
      ccz_free((uint64_t)&v33);
      ccz_free((uint64_t)&v37);
      ccz_free((uint64_t)v36);
    }
  }
  return cc_disable_dit(&v39);
}

_BYTE *ccz_add(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char v6;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  char v21;

  v6 = 0;
  v21 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v21 = v6;
  v12 = ccz_n(a2);
  v13 = ccz_n(a3);
  v14 = ccz_sign(a2);
  if (v14 == ccz_sign(a3))
  {
    v15 = ccz_sign(a2);
    ccz_set_sign((uint64_t)a1, v15);
    if (v12 >= v13)
    {
      v16 = v12 + 1;
      ccz_set_capacity((uint64_t)a1, v12 + 1);
      *(_QWORD *)(a1[3] + 8 * v12) = ccn_addn(v12, (_QWORD *)a1[3], *(uint64_t **)(a2 + 24), v13, *(uint64_t **)(a3 + 24));
    }
    else
    {
      v16 = v13 + 1;
      ccz_set_capacity((uint64_t)a1, v13 + 1);
      *(_QWORD *)(a1[3] + 8 * v13) = ccn_addn(v13, (_QWORD *)a1[3], *(uint64_t **)(a3 + 24), v12, *(uint64_t **)(a2 + 24));
    }
    v12 = v16;
  }
  else if ((ccn_cmpn(v12, *(unint64_t **)(a2 + 24), v13, *(unint64_t **)(a3 + 24)) & 0x80000000) != 0)
  {
    v18 = ccz_sign(a3);
    ccz_set_sign((uint64_t)a1, v18);
    ccz_set_capacity((uint64_t)a1, v13);
    ccn_subn(v13, (_QWORD *)a1[3], *(uint64_t **)(a3 + 24), v12, *(unint64_t **)(a2 + 24));
    v12 = v13;
  }
  else
  {
    v17 = ccz_sign(a2);
    ccz_set_sign((uint64_t)a1, v17);
    ccz_set_capacity((uint64_t)a1, v12);
    ccn_subn(v12, (_QWORD *)a1[3], *(uint64_t **)(a2 + 24), v13, *(unint64_t **)(a3 + 24));
  }
  v19 = ccn_n(v12, a1[3]);
  ccz_set_n(a1, v19);
  return cc_disable_dit(&v21);
}

BOOL ccn_addn(uint64_t a1, _QWORD *a2, uint64_t *a3, _BOOL8 a4, uint64_t *a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  _BOOL8 v8;

  v5 = a1 - a4;
  v6 = &a2[a4];
  v7 = &a3[a4];
  v8 = ccn_add_ws(0, a4, a2, a3, a5);
  return ccn_add1_ws(0, v5, v6, v7, v8);
}

_BYTE *ccz_free(uint64_t a1)
{
  char v2;
  uint64_t v8;
  uint64_t *v9;
  void (*v10)(uint64_t, uint64_t, _QWORD);
  uint64_t v11;
  uint64_t v12;
  char v14;

  v2 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v14 = v2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8 && *(_QWORD *)(v8 + 24) && ccz_capacity(a1))
  {
    v9 = *(uint64_t **)(a1 + 8);
    v10 = (void (*)(uint64_t, uint64_t, _QWORD))v9[3];
    v11 = *v9;
    v12 = ccz_capacity(a1);
    v10(v11, v12, *(_QWORD *)(a1 + 24));
  }
  return cc_disable_dit(&v14);
}

uint64_t ccz_capacity(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16);
  if (v1 >= 0)
    return v1;
  else
    return -v1;
}

_BYTE *ccz_init(uint64_t a1, uint64_t a2)
{
  char v2;
  char v9;

  v2 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v9 = v2;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = a1;
  *(_DWORD *)(a2 + 16) = 0;
  return cc_disable_dit(&v9);
}

uint64_t ccn_divmod_ws(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int8x16_t *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64x2_t v19;
  int v20;
  unint64_t v21;
  uint64x2_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int128 v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BOOL8 v43;
  _BOOL8 v44;
  unint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v50;
  size_t v52;
  uint64_t v53;
  char v54;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64[2];
  uint64_t v65[4];

  v65[2] = *MEMORY[0x1E0C874D8];
  v12 = ccn_n(a6, a8);
  v13 = a2 - v12;
  v50 = *(_QWORD *)(a1 + 16);
  v14 = v12 + 1;
  v15 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12 + 1);
  v16 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12 + 1);
  v59 = a1;
  v17 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12 + 1);
  v15[v12] = 0;
  v57 = v12 - 1;
  v18 = __clz(*(_QWORD *)(a8 + 8 * (v12 - 1)));
  ccn_shift_left(v12, (uint64_t)v15, a8, v18, v19);
  v20 = -(int)v18;
  v60 = v18;
  v21 = v18 + 0xFFFFFFFF;
  if (v12)
    ccn_set(v12, v16, (void *)(a3 + 8 * v13));
  v53 = -(uint64_t)HIDWORD(v21);
  v54 = v20 & 0x3F;
  ccn_zero(1, (char *)v16 + 8 * v12);
  ccn_shift_left(v14, (uint64_t)v16, (uint64_t)v16, v60, v22);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = v15[v57];
  v27 = -v26;
  v29 = (unsigned __int128)-(__int128)__PAIR128__(v28, v26) >> 64;
  v30 = 65;
  v31 = v26;
  do
  {
    v32 = __PAIR128__(v29, v27) - __PAIR128__(v31, v23);
    v33 = (unint64_t)((__PAIR128__(v29, v27) - __PAIR128__(v31, v23)) >> 64) >> 63;
    v34 = v29 & ((uint64_t)((__PAIR128__(v29, v27) - __PAIR128__(v31, v23)) >> 64) >> 63);
    v27 = (v33 - 1) & v32 | v27 & (*((uint64_t *)&v32 + 1) >> 63);
    *((_QWORD *)&v35 + 1) = v25;
    *(_QWORD *)&v35 = v24;
    v25 = v35 >> 63;
    *((_QWORD *)&v35 + 1) = v24;
    *(_QWORD *)&v35 = *((_QWORD *)&v32 + 1);
    v29 = (v33 != 0 ? 0 : *((_QWORD *)&v32 + 1)) | v34;
    v24 = (v35 >> 63) ^ 1;
    *((_QWORD *)&v35 + 1) = v31;
    *(_QWORD *)&v35 = v23;
    v23 = v35 >> 1;
    v31 >>= 1;
    --v30;
  }
  while (v30);
  v56 = (v24 + 2) | ((((HIDWORD(v15[v57]) ^ 0x80000000 | v15[v57]) + 0xFFFFFFFF) >> 32) - 1);
  v52 = 8 * v12;
  v58 = v12;
  v36 = (_QWORD *)(a3 - 8 * v12 + 8 * a2);
  v37 = v13;
  do
  {
    v38 = v13;
    v39 = *v36 << v60;
    v16->i64[0] = v39;
    if (v37)
      v16->i64[0] = ((*(v36 - 1) & (unint64_t)v53) >> v54) | v39;
    v40 = v16->u64[v58];
    v41 = v16->i64[v57];
    v63 = v15[v57];
    v42 = ((__PAIR128__(v40, v41) - (unint64_t)v63) >> 64) + ((v40 * (unsigned __int128)v56) >> 64) + 2;
    if (v42 < v40)
      v42 = -1;
    v62 = v42;
    ccn_mul(1, (uint64_t)v65, (uint64_t)&v62, (uint64_t)&v63);
    v64[0] = v41;
    v64[1] = v40;
    v43 = ccn_sub_ws(0, 2, v65, v64, (unint64_t *)v65);
    v62 -= 2 * v43;
    v44 = ccn_add1_ws(0, 2, v65, v65, v63);
    v45 = v62 + v44;
    v17[v58] = ccn_mul1(v58, v17, v15, v62 + v44);
    v46 = ccn_sub_ws(v59, v14, v16, v16->i64, v17);
    v47 = v46 - ccn_cond_add(v14, v46, v16->i64, v16->i64, v15);
    result = ccn_cond_add(v14, v47, v16->i64, v16->i64, v15);
    if (a5 && v37 < a4)
      *(_QWORD *)(a5 + 8 * v37) = v45 - (v46 + v47);
    if (v37)
      result = (uint64_t)memmove(&v16->u64[1], v16, v52);
    --v37;
    --v36;
    v13 = v38;
  }
  while (v37 <= v38);
  if (a5 && a4 > v38 + 1)
    result = cc_clear(8 * (a4 - (v38 + 1)), (void *)(a5 + 8 * (v38 + 1)));
  if (a7)
  {
    ccn_shift_right(v58, v16, v16, v60);
    if (v58)
      ccn_set(v58, a7, v16);
    result = ccn_zero(a6 - v58, &a7[8 * v58]);
  }
  *(_QWORD *)(v59 + 16) = v50;
  return result;
}

BOOL ccn_add1_ws(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  if (a2)
    return ccn_add1_asm(a2, a3, a4, a5);
  else
    return a5;
}

BOOL ccn_add1_asm(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *i;
  uint64_t v8;
  _BOOL8 v9;

  if (!a1)
    return a4;
  v5 = *a3;
  v4 = a3 + 1;
  v6 = __CFADD__(v5, a4);
  *a2 = v5 + a4;
  for (i = a2 + 1; --a1; ++i)
  {
    v8 = *v4++;
    v9 = v6;
    v6 = __CFADD__(v6, v8);
    *i = v9 + v8;
  }
  return v6;
}

double ccn_shift_left(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64x2_t a5)
{
  uint64_t v5;
  uint64x2_t v6;
  uint64x2_t v7;
  unint64_t *v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  uint64x2_t v12;
  uint64x2_t v13;
  uint64x2_t v14;
  uint64x2_t v15;
  uint64x2_t v16;
  int8x16_t v17;
  uint64_t v18;
  uint64x2_t v19;

  v5 = a2 + 8 * a1;
  v6 = (uint64x2_t)vdupq_n_s64(a4);
  v7 = (uint64x2_t)vdupq_n_s64(a4 - 64);
  v8 = (unint64_t *)(a3 + 8 * a1 - 8);
  v9 = a1 == 4;
  v10 = a1 < 4;
  v11 = a1 - 4;
  if (!v10)
  {
    if (v9)
    {
      v16.i64[0] = 0;
      v16.i64[1] = *(v8 - 3);
      a5 = (uint64x2_t)veorq_s8((int8x16_t)vshlq_u64(v16, v7), (int8x16_t)vshlq_u64(*(uint64x2_t *)(v8 - 3), v6));
      v17 = veorq_s8((int8x16_t)vshlq_u64(*((uint64x2_t *)v8 - 1), v7), (int8x16_t)vshlq_u64(*(uint64x2_t *)(v8 - 1), v6));
      *(uint64x2_t *)(v5 - 32) = a5;
      *(int8x16_t *)(v5 - 16) = v17;
      return *(double *)a5.i64;
    }
    do
    {
      v12 = *(uint64x2_t *)(v8 - 3);
      v13 = *(uint64x2_t *)(v8 - 1);
      v14 = *((uint64x2_t *)v8 - 2);
      v15 = *((uint64x2_t *)v8 - 1);
      v8 -= 4;
      a5 = (uint64x2_t)veorq_s8((int8x16_t)vshlq_u64(v14, v7), (int8x16_t)vshlq_u64(v12, v6));
      *(uint64x2_t *)(v5 - 32) = a5;
      *(int8x16_t *)(v5 - 16) = veorq_s8((int8x16_t)vshlq_u64(v15, v7), (int8x16_t)vshlq_u64(v13, v6));
      v5 -= 32;
      v10 = v11 <= 4;
      v11 -= 4;
    }
    while (!v10);
  }
  v18 = v11 & 3;
  if (!v18)
    return *(double *)a5.i64;
  if (v18 == 3)
  {
    v19 = *((uint64x2_t *)v8 - 1);
  }
  else
  {
    if ((v18 & 2) == 0)
      goto LABEL_13;
    v19.i64[0] = 0;
    v19.i64[1] = *(v8 - 1);
  }
  a5 = (uint64x2_t)veorq_s8((int8x16_t)vshlq_u64(*(uint64x2_t *)(v8 - 1), v6), (int8x16_t)vshlq_u64(v19, v7));
  v8 -= 2;
  *(uint64x2_t *)(v5 - 16) = a5;
  v5 -= 16;
LABEL_13:
  if ((v18 & 1) != 0)
  {
    a5.i64[0] = *v8;
    a5.i64[0] = vshlq_u64(a5, v6).u64[0];
    *(_QWORD *)(v5 - 8) = a5.i64[0];
  }
  return *(double *)a5.i64;
}

uint64_t ccec_twin_mult_ws(uint64_t a1, uint64_t *a2, char *a3, unint64_t *a4, uint64_t a5, unint64_t *a6, char *a7)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  _QWORD v28[2];

  v28[1] = *MEMORY[0x1E0C874D8];
  v12 = *a2;
  v24 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, *a2);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12);
  v13 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12);
  v25 = 3 * v12;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 12 * v12);
  v15 = v14 + 48 * v12;
  v26 = v14;
  v16 = v14 + 72 * v12;
  ccec_full_add_ws(a1, (uint64_t)a2);
  ccec_full_sub_ws(a1, a2, v16, a5, a7);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  v23 = cczp_inv_ws(a1, (uint64_t)a2);
  if (!v23)
  {
    ccec_twin_mult_normalize_ws(a1, a2);
    ccec_twin_mult_normalize_ws(a1, a2);
    ccec_twin_mult_normalize_ws(a1, a2);
    ccec_twin_mult_normalize_ws(a1, a2);
    ccn_seti(v12, v13, 1);
    cczp_to_ws(a1, (uint64_t)a2);
    ccn_set(v12, (void *)(v26 + 24 * v12 + 16 * *a2), (void *)(v26 + 16 * *a2));
    ccn_set(v12, (void *)(v15 + 16 * *a2), (void *)(v26 + 16 * *a2));
    ccn_set(v12, (void *)(v16 + 16 * *a2), (void *)(v26 + 16 * *a2));
    v17 = ccn_bitlen(v12, a4);
    v18 = ccn_bitlen(v12, a6);
    v27[1] = 0;
    v27[2] = 0;
    if (v17 <= v18)
      v17 = v18;
    v27[0] = 0;
    ccn_recode_jsf_init((uint64_t)v27, v17, (uint64_t)a4, (uint64_t)a6);
    ccn_set(v12, a3, (void *)(v26 + 16 * *a2));
    ccn_set(v12, &a3[8 * *a2], (void *)(v26 + 16 * *a2));
    cc_clear(8 * v12, &a3[16 * *a2]);
    for (; v17 != -1; --v17)
    {
      ccec_double_ws(a1, a2);
      ccn_recode_jsf_column((uint64_t)v27, v17, (uint64_t)v28);
      if (v28[0])
      {
        v19 = (char *)(v26 + 8 * ccn_recode_jsf_index(v28) * v25);
        if (ccn_recode_jsf_direction((unsigned int *)v28) == 1)
          ccec_full_add_normalized_ws(a1, a2, a3, (uint64_t)a3, v19);
        else
          ccec_full_sub_normalized_ws(a1, a2, a3, (uint64_t)a3, v19);
      }
    }
  }
  *(_QWORD *)(a1 + 16) = v24;
  return v23;
}

uint64_t ccn_recode_jsf_column(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  int v9;
  _BYTE v10[2];
  __int128 v11;
  uint64_t v12;

  v3 = 0;
  v12 = *MEMORY[0x1E0C874D8];
  if ((*(_BYTE *)result & 0x20) != 0)
    v4 = *(_BYTE *)result & 0x1F ^ 0x1F;
  else
    v4 = *(_BYTE *)result & 0x1F;
  v10[0] = v4;
  if ((*(_BYTE *)(result + 1) & 0x20) != 0)
    v5 = *(_BYTE *)(result + 1) & 0x1F ^ 0x1F;
  else
    v5 = *(_BYTE *)(result + 1) & 0x1F;
  v10[1] = v5;
  v11 = *(_OWORD *)(result + 8);
  v6 = 1;
  do
  {
    v7 = v6;
    if (a2 < 5)
      LOBYTE(v8) = 0;
    else
      v8 = (*(_QWORD *)(*((_QWORD *)&v11 + v3) + 8 * ((a2 - 5) >> 6)) >> ((a2 - 5) & 0x3F)) & 1;
    if (v10[v3] >= F_2_2_11[v10[v3 ^ 1]])
    {
      LOBYTE(v8) = v8 | 0x20;
      if ((*(_BYTE *)(result + v3) & 0x20) != 0)
        v9 = -1;
      else
        v9 = 1;
    }
    else
    {
      v9 = 0;
    }
    v6 = 0;
    *(_DWORD *)(a3 + 4 * v3) = v9;
    *(_BYTE *)(result + v3) = v8 ^ (2 * *(_BYTE *)(result + v3));
    v3 = 1;
  }
  while ((v7 & 1) != 0);
  return result;
}

unint64_t ccn_recode_jsf_index(_DWORD *a1)
{
  return (*a1 & 1 | (2 * (a1[1] & 1u))) - (unint64_t)(*a1 + a1[1] != 0);
}

uint64_t ccn_recode_jsf_direction(unsigned int *a1)
{
  uint64_t result;

  result = *a1;
  if ((_DWORD)result != -1)
  {
    if (!(_DWORD)result && a1[1] == -1)
      return 0xFFFFFFFFLL;
    else
      return 1;
  }
  return result;
}

uint64_t ccec_full_add_normalized_ws(uint64_t a1, uint64_t *a2, char *a3, uint64_t a4, char *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = *a2;
  if (ccec_is_point_at_infinity(a2, a4))
  {
    ccn_set(v11, a3, a5);
    ccn_set(v11, &a3[8 * *a2], &a5[8 * *a2]);
    result = (uint64_t)ccn_set(v11, &a3[16 * *a2], &a5[16 * *a2]);
  }
  else
  {
    result = ccec_add_normalized_ws(a1, a2, a3, a4, (uint64_t)a5, 0);
  }
  *(_QWORD *)(a1 + 16) = v10;
  return result;
}

BOOL ccec_is_point_at_infinity(_QWORD *a1, uint64_t a2)
{
  return ccn_n(*a1, a2 + 16 * *a1) == 0;
}

uint64_t ccec_full_sub_normalized_ws(uint64_t a1, uint64_t *a2, char *a3, uint64_t a4, char *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = *a2;
  if (ccec_is_point_at_infinity(a2, a4))
  {
    ccn_set(v11, a3, a5);
    cczp_negate((uint64_t)a2, (uint64_t *)&a3[8 * *a2], (unint64_t *)&a5[8 * *a2]);
    result = (uint64_t)ccn_set(v11, &a3[16 * *a2], &a5[16 * *a2]);
  }
  else
  {
    result = ccec_add_normalized_ws(a1, a2, a3, a4, (uint64_t)a5, 1);
  }
  *(_QWORD *)(a1 + 16) = v10;
  return result;
}

uint64_t ccec_mult_XYCZaddC_ws(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, _QWORD))(a1 + 24))(a1, *a2);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_sqr_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_sqr_ws(a1, (uint64_t)a2);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_sqr_ws(a1, (uint64_t)a2);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  result = cczp_sub_ws(a1, (uint64_t)a2);
  *(_QWORD *)(a1 + 16) = v5;
  return result;
}

uint64_t cczp_inv_update_redc_ws(uint64_t a1, _QWORD *a2, void *a3, unint64_t *a4, uint64_t a5, unint64_t *a6, uint64_t a7)
{
  uint64_t v12;
  int8x16_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  char v17;
  uint64_t result;
  uint64_t v21;

  v12 = cczp_n((uint64_t)a2);
  v21 = *(_QWORD *)(a1 + 16);
  v13 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12 + 1);
  v14 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12);
  cczp_cond_negate((uint64_t)a2, a5 < 0, v13->i64, a4);
  cczp_cond_negate((uint64_t)a2, a7 < 0, v14, a6);
  v13->i64[v12] = ccn_mul1(v12, v13, v13, (a5 ^ (a5 >> 63)) + ((unint64_t)a5 >> 63));
  v13->i64[v12] += ccn_addmul1(v12, v13, v14, (a7 ^ (a7 >> 63)) + ((unint64_t)a7 >> 63));
  v15 = cczp_prime((uint64_t)a2);
  v13->i64[v12] += ccn_addmul1(v12, v13, v15, (LODWORD(a2[*a2 + 3]) * v13->i32[0]) & 0x7FFFFFFF);
  ccn_shift_right(v12 + 1, v13, v13, 31);
  ccn_set(v12, a3, v13);
  v16 = (unint64_t *)cczp_prime((uint64_t)a2);
  v17 = ccn_subn(v12 + 1, v13, v13->i64, v12, v16);
  result = ccn_mux(v12, v17, (uint64_t *)a3, (uint64_t *)a3, v13->i64);
  *(_QWORD *)(a1 + 16) = v21;
  return result;
}

unint64_t ccn_cond_rsub(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t *a5)
{
  uint64_t mask;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  mask = ccn_mux_next_mask();
  v11 = __ROR8__(0x5555555555555555, a2 | (2 * mask));
  if (a1)
  {
    v12 = 0;
    do
    {
      v14 = *a4++;
      v13 = v14;
      v15 = *a5++;
      v16 = __PAIR128__(v12, v12) - v13;
      v17 = v16 + v15;
      if (__CFADD__((_QWORD)v16, v15))
        v18 = *((_QWORD *)&v16 + 1) + 1;
      else
        v18 = (__PAIR128__(v12, v12) - v13) >> 64;
      v12 = v18 >> 63;
      v19 = v13 ^ v17;
      v20 = v13 ^ mask;
      *a3 = v20;
      *a3++ = v19 & v11 ^ v19 & 0x5555555555555555 ^ v20 ^ mask;
      --a1;
    }
    while (a1);
    v21 = (unint64_t)v18 >> 63;
  }
  else
  {
    v21 = 0;
  }
  return v21 & a2;
}

unint64_t cczp_cond_negate(uint64_t a1, unsigned __int8 a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v8 = cczp_n(a1);
  v9 = (ccn_n(v8, a4) != 0) & a2;
  v10 = (uint64_t *)cczp_prime(a1);
  return ccn_cond_rsub(v8, v9, a3, a4, v10);
}

unint64_t ccn_sub1(uint64_t a1, _QWORD *a2, unint64_t *a3, unint64_t a4)
{
  unint64_t v4;
  unsigned __int128 v5;

  for (; a1; --a1)
  {
    v4 = *a3++;
    v5 = v4 - (unsigned __int128)a4;
    *a2++ = v5;
    a4 = *((_QWORD *)&v5 + 1) >> 63;
  }
  return a4;
}

unint64_t ccn_subn(uint64_t a1, _QWORD *a2, uint64_t *a3, _BOOL8 a4, unint64_t *a5)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t *v7;
  unint64_t v8;

  v5 = a1 - a4;
  v6 = &a2[a4];
  v7 = (unint64_t *)&a3[a4];
  v8 = ccn_sub_ws(0, a4, a2, a3, a5);
  return ccn_sub1(v5, v6, v7, v8);
}

uint64_t cczp_mm_redc_ws(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t *v15;
  char v16;

  v8 = cczp_n((uint64_t)a2);
  v9 = v8;
  if (v8)
  {
    v10 = a2[*a2 + 3];
    v11 = a4;
    v12 = v8;
    do
    {
      v13 = cczp_prime((uint64_t)a2);
      *v11 = ccn_addmul1(v9, v11, v13, *v11 * v10);
      ++v11;
      --v12;
    }
    while (v12);
  }
  v14 = ccn_add_ws(a1, v9, &a4[v9], &a4[v9], a4);
  v15 = (unint64_t *)cczp_prime((uint64_t)a2);
  v16 = ccn_sub_ws(a1, v9, a4, &a4[v9], v15) ^ v14;
  return ccn_mux(v9, v16, a3, &a4[v9], a4);
}

uint64_t ccec_add_normalized_ws(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v14;

  v9 = *a2;
  v14 = *(_QWORD *)(a1 + 16);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, *a2);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9);
  cczp_sqr_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_sub_ws(a1, (uint64_t)a2);
  if (a6)
    cczp_add_ws(a1, (uint64_t)a2);
  else
    cczp_sub_ws(a1, (uint64_t)a2);
  if (ccn_n(v9, v10) || ccn_n(v9, v11))
  {
    if (ccn_n(v9, v10) || !ccn_n(v9, v11))
    {
      cczp_add_ws(a1, (uint64_t)a2);
      cczp_sub_ws(a1, (uint64_t)a2);
      cczp_add_ws(a1, (uint64_t)a2);
      cczp_sub_ws(a1, (uint64_t)a2);
      cczp_mul_ws(a1, (uint64_t)a2);
      cczp_sqr_ws(a1, (uint64_t)a2);
      cczp_mul_ws(a1, (uint64_t)a2);
      cczp_mul_ws(a1, (uint64_t)a2);
      cczp_sqr_ws(a1, (uint64_t)a2);
      cczp_sub_ws(a1, (uint64_t)a2);
      cczp_sub_ws(a1, (uint64_t)a2);
      cczp_sub_ws(a1, (uint64_t)a2);
      cczp_mul_ws(a1, (uint64_t)a2);
      cczp_mul_ws(a1, (uint64_t)a2);
      cczp_sub_ws(a1, (uint64_t)a2);
      result = cczp_div2_ws(a1, (uint64_t)a2, (int8x16_t *)&a3[v9], &a3[v9]);
    }
    else
    {
      ccn_seti(v9, a3, 1);
      cczp_to_ws(a1, (uint64_t)a2);
      ccn_set(v9, &a3[v9], a3);
      result = cc_clear(8 * v9, &a3[2 * v9]);
    }
  }
  else
  {
    result = ccec_double_ws(a1, a2);
  }
  *(_QWORD *)(a1 + 16) = v14;
  return result;
}

_OWORD *ccn_p256_mul_asm_ws(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4, unint64_t *a5)
{
  return ccn_mulmod_p256(a3, a4, a5);
}

uint64_t ccn_n_asm(uint64_t result, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (result)
  {
    v2 = result;
    result = 0;
    v3 = 0;
    do
    {
      v4 = *a2++;
      ++v3;
      if (v4)
        result = v3;
    }
    while (v3 < v2);
  }
  return result;
}

uint64_t ccec_double_ws(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, _QWORD))(a1 + 24))(a1, *a2);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  cczp_sqr_ws(a1, (uint64_t)a2);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_sqr_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_sqr_ws(a1, (uint64_t)a2);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_sqr_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  result = cczp_sub_ws(a1, (uint64_t)a2);
  *(_QWORD *)(a1 + 16) = v5;
  return result;
}

_OWORD *ccn_mulmod_p256(_QWORD *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BOOL1 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  _BOOL8 v57;
  _BOOL8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL8 v62;
  uint64_t v63;
  uint64_t v64;
  _BOOL8 v65;
  uint64_t v66;
  _BOOL8 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BOOL8 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL8 v77;
  uint64_t v78;
  _BOOL8 v79;
  uint64_t v80;
  _BOOL8 v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _BOOL8 v85;
  uint64_t v86;
  _BOOL8 v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _BOOL8 v91;
  uint64_t v92;
  _BOOL8 v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _BOOL8 v97;
  uint64_t v98;
  _BOOL8 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BOOL8 v103;
  uint64_t v104;
  _BOOL8 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BOOL8 v109;
  unint64_t v110;
  _BOOL8 v111;
  uint64_t v112;
  _BOOL8 v113;
  _BOOL8 v114;
  uint64_t v115;
  unint64_t v116;
  _BOOL8 v117;
  uint64_t v118;
  uint64_t v119;
  _OWORD *result;

  v4 = *a2;
  v5 = a2[1];
  v3 = a2 + 2;
  v6 = *v3;
  v7 = v3[1];
  v9 = *a3;
  v10 = a3[1];
  v8 = a3 + 2;
  v11 = *v8;
  v12 = v8[1];
  v13 = v4 * v9;
  v14 = (v5 * (unsigned __int128)v9) >> 64;
  v15 = *v3 * v9;
  v16 = (v6 * (unsigned __int128)v9) >> 64;
  v18 = v9;
  v17 = (__PAIR128__(v5, v4) * v9) >> 64;
  v19 = __CFADD__(__CFADD__((v4 * (unsigned __int128)v9) >> 64, v5 * v9), v14);
  v20 = __CFADD__((v4 * (unsigned __int128)v9) >> 64, v5 * v9) + v14;
  v19 |= __CFADD__(v15, v20);
  v20 += v15;
  v21 = (v7 * (unsigned __int128)v9) >> 64;
  v22 = (v7 * (unsigned __int128)v10) >> 64;
  v24 = v19;
  v19 = __CFADD__(v19, v16);
  v23 = v24 + v16;
  v19 |= __CFADD__(v7 * v9, v23);
  v23 += v7 * v9;
  v26 = v19;
  v19 = __CFADD__(v19, v21);
  v25 = v26 + v21;
  v19 |= __CFADD__(v7 * v10, v25);
  v25 += v7 * v10;
  v27 = v7 * *v8;
  v28 = (v7 * (unsigned __int128)v11) >> 64;
  v30 = v19;
  v19 = __CFADD__(v19, v22);
  v29 = v30 + v22;
  v19 |= __CFADD__(v27, v29);
  v29 += v27;
  v32 = v19;
  v19 = __CFADD__(v19, v28);
  v31 = v32 + v28;
  v19 |= __CFADD__(v7 * v12, v31);
  v31 += v7 * v12;
  v33 = v19 + ((v7 * (unsigned __int128)v12) >> 64);
  v34 = (v4 * (unsigned __int128)v10) >> 64;
  v19 = __CFADD__(v17, v4 * v10);
  v35 = (__PAIR128__(v10, v18) * __PAIR128__(v5, v4)) >> 64;
  v37 = v19;
  v19 = __CFADD__(v19, v20);
  v36 = v37 + v20;
  v19 |= __CFADD__(v34, v36);
  v36 += v34;
  v38 = (v6 * (unsigned __int128)v10) >> 64;
  v40 = v19;
  v19 = __CFADD__(v19, v23);
  v39 = v40 + v23;
  v19 |= __CFADD__(v6 * v10, v39);
  v39 += v6 * v10;
  v42 = v19;
  v19 = __CFADD__(v19, v25);
  v41 = v42 + v25;
  v19 |= __CFADD__(v38, v41);
  v41 += v38;
  v43 = (v6 * (unsigned __int128)v12) >> 64;
  v45 = v19;
  v19 = __CFADD__(v19, v29);
  v44 = v45 + v29;
  v19 |= __CFADD__(v6 * v12, v44);
  v44 += v6 * v12;
  v47 = v19;
  v19 = __CFADD__(v19, v31);
  v46 = v47 + v31;
  v19 |= __CFADD__(v43, v46);
  v46 += v43;
  v48 = v19 + v33;
  v49 = (v5 * (unsigned __int128)v10) >> 64;
  v19 = __CFADD__(v36, v5 * v10);
  v50 = v36 + v5 * v10;
  v52 = v19;
  v19 = __CFADD__(v19, v39);
  v51 = v52 + v39;
  v19 |= __CFADD__(v49, v51);
  v51 += v49;
  v53 = (v6 * (unsigned __int128)v11) >> 64;
  v55 = v19;
  v19 = __CFADD__(v19, v41);
  v54 = v55 + v41;
  v19 |= __CFADD__(v6 * v11, v54);
  v54 += v6 * v11;
  v57 = v19;
  v19 = __CFADD__(v19, v44);
  v56 = v57 + v44;
  v19 |= __CFADD__(v53, v56);
  v56 += v53;
  v58 = v19;
  v59 = (v4 * (unsigned __int128)v11) >> 64;
  v19 = __CFADD__(v50, v4 * v11);
  v60 = v50 + v4 * v11;
  v62 = v19;
  v19 = __CFADD__(v19, v51);
  v61 = v62 + v51;
  v19 |= __CFADD__(v59, v61);
  v61 += v59;
  v63 = (v5 * (unsigned __int128)v12) >> 64;
  v65 = v19;
  v19 = __CFADD__(v19, v54);
  v64 = v65 + v54;
  v19 |= __CFADD__(v5 * v12, v64);
  v64 += v5 * v12;
  v67 = v19;
  v19 = __CFADD__(v19, v56);
  v66 = v67 + v56;
  v19 |= __CFADD__(v63, v66);
  v66 += v63;
  v68 = v19 + v58;
  v69 = (v5 * (unsigned __int128)v11) >> 64;
  v19 = __CFADD__(v61, v5 * v11);
  v70 = v61 + v5 * v11;
  v72 = v19;
  v19 = __CFADD__(v19, v64);
  v71 = v72 + v64;
  v19 |= __CFADD__(v69, v71);
  v71 += v69;
  v73 = v19;
  v74 = (v4 * (unsigned __int128)v12) >> 64;
  v19 = __CFADD__(v70, v4 * v12);
  v75 = v70 + v4 * v12;
  v77 = v19;
  v19 = __CFADD__(v19, v71);
  v76 = v77 + v71;
  v19 |= __CFADD__(v74, v76);
  v76 += v74;
  v79 = v19;
  v19 = __CFADD__(v19, v66);
  v78 = v79 + v66;
  v19 |= __CFADD__(v73, v78);
  v78 += v73;
  v81 = v19;
  v19 = __CFADD__(v19, v46);
  v80 = v81 + v46;
  v19 |= __CFADD__(v68, v80);
  v80 += v68;
  v82 = v19 + v48;
  v19 = __CFADD__(v35, v13 << 32);
  v83 = v35 + (v13 << 32);
  v85 = v19;
  v19 = __CFADD__(v19, v60);
  v84 = v85 + v60;
  v19 |= __CFADD__(HIDWORD(v13), v84);
  v84 += HIDWORD(v13);
  v87 = v19;
  v19 = __CFADD__(v19, v75);
  v86 = v87 + v75;
  v19 |= __CFADD__(0xFFFFFFFF00000001 * v13, v86);
  v86 += 0xFFFFFFFF00000001 * v13;
  v88 = v19 + ((v13 * (unsigned __int128)0xFFFFFFFF00000001) >> 64);
  v19 = __CFADD__(v84, v83 << 32);
  v89 = v84 + (v83 << 32);
  v91 = v19;
  v19 = __CFADD__(v19, v86);
  v90 = v91 + v86;
  v19 |= __CFADD__(HIDWORD(v83), v90);
  v90 += HIDWORD(v83);
  v93 = v19;
  v19 = __CFADD__(v19, v76);
  v92 = v93 + v76;
  v19 |= __CFADD__(0xFFFFFFFF00000001 * v83, v92);
  v92 += 0xFFFFFFFF00000001 * v83;
  v94 = v19 + ((v83 * (unsigned __int128)0xFFFFFFFF00000001) >> 64);
  v19 = __CFADD__(v90, v89 << 32);
  v95 = v90 + (v89 << 32);
  v97 = v19;
  v19 = __CFADD__(v19, v92);
  v96 = v97 + v92;
  v19 |= __CFADD__(HIDWORD(v89), v96);
  v96 += HIDWORD(v89);
  v99 = v19;
  v19 = __CFADD__(v19, v78);
  v98 = v99 + v78;
  v19 |= __CFADD__(0xFFFFFFFF00000001 * v89, v98);
  v98 += 0xFFFFFFFF00000001 * v89;
  v100 = v19 + ((v89 * (unsigned __int128)0xFFFFFFFF00000001) >> 64);
  v19 = __CFADD__(v96, v95 << 32);
  v101 = v96 + (v95 << 32);
  v103 = v19;
  v19 = __CFADD__(v19, v98);
  v102 = v103 + v98;
  v19 |= __CFADD__(HIDWORD(v95), v102);
  v102 += HIDWORD(v95);
  v105 = v19;
  v19 = __CFADD__(v19, v80);
  v104 = v105 + v80;
  v19 |= __CFADD__(0xFFFFFFFF00000001 * v95, v104);
  v104 += 0xFFFFFFFF00000001 * v95;
  v106 = v19 + ((v95 * (unsigned __int128)0xFFFFFFFF00000001) >> 64);
  v19 = __CFADD__(v88, v101);
  v107 = v88 + v101;
  v109 = v19;
  v19 = __CFADD__(v19, v94);
  v108 = v109 + v94;
  v19 |= __CFADD__(v102, v108);
  v108 += v102;
  v111 = v19;
  v19 = __CFADD__(v19, v100);
  v110 = v111 + v100;
  v19 |= __CFADD__(v104, v110);
  v110 += v104;
  v113 = v19;
  v19 = __CFADD__(v19, v106);
  v112 = v113 + v106;
  v19 |= __CFADD__(v82, v112);
  v112 += v82;
  v114 = v19;
  v19 = __CFADD__(v107++, 1);
  LOBYTE(v113) = v19;
  v19 = __CFSUB__(v108, 0xFFFFFFFFLL, v19);
  v115 = v108 - (!v113 + 0xFFFFFFFFLL);
  LOBYTE(v113) = v19;
  v19 = v110 >= !v19;
  v116 = v110 - !v113;
  LOBYTE(v113) = v19;
  v19 = __CFSUB__(v112, 0xFFFFFFFF00000001, v19);
  v117 = v114 - !v19;
  v118 = v114 - !v19;
  v19 = __CFADD__(__CFADD__(v107, v117), v115);
  v119 = __CFADD__(v107, v117) + v115;
  *a1 = v107 + v117;
  a1[1] = v118 + v119;
  result = a1 + 2;
  *result = __PAIR128__(v117 & 0xFFFFFFFF00000001, v19 | __CFADD__(v118, v119))
          + __PAIR128__(v112 - ((unint64_t)!v113 - 0xFFFFFFFF), v116);
  return result;
}

uint64_t cczp_add_ws(uint64_t a1, uint64_t a2)
{
  return (**(uint64_t (***)(void))(a2 + 16))();
}

uint64_t cczp_sub_ws(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 16) + 8))();
}

uint64_t cczp_sub_default_ws(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t *v13;
  uint64_t result;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = cczp_n(a2);
  v12 = ccn_sub_ws(a1, v11, a3, a4, a5);
  v13 = (uint64_t *)cczp_prime(a2);
  result = ccn_cond_add(v11, v12, a3, a3, v13);
  *(_QWORD *)(a1 + 16) = v10;
  return result;
}

uint64_t ccn_cond_add(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t mask;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  mask = ccn_mux_next_mask();
  v11 = __ROR8__(0x5555555555555555, a2 | (2 * mask));
  v12 = 0;
  if (a1)
  {
    v13 = 0;
    do
    {
      v15 = *a4++;
      v14 = v15;
      v17 = *a5++;
      v16 = v17;
      v18 = __CFADD__(v12, v14);
      v19 = v12 + v14;
      if (v18)
        v13 = 1;
      v18 = __CFADD__(v19, v16);
      v20 = v19 + v16;
      if (v18)
        v12 = v13 + 1;
      else
        v12 = v13;
      v21 = v14 ^ v20;
      v22 = v14 ^ mask;
      *a3 = v22;
      *a3++ = v21 & v11 ^ v21 & 0x5555555555555555 ^ v22 ^ mask;
      v13 = 0;
      --a1;
    }
    while (a1);
  }
  return v12 & a2;
}

uint64_t ccn_mux_next_mask()
{
  unint64_t v0;
  uint64_t result;

  v0 = state ^ (state << 13) ^ ((state ^ (unint64_t)(state << 13)) >> 7);
  result = v0 ^ (v0 << 17);
  state = result;
  return result;
}

uint64_t cczp_add_default_ws(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t *v13;
  BOOL v14;
  uint64_t result;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = cczp_n(a2);
  v12 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v11);
  LOBYTE(a5) = ccn_add_ws(a1, v11, a3, a4, a5);
  v13 = (unint64_t *)cczp_prime(a2);
  v14 = ccn_sub_ws(a1, v11, v12, a3, v13);
  result = ccn_mux(v11, !v14 | a5, a3, v12, a3);
  *(_QWORD *)(a1 + 16) = v10;
  return result;
}

uint64_t cczp_prime(uint64_t a1)
{
  return a1 + 24;
}

uint64_t cczp_n(uint64_t a1)
{
  return *(_QWORD *)a1;
}

BOOL ccn_sub_asm(_BOOL8 result, _QWORD *a2, uint64_t *a3, unint64_t *a4)
{
  _BOOL1 v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL1 v13;
  _BOOL1 v14;
  _BOOL4 v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL1 v30;
  uint64_t v31;
  _BOOL1 v32;
  uint64_t *v33;
  uint64_t v34;
  _BOOL1 v35;
  _QWORD *v36;
  _BOOL1 v37;
  uint64_t *v38;
  uint64_t v39;
  _BOOL1 v40;
  uint64_t v41;
  _BOOL1 v42;
  uint64_t v43;
  _BOOL1 v44;
  _BOOL1 v45;
  _QWORD *v46;

  v4 = 1;
  if (result)
  {
    if (result)
    {
      v6 = *a3++;
      v5 = v6;
      v7 = *a4++;
      v4 = v5 >= v7;
      *a2++ = v5 - v7;
    }
    if (result & 2)
    {
      v8 = *a3;
      v9 = a3[1];
      a3 += 2;
      v10 = *a4;
      v11 = a4[1];
      a4 += 2;
      v13 = v4;
      v4 = __CFSUB__(v8, v10, v4);
      v12 = v8 - (v10 + !v13);
      v14 = v4;
      v4 = __CFSUB__(v9, v11, v4);
      *a2 = v12;
      a2[1] = v9 - (v11 + !v14);
      a2 += 2;
    }
    v15 = result & 0xFFFFFFFC;
    if (v15)
    {
      v16 = v15 - 4;
      v18 = *a3;
      v19 = a3[1];
      v17 = a3 + 2;
      v21 = *a4;
      v22 = a4[1];
      v20 = (uint64_t *)(a4 + 2);
      v24 = *v17;
      v25 = v17[1];
      v23 = v17 + 2;
      v27 = *v20;
      v28 = v20[1];
      for (i = v20 + 2; v16; i = v38 + 2)
      {
        v30 = v4;
        v4 = __CFSUB__(v18, v21, v4);
        v29 = v18 - (v21 + !v30);
        v32 = v4;
        v4 = __CFSUB__(v19, v22, v4);
        v31 = v19 - (v22 + !v32);
        v18 = *v23;
        v19 = v23[1];
        v33 = v23 + 2;
        v35 = v4;
        v4 = __CFSUB__(v24, v27, v4);
        v34 = v24 - (v27 + !v35);
        *a2 = v29;
        a2[1] = v31;
        v36 = a2 + 2;
        v37 = v4;
        v4 = __CFSUB__(v25, v28, v4);
        v21 = *i;
        v22 = i[1];
        v38 = i + 2;
        *v36 = v34;
        v36[1] = v25 - (v28 + !v37);
        a2 = v36 + 2;
        v16 -= 4;
        v24 = *v33;
        v25 = v33[1];
        v23 = v33 + 2;
        v27 = *v38;
        v28 = v38[1];
      }
      v40 = v4;
      v4 = __CFSUB__(v18, v21, v4);
      v39 = v18 - (v21 + !v40);
      v42 = v4;
      v4 = __CFSUB__(v19, v22, v4);
      v41 = v19 - (v22 + !v42);
      v44 = v4;
      v4 = __CFSUB__(v24, v27, v4);
      v43 = v24 - (v27 + !v44);
      v45 = v4;
      v4 = __CFSUB__(v25, v28, v4);
      *a2 = v39;
      a2[1] = v41;
      v46 = a2 + 2;
      *v46 = v43;
      v46[1] = v25 - (v28 + !v45);
    }
    return !v4;
  }
  return result;
}

BOOL ccn_sub_ws(uint64_t a1, _BOOL8 a2, _QWORD *a3, uint64_t *a4, unint64_t *a5)
{
  return ccn_sub_asm(a2, a3, a4, a5);
}

uint64_t cc_ws_alloc(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = a1[1];
  v2 = a1[2];
  v4 = *a1 + 8 * v2;
  v5 = v2 + a2;
  a1[2] = v5;
  cc_try_abort_if (v5 > v3);
  return v4;
}

uint64_t cc_try_abort_if (uint64_t result)
{
  if ((_DWORD)result)
    cc_abort();
  return result;
}

uint64_t ccn_mux(uint64_t result, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = state ^ (state << 13) ^ ((state ^ (unint64_t)(state << 13)) >> 7);
  v6 = v5 ^ (v5 << 17);
  state = v6;
  for (i = __ROR8__(0x5555555555555555, a2 | (2 * v6)); result; --result)
  {
    v9 = *a4++;
    v8 = v9;
    v10 = *a5++;
    *a3 = v10 ^ v6;
    *a3++ = (v10 ^ v8) & 0x5555555555555555 ^ v10 ^ v6 ^ (v10 ^ v8) & i ^ v6;
  }
  return result;
}

BOOL ccn_add_asm(_BOOL8 result, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;

  v4 = 0;
  if (result)
  {
    if (result)
    {
      v6 = *a3++;
      v5 = v6;
      v7 = *a4++;
      v4 = __CFADD__(v5, v7);
      *a2++ = v5 + v7;
    }
    if (result & 2)
    {
      v8 = *a3;
      v9 = a3[1];
      a3 += 2;
      v10 = *a4;
      v11 = a4[1];
      a4 += 2;
      v13 = v4 + v8;
      v4 = __CFADD__(v4, v8) | __CFADD__(v10, v13);
      v12 = v10 + v13;
      v14 = v4 + v9;
      v4 = __CFADD__(v4, v9) | __CFADD__(v11, v14);
      *a2 = v12;
      a2[1] = v11 + v14;
      a2 += 2;
    }
    v15 = result & 0xFFFFFFFC;
    if (v15)
    {
      v16 = v15 - 4;
      v18 = *a3;
      v19 = a3[1];
      v17 = a3 + 2;
      v21 = *a4;
      v22 = a4[1];
      v20 = a4 + 2;
      v24 = *v17;
      v25 = v17[1];
      v23 = v17 + 2;
      v27 = *v20;
      v28 = v20[1];
      for (i = v20 + 2; v16; i = v38 + 2)
      {
        v30 = v4 + v18;
        v4 = __CFADD__(v4, v18) | __CFADD__(v21, v30);
        v29 = v21 + v30;
        v32 = v4 + v19;
        v4 = __CFADD__(v4, v19) | __CFADD__(v22, v32);
        v31 = v22 + v32;
        v18 = *v23;
        v19 = v23[1];
        v33 = v23 + 2;
        v35 = v4 + v24;
        v4 = __CFADD__(v4, v24) | __CFADD__(v27, v35);
        v34 = v27 + v35;
        *a2 = v29;
        a2[1] = v31;
        v36 = a2 + 2;
        v37 = v4 + v25;
        v4 = __CFADD__(v4, v25) | __CFADD__(v28, v37);
        v21 = *i;
        v22 = i[1];
        v38 = i + 2;
        *v36 = v34;
        v36[1] = v28 + v37;
        a2 = v36 + 2;
        v16 -= 4;
        v24 = *v33;
        v25 = v33[1];
        v23 = v33 + 2;
        v27 = *v38;
        v28 = v38[1];
      }
      v40 = v4 + v18;
      v4 = __CFADD__(v4, v18) | __CFADD__(v21, v40);
      v39 = v21 + v40;
      v42 = v4 + v19;
      v4 = __CFADD__(v4, v19) | __CFADD__(v22, v42);
      v41 = v22 + v42;
      v44 = v4 + v24;
      v4 = __CFADD__(v4, v24) | __CFADD__(v27, v44);
      v43 = v27 + v44;
      v45 = v4 + v25;
      v4 = __CFADD__(v4, v25) | __CFADD__(v28, v45);
      *a2 = v39;
      a2[1] = v41;
      v46 = a2 + 2;
      *v46 = v43;
      v46[1] = v28 + v45;
    }
    return v4;
  }
  return result;
}

BOOL ccn_add_ws(uint64_t a1, _BOOL8 a2, _QWORD *a3, uint64_t *a4, uint64_t *a5)
{
  return ccn_add_asm(a2, a3, a4, a5);
}

uint64_t cczp_mul_ws(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 16) + 16))();
}

uint64_t cczp_sqr_ws(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 16) + 24))();
}

_OWORD *ccn_p256_sqr_asm_ws(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4)
{
  return ccn_mulmod_p256(a3, a4, a4);
}

uint64_t ccn_sqr_ws(uint64_t a1, unint64_t a2, _QWORD *a3, unint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * a2);
  result = ccn_mul1(a2 - 1, v9 + 8, a4 + 1, *a4);
  *(_QWORD *)(v9 + 8 * a2) = result;
  v11 = *a4;
  *a3 = *a4 * *a4;
  v12 = *(_QWORD *)(v9 + 8);
  if (__CFADD__((unsigned __int128)(v11 * v11) >> 64, 2 * v12))
    v13 = (v12 >> 63) + 1;
  else
    v13 = v12 >> 63;
  a3[1] = (__PAIR128__(2, v11) * v11) >> 64;
  v14 = a2 - 2;
  if (a2 >= 2)
  {
    v15 = 0;
    v16 = v9 + 8 * a2 + 8;
    v17 = (unint64_t *)(v9 + 24);
    v18 = a3 + 3;
    do
    {
      result = ccn_addmul1(v14, v17, &a4[v15 + 2], a4[v15 + 1]);
      *(_QWORD *)(v16 + v15 * 8) = result;
      v19 = a4[v15 + 1];
      v20 = (v19 * (unsigned __int128)v19) >> 64;
      v21 = v19 * v19;
      v22 = __CFADD__(v21, v13);
      v23 = v21 + v13;
      if (v22)
        ++v20;
      v24 = *(v17 - 1);
      *(v18 - 1) = v23 + 2 * v24;
      v25 = *v17;
      v17 += 2;
      v26 = v25 >> 63;
      v22 = __CFADD__(v20, 2 * v25);
      v27 = v20 + 2 * v25;
      if (v22)
        v28 = v26 + 1;
      else
        v28 = v26;
      v22 = __CFADD__(__CFADD__(v23, 2 * v24), v27) | __CFADD__(v24 >> 63, __CFADD__(v23, 2 * v24) + v27);
      v29 = (v24 >> 63) + __CFADD__(v23, 2 * v24) + v27;
      if (v22)
        v13 = v28 + 1;
      else
        v13 = v28;
      *v18 = v29;
      v18 += 2;
      ++v15;
      --v14;
    }
    while (v14 != -1);
  }
  *(_QWORD *)(a1 + 16) = v8;
  return result;
}

unint64_t ccn_addmul1_asm(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int128 v8;
  unsigned __int128 v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int128 v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  unsigned __int128 v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = 0;
  if ((a1 & 1) != 0)
  {
    v5 = *a3++;
    v4 = (v5 * (unsigned __int128)a4 + *a2) >> 64;
    *a2++ += v5 * a4;
    --a1;
  }
  if ((a1 & 2) != 0)
  {
    v6 = *a3;
    v7 = a3[1];
    a3 += 2;
    v8 = *(_OWORD *)a2 + __PAIR128__(v7 * a4, v4);
    v9 = v8 + v6 * (unsigned __int128)a4;
    v4 = (__CFADD__(__CFADD__((_QWORD)v8, v6 * a4), *((_QWORD *)&v8 + 1)) | __CFADD__((v6* (unsigned __int128)a4) >> 64, *((_QWORD *)&v9 + 1)))+ (__CFADD__(__CFADD__(*a2, v4), a2[1]) | __CFADD__(v7 * a4, *((_QWORD *)&v8 + 1)))+ ((v7 * (unsigned __int128)a4) >> 64);
    *(_OWORD *)a2 = v9;
    a2 += 2;
    a1 -= 2;
  }
  while (1)
  {
    v10 = a1 < 4;
    a1 -= 4;
    if (v10)
      break;
    v11 = a2[2];
    v12 = a2[3];
    v14 = *a3;
    v15 = a3[1];
    v13 = a3 + 2;
    v16 = *v13;
    v17 = v13[1];
    a3 = v13 + 2;
    v18 = (v15 * (unsigned __int128)a4) >> 64;
    v19 = *(_OWORD *)a2 + __PAIR128__(v15 * a4, v4);
    v20 = __CFADD__(__CFADD__(__CFADD__(*a2, v4), a2[1]) | __CFADD__(v15 * a4, *((_QWORD *)&v19 + 1)), v11);
    v21 = (__CFADD__(__CFADD__(*a2, v4), a2[1]) | __CFADD__(v15 * a4, *((_QWORD *)&v19 + 1))) + v11;
    v20 |= __CFADD__(v18, v21);
    v21 += v18;
    v23 = v20;
    v20 = __CFADD__(v20, v12);
    v22 = v23 + v12;
    v20 |= __CFADD__(v17 * a4, v22);
    v22 += v17 * a4;
    v24 = v20 + ((v17 * (unsigned __int128)a4) >> 64);
    v25 = v19 + v14 * (unsigned __int128)a4;
    *(_OWORD *)a2 = v25;
    v26 = a2 + 2;
    v27 = (v16 * (unsigned __int128)a4) >> 64;
    v29 = __CFADD__(__CFADD__((_QWORD)v19, v14 * a4), *((_QWORD *)&v19 + 1)) | __CFADD__((v14* (unsigned __int128)a4) >> 64, *((_QWORD *)&v25 + 1));
    v20 = __CFADD__(v29, v21);
    v28 = v29 + v21;
    v31 = v20 | __CFADD__(v16 * a4, v28);
    v20 = __CFADD__(v31, v22);
    v30 = v31 + v22;
    v4 = (v20 | __CFADD__(v27, v30)) + v24;
    *v26 = v16 * a4 + v28;
    v26[1] = v27 + v30;
    a2 = v26 + 2;
  }
  return v4;
}

unint64_t ccn_mul1_asm(uint64_t a1, _QWORD *a2, unint64_t *a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int128 v8;
  BOOL v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = 0;
  if ((a1 & 1) != 0)
  {
    v5 = *a3++;
    v4 = (v5 * (unsigned __int128)a4) >> 64;
    *a2++ = v5 * a4;
    --a1;
  }
  if ((a1 & 2) != 0)
  {
    v6 = *a3;
    v7 = a3[1];
    a3 += 2;
    v8 = v6 * (unsigned __int128)a4 + __PAIR128__(v7 * a4, v4);
    v4 = (__CFADD__(__CFADD__(v6 * a4, v4), (v6 * (unsigned __int128)a4) >> 64) | __CFADD__(v7 * a4, *((_QWORD *)&v8 + 1)))+ ((v7 * (unsigned __int128)a4) >> 64);
    *(_OWORD *)a2 = v8;
    a2 += 2;
    a1 -= 2;
  }
  while (1)
  {
    v9 = a1 < 4;
    a1 -= 4;
    if (v9)
      break;
    v11 = *a3;
    v12 = a3[1];
    v10 = a3 + 2;
    v14 = *v10;
    v15 = v10[1];
    a3 = v10 + 2;
    v16 = (v12 * (unsigned __int128)a4) >> 64;
    v17 = __CFADD__(__CFADD__(v11 * a4, v4), (v11 * (unsigned __int128)a4) >> 64);
    v13 = v11 * (unsigned __int128)a4 + __PAIR128__(v12 * a4, v4);
    *(_OWORD *)a2 = v13;
    v18 = a2 + 2;
    v19 = (v14 * (unsigned __int128)a4) >> 64;
    v20 = v16 + (v17 | __CFADD__(v12 * a4, *((_QWORD *)&v13 + 1))) + v14 * a4;
    v22 = __CFADD__(v17 | __CFADD__(v12 * a4, *((_QWORD *)&v13 + 1)), v14 * a4) | __CFADD__(v16, (v17 | __CFADD__(v12 * a4, *((_QWORD *)&v13 + 1))) + v14 * a4);
    v17 = __CFADD__(v22, v19);
    v21 = v22 + v19;
    v4 = (v17 | __CFADD__(v15 * a4, v21)) + ((v15 * (unsigned __int128)a4) >> 64);
    *v18 = v20;
    v18[1] = v15 * a4 + v21;
    a2 = v18 + 2;
  }
  return v4;
}

_QWORD *ccn_mulmod_p384(_QWORD *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int128 v17;
  unsigned __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL1 v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  _BOOL8 v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  _BOOL8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  _BOOL8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL8 v48;
  _BOOL8 v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  _BOOL8 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL8 v58;
  _BOOL8 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL8 v63;
  _BOOL8 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BOOL8 v68;
  _BOOL8 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BOOL8 v73;
  _BOOL8 v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _BOOL8 v78;
  _BOOL8 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BOOL8 v83;
  _BOOL8 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BOOL8 v88;
  _BOOL8 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BOOL8 v93;
  _BOOL8 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BOOL8 v98;
  _BOOL8 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BOOL8 v103;
  _BOOL8 v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  _BOOL8 v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unsigned __int128 v112;
  _BOOL8 v113;
  unsigned __int128 v114;
  unint64_t v115;
  _BOOL8 v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unsigned __int128 v120;
  _BOOL8 v121;
  uint64_t v122;
  uint64_t v123;
  unsigned __int128 v124;
  unint64_t v125;
  _BOOL1 v126;
  unint64_t v127;
  BOOL v128;
  unsigned __int128 v129;
  unsigned __int128 v130;
  unsigned __int128 v131;
  unsigned __int128 v132;
  unsigned __int128 v133;
  unsigned __int128 v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  _BOOL8 v139;
  unsigned __int128 v140;
  unint64_t v141;
  _BOOL8 v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned __int128 v150;
  unint64_t v151;
  _BOOL1 v152;
  unint64_t v153;
  BOOL v154;
  unsigned __int128 v155;
  unsigned __int128 v156;
  unsigned __int128 v157;
  unsigned __int128 v158;
  unsigned __int128 v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  _BOOL8 v164;
  unsigned __int128 v165;
  unint64_t v166;
  _BOOL8 v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned __int128 v175;
  unint64_t v176;
  _BOOL1 v177;
  unint64_t v178;
  BOOL v179;
  unsigned __int128 v180;
  unsigned __int128 v181;
  unsigned __int128 v182;
  unsigned __int128 v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  _BOOL8 v188;
  unsigned __int128 v189;
  unint64_t v190;
  _BOOL8 v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned __int128 v199;
  unint64_t v200;
  _BOOL1 v201;
  unint64_t v202;
  BOOL v203;
  unsigned __int128 v204;
  unsigned __int128 v205;
  unsigned __int128 v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  _BOOL8 v211;
  unsigned __int128 v212;
  unint64_t v213;
  _BOOL8 v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unsigned __int128 v222;
  unint64_t v223;
  _BOOL1 v224;
  unint64_t v225;
  BOOL v226;
  unsigned __int128 v227;
  unsigned __int128 v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  _BOOL8 v233;
  unsigned __int128 v234;
  unint64_t v235;
  _BOOL8 v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unsigned __int128 v244;
  uint64_t v245;
  _BOOL1 v246;
  unint64_t v247;
  BOOL v248;
  unsigned __int128 v249;
  unint64_t v250;
  uint64_t v251;
  _BOOL1 v252;
  uint64_t v253;
  _BOOL1 v254;
  uint64_t v255;
  _BOOL1 v256;
  unint64_t v257;
  _BOOL1 v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  _QWORD *result;

  v4 = *a2;
  v5 = a2[1];
  v3 = a2 + 2;
  v6 = *v3;
  v7 = v3[1];
  v3 += 2;
  v8 = *v3;
  v9 = v3[1];
  v11 = *a3;
  v12 = a3[1];
  v10 = a3 + 2;
  v13 = *v10;
  v14 = v10[1];
  v10 += 2;
  v15 = *v10;
  v16 = v10[1];
  v17 = v5 * (unsigned __int128)v11 + ((v4 * (unsigned __int128)v11) >> 64);
  v18 = v17 + v4 * (unsigned __int128)v12;
  v19 = __CFADD__(__CFADD__((_QWORD)v17, v4 * v12), *((_QWORD *)&v17 + 1)) | __CFADD__((v4* (unsigned __int128)v12) >> 64, *((_QWORD *)&v18 + 1));
  v20 = (v6 * (unsigned __int128)v11) >> 64;
  v21 = *((_QWORD *)&v18 + 1) + v6 * v11;
  v22 = __CFADD__(__CFADD__(*((_QWORD *)&v18 + 1), v6 * v11), v19);
  v23 = __CFADD__(*((_QWORD *)&v18 + 1), v6 * v11) + v19;
  v22 |= __CFADD__(v20, v23);
  v23 += v20;
  v24 = v22;
  v25 = (v5 * (unsigned __int128)v12) >> 64;
  v22 = __CFADD__(v21, v5 * v12);
  v26 = v21 + v5 * v12;
  v28 = v22;
  v22 = __CFADD__(v22, v23);
  v27 = v28 + v23;
  v22 |= __CFADD__(v25, v27);
  v27 += v25;
  v29 = v22 + v24;
  v30 = (v4 * (unsigned __int128)v13) >> 64;
  v22 = __CFADD__(v26, v4 * v13);
  v31 = v26 + v4 * v13;
  v33 = v22;
  v22 = __CFADD__(v22, v27);
  v32 = v33 + v27;
  v22 |= __CFADD__(v30, v32);
  v32 += v30;
  v34 = v22 + v29;
  v35 = (v7 * (unsigned __int128)v11) >> 64;
  v22 = __CFADD__(v32, v7 * v11);
  v36 = v32 + v7 * v11;
  v38 = v22;
  v22 = __CFADD__(v22, v34);
  v37 = v38 + v34;
  v22 |= __CFADD__(v35, v37);
  v37 += v35;
  v39 = v22;
  v40 = (v6 * (unsigned __int128)v12) >> 64;
  v22 = __CFADD__(v36, v6 * v12);
  v41 = v36 + v6 * v12;
  v43 = v22;
  v22 = __CFADD__(v22, v37);
  v42 = v43 + v37;
  v22 |= __CFADD__(v40, v42);
  v42 += v40;
  v44 = v22 + v39;
  v45 = (v5 * (unsigned __int128)v13) >> 64;
  v22 = __CFADD__(v41, v5 * v13);
  v46 = v41 + v5 * v13;
  v48 = v22;
  v22 = __CFADD__(v22, v42);
  v47 = v48 + v42;
  v22 |= __CFADD__(v45, v47);
  v47 += v45;
  v49 = v22 + v44;
  v50 = (v4 * (unsigned __int128)v14) >> 64;
  v22 = __CFADD__(v46, v4 * v14);
  v51 = v46 + v4 * v14;
  v53 = v22;
  v22 = __CFADD__(v22, v47);
  v52 = v53 + v47;
  v22 |= __CFADD__(v50, v52);
  v52 += v50;
  v54 = v22 + v49;
  v55 = (*v3 * (unsigned __int128)v11) >> 64;
  v22 = __CFADD__(v52, *v3 * v11);
  v56 = v52 + *v3 * v11;
  v58 = v22;
  v22 = __CFADD__(v22, v54);
  v57 = v58 + v54;
  v22 |= __CFADD__(v55, v57);
  v57 += v55;
  v59 = v22;
  v60 = (v7 * (unsigned __int128)v12) >> 64;
  v22 = __CFADD__(v56, v7 * v12);
  v61 = v56 + v7 * v12;
  v63 = v22;
  v22 = __CFADD__(v22, v57);
  v62 = v63 + v57;
  v22 |= __CFADD__(v60, v62);
  v62 += v60;
  v64 = v22 + v59;
  v65 = (v6 * (unsigned __int128)v13) >> 64;
  v22 = __CFADD__(v61, v6 * v13);
  v66 = v61 + v6 * v13;
  v68 = v22;
  v22 = __CFADD__(v22, v62);
  v67 = v68 + v62;
  v22 |= __CFADD__(v65, v67);
  v67 += v65;
  v69 = v22 + v64;
  v70 = (v5 * (unsigned __int128)v14) >> 64;
  v22 = __CFADD__(v66, v5 * v14);
  v71 = v66 + v5 * v14;
  v73 = v22;
  v22 = __CFADD__(v22, v67);
  v72 = v73 + v67;
  v22 |= __CFADD__(v70, v72);
  v72 += v70;
  v74 = v22 + v69;
  v75 = (v4 * (unsigned __int128)v15) >> 64;
  v22 = __CFADD__(v71, v4 * v15);
  v76 = v71 + v4 * v15;
  v78 = v22;
  v22 = __CFADD__(v22, v72);
  v77 = v78 + v72;
  v22 |= __CFADD__(v75, v77);
  v77 += v75;
  v79 = v22 + v74;
  v80 = (v9 * (unsigned __int128)v11) >> 64;
  v22 = __CFADD__(v77, v9 * v11);
  v81 = v77 + v9 * v11;
  v83 = v22;
  v22 = __CFADD__(v22, v79);
  v82 = v83 + v79;
  v22 |= __CFADD__(v80, v82);
  v82 += v80;
  v84 = v22;
  v85 = (*v3 * (unsigned __int128)v12) >> 64;
  v22 = __CFADD__(v81, *v3 * v12);
  v86 = v81 + *v3 * v12;
  v88 = v22;
  v22 = __CFADD__(v22, v82);
  v87 = v88 + v82;
  v22 |= __CFADD__(v85, v87);
  v87 += v85;
  v89 = v22 + v84;
  v90 = (v7 * (unsigned __int128)v13) >> 64;
  v22 = __CFADD__(v86, v7 * v13);
  v91 = v86 + v7 * v13;
  v93 = v22;
  v22 = __CFADD__(v22, v87);
  v92 = v93 + v87;
  v22 |= __CFADD__(v90, v92);
  v92 += v90;
  v94 = v22 + v89;
  v95 = (v6 * (unsigned __int128)v14) >> 64;
  v22 = __CFADD__(v91, v6 * v14);
  v96 = v91 + v6 * v14;
  v98 = v22;
  v22 = __CFADD__(v22, v92);
  v97 = v98 + v92;
  v22 |= __CFADD__(v95, v97);
  v97 += v95;
  v99 = v22 + v94;
  v100 = (v5 * (unsigned __int128)v15) >> 64;
  v22 = __CFADD__(v96, v5 * v15);
  v101 = v96 + v5 * v15;
  v103 = v22;
  v22 = __CFADD__(v22, v97);
  v102 = v103 + v97;
  v22 |= __CFADD__(v100, v102);
  v102 += v100;
  v104 = v22 + v99;
  v105 = (v4 * (unsigned __int128)v16) >> 64;
  v22 = __CFADD__(v101, v4 * v16);
  v106 = v101 + v4 * v16;
  v108 = v22;
  v22 = __CFADD__(v22, v102);
  v107 = v108 + v102;
  v22 |= __CFADD__(v105, v107);
  v107 += v105;
  v109 = 0x100000001 * v4 * v11;
  v110 = HIDWORD(v109);
  v111 = HIDWORD(v109) + __CFADD__(v4 * v11, (v4 * v11) << 32) + (_QWORD)v18;
  v112 = __PAIR128__(v51, __CFADD__(__CFADD__(v4 * v11, (v4 * v11) << 32), (_QWORD)v18) | __CFADD__(HIDWORD(v109), __CFADD__(v4 * v11, (v4 * v11) << 32)+ (_QWORD)v18))+ v31;
  v113 = __CFADD__(__CFADD__(__CFADD__(__CFADD__(v4 * v11, (v4 * v11) << 32), (_QWORD)v18) | __CFADD__(HIDWORD(v109), __CFADD__(v4 * v11, (v4 * v11) << 32)+ (_QWORD)v18), v31), v51);
  v114 = __PAIR128__(v106, v113) + v76;
  v116 = __CFADD__(__CFADD__(v113, v76), v106);
  v115 = v109 + v116 + v107;
  v117 = (__CFADD__(v116, v107) | __CFADD__(v109, v116 + v107)) + v22 + v104;
  v22 = v111 >= (v4 * v11) << 32;
  v120 = __PAIR128__(v112, v111) - __PAIR128__(v109, (v4 * v11) << 32);
  v119 = v120 >> 64;
  v118 = v120;
  v121 = !__CFSUB__((_QWORD)v112, v109, v22);
  v22 = v119 >= v110;
  v124 = __PAIR128__(*((unint64_t *)&v112 + 1), v119) - __PAIR128__(v121, v110);
  v123 = v124 >> 64;
  v122 = v124;
  v126 = __CFSUB__(*((_QWORD *)&v112 + 1), v121, v22);
  v125 = v114 - !v126;
  v128 = (unint64_t)v114 >= !v126;
  v127 = *((_QWORD *)&v114 + 1) - !v128;
  v129 = __PAIR128__(v117, v115) - (*((_QWORD *)&v114 + 1) < (unint64_t)!v128);
  v130 = v129 + v9 * (unsigned __int128)v12;
  v131 = v130 + v8 * (unsigned __int128)v13;
  v132 = v131 + v7 * (unsigned __int128)v14;
  v133 = v132 + v6 * (unsigned __int128)v15;
  v134 = v133 + v5 * (unsigned __int128)v16;
  v135 = 0x100000001 * v118;
  v136 = (unint64_t)(0x100000001 * v118) >> 32;
  v22 = __CFADD__(__CFADD__(v118, v118 << 32), v122);
  v137 = __CFADD__(v118, v118 << 32) + v122;
  v22 |= __CFADD__(v136, v137);
  v137 += v136;
  v138 = v22 + v123;
  v139 = __CFADD__(v22, v123);
  v140 = __PAIR128__(v127, v139) + v125;
  v142 = __CFADD__(__CFADD__(v139, v125), v127);
  v141 = v142 + v134;
  v143 = v135 + __CFADD__(v142, (_QWORD)v134) + *((_QWORD *)&v134 + 1);
  v144 = (__CFADD__(__CFADD__(v142, (_QWORD)v134), *((_QWORD *)&v134 + 1)) | __CFADD__(v135, __CFADD__(v142, (_QWORD)v134)+ *((_QWORD *)&v134 + 1)))+ (__CFADD__(__CFADD__((_QWORD)v133, v5 * v16), *((_QWORD *)&v133 + 1)) | __CFADD__((v5 * (unsigned __int128)v16) >> 64, *((_QWORD *)&v134 + 1)))+ (__CFADD__(__CFADD__((_QWORD)v132, v6 * v15), *((_QWORD *)&v132 + 1)) | __CFADD__((v6 * (unsigned __int128)v15) >> 64, *((_QWORD *)&v133 + 1)))+ (__CFADD__(__CFADD__((_QWORD)v131, v7 * v14), *((_QWORD *)&v131 + 1)) | __CFADD__((v7 * (unsigned __int128)v14) >> 64, *((_QWORD *)&v132 + 1)))+ (__CFADD__(__CFADD__((_QWORD)v130, v8 * v13), *((_QWORD *)&v130 + 1)) | __CFADD__((v8 * (unsigned __int128)v13) >> 64, *((_QWORD *)&v131 + 1)))+ (unint64_t)(__CFADD__(__CFADD__((_QWORD)v129, v9 * v12), *((_QWORD *)&v129 + 1)) | __CFADD__((v9 * (unsigned __int128)v12) >> 64, *((_QWORD *)&v130 + 1)));
  v22 = v137 >= v135 << 32;
  v145 = v137 - (v135 << 32);
  LOBYTE(v142) = v22;
  v22 = __CFSUB__(v138, v135, v22);
  v146 = v138 - (v135 + !v142);
  v147 = !v22;
  v22 = v146 >= v136;
  v150 = __PAIR128__(v140, v146) - __PAIR128__(v147, v136);
  v149 = v150 >> 64;
  v148 = v150;
  v152 = __CFSUB__((_QWORD)v140, v147, v22);
  v151 = *((_QWORD *)&v140 + 1) - !v152;
  v154 = *((_QWORD *)&v140 + 1) >= (unint64_t)!v152;
  v22 = v141 >= !v154;
  v153 = v141 - !v154;
  v155 = __PAIR128__(v144, v143) - !v22;
  v156 = v155 + v9 * (unsigned __int128)v13;
  v157 = v156 + v8 * (unsigned __int128)v14;
  v158 = v157 + v7 * (unsigned __int128)v15;
  v159 = v158 + v6 * (unsigned __int128)v16;
  v160 = 0x100000001 * v145;
  v161 = (0x100000001 * v145) >> 32;
  v22 = __CFADD__(__CFADD__(v145, v145 << 32), v148);
  v162 = __CFADD__(v145, v145 << 32) + v148;
  v22 |= __CFADD__(v161, v162);
  v162 += v161;
  v163 = v22 + v149;
  v164 = __CFADD__(v22, v149);
  v165 = __PAIR128__(v153, v164) + v151;
  v167 = __CFADD__(__CFADD__(v164, v151), v153);
  v166 = v167 + v159;
  v168 = v160 + __CFADD__(v167, (_QWORD)v159) + *((_QWORD *)&v159 + 1);
  v169 = (__CFADD__(__CFADD__(v167, (_QWORD)v159), *((_QWORD *)&v159 + 1)) | __CFADD__(v160, __CFADD__(v167, (_QWORD)v159)+ *((_QWORD *)&v159 + 1)))+ (__CFADD__(__CFADD__((_QWORD)v158, v6 * v16), *((_QWORD *)&v158 + 1)) | __CFADD__((v6 * (unsigned __int128)v16) >> 64, *((_QWORD *)&v159 + 1)))+ (__CFADD__(__CFADD__((_QWORD)v157, v7 * v15), *((_QWORD *)&v157 + 1)) | __CFADD__((v7 * (unsigned __int128)v15) >> 64, *((_QWORD *)&v158 + 1)))+ (__CFADD__(__CFADD__((_QWORD)v156, v8 * v14), *((_QWORD *)&v156 + 1)) | __CFADD__((v8 * (unsigned __int128)v14) >> 64, *((_QWORD *)&v157 + 1)))+ (unint64_t)(__CFADD__(__CFADD__((_QWORD)v155, v9 * v13), *((_QWORD *)&v155 + 1)) | __CFADD__((v9 * (unsigned __int128)v13) >> 64, *((_QWORD *)&v156 + 1)));
  v22 = v162 >= v160 << 32;
  v170 = v162 - (v160 << 32);
  LOBYTE(v167) = v22;
  v22 = __CFSUB__(v163, v160, v22);
  v171 = v163 - (v160 + !v167);
  v172 = !v22;
  v22 = v171 >= v161;
  v175 = __PAIR128__(v165, v171) - __PAIR128__(v172, v161);
  v174 = v175 >> 64;
  v173 = v175;
  v177 = __CFSUB__((_QWORD)v165, v172, v22);
  v176 = *((_QWORD *)&v165 + 1) - !v177;
  v179 = *((_QWORD *)&v165 + 1) >= (unint64_t)!v177;
  v22 = v166 >= !v179;
  v178 = v166 - !v179;
  v180 = __PAIR128__(v169, v168) - !v22;
  v181 = v180 + v9 * (unsigned __int128)v14;
  v182 = v181 + v8 * (unsigned __int128)v15;
  v183 = v182 + v7 * (unsigned __int128)v16;
  v184 = 0x100000001 * v170;
  v185 = (0x100000001 * v170) >> 32;
  v22 = __CFADD__(__CFADD__(v170, v170 << 32), v173);
  v186 = __CFADD__(v170, v170 << 32) + v173;
  v22 |= __CFADD__(v185, v186);
  v186 += v185;
  v187 = v22 + v174;
  v188 = __CFADD__(v22, v174);
  v189 = __PAIR128__(v178, v188) + v176;
  v191 = __CFADD__(__CFADD__(v188, v176), v178);
  v190 = v191 + v183;
  v192 = v184 + __CFADD__(v191, (_QWORD)v183) + *((_QWORD *)&v183 + 1);
  v193 = (__CFADD__(__CFADD__(v191, (_QWORD)v183), *((_QWORD *)&v183 + 1)) | __CFADD__(v184, __CFADD__(v191, (_QWORD)v183)+ *((_QWORD *)&v183 + 1)))+ (__CFADD__(__CFADD__((_QWORD)v182, v7 * v16), *((_QWORD *)&v182 + 1)) | __CFADD__((v7 * (unsigned __int128)v16) >> 64, *((_QWORD *)&v183 + 1)))+ (__CFADD__(__CFADD__((_QWORD)v181, v8 * v15), *((_QWORD *)&v181 + 1)) | __CFADD__((v8 * (unsigned __int128)v15) >> 64, *((_QWORD *)&v182 + 1)))+ (unint64_t)(__CFADD__(__CFADD__((_QWORD)v180, v9 * v14), *((_QWORD *)&v180 + 1)) | __CFADD__((v9 * (unsigned __int128)v14) >> 64, *((_QWORD *)&v181 + 1)));
  v22 = v186 >= v184 << 32;
  v194 = v186 - (v184 << 32);
  LOBYTE(v191) = v22;
  v22 = __CFSUB__(v187, v184, v22);
  v195 = v187 - (v184 + !v191);
  v196 = !v22;
  v22 = v195 >= v185;
  v199 = __PAIR128__(v189, v195) - __PAIR128__(v196, v185);
  v198 = v199 >> 64;
  v197 = v199;
  v201 = __CFSUB__((_QWORD)v189, v196, v22);
  v200 = *((_QWORD *)&v189 + 1) - !v201;
  v203 = *((_QWORD *)&v189 + 1) >= (unint64_t)!v201;
  v22 = v190 >= !v203;
  v202 = v190 - !v203;
  v204 = __PAIR128__(v193, v192) - !v22;
  v205 = v204 + v9 * (unsigned __int128)v15;
  v206 = v205 + v8 * (unsigned __int128)v16;
  v207 = 0x100000001 * v194;
  v208 = (0x100000001 * v194) >> 32;
  v22 = __CFADD__(__CFADD__(v194, v194 << 32), v197);
  v209 = __CFADD__(v194, v194 << 32) + v197;
  v22 |= __CFADD__(v208, v209);
  v209 += v208;
  v210 = v22 + v198;
  v211 = __CFADD__(v22, v198);
  v212 = __PAIR128__(v202, v211) + v200;
  v214 = __CFADD__(__CFADD__(v211, v200), v202);
  v213 = v214 + v206;
  v215 = v207 + __CFADD__(v214, (_QWORD)v206) + *((_QWORD *)&v206 + 1);
  v216 = (__CFADD__(__CFADD__(v214, (_QWORD)v206), *((_QWORD *)&v206 + 1)) | __CFADD__(v207, __CFADD__(v214, (_QWORD)v206)+ *((_QWORD *)&v206 + 1)))+ (__CFADD__(__CFADD__((_QWORD)v205, v8 * v16), *((_QWORD *)&v205 + 1)) | __CFADD__((v8 * (unsigned __int128)v16) >> 64, *((_QWORD *)&v206 + 1)))+ (unint64_t)(__CFADD__(__CFADD__((_QWORD)v204, v9 * v15), *((_QWORD *)&v204 + 1)) | __CFADD__((v9 * (unsigned __int128)v15) >> 64, *((_QWORD *)&v205 + 1)));
  v22 = v209 >= v207 << 32;
  v217 = v209 - (v207 << 32);
  LOBYTE(v214) = v22;
  v22 = __CFSUB__(v210, v207, v22);
  v218 = v210 - (v207 + !v214);
  v219 = !v22;
  v22 = v218 >= v208;
  v222 = __PAIR128__(v212, v218) - __PAIR128__(v219, v208);
  v221 = v222 >> 64;
  v220 = v222;
  v224 = __CFSUB__((_QWORD)v212, v219, v22);
  v223 = *((_QWORD *)&v212 + 1) - !v224;
  v226 = *((_QWORD *)&v212 + 1) >= (unint64_t)!v224;
  v22 = v213 >= !v226;
  v225 = v213 - !v226;
  v227 = __PAIR128__(v216, v215) - !v22;
  v228 = v227 + v9 * (unsigned __int128)v16;
  v229 = 0x100000001 * v217;
  v230 = (0x100000001 * v217) >> 32;
  v22 = __CFADD__(__CFADD__(v217, v217 << 32), v220);
  v231 = __CFADD__(v217, v217 << 32) + v220;
  v22 |= __CFADD__(v230, v231);
  v231 += v230;
  v232 = v22 + v221;
  v233 = __CFADD__(v22, v221);
  v234 = __PAIR128__(v225, v233) + v223;
  v236 = __CFADD__(__CFADD__(v233, v223), v225);
  v235 = v236 + v228;
  v237 = v229 + __CFADD__(v236, (_QWORD)v228) + *((_QWORD *)&v228 + 1);
  v238 = (__CFADD__(__CFADD__(v236, (_QWORD)v228), *((_QWORD *)&v228 + 1)) | __CFADD__(v229, __CFADD__(v236, (_QWORD)v228)+ *((_QWORD *)&v228 + 1)))+ (unint64_t)(__CFADD__(__CFADD__((_QWORD)v227, v9 * v16), *((_QWORD *)&v227 + 1)) | __CFADD__((v9 * (unsigned __int128)v16) >> 64, *((_QWORD *)&v228 + 1)));
  v22 = v231 >= v229 << 32;
  v239 = v231 - (v229 << 32);
  LOBYTE(v236) = v22;
  v22 = __CFSUB__(v232, v229, v22);
  v240 = v232 - (v229 + !v236);
  v241 = !v22;
  v22 = v240 >= v230;
  v244 = __PAIR128__(v234, v240) - __PAIR128__(v241, v230);
  v243 = v244 >> 64;
  v242 = v244;
  v246 = __CFSUB__((_QWORD)v234, v241, v22);
  v245 = *((_QWORD *)&v234 + 1) - !v246;
  v248 = *((_QWORD *)&v234 + 1) >= (unint64_t)!v246;
  v22 = v235 >= !v248;
  v247 = v235 - !v248;
  v249 = __PAIR128__(v238, v237) - !v22;
  v22 = v239 >= 0xFFFFFFFF;
  v250 = v239 - 0xFFFFFFFF;
  v252 = v22;
  v22 = __CFSUB__(v242, 0xFFFFFFFF00000000, v22);
  v251 = v242 - (!v252 - 0x100000000);
  v254 = v22;
  v22 = __CFSUB__(v243, -2, v22);
  v253 = v243 - (!v254 - 2);
  v256 = v22;
  v22 = __CFSUB__(v245, -1, v22);
  v255 = v245 - (!v256 - 1);
  v258 = v22;
  v22 = __CFSUB__(v247, -1, v22);
  v257 = v247 - (!v258 - 1);
  v259 = v249 - (!v22 - 1);
  v260 = *((_QWORD *)&v249 + 1) - !__CFSUB__((_QWORD)v249, -1, v22);
  v22 = __CFADD__(__CFADD__(v250, (v260 & 0xFFFFFFFF00000000) >> 32), v251);
  v261 = __CFADD__(v250, (v260 & 0xFFFFFFFF00000000) >> 32) + v251;
  v263 = v22 | __CFADD__(v260 & 0xFFFFFFFF00000000, v261);
  v22 = __CFADD__(v263, v253);
  v262 = v263 + v253;
  v265 = v22 | __CFADD__(v260 & 0xFFFFFFFFFFFFFFFELL, v262);
  v22 = __CFADD__(v265, v255);
  v264 = v265 + v255;
  v267 = v22 | __CFADD__(v260, v264);
  v22 = __CFADD__(v267, v257);
  v266 = v267 + v257;
  *a1 = v250 + ((v260 & 0xFFFFFFFF00000000) >> 32);
  a1[1] = (v260 & 0xFFFFFFFF00000000) + v261;
  v268 = a1 + 2;
  *v268 = (v260 & 0xFFFFFFFFFFFFFFFELL) + v262;
  v268[1] = v260 + v264;
  result = v268 + 2;
  *result = v260 + v266;
  result[1] = v260 + (v22 | __CFADD__(v260, v266)) + v259;
  return result;
}

uint64_t cczp_sqr_default_ws(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t result;

  v7 = *(_QWORD *)(a1 + 16);
  v8 = cczp_n(a2);
  v9 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * v8);
  ccn_sqr_ws(a1, v8, v9, a4);
  result = cczp_mod_ws(a1, a2);
  *(_QWORD *)(a1 + 16) = v7;
  return result;
}

uint64_t cczp_mul_default_ws(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = cczp_n(a2);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v10);
  v12 = cczp_n(a2);
  ccn_mul_ws(a1, v12, v11, a4, a5);
  result = cczp_mod_ws(a1, a2);
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

uint64_t cczp_mod_ws(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 16) + 32))();
}

uint64_t ccn_mul(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int128 v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int128 v14;

  if (result)
  {
    result *= -8;
    v4 = (unint64_t *)(a2 - result);
    v5 = a3 - result;
    v6 = a4 - result;
    v7 = result;
    v8 = result;
    v9 = 0;
    v10 = *(_QWORD *)(v6 + result);
    do
    {
      v11 = *(unint64_t *)(v5 + v8) * (unsigned __int128)v10 + v9;
      *(unint64_t *)((char *)v4 + v8) = v11;
      v9 = *((_QWORD *)&v11 + 1);
      v8 += 8;
    }
    while (v8);
    while (1)
    {
      *v4 = v9;
      v7 += 8;
      if (!v7)
        break;
      ++v4;
      v12 = result;
      v9 = 0;
      v13 = *(_QWORD *)(v6 + v7);
      do
      {
        v14 = *(unint64_t *)(v5 + v12) * (unsigned __int128)v13 + v9 + *(unint64_t *)((char *)v4 + v12);
        *(unint64_t *)((char *)v4 + v12) = v14;
        v9 = *((_QWORD *)&v14 + 1);
        v12 += 8;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t ccn_mul_ws(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ccn_mul(a2, a3, a4, a5);
}

_BYTE *ccz_lsr(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char v6;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;

  v6 = 0;
  v21 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v21 = v6;
  v12 = ccz_n(a2);
  v13 = ccn_bitlen(v12, *(unint64_t **)(a2 + 24));
  v14 = v13 - a3;
  if (v13 <= a3)
  {
    ccz_zero((_QWORD *)a1);
  }
  else
  {
    v15 = a3 >> 6;
    v16 = ccz_sign(a2);
    ccz_set_sign(a1, v16);
    v17 = ccz_n(a2);
    ccz_set_capacity(a1, v17 - (a3 >> 6));
    if ((a3 & 0x3F) != 0)
    {
      v18 = ccz_n(a2);
      ccn_shift_right(v18 - v15, *(int8x16_t **)(a1 + 24), (int8x16_t *)(*(_QWORD *)(a2 + 24) + 8 * v15), a3 & 0x3F);
    }
    else if (a1 != a2 || a3 >= 0x40)
    {
      v19 = ccz_n(a2);
      ccn_set(v19 - v15, *(void **)(a1 + 24), (void *)(*(_QWORD *)(a2 + 24) + 8 * v15));
    }
    ccz_set_n((_QWORD *)a1, (v14 + 63) >> 6);
  }
  return cc_disable_dit(&v21);
}

uint64_t ccz_n(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t cczp_div2_ws(uint64_t a1, uint64_t a2, int8x16_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;

  v7 = cczp_n(a2);
  v8 = *a4 & 1;
  v9 = (uint64_t *)cczp_prime(a2);
  v10 = ccn_cond_add(v7, v8, a3->i64, a4, v9);
  result = ccn_shift_right(v7, a3, a3, 1);
  a3->i64[v7 - 1] |= v10 << 63;
  return result;
}

uint64_t ccn_mod_521_ws(uint64_t a1, uint64_t a2, uint64_t *a3, int8x16_t *a4)
{
  uint64_t v8;
  unint64_t *v9;
  char v10;
  int8x16_t v12[4];
  uint64_t v13;
  uint64_t v14[10];

  v14[9] = *MEMORY[0x1E0C874D8];
  ccn_shift_right(9, v12, a4 + 4, 9);
  v13 += a4[4].i64[0] & 0x1FF;
  v8 = ccn_add_ws(a1, 8, v12, v12[0].i64, a4->i64);
  v13 += v8;
  v9 = (unint64_t *)cczp_prime(a2);
  v10 = ccn_sub_ws(a1, 9, v14, v12[0].i64, v9);
  return ccn_mux(9, v10, a3, v12[0].i64, v14);
}

uint64_t ccn_shift_right_asm(uint64_t result, int8x16_t *a2, int8x16_t *a3, uint64_t a4)
{
  unint64_t v4;
  char v5;
  uint64x2_t v6;
  uint64x2_t v7;
  BOOL v8;
  BOOL v9;
  int8x16_t v10;
  int8x16_t v11;
  uint64x2_t v12;
  int8x16_t v13;
  uint64_t v14;
  unint64_t *v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  if (result)
  {
    v4 = a3->i64[0];
    v5 = 64 - a4;
    v6 = (uint64x2_t)vdupq_n_s64(64 - a4);
    v7 = (uint64x2_t)vdupq_n_s64(-a4);
    v8 = result == 4;
    v9 = result < 4;
    result -= 4;
    if (!v9)
    {
      if (v8)
      {
        v13 = a3[1];
        *a2 = veorq_s8((int8x16_t)vshlq_u64(*(uint64x2_t *)a3, v7), (int8x16_t)vshlq_u64((uint64x2_t)vextq_s8(*a3, v13, 8uLL), v6));
        a2[1] = veorq_s8((int8x16_t)vshlq_u64((uint64x2_t)v13, v7), (int8x16_t)vshlq_u64((uint64x2_t)vextq_s8(v13, v13, 8uLL).u64[0], v6));
        return result;
      }
      do
      {
        v10 = *a3;
        v11 = a3[1];
        a3 += 2;
        v4 = a3->i64[0];
        v12.i64[0] = vextq_s8(v11, v11, 8uLL).u64[0];
        v12.i64[1] = a3->i64[0];
        *a2 = veorq_s8((int8x16_t)vshlq_u64((uint64x2_t)v10, v7), (int8x16_t)vshlq_u64((uint64x2_t)vextq_s8(v10, v11, 8uLL), v6));
        a2[1] = veorq_s8((int8x16_t)vshlq_u64((uint64x2_t)v11, v7), (int8x16_t)vshlq_u64(v12, v6));
        a2 += 2;
        v9 = result <= 4;
        result -= 4;
      }
      while (!v9);
    }
    v14 = result + 4;
    v15 = &a3->u64[1];
    v16 = v14 == 2;
    v9 = v14 < 2;
    result = v14 - 2;
    if (!v9)
    {
      if (v16)
      {
        v19 = *v15 >> a4;
        a2->i64[0] = (v4 >> a4) | (*v15 << v5) & (((unint64_t)(64 - a4) >> 6) - 1);
        a2->i64[1] = v19;
        return result;
      }
      do
      {
        v17 = *v15;
        v18 = v15[1];
        v15 += 2;
        a2->i64[0] = (v4 >> a4) | (v17 << v5) & (((unint64_t)(64 - a4) >> 6) - 1);
        a2->i64[1] = (v17 >> a4) | (v18 << v5) & (((unint64_t)(64 - a4) >> 6) - 1);
        ++a2;
        v4 = v18;
        v9 = result <= 2;
        result -= 2;
      }
      while (!v9);
    }
    a2->i64[0] = v4 >> a4;
  }
  return result;
}

uint64_t ccn_shift_right(uint64_t result, int8x16_t *a2, int8x16_t *a3, uint64_t a4)
{
  if (result)
    return ccn_shift_right_asm(result, a2, a3, a4);
  return result;
}

_QWORD *ccz_set_n(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

uint64_t ccz_set_capacity(uint64_t result, unint64_t a2)
{
  int v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v2 = *(_DWORD *)(result + 16);
  if (v2 >= 0)
    v3 = v2;
  else
    v3 = -v2;
  if (*(_QWORD *)(result + 24))
    v4 = v3 >= a2;
  else
    v4 = 0;
  if (!v4)
  {
    v5 = result;
    v6 = (a2 & 0xFFFFFFFFFFFFFFE0) + 64;
    v7 = *(uint64_t **)(result + 8);
    v8 = *v7;
    if (v2)
      result = ((uint64_t (*)(uint64_t, unint64_t))v7[2])(v8, 8 * v3);
    else
      result = ((uint64_t (*)(uint64_t, unint64_t))v7[1])(v8, 8 * v6);
    if (*(int *)(v5 + 16) >= 0)
      v9 = v6;
    else
      v9 = -(int)v6;
    *(_DWORD *)(v5 + 16) = v9;
    *(_QWORD *)(v5 + 24) = result;
  }
  return result;
}

uint64_t ccz_set_sign(uint64_t result, int a2)
{
  int v2;

  v2 = *(_DWORD *)(result + 16);
  if (((v2 >> 31) | 1) != a2)
    *(_DWORD *)(result + 16) = -v2;
  return result;
}

unint64_t ccn_bitlen(uint64_t a1, unint64_t *a2)
{
  char v2;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v12;

  v2 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v12 = v2;
  v8 = 0;
  if (a1)
  {
    v9 = 64;
    do
    {
      v10 = *a2++;
      v8 = ((((v10 | HIDWORD(v10)) + 0xFFFFFFFF) >> 32) - 1) & v8 | (v9 - __clz(v10 | 1)) & -(uint64_t)(((v10 | HIDWORD(v10)) + 0xFFFFFFFF) >> 32);
      v9 += 64;
      --a1;
    }
    while (a1);
  }
  cc_disable_dit(&v12);
  return v8;
}

_QWORD *ccn_p384_mul_asm_ws(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4, unint64_t *a5)
{
  return ccn_mulmod_p384(a3, a4, a5);
}

_QWORD *ccn_p384_sqr_asm_ws(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4)
{
  return ccn_mulmod_p384(a3, a4, a4);
}

uint64_t ccec_twin_mult_normalize_ws(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, _QWORD))(a1 + 24))(a1, *a2);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_sqr_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  result = cczp_mul_ws(a1, (uint64_t)a2);
  *(_QWORD *)(a1 + 16) = v5;
  return result;
}

uint64_t (**ccec_projectify_jacobian_ws(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(_QWORD, unint64_t, uint64_t)))(_QWORD, unint64_t, uint64_t)
{
  uint64_t (**v5)(_QWORD, unint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  v5 = a5;
  v9 = *(_QWORD *)(a1 + 16);
  if (a5)
  {
    v10 = cczp_bitlen((uint64_t)a2);
    v5 = (uint64_t (**)(_QWORD, unint64_t, uint64_t))ccn_random_bits(v10 - 1, a3 + 16 * *a2, v5);
    ccn_set_bit(a3 + 16 * *a2, v10 - 2, 1);
    cczp_sqr_ws(a1, (uint64_t)a2);
    cczp_mul_ws(a1, (uint64_t)a2);
    cczp_mul_ws(a1, (uint64_t)a2);
    cczp_mul_ws(a1, (uint64_t)a2);
  }
  else
  {
    ccn_seti(*a2, (_QWORD *)(a3 + 16 * *a2), 1);
    cczp_to_ws(a1, (uint64_t)a2);
  }
  cczp_to_ws(a1, (uint64_t)a2);
  cczp_to_ws(a1, (uint64_t)a2);
  *(_QWORD *)(a1 + 16) = v9;
  return v5;
}

uint64_t cczp_to_ws(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 16) + 56))();
}

uint64_t ccn_p256_to_ws(uint64_t a1, uint64_t a2)
{
  return cczp_mul_ws(a1, a2);
}

uint64_t ccn_seti(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  *a2 = a3;
  return cc_clear(8 * a1 - 8, a2 + 1);
}

uint64_t cczp_modn_ws(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, char *a5)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  char *v19;

  v10 = cczp_n((uint64_t)a2);
  v11 = v10;
  if ((a4 - 1) / v10 <= 1)
    v12 = 1;
  else
    v12 = (a4 - 1) / v10;
  v17 = a4;
  v18 = *(_QWORD *)(a1 + 16);
  v13 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * v10);
  v19 = a5;
  ccn_set(v11, v13, a5);
  v14 = v12 - 1;
  if (v12 != 1)
  {
    v15 = &v19[8 * v11];
    do
    {
      ccn_set(v11, &v13[8 * v11], v15);
      cczp_mm_redc_ws(a1, a2, (uint64_t *)v13, (uint64_t *)v13);
      v15 += 8 * v11;
      --v14;
    }
    while (v14);
  }
  if (v17 != v12 * v11)
    ccn_set(v17 - v12 * v11, &v13[8 * v11], &v19[8 * v12 * v11]);
  ccn_zero(v11 - (v17 - v12 * v11), &v13[8 * v11 + 8 * (v17 - v12 * v11)]);
  cczp_mm_redc_ws(a1, a2, a3, (uint64_t *)v13);
  do
  {
    ccn_mul_ws(a1, v11, (uint64_t)v13, (uint64_t)a3, (uint64_t)&a2[*a2 + 4]);
    result = cczp_mm_redc_ws(a1, a2, a3, (uint64_t *)v13);
    --v12;
  }
  while (v12);
  *(_QWORD *)(a1 + 16) = v18;
  return result;
}

uint64_t ccec_full_add_ws(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 16) + 88))();
}

uint64_t cczp_mod_default_ws(uint64_t a1, _QWORD *a2, uint64_t *a3, char *a4)
{
  uint64_t v8;

  v8 = 2 * cczp_n((uint64_t)a2);
  return cczp_modn_ws(a1, a2, a3, v8, a4);
}

uint64_t ccec_full_sub_ws(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 3 * *a2);
  ccn_set(v8, v10, a5);
  cczp_negate((uint64_t)a2, (uint64_t *)&v10[8 * *a2], (unint64_t *)&a5[8 * *a2]);
  ccn_set(v8, &v10[16 * *a2], &a5[16 * *a2]);
  result = ccec_full_add_ws(a1, (uint64_t)a2);
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

unint64_t cczp_negate(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v6;
  _BOOL8 v7;
  uint64_t *v8;

  v6 = cczp_n(a1);
  v7 = ccn_n(v6, a3) != 0;
  v8 = (uint64_t *)cczp_prime(a1);
  return ccn_cond_rsub(v6, v7, a2, a3, v8);
}

uint64_t ccn_recode_jsf_init(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  _QWORD v16[3];

  v4 = 0;
  v16[2] = *MEMORY[0x1E0C874D8];
  v5 = (unint64_t)(a2 - 1) >> 6;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = a4;
  v6 = (a2 - 1) & 0x3F;
  v7 = (unint64_t)(a2 - 2) >> 6;
  v8 = (a2 - 2) & 0x3F;
  v16[0] = a3;
  v16[1] = a4;
  v9 = (unint64_t)(a2 - 3) >> 6;
  v10 = (a2 - 3) & 0x3F;
  v11 = (unint64_t)(a2 - 4) >> 6;
  v12 = (a2 - 4) & 0x3F;
  v13 = 1;
  do
  {
    v14 = v13;
    v15 = v16[v4];
    *(_BYTE *)(result + v4) = (8 * ((*(_QWORD *)(v15 + 8 * v5) >> v6) & 1)) | (4
                                                                             * ((*(_QWORD *)(v15 + 8 * v7) >> v8) & 1)) | (2 * ((*(_QWORD *)(v15 + 8 * v9) >> v10) & 1)) | (*(_QWORD *)(v15 + 8 * v11) >> v12) & 1;
    v4 = 1;
    v13 = 0;
  }
  while ((v14 & 1) != 0);
  return result;
}

BOOL ccz_is_zero(uint64_t a1)
{
  char v2;
  uint64_t v8;
  _BOOL8 v9;
  char v11;

  v2 = 0;
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v11 = v2;
  v8 = ccz_n(a1);
  v9 = ccn_n(v8, *(_QWORD *)(a1 + 24)) == 0;
  cc_disable_dit(&v11);
  return v9;
}

_BYTE *ccz_lsl(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char v6;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;

  v6 = 0;
  v26 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v26 = v6;
  v12 = ccz_sign(a2);
  ccz_set_sign(a1, v12);
  v13 = ccz_n(a2);
  ccz_set_capacity(a1, v13 + ((a3 + 63) >> 6));
  v14 = a3 >> 6;
  v15 = a3 & 0x3F;
  v16 = (void *)(*(_QWORD *)(a1 + 24) + 8 * (a3 >> 6));
  v17 = *(const void **)(a2 + 24);
  v18 = ccz_n(a2);
  memmove(v16, v17, 8 * v18);
  v19 = ccz_n(a2);
  ccz_set_n((_QWORD *)a1, v19 + (a3 >> 6));
  ccn_zero(a3 >> 6, *(void **)(a1 + 24));
  if ((a3 & 0x3F) != 0)
  {
    v20 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v20 + 8 * ccz_n(a1)) = 0;
    v21 = ccz_n(a1);
    ccn_shift_left(v21 - v14 + 1, *(_QWORD *)(a1 + 24) + 8 * v14, *(_QWORD *)(a1 + 24) + 8 * v14, v15, v22);
    v23 = ccz_n(a1);
    v24 = ccn_n(v23 + 1, *(_QWORD *)(a1 + 24));
    ccz_set_n((_QWORD *)a1, v24);
  }
  return cc_disable_dit(&v26);
}

unint64_t ccz_bitlen(uint64_t a1)
{
  char v1;
  unint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = ccn_bitlen(*(_QWORD *)a1, *(unint64_t **)(a1 + 24));
  cc_disable_dit(&v9);
  return v7;
}

_BYTE *ccz_seti(uint64_t a1, uint64_t a2)
{
  char v3;
  _QWORD v10[4];
  char v11;
  _QWORD v12[2];

  v3 = 0;
  v12[1] = *MEMORY[0x1E0C874D8];
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v11 = v3;
  v12[0] = a2;
  v10[0] = ccn_n(1, v12);
  v10[1] = 0;
  v10[2] = 1;
  v10[3] = v12;
  ccz_set(a1, (uint64_t)v10);
  return cc_disable_dit(&v11);
}

_BYTE *ccz_set(uint64_t a1, uint64_t a2)
{
  char v4;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;

  v4 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v15 = v4;
  if (a1 != a2)
  {
    v10 = ccz_sign(a2);
    ccz_set_sign(a1, v10);
    v11 = ccz_n(a2);
    ccz_set_capacity(a1, v11);
    v12 = ccz_n(a2);
    ccz_set_n((_QWORD *)a1, v12);
    v13 = ccz_n(a2);
    ccn_set(v13, *(void **)(a1 + 24), *(void **)(a2 + 24));
  }
  return cc_disable_dit(&v15);
}

uint64_t ccn_p384_to_ws(uint64_t a1, uint64_t a2)
{
  return cczp_mul_ws(a1, a2);
}

uint64_t ccn_random_bits(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, unint64_t, uint64_t))
{
  char v4;
  unint64_t v5;
  uint64_t result;

  v4 = a1;
  v5 = (unint64_t)(a1 + 63) >> 6;
  result = (*a3)(a3, 8 * v5, a2);
  if (!(_DWORD)result)
    *(_QWORD *)(a2 + 8 * v5 - 8) &= 0xFFFFFFFFFFFFFFFFLL >> -(((((unint64_t)(v4 & 0x3F) + 0xFFFFFFFF) >> 32) - 1) & 0x40 | v4 & 0x3F);
  return result;
}

uint64_t ccrsa_import_pub(unint64_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  char v5;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  char v15;

  v5 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v15 = v5;
  v11 = &a3[a2];
  v12 = ccder_decode_rsa_pub_x509(a1, a3, &a3[a2]);
  if (!v12)
    v12 = ccder_decode_rsa_pub(a1, a3, v11);
  if (v12)
    v13 = 0;
  else
    v13 = 4294967289;
  cc_disable_dit(&v15);
  return v13;
}

unsigned __int8 *ccrsa_import_pub_n(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *result;

  v3 = &a2[a1];
  result = ccder_decode_rsa_pub_x509_n(a2, &a2[a1]);
  if (!result)
    return ccder_decode_rsa_pub_n(a2, v3);
  return result;
}

unsigned __int8 *ccder_decode_rsa_pub_x509_n(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 *result;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v5 = a2;
  result = ccder_decode_constructed_tl(0x2000000000000010, &v5, a1, a2);
  if (result)
  {
    v7 = v5;
    v6 = 0;
    v3 = ccder_decode_constructed_tl(0x2000000000000010, &v7, result, v5);
    if (v3 && (v4 = ccder_decode_oid(&v6, v3, v7)) != 0)
    {
      result = ccder_decode_constructed_tl(5, &v7, v4, v7);
      if (result)
      {
        v7 = v5;
        result = ccder_decode_constructed_tl(3, &v7, result, v5);
        if (result)
        {
          if (!*result)
            ++result;
          return ccder_decode_rsa_pub_n(result, v7);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t ccn_write_uint_padded(unint64_t a1, unint64_t *a2, unint64_t a3, char *a4)
{
  uint64_t result;

  LODWORD(result) = ccn_write_uint_padded_ct(a1, a2, a3, a4);
  if ((result & 0x80000000) == 0)
    return result;
  ccn_write_uint(a1, a2, a3, (uint64_t)a4);
  return 0;
}

uint64_t ccec_verify_internal_with_base_ws(uint64_t a1, unint64_t **a2, unint64_t a3, unsigned __int8 *a4, unint64_t *a5, unint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t *v19;
  size_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t uint;
  unint64_t *v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t *v33;
  NSObject *v34;
  void *__s;
  void *v36;
  unint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  unint64_t *v43;
  unint64_t *v44;

  v14 = (uint64_t *)*a2;
  v16 = (uint64_t)(*a2 + 4);
  v15 = **a2;
  if (a3 <= 0xF)
  {
    v34 = cc_log_default();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT))
      ccec_sign_internal_ws_cold_1(a3, v34);
  }
  if (!ccec_validate_scalar(v14, a5) && !ccec_validate_scalar(v14, a6))
  {
    v38 = a5;
    v41 = *(_QWORD *)(a1 + 16);
    v19 = (int8x16_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v15);
    v39 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v15);
    v44 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v15);
    v43 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v15);
    v40 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 3 * v15);
    v42 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 3 * v15);
    v20 = ccec_signature_r_s_size((uint64_t *)a2);
    v36 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v15);
    memset(v36, 170, v20);
    __s = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v15);
    v37 = v20;
    memset(__s, 255, v20);
    v21 = cczp_bitlen(v16 + 40 * *v14);
    v22 = v21;
    if ((unint64_t)(v21 + 7) >> 3 >= a3)
      v23 = a3;
    else
      v23 = (unint64_t)(v21 + 7) >> 3;
    uint = ccn_read_uint(v15, v19, v23, a4);
    if ((uint & 0x80000000) == 0)
    {
      if (v22 < 8 * a3)
        ccn_shift_right(v15, v19, v19, -(int)v22 & 7);
      v25 = (unint64_t *)cczp_prime(v16 + 40 * v15);
      if (!ccn_sub_ws(a1, v15, v39, v19->i64, v25))
        ccn_set(v15, v19, v39);
      if (cczp_inv_ws(a1, v16 + 40 * v15)
        || (cczp_mul_ws(a1, v16 + 40 * v15),
            cczp_mul_ws(a1, v16 + 40 * v15),
            v26 = (unint64_t *)(a2 + 2),
            ccn_n(v15, &a2[2 * *v14 + 2]) != 1)
        || v26[2 * *v14] != 1)
      {
LABEL_37:
        v17 = 4294967289;
LABEL_39:
        v29 = v41;
LABEL_34:
        *(_QWORD *)(a1 + 16) = v29;
        return v17;
      }
      v27 = v16 + 40 * v15;
      uint = ccec_projectify_ws(a1, (uint64_t)v14);
      if (!(_DWORD)uint)
      {
        uint = ccec_projectify_ws(a1, (uint64_t)v14);
        if (!(_DWORD)uint)
        {
          if (ccec_is_point_ws(a1, v14, v42))
          {
            v28 = *v14;
            if (ccn_cmp(*v14, (unint64_t *)(v16 + 16 * *v14 + 8 * *v14), v26))
            {
              v17 = ccec_twin_mult_ws(a1, v14, v40, v44, (uint64_t)v40, v43, v42);
              v29 = v41;
              if ((_DWORD)v17)
                goto LABEL_34;
            }
            else
            {
              v30 = v16 + 40 * v28;
              v31 = *(_QWORD *)(a1 + 16);
              (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, 3 * v28);
              cczp_bitlen(v30);
              if (ccec_mult_ws(a1, (uint64_t)v14)
                || (cczp_bitlen(v30), ccec_mult_ws(a1, (uint64_t)v14)))
              {
                v17 = 0xFFFFFFFFLL;
              }
              else
              {
                ccec_full_add_ws(a1, (uint64_t)v14);
                v17 = 0;
              }
              v29 = v41;
              *(_QWORD *)(a1 + 16) = v31;
              if ((_DWORD)v17)
                goto LABEL_34;
            }
            if (ccec_affinify_x_only_ws(a1, v14, (uint64_t)v40, (uint64_t)v40))
            {
              v17 = 4294967289;
            }
            else
            {
              v32 = (unint64_t *)cczp_prime(v27);
              if ((ccn_cmp(v15, (unint64_t *)v40, v32) & 0x80000000) == 0)
              {
                v33 = (unint64_t *)cczp_prime(v27);
                ccn_sub_ws(a1, v15, v40, (uint64_t *)v40, v33);
              }
              if (ccn_cmp(v15, (unint64_t *)v40, v38))
                v17 = 4294967150;
              else
                v17 = 0;
              ccn_write_uint_padded_ct(v15, v38, v37, (char *)v36);
              ccn_write_uint_padded_ct(v15, (unint64_t *)v40, v37, (char *)__s);
              cc_fault_canary_set(a8, (uint64_t)&CCEC_FAULT_CANARY, v37, (uint64_t)v36, (uint64_t)__s);
            }
            goto LABEL_34;
          }
          goto LABEL_37;
        }
      }
    }
    v17 = uint;
    goto LABEL_39;
  }
  return 4294967289;
}

uint64_t ccn_write_uint_padded_ct(uint64_t a1, unint64_t *a2, unint64_t a3, char *__s)
{
  char *v4;
  unint64_t v5;
  char v8;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char v25;

  v4 = __s;
  v5 = a3;
  v8 = 0;
  v25 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v25 = v8;
  if (a3 <= 0x7FFFFFFE
    && (v14 = 8 * a1, (unint64_t)(8 * a1) <= 0x7FFFFFFE)
    && ((v15 = a3 - v14, a3 <= v14) ? (LODWORD(v15) = 0) : (cc_clear(a3 - v14, __s), v4 += v15, v5 = 8 * a1),
        v16 = ccn_write_uint_size(a1, a2),
        v5 >= v16))
  {
    v17 = (v15 + v5 - v16);
    if (v5 < 8)
    {
      v19 = 0;
    }
    else
    {
      v19 = ((v5 - 8) >> 3) + 1;
      v20 = a2;
      v21 = v19;
      do
      {
        v22 = *v20++;
        *(_QWORD *)&v4[v5 - 8] = bswap64(v22);
        v5 -= 8;
        --v21;
      }
      while (v21);
    }
    if (v5)
    {
      v23 = a2[v19];
      v24 = &v4[v5 - 1];
      do
      {
        *v24-- = v23;
        v23 >>= 8;
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    v17 = 4294967289;
  }
  cc_disable_dit(&v25);
  return v17;
}

unint64_t ccn_write_uint_size(uint64_t a1, unint64_t *a2)
{
  char v2;
  unint64_t v8;
  char v10;

  v2 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v10 = v2;
  v8 = (ccn_bitlen(a1, a2) + 7) >> 3;
  cc_disable_dit(&v10);
  return v8;
}

uint64_t ccec_projectify_ws(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 16) + 72))();
}

uint64_t ccec_validate_scalar(uint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  unint64_t *v5;

  v4 = *a1;
  v5 = (unint64_t *)cczp_prime((uint64_t)&a1[5 * *a1 + 4]);
  if ((ccn_cmp(v4, a2, v5) & 0x80000000) == 0)
    return 0xFFFFFFFFLL;
  if (ccn_n(*a1, a2))
    return 0;
  return 0xFFFFFFFFLL;
}

uint64_t ccrsa_emsa_pkcs1v15_verify(unint64_t a1, _BYTE *a2, unint64_t a3, char *a4, uint64_t a5)
{
  char v5;
  uint64_t v11;
  char v13;
  _QWORD v14[3];

  v5 = 0;
  v14[2] = *MEMORY[0x1E0C874D8];
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v13 = v5;
  v14[0] = 0xAAAAAAAAAAAAAAAALL;
  v14[1] = 0xAAAAAAAAAAAAAAAALL;
  v11 = ccrsa_emsa_pkcs1v15_verify_canary_out(a1, a2, a3, a4, a5, v14);
  cc_disable_dit(&v13);
  return v11;
}

uint64_t ccrsa_emsa_pkcs1v15_verify_canary_out(unint64_t a1, _BYTE *a2, unint64_t a3, char *a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v12;
  char v13;
  uint64_t v14;
  char v15;
  char *v17;
  char v18;
  char v19;
  char v20;
  char v21;
  _BYTE *v22;
  char v23;
  uint64_t v24;
  char v25;
  _BYTE *v26;
  char v27;
  char v28;
  char v29;

  *a6 = 0;
  a6[1] = 0;
  if (a5)
  {
    v9 = *(unsigned __int8 *)(a5 + 1);
    v10 = a3 + v9 + 10;
  }
  else
  {
    v9 = 0;
    v10 = a3;
  }
  if (v10 + 11 > a1)
    return 4294967273;
  v12 = a2 + 2;
  v13 = a2[1] ^ 1 | *a2;
  if (a1 - v10 != 3)
  {
    v14 = v10 - a1 + 3;
    do
    {
      v15 = *v12++;
      v13 |= ~v15;
    }
    while (!__CFADD__(v14++, 1));
    v12 = &a2[~v10 + a1];
  }
  v17 = v12 + 1;
  v18 = *v12 | v13;
  if (a5)
  {
    v19 = v12[1] ^ 0x30;
    v20 = v12[2] ^ (v10 - 2);
    v21 = v12[3] ^ 0x30;
    v22 = v12 + 5;
    v23 = v12[4] ^ (v9 + 4);
    v24 = v9 + 2;
    v25 = cc_cmp_safe(v9 + 2, v12 + 5, (char *)a5);
    v26 = &v22[v24];
    v27 = v22[v24] ^ 5;
    v28 = v22[v24 + 1];
    v29 = v22[v24 + 2] ^ 4;
    v17 = &v22[v24 + 4];
    v18 |= v19 | v20 | v21 | v23 | v25 | v27 | v28 | v29 | v26[3] ^ a3;
  }
  cc_fault_canary_set((uint64_t)a6, (uint64_t)&CCRSA_PKCS1_FAULT_CANARY, a3, (uint64_t)a4, (uint64_t)v17);
  return (v18 | cc_cmp_safe(a3, v17, a4));
}

uint64_t cc_fault_canary_set(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t i;
  uint64_t j;

  for (i = 0; i != 16; ++i)
    *(_BYTE *)(result + i) = *(_BYTE *)(a5 + i % a3) ^ *(_BYTE *)(a4 + i % a3) ^ *(_BYTE *)(a2 + i);
  if (a3 >= 0x11)
  {
    for (j = 16; j != a3; ++j)
      *(_BYTE *)(result + (j & 0xF)) ^= *(_BYTE *)(a5 + j) ^ *(_BYTE *)(a4 + j);
  }
  return result;
}

uint64_t ccec_validate_point_and_projectify_ws(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t result;

  v8 = *a2;
  v9 = (unint64_t *)cczp_prime((uint64_t)a2);
  if ((int)ccn_cmp(v8, v9, a4) < 1)
    return 0xFFFFFFFFLL;
  v10 = *a2;
  v11 = &a4[*a2];
  v12 = (unint64_t *)cczp_prime((uint64_t)a2);
  if ((int)ccn_cmp(v10, v12, v11) < 1)
    return 0xFFFFFFFFLL;
  result = ccec_projectify_ws(a1, (uint64_t)a2);
  if (!(_DWORD)result)
  {
    if (ccec_is_point_ws(a1, a2, a3))
      return 0;
    else
      return 4294967289;
  }
  return result;
}

BOOL ccec_is_point_projective_ws(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  _BOOL8 result;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, *a2);
  v7 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  cczp_sqr_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_sqr_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_sqr_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_sqr_ws(a1, (uint64_t)a2);
  result = ccn_cmp(v4, v7, v6) == 0;
  *(_QWORD *)(a1 + 16) = v5;
  return result;
}

unint64_t ccec_signature_r_s_size(uint64_t *a1)
{
  char v1;
  unint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = (unint64_t)(cczp_bitlen(*a1) + 7) >> 3;
  cc_disable_dit(&v9);
  return v7;
}

uint64_t cczp_inv_default_ws(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v6;
  unint64_t v8;
  unint64_t *v9;
  uint64_t result;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t updated;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t __n;
  uint64_t v46;
  void *__s;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  void *v52;
  unint64_t *v53;
  unint64_t *v54;
  uint64_t v55;
  uint64_t v56;

  v6 = a2;
  v8 = cczp_n(a2);
  v9 = (unint64_t *)cczp_prime(v6);
  if ((ccn_cmp(v8, a4, v9) & 0x80000000) == 0)
    return 4294967289;
  v46 = *(_QWORD *)(a1 + 16);
  __s = a3;
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v8);
  v12 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v8);
  cczp_from_ws(a1, v6);
  v13 = (void *)cczp_prime(v6);
  ccn_set(v8, v12, v13);
  v14 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v8);
  v15 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v8);
  v53 = v14;
  ccn_seti(v8, v14, 1);
  __n = 8 * v8;
  v54 = v15;
  cc_clear(8 * v8, v15);
  v52 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v8);
  v16 = (v8 << 7) | 0x1E;
  if (v16 != 30)
  {
    v17 = 0;
    v49 = v8 - 1;
    v50 = v16 / 0x1F;
    v48 = v8 - 2;
    v51 = (_QWORD *)v6;
    v56 = v8;
    do
    {
      v18 = v11[v49];
      v19 = v12[v49];
      v55 = v17;
      if (v8 >= 2)
      {
        v20 = v48;
        do
        {
          v21 = __clz(v19 | v18 | 1);
          v22 = (((v19 | v18) >> 63) - v21 + 64) & -(uint64_t)(((v19 | v18 | ((v19 | (unint64_t)v18) >> 32))
                                                             + 0xFFFFFFFF) >> 32);
          v18 = (v11[v20] >> v22) | (v18 << v21);
          v19 = (v12[v20--] >> v22) | (v19 << v21);
        }
        while (v20 < v8);
      }
      v23 = 0;
      v24 = 0;
      v25 = v18 & 0xFFFFFFFF80000000 | *v11 & 0x7FFFFFFFLL;
      v26 = v19 & 0xFFFFFFFF80000000 | *v12 & 0x7FFFFFFFLL;
      v27 = 31;
      v28 = 0x80000000;
      v29 = 0x80000000;
      do
      {
        v30 = v25 & 1;
        v31 = v25 >> !(v25 & 1);
        v32 = v31 ^ v26;
        v33 = v25 & ((((v31 - v26) ^ v31 | v31 ^ v26) ^ v31) >> 63);
        v34 = -(uint64_t)v33;
        v35 = v26 & -(uint64_t)v33--;
        v36 = v33 & v31 | v35;
        v26 = v32 ^ v36;
        v37 = v33 & v29 | v24 & v34;
        v24 ^= v29 ^ v37;
        v38 = v33 & v23 | v28 & v34;
        v28 ^= v23 ^ v38;
        v25 = (v36 - (v26 & -(uint64_t)v30)) >> v30;
        v29 = (v37 - (v24 & -(uint64_t)v30)) & 0x8000000000000000 | ((v37 - (v24 & -(uint64_t)v30)) >> 1);
        v23 = (v38 - (v28 & -(uint64_t)v30)) & 0x8000000000000000 | ((v38 - (v28 & -(uint64_t)v30)) >> 1);
        --v27;
      }
      while (v27);
      v39 = a1;
      updated = cczp_inv_update_ws(a1, v8, v52, v11, (v37 - (v24 & -(uint64_t)v30)) & 0x8000000000000000 | ((v37 - (v24 & -(uint64_t)v30)) >> 1), v12, (v38 - (v28 & -(uint64_t)v30)) & 0x8000000000000000 | ((v38 - (v28 & -(uint64_t)v30)) >> 1));
      v41 = cczp_inv_update_ws(v39, v56, v12, v11, v24, v12, v28);
      ccn_set(v56, v11, v52);
      v42 = updated - 1;
      v43 = -(uint64_t)updated;
      a1 = v39;
      v44 = v42 & v23 | v43 & -(uint64_t)v23;
      v6 = (uint64_t)v51;
      v8 = v56;
      cczp_inv_update_redc_ws(v39, v51, v52, v53, v42 & v29 | v43 & -(uint64_t)v29, v54, v44);
      cczp_inv_update_redc_ws(v39, v51, v54, v53, (v41 - 1) & v24 | -(uint64_t)v41 & -v24, v54, (v41 - 1) & v28 | -(uint64_t)v41 & -v28);
      ccn_set(v56, v53, v52);
      v17 = v55 + 1;
    }
    while (v55 + 1 != v50);
  }
  if (ccn_n(v8, v12) == 1 && *v12 == 1)
  {
    cczp_to_ws(a1, v6);
    result = 0;
  }
  else
  {
    cc_clear(__n, __s);
    result = 4294967289;
  }
  *(_QWORD *)(a1 + 16) = v46;
  return result;
}

void *cczp_to_default_ws(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6;

  v6 = cczp_n(a2);
  return ccn_set(v6, a3, a4);
}

void *cczp_from_default_ws(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6;

  v6 = cczp_n(a2);
  return ccn_set(v6, a3, a4);
}

uint64_t ccec_affinify_x_only_ws(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v6 = *a2;
  if (ccec_is_point_at_infinity(a2, a4))
    return 4294967289;
  v8 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  cczp_sqr_ws(a1, (uint64_t)a2);
  v9 = cczp_inv_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_from_ws(a1, (uint64_t)a2);
  *(_QWORD *)(a1 + 16) = v8;
  return v9;
}

uint64_t cczp_inv_ws(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 16) + 40))();
}

uint64_t ccec_full_add_default_ws(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  void *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t *v13;
  char v14;
  uint64_t result;
  uint64_t v16;

  v6 = cczp_n((uint64_t)a2);
  v16 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  ccec_map_to_homogeneous_ws(a1, (uint64_t)a2);
  ccec_map_to_homogeneous_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  v7 = cczp_n((uint64_t)a2);
  v8 = *a2;
  v9 = &a3[*a2];
  v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v7);
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v7);
  ccn_set(v7, v10, v9);
  cczp_from_ws(a1, (uint64_t)a2);
  v12 = ccn_n(v7, v11) == 1 && *v11 == 1;
  v13 = &a3[2 * v8];
  if (ccn_n(v7, a3))
    v12 = 0;
  v14 = v12 & (ccn_n(v7, v13) == 0);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_sqr_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  ccn_mux(v7, v14, a3, (uint64_t *)v10, a3);
  result = ccn_mux(v7, v14, v9, (uint64_t *)v10, v9);
  *(_QWORD *)(a1 + 16) = v16;
  return result;
}

uint64_t ccec_map_to_homogeneous_ws(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = cczp_n(a2);
  v5 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  cczp_mul_ws(a1, a2);
  cczp_sqr_ws(a1, a2);
  result = cczp_mul_ws(a1, a2);
  *(_QWORD *)(a1 + 16) = v5;
  return result;
}

uint64_t cczp_from_ws(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 16) + 64))();
}

_OWORD *ccn_p256_from_asm_ws(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4)
{
  _OWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C874D8];
  v5[0] = xmmword_1DEE22900;
  v5[1] = *(_OWORD *)algn_1DEE22910;
  return ccn_mulmod_p256(a3, a4, (unint64_t *)v5);
}

uint64_t ccn_p256_inv_asm_ws(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v7;
  int v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t result;
  _OWORD v19[2];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C874D8];
  v7 = *(_QWORD *)(a1 + 16);
  v8 = 4;
  v9 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4);
  v10 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4);
  v11 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4);
  ccn_mulmod_p256(v11, a4, a4);
  ccn_mulmod_p256(v10, v11, a4);
  ccn_mulmod_p256(v10, v10, v10);
  ccn_mulmod_p256(v10, v10, v10);
  ccn_mulmod_p256(v9, v10, a4);
  ccn_mulmod_p256(v10, v9, v11);
  do
  {
    ccn_mulmod_p256(v10, v10, v10);
    --v8;
  }
  while (v8);
  ccn_mulmod_p256(v9, v9, v10);
  ccn_mulmod_p256(v10, v9, v11);
  v12 = 8;
  do
  {
    ccn_mulmod_p256(v10, v10, v10);
    --v12;
  }
  while (v12);
  ccn_mulmod_p256(v9, v9, v10);
  ccn_mulmod_p256(v10, v9, v11);
  v13 = 16;
  do
  {
    ccn_mulmod_p256(v10, v10, v10);
    --v13;
  }
  while (v13);
  ccn_mulmod_p256(v9, v9, v10);
  ccn_mulmod_p256(v10, v9, v11);
  ccn_set(4, v11, v10);
  v14 = 32;
  do
  {
    ccn_mulmod_p256(v11, v11, v11);
    --v14;
  }
  while (v14);
  ccn_mulmod_p256(v11, v11, a4);
  v15 = 128;
  do
  {
    ccn_mulmod_p256(v11, v11, v11);
    --v15;
  }
  while (v15);
  ccn_mulmod_p256(v11, v11, v10);
  v16 = 32;
  do
  {
    ccn_mulmod_p256(v11, v11, v11);
    --v16;
  }
  while (v16);
  ccn_mulmod_p256(v11, v11, v10);
  v17 = 32;
  do
  {
    ccn_mulmod_p256(v11, v11, v11);
    --v17;
  }
  while (v17);
  ccn_mulmod_p256(v10, v11, v9);
  ccn_mulmod_p256(v9, v10, a4);
  v19[0] = xmmword_1DEE22900;
  v19[1] = *(_OWORD *)algn_1DEE22910;
  ccn_mulmod_p256(v9, v9, (unint64_t *)v19);
  if (ccn_n(4, v9) == 1 && *v9 == 1)
  {
    ccn_set(4, a3, v10);
    result = 0;
  }
  else
  {
    result = 4294967254;
  }
  *(_QWORD *)(a1 + 16) = v7;
  return result;
}

uint64_t ccec_verify_digest(unint64_t **a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4, unsigned __int8 *a5, _QWORD *a6)
{
  char v12;
  uint64_t v18;
  _QWORD v20[4];
  void (*v21)(uint64_t);
  char v22;

  v12 = 0;
  v22 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v12 = 1;
    }
  }
  v22 = v12;
  v20[0] = cc_malloc_clear(376 * **a1);
  v20[1] = 47 * **a1;
  v20[2] = 0;
  v20[3] = cc_ws_alloc;
  v21 = cc_ws_free;
  if (v20[0])
  {
    v18 = ccec_verify_digest_ws((uint64_t)v20, a1, a2, a3, a4, a5, a6);
    v21((uint64_t)v20);
  }
  else
  {
    v18 = 4294967283;
  }
  cc_disable_dit(&v22);
  return v18;
}

uint64_t ccec_x963_import_pub(unint64_t *a1, uint64_t a2, unsigned __int8 *a3, unint64_t **a4)
{
  char v8;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[4];
  void (*v19)(uint64_t);
  char v20;

  v8 = 0;
  v20 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v20 = v8;
  v14 = cc_malloc_clear(160 * *a1);
  v15 = 20 * *a1;
  v18[0] = v14;
  v18[1] = v15;
  v18[2] = 0;
  v18[3] = cc_ws_alloc;
  v19 = cc_ws_free;
  if (v14)
  {
    v16 = ccec_x963_import_pub_ws((uint64_t)v18, a1, a2, a3, a4);
    v19((uint64_t)v18);
  }
  else
  {
    v16 = 4294967283;
  }
  cc_disable_dit(&v20);
  return v16;
}

uint64_t ccrsa_pub_crypt(uint64_t *a1, uint64_t *a2, unint64_t *a3)
{
  char v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v20[4];
  void (*v21)(uint64_t);
  char v22;

  v6 = 0;
  v22 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v22 = v6;
  v12 = *a1;
  v13 = sizeof_struct_ccrns_mul_modulus();
  v14 = sizeof_struct_ccpolyzp_po2cyc();
  v20[0] = cc_malloc_clear(8 * ((v13 + v14 - 1) / v14 + 11 * v12) + 8);
  v15 = *a1;
  v16 = sizeof_struct_ccrns_mul_modulus();
  v17 = sizeof_struct_ccpolyzp_po2cyc();
  v20[1] = (v16 + v17 - 1) / v17 + 11 * v15 + 1;
  v20[2] = 0;
  v20[3] = cc_ws_alloc;
  v21 = cc_ws_free;
  if (v20[0])
  {
    v18 = ccrsa_pub_crypt_ws((uint64_t)v20, a1, a2, a3);
    v21((uint64_t)v20);
  }
  else
  {
    v18 = 4294967283;
  }
  cc_disable_dit(&v22);
  return v18;
}

uint64_t sizeof_struct_cche_cipher_plain_ctx()
{
  return 32;
}

uint64_t sizeof_struct_ccpolyzp_po2cyc()
{
  return 8;
}

uint64_t cczp_init(_QWORD *a1)
{
  uint64_t v2;
  uint64_t inited;
  _QWORD v5[4];
  void (*v6)(uint64_t);

  v2 = cczp_n((uint64_t)a1);
  v5[0] = cc_malloc_clear(40 * v2 + 24);
  v5[1] = 5 * cczp_n((uint64_t)a1) + 3;
  v5[2] = 0;
  v5[3] = cc_ws_alloc;
  v6 = cc_ws_free;
  if (!v5[0])
    return 4294967283;
  inited = cczp_init_ws((uint64_t)v5, a1);
  v6((uint64_t)v5);
  return inited;
}

void cc_ws_free(uint64_t a1)
{
  cc_try_abort_if (*(_QWORD *)(a1 + 16) > *(_QWORD *)(a1 + 8));
  cc_clear(8 * *(_QWORD *)(a1 + 8), *(void **)a1);
  free(*(void **)a1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
}

void *cc_malloc_clear(size_t a1)
{
  void *v2;
  void *v3;

  v2 = malloc_type_malloc(a1, 0xCB3BED47uLL);
  v3 = v2;
  if (v2)
    bzero(v2, a1);
  return v3;
}

uint64_t cczp_init_ws(uint64_t a1, _QWORD *a2)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;

  v4 = (_BYTE *)cczp_prime((uint64_t)a2);
  v5 = cczp_n((uint64_t)a2);
  if ((*v4 & 1) == 0 || ccn_n(v5, v4) == 1 && *(_QWORD *)v4 < 3uLL)
    return 4294967289;
  a2[2] = cczp_default_funcs;
  v7 = cczp_n((uint64_t)a2);
  v8 = (unint64_t *)cczp_prime((uint64_t)a2);
  a2[1] = ccn_bitlen(v7, v8);
  v9 = (2 - ((3 * *(_QWORD *)v4) ^ 2) * *(_QWORD *)v4) * ((3 * *(_QWORD *)v4) ^ 2);
  v10 = (2 - (2 - v9 * *(_QWORD *)v4) * v9 * *(_QWORD *)v4) * (2 - v9 * *(_QWORD *)v4) * v9;
  a2[*a2 + 3] = (v10 * *(_QWORD *)v4 - 2) * v10;
  v11 = cczp_n((uint64_t)a2);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v11);
  memset(&v13[v11], 255, 8 * v11);
  v14 = (uint64_t *)cczp_prime((uint64_t)a2);
  ccn_neg(v11, v13, v14);
  v15 = (char *)&a2[*a2 + 4];
  v16 = cczp_prime((uint64_t)a2);
  ccn_divmod_ws(a1, 2 * v11, (uint64_t)v13, 0, 0, v11, v15, v16);
  result = 0;
  *(_QWORD *)(a1 + 16) = v12;
  return result;
}

BOOL ccn_neg(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  if (a1)
  {
    v3 = a2;
    v4 = a1;
    do
    {
      v5 = *a3++;
      *v3++ = ~v5;
      --v4;
    }
    while (v4);
  }
  return ccn_add1_ws(0, a1, a2, a2, 1);
}

uint64_t cczp_mm_power_fast_ws(uint64_t a1, const void *a2, uint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v10 = cczp_n((uint64_t)a2);
  v11 = (unint64_t *)cczp_prime((uint64_t)a2);
  if ((ccn_cmp(v10, a4, v11) & 0x80000000) == 0)
    return 4294967289;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v10);
  v15 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v10);
  cc_clear(8 * (*(_QWORD *)(a1 + 16) - v13), (void *)(*(_QWORD *)a1 + 8 * v13));
  v16 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v10 + 4);
  v17 = cczp_n((uint64_t)a2);
  memcpy(v16, a2, 16 * v17 + 32);
  v16[2] = cczp_montgomery_funcs;
  cczp_mm_to_ws(a1, v16, v14, (uint64_t)a4);
  v12 = cczp_power_fast_ws(a1, (uint64_t)v16, v15, v14, a5);
  if (!(_DWORD)v12)
    cczp_mm_from_ws(a1, v16, a3, v15);
  *(_QWORD *)(a1 + 16) = v13;
  return v12;
}

uint64_t cczp_mm_to_ws(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t result;

  v8 = cczp_n((uint64_t)a2);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v8);
  ccn_mul_ws(a1, v8, (uint64_t)v10, a4, (uint64_t)&a2[*a2 + 4]);
  result = cczp_mm_redc_ws(a1, a2, a3, v10);
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

uint64_t cczp_mm_from_ws(uint64_t a1, _QWORD *a2, uint64_t *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;

  v8 = cczp_n((uint64_t)a2);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v8);
  if (v8)
    ccn_set(v8, v10, a4);
  ccn_zero(v8, &v10[8 * v8]);
  result = cczp_mm_redc_ws(a1, a2, a3, (uint64_t *)v10);
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

uint64_t ccrsa_pub_crypt_ws(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;

  v8 = a2 + 3;
  v9 = *a2;
  v10 = ccn_bitlen(*a2, (unint64_t *)&a2[2 * *a2 + 4]);
  if (v9)
    v11 = v10 >= 2;
  else
    v11 = 0;
  if (v11 && ((unint64_t)ccn_n(v9, v8) > 1 || *v8 >= 2uLL))
    return cczp_mm_power_fast_ws(a1, a2, a3, a4, &v8[2 * *a2 + 1]);
  else
    return 4294967268;
}

uint64_t ccec_x963_import_pub_ws(uint64_t a1, unint64_t *a2, uint64_t a3, unsigned __int8 *a4, unint64_t **a5)
{
  int v10;
  uint64_t result;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  if (!a3)
    return 4294967289;
  if (a3 == 1)
  {
    v10 = *a4;
    if (!*a4)
      return 4294967136;
  }
  else
  {
    v10 = *a4;
  }
  v12 = v10 - 2;
  if (v12 > 5 || ((0x37u >> v12) & 1) == 0)
    return 4294967289;
  v13 = dword_1DEE1D03C[(char)v12];
  v14 = *(_QWORD *)(a1 + 16);
  *a5 = a2;
  result = ccec_import_affine_point_ws(a1, a2, v13, a3, a4, (unint64_t *)a5 + 2);
  if (!(_DWORD)result)
  {
    ccn_seti(*a2, &a5[2 * **a5 + 2], 1);
    v15 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 3 * *a2);
    result = ccec_validate_point_and_projectify_ws(a1, (uint64_t *)a2, v15, (unint64_t *)a5 + 2);
  }
  *(_QWORD *)(a1 + 16) = v14;
  return result;
}

uint64_t ccec_import_affine_point_ws(uint64_t a1, unint64_t *a2, int a3, uint64_t a4, unsigned __int8 *a5, unint64_t *a6)
{
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t uint;
  unint64_t *v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unint64_t *v22;
  uint64_t v23;

  if (!a4)
    return 4294967289;
  v11 = *a2;
  if (a4 == 1 && !*a5)
    return 4294967136;
  switch(a3)
  {
    case 4:
      v12 = 4294967124;
      if (a4 != (unint64_t)(cczp_bitlen((uint64_t)a2) + 7) >> 3)
        return v12;
      goto LABEL_20;
    case 1:
      if ((((unint64_t)(cczp_bitlen((uint64_t)a2) + 7) >> 2) | 1) != a4)
        return 4294967126;
      v12 = 4294967126;
      if (*a5 != 4)
        return v12;
LABEL_20:
      v14 = *(_QWORD *)(a1 + 16);
      v15 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v11);
      if (a3 == 4)
        v16 = a5;
      else
        v16 = a5 + 1;
      v17 = cczp_bitlen((uint64_t)a2);
      uint = ccn_read_uint(v11, a6, (unint64_t)(v17 + 7) >> 3, v16);
      if ((_DWORD)uint)
        goto LABEL_38;
      if (ccn_cmp(v11, a6, a2 + 3) == -1)
      {
        if ((a3 - 3) <= 1)
        {
          uint = ccec_affine_point_from_x_ws(a1, a2, (uint64_t)a6, a6);
          if (!(_DWORD)uint)
          {
            cczp_negate((uint64_t)a2, v15, &a6[*a2]);
            v19 = &a6[*a2];
            if (a3 == 4)
              v20 = ccn_cmp(v11, (unint64_t *)v15, v19) >> 31;
            else
              LOBYTE(v20) = (*v19 & 1) != (*a5 & 1);
            ccn_mux(v11, v20, (uint64_t *)v19, v15, (uint64_t *)v19);
            goto LABEL_35;
          }
LABEL_38:
          v12 = uint;
          goto LABEL_36;
        }
        v21 = &a5[((unint64_t)(cczp_bitlen((uint64_t)a2) + 7) >> 3) + 1];
        v22 = &a6[*a2];
        v23 = cczp_bitlen((uint64_t)a2);
        v12 = ccn_read_uint(v11, v22, (unint64_t)(v23 + 7) >> 3, v21);
        if (!(_DWORD)v12)
        {
          if (a3 != 2 || (a6[*a2] & 1) == (*a5 & 1))
          {
LABEL_35:
            v12 = 0;
            goto LABEL_36;
          }
          v12 = 4294967125;
        }
      }
LABEL_36:
      *(_QWORD *)(a1 + 16) = v14;
      return v12;
    case 2:
      if ((((unint64_t)(cczp_bitlen((uint64_t)a2) + 7) >> 2) | 1) != a4)
        return 4294967125;
      v13 = *a5 - 8;
      v12 = 4294967125;
      goto LABEL_19;
  }
  if (a3 != 3)
    return 4294967289;
  if (ccec_compressed_x962_export_pub_size((uint64_t)a2) != a4)
    return 4294967135;
  v13 = *a5 - 4;
  v12 = 4294967135;
LABEL_19:
  if (v13 >= 0xFFFFFFFE)
    goto LABEL_20;
  return v12;
}

uint64_t cczp_bitlen(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t ccec_verify_digest_ws(uint64_t a1, unint64_t **a2, unint64_t a3, unsigned __int8 *a4, uint64_t a5, unsigned __int8 *a6, _QWORD *a7)
{
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t result;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C874D8];
  if (a7)
  {
    *a7 = 0;
    a7[1] = 0;
  }
  v19 = 0uLL;
  v13 = **a2;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v13);
  v16 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v13);
  if (ccder_decode_seqii(v13, v15, v16, a6, &a6[a5]) == &a6[a5])
  {
    result = ccec_verify_internal_ws(a1, a2, a3, a4, v15, v16, (uint64_t)&v19);
    if (a7 && !(_DWORD)result)
      *(_OWORD *)a7 = v19;
  }
  else
  {
    result = 4294967289;
  }
  *(_QWORD *)(a1 + 16) = v14;
  return result;
}

uint64_t ccec_verify_internal_ws(uint64_t a1, unint64_t **a2, unint64_t a3, unsigned __int8 *a4, unint64_t *a5, unint64_t *a6, uint64_t a7)
{
  return ccec_verify_internal_with_base_ws(a1, a2, a3, a4, a5, a6, (uint64_t)&(*a2)[2 * **a2 + 4 + **a2], a7);
}

unsigned __int8 *ccder_decode_seqii(unint64_t a1, _QWORD *a2, _QWORD *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  unsigned __int8 *v6[2];

  if (!a4)
    return 0;
  v6[0] = a4;
  v6[1] = a5;
  if (ccder_blob_decode_seqii(v6, a1, a2, a3))
    return v6[0];
  else
    return 0;
}

uint64_t ccder_blob_decode_seqii(unsigned __int8 **a1, unint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  unsigned __int8 *v8;
  unsigned __int8 *v9;

  v8 = 0;
  v9 = 0;
  result = ccder_blob_decode_sequence_tl(a1, &v8);
  if ((_DWORD)result)
  {
    result = ccder_blob_decode_uint(&v8, a2, a3);
    if ((_DWORD)result)
    {
      result = ccder_blob_decode_uint(&v8, a2, a4);
      if ((_DWORD)result)
        return v8 == v9;
    }
  }
  return result;
}

uint64_t ccder_blob_decode_sequence_tl(unsigned __int8 **a1, unsigned __int8 **a2)
{
  return ccder_blob_decode_range(a1, 0x2000000000000010, a2);
}

unsigned __int8 *ccder_decode_rsa_pub(unint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *result;
  unsigned __int8 *v8;
  unsigned __int8 *v9;

  v9 = a3;
  v4 = *a1;
  v5 = ccder_decode_constructed_tl(0x2000000000000010, &v9, a2, a3);
  v6 = ccder_decode_uint(v4, a1 + 3, v5, v9);
  result = ccder_decode_uint(v4, &a1[2 * *a1 + 4], v6, v9);
  if (result)
  {
    v8 = result;
    if (cczp_init(a1))
      return 0;
    else
      return v8;
  }
  return result;
}

unsigned __int8 *ccder_decode_uint(unint64_t a1, _QWORD *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unsigned __int8 *v5[2];

  if (!a3)
    return 0;
  v5[0] = a3;
  v5[1] = a4;
  if (ccder_blob_decode_uint(v5, a1, a2))
    return v5[0];
  else
    return 0;
}

unsigned __int8 *ccder_decode_rsa_pub_x509(unint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *result;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;

  v9 = a3;
  v4 = ccder_decode_constructed_tl(0x2000000000000010, &v9, a2, a3);
  v10 = 0;
  v11 = v9;
  v5 = ccder_decode_constructed_tl(0x2000000000000010, &v11, v4, v9);
  if (v5)
  {
    v6 = ccder_decode_oid(&v10, v5, v11);
    if (v6)
      v6 = ccder_decode_constructed_tl(5, &v11, v6, v11);
  }
  else
  {
    v6 = 0;
  }
  v11 = v9;
  result = ccder_decode_constructed_tl(3, &v11, v6, v9);
  if (result)
  {
    if (*result)
      v8 = result;
    else
      v8 = result + 1;
    return ccder_decode_rsa_pub(a1, v8, v11);
  }
  return result;
}

uint64_t ccder_blob_decode_uint(unsigned __int8 **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t result;
  unsigned __int8 *v6[2];

  v6[0] = 0;
  v6[1] = 0;
  result = ccder_blob_decode_range(a1, 2, v6);
  if ((_DWORD)result)
    return ccder_blob_decode_uint_range(v6, a2, a3);
  return result;
}

unsigned __int8 *ccder_decode_constructed_tl(uint64_t a1, unsigned __int8 **a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  int v5;
  unsigned __int8 *result;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9[2];

  *a2 = a3;
  if (!a3)
    return 0;
  v7 = 0;
  v8 = 0;
  v9[0] = a3;
  v9[1] = a4;
  v5 = ccder_blob_decode_range(v9, a1, &v7);
  result = 0;
  if (v5)
  {
    result = v7;
    *a2 = v8;
  }
  return result;
}

unsigned __int8 *ccder_decode_tl(uint64_t a1, unint64_t *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unsigned __int8 *v5[2];

  if (!a3)
    return 0;
  v5[0] = a3;
  v5[1] = a4;
  if (ccder_blob_decode_tl(v5, a1, a2))
    return v5[0];
  else
    return 0;
}

uint64_t ccder_blob_decode_tl(unsigned __int8 **a1, uint64_t a2, unint64_t *a3)
{
  return ccder_blob_decode_tl_internal(a1, a2, a3, 0);
}

unsigned __int8 *ccder_decode_tag(unint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4[2];

  if (!a2)
    return 0;
  v4[0] = a2;
  v4[1] = a3;
  if (ccder_blob_decode_tag(v4, a1))
    return v4[0];
  else
    return 0;
}

uint64_t ccder_blob_decode_range(unsigned __int8 **a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t result;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unint64_t v8;

  v8 = 0;
  result = ccder_blob_decode_tl_internal(a1, a2, &v8, 0);
  if ((_DWORD)result)
  {
    v6 = *a1;
    v7 = &(*a1)[v8];
    *a1 = v7;
    *a3 = v6;
    a3[1] = v7;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t ccder_blob_decode_tl_internal(unsigned __int8 **a1, uint64_t a2, unint64_t *a3, int a4)
{
  int v8;
  uint64_t result;
  unint64_t v10;

  v10 = 0;
  *a3 = 0;
  v8 = ccder_blob_decode_tag(a1, &v10);
  result = 0;
  if (v8 && v10 == a2)
  {
    if (a4)
      return ccder_blob_decode_len_strict(a1, a3);
    else
      return ccder_blob_decode_len(a1, a3);
  }
  return result;
}

uint64_t ccder_blob_decode_tag(unsigned __int8 **a1, unint64_t *a2)
{
  unsigned __int8 *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  v2 = *a1;
  v3 = (unint64_t)a1[1];
  if (*a1)
    v4 = (unint64_t)v2 >= v3;
  else
    v4 = 1;
  if (v4)
    return 0;
  v8 = *v2;
  v6 = v2 + 1;
  v7 = v8;
  v9 = v8 & 0x1F;
  if (v9 == 31)
  {
    v9 = 0;
    while (1)
    {
      v5 = 0;
      if ((unint64_t)v6 >= v3)
        break;
      v10 = v9;
      if (v9 >> 57)
        break;
      v11 = *v6++;
      v9 = v11 & 0x7F | (v9 << 7);
      if ((v11 & 0x80) == 0)
      {
        if (v10 >> 54)
          return 0;
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    *a2 = v9 | (v7 >> 5 << 61);
    *a1 = v6;
    return 1;
  }
  return v5;
}

uint64_t ccder_blob_decode_len_internal(unsigned __int8 **a1, unint64_t *a2, int a3)
{
  unint64_t v3;
  unsigned __int8 *v4;
  BOOL v5;
  unsigned __int8 *v7;
  unint64_t v8;
  uint64_t result;
  int v10;

  v4 = *a1;
  v3 = (unint64_t)a1[1];
  if (*a1)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (v5 || (unint64_t)v4 >= v3)
    goto LABEL_10;
  v7 = v4 + 1;
  v8 = *v4;
  if ((char)*v4 < 0)
  {
    switch(*v4)
    {
      case 0x81u:
        if ((uint64_t)(v3 - (_QWORD)v7) >= 1)
        {
          v7 = v4 + 2;
          v10 = (char)v4[1];
          v8 = v10;
          if (!a3 || v10 < 0)
            break;
        }
        goto LABEL_10;
      case 0x82u:
        if ((uint64_t)(v3 - (_QWORD)v7) >= 2)
        {
          v7 = v4 + 3;
          v8 = __rev16(*(unsigned __int16 *)(v4 + 1));
          if (!a3 || v8 >= 0x100)
            break;
        }
        goto LABEL_10;
      case 0x83u:
        if ((uint64_t)(v3 - (_QWORD)v7) >= 3)
        {
          v7 = v4 + 4;
          v8 = ((unint64_t)v4[1] << 16) | ((unint64_t)v4[2] << 8) | v4[3];
          if (!a3 || v8 >= 0x10000)
            break;
        }
        goto LABEL_10;
      case 0x84u:
        if ((uint64_t)(v3 - (_QWORD)v7) >= 4)
        {
          v7 = v4 + 5;
          v8 = bswap32(*(_DWORD *)(v4 + 1));
          if (!a3 || v8 >> 24)
            break;
        }
        goto LABEL_10;
      default:
        goto LABEL_10;
    }
  }
  if (v3 - (unint64_t)v7 < v8)
  {
LABEL_10:
    result = 0;
    *a2 = 0;
  }
  else
  {
    *a2 = v8;
    *a1 = v7;
    return 1;
  }
  return result;
}

uint64_t ccder_blob_decode_len(unsigned __int8 **a1, unint64_t *a2)
{
  return ccder_blob_decode_len_internal(a1, a2, 0);
}

BOOL ccder_blob_decode_uint_range(unsigned __int8 **a1, unint64_t a2, _QWORD *a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4 || (char)*v3 < 0)
    goto LABEL_7;
  if (!*v3)
  {
    if (++v3 == v4)
    {
      v3 = a1[1];
      goto LABEL_4;
    }
    if (((char)*v3 & 0x80000000) == 0)
    {
LABEL_7:
      v5 = 0;
      *a1 = 0;
      a1[1] = 0;
      return v5;
    }
  }
LABEL_4:
  *a1 = v3;
  return ccn_read_uint(a2, a3, v4 - v3, v3) == 0;
}

uint64_t ccn_read_uint(unint64_t a1, _QWORD *a2, unint64_t a3, unsigned __int8 *a4)
{
  char v4;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v22;

  v4 = 0;
  v22 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v22 = v4;
  v10 = 8 * a1;
  if (a3 > 8 * a1)
  {
    v11 = 0;
    v12 = a3 - v10;
    v13 = a4;
    do
    {
      v14 = *v13++;
      v11 |= v14;
      --a3;
    }
    while (a3 > v10);
    if (v11)
    {
      v15 = 4294967289;
      goto LABEL_24;
    }
    a4 += v12;
    a3 = 8 * a1;
  }
  if (a3 < 8)
  {
    v16 = 0;
  }
  else
  {
    v16 = ((a3 - 8) >> 3) + 1;
    v17 = a2;
    v18 = v16;
    do
    {
      *v17++ = bswap64(*(_QWORD *)&a4[a3 - 8]);
      a3 -= 8;
      --v18;
    }
    while (v18);
  }
  if (a3)
  {
    v19 = 0;
    v20 = -(uint64_t)a3;
    do
      v19 = a4[a3 + v20] | (v19 << 8);
    while (!__CFADD__(v20++, 1));
    a2[v16++] = v19;
  }
  if (v16 < a1)
    bzero(&a2[v16], v10 - 8 * v16);
  v15 = 0;
LABEL_24:
  cc_disable_dit(&v22);
  return v15;
}

_QWORD *ccn_p384_from_asm_ws(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4)
{
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C874D8];
  v8 = 0;
  v6 = 0u;
  v7 = 0u;
  v5 = 1;
  return ccn_mulmod_p384(a3, a4, &v5);
}

uint64_t ccn_p384_inv_asm_ws(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t result;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C874D8];
  v7 = *(_QWORD *)(a1 + 16);
  v8 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 6);
  v9 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 6);
  v10 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 6);
  ccn_mulmod_p384(v10, a4, a4);
  ccn_mulmod_p384(v9, v10, a4);
  ccn_mulmod_p384(v9, v9, v9);
  ccn_mulmod_p384(v9, v9, v9);
  ccn_mulmod_p384(v8, v9, a4);
  ccn_mulmod_p384(v9, v8, v10);
  v11 = 4;
  do
  {
    ccn_mulmod_p384(v9, v9, v9);
    --v11;
  }
  while (v11);
  ccn_mulmod_p384(v8, v8, v9);
  ccn_mulmod_p384(v9, v8, v10);
  v12 = 8;
  do
  {
    ccn_mulmod_p384(v9, v9, v9);
    --v12;
  }
  while (v12);
  ccn_mulmod_p384(v8, v8, v9);
  ccn_mulmod_p384(v9, v8, v10);
  v13 = 16;
  do
  {
    ccn_mulmod_p384(v9, v9, v9);
    --v13;
  }
  while (v13);
  ccn_mulmod_p384(v8, v8, v9);
  ccn_mulmod_p384(v9, v8, a4);
  ccn_mulmod_p384(v10, v9, a4);
  v14 = 32;
  do
  {
    ccn_mulmod_p384(v10, v10, v10);
    --v14;
  }
  while (v14);
  ccn_mulmod_p384(v9, v10, v9);
  v15 = 64;
  do
  {
    ccn_mulmod_p384(v10, v10, v10);
    --v15;
  }
  while (v15);
  ccn_mulmod_p384(v10, v10, v8);
  ccn_mulmod_p384(v8, v9, a4);
  v16 = 64;
  do
  {
    ccn_mulmod_p384(v8, v8, v8);
    --v16;
  }
  while (v16);
  ccn_mulmod_p384(v9, v8, v9);
  ccn_mulmod_p384(v8, v9, a4);
  v17 = 128;
  do
  {
    ccn_mulmod_p384(v8, v8, v8);
    --v17;
  }
  while (v17);
  ccn_mulmod_p384(v8, v8, v9);
  v18 = 128;
  do
  {
    ccn_mulmod_p384(v8, v8, v8);
    --v18;
  }
  while (v18);
  ccn_mulmod_p384(v9, v8, v10);
  ccn_mulmod_p384(v8, v9, a4);
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  v20 = 1;
  ccn_mulmod_p384(v8, v8, &v20);
  if (ccn_n(6, v8) == 1 && *v8 == 1)
  {
    ccn_set(6, a3, v9);
    result = 0;
  }
  else
  {
    result = 4294967254;
  }
  *(_QWORD *)(a1 + 16) = v7;
  return result;
}

uint64_t cczp_inv_field_ws(uint64_t a1, uint64_t a2, _QWORD *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t result;

  v8 = cczp_n(a2);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v8);
  v11 = (unint64_t *)cczp_prime(a2);
  if (ccn_sub1(v8, v10, v11, 2uLL))
    result = 0xFFFFFFFFLL;
  else
    result = cczp_power_fast_ws(a1, a2, a3, a4, v10);
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

uint64_t cczp_power_ws(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v12;
  unint64_t *v13;
  uint64_t result;
  _QWORD *v15;
  uint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;

  v12 = cczp_n(a2);
  v13 = (unint64_t *)cczp_prime(a2);
  if ((ccn_cmp(v12, a4, v13) & 0x80000000) == 0)
    return 4294967289;
  v19 = *(_QWORD *)(a1 + 16);
  v15 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4 * v12);
  v16 = (uint64_t *)(*(uint64_t (**)(uint64_t))(a1 + 24))(a1);
  v17 = (unint64_t *)cczp_prime(a2);
  ccn_sub1(v12, v15, v17, 1uLL);
  cczp_to_ws(a1, a2);
  ccn_set(v12, &v15[v12], a4);
  cczp_sqr_ws(a1, a2);
  cczp_mul_ws(a1, a2);
  ccn_set(v12, a3, v15);
  v18 = (a5 & 1) + a5;
  if (v18 >= 2)
  {
    do
    {
      cczp_sqr_ws(a1, a2);
      cczp_sqr_ws(a1, a2);
      ccn_mux(2 * v12, (*(_QWORD *)((char *)a6 + (((v18 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v18 - 1)) & 1, v16, &v15[2 * v12], v15);
      v18 -= 2;
      ccn_mux(v12, (*(_QWORD *)((char *)a6 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18) & 1, v16, &v16[v12], v16);
      cczp_mul_ws(a1, a2);
    }
    while (v18 > 1);
  }
  cczp_cond_negate(a2, (*a6 & 3) == 0, (uint64_t *)a3, (unint64_t *)a3);
  result = 0;
  *(_QWORD *)(a1 + 16) = v19;
  return result;
}

uint64_t cczp_mm_mul_ws(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t result;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = cczp_n((uint64_t)a2);
  v12 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v11);
  ccn_mul_ws(a1, v11, (uint64_t)v12, a4, a5);
  result = cczp_mm_redc_ws(a1, a2, a3, v12);
  *(_QWORD *)(a1 + 16) = v10;
  return result;
}

uint64_t cczp_power_fast_ws(uint64_t a1, uint64_t a2, _QWORD *a3, void *a4, unint64_t *a5)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;

  v10 = cczp_n(a2);
  v11 = ccn_bitlen(v10, a5);
  if (v11)
  {
    v12 = v11;
    v17 = *(_QWORD *)(a1 + 16);
    v13 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 3 * v10);
    ccn_set(v10, v13, a4);
    cczp_sqr_ws(a1, a2);
    cczp_mul_ws(a1, a2);
    v14 = (*(unint64_t *)((char *)a5 + (((v12 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v12 - 1)) & 1;
    if ((v12 & 1) == 0)
      v14 = (*(unint64_t *)((char *)a5 + (((v12 - 2) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v12 - 2)) & 1 | (2 * v14);
    ccn_set(v10, a3, &v13[8 * (v14 - 1) * v10]);
    if ((v12 | 0xFFFFFFFFFFFFFFFELL) + v12)
    {
      v15 = v12 + (v12 | 0xFFFFFFFFFFFFFFFELL) - 1;
      do
      {
        cczp_sqr_ws(a1, a2);
        cczp_sqr_ws(a1, a2);
        if ((*(unint64_t *)((char *)a5 + (((v15 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v15 - 1)) & 1 | (2 * ((*(unint64_t *)((char *)a5 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15) & 1)))
          cczp_mul_ws(a1, a2);
        v15 -= 2;
      }
      while (v15 != -1);
    }
    *(_QWORD *)(a1 + 16) = v17;
  }
  else
  {
    ccn_seti(v10, a3, 1);
    cczp_to_ws(a1, a2);
  }
  return 0;
}

uint64_t cczp_mm_sqr_ws(uint64_t a1, _QWORD *a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t result;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = cczp_n((uint64_t)a2);
  v10 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * v9);
  ccn_sqr_ws(a1, v9, v10, a4);
  result = cczp_mm_redc_ws(a1, a2, a3, v10);
  *(_QWORD *)(a1 + 16) = v8;
  return result;
}

uint64_t ccder_sizeof_raw_octet_string(uint64_t a1)
{
  return ccder_sizeof_implicit_raw_octet_string(4, a1);
}

void *ccsha256_di()
{
  return &ccsha256_vng_arm_di;
}

uint64_t ccz_size()
{
  char v0;
  char v7;

  v0 = 0;
  v7 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v0 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v0 = 1;
    }
  }
  v7 = v0;
  cc_disable_dit(&v7);
  return 32;
}

uint64_t ccec_import_pub(unint64_t *a1, uint64_t a2, unsigned __int8 *a3, unint64_t **a4)
{
  char v4;
  uint64_t v10;
  char v12;

  v4 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v12 = v4;
  v10 = ccec_x963_import_pub(a1, a2, a3, a4);
  cc_disable_dit(&v12);
  return v10;
}

_BYTE *ccz_muli(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  char v5;
  _QWORD v12[4];
  char v13;
  _QWORD v14[2];

  v5 = 0;
  v14[1] = *MEMORY[0x1E0C874D8];
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v13 = v5;
  v14[0] = a3;
  v12[0] = ccn_n(1, v14);
  v12[1] = 0;
  v12[2] = 1;
  v12[3] = v14;
  ccz_mul(a1, a2, (uint64_t)v12);
  return cc_disable_dit(&v13);
}

_BYTE *ccz_mul(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char v6;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char v30;

  v6 = 0;
  v30 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v30 = v6;
  v12 = ccz_sign(a2);
  v13 = ccz_sign(a3);
  ccz_set_sign((uint64_t)a1, v13 * v12);
  v14 = ccz_n(a2);
  v15 = ccz_n(a3);
  if (v14 <= v15)
    v14 = v15;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  ccz_init(*(_QWORD *)(a2 + 8), (uint64_t)&v28);
  ccz_init(*(_QWORD *)(a2 + 8), (uint64_t)&v26);
  ccz_set_capacity((uint64_t)&v28, v14);
  ccz_set_capacity((uint64_t)&v26, v14);
  v16 = (char *)*((_QWORD *)&v29 + 1);
  v17 = ccz_n(a2);
  v18 = v17;
  if (v17)
    ccn_set(v17, v16, *(void **)(a2 + 24));
  ccn_zero(v14 - v18, &v16[8 * v18]);
  v19 = (char *)*((_QWORD *)&v27 + 1);
  v20 = ccz_n(a3);
  v21 = v20;
  if (v20)
    ccn_set(v20, v19, *(void **)(a3 + 24));
  ccn_zero(v14 - v21, &v19[8 * v21]);
  ccz_set_capacity((uint64_t)a1, 2 * v14);
  ccn_mul(v14, a1[3], *((uint64_t *)&v27 + 1), *((uint64_t *)&v29 + 1));
  v22 = ccz_n(a2);
  v23 = ccz_n(a3);
  v24 = ccn_n(v23 + v22, a1[3]);
  ccz_set_n(a1, v24);
  ccz_free((uint64_t)&v28);
  ccz_free((uint64_t)&v26);
  return cc_disable_dit(&v30);
}

BOOL ccoid_equal(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  const void *v13;
  char v15;

  v3 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v15 = v3;
  if (a1 | a2)
  {
    v9 = 0;
    if (a1 && a2)
    {
      v10 = *(unsigned __int8 *)(a1 + 1);
      if ((_DWORD)v10 == *(unsigned __int8 *)(a2 + 1))
      {
        v11 = v10 + 2;
        v12 = (const void *)((uint64_t (*)(void))ccoid_payload)();
        v13 = (const void *)ccoid_payload(a2);
        v9 = memcmp(v12, v13, v11) == 0;
      }
      else
      {
        v9 = 0;
      }
    }
  }
  else
  {
    v9 = 1;
  }
  cc_disable_dit(&v15);
  return v9;
}

uint64_t ccrng_uniform(uint64_t (**a1)(_QWORD, uint64_t, unint64_t *), unint64_t a2, unint64_t *a3)
{
  char v6;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v17;

  v6 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v17 = v6;
  if (a2)
  {
    v12 = 0xFFFFFFFFFFFFFFFFLL >> __clz(a2);
    while (1)
    {
      v13 = (*a1)(a1, 8, a3);
      if ((_DWORD)v13)
        break;
      v14 = *a3 & v12;
      *a3 = v14;
      if (v14 < a2)
      {
        v15 = 0;
        goto LABEL_10;
      }
    }
    v15 = v13;
  }
  else
  {
    v15 = 4294967289;
  }
  cc_clear(8uLL, a3);
LABEL_10:
  cc_disable_dit(&v17);
  return v15;
}

_BYTE *ccz_sub(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  char v21;

  v6 = 0;
  v21 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v21 = v6;
  v12 = ccz_n(a2);
  v13 = ccz_n(a3);
  v14 = ccz_sign(a2);
  if (v14 == ccz_sign(a3))
  {
    v15 = ccn_cmpn(v12, *(unint64_t **)(a2 + 24), v13, *(unint64_t **)(a3 + 24));
    v16 = ccz_sign(a2);
    if (v15 < 0)
    {
      ccz_set_sign(a1, -v16);
      ccz_set_capacity(a1, v13);
      ccn_subn(v13, *(_QWORD **)(a1 + 24), *(uint64_t **)(a3 + 24), v12, *(unint64_t **)(a2 + 24));
      v12 = v13;
    }
    else
    {
      ccz_set_sign(a1, v16);
      ccz_set_capacity(a1, v12);
      ccn_subn(v12, *(_QWORD **)(a1 + 24), *(uint64_t **)(a2 + 24), v13, *(unint64_t **)(a3 + 24));
    }
  }
  else
  {
    v17 = ccz_sign(a2);
    ccz_set_sign(a1, v17);
    if (v12 >= v13)
    {
      v18 = v12 + 1;
      ccz_set_capacity(a1, v12 + 1);
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v12) = ccn_addn(v12, *(_QWORD **)(a1 + 24), *(uint64_t **)(a2 + 24), v13, *(uint64_t **)(a3 + 24));
    }
    else
    {
      v18 = v13 + 1;
      ccz_set_capacity(a1, v13 + 1);
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v13) = ccn_addn(v13, *(_QWORD **)(a1 + 24), *(uint64_t **)(a3 + 24), v12, *(uint64_t **)(a2 + 24));
    }
    v12 = v18;
  }
  v19 = ccn_n(v12, *(_QWORD *)(a1 + 24));
  ccz_set_n((_QWORD *)a1, v19);
  return cc_disable_dit(&v21);
}

uint64_t ccz_cmp(uint64_t a1, uint64_t a2)
{
  char v4;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  char v18;

  v4 = 0;
  v18 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v18 = v4;
  v10 = ccz_sign(a1);
  if (v10 == ccz_sign(a2))
  {
    v11 = ccz_n(a1);
    v12 = *(unint64_t **)(a1 + 24);
    v13 = ccz_n(a2);
    v14 = ccn_cmpn(v11, v12, v13, *(unint64_t **)(a2 + 24));
    v15 = ccz_sign(a1) * v14;
  }
  else if (ccz_n(a2) || ccz_n(a1))
  {
    v16 = ccz_sign(a1);
    if (v16 < (int)ccz_sign(a2))
      v15 = 0xFFFFFFFFLL;
    else
      v15 = 1;
  }
  else
  {
    v15 = 0;
  }
  cc_disable_dit(&v18);
  return v15;
}

uint64_t ccz_sign(uint64_t a1)
{
  return (*(int *)(a1 + 16) >> 31) | 1u;
}

uint64_t ccn_cmpn(unint64_t a1, unint64_t *a2, unint64_t a3, unint64_t *a4)
{
  char v4;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  char v17;

  v4 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v17 = v4;
  if (a1 >= a3)
    v10 = a3;
  else
    v10 = a1;
  if (a1 >= a3)
    v11 = a2;
  else
    v11 = a4;
  if (a1 <= a3)
    v12 = a3;
  else
    v12 = a1;
  if (a1 < a3)
    v13 = -1;
  else
    v13 = 1;
  v14 = ccn_cmp(v10, a2, a4);
  if (ccn_n(v12 - v10, &v11[v10]))
    v15 = v13;
  else
    v15 = v14;
  cc_disable_dit(&v17);
  return v15;
}

uint64_t ccn_cmp(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  char v3;
  uint64_t v9;
  char v11;

  v3 = 0;
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v11 = v3;
  v9 = ccn_cmp_asm(a1, a2, a3);
  cc_disable_dit(&v11);
  return v9;
}

uint64_t ccn_cmp_asm(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  if (result)
  {
    v3 = result;
    result = 0;
    do
    {
      v5 = *a2++;
      v4 = v5;
      v6 = *a3++;
      v7 = v4 >= v6;
      if (v4 > v6)
        result = 1;
      if (!v7)
        result = -1;
    }
    while (v3-- > 1);
  }
  return result;
}

unint64_t cczp_inv_update_ws(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v13;
  int8x16_t *v14;
  char *v15;
  unint64_t v16;
  uint64_t v19;

  v19 = *(_QWORD *)(a1 + 16);
  v13 = a2 + 1;
  v14 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, a2 + 1);
  v15 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v13);
  if (a2)
    ccn_set(a2, v14, a4);
  ccn_zero(1, (char *)v14 + 8 * a2);
  ccn_cond_neg(v13, a5 < 0, v14->i64, v14->i64);
  if (a2)
    ccn_set(a2, v15, a6);
  ccn_zero(1, &v15[8 * a2]);
  ccn_cond_neg(v13, a7 < 0, (uint64_t *)v15, (uint64_t *)v15);
  ccn_mul1(v13, v14, v14, (a5 ^ (a5 >> 63)) + ((unint64_t)a5 >> 63));
  ccn_addmul1(v13, v14, v15, (a7 ^ (a7 >> 63)) + ((unint64_t)a7 >> 63));
  v16 = (unint64_t)v14->i64[a2] >> 63;
  ccn_cond_neg(v13, v14->i64[a2] < 0, v14->i64, v14->i64);
  ccn_shift_right(v13, v14, v14, 31);
  ccn_set(a2, a3, v14);
  *(_QWORD *)(a1 + 16) = v19;
  return v16;
}

void *ccn_set(uint64_t a1, void *__dst, void *__src)
{
  return memmove(__dst, __src, 8 * a1);
}

uint64_t ccn_cond_neg(uint64_t a1, char a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;

  result = ccn_mux_next_mask();
  v9 = __ROR8__(0x5555555555555555, a2 | (2 * result));
  if (a1)
  {
    v10 = 1;
    do
    {
      v12 = *a4++;
      v11 = v12;
      v13 = v10 + ~v12;
      v10 = __CFADD__(v10, ~v12);
      v14 = v11 ^ v13;
      v15 = v11 ^ result;
      *a3 = v15;
      *a3++ = v14 & v9 ^ v14 & 0x5555555555555555 ^ v15 ^ result;
      --a1;
    }
    while (a1);
  }
  return result;
}

uint64_t ccdrbg_generate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v6;
  uint64_t v12;
  char v14;

  v6 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v14 = v6;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 24))(a2, a3, a4, a5, a6);
  cc_disable_dit(&v14);
  return v12;
}

uint64_t generate(uint64_t a1, unint64_t a2, char *__dst)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;

  if (!a2)
    return 0;
  v6 = 0;
  v7 = a1 + 96;
  v8 = a1 + 192;
  v9 = *(_QWORD *)(a1 + 184);
  while (v9 + a2 - v6 > 0xFFF)
  {
    if (v9 > 0xFFF)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32))(v7, 4096, v8, 0, 0);
      v9 = 0;
      if ((_DWORD)result)
        return result;
    }
    else
    {
      v10 = 4096 - v9;
      memcpy(__dst, (const void *)(v8 + v9), 4096 - v9);
      __dst += v10;
      v6 += v10;
      v9 = *(_QWORD *)(a1 + 184) + v10;
    }
    *(_QWORD *)(a1 + 184) = v9;
    if (v6 >= a2)
      return 0;
  }
  memcpy(__dst, (const void *)(v8 + v9), a2 - v6);
  result = 0;
  *(_QWORD *)(a1 + 184) += a2 - v6;
  return result;
}

uint64_t generate_0()
{
  uint64_t result;

  result = process_rng_ctx();
  if ((_DWORD)result)
    cc_abort();
  return result;
}

uint64_t generate_1(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a1 + 8);
}

uint64_t generate_2(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  _BYTE *v19;
  rsize_t v20;
  uint64_t v22;
  _BYTE v23[16];
  _BYTE __s[48];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C874D8];
  ccctr_context_size(*(uint64_t **)(a1 + 56));
  MEMORY[0x1E0C86820]();
  v14 = &v23[-v13 - 8];
  if (a2 > 0x10000)
    goto LABEL_22;
  if (*(_DWORD *)(a1 + 72) && *(_QWORD *)(a1 + 48) > 0x1000000000000uLL)
  {
    v16 = 4294967234;
    goto LABEL_21;
  }
  if (!a4)
    goto LABEL_12;
  if (*(_QWORD *)(a1 + 80))
  {
    if (a4 <= 0x10000)
    {
      v15 = derive(a1, __s, 1u, v8, v9, v10, v11, v12, a4);
      if ((_DWORD)v15)
      {
        v16 = v15;
        goto LABEL_21;
      }
      goto LABEL_11;
    }
LABEL_22:
    v16 = 4294967233;
    goto LABEL_21;
  }
  if (*(_QWORD *)(a1 + 64) + 16 < a4)
    goto LABEL_22;
  cc_clear(0x30uLL, __s);
  __memcpy_chk();
LABEL_11:
  update(a1, (uint64_t)__s);
LABEL_12:
  v22 = (uint64_t)&v22;
  inc_uint(a1 + 40, 8uLL);
  ccctr_init(*(_QWORD *)(a1 + 56));
  for (i = -(int)a2 & 0xFLL; a2; a2 -= v18)
  {
    if (a2 >= 0x80)
      v18 = 128;
    else
      v18 = a2;
    ccctr_update(*(_QWORD *)(a1 + 56), (uint64_t)v14, v18, (uint64_t)&zeros, a3);
    a3 += v18;
  }
  ccctr_update(*(_QWORD *)(a1 + 56), (uint64_t)v14, i, (uint64_t)&zeros, (uint64_t)v23);
  cc_clear(i, v23);
  if (a4)
    v19 = __s;
  else
    v19 = &zeros;
  update_with_ctr(a1, (uint64_t)v14, (uint64_t)v19);
  v20 = ccctr_context_size(*(uint64_t **)(a1 + 56));
  cc_clear(v20, v14);
  v16 = 0;
  ++*(_QWORD *)(a1 + 48);
LABEL_21:
  cc_clear(0x30uLL, __s);
  return v16;
}

uint64_t generate_4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ccdrbg_generate(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a2, a3, 0, 0);
}

uint64_t generate_5(size_t ***a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t *v8;
  size_t v9;
  uint64_t v10;
  char *v12;
  unint64_t v13;
  size_t v15;
  char __s[64];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C874D8];
  v8 = **a1;
  v9 = *v8;
  v10 = 4294967233;
  if (a2 <= 0x10000 && a4 < 0x10001)
  {
    v12 = (char *)a3;
    v13 = a2;
    if (*((_DWORD *)*a1 + 2) && (unint64_t)a1[17] > 0x1000000000000)
    {
      v10 = 4294967234;
    }
    else
    {
      if (a4)
        update_1(a1, 1, a3, a4, a5, a6, a7, a8, a4);
      for (; v13; v13 -= v15)
      {
        __memcpy_chk();
        cchmac((uint64_t)v8, v9, (uint64_t)(a1 + 1), v9, (char *)a1 + 72, (uint64_t)(a1 + 9));
        if (!cc_cmp_safe(v9, __s, (char *)a1 + 72))
        {
          cc_clear(0x40uLL, a1 + 1);
          cc_clear(0x40uLL, a1 + 9);
          a1[17] = (size_t **)-1;
          cc_try_abort();
        }
        if (v13 >= v9)
          v15 = v9;
        else
          v15 = v13;
        memcpy(v12, a1 + 9, v15);
        v12 += v15;
      }
      update_1(a1, 1, a3, a4, a5, a6, a7, a8, a4);
      v10 = 0;
      a1[17] = (size_t **)((char *)a1[17] + 1);
    }
  }
  cc_clear(v9, __s);
  return v10;
}

uint64_t ccctr_update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5;
  uint64_t v11;
  char v13;

  v5 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v13 = v5;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 40))(a2, a3, a4, a5);
  cc_disable_dit(&v13);
  return v11;
}

uint64_t ccaes_vng_ctr_crypt(_QWORD *a1, unint64_t a2, int8x16_t *a3, int8x16_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  int8x16_t *v14;
  int8x16_t *v15;
  _QWORD *v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;

  v7 = a1[1];
  if (a2)
  {
    v10 = a2;
    v11 = *a1;
    v12 = (unint64_t)(*(_QWORD *)(*a1 + 8) + 7) >> 3;
    v13 = a1 + 2;
    v14 = (int8x16_t *)&a1[2 * v12 + 2];
    v15 = (int8x16_t *)&a1[v12 + 2];
    v16 = &a1[v12];
    while (1)
    {
      if (v7 == 16)
      {
        if (v10 >= 0x10)
        {
          aes_ctr_crypt(a3, a4, v10 & 0xFFFFFFFFFFFFFFF0, v15, v14, a6);
          a4 = (int8x16_t *)((char *)a4 + (v10 & 0xFFFFFFFFFFFFFFF0));
          a3 = (int8x16_t *)((char *)a3 + (v10 & 0xFFFFFFFFFFFFFFF0));
          v10 &= 0xFu;
        }
        (*(void (**)(int8x16_t *, uint64_t, int8x16_t *, _QWORD *))(v11 + 24))(v14, 1, v15, a1 + 2);
        v17 = 31;
        do
        {
          if ((unint64_t)(v17 - 15) < 9)
            break;
          v18 = (*((_BYTE *)v16 + v17--))++ + 1;
        }
        while ((v18 & 0x100) != 0);
        v7 = 0;
        v19 = 0;
        if (!v10)
          break;
      }
      v20 = 0;
      do
      {
        v21 = v20 + 1;
        a4->i8[v20] = *((_BYTE *)v13 + v7 + v20) ^ a3->i8[v20];
        v22 = (unint64_t)(v20 + 1 + v7) > 0xF || v10 - 1 == v20;
        ++v20;
      }
      while (!v22);
      v7 += v21;
      a3 = (int8x16_t *)((char *)a3 + v21);
      a4 = (int8x16_t *)((char *)a4 + v21);
      v10 -= v21;
      if (!v10)
        goto LABEL_17;
    }
  }
  else
  {
LABEL_17:
    v19 = v7;
  }
  a1[1] = v19;
  return 0;
}

_BYTE *ccdigest(uint64_t a1, size_t a2, char *a3, uint64_t a4)
{
  char v8;
  uint64_t v14;
  _QWORD *v15;
  _BYTE v17[7];
  char v18;
  uint64_t v19;

  v8 = 0;
  v19 = *MEMORY[0x1E0C874D8];
  v18 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v18 = v8;
  MEMORY[0x1E0C86820]();
  v15 = &v17[-v14];
  ccdigest_init(a1, &v17[-v14]);
  ccdigest_update(a1, v15, a2, a3);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(a1 + 56))(a1, v15, a4);
  cc_clear(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) + 12, v15);
  return cc_disable_dit(&v18);
}

_BYTE *ccdigest_init(uint64_t a1, _QWORD *a2)
{
  char v4;
  char v11;

  v4 = 0;
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v11 = v4;
  memcpy(a2 + 1, *(const void **)(a1 + 40), *(_QWORD *)(a1 + 8));
  *a2 = 0;
  *(_DWORD *)((char *)a2 + *(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) + 8) = 0;
  return cc_disable_dit(&v11);
}

_BYTE *ccdigest_update(uint64_t a1, _QWORD *a2, size_t a3, char *__src)
{
  size_t v5;
  char v8;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  size_t v20;
  size_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  char v29;

  v5 = a3;
  v8 = 0;
  v29 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v29 = v8;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = (uint64_t)a2 + *(_QWORD *)(a1 + 8) + 8;
  if (v13 <= *(unsigned int *)(v14 + v13))
    *(_DWORD *)(v14 + v13) = 0;
  if (a3)
  {
    v15 = a2 + 1;
    do
    {
      v16 = *(_QWORD *)(a1 + 16);
      v17 = (char *)v15 + *(_QWORD *)(a1 + 8);
      v18 = *(unsigned int *)&v17[v16];
      if (v5 > v16 && (_DWORD)v18 == 0)
      {
        if (v16 == 128)
        {
          v27 = v5 >> 7;
          v21 = v5 & 0xFFFFFFFFFFFFFF80;
        }
        else if (v16 == 64)
        {
          v27 = v5 >> 6;
          v21 = v5 & 0xFFFFFFFFFFFFFFC0;
        }
        else
        {
          v27 = v5 / v16;
          v21 = v5 / v16 * v16;
        }
        (*(void (**)(_QWORD *, size_t, char *))(a1 + 48))(a2 + 1, v27, __src);
        *a2 += 8 * v21;
      }
      else
      {
        v20 = v16 - v18;
        if (v20 >= v5)
          v21 = v5;
        else
          v21 = v20;
        memcpy(&v17[v18], __src, v21);
        v22 = *(_QWORD *)(a1 + 16);
        v23 = (char *)v15 + *(_QWORD *)(a1 + 8);
        v24 = (*(_DWORD *)&v23[v22] + v21);
        *(_DWORD *)&v23[v22] = v24;
        if (v22 == v24)
        {
          (*(void (**)(_QWORD *, uint64_t))(a1 + 48))(a2 + 1, 1);
          v25 = *(_QWORD *)(a1 + 16);
          v26 = (char *)v15 + *(_QWORD *)(a1 + 8);
          *a2 += (8 * *(_DWORD *)&v26[v25]);
          *(_DWORD *)&v26[v25] = 0;
        }
      }
      __src += v21;
      v5 -= v21;
    }
    while (v5);
  }
  return cc_disable_dit(&v29);
}

_BYTE *cc_disable_dit(_BYTE *result)
{
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if (*result)
      __asm { MSR             DIT, #0 }
  }
  return result;
}

uint64_t ccdigest_final_64be(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  const void *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C874D8];
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = a2 + v6 + 8;
  if (v5 <= *(unsigned int *)(v7 + v5))
    *(_DWORD *)(v7 + v5) = 0;
  MEMORY[0x1E0C86820]();
  v9 = (_QWORD *)((char *)v21 - v8);
  memcpy((char *)v21 - v8, v11, v10 + 12);
  v12 = (char *)v9 + v6;
  v13 = (uint64_t)v9 + v6 + 8;
  v14 = (char *)(v13 + v5);
  v15 = *(unsigned int *)(v13 + v5);
  *v9 += (8 * v15);
  *(_DWORD *)(v13 + v5) = v15 + 1;
  *(_BYTE *)(v13 + v15) = 0x80;
  v16 = *(unsigned int *)(v13 + v5);
  if (v16 < 0x39)
  {
    if (v16 == 56)
      goto LABEL_9;
  }
  else
  {
    if (v16 <= 0x3F)
    {
      do
      {
        *(_DWORD *)v14 = v16 + 1;
        *(_BYTE *)(v13 + v16) = 0;
        v16 = *(unsigned int *)v14;
      }
      while (v16 < 0x40);
    }
    (*(void (**)(unint64_t *, uint64_t))(a1 + 48))(v9 + 1, 1);
    v16 = 0;
    v12 = (char *)v9 + *(_QWORD *)(a1 + 8);
    v13 = (uint64_t)(v12 + 8);
    v14 = &v12[*(_QWORD *)(a1 + 16) + 8];
    *(_DWORD *)v14 = 0;
  }
  do
  {
    *(_DWORD *)v14 = v16 + 1;
    *(_BYTE *)(v13 + v16) = 0;
    v16 = *(unsigned int *)v14;
  }
  while (v16 < 0x38);
LABEL_9:
  *((_QWORD *)v12 + 8) = bswap64(*v9);
  (*(void (**)(unint64_t *, uint64_t))(a1 + 48))(v9 + 1, 1);
  if (*(_QWORD *)a1 >= 4uLL)
  {
    v17 = 0;
    v18 = 0;
    v19 = 1;
    do
    {
      *(_DWORD *)(a3 + v17) = bswap32(*((_DWORD *)v9 + v18 + 2));
      v18 = v19++;
      v17 += 4;
    }
    while (v18 < *(_QWORD *)a1 >> 2);
  }
  return cc_clear(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) + 12, v9);
}

uint64_t cc_clear(rsize_t __n, void *__s)
{
  return memset_s(__s, __n, 0, __n);
}

int32x4_t *AccelerateCrypto_SHA1_compress(int32x4_t *result, uint64_t a2, int8x16_t *a3)
{
  int32x4_t v3;
  int8x16_t *v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int32x4_t *v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t *v12;
  BOOL v105;
  uint64_t i;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;

  if (a2)
  {
    v5 = *a3;
    v6 = a3[1];
    v7 = a3[2];
    v8 = a3[3];
    v4 = a3 + 4;
    v10 = *result;
    v9 = result + 1;
    v11 = v10;
    v10.i32[0] = v9->i32[0];
    v12 = v9 - 1;
    v3.i32[0] = v10.i32[0];
    _Q1 = (int32x4_t)vrev32q_s8(v6);
    _Q2 = (int32x4_t)vrev32q_s8(v7);
    _Q3 = (int32x4_t)vrev32q_s8(v8);
    _Q4 = vaddq_s32((int32x4_t)vrev32q_s8(v5), *(int32x4_t *)K_XMM_AR);
    _Q5 = vaddq_s32(_Q1, *(int32x4_t *)K_XMM_AR);
    _Q19 = v3;
    _Q6 = vaddq_s32(_Q2, *(int32x4_t *)K_XMM_AR);
    _Q7 = vaddq_s32(_Q3, *(int32x4_t *)K_XMM_AR);
    __asm { SHA1SU0         V0.4S, V1.4S, V2.4S }
    _S20 = v11.i32[0];
    __asm
    {
      SHA1C           Q18, S19, V4.4S
      SHA1H           S19, S20
      SHA1SU1         V0.4S, V3.4S
    }
    _Q4 = vaddq_s32(_Q0, *(int32x4_t *)K_XMM_AR);
    __asm { SHA1SU0         V1.4S, V2.4S, V3.4S }
    _S20 = _Q18;
    __asm
    {
      SHA1C           Q18, S19, V5.4S
      SHA1H           S19, S20
      SHA1SU1         V1.4S, V0.4S
    }
    _Q5 = vaddq_s32(_Q1, *(int32x4_t *)&K_XMM_AR[2]);
    __asm { SHA1SU0         V2.4S, V3.4S, V0.4S }
    _S20 = _Q18;
    __asm
    {
      SHA1C           Q18, S19, V6.4S
      SHA1H           S19, S20
      SHA1SU1         V2.4S, V1.4S
    }
    _Q6 = vaddq_s32(_Q2, *(int32x4_t *)&K_XMM_AR[2]);
    __asm { SHA1SU0         V3.4S, V0.4S, V1.4S }
    _S20 = _Q18;
    __asm
    {
      SHA1C           Q18, S19, V7.4S
      SHA1H           S19, S20
      SHA1SU1         V3.4S, V2.4S
    }
    _Q7 = vaddq_s32(_Q3, *(int32x4_t *)&K_XMM_AR[2]);
    __asm { SHA1SU0         V0.4S, V1.4S, V2.4S }
    _S20 = _Q18;
    __asm
    {
      SHA1C           Q18, S19, V4.4S
      SHA1H           S19, S20
      SHA1SU1         V0.4S, V3.4S
    }
    _Q4 = vaddq_s32(_Q0, *(int32x4_t *)&K_XMM_AR[2]);
    __asm { SHA1SU0         V1.4S, V2.4S, V3.4S }
    _S20 = _Q18;
    __asm
    {
      SHA1P           Q18, S19, V5.4S
      SHA1H           S19, S20
      SHA1SU1         V1.4S, V0.4S
    }
    _Q5 = vaddq_s32(_Q1, *(int32x4_t *)&K_XMM_AR[2]);
    __asm { SHA1SU0         V2.4S, V3.4S, V0.4S }
    _S20 = _Q18;
    __asm
    {
      SHA1P           Q18, S19, V6.4S
      SHA1H           S19, S20
      SHA1SU1         V2.4S, V1.4S
    }
    _Q6 = vaddq_s32(_Q2, *(int32x4_t *)&K_XMM_AR[4]);
    __asm { SHA1SU0         V3.4S, V0.4S, V1.4S }
    _S20 = _Q18;
    __asm
    {
      SHA1P           Q18, S19, V7.4S
      SHA1H           S19, S20
      SHA1SU1         V3.4S, V2.4S
    }
    _Q7 = vaddq_s32(_Q3, *(int32x4_t *)&K_XMM_AR[4]);
    __asm { SHA1SU0         V0.4S, V1.4S, V2.4S }
    _S20 = _Q18;
    __asm
    {
      SHA1P           Q18, S19, V4.4S
      SHA1H           S19, S20
      SHA1SU1         V0.4S, V3.4S
    }
    _Q4 = vaddq_s32(_Q0, *(int32x4_t *)&K_XMM_AR[4]);
    __asm { SHA1SU0         V1.4S, V2.4S, V3.4S }
    _S20 = _Q18;
    __asm
    {
      SHA1P           Q18, S19, V5.4S
      SHA1H           S19, S20
      SHA1SU1         V1.4S, V0.4S
    }
    _Q5 = vaddq_s32(_Q1, *(int32x4_t *)&K_XMM_AR[4]);
    __asm { SHA1SU0         V2.4S, V3.4S, V0.4S }
    _S20 = _Q18;
    __asm
    {
      SHA1M           Q18, S19, V6.4S
      SHA1H           S19, S20
      SHA1SU1         V2.4S, V1.4S
    }
    _Q6 = vaddq_s32(_Q2, *(int32x4_t *)&K_XMM_AR[4]);
    __asm { SHA1SU0         V3.4S, V0.4S, V1.4S }
    _S20 = _Q18;
    __asm
    {
      SHA1M           Q18, S19, V7.4S
      SHA1H           S19, S20
      SHA1SU1         V3.4S, V2.4S
    }
    _Q7 = vaddq_s32(_Q3, loc_1DEDC93B0);
    __asm { SHA1SU0         V0.4S, V1.4S, V2.4S }
    _S20 = _Q18;
    __asm
    {
      SHA1M           Q18, S19, V4.4S
      SHA1H           S19, S20
      SHA1SU1         V0.4S, V3.4S
    }
    _Q4 = vaddq_s32(_Q0, loc_1DEDC93B0);
    __asm { SHA1SU0         V1.4S, V2.4S, V3.4S }
    _S20 = _Q18;
    __asm
    {
      SHA1M           Q18, S19, V5.4S
      SHA1H           S19, S20
      SHA1SU1         V1.4S, V0.4S
    }
    _Q5 = vaddq_s32(_Q1, loc_1DEDC93B0);
    __asm { SHA1SU0         V2.4S, V3.4S, V0.4S }
    _S20 = _Q18;
    __asm
    {
      SHA1M           Q18, S19, V6.4S
      SHA1H           S19, S20
      SHA1SU1         V2.4S, V1.4S
    }
    _Q6 = vaddq_s32(_Q2, loc_1DEDC93B0);
    __asm { SHA1SU0         V3.4S, V0.4S, V1.4S }
    _S20 = _Q18;
    __asm
    {
      SHA1P           Q18, S19, V7.4S
      SHA1H           S19, S20
      SHA1SU1         V3.4S, V2.4S
    }
    _Q7 = vaddq_s32(_Q3, loc_1DEDC93B0);
    v105 = a2 <= 1;
    for (i = a2 - 1; !v105; --i)
    {
      v107 = *v4;
      v108 = v4[1];
      v109 = v4[2];
      v110 = v4[3];
      v4 += 4;
      _S20 = _Q18;
      __asm
      {
        SHA1P           Q18, S19, V4.4S
        SHA1H           S19, S20
      }
      _Q4 = vaddq_s32((int32x4_t)vrev32q_s8(v107), *(int32x4_t *)K_XMM_AR);
      _Q1 = (int32x4_t)vrev32q_s8(v108);
      _S20 = _Q18;
      __asm
      {
        SHA1P           Q18, S19, V5.4S
        SHA1H           S19, S20
      }
      _Q5 = vaddq_s32(_Q1, *(int32x4_t *)K_XMM_AR);
      _Q2 = (int32x4_t)vrev32q_s8(v109);
      _S20 = _Q18;
      __asm
      {
        SHA1P           Q18, S19, V6.4S
        SHA1H           S19, S20
      }
      _Q6 = vaddq_s32(_Q2, *(int32x4_t *)K_XMM_AR);
      _Q3 = (int32x4_t)vrev32q_s8(v110);
      _S20 = _Q18;
      __asm
      {
        SHA1P           Q18, S19, V7.4S
        SHA1H           S19, S20
      }
      _Q7 = vaddq_s32(_Q3, *(int32x4_t *)K_XMM_AR);
      _Q19 = vaddq_s32(v3, _Q19);
      v11 = vaddq_s32(v11, _Q18);
      v3 = _Q19;
      __asm { SHA1SU0         V0.4S, V1.4S, V2.4S }
      _S20 = v11.i32[0];
      __asm
      {
        SHA1C           Q18, S19, V4.4S
        SHA1H           S19, S20
        SHA1SU1         V0.4S, V3.4S
      }
      _Q4 = vaddq_s32(_Q0, *(int32x4_t *)K_XMM_AR);
      __asm { SHA1SU0         V1.4S, V2.4S, V3.4S }
      _S20 = _Q18;
      __asm
      {
        SHA1C           Q18, S19, V5.4S
        SHA1H           S19, S20
        SHA1SU1         V1.4S, V0.4S
      }
      _Q5 = vaddq_s32(_Q1, *(int32x4_t *)&K_XMM_AR[2]);
      __asm { SHA1SU0         V2.4S, V3.4S, V0.4S }
      _S20 = _Q18;
      __asm
      {
        SHA1C           Q18, S19, V6.4S
        SHA1H           S19, S20
        SHA1SU1         V2.4S, V1.4S
      }
      _Q6 = vaddq_s32(_Q2, *(int32x4_t *)&K_XMM_AR[2]);
      __asm { SHA1SU0         V3.4S, V0.4S, V1.4S }
      _S20 = _Q18;
      __asm
      {
        SHA1C           Q18, S19, V7.4S
        SHA1H           S19, S20
        SHA1SU1         V3.4S, V2.4S
      }
      _Q7 = vaddq_s32(_Q3, *(int32x4_t *)&K_XMM_AR[2]);
      __asm { SHA1SU0         V0.4S, V1.4S, V2.4S }
      _S20 = _Q18;
      __asm
      {
        SHA1C           Q18, S19, V4.4S
        SHA1H           S19, S20
        SHA1SU1         V0.4S, V3.4S
      }
      _Q4 = vaddq_s32(_Q0, *(int32x4_t *)&K_XMM_AR[2]);
      __asm { SHA1SU0         V1.4S, V2.4S, V3.4S }
      _S20 = _Q18;
      __asm
      {
        SHA1P           Q18, S19, V5.4S
        SHA1H           S19, S20
        SHA1SU1         V1.4S, V0.4S
      }
      _Q5 = vaddq_s32(_Q1, *(int32x4_t *)&K_XMM_AR[2]);
      __asm { SHA1SU0         V2.4S, V3.4S, V0.4S }
      _S20 = _Q18;
      __asm
      {
        SHA1P           Q18, S19, V6.4S
        SHA1H           S19, S20
        SHA1SU1         V2.4S, V1.4S
      }
      _Q6 = vaddq_s32(_Q2, *(int32x4_t *)&K_XMM_AR[4]);
      __asm { SHA1SU0         V3.4S, V0.4S, V1.4S }
      _S20 = _Q18;
      __asm
      {
        SHA1P           Q18, S19, V7.4S
        SHA1H           S19, S20
        SHA1SU1         V3.4S, V2.4S
      }
      _Q7 = vaddq_s32(_Q3, *(int32x4_t *)&K_XMM_AR[4]);
      __asm { SHA1SU0         V0.4S, V1.4S, V2.4S }
      _S20 = _Q18;
      __asm
      {
        SHA1P           Q18, S19, V4.4S
        SHA1H           S19, S20
        SHA1SU1         V0.4S, V3.4S
      }
      _Q4 = vaddq_s32(_Q0, *(int32x4_t *)&K_XMM_AR[4]);
      __asm { SHA1SU0         V1.4S, V2.4S, V3.4S }
      _S20 = _Q18;
      __asm
      {
        SHA1P           Q18, S19, V5.4S
        SHA1H           S19, S20
        SHA1SU1         V1.4S, V0.4S
      }
      _Q5 = vaddq_s32(_Q1, *(int32x4_t *)&K_XMM_AR[4]);
      __asm { SHA1SU0         V2.4S, V3.4S, V0.4S }
      _S20 = _Q18;
      __asm
      {
        SHA1M           Q18, S19, V6.4S
        SHA1H           S19, S20
        SHA1SU1         V2.4S, V1.4S
      }
      _Q6 = vaddq_s32(_Q2, *(int32x4_t *)&K_XMM_AR[4]);
      __asm { SHA1SU0         V3.4S, V0.4S, V1.4S }
      _S20 = _Q18;
      __asm
      {
        SHA1M           Q18, S19, V7.4S
        SHA1H           S19, S20
        SHA1SU1         V3.4S, V2.4S
      }
      _Q7 = vaddq_s32(_Q3, loc_1DEDC93B0);
      __asm { SHA1SU0         V0.4S, V1.4S, V2.4S }
      _S20 = _Q18;
      __asm
      {
        SHA1M           Q18, S19, V4.4S
        SHA1H           S19, S20
        SHA1SU1         V0.4S, V3.4S
      }
      _Q4 = vaddq_s32(_Q0, loc_1DEDC93B0);
      __asm { SHA1SU0         V1.4S, V2.4S, V3.4S }
      _S20 = _Q18;
      __asm
      {
        SHA1M           Q18, S19, V5.4S
        SHA1H           S19, S20
        SHA1SU1         V1.4S, V0.4S
      }
      _Q5 = vaddq_s32(_Q1, loc_1DEDC93B0);
      __asm { SHA1SU0         V2.4S, V3.4S, V0.4S }
      _S20 = _Q18;
      __asm
      {
        SHA1M           Q18, S19, V6.4S
        SHA1H           S19, S20
        SHA1SU1         V2.4S, V1.4S
      }
      _Q6 = vaddq_s32(_Q2, loc_1DEDC93B0);
      __asm { SHA1SU0         V3.4S, V0.4S, V1.4S }
      _S20 = _Q18;
      __asm
      {
        SHA1P           Q18, S19, V7.4S
        SHA1H           S19, S20
        SHA1SU1         V3.4S, V2.4S
      }
      _Q7 = vaddq_s32(_Q3, loc_1DEDC93B0);
      v105 = i <= 1;
    }
    _S20 = _Q18;
    __asm
    {
      SHA1P           Q18, S19, V4.4S
      SHA1H           S19, S20
    }
    _S20 = _Q18;
    __asm
    {
      SHA1P           Q18, S19, V5.4S
      SHA1H           S19, S20
    }
    _S20 = _Q18;
    __asm
    {
      SHA1P           Q18, S19, V6.4S
      SHA1H           S19, S20
    }
    _S20 = _Q18;
    __asm
    {
      SHA1P           Q18, S19, V7.4S
      SHA1H           S19, S20
    }
    *v12 = vaddq_s32(v11, _Q18);
    result = v12 + 1;
    result->i32[0] = vaddq_s32(v3, _Q19).u32[0];
  }
  return result;
}

uint64_t AccelerateCrypto_ecb_AES_encrypt(__int128 *a1, int a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4;
  int v6;
  int8x16_t i;
  uint64_t v9;
  int v25;
  uint64_t v27;

  v4 = *((unsigned int *)a1 + 60);
  _VF = __OFSUB__(a2, 4);
  v6 = a2 - 4;
  for (i = *(int8x16_t *)((char *)a1 + v4); v6 < 0 == _VF; v6 -= 4)
  {
    _Q4 = *a1;
    v9 = 16;
    a3 += 64;
    do
    {
      __asm
      {
        AESE            V0.16B, V4.16B
        AESMC           V0.16B, V0.16B
        AESE            V1.16B, V4.16B
        AESMC           V1.16B, V1.16B
        AESE            V2.16B, V4.16B
        AESMC           V2.16B, V2.16B
        AESE            V3.16B, V4.16B
        AESMC           V3.16B, V3.16B
      }
      _Q4 = a1[(unint64_t)v9 / 0x10];
      v9 += 16;
    }
    while (v9 < v4);
    __asm
    {
      AESE            V0.16B, V4.16B
      AESE            V1.16B, V4.16B
      AESE            V2.16B, V4.16B
      AESE            V3.16B, V4.16B
    }
    *a4 = veorq_s8(_Q0, i);
    a4[1] = veorq_s8(_Q1, i);
    a4[2] = veorq_s8(_Q2, i);
    a4[3] = veorq_s8(_Q3, i);
    a4 += 4;
    _VF = __OFSUB__(v6, 4);
  }
  v25 = v6 & 3;
  if (v25)
  {
    do
    {
      _Q4 = *a1;
      v27 = 16;
      a3 += 16;
      do
      {
        __asm
        {
          AESE            V0.16B, V4.16B
          AESMC           V0.16B, V0.16B
        }
        _Q4 = a1[(unint64_t)v27 / 0x10];
        v27 += 16;
      }
      while (v27 < v4);
      __asm { AESE            V0.16B, V4.16B }
      *a4++ = veorq_s8(_Q0, i);
      _VF = __OFSUB__(v25--, 1);
    }
    while (!((v25 < 0) ^ _VF | (v25 == 0)));
  }
  return 0;
}

int8x16_t *aes_ctr_crypt(int8x16_t *a1, int8x16_t *a2, uint64_t a3, int8x16_t *a4, int8x16_t *a5, uint64_t a6)
{
  int v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;

  v6 = a5[15].i32[0];
  v8 = __OFSUB__(a3, 128);
  v7 = a3 - 128 < 0;
  v9 = a3 - 128;
  if (v7 != v8)
    return Decrypt_Main_Loop_End(a1, a2, v9, a4, a5, a6, v6);
  else
    return (int8x16_t *)Decrypt_Main_Loop(a1, a2, v9, (uint64_t)a4, a5, a6, v6);
}

uint64_t Decrypt_Main_Loop(_OWORD *a1, int8x16_t *a2, uint64_t a3, uint64_t a4, int8x16_t *a5, uint64_t a6, int a7)
{
  int64x2_t v7;
  int64x2_t v8;
  int8x16_t v167;
  _OWORD *v234;
  int8x16_t v235;
  int8x16_t v236;
  int8x16_t v237;
  int8x16_t v238;
  int8x16_t v243;
  int8x16_t v244;
  int8x16_t v245;
  int8x16_t v246;
  int8x16_t v247;
  int8x16_t v248;
  int8x16_t v249;
  int8x16_t v250;
  int8x16_t *v255;

  do
  {
    v8 = vaddq_s64(v7, vaddq_s64(v7, vaddq_s64(v7, vaddq_s64(v7, v8))));
    _Q20 = *a5;
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a5[1];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a5[2];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a5[3];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a5[4];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a5[5];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a5[6];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a5[7];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a5[8];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a5[9];
    v167 = a5[10];
    if (a7 > 160)
    {
      __asm
      {
        AESE            V22.16B, V20.16B
        AESMC           V22.16B, V22.16B
        AESE            V23.16B, V20.16B
        AESMC           V23.16B, V23.16B
        AESE            V24.16B, V20.16B
        AESMC           V24.16B, V24.16B
        AESE            V25.16B, V20.16B
        AESMC           V25.16B, V25.16B
        AESE            V26.16B, V20.16B
        AESMC           V26.16B, V26.16B
        AESE            V27.16B, V20.16B
        AESMC           V27.16B, V27.16B
        AESE            V28.16B, V20.16B
        AESMC           V28.16B, V28.16B
        AESE            V29.16B, V20.16B
        AESMC           V29.16B, V29.16B
      }
      _Q20 = a5[10];
      __asm
      {
        AESE            V22.16B, V20.16B
        AESMC           V22.16B, V22.16B
        AESE            V23.16B, V20.16B
        AESMC           V23.16B, V23.16B
        AESE            V24.16B, V20.16B
        AESMC           V24.16B, V24.16B
        AESE            V25.16B, V20.16B
        AESMC           V25.16B, V25.16B
        AESE            V26.16B, V20.16B
        AESMC           V26.16B, V26.16B
        AESE            V27.16B, V20.16B
        AESMC           V27.16B, V27.16B
        AESE            V28.16B, V20.16B
        AESMC           V28.16B, V28.16B
        AESE            V29.16B, V20.16B
        AESMC           V29.16B, V29.16B
      }
      _Q20 = a5[11];
      v167 = a5[12];
      if (a7 > 192)
      {
        __asm
        {
          AESE            V22.16B, V20.16B
          AESMC           V22.16B, V22.16B
          AESE            V23.16B, V20.16B
          AESMC           V23.16B, V23.16B
          AESE            V24.16B, V20.16B
          AESMC           V24.16B, V24.16B
          AESE            V25.16B, V20.16B
          AESMC           V25.16B, V25.16B
          AESE            V26.16B, V20.16B
          AESMC           V26.16B, V26.16B
          AESE            V27.16B, V20.16B
          AESMC           V27.16B, V27.16B
          AESE            V28.16B, V20.16B
          AESMC           V28.16B, V28.16B
          AESE            V29.16B, V20.16B
          AESMC           V29.16B, V29.16B
        }
        _Q20 = a5[12];
        __asm
        {
          AESE            V22.16B, V20.16B
          AESMC           V22.16B, V22.16B
          AESE            V23.16B, V20.16B
          AESMC           V23.16B, V23.16B
          AESE            V24.16B, V20.16B
          AESMC           V24.16B, V24.16B
          AESE            V25.16B, V20.16B
          AESMC           V25.16B, V25.16B
          AESE            V26.16B, V20.16B
          AESMC           V26.16B, V26.16B
          AESE            V27.16B, V20.16B
          AESMC           V27.16B, V27.16B
          AESE            V28.16B, V20.16B
          AESMC           V28.16B, V28.16B
          AESE            V29.16B, V20.16B
          AESMC           V29.16B, V29.16B
        }
        _Q20 = a5[13];
        v167 = a5[14];
      }
    }
    v235 = *(int8x16_t *)a1;
    v236 = *((int8x16_t *)a1 + 1);
    v237 = *((int8x16_t *)a1 + 2);
    v238 = *((int8x16_t *)a1 + 3);
    v234 = a1 + 4;
    __asm
    {
      AESE            V22.16B, V20.16B
      AESE            V23.16B, V20.16B
      AESE            V24.16B, V20.16B
      AESE            V25.16B, V20.16B
    }
    v243 = veorq_s8(v235, veorq_s8(_Q22, v167));
    v244 = veorq_s8(v236, veorq_s8(_Q23, v167));
    v245 = veorq_s8(v237, veorq_s8(_Q24, v167));
    v246 = veorq_s8(v238, veorq_s8(_Q25, v167));
    v247 = *(int8x16_t *)v234;
    v248 = *((int8x16_t *)v234 + 1);
    v249 = *((int8x16_t *)v234 + 2);
    v250 = *((int8x16_t *)v234 + 3);
    a1 = v234 + 4;
    __asm
    {
      AESE            V26.16B, V20.16B
      AESE            V27.16B, V20.16B
      AESE            V28.16B, V20.16B
      AESE            V29.16B, V20.16B
    }
    *a2 = v243;
    a2[1] = v244;
    a2[2] = v245;
    a2[3] = v246;
    v255 = a2 + 4;
    *v255 = veorq_s8(v247, veorq_s8(_Q26, v167));
    v255[1] = veorq_s8(v248, veorq_s8(_Q27, v167));
    v255[2] = veorq_s8(v249, veorq_s8(_Q28, v167));
    v255[3] = veorq_s8(v250, veorq_s8(_Q29, v167));
    a2 = v255 + 4;
    _VF = __OFSUB__(a3, 128);
    _NF = a3 - 128 < 0;
    a3 -= 128;
  }
  while (_NF == _VF);
  return Decrypt_Main_Loop_End();
}

int8x16_t *Decrypt_Main_Loop_End(int8x16_t *result, int8x16_t *a2, uint64_t a3, int8x16_t *a4, int8x16_t *a5, uint64_t a6, int a7)
{
  int64x2_t v7;
  int8x16_t v8;
  int64x2_t v9;
  BOOL v10;
  uint64_t i;
  int8x16_t v54;

  v10 = a3 < -112;
  for (i = a3 + 112; !v10; i -= 16)
  {
    _Q4 = *a5;
    _Q5 = a5[1];
    _Q6 = a5[2];
    v9 = vaddq_s64(v7, v9);
    __asm
    {
      AESE            V7.16B, V4.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V5.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V6.16B
      AESMC           V7.16B, V7.16B
    }
    _Q4 = a5[3];
    _Q5 = a5[4];
    _Q6 = a5[5];
    __asm
    {
      AESE            V7.16B, V4.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V5.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V6.16B
      AESMC           V7.16B, V7.16B
    }
    _Q4 = a5[6];
    _Q5 = a5[7];
    _Q6 = a5[8];
    __asm
    {
      AESE            V7.16B, V4.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V5.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V6.16B
      AESMC           V7.16B, V7.16B
    }
    _Q20 = a5[9];
    _Q21 = a5[10];
    if (a7 > 160)
    {
      __asm
      {
        AESE            V7.16B, V20.16B
        AESMC           V7.16B, V7.16B
        AESE            V7.16B, V21.16B
        AESMC           V7.16B, V7.16B
      }
      _Q20 = a5[11];
      _Q21 = a5[12];
      if (a7 > 192)
      {
        __asm
        {
          AESE            V7.16B, V20.16B
          AESMC           V7.16B, V7.16B
          AESE            V7.16B, V21.16B
          AESMC           V7.16B, V7.16B
        }
        _Q20 = a5[13];
        _Q21 = a5[14];
      }
    }
    __asm { AESE            V7.16B, V20.16B }
    v54 = *result++;
    *a2++ = veorq_s8(v54, veorq_s8(_Q7, _Q21));
    v10 = i < 16;
  }
  *a4 = vqtbl1q_s8((int8x16_t)v9, v8);
  return result;
}

void gcmEncrypt(int8x16_t *a1, int8x16_t *a2, int8x16_t *a3, uint64_t a4, uint64x2_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v170;
  int8x16_t *v237;
  int8x16_t v238;
  int8x16_t v239;
  int8x16_t v240;
  int8x16_t v241;
  int8x16_t *v246;
  int8x16_t *v247;
  int8x16_t v248;
  int8x16_t v249;
  int8x16_t v250;
  int8x16_t v251;
  int8x16_t *v256;
  BOOL v257;
  uint64_t v258;

  v10 = *(unsigned int *)(a6 + 240);
  v11 = vqtbl1q_s8(a3[1], *(int8x16_t *)Lbswap_mask_0);
  if (a4 < 128)
    JUMPOUT(0x1DED9F168);
  _Q20 = *(int8x16_t *)a6;
  __asm
  {
    AESE            V22.16B, V20.16B
    AESMC           V22.16B, V22.16B
    AESE            V23.16B, V20.16B
    AESMC           V23.16B, V23.16B
    AESE            V24.16B, V20.16B
    AESMC           V24.16B, V24.16B
    AESE            V25.16B, V20.16B
    AESMC           V25.16B, V25.16B
    AESE            V26.16B, V20.16B
    AESMC           V26.16B, V26.16B
    AESE            V27.16B, V20.16B
    AESMC           V27.16B, V27.16B
    AESE            V28.16B, V20.16B
    AESMC           V28.16B, V28.16B
    AESE            V29.16B, V20.16B
    AESMC           V29.16B, V29.16B
  }
  _Q20 = *(_OWORD *)(a6 + 16);
  __asm
  {
    AESE            V22.16B, V20.16B
    AESMC           V22.16B, V22.16B
    AESE            V23.16B, V20.16B
    AESMC           V23.16B, V23.16B
    AESE            V24.16B, V20.16B
    AESMC           V24.16B, V24.16B
    AESE            V25.16B, V20.16B
    AESMC           V25.16B, V25.16B
    AESE            V26.16B, V20.16B
    AESMC           V26.16B, V26.16B
    AESE            V27.16B, V20.16B
    AESMC           V27.16B, V27.16B
    AESE            V28.16B, V20.16B
    AESMC           V28.16B, V28.16B
    AESE            V29.16B, V20.16B
    AESMC           V29.16B, V29.16B
  }
  _Q20 = *(_OWORD *)(a6 + 32);
  __asm
  {
    AESE            V22.16B, V20.16B
    AESMC           V22.16B, V22.16B
    AESE            V23.16B, V20.16B
    AESMC           V23.16B, V23.16B
    AESE            V24.16B, V20.16B
    AESMC           V24.16B, V24.16B
    AESE            V25.16B, V20.16B
    AESMC           V25.16B, V25.16B
    AESE            V26.16B, V20.16B
    AESMC           V26.16B, V26.16B
    AESE            V27.16B, V20.16B
    AESMC           V27.16B, V27.16B
    AESE            V28.16B, V20.16B
    AESMC           V28.16B, V28.16B
    AESE            V29.16B, V20.16B
    AESMC           V29.16B, V29.16B
  }
  _Q20 = *(_OWORD *)(a6 + 48);
  __asm
  {
    AESE            V22.16B, V20.16B
    AESMC           V22.16B, V22.16B
    AESE            V23.16B, V20.16B
    AESMC           V23.16B, V23.16B
    AESE            V24.16B, V20.16B
    AESMC           V24.16B, V24.16B
    AESE            V25.16B, V20.16B
    AESMC           V25.16B, V25.16B
    AESE            V26.16B, V20.16B
    AESMC           V26.16B, V26.16B
    AESE            V27.16B, V20.16B
    AESMC           V27.16B, V27.16B
    AESE            V28.16B, V20.16B
    AESMC           V28.16B, V28.16B
    AESE            V29.16B, V20.16B
    AESMC           V29.16B, V29.16B
  }
  _Q20 = *(_OWORD *)(a6 + 64);
  __asm
  {
    AESE            V22.16B, V20.16B
    AESMC           V22.16B, V22.16B
    AESE            V23.16B, V20.16B
    AESMC           V23.16B, V23.16B
    AESE            V24.16B, V20.16B
    AESMC           V24.16B, V24.16B
    AESE            V25.16B, V20.16B
    AESMC           V25.16B, V25.16B
    AESE            V26.16B, V20.16B
    AESMC           V26.16B, V26.16B
    AESE            V27.16B, V20.16B
    AESMC           V27.16B, V27.16B
    AESE            V28.16B, V20.16B
    AESMC           V28.16B, V28.16B
    AESE            V29.16B, V20.16B
    AESMC           V29.16B, V29.16B
  }
  _Q20 = *(_OWORD *)(a6 + 80);
  __asm
  {
    AESE            V22.16B, V20.16B
    AESMC           V22.16B, V22.16B
    AESE            V23.16B, V20.16B
    AESMC           V23.16B, V23.16B
    AESE            V24.16B, V20.16B
    AESMC           V24.16B, V24.16B
    AESE            V25.16B, V20.16B
    AESMC           V25.16B, V25.16B
    AESE            V26.16B, V20.16B
    AESMC           V26.16B, V26.16B
    AESE            V27.16B, V20.16B
    AESMC           V27.16B, V27.16B
    AESE            V28.16B, V20.16B
    AESMC           V28.16B, V28.16B
    AESE            V29.16B, V20.16B
    AESMC           V29.16B, V29.16B
  }
  _Q20 = *(_OWORD *)(a6 + 96);
  __asm
  {
    AESE            V22.16B, V20.16B
    AESMC           V22.16B, V22.16B
    AESE            V23.16B, V20.16B
    AESMC           V23.16B, V23.16B
    AESE            V24.16B, V20.16B
    AESMC           V24.16B, V24.16B
    AESE            V25.16B, V20.16B
    AESMC           V25.16B, V25.16B
    AESE            V26.16B, V20.16B
    AESMC           V26.16B, V26.16B
    AESE            V27.16B, V20.16B
    AESMC           V27.16B, V27.16B
    AESE            V28.16B, V20.16B
    AESMC           V28.16B, V28.16B
    AESE            V29.16B, V20.16B
    AESMC           V29.16B, V29.16B
  }
  _Q20 = *(_OWORD *)(a6 + 112);
  __asm
  {
    AESE            V22.16B, V20.16B
    AESMC           V22.16B, V22.16B
    AESE            V23.16B, V20.16B
    AESMC           V23.16B, V23.16B
    AESE            V24.16B, V20.16B
    AESMC           V24.16B, V24.16B
    AESE            V25.16B, V20.16B
    AESMC           V25.16B, V25.16B
    AESE            V26.16B, V20.16B
    AESMC           V26.16B, V26.16B
    AESE            V27.16B, V20.16B
    AESMC           V27.16B, V27.16B
    AESE            V28.16B, V20.16B
    AESMC           V28.16B, V28.16B
    AESE            V29.16B, V20.16B
    AESMC           V29.16B, V29.16B
  }
  _Q20 = *(_OWORD *)(a6 + 128);
  __asm
  {
    AESE            V22.16B, V20.16B
    AESMC           V22.16B, V22.16B
    AESE            V23.16B, V20.16B
    AESMC           V23.16B, V23.16B
    AESE            V24.16B, V20.16B
    AESMC           V24.16B, V24.16B
    AESE            V25.16B, V20.16B
    AESMC           V25.16B, V25.16B
    AESE            V26.16B, V20.16B
    AESMC           V26.16B, V26.16B
    AESE            V27.16B, V20.16B
    AESMC           V27.16B, V27.16B
    AESE            V28.16B, V20.16B
    AESMC           V28.16B, V28.16B
    AESE            V29.16B, V20.16B
    AESMC           V29.16B, V29.16B
  }
  _Q20 = *(_OWORD *)(a6 + 144);
  v170 = *(int8x16_t *)(a6 + 160);
  if ((int)v10 > 160)
  {
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = *(_OWORD *)(a6 + 160);
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = *(_OWORD *)(a6 + 176);
    v170 = *(int8x16_t *)(a6 + 192);
    if ((int)v10 > 192)
    {
      __asm
      {
        AESE            V22.16B, V20.16B
        AESMC           V22.16B, V22.16B
        AESE            V23.16B, V20.16B
        AESMC           V23.16B, V23.16B
        AESE            V24.16B, V20.16B
        AESMC           V24.16B, V24.16B
        AESE            V25.16B, V20.16B
        AESMC           V25.16B, V25.16B
        AESE            V26.16B, V20.16B
        AESMC           V26.16B, V26.16B
        AESE            V27.16B, V20.16B
        AESMC           V27.16B, V27.16B
        AESE            V28.16B, V20.16B
        AESMC           V28.16B, V28.16B
        AESE            V29.16B, V20.16B
        AESMC           V29.16B, V29.16B
      }
      _Q20 = *(_OWORD *)(a6 + 192);
      __asm
      {
        AESE            V22.16B, V20.16B
        AESMC           V22.16B, V22.16B
        AESE            V23.16B, V20.16B
        AESMC           V23.16B, V23.16B
        AESE            V24.16B, V20.16B
        AESMC           V24.16B, V24.16B
        AESE            V25.16B, V20.16B
        AESMC           V25.16B, V25.16B
        AESE            V26.16B, V20.16B
        AESMC           V26.16B, V26.16B
        AESE            V27.16B, V20.16B
        AESMC           V27.16B, V27.16B
        AESE            V28.16B, V20.16B
        AESMC           V28.16B, V28.16B
        AESE            V29.16B, V20.16B
        AESMC           V29.16B, V29.16B
      }
      _Q20 = *(_OWORD *)(a6 + 208);
      v170 = *(int8x16_t *)(a6 + 224);
    }
  }
  v238 = *a1;
  v239 = a1[1];
  v240 = a1[2];
  v241 = a1[3];
  v237 = a1 + 4;
  __asm
  {
    AESE            V22.16B, V20.16B
    AESE            V23.16B, V20.16B
    AESE            V24.16B, V20.16B
    AESE            V25.16B, V20.16B
  }
  *a2 = veorq_s8(veorq_s8(_Q22, v170), v238);
  a2[1] = veorq_s8(veorq_s8(_Q23, v170), v239);
  a2[2] = veorq_s8(veorq_s8(_Q24, v170), v240);
  a2[3] = veorq_s8(veorq_s8(_Q25, v170), v241);
  v246 = a2 + 4;
  v248 = *v237;
  v249 = v237[1];
  v250 = v237[2];
  v251 = v237[3];
  v247 = v237 + 4;
  __asm
  {
    AESE            V26.16B, V20.16B
    AESE            V27.16B, V20.16B
    AESE            V28.16B, V20.16B
    AESE            V29.16B, V20.16B
  }
  *v246 = veorq_s8(veorq_s8(_Q26, v170), v248);
  v246[1] = veorq_s8(veorq_s8(_Q27, v170), v249);
  v246[2] = veorq_s8(veorq_s8(_Q28, v170), v250);
  v246[3] = veorq_s8(veorq_s8(_Q29, v170), v251);
  v256 = v246 + 4;
  v257 = a4 < 256;
  v258 = a4 - 256;
  if (v257)
    Encrypt_Main_Loop_End(v247, v256, a3, v258, a5, (int8x16_t *)a6, v10, v11);
  else
    Encrypt_Main_Loop(v247, v256, (uint64_t)a3, v258, a5, (int8x16_t *)a6, v10, (uint64_t)qword_1DED9E400, v11, a9, a10);
}

uint64_t Encrypt_Main_Loop(_OWORD *a1, int8x16_t *a2, uint64_t a3, uint64_t a4, uint64x2_t *a5, int8x16_t *a6, uint64_t a7, uint64_t a8, int8x16_t a9, uint64_t a10, uint64_t a11)
{
  int32x4_t v11;
  int8x16_t v12;
  unint64_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  uint64x2_t v20;
  int8x16_t v21;
  int32x4_t v22;
  int8x16_t v23;
  int8x16_t v35;
  uint64x2_t v36;
  int8x16_t v41;
  int8x16_t v46;
  uint64x2_t v56;
  int8x16_t v61;
  int8x16_t v66;
  uint64x2_t v76;
  int8x16_t v81;
  int8x16_t v86;
  uint64x2_t v96;
  int8x16_t v101;
  int8x16_t v106;
  uint64x2_t v116;
  int8x16_t v121;
  int8x16_t v126;
  uint64x2_t v136;
  int8x16_t v141;
  int8x16_t v146;
  uint64x2_t v156;
  int8x16_t v161;
  int8x16_t v166;
  int8x16_t v172;
  int8x16_t v179;
  int8x16_t v182;
  int8x16_t v207;
  _OWORD *v274;
  int8x16_t v275;
  int8x16_t v276;
  int8x16_t v277;
  int8x16_t v278;
  int8x16_t v283;
  int8x16_t v284;
  int8x16_t v285;
  int8x16_t v286;
  int8x16_t *v287;
  int8x16_t v288;
  int8x16_t v289;
  int8x16_t v290;
  int8x16_t v291;
  int8x16_t v296;
  int8x16_t v297;
  int8x16_t v298;
  int8x16_t v299;
  int8x16_t v301;
  int8x16_t v302;
  int8x16_t v303;
  int8x16_t v304;
  int8x16_t v305;
  int8x16_t v306;
  int8x16_t v307;

  do
  {
    v307 = veorq_s8(v14, a9);
    v306 = v15;
    v305 = v16;
    v304 = v17;
    v303 = v18;
    v302 = v19;
    v301 = (int8x16_t)v20;
    v22 = vaddq_s32(v11, vaddq_s32(v11, vaddq_s32(v11, vaddq_s32(v11, v22))));
    _Q20 = *a6;
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
    }
    v35 = veorq_s8((int8x16_t)vmull_p64(a5[8].u64[0], veorq_s8(vextq_s8(v21, v21, 8uLL), v21).u64[0]), (int8x16_t)vmull_p64(a5[9].u64[0], veorq_s8(v301, vextq_s8(v301, v301, 8uLL)).u64[0]));
    v36 = a5[1];
    __asm
    {
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
    }
    v41 = veorq_s8((int8x16_t)vmull_high_p64(*a5, (uint64x2_t)v21), (int8x16_t)vmull_high_p64(v36, v20));
    __asm
    {
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
    }
    v46 = veorq_s8((int8x16_t)vmull_p64(a5->i64[0], v21.u64[0]), (int8x16_t)vmull_p64(v36.u64[0], v301.u64[0]));
    __asm
    {
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a6[1];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
    }
    v56 = a5[2];
    __asm
    {
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
    }
    v61 = veorq_s8(v41, (int8x16_t)vmull_high_p64(v56, (uint64x2_t)v302));
    __asm
    {
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
    }
    v66 = veorq_s8(v46, (int8x16_t)vmull_p64(v56.u64[0], v302.u64[0]));
    __asm
    {
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a6[2];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
    }
    v76 = a5[3];
    __asm
    {
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
    }
    v81 = veorq_s8(v61, (int8x16_t)vmull_high_p64(v76, (uint64x2_t)v303));
    __asm
    {
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
    }
    v86 = veorq_s8(v66, (int8x16_t)vmull_p64(v76.u64[0], v303.u64[0]));
    __asm
    {
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a6[3];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
    }
    v96 = a5[4];
    __asm
    {
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
    }
    v101 = veorq_s8(v81, (int8x16_t)vmull_high_p64(v96, (uint64x2_t)v304));
    __asm
    {
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
    }
    v106 = veorq_s8(v86, (int8x16_t)vmull_p64(v96.u64[0], v304.u64[0]));
    __asm
    {
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a6[4];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
    }
    v116 = a5[5];
    __asm
    {
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
    }
    v121 = veorq_s8(v101, (int8x16_t)vmull_high_p64(v116, (uint64x2_t)v305));
    __asm
    {
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
    }
    v126 = veorq_s8(v106, (int8x16_t)vmull_p64(v116.u64[0], v305.u64[0]));
    __asm
    {
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a6[5];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
    }
    v136 = a5[6];
    __asm
    {
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
    }
    v141 = veorq_s8(v121, (int8x16_t)vmull_high_p64(v136, (uint64x2_t)v306));
    __asm
    {
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
    }
    v146 = veorq_s8(v126, (int8x16_t)vmull_p64(v136.u64[0], v306.u64[0]));
    __asm
    {
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a6[6];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
    }
    v156 = a5[7];
    __asm
    {
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
    }
    v161 = veorq_s8(v141, (int8x16_t)vmull_high_p64(v156, (uint64x2_t)v307));
    __asm
    {
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
    }
    v166 = veorq_s8(v146, (int8x16_t)vmull_p64(v156.u64[0], v307.u64[0]));
    __asm
    {
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a6[7];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
    }
    v172 = veorq_s8(v166, veorq_s8(v161, veorq_s8(veorq_s8(veorq_s8(veorq_s8(veorq_s8(veorq_s8(v35, (int8x16_t)vmull_p64(a5[10].u64[0], veorq_s8(v302, vextq_s8(v302, v302, 8uLL)).u64[0])), (int8x16_t)vmull_p64(a5[11].u64[0], veorq_s8(v303, vextq_s8(v303, v303, 8uLL)).u64[0])), (int8x16_t)vmull_p64(a5[12].u64[0], veorq_s8(v304, vextq_s8(v304, v304, 8uLL)).u64[0])), (int8x16_t)vmull_p64(a5[13].u64[0], veorq_s8(v305, vextq_s8(v305, v305, 8uLL)).u64[0])), (int8x16_t)vmull_p64(a5[14].u64[0], veorq_s8(v306, vextq_s8(v306, v306, 8uLL)).u64[0])), (int8x16_t)vmull_p64(a5[15].u64[0], veorq_s8(v307, vextq_s8(v307, v307, 8uLL)).u64[0]))));
    __asm
    {
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
    }
    v179 = veorq_s8(vextq_s8(v23, v172, 8uLL), v166);
    __asm
    {
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
    }
    v182 = veorq_s8(vextq_s8(v179, v179, 8uLL), (int8x16_t)vmull_p64(v13, v179.u64[0]));
    __asm
    {
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a6[8];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    a9 = veorq_s8(veorq_s8(vextq_s8(v172, v23, 8uLL), v161), veorq_s8(vextq_s8(v182, v182, 8uLL), (int8x16_t)vmull_p64(v13, v182.u64[0])));
    _Q20 = a6[9];
    v207 = a6[10];
    if ((int)a7 > 160)
    {
      __asm
      {
        AESE            V22.16B, V20.16B
        AESMC           V22.16B, V22.16B
        AESE            V23.16B, V20.16B
        AESMC           V23.16B, V23.16B
        AESE            V24.16B, V20.16B
        AESMC           V24.16B, V24.16B
        AESE            V25.16B, V20.16B
        AESMC           V25.16B, V25.16B
        AESE            V26.16B, V20.16B
        AESMC           V26.16B, V26.16B
        AESE            V27.16B, V20.16B
        AESMC           V27.16B, V27.16B
        AESE            V28.16B, V20.16B
        AESMC           V28.16B, V28.16B
        AESE            V29.16B, V20.16B
        AESMC           V29.16B, V29.16B
      }
      _Q20 = a6[10];
      __asm
      {
        AESE            V22.16B, V20.16B
        AESMC           V22.16B, V22.16B
        AESE            V23.16B, V20.16B
        AESMC           V23.16B, V23.16B
        AESE            V24.16B, V20.16B
        AESMC           V24.16B, V24.16B
        AESE            V25.16B, V20.16B
        AESMC           V25.16B, V25.16B
        AESE            V26.16B, V20.16B
        AESMC           V26.16B, V26.16B
        AESE            V27.16B, V20.16B
        AESMC           V27.16B, V27.16B
        AESE            V28.16B, V20.16B
        AESMC           V28.16B, V28.16B
        AESE            V29.16B, V20.16B
        AESMC           V29.16B, V29.16B
      }
      _Q20 = a6[11];
      v207 = a6[12];
      if ((int)a7 > 192)
      {
        __asm
        {
          AESE            V22.16B, V20.16B
          AESMC           V22.16B, V22.16B
          AESE            V23.16B, V20.16B
          AESMC           V23.16B, V23.16B
          AESE            V24.16B, V20.16B
          AESMC           V24.16B, V24.16B
          AESE            V25.16B, V20.16B
          AESMC           V25.16B, V25.16B
          AESE            V26.16B, V20.16B
          AESMC           V26.16B, V26.16B
          AESE            V27.16B, V20.16B
          AESMC           V27.16B, V27.16B
          AESE            V28.16B, V20.16B
          AESMC           V28.16B, V28.16B
          AESE            V29.16B, V20.16B
          AESMC           V29.16B, V29.16B
        }
        _Q20 = a6[12];
        __asm
        {
          AESE            V22.16B, V20.16B
          AESMC           V22.16B, V22.16B
          AESE            V23.16B, V20.16B
          AESMC           V23.16B, V23.16B
          AESE            V24.16B, V20.16B
          AESMC           V24.16B, V24.16B
          AESE            V25.16B, V20.16B
          AESMC           V25.16B, V25.16B
          AESE            V26.16B, V20.16B
          AESMC           V26.16B, V26.16B
          AESE            V27.16B, V20.16B
          AESMC           V27.16B, V27.16B
          AESE            V28.16B, V20.16B
          AESMC           V28.16B, V28.16B
          AESE            V29.16B, V20.16B
          AESMC           V29.16B, V29.16B
        }
        _Q20 = a6[13];
        v207 = a6[14];
      }
    }
    v275 = *(int8x16_t *)a1;
    v276 = *((int8x16_t *)a1 + 1);
    v277 = *((int8x16_t *)a1 + 2);
    v278 = *((int8x16_t *)a1 + 3);
    v274 = a1 + 4;
    __asm
    {
      AESE            V22.16B, V20.16B
      AESE            V23.16B, V20.16B
      AESE            V24.16B, V20.16B
      AESE            V25.16B, V20.16B
    }
    v283 = veorq_s8(veorq_s8(_Q22, v207), v275);
    v284 = veorq_s8(veorq_s8(_Q23, v207), v276);
    v285 = veorq_s8(veorq_s8(_Q24, v207), v277);
    v286 = veorq_s8(veorq_s8(_Q25, v207), v278);
    *a2 = v283;
    a2[1] = v284;
    a2[2] = v285;
    a2[3] = v286;
    v287 = a2 + 4;
    v14 = vqtbl1q_s8(v283, v12);
    v15 = vqtbl1q_s8(v284, v12);
    v16 = vqtbl1q_s8(v285, v12);
    v17 = vqtbl1q_s8(v286, v12);
    v288 = *(int8x16_t *)v274;
    v289 = *((int8x16_t *)v274 + 1);
    v290 = *((int8x16_t *)v274 + 2);
    v291 = *((int8x16_t *)v274 + 3);
    a1 = v274 + 4;
    __asm
    {
      AESE            V26.16B, V20.16B
      AESE            V27.16B, V20.16B
      AESE            V28.16B, V20.16B
      AESE            V29.16B, V20.16B
    }
    v296 = veorq_s8(veorq_s8(_Q26, v207), v288);
    v297 = veorq_s8(veorq_s8(_Q27, v207), v289);
    v298 = veorq_s8(veorq_s8(_Q28, v207), v290);
    v299 = veorq_s8(veorq_s8(_Q29, v207), v291);
    *v287 = v296;
    v287[1] = v297;
    v287[2] = v298;
    v287[3] = v299;
    a2 = v287 + 4;
    v18 = vqtbl1q_s8(v296, v12);
    v19 = vqtbl1q_s8(v297, v12);
    v20 = (uint64x2_t)vqtbl1q_s8(v298, v12);
    v21 = vqtbl1q_s8(v299, v12);
    _VF = __OFSUB__(a4, 128);
    _NF = a4 - 128 < 0;
    a4 -= 128;
  }
  while (_NF == _VF);
  return Encrypt_Main_Loop_End(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, v301.i64[0], v301.i64[1], v302.i64[0], v302.i64[1], v303.i64[0], v303.i64[1]);
}

int8x16_t Encrypt_Main_Loop_End(int8x16_t *a1, int8x16_t *a2, int8x16_t *a3, uint64_t a4, uint64x2_t *a5, int8x16_t *a6, int a7, int8x16_t a8)
{
  int32x4_t v8;
  int8x16_t v9;
  unint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int32x4_t v19;
  int8x16_t v20;
  uint64_t v21;
  uint64x2_t v22;
  int8x16_t v23;
  int8x16_t v24;
  uint64x2_t v25;
  int8x16_t v26;
  int8x16_t v27;
  uint64x2_t v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64x2_t v31;
  int8x16_t v32;
  int8x16_t v33;
  uint64x2_t v34;
  int8x16_t v35;
  int8x16_t v36;
  uint64x2_t v37;
  int8x16_t v38;
  int8x16_t v39;
  uint64x2_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  BOOL v47;
  uint64_t v48;
  int8x16_t *v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t *v94;
  int8x16_t v95;
  uint64x2_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  uint64_t i;
  int8x16_t v139;
  int8x16_t v140;
  int8x16_t v141;
  uint64x2_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t result;
  int8x16_t v147;

  v21 = a4 + 128;
  v147 = veorq_s8(a8, v11);
  v22 = a5[1];
  v23 = veorq_s8((int8x16_t)vmull_high_p64(*a5, (uint64x2_t)v18), (int8x16_t)vmull_high_p64(v22, (uint64x2_t)v17));
  v24 = veorq_s8((int8x16_t)vmull_p64(a5->i64[0], v18.u64[0]), (int8x16_t)vmull_p64(v22.u64[0], v17.u64[0]));
  v25 = a5[2];
  v26 = veorq_s8(v23, (int8x16_t)vmull_high_p64(v25, (uint64x2_t)v16));
  v27 = veorq_s8(v24, (int8x16_t)vmull_p64(v25.u64[0], v16.u64[0]));
  v28 = a5[3];
  v29 = veorq_s8(v26, (int8x16_t)vmull_high_p64(v28, (uint64x2_t)v15));
  v30 = veorq_s8(v27, (int8x16_t)vmull_p64(v28.u64[0], v15.u64[0]));
  v31 = a5[4];
  v32 = veorq_s8(v29, (int8x16_t)vmull_high_p64(v31, (uint64x2_t)v14));
  v33 = veorq_s8(v30, (int8x16_t)vmull_p64(v31.u64[0], v14.u64[0]));
  v34 = a5[5];
  v35 = veorq_s8(v32, (int8x16_t)vmull_high_p64(v34, (uint64x2_t)v13));
  v36 = veorq_s8(v33, (int8x16_t)vmull_p64(v34.u64[0], v13.u64[0]));
  v37 = a5[6];
  v38 = veorq_s8(v35, (int8x16_t)vmull_high_p64(v37, (uint64x2_t)v12));
  v39 = veorq_s8(v36, (int8x16_t)vmull_p64(v37.u64[0], v12.u64[0]));
  v40 = a5[7];
  v41 = veorq_s8(v38, (int8x16_t)vmull_high_p64(v40, (uint64x2_t)v147));
  v42 = veorq_s8(v39, (int8x16_t)vmull_p64(v40.u64[0], v147.u64[0]));
  v43 = veorq_s8(v42, veorq_s8(v41, veorq_s8(veorq_s8(veorq_s8(veorq_s8(veorq_s8(veorq_s8(veorq_s8((int8x16_t)vmull_p64(a5[8].u64[0], veorq_s8(vextq_s8(v18, v18, 8uLL), v18).u64[0]), (int8x16_t)vmull_p64(a5[9].u64[0], veorq_s8(v17, vextq_s8(v17, v17, 8uLL)).u64[0])), (int8x16_t)vmull_p64(a5[10].u64[0], veorq_s8(v16, vextq_s8(v16, v16, 8uLL)).u64[0])), (int8x16_t)vmull_p64(a5[11].u64[0], veorq_s8(v15, vextq_s8(v15, v15, 8uLL)).u64[0])), (int8x16_t)vmull_p64(a5[12].u64[0], veorq_s8(v14, vextq_s8(v14, v14, 8uLL)).u64[0])), (int8x16_t)vmull_p64(a5[13].u64[0], veorq_s8(v13, vextq_s8(v13, v13, 8uLL)).u64[0])), (int8x16_t)vmull_p64(a5[14].u64[0], veorq_s8(v12, vextq_s8(v12, v12, 8uLL)).u64[0])), (int8x16_t)vmull_p64(a5[15].u64[0], veorq_s8(v147, vextq_s8(v147, v147, 8uLL)).u64[0]))));
  v44 = veorq_s8(vextq_s8(v20, v43, 8uLL), v42);
  v45 = veorq_s8(vextq_s8(v44, v44, 8uLL), (int8x16_t)vmull_p64(v10, v44.u64[0]));
  v46 = veorq_s8(veorq_s8(vextq_s8(v43, v20, 8uLL), v41), veorq_s8(vextq_s8(v45, v45, 8uLL), (int8x16_t)vmull_p64(v10, v45.u64[0])));
  v47 = v21 < 16;
  v48 = v21 - 16;
  if (!v47)
  {
    _Q4 = *a6;
    _Q5 = a6[1];
    _Q6 = a6[2];
    v19 = vaddq_s32(v8, v19);
    __asm
    {
      AESE            V7.16B, V4.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V5.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V6.16B
      AESMC           V7.16B, V7.16B
    }
    _Q4 = a6[3];
    _Q5 = a6[4];
    _Q6 = a6[5];
    __asm
    {
      AESE            V7.16B, V4.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V5.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V6.16B
      AESMC           V7.16B, V7.16B
    }
    _Q4 = a6[6];
    _Q5 = a6[7];
    _Q6 = a6[8];
    __asm
    {
      AESE            V7.16B, V4.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V5.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V6.16B
      AESMC           V7.16B, V7.16B
    }
    _Q20 = a6[9];
    _Q21 = a6[10];
    if (a7 > 160)
    {
      __asm
      {
        AESE            V7.16B, V20.16B
        AESMC           V7.16B, V7.16B
        AESE            V7.16B, V21.16B
        AESMC           V7.16B, V7.16B
      }
      _Q20 = a6[11];
      _Q21 = a6[12];
      if (a7 > 192)
      {
        __asm
        {
          AESE            V7.16B, V20.16B
          AESMC           V7.16B, V7.16B
          AESE            V7.16B, V21.16B
          AESMC           V7.16B, V7.16B
        }
        _Q20 = a6[13];
        _Q21 = a6[14];
      }
    }
    __asm { AESE            V7.16B, V20.16B }
    v92 = *a1;
    v91 = a1 + 1;
    v93 = veorq_s8(v92, veorq_s8(_Q7, _Q21));
    *a2 = v93;
    v94 = a2 + 1;
    v95 = veorq_s8(v46, vqtbl1q_s8(v93, v9));
    v96 = *(uint64x2_t *)((char *)a5 + v48);
    v97 = (int8x16_t)vmull_high_p64(v96, (uint64x2_t)v95);
    v98 = (int8x16_t)vmull_p64(v96.u64[0], v95.u64[0]);
    v99 = (int8x16_t)vmull_p64(*(unint64_t *)((char *)a5[8].u64 + v48), veorq_s8(vextq_s8(v95, v95, 8uLL), v95).u64[0]);
    v47 = v48 < 16;
    for (i = v48 - 16; !v47; i -= 16)
    {
      _Q4 = *a6;
      _Q5 = a6[1];
      _Q6 = a6[2];
      v19 = vaddq_s32(v8, v19);
      __asm
      {
        AESE            V7.16B, V4.16B
        AESMC           V7.16B, V7.16B
        AESE            V7.16B, V5.16B
        AESMC           V7.16B, V7.16B
        AESE            V7.16B, V6.16B
        AESMC           V7.16B, V7.16B
      }
      _Q4 = a6[3];
      _Q5 = a6[4];
      _Q6 = a6[5];
      __asm
      {
        AESE            V7.16B, V4.16B
        AESMC           V7.16B, V7.16B
        AESE            V7.16B, V5.16B
        AESMC           V7.16B, V7.16B
        AESE            V7.16B, V6.16B
        AESMC           V7.16B, V7.16B
      }
      _Q4 = a6[6];
      _Q5 = a6[7];
      _Q6 = a6[8];
      __asm
      {
        AESE            V7.16B, V4.16B
        AESMC           V7.16B, V7.16B
        AESE            V7.16B, V5.16B
        AESMC           V7.16B, V7.16B
        AESE            V7.16B, V6.16B
        AESMC           V7.16B, V7.16B
      }
      _Q20 = a6[9];
      _Q21 = a6[10];
      if (a7 > 160)
      {
        __asm
        {
          AESE            V7.16B, V20.16B
          AESMC           V7.16B, V7.16B
          AESE            V7.16B, V21.16B
          AESMC           V7.16B, V7.16B
        }
        _Q20 = a6[11];
        _Q21 = a6[12];
        if (a7 > 192)
        {
          __asm
          {
            AESE            V7.16B, V20.16B
            AESMC           V7.16B, V7.16B
            AESE            V7.16B, V21.16B
            AESMC           V7.16B, V7.16B
          }
          _Q20 = a6[13];
          _Q21 = a6[14];
        }
      }
      __asm { AESE            V7.16B, V20.16B }
      v139 = *v91++;
      v140 = veorq_s8(v139, veorq_s8(_Q7, _Q21));
      *v94++ = v140;
      v141 = vqtbl1q_s8(v140, v9);
      v142 = *(uint64x2_t *)((char *)a5 + i);
      v97 = veorq_s8(v97, (int8x16_t)vmull_high_p64(v142, (uint64x2_t)v141));
      v98 = veorq_s8(v98, (int8x16_t)vmull_p64(v142.u64[0], v141.u64[0]));
      v99 = veorq_s8(v99, (int8x16_t)vmull_p64(*(unint64_t *)((char *)a5[8].u64 + i), veorq_s8(vextq_s8(v141, v141, 8uLL), v141).u64[0]));
      v47 = i < 16;
    }
    v143 = veorq_s8(v98, veorq_s8(v97, v99));
    v144 = veorq_s8(vextq_s8(v20, v143, 8uLL), v98);
    v145 = veorq_s8(vextq_s8(v144, v144, 8uLL), (int8x16_t)vmull_p64(v10, v144.u64[0]));
    v46 = veorq_s8(veorq_s8(vextq_s8(v143, v20, 8uLL), v97), veorq_s8(vextq_s8(v145, v145, 8uLL), (int8x16_t)vmull_p64(v10, v145.u64[0])));
  }
  result = vqtbl1q_s8(v46, v9);
  a3[1] = result;
  a3[2] = vqtbl1q_s8((int8x16_t)v19, v9);
  return result;
}

void gcmDecrypt(int8x16_t *a1, int8x16_t *a2, int8x16_t *a3, uint64_t a4, uint64x2_t *a5, int8x16_t *a6)
{
  int v6;
  int8x16_t v7;
  BOOL v8;
  uint64_t v9;

  v6 = a6[15].i32[0];
  v7 = vqtbl1q_s8(a3[1], *(int8x16_t *)Lbswap_mask_0);
  v8 = a4 < 128;
  v9 = a4 - 128;
  if (v8)
    Decrypt_Main_Loop_End_0(a1, a2, a3, v9, (uint64_t)a5, a6, v6, v7);
  else
    Decrypt_Main_Loop_0(a1, a2, v7, (uint64_t)a3, v9, a5, a6, v6);
}

uint64_t Decrypt_Main_Loop_0(int8x16_t *a1, int8x16_t *a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64x2_t *a6, int8x16_t *a7, int a8)
{
  int32x4_t v8;
  int8x16_t v9;
  unint64_t v10;
  int32x4_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  uint64x2_t v24;
  int8x16_t v27;
  int8x16_t v30;
  int8x16_t v33;
  int8x16_t v40;
  uint64x2_t v46;
  int8x16_t v49;
  int8x16_t v52;
  int8x16_t v55;
  int8x16_t v62;
  uint64x2_t v68;
  int8x16_t v71;
  int8x16_t v74;
  int8x16_t v77;
  int8x16_t v84;
  uint64x2_t v90;
  int8x16_t v93;
  int8x16_t v96;
  int8x16_t v99;
  int8x16_t v106;
  uint64x2_t v112;
  int8x16_t v115;
  int8x16_t v118;
  int8x16_t v121;
  int8x16_t v128;
  uint64x2_t v134;
  int8x16_t v137;
  int8x16_t v140;
  int8x16_t v143;
  int8x16_t v150;
  uint64x2_t v156;
  int8x16_t v159;
  int8x16_t v162;
  int8x16_t v165;
  int8x16_t v177;
  int8x16_t v184;
  int8x16_t v187;
  int8x16_t v212;
  int8x16_t *v279;
  int8x16_t v280;
  int8x16_t v281;
  int8x16_t v282;
  int8x16_t v283;
  int8x16_t v288;
  int8x16_t v289;
  int8x16_t v290;
  int8x16_t v291;
  int8x16_t v292;
  int8x16_t v293;
  int8x16_t v294;
  int8x16_t v295;
  int8x16_t *v300;

  do
  {
    v13 = vqtbl1q_s8(a1[7], v9);
    v14 = (int8x16_t)vmull_high_p64(*a6, (uint64x2_t)v13);
    v15 = (int8x16_t)vmull_p64(a6->i64[0], v13.u64[0]);
    v11 = vaddq_s32(v8, vaddq_s32(v8, vaddq_s32(v8, vaddq_s32(v8, v11))));
    v16 = (int8x16_t)vmull_p64(a6[8].u64[0], veorq_s8(vextq_s8(v13, v13, 8uLL), v13).u64[0]);
    _Q20 = *a7;
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
    }
    v24 = a6[1];
    __asm
    {
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
    }
    v27 = vqtbl1q_s8(a1[6], v9);
    __asm
    {
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
    }
    v30 = veorq_s8(v14, (int8x16_t)vmull_high_p64(v24, (uint64x2_t)v27));
    __asm
    {
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
    }
    v33 = veorq_s8(v15, (int8x16_t)vmull_p64(v24.u64[0], v27.u64[0]));
    __asm
    {
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
    }
    v40 = veorq_s8(v16, (int8x16_t)vmull_p64(a6[9].u64[0], veorq_s8(v27, vextq_s8(v27, v27, 8uLL)).u64[0]));
    __asm
    {
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a7[1];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
    }
    v46 = a6[2];
    __asm
    {
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
    }
    v49 = vqtbl1q_s8(a1[5], v9);
    __asm
    {
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
    }
    v52 = veorq_s8(v30, (int8x16_t)vmull_high_p64(v46, (uint64x2_t)v49));
    __asm
    {
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
    }
    v55 = veorq_s8(v33, (int8x16_t)vmull_p64(v46.u64[0], v49.u64[0]));
    __asm
    {
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
    }
    v62 = veorq_s8(v40, (int8x16_t)vmull_p64(a6[10].u64[0], veorq_s8(v49, vextq_s8(v49, v49, 8uLL)).u64[0]));
    __asm
    {
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a7[2];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
    }
    v68 = a6[3];
    __asm
    {
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
    }
    v71 = vqtbl1q_s8(a1[4], v9);
    __asm
    {
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
    }
    v74 = veorq_s8(v52, (int8x16_t)vmull_high_p64(v68, (uint64x2_t)v71));
    __asm
    {
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
    }
    v77 = veorq_s8(v55, (int8x16_t)vmull_p64(v68.u64[0], v71.u64[0]));
    __asm
    {
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
    }
    v84 = veorq_s8(v62, (int8x16_t)vmull_p64(a6[11].u64[0], veorq_s8(v71, vextq_s8(v71, v71, 8uLL)).u64[0]));
    __asm
    {
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a7[3];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
    }
    v90 = a6[4];
    __asm
    {
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
    }
    v93 = vqtbl1q_s8(a1[3], v9);
    __asm
    {
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
    }
    v96 = veorq_s8(v74, (int8x16_t)vmull_high_p64(v90, (uint64x2_t)v93));
    __asm
    {
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
    }
    v99 = veorq_s8(v77, (int8x16_t)vmull_p64(v90.u64[0], v93.u64[0]));
    __asm
    {
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
    }
    v106 = veorq_s8(v84, (int8x16_t)vmull_p64(a6[12].u64[0], veorq_s8(v93, vextq_s8(v93, v93, 8uLL)).u64[0]));
    __asm
    {
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a7[4];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
    }
    v112 = a6[5];
    __asm
    {
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
    }
    v115 = vqtbl1q_s8(a1[2], v9);
    __asm
    {
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
    }
    v118 = veorq_s8(v96, (int8x16_t)vmull_high_p64(v112, (uint64x2_t)v115));
    __asm
    {
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
    }
    v121 = veorq_s8(v99, (int8x16_t)vmull_p64(v112.u64[0], v115.u64[0]));
    __asm
    {
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
    }
    v128 = veorq_s8(v106, (int8x16_t)vmull_p64(a6[13].u64[0], veorq_s8(v115, vextq_s8(v115, v115, 8uLL)).u64[0]));
    __asm
    {
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a7[5];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
    }
    v134 = a6[6];
    __asm
    {
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
    }
    v137 = vqtbl1q_s8(a1[1], v9);
    __asm
    {
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
    }
    v140 = veorq_s8(v118, (int8x16_t)vmull_high_p64(v134, (uint64x2_t)v137));
    __asm
    {
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
    }
    v143 = veorq_s8(v121, (int8x16_t)vmull_p64(v134.u64[0], v137.u64[0]));
    __asm
    {
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
    }
    v150 = veorq_s8(v128, (int8x16_t)vmull_p64(a6[14].u64[0], veorq_s8(v137, vextq_s8(v137, v137, 8uLL)).u64[0]));
    __asm
    {
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a7[6];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
    }
    v156 = a6[7];
    __asm
    {
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
    }
    v159 = veorq_s8(vqtbl1q_s8(*a1, v9), a3);
    __asm
    {
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
    }
    v162 = veorq_s8(v140, (int8x16_t)vmull_high_p64(v156, (uint64x2_t)v159));
    __asm
    {
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
    }
    v165 = veorq_s8(v143, (int8x16_t)vmull_p64(v156.u64[0], v159.u64[0]));
    __asm
    {
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a7[7];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
    }
    v177 = veorq_s8(v165, veorq_s8(v162, veorq_s8(v150, (int8x16_t)vmull_p64(a6[15].u64[0], veorq_s8(v159, vextq_s8(v159, v159, 8uLL)).u64[0]))));
    __asm
    {
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
    }
    v184 = veorq_s8(vextq_s8(v12, v177, 8uLL), v165);
    __asm
    {
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
    }
    v187 = veorq_s8(vextq_s8(v184, v184, 8uLL), (int8x16_t)vmull_p64(v10, v184.u64[0]));
    __asm
    {
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a7[8];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    a3 = veorq_s8(veorq_s8(vextq_s8(v177, v12, 8uLL), v162), veorq_s8(vextq_s8(v187, v187, 8uLL), (int8x16_t)vmull_p64(v10, v187.u64[0])));
    _Q20 = a7[9];
    v212 = a7[10];
    if (a8 > 160)
    {
      __asm
      {
        AESE            V22.16B, V20.16B
        AESMC           V22.16B, V22.16B
        AESE            V23.16B, V20.16B
        AESMC           V23.16B, V23.16B
        AESE            V24.16B, V20.16B
        AESMC           V24.16B, V24.16B
        AESE            V25.16B, V20.16B
        AESMC           V25.16B, V25.16B
        AESE            V26.16B, V20.16B
        AESMC           V26.16B, V26.16B
        AESE            V27.16B, V20.16B
        AESMC           V27.16B, V27.16B
        AESE            V28.16B, V20.16B
        AESMC           V28.16B, V28.16B
        AESE            V29.16B, V20.16B
        AESMC           V29.16B, V29.16B
      }
      _Q20 = a7[10];
      __asm
      {
        AESE            V22.16B, V20.16B
        AESMC           V22.16B, V22.16B
        AESE            V23.16B, V20.16B
        AESMC           V23.16B, V23.16B
        AESE            V24.16B, V20.16B
        AESMC           V24.16B, V24.16B
        AESE            V25.16B, V20.16B
        AESMC           V25.16B, V25.16B
        AESE            V26.16B, V20.16B
        AESMC           V26.16B, V26.16B
        AESE            V27.16B, V20.16B
        AESMC           V27.16B, V27.16B
        AESE            V28.16B, V20.16B
        AESMC           V28.16B, V28.16B
        AESE            V29.16B, V20.16B
        AESMC           V29.16B, V29.16B
      }
      _Q20 = a7[11];
      v212 = a7[12];
      if (a8 > 192)
      {
        __asm
        {
          AESE            V22.16B, V20.16B
          AESMC           V22.16B, V22.16B
          AESE            V23.16B, V20.16B
          AESMC           V23.16B, V23.16B
          AESE            V24.16B, V20.16B
          AESMC           V24.16B, V24.16B
          AESE            V25.16B, V20.16B
          AESMC           V25.16B, V25.16B
          AESE            V26.16B, V20.16B
          AESMC           V26.16B, V26.16B
          AESE            V27.16B, V20.16B
          AESMC           V27.16B, V27.16B
          AESE            V28.16B, V20.16B
          AESMC           V28.16B, V28.16B
          AESE            V29.16B, V20.16B
          AESMC           V29.16B, V29.16B
        }
        _Q20 = a7[12];
        __asm
        {
          AESE            V22.16B, V20.16B
          AESMC           V22.16B, V22.16B
          AESE            V23.16B, V20.16B
          AESMC           V23.16B, V23.16B
          AESE            V24.16B, V20.16B
          AESMC           V24.16B, V24.16B
          AESE            V25.16B, V20.16B
          AESMC           V25.16B, V25.16B
          AESE            V26.16B, V20.16B
          AESMC           V26.16B, V26.16B
          AESE            V27.16B, V20.16B
          AESMC           V27.16B, V27.16B
          AESE            V28.16B, V20.16B
          AESMC           V28.16B, V28.16B
          AESE            V29.16B, V20.16B
          AESMC           V29.16B, V29.16B
        }
        _Q20 = a7[13];
        v212 = a7[14];
      }
    }
    v280 = *a1;
    v281 = a1[1];
    v282 = a1[2];
    v283 = a1[3];
    v279 = a1 + 4;
    __asm
    {
      AESE            V22.16B, V20.16B
      AESE            V23.16B, V20.16B
      AESE            V24.16B, V20.16B
      AESE            V25.16B, V20.16B
    }
    v288 = veorq_s8(v280, veorq_s8(_Q22, v212));
    v289 = veorq_s8(v281, veorq_s8(_Q23, v212));
    v290 = veorq_s8(v282, veorq_s8(_Q24, v212));
    v291 = veorq_s8(v283, veorq_s8(_Q25, v212));
    v292 = *v279;
    v293 = v279[1];
    v294 = v279[2];
    v295 = v279[3];
    a1 = v279 + 4;
    __asm
    {
      AESE            V26.16B, V20.16B
      AESE            V27.16B, V20.16B
      AESE            V28.16B, V20.16B
      AESE            V29.16B, V20.16B
    }
    *a2 = v288;
    a2[1] = v289;
    a2[2] = v290;
    a2[3] = v291;
    v300 = a2 + 4;
    *v300 = veorq_s8(v292, veorq_s8(_Q26, v212));
    v300[1] = veorq_s8(v293, veorq_s8(_Q27, v212));
    v300[2] = veorq_s8(v294, veorq_s8(_Q28, v212));
    v300[3] = veorq_s8(v295, veorq_s8(_Q29, v212));
    a2 = v300 + 4;
    _VF = __OFSUB__(a5, 128);
    _NF = a5 - 128 < 0;
    a5 -= 128;
  }
  while (_NF == _VF);
  return Decrypt_Main_Loop_End_0();
}

int8x16_t Decrypt_Main_Loop_End_0(int8x16_t *a1, int8x16_t *a2, int8x16_t *a3, uint64_t a4, uint64_t a5, int8x16_t *a6, int a7, int8x16_t a8)
{
  int32x4_t v8;
  int8x16_t v9;
  unint64_t v10;
  int32x4_t v11;
  int8x16_t v12;
  BOOL v13;
  uint64_t v14;
  uint64x2_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t *v62;
  int8x16_t v63;
  int8x16_t *v64;
  uint64_t i;
  int8x16_t v66;
  uint64x2_t v67;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t result;

  v13 = a4 < -112;
  v14 = a4 + 112;
  if (!v13)
  {
    v15 = *(uint64x2_t *)(a5 + v14);
    v16 = veorq_s8(a8, vqtbl1q_s8(*a1, v9));
    v17 = (int8x16_t)vmull_high_p64(v15, (uint64x2_t)v16);
    v18 = (int8x16_t)vmull_p64(v15.u64[0], v16.u64[0]);
    v19 = (int8x16_t)vmull_p64(*(_QWORD *)(a5 + v14 + 128), veorq_s8(vextq_s8(v16, v16, 8uLL), v16).u64[0]);
    _Q4 = *a6;
    _Q5 = a6[1];
    _Q6 = a6[2];
    v11 = vaddq_s32(v8, v11);
    __asm
    {
      AESE            V7.16B, V4.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V5.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V6.16B
      AESMC           V7.16B, V7.16B
    }
    _Q4 = a6[3];
    _Q5 = a6[4];
    _Q6 = a6[5];
    __asm
    {
      AESE            V7.16B, V4.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V5.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V6.16B
      AESMC           V7.16B, V7.16B
    }
    _Q4 = a6[6];
    _Q5 = a6[7];
    _Q6 = a6[8];
    __asm
    {
      AESE            V7.16B, V4.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V5.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V6.16B
      AESMC           V7.16B, V7.16B
    }
    _Q20 = a6[9];
    _Q21 = a6[10];
    if (a7 > 160)
    {
      __asm
      {
        AESE            V7.16B, V20.16B
        AESMC           V7.16B, V7.16B
        AESE            V7.16B, V21.16B
        AESMC           V7.16B, V7.16B
      }
      _Q20 = a6[11];
      _Q21 = a6[12];
      if (a7 > 192)
      {
        __asm
        {
          AESE            V7.16B, V20.16B
          AESMC           V7.16B, V7.16B
          AESE            V7.16B, V21.16B
          AESMC           V7.16B, V7.16B
        }
        _Q20 = a6[13];
        _Q21 = a6[14];
      }
    }
    __asm { AESE            V7.16B, V20.16B }
    v63 = *a1;
    v62 = a1 + 1;
    *a2 = veorq_s8(v63, veorq_s8(_Q7, _Q21));
    v64 = a2 + 1;
    v13 = v14 < 16;
    for (i = v14 - 16; !v13; i -= 16)
    {
      v66 = vqtbl1q_s8(*v62, v9);
      v67 = *(uint64x2_t *)(a5 + i);
      v17 = veorq_s8(v17, (int8x16_t)vmull_high_p64(v67, (uint64x2_t)v66));
      v18 = veorq_s8(v18, (int8x16_t)vmull_p64(v67.u64[0], v66.u64[0]));
      v19 = veorq_s8(v19, (int8x16_t)vmull_p64(*(_QWORD *)(a5 + i + 128), veorq_s8(vextq_s8(v66, v66, 8uLL), v66).u64[0]));
      _Q4 = *a6;
      _Q5 = a6[1];
      _Q6 = a6[2];
      v11 = vaddq_s32(v8, v11);
      __asm
      {
        AESE            V7.16B, V4.16B
        AESMC           V7.16B, V7.16B
        AESE            V7.16B, V5.16B
        AESMC           V7.16B, V7.16B
        AESE            V7.16B, V6.16B
        AESMC           V7.16B, V7.16B
      }
      _Q4 = a6[3];
      _Q5 = a6[4];
      _Q6 = a6[5];
      __asm
      {
        AESE            V7.16B, V4.16B
        AESMC           V7.16B, V7.16B
        AESE            V7.16B, V5.16B
        AESMC           V7.16B, V7.16B
        AESE            V7.16B, V6.16B
        AESMC           V7.16B, V7.16B
      }
      _Q4 = a6[6];
      _Q5 = a6[7];
      _Q6 = a6[8];
      __asm
      {
        AESE            V7.16B, V4.16B
        AESMC           V7.16B, V7.16B
        AESE            V7.16B, V5.16B
        AESMC           V7.16B, V7.16B
        AESE            V7.16B, V6.16B
        AESMC           V7.16B, V7.16B
      }
      _Q20 = a6[9];
      _Q21 = a6[10];
      if (a7 > 160)
      {
        __asm
        {
          AESE            V7.16B, V20.16B
          AESMC           V7.16B, V7.16B
          AESE            V7.16B, V21.16B
          AESMC           V7.16B, V7.16B
        }
        _Q20 = a6[11];
        _Q21 = a6[12];
        if (a7 > 192)
        {
          __asm
          {
            AESE            V7.16B, V20.16B
            AESMC           V7.16B, V7.16B
            AESE            V7.16B, V21.16B
            AESMC           V7.16B, V7.16B
          }
          _Q20 = a6[13];
          _Q21 = a6[14];
        }
      }
      __asm { AESE            V7.16B, V20.16B }
      v106 = *v62++;
      *v64++ = veorq_s8(v106, veorq_s8(_Q7, _Q21));
      v13 = i < 16;
    }
    v107 = veorq_s8(v18, veorq_s8(v17, v19));
    v108 = veorq_s8(vextq_s8(v12, v107, 8uLL), v18);
    v109 = veorq_s8(vextq_s8(v108, v108, 8uLL), (int8x16_t)vmull_p64(v10, v108.u64[0]));
    a8 = veorq_s8(veorq_s8(vextq_s8(v107, v12, 8uLL), v17), veorq_s8(vextq_s8(v109, v109, 8uLL), (int8x16_t)vmull_p64(v10, v109.u64[0])));
  }
  result = vqtbl1q_s8(a8, v9);
  a3[1] = result;
  a3[2] = vqtbl1q_s8((int8x16_t)v11, v9);
  return result;
}

uint64_t ccctr_context_size(uint64_t *a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *a1;
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccrng_crypto_generate(uint64_t a1, rsize_t a2, char *a3)
{
  rsize_t v6;
  char *v7;
  os_unfair_lock_s *v8;
  const os_unfair_lock *v9;
  rsize_t v10;
  int v11;
  int v12;
  uint64_t seed;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const os_unfair_lock *v17;
  unint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  size_t v26;
  os_unfair_lock_s *v28;
  _BYTE __s[64];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C874D8];
  if (!a2)
    return 0;
  v6 = a2;
  v7 = a3;
  while (1)
  {
    v8 = *(os_unfair_lock_s **)(a1 + 24);
    if (v8)
    {
      os_unfair_lock_lock(v8);
      v9 = *(const os_unfair_lock **)(a1 + 24);
      if (v9)
        os_unfair_lock_assert_owner(v9);
    }
    v10 = *(_QWORD *)(a1 + 56);
    v11 = ccrng_schedule_read(*(_QWORD *)(a1 + 16));
    if (v11 == 1)
      goto LABEL_13;
    v12 = v11;
    seed = ccentropy_get_seed(*(uint64_t (****)(_QWORD))(a1 + 8));
    if ((_DWORD)seed == -10)
      break;
    v14 = seed;
    if ((_DWORD)seed)
      goto LABEL_40;
    v15 = drbg_reseed((_QWORD *)a1, v10, (uint64_t)__s, 0, 0);
    if ((_DWORD)v15)
    {
      v14 = v15;
LABEL_40:
      cc_clear(v10, __s);
      goto LABEL_36;
    }
    ccrng_schedule_notify_reseed(*(_BYTE **)(a1 + 16));
    cc_clear(v10, __s);
LABEL_13:
    if (v6 >= *(_QWORD *)(a1 + 48))
      v16 = *(_QWORD *)(a1 + 48);
    else
      v16 = v6;
    v17 = *(const os_unfair_lock **)(a1 + 24);
    if (v17)
      os_unfair_lock_assert_owner(v17);
    if (a2 <= 0xB && (v18 = *(_QWORD *)(a1 + 64), v18 >= v16))
    {
      v21 = *(_QWORD *)(a1 + 72);
      v22 = *(_QWORD *)(a1 + 80);
      v23 = (void *)(v21 + v22);
      v24 = v21 + v18;
      v25 = v24 - (v21 + v22);
      if (v25 >= v16)
        v26 = v16;
      else
        v26 = v24 - (v21 + v22);
      memcpy(v7, (const void *)(v21 + v22), v26);
      cc_clear(v26, v23);
      *(_QWORD *)(a1 + 80) += v26;
      if (v25 < v16)
      {
        v19 = drbg_generate((_QWORD *)a1, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
        if ((_DWORD)v19)
        {
LABEL_41:
          v14 = v19;
          goto LABEL_36;
        }
        memcpy(&v7[v26], *(const void **)(a1 + 72), v16 - v26);
        cc_clear(v16 - v26, *(void **)(a1 + 72));
        *(_QWORD *)(a1 + 80) = v16 - v26;
      }
    }
    else
    {
      v19 = drbg_generate((_QWORD *)a1, v16, (uint64_t)v7);
      if ((_DWORD)v19)
        goto LABEL_41;
    }
    v20 = *(os_unfair_lock_s **)(a1 + 24);
    if (v20)
      os_unfair_lock_unlock(v20);
    v7 += v16;
    v6 -= v16;
    if (!v6)
      return 0;
  }
  if (v12 == 2)
    goto LABEL_13;
  if (v12 == 3)
    v14 = 4294967134;
  else
    v14 = 0xFFFFFFFFLL;
LABEL_36:
  v28 = *(os_unfair_lock_s **)(a1 + 24);
  if (v28)
    os_unfair_lock_unlock(v28);
  cc_clear(a2, a3);
  return v14;
}

uint64_t ccrng_schedule_read(uint64_t a1)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 8))
    return 3;
  result = (**(uint64_t (***)(uint64_t))a1)(a1);
  *(_BYTE *)(a1 + 8) = (_DWORD)result == 3;
  return result;
}

uint64_t ccrng_schedule_tree_read(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v2 + 8))
  {
    v3 = 3;
  }
  else
  {
    v3 = (**(uint64_t (***)(_QWORD))v2)(*(_QWORD *)(a1 + 16));
    *(_BYTE *)(v2 + 8) = v3 == 3;
  }
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v4 + 8))
  {
    LODWORD(result) = 3;
  }
  else
  {
    LODWORD(result) = (**(uint64_t (***)(uint64_t))v4)(v4);
    *(_BYTE *)(v4 + 8) = (_DWORD)result == 3;
  }
  if (v3 <= result)
    return result;
  else
    return v3;
}

uint64_t ccrng_schedule_timer_read(uint64_t a1)
{
  if ((unint64_t)((*(uint64_t (**)(void))(a1 + 16))() - *(_QWORD *)(a1 + 32)) < *(_QWORD *)(a1 + 24))
    return 1;
  else
    return 3;
}

__uint64_t get_time_nsec()
{
  return clock_gettime_nsec_np(_CLOCK_MONOTONIC);
}

uint64_t ccrng_schedule_atomic_flag_read(uint64_t a1)
{
  unsigned int *v1;
  uint64_t result;

  v1 = (unsigned int *)(a1 + 16);
  do
    result = __ldxr(v1);
  while (__stxr(1u, v1));
  return result;
}

int32x4_t *AccelerateCrypto_SHA256_compress(int32x4_t *result, uint64_t a2, int8x16_t *a3)
{
  int8x16_t *v3;
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int32x4_t v9;
  __int128 *v19;
  int v20;
  int32x4_t v22;
  int32x4_t v28;
  int32x4_t v30;
  int32x4_t v32;
  BOOL v44;
  uint64_t v45;
  int32x4_t *v46;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v52;

  if (a2)
  {
    v4 = *a3;
    v5 = a3[1];
    v6 = a3[2];
    v7 = a3[3];
    v3 = a3 + 4;
    _Q1 = (int32x4_t)vrev32q_s8(v5);
    v9 = *result;
    _Q2 = (int32x4_t)vrev32q_s8(v6);
    _Q17 = result[1];
    _Q3 = (int32x4_t)vrev32q_s8(v7);
    _Q18 = *result;
    _Q4 = vaddq_s32((int32x4_t)vrev32q_s8(v4), (int32x4_t)K256);
    _Q5 = vaddq_s32(_Q1, (int32x4_t)xmmword_1DEDCBB50);
    _Q19 = _Q17;
    _Q6 = vaddq_s32(_Q2, (int32x4_t)xmmword_1DEDCBB60);
    _Q7 = vaddq_s32(_Q3, (int32x4_t)xmmword_1DEDCBB70);
    v19 = &xmmword_1DEDCBB80;
    v20 = 3;
    do
    {
      _Q20 = _Q18;
      v22 = (int32x4_t)*v19;
      __asm { SHA256SU0       V0.4S, V1.4S }
      v28 = (int32x4_t)v19[1];
      __asm { SHA256H         Q18, Q19, V4.4S }
      v30 = (int32x4_t)v19[2];
      __asm { SHA256SU1       V0.4S, V2.4S, V3.4S }
      v32 = (int32x4_t)v19[3];
      __asm { SHA256H2        Q19, Q20, V4.4S }
      v19 += 4;
      _Q4 = vaddq_s32(_Q0, v22);
      _Q20 = _Q18;
      __asm
      {
        SHA256SU0       V1.4S, V2.4S
        SHA256H         Q18, Q19, V5.4S
        SHA256SU1       V1.4S, V3.4S, V0.4S
        SHA256H2        Q19, Q20, V5.4S
      }
      _Q5 = vaddq_s32(_Q1, v28);
      _Q20 = _Q18;
      __asm
      {
        SHA256SU0       V2.4S, V3.4S
        SHA256H         Q18, Q19, V6.4S
        SHA256SU1       V2.4S, V0.4S, V1.4S
        SHA256H2        Q19, Q20, V6.4S
      }
      _Q6 = vaddq_s32(_Q2, v30);
      --v20;
      _Q20 = _Q18;
      __asm
      {
        SHA256SU0       V3.4S, V0.4S
        SHA256H         Q18, Q19, V7.4S
        SHA256SU1       V3.4S, V1.4S, V2.4S
        SHA256H2        Q19, Q20, V7.4S
      }
      _Q7 = vaddq_s32(_Q3, v32);
    }
    while (!(_NF ^ _VF | _ZF));
    v44 = a2 <= 1;
    v45 = a2 - 1;
    if (!v44)
    {
      v46 = (int32x4_t *)(v19 - 16);
      do
      {
        _Q20 = _Q18;
        __asm { SHA256H         Q18, Q19, V4.4S }
        v49 = v3[1];
        v50 = v3[2];
        __asm { SHA256H2        Q19, Q20, V4.4S }
        v52 = v3[3];
        _Q4 = vaddq_s32((int32x4_t)vrev32q_s8(*v3), *v46);
        _Q20 = _Q18;
        v3 += 4;
        __asm { SHA256H         Q18, Q19, V5.4S }
        _Q1 = (int32x4_t)vrev32q_s8(v49);
        __asm { SHA256H2        Q19, Q20, V5.4S }
        _Q5 = vaddq_s32(_Q1, v46[1]);
        _Q20 = _Q18;
        __asm { SHA256H         Q18, Q19, V6.4S }
        _Q2 = (int32x4_t)vrev32q_s8(v50);
        __asm { SHA256H2        Q19, Q20, V6.4S }
        _Q6 = vaddq_s32(_Q2, v46[2]);
        _Q20 = _Q18;
        __asm { SHA256H         Q18, Q19, V7.4S }
        _Q3 = (int32x4_t)vrev32q_s8(v52);
        __asm { SHA256H2        Q19, Q20, V7.4S }
        _Q7 = vaddq_s32(_Q3, v46[3]);
        v9 = vaddq_s32(v9, _Q18);
        _Q17 = vaddq_s32(_Q17, _Q19);
        _Q20 = v9;
        __asm
        {
          SHA256SU0       V0.4S, V1.4S
          SHA256H         Q18, Q19, V4.4S
          SHA256SU1       V0.4S, V2.4S, V3.4S
          SHA256H2        Q19, Q20, V4.4S
        }
        _Q4 = vaddq_s32(_Q0, v46[4]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V1.4S, V2.4S
          SHA256H         Q18, Q19, V5.4S
          SHA256SU1       V1.4S, V3.4S, V0.4S
          SHA256H2        Q19, Q20, V5.4S
        }
        _Q5 = vaddq_s32(_Q1, v46[5]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V2.4S, V3.4S
          SHA256H         Q18, Q19, V6.4S
          SHA256SU1       V2.4S, V0.4S, V1.4S
          SHA256H2        Q19, Q20, V6.4S
        }
        _Q6 = vaddq_s32(_Q2, v46[6]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V3.4S, V0.4S
          SHA256H         Q18, Q19, V7.4S
          SHA256SU1       V3.4S, V1.4S, V2.4S
          SHA256H2        Q19, Q20, V7.4S
        }
        _Q7 = vaddq_s32(_Q3, v46[7]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V0.4S, V1.4S
          SHA256H         Q18, Q19, V4.4S
          SHA256SU1       V0.4S, V2.4S, V3.4S
          SHA256H2        Q19, Q20, V4.4S
        }
        _Q4 = vaddq_s32(_Q0, v46[8]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V1.4S, V2.4S
          SHA256H         Q18, Q19, V5.4S
          SHA256SU1       V1.4S, V3.4S, V0.4S
          SHA256H2        Q19, Q20, V5.4S
        }
        _Q5 = vaddq_s32(_Q1, v46[9]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V2.4S, V3.4S
          SHA256H         Q18, Q19, V6.4S
          SHA256SU1       V2.4S, V0.4S, V1.4S
          SHA256H2        Q19, Q20, V6.4S
        }
        _Q6 = vaddq_s32(_Q2, v46[10]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V3.4S, V0.4S
          SHA256H         Q18, Q19, V7.4S
          SHA256SU1       V3.4S, V1.4S, V2.4S
          SHA256H2        Q19, Q20, V7.4S
        }
        _Q7 = vaddq_s32(_Q3, v46[11]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V0.4S, V1.4S
          SHA256H         Q18, Q19, V4.4S
          SHA256SU1       V0.4S, V2.4S, V3.4S
          SHA256H2        Q19, Q20, V4.4S
        }
        _Q4 = vaddq_s32(_Q0, v46[12]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V1.4S, V2.4S
          SHA256H         Q18, Q19, V5.4S
          SHA256SU1       V1.4S, V3.4S, V0.4S
          SHA256H2        Q19, Q20, V5.4S
        }
        _Q5 = vaddq_s32(_Q1, v46[13]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V2.4S, V3.4S
          SHA256H         Q18, Q19, V6.4S
          SHA256SU1       V2.4S, V0.4S, V1.4S
          SHA256H2        Q19, Q20, V6.4S
        }
        _Q6 = vaddq_s32(_Q2, v46[14]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V3.4S, V0.4S
          SHA256H         Q18, Q19, V7.4S
          SHA256SU1       V3.4S, V1.4S, V2.4S
          SHA256H2        Q19, Q20, V7.4S
        }
        _Q7 = vaddq_s32(_Q3, v46[15]);
        v44 = v45-- <= 1;
      }
      while (!v44);
    }
    _Q20 = _Q18;
    __asm
    {
      SHA256H         Q18, Q19, V4.4S
      SHA256H2        Q19, Q20, V4.4S
    }
    _Q20 = _Q18;
    __asm
    {
      SHA256H         Q18, Q19, V5.4S
      SHA256H2        Q19, Q20, V5.4S
    }
    _Q20 = _Q18;
    __asm
    {
      SHA256H         Q18, Q19, V6.4S
      SHA256H2        Q19, Q20, V6.4S
    }
    _Q20 = _Q18;
    __asm
    {
      SHA256H         Q18, Q19, V7.4S
      SHA256H2        Q19, Q20, V7.4S
    }
    *result = vaddq_s32(v9, _Q18);
    result[1] = vaddq_s32(_Q17, _Q19);
  }
  return result;
}

uint64_t ccctr_init(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = (*(uint64_t (**)(void))(a1 + 24))();
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccmode_ctr_init(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(a1 + 48);
  *a2 = v8;
  v9 = (*(uint64_t (**)(void))(v8 + 16))();
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(a1 + 32))(a1, a2, a5);
  return v9;
}

uint64_t aes_key_expansion(unint64_t *a1, uint64_t a2, int a3, int a4)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  uint64_t result;
  unsigned int v11;
  uint64_t v12;
  BOOL v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  int v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  int v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t *v36;
  int v37;
  uint64_t v38;

  v4 = &Rcon;
  *(_DWORD *)(a2 + 240) = 16 * a4;
  if (a3 == 6)
  {
    v15 = *a1;
    v16 = a1[1];
    v14 = (uint64_t *)(a1 + 2);
    *(_QWORD *)a2 = v15;
    *(_QWORD *)(a2 + 8) = v16;
    v17 = (uint64_t *)(a2 + 16);
    v18 = *v14;
    *v17 = *v14;
    v19 = (unint64_t *)(v17 + 1);
    v20 = 4 * a4 - 2;
    do
    {
      HIDWORD(v21) = HIDWORD(v18);
      LODWORD(v21) = HIDWORD(v18);
      v22 = *v4++;
      result = v22;
      v23 = (AESSubBytesWordTable[BYTE5(v18)] | (AESSubBytesWordTable[(v21 >> 8) >> 24] << 24) | (AESSubBytesWordTable[((v21 >> 8) >> 16)] << 16) | (AESSubBytesWordTable[(unsigned __int16)(HIDWORD(v18) >> 8) >> 8] << 8)) ^ v22;
      v15 ^= v23 ^ ((v15 ^ v23) << 32);
      v16 ^= HIDWORD(v15) ^ ((v16 ^ HIDWORD(v15)) << 32);
      v18 ^= HIDWORD(v16) ^ ((v18 ^ HIDWORD(v16)) << 32);
      *v19 = v15;
      v19[1] = v16;
      v24 = v19 + 2;
      *v24 = v18;
      v19 = v24 + 1;
      v13 = __OFSUB__(v20, 6);
      v20 -= 6;
    }
    while (!((v20 < 0) ^ v13 | (v20 == 0)));
  }
  else if (a3 == 8)
  {
    v26 = *a1;
    v27 = a1[1];
    v25 = a1 + 2;
    *(_QWORD *)a2 = v26;
    *(_QWORD *)(a2 + 8) = v27;
    v28 = (unint64_t *)(a2 + 16);
    v29 = *v25;
    v30 = v25[1];
    *v28 = *v25;
    v28[1] = v30;
    v31 = v28 + 2;
    v32 = 4 * a4 - 4;
    do
    {
      HIDWORD(v33) = HIDWORD(v30);
      LODWORD(v33) = HIDWORD(v30);
      v34 = *v4++;
      result = v34;
      v35 = (AESSubBytesWordTable[BYTE5(v30)] | (AESSubBytesWordTable[(v33 >> 8) >> 24] << 24) | (AESSubBytesWordTable[((v33 >> 8) >> 16)] << 16) | (AESSubBytesWordTable[(unsigned __int16)(HIDWORD(v30) >> 8) >> 8] << 8)) ^ v34;
      v26 ^= v35 ^ ((v26 ^ v35) << 32);
      v27 ^= HIDWORD(v26) ^ ((v27 ^ HIDWORD(v26)) << 32);
      *v31 = v26;
      v31[1] = v27;
      v36 = v31 + 2;
      v37 = v32 - 4;
      if (!v37)
        break;
      result = AESSubBytesWordTable[HIBYTE(HIDWORD(v27))];
      v38 = AESSubBytesWordTable[BYTE4(v27)] | ((_DWORD)result << 24) | (AESSubBytesWordTable[BYTE6(v27)] << 16) | (AESSubBytesWordTable[BYTE5(v27)] << 8);
      v29 ^= v38 ^ ((v29 ^ v38) << 32);
      v30 ^= HIDWORD(v29) ^ ((v30 ^ HIDWORD(v29)) << 32);
      *v36 = v29;
      v36[1] = v30;
      v31 = v36 + 2;
      v13 = __OFSUB__(v37, 4);
      v32 = v37 - 4;
    }
    while (!((v32 < 0) ^ v13 | (v32 == 0)));
  }
  else
  {
    v5 = *a1;
    v6 = a1[1];
    *(_QWORD *)a2 = *a1;
    *(_QWORD *)(a2 + 8) = v6;
    v7 = (unint64_t *)(a2 + 16);
    v8 = 4 * a4;
    do
    {
      HIDWORD(v9) = HIDWORD(v6);
      LODWORD(v9) = HIDWORD(v6);
      v11 = *v4++;
      result = v11;
      v12 = (AESSubBytesWordTable[BYTE5(v6)] | (AESSubBytesWordTable[(v9 >> 8) >> 24] << 24) | (AESSubBytesWordTable[((v9 >> 8) >> 16)] << 16) | (AESSubBytesWordTable[(unsigned __int16)(HIDWORD(v6) >> 8) >> 8] << 8)) ^ v11;
      v5 ^= v12 ^ ((v5 ^ v12) << 32);
      v6 ^= HIDWORD(v5) ^ ((v6 ^ HIDWORD(v5)) << 32);
      *v7 = v5;
      v7[1] = v6;
      v7 += 2;
      v13 = __OFSUB__(v8, 4);
      v8 -= 4;
    }
    while (!((v8 < 0) ^ v13 | (v8 == 0)));
  }
  return result;
}

uint64_t ccaes_arm_encrypt_key128(unint64_t *a1, uint64_t a2)
{
  return aes_key_expansion(a1, a2, 4, 10);
}

uint64_t ccaes_arm_encrypt_key192(unint64_t *a1, uint64_t a2)
{
  return aes_key_expansion(a1, a2, 6, 12);
}

uint64_t ccaes_arm_encrypt_key256(unint64_t *a1, uint64_t a2)
{
  return aes_key_expansion(a1, a2, 8, 14);
}

__n128 aes_dkey_expansion(unint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;

  aes_key_expansion(a1, a2, a3, a4);
  v4 = (__n128 *)(a2 + 16);
  v5 = a4 - 1;
  do
  {
    --v5;
    _Q0 = *v4;
    __asm { AESIMC          V0.16B, V0.16B }
    *v4++ = result;
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

double ccaes_arm_decrypt_key128(unint64_t *a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = aes_dkey_expansion(a1, a2, 4, 10).n128_u64[0];
  return result;
}

double ccaes_arm_decrypt_key192(unint64_t *a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = aes_dkey_expansion(a1, a2, 6, 12).n128_u64[0];
  return result;
}

double ccaes_arm_decrypt_key256(unint64_t *a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = aes_dkey_expansion(a1, a2, 8, 14).n128_u64[0];
  return result;
}

uint64_t ccaes_arm_encrypt_key(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v6;
  unint64_t v8;

  v6 = a2;
  v8 = a3;
  if (a3 > 32)
    v8 = (unint64_t)a3 >> 3;
  switch(v8)
  {
    case 0x10uLL:
      ccaes_arm_encrypt_key128(a4, v6);
      break;
    case 0x18uLL:
      ccaes_arm_encrypt_key192(a4, v6);
      break;
    case 0x20uLL:
      ccaes_arm_encrypt_key256(a4, v6);
      break;
    default:
      return -1;
  }
  return 0;
}

uint64_t ccaes_arm_decrypt_key(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v6;
  unint64_t v8;

  v6 = a2;
  v8 = a3;
  if (a3 > 32)
    v8 = (unint64_t)a3 >> 3;
  switch(v8)
  {
    case 0x10uLL:
      ccaes_arm_decrypt_key128(a4, v6);
      break;
    case 0x18uLL:
      ccaes_arm_decrypt_key192(a4, v6);
      break;
    case 0x20uLL:
      ccaes_arm_decrypt_key256(a4, v6);
      break;
    default:
      return -1;
  }
  return 0;
}

uint64_t ccaes_arm_encrypt_key_with_key_length_check(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 > 127)
  {
    if (a3 != 128 && a3 != 256 && a3 != 192)
      return 4294967289;
    return ccaes_arm_encrypt_key(a1, a2, a3, a4);
  }
  if ((unint64_t)a3 <= 0x20 && ((1 << a3) & 0x101010000) != 0)
    return ccaes_arm_encrypt_key(a1, a2, a3, a4);
  return 4294967289;
}

uint64_t ccmode_ctr_setctr(int a1, _QWORD *a2, void *__src)
{
  uint64_t v3;

  v3 = *a2;
  a2[1] = *(_QWORD *)(*a2 + 8);
  memcpy((char *)a2 + ((*(_QWORD *)(v3 + 8) + 7) & 0xFFFFFFFFFFFFFFF8) + 16, __src, *(_QWORD *)(v3 + 8));
  return 0;
}

uint64_t inc_uint(uint64_t result, unint64_t a2)
{
  _BYTE *v2;
  unint64_t v3;
  BOOL v5;

  if (a2)
  {
    v2 = (_BYTE *)(a2 + result - 1);
    v3 = 2;
    do
    {
      if (++*v2--)
        v5 = 1;
      else
        v5 = v3 > a2;
      ++v3;
    }
    while (!v5);
  }
  return result;
}

uint64_t update_with_ctr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ccctr_update(*(_QWORD *)(a1 + 56), a2, *(_QWORD *)(a1 + 64), a3, a1);
  return ccctr_update(*(_QWORD *)(a1 + 56), a2, 16, a3 + *(_QWORD *)(a1 + 64), a1 + 32);
}

uint64_t drbg_generate(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  const os_unfair_lock *v6;

  v6 = (const os_unfair_lock *)a1[3];
  if (v6)
    os_unfair_lock_assert_owner(v6);
  return ccdrbg_generate(a1[4], a1[5], a2, a3, 0, 0);
}

uint64_t ccn_zero(uint64_t a1, void *a2)
{
  return cc_clear(8 * a1, a2);
}

uint64_t ccdigest_final_64le(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  const void *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C874D8];
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = a2 + v6 + 8;
  if (v5 <= *(unsigned int *)(v7 + v5))
    *(_DWORD *)(v7 + v5) = 0;
  MEMORY[0x1E0C86820]();
  v9 = (_QWORD *)((char *)v21 - v8);
  memcpy((char *)v21 - v8, v11, v10 + 12);
  v12 = (char *)v9 + v6;
  v13 = (uint64_t)v9 + v6 + 8;
  v14 = (char *)(v13 + v5);
  v15 = *(unsigned int *)(v13 + v5);
  *v9 += (8 * v15);
  *(_DWORD *)(v13 + v5) = v15 + 1;
  *(_BYTE *)(v13 + v15) = 0x80;
  v16 = *(unsigned int *)(v13 + v5);
  if (v16 < 0x39)
  {
    if (v16 == 56)
      goto LABEL_9;
  }
  else
  {
    if (v16 <= 0x3F)
    {
      do
      {
        *(_DWORD *)v14 = v16 + 1;
        *(_BYTE *)(v13 + v16) = 0;
        v16 = *(unsigned int *)v14;
      }
      while (v16 < 0x40);
    }
    (*(void (**)(_QWORD *, uint64_t))(a1 + 48))(v9 + 1, 1);
    v16 = 0;
    v12 = (char *)v9 + *(_QWORD *)(a1 + 8);
    v13 = (uint64_t)(v12 + 8);
    v14 = &v12[*(_QWORD *)(a1 + 16) + 8];
    *(_DWORD *)v14 = 0;
  }
  do
  {
    *(_DWORD *)v14 = v16 + 1;
    *(_BYTE *)(v13 + v16) = 0;
    v16 = *(unsigned int *)v14;
  }
  while (v16 < 0x38);
LABEL_9:
  *((_QWORD *)v12 + 8) = *v9;
  (*(void (**)(_QWORD *, uint64_t))(a1 + 48))(v9 + 1, 1);
  if (*(_QWORD *)a1 >= 4uLL)
  {
    v17 = 0;
    v18 = 0;
    v19 = 1;
    do
    {
      *(_DWORD *)(a3 + v17) = *((_DWORD *)v9 + v18 + 2);
      v18 = v19++;
      v17 += 4;
    }
    while (v18 < *(_QWORD *)a1 >> 2);
  }
  return cc_clear(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) + 12, v9);
}

unint64_t md5_compress(unint64_t result, uint64_t a2, _DWORD *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  _DWORD *v85;

  v85 = (_DWORD *)result;
  if (a2)
  {
    v3 = *(_DWORD *)result;
    v4 = *(_DWORD *)(result + 4);
    v5 = *(_DWORD *)(result + 8);
    v6 = *(_DWORD *)(result + 12);
    do
    {
      v7 = a3[1];
      result = a3[2];
      v8 = a3[3];
      v10 = a3[4];
      v9 = a3[5];
      v11 = a3[6];
      v12 = a3[7];
      v13 = a3[8];
      v14 = a3[9];
      v15 = a3[10];
      v16 = a3[11];
      v17 = a3[12];
      v18 = a3[13];
      v20 = a3[14];
      v19 = a3[15];
      HIDWORD(v21) = v3 + (v5 & v4 | v6 & ~v4) - 680876936 + *a3;
      LODWORD(v21) = HIDWORD(v21);
      v22 = (v21 >> 25) + v4;
      HIDWORD(v21) = v6 + v7 - 389564586 + (v4 & v22 | v5 & ~v22);
      LODWORD(v21) = HIDWORD(v21);
      v23 = (v21 >> 20) + v22;
      HIDWORD(v21) = v5 + result + 606105819 + (v22 & v23 | v4 & ~v23);
      LODWORD(v21) = HIDWORD(v21);
      v24 = (v21 >> 15) + v23;
      HIDWORD(v21) = v4 + v8 - 1044525330 + (v23 & v24 | v22 & ~v24);
      LODWORD(v21) = HIDWORD(v21);
      v25 = (v21 >> 10) + v24;
      HIDWORD(v21) = v10 + v22 - 176418897 + (v24 & v25 | v23 & ~v25);
      LODWORD(v21) = HIDWORD(v21);
      v26 = (v21 >> 25) + v25;
      HIDWORD(v21) = v9 + v23 + 1200080426 + (v25 & v26 | v24 & ~v26);
      LODWORD(v21) = HIDWORD(v21);
      v27 = (v21 >> 20) + v26;
      HIDWORD(v21) = v11 + v24 - 1473231341 + (v26 & v27 | v25 & ~v27);
      LODWORD(v21) = HIDWORD(v21);
      v28 = (v21 >> 15) + v27;
      HIDWORD(v21) = v12 + v25 - 45705983 + (v27 & v28 | v26 & ~v28);
      LODWORD(v21) = HIDWORD(v21);
      v29 = (v21 >> 10) + v28;
      HIDWORD(v21) = v13 + v26 + 1770035416 + (v28 & v29 | v27 & ~v29);
      LODWORD(v21) = HIDWORD(v21);
      v30 = (v21 >> 25) + v29;
      HIDWORD(v21) = v14 + v27 - 1958414417 + (v29 & v30 | v28 & ~v30);
      LODWORD(v21) = HIDWORD(v21);
      v31 = (v21 >> 20) + v30;
      HIDWORD(v21) = v15 + v28 - 42063 + (v30 & v31 | v29 & ~v31);
      LODWORD(v21) = HIDWORD(v21);
      v32 = (v21 >> 15) + v31;
      HIDWORD(v21) = v16 + v29 - 1990404162 + (v31 & v32 | v30 & ~v32);
      LODWORD(v21) = HIDWORD(v21);
      v33 = (v21 >> 10) + v32;
      HIDWORD(v21) = v17 + v30 + 1804603682 + (v32 & v33 | v31 & ~v33);
      LODWORD(v21) = HIDWORD(v21);
      v34 = (v21 >> 25) + v33;
      HIDWORD(v21) = v18 + v31 - 40341101 + (v33 & v34 | v32 & ~v34);
      LODWORD(v21) = HIDWORD(v21);
      v35 = (v21 >> 20) + v34;
      HIDWORD(v21) = v20 + v32 - 1502002290 + (v34 & v35 | v33 & ~v35);
      LODWORD(v21) = HIDWORD(v21);
      v36 = (v21 >> 15) + v35;
      HIDWORD(v21) = v19 + v33 + 1236535329 + (v35 & v36 | v34 & ~v36);
      LODWORD(v21) = HIDWORD(v21);
      v37 = (v21 >> 10) + v36;
      HIDWORD(v21) = v7 + v34 - 165796510 + (v37 & v35 | v36 & ~v35);
      LODWORD(v21) = HIDWORD(v21);
      v38 = (v21 >> 27) + v37;
      HIDWORD(v21) = v11 + v35 - 1069501632 + (v38 & v36 | v37 & ~v36);
      LODWORD(v21) = HIDWORD(v21);
      v39 = (v21 >> 23) + v38;
      HIDWORD(v21) = v16 + v36 + 643717713 + (v39 & v37 | v38 & ~v37);
      LODWORD(v21) = HIDWORD(v21);
      v40 = (v21 >> 18) + v39;
      HIDWORD(v21) = *a3 + v37 - 373897302 + (v40 & v38 | v39 & ~v38);
      LODWORD(v21) = HIDWORD(v21);
      v41 = (v21 >> 12) + v40;
      HIDWORD(v21) = v9 + v38 - 701558691 + (v41 & v39 | v40 & ~v39);
      LODWORD(v21) = HIDWORD(v21);
      v42 = (v21 >> 27) + v41;
      HIDWORD(v21) = v15 + v39 + 38016083 + (v42 & v40 | v41 & ~v40);
      LODWORD(v21) = HIDWORD(v21);
      v43 = (v21 >> 23) + v42;
      HIDWORD(v21) = v19 + v40 - 660478335 + (v43 & v41 | v42 & ~v41);
      LODWORD(v21) = HIDWORD(v21);
      v44 = (v21 >> 18) + v43;
      HIDWORD(v21) = v10 + v41 - 405537848 + (v44 & v42 | v43 & ~v42);
      LODWORD(v21) = HIDWORD(v21);
      v45 = (v21 >> 12) + v44;
      HIDWORD(v21) = v14 + v42 + 568446438 + (v45 & v43 | v44 & ~v43);
      LODWORD(v21) = HIDWORD(v21);
      v46 = (v21 >> 27) + v45;
      HIDWORD(v21) = v20 + v43 - 1019803690 + (v46 & v44 | v45 & ~v44);
      LODWORD(v21) = HIDWORD(v21);
      v47 = (v21 >> 23) + v46;
      HIDWORD(v21) = v8 + v44 - 187363961 + (v47 & v45 | v46 & ~v45);
      LODWORD(v21) = HIDWORD(v21);
      v48 = (v21 >> 18) + v47;
      HIDWORD(v21) = v13 + v45 + 1163531501 + (v48 & v46 | v47 & ~v46);
      LODWORD(v21) = HIDWORD(v21);
      v49 = (v21 >> 12) + v48;
      HIDWORD(v21) = v18 + v46 - 1444681467 + (v49 & v47 | v48 & ~v47);
      LODWORD(v21) = HIDWORD(v21);
      v50 = (v21 >> 27) + v49;
      HIDWORD(v21) = result + v47 - 51403784 + (v50 & v48 | v49 & ~v48);
      LODWORD(v21) = HIDWORD(v21);
      v51 = (v21 >> 23) + v50;
      HIDWORD(v21) = v12 + v48 + 1735328473 + (v51 & v49 | v50 & ~v49);
      LODWORD(v21) = HIDWORD(v21);
      v52 = (v21 >> 18) + v51;
      HIDWORD(v21) = v17 + v49 - 1926607734 + ((v52 ^ v51) & v50 ^ v51);
      LODWORD(v21) = HIDWORD(v21);
      v53 = (v21 >> 12) + v52;
      HIDWORD(v21) = v9 + v50 - 378558 + (v52 ^ v51 ^ v53);
      LODWORD(v21) = HIDWORD(v21);
      v54 = (v21 >> 28) + v53;
      HIDWORD(v21) = v13 + v51 - 2022574463 + (v53 ^ v52 ^ v54);
      LODWORD(v21) = HIDWORD(v21);
      v55 = (v21 >> 21) + v54;
      HIDWORD(v21) = v16 + v52 + 1839030562 + (v54 ^ v53 ^ v55);
      LODWORD(v21) = HIDWORD(v21);
      v56 = (v21 >> 16) + v55;
      HIDWORD(v21) = v20 + v53 - 35309556 + (v55 ^ v54 ^ v56);
      LODWORD(v21) = HIDWORD(v21);
      v57 = (v21 >> 9) + v56;
      HIDWORD(v21) = v7 + v54 - 1530992060 + (v56 ^ v55 ^ v57);
      LODWORD(v21) = HIDWORD(v21);
      v58 = (v21 >> 28) + v57;
      HIDWORD(v21) = v10 + v55 + 1272893353 + (v57 ^ v56 ^ v58);
      LODWORD(v21) = HIDWORD(v21);
      v59 = (v21 >> 21) + v58;
      HIDWORD(v21) = v12 + v56 - 155497632 + (v58 ^ v57 ^ v59);
      LODWORD(v21) = HIDWORD(v21);
      v60 = (v21 >> 16) + v59;
      HIDWORD(v21) = v15 + v57 - 1094730640 + (v59 ^ v58 ^ v60);
      LODWORD(v21) = HIDWORD(v21);
      v61 = (v21 >> 9) + v60;
      HIDWORD(v21) = v18 + v58 + 681279174 + (v60 ^ v59 ^ v61);
      LODWORD(v21) = HIDWORD(v21);
      v62 = (v21 >> 28) + v61;
      HIDWORD(v21) = *a3 + v59 - 358537222 + (v61 ^ v60 ^ v62);
      LODWORD(v21) = HIDWORD(v21);
      v63 = (v21 >> 21) + v62;
      HIDWORD(v21) = v8 + v60 - 722521979 + (v62 ^ v61 ^ v63);
      LODWORD(v21) = HIDWORD(v21);
      v64 = (v21 >> 16) + v63;
      HIDWORD(v21) = v11 + v61 + 76029189 + (v63 ^ v62 ^ v64);
      LODWORD(v21) = HIDWORD(v21);
      v65 = (v21 >> 9) + v64;
      HIDWORD(v21) = v14 + v62 - 640364487 + (v64 ^ v63 ^ v65);
      LODWORD(v21) = HIDWORD(v21);
      v66 = (v21 >> 28) + v65;
      HIDWORD(v21) = v17 + v63 - 421815835 + (v65 ^ v64 ^ v66);
      LODWORD(v21) = HIDWORD(v21);
      v67 = (v21 >> 21) + v66;
      HIDWORD(v21) = v19 + v64 + 530742520 + (v66 ^ v65 ^ v67);
      LODWORD(v21) = HIDWORD(v21);
      v68 = (v21 >> 16) + v67;
      HIDWORD(v21) = result + v65 - 995338651 + (v67 ^ v66 ^ v68);
      LODWORD(v21) = HIDWORD(v21);
      v69 = (v21 >> 9) + v68;
      HIDWORD(v21) = *a3 + v66 - 198630844 + ((v69 | ~v67) ^ v68);
      LODWORD(v21) = HIDWORD(v21);
      v70 = (v21 >> 26) + v69;
      HIDWORD(v21) = v12 + v67 + 1126891415 + ((v70 | ~v68) ^ v69);
      LODWORD(v21) = HIDWORD(v21);
      v71 = (v21 >> 22) + v70;
      HIDWORD(v21) = v20 + v68 - 1416354905 + ((v71 | ~v69) ^ v70);
      LODWORD(v21) = HIDWORD(v21);
      v72 = (v21 >> 17) + v71;
      HIDWORD(v21) = v9 + v69 - 57434055 + ((v72 | ~v70) ^ v71);
      LODWORD(v21) = HIDWORD(v21);
      v73 = (v21 >> 11) + v72;
      HIDWORD(v21) = v17 + v70 + 1700485571 + ((v73 | ~v71) ^ v72);
      LODWORD(v21) = HIDWORD(v21);
      v74 = (v21 >> 26) + v73;
      HIDWORD(v21) = v8 + v71 - 1894986606 + ((v74 | ~v72) ^ v73);
      LODWORD(v21) = HIDWORD(v21);
      v75 = (v21 >> 22) + v74;
      HIDWORD(v21) = v15 + v72 - 1051523 + ((v75 | ~v73) ^ v74);
      LODWORD(v21) = HIDWORD(v21);
      v76 = (v21 >> 17) + v75;
      HIDWORD(v21) = v7 + v73 - 2054922799 + ((v76 | ~v74) ^ v75);
      LODWORD(v21) = HIDWORD(v21);
      v77 = (v21 >> 11) + v76;
      HIDWORD(v21) = v13 + v74 + 1873313359 + ((v77 | ~v75) ^ v76);
      LODWORD(v21) = HIDWORD(v21);
      v78 = (v21 >> 26) + v77;
      HIDWORD(v21) = v19 + v75 - 30611744 + ((v78 | ~v76) ^ v77);
      LODWORD(v21) = HIDWORD(v21);
      v79 = (v21 >> 22) + v78;
      HIDWORD(v21) = v11 + v76 - 1560198380 + ((v79 | ~v77) ^ v78);
      LODWORD(v21) = HIDWORD(v21);
      v80 = (v21 >> 17) + v79;
      HIDWORD(v21) = v18 + v77 + 1309151649 + ((v80 | ~v78) ^ v79);
      LODWORD(v21) = HIDWORD(v21);
      v81 = (v21 >> 11) + v80;
      HIDWORD(v21) = v10 + v78 - 145523070 + ((v81 | ~v79) ^ v80);
      LODWORD(v21) = HIDWORD(v21);
      v82 = (v21 >> 26) + v81;
      HIDWORD(v21) = v16 + v79 - 1120210379 + ((v82 | ~v80) ^ v81);
      LODWORD(v21) = HIDWORD(v21);
      v83 = (v21 >> 22) + v82;
      HIDWORD(v21) = result + v80 + 718787259 + ((v83 | ~v81) ^ v82);
      LODWORD(v21) = HIDWORD(v21);
      v84 = (v21 >> 17) + v83;
      v3 += v82;
      HIDWORD(v21) = v14 + v81 - 343485551 + ((v84 | ~v82) ^ v83);
      LODWORD(v21) = HIDWORD(v21);
      v4 += v84 + (v21 >> 11);
      v5 += v84;
      v6 += v83;
      *v85 = v3;
      v85[1] = v4;
      v85[2] = v5;
      v85[3] = v6;
      a3 += 16;
      --a2;
    }
    while (a2);
  }
  return result;
}

uint64_t drbg_reseed(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const os_unfair_lock *v10;
  uint64_t result;

  v10 = (const os_unfair_lock *)a1[3];
  if (v10)
    os_unfair_lock_assert_owner(v10);
  result = ccdrbg_reseed(a1[4], a1[5], a2, a3, a4, a5);
  if (!(_DWORD)result)
    a1[10] = a1[8];
  return result;
}

uint64_t ccdrbg_reseed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v6;
  uint64_t v12;
  char v14;

  v6 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v14 = v6;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 16))(a2, a3, a4, a5, a6);
  cc_disable_dit(&v14);
  return v12;
}

uint64_t ccrng_schedule_tree_notify_reseed(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;

  v2 = *(_BYTE **)(a1 + 16);
  v2[8] = 0;
  (*(void (**)(_BYTE *))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_BYTE **)(a1 + 24);
  v3[8] = 0;
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t ccrng_schedule_timer_notify_reseed(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(a1 + 16))();
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

uint64_t ccrng_schedule_notify_reseed(_BYTE *a1)
{
  a1[8] = 0;
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t ccentropy_get_seed(uint64_t (***a1)(_QWORD))
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = (**a1)(a1);
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccrng_getentropy_generate(int a1, unint64_t a2, char *buffer)
{
  unint64_t v4;
  size_t v5;

  if (a2)
  {
    v4 = a2;
    do
    {
      if (v4 >= 0x100)
        v5 = 256;
      else
        v5 = v4;
      if (getentropy(buffer, v5) == -1)
        cc_abort();
      buffer += v5;
      v4 -= v5;
    }
    while (v4);
  }
  return 0;
}

uint64_t ccentropy_rng_get_seed(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 8))();
}

uint64_t reseed(_QWORD *a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  _BYTE __s[48];
  uint64_t v18;

  v9 = a4;
  v18 = *MEMORY[0x1E0C874D8];
  if (!a1[10])
  {
    v14 = a1[8] + 16;
    if (v14 < a4 || v14 != a2)
      return 4294967233;
    __memcpy_chk();
    for (; v9; --v9)
      __s[v9 - 1] ^= *(_BYTE *)(a5 - 1 + v9);
    goto LABEL_6;
  }
  v11 = 4294967233;
  if (a2 <= 0x10000 && a4 <= 0x10000 && *(_QWORD *)(a1[7] + 16) <= a2)
  {
    v12 = derive((uint64_t)a1, __s, 2u, a4, a5, a6, a7, a8, a2);
    if ((_DWORD)v12)
    {
      v11 = v12;
      goto LABEL_7;
    }
LABEL_6:
    update((uint64_t)a1, (uint64_t)__s);
    v11 = 0;
    a1[6] = 1;
LABEL_7:
    cc_clear(a1[8] + 16, __s);
  }
  return v11;
}

uint64_t reseed_0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a2 > 0x10000)
    return 4294967233;
  result = 4294967233;
  if (a4 < 0x10001 && ***(_QWORD ***)a1 >> 1 <= a2)
  {
    update_1((size_t ***)a1, 2, a3, a4, a5, a6, a7, a8, a2);
    result = 0;
    *(_QWORD *)(a1 + 136) = 1;
  }
  return result;
}

uint64_t derive(uint64_t a1, void *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v15;
  _BYTE v16[8];
  _QWORD v17[6];

  v17[5] = *MEMORY[0x1E0C874D8];
  v15 = &a9;
  if (a3)
  {
    v10 = a3;
    v11 = v17;
    v12 = a3;
    do
    {
      v13 = v15;
      *v11 = *v15;
      v15 += 2;
      *(v11 - 1) = v13[1];
      v11 += 2;
      --v12;
    }
    while (v12);
  }
  else
  {
    v10 = 0;
  }
  return ccdrbg_df_derive_keys(*(uint64_t (***)(void))(a1 + 80), v10, (uint64_t)v16, *(_QWORD *)(a1 + 64) + 16, a2);
}

uint64_t ccdrbg_df_derive_keys(uint64_t (**a1)(void), uint64_t a2, uint64_t a3, rsize_t a4, void *a5)
{
  uint64_t v7;

  v7 = (*a1)();
  if ((_DWORD)v7)
    cc_clear(a4, a5);
  return v7;
}

uint64_t ccdrbg_df_bc_derive_keys(uint64_t a1, uint64_t a2, uint64_t a3, size_t a4, _QWORD *a5)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t updated;
  size_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v30;
  char *v31;
  size_t v32;
  size_t *v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD v36[8];
  __int128 v37;
  _QWORD __src[2];
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C874D8];
  MEMORY[0x1E0C86820]();
  v9 = (char *)&v30 - v8;
  v10 = MEMORY[0x1E0C86820]();
  v14 = (char *)&v30 - v13;
  v15 = 0;
  if (v11)
  {
    v16 = (uint64_t *)(v12 + 8);
    v17 = v11;
    do
    {
      v18 = *v16;
      v16 += 2;
      v15 += v18;
      --v17;
    }
    while (v17);
  }
  __src[0] = 0;
  __src[1] = 0;
  v39 = bswap32(v15);
  v40 = bswap32(a4);
  v37 = xmmword_1DEE29420;
  v35 = *(_QWORD *)(a1 + 16) + 16;
  if (!v35)
  {
LABEL_13:
    v24 = cccbc_init(v10);
    if (!(_DWORD)v24)
    {
      if (!a4)
      {
LABEL_26:
        v28 = 0;
        goto LABEL_27;
      }
      v25 = (_QWORD *)((char *)&v36[2] + *(_QWORD *)(a1 + 16));
      while (1)
      {
        v26 = (uint64_t)v25;
        cc_clear(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v14);
        v25 = a4 <= 0xF ? v36 : a5;
        v24 = cccbc_update(*(_QWORD *)(a1 + 8), (uint64_t)v9, (uint64_t)v14, 1, v26, (uint64_t)v25);
        if ((_DWORD)v24)
          break;
        if (a4 <= 0xF)
          memcpy(a5, v25, a4);
        if (a4 >= 0x10)
          v27 = 16;
        else
          v27 = a4;
        a5 = (_QWORD *)((char *)a5 + v27);
        a4 -= v27;
        if (!a4)
          goto LABEL_26;
      }
    }
    v28 = v24;
    goto LABEL_27;
  }
  v30 = a5;
  v31 = v9;
  v19 = 0;
  v20 = 0;
  v32 = 16 - (((_BYTE)v15 + 8) & 0xF);
  v33 = (size_t *)(v12 + 8);
  v34 = v11;
  while (1)
  {
    cc_clear(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v14);
    LODWORD(__src[0]) = bswap32(v19);
    v36[0] = 0;
    updated = update_0(*(_QWORD *)(a1 + 8), a1 + 32, (uint64_t)v14, (uint64_t)&v36[v20 / 8 + 2], v36, 0x18uLL, (char *)__src);
    if ((_DWORD)updated)
      break;
    v22 = v33;
    v23 = v34;
    if (v34)
    {
      do
      {
        updated = update_0(*(_QWORD *)(a1 + 8), a1 + 32, (uint64_t)v14, (uint64_t)&v36[v20 / 8 + 2], v36, *v22, (char *)*(v22 - 1));
        if ((_DWORD)updated)
          goto LABEL_28;
        v22 += 2;
      }
      while (--v23);
    }
    updated = update_0(*(_QWORD *)(a1 + 8), a1 + 32, (uint64_t)v14, (uint64_t)&v36[v20 / 8 + 2], v36, v32, (char *)&v37);
    if ((_DWORD)updated)
      break;
    ++v19;
    v20 += 16;
    if (v20 >= v35)
    {
      v10 = *(_QWORD *)(a1 + 8);
      a5 = v30;
      v9 = v31;
      goto LABEL_13;
    }
  }
LABEL_28:
  v28 = updated;
  v9 = v31;
LABEL_27:
  cc_clear(**(_QWORD **)(a1 + 8), v9);
  cc_clear(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v14);
  return v28;
}

uint64_t update(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  rsize_t v6;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C874D8];
  ccctr_context_size(*(uint64_t **)(a1 + 56));
  MEMORY[0x1E0C86820]();
  v5 = (char *)v8 - v4;
  inc_uint(a1 + 40, 8uLL);
  ccctr_init(*(_QWORD *)(a1 + 56));
  update_with_ctr(a1, (uint64_t)v5, a2);
  v6 = ccctr_context_size(*(uint64_t **)(a1 + 56));
  return cc_clear(v6, v5);
}

uint64_t update_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, size_t __n, char *__src)
{
  char *v7;
  size_t v8;
  unint64_t v14;
  BOOL v15;
  uint64_t result;

  v7 = __src;
  v8 = __n;
  v14 = 16 - *a5;
  if (*a5)
    v15 = __n >= v14;
  else
    v15 = 0;
  if (v15)
  {
    memcpy((void *)(a4 + *a5), __src, 16 - *a5);
    result = cccbc_update(a1, a2, a3, 1, a4, a4);
    if ((_DWORD)result)
      return result;
    v8 -= v14;
    v7 += v14;
    *a5 = 0;
  }
  if (v8 < 0x10)
  {
LABEL_11:
    if (v8)
    {
      memcpy((void *)(a4 + *a5), v7, v8);
      result = 0;
      *a5 += v8;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      result = cccbc_update(a1, a2, a3, 1, (uint64_t)v7, a4);
      if ((_DWORD)result)
        break;
      v8 -= 16;
      v7 += 16;
      if (v8 <= 0xF)
        goto LABEL_11;
    }
  }
  return result;
}

uint64_t update_1(size_t ***a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9;
  char *v10;
  size_t *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  int i;
  size_t *v19;
  size_t v20;
  uint64_t v22;
  unsigned __int8 v23;
  size_t *v24;
  uint64_t v25;

  v9 = a2;
  v22 = (uint64_t)&v22;
  v25 = *MEMORY[0x1E0C874D8];
  v10 = (char *)(a1 + 9);
  v11 = **a1;
  v12 = *v11;
  v24 = 0;
  v13 = MEMORY[0x1E0C86820](a1, a2, a3, a4);
  v15 = (uint64_t *)((char *)&v22 - v14);
  v16 = 0;
  v23 = 0;
  v17 = (char *)(v13 + 8);
  do
  {
    cchmac_init((uint64_t)v11, v15, v12, v17);
    cchmac_update((uint64_t)v11, v15, v12, v10);
    cchmac_update((uint64_t)v11, v15, 1uLL, (char *)&v23);
    v24 = (size_t *)&a9;
    for (i = v9; i; --i)
    {
      v19 = v24++;
      v20 = *v19;
      v24 = v19 + 2;
      cchmac_update((uint64_t)v11, v15, v20, (char *)v19[1]);
      v16 += v20;
    }
    cchmac_final((uint64_t)v11, v15, (uint64_t)v17);
    cchmac((uint64_t)v11, v12, (uint64_t)v17, v12, v10, (uint64_t)v10);
    if (!v16)
      break;
    ++v23;
  }
  while (v23 < 2u);
  return cc_clear(((v11[1] + v11[2] + 19) & 0xFFFFFFFFFFFFFFF8) + v11[1], v15);
}

uint64_t cccbc_update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v6;
  uint64_t v12;
  char v14;

  v6 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v14 = v6;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 24))(a2, a3, a4, a5, a6);
  cc_disable_dit(&v14);
  return v12;
}

uint64_t ccaes_arm_encrypt_cbc(uint64_t result, int8x16_t *a2, uint64_t a3, uint64_t a4, int8x16_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  int8x16_t *v7;
  BOOL v15;
  int8x16_t v17;

  if (a3)
  {
    v5 = *(unsigned int *)(result + 240);
    if ((_DWORD)v5 == 160 || (_DWORD)v5 == 192 || (_DWORD)v5 == 224)
    {
      do
      {
        v6 = v5 - 16;
        a4 += 16;
        _Q2 = *(int8x16_t *)result;
        v7 = (int8x16_t *)(result + 16);
        do
        {
          __asm
          {
            AESE            V0.16B, V2.16B
            AESMC           V0.16B, V0.16B
          }
          _Q2 = *v7++;
          v15 = v6 <= 16;
          v6 -= 16;
        }
        while (!v15);
        __asm { AESE            V0.16B, V2.16B }
        v17 = veorq_s8(_Q0, *v7);
        result = (uint64_t)v7->i64 - v5;
        *a5++ = v17;
        v15 = a3-- <= 1;
      }
      while (!v15);
      result = 0;
      *a2 = v17;
    }
    else
    {
      return -1;
    }
  }
  return result;
}

uint64_t cccbc_init(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = (*(uint64_t (**)(void))(a1 + 16))();
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccaes_arm_encrypt_key_with_length_check(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 > 127)
  {
    if (a3 != 128 && a3 != 256 && a3 != 192)
      return 4294967289;
    return ccaes_arm_encrypt_key(a1, a2, a3, a4);
  }
  if ((unint64_t)a3 <= 0x20 && ((1 << a3) & 0x101010000) != 0)
    return ccaes_arm_encrypt_key(a1, a2, a3, a4);
  return 4294967289;
}

unint64_t ccrsa_block_size(uint64_t a1)
{
  return ccn_write_uint_size(*(_QWORD *)a1, (unint64_t *)(a1 + 24));
}

void *ccsha384_di()
{
  if (MEMORY[0xFFFFFC010] < 0)
    return &ccsha384_vng_arm_hw_di;
  else
    return &ccsha384_vng_arm_di;
}

uint64_t ccrsa_priv_crypt(uint64_t *a1, uint64_t *a2, unint64_t *a3)
{
  char v6;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD v27[4];
  void (*v28)(uint64_t);
  char v29;

  v6 = 0;
  v29 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v29 = v6;
  v12 = *a1;
  v13 = sizeof_struct_ccrns_mul_modulus();
  v14 = sizeof_struct_ccpolyzp_po2cyc();
  v15 = (v13 + v14 - 1) / v14 + 11 * v12;
  v16 = CCRSA_CRT_POWER_BLINDED_WORKSPACE_N(v12);
  if (v15 + 1 > v16)
    v17 = v15 + 1;
  else
    v17 = v16;
  v18 = cc_malloc_clear(8 * v17 + 16 * v12);
  v27[0] = v18;
  v19 = *a1;
  v20 = sizeof_struct_ccrns_mul_modulus();
  v21 = sizeof_struct_ccpolyzp_po2cyc();
  v22 = (v20 + v21 - 1) / v21 + 11 * v19;
  v23 = CCRSA_CRT_POWER_BLINDED_WORKSPACE_N(v19);
  if (v22 + 1 > v23)
    v24 = v22 + 1;
  else
    v24 = v23;
  v27[1] = v24 + 2 * v19;
  v27[2] = 0;
  v27[3] = cc_ws_alloc;
  v28 = cc_ws_free;
  if (v18)
  {
    v25 = ccrsa_priv_crypt_ws((uint64_t)v27, a1, a2, a3);
    v28((uint64_t)v27);
  }
  else
  {
    v25 = 4294967283;
  }
  cc_disable_dit(&v29);
  return v25;
}

uint64_t CCRSA_CRT_POWER_BLINDED_WORKSPACE_N(unint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v2 = (a1 >> 1) + 2;
  v3 = 5 * v2 + 3;
  v4 = sizeof_struct_ccrns_mul_modulus();
  v5 = sizeof_struct_ccpolyzp_po2cyc();
  v6 = 2 * v2;
  v7 = (v4 + v5 - 1) / v5 + 12 * v2 + 1;
  v8 = 2 * a1;
  v9 = 4 * v2;
  if (2 * a1 <= 4 * v2)
    v10 = 4 * v2;
  else
    v10 = 2 * a1;
  if (v10 <= 2 * v2)
    v10 = 2 * v2;
  if (v3 <= v7)
    v11 = (v4 + v5 - 1) / v5 + 12 * v2 + 1;
  else
    v11 = 5 * v2 + 3;
  if (v8 <= v9)
    v12 = 4 * v2;
  else
    v12 = 2 * a1;
  if (v6 > v12)
    v12 = 2 * v2;
  if (v6 <= v9)
    v13 = 4 * v2;
  else
    v13 = 2 * v2;
  if (v6 <= v8)
    v6 = 2 * a1;
  if (v8 <= v9)
    v6 = v13;
  if (v3 <= v12)
    v14 = (v4 + v5 - 1) / v5 + 12 * v2 + 1;
  else
    v14 = 5 * v2 + 3;
  if (v3 > v12)
    v6 = v14;
  if (v7 <= v10)
    v15 = v6;
  else
    v15 = v11;
  return v15 - v2 + 8 * v2 + 10;
}

uint64_t ccrsa_priv_crypt_ws(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t *v8;

  v8 = ccrng(0);
  if (v8)
    return ccrsa_priv_crypt_blinded_ws(a1, (uint64_t (**)(_QWORD, uint64_t, uint64_t))v8, a2, a3, a4);
  else
    return 0xFFFFFFFFLL;
}

uint64_t *ccrng(_DWORD *a1)
{
  ccrng_prng(a1);
  return &rng_ctx;
}

uint64_t *ccrng_prng(_DWORD *a1)
{
  char v2;
  char v9;

  v2 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v9 = v2;
  if (ccrng_prng_init_pred != -1)
  {
    _os_once();
    if (!a1)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (a1)
LABEL_7:
    *a1 = 0;
LABEL_8:
  cc_disable_dit(&v9);
  return &rng_ctx;
}

BOOL ccrsa_import_priv(unint64_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  char v3;
  _BOOL8 v9;
  char v11;

  v3 = 0;
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v11 = v3;
  v9 = ccder_decode_rsa_priv(a1, a3, &a3[a2]) == 0;
  cc_disable_dit(&v11);
  return v9;
}

unsigned __int8 *ccder_decode_rsa_priv(unint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  char v6;
  void *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  _QWORD v16[4];
  void (*v17)(uint64_t);
  char v18;

  v6 = 0;
  v18 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v18 = v6;
  v12 = cc_malloc_clear(40 * *a1 + 24);
  v13 = 5 * *a1 + 3;
  v16[0] = v12;
  v16[1] = v13;
  v16[2] = 0;
  v16[3] = cc_ws_alloc;
  v17 = cc_ws_free;
  if (v12)
  {
    v14 = ccder_decode_rsa_priv_ws((uint64_t)v16, a1, a2, a3);
    v17((uint64_t)v16);
  }
  else
  {
    v14 = 0;
  }
  cc_disable_dit(&v18);
  return v14;
}

uint64_t ccrsa_export_priv_size(_QWORD *a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = ccder_encode_rsa_priv_size(a1);
  cc_disable_dit(&v9);
  return v7;
}

BOOL ccrsa_export_priv(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  char v3;
  _BOOL8 v9;
  char v11;

  v3 = 0;
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v11 = v3;
  v9 = ccder_encode_rsa_priv(a1, a3, a3 + a2) != a3;
  cc_disable_dit(&v11);
  return v9;
}

uint64_t ccec_der_export_priv_size(uint64_t *a1, uint64_t a2, int a3)
{
  char v6;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v16;

  v6 = 0;
  v16 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v16 = v6;
  v12 = cczp_bitlen(*a1 + 40 * *(_QWORD *)*a1 + 32);
  if (a3)
    v13 = ((unint64_t)(cczp_bitlen(*a1) + 7) >> 2) | 1;
  else
    v13 = 0;
  v14 = ccder_encode_eckey_size((unint64_t)(v12 + 7) >> 3, a2, v13);
  cc_disable_dit(&v16);
  return v14;
}

uint64_t ccder_sizeof_eckey(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v6 = ccder_sizeof_uint64(1uLL);
  v7 = ccder_sizeof(4, a1) + v6;
  if (a2)
  {
    v8 = ccder_sizeof_oid(a2);
    v7 += ccder_sizeof(0xA000000000000000, v8);
  }
  if (a3)
  {
    v9 = ccder_sizeof(3, a3 + 1);
    v7 += ccder_sizeof(0xA000000000000001, v9);
  }
  return ccder_sizeof(0x2000000000000010, v7);
}

uint64_t ccder_sizeof_uint64(unint64_t a1)
{
  return ccder_sizeof_implicit_uint64(2, a1);
}

uint64_t ccder_sizeof_implicit_uint64(uint64_t a1, unint64_t a2)
{
  unint64_t v3[2];

  v3[1] = *MEMORY[0x1E0C874D8];
  v3[0] = a2;
  return ccder_sizeof_implicit_integer(a1, 1, v3);
}

uint64_t ccec_der_export_priv(uint64_t **a1, const void *a2, int a3, uint64_t a4, uint64_t a5)
{
  char v10;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t (*v27)(_QWORD *, uint64_t);
  void (*v28)(uint64_t);
  char v29;

  v10 = 0;
  v29 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v29 = v10;
  v16 = *a1;
  v25[0] = cc_malloc_clear(24 * **a1 + 8);
  v25[1] = 3 * *v16 + 1;
  v26 = 0;
  v27 = cc_ws_alloc;
  v28 = cc_ws_free;
  if (v25[0])
  {
    v17 = **a1;
    v18 = (unint64_t)(cczp_bitlen((uint64_t)&(*a1)[5 * v17 + 4]) + 7) >> 3;
    v19 = (char *)cc_ws_alloc(v25, v17);
    if ((ccn_write_uint_padded_ct(v17, (unint64_t *)&a1[3 * **a1 + 2], v18, v19) & 0x80000000) != 0)
    {
      v21 = 4294967289;
    }
    else
    {
      if (a3)
        v20 = ((unint64_t)(cczp_bitlen((uint64_t)*a1) + 7) >> 2) | 1;
      else
        v20 = 0;
      v22 = (char *)v27(v25, (2 * v17) | 1);
      if (a3)
      {
        v23 = ccec_export_pub((uint64_t)a1, v22);
        if ((_DWORD)v23)
        {
          v21 = v23;
          goto LABEL_17;
        }
      }
      if (ccder_encode_eckey(v18, (uint64_t)v19, a2, v20, v22, a5, a5 + a4) == a5)
        v21 = 0;
      else
        v21 = 0xFFFFFFFFLL;
    }
    v26 = 0;
LABEL_17:
    v28((uint64_t)v25);
    goto LABEL_18;
  }
  v21 = 4294967283;
LABEL_18:
  cc_disable_dit(&v29);
  return v21;
}

uint64_t ccder_encode_eckey(uint64_t a1, uint64_t a2, const void *a3, unint64_t a4, const void *a5, uint64_t a6, uint64_t a7)
{
  char v7;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v7 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v7 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v7 = 1;
    }
  }
  v17 = v7;
  if (a7)
  {
    v15 = a6;
    v16 = a7;
    if (ccder_blob_encode_eckey(&v15, a1, a2, a3, a4, a5))
      v13 = v16;
    else
      v13 = 0;
  }
  else
  {
    v13 = 0;
  }
  cc_disable_dit(&v17);
  return v13;
}

uint64_t ccder_blob_encode_eckey(uint64_t *a1, uint64_t a2, uint64_t a3, const void *a4, unint64_t a5, const void *a6)
{
  char v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  char v21;

  v10 = 0;
  v21 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v21 = v10;
  if (a2
    && ((v16 = a1[1], !a5)
     || !a6
     || (v20 = 0, ccder_blob_encode_body(a1, a5, a6))
     && ccder_blob_encode_body(a1, 1uLL, &v20)
     && ccder_blob_encode_tl(a1, 3uLL, v16 - a1[1])
     && ccder_blob_encode_tl(a1, 0xA000000000000001, v16 - a1[1]))
    && (!a4
     || (v17 = a1[1], ccder_blob_encode_oid(a1, a4))
     && ccder_blob_encode_tl(a1, 0xA000000000000000, v17 - a1[1]))
    && ccder_blob_encode_raw_octet_string((uint64_t)a1, a2, a3)
    && ccder_blob_encode_uint64(a1, 1uLL))
  {
    v18 = ccder_blob_encode_tl(a1, 0x2000000000000010uLL, v16 - a1[1]);
  }
  else
  {
    v18 = 0;
  }
  cc_disable_dit(&v21);
  return v18;
}

uint64_t ccder_blob_encode_uint64(uint64_t *a1, unint64_t a2)
{
  return ccder_blob_encode_implicit_uint64(a1, 2uLL, a2);
}

uint64_t ccder_blob_encode_raw_octet_string(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ccder_blob_encode_implicit_raw_octet_string(a1, 4, a2, a3);
}

uint64_t ccder_blob_encode_implicit_uint64(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4[2];

  v4[1] = *MEMORY[0x1E0C874D8];
  v4[0] = a3;
  return ccder_blob_encode_implicit_integer(a1, a2, 1uLL, v4);
}

uint64_t ccrsa_priv_crypt_blinded_ws(uint64_t a1, uint64_t (**a2)(_QWORD, uint64_t, uint64_t), uint64_t *a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int inited;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64x2_t v52;
  void *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *v83;

  v10 = *a3;
  v11 = ccrsa_ctx_private_zp(a3);
  v12 = cczp_n(v11);
  v13 = ccrsa_ctx_private_zp(a3);
  v14 = (_QWORD *)ccrsa_ctx_private_zp(a3);
  v15 = cczp_n(v13 + 16 * *v14 + 32);
  v16 = ccrsa_ctx_private_zp(a3);
  v17 = v16 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a3);
  v18 = (_QWORD *)ccrsa_ctx_private_zp(a3);
  if (ccn_bitlen(v12, (unint64_t *)(v17 + 16 * *v18 + 64)) < 2)
    return 4294967268;
  v19 = ccrsa_ctx_private_zp(a3);
  v20 = v19 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a3);
  v21 = v20 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a3);
  v22 = (_QWORD *)ccrsa_ctx_private_zp(a3);
  if (ccn_bitlen(v15, (unint64_t *)(v21 + 8 * *v22 + 64)) < 2)
    return 4294967268;
  v23 = a3 + 3;
  if (ccn_bitlen(v10, (unint64_t *)&a3[2 * *a3 + 4]) < 2)
    return 4294967268;
  if ((ccn_cmp(v10, a5, (unint64_t *)a3 + 3) & 0x80000000) == 0)
    return 4294967273;
  v74 = a4;
  v72 = *(_QWORD *)(a1 + 16);
  v70 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v10);
  v71 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v10);
  ccn_set(v10, v71, a5);
  v79 = ccrsa_ctx_private_zp(a3);
  v26 = ccrsa_ctx_private_zp(a3);
  v82 = v26 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a3) + 32;
  v62 = ccrsa_ctx_private_zp(a3);
  v61 = *(_QWORD *)ccrsa_ctx_private_zp(a3);
  v60 = *(_QWORD *)ccrsa_ctx_private_zp(a3);
  v67 = ccrsa_ctx_private_zp(a3);
  v66 = *(_QWORD *)ccrsa_ctx_private_zp(a3);
  v65 = *(_QWORD *)ccrsa_ctx_private_zp(a3);
  v64 = *(_QWORD *)ccrsa_ctx_private_zp(a3);
  v59 = ccrsa_ctx_private_zp(a3);
  v58 = *(_QWORD *)ccrsa_ctx_private_zp(a3);
  v57 = *(_QWORD *)ccrsa_ctx_private_zp(a3);
  v56 = *(_QWORD *)ccrsa_ctx_private_zp(a3);
  v55 = *(_QWORD *)ccrsa_ctx_private_zp(a3);
  v80 = cczp_n(v82);
  v27 = cczp_n(v79);
  v69 = *(_QWORD *)(a1 + 16);
  v28 = 2 * (v27 + 1);
  v29 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v28);
  v76 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v27 + 1);
  v81 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v27 + 1);
  v73 = v27 + 1;
  v75 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v27 + 1);
  v77 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 6);
  v63 = v28;
  v83 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v28 + 4);
  v30 = cczp_bitlen(v79);
  v31 = -28;
  if (v30 >= cczp_bitlen(v82) && v27 >= v80)
  {
    v32 = (*a2)(a2, 48, v77);
    if (v32
      || (ccn_mux_seed_mask(*(_QWORD *)v77),
          *v83 = v80 + 1,
          v33 = cczp_prime(v82),
          v83[v80 + 3] = ccn_mul1(v80, v83 + 3, v33, *(_QWORD *)v77 & 0xFFFFFFFELL | 1),
          (v32 = cczp_init_ws(a1, v83)) != 0))
    {
      v31 = v32;
      v23 = a3 + 3;
    }
    else
    {
      v34 = cczp_n((uint64_t)a3);
      v35 = (void *)cczp_prime(v82);
      if (v80)
        ccn_set(v80, v29, v35);
      ccn_zero(v34 - v80 + 1, &v29[v80]);
      ccn_set_bit((uint64_t)v29, 0, 0);
      ccn_set(v80, v76, (void *)(v67 + 16 * v66 + 16 * v65 + 8 * v64 + 64));
      v68 = &v76[v80];
      *v68 = ccn_addmul1(v80, v76, v29, *(unsigned int *)(v77 + 8));
      v36 = cczp_prime(v82);
      v29[v80] = ccn_mul1(v80, v29, v36, *(unsigned int *)(v77 + 16));
      v37 = cczp_n((uint64_t)a3) + 1;
      v38 = cczp_n((uint64_t)a3);
      ccn_addn(v37, v29, v29, v38, (uint64_t *)a5);
      v39 = cczp_n((uint64_t)a3);
      cczp_modn_ws(a1, v83, v29, v39 + 1, (char *)v29);
      v40 = cczp_bitlen(v82);
      cczp_mm_power_ws(a1, v83, v75, v29, v40 + 32, v76);
      *v83 = v73;
      v41 = cczp_prime(v79);
      v83[v27 + 3] = ccn_mul1(v27, v83 + 3, v41, *(_QWORD *)(v77 + 24) & 0xFFFFFFFELL | 1);
      inited = cczp_init_ws(a1, v83);
      if (inited)
      {
        v31 = inited;
        v23 = a3 + 3;
      }
      else
      {
        v43 = cczp_n((uint64_t)a3);
        v44 = (void *)cczp_prime(v79);
        v23 = a3 + 3;
        if (v27)
          ccn_set(v27, v29, v44);
        ccn_zero(v43 - v27 + 1, &v29[v27]);
        ccn_set_bit((uint64_t)v29, 0, 0);
        ccn_set(v27, v76, (void *)(v62 + 16 * v61 + 16 * v60 + 64));
        v76[v27] = ccn_addmul1(v27, v76, v29, *(unsigned int *)(v77 + 32));
        v45 = cczp_prime(v79);
        v46 = ccn_mul1(v27, v29, v45, *(unsigned int *)(v77 + 40));
        v78 = &v29[v27];
        *v78 = v46;
        v47 = cczp_n((uint64_t)a3) + 1;
        v48 = cczp_n((uint64_t)a3);
        ccn_addn(v47, v29, v29, v48, (uint64_t *)a5);
        v49 = cczp_n((uint64_t)a3);
        cczp_modn_ws(a1, v83, v29, v49 + 1, (char *)v29);
        v50 = cczp_bitlen(v79);
        cczp_mm_power_ws(a1, v83, v81, v29, v50 + 32, v76);
        v51 = (void *)cczp_prime((uint64_t)v83);
        if (v27 != -1)
          ccn_set(v73, v29, v51);
        ccn_zero(2, &v29[v73]);
        ccn_shift_left_multi(v27 + 3, (uint64_t)v29, (uint64_t)v29, 0x21uLL, v52);
        ccn_addn(v27 + 3, v29, v29, v73, v81);
        ccn_subn(v27 + 3, v29, v29, v80 + 1, (unint64_t *)v75);
        cczp_modn_ws(a1, v83, v81, v27 + 3, (char *)v29);
        if (v27)
          ccn_set(v27, v29, (void *)(v59 + 16 * v58 + 16 * v57 + 8 * v56 + 8 * v55 + 64));
        ccn_zero(1, v78);
        cczp_mul_ws(a1, (uint64_t)v83);
        v53 = (void *)cczp_prime(v82);
        if (v80)
          ccn_set(v80, v76, v53);
        ccn_zero(v73 - v80, v68);
        ccn_mul_ws(a1, v73, (uint64_t)v29, (uint64_t)v76, (uint64_t)v81);
        ccn_addn(v63, v29, v29, v80 + 1, v75);
        cczp_modn_ws(a1, a3, v74, v63, (char *)v29);
        v31 = 0;
      }
    }
  }
  *(_QWORD *)(a1 + 16) = v69;
  cczp_mm_power_fast_ws(a1, a3, v70, (unint64_t *)v74, &v23[2 * *a3 + 1]);
  v54 = ccn_cmp(v10, (unint64_t *)v70, (unint64_t *)v71);
  v24 = ((((v31 | ((unint64_t)v31 >> 32)) + 0xFFFFFFFF) >> 32) - 1) & 0xFFFFFFE5 & -(((v54 | ((unint64_t)(int)v54 >> 32)) + 0xFFFFFFFF) >> 32) | v31;
  memset(v71, 170, 8 * v10);
  ccn_mux(v10, ((v24 | ((unint64_t)(int)v24 >> 32)) + 0xFFFFFFFF) >> 32, v74, (uint64_t *)v71, v74);
  *(_QWORD *)(a1 + 16) = v72;
  return v24;
}

uint64_t ccn_set_bit(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = 1 << a2;
  v4 = (a2 >> 3) & 0x1FFFFFFFFFFFFFF8;
  if (a3)
    v5 = *(_QWORD *)(result + v4) | v3;
  else
    v5 = *(_QWORD *)(result + v4) & ~v3;
  *(_QWORD *)(result + v4) = v5;
  return result;
}

uint64_t cczp_mm_power_ws(uint64_t a1, const void *a2, uint64_t *a3, unint64_t *a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v12 = cczp_n((uint64_t)a2);
  v13 = (unint64_t *)cczp_prime((uint64_t)a2);
  if ((ccn_cmp(v12, a4, v13) & 0x80000000) == 0)
    return 4294967289;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v12 + 4);
  v17 = cczp_n((uint64_t)a2);
  memcpy(v16, a2, 16 * v17 + 32);
  v16[2] = cczp_montgomery_funcs;
  cczp_mm_to_ws(a1, v16, a3, (uint64_t)a4);
  v14 = cczp_power_ws(a1, (uint64_t)v16, a3, (unint64_t *)a3, a5, a6);
  if (!(_DWORD)v14)
    cczp_mm_from_ws(a1, v16, a3, a3);
  *(_QWORD *)(a1 + 16) = v15;
  return v14;
}

unsigned __int8 *ccder_decode_rsa_priv_ws(uint64_t a1, unint64_t *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  BOOL v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *result;
  unsigned __int8 *v14;
  unint64_t v15;
  _QWORD *v16;
  unsigned __int8 *v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  uint64x2_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned __int8 *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unsigned __int8 *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;

  v53 = a4;
  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = ccder_decode_constructed_tl(0x2000000000000010, &v53, a3, a4);
  v52 = 0;
  v9 = ccder_decode_uint(1uLL, &v52, v8, v53);
  if (v9)
    v10 = v52 == 0;
  else
    v10 = 0;
  if (!v10)
    goto LABEL_17;
  v11 = ccder_decode_uint(v6, a2 + 3, v9, v53);
  v12 = ccder_decode_uint(v6, &a2[2 * *a2 + 4], v11, v53);
  result = ccder_decode_uint(v6, &a2[3 * *a2 + 4], v12, v53);
  if (result)
  {
    v14 = result;
    if (cczp_init_ws(a1, a2))
      goto LABEL_17;
    v15 = (((32 * v6) & 0x7FFFFFFFFFFFFFC0) + 64) >> 6;
    v16 = (_QWORD *)ccrsa_ctx_private_zp(a2);
    result = ccder_decode_uint(v15, v16 + 3, v14, v53);
    if (!result)
      goto LABEL_16;
    v17 = result;
    v18 = (unint64_t *)cczp_prime((uint64_t)v16);
    *v16 = (ccn_bitlen(v15, v18) + 63) >> 6;
    if (cczp_init_ws(a1, v16))
      goto LABEL_17;
    v19 = ccrsa_ctx_private_zp(a2);
    v20 = v19 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a2);
    result = ccder_decode_uint(v15, (_QWORD *)(v20 + 56), v17, v53);
    if (!result)
      goto LABEL_16;
    v21 = result;
    v22 = v20 + 32;
    v23 = (unint64_t *)cczp_prime(v20 + 32);
    *(_QWORD *)(v20 + 32) = (ccn_bitlen(v15, v23) + 63) >> 6;
    if (cczp_init_ws(a1, (_QWORD *)(v20 + 32))
      || (v24 = cczp_bitlen((uint64_t)v16), v24 < cczp_bitlen(v20 + 32)))
    {
LABEL_17:
      result = 0;
      goto LABEL_16;
    }
    v49 = v21;
    v51 = v7;
    v25 = cczp_n((uint64_t)v16);
    v26 = cczp_prime((uint64_t)v16);
    v27 = cczp_n(v20 + 32);
    v28 = (unint64_t *)cczp_prime(v20 + 32);
    v50 = *(_QWORD *)(a1 + 16);
    v29 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v25 + 1);
    v29[v25] = *(_QWORD *)(v26 + 8 * v25 - 8) >> 63;
    ccn_shift_left(v25, (uint64_t)v29, v26, 1uLL, v30);
    v31 = ccn_cmpn(v25 + 1, v29, v27, v28);
    *(_QWORD *)(a1 + 16) = v50;
    if (v31 ^ 1u | ((unint64_t)v31 >> 32))
    {
      result = 0;
    }
    else
    {
      v32 = cczp_n((uint64_t)v16);
      v33 = ccrsa_ctx_private_zp(a2);
      v34 = v33 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a2);
      v35 = (_QWORD *)ccrsa_ctx_private_zp(a2);
      v36 = ccder_decode_uint(v32, (_QWORD *)(v34 + 16 * *v35 + 64), v49, v53);
      v37 = cczp_n(v22);
      v38 = ccrsa_ctx_private_zp(a2);
      v39 = v38 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a2);
      v40 = v39 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a2);
      v41 = (_QWORD *)ccrsa_ctx_private_zp(a2);
      v42 = ccder_decode_uint(v37, (_QWORD *)(v40 + 8 * *v41 + 64), v36, v53);
      v43 = cczp_n((uint64_t)v16);
      v44 = ccrsa_ctx_private_zp(a2);
      v45 = v44 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a2);
      v46 = v45 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a2);
      v47 = v46 + 8 * *(_QWORD *)ccrsa_ctx_private_zp(a2);
      v48 = (_QWORD *)ccrsa_ctx_private_zp(a2);
      result = ccder_decode_uint(v43, (_QWORD *)(v47 + 8 * *v48 + 64), v42, v53);
    }
    v7 = v51;
  }
LABEL_16:
  *(_QWORD *)(a1 + 16) = v7;
  return result;
}

uint64_t ccder_encode_rsa_priv(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t *v50;
  char v52;
  unint64_t v53[2];

  v5 = 0;
  v53[1] = *MEMORY[0x1E0C874D8];
  v52 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v52 = v5;
  v11 = *a1;
  v53[0] = 0;
  v49 = &a1[3 * v11 + 4];
  v50 = &a1[2 * v11 + 4];
  v48 = ccrsa_ctx_private_zp(a1);
  v12 = ccrsa_ctx_private_zp(a1);
  v13 = v12 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a1) + 32;
  v14 = ccrsa_ctx_private_zp(a1);
  v47 = cczp_n(v14);
  v15 = ccrsa_ctx_private_zp(a1);
  v16 = v15 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a1);
  v17 = (unint64_t *)(v16 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a1) + 64);
  v18 = ccrsa_ctx_private_zp(a1);
  v19 = (_QWORD *)ccrsa_ctx_private_zp(a1);
  v20 = cczp_n(v18 + 16 * *v19 + 32);
  v21 = ccrsa_ctx_private_zp(a1);
  v22 = v21 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a1);
  v23 = v22 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a1);
  v24 = (unint64_t *)(v23 + 8 * *(_QWORD *)ccrsa_ctx_private_zp(a1) + 64);
  v25 = ccrsa_ctx_private_zp(a1);
  v26 = cczp_n(v25);
  v27 = ccrsa_ctx_private_zp(a1);
  v28 = v27 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a1);
  v29 = v28 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a1);
  v30 = v29 + 8 * *(_QWORD *)ccrsa_ctx_private_zp(a1);
  v31 = (unint64_t *)(v30 + 8 * *(_QWORD *)ccrsa_ctx_private_zp(a1) + 64);
  v32 = ccder_encode_integer(v26, v31, a2, a3);
  v33 = ccder_encode_integer(v20, v24, a2, v32);
  v34 = ccder_encode_integer(v47, v17, a2, v33);
  v35 = cczp_n(v13);
  v36 = (unint64_t *)cczp_prime(v13);
  v37 = ccder_encode_integer(v35, v36, a2, v34);
  v38 = cczp_n(v48);
  v39 = (unint64_t *)cczp_prime(v48);
  v40 = ccder_encode_integer(v38, v39, a2, v37);
  v41 = ccder_encode_integer(v11, v49, a2, v40);
  v42 = ccder_encode_integer(v11, v50, a2, v41);
  v43 = ccder_encode_integer(v11, a1 + 3, a2, v42);
  v44 = ccder_encode_integer(1uLL, v53, a2, v43);
  v45 = ccder_encode_constructed_tl(0x2000000000000010uLL, a3, a2, v44);
  cc_disable_dit(&v52);
  return v45;
}

uint64_t ccder_encode_integer(unint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  if (!a4)
    return 0;
  v5 = a3;
  v6 = a4;
  if (ccder_blob_encode_integer(&v5, a1, a2))
    return v6;
  else
    return 0;
}

uint64_t ccder_blob_encode_integer(uint64_t *a1, unint64_t a2, unint64_t *a3)
{
  return ccder_blob_encode_implicit_integer(a1, 2uLL, a2, a3);
}

uint64_t ccder_encode_rsa_priv_size(_QWORD *a1)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v43;

  v2 = a1 + 3;
  v3 = *a1;
  v43 = 0;
  v4 = ccder_sizeof_integer(1, &v43);
  v5 = ccder_sizeof_integer(v3, v2) + v4;
  v6 = v5 + ccder_sizeof_integer(v3, &v2[2 * v3 + 1]);
  v7 = ccder_sizeof_integer(v3, &v2[3 * v3 + 1]);
  v8 = ccrsa_ctx_private_zp(a1);
  v9 = cczp_n(v8);
  v10 = ccrsa_ctx_private_zp(a1);
  v11 = (unint64_t *)cczp_prime(v10);
  v12 = v6 + ccder_sizeof_integer(v9, v11);
  v13 = ccrsa_ctx_private_zp(a1);
  v14 = (_QWORD *)ccrsa_ctx_private_zp(a1);
  v15 = cczp_n(v13 + 16 * *v14 + 32);
  v16 = ccrsa_ctx_private_zp(a1);
  v17 = (_QWORD *)ccrsa_ctx_private_zp(a1);
  v18 = (unint64_t *)cczp_prime(v16 + 16 * *v17 + 32);
  v19 = v12 + ccder_sizeof_integer(v15, v18) + v7;
  v20 = ccrsa_ctx_private_zp(a1);
  v21 = cczp_n(v20);
  v22 = ccrsa_ctx_private_zp(a1);
  v23 = v22 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a1);
  v24 = (_QWORD *)ccrsa_ctx_private_zp(a1);
  v25 = v19 + ccder_sizeof_integer(v21, (unint64_t *)(v23 + 16 * *v24 + 64));
  v26 = ccrsa_ctx_private_zp(a1);
  v27 = (_QWORD *)ccrsa_ctx_private_zp(a1);
  v28 = cczp_n(v26 + 16 * *v27 + 32);
  v29 = ccrsa_ctx_private_zp(a1);
  v30 = v29 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a1);
  v31 = v30 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a1);
  v32 = (_QWORD *)ccrsa_ctx_private_zp(a1);
  v33 = v25 + ccder_sizeof_integer(v28, (unint64_t *)(v31 + 8 * *v32 + 64));
  v34 = ccrsa_ctx_private_zp(a1);
  v35 = cczp_n(v34);
  v36 = ccrsa_ctx_private_zp(a1);
  v37 = v36 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a1);
  v38 = v37 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a1);
  v39 = v38 + 8 * *(_QWORD *)ccrsa_ctx_private_zp(a1);
  v40 = (_QWORD *)ccrsa_ctx_private_zp(a1);
  v41 = ccder_sizeof_integer(v35, (unint64_t *)(v39 + 8 * *v40 + 64));
  return ccder_sizeof(0x2000000000000010, v33 + v41);
}

uint64_t ccder_sizeof(uint64_t a1, unint64_t a2)
{
  uint64_t v3;

  v3 = ccder_sizeof_tag(a1);
  return v3 + a2 + ccder_sizeof_len(a2);
}

uint64_t ccder_sizeof_tag(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = a1 & 0x1FFFFFFFFFFFFFFFLL;
  v2 = 2;
  v3 = 3;
  v4 = 4;
  v5 = 5;
  if ((a1 & 0x1FFFFFFFFFFFFFFFuLL) >> 28)
    v5 = 6;
  if (v1 >= 0x200000)
    v4 = v5;
  if (v1 >= 0x4000)
    v3 = v4;
  if (v1 >= 0x80)
    v2 = v3;
  if (v1 >= 0x1F)
    return v2;
  else
    return 1;
}

uint64_t ccder_sizeof_len(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a1 < 0x80)
    return 1;
  v2 = 3;
  v3 = 4;
  v4 = 5;
  v5 = 6;
  v6 = 7;
  v7 = 8;
  if (HIBYTE(a1))
    v7 = 9;
  if (HIWORD(a1))
    v6 = v7;
  if (a1 >> 40)
    v5 = v6;
  if (HIDWORD(a1))
    v4 = v5;
  if (a1 >> 24)
    v3 = v4;
  if (a1 >= 0x10000)
    v2 = v3;
  if (a1 >= 0x100)
    return v2;
  else
    return 2;
}

uint64_t ccrsa_ctx_private_zp(_QWORD *a1)
{
  return (uint64_t)&a1[4 * *a1 + 4];
}

uint64_t ccder_sizeof_implicit_integer(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;

  v4 = ccn_write_int_size(a2, a3);
  return ccder_sizeof(a1, v4);
}

uint64_t ccder_blob_encode_implicit_integer(uint64_t *a1, unint64_t a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v8;
  uint64_t v9;
  _BYTE *v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  v8 = ccn_write_int_size(a3, a4);
  v9 = ccder_blob_reserve_tl(a1, a2, v8, &v11);
  if ((_DWORD)v9)
    ccn_write_int(a3, a4, v12 - (_QWORD)v11, v11);
  return v9;
}

unint64_t ccn_write_int_size(uint64_t a1, unint64_t *a2)
{
  char v2;
  unint64_t v8;
  unint64_t v9;
  char v11;

  v2 = 0;
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v11 = v2;
  v8 = ccn_bitlen(a1, a2);
  if ((v8 & 7) != 0)
    v9 = (v8 + 7) >> 3;
  else
    v9 = ((v8 + 7) >> 3) + 1;
  cc_disable_dit(&v11);
  return v9;
}

_BYTE *ccn_write_int(unint64_t a1, unint64_t *a2, unint64_t a3, _BYTE *a4)
{
  char v8;
  char v15;

  v8 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v15 = v8;
  if ((ccn_bitlen(a1, a2) & 7) == 0)
  {
    *a4++ = 0;
    --a3;
  }
  ccn_write_uint(a1, a2, a3, (uint64_t)a4);
  return cc_disable_dit(&v15);
}

_BYTE *ccn_write_uint(unint64_t a1, unint64_t *a2, unint64_t a3, uint64_t a4)
{
  char v8;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  char v24;

  v8 = 0;
  v24 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v24 = v8;
  v14 = ccn_write_uint_size(a1, a2);
  if (v14 >= a3)
    v15 = a3;
  else
    v15 = v14;
  v16 = a4 + v15;
  v17 = (v14 - v15) >> 3;
  v18 = (v14 - v15) & 7;
  v19 = a2[v17] >> (8 * v18);
  if (v15 >= 8)
  {
    do
    {
      v20 = v15 - 8;
      v21 = v18 - 8;
      do
      {
        *(_BYTE *)--v16 = v19;
        v19 >>= 8;
      }
      while (!__CFADD__(v21++, 1));
      if (v17 + 1 < a1)
        v19 = a2[++v17];
      v15 = v20 + v18;
      v18 = 0;
    }
    while (v15 > 7);
  }
  if (v15)
  {
    v22 = (_BYTE *)(v16 - 1);
    do
    {
      *v22-- = v19;
      v19 >>= 8;
      --v15;
    }
    while (v15);
  }
  return cc_disable_dit(&v24);
}

uint64_t ccder_blob_reserve_tl(uint64_t *a1, unint64_t a2, unint64_t a3, _QWORD *a4)
{
  uint64_t result;
  __int128 v9;

  v9 = 0uLL;
  *a4 = 0;
  a4[1] = 0;
  result = ccder_blob_reserve(a1, a3, &v9);
  if ((_DWORD)result)
  {
    result = ccder_blob_encode_tl(a1, a2, a3);
    if ((_DWORD)result)
    {
      *(_OWORD *)a4 = v9;
      return 1;
    }
  }
  return result;
}

uint64_t ccder_encode_constructed_tl(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  if (!a4)
    return 0;
  v5 = a3;
  v6 = a4;
  if (ccder_blob_encode_tl(&v5, a1, a2 - a4))
    return v6;
  else
    return 0;
}

uint64_t ccder_encode_tl(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  if (!a4)
    return 0;
  v5 = a3;
  v6 = a4;
  if (ccder_blob_encode_tl(&v5, a1, a2))
    return v6;
  else
    return 0;
}

uint64_t ccder_blob_encode_tl(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t result;

  result = ccder_blob_encode_len(a1, a3);
  if ((_DWORD)result)
    return ccder_blob_encode_tag(a1, a2);
  return result;
}

uint64_t ccder_blob_encode_len(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  if (HIDWORD(a2))
    return 0;
  v3 = *a1;
  v2 = a1[1];
  if (a2 > 0x7F)
  {
    if (a2 > 0xFF)
    {
      if (a2 >> 16)
      {
        if (a2 >> 24)
        {
          if (v3 + 5 <= v2)
          {
            *(_BYTE *)(v2 - 5) = -124;
            v4 = v2 - 5;
            *(_DWORD *)(v4 + 1) = bswap32(a2);
            goto LABEL_17;
          }
        }
        else if (v3 + 4 <= v2)
        {
          *(_BYTE *)(v2 - 4) = -125;
          v4 = v2 - 4;
          *(_WORD *)(v4 + 2) = bswap32(a2) >> 16;
          *(_BYTE *)(v4 + 1) = BYTE2(a2);
          goto LABEL_17;
        }
      }
      else if (v3 + 3 <= v2)
      {
        *(_BYTE *)(v2 - 3) = -126;
        v4 = v2 - 3;
        *(_WORD *)(v4 + 1) = bswap32(a2) >> 16;
        goto LABEL_17;
      }
    }
    else if (v3 + 2 <= v2)
    {
      *(_BYTE *)(v2 - 2) = -127;
      v4 = v2 - 2;
      *(_BYTE *)(v4 + 1) = a2;
      goto LABEL_17;
    }
    return 0;
  }
  if (v3 + 1 > v2)
    return 0;
  *(_BYTE *)(v2 - 1) = a2;
  v4 = v2 - 1;
LABEL_17:
  *a1 = v3;
  a1[1] = v4;
  return 1;
}

uint64_t ccder_blob_encode_tag(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64x2_t v11;
  int16x8_t v12;

  v3 = *a1;
  v2 = a1[1];
  v4 = a2 & 0x1FFFFFFFFFFFFFFFLL;
  if ((a2 & 0x1FFFFFFFFFFFFFFFLL) > 0x1E)
  {
    if (v4 <= 0x7F)
    {
      if ((unint64_t)(v2 - v3) < 2)
        return 0;
      *(_BYTE *)(v2 - 1) = a2;
      v6 = (_BYTE *)(v2 - 1);
LABEL_18:
      *(v6 - 1) = HIBYTE(a2) | 0x1F;
      v5 = v6 - 1;
      goto LABEL_19;
    }
    if (v4 >> 14)
    {
      if (v4 >> 21)
      {
        v9 = v2 - v3;
        if (v4 >> 28)
        {
          if (v9 < 6)
            return 0;
          v11 = (uint64x2_t)vdupq_n_s64(a2);
          v12 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v11, (uint64x2_t)xmmword_1DEE27C30), (int32x4_t)vshlq_u64(v11, (uint64x2_t)xmmword_1DEE27C20));
          v12.i64[0] = *(_QWORD *)&vmovn_s32((int32x4_t)v12) | 0x80008000800080;
          *(_DWORD *)(v2 - 5) = vmovn_s16(v12).u32[0];
          v6 = (_BYTE *)(v2 - 5);
          v6[4] = a2 & 0x7F;
          goto LABEL_18;
        }
        if (v9 < 5)
          return 0;
        *(_BYTE *)(v2 - 4) = (a2 >> 21) | 0x80;
        v6 = (_BYTE *)(v2 - 4);
        v6[3] = a2 & 0x7F;
        v6[2] = (a2 >> 7) | 0x80;
        v8 = a2 >> 14;
      }
      else
      {
        if ((unint64_t)(v2 - v3) < 4)
          return 0;
        *(_BYTE *)(v2 - 3) = (a2 >> 14) | 0x80;
        v6 = (_BYTE *)(v2 - 3);
        v6[2] = a2 & 0x7F;
        v8 = a2 >> 7;
      }
      v7 = v8 | 0x80;
    }
    else
    {
      if ((unint64_t)(v2 - v3) < 3)
        return 0;
      v7 = a2 & 0x7F;
      *(_BYTE *)(v2 - 2) = (a2 >> 7) | 0x80;
      v6 = (_BYTE *)(v2 - 2);
    }
    v6[1] = v7;
    goto LABEL_18;
  }
  if (v2 != v3)
  {
    *(_BYTE *)(v2 - 1) = HIBYTE(a2) & 0xE0 | a2;
    v5 = (_BYTE *)(v2 - 1);
LABEL_19:
    *a1 = v3;
    a1[1] = (uint64_t)v5;
    return 1;
  }
  return 0;
}

uint64_t ccder_sizeof_integer(uint64_t a1, unint64_t *a2)
{
  return ccder_sizeof_implicit_integer(2, a1, a2);
}

uint64_t ccder_blob_encode_body_tl(uint64_t *a1, unint64_t a2, unint64_t a3, const void *a4)
{
  uint64_t result;

  result = ccder_blob_encode_body(a1, a3, a4);
  if ((_DWORD)result)
    return ccder_blob_encode_tl(a1, a2, a3);
  return result;
}

uint64_t ccder_encode_body(unint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  if (!a4)
    return 0;
  v5 = a3;
  v6 = a4;
  if (ccder_blob_encode_body(&v5, a1, a2))
    return v6;
  else
    return 0;
}

BOOL ccder_blob_encode_body(_QWORD *a1, unint64_t a2, const void *a3)
{
  _BOOL8 v5;
  void *__dst[2];

  if (!a3)
    return a2 == 0;
  __dst[0] = 0;
  __dst[1] = 0;
  v5 = ccder_blob_reserve(a1, a2, __dst);
  if (v5)
    memmove(__dst[0], a3, a2);
  return v5;
}

BOOL ccder_blob_reserve(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v4;

  v3 = a1[1];
  v4 = v3 - *a1;
  if (v4 < a2)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    a1[1] = v3 - a2;
    *a3 = v3 - a2;
    a3[1] = v3;
  }
  return v4 >= a2;
}

void ccn_shift_left_multi(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64x2_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  ccn_shift_left(a1, a2, a3, a4 & 0x3F, a5);
  if (a1)
  {
    v8 = a1 - 1;
    v9 = a1;
    do
    {
      v10 = 0;
      v11 = 0;
      do
      {
        v10 |= ((((v11 ^ ((_DWORD)v8 - (a4 >> 6)) | ((v11 ^ (v8 - (a4 >> 6))) >> 32))
                + 0xFFFFFFFF) >> 32)
              - 1) & *(_QWORD *)(a2 + 8 * v11);
        ++v11;
      }
      while (v9 != v11);
      *(_QWORD *)(a2 + 8 * v8--) = v10;
      --v9;
    }
    while (v8 < a1);
  }
}

void *ccec_cp_256_asm()
{
  return &ccec_cp256_asm;
}

void *ccsha1_di()
{
  return &ccsha1_vng_arm_di;
}

void *ccaes_ecb_decrypt_mode()
{
  return &ccaes_arm_ecb_decrypt_mode;
}

void *ccmd5_di()
{
  return &ccmd5_ltc_di;
}

uint64_t ccchacha20poly1305_decrypt(uint64_t a1, uint64_t a2, unint64_t a3, int8x16_t *a4, int8x16_t *a5)
{
  char v9;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v19;

  v9 = 0;
  v19 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v9 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v9 = 1;
    }
  }
  v19 = v9;
  v15 = *(unsigned __int8 *)(a2 + 248);
  if (v15 != 4)
  {
    if (v15 != 2)
    {
      v17 = 1;
      goto LABEL_11;
    }
    ccpoly1305_update(a2 + 136, -*(_DWORD *)(a2 + 232) & 0xFLL, (unsigned int *)kZero64);
    *(_BYTE *)(a2 + 248) = 4;
  }
  v16 = *(_QWORD *)(a2 + 240);
  v17 = 1;
  if (!__CFADD__(v16, a3) && v16 + a3 <= 0x3FFFFFFFC0)
  {
    ccpoly1305_update(a2 + 136, a3, (unsigned int *)a4);
    ccchacha20_update(a2, a3, a4, a5);
    v17 = 0;
    *(_QWORD *)(a2 + 240) += a3;
  }
LABEL_11:
  cc_disable_dit(&v19);
  return v17;
}

uint64_t ccchacha20poly1305_encrypt(uint64_t a1, uint64_t a2, unint64_t a3, int8x16_t *a4, int8x16_t *a5)
{
  char v9;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v19;

  v9 = 0;
  v19 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v9 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v9 = 1;
    }
  }
  v19 = v9;
  v15 = *(unsigned __int8 *)(a2 + 248);
  if (v15 != 3)
  {
    if (v15 != 2)
    {
      v17 = 1;
      goto LABEL_11;
    }
    ccpoly1305_update(a2 + 136, -*(_DWORD *)(a2 + 232) & 0xFLL, (unsigned int *)kZero64);
    *(_BYTE *)(a2 + 248) = 3;
  }
  v16 = *(_QWORD *)(a2 + 240);
  v17 = 1;
  if (!__CFADD__(v16, a3) && v16 + a3 <= 0x3FFFFFFFC0)
  {
    ccchacha20_update(a2, a3, a4, a5);
    ccpoly1305_update(a2 + 136, a3, (unsigned int *)a5);
    v17 = 0;
    *(_QWORD *)(a2 + 240) += a3;
  }
LABEL_11:
  cc_disable_dit(&v19);
  return v17;
}

uint64_t ccchacha20poly1305_verify(uint64_t a1, uint64_t a2, char *a3)
{
  char v5;
  int v11;
  uint64_t v12;
  char v14;
  char v15[16];
  _QWORD v16[2];

  v5 = 0;
  v16[1] = *MEMORY[0x1E0C874D8];
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v14 = v5;
  v11 = *(unsigned __int8 *)(a2 + 248);
  if (v11 != 4)
  {
    if (v11 != 2)
    {
      v12 = 1;
      goto LABEL_11;
    }
    ccpoly1305_update(a2 + 136, -*(_DWORD *)(a2 + 232) & 0xFLL, (unsigned int *)kZero64);
    *(_BYTE *)(a2 + 248) = 4;
  }
  ccpoly1305_update(a2 + 136, -*(_DWORD *)(a2 + 240) & 0xFLL, (unsigned int *)kZero64);
  v16[0] = *(_QWORD *)(a2 + 232);
  ccpoly1305_update(a2 + 136, 8uLL, (unsigned int *)v16);
  v16[0] = *(_QWORD *)(a2 + 240);
  ccpoly1305_update(a2 + 136, 8uLL, (unsigned int *)v16);
  ccpoly1305_final(a2 + 136, (uint64_t)v15);
  *(_BYTE *)(a2 + 248) = 5;
  if (cc_cmp_safe(16, v15, a3))
    v12 = 0xFFFFFFFFLL;
  else
    v12 = 0;
LABEL_11:
  cc_disable_dit(&v14);
  return v12;
}

uint64_t ccchacha20poly1305_finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  int v11;
  uint64_t v12;
  char v14;
  _QWORD v15[2];

  v5 = 0;
  v15[1] = *MEMORY[0x1E0C874D8];
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v14 = v5;
  v11 = *(unsigned __int8 *)(a2 + 248);
  if (v11 != 3)
  {
    if (v11 != 2)
    {
      v12 = 1;
      goto LABEL_9;
    }
    ccpoly1305_update(a2 + 136, -*(_DWORD *)(a2 + 232) & 0xFLL, (unsigned int *)kZero64);
    *(_BYTE *)(a2 + 248) = 3;
  }
  ccpoly1305_update(a2 + 136, -*(_DWORD *)(a2 + 240) & 0xFLL, (unsigned int *)kZero64);
  v15[0] = *(_QWORD *)(a2 + 232);
  ccpoly1305_update(a2 + 136, 8uLL, (unsigned int *)v15);
  v15[0] = *(_QWORD *)(a2 + 240);
  ccpoly1305_update(a2 + 136, 8uLL, (unsigned int *)v15);
  ccpoly1305_final(a2 + 136, a3);
  v12 = 0;
  *(_BYTE *)(a2 + 248) = 5;
LABEL_9:
  cc_disable_dit(&v14);
  return v12;
}

uint64_t ccpoly1305_update(uint64_t a1, unint64_t a2, unsigned int *a3)
{
  unsigned int *v3;
  unint64_t v4;
  char v6;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t i;
  char v21;

  v3 = a3;
  v4 = a2;
  v6 = 0;
  v21 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v21 = v6;
  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
  {
    v13 = 16 - v12;
    if (16 - v12 >= a2)
      v13 = a2;
    if (v13)
    {
      v14 = a1 + 56;
      v15 = a3;
      v16 = v13;
      do
      {
        v17 = *(_BYTE *)v15;
        v15 = (unsigned int *)((char *)v15 + 1);
        *(_BYTE *)(v14 + *(_QWORD *)(a1 + 72)) = v17;
        ++v14;
        --v16;
      }
      while (v16);
      v12 = *(_QWORD *)(a1 + 72);
    }
    v18 = v12 + v13;
    *(_QWORD *)(a1 + 72) = v18;
    v4 = a2 - v13;
    v3 = (unsigned int *)((char *)a3 + v13);
    if (v18 == 16)
    {
      _ccpoly1305_update((unsigned int *)a1, 0x10uLL, (unsigned int *)(a1 + 56));
      *(_QWORD *)(a1 + 72) = 0;
    }
  }
  if (v4 >= 0x10)
  {
    _ccpoly1305_update((unsigned int *)a1, v4 & 0xFFFFFFFFFFFFFFF0, v3);
    v3 = (unsigned int *)((char *)v3 + (v4 & 0xFFFFFFFFFFFFFFF0));
    v4 &= 0xFu;
  }
  if (v4)
  {
    for (i = 0; i != v4; ++i)
      *(_BYTE *)(a1 + 56 + i) = *((_BYTE *)v3 + i);
    *(_QWORD *)(a1 + 72) = v4;
  }
  cc_disable_dit(&v21);
  return 0;
}

unsigned int *_ccpoly1305_update(unsigned int *result, unint64_t a2, unsigned int *a3)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t i;
  char *v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;

  v4 = result;
  v40 = *MEMORY[0x1E0C874D8];
  if (a2 < 0x10)
    goto LABEL_5;
  v5 = result[9];
  v6 = result[10];
  v7 = result[11];
  v8 = result[12];
  v9 = result[13];
LABEL_3:
  v10 = *a3;
  v11 = a3[1];
  v12 = a3[2];
  v13 = a3[3];
  a3 += 4;
  a2 -= 16;
  v14 = v5 + (v10 & 0x3FFFFFF);
  v15 = (((v10 | (unint64_t)(v11 << 32)) >> 26) & 0x3FFFFFF) + v6;
  v4[9] = v14;
  v4[10] = v15;
  v16 = (((v11 | (unint64_t)(v12 << 32)) >> 20) & 0x3FFFFFF) + v7;
  v17 = v8 + (((v12 | (unint64_t)(v13 << 32)) >> 14) & 0x3FFFFFF);
  v4[11] = v16;
  v4[12] = v17;
  v18 = v9 + (v13 >> 8) + 0x1000000;
  for (v4[13] = v18; ; v18 = v4[13] + (v39 >> 8))
  {
    v19 = v4[1];
    v21 = v4[7];
    v20 = v4[8];
    v22 = v4[6];
    v24 = v4[3];
    v23 = v4[4];
    v25 = *v4 * (unint64_t)v14
        + v20 * (unint64_t)v15
        + v21 * (unint64_t)v16
        + v22 * (unint64_t)v17
        + v4[5] * (unint64_t)v18;
    v26 = v4[2];
    v27 = *v4 * (unint64_t)v18;
    v28 = v25 & 0x3FFFFFF;
    v29 = *v4 * (unint64_t)v15
        + v20 * (unint64_t)v16
        + v21 * (unint64_t)v17
        + v22 * (unint64_t)v18
        + v19 * (unint64_t)v14
        + (v25 >> 26);
    v6 = v29 & 0x3FFFFFF;
    result = (unsigned int *)(*v4 * (unint64_t)v16 + v20 * (unint64_t)v17);
    v30 = (unint64_t)result
        + v21 * (unint64_t)v18
        + v19 * (unint64_t)v15
        + v26 * (unint64_t)v14
        + (v29 >> 26);
    v7 = v30 & 0x3FFFFFF;
    v31 = *v4 * (unint64_t)v17
        + v20 * (unint64_t)v18
        + v19 * (unint64_t)v16
        + v26 * (unint64_t)v15
        + v24 * (unint64_t)v14
        + (v30 >> 26);
    v8 = v31 & 0x3FFFFFF;
    v4[11] = v30 & 0x3FFFFFF;
    v4[12] = v31 & 0x3FFFFFF;
    v32 = v27
        + v19 * (unint64_t)v17
        + v26 * (unint64_t)v16
        + v24 * (unint64_t)v15
        + v23 * (unint64_t)v14
        + (v31 >> 26);
    v9 = v32 & 0x3FFFFFF;
    v4[13] = v32 & 0x3FFFFFF;
    v5 = 5 * (v32 >> 26) + v28;
    v4[9] = v5;
    v4[10] = v6;
    if (a2 > 0xF)
      goto LABEL_3;
LABEL_5:
    if (!a2)
      break;
    for (i = 0; i != a2; ++i)
      *((_BYTE *)&v36 + i) = *((_BYTE *)a3 + i);
    *((_BYTE *)&v36 + a2) = 1;
    if ((unint64_t)(i - 1) <= 0xD)
    {
      v34 = (char *)&v36 + i + 1;
      v35 = 14 - a2;
      if (a2 > 0xE)
        v35 = 0;
      bzero(v34, v35 + 1);
    }
    a2 = 0;
    v14 = v4[9] + (v36 & 0x3FFFFFF);
    v15 = (((v36 | ((unint64_t)v37 << 32)) >> 26) & 0x3FFFFFF) + v4[10];
    v16 = (((v37 | ((unint64_t)v38 << 32)) >> 20) & 0x3FFFFFF) + v4[11];
    v17 = v4[12] + (((v38 | ((unint64_t)v39 << 32)) >> 14) & 0x3FFFFFF);
  }
  return result;
}

uint64_t ccpoly1305_final(uint64_t a1, uint64_t a2)
{
  char v4;
  unint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  signed int v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v41;

  v4 = 0;
  v41 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v41 = v4;
  v10 = *(_QWORD *)(a1 + 72);
  if (v10)
    _ccpoly1305_update((unsigned int *)a1, v10, (unsigned int *)(a1 + 56));
  v11 = *(_DWORD *)(a1 + 36);
  v12 = v11 & 0x3FFFFFF;
  v13 = *(_DWORD *)(a1 + 40) + (v11 >> 26);
  v14 = v13 & 0x3FFFFFF;
  v15 = *(_DWORD *)(a1 + 44) + (v13 >> 26);
  v16 = v15 & 0x3FFFFFF;
  v17 = *(_DWORD *)(a1 + 48) + (v15 >> 26);
  v18 = v17 & 0x3FFFFFF;
  v19 = *(_DWORD *)(a1 + 52) + (v17 >> 26);
  v20 = 5 * (v19 >> 26) + v12;
  v21 = v14 + ((v20 + 5) >> 26);
  v22 = v16 + (v21 >> 26);
  v23 = v18 + (v22 >> 26);
  v24 = (v19 | 0xFC000000) + (v23 >> 26);
  v25 = (v24 >> 31) - 1;
  v26 = v20 & (v24 >> 31) | v25 & 0x3FFFFFF & (v20 + 5);
  v27 = v14 & (v24 >> 31) | v25 & 0x3FFFFFF & v21;
  *(_DWORD *)(a1 + 36) = v26;
  *(_DWORD *)(a1 + 40) = v27;
  v28 = v16 & (v24 >> 31) | v25 & 0x3FFFFFF & v22;
  v29 = v18 & (v24 >> 31) | v25 & 0x3FFFFFF & v23;
  *(_DWORD *)(a1 + 44) = v28;
  *(_DWORD *)(a1 + 48) = v29;
  v30 = v25 & v24 | v19 & (v24 >> 31) & 0x3FFFFFF;
  *(_DWORD *)(a1 + 52) = v30;
  v31 = v26 | (v27 << 26);
  v32 = *(_DWORD *)(a1 + 80);
  v33 = *(unsigned int *)(a1 + 84);
  v34 = (v27 >> 6) | (v28 << 20);
  v35 = *(unsigned int *)(a1 + 92);
  v36 = ((v28 >> 12) | (v29 << 14)) + (unint64_t)*(unsigned int *)(a1 + 88);
  *(_DWORD *)a2 = v31 + v32;
  v37 = v33 + __CFADD__(v31, v32) + v34;
  *(_BYTE *)(a2 + 7) = BYTE3(v37);
  *(_BYTE *)(a2 + 6) = BYTE2(v37);
  *(_WORD *)(a2 + 4) = v37;
  v38 = v36 + HIDWORD(v37);
  *(_BYTE *)(a2 + 11) = BYTE3(v38);
  *(_BYTE *)(a2 + 10) = BYTE2(v38);
  *(_WORD *)(a2 + 8) = v38;
  v39 = ((v29 >> 18) | (v30 << 8)) + v35 + HIDWORD(v38);
  *(_BYTE *)(a2 + 15) = BYTE3(v39);
  *(_BYTE *)(a2 + 14) = BYTE2(v39);
  *(_WORD *)(a2 + 12) = v39;
  cc_disable_dit(&v41);
  return 0;
}

uint64_t ccgcm_inc_iv(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v17;

  v4 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v17 = v4;
  if (*(_WORD *)(a2 + 80) == 1 && (*(_WORD *)(a2 + 82) & 1) != 0)
  {
    v10 = (uint64_t *)(a2 + 48);
    v11 = 1;
    v12 = 59;
    do
    {
      v13 = *(_BYTE *)(a2 + v12) + 1;
      *(_BYTE *)(a2 + v12) = v13;
      if (v11 > 7)
        break;
      ++v11;
      --v12;
    }
    while (!v13);
    v14 = *v10;
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a2 + 56);
    *(_QWORD *)a3 = v14;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)v10;
    ccmode_gcm_update_pad(a2);
    v15 = 0;
    *(_WORD *)(a2 + 80) = 2;
  }
  else
  {
    v15 = 4294967228;
  }
  cc_disable_dit(&v17);
  return v15;
}

uint64_t ccgcm_gmac(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  uint64_t v10;
  char v12;

  v4 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v12 = v4;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 40))(a2, a3, a4);
  cc_disable_dit(&v12);
  return v10;
}

uint64_t ccgcm_init_with_iv(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v8;
  uint64_t v14;
  char v16;

  v8 = 0;
  v16 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v16 = v8;
  v14 = ccgcm_init(a1);
  if (!(_DWORD)v14)
  {
    v14 = ccgcm_set_iv(a1, a2, 12, a5);
    if (!(_DWORD)v14)
      *(_WORD *)(a2 + 82) |= 1u;
  }
  cc_disable_dit(&v16);
  return v14;
}

uint64_t ccgcm_set_iv_legacy(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4)
{
  char v5;
  uint64_t v11;
  char v13;

  v5 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v13 = v5;
  if (a3 && a4)
  {
    v11 = ccgcm_set_iv(a1, (uint64_t)a2, a3, a4);
  }
  else if (a2[40] == 1)
  {
    cc_clear(0x10uLL, a2 + 16);
    ccmode_gcm_update_pad((uint64_t)a2);
    cc_clear(0x10uLL, a2 + 24);
    v11 = 0;
    a2[40] = 2;
  }
  else
  {
    v11 = 0xFFFFFFFFLL;
  }
  cc_disable_dit(&v13);
  return v11;
}

uint64_t ccgcm_one_shot(rsize_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  char v18;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v18 = 0;
  v30 = *MEMORY[0x1E0C874D8];
  HIBYTE(v29) = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v18 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v18 = 1;
    }
  }
  HIBYTE(v29) = v18;
  MEMORY[0x1E0C86820](a1, a2, a2, a3);
  v25 = (char *)&v29 - v24;
  v26 = ccgcm_init((uint64_t)a1);
  if (!(_DWORD)v26)
  {
    v26 = ccgcm_set_iv((uint64_t)a1, (uint64_t)v25, a4, a5);
    if (!(_DWORD)v26)
    {
      v26 = ccgcm_aad((uint64_t)a1, (uint64_t)v25, a6, a7);
      if (!(_DWORD)v26)
      {
        v26 = ccgcm_update((uint64_t)a1, (uint64_t)v25, a8, a9, a10);
        if (!(_DWORD)v26)
          v26 = ccgcm_finalize((uint64_t)a1, (uint64_t)v25, a11, a12);
      }
    }
  }
  v27 = v26;
  cc_clear(*a1, v25);
  cc_disable_dit((_BYTE *)&v29 + 7);
  return v27;
}

uint64_t ccgcm_update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5;
  uint64_t v11;
  char v13;

  v5 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v13 = v5;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 48))(a2, a3, a4, a5);
  cc_disable_dit(&v13);
  return v11;
}

uint64_t ccgcm_aad(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  uint64_t v10;
  char v12;

  v4 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v12 = v4;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 40))(a2, a3, a4);
  cc_disable_dit(&v12);
  return v10;
}

uint64_t ccmode_gcm_aad(uint64_t a1, unint64_t a2, int8x16_t *a3, double a4, double a5, double a6, double a7, double a8, int8x16_t a9)
{
  int8x16_t *v9;
  unint64_t v10;
  int8x16_t *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;

  if (*(_WORD *)(a1 + 80) != 2)
    return 4294967228;
  v9 = a3;
  v10 = a2;
  v12 = (int8x16_t *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 88);
  v14 = v13 & 0xF;
  if ((v13 & 0xF) != 0)
  {
    v15 = 16 - v14;
    if (a2 < v15)
      goto LABEL_9;
    v16 = (v13 & 0xF) + a1 + 15;
    v17 = 16 - v14;
    do
    {
      *(_BYTE *)(v16 + v17) ^= a3[-1].u8[v17 + 15];
      --v17;
    }
    while (v17);
    ccmode_gcm_mult_h((uint64x2_t *)a1, (int8x16_t *)(a1 + 16), a4, a5, a6, a7, a8, a9);
    v10 -= v15;
    v9 = (int8x16_t *)((char *)v9 + v15);
    *(_QWORD *)(a1 + 88) += v15;
  }
  if (v10 >= 0x10)
  {
    v18 = v10 & 0xFFFFFFFFFFFFFFF0;
    gcm_ghash(v12, (uint64x2_t *)(a1 + 128), v9, v10 & 0xFFFFFFFFFFFFFFF0);
    v14 = 0;
    v9 = (int8x16_t *)((char *)v9 + (v10 & 0xFFFFFFFFFFFFFFF0));
    v10 &= 0xFu;
    *(_QWORD *)(a1 + 88) += v18;
LABEL_9:
    if (v10)
      goto LABEL_10;
    return 0;
  }
  v14 = 0;
  if (!v10)
    return 0;
LABEL_10:
  v19 = a1 + v14 + 15;
  v20 = v10;
  do
  {
    *(_BYTE *)(v19 + v20) ^= v9[-1].u8[v20 + 15];
    --v20;
  }
  while (v20);
  result = 0;
  *(_QWORD *)(a1 + 88) += v10;
  return result;
}

uint64_t ccaes_vng_gcm_decrypt(uint64_t a1, unint64_t a2, int8x16_t *a3, int8x16_t *a4, double a5, double a6, double a7, double a8, double a9, int8x16_t a10)
{
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int8x16_t v20;
  uint64_t v21;
  uint64_t result;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  int8x16_t v36;
  uint64_t i;
  uint64_t j;
  uint64_t v39;
  __int8 *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v14 = *(_QWORD *)(a1 + 96);
  ccmode_gcm_aad_finalize(a1, a5, a6, a7, a8, a9, a10);
  if (*(_WORD *)(a1 + 80) != 3)
    return 4294967228;
  v21 = *(_QWORD *)(a1 + 96);
  result = 4294967229;
  if (!__CFADD__(v21, a2) && v21 + a2 <= 0xFFFFFFFE0)
  {
    v23 = v14 & 0xF;
    if ((v14 & 0xF) != 0)
    {
      v24 = 16 - v23;
      if (a2 < v24)
      {
LABEL_19:
        if (!a2)
          return 0;
        v39 = v23;
        v40 = &a3[-1].i8[15];
        v41 = a1 + v23 + 15;
        v42 = a2;
        do
        {
          *(_BYTE *)(v41 + v42) ^= v40[v42];
          --v42;
        }
        while (v42);
        v43 = v39 + a1 + 63;
        v44 = a2;
        do
        {
          a4[-1].i8[v44 + 15] = *(_BYTE *)(v43 + v44) ^ v40[v44];
          --v44;
        }
        while (v44);
        result = 0;
        *(_QWORD *)(a1 + 96) += a2;
        return result;
      }
      v25 = v14 & 0xF;
      v26 = &a3[-1].i8[15];
      v27 = 16 - v23;
      do
      {
        *(_BYTE *)(v25 + a1 + 15 + v27) ^= v26[v27];
        --v27;
      }
      while (v27);
      ccmode_gcm_mult_h((uint64x2_t *)a1, (int8x16_t *)(a1 + 16), v15, v16, v17, v18, v19, v20);
      v28 = v24;
      do
      {
        a4[-1].i8[v28 + 15] = *(_BYTE *)(v25 + a1 + 63 + v28) ^ v26[v28];
        --v28;
      }
      while (v28);
      a2 -= v24;
      a3 = (int8x16_t *)((char *)a3 + v24);
      a4 = (int8x16_t *)((char *)a4 + v24);
      *(_QWORD *)(a1 + 96) += v24;
      ccmode_gcm_update_pad(a1);
    }
    if (a2 >= 0x10)
    {
      gcmDecrypt(a3, a4, (int8x16_t *)a1, a2 & 0xFFFFFFF0, (uint64x2_t *)(a1 + 128), *(int8x16_t **)(a1 + 112));
      v29 = a2 & 0xFFFFFFF0;
      a2 &= 0xFFFFFFFF0000000FLL;
      a3 = (int8x16_t *)((char *)a3 + v29);
      a4 = (int8x16_t *)((char *)a4 + v29);
      v30 = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 96) += v29;
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v30 + 24))(*(_QWORD *)(a1 + 112), 1, a1 + 32, a1 + 64);
      if (a2 >= 0x10)
      {
        do
        {
          for (i = 0; i != -16; --i)
            *(_BYTE *)(a1 + i + 31) ^= a3->u8[i + 15];
          ccmode_gcm_mult_h((uint64x2_t *)a1, (int8x16_t *)(a1 + 16), v31, v32, v33, v34, v35, v36);
          for (j = 0; j != -16; --j)
            a4->i8[j + 15] = *(_BYTE *)(a1 + j + 79) ^ a3->i8[j + 15];
          a2 -= 16;
          ++a3;
          ++a4;
          *(_QWORD *)(a1 + 96) += 16;
          ccmode_gcm_update_pad(a1);
        }
        while (a2 > 0xF);
      }
    }
    v23 = 0;
    goto LABEL_19;
  }
  return result;
}

uint64_t ccgcm_finalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  uint64_t v10;
  char v12;

  v4 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v12 = v4;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 56))(a2, a3, a4);
  cc_disable_dit(&v12);
  return v10;
}

uint64_t ccgcm_set_iv(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  uint64_t v10;
  char v12;

  v4 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v12 = v4;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 32))(a2, a3, a4);
  cc_disable_dit(&v12);
  return v10;
}

uint64_t ccmode_gcm_set_iv(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v4;
  uint64_t result;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int8x16_t v14;
  uint64_t i;
  double v16;
  int8x16_t v17;
  int8x16_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C874D8];
  if (*(_WORD *)(a1 + 80) != 1 || (*(_WORD *)(a1 + 82) & 1) != 0)
    return 4294967228;
  v4 = a2;
  result = 4294967228;
  if (a2)
  {
    v6 = a3;
    if (a3)
    {
      v7 = (_QWORD *)(a1 + 32);
      if (a2 == 12)
      {
        v8 = *a3;
        *(_DWORD *)(a1 + 40) = *((_DWORD *)a3 + 2);
        *v7 = v8;
        *(_DWORD *)(a1 + 44) = 0x1000000;
      }
      else
      {
        cc_clear(8uLL, &v18);
        v18.i64[1] = bswap64(8 * v4);
        cc_clear(0x10uLL, (void *)(a1 + 32));
        if (v4 < 0x10)
          goto LABEL_20;
        do
        {
          for (i = 0; i != -16; --i)
            *(_BYTE *)(a1 + i + 47) ^= *((_BYTE *)v6 + i + 15);
          v9 = ccmode_gcm_mult_h((uint64x2_t *)a1, (int8x16_t *)(a1 + 32), v9, v10, v11, v12, v13, v14);
          v6 += 2;
          v4 -= 16;
        }
        while (v4 > 0xF);
        if (v4)
        {
LABEL_20:
          do
          {
            *(_BYTE *)(a1 + v4 + 31) ^= *((_BYTE *)v6 + v4 - 1);
            --v4;
          }
          while (v4);
          ccmode_gcm_mult_h((uint64x2_t *)a1, (int8x16_t *)(a1 + 32), v9, v10, v11, v12, v13, v14);
        }
        v16 = *(double *)v18.i64;
        v17 = veorq_s8(v18, *(int8x16_t *)(a1 + 32));
        *(int8x16_t *)(a1 + 32) = v17;
        ccmode_gcm_mult_h((uint64x2_t *)a1, (int8x16_t *)(a1 + 32), *(double *)v17.i64, v16, v11, v12, v13, v14);
      }
      *(_OWORD *)(a1 + 48) = *(_OWORD *)v7;
      ccmode_gcm_update_pad(a1);
      result = 0;
      *(_WORD *)(a1 + 80) = 2;
    }
  }
  return result;
}

uint64_t ccmode_gcm_update_pad(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  char v3;

  v1 = (_BYTE *)(a1 + 47);
  v2 = 1;
  do
  {
    v3 = *v1 + 1;
    *v1-- = v3;
    if (v2 > 3)
      break;
    ++v2;
  }
  while (!v3);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 104) + 24))(*(_QWORD *)(a1 + 112), 1, a1 + 32, a1 + 64);
}

uint64_t ccmode_gcm_finalize(uint64_t a1, size_t a2, char *a3, double a4, double a5, double a6, double a7, double a8, int8x16_t a9)
{
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  int8x16_t v17;
  unint64_t v18;
  unint64_t v19;
  int8x16_t v20;
  int8x16_t v21;
  double v22;
  unsigned int v23;
  unint64_t v24;
  int8x16_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C874D8];
  ccmode_gcm_aad_finalize(a1, a4, a5, a6, a7, a8, a9);
  if (*(_WORD *)(a1 + 80) != 3)
    return 4294967228;
  v18 = *(_QWORD *)(a1 + 96);
  if ((v18 & 0xF) != 0)
  {
    ccmode_gcm_mult_h((uint64x2_t *)a1, (int8x16_t *)(a1 + 16), v12, v13, v14, v15, v16, v17);
    v18 = *(_QWORD *)(a1 + 96);
  }
  v19 = *(_QWORD *)(a1 + 88);
  *(_BYTE *)(a1 + 64) = v19 >> 53;
  *(_BYTE *)(a1 + 65) = v19 >> 45;
  *(_BYTE *)(a1 + 66) = v19 >> 37;
  *(_BYTE *)(a1 + 67) = v19 >> 29;
  *(_BYTE *)(a1 + 68) = v19 >> 21;
  *(_BYTE *)(a1 + 69) = v19 >> 13;
  *(_BYTE *)(a1 + 70) = v19 >> 5;
  *(_BYTE *)(a1 + 71) = 8 * v19;
  *(_BYTE *)(a1 + 72) = v18 >> 53;
  *(_BYTE *)(a1 + 73) = v18 >> 45;
  *(_BYTE *)(a1 + 74) = v18 >> 37;
  *(_BYTE *)(a1 + 75) = v18 >> 29;
  *(_BYTE *)(a1 + 76) = v18 >> 21;
  *(_BYTE *)(a1 + 77) = v18 >> 13;
  *(_BYTE *)(a1 + 78) = v18 >> 5;
  *(_BYTE *)(a1 + 79) = 8 * v18;
  v20 = *(int8x16_t *)(a1 + 64);
  v21 = veorq_s8(v20, *(int8x16_t *)(a1 + 16));
  *(int8x16_t *)(a1 + 16) = v21;
  v22 = ccmode_gcm_mult_h((uint64x2_t *)a1, (int8x16_t *)(a1 + 16), *(double *)v21.i64, *(double *)v20.i64, v14, v15, v16, v17);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(a1 + 104) + 24))(*(_QWORD *)(a1 + 112), 1, a1 + 48, a1 + 64, v22);
  v26 = veorq_s8(*(int8x16_t *)(a1 + 64), *(int8x16_t *)(a1 + 16));
  if (a2 >= 0x10)
    a2 = 16;
  if (*(_DWORD *)(a1 + 120) == 78647)
  {
    v23 = cc_cmp_safe(a2, v26.i8, a3);
    v24 = -(((v23 | ((unint64_t)(int)v23 >> 32)) + 0xFFFFFFFF) >> 32) & 0xFFFFFFBB;
  }
  else
  {
    v24 = 0;
  }
  memcpy(a3, &v26, a2);
  *(_WORD *)(a1 + 80) = 4;
  return v24;
}

int8x16_t gcm_init(int8x16_t *a1, int8x16_t *a2, double a3, double a4, double a5, double a6, double a7, int8x16_t a8)
{
  int32x4_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t result;

  v8 = (int32x4_t)vqtbl1q_s8(*a2, *(int8x16_t *)qword_1DEDA6880);
  v9 = veorq_s8(a8, a8);
  v10 = veorq_s8(vandq_s8(vextq_s8(*(int8x16_t *)&qword_1DEDA6880[2], *(int8x16_t *)&qword_1DEDA6880[2], 8uLL), (int8x16_t)vshrq_n_s32(vdupq_laneq_s32(v8, 3), 0x1FuLL)), vorrq_s8(vextq_s8(v9, (int8x16_t)vshrq_n_u64((uint64x2_t)v8, 0x3FuLL), 8uLL), (int8x16_t)vshlq_n_s64((int64x2_t)v8, 1uLL)));
  *a1 = v10;
  a1[8] = veorq_s8(v10, vextq_s8(v10, v10, 8uLL));
  v11 = (int8x16_t)vmull_high_p64((uint64x2_t)v10, (uint64x2_t)v10);
  v12 = (int8x16_t)vmull_p64(v10.u64[0], v10.u64[0]);
  v13 = veorq_s8(v12, veorq_s8(v11, (int8x16_t)vmull_p64(veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0], veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0])));
  v14 = veorq_s8(vextq_s8(v9, v13, 8uLL), v12);
  v15 = veorq_s8(vextq_s8(v14, v14, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v14.u64[0]));
  v16 = veorq_s8(veorq_s8(vextq_s8(v13, v9, 8uLL), v11), veorq_s8(vextq_s8(v15, v15, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v15.u64[0])));
  a1[1] = v16;
  a1[9] = veorq_s8(v16, vextq_s8(v16, v16, 8uLL));
  v13.i64[0] = veorq_s8(v16, vextq_s8(v16, v16, 8uLL)).u64[0];
  v17 = (int8x16_t)vmull_high_p64((uint64x2_t)v16, (uint64x2_t)v10);
  v18 = (int8x16_t)vmull_p64(v16.u64[0], v10.u64[0]);
  v19 = veorq_s8(v18, veorq_s8(v17, (int8x16_t)vmull_p64(veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0], v13.u64[0])));
  v20 = veorq_s8(vextq_s8(v9, v19, 8uLL), v18);
  v21 = veorq_s8(vextq_s8(v20, v20, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v20.u64[0]));
  v22 = veorq_s8(veorq_s8(vextq_s8(v19, v9, 8uLL), v17), veorq_s8(vextq_s8(v21, v21, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v21.u64[0])));
  a1[2] = v22;
  a1[10] = veorq_s8(v22, vextq_s8(v22, v22, 8uLL));
  v19.i64[0] = veorq_s8(v22, vextq_s8(v22, v22, 8uLL)).u64[0];
  v23 = (int8x16_t)vmull_high_p64((uint64x2_t)v22, (uint64x2_t)v10);
  v24 = (int8x16_t)vmull_p64(v22.u64[0], v10.u64[0]);
  v25 = veorq_s8(v24, veorq_s8(v23, (int8x16_t)vmull_p64(veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0], v19.u64[0])));
  v26 = veorq_s8(vextq_s8(v9, v25, 8uLL), v24);
  v27 = veorq_s8(vextq_s8(v26, v26, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v26.u64[0]));
  v28 = veorq_s8(veorq_s8(vextq_s8(v25, v9, 8uLL), v23), veorq_s8(vextq_s8(v27, v27, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v27.u64[0])));
  a1[3] = v28;
  a1[11] = veorq_s8(v28, vextq_s8(v28, v28, 8uLL));
  v25.i64[0] = veorq_s8(v28, vextq_s8(v28, v28, 8uLL)).u64[0];
  v29 = (int8x16_t)vmull_high_p64((uint64x2_t)v28, (uint64x2_t)v10);
  v30 = (int8x16_t)vmull_p64(v28.u64[0], v10.u64[0]);
  v31 = veorq_s8(v30, veorq_s8(v29, (int8x16_t)vmull_p64(veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0], v25.u64[0])));
  v32 = veorq_s8(vextq_s8(v9, v31, 8uLL), v30);
  v33 = veorq_s8(vextq_s8(v32, v32, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v32.u64[0]));
  v34 = veorq_s8(veorq_s8(vextq_s8(v31, v9, 8uLL), v29), veorq_s8(vextq_s8(v33, v33, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v33.u64[0])));
  a1[4] = v34;
  a1[12] = veorq_s8(v34, vextq_s8(v34, v34, 8uLL));
  v31.i64[0] = veorq_s8(v34, vextq_s8(v34, v34, 8uLL)).u64[0];
  v35 = (int8x16_t)vmull_high_p64((uint64x2_t)v34, (uint64x2_t)v10);
  v36 = (int8x16_t)vmull_p64(v34.u64[0], v10.u64[0]);
  v37 = veorq_s8(v36, veorq_s8(v35, (int8x16_t)vmull_p64(veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0], v31.u64[0])));
  v38 = veorq_s8(vextq_s8(v9, v37, 8uLL), v36);
  v39 = veorq_s8(vextq_s8(v38, v38, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v38.u64[0]));
  v40 = veorq_s8(veorq_s8(vextq_s8(v37, v9, 8uLL), v35), veorq_s8(vextq_s8(v39, v39, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v39.u64[0])));
  a1[5] = v40;
  a1[13] = veorq_s8(v40, vextq_s8(v40, v40, 8uLL));
  v37.i64[0] = veorq_s8(v40, vextq_s8(v40, v40, 8uLL)).u64[0];
  v41 = (int8x16_t)vmull_high_p64((uint64x2_t)v40, (uint64x2_t)v10);
  v42 = (int8x16_t)vmull_p64(v40.u64[0], v10.u64[0]);
  v43 = veorq_s8(v42, veorq_s8(v41, (int8x16_t)vmull_p64(veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0], v37.u64[0])));
  v44 = veorq_s8(vextq_s8(v9, v43, 8uLL), v42);
  v45 = veorq_s8(vextq_s8(v44, v44, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v44.u64[0]));
  v46 = veorq_s8(veorq_s8(vextq_s8(v43, v9, 8uLL), v41), veorq_s8(vextq_s8(v45, v45, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v45.u64[0])));
  a1[6] = v46;
  a1[14] = veorq_s8(v46, vextq_s8(v46, v46, 8uLL));
  v43.i64[0] = veorq_s8(v46, vextq_s8(v46, v46, 8uLL)).u64[0];
  v47 = (int8x16_t)vmull_high_p64((uint64x2_t)v46, (uint64x2_t)v10);
  v48 = (int8x16_t)vmull_p64(v46.u64[0], v10.u64[0]);
  v49 = veorq_s8(v48, veorq_s8(v47, (int8x16_t)vmull_p64(veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0], v43.u64[0])));
  v50 = veorq_s8(vextq_s8(v9, v49, 8uLL), v48);
  v51 = veorq_s8(vextq_s8(v50, v50, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v50.u64[0]));
  result = veorq_s8(veorq_s8(vextq_s8(v49, v9, 8uLL), v47), veorq_s8(vextq_s8(v51, v51, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v51.u64[0])));
  a1[7] = result;
  a1[15] = veorq_s8(result, vextq_s8(result, result, 8uLL));
  return result;
}

int8x16_t gcm_gmult(int8x16_t *a1, uint64x2_t *a2, int8x16_t *a3, double a4, double a5, double a6, double a7, double a8, int8x16_t a9)
{
  int8x16_t v9;
  int8x16_t v10;
  unint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t result;

  v9 = vqtbl1q_s8(*a1, *(int8x16_t *)qword_1DEDA6880);
  v10 = veorq_s8(a9, a9);
  v11 = veorq_s8(v9, vextq_s8(v9, v9, 8uLL)).u64[0];
  v12 = (int8x16_t)vmull_high_p64((uint64x2_t)v9, *a2);
  v13 = (int8x16_t)vmull_p64(v9.u64[0], a2->i64[0]);
  v14 = veorq_s8(v13, veorq_s8(v12, (int8x16_t)vmull_p64(veorq_s8(*(int8x16_t *)a2, vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 8uLL)).u64[0], v11)));
  v15 = veorq_s8(vextq_s8(v10, v14, 8uLL), v13);
  v16 = veorq_s8(vextq_s8(v15, v15, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v15.u64[0]));
  result = vqtbl1q_s8(veorq_s8(veorq_s8(vextq_s8(v14, v10, 8uLL), v12), veorq_s8(vextq_s8(v16, v16, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v16.u64[0]))), *(int8x16_t *)qword_1DEDA6880);
  *a3 = result;
  return result;
}

int8x16_t gcm_ghash(int8x16_t *a1, uint64x2_t *a2, int8x16_t *a3, uint64_t a4)
{
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  BOOL v7;
  uint64_t i;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  uint64x2_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  uint64x2_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  uint64x2_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64x2_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  uint64x2_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  uint64x2_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  uint64x2_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  uint64_t v50;
  int8x16_t *v51;
  int8x16_t v52;
  int8x16_t v53;
  uint64x2_t *v54;
  uint64x2_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  uint64_t j;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t result;

  v5 = veorq_s8(v4, v4);
  v6 = vqtbl1q_s8(*a1, *(int8x16_t *)qword_1DEDA6880);
  v7 = a4 < 128;
  for (i = a4 - 128; !v7; i -= 128)
  {
    v9 = vqtbl1q_s8(a3[7], *(int8x16_t *)qword_1DEDA6880);
    v10 = (int8x16_t)vmull_p64(a2->i64[0], v9.u64[0]);
    v11 = (int8x16_t)vmull_high_p64(*a2, (uint64x2_t)v9);
    v12 = (int8x16_t)vmull_p64(a2[8].u64[0], veorq_s8(v9, vextq_s8(v9, v9, 8uLL)).u64[0]);
    v13 = vqtbl1q_s8(a3[6], *(int8x16_t *)qword_1DEDA6880);
    v14 = a2[1];
    v15 = veorq_s8(v10, (int8x16_t)vmull_p64(v14.u64[0], v13.u64[0]));
    v16 = veorq_s8(v11, (int8x16_t)vmull_high_p64(v14, (uint64x2_t)v13));
    v17 = veorq_s8(v12, (int8x16_t)vmull_p64(a2[9].u64[0], veorq_s8(v13, vextq_s8(v13, v13, 8uLL)).u64[0]));
    v18 = vqtbl1q_s8(a3[5], *(int8x16_t *)qword_1DEDA6880);
    v19 = a2[2];
    v20 = veorq_s8(v15, (int8x16_t)vmull_p64(v19.u64[0], v18.u64[0]));
    v21 = veorq_s8(v16, (int8x16_t)vmull_high_p64(v19, (uint64x2_t)v18));
    v22 = veorq_s8(v17, (int8x16_t)vmull_p64(a2[10].u64[0], veorq_s8(v18, vextq_s8(v18, v18, 8uLL)).u64[0]));
    v23 = vqtbl1q_s8(a3[4], *(int8x16_t *)qword_1DEDA6880);
    v24 = a2[3];
    v25 = veorq_s8(v20, (int8x16_t)vmull_p64(v24.u64[0], v23.u64[0]));
    v26 = veorq_s8(v21, (int8x16_t)vmull_high_p64(v24, (uint64x2_t)v23));
    v27 = veorq_s8(v22, (int8x16_t)vmull_p64(a2[11].u64[0], veorq_s8(v23, vextq_s8(v23, v23, 8uLL)).u64[0]));
    v28 = vqtbl1q_s8(a3[3], *(int8x16_t *)qword_1DEDA6880);
    v29 = a2[4];
    v30 = veorq_s8(v25, (int8x16_t)vmull_p64(v29.u64[0], v28.u64[0]));
    v31 = veorq_s8(v26, (int8x16_t)vmull_high_p64(v29, (uint64x2_t)v28));
    v32 = veorq_s8(v27, (int8x16_t)vmull_p64(a2[12].u64[0], veorq_s8(v28, vextq_s8(v28, v28, 8uLL)).u64[0]));
    v33 = vqtbl1q_s8(a3[2], *(int8x16_t *)qword_1DEDA6880);
    v34 = a2[5];
    v35 = veorq_s8(v30, (int8x16_t)vmull_p64(v34.u64[0], v33.u64[0]));
    v36 = veorq_s8(v31, (int8x16_t)vmull_high_p64(v34, (uint64x2_t)v33));
    v37 = veorq_s8(v32, (int8x16_t)vmull_p64(a2[13].u64[0], veorq_s8(v33, vextq_s8(v33, v33, 8uLL)).u64[0]));
    v38 = vqtbl1q_s8(a3[1], *(int8x16_t *)qword_1DEDA6880);
    v39 = a2[6];
    v40 = veorq_s8(v35, (int8x16_t)vmull_p64(v39.u64[0], v38.u64[0]));
    v41 = veorq_s8(v36, (int8x16_t)vmull_high_p64(v39, (uint64x2_t)v38));
    v42 = veorq_s8(v37, (int8x16_t)vmull_p64(a2[14].u64[0], veorq_s8(v38, vextq_s8(v38, v38, 8uLL)).u64[0]));
    v43 = a2[7];
    v44 = veorq_s8(vqtbl1q_s8(*a3, *(int8x16_t *)qword_1DEDA6880), v6);
    v45 = veorq_s8(v40, (int8x16_t)vmull_p64(v43.u64[0], v44.u64[0]));
    v46 = veorq_s8(v41, (int8x16_t)vmull_high_p64(v43, (uint64x2_t)v44));
    v47 = veorq_s8(v46, veorq_s8(v45, veorq_s8(v42, (int8x16_t)vmull_p64(a2[15].u64[0], veorq_s8(v44, vextq_s8(v44, v44, 8uLL)).u64[0]))));
    v48 = veorq_s8(v45, vextq_s8(v5, v47, 8uLL));
    v49 = veorq_s8((int8x16_t)vmull_p64(0xC200000000000000, v48.u64[0]), vextq_s8(v48, v48, 8uLL));
    v6 = veorq_s8(veorq_s8(v46, vextq_s8(v47, v5, 8uLL)), veorq_s8((int8x16_t)vmull_p64(0xC200000000000000, v49.u64[0]), vextq_s8(v49, v49, 8uLL)));
    a3 += 8;
    v7 = i < 128;
  }
  v7 = i < -112;
  v50 = i + 112;
  if (!v7)
  {
    v52 = *a3;
    v51 = a3 + 1;
    v53 = veorq_s8(v6, vqtbl1q_s8(v52, *(int8x16_t *)qword_1DEDA6880));
    v54 = (uint64x2_t *)((char *)a2 + v50);
    v55 = *(uint64x2_t *)((char *)a2 + v50);
    v56 = (int8x16_t)vmull_p64(v53.u64[0], v55.u64[0]);
    v57 = (int8x16_t)vmull_high_p64((uint64x2_t)v53, v55);
    v58 = (int8x16_t)vmull_p64(veorq_s8(v53, vextq_s8(v53, v53, 8uLL)).u64[0], *(unint64_t *)((char *)a2[8].u64 + v50));
    v7 = v50 < 16;
    for (j = v50 - 16; !v7; j -= 16)
    {
      --v54;
      v60 = *v51++;
      v61 = vqtbl1q_s8(v60, *(int8x16_t *)qword_1DEDA6880);
      v56 = veorq_s8(v56, (int8x16_t)vmull_p64(v61.u64[0], v54->i64[0]));
      v57 = veorq_s8(v57, (int8x16_t)vmull_high_p64((uint64x2_t)v61, *v54));
      v58 = veorq_s8(v58, (int8x16_t)vmull_p64(veorq_s8(v61, vextq_s8(v61, v61, 8uLL)).u64[0], v54[8].u64[0]));
      v7 = j < 16;
    }
    v62 = veorq_s8(v57, veorq_s8(v56, v58));
    v63 = veorq_s8(v56, vextq_s8(v5, v62, 8uLL));
    v64 = veorq_s8((int8x16_t)vmull_p64(0xC200000000000000, v63.u64[0]), vextq_s8(v63, v63, 8uLL));
    v6 = veorq_s8(veorq_s8(v57, vextq_s8(v62, v5, 8uLL)), veorq_s8((int8x16_t)vmull_p64(0xC200000000000000, v64.u64[0]), vextq_s8(v64, v64, 8uLL)));
  }
  result = vqtbl1q_s8(v6, *(int8x16_t *)qword_1DEDA6880);
  *a1 = result;
  return result;
}

double ccmode_gcm_mult_h(uint64x2_t *a1, int8x16_t *a2, double a3, double a4, double a5, double a6, double a7, int8x16_t a8)
{
  double result;

  *(_QWORD *)&result = gcm_gmult(a2, a1 + 8, a2, a3, a4, a5, a6, a7, a8).u64[0];
  return result;
}

void ccmode_gcm_aad_finalize(uint64_t a1, double a2, double a3, double a4, double a5, double a6, int8x16_t a7)
{
  if (*(_WORD *)(a1 + 80) == 2)
  {
    if ((*(_BYTE *)(a1 + 88) & 0xF) != 0)
      ccmode_gcm_mult_h((uint64x2_t *)a1, (int8x16_t *)(a1 + 16), a2, a3, a4, a5, a6, a7);
    *(_WORD *)(a1 + 80) = 3;
  }
}

unint64_t cc_cmp_safe(uint64_t a1, char *a2, char *a3)
{
  char v3;
  unsigned __int8 v9;
  char v10;
  char v11;
  char v12;
  unint64_t v13;
  char v15;

  v3 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v15 = v3;
  if (a1)
  {
    v9 = 0;
    do
    {
      v11 = *a2++;
      v10 = v11;
      v12 = *a3++;
      v9 |= v12 ^ v10;
      --a1;
    }
    while (a1);
    v13 = ((unint64_t)v9 + 0xFFFFFFFF) >> 32;
  }
  else
  {
    v13 = 1;
  }
  cc_disable_dit(&v15);
  return v13;
}

uint64_t ccaes_vng_gcm_encrypt(uint64_t a1, unint64_t a2, int8x16_t *a3, int8x16_t *a4, double a5, double a6, double a7, double a8, double a9, int8x16_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  int8x16_t v22;
  uint64_t v23;
  uint64_t result;
  unsigned int v25;
  uint64_t v26;
  __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  int8x16_t v37;
  uint64_t i;
  uint64_t j;
  uint64_t v40;
  __int8 *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v14 = *(_QWORD *)(a1 + 96);
  ccmode_gcm_aad_finalize(a1, a5, a6, a7, a8, a9, a10);
  if (*(_WORD *)(a1 + 80) != 3)
    return 4294967228;
  v23 = *(_QWORD *)(a1 + 96);
  result = 4294967229;
  if (!__CFADD__(v23, a2) && v23 + a2 <= 0xFFFFFFFE0)
  {
    v25 = v14 & 0xF;
    if ((v14 & 0xF) != 0)
    {
      v26 = 16 - v25;
      if (a2 < v26)
      {
LABEL_19:
        if (!a2)
          return 0;
        v40 = v25;
        v41 = &a4[-1].i8[15];
        v42 = a1 + v25 + 63;
        v43 = a2;
        do
        {
          v41[v43] = *(_BYTE *)(v42 + v43) ^ a3[-1].i8[v43 + 15];
          --v43;
        }
        while (v43);
        v44 = v40 + a1 + 15;
        v45 = a2;
        do
        {
          *(_BYTE *)(v44 + v45) ^= v41[v45];
          --v45;
        }
        while (v45);
        result = 0;
        *(_QWORD *)(a1 + 96) += a2;
        return result;
      }
      v27 = &a4[-1].i8[15];
      v28 = v26;
      do
      {
        v27[v28] = *(_BYTE *)((v14 & 0xF) + a1 + 63 + v28) ^ a3[-1].i8[v28 + 15];
        --v28;
      }
      while (v28);
      v29 = v26;
      do
      {
        *(_BYTE *)((v14 & 0xF) + a1 + 15 + v29) ^= v27[v29];
        --v29;
      }
      while (v29);
      ccmode_gcm_mult_h((uint64x2_t *)a1, (int8x16_t *)(a1 + 16), v17, v18, v19, v20, v21, v22);
      a2 -= v26;
      a3 = (int8x16_t *)((char *)a3 + v26);
      a4 = (int8x16_t *)((char *)a4 + v26);
      *(_QWORD *)(a1 + 96) += v26;
      ccmode_gcm_update_pad(a1);
    }
    if (a2 >= 0x10)
    {
      gcmEncrypt(a3, a4, (int8x16_t *)a1, a2 & 0xFFFFFFF0, (uint64x2_t *)(a1 + 128), *(_QWORD *)(a1 + 112), v15, v16, v46, v47);
      v30 = a2 & 0xFFFFFFF0;
      a2 &= 0xFFFFFFFF0000000FLL;
      a3 = (int8x16_t *)((char *)a3 + v30);
      a4 = (int8x16_t *)((char *)a4 + v30);
      v31 = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 96) += v30;
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v31 + 24))(*(_QWORD *)(a1 + 112), 1, a1 + 32, a1 + 64);
      if (a2 >= 0x10)
      {
        do
        {
          for (i = 0; i != -16; --i)
            a4->i8[i + 15] = *(_BYTE *)(a1 + i + 79) ^ a3->i8[i + 15];
          for (j = 0; j != -16; --j)
            *(_BYTE *)(a1 + j + 31) ^= a4->u8[j + 15];
          ccmode_gcm_mult_h((uint64x2_t *)a1, (int8x16_t *)(a1 + 16), v32, v33, v34, v35, v36, v37);
          a2 -= 16;
          ++a3;
          ++a4;
          *(_QWORD *)(a1 + 96) += 16;
          ccmode_gcm_update_pad(a1);
        }
        while (a2 > 0xF);
      }
    }
    v25 = 0;
    goto LABEL_19;
  }
  return result;
}

uint64_t ccgcm_init(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = (*(uint64_t (**)(void))(a1 + 24))();
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccmode_gcm_init(uint64_t a1, int8x16_t *a2)
{
  uint64_t v2;
  int8x16_t *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  int8x16_t v10;

  v2 = *(_QWORD *)(a1 + 72);
  if (*(_QWORD *)(v2 + 8) != 16)
    return 0xFFFFFFFFLL;
  v4 = a2 + 8;
  a2[6].i64[1] = v2;
  a2[7].i64[0] = (uint64_t)a2[24].i64;
  a2[7].i32[2] = *(_DWORD *)(a1 + 8);
  (*(void (**)(uint64_t))(v2 + 16))(v2);
  a2[5].i16[1] = 0;
  ccmode_gcm_reset((uint64_t)a2);
  v5 = (*(double (**)(uint64_t, uint64_t, int8x16_t *, int8x16_t *))(v2 + 24))(a2[7].i64[0], 1, a2 + 1, a2);
  gcm_init(v4, a2, v5, v6, v7, v8, v9, v10);
  return 0;
}

uint64_t ccgcm_reset(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v8;
  char v10;

  v2 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v10 = v2;
  v8 = (*(uint64_t (**)(uint64_t))(a1 + 64))(a2);
  cc_disable_dit(&v10);
  return v8;
}

uint64_t ccmode_gcm_reset(uint64_t a1)
{
  cc_clear(0x10uLL, (void *)(a1 + 16));
  cc_clear(0x10uLL, (void *)(a1 + 64));
  *(_DWORD *)(a1 + 84) = 0;
  *(_WORD *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  return 0;
}

uint64_t ccpbkdf2_hmac(size_t *a1, uint64_t a2, uint64_t a3, size_t a4, char *a5, unint64_t a6, size_t a7, char *a8)
{
  char v14;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  size_t v23;
  char *v24;
  size_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  _QWORD v30[2];
  char v31;
  _BYTE __s[200];
  uint64_t v33;

  v14 = 0;
  v33 = *MEMORY[0x1E0C874D8];
  v31 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v14 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v14 = 1;
    }
  }
  v31 = v14;
  if ((a7 / *a1) >> 32)
  {
    v20 = 0xFFFFFFFFLL;
  }
  else
  {
    v30[1] = v30;
    MEMORY[0x1E0C86820](a1, a2, a2, a3);
    v22 = (_QWORD *)((char *)v30 - v21);
    cchmac_init((uint64_t)a1, (_QWORD *)((char *)v30 - v21), v23, v24);
    __memcpy_chk();
    v25 = *a1;
    v26 = a7 / *a1;
    v27 = a7 % *a1;
    if (*a1 <= a7)
    {
      v28 = 1;
      do
      {
        F(a1, v22, __s, a4, a5, a6, v28++, v25, a8);
        a8 += v25;
      }
      while (v28 <= v26);
    }
    else
    {
      LODWORD(v28) = 1;
    }
    if (v27)
      F(a1, v22, __s, a4, a5, a6, v28, v27, a8);
    cc_clear(((a1[1] + a1[2] + 19) & 0xFFFFFFFFFFFFFFF8) + a1[1], v22);
    cc_clear((a1[1] + 7) & 0xFFFFFFFFFFFFFFF8, __s);
    v20 = 0;
  }
  cc_disable_dit(&v31);
  return v20;
}

uint64_t cchkdf(uint64_t *a1, size_t a2, char *a3, uint64_t a4, _OWORD *a5, size_t a6, char *a7, uint64_t a8, uint64_t a9)
{
  char v13;
  uint64_t v19;
  char v21;
  _BYTE __s[64];
  uint64_t v23;

  v13 = 0;
  v23 = *MEMORY[0x1E0C874D8];
  v21 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v13 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v13 = 1;
    }
  }
  v21 = v13;
  cchkdf_extract(a1, a4, a5, a2, a3, (uint64_t)__s);
  v19 = cchkdf_expand((rsize_t *)a1, *a1, (uint64_t)__s, a6, a7, a8, a9);
  cc_clear(*a1, __s);
  cc_disable_dit(&v21);
  return v19;
}

uint64_t cchkdf_extract(uint64_t *a1, uint64_t a2, _OWORD *a3, size_t a4, char *a5, uint64_t a6)
{
  char v6;
  char v13;
  _OWORD v14[4];
  uint64_t v15;

  v6 = 0;
  v15 = *MEMORY[0x1E0C874D8];
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v13 = v6;
  memset(v14, 0, sizeof(v14));
  if (!a2)
  {
    a2 = *a1;
    a3 = v14;
  }
  cchmac((uint64_t)a1, a2, (uint64_t)a3, a4, a5, a6);
  cc_disable_dit(&v13);
  return 0;
}

_BYTE *cchmac(uint64_t a1, uint64_t a2, uint64_t a3, size_t a4, char *a5, uint64_t a6)
{
  char v10;
  uint64_t v16;
  _QWORD *v17;
  size_t v18;
  char *v19;
  _BYTE v21[7];
  char v22;
  uint64_t v23;

  v10 = 0;
  v23 = *MEMORY[0x1E0C874D8];
  v22 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v22 = v10;
  MEMORY[0x1E0C86820](a1, a2, a2, a3);
  v17 = &v21[-v16];
  cchmac_init(a1, &v21[-v16], v18, v19);
  cchmac_update(a1, v17, a4, a5);
  cchmac_final(a1, v17, a6);
  cc_clear(((*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) + 19) & 0xFFFFFFFFFFFFFFF8) + *(_QWORD *)(a1 + 8), v17);
  return cc_disable_dit(&v22);
}

void *F(_QWORD *a1, _QWORD *a2, void *__src, size_t a4, char *a5, unint64_t a6, unsigned int a7, size_t a8, char *a9)
{
  size_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *result;
  unint64_t v21;
  uint64_t v22;
  size_t v23;
  unsigned int v26;

  v15 = a1[1];
  v16 = (char *)(a2 + 1);
  v17 = (char *)a2 + v15 + 8;
  memcpy(a2 + 1, __src, v15);
  v19 = a1[1];
  v18 = a1[2];
  *a2 = 8 * v18;
  *(_DWORD *)((char *)a2 + v19 + v18 + 8) = 0;
  ccdigest_update((uint64_t)a1, a2, a4, a5);
  v26 = bswap32(a7);
  ccdigest_update((uint64_t)a1, a2, 4uLL, (char *)&v26);
  cchmac_final((uint64_t)a1, a2, (uint64_t)v17);
  result = memcpy(a9, v17, a8);
  if (a6 >= 2)
  {
    v21 = 2;
    do
    {
      memcpy(v16, __src, a1[1]);
      v22 = a1[2];
      *a2 = 8 * v22;
      *(_DWORD *)&v16[a1[1] + v22] = *a1;
      result = cchmac_final((uint64_t)a1, a2, (uint64_t)v17);
      if (a8)
      {
        v23 = a8;
        do
        {
          a9[v23 - 1] ^= *((_BYTE *)a2 + v15 + v23 + 7);
          --v23;
        }
        while (v23);
      }
      ++v21;
    }
    while (v21 <= a6);
  }
  return result;
}

_BYTE *F_0(uint64_t a1, _QWORD *a2, void *__src, unsigned int a4, size_t a5, char *a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  unsigned int __srca;

  memcpy(a2 + 1, __src, *(_QWORD *)(a1 + 8));
  v14 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  *a2 = 8 * v13;
  *(_DWORD *)((char *)a2 + v14 + v13 + 8) = 0;
  __srca = bswap32(a4);
  ccdigest_update(a1, a2, 4uLL, (char *)&__srca);
  ccdigest_update(a1, a2, a5, a6);
  return cchmac_final(a1, a2, a7);
}

uint64_t cchkdf_expand(rsize_t *a1, rsize_t a2, uint64_t a3, size_t a4, char *a5, uint64_t a6, uint64_t a7)
{
  char v9;
  rsize_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  uint64_t v32;
  size_t v33;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char v39;
  char v40;
  char __src[64];
  uint64_t v42;

  v37 = a5;
  v38 = a7;
  v36 = a6;
  v9 = 0;
  v42 = *MEMORY[0x1E0C874D8];
  v40 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v9 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v9 = 1;
    }
  }
  v40 = v9;
  v15 = *a1;
  v16 = 4294967289;
  if (*a1 <= a2)
  {
    v17 = v36 + v15 - 1;
    v18 = v17 / v15;
    if (v17 / v15 <= 0xFF)
    {
      v35 = (uint64_t)&v35;
      v19 = MEMORY[0x1E0C86820](a1, a2, a2, a3);
      v21 = (char *)&v35 - v20;
      MEMORY[0x1E0C86820](v19, v22, v23, v24);
      v26 = (char *)&v35 - v25;
      cchmac_init((uint64_t)a1, (uint64_t *)((char *)&v35 - v25), v27, v28);
      if (v15 <= v17)
      {
        v29 = 0;
        v30 = 0;
        v31 = 0;
        if (v18 <= 1)
          v32 = 1;
        else
          v32 = v17 / v15;
        do
        {
          memcpy(v21, v26, ((a1[1] + a1[2] + 19) & 0xFFFFFFFFFFFFFFF8) + a1[1]);
          cchmac_update((uint64_t)a1, v21, v31, __src);
          cchmac_update((uint64_t)a1, v21, a4, v37);
          v39 = v29 + 1;
          cchmac_update((uint64_t)a1, v21, 1uLL, &v39);
          cchmac_final((uint64_t)a1, v21, (uint64_t)__src);
          if (v18 - 1 == v29)
            v33 = v36 - v30;
          else
            v33 = *a1;
          memcpy((void *)(v38 + v30), __src, v33);
          v31 = *a1;
          v30 += *a1;
          ++v29;
        }
        while (v32 != v29);
      }
      cc_clear(((a1[1] + a1[2] + 19) & 0xFFFFFFFFFFFFFFF8) + a1[1], v26);
      cc_clear(((a1[1] + a1[2] + 19) & 0xFFFFFFFFFFFFFFF8) + a1[1], v21);
      cc_clear(*a1, __src);
      v16 = 0;
    }
  }
  cc_disable_dit(&v40);
  return v16;
}

_BYTE *cchmac_update(uint64_t a1, _QWORD *a2, size_t a3, char *a4)
{
  char v4;
  char v11;

  v4 = 0;
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v11 = v4;
  ccdigest_update(a1, a2, a3, a4);
  return cc_disable_dit(&v11);
}

_BYTE *cchmac_final(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char v6;
  size_t v12;
  uint64_t v13;
  char v15;

  v6 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v15 = v6;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(a1 + 56))(a1, a2, (uint64_t)a2 + *(_QWORD *)(a1 + 8) + 8);
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)((char *)a2 + v12 + v13 + 8) = *(_QWORD *)a1;
  *a2 = 8 * v13;
  memcpy(a2 + 1, (char *)a2 + ((v12 + v13 + 19) & 0xFFFFFFFFFFFFFFF8), v12);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(a1 + 56))(a1, a2, a3);
  return cc_disable_dit(&v15);
}

_BYTE *cchmac_init(uint64_t a1, _QWORD *a2, size_t a3, char *a4)
{
  size_t v5;
  char v8;
  uint64_t v14;
  uint64_t i;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v20;

  v5 = a3;
  v8 = 0;
  v20 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v20 = v8;
  if (*(_QWORD *)(a1 + 16) >= a3)
  {
    if (a3)
    {
      for (i = 0; i != a3; ++i)
        *((_BYTE *)a2 + *(_QWORD *)(a1 + 8) + i + 8) = a4[i] ^ 0x5C;
    }
  }
  else
  {
    ccdigest_init(a1, a2);
    ccdigest_update(a1, a2, v5, a4);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(a1 + 56))(a1, a2, (uint64_t)a2 + *(_QWORD *)(a1 + 8) + 8);
    v5 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v14 = 0;
      do
        *((_BYTE *)a2 + *(_QWORD *)(a1 + 8) + v14++ + 8) ^= 0x5Cu;
      while (v5 != v14);
    }
  }
  v16 = *(_QWORD *)(a1 + 16);
  if (v16 > v5)
  {
    memset((char *)a2 + v5 + *(_QWORD *)(a1 + 8) + 8, 92, v16 - v5);
    v16 = *(_QWORD *)(a1 + 16);
  }
  memcpy((char *)a2 + ((*(_QWORD *)(a1 + 8) + v16 + 19) & 0xFFFFFFFFFFFFFFF8), *(const void **)(a1 + 40), *(_QWORD *)(a1 + 8));
  (*(void (**)(unint64_t, uint64_t, uint64_t))(a1 + 48))((unint64_t)a2 + ((*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) + 19) & 0xFFFFFFFFFFFFFFF8), 1, (uint64_t)a2 + *(_QWORD *)(a1 + 8) + 8);
  if (*(_QWORD *)(a1 + 16))
  {
    v17 = 0;
    do
      *((_BYTE *)a2 + *(_QWORD *)(a1 + 8) + v17++ + 8) ^= 0x6Au;
    while (v17 < *(_QWORD *)(a1 + 16));
  }
  memcpy(a2 + 1, *(const void **)(a1 + 40), *(_QWORD *)(a1 + 8));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1 + 48))(a2 + 1, 1, (uint64_t)a2 + *(_QWORD *)(a1 + 8) + 8);
  v18 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)((char *)a2 + *(_QWORD *)(a1 + 8) + v18 + 8) = 0;
  *a2 = 8 * v18;
  return cc_disable_dit(&v20);
}

uint64_t ccsha512_final(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  const void *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C874D8];
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = a2 + v6 + 8;
  if (v5 <= *(unsigned int *)(v7 + v5))
    *(_DWORD *)(v7 + v5) = 0;
  MEMORY[0x1E0C86820]();
  v9 = (_QWORD *)((char *)v22 - v8);
  memcpy((char *)v22 - v8, v11, v10 + 4);
  v12 = (char *)v9 + v6 + 8;
  v13 = *(unsigned int *)&v12[v5];
  *v9 += (8 * v13);
  *(_DWORD *)&v12[v5] = v13 + 1;
  v12[v13] = 0x80;
  v14 = *(unsigned int *)&v12[v5];
  if (v5 - 16 < v14)
  {
    while (v5 > v14)
    {
      *(_DWORD *)&v12[v5] = v14 + 1;
      v12[v14] = 0;
      v14 = *(unsigned int *)&v12[v5];
    }
    (*(void (**)(unint64_t *, uint64_t))(a1 + 48))(v9 + 1, 1);
    LODWORD(v14) = 0;
    v6 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)((char *)v9 + v6 + v5 + 8) = 0;
  }
  v15 = (uint64_t)v9 + v6 + 8;
  v16 = (_DWORD *)(v15 + v5);
  if (v5 - 8 > v14)
  {
    v17 = v14;
    do
    {
      *v16 = v14 + 1;
      *(_BYTE *)(v15 + v17) = 0;
      v17 = *v16;
      LODWORD(v14) = *v16;
    }
    while (v5 - 8 > v17);
  }
  *((_QWORD *)v16 - 1) = bswap64(*v9);
  (*(void (**)(unint64_t *, uint64_t))(a1 + 48))(v9 + 1, 1);
  if (*(_QWORD *)a1 >= 8uLL)
  {
    v18 = 0;
    v19 = 0;
    v20 = 1;
    do
    {
      *(_QWORD *)(a3 + v18) = bswap64(v9[v19 + 1]);
      v19 = v20++;
      v18 += 8;
    }
    while (v19 < *(_QWORD *)a1 >> 3);
  }
  return cc_clear(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) + 12, v9);
}

int64x2_t *AccelerateCrypto_SHA512_compress_hwassist(int64x2_t *result, uint64_t a2, int8x16_t *a3)
{
  int64x2_t v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v26;
  int8x16_t v29;
  int64x2_t v35;
  int8x16_t v38;
  int64x2_t v44;
  int8x16_t v47;
  int64x2_t v53;
  int8x16_t v56;
  int64x2_t v62;
  int8x16_t v65;
  int64x2_t v71;
  int8x16_t v74;
  int64x2_t v80;
  int8x16_t v83;
  int64x2_t v89;
  int8x16_t v92;
  int64x2_t v98;
  int8x16_t v101;
  int64x2_t v107;
  int8x16_t v110;
  int64x2_t v116;
  int8x16_t v119;
  int64x2_t v125;
  int8x16_t v128;
  int64x2_t v134;
  int8x16_t v137;
  int64x2_t v143;
  int8x16_t v146;
  int64x2_t v152;
  int8x16_t v155;
  int64x2_t v161;
  int8x16_t v164;
  int64x2_t v170;
  int8x16_t v173;
  int64x2_t v179;
  int8x16_t v182;
  int64x2_t v188;
  int8x16_t v191;
  int64x2_t v197;
  int8x16_t v200;
  int64x2_t v206;
  int8x16_t v209;
  int64x2_t v215;
  int8x16_t v218;
  int64x2_t v224;
  int8x16_t v227;
  int64x2_t v233;
  int8x16_t v236;
  int64x2_t v242;
  int8x16_t v245;
  int64x2_t v251;
  int8x16_t v254;
  int64x2_t v260;
  int8x16_t v263;
  int64x2_t v269;
  int8x16_t v272;
  int64x2_t v278;
  int8x16_t v281;
  int64x2_t v287;
  int8x16_t v290;
  int64x2_t v296;
  int8x16_t v299;
  int64x2_t v305;
  int8x16_t v308;
  int8x16_t v313;
  int8x16_t v318;
  int8x16_t v323;
  int8x16_t v328;
  int8x16_t v333;
  int8x16_t v338;
  int64x2_t v343;

  if (a2)
  {
    v3 = *result;
    v4 = result[1];
    v5 = result[2];
    v6 = result[3];
    do
    {
      _Q24 = v3;
      _Q25 = v4;
      _Q0 = vrev64q_s8(*a3);
      _Q1 = vrev64q_s8(a3[1]);
      _Q2 = vrev64q_s8(a3[2]);
      _Q3 = vrev64q_s8(a3[3]);
      _Q4 = vrev64q_s8(a3[4]);
      _Q5 = vrev64q_s8(a3[5]);
      _Q6 = vrev64q_s8(a3[6]);
      _Q7 = vrev64q_s8(a3[7]);
      a3 += 8;
      _Q29 = vextq_s8((int8x16_t)v5, (int8x16_t)v6, 8uLL);
      _Q28 = vextq_s8((int8x16_t)v4, (int8x16_t)v5, 8uLL);
      _Q31 = vextq_s8(_Q4, _Q5, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V0.2D, V1.2D
      }
      v26 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V0.2D, V7.2D, V31.2D
      }
      v29 = (int8x16_t)vaddq_s64(v4, v26);
      _Q29 = vextq_s8(v29, (int8x16_t)v5, 8uLL);
      _Q28 = vextq_s8((int8x16_t)v3, v29, 8uLL);
      _Q31 = vextq_s8(_Q5, _Q6, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V1.2D, V2.2D
      }
      v35 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V1.2D, V0.2D, V31.2D
      }
      v38 = (int8x16_t)vaddq_s64(v3, v35);
      _Q29 = vextq_s8(v38, v29, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v38, 8uLL);
      _Q31 = vextq_s8(_Q6, _Q7, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V2.2D, V3.2D
      }
      v44 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V2.2D, V1.2D, V31.2D
      }
      v47 = (int8x16_t)vaddq_s64(_Q27, v44);
      _Q29 = vextq_s8(v47, v38, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v47, 8uLL);
      _Q31 = vextq_s8(_Q7, _Q0, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V3.2D, V4.2D
      }
      v53 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V3.2D, V2.2D, V31.2D
      }
      v56 = (int8x16_t)vaddq_s64(_Q26, v53);
      _Q29 = vextq_s8(v56, v47, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v56, 8uLL);
      _Q31 = vextq_s8(_Q0, _Q1, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V4.2D, V5.2D
      }
      v62 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V4.2D, V3.2D, V31.2D
      }
      v65 = (int8x16_t)vaddq_s64(_Q25, v62);
      _Q29 = vextq_s8(v65, v56, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v65, 8uLL);
      _Q31 = vextq_s8(_Q1, _Q2, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V5.2D, V6.2D
      }
      v71 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V5.2D, V4.2D, V31.2D
      }
      v74 = (int8x16_t)vaddq_s64(_Q24, v71);
      _Q29 = vextq_s8(v74, v65, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v74, 8uLL);
      _Q31 = vextq_s8(_Q2, _Q3, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V6.2D, V7.2D
      }
      v80 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V6.2D, V5.2D, V31.2D
      }
      v83 = (int8x16_t)vaddq_s64(_Q27, v80);
      _Q29 = vextq_s8(v83, v74, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v83, 8uLL);
      _Q31 = vextq_s8(_Q3, _Q4, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V7.2D, V0.2D
      }
      v89 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V7.2D, V6.2D, V31.2D
      }
      v92 = (int8x16_t)vaddq_s64(_Q26, v89);
      _Q29 = vextq_s8(v92, v83, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v92, 8uLL);
      _Q31 = vextq_s8(_Q4, _Q5, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V0.2D, V1.2D
      }
      v98 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V0.2D, V7.2D, V31.2D
      }
      v101 = (int8x16_t)vaddq_s64(_Q25, v98);
      _Q29 = vextq_s8(v101, v92, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v101, 8uLL);
      _Q31 = vextq_s8(_Q5, _Q6, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V1.2D, V2.2D
      }
      v107 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V1.2D, V0.2D, V31.2D
      }
      v110 = (int8x16_t)vaddq_s64(_Q24, v107);
      _Q29 = vextq_s8(v110, v101, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v110, 8uLL);
      _Q31 = vextq_s8(_Q6, _Q7, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V2.2D, V3.2D
      }
      v116 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V2.2D, V1.2D, V31.2D
      }
      v119 = (int8x16_t)vaddq_s64(_Q27, v116);
      _Q29 = vextq_s8(v119, v110, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v119, 8uLL);
      _Q31 = vextq_s8(_Q7, _Q0, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V3.2D, V4.2D
      }
      v125 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V3.2D, V2.2D, V31.2D
      }
      v128 = (int8x16_t)vaddq_s64(_Q26, v125);
      _Q29 = vextq_s8(v128, v119, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v128, 8uLL);
      _Q31 = vextq_s8(_Q0, _Q1, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V4.2D, V5.2D
      }
      v134 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V4.2D, V3.2D, V31.2D
      }
      v137 = (int8x16_t)vaddq_s64(_Q25, v134);
      _Q29 = vextq_s8(v137, v128, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v137, 8uLL);
      _Q31 = vextq_s8(_Q1, _Q2, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V5.2D, V6.2D
      }
      v143 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V5.2D, V4.2D, V31.2D
      }
      v146 = (int8x16_t)vaddq_s64(_Q24, v143);
      _Q29 = vextq_s8(v146, v137, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v146, 8uLL);
      _Q31 = vextq_s8(_Q2, _Q3, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V6.2D, V7.2D
      }
      v152 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V6.2D, V5.2D, V31.2D
      }
      v155 = (int8x16_t)vaddq_s64(_Q27, v152);
      _Q29 = vextq_s8(v155, v146, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v155, 8uLL);
      _Q31 = vextq_s8(_Q3, _Q4, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V7.2D, V0.2D
      }
      v161 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V7.2D, V6.2D, V31.2D
      }
      v164 = (int8x16_t)vaddq_s64(_Q26, v161);
      _Q29 = vextq_s8(v164, v155, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v164, 8uLL);
      _Q31 = vextq_s8(_Q4, _Q5, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V0.2D, V1.2D
      }
      v170 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V0.2D, V7.2D, V31.2D
      }
      v173 = (int8x16_t)vaddq_s64(_Q25, v170);
      _Q29 = vextq_s8(v173, v164, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v173, 8uLL);
      _Q31 = vextq_s8(_Q5, _Q6, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V1.2D, V2.2D
      }
      v179 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V1.2D, V0.2D, V31.2D
      }
      v182 = (int8x16_t)vaddq_s64(_Q24, v179);
      _Q29 = vextq_s8(v182, v173, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v182, 8uLL);
      _Q31 = vextq_s8(_Q6, _Q7, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V2.2D, V3.2D
      }
      v188 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V2.2D, V1.2D, V31.2D
      }
      v191 = (int8x16_t)vaddq_s64(_Q27, v188);
      _Q29 = vextq_s8(v191, v182, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v191, 8uLL);
      _Q31 = vextq_s8(_Q7, _Q0, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V3.2D, V4.2D
      }
      v197 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V3.2D, V2.2D, V31.2D
      }
      v200 = (int8x16_t)vaddq_s64(_Q26, v197);
      _Q29 = vextq_s8(v200, v191, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v200, 8uLL);
      _Q31 = vextq_s8(_Q0, _Q1, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V4.2D, V5.2D
      }
      v206 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V4.2D, V3.2D, V31.2D
      }
      v209 = (int8x16_t)vaddq_s64(_Q25, v206);
      _Q29 = vextq_s8(v209, v200, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v209, 8uLL);
      _Q31 = vextq_s8(_Q1, _Q2, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V5.2D, V6.2D
      }
      v215 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V5.2D, V4.2D, V31.2D
      }
      v218 = (int8x16_t)vaddq_s64(_Q24, v215);
      _Q29 = vextq_s8(v218, v209, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v218, 8uLL);
      _Q31 = vextq_s8(_Q2, _Q3, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V6.2D, V7.2D
      }
      v224 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V6.2D, V5.2D, V31.2D
      }
      v227 = (int8x16_t)vaddq_s64(_Q27, v224);
      _Q29 = vextq_s8(v227, v218, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v227, 8uLL);
      _Q31 = vextq_s8(_Q3, _Q4, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V7.2D, V0.2D
      }
      v233 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V7.2D, V6.2D, V31.2D
      }
      v236 = (int8x16_t)vaddq_s64(_Q26, v233);
      _Q29 = vextq_s8(v236, v227, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v236, 8uLL);
      _Q31 = vextq_s8(_Q4, _Q5, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V0.2D, V1.2D
      }
      v242 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V0.2D, V7.2D, V31.2D
      }
      v245 = (int8x16_t)vaddq_s64(_Q25, v242);
      _Q29 = vextq_s8(v245, v236, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v245, 8uLL);
      _Q31 = vextq_s8(_Q5, _Q6, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V1.2D, V2.2D
      }
      v251 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V1.2D, V0.2D, V31.2D
      }
      v254 = (int8x16_t)vaddq_s64(_Q24, v251);
      _Q29 = vextq_s8(v254, v245, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v254, 8uLL);
      _Q31 = vextq_s8(_Q6, _Q7, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V2.2D, V3.2D
      }
      v260 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V2.2D, V1.2D, V31.2D
      }
      v263 = (int8x16_t)vaddq_s64(_Q27, v260);
      _Q29 = vextq_s8(v263, v254, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v263, 8uLL);
      _Q31 = vextq_s8(_Q7, _Q0, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V3.2D, V4.2D
      }
      v269 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V3.2D, V2.2D, V31.2D
      }
      v272 = (int8x16_t)vaddq_s64(_Q26, v269);
      _Q29 = vextq_s8(v272, v263, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v272, 8uLL);
      _Q31 = vextq_s8(_Q0, _Q1, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V4.2D, V5.2D
      }
      v278 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V4.2D, V3.2D, V31.2D
      }
      v281 = (int8x16_t)vaddq_s64(_Q25, v278);
      _Q29 = vextq_s8(v281, v272, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v281, 8uLL);
      _Q31 = vextq_s8(_Q1, _Q2, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V5.2D, V6.2D
      }
      v287 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V5.2D, V4.2D, V31.2D
      }
      v290 = (int8x16_t)vaddq_s64(_Q24, v287);
      _Q29 = vextq_s8(v290, v281, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v290, 8uLL);
      _Q31 = vextq_s8(_Q2, _Q3, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V6.2D, V7.2D
      }
      v296 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V6.2D, V5.2D, V31.2D
      }
      v299 = (int8x16_t)vaddq_s64(_Q27, v296);
      _Q29 = vextq_s8(v299, v290, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v299, 8uLL);
      _Q31 = vextq_s8(_Q3, _Q4, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V7.2D, V0.2D
      }
      v305 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V7.2D, V6.2D, V31.2D
      }
      v308 = (int8x16_t)vaddq_s64(_Q26, v305);
      _Q29 = vextq_s8(v308, v299, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v308, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q27, Q25, V24.2D
      }
      v313 = (int8x16_t)vaddq_s64(_Q25, _Q30);
      _Q29 = vextq_s8(v313, v308, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v313, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q26, Q24, V27.2D
      }
      v318 = (int8x16_t)vaddq_s64(_Q24, _Q30);
      _Q29 = vextq_s8(v318, v313, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v318, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q25, Q27, V26.2D
      }
      v323 = (int8x16_t)vaddq_s64(_Q27, _Q30);
      _Q29 = vextq_s8(v323, v318, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v323, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q24, Q26, V25.2D
      }
      v328 = (int8x16_t)vaddq_s64(_Q26, _Q30);
      _Q29 = vextq_s8(v328, v323, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v328, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q27, Q25, V24.2D
      }
      v333 = (int8x16_t)vaddq_s64(_Q25, _Q30);
      _Q29 = vextq_s8(v333, v328, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v333, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q26, Q24, V27.2D
      }
      v338 = (int8x16_t)vaddq_s64(_Q24, _Q30);
      _Q29 = vextq_s8(v338, v333, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v338, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q25, Q27, V26.2D
      }
      v343 = vaddq_s64(_Q27, _Q30);
      _Q29 = vextq_s8((int8x16_t)v343, v338, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, (int8x16_t)v343, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q24, Q26, V25.2D
      }
      v3 = vaddq_s64(v3, _Q24);
      v4 = vaddq_s64(v4, _Q25);
      v5 = vaddq_s64(v5, vaddq_s64(_Q26, _Q30));
      v6 = vaddq_s64(v6, v343);
    }
    while (a2-- > 1);
    *result = v3;
    result[1] = v4;
    result[2] = v5;
    result[3] = v6;
  }
  return result;
}

void *ccsha512_di()
{
  if (MEMORY[0xFFFFFC010] < 0)
    return &ccsha512_vng_arm_hw_di;
  else
    return &ccsha512_vng_arm_di;
}

unsigned __int8 *ccder_decode_sequence_tl(unsigned __int8 **a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v4;
  unsigned __int8 *result;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8[2];

  *a1 = a2;
  if (!a2)
    return 0;
  v6 = 0;
  v7 = 0;
  v8[0] = a2;
  v8[1] = a3;
  v4 = ccder_blob_decode_sequence_tl(v8, &v6);
  result = 0;
  if (v4)
  {
    result = v6;
    *a1 = v7;
  }
  return result;
}

unsigned __int8 *ccrsa_import_priv_n(uint64_t a1, unsigned __int8 *a2)
{
  char v2;
  unsigned __int8 *v8;
  char v10;

  v2 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v10 = v2;
  v8 = ccder_decode_rsa_priv_n(a2, &a2[a1]);
  cc_disable_dit(&v10);
  return v8;
}

unsigned __int8 *ccder_decode_rsa_priv_n(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 *result;
  unsigned __int8 *v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v7 = a2;
  v5 = 0;
  v6 = 0;
  result = ccder_decode_constructed_tl(0x2000000000000010, &v7, a1, a2);
  if (result)
  {
    v3 = ccder_decode_uint(1uLL, &v6, result, v7);
    if (v3)
      v4 = v6 == 0;
    else
      v4 = 0;
    if (v4)
    {
      if (ccder_decode_uint_n(&v5, v3, v7))
        return (unsigned __int8 *)v5;
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unsigned __int8 *ccder_decode_rsa_pub_n(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 *result;
  unint64_t v3;
  unsigned __int8 *v4;

  v3 = 0;
  v4 = a2;
  result = ccder_decode_constructed_tl(0x2000000000000010, &v4, a1, a2);
  if (result)
  {
    if (ccder_decode_uint_n(&v3, result, v4))
      return (unsigned __int8 *)v3;
    else
      return 0;
  }
  return result;
}

unsigned __int8 *ccder_decode_uint_n(unint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4[2];

  if (!a2)
    return 0;
  v4[0] = a2;
  v4[1] = a3;
  if (ccder_blob_decode_uint_n(v4, a1))
    return v4[0];
  else
    return 0;
}

uint64_t ccder_blob_decode_uint_n(unsigned __int8 **a1, unint64_t *a2)
{
  uint64_t result;
  unsigned __int8 *v4;
  char *v5;
  unsigned __int8 *v6;

  v5 = 0;
  v6 = 0;
  result = ccder_blob_decode_range(a1, 2, (unsigned __int8 **)&v5);
  if ((_DWORD)result)
  {
    v4 = (unsigned __int8 *)v5;
    if (v5 != (char *)v6 && (*v5 & 0x80000000) == 0)
    {
      if (*v5)
        goto LABEL_5;
      v4 = (unsigned __int8 *)(v5 + 1);
      if (v5 + 1 == (char *)v6)
      {
        v4 = v6;
        goto LABEL_5;
      }
      if ((char)*v4 < 0)
      {
LABEL_5:
        *a2 = (unint64_t)(v6 - v4 + 7) >> 3;
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t ccdrbg_init(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = (*(uint64_t (**)(void))(a1 + 8))();
  cc_disable_dit(&v9);
  return v7;
}

uint64_t init()
{
  uint64_t result;

  result = ccrng_process_init((uint64_t)&process_rng_ctx, (uint64_t (*)(void))get_time_nsec, (uint64_t (**)(_QWORD, uint64_t, _BYTE *))ccrng_getentropy);
  if ((_DWORD)result)
    cc_abort();
  rng_ctx = (uint64_t)generate_0;
  return result;
}

uint64_t init_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  rsize_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE __s[48];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C874D8];
  v12 = *(uint64_t **)(a1 + 40);
  cc_clear(0x58uLL, (void *)a2);
  v18 = *v12;
  v19 = v12[1];
  *(_QWORD *)(a2 + 56) = *v12;
  *(_QWORD *)(a2 + 64) = v19;
  *(_DWORD *)(a2 + 72) = *((_DWORD *)v12 + 4);
  v20 = v12[3];
  *(_QWORD *)(a2 + 80) = v20;
  if (v19 >= 0x21 || *(_QWORD *)(v18 + 16) != 16)
    cc_try_abort();
  if (!v20)
  {
    if (v19 + 16 >= a7 && v19 + 16 == a3)
    {
      __memcpy_chk();
      for (; a7; --a7)
        __s[a7 - 1] ^= *(_BYTE *)(a8 - 1 + a7);
      goto LABEL_8;
    }
    v21 = 4294967233;
LABEL_16:
    cc_clear(0x20uLL, (void *)a2);
    cc_clear(0x10uLL, (void *)(a2 + 32));
    v23 = -1;
    goto LABEL_9;
  }
  v21 = 4294967233;
  if ((unint64_t)(a3 - 65537) < 0xFFFFFFFFFFFF000FLL || a7 > 0x10000)
    goto LABEL_16;
  v22 = derive(a2, __s, 3u, v13, v14, v15, v16, v17, a3);
  if ((_DWORD)v22)
  {
    v21 = v22;
    goto LABEL_16;
  }
  v19 = *(_QWORD *)(a2 + 64);
LABEL_8:
  cc_clear(v19, (void *)a2);
  cc_clear(0x10uLL, (void *)(a2 + 32));
  update(a2, (uint64_t)__s);
  v21 = 0;
  v23 = 1;
LABEL_9:
  *(_QWORD *)(a2 + 48) = v23;
  cc_clear(0x30uLL, __s);
  return v21;
}

uint64_t init_1(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t **v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = *(unint64_t ***)(a1 + 40);
  *(_QWORD *)a2 = v7;
  result = 4294967233;
  if (a3 <= 0x10000)
  {
    v9 = **v7;
    if (v9 <= 0x40 && a7 <= 0x10000 && v9 >> 1 <= a3)
    {
      __memset_chk();
      __memset_chk();
      update_1((size_t ***)a2, 3, v12, v13, v14, v15, v16, v17, a3);
      result = 0;
      *(_QWORD *)(a2 + 136) = 1;
    }
  }
  return result;
}

uint64_t ccrng_process_init(uint64_t a1, uint64_t (*a2)(void), uint64_t (**a3)(_QWORD, uint64_t, _BYTE *))
{
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t *v9;
  __int128 v10;
  uint64_t v11;
  char v12[24];
  _BYTE v13[32];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C874D8];
  v6 = a1 + 128;
  ccrng_schedule_timer_init(a1 + 128, a2, 5000000000);
  ccrng_schedule_atomic_flag_init(a1 + 168);
  ccrng_schedule_tree_init(a1 + 96, v6, a1 + 168);
  result = cc_lock_init((_DWORD *)(a1 + 208));
  if (!(_DWORD)result)
  {
    result = ccentropy_rng_init((_QWORD *)(a1 + 192), (uint64_t)a3);
    if (!(_DWORD)result)
    {
      v8 = ccaes_cbc_encrypt_mode();
      result = ccdrbg_df_bc_init((_QWORD *)(a1 + 224), v8, 0x20uLL);
      if (!(_DWORD)result)
      {
        v9 = ccaes_ctr_crypt_mode();
        v10 = xmmword_1DEE22870;
        DWORD2(v10) = 1;
        v11 = a1 + 224;
        ccdrbg_factory_nistctr((_QWORD *)(a1 + 768), (uint64_t)&v9);
        result = (*a3)(a3, 32, v13);
        if (!(_DWORD)result)
        {
          a2();
          strcpy(v12, "corecrypto process rng");
          result = ccdrbg_init(a1 + 768);
          if (!(_DWORD)result)
          {
            result = ccrng_crypto_init((_QWORD *)(a1 + 8), a1 + 192, a1 + 96, a1 + 208, a1 + 768, a1 + 824, 4096, 0x20uLL, 256, a1 + 2104);
            if (!(_DWORD)result)
              *(_QWORD *)a1 = generate_1;
          }
        }
      }
    }
  }
  return result;
}

void *ccaes_cbc_encrypt_mode()
{
  return &ccaes_arm_cbc_encrypt_mode;
}

uint64_t ccdrbg_df_bc_init(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  char v3;
  uint64_t v9;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v3 = 0;
  v14 = *MEMORY[0x1E0C874D8];
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v11 = v3;
  v12 = xmmword_1DEE29430;
  v13 = unk_1DEE29440;
  v9 = 4294967291;
  if (a3 <= 0x20 && *a2 <= 0x200uLL && a2[1] == 16)
  {
    *a1 = ccdrbg_df_bc_derive_keys;
    a1[1] = a2;
    a1[2] = a3;
    v9 = cccbc_init((uint64_t)a2);
  }
  cc_disable_dit(&v11);
  return v9;
}

uint64_t *ccaes_ctr_crypt_mode()
{
  unint64_t v0;
  void *v1;

  v0 = ((*(_QWORD *)ccaes_ecb_encrypt_mode() + 7) & 0xFFFFFFFFFFFFFFF8) + 48;
  v1 = ccaes_ecb_encrypt_mode();
  ctr_crypt = v0;
  unk_1ECCEC848 = xmmword_1DEE22920;
  qword_1ECCEC858 = (uint64_t)ccmode_ctr_init;
  unk_1ECCEC860 = ccmode_ctr_setctr;
  qword_1ECCEC868 = (uint64_t)ccaes_vng_ctr_crypt;
  unk_1ECCEC870 = v1;
  return &ctr_crypt;
}

uint64_t *ccaes_gcm_encrypt_mode()
{
  unint64_t v0;
  unint64_t v1;
  void *v2;

  v0 = 5 * ((*((_QWORD *)ccaes_ecb_encrypt_mode() + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  v1 = v0 + ((*(_QWORD *)ccaes_ecb_encrypt_mode() + 7) & 0xFFFFFFFFFFFFFFF8) + 384;
  v2 = ccaes_ecb_encrypt_mode();
  gcm_encrypt = v1;
  qword_1ECCEBE48 = 4073947;
  qword_1ECCEBE50 = 1;
  unk_1ECCEBE58 = ccmode_gcm_init;
  qword_1ECCEBE60 = (uint64_t)ccmode_gcm_set_iv;
  unk_1ECCEBE68 = ccmode_gcm_aad;
  qword_1ECCEBE70 = (uint64_t)ccaes_vng_gcm_encrypt;
  unk_1ECCEBE78 = ccmode_gcm_finalize;
  qword_1ECCEBE80 = (uint64_t)ccmode_gcm_reset;
  unk_1ECCEBE88 = v2;
  return &gcm_encrypt;
}

uint64_t *ccaes_gcm_decrypt_mode()
{
  unint64_t v0;
  unint64_t v1;
  void *v2;

  v0 = 5 * ((*((_QWORD *)ccaes_ecb_encrypt_mode() + 1) + 7) & 0xFFFFFFFFFFFFFFF8);
  v1 = v0 + ((*(_QWORD *)ccaes_ecb_encrypt_mode() + 7) & 0xFFFFFFFFFFFFFFF8) + 384;
  v2 = ccaes_ecb_encrypt_mode();
  gcm_decrypt = v1;
  qword_1ECCEBE98 = 78647;
  qword_1ECCEBEA0 = 1;
  unk_1ECCEBEA8 = ccmode_gcm_init;
  qword_1ECCEBEB0 = (uint64_t)ccmode_gcm_set_iv;
  unk_1ECCEBEB8 = ccmode_gcm_aad;
  qword_1ECCEBEC0 = (uint64_t)ccaes_vng_gcm_decrypt;
  unk_1ECCEBEC8 = ccmode_gcm_finalize;
  qword_1ECCEBED0 = (uint64_t)ccmode_gcm_reset;
  unk_1ECCEBED8 = v2;
  return &gcm_decrypt;
}

void *ccaes_ecb_encrypt_mode()
{
  return &ccaes_arm_ecb_encrypt_mode;
}

uint64_t ccrng_schedule_tree_init(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)result = ccrng_schedule_tree_info;
  *(_BYTE *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  return result;
}

uint64_t ccrng_schedule_timer_init(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = ccrng_schedule_timer_info;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  result = a2();
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

uint64_t ccrng_schedule_atomic_flag_init(uint64_t result)
{
  *(_QWORD *)result = ccrng_schedule_atomic_flag_info;
  *(_BYTE *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 1;
  return result;
}

uint64_t ccrng_crypto_init(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  if (a8 > 0x40)
    return 4294967291;
  result = 0;
  *a1 = generate_3;
  a1[1] = a2;
  a1[2] = a3;
  a1[3] = a4;
  a1[4] = a5;
  a1[5] = a6;
  a1[6] = a7;
  a1[7] = a8;
  a1[8] = a9;
  a1[9] = a10;
  a1[10] = a9;
  return result;
}

uint64_t ccentropy_rng_init(_QWORD *a1, uint64_t a2)
{
  char v2;
  char v9;

  v2 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v9 = v2;
  *a1 = &entropy_rng_info;
  a1[1] = a2;
  cc_disable_dit(&v9);
  return 0;
}

_BYTE *ccdrbg_factory_nistctr(_QWORD *a1, uint64_t a2)
{
  char v2;
  char v9;

  v2 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v9 = v2;
  *a1 = 88;
  a1[1] = init_0;
  a1[2] = reseed;
  a1[3] = generate_2;
  a1[4] = done;
  a1[5] = a2;
  a1[6] = must_reseed;
  return cc_disable_dit(&v9);
}

uint64_t cc_lock_init(_DWORD *a1)
{
  *a1 = 0;
  return 0;
}

uint64_t ccec_verify(unint64_t **a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4, unsigned __int8 *a5, BOOL *a6)
{
  char v7;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  char v17;

  v7 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v7 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v7 = 1;
    }
  }
  v17 = v7;
  *a6 = 0;
  v13 = ccec_verify_digest(a1, a2, a3, a4, a5, 0);
  if (v13 == -146)
    v14 = 0;
  else
    v14 = v13;
  if (v13)
    v15 = v14;
  else
    v15 = 0;
  *a6 = v13 == 0;
  cc_disable_dit(&v17);
  return v15;
}

void *ccsha224_di()
{
  return &ccsha224_vng_arm_di;
}

uint64_t ccaes_arm_decrypt_key_with_key_length_check(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 > 127)
  {
    if (a3 != 128 && a3 != 256 && a3 != 192)
      return 4294967289;
    return ccaes_arm_decrypt_key(a1, a2, a3, a4);
  }
  if ((unint64_t)a3 <= 0x20 && ((1 << a3) & 0x101010000) != 0)
    return ccaes_arm_decrypt_key(a1, a2, a3, a4);
  return 4294967289;
}

uint64_t ccecdh_compute_shared_secret(_QWORD **a1, _QWORD *a2, unint64_t *a3, char *a4, uint64_t (**a5)(_QWORD, uint64_t, uint64_t *))
{
  char v10;
  _QWORD *v16;
  uint64_t v17;
  _QWORD v19[4];
  void (*v20)(uint64_t);
  char v21;

  v10 = 0;
  v21 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v21 = v10;
  v16 = *a1;
  v19[0] = cc_malloc_clear(232 * **a1);
  v19[1] = 29 * *v16;
  v19[2] = 0;
  v19[3] = cc_ws_alloc;
  v20 = cc_ws_free;
  if (v19[0])
  {
    v17 = ccecdh_compute_shared_secret_ws((uint64_t)v19, a1, a2, a3, a4, a5);
    v20((uint64_t)v19);
  }
  else
  {
    v17 = 4294967283;
  }
  cc_disable_dit(&v21);
  return v17;
}

uint64_t ccecdh_compute_shared_secret_ws(uint64_t a1, _QWORD **a2, _QWORD *a3, unint64_t *a4, char *a5, uint64_t (**a6)(_QWORD, uint64_t, uint64_t *))
{
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v21;

  v11 = *a2;
  v21 = *(_QWORD *)(a1 + 16);
  v12 = 3 * **a2;
  v13 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12);
  v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12);
  v15 = *a4;
  *a4 = 0;
  v16 = ccn_write_uint_size(*v11, v11 + 3);
  if (v15 < v16
    || *a2 != (_QWORD *)*a3
    || (v17 = v16, ccec_validate_point_and_projectify_ws(a1, v11, (uint64_t)v14, a3 + 2))
    || ccec_validate_scalar(v11, (unint64_t *)&a2[3 * **a2 + 2])
    || ccec_mult_blinded_ws(a1, v11, (uint64_t)v13, (unint64_t *)&a2[3 * **a2 + 2], (uint64_t)v14, a6)|| !ccec_is_point_projective_ws(a1, v11)|| ccec_affinify_x_only_ws(a1, v11, (uint64_t)v13, (uint64_t)v13))
  {
    v18 = 0xFFFFFFFFLL;
  }
  else
  {
    ccn_write_uint_padded_ct(*v11, v13, v17, a5);
    v18 = 0;
    *a4 = v17;
  }
  cc_clear(24 * *v11, v13);
  cc_clear(24 * *v11, v14);
  *(_QWORD *)(a1 + 16) = v21;
  return v18;
}

uint64_t ccec_generate_key(uint64_t *a1, uint64_t (**a2)(_QWORD, uint64_t, uint64_t *), uint64_t **a3)
{
  char v3;
  uint64_t key_fips;
  char v11;

  v3 = 0;
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v11 = v3;
  key_fips = ccec_generate_key_fips(a1, a2, a3);
  cc_disable_dit(&v11);
  return key_fips;
}

uint64_t ccec_generate_key_fips(uint64_t *a1, uint64_t (**a2)(_QWORD, uint64_t, uint64_t *), uint64_t **a3)
{
  char v6;
  void *v12;
  uint64_t v13;
  uint64_t key_fips_ws;
  _QWORD v16[4];
  void (*v17)(uint64_t);
  char v18;

  v6 = 0;
  v18 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v18 = v6;
  v12 = cc_malloc_clear(392 * *a1);
  v13 = 49 * *a1;
  v16[0] = v12;
  v16[1] = v13;
  v16[2] = 0;
  v16[3] = cc_ws_alloc;
  v17 = cc_ws_free;
  if (v12)
  {
    key_fips_ws = ccec_generate_key_fips_ws((uint64_t)v16, a1, a2, a3);
    cc_try_abort_if ((_DWORD)key_fips_ws == -18);
    v17((uint64_t)v16);
  }
  else
  {
    key_fips_ws = 4294967283;
  }
  cc_disable_dit(&v18);
  return key_fips_ws;
}

uint64_t ccec_generate_key_fips_ws(uint64_t a1, uint64_t *a2, uint64_t (**a3)(_QWORD, uint64_t, uint64_t *), uint64_t **a4)
{
  uint64_t v7;
  uint64_t result;

  v7 = *(_QWORD *)(a1 + 16);
  result = ccec_generate_key_internal_fips_ws(a1, a2, a3, a4);
  if (!(_DWORD)result)
  {
    if (ccec_pairwise_consistency_check_ws(a1, a4, (uint64_t (**)(_QWORD, unint64_t, void *))a3))result = 4294967278;
    else
      result = 0;
  }
  *(_QWORD *)(a1 + 16) = v7;
  return result;
}

uint64_t ccec_pairwise_consistency_check_ws(uint64_t a1, uint64_t **a2, uint64_t (**a3)(_QWORD, unint64_t, void *))
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unint64_t *v10;
  uint64_t result;
  unint64_t *v12;
  char v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C874D8];
  v6 = **a2;
  v13 = 0;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  v9 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  v10 = (unint64_t *)ccsha256_di();
  result = ccec_sign_composite_msg_ws(a1, a2, v10, 0, &v13, v8, v9, a3);
  if (!(_DWORD)result)
  {
    v14[0] = 0;
    v14[1] = 0;
    v12 = (unint64_t *)ccsha256_di();
    result = ccec_verify_composite_msg_ws(a1, (uint64_t *)a2, v12, 0, &v13, (unsigned __int8 *)v8, (unsigned __int8 *)v9, v14);
    if (!(_DWORD)result)
    {
      cc_cmp_safe(16, CCEC_FAULT_CANARY, (char *)v14);
      result = 0;
    }
  }
  *(_QWORD *)(a1 + 16) = v7;
  return result;
}

uint64_t ccec_sign_composite(uint64_t **a1, unint64_t a2, unsigned __int8 *a3, char *a4, char *a5, uint64_t (**a6)(_QWORD, unint64_t, void *))
{
  char v12;
  uint64_t *v18;
  uint64_t v19;
  _QWORD v21[4];
  void (*v22)(uint64_t);
  char v23;

  v12 = 0;
  v23 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v12 = 1;
    }
  }
  v23 = v12;
  v18 = *a1;
  v21[0] = cc_malloc_clear(280 * **a1);
  v21[1] = 35 * *v18;
  v21[2] = 0;
  v21[3] = cc_ws_alloc;
  v22 = cc_ws_free;
  if (v21[0])
  {
    v19 = ccec_sign_composite_ws((uint64_t)v21, a1, a2, a3, a4, a5, a6);
    v22((uint64_t)v21);
  }
  else
  {
    v19 = 4294967283;
  }
  cc_disable_dit(&v23);
  return v19;
}

uint64_t ccec_sign_composite_ws(uint64_t a1, uint64_t **a2, unint64_t a3, unsigned __int8 *a4, char *a5, char *a6, uint64_t (**a7)(_QWORD, unint64_t, void *))
{
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v14 = **a2;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v14);
  v17 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v14);
  v18 = ccec_sign_internal_ws(a1, (unint64_t **)a2, a3, a4, v16, v17, a7);
  if (!(_DWORD)v18)
  {
    v19 = **a2;
    v20 = ccec_signature_r_s_size((uint64_t *)a2);
    ccn_write_uint_padded_ct(v19, v16, v20, a5);
    v21 = **a2;
    v22 = ccec_signature_r_s_size((uint64_t *)a2);
    ccn_write_uint_padded_ct(v21, (unint64_t *)v17, v22, a6);
  }
  *(_QWORD *)(a1 + 16) = v15;
  return v18;
}

uint64_t ccec_sign_internal_ws(uint64_t a1, unint64_t **a2, unint64_t a3, unsigned __int8 *a4, _QWORD *a5, void *a6, uint64_t (**a7)(_QWORD, unint64_t, void *))
{
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  int8x16_t *v14;
  uint64_t v15;
  uint64_t uint;
  unint64_t v17;
  uint64_t v18;
  unint64_t **v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  void *v24;
  char v25;
  uint64_t scalar_fips_retry_ws;
  int v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v31;
  uint64_t (**v32)(_QWORD, unint64_t, void *);
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t *v39;

  v11 = (uint64_t *)*a2;
  v13 = (uint64_t)(*a2 + 4);
  v12 = **a2;
  if (a3 <= 0xF)
  {
    v31 = cc_log_default();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_FAULT))
      ccec_sign_internal_ws_cold_1(a3, v31);
  }
  v35 = *(_QWORD *)(a1 + 16);
  v14 = (int8x16_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v12);
  v39 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v12);
  v15 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v12);
  v36 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 3 * v12);
  uint = ccec_projectify_ws(a1, (uint64_t)v11);
  if ((_DWORD)uint)
    goto LABEL_20;
  v32 = a7;
  v37 = (_QWORD *)v15;
  v17 = **a2;
  v18 = cczp_bitlen(v13 + 40 * *v11);
  v19 = a2;
  v20 = v18;
  v21 = (unint64_t)(v18 + 7) >> 3 >= a3 ? a3 : (unint64_t)(v18 + 7) >> 3;
  uint = ccn_read_uint(v12, v14, v21, a4);
  if ((uint & 0x80000000) != 0)
  {
LABEL_20:
    v29 = uint;
    v24 = a5;
  }
  else
  {
    v22 = (unint64_t *)&v19[3 * v17 + 2];
    if (v20 < 8 * a3)
      ccn_shift_right(v12, v14, v14, -(int)v20 & 7);
    v23 = (unint64_t *)cczp_prime(v13 + 40 * v12);
    v24 = a5;
    v25 = ccn_sub_ws(a1, v12, a5, v14->i64, v23);
    ccn_mux(v12, v25, v14->i64, v14->i64, a5);
    scalar_fips_retry_ws = ccec_validate_scalar(v11, v22);
    if (!(_DWORD)scalar_fips_retry_ws)
    {
      v27 = 10;
      while (1)
      {
        scalar_fips_retry_ws = ccec_generate_scalar_fips_retry_ws(a1, v11, v32, v39);
        if ((_DWORD)scalar_fips_retry_ws)
          break;
        scalar_fips_retry_ws = ccec_generate_scalar_fips_retry_ws(a1, v11, v32, v37);
        if ((_DWORD)scalar_fips_retry_ws)
          break;
        v28 = ccec_sign_internal_inner_ws(a1, v11, (uint64_t)v14, (uint64_t)v22, v39, v36, (uint64_t)v37, a5, (uint64_t)a6, (uint64_t (**)(_QWORD, uint64_t, uint64_t *))v32);
        v29 = v28;
        if (!(_DWORD)v28)
          goto LABEL_18;
        if ((_DWORD)v28 != -165)
          goto LABEL_17;
        if (!--v27)
          cc_try_abort();
      }
    }
    v29 = scalar_fips_retry_ws;
  }
LABEL_17:
  cc_clear(8 * v12, v24);
  cc_clear(8 * v12, a6);
LABEL_18:
  *(_QWORD *)(a1 + 16) = v35;
  return v29;
}

uint64_t ccec_generate_scalar_fips_retry_ws(uint64_t a1, _QWORD *a2, uint64_t (**a3)(_QWORD, unint64_t, void *), _QWORD *a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = a2 + 4;
  v9 = (uint64_t)&a2[5 * *a2 + 4];
  v10 = cczp_n(v9);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v10);
  v13 = (void *)cczp_prime(v9);
  ccn_set(v10, v12, v13);
  *v12 &= ~1uLL;
  v14 = 100;
  while (1)
  {
    v15 = cczp_bitlen((uint64_t)&v8[5 * *a2]);
    result = ccn_random_bits_fips(v15, a4, a3);
    if ((_DWORD)result)
      break;
    if ((ccn_cmp(v10, a4, v12) & 0x80000000) != 0)
    {
      ccn_add1_ws(a1, v10, a4, a4, 1);
      result = 0;
      break;
    }
    if (!--v14)
    {
      result = 4294967281;
      break;
    }
  }
  *(_QWORD *)(a1 + 16) = v11;
  return result;
}

uint64_t ccn_random_bits_fips(uint64_t a1, void *a2, uint64_t (**a3)(_QWORD, unint64_t, void *))
{
  char v4;
  unint64_t v5;
  uint64_t (*v6)(_QWORD, unint64_t, void *);
  uint64_t v7;
  _BYTE __src[12];
  uint64_t v10;

  v4 = a1;
  v10 = *MEMORY[0x1E0C874D8];
  v5 = (unint64_t)(a1 + 63) >> 6;
  v6 = *a3;
  if ((unint64_t)(a1 + 63) > 0x7F)
  {
    v7 = v6(a3, 8 * v5, a2);
  }
  else
  {
    v7 = v6(a3, 12uLL, __src);
    memcpy(a2, __src, 8 * v5);
    cc_clear(8 * v5, __src);
  }
  if (!(_DWORD)v7)
    *((_QWORD *)a2 + v5 - 1) &= 0xFFFFFFFFFFFFFFFFLL >> -(((((unint64_t)(v4 & 0x3F) + 0xFFFFFFFF) >> 32) - 1) & 0x40 | v4 & 0x3F);
  return v7;
}

uint64_t ccec_sign_internal_inner_ws(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t a9, uint64_t (**a10)(_QWORD, uint64_t, uint64_t *))
{
  uint64_t v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;

  v15 = *a2;
  v20 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, *a2);
  v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 3 * v15);
  result = ccec_mult_blinded_ws(a1, a2, (uint64_t)v16, a5, a6, a10);
  if (!(_DWORD)result)
  {
    result = ccec_affinify_x_only_ws(a1, a2, (uint64_t)v16, (uint64_t)v16);
    if (!(_DWORD)result)
    {
      v18 = (uint64_t)&a2[5 * v15 + 4];
      v19 = (unint64_t *)cczp_prime(v18);
      if (ccn_sub_ws(a1, v15, a8, (uint64_t *)v16, v19))
        ccn_set(v15, a8, v16);
      if (ccn_n(v15, a8))
      {
        cczp_mul_ws(a1, v18);
        cczp_mul_ws(a1, v18);
        cczp_mul_ws(a1, v18);
        cczp_mul_ws(a1, v18);
        cczp_add_ws(a1, v18);
        result = cczp_inv_ws(a1, v18);
        if (!(_DWORD)result)
        {
          cczp_mul_ws(a1, v18);
          if (ccn_n(v15, a9))
            result = 0;
          else
            result = 4294967131;
        }
      }
      else
      {
        result = 4294967131;
      }
    }
  }
  *(_QWORD *)(a1 + 16) = v20;
  return result;
}

uint64_t ccec_generate_key_internal_fips_ws(uint64_t a1, uint64_t *a2, uint64_t (**a3)(_QWORD, uint64_t, uint64_t *), uint64_t **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = *a2;
  *a4 = a2;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v8);
  v11 = cczp_bitlen((uint64_t)a2);
  result = (*a3)(a3, ((unint64_t)(v11 + 62) >> 3) & 0x1FFFFFFFFFFFFFF8, (uint64_t *)v10);
  if (!(_DWORD)result)
  {
    result = ccec_generate_scalar_fips_retry_ws(a1, a2, (uint64_t (**)(_QWORD, unint64_t, void *))a3, &a4[3 * **a4 + 2]);
    if (!(_DWORD)result)
      result = ccec_make_pub_from_priv_ws(a1, a2, a3, (unint64_t *)&a4[3 * **a4 + 2], 0, a4);
  }
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

uint64_t ccec_der_import_priv(unint64_t *a1, uint64_t a2, unsigned __int8 *a3, unint64_t **a4)
{
  char v6;
  unint64_t v12;
  unint64_t v13;
  uint64_t pub_from_priv;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;

  v6 = 0;
  v22 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v22 = v6;
  v20 = 0;
  v21 = 0;
  v18 = 0;
  v19 = 0;
  v16 = 0;
  v17 = 0;
  *a4 = a1;
  if (!ccder_decode_eckey(&v21, &v20, &v18, &v16, &v19, &v17, a3, &a3[a2]))
    goto LABEL_14;
  v12 = v20;
  if (v12 != (unint64_t)(cczp_bitlen((uint64_t)&a1[5 * *a1 + 4]) + 7) >> 3
    || ccn_read_uint(*a1, &a4[3 * **a4 + 2], v20, v18))
  {
    goto LABEL_14;
  }
  if (v17)
  {
    v13 = v19;
    if ((((unint64_t)(cczp_bitlen((uint64_t)a1) + 7) >> 2) | 1) <= v13 >> 3)
    {
      if (!ccec_import_pub(a1, v19 >> 3, v17, a4))
      {
        pub_from_priv = 0;
        goto LABEL_13;
      }
LABEL_14:
      pub_from_priv = 0xFFFFFFFFLL;
      goto LABEL_13;
    }
  }
  pub_from_priv = ccec_make_pub_from_priv((uint64_t *)a1, 0, (unint64_t *)&a4[3 * **a4 + 2], 0, (uint64_t **)a4);
LABEL_13:
  cc_disable_dit(&v22);
  return pub_from_priv;
}

uint64_t ccec_make_pub_from_priv(uint64_t *a1, uint64_t (**a2)(_QWORD, uint64_t, uint64_t *), unint64_t *a3, unint64_t *a4, uint64_t **a5)
{
  void *v10;
  uint64_t v11;
  uint64_t pub_from_priv_ws;
  _QWORD v14[4];
  void (*v15)(uint64_t);

  v10 = cc_malloc_clear(208 * *a1);
  v11 = 26 * *a1;
  v14[0] = v10;
  v14[1] = v11;
  v14[2] = 0;
  v14[3] = cc_ws_alloc;
  v15 = cc_ws_free;
  if (!v10)
    return 4294967283;
  pub_from_priv_ws = ccec_make_pub_from_priv_ws((uint64_t)v14, a1, a2, a3, a4, a5);
  v15((uint64_t)v14);
  return pub_from_priv_ws;
}

uint64_t ccec_make_pub_from_priv_ws(uint64_t a1, uint64_t *a2, uint64_t (**a3)(_QWORD, uint64_t, uint64_t *), unint64_t *a4, unint64_t *a5, uint64_t **a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  *a6 = a2;
  v12 = *a2;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 3 * *a2);
  if (ccec_validate_scalar(a2, a4))
  {
    result = 4294967274;
    goto LABEL_10;
  }
  if (a5)
  {
    result = ccec_validate_point_and_projectify_ws(a1, a2, v14, a5);
    if ((_DWORD)result)
      goto LABEL_10;
  }
  else
  {
    result = ccec_projectify_ws(a1, (uint64_t)a2);
    if ((_DWORD)result)
      goto LABEL_10;
  }
  if (ccec_mult_blinded_ws(a1, a2, (uint64_t)(a6 + 2), a4, v14, a3))
  {
    result = 4294967280;
  }
  else if (ccec_is_point_projective_ws(a1, a2))
  {
    if (ccec_affinify_ws(a1, (uint64_t)a2))
    {
      result = 4294967279;
    }
    else
    {
      ccn_seti(v12, &a6[2 * **a6 + 2], 1);
      result = 0;
    }
  }
  else
  {
    result = 4294967277;
  }
LABEL_10:
  *(_QWORD *)(a1 + 16) = v13;
  return result;
}

uint64_t ccec_mult_blinded_ws(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t (**a6)(_QWORD, uint64_t, uint64_t *))
{
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16[8];
  uint64_t v17[2];

  v17[1] = *MEMORY[0x1E0C874D8];
  v10 = *a2;
  v11 = ccn_bitlen(*a2, a4);
  if (v11 > cczp_bitlen((uint64_t)a2))
    return 4294967289;
  v17[0] = 1;
  if (a6)
  {
    result = (*a6)(a6, 8, v17);
    if ((_DWORD)result)
      return result;
    v13 = v17[0] | 0x80000000;
  }
  else
  {
    v13 = 2147483649;
  }
  v17[0] = v13;
  v14 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, unint64_t))(a1 + 24))(a1, 3 * v10);
  v15 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v10);
  ccn_mux_seed_mask(v17[0]);
  v17[0] = LODWORD(v17[0]);
  result = ccec_mult_ws(a1, (uint64_t)a2);
  if (!(_DWORD)result)
  {
    ccn_divmod_ws(a1, v10, (uint64_t)a4, v10, v15, 1, v16, (uint64_t)v17);
    cczp_bitlen((uint64_t)a2);
    result = ccec_mult_ws(a1, (uint64_t)a2);
    if (!(_DWORD)result)
    {
      result = ccec_mult_ws(a1, (uint64_t)a2);
      if (!(_DWORD)result)
      {
        ccec_full_add_ws(a1, (uint64_t)a2);
        result = 0;
      }
    }
  }
  *(_QWORD *)(a1 + 16) = v14;
  return result;
}

uint64_t ccec_mult_ws(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 16) + 96))();
}

uint64_t ccec_mult_default_ws(uint64_t a1, unint64_t *a2, uint64_t *a3, _BYTE *a4, unint64_t a5, uint64_t *a6)
{
  _QWORD *v12;
  uint64_t result;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int8x16_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  int8x16_t *v27;
  unint64_t v28;
  char v29;
  unsigned __int8 v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t *v35;
  unint64_t *v36;
  unsigned __int8 v37;
  BOOL is_point_at_infinity;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  _QWORD *__dst;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  _BYTE *__src;
  uint64_t v53;
  _QWORD *v54;
  _BOOL8 v55;
  uint64_t v56;
  unint64_t *v57;

  v12 = a2 + 4;
  if (cczp_bitlen((uint64_t)&a2[5 * *a2 + 4]) < a5)
    return 4294967289;
  v51 = a3;
  __src = a4;
  v54 = v12;
  v14 = *a2;
  v15 = (a5 + 63) >> 6;
  v53 = *(_QWORD *)(a1 + 16);
  v16 = 3 * *a2;
  v17 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v16);
  v18 = (int8x16_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v14);
  v55 = ccn_n(v14, a6) == 0;
  if (a5 + 63 >= 0x40)
    ccn_set((a5 + 63) >> 6, v18, a4);
  ccn_zero(v14 - v15, (char *)v18 + 8 * v15);
  v18->i64[v15 - 1] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)a5;
  v50 = (a5 + 63) >> 6;
  v57 = (unint64_t *)v18;
  ccn_shift_right(v50, v18, v18, v55);
  ccec_double_ws(a1, a2);
  ccn_mux(3 * v14, !v55, v17, a6, v17);
  if (!ccn_n(v14, v17))
  {
LABEL_13:
    result = 0xFFFFFFFFLL;
    goto LABEL_16;
  }
  if (cczp_bitlen((uint64_t)&v54[5 * *a2]) >= a5)
  {
    v19 = *a2;
    if (ccn_n(*a2, v17))
    {
      v47 = v16;
      v45 = *(_QWORD *)(a1 + 16);
      v20 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * v19);
      v49 = v19;
      v21 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * v19);
      v56 = 2 * v19;
      v22 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * v19);
      v23 = *a2;
      v42 = *(_QWORD *)(a1 + 16);
      __dst = (_QWORD *)v22;
      (*(void (**)(uint64_t, unint64_t))(a1 + 24))(a1, *a2);
      (*(void (**)(uint64_t, unint64_t))(a1 + 24))(a1, v23);
      (*(void (**)(uint64_t, unint64_t))(a1 + 24))(a1, v23);
      cczp_sqr_ws(a1, (uint64_t)a2);
      cczp_add_ws(a1, (uint64_t)a2);
      cczp_add_ws(a1, (uint64_t)a2);
      cczp_sqr_ws(a1, (uint64_t)a2);
      cczp_sqr_ws(a1, (uint64_t)a2);
      cczp_add_ws(a1, (uint64_t)a2);
      cczp_add_ws(a1, (uint64_t)a2);
      cczp_sub_ws(a1, (uint64_t)a2);
      cczp_sqr_ws(a1, (uint64_t)a2);
      cczp_add_ws(a1, (uint64_t)a2);
      cczp_add_ws(a1, (uint64_t)a2);
      v46 = v17;
      cczp_mul_ws(a1, (uint64_t)a2);
      cczp_sqr_ws(a1, (uint64_t)a2);
      cczp_sub_ws(a1, (uint64_t)a2);
      cczp_sub_ws(a1, (uint64_t)a2);
      v24 = a1;
      v25 = a1;
      v26 = (uint64_t *)v20;
      cczp_sub_ws(v24, (uint64_t)a2);
      cczp_mul_ws(v25, (uint64_t)a2);
      cczp_sqr_ws(v25, (uint64_t)a2);
      cczp_add_ws(v25, (uint64_t)a2);
      cczp_sub_ws(v25, (uint64_t)a2);
      v48 = v25;
      *(_QWORD *)(v25 + 16) = v42;
      v27 = v18;
      v28 = *(unint64_t *)((char *)v18->i64 + (((a5 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (a5
                                                                                                 - 1);
      v29 = v28 & 1;
      v30 = !(v28 & 1);
      v31 = a5 - 2;
      if (a5 == 2)
      {
        v43 = !(v28 & 1);
        LOBYTE(v32) = v28 & 1;
      }
      else
      {
        LOBYTE(v32) = v28 & 1;
        do
        {
          v33 = v32;
          v32 = (*(unint64_t *)((char *)v27->i64 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v31) & 1;
          cczp_cond_negate((uint64_t)a2, v30, &v21[v49], (unint64_t *)&v21[v49]);
          ccn_cond_swap(v56, v32 ^ v33 | v29 ^ 1, v26, v21);
          ccec_mult_XYCZaddC_ws(v25, a2);
          ccec_mult_XYCZadd_ws(v25, a2);
          v30 = v32 & (v29 ^ 1);
          v27 = v18;
          v29 |= v32;
          --v31;
        }
        while (v31);
        v43 = v29 ^ 1;
      }
      cczp_cond_negate((uint64_t)a2, v30, &v21[v49], (unint64_t *)&v21[v49]);
      ccn_cond_swap(v56, v27->i8[0] & 1 ^ v32, v26, v21);
      ccec_mult_XYCZaddC_ws(v25, a2);
      ccn_set(v56, __dst, v21);
      v41 = v27->i64[0] & 1;
      ccn_cond_swap(v56, v27->i8[0] & 1, v26, v21);
      v34 = v26;
      a1 = v25;
      v35 = v51;
      v40 = *(_QWORD *)(v25 + 16);
      cczp_sub_ws(v25, (uint64_t)a2);
      cczp_mul_ws(v25, (uint64_t)a2);
      cczp_mul_ws(v25, (uint64_t)a2);
      cczp_mul_ws(v25, (uint64_t)a2);
      cczp_mul_ws(v25, (uint64_t)a2);
      cczp_sqr_ws(v25, (uint64_t)a2);
      cczp_mul_ws(v25, (uint64_t)a2);
      *(_QWORD *)(v25 + 16) = v40;
      ccn_cond_swap(v56, v41, v34, v21);
      ccec_mult_XYCZadd_ws(v25, a2);
      ccn_mux(v56, v41, v34, v21, v34);
      cczp_mul_ws(v25, (uint64_t)a2);
      cczp_mul_ws(v25, (uint64_t)a2);
      v36 = (unint64_t *)cczp_prime((uint64_t)&v54[5 * *a2]);
      ccn_sub1(v49, __dst, v36, 1uLL);
      v37 = (ccn_cmpn(v50, v57, v49, __dst) & 1) == 0;
      is_point_at_infinity = ccec_is_point_at_infinity(a2, (uint64_t)v46);
      ccn_mux(3 * v49, v43 | is_point_at_infinity | v37, v35, v46, v35);
      cczp_cond_negate((uint64_t)a2, v37, &v35[*a2], (unint64_t *)&v35[*a2]);
      v39 = v43 & ~*(_DWORD *)v57 & 1;
      ccn_cond_clear(v49, v39, &v51[2 * *a2]);
      ccn_seti(v49, v34, 1);
      cczp_to_ws(v48, (uint64_t)a2);
      ccn_mux(v49, v39, v35, v34, v35);
      ccn_mux(v49, v39, &v35[*a2], v34, &v35[*a2]);
      *(_QWORD *)(v48 + 16) = v45;
      ccec_full_add_ws(v48, (uint64_t)a2);
      ccn_mux(v47, *__src & v55, v35, v46, v35);
      result = 0;
      goto LABEL_16;
    }
    goto LABEL_13;
  }
  result = 4294967289;
LABEL_16:
  *(_QWORD *)(a1 + 16) = v53;
  return result;
}

uint64_t ccn_cond_swap(uint64_t a1, char a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = ccn_mux_next_mask();
  for (i = __ROR8__(0x5555555555555555, a2 | (2 * result)); a1; --a1)
  {
    v10 = *a4 ^ *a3;
    *a3 ^= result;
    v11 = *a4 ^ result;
    *a4 = v11;
    v12 = *a3 ^ v10 & 0x5555555555555555;
    v13 = v11 ^ v10 & 0x5555555555555555;
    v14 = v10 & i;
    *a3++ = v12 ^ v14 ^ result;
    *a4++ = v13 ^ v14 ^ result;
  }
  return result;
}

uint64_t ccec_mult_XYCZadd_ws(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, _QWORD))(a1 + 24))(a1, *a2);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_sqr_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_sqr_ws(a1, (uint64_t)a2);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  result = cczp_sub_ws(a1, (uint64_t)a2);
  *(_QWORD *)(a1 + 16) = v5;
  return result;
}

uint64_t ccn_cond_clear(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;

  result = ccn_mux_next_mask();
  for (i = __ROR8__(0x5555555555555555, a2 | (2 * result)); a1; --a1)
  {
    v8 = *a3;
    v9 = *a3 ^ result;
    *a3 = v9;
    *a3++ = v9 ^ v8 & 0x5555555555555555 ^ v8 & i ^ result;
  }
  return result;
}

uint64_t ccn_mux_seed_mask(uint64_t result)
{
  state ^= result;
  return result;
}

uint64_t ccec_affinify_ws(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 16) + 80))();
}

uint64_t ccec_affinify_jacobian_ws(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v6 = *a2;
  if (ccec_is_point_at_infinity(a2, a4))
    return 4294967289;
  v8 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  v9 = cczp_inv_ws(a1, (uint64_t)a2);
  cczp_sqr_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_from_ws(a1, (uint64_t)a2);
  cczp_from_ws(a1, (uint64_t)a2);
  *(_QWORD *)(a1 + 16) = v8;
  return v9;
}

unsigned __int8 *ccder_decode_eckey(unint64_t *a1, _QWORD *a2, _QWORD *a3, unsigned __int8 **a4, unint64_t *a5, _QWORD *a6, unsigned __int8 *a7, unsigned __int8 *a8)
{
  char v8;
  unsigned __int8 *v14;
  uint64_t v16;
  unsigned __int8 *v17[2];
  char v18;

  v8 = 0;
  v18 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v18 = v8;
  v17[0] = a7;
  v17[1] = a8;
  v16 = 0;
  if (ccder_blob_decode_eckey(v17, a1, a2, a3, a4, &v16, a6, a5))
    v14 = v17[0];
  else
    v14 = 0;
  cc_disable_dit(&v18);
  return v14;
}

uint64_t ccder_blob_decode_eckey(unsigned __int8 **a1, unint64_t *a2, _QWORD *a3, _QWORD *a4, unsigned __int8 **a5, _QWORD *a6, _QWORD *a7, unint64_t *a8)
{
  char v15;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unsigned __int8 *v30;
  uint64_t v31;
  char v32;

  v15 = 0;
  v32 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v15 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v15 = 1;
    }
  }
  v32 = v15;
  v30 = 0;
  v31 = 0;
  v29 = 0uLL;
  if (!ccder_blob_decode_sequence_tl(a1, (unsigned __int8 **)&v29)
    || !ccder_blob_decode_uint64((unsigned __int8 **)&v29, a2)
    || *a2 != 1
    || !ccder_blob_decode_range((unsigned __int8 **)&v29, 4, &v30))
  {
    goto LABEL_16;
  }
  v21 = v30;
  v22 = v31;
  *a4 = v30;
  *a3 = v22 - (_QWORD)v21;
  v28 = v29;
  if ((ccder_blob_decode_range((unsigned __int8 **)&v28, 0xA000000000000000, &v30) & 1) != 0)
  {
    if (ccder_blob_decode_oid(&v30, a5))
    {
      v29 = v28;
      goto LABEL_13;
    }
LABEL_16:
    v25 = 0;
    goto LABEL_17;
  }
  *a5 = 0;
LABEL_13:
  v27 = v29;
  if ((ccder_blob_decode_range((unsigned __int8 **)&v27, 0xA000000000000001, &v30) & 1) == 0)
  {
    *a7 = 0;
    *a6 = 0;
    v25 = 1;
    *a8 = 0;
    goto LABEL_17;
  }
  if (!ccder_blob_decode_bitstring(&v30, (uint64_t)&v30, a8))
    goto LABEL_16;
  v23 = v30;
  v24 = v31;
  *a7 = v30;
  *a6 = v24 - (_QWORD)v23;
  v25 = 1;
LABEL_17:
  cc_disable_dit(&v32);
  return v25;
}

uint64_t ccder_blob_decode_uint64(unsigned __int8 **a1, unint64_t *a2)
{
  uint64_t result;
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned int v6;
  char *v7;
  unsigned __int8 *v8;

  if (a2)
    *a2 = 0;
  v7 = 0;
  v8 = 0;
  result = ccder_blob_decode_range(a1, 2, (unsigned __int8 **)&v7);
  if ((_DWORD)result)
  {
    v4 = (unsigned __int8 *)v7;
    if (v7 == (char *)v8 || *v7 < 0)
      return 0;
    if (*v7)
      goto LABEL_7;
    v4 = (unsigned __int8 *)(v7 + 1);
    if (v7 + 1 == (char *)v8)
    {
      v4 = v8;
    }
    else if (((char)*v4 & 0x80000000) == 0)
    {
      return 0;
    }
LABEL_7:
    v7 = (char *)v4;
    if ((unint64_t)(v8 - v4) <= 8)
    {
      if (v4 == v8)
      {
        v5 = 0;
        if (!a2)
          return 1;
      }
      else
      {
        v5 = 0;
        do
        {
          v6 = *v4++;
          v5 = v6 | (v5 << 8);
        }
        while (v4 != v8);
        if (!a2)
          return 1;
      }
      *a2 = v5;
      return 1;
    }
    return 0;
  }
  return result;
}

void *ccaes_cbc_decrypt_mode()
{
  return &ccaes_arm_cbc_decrypt_mode;
}

void *ccsha3_512_di()
{
  if ((MEMORY[0xFFFFFC010] & 0x100000000) != 0)
    return &ccsha3_512_vng_hwassist_di;
  else
    return &ccsha3_512_vng_di;
}

void *ccsha3_384_di()
{
  if ((MEMORY[0xFFFFFC010] & 0x100000000) != 0)
    return &ccsha3_384_vng_hwassist_di;
  else
    return &ccsha3_384_vng_di;
}

void *ccsha3_256_di()
{
  if ((MEMORY[0xFFFFFC010] & 0x100000000) != 0)
    return &ccsha3_256_vng_hwassist_di;
  else
    return &ccsha3_256_vng_di;
}

void *ccsha3_224_di()
{
  if ((MEMORY[0xFFFFFC010] & 0x100000000) != 0)
    return &ccsha3_224_vng_hwassist_di;
  else
    return &ccsha3_224_vng_di;
}

uint64_t ccz_read_radix(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  unsigned __int8 *v5;
  uint64_t v6;
  char v8;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 v25;
  int v26;
  unsigned __int8 v27;
  char v29;
  char v31;

  v5 = a3;
  v6 = a2;
  v8 = 0;
  v31 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v31 = v8;
  if (a4 != 16 && a4 != 10)
  {
    v15 = 4294967251;
    goto LABEL_42;
  }
  if (!a2)
  {
LABEL_14:
    v15 = 4294967289;
    goto LABEL_42;
  }
  v13 = *a3;
  if (v13 == 45)
  {
    v14 = -1;
LABEL_13:
    v6 = a2 - 1;
    if (a2 != 1)
      goto LABEL_16;
    goto LABEL_14;
  }
  v14 = 1;
  if (v13 == 43)
    goto LABEL_13;
  while (v13 == 48)
  {
    --v6;
LABEL_16:
    v16 = *++v5;
    v13 = v16;
  }
  v17 = (unint64_t)(4 * v6 + 63) >> 6;
  ccz_set_capacity(a1, v17);
  ccz_set_n((_QWORD *)a1, v17);
  cc_clear(8 * v17, *(void **)(a1 + 24));
  ccz_set_sign(a1, v14);
  if (a4 == 10)
  {
    if (v6)
    {
      v18 = 67;
      while (1)
      {
        v19 = *v5;
        if ((v19 - 48) > 9)
          break;
        ++v5;
        ccn_mul1((v18 - 4) >> 6, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 24), 10);
        ccn_add1(v18 >> 6, *(_QWORD **)(a1 + 24), *(uint64_t **)(a1 + 24), (v19 - 48));
        v18 += 4;
        if (!--v6)
          goto LABEL_23;
      }
LABEL_41:
      v15 = 4294967252;
      goto LABEL_42;
    }
LABEL_23:
    v20 = ccz_n(a1);
    v21 = ccn_n(v20, *(_QWORD *)(a1 + 24));
    ccz_set_n((_QWORD *)a1, v21);
  }
  else if (v6 >= 1)
  {
    v22 = 0;
    v23 = 0;
    v24 = &v5[v6];
    do
    {
      v26 = *--v24;
      v25 = v26;
      v27 = v26 & 0xDF;
      if ((v26 - 97) < 6)
        v25 = v27;
      if (v25 < 0x30u)
        goto LABEL_41;
      if (v25 > 0x46u || (v25 - 58) < 7u)
        goto LABEL_41;
      if (v25 >= 0x3Au)
        v29 = -55;
      else
        v29 = -48;
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + ((v23++ >> 1) & 0x7FFFFFFFFFFFFFF8)) |= (unint64_t)(v29 + v25) << (v22 & 0x3C);
      v22 += 4;
    }
    while (v24 > v5);
  }
  if (ccz_is_zero(a1))
    ccz_set_sign(a1, 1);
  v15 = 0;
LABEL_42:
  cc_disable_dit(&v31);
  return v15;
}

BOOL ccn_add1(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  _BOOL8 v4;
  char v5;
  _OWORD v12[2];
  uint64_t (*v13)(_QWORD);
  char v14;

  v4 = a4;
  v5 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v14 = v5;
  v12[0] = xmmword_1EA9555B8;
  v12[1] = *(_OWORD *)algn_1EA9555C8;
  v13 = cc_ws_free_null;
  if (a1)
    v4 = ccn_add1_asm(a1, a2, a3, a4);
  cc_ws_free_null(v12);
  cc_disable_dit(&v14);
  return v4;
}

uint64_t ccec_export_pub(uint64_t a1, char *a2)
{
  char v4;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v13;
  char v14;

  v4 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v14 = v4;
  v10 = *(uint64_t **)a1;
  v13 = ((unint64_t)(cczp_bitlen(*(_QWORD *)a1) + 7) >> 2) | 1;
  v11 = ccec_export_affine_point(v10, 1, (unint64_t *)(a1 + 16), &v13, a2);
  cc_disable_dit(&v14);
  return v11;
}

uint64_t ccec_export_affine_point(uint64_t *a1, int a2, unint64_t *a3, unint64_t *a4, char *a5)
{
  char v10;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char v26;

  v10 = 0;
  v26 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v26 = v10;
  v16 = ccec_export_affine_point_size((uint64_t)a1, a2);
  if (v16)
  {
    if (*a4 < v16)
    {
      v24 = 4294967133;
    }
    else
    {
      *a4 = v16;
      v17 = a2 - 1;
      if ((a2 - 1) <= 2)
        *a5 = 0x20604u >> (8 * v17);
      v18 = *a1;
      if (a2 == 4)
        v19 = a5;
      else
        v19 = a5 + 1;
      v20 = cczp_bitlen((uint64_t)a1);
      if ((ccn_write_uint_padded_ct(v18, a3, (unint64_t)(v20 + 7) >> 3, v19) & 0x80000000) != 0
        || v17 <= 1
        && (v21 = &v19[(unint64_t)(cczp_bitlen((uint64_t)a1) + 7) >> 3],
            v22 = &a3[*a1],
            v23 = cczp_bitlen((uint64_t)a1),
            (ccn_write_uint_padded_ct(v18, v22, (unint64_t)(v23 + 7) >> 3, v21) & 0x80000000) != 0))
      {
        v24 = 0xFFFFFFFFLL;
      }
      else if ((a2 & 0xFFFFFFFE) == 2)
      {
        v24 = 0;
        *a5 |= a3[*a1] & 1;
      }
      else
      {
        v24 = 0;
      }
    }
  }
  else
  {
    v24 = 4294967289;
  }
  cc_disable_dit(&v26);
  return v24;
}

unint64_t ccec_export_affine_point_size(uint64_t a1, int a2)
{
  char v2;
  unint64_t v8;
  char v10;

  v2 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v10 = v2;
  switch(a2)
  {
    case 1:
    case 2:
      v8 = ((unint64_t)(cczp_bitlen(a1) + 7) >> 2) | 1;
      break;
    case 3:
      v8 = ccec_compressed_x962_export_pub_size(a1);
      break;
    case 4:
      v8 = (unint64_t)(cczp_bitlen(a1) + 7) >> 3;
      break;
    default:
      v8 = 0;
      break;
  }
  cc_disable_dit(&v10);
  return v8;
}

_BYTE *ccz_read_uint(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  char v6;
  uint64_t v12;
  char v14;

  v6 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v14 = v6;
  ccz_set_sign(a1, 1);
  ccz_set_capacity(a1, (a2 + 7) >> 3);
  ccn_read_uint((a2 + 7) >> 3, *(_QWORD **)(a1 + 24), a2, a3);
  v12 = ccn_n((a2 + 7) >> 3, *(_QWORD *)(a1 + 24));
  ccz_set_n((_QWORD *)a1, v12);
  return cc_disable_dit(&v14);
}

uint64_t ccaes_arm_decrypt_key_with_length_check(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 > 127)
  {
    if (a3 != 128 && a3 != 256 && a3 != 192)
      return 4294967289;
    return ccaes_arm_decrypt_key(a1, a2, a3, a4);
  }
  if ((unint64_t)a3 <= 0x20 && ((1 << a3) & 0x101010000) != 0)
    return ccaes_arm_decrypt_key(a1, a2, a3, a4);
  return 4294967289;
}

uint64_t ccpad_pkcs7_ecb_encrypt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v10;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;

  v10 = 0;
  v20 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v20 = v10;
  v16 = *(_QWORD *)(a1 + 8);
  v17 = (v16 - 1) & a3;
  v18 = a3 - v17;
  (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a1 + 24))(a2, (a3 - v17) / v16, a4, a5);
  memcpy((void *)(a5 + v18), (const void *)(a4 + v18), (v16 - 1) & a3);
  memset((void *)(a5 + a3), v16 - v17, v16 - v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 24))(a2, 1, a5 + v18, a5 + v18);
  cc_disable_dit(&v20);
  return v18 + v16;
}

void *ccec_cp_521()
{
  return &ccec_cp521;
}

uint64_t ccchacha20poly1305_init(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  char v4;
  uint64_t v10;
  char v12;

  v4 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v12 = v4;
  v10 = ccchacha20_init(a2, a3);
  ccchacha20poly1305_reset(v10, a2);
  cc_disable_dit(&v12);
  return 0;
}

uint64_t ccchacha20poly1305_reset(uint64_t a1, uint64_t a2)
{
  char v2;
  char v9;

  v2 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v9 = v2;
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  *(_BYTE *)(a2 + 248) = 1;
  ccchacha20_reset(a2);
  cc_disable_dit(&v9);
  return 0;
}

uint64_t ccchacha20_init(uint64_t a1, _DWORD *a2)
{
  char v2;
  char v9;

  v2 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v9 = v2;
  *(_OWORD *)a1 = xmmword_1DEE27B20;
  *(_DWORD *)(a1 + 16) = *a2;
  *(_DWORD *)(a1 + 20) = a2[1];
  *(_DWORD *)(a1 + 24) = a2[2];
  *(_DWORD *)(a1 + 28) = a2[3];
  *(_DWORD *)(a1 + 32) = a2[4];
  *(_DWORD *)(a1 + 36) = a2[5];
  *(_DWORD *)(a1 + 40) = a2[6];
  *(_DWORD *)(a1 + 44) = a2[7];
  ccchacha20_reset(a1);
  cc_disable_dit(&v9);
  return 0;
}

uint64_t ccchacha20_reset(uint64_t a1)
{
  char v1;
  char v8;

  v1 = 0;
  v8 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v8 = v1;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  cc_disable_dit(&v8);
  return 0;
}

void *ccec_cp_384_asm()
{
  return &ccec_cp384_asm;
}

void *ccchacha20poly1305_info()
{
  return &ccchacha20poly1305_info_default;
}

uint64_t ccec_raw_import_priv_only(unint64_t *a1, unint64_t a2, unsigned __int8 *a3, unint64_t **a4)
{
  char v8;
  unint64_t v14;
  uint64_t uint;
  char v17;

  v8 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v17 = v8;
  if (a2 == (unint64_t)(cczp_bitlen((uint64_t)&a1[5 * *a1 + 4]) + 7) >> 3)
  {
    v14 = *a1;
    *a4 = a1;
    memset(a4 + 2, 255, 8 * v14);
    memset(&a4[*a1 + 2], 255, 8 * v14);
    uint = ccn_read_uint(v14, &a4[3 * **a4 + 2], a2, a3);
  }
  else
  {
    uint = 0xFFFFFFFFLL;
  }
  cc_disable_dit(&v17);
  return uint;
}

uint64_t ccchacha20poly1305_setnonce(uint64_t a1, int32x4_t *a2, _DWORD *a3)
{
  char v4;
  uint64_t v10;
  char v12;
  int8x16_t v13[4];
  uint64_t v14;

  v4 = 0;
  v14 = *MEMORY[0x1E0C874D8];
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v12 = v4;
  if (a2[15].i8[8] == 1)
  {
    ccchacha20_setnonce(a2, a3);
    _ccchacha20_xor(a2, 0x40uLL, v13, kZero64);
    ccpoly1305_init((uint64_t)&a2[8].i64[1], (uint64_t)v13);
    v10 = 0;
    a2[15].i8[8] = 2;
  }
  else
  {
    v10 = 1;
  }
  cc_disable_dit(&v12);
  return v10;
}

uint64_t ccpoly1305_init(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  unint64_t v14;
  int v15;
  char v17;

  v2 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v8 = 0;
  v17 = v2;
  v9 = *(_DWORD *)(a2 + 4);
  v10 = *(_DWORD *)(a2 + 8);
  v11 = *(_DWORD *)(a2 + 12);
  v12 = (*(_QWORD *)a2 >> 26) & 0x3FFFF03;
  *(_DWORD *)a1 = *(_DWORD *)a2 & 0x3FFFFFF;
  *(_DWORD *)(a1 + 4) = v12;
  v13 = (__PAIR64__(v10, v9) >> 20) & 0x3FFC0FF;
  v14 = (__PAIR64__(v11, v10) >> 14) & 0x3F03FFF;
  *(_DWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 12) = v14;
  v15 = (v11 >> 8) & 0xFFFFF;
  *(_DWORD *)(a1 + 16) = v15;
  *(_DWORD *)(a1 + 20) = 5 * v12;
  *(_DWORD *)(a1 + 24) = 5 * v13;
  *(_DWORD *)(a1 + 28) = 5 * v14;
  *(_DWORD *)(a1 + 32) = 5 * v15;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  do
  {
    *(_BYTE *)(a1 + 80 + v8) = *(_BYTE *)(a2 + 16 + v8);
    ++v8;
  }
  while (v8 != 16);
  cc_disable_dit(&v17);
  return 0;
}

uint64_t ccchacha20_setnonce(_DWORD *a1, _DWORD *a2)
{
  char v2;
  char v9;

  v2 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v9 = v2;
  a1[13] = *a2;
  a1[14] = a2[1];
  a1[15] = a2[2];
  cc_disable_dit(&v9);
  return 0;
}

uint64_t ccchacha20_update(uint64_t a1, unint64_t a2, int8x16_t *a3, int8x16_t *a4)
{
  int8x16_t *v4;
  int8x16_t *v5;
  unint64_t v6;
  char v8;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v20;

  v4 = a4;
  v5 = a3;
  v6 = a2;
  v8 = 0;
  v20 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v20 = v8;
  v14 = *(_QWORD *)(a1 + 128);
  if (v14)
  {
    v15 = 64 - v14;
    if (64 - v14 >= a2)
      v15 = a2;
    if (v15)
    {
      v16 = v14 + a1 + 63;
      v17 = v15;
      do
      {
        a4[-1].i8[v17 + 15] = *(_BYTE *)(v16 + v17) ^ a3[-1].i8[v17 + 15];
        --v17;
      }
      while (v17);
      v14 = *(_QWORD *)(a1 + 128);
    }
    v5 = (int8x16_t *)((char *)a3 + v15);
    v6 = a2 - v15;
    v4 = (int8x16_t *)((char *)a4 + v15);
    *(_QWORD *)(a1 + 128) = ((_WORD)v14 + (_WORD)v15) & 0x1FF;
  }
  if (v6 >= 0x40)
  {
    _ccchacha20_xor((int32x4_t *)a1, v6 & 0xFFFFFFFFFFFFFFC0, v4, v5);
    v5 = (int8x16_t *)((char *)v5 + (v6 & 0xFFFFFFFFFFFFFFC0));
    v4 = (int8x16_t *)((char *)v4 + (v6 & 0xFFFFFFFFFFFFFFC0));
    v6 &= 0x3Fu;
  }
  if (v6)
  {
    _ccchacha20_xor((int32x4_t *)a1, 0x40uLL, (int8x16_t *)(a1 + 64), kZero64);
    v18 = v6;
    do
    {
      v4[-1].i8[v18 + 15] = *(_BYTE *)(a1 + 63 + v18) ^ v5[-1].i8[v18 + 15];
      --v18;
    }
    while (v18);
    *(_QWORD *)(a1 + 128) = v6;
  }
  cc_disable_dit(&v20);
  return 0;
}

int32x4_t *_ccchacha20_xor(int32x4_t *result, unint64_t a2, int8x16_t *a3, int8x16_t *a4)
{
  int32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  uint64_t v7;
  unint64_t v8;
  int32x4_t v9;
  __int32 v10;
  __int32 v11;
  __int32 v12;
  __int32 v13;
  __int32 v14;
  __int32 v15;
  __int32 v16;
  __int32 v17;
  int v18;
  __int32 v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  __int32 v34;
  __int32 v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int8x16_t v55;
  int32x4_t v56;
  int8x16_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  __int32 v61;
  int v62;
  unint64_t v63;
  int v64;
  int v65;
  int32x4_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  __int32 v72;
  int v73;
  int32x4_t v74;
  int v75;
  int v76;
  int32x4_t v77;
  int v78;
  int v79;
  int32x4_t v80;
  int v81;
  int v82;
  int v83;
  __int32 v84;
  int v85;
  int v86;
  int v87;
  int32x4_t v88;
  int v89;
  int v90;
  int8x16_t v91;
  int v92;
  int v93;
  int v94;
  int32x4_t v95;
  __int32 v96;
  int v97;
  int8x16_t v98;
  int v99;
  int v100;
  int32x4_t v101;
  int v102;
  int v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int v108;
  int v109;
  int32x4_t v110;
  int v111;
  int32x4_t v112;
  int v113;
  int v114;
  int32x4_t v115;
  int8x16_t v116;
  int32x4_t v117;
  int8x16_t v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  BOOL v132;
  int32x4_t *v133;
  unint64_t v134;
  uint64_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int8x16_t v148;
  int32x4_t v149;
  int8x16_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int8x16_t v159;
  int32x4_t v160;
  int8x16_t v161;
  unint64_t v162;
  int32x4_t v163;
  uint64_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int8x16_t v176;
  int32x4_t v177;
  int8x16_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int8x16_t v187;
  int32x4_t v188;
  int8x16_t v189;
  unint64_t v190;
  unint64_t v191;
  __int8 *v192;
  char *v193;
  __int8 *v194;
  char v195;
  char v196;
  char v197;
  _OWORD v199[4];
  uint64_t v200;

  v200 = *MEMORY[0x1E0C874D8];
  v5 = result[1];
  v4 = result[2];
  v6 = result[3];
  if (a2 >= 0xC0)
  {
    v7 = 0;
    v8 = a2 / 0xC0;
    do
    {
      v9 = vaddq_s32(v6, (int32x4_t)xmmword_1DEE27B30);
      v11 = result[1].i32[0];
      v10 = result[1].i32[1];
      v12 = result[1].i32[2];
      v13 = result[1].i32[3];
      v14 = result[2].i32[0];
      v15 = result[2].i32[1];
      v16 = result[2].i32[2];
      v17 = result[2].i32[3];
      v18 = 3 * v7 + 2;
      v19 = result[3].i32[1];
      v20 = result[3].i32[0] + v18;
      v21 = -10;
      v22 = 1634760805;
      v23 = 857760878;
      v24 = 2036477234;
      v25 = 1797285236;
      v26 = (int32x4_t)xmmword_1DEE27B20;
      v27 = v5;
      v28 = v4;
      v29 = v6;
      v30 = (int32x4_t)xmmword_1DEE27B20;
      v31 = v5;
      v32 = v4;
      v33 = v9;
      v35 = result[3].i32[2];
      v34 = result[3].i32[3];
      do
      {
        v36 = vaddq_s32(v26, v27);
        v37 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8((int8x16_t)v36, (int8x16_t)v29));
        v38 = vaddq_s32(v28, v37);
        v39 = (int32x4_t)veorq_s8((int8x16_t)v38, (int8x16_t)v27);
        v40 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v39, 0xCuLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v39, 0x14uLL));
        v41 = vaddq_s32(v40, v36);
        v42 = (int32x4_t)veorq_s8((int8x16_t)v41, (int8x16_t)v37);
        v43 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v42, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v42, 0x18uLL));
        v44 = (int8x16_t)vaddq_s32(v43, v38);
        v45 = (int32x4_t)veorq_s8(v44, (int8x16_t)v40);
        v46 = vorrq_s8((int8x16_t)vshlq_n_s32(v45, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v45, 0x19uLL));
        v47 = (int32x4_t)vextq_s8(v46, v46, 4uLL);
        v48 = vaddq_s32(v47, v41);
        v49 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8((int8x16_t)v48, vextq_s8((int8x16_t)v43, (int8x16_t)v43, 0xCuLL)));
        v50 = vaddq_s32((int32x4_t)vextq_s8(v44, v44, 8uLL), v49);
        v51 = (int32x4_t)veorq_s8((int8x16_t)v50, (int8x16_t)v47);
        v52 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v51, 0xCuLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v51, 0x14uLL));
        v26 = vaddq_s32(v52, v48);
        v53 = (int32x4_t)veorq_s8((int8x16_t)v26, (int8x16_t)v49);
        v54 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v53, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v53, 0x18uLL));
        v55 = (int8x16_t)vaddq_s32(v54, v50);
        v56 = (int32x4_t)veorq_s8(v55, (int8x16_t)v52);
        v57 = vorrq_s8((int8x16_t)vshlq_n_s32(v56, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v56, 0x19uLL));
        v27 = (int32x4_t)vextq_s8(v57, v57, 0xCuLL);
        v28 = (int32x4_t)vextq_s8(v55, v55, 8uLL);
        v29 = (int32x4_t)vextq_s8((int8x16_t)v54, (int8x16_t)v54, 4uLL);
        v58 = vaddq_s32(v30, v31);
        v59 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8((int8x16_t)v58, (int8x16_t)v33));
        v60 = vaddq_s32(v32, v59);
        v61 = v22 + v11;
        v62 = (v22 + v11) ^ v20;
        HIDWORD(v63) = v62;
        LODWORD(v63) = v62;
        v64 = (v63 >> 16) + v14;
        v65 = v64 ^ v11;
        HIDWORD(v63) = v65;
        LODWORD(v63) = v65;
        v66 = (int32x4_t)veorq_s8((int8x16_t)v60, (int8x16_t)v31);
        v67 = (v63 >> 20) + v61;
        LODWORD(v63) = v67 ^ __ROR4__(v62, 16);
        v68 = v63;
        HIDWORD(v63) = v63;
        v69 = (v63 >> 24) + v64;
        LODWORD(v63) = v69 ^ __ROR4__(v65, 20);
        v70 = v63;
        HIDWORD(v63) = v63;
        v71 = v63 >> 25;
        v72 = v23 + v10;
        v73 = (v23 + v10) ^ v19;
        HIDWORD(v63) = v73;
        LODWORD(v63) = v73;
        v74 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v66, 0xCuLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v66, 0x14uLL));
        v75 = (v63 >> 16) + v15;
        v76 = v75 ^ v10;
        HIDWORD(v63) = v76;
        LODWORD(v63) = v76;
        v77 = vaddq_s32(v74, v58);
        v78 = (v63 >> 20) + v72;
        LODWORD(v63) = v78 ^ __ROR4__(v73, 16);
        v79 = v63;
        HIDWORD(v63) = v63;
        v80 = (int32x4_t)veorq_s8((int8x16_t)v77, (int8x16_t)v59);
        v81 = (v63 >> 24) + v75;
        LODWORD(v63) = v81 ^ __ROR4__(v76, 20);
        v82 = v63;
        HIDWORD(v63) = v63;
        v83 = v63 >> 25;
        v84 = v24 + v12;
        v85 = (v24 + v12) ^ v35;
        HIDWORD(v63) = v85;
        LODWORD(v63) = v85;
        v86 = (v63 >> 16) + v16;
        v87 = v86 ^ v12;
        HIDWORD(v63) = v87;
        LODWORD(v63) = v87;
        v88 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v80, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v80, 0x18uLL));
        v89 = (v63 >> 20) + v84;
        LODWORD(v63) = v89 ^ __ROR4__(v85, 16);
        v90 = v63;
        HIDWORD(v63) = v63;
        v91 = (int8x16_t)vaddq_s32(v88, v60);
        v92 = (v63 >> 24) + v86;
        LODWORD(v63) = v92 ^ __ROR4__(v87, 20);
        v93 = v63;
        HIDWORD(v63) = v63;
        v94 = v63 >> 25;
        v95 = (int32x4_t)veorq_s8(v91, (int8x16_t)v74);
        v96 = v25 + v13;
        v97 = v96 ^ v34;
        HIDWORD(v63) = v97;
        LODWORD(v63) = v97;
        v98 = vorrq_s8((int8x16_t)vshlq_n_s32(v95, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v95, 0x19uLL));
        v99 = (v63 >> 16) + v17;
        v100 = v99 ^ v13;
        HIDWORD(v63) = v99 ^ v13;
        LODWORD(v63) = v99 ^ v13;
        v101 = (int32x4_t)vextq_s8(v98, v98, 4uLL);
        v102 = (v63 >> 20) + v96;
        v104 = vaddq_s32(v101, v77);
        v105 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8((int8x16_t)v104, vextq_s8((int8x16_t)v88, (int8x16_t)v88, 0xCuLL)));
        LODWORD(v63) = v102 ^ __ROR4__(v97, 16);
        v103 = v63;
        HIDWORD(v63) = v63;
        v106 = vaddq_s32((int32x4_t)vextq_s8(v91, v91, 8uLL), v105);
        v107 = (int32x4_t)veorq_s8((int8x16_t)v106, (int8x16_t)v101);
        v108 = (v63 >> 24) + v99;
        v110 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v107, 0xCuLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v107, 0x14uLL));
        LODWORD(v63) = v108 ^ __ROR4__(v100, 20);
        v109 = v63;
        HIDWORD(v63) = v63;
        v111 = v63 >> 25;
        v30 = vaddq_s32(v110, v104);
        v112 = (int32x4_t)veorq_s8((int8x16_t)v30, (int8x16_t)v105);
        v113 = v83 + v67;
        v115 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v112, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v112, 0x18uLL));
        v116 = (int8x16_t)vaddq_s32(v115, v106);
        v117 = (int32x4_t)veorq_s8(v116, (int8x16_t)v110);
        LODWORD(v63) = v113 ^ __ROR4__(v103, 24);
        v114 = v63;
        HIDWORD(v63) = v63;
        v118 = vorrq_s8((int8x16_t)vshlq_n_s32(v117, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v117, 0x19uLL));
        v119 = (v63 >> 16) + v92;
        v31 = (int32x4_t)vextq_s8(v118, v118, 0xCuLL);
        v32 = (int32x4_t)vextq_s8(v116, v116, 8uLL);
        LODWORD(v63) = v119 ^ __ROR4__(v82, 25);
        v120 = v63;
        HIDWORD(v63) = v63;
        v22 = (v63 >> 20) + v113;
        LODWORD(v63) = v22 ^ __ROR4__(v114, 16);
        HIDWORD(v63) = v63;
        v34 = v63 >> 24;
        v16 = v34 + v119;
        LODWORD(v63) = v16 ^ __ROR4__(v120, 20);
        HIDWORD(v63) = v63;
        v10 = v63 >> 25;
        LODWORD(v63) = (v94 + v78) ^ __ROR4__(v68, 24);
        v121 = v63;
        HIDWORD(v63) = v63;
        v122 = (v63 >> 16) + v108;
        LODWORD(v63) = v122 ^ __ROR4__(v93, 25);
        v123 = v63;
        HIDWORD(v63) = v63;
        v23 = (v63 >> 20) + v94 + v78;
        LODWORD(v63) = v23 ^ __ROR4__(v121, 16);
        HIDWORD(v63) = v63;
        v20 = v63 >> 24;
        v17 = v20 + v122;
        LODWORD(v63) = (v20 + v122) ^ __ROR4__(v123, 20);
        HIDWORD(v63) = v63;
        v12 = v63 >> 25;
        v124 = v111 + v89;
        LODWORD(v63) = (v111 + v89) ^ __ROR4__(v79, 24);
        v125 = v63;
        HIDWORD(v63) = v63;
        v126 = (v63 >> 16) + v69;
        LODWORD(v63) = v126 ^ __ROR4__(v109, 25);
        v127 = v63;
        HIDWORD(v63) = v63;
        v24 = (v63 >> 20) + v124;
        LODWORD(v63) = v24 ^ __ROR4__(v125, 16);
        HIDWORD(v63) = v63;
        v19 = v63 >> 24;
        v14 = v19 + v126;
        LODWORD(v63) = (v19 + v126) ^ __ROR4__(v127, 20);
        HIDWORD(v63) = v63;
        v13 = v63 >> 25;
        v128 = v71 + v102;
        LODWORD(v63) = v128 ^ __ROR4__(v90, 24);
        v129 = v63;
        HIDWORD(v63) = v63;
        v130 = (v63 >> 16) + v81;
        LODWORD(v63) = v130 ^ __ROR4__(v70, 25);
        v131 = v63;
        HIDWORD(v63) = v63;
        v25 = (v63 >> 20) + v128;
        LODWORD(v63) = v25 ^ __ROR4__(v129, 16);
        HIDWORD(v63) = v63;
        v35 = v63 >> 24;
        v33 = (int32x4_t)vextq_s8((int8x16_t)v115, (int8x16_t)v115, 4uLL);
        v15 = v35 + v130;
        LODWORD(v63) = (v35 + v130) ^ __ROR4__(v131, 20);
        HIDWORD(v63) = v63;
        v11 = v63 >> 25;
        v132 = __CFADD__(v21++, 1);
      }
      while (!v132);
      *a3 = veorq_s8(*a4, (int8x16_t)vaddq_s32(v26, (int32x4_t)xmmword_1DEE27B20));
      a3[1] = veorq_s8(a4[1], (int8x16_t)vaddq_s32(v27, v5));
      a3[2] = veorq_s8(a4[2], (int8x16_t)vaddq_s32(v28, v4));
      a3[3] = veorq_s8(a4[3], (int8x16_t)vaddq_s32(v29, v6));
      a3[4] = veorq_s8(a4[4], (int8x16_t)vaddq_s32(v30, (int32x4_t)xmmword_1DEE27B20));
      a3[5] = veorq_s8(a4[5], (int8x16_t)vaddq_s32(v31, v5));
      a3[6] = veorq_s8(a4[6], (int8x16_t)vaddq_s32(v32, v4));
      a3[7] = veorq_s8(a4[7], (int8x16_t)vaddq_s32(v33, v9));
      a3[8].i32[0] = a4[8].i32[0] ^ (v22 + 1634760805);
      a3[8].i32[1] = a4[8].i32[1] ^ (v23 + 857760878);
      a3[8].i32[2] = a4[8].i32[2] ^ (v24 + 2036477234);
      a3[8].i32[3] = a4[8].i32[3] ^ (v25 + 1797285236);
      a3[9].i32[0] = (result[1].i32[0] + v11) ^ a4[9].i32[0];
      a3[9].i32[1] = (result[1].i32[1] + v10) ^ a4[9].i32[1];
      a3[9].i32[2] = (result[1].i32[2] + v12) ^ a4[9].i32[2];
      a3[9].i32[3] = (result[1].i32[3] + v13) ^ a4[9].i32[3];
      a3[10].i32[0] = (result[2].i32[0] + v14) ^ a4[10].i32[0];
      a3[10].i32[1] = (result[2].i32[1] + v15) ^ a4[10].i32[1];
      a3[10].i32[2] = (result[2].i32[2] + v16) ^ a4[10].i32[2];
      a3[10].i32[3] = (result[2].i32[3] + v17) ^ a4[10].i32[3];
      a3[11].i32[0] = (v20 + v18 + result[3].i32[0]) ^ a4[11].i32[0];
      a3[11].i32[1] = (result[3].i32[1] + v19) ^ a4[11].i32[1];
      a3[11].i32[2] = (result[3].i32[2] + v35) ^ a4[11].i32[2];
      a3[11].i32[3] = (result[3].i32[3] + v34) ^ a4[11].i32[3];
      v6 = vaddq_s32(v6, (int32x4_t)xmmword_1DEE27B40);
      a4 += 12;
      a3 += 12;
      ++v7;
    }
    while (v7 != v8);
  }
  if (a2 % 0xC0 >= 0x40)
  {
    v134 = (a2 % 0xC0) >> 6;
    v133 = (int32x4_t *)&unk_1DEE27000;
    do
    {
      v135 = -10;
      v136 = (int32x4_t)xmmword_1DEE27B20;
      v137 = v5;
      v138 = v4;
      v139 = v6;
      do
      {
        v140 = vaddq_s32(v136, v137);
        v141 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8((int8x16_t)v140, (int8x16_t)v139));
        v142 = vaddq_s32(v138, v141);
        v143 = (int32x4_t)veorq_s8((int8x16_t)v142, (int8x16_t)v137);
        v144 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v143, 0xCuLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v143, 0x14uLL));
        v145 = vaddq_s32(v144, v140);
        v146 = (int32x4_t)veorq_s8((int8x16_t)v145, (int8x16_t)v141);
        v147 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v146, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v146, 0x18uLL));
        v148 = (int8x16_t)vaddq_s32(v147, v142);
        v149 = (int32x4_t)veorq_s8(v148, (int8x16_t)v144);
        v150 = vorrq_s8((int8x16_t)vshlq_n_s32(v149, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v149, 0x19uLL));
        v151 = (int32x4_t)vextq_s8(v150, v150, 4uLL);
        v152 = vaddq_s32(v151, v145);
        v153 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8((int8x16_t)v152, vextq_s8((int8x16_t)v147, (int8x16_t)v147, 0xCuLL)));
        v154 = vaddq_s32((int32x4_t)vextq_s8(v148, v148, 8uLL), v153);
        v155 = (int32x4_t)veorq_s8((int8x16_t)v154, (int8x16_t)v151);
        v156 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v155, 0xCuLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v155, 0x14uLL));
        v136 = vaddq_s32(v156, v152);
        v157 = (int32x4_t)veorq_s8((int8x16_t)v136, (int8x16_t)v153);
        v158 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v157, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v157, 0x18uLL));
        v159 = (int8x16_t)vaddq_s32(v158, v154);
        v160 = (int32x4_t)veorq_s8(v159, (int8x16_t)v156);
        v161 = vorrq_s8((int8x16_t)vshlq_n_s32(v160, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v160, 0x19uLL));
        v137 = (int32x4_t)vextq_s8(v161, v161, 0xCuLL);
        v138 = (int32x4_t)vextq_s8(v159, v159, 8uLL);
        v139 = (int32x4_t)vextq_s8((int8x16_t)v158, (int8x16_t)v158, 4uLL);
        v132 = __CFADD__(v135++, 1);
      }
      while (!v132);
      *a3 = veorq_s8(*a4, (int8x16_t)vaddq_s32(v136, (int32x4_t)xmmword_1DEE27B20));
      a3[1] = veorq_s8(a4[1], (int8x16_t)vaddq_s32(v137, v5));
      a3[2] = veorq_s8(a4[2], (int8x16_t)vaddq_s32(v138, v4));
      a3[3] = veorq_s8(a4[3], (int8x16_t)vaddq_s32(v139, v6));
      v6 = vaddq_s32(v6, (int32x4_t)xmmword_1DEE27B30);
      a4 += 4;
      a3 += 4;
      --v134;
    }
    while (v134);
  }
  else
  {
    v133 = (int32x4_t *)&unk_1DEE27000;
  }
  v162 = a2 & 0x3F;
  if ((a2 & 0x3F) != 0)
  {
    v163 = v133[178];
    v164 = -10;
    v165 = v5;
    v166 = v4;
    v167 = v6;
    do
    {
      v168 = vaddq_s32(v163, v165);
      v169 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8((int8x16_t)v168, (int8x16_t)v167));
      v170 = vaddq_s32(v166, v169);
      v171 = (int32x4_t)veorq_s8((int8x16_t)v170, (int8x16_t)v165);
      v172 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v171, 0xCuLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v171, 0x14uLL));
      v173 = vaddq_s32(v172, v168);
      v174 = (int32x4_t)veorq_s8((int8x16_t)v173, (int8x16_t)v169);
      v175 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v174, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v174, 0x18uLL));
      v176 = (int8x16_t)vaddq_s32(v175, v170);
      v177 = (int32x4_t)veorq_s8(v176, (int8x16_t)v172);
      v178 = vorrq_s8((int8x16_t)vshlq_n_s32(v177, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v177, 0x19uLL));
      v179 = (int32x4_t)vextq_s8(v178, v178, 4uLL);
      v180 = vaddq_s32(v179, v173);
      v181 = (int32x4_t)vrev32q_s16((int16x8_t)veorq_s8((int8x16_t)v180, vextq_s8((int8x16_t)v175, (int8x16_t)v175, 0xCuLL)));
      v182 = vaddq_s32((int32x4_t)vextq_s8(v176, v176, 8uLL), v181);
      v183 = (int32x4_t)veorq_s8((int8x16_t)v182, (int8x16_t)v179);
      v184 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v183, 0xCuLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v183, 0x14uLL));
      v163 = vaddq_s32(v184, v180);
      v185 = (int32x4_t)veorq_s8((int8x16_t)v163, (int8x16_t)v181);
      v186 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v185, 8uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v185, 0x18uLL));
      v187 = (int8x16_t)vaddq_s32(v186, v182);
      v188 = (int32x4_t)veorq_s8(v187, (int8x16_t)v184);
      v189 = vorrq_s8((int8x16_t)vshlq_n_s32(v188, 7uLL), (int8x16_t)vshrq_n_u32((uint32x4_t)v188, 0x19uLL));
      v165 = (int32x4_t)vextq_s8(v189, v189, 0xCuLL);
      v166 = (int32x4_t)vextq_s8(v187, v187, 8uLL);
      v167 = (int32x4_t)vextq_s8((int8x16_t)v186, (int8x16_t)v186, 4uLL);
      v132 = __CFADD__(v164++, 1);
    }
    while (!v132);
    if (v162 < 0x10)
    {
      v199[0] = vaddq_s32(v163, v133[178]);
    }
    else
    {
      *a3 = veorq_s8(*a4, (int8x16_t)vaddq_s32(v163, v133[178]));
      if (v162 < 0x20)
      {
        v199[1] = vaddq_s32(v165, v5);
      }
      else
      {
        a3[1] = veorq_s8(a4[1], (int8x16_t)vaddq_s32(v165, v5));
        if (v162 < 0x30)
        {
          v199[2] = vaddq_s32(v166, v4);
        }
        else
        {
          a3[2] = veorq_s8(a4[2], (int8x16_t)vaddq_s32(v166, v4));
          v199[3] = vaddq_s32(v167, v6);
        }
      }
    }
    v190 = a2 & 0x30;
    v191 = v162 - v190;
    if (v162 > v190)
    {
      v192 = &a3->i8[v190];
      v193 = (char *)v199 + v190;
      v194 = &a4->i8[v190];
      do
      {
        v196 = *v194++;
        v195 = v196;
        v197 = *v193++;
        *v192++ = v197 ^ v195;
        --v191;
      }
      while (v191);
    }
  }
  result[3].i32[0] = v6.i32[0];
  return result;
}

uint64_t ccec_raw_import_pub(uint64_t *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  char v7;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v7 = 0;
  v18 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v7 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v7 = 1;
    }
  }
  v18 = v7;
  if ((((unint64_t)(cczp_bitlen((uint64_t)a1) + 7) >> 2) & 0x3FFFFFFFFFFFFFFELL) != a2
    || (v13 = *a1,
        v14 = (unint64_t)(cczp_bitlen((uint64_t)a1) + 7) >> 3,
        *(_QWORD *)a4 = a1,
        v15 = a4 + 16,
        ccn_read_uint(v13, (_QWORD *)(a4 + 16), v14, a3))
    || ccn_read_uint(v13, (_QWORD *)(v15 + 8 * **(_QWORD **)a4), v14, &a3[v14]))
  {
    v16 = 0xFFFFFFFFLL;
  }
  else
  {
    ccn_seti(*a1, (_QWORD *)(v15 + 16 * **(_QWORD **)a4), 1);
    v16 = 0;
  }
  cc_disable_dit(&v18);
  return v16;
}

uint64_t ccec_verify_composite(uint64_t *a1, unint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, BOOL *a6)
{
  char v7;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  char v17;

  v7 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v7 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v7 = 1;
    }
  }
  v17 = v7;
  *a6 = 0;
  v13 = ccec_verify_composite_digest(a1, a2, a3, a4, a5, 0);
  if (v13 == -146)
    v14 = 0;
  else
    v14 = v13;
  if (v13)
    v15 = v14;
  else
    v15 = 0;
  *a6 = v13 == 0;
  cc_disable_dit(&v17);
  return v15;
}

uint64_t ccec_verify_composite_digest(uint64_t *a1, unint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, _QWORD *a6)
{
  char v12;
  uint64_t v18;
  _QWORD v20[4];
  void (*v21)(uint64_t);
  char v22;

  v12 = 0;
  v22 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v12 = 1;
    }
  }
  v22 = v12;
  v20[0] = cc_malloc_clear(376 * *(_QWORD *)*a1);
  v20[1] = 47 * *(_QWORD *)*a1;
  v20[2] = 0;
  v20[3] = cc_ws_alloc;
  v21 = cc_ws_free;
  if (v20[0])
  {
    v18 = ccec_verify_composite_digest_ws((uint64_t)v20, a1, a2, a3, a4, a5, a6);
    v21((uint64_t)v20);
  }
  else
  {
    v18 = 4294967283;
  }
  cc_disable_dit(&v22);
  return v18;
}

_BYTE *cc_atfork_prepare()
{
  char v0;
  char v7;

  v0 = 0;
  v7 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v0 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v0 = 1;
    }
  }
  v7 = v0;
  ccrng_atfork_prepare();
  return cc_disable_dit(&v7);
}

uint64_t ccrng_atfork_prepare()
{
  uint64_t result;

  result = ccrng_process_atfork_prepare((os_unfair_lock_s *)process_rng_ctx);
  if ((_DWORD)result)
    cc_abort();
  return result;
}

uint64_t ccrng_process_atfork_prepare(os_unfair_lock_s *a1)
{
  os_unfair_lock_lock(a1 + 52);
  ccrng_schedule_atomic_flag_set((uint64_t)&a1[42]);
  return 0;
}

uint64_t ccrng_schedule_atomic_flag_set(uint64_t result)
{
  *(_DWORD *)(result + 16) = 3;
  return result;
}

_BYTE *cc_atfork_parent()
{
  char v0;
  char v7;

  v0 = 0;
  v7 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v0 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v0 = 1;
    }
  }
  v7 = v0;
  ccrng_atfork_parent();
  return cc_disable_dit(&v7);
}

uint64_t ccrng_atfork_parent()
{
  uint64_t result;

  result = ccrng_process_atfork_parent((os_unfair_lock_s *)process_rng_ctx);
  if ((_DWORD)result)
    cc_abort();
  return result;
}

uint64_t ccrng_process_atfork_parent(os_unfair_lock_s *a1)
{
  os_unfair_lock_unlock(a1 + 52);
  return 0;
}

uint64_t ccrsa_init_pub(uint64_t *a1, void *a2, void *a3)
{
  char v6;
  uint64_t v12;
  uint64_t inited;
  _QWORD v15[4];
  void (*v16)(uint64_t);
  char v17;

  v6 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v17 = v6;
  v12 = 5 * *a1 + 3;
  v15[0] = cc_malloc_clear(8 * v12);
  v15[1] = v12;
  v15[2] = 0;
  v15[3] = cc_ws_alloc;
  v16 = cc_ws_free;
  if (v15[0])
  {
    inited = ccrsa_init_pub_ws((uint64_t)v15, a1, a2, a3);
    v16((uint64_t)v15);
  }
  else
  {
    inited = 4294967283;
  }
  cc_disable_dit(&v17);
  return inited;
}

uint64_t ccrsa_init_pub_ws(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t inited;

  v7 = *(_QWORD *)(a1 + 16);
  v8 = *a2;
  v9 = a2 + 3;
  ccn_set(*a2, a2 + 3, a3);
  inited = cczp_init_ws(a1, a2);
  ccn_set(v8, &v9[2 * *a2 + 1], a4);
  *(_QWORD *)(a1 + 16) = v7;
  return inited;
}

uint64_t ccrsa_emsa_pkcs1v15_encode(unint64_t a1, _WORD *a2, size_t a3, const void *a4, unsigned __int8 *a5)
{
  char v8;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  _WORD *v18;
  _BYTE *v19;
  char *v20;
  _BYTE *v21;
  _BYTE *v22;
  char v24;

  v8 = 0;
  v24 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v24 = v8;
  if (a5)
  {
    v14 = 4294967289;
    if (a3 > 0xFF)
      goto LABEL_16;
    v15 = a5[1];
    if (v15 > 0xFB || a3 + v15 + 8 > 0x7C)
      goto LABEL_16;
    v16 = a3 + v15 + 10;
  }
  else
  {
    LODWORD(v15) = 0;
    v16 = a3;
  }
  v14 = 4294967289;
  if (a1 >= 0xB && v16 <= a1 - 11)
  {
    v17 = a1 - v16 - 3;
    *a2 = 256;
    v18 = a2 + 1;
    memset(a2 + 1, 255, v17);
    v19 = (char *)v18 + v17;
    *((_BYTE *)v18 + v17) = 0;
    v20 = (char *)v18 + v17 + 1;
    if (a5)
    {
      v19[1] = 48;
      v19[2] = v16 - 2;
      v19[3] = 48;
      v21 = v19 + 5;
      v19[4] = v15 + 4;
      memcpy(v19 + 5, a5, v15 + 2);
      v22 = &v21[v15 + 2];
      *(_WORD *)v22 = 5;
      v22[2] = 4;
      v20 = v22 + 4;
      v22[3] = a3;
    }
    memcpy(v20, a4, a3);
    v14 = 0;
  }
LABEL_16:
  cc_disable_dit(&v24);
  return v14;
}

uint64_t ccrsa_eme_pkcs1v15_encode(uint64_t (**a1)(_QWORD, size_t, char *), unint64_t a2, _WORD *a3, size_t a4, void *a5)
{
  char v10;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  size_t v21;
  uint64_t (*v22)(_QWORD, size_t, char *);
  uint64_t i;
  void *v25;
  char v26;
  _BYTE __src[12];
  uint64_t v28;

  v10 = 0;
  v28 = *MEMORY[0x1E0C874D8];
  v26 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v26 = v10;
  v16 = ccrsa_n_from_size(a2);
  v17 = (char *)ccrsa_block_start(a2, a3, 1);
  if (v17 > (char *)a3)
    bzero(a3, v17 - (char *)a3);
  v18 = 4294967273;
  if (a2 >= 0xB)
  {
    v25 = a5;
    if (a2 - 11 >= a4)
    {
      v19 = v17 + 2;
      v20 = a2 - a4;
      v21 = a2 - a4 - 3;
      v22 = *a1;
      if (v21 > 0xB)
      {
        v18 = v22(a1, v21, v17 + 2);
        if ((_DWORD)v18)
          goto LABEL_20;
      }
      else
      {
        v18 = v22(a1, 12, __src);
        memcpy(v17 + 2, __src, v21);
        cc_clear(v21, __src);
        if ((_DWORD)v18)
          goto LABEL_20;
      }
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          while (!*((_BYTE *)v19 + i))
          {
            v18 = (*a1)(a1, 12, __src);
            *((_BYTE *)v19 + i) = __src[0];
            cc_clear(1uLL, __src);
            if ((_DWORD)v18)
              goto LABEL_20;
          }
        }
      }
      *(_WORD *)v17 = 512;
      v17[v20 - 1] = 0;
      memcpy(&v17[v20], v25, a4);
      ccn_swap(v16, (unint64_t *)a3);
      v18 = 0;
    }
  }
LABEL_20:
  cc_disable_dit(&v26);
  return v18;
}

uint64_t ccrsa_verify_pkcs1v15(unint64_t *a1, uint64_t a2, unint64_t a3, char *a4, unint64_t a5, unsigned __int8 *a6, _BYTE *a7)
{
  char v8;
  unsigned int v14;
  uint64_t v15;
  char v17;

  v8 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v17 = v8;
  *a7 = 0;
  v14 = ccrsa_verify_pkcs1v15_digest(a1, a2, a3, a4, a5, a6, 0);
  if (v14)
  {
    if (v14 == -146)
      v15 = 0;
    else
      v15 = v14;
  }
  else
  {
    v15 = 0;
    *a7 = 1;
  }
  cc_disable_dit(&v17);
  return v15;
}

uint64_t ccrsa_verify_pkcs1v15_digest(unint64_t *a1, uint64_t a2, unint64_t a3, char *a4, unint64_t a5, unsigned __int8 *a6, _QWORD *a7)
{
  char v13;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v30[4];
  void (*v31)(uint64_t);
  char v32;

  v13 = 0;
  v32 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v13 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v13 = 1;
    }
  }
  v32 = v13;
  v19 = *a1;
  v20 = sizeof_struct_ccrns_mul_modulus();
  v21 = sizeof_struct_ccpolyzp_po2cyc();
  v30[0] = cc_malloc_clear(8 * ((v20 + v21 - 1) / v21 + 13 * v19) + 8);
  v22 = *a1;
  v23 = sizeof_struct_ccrns_mul_modulus();
  v24 = sizeof_struct_ccpolyzp_po2cyc();
  v30[1] = (v23 + v24 - 1) / v24 + 13 * v22 + 1;
  v30[2] = 0;
  v30[3] = cc_ws_alloc;
  v31 = cc_ws_free;
  if (v30[0])
  {
    v25 = ccrsa_verify_pkcs1v15_digest_ws((uint64_t)v30, a1, a2, a3, a4, a5, a6, a7);
    v27 = v26;
    ((void (*)(_QWORD *, double))v31)(v30, v25);
  }
  else
  {
    v27 = 4294967283;
  }
  cc_disable_dit(&v32);
  return v27;
}

double ccrsa_verify_pkcs1v15_digest_ws(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t a4, char *a5, unint64_t a6, unsigned __int8 *a7, _QWORD *a8)
{
  double result;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C874D8];
  if (a8)
  {
    *a8 = 0;
    a8[1] = 0;
  }
  v10 = 0uLL;
  ccrsa_verify_pkcs1v15_internal_ws(a1, a2, a3, a4, a5, a6, a7, 0, (unsigned __int8 *)&v10);
  if (a8)
  {
    result = *(double *)&v10;
    *(_OWORD *)a8 = v10;
  }
  return result;
}

uint64_t ccrsa_verify_pkcs1v15_internal_ws(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t a4, char *a5, unint64_t a6, unsigned __int8 *a7, int a8, unsigned __int8 *a9)
{
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  int v24;
  uint64_t v26;
  char *v27;
  unsigned int v29;

  *(_QWORD *)a9 = 0;
  *((_QWORD *)a9 + 1) = 0;
  v16 = a2 + 3;
  v17 = *a2;
  v18 = ccn_write_uint_size(*a2, a2 + 3);
  v19 = v18 >= a6;
  if (a8 != 2110636126)
    v19 = v18 == a6;
  if (v19)
  {
    v26 = a3;
    v27 = a5;
    v20 = *(_QWORD *)(a1 + 16);
    v21 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v17);
    v22 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v17);
    cc_clear(8 * (*(_QWORD *)(a1 + 16) - v20), (void *)(*(_QWORD *)a1 + 8 * v20));
    v23 = ccn_write_uint_size(v17, v16);
    if (ccn_read_uint(v17, v21, a6, a7))
    {
      v24 = -23;
    }
    else
    {
      v29 = ccrsa_pub_crypt_ws(a1, (uint64_t *)a2, v22, v21);
      if (v29)
      {
LABEL_9:
        *(_QWORD *)(a1 + 16) = v20;
        return v29;
      }
      ccn_swap(v17, (unint64_t *)v22);
      if (ccrsa_emsa_pkcs1v15_verify_canary_out(v23, (_BYTE *)&v22[v17] - v23, a4, v27, v26, a9))
        v24 = -146;
      else
        v24 = a9[8] ^ a9[4] ^ a9[3] ^ a9[13] ^ 0x89 ^ a9[15] ^ a9[10] ^ a9[1] ^ a9[11] ^ a9[14] ^ a9[6] ^ a9[2] ^ a9[9] ^ a9[12] ^ *a9 ^ a9[7] ^ a9[5];
    }
    v29 = v24;
    goto LABEL_9;
  }
  return 4294967273;
}

uint64_t ccn_swap(uint64_t result, unint64_t *a2)
{
  unint64_t *i;
  unint64_t v3;

  for (i = &a2[result - 1]; a2 < i; --i)
  {
    v3 = bswap64(*a2);
    *a2++ = bswap64(*i);
    *i = v3;
  }
  if ((result & 1) != 0)
    *a2 = bswap64(*a2);
  return result;
}

unint64_t ccrsa_n_from_size(uint64_t a1)
{
  return (unint64_t)(a1 + 7) >> 3;
}

uint64_t ccrsa_block_start(uint64_t a1, void *__s, int a3)
{
  unint64_t v4;
  uint64_t v5;

  v4 = (a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = v4 - a1;
  if (a3)
    cc_clear(v4 - a1, __s);
  return (uint64_t)__s + v5;
}

_BYTE *ccmode_factory_cfb8_decrypt(_QWORD *a1, _QWORD *a2)
{
  char v2;
  char v9;

  v2 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v9 = v2;
  *a1 = ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) + ((2 * a2[1] + 14) & 0xFFFFFFFFFFFFFFF0) + 8;
  a1[1] = 1;
  a1[2] = ccmode_cfb8_init;
  a1[3] = ccmode_cfb8_decrypt;
  a1[4] = a2;
  return cc_disable_dit(&v9);
}

uint64_t cckyber_ntt_forward(uint64_t result)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  __int16 *v9;
  int v10;
  __int16 v11;

  v1 = 7;
  do
  {
    v2 = 0;
    v3 = 0x80u >> v1;
    v4 = 2 << v1;
    v5 = 1 << v1;
    do
    {
      if (v2 < v2 + (1 << v1))
      {
        v6 = v5 - (unint64_t)v2;
        v7 = cckyber_zetas[v3];
        v8 = v5;
        v9 = (__int16 *)(result + 2 * v2);
        do
        {
          v10 = 3329 * ((v7 * *(__int16 *)(result + 2 * v8)) >> 16) + 26632;
          v11 = *v9;
          *(_WORD *)(result + 2 * v8) = *v9 - HIWORD(v10);
          *v9++ = v11 + HIWORD(v10);
          ++v8;
          --v6;
        }
        while (v6);
      }
      ++v3;
      v2 += v4;
      v5 += v4;
    }
    while (v2 < 0x100);
    --v1;
  }
  while (v1);
  return result;
}

uint64_t cckyber_ntt_inverse(uint64_t result)
{
  int i;
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  __int16 v8;
  __int16 v9;
  uint64_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int16x8_t *v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;

  for (i = 1; i != 7; ++i)
  {
    v2 = 0;
    v3 = (1 << i);
    v4 = 0x80u >> (i - 1);
    v5 = result + 2 * v3;
    do
    {
      v6 = cckyber_zetas[--v4];
      v7 = v2;
      do
      {
        v8 = *(_WORD *)(result + 2 * v7);
        v9 = *(_WORD *)(v5 + 2 * v7);
        *(_WORD *)(result + 2 * v7) = (3329 * ((1290168 * (__int16)(v9 + v8)) >> 16) + 26632) >> 16;
        *(_WORD *)(v5 + 2 * v7++) = (3329 * ((v6 * (__int16)(v9 - v8)) >> 16) + 26632) >> 16;
      }
      while (v7 < v2 + v3);
      v2 += (2 << i);
    }
    while (v2 < 0x100);
  }
  v10 = 0;
  v11 = vdupq_n_s32(0x912FE89F);
  v12 = vdupq_n_s32(0xD01u);
  v13 = vdupq_n_s32(0x6808u);
  v14 = vdupq_n_s32(0x94921C25);
  do
  {
    v15 = (int16x8_t *)(result + v10);
    v16 = *(int16x8_t *)(result + v10);
    v17 = *(int16x8_t *)(result + v10 + 256);
    v18 = vaddq_s16(v17, v16);
    *v15 = vaddhn_high_s32(vaddhn_s32(vmulq_s32(vshrq_n_s32(vmulq_s32(vmovl_s16(*(int16x4_t *)v18.i8), v11), 0x10uLL), v12), v13), vmulq_s32(vshrq_n_s32(vmulq_s32(vmovl_high_s16(v18), v11), 0x10uLL), v12), v13);
    v19 = vsubq_s16(v17, v16);
    v15[16] = vaddhn_high_s32(vaddhn_s32(vmulq_s32(vshrq_n_s32(vmulq_s32(vmovl_s16(*(int16x4_t *)v19.i8), v14), 0x10uLL), v12), v13), vmulq_s32(vshrq_n_s32(vmulq_s32(vmovl_high_s16(v19), v14), 0x10uLL), v12), v13);
    v10 += 16;
  }
  while (v10 != 256);
  return result;
}

uint64_t cckyber_ntt_basemul(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  _WORD *v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;

  v3 = 0;
  v4 = a3 + 4;
  v5 = a2 + 4;
  v6 = &dword_1DEE186F0;
  do
  {
    v7 = *v6++;
    v8 = (_WORD *)(result + v3);
    v9 = 1806234369 * *(__int16 *)(v5 + v3 - 2);
    v10 = *(__int16 *)(v5 + v3 - 4);
    v11 = (3329 * ((((3329 * ((v9 * *(__int16 *)(v4 + v3 - 2)) >> 16) + 26632) >> 16) * v7) >> 16) + 26632) >> 16;
    *v8 = v11;
    v10 *= 1806234369;
    *v8 = v11 + ((3329 * ((v10 * *(__int16 *)(v4 + v3 - 4)) >> 16) + 26632) >> 16);
    v12 = 3329 * ((v10 * *(__int16 *)(v4 + v3 - 2)) >> 16) + 26632;
    v8[1] = HIWORD(v12);
    v8[1] = ((3329 * ((v9 * *(__int16 *)(v4 + v3 - 4)) >> 16) + 26632) >> 16) + HIWORD(v12);
    v13 = 1806234369 * *(__int16 *)(v5 + v3 + 2);
    v14 = 1806234369 * *(__int16 *)(v5 + v3);
    v15 = (3329 * (-(v7 * ((3329 * ((v13 * *(__int16 *)(v4 + v3 + 2)) >> 16) + 26632) >> 16)) >> 16)
                       + 26632) >> 16;
    v8[2] = v15;
    v8[2] = v15 + ((3329 * ((v14 * *(__int16 *)(v4 + v3)) >> 16) + 26632) >> 16);
    v16 = 3329 * ((v14 * *(__int16 *)(v4 + v3 + 2)) >> 16) + 26632;
    v8[3] = HIWORD(v16);
    v8[3] = ((3329 * ((v13 * *(__int16 *)(v4 + v3)) >> 16) + 26632) >> 16) + HIWORD(v16);
    v3 += 8;
  }
  while (v3 != 512);
  return result;
}

void *cccast_ecb_decrypt_mode()
{
  return &cccast_eay_ecb_decrypt_mode;
}

void *cccast_ecb_encrypt_mode()
{
  return &cccast_eay_ecb_encrypt_mode;
}

_QWORD *cccast_cbc_encrypt_mode()
{
  ccmode_factory_cbc_encrypt(cbc_cast_encrypt, cccast_eay_ecb_encrypt_mode);
  return cbc_cast_encrypt;
}

_QWORD *cccast_cbc_decrypt_mode()
{
  ccmode_factory_cbc_decrypt(cbc_cast_decrypt, cccast_eay_ecb_decrypt_mode);
  return cbc_cast_decrypt;
}

_QWORD *cccast_cfb_encrypt_mode()
{
  ccmode_factory_cfb_encrypt(cfb_cast_encrypt, cccast_eay_ecb_encrypt_mode);
  return cfb_cast_encrypt;
}

_QWORD *cccast_cfb_decrypt_mode()
{
  ccmode_factory_cfb_decrypt(cfb_cast_decrypt, cccast_eay_ecb_encrypt_mode);
  return cfb_cast_decrypt;
}

_QWORD *cccast_cfb8_encrypt_mode()
{
  ccmode_factory_cfb8_encrypt(cfb8_cast_encrypt, cccast_eay_ecb_encrypt_mode);
  return cfb8_cast_encrypt;
}

_QWORD *cccast_cfb8_decrypt_mode()
{
  ccmode_factory_cfb8_decrypt(cfb8_cast_decrypt, cccast_eay_ecb_encrypt_mode);
  return cfb8_cast_decrypt;
}

_QWORD *cccast_ctr_crypt_mode()
{
  ccmode_factory_ctr_crypt(ctr_cast, cccast_eay_ecb_encrypt_mode);
  return ctr_cast;
}

_QWORD *cccast_ofb_crypt_mode()
{
  ccmode_factory_ofb_crypt(ofb_cast, cccast_eay_ecb_encrypt_mode);
  return ofb_cast;
}

uint64_t ccec_compact_import_pub_size(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  if (a1 <= 31)
  {
    if (a1 == 24)
    {
      v7 = 192;
      goto LABEL_17;
    }
    if (a1 == 28)
    {
      v7 = 224;
      goto LABEL_17;
    }
LABEL_16:
    v7 = 0;
    goto LABEL_17;
  }
  if (a1 == 32)
  {
    v7 = 256;
    goto LABEL_17;
  }
  if (a1 == 48)
  {
    v7 = 384;
    goto LABEL_17;
  }
  if (a1 != 66)
    goto LABEL_16;
  v7 = 521;
LABEL_17:
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccec_compact_import_pub_ws(uint64_t a1, unint64_t *a2, uint64_t a3, unsigned __int8 *a4, unint64_t **a5)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;

  v8 = *(_QWORD *)(a1 + 16);
  *a5 = a2;
  v9 = a5 + 2;
  result = ccec_import_affine_point_ws(a1, a2, 4, a3, a4, (unint64_t *)a5 + 2);
  if (!(_DWORD)result)
  {
    ccn_seti(*a2, &v9[2 * **a5], 1);
    v11 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 3 * *a2);
    result = ccec_validate_point_and_projectify_ws(a1, (uint64_t *)a2, v11, (unint64_t *)a5 + 2);
  }
  *(_QWORD *)(a1 + 16) = v8;
  return result;
}

uint64_t ccec_compact_import_pub(unint64_t *a1, uint64_t a2, unsigned __int8 *a3, unint64_t **a4)
{
  char v8;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[4];
  void (*v19)(uint64_t);
  char v20;

  v8 = 0;
  v20 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v20 = v8;
  v14 = cc_malloc_clear(160 * *a1);
  v15 = 20 * *a1;
  v18[0] = v14;
  v18[1] = v15;
  v18[2] = 0;
  v18[3] = cc_ws_alloc;
  v19 = cc_ws_free;
  if (v14)
  {
    v16 = ccec_compact_import_pub_ws((uint64_t)v18, a1, a2, a3, a4);
    v19((uint64_t)v18);
  }
  else
  {
    v16 = 4294967283;
  }
  cc_disable_dit(&v20);
  return v16;
}

uint64_t ccecdh_generate_key_ws(uint64_t a1, uint64_t *a2, uint64_t (**a3)(_QWORD, uint64_t, uint64_t *), uint64_t **a4)
{
  uint64_t v7;
  uint64_t result;

  v7 = *(_QWORD *)(a1 + 16);
  result = ccec_generate_key_internal_fips_ws(a1, a2, a3, a4);
  if (!(_DWORD)result)
  {
    if (ccecdh_pairwise_consistency_check_ws(a1, a4, 0, a3))
      result = 4294967278;
    else
      result = 0;
  }
  *(_QWORD *)(a1 + 16) = v7;
  return result;
}

uint64_t ccecdh_generate_key(uint64_t *a1, uint64_t (**a2)(_QWORD, uint64_t, uint64_t *), uint64_t **a3)
{
  char v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t key_ws;
  _QWORD v20[4];
  void (*v21)(uint64_t);
  char v22;

  v6 = 0;
  v22 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v22 = v6;
  v12 = *a1;
  v13 = sizeof_struct_cche_galois_key();
  v14 = sizeof_struct_ccpolyzp_po2cyc();
  v20[0] = cc_malloc_clear(8 * ((v13 + v14 + 4 * v12 * v14 - 1) / v14 - v12 + 32 * v12));
  v15 = *a1;
  v16 = sizeof_struct_cche_galois_key();
  v17 = sizeof_struct_ccpolyzp_po2cyc();
  v20[1] = (v16 + v17 + 4 * v15 * v17 - 1) / v17 - v15 + 32 * v15;
  v20[2] = 0;
  v20[3] = cc_ws_alloc;
  v21 = cc_ws_free;
  if (v20[0])
  {
    key_ws = ccecdh_generate_key_ws((uint64_t)v20, a1, a2, a3);
    v21((uint64_t)v20);
  }
  else
  {
    key_ws = 4294967283;
  }
  cc_disable_dit(&v22);
  return key_ws;
}

uint64_t cch2c_hash_to_base_sae_ws(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, size_t a5, char *a6, char a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t result;
  _OWORD v20[16];
  _BYTE v21[21];
  char v22;
  __int16 v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C874D8];
  qmemcpy(v21, "SAE Hash to Element u", sizeof(v21));
  v22 = a7 + 49;
  v23 = 20512;
  v24 = a7 + 49;
  memset(v20, 0, 255);
  v12 = (*(uint64_t (**)(void))(a2 + 16))();
  v13 = cczp_n(v12);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = 2 * v13;
  v16 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v13);
  v17 = (uint64_t *)(*(uint64_t (**)(void))(a2 + 24))();
  if (cchkdf_extract(v17, a3, a4, a5, a6, (uint64_t)v20)
    || cchkdf_expand((rsize_t *)v17, *v17, (uint64_t)v20, 0x19uLL, v21, *(unsigned int *)(a2 + 8), (uint64_t)v20)|| ccn_read_uint(v15, v16, *(unsigned int *)(a2 + 8), (unsigned __int8 *)v20))
  {
    result = 4294967289;
  }
  else
  {
    cczp_mod_ws(a1, v12);
    result = 0;
  }
  *(_QWORD *)(a1 + 16) = v14;
  return result;
}

uint64_t cch2c_hash_to_base_rfc_ws(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, unint64_t a5, uint64_t a6, char a7)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t result;
  uint64_t v19;
  _BYTE v20[3];
  char v21;
  char v22;
  _OWORD v23[16];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C874D8];
  qmemcpy(v20, "H2C", sizeof(v20));
  v21 = a7;
  v22 = 1;
  memset(v23, 0, sizeof(v23));
  v12 = (*(uint64_t (**)(void))(a2 + 16))();
  v13 = cczp_n(v12);
  v19 = *(_QWORD *)(a1 + 16);
  v14 = 2 * v13;
  v15 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v13);
  v16 = (*(uint64_t (**)(void))(a2 + 24))();
  if (a5 > 0xFF
    || (v17 = (uint64_t *)v16,
        __memcpy_chk(),
        cchkdf_extract(v17, a3, a4, a5 + 1, (char *)v23, (uint64_t)v23))
    || cchkdf_expand((rsize_t *)v17, *v17, (uint64_t)v23, 5uLL, v20, *(unsigned int *)(a2 + 8), (uint64_t)v23)|| ccn_read_uint(v14, v15, *(unsigned int *)(a2 + 8), (unsigned __int8 *)v23))
  {
    result = 4294967289;
  }
  else
  {
    cczp_mod_ws(a1, v12);
    result = 0;
  }
  *(_QWORD *)(a1 + 16) = v19;
  return result;
}

uint64_t cch2c_hash_to_base_ws(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t ccec_generate_key_legacy(uint64_t *a1, uint64_t (**a2)(_QWORD, size_t, void *), uint64_t **a3)
{
  char v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t key_internal_legacy_ws;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[3];
  uint64_t (*v21)(_QWORD *, uint64_t);
  void (*v22)(uint64_t);
  _OWORD v23[3];
  uint64_t v24;
  _QWORD v25[2];
  uint64_t (*v26[3])(_QWORD, unint64_t, void *);
  char v27;

  v6 = 0;
  v27 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v27 = v6;
  v12 = *a1;
  memset(v26, 0, sizeof(v26));
  v25[0] = ccsha256_di();
  v25[1] = 0;
  v24 = 0;
  memset(v23, 0, sizeof(v23));
  ccdrbg_factory_nisthmac(v23, (uint64_t)v25);
  v13 = 27 * v12;
  if (27 * v12 <= (unint64_t)(49 * v12))
    v13 = 49 * v12;
  v14 = v13 + v12;
  v20[0] = cc_malloc_clear((*(_QWORD *)&v23[0] + 8 * (v13 + v12) + 7) & 0xFFFFFFFFFFFFFFF8);
  v20[1] = v14 + ((unint64_t)(*(_QWORD *)&v23[0] + 7) >> 3);
  v20[2] = 0;
  v21 = cc_ws_alloc;
  v22 = cc_ws_free;
  if (v20[0])
  {
    key_internal_legacy_ws = ccec_generate_key_internal_legacy_ws((uint64_t)v20, a1, a2, a3);
    if ((_DWORD)key_internal_legacy_ws
      || (v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v21(v20, (unint64_t)(*(_QWORD *)&v23[0] + 7) >> 3), v17 = v21(v20, v12), key_internal_legacy_ws = (*a2)(a2, 8 * v12, (void *)v17), (_DWORD)key_internal_legacy_ws)|| (key_internal_legacy_ws = ccdrbg_init((uint64_t)v23), (_DWORD)key_internal_legacy_ws)|| (key_internal_legacy_ws = ccrng_drbg_init_withdrbg((uint64_t (**)(uint64_t, uint64_t, uint64_t))v26, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v23, v16), (_DWORD)key_internal_legacy_ws))
    {
      v18 = key_internal_legacy_ws;
    }
    else if (ccec_pairwise_consistency_check_ws((uint64_t)v20, a3, v26))
    {
      v18 = 4294967278;
    }
    else
    {
      ccdrbg_done((uint64_t)v23, (uint64_t)v16);
      v18 = 0;
    }
    v22((uint64_t)v20);
  }
  else
  {
    v18 = 4294967283;
  }
  cc_disable_dit(&v27);
  return v18;
}

uint64_t ccdh_copy_gp(uint64_t *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v4 = *a1;
  if (v4 != ccdh_gp_n(a2))
    return 4294967243;
  v5 = ccdh_gp_n(a2);
  v6 = ccdh_gp_size(8 * v5);
  memcpy(a1, a2, v6);
  return 0;
}

uint64_t ccz_expmod(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t inited;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t (*v34)(_QWORD *, uint64_t);
  void (*v35)(uint64_t);
  char v36;

  v8 = 0;
  v36 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v36 = v8;
  v14 = ccz_n(a4);
  v15 = sizeof_struct_ccrns_mul_modulus();
  v16 = sizeof_struct_ccpolyzp_po2cyc();
  v32[0] = cc_malloc_clear(8 * ((v15 + v16 - 1) / v16 + 13 * v14) + 8);
  v17 = ccz_n(a4);
  v18 = sizeof_struct_ccrns_mul_modulus();
  v19 = sizeof_struct_ccpolyzp_po2cyc();
  v32[1] = (v18 + v19 - 1) / v19 + 13 * v17 + 1;
  v33 = 0;
  v34 = cc_ws_alloc;
  v35 = cc_ws_free;
  if (v32[0])
  {
    v20 = ccz_n(a4);
    ccz_set_capacity(a1, v20);
    v21 = (_QWORD *)cc_ws_alloc(v32, 2 * v20 + 4);
    *v21 = v20;
    ccn_set(v20, v21 + 3, *(void **)(a4 + 24));
    inited = cczp_init_ws((uint64_t)v32, v21);
    if ((_DWORD)inited)
    {
      v28 = inited;
    }
    else
    {
      v23 = (uint64_t *)v34(v32, v20);
      v24 = ccz_n(a2);
      v25 = ccz_n(a4);
      v26 = ccz_n(a2);
      v27 = v26;
      if (v24 >= v25)
      {
        cczp_modn_ws((uint64_t)v32, v21, v23, v26, *(char **)(a2 + 24));
      }
      else
      {
        if (v26)
          ccn_set(v26, v23, *(void **)(a2 + 24));
        ccn_zero(v20 - v27, &v23[v27]);
      }
      v29 = ccz_bitlen(a3);
      v28 = cczp_power_ws((uint64_t)v32, (uint64_t)v21, *(void **)(a1 + 24), (unint64_t *)v23, v29, *(_QWORD **)(a3 + 24));
      if (!(_DWORD)v28)
      {
        v30 = ccn_n(v20, *(_QWORD *)(a1 + 24));
        ccz_set_n((_QWORD *)a1, v30);
      }
    }
    v33 = 0;
    v35((uint64_t)v32);
  }
  else
  {
    v28 = 4294967283;
  }
  cc_disable_dit(&v36);
  return v28;
}

uint64_t ccss_shamir_share_generator_generate_share(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  char v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v19;
  char v20;

  v6 = 0;
  v20 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v20 = v6;
  if (!a2)
    goto LABEL_8;
  v12 = ccss_shamir_consistent_primes(*a1, *(_QWORD *)a3);
  if ((_DWORD)v12)
  {
    v17 = v12;
    goto LABEL_10;
  }
  v19 = a2;
  v13 = ccss_shamir_prime_of((uint64_t)a1);
  v14 = cczp_n(v13);
  v15 = ccss_shamir_prime_of((uint64_t)a1);
  v16 = (unint64_t *)cczp_prime(v15);
  if ((ccn_cmpn(1uLL, &v19, v14, v16) & 0x80000000) != 0)
  {
    ccss_shamir_evaluate_poly_to_buffer((uint64_t)a1, a2, (char *)(a3 + 16));
    v17 = 0;
    *(_DWORD *)(a3 + 8) = a2;
  }
  else
  {
LABEL_8:
    v17 = 4294967165;
  }
LABEL_10:
  cc_disable_dit(&v20);
  return v17;
}

uint64_t ccecies_decrypt_gcm_composite(unint64_t **a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, rsize_t a8, uint64_t a9, unsigned __int8 *a10, uint64_t a11)
{
  char v17;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t **v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  rsize_t v38;
  uint64_t v39;
  uint64_t v41;
  rsize_t v42;
  _QWORD v45[2];
  uint64_t v46;
  uint64_t (*v47)(_QWORD *, uint64_t);
  void (*v48)(uint64_t);
  char v49;
  size_t v50;

  v17 = 0;
  v49 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v17 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v17 = 1;
    }
  }
  v49 = v17;
  v23 = *a1;
  v24 = **a1;
  v25 = sizeof_struct_cche_galois_key();
  v26 = sizeof_struct_ccpolyzp_po2cyc();
  v45[0] = cc_malloc_clear(8 * ((v25 + v26 + 3 * v24 * v26 - 1) / v26 + 30 * v24));
  v27 = *v23;
  v28 = sizeof_struct_cche_galois_key();
  v29 = sizeof_struct_ccpolyzp_po2cyc();
  v45[1] = (v28 + v29 + 3 * v27 * v29 - 1) / v29 + 30 * v27;
  v46 = 0;
  v47 = cc_ws_alloc;
  v48 = cc_ws_free;
  if (!v45[0])
  {
    v39 = 4294967283;
    goto LABEL_12;
  }
  v42 = a8;
  v30 = a4;
  v31 = *a1;
  v32 = **a1;
  v33 = (unint64_t **)cc_ws_alloc(v45, (unint64_t)(24 * v32 + 23) >> 3);
  v34 = (char *)v47(v45, v32);
  v50 = (unint64_t)(cczp_bitlen((uint64_t)v31) + 7) >> 3;
  v35 = ccecies_pub_key_size_cp((uint64_t)v31, a2);
  v36 = ccecies_import_eph_pub_ws((uint64_t)v45, v31, a2, v35, a10, v33);
  if ((_DWORD)v36
    || (v36 = ccecdh_compute_shared_secret_ws((uint64_t)v45, a1, v33, &v50, v34, *(uint64_t (***)(_QWORD, uint64_t, uint64_t *))(a2 + 8)), (_DWORD)v36))
  {
    v39 = v36;
    v38 = v42;
    v37 = a3;
    goto LABEL_9;
  }
  v37 = a3;
  v41 = v30;
  v38 = v42;
  v39 = ccecies_decrypt_gcm_from_shared_secret_composite((uint64_t)v31, a2, v50, v34, v42, (uint64_t)a10, a9, a11, v41, a5, a6, a7, a3);
  if ((_DWORD)v39)
LABEL_9:
    cc_clear(v38, v37);
  v46 = 0;
  v48((uint64_t)v45);
LABEL_12:
  cc_disable_dit(&v49);
  return v39;
}

uint64_t ccecies_decrypt_gcm(uint64_t *a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, rsize_t *a9, void *a10)
{
  char v17;
  unint64_t v23;
  rsize_t v24;
  rsize_t v25;
  uint64_t v26;
  char v29;

  v17 = 0;
  v29 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v17 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v17 = 1;
    }
  }
  v29 = v17;
  v23 = ccecies_pub_key_size(a1, a2);
  v24 = ccecies_decrypt_gcm_plaintext_size(a1, a2, a3);
  v25 = *a9;
  if (v24 - 1 >= *a9)
  {
    v26 = 4294967289;
LABEL_11:
    cc_clear(v25, a10);
    goto LABEL_8;
  }
  v26 = ccecies_decrypt_gcm_composite((unint64_t **)a1, a2, a10, a5, a6, a7, a8, v24, (uint64_t)&a4[v23], a4, (uint64_t)&a4[v23 + v24]);
  if ((_DWORD)v26)
  {
    v25 = *a9;
    goto LABEL_11;
  }
  *a9 = v24;
LABEL_8:
  cc_disable_dit(&v29);
  return v26;
}

uint64_t ccmode_siv_auth(uint64_t a1, unint64_t a2, char *a3)
{
  uint64_t result;
  int8x16_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C874D8];
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 56) + 8) != 16)
    return 4294967226;
  if (!a2)
    return 0;
  cccmac_sl_test_xor(a1 + 88, (char *)(a1 + 88));
  cccmac_one_shot_generate(*(_QWORD **)(*(_QWORD *)a1 + 56), *(_QWORD *)(a1 + 8) >> 1, a1 + 24, a2, a3, 0x10uLL, &v7);
  result = 0;
  *(int8x16_t *)(a1 + 88) = veorq_s8(v7, *(int8x16_t *)(a1 + 88));
  *(_QWORD *)(a1 + 16) = 4;
  return result;
}

uint64_t ccmode_siv_auth_finalize(uint64_t a1, unint64_t a2, char *a3, void *a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  int8x16_t __s;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C874D8];
  v5 = *(_QWORD **)(*(_QWORD *)a1 + 56);
  if (v5[1] != 16)
  {
    result = 4294967226;
    goto LABEL_11;
  }
  v6 = *(_QWORD *)(a1 + 16);
  if (v6 == 4 || v6 == 2)
  {
    if (a2)
    {
      if (a2 >= 0x10)
      {
        v18[1] = v18;
        MEMORY[0x1E0C86820](a1, a2, a3, a4);
        v12 = (char *)&v18[-2 * v11];
        cccmac_init(v5, (uint64_t)v12, *(_QWORD *)(a1 + 8) >> 1, a1 + 24);
        __memcpy_chk();
        *(int8x16_t *)((char *)&__s + a2 - (a2 & 0xFFFFFFFFFFFFFFF0)) = veorq_s8(*(int8x16_t *)(a1 + 88), *(int8x16_t *)&a3[a2 - 16]);
        cccmac_update(v12, (a2 & 0xFFFFFFFFFFFFFFF0) - 16, a3);
        cccmac_update(v12, a2 - ((a2 & 0xFFFFFFFFFFFFFFF0) - 16), __s.i8);
        cccmac_final_generate(v12, 0x10uLL, a4);
        cc_clear(v5[1] + *v5 + 80, v12);
LABEL_18:
        result = 0;
        v14 = 5;
        goto LABEL_19;
      }
    }
    else if (v6 == 2)
    {
      cc_clear(0x10uLL, &__s);
      __s.i8[15] = 1;
      v15 = *(_QWORD **)(*(_QWORD *)a1 + 56);
      v16 = *(_QWORD *)(a1 + 8) >> 1;
      v17 = a1 + 24;
LABEL_17:
      cccmac_one_shot_generate(v15, v16, v17, 0x10uLL, __s.i8, 0x10uLL, a4);
      goto LABEL_18;
    }
    cccmac_sl_test_xor(a1 + 88, (char *)(a1 + 88));
    __memcpy_chk();
    __s.i8[a2] = 0x80;
    if (a2 <= 0xE)
      bzero(&__s.i8[a2 + 1], 15 - a2);
    __s = veorq_s8(*(int8x16_t *)(a1 + 88), __s);
    v16 = *(_QWORD *)(a1 + 8) >> 1;
    v17 = a1 + 24;
    v15 = v5;
    goto LABEL_17;
  }
  result = 4294967228;
LABEL_11:
  v14 = 255;
LABEL_19:
  *(_QWORD *)(a1 + 16) = v14;
  return result;
}

_BYTE *ccmode_factory_siv_encrypt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  char v10;

  v3 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v10 = v3;
  *(_OWORD *)a1 = xmmword_1DEE18850;
  *(_QWORD *)(a1 + 16) = ccmode_siv_init;
  *(_QWORD *)(a1 + 24) = ccmode_siv_auth;
  *(_QWORD *)(a1 + 32) = ccmode_siv_auth;
  *(_QWORD *)(a1 + 40) = ccmode_siv_encrypt;
  *(_QWORD *)(a1 + 48) = ccmode_siv_reset;
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 64) = a3;
  return cc_disable_dit(&v10);
}

uint64_t ccec_diversify_pub_twin(uint64_t *a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4, uint64_t (**a5)(_QWORD, uint64_t, uint64_t *))
{
  char v10;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t (*v35)(_QWORD *, uint64_t);
  void (*v36)(uint64_t);
  char v37;

  v10 = 0;
  v37 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v37 = v10;
  v16 = *a1;
  v17 = 23 * *a1;
  v18 = sizeof_struct_ccpolyzp_po2cyc();
  v19 = (v18 + 127) / v18 + 4 * v16 + 3;
  if (v17 > v19)
    v19 = v17;
  v20 = cc_malloc_clear(8 * (v19 + 11 * v16));
  v33[0] = v20;
  v21 = *a1;
  v22 = 23 * *a1;
  v23 = sizeof_struct_ccpolyzp_po2cyc();
  v24 = 3 * v21;
  v25 = 4 * v21 + (v23 + 127) / v23 + 3;
  if (v22 > v25)
    v25 = v22;
  v33[1] = v25 + 11 * v21;
  v34 = 0;
  v35 = cc_ws_alloc;
  v36 = cc_ws_free;
  if (v20)
  {
    v26 = (char *)cc_ws_alloc(v33, v21);
    v27 = (char *)v35(v33, v21);
    v28 = v35(v33, 3 * v21);
    v29 = v35(v33, 3 * v21);
    v30 = v35(v33, v24);
    v31 = ccec_validate_point_and_projectify_ws((uint64_t)v33, a1, v29, (unint64_t *)(a2 + 16));
    if (!(_DWORD)v31)
    {
      v31 = ccec_projectify_ws((uint64_t)v33, (uint64_t)a1);
      if (!(_DWORD)v31)
      {
        v31 = ccec_diversify_twin_scalars_ws((uint64_t)v33, a1, v26, v27, a3, a4);
        if (!(_DWORD)v31)
        {
          v31 = ccec_mult_blinded_ws((uint64_t)v33, a1, v30, (unint64_t *)v26, v29, a5);
          if (!(_DWORD)v31)
          {
            v31 = ccec_mult_blinded_ws((uint64_t)v33, a1, v29, (unint64_t *)v27, v28, a5);
            if (!(_DWORD)v31)
            {
              ccec_full_add_ws((uint64_t)v33, (uint64_t)a1);
              v31 = ccec_affinify_ws((uint64_t)v33, (uint64_t)a1);
            }
          }
        }
      }
    }
    v34 = 0;
    v36((uint64_t)v33);
  }
  else
  {
    v31 = 4294967283;
  }
  cc_disable_dit(&v37);
  return v31;
}

uint64_t ccpolyzp_po2cyc_block_rng_init(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = generate;
  *(_QWORD *)(a1 + 64) = ccaes_ctr_crypt_mode();
  *(_QWORD *)(a1 + 72) = 16;
  *(_DWORD *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 88) = 0;
  ccdrbg_factory_nistctr((_QWORD *)(a1 + 8), a1 + 64);
  if (*(_QWORD *)(a1 + 8) > 0x58uLL)
    return 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 184) = 4096;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 16))(a1 + 8, a1 + 96, 32, a2, 0, 0, 0, 0);
}

uint64_t sizeof_struct_ccpolyzp_po2cyc_block_rng_state()
{
  return 4288;
}

uint64_t CCPOLYZP_PO2CYC_RANDOM_UNIFORM_WORKSPACE_N(unint64_t a1)
{
  uint64_t v1;

  v1 = 1024;
  if (a1 < 0x400)
    v1 = a1;
  return 2 * v1;
}

uint64_t ccpolyzp_po2cyc_random_uniform_ws(uint64_t a1, unsigned int **a2, uint64_t (**a3)(_QWORD, uint64_t, uint64_t))
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int i;
  uint64_t result;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v30;

  v5 = **a2;
  v4 = (*a2)[1];
  if (v5 >= 0x400)
    v6 = 1024;
  else
    v6 = **a2;
  v28 = *(_QWORD *)(a1 + 16);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v6);
  v30 = v4;
  if (v4)
  {
    v8 = v7;
    v9 = 0;
    v10 = *a2;
    do
    {
      v11 = v10[1] - 1;
      v12 = v10;
      if (v11 > v9)
      {
        v12 = v10;
        do
        {
          v12 = (unsigned int *)*((_QWORD *)v12 + 14);
          --v11;
        }
        while (v11 > v9);
      }
      if (v5)
      {
        for (i = 0; i != v5; ++i)
        {
          if (!(i % v6))
          {
            result = (*a3)(a3, 16 * v6, v8);
            if ((_DWORD)result)
              return result;
            v10 = *a2;
          }
          v15 = (unint64_t *)(v8 + 16 * (i % v6));
          v17 = *v15;
          v16 = v15[1];
          v18 = *((_QWORD *)v12 + 4);
          v19 = (v18 * (unsigned __int128)v17) >> 64;
          v20 = (v18 * (unsigned __int128)v16) >> 64;
          v21 = v18 * v16;
          v22 = __CFADD__(v19, v21);
          v23 = v19 + v21;
          v24 = v22;
          v25 = v24
              + __CFADD__(*((_QWORD *)v12 + 5) * v17, v23)
              + v20
              + *((_QWORD *)v12 + 5) * v16
              + ((*((unint64_t *)v12 + 5) * (unsigned __int128)v17) >> 64);
          v26 = *((_QWORD *)v12 + 2);
          v27 = (unsigned int *)(v17 - v25 * v26);
          if ((uint64_t)v27 - v26 >= 0)
            v27 = (unsigned int *)((char *)v27 - v26);
          (&a2[i + 1])[v9 * *v10] = v27;
        }
      }
      ++v9;
    }
    while (v9 != v30);
  }
  result = 0;
  *(_QWORD *)(a1 + 16) = v28;
  return result;
}

unint64_t CCPOLYZP_PO2CYC_RANDOM_TERNARY_WORKSPACE_N(unint64_t a1)
{
  uint64_t v1;

  v1 = 1024;
  if (a1 < 0x400)
    v1 = a1;
  return ((unint64_t)(96 * v1 + 63) >> 6) + 6;
}

uint64_t ccpolyzp_po2cyc_random_ternary_ws(uint64_t a1, unsigned int **a2, uint64_t (**a3)(_QWORD, uint64_t, uint64_t))
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unsigned int v12;
  unint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t __dst;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C874D8];
  v6 = **a2;
  v7 = (*a2)[1];
  if (v6 >= 0x400)
    v8 = 1024;
  else
    v8 = v6;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, (96 * (unint64_t)v8 + 63) >> 6);
  cc_clear(0x10uLL, &__dst);
  v27 = 0u;
  v28 = 0u;
  v26 = 0u;
  result = ccrns_modulus_init_ws(a1, (unint64_t *)&v26, 3);
  if (!(_DWORD)result)
  {
    if (v6)
    {
      v12 = 0;
      while (1)
      {
        if (!(v12 % v8))
        {
          result = (*a3)(a3, 4 * (v8 + 2 * v8), v10);
          if ((_DWORD)result)
            break;
        }
        ccn_set(2, &__dst, (void *)(v10 + 12 * (v12 % v8)));
        v30 = v30;
        if ((_DWORD)v7)
        {
          v13 = 0;
          v14 = __CFADD__(((unint64_t)v27 * (unsigned __int128)__dst) >> 64, v27 * v30);
          v15 = __dst
              - (v14
               + __CFADD__(*((_QWORD *)&v27 + 1) * __dst, (__PAIR128__(v30, __dst) * (unint64_t)v27) >> 64)+ ((v27 * (unsigned __int128)v30) >> 64)+ ((*((unint64_t *)&v27 + 1) * (unsigned __int128)__dst) >> 64))* v26;
          if (v15 - (uint64_t)v26 >= 0)
            v16 = v15 - v26;
          else
            v16 = __dst
                - (v14
                 + __CFADD__(*((_QWORD *)&v27 + 1) * __dst, (__PAIR128__(v30, __dst) * (unint64_t)v27) >> 64)+ ((v27 * (unsigned __int128)v30) >> 64)+ ((*((unint64_t *)&v27 + 1) * (unsigned __int128)__dst) >> 64))* v26;
          v17 = *a2;
          v18 = **a2;
          v19 = (*a2)[1];
          v20 = v19 - 1;
          v21 = v16 - 1;
          v22 = v19 - 2;
          do
          {
            v23 = v17;
            if (v13 < v20)
            {
              v24 = v22;
              v23 = v17;
              do
                v23 = (unsigned int *)*((_QWORD *)v23 + 14);
              while (v13 < v24--);
            }
            (&a2[v12 + 1])[v18 * v13++] = (unsigned int *)((*((_QWORD *)v23 + 2) & (v21 >> 63)) + v21);
          }
          while (v13 != v7);
        }
        if (++v12 == v6)
          goto LABEL_23;
      }
    }
    else
    {
LABEL_23:
      result = 0;
      *(_QWORD *)(a1 + 16) = v9;
    }
  }
  return result;
}

unint64_t CCPOLYZP_PO2CYC_RANDOM_CBD_WORKSPACE_N(unint64_t a1)
{
  uint64_t v1;

  v1 = 1024;
  if (a1 < 0x400)
    v1 = a1;
  return (unint64_t)(48 * v1 + 63) >> 6;
}

uint64_t ccpolyzp_po2cyc_random_cbd_ws(uint64_t a1, unsigned int **a2, uint64_t (**a3)(_QWORD, uint64_t, const double *), int a4)
{
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const double *v12;
  unsigned int v13;
  const double *v14;
  unint64_t v15;
  int8x16_t v16;
  int64x2_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v27;

  if (a4)
    return 4294967289;
  v8 = **a2;
  v9 = (*a2)[1];
  if (v8 >= 0x400)
    v10 = 1024;
  else
    v10 = v8;
  v27 = *(_QWORD *)(a1 + 16);
  v11 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, (48 * (unint64_t)v10 + 63) >> 6);
  if (v8)
  {
    v12 = (const double *)v11;
    v13 = 0;
    v14 = (const double *)v11;
    while (1)
    {
      if (!(v13 % v10))
      {
        result = (*a3)(a3, 2 * (v10 + 2 * v10), v12);
        v14 = v12;
        if ((_DWORD)result)
          break;
      }
      if ((_DWORD)v9)
      {
        v15 = 0;
        v16 = (int8x16_t)vld1q_dup_f64(v14);
        v17 = (int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(vandq_s8(v16, (int8x16_t)xmmword_1DEE18860)))));
        v18 = *a2;
        v19 = **a2;
        v20 = (*a2)[1];
        v21 = v20 - 1;
        v22 = vsubq_s64(v17, vdupq_laneq_s64(v17, 1)).u64[0];
        v23 = v20 - 2;
        do
        {
          v24 = v18;
          if (v15 < v21)
          {
            v25 = v23;
            v24 = v18;
            do
              v24 = (unsigned int *)*((_QWORD *)v24 + 14);
            while (v15 < v25--);
          }
          (&a2[v13 + 1])[v19 * v15++] = (unsigned int *)((*((_QWORD *)v24 + 2) & (v22 >> 63)) + v22);
        }
        while (v15 != v9);
      }
      v14 = (const double *)((char *)v14 + 6);
      if (++v13 == v8)
        goto LABEL_18;
    }
  }
  else
  {
LABEL_18:
    result = 0;
    *(_QWORD *)(a1 + 16) = v27;
  }
  return result;
}

uint64_t ccss_shamir_init_share_poly(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_QWORD *)result = a2 + 2;
  *(_DWORD *)(result + 8) = v2 - 1;
  return result;
}

unint64_t ccecies_encrypt_gcm_ciphertext_size(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v11;
  unint64_t v12;
  char v14;

  v5 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v14 = v5;
  v11 = ccecies_pub_key_size_cp(*a1, a2);
  if (v11)
    v12 = v11 + a3 + *(unsigned int *)(a2 + 28);
  else
    v12 = 0;
  cc_disable_dit(&v14);
  return v12;
}

uint64_t sha1_compress(int *a1, uint64_t a2, unsigned int *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  unint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  unsigned int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  unint64_t v49;
  int v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  unint64_t v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  unint64_t v64;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  int v73;
  unint64_t v74;
  unsigned int v75;
  int v76;
  int v77;
  unsigned int v78;
  int v79;
  unint64_t v80;
  int v81;
  int v82;
  unsigned int v83;
  int v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  int v89;
  unint64_t v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  int v102;
  unint64_t v103;
  int v104;
  int v105;
  unsigned int v106;
  int v107;
  int v108;
  unint64_t v109;
  int v110;
  unsigned int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  unint64_t v117;
  int v118;
  unsigned int v119;
  int v120;
  int v121;
  int v122;
  unint64_t v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  unsigned int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  unsigned int v138;
  int v139;
  int v140;
  unint64_t v141;
  int v142;
  unsigned int v143;
  int v144;
  unint64_t v145;
  int v146;
  int v147;
  int v148;
  int v149;
  unsigned int v150;
  int v151;
  int v152;
  int v153;
  unint64_t v154;
  unsigned int v155;
  int v156;
  int v157;
  int v158;
  unint64_t v159;
  int v160;
  int v161;
  int v162;
  unint64_t v163;
  int v164;
  int v165;
  int v166;
  int v167;
  unsigned int v168;
  int v169;
  unint64_t v170;
  int v171;
  unsigned int v172;
  int v173;
  int v174;
  unint64_t v175;
  int v176;
  unsigned int v177;
  int v178;
  int v179;
  int v180;
  unint64_t v181;
  int v182;
  int v183;
  unsigned int v184;
  int v185;
  int v186;
  unint64_t v187;
  int v188;
  unsigned int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  unint64_t v195;
  int v196;
  unsigned int v197;
  int v198;
  int v199;
  unint64_t v200;
  int v201;
  unsigned int v202;
  int v203;
  int v204;
  unint64_t v205;
  int v206;
  int v207;
  unsigned int v208;
  int v209;
  int v210;
  unint64_t v211;
  int v212;
  unsigned int v213;
  int v214;
  int v215;
  int v216;
  unint64_t v217;
  int v218;
  int v219;
  unsigned int v220;
  int v221;
  int v222;
  unint64_t v223;
  int v224;
  unsigned int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  int v230;
  unint64_t v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  unint64_t v237;
  int v238;
  unsigned int v239;
  int v240;
  int v241;
  unint64_t v242;
  int v243;
  int v244;
  unsigned int v245;
  int v246;
  int v247;
  unint64_t v248;
  int v249;
  unsigned int v250;
  int v251;
  unint64_t v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  unint64_t v258;
  int v259;
  int v260;
  int v261;
  unint64_t v262;
  unsigned int v263;
  unint64_t v264;
  int v265;
  int v266;
  int v267;
  int v268;
  unint64_t v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  unint64_t v275;
  int v276;
  int v277;
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  unint64_t v283;
  int v284;
  int v285;
  int v286;
  int v287;
  unint64_t v288;
  int v289;
  int v290;
  unsigned int v291;
  int v292;
  int v293;
  unint64_t v294;
  int v295;
  int v296;
  int v297;
  int v298;
  int v299;
  unint64_t v300;
  int v301;
  int v302;
  int v303;
  int v304;
  unint64_t v305;
  unsigned int v306;
  unint64_t v307;
  int v308;
  int v309;
  int v310;
  unint64_t v311;
  int v312;
  int v313;
  int v314;
  int v315;
  int v316;
  int v317;
  unint64_t v318;
  int v319;
  int v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  unint64_t v327;
  int v328;
  int v329;
  int v330;
  int v331;
  unint64_t v332;
  int v333;
  int v334;
  int v335;
  unsigned int v336;
  int v337;
  int v338;
  unint64_t v339;
  int v340;
  int v341;
  int v342;
  int v343;
  int v344;
  unint64_t v345;
  int v346;
  int v347;
  int v348;
  unint64_t v349;
  unsigned int v350;
  unint64_t v351;
  int v352;
  int v353;
  int v354;
  unint64_t v355;
  int v356;
  int v357;
  int v358;
  int v359;
  int v360;
  unint64_t v361;
  int v362;
  int v363;
  int v364;
  int v365;
  int v366;
  int v367;
  int v368;
  unint64_t v369;
  int v370;
  int v371;
  int v372;
  int v373;
  unint64_t v374;
  int v375;
  int v376;
  int v377;
  unsigned int v378;
  int v379;
  int v380;
  unint64_t v381;
  int v382;
  int v383;
  int v384;
  int v385;
  unint64_t v386;
  int v387;
  int v388;
  int v389;
  unint64_t v390;
  int v391;
  int v392;
  int v393;
  unsigned int v394;
  int v395;
  int v396;
  unint64_t v397;
  unsigned int v398;
  int v399;
  int v400;
  int v401;
  int v402;
  unint64_t v403;
  int v404;
  unsigned int v405;
  int v406;
  int v407;
  int v408;
  unint64_t v409;
  int v410;
  unsigned int v411;
  int v412;
  unsigned int v413;
  int v414;
  int v415;
  unint64_t v416;
  unsigned int v417;
  int v418;
  int v419;
  int v420;
  unint64_t v421;
  int v422;
  int v423;
  int v424;
  unint64_t v425;
  int v426;
  int v427;
  int v428;
  int v429;
  unsigned int v430;
  int v431;
  int v432;
  int v433;
  unint64_t v434;
  int v435;
  unsigned int v436;
  int v437;
  int v438;
  int v439;
  unint64_t v440;
  int v441;
  int v442;
  unsigned int v443;
  int v444;
  int v445;
  int v446;
  unint64_t v447;
  int v448;
  unsigned int v449;
  int v450;
  int v451;
  int v452;
  unint64_t v453;
  int v454;
  int v455;
  unsigned int v456;
  int v457;
  int v458;
  int v459;
  unint64_t v460;
  int v461;
  int v462;
  int v463;
  unint64_t v464;
  int v465;
  int v466;
  int v467;
  int v468;
  unsigned int v469;
  int v470;
  int v471;
  int v472;
  unint64_t v473;
  int v474;
  unsigned int v475;
  int v476;
  int v477;
  int v478;
  unint64_t v479;
  int v480;
  int v481;
  unsigned int v482;
  int v483;
  int v484;
  int v485;
  unint64_t v486;
  int v487;
  unsigned int v488;
  int v489;
  int v490;
  int v491;
  int v492;
  unint64_t v493;
  unsigned int v494;
  int v495;
  int v496;
  int v497;
  unint64_t v498;
  int v499;
  unsigned int v500;
  uint64_t result;
  int v502;
  int v503;
  int v504;
  unint64_t v505;
  unsigned int v506;
  int v507;
  int v508;
  unint64_t v509;
  int v510;
  unsigned int v511;
  int v512;
  int v513;
  unint64_t v514;
  int v515;
  int v517;
  int v518;
  int v519;
  int v520;
  int v521;
  int v522;
  unsigned int v523;
  int v524;
  int v525;
  int v526;
  int v527;
  int v528;
  unsigned int v529;
  int v530;
  int v531;
  int v532;
  int v533;
  int v534;
  unsigned int v535;
  int v536;
  int v537;
  int v538;
  unsigned int v539;
  int v540;
  int v541;
  int v542;
  int v543;
  uint64_t v544;
  unsigned int *v545;
  int v546;
  int v547;
  int v548;

  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[1];
  v6 = a1[2];
  v7 = *a1;
  do
  {
    v547 = v3;
    v548 = v5;
    v546 = v6;
    v543 = v4;
    v544 = a2;
    v545 = a3;
    HIDWORD(v9) = v7;
    LODWORD(v9) = v7;
    v8 = v9 >> 27;
    v10 = v3 & ~v5;
    v11 = bswap32(*a3);
    v12 = v6 & v548;
    HIDWORD(v9) = v548;
    LODWORD(v9) = v548;
    v13 = v9 >> 2;
    v14 = v12 | v10;
    v15 = bswap32(a3[1]);
    v16 = v4 + 1518500249 + v8 + v14 + v11;
    HIDWORD(v9) = v16;
    LODWORD(v9) = v16;
    v17 = v9 >> 27;
    HIDWORD(v9) = v7;
    LODWORD(v9) = v7;
    v18 = v9 >> 2;
    v542 = v7;
    v19 = v16 & __ROR4__(v7, 2);
    v20 = v547 + 1518500249 + (v7 & __ROR4__(v548, 2) | v546 & ~v7) + v15 + v17;
    HIDWORD(v9) = v20;
    LODWORD(v9) = v20;
    v21 = v9 >> 27;
    HIDWORD(v9) = v16;
    LODWORD(v9) = v16;
    v22 = v9 >> 2;
    v23 = bswap32(a3[2]);
    v24 = bswap32(a3[3]);
    v26 = __PAIR64__(v20, __ROR4__(v16, 2));
    v25 = v20 & v26;
    LODWORD(v26) = v20;
    v27 = v26 >> 2;
    v28 = v546 + 1518500249 + v23 + (v19 | v13 & ~v16) + v21;
    HIDWORD(v26) = v28;
    LODWORD(v26) = v28;
    v29 = v26 >> 27;
    v31 = __PAIR64__(v28, __ROR4__(v20, 2));
    v30 = v28 & v31;
    v539 = bswap32(a3[4]);
    LODWORD(v31) = v28;
    v32 = v31 >> 2;
    v33 = v13 + 1518500249 + v24 + (v25 | v18 & ~v20) + v29;
    HIDWORD(v31) = v33;
    LODWORD(v31) = v33;
    v34 = v18 + 1518500249 + v539 + (v30 | v22 & ~v28) + (v31 >> 27);
    HIDWORD(v31) = v34;
    LODWORD(v31) = v34;
    v35 = v31 >> 27;
    v37 = __PAIR64__(v33, __ROR4__(v28, 2));
    v36 = v33 & v37;
    LODWORD(v37) = v33;
    v38 = v37 >> 2;
    v40 = __PAIR64__(v34, __ROR4__(v33, 2));
    v39 = v34 & v40;
    v41 = bswap32(a3[5]);
    v42 = v36 | v27 & ~v33;
    LODWORD(v40) = v34;
    v43 = v40 >> 2;
    v44 = v22 + 1518500249 + v41 + v42 + v35;
    HIDWORD(v40) = v44;
    LODWORD(v40) = v44;
    v45 = v40 >> 27;
    v529 = bswap32(a3[6]);
    HIDWORD(v40) = v44;
    LODWORD(v40) = v44;
    v46 = v40 >> 2;
    v47 = v27 + 1518500249 + v529 + (v39 | v32 & ~v34) + v45;
    HIDWORD(v40) = v47;
    LODWORD(v40) = v47;
    v48 = v40 >> 27;
    v49 = __PAIR64__(v47, __ROR4__(v34, 2));
    v535 = bswap32(a3[7]);
    v50 = v44 & v49 | v38 & ~v44;
    LODWORD(v49) = v47;
    v51 = v49 >> 2;
    v52 = v32 + 1518500249 + v535 + v50 + v48;
    HIDWORD(v49) = v52;
    LODWORD(v49) = v52;
    v53 = v49 >> 27;
    v55 = __PAIR64__(v52, __ROR4__(v47, 2));
    v54 = v52 & v55;
    LODWORD(v55) = v52;
    v56 = v55 >> 2;
    v57 = bswap32(a3[8]);
    v58 = v38 + 1518500249 + v57 + (v47 & __ROR4__(v44, 2) | v43 & ~v47) + v53;
    v59 = bswap32(a3[13]);
    HIDWORD(v55) = v58;
    LODWORD(v55) = v58;
    v60 = v55 >> 27;
    HIDWORD(v55) = v23 ^ v11 ^ v57 ^ v59;
    LODWORD(v55) = HIDWORD(v55);
    v61 = v55 >> 31;
    v62 = HIDWORD(v55);
    v517 = HIDWORD(v55);
    v64 = __PAIR64__(v58, __ROR4__(v52, 2));
    v63 = v58 & v64;
    v65 = bswap32(a3[9]);
    v66 = v54 | v46 & ~v52;
    LODWORD(v64) = v58;
    v67 = v64 >> 2;
    v68 = v43 + 1518500249 + v65 + v66 + v60;
    HIDWORD(v64) = v68;
    LODWORD(v64) = v68;
    v69 = v64 >> 27;
    v70 = bswap32(a3[10]);
    HIDWORD(v64) = v68;
    LODWORD(v64) = v68;
    v71 = v64 >> 2;
    v72 = v46 + 1518500249 + v70 + (v63 | v51 & ~v58) + v69;
    HIDWORD(v64) = v72;
    LODWORD(v64) = v72;
    v73 = v64 >> 27;
    v74 = __PAIR64__(v72, __ROR4__(v58, 2));
    v75 = bswap32(a3[11]);
    v76 = v68 & v74 | v56 & ~v68;
    LODWORD(v74) = v72;
    v77 = v74 >> 2;
    v78 = v51 + 1518500249 + v75 + v76 + v73;
    HIDWORD(v74) = v78;
    LODWORD(v74) = v78;
    v79 = v74 >> 27;
    v80 = __PAIR64__(v78, __ROR4__(v68, 2));
    v81 = v72 & v80 | v67 & ~v72;
    LODWORD(v80) = v78;
    v82 = v80 >> 2;
    v523 = bswap32(a3[12]);
    v83 = v56 + 1518500249 + v523 + v81 + v79;
    HIDWORD(v80) = v83;
    LODWORD(v80) = v83;
    v84 = v80 >> 27;
    v85 = v78 & __ROR4__(v72, 2);
    v86 = a3[15];
    v87 = bswap32(a3[14]);
    v88 = v71 & ~v78;
    v90 = __PAIR64__(v83, __ROR4__(v78, 2));
    v89 = v83 & v90;
    v91 = v67 + 1518500249 + v59 + (v85 | v88);
    LODWORD(v90) = v83;
    v92 = v90 >> 2;
    v93 = v91 + v84;
    v94 = v24 ^ v15 ^ v65 ^ v87;
    HIDWORD(v90) = v93;
    LODWORD(v90) = v93;
    v95 = v90 >> 27;
    HIDWORD(v90) = v94;
    LODWORD(v90) = v94;
    v96 = v94;
    v518 = v94;
    v526 = v90 >> 31;
    HIDWORD(v90) = v93;
    LODWORD(v90) = v93;
    v97 = v90 >> 2;
    v98 = v71 + 1518500249 + v87 + (v89 | v77 & ~v83) + v95;
    HIDWORD(v90) = v98;
    LODWORD(v90) = v98;
    v99 = v90 >> 27;
    v100 = bswap32(v86);
    v101 = v539 ^ v23 ^ v70 ^ v100;
    v103 = __PAIR64__(v101, __ROR4__(v93, 2));
    v102 = v98 & v103;
    LODWORD(v103) = v101;
    v520 = v103 >> 31;
    v104 = v93 & __ROR4__(v83, 2) | v82 & ~v93;
    HIDWORD(v103) = v98;
    LODWORD(v103) = v98;
    v105 = v103 >> 2;
    v106 = v77 + 1518500249 + v100 + v104 + v99;
    HIDWORD(v103) = v106;
    LODWORD(v103) = v106;
    v107 = v103 >> 27;
    v109 = __PAIR64__(v106, __ROR4__(v98, 2));
    v108 = v106 & v109;
    LODWORD(v109) = v106;
    v110 = v109 >> 2;
    v111 = v82 + v61 + 1518500249 + (v102 | v92 & ~v98) + v107;
    HIDWORD(v109) = v111;
    LODWORD(v109) = v111;
    v112 = v109 >> 27;
    LODWORD(v109) = v41 ^ v24 ^ v75 ^ __ROR4__(v62, 31);
    v113 = v109;
    HIDWORD(v109) = v109;
    v114 = v109 >> 31;
    v115 = v111 & __ROR4__(v106, 2);
    v117 = __PAIR64__(v111, __ROR4__(v96, 31));
    v116 = v529 ^ v539 ^ v523 ^ v117;
    LODWORD(v117) = v111;
    v118 = v117 >> 2;
    v119 = v92 + v526 + 1518500249 + (v108 | v97 & ~v106) + v112;
    HIDWORD(v117) = v119;
    LODWORD(v117) = v119;
    v120 = v117 >> 27;
    HIDWORD(v117) = v116;
    LODWORD(v117) = v116;
    v532 = v117 >> 31;
    v121 = v535 ^ v41 ^ v59 ^ __ROR4__(v101, 31);
    v123 = __PAIR64__(v119, __ROR4__(v111, 2));
    v122 = v119 & v123;
    LODWORD(v123) = v119;
    v124 = v123 >> 2;
    v125 = v97 + v520 + 1518500249 + (v115 | v105 & ~v111) + v120;
    v126 = v122 | v110 & ~v119;
    HIDWORD(v123) = v125;
    LODWORD(v123) = v125;
    v127 = v123 >> 27;
    HIDWORD(v123) = v121;
    LODWORD(v123) = v121;
    v519 = v123 >> 31;
    v128 = v114 + 1518500249 + v105;
    HIDWORD(v123) = v125;
    LODWORD(v123) = v125;
    v129 = v123 >> 2;
    v130 = v128 + v126 + v127;
    HIDWORD(v123) = v130;
    LODWORD(v123) = v130;
    v131 = v123 >> 27;
    v132 = v57;
    v133 = v57 ^ v529 ^ v87;
    HIDWORD(v123) = v130;
    LODWORD(v123) = v130;
    v134 = v123 >> 2;
    LODWORD(v123) = v133 ^ __ROR4__(v113, 31);
    v135 = v123;
    HIDWORD(v123) = v123;
    v136 = v123 >> 31;
    v137 = v134 ^ __ROR4__(v125, 2);
    v138 = v532 + 1859775393 + v110 + (v124 ^ __ROR4__(v111, 2) ^ v125) + v131;
    HIDWORD(v123) = v138;
    LODWORD(v123) = v138;
    v139 = v123 >> 27;
    v141 = __PAIR64__(v138, __ROR4__(v116, 31));
    v140 = v65 ^ v535 ^ v100 ^ v141;
    LODWORD(v141) = v138;
    v142 = v141 >> 2;
    v143 = v519 + 1859775393 + v118 + (v129 ^ __ROR4__(v119, 2) ^ v130) + v139;
    HIDWORD(v141) = v140;
    LODWORD(v141) = v140;
    v536 = v141 >> 31;
    v145 = __PAIR64__(v143, __ROR4__(v130, 2));
    v144 = v142 ^ v145;
    v146 = v136 + 1859775393 + v124 + (v137 ^ v138);
    LODWORD(v145) = v143;
    v147 = v145 >> 27;
    HIDWORD(v145) = v143;
    LODWORD(v145) = v143;
    v148 = v145 >> 2;
    v150 = v146 + v147;
    LODWORD(v145) = v70 ^ v132 ^ __ROR4__(v517, 31) ^ __ROR4__(v121, 31);
    v149 = v145;
    HIDWORD(v145) = v145;
    v521 = v145 >> 31;
    v151 = v536 + 1859775393 + v129 + (v144 ^ v143);
    HIDWORD(v145) = v150;
    LODWORD(v145) = v150;
    v152 = v145 >> 27;
    v154 = __PAIR64__(v150, __ROR4__(v138, 2));
    v153 = v148 ^ v154;
    v155 = v151 + v152;
    v156 = v521 + 1859775393 + v134;
    LODWORD(v154) = v150;
    v157 = v154 >> 2;
    v159 = __PAIR64__(v155, __ROR4__(v518, 31));
    v158 = v75 ^ v65 ^ v159;
    LODWORD(v159) = v155;
    v160 = v156 + (v153 ^ v150) + (v159 >> 27);
    LODWORD(v159) = v158 ^ __ROR4__(v135, 31);
    v161 = v159;
    HIDWORD(v159) = v159;
    v162 = v159 >> 31;
    v163 = __PAIR64__(v155, __ROR4__(v143, 2));
    v164 = v157 ^ v163 ^ v155;
    v165 = v162 + 1859775393 + v142;
    LODWORD(v163) = v155;
    v166 = v163 >> 2;
    LODWORD(v163) = v523 ^ v70 ^ __ROR4__(v101, 31) ^ __ROR4__(v140, 31);
    v167 = v163;
    HIDWORD(v163) = v163;
    v540 = v163 >> 31;
    HIDWORD(v163) = v160;
    LODWORD(v163) = v160;
    v168 = v165 + v164 + (v163 >> 27);
    v170 = __PAIR64__(v168, __ROR4__(v150, 2));
    v169 = v166 ^ v170;
    LODWORD(v170) = v168;
    v172 = v540 + 1859775393 + v148 + (v169 ^ v160) + (v170 >> 27);
    LODWORD(v170) = v59 ^ v75 ^ __ROR4__(v113, 31) ^ __ROR4__(v149, 31);
    v171 = v170;
    HIDWORD(v170) = v170;
    v173 = v170 >> 31;
    HIDWORD(v170) = v160;
    LODWORD(v170) = v160;
    v174 = v170 >> 2;
    v175 = __PAIR64__(v172, __ROR4__(v155, 2));
    v176 = v173 + 1859775393 + v157 + (v174 ^ v175 ^ v168);
    LODWORD(v175) = v172;
    v177 = v176 + (v175 >> 27);
    LODWORD(v175) = v87 ^ v523 ^ __ROR4__(v116, 31) ^ __ROR4__(v161, 31);
    v178 = v175;
    HIDWORD(v175) = v175;
    v179 = (v175 >> 31) + 1859775393 + v166;
    HIDWORD(v175) = v168;
    LODWORD(v175) = v168;
    v180 = v175 >> 2;
    v181 = __PAIR64__(v177, __ROR4__(v160, 2));
    v182 = v179 + (v180 ^ v181 ^ v172);
    LODWORD(v181) = v177;
    v183 = v100 ^ v59 ^ __ROR4__(v121, 31) ^ __ROR4__(v167, 31);
    v184 = v182 + (v181 >> 27);
    HIDWORD(v181) = v183;
    LODWORD(v181) = v183;
    v530 = v181 >> 31;
    v185 = v530 + 1859775393 + v174;
    HIDWORD(v181) = v172;
    LODWORD(v181) = v172;
    v186 = v181 >> 2;
    v187 = __PAIR64__(v184, __ROR4__(v168, 2));
    v188 = v185 + (v186 ^ v187 ^ v177);
    LODWORD(v187) = v184;
    v189 = v188 + (v187 >> 27);
    v190 = v87 ^ __ROR4__(v517, 31) ^ __ROR4__(v135, 31) ^ __ROR4__(v171, 31);
    HIDWORD(v187) = v190;
    LODWORD(v187) = v190;
    v191 = v187 >> 31;
    HIDWORD(v187) = v177;
    LODWORD(v187) = v177;
    v192 = v187 >> 2;
    v193 = v191 + 1859775393 + v180 + (v192 ^ __ROR4__(v172, 2) ^ v184);
    v195 = __PAIR64__(v189, __ROR4__(v518, 31));
    v194 = v100 ^ v195;
    LODWORD(v195) = v189;
    v196 = v194 ^ __ROR4__(v140, 31) ^ __ROR4__(v178, 31);
    v197 = v193 + (v195 >> 27);
    HIDWORD(v195) = v196;
    LODWORD(v195) = v196;
    v198 = (v195 >> 31) + 1859775393 + v186;
    HIDWORD(v195) = v184;
    LODWORD(v195) = v184;
    v199 = v195 >> 2;
    v200 = __PAIR64__(v197, __ROR4__(v177, 2));
    v201 = v198 + (v199 ^ v200 ^ v189);
    LODWORD(v200) = v197;
    v202 = v201 + (v200 >> 27);
    LODWORD(v200) = v520 ^ __ROR4__(v517, 31) ^ __ROR4__(v149, 31) ^ __ROR4__(v183, 31);
    v203 = v200;
    HIDWORD(v200) = v200;
    v524 = v200 >> 31;
    HIDWORD(v200) = v189;
    LODWORD(v200) = v189;
    v204 = v200 >> 2;
    v205 = __PAIR64__(v202, __ROR4__(v184, 2));
    v206 = v524 + 1859775393 + v192 + (v204 ^ v205 ^ v197);
    LODWORD(v205) = v202;
    v207 = v526 ^ __ROR4__(v113, 31) ^ __ROR4__(v161, 31) ^ __ROR4__(v190, 31);
    v208 = v206 + (v205 >> 27);
    HIDWORD(v205) = v207;
    LODWORD(v205) = v207;
    v209 = v205 >> 31;
    HIDWORD(v205) = v197;
    LODWORD(v205) = v197;
    v210 = v205 >> 2;
    v211 = __PAIR64__(v208, __ROR4__(v189, 2));
    v212 = v209 + 1859775393 + v199 + (v210 ^ v211 ^ v202);
    LODWORD(v211) = v208;
    v213 = v212 + (v211 >> 27);
    LODWORD(v211) = v520 ^ __ROR4__(v116, 31) ^ __ROR4__(v167, 31) ^ __ROR4__(v196, 31);
    v214 = v211;
    HIDWORD(v211) = v211;
    v215 = (v211 >> 31) + 1859775393 + v204;
    HIDWORD(v211) = v202;
    LODWORD(v211) = v202;
    v216 = v211 >> 2;
    v217 = __PAIR64__(v213, __ROR4__(v197, 2));
    v218 = v215 + (v216 ^ v217 ^ v208);
    LODWORD(v217) = v213;
    v219 = v519 ^ __ROR4__(v113, 31) ^ __ROR4__(v171, 31) ^ __ROR4__(v203, 31);
    v220 = v218 + (v217 >> 27);
    HIDWORD(v217) = v219;
    LODWORD(v217) = v219;
    v527 = v217 >> 31;
    v221 = v527 + 1859775393 + v210;
    HIDWORD(v217) = v208;
    LODWORD(v217) = v208;
    v222 = v217 >> 2;
    v223 = __PAIR64__(v220, __ROR4__(v202, 2));
    v224 = v221 + (v222 ^ v223 ^ v213);
    LODWORD(v223) = v220;
    v225 = v224 + (v223 >> 27);
    v226 = v532 ^ __ROR4__(v135, 31) ^ __ROR4__(v178, 31) ^ __ROR4__(v207, 31);
    HIDWORD(v223) = v226;
    LODWORD(v223) = v226;
    v227 = v223 >> 31;
    HIDWORD(v223) = v213;
    LODWORD(v223) = v213;
    v228 = v223 >> 2;
    v229 = v227 + 1859775393 + v216 + (v228 ^ __ROR4__(v208, 2) ^ v220);
    v231 = __PAIR64__(v225, __ROR4__(v140, 31));
    v230 = v519 ^ v231;
    LODWORD(v231) = v225;
    v232 = v231 >> 27;
    v234 = v229 + v232;
    LODWORD(v231) = v230 ^ __ROR4__(v183, 31) ^ __ROR4__(v214, 31);
    v233 = v231;
    HIDWORD(v231) = v231;
    v235 = (v231 >> 31) + 1859775393 + v222;
    HIDWORD(v231) = v220;
    LODWORD(v231) = v220;
    v236 = v231 >> 2;
    v237 = __PAIR64__(v229 + v232, __ROR4__(v213, 2));
    v238 = v235 + (v236 ^ v237 ^ v225);
    LODWORD(v237) = v229 + v232;
    v239 = v238 + (v237 >> 27);
    LODWORD(v237) = v521 ^ __ROR4__(v135, 31) ^ __ROR4__(v190, 31) ^ __ROR4__(v219, 31);
    v240 = v237;
    HIDWORD(v237) = v237;
    v533 = v237 >> 31;
    HIDWORD(v237) = v225;
    LODWORD(v237) = v225;
    v241 = v237 >> 2;
    v242 = __PAIR64__(v239, __ROR4__(v220, 2));
    v243 = v533 + 1859775393 + v228 + (v241 ^ v242 ^ v234);
    LODWORD(v242) = v239;
    v245 = v243 + (v242 >> 27);
    LODWORD(v242) = v536 ^ __ROR4__(v161, 31) ^ __ROR4__(v196, 31) ^ __ROR4__(v226, 31);
    v244 = v242;
    HIDWORD(v242) = v242;
    v246 = v242 >> 31;
    HIDWORD(v242) = v234;
    LODWORD(v242) = v234;
    v247 = v242 >> 2;
    v248 = __PAIR64__(v245, __ROR4__(v225, 2));
    v249 = v246 + 1859775393 + v236 + (v247 ^ v248 ^ v239);
    LODWORD(v248) = v245;
    v250 = v249 + (v248 >> 27);
    v251 = v521 ^ __ROR4__(v167, 31) ^ __ROR4__(v203, 31) ^ __ROR4__(v233, 31);
    v252 = __PAIR64__(v251, __ROR4__(v239, 2));
    v253 = (v245 | __ROR4__(v239, 2)) & __ROR4__(v234, 2) | v245 & v252;
    LODWORD(v252) = v251;
    v254 = (v252 >> 31) - 1894007588;
    HIDWORD(v252) = v239;
    LODWORD(v252) = v239;
    v255 = v252 >> 2;
    v256 = v254 + v241;
    v258 = __PAIR64__(v250, __ROR4__(v207, 31));
    v257 = v173 ^ __ROR4__(v161, 31) ^ v258;
    LODWORD(v258) = v250;
    v259 = v258 >> 27;
    v260 = v257 ^ __ROR4__(v240, 31);
    v262 = __PAIR64__(v260, __ROR4__(v239, 2));
    v261 = (v250 | __ROR4__(v245, 2)) & v262;
    LODWORD(v262) = v260;
    v537 = v262 >> 31;
    v263 = v256 + v253 + v259;
    v264 = __PAIR64__(v263, __ROR4__(v245, 2));
    v265 = v261 | v250 & v264;
    LODWORD(v264) = v263;
    v266 = v537 - 1894007588 + v247 + v265;
    v267 = v540 ^ __ROR4__(v178, 31) ^ __ROR4__(v214, 31) ^ __ROR4__(v244, 31);
    v268 = v266 + (v264 >> 27);
    v269 = __PAIR64__(v267, __ROR4__(v245, 2));
    v270 = (v263 | __ROR4__(v250, 2)) & v269 | v263 & __ROR4__(v250, 2);
    LODWORD(v269) = v267;
    v271 = v269 >> 31;
    HIDWORD(v269) = v245;
    LODWORD(v269) = v245;
    v272 = v269 >> 2;
    HIDWORD(v269) = v268;
    LODWORD(v269) = v268;
    v273 = v271 - 1894007588 + v255 + v270 + (v269 >> 27);
    v274 = v173 ^ __ROR4__(v183, 31) ^ __ROR4__(v219, 31) ^ __ROR4__(v251, 31);
    v275 = __PAIR64__(v274, __ROR4__(v250, 2));
    v276 = (v268 | __ROR4__(v263, 2)) & v275 | v268 & __ROR4__(v263, 2);
    LODWORD(v275) = v274;
    v277 = v275 >> 31;
    HIDWORD(v275) = v250;
    LODWORD(v275) = v250;
    v278 = v275 >> 2;
    v279 = v277 - 1894007588 + v272;
    HIDWORD(v275) = v273;
    LODWORD(v275) = v273;
    v280 = v275 >> 27;
    LODWORD(v275) = v191 ^ __ROR4__(v178, 31) ^ __ROR4__(v226, 31) ^ __ROR4__(v260, 31);
    v281 = v275;
    HIDWORD(v275) = v275;
    v541 = v275 >> 31;
    v282 = v279 + v276 + v280;
    v283 = __PAIR64__(v263, __ROR4__(v263, 2));
    v284 = (v273 | __ROR4__(v268, 2)) & v283 | v273 & __ROR4__(v268, 2);
    LODWORD(v283) = v263;
    v285 = v283 >> 2;
    HIDWORD(v283) = v282;
    LODWORD(v283) = v282;
    v286 = v541 - 1894007588 + v278 + v284 + (v283 >> 27);
    v287 = v530 ^ __ROR4__(v196, 31) ^ __ROR4__(v233, 31) ^ __ROR4__(v267, 31);
    v288 = __PAIR64__(v287, __ROR4__(v268, 2));
    v289 = (v282 | __ROR4__(v273, 2)) & v288 | v282 & __ROR4__(v273, 2);
    LODWORD(v288) = v287;
    v522 = v288 >> 31;
    HIDWORD(v288) = v268;
    LODWORD(v288) = v268;
    v290 = v288 >> 2;
    HIDWORD(v288) = v286;
    LODWORD(v288) = v286;
    v291 = v522 - 1894007588 + v285 + v289 + (v288 >> 27);
    HIDWORD(v288) = v273;
    LODWORD(v288) = v273;
    v292 = v288 >> 2;
    v293 = v191 ^ __ROR4__(v203, 31) ^ __ROR4__(v240, 31) ^ __ROR4__(v274, 31);
    v294 = __PAIR64__(v293, __ROR4__(v282, 2));
    v295 = (v286 | __ROR4__(v282, 2)) & __ROR4__(v273, 2) | v286 & v294;
    LODWORD(v294) = v293;
    v296 = (v294 >> 31) - 1894007588;
    HIDWORD(v294) = v282;
    LODWORD(v294) = v282;
    v297 = v294 >> 2;
    v298 = v296 + v290;
    v300 = __PAIR64__(v291, __ROR4__(v244, 31));
    v299 = v209 ^ __ROR4__(v196, 31) ^ v300;
    LODWORD(v300) = v291;
    v301 = v300 >> 27;
    v302 = v298 + v295;
    v303 = v299 ^ __ROR4__(v281, 31);
    v305 = __PAIR64__(v303, __ROR4__(v282, 2));
    v304 = (v291 | __ROR4__(v286, 2)) & v305;
    LODWORD(v305) = v303;
    v531 = v305 >> 31;
    v306 = v302 + v301;
    v307 = __PAIR64__(v302 + v301, __ROR4__(v286, 2));
    v308 = v304 | v291 & v307;
    LODWORD(v307) = v306;
    v309 = v524 ^ __ROR4__(v214, 31) ^ __ROR4__(v251, 31) ^ __ROR4__(v287, 31);
    v310 = v531 - 1894007588 + v292 + v308 + (v307 >> 27);
    v311 = __PAIR64__(v309, __ROR4__(v286, 2));
    v312 = (v306 | __ROR4__(v291, 2)) & v311 | v306 & __ROR4__(v291, 2);
    LODWORD(v311) = v309;
    v313 = v311 >> 31;
    v314 = v313 - 1894007588 + v297;
    HIDWORD(v311) = v286;
    LODWORD(v311) = v286;
    v315 = v311 >> 2;
    HIDWORD(v311) = v310;
    LODWORD(v311) = v310;
    v316 = v314 + v312 + (v311 >> 27);
    v317 = v209 ^ __ROR4__(v219, 31) ^ __ROR4__(v260, 31) ^ __ROR4__(v293, 31);
    v318 = __PAIR64__(v317, __ROR4__(v291, 2));
    v319 = (v310 | __ROR4__(v306, 2)) & v318 | v310 & __ROR4__(v306, 2);
    LODWORD(v318) = v317;
    v320 = v318 >> 31;
    HIDWORD(v318) = v291;
    LODWORD(v318) = v291;
    v321 = v318 >> 2;
    v322 = v320 - 1894007588 + v315;
    HIDWORD(v318) = v316;
    LODWORD(v318) = v316;
    v323 = v318 >> 27;
    v324 = v227;
    LODWORD(v318) = v227 ^ __ROR4__(v214, 31) ^ __ROR4__(v267, 31) ^ __ROR4__(v303, 31);
    v325 = v318;
    HIDWORD(v318) = v318;
    v525 = v318 >> 31;
    v326 = v322 + v319 + v323;
    v327 = __PAIR64__(v306, __ROR4__(v306, 2));
    v328 = (v316 | __ROR4__(v310, 2)) & v327 | v316 & __ROR4__(v310, 2);
    LODWORD(v327) = v306;
    v329 = v327 >> 2;
    HIDWORD(v327) = v326;
    LODWORD(v327) = v326;
    v330 = v525 - 1894007588 + v321 + v328 + (v327 >> 27);
    v331 = v527 ^ __ROR4__(v233, 31) ^ __ROR4__(v274, 31) ^ __ROR4__(v309, 31);
    v332 = __PAIR64__(v331, __ROR4__(v310, 2));
    v333 = (v326 | __ROR4__(v316, 2)) & v332 | v326 & __ROR4__(v316, 2);
    LODWORD(v332) = v331;
    v334 = v332 >> 31;
    HIDWORD(v332) = v310;
    LODWORD(v332) = v310;
    v335 = v332 >> 2;
    HIDWORD(v332) = v330;
    LODWORD(v332) = v330;
    v336 = v334 - 1894007588 + v329 + v333 + (v332 >> 27);
    HIDWORD(v332) = v316;
    LODWORD(v332) = v316;
    v337 = v332 >> 2;
    v338 = v324 ^ __ROR4__(v240, 31) ^ __ROR4__(v281, 31) ^ __ROR4__(v317, 31);
    v339 = __PAIR64__(v338, __ROR4__(v326, 2));
    v340 = (v330 | __ROR4__(v326, 2)) & __ROR4__(v316, 2) | v330 & v339;
    LODWORD(v339) = v338;
    v341 = (v339 >> 31) - 1894007588;
    HIDWORD(v339) = v326;
    LODWORD(v339) = v326;
    v342 = v339 >> 2;
    v343 = v341 + v335;
    v345 = __PAIR64__(v336, __ROR4__(v287, 31));
    v344 = v246 ^ __ROR4__(v233, 31) ^ v345;
    LODWORD(v345) = v336;
    v346 = v345 >> 27;
    v347 = v344 ^ __ROR4__(v325, 31);
    v349 = __PAIR64__(v347, __ROR4__(v326, 2));
    v348 = (v336 | __ROR4__(v330, 2)) & v349;
    LODWORD(v349) = v347;
    v528 = v349 >> 31;
    v350 = v343 + v340 + v346;
    v351 = __PAIR64__(v350, __ROR4__(v330, 2));
    v352 = v348 | v336 & v351;
    LODWORD(v351) = v350;
    v353 = v533 ^ __ROR4__(v251, 31) ^ __ROR4__(v293, 31) ^ __ROR4__(v331, 31);
    v354 = v528 - 1894007588 + v337 + v352 + (v351 >> 27);
    v355 = __PAIR64__(v353, __ROR4__(v330, 2));
    v356 = (v350 | __ROR4__(v336, 2)) & v355 | v350 & __ROR4__(v336, 2);
    LODWORD(v355) = v353;
    v357 = v355 >> 31;
    HIDWORD(v355) = v330;
    LODWORD(v355) = v330;
    v358 = v355 >> 2;
    HIDWORD(v355) = v354;
    LODWORD(v355) = v354;
    v359 = v357 - 1894007588 + v342 + v356 + (v355 >> 27);
    v360 = v246 ^ __ROR4__(v260, 31) ^ __ROR4__(v303, 31) ^ __ROR4__(v338, 31);
    v361 = __PAIR64__(v360, __ROR4__(v336, 2));
    v362 = (v354 | __ROR4__(v350, 2)) & v361 | v354 & __ROR4__(v350, 2);
    LODWORD(v361) = v360;
    v363 = v361 >> 31;
    HIDWORD(v361) = v336;
    LODWORD(v361) = v336;
    v364 = v361 >> 2;
    v365 = v363 - 1894007588 + v358;
    HIDWORD(v361) = v359;
    LODWORD(v361) = v359;
    v366 = v361 >> 27;
    LODWORD(v361) = v271 ^ __ROR4__(v251, 31) ^ __ROR4__(v309, 31) ^ __ROR4__(v347, 31);
    v367 = v361;
    HIDWORD(v361) = v361;
    v534 = v361 >> 31;
    v368 = v365 + v362 + v366;
    v369 = __PAIR64__(v350, __ROR4__(v350, 2));
    v370 = (v359 | __ROR4__(v354, 2)) & v369 | v359 & __ROR4__(v354, 2);
    LODWORD(v369) = v350;
    v371 = v369 >> 2;
    HIDWORD(v369) = v368;
    LODWORD(v369) = v368;
    v372 = v534 - 1894007588 + v364 + v370 + (v369 >> 27);
    v373 = v537 ^ __ROR4__(v274, 31) ^ __ROR4__(v317, 31) ^ __ROR4__(v353, 31);
    v374 = __PAIR64__(v373, __ROR4__(v354, 2));
    v375 = (v368 | __ROR4__(v359, 2)) & v374 | v368 & __ROR4__(v359, 2);
    LODWORD(v374) = v373;
    v376 = v374 >> 31;
    HIDWORD(v374) = v354;
    LODWORD(v374) = v354;
    v377 = v374 >> 2;
    HIDWORD(v374) = v372;
    LODWORD(v374) = v372;
    v378 = v376 - 1894007588 + v371 + v375 + (v374 >> 27);
    HIDWORD(v374) = v359;
    LODWORD(v374) = v359;
    v379 = v374 >> 2;
    v380 = v271 ^ __ROR4__(v281, 31) ^ __ROR4__(v325, 31) ^ __ROR4__(v360, 31);
    v381 = __PAIR64__(v380, __ROR4__(v368, 2));
    v382 = (v372 | __ROR4__(v368, 2)) & __ROR4__(v359, 2) | v372 & v381;
    LODWORD(v381) = v380;
    v383 = (v381 >> 31) - 1894007588;
    HIDWORD(v381) = v368;
    LODWORD(v381) = v368;
    v384 = v381 >> 2;
    v386 = __PAIR64__(v378, __ROR4__(v331, 31));
    v385 = v522 ^ __ROR4__(v274, 31) ^ v386;
    LODWORD(v386) = v378;
    v387 = v386 >> 27;
    v388 = v385 ^ __ROR4__(v367, 31);
    v390 = __PAIR64__(v388, __ROR4__(v368, 2));
    v389 = (v378 | __ROR4__(v372, 2)) & v390;
    LODWORD(v390) = v388;
    v538 = v390 >> 31;
    v391 = v383 + v377 + v382 + v387;
    LODWORD(v390) = v541 ^ __ROR4__(v293, 31) ^ __ROR4__(v338, 31) ^ __ROR4__(v373, 31);
    v392 = v390;
    HIDWORD(v390) = v390;
    v393 = v390 >> 31;
    HIDWORD(v390) = v391;
    LODWORD(v390) = v391;
    v394 = v538 - 1894007588 + v379 + (v389 | v378 & __ROR4__(v372, 2)) + (v390 >> 27);
    HIDWORD(v390) = v378;
    LODWORD(v390) = v378;
    v395 = v390 >> 2;
    v397 = __PAIR64__(v394, __ROR4__(v303, 31));
    v396 = v522 ^ v397;
    LODWORD(v397) = v394;
    v398 = v393 - 899497514 + v384 + (v395 ^ __ROR4__(v372, 2) ^ v391) + (v397 >> 27);
    v399 = v396 ^ __ROR4__(v347, 31) ^ __ROR4__(v380, 31);
    HIDWORD(v397) = v399;
    LODWORD(v397) = v399;
    v400 = v397 >> 31;
    HIDWORD(v397) = v372;
    LODWORD(v397) = v372;
    v401 = v400 - 899497514 + (v397 >> 2);
    HIDWORD(v397) = v391;
    LODWORD(v397) = v391;
    v402 = v397 >> 2;
    v403 = __PAIR64__(v398, __ROR4__(v378, 2));
    v404 = v401 + (v402 ^ v403 ^ v394);
    LODWORD(v403) = v398;
    v405 = v404 + (v403 >> 27);
    LODWORD(v403) = v313 ^ __ROR4__(v293, 31) ^ __ROR4__(v353, 31) ^ __ROR4__(v388, 31);
    v406 = v403;
    HIDWORD(v403) = v403;
    v407 = v403 >> 31;
    HIDWORD(v403) = v394;
    LODWORD(v403) = v394;
    v408 = v403 >> 2;
    v409 = __PAIR64__(v405, __ROR4__(v391, 2));
    v410 = v407 - 899497514 + v395 + (v408 ^ v409 ^ v398);
    LODWORD(v409) = v405;
    v411 = v410 + (v409 >> 27);
    LODWORD(v409) = v531 ^ __ROR4__(v317, 31) ^ __ROR4__(v360, 31) ^ __ROR4__(v392, 31);
    v412 = v409;
    HIDWORD(v409) = v409;
    v413 = v409 >> 31;
    HIDWORD(v409) = v398;
    LODWORD(v409) = v398;
    v414 = v409 >> 2;
    v416 = __PAIR64__(v411, __ROR4__(v325, 31));
    v415 = v313 ^ v416;
    LODWORD(v416) = v411;
    v417 = v413 - 899497514 + v402 + (v414 ^ __ROR4__(v394, 2) ^ v405) + (v416 >> 27);
    v418 = v415 ^ __ROR4__(v367, 31) ^ __ROR4__(v399, 31);
    HIDWORD(v416) = v418;
    LODWORD(v416) = v418;
    v419 = (v416 >> 31) - 899497514;
    HIDWORD(v416) = v405;
    LODWORD(v416) = v405;
    v420 = v416 >> 2;
    v421 = __PAIR64__(v417, __ROR4__(v398, 2));
    v422 = v419 + v408 + (v420 ^ v421 ^ v411);
    LODWORD(v421) = v417;
    v423 = v421 >> 27;
    v425 = __PAIR64__(v411, __ROR4__(v373, 31));
    v424 = v334 ^ __ROR4__(v317, 31) ^ v425;
    LODWORD(v425) = v411;
    v426 = v425 >> 2;
    v428 = v422 + v423;
    LODWORD(v425) = v424 ^ __ROR4__(v406, 31);
    v427 = v425;
    HIDWORD(v425) = v425;
    v429 = (v425 >> 31) - 899497514 + v414;
    HIDWORD(v425) = v428;
    LODWORD(v425) = v428;
    v430 = v429 + (v426 ^ __ROR4__(v405, 2) ^ v417) + (v425 >> 27);
    v431 = v525 ^ __ROR4__(v338, 31) ^ __ROR4__(v380, 31) ^ __ROR4__(v412, 31);
    HIDWORD(v425) = v431;
    LODWORD(v425) = v431;
    v432 = (v425 >> 31) - 899497514;
    HIDWORD(v425) = v417;
    LODWORD(v425) = v417;
    v433 = v425 >> 2;
    v434 = __PAIR64__(v430, __ROR4__(v411, 2));
    v435 = v432 + v420 + (v433 ^ v434 ^ v428);
    LODWORD(v434) = v430;
    v436 = v435 + (v434 >> 27);
    v437 = v334 ^ __ROR4__(v347, 31) ^ __ROR4__(v388, 31) ^ __ROR4__(v418, 31);
    HIDWORD(v434) = v437;
    LODWORD(v434) = v437;
    v438 = (v434 >> 31) - 899497514 + v426;
    HIDWORD(v434) = v428;
    LODWORD(v434) = v428;
    v439 = v434 >> 2;
    v440 = __PAIR64__(v436, __ROR4__(v417, 2));
    v441 = v438 + (v439 ^ v440 ^ v430);
    LODWORD(v440) = v436;
    v442 = v357 ^ __ROR4__(v338, 31) ^ __ROR4__(v392, 31);
    v443 = v441 + (v440 >> 27);
    LODWORD(v440) = v442 ^ __ROR4__(v427, 31);
    v444 = v440;
    HIDWORD(v440) = v440;
    v445 = (v440 >> 31) - 899497514;
    HIDWORD(v440) = v430;
    LODWORD(v440) = v430;
    v446 = v440 >> 2;
    v447 = __PAIR64__(v443, __ROR4__(v428, 2));
    v448 = v445 + v433 + (v446 ^ v447 ^ v436);
    LODWORD(v447) = v443;
    v449 = v448 + (v447 >> 27);
    LODWORD(v447) = v528 ^ __ROR4__(v360, 31) ^ __ROR4__(v399, 31) ^ __ROR4__(v431, 31);
    v450 = v447;
    HIDWORD(v447) = v447;
    v451 = (v447 >> 31) - 899497514 + v439;
    HIDWORD(v447) = v436;
    LODWORD(v447) = v436;
    v452 = v447 >> 2;
    v453 = __PAIR64__(v449, __ROR4__(v430, 2));
    v454 = v451 + (v452 ^ v453 ^ v443);
    LODWORD(v453) = v449;
    v455 = v357 ^ __ROR4__(v367, 31) ^ __ROR4__(v406, 31);
    v456 = v454 + (v453 >> 27);
    LODWORD(v453) = v455 ^ __ROR4__(v437, 31);
    v457 = v453;
    HIDWORD(v453) = v453;
    v458 = (v453 >> 31) - 899497514;
    HIDWORD(v453) = v443;
    LODWORD(v453) = v443;
    v459 = v453 >> 2;
    v460 = __PAIR64__(v456, __ROR4__(v436, 2));
    v461 = v458 + v446 + (v459 ^ v460 ^ v449);
    LODWORD(v460) = v456;
    v462 = v460 >> 27;
    v464 = __PAIR64__(v449, __ROR4__(v412, 31));
    v463 = v376 ^ __ROR4__(v360, 31) ^ v464;
    LODWORD(v464) = v449;
    v465 = v464 >> 2;
    v466 = v463 ^ __ROR4__(v444, 31);
    v467 = v461 + v462;
    HIDWORD(v464) = v466;
    LODWORD(v464) = v466;
    v468 = (v464 >> 31) - 899497514 + v452;
    HIDWORD(v464) = v467;
    LODWORD(v464) = v467;
    v469 = v468 + (v465 ^ __ROR4__(v443, 2) ^ v456) + (v464 >> 27);
    LODWORD(v464) = v534 ^ __ROR4__(v380, 31) ^ __ROR4__(v418, 31) ^ __ROR4__(v450, 31);
    v470 = v464;
    HIDWORD(v464) = v464;
    v471 = (v464 >> 31) - 899497514;
    HIDWORD(v464) = v456;
    LODWORD(v464) = v456;
    v472 = v464 >> 2;
    v473 = __PAIR64__(v469, __ROR4__(v449, 2));
    v474 = v471 + v459 + (v472 ^ v473 ^ v467);
    LODWORD(v473) = v469;
    v475 = v474 + (v473 >> 27);
    v476 = v376 ^ __ROR4__(v388, 31) ^ __ROR4__(v427, 31) ^ __ROR4__(v457, 31);
    HIDWORD(v473) = v476;
    LODWORD(v473) = v476;
    v477 = (v473 >> 31) - 899497514 + v465;
    HIDWORD(v473) = v467;
    LODWORD(v473) = v467;
    v478 = v473 >> 2;
    v479 = __PAIR64__(v475, __ROR4__(v456, 2));
    v480 = v477 + (v478 ^ v479 ^ v469);
    LODWORD(v479) = v475;
    v481 = v393 ^ __ROR4__(v380, 31) ^ __ROR4__(v431, 31);
    v482 = v480 + (v479 >> 27);
    v483 = v481 ^ __ROR4__(v466, 31);
    HIDWORD(v479) = v483;
    LODWORD(v479) = v483;
    v484 = (v479 >> 31) - 899497514;
    HIDWORD(v479) = v469;
    LODWORD(v479) = v469;
    v485 = v479 >> 2;
    v486 = __PAIR64__(v482, __ROR4__(v467, 2));
    v487 = v484 + v472 + (v485 ^ v486 ^ v475);
    LODWORD(v486) = v482;
    v488 = v487 + (v486 >> 27);
    v489 = v538 ^ __ROR4__(v399, 31) ^ __ROR4__(v437, 31) ^ __ROR4__(v470, 31);
    HIDWORD(v486) = v489;
    LODWORD(v486) = v489;
    v490 = (v486 >> 31) - 899497514 + v478;
    HIDWORD(v486) = v475;
    LODWORD(v486) = v475;
    v491 = v486 >> 2;
    v493 = __PAIR64__(v488, __ROR4__(v444, 31));
    v492 = v393 ^ __ROR4__(v406, 31) ^ v493;
    LODWORD(v493) = v488;
    v494 = v490 + (v491 ^ __ROR4__(v469, 2) ^ v482) + (v493 >> 27);
    v495 = v492 ^ __ROR4__(v476, 31);
    HIDWORD(v493) = v495;
    LODWORD(v493) = v495;
    v496 = (v493 >> 31) - 899497514;
    HIDWORD(v493) = v482;
    LODWORD(v493) = v482;
    v497 = v493 >> 2;
    v498 = __PAIR64__(v494, __ROR4__(v475, 2));
    v499 = v496 + v485 + (v497 ^ v498 ^ v488);
    LODWORD(v498) = v494;
    v500 = v499 + (v498 >> 27);
    result = v413 ^ __ROR4__(v399, 31);
    LODWORD(v498) = result ^ __ROR4__(v450, 31) ^ __ROR4__(v483, 31);
    HIDWORD(v498) = v498;
    v502 = (v498 >> 31) - 899497514 + v491;
    HIDWORD(v498) = v488;
    LODWORD(v498) = v488;
    v503 = v498 >> 2;
    v505 = __PAIR64__(v500, __ROR4__(v457, 31));
    v504 = v407 ^ __ROR4__(v418, 31) ^ v505;
    LODWORD(v505) = v500;
    v506 = v502 + (v503 ^ __ROR4__(v482, 2) ^ v494) + (v505 >> 27);
    LODWORD(v505) = v504 ^ __ROR4__(v489, 31);
    HIDWORD(v505) = v505;
    v507 = (v505 >> 31) - 899497514;
    HIDWORD(v505) = v494;
    LODWORD(v505) = v494;
    v508 = v505 >> 2;
    v509 = __PAIR64__(v506, __ROR4__(v488, 2));
    v510 = v507 + v497 + (v508 ^ v509 ^ v500);
    LODWORD(v509) = v506;
    v511 = v510 + (v509 >> 27);
    LODWORD(v509) = v413 ^ __ROR4__(v427, 31) ^ __ROR4__(v466, 31) ^ __ROR4__(v495, 31);
    HIDWORD(v509) = v509;
    v512 = v542 - 899497514 + (v509 >> 31) + v503;
    HIDWORD(v509) = v500;
    LODWORD(v509) = v500;
    v513 = v509 >> 2;
    v514 = __PAIR64__(v511, __ROR4__(v494, 2));
    v515 = v512 + (v513 ^ v514 ^ v506);
    v5 = v511 + v548;
    LODWORD(v514) = v511;
    v7 = v515 + (v514 >> 27);
    HIDWORD(v514) = v506;
    LODWORD(v514) = v506;
    v6 = (v514 >> 2) + v546;
    v4 = v508 + v543;
    v3 = v513 + v547;
    *a1 = v7;
    a1[1] = v511 + v548;
    a1[2] = v6;
    a1[3] = v513 + v547;
    a1[4] = v4;
    a3 = v545 + 16;
    a2 = v544 - 1;
  }
  while (v544 != 1);
  return result;
}

_BYTE *ccmode_factory_xts_encrypt(int64x2_t *a1, _QWORD *a2, uint64_t a3)
{
  char v3;
  uint64_t v9;
  int64x2_t v10;
  char v12;

  v3 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v12 = v3;
  v9 = a2[1];
  v10.i64[0] = 2 * *a2;
  v10.i64[1] = v9;
  *a1 = vaddq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v10, (int64x2_t)xmmword_1DEE18870), (int8x16_t)xmmword_1DEE18880), (int64x2_t)xmmword_1DEE18890);
  a1[1].i64[0] = v9;
  a1[1].i64[1] = (uint64_t)ccmode_xts_init;
  a1[2].i64[0] = (uint64_t)ccmode_xts_key_sched;
  a1[2].i64[1] = (uint64_t)ccmode_xts_set_tweak;
  a1[3].i64[0] = (uint64_t)ccmode_xts_crypt;
  a1[3].i64[1] = (uint64_t)a2;
  a1[4].i64[0] = a3;
  a1[4].i64[1] = 21;
  return cc_disable_dit(&v12);
}

void *ccsigma_mfi_info()
{
  char v0;
  char v7;

  v0 = 0;
  v7 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v0 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v0 = 1;
    }
  }
  v7 = v0;
  mfi_info_init((uint64_t)&mfi_info);
  cc_disable_dit(&v7);
  return &mfi_info;
}

double mfi_info_init(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  double result;

  v2 = ccec_cp_256();
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = mfi_kex_ctx;
  *(_QWORD *)(a1 + 16) = mfi_peer_kex_ctx;
  v3 = ((unint64_t)(cczp_bitlen(v2) + 7) >> 2) & 0x3FFFFFFFFFFFFFFELL;
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = ccsha256_di();
  *(_QWORD *)(a1 + 40) = v3;
  *(_QWORD *)(a1 + 48) = mfi_sign_ctx;
  *(_QWORD *)(a1 + 56) = mfi_peer_sign_ctx;
  *(_QWORD *)(a1 + 64) = 14;
  *(_QWORD *)(a1 + 72) = &mfi_session_keys_info;
  *(_QWORD *)(a1 + 80) = 200;
  *(_QWORD *)(a1 + 88) = mfi_session_keys_buffer;
  *(_QWORD *)(a1 + 96) = mfi_session_keys_derive;
  *(_QWORD *)(a1 + 104) = 16;
  *(_QWORD *)(a1 + 112) = mfi_mac_compute;
  *(_QWORD *)&result = 9;
  *(_OWORD *)(a1 + 120) = xmmword_1DEE188B0;
  *(_QWORD *)(a1 + 136) = mfi_sigma_compute_mac_and_digest;
  *(_QWORD *)(a1 + 144) = 16;
  *(_QWORD *)(a1 + 152) = mfi_aead_seal;
  *(_QWORD *)(a1 + 160) = mfi_aead_open;
  *(_QWORD *)(a1 + 168) = mfi_aead_next_iv;
  *(_QWORD *)(a1 + 176) = mfi_clear;
  return result;
}

void *ccsigma_mfi_nvm_info()
{
  char v0;
  char v7;

  v0 = 0;
  v7 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v0 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v0 = 1;
    }
  }
  v7 = v0;
  mfi_info_init((uint64_t)&mfi_nvm_info);
  qword_1F044DAA8 = (uint64_t)&mfi_nvm_session_keys_info;
  unk_1F044DAB0 = 144;
  cc_disable_dit(&v7);
  return &mfi_nvm_info;
}

uint64_t mfi_kex_ctx(uint64_t a1)
{
  return a1 + 32;
}

uint64_t mfi_peer_kex_ctx(uint64_t a1)
{
  return a1 + 176;
}

uint64_t mfi_sign_ctx(uint64_t a1)
{
  return a1 + 288;
}

uint64_t mfi_peer_sign_ctx(uint64_t a1)
{
  return a1 + 432;
}

uint64_t mfi_session_keys_buffer(uint64_t a1)
{
  return a1 + 544;
}

uint64_t mfi_session_keys_derive(uint64_t **a1, unint64_t a2, char *a3, size_t a4, const void *a5)
{
  uint64_t *v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  uint64_t inited;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  size_t v22;
  const void *v23;
  rsize_t v24;
  char *v25;
  _BYTE v26[16];
  _BYTE v27[256];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C874D8];
  v10 = *a1;
  v11 = ccec_compressed_x962_export_pub_size(**a1);
  v12 = a4 + 2 * v11 + v10[28];
  if (v12 > 0x100)
    return 4294967289;
  v13 = v11;
  v14 = ccaes_cbc_encrypt_mode();
  result = cccmac_one_shot_generate(v14, v10[24], v10[23], a2, a3, 0x10uLL, v26);
  if (!(_DWORD)result)
  {
    v16 = v10[28];
    __memcpy_chk();
    v17 = &v27[v16];
    inited = ccsigma_kex_init_ctx((uint64_t)a1);
    result = ccec_compressed_x962_export_pub(inited, v17);
    if (!(_DWORD)result)
    {
      v19 = &v17[v13];
      v20 = ccsigma_kex_resp_ctx((uint64_t)a1);
      result = ccec_compressed_x962_export_pub(v20, v19);
      if (!(_DWORD)result)
      {
        memcpy(&v19[v13], a5, a4);
        v21 = ccaes_cbc_encrypt_mode();
        v23 = (const void *)v10[25];
        v22 = v10[26];
        v24 = v10[10];
        v25 = (char *)((uint64_t (*)(uint64_t **))v10[11])(a1);
        return ccnistkdf_ctr_cmac(v21, 0x20u, 16, (uint64_t)v26, v22, v23, v12, v27, v24, 4uLL, v25);
      }
    }
  }
  return result;
}

uint64_t mfi_mac_compute(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char *a5, void *a6)
{
  _QWORD *v12;

  v12 = ccaes_cbc_encrypt_mode();
  return cccmac_one_shot_generate(v12, a2, a3, a4, a5, *(_QWORD *)(*(_QWORD *)a1 + 104), a6);
}

uint64_t mfi_sigma_compute_mac_and_digest(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  size_t v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t result;
  _BYTE v19[7];
  char v20[16];
  char __src[33];
  uint64_t v22;

  v8 = a2;
  v22 = *MEMORY[0x1E0C874D8];
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 32);
  MEMORY[0x1E0C86820](a1, a2, a3, a4);
  v13 = &v19[-v12];
  ccdigest_init(v11, &v19[-v12]);
  ccdigest_update(v11, v13, *(_QWORD *)(v10 + 240), *(char **)(v10 + 232));
  v14 = ccec_compressed_x962_export_pub_size(*(_QWORD *)v10);
  if (v14 > 0x21)
    return 4294967291;
  v15 = v14;
  inited = ccsigma_kex_init_ctx((uint64_t)a1);
  ccec_compressed_x962_export_pub(inited, __src);
  ccdigest_update(v11, v13, v15, __src);
  v17 = ccsigma_kex_resp_ctx((uint64_t)a1);
  ccec_compressed_x962_export_pub(v17, __src);
  ccdigest_update(v11, v13, v15, __src);
  result = ccsigma_compute_mac(a1, *(_QWORD *)(v10 + 8 * v8 + 120), a3, a4, (uint64_t)v20);
  if (!(_DWORD)result)
  {
    ccdigest_update(v11, v13, *(_QWORD *)(v10 + 104), v20);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v11 + 56))(v11, v13, a5);
    return 0;
  }
  return result;
}

uint64_t mfi_aead_seal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t *v18;

  v18 = ccaes_ccm_encrypt_mode();
  return ccccm_one_shot((uint64_t)v18, a2, a3, a4, a5, a8, a9, a10, a6, a7, *(_QWORD *)(*(_QWORD *)a1 + 144), a11);
}

uint64_t mfi_aead_open(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char *a11)
{
  unint64_t v11;
  uint64_t *v20;
  uint64_t result;
  char v22[16];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C874D8];
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 144);
  if (v11 > 0x10)
    return 4294967291;
  v20 = ccaes_ccm_decrypt_mode();
  result = ccccm_one_shot((uint64_t)v20, a2, a3, a4, a5, a8, a9, a10, a6, a7, v11, (uint64_t)v22);
  if (!(_DWORD)result)
  {
    if (cc_cmp_safe(*(_QWORD *)(*(_QWORD *)a1 + 144), a11, v22))
      return 4294967294;
    else
      return 0;
  }
  return result;
}

uint64_t mfi_aead_next_iv(unint64_t a1, uint64_t a2)
{
  return inc_uint(a2, a1);
}

uint64_t mfi_clear(void *__s)
{
  return cc_clear(0x2F0uLL, __s);
}

uint64_t ccnistkdf_ctr_cmac_fixed(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char *a6, rsize_t a7, char *a8)
{
  char *v8;
  unsigned int v12;
  char v13;
  rsize_t v19;
  rsize_t v20;
  rsize_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  size_t v36;
  size_t v37;
  _QWORD *v38;
  uint64_t v40;
  unint64_t v41;
  rsize_t v42;
  rsize_t v43;
  uint64_t *v44;
  _QWORD *v45;
  char v46;
  _BYTE __src[64];
  uint64_t v48;

  v8 = a8;
  v12 = a2;
  v13 = 0;
  v48 = *MEMORY[0x1E0C874D8];
  v46 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v13 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v13 = 1;
    }
  }
  v46 = v13;
  if (a7)
  {
    v19 = a1[1];
    v20 = a7 / v19;
    if (a7 % v19)
      v21 = v20 + 1;
    else
      v21 = a7 / v19;
    HIDWORD(v22) = a2;
    LODWORD(v22) = ((_DWORD)a2 << 24) - 0x8000000;
    v23 = 4294967289;
    if ((v22 >> 27) <= 3u && !(v21 >> a2) && a3 && a4 && a8)
    {
      v42 = v21;
      v43 = a7 % v19;
      v44 = &v40;
      v24 = (v19 + *a1 + 159) / 0x50;
      v25 = MEMORY[0x1E0C86820](a1, a2, a3, a4);
      v27 = &v40 - 2 * v26;
      v31 = (_QWORD *)MEMORY[0x1E0C86820](v25, v28, v29, v30);
      v33 = &v40 - 2 * v32;
      v45 = v31;
      cccmac_init(v31, (uint64_t)v27, v34, v35);
      v41 = v24;
      if (v19 <= a7)
      {
        v36 = 80 * v24;
        LODWORD(v24) = 1;
        do
        {
          memcpy(v33, v27, v36);
          PRF_EVAL((char *)v33, v12, v24, a5, a6, v8);
          v24 = (v24 + 1);
          v8 += v19;
        }
        while (v20 >= v24);
      }
      v37 = v43;
      if (v43)
      {
        memcpy(v33, v27, 80 * v41);
        PRF_EVAL((char *)v33, v12, v42, a5, a6, __src);
        memcpy(v8, __src, v37);
      }
      cc_clear(v19, __src);
      v38 = v45;
      cc_clear(v38[1] + *v38 + 80, v27);
      cc_clear(v38[1] + *v38 + 80, v33);
      v23 = 0;
    }
  }
  else
  {
    v23 = 4294967289;
  }
  cc_disable_dit(&v46);
  return v23;
}

uint64_t PRF_EVAL(char *a1, unsigned int a2, int a3, unint64_t a4, char *a5, void *a6)
{
  unint64_t __src;

  __src = HIBYTE(a3);
  BYTE1(__src) = BYTE2(a3);
  BYTE2(__src) = BYTE1(a3);
  BYTE3(__src) = a3;
  __src >>= 8 * (4 - (a2 >> 3));
  cccmac_update(a1, a2 >> 3, (char *)&__src);
  cccmac_update(a1, a4, a5);
  return cccmac_final_generate(a1, *(_QWORD *)(*((_QWORD *)a1 + 8) + 8), a6);
}

uint64_t ccnistkdf_ctr_cmac(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, size_t a5, const void *a6, size_t a7, const void *a8, rsize_t a9, size_t a10, char *a11)
{
  char v18;
  size_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  unsigned int v31;
  uint64_t v32;
  _QWORD v34[4];
  void (*v35)(uint64_t);
  char v36;
  unsigned int __src;

  v18 = 0;
  v36 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v18 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v18 = 1;
    }
  }
  v36 = v18;
  v24 = a5 + a7 + a10;
  v34[0] = cc_malloc_clear((v24 + 8) & 0xFFFFFFFFFFFFFFF8);
  v34[1] = (v24 + 8) >> 3;
  v34[2] = 0;
  v34[3] = cc_ws_alloc;
  v35 = cc_ws_free;
  if (v34[0])
  {
    v31 = a2;
    v32 = a3;
    v25 = (char *)cc_ws_alloc(v34, (v24 + 8) >> 3);
    v26 = 4294967289;
    if (a10 <= 4 && !((8 * a9) >> (8 * a10)))
    {
      v27 = v25;
      v28 = v24 + 1;
      if (a5 && a6)
        memcpy(v25, a6, a5);
      v29 = &v27[a5];
      v27[a5] = 0;
      if (a7 && a8)
        memcpy(v29 + 1, a8, a7);
      __src = bswap32(8 * a9) >> (-8 * a10);
      memcpy(&v29[a7 + 1], &__src, a10);
      v26 = ccnistkdf_ctr_cmac_fixed(a1, v31, v32, a4, v28, v27, a9, a11);
    }
    v35((uint64_t)v34);
  }
  else
  {
    v26 = 4294967283;
  }
  cc_disable_dit(&v36);
  return v26;
}

uint64_t cche_param_ctx_supports_simd_encoding(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *((unsigned __int8 *)cche_param_ctx_plaintext_ctx(a1) + 8);
  cc_disable_dit(&v9);
  return v7;
}

uint64_t cche_encode_poly_uint64(unsigned int **a1, uint64_t a2, unsigned int a3, unint64_t *a4)
{
  char v8;
  unsigned int *v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int **v22;
  uint64_t v23;
  char v25;

  v8 = 0;
  v25 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v25 = v8;
  v14 = cche_param_ctx_plaintext_ctx(a2);
  *a1 = v14;
  v15 = *v14;
  if (*v14 < a3)
  {
LABEL_15:
    v23 = 4294967289;
    goto LABEL_14;
  }
  v16 = cche_param_ctx_plaintext_modulus(a2);
  if (a3)
  {
    v17 = (unint64_t *)(a1 + 1);
    v18 = a3;
    do
    {
      v20 = *a4++;
      v19 = v20;
      if (v20 >= v16)
        goto LABEL_15;
      *v17++ = v19;
    }
    while (--v18);
  }
  if (v15 > a3)
  {
    v21 = a3;
    v22 = &a1[a3 + 1];
    do
    {
      ccn_seti(1, v22, 0);
      ++v21;
      ++v22;
    }
    while (v21 < **a1);
  }
  v23 = 0;
LABEL_14:
  cc_disable_dit(&v25);
  return v23;
}

uint64_t cche_encode_simd_uint64(unsigned int **a1, uint64_t a2, unsigned int a3, unsigned int **a4)
{
  char v8;
  unsigned int *v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v31;

  v8 = 0;
  v31 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v31 = v8;
  v14 = cche_param_ctx_plaintext_ctx(a2);
  *a1 = v14;
  if (*v14 < a3)
  {
LABEL_17:
    v29 = 4294967289;
    goto LABEL_18;
  }
  v15 = cche_param_ctx_plaintext_modulus(a2);
  v16 = cche_param_ctx_plaintext_ctx(a2);
  v17 = cche_param_ctx_polynomial_degree(a2);
  v18 = (unint64_t)(sizeof_struct_ccpolyzp_po2cyc_ctx() + 7) >> 3;
  if (v17 >= 0x80)
    v19 = 128;
  else
    v19 = v17;
  v20 = ((unint64_t)(sizeof_struct_ccrns_mul_modulus() + 7) >> 3) * v19 + v17;
  if (a3)
  {
    v21 = &v16[4 * v20 + 12 + 2 * v18];
    v22 = a3;
    do
    {
      v23 = *v21++;
      a1[v23 + 1] = *a4;
      v24 = (unint64_t)*a4++;
      if (v24 >= v15)
        goto LABEL_17;
    }
    while (--v22);
  }
  if (**a1 > a3)
  {
    v25 = a3;
    v26 = &v16[4 * v20 + 2 * v18];
    v27 = v25 + 12;
    do
    {
      ccn_seti(1, &a1[v26[v27] + 1], 0);
      v28 = v27 - 11;
      ++v27;
    }
    while (v28 < **a1);
  }
  v29 = ccpolyzp_po2cyc_inv_ntt(a1);
LABEL_18:
  cc_disable_dit(&v31);
  return v29;
}

uint64_t cche_encode_simd_int64(unsigned int **a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  char v8;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v30;
  unsigned int *v31;
  char v32;

  v8 = 0;
  v32 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v32 = v8;
  v14 = cche_param_ctx_plaintext_ctx(a2);
  *a1 = v14;
  if (*v14 < a3)
  {
LABEL_21:
    v28 = 4294967289;
    goto LABEL_20;
  }
  v15 = *((_QWORD *)v14 + 2);
  v31 = cche_param_ctx_plaintext_ctx(a2);
  v16 = cche_param_ctx_polynomial_degree(a2);
  v30 = (unint64_t)(sizeof_struct_ccpolyzp_po2cyc_ctx() + 7) >> 3;
  if (v16 >= 0x80)
    v17 = 128;
  else
    v17 = v16;
  v18 = ((unint64_t)(sizeof_struct_ccrns_mul_modulus() + 7) >> 3) * v17 + v16;
  if (a3)
  {
    v19 = &v31[4 * v18 + 12 + 2 * v30];
    v20 = a3;
    do
    {
      v22 = *a4++;
      v21 = v22;
      if (v22 > (v15 - 1) >> 1 || v21 < -(v15 >> 1))
        goto LABEL_21;
      v24 = ccpolyzp_po2cyc_centered_to_rem(v21, v15);
      v25 = *v19++;
      a1[v25 + 1] = (unsigned int *)v24;
    }
    while (--v20);
  }
  if (**a1 > a3)
  {
    v26 = a3 + 12;
    do
    {
      ccn_seti(1, &a1[v31[4 * v18 + 2 * v30 + v26] + 1], 0);
      v27 = v26 - 11;
      ++v26;
    }
    while (v27 < **a1);
  }
  v28 = ccpolyzp_po2cyc_inv_ntt(a1);
LABEL_20:
  cc_disable_dit(&v32);
  return v28;
}

uint64_t cche_encode_simd_reduced_int64(unsigned int **a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  char v8;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v34;

  v8 = 0;
  v34 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v34 = v8;
  v14 = cche_param_ctx_plaintext_ctx(a2);
  *a1 = v14;
  if (*v14 < a3)
  {
LABEL_21:
    v32 = 4294967289;
    goto LABEL_20;
  }
  v15 = cche_param_ctx_plaintext_ctx(a2);
  v16 = v15[1];
  while (--v16)
    v15 = (unsigned int *)*((_QWORD *)v15 + 14);
  v17 = cche_param_ctx_plaintext_ctx(a2);
  v18 = cche_param_ctx_polynomial_degree(a2);
  v19 = (unint64_t)(sizeof_struct_ccpolyzp_po2cyc_ctx() + 7) >> 3;
  if (v18 >= 0x80)
    v20 = 128;
  else
    v20 = v18;
  v21 = ((unint64_t)(sizeof_struct_ccrns_mul_modulus() + 7) >> 3) * v20 + v18;
  if (a3)
  {
    v22 = (unint64_t *)(v15 + 4);
    v23 = &v17[4 * v21 + 12 + 2 * v19];
    v24 = a3;
    do
    {
      v25 = *a4++;
      v26 = ccpolyzp_po2cyc_int_to_rem(v25, v22);
      if (v26 > *v22)
        goto LABEL_21;
      v27 = *v23++;
      a1[v27 + 1] = (unsigned int *)v26;
    }
    while (--v24);
  }
  if (**a1 > a3)
  {
    v28 = a3;
    v29 = &v17[4 * v21 + 2 * v19];
    v30 = v28 + 12;
    do
    {
      ccn_seti(1, &a1[v29[v30] + 1], 0);
      v31 = v30 - 11;
      ++v30;
    }
    while (v31 < **a1);
  }
  v32 = ccpolyzp_po2cyc_inv_ntt(a1);
LABEL_20:
  cc_disable_dit(&v34);
  return v32;
}

uint64_t cche_decode_poly_uint64(unsigned int a1, uint64_t a2, _QWORD *a3)
{
  char v3;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;

  v3 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v15 = v3;
  if (*(_DWORD *)*a3 < a1)
  {
    v13 = 4294967289;
  }
  else if (a1)
  {
    v9 = *(_QWORD *)(*a3 + 16);
    v10 = a3[1];
    if (v10 >= v9)
    {
      v13 = 0xFFFFFFFFLL;
    }
    else
    {
      v11 = 0;
      do
      {
        v12 = v11;
        *(_QWORD *)(a2 + 8 * v11) = v10;
        if (a1 - 1 == v11)
          break;
        v10 = a3[v11++ + 2];
      }
      while (v10 < v9);
      if (v12 + 1 >= (unint64_t)a1)
        v13 = 0;
      else
        v13 = 0xFFFFFFFFLL;
    }
  }
  else
  {
    v13 = 0;
  }
  cc_disable_dit(&v15);
  return v13;
}

uint64_t cche_decode_simd_uint64_ws(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t *a4, unsigned int **a5)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, unint64_t);
  uint64_t v14;
  void *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;

  v5 = *a5;
  v6 = **a5;
  if (v6 < a3)
    return 4294967289;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(uint64_t (**)(uint64_t, unint64_t))(a1 + 24);
  v14 = sizeof_struct_ccpolyzp_po2cyc();
  v15 = (void *)v13(a1, v5[1] * v6 + ((unint64_t)(v14 + 7) >> 3));
  v16 = *a5;
  v17 = sizeof_struct_ccpolyzp_po2cyc();
  memmove(v15, a5, (v17 + 8 * v16[1] * *v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  result = ccpolyzp_po2cyc_fwd_ntt((unsigned int **)v15);
  if (!(_DWORD)result)
  {
    v19 = *((_QWORD *)*a5 + 2);
    v20 = cche_param_ctx_plaintext_ctx(a2);
    v21 = cche_param_ctx_polynomial_degree(a2);
    v22 = sizeof_struct_ccpolyzp_po2cyc_ctx();
    if (v21 >= 0x80)
      v23 = 128;
    else
      v23 = v21;
    v24 = sizeof_struct_ccrns_mul_modulus();
    if (a3)
    {
      v25 = &v20[4 * ((unint64_t)(v24 + 7) >> 3) * v23 + 12 + 4 * v21 + 2 * ((unint64_t)(v22 + 7) >> 3)];
      v26 = a3;
      while (1)
      {
        v27 = *v25++;
        v28 = *((_QWORD *)v15 + v27 + 1);
        if (v28 >= v19)
          break;
        *a4++ = v28;
        if (!--v26)
          goto LABEL_10;
      }
      result = 0xFFFFFFFFLL;
    }
    else
    {
LABEL_10:
      result = 0;
    }
  }
  *(_QWORD *)(a1 + 16) = v12;
  return result;
}

uint64_t cche_decode_simd_uint64(uint64_t a1, unsigned int a2, unint64_t *a3, unsigned int **a4)
{
  char v8;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD v21[4];
  void (*v22)(uint64_t);
  char v23;

  v8 = 0;
  v23 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v23 = v8;
  v14 = *a4;
  v15 = **a4;
  v16 = (*a4)[1];
  v17 = sizeof_struct_ccpolyzp_po2cyc();
  v21[0] = cc_malloc_clear((v17 + 8 * v16 * v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  v18 = *v14;
  LODWORD(v14) = v14[1];
  v21[1] = v14 * v18 + ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3);
  v21[2] = 0;
  v21[3] = cc_ws_alloc;
  v22 = cc_ws_free;
  if (v21[0])
  {
    v19 = cche_decode_simd_uint64_ws((uint64_t)v21, a1, a2, a3, a4);
    v22((uint64_t)v21);
  }
  else
  {
    v19 = 4294967283;
  }
  cc_disable_dit(&v23);
  return v19;
}

uint64_t cche_decode_simd_int64_ws(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t *a4, unsigned int **a5)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;

  v6 = (uint64_t *)a4;
  LODWORD(v7) = a3;
  result = cche_decode_simd_uint64_ws(a1, a2, a3, a4, a5);
  if (!(_DWORD)result)
  {
    if ((_DWORD)v7)
    {
      v9 = *((_QWORD *)*a5 + 2);
      v7 = v7;
      while (1)
      {
        v10 = ccpolyzp_po2cyc_rem_to_centered(*v6, v9);
        if (v10 > (v9 - 1) >> 1 || v10 < -(v9 >> 1))
          break;
        *v6++ = v10;
        if (!--v7)
          return 0;
      }
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t cche_decode_simd_int64(uint64_t a1, unsigned int a2, unint64_t *a3, unsigned int **a4)
{
  char v8;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD v21[4];
  void (*v22)(uint64_t);
  char v23;

  v8 = 0;
  v23 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v23 = v8;
  v14 = *a4;
  v15 = **a4;
  v16 = (*a4)[1];
  v17 = sizeof_struct_ccpolyzp_po2cyc();
  v21[0] = cc_malloc_clear((v17 + 8 * v16 * v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  v18 = *v14;
  LODWORD(v14) = v14[1];
  v21[1] = v14 * v18 + ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3);
  v21[2] = 0;
  v21[3] = cc_ws_alloc;
  v22 = cc_ws_free;
  if (v21[0])
  {
    v19 = cche_decode_simd_int64_ws((uint64_t)v21, a1, a2, a3, a4);
    v22((uint64_t)v21);
  }
  else
  {
    v19 = 4294967283;
  }
  cc_disable_dit(&v23);
  return v19;
}

uint64_t cche_dcrt_plaintext_encode_ws(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned int v13;
  char v14;
  unsigned int **v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v21[2];

  v21[1] = *MEMORY[0x1E0C874D8];
  v4 = *(unsigned int **)(a4 + 8);
  v5 = *v4;
  v6 = v4[1];
  *a2 = v4;
  if ((_DWORD)v6)
  {
    v8 = 0;
    v17 = (uint64_t *)(a3 + 8);
    v18 = a4 + 32;
    v16 = a2 + 1;
    v9 = (unint64_t *)(a4 + 24);
    do
    {
      if (v5)
      {
        v10 = (uint64_t *)(v18 + 8 * *(unsigned int *)(*(_QWORD *)(a4 + 8) + 4) + 8 * v8);
        v11 = v17;
        v12 = (uint64_t *)&v16[**a2 * v8];
        v13 = v5;
        do
        {
          v14 = ccn_sub_ws(a1, 1, v21, v11, v9);
          ccn_add_ws(a1, 1, v21, v11, v10);
          ccn_mux(1, v14, v12++, v11++, v21);
          --v13;
        }
        while (v13);
      }
      ++v8;
    }
    while (v8 != v6);
  }
  return ccpolyzp_po2cyc_fwd_ntt(a2);
}

uint64_t cche_dcrt_plaintext_encode(unsigned int **a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  char v8;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[4];
  void (*v29)(uint64_t);
  char v30;

  v8 = 0;
  v30 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v30 = v8;
  if (cche_param_ctx_ciphertext_ctx_nmoduli(a3) < a4)
  {
    v26 = 4294967289;
  }
  else
  {
    v14 = *cche_param_ctx_plaintext_ctx(a3);
    v15 = cche_param_ctx_plaintext_ctx(a3);
    v16 = cche_param_ctx_polynomial_degree(a3);
    v17 = sizeof_struct_ccpolyzp_po2cyc_ctx() + 7;
    if (v16 >= 0x80)
      v18 = 128;
    else
      v18 = v16;
    v19 = ((unint64_t)(sizeof_struct_ccrns_mul_modulus() + 7) >> 3) * v18 + v16;
    v20 = (4 * v14 + 7) & 0x7FFFFFFF8;
    v21 = cche_param_ctx_chain_const(a3);
    v22 = cche_decrypt_ctx_nof_n((unsigned int *)(v21 + 8));
    v23 = v22;
    if (a4 < 2)
    {
      v25 = (uint64_t)&v15[4 * v19 + 12 + 2 * (v17 >> 3) + 2 * v22] + v20;
    }
    else
    {
      v24 = sizeof_struct_cche_cipher_plain_ctx();
      v25 = (uint64_t)&v15[4 * (((a4 - 3) * (unint64_t)(a4 - 2)) >> 1) + 16 + 4 * v19 + 2 * v23]
          + v20
          + (v17 & 0xFFFFFFFFFFFFFFF8)
          + ((v24 + 7) & 0xFFFFFFFFFFFFFFF8)
          + (((v24 + 7) & 0xFFFFFFFFFFFFFFF8) + 32) * (a4 - 2);
    }
    v28[0] = cc_malloc_clear(0);
    v28[1] = 0;
    v28[2] = 0;
    v28[3] = cc_ws_alloc;
    v29 = cc_ws_free;
    if (v28[0])
    {
      v26 = cche_dcrt_plaintext_encode_ws((uint64_t)v28, a1, a2, v25);
      v29((uint64_t)v28);
    }
    else
    {
      v26 = 4294967283;
    }
  }
  cc_disable_dit(&v30);
  return v26;
}

uint64_t ccascon_ascon128a_encrypt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v14;
  uint64_t v20;
  _OWORD v22[3];
  char v23;

  v14 = 0;
  v23 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v14 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v14 = 1;
    }
  }
  v23 = v14;
  memset(v22, 0, sizeof(v22));
  (*(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 24))(v22, a6, a7, a8, a9);
  v20 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32))(v22, a2, a3, a4, a5, a9);
  cc_disable_dit(&v23);
  return v20;
}

uint64_t ccascon_ascon128a_decrypt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v14;
  uint64_t v20;
  _OWORD v22[3];
  char v23;

  v14 = 0;
  v23 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v14 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v14 = 1;
    }
  }
  v23 = v14;
  memset(v22, 0, sizeof(v22));
  (*(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 24))(v22, a6, a7, a8, a9);
  v20 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 40))(v22, a2, a3, a4, a5, a9);
  cc_disable_dit(&v23);
  return v20;
}

uint64_t ccascon_ascon128a_ref_init(unint64_t *a1, unint64_t a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;

  v8 = 0;
  v9 = bswap64(*a5);
  v10 = bswap64(a5[1]);
  v11 = bswap64(*a4);
  v12 = bswap64(a4[1]);
  v13 = 0x80800C0800000000;
  v14 = v9;
  v15 = v10;
  do
  {
    v16 = v15 ^ ROUND_CONSTANTS[v8];
    v17 = v12 ^ v13;
    v18 = v12 ^ v11;
    v19 = v16 ^ v14;
    v20 = v16 & ~v14 ^ v17;
    v21 = v11 & ~v19 ^ v14;
    v22 = v14 & ~v17 ^ v12 ^ v11;
    v23 = v12 & ~v11;
    v24 = v17 & ~v18 ^ v11 ^ v19 ^ v23;
    v13 = __ROR8__(v20 ^ v22, 19) ^ __ROR8__(v20 ^ v22, 28) ^ v20 ^ v22;
    v14 = __ROR8__(v21 ^ v20, 61) ^ __ROR8__(v21 ^ v20, 39) ^ v21 ^ v20;
    v15 = v19 ^ v23 ^ ~(__ROR8__(v19 ^ ~v23, 1) ^ __ROR8__(v19 ^ ~v23, 6));
    v11 = __ROR8__(v24, 10) ^ __ROR8__(v24, 17) ^ v24;
    v12 = __ROR8__(v22, 7) ^ __ROR8__(v22, 41) ^ v22;
    ++v8;
  }
  while (v8 != 12);
  *a1 = v13;
  a1[1] = v14;
  a1[2] = v15;
  a1[3] = v11 ^ v9;
  v25 = v12 ^ v10;
  a1[4] = v25;
  a1[5] = 0;
  if (a2)
  {
    ccascon_ascon128a_ref_accumulate_encrypt(a1, 0, a2, a3);
    ccascon_ascon128a_ref_pad((uint64_t)a1);
    v26 = 0;
    v27 = a1[3];
    v25 = a1[4];
    v28 = a1[1];
    v29 = a1[2];
    v30 = *a1;
    do
    {
      v31 = v29 ^ ROUND_CONSTANTS[v26 + 4];
      v32 = v25 ^ v30;
      v33 = v25 ^ v27;
      v34 = v31 ^ v28;
      v35 = v31 & ~v28 ^ v32;
      v36 = v27 & ~v34 ^ v28;
      v37 = v28 & ~v32 ^ v25 ^ v27;
      v38 = v25 & ~v27;
      v39 = v32 & ~v33 ^ v27 ^ v34 ^ v38;
      v30 = __ROR8__(v35 ^ v37, 19) ^ __ROR8__(v35 ^ v37, 28) ^ v35 ^ v37;
      v28 = __ROR8__(v36 ^ v35, 61) ^ __ROR8__(v36 ^ v35, 39) ^ v36 ^ v35;
      v29 = v34 ^ v38 ^ ~(__ROR8__(v34 ^ ~v38, 1) ^ __ROR8__(v34 ^ ~v38, 6));
      v27 = __ROR8__(v39, 10) ^ __ROR8__(v39, 17) ^ v39;
      v25 = __ROR8__(v37, 7) ^ __ROR8__(v37, 41) ^ v37;
      ++v26;
    }
    while (v26 != 8);
    a1[2] = v29;
    a1[3] = v27;
    *a1 = v30;
    a1[1] = v28;
  }
  a1[4] = v25 ^ 1;
  return 0;
}

uint64_t ccascon_ascon128a_ref_encrypt(unint64_t *a1, _QWORD *a2, uint64_t a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  ccascon_ascon128a_ref_accumulate_encrypt(a1, a2, a4, a5);
  ccascon_ascon128a_ref_pad((uint64_t)a1);
  ccascon_ascon128a_ref_finalize(a1, a3, a6);
  return 0;
}

unint64_t ccascon_ascon128a_ref_decrypt(int8x8_t *a1, _QWORD *a2, char *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t result;
  char v12[16];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C874D8];
  ccascon_ascon128a_ref_accumulate_decrypt(a1, a2, a4, a5);
  ccascon_ascon128a_ref_pad((uint64_t)a1);
  ccascon_ascon128a_ref_finalize((unint64_t *)a1, (uint64_t)v12, a6);
  result = cc_cmp_safe(16, a3, v12);
  if ((_DWORD)result)
  {
    if (a2)
    {
      if (a4)
        cc_clear(a4, a2);
    }
    cc_clear(8uLL, a1);
    return 4294967294;
  }
  return result;
}

void *ccascon_ascon128a()
{
  return &ccascon_ascon128a_ref;
}

uint64_t ccmode_cbc_init(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  *a2 = v2;
  return (*(uint64_t (**)(void))(v2 + 16))();
}

uint64_t fipspost_post_indicator()
{
  uint64_t v0;
  unint64_t v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  _BOOL4 v20;
  _BOOL4 v21;
  _BOOL4 v22;
  _BOOL4 v23;
  _BOOL4 v24;
  _BOOL4 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  _BOOL4 v37;
  _BOOL4 v38;
  _BOOL4 v39;
  _BOOL4 v40;
  _BOOL4 v41;
  _BOOL4 v42;
  _BOOL4 v43;
  _BOOL4 v44;
  _BOOL4 v45;
  _BOOL4 v46;
  _BOOL4 v47;
  _BOOL4 v48;
  _BOOL4 v49;
  _BOOL4 v50;
  _BOOL4 v51;
  _BOOL4 v52;
  _BOOL4 v53;
  _BOOL4 v54;
  _BOOL4 v55;
  _BOOL4 v56;
  _BOOL4 v57;
  _BOOL4 v58;
  _BOOL4 v59;
  _BOOL4 v60;
  _BOOL4 v61;
  _BOOL4 v62;
  _BOOL4 v63;
  _BOOL4 v64;
  _BOOL4 v65;
  _BOOL4 v66;
  _BOOL4 v67;
  _BOOL4 v68;
  _BOOL4 v69;
  _BOOL4 v70;
  _BOOL4 v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  _BOOL4 v82;
  _BOOL4 v83;
  _BOOL4 v84;
  _BOOL4 v85;
  _BOOL4 v86;
  _BOOL4 v87;
  _BOOL4 v88;
  _BOOL4 v89;
  _BOOL4 v90;
  _BOOL4 v91;
  _BOOL4 v92;
  _BOOL4 v93;
  _BOOL4 v94;
  _BOOL4 v95;
  _BOOL4 v96;
  _BOOL4 v97;
  _BOOL4 v98;
  _BOOL4 v99;
  _BOOL4 v100;
  _BOOL4 v101;
  _BOOL4 v102;
  _BOOL4 v103;
  _BOOL4 v104;
  _BOOL4 v105;
  _BOOL4 v106;
  _BOOL4 v107;
  _BOOL4 v108;
  _BOOL4 v109;
  _BOOL4 v110;
  _BOOL4 v111;
  _BOOL4 v112;
  _BOOL4 v113;
  _BOOL4 v114;
  _BOOL4 v115;
  _BOOL4 v116;
  _BOOL4 v117;
  _BOOL4 v118;
  _BOOL4 v119;
  _BOOL4 v120;
  _BOOL4 v121;
  _BOOL4 v122;
  _BOOL4 v123;
  _BOOL4 v124;
  _BOOL4 v125;
  _BOOL4 v126;
  _BOOL4 v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  _BOOL4 v143;
  unsigned int v144;
  unsigned int v145;
  _BOOL4 v146;
  unsigned int v147;
  _BOOL4 v148;
  unsigned int v149;
  _BOOL4 v150;
  unsigned int v151;
  _BOOL4 v152;
  unsigned int v153;
  _BOOL4 v154;
  unsigned int v155;
  unsigned int v156;
  _BOOL4 v157;
  unsigned int v158;
  _BOOL4 v159;
  unsigned int v160;
  _BOOL4 v161;
  unsigned int v162;
  _BOOL4 v163;
  unsigned int v164;
  unsigned int v165;
  _BOOL4 v166;
  unsigned int v167;
  _BOOL4 v168;
  unsigned int v169;
  _BOOL4 v170;
  _BOOL4 v171;
  _BOOL4 v172;
  _BOOL4 v173;
  _BOOL4 v174;
  _BOOL4 v175;
  _BOOL4 v176;
  _BOOL4 v177;
  _BOOL4 v178;
  _BOOL4 v179;
  _BOOL4 v180;
  _BOOL4 v181;
  _BOOL4 v182;
  _BOOL4 v183;
  _BOOL4 v184;
  _BOOL4 v185;
  _BOOL4 v186;
  _BOOL4 v187;
  _BOOL4 v188;
  _BOOL4 v189;
  _BOOL4 v190;
  _BOOL4 v191;
  _BOOL4 v192;
  _BOOL4 v193;
  _BOOL4 v194;
  _BOOL4 v195;
  _BOOL4 v196;
  _BOOL4 v197;
  _BOOL4 v198;
  _BOOL4 v199;
  _BOOL4 v200;
  _BOOL4 v201;
  _BOOL4 v202;
  _BOOL4 v203;
  _BOOL4 v204;
  _BOOL4 v205;
  _BOOL4 v206;
  _BOOL4 v207;
  _BOOL4 v208;
  _BOOL4 v209;
  _BOOL4 v210;
  _BOOL4 v211;
  _BOOL4 v212;
  _BOOL4 v213;
  _BOOL4 v214;
  _BOOL4 v215;
  _BOOL4 v216;
  _BOOL4 v217;
  _BOOL4 v218;
  _BOOL4 v219;
  _BOOL4 v220;
  _BOOL4 v221;
  _BOOL4 v222;
  _BOOL4 v223;
  _BOOL4 v224;
  _BOOL4 v225;
  _BOOL4 v226;
  _BOOL4 v227;
  _BOOL4 v228;
  _BOOL4 v229;
  _BOOL4 v230;
  _BOOL4 v231;
  _BOOL4 v232;
  _BOOL4 v233;
  _BOOL4 v234;
  _BOOL4 v235;
  _BOOL4 v236;
  _BOOL4 v237;
  _BOOL4 v238;
  _BOOL4 v239;
  _BOOL4 v240;
  _BOOL4 v241;
  _BOOL4 v242;
  _BOOL4 v243;
  _BOOL4 v244;
  _BOOL4 v245;
  _BOOL4 v246;
  _BOOL4 v247;
  _BOOL4 v248;
  _BOOL4 v249;
  _BOOL4 v250;
  _BOOL4 v251;
  _BOOL4 v252;
  _BOOL4 v253;
  _BOOL4 v254;
  _BOOL4 v255;
  _BOOL4 v256;
  _BOOL4 v257;
  _BOOL4 v258;
  _BOOL4 v259;
  _BOOL4 v260;
  _BOOL4 v261;
  _BOOL4 v262;
  _BOOL4 v263;
  _BOOL4 v264;
  _BOOL4 v265;
  _BOOL4 v266;
  _BOOL4 v267;
  _BOOL4 v268;
  _BOOL4 v269;
  _BOOL4 v270;
  _BOOL4 v271;
  _BOOL4 v272;
  _BOOL4 v273;
  _BOOL4 v274;
  _BOOL4 v275;
  _BOOL4 v276;
  _BOOL4 v277;
  _BOOL4 v278;
  _BOOL4 v279;
  _BOOL4 v280;
  _BOOL4 v281;
  _BOOL4 v282;
  _BOOL4 v283;
  _BOOL4 v284;
  _BOOL4 v285;
  _BOOL4 v286;
  _BOOL4 v287;
  _BOOL4 v288;
  _BOOL4 v289;
  _BOOL4 v290;
  _BOOL4 v291;
  _BOOL4 v292;
  _BOOL4 v293;
  _BOOL4 v294;
  _BOOL4 v295;
  _BOOL4 v296;
  _BOOL4 v297;
  _BOOL4 v298;
  _BOOL4 v299;
  _BOOL4 v300;
  _BOOL4 v301;
  _BOOL4 v302;
  _BOOL4 v303;
  _BOOL4 v304;
  _BOOL4 v305;
  _BOOL4 v306;
  _BOOL4 v307;
  _BOOL4 v308;
  _BOOL4 v309;
  _BOOL4 v310;
  _BOOL4 v311;
  _BOOL4 v312;
  _BOOL4 v313;
  _BOOL4 v314;
  _BOOL4 v315;
  _BOOL4 v316;
  _BOOL4 v317;
  _BOOL4 v318;
  _BOOL4 v319;
  _BOOL4 v320;
  _BOOL4 v321;
  _BOOL4 v322;
  _BOOL4 v323;
  _BOOL4 v324;
  _BOOL4 v325;
  _BOOL4 v326;
  _BOOL4 v327;
  _BOOL4 v328;
  _BOOL4 v329;
  _BOOL4 v330;
  _BOOL4 v331;
  _BOOL4 v332;
  _BOOL4 v333;
  _BOOL4 v334;
  _BOOL4 v335;
  _BOOL4 v336;
  unsigned int v337;
  _BOOL4 v338;
  unsigned int v339;
  _BOOL4 v340;
  unsigned int v341;
  _BOOL4 v342;
  unsigned int v343;
  _BOOL4 v344;
  unsigned int v345;
  _BOOL4 v346;
  unsigned int v347;
  _BOOL4 v348;
  unsigned int v349;
  _BOOL4 v350;
  _BOOL4 v351;

  v351 = fips_allowed("fipspost_post_integrity", 0);
  v0 = 8;
  do
  {
    v1 = v0 + 8;
    v349 = fips_allowed_mode_("ccaes_ecb_encrypt_mode", v0 + 8);
    v347 = fips_allowed_mode_("ccaes_ecb_decrypt_mode", v0 + 8);
    v345 = fips_allowed_mode_("ccaes_cbc_encrypt_mode", v0 + 8);
    v343 = fips_allowed_mode_("ccaes_cbc_decrypt_mode", v0 + 8);
    v341 = fips_allowed_mode_("ccaes_ccm_encrypt_mode", v0 + 8);
    v339 = fips_allowed_mode_("ccaes_ccm_decrypt_mode", v0 + 8);
    v337 = fips_allowed_mode_("ccaes_cfb8_encrypt_mode", v0 + 8);
    v2 = fips_allowed_mode_("ccaes_cfb8_decrypt_mode", v0 + 8);
    v3 = fips_allowed_mode_("ccaes_cfb_encrypt_mode", v0 + 8);
    v4 = fips_allowed_mode_("ccaes_cfb_decrypt_mode", v0 + 8);
    v5 = fips_allowed_mode_("ccaes_ofb_crypt_mode", v0 + 8);
    v6 = fips_allowed_mode_("ccaes_ctr_crypt_mode", v0 + 8);
    v7 = fips_allowed_mode_("ccaes_gcm_encrypt_mode", v0 + 8);
    v8 = fips_allowed_mode_("ccaes_gcm_decrypt_mode", v0 + 8);
    v9 = fips_allowed_mode_("ccwrap_auth_encrypt_withiv", v0 + 8);
    v10 = v349 & v351 & v347 & v345 & v343 & v341 & v339 & v337 & v2 & v3 & v4 & v5 & v6 & v7 & v8 & v9 & fips_allowed_mode_("ccwrap_auth_decrypt_withiv", v0 + 8);
    if (v0 != 16)
    {
      v11 = fips_allowed_mode_("ccpad_cts1_encrypt", v0 + 8);
      v12 = fips_allowed_mode_("ccpad_cts1_decrypt", v0 + 8);
      v13 = fips_allowed_mode_("ccpad_cts2_encrypt", v0 + 8);
      v14 = fips_allowed_mode_("ccpad_cts2_decrypt", v0 + 8);
      v15 = fips_allowed_mode_("ccpad_cts3_encrypt", v1);
      v16 = fips_allowed_mode_("ccpad_cts3_decrypt", v1);
      v17 = fips_allowed_mode_("ccaes_xts_encrypt_mode", v1);
      v10 &= v11 & v12 & v13 & v14 & v15 & v16 & v17 & fips_allowed_mode_("ccaes_xts_decrypt_mode", v1);
    }
    v351 = v10;
    v0 = v1;
  }
  while (v1 < 0x19);
  v350 = fips_allowed_drbg_("ccdrbg_init", "ccdrbg_factory_nistctr", "CCAES_KEY_SIZE_128");
  v348 = fips_allowed_drbg_("ccdrbg_reseed", "ccdrbg_factory_nistctr", "CCAES_KEY_SIZE_128");
  v346 = fips_allowed_drbg_("ccdrbg_generate", "ccdrbg_factory_nistctr", "CCAES_KEY_SIZE_128");
  v344 = fips_allowed_drbg_("ccdrbg_done", "ccdrbg_factory_nistctr", "CCAES_KEY_SIZE_128");
  v342 = fips_allowed_drbg_("ccdrbg_init", "ccdrbg_factory_nistctr", "CCAES_KEY_SIZE_256");
  v340 = fips_allowed_drbg_("ccdrbg_reseed", "ccdrbg_factory_nistctr", "CCAES_KEY_SIZE_256");
  v338 = fips_allowed_drbg_("ccdrbg_generate", "ccdrbg_factory_nistctr", "CCAES_KEY_SIZE_256");
  v335 = fips_allowed_drbg_("ccdrbg_done", "ccdrbg_factory_nistctr", "CCAES_KEY_SIZE_256");
  v333 = fips_allowed_drbg_("ccdrbg_init", "ccdrbg_factory_nisthmac", "ccsha1_di");
  v331 = fips_allowed_drbg_("ccdrbg_reseed", "ccdrbg_factory_nisthmac", "ccsha1_di");
  v330 = fips_allowed_drbg_("ccdrbg_generate", "ccdrbg_factory_nisthmac", "ccsha1_di");
  v329 = fips_allowed_drbg_("ccdrbg_done", "ccdrbg_factory_nisthmac", "ccsha1_di");
  v328 = !fips_allowed_drbg_("ccdrbg_init", "ccdrbg_factory_nisthmac", "ccsha224_di");
  v324 = fips_allowed_drbg_("ccdrbg_reseed", "ccdrbg_factory_nisthmac", "ccsha224_di");
  v336 = fips_allowed_drbg_("ccdrbg_generate", "ccdrbg_factory_nisthmac", "ccsha224_di");
  v334 = fips_allowed_drbg_("ccdrbg_done", "ccdrbg_factory_nisthmac", "ccsha224_di");
  v332 = fips_allowed_drbg_("ccdrbg_init", "ccdrbg_factory_nisthmac", "ccsha256_di");
  v321 = fips_allowed_drbg_("ccdrbg_reseed", "ccdrbg_factory_nisthmac", "ccsha256_di");
  v320 = fips_allowed_drbg_("ccdrbg_generate", "ccdrbg_factory_nisthmac", "ccsha256_di");
  v319 = fips_allowed_drbg_("ccdrbg_done", "ccdrbg_factory_nisthmac", "ccsha256_di");
  v327 = fips_allowed_drbg_("ccdrbg_init", "ccdrbg_factory_nisthmac", "ccsha384_di");
  v326 = fips_allowed_drbg_("ccdrbg_reseed", "ccdrbg_factory_nisthmac", "ccsha384_di");
  v325 = fips_allowed_drbg_("ccdrbg_generate", "ccdrbg_factory_nisthmac", "ccsha384_di");
  v323 = fips_allowed_drbg_("ccdrbg_done", "ccdrbg_factory_nisthmac", "ccsha384_di");
  v322 = fips_allowed_drbg_("ccdrbg_init", "ccdrbg_factory_nisthmac", "ccsha512_di");
  v318 = fips_allowed_drbg_("ccdrbg_reseed", "ccdrbg_factory_nisthmac", "ccsha512_di");
  v317 = fips_allowed_drbg_("ccdrbg_generate", "ccdrbg_factory_nisthmac", "ccsha512_di");
  v316 = fips_allowed_drbg_("ccdrbg_done", "ccdrbg_factory_nisthmac", "ccsha512_di");
  v315 = fips_allowed("ccec_generate_key_fips", "ccec_cp_224");
  v314 = fips_allowed("ccec_generate_key_fips", "ccec_cp_256");
  v313 = fips_allowed("ccec_generate_key_fips", "ccec_cp_384");
  v312 = fips_allowed("ccec_generate_key_fips", "ccec_cp_521");
  v311 = fips_allowed("ccec_make_priv", "ccec_cp_224");
  v310 = fips_allowed("ccec_make_priv", "ccec_cp_256");
  v309 = fips_allowed("ccec_make_priv", "ccec_cp_384");
  v308 = fips_allowed("ccec_make_priv", "ccec_cp_521");
  v307 = fips_allowed("ccec_make_pub", "ccec_cp_224");
  v306 = fips_allowed("ccec_make_pub", "ccec_cp_256");
  v305 = fips_allowed("ccec_make_pub", "ccec_cp_384");
  v304 = fips_allowed("ccec_make_pub", "ccec_cp_521");
  v303 = fips_allowed("ccec_sign_msg", "ccec_cp_224");
  v302 = fips_allowed("ccec_sign_msg", "ccec_cp_256");
  v301 = fips_allowed("ccec_sign_msg", "ccec_cp_384");
  v300 = fips_allowed("ccec_sign_msg", "ccec_cp_521");
  v299 = fips_allowed("ccec_verify_msg", "ccec_cp_192");
  v298 = fips_allowed("ccec_verify_msg", "ccec_cp_224");
  v297 = fips_allowed("ccec_verify_msg", "ccec_cp_256");
  v296 = fips_allowed("ccec_verify_msg", "ccec_cp_384");
  v295 = fips_allowed("ccec_verify_msg", "ccec_cp_521");
  v294 = fips_allowed("ccec_validate_pub", "ccec_cp_192");
  v293 = fips_allowed("ccec_validate_pub", "ccec_cp_224");
  v292 = fips_allowed("ccec_validate_pub", "ccec_cp_256");
  v291 = fips_allowed("ccec_validate_pub", "ccec_cp_384");
  v290 = fips_allowed("ccec_validate_pub", "ccec_cp_521");
  v289 = fips_allowed("cchmac", "ccsha1_di");
  v288 = fips_allowed("cchmac", "ccsha224_di");
  v287 = fips_allowed("cchmac", "ccsha256_di");
  v286 = fips_allowed("cchmac", "ccsha384_di");
  v285 = fips_allowed("cchmac", "ccsha512_di");
  v284 = fips_allowed("cchmac", "ccsha512_256_di");
  v283 = fips_allowed("cchmac", "ccsha3_224_di");
  v282 = fips_allowed("cchmac", "ccsha3_256_di");
  v281 = fips_allowed("cchmac", "ccsha3_384_di");
  v280 = fips_allowed("cchmac", "ccsha3_512_di");
  v279 = fips_allowed("ccdh_gp_rfc3526group14", 0);
  v278 = fips_allowed("ccdh_gp_rfc3526group15", 0);
  v277 = fips_allowed("ccdh_gp_rfc3526group16", 0);
  v276 = fips_allowed("ccdh_gp_rfc3526group17", 0);
  v275 = fips_allowed("ccdh_gp_rfc3526group18", 0);
  v274 = fips_allowed("ccdh_generate_key", "2048");
  v273 = fips_allowed("ccdh_generate_key", "3072");
  v272 = fips_allowed("ccdh_generate_key", "4096");
  v271 = fips_allowed("ccdh_generate_key", "6144");
  v270 = fips_allowed("ccdh_generate_key", "8192");
  v269 = fips_allowed("ccdh_import_pub", "2048");
  v268 = fips_allowed("ccdh_import_pub", "3072");
  v267 = fips_allowed("ccdh_import_pub", "4096");
  v266 = fips_allowed("ccdh_import_pub", "6144");
  v265 = fips_allowed("ccdh_import_pub", "8192");
  v264 = fips_allowed("ccdh_import_priv", "2048");
  v263 = fips_allowed("ccdh_import_priv", "3072");
  v262 = fips_allowed("ccdh_import_priv", "4096");
  v261 = fips_allowed("ccdh_import_priv", "6144");
  v260 = fips_allowed("ccdh_import_priv", "8192");
  v259 = fips_allowed("ccdh_compute_shared_secret", "2048");
  v258 = fips_allowed("ccdh_compute_shared_secret", "3072");
  v257 = fips_allowed("ccdh_compute_shared_secret", "4096");
  v256 = fips_allowed("ccdh_compute_shared_secret", "6144");
  v255 = fips_allowed("ccdh_compute_shared_secret", "8192");
  v254 = fips_allowed("ccecdh_compute_shared_secret", "ccec_cp_224");
  v253 = fips_allowed("ccecdh_compute_shared_secret", "ccec_cp_256");
  v252 = fips_allowed("ccecdh_compute_shared_secret", "ccec_cp_384");
  v251 = fips_allowed("ccecdh_compute_shared_secret", "ccec_cp_521");
  v250 = fips_allowed("ccecdh_generate_key", "ccec_cp_224");
  v249 = fips_allowed("ccecdh_generate_key", "ccec_cp_256");
  v248 = fips_allowed("ccecdh_generate_key", "ccec_cp_384");
  v247 = fips_allowed("ccecdh_generate_key", "ccec_cp_521");
  v246 = fips_allowed("ccnistkdf_ctr_cmac", "16");
  v245 = fips_allowed("ccnistkdf_ctr_cmac", "24");
  v244 = fips_allowed("ccnistkdf_ctr_cmac", "32");
  v243 = fips_allowed("ccnistkdf_ctr_cmac_fixed", "16");
  v242 = fips_allowed("ccnistkdf_ctr_cmac_fixed", "24");
  v241 = fips_allowed("ccnistkdf_ctr_cmac_fixed", "32");
  v240 = fips_allowed("ccnistkdf_ctr_hmac", "ccsha1_di");
  v239 = fips_allowed("ccnistkdf_ctr_hmac", "ccsha224_di");
  v238 = fips_allowed("ccnistkdf_ctr_hmac", "ccsha256_di");
  v237 = fips_allowed("ccnistkdf_ctr_hmac", "ccsha384_di");
  v236 = fips_allowed("ccnistkdf_ctr_hmac", "ccsha512_di");
  v235 = fips_allowed("ccnistkdf_ctr_hmac", "ccsha512_256_di");
  v234 = fips_allowed("ccnistkdf_ctr_hmac", "ccsha3_224_di");
  v233 = fips_allowed("ccnistkdf_ctr_hmac", "ccsha3_256_di");
  v231 = fips_allowed("ccnistkdf_ctr_hmac", "ccsha3_384_di");
  v229 = fips_allowed("ccnistkdf_ctr_hmac", "ccsha3_512_di");
  v226 = fips_allowed("ccnistkdf_ctr_hmac_fixed", "ccsha1_di");
  v224 = fips_allowed("ccnistkdf_ctr_hmac_fixed", "ccsha224_di");
  v222 = fips_allowed("ccnistkdf_ctr_hmac_fixed", "ccsha256_di");
  v219 = fips_allowed("ccnistkdf_ctr_hmac_fixed", "ccsha384_di");
  v217 = fips_allowed("ccnistkdf_ctr_hmac_fixed", "ccsha512_di");
  v216 = fips_allowed("ccnistkdf_ctr_hmac_fixed", "ccsha512_256_di");
  v215 = fips_allowed("ccnistkdf_ctr_hmac_fixed", "ccsha3_224_di");
  v214 = fips_allowed("ccnistkdf_ctr_hmac_fixed", "ccsha3_256_di");
  v212 = fips_allowed("ccnistkdf_ctr_hmac_fixed", "ccsha3_384_di");
  v211 = fips_allowed("ccnistkdf_ctr_hmac_fixed", "ccsha3_512_di");
  v210 = fips_allowed("ccpbkdf2_hmac", "ccsha1_di");
  v213 = fips_allowed("ccpbkdf2_hmac", "ccsha224_di");
  v232 = fips_allowed("ccpbkdf2_hmac", "ccsha256_di");
  v230 = fips_allowed("ccpbkdf2_hmac", "ccsha384_di");
  v228 = fips_allowed("ccpbkdf2_hmac", "ccsha512_di");
  v227 = fips_allowed("ccpbkdf2_hmac", "ccsha512_256_di");
  v225 = fips_allowed("ccpbkdf2_hmac", "ccsha3_224_di");
  v223 = fips_allowed("ccpbkdf2_hmac", "ccsha3_256_di");
  v221 = fips_allowed("ccpbkdf2_hmac", "ccsha3_384_di");
  v220 = fips_allowed("ccpbkdf2_hmac", "ccsha3_512_di");
  v218 = fips_allowed("cchkdf", "ccsha1_di");
  v209 = fips_allowed("cchkdf", "ccsha224_di");
  v208 = fips_allowed("cchkdf", "ccsha256_di");
  v207 = fips_allowed("cchkdf", "ccsha384_di");
  v206 = fips_allowed("cchkdf", "ccsha512_di");
  v205 = fips_allowed("cchkdf", "ccsha512_256_di");
  v204 = fips_allowed("cchkdf", "ccsha3_224_di");
  v203 = fips_allowed("cchkdf", "ccsha3_256_di");
  v202 = fips_allowed("cchkdf", "ccsha3_384_di");
  v201 = fips_allowed("cchkdf", "ccsha3_512_di");
  v200 = !fips_allowed("ccmd5_di", 0);
  v199 = fips_allowed("ccsha1_di", 0);
  v198 = fips_allowed("ccsha224_di", 0);
  v197 = fips_allowed("ccsha256_di", 0);
  v196 = fips_allowed("ccsha384_di", 0);
  v195 = fips_allowed("ccsha512_di", 0);
  v194 = fips_allowed("ccsha512_256_di", 0);
  v193 = fips_allowed("ccsha3_224_di", 0);
  v192 = fips_allowed("ccsha3_256_di", 0);
  v191 = fips_allowed("ccsha3_384_di", 0);
  v190 = fips_allowed("ccsha3_512_di", 0);
  v189 = fips_allowed("ccshake128_xi", 0);
  v188 = fips_allowed("ccshake256_xi", 0);
  v185 = !fips_allowed("ccrng_uniform", 0);
  v182 = fips_allowed("ccrsa_verify_pss_msg", "1024");
  v180 = fips_allowed("ccrsa_verify_pss_msg", "2048");
  v178 = fips_allowed("ccrsa_verify_pss_msg", "3072");
  v175 = fips_allowed("ccrsa_verify_pss_msg", "4096");
  v171 = fips_allowed("ccrsa_verify_pkcs1v15_msg", "1024");
  v170 = fips_allowed("ccrsa_verify_pkcs1v15_msg", "2048");
  v168 = fips_allowed("ccrsa_verify_pkcs1v15_msg", "3072");
  v166 = fips_allowed("ccrsa_verify_pkcs1v15_msg", "4096");
  v163 = fips_allowed("ccrsa_generate_fips186_key", "2048");
  v161 = fips_allowed("ccrsa_generate_fips186_key", "3072");
  v159 = fips_allowed("ccrsa_generate_fips186_key", "4096");
  v157 = fips_allowed("ccrsa_sign_pss_msg", "2048");
  v154 = fips_allowed("ccrsa_sign_pss_msg", "3072");
  v152 = fips_allowed("ccrsa_sign_pss_msg", "4096");
  v150 = fips_allowed("ccrsa_sign_pkcs1v15_msg", "2048");
  v148 = fips_allowed("ccrsa_sign_pkcs1v15_msg", "3072");
  v146 = fips_allowed("ccrsa_sign_pkcs1v15_msg", "4096");
  v143 = !fips_allowed("ccrsa_encrypt_oaep", "2048");
  v173 = fips_allowed("ccrsa_encrypt_oaep", "3072");
  v187 = fips_allowed("ccrsa_encrypt_oaep", "4096");
  v186 = fips_allowed("ccrsa_decrypt_oaep", "2048");
  v184 = fips_allowed("ccrsa_decrypt_oaep", "3072");
  v183 = fips_allowed("ccrsa_decrypt_oaep", "4096");
  v181 = fips_allowed("ccansikdf_x963", "ccsha1_di");
  v179 = fips_allowed("ccansikdf_x963", "ccsha224_di");
  v177 = fips_allowed("ccansikdf_x963", "ccsha256_di");
  v176 = fips_allowed("ccansikdf_x963", "ccsha384_di");
  v174 = fips_allowed("ccansikdf_x963", "ccsha512_di");
  v172 = fips_allowed("ccansikdf_x963", "ccsha512_256_di");
  v169 = fips_allowed_mode_("ccblowfish_ecb_decrypt_mode", 16);
  v167 = fips_allowed_mode_("ccblowfish_ecb_encrypt_mode", 16);
  v165 = fips_allowed_mode_("ccblowfish_cbc_decrypt_mode", 16);
  v164 = fips_allowed_mode_("ccblowfish_cbc_encrypt_mode", 16);
  v162 = fips_allowed_mode_("ccblowfish_cfb_decrypt_mode", 16);
  v160 = fips_allowed_mode_("ccblowfish_cfb_encrypt_mode", 16);
  v158 = fips_allowed_mode_("ccblowfish_cfb8_decrypt_mode", 16);
  v156 = fips_allowed_mode_("ccblowfish_cfb8_encrypt_mode", 16);
  v155 = fips_allowed_mode_("ccblowfish_ctr_crypt_mode", 16);
  v153 = fips_allowed_mode_("ccblowfish_ofb_crypt_mode", 16);
  v151 = fips_allowed_mode_("cccast_ecb_decrypt_mode", 16);
  v149 = fips_allowed_mode_("cccast_ecb_encrypt_mode", 16);
  v147 = fips_allowed_mode_("cccast_cbc_decrypt_mode", 16);
  v145 = fips_allowed_mode_("cccast_cbc_encrypt_mode", 16);
  v144 = fips_allowed_mode_("cccast_cfb_decrypt_mode", 16);
  v142 = fips_allowed_mode_("cccast_cfb_encrypt_mode", 16);
  v141 = fips_allowed_mode_("cccast_cfb8_decrypt_mode", 16);
  v140 = fips_allowed_mode_("cccast_cfb8_encrypt_mode", 16);
  v139 = fips_allowed_mode_("cccast_ctr_crypt_mode", 16);
  v138 = fips_allowed_mode_("cccast_ofb_crypt_mode", 16);
  v137 = fips_allowed_mode_("ccdes3_ecb_decrypt_mode", 16);
  v136 = fips_allowed_mode_("ccdes3_ecb_encrypt_mode", 16);
  v135 = fips_allowed_mode_("ccdes3_cbc_decrypt_mode", 16);
  v134 = fips_allowed_mode_("ccdes3_cbc_encrypt_mode", 16);
  v133 = fips_allowed_mode_("ccdes3_cfb_decrypt_mode", 16);
  v132 = fips_allowed_mode_("ccdes3_cfb_encrypt_mode", 16);
  v131 = fips_allowed_mode_("ccdes3_cfb8_decrypt_mode", 16);
  v130 = fips_allowed_mode_("ccdes3_cfb8_encrypt_mode", 16);
  v129 = fips_allowed_mode_("ccdes3_ctr_crypt_mode", 16);
  v128 = fips_allowed_mode_("ccdes3_ofb_crypt_mode", 16);
  v127 = fips_allowed("ccdh_compute_shared_secret", "ccsrp_gp_rfc5054_2048");
  v126 = fips_allowed("ccdh_gp_apple768", 0);
  v125 = fips_allowed("ccdh_gp_rfc2409group02", 0);
  v124 = fips_allowed("ccdh_gp_rfc2409group05", 0);
  v123 = fips_allowed("ccdh_gp_rfc5114_MODP_1024_160", 0);
  v122 = fips_allowed("ccdh_gp_rfc5114_MODP_2048_224", 0);
  v121 = fips_allowed("ccdh_gp_rfc5114_MODP_2048_256", 0);
  v120 = fips_allowed("ccec_sign", "ccec_cp_224");
  v119 = fips_allowed("ccec_sign", "ccec_cp_256");
  v118 = fips_allowed("ccec_sign", "ccec_cp_384");
  v117 = fips_allowed("ccec_sign", "ccec_cp_521");
  v116 = fips_allowed("ccec_verify", "ccec_cp_192");
  v115 = fips_allowed("ccec_verify", "ccec_cp_224");
  v114 = fips_allowed("ccec_verify", "ccec_cp_256");
  v113 = fips_allowed("ccec_verify", "ccec_cp_384");
  v112 = fips_allowed("ccec_verify", "ccec_cp_521");
  v111 = fips_allowed("ccec_verify_strict", "ccec_cp_256");
  v110 = fips_allowed("ccec_verify_strict", "ccec_cp_384");
  v109 = fips_allowed("ccec_verify_strict", "ccec_cp_521");
  v108 = fips_allowed("ccec_rfc6637_kdf", "ccec_cp_256");
  v107 = fips_allowed("ccec_rfc6637_kdf", "ccec_cp_384");
  v106 = fips_allowed("ccec_rfc6637_kdf", "ccec_cp_521");
  v105 = fips_allowed("ccec_rfc6637_wrap_key", "ccec_cp_256");
  v104 = fips_allowed("ccec_rfc6637_wrap_key", "ccec_cp_384");
  v103 = fips_allowed("ccec_rfc6637_wrap_key", "ccec_cp_521");
  v102 = fips_allowed("ccec_rfc6637_unwrap_key", "ccec_cp_256");
  v101 = fips_allowed("ccec_rfc6637_unwrap_key", "ccec_cp_384");
  v100 = fips_allowed("ccec_rfc6637_unwrap_key", "ccec_cp_521");
  v99 = fips_allowed("ccecies_encrypt_gcm", 0);
  v98 = fips_allowed("ccecies_decrypt_gcm", 0);
  v97 = fips_allowed("cced25519_make_key_pair", 0);
  v96 = fips_allowed("cced25519_sign", 0);
  v95 = fips_allowed("cced25519_verify", 0);
  v94 = fips_allowed("cch2c", "ccec_cp_256");
  v93 = fips_allowed("cch2c", "ccec_cp_384");
  v92 = fips_allowed("cch2c", "ccec_cp_521");
  v91 = fips_allowed("cchpke", 0);
  v90 = fips_allowed("cchpke_kem_x25519_generate_key_pair", 0);
  v89 = fips_allowed("cchpke_kem_x25519_public_key", 0);
  v88 = fips_allowed("cchpke_kem_generate_key_pair", 0);
  v87 = fips_allowed("cchpke_initiator_encrypt", 0);
  v86 = fips_allowed("cchpke_responder_decrypt", 0);
  v85 = fips_allowed("cchpke_export_secret", 0);
  v84 = fips_allowed("cchkdf", 0);
  fips_allowed("ccpbkdf2_hmac", "ccsha1_di");
  fips_allowed("ccpbkdf2_hmac", "ccsha224_di");
  fips_allowed("ccpbkdf2_hmac", "ccsha256_di");
  fips_allowed("ccpbkdf2_hmac", "ccsha384_di");
  fips_allowed("ccpbkdf2_hmac", "ccsha512_di");
  fips_allowed("ccpbkdf2_hmac", "ccsha512_256_di");
  fips_allowed("ccpbkdf2_hmac", "ccsha3_224_di");
  fips_allowed("ccpbkdf2_hmac", "ccsha3_256_di");
  fips_allowed("ccpbkdf2_hmac", "ccsha3_384_di");
  fips_allowed("ccpbkdf2_hmac", "ccsha3_512_di");
  v83 = fips_allowed("ccmd2_di", 0);
  v82 = fips_allowed("ccmd4_di", 0);
  v81 = fips_allowed_mode_("ccrc2_ecb_decrypt_mode", 16);
  v80 = fips_allowed_mode_("ccrc2_ecb_encrypt_mode", 16);
  v79 = fips_allowed_mode_("ccrc2_cbc_decrypt_mode", 16);
  v78 = fips_allowed_mode_("ccrc2_cbc_encrypt_mode", 16);
  v77 = fips_allowed_mode_("ccrc2_cfb_decrypt_mode", 16);
  v76 = fips_allowed_mode_("ccrc2_cfb_encrypt_mode", 16);
  v75 = fips_allowed_mode_("ccrc2_cfb8_decrypt_mode", 16);
  v74 = fips_allowed_mode_("ccrc2_cfb8_encrypt_mode", 16);
  v73 = fips_allowed_mode_("ccrc2_ctr_crypt_mode", 16);
  v72 = fips_allowed_mode_("ccrc2_ofb_crypt_mode", 16);
  v71 = fips_allowed("ccrc4", 0);
  v70 = fips_allowed("ccrmd160_di", 0);
  v69 = fips_allowed("ccrsa_verify_pss_digest", "1024");
  v68 = fips_allowed("ccrsa_verify_pss_digest", "2048");
  v67 = fips_allowed("ccrsa_verify_pss_digest", "3072");
  v66 = fips_allowed("ccrsa_verify_pss_digest", "4096");
  v65 = fips_allowed("ccrsa_verify_pkcs1v15_digest", "1024");
  v64 = fips_allowed("ccrsa_verify_pkcs1v15_digest", "2048");
  v63 = fips_allowed("ccrsa_verify_pkcs1v15_digest", "3072");
  v62 = fips_allowed("ccrsa_verify_pkcs1v15_digest", "4096");
  v61 = fips_allowed("ccrsa_encrypt_oaep", "1024");
  v60 = fips_allowed("ccrsa_decrypt_oaep", "1024");
  v59 = fips_allowed("ccrsa_sign_pss", "2048");
  v58 = fips_allowed("ccrsa_sign_pss", "3072");
  v57 = fips_allowed("ccrsa_sign_pss", "4096");
  v56 = fips_allowed("ccrsa_sign_pkcs1v15", "2048");
  v55 = fips_allowed("ccrsa_sign_pkcs1v15", "3072");
  v54 = fips_allowed("ccrsa_sign_pkcs1v15", "4096");
  v53 = fips_allowed("ccsae_init", 0);
  v52 = fips_allowed("ccsae_init_p256_sha256", 0);
  v51 = fips_allowed("ccsae_ctr_hmac_fixed", 0);
  v50 = fips_allowed("ccsae_get_keys", 0);
  v49 = fips_allowed("ccscrypt", 0);
  v48 = fips_allowed("ccsigma_init", 0);
  v47 = fips_allowed("ccsigma_sign", 0);
  v46 = fips_allowed("ccsigma_verify", 0);
  v45 = fips_allowed("ccsigma_seal", 0);
  v44 = fips_allowed("ccspake_kex_generate", 0);
  v43 = fips_allowed("ccspake_mac_hkdf_cmac_aes128_sha256", 0);
  v42 = fips_allowed("ccspake_mac_hkdf_hmac_compute", 0);
  v41 = fips_allowed("ccspake_cp_256", 0);
  v40 = fips_allowed("ccspake_cp_384", 0);
  v39 = fips_allowed("ccspake_cp_521", 0);
  v38 = fips_allowed("ccspake_mac_hkdf_hmac_sha256", 0);
  v37 = fips_allowed("ccspake_mac_hkdf_hmac_sha512", 0);
  v18 = fips_allowed("ccspake_kex_process", 0);
  v19 = fips_allowed("ccspake_kex_generate", 0);
  v20 = fips_allowed("ccspake_mac_hkdf_derive", 0);
  v21 = fips_allowed("ccss_shamir_parameters_init", 0);
  v22 = fips_allowed("ccss_shamir_share_generator_init", 0);
  v23 = fips_allowed("ccss_shamir_share_generator_generate_share", 0);
  v24 = fips_allowed("NULL", 0);
  v25 = fips_allowed("NULL", "42");
  v26 = fips_allowed_mode_("ccaes_ecb_encrypt_mode", 12);
  v27 = fips_allowed_mode_("ccdes3_ecb_encrypt_mode", 42);
  v28 = fips_allowed_mode_("ccdes_ecb_encrypt_mode", 12);
  v29 = v350 && v348 && v346 && v344 && v342 && v340 && v338 && v335 && v333 && v331 && v330 && v329 && v328;
  if (v324)
    v29 = 0;
  if (v336)
    v29 = 0;
  v30 = v29 & v332;
  if (v334)
    v30 = 0;
  v31 = v30 & (v321 && v320 && v319);
  if (v327)
    v31 = 0;
  if (v326)
    v31 = 0;
  if (v325)
    v31 = 0;
  v32 = v31 & v322;
  if (v323)
    v32 = 0;
  v33 = v32 & (v318
            && v317
            && v316
            && v315
            && v314
            && v313
            && v312
            && v311
            && v310
            && v309
            && v308
            && v307
            && v306
            && v305
            && v304
            && v303) & (v302
                     && v301
                     && v300
                     && v299
                     && v298
                     && v297
                     && v296
                     && v295
                     && v294
                     && v293
                     && v292
                     && v291
                     && v290
                     && v289
                     && v288
                     && v287
                     && v286) & (v285
                              && v284
                              && v283
                              && v282
                              && v281
                              && v280
                              && v279
                              && v278
                              && v277
                              && v276
                              && v275
                              && v274
                              && v273
                              && v272
                              && v271
                              && v270
                              && v269
                              && v268) & (v267
                                       && v266
                                       && v265
                                       && v264
                                       && v263
                                       && v262
                                       && v261
                                       && v260
                                       && v259
                                       && v258
                                       && v257
                                       && v256
                                       && v255
                                       && v254
                                       && v253
                                       && v252
                                       && v251
                                       && v250
                                       && v249) & (v248
                                                && v247
                                                && v246
                                                && v245
                                                && v244
                                                && v243
                                                && v242
                                                && v241
                                                && v240
                                                && v239
                                                && v238
                                                && v237
                                                && v236
                                                && v235
                                                && v234
                                                && v233
                                                && v231
                                                && v229
                                                && v226
                                                && v224) & (v222
                                                         && v219
                                                         && v217
                                                         && v216
                                                         && v215
                                                         && v214
                                                         && v212
                                                         && v211
                                                         && v210);
  if (!v213)
    v33 = 0;
  if (!v232)
    v33 = 0;
  if (!v230)
    v33 = 0;
  if (!v228)
    v33 = 0;
  if (!v227)
    v33 = 0;
  if (!v225)
    v33 = 0;
  if (!v223)
    v33 = 0;
  if (!v221)
    v33 = 0;
  v34 = v33 & v218;
  if (!v220)
    v34 = 0;
  v35 = v34 & (v209
            && v208
            && v207
            && v206
            && v205
            && v204
            && v203
            && v202
            && v201
            && v199
            && v200
            && v198
            && v197
            && v196
            && v195
            && v194
            && v193
            && v192
            && v191
            && v190
            && v189
            && v188
            && v182
            && v185
            && v180
            && v178
            && v175
            && v171
            && v170
            && v168
            && v166
            && v163) & (v161 && v159 && v157 && v154 && v152 && v150 && v148 && v146 && v143);
  if (v173)
    v35 = 0;
  if (v187)
    v35 = 0;
  if (v186)
    v35 = 0;
  if (v184)
    v35 = 0;
  if (v183)
    v35 = 0;
  if (v181)
    v35 = 0;
  if (v179)
    v35 = 0;
  if (v177)
    v35 = 0;
  if (v176)
    v35 = 0;
  if (v174)
    v35 = 0;
  if (v172)
    v35 = 0;
  if (v169)
    v35 = 0;
  if (v167)
    v35 = 0;
  if (v165)
    v35 = 0;
  if (v164)
    v35 = 0;
  if (v162)
    v35 = 0;
  if (v160)
    v35 = 0;
  if (v158)
    v35 = 0;
  if (v156)
    v35 = 0;
  if (v155)
    v35 = 0;
  if (v153)
    v35 = 0;
  if (v151)
    v35 = 0;
  if (v149)
    v35 = 0;
  if (v147)
    v35 = 0;
  if (v145)
    v35 = 0;
  if (v144)
    v35 = 0;
  if (v142)
    v35 = 0;
  if (v141)
    v35 = 0;
  if (v140)
    v35 = 0;
  if (v139)
    v35 = 0;
  if (v138)
    v35 = 0;
  if (v137)
    v35 = 0;
  if (v136)
    v35 = 0;
  if (v135)
    v35 = 0;
  if (v134)
    v35 = 0;
  if (v133)
    v35 = 0;
  if (v132)
    v35 = 0;
  if (v131)
    v35 = 0;
  if (v130)
    v35 = 0;
  if (v129)
    v35 = 0;
  if (v128)
    v35 = 0;
  if (v127)
    v35 = 0;
  if (v126)
    v35 = 0;
  if (v125)
    v35 = 0;
  if (v124)
    v35 = 0;
  if (v123)
    v35 = 0;
  if (v122)
    v35 = 0;
  if (v121)
    v35 = 0;
  if (v120)
    v35 = 0;
  if (v119)
    v35 = 0;
  if (v118)
    v35 = 0;
  if (v117)
    v35 = 0;
  if (v116)
    v35 = 0;
  if (v115)
    v35 = 0;
  if (v114)
    v35 = 0;
  if (v113)
    v35 = 0;
  if (v112)
    v35 = 0;
  if (v111)
    v35 = 0;
  if (v110)
    v35 = 0;
  if (v109)
    v35 = 0;
  if (v108)
    v35 = 0;
  if (v107)
    v35 = 0;
  if (v106)
    v35 = 0;
  if (v105)
    v35 = 0;
  if (v104)
    v35 = 0;
  if (v103)
    v35 = 0;
  if (v102)
    v35 = 0;
  if (v101)
    v35 = 0;
  if (v100)
    v35 = 0;
  if (v99)
    v35 = 0;
  if (v98)
    v35 = 0;
  if (v97)
    v35 = 0;
  if (v96)
    v35 = 0;
  if (v95)
    v35 = 0;
  if (v94)
    v35 = 0;
  if (v93)
    v35 = 0;
  if (v92)
    v35 = 0;
  if (v91)
    v35 = 0;
  if (v90)
    v35 = 0;
  if (v89)
    v35 = 0;
  if (v88)
    v35 = 0;
  if (v87)
    v35 = 0;
  if (v86)
    v35 = 0;
  if (v85)
    v35 = 0;
  if (v84)
    v35 = 0;
  if (v83)
    v35 = 0;
  if (v82)
    v35 = 0;
  if (v81)
    v35 = 0;
  if (v80)
    v35 = 0;
  if (v79)
    v35 = 0;
  if (v78)
    v35 = 0;
  if (v77)
    v35 = 0;
  if (v76)
    v35 = 0;
  if (v75)
    v35 = 0;
  if (v74)
    v35 = 0;
  if (v73)
    v35 = 0;
  if (v72)
    v35 = 0;
  if (v71)
    v35 = 0;
  if (v70)
    v35 = 0;
  if (v69)
    v35 = 0;
  if (v68)
    v35 = 0;
  if (v67)
    v35 = 0;
  if (v66)
    v35 = 0;
  if (v65)
    v35 = 0;
  if (v64)
    v35 = 0;
  if (v63)
    v35 = 0;
  if (v62)
    v35 = 0;
  if (v61)
    v35 = 0;
  if (v60)
    v35 = 0;
  if (v59)
    v35 = 0;
  if (v58)
    v35 = 0;
  if (v57)
    v35 = 0;
  if (v56)
    v35 = 0;
  if (v55)
    v35 = 0;
  if (v54)
    v35 = 0;
  if (v53)
    v35 = 0;
  if (v52)
    v35 = 0;
  if (v51)
    v35 = 0;
  if (v50)
    v35 = 0;
  if (v49)
    v35 = 0;
  if (v48)
    v35 = 0;
  if (v47)
    v35 = 0;
  if (v46)
    v35 = 0;
  if (v45)
    v35 = 0;
  if (v44)
    v35 = 0;
  if (v43)
    v35 = 0;
  if (v42)
    v35 = 0;
  if (v41)
    v35 = 0;
  if (v40)
    v35 = 0;
  if (v39)
    v35 = 0;
  if (v38)
    v35 = 0;
  if (v37)
    v35 = 0;
  if (v18)
    v35 = 0;
  if (v19)
    v35 = 0;
  if (v20)
    v35 = 0;
  if (v21)
    v35 = 0;
  if (v22)
    v35 = 0;
  if (v23)
    v35 = 0;
  if (v24)
    v35 = 0;
  if (v25)
    v35 = 0;
  if (v26)
    v35 = 0;
  if (v27)
    v35 = 0;
  if (v28)
    v35 = 0;
  if ((v35 & v351) != 0)
    return 0;
  else
    return 4294967224;
}

uint64_t ccentropy_add_entropy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  char v5;
  uint64_t (*v11)(void);
  uint64_t v12;
  char v14;

  v5 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v14 = v5;
  if (a5)
    *a5 = 0;
  v11 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 8);
  if (v11)
    v12 = v11();
  else
    v12 = 4294967123;
  cc_disable_dit(&v14);
  return v12;
}

uint64_t ccentropy_reset(uint64_t a1)
{
  char v1;
  uint64_t (*v7)(void);
  uint64_t v8;
  char v10;

  v1 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v10 = v1;
  v7 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 16);
  if (v7)
    v8 = v7();
  else
    v8 = 4294967123;
  cc_disable_dit(&v10);
  return v8;
}

void *ccsrp_gp_rfc5054_2048()
{
  return &_ccsrp_gp_rfc5054_2048;
}

uint64_t ccpad_pkcs7_encrypt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v12;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;

  v12 = 0;
  v22 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v12 = 1;
    }
  }
  v22 = v12;
  v18 = *(_QWORD *)(a1 + 8);
  v19 = (v18 - 1) & a4;
  v20 = a4 - v19;
  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(a1 + 24))(a2, a3, (a4 - v19) / v18, a5, a6);
  memcpy((void *)(a6 + v20), (const void *)(a5 + v20), (v18 - 1) & a4);
  memset((void *)(a6 + a4), v18 - v19, v18 - v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 24))(a2, a3, 1, a6 + v20, a6 + v20);
  cc_disable_dit(&v22);
  return v20 + v18;
}

uint64_t ccder_sizeof_implicit_octet_string(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;

  v4 = ccn_write_uint_size(a2, a3);
  return ccder_sizeof(a1, v4);
}

_BYTE *ccmode_factory_cfb8_encrypt(_QWORD *a1, _QWORD *a2)
{
  char v2;
  char v9;

  v2 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v9 = v2;
  *a1 = ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) + ((2 * a2[1] + 14) & 0xFFFFFFFFFFFFFFF0) + 8;
  a1[1] = 1;
  a1[2] = ccmode_cfb8_init;
  a1[3] = ccmode_cfb8_encrypt;
  a1[4] = a2;
  return cc_disable_dit(&v9);
}

uint64_t ccrng_pbkdf2_prng_init(char *a1, unint64_t a2, uint64_t a3, uint64_t a4, size_t a5, char *a6, unint64_t a7)
{
  char v13;
  uint64_t v19;
  size_t *v20;
  char v22;

  v13 = 0;
  v22 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v13 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v13 = 1;
    }
  }
  v22 = v13;
  if (a2 <= 0x1000)
  {
    *(_QWORD *)a1 = ccrng_pbkdf2_prng_generate;
    *((_QWORD *)a1 + 1) = a2;
    v20 = (size_t *)ccsha256_di();
    v19 = ccpbkdf2_hmac(v20, a3, a4, a5, a6, a7, *((_QWORD *)a1 + 1), &a1[-*((_QWORD *)a1 + 1) + 4112]);
  }
  else
  {
    *((_QWORD *)a1 + 1) = 0;
    v19 = 4294967289;
  }
  cc_disable_dit(&v22);
  return v19;
}

uint64_t ccrng_pbkdf2_prng_generate(uint64_t a1, size_t __n, void *__dst)
{
  size_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 < __n)
    return 4294967286;
  memcpy(__dst, (const void *)(a1 - v3 + 4112), __n);
  result = 0;
  *(_QWORD *)(a1 + 8) -= __n;
  return result;
}

BOOL ccwrap_argsvalid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((a3 | a2) & 7) == 0
      && *(_QWORD *)(a1 + 8) == 16
      && a2 + 8 == a3
      && (unint64_t)(a2 - 16) < 0xFFF8;
}

uint64_t ccspake_prover_init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, unsigned __int8 *a8, unsigned __int8 *a9)
{
  char v16;
  rsize_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t scalar_fips_extrabits;
  _QWORD *v27;
  char v29;

  v16 = 0;
  v29 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v16 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v16 = 1;
    }
  }
  v29 = v16;
  v22 = ccspake_sizeof_ctx(a2);
  cc_clear(v22, (void *)a1);
  if (*(_DWORD *)a2)
  {
    v23 = 4294967289;
  }
  else
  {
    v24 = ccspake_sizeof_w(a2);
    v23 = 4294967289;
    if (a5 <= 0x14 && v24 == a7)
    {
      *(_QWORD *)a1 = a2;
      *(_QWORD *)(a1 + 8) = a3;
      *(_QWORD *)(a1 + 16) = a4;
      *(_QWORD *)(a1 + 32) = a5;
      *(_BYTE *)(a1 + 24) = 1;
      *(_BYTE *)(a1 + 60) = CCSPAKE_STATE_INIT;
      if (a5)
        v24 = __memcpy_chk();
      v25 = (_QWORD *)(*(uint64_t (**)(unint64_t))(a2 + 8))(v24);
      (*(void (**)(void))(*(_QWORD *)a1 + 8))();
      scalar_fips_extrabits = ccec_generate_scalar_fips_extrabits(v25, a7, a8, (char *)(a1 + 336));
      if ((_DWORD)scalar_fips_extrabits)
      {
        v23 = scalar_fips_extrabits;
      }
      else
      {
        v27 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)a1 + 8))();
        v23 = ccec_generate_scalar_fips_extrabits(v25, a7, a9, (char *)(a1 + 336 + 8 * *v27));
        if (!(_DWORD)v23)
          ccspake_transcript_init(a1);
      }
    }
  }
  cc_disable_dit(&v29);
  return v23;
}

uint64_t ccspake_prover_initialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char *a6, size_t a7, char *a8, size_t a9, char *a10, unint64_t a11, unsigned __int8 *a12, unsigned __int8 *a13)
{
  char v19;
  rsize_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t uint;
  _QWORD *v29;
  uint64_t v30;
  char v34;

  v19 = 0;
  v34 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v19 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v19 = 1;
    }
  }
  v34 = v19;
  if (!*(_DWORD *)a2)
  {
    if (!((unint64_t)a8 | (unint64_t)a10))
    {
      uint = ccspake_prover_init(a1, a2, a3, a4, a5, (uint64_t)a6, a11, a12, a13);
LABEL_14:
      v30 = uint;
      goto LABEL_15;
    }
LABEL_12:
    v30 = 4294967289;
    goto LABEL_15;
  }
  if (!a5 || ccspake_sizeof_w(a2) != a11)
    goto LABEL_12;
  v25 = ccspake_sizeof_ctx(a2);
  v26 = cc_clear(v25, (void *)a1);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 60) = CCSPAKE_STATE_INIT;
  v27 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(a2 + 8))(v26);
  (*(void (**)(void))(*(_QWORD *)a1 + 8))();
  uint = ccn_read_uint(v27, (_QWORD *)(a1 + 336), a11, a12);
  if ((_DWORD)uint)
    goto LABEL_14;
  v29 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)a1 + 8))();
  uint = ccn_read_uint(v27, (_QWORD *)(a1 + 336 + 8 * *v29), a11, a13);
  if ((_DWORD)uint)
    goto LABEL_14;
  ccspake_transcript_init(a1);
  ccspake_transcript_begin(a1, a5, a6, a7, a8, a9, a10);
  v30 = 0;
LABEL_15:
  cc_disable_dit(&v34);
  return v30;
}

uint64_t ccspake_verifier_init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, unsigned __int8 *a8, uint64_t a9)
{
  char v16;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t inited;
  _QWORD v35[4];
  void (*v36)(uint64_t);
  char v37;

  v16 = 0;
  v37 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v16 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v16 = 1;
    }
  }
  v37 = v16;
  v22 = (uint64_t *)(*(uint64_t (**)(void))(a2 + 8))();
  v23 = *v22;
  v24 = sizeof_struct_cche_galois_key();
  v25 = sizeof_struct_ccpolyzp_po2cyc();
  v26 = 20 * v23;
  if (20 * v23 <= 4 * v23 + (v25 + 127) / v25 + 3)
    v26 = 4 * v23 + (v25 + 127) / v25 + 3;
  v27 = cc_malloc_clear(8 * (v26 + (v24 + v25 + v25 * 3 * v23 - 1) / v25));
  v35[0] = v27;
  v28 = *v22;
  v29 = sizeof_struct_cche_galois_key();
  v30 = sizeof_struct_ccpolyzp_po2cyc();
  v31 = 20 * v28;
  if (20 * v28 <= 4 * v28 + (v30 + 127) / v30 + 3)
    v31 = 4 * v28 + (v30 + 127) / v30 + 3;
  v35[1] = v31 + (v29 + v30 + v30 * 3 * v28 - 1) / v30;
  v35[2] = 0;
  v35[3] = cc_ws_alloc;
  v36 = cc_ws_free;
  if (v27)
  {
    inited = ccspake_verifier_init_ws((uint64_t)v35, a1, a2, a3, a4, a5, a6, a7, a8, a9);
    v36((uint64_t)v35);
  }
  else
  {
    inited = 4294967283;
  }
  cc_disable_dit(&v37);
  return inited;
}

uint64_t ccspake_verifier_init_ws(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, unsigned __int8 *a9, uint64_t a10)
{
  rsize_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t **v22;
  _QWORD *v23;
  uint64_t v24;

  v17 = ccspake_sizeof_ctx(a3);
  cc_clear(v17, (void *)a2);
  if (*(_DWORD *)a3 || ccspake_sizeof_w(a3) != a8)
    return 4294967289;
  v18 = ccspake_sizeof_point(a3);
  result = 4294967289;
  if (a6 <= 0x14 && v18 == a10)
  {
    v20 = (uint64_t *)(*(uint64_t (**)(uint64_t))(a3 + 8))(4294967289);
    v24 = *(_QWORD *)(a1 + 16);
    v21 = (uint64_t **)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, (unint64_t)(24 * *v20 + 23) >> 3);
    v22 = v21;
    *v21 = v20;
    *(_QWORD *)a2 = a3;
    *(_QWORD *)(a2 + 8) = a4;
    *(_QWORD *)(a2 + 16) = a5;
    *(_QWORD *)(a2 + 32) = a6;
    *(_BYTE *)(a2 + 24) = 0;
    *(_BYTE *)(a2 + 60) = CCSPAKE_STATE_INIT;
    if (a6)
      v21 = (uint64_t **)__memcpy_chk();
    (*(void (**)(uint64_t **))(a3 + 8))(v21);
    result = ccec_generate_scalar_fips_extrabits_ws(a1, v20, a8, a9, (char *)(a2 + 336));
    if (!(_DWORD)result)
    {
      result = ccspake_import_pub_ws(a1);
      if (!(_DWORD)result)
      {
        v23 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)a2 + 8))();
        ccspake_store_pub_key(v22, (char *)(a2 + 336 + 8 * *v23));
        ccspake_transcript_init(a2);
        result = 0;
      }
    }
    *(_QWORD *)(a1 + 16) = v24;
  }
  return result;
}

uint64_t ccspake_verifier_initialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, size_t a5, char *a6, size_t a7, char *a8, size_t a9, char *a10, unint64_t a11, unsigned __int8 *a12, uint64_t a13)
{
  char v20;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  rsize_t v36;
  uint64_t v37;
  uint64_t uint;
  uint64_t inited;
  _QWORD *v40;
  uint64_t **v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD v46[2];
  uint64_t v47;
  uint64_t (*v48)(_QWORD *, uint64_t);
  void (*v49)(uint64_t);
  char v50[9];

  v20 = 0;
  v50[0] = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v20 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v20 = 1;
    }
  }
  v50[0] = v20;
  v26 = (uint64_t *)(*(uint64_t (**)(void))(a2 + 8))();
  v27 = *v26;
  v28 = sizeof_struct_cche_galois_key();
  v29 = sizeof_struct_ccpolyzp_po2cyc();
  v30 = 4 * v27 + (v29 + 127) / v29 + 3;
  if (20 * v27 > v30)
    v30 = 20 * v27;
  v31 = cc_malloc_clear(8 * v30 + 16 * ((v28 + v29 + v29 * 3 * v27 - 1) / v29));
  v46[0] = v31;
  v32 = *v26;
  v33 = sizeof_struct_cche_galois_key();
  v34 = sizeof_struct_ccpolyzp_po2cyc();
  v35 = 4 * v32 + (v34 + 127) / v34 + 3;
  if (20 * v32 > v35)
    v35 = 20 * v32;
  v46[1] = v35 + 2 * ((v33 + v34 + v34 * 3 * v32 - 1) / v34);
  v47 = 0;
  v48 = cc_ws_alloc;
  v49 = cc_ws_free;
  if (v31)
  {
    if (*(_DWORD *)a2)
    {
      if (a5 && ccspake_sizeof_point(a2) == a13 && ccspake_sizeof_w(a2) == a11)
      {
        v36 = ccspake_sizeof_ctx(a2);
        v37 = cc_clear(v36, (void *)a1);
        v43 = (unint64_t *)(*(uint64_t (**)(uint64_t))(a2 + 8))(v37);
        v44 = *v43;
        v42 = (uint64_t **)cc_ws_alloc(v46, (24 * *v43 + 23) >> 3);
        *v42 = (uint64_t *)v43;
        *(_QWORD *)a1 = a2;
        *(_QWORD *)(a1 + 8) = a3;
        *(_QWORD *)(a1 + 16) = a4;
        *(_QWORD *)(a1 + 32) = 0;
        *(_BYTE *)(a1 + 24) = 0;
        *(_BYTE *)(a1 + 60) = CCSPAKE_STATE_INIT;
        (*(void (**)(void))(a2 + 8))();
        uint = ccn_read_uint(v44, (_QWORD *)(a1 + 336), a11, a12);
        if ((_DWORD)uint)
        {
          inited = uint;
        }
        else
        {
          inited = ccspake_import_pub_ws((uint64_t)v46);
          if (!(_DWORD)inited)
          {
            v40 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)a1 + 8))();
            ccspake_store_pub_key(v42, (char *)(a1 + 336 + 8 * *v40));
            ccspake_transcript_init(a1);
            ccspake_transcript_begin(a1, a5, a6, a7, a8, a9, a10);
          }
        }
        v47 = 0;
        goto LABEL_22;
      }
    }
    else if (!((unint64_t)a8 | (unint64_t)a10))
    {
      inited = ccspake_verifier_init_ws((uint64_t)v46, a1, a2, a3, a4, a5, (uint64_t)a6, a11, a12, a13);
      goto LABEL_22;
    }
    inited = 4294967289;
LABEL_22:
    v49((uint64_t)v46);
    goto LABEL_23;
  }
  inited = 4294967283;
LABEL_23:
  cc_disable_dit(v50);
  return inited;
}

uint64_t ccecies_encrypt_gcm_encrypt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C874D8];
  v8 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v8 + 8) != 4073947)
    return 4294967291;
  v23 = a8;
  v24 = &v22;
  v15 = a2 + *(unsigned int *)(a1 + 24);
  MEMORY[0x1E0C86820](a1, a2, a3, a2);
  v17 = (char *)&v22 - v16;
  v18 = ccgcm_init(v8);
  v19 = ccgcm_set_iv(v8, (uint64_t)v17, 16, v15) | v18;
  if (a3 && a4)
    v19 |= ccgcm_aad(v8, (uint64_t)v17, a3, a4);
  v20 = ccgcm_update(v8, (uint64_t)v17, a5, a6, a7) | v19;
  if (!(_DWORD)v20)
    v20 = ccgcm_finalize(v8, (uint64_t)v17, *(unsigned int *)(a1 + 28), v23);
  cc_clear(*(_QWORD *)v8, v17);
  return v20;
}

uint64_t CC_CAST_set_key(uint64_t result, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v3;
  __int128 *v4;
  unint64_t v5;
  int v6;
  _BOOL4 v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int *v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  BOOL v85;
  uint64_t v86;
  int32x4_t v87;
  int8x16_t v88;
  _BYTE v89[128];
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  float32x4x2_t v95;

  v94 = *MEMORY[0x1E0C874D8];
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  v3 = 16;
  if (a2 < 0x10)
    v3 = a2;
  if (v3)
  {
    v4 = &v90;
    v5 = v3;
    do
    {
      v6 = *a3++;
      *(_DWORD *)v4 = v6;
      v4 = (__int128 *)((char *)v4 + 4);
      --v5;
    }
    while (v5);
    v7 = v3 < 0xB;
  }
  else
  {
    v7 = 1;
  }
  v8 = v90;
  v9 = DWORD1(v90) << 16;
  *(_DWORD *)(result + 128) = v7;
  v10 = v9 | (v8 << 24) | (DWORD2(v90) << 8) | HIDWORD(v90);
  v11 = (DWORD1(v91) << 16) | ((_DWORD)v91 << 24) | (DWORD2(v91) << 8) | HIDWORD(v91);
  v12 = DWORD1(v92);
  v13 = DWORD2(v92);
  v14 = HIDWORD(v92);
  v15 = (DWORD1(v92) << 16) | ((_DWORD)v92 << 24) | (DWORD2(v92) << 8) | HIDWORD(v92);
  v16 = v93;
  v17 = DWORD1(v93);
  v18 = DWORD2(v93);
  v19 = (DWORD1(v93) << 16) | ((_DWORD)v93 << 24) | (DWORD2(v93) << 8) | HIDWORD(v93);
  v20 = CC_CAST_S_table5[HIDWORD(v93)];
  v21 = (int *)v89;
  v22 = CC_CAST_S_table6[v92];
  do
  {
    v23 = CC_CAST_S_table4[v17] ^ v10 ^ v20 ^ CC_CAST_S_table6[v16] ^ CC_CAST_S_table7[v18] ^ v22;
    v24 = CC_CAST_S_table6[BYTE2(v23)];
    v25 = v23;
    v26 = CC_CAST_S_table4[HIBYTE(v23)] ^ v15 ^ CC_CAST_S_table5[BYTE1(v23)] ^ CC_CAST_S_table7[v23] ^ CC_CAST_S_table7[v13] ^ v24;
    v27 = CC_CAST_S_table7[HIBYTE(v26)];
    v28 = CC_CAST_S_table5[BYTE1(v26)] ^ CC_CAST_S_table6[BYTE2(v26)];
    v29 = v19 ^ CC_CAST_S_table4[v12] ^ CC_CAST_S_table4[v26] ^ v28 ^ v27;
    v30 = CC_CAST_S_table4[BYTE1(v29)];
    v31 = CC_CAST_S_table5[BYTE2(v29)];
    v32 = v11 ^ CC_CAST_S_table6[v29] ^ CC_CAST_S_table7[HIBYTE(v29)] ^ CC_CAST_S_table5[v14] ^ v30 ^ v31;
    v33 = CC_CAST_S_table7[BYTE1(v26)];
    v34 = v28 ^ v27 ^ CC_CAST_S_table5[v29] ^ v30;
    v35 = CC_CAST_S_table6[v23];
    v36 = CC_CAST_S_table7[BYTE1(v23)];
    v37 = CC_CAST_S_table6[BYTE2(v29)];
    *v21 = CC_CAST_S_table4[HIBYTE(v29)] ^ CC_CAST_S_table6[v26] ^ CC_CAST_S_table4[BYTE1(v23)] ^ v31 ^ v33;
    v21[1] = v34;
    v38 = CC_CAST_S_table4[BYTE2(v26)] ^ CC_CAST_S_table5[v26] ^ CC_CAST_S_table6[HIBYTE(v26)] ^ CC_CAST_S_table6[HIBYTE(v23)] ^ v33 ^ v29;
    v39 = (LOBYTE(CC_CAST_S_table4[BYTE2(v26)]) ^ LOBYTE(CC_CAST_S_table5[v26]) ^ LOBYTE(CC_CAST_S_table6[HIBYTE(v26)]) ^ LOBYTE(CC_CAST_S_table6[HIBYTE(v23)]) ^ v33 ^ v29);
    v40 = CC_CAST_S_table5[BYTE1(v38)];
    v41 = CC_CAST_S_table4[HIBYTE(v38)] ^ CC_CAST_S_table6[BYTE2(v38)] ^ CC_CAST_S_table7[v39] ^ v23 ^ v36 ^ v40;
    v42 = CC_CAST_S_table5[BYTE1(v41)] ^ CC_CAST_S_table4[v41];
    v43 = CC_CAST_S_table4[BYTE1(v32)] ^ CC_CAST_S_table5[v32] ^ CC_CAST_S_table7[HIBYTE(v23)] ^ CC_CAST_S_table7[HIBYTE(v32)] ^ v24;
    v44 = CC_CAST_S_table6[BYTE2(v41)] ^ CC_CAST_S_table7[HIBYTE(v41)] ^ CC_CAST_S_table4[BYTE2(v23)] ^ v26 ^ v42;
    v45 = v44;
    v46 = BYTE2(v44);
    v47 = CC_CAST_S_table7[HIBYTE(v44)];
    v48 = CC_CAST_S_table4[BYTE1(v44)] ^ CC_CAST_S_table5[BYTE2(v44)] ^ CC_CAST_S_table6[v44] ^ v47 ^ CC_CAST_S_table5[v25] ^ v32;
    v49 = (LOBYTE(CC_CAST_S_table4[BYTE1(v44)]) ^ LOBYTE(CC_CAST_S_table5[BYTE2(v44)]) ^ LOBYTE(CC_CAST_S_table6[v44]) ^ v47 ^ LOBYTE(CC_CAST_S_table5[v25]) ^ v32);
    v50 = CC_CAST_S_table4[v39];
    v21[2] = CC_CAST_S_table5[BYTE2(v32)] ^ CC_CAST_S_table4[HIBYTE(v32)] ^ v35 ^ v37 ^ v36;
    v21[3] = v43;
    v51 = CC_CAST_S_table6[HIBYTE(v48)];
    v52 = CC_CAST_S_table6[HIBYTE(v44)];
    v53 = v50 ^ CC_CAST_S_table4[HIBYTE(v44)] ^ v40 ^ CC_CAST_S_table7[BYTE2(v48)];
    v54 = CC_CAST_S_table5[HIBYTE(v38)] ^ CC_CAST_S_table4[BYTE2(v38)] ^ CC_CAST_S_table6[BYTE1(v48)];
    v55 = CC_CAST_S_table7[v49] ^ CC_CAST_S_table5[BYTE2(v48)];
    v56 = CC_CAST_S_table5[HIBYTE(v41)] ^ CC_CAST_S_table4[BYTE2(v41)] ^ CC_CAST_S_table6[BYTE1(v44)] ^ CC_CAST_S_table7[v44] ^ CC_CAST_S_table7[v41];
    v21[6] = CC_CAST_S_table7[BYTE2(v44)] ^ CC_CAST_S_table6[v39] ^ v42 ^ v52;
    v21[7] = v56;
    v57 = CC_CAST_S_table4[BYTE2(v48)] ^ CC_CAST_S_table5[v49];
    v58 = CC_CAST_S_table7[BYTE1(v48)] ^ v38;
    v21[4] = v53 ^ v51;
    v21[5] = v54 ^ v55;
    v59 = v57 ^ v58 ^ v51 ^ v52;
    v60 = CC_CAST_S_table5[BYTE1(v59)];
    v61 = v59;
    v62 = CC_CAST_S_table4[HIBYTE(v59)] ^ CC_CAST_S_table6[BYTE2(v59)] ^ CC_CAST_S_table7[v59] ^ CC_CAST_S_table7[BYTE1(v44)] ^ v44 ^ v60;
    v63 = CC_CAST_S_table5[BYTE1(v62)] ^ CC_CAST_S_table4[v62];
    v64 = CC_CAST_S_table6[BYTE2(v62)] ^ CC_CAST_S_table7[HIBYTE(v62)] ^ CC_CAST_S_table4[v46] ^ v48 ^ v63;
    v65 = CC_CAST_S_table4[BYTE1(v64)] ^ CC_CAST_S_table5[BYTE2(v64)] ^ CC_CAST_S_table6[v64] ^ CC_CAST_S_table7[HIBYTE(v64)] ^ CC_CAST_S_table5[v45] ^ v41;
    v66 = CC_CAST_S_table4[BYTE2(v62)];
    v67 = CC_CAST_S_table4[BYTE2(v59)];
    v68 = CC_CAST_S_table7[BYTE1(v62)];
    v69 = CC_CAST_S_table5[HIBYTE(v62)] ^ CC_CAST_S_table6[BYTE1(v64)] ^ CC_CAST_S_table7[v64] ^ v66 ^ v68;
    v10 = CC_CAST_S_table5[v62] ^ CC_CAST_S_table6[HIBYTE(v62)] ^ CC_CAST_S_table6[HIBYTE(v59)] ^ v66 ^ v68 ^ v64;
    v70 = CC_CAST_S_table6[BYTE2(v10)];
    v71 = CC_CAST_S_table4[v59] ^ CC_CAST_S_table6[HIBYTE(v65)] ^ CC_CAST_S_table7[BYTE2(v65)] ^ CC_CAST_S_table4[BYTE2(v64)];
    v11 = CC_CAST_S_table4[HIBYTE(v10)] ^ CC_CAST_S_table5[BYTE1(v10)] ^ CC_CAST_S_table7[v10] ^ CC_CAST_S_table7[BYTE1(v59)] ^ v59 ^ v70;
    v72 = (LOBYTE(CC_CAST_S_table4[HIBYTE(v10)]) ^ LOBYTE(CC_CAST_S_table5[BYTE1(v10)]) ^ LOBYTE(CC_CAST_S_table7[v10]) ^ LOBYTE(CC_CAST_S_table7[BYTE1(v59)]) ^ v59 ^ v70);
    v73 = CC_CAST_S_table5[HIBYTE(v59)] ^ CC_CAST_S_table6[BYTE1(v65)] ^ CC_CAST_S_table7[v65] ^ CC_CAST_S_table5[HIBYTE(v65)];
    v74 = CC_CAST_S_table4[(LOBYTE(CC_CAST_S_table4[HIBYTE(v10)]) ^ LOBYTE(CC_CAST_S_table5[BYTE1(v10)]) ^ LOBYTE(CC_CAST_S_table7[v10]) ^ LOBYTE(CC_CAST_S_table7[BYTE1(v59)]) ^ v59 ^ v70)];
    v21[10] = CC_CAST_S_table6[HIBYTE(v64)] ^ CC_CAST_S_table7[BYTE2(v64)] ^ CC_CAST_S_table6[BYTE1(v59)] ^ v63;
    v21[11] = v69;
    v75 = v71 ^ v60;
    v76 = CC_CAST_S_table6[BYTE2(v11)];
    v77 = CC_CAST_S_table7[HIBYTE(v11)];
    v78 = v74 ^ CC_CAST_S_table5[BYTE1(v11)] ^ v76 ^ v77;
    v21[8] = v75;
    v21[9] = v73 ^ v67;
    v15 = v78 ^ v62 ^ v67;
    v14 = (v78 ^ v62 ^ v67);
    v13 = BYTE1(v15);
    v79 = CC_CAST_S_table4[BYTE1(v15)];
    v12 = BYTE2(v15);
    v80 = CC_CAST_S_table5[v61] ^ v65;
    v81 = CC_CAST_S_table5[BYTE2(v15)];
    v19 = CC_CAST_S_table6[v14] ^ CC_CAST_S_table7[HIBYTE(v15)] ^ v80 ^ v79 ^ v81;
    v82 = CC_CAST_S_table4[HIBYTE(v15)] ^ CC_CAST_S_table6[v72] ^ CC_CAST_S_table7[BYTE1(v11)] ^ CC_CAST_S_table4[v10] ^ v81;
    v18 = BYTE1(v19);
    v17 = BYTE2(v19);
    v83 = CC_CAST_S_table5[v14] ^ CC_CAST_S_table5[v72] ^ v76 ^ v77 ^ v79;
    v16 = HIBYTE(v19);
    v21[12] = v82;
    v21[13] = v83;
    v20 = CC_CAST_S_table5[v19];
    v22 = CC_CAST_S_table6[HIBYTE(v15)];
    v84 = CC_CAST_S_table4[BYTE1(v19)] ^ CC_CAST_S_table7[HIBYTE(v10)] ^ CC_CAST_S_table7[BYTE2(v19)] ^ v20 ^ v70;
    v21[14] = CC_CAST_S_table5[BYTE2(v19)] ^ CC_CAST_S_table4[HIBYTE(v19)] ^ CC_CAST_S_table6[v10] ^ CC_CAST_S_table7[BYTE1(v10)] ^ v22;
    v21[15] = v84;
    v85 = v21 == (int *)v89;
    v21 += 16;
  }
  while (v85);
  v86 = 0;
  v87.i64[0] = 0x1000000010;
  v87.i64[1] = 0x1000000010;
  v88.i64[0] = 0x1F0000001FLL;
  v88.i64[1] = 0x1F0000001FLL;
  do
  {
    v95.val[0] = *(float32x4_t *)&v89[v86];
    v95.val[1] = (float32x4_t)vandq_s8((int8x16_t)vaddq_s32(*(int32x4_t *)&v89[v86 + 64], v87), v88);
    vst2q_f32((float *)result, v95);
    result += 32;
    v86 += 16;
  }
  while (v86 != 64);
  return result;
}

uint64_t *ccaes_ccm_decrypt_mode()
{
  unint64_t v0;
  unint64_t v1;
  void *v2;

  v0 = (*((_QWORD *)ccaes_ecb_encrypt_mode() + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  v1 = v0 + ((*(_QWORD *)ccaes_ecb_encrypt_mode() + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v2 = ccaes_ecb_encrypt_mode();
  ccm_decrypt_info = v1;
  qword_1F0454338 = (uint64_t)ccmode_ccm_init;
  unk_1F0454340 = ccmode_ccm_set_iv;
  qword_1F0454348 = (uint64_t)ccmode_ccm_cbcmac;
  unk_1F0454350 = ccaes_vng_ccm_decrypt_wrapper;
  unk_1F0454328 = xmmword_1DEE1AA30;
  qword_1F0454358 = (uint64_t)ccmode_ccm_finalize;
  unk_1F0454360 = ccmode_ccm_reset;
  qword_1F0454368 = (uint64_t)v2;
  unk_1F0454370 = 0;
  return &ccm_decrypt_info;
}

uint64_t ccrsa_oaep_decode_parameter_ws(uint64_t a1, uint64_t *a2, size_t *a3, void *a4, uint64_t a5, unint64_t *a6, size_t a7, char *a8)
{
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 *v20;
  size_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  size_t v30;
  int v31;
  uint64_t v32;
  int v34;
  int v35;
  unsigned int v36;
  _BYTE v37[64];
  char v38[64];
  char __s[64];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C874D8];
  v15 = *a2;
  v16 = a5 - 1;
  v17 = ccrsa_n_from_size(a5);
  ccn_swap(v17, a6);
  v18 = ccrsa_block_start(a5, a6, 0);
  if (v16 < ((2 * *a2) | 1uLL))
    return 4294967272;
  v20 = (unsigned __int8 *)v18;
  v21 = v16 - v15;
  v22 = (v16 - v15 + 7) >> 3;
  v32 = *(_QWORD *)(a1 + 16);
  v23 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v22);
  v24 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v22);
  ccdigest((uint64_t)a2, a7, a8, (uint64_t)__s);
  v25 = *a2;
  __memcpy_chk();
  memcpy(v23, &v20[v25 + 1], v21);
  ccmgf((uint64_t)a2, *a2, (uint64_t)v37, v21, (char *)v23);
  ccn_xor((unint64_t)(*a2 + 7) >> 3, (uint64_t)v38, (uint64_t)v38, (uint64_t)v37);
  ccmgf((uint64_t)a2, v21, v24, *a2, v38);
  ccn_xor(v22, (uint64_t)v23, (uint64_t)v23, v24);
  v34 = ((unint64_t)*v20 + 0xFFFFFFFF) >> 32;
  v35 = v34 | cc_cmp_safe(*a2, __s, (char *)v23);
  v26 = *a2;
  if (*a2 >= v21)
  {
    v27 = 0;
    v28 = 1;
  }
  else
  {
    v27 = 0;
    v28 = 1;
    do
    {
      v29 = v23[v26];
      v27 = v27 & (v28 - 1) | v26 & -v28;
      v28 &= ((v29 ^ 1uLL) + 0xFFFFFFFF) >> 32;
      v35 |= v28 & ((unint64_t)(v29 + 0xFFFFFFFFLL) >> 32);
      ++v26;
    }
    while (v26 < v21);
  }
  v36 = v35 | v28;
  if (!v36)
  {
    v30 = v21 + ~v27;
    if (*a3 < v30)
    {
      v31 = -23;
LABEL_14:
      v36 = v31;
      goto LABEL_15;
    }
    memcpy(a4, &v23[v27 + 1], v30);
    *a3 = v30;
  }
  if (v36)
  {
    v31 = -27;
    goto LABEL_14;
  }
LABEL_15:
  cc_clear(0x40uLL, __s);
  cc_clear(0x40uLL, v38);
  cc_clear(0x40uLL, v37);
  *(_QWORD *)(a1 + 16) = v32;
  return v36;
}

uint64_t ccrsa_oaep_decode_parameter(uint64_t *a1, size_t *a2, void *a3, uint64_t a4, unint64_t *a5, size_t a6, char *a7)
{
  char v14;
  unint64_t v20;
  uint64_t v21;
  _QWORD v23[4];
  void (*v24)(uint64_t);
  char v25;

  v14 = 0;
  v25 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v14 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v14 = 1;
    }
  }
  v25 = v14;
  v20 = ((unint64_t)(a4 + ~*a1 + 7) >> 2) & 0x3FFFFFFFFFFFFFFELL;
  v23[0] = cc_malloc_clear(8 * v20);
  v23[1] = v20;
  v23[2] = 0;
  v23[3] = cc_ws_alloc;
  v24 = cc_ws_free;
  if (v23[0])
  {
    v21 = ccrsa_oaep_decode_parameter_ws((uint64_t)v23, a1, a2, a3, a4, a5, a6, a7);
    v24((uint64_t)v23);
  }
  else
  {
    v21 = 4294967283;
  }
  cc_disable_dit(&v25);
  return v21;
}

uint64_t ccss_shamir_share_bag_add_share(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  char v16;

  v4 = 0;
  v16 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v16 = v4;
  v10 = *(_DWORD *)(a1 + 8);
  if (v10 >= **(_DWORD **)a1)
  {
    v14 = 4294967170;
  }
  else if (v10)
  {
    v11 = 0;
    while (1)
    {
      v12 = *(_DWORD *)(a2 + 8);
      if (v12 == ccss_shamir_share_bag_copy_ith_share_x(a1, v11))
        break;
      ++v11;
      v13 = *(_DWORD *)(a1 + 8);
      if (v11 >= v13)
        goto LABEL_13;
    }
    v14 = 4294967169;
  }
  else
  {
    v13 = 0;
LABEL_13:
    v14 = ccss_shamir_share_bag_set_ith_share((_QWORD *)a1, v13, a2);
    if (!(_DWORD)v14)
      ++*(_DWORD *)(a1 + 8);
  }
  cc_disable_dit(&v16);
  return v14;
}

uint64_t fipspost_post_ffdh(char a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t (*v31)(_QWORD *, uint64_t);
  void (*v32)(uint64_t);
  unint64_t v33;
  _OWORD v34[16];
  _OWORD v35[16];
  _BYTE __s1[256];
  _OWORD __s2[16];
  _OWORD v38[16];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C874D8];
  v2 = ccdh_gp_rfc3526group14();
  v3 = ccdh_ccn_size(v2);
  v4 = sizeof_struct_cche_galois_key();
  v5 = sizeof_struct_ccpolyzp_po2cyc();
  v6 = (v4 + v5 - 1) / v5;
  v7 = CCDH_POWER_BLINDED_WORKSPACE_N(v3);
  v29[0] = cc_malloc_clear(8 * (v6 + 2 * v3 + v7));
  v8 = ccdh_ccn_size(v2);
  v9 = sizeof_struct_cche_galois_key();
  v10 = sizeof_struct_ccpolyzp_po2cyc();
  v29[1] = (v9 + v10 - 1) / v10 + 2 * v8 + CCDH_POWER_BLINDED_WORKSPACE_N(v8);
  v30 = 0;
  v31 = cc_ws_alloc;
  v32 = cc_ws_free;
  if (v29[0])
  {
    v35[12] = xmmword_1DEE1AB00;
    v35[13] = unk_1DEE1AB10;
    v35[14] = xmmword_1DEE1AB20;
    v35[15] = unk_1DEE1AB30;
    v35[8] = xmmword_1DEE1AAC0;
    v35[9] = unk_1DEE1AAD0;
    v35[10] = xmmword_1DEE1AAE0;
    v35[11] = unk_1DEE1AAF0;
    v35[4] = xmmword_1DEE1AA80;
    v35[5] = unk_1DEE1AA90;
    v35[6] = xmmword_1DEE1AAA0;
    v35[7] = unk_1DEE1AAB0;
    v35[0] = xmmword_1DEE1AA40;
    v35[1] = unk_1DEE1AA50;
    v35[2] = xmmword_1DEE1AA60;
    v35[3] = unk_1DEE1AA70;
    v34[12] = xmmword_1DEE1AC00;
    v34[13] = unk_1DEE1AC10;
    v34[14] = xmmword_1DEE1AC20;
    v34[15] = unk_1DEE1AC30;
    v34[8] = xmmword_1DEE1ABC0;
    v34[9] = unk_1DEE1ABD0;
    v34[10] = xmmword_1DEE1ABE0;
    v34[11] = unk_1DEE1ABF0;
    v34[4] = xmmword_1DEE1AB80;
    v34[5] = unk_1DEE1AB90;
    v34[6] = xmmword_1DEE1ABA0;
    v34[7] = unk_1DEE1ABB0;
    v34[0] = xmmword_1DEE1AB40;
    v34[1] = unk_1DEE1AB50;
    v34[2] = xmmword_1DEE1AB60;
    v34[3] = unk_1DEE1AB70;
    v11 = ccdh_ccn_size(v2);
    v12 = (_QWORD *)cc_ws_alloc(v29, 2 * v11 + 2);
    if (ccdh_import_full((uint64_t)v2, 0x100uLL, (unsigned __int8 *)v35, 0x100uLL, (unsigned __int8 *)v34, v12))
    {
      v13 = mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccdh_import_full\n", v13, "fipspost_post_ffdh", 223);
      v14 = 0xFFFFFFFFLL;
LABEL_20:
      v32((uint64_t)v29);
      return v14;
    }
    v15 = ccdh_gp_rfc3526group14();
    v16 = (uint64_t)v15;
    v38[12] = xmmword_1DEE1AD00;
    v38[13] = unk_1DEE1AD10;
    v38[14] = xmmword_1DEE1AD20;
    v38[15] = unk_1DEE1AD30;
    v38[8] = xmmword_1DEE1ACC0;
    v38[9] = unk_1DEE1ACD0;
    v38[10] = xmmword_1DEE1ACE0;
    v38[11] = unk_1DEE1ACF0;
    v38[4] = xmmword_1DEE1AC80;
    v38[5] = unk_1DEE1AC90;
    v38[6] = xmmword_1DEE1ACA0;
    v38[7] = unk_1DEE1ACB0;
    v38[0] = xmmword_1DEE1AC40;
    v38[1] = unk_1DEE1AC50;
    v38[2] = xmmword_1DEE1AC60;
    v38[3] = unk_1DEE1AC70;
    __s2[12] = xmmword_1DEE1AE00;
    __s2[13] = unk_1DEE1AE10;
    __s2[14] = xmmword_1DEE1AE20;
    __s2[15] = unk_1DEE1AE30;
    __s2[8] = xmmword_1DEE1ADC0;
    __s2[9] = unk_1DEE1ADD0;
    __s2[10] = xmmword_1DEE1ADE0;
    __s2[11] = unk_1DEE1ADF0;
    __s2[4] = xmmword_1DEE1AD80;
    __s2[5] = unk_1DEE1AD90;
    __s2[6] = xmmword_1DEE1ADA0;
    __s2[7] = unk_1DEE1ADB0;
    __s2[0] = xmmword_1DEE1AD40;
    __s2[1] = unk_1DEE1AD50;
    __s2[2] = xmmword_1DEE1AD60;
    __s2[3] = unk_1DEE1AD70;
    if ((a1 & 0x10) != 0)
      LOBYTE(__s2[0]) = -98;
    v33 = 256;
    v17 = ccdh_ccn_size(v15);
    v18 = v30;
    v19 = (_QWORD *)v31(v29, v17 + 2);
    if (ccdh_import_pub(v16, 0x100uLL, (unsigned __int8 *)v38, v19))
    {
      mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccdh_import_pub\n");
    }
    else
    {
      if (!ccdh_compute_shared_secret_ws((uint64_t)v29, v12, v19, &v33, (uint64_t)__s1, (uint64_t (**)(_QWORD, uint64_t, uint64_t *))&ccrng_zero))
      {
        if (!memcmp(__s1, __s2, 0x100uLL) && v33 == 256)
        {
          v14 = 0;
        }
        else
        {
          v28 = mach_absolute_time();
          printf("FIPSPOST_USER [%llu] %s:%d: FAILED: memcmp\n", v28, "fipspost_post_ffdh_ws", 103);
          v14 = 4294967221;
        }
LABEL_12:
        v30 = v18;
        if ((a1 & 0x10) != 0)
        {
          v20 = ccdh_gp_rfc3526group14();
          v21 = v30;
          v22 = ccdh_pairwise_consistency_check_ws((uint64_t)v29, v20, (uint64_t (**)(_QWORD, uint64_t, uint64_t *))&ccrng_zero, v12);
          mach_absolute_time();
          if (v22)
            printf("FIPSPOST_USER [%llu] %s:%d: [PCT] CCDH_PAIRWISE_CONSISTENCY: expected SUCCESS\n");
          else
            printf("FIPSPOST_USER [%llu] %s:%d: FAILED: [PCT] CCDH_PAIRWISE_CONSISTENCY: unexpected FAILURE\n");
          v23 = ccdh_gp_n(*v12);
          v12[v23 + 2] ^= 1uLL;
          v24 = ccdh_pairwise_consistency_check_ws((uint64_t)v29, v20, (uint64_t (**)(_QWORD, uint64_t, uint64_t *))&ccrng_zero, v12);
          v25 = mach_absolute_time();
          if (v24)
          {
            printf("FIPSPOST_USER [%llu] %s:%d: FAILED: [PCT] CCDH_PAIRWISE_CONSISTENCY: Unexpected SUCCESS\n", v25, "fipspost_post_ffdh_pairwise_ws", 142);
            v26 = -1;
          }
          else
          {
            printf("FIPSPOST_USER [%llu] %s:%d: [PCT] CCDH_PAIRWISE_CONSISTENCY: FORCEFAIL\n", v25, "fipspost_post_ffdh_pairwise_ws", 139);
            v26 = 0;
          }
          v30 = v21;
          v14 = v26 | v14;
        }
        goto LABEL_20;
      }
      mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccdh_compute_shared_secret\n");
    }
    v14 = 4294967224;
    goto LABEL_12;
  }
  return 4294967283;
}

uint64_t ccmode_siv_hmac_temp_key_gen(rsize_t *a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v6;
  rsize_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _BYTE __s[64];
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C874D8];
  v3 = *(_QWORD *)(*a1 + 64);
  if (*(_QWORD *)(v3 + 16) != 16)
    return 4294967226;
  v15 = *a3;
  HIBYTE(v15) &= ~0x80u;
  cc_clear(a1[1], __s);
  v6 = ccctr_one_shot(v3, a1[1] >> 1, (uint64_t)(a1 + 8), (uint64_t)&v15, a1[1], (uint64_t)__s, (uint64_t)&v12);
  *a2 = v12;
  if (a1[1] >= 0x20)
  {
    v7 = 0;
    v8 = a2 + 1;
    v9 = &v13;
    do
    {
      v10 = *v9;
      v9 += 2;
      *v8 = v10;
      v8 += 2;
      ++v7;
    }
    while (v7 < a1[1] >> 5);
  }
  cc_clear(0x10uLL, &v15);
  return v6;
}

uint64_t ccz_random_bits(_QWORD *a1, uint64_t a2, uint64_t (**a3)(_QWORD, unint64_t, uint64_t))
{
  char v6;
  uint64_t v12;
  uint64_t v13;
  char v15;

  v6 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v15 = v6;
  ccz_set_sign((uint64_t)a1, 1);
  ccz_set_capacity((uint64_t)a1, (unint64_t)(a2 + 63) >> 6);
  v12 = ccn_random_bits(a2, a1[3], a3);
  v13 = ccn_n((unint64_t)(a2 + 63) >> 6, a1[3]);
  ccz_set_n(a1, v13);
  cc_disable_dit(&v15);
  return v12;
}

uint64_t AccelerateCrypto_SHA3_keccak(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;

  result = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  v10 = a1[8];
  v11 = a1[9];
  v12 = a1[10];
  v13 = a1[11];
  v14 = a1[12];
  v15 = a1[13];
  v16 = a1[14];
  v17 = a1[15];
  v18 = a1[16];
  v19 = a1[17];
  v21 = a1[18];
  v20 = a1[19];
  v22 = a1[20];
  v23 = a1[21];
  v24 = a1[22];
  v25 = a1[23];
  v26 = a1[24];
  v69 = a1;
  v70 = 0;
  v77 = &unk_1DEE1AE40;
  do
  {
    v71 = result;
    v72 = v3;
    v74 = v4;
    v75 = v5;
    v76 = v6;
    v27 = result ^ v7 ^ v12 ^ v17 ^ v22;
    v28 = v3 ^ v8 ^ v13 ^ v18 ^ v23;
    v29 = v4 ^ v9 ^ v14 ^ v19 ^ v24;
    v30 = v5 ^ v10 ^ v15 ^ v21 ^ v25;
    v31 = v6 ^ v11 ^ v16 ^ v20 ^ v26;
    v32 = v31 ^ __ROR8__(v28, 63);
    v33 = v27 ^ __ROR8__(v29, 63);
    v34 = v28 ^ __ROR8__(v30, 63);
    v35 = v29 ^ __ROR8__(v31, 63);
    v36 = v30 ^ __ROR8__(v27, 63);
    v73 = __ROR8__(v72 ^ v33, 63);
    v37 = __ROR8__(v8 ^ v33, 20);
    v38 = __ROR8__(v11 ^ v36, 44);
    v39 = __ROR8__(v24 ^ v34, 3);
    v40 = __ROR8__(v16 ^ v36, 25);
    v41 = __ROR8__(v22 ^ v32, 46);
    v42 = __ROR8__(v74 ^ v34, 2);
    v43 = __ROR8__(v14 ^ v34, 21);
    v44 = __ROR8__(v15 ^ v35, 39);
    v45 = __ROR8__(v20 ^ v36, 56);
    v46 = __ROR8__(v25 ^ v35, 8);
    v47 = __ROR8__(v17 ^ v32, 23);
    v48 = __ROR8__(v76 ^ v36, 37);
    v49 = __ROR8__(v26 ^ v36, 50);
    v50 = __ROR8__(v23 ^ v33, 62);
    v51 = __ROR8__(v10 ^ v35, 9);
    v52 = __ROR8__(v18 ^ v33, 19);
    v53 = __ROR8__(v7 ^ v32, 28);
    v54 = __ROR8__(v75 ^ v35, 36);
    v55 = __ROR8__(v21 ^ v35, 43);
    v56 = __ROR8__(v19 ^ v34, 49);
    v57 = __ROR8__(v13 ^ v33, 54);
    v58 = __ROR8__(v9 ^ v34, 58);
    v59 = __ROR8__(v12 ^ v32, 61);
    v60 = v37 & ~(v71 ^ v32);
    v61 = v71 ^ v32 ^ v43 & ~v37;
    v3 = v37 ^ v55 & ~v43;
    v4 = v43 ^ v49 & ~v55;
    v5 = v55 ^ (v71 ^ v32) & ~v49;
    v6 = v49 ^ v60;
    result = v61 ^ *v77++;
    v62 = v54 & ~v39;
    v63 = v38 & ~v54;
    v7 = v54 ^ v59 & ~v38;
    v8 = v38 ^ v52 & ~v59;
    v9 = v59 ^ v39 & ~v52;
    v10 = v52 ^ v62;
    v11 = v39 ^ v63;
    v64 = v58 & ~v73;
    v12 = v73 ^ v44 & ~v58;
    v13 = v58 ^ v45 & ~v44;
    v14 = v44 ^ v41 & ~v45;
    v15 = v45 ^ v73 & ~v41;
    v16 = v41 ^ v64;
    v65 = v48 & ~v46;
    v66 = v53 & ~v48;
    v17 = v48 ^ v57 & ~v53;
    v18 = v53 ^ v56 & ~v57;
    v19 = v57 ^ v46 & ~v56;
    v21 = v56 ^ v65;
    v20 = v46 ^ v66;
    v67 = v42 & ~v50;
    v68 = v51 & ~v42;
    v22 = v42 ^ v40 & ~v51;
    v23 = v51 ^ v47 & ~v40;
    v24 = v40 ^ v50 & ~v47;
    v25 = v47 ^ v67;
    v26 = v50 ^ v68;
    v70 += 8;
  }
  while (v70 != 192);
  *v69 = result;
  v69[1] = v3;
  v69[2] = v4;
  v69[3] = v5;
  v69[4] = v6;
  v69[5] = v7;
  v69[6] = v8;
  v69[7] = v9;
  v69[8] = v10;
  v69[9] = v11;
  v69[10] = v12;
  v69[11] = v13;
  v69[12] = v14;
  v69[13] = v15;
  v69[14] = v16;
  v69[15] = v17;
  v69[16] = v18;
  v69[17] = v19;
  v69[18] = v21;
  v69[19] = v20;
  v69[20] = v22;
  v69[21] = v23;
  v69[22] = v24;
  v69[23] = v25;
  v69[24] = v26;
  return result;
}

BOOL ccdh_pairwise_consistency_check_ws(uint64_t a1, _QWORD *a2, uint64_t (**a3)(_QWORD, uint64_t, uint64_t *), _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  rsize_t v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  _BOOL8 result;
  unint64_t *v22;
  uint64_t v23;
  rsize_t v24;

  v8 = cczp_n((uint64_t)a2);
  v9 = *(_QWORD *)(a1 + 16);
  v22 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v8);
  v10 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v8 + 2);
  v11 = (_QWORD *)((uint64_t (*)(void))ccdh_ctx_public)();
  ccdh_ctx_init((uint64_t)a2, v11);
  v12 = (uint64_t)&v10[ccdh_gp_n(*v10) + 2];
  ccn_set(1, (void *)v12, &REF_X);
  ccn_zero(v8 - 1, (void *)(v12 + 8));
  v13 = (void *)ccdh_gp_g(a2);
  v14 = ccdh_gp_n(*v10);
  if (cczp_power_fast_ws(a1, (uint64_t)a2, v10 + 2, v13, &v10[v14 + 2]))
    goto LABEL_6;
  v23 = v9;
  v15 = ccdh_ccn_size(a2);
  v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v8);
  v17 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v8);
  cc_clear(v15, v16);
  cc_clear(v15, v17);
  v24 = v15;
  v18 = (_QWORD *)ccdh_ctx_public(v10);
  if (ccdh_compute_shared_secret_ws(a1, a4, v18, &v24, (uint64_t)v16, a3))
  {
    result = 0;
    v9 = v23;
    goto LABEL_7;
  }
  v19 = ccdh_gp_n(*v10);
  v9 = v23;
  if (cczp_power_fast_ws(a1, (uint64_t)a2, v22, a4 + 2, &v10[v19 + 2])
    || (v20 = ccn_write_uint_size(v8, v22), ccn_write_uint_padded(v8, v22, v20, (char *)v17), v24 != v20))
  {
LABEL_6:
    result = 0;
  }
  else
  {
    result = cc_cmp_safe(v20, (char *)v16, (char *)v17) == 0;
  }
LABEL_7:
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

uint64_t ccecies_import_eph_pub_ws(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t a4, unsigned __int8 *a5, unint64_t **a6)
{
  int v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  unint64_t v15;

  v11 = *(_DWORD *)(a3 + 32);
  v12 = *(_QWORD *)(a1 + 16);
  if ((v11 & 2) != 0)
  {
    v14 = ((unint64_t)(cczp_bitlen((uint64_t)a2) + 7) >> 2) | 1;
    if (v14 <= a4)
    {
      result = ccec_x963_import_pub_ws(a1, a2, v14, a5, a6);
      goto LABEL_8;
    }
LABEL_9:
    result = 4294967289;
    goto LABEL_8;
  }
  if ((v11 & 4) != 0)
  {
    v15 = (unint64_t)(cczp_bitlen((uint64_t)a2) + 7) >> 3;
    if (v15 <= a4)
    {
      result = ccec_compact_import_pub_ws(a1, a2, v15, a5, a6);
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  result = 4294967291;
LABEL_8:
  *(_QWORD *)(a1 + 16) = v12;
  return result;
}

uint64_t ccecies_import_eph_pub(unint64_t *a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4, unint64_t **a5)
{
  char v10;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[4];
  void (*v21)(uint64_t);
  char v22;

  v10 = 0;
  v22 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v22 = v10;
  v16 = cc_malloc_clear(160 * *a1);
  v17 = 20 * *a1;
  v20[0] = v16;
  v20[1] = v17;
  v20[2] = 0;
  v20[3] = cc_ws_alloc;
  v21 = cc_ws_free;
  if (v16)
  {
    v18 = ccecies_import_eph_pub_ws((uint64_t)v20, a1, a2, a3, a4, a5);
    v21((uint64_t)v20);
  }
  else
  {
    v18 = 4294967283;
  }
  cc_disable_dit(&v22);
  return v18;
}

uint64_t ccsha3_256_vng_hwassist_compress(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return cckeccak_absorb_blocks(a1, 0x88uLL, a2, a3, (uint64_t (*)(_QWORD *))AccelerateCrypto_SHA3_keccak_hwassist);
}

uint64_t ccsha3_256_vng_hwassist_final(unint64_t *a1, uint64_t a2, _QWORD *a3)
{
  return ccsha3_final(a1, a2, a3, (uint64_t (*)(uint64_t *))AccelerateCrypto_SHA3_keccak_hwassist);
}

uint64_t ccsha3_256_vng_compress(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return cckeccak_absorb_blocks(a1, 0x88uLL, a2, a3, AccelerateCrypto_SHA3_keccak);
}

uint64_t ccsha3_256_vng_final(unint64_t *a1, uint64_t a2, _QWORD *a3)
{
  return ccsha3_final(a1, a2, a3, AccelerateCrypto_SHA3_keccak);
}

uint64_t fipspost_post_rsa_sig(char a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  int v5;
  int v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  void *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t __s[3];
  uint64_t v34[261];
  _QWORD v35[4];
  void (*v36)(uint64_t);
  uint64_t v37;

  v37 = *MEMORY[0x1E0C874D8];
  __s[0] = 32;
  if (ccrsa_import_priv((unint64_t *)__s, 1189, fipspost_post_rsa_test_key))
    return 4294967224;
  v32 = 256;
  v3 = ccsha256_di();
  if (ccrsa_sign_pkcs1v15_msg_blinded((uint64_t (**)(_QWORD, uint64_t, uint64_t))&ccrng_zero, (unint64_t *)__s, (uint64_t)v3, 0x100uLL, MESSAGE, (unint64_t *)&v32, (unsigned __int8 *)v35))
  {
    v4 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccrsa_sign_pkcs1v15\n", v4, "fipspost_post_rsa_sign", 74);
    v5 = a1 & 0x10;
    v6 = -72;
  }
  else
  {
    v5 = a1 & 0x10;
    if ((a1 & 0x10) != 0)
      v7 = (char *)&unk_1DEE1B4B6;
    else
      v7 = (char *)&unk_1DEE1B5B8;
    if (cc_cmp_safe(v32, (char *)v35, v7))
    {
      v8 = mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: sig != expected signature\n", v8, "fipspost_post_rsa_sign", 80);
      v6 = -75;
    }
    else
    {
      v6 = 0;
    }
  }
  v9 = (unint64_t *)ccrsa_ctx_public(__s);
  v10 = ccsha256_di();
  if (v5)
    v11 = (unsigned __int8 *)&unk_1DEE1B4B6;
  else
    v11 = (unsigned __int8 *)&unk_1DEE1B5B8;
  if (ccrsa_verify_pkcs1v15_msg(v9, (uint64_t)v10, 0x100uLL, MESSAGE, 0x100uLL, v11, 0))
  {
    v12 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccrsa_verify_pkcs1v15\n", v12, "fipspost_post_rsa_verify", 94);
    v13 = -75;
  }
  else
  {
    v13 = 0;
  }
  v2 = v13 | v6;
  if (v5)
  {
    v14 = sizeof_struct_ccrns_mul_modulus();
    v15 = sizeof_struct_ccpolyzp_po2cyc();
    v16 = (v14 + v15 - 1) / v15 + 2817;
    v17 = CCRSA_CRT_POWER_BLINDED_WORKSPACE_N(0x100uLL);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    v19 = cc_malloc_clear(8 * v18 + 14336);
    v35[0] = v19;
    v20 = sizeof_struct_ccrns_mul_modulus();
    v21 = sizeof_struct_ccpolyzp_po2cyc();
    v22 = (v20 + v21 - 1) / v21 + 2817;
    v23 = CCRSA_CRT_POWER_BLINDED_WORKSPACE_N(0x100uLL);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    v35[1] = v24 + 1792;
    v35[2] = 0;
    v35[3] = cc_ws_alloc;
    v36 = cc_ws_free;
    if (v19)
    {
      ccrsa_pairwise_consistency_check_ws((uint64_t)v35, __s, (uint64_t (**)(_QWORD, uint64_t, uint64_t))&ccrng_zero);
      v26 = v25;
      mach_absolute_time();
      if (v26)
        printf("FIPSPOST_USER [%llu] %s:%d: FAILED: [PCT] CCRSA_PAIRWISE_CONSISTENCY: unexpected FAILURE\n");
      else
        printf("FIPSPOST_USER [%llu] %s:%d: [PCT] CCRSA_PAIRWISE_CONSISTENCY: expected SUCCESS\n");
      ccn_add1(__s[0], v34, v34, 1);
      ccrsa_pairwise_consistency_check_ws((uint64_t)v35, __s, (uint64_t (**)(_QWORD, uint64_t, uint64_t))&ccrng_zero);
      v29 = v28;
      v30 = mach_absolute_time();
      if (v29)
      {
        printf("FIPSPOST_USER [%llu] %s:%d: [PCT] CCRSA_PAIRWISE_CONSISTENCY: FORCEFAIL\n", v30, "fipspost_post_rsa_pairwise", 126);
        v27 = 0;
      }
      else
      {
        printf("FIPSPOST_USER [%llu] %s:%d: FAILED: [PCT] CCRSA_PAIRWISE_CONSISTENCY: unexpected SUCCESS\n", v30, "fipspost_post_rsa_pairwise", 129);
        v27 = -1;
      }
      v36((uint64_t)v35);
    }
    else
    {
      v27 = -13;
    }
    v2 = v27 | v2;
  }
  cc_clear(0x830uLL, __s);
  return v2;
}

uint64_t cche_encrypt_params_get(unsigned int a1)
{
  if (a1 > 0x10)
    return 0;
  else
    return (uint64_t)*(&off_1EA954F18 + (int)a1);
}

uint64_t cche_encryption_params_plaintext_modulus(unsigned int a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *(_QWORD *)(cche_encrypt_params_get(a1) + 8);
  cc_disable_dit(&v9);
  return v7;
}

uint64_t cche_encryption_params_polynomial_degree(unsigned int a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *(unsigned int *)(cche_encrypt_params_get(a1) + 16);
  cc_disable_dit(&v9);
  return v7;
}

uint64_t cche_encryption_params_coefficient_nmoduli(unsigned int a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *(unsigned int *)(cche_encrypt_params_get(a1) + 28);
  cc_disable_dit(&v9);
  return v7;
}

_BYTE *cche_encryption_params_coefficient_moduli(unint64_t a1, _QWORD *a2, unsigned int a3)
{
  char v5;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v16;

  v5 = 0;
  v16 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v16 = v5;
  v11 = cche_encrypt_params_get(a3);
  v12 = *(unsigned int *)(v11 + 28);
  if (v12 >= a1)
    v12 = a1;
  if (v12)
  {
    v13 = (uint64_t *)(v11 + 32);
    do
    {
      v14 = *v13++;
      *a2++ = v14;
      --v12;
    }
    while (v12);
  }
  return cc_disable_dit(&v16);
}

BOOL cche_encrypt_params_eq(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  if (a1 == a2)
    return 1;
  v4 = a1[7];
  if ((_DWORD)v4 != a2[7])
    return 0;
  v5 = sizeof_struct_cche_cipher_plain_ctx();
  v6 = sizeof_struct_ccpolyzp_po2cyc();
  return memcmp(a1, a2, 8 * ((v5 + 8 * v4 + v6 - 1) / v6)) == 0;
}

uint64_t cccfb_context_size(uint64_t *a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *a1;
  cc_disable_dit(&v9);
  return v7;
}

uint64_t cccfb_block_size(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *(_QWORD *)(a1 + 8);
  cc_disable_dit(&v9);
  return v7;
}

uint64_t cccfb_init(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = (*(uint64_t (**)(void))(a1 + 16))();
  cc_disable_dit(&v9);
  return v7;
}

uint64_t cccfb_update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5;
  uint64_t v11;
  char v13;

  v5 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v13 = v5;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 24))(a2, a3, a4, a5);
  cc_disable_dit(&v13);
  return v11;
}

uint64_t cccfb_one_shot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v11;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE v21[7];
  char v22;
  uint64_t v23;

  v11 = 0;
  v23 = *MEMORY[0x1E0C874D8];
  v22 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v11 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v11 = 1;
    }
  }
  v22 = v11;
  MEMORY[0x1E0C86820](a1, a2, a2, a3);
  v18 = &v21[-v17];
  v19 = (*(uint64_t (**)(uint64_t, _BYTE *))(a1 + 16))(a1, &v21[-v17]);
  if (!(_DWORD)v19)
    v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(a1 + 24))(v18, a5, a6, a7);
  cc_clear(*(_QWORD *)a1, v18);
  cc_disable_dit(&v22);
  return v19;
}

uint64_t ccblowfish_ltc_setup(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t i;
  unint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  _DWORD *v16;
  unsigned int v17;
  _QWORD v19[2];

  v5 = 0;
  v6 = 0;
  v19[1] = *MEMORY[0x1E0C874D8];
  do
  {
    v7 = 0;
    v8 = 4;
    do
    {
      v7 = *(unsigned __int8 *)(a4 + v6) | (v7 << 8);
      if (v6 + 1 == a3)
        v6 = 0;
      else
        ++v6;
      --v8;
    }
    while (v8);
    a2[v5 + 1024] = ORIG_P[v5] ^ v7;
    ++v5;
  }
  while (v5 != 18);
  for (i = 0; i != 1024; i += 256)
    memcpy(&a2[i], (char *)&ORIG_S + i * 4, 0x400uLL);
  v10 = 0;
  v19[0] = 0;
  do
  {
    ccblowfish_ltc_ecb_encrypt(a2, 1, (unsigned int *)v19, v19);
    v11 = HIDWORD(v19[0]);
    a2[v10 + 1024] = bswap32(v19[0]);
    a2[v10 + 1025] = bswap32(v11);
    v12 = v10 >= 0x10;
    v10 += 2;
  }
  while (!v12);
  v13 = 0;
  v14 = a2;
  do
  {
    v15 = 0;
    do
    {
      ccblowfish_ltc_ecb_encrypt(a2, 1, (unsigned int *)v19, v19);
      v16 = &v14[v15];
      v17 = bswap32(HIDWORD(v19[0]));
      *v16 = bswap32(v19[0]);
      v16[1] = v17;
      v12 = v15 >= 0xFE;
      v15 += 2;
    }
    while (!v12);
    ++v13;
    v14 += 256;
  }
  while (v13 != 4);
  return 0;
}

uint64_t ccblowfish_ltc_ecb_encrypt(_DWORD *a1, uint64_t a2, unsigned int *a3, _BYTE *a4)
{
  int v4;
  unsigned int v5;
  unint64_t v6;
  int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;

  for (; a2; --a2)
  {
    v4 = bswap32(*a3);
    v5 = bswap32(a3[1]);
    v6 = -4;
    v7 = a1 + 1027;
    do
    {
      v8 = *(v7 - 3) ^ v4;
      v9 = *(v7 - 2) ^ v5 ^ (((a1[BYTE2(v8) + 256] + a1[HIBYTE(v8)]) ^ a1[BYTE1(v8) + 512])
                           + a1[v8 + 768]);
      v10 = *(v7 - 1) ^ v8 ^ (((a1[BYTE2(v9) + 256] + a1[HIBYTE(v9)]) ^ a1[BYTE1(v9) + 512])
                            + a1[v9 + 768]);
      v11 = *v7;
      v7 += 4;
      v5 = v11 ^ v9 ^ (((a1[BYTE2(v10) + 256] + a1[HIBYTE(v10)]) ^ a1[BYTE1(v10) + 512]) + a1[v10 + 768]);
      v4 = (((a1[BYTE2(v5) + 256] + a1[HIBYTE(v5)]) ^ a1[BYTE1(v5) + 512]) + a1[v5 + 768]) ^ v10;
      v6 += 4;
    }
    while (v6 < 0xC);
    v12 = a1[1041] ^ v5;
    v13 = a1[1040] ^ v4;
    *a4 = HIBYTE(v12);
    a4[1] = BYTE2(v12);
    a4[2] = BYTE1(v12);
    a4[3] = v12;
    a4[4] = HIBYTE(v13);
    a4[5] = BYTE2(v13);
    a4[6] = BYTE1(v13);
    a4[7] = v13;
    a3 += 2;
    a4 += 8;
  }
  return 0;
}

uint64_t ccsrp_generate_K_from_S_ws(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  char *v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[64];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C874D8];
  v6 = (*(_DWORD *)(a2 + 24) >> 3) & 7;
  switch(v6)
  {
    case 2:
      v37 = ccdh_gp_n(*(_QWORD *)(a2 + 8));
      v8 = *(uint64_t **)a2;
      v9 = ccdh_gp_n(*(_QWORD *)(a2 + 8));
      v39 = *(_QWORD *)(a1 + 16);
      v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9);
      v11 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, (unint64_t)(v9 + 1) >> 1);
      v12 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, (unint64_t)(v9 + 1) >> 1);
      v38 = (uint64_t)v8;
      v13 = *v8;
      v14 = (char *)(a2 + 32 * v37 + v13 + 32);
      v15 = ccn_write_uint_size(v9, a3);
      ccn_write_uint(v9, a3, v15, v10);
      v16 = v15 >> 1;
      if (v15 >= 2)
      {
        v17 = v16 - 1;
        if (v16 <= 1)
          v18 = 1;
        else
          v18 = v15 >> 1;
        v19 = &v12[v17];
        v20 = &v11[v17];
        v21 = (char *)((v15 & 1) + v10 + 1);
        do
        {
          *v20-- = *v21;
          *v19-- = *(v21 - 1);
          v21 += 2;
          --v18;
        }
        while (v18);
      }
      ccdigest(v38, v15 >> 1, v11, (uint64_t)v40);
      ccdigest(v38, v15 >> 1, v12, (uint64_t)v14);
      if (v13)
      {
        v22 = (_BYTE *)(a2 + 32 * v37 + 33);
        v23 = v40;
        do
        {
          v24 = *v23++;
          *(v22 - 1) = v24;
          v25 = *v14++;
          *v22 = v25;
          v22 += 2;
          --v13;
        }
        while (v13);
      }
      *(_QWORD *)(a1 + 16) = v39;
      goto LABEL_16;
    case 1:
      v26 = a2 + 32 * ccdh_gp_n(*(_QWORD *)(a2 + 8)) + 32;
      v27 = *(uint64_t **)a2;
      v28 = ccdh_gp_n(*(_QWORD *)(a2 + 8));
      v29 = *(_QWORD *)(a1 + 16);
      v30 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v28);
      v31 = ccdh_gp_n(*(_QWORD *)(a2 + 8));
      v32 = ccdh_gp_n(*(_QWORD *)(a2 + 8));
      v33 = ccn_write_uint_padded_ct(v31, a3, 8 * v32, v30);
      v34 = 2 * *v27;
      v35 = ccdh_gp_n(*(_QWORD *)(a2 + 8));
      result = ccmgf((uint64_t)v27, v34, v26, 8 * v35 - v33, &v30[v33]);
      *(_QWORD *)(a1 + 16) = v29;
      if ((_DWORD)result)
        return result;
      goto LABEL_16;
    case 0:
      v7 = ccdh_gp_n(*(_QWORD *)(a2 + 8));
      ccsrp_digest_ccn_ws(a1, (uint64_t *)a2, a3, a2 + 32 * v7 + 32, (*(_DWORD *)(a2 + 24) >> 9) & 1);
LABEL_16:
      result = 0;
      *(_DWORD *)(a2 + 24) |= 4u;
      return result;
  }
  return 4294967239;
}

uint64_t ccrng_ecfips_test_init(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char v3;
  char v10;

  v3 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v10 = v3;
  *a1 = ecfips_test_generate;
  a1[1] = a3;
  a1[2] = a2;
  cc_disable_dit(&v10);
  return 0;
}

uint64_t ecfips_test_generate(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  int v4;
  __int16 v5;

  if (!*(_QWORD *)(a1 + 16))
    return 4294967291;
  if (a2)
  {
    v3 = 0;
    LOWORD(v4) = -1;
    do
    {
      v5 = v4
         + *(unsigned __int8 *)(*(_QWORD *)(a1 + 8)
                              + (unint64_t)(--v3 + *(_QWORD *)(a1 + 16)) % *(_QWORD *)(a1 + 16));
      *a3++ = v5;
      v4 = v5 >> 15;
    }
    while (-a2 != v3);
  }
  return 0;
}

void *ccdh_gp_rfc5114_MODP_2048_256()
{
  return &_ccdh_gp_rfc5114_MODP_2048_256;
}

uint64_t ccaes_cfb_decrypt_vng_vector(uint64_t result, int8x16_t *a2, uint64_t a3, int8x16_t *a4, int8x16_t *a5)
{
  uint64_t v5;
  int8x16_t v6;
  BOOL v7;
  uint64_t i;
  int8x16_t *v9;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v31;
  uint64_t j;
  int8x16_t *v37;
  uint64_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v44;

  if (a3)
  {
    v5 = *(unsigned int *)(result + 240);
    if (v5 == 160 || v5 == 192 || v5 == 224)
    {
      v6 = *a2;
      v7 = a3 < 4;
      for (i = a3 - 4; !v7; i -= 4)
      {
        _Q16 = *(_OWORD *)result;
        v9 = (int8x16_t *)(result + 16);
        v11 = v5 - 16;
        v12 = *a4;
        v13 = a4[1];
        v14 = a4[2];
        v15 = a4[3];
        a4 += 4;
        v16 = v12;
        v17 = v13;
        v18 = v14;
        do
        {
          __asm
          {
            AESE            V0.16B, V16.16B
            AESMC           V0.16B, V0.16B
            AESE            V1.16B, V16.16B
            AESMC           V1.16B, V1.16B
            AESE            V2.16B, V16.16B
            AESMC           V2.16B, V2.16B
            AESE            V3.16B, V16.16B
            AESMC           V3.16B, V3.16B
          }
          _Q16 = (__int128)*v9++;
          v7 = v11 <= 16;
          v11 -= 16;
        }
        while (!v7);
        v31 = *v9;
        result = (uint64_t)v9->i64 - v5;
        __asm
        {
          AESE            V0.16B, V16.16B
          AESE            V1.16B, V16.16B
          AESE            V2.16B, V16.16B
          AESE            V3.16B, V16.16B
        }
        *a5 = veorq_s8(veorq_s8(_Q0, v31), v16);
        a5[1] = veorq_s8(veorq_s8(_Q1, v31), v17);
        a5[2] = veorq_s8(veorq_s8(_Q2, v31), v18);
        a5[3] = veorq_s8(veorq_s8(_Q3, v31), v15);
        a5 += 4;
        v6 = v15;
        v7 = i < 4;
      }
      v7 = i <= -4;
      for (j = i + 4; !v7; --j)
      {
        _Q16 = *(_OWORD *)result;
        v37 = (int8x16_t *)(result + 16);
        v39 = v5 - 16;
        v40 = *a4++;
        v41 = v40;
        do
        {
          __asm
          {
            AESE            V0.16B, V16.16B
            AESMC           V0.16B, V0.16B
          }
          _Q16 = (__int128)*v37++;
          v7 = v39 <= 16;
          v39 -= 16;
        }
        while (!v7);
        v44 = *v37;
        result = (uint64_t)v37->i64 - v5;
        __asm { AESE            V0.16B, V16.16B }
        *a5++ = veorq_s8(veorq_s8(_Q0, v44), v41);
        v6 = v41;
        v7 = j <= 1;
      }
      result = 0;
      *a2 = v6;
    }
    else
    {
      return -1;
    }
  }
  return result;
}

uint64_t ccz_bit(uint64_t a1, unint64_t a2)
{
  char v4;
  uint64_t v10;
  char v12;

  v4 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v12 = v4;
  if (ccz_n(a1) <= a2 >> 6)
    v10 = 0;
  else
    v10 = (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * (a2 >> 6)) >> a2) & 1;
  cc_disable_dit(&v12);
  return v10;
}

uint64_t ccrng_rsafips_test_init(uint64_t (**a1)(uint64_t a1, unint64_t a2, char *a3), uint64_t (*a2)(uint64_t a1, unint64_t a2, char *a3), uint64_t (*a3)(uint64_t a1, unint64_t a2, char *a3), uint64_t (*a4)(uint64_t a1, unint64_t a2, char *a3), uint64_t (*a5)(uint64_t a1, unint64_t a2, char *a3), uint64_t (*a6)(uint64_t a1, unint64_t a2, char *a3), uint64_t (*a7)(uint64_t a1, unint64_t a2, char *a3))
{
  char v7;
  char v14;

  v7 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v7 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v7 = 1;
    }
  }
  v14 = v7;
  *a1 = ccrng_rsafips_test_generate;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a2;
  a1[5] = a3;
  a1[6] = a4;
  a1[7] = a5;
  a1[8] = a6;
  a1[9] = a7;
  cc_disable_dit(&v14);
  return 0;
}

uint64_t ccrng_rsafips_test_generate(uint64_t a1, unint64_t a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t **v7;
  uint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t result;
  unint64_t v12;

  do
  {
    v5 = a1;
    v6 = *(_QWORD *)(a1 + 16);
    if (v6 == 2)
    {
      v7 = (unint64_t **)(a1 + 72);
      v8 = (uint64_t *)(a1 + 64);
    }
    else if (v6 == 1)
    {
      v7 = (unint64_t **)(a1 + 56);
      v8 = (uint64_t *)(a1 + 48);
    }
    else
    {
      if (v6)
      {
        v9 = *(unint64_t **)(a1 + 72);
        goto LABEL_10;
      }
      v7 = (unint64_t **)(a1 + 40);
      v8 = (uint64_t *)(a1 + 32);
    }
    a1 = *v8;
    v9 = *v7;
    if (*v8)
      break;
LABEL_10:
    a1 = *(_QWORD *)(v5 + 24);
  }
  while (a1);
  v10 = ccn_bitlen(a1, v9) + 7;
  if (a2 < v10 >> 3)
    return 4294967291;
  v12 = v10 >> 3;
  memcpy(a3, v9, v10 >> 3);
  cc_clear(a2 - v12, &a3[v12]);
  result = 0;
  ++*(_QWORD *)(v5 + 16);
  return result;
}

_BYTE *ccrng_rsafips_test_set_next(uint64_t a1, uint64_t a2)
{
  char v2;
  char v9;

  v2 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v9 = v2;
  *(_QWORD *)(a1 + 24) = a2;
  return cc_disable_dit(&v9);
}

uint64_t ccsrp_generate_client_pubkey_ws(uint64_t a1, uint64_t *a2)
{
  uint64_t (**v4)(_QWORD, uint64_t, uint64_t *);
  _QWORD *v5;
  uint64_t *v6;
  void *v7;
  unint64_t private_key_bitlen;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;

  v5 = (_QWORD *)a2[1];
  v4 = (uint64_t (**)(_QWORD, uint64_t, uint64_t *))a2[2];
  v6 = a2 + 4;
  ccdh_gp_n(v5);
  v7 = (void *)ccdh_gp_g((_QWORD *)a2[1]);
  private_key_bitlen = ccdh_generate_private_key_bitlen((_QWORD *)a2[1]);
  v9 = ccdh_gp_n(a2[1]);
  v10 = ccdh_gp_n(a2[1]);
  if (ccn_bitlen(v9, (unint64_t *)&v6[v10]) > private_key_bitlen)
    private_key_bitlen = cczp_bitlen(a2[1]);
  v11 = (unint64_t *)&v6[ccdh_gp_n(a2[1])];
  return ccdh_power_blinded_ws(a1, v4, v5, v6, v7, private_key_bitlen, v11);
}

uint64_t ccsrp_generate_client_S_ws(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t private_key_bitlen;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  void *v27;
  uint64_t result;
  _BOOL8 v29;
  unint64_t *v31;
  uint64_t v32;

  v10 = ccdh_gp_n(a2[1]);
  v32 = *(_QWORD *)(a1 + 16);
  v11 = (uint64_t *)(*(uint64_t (**)(uint64_t))(a1 + 24))(a1);
  v12 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v10);
  v31 = (unint64_t *)a5;
  ccn_mul_ws(a1, v10, (uint64_t)v11, a6, a5);
  v13 = a2 + 4;
  v14 = ccdh_gp_n(a2[1]);
  v29 = ccn_add_ws(a1, v10, v11, (uint64_t *)&a2[v14 + 4], v11);
  v15 = **a2;
  v16 = 4;
  if (((_DWORD)a2[3] & 0x1C0) == 0)
    v16 = **a2;
  v17 = 8 * (v16 + v15);
  private_key_bitlen = ccdh_generate_private_key_bitlen(a2[1]);
  v19 = ccdh_gp_n(a2[1]);
  v20 = ccdh_gp_n(a2[1]);
  if (ccn_bitlen(v19, (unint64_t *)&v13[v20]) > private_key_bitlen)
    private_key_bitlen = cczp_bitlen((uint64_t)a2[1]);
  if (v17 <= private_key_bitlen)
  {
    v17 = ccdh_generate_private_key_bitlen(a2[1]);
    v21 = ccdh_gp_n(a2[1]);
    v22 = ccdh_gp_n(a2[1]);
    if (ccn_bitlen(v21, (unint64_t *)&v13[v22]) > v17)
      v17 = cczp_bitlen((uint64_t)a2[1]);
  }
  v23 = v17 + 1;
  if (v23 >= cczp_bitlen((uint64_t)a2[1]))
  {
    ccn_add1_ws(a1, v10, &v11[v10], &v11[v10], v29);
    v24 = (unint64_t *)ccdh_gp_prime(a2[1]);
    ccn_sub1(v10, v12, v24, 1uLL);
    ccn_divmod_ws(a1, 2 * v10, (uint64_t)v11, 0, 0, v10, (char *)v11, (uint64_t)v12);
    v23 = cczp_bitlen((uint64_t)a2[1]);
  }
  v26 = a2[1];
  v25 = a2[2];
  v27 = (void *)ccdh_gp_g(v26);
  result = ccdh_power_blinded_ws(a1, (uint64_t (**)(_QWORD, uint64_t, uint64_t *))v25, v26, v12, v27, 8 * v15, v31);
  if (!(_DWORD)result)
  {
    if (((_WORD)a2[3] & 0x1C0) == 0)
      cczp_mul_ws(a1, (uint64_t)a2[1]);
    cczp_sub_ws(a1, (uint64_t)a2[1]);
    result = ccdh_power_blinded_ws(a1, (uint64_t (**)(_QWORD, uint64_t, uint64_t *))a2[2], a2[1], a3, v12, v23, (unint64_t *)v11);
  }
  *(_QWORD *)(a1 + 16) = v32;
  return result;
}

uint64_t ccsrp_client_start_authentication(_QWORD *a1, uint64_t (**a2)(_QWORD, unint64_t, uint64_t), char *a3)
{
  char v6;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t private_key_ws;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t (*v23)(_QWORD *, uint64_t);
  void (*v24)(uint64_t);
  char v25;

  v6 = 0;
  v25 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v25 = v6;
  v12 = ccdh_gp_n(a1[1]);
  v13 = CCDH_POWER_BLINDED_WORKSPACE_N(v12);
  v21[0] = cc_malloc_clear(8 * v13);
  v21[1] = CCDH_POWER_BLINDED_WORKSPACE_N(v12);
  v22 = 0;
  v23 = cc_ws_alloc;
  v24 = cc_ws_free;
  if (v21[0])
  {
    v14 = (_QWORD *)a1[1];
    v15 = ccdh_gp_n(v14);
    private_key_ws = ccdh_generate_private_key_ws((uint64_t)v21, v14, &a1[v15 + 4], a2);
    if ((_DWORD)private_key_ws
      || (private_key_ws = ccsrp_generate_client_pubkey_ws((uint64_t)v21, a1), (_DWORD)private_key_ws))
    {
      v19 = private_key_ws;
    }
    else
    {
      ccdh_gp_n(a1[1]);
      v17 = ccdh_gp_n(a1[1]);
      v18 = ccdh_gp_n(a1[1]);
      ccn_write_uint_padded_ct(v17, a1 + 4, 8 * v18, a3);
      v19 = 0;
    }
    v22 = 0;
    v24((uint64_t)v21);
  }
  else
  {
    v19 = 4294967283;
  }
  cc_disable_dit(&v25);
  return v19;
}

uint64_t ccsrp_client_process_challenge(uint64_t a1, char *a2, size_t a3, char *a4, size_t a5, char *a6, unsigned __int8 *a7, void *a8)
{
  char v16;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t K_from_S_ws;
  unint64_t v32;
  uint64_t v33;
  uint64_t uint;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  const void *v38;
  size_t v39;
  void *__dst;
  uint64_t v42;
  size_t v43;
  char *v44;
  char *v45;
  size_t v46;
  _QWORD v47[2];
  uint64_t v48;
  uint64_t (*v49)(_QWORD *, uint64_t);
  void (*v50)(uint64_t);
  char v51;

  v16 = 0;
  v51 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v16 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v16 = 1;
    }
  }
  v51 = v16;
  v22 = ccdh_gp_n(*(_QWORD *)(a1 + 8));
  v23 = CCDH_POWER_BLINDED_WORKSPACE_N(v22);
  v47[0] = cc_malloc_clear(8 * (v23 + 8 * v22));
  v47[1] = CCDH_POWER_BLINDED_WORKSPACE_N(v22) + 8 * v22;
  v48 = 0;
  v49 = cc_ws_alloc;
  v50 = cc_ws_free;
  if (v47[0])
  {
    v43 = a3;
    v44 = a4;
    v45 = a6;
    v46 = a5;
    __dst = a8;
    v24 = ccdh_gp_n(*(_QWORD *)(a1 + 8));
    v42 = ccdh_gp_n(*(_QWORD *)(a1 + 8));
    v25 = (unint64_t *)cc_ws_alloc(v47, v24);
    v26 = (_QWORD *)v49(v47, v24);
    v27 = (_QWORD *)v49(v47, v24);
    v28 = (_QWORD *)v49(v47, v24);
    v29 = v49(v47, v24);
    v30 = **(_QWORD **)a1;
    if (cczp_bitlen(*(_QWORD *)(a1 + 8)) < (unint64_t)(8 * v30))
    {
      K_from_S_ws = 4294967239;
LABEL_17:
      v50((uint64_t)v47);
      goto LABEL_18;
    }
    v32 = ccdh_gp_n(*(_QWORD *)(a1 + 8));
    v33 = ccdh_gp_n(*(_QWORD *)(a1 + 8));
    uint = ccn_read_uint(v32, v25, 8 * v33, a7);
    if (!(_DWORD)uint)
    {
      cczp_mod_ws((uint64_t)v47, *(_QWORD *)(a1 + 8));
      if (!ccn_n(v24, v29)
        || (v35 = a1 + 32,
            ccdh_gp_n(*(_QWORD *)(a1 + 8)),
            ccsrp_generate_u_ws((uint64_t)v47, (uint64_t *)a1, v26, (unint64_t *)(a1 + 32), v25),
            cczp_mod_ws((uint64_t)v47, *(_QWORD *)(a1 + 8)),
            !ccn_n(v24, v29)))
      {
        K_from_S_ws = 4294967238;
        goto LABEL_16;
      }
      uint = ccsrp_generate_x(a1, v27, a2, v46, v45, v43, v44);
      if (!(_DWORD)uint)
      {
        v36 = (uint64_t *)(v35 + 24 * v42);
        ccsrp_generate_k_ws((uint64_t)v47, a1, v28);
        uint = ccsrp_generate_client_S_ws((uint64_t)v47, (uint64_t **)a1, v36, (uint64_t)v28, (uint64_t)v27, (uint64_t)v26);
        if (!(_DWORD)uint)
        {
          K_from_S_ws = ccsrp_generate_K_from_S_ws((uint64_t)v47, a1, (unint64_t *)v36);
          if (!(_DWORD)K_from_S_ws)
          {
            ccdh_gp_n(*(_QWORD *)(a1 + 8));
            ccsrp_generate_M_ws((uint64_t)v47, (size_t **)a1, a2, v46, v45, (unint64_t *)(a1 + 32), v25);
            ccdh_gp_n(*(_QWORD *)(a1 + 8));
            ccsrp_generate_H_AMK_ws((uint64_t)v47, a1, (unint64_t *)(a1 + 32), v37);
            v38 = (const void *)(v35 + 32 * ccdh_gp_n(*(_QWORD *)(a1 + 8)) + 2 * **(_QWORD **)a1);
            v39 = ccsrp_sizeof_M_HAMK(*(_QWORD *)a1);
            memcpy(__dst, v38, v39);
          }
          goto LABEL_16;
        }
      }
    }
    K_from_S_ws = uint;
LABEL_16:
    v48 = 0;
    goto LABEL_17;
  }
  K_from_S_ws = 4294967283;
LABEL_18:
  cc_disable_dit(&v51);
  return K_from_S_ws;
}

uint64_t ccsrp_client_verify_session(uint64_t a1, char *a2)
{
  char v4;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  char v16;

  v4 = 0;
  v16 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v16 = v4;
  v10 = ccsrp_sizeof_M_HAMK(*(_QWORD *)a1);
  v11 = ccdh_gp_n(*(_QWORD *)(a1 + 8));
  v12 = cc_cmp_safe(v10, (char *)(a1 + 32 * v11 + 3 * **(_QWORD **)a1 + 32), a2);
  v13 = *(_DWORD *)(a1 + 24);
  if (v12)
    v14 = 0;
  else
    v14 = (v13 >> 2) & 1;
  *(_DWORD *)(a1 + 24) = v13 & 0xFFFFFFFE | v14;
  cc_disable_dit(&v16);
  return v14;
}

BOOL cche_param_ctx_eq(unsigned int *a1, unsigned int *a2)
{
  return a1 == a2 || cche_encrypt_params_eq(a1, a2);
}

uint64_t cche_param_ctx_init_ws(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  char v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  uint64_t result;
  unsigned int *v20;
  unint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int i;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v58[2];
  unsigned int v59[2];

  if ((*a3 - 1) <= 1)
  {
    v5 = a3[7];
    if ((_DWORD)v5)
    {
      v6 = (unint64_t *)(a3 + 8);
      v7 = a3[7];
      while (1)
      {
        v8 = *v6++;
        if (*((_QWORD *)a3 + 1) >= v8)
          break;
        if (!--v7)
          goto LABEL_6;
      }
    }
    else
    {
LABEL_6:
      if (cche_ciphertext_fresh_npolys() == 2)
      {
        v9 = 0;
        v10 = 63 - __clz(*((_QWORD *)a3 + 4));
        v11 = 1;
        while (a3[v9 + 5] <= v10)
        {
          v12 = v11;
          v11 = 0;
          v9 = 1;
          if ((v12 & 1) == 0)
          {
            v59[0] = a3[4];
            v59[1] = v5;
            v58[0] = v59[0];
            v58[1] = 1;
            v13 = sizeof_struct_cche_cipher_plain_ctx();
            v14 = sizeof_struct_ccpolyzp_po2cyc();
            memcpy(a2, a3, 8 * ((v13 + 8 * v5 + v14 - 1) / v14));
            v15 = a2[7];
            v16 = sizeof_struct_cche_cipher_plain_ctx();
            v17 = sizeof_struct_ccpolyzp_po2cyc();
            v18 = &a2[2 * ((v16 + 8 * v15 + v17 - 1) / v17)];
            result = ccpolyzp_po2cyc_ctx_chain_init_ws(a1, v18, v59, (uint64_t *)a3 + 4);
            if ((_DWORD)result)
              return result;
            if (*((_BYTE *)v18 + 16))
            {
              v20 = cche_param_ctx_plaintext_ctx((uint64_t)a2);
              result = ccpolyzp_po2cyc_ctx_init_ws(a1, v20, v58, (uint64_t *)a3 + 1, 0);
              if (!(_DWORD)result)
              {
                v21 = *cche_param_ctx_plaintext_ctx((uint64_t)a2);
                v22 = cche_param_ctx_plaintext_ctx((uint64_t)a2);
                v23 = a2[4];
                v24 = sizeof_struct_ccpolyzp_po2cyc_ctx();
                if (v23 >= 0x80)
                  v25 = 128;
                else
                  v25 = v23;
                v26 = sizeof_struct_ccrns_mul_modulus();
                if (v21 >= 2)
                {
                  v27 = &v22[4 * v23
                           + 12
                           + 4 * ((unint64_t)(v26 + 7) >> 3) * v25
                           + 2 * ((unint64_t)(v24 + 7) >> 3)];
                  v28 = __clz(v21) + 1;
                  v29 = 1;
                  v30 = v21 >> 1;
                  do
                  {
                    *v27 = __rbit32((v29 - 1) >> 1) >> v28;
                    v27[v21 >> 1] = __rbit32((2 * v21 + ~v29) >> 1) >> v28;
                    v29 = (3 * v29) & (2 * v21 - 1);
                    ++v27;
                    --v30;
                  }
                  while (v30);
                  v23 = a2[4];
                  if (v23 >= 0x80)
                    v25 = 128;
                  else
                    v25 = v23;
                }
                v31 = cche_param_ctx_plaintext_ctx((uint64_t)a2);
                v32 = *v31;
                v33 = (unint64_t)(sizeof_struct_ccpolyzp_po2cyc_ctx() + 7) >> 3;
                v34 = sizeof_struct_ccrns_mul_modulus();
                result = cche_decrypt_ctx_init_ws(a1, (uint64_t *)((char *)&v31[4 * v23+ 12+ 4 * ((unint64_t)(v34 + 7) >> 3) * v25+ 2 * v33]+ ((4 * v32 + 7) & 0x7FFFFFFF8)), (uint64_t)a2);
                if (!(_DWORD)result)
                {
                  if (a3[7])
                  {
                    v55 = v18 + 2;
                    v56 = v18;
                    v35 = 1;
                    for (i = -1; ; --i)
                    {
                      v37 = cche_param_ctx_plaintext_ctx((uint64_t)a2);
                      v38 = *v37;
                      v39 = a2[4];
                      v40 = sizeof_struct_ccpolyzp_po2cyc_ctx() + 7;
                      v41 = v39 >= 0x80 ? 128 : v39;
                      v42 = v39 + ((unint64_t)(sizeof_struct_ccrns_mul_modulus() + 7) >> 3) * v41;
                      v43 = (4 * v38 + 7) & 0x7FFFFFFF8;
                      v44 = a2[7];
                      v45 = sizeof_struct_cche_cipher_plain_ctx();
                      v46 = sizeof_struct_ccpolyzp_po2cyc();
                      v47 = cche_decrypt_ctx_nof_n(&a2[2 * ((v45 + 8 * v44 + v46 - 1) / v46) + 2]);
                      v48 = v47;
                      if (v35 < 2)
                      {
                        v50 = (uint64_t)&v37[4 * v42 + 12 + 2 * (v40 >> 3) + 2 * v47] + v43;
                      }
                      else
                      {
                        v49 = sizeof_struct_cche_cipher_plain_ctx();
                        v50 = (uint64_t)&v37[4 * (((v35 - 3) * (unint64_t)(v35 - 2)) >> 1)
                                          + 16
                                          + 4 * v42
                                          + 2 * v48]
                            + (v40 & 0xFFFFFFFFFFFFFFF8)
                            + v43
                            + ((v49 + 7) & 0xFFFFFFFFFFFFFFF8)
                            + (((v49 + 7) & 0xFFFFFFFFFFFFFFF8) + 32) * (v35 - 2);
                      }
                      v51 = *v56;
                      v52 = (unint64_t)(sizeof_struct_ccpolyzp_po2cyc_ctx() + 7) >> 3;
                      v53 = v51 >= 0x80 ? 128 : v51;
                      v54 = sizeof_struct_ccrns_mul_modulus();
                      result = cche_cipher_plain_ctx_init_ws(a1, v50, (uint64_t)a2, (uint64_t)&v55[2* (v52 + 2 * (v51 + ((unint64_t)(v54 + 7) >> 3) * v53) + 6)* (i + v56[1])]);
                      if ((_DWORD)result)
                        break;
                      if (++v35 > a3[7])
                        return 0;
                    }
                  }
                  else
                  {
                    return 0;
                  }
                }
              }
              return result;
            }
            return 4294967289;
          }
        }
      }
    }
  }
  return 4294967289;
}

unsigned int *cche_param_ctx_plaintext_ctx(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v2 = *(unsigned int *)(a1 + 28);
  v3 = sizeof_struct_cche_cipher_plain_ctx();
  v4 = sizeof_struct_ccpolyzp_po2cyc();
  v5 = (unsigned int *)(a1 + 8 * ((v4 - 1 + v3 + 8 * v2) / v4));
  v6 = sizeof_struct_ccpolyzp_po2cyc();
  v8 = *v5;
  v7 = v5[1];
  v9 = (v4 - 1 + v6) / v4;
  v10 = (unint64_t)(sizeof_struct_ccpolyzp_po2cyc_ctx() + 7) >> 3;
  if (v8 >= 0x80)
    v11 = 128;
  else
    v11 = v8;
  return &v5[2 * v9
           + 2 * (v10 + 2 * (v8 + ((unint64_t)(sizeof_struct_ccrns_mul_modulus() + 7) >> 3) * v11) + 6) * v7];
}

unint64_t CCHE_PARAM_CTX_INIT_WORKSPACE_N(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v2 = sizeof_struct_cche_cipher_plain_ctx();
  v3 = sizeof_struct_ccpolyzp_po2cyc();
  v4 = (8 * a1 + v2 + v3 - 1) / v3;
  v5 = CCHE_DECRYPT_CTX_INIT_WORKSPACE_N(a1);
  v6 = CCHE_CIPHER_PLAIN_CTX_INIT_WORKSPACE_N(a1);
  if (v5 <= v6)
    v7 = v6;
  else
    v7 = v5;
  return v7 + v4;
}

uint64_t cche_param_ctx_init(unsigned int *a1, int a2, unsigned int a3)
{
  char v5;
  uint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t inited;
  _QWORD v23[4];
  void (*v24)(uint64_t);
  char v25;

  v5 = 0;
  v25 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v25 = v5;
  v11 = cche_encrypt_params_get(a3);
  if (v11)
  {
    v12 = (unsigned int *)v11;
    v13 = CCHE_PARAM_CTX_INIT_WORKSPACE_N(*(unsigned int *)(v11 + 28));
    v23[0] = cc_malloc_clear(8 * v13);
    v14 = v12[7];
    v23[1] = CCHE_PARAM_CTX_INIT_WORKSPACE_N(v14);
    v23[2] = 0;
    v23[3] = cc_ws_alloc;
    v24 = cc_ws_free;
    if (v23[0])
    {
      v15 = sizeof_struct_cche_cipher_plain_ctx();
      v16 = sizeof_struct_ccpolyzp_po2cyc();
      v17 = (_DWORD *)cc_ws_alloc(v23, (v15 + 8 * v14 + v16 - 1) / v16);
      v18 = v12[7];
      v19 = sizeof_struct_cche_cipher_plain_ctx();
      v20 = sizeof_struct_ccpolyzp_po2cyc();
      memcpy(v17, v12, 8 * ((v19 + 8 * v18 + v20 - 1) / v20));
      *v17 = a2;
      inited = cche_param_ctx_init_ws((uint64_t)v23, a1, v17);
      v24((uint64_t)v23);
    }
    else
    {
      inited = 4294967283;
    }
  }
  else
  {
    inited = 4294967289;
  }
  cc_disable_dit(&v25);
  return inited;
}

unint64_t cche_param_ctx_nof_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int i;
  unsigned int v15;
  unsigned int v16;

  v3 = *(unsigned int *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 16);
  v2 = v15;
  v16 = v3;
  v4 = sizeof_struct_cche_cipher_plain_ctx();
  v5 = sizeof_struct_ccpolyzp_po2cyc();
  v6 = (v5 - 1 + 8 * v3 + v4) / v5;
  v7 = (v5 - 1 + sizeof_struct_ccpolyzp_po2cyc()) / v5;
  v8 = (unint64_t)(sizeof_struct_ccpolyzp_po2cyc_ctx() + 7) >> 3;
  if (v15 >= 0x80)
    v9 = 128;
  else
    v9 = v15;
  v10 = v8 + 2 * (v15 + ((unint64_t)(sizeof_struct_ccrns_mul_modulus() + 7) >> 3) * v9) + 6;
  v11 = v6 + ((unint64_t)(4 * v2 + 7) >> 3) + v7 + cche_decrypt_ctx_nof_n(&v15) + v10 + v10 * v3;
  v12 = *(_DWORD *)(a1 + 28);
  if (v12)
  {
    for (i = 1; i <= v12; ++i)
    {
      v16 = i;
      v11 += 2 * i + ((unint64_t)(sizeof_struct_cche_cipher_plain_ctx() + 7) >> 3);
    }
  }
  return v11;
}

uint64_t cche_param_ctx_chain_const(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = *(unsigned int *)(a1 + 28);
  v3 = sizeof_struct_cche_cipher_plain_ctx();
  v4 = sizeof_struct_ccpolyzp_po2cyc();
  return a1 + 8 * ((v3 + 8 * v2 + v4 - 1) / v4);
}

uint64_t cche_param_ctx_sizeof(unsigned int a1)
{
  uint64_t result;
  unint64_t v2;

  result = cche_encrypt_params_get(a1);
  if (result)
  {
    v2 = cche_param_ctx_nof_n(result);
    return sizeof_struct_ccpolyzp_po2cyc() * v2;
  }
  return result;
}

uint64_t cche_param_ctx_he_scheme(unsigned int *a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *a1;
  cc_disable_dit(&v9);
  return v7;
}

uint64_t cche_param_ctx_plaintext_modulus(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t cche_param_ctx_polynomial_degree(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t cche_param_ctx_key_ctx_nmoduli(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = *(unsigned int *)(a1 + 28);
  v3 = sizeof_struct_cche_cipher_plain_ctx();
  v4 = sizeof_struct_ccpolyzp_po2cyc();
  return *(unsigned int *)(a1 + 8 * ((v3 + 8 * v2 + v4 - 1) / v4) + 12);
}

uint64_t cche_param_ctx_ciphertext_ctx_nmoduli(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = *(unsigned int *)(a1 + 28);
  v3 = sizeof_struct_cche_cipher_plain_ctx();
  v4 = sizeof_struct_ccpolyzp_po2cyc();
  v5 = (unsigned int *)(a1 + 8 * ((v3 + 8 * v2 + v4 - 1) / v4));
  v6 = v5 + 2;
  if (v5[1] >= 2)
  {
    v7 = *v5;
    v8 = (unint64_t)(sizeof_struct_ccpolyzp_po2cyc_ctx() + 7) >> 3;
    if (v7 >= 0x80)
      v9 = 128;
    else
      v9 = v7;
    v6 += 4 * v7 + 4 * ((unint64_t)(sizeof_struct_ccrns_mul_modulus() + 7) >> 3) * v9 + 2 * v8 + 12;
  }
  return v6[1];
}

uint64_t cche_param_ctx_coefficient_moduli(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = a1 + 32;
  cc_disable_dit(&v9);
  return v7;
}

uint64_t cche_param_ctx_key_ctx_poly_nbytes(uint64_t a1)
{
  char v2;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v13;

  v2 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v13 = v2;
  v8 = *(unsigned int *)(a1 + 28);
  v9 = sizeof_struct_cche_cipher_plain_ctx();
  v10 = sizeof_struct_ccpolyzp_po2cyc();
  v11 = ccpolyzp_po2cyc_serialize_poly_nbytes((unsigned int *)(a1 + 8 * ((v9 + 8 * v8 + v10 - 1) / v10) + 8), 0);
  cc_disable_dit(&v13);
  return v11;
}

uint64_t cche_param_ctx_plaintext_modulus_inverse_ws(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12[2];

  v12[1] = *MEMORY[0x1E0C874D8];
  v7 = cche_param_ctx_plaintext_ctx(a3);
  v8 = v7[1];
  while (--v8)
    v7 = (unsigned int *)*((_QWORD *)v7 + 14);
  v9 = (uint64_t)(v7 + 30);
  v12[0] = a4;
  cczp_modn_ws(a1, (_QWORD *)v7 + 15, v12, 1, (char *)v12);
  result = cczp_inv_ws(a1, v9);
  if (!(_DWORD)result)
    *a2 = v11;
  return result;
}

uint64_t cche_param_ctx_plaintext_modulus_inverse(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v12;
  void *v14;
  __int128 v15;
  uint64_t (*v16)(_QWORD *, uint64_t);
  void (*v17)(uint64_t);
  char v18;

  v6 = 0;
  v18 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v18 = v6;
  v14 = cc_malloc_clear(0x48uLL);
  v15 = xmmword_1DEE1CAD0;
  v16 = cc_ws_alloc;
  v17 = cc_ws_free;
  if (v14)
  {
    v12 = cche_param_ctx_plaintext_modulus_inverse_ws((uint64_t)&v14, a1, a2, a3);
    v17((uint64_t)&v14);
  }
  else
  {
    v12 = 4294967283;
  }
  cc_disable_dit(&v18);
  return v12;
}

uint64_t ccec_projectify_homogeneous_ws(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(_QWORD, unint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;

  v9 = cczp_n((uint64_t)a2);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = (char *)(a3 + 16 * *a2);
  cczp_to_ws(a1, (uint64_t)a2);
  cczp_to_ws(a1, (uint64_t)a2);
  if (!a5)
  {
    ccn_seti(v9, v11, 1);
    cczp_to_ws(a1, (uint64_t)a2);
    goto LABEL_5;
  }
  result = cczp_generate_non_zero_element_ws(a1, (uint64_t)a2, a5, v11);
  if (!(_DWORD)result)
  {
    cczp_mul_ws(a1, (uint64_t)a2);
    cczp_mul_ws(a1, (uint64_t)a2);
LABEL_5:
    result = 0;
  }
  *(_QWORD *)(a1 + 16) = v10;
  return result;
}

uint64_t ccec_projectify(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v20[4];
  void (*v21)(uint64_t);
  char v22;

  v8 = 0;
  v22 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v22 = v8;
  v14 = *a1;
  v15 = sizeof_struct_ccpolyzp_po2cyc();
  v20[0] = cc_malloc_clear(8 * (5 * v14 + (v15 + 7) / v15) + 24);
  v16 = *a1;
  v17 = sizeof_struct_ccpolyzp_po2cyc();
  v20[1] = 5 * v16 + (v17 + 7) / v17 + 3;
  v20[2] = 0;
  v20[3] = cc_ws_alloc;
  v21 = cc_ws_free;
  if (v20[0])
  {
    v18 = (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t, uint64_t, uint64_t))(a1[2] + 72))(v20, a1, a2, a3, a4);
    v21((uint64_t)v20);
  }
  else
  {
    v18 = 4294967283;
  }
  cc_disable_dit(&v22);
  return v18;
}

uint64_t AccelerateCrypto_AES_encrypt(uint64_t a1, int8x16_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *((unsigned int *)a3 + 60);
  _Q1 = *a3;
  v5 = 16;
  do
  {
    __asm
    {
      AESE            V0.16B, V1.16B
      AESMC           V0.16B, V0.16B
    }
    _Q1 = a3[(unint64_t)v5 / 0x10];
    v5 += 16;
  }
  while (v5 < v3);
  __asm { AESE            V0.16B, V1.16B }
  *a2 = veorq_s8(_Q0, *(int8x16_t *)((char *)a3 + v3));
  return 0;
}

uint64_t ccaes_cfb_encrypt_vng(int8x16_t *a1, unint64_t a2, int8x16_t *a3, int8x16_t *a4)
{
  int8x16_t *v4;
  int8x16_t *v5;
  unint64_t v6;
  int8x16_t *v8;
  uint64_t v9;
  unint64_t v10;
  __int128 *i8;
  int8x16_t *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int8 v17;
  uint64_t v18;
  __int8 v19;
  __int8 v20;
  uint64_t result;

  v4 = a4;
  v5 = a3;
  v6 = a2;
  v8 = a1 + 1;
  v9 = a1->i64[1];
  v10 = (unint64_t)(*(_QWORD *)(a1->i64[0] + 8) + 7) >> 3;
  i8 = (__int128 *)a1[v10 + 1].i8;
  v12 = (int8x16_t *)((char *)a1 + 8 * v10 + 16);
  v13 = v9 == 16 || a2 == 0;
  if (!v13)
  {
    v14 = 0;
    v15 = (uint64_t)a1[1].i64 + v9;
    v16 = v15 + 8 * v10;
    do
    {
      v17 = *(_BYTE *)(v15 + v14) ^ a3->i8[v14];
      a4->i8[v14] = v17;
      *(_BYTE *)(v16 + v14) = v17;
      v18 = v14 + 1;
      if (v9 + v14 == 15)
        break;
      v13 = a2 - 1 == v14++;
    }
    while (!v13);
    v9 += v18;
    v4 = (int8x16_t *)((char *)a4 + v18);
    v5 = (int8x16_t *)((char *)a3 + v18);
    v6 = a2 - v18;
  }
  if (v6 >= 0x10)
  {
    ccaes_cfb_encrypt_vng_vector((uint64_t)i8, v12, v6 >> 4, v5, v4);
    v5 = (int8x16_t *)((char *)v5 + (v6 & 0xFFFFFFFFFFFFFFF0));
    v4 = (int8x16_t *)((char *)v4 + (v6 & 0xFFFFFFFFFFFFFFF0));
    v6 &= 0xFu;
  }
  if (!v6)
  {
LABEL_17:
    result = 0;
    a1->i64[1] = v9;
    return result;
  }
  while (v9 != 16)
  {
LABEL_16:
    v19 = v5->i8[0];
    v5 = (int8x16_t *)((char *)v5 + 1);
    v20 = v8->i8[v9];
    v4->i8[0] = v20 ^ v19;
    v4 = (int8x16_t *)((char *)v4 + 1);
    v12->i8[v9++] = v20 ^ v19;
    if (!--v6)
      goto LABEL_17;
  }
  if (!AccelerateCrypto_AES_encrypt((uint64_t)v12, v8, i8))
  {
    v9 = 0;
    goto LABEL_16;
  }
  return 0xFFFFFFFFLL;
}

uint64_t cchpke_kem_generate_key_pair(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v6;
  uint64_t v12;
  char v14;

  v6 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v14 = v6;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 48))(a2, a3, a4, a5, a6);
  cc_disable_dit(&v14);
  return v12;
}

uint64_t cchpke_params_sizeof_kem_enc(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
}

uint64_t cchpke_params_sizeof_kem_shared_secret(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
}

uint64_t cchpke_params_sizeof_kem_pk(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
}

uint64_t cchpke_params_sizeof_kem_pk_marshalled(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
}

uint64_t cchpke_params_sizeof_kem_sk(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
}

uint64_t cchpke_params_sizeof_kdf_hash(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 8);
}

uint64_t cchpke_params_sizeof_aead_key(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
}

uint64_t cchpke_params_sizeof_aead_tag(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
}

uint64_t cchpke_params_sizeof_aead_nonce(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
}

_UNKNOWN **cchpke_params_x25519_AESGCM128_HKDF_SHA256()
{
  return &cchpke_params_x25519_AESGCM128_HKDF_SHA256_params;
}

uint64_t cchpke_initiator_setup_deterministic(uint64_t *__s, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, size_t a10, const void *a11, uint64_t a12, uint64_t a13)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  _OWORD v26[2];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C874D8];
  if (a10 > 0x40 || *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) != a12)
    return 4294967289;
  cc_clear(0x60uLL, __s);
  *__s = a2;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = *(_QWORD *)(v22 + 8);
  v24 = *(_QWORD *)(v22 + 16);
  if (a4 && a5 && a6 && a7)
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t))(v22 + 88))(a2, a4, a5, a6, a7, a8, a9, v24, v26, v23, a13);
  else
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t))(v22 + 80))(a2, a3, a8, a9, v24, v26, v23, a13);
  if (!(_DWORD)result)
    return cchpke_encryption_context_init(a2, (uint64_t)(__s + 1), *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16), v26, a10, a11);
  return result;
}

uint64_t cchpke_encryption_context_init(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, size_t a5, const void *a6)
{
  uint64_t v12;
  uint64_t result;
  _BYTE v14[32];
  char v15;
  _BYTE v16[64];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C874D8];
  v12 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v15 = 0;
  result = cchpke_labeled_extract((unsigned __int16 **)a1, 0, 0, 0, 0xBuLL, &HPKE_PSK_ID_LABEL, 0, 0, (uint64_t)v16);
  if (!(_DWORD)result)
  {
    result = cchpke_labeled_extract((unsigned __int16 **)a1, 0, 0, 0, 9uLL, &HPKE_INFO_LABEL, a5, a6, (uint64_t)&v16[*(_QWORD *)(*(_QWORD *)a1 + 8)]);
    if (!(_DWORD)result)
    {
      result = cchpke_labeled_extract((unsigned __int16 **)a1, 0, a3, a4, 6uLL, &HPKE_SECRET_LABEL, 0, 0, (uint64_t)v14);
      if (!(_DWORD)result)
      {
        result = cchpke_labeled_expand((unsigned __int16 **)a1, 0, *(_QWORD *)(*(_QWORD *)a1 + 8), (uint64_t)v14, 3uLL, &HPKE_KEY_LABEL, (2 * v12) | 1, &v15, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a2);
        if (!(_DWORD)result)
        {
          result = cchpke_labeled_expand((unsigned __int16 **)a1, 0, *(_QWORD *)(*(_QWORD *)a1 + 8), (uint64_t)v14, 0xAuLL, &HPKE_NONCE_LABEL, (2 * v12) | 1, &v15, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), a2 + 32);
          if (!(_DWORD)result)
            return cchpke_labeled_expand((unsigned __int16 **)a1, 0, *(_QWORD *)(*(_QWORD *)a1 + 8), (uint64_t)v14, 3uLL, &HPKE_EXP_LABEL, (2 * v12) | 1, &v15, *(_QWORD *)(*(_QWORD *)a1 + 8), a2 + 48);
        }
      }
    }
  }
  return result;
}

uint64_t cchpke_initiator_setup(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, size_t a6, const void *a7, uint64_t a8, uint64_t a9)
{
  char v9;
  uint64_t v15;
  char v17;

  v9 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v9 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v9 = 1;
    }
  }
  v17 = v9;
  v15 = cchpke_initiator_setup_deterministic(a1, a2, a3, 0, 0, 0, 0, a4, a5, a6, a7, a8, a9);
  cc_disable_dit(&v17);
  return v15;
}

uint64_t cchpke_responder_setup(uint64_t *__s, uint64_t a2, uint64_t a3, uint64_t a4, size_t a5, const void *a6, uint64_t a7, uint64_t a8)
{
  char v15;
  uint64_t v21;
  char v23;
  _OWORD v24[2];
  uint64_t v25;

  v15 = 0;
  v25 = *MEMORY[0x1E0C874D8];
  v23 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v15 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v15 = 1;
    }
  }
  v23 = v15;
  v21 = 4294967289;
  if (a5 <= 0x40 && *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) == a7)
  {
    cc_clear(0x60uLL, __s);
    *__s = a2;
    v21 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _OWORD *))(*(_QWORD *)(a2 + 16)
                                                                                                  + 96))(a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), a8, a3, a4, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16), v24);
    if (!(_DWORD)v21)
      v21 = cchpke_encryption_context_init(a2, (uint64_t)(__s + 1), *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16), v24, a5, a6);
  }
  cc_disable_dit(&v23);
  return v21;
}

uint64_t cchpke_initiator_encrypt(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v14;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  char v26;
  char v27[12];
  uint64_t v28;

  v14 = 0;
  v28 = *MEMORY[0x1E0C874D8];
  v26 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v14 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v14 = 1;
    }
  }
  v26 = v14;
  v20 = *(_QWORD *)(*a1 + 8);
  v21 = *(_QWORD *)(v20 + 24);
  v22 = cchpke_nonce(*a1, (uint64_t)(a1 + 1), v21, v27);
  if (!(_DWORD)v22)
  {
    v22 = (*(uint64_t (**)(_QWORD, uint64_t *, size_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 32))(*(_QWORD *)(v20 + 8), a1 + 1, v21, v27, a2, a3, a4, a5, a6, a7, a8);
    if (!(_DWORD)v22)
      ++a1[11];
  }
  cc_disable_dit(&v26);
  return v22;
}

uint64_t cchpke_nonce(uint64_t a1, uint64_t a2, size_t a3, char *a4)
{
  unint64_t v7;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) != a3)
    return 4294967289;
  bzero(a4, a3);
  *(_QWORD *)&a4[*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) - 8] = bswap64(*(_QWORD *)(a2 + 80));
  if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24))
  {
    v7 = 0;
    do
    {
      a4[v7] ^= *(_BYTE *)(a2 + 32 + v7);
      ++v7;
    }
    while (v7 < *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24));
  }
  return 0;
}

uint64_t cchpke_responder_decrypt(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v14;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  char v26;
  char v27[12];
  uint64_t v28;

  v14 = 0;
  v28 = *MEMORY[0x1E0C874D8];
  v26 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v14 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v14 = 1;
    }
  }
  v26 = v14;
  v20 = *(_QWORD *)(*a1 + 8);
  v21 = *(_QWORD *)(v20 + 24);
  v22 = cchpke_nonce(*a1, (uint64_t)(a1 + 1), v21, v27);
  if (!(_DWORD)v22)
  {
    v22 = (*(uint64_t (**)(_QWORD, uint64_t *, size_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 40))(*(_QWORD *)(v20 + 8), a1 + 1, v21, v27, a2, a3, a4, a5, a8, a6, a7);
    if (!(_DWORD)v22)
      ++a1[11];
  }
  cc_disable_dit(&v26);
  return v22;
}

uint64_t cchpke_initiator_seal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, size_t a5, const void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  char v17;
  uint64_t v23;
  char v25;
  _OWORD __s[6];
  uint64_t v27;

  v17 = 0;
  v27 = *MEMORY[0x1E0C874D8];
  v25 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v17 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v17 = 1;
    }
  }
  v25 = v17;
  memset(__s, 0, sizeof(__s));
  v23 = cchpke_initiator_setup((uint64_t *)__s, a1, a2, a3, a4, a5, a6, a14, a15);
  if (!(_DWORD)v23)
  {
    v23 = cchpke_initiator_encrypt((uint64_t *)__s, a7, a8, a9, a10, a11, a12, a13);
    cc_clear(0x60uLL, __s);
  }
  cc_disable_dit(&v25);
  return v23;
}

uint64_t cchpke_responder_open(uint64_t a1, uint64_t a2, uint64_t a3, size_t a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  char v17;
  uint64_t v23;
  char v25;
  _OWORD __s[6];
  uint64_t v27;

  v17 = 0;
  v27 = *MEMORY[0x1E0C874D8];
  v25 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v17 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v17 = 1;
    }
  }
  v25 = v17;
  memset(__s, 0, sizeof(__s));
  v23 = cchpke_responder_setup((uint64_t *)__s, a1, a2, a3, a4, a5, a12, a13);
  if (!(_DWORD)v23)
  {
    v23 = cchpke_responder_decrypt((uint64_t *)__s, a6, a7, a8, a9, a10, a11, a14);
    cc_clear(0x60uLL, __s);
  }
  cc_disable_dit(&v25);
  return v23;
}

uint64_t cchpke_responder_export(unsigned __int16 ***a1, size_t a2, const void *a3, unint64_t a4, uint64_t a5)
{
  char v5;
  uint64_t v11;
  char v13;

  v5 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v13 = v5;
  if (a2 > 0x40)
    v11 = 4294967289;
  else
    v11 = cchpke_labeled_expand(*a1, 0, *((_QWORD *)**a1 + 1), (uint64_t)(a1 + 7), 3uLL, &HPKE_SEC_LABEL, a2, a3, a4, a5);
  cc_disable_dit(&v13);
  return v11;
}

uint64_t cchpke_initiator_export(unsigned __int16 ***a1, size_t a2, const void *a3, unint64_t a4, uint64_t a5)
{
  char v5;
  uint64_t v11;
  char v13;

  v5 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v13 = v5;
  if (a2 > 0x40)
    v11 = 4294967289;
  else
    v11 = cchpke_labeled_expand(*a1, 0, *((_QWORD *)**a1 + 1), (uint64_t)(a1 + 7), 3uLL, &HPKE_SEC_LABEL, a2, a3, a4, a5);
  cc_disable_dit(&v13);
  return v11;
}

_BYTE *cchpke_kdf_hkdf_sha256_hash(size_t a1, char *a2, uint64_t a3)
{
  void *v6;

  v6 = ccsha256_di();
  return ccdigest((uint64_t)v6, a1, a2, a3);
}

uint64_t cchpke_aead_aesgcm128_seal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t *v19;

  v19 = ccaes_gcm_encrypt_mode();
  return ccgcm_one_shot((rsize_t *)v19, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t cchpke_aead_aesgcm128_open(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t *v19;

  v19 = ccaes_gcm_decrypt_mode();
  return ccgcm_one_shot((rsize_t *)v19, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

double cchpke_kem_x25519_generate_key_pair(uint64_t (**a1)(_QWORD, uint64_t, void *), uint64_t a2, _OWORD *a3, uint64_t a4, _OWORD *a5)
{
  double result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C874D8];
  if (a2 == 32 && a4 == 32)
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    if (!cccurve25519_make_key_pair(a1, (char *)&v10, &v12))
    {
      v8 = v13;
      *a3 = v12;
      a3[1] = v8;
      result = *(double *)&v10;
      v9 = v11;
      *a5 = v10;
      a5[1] = v9;
    }
  }
  return result;
}

uint64_t cchpke_kem_x25519_serialize(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t result;
  __int128 v4;

  if (a1 != 32)
    return 4294967289;
  result = 0;
  v4 = a2[1];
  *a3 = *a2;
  a3[1] = v4;
  return result;
}

uint64_t cchpke_kem_x25519_deserialize(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t result;
  __int128 v4;

  if (a1 != 32)
    return 4294967289;
  result = 0;
  v4 = a2[1];
  *a3 = *a2;
  a3[1] = v4;
  return result;
}

uint64_t cchpke_kem_x25519_public_key(uint64_t a1, __int128 *a2, uint64_t a3, char *a4)
{
  if (a1 == 32 && a3 == 32)
    return cccurve25519_make_pub(a4, a2);
  else
    return 4294967289;
}

void cchpke_kem_x25519_encap(uint64_t a1, uint64_t (**a2)(_QWORD, uint64_t, void *), uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, _OWORD *a8)
{
  int v12;
  _OWORD v13[2];
  __int128 v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C874D8];
  if (a3 == 32 && a5 == 32 && a7 == 32)
  {
    cchpke_kem_x25519_generate_key_pair(a2, 32, v14, 32, v13);
    if (!v12)
      cchpke_kem_x25519_encap_deterministic(a1, 32, v14, 32, v13, 32, a4, 32, a6, 32, a8);
  }
}

uint64_t cchpke_kem_x25519_encap_deterministic(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, _OWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, _OWORD *a11)
{
  uint64_t result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[4];
  _OWORD v19[2];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C874D8];
  result = 4294967289;
  if ((unint64_t)(a10 + 32) <= 0x40 && a4 == 32 && a2 == 32 && a6 == 32 && a8 == 32 && a10 == 32)
  {
    memset(v19, 0, sizeof(v19));
    result = cccurve25519((char *)v19, a3, (uint64_t *)a7);
    if (!(_DWORD)result)
    {
      v15 = a5[1];
      *a11 = *a5;
      a11[1] = v15;
      v16 = a11[1];
      v18[0] = *a11;
      v18[1] = v16;
      v17 = *(_OWORD *)(a7 + 16);
      v18[2] = *(_OWORD *)a7;
      v18[3] = v17;
      return cchpke_extract_and_expand(a1, v19, v18, a9);
    }
  }
  return result;
}

uint64_t cchpke_kem_x25519_decap(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, __int128 *a5, uint64_t a6, void *a7)
{
  uint64_t result;
  __int128 v12;
  __int128 v13;
  _OWORD v14[2];
  _OWORD v15[4];
  __int128 v16;
  __int128 v17;
  _OWORD v18[2];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C874D8];
  result = 4294967289;
  if (a4 == 32 && a2 == 32 && a6 == 32)
  {
    v12 = a3[1];
    v18[0] = *a3;
    v18[1] = v12;
    v16 = 0u;
    v17 = 0u;
    result = cccurve25519_make_pub((char *)&v16, a5);
    if (!(_DWORD)result)
    {
      v13 = a3[1];
      v15[0] = *a3;
      v15[1] = v13;
      v15[2] = v16;
      v15[3] = v17;
      memset(v14, 0, sizeof(v14));
      result = cccurve25519((char *)v14, a5, (uint64_t *)v18);
      if (!(_DWORD)result)
        return cchpke_extract_and_expand(a1, v14, v15, a7);
    }
  }
  return result;
}

uint64_t cchpke_extract_and_expand(uint64_t a1, const void *a2, const void *a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE __s[32];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C874D8];
  v7 = cchpke_labeled_extract((unsigned __int16 **)a1, 1, 0, 0, 7uLL, &HPKE_EAE_LABEL, 0x20uLL, a2, (uint64_t)__s);
  if ((_DWORD)v7)
    return v7;
  v8 = cchpke_labeled_expand((unsigned __int16 **)a1, 1, *(_QWORD *)(*(_QWORD *)a1 + 8), (uint64_t)__s, 0xDuLL, &HPKE_SHARED_SECRET_LABEL, 0x40uLL, a3, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16), (uint64_t)a4);
  if ((_DWORD)v8)
    cc_clear(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16), a4);
  cc_clear(0x20uLL, __s);
  return v8;
}

uint64_t cchpke_labeled_extract(unsigned __int16 **a1, int a2, uint64_t a3, _OWORD *a4, size_t a5, const void *a6, size_t a7, const void *a8, uint64_t a9)
{
  uint64_t v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  char __s[7];
  _BYTE v22[93];

  *(_QWORD *)&v22[85] = *MEMORY[0x1E0C874D8];
  qmemcpy(__s, "HPKE-v1", sizeof(__s));
  v16 = cchpke_suite_id(a1, a2, (uint64_t)v22) + 7;
  memcpy(&__s[v16], a6, a5);
  v17 = memcpy(&__s[v16 + a5], a8, a7);
  v18 = (uint64_t *)(*((uint64_t (**)(void *))*a1 + 3))(v17);
  v19 = cchkdf_extract(v18, a3, a4, v16 + a5 + a7, __s, a9);
  cc_clear(0x5CuLL, __s);
  return v19;
}

uint64_t cchpke_labeled_expand(unsigned __int16 **a1, int a2, rsize_t a3, uint64_t a4, size_t a5, const void *a6, size_t a7, const void *a8, unint64_t a9, uint64_t a10)
{
  uint64_t v17;
  size_t v18;
  void *v19;
  rsize_t *v20;
  uint64_t v21;
  __int16 __s;
  _BYTE v24[7];
  _BYTE v25[97];

  *(_QWORD *)&v25[89] = *MEMORY[0x1E0C874D8];
  if (a9 >> 16)
    return 4294967289;
  __s = bswap32(a9) >> 16;
  qmemcpy(v24, "HPKE-v1", sizeof(v24));
  v17 = cchpke_suite_id(a1, a2, (uint64_t)v25) + 9;
  memcpy(&v24[v17 - 2], a6, a5);
  v18 = v17 + a5;
  v19 = memcpy(&v24[v18 - 2], a8, a7);
  v20 = (rsize_t *)(*((uint64_t (**)(void *))*a1 + 3))(v19);
  v21 = cchkdf_expand(v20, a3, a4, v18 + a7, (char *)&__s, a9, a10);
  cc_clear(0x61uLL, &__s);
  return v21;
}

uint64_t cchpke_suite_id(unsigned __int16 **a1, int a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  v3 = bswap32(*a1[2]) >> 16;
  if (a2)
  {
    *(_BYTE *)(a3 + 2) = 77;
    *(_WORD *)a3 = 17739;
    result = 5;
    v5 = 3;
  }
  else
  {
    v6 = bswap32(*a1[1]);
    v7 = **a1;
    *(_WORD *)(a3 + 4) = v3;
    v3 = HIWORD(v6);
    *(_DWORD *)a3 = 1162563656;
    *(_WORD *)(a3 + 6) = bswap32(v7) >> 16;
    result = 10;
    v5 = 8;
  }
  *(_WORD *)(a3 + v5) = v3;
  return result;
}

uint64_t ccrsa_generate_key_internal_ws(uint64_t a1, unint64_t a2, uint64_t *a3, unint64_t a4, unsigned __int8 *a5, uint64_t (**a6)(_QWORD, unint64_t, uint64_t), uint64_t (**a7)(_QWORD, unint64_t, uint64_t))
{
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t *v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v29;

  if (a2 > 0x2000)
    return 4294967273;
  v13 = a2 >> 1;
  v14 = (a2 >> 1) + 1;
  v15 = a2 - v14;
  v16 = (a2 + 63) >> 6;
  v29 = *(_QWORD *)(a1 + 16);
  *a3 = v16;
  v17 = (_QWORD *)ccrsa_ctx_public(a3);
  *(_QWORD *)ccrsa_ctx_private_zp(a3) = (v13 + 64) >> 6;
  v18 = ccrsa_ctx_private_zp(a3);
  *(_QWORD *)(v18 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a3) + 32) = (v15 + 63) >> 6;
  v19 = v17 + 3;
  result = ccn_read_uint(v16, &v17[2 * *v17 + 4], a4, a5);
  if (!(_DWORD)result)
  {
    v20 = &v19[2 * *v17];
    v22 = *((_BYTE *)v20 + 8);
    v21 = v20 + 1;
    if ((v22 & 1) != 0 && ccn_bitlen(v16, v21) >= 2)
    {
      v23 = (_QWORD *)ccrsa_ctx_private_zp(a3);
      v24 = ccrsa_ctx_private_zp(a3);
      v25 = *(_QWORD *)ccrsa_ctx_private_zp(a3);
      result = ccrsa_generate_prime_ws(a1, v14, v23 + 3, &v19[2 * *v17 + 1], a6, a7);
      if (!(_DWORD)result)
      {
        result = cczp_init_ws(a1, v23);
        if (!(_DWORD)result)
        {
          v26 = v24 + 16 * v25;
          result = ccrsa_generate_prime_ws(a1, v15, (void *)(v26 + 56), &v19[2 * *v17 + 1], a6, a7);
          if (!(_DWORD)result)
          {
            result = cczp_init_ws(a1, (_QWORD *)(v26 + 32));
            if (!(_DWORD)result)
            {
              result = ccrsa_crt_makekey_ws(a1, a3);
              if (!(_DWORD)result)
              {
                ccrsa_pairwise_consistency_check_ws(a1, a3, (uint64_t (**)(_QWORD, uint64_t, uint64_t))a6);
                if (v27)
                  result = 4294967259;
                else
                  result = 0;
              }
            }
          }
        }
      }
    }
    else
    {
      result = 4294967273;
    }
  }
  *(_QWORD *)(a1 + 16) = v29;
  return result;
}

uint64_t ccrsa_generate_key_internal(unint64_t a1, uint64_t *a2, unint64_t a3, unsigned __int8 *a4, uint64_t (**a5)(_QWORD, unint64_t, uint64_t), uint64_t (**a6)(_QWORD, unint64_t, uint64_t))
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t key_internal_ws;
  _QWORD v33[4];
  void (*v34)(uint64_t);

  v10 = a1 + 63;
  v11 = (a1 + 63) >> 6;
  v12 = sizeof_struct_ccrns_mul_modulus();
  v13 = sizeof_struct_ccpolyzp_po2cyc();
  v14 = (v12 + v13 - 1) / v13;
  v15 = 11 * v11 + 1;
  v16 = CCRSA_CRT_POWER_BLINDED_WORKSPACE_N(v11);
  if (v14 + v15 <= v16)
    v17 = v16;
  else
    v17 = v14 + v15;
  v18 = 8 * v11 - (v10 >> 6);
  v19 = v17 + v18;
  v20 = 21 * v11 + 2;
  if (v19 <= v14 + v20)
    v19 = v14 + v20;
  v21 = cc_malloc_clear(8 * v19);
  v33[0] = v21;
  v22 = sizeof_struct_ccrns_mul_modulus();
  v23 = sizeof_struct_ccpolyzp_po2cyc();
  v24 = (v22 + v23 - 1) / v23;
  v25 = v24 + v15;
  v26 = CCRSA_CRT_POWER_BLINDED_WORKSPACE_N(v11);
  if (v25 <= v26)
    v27 = v26;
  else
    v27 = v25;
  v28 = v27 + v18;
  if (v28 <= v24 + v20)
    v28 = v24 + v20;
  v33[1] = v28;
  v33[2] = 0;
  v33[3] = cc_ws_alloc;
  v34 = cc_ws_free;
  if (!v21)
    return 4294967283;
  key_internal_ws = ccrsa_generate_key_internal_ws((uint64_t)v33, a1, a2, a3, a4, a5, a6);
  v34((uint64_t)v33);
  return key_internal_ws;
}

uint64_t ccrsa_make_priv(unint64_t *a1, unint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned __int8 *a5, unint64_t a6, unsigned __int8 *a7)
{
  char v14;
  unint64_t v20;
  unsigned __int8 *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t *v38;
  _QWORD *v39;
  uint64_t inited;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t *v45;
  unint64_t v46;
  unsigned __int8 *v47;
  _QWORD v48[2];
  uint64_t v49;
  uint64_t (*v50)(_QWORD *, uint64_t);
  void (*v51)(uint64_t);
  char v52;

  v14 = 0;
  v52 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v14 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v14 = 1;
    }
  }
  v52 = v14;
  v20 = *a1 + (*a1 & 0xFFFFFFFFFFFFFFFELL) + 9 * *a1 + 4;
  v48[0] = cc_malloc_clear(8 * v20);
  v48[1] = v20;
  v49 = 0;
  v50 = cc_ws_alloc;
  v51 = cc_ws_free;
  if (v48[0])
  {
    v21 = a7;
    v46 = a2;
    v47 = a3;
    v22 = *a1;
    v23 = (*a1 >> 1) + 1;
    v24 = (unint64_t *)cc_ws_alloc(v48, v23);
    v25 = (unint64_t *)v50(v48, v23);
    v26 = (_QWORD *)v50(v48, v22);
    if (!ccn_read_uint(v23, v24, a4, a5))
    {
      v45 = v25;
      if (!ccn_read_uint(v23, v25, a6, v21) && !ccn_read_uint(v22, v26, v46, v47))
      {
        v27 = ccn_n(v22, v26);
        if (v27)
        {
          v28 = v27;
          if ((unint64_t)ccn_n(v27, v26) > 1 || *v26 >= 2uLL)
          {
            v29 = ccn_cmp(v23, v24, v25);
            if (v29)
            {
              ccn_cond_swap(v23, v29 < 0, (uint64_t *)v24, (uint64_t *)v25);
              v30 = ccn_bitlen(v23, v24);
              v31 = ccn_bitlen(v23, v45);
              if (v30 - v31 > 2)
              {
                v43 = 4294967257;
                goto LABEL_21;
              }
              if (v31 + v30 <= v22 << 6)
              {
                v32 = (v30 + 63) >> 6;
                v33 = (v31 + 63) >> 6;
                *(_QWORD *)ccrsa_ctx_private_zp(a1) = v32;
                v34 = ccrsa_ctx_private_zp(a1);
                ccn_set(v32, (void *)(v34 + 24), v24);
                v35 = ccrsa_ctx_private_zp(a1);
                *(_QWORD *)(v35 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a1) + 32) = v33;
                v36 = ccrsa_ctx_private_zp(a1);
                v37 = (_QWORD *)ccrsa_ctx_private_zp(a1);
                ccn_set(v33, (void *)(v36 + 16 * *v37 + 56), v45);
                v38 = &a1[2 * *a1 + 4];
                ccn_set(v28, v38, v26);
                ccn_zero(v22 - v28, &v38[v28]);
                v49 = 0;
                v39 = (_QWORD *)ccrsa_ctx_private_zp(a1);
                inited = cczp_init_ws((uint64_t)v48, v39);
                if (!(_DWORD)inited)
                {
                  v41 = ccrsa_ctx_private_zp(a1);
                  v42 = (_QWORD *)ccrsa_ctx_private_zp(a1);
                  inited = cczp_init_ws((uint64_t)v48, (_QWORD *)(v41 + 16 * *v42 + 32));
                  if (!(_DWORD)inited)
                    inited = ccrsa_crt_makekey_ws((uint64_t)v48, a1);
                }
                v43 = inited;
                goto LABEL_21;
              }
            }
          }
        }
      }
    }
    v43 = 4294967273;
LABEL_21:
    v49 = 0;
    v51((uint64_t)v48);
    goto LABEL_22;
  }
  v43 = 4294967283;
LABEL_22:
  cc_disable_dit(&v52);
  return v43;
}

double ccrsa_verify_pkcs1v15_msg_ws(uint64_t a1, unint64_t *a2, uint64_t a3, size_t a4, char *a5, unint64_t a6, unsigned __int8 *a7, _QWORD *a8)
{
  char v15[64];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C874D8];
  ccdigest(a3, a4, a5, (uint64_t)v15);
  return ccrsa_verify_pkcs1v15_digest_ws(a1, a2, *(_QWORD *)(a3 + 32), *(_QWORD *)a3, v15, a6, a7, a8);
}

uint64_t ccrsa_verify_pkcs1v15_msg(unint64_t *a1, uint64_t a2, size_t a3, char *a4, unint64_t a5, unsigned __int8 *a6, _QWORD *a7)
{
  char v13;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v30[4];
  void (*v31)(uint64_t);
  char v32;
  char v33[64];
  uint64_t v34;

  v13 = 0;
  v34 = *MEMORY[0x1E0C874D8];
  v32 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v13 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v13 = 1;
    }
  }
  v32 = v13;
  v19 = *a1;
  v20 = sizeof_struct_ccrns_mul_modulus();
  v21 = sizeof_struct_ccpolyzp_po2cyc();
  v30[0] = cc_malloc_clear(8 * ((v20 + v21 - 1) / v21 + 13 * v19) + 8);
  v22 = *a1;
  v23 = sizeof_struct_ccrns_mul_modulus();
  v24 = sizeof_struct_ccpolyzp_po2cyc();
  v30[1] = (v23 + v24 - 1) / v24 + 13 * v22 + 1;
  v30[2] = 0;
  v30[3] = cc_ws_alloc;
  v31 = cc_ws_free;
  if (v30[0])
  {
    ccdigest(a2, a3, a4, (uint64_t)v33);
    v25 = ccrsa_verify_pkcs1v15_digest_ws((uint64_t)v30, a1, *(_QWORD *)(a2 + 32), *(_QWORD *)a2, v33, a5, a6, a7);
    v27 = v26;
    ((void (*)(_QWORD *, double))v31)(v30, v25);
  }
  else
  {
    v27 = 4294967283;
  }
  cc_disable_dit(&v32);
  return v27;
}

uint64_t ccapsic_client_generate_match_response(_QWORD **a1, _QWORD **a2, uint64_t **a3)
{
  char v5;
  uint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t (**v14)(_QWORD, uint64_t, uint64_t *);
  uint64_t scalar_fips_retry;
  uint64_t v16;
  char v18;

  v5 = 0;
  v18 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v18 = v5;
  v11 = *a1;
  if (*a2 == *a1 && *a3 == v11)
  {
    v12 = (unint64_t *)(a1 + 24);
    v13 = *v11;
    v14 = (uint64_t (**)(_QWORD, uint64_t, uint64_t *))a1[1];
    scalar_fips_retry = ccec_generate_scalar_fips_retry(*a1, (uint64_t (**)(_QWORD, unint64_t, void *))v14, a1 + 24);
    if ((_DWORD)scalar_fips_retry
      || (scalar_fips_retry = ccec_mult_blinded(v11, (uint64_t)(a2 + 2), v12, (uint64_t)&v12[2 * v13], v14),
          (_DWORD)scalar_fips_retry)
      || (scalar_fips_retry = ccec_mult_blinded(v11, (uint64_t)(a3 + 2), v12, (uint64_t)&v12[3 * v13 + 2 * v13], v14),
          (_DWORD)scalar_fips_retry)
      || (scalar_fips_retry = ccec_affinify(v11, (uint64_t)(a3 + 2), (uint64_t)(a3 + 2)), (_DWORD)scalar_fips_retry))
    {
      v16 = scalar_fips_retry;
    }
    else
    {
      v16 = ccec_affinify(v11, (uint64_t)(a2 + 2), (uint64_t)(a2 + 2));
      if (!(_DWORD)v16)
      {
        ccn_seti(*v11, &a3[2 * **a3 + 2], 1);
        ccn_seti(*v11, &a2[2 * **a2 + 2], 1);
      }
    }
  }
  else
  {
    v16 = 4294967289;
  }
  cc_disable_dit(&v18);
  return v16;
}

uint64_t ccmode_ofb_init(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, void *__src)
{
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t, char *, uint64_t, uint64_t);

  v8 = *(_QWORD *)(a1 + 32);
  *a2 = v8;
  v9 = (char *)(a2 + 2);
  memcpy(a2 + 2, __src, *(_QWORD *)(v8 + 8));
  v10 = *(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v8 + 16);
  a2[1] = *(_QWORD *)(v8 + 8);
  return v10(v8, &v9[(*(_QWORD *)(v8 + 8) + 7) & 0xFFFFFFFFFFFFFFF8], a3, a4);
}

_BYTE *ccmode_factory_gcm_decrypt(_QWORD *a1, _QWORD *a2)
{
  char v2;
  char v9;

  v2 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v9 = v2;
  *a1 = ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) + 5 * ((a2[1] + 7) & 0xFFFFFFFFFFFFFFF8) + 384;
  a1[1] = 78647;
  a1[2] = 1;
  a1[3] = ccmode_gcm_init;
  a1[4] = ccmode_gcm_set_iv;
  a1[5] = ccmode_gcm_aad;
  a1[6] = ccmode_gcm_decrypt;
  a1[7] = ccmode_gcm_finalize;
  a1[8] = ccmode_gcm_reset;
  a1[9] = a2;
  return cc_disable_dit(&v9);
}

uint64_t ccmode_cfb8_decrypt(_BYTE *a1, uint64_t a2, char *a3, _BYTE *a4)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (a2)
  {
    v6 = a2;
    v7 = a1 + 8;
    v8 = *(_QWORD *)a1;
    v9 = (unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 7) >> 3;
    v10 = (uint64_t)&a1[16 * v9 + 8];
    v11 = (uint64_t)&a1[8 * v9 + 8];
    do
    {
      --v6;
      memmove((void *)v11, (const void *)(v11 + 1), *(_QWORD *)(v8 + 8) - 1);
      v12 = *a3++;
      *(_BYTE *)(*(_QWORD *)(v8 + 8) + v11 - 1) = v12;
      *a4++ = *v7 ^ v12;
      (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(v8 + 24))(v10, 1, v11, v7);
    }
    while (v6);
  }
  return 0;
}

uint64_t ccpad_cts1_encrypt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6)
{
  char v12;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  _BYTE __src[32];
  uint64_t v25;

  v12 = 0;
  v25 = *MEMORY[0x1E0C874D8];
  v23 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v12 = 1;
    }
  }
  v23 = v12;
  v18 = *(_QWORD *)(a1 + 8);
  v19 = (a4 - 1) / v18;
  if (v19 >= 2)
  {
    v21 = (v19 - 1) * v18;
    (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a2, a3);
    v20 = a4 - v21;
    a5 += v21;
    a6 += v21;
  }
  else
  {
    v20 = a4;
  }
  if (v20 == 2 * v18)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1 + 24))(a2, a3, 2, a5, a6);
  }
  else
  {
    __memcpy_chk();
    cc_clear(v18 - (v20 - v18), &__src[v20]);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *, _BYTE *))(a1 + 24))(a2, a3, 2, __src, __src);
    memmove(a6, __src, v20 - v18);
    memmove(&a6[v20 - v18], &__src[v18], v18);
  }
  cc_disable_dit(&v23);
  return a4;
}

uint64_t ccpad_pkcs7_decode(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v8;
  char v10;

  v2 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v10 = v2;
  v8 = ((((*(unsigned __int8 *)(a1 + a2 - 1) + ~(_BYTE)a1) | (256
                                                                             - *(unsigned __int8 *)(a1 + a2 - 1))) >> 8)
      - 1) & *(unsigned __int8 *)(a1 + a2 - 1);
  cc_disable_dit(&v10);
  return v8;
}

uint64_t ccmode_siv_hmac_init(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result;
  unint64_t *v7;

  *a2 = a1;
  if (a3 > 0x40)
    return 4294967226;
  result = 4294967226;
  if (a3 - 32 <= 0x20 && ((1 << (a3 - 32)) & 0x100010001) != 0)
  {
    v7 = *(unint64_t **)(a1 + 56);
    if (a3 >> 1 <= v7[1])
    {
      if (*v7 >= a5)
      {
        if (a5 >= 0x14)
        {
          if (*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) == 16)
          {
            a2[1] = a3;
            __memcpy_chk();
            __memcpy_chk();
            a2[2] = a5;
            return ccmode_siv_hmac_reset((uint64_t)a2);
          }
        }
        else
        {
          return 4294967195;
        }
      }
      else
      {
        return 4294967196;
      }
    }
  }
  return result;
}

void *ccdes3_ecb_decrypt_mode()
{
  return &ccdes3_ltc_ecb_decrypt_mode;
}

void *ccdh_gp_rfc3526group18()
{
  return &_ccdh_gp_rfc3526group18;
}

uint64_t fipspost_post_aes_ccm(char a1)
{
  char *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  int v18;
  char v19[4];
  int v20;
  int v21;
  _DWORD v22[2];
  char v23[16];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C874D8];
  v30 = *(_OWORD *)"@ABCDEFGHIJKLMNO";
  *(_DWORD *)((char *)v22 + 3) = 370480147;
  v22[0] = 319951120;
  v29 = 0x706050403020100;
  v21 = 1526817393;
  v20 = 589439264;
  if ((a1 & 0x10) != 0)
    v2 = "\x01M\xAC%]";
  else
    v2 = "M\xAC%]";
  v18 = 0;
  v3 = ccaes_ccm_decrypt_mode();
  if (ccccm_one_shot((uint64_t)v3, 16, (uint64_t)&v30, 7, (uint64_t)v22, 4, (uint64_t)&v21, (uint64_t)v19, 8, (uint64_t)&v29, 4, (uint64_t)&v18))
  {
    mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccccm_one_shot AEAD decrypt authentication\n");
    return 4294967223;
  }
  if (cc_cmp_safe(4, (char *)&v18, v2))
  {
    v4 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccccm_one_shot AEAD decrypt authentication\n", v4, "fipspost_post_aes_ccm", 61);
    v5 = 4294967221;
  }
  else
  {
    v5 = 0;
  }
  if (cc_cmp_safe(4, v19, (char *)&v20))
  {
    v6 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccccm_one_shot AEAD decrypt decryption\n", v6, "fipspost_post_aes_ccm", 65);
    v5 = 4294967221;
  }
  if (ccccm_one_shot_decrypt((uint64_t)v3, 16, (uint64_t)&v30, 7, (uint64_t)v22, 4, (uint64_t)&v21, (uint64_t)v19, 8, (uint64_t)&v29, 4, v2))
  {
    v7 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccccm_one_shot AEAD decrypt authentication\n", v7, "fipspost_post_aes_ccm", 75);
    v5 = 4294967221;
  }
  if (cc_cmp_safe(4, v19, (char *)&v20))
  {
    v8 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccccm_one_shot AEAD decrypt decryption\n", v8, "fipspost_post_aes_ccm", 79);
    v5 = 4294967221;
  }
  v28 = *(_OWORD *)"@ABCDEFGHIJKLMNO";
  v27 = 0x1716151413121110;
  v25 = xmmword_1DEE1CC80;
  v26 = *(_OWORD *)"";
  v24 = xmmword_1DEE1CC90;
  if ((a1 & 0x10) != 0)
    v9 = "\x01\x1F\xC6\x4F\xBF\xAC\xCD\x1F\xC6\x4F\xBF\xAC\xCDFIPSPOST_USER [%llu] %s:%d: FAILED: ccccm_one_shot encrypt "
         "authentication\n";
  else
    v9 = "\x1F\xC6\x4F\xBF\xAC\xCDFIPSPOST_USER [%llu] %s:%d: FAILED: ccccm_one_shot encrypt authentication\n";
  v17 = 0;
  v16 = 0;
  v10 = ccaes_ccm_encrypt_mode();
  if (ccccm_one_shot((uint64_t)v10, 16, (uint64_t)&v28, 8, (uint64_t)&v27, 16, (uint64_t)&v24, (uint64_t)v23, 16, (uint64_t)&v26, 6, (uint64_t)&v16))goto LABEL_24;
  if (cc_cmp_safe(6, (char *)&v16, v9))
  {
    v11 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccccm_one_shot encrypt authentication\n", v11, "fipspost_post_aes_ccm", 121);
    v5 = v5 | 0xFFFFFFB5;
  }
  if (cc_cmp_safe(16, v23, (char *)&v25))
  {
    v12 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccccm_one_shot encrypt encryption\n", v12, "fipspost_post_aes_ccm", 125);
    v5 = v5 | 0xFFFFFFB5;
  }
  if (ccccm_one_shot_encrypt((uint64_t)v10, 16, (uint64_t)&v28, 8, (uint64_t)&v27, 16, (uint64_t)&v24, (uint64_t)v23, 16, (uint64_t)&v26, 6, (uint64_t)&v16))
  {
LABEL_24:
    mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccccm_one_shot encrypt authentication\n");
    return 4294967223;
  }
  if (cc_cmp_safe(6, (char *)&v16, v9))
  {
    v14 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccccm_one_shot encrypt authentication\n", v14, "fipspost_post_aes_ccm", 140);
    v5 = v5 | 0xFFFFFFB5;
  }
  if (cc_cmp_safe(16, v23, (char *)&v25))
  {
    v15 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccccm_one_shot encrypt encryption\n", v15, "fipspost_post_aes_ccm", 144);
    return v5 | 0xFFFFFFB5;
  }
  return v5;
}

uint64_t cccast_setup(uint64_t a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  CC_CAST_set_key(a2, a3, a4);
  return 0;
}

unint64_t CCPOLYZP_PO2CYC_CTX_WORKSPACE_N(unsigned int a1)
{
  unint64_t v2;
  uint64_t v3;

  v2 = (unint64_t)(sizeof_struct_ccpolyzp_po2cyc_ctx() + 7) >> 3;
  if (a1 >= 0x80)
    v3 = 128;
  else
    v3 = a1;
  return v2 + 2 * (((unint64_t)(sizeof_struct_ccrns_mul_modulus() + 7) >> 3) * v3 + a1) + 6;
}

BOOL ccpolyzp_po2cyc_ctx_eq(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;
  BOOL v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _DWORD *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _DWORD *v16;

  if ((_DWORD *)a1 == a2)
    return 1;
  if (*(_DWORD *)a1 == *a2)
  {
    v2 = *(_DWORD *)(a1 + 4);
    if (v2 == a2[1])
    {
      if (v2)
      {
        v3 = 0;
        v4 = 0;
        v5 = v2 - 1;
        v6 = 0x40000000u >> __clz(*(_DWORD *)a1);
        while (1)
        {
          v7 = v2 - 1;
          v8 = a1;
          if (v5 <= v4)
            break;
          do
          {
            v8 = *(_QWORD *)(v8 + 112);
            --v7;
          }
          while (v7 > v4);
          v9 = *(_QWORD *)(v8 + 16);
          if (v5 <= v4)
            goto LABEL_13;
          v10 = v2 - 1;
          v11 = a2;
          do
          {
            v11 = (_DWORD *)*((_QWORD *)v11 + 14);
            --v10;
          }
          while (v10 > v4);
LABEL_14:
          if (v9 != *((_QWORD *)v11 + 2))
            return v3;
          if (*(_BYTE *)(a1 + 8))
          {
            v12 = v2 - 1;
            v13 = a1;
            if (v5 <= v4)
            {
              v14 = *(_QWORD *)(a1 + 168 + 8 * v6);
            }
            else
            {
              do
              {
                v13 = *(_QWORD *)(v13 + 112);
                --v12;
              }
              while (v12 > v4);
              v14 = *(_QWORD *)(v13 + 8 * v6 + 168);
              if (v5 > v4)
              {
                v15 = v2 - 1;
                v16 = a2;
                do
                {
                  v16 = (_DWORD *)*((_QWORD *)v16 + 14);
                  --v15;
                }
                while (v15 > v4);
LABEL_24:
                if (v14 != *(_QWORD *)&v16[2 * v6 + 42])
                  return v3;
                goto LABEL_25;
              }
            }
            v16 = a2;
            goto LABEL_24;
          }
LABEL_25:
          v3 = ++v4 >= v2;
          if (v4 == v2)
            return v3;
        }
        v9 = *(_QWORD *)(a1 + 16);
LABEL_13:
        v11 = a2;
        goto LABEL_14;
      }
      return 1;
    }
  }
  return 0;
}

unint64_t CCPOLYZP_PO2CYC_CTX_INIT_WORKSPACE_N(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sizeof_struct_ccrns_mul_modulus();
  v3 = sizeof_struct_ccpolyzp_po2cyc();
  if (5 * a1 + 3 <= (unint64_t)(10 * a1))
    v4 = 10 * a1;
  else
    v4 = 5 * a1 + 3;
  if (v4 <= (v2 + v3 - 1) / v3 + 19 * a1 + 2)
    return (v2 + v3 - 1) / v3 + 19 * a1 + 2;
  else
    return v4;
}

uint64_t ccpolyzp_po2cyc_ctx_init_ws(uint64_t a1, unsigned int *a2, unsigned int *a3, uint64_t *a4, uint64_t a5)
{
  uint8x8_t v5;
  unsigned int v7;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t result;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v25;
  int v26;
  char v27;
  unsigned int *v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int8x8_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  unsigned __int8 *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _BOOL8 v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  uint64_t *v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  unint64_t __dst;
  uint64_t __src;
  unint64_t v99;
  unint64_t v100[2];

  v100[1] = *MEMORY[0x1E0C874D8];
  v5 = (uint8x8_t)vcnt_s8((int8x8_t)*a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (*a3 > 0x100000 || v5.i32[0] != 1)
    return 4294967289;
  v7 = a3[1];
  if (v7 - 1 > 9 || !a5 && v7 != 1)
    return 4294967289;
  v11 = *(_QWORD *)a3;
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *((_QWORD *)a2 + 14) = a5;
  v12 = a3[1];
  if (v12)
  {
    v13 = 0;
    while (1)
    {
      v14 = a4[v13];
      if (v14 < 0)
        return 4294967289;
      v15 = v13;
      v16 = a4;
      if ((_DWORD)v13)
        break;
LABEL_15:
      if ((_DWORD)++v13 == v12)
        goto LABEL_16;
    }
    while (1)
    {
      v17 = *v16++;
      if (v14 == v17)
        return 4294967289;
      if (!--v15)
        goto LABEL_15;
    }
  }
LABEL_16:
  v18 = v12 - 1;
  LODWORD(v11) = HIDWORD(v11) - 1;
  v19 = a2;
  if (HIDWORD(v11) - 1 > v18)
  {
    v19 = a2;
    do
    {
      v19 = (unsigned int *)*((_QWORD *)v19 + 14);
      LODWORD(v11) = v11 - 1;
    }
    while (v11 > v18);
  }
  result = ccpolyzp_po2cyc_modulus_to_cczp_ws(a1, (_QWORD *)v19 + 15, a4[v18]);
  if (!(_DWORD)result)
  {
    v89 = (uint64_t *)(a2 + 4);
    result = ccrns_modulus_init_ws(a1, (unint64_t *)a2 + 2, a4[v18]);
    if (!(_DWORD)result)
    {
      v21 = a2[1];
      *((_BYTE *)a2 + 8) = 1;
      if (v21)
      {
        v22 = 0;
        v23 = *a2;
        v25 = (v23 & ((_DWORD)v23 - 1)) != 0 || (_DWORD)v23 == 0 || v23 >= 0x100001;
        v26 = !v25;
        v27 = 1;
        do
        {
          v28 = a2;
          if (v21 - 1 > v22)
          {
            v29 = v21 - 1;
            v28 = a2;
            do
            {
              v28 = (unsigned int *)*((_QWORD *)v28 + 14);
              --v29;
            }
            while (v29 > v22);
          }
          if (v26)
            v30 = *((_QWORD *)v28 + 2) % (2 * (unint64_t)*a2) == 1;
          else
            v30 = 0;
          if (v27)
            v27 = v30;
          else
            v27 = 0;
          ++v22;
        }
        while (v22 != v21);
        *((_BYTE *)a2 + 8) = v27;
        if ((v27 & 1) == 0)
          return 0;
      }
      else
      {
        v23 = *a2;
      }
      v31 = v23 >= 0x80 ? 128 : v23;
      v32 = sizeof_struct_ccrns_mul_modulus();
      v34 = (2 * v23);
      result = 4294967289;
      if (v34 < 0x100001)
      {
        v33.i32[0] = 2 * v23;
        v35 = (uint8x8_t)vcnt_s8(v33);
        v35.i16[0] = vaddlv_u8(v35);
        if (v35.i32[0] == 1)
        {
          v36 = (uint64_t)(a2 + 30);
          v37 = a2 + 42;
          v38 = &a2[2 * v23 + 42 + 2 * ((unint64_t)(v32 + 7) >> 3) * v31];
          v87 = (uint64_t)&a2[2 * v23 + 42];
          v88 = &v38[2 * v23];
          v39 = (unsigned __int8 *)cczp_prime((uint64_t)(a2 + 30));
          *(_QWORD *)&v94 = 0;
          ccn_read_uint(1uLL, &v94, 8uLL, v39);
          v40 = 0;
          v41 = bswap64(v94);
          while (*(_QWORD *)((char *)&predefined_min_primitive_roots + v40 + 8) != v34
               || *(_QWORD *)((char *)&predefined_min_primitive_roots + v40) != v41)
          {
            v40 += 24;
            if (v40 == 600)
            {
              if ((v41 - 1) % v34)
                return 4294967289;
              ccn_seti(1, &__dst, 1);
              v90 = -1;
              v42 = (unsigned __int8 *)cczp_prime((uint64_t)(a2 + 30));
              *(_QWORD *)&v94 = 0;
              ccn_read_uint(1uLL, &v94, 8uLL, v42);
              v43 = bswap64(v94) - 1;
              if (v43 % v34)
                return 4294967289;
              v99 = v43 / v34;
              v44 = ccrng(&v90);
              result = v90;
              if (!v90)
              {
                v45 = v23 & 0x7FFFFFFF;
                v46 = 665;
                while (1)
                {
                  result = cczp_generate_random_element_ws(a1, (_QWORD *)a2 + 15, (uint64_t (**)(_QWORD, unint64_t, uint64_t))v44, &__src);
                  v90 = result;
                  if ((_DWORD)result)
                    return result;
                  cczp_power_ws(a1, (uint64_t)(a2 + 30), &__src, (unint64_t *)&__src, 64, &v99);
                  if (ccn_n(1, &__src))
                  {
                    v91 = v45;
                    v47 = (unsigned __int8 *)cczp_prime((uint64_t)(a2 + 30));
                    *(_QWORD *)&v94 = 0;
                    ccn_read_uint(1uLL, &v94, 8uLL, v47);
                    v100[0] = bswap64(v94) - 1;
                    cczp_power_ws(a1, (uint64_t)(a2 + 30), &v94, (unint64_t *)&__src, 64, &v91);
                    if (!ccn_cmp(1, (unint64_t *)&v94, v100))
                      break;
                  }
                  if (!--v46)
                  {
                    result = v90;
                    if (v90)
                      return result;
                    goto LABEL_66;
                  }
                }
                ccn_set(1, &__dst, &__src);
LABEL_66:
                v49 = __dst;
                v95 = 0u;
                v96 = 0u;
                v94 = 0u;
                result = ccrns_modulus_init_var_time_ws(a1, (unint64_t *)&v94, v41);
                if ((_DWORD)result)
                  return result;
                v50 = (v49 * (unsigned __int128)v49) >> 64;
                v51 = __CFADD__((v49 * v49 * (unsigned __int128)(unint64_t)v95) >> 64, v50 * v95);
                v52 = v49 * v49
                    - (v51
                     + __CFADD__(v49 * v49 * *((_QWORD *)&v95 + 1), (v49 * (unsigned __int128)v49 * (unint64_t)v95) >> 64)+ ((v50 * (unsigned __int128)(unint64_t)v95) >> 64)+ *((_QWORD *)&v95 + 1) * v50+ ((v49 * v49 * (unsigned __int128)*((unint64_t *)&v95 + 1)) >> 64))* v94;
                v53 = v52 - (uint64_t)v94 >= 0
                    ? v52 - (uint64_t)v94
                    : v49 * v49
                    - (v51
                     + __CFADD__(v49 * v49 * *((_QWORD *)&v95 + 1), (v49 * (unsigned __int128)v49 * (unint64_t)v95) >> 64)+ ((v50 * (unsigned __int128)(unint64_t)v95) >> 64)+ *((_QWORD *)&v95 + 1) * v50+ ((v49 * v49 * (unsigned __int128)*((unint64_t *)&v95 + 1)) >> 64))* v94;
                v91 = 0;
                v92 = 0;
                v93 = 0;
                result = ccrns_mul_modulus_init_ws(a1, &v91, v41, v53);
                if ((_DWORD)result)
                  return result;
                if (v45 <= 1)
                  v54 = 1;
                else
                  v54 = v45;
                v48 = v49;
                do
                {
                  if (v49 < v48)
                    v48 = v49;
                  v55 = v49 * v92 - v91 * ((v49 * (unsigned __int128)v93) >> 64);
                  if (v55 - v91 >= 0)
                    v49 = v55 - v91;
                  else
                    v49 = v49 * v92 - v91 * ((v49 * (unsigned __int128)v93) >> 64);
                  --v54;
                }
                while (v54);
                goto LABEL_84;
              }
              return result;
            }
          }
          v48 = *(_QWORD *)((char *)&predefined_min_primitive_roots + v40 + 16);
LABEL_84:
          v100[0] = v48;
          v94 = 0uLL;
          *(_QWORD *)&v95 = 0;
          result = ccrns_mul_modulus_init_var_time_ws(a1, (uint64_t *)&v94, *v89, v48);
          if (!(_DWORD)result)
          {
            result = cczp_inv_field_ws(a1, (uint64_t)(a2 + 30), &v99, v100);
            if (!(_DWORD)result)
            {
              v92 = 0;
              v93 = 0;
              v91 = 0;
              result = ccrns_mul_modulus_init_var_time_ws(a1, &v91, *v89, v99);
              if (!(_DWORD)result)
              {
                *((_QWORD *)a2 + 21) = 1;
                v56 = *a2;
                if (*a2 <= 1)
                {
                  *(_QWORD *)v38 = 1;
                }
                else
                {
                  v57 = 0;
                  v58 = __clz(v56) + 1;
                  v59 = 1;
                  do
                  {
                    v60 = __rbit32(v59) >> v58;
                    v61 = *((_QWORD *)&v94 + 1) * *(_QWORD *)&v37[2 * v57]
                        - v94 * (((unint64_t)v95 * (unsigned __int128)*(unint64_t *)&v37[2 * v57]) >> 64);
                    if ((uint64_t)(v61 - v94) >= 0)
                      v62 = v61 - v94;
                    else
                      v62 = v61;
                    *(_QWORD *)&v37[2 * v60] = v62;
                    if (v56 >= 0x80)
                      v63 = 128;
                    else
                      v63 = v56;
                    if (v60 < v63)
                    {
                      result = ccrns_mul_modulus_init_var_time_ws(a1, (uint64_t *)(v87 + 24 * v60), *v89, v62);
                      if ((_DWORD)result)
                        return result;
                      v56 = *a2;
                    }
                    ++v59;
                    v57 = v60;
                  }
                  while (v59 < v56);
                  *(_QWORD *)v38 = 1;
                  if (v56 >= 2)
                  {
                    v64 = 0;
LABEL_101:
                    if (v56 >= 2)
                    {
                      if (v56 >> 1 <= 1)
                        v65 = 1;
                      else
                        v65 = v56 >> 1;
                      v66 = v56 >> 1;
                      while (1)
                      {
                        v67 = *(_QWORD *)&v38[2 * v64];
                        v64 = __rbit32(v66) >> v58;
                        v68 = v92 * v67 - v91 * ((v93 * (unsigned __int128)v67) >> 64);
                        if ((uint64_t)(v68 - v91) >= 0)
                          v69 = v68 - v91;
                        else
                          v69 = v68;
                        *(_QWORD *)&v38[2 * v64] = v69;
                        v70 = *a2 - 128;
                        if (*a2 < 0x80)
                          v70 = 0;
                        if (v64 >= v70)
                        {
                          result = ccrns_mul_modulus_init_var_time_ws(a1, (uint64_t *)&v88[6 * *a2 + 6 * ~v64], *v89, v69);
                          if ((_DWORD)result)
                            return result;
                        }
                        ++v66;
                        if (!--v65)
                        {
                          v25 = v56 >= 4;
                          v56 >>= 1;
                          if (v25)
                            goto LABEL_101;
                          break;
                        }
                      }
                    }
                    v56 = *a2;
                    v36 = (uint64_t)(a2 + 30);
                  }
                }
                v71 = *((_QWORD *)a2 + 2);
                v72 = v56 - v71 * ((*((unint64_t *)a2 + 3) * (unsigned __int128)v56) >> 64);
                v73 = v72 - v71;
                if (v73 >= 0)
                  v72 = v73;
                __src = v72;
                __dst = v56;
                result = cczp_inv_field_ws(a1, v36, &__dst, &__src);
                if (!(_DWORD)result)
                {
                  v74 = __dst;
                  result = ccrns_mul_modulus_init_var_time_ws(a1, (uint64_t *)a2 + 11, *((_QWORD *)a2 + 2), __dst);
                  if (!(_DWORD)result)
                  {
                    v75 = *(_QWORD *)&v38[2 * *a2 - 2];
                    v76 = v75 * v74;
                    v77 = (v75 * (unsigned __int128)v74) >> 64;
                    v78 = *((_QWORD *)a2 + 4);
                    v79 = (v76 * (unsigned __int128)v78) >> 64;
                    v80 = (v77 * (unsigned __int128)v78) >> 64;
                    v81 = v77 * v78;
                    v25 = __CFADD__(v79, v81);
                    v82 = v79 + v81;
                    v83 = v25;
                    v84 = *((_QWORD *)a2 + 2);
                    v85 = v76
                        - (v83
                         + __CFADD__(v76 * *((_QWORD *)a2 + 5), v82)
                         + v80
                         + *((_QWORD *)a2 + 5) * v77
                         + ((v76 * (unsigned __int128)*((unint64_t *)a2 + 5)) >> 64))
                        * v84;
                    if ((uint64_t)(v85 - v84) >= 0)
                      v86 = v85 - v84;
                    else
                      v86 = v85;
                    return ccrns_mul_modulus_init_var_time_ws(a1, (uint64_t *)a2 + 8, v84, v86);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ccpolyzp_po2cyc_ctx_chain_init_ws(uint64_t a1, unsigned int *a2, unsigned int *a3, uint64_t *a4)
{
  uint8x8_t v4;
  BOOL v5;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  int i;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t result;
  unsigned int v19[2];

  v4 = (uint8x8_t)vcnt_s8((int8x8_t)*a3);
  v4.i16[0] = vaddlv_u8(v4);
  v5 = *a3 <= 0x100000 && v4.i32[0] == 1;
  if (!v5 || !a3[1])
    return 4294967289;
  *(_QWORD *)a2 = *(_QWORD *)a3;
  if (!a3[1])
    return 0;
  v9 = 0;
  v10 = a2 + 2;
  v11 = 1;
  for (i = -1; ; --i)
  {
    v19[0] = *a3;
    v19[1] = v11;
    v13 = *a2;
    v14 = (unint64_t)(sizeof_struct_ccpolyzp_po2cyc_ctx() + 7) >> 3;
    v15 = v13 >= 0x80 ? 128 : v13;
    v16 = &v10[2
             * (v14 + 2 * (v13 + ((unint64_t)(sizeof_struct_ccrns_mul_modulus() + 7) >> 3) * v15) + 6)
             * (i + a2[1])];
    result = ccpolyzp_po2cyc_ctx_init_ws(a1, v16, v19, a4, v9);
    if ((_DWORD)result)
      break;
    ++v11;
    v9 = (uint64_t)v16;
    if (v11 > a3[1])
      return 0;
  }
  return result;
}

uint64_t CCPOLYZP_PO2CYC_CTX_Q_PROD_WORKSPACE_N(uint64_t result)
{
  return result;
}

void *ccpolyzp_po2cyc_ctx_q_prod_ws(uint64_t a1, char *__dst, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;

  v6 = *(unsigned int *)(a3 + 4);
  v7 = a3;
  v8 = v6 - 1;
  if ((_DWORD)v6 != 1)
  {
    v7 = a3;
    do
    {
      v7 = *(_QWORD *)(v7 + 112);
      --v8;
    }
    while (v8);
  }
  v9 = *(_QWORD *)(a1 + 16);
  ccn_set(1, __dst, (void *)(v7 + 144));
  ccn_zero(v6 - 1, __dst + 8);
  result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  LODWORD(v11) = *(_DWORD *)(a3 + 4);
  if (v11 >= 2)
  {
    v12 = result;
    v13 = 1;
    do
    {
      v14 = a3;
      if (v13 < (v11 - 1))
      {
        v15 = v11 - 2;
        v14 = a3;
        do
          v14 = *(_QWORD *)(v14 + 112);
        while (v13 < v15--);
      }
      ccn_muln(v13++, (uint64_t)v12, (uint64_t)__dst, 1uLL, (_QWORD *)(v14 + 144));
      result = ccn_set(v13, __dst, v12);
      v11 = *(unsigned int *)(a3 + 4);
    }
    while (v13 < v11);
  }
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

_BYTE *ccss_shamir_share_bag_init(uint64_t a1, uint64_t a2)
{
  char v2;
  char v9;

  v2 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v9 = v2;
  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 0;
  return cc_disable_dit(&v9);
}

void *ccdh_gp_rfc3526group14()
{
  return &_ccdh_gp_rfc3526group14;
}

uint64_t ccdh_import_full(uint64_t a1, unint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned __int8 *a5, _QWORD *a6)
{
  char v12;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  char v26;

  v12 = 0;
  v26 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v12 = 1;
    }
  }
  v26 = v12;
  v18 = (_QWORD *)ccdh_ctx_public(a6);
  ccdh_ctx_init(a1, v18);
  v19 = &a6[ccdh_gp_n(*a6) + 2];
  v20 = ccdh_gp_n(a1);
  if (ccn_read_uint(v20, v19, a2, a3))
  {
    v21 = 4294967244;
  }
  else
  {
    v22 = ccdh_gp_n(a1);
    v23 = (unint64_t *)cczp_prime(a1);
    if ((ccn_cmp(v22, v19, v23) & 0x80000000) != 0)
    {
      v24 = (_QWORD *)ccdh_ctx_public(a6);
      v21 = ccdh_import_pub(a1, a4, a5, v24);
    }
    else
    {
      v21 = 4294967247;
    }
  }
  cc_disable_dit(&v26);
  return v21;
}

uint64_t ccec_rfc6637_kdf(uint64_t a1, char *a2, uint64_t a3, size_t a4, char *a5, size_t a6, char *a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C874D8];
  v16 = MEMORY[0x1E0C86820](a1, a2, a3, a4);
  v18 = (_QWORD *)((char *)v20 - v17);
  ccdigest_init(v16, (_QWORD *)((char *)v20 - v17));
  ccdigest_update(a1, v18, 4uLL, byte_1DEE1CEFF);
  ccdigest_update(a1, v18, a4, a5);
  ccdigest_update(a1, v18, 1uLL, *(char **)a2);
  ccdigest_update(a1, v18, **(unsigned __int8 **)a2, (char *)(*(_QWORD *)a2 + 1));
  ccdigest_update(a1, v18, 1uLL, a2 + 8);
  ccdigest_update(a1, v18, 2uLL, "\x03\x01");
  ccdigest_update(a1, v18, 1uLL, (char *)(a3 + 8));
  ccdigest_update(a1, v18, 1uLL, (char *)(a3 + 24));
  ccdigest_update(a1, v18, 0x14uLL, "Anonymous Sender    ");
  ccdigest_update(a1, v18, a6, a7);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(a1 + 56))(a1, v18, a8);
  return cc_clear(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) + 12, v18);
}

uint64_t ccn_gcd_ws(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t *i;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v47;
  unint64_t v48;
  void *v49;

  v13 = a6 + a4;
  v47 = *(_QWORD *)(a1 + 16);
  v14 = (uint64_t *)(*(uint64_t (**)(void))(a1 + 24))();
  v15 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, a2);
  v49 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, a2);
  if (a4)
    ccn_set(a4, v14, a5);
  v16 = v13 << 6;
  ccn_zero(a2 - a4, &v14[a4]);
  if (a6)
    ccn_set(a6, v15, a7);
  ccn_zero(a2 - a6, &v15[a6]);
  if ((v16 | 0x1E) == 0x1E)
  {
    v17 = 0;
  }
  else
  {
    v18 = 0;
    v17 = 0;
    v48 = a2 - 1;
    do
    {
      v19 = v14[v48];
      v20 = v15[v48];
      if (a2 >= 2)
      {
        v21 = a2 - 2;
        do
        {
          v22 = __clz(v20 | v19 | 1);
          v23 = (((v20 | v19) >> 63) - v22 + 64) & -(uint64_t)(((v20 | v19 | ((v20 | (unint64_t)v19) >> 32))
                                                             + 0xFFFFFFFF) >> 32);
          v19 = ((unint64_t)v14[v21] >> v23) | (v19 << v22);
          v20 = ((unint64_t)v15[v21--] >> v23) | (v20 << v22);
        }
        while (v21 < a2);
      }
      v24 = 0;
      v25 = 0;
      v26 = v19 & 0xFFFFFFFF80000000 | *v14 & 0x7FFFFFFF;
      v27 = v20 & 0xFFFFFFFF80000000 | *v15 & 0x7FFFFFFF;
      v28 = 31;
      v29 = 0x80000000;
      v30 = 0x80000000;
      do
      {
        v31 = v27 & v26;
        v32 = ((v27 - v26) ^ v27 | v27 ^ v26) ^ v27;
        v33 = (v32 & 0x8000000000000000) == 0;
        v34 = -(uint64_t)(v27 & v26 & (v32 >> 63));
        v35 = v26 - (v27 & v34);
        v36 = v30 - (v25 & v34);
        v37 = v24 - (v29 & v34);
        v38 = -(uint64_t)(v33 & v31);
        v39 = v27 - (v35 & v38);
        v17 += ((v39 | v35) & 1) == 0;
        v40 = (v35 & 1) == 0;
        LOBYTE(v33) = (v39 & 1) == 0;
        v26 = v35 >> v40;
        v30 = (v36 >> v40) | v36 & 0x8000000000000000;
        v24 = (v37 >> v40) | v37 & 0x8000000000000000;
        v27 = v39 >> v33;
        v25 = ((v25 - (v36 & v38)) >> v33) | (v25 - (v36 & v38)) & 0x8000000000000000;
        v29 = ((v29 - (v37 & v38)) >> v33) | (v29 - (v37 & v38)) & 0x8000000000000000;
        --v28;
      }
      while (v28);
      ccn_gcd_update_ws(a1, a2, v49, v14, v30, v15, v24);
      ccn_gcd_update_ws(a1, a2, v15, v14, v25, v15, v29);
      ccn_set(a2, v14, v49);
      ++v18;
    }
    while (v18 != (v16 | 0x1EuLL) / 0x1F);
  }
  for (i = a3; a2; --a2)
  {
    v43 = *v14++;
    v42 = v43;
    v44 = *v15++;
    *i++ = v44 | v42;
  }
  *(_QWORD *)(a1 + 16) = v47;
  return v17;
}

void *ccn_gcd_update_ws(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v13;
  int8x16_t *v14;
  char *v15;
  void *result;
  uint64_t v18;

  v18 = *(_QWORD *)(a1 + 16);
  v13 = a2 + 1;
  v14 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, a2 + 1);
  v15 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v13);
  if (a2)
    ccn_set(a2, v14, a4);
  ccn_zero(1, (char *)v14 + 8 * a2);
  ccn_cond_neg(v13, a5 < 0, v14->i64, v14->i64);
  if (a2)
    ccn_set(a2, v15, a6);
  ccn_zero(1, &v15[8 * a2]);
  ccn_cond_neg(v13, a7 < 0, (uint64_t *)v15, (uint64_t *)v15);
  ccn_mul1(v13, v14, v14, (a5 ^ (a5 >> 63)) + ((unint64_t)a5 >> 63));
  ccn_addmul1(v13, v14, v15, (a7 ^ (a7 >> 63)) + ((unint64_t)a7 >> 63));
  ccn_cond_neg(v13, v14->i64[a2] < 0, v14->i64, v14->i64);
  ccn_shift_right(v13, v14, v14, 31);
  result = ccn_set(a2, a3, v14);
  *(_QWORD *)(a1 + 16) = v18;
  return result;
}

uint64_t ccaes_ecb_encrypt(_DWORD *a1, uint64_t a2, _DWORD *a3, int *a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  _DWORD *v8;
  int i;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  _DWORD *v16;

  if (a2)
  {
    while (1)
    {
      v4 = *a1 ^ *a3;
      v5 = a1[1] ^ a3[1];
      v6 = a1[2] ^ a3[2];
      v7 = a1[3] ^ a3[3];
      v8 = a1 + 6;
      for (i = (a1[60] >> 5) - 1; ; --i)
      {
        v10 = TE1[BYTE1(v5)] ^ TE0[v4] ^ TE2[BYTE2(v6)] ^ TE3[HIBYTE(v7)] ^ *(v8 - 2);
        v11 = TE1[BYTE1(v6)] ^ TE0[v5] ^ TE2[BYTE2(v7)] ^ TE3[HIBYTE(v4)] ^ *(v8 - 1);
        v12 = TE1[BYTE1(v7)] ^ TE0[v6] ^ TE2[BYTE2(v4)] ^ TE3[HIBYTE(v5)] ^ *v8;
        v13 = TE1[BYTE1(v4)] ^ TE0[v7] ^ TE2[BYTE2(v5)] ^ TE3[HIBYTE(v6)] ^ v8[1];
        if (!i)
          break;
        v4 = TE1[BYTE1(v11)] ^ TE0[v10] ^ TE2[BYTE2(v12)] ^ TE3[HIBYTE(v13)] ^ v8[2];
        v5 = TE1[BYTE1(v12)] ^ TE0[v11] ^ TE2[BYTE2(v13)] ^ TE3[HIBYTE(v10)] ^ v8[3];
        v14 = v8[4];
        v15 = v8[5];
        v8 += 8;
        v6 = TE1[BYTE1(v13)] ^ TE0[v12] ^ TE2[BYTE2(v10)] ^ TE3[HIBYTE(v11)] ^ v14;
        v7 = TE1[BYTE1(v10)] ^ TE0[v13] ^ TE2[BYTE2(v11)] ^ TE3[HIBYTE(v12)] ^ v15;
      }
      v16 = &a1[8 * ((a1[60] >> 5) - 1)];
      *a4 = Te4_2[BYTE1(v11)] ^ Te4_3[v10] ^ Te4_1[BYTE2(v12)] ^ Te4_0[HIBYTE(v13)] ^ v16[8];
      a4[1] = Te4_2[BYTE1(v12)] ^ Te4_3[v11] ^ Te4_1[BYTE2(v13)] ^ Te4_0[HIBYTE(v10)] ^ v16[9];
      a4[2] = Te4_2[BYTE1(v13)] ^ Te4_3[v12] ^ Te4_1[BYTE2(v10)] ^ Te4_0[HIBYTE(v11)] ^ v16[10];
      a4[3] = Te4_2[BYTE1(v10)] ^ Te4_3[v13] ^ Te4_1[BYTE2(v11)] ^ Te4_0[HIBYTE(v12)] ^ v16[11];
      if (!--a2)
        break;
      a3 += 4;
      a4 += 4;
    }
  }
  return 0;
}

uint64_t ccder_blob_encode_implicit_octet_string(uint64_t *a1, unint64_t a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v8;
  uint64_t v9;
  _BYTE *v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  v8 = ccn_write_uint_size(a3, a4);
  v9 = ccder_blob_reserve_tl(a1, a2, v8, &v11);
  if ((_DWORD)v9)
    ccn_write_int(a3, a4, v12 - (_QWORD)v11, v11);
  return v9;
}

uint64_t ccmode_siv_init(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  *a2 = a1;
  if (a3 > 0x40)
    return 4294967226;
  if (a3 - 32 > 0x20)
    return 4294967226;
  if (((1 << (a3 - 32)) & 0x100010001) == 0)
    return 4294967226;
  a2[1] = a3;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) != 16)
    return 4294967226;
  __memcpy_chk();
  __memcpy_chk();
  return ccmode_siv_reset(a2);
}

void *ccaes_ofb_crypt_mode()
{
  return &ccaes_arm_ofb_crypt_mode;
}

uint64_t ccrng_trng(_DWORD *a1)
{
  char v1;
  char v8;

  v1 = 0;
  v8 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v8 = v1;
  if (a1)
    *a1 = -173;
  cc_disable_dit(&v8);
  return 0;
}

uint64_t ccrng_atfork_child()
{
  uint64_t result;

  result = ccrng_process_atfork_child((uint64_t)process_rng_ctx);
  if ((_DWORD)result)
    cc_abort();
  return result;
}

uint64_t ccspake_mac_hkdf_derive(uint64_t a1, size_t a2, char *a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  BOOL v10;
  size_t v11;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C874D8];
  v8 = (uint64_t *)(**(uint64_t (***)(void))(a1 + 8))();
  v9 = *(_QWORD *)(a1 + 32);
  v16 = 0;
  v14 = 0;
  v15 = 0;
  v13 = KDF_LABEL_CK;
  if (**(_DWORD **)a1)
    v10 = 1;
  else
    v10 = v9 == 0;
  if (v10)
  {
    v11 = 16;
  }
  else
  {
    __memcpy_chk();
    v11 = v9 + 16;
  }
  return cchkdf(v8, a2, a3, 0, 0, v11, (char *)&v13, 2 * *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), a4);
}

uint64_t ccspake_mac_compute(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  char v6;
  int v11;
  int v13;
  unsigned __int8 *v14;
  unint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  char v19;

  v6 = 0;
  v19 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v19 = v6;
  v11 = a1[60];
  if (v11 == CCSPAKE_STATE_KEX_BOTH || v11 == CCSPAKE_STATE_MAC_VERIFY)
  {
    v13 = a1[24];
    v14 = a1 + 336;
    v15 = (unint64_t *)&a1[48
                                * *(_QWORD *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a1 + 8))(a1)
                                + 336];
    v16 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)a1 + 8))();
    v17 = ccspake_mac_compute_internal((uint64_t *)a1, (uint64_t)(a1 + 272), v13, v15, (unint64_t *)&v14[56 * *v16], a2, a3);
    if (!(_DWORD)v17)
      a1[60] |= CCSPAKE_STATE_MAC_GENERATE;
  }
  else
  {
    v17 = 4294967210;
  }
  cc_disable_dit(&v19);
  return v17;
}

uint64_t ccspake_mac_compute_internal(uint64_t *a1, uint64_t a2, int a3, unint64_t *a4, unint64_t *a5, uint64_t a6, uint64_t a7)
{
  unint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  uint64_t v28;
  char v30;
  _OWORD v31[8];
  int v32;
  _BYTE __s[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C874D8];
  v13 = *(_QWORD *)(*(uint64_t (**)(void))a1[1])();
  v14 = (unint64_t *)(*(uint64_t (**)(void))(*a1 + 8))();
  v15 = cczp_bitlen((uint64_t)v14);
  v16 = *v14;
  v17 = v13 >> 1;
  if (*(_DWORD *)*a1)
    v18 = v13;
  else
    v18 = v13 >> 1;
  v19 = (*(uint64_t (**)(uint64_t *, unint64_t, uint64_t, _BYTE *))(a1[1] + 32))(a1, v18, a2, __s);
  if (!(_DWORD)v19)
  {
    v20 = v15 + 7;
    v21 = (unint64_t)(v15 + 7) >> 3;
    v28 = a7;
    v22 = *(_DWORD *)*a1 != 0;
    v32 = 0;
    memset(v31, 0, sizeof(v31));
    v30 = 4;
    ccn_write_uint_padded(v16, a4, v21, (char *)v31);
    ccn_write_uint_padded(v16, a5, v21, (char *)v31 + (v20 >> 3));
    if (*(_DWORD *)*a1)
      v23 = *(_QWORD *)(a1[1] + 16);
    else
      v23 = v17;
    if (v22 != a3)
      v24 = v23;
    else
      v24 = 0;
    v25 = &__s[v24];
    v26 = ccspake_sizeof_point(*a1);
    v19 = (*(uint64_t (**)(uint64_t *, unint64_t, _BYTE *, unint64_t, char *, uint64_t, uint64_t))(a1[1] + 40))(a1, v23, v25, v26, &v30, a6, v28);
    cc_clear(0x80uLL, __s);
  }
  return v19;
}

uint64_t ccspake_mac_verify_and_get_session_key(int **a1, unint64_t a2, char *a3, uint64_t a4, void *a5)
{
  char v10;
  int v15;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  _BOOL4 v21;
  unint64_t *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  unint64_t v27;
  char v28;
  char __s[64];
  uint64_t v30;

  v10 = 0;
  v30 = *MEMORY[0x1E0C874D8];
  v28 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v28 = v10;
  v15 = *((unsigned __int8 *)a1 + 60);
  if (v15 != CCSPAKE_STATE_KEX_BOTH && v15 != CCSPAKE_STATE_MAC_GENERATE)
  {
    v20 = 4294967210;
    goto LABEL_29;
  }
  v17 = (uint64_t *)(*(uint64_t (**)(void))a1[1])();
  v18 = v17;
  v19 = **a1;
  if (v19 != 1)
  {
    if (v19)
    {
      if (a2 > 0x40)
      {
        v20 = 4294967289;
        goto LABEL_29;
      }
    }
    else
    {
      v20 = 4294967289;
      if (a2 > 0x40 || (unint64_t)*v17 >> 1 != a4)
        goto LABEL_29;
    }
LABEL_20:
    v27 = *v17;
    v21 = *((_BYTE *)a1 + 24) == 0;
    v22 = (unint64_t *)&a1[4 * *(_QWORD *)(*((uint64_t (**)(void))*a1 + 1))() + 42];
    v23 = (_QWORD *)(*((uint64_t (**)(void))*a1 + 1))();
    v20 = ccspake_mac_compute_internal((uint64_t *)a1, (uint64_t)(a1 + 34), v21, v22, (unint64_t *)&a1[5 * *v23 + 42], a2, (uint64_t)__s);
    if (!(_DWORD)v20)
    {
      if (cc_cmp_safe(a2, a3, __s))
      {
        v20 = 4294967294;
      }
      else
      {
        v24 = **a1;
        if (v24 == 1)
        {
          v25 = cchkdf(v18, *v18, (char *)a1 + 272, 0, 0, 9uLL, "SharedKey", a4, (uint64_t)a5);
          if ((_DWORD)v25)
          {
            v20 = v25;
            goto LABEL_28;
          }
        }
        else if (!v24)
        {
          memcpy(a5, (char *)a1 + (v27 >> 1) + 272, v27 >> 1);
        }
        v20 = 0;
        *((_BYTE *)a1 + 60) |= CCSPAKE_STATE_MAC_VERIFY;
      }
    }
LABEL_28:
    cc_clear(0x40uLL, __s);
    goto LABEL_29;
  }
  v20 = 4294967289;
  if (a2 <= 0x40 && a4)
    goto LABEL_20;
LABEL_29:
  cc_disable_dit(&v28);
  return v20;
}

uint64_t ccn_muln(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  result = ccn_mul1(a1, a2, a3, *a5);
  *(_QWORD *)(a2 + 8 * a1) = result;
  if (a4 >= 2)
  {
    v11 = a4 - 1;
    v12 = a2 + 8;
    v13 = a5 + 1;
    do
    {
      v14 = *v13++;
      result = ccn_addmul1(a1, v12, a3, v14);
      *(_QWORD *)(v12 + 8 * a1) = result;
      v12 += 8;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t ccpost_vector_list(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  if (*(_QWORD *)(result + 16))
  {
    v3 = result;
    v4 = 0;
    do
      result = ccpost_internal(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v4++), a2);
    while (v4 < *(_QWORD *)(v3 + 16));
  }
  return result;
}

uint64_t cczp_mod(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t (*v17)(_QWORD *, uint64_t);
  void (*v18)(uint64_t);
  char v19;

  v6 = 0;
  v19 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v19 = v6;
  v12 = cczp_n(a1);
  v15[0] = cc_malloc_clear(16 * v12);
  v15[1] = 2 * cczp_n(a1);
  v16 = 0;
  v17 = cc_ws_alloc;
  v18 = cc_ws_free;
  if (v15[0])
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 32))(v15, a1, a2, a3);
    v16 = 0;
    v18((uint64_t)v15);
    v13 = 0;
  }
  else
  {
    v13 = 4294967283;
  }
  cc_disable_dit(&v19);
  return v13;
}

uint64_t ccaes_gladman_cbc_encrypt_init(uint64_t a1, int *a2, uint64_t a3, int *a4)
{
  uint64_t result;

  if (a3 > 127)
  {
    if (a3 != 128 && a3 != 256 && a3 != 192)
      return 4294967289;
LABEL_8:
    result = ccaes_gladman_encrypt_key(a4, a3, a2);
    a2[65] = 1;
    return result;
  }
  if ((unint64_t)a3 <= 0x20 && ((1 << a3) & 0x101010000) != 0)
    goto LABEL_8;
  return 4294967289;
}

uint64_t ccn_invmod_ws(uint64_t a1, unint64_t a2, void *__s, unint64_t a4, _DWORD *a5, _QWORD *a6)
{
  uint64_t v8;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  void *v20;
  uint64_t *v21;
  int v22;
  char v23;
  char v24;
  char v25;
  uint64_t *v26;
  uint64_t *v27;
  _BOOL8 v28;
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  void *__dst;
  uint64_t *v41;
  _DWORD *__sa;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t *v47;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;

  v8 = a2 - a4;
  if (a2 >= a4
    && ccn_n(a4, a5)
    && a2
    && ((v12 = ccn_n(a2, a6), v13 = *a6, v12 > 1) || v13 > 1)
    && ((v13 | *a5) & 1) != 0)
  {
    v15 = (a4 + a2) << 6;
    v39 = *(_QWORD *)(a1 + 16);
    __dst = __s;
    v16 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, a2);
    v17 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, a2);
    if (a4)
      ccn_set(a4, v16, a5);
    ccn_zero(v8, &v16[a4]);
    ccn_set(a2, v17, a6);
    v18 = a1;
    v19 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, a2);
    v20 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(v18 + 24))(v18, a2);
    __sa = (_DWORD *)(*(uint64_t (**)(uint64_t, unint64_t))(v18 + 24))(v18, a2);
    v47 = a6;
    v50 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(v18 + 24))(v18, a2);
    v43 = v19;
    ccn_seti(a2, v19, 1);
    cc_clear(8 * a2, v20);
    cc_clear(8 * a2, __sa);
    ccn_seti(a2, v50, 1);
    v46 = (unint64_t *)a5;
    v21 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(v18 + 24))(v18, a2);
    v41 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(v18 + 24))(v18, a2);
    if (v15)
    {
      v49 = (uint64_t *)v20;
      v51 = v17;
      v52 = v16;
      do
      {
        v45 = v15;
        v22 = *(_DWORD *)v16 & *(_DWORD *)v17 & 1;
        v23 = ccn_subn(a2, v21, v51, a4, (unint64_t *)v16);
        v24 = v22 & ~v23;
        ccn_mux(a2, v24, v51, v21, v51);
        ccn_sub_ws(a1, a4, v21, v52, (unint64_t *)v51);
        v25 = v22 & v23;
        ccn_mux(a4, v25, v52, v21, v52);
        v27 = (uint64_t *)__sa;
        v26 = v43;
        LOBYTE(v22) = ccn_add_ws(a1, a2, v21, v43, (uint64_t *)__sa);
        LOBYTE(v22) = ccn_sub_ws(a1, a2, v41, v21, v47) & (v22 ^ 1);
        ccn_mux(a2, v22, v21, v21, v41);
        ccn_mux(a2, v25, v26, v21, v26);
        ccn_mux(a2, v24, v27, v21, v27);
        ccn_add_ws(a1, a4, v21, v49, v50);
        ccn_sub_ws(a1, a4, v41, v21, v46);
        ccn_mux(a4, v22, v21, v21, v41);
        ccn_mux(a4, v25, v49, v21, v49);
        ccn_mux(a4, v24, v50, v21, v50);
        v28 = (*(_DWORD *)v52 & 1) == 0;
        v29 = (*(_DWORD *)v51 & 1) == 0;
        v30 = (*(_DWORD *)v49 | *(_DWORD *)v43);
        v44 = (*(_DWORD *)v50 | *__sa);
        ccn_cond_shift_right(a4, (*(_DWORD *)v52 & 1) == 0, (uint64_t)v52, (uint64_t)v52, 1);
        v31 = v30 & v28;
        v32 = ccn_cond_add(a2, v31, v26, v26, (uint64_t *)v47);
        ccn_cond_shift_right_carry(a2, v28, (uint64_t)v26, (uint64_t)v26, 1, v32);
        v33 = v31;
        v17 = v51;
        v34 = ccn_cond_add(a4, v33, v49, v49, (uint64_t *)v46);
        ccn_cond_shift_right_carry(a4, v28, (uint64_t)v49, (uint64_t)v49, 1, v34);
        ccn_cond_shift_right(a2, v29, (uint64_t)v17, (uint64_t)v17, 1);
        v35 = ccn_cond_add(a2, v44 & v29, v27, v27, (uint64_t *)v47);
        v36 = v50;
        ccn_cond_shift_right_carry(a2, v29, (uint64_t)__sa, (uint64_t)__sa, 1, v35);
        v37 = ccn_cond_add(a4, v44 & v29, v36, v36, (uint64_t *)v46);
        v38 = v29;
        v16 = v52;
        ccn_cond_shift_right_carry(a4, v38, (uint64_t)v36, (uint64_t)v36, 1, v37);
        v15 = v45 - 1;
      }
      while (v45 != 1);
    }
    if (ccn_n(a2, v16) == 1 && *v16 == 1)
    {
      ccn_set(a2, __dst, v43);
      result = 0;
    }
    else
    {
      cc_clear(8 * a2, __dst);
      result = 4294967289;
    }
    *(_QWORD *)(a1 + 16) = v39;
  }
  else
  {
    cc_clear(8 * a2, __s);
    return 4294967289;
  }
  return result;
}

uint64_t ccmode_siv_encrypt(uint64_t a1, unint64_t a2, char *a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C874D8];
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 56) + 8) != 16)
    return 4294967226;
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  if (a3 - 16 < a4 && &a3[a2] > a4)
    return 4294967191;
  v9 = ccmode_siv_auth_finalize(a1, a2, a3, &v11);
  if (!(_DWORD)v9)
  {
    if (*(_QWORD *)(a1 + 16) == 5)
    {
      *(_OWORD *)(a1 + 88) = v11;
      *(_BYTE *)(a1 + 96) &= ~0x80u;
      *(_BYTE *)(a1 + 100) &= ~0x80u;
      v9 = ccctr_one_shot(v8, *(_QWORD *)(a1 + 8) >> 1, a1 + 56, a1 + 88, a2, (uint64_t)a3, (uint64_t)(a4 + 16));
      *(_OWORD *)a4 = v11;
      if ((_DWORD)v9)
        cc_clear(a2 + 16, a4);
    }
    else
    {
      return 4294967228;
    }
  }
  return v9;
}

uint64_t ccn_div_exact_ws(uint64_t a1, unint64_t a2, char *a3, uint64_t *a4, int8x16_t *a5)
{
  int8x16_t *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int8x16_t *v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v21;

  v21 = *(_QWORD *)(a1 + 16);
  v8 = (int8x16_t *)(*(uint64_t (**)(void))(a1 + 24))();
  v9 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, a2);
  v18 = ccn_trailing_zeros(a2, (uint64_t)a5);
  ccn_shift_right_multi(a2, v8, a5, v18);
  v10 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, a2);
  cc_clear(8 * a2, v10);
  v11 = (2 - ((3 * v8->i64[0]) ^ 2) * v8->i64[0]) * ((3 * v8->i64[0]) ^ 2);
  v12 = (2 - (2 - v11 * v8->i64[0]) * v11 * v8->i64[0]) * (2 - v11 * v8->i64[0]) * v11;
  *v10 = (2 - v12 * v8->i64[0]) * v12;
  v13 = __clz(a2);
  if (v13 == 63)
  {
    v14 = 1;
  }
  else
  {
    v15 = 63 - v13;
    v14 = 1;
    do
    {
      ccn_mul_ws(a1, v14, (uint64_t)v9, (uint64_t)v8, (uint64_t)v10);
      ccn_mul_lo(v14, v9, &v8->i64[v14], (uint64_t)v10);
      ccn_add_ws(a1, v14, v9, (uint64_t *)v9, (uint64_t *)&v9[8 * v14]);
      ccn_neg(v14, (uint64_t *)&v9[8 * v14], v10);
      ccn_mul_lo(v14, (char *)&v10[v14], (uint64_t *)&v9[8 * v14], (uint64_t)v9);
      v14 = (a2 - 1 + (1 << v15)) >> v15;
      --v15;
    }
    while (v15);
  }
  cc_clear(8 * a2, v9);
  ccn_mul_lo(v14, v9, a4, (uint64_t)v10);
  v16 = (int8x16_t *)a3;
  ccn_mul_lo(a2, a3, v8->i64, (uint64_t)v9);
  ccn_sub_ws(a1, a2, v8, a4, (unint64_t *)a3);
  ccn_mul_lo(a2, a3, v10, (uint64_t)v8);
  ccn_add_ws(a1, a2, v16, v16->i64, (uint64_t *)v9);
  result = ccn_shift_right_multi(a2, v16, v16, v18);
  *(_QWORD *)(a1 + 16) = v21;
  return result;
}

uint64_t ccn_mul_lo(uint64_t a1, char *a2, uint64_t *a3, uint64_t a4)
{
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v6 = a2;
  v7 = a1;
  for (result = cc_clear(8 * a1, a2); v7; --v7)
  {
    v9 = *a3++;
    result = ccn_addmul1(v7, v6, a4, v9);
    v6 += 8;
  }
  return result;
}

uint64_t ccec_generate_blinding_keys(uint64_t *a1, uint64_t (**a2)(_QWORD, uint64_t, uint64_t *), uint64_t **a3, uint64_t **a4)
{
  char v8;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t scalar_fips_retry_ws;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t (*v29)(_QWORD *, uint64_t);
  void (*v30)(uint64_t);
  char v31;

  v8 = 0;
  v31 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v31 = v8;
  v14 = *a1;
  v15 = sizeof_struct_cche_galois_key();
  v16 = sizeof_struct_ccpolyzp_po2cyc();
  v27[0] = cc_malloc_clear((v14 << 8) + 8 * ((v15 + v16 + 3 * v14 * v16 - 1) / v16));
  v17 = *a1;
  v18 = sizeof_struct_cche_galois_key();
  v19 = sizeof_struct_ccpolyzp_po2cyc();
  v27[1] = (v18 + v19 + v19 * 3 * v17 - 1) / v19 + 32 * v17;
  v28 = 0;
  v29 = cc_ws_alloc;
  v30 = cc_ws_free;
  if (!v27[0])
  {
    v24 = 4294967283;
    goto LABEL_19;
  }
  *a3 = a1;
  *a4 = a1;
  v26 = cc_ws_alloc(v27, (unint64_t)(24 * v17 + 23) >> 3);
  v20 = v29(v27, 3 * v17);
  v21 = a3 + 2;
  scalar_fips_retry_ws = ccec_generate_scalar_fips_retry_ws((uint64_t)v27, a1, (uint64_t (**)(_QWORD, unint64_t, void *))a2, &a3[3 * **a3 + 2]);
  if ((_DWORD)scalar_fips_retry_ws)
    goto LABEL_20;
  v23 = a4 + 2;
  scalar_fips_retry_ws = cczp_inv_ws((uint64_t)v27, (uint64_t)&a1[5 * *a1 + 4]);
  if ((_DWORD)scalar_fips_retry_ws
    || (scalar_fips_retry_ws = ccec_projectify_ws((uint64_t)v27, (uint64_t)a1), (_DWORD)scalar_fips_retry_ws)
    || (scalar_fips_retry_ws = ccec_mult_blinded_ws((uint64_t)v27, a1, (uint64_t)(a3 + 2), &v21[3 * **a3], v20, a2),
        (_DWORD)scalar_fips_retry_ws)
    || (scalar_fips_retry_ws = ccec_mult_blinded_ws((uint64_t)v27, a1, (uint64_t)(a4 + 2), &v23[3 * **a4], v20, a2),
        (_DWORD)scalar_fips_retry_ws)
    || (scalar_fips_retry_ws = ccec_affinify_ws((uint64_t)v27, (uint64_t)a1), (_DWORD)scalar_fips_retry_ws)
    || (scalar_fips_retry_ws = ccec_affinify_ws((uint64_t)v27, (uint64_t)a1), (_DWORD)scalar_fips_retry_ws)
    || (scalar_fips_retry_ws = ccec_blinding_op_ws((uint64_t)v27, a2, &v21[3 * **a3], a4), (_DWORD)scalar_fips_retry_ws))
  {
LABEL_20:
    v24 = scalar_fips_retry_ws;
LABEL_16:
    cc_clear((32 * *a1) | 0x10, a3);
    cc_clear((32 * *a1) | 0x10, a4);
    goto LABEL_17;
  }
  if (ccn_cmp(v17, (unint64_t *)(v26 + 16), (unint64_t *)&a1[2 * *a1 + 4 + *a1]))
  {
    v24 = 0;
    goto LABEL_17;
  }
  v24 = ccec_blinding_op_ws((uint64_t)v27, a2, &v23[3 * **a4], a3);
  if ((_DWORD)v24)
    goto LABEL_16;
LABEL_17:
  v28 = 0;
  v30((uint64_t)v27);
LABEL_19:
  cc_disable_dit(&v31);
  return v24;
}

uint64_t ccec_blind(uint64_t (**a1)(_QWORD, uint64_t, uint64_t *), _QWORD **a2, uint64_t **a3)
{
  char v6;
  uint64_t *v12;
  uint64_t v13;
  _QWORD v15[4];
  void (*v16)(uint64_t);
  char v17;

  v6 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v17 = v6;
  v12 = *a3;
  v15[0] = cc_malloc_clear(232 * **a3);
  v15[1] = 29 * *v12;
  v15[2] = 0;
  v15[3] = cc_ws_alloc;
  v16 = cc_ws_free;
  if (v15[0])
  {
    v13 = ccec_blinding_op_ws((uint64_t)v15, a1, (unint64_t *)&a2[3 * **a2 + 2], a3);
    v16((uint64_t)v15);
  }
  else
  {
    v13 = 4294967283;
  }
  cc_disable_dit(&v17);
  return v13;
}

uint64_t ccec_blinding_op_ws(uint64_t a1, uint64_t (**a2)(_QWORD, uint64_t, uint64_t *), unint64_t *a3, uint64_t **a4)
{
  uint64_t v7;
  uint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v7 = *(_QWORD *)(a1 + 16);
  v9 = (unint64_t *)(a4 + 2);
  v8 = *a4;
  v10 = 3 * **a4;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v10);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v10);
  result = ccec_validate_point_and_projectify_ws(a1, v8, v11, v9);
  if (!(_DWORD)result)
  {
    result = ccec_mult_blinded_ws(a1, v8, v12, a3, v11, a2);
    if (!(_DWORD)result)
      result = ccec_affinify_ws(a1, (uint64_t)v8);
  }
  *(_QWORD *)(a1 + 16) = v7;
  return result;
}

uint64_t ccec_unblind(uint64_t (**a1)(_QWORD, uint64_t, uint64_t *), _QWORD **a2, uint64_t **a3)
{
  char v6;
  uint64_t *v12;
  uint64_t v13;
  _QWORD v15[4];
  void (*v16)(uint64_t);
  char v17;

  v6 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v17 = v6;
  v12 = *a3;
  v15[0] = cc_malloc_clear(232 * **a3);
  v15[1] = 29 * *v12;
  v15[2] = 0;
  v15[3] = cc_ws_alloc;
  v16 = cc_ws_free;
  if (v15[0])
  {
    v13 = ccec_blinding_op_ws((uint64_t)v15, a1, (unint64_t *)&a2[3 * **a2 + 2], a3);
    v16((uint64_t)v15);
  }
  else
  {
    v13 = 4294967283;
  }
  cc_disable_dit(&v17);
  return v13;
}

uint64_t ccrsabssa_blind_message(uint64_t a1, uint64_t *a2, char *a3, size_t a4, char *a5, uint64_t a6, char *a7, unint64_t a8, uint64_t (**a9)(_QWORD, unint64_t, uint64_t))
{
  char v16;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  size_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unsigned __int8 *v38;
  uint64_t non_zero_element_ws;
  char *v40;
  unint64_t *v41;
  uint64_t *v42;
  unint64_t *v43;
  int v44;
  char *v46;
  uint64_t v47;
  _QWORD v49[2];
  uint64_t v50;
  uint64_t (*v51)(_QWORD *, uint64_t);
  void (*v52)(uint64_t);
  char v53;
  char v54[48];
  char v55[48];
  uint64_t v56;

  v16 = 0;
  v56 = *MEMORY[0x1E0C874D8];
  v53 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v16 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v16 = 1;
    }
  }
  v53 = v16;
  v22 = *a2;
  v23 = sizeof_struct_ccrns_mul_modulus();
  v24 = sizeof_struct_ccpolyzp_po2cyc();
  v49[0] = cc_malloc_clear(8 * ((v23 + v24 - 1) / v24 + 16 * v22) + 8);
  v25 = *a2;
  v26 = sizeof_struct_ccrns_mul_modulus();
  v27 = sizeof_struct_ccpolyzp_po2cyc();
  v49[1] = (v26 + v27 - 1) / v27 + 16 * v25 + 1;
  v50 = 0;
  v51 = cc_ws_alloc;
  v52 = cc_ws_free;
  if (v49[0])
  {
    if (ccrsa_pubkeylength((uint64_t)a2) == *(_QWORD *)a1)
    {
      v46 = a5;
      v28 = (size_t *)(*(uint64_t (**)(void))(a1 + 8))();
      v29 = ccrsa_pubkeylength((uint64_t)a2);
      v30 = (unint64_t)(v29 + 7) >> 3;
      v31 = 4294967289;
      v32 = cc_ws_free;
      if (v30 != a6 || v30 != a8)
        goto LABEL_19;
      v33 = v29;
      ccdigest((uint64_t)v28, a4, a3, (uint64_t)v55);
      v34 = (*a9)(a9, *(_QWORD *)(a1 + 16), (uint64_t)v54);
      if ((_DWORD)v34)
      {
        v31 = v34;
        goto LABEL_18;
      }
      v35 = v33 - 1;
      v36 = *a2;
      v47 = v50;
      v37 = (unint64_t *)v51(v49, *a2);
      v37[v36 - 1] = 0;
      *v37 = 0;
      v38 = (unsigned __int8 *)&v37[v36] - ((unint64_t)(v33 + 6) >> 3);
      non_zero_element_ws = ccrsa_emsa_pss_encode((uint64_t)v28, (uint64_t)v28, *(_QWORD *)(a1 + 16), v54, *v28, (uint64_t)v55, v35, v38);
      if ((_DWORD)non_zero_element_ws)
        goto LABEL_23;
      if (ccrsa_emsa_pss_decode_ws((uint64_t)v49, (uint64_t)v28, (uint64_t)v28, *(_QWORD *)(a1 + 16), *v28, v55, v35, v38))
      {
        v31 = 0xFFFFFFFFLL;
        goto LABEL_17;
      }
      ccn_swap(v36, v37);
      v40 = (char *)v51(v49, v36);
      non_zero_element_ws = cczp_generate_non_zero_element_ws((uint64_t)v49, (uint64_t)a2, a9, v40);
      if ((_DWORD)non_zero_element_ws
        || (v41 = (unint64_t *)v51(v49, v36),
            non_zero_element_ws = cczp_inv_ws((uint64_t)v49, (uint64_t)a2),
            (_DWORD)non_zero_element_ws)
        || (v42 = (uint64_t *)v51(v49, v36),
            non_zero_element_ws = ccrsa_pub_crypt_ws((uint64_t)v49, a2, v42, (unint64_t *)v40),
            (_DWORD)non_zero_element_ws)
        || (v43 = (unint64_t *)v51(v49, v36),
            cczp_mul_ws((uint64_t)v49, (uint64_t)a2),
            non_zero_element_ws = ccn_write_uint_padded_ct(v36, v43, a8, a7),
            (non_zero_element_ws & 0x80000000) != 0))
      {
LABEL_23:
        v31 = non_zero_element_ws;
      }
      else
      {
        v44 = ccn_write_uint_padded_ct(v36, v41, a8, v46);
        v31 = v44 & (v44 >> 31);
      }
LABEL_17:
      v50 = v47;
LABEL_18:
      v32 = v52;
LABEL_19:
      v32((uint64_t)v49);
      goto LABEL_22;
    }
    v31 = 4294967289;
    cc_ws_free((uint64_t)v49);
  }
  else
  {
    v31 = 4294967283;
  }
LABEL_22:
  cc_disable_dit(&v53);
  return v31;
}

uint64_t ccrsabssa_unblind_signature(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, unint64_t a4, unsigned __int8 *a5, unint64_t a6, char *a7, size_t a8, char *a9, unint64_t a10)
{
  char v17;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t);
  unint64_t v32;
  _QWORD *v33;
  uint64_t uint;
  _QWORD *v35;
  unint64_t *v36;
  size_t *v37;
  char *v39;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t (*v43)(_QWORD *, uint64_t);
  void (*v44)(uint64_t);
  char v45;

  v17 = 0;
  v45 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v17 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v17 = 1;
    }
  }
  v45 = v17;
  v23 = *a2;
  v24 = sizeof_struct_ccrns_mul_modulus();
  v25 = sizeof_struct_ccpolyzp_po2cyc();
  v41[0] = cc_malloc_clear(8 * ((v24 + v25 - 1) / v25 + 16 * v23) + 8);
  v26 = *a2;
  v27 = sizeof_struct_ccrns_mul_modulus();
  v28 = sizeof_struct_ccpolyzp_po2cyc();
  v41[1] = (v27 + v28 - 1) / v28 + 16 * v26 + 1;
  v42 = 0;
  v43 = cc_ws_alloc;
  v44 = cc_ws_free;
  if (v41[0])
  {
    if (ccrsa_pubkeylength((uint64_t)a2) == *(_QWORD *)a1)
    {
      v39 = a7;
      v29 = (unint64_t)(ccrsa_pubkeylength((uint64_t)a2) + 7) >> 3;
      v30 = 4294967289;
      v31 = cc_ws_free;
      if (v29 != a10 || v29 != a4 || v29 != a6)
        goto LABEL_18;
      v32 = *a2;
      v33 = (_QWORD *)cc_ws_alloc(v41, *a2);
      uint = ccn_read_uint(v32, v33, a4, a3);
      if (!(_DWORD)uint)
      {
        v35 = (_QWORD *)v43(v41, v32);
        uint = ccn_read_uint(v32, v35, a6, a5);
        if (!(_DWORD)uint)
        {
          v36 = (unint64_t *)v43(v41, v32);
          cczp_mul_ws((uint64_t)v41, (uint64_t)a2);
          uint = ccn_write_uint_padded_ct(v32, v36, a6, a9);
          if ((uint & 0x80000000) == 0)
          {
            if (ccrsa_pubkeylength((uint64_t)a2) != *(_QWORD *)a1
              || a10 != (unint64_t)(ccrsa_pubkeylength((uint64_t)a2) + 7) >> 3)
            {
              goto LABEL_17;
            }
            v37 = (size_t *)(*(uint64_t (**)(void))(a1 + 8))();
            uint = ccrsa_verify_pss_msg_ws((uint64_t)v41, a2, v37, (uint64_t)v37, a8, v39, a10, (unsigned __int8 *)a9, *(_QWORD *)(a1 + 16), 0);
          }
        }
      }
      v30 = uint;
LABEL_17:
      v42 = 0;
      v31 = v44;
LABEL_18:
      v31((uint64_t)v41);
      goto LABEL_21;
    }
    v30 = 4294967289;
    cc_ws_free((uint64_t)v41);
  }
  else
  {
    v30 = 4294967283;
  }
LABEL_21:
  cc_disable_dit(&v45);
  return v30;
}

uint64_t ccrsabssa_sign_blinded_message(_QWORD *a1, unint64_t *a2, unsigned __int8 *a3, unint64_t a4, char *a5, unint64_t a6, uint64_t (**a7)(_QWORD, uint64_t, uint64_t))
{
  char v13;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t);
  unint64_t v37;
  uint64_t *v38;
  unint64_t *v39;
  uint64_t uint;
  int v41;
  _QWORD v44[2];
  uint64_t v45;
  uint64_t (*v46)(_QWORD *, uint64_t);
  void (*v47)(uint64_t);
  char v48;

  v13 = 0;
  v48 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v13 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v13 = 1;
    }
  }
  v48 = v13;
  v19 = *a2;
  v20 = sizeof_struct_ccrns_mul_modulus();
  v21 = sizeof_struct_ccpolyzp_po2cyc();
  v22 = (v20 + v21 - 1) / v21 + 11 * v19;
  v23 = CCRSA_CRT_POWER_BLINDED_WORKSPACE_N(v19);
  if (v22 + 1 > v23)
    v24 = v22 + 1;
  else
    v24 = v23;
  v25 = cc_malloc_clear(32 * v19 + 8 * v24);
  v44[0] = v25;
  v26 = *a2;
  v27 = sizeof_struct_ccrns_mul_modulus();
  v28 = sizeof_struct_ccpolyzp_po2cyc();
  v29 = (v27 + v28 - 1) / v28 + 11 * v26;
  v30 = CCRSA_CRT_POWER_BLINDED_WORKSPACE_N(v26);
  if (v29 + 1 > v30)
    v31 = v29 + 1;
  else
    v31 = v30;
  v44[1] = v31 + 4 * v26;
  v45 = 0;
  v46 = cc_ws_alloc;
  v47 = cc_ws_free;
  if (v25)
  {
    v32 = ccrsa_ctx_public(a2);
    if (ccrsa_pubkeylength(v32) == *a1)
    {
      v33 = ccrsa_ctx_public(a2);
      v34 = (unint64_t)(ccrsa_pubkeylength(v33) + 7) >> 3;
      v35 = 4294967289;
      v36 = cc_ws_free;
      if (v34 != a6 || v34 != a4)
        goto LABEL_20;
      v37 = *a2;
      v38 = (uint64_t *)cc_ws_alloc(v44, *a2);
      v39 = (unint64_t *)v46(v44, v37);
      uint = ccn_read_uint(v37, v39, a4, a3);
      if (!(_DWORD)uint)
      {
        if (ccn_cmp(v37, a2 + 3, v39) != 1)
        {
LABEL_19:
          v45 = 0;
          v36 = v47;
LABEL_20:
          v36((uint64_t)v44);
          goto LABEL_23;
        }
        uint = ccrsa_priv_crypt_blinded_ws((uint64_t)v44, a7, (uint64_t *)a2, v38, v39);
        if (!(_DWORD)uint)
        {
          v41 = ccn_write_uint_padded_ct(v37, (unint64_t *)v38, a6, a5);
          v35 = v41 & (v41 >> 31);
          goto LABEL_19;
        }
      }
      v35 = uint;
      goto LABEL_19;
    }
    v35 = 4294967289;
    cc_ws_free((uint64_t)v44);
  }
  else
  {
    v35 = 4294967283;
  }
LABEL_23:
  cc_disable_dit(&v48);
  return v35;
}

uint64_t ccrsa_encrypt_oaep_ws(uint64_t a1, uint64_t *a2, size_t *a3, uint64_t (**a4)(_QWORD, size_t, char *), unint64_t *a5, char *a6, size_t a7, const void *a8, size_t a9, char *a10)
{
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  void *v21;
  int v22;
  uint64_t v23;
  char *__s;

  v18 = ccrsa_block_size((uint64_t)a2);
  result = 4294967268;
  if (v18)
  {
    v20 = *a2;
    if (*a2)
    {
      __s = a6;
      if ((unint64_t)ccn_n(v20, a2 + 3) > 1 || (unint64_t)a2[3] >= 2)
      {
        if (*a5 >= v18)
        {
          v23 = *(_QWORD *)(a1 + 16);
          v21 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v20);
          cc_clear(8 * v20, v21);
          *a5 = v18;
          result = ccrsa_oaep_encode_parameter_ws(a1, a3, a4, v18, v21, a7, a8, a9, a10);
          if (!(_DWORD)result)
          {
            result = ccrsa_pub_crypt_ws(a1, a2, (uint64_t *)v21, (unint64_t *)v21);
            if (!(_DWORD)result)
            {
              v22 = ccn_write_uint_padded_ct(v20, (unint64_t *)v21, v18, __s);
              result = v22 & (v22 >> 31);
            }
          }
          *(_QWORD *)(a1 + 16) = v23;
        }
        else
        {
          return 4294967273;
        }
      }
      else
      {
        return 4294967268;
      }
    }
  }
  return result;
}

uint64_t ccrsa_encrypt_oaep(uint64_t *a1, size_t *a2, uint64_t (**a3)(_QWORD, size_t, char *), unint64_t *a4, char *a5, size_t a6, const void *a7, size_t a8, char *a9)
{
  char v15;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD v31[4];
  void (*v32)(uint64_t);
  char v33;

  v15 = 0;
  v33 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v15 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v15 = 1;
    }
  }
  v33 = v15;
  v21 = *a1;
  v22 = sizeof_struct_ccrns_mul_modulus();
  v23 = sizeof_struct_ccpolyzp_po2cyc();
  v31[0] = cc_malloc_clear(8 * ((v22 + v23 - 1) / v23 + 12 * v21) + 8);
  v24 = *a1;
  v25 = sizeof_struct_ccrns_mul_modulus();
  v26 = sizeof_struct_ccpolyzp_po2cyc();
  v31[1] = (v25 + v26 - 1) / v26 + 12 * v24 + 1;
  v31[2] = 0;
  v31[3] = cc_ws_alloc;
  v32 = cc_ws_free;
  if (v31[0])
  {
    v27 = ccrsa_encrypt_oaep_ws((uint64_t)v31, a1, a2, a3, a4, a5, a6, a7, a8, a9);
    v32((uint64_t)v31);
  }
  else
  {
    v27 = 4294967283;
  }
  cc_disable_dit(&v33);
  return v27;
}

uint64_t ccascon_ascon128a_ref_pad(uint64_t result)
{
  unint64_t v1;
  char v2;

  v1 = *(_QWORD *)(result + 40);
  v2 = 56;
  if (v1 > 7)
    v2 = 120;
  *(_QWORD *)(result + 8 * (v1 > 7)) ^= 128 << (v2 - 8 * v1);
  return result;
}

unint64_t *ccascon_ascon128a_ref_accumulate_encrypt(unint64_t *result, _QWORD *a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  uint64x2_t v32;
  int64x2_t v33;
  _BYTE *v34;
  char v35;
  int64x2_t v36;
  int32x2_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t v42;
  uint64x2_t v43;
  _BYTE *v44;
  int64x2_t v45;
  uint64_t v46;
  int64x2_t v47;
  int32x2_t v48;

  if (a3 >= 0x10)
  {
    v5 = *result;
    v4 = result[1];
    do
    {
      v5 ^= bswap64(*a4);
      *result = v5;
      v4 ^= bswap64(a4[1]);
      result[1] = v4;
      if (a2)
      {
        *a2 = bswap64(v5);
        a2[1] = bswap64(result[1]);
        a2 += 2;
        v5 = *result;
        v4 = result[1];
      }
      v6 = 0;
      a4 += 2;
      a3 -= 16;
      v7 = result[3];
      v8 = result[4];
      v9 = result[2];
      do
      {
        v10 = v9 ^ ROUND_CONSTANTS_0[v6 + 4];
        v11 = v8 ^ v5;
        v12 = v8 ^ v7;
        v13 = v10 ^ v4;
        v14 = v10 & ~v4 ^ v11;
        v15 = v7 & ~v13 ^ v4;
        v16 = v4 & ~v11 ^ v8 ^ v7;
        v17 = v8 & ~v7;
        v18 = v11 & ~v12;
        v19 = v13 ^ v17;
        v20 = v18 ^ v7;
        v21 = v13 ^ ~v17;
        v22 = v20 ^ v13 ^ v17;
        v5 = __ROR8__(v14 ^ v16, 19) ^ __ROR8__(v14 ^ v16, 28) ^ v14 ^ v16;
        v4 = __ROR8__(v15 ^ v14, 61) ^ __ROR8__(v15 ^ v14, 39) ^ v15 ^ v14;
        v9 = v19 ^ ~(__ROR8__(v21, 1) ^ __ROR8__(v21, 6));
        v7 = __ROR8__(v22, 10) ^ __ROR8__(v22, 17) ^ v22;
        v8 = __ROR8__(v16, 7) ^ __ROR8__(v16, 41) ^ v16;
        ++v6;
      }
      while (v6 != 8);
      result[3] = v7;
      result[4] = v8;
      result[1] = v4;
      result[2] = v9;
      *result = v5;
    }
    while (a3 > 0xF);
  }
  if (a3 < 8)
  {
    if (a3)
    {
      v38 = 0;
      v39 = 56;
      v40 = a3;
      do
      {
        v41 = *(unsigned __int8 *)a4;
        a4 = (unint64_t *)((char *)a4 + 1);
        v38 |= (unint64_t)v41 << v39;
        v39 -= 8;
        --v40;
      }
      while (v40);
      v42 = *result ^ v38;
      *result = v42;
      if (a2)
      {
        v43 = (uint64x2_t)vdupq_n_s64(a3 - 1);
        v44 = (char *)a2 + 1;
        v45 = (int64x2_t)xmmword_1DEE1D020;
        v46 = 56;
        v47 = vdupq_n_s64(2uLL);
        do
        {
          v48 = vmovn_s64((int64x2_t)vcgeq_u64(v43, (uint64x2_t)v45));
          if ((v48.i8[0] & 1) != 0)
            *(v44 - 1) = v42 >> v46;
          if ((v48.i8[4] & 1) != 0)
            *v44 = v42 >> (v46 - 8);
          v45 = vaddq_s64(v45, v47);
          v46 -= 16;
          v44 += 2;
        }
        while (16 * (((unint64_t)(a3 + 1) >> 1) & 0xF) + v46 != 56);
      }
    }
  }
  else
  {
    v24 = *a4;
    v23 = (unsigned __int8 *)(a4 + 1);
    v25 = bswap64(v24) ^ *result;
    *result = v25;
    v26 = 0;
    if (a3 != 8)
    {
      v27 = 56;
      v28 = a3 - 8;
      do
      {
        v29 = *v23++;
        v26 |= (unint64_t)v29 << v27;
        v27 -= 8;
        --v28;
      }
      while (v28);
    }
    result[1] ^= v26;
    if (a2)
    {
      *a2 = bswap64(v25);
      if (a3 != 8)
      {
        v30 = result[1];
        v31 = (a3 - 7) & 0xFFFFFFFFFFFFFFFELL;
        v32 = (uint64x2_t)vdupq_n_s64(a3 - 9);
        v33 = (int64x2_t)xmmword_1DEE1D020;
        v34 = (char *)a2 + 9;
        v35 = 56;
        v36 = vdupq_n_s64(2uLL);
        do
        {
          v37 = vmovn_s64((int64x2_t)vcgeq_u64(v32, (uint64x2_t)v33));
          if ((v37.i8[0] & 1) != 0)
            *(v34 - 1) = v30 >> v35;
          if ((v37.i8[4] & 1) != 0)
            *v34 = v30 >> (v35 - 8);
          v33 = vaddq_s64(v33, v36);
          v35 -= 16;
          v34 += 2;
          v31 -= 2;
        }
        while (v31);
      }
    }
  }
  result[5] = a3;
  return result;
}

int8x8_t *ccascon_ascon128a_ref_accumulate_decrypt(int8x8_t *result, _QWORD *a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  int8x8_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int8x8_t *v30;
  int8x8_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64x2_t v34;
  int64x2_t v35;
  _BYTE *v36;
  char v37;
  int64x2_t v38;
  int32x2_t v39;
  unint64_t v40;
  uint64x2_t v41;
  int8x16_t v42;
  int64x2_t v43;
  int64x2_t v44;
  uint64x2_t v45;
  int64x2_t v46;
  int8x16_t v47;
  uint64x2_t v48;
  int8x16_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  uint64x2_t v56;
  _BYTE *v57;
  int64x2_t v58;
  uint64_t v59;
  int64x2_t v60;
  int32x2_t v61;
  uint64x2_t v62;
  uint64_t v63;
  int8x16_t v64;
  int64x2_t v65;
  int64x2_t v66;
  uint64x2_t v67;
  int64x2_t v68;
  int8x16_t v69;
  uint64x2_t v70;
  int8x16_t v71;
  int8x8_t v72;

  if (a3 >= 0x10)
  {
    do
    {
      v4 = bswap64(*a4);
      v5 = bswap64(a4[1]);
      if (a2)
      {
        *a2 = bswap64(*(_QWORD *)result ^ v4);
        a2[1] = bswap64(*(_QWORD *)&result[1] ^ v5);
        a2 += 2;
      }
      v6 = 0;
      a4 += 2;
      a3 -= 16;
      v7 = result[3];
      v8 = (unint64_t)result[4];
      v9 = result[2];
      do
      {
        v10 = *(_QWORD *)&v9 ^ ROUND_CONSTANTS_0[v6 + 4];
        v11 = v8 ^ v4;
        v12 = v8 ^ *(_QWORD *)&v7;
        v13 = v10 ^ v5;
        v14 = v10 & ~v5 ^ v11;
        v15 = *(_QWORD *)&v7 & ~v13 ^ v5;
        v16 = v5 & ~v11 ^ v8 ^ *(_QWORD *)&v7;
        v17 = v8 & ~*(_QWORD *)&v7;
        v18 = v11 & ~v12;
        v19 = v13 ^ v17;
        v20 = v18 ^ *(_QWORD *)&v7;
        v21 = v13 ^ ~v17;
        v22 = v20 ^ v13 ^ v17;
        v4 = __ROR8__(v14 ^ v16, 19) ^ __ROR8__(v14 ^ v16, 28) ^ v14 ^ v16;
        v5 = __ROR8__(v15 ^ v14, 61) ^ __ROR8__(v15 ^ v14, 39) ^ v15 ^ v14;
        v9 = (int8x8_t)(v19 ^ ~(__ROR8__(v21, 1) ^ __ROR8__(v21, 6)));
        v7 = (int8x8_t)(__ROR8__(v22, 10) ^ __ROR8__(v22, 17) ^ v22);
        v8 = __ROR8__(v16, 7) ^ __ROR8__(v16, 41) ^ v16;
        ++v6;
      }
      while (v6 != 8);
      result[3] = v7;
      result[4] = (int8x8_t)v8;
      result[1] = (int8x8_t)v5;
      result[2] = v9;
      *result = (int8x8_t)v4;
    }
    while (a3 > 0xF);
  }
  if (a3 >= 8)
  {
    v24 = *a4;
    v23 = (unsigned __int8 *)(a4 + 1);
    v25 = bswap64(v24);
    v26 = 0;
    if (a3 != 8)
    {
      v27 = 56;
      v28 = a3 - 8;
      do
      {
        v29 = *v23++;
        v26 |= (unint64_t)v29 << v27;
        v27 -= 8;
        --v28;
      }
      while (v28);
    }
    if (a2)
    {
      *a2 = bswap64(*(_QWORD *)result ^ v25);
      v30 = result + 1;
      v31 = result[1];
      if (a3 == 8)
      {
        *result = (int8x8_t)v25;
LABEL_40:
        *v30 = (int8x8_t)(*(_QWORD *)&v31 | v26);
        goto LABEL_41;
      }
      v32 = *(_QWORD *)&v31 ^ v26;
      v33 = (a3 - 7) & 0xFFFFFFFFFFFFFFFELL;
      v34 = (uint64x2_t)vdupq_n_s64(a3 - 9);
      v35 = (int64x2_t)xmmword_1DEE1D020;
      v36 = (char *)a2 + 9;
      v37 = 56;
      v38 = vdupq_n_s64(2uLL);
      do
      {
        v39 = vmovn_s64((int64x2_t)vcgeq_u64(v34, (uint64x2_t)v35));
        if ((v39.i8[0] & 1) != 0)
          *(v36 - 1) = v32 >> v37;
        if ((v39.i8[4] & 1) != 0)
          *v36 = v32 >> (v37 - 8);
        v35 = vaddq_s64(v35, v38);
        v37 -= 16;
        v36 += 2;
        v33 -= 2;
      }
      while (v33);
    }
    *result = (int8x8_t)v25;
    v30 = result + 1;
    v31 = result[1];
    if (a3 != 8)
    {
      v40 = (a3 - 7) & 0xFFFFFFFFFFFFFFFELL;
      v41 = (uint64x2_t)vdupq_n_s64(a3 - 9);
      v42.i64[1] = -1;
      *(int8x8_t *)v42.i8 = result[1];
      v43 = (int64x2_t)xmmword_1DEE1D020;
      v44 = vdupq_n_s64(0x38uLL);
      v45.i64[0] = 255;
      v45.i64[1] = 255;
      v46 = vdupq_n_s64(2uLL);
      do
      {
        v47 = v42;
        v48 = (uint64x2_t)v43;
        v42 = vbicq_s8(v42, (int8x16_t)vshlq_u64(v45, (uint64x2_t)vsubq_s64(v44, vshlq_n_s64(v43, 3uLL))));
        v43 = vaddq_s64(v43, v46);
        v40 -= 2;
      }
      while (v40);
      v49 = vbslq_s8((int8x16_t)vcgtq_u64(v48, v41), v47, v42);
      v31 = vand_s8(*(int8x8_t *)v49.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL));
    }
    goto LABEL_40;
  }
  v50 = 0;
  if (a3)
  {
    v51 = 56;
    v52 = a3;
    do
    {
      v53 = *(unsigned __int8 *)a4;
      a4 = (unint64_t *)((char *)a4 + 1);
      v50 |= (unint64_t)v53 << v51;
      v51 -= 8;
      --v52;
    }
    while (v52);
    v54 = (uint64_t)*result;
    if (a2)
    {
      v55 = v54 ^ v50;
      v56 = (uint64x2_t)vdupq_n_s64(a3 - 1);
      v57 = (char *)a2 + 1;
      v58 = (int64x2_t)xmmword_1DEE1D020;
      v59 = 56;
      v60 = vdupq_n_s64(2uLL);
      do
      {
        v61 = vmovn_s64((int64x2_t)vcgeq_u64(v56, (uint64x2_t)v58));
        if ((v61.i8[0] & 1) != 0)
          *(v57 - 1) = v55 >> v59;
        if ((v61.i8[4] & 1) != 0)
          *v57 = v55 >> (v59 - 8);
        v58 = vaddq_s64(v58, v60);
        v59 -= 16;
        v57 += 2;
      }
      while (16 * (((unint64_t)(a3 + 1) >> 1) & 0xF) + v59 != 56);
      v54 = (uint64_t)*result;
    }
    v62 = (uint64x2_t)vdupq_n_s64(a3 - 1);
    v63 = ((_BYTE)a3 + 1) & 0x1E;
    v64.i64[1] = -1;
    v64.i64[0] = v54;
    v65 = (int64x2_t)xmmword_1DEE1D020;
    v66 = vdupq_n_s64(0x38uLL);
    v67.i64[0] = 255;
    v67.i64[1] = 255;
    v68 = vdupq_n_s64(2uLL);
    do
    {
      v69 = v64;
      v70 = (uint64x2_t)v65;
      v64 = vbicq_s8(v64, (int8x16_t)vshlq_u64(v67, (uint64x2_t)vsubq_s64(v66, vshlq_n_s64(v65, 3uLL))));
      v65 = vaddq_s64(v65, v68);
      v63 -= 2;
    }
    while (v63);
    v71 = vbslq_s8((int8x16_t)vcgtq_u64(v70, v62), v69, v64);
    v72 = vand_s8(*(int8x8_t *)v71.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL));
  }
  else
  {
    v72 = *result;
  }
  *result = (int8x8_t)(*(_QWORD *)&v72 | v50);
LABEL_41:
  result[5] = (int8x8_t)a3;
  return result;
}

unint64_t *ccascon_ascon128a_ref_finalize(unint64_t *result, uint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v3 = 0;
  v4 = bswap64(*a3);
  v5 = bswap64(a3[1]);
  v6 = result[2] ^ v4;
  v7 = result[3] ^ v5;
  v8 = result[4];
  v10 = *result;
  v9 = result[1];
  do
  {
    v11 = v6 ^ ROUND_CONSTANTS_0[v3];
    v12 = v8 ^ v10;
    v13 = v8 ^ v7;
    v14 = v11 ^ v9;
    v15 = v11 & ~v9 ^ v12;
    v16 = v7 & ~v14 ^ v9;
    v17 = v9 & ~v12 ^ v8 ^ v7;
    v18 = v8 & ~v7;
    v19 = v12 & ~v13 ^ v7 ^ v14 ^ v18;
    v10 = __ROR8__(v15 ^ v17, 19) ^ __ROR8__(v15 ^ v17, 28) ^ v15 ^ v17;
    v9 = __ROR8__(v16 ^ v15, 61) ^ __ROR8__(v16 ^ v15, 39) ^ v16 ^ v15;
    v6 = v14 ^ v18 ^ ~(__ROR8__(v14 ^ ~v18, 1) ^ __ROR8__(v14 ^ ~v18, 6));
    v7 = __ROR8__(v19, 10) ^ __ROR8__(v19, 17) ^ v19;
    v8 = __ROR8__(v17, 7) ^ __ROR8__(v17, 41) ^ v17;
    ++v3;
  }
  while (v3 != 12);
  *result = v10;
  result[1] = v9;
  v20 = v7 ^ v4;
  result[2] = v6;
  result[3] = v20;
  result[4] = v8 ^ v5;
  *(_BYTE *)a2 = HIBYTE(v20);
  *(_BYTE *)(a2 + 1) = BYTE6(v20);
  *(_BYTE *)(a2 + 2) = BYTE5(v20);
  *(_BYTE *)(a2 + 3) = BYTE4(v20);
  *(_BYTE *)(a2 + 4) = BYTE3(v20);
  *(_BYTE *)(a2 + 5) = BYTE2(v20);
  *(_BYTE *)(a2 + 6) = BYTE1(v20);
  *(_BYTE *)(a2 + 7) = v20;
  *(_QWORD *)(a2 + 8) = bswap64(result[4]);
  return result;
}

uint64_t ccmode_ctr_crypt(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v5 = *a1;
  v4 = a1[1];
  v6 = *(_QWORD *)(*a1 + 8);
  if (v6 >= 8)
    v7 = 8;
  else
    v7 = *(_QWORD *)(*a1 + 8);
  if (a2)
  {
    v10 = a2;
    v11 = a1 + 2;
    v12 = (v6 + 7) >> 3;
    v13 = (uint64_t)&a1[2 * v12 + 2];
    v14 = (uint64_t)&a1[v12 + 2];
    v15 = (char *)a1 + 15;
    do
    {
      v16 = *(_QWORD *)(v5 + 8);
      if (v4 == v16)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(v5 + 24))(v13, 1, v14, v11);
        inc_uint(v14 - v7 + *(_QWORD *)(v5 + 8), v7);
        v4 = 0;
        v16 = *(_QWORD *)(v5 + 8);
      }
      v17 = v16 - v4;
      if (v10 < v17)
        v17 = v10;
      if (v17)
      {
        v18 = v17;
        do
        {
          *(_BYTE *)(a4 - 1 + v18) = v15[v4 + v18] ^ *(_BYTE *)(a3 - 1 + v18);
          --v18;
        }
        while (v18);
      }
      a3 += v17;
      a4 += v17;
      v4 += v17;
      v10 -= v17;
    }
    while (v10);
  }
  a1[1] = v4;
  return 0;
}

void *cced448_full_add_ws(uint64_t a1, _QWORD *a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *result;

  v6 = cczp_n((uint64_t)a2);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = 4 * v6;
  v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4 * v6);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v8);
  cced25519_to_ed25519_point_ws(a1, (uint64_t)a2);
  cced25519_to_ed25519_point_ws(a1, (uint64_t)a2);
  cced448_add_points_unified_ws(a1, (uint64_t)a2, v9, v10, v9, 4);
  result = cced25519_from_ed25519_point_ws(a1, a2, a3, (char *)v9);
  *(_QWORD *)(a1 + 16) = v7;
  return result;
}

uint64_t ccwrap_wrapped_size(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = a1 + 8;
  cc_disable_dit(&v9);
  return v7;
}

BOOL ccder_blob_encode_oid(_QWORD *a1, const void *a2)
{
  unint64_t v4;

  v4 = ccoid_size((uint64_t)a2);
  return ccder_blob_encode_body(a1, v4, a2);
}

uint64_t ccaes_unwind_with_ecb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  rsize_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C874D8];
  v6 = (*(_QWORD *)a1 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x1E0C86820](a1, a2, a3, a3);
  if (v7 == 32 && *(_QWORD *)(a1 + 32))
  {
    v8 = ccecb_init(a1);
    if (!(_DWORD)v8)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(a1 + 32))((char *)v10 - v6, 14, a4);
      (*(void (**)(char *, uint64_t, uint64_t))(a1 + 32))((char *)v10 - v6, 13, a4 + 16);
    }
  }
  else
  {
    v8 = 4294967226;
  }
  cc_clear(v6, (char *)v10 - v6);
  return v8;
}

uint64_t ccaes_unwind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v9;
  char v11;

  v3 = 0;
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v11 = v3;
  v9 = ccaes_unwind_with_ecb((uint64_t)&ccaes_ltc_ecb_encrypt_mode, a1, a2, a3);
  cc_disable_dit(&v11);
  return v9;
}

uint64_t ccentropy_list_init(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char v3;
  char v10;

  v3 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v10 = v3;
  *a1 = &entropy_list_info;
  a1[1] = a3;
  a1[2] = a2;
  cc_disable_dit(&v10);
  return 0;
}

uint64_t ccentropy_list_get_seed(uint64_t a1, rsize_t a2, void *a3)
{
  uint64_t v6;
  uint64_t seed;
  uint64_t v8;

  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = 0xFFFFFFFFLL;
LABEL_9:
    cc_clear(a2, a3);
    return v8;
  }
  v6 = 0;
  while (1)
  {
    seed = ccentropy_get_seed(*(uint64_t (****)(_QWORD))(*(_QWORD *)(a1 + 8) + 8 * v6));
    if ((_DWORD)seed != -10)
      break;
    if ((unint64_t)++v6 >= *(_QWORD *)(a1 + 16))
    {
      v8 = 4294967286;
      goto LABEL_9;
    }
  }
  v8 = seed;
  if ((_DWORD)seed)
    goto LABEL_9;
  return v8;
}

uint64_t ccec_x963_import_pub_size(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  if (a1 <= 64)
  {
    if (a1 == 49)
    {
      v7 = 192;
      goto LABEL_17;
    }
    if (a1 == 57)
    {
      v7 = 224;
      goto LABEL_17;
    }
LABEL_16:
    v7 = 0;
    goto LABEL_17;
  }
  if (a1 == 65)
  {
    v7 = 256;
    goto LABEL_17;
  }
  if (a1 == 97)
  {
    v7 = 384;
    goto LABEL_17;
  }
  if (a1 != 133)
    goto LABEL_16;
  v7 = 521;
LABEL_17:
  cc_disable_dit(&v9);
  return v7;
}

_BYTE *ccmode_factory_cbc_decrypt(_QWORD *a1, _QWORD *a2)
{
  char v2;
  uint64_t v8;
  char v10;

  v2 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v10 = v2;
  v8 = a2[1];
  *a1 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  a1[1] = v8;
  a1[2] = ccmode_cbc_init;
  a1[3] = ccmode_cbc_decrypt;
  a1[4] = a2;
  return cc_disable_dit(&v10);
}

double ccmode_factory_siv_hmac_encrypt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = 600;
  *(_OWORD *)a1 = xmmword_1DEE1D060;
  *(_QWORD *)(a1 + 16) = ccmode_siv_hmac_init;
  *(_QWORD *)(a1 + 24) = ccmode_siv_hmac_nonce;
  *(_QWORD *)(a1 + 32) = ccmode_siv_hmac_auth;
  *(_QWORD *)(a1 + 40) = ccmode_siv_hmac_encrypt;
  *(_QWORD *)(a1 + 48) = ccmode_siv_hmac_reset;
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 64) = a3;
  return result;
}

uint64_t ccec_compact_transform_key_ws(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t **v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t result;
  uint64_t *v10;

  v4 = a2 + 2;
  v3 = *a2;
  v5 = **a2;
  v6 = (unint64_t *)&a2[v5 + 2];
  v7 = *(_QWORD *)(a1 + 16);
  v8 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v5);
  cczp_negate((uint64_t)v3, v8, v6);
  result = ccn_cmp(v5, (unint64_t *)v8, v6);
  if ((result & 0x80000000) != 0)
  {
    ccn_set(v5, v6, v8);
    v10 = (uint64_t *)cczp_prime((uint64_t)&v3[5 * *v3 + 4]);
    result = ccn_sub_ws(a1, v5, &v4[3 * v5], v10, (unint64_t *)&v4[3 * v5]);
  }
  *(_QWORD *)(a1 + 16) = v7;
  return result;
}

uint64_t ccec_compact_transform_key(uint64_t **a1)
{
  char v2;
  uint64_t *v8;
  uint64_t v9;
  _QWORD v11[4];
  void (*v12)(uint64_t);
  char v13;

  v2 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v13 = v2;
  v8 = *a1;
  v11[0] = cc_malloc_clear(8 * **a1);
  v11[1] = *v8;
  v11[2] = 0;
  v11[3] = cc_ws_alloc;
  v12 = cc_ws_free;
  if (v11[0])
  {
    ccec_compact_transform_key_ws((uint64_t)v11, a1);
    v12((uint64_t)v11);
    v9 = 0;
  }
  else
  {
    v9 = 4294967283;
  }
  cc_disable_dit(&v13);
  return v9;
}

uint64_t ccec_compact_generate_key(uint64_t *a1, uint64_t (**a2)(_QWORD, uint64_t, uint64_t *), uint64_t **a3)
{
  char v6;
  void *v12;
  uint64_t v13;
  uint64_t key_internal_fips_ws;
  uint64_t v15;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t (*v19)(_QWORD *, uint64_t);
  void (*v20)(uint64_t);
  char v21;

  v6 = 0;
  v21 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v21 = v6;
  v12 = cc_malloc_clear(392 * *a1);
  v13 = 49 * *a1;
  v17[0] = v12;
  v17[1] = v13;
  v18 = 0;
  v19 = cc_ws_alloc;
  v20 = cc_ws_free;
  if (v12)
  {
    key_internal_fips_ws = ccec_generate_key_internal_fips_ws((uint64_t)v17, a1, a2, a3);
    if ((_DWORD)key_internal_fips_ws)
    {
      v15 = key_internal_fips_ws;
    }
    else
    {
      ccec_compact_transform_key_ws((uint64_t)v17, a3);
      if (ccec_pairwise_consistency_check_ws((uint64_t)v17, a3, (uint64_t (**)(_QWORD, unint64_t, void *))a2))v15 = 4294967278;
      else
        v15 = 0;
    }
    v18 = 0;
    v20((uint64_t)v17);
  }
  else
  {
    v15 = 4294967283;
  }
  cc_disable_dit(&v21);
  return v15;
}

uint64_t ccec_compact_generate_key_init(uint64_t *a1, uint64_t (**a2)(_QWORD, uint64_t, uint64_t *), uint64_t a3)
{
  char v6;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t key_internal_fips_ws;
  _QWORD v18[4];
  void (*v19)(uint64_t);
  char v20;

  v6 = 0;
  v20 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v20 = v6;
  v12 = cc_malloc_clear(216 * *a1);
  v13 = 27 * *a1;
  v18[0] = v12;
  v18[1] = v13;
  v18[2] = 0;
  v18[3] = cc_ws_alloc;
  v19 = cc_ws_free;
  if (v12)
  {
    *(_BYTE *)(a3 + 8) = 0;
    v14 = *a1;
    *(_QWORD *)a3 = *a1;
    v15 = a3 + 16 * v14;
    *(_QWORD *)(v15 + 16) = a1;
    key_internal_fips_ws = ccec_generate_key_internal_fips_ws((uint64_t)v18, a1, a2, (uint64_t **)(v15 + 16));
    if (!(_DWORD)key_internal_fips_ws)
      *(_BYTE *)(a3 + 8) = 1;
    v19((uint64_t)v18);
  }
  else
  {
    key_internal_fips_ws = 4294967283;
  }
  cc_disable_dit(&v20);
  return key_internal_fips_ws;
}

uint64_t ccec_compact_generate_key_step(uint64_t (**a1)(_QWORD, unint64_t, void *), uint64_t a2, _QWORD *a3)
{
  char v6;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t ws;
  _QWORD v19[4];
  void (*v20)(uint64_t);
  char v21;

  v6 = 0;
  v21 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v21 = v6;
  v12 = cc_malloc_clear(360 * *(_QWORD *)a2);
  v13 = *(_QWORD *)a2;
  v14 = 45 * *(_QWORD *)a2;
  v19[0] = v12;
  v19[1] = v14;
  v19[2] = 0;
  v19[3] = cc_ws_alloc;
  v20 = cc_ws_free;
  if (v12)
  {
    *a3 = 0;
    v15 = *(unsigned __int8 *)(a2 + 8);
    if (v15 == 3)
    {
      ws = ccec_compact_generate_key_checkverify_and_extract_ws((uint64_t)v19, a2, a3);
    }
    else
    {
      if (v15 != 2)
      {
        if (v15 == 1)
        {
          ccec_compact_transform_key_ws((uint64_t)v19, (uint64_t **)(a2 + 16 * v13 + 16));
          v16 = 0;
          *(_BYTE *)(a2 + 8) = 2;
        }
        else
        {
          v16 = 4294967289;
        }
        goto LABEL_15;
      }
      ws = ccec_compact_generate_key_checksign_ws((uint64_t)v19, a1, a2);
    }
    v16 = ws;
LABEL_15:
    v20((uint64_t)v19);
    goto LABEL_16;
  }
  v16 = 4294967283;
LABEL_16:
  cc_disable_dit(&v21);
  return v16;
}

uint64_t fipspost_post(int a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  mach_timebase_info info;

  v4 = mach_absolute_time();
  v5 = mach_absolute_time();
  v6 = cc_module_id(0);
  printf("FIPSPOST_USER [%llu] %s:%d: [FIPSPOST][Module-ID] %s\n", v5, "fipspost_post", 154, (const char *)v6);
  result = 0;
  if ((a1 & 4) != 0)
    return result;
  v8 = mach_absolute_time();
  v9 = fipspost_post_hmac(a1);
  v10 = mach_absolute_time();
  v11 = v10;
  if (v9)
  {
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: fipspost_post_hmac: %d\n", v10, "fipspost_post", 162, v9);
    v12 = v9 - 1000;
    if ((a1 & 0x40) == 0)
    {
LABEL_4:
      v13 = mach_absolute_time();
      v14 = fipspost_post_integrity(a1, a2);
      v15 = mach_absolute_time();
      v16 = v15;
      if (v14)
      {
        printf("FIPSPOST_USER [%llu] %s:%d: FAILED: fipspost_post_integrity: %d\n", v15, "fipspost_post", 166, v14);
        if (!v12)
          v12 = v14 - 2000;
      }
      else
      {
        v21 = mach_absolute_time();
        info = 0;
        mach_timebase_info(&info);
        LODWORD(v23) = info.denom;
        LODWORD(v22) = info.numer;
        printf("FIPSPOST_USER [%llu] %s:%d: PASSED: (%u ms) - fipspost_post_integrity\n", v21, "fipspost_post", 166, ((double)(v16 - v13) * (double)v22 / (double)v23 / 1000000.0));
      }
      v20 = -3000;
      goto LABEL_12;
    }
  }
  else
  {
    v17 = mach_absolute_time();
    info = 0;
    mach_timebase_info(&info);
    LODWORD(v19) = info.denom;
    LODWORD(v18) = info.numer;
    printf("FIPSPOST_USER [%llu] %s:%d: PASSED: (%u ms) - fipspost_post_hmac\n", v17, "fipspost_post", 162, ((double)(v11 - v8) * (double)v18 / (double)v19 / 1000000.0));
    v12 = 0;
    if ((a1 & 0x40) == 0)
      goto LABEL_4;
  }
  v20 = -2000;
LABEL_12:
  v24 = mach_absolute_time();
  v25 = fipspost_post_indicator();
  v26 = mach_absolute_time();
  v27 = v26;
  if (v25)
  {
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: fipspost_post_indicator: %d\n", v26, "fipspost_post", 170, v25);
    if (!v12)
      v12 = v25 + v20;
  }
  else
  {
    v28 = mach_absolute_time();
    info = 0;
    mach_timebase_info(&info);
    LODWORD(v30) = info.denom;
    LODWORD(v29) = info.numer;
    printf("FIPSPOST_USER [%llu] %s:%d: PASSED: (%u ms) - fipspost_post_indicator\n", v28, "fipspost_post", 170, ((double)(v27 - v24) * (double)v29 / (double)v30 / 1000000.0));
  }
  v31 = mach_absolute_time();
  v32 = fipspost_post_aes_ecb(a1);
  v33 = mach_absolute_time();
  v34 = v33;
  if (v32)
  {
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: fipspost_post_aes_ecb: %d\n", v33, "fipspost_post", 171, v32);
    if (!v12)
      v12 = v20 + v32 - 1000;
  }
  else
  {
    v35 = mach_absolute_time();
    info = 0;
    mach_timebase_info(&info);
    LODWORD(v37) = info.denom;
    LODWORD(v36) = info.numer;
    printf("FIPSPOST_USER [%llu] %s:%d: PASSED: (%u ms) - fipspost_post_aes_ecb\n", v35, "fipspost_post", 171, ((double)(v34 - v31) * (double)v36 / (double)v37 / 1000000.0));
  }
  v38 = mach_absolute_time();
  v39 = fipspost_post_aes_cbc(a1);
  v40 = mach_absolute_time();
  v41 = v40;
  if (v39)
  {
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: fipspost_post_aes_cbc: %d\n", v40, "fipspost_post", 172, v39);
    if (!v12)
      v12 = v20 + v39 - 2000;
  }
  else
  {
    v42 = mach_absolute_time();
    info = 0;
    mach_timebase_info(&info);
    LODWORD(v44) = info.denom;
    LODWORD(v43) = info.numer;
    printf("FIPSPOST_USER [%llu] %s:%d: PASSED: (%u ms) - fipspost_post_aes_cbc\n", v42, "fipspost_post", 172, ((double)(v41 - v38) * (double)v43 / (double)v44 / 1000000.0));
  }
  v45 = mach_absolute_time();
  v46 = fipspost_post_rsa_sig(a1);
  v47 = mach_absolute_time();
  v48 = v47;
  if (v46)
  {
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: fipspost_post_rsa_sig: %d\n", v47, "fipspost_post", 173, v46);
    if (!v12)
      v12 = v20 + v46 - 3000;
  }
  else
  {
    v49 = mach_absolute_time();
    info = 0;
    mach_timebase_info(&info);
    LODWORD(v51) = info.denom;
    LODWORD(v50) = info.numer;
    printf("FIPSPOST_USER [%llu] %s:%d: PASSED: (%u ms) - fipspost_post_rsa_sig\n", v49, "fipspost_post", 173, ((double)(v48 - v45) * (double)v50 / (double)v51 / 1000000.0));
  }
  v52 = mach_absolute_time();
  v53 = fipspost_post_ecdsa(a1);
  v54 = mach_absolute_time();
  v55 = v54;
  if (v53)
  {
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: fipspost_post_ecdsa: %d\n", v54, "fipspost_post", 174, v53);
    if (!v12)
      v12 = v20 + v53 - 4000;
  }
  else
  {
    v56 = mach_absolute_time();
    info = 0;
    mach_timebase_info(&info);
    LODWORD(v58) = info.denom;
    LODWORD(v57) = info.numer;
    printf("FIPSPOST_USER [%llu] %s:%d: PASSED: (%u ms) - fipspost_post_ecdsa\n", v56, "fipspost_post", 174, ((double)(v55 - v52) * (double)v57 / (double)v58 / 1000000.0));
  }
  v59 = mach_absolute_time();
  v60 = fipspost_post_ecdh(a1);
  v61 = mach_absolute_time();
  v62 = v61;
  if (v60)
  {
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: fipspost_post_ecdh: %d\n", v61, "fipspost_post", 175, v60);
    if (!v12)
      v12 = v20 + v60 - 5000;
  }
  else
  {
    v63 = mach_absolute_time();
    info = 0;
    mach_timebase_info(&info);
    LODWORD(v65) = info.denom;
    LODWORD(v64) = info.numer;
    printf("FIPSPOST_USER [%llu] %s:%d: PASSED: (%u ms) - fipspost_post_ecdh\n", v63, "fipspost_post", 175, ((double)(v62 - v59) * (double)v64 / (double)v65 / 1000000.0));
  }
  v66 = mach_absolute_time();
  v67 = fipspost_post_aes_ccm(a1);
  v68 = mach_absolute_time();
  v69 = v68;
  if (v67)
  {
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: fipspost_post_aes_ccm: %d\n", v68, "fipspost_post", 176, v67);
    if (!v12)
      v12 = v20 + v67 - 6000;
  }
  else
  {
    v70 = mach_absolute_time();
    info = 0;
    mach_timebase_info(&info);
    LODWORD(v72) = info.denom;
    LODWORD(v71) = info.numer;
    printf("FIPSPOST_USER [%llu] %s:%d: PASSED: (%u ms) - fipspost_post_aes_ccm\n", v70, "fipspost_post", 176, ((double)(v69 - v66) * (double)v71 / (double)v72 / 1000000.0));
  }
  v73 = mach_absolute_time();
  v74 = fipspost_post_aes_cmac(a1);
  v75 = mach_absolute_time();
  v76 = v75;
  if (v74)
  {
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: fipspost_post_aes_cmac: %d\n", v75, "fipspost_post", 177, v74);
    if (!v12)
      v12 = v20 + v74 - 7000;
  }
  else
  {
    v77 = mach_absolute_time();
    info = 0;
    mach_timebase_info(&info);
    LODWORD(v79) = info.denom;
    LODWORD(v78) = info.numer;
    printf("FIPSPOST_USER [%llu] %s:%d: PASSED: (%u ms) - fipspost_post_aes_cmac\n", v77, "fipspost_post", 177, ((double)(v76 - v73) * (double)v78 / (double)v79 / 1000000.0));
  }
  v80 = mach_absolute_time();
  v81 = fipspost_post_hkdf(a1);
  v82 = mach_absolute_time();
  v83 = v82;
  if (v81)
  {
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: fipspost_post_hkdf: %d\n", v82, "fipspost_post", 178, v81);
    if (!v12)
      v12 = v20 + v81 - 8000;
  }
  else
  {
    v84 = mach_absolute_time();
    info = 0;
    mach_timebase_info(&info);
    LODWORD(v86) = info.denom;
    LODWORD(v85) = info.numer;
    printf("FIPSPOST_USER [%llu] %s:%d: PASSED: (%u ms) - fipspost_post_hkdf\n", v84, "fipspost_post", 178, ((double)(v83 - v80) * (double)v85 / (double)v86 / 1000000.0));
  }
  v87 = mach_absolute_time();
  v88 = fipspost_post_pbkdf(a1);
  v89 = mach_absolute_time();
  v90 = v89;
  if (v88)
  {
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: fipspost_post_pbkdf: %d\n", v89, "fipspost_post", 179, v88);
    if (!v12)
      v12 = v20 + v88 - 9000;
  }
  else
  {
    v91 = mach_absolute_time();
    info = 0;
    mach_timebase_info(&info);
    LODWORD(v93) = info.denom;
    LODWORD(v92) = info.numer;
    printf("FIPSPOST_USER [%llu] %s:%d: PASSED: (%u ms) - fipspost_post_pbkdf\n", v91, "fipspost_post", 179, ((double)(v90 - v87) * (double)v92 / (double)v93 / 1000000.0));
  }
  v94 = mach_absolute_time();
  v95 = fipspost_post_drbg_hmac(a1);
  v96 = mach_absolute_time();
  v97 = v96;
  if (v95)
  {
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: fipspost_post_drbg_hmac: %d\n", v96, "fipspost_post", 180, v95);
    if (!v12)
      v12 = v20 + v95 - 10000;
  }
  else
  {
    v98 = mach_absolute_time();
    info = 0;
    mach_timebase_info(&info);
    LODWORD(v100) = info.denom;
    LODWORD(v99) = info.numer;
    printf("FIPSPOST_USER [%llu] %s:%d: PASSED: (%u ms) - fipspost_post_drbg_hmac\n", v98, "fipspost_post", 180, ((double)(v97 - v94) * (double)v99 / (double)v100 / 1000000.0));
  }
  v101 = mach_absolute_time();
  v102 = fipspost_post_kdf_ctr(a1);
  v103 = mach_absolute_time();
  v104 = v103;
  if (v102)
  {
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: fipspost_post_kdf_ctr: %d\n", v103, "fipspost_post", 182, v102);
    if (!v12)
      v12 = v20 + v102 - 11000;
  }
  else
  {
    v105 = mach_absolute_time();
    info = 0;
    mach_timebase_info(&info);
    LODWORD(v107) = info.denom;
    LODWORD(v106) = info.numer;
    printf("FIPSPOST_USER [%llu] %s:%d: PASSED: (%u ms) - fipspost_post_kdf_ctr\n", v105, "fipspost_post", 182, ((double)(v104 - v101) * (double)v106 / (double)v107 / 1000000.0));
  }
  v108 = mach_absolute_time();
  v109 = fipspost_post_kdf_ctr_cmac(a1);
  v110 = mach_absolute_time();
  v111 = v110;
  if (v109)
  {
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: fipspost_post_kdf_ctr_cmac: %d\n", v110, "fipspost_post", 183, v109);
    if (!v12)
      v12 = v20 + v109 - 12000;
  }
  else
  {
    v112 = mach_absolute_time();
    info = 0;
    mach_timebase_info(&info);
    LODWORD(v114) = info.denom;
    LODWORD(v113) = info.numer;
    printf("FIPSPOST_USER [%llu] %s:%d: PASSED: (%u ms) - fipspost_post_kdf_ctr_cmac\n", v112, "fipspost_post", 183, ((double)(v111 - v108) * (double)v113 / (double)v114 / 1000000.0));
  }
  v115 = mach_absolute_time();
  v116 = fipspost_post_aes_gcm(a1);
  v117 = mach_absolute_time();
  v118 = v117;
  if (v116)
  {
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: fipspost_post_aes_gcm: %d\n", v117, "fipspost_post", 184, v116);
    if (!v12)
      v12 = v20 + v116 - 13000;
  }
  else
  {
    v119 = mach_absolute_time();
    info = 0;
    mach_timebase_info(&info);
    LODWORD(v121) = info.denom;
    LODWORD(v120) = info.numer;
    printf("FIPSPOST_USER [%llu] %s:%d: PASSED: (%u ms) - fipspost_post_aes_gcm\n", v119, "fipspost_post", 184, ((double)(v118 - v115) * (double)v120 / (double)v121 / 1000000.0));
  }
  v122 = mach_absolute_time();
  v123 = fipspost_post_aes_xts(a1);
  v124 = mach_absolute_time();
  v125 = v124;
  if (v123)
  {
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: fipspost_post_aes_xts: %d\n", v124, "fipspost_post", 185, v123);
    if (!v12)
      v12 = v20 + v123 - 14000;
  }
  else
  {
    v126 = mach_absolute_time();
    info = 0;
    mach_timebase_info(&info);
    LODWORD(v128) = info.denom;
    LODWORD(v127) = info.numer;
    printf("FIPSPOST_USER [%llu] %s:%d: PASSED: (%u ms) - fipspost_post_aes_xts\n", v126, "fipspost_post", 185, ((double)(v125 - v122) * (double)v127 / (double)v128 / 1000000.0));
  }
  v129 = mach_absolute_time();
  v130 = fipspost_post_tdes_ecb(a1);
  v131 = mach_absolute_time();
  v132 = v131;
  if (v130)
  {
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: fipspost_post_tdes_ecb: %d\n", v131, "fipspost_post", 186, v130);
    if (!v12)
      v12 = v20 + v130 - 15000;
  }
  else
  {
    v133 = mach_absolute_time();
    info = 0;
    mach_timebase_info(&info);
    LODWORD(v135) = info.denom;
    LODWORD(v134) = info.numer;
    printf("FIPSPOST_USER [%llu] %s:%d: PASSED: (%u ms) - fipspost_post_tdes_ecb\n", v133, "fipspost_post", 186, ((double)(v132 - v129) * (double)v134 / (double)v135 / 1000000.0));
  }
  v136 = mach_absolute_time();
  v137 = fipspost_post_drbg_ctr();
  v138 = mach_absolute_time();
  v139 = v138;
  if (v137)
  {
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: fipspost_post_drbg_ctr: %d\n", v138, "fipspost_post", 187, v137);
    if (!v12)
      v12 = v20 + v137 - 16000;
  }
  else
  {
    v140 = mach_absolute_time();
    info = 0;
    mach_timebase_info(&info);
    LODWORD(v142) = info.denom;
    LODWORD(v141) = info.numer;
    printf("FIPSPOST_USER [%llu] %s:%d: PASSED: (%u ms) - fipspost_post_drbg_ctr\n", v140, "fipspost_post", 187, ((double)(v139 - v136) * (double)v141 / (double)v142 / 1000000.0));
  }
  v143 = mach_absolute_time();
  v144 = fipspost_post_ffdh(a1);
  v145 = mach_absolute_time();
  v146 = v145;
  if (v144)
  {
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: fipspost_post_ffdh: %d\n", v145, "fipspost_post", 189, v144);
    if (!v12)
      v12 = v20 + v144 - 17000;
  }
  else
  {
    v147 = mach_absolute_time();
    info = 0;
    mach_timebase_info(&info);
    LODWORD(v149) = info.denom;
    LODWORD(v148) = info.numer;
    printf("FIPSPOST_USER [%llu] %s:%d: PASSED: (%u ms) - fipspost_post_ffdh\n", v147, "fipspost_post", 189, ((double)(v146 - v143) * (double)v148 / (double)v149 / 1000000.0));
  }
  v150 = mach_absolute_time();
  v151 = fipspost_post_rsa_enc_dec(a1);
  v152 = mach_absolute_time();
  v153 = v152;
  if (v151)
  {
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: fipspost_post_rsa_enc_dec: %d\n", v152, "fipspost_post", 190, v151);
    if (!v12)
      v12 = v20 + v151 - 18000;
  }
  else
  {
    v154 = mach_absolute_time();
    info = 0;
    mach_timebase_info(&info);
    LODWORD(v156) = info.denom;
    LODWORD(v155) = info.numer;
    printf("FIPSPOST_USER [%llu] %s:%d: PASSED: (%u ms) - fipspost_post_rsa_enc_dec\n", v154, "fipspost_post", 190, ((double)(v153 - v150) * (double)v155 / (double)v156 / 1000000.0));
  }
  v157 = mach_absolute_time();
  v158 = fipspost_post_shake(a1);
  v159 = mach_absolute_time();
  v160 = v159;
  if (v158)
  {
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: fipspost_post_shake: %d\n", v159, "fipspost_post", 191, v158);
    if (!v12)
      v12 = v20 + v158 - 19000;
  }
  else
  {
    v161 = mach_absolute_time();
    info = 0;
    mach_timebase_info(&info);
    LODWORD(v163) = info.denom;
    LODWORD(v162) = info.numer;
    printf("FIPSPOST_USER [%llu] %s:%d: PASSED: (%u ms) - fipspost_post_shake\n", v161, "fipspost_post", 191, ((double)(v160 - v157) * (double)v162 / (double)v163 / 1000000.0));
  }
  v164 = mach_absolute_time();
  if (!v12)
  {
    v165 = v164;
    v166 = mach_absolute_time();
    info = 0;
    mach_timebase_info(&info);
    LODWORD(v168) = info.denom;
    LODWORD(v167) = info.numer;
    printf("FIPSPOST_USER [%llu] %s:%d: all tests PASSED (%u ms)\n", v166, "fipspost_post", 211, ((double)(v165 - v4) * (double)v167 / (double)v168 / 1000000.0));
  }
  if ((a1 & 0x100) != 0)
    return 0;
  else
    return v12;
}

void *ccdh_gp_rfc3526group17()
{
  return &_ccdh_gp_rfc3526group17;
}

uint64_t ccec_x963_export(int a1, char *a2, uint64_t **a3)
{
  char v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  char v20;

  v6 = 0;
  v20 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v20 = v6;
  v12 = ccec_export_pub((uint64_t)a3, a2);
  v13 = v12;
  if (a1 && !(_DWORD)v12)
  {
    v14 = *a3;
    v15 = **a3;
    v16 = (unint64_t)(cczp_bitlen((uint64_t)&(*a3)[5 * v15 + 4]) + 7) >> 3;
    v17 = cczp_bitlen((uint64_t)v14);
    v18 = ccn_write_uint_padded_ct(v15, (unint64_t *)&a3[3 * v15 + 2], v16, &a2[((unint64_t)(v17 + 7) >> 2) | 1]);
    v13 = v18 & (v18 >> 31);
  }
  cc_disable_dit(&v20);
  return v13;
}

uint64_t ccec_make_pub(uint64_t a1, unint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned __int8 *a5, uint64_t a6)
{
  char v11;
  unint64_t *cp;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char v22;

  v11 = 0;
  v22 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v11 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v11 = 1;
    }
  }
  v22 = v11;
  if (a4)
  {
    cp = (unint64_t *)ccec_get_cp(a1);
    if (!cp
      || (v18 = (uint64_t *)cp,
          *(_QWORD *)a6 = cp,
          v19 = a6 + 16,
          ccn_read_uint(*cp, (_QWORD *)(a6 + 16), a2, a3))
      || ccn_read_uint(*v18, (_QWORD *)(v19 + 8 * **(_QWORD **)a6), a4, a5))
    {
      v20 = 0xFFFFFFFFLL;
    }
    else
    {
      ccn_seti(*v18, (_QWORD *)(v19 + 16 * **(_QWORD **)a6), 1);
      v20 = 0;
    }
  }
  else
  {
    v20 = 4294967289;
  }
  cc_disable_dit(&v22);
  return v20;
}

uint64_t ccrsa_recover_priv(unint64_t *a1, unint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned __int8 *a5, unint64_t a6, unsigned __int8 *a7, uint64_t (**a8)(_QWORD, unint64_t, uint64_t))
{
  char v14;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  _BYTE *v27;
  unint64_t *v28;
  void *v29;
  char *v30;
  uint64_t inited;
  uint64_t v33;
  int8x16_t *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  int8x16_t *v43;
  int8x16_t *v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  int v48;
  uint64_t non_zero_element_ws;
  int v50;
  unsigned int v51;
  unint64_t v52;
  int8x16_t *v53;
  char *v54;
  void *v55;
  uint64_t v56;
  uint64_t *v57;
  int v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  int v67;
  unint64_t *v68;
  uint64_t v69;
  _QWORD *__dst;
  char *v71;
  unint64_t *v72;
  uint64_t (**v73)(_QWORD, unint64_t, uint64_t);
  unsigned __int8 *v74;
  uint64_t *v75;
  unint64_t *v77;
  _QWORD v79[2];
  uint64_t v80;
  uint64_t (*v81)(_QWORD *, uint64_t);
  void (*v82)(uint64_t);
  char v83;

  v14 = 0;
  v83 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v14 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v14 = 1;
    }
  }
  v83 = v14;
  v20 = (a2 + 7) >> 3;
  v21 = sizeof_struct_ccrns_mul_modulus();
  v22 = sizeof_struct_ccpolyzp_po2cyc();
  v23 = (20 * v20) | 1;
  v79[0] = cc_malloc_clear(8 * ((v21 + v22 - 1) / v22 + v23));
  v24 = sizeof_struct_ccrns_mul_modulus();
  v25 = sizeof_struct_ccpolyzp_po2cyc();
  v79[1] = (v24 + v25 - 1) / v25 + v23;
  v80 = 0;
  v81 = cc_ws_alloc;
  v82 = cc_ws_free;
  if (!v79[0])
  {
    inited = 4294967283;
    goto LABEL_13;
  }
  v73 = a8;
  v74 = a7;
  *a1 = v20;
  v26 = (char *)(a1 + 3);
  v27 = (_BYTE *)cc_ws_alloc(v79, (a2 + 7) >> 3);
  v28 = (unint64_t *)v81(v79, (a2 + 7) >> 3);
  v29 = (void *)v81(v79, (a2 + 7) >> 3);
  if (!ccn_read_uint((a2 + 7) >> 3, v27, a2, a3))
  {
    v72 = v28;
    if ((*v27 & 1) != 0)
    {
      v30 = &v26[16 * v20 + 8];
      if (!ccn_read_uint((a2 + 7) >> 3, v30, a4, a5)
        && !ccn_read_uint((a2 + 7) >> 3, v28, a6, v74))
      {
        ccn_set((a2 + 7) >> 3, v26, v27);
        inited = cczp_init_ws((uint64_t)v79, a1);
        if ((_DWORD)inited)
          goto LABEL_11;
        v68 = (unint64_t *)v27;
        v33 = cczp_n((uint64_t)a1);
        v69 = v80;
        __dst = (_QWORD *)v81(v79, v33);
        v71 = (char *)v81(v79, v33);
        v34 = (int8x16_t *)v81(v79, 2 * v33);
        v77 = (unint64_t *)v81(v79, v33);
        v35 = ccn_n(v33, v30);
        v36 = (_QWORD *)v81(v79, 2 * v33 + 4);
        cczp_mm_init_copy(v36, a1);
        cc_clear(8 * (v35 + v33), v34);
        if (v35)
        {
          v37 = 0;
          v38 = 1;
          do
          {
            v39 = ccn_addmul1(v33, (char *)v34 + 8 * v37, v72, *(_QWORD *)&v30[8 * v37]);
            v40 = v37 + v33;
            v37 = v38;
            v41 = v35 > v38++;
            v34->i64[v40] = v39;
          }
          while (v41);
        }
        if ((v34->i64[0] & 1) == 0)
        {
          inited = 4294967273;
LABEL_42:
          cczp_from_ws((uint64_t)v79, (uint64_t)v36);
          goto LABEL_11;
        }
        v34->i64[0] &= ~1uLL;
        v42 = ccn_trailing_zeros(v35 + v33, (uint64_t)v34);
        v43 = v34;
        v75 = (uint64_t *)v34;
        v44 = v34;
        v45 = v35 + v33;
        v46 = v42;
        ccn_shift_right_multi(v35 + v33, v43, v44, v42);
        v47 = (void *)cczp_prime((uint64_t)a1);
        ccn_set(v33, __dst, v47);
        *__dst &= ~1uLL;
        cczp_to_ws((uint64_t)v79, (uint64_t)v36);
        ccn_seti(v33, v77, 1);
        cczp_to_ws((uint64_t)v79, (uint64_t)v36);
        v48 = 0;
        while (1)
        {
          non_zero_element_ws = cczp_generate_non_zero_element_ws((uint64_t)v79, (uint64_t)a1, v73, v71);
          if ((_DWORD)non_zero_element_ws
            || (non_zero_element_ws = cczp_power_ws((uint64_t)v79, (uint64_t)v36, v29, (unint64_t *)v71, v45 << 6, v75), (_DWORD)non_zero_element_ws))
          {
            inited = non_zero_element_ws;
            goto LABEL_42;
          }
          if (ccn_cmp(v33, (unint64_t *)v29, v77))
          {
            v50 = ccn_cmp(v33, __dst, (unint64_t *)v29);
            if (v46)
            {
              if (v50)
                break;
            }
          }
LABEL_30:
          if (++v48 == 100)
          {
            inited = 4294967273;
            goto LABEL_42;
          }
        }
        v51 = 1;
        while (1)
        {
          cczp_sqr_ws((uint64_t)v79, (uint64_t)v36);
          if (!ccn_cmp(v33, (unint64_t *)v71, v77))
            break;
          if (ccn_cmp(v33, __dst, (unint64_t *)v71))
          {
            ccn_set(v33, v29, v71);
            v41 = v46 > v51++;
            if (v41)
              continue;
          }
          goto LABEL_30;
        }
        cczp_from_ws((uint64_t)v79, (uint64_t)v36);
        v80 = v69;
        v52 = *a1;
        v53 = (int8x16_t *)v81(v79, *a1);
        v54 = (char *)v81(v79, v52);
        ccn_sub1(v52, v53, (unint64_t *)v29, 1uLL);
        v55 = (void *)cczp_prime((uint64_t)a1);
        v56 = ccn_n(v52, v53);
        if (!ccn_gcd_ws((uint64_t)v79, v52, v53->i64, v52, v55, v56, v53))
        {
          v57 = (uint64_t *)cczp_prime((uint64_t)a1);
          ccn_div_exact_ws((uint64_t)v79, v52, v54, v57, v53);
          v58 = ccn_cmp(v52, (unint64_t *)v53, (unint64_t *)v54);
          if (v58)
          {
            ccn_cond_swap(v52, v58 < 0, v53->i64, (uint64_t *)v54);
            v59 = (_QWORD *)ccrsa_ctx_private_zp(a1);
            *v59 = ccn_n(v52, v53);
            v60 = cczp_n((uint64_t)v59);
            ccn_set(v60, v59 + 3, v53);
            inited = cczp_init_ws((uint64_t)v79, v59);
            if (!(_DWORD)inited)
            {
              v61 = ccrsa_ctx_private_zp(a1);
              v62 = v61 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a1);
              *(_QWORD *)(v62 + 32) = ccn_n(v52, v54);
              v63 = (_QWORD *)(v62 + 32);
              v64 = cczp_n((uint64_t)v63);
              ccn_set(v64, v63 + 3, v54);
              inited = cczp_init_ws((uint64_t)v79, v63);
              if (!(_DWORD)inited)
              {
                v65 = cczp_bitlen((uint64_t)v59);
                if ((unint64_t)(v65 - cczp_bitlen((uint64_t)v63)) > 2)
                  goto LABEL_10;
                v80 = v69;
                inited = ccrsa_crt_makekey_ws((uint64_t)v79, a1);
                if (!(_DWORD)inited)
                {
                  v66 = (unint64_t *)cczp_prime((uint64_t)a1);
                  v67 = ccn_cmp(v20, v68, v66);
                  if (ccn_cmp(v20, v72, &a1[3 * *a1 + 4]) | v67)
                    inited = 4294967273;
                  else
                    inited = 0;
                }
              }
            }
            goto LABEL_11;
          }
        }
      }
    }
  }
LABEL_10:
  inited = 4294967273;
LABEL_11:
  v80 = 0;
  v82((uint64_t)v79);
LABEL_13:
  cc_disable_dit(&v83);
  return inited;
}

uint64_t ccz_is_negative(uint64_t a1)
{
  char v1;
  unsigned int v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = ccz_sign(a1);
  cc_disable_dit(&v9);
  return v7 >> 31;
}

uint64_t ccaes_ecb_encrypt_init(uint64_t a1, int *a2, uint64_t a3, int *a4)
{
  if (a3 > 127)
  {
    if (a3 != 128 && a3 != 256 && a3 != 192)
      return 4294967289;
    return ccaes_ltc_init(a4, a3, a2);
  }
  if ((unint64_t)a3 <= 0x20 && ((1 << a3) & 0x101010000) != 0)
    return ccaes_ltc_init(a4, a3, a2);
  return 4294967289;
}

uint64_t ccaes_ltc_init(int *a1, signed int a2, int *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  _DWORD *v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  int *v18;
  int *v19;
  __int128 v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;
  unsigned int v25;
  unsigned int *v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  _DWORD *v30;
  unint64_t v31;
  int v32;
  int v33;
  int v34;

  v3 = 4294967289;
  if (a2 > 127)
  {
    if (a2 != 128 && a2 != 256 && a2 != 192)
      return v3;
  }
  else if ((unint64_t)a2 > 0x20 || ((1 << a2) & 0x101010000) == 0)
  {
    return v3;
  }
  if (a2 <= 0x7F)
    v4 = a2;
  else
    v4 = (unint64_t)(a2 + 7) >> 3;
  v5 = ((4 * v4) & 0x7FFFFFE0) + 96;
  v6 = a3 + 61;
  a3[121] = v5;
  a3[60] = v5;
  v7 = *a1;
  *a3 = *a1;
  v8 = a1[1];
  a3[1] = v8;
  v9 = a1[2];
  a3[2] = v9;
  v10 = a1[3];
  a3[3] = v10;
  if (v4 == 24)
  {
    v24 = 0;
    a3[4] = a1[4];
    v25 = a1[5];
    a3[5] = v25;
    v26 = (unsigned int *)(a3 + 11);
    v13 = 52;
    while (1)
    {
      v7 ^= Te4_3[BYTE1(v25)] ^ Te4_2[BYTE2(v25)] ^ Te4_1[HIBYTE(v25)] ^ Te4_0[v25] ^ rcon[v24];
      v8 ^= v7;
      *(v26 - 5) = v7;
      *(v26 - 4) = v8;
      v9 ^= v8;
      v10 ^= v9;
      *(v26 - 3) = v9;
      *(v26 - 2) = v10;
      if (v24 == 7)
        break;
      v27 = *(v26 - 7) ^ v10;
      v25 ^= v27;
      *(v26 - 1) = v27;
      *v26 = v25;
      v26 += 6;
      ++v24;
    }
  }
  else if (v4 == 16)
  {
    v11 = 0;
    v12 = a3 + 4;
    v13 = 44;
    do
    {
      v14 = *(v12 - 1);
      v7 ^= Te4_3[BYTE1(v14)] ^ Te4_2[BYTE2(v14)] ^ *(_DWORD *)((char *)Te4_1 + ((v14 >> 22) & 0x3FC)) ^ Te4_0[*(v12 - 1)] ^ rcon[v11];
      v15 = *(v12 - 2);
      v16 = *(v12 - 3) ^ v7;
      *v12 = v7;
      v12[1] = v16;
      v17 = v15 ^ v16;
      v12[2] = v17;
      v12[3] = v17 ^ v14;
      ++v11;
      v12 += 4;
    }
    while (v11 != 10);
  }
  else
  {
    v28 = 0;
    a3[4] = a1[4];
    a3[5] = a1[5];
    a3[6] = a1[6];
    v29 = a1[7];
    a3[7] = v29;
    v30 = a3 + 8;
    v13 = 60;
    while (1)
    {
      v7 ^= Te4_3[BYTE1(v29)] ^ Te4_2[BYTE2(v29)] ^ Te4_1[HIBYTE(v29)] ^ Te4_0[v29] ^ rcon[v28];
      v8 ^= v7;
      *v30 = v7;
      v30[1] = v8;
      v9 ^= v8;
      v10 ^= v9;
      v30[2] = v9;
      v30[3] = v10;
      if (v28 == 6)
        break;
      HIDWORD(v31) = v10;
      LODWORD(v31) = v10;
      v32 = Te4_3[((unsigned __int16)(v31 >> 24) >> 8)] ^ *(v30 - 4) ^ Te4_2[((v31 >> 24) >> 16)] ^ Te4_1[(v31 >> 24) >> 24] ^ Te4_0[HIBYTE(v10)];
      v33 = *(v30 - 3) ^ v32;
      v30[4] = v32;
      v30[5] = v33;
      v34 = *(v30 - 2) ^ v33;
      v29 ^= v34;
      v30[6] = v34;
      v30[7] = v29;
      v30 += 8;
      ++v28;
    }
  }
  v18 = &a3[v13];
  v20 = *((_OWORD *)v18 - 1);
  v19 = v18 - 4;
  *(_OWORD *)(a3 + 61) = v20;
  if (a3[121] >= 0x20)
  {
    v21 = 1;
    do
    {
      v22 = *(v19 - 4);
      v19 -= 4;
      v6[4] = Tks1[BYTE1(v22)] ^ Tks0[v22] ^ Tks2[BYTE2(v22)] ^ *(_DWORD *)((char *)&Tks3
                                                                                           + (((unint64_t)v22 >> 22) & 0x3FC));
      v6 += 4;
      v6[1] = Tks1[BYTE1(v19[1])] ^ Tks0[v19[1]] ^ Tks2[BYTE2(v19[1])] ^ *(_DWORD *)((char *)&Tks3 + (((unint64_t)v19[1] >> 22) & 0x3FC));
      v6[2] = Tks1[BYTE1(v19[2])] ^ Tks0[v19[2]] ^ Tks2[BYTE2(v19[2])] ^ *(_DWORD *)((char *)&Tks3 + (((unint64_t)v19[2] >> 22) & 0x3FC));
      v6[3] = Tks1[BYTE1(v19[3])] ^ Tks0[v19[3]] ^ Tks2[BYTE2(v19[3])] ^ *(_DWORD *)((char *)&Tks3 + (((unint64_t)v19[3] >> 22) & 0x3FC));
      ++v21;
    }
    while (v21 < a3[121] >> 4);
  }
  v3 = 0;
  v6[4] = *(v19 - 4);
  v6[5] = *(v19 - 3);
  v6[6] = *(v19 - 2);
  v6[7] = *(v19 - 1);
  return v3;
}

uint64_t ccaes_ecb_decrypt_init(uint64_t a1, int *a2, uint64_t a3, int *a4)
{
  if (a3 > 127)
  {
    if (a3 != 128 && a3 != 256 && a3 != 192)
      return 4294967289;
    return ccaes_ltc_init(a4, a3, a2);
  }
  if ((unint64_t)a3 <= 0x20 && ((1 << a3) & 0x101010000) != 0)
    return ccaes_ltc_init(a4, a3, a2);
  return 4294967289;
}

__n128 ccaes_ecb_encrypt_roundkey(uint64_t a1, int a2, __n128 *a3)
{
  __n128 result;

  result = *(__n128 *)(a1 + 4 * (4 * a2));
  *a3 = result;
  return result;
}

uint64_t ccrsa_emsa_pss_decode_canary_out_ws(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, size_t a5, char *a6, uint64_t a7, unsigned __int8 *a8, _QWORD *a9)
{
  int v9;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unint64_t v27;
  unsigned __int8 *v28;
  char *v29;
  unint64_t v30;
  int v31;
  int v32;
  int v33;
  size_t v34;
  int v35;
  unint64_t v36;
  char *v37;
  size_t v38;
  int v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  unsigned int v43;
  _BYTE v45[4];
  int v46;
  char *v47;
  size_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t __src;
  char v53[64];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C874D8];
  *a9 = 0;
  a9[1] = 0;
  if (*(_QWORD *)a2 != a5)
    return 4294967270;
  v9 = a7;
  v11 = (unint64_t)(a7 + 7) >> 3;
  v12 = a5 + a4;
  if (v11 < a5 + a4 + 2)
    return 4294967270;
  v47 = a6;
  v48 = a4;
  v50 = *(_QWORD *)(a1 + 16);
  v51 = a1;
  v17 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, (unint64_t)(a7 + 63) >> 6);
  v46 = a8[v11 - 1] ^ 0xBC;
  v18 = -v9 & 7;
  v19 = (-256 >> v18) & *a8;
  v20 = v11 + ~a5;
  v49 = (char *)&a8[v20];
  v21 = ccmgf(a3, v20, (uint64_t)v17, a5, (char *)&a8[v20]);
  v25 = v21 | v19 | v46;
  v26 = *v17 & (0xFFu >> v18);
  *v17 &= 0xFFu >> v18;
  v27 = v11 - 2 - v12;
  if (v11 - 2 != v12)
  {
    if (v27 <= 1)
      v27 = 1;
    v28 = a8;
    v29 = v17;
    v30 = v27;
    do
    {
      v32 = *v28++;
      v31 = v32;
      v33 = *v29++;
      v25 |= v33 ^ v31;
      --v30;
    }
    while (v30);
    v26 = v17[v27];
  }
  v34 = v48;
  v35 = a8[v27] ^ v26;
  if (v48)
  {
    v36 = v27 + 1;
    v37 = v17;
    v38 = v48;
    do
    {
      *v37 = v37[v36] ^ a8[v36];
      ++v37;
      ++a8;
      --v38;
    }
    while (v38);
  }
  v39 = v35 ^ 1;
  __src = 0;
  MEMORY[0x1E0C86820](v21, v22, v23, v24);
  v41 = &v45[-v40];
  ccdigest_init(a2, &v45[-v40]);
  ccdigest_update(a2, v41, 8uLL, (char *)&__src);
  ccdigest_update(a2, v41, a5, v47);
  if (v34)
    ccdigest_update(a2, v41, v34, v17);
  (*(void (**)(uint64_t, _QWORD *, char *))(a2 + 56))(a2, v41, v53);
  cc_clear(*(_QWORD *)(a2 + 8) + *(_QWORD *)(a2 + 16) + 12, v41);
  v42 = v49;
  v43 = cc_cmp_safe(a5, v53, v49);
  v13 = -(((v25 | v39 | v43 | ((unint64_t)(int)(v25 | v39 | v43) >> 32)) + 0xFFFFFFFF) >> 32) & 0xFFFFFFE6;
  cc_fault_canary_set((uint64_t)a9, (uint64_t)&CCRSA_PSS_FAULT_CANARY, a5, (uint64_t)v42, (uint64_t)v53);
  *(_QWORD *)(v51 + 16) = v50;
  return v13;
}

uint64_t ccrsa_emsa_pss_decode_ws(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, size_t a5, char *a6, uint64_t a7, unsigned __int8 *a8)
{
  _QWORD v9[3];

  v9[2] = *MEMORY[0x1E0C874D8];
  v9[0] = 0xAAAAAAAAAAAAAAAALL;
  v9[1] = 0xAAAAAAAAAAAAAAAALL;
  return ccrsa_emsa_pss_decode_canary_out_ws(a1, a2, a3, a4, a5, a6, a7, a8, v9);
}

uint64_t ccrsa_emsa_pss_decode(uint64_t a1, uint64_t a2, uint64_t a3, size_t a4, char *a5, uint64_t a6, unsigned __int8 *a7)
{
  char v14;
  uint64_t v20;
  _QWORD v22[4];
  void (*v23)(uint64_t);
  char v24;
  _QWORD v25[3];

  v14 = 0;
  v25[2] = *MEMORY[0x1E0C874D8];
  v24 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v14 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v14 = 1;
    }
  }
  v24 = v14;
  v22[0] = cc_malloc_clear(8 * ((unint64_t)(a6 + 63) >> 6));
  v22[1] = (unint64_t)(a6 + 63) >> 6;
  v22[2] = 0;
  v22[3] = cc_ws_alloc;
  v23 = cc_ws_free;
  if (v22[0])
  {
    v25[0] = 0xAAAAAAAAAAAAAAAALL;
    v25[1] = 0xAAAAAAAAAAAAAAAALL;
    v20 = ccrsa_emsa_pss_decode_canary_out_ws((uint64_t)v22, a1, a2, a3, a4, a5, a6, a7, v25);
    v23((uint64_t)v22);
  }
  else
  {
    v20 = 4294967283;
  }
  cc_disable_dit(&v24);
  return v20;
}

uint64_t ccder_blob_decode_sequence_tl_strict(unsigned __int8 **a1, unsigned __int8 **a2)
{
  return ccder_blob_decode_range_strict(a1, 0x2000000000000010, a2);
}

uint64_t ccss_sizeof_generator(unsigned int *a1)
{
  return 8 * cczp_n((uint64_t)(a1 + 2)) * *a1 + 16;
}

uint64_t ccss_sizeof_share(uint64_t a1)
{
  return 8 * cczp_n(a1 + 8) + 16;
}

unint64_t ccss_sizeof_parameters(uint64_t a1)
{
  return ((2 * a1 + 14) & 0xFFFFFFFFFFFFFFF0) + 48;
}

uint64_t ccss_sizeof_share_bag(unsigned int *a1)
{
  uint64_t v1;

  v1 = *a1;
  return 8 * (v1 + v1 * cczp_n((uint64_t)(a1 + 2))) + 16;
}

uint64_t ccss_shamir_poly_coefficient(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 8) < a2)
    cc_abort();
  return a1 + 8 * **(_QWORD **)a1 * a2 + 16;
}

uint64_t ccss_shamir_prime_of(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_BYTE *ccss_shamir_share_init(_QWORD *a1, uint64_t a2)
{
  char v2;
  char v9;

  v2 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v9 = v2;
  *a1 = a2 + 8;
  return cc_disable_dit(&v9);
}

uint64_t ccss_shamir_consistent_primes(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;

  if (a2 == a1)
    return 0;
  v4 = cczp_n(a2);
  v5 = (unint64_t *)cczp_prime(a2);
  v6 = cczp_n(a1);
  v7 = (unint64_t *)cczp_prime(a1);
  if (!ccn_cmpn(v4, v5, v6, v7))
    return 0;
  else
    return 4294967166;
}

BOOL csss_shamir_share_bag_can_recover_secret(uint64_t a1)
{
  char v1;
  _BOOL8 v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *(_DWORD *)(a1 + 8) >= **(_DWORD **)a1;
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccss_shamir_parameters_init(uint64_t a1, unint64_t a2, unsigned __int8 *a3, unsigned int a4)
{
  char v6;
  uint64_t uint;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v16;
  char v17;

  v6 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v17 = v6;
  if (a4 >= 2)
  {
    v13 = (a2 + 7) >> 3;
    *(_QWORD *)(a1 + 8) = v13;
    uint = ccn_read_uint(v13, (_QWORD *)(a1 + 32), a2, a3);
    if (!(_DWORD)uint)
    {
      uint = cczp_init((_QWORD *)(a1 + 8));
      if (!(_DWORD)uint)
      {
        v16 = a4;
        v14 = (unint64_t *)cczp_prime(a1 + 8);
        if ((ccn_cmpn(1uLL, &v16, v13, v14) & 0x80000000) != 0)
        {
          uint = 0;
          *(_DWORD *)a1 = a4;
        }
        else
        {
          uint = 4294967168;
        }
      }
    }
  }
  else
  {
    uint = 4294967171;
  }
  cc_disable_dit(&v17);
  return uint;
}

uint64_t ccss_shamir_parameters_maximum_secret_length(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = 8 * cczp_n(a1 + 8) - 1;
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccec_full_add(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[4];
  void (*v19)(uint64_t);
  char v20;

  v8 = 0;
  v20 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v20 = v8;
  v14 = cc_malloc_clear(120 * *a1);
  v15 = 15 * *a1;
  v18[0] = v14;
  v18[1] = v15;
  v18[2] = 0;
  v18[3] = cc_ws_alloc;
  v19 = cc_ws_free;
  if (v14)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t, uint64_t, uint64_t))(a1[2] + 88))(v18, a1, a2, a3, a4);
    v19((uint64_t)v18);
    v16 = 0;
  }
  else
  {
    v16 = 4294967283;
  }
  cc_disable_dit(&v20);
  return v16;
}

uint64_t ccaes_gladman_cbc_decrypt_init(uint64_t a1, int *a2, uint64_t a3, int *a4)
{
  uint64_t result;

  if (a3 > 127)
  {
    if (a3 != 128 && a3 != 256 && a3 != 192)
      return 4294967289;
LABEL_8:
    result = ccaes_gladman_decrypt_key(a4, a3, a2);
    a2[65] = 1;
    return result;
  }
  if ((unint64_t)a3 <= 0x20 && ((1 << a3) & 0x101010000) != 0)
    goto LABEL_8;
  return 4294967289;
}

unint64_t ccdh_gp_size(uint64_t a1)
{
  char v1;
  unint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = ((4 * a1 + 28) & 0xFFFFFFFFFFFFFFE0) + 40;
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccrc2_ltc_setup(uint64_t a1, int8x16_t *a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t i;
  const char *v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  _OWORD v16[8];
  char v17;
  uint64_t v18;
  int8x16x2_t v19;

  v18 = *MEMORY[0x1E0C874D8];
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  if (a3 - 129 < 0xFFFFFFFFFFFFFF80)
    return 4294967289;
  __memcpy_chk();
  if (a3 > 0x7F)
  {
    v7 = 0;
LABEL_9:
    v9 = *((_BYTE *)v16 + v7);
    v10 = 128;
    if (a3 > 0x80)
      v10 = a3;
    do
    {
      v9 = PITABLE[(*((_BYTE *)v16 + v10) ^ v9)];
      *((_BYTE *)v16 + v10-- - a3) = v9;
    }
    while (v10 - a3 < 0x80);
    goto LABEL_12;
  }
  v6 = 0;
  v7 = 128 - a3;
  v8 = *((_BYTE *)v16 + a3 - 1);
  do
  {
    v8 = PITABLE[(*((_BYTE *)v16 + v6) + v8)];
    *((_BYTE *)v16 + a3 + v6++) = v8;
  }
  while (a3 + v6 != 128);
  if (a3)
    goto LABEL_9;
LABEL_12:
  for (i = 0; i != 8; i += 2)
  {
    v12 = (const char *)&v16[i];
    v19 = vld2q_s8(v12);
    v13 = vmovl_u8(*(uint8x8_t *)v19.val[1].i8);
    v14 = vmovl_high_u8((uint8x16_t)v19.val[1]);
    v15 = vmovl_high_u8((uint8x16_t)v19.val[0]);
    v19.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v19.val[0].i8);
    a2[2] = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v14.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v15.i8));
    a2[3] = vorrq_s8((int8x16_t)vshll_high_n_u16(v14, 8uLL), (int8x16_t)vmovl_high_u16(v15));
    *a2 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v13.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v19.val[0].i8));
    a2[1] = vorrq_s8((int8x16_t)vshll_high_n_u16(v13, 8uLL), (int8x16_t)vmovl_high_u16((uint16x8_t)v19.val[0]));
    a2 += 4;
  }
  cc_clear(0x81uLL, v16);
  return 0;
}

void *ccaes_xts_decrypt_mode()
{
  return &ccaes_arm_xts_decrypt_mode;
}

size_t ccec_plprint(uint64_t *a1, const char *a2, uint64_t a3)
{
  FILE **v5;

  v5 = (FILE **)MEMORY[0x1E0C874E0];
  fprintf((FILE *)*MEMORY[0x1E0C874E0], "%s { x -> ", a2);
  ccn_print(*a1, a3);
  fwrite(", y -> ", 7uLL, 1uLL, *v5);
  ccn_print(*a1, a3 + 8 * *a1);
  fwrite(", z -> ", 7uLL, 1uLL, *v5);
  ccn_print(*a1, a3 + 16 * *a1);
  return fwrite("}\n", 2uLL, 1uLL, *v5);
}

_BYTE *ccec_print_full_key(const char *a1, uint64_t **a2)
{
  char v3;
  FILE **v9;
  char v11;

  v3 = 0;
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v11 = v3;
  v9 = (FILE **)MEMORY[0x1E0C874E0];
  fprintf((FILE *)*MEMORY[0x1E0C874E0], "full key %s { \n", a1);
  ccec_plprint(*a2, "pubkey:", (uint64_t)(a2 + 2));
  fwrite("priv: {", 7uLL, 1uLL, *v9);
  ccn_print(**a2, (uint64_t)&a2[3 * **a2 + 2]);
  fwrite("}\n", 2uLL, 1uLL, *v9);
  return cc_disable_dit(&v11);
}

_BYTE *ccec_print_public_key(const char *a1, uint64_t **a2)
{
  char v4;
  char v11;

  v4 = 0;
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v11 = v4;
  fwrite("public key ", 0xBuLL, 1uLL, (FILE *)*MEMORY[0x1E0C874E0]);
  ccec_plprint(*a2, a1, (uint64_t)(a2 + 2));
  return cc_disable_dit(&v11);
}

uint64_t ccmode_cfb_init(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, void *__src)
{
  uint64_t v8;
  size_t v9;
  char *v10;
  uint64_t result;

  v8 = *(_QWORD *)(a1 + 32);
  *a2 = v8;
  v9 = *(_QWORD *)(v8 + 8);
  v10 = (char *)a2 + ((v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (__src)
    memcpy(v10 + 16, __src, v9);
  else
    cc_clear(*(_QWORD *)(v8 + 8), v10 + 16);
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v8 + 16))(v8, (unint64_t)a2 + ((2 * *(_QWORD *)(*a2 + 8) + 14) & 0xFFFFFFFFFFFFFFF0) + 16, a3, a4);
  a2[1] = *(_QWORD *)(v8 + 8);
  return result;
}

uint64_t ccaes_ofb_crypt_vng(int8x16_t *a1, unint64_t a2, int8x16_t *a3, int8x16_t *a4)
{
  int8x16_t *v4;
  int8x16_t *v5;
  unint64_t v6;
  int8x16_t *v8;
  uint64_t v9;
  __int128 *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int8 v14;
  uint64_t v15;
  uint64_t result;

  v4 = a4;
  v5 = a3;
  v6 = a2;
  v8 = a1 + 1;
  v9 = a1->i64[1];
  v10 = (__int128 *)&a1[1].i8[(*(_QWORD *)(a1->i64[0] + 8) + 7) & 0xFFFFFFFFFFFFFFF8];
  v11 = v9 == 16 || a2 == 0;
  if (!v11)
  {
    v12 = 0;
    do
    {
      a4->i8[v12] = a1[1].i8[v9 + v12] ^ a3->i8[v12];
      v13 = v12 + 1;
      if (v9 + v12 == 15)
        break;
      v11 = a2 - 1 == v12++;
    }
    while (!v11);
    v9 += v13;
    v4 = (int8x16_t *)((char *)a4 + v13);
    v5 = (int8x16_t *)((char *)a3 + v13);
    v6 = a2 - v13;
  }
  if (v6 >= 0x10)
  {
    ccaes_ofb_crypt_vng_vector((uint64_t)v10, v8, v6 >> 4, v5, v4);
    v5 = (int8x16_t *)((char *)v5 + (v6 & 0xFFFFFFFFFFFFFFF0));
    v4 = (int8x16_t *)((char *)v4 + (v6 & 0xFFFFFFFFFFFFFFF0));
    v6 &= 0xFu;
  }
  if (v6)
  {
    while (1)
    {
      if (v9 == 16)
      {
        if (AccelerateCrypto_AES_encrypt((uint64_t)v8, v8, v10))
          return 0xFFFFFFFFLL;
        v9 = 0;
      }
      v14 = v5->i8[0];
      v5 = (int8x16_t *)((char *)v5 + 1);
      v15 = v9 + 1;
      v4->i8[0] = v8->i8[v9] ^ v14;
      v4 = (int8x16_t *)((char *)v4 + 1);
      ++v9;
      if (!--v6)
        goto LABEL_19;
    }
  }
  v15 = v9;
LABEL_19:
  result = 0;
  a1->i64[1] = v15;
  return result;
}

uint64_t (**ccspake_mac_hkdf_cmac_aes128_sha256())()
{
  return ccspake_mac_hkdf_cmac_aes128_sha256_decl;
}

uint64_t ccspake_mac_hkdf_cmac_compute(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char *a5, size_t a6, void *a7)
{
  uint64_t v7;
  _QWORD *v14;

  v7 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v7 + 24) != a6)
    return 4294967289;
  v14 = (_QWORD *)(*(uint64_t (**)(void))(v7 + 8))();
  return cccmac_one_shot_generate(v14, a2, a3, a4, a5, a6, a7);
}

_BYTE *ccz_mulmod(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v6;
  char v13;

  v6 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v13 = v6;
  ccz_mul(a1, a2, a3);
  ccz_mod((uint64_t)a1, (uint64_t)a1, a4);
  return cc_disable_dit(&v13);
}

uint64_t ccoid_size(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1) + 2;
}

void *ccspake_cp_521()
{
  return &ccspake_cp521;
}

void *ccspake_cp_521_rfc()
{
  return &ccspake_cp521_rfc;
}

_BYTE *ccpad_xts_encrypt(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  char v11;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  _BYTE v23[16];
  _BYTE v24[16];
  uint64_t v25;

  v11 = 0;
  v25 = *MEMORY[0x1E0C874D8];
  v22 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v11 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v11 = 1;
    }
  }
  v22 = v11;
  v17 = a4 & 0xF;
  if ((a4 & 0xF) != 0)
  {
    v18 = a4 & 0xFFFFFFFFFFFFFFF0;
    (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(a1 + 48))(a2, a3, (a4 >> 4) - 1, a5, a6);
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, _BYTE *))(a1 + 48))(a2, a3, 1, a5 + v18 - 16, v24);
    v19 = 0;
    do
    {
      v23[v19] = *(_BYTE *)(a5 + v18 + v19);
      *(_BYTE *)(a6 + v18 + v19) = v24[v19];
      ++v19;
    }
    while (v17 != v19);
    v20 = a6 + v18 - 16;
    if ((unint64_t)(v19 - 1) <= 0xE)
      memcpy(&v23[v17], &v24[v17], 16 - v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t))(a1 + 48))(a2, a3, 1, v23, v20);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(a1 + 48))(a2, a3, a4 >> 4, a5, a6);
  }
  return cc_disable_dit(&v22);
}

uint64_t ccrsa_verify_pss_digest(uint64_t *a1, _QWORD *a2, uint64_t a3, size_t a4, char *a5, unint64_t a6, unsigned __int8 *a7, uint64_t a8, _QWORD *a9)
{
  char v15;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD v31[4];
  void (*v32)(uint64_t);
  char v33;

  v15 = 0;
  v33 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v15 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v15 = 1;
    }
  }
  v33 = v15;
  v21 = *a1;
  v22 = sizeof_struct_ccrns_mul_modulus();
  v23 = sizeof_struct_ccpolyzp_po2cyc();
  v31[0] = cc_malloc_clear(8 * ((v22 + v23 - 1) / v23 + 13 * v21) + 8);
  v24 = *a1;
  v25 = sizeof_struct_ccrns_mul_modulus();
  v26 = sizeof_struct_ccpolyzp_po2cyc();
  v31[1] = (v25 + v26 - 1) / v26 + 13 * v24 + 1;
  v31[2] = 0;
  v31[3] = cc_ws_alloc;
  v32 = cc_ws_free;
  if (v31[0])
  {
    v27 = ccrsa_verify_pss_digest_ws((uint64_t)v31, a1, a2, a3, a4, a5, a6, a7, a8, a9);
    v32((uint64_t)v31);
  }
  else
  {
    v27 = 4294967283;
  }
  cc_disable_dit(&v33);
  return v27;
}

uint64_t ccrsa_verify_pss_digest_ws(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, size_t a5, char *a6, unint64_t a7, unsigned __int8 *a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  char *v26;
  uint64_t *v27;
  unint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C874D8];
  if (a10)
  {
    *a10 = 0;
    a10[1] = 0;
  }
  v31 = 0uLL;
  v18 = cczp_bitlen((uint64_t)a2);
  v19 = v18 + 7;
  if (a7 != (unint64_t)(v18 + 7) >> 3)
    return 4294967273;
  v20 = v18;
  result = 4294967273;
  if (*a3 == a5)
  {
    v29 = a4;
    v22 = *a2;
    if (8 * *a2 - ((unint64_t)(v20 + 6) >> 3) <= 8)
    {
      if (v19 >= 8)
      {
        v25 = 8 * *a2 - ((unint64_t)(v20 + 6) >> 3);
        v26 = a6;
        v23 = *(_QWORD *)(a1 + 16);
        v28 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v22);
        v27 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v22);
        cc_clear(8 * (*(_QWORD *)(a1 + 16) - v23), (void *)(*(_QWORD *)a1 + 8 * v23));
        if (ccn_read_uint(v22, v28, a7, a8))
        {
          v30 = -23;
        }
        else
        {
          v30 = ccrsa_pub_crypt_ws(a1, a2, v27, v28);
          if (!v30)
          {
            ccn_swap(v22, (unint64_t *)v27);
            v24 = ccrsa_emsa_pss_decode_canary_out_ws(a1, (uint64_t)a3, v29, a9, a5, v26, v20 - 1, (unsigned __int8 *)v27 + v25, &v31);
            v30 = v24 ^ 0x3A ^ BYTE8(v31) ^ BYTE4(v31) ^ BYTE3(v31) ^ BYTE13(v31) ^ HIBYTE(v31) ^ BYTE10(v31) ^ BYTE1(v31) ^ BYTE11(v31) ^ BYTE14(v31) ^ BYTE6(v31) ^ BYTE2(v31) ^ BYTE9(v31) ^ BYTE12(v31) ^ v31 ^ BYTE7(v31) ^ BYTE5(v31);
            if (a10)
              *(_OWORD *)a10 = v31;
          }
        }
        *(_QWORD *)(a1 + 16) = v23;
        return v30;
      }
      else
      {
        return 4294967268;
      }
    }
  }
  return result;
}

uint64_t ccrsa_verify_pss_msg_ws(uint64_t a1, uint64_t *a2, size_t *a3, uint64_t a4, size_t a5, char *a6, unint64_t a7, unsigned __int8 *a8, uint64_t a9, _QWORD *a10)
{
  char v17[64];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C874D8];
  ccdigest((uint64_t)a3, a5, a6, (uint64_t)v17);
  return ccrsa_verify_pss_digest_ws(a1, a2, a3, a4, *a3, v17, a7, a8, a9, a10);
}

uint64_t ccrsa_verify_pss_msg(uint64_t *a1, size_t *a2, uint64_t a3, size_t a4, char *a5, unint64_t a6, unsigned __int8 *a7, uint64_t a8, _QWORD *a9)
{
  char v15;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD v31[4];
  void (*v32)(uint64_t);
  char v33;
  char v34[64];
  uint64_t v35;

  v15 = 0;
  v35 = *MEMORY[0x1E0C874D8];
  v33 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v15 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v15 = 1;
    }
  }
  v33 = v15;
  v21 = *a1;
  v22 = sizeof_struct_ccrns_mul_modulus();
  v23 = sizeof_struct_ccpolyzp_po2cyc();
  v31[0] = cc_malloc_clear(8 * ((v22 + v23 - 1) / v23 + 13 * v21) + 8);
  v24 = *a1;
  v25 = sizeof_struct_ccrns_mul_modulus();
  v26 = sizeof_struct_ccpolyzp_po2cyc();
  v31[1] = (v25 + v26 - 1) / v26 + 13 * v24 + 1;
  v31[2] = 0;
  v31[3] = cc_ws_alloc;
  v32 = cc_ws_free;
  if (v31[0])
  {
    ccdigest((uint64_t)a2, a4, a5, (uint64_t)v34);
    v27 = ccrsa_verify_pss_digest_ws((uint64_t)v31, a1, a2, a3, *a2, v34, a6, a7, a8, a9);
    v32((uint64_t)v31);
  }
  else
  {
    v27 = 4294967283;
  }
  cc_disable_dit(&v33);
  return v27;
}

uint64_t ccsrp_generate_k_ws(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t *v6;
  unint64_t *v7;

  v6 = (unint64_t *)ccdh_gp_prime(*(_QWORD *)(a2 + 8));
  v7 = (unint64_t *)ccdh_gp_g(*(_QWORD **)(a2 + 8));
  return ccsrp_digest_ccn_ccn_ws(a1, (uint64_t *)a2, a3, v6, v7, 0, (*(_DWORD *)(a2 + 24) >> 9) & 1);
}

uint64_t ccsrp_generate_u_ws(uint64_t a1, uint64_t *a2, _QWORD *a3, unint64_t *a4, unint64_t *a5)
{
  unsigned int v5;
  unint64_t v6;

  v5 = *((_DWORD *)a2 + 6);
  if ((v5 & 0x1C0) != 0)
  {
    a4 = 0;
    v6 = 4;
  }
  else
  {
    v6 = *(_QWORD *)*a2;
  }
  return ccsrp_digest_ccn_ccn_ws(a1, a2, a3, a4, a5, v6, (v5 >> 9) & 1);
}

_QWORD *ccaes_cfb8_decrypt_mode()
{
  _QWORD *v0;

  v0 = ccaes_ecb_encrypt_mode();
  ccmode_factory_cfb8_decrypt(cfb8_aes_decrypt, v0);
  return cfb8_aes_decrypt;
}

uint64_t ccmode_xts_key_sched(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  *a2 = v8;
  a2[1] = v9;
  v10 = a2 + 2;
  (*(void (**)(uint64_t, _QWORD *))(v8 + 16))(v8, a2 + 2);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v9 + 16))(v8, (unint64_t)v10 + ((*(_QWORD *)*a2 + 7) & 0xFFFFFFFFFFFFFFF8), a3, a5);
}

_BYTE *ccmode_siv_hmac_auth_backend(_QWORD *a1, size_t a2, char *a3, char a4)
{
  char v8[9];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C874D8];
  cchmac_update(*(_QWORD *)(*a1 + 56), a1 + 12, a2, a3);
  v8[0] = HIBYTE(a2);
  v8[1] = BYTE6(a2);
  v8[2] = BYTE5(a2);
  v8[3] = BYTE4(a2);
  v8[4] = BYTE3(a2);
  v8[5] = BYTE2(a2);
  v8[6] = BYTE1(a2);
  v8[7] = a2;
  v8[8] = a4;
  return cchmac_update(*(_QWORD *)(*a1 + 56), a1 + 12, 9uLL, v8);
}

uint64_t ccmode_siv_hmac_auth(_QWORD *a1, size_t a2, char *a3)
{
  uint64_t v3;
  uint64_t result;

  v3 = a1[3];
  if (v3 != 4 && v3 != 2)
    return 4294967228;
  if (!a2)
    return 4294967193;
  ccmode_siv_hmac_auth_backend(a1, a2, a3, 65);
  result = 0;
  a1[3] = 4;
  return result;
}

uint64_t ccmode_siv_hmac_auth_finalize(_QWORD *a1, size_t a2, char *a3, void *a4)
{
  rsize_t *v5;
  rsize_t v6;
  unint64_t v7;
  size_t v10;
  _BYTE __src[64];
  int v13[3];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C874D8];
  v5 = *(rsize_t **)(*a1 + 56);
  v6 = *v5;
  v7 = a1[3];
  if (v7 > 6 || ((1 << v7) & 0x54) == 0)
  {
    cc_clear(*v5, __src);
    a1[3] = 255;
    return 4294967228;
  }
  else
  {
    v10 = a1[2];
    if (a2 || v7 != 2)
    {
      ccmode_siv_hmac_auth_backend(a1, a2, a3, 80);
      cchmac_final(*(_QWORD *)(*a1 + 56), a1 + 12, (uint64_t)__src);
    }
    else
    {
      v13[0] = 67305985;
      cchmac((uint64_t)v5, a1[1] >> 1, (uint64_t)(a1 + 4), 4uLL, (char *)v13, (uint64_t)__src);
    }
    memcpy(a4, __src, v10);
    a1[3] = 5;
    cc_clear(v6, __src);
    return 0;
  }
}

uint64_t ccmode_xts_set_tweak(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  *a2 = 0;
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)(a1 + 8) + 24))(a1 + ((**(_QWORD **)a1 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, 1, a3, a2 + 1);
}

uint64_t cced448_add_points_unified_ws(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, char a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v12 = cczp_n(a2);
  v13 = *(_QWORD *)(a1 + 16);
  ccn_set(4 * v12, a3, a5);
  cczp_n(a2);
  v14 = *(_QWORD *)(a1 + 16);
  cczp_mul_ws(a1, a2);
  *(_QWORD *)(a1 + 16) = v14;
  result = cced448_add_points_unified_cached_ws(a1, a2, (uint64_t)a3, a4, (uint64_t)a3, a6);
  *(_QWORD *)(a1 + 16) = v13;
  return result;
}

uint64_t cced448_add_points_unified_cached_ws(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v10 = cczp_n(a2);
  v12 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v10);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v10);
  cczp_mul_ws(a1, a2);
  if ((a6 & 2) != 0)
    ccn_set(v10, (void *)(a3 + 24 * v10), (void *)(a4 + 24 * v10));
  else
    cczp_mul_ws(a1, a2);
  cczp_mul_ws(a1, a2);
  cczp_add_ws(a1, a2);
  if ((a6 & 1) != 0)
    cczp_sub_ws(a1, a2);
  else
    cczp_add_ws(a1, a2);
  cczp_mul_ws(a1, a2);
  cczp_mul_ws(a1, a2);
  if ((a6 & 1) != 0)
  {
    cczp_add_ws(a1, a2);
    cczp_sub_ws(a1, a2);
    cczp_add_ws(a1, a2);
    cczp_sub_ws(a1, a2);
    cczp_add_ws(a1, a2);
  }
  else
  {
    cczp_sub_ws(a1, a2);
    cczp_sub_ws(a1, a2);
    cczp_sub_ws(a1, a2);
    cczp_add_ws(a1, a2);
    cczp_sub_ws(a1, a2);
  }
  cczp_mul_ws(a1, a2);
  if ((a6 & 4) == 0)
    cczp_mul_ws(a1, a2);
  cczp_mul_ws(a1, a2);
  result = cczp_mul_ws(a1, a2);
  *(_QWORD *)(a1 + 16) = v12;
  return result;
}

uint64_t cced448_scalar_mult_ws(uint64_t a1, _QWORD *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;

  v9 = cczp_n((uint64_t)a2);
  v10 = (void *)(a6 + 16 * *a2);
  v18 = *(_QWORD *)(a1 + 16);
  v11 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4 * v9);
  v12 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4 * v9);
  cc_clear(8 * v9, v11);
  cc_clear(8 * v9, &v11[16 * v9]);
  ccn_set(v9, &v11[8 * v9], v10);
  ccn_set(v9, &v11[24 * v9], v10);
  cced25519_to_ed25519_point_ws(a1, (uint64_t)a2);
  if (a5)
  {
    v13 = 0;
    v14 = a5 - 1;
    do
    {
      v24 = v14;
      v22 = (*(_QWORD *)(a4 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14) & 1;
      ccn_cond_swap(28, v22 ^ v13, (uint64_t *)v11, v12);
      v15 = cczp_n((uint64_t)a2);
      v21 = *(_QWORD *)(a1 + 16);
      (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v15);
      (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v15);
      cczp_mul_ws(a1, (uint64_t)a2);
      cczp_mul_ws(a1, (uint64_t)a2);
      cczp_sub_ws(a1, (uint64_t)a2);
      cczp_add_ws(a1, (uint64_t)a2);
      cczp_mul_ws(a1, (uint64_t)a2);
      cczp_mul_ws(a1, (uint64_t)a2);
      cczp_mul_ws(a1, (uint64_t)a2);
      cczp_add_ws(a1, (uint64_t)a2);
      cczp_sub_ws(a1, (uint64_t)a2);
      cczp_add_ws(a1, (uint64_t)a2);
      cczp_sub_ws(a1, (uint64_t)a2);
      cczp_add_ws(a1, (uint64_t)a2);
      cczp_mul_ws(a1, (uint64_t)a2);
      cczp_mul_ws(a1, (uint64_t)a2);
      cczp_mul_ws(a1, (uint64_t)a2);
      cczp_mul_ws(a1, (uint64_t)a2);
      *(_QWORD *)(a1 + 16) = v21;
      cced448_dbl_point_ws(a1, (uint64_t)a2);
      v16 = v22;
      v14 = v24 - 1;
      v13 = v22;
    }
    while (v24);
  }
  else
  {
    v16 = 0;
  }
  ccn_mux(28, v16, (uint64_t *)v11, v12, (uint64_t *)v11);
  cced25519_from_ed25519_point_ws(a1, a2, a3, v11);
  *(_QWORD *)(a1 + 16) = v18;
  return 0;
}

uint64_t cced448_dbl_point_ws(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = cczp_n(a2);
  v6 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  cczp_sqr_ws(a1, a2);
  cczp_sqr_ws(a1, a2);
  cczp_sqr_ws(a1, a2);
  cczp_add_ws(a1, a2);
  cczp_add_ws(a1, a2);
  cczp_sqr_ws(a1, a2);
  cczp_sub_ws(a1, a2);
  cczp_sub_ws(a1, a2);
  cczp_add_ws(a1, a2);
  cczp_sub_ws(a1, a2);
  cczp_sub_ws(a1, a2);
  cczp_mul_ws(a1, a2);
  cczp_mul_ws(a1, a2);
  cczp_mul_ws(a1, a2);
  result = cczp_mul_ws(a1, a2);
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

uint64_t cced448_scalar_mult_base_masked_ws(uint64_t a1, uint64_t *a2, uint64_t (**a3)(_QWORD, uint64_t, uint64_t *), uint64_t a4, unint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v10 = cczp_n((uint64_t)a2);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 3 * v10);
  result = ccec_projectify_ws(a1, (uint64_t)a2);
  if (!(_DWORD)result)
    result = ccec_mult_blinded_ws(a1, a2, a4, a5, v12, a3);
  *(_QWORD *)(a1 + 16) = v11;
  return result;
}

void *cced448_double_scalar_mult_ws(uint64_t a1, _QWORD *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  void *result;
  uint64_t v23;
  _BYTE v25[448];
  _BYTE v26[448];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C874D8];
  v7 = cczp_n((uint64_t)a2);
  v23 = *(_QWORD *)(a1 + 16);
  v8 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4 * v7);
  v9 = 32 * v7;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 32 * v7);
  cced25519_to_ed25519_point_ws(a1, (uint64_t)a2);
  cczp_n((uint64_t)a2);
  v11 = *(_QWORD *)(a1 + 16);
  cczp_mul_ws(a1, (uint64_t)a2);
  *(_QWORD *)(a1 + 16) = v11;
  cced448_dbl_point_ws(a1, (uint64_t)a2);
  v12 = 7;
  v13 = v10;
  do
  {
    v14 = v13 + v9;
    cced448_add_points_unified_cached_ws(a1, (uint64_t)a2, v13 + v9, (uint64_t)v8, v13, 0);
    cczp_n((uint64_t)a2);
    v15 = *(_QWORD *)(a1 + 16);
    cczp_mul_ws(a1, (uint64_t)a2);
    *(_QWORD *)(a1 + 16) = v15;
    v13 = v14;
    --v12;
  }
  while (v12);
  cc_clear(8 * v7, v8);
  cc_clear(8 * v7, &v8[16 * v7]);
  ccn_seti(v7, &v8[8 * v7], 1);
  ccn_seti(v7, &v8[24 * v7], 1);
  ccn_recode_ssw(v7, a4, 4, (uint64_t)v26);
  ccn_recode_ssw(v7, a5, 4, (uint64_t)v25);
  v16 = 447;
  do
  {
    v17 = v26[v16];
    v18 = v25[v16--];
  }
  while (!(v18 | v17));
  if (v16 != -2)
  {
    v19 = v16 + 1;
    do
    {
      cced448_dbl_point_ws(a1, (uint64_t)a2);
      cced448_add_precomputed_point_ws(a1, (uint64_t)a2, (uint64_t)v8, (char)v25[v19], 4, v10, 0);
      cced448_add_precomputed_point_ws(a1, (uint64_t)a2, (uint64_t)v8, (char)v26[v19--], 3, (uint64_t)&CCED448_PRECOMPUTED_BASES, 6);
    }
    while (v19 != -1);
  }
  result = cced25519_from_ed25519_point_ws(a1, a2, a3, v8);
  *(_QWORD *)(a1 + 16) = v23;
  return result;
}

uint64_t cced448_add_precomputed_point_ws(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t result;
  int v15;

  result = cczp_n(a2);
  if (a4 >= 0)
    LOBYTE(v15) = a4;
  else
    v15 = -a4;
  if ((char)v15 >= 1)
    return cced448_add_points_unified_cached_ws(a1, a2, a3, a3, a6 + 8 * (v15 >> 1) * a5 * result, a7 | ((a4 & 0x80) >> 7));
  return result;
}

uint64_t ccder_blob_decode_bitstring(unsigned __int8 **a1, uint64_t a2, unint64_t *a3)
{
  uint64_t result;
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;

  result = ccder_blob_decode_range(a1, 3, (unsigned __int8 **)a2);
  if ((_DWORD)result)
  {
    *a3 = 0;
    v6 = *(unsigned __int8 **)a2;
    v7 = *(_QWORD *)(a2 + 8);
    if (v7 != *(_QWORD *)a2)
    {
      v8 = 8 * (~(unint64_t)v6 + v7);
      v9 = *v6;
      v10 = v8 >= v9;
      v11 = v8 - v9;
      if (v10)
        *a3 = v11;
      *(_QWORD *)a2 = v6 + 1;
    }
  }
  return result;
}

uint64_t ccss_shamir_generate_random_poly_ws(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, unint64_t, uint64_t))
{
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t result;
  unsigned int v11;
  uint64_t v12;
  char *v13;

  v6 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = 0;
    while (1)
    {
      v8 = *(_QWORD **)a2;
      v9 = (uint64_t *)ccss_shamir_poly_coefficient(a2, v7);
      result = cczp_generate_random_element_ws(a1, v8, a3, v9);
      if ((_DWORD)result)
        break;
      ++v7;
      v11 = *(_DWORD *)(a2 + 8);
      if (v7 >= v11)
        goto LABEL_7;
    }
  }
  else
  {
    v11 = 0;
LABEL_7:
    v12 = *(_QWORD *)a2;
    v13 = (char *)ccss_shamir_poly_coefficient(a2, v11);
    result = cczp_generate_non_zero_element_ws(a1, v12, a3, v13);
  }
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

uint64_t ccdh_generate_key(_QWORD *a1, uint64_t (**a2)(_QWORD, uint64_t, uint64_t *), _QWORD *a3)
{
  char v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  _QWORD *v22;
  uint64_t private_key_ws;
  unint64_t private_key_bitlen;
  _QWORD *v25;
  uint64_t v26;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t (*v30)(_QWORD *, uint64_t);
  void (*v31)(uint64_t);
  char v32;

  v6 = 0;
  v32 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v32 = v6;
  v12 = ccdh_gp_n(a1);
  v13 = sizeof_struct_cche_galois_key();
  v14 = sizeof_struct_ccpolyzp_po2cyc();
  v15 = (v13 + v14 - 1) / v14;
  v16 = CCDH_POWER_BLINDED_WORKSPACE_N(v12);
  v28[0] = cc_malloc_clear(8 * (v15 + 6 * v12 + v16));
  v17 = ccdh_gp_n(a1);
  v18 = sizeof_struct_cche_galois_key();
  v19 = sizeof_struct_ccpolyzp_po2cyc();
  v28[1] = (v18 + v19 - 1) / v19 + 6 * v17 + CCDH_POWER_BLINDED_WORKSPACE_N(v17);
  v29 = 0;
  v30 = cc_ws_alloc;
  v31 = cc_ws_free;
  if (v28[0])
  {
    v20 = (_QWORD *)ccdh_ctx_public(a3);
    ccdh_ctx_init((uint64_t)a1, v20);
    v21 = (unint64_t *)ccdh_gp_g(a1);
    v22 = &a3[ccdh_gp_n(*a3) + 2];
    private_key_ws = ccdh_generate_private_key_ws((uint64_t)v28, a1, v22, (uint64_t (**)(_QWORD, unint64_t, uint64_t))a2);
    if ((_DWORD)private_key_ws
      || (private_key_bitlen = ccdh_generate_private_key_bitlen(a1),
          private_key_ws = cczp_mm_power_ws((uint64_t)v28, a1, a3 + 2, v21, private_key_bitlen, v22),
          (_DWORD)private_key_ws)
      || (v25 = (_QWORD *)ccdh_ctx_public(a3),
          private_key_ws = ccdh_check_pub_ws((uint64_t)v28, a1, v25),
          (_DWORD)private_key_ws))
    {
      v26 = private_key_ws;
    }
    else if (ccdh_pairwise_consistency_check_ws((uint64_t)v28, a1, a2, a3))
    {
      v26 = 0;
    }
    else
    {
      v26 = 4294967242;
    }
    v29 = 0;
    v31((uint64_t)v28);
  }
  else
  {
    v26 = 4294967283;
  }
  cc_disable_dit(&v32);
  return v26;
}

uint64_t ccec_diversify_twin_scalars_ws(uint64_t a1, _QWORD *a2, char *a3, char *a4, unint64_t a5, unsigned __int8 *a6)
{
  unint64_t v12;
  uint64_t result;
  unint64_t v14;

  v12 = ccec_diversify_min_entropy_len(a2);
  result = 4294967289;
  if ((a5 & 1) == 0 && 2 * v12 <= a5)
  {
    v14 = a5 >> 1;
    result = ccec_generate_scalar_fips_extrabits_ws(a1, a2, v14, a6, a3);
    if (!(_DWORD)result)
      return ccec_generate_scalar_fips_extrabits_ws(a1, a2, v14, &a6[v14], a4);
  }
  return result;
}

BOOL ccrsa_export_pub(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  char v3;
  _BOOL8 v9;
  char v11;

  v3 = 0;
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v11 = v3;
  v9 = ccder_encode_rsa_pub(a1, a3, a3 + a2) != a3;
  cc_disable_dit(&v11);
  return v9;
}

uint64_t ccapsic_server_encode_element(uint64_t **a1, _QWORD **a2)
{
  char v4;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;

  v4 = 0;
  v16 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v16 = v4;
  v10 = *a1;
  v11 = **a1;
  v12 = cch2c((uint64_t)a1[2], (uint64_t)a1[3]);
  if ((_DWORD)v12
    || (v13 = (uint64_t)&(&a1[6 * v11 + 24])[2 * v11],
        v12 = ccec_projectify(v10, v13, (uint64_t)(a2 + 2), (uint64_t)a1[1]),
        (_DWORD)v12)
    || (v12 = ccec_mult_blinded(v10, (uint64_t)(a2 + 2), (unint64_t *)&(&a1[12 * **a1 + 24])[2 * **a1], v13, (uint64_t (**)(_QWORD, uint64_t, uint64_t *))a1[1]), (_DWORD)v12))
  {
    v14 = v12;
  }
  else
  {
    v14 = ccec_affinify(v10, (uint64_t)(a2 + 2), (uint64_t)(a2 + 2));
    if (!(_DWORD)v14)
      ccn_seti(*v10, &a2[2 * **a2 + 2], 1);
  }
  cc_disable_dit(&v16);
  return v14;
}

BOOL ccz_is_one(uint64_t a1)
{
  char v2;
  uint64_t v8;
  _BOOL8 v9;
  char v11;

  v2 = 0;
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v11 = v2;
  v8 = ccz_n(a1);
  v9 = ccn_n(v8, *(_QWORD *)(a1 + 24)) == 1 && **(_QWORD **)(a1 + 24) == 1;
  cc_disable_dit(&v11);
  return v9;
}

uint64_t ccmode_cfb_decrypt(_QWORD *a1, uint64_t a2, char *a3, _BYTE *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v5 = a1[1];
  if (a2)
  {
    v8 = a2;
    v9 = *a1;
    v10 = (unint64_t)(*(_QWORD *)(*a1 + 8) + 7) >> 3;
    v11 = a1 + 2;
    v12 = (uint64_t)&a1[2 * v10 + 2];
    v13 = (uint64_t)&a1[v10 + 2];
    do
    {
      if (v5 == *(_QWORD *)(v9 + 8))
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(v9 + 24))(v12, 1, v13, a1 + 2);
        v5 = 0;
      }
      *(_BYTE *)(v13 + v5) = *a3;
      v14 = *a3++;
      v15 = v5 + 1;
      *a4++ = *((_BYTE *)v11 + v5++) ^ v14;
      --v8;
    }
    while (v8);
  }
  else
  {
    v15 = a1[1];
  }
  a1[1] = v15;
  return 0;
}

uint64_t cccurve25519_internal(uint64_t a1, char *a2, __int128 *a3, uint64_t *a4, uint64_t (**a5)(_QWORD, uint64_t, void *))
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char v26;
  unint64_t i;
  char v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  rsize_t __n;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char *v38;
  void *v39;
  char *__dst;
  _QWORD *v41;
  void *v42;
  __int128 v43;
  uint64_t (*v44)(void **, uint64_t);
  void (*v45)(uint64_t);
  uint64_t v46;
  _OWORD v47[2];
  __int128 __src;
  __int128 v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C874D8];
  v42 = cc_malloc_clear(0x200uLL);
  v43 = xmmword_1DEE21F50;
  v44 = (uint64_t (*)(void **, uint64_t))cc_ws_alloc;
  v45 = cc_ws_free;
  if (!v42)
    return 4294967283;
  v10 = cczp_n(a1);
  v11 = (void *)cc_ws_alloc(&v42, v10);
  v12 = v44(&v42, v10);
  __dst = (char *)v44(&v42, v10);
  v41 = (_QWORD *)v44(&v42, v10);
  v13 = v44(&v42, v10);
  v14 = (uint64_t *)v44(&v42, v10);
  v15 = (*a5)(a5, 32, v11);
  if ((_DWORD)v15 || (v39 = (void *)v12, v15 = (*a5)(a5, 32, (void *)v12), (_DWORD)v15))
  {
    v32 = v15;
  }
  else
  {
    v36 = (uint64_t *)v13;
    v38 = a2;
    v46 = 0;
    (*a5)(a5, 8, &v46);
    ccn_mux_seed_mask(v46);
    v16 = a3[1];
    __src = *a3;
    v49 = v16;
    LOBYTE(__src) = __src & 0xF8;
    HIBYTE(v49) = HIBYTE(v16) & 0x3F | 0x40;
    if (v10)
    {
      memcpy(__dst, &__src, 8 * v10);
      v17 = v41;
      v18 = v10;
      do
      {
        v19 = *a4++;
        *v17++ = v19;
        --v18;
      }
      while (v18);
    }
    v37 = v10;
    ccn_set_bit((uint64_t)v41, 0xFFuLL, 0);
    cczp_to_ws((uint64_t)&v42, a1);
    cczp_mul_ws((uint64_t)&v42, a1);
    v20 = cczp_n(a1);
    v35 = *((_QWORD *)&v43 + 1);
    v21 = (char *)v44(&v42, 2 * v20);
    v22 = &v21[8 * v20];
    v23 = (char *)v44(&v42, 2 * v20);
    v24 = &v23[8 * v20];
    v44(&v42, v20);
    v25 = v44(&v42, v20);
    cc_clear(8 * v20, v24);
    ccn_set(v20, v22, v11);
    ccn_set(v20, v21, v41);
    __n = v20;
    ccn_set(v20, v23, v39);
    v26 = 0;
    for (i = 254; i != -1; --i)
    {
      v28 = v26;
      v26 = (*(_QWORD *)&__dst[(i >> 3) & 0x1FFFFFFFFFFFFFF8] >> i) & 1;
      ccn_cond_swap(8, v26 ^ v28, (uint64_t *)v21, (uint64_t *)v23);
      cczp_sub_ws((uint64_t)&v42, a1);
      cczp_sub_ws((uint64_t)&v42, a1);
      cczp_add_ws((uint64_t)&v42, a1);
      cczp_add_ws((uint64_t)&v42, a1);
      cczp_mul_ws((uint64_t)&v42, a1);
      cczp_mul_ws((uint64_t)&v42, a1);
      cczp_sqr_ws((uint64_t)&v42, a1);
      cczp_sqr_ws((uint64_t)&v42, a1);
      cczp_add_ws((uint64_t)&v42, a1);
      cczp_sub_ws((uint64_t)&v42, a1);
      cczp_mul_ws((uint64_t)&v42, a1);
      cczp_sub_ws((uint64_t)&v42, a1);
      cczp_sqr_ws((uint64_t)&v42, a1);
      ccec25519_mul121666_ws((uint64_t)&v42, a1, v22, v25);
      cczp_sqr_ws((uint64_t)&v42, a1);
      cczp_mul_ws((uint64_t)&v42, a1);
      cczp_add_ws((uint64_t)&v42, a1);
      cczp_mul_ws((uint64_t)&v42, a1);
      cczp_mul_ws((uint64_t)&v42, a1);
    }
    ccn_mux(__n, v26, v36, (uint64_t *)v21, (uint64_t *)v23);
    ccn_mux(__n, v26, v14, (uint64_t *)v22, (uint64_t *)v24);
    *((_QWORD *)&v43 + 1) = v35;
    cczp_inv_ws((uint64_t)&v42, a1);
    cczp_mul_ws((uint64_t)&v42, a1);
    cczp_from_ws((uint64_t)&v42, a1);
    v29 = v37;
    if (v37)
    {
      v30 = v38 + 3;
      do
      {
        v31 = *v14++;
        *(_QWORD *)(v30 - 3) = v31;
        v30 += 8;
        --v29;
      }
      while (v29);
    }
    memset(v47, 0, sizeof(v47));
    if (cc_cmp_safe(32, v38, (char *)v47))
      v32 = 0;
    else
      v32 = 4294967289;
  }
  *((_QWORD *)&v43 + 1) = 0;
  v45((uint64_t)&v42);
  return v32;
}

uint64_t cccurve25519_with_rng(uint64_t (**a1)(_QWORD, uint64_t, void *), char *a2, __int128 *a3, uint64_t *a4)
{
  char v8;
  uint64_t v14;
  uint64_t v15;
  char v17;

  v8 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v17 = v8;
  v14 = ccec_cp_x25519();
  v15 = cccurve25519_internal(v14, a2, a3, a4, a1);
  cc_disable_dit(&v17);
  return v15;
}

uint64_t cccurve25519(char *a1, __int128 *a2, uint64_t *a3)
{
  char v6;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char v17;

  v6 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v17 = v6;
  v12 = ccrng(0);
  if (v12)
  {
    v13 = v12;
    v14 = ccec_cp_x25519();
    v15 = cccurve25519_internal(v14, a1, a2, a3, (uint64_t (**)(_QWORD, uint64_t, void *))v13);
  }
  else
  {
    v15 = 0xFFFFFFFFLL;
  }
  cc_disable_dit(&v17);
  return v15;
}

uint64_t cccurve25519_make_priv(uint64_t (**a1)(_QWORD, uint64_t, _BYTE *), _BYTE *a2)
{
  char v3;
  uint64_t v9;
  char v11;

  v3 = 0;
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v11 = v3;
  v9 = (*a1)(a1, 32, a2);
  if (!(_DWORD)v9)
  {
    *a2 &= 0xF8u;
    a2[31] = a2[31] & 0x3F | 0x40;
  }
  cc_disable_dit(&v11);
  return v9;
}

uint64_t cccurve25519_make_pub_with_rng(uint64_t (**a1)(_QWORD, uint64_t, void *), char *a2, __int128 *a3)
{
  char v6;
  uint64_t v12;
  uint64_t v13;
  char v15;

  v6 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v15 = v6;
  v12 = ccec_cp_x25519();
  v13 = cccurve25519_internal(v12, a2, a3, kX25519BasePoint, a1);
  cc_disable_dit(&v15);
  return v13;
}

uint64_t cccurve25519_make_pub(char *a1, __int128 *a2)
{
  char v4;
  uint64_t *v10;
  uint64_t pub_with_rng;
  char v13;

  v4 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v13 = v4;
  v10 = ccrng(0);
  if (v10)
    pub_with_rng = cccurve25519_make_pub_with_rng((uint64_t (**)(_QWORD, uint64_t, void *))v10, a1, a2);
  else
    pub_with_rng = 0xFFFFFFFFLL;
  cc_disable_dit(&v13);
  return pub_with_rng;
}

uint64_t cccurve25519_make_key_pair(uint64_t (**a1)(_QWORD, uint64_t, void *), char *a2, __int128 *a3)
{
  char v6;
  uint64_t priv;
  uint64_t v13;
  char v15;

  v6 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v15 = v6;
  priv = cccurve25519_make_priv((uint64_t (**)(_QWORD, uint64_t, _BYTE *))a1, a3);
  if (!(_DWORD)priv)
    priv = cccurve25519_make_pub_with_rng(a1, a2, a3);
  v13 = priv;
  cc_disable_dit(&v15);
  return v13;
}

_BYTE *ccdh_export_pub(_QWORD *a1, char *a2)
{
  char v4;
  unint64_t v10;
  uint64_t v11;
  char v13;

  v4 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v13 = v4;
  v10 = ccdh_export_pub_size((_QWORD **)a1);
  v11 = ccdh_gp_n(*a1);
  ccn_write_uint_padded_ct(v11, a1 + 2, v10, a2);
  return cc_disable_dit(&v13);
}

void *ccdes3_ecb_encrypt_mode()
{
  return &ccdes3_ltc_ecb_encrypt_mode;
}

uint64_t ccapsic_server_determine_intersection(uint64_t **a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  char v8;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  char v23;

  v8 = 0;
  v23 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v23 = v8;
  v14 = *a1;
  v15 = **a1;
  v16 = (uint64_t)&(&a1[6 * v15 + 24])[2 * v15];
  v17 = a3 + 16;
  if (ccec_projectify(*a1, v16, a3 + 16, (uint64_t)a1[1])
    || ccec_mult_blinded(v14, a3 + 16, (unint64_t *)&(&a1[12 * **a1 + 24])[2 * **a1], v16, (uint64_t (**)(_QWORD, uint64_t, uint64_t *))a1[1]))
  {
    v21 = 0;
  }
  else
  {
    v18 = ccec_affinify(v14, a3 + 16, a3 + 16);
    if ((_DWORD)v18)
    {
      v21 = v18;
    }
    else
    {
      v19 = ccn_cmp(v15, (unint64_t *)(a3 + 16), (unint64_t *)(a4 + 16));
      v20 = ccn_cmp(v15, (unint64_t *)(v17 + 8 * **(_QWORD **)a3), (unint64_t *)(a4 + 16 + 8 * **(_QWORD **)a4));
      v21 = 0;
      *a2 = (((v20 | v19 | ((unint64_t)(int)(v20 | v19) >> 32)) + 0xFFFFFFFF) >> 32) ^ 1;
    }
  }
  cc_disable_dit(&v23);
  return v21;
}

uint64_t cced25519_make_pub(_QWORD *a1, uint64_t a2, char *a3)
{
  char v6;
  uint64_t *v12;
  uint64_t pub_internal;
  char v15;

  v6 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v15 = v6;
  v12 = ccrng(0);
  if (v12)
    pub_internal = cced25519_make_pub_internal(a1, (void (**)(_QWORD, uint64_t, int8x16_t *))v12, a2, a3);
  else
    pub_internal = 0xFFFFFFFFLL;
  cc_disable_dit(&v15);
  return pub_internal;
}

uint64_t cced25519_make_pub_internal(_QWORD *a1, void (**a2)(_QWORD, uint64_t, int8x16_t *), uint64_t a3, char *a4)
{
  _OWORD v7[10];
  int8x16_t __s;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C874D8];
  if (*a1 != 64)
    return 4294967289;
  ccdigest((uint64_t)a1, 0x20uLL, a4, (uint64_t)&__s);
  __s.i8[0] &= 0xF8u;
  v9 = v9 & 0x3F | 0x40;
  memset(v7, 0, sizeof(v7));
  ge_scalarmult_base_masked((uint64_t)v7, &__s, a2);
  ge_p3_tobytes(a3, (int *)v7);
  cc_clear(0x40uLL, &__s);
  return 0;
}

uint64_t cced25519_make_pub_with_rng(_QWORD *a1, void (**a2)(_QWORD, uint64_t, int8x16_t *), uint64_t a3, char *a4)
{
  char v4;
  uint64_t pub_internal;
  char v12;

  v4 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v12 = v4;
  pub_internal = cced25519_make_pub_internal(a1, a2, a3, a4);
  cc_disable_dit(&v12);
  return pub_internal;
}

uint64_t cced25519_make_key_pair(_QWORD *a1, void (**a2)(_QWORD, uint64_t, int8x16_t *), uint64_t a3, char *a4)
{
  char v8;
  uint64_t pub_internal;
  uint64_t v15;
  char v17;

  v8 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v17 = v8;
  pub_internal = ((uint64_t (*)(_QWORD, uint64_t, char *))*a2)(a2, 32, a4);
  if (!(_DWORD)pub_internal)
    pub_internal = cced25519_make_pub_internal(a1, a2, a3, a4);
  v15 = pub_internal;
  cc_disable_dit(&v17);
  return v15;
}

uint64_t ccec_import_affine_point(unint64_t *a1, int a2, uint64_t a3, unsigned __int8 *a4, unint64_t *a5)
{
  char v10;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[4];
  void (*v20)(uint64_t);
  char v21;

  v10 = 0;
  v21 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v21 = v10;
  v16 = 17 * *a1;
  v19[0] = cc_malloc_clear(136 * *a1);
  v19[1] = v16;
  v19[2] = 0;
  v19[3] = cc_ws_alloc;
  v20 = cc_ws_free;
  if (v19[0])
  {
    v17 = ccec_import_affine_point_ws((uint64_t)v19, a1, a2, a3, a4, a5);
    v20((uint64_t)v19);
  }
  else
  {
    v17 = 4294967283;
  }
  cc_disable_dit(&v21);
  return v17;
}

void *cced25519_full_add_ws(uint64_t a1, _QWORD *a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *result;

  v6 = cczp_n((uint64_t)a2);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = 4 * v6;
  v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4 * v6);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v8);
  cced25519_to_ed25519_point_ws(a1, (uint64_t)a2);
  cced25519_to_ed25519_point_ws(a1, (uint64_t)a2);
  cced25519_add_points_unified_ws(a1, (uint64_t)a2, v9, v10, v9, 4);
  result = cced25519_from_ed25519_point_ws(a1, a2, a3, (char *)v9);
  *(_QWORD *)(a1 + 16) = v7;
  return result;
}

uint64_t ccn_shift_right_multi(uint64_t a1, int8x16_t *a2, int8x16_t *a3, unint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = ccn_shift_right(a1, a2, a3, a4 & 0x3F);
  if (a1)
  {
    v8 = 0;
    do
    {
      v9 = 0;
      v10 = v8;
      do
      {
        v9 |= ((((v10 ^ ((_DWORD)v8 + (a4 >> 6)) | ((v10 ^ (v8 + (a4 >> 6))) >> 32))
               + 0xFFFFFFFF) >> 32)
             - 1) & a2->i64[v10];
        ++v10;
      }
      while (a1 != v10);
      a2->i64[v8++] = v9;
    }
    while (v8 != a1);
  }
  return result;
}

unint64_t ccwrap_auth_decrypt(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, size_t *a5, char *a6)
{
  char v6;
  unint64_t v12;
  unint64_t v14;
  char v15;

  v6 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v15 = v6;
  v14 = 0xA6A6A6A6A6A6A6A6;
  v12 = ccwrap_auth_decrypt_withiv(a1, a2, a3, a4, a5, a6, (char *)&v14);
  cc_disable_dit(&v15);
  return v12;
}

unint64_t ccz_write_int_size(uint64_t a1)
{
  char v2;
  uint64_t v8;
  unint64_t v9;
  char v11;

  v2 = 0;
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v11 = v2;
  v8 = ccz_n(a1);
  v9 = ccn_write_int_size(v8, *(unint64_t **)(a1 + 24));
  cc_disable_dit(&v11);
  return v9;
}

_BYTE *ccz_write_int(uint64_t a1, unint64_t a2, _BYTE *a3)
{
  char v6;
  unint64_t v12;
  char v14;

  v6 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v14 = v6;
  v12 = ccz_n(a1);
  ccn_write_int(v12, *(unint64_t **)(a1 + 24), a2, a3);
  return cc_disable_dit(&v14);
}

uint64_t AccelerateCrypto_ecb_AES_decrypt(int8x16_t *a1, int a2, uint64_t a3, int8x16_t *a4)
{
  uint64_t v4;
  int8x16_t v5;
  int i;
  uint64_t v9;
  BOOL v21;
  int v26;
  uint64_t v28;

  v4 = a1[15].u32[0];
  v5 = *a1;
  _VF = __OFSUB__(a2, 4);
  for (i = a2 - 4; i < 0 == _VF; i -= 4)
  {
    a3 += 64;
    _Q4 = *(__int128 *)((char *)a1 + v4);
    v9 = v4 - 16;
    do
    {
      __asm
      {
        AESD            V0.16B, V4.16B
        AESIMC          V0.16B, V0.16B
        AESD            V1.16B, V4.16B
        AESIMC          V1.16B, V1.16B
        AESD            V2.16B, V4.16B
        AESIMC          V2.16B, V2.16B
        AESD            V3.16B, V4.16B
        AESIMC          V3.16B, V3.16B
      }
      _Q4 = *(__int128 *)((char *)a1 + v9);
      v21 = v9 <= 16;
      v9 -= 16;
    }
    while (!v21);
    __asm
    {
      AESD            V0.16B, V4.16B
      AESD            V1.16B, V4.16B
      AESD            V2.16B, V4.16B
      AESD            V3.16B, V4.16B
    }
    *a4 = veorq_s8(_Q0, v5);
    a4[1] = veorq_s8(_Q1, v5);
    a4[2] = veorq_s8(_Q2, v5);
    a4[3] = veorq_s8(_Q3, v5);
    a4 += 4;
    _VF = __OFSUB__(i, 4);
  }
  v26 = i & 3;
  if (v26)
  {
    do
    {
      a3 += 16;
      _Q4 = *(__int128 *)((char *)a1 + v4);
      v28 = v4 - 16;
      do
      {
        __asm
        {
          AESD            V0.16B, V4.16B
          AESIMC          V0.16B, V0.16B
        }
        _Q4 = *(__int128 *)((char *)a1 + v28);
        v21 = v28 <= 16;
        v28 -= 16;
      }
      while (!v21);
      __asm { AESD            V0.16B, V4.16B }
      *a4++ = veorq_s8(_Q0, v5);
      _VF = __OFSUB__(v26--, 1);
    }
    while (!((v26 < 0) ^ _VF | (v26 == 0)));
  }
  return 0;
}

unint64_t md4_compress(unint64_t result, uint64_t a2, _DWORD *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  unint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  unint64_t v86;
  unsigned int v87;
  int v88;
  int v89;
  unint64_t v90;
  unsigned int v91;
  int v92;
  int v93;
  unint64_t v94;
  unsigned int v95;
  int v96;
  unint64_t v97;
  unsigned int v98;
  int v99;
  int v100;
  unint64_t v101;
  unsigned int v102;
  int v103;
  int v104;
  unint64_t v105;
  unsigned int v106;
  int v107;
  unint64_t v108;
  unsigned int v109;
  int v110;
  unint64_t v111;
  unsigned int v112;
  int v113;
  unint64_t v114;
  unsigned int v115;
  int v116;
  unint64_t v117;
  unsigned int v118;
  int v119;
  int v120;
  unint64_t v121;
  unsigned int v122;
  int v123;
  unint64_t v124;
  unsigned int v125;
  int v126;
  int v127;
  unint64_t v128;
  unsigned int v129;
  int v130;
  int v131;
  unint64_t v132;
  unsigned int v133;
  int v134;
  unint64_t v135;
  int v136;
  _DWORD *v137;
  int v138;
  int v139;
  unsigned int v140;
  uint64_t v141;

  v137 = (_DWORD *)result;
  if (a2)
  {
    v3 = *(_DWORD *)result;
    v4 = *(_DWORD *)(result + 4);
    v5 = *(_DWORD *)(result + 8);
    v6 = *(_DWORD *)(result + 12);
    do
    {
      v141 = a2;
      v7 = a3[1];
      v8 = a3[2];
      v9 = a3[4];
      v10 = a3[6];
      v139 = a3[7];
      v140 = a3[3];
      HIDWORD(v12) = (v5 & v4 | v6 & ~v4) + v3 + *a3;
      LODWORD(v12) = HIDWORD(v12);
      v11 = v12 >> 29;
      v14 = a3[8];
      v13 = a3[9];
      LODWORD(v12) = v7 + v6 + (v4 & __ROR4__(HIDWORD(v12), 29) | v5 & ~__ROR4__(HIDWORD(v12), 29));
      HIDWORD(v12) = v12;
      v15 = v12 >> 25;
      v16 = v8 + v5 + (v11 & __ROR4__(v12, 25) | v4 & ~__ROR4__(v12, 25));
      v17 = v11 & ~__ROR4__(v16, 21);
      v19 = __PAIR64__(v16, __ROR4__(v16, 21));
      v18 = v15 & v19;
      LODWORD(v19) = v16;
      v20 = v19 >> 21;
      HIDWORD(v19) = v140 + v4 + (v18 | v17);
      LODWORD(v19) = HIDWORD(v19);
      v21 = v19 >> 13;
      LODWORD(v19) = v9 + v11 + (v20 & __ROR4__(HIDWORD(v19), 13) | v15 & ~__ROR4__(HIDWORD(v19), 13));
      HIDWORD(v19) = v19;
      v22 = v19 >> 29;
      v138 = a3[5];
      v24 = a3[10];
      v23 = a3[11];
      HIDWORD(v19) = v15 + v138 + (v21 & __ROR4__(v19, 29) | v20 & ~__ROR4__(v19, 29));
      LODWORD(v19) = HIDWORD(v19);
      v25 = v19 >> 25;
      v26 = v20 + v10 + (v22 & __ROR4__(HIDWORD(v19), 25) | v21 & ~__ROR4__(HIDWORD(v19), 25));
      v28 = __PAIR64__(v26, __ROR4__(v26, 21));
      v27 = v25 & v28;
      LODWORD(v28) = v26;
      v29 = v28 >> 21;
      HIDWORD(v28) = v21 + v139 + (v27 | v22 & ~__ROR4__(v26, 21));
      LODWORD(v28) = HIDWORD(v28);
      v30 = v28 >> 13;
      LODWORD(v28) = v22 + v14 + (v29 & __ROR4__(HIDWORD(v28), 13) | v25 & ~__ROR4__(HIDWORD(v28), 13));
      HIDWORD(v28) = v28;
      v31 = v28 >> 29;
      v33 = a3[12];
      v32 = a3[13];
      HIDWORD(v28) = v25 + v13 + (v30 & __ROR4__(v28, 29) | v29 & ~__ROR4__(v28, 29));
      LODWORD(v28) = HIDWORD(v28);
      v34 = v28 >> 25;
      v35 = v29 + v24 + (v31 & __ROR4__(HIDWORD(v28), 25) | v30 & ~__ROR4__(HIDWORD(v28), 25));
      v36 = v31 & ~__ROR4__(v35, 21);
      v38 = __PAIR64__(v35, __ROR4__(v35, 21));
      v37 = v34 & v38;
      LODWORD(v38) = v35;
      v39 = v38 >> 21;
      HIDWORD(v38) = v30 + v23 + (v37 | v36);
      LODWORD(v38) = HIDWORD(v38);
      v40 = v38 >> 13;
      LODWORD(v38) = v31 + v33 + (v39 & __ROR4__(HIDWORD(v38), 13) | v34 & ~__ROR4__(HIDWORD(v38), 13));
      HIDWORD(v38) = v38;
      v41 = v38 >> 29;
      v42 = v34 + v32;
      v43 = a3[14];
      v44 = a3[15];
      v45 = v42 + (v40 & __ROR4__(v38, 29) | v39 & ~__ROR4__(v38, 29));
      HIDWORD(v38) = v45;
      LODWORD(v38) = v45;
      v46 = v38 >> 25;
      v47 = v39 + v43 + (v41 & __ROR4__(v45, 25) | v40 & ~__ROR4__(v45, 25));
      v48 = v40 + v44 + (v46 & __ROR4__(v47, 21) | v41 & ~__ROR4__(v47, 21));
      HIDWORD(v38) = v48;
      LODWORD(v38) = v48;
      v49 = v38 >> 13;
      LODWORD(v38) = *a3 + 1518500249 + v41 + ((v49 | __ROR4__(v47, 21)) & __ROR4__(v45, 25) | v49 & __ROR4__(v47, 21));
      v50 = v38;
      HIDWORD(v38) = v38;
      v51 = v38 >> 29;
      v52 = v9 + 1518500249 + v46 + ((v51 | __ROR4__(v48, 13)) & __ROR4__(v47, 21) | v51 & __ROR4__(v48, 13));
      HIDWORD(v38) = v52;
      LODWORD(v38) = v52;
      v53 = v38 >> 27;
      v55 = __PAIR64__(v47, __ROR4__(v50, 29));
      v54 = v53 | v55;
      LODWORD(v55) = v47;
      v56 = v14 + 1518500249 + (v55 >> 21) + (v54 & __ROR4__(v48, 13) | v53 & __ROR4__(v50, 29));
      HIDWORD(v55) = v56;
      LODWORD(v55) = v56;
      v57 = v55 >> 23;
      v58 = v33 + 1518500249 + v49 + ((v57 | __ROR4__(v52, 27)) & __ROR4__(v50, 29) | v57 & __ROR4__(v52, 27));
      HIDWORD(v55) = v58;
      LODWORD(v55) = v58;
      v59 = v55 >> 19;
      v60 = v7 + 1518500249 + v51 + ((v59 | __ROR4__(v56, 23)) & __ROR4__(v52, 27) | v59 & __ROR4__(v56, 23));
      HIDWORD(v55) = v60;
      LODWORD(v55) = v60;
      v61 = v55 >> 29;
      v62 = v138 + 1518500249 + v53 + ((v61 | __ROR4__(v58, 19)) & __ROR4__(v56, 23) | v61 & __ROR4__(v58, 19));
      HIDWORD(v55) = v62;
      LODWORD(v55) = v62;
      v63 = v55 >> 27;
      v64 = v13 + 1518500249 + v57 + ((v63 | __ROR4__(v60, 29)) & __ROR4__(v58, 19) | v63 & __ROR4__(v60, 29));
      HIDWORD(v55) = v64;
      LODWORD(v55) = v64;
      v65 = v55 >> 23;
      v66 = v32 + 1518500249 + v59 + ((v65 | __ROR4__(v62, 27)) & __ROR4__(v60, 29) | v65 & __ROR4__(v62, 27));
      HIDWORD(v55) = v66;
      LODWORD(v55) = v66;
      v67 = v55 >> 19;
      v68 = v8 + 1518500249 + v61 + ((v67 | __ROR4__(v64, 23)) & __ROR4__(v62, 27) | v67 & __ROR4__(v64, 23));
      HIDWORD(v55) = v68;
      LODWORD(v55) = v68;
      v69 = v55 >> 29;
      v70 = v10 + 1518500249 + v63 + ((v69 | __ROR4__(v66, 19)) & __ROR4__(v64, 23) | v69 & __ROR4__(v66, 19));
      HIDWORD(v55) = v70;
      LODWORD(v55) = v70;
      v71 = v55 >> 27;
      v72 = v24 + 1518500249 + v65 + ((v71 | __ROR4__(v68, 29)) & __ROR4__(v66, 19) | v71 & __ROR4__(v68, 29));
      HIDWORD(v55) = v72;
      LODWORD(v55) = v72;
      v73 = v55 >> 23;
      v74 = v43 + 1518500249 + v67 + ((v73 | __ROR4__(v70, 27)) & __ROR4__(v68, 29) | v73 & __ROR4__(v70, 27));
      HIDWORD(v55) = v74;
      LODWORD(v55) = v74;
      v75 = v55 >> 19;
      result = v140;
      v76 = v140 + 1518500249 + v69 + ((v75 | __ROR4__(v72, 23)) & __ROR4__(v70, 27) | v75 & __ROR4__(v72, 23));
      HIDWORD(v55) = v76;
      LODWORD(v55) = v76;
      v77 = v55 >> 29;
      v78 = v139 + 1518500249 + v71 + ((v77 | __ROR4__(v74, 19)) & __ROR4__(v72, 23) | v77 & __ROR4__(v74, 19));
      HIDWORD(v55) = v78;
      LODWORD(v55) = v78;
      v79 = v55 >> 27;
      v80 = v23 + 1518500249 + v73 + ((v79 | __ROR4__(v76, 29)) & __ROR4__(v74, 19) | v79 & __ROR4__(v76, 29));
      HIDWORD(v55) = v80;
      LODWORD(v55) = v80;
      v81 = v55 >> 23;
      v82 = v44 + 1518500249 + v75 + ((v81 | __ROR4__(v78, 27)) & __ROR4__(v76, 29) | v81 & __ROR4__(v78, 27));
      HIDWORD(v55) = v82;
      LODWORD(v55) = v82;
      v83 = v55 >> 19;
      v84 = v83 ^ __ROR4__(v80, 23);
      v85 = *a3 + 1859775393 + v77 + (v84 ^ __ROR4__(v78, 27));
      v86 = __PAIR64__(v85, __ROR4__(v85, 29));
      v87 = v14 + 1859775393 + v79 + (v84 ^ v86);
      v88 = v9 + 1859775393 + v81;
      LODWORD(v86) = v85;
      v89 = v86 >> 29;
      v90 = __PAIR64__(v87, __ROR4__(v87, 23));
      v91 = v88 + (v89 ^ __ROR4__(v82, 19) ^ v90);
      v92 = v8 + 1859775393 + v89;
      LODWORD(v90) = v87;
      v93 = v90 >> 23;
      v94 = __PAIR64__(v91, __ROR4__(v91, 21));
      v95 = v33 + 1859775393 + v83 + (v93 ^ __ROR4__(v85, 29) ^ v94);
      LODWORD(v94) = v91;
      v96 = v94 >> 21;
      v97 = __PAIR64__(v95, __ROR4__(v95, 17));
      v98 = v92 + (v96 ^ __ROR4__(v87, 23) ^ v97);
      v99 = v24 + 1859775393 + v93;
      LODWORD(v97) = v95;
      v100 = v97 >> 17;
      v101 = __PAIR64__(v98, __ROR4__(v98, 29));
      v102 = v99 + (v100 ^ __ROR4__(v91, 21) ^ v101);
      v103 = v10 + 1859775393 + v96;
      LODWORD(v101) = v98;
      v104 = v101 >> 29;
      v105 = __PAIR64__(v102, __ROR4__(v102, 23));
      v106 = v103 + (v104 ^ __ROR4__(v95, 17) ^ v105);
      LODWORD(v105) = v102;
      v107 = v105 >> 23;
      v108 = __PAIR64__(v106, __ROR4__(v106, 21));
      v109 = v43 + 1859775393 + v100 + (v107 ^ __ROR4__(v98, 29) ^ v108);
      LODWORD(v108) = v106;
      v110 = v108 >> 21;
      v111 = __PAIR64__(v109, __ROR4__(v109, 17));
      v112 = v7 + 1859775393 + v104 + (v110 ^ __ROR4__(v102, 23) ^ v111);
      LODWORD(v111) = v109;
      v113 = v111 >> 17;
      v114 = __PAIR64__(v112, __ROR4__(v112, 29));
      v115 = v13 + 1859775393 + v107 + (v113 ^ __ROR4__(v106, 21) ^ v114);
      LODWORD(v114) = v112;
      v116 = v114 >> 29;
      v117 = __PAIR64__(v115, __ROR4__(v115, 23));
      v118 = v138 + 1859775393 + v110 + (v116 ^ __ROR4__(v109, 17) ^ v117);
      v119 = v32 + 1859775393 + v113;
      LODWORD(v117) = v115;
      v120 = v117 >> 23;
      v121 = __PAIR64__(v118, __ROR4__(v118, 21));
      v122 = v119 + (v120 ^ __ROR4__(v112, 29) ^ v121);
      LODWORD(v121) = v118;
      v123 = v121 >> 21;
      v124 = __PAIR64__(v122, __ROR4__(v122, 17));
      v125 = v140 + 1859775393 + v116 + (v123 ^ __ROR4__(v115, 23) ^ v124);
      v126 = v23 + 1859775393 + v120;
      LODWORD(v124) = v122;
      v127 = v124 >> 17;
      v128 = __PAIR64__(v125, __ROR4__(v125, 29));
      v129 = v126 + (v127 ^ __ROR4__(v118, 21) ^ v128);
      v130 = v139 + 1859775393 + v123;
      LODWORD(v128) = v125;
      v131 = v128 >> 29;
      v132 = __PAIR64__(v129, __ROR4__(v129, 23));
      v133 = v130 + (v131 ^ __ROR4__(v122, 17) ^ v132);
      LODWORD(v132) = v129;
      v134 = v132 >> 23;
      v135 = __PAIR64__(v133, __ROR4__(v133, 21));
      v136 = v44 + 1859775393 + v127 + (v134 ^ __ROR4__(v125, 29) ^ v135);
      LODWORD(v135) = v133;
      v3 += v131;
      v5 += v135 >> 21;
      v6 += v134;
      HIDWORD(v135) = v136;
      LODWORD(v135) = v136;
      v4 += v135 >> 17;
      *v137 = v3;
      v137[1] = v4;
      v137[2] = v5;
      v137[3] = v6;
      a3 += 16;
      a2 = v141 - 1;
    }
    while (v141 != 1);
  }
  return result;
}

uint64_t CCDH_POWER_BLINDED_WORKSPACE_N(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = 2 * (a1 + 1);
  v2 = v1;
  v3 = 5 * (a1 + 1) + 3;
  v4 = 12 * (a1 + 1);
  v5 = 4 * (a1 + 1);
  if (v5 <= v1)
    v6 = 2 * (a1 + 1);
  else
    v6 = 4 * (a1 + 1);
  if (v6 <= 12 * (a1 + 1))
    v6 = 12 * (a1 + 1);
  if (v3 <= v6)
  {
    if (v5 <= v1)
      goto LABEL_22;
    if (v4 <= v5)
      v7 = 4 * (a1 + 1);
    else
      v7 = 12 * (a1 + 1);
    if (v1 > v7)
      return a1 + v1 + v2 + 5;
LABEL_15:
    if (v4 <= v5)
      v2 = 4 * (a1 + 1);
    else
      v2 = 12 * (a1 + 1);
    if (v3 > v2)
    {
      v2 = 5 * (a1 + 1) + 3;
      return a1 + v1 + v2 + 5;
    }
    if (v5 > v1)
      return a1 + v1 + v2 + 5;
    goto LABEL_26;
  }
  if (v1 > v3)
    return a1 + v1 + v2 + 5;
  if (v5 > v1)
    goto LABEL_15;
LABEL_22:
  if (v4 <= v1)
    v8 = 2 * (a1 + 1);
  else
    v8 = 12 * (a1 + 1);
  v2 = 5 * (a1 + 1) + 3;
  if (v3 <= v8)
  {
LABEL_26:
    if (v4 <= v1)
      v2 = 2 * (a1 + 1);
    else
      v2 = 12 * (a1 + 1);
  }
  return a1 + v1 + v2 + 5;
}

uint64_t ccdh_power_blinded_ws(uint64_t a1, uint64_t (**a2)(_QWORD, uint64_t, uint64_t *), _QWORD *a3, uint64_t *a4, void *a5, unint64_t a6, unint64_t *a7)
{
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t result;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C874D8];
  v12 = ccdh_gp_n(a3);
  v13 = v12 + 1;
  v24 = *(_QWORD *)(a1 + 16);
  v14 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v12 + 1);
  v15 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * (v12 + 1) + 4);
  *v15 = v12 + 1;
  if ((a6 + 63) >> 6 <= v12
    && (v16 = v15,
        v17 = (unint64_t *)ccdh_gp_prime(a3),
        (ccn_cmp(v12, (unint64_t *)a5, v17) & 0x80000000) != 0)
    && (v18 = (unint64_t *)ccdh_gp_prime(a3), (ccn_cmpn((a6 + 63) >> 6, a7, v12, v18) & 0x80000000) != 0))
  {
    result = (*a2)(a2, 16, &v26);
    if (!(_DWORD)result)
    {
      ccn_mux_seed_mask(v26);
      v26 |= 0x80000001uLL;
      v20 = ccdh_gp_prime(a3);
      v16[v12 + 3] = ccn_mul1(v12, v16 + 3, v20, v26);
      v21 = (void *)cczp_prime((uint64_t)v16);
      result = cczp_mm_init_ws(a1, v16, v13, v21);
      if (!(_DWORD)result)
      {
        ccn_set(v12, v14, a5);
        v22 = ccdh_gp_prime(a3);
        *((_QWORD *)v14 + v12) = ccn_addmul1(v12, v14, v22, v27);
        cczp_modn_ws(a1, v16, (uint64_t *)v14, v13, (char *)v14);
        cczp_to_ws(a1, (uint64_t)v16);
        result = cczp_power_blinded_ws(a1, (uint64_t)v16, v14, (unint64_t *)v14, a6, (uint64_t)a7, (uint64_t (**)(_QWORD, unint64_t, uint64_t))a2);
        if (!(_DWORD)result)
        {
          cczp_from_ws(a1, (uint64_t)v16);
          cczp_modn_ws(a1, a3, a4, v13, (char *)v14);
          result = 0;
        }
      }
    }
  }
  else
  {
    result = 4294967289;
  }
  *(_QWORD *)(a1 + 16) = v24;
  return result;
}

uint64_t ccec_rfc6637_unwrap_key(unint64_t **a1, unint64_t *a2, void *a3, char a4, _BYTE *a5, char *a6, uint64_t (**a7)(void), char *a8, unint64_t a9, unsigned __int8 *a10)
{
  char v16;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD v33[4];
  void (*v34)(uint64_t);
  char v35;

  v16 = 0;
  v35 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v16 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v16 = 1;
    }
  }
  v35 = v16;
  v22 = *a1;
  v23 = **a1;
  v24 = sizeof_struct_cche_galois_key();
  v25 = sizeof_struct_ccpolyzp_po2cyc();
  v33[0] = cc_malloc_clear(8 * ((v24 + v25 + 3 * v25 * v23 - 1) / v25 + 30 * v23 + v25 * v23) + 16 * v25 * v23 + 720);
  v26 = *v22;
  v27 = sizeof_struct_cche_galois_key();
  v28 = sizeof_struct_ccpolyzp_po2cyc();
  v33[1] = (v27 + v28 + 3 * v28 * v26 - 1) / v28 + 30 * v26 + v28 * v26 + 2 * v28 * v26 + 90;
  v33[2] = 0;
  v33[3] = cc_ws_alloc;
  v34 = cc_ws_free;
  if (v33[0])
  {
    v29 = ccec_rfc6637_unwrap_key_ws((uint64_t)v33, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    v34((uint64_t)v33);
  }
  else
  {
    v29 = 4294967283;
  }
  cc_disable_dit(&v35);
  return v29;
}

uint64_t ccec_rfc6637_unwrap_key_ws(uint64_t a1, unint64_t **a2, unint64_t *a3, void *a4, char a5, _BYTE *a6, char *a7, uint64_t (**a8)(void), char *a9, unint64_t a10, unsigned __int8 *a11)
{
  rsize_t *v19;
  unint64_t v21;
  rsize_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, unint64_t);
  uint64_t *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  void *v40;
  uint64_t v41;
  rsize_t v42;
  void *v43;
  size_t v44;
  unint64_t *v45;
  _BYTE *v46;
  unint64_t v47;
  size_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  size_t *v52;
  unsigned int v53;
  size_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t *v59;
  unint64_t v60;
  void *v61;
  char *v62;
  uint64_t v63;
  uint64_t *v64;
  _BYTE *v65;
  unint64_t *v66;
  size_t v67;
  size_t v68;
  _BYTE __s[64];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C874D8];
  v19 = (rsize_t *)(*((uint64_t (**)(void))*a8 + 2))();
  if (a10 < 5 || *v19 < *((_QWORD *)*a8 + 4))
    return 4294967289;
  v65 = a6;
  v66 = a3;
  v21 = ((unint64_t)__rev16(*(unsigned __int16 *)a11) + 7) >> 3;
  if (v21 > a10 - 3)
    return 4294967289;
  v22 = v19;
  v23 = v21 + 3 + a11[v21 + 2];
  if ((a5 & 2) != 0)
  {
    if (v23 > a10)
      return 4294967289;
LABEL_12:
    v57 = a11[v21 + 2];
    v60 = v21 + 3;
    v61 = a4;
    v26 = *a2;
    v27 = **a2;
    v59 = (uint64_t *)a8[1]();
    v28 = ccecb_context_size(v59);
    v64 = &v55;
    MEMORY[0x1E0C86820](v28, v29, v30, v31);
    v58 = (char *)&v55 - v32;
    v63 = *(_QWORD *)(a1 + 16);
    v62 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v27);
    v33 = *(uint64_t (**)(uint64_t, unint64_t))(a1 + 24);
    v56 = 24 * v27;
    v34 = (uint64_t *)v33(a1, (24 * v27 + 23) >> 3);
    *v34 = (uint64_t)v26;
    if ((((unint64_t)(cczp_bitlen((uint64_t)v26) + 7) >> 2) | 1) == v21)
    {
      v35 = ccec_import_pub_ws(a1, v26, v21, a11 + 2, v34);
    }
    else
    {
      if ((a5 & 1) == 0 || v21 > (unint64_t)(cczp_bitlen(*v34) + 7) >> 3)
      {
        v24 = 4294967289;
        goto LABEL_31;
      }
      v35 = ccec_compact_import_pub_ws(a1, v26, v21, a11 + 2, (unint64_t **)v34);
    }
    v24 = v35;
    if (!(_DWORD)v35)
    {
      v68 = (unint64_t)(cczp_bitlen((uint64_t)v26) + 7) >> 3;
      v36 = v62;
      v37 = ccecdh_compute_shared_secret_ws(a1, a2, v34, &v68, v62, 0);
      if ((_DWORD)v37)
      {
        v24 = v37;
        goto LABEL_31;
      }
      v38 = v57;
      ccec_rfc6637_kdf((uint64_t)v22, a7, (uint64_t)*a8, v68, v36, 0x14uLL, a9, (uint64_t)__s);
      v40 = v58;
      v39 = v59;
      ccecb_init((uint64_t)v59);
      cc_clear(*v22, __s);
      v41 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v56 + 90);
      v67 = v38;
      v24 = ccwrap_auth_decrypt((uint64_t)v39, (uint64_t)v40, v38, (uint64_t *)&a11[v60], &v67, (char *)v41);
      v42 = ccecb_context_size(v39);
      cc_clear(v42, v40);
      v43 = v61;
      if (!(_DWORD)v24)
      {
        v44 = v67;
        if (v67 - 1 >= v38 - 1
          || (v45 = v66,
              *v65 = *(_BYTE *)v41,
              v46 = (_BYTE *)(v41 + v44 - 1),
              v47 = *v46,
              v48 = v44 - 3,
              v49 = v48 - v47,
              v48 < v47))
        {
LABEL_32:
          v24 = 4294967294;
          goto LABEL_31;
        }
        if (*v46)
        {
          v50 = *v46;
          do
          {
            v51 = *v46--;
            if (v51 != (_DWORD)v47)
              goto LABEL_32;
          }
          while (--v50);
        }
        if (*v45 < v49)
        {
          v24 = 4294967133;
          goto LABEL_31;
        }
        *v45 = v49;
        v52 = v45;
        v53 = pgp_key_checksum(v49, (unsigned __int8 *)(v41 + 1));
        v54 = *v52 + v41;
        if (*(unsigned __int8 *)(v54 + 1) != v53 >> 8 || *(unsigned __int8 *)(v54 + 2) != v53)
          goto LABEL_32;
        memcpy(v43, (const void *)(v41 + 1), *v52);
        v24 = 0;
      }
    }
LABEL_31:
    *(_QWORD *)(a1 + 16) = v63;
    return v24;
  }
  if (v23 == a10)
    goto LABEL_12;
  return 4294967289;
}

unint64_t ccec_scalar_fips_extrabits_min_entropy_len(_QWORD *a1)
{
  return (unint64_t)(cczp_bitlen((uint64_t)&a1[5 * *a1 + 4]) + 71) >> 3;
}

uint64_t ccec_generate_scalar_fips_extrabits_ws(uint64_t a1, _QWORD *a2, unint64_t a3, unsigned __int8 *a4, char *a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  uint64_t result;

  v10 = a2 + 4;
  v11 = (uint64_t)&a2[5 * *a2 + 4];
  v12 = cczp_n(v11);
  v13 = *(_QWORD *)(a1 + 16);
  if (a3 < (unint64_t)(cczp_bitlen((uint64_t)&v10[5 * *a2]) + 71) >> 3)
  {
    result = 4294967276;
  }
  else if (a3 > 0x80)
  {
    result = 4294967289;
  }
  else
  {
    v14 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 16);
    v15 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12);
    v16 = (void *)cczp_prime(v11);
    ccn_set(v12, v15, v16);
    *v15 &= ~1uLL;
    result = ccn_read_uint(0x10uLL, v14, a3, a4);
    if (!(_DWORD)result)
    {
      ccn_divmod_ws(a1, (a3 + 7) >> 3, (uint64_t)v14, 0, 0, v12, a5, (uint64_t)v15);
      ccn_add1_ws(a1, v12, a5, (uint64_t *)a5, 1);
      result = 0;
    }
  }
  *(_QWORD *)(a1 + 16) = v13;
  return result;
}

uint64_t ccec_generate_scalar_fips_extrabits(_QWORD *a1, unint64_t a2, unsigned __int8 *a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t scalar_fips_extrabits_ws;
  _QWORD v15[4];
  void (*v16)(uint64_t);

  v8 = (uint64_t)&a1[5 * *a1 + 4];
  v9 = cczp_n(v8);
  v10 = sizeof_struct_ccpolyzp_po2cyc();
  v15[0] = cc_malloc_clear(8 * ((v10 + 127) / v10 + 4 * v9) + 24);
  v11 = cczp_n(v8);
  v12 = sizeof_struct_ccpolyzp_po2cyc();
  v15[1] = (v12 + 127) / v12 + 4 * v11 + 3;
  v15[2] = 0;
  v15[3] = cc_ws_alloc;
  v16 = cc_ws_free;
  if (!v15[0])
    return 4294967283;
  scalar_fips_extrabits_ws = ccec_generate_scalar_fips_extrabits_ws((uint64_t)v15, a1, a2, a3, a4);
  v16((uint64_t)v15);
  return scalar_fips_extrabits_ws;
}

uint64_t ccmode_cfb8_encrypt(_BYTE *a1, uint64_t a2, char *a3, _BYTE *a4)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  if (a2)
  {
    v6 = a2;
    v7 = a1 + 8;
    v8 = *(_QWORD *)a1;
    v9 = (unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 7) >> 3;
    v10 = (uint64_t)&a1[16 * v9 + 8];
    v11 = (uint64_t)&a1[8 * v9 + 8];
    do
    {
      --v6;
      memmove((void *)v11, (const void *)(v11 + 1), *(_QWORD *)(v8 + 8) - 1);
      v12 = *a3++;
      v13 = v12 ^ *v7;
      *a4++ = v13;
      *(_BYTE *)(*(_QWORD *)(v8 + 8) + v11 - 1) = v13;
      (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(v8 + 24))(v10, 1, v11, v7);
    }
    while (v6);
  }
  return 0;
}

uint64_t cche_secret_key_generate_ws(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t (**a4)(_QWORD, uint64_t, uint64_t))
{
  uint64_t result;

  *a2 = (unsigned int *)(cche_param_ctx_chain_const(a3) + 8);
  result = ccpolyzp_po2cyc_random_ternary_ws(a1, a2, a4);
  if (!(_DWORD)result)
    return ccpolyzp_po2cyc_fwd_ntt(a2);
  return result;
}

uint64_t cche_secret_key_generate(unsigned int **a1, uint64_t a2, uint64_t (**a3)(_QWORD, uint64_t, uint64_t))
{
  char v6;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t ws;
  _QWORD v17[4];
  void (*v18)(uint64_t);
  char v19;

  v6 = 0;
  v19 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v19 = v6;
  v12 = cche_param_ctx_polynomial_degree(a2);
  v13 = CCPOLYZP_PO2CYC_RANDOM_TERNARY_WORKSPACE_N(v12);
  v17[0] = cc_malloc_clear(8 * v13);
  v14 = cche_param_ctx_polynomial_degree(a2);
  v17[1] = CCPOLYZP_PO2CYC_RANDOM_TERNARY_WORKSPACE_N(v14);
  v17[2] = 0;
  v17[3] = cc_ws_alloc;
  v18 = cc_ws_free;
  if (v17[0])
  {
    ws = cche_secret_key_generate_ws((uint64_t)v17, a1, a2, a3);
    v18((uint64_t)v17);
  }
  else
  {
    ws = 4294967283;
  }
  cc_disable_dit(&v19);
  return ws;
}

uint64_t cche_secret_key_generate_from_seed_ws(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t (**v9)(_QWORD, uint64_t, uint64_t);
  uint64_t result;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = (uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 536);
  result = ccpolyzp_po2cyc_block_rng_init((uint64_t)v9, a4);
  if (!(_DWORD)result)
    result = cche_secret_key_generate_ws(a1, a2, a3, v9);
  *(_QWORD *)(a1 + 16) = v8;
  return result;
}

uint64_t cche_secret_key_generate_from_seed(unsigned int **a1, uint64_t a2, uint64_t a3)
{
  char v6;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v22[4];
  void (*v23)(uint64_t);
  char v24;

  v6 = 0;
  v24 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v24 = v6;
  v12 = cche_param_ctx_polynomial_degree(a2);
  v13 = sizeof_struct_ccpolyzp_po2cyc_block_rng_state();
  v14 = sizeof_struct_ccpolyzp_po2cyc();
  v15 = (v13 + v14 - 1) / v14;
  v16 = CCPOLYZP_PO2CYC_RANDOM_TERNARY_WORKSPACE_N(v12);
  v22[0] = cc_malloc_clear(8 * (v16 + v15));
  v17 = cche_param_ctx_polynomial_degree(a2);
  v18 = sizeof_struct_ccpolyzp_po2cyc_block_rng_state();
  v19 = sizeof_struct_ccpolyzp_po2cyc();
  v22[1] = CCPOLYZP_PO2CYC_RANDOM_TERNARY_WORKSPACE_N(v17) + (v18 + v19 - 1) / v19;
  v22[2] = 0;
  v22[3] = cc_ws_alloc;
  v23 = cc_ws_free;
  if (v22[0])
  {
    v20 = cche_secret_key_generate_from_seed_ws((uint64_t)v22, a1, a2, a3);
    v23((uint64_t)v22);
  }
  else
  {
    v20 = 4294967283;
  }
  cc_disable_dit(&v24);
  return v20;
}

uint64_t ltc_rc2_ecb_decrypt(uint64_t a1, uint64_t a2, unsigned __int16 *a3, _WORD *a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int v9;
  char v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;

  for (; a2; --a2)
  {
    v4 = a3[3];
    v5 = a3[2];
    v6 = a3[1];
    v7 = (_DWORD *)(a1 + 252);
    v8 = 16;
    v9 = *a3;
    do
    {
      if ((_DWORD)v8 == 11 || (_DWORD)v8 == 5)
      {
        v11 = v4 - *(_DWORD *)(a1 + 4 * (v5 & 0x3F));
        v4 = (unsigned __int16)(v4 - *(_DWORD *)(a1 + 4 * (v5 & 0x3F)));
        v5 = (unsigned __int16)(v5 - *(_DWORD *)(a1 + 4 * (v6 & 0x3F)));
        v6 = (unsigned __int16)(v6 - *(_DWORD *)(a1 + 4 * (v9 & 0x3F)));
        v9 = (unsigned __int16)(v9 - *(_DWORD *)(a1 + 4 * (v11 & 0x3F)));
      }
      v12 = ((v4 << 11) | (v4 >> 5)) - (v6 & v5 | v9 & ~v5) - *v7;
      v4 = (unsigned __int16)((((_WORD)v4 << 11) | (v4 >> 5)) - (v6 & v5 | v9 & ~(_WORD)v5) - *(_WORD *)v7);
      v13 = ((v5 << 13) | (v5 >> 3)) - ((v9 & v6) + *(v7 - 1)) - (v12 & ~v6);
      v5 = (unsigned __int16)((((_WORD)v5 << 13) | (v5 >> 3)) - ((v9 & v6) + *((_WORD *)v7 - 2)) - (v12 & ~(_WORD)v6));
      v14 = *(v7 - 3);
      v15 = ((v6 << 14) | (v6 >> 2)) - (*(v7 - 2) + (v12 & v9)) - (v13 & ~v9);
      v6 = (unsigned __int16)((((_WORD)v6 << 14) | (v6 >> 2)) - (*((_WORD *)v7 - 4) + (v12 & v9)) - (v13 & ~(_WORD)v9));
      v16 = ((v9 << 15) | (v9 >> 1)) - v14 - (v15 & ~v4 | v13 & v12);
      v9 = (unsigned __int16)((((_WORD)v9 << 15) | (v9 >> 1)) - v14 - (v15 & ~(_WORD)v4 | v13 & v12));
      v7 -= 4;
      --v8;
    }
    while (v8);
    *a4 = v16;
    a4[1] = v15;
    a4[2] = v13;
    a3 += 4;
    a4[3] = v12;
    a4 += 4;
  }
  return 0;
}

uint64_t ccec_rfc6637_wrap_key_diversified(uint64_t a1, uint64_t *a2, _WORD *a3, uint64_t a4, char a5, size_t a6, unsigned __int8 *a7, char *a8, uint64_t (**a9)(void), char *a10, uint64_t (**a11)(_QWORD, uint64_t, uint64_t *))
{
  char v18;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t v33;
  uint64_t scalar_fips_retry_ws;
  unint64_t *v35;
  uint64_t v36;
  char v38;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t (*v42)(_QWORD *, uint64_t);
  void (*v43)(uint64_t);
  char v44;

  v18 = 0;
  v44 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v18 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v18 = 1;
    }
  }
  v44 = v18;
  v24 = (uint64_t *)*a2;
  v25 = *(_QWORD *)*a2;
  v26 = sizeof_struct_cche_galois_key();
  v27 = sizeof_struct_ccpolyzp_po2cyc();
  v40[0] = cc_malloc_clear(248 * v25 + 16 * ((v26 + v27 + 4 * v25 * v27 - 1) / v27));
  v28 = *v24;
  v29 = sizeof_struct_cche_galois_key();
  v30 = sizeof_struct_ccpolyzp_po2cyc();
  v40[1] = 31 * v28 + 2 * ((v29 + v30 + 4 * v28 * v30 - 1) / v30);
  v41 = 0;
  v42 = cc_ws_alloc;
  v43 = cc_ws_free;
  if (v40[0])
  {
    v38 = a5;
    v31 = (uint64_t *)*a2;
    v32 = (uint64_t **)cc_ws_alloc(v40, (4 * (*(_QWORD *)*a2 & 0x7FFFFFFFFFFFFFFLL)) | 2);
    v33 = v41;
    *v32 = v31;
    scalar_fips_retry_ws = ccec_generate_scalar_fips_retry_ws((uint64_t)v40, v31, (uint64_t (**)(_QWORD, unint64_t, void *))a11, &v32[3 * *v31 + 2]);
    if (!(_DWORD)scalar_fips_retry_ws)
    {
      v35 = (unint64_t *)(a1 + 16);
      scalar_fips_retry_ws = ccec_make_pub_from_priv_ws((uint64_t)v40, v31, a11, (unint64_t *)&v32[3 * **v32 + 2], v35, v32);
      if (!(_DWORD)scalar_fips_retry_ws)
      {
        if (ccecdh_pairwise_consistency_check_ws((uint64_t)v40, v32, (uint64_t)v35, a11))
        {
          v36 = 4294967278;
LABEL_13:
          v41 = 0;
          v43((uint64_t)v40);
          goto LABEL_14;
        }
        v41 = v33;
        scalar_fips_retry_ws = ccec_rfc6637_wrap_core_ws((uint64_t)v40, a2, (uint64_t *)v32, a3, a4, v38, a6, a7, a8, a9, a10, a11);
      }
    }
    v36 = scalar_fips_retry_ws;
    goto LABEL_13;
  }
  v36 = 4294967283;
LABEL_14:
  cc_disable_dit(&v44);
  return v36;
}

uint64_t ccec_get_pubkey_components(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t *a4, uint64_t a5, unint64_t *a6)
{
  char v12;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  char v25;

  v12 = 0;
  v25 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v12 = 1;
    }
  }
  v25 = v12;
  v18 = a1 + 16;
  v19 = **(_QWORD **)a1;
  v20 = ccn_write_uint_size(v19, (unint64_t *)(a1 + 16));
  if (v20 <= *a4
    && (*a4 = v20,
        ccn_write_uint(v19, (unint64_t *)(a1 + 16), v20, a3),
        v21 = *(unint64_t **)a1,
        v22 = ccn_write_uint_size(v19, (unint64_t *)(v18 + 8 * **(_QWORD **)a1)),
        v22 <= *a6))
  {
    *a6 = v22;
    ccn_write_uint(v19, (unint64_t *)(v18 + 8 * *v21), v22, a5);
    v23 = 0;
    *a2 = cczp_bitlen(*(_QWORD *)a1);
  }
  else
  {
    v23 = 0xFFFFFFFFLL;
  }
  cc_disable_dit(&v25);
  return v23;
}

uint64_t fipspost_post_ecdsa(int a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  size_t v23;
  const void *v24;
  uint64_t v25;
  unint64_t **v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t *v37;
  unint64_t *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unint64_t v44;
  unint64_t **v45;
  int v46;
  char v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  const void *v70;
  unint64_t v71;
  size_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[2];
  uint64_t v81;
  uint64_t (*v82)(_QWORD *, uint64_t);
  void (*v83)(uint64_t);
  uint64_t v84;
  uint64_t (*v85[3])(_QWORD, unint64_t, void *);
  char v86[66];
  char __s1[66];
  unsigned __int8 v88[141];
  uint64_t v89;

  v89 = *MEMORY[0x1E0C874D8];
  v2 = (uint64_t *)ccec_cp_521();
  v3 = *v2;
  v4 = sizeof_struct_cche_galois_key();
  v5 = sizeof_struct_ccpolyzp_po2cyc();
  v6 = (v5 - 1 + v4 + 3 * v3 * v5) / v5 + 47 * v3;
  v7 = (v5 - 1 + 4 * v3 * v5 + sizeof_struct_cche_galois_key()) / v5 + 49 * v3;
  if (v6 > v7)
    v7 = v6;
  v8 = cc_malloc_clear(8 * v7);
  v80[0] = v8;
  v9 = *v2;
  v10 = sizeof_struct_cche_galois_key();
  v11 = sizeof_struct_ccpolyzp_po2cyc();
  v12 = (v11 - 1 + v10 + 3 * v9 * v11) / v11 + 47 * v9;
  v13 = (v11 - 1 + 4 * v9 * v11 + sizeof_struct_cche_galois_key()) / v11 + 49 * v9;
  if (v12 > v13)
    v13 = v12;
  v80[1] = v13;
  v81 = 0;
  v82 = cc_ws_alloc;
  v83 = cc_ws_free;
  if (!v8)
    return 4294967283;
  v14 = 0;
  v75 = a1;
  v63 = (uint64_t)(a1 << 27) >> 31;
  v15 = (uint64_t *)&unk_1EA9548F0;
  while (1)
  {
    v78 = v14;
    v16 = (unint64_t *)((uint64_t (*)(void))*(v15 - 6))();
    v17 = (unint64_t *)((uint64_t (*)(void))*(v15 - 5))();
    v18 = cczp_bitlen((uint64_t)v16);
    v66 = *v17;
    v68 = v18;
    v19 = (char *)*(v15 - 3);
    v76 = *(v15 - 2);
    v21 = (unsigned __int8 *)*(v15 - 1);
    v20 = *v15;
    v22 = v15[1];
    v23 = v15[2];
    v24 = (const void *)v15[3];
    v70 = (const void *)v15[5];
    v72 = v15[4];
    memset(v85, 0, sizeof(v85));
    v25 = cczp_bitlen((uint64_t)v16);
    v64 = *v17;
    v65 = v25;
    v74 = v81;
    v26 = (unint64_t **)v82(v80, (4 * (*v16 & 0x7FFFFFFFFFFFFFFLL)) | 2);
    *v26 = v16;
    if (ccec_x963_import_priv_ws((uint64_t)v80, v16, v76, v21, v26))
    {
      mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed ccec_x963_import_priv (P-%zu/SHA-%zu): %d\n");
LABEL_19:
      v28 = v78;
      v29 = v74;
      goto LABEL_21;
    }
    ccrng_ecfips_test_init(v85, v20 + v63, v22);
    v84 = 141;
    v27 = ccec_sign_msg_ws((uint64_t)v80, v26, v17, 0x80uLL, v19, (unint64_t *)&v84, (uint64_t)v88, v85);
    if (v27)
    {
      v31 = v27;
      v32 = mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed ccec_sign_msg (P-%zu/SHA-%zu): %d\n", v32, "fipspost_post_ecdsa_sign_ws", 74, v65, 8 * v64, v31);
      v28 = v78;
      goto LABEL_22;
    }
    if (ccec_extract_rs_ws((uint64_t)v80, (uint64_t *)v26, v84, v88, __s1, v86))
    {
      mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed ccec_extract_rs (P-%zu/SHA-%zu): %d\n");
      goto LABEL_19;
    }
    if (memcmp(__s1, v24, v23))
    {
      mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed ECDSA_P%zu_SHA%zu KAT (r)\n");
      goto LABEL_19;
    }
    v28 = v78;
    v29 = v74;
    if (memcmp(v86, v70, v72))
      break;
    v81 = v74;
    v14 = v78 + 1;
    v15 += 12;
    if (v78 == 3)
    {
      v67 = 0;
      goto LABEL_23;
    }
  }
  v33 = mach_absolute_time();
  printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed ECDSA_P%zu_SHA%zu KAT (s)\n", v33, "fipspost_post_ecdsa_sign_ws", 95, v65, 8 * v64);
LABEL_21:
  v81 = v29;
LABEL_22:
  v34 = mach_absolute_time();
  printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed ECDSA_P%zu_SHA%zu_SIG KAT #%zu\n", v34, "fipspost_post_ecdsa_kat_sign_ws", 145, v68, 8 * v66, v28);
  v67 = -75;
LABEL_23:
  v35 = 0;
  v81 = 0;
  v36 = (uint64_t *)&unk_1EA954A70;
  while (1)
  {
    v79 = v35;
    v37 = (unint64_t *)((uint64_t (*)(void))*(v36 - 4))();
    v38 = (unint64_t *)((uint64_t (*)(void))*(v36 - 3))();
    v39 = cczp_bitlen((uint64_t)v37);
    v71 = *v38;
    v73 = v39;
    v40 = (char *)*(v36 - 1);
    v41 = *v36;
    v43 = (unsigned __int8 *)v36[1];
    v42 = v36[2];
    v69 = cczp_bitlen((uint64_t)v37);
    v44 = *v38;
    v77 = v81;
    v45 = (unint64_t **)v82(v80, (24 * *v37 + 23) >> 3);
    *v45 = v37;
    v46 = ccec_x963_import_pub_ws((uint64_t)v80, v37, v41, v43, v45);
    if (v46)
    {
      v50 = v46;
      v51 = mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed ccec_x963_import_pub (P-%zu/SHA-%zu): %d\n", v51, "fipspost_post_ecdsa_verify_ws", 178, v69, 8 * v44, v50);
      v47 = v75;
      goto LABEL_32;
    }
    __memcpy_chk();
    v47 = v75;
    if ((v75 & 0x10) != 0)
      v88[0] ^= 0x5Au;
    v48 = ccec_verify_msg_ws((uint64_t)v80, v45, v38, 0x80uLL, v40, v42, v88, 0);
    if (v48)
      break;
    v81 = v77;
    v35 = v79 + 1;
    v36 += 8;
    if (v79 == 3)
    {
      v49 = 0;
      v47 = v75;
      goto LABEL_33;
    }
  }
  v52 = v48;
  v53 = mach_absolute_time();
  printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed ccec_verify_msg (P-%zu/SHA-%zu): %d\n", v53, "fipspost_post_ecdsa_verify_ws", 191, v69, 8 * v44, v52);
LABEL_32:
  v81 = v77;
  v54 = mach_absolute_time();
  printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed ECDSA_P%zu_SHA%zu_VER KAT #%zu\n", v54, "fipspost_post_ecdsa_kat_verify_ws", 235, v73, 8 * v71, v79);
  v49 = -75;
LABEL_33:
  v81 = 0;
  v30 = v49 | v67;
  if ((v47 & 0x10) != 0)
  {
    v55 = (unint64_t *)ccec_cp_224();
    v56 = v82(v80, (4 * (*v55 & 0x7FFFFFFFFFFFFFFLL)) | 2);
    *(_QWORD *)v56 = v55;
    if (ccec_x963_import_priv_ws((uint64_t)v80, v55, 0x55uLL, byte_1DEE21FC0, (unint64_t **)v56))
    {
      v57 = mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed ccec_x963_import_priv\n", v57, "fipspost_post_ecdsa_pairwise_ws", 265);
      v58 = -72;
    }
    else
    {
      v59 = ccec_pairwise_consistency_check_ws((uint64_t)v80, (uint64_t **)v56, (uint64_t (**)(_QWORD, unint64_t, void *))&ccrng_zero);
      mach_absolute_time();
      if (v59)
        printf("FIPSPOST_USER [%llu] %s:%d: FAILED: [PCT] CCEC_PAIRWISE_CONSISTENCY: unexpected FAILURE\n");
      else
        printf("FIPSPOST_USER [%llu] %s:%d: [PCT] CCEC_PAIRWISE_CONSISTENCY: expected SUCCESS\n");
      *(_QWORD *)(v56 + 24) ^= 1uLL;
      v60 = ccec_pairwise_consistency_check_ws((uint64_t)v80, (uint64_t **)v56, (uint64_t (**)(_QWORD, unint64_t, void *))&ccrng_zero);
      v61 = mach_absolute_time();
      if (v60)
      {
        printf("FIPSPOST_USER [%llu] %s:%d: [PCT] CCEC_PAIRWISE_CONSISTENCY: FORCEFAIL\n", v61, "fipspost_post_ecdsa_pairwise_ws", 283);
        v58 = 0;
      }
      else
      {
        printf("FIPSPOST_USER [%llu] %s:%d: FAILED: [PCT] CCEC_PAIRWISE_CONSISTENCY: unexpected SUCCESS\n", v61, "fipspost_post_ecdsa_pairwise_ws", 286);
        v58 = -1;
      }
    }
    v81 = 0;
    v30 = v58 | v30;
  }
  v83((uint64_t)v80);
  return v30;
}

void *ccaes_cfb_decrypt_mode()
{
  return &ccaes_arm_cfb_decrypt_mode;
}

uint64_t ccmode_siv_hmac_decrypt(rsize_t *a1, unint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  rsize_t v10;
  rsize_t v11;
  uint64_t v12;
  int v15;
  int v16;
  _QWORD v18[8];
  __int128 v19;
  char __s[64];
  __int128 v21[4];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C874D8];
  v4 = *(_QWORD *)(*a1 + 64);
  if (*(_QWORD *)(v4 + 16) != 16)
    return 4294967226;
  v6 = a1[3];
  v7 = v6 > 6;
  v8 = (1 << v6) & 0x54;
  if (v7 || v8 == 0)
    return 4294967228;
  v10 = a1[2];
  v11 = a2 - v10;
  if (a2 < v10)
    return 4294967229;
  __memcpy_chk();
  v19 = v21[0];
  if (ccmode_siv_hmac_temp_key_gen(a1, v18, &v19)
    || (BYTE8(v19) &= ~0x80u,
        BYTE12(v19) &= ~0x80u,
        v15 = ccctr_one_shot(v4, a1[1] >> 1, (uint64_t)v18, (uint64_t)&v19, v11, a3 + v10, (uint64_t)a4),
        v16 = ccmode_siv_hmac_auth_finalize(a1, v11, (char *)a4, __s),
        v16 | cc_cmp_safe(v10, __s, (char *)v21) | v15))
  {
    cc_clear(v11, a4);
    cc_clear(v10, __s);
    ccmode_siv_hmac_reset((uint64_t)a1);
    v12 = 4294967192;
  }
  else
  {
    v12 = 0;
  }
  cc_clear(a1[1] >> 1, v18);
  return v12;
}

uint64_t ccckg_contributor_commit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t scalar_fips_retry;
  uint64_t v21;
  uint64_t (**v22)(_QWORD, size_t, uint64_t);
  size_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  _QWORD *v28;
  uint64_t v30;
  uint64_t (*v31)(_QWORD, size_t, uint64_t);
  char v32;
  char __s[66];
  uint64_t v34;

  v6 = 0;
  v34 = *MEMORY[0x1E0C874D8];
  v32 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v32 = v6;
  v12 = ccckg_ctx_di(a1);
  v13 = (unint64_t *)ccckg_ctx_cp(a1);
  v14 = *v13;
  MEMORY[0x1E0C86820](v13, v15, v16, v17);
  v19 = (uint64_t *)((char *)&v30 - v18);
  if (*(_BYTE *)(a1 + 32))
  {
    scalar_fips_retry = 4294967210;
  }
  else if (ccckg_sizeof_commitment((uint64_t)v13, v12) == a2)
  {
    v21 = a1 + 40;
    scalar_fips_retry = ccec_generate_scalar_fips_retry(v13, *(uint64_t (***)(_QWORD, unint64_t, void *))(a1 + 24), (_QWORD *)(a1 + 40));
    if (!(_DWORD)scalar_fips_retry)
    {
      v22 = *(uint64_t (***)(_QWORD, size_t, uint64_t))(a1 + 24);
      v31 = *v22;
      v23 = *(_QWORD *)v12;
      v24 = (_QWORD *)ccckg_ctx_cp(a1);
      scalar_fips_retry = v31(v22, v23, v21 + 8 * *v24);
      if (!(_DWORD)scalar_fips_retry)
      {
        v25 = cczp_bitlen((uint64_t)&v13[5 * *v13 + 4]);
        ccn_write_uint_padded(v14, (unint64_t *)(a1 + 40), (unint64_t)(v25 + 7) >> 3, __s);
        ccdigest_init(v12, v19);
        v26 = cczp_bitlen((uint64_t)&v13[5 * *v13 + 4]);
        ccdigest_update(v12, v19, (unint64_t)(v26 + 7) >> 3, __s);
        v27 = *(_QWORD *)v12;
        v28 = (_QWORD *)ccckg_ctx_cp(a1);
        ccdigest_update(v12, v19, v27, (char *)(v21 + 8 * *v28));
        (*(void (**)(uint64_t, _QWORD *, uint64_t))(v12 + 56))(v12, v19, a3);
        cc_clear(*(_QWORD *)(v12 + 8) + *(_QWORD *)(v12 + 16) + 12, v19);
        scalar_fips_retry = 0;
        *(_BYTE *)(a1 + 32) = 1;
      }
    }
    cc_clear(0x42uLL, __s);
  }
  else
  {
    scalar_fips_retry = 4294967289;
  }
  cc_disable_dit(&v32);
  return scalar_fips_retry;
}

uint64_t ccckg_contributor_finish_derive_p_ws(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t (**a5)(_QWORD, uint64_t, uint64_t *))
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v9 = (uint64_t *)ccckg_ctx_cp(a2);
  if (*a3 != 4)
    return 4294967289;
  v10 = v9;
  v11 = *v9;
  v18 = *(_QWORD *)(a1 + 16);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 3 * *v9);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 3 * v11);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 3 * v11);
  v15 = (uint64_t **)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, (unint64_t)(24 * v11 + 23) >> 3);
  *v15 = v10;
  v16 = cczp_bitlen((uint64_t)v10);
  result = ccec_raw_import_pub(v10, ((unint64_t)(v16 + 7) >> 2) & 0x3FFFFFFFFFFFFFFELL, a3 + 1, (uint64_t)v15);
  if (!(_DWORD)result)
  {
    result = ccec_validate_point_and_projectify_ws(a1, v10, v12, (unint64_t *)v15 + 2);
    if (!(_DWORD)result)
    {
      result = ccec_projectify_ws(a1, (uint64_t)v10);
      if (!(_DWORD)result)
      {
        result = ccec_mult_blinded_ws(a1, v10, v13, (unint64_t *)(a2 + 40), v14, a5);
        if (!(_DWORD)result)
        {
          ccec_full_add_ws(a1, (uint64_t)v10);
          result = ccec_affinify_ws(a1, (uint64_t)v10);
        }
      }
    }
  }
  *(_QWORD *)(a1 + 16) = v18;
  return result;
}

uint64_t ccckg_contributor_finish(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, char *a5, _QWORD *a6, uint64_t a7, char *a8)
{
  char v15;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  size_t *v28;
  uint64_t (**v29)(_QWORD, uint64_t, uint64_t *);
  unint64_t *v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  unint64_t v40;
  _QWORD v42[2];
  uint64_t v43;
  uint64_t (*v44)(_QWORD *, uint64_t);
  void (*v45)(uint64_t);
  char v46;

  v15 = 0;
  v46 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v15 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v15 = 1;
    }
  }
  v46 = v15;
  v21 = (uint64_t *)ccckg_ctx_cp(a1);
  v22 = *v21;
  v23 = sizeof_struct_cche_galois_key();
  v24 = sizeof_struct_ccpolyzp_po2cyc();
  v42[0] = cc_malloc_clear((v22 << 8) + 8 * ((v23 + v24 + 3 * v22 * v24 - 1) / v24));
  v25 = *v21;
  v26 = sizeof_struct_cche_galois_key();
  v27 = sizeof_struct_ccpolyzp_po2cyc();
  v42[1] = (v26 + v27 + 3 * v25 * v27 - 1) / v27 + 32 * v25;
  v43 = 0;
  v44 = cc_ws_alloc;
  v45 = cc_ws_free;
  if (!v42[0])
  {
    v35 = 4294967283;
    goto LABEL_19;
  }
  v28 = (size_t *)ccckg_ctx_di(a1);
  v29 = *(uint64_t (***)(_QWORD, uint64_t, uint64_t *))(a1 + 24);
  v30 = (unint64_t *)ccckg_ctx_cp(a1);
  if (*(_BYTE *)(a1 + 32) != 1)
  {
    v35 = 4294967210;
LABEL_18:
    cc_ws_free((uint64_t)v42);
    goto LABEL_19;
  }
  v31 = v30;
  if ((unint64_t *)*a6 != v30
    || (v40 = *v30, ccckg_sizeof_share((uint64_t)v30, v28) != a2)
    || ccckg_sizeof_opening(v31, v28) != a4
    || *a3 != 4)
  {
    v35 = 4294967289;
    goto LABEL_18;
  }
  v32 = ccckg_contributor_finish_derive_p_ws((uint64_t)v42, a1, a3, (uint64_t)a6, v29);
  if ((_DWORD)v32)
  {
    v35 = v32;
  }
  else
  {
    v33 = a1 + 40 + 8 * *(_QWORD *)ccckg_ctx_cp(a1);
    v34 = cczp_bitlen((uint64_t)v31);
    v35 = ccckg_derive_sk(a1, a6 + 2, v33, (uint64_t)&a3[((unint64_t)(v34 + 7) >> 2) | 1], a7, a8);
    if (!(_DWORD)v35)
    {
      v36 = cczp_bitlen((uint64_t)&v31[5 * *v31 + 4]);
      ccn_write_uint_padded(v40, (unint64_t *)(a1 + 40), (unint64_t)(v36 + 7) >> 3, a5);
      v37 = &a5[(unint64_t)(cczp_bitlen((uint64_t)&v31[5 * *v31 + 4]) + 7) >> 3];
      v38 = (_QWORD *)ccckg_ctx_cp(a1);
      memcpy(v37, (const void *)(a1 + 40 + 8 * *v38), *v28);
      *(_BYTE *)(a1 + 32) = 3;
    }
  }
  v43 = 0;
  v45((uint64_t)v42);
LABEL_19:
  cc_disable_dit(&v46);
  return v35;
}

uint64_t ccsae_sizeof_kck()
{
  return 32;
}

uint64_t ccsae_sizeof_kck_h2c(uint64_t a1)
{
  return **(_QWORD **)(a1 + 16);
}

uint64_t ccsae_sizeof_kck_internal(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 28);
  if (v1 == 2)
    return **(_QWORD **)(a1 + 16);
  if (v1 == 1)
    return 32;
  return 0;
}

uint64_t ccsae_get_keys(unint64_t **a1, void *a2, _OWORD *a3, _OWORD *a4)
{
  char v8;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  char *v21;
  int v22;
  size_t v23;
  __int128 v24;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t (*v28)(_QWORD *, uint64_t);
  void (*v29)(uint64_t);
  char v30;

  v8 = 0;
  v30 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v30 = v8;
  v14 = *a1;
  v26[0] = cc_malloc_clear(24 * **a1);
  v26[1] = 3 * *v14;
  v27 = 0;
  v28 = cc_ws_alloc;
  v29 = cc_ws_free;
  if (v26[0])
  {
    if (*((unsigned __int8 *)a1 + 24) >= CCSAE_STATE_COMMIT_BOTH)
    {
      v16 = *a1;
      v17 = **a1;
      v18 = (unint64_t)(cczp_bitlen((uint64_t)*a1) + 7) >> 3;
      v19 = (uint64_t)&v16[5 * *v16 + 4];
      v20 = (unint64_t *)cc_ws_alloc(v26, v17);
      v21 = (char *)v28(v26, v17);
      cczp_add_ws((uint64_t)v26, v19);
      ccn_write_uint_padded(v17, v20, v18, v21);
      v22 = *((_DWORD *)a1 + 7);
      if (v22 == 2)
      {
        v23 = *a1[2];
      }
      else if (v22 == 1)
      {
        v23 = 32;
      }
      else
      {
        v23 = 0;
      }
      memcpy(a2, a1 + 6, v23);
      v15 = 0;
      v24 = *((_OWORD *)a1 + 8);
      *a3 = *((_OWORD *)a1 + 7);
      a3[1] = v24;
      *a4 = *(_OWORD *)v21;
      v27 = 0;
      v29((uint64_t)v26);
    }
    else
    {
      v15 = 4294967210;
      cc_ws_free((uint64_t)v26);
    }
  }
  else
  {
    v15 = 4294967283;
  }
  cc_disable_dit(&v30);
  return v15;
}

uint64_t ccckg2_owner_generate_share(uint64_t a1, size_t a2, const void *a3, uint64_t a4, char *a5, uint64_t (**a6)(_QWORD, uint64_t, uint64_t *))
{
  char v12;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t **v30;
  uint64_t **v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t key_fips_ws;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v38;
  _QWORD v39[2];
  uint64_t v40;
  uint64_t (*v41)(_QWORD *, uint64_t);
  void (*v42)(uint64_t);
  char v43;

  v12 = 0;
  v43 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v12 = 1;
    }
  }
  v43 = v12;
  v18 = (uint64_t *)ccckg2_ctx_cp(a1);
  v19 = *v18;
  v20 = sizeof_struct_cche_galois_key();
  v21 = sizeof_struct_ccpolyzp_po2cyc();
  v39[0] = cc_malloc_clear(392 * v19 + 16 * ((v20 + v21 + 4 * v19 * v21 - 1) / v21));
  v22 = *v18;
  v23 = sizeof_struct_cche_galois_key();
  v24 = sizeof_struct_ccpolyzp_po2cyc();
  v39[1] = 49 * v22 + 2 * ((v23 + v24 + 4 * v22 * v24 - 1) / v24);
  v40 = 0;
  v41 = cc_ws_alloc;
  v42 = cc_ws_free;
  if (v39[0])
  {
    v25 = (_QWORD *)ccckg2_ctx_di(a1);
    v26 = (uint64_t *)ccckg2_ctx_cp(a1);
    if (*(_BYTE *)(a1 + 32))
    {
      v27 = 4294967210;
LABEL_18:
      cc_ws_free((uint64_t)v39);
      goto LABEL_19;
    }
    if (*v25 != a2
      || (v28 = v26,
          v29 = *v26,
          (((unint64_t)(cczp_bitlen((uint64_t)v26) + 7) >> 1) & 0x7FFFFFFFFFFFFFFCLL | 2) != a4))
    {
      v27 = 4294967289;
      goto LABEL_18;
    }
    v38 = v29;
    v30 = (uint64_t **)cc_ws_alloc(v39, (4 * (v29 & 0x7FFFFFFFFFFFFFFLL)) | 2);
    *v30 = v28;
    v31 = (uint64_t **)v41(v39, (4 * (v29 & 0x7FFFFFFFFFFFFFFLL)) | 2);
    *v31 = v28;
    v32 = (_QWORD *)ccckg2_ctx_cp(a1);
    v33 = (_QWORD *)ccckg2_ctx_cp(a1);
    memcpy((void *)(a1 + 40 + 8 * *v33 + 8 * *v32), a3, a2);
    key_fips_ws = ccec_generate_key_fips_ws((uint64_t)v39, v28, a6, v30);
    if ((_DWORD)key_fips_ws
      || (ccn_set(v38, (void *)(a1 + 40), &v30[3 * **v30 + 2]),
          key_fips_ws = ccec_generate_key_fips_ws((uint64_t)v39, v28, a6, v31),
          (_DWORD)key_fips_ws)
      || (v35 = (_QWORD *)ccckg2_ctx_cp(a1),
          ccn_set(v38, (void *)(a1 + 40 + 8 * *v35), &v31[3 * **v31 + 2]),
          key_fips_ws = ccec_export_pub((uint64_t)v30, a5),
          (_DWORD)key_fips_ws))
    {
      v27 = key_fips_ws;
    }
    else
    {
      v36 = cczp_bitlen((uint64_t)v28);
      v27 = ccec_export_pub((uint64_t)v31, &a5[((unint64_t)(v36 + 7) >> 2) | 1]);
      if (!(_DWORD)v27)
        *(_BYTE *)(a1 + 32) = 2;
    }
    v40 = 0;
    v42((uint64_t)v39);
  }
  else
  {
    v27 = 4294967283;
  }
LABEL_19:
  cc_disable_dit(&v43);
  return v27;
}

uint64_t ccckg2_owner_finish(uint64_t a1, size_t a2, char *a3, uint64_t **a4, uint64_t a5, char *a6, uint64_t (**a7)(_QWORD, uint64_t, uint64_t *))
{
  char v14;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  char __s[64];
  uint64_t v34;

  v14 = 0;
  v34 = *MEMORY[0x1E0C874D8];
  v32 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v14 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v14 = 1;
    }
  }
  v32 = v14;
  v20 = (uint64_t *)ccckg2_ctx_di(a1);
  v21 = (uint64_t *)ccckg2_ctx_cp(a1);
  if (*(_BYTE *)(a1 + 32) == 2)
  {
    v22 = v21;
    if (*a4 == v21
      && (v31 = a6,
          v23 = cczp_bitlen((uint64_t)&v21[5 * *v21 + 4]) + 7,
          (((unint64_t)(cczp_bitlen((uint64_t)v22) + 7) >> 2) | 1) + (v23 >> 3) == a2))
    {
      ccdigest((uint64_t)v20, a2, a3, (uint64_t)__s);
      v24 = *v20;
      v25 = (_QWORD *)ccckg2_ctx_cp(a1);
      v26 = (_QWORD *)ccckg2_ctx_cp(a1);
      if (cc_cmp_safe(v24, __s, (char *)(a1 + 8 * *v26 + 8 * *v25 + 40)))
      {
        v27 = 4294967294;
      }
      else
      {
        v29 = ccckg_owner_finish_derive_p(a1, (unsigned __int8 *)a3, a4, a7);
        if ((_DWORD)v29)
        {
          v27 = v29;
        }
        else
        {
          v30 = cczp_bitlen((uint64_t)&v22[5 * *v22 + 4]);
          v27 = ccckg2_derive_sk(a1, &a3[(unint64_t)(v30 + 7) >> 3], (uint64_t)a4, a5, v31, a7);
          if (!(_DWORD)v27)
            *(_BYTE *)(a1 + 32) = 3;
        }
      }
      cc_clear(0x40uLL, __s);
    }
    else
    {
      v27 = 4294967289;
    }
  }
  else
  {
    v27 = 4294967210;
  }
  cc_disable_dit(&v32);
  return v27;
}

uint64_t fipspost_post_kdf_ctr_cmac(char a1)
{
  _QWORD *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C874D8];
  v22 = 0;
  v23 = 0;
  v2 = ccaes_cbc_encrypt_mode();
  if (ccnistkdf_ctr_cmac_fixed(v2, 32, 16, (uint64_t)"\xC1\x0B\x15.\x8C\x97\xB7~\x18pN\x0F\vӃ\x05", 0x3CuLL, byte_1DEE22525, 0x10uLL, (char *)&v22))
  {
    mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed ccnistkdf_ctr_cmac_fixed (AES128): %d\n");
    return 4294967224;
  }
  v3 = "\x01&\xFA\xF6\x19\x08\xAD\x9E聸0\\\"\x1D\xB5?";
  if ((a1 & 0x10) == 0)
    v3 = "&\xFA\xF6\x19\x08\xAD\x9E聸0\\\"\x1D\xB5?";
  v5 = *(_QWORD *)v3;
  v4 = *((_QWORD *)v3 + 1);
  if (v5 == v22 && v4 == v23)
  {
    v8 = 0;
  }
  else
  {
    v7 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed CMAC_AES128 KAT\n", v7, "fipspost_post_kdf_ctr_cmac", 69);
    v8 = 4294967221;
  }
  v20 = 0u;
  v21 = 0u;
  v9 = ccaes_cbc_encrypt_mode();
  if (ccnistkdf_ctr_cmac_fixed(v9, 24, 32, (uint64_t)"Mq\x922\x80\xFBJ\x11\xB2_\x9DX\xD6\x77\x04\xD8\xF8\xBB-d؞۞\xE6\xF3\xDE2\xE4\x60\x1E\xFC", 0x3CuLL, "\xE2\x7B\x8F5\v\xC1\x36\r\xDC\x47l\xB0\xCA\xE8\x86\xF0\x16\x1D\xA2.\xE8\x15\x9C3\x0FTZ\xF1\xD7\x82\xA0\xF0\xAA\xCC\x3C=\xE6\x21\x58\a\x16\x1D\xF0\x93\x36\xD4p\xB5\xB4\xDB\x1C\xC0\xCEs\xED\x1D\x3E\xA2C\x80", 0x20uLL, (char *)&v20))
  {
    mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed ccnistkdf_ctr_cmac_fixed (AES256): %d\n");
    return 4294967224;
  }
  v11 = "\x01\xB5\xB2\xBBg_\xE7\xB0\x4AR4\v\xD5\xCF$\x8DRX\xA1\xF87\xDA\xD7G\xEE\x8A\x4E\x90F\b\xA8\x97}";
  if ((a1 & 0x10) == 0)
    v11 = "\xB5\xB2\xBBg_\xE7\xB0\x4AR4\v\xD5\xCF$\x8DRX\xA1\xF87\xDA\xD7G\xEE\x8A\x4E\x90F\b\xA8\x97}";
  v12 = *(_QWORD *)v11;
  v13 = *((_QWORD *)v11 + 1);
  v15 = *((_QWORD *)v11 + 2);
  v14 = *((_QWORD *)v11 + 3);
  if (v12 != (_QWORD)v20 || v13 != *((_QWORD *)&v20 + 1) || v15 != (_QWORD)v21 || v14 != *((_QWORD *)&v21 + 1))
  {
    v19 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed CMAC_AES256 KAT\n", v19, "fipspost_post_kdf_ctr_cmac", 122);
    return 4294967221;
  }
  return v8;
}

_QWORD *ccn_addmod_p448(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  unint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL8 v41;
  _BOOL8 v42;
  _QWORD *v43;

  v4 = *a2;
  v5 = a2[1];
  v3 = a2 + 2;
  v6 = *v3;
  v7 = v3[1];
  v3 += 2;
  v8 = *v3;
  v9 = v3[1];
  v3 += 2;
  v11 = *a3;
  v12 = a3[1];
  v10 = a3 + 2;
  v13 = *v10;
  v14 = v10[1];
  v10 += 2;
  v15 = *v10;
  v16 = v10[1];
  v10 += 2;
  v17 = __CFADD__(v4, v11);
  v18 = v4 + v11;
  v20 = v17;
  v17 = __CFADD__(v17, v5);
  v19 = v20 + v5;
  v17 |= __CFADD__(v12, v19);
  v19 += v12;
  v22 = v17;
  v17 = __CFADD__(v17, v6);
  v21 = v22 + v6;
  v17 |= __CFADD__(v13, v21);
  v21 += v13;
  v24 = v17;
  v17 = __CFADD__(v17, v7);
  v23 = v24 + v7;
  v17 |= __CFADD__(v14, v23);
  v23 += v14;
  v26 = v17;
  v17 = __CFADD__(v17, v8);
  v25 = v26 + v8;
  v17 |= __CFADD__(v15, v25);
  v25 += v15;
  v28 = v17;
  v17 = __CFADD__(v17, v9);
  v27 = v28 + v9;
  v17 |= __CFADD__(v16, v27);
  v27 += v16;
  v29 = *v10 + v17 + *v3;
  v30 = __CFADD__(v17, *v3) | __CFADD__(*v10, v17 + *v3);
  v17 = __CFADD__(v18, v30);
  v31 = v18 + v30;
  v33 = v17;
  v17 = __CFADD__(v17, v19);
  v32 = v33 + v19;
  v35 = v17;
  v17 = __CFADD__(v17, v21);
  v34 = v35 + v21;
  v30 <<= 32;
  v37 = v17;
  v17 = __CFADD__(v17, v23);
  v36 = v37 + v23;
  v39 = v17 | __CFADD__(v30, v36);
  v17 = __CFADD__(v39, v25);
  v38 = v39 + v25;
  v41 = v17;
  v17 = __CFADD__(v17, v27);
  v40 = v41 + v27;
  v42 = v17;
  v17 = __CFADD__(v17, v29);
  *a1 = v31 + v17;
  a1[1] = __CFADD__(v31, v17) + v32;
  v43 = a1 + 2;
  *(_OWORD *)v43 = __PAIR128__((unint64_t)v17 << 32, __CFADD__(__CFADD__(v31, v17), v32))
                 + __PAIR128__(v30 + v36, v34);
  v43 += 2;
  *v43 = v38;
  v43[1] = v40;
  v43 += 2;
  *v43 = v42 + v29;
  return v43 + 1;
}

char *ccn_submod_p448(_OWORD *a1, unint64_t *a2, unint64_t *a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL1 v17;
  unint64_t v18;
  unint64_t v19;
  _BOOL1 v20;
  unint64_t v21;
  _BOOL1 v22;
  uint64_t v23;
  _BOOL1 v24;
  unint64_t v25;
  _BOOL1 v26;
  unint64_t v27;
  _BOOL1 v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BOOL1 v33;
  unint64_t v34;
  _BOOL1 v35;
  uint64_t v36;
  unint64_t v37;
  _BOOL1 v38;
  unint64_t v39;
  _BOOL1 v40;
  unint64_t v41;
  _BOOL1 v42;
  unint64_t v43;
  _BOOL1 v44;
  uint64_t v45;
  _OWORD *v46;

  v4 = *a2;
  v5 = a2[1];
  v3 = a2 + 2;
  v6 = *v3;
  v7 = v3[1];
  v3 += 2;
  v8 = *v3;
  v9 = v3[1];
  v3 += 2;
  v11 = *a3;
  v12 = a3[1];
  v10 = a3 + 2;
  v13 = *v10;
  v14 = v10[1];
  v10 += 2;
  v15 = *v10;
  v16 = v10[1];
  v10 += 2;
  v17 = v4 >= v11;
  v18 = v4 - v11;
  v20 = v17;
  v17 = __CFSUB__(v5, v12, v17);
  v19 = v5 - (v12 + !v20);
  v22 = v17;
  v17 = __CFSUB__(v6, v13, v17);
  v21 = v6 - (v13 + !v22);
  v24 = v17;
  v17 = __CFSUB__(v7, v14, v17);
  v23 = v7 - (v14 + !v24);
  v26 = v17;
  v17 = __CFSUB__(v8, v15, v17);
  v25 = v8 - (v15 + !v26);
  v28 = v17;
  v17 = __CFSUB__(v9, v16, v17);
  v27 = v9 - (v16 + !v28);
  v29 = *v3 - (*v10 + !v17);
  v30 = !__CFSUB__(*v3, *v10, v17);
  v17 = v18 >= v30;
  v31 = v18 - v30;
  v33 = v17;
  v17 = v19 >= !v17;
  v32 = v19 - !v33;
  v35 = v17;
  v17 = v21 >= !v17;
  v34 = v21 - !v35;
  v36 = v30 << 32;
  v38 = v17;
  v17 = __CFSUB__(v23, v36, v17);
  v37 = v23 - (v36 + !v38);
  v40 = v17;
  v17 = v25 >= !v17;
  v39 = v25 - !v40;
  v42 = v17;
  v17 = v27 >= !v17;
  v41 = v27 - !v42;
  v44 = v17;
  v17 = v29 >= !v17;
  v43 = v29 - !v44;
  v45 = !v17;
  *a1 = __PAIR128__(v32, v31) - (unint64_t)v45;
  v46 = a1 + 1;
  *v46++ = __PAIR128__(v37, v34) - __PAIR128__(v45 << 32, __PAIR128__(v32, v31) < (unint64_t)v45);
  *(_QWORD *)v46 = v39;
  *((_QWORD *)v46++ + 1) = v41;
  *(_QWORD *)v46 = v43;
  return (char *)v46 + 8;
}

uint64_t ccn_mulmod_p448(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL8 v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL8 v63;
  uint64_t v64;
  _BOOL8 v65;
  uint64_t v66;
  uint64_t v67;
  _BOOL8 v68;
  uint64_t v69;
  _BOOL8 v70;
  uint64_t v71;
  uint64_t v72;
  _BOOL8 v73;
  uint64_t v74;
  _BOOL8 v75;
  uint64_t v76;
  uint64_t v77;
  _BOOL8 v78;
  uint64_t v79;
  _BOOL8 v80;
  uint64_t v81;
  uint64_t v82;
  _BOOL8 v83;
  uint64_t v84;
  _BOOL8 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BOOL8 v90;
  uint64_t v91;
  uint64_t v92;
  _BOOL8 v93;
  uint64_t v94;
  _BOOL8 v95;
  uint64_t v96;
  uint64_t v97;
  _BOOL8 v98;
  uint64_t v99;
  _BOOL8 v100;
  uint64_t v101;
  uint64_t v102;
  _BOOL8 v103;
  uint64_t v104;
  _BOOL8 v105;
  uint64_t v106;
  uint64_t v107;
  _BOOL8 v108;
  uint64_t v109;
  _BOOL8 v110;
  _BOOL8 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _BOOL8 v115;
  uint64_t v116;
  uint64_t v117;
  _BOOL8 v118;
  uint64_t v119;
  _BOOL8 v120;
  uint64_t v121;
  uint64_t v122;
  _BOOL8 v123;
  uint64_t v124;
  _BOOL8 v125;
  uint64_t v126;
  uint64_t v127;
  _BOOL8 v128;
  uint64_t v129;
  _BOOL8 v130;
  uint64_t v131;
  uint64_t v132;
  _BOOL8 v133;
  uint64_t v134;
  _BOOL8 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _BOOL8 v140;
  uint64_t v141;
  uint64_t v142;
  _BOOL8 v143;
  uint64_t v144;
  _BOOL8 v145;
  uint64_t v146;
  uint64_t v147;
  _BOOL8 v148;
  uint64_t v149;
  _BOOL8 v150;
  uint64_t v151;
  uint64_t v152;
  _BOOL8 v153;
  uint64_t v154;
  _BOOL8 v155;
  _BOOL8 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _BOOL8 v160;
  uint64_t v161;
  uint64_t v162;
  _BOOL8 v163;
  uint64_t v164;
  _BOOL8 v165;
  uint64_t v166;
  uint64_t v167;
  _BOOL8 v168;
  uint64_t v169;
  _BOOL8 v170;
  uint64_t v171;
  uint64_t v172;
  _BOOL8 v173;
  uint64_t v174;
  _BOOL8 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _BOOL8 v180;
  uint64_t v181;
  uint64_t v182;
  _BOOL8 v183;
  uint64_t v184;
  _BOOL8 v185;
  uint64_t v186;
  uint64_t v187;
  _BOOL8 v188;
  uint64_t v189;
  _BOOL8 v190;
  _BOOL8 v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _BOOL8 v195;
  uint64_t v196;
  uint64_t v197;
  _BOOL8 v198;
  uint64_t v199;
  _BOOL8 v200;
  uint64_t v201;
  uint64_t v202;
  _BOOL8 v203;
  uint64_t v204;
  _BOOL8 v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _BOOL8 v210;
  uint64_t v211;
  uint64_t v212;
  _BOOL8 v213;
  uint64_t v214;
  _BOOL8 v215;
  _BOOL8 v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _BOOL8 v220;
  uint64_t v221;
  uint64_t v222;
  _BOOL8 v223;
  uint64_t v224;
  _BOOL8 v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _BOOL8 v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _BOOL8 v235;
  uint64_t v236;
  _BOOL8 v237;
  uint64_t v238;
  _BOOL8 v239;
  uint64_t v240;
  _BOOL8 v241;
  uint64_t v242;
  _BOOL8 v243;
  uint64_t v244;
  _BOOL8 v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _BOOL8 v249;
  uint64_t v250;
  _BOOL8 v251;
  uint64_t v252;
  _BOOL8 v253;
  uint64_t v254;
  _BOOL8 v255;
  uint64_t v256;
  _BOOL8 v257;
  uint64_t v258;
  _BOOL8 v259;
  _BOOL8 v260;
  uint64_t v261;
  uint64_t v262;
  _BOOL8 v263;
  uint64_t v264;
  _BOOL8 v265;
  uint64_t v266;
  _BOOL8 v267;
  _BOOL8 v268;
  uint64_t v269;
  uint64_t v270;
  __int128 v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  _BOOL8 v280;
  uint64_t v281;
  _BOOL8 v282;
  uint64_t v283;
  _BOOL8 v284;
  uint64_t v285;
  _BOOL8 v286;
  uint64_t v287;
  _BOOL8 v288;
  uint64_t v289;
  _BOOL8 v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _BOOL8 v294;
  unint64_t v295;
  _BOOL8 v296;
  uint64_t v297;
  _BOOL8 v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  _BOOL8 v302;
  _BOOL8 v303;

  v5 = *a2;
  v4 = a2[1];
  v3 = a2 + 2;
  v7 = *v3;
  v6 = v3[1];
  v3 += 2;
  v9 = *v3;
  v8 = v3[1];
  v10 = v3[2];
  v12 = *a3;
  v13 = a3[1];
  v11 = a3 + 2;
  v14 = *v11;
  v15 = v11[1];
  v11 += 2;
  v16 = *v11;
  v17 = v11[1];
  v18 = v11[2];
  v19 = v5 * v12;
  v20 = (v4 * (unsigned __int128)v12) >> 64;
  v21 = (v7 * (unsigned __int128)v12) >> 64;
  v23 = v12;
  v22 = (__PAIR128__(v4, v5) * v12) >> 64;
  v24 = __CFADD__(__CFADD__((v5 * (unsigned __int128)v12) >> 64, v4 * v12), v20);
  v25 = __CFADD__((v5 * (unsigned __int128)v12) >> 64, v4 * v12) + v20;
  v24 |= __CFADD__(v7 * v12, v25);
  v25 += v7 * v12;
  v26 = (v6 * (unsigned __int128)v12) >> 64;
  v27 = *v3 * v12;
  v28 = (v9 * (unsigned __int128)v12) >> 64;
  v30 = v24;
  v24 = __CFADD__(v24, v21);
  v29 = v30 + v21;
  v24 |= __CFADD__(v6 * v12, v29);
  v29 += v6 * v12;
  v32 = v24;
  v24 = __CFADD__(v24, v26);
  v31 = v32 + v26;
  v24 |= __CFADD__(v27, v31);
  v31 += v27;
  v33 = (v8 * (unsigned __int128)v12) >> 64;
  v34 = (v10 * (unsigned __int128)v12) >> 64;
  v36 = v24;
  v24 = __CFADD__(v24, v28);
  v35 = v36 + v28;
  v24 |= __CFADD__(v8 * v12, v35);
  v35 += v8 * v12;
  v38 = v24;
  v24 = __CFADD__(v24, v33);
  v37 = v38 + v33;
  v24 |= __CFADD__(v10 * v12, v37);
  v37 += v10 * v12;
  v39 = (v10 * (unsigned __int128)v13) >> 64;
  v40 = (v10 * (unsigned __int128)v14) >> 64;
  v42 = v24;
  v24 = __CFADD__(v24, v34);
  v41 = v42 + v34;
  v24 |= __CFADD__(v10 * v13, v41);
  v41 += v10 * v13;
  v44 = v24;
  v24 = __CFADD__(v24, v39);
  v43 = v44 + v39;
  v24 |= __CFADD__(v10 * v14, v43);
  v43 += v10 * v14;
  v45 = (v10 * (unsigned __int128)v15) >> 64;
  v46 = (v10 * (unsigned __int128)v16) >> 64;
  v48 = v24;
  v24 = __CFADD__(v24, v40);
  v47 = v48 + v40;
  v24 |= __CFADD__(v10 * v15, v47);
  v47 += v10 * v15;
  v50 = v24;
  v24 = __CFADD__(v24, v45);
  v49 = v50 + v45;
  v24 |= __CFADD__(v10 * v16, v49);
  v49 += v10 * v16;
  v51 = (v10 * (unsigned __int128)v17) >> 64;
  v53 = v24;
  v24 = __CFADD__(v24, v46);
  v52 = v53 + v46;
  v24 |= __CFADD__(v10 * v17, v52);
  v52 += v10 * v17;
  v55 = v24;
  v24 = __CFADD__(v24, v51);
  v54 = v55 + v51;
  v24 |= __CFADD__(v10 * v18, v54);
  v54 += v10 * v18;
  v56 = v24 + ((v10 * (unsigned __int128)v18) >> 64);
  v57 = (v5 * (unsigned __int128)v13) >> 64;
  v24 = __CFADD__(v22, v5 * v13);
  v58 = (__PAIR128__(v13, v23) * __PAIR128__(v4, v5)) >> 64;
  v60 = v24;
  v24 = __CFADD__(v24, v25);
  v59 = v60 + v25;
  v24 |= __CFADD__(v57, v59);
  v59 += v57;
  v61 = (v7 * (unsigned __int128)v13) >> 64;
  v63 = v24;
  v24 = __CFADD__(v24, v29);
  v62 = v63 + v29;
  v24 |= __CFADD__(v7 * v13, v62);
  v62 += v7 * v13;
  v65 = v24;
  v24 = __CFADD__(v24, v31);
  v64 = v65 + v31;
  v24 |= __CFADD__(v61, v64);
  v64 += v61;
  v66 = (v9 * (unsigned __int128)v13) >> 64;
  v68 = v24;
  v24 = __CFADD__(v24, v35);
  v67 = v68 + v35;
  v24 |= __CFADD__(v9 * v13, v67);
  v67 += v9 * v13;
  v70 = v24;
  v24 = __CFADD__(v24, v37);
  v69 = v70 + v37;
  v24 |= __CFADD__(v66, v69);
  v69 += v66;
  v71 = (v8 * (unsigned __int128)v14) >> 64;
  v73 = v24;
  v24 = __CFADD__(v24, v41);
  v72 = v73 + v41;
  v24 |= __CFADD__(v8 * v14, v72);
  v72 += v8 * v14;
  v75 = v24;
  v24 = __CFADD__(v24, v43);
  v74 = v75 + v43;
  v24 |= __CFADD__(v71, v74);
  v74 += v71;
  v76 = (v8 * (unsigned __int128)v16) >> 64;
  v78 = v24;
  v24 = __CFADD__(v24, v47);
  v77 = v78 + v47;
  v24 |= __CFADD__(v8 * v16, v77);
  v77 += v8 * v16;
  v80 = v24;
  v24 = __CFADD__(v24, v49);
  v79 = v80 + v49;
  v24 |= __CFADD__(v76, v79);
  v79 += v76;
  v81 = (v8 * (unsigned __int128)v18) >> 64;
  v83 = v24;
  v24 = __CFADD__(v24, v52);
  v82 = v83 + v52;
  v24 |= __CFADD__(v8 * v18, v82);
  v82 += v8 * v18;
  v85 = v24;
  v24 = __CFADD__(v24, v54);
  v84 = v85 + v54;
  v24 |= __CFADD__(v81, v84);
  v84 += v81;
  v86 = v24 + v56;
  v87 = (v4 * (unsigned __int128)v13) >> 64;
  v24 = __CFADD__(v59, v4 * v13);
  v88 = v59 + v4 * v13;
  v90 = v24;
  v24 = __CFADD__(v24, v62);
  v89 = v90 + v62;
  v24 |= __CFADD__(v87, v89);
  v89 += v87;
  v91 = (v6 * (unsigned __int128)v13) >> 64;
  v93 = v24;
  v24 = __CFADD__(v24, v64);
  v92 = v93 + v64;
  v24 |= __CFADD__(v6 * v13, v92);
  v92 += v6 * v13;
  v95 = v24;
  v24 = __CFADD__(v24, v67);
  v94 = v95 + v67;
  v24 |= __CFADD__(v91, v94);
  v94 += v91;
  v96 = (v8 * (unsigned __int128)v13) >> 64;
  v98 = v24;
  v24 = __CFADD__(v24, v69);
  v97 = v98 + v69;
  v24 |= __CFADD__(v8 * v13, v97);
  v97 += v8 * v13;
  v100 = v24;
  v24 = __CFADD__(v24, v72);
  v99 = v100 + v72;
  v24 |= __CFADD__(v96, v99);
  v99 += v96;
  v101 = (v8 * (unsigned __int128)v15) >> 64;
  v103 = v24;
  v24 = __CFADD__(v24, v74);
  v102 = v103 + v74;
  v24 |= __CFADD__(v8 * v15, v102);
  v102 += v8 * v15;
  v105 = v24;
  v24 = __CFADD__(v24, v77);
  v104 = v105 + v77;
  v24 |= __CFADD__(v101, v104);
  v104 += v101;
  v106 = (v8 * (unsigned __int128)v17) >> 64;
  v108 = v24;
  v24 = __CFADD__(v24, v79);
  v107 = v108 + v79;
  v24 |= __CFADD__(v8 * v17, v107);
  v107 += v8 * v17;
  v110 = v24;
  v24 = __CFADD__(v24, v82);
  v109 = v110 + v82;
  v24 |= __CFADD__(v106, v109);
  v109 += v106;
  v111 = v24;
  v112 = (v5 * (unsigned __int128)v14) >> 64;
  v24 = __CFADD__(v88, v5 * v14);
  v113 = v88 + v5 * v14;
  v115 = v24;
  v24 = __CFADD__(v24, v89);
  v114 = v115 + v89;
  v24 |= __CFADD__(v112, v114);
  v114 += v112;
  v116 = (v7 * (unsigned __int128)v14) >> 64;
  v118 = v24;
  v24 = __CFADD__(v24, v92);
  v117 = v118 + v92;
  v24 |= __CFADD__(v7 * v14, v117);
  v117 += v7 * v14;
  v120 = v24;
  v24 = __CFADD__(v24, v94);
  v119 = v120 + v94;
  v24 |= __CFADD__(v116, v119);
  v119 += v116;
  v121 = (v9 * (unsigned __int128)v14) >> 64;
  v123 = v24;
  v24 = __CFADD__(v24, v97);
  v122 = v123 + v97;
  v24 |= __CFADD__(v9 * v14, v122);
  v122 += v9 * v14;
  v125 = v24;
  v24 = __CFADD__(v24, v99);
  v124 = v125 + v99;
  v24 |= __CFADD__(v121, v124);
  v124 += v121;
  v126 = (v9 * (unsigned __int128)v16) >> 64;
  v128 = v24;
  v24 = __CFADD__(v24, v102);
  v127 = v128 + v102;
  v24 |= __CFADD__(v9 * v16, v127);
  v127 += v9 * v16;
  v130 = v24;
  v24 = __CFADD__(v24, v104);
  v129 = v130 + v104;
  v24 |= __CFADD__(v126, v129);
  v129 += v126;
  v131 = (v9 * (unsigned __int128)v18) >> 64;
  v133 = v24;
  v24 = __CFADD__(v24, v107);
  v132 = v133 + v107;
  v24 |= __CFADD__(v9 * v18, v132);
  v132 += v9 * v18;
  v135 = v24;
  v24 = __CFADD__(v24, v109);
  v134 = v135 + v109;
  v24 |= __CFADD__(v131, v134);
  v134 += v131;
  v136 = v24 + v111;
  v137 = (v4 * (unsigned __int128)v14) >> 64;
  v24 = __CFADD__(v114, v4 * v14);
  v138 = v114 + v4 * v14;
  v140 = v24;
  v24 = __CFADD__(v24, v117);
  v139 = v140 + v117;
  v24 |= __CFADD__(v137, v139);
  v139 += v137;
  v141 = (v6 * (unsigned __int128)v14) >> 64;
  v143 = v24;
  v24 = __CFADD__(v24, v119);
  v142 = v143 + v119;
  v24 |= __CFADD__(v6 * v14, v142);
  v142 += v6 * v14;
  v145 = v24;
  v24 = __CFADD__(v24, v122);
  v144 = v145 + v122;
  v24 |= __CFADD__(v141, v144);
  v144 += v141;
  v146 = (v9 * (unsigned __int128)v15) >> 64;
  v148 = v24;
  v24 = __CFADD__(v24, v124);
  v147 = v148 + v124;
  v24 |= __CFADD__(v9 * v15, v147);
  v147 += v9 * v15;
  v150 = v24;
  v24 = __CFADD__(v24, v127);
  v149 = v150 + v127;
  v24 |= __CFADD__(v146, v149);
  v149 += v146;
  v151 = (v9 * (unsigned __int128)v17) >> 64;
  v153 = v24;
  v24 = __CFADD__(v24, v129);
  v152 = v153 + v129;
  v24 |= __CFADD__(v9 * v17, v152);
  v152 += v9 * v17;
  v155 = v24;
  v24 = __CFADD__(v24, v132);
  v154 = v155 + v132;
  v24 |= __CFADD__(v151, v154);
  v154 += v151;
  v156 = v24;
  v157 = (v5 * (unsigned __int128)v15) >> 64;
  v24 = __CFADD__(v138, v5 * v15);
  v158 = v138 + v5 * v15;
  v160 = v24;
  v24 = __CFADD__(v24, v139);
  v159 = v160 + v139;
  v24 |= __CFADD__(v157, v159);
  v159 += v157;
  v161 = (v7 * (unsigned __int128)v15) >> 64;
  v163 = v24;
  v24 = __CFADD__(v24, v142);
  v162 = v163 + v142;
  v24 |= __CFADD__(v7 * v15, v162);
  v162 += v7 * v15;
  v165 = v24;
  v24 = __CFADD__(v24, v144);
  v164 = v165 + v144;
  v24 |= __CFADD__(v161, v164);
  v164 += v161;
  v166 = (v6 * (unsigned __int128)v16) >> 64;
  v168 = v24;
  v24 = __CFADD__(v24, v147);
  v167 = v168 + v147;
  v24 |= __CFADD__(v6 * v16, v167);
  v167 += v6 * v16;
  v170 = v24;
  v24 = __CFADD__(v24, v149);
  v169 = v170 + v149;
  v24 |= __CFADD__(v166, v169);
  v169 += v166;
  v171 = (v6 * (unsigned __int128)v18) >> 64;
  v173 = v24;
  v24 = __CFADD__(v24, v152);
  v172 = v173 + v152;
  v24 |= __CFADD__(v6 * v18, v172);
  v172 += v6 * v18;
  v175 = v24;
  v24 = __CFADD__(v24, v154);
  v174 = v175 + v154;
  v24 |= __CFADD__(v171, v174);
  v174 += v171;
  v176 = v24 + v156;
  v177 = (v4 * (unsigned __int128)v15) >> 64;
  v24 = __CFADD__(v159, v4 * v15);
  v178 = v159 + v4 * v15;
  v180 = v24;
  v24 = __CFADD__(v24, v162);
  v179 = v180 + v162;
  v24 |= __CFADD__(v177, v179);
  v179 += v177;
  v181 = (v6 * (unsigned __int128)v15) >> 64;
  v183 = v24;
  v24 = __CFADD__(v24, v164);
  v182 = v183 + v164;
  v24 |= __CFADD__(v6 * v15, v182);
  v182 += v6 * v15;
  v185 = v24;
  v24 = __CFADD__(v24, v167);
  v184 = v185 + v167;
  v24 |= __CFADD__(v181, v184);
  v184 += v181;
  v186 = (v6 * (unsigned __int128)v17) >> 64;
  v188 = v24;
  v24 = __CFADD__(v24, v169);
  v187 = v188 + v169;
  v24 |= __CFADD__(v6 * v17, v187);
  v187 += v6 * v17;
  v190 = v24;
  v24 = __CFADD__(v24, v172);
  v189 = v190 + v172;
  v24 |= __CFADD__(v186, v189);
  v189 += v186;
  v191 = v24;
  v192 = (v5 * (unsigned __int128)v16) >> 64;
  v24 = __CFADD__(v178, v5 * v16);
  v193 = v178 + v5 * v16;
  v195 = v24;
  v24 = __CFADD__(v24, v179);
  v194 = v195 + v179;
  v24 |= __CFADD__(v192, v194);
  v194 += v192;
  v196 = (v7 * (unsigned __int128)v16) >> 64;
  v198 = v24;
  v24 = __CFADD__(v24, v182);
  v197 = v198 + v182;
  v24 |= __CFADD__(v7 * v16, v197);
  v197 += v7 * v16;
  v200 = v24;
  v24 = __CFADD__(v24, v184);
  v199 = v200 + v184;
  v24 |= __CFADD__(v196, v199);
  v199 += v196;
  v201 = (v7 * (unsigned __int128)v18) >> 64;
  v203 = v24;
  v24 = __CFADD__(v24, v187);
  v202 = v203 + v187;
  v24 |= __CFADD__(v7 * v18, v202);
  v202 += v7 * v18;
  v205 = v24;
  v24 = __CFADD__(v24, v189);
  v204 = v205 + v189;
  v24 |= __CFADD__(v201, v204);
  v204 += v201;
  v206 = v24 + v191;
  v207 = (v4 * (unsigned __int128)v16) >> 64;
  v24 = __CFADD__(v194, v4 * v16);
  v208 = v194 + v4 * v16;
  v210 = v24;
  v24 = __CFADD__(v24, v197);
  v209 = v210 + v197;
  v24 |= __CFADD__(v207, v209);
  v209 += v207;
  v211 = (v7 * (unsigned __int128)v17) >> 64;
  v213 = v24;
  v24 = __CFADD__(v24, v199);
  v212 = v213 + v199;
  v24 |= __CFADD__(v7 * v17, v212);
  v212 += v7 * v17;
  v215 = v24;
  v24 = __CFADD__(v24, v202);
  v214 = v215 + v202;
  v24 |= __CFADD__(v211, v214);
  v214 += v211;
  v216 = v24;
  v217 = (v5 * (unsigned __int128)v17) >> 64;
  v24 = __CFADD__(v208, v5 * v17);
  v218 = v208 + v5 * v17;
  v220 = v24;
  v24 = __CFADD__(v24, v209);
  v219 = v220 + v209;
  v24 |= __CFADD__(v217, v219);
  v219 += v217;
  v221 = (v4 * (unsigned __int128)v18) >> 64;
  v223 = v24;
  v24 = __CFADD__(v24, v212);
  v222 = v223 + v212;
  v24 |= __CFADD__(v4 * v18, v222);
  v222 += v4 * v18;
  v225 = v24;
  v24 = __CFADD__(v24, v214);
  v224 = v225 + v214;
  v24 |= __CFADD__(v221, v224);
  v224 += v221;
  v226 = v24 + v216;
  v227 = (v4 * (unsigned __int128)v17) >> 64;
  v24 = __CFADD__(v219, v4 * v17);
  v228 = v219 + v4 * v17;
  v230 = v24;
  v24 = __CFADD__(v24, v222);
  v229 = v230 + v222;
  v24 |= __CFADD__(v227, v229);
  v229 += v227;
  v231 = v24;
  v232 = (v5 * (unsigned __int128)v18) >> 64;
  v24 = __CFADD__(v228, v5 * v18);
  v233 = v228 + v5 * v18;
  v235 = v24;
  v24 = __CFADD__(v24, v229);
  v234 = v235 + v229;
  v24 |= __CFADD__(v232, v234);
  v234 += v232;
  v237 = v24;
  v24 = __CFADD__(v24, v224);
  v236 = v237 + v224;
  v24 |= __CFADD__(v231, v236);
  v236 += v231;
  v239 = v24;
  v24 = __CFADD__(v24, v204);
  v238 = v239 + v204;
  v24 |= __CFADD__(v226, v238);
  v238 += v226;
  v241 = v24;
  v24 = __CFADD__(v24, v174);
  v240 = v241 + v174;
  v24 |= __CFADD__(v206, v240);
  v240 += v206;
  v243 = v24;
  v24 = __CFADD__(v24, v134);
  v242 = v243 + v134;
  v24 |= __CFADD__(v176, v242);
  v242 += v176;
  v245 = v24;
  v24 = __CFADD__(v24, v84);
  v244 = v245 + v84;
  v24 |= __CFADD__(v136, v244);
  v244 += v136;
  v246 = v24 + v86;
  v24 = __CFADD__(v19, v234);
  v247 = v19 + v234;
  v249 = v24;
  v24 = __CFADD__(v24, v58);
  v248 = v249 + v58;
  v24 |= __CFADD__(v236, v248);
  v248 += v236;
  v251 = v24;
  v24 = __CFADD__(v24, v113);
  v250 = v251 + v113;
  v24 |= __CFADD__(v238, v250);
  v250 += v238;
  v253 = v24;
  v24 = __CFADD__(v24, v158);
  v252 = v253 + v158;
  v24 |= __CFADD__(v240, v252);
  v252 += v240;
  v255 = v24;
  v24 = __CFADD__(v24, v193);
  v254 = v255 + v193;
  v24 |= __CFADD__(v242, v254);
  v254 += v242;
  v257 = v24;
  v24 = __CFADD__(v24, v218);
  v256 = v257 + v218;
  v24 |= __CFADD__(v244, v256);
  v256 += v244;
  v259 = v24;
  v24 = __CFADD__(v24, v233);
  v258 = v259 + v233;
  v24 |= __CFADD__(v246, v258);
  v258 += v246;
  v260 = v24;
  v24 = __CFADD__(v252, v240 & 0xFFFFFFFF00000000);
  v261 = v252 + (v240 & 0xFFFFFFFF00000000);
  v263 = v24;
  v24 = __CFADD__(v24, v254);
  v262 = v263 + v254;
  v24 |= __CFADD__(v242, v262);
  v262 += v242;
  v265 = v24;
  v24 = __CFADD__(v24, v256);
  v264 = v265 + v256;
  v24 |= __CFADD__(v244, v264);
  v264 += v244;
  v267 = v24;
  v24 = __CFADD__(v24, v258);
  v266 = v267 + v258;
  v24 |= __CFADD__(v246, v266);
  v266 += v246;
  v268 = v24 + v260;
  v269 = v240;
  *((_QWORD *)&v271 + 1) = v242;
  *(_QWORD *)&v271 = v240;
  v270 = v271 >> 32;
  *((_QWORD *)&v271 + 1) = v244;
  *(_QWORD *)&v271 = v242;
  v272 = v271 >> 32;
  *((_QWORD *)&v271 + 1) = v246;
  *(_QWORD *)&v271 = v244;
  v273 = v271 >> 32;
  *((_QWORD *)&v271 + 1) = v234;
  *(_QWORD *)&v271 = v246;
  v274 = v271 >> 32;
  *((_QWORD *)&v271 + 1) = v236;
  *(_QWORD *)&v271 = v234;
  v275 = v271 >> 32;
  *((_QWORD *)&v271 + 1) = v238;
  *(_QWORD *)&v271 = v236;
  v276 = v271 >> 32;
  *((_QWORD *)&v271 + 1) = v269;
  *(_QWORD *)&v271 = v238;
  v277 = v271 >> 32;
  v24 = __CFADD__(v247, v270);
  v278 = v247 + v270;
  v280 = v24;
  v24 = __CFADD__(v24, v248);
  v279 = v280 + v248;
  v24 |= __CFADD__(v272, v279);
  v279 += v272;
  v282 = v24;
  v24 = __CFADD__(v24, v250);
  v281 = v282 + v250;
  v24 |= __CFADD__(v273, v281);
  v281 += v273;
  v284 = v24;
  v24 = __CFADD__(v24, v261);
  v283 = v284 + v261;
  v24 |= __CFADD__(v274, v283);
  v283 += v274;
  v286 = v24;
  v24 = __CFADD__(v24, v262);
  v285 = v286 + v262;
  v24 |= __CFADD__(v275, v285);
  v285 += v275;
  v288 = v24;
  v24 = __CFADD__(v24, v264);
  v287 = v288 + v264;
  v24 |= __CFADD__(v276, v287);
  v287 += v276;
  v290 = v24;
  v24 = __CFADD__(v24, v266);
  v289 = v290 + v266;
  v24 |= __CFADD__(v277, v289);
  v289 += v277;
  v291 = v24 + v268;
  v24 = __CFADD__(v278, v291);
  v292 = v278 + v291;
  v294 = v24;
  v24 = __CFADD__(v24, v279);
  v293 = v294 + v279;
  v296 = v24;
  v24 = __CFADD__(v24, v281);
  v295 = v296 + v281;
  v291 <<= 32;
  v298 = v24;
  v24 = __CFADD__(v24, v283);
  v297 = v298 + v283;
  v300 = v24 | __CFADD__(v291, v297);
  v24 = __CFADD__(v300, v285);
  v299 = v300 + v285;
  v302 = v24;
  v24 = __CFADD__(v24, v287);
  v301 = v302 + v287;
  v303 = v24;
  v24 = __CFADD__(v24, v289);
  *(_QWORD *)a1 = v292 + v24;
  *(_QWORD *)(a1 + 8) = __CFADD__(v292, v24) + v293;
  *(_OWORD *)(a1 + 16) = __PAIR128__((unint64_t)v24 << 32, __CFADD__(__CFADD__(v292, v24), v293))
                       + __PAIR128__(v291 + v297, v295);
  *(_QWORD *)(a1 + 32) = v299;
  *(_QWORD *)(a1 + 40) = v301;
  *(_QWORD *)(a1 + 48) = v303 + v289;
  return a1 + 56;
}

void ccn_sqrmod_p448()
{
  JUMPOUT(0x1DEDCB844);
}

unint64_t cche_galois_key_nof_n(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;

  v4 = ((unint64_t)(sizeof_struct_cche_galois_key() + 7) >> 3) + ((4 * (unint64_t)a2 + 7) >> 3);
  v5 = cche_param_ctx_key_ctx_nmoduli(a1);
  if ((v5 - 1) <= 1)
    v6 = 1;
  else
    v6 = v5 - 1;
  v7 = cche_param_ctx_polynomial_degree(a1);
  v8 = v6 * a2;
  v9 = cche_ciphertext_fresh_npolys();
  v10 = sizeof_struct_ccrns_mul_modulus();
  v11 = sizeof_struct_ccpolyzp_po2cyc();
  return v4
       + ((v10 + v11 - 1) / v11
        + ((v7 * v5) + ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3)) * v9)
       * v8;
}

uint64_t cche_galois_key_ciphertext(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v6 = *(unsigned int *)(a1 + 8);
  v7 = cche_param_ctx_chain_const(*(_QWORD *)a1);
  v8 = *(_DWORD *)(v7 + 12);
  v9 = v8 - 1;
  if ((v8 - 1) <= 1)
    v9 = 1;
  v10 = a1 + ((4 * v6 + 7) & 0x7FFFFFFF8);
  v11 = (v9 * a2);
  v12 = cche_ciphertext_fresh_npolys();
  v13 = sizeof_struct_ccrns_mul_modulus();
  v14 = sizeof_struct_ccpolyzp_po2cyc();
  v15 = (v13 + v14 - 1) / v14
      + ((*(_DWORD *)(v7 + 8) * v8) + ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3))
      * v12;
  return v10 + 8 * v15 * v11 + 8 * v15 * a3 + 16;
}

uint64_t cche_galois_key_generate_ws(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int **a5, uint64_t a6, int a7, uint64_t a8, uint64_t (**a9)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v11;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int8x8_t v24;
  uint64_t result;
  uint8x8_t v26;
  uint64_t (*v27)(uint64_t, unint64_t);
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  int v66;

  if (a3)
  {
    v11 = a6;
    v14 = cche_param_ctx_ciphertext_ctx_nmoduli(a6);
    v15 = v14;
    if (!a7 || cche_rng_seed_sizeof() * (v14 * a3) == a7)
    {
      v16 = 0;
      *(_QWORD *)a2 = v11;
      *(_DWORD *)(a2 + 8) = a3;
      while (!v16)
      {
LABEL_9:
        if (++v16 == a3)
        {
          v18 = 0;
          v61 = a8;
          v64 = (unsigned int *)v11;
          v60 = a4;
          v58 = v15;
          v59 = a3;
          while (1)
          {
            v19 = a8 ? a8 + cche_rng_seed_sizeof() * v18 * v15 : 0;
            v20 = *(_DWORD *)(a4 + 4 * v18);
            v21 = cche_param_ctx_chain_const(v11);
            if (*(_DWORD *)(v21 + 12) < 2u)
              return 4294967289;
            v22 = v21;
            v23 = cche_param_ctx_polynomial_degree(v11);
            result = 4294967289;
            if (v23 > 0x100000)
              return result;
            v24.i32[0] = v23;
            v26 = (uint8x8_t)vcnt_s8(v24);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.i32[0] != 1 || v20 < 2 || (v20 & 1) == 0 || 2 * v23 <= v20 || *(_DWORD *)(a2 + 8) <= v18)
              return result;
            v66 = v18;
            *(_DWORD *)(a2 + 16 + 4 * v18) = v20;
            v27 = *(uint64_t (**)(uint64_t, unint64_t))(a1 + 24);
            v62 = *(_QWORD *)(a1 + 16);
            v28 = sizeof_struct_ccpolyzp_po2cyc();
            v29 = (uint64_t *)v27(a1, (*(_DWORD *)(v22 + 12) * *(_DWORD *)(v22 + 8))+ ((unint64_t)(v28 + 7) >> 3));
            *v29 = (uint64_t)*a5;
            result = ccpolyzp_po2cyc_eval_apply_galois(v29, a5, v20);
            if ((_DWORD)result)
              goto LABEL_47;
            v63 = (*(_DWORD *)(v22 + 12) - 1);
            if (*(_DWORD *)(v22 + 12) != 1)
            {
              v30 = 0;
              v31 = v23;
              while (1)
              {
                v32 = (*(_DWORD *)(v22 + 12) - 1);
                v33 = (_QWORD *)(v22 + 8);
                if (v30 < v32)
                {
                  v33 = (_QWORD *)(v22 + 8);
                  do
                  {
                    v33 = (_QWORD *)v33[14];
                    LODWORD(v32) = v32 - 1;
                  }
                  while (v32 > v30);
                }
                v34 = cche_galois_key_ciphertext(a2, v66, v30);
                v35 = *(_DWORD *)(v22 + 12);
                v36 = v19 ? v19 + cche_rng_seed_sizeof() * v30 : 0;
                result = cche_encrypt_zero_symmetric_eval_ws(a1, v34, v64, (uint64_t *)a5, v35, v36, a9);
                if ((_DWORD)result)
                  break;
                v37 = v33[2];
                v38 = *(_QWORD *)(v22 + 24)
                    - v37 * (((unint64_t)v33[3] * (unsigned __int128)*(unint64_t *)(v22 + 24)) >> 64);
                v39 = v38 - v37;
                if (v39 >= 0)
                  v38 = v39;
                v40 = v34 + 32;
                v41 = *(_DWORD *)*v29 * v30;
                v42 = **(_DWORD **)(v34 + 24) * v30;
                v43 = v31;
                do
                {
                  v44 = v29[v41 + 1];
                  v45 = ((unint64_t)v44 * (unsigned __int128)(unint64_t)v38) >> 64;
                  v46 = v44 * v38;
                  v47 = v33[4];
                  v48 = ((unint64_t)v46 * (unsigned __int128)v47) >> 64;
                  v49 = (v45 * (unsigned __int128)v47) >> 64;
                  v50 = v45 * v47;
                  v51 = __CFADD__(v48, v50);
                  v52 = v48 + v50;
                  v53 = v51;
                  v54 = v53
                      + __CFADD__(v46 * v33[5], v52)
                      + v49
                      + v33[5] * v45
                      + (((unint64_t)v46 * (unsigned __int128)(unint64_t)v33[5]) >> 64);
                  v55 = v33[2];
                  v56 = v46 - v54 * v55;
                  if (v56 - v55 >= 0)
                    v56 -= v55;
                  v57 = v56 + *(_QWORD *)(v40 + 8 * v42);
                  if (v57 - v55 >= 0)
                    v57 -= v55;
                  *(_QWORD *)(v40 + 8 * v42) = v57;
                  ++v41;
                  ++v42;
                  --v43;
                }
                while (v43);
                if (++v30 == v63)
                  goto LABEL_43;
              }
LABEL_47:
              *(_QWORD *)(a1 + 16) = v62;
              return result;
            }
LABEL_43:
            *(_QWORD *)(a1 + 16) = v62;
            v18 = v66 + 1;
            v15 = v58;
            a4 = v60;
            a8 = v61;
            v11 = (uint64_t)v64;
            if (v66 + 1 == v59)
              return 0;
          }
        }
      }
      v17 = 0;
      while (*(_DWORD *)(a4 + 4 * v17) != *(_DWORD *)(a4 + 4 * v16))
      {
        if (v16 == ++v17)
          goto LABEL_9;
      }
    }
  }
  return 4294967289;
}

uint64_t cche_galois_key_generate(uint64_t a1, int a2, uint64_t a3, unsigned int **a4, uint64_t a5, int a6, uint64_t a7, uint64_t (**a8)(_QWORD, uint64_t, uint64_t))
{
  char v14;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t ws;
  _QWORD v32[4];
  void (*v33)(uint64_t);
  char v34;

  v14 = 0;
  v34 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v14 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v14 = 1;
    }
  }
  v34 = v14;
  v20 = cche_param_ctx_key_ctx_nmoduli(a5);
  v21 = cche_param_ctx_polynomial_degree(a5);
  v22 = v21;
  v23 = CCPOLYZP_PO2CYC_WORKSPACE_N(v21, v20);
  v24 = CCHE_ENCRYPT_ZERO_SYMMETRIC_EVAL_WORKSPACE_N(v22, v20);
  v32[0] = cc_malloc_clear(8 * (v24 + v23));
  v25 = cche_param_ctx_polynomial_degree(a5);
  v26 = v25;
  v27 = CCPOLYZP_PO2CYC_WORKSPACE_N(v25, v20);
  v32[1] = CCHE_ENCRYPT_ZERO_SYMMETRIC_EVAL_WORKSPACE_N(v26, v20) + v27;
  v32[2] = 0;
  v32[3] = cc_ws_alloc;
  v33 = cc_ws_free;
  if (v32[0])
  {
    ws = cche_galois_key_generate_ws((uint64_t)v32, a1, a2, a3, a4, a5, a6, a7, a8);
    v33((uint64_t)v32);
  }
  else
  {
    ws = 4294967283;
  }
  cc_disable_dit(&v34);
  return ws;
}

uint64_t cche_galois_key_save_ws(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;

  v8 = cche_param_ctx_chain_const(*(_QWORD *)a4);
  v9 = *(_DWORD *)(a4 + 8);
  v10 = *(_DWORD *)(v8 + 12) - 1;
  v11 = ccpolyzp_po2cyc_serialize_poly_nbytes((unsigned int *)(v8 + 8), 0);
  if (v11 * (v10 * v9) != a2)
    return 4294967289;
  if (!v9)
    return 0;
  v12 = v11;
  v13 = 0;
  while (!v10)
  {
LABEL_8:
    if (++v13 == v9)
      return 0;
  }
  v14 = 0;
  while (1)
  {
    v15 = cche_galois_key_ciphertext(a4, v13, v14);
    result = ccpolyzp_po2cyc_serialize_poly_ws(a1, v12, a3, 0, (unsigned int **)(v15 + 24));
    if ((_DWORD)result)
      return result;
    a3 += v12;
    if (v10 == ++v14)
      goto LABEL_8;
  }
}

uint64_t cche_galois_key_save(int a1, uint64_t a2, uint64_t *a3)
{
  char v6;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD v17[4];
  void (*v18)(uint64_t);
  char v19;

  v6 = 0;
  v19 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v19 = v6;
  v12 = cche_param_ctx_polynomial_degree(*a3);
  v13 = CCPOLYZP_PO2CYC_SERIALIZE_POLY_WORKSPACE_N(v12);
  v17[0] = cc_malloc_clear(8 * v13);
  v14 = cche_param_ctx_polynomial_degree(*a3);
  v17[1] = CCPOLYZP_PO2CYC_SERIALIZE_POLY_WORKSPACE_N(v14);
  v17[2] = 0;
  v17[3] = cc_ws_alloc;
  v18 = cc_ws_free;
  if (v17[0])
  {
    v15 = cche_galois_key_save_ws((uint64_t)v17, a1, a2, (uint64_t)a3);
    v18((uint64_t)v17);
  }
  else
  {
    v15 = 4294967283;
  }
  cc_disable_dit(&v19);
  return v15;
}

uint64_t cche_galois_key_load_ws(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int8x8_t v30;
  uint64_t result;
  uint8x8_t v32;
  int v33;
  _DWORD *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  _DWORD **v43;
  uint64_t v44;
  uint64_t i;
  _DWORD *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v55;
  uint64_t v56;

  if (a3)
  {
    v12 = a5;
    v15 = cche_param_ctx_chain_const(a5);
    v16 = *(_DWORD *)(v15 + 12) - 1;
    v17 = ccpolyzp_po2cyc_serialize_poly_nbytes((unsigned int *)(v15 + 8), 0);
    v18 = cche_rng_seed_sizeof();
    v19 = (v16 * a3);
    v20 = v17 * v19;
    v56 = v18;
    v21 = v18 * v19;
    if (v20 == a6 && v21 == a8)
    {
      v23 = 0;
      *(_QWORD *)a2 = v12;
      *(_DWORD *)(a2 + 8) = a3;
      while (!v23)
      {
LABEL_12:
        if (++v23 == a3)
        {
          v47 = v17;
          v48 = v16;
          v49 = a7;
          v25 = 0;
          v51 = a4;
          v50 = a3;
          while (1)
          {
            v26 = *(_DWORD *)(a4 + 4 * v25);
            v27 = cche_param_ctx_chain_const(v12);
            if (*(_DWORD *)(v27 + 12) < 2u)
              return 4294967289;
            v28 = v27;
            v29 = cche_param_ctx_polynomial_degree(v12);
            result = 4294967289;
            if (v29 > 0x100000)
              return result;
            v30.i32[0] = v29;
            v32 = (uint8x8_t)vcnt_s8(v30);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.i32[0] != 1)
              return result;
            if (v26 < 2)
              return result;
            if ((v26 & 1) == 0)
              return result;
            if (2 * v29 <= v26)
              return result;
            v33 = v25;
            if (*(_DWORD *)(a2 + 8) <= v25)
              return result;
            v34 = (_DWORD *)(v28 + 8);
            v35 = ccpolyzp_po2cyc_serialize_poly_nbytes((unsigned int *)(v28 + 8), 0);
            *(_DWORD *)(a2 + 16 + 4 * v25) = v26;
            v55 = *(_DWORD *)(v28 + 12) - 1;
            if (*(_DWORD *)(v28 + 12) != 1)
            {
              v36 = 0;
              v37 = v25 * v48;
              v38 = v49 + v47 * v37;
              v39 = a9 + v56 * v37;
              v52 = v25;
              v53 = v35;
              do
              {
                v40 = cche_galois_key_ciphertext(a2, v33, v36);
                v41 = cche_ciphertext_fresh_npolys();
                v42 = v12;
                *(_QWORD *)v40 = v12;
                *(_DWORD *)(v40 + 8) = v41;
                *(_QWORD *)(v40 + 16) = 1;
                *(_QWORD *)(v40 + 24) = v34;
                v43 = (_DWORD **)(v40 + 24);
                if (v41 >= 2)
                {
                  v44 = v41;
                  for (i = 1; i != v44; ++i)
                  {
                    v46 = *v43;
                    v43[((v46[1] * *v46) + ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3))
                      * i] = v34;
                  }
                }
                result = cche_deserialize_seeded_ciphertext_eval_ws(a1, v40, v53, v38, v39);
                if ((_DWORD)result)
                  return result;
                v38 += v53;
                v39 += v56;
                ++v36;
                v12 = v42;
                v33 = v52;
              }
              while (v36 != v55);
            }
            v25 = v33 + 1;
            a4 = v51;
            if (v33 + 1 == v50)
              return 0;
          }
        }
      }
      v24 = 0;
      while (*(_DWORD *)(a4 + 4 * v24) != *(_DWORD *)(a4 + 4 * v23))
      {
        if (v23 == ++v24)
          goto LABEL_12;
      }
    }
  }
  return 4294967289;
}

uint64_t cche_galois_key_load(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8)
{
  char v16;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t ws;
  _QWORD v27[4];
  void (*v28)(uint64_t);
  char v29;

  v16 = 0;
  v29 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v16 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v16 = 1;
    }
  }
  v29 = v16;
  v22 = cche_param_ctx_polynomial_degree(a4);
  v23 = CCHE_DESERIALIZE_SEEDED_CIPHERTEXT_EVAL_WORKSPACE_N(v22);
  v27[0] = cc_malloc_clear(8 * v23);
  v24 = cche_param_ctx_polynomial_degree(a4);
  v27[1] = CCHE_DESERIALIZE_SEEDED_CIPHERTEXT_EVAL_WORKSPACE_N(v24);
  v27[2] = 0;
  v27[3] = cc_ws_alloc;
  v28 = cc_ws_free;
  if (v27[0])
  {
    ws = cche_galois_key_load_ws((uint64_t)v27, a1, a2, a3, a4, a5, a6, a7, a8);
    v28((uint64_t)v27);
  }
  else
  {
    ws = 4294967283;
  }
  cc_disable_dit(&v29);
  return ws;
}

unint64_t CCHE_CIPHERTEXT_GALOIS_KEY_SWITCH_WORKSPACE_N(uint64_t a1, int a2)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = cche_ciphertext_fresh_npolys();
  v5 = sizeof_struct_ccrns_mul_modulus();
  v6 = sizeof_struct_ccpolyzp_po2cyc();
  v7 = (v5 + v6 - 1) / v6;
  v8 = sizeof_struct_ccpolyzp_po2cyc() + 7;
  v9 = sizeof_struct_ccpolyzp_po2cyc_ctx() + 7;
  if (a1 >= 0x80)
    v10 = 128;
  else
    v10 = a1;
  v11 = ((unint64_t)(sizeof_struct_ccrns_mul_modulus() + 7) >> 3) * v10 + a1;
  return v7
       + a1
       + (v8 >> 3)
       + (v9 >> 3)
       + CCHE_CIPHERTEXT_MOD_SWITCH_DOWN_WORKSPACE_N(a1, a2)
       + ((a2 * a1) + 2 * a1 + (v8 >> 3)) * v4
       + 2 * v11
       + 6;
}

uint64_t cche_ciphertext_apply_galois_ws(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  unint64_t v5;
  _BOOL4 v11;
  unint64_t v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  _DWORD **v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;

  v5 = *(unsigned int *)(a5 + 8);
  if (!(_DWORD)v5)
    return 4294967289;
  if (*(_DWORD *)(a5 + 16) != a4)
  {
    v12 = 0;
    while (v5 - 1 != v12)
    {
      v13 = *(_DWORD *)(a5 + 20 + 4 * v12++);
      if (v13 == a4)
      {
        v11 = v12 < v5;
        goto LABEL_8;
      }
    }
    return 4294967289;
  }
  v11 = 1;
LABEL_8:
  result = 4294967289;
  if (a2 != a3 && v11)
  {
    if (*(_DWORD *)(a3 + 8))
    {
      v15 = 0;
      v16 = (_DWORD **)(a3 + 24);
      v17 = a2 + 24;
      while (1)
      {
        v18 = *v16;
        v19 = sizeof_struct_ccpolyzp_po2cyc();
        result = ccpolyzp_po2cyc_coeff_apply_galois((uint64_t *)(v17+ 8* ((*(_DWORD *)(*(_QWORD *)v17 + 4) * **(_DWORD **)v17)+ ((unint64_t)(v19 + 7) >> 3))* v15), &v16[((v18[1] * *v18) + ((unint64_t)(v19 + 7) >> 3)) * v15], a4);
        if ((_DWORD)result)
          break;
        if (++v15 >= (unint64_t)*(unsigned int *)(a3 + 8))
          return cche_ciphertext_galois_key_switch_ws(a1, a2, a4, a5);
      }
    }
    else
    {
      return cche_ciphertext_galois_key_switch_ws(a1, a2, a4, a5);
    }
  }
  return result;
}

uint64_t cche_ciphertext_galois_key_switch_ws(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t (*v12)(uint64_t, unint64_t);
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _DWORD **v21;
  uint64_t v22;
  uint64_t i;
  _DWORD *v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  char *v31;
  uint64_t (*v32)(uint64_t, unint64_t);
  uint64_t v33;
  uint64_t (*v34)(uint64_t, unint64_t);
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  _QWORD *v41;
  rsize_t v42;
  unsigned int v43;
  int v44;
  _QWORD *v45;
  unsigned int v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  size_t v51;
  unsigned int v52;
  unsigned int v53;
  _QWORD *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD **v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD **v70;
  _DWORD **v71;
  _DWORD *v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t result;
  int *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int **v94;
  _DWORD **v95;
  _QWORD *v96;
  _DWORD *__dst;
  int **v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  _QWORD *v104;
  unsigned int **v105;
  uint64_t v106;
  _DWORD **v107;
  uint64_t v108;
  int v109;
  int v110;
  uint64_t v112;
  uint64_t v113[4];

  v113[2] = *MEMORY[0x1E0C874D8];
  v4 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v4)
  {
    if (*(_DWORD *)(a4 + 16) != a3)
    {
      v7 = 0;
      while (v4 - 1 != v7)
      {
        v8 = *(_DWORD *)(a4 + 20 + 4 * v7++);
        if (v8 == a3)
        {
          if (v7 >= v4)
            return 4294967289;
          goto LABEL_7;
        }
      }
      return 4294967289;
    }
LABEL_7:
    v9 = *(_DWORD *)(a2 + 8);
    if (v9 == cche_ciphertext_fresh_npolys())
    {
      v93 = *(_QWORD *)(a1 + 16);
      v10 = cche_param_ctx_chain_const(*(_QWORD *)a4);
      v11 = *(_DWORD *)(v10 + 12);
      v98 = (int **)(a2 + 24);
      v103 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4);
      v12 = *(uint64_t (**)(uint64_t, unint64_t))(a1 + 24);
      v13 = cche_ciphertext_fresh_npolys();
      v14 = sizeof_struct_ccrns_mul_modulus();
      v15 = sizeof_struct_ccpolyzp_po2cyc();
      v16 = sizeof_struct_ccpolyzp_po2cyc();
      v102 = v10;
      v17 = (unsigned int *)(v10 + 8);
      v101 = v11;
      v18 = v12(a1, (v14 + v15 - 1) / v15+ ((*(_DWORD *)(v10 + 8) * v11) + ((unint64_t)(v16 + 7) >> 3)) * v13);
      v99 = a4;
      v19 = *(_QWORD *)a4;
      v20 = cche_ciphertext_fresh_npolys();
      *(_QWORD *)v18 = v19;
      *(_DWORD *)(v18 + 8) = v20;
      *(_QWORD *)(v18 + 16) = 1;
      v92 = v18;
      *(_QWORD *)(v18 + 24) = v17;
      v21 = (_DWORD **)(v18 + 24);
      if (v20 >= 2)
      {
        v22 = v20;
        for (i = 1; i != v22; ++i)
        {
          v24 = *v21;
          v21[((v24[1] * *v24) + ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3)) * i] = v17;
        }
      }
      v96 = v21;
      v104 = v17;
      v25 = *v17;
      v26 = *(int **)(a2 + 24);
      v27 = sizeof_struct_ccpolyzp_po2cyc();
      v28 = *v26;
      v29 = v26[1];
      v106 = *(unsigned int *)(a2 + 8);
      v30 = (2 * v25 * v106);
      v31 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v30);
      v32 = *(uint64_t (**)(uint64_t, unint64_t))(a1 + 24);
      v33 = sizeof_struct_ccpolyzp_po2cyc();
      v105 = (unsigned int **)v32(a1, v25 + ((unint64_t)(v33 + 7) >> 3));
      v34 = *(uint64_t (**)(uint64_t, unint64_t))(a1 + 24);
      v35 = (unint64_t)(sizeof_struct_ccpolyzp_po2cyc_ctx() + 7) >> 3;
      if (v25 >= 0x80)
        v36 = 128;
      else
        v36 = v25;
      v37 = sizeof_struct_ccrns_mul_modulus();
      v112 = v25;
      __dst = (_DWORD *)v34(a1, v35 + 2 * (v25 + ((unint64_t)(v37 + 7) >> 3) * v36) + 6);
      v38 = v102;
      if (v101)
      {
        v39 = 0;
        v40 = v101 - 1;
        v41 = (_QWORD *)(v102 + 24);
        v42 = 8 * v30;
        v94 = &(&v98[v29 * v28])[(unint64_t)(v27 + 7) >> 3];
        v95 = v94 + 1;
        v91 = 8 * v30;
        v100 = 2 * v112;
        while (1)
        {
          v43 = *(_DWORD *)(v38 + 12) - 1;
          if (v39 == v40)
            v44 = *(_DWORD *)(v38 + 12) - 1;
          else
            v44 = v39;
          v110 = v44;
          v45 = v104;
          if (v43 > v39)
          {
            v46 = *(_DWORD *)(v38 + 12) - 1;
            v47 = v104;
            do
            {
              v47 = (_QWORD *)v47[14];
              --v46;
            }
            while (v46 > v39);
            v45 = v104;
            do
            {
              v45 = (_QWORD *)v45[14];
              --v43;
            }
            while (v43 > v39);
            v41 = v47 + 2;
          }
          v48 = *(unsigned int *)v45;
          v49 = (sizeof_struct_ccpolyzp_po2cyc_ctx() + 7) & 0xFFFFFFFFFFFFFFF8;
          v50 = v48 >= 0x80 ? 128 : v48;
          v51 = v49 + 16 * (v48 + ((unint64_t)(sizeof_struct_ccrns_mul_modulus() + 7) >> 3) * v50) + 48;
          memmove(__dst, v45, v51);
          __dst[1] = 1;
          *((_QWORD *)__dst + 14) = 0;
          ccpolyzp_po2cyc_init_zero(v105, __dst);
          cc_clear(v42, v31);
          if (v103)
            break;
LABEL_50:
          if ((_DWORD)v106)
          {
            v67 = 0;
            v68 = 0;
            v69 = (*(_DWORD *)(*v96 + 4) * *(_DWORD *)*v96);
            do
            {
              if ((_DWORD)v112)
              {
                v70 = (_DWORD **)&v96[(v69 + ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3)) * v68];
                v72 = *v70;
                v71 = v70 + 1;
                v73 = v39 * *v72;
                v74 = v112;
                v75 = v67;
                do
                {
                  v76 = &v31[8 * v75];
                  v78 = *(_QWORD *)v76;
                  v77 = *((_QWORD *)v76 + 1);
                  v79 = v41[2];
                  v80 = (v79 * (unsigned __int128)v78) >> 64;
                  v81 = (v79 * (unsigned __int128)v77) >> 64;
                  v82 = v79 * v77;
                  v83 = __CFADD__(v80, v82);
                  v84 = v80 + v82;
                  v85 = v83;
                  v86 = (_DWORD *)(v78
                                 - (v85
                                  + __CFADD__(v41[3] * v78, v84)
                                  + v81
                                  + v41[3] * v77
                                  + (((unint64_t)v41[3] * (unsigned __int128)v78) >> 64))
                                 * *v41);
                  if ((uint64_t)v86 - *v41 >= 0)
                    v86 = (_DWORD *)((char *)v86 - *v41);
                  v71[v73++] = v86;
                  v75 += 2;
                  --v74;
                }
                while (v74);
              }
              ++v68;
              v67 += v100;
            }
            while (v68 != v106);
          }
          ++v39;
          v40 = v101 - 1;
          v42 = v91;
          v41 = (_QWORD *)(v102 + 24);
          if (v39 == v101)
            goto LABEL_62;
        }
        v52 = 0;
        while (1)
        {
          v53 = *(_DWORD *)(v38 + 12) - 1;
          v54 = v104;
          if (v53 > v52)
          {
            v54 = v104;
            do
            {
              v54 = (_QWORD *)v54[14];
              --v53;
            }
            while (v53 > v52);
          }
          v55 = cche_galois_key_ciphertext(v99, 0, v52);
          if (v54[2] <= *v41)
          {
            memcpy(v105 + 1, &v95[**v94 * v52], 8 * v112);
          }
          else if ((_DWORD)v112)
          {
            v56 = **v94 * v52;
            v57 = v112;
            v58 = v105 + 1;
            do
            {
              v59 = (char *)v95[v56]
                  - *v41 * (((unint64_t)v41[1] * (unsigned __int128)(unint64_t)v95[v56]) >> 64);
              if ((uint64_t)&v59[-*v41] >= 0)
                v59 -= *v41;
              *v58++ = v59;
              ++v56;
              --v57;
            }
            while (v57);
          }
          if (ccpolyzp_po2cyc_fwd_ntt(v105))
            break;
          if ((_DWORD)v106)
          {
            v109 = 0;
            v108 = 0;
            v107 = (_DWORD **)(v55 + 24);
            while (1)
            {
              v60 = *v107;
              v61 = sizeof_struct_ccpolyzp_po2cyc();
              if ((_DWORD)v112)
                break;
LABEL_48:
              v109 += v100;
              if (++v108 == v106)
                goto LABEL_49;
            }
            v62 = 0;
            v63 = &v107[((v60[1] * *v60) + ((unint64_t)(v61 + 7) >> 3)) * v108];
            v64 = v109;
            v65 = (uint64_t)(v105 + 1);
            while (1)
            {
              v66 = (uint64_t)&v63[(v62 + **v63 * v110) + 1];
              v113[0] = 0;
              v113[1] = 0;
              ccn_mul(1, (uint64_t)v113, v66, v65);
              if (ccn_add_ws(a1, 2, &v31[8 * v64], (uint64_t *)&v31[8 * v64], v113))
                return 0xFFFFFFFFLL;
              ++v62;
              v65 += 8;
              v64 += 2;
              if (v112 == v62)
                goto LABEL_48;
            }
          }
LABEL_49:
          ++v52;
          v38 = v102;
          if (v52 == v103)
            goto LABEL_50;
        }
      }
      else
      {
LABEL_62:
        result = cche_ciphertext_inv_ntt(v92);
        if ((_DWORD)result)
          goto LABEL_66;
        result = cche_ciphertext_mod_switch_down_ws(a1, v92);
        if ((_DWORD)result)
          goto LABEL_66;
        ccpolyzp_po2cyc_coeff_add(v98, (uint64_t)v98, v96);
        v88 = *v98;
        v89 = sizeof_struct_ccpolyzp_po2cyc();
        v90 = &v96[(*(_DWORD *)(*v96 + 4) * *(_DWORD *)*v96) + ((unint64_t)(v89 + 7) >> 3)];
        memmove(&(&v98[v88[1] * *v88])[(unint64_t)(v89 + 7) >> 3], v90, (v89 + 7 + 8 * (*(_DWORD *)(*v90 + 4) * *(_DWORD *)*v90)) & 0xFFFFFFFFFFFFFFF8);
      }
      result = 0;
LABEL_66:
      *(_QWORD *)(a1 + 16) = v93;
      return result;
    }
  }
  return 4294967289;
}

uint64_t cche_ciphertext_apply_galois(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  char v8;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD v18[4];
  void (*v19)(uint64_t);
  char v20;

  v8 = 0;
  v20 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v20 = v8;
  v14 = cche_param_ctx_chain_const(*a4);
  v15 = CCHE_CIPHERTEXT_GALOIS_KEY_SWITCH_WORKSPACE_N(*(unsigned int *)(v14 + 8), *(_DWORD *)(v14 + 12) + 1);
  v18[0] = cc_malloc_clear(8 * v15);
  v18[1] = CCHE_CIPHERTEXT_GALOIS_KEY_SWITCH_WORKSPACE_N(*(unsigned int *)(v14 + 8), *(_DWORD *)(v14 + 12) + 1);
  v18[2] = 0;
  v18[3] = cc_ws_alloc;
  v19 = cc_ws_free;
  if (v18[0])
  {
    v16 = cche_ciphertext_apply_galois_ws((uint64_t)v18, a1, a2, a3, (uint64_t)a4);
    v19((uint64_t)v18);
  }
  else
  {
    v16 = 4294967283;
  }
  cc_disable_dit(&v20);
  return v16;
}

uint64_t cche_ciphertext_galois_elt_rotate_rows_left(_DWORD *a1, int a2, unsigned __int32 a3, int8x8_t a4)
{
  char v4;
  uint64_t v10;
  char v12;

  v4 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v12 = v4;
  v10 = cche_galois_elt_from_step(a1, a2, a3, a4);
  cc_disable_dit(&v12);
  return v10;
}

uint64_t cche_galois_elt_from_step(_DWORD *a1, int a2, unsigned __int32 a3, int8x8_t a4)
{
  uint8x8_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  uint64_t v10;

  a4.i32[0] = a3;
  v4 = (uint8x8_t)vcnt_s8(a4);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.i32[0] != 1)
    return 4294967289;
  v5 = a2 >= 0 ? a2 : -a2;
  if (v5 >= a3 >> 1)
    return 4294967289;
  v6 = 2 * a3 - 1;
  v7 = v5 & v6;
  v8 = (a3 >> 1) - v7;
  if (a2 >= 0)
    v8 = v7;
  if (v8)
  {
    v9 = 1;
    while (is_mul_ok(v9, 3uLL))
    {
      v9 = (3 * v9) & v6;
      if (!--v8)
        goto LABEL_14;
    }
    return 0xFFFFFFFFLL;
  }
  else
  {
    LODWORD(v9) = 1;
LABEL_14:
    v10 = 0;
    *a1 = v9;
  }
  return v10;
}

uint64_t cche_ciphertext_galois_elt_rotate_rows_right(_DWORD *a1, int a2, unsigned __int32 a3, int8x8_t a4)
{
  char v4;
  uint64_t v10;
  char v12;

  v4 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v12 = v4;
  v10 = cche_galois_elt_from_step(a1, -a2, a3, a4);
  cc_disable_dit(&v12);
  return v10;
}

uint64_t cche_ciphertext_galois_elt_swap_columns(_DWORD *a1, __int32 a2, int8x8_t a3)
{
  char v3;
  uint8x8_t v9;
  uint64_t v10;
  char v12;

  v3 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v12 = v3;
  a3.i32[0] = a2;
  v9 = (uint8x8_t)vcnt_s8(a3);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.i32[0] == 1)
  {
    v10 = 0;
    *a1 = 2 * a2 - 1;
  }
  else
  {
    v10 = 4294967289;
  }
  cc_disable_dit(&v12);
  return v10;
}

_BYTE *ccz_zero(_QWORD *a1)
{
  char v2;
  char v9;

  v2 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v9 = v2;
  ccz_set_sign((uint64_t)a1, 1);
  ccz_set_n(a1, 0);
  return cc_disable_dit(&v9);
}

uint64_t ccmode_ccm_reset(uint64_t a1, uint64_t a2)
{
  cc_clear(0x10uLL, (void *)(a2 + 32));
  cc_clear(0x10uLL, (void *)(a2 + 48));
  *(_DWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 64) = 1;
  return 0;
}

uint64_t ccn_xor(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (; result; --result)
    *(_QWORD *)(a2 - 8 + 8 * result) = *(_QWORD *)(a4 - 8 + 8 * result) ^ *(_QWORD *)(a3 - 8 + 8 * result);
  return result;
}

uint64_t cced25519_add_points_unified_ws(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, char a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v12 = cczp_n(a2);
  v13 = *(_QWORD *)(a1 + 16);
  ccn_set(4 * v12, a3, a5);
  cced25519_point_to_cached_ws(a1, a2);
  result = cced25519_add_points_unified_cached_ws(a1, a2, (uint64_t)a3, a4, (uint64_t)a3, a6);
  *(_QWORD *)(a1 + 16) = v13;
  return result;
}

uint64_t cced25519_point_to_cached_ws(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  cczp_n(a2);
  v4 = *(_QWORD *)(a1 + 16);
  cczp_mul_ws(a1, a2);
  result = cczp_add_ws(a1, a2);
  *(_QWORD *)(a1 + 16) = v4;
  return result;
}

uint64_t cced25519_add_points_unified_cached_ws(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v11;
  void *v12;
  uint64_t result;
  uint64_t v14;

  v11 = cczp_n(a2);
  v14 = *(_QWORD *)(a1 + 16);
  v12 = (void *)(a3 + 24 * v11);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v11);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v11);
  if ((a6 & 2) != 0)
    ccn_set(v11, v12, (void *)(a4 + 24 * v11));
  else
    cczp_mul_ws(a1, a2);
  cczp_sub_ws(a1, a2);
  if ((a6 & 1) != 0)
    cczp_add_ws(a1, a2);
  else
    cczp_sub_ws(a1, a2);
  cczp_mul_ws(a1, a2);
  cczp_add_ws(a1, a2);
  if ((a6 & 1) != 0)
    cczp_sub_ws(a1, a2);
  else
    cczp_add_ws(a1, a2);
  cczp_mul_ws(a1, a2);
  cczp_sub_ws(a1, a2);
  cczp_add_ws(a1, a2);
  cczp_mul_ws(a1, a2);
  cczp_add_ws(a1, a2);
  if ((a6 & 1) == 0)
  {
    cczp_sub_ws(a1, a2);
    cczp_add_ws(a1, a2);
    if ((a6 & 4) != 0)
      goto LABEL_15;
    goto LABEL_14;
  }
  cczp_add_ws(a1, a2);
  cczp_sub_ws(a1, a2);
  if ((a6 & 4) == 0)
LABEL_14:
    cczp_mul_ws(a1, a2);
LABEL_15:
  cczp_mul_ws(a1, a2);
  cczp_mul_ws(a1, a2);
  result = cczp_mul_ws(a1, a2);
  *(_QWORD *)(a1 + 16) = v14;
  return result;
}

void cced25519_scalar_mult_ws()
{
  cc_try_abort();
}

uint64_t sub_1DEDCD8E8()
{
  return 0xFFFFFFFFLL;
}

void *cced25519_double_scalar_mult_ws(uint64_t a1, _QWORD *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  void *result;
  uint64_t v21;
  _BYTE v23[256];
  _BYTE v24[256];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C874D8];
  v9 = cczp_n((uint64_t)a2);
  v21 = *(_QWORD *)(a1 + 16);
  v10 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4 * v9);
  v11 = 32 * v9;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 32 * v9);
  cced25519_to_ed25519_point_ws(a1, (uint64_t)a2);
  cced25519_point_to_cached_ws(a1, (uint64_t)a2);
  cced25519_dbl_point_ws(a1, (uint64_t)a2);
  v13 = 7;
  v14 = v12;
  do
  {
    v15 = v14 + v11;
    cced25519_add_points_unified_cached_ws(a1, (uint64_t)a2, v14 + v11, (uint64_t)v10, v14, 0);
    cced25519_point_to_cached_ws(a1, (uint64_t)a2);
    v14 = v15;
    --v13;
  }
  while (v13);
  cc_clear(8 * v9, v10);
  cc_clear(8 * v9, &v10[16 * v9]);
  ccn_seti(v9, &v10[8 * v9], 1);
  ccn_seti(v9, &v10[24 * v9], 1);
  ccn_recode_ssw(v9, a4, 4, (uint64_t)v24);
  ccn_recode_ssw(v9, a5, 4, (uint64_t)v23);
  v16 = 255;
  do
  {
    v17 = v24[v16];
    v18 = v23[v16--];
  }
  while (!(v18 | v17));
  if (v16 != -2)
  {
    v19 = v16 + 1;
    do
    {
      cced25519_dbl_point_ws(a1, (uint64_t)a2);
      cced25519_add_precomputed_point_ws(a1, (uint64_t)a2, (uint64_t)v10, (char)v23[v19], 4, v12, 0);
      cced25519_add_precomputed_point_ws(a1, (uint64_t)a2, (uint64_t)v10, (char)v24[v19--], 3, (uint64_t)&CCED25519_PRECOMPUTED_BASES, 6);
    }
    while (v19 != -1);
  }
  result = cced25519_from_ed25519_point_ws(a1, a2, a3, v10);
  *(_QWORD *)(a1 + 16) = v21;
  return result;
}

uint64_t cced25519_dbl_point_ws(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = cczp_n(a2);
  v6 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  cczp_add_ws(a1, a2);
  cczp_sqr_ws(a1, a2);
  cczp_sqr_ws(a1, a2);
  cczp_sqr_ws(a1, a2);
  cczp_sqr_ws(a1, a2);
  cczp_add_ws(a1, a2);
  cczp_sub_ws(a1, a2);
  cczp_sub_ws(a1, a2);
  cczp_add_ws(a1, a2);
  cczp_add_ws(a1, a2);
  cczp_mul_ws(a1, a2);
  cczp_mul_ws(a1, a2);
  cczp_mul_ws(a1, a2);
  result = cczp_mul_ws(a1, a2);
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

uint64_t cced25519_add_precomputed_point_ws(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t result;
  int v15;

  result = cczp_n(a2);
  if (a4 >= 0)
    LOBYTE(v15) = a4;
  else
    v15 = -a4;
  if ((char)v15 >= 1)
    return cced25519_add_points_unified_cached_ws(a1, a2, a3, a3, a6 + 8 * (v15 >> 1) * a5 * result, a7 | ((a4 & 0x80) >> 7));
  return result;
}

unint64_t ccdh_ramp_gp_exponent(unint64_t result, uint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!result || (v3 = result, (result = ccdh_gp_l(a2)) == 0))
  {
    v9 = 0;
    v7 = *a2;
    v8 = (uint64_t)&a2[*a2 + 3];
    goto LABEL_9;
  }
  v4 = ccdh_gp_l(a2);
  v5 = a2 + 3;
  if (v4 <= v3)
    v6 = v3;
  else
    v6 = v4;
  v5[*a2 + 1 + *a2 + *a2 + *a2] = v6;
  result = ccdh_gp_l(a2);
  if (result <= 0x9F)
  {
    v7 = *a2;
    v8 = (uint64_t)&v5[*a2];
    v9 = 160;
LABEL_9:
    *(_QWORD *)(v8 + 8 * v7 + 8 * v7 + 8 * v7 + 8) = v9;
  }
  return result;
}

unint64_t ccec_compressed_x962_export_pub_size(uint64_t a1)
{
  char v1;
  unint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = ((unint64_t)(cczp_bitlen(a1) + 7) >> 3) + 1;
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccec_compressed_x962_export_pub(uint64_t a1, char *a2)
{
  char v4;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v13;
  char v14;

  v4 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v14 = v4;
  v10 = *(uint64_t **)a1;
  v13 = ccec_compressed_x962_export_pub_size(*(_QWORD *)a1);
  v11 = ccec_export_affine_point(v10, 3, (unint64_t *)(a1 + 16), &v13, a2);
  cc_disable_dit(&v14);
  return v11;
}

uint64_t ccmode_siv_hmac_encrypt(rsize_t *a1, size_t a2, char *a3, void *a4)
{
  uint64_t v4;
  rsize_t v9;
  uint64_t v10;
  _QWORD v12[8];
  __int128 v13;
  _OWORD __src[4];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C874D8];
  v4 = *(_QWORD *)(*a1 + 64);
  if (*(_QWORD *)(v4 + 16) != 16)
    return 4294967226;
  v9 = a1[2];
  v10 = ccmode_siv_hmac_auth_finalize(a1, a2, a3, __src);
  if (!(_DWORD)v10)
  {
    v13 = __src[0];
    v10 = ccmode_siv_hmac_temp_key_gen(a1, v12, &v13);
    if ((_DWORD)v10
      || (BYTE8(v13) &= ~0x80u,
          BYTE12(v13) &= ~0x80u,
          v10 = ccctr_one_shot(v4, a1[1] >> 1, (uint64_t)v12, (uint64_t)&v13, a2, (uint64_t)a3, (uint64_t)a4 + v9),
          (_DWORD)v10))
    {
      cc_clear(v9 + a2, a4);
      cc_clear(v9, __src);
      ccmode_siv_hmac_reset((uint64_t)a1);
    }
    else
    {
      memcpy(a4, __src, v9);
    }
    cc_clear(a1[1] >> 1, v12);
  }
  return v10;
}

unsigned int *AccelerateCrypto_SHA256_compress_arm64neon(unsigned int *result, uint64_t a2, int8x16_t *a3)
{
  int8x16_t v3;
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t *v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  __int128 *i8;
  int32x4_t v13;
  unsigned int v14;
  unsigned int v15;
  int32x4_t v16;
  unsigned int v17;
  unsigned int v18;
  int32x4_t v19;
  unsigned int v20;
  unsigned int v21;
  int32x4_t v22;
  unsigned int v23;
  unsigned int i;
  uint64_t v25;
  int32x4_t *v26;
  int32x4_t v27;
  int32x4_t v28;
  unint64_t v29;
  int8x16_t v30;
  int32x4_t v31;
  int v32;
  int v33;
  int v34;
  int32x4_t v35;
  int v36;
  int32x4_t v37;
  int v38;
  int8x16_t v39;
  int32x4_t v40;
  int v41;
  int32x4_t v42;
  int32x4_t v43;
  int v44;
  int8x16_t v45;
  int v46;
  int32x4_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int32x4_t v52;
  int32x4_t v53;
  int8x16_t v54;
  int32x4_t v55;
  int v56;
  int v57;
  int v58;
  int32x4_t v59;
  int v60;
  int32x4_t v61;
  int v62;
  int8x16_t v63;
  int32x4_t v64;
  int v65;
  int32x4_t v66;
  int32x4_t v67;
  int v68;
  int8x16_t v69;
  int v70;
  int32x4_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int32x4_t v76;
  int32x4_t v77;
  int8x16_t v78;
  int32x4_t v79;
  int v80;
  int v81;
  int v82;
  int32x4_t v83;
  int v84;
  int32x4_t v85;
  int v86;
  int8x16_t v87;
  int32x4_t v88;
  int v89;
  int32x4_t v90;
  int32x4_t v91;
  int v92;
  int8x16_t v93;
  int v94;
  int32x4_t v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int32x4_t v100;
  int32x4_t v101;
  int8x16_t v102;
  int32x4_t v103;
  int v104;
  int32x4_t v105;
  int v106;
  int32x4_t v107;
  int8x16_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int v112;
  int8x16_t v113;
  int32x4_t v114;
  int v115;
  __int128 *v117;
  unint64_t v118;
  int8x16_t *v119;
  int8x16_t v120;
  int v121;
  unint64_t v122;
  int v123;
  int v124;
  int v125;
  unsigned int v126;
  unint64_t v127;
  int v128;
  unsigned int v129;
  int v130;
  unint64_t v131;
  int v132;
  int v133;
  int v134;
  unsigned int v135;
  unint64_t v136;
  int v137;
  unsigned int v138;
  int32x4_t *v139;
  int32x4_t v140;
  int v141;
  unint64_t v142;
  int v143;
  int v144;
  int v145;
  unsigned int v146;
  unint64_t v147;
  int v148;
  unsigned int v149;
  int v150;
  unint64_t v151;
  int v152;
  int v153;
  int v154;
  unsigned int v155;
  unint64_t v156;
  unsigned int v157;
  int8x16_t v158;
  int v159;
  unint64_t v160;
  int v161;
  int v162;
  int v163;
  unsigned int v164;
  unint64_t v165;
  int v166;
  unsigned int v167;
  int v168;
  unint64_t v169;
  int v170;
  int v171;
  int v172;
  unsigned int v173;
  unint64_t v174;
  int v175;
  unsigned int v176;
  int32x4_t v177;
  int v178;
  unint64_t v179;
  int v180;
  int v181;
  int v182;
  unsigned int v183;
  unint64_t v184;
  int v185;
  unsigned int v186;
  int v187;
  unint64_t v188;
  int v189;
  int v190;
  int v191;
  unsigned int v192;
  unint64_t v193;
  unsigned int v194;
  int8x16_t v195;
  int v196;
  unint64_t v197;
  int v198;
  int v199;
  int v200;
  unsigned int v201;
  unint64_t v202;
  int v203;
  unsigned int v204;
  int v205;
  unint64_t v206;
  int v207;
  int v208;
  int v209;
  unsigned int v210;
  unint64_t v211;
  int v212;
  unsigned int v213;
  int32x4_t v214;
  int v215;
  unint64_t v216;
  int v217;
  int v218;
  int v219;
  unsigned int v220;
  unint64_t v221;
  int v222;
  unsigned int v223;
  int v224;
  unint64_t v225;
  int v226;
  int v227;
  int v228;
  unsigned int v229;
  unint64_t v230;
  unsigned int v231;
  int8x16_t v232;
  int v233;
  unint64_t v234;
  int v235;
  int v236;
  int v237;
  unsigned int v238;
  unint64_t v239;
  int v240;
  unsigned int v241;
  int v242;
  unint64_t v243;
  int v244;
  int v245;
  int v246;
  unsigned int v247;
  unint64_t v248;
  int v249;
  unsigned int v250;
  int32x4_t v251;
  int v252;
  unint64_t v253;
  int v254;
  int v255;
  int v256;
  unsigned int v257;
  unint64_t v258;
  int v259;
  unsigned int v260;
  int v261;
  unint64_t v262;
  int v263;
  int v264;
  int v265;
  unint64_t v266;
  int v267;
  unint64_t v268;
  int v269;
  int v270;
  int v271;
  unsigned int v272;
  unint64_t v273;
  int v274;
  unsigned int v275;
  int v276;
  unint64_t v277;
  int v278;
  int v279;
  int v280;
  unsigned int v281;
  unint64_t v282;
  int v283;
  unsigned int v284;
  int v285;
  unint64_t v286;
  int v287;
  int v288;
  int v289;
  unsigned int v290;
  unint64_t v291;
  int v292;
  unsigned int v293;
  int v294;
  unint64_t v295;
  int v296;
  int v297;
  int v298;
  unsigned int v299;
  unint64_t v300;
  unsigned int v301;
  int v302;
  unint64_t v303;
  int v304;
  int v305;
  int v306;
  unsigned int v307;
  unint64_t v308;
  int v309;
  unsigned int v310;
  int v311;
  unint64_t v312;
  int v313;
  int v314;
  int v315;
  unsigned int v316;
  unint64_t v317;
  int v318;
  unsigned int v319;
  int v320;
  unint64_t v321;
  int v322;
  int v323;
  int v324;
  unsigned int v325;
  unint64_t v326;
  int v327;
  unsigned int v328;
  int v329;
  unint64_t v330;
  int v331;
  int v332;
  int v333;
  unsigned int v334;
  unint64_t v335;
  unsigned int v336;
  int v337;
  unint64_t v338;
  int v339;
  int v340;
  int v341;
  unsigned int v342;
  unint64_t v343;
  int v344;
  unsigned int v345;
  int v346;
  unint64_t v347;
  int v348;
  int v349;
  int v350;
  unsigned int v351;
  unint64_t v352;
  int v353;
  unsigned int v354;
  int v355;
  unint64_t v356;
  int v357;
  int v358;
  int v359;
  unsigned int v360;
  unint64_t v361;
  int v362;
  unsigned int v363;
  int v364;
  unint64_t v365;
  int v366;
  int v367;
  int v368;
  unsigned int v369;
  unint64_t v370;
  unsigned int v371;
  int v372;
  unint64_t v373;
  int v374;
  int v375;
  int v376;
  unsigned int v377;
  unint64_t v378;
  int v379;
  unsigned int v380;
  int v381;
  unint64_t v382;
  int v383;
  int v384;
  int v385;
  unsigned int v386;
  unint64_t v387;
  int v388;
  unsigned int v389;
  int v390;
  unint64_t v391;
  int v392;
  int v393;
  int v394;
  unsigned int v395;
  unint64_t v396;
  int v397;
  unsigned int v398;
  int v399;
  unint64_t v400;
  int v401;
  int v402;
  int v403;
  unsigned int v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int v407;
  unsigned int v408;

  if (a2)
  {
    v3 = *a3;
    v4 = a3[1];
    v5 = a3[2];
    v6 = a3[3];
    v7 = a3 + 4;
    v8 = (int32x4_t)vrev32q_s8(v3);
    v9 = (int32x4_t)vrev32q_s8(v4);
    v10 = (int32x4_t)vrev32q_s8(v5);
    v11 = (int32x4_t)vrev32q_s8(v6);
    i8 = &xmmword_1DEDCE130;
    v13 = vaddq_s32((int32x4_t)K256_0, v8);
    v14 = *result;
    v15 = result[1];
    v16 = vaddq_s32((int32x4_t)xmmword_1DEDCE100, v9);
    v17 = result[2];
    v18 = result[3];
    v19 = vaddq_s32((int32x4_t)xmmword_1DEDCE110, v10);
    v20 = result[4];
    v21 = result[5];
    v22 = vaddq_s32((int32x4_t)xmmword_1DEDCE120, v11);
    v23 = result[6];
    for (i = result[7]; ; result[7] = i)
    {
      v25 = 3;
      do
      {
        v27 = (int32x4_t)*i8;
        v26 = (int32x4_t *)(i8 + 1);
        v28 = (int32x4_t)vextq_s8((int8x16_t)v8, (int8x16_t)v9, 4uLL);
        LODWORD(v29) = v20 ^ __ROR4__(v20, 5) ^ __ROR4__(v20, 19);
        HIDWORD(v29) = v29;
        v30 = (int8x16_t)vshrq_n_u32((uint32x4_t)v28, 7uLL);
        v31 = vshlq_n_s32(v28, 0xEuLL);
        v32 = i + (v29 >> 6) + (v23 & ~v20 ^ v20 & v21) + v13.i32[0];
        v33 = v18 + v32;
        LODWORD(v29) = v14 ^ __ROR4__(v14, 11) ^ __ROR4__(v14, 20);
        HIDWORD(v29) = v29;
        v34 = v32 + (v29 >> 2) + (v15 & v17 ^ (v15 ^ v17) & v14);
        LODWORD(v29) = v33 ^ __ROR4__(v33, 5) ^ __ROR4__(v33, 19);
        HIDWORD(v29) = v29;
        v35 = vaddq_s32(v8, (int32x4_t)veorq_s8(veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v28, 3uLL), v30), (int8x16_t)v31), (int8x16_t)vshrq_n_u32((uint32x4_t)v30, 0xBuLL)), (int8x16_t)vshlq_n_s32(v31, 0xBuLL)));
        v36 = v23 + (v29 >> 6) + (v21 & ~v33 ^ v33 & v20) + v13.i32[1];
        v37 = (int32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)0, 8uLL);
        LODWORD(v29) = v34 ^ __ROR4__(v34, 11) ^ __ROR4__(v34, 20);
        HIDWORD(v29) = v29;
        v38 = v17 + v36;
        v39 = (int8x16_t)vshrq_n_u32((uint32x4_t)v37, 0x11uLL);
        v40 = vshlq_n_s32(v37, 0xDuLL);
        v41 = v36 + (v29 >> 2) + (v14 & v15 ^ (v14 ^ v15) & v34);
        LODWORD(v29) = v38 ^ __ROR4__(v38, 5) ^ __ROR4__(v38, 19);
        HIDWORD(v29) = v29;
        v42 = vaddq_s32(vaddq_s32(v35, (int32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v11, 4uLL)), (int32x4_t)veorq_s8(veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v37, 0xAuLL), v39), (int8x16_t)v40), (int8x16_t)vshrq_n_u32((uint32x4_t)v39, 2uLL)), (int8x16_t)vshlq_n_s32(v40, 2uLL)));
        v43 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v42, 8uLL);
        v44 = v21 + (v29 >> 6) + (v20 & ~v38 ^ v38 & v33) + v13.i32[2];
        v45 = (int8x16_t)vshrq_n_u32((uint32x4_t)v43, 0x11uLL);
        v46 = v15 + v44;
        v47 = vshlq_n_s32(v43, 0xDuLL);
        LODWORD(v29) = v41 ^ __ROR4__(v41, 11) ^ __ROR4__(v41, 20);
        HIDWORD(v29) = v29;
        v48 = v44 + (v29 >> 2) + (v34 & v14 ^ (v34 ^ v14) & v41);
        LODWORD(v29) = v46 ^ __ROR4__(v46, 5) ^ __ROR4__(v46, 19);
        HIDWORD(v29) = v29;
        v49 = v20 + (v29 >> 6) + (v33 & ~v46 ^ v46 & v38) + v13.i32[3];
        v50 = v14 + v49;
        LODWORD(v29) = v48 ^ __ROR4__(v48, 11) ^ __ROR4__(v48, 20);
        HIDWORD(v29) = v29;
        v8 = vaddq_s32(v42, (int32x4_t)veorq_s8(veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v43, 0xAuLL), v45), (int8x16_t)v47), (int8x16_t)vshrq_n_u32((uint32x4_t)v45, 2uLL)), (int8x16_t)vshlq_n_s32(v47, 2uLL)));
        v13 = vaddq_s32(v27, v8);
        v51 = v49 + (v29 >> 2) + (v41 & v34 ^ (v41 ^ v34) & v48);
        v52 = *v26++;
        v53 = (int32x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v10, 4uLL);
        LODWORD(v29) = v50 ^ __ROR4__(v50, 5) ^ __ROR4__(v50, 19);
        HIDWORD(v29) = v29;
        v54 = (int8x16_t)vshrq_n_u32((uint32x4_t)v53, 7uLL);
        v55 = vshlq_n_s32(v53, 0xEuLL);
        v56 = v33 + (v29 >> 6) + (v38 & ~v50 ^ v50 & v46) + v16.i32[0];
        v57 = v34 + v56;
        LODWORD(v29) = v51 ^ __ROR4__(v51, 11) ^ __ROR4__(v51, 20);
        HIDWORD(v29) = v29;
        v58 = v56 + (v29 >> 2) + (v48 & v41 ^ (v48 ^ v41) & v51);
        LODWORD(v29) = v57 ^ __ROR4__(v57, 5) ^ __ROR4__(v57, 19);
        HIDWORD(v29) = v29;
        v59 = vaddq_s32(v9, (int32x4_t)veorq_s8(veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v53, 3uLL), v54), (int8x16_t)v55), (int8x16_t)vshrq_n_u32((uint32x4_t)v54, 0xBuLL)), (int8x16_t)vshlq_n_s32(v55, 0xBuLL)));
        v60 = v38 + (v29 >> 6) + (v46 & ~v57 ^ v57 & v50) + v16.i32[1];
        v61 = (int32x4_t)vextq_s8((int8x16_t)v8, (int8x16_t)0, 8uLL);
        LODWORD(v29) = v58 ^ __ROR4__(v58, 11) ^ __ROR4__(v58, 20);
        HIDWORD(v29) = v29;
        v62 = v41 + v60;
        v63 = (int8x16_t)vshrq_n_u32((uint32x4_t)v61, 0x11uLL);
        v64 = vshlq_n_s32(v61, 0xDuLL);
        v65 = v60 + (v29 >> 2) + (v51 & v48 ^ (v51 ^ v48) & v58);
        LODWORD(v29) = v62 ^ __ROR4__(v62, 5) ^ __ROR4__(v62, 19);
        HIDWORD(v29) = v29;
        v66 = vaddq_s32(vaddq_s32(v59, (int32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v8, 4uLL)), (int32x4_t)veorq_s8(veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v61, 0xAuLL), v63), (int8x16_t)v64), (int8x16_t)vshrq_n_u32((uint32x4_t)v63, 2uLL)), (int8x16_t)vshlq_n_s32(v64, 2uLL)));
        v67 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v66, 8uLL);
        v68 = v46 + (v29 >> 6) + (v50 & ~v62 ^ v62 & v57) + v16.i32[2];
        v69 = (int8x16_t)vshrq_n_u32((uint32x4_t)v67, 0x11uLL);
        v70 = v48 + v68;
        v71 = vshlq_n_s32(v67, 0xDuLL);
        LODWORD(v29) = v65 ^ __ROR4__(v65, 11) ^ __ROR4__(v65, 20);
        HIDWORD(v29) = v29;
        v72 = v68 + (v29 >> 2) + (v58 & v51 ^ (v58 ^ v51) & v65);
        LODWORD(v29) = v70 ^ __ROR4__(v70, 5) ^ __ROR4__(v70, 19);
        HIDWORD(v29) = v29;
        v73 = v50 + (v29 >> 6) + (v57 & ~v70 ^ v70 & v62) + v16.i32[3];
        LODWORD(v29) = v72 ^ __ROR4__(v72, 11) ^ __ROR4__(v72, 20);
        HIDWORD(v29) = v29;
        v9 = vaddq_s32(v66, (int32x4_t)veorq_s8(veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v67, 0xAuLL), v69), (int8x16_t)v71), (int8x16_t)vshrq_n_u32((uint32x4_t)v69, 2uLL)), (int8x16_t)vshlq_n_s32(v71, 2uLL)));
        v74 = v51 + v73;
        v16 = vaddq_s32(v52, v9);
        v75 = v73 + (v29 >> 2) + (v65 & v58 ^ (v65 ^ v58) & v72);
        v76 = *v26++;
        v77 = (int32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v11, 4uLL);
        LODWORD(v29) = v74 ^ __ROR4__(v74, 5) ^ __ROR4__(v74, 19);
        HIDWORD(v29) = v29;
        v78 = (int8x16_t)vshrq_n_u32((uint32x4_t)v77, 7uLL);
        v79 = vshlq_n_s32(v77, 0xEuLL);
        v80 = v57 + (v29 >> 6) + (v62 & ~v74 ^ v74 & v70) + v19.i32[0];
        v81 = v58 + v80;
        LODWORD(v29) = v75 ^ __ROR4__(v75, 11) ^ __ROR4__(v75, 20);
        HIDWORD(v29) = v29;
        v82 = v80 + (v29 >> 2) + (v72 & v65 ^ (v72 ^ v65) & v75);
        LODWORD(v29) = v81 ^ __ROR4__(v81, 5) ^ __ROR4__(v81, 19);
        HIDWORD(v29) = v29;
        v83 = vaddq_s32(v10, (int32x4_t)veorq_s8(veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v77, 3uLL), v78), (int8x16_t)v79), (int8x16_t)vshrq_n_u32((uint32x4_t)v78, 0xBuLL)), (int8x16_t)vshlq_n_s32(v79, 0xBuLL)));
        v84 = v62 + (v29 >> 6) + (v70 & ~v81 ^ v81 & v74) + v19.i32[1];
        v85 = (int32x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)0, 8uLL);
        LODWORD(v29) = v82 ^ __ROR4__(v82, 11) ^ __ROR4__(v82, 20);
        HIDWORD(v29) = v29;
        v86 = v65 + v84;
        v87 = (int8x16_t)vshrq_n_u32((uint32x4_t)v85, 0x11uLL);
        v88 = vshlq_n_s32(v85, 0xDuLL);
        v89 = v84 + (v29 >> 2) + (v75 & v72 ^ (v75 ^ v72) & v82);
        LODWORD(v29) = v86 ^ __ROR4__(v86, 5) ^ __ROR4__(v86, 19);
        HIDWORD(v29) = v29;
        v90 = vaddq_s32(vaddq_s32(v83, (int32x4_t)vextq_s8((int8x16_t)v8, (int8x16_t)v9, 4uLL)), (int32x4_t)veorq_s8(veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v85, 0xAuLL), v87), (int8x16_t)v88), (int8x16_t)vshrq_n_u32((uint32x4_t)v87, 2uLL)), (int8x16_t)vshlq_n_s32(v88, 2uLL)));
        v91 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v90, 8uLL);
        v92 = v70 + (v29 >> 6) + (v74 & ~v86 ^ v86 & v81) + v19.i32[2];
        v93 = (int8x16_t)vshrq_n_u32((uint32x4_t)v91, 0x11uLL);
        v94 = v72 + v92;
        v95 = vshlq_n_s32(v91, 0xDuLL);
        LODWORD(v29) = v89 ^ __ROR4__(v89, 11) ^ __ROR4__(v89, 20);
        HIDWORD(v29) = v29;
        v96 = v92 + (v29 >> 2) + (v82 & v75 ^ (v82 ^ v75) & v89);
        LODWORD(v29) = v94 ^ __ROR4__(v94, 5) ^ __ROR4__(v94, 19);
        HIDWORD(v29) = v29;
        v97 = v74 + (v29 >> 6) + (v81 & ~v94 ^ v94 & v86) + v19.i32[3];
        v98 = v75 + v97;
        LODWORD(v29) = v96 ^ __ROR4__(v96, 11) ^ __ROR4__(v96, 20);
        HIDWORD(v29) = v29;
        v10 = vaddq_s32(v90, (int32x4_t)veorq_s8(veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v91, 0xAuLL), v93), (int8x16_t)v95), (int8x16_t)vshrq_n_u32((uint32x4_t)v93, 2uLL)), (int8x16_t)vshlq_n_s32(v95, 2uLL)));
        v19 = vaddq_s32(v76, v10);
        v99 = v97 + (v29 >> 2) + (v89 & v82 ^ (v89 ^ v82) & v96);
        v100 = *v26;
        i8 = (__int128 *)v26[1].i8;
        v101 = (int32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v8, 4uLL);
        LODWORD(v29) = v98 ^ __ROR4__(v98, 5) ^ __ROR4__(v98, 19);
        HIDWORD(v29) = v29;
        v102 = (int8x16_t)vshrq_n_u32((uint32x4_t)v101, 7uLL);
        v103 = vshlq_n_s32(v101, 0xEuLL);
        v104 = v81 + (v29 >> 6) + (v86 & ~v98 ^ v98 & v94) + v22.i32[0];
        i = v82 + v104;
        LODWORD(v29) = v99 ^ __ROR4__(v99, 11) ^ __ROR4__(v99, 20);
        HIDWORD(v29) = v29;
        v18 = v104 + (v29 >> 2) + (v96 & v89 ^ (v96 ^ v89) & v99);
        LODWORD(v29) = i ^ __ROR4__(i, 5) ^ __ROR4__(i, 19);
        HIDWORD(v29) = v29;
        v105 = vaddq_s32(v11, (int32x4_t)veorq_s8(veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v101, 3uLL), v102), (int8x16_t)v103), (int8x16_t)vshrq_n_u32((uint32x4_t)v102, 0xBuLL)), (int8x16_t)vshlq_n_s32(v103, 0xBuLL)));
        v106 = v86 + (v29 >> 6) + (v94 & ~i ^ i & v98) + v22.i32[1];
        v107 = (int32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)0, 8uLL);
        LODWORD(v29) = v18 ^ __ROR4__(v18, 11) ^ __ROR4__(v18, 20);
        HIDWORD(v29) = v29;
        v23 = v89 + v106;
        v108 = (int8x16_t)vshrq_n_u32((uint32x4_t)v107, 0x11uLL);
        v109 = vshlq_n_s32(v107, 0xDuLL);
        v17 = v106 + (v29 >> 2) + (v99 & v96 ^ (v99 ^ v96) & v18);
        LODWORD(v29) = v23 ^ __ROR4__(v23, 5) ^ __ROR4__(v23, 19);
        HIDWORD(v29) = v29;
        v110 = vaddq_s32(vaddq_s32(v105, (int32x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v10, 4uLL)), (int32x4_t)veorq_s8(veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v107, 0xAuLL), v108), (int8x16_t)v109), (int8x16_t)vshrq_n_u32((uint32x4_t)v108, 2uLL)), (int8x16_t)vshlq_n_s32(v109, 2uLL)));
        v111 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v110, 8uLL);
        v112 = v94 + (v29 >> 6) + (v98 & ~v23 ^ v23 & i) + v22.i32[2];
        v113 = (int8x16_t)vshrq_n_u32((uint32x4_t)v111, 0x11uLL);
        v21 = v96 + v112;
        v114 = vshlq_n_s32(v111, 0xDuLL);
        LODWORD(v29) = v17 ^ __ROR4__(v17, 11) ^ __ROR4__(v17, 20);
        HIDWORD(v29) = v29;
        v15 = v112 + (v29 >> 2) + (v18 & v99 ^ (v18 ^ v99) & v17);
        LODWORD(v29) = v21 ^ __ROR4__(v21, 5) ^ __ROR4__(v21, 19);
        HIDWORD(v29) = v29;
        v115 = v98 + (v29 >> 6) + (i & ~v21 ^ v21 & v23) + v22.i32[3];
        LODWORD(v29) = v15 ^ __ROR4__(v15, 11) ^ __ROR4__(v15, 20);
        HIDWORD(v29) = v29;
        v11 = vaddq_s32(v110, (int32x4_t)veorq_s8(veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v111, 0xAuLL), v113), (int8x16_t)v114), (int8x16_t)vshrq_n_u32((uint32x4_t)v113, 2uLL)), (int8x16_t)vshlq_n_s32(v114, 2uLL)));
        v20 = v99 + v115;
        v22 = vaddq_s32(v100, v11);
        v14 = v115 + (v29 >> 2) + (v17 & v18 ^ (v17 ^ v18) & v15);
      }
      while (v25-- > 1);
      --a2;
      v117 = i8 - 16;
      if (!a2)
        break;
      HIDWORD(v118) = v20;
      LODWORD(v118) = v20;
      v120 = *v7;
      v119 = v7 + 1;
      v121 = (v118 >> 6) ^ __ROR4__(v20, 11);
      v122 = __PAIR64__(v14, __ROR4__(v20, 25));
      v123 = i + (v121 ^ v122) + (v23 & ~v20 ^ v20 & v21);
      LODWORD(v122) = v14;
      v124 = v123 + v13.i32[0];
      v125 = (v122 >> 2) ^ __ROR4__(v14, 13);
      v126 = v18 + v124;
      v127 = __PAIR64__(v126, __ROR4__(v14, 22));
      v128 = v124 + (v125 ^ v127);
      LODWORD(v127) = v126;
      v8 = (int32x4_t)vrev32q_s8(v120);
      v129 = v128 + (v15 & v17 ^ (v15 ^ v17) & v14);
      v130 = (v127 >> 6) ^ __ROR4__(v126, 11);
      v131 = __PAIR64__(v129, __ROR4__(v126, 25));
      v132 = v23 + (v130 ^ v131) + (v21 & ~v126 ^ v126 & v20);
      LODWORD(v131) = v129;
      v133 = v132 + v13.i32[1];
      v134 = (v131 >> 2) ^ __ROR4__(v129, 13);
      v135 = v17 + v133;
      v136 = __PAIR64__(v135, __ROR4__(v129, 22));
      v137 = v133 + (v134 ^ v136);
      LODWORD(v136) = v135;
      v138 = v137 + (v14 & v15 ^ (v14 ^ v15) & v129);
      v140 = (int32x4_t)*v117;
      v139 = (int32x4_t *)(v117 + 1);
      v141 = (v136 >> 6) ^ __ROR4__(v135, 11);
      v142 = __PAIR64__(v138, __ROR4__(v135, 25));
      v143 = v21 + (v141 ^ v142) + (v20 & ~v135 ^ v135 & v126);
      LODWORD(v142) = v138;
      v144 = v143 + v13.i32[2];
      v145 = (v142 >> 2) ^ __ROR4__(v138, 13);
      v146 = v15 + v144;
      v147 = __PAIR64__(v146, __ROR4__(v138, 22));
      v148 = v144 + (v145 ^ v147);
      LODWORD(v147) = v146;
      v149 = v148 + (v129 & v14 ^ (v129 ^ v14) & v138);
      v150 = (v147 >> 6) ^ __ROR4__(v146, 11);
      v151 = __PAIR64__(v149, __ROR4__(v146, 25));
      v152 = v20 + (v150 ^ v151) + (v126 & ~v146 ^ v146 & v135);
      LODWORD(v151) = v149;
      v153 = v152 + v13.i32[3];
      v154 = (v151 >> 2) ^ __ROR4__(v149, 13);
      v155 = v14 + v153;
      v156 = __PAIR64__(v155, __ROR4__(v149, 22));
      v157 = v153 + (v154 ^ v156) + (v138 & v129 ^ (v138 ^ v129) & v149);
      v13 = vaddq_s32(v140, v8);
      LODWORD(v156) = v155;
      v158 = *v119++;
      v159 = (v156 >> 6) ^ __ROR4__(v155, 11);
      v160 = __PAIR64__(v157, __ROR4__(v155, 25));
      v161 = v126 + (v159 ^ v160) + (v135 & ~v155 ^ v155 & v146);
      LODWORD(v160) = v157;
      v162 = v161 + v16.i32[0];
      v163 = (v160 >> 2) ^ __ROR4__(v157, 13);
      v164 = v129 + v162;
      v165 = __PAIR64__(v164, __ROR4__(v157, 22));
      v166 = v162 + (v163 ^ v165);
      LODWORD(v165) = v164;
      v9 = (int32x4_t)vrev32q_s8(v158);
      v167 = v166 + (v149 & v138 ^ (v149 ^ v138) & v157);
      v168 = (v165 >> 6) ^ __ROR4__(v164, 11);
      v169 = __PAIR64__(v167, __ROR4__(v164, 25));
      v170 = v135 + (v168 ^ v169) + (v146 & ~v164 ^ v164 & v155);
      LODWORD(v169) = v167;
      v171 = v170 + v16.i32[1];
      v172 = (v169 >> 2) ^ __ROR4__(v167, 13);
      v173 = v138 + v171;
      v174 = __PAIR64__(v173, __ROR4__(v167, 22));
      v175 = v171 + (v172 ^ v174);
      LODWORD(v174) = v173;
      v176 = v175 + (v157 & v149 ^ (v157 ^ v149) & v167);
      v177 = *v139++;
      v178 = (v174 >> 6) ^ __ROR4__(v173, 11);
      v179 = __PAIR64__(v176, __ROR4__(v173, 25));
      v180 = v146 + (v178 ^ v179) + (v155 & ~v173 ^ v173 & v164);
      LODWORD(v179) = v176;
      v181 = v180 + v16.i32[2];
      v182 = (v179 >> 2) ^ __ROR4__(v176, 13);
      v183 = v149 + v181;
      v184 = __PAIR64__(v183, __ROR4__(v176, 22));
      v185 = v181 + (v182 ^ v184);
      LODWORD(v184) = v183;
      v186 = v185 + (v167 & v157 ^ (v167 ^ v157) & v176);
      v187 = (v184 >> 6) ^ __ROR4__(v183, 11);
      v188 = __PAIR64__(v186, __ROR4__(v183, 25));
      v189 = v155 + (v187 ^ v188) + (v164 & ~v183 ^ v183 & v173);
      LODWORD(v188) = v186;
      v190 = v189 + v16.i32[3];
      v191 = (v188 >> 2) ^ __ROR4__(v186, 13);
      v192 = v157 + v190;
      v193 = __PAIR64__(v192, __ROR4__(v186, 22));
      v194 = v190 + (v191 ^ v193) + (v176 & v167 ^ (v176 ^ v167) & v186);
      v16 = vaddq_s32(v177, v9);
      LODWORD(v193) = v192;
      v195 = *v119++;
      v196 = (v193 >> 6) ^ __ROR4__(v192, 11);
      v197 = __PAIR64__(v194, __ROR4__(v192, 25));
      v198 = v164 + (v196 ^ v197) + (v173 & ~v192 ^ v192 & v183);
      LODWORD(v197) = v194;
      v199 = v198 + v19.i32[0];
      v200 = (v197 >> 2) ^ __ROR4__(v194, 13);
      v201 = v167 + v199;
      v202 = __PAIR64__(v201, __ROR4__(v194, 22));
      v203 = v199 + (v200 ^ v202);
      LODWORD(v202) = v201;
      v10 = (int32x4_t)vrev32q_s8(v195);
      v204 = v203 + (v186 & v176 ^ (v186 ^ v176) & v194);
      v205 = (v202 >> 6) ^ __ROR4__(v201, 11);
      v206 = __PAIR64__(v204, __ROR4__(v201, 25));
      v207 = v173 + (v205 ^ v206) + (v183 & ~v201 ^ v201 & v192);
      LODWORD(v206) = v204;
      v208 = v207 + v19.i32[1];
      v209 = (v206 >> 2) ^ __ROR4__(v204, 13);
      v210 = v176 + v208;
      v211 = __PAIR64__(v210, __ROR4__(v204, 22));
      v212 = v208 + (v209 ^ v211);
      LODWORD(v211) = v210;
      v213 = v212 + (v194 & v186 ^ (v194 ^ v186) & v204);
      v214 = *v139++;
      v215 = (v211 >> 6) ^ __ROR4__(v210, 11);
      v216 = __PAIR64__(v213, __ROR4__(v210, 25));
      v217 = v183 + (v215 ^ v216) + (v192 & ~v210 ^ v210 & v201);
      LODWORD(v216) = v213;
      v218 = v217 + v19.i32[2];
      v219 = (v216 >> 2) ^ __ROR4__(v213, 13);
      v220 = v186 + v218;
      v221 = __PAIR64__(v220, __ROR4__(v213, 22));
      v222 = v218 + (v219 ^ v221);
      LODWORD(v221) = v220;
      v223 = v222 + (v204 & v194 ^ (v204 ^ v194) & v213);
      v224 = (v221 >> 6) ^ __ROR4__(v220, 11);
      v225 = __PAIR64__(v223, __ROR4__(v220, 25));
      v226 = v192 + (v224 ^ v225) + (v201 & ~v220 ^ v220 & v210);
      LODWORD(v225) = v223;
      v227 = v226 + v19.i32[3];
      v228 = (v225 >> 2) ^ __ROR4__(v223, 13);
      v229 = v194 + v227;
      v230 = __PAIR64__(v229, __ROR4__(v223, 22));
      v231 = v227 + (v228 ^ v230) + (v213 & v204 ^ (v213 ^ v204) & v223);
      v19 = vaddq_s32(v214, v10);
      LODWORD(v230) = v229;
      v232 = *v119;
      v7 = v119 + 1;
      v233 = (v230 >> 6) ^ __ROR4__(v229, 11);
      v234 = __PAIR64__(v231, __ROR4__(v229, 25));
      v235 = v201 + (v233 ^ v234) + (v210 & ~v229 ^ v229 & v220);
      LODWORD(v234) = v231;
      v236 = v235 + v22.i32[0];
      v237 = (v234 >> 2) ^ __ROR4__(v231, 13);
      v238 = v204 + v236;
      v239 = __PAIR64__(v238, __ROR4__(v231, 22));
      v240 = v236 + (v237 ^ v239);
      LODWORD(v239) = v238;
      v11 = (int32x4_t)vrev32q_s8(v232);
      v241 = v240 + (v223 & v213 ^ (v223 ^ v213) & v231);
      v242 = (v239 >> 6) ^ __ROR4__(v238, 11);
      v243 = __PAIR64__(v241, __ROR4__(v238, 25));
      v244 = v210 + (v242 ^ v243) + (v220 & ~v238 ^ v238 & v229);
      LODWORD(v243) = v241;
      v245 = v244 + v22.i32[1];
      v246 = (v243 >> 2) ^ __ROR4__(v241, 13);
      v247 = v213 + v245;
      v248 = __PAIR64__(v247, __ROR4__(v241, 22));
      v249 = v245 + (v246 ^ v248);
      LODWORD(v248) = v247;
      v250 = v249 + (v231 & v223 ^ (v231 ^ v223) & v241);
      v251 = *v139;
      i8 = (__int128 *)v139[1].i8;
      v252 = (v248 >> 6) ^ __ROR4__(v247, 11);
      v253 = __PAIR64__(v250, __ROR4__(v247, 25));
      v254 = v220 + (v252 ^ v253) + (v229 & ~v247 ^ v247 & v238);
      LODWORD(v253) = v250;
      v255 = v254 + v22.i32[2];
      v256 = (v253 >> 2) ^ __ROR4__(v250, 13);
      v257 = v223 + v255;
      v258 = __PAIR64__(v257, __ROR4__(v250, 22));
      v259 = v255 + (v256 ^ v258);
      LODWORD(v258) = v257;
      v260 = v259 + (v241 & v231 ^ (v241 ^ v231) & v250);
      v261 = (v258 >> 6) ^ __ROR4__(v257, 11);
      v262 = __PAIR64__(v260, __ROR4__(v257, 25));
      v263 = v229 + (v261 ^ v262) + (v238 & ~v257 ^ v257 & v247);
      LODWORD(v262) = v260;
      v264 = v263 + v22.i32[3];
      v265 = v231 + v264;
      v22 = vaddq_s32(v251, v11);
      v14 = v264
          + ((v262 >> 2) ^ __ROR4__(v260, 13) ^ __ROR4__(v260, 22))
          + (v250 & v241 ^ (v250 ^ v241) & v260)
          + *result;
      v15 = v260 + result[1];
      *result = v14;
      result[1] = v15;
      v17 = v250 + result[2];
      v18 = v241 + result[3];
      result[2] = v17;
      result[3] = v18;
      v20 = v265 + result[4];
      v21 = v257 + result[5];
      result[4] = v20;
      result[5] = v21;
      v23 = v247 + result[6];
      i = v238 + result[7];
      result[6] = v23;
    }
    HIDWORD(v266) = v20;
    LODWORD(v266) = v20;
    v267 = (v266 >> 6) ^ __ROR4__(v20, 11);
    v268 = __PAIR64__(v14, __ROR4__(v20, 25));
    v269 = i + (v267 ^ v268) + (v23 & ~v20 ^ v20 & v21);
    LODWORD(v268) = v14;
    v270 = v269 + v13.i32[0];
    v271 = (v268 >> 2) ^ __ROR4__(v14, 13);
    v272 = v18 + v270;
    v273 = __PAIR64__(v272, __ROR4__(v14, 22));
    v274 = v270 + (v271 ^ v273);
    LODWORD(v273) = v272;
    v275 = v274 + (v15 & v17 ^ (v15 ^ v17) & v14);
    v276 = (v273 >> 6) ^ __ROR4__(v272, 11);
    v277 = __PAIR64__(v275, __ROR4__(v272, 25));
    v278 = v23 + (v276 ^ v277) + (v21 & ~v272 ^ v272 & v20);
    LODWORD(v277) = v275;
    v279 = v278 + v13.i32[1];
    v280 = (v277 >> 2) ^ __ROR4__(v275, 13);
    v281 = v17 + v279;
    v282 = __PAIR64__(v281, __ROR4__(v275, 22));
    v283 = v279 + (v280 ^ v282);
    LODWORD(v282) = v281;
    v284 = v283 + (v14 & v15 ^ (v14 ^ v15) & v275);
    v285 = (v282 >> 6) ^ __ROR4__(v281, 11);
    v286 = __PAIR64__(v284, __ROR4__(v281, 25));
    v287 = v21 + (v285 ^ v286) + (v20 & ~v281 ^ v281 & v272);
    LODWORD(v286) = v284;
    v288 = v287 + v13.i32[2];
    v289 = (v286 >> 2) ^ __ROR4__(v284, 13);
    v290 = v15 + v288;
    v291 = __PAIR64__(v290, __ROR4__(v284, 22));
    v292 = v288 + (v289 ^ v291);
    LODWORD(v291) = v290;
    v293 = v292 + (v275 & v14 ^ (v275 ^ v14) & v284);
    v294 = (v291 >> 6) ^ __ROR4__(v290, 11);
    v295 = __PAIR64__(v293, __ROR4__(v290, 25));
    v296 = v20 + (v294 ^ v295) + (v272 & ~v290 ^ v290 & v281);
    LODWORD(v295) = v293;
    v297 = v296 + v13.i32[3];
    v298 = (v295 >> 2) ^ __ROR4__(v293, 13);
    v299 = v14 + v297;
    v300 = __PAIR64__(v299, __ROR4__(v293, 22));
    v301 = v297 + (v298 ^ v300) + (v284 & v275 ^ (v284 ^ v275) & v293);
    LODWORD(v300) = v299;
    v302 = (v300 >> 6) ^ __ROR4__(v299, 11);
    v303 = __PAIR64__(v301, __ROR4__(v299, 25));
    v304 = v272 + (v302 ^ v303) + (v281 & ~v299 ^ v299 & v290);
    LODWORD(v303) = v301;
    v305 = v304 + v16.i32[0];
    v306 = (v303 >> 2) ^ __ROR4__(v301, 13);
    v307 = v275 + v305;
    v308 = __PAIR64__(v307, __ROR4__(v301, 22));
    v309 = v305 + (v306 ^ v308);
    LODWORD(v308) = v307;
    v310 = v309 + (v293 & v284 ^ (v293 ^ v284) & v301);
    v311 = (v308 >> 6) ^ __ROR4__(v307, 11);
    v312 = __PAIR64__(v310, __ROR4__(v307, 25));
    v313 = v281 + (v311 ^ v312) + (v290 & ~v307 ^ v307 & v299);
    LODWORD(v312) = v310;
    v314 = v313 + v16.i32[1];
    v315 = (v312 >> 2) ^ __ROR4__(v310, 13);
    v316 = v284 + v314;
    v317 = __PAIR64__(v316, __ROR4__(v310, 22));
    v318 = v314 + (v315 ^ v317);
    LODWORD(v317) = v316;
    v319 = v318 + (v301 & v293 ^ (v301 ^ v293) & v310);
    v320 = (v317 >> 6) ^ __ROR4__(v316, 11);
    v321 = __PAIR64__(v319, __ROR4__(v316, 25));
    v322 = v290 + (v320 ^ v321) + (v299 & ~v316 ^ v316 & v307);
    LODWORD(v321) = v319;
    v323 = v322 + v16.i32[2];
    v324 = (v321 >> 2) ^ __ROR4__(v319, 13);
    v325 = v293 + v323;
    v326 = __PAIR64__(v325, __ROR4__(v319, 22));
    v327 = v323 + (v324 ^ v326);
    LODWORD(v326) = v325;
    v328 = v327 + (v310 & v301 ^ (v310 ^ v301) & v319);
    v329 = (v326 >> 6) ^ __ROR4__(v325, 11);
    v330 = __PAIR64__(v328, __ROR4__(v325, 25));
    v331 = v299 + (v329 ^ v330) + (v307 & ~v325 ^ v325 & v316);
    LODWORD(v330) = v328;
    v332 = v331 + v16.i32[3];
    v333 = (v330 >> 2) ^ __ROR4__(v328, 13);
    v334 = v301 + v332;
    v335 = __PAIR64__(v334, __ROR4__(v328, 22));
    v336 = v332 + (v333 ^ v335) + (v319 & v310 ^ (v319 ^ v310) & v328);
    LODWORD(v335) = v334;
    v337 = (v335 >> 6) ^ __ROR4__(v334, 11);
    v338 = __PAIR64__(v336, __ROR4__(v334, 25));
    v339 = v307 + (v337 ^ v338) + (v316 & ~v334 ^ v334 & v325);
    LODWORD(v338) = v336;
    v340 = v339 + v19.i32[0];
    v341 = (v338 >> 2) ^ __ROR4__(v336, 13);
    v342 = v310 + v340;
    v343 = __PAIR64__(v342, __ROR4__(v336, 22));
    v344 = v340 + (v341 ^ v343);
    LODWORD(v343) = v342;
    v345 = v344 + (v328 & v319 ^ (v328 ^ v319) & v336);
    v346 = (v343 >> 6) ^ __ROR4__(v342, 11);
    v347 = __PAIR64__(v345, __ROR4__(v342, 25));
    v348 = v316 + (v346 ^ v347) + (v325 & ~v342 ^ v342 & v334);
    LODWORD(v347) = v345;
    v349 = v348 + v19.i32[1];
    v350 = (v347 >> 2) ^ __ROR4__(v345, 13);
    v351 = v319 + v349;
    v352 = __PAIR64__(v351, __ROR4__(v345, 22));
    v353 = v349 + (v350 ^ v352);
    LODWORD(v352) = v351;
    v354 = v353 + (v336 & v328 ^ (v336 ^ v328) & v345);
    v355 = (v352 >> 6) ^ __ROR4__(v351, 11);
    v356 = __PAIR64__(v354, __ROR4__(v351, 25));
    v357 = v325 + (v355 ^ v356) + (v334 & ~v351 ^ v351 & v342);
    LODWORD(v356) = v354;
    v358 = v357 + v19.i32[2];
    v359 = (v356 >> 2) ^ __ROR4__(v354, 13);
    v360 = v328 + v358;
    v361 = __PAIR64__(v360, __ROR4__(v354, 22));
    v362 = v358 + (v359 ^ v361);
    LODWORD(v361) = v360;
    v363 = v362 + (v345 & v336 ^ (v345 ^ v336) & v354);
    v364 = (v361 >> 6) ^ __ROR4__(v360, 11);
    v365 = __PAIR64__(v363, __ROR4__(v360, 25));
    v366 = v334 + (v364 ^ v365) + (v342 & ~v360 ^ v360 & v351);
    LODWORD(v365) = v363;
    v367 = v366 + v19.i32[3];
    v368 = (v365 >> 2) ^ __ROR4__(v363, 13);
    v369 = v336 + v367;
    v370 = __PAIR64__(v369, __ROR4__(v363, 22));
    v371 = v367 + (v368 ^ v370) + (v354 & v345 ^ (v354 ^ v345) & v363);
    LODWORD(v370) = v369;
    v372 = (v370 >> 6) ^ __ROR4__(v369, 11);
    v373 = __PAIR64__(v371, __ROR4__(v369, 25));
    v374 = v342 + (v372 ^ v373) + (v351 & ~v369 ^ v369 & v360);
    LODWORD(v373) = v371;
    v375 = v374 + v22.i32[0];
    v376 = (v373 >> 2) ^ __ROR4__(v371, 13);
    v377 = v345 + v375;
    v378 = __PAIR64__(v377, __ROR4__(v371, 22));
    v379 = v375 + (v376 ^ v378);
    LODWORD(v378) = v377;
    v380 = v379 + (v363 & v354 ^ (v363 ^ v354) & v371);
    v381 = (v378 >> 6) ^ __ROR4__(v377, 11);
    v382 = __PAIR64__(v380, __ROR4__(v377, 25));
    v383 = v351 + (v381 ^ v382) + (v360 & ~v377 ^ v377 & v369);
    LODWORD(v382) = v380;
    v384 = v383 + v22.i32[1];
    v385 = (v382 >> 2) ^ __ROR4__(v380, 13);
    v386 = v354 + v384;
    v387 = __PAIR64__(v386, __ROR4__(v380, 22));
    v388 = v384 + (v385 ^ v387);
    LODWORD(v387) = v386;
    v389 = v388 + (v371 & v363 ^ (v371 ^ v363) & v380);
    v390 = (v387 >> 6) ^ __ROR4__(v386, 11);
    v391 = __PAIR64__(v389, __ROR4__(v386, 25));
    v392 = v360 + (v390 ^ v391) + (v369 & ~v386 ^ v386 & v377);
    LODWORD(v391) = v389;
    v393 = v392 + v22.i32[2];
    v394 = (v391 >> 2) ^ __ROR4__(v389, 13);
    v395 = v363 + v393;
    v396 = __PAIR64__(v395, __ROR4__(v389, 22));
    v397 = v393 + (v394 ^ v396);
    LODWORD(v396) = v395;
    v398 = v397 + (v380 & v371 ^ (v380 ^ v371) & v389);
    v399 = (v396 >> 6) ^ __ROR4__(v395, 11);
    v400 = __PAIR64__(v398, __ROR4__(v395, 25));
    v401 = v369 + (v399 ^ v400) + (v377 & ~v395 ^ v395 & v386);
    LODWORD(v400) = v398;
    v402 = v401 + v22.i32[3];
    v403 = v371 + v402;
    v404 = v402
         + ((v400 >> 2) ^ __ROR4__(v398, 13) ^ __ROR4__(v398, 22))
         + (v389 & v380 ^ (v389 ^ v380) & v398)
         + *result;
    v405 = v398 + result[1];
    *result = v404;
    result[1] = v405;
    v406 = v380 + result[3];
    result[2] += v389;
    result[3] = v406;
    v407 = v395 + result[5];
    result[4] += v403;
    result[5] = v407;
    v408 = v377 + result[7];
    result[6] += v386;
    result[7] = v408;
  }
  return result;
}

unint64_t ccz_trailing_zeros(uint64_t a1)
{
  char v2;
  unint64_t v8;
  unint64_t v9;
  char v11;

  v2 = 0;
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v11 = v2;
  v8 = ccz_n(a1);
  v9 = ccn_trailing_zeros(v8, *(_QWORD *)(a1 + 24));
  cc_disable_dit(&v11);
  return v9;
}

_BYTE *ccmode_factory_ctr_crypt(_QWORD *a1, _QWORD *a2)
{
  char v2;
  uint64_t v8;
  char v10;

  v2 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v10 = v2;
  v8 = a2[1];
  *a1 = ((2 * v8 + 14) & 0xFFFFFFFFFFFFFFF0) + ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  a1[1] = 1;
  a1[2] = v8;
  a1[3] = ccmode_ctr_init;
  a1[4] = ccmode_ctr_setctr;
  a1[5] = ccmode_ctr_crypt;
  a1[6] = a2;
  return cc_disable_dit(&v10);
}

uint64_t sizeof_struct_ccpolyzp_po2cyc_base_convert()
{
  return 96;
}

uint64_t sizeof_struct_ccpolyzp_po2cyc_ctx()
{
  return 120;
}

uint64_t sizeof_struct_ccrns_mul_modulus()
{
  return 24;
}

void *ccshake256_xi()
{
  if ((MEMORY[0xFFFFFC010] & 0x100000000) != 0)
    return &ccxof_shake256_vng_hwassist_xi;
  else
    return &ccxof_shake256_vng_xi;
}

uint64_t ccshake256_vng_hwassist_absorb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return cckeccak_absorb_blocks(a2, *(_QWORD *)(a1 + 8), a3, a4, (uint64_t (*)(_QWORD *))AccelerateCrypto_SHA3_keccak_hwassist);
}

uint64_t ccshake256_vng_hwassist_absorb_last(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  return cckeccak_absorb_and_pad(a2, *(_QWORD *)(a1 + 8), a3, a4, 0x1Fu, (uint64_t (*)(_QWORD *))AccelerateCrypto_SHA3_keccak_hwassist);
}

uint64_t ccshake256_vng_hwassist_squeeze(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  return cckeccak_squeeze(a2, *(_QWORD *)(a1 + 8), a3, a4, (uint64_t (*)(uint64_t *))AccelerateCrypto_SHA3_keccak_hwassist);
}

uint64_t ccshake256_vng_absorb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return cckeccak_absorb_blocks(a2, *(_QWORD *)(a1 + 8), a3, a4, AccelerateCrypto_SHA3_keccak);
}

uint64_t ccshake256_vng_absorb_last(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  return cckeccak_absorb_and_pad(a2, *(_QWORD *)(a1 + 8), a3, a4, 0x1Fu, AccelerateCrypto_SHA3_keccak);
}

uint64_t ccshake256_vng_squeeze(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  return cckeccak_squeeze(a2, *(_QWORD *)(a1 + 8), a3, a4, AccelerateCrypto_SHA3_keccak);
}

unint64_t *ccdh_lookup_gp(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v15[26];

  v15[25] = *MEMORY[0x1E0C874D8];
  v15[0] = ccdh_gp_apple768();
  v15[1] = ccdh_gp_rfc2409group02();
  v15[2] = ccdh_gp_rfc5114_MODP_1024_160();
  v15[3] = ccdh_gp_rfc5114_MODP_2048_224();
  v15[4] = ccdh_gp_rfc5114_MODP_2048_256();
  v15[5] = ccdh_gp_rfc3526group05();
  v15[6] = ccdh_gp_rfc3526group14();
  v15[7] = ccdh_gp_rfc3526group15();
  v15[8] = ccdh_gp_rfc3526group16();
  v15[9] = ccdh_gp_rfc3526group17();
  v15[10] = ccdh_gp_rfc3526group18();
  v15[11] = ccsrp_gp_rfc5054_1024();
  v15[12] = ccsrp_gp_rfc5054_2048();
  v15[13] = ccsrp_gp_rfc5054_3072();
  v15[14] = ccsrp_gp_rfc5054_4096();
  v15[15] = ccsrp_gp_rfc5054_8192();
  v15[16] = ccdh_gp_rfc5114_MODP_1024_160();
  v15[17] = ccdh_gp_rfc5114_MODP_2048_224();
  v15[18] = ccdh_gp_rfc5114_MODP_2048_256();
  v15[19] = ccdh_gp_rfc3526group05();
  v15[20] = ccdh_gp_rfc3526group14();
  v15[21] = ccdh_gp_rfc3526group15();
  v15[22] = ccdh_gp_rfc3526group16();
  v15[23] = ccdh_gp_rfc3526group17();
  v8 = 0;
  v15[24] = ccdh_gp_rfc3526group18();
  while (1)
  {
    v9 = (unint64_t *)v15[v8];
    v10 = ccn_n(a1, a2);
    v11 = v9 + 3;
    if (!ccn_cmpn(v10, a2, *v9, v9 + 3))
    {
      v12 = ccn_n(a3, a4);
      v13 = ccn_n(*v9, &v11[*v9 + 1 + *v9]);
      if (!ccn_cmpn(v12, a4, v13, &v11[*v9 + 1 + *v9]))
        break;
    }
    if (++v8 == 25)
      return 0;
  }
  return v9;
}

uint64_t ccder_blob_decode_seqii_strict(unsigned __int8 **a1, unint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  unsigned __int8 *v8;
  unsigned __int8 *v9;

  v8 = 0;
  v9 = 0;
  result = ccder_blob_decode_sequence_tl_strict(a1, &v8);
  if ((_DWORD)result)
  {
    result = ccder_blob_decode_uint_strict(&v8, a2, a3);
    if ((_DWORD)result)
    {
      result = ccder_blob_decode_uint_strict(&v8, a2, a4);
      if ((_DWORD)result)
        return v8 == v9;
    }
  }
  return result;
}

uint64_t ccpolyzp_po2cyc_fwd_ntt(unsigned int **a1)
{
  unsigned int *v1;
  BOOL v2;
  unsigned int v3;
  int v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  _QWORD *v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t *v19;
  _DWORD **v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  _QWORD *v55;
  unsigned int v56;
  _DWORD **v57;
  uint64_t v58;
  unsigned int *v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t v63;

  v1 = *a1;
  v63 = **a1;
  if (*((_BYTE *)*a1 + 8))
    v2 = **a1 >= 3;
  else
    v2 = 0;
  if (!v2)
    return 4294967289;
  v3 = v1[1];
  if (v3)
  {
    v4 = 0;
    v5 = 0;
    v59 = *a1;
    v60 = v3 - 1;
    v57 = a1 + 1;
    v58 = v1[1];
    if (v63 >= 0x80)
      v6 = 128;
    else
      v6 = **a1;
    v55 = v1 + 4;
    v56 = v3 - 2;
    do
    {
      if (v5 >= v60)
      {
        v11 = v55;
        v8 = v1;
        v15 = v1;
        v16 = v1;
        if (*v55 >> 62)
          return 4294967289;
      }
      else
      {
        v7 = v56;
        v8 = v1;
        do
        {
          v8 = (unsigned int *)*((_QWORD *)v8 + 14);
          v2 = v5 >= v7--;
        }
        while (!v2);
        v9 = v56;
        v10 = v1;
        do
        {
          v10 = (unsigned int *)*((_QWORD *)v10 + 14);
          v2 = v5 >= v9--;
        }
        while (!v2);
        v12 = *((_QWORD *)v10 + 2);
        v11 = v10 + 4;
        if (v12 >> 62)
          return 4294967289;
        if (v5 >= v60)
        {
          v15 = v1;
          v16 = v1;
        }
        else
        {
          v13 = v56;
          v14 = v56;
          v15 = v1;
          do
          {
            v15 = (unsigned int *)*((_QWORD *)v15 + 14);
            v2 = v5 >= v14--;
          }
          while (!v2);
          v16 = v1;
          do
          {
            v16 = (unsigned int *)*((_QWORD *)v16 + 14);
            v2 = v5 >= v13--;
          }
          while (!v2);
        }
      }
      v61 = v5;
      v62 = v4;
      v17 = v15 + 42;
      v18 = (uint64_t)&v16[2 * v63 + 42];
      v19 = (uint64_t *)&v57[(v63 * v5)];
      v20 = &v57[v4];
      v21 = 1;
      v22 = v63;
      do
      {
        v23 = v22 >> 1;
        if (v21)
        {
          v24 = 0;
          v25 = 0;
          v26 = v22 & 0xFFFFFFFE;
          v27 = v22 >> 1;
          do
          {
            v28 = (uint64_t *)&v20[v25];
            v29 = v27 - (unint64_t)v25;
            v30 = v21 + v24;
            v31 = 2 * v24 * v23;
            v32 = v23 + v31;
            if (v30 >= v6)
            {
              if (v31 < v32)
              {
                v38 = v27;
                do
                {
                  v39 = *v28;
                  v40 = v19[v38];
                  v41 = *((_QWORD *)v8 + 2);
                  if (*v28 - 2 * v41 >= 0)
                    v39 = *v28 - 2 * v41;
                  v42 = *(_QWORD *)&v17[2 * v30];
                  v43 = (v42 * (unsigned __int128)(unint64_t)v40) >> 64;
                  v44 = v42 * v40;
                  v45 = *((_QWORD *)v8 + 4);
                  v46 = ((unint64_t)v44 * (unsigned __int128)v45) >> 64;
                  v47 = (v43 * (unsigned __int128)v45) >> 64;
                  v48 = v43 * v45;
                  v2 = __CFADD__(v46, v48);
                  v49 = v46 + v48;
                  v50 = v2;
                  v51 = v44
                      - (v50
                       + __CFADD__(v44 * *((_QWORD *)v8 + 5), v49)
                       + v47
                       + *((_QWORD *)v8 + 5) * v43
                       + (((unint64_t)v44 * (unsigned __int128)*((unint64_t *)v8 + 5)) >> 64))
                      * v41;
                  *v28++ = v51 + v39;
                  v19[v38++] = v39 + 2 * v41 - v51;
                  --v29;
                }
                while (v29);
              }
            }
            else if (v31 < v32)
            {
              v33 = (uint64_t *)(v18 + 24 * v30);
              v34 = v27;
              do
              {
                v35 = *v28;
                v36 = *v33;
                if (*v28 - 2 * *v33 >= 0)
                  v35 = *v28 - 2 * *v33;
                v37 = v33[1] * v19[v34]
                    - v36 * (((unint64_t)v33[2] * (unsigned __int128)(unint64_t)v19[v34]) >> 64);
                *v28++ = v37 + v35;
                v19[v34++] = v35 + 2 * v36 - v37;
                --v29;
              }
              while (v29);
            }
            ++v24;
            v25 += v26;
            v27 += v26;
          }
          while (v24 != v21);
        }
        v21 *= 2;
        v22 = v23;
      }
      while (v21 < v63);
      v52 = v63;
      do
      {
        v53 = *v19;
        if (*v19 - 2 * *v11 >= 0)
          v53 = *v19 - 2 * *v11;
        if (v53 - *v11 >= 0)
          v53 -= *v11;
        *v19++ = v53;
        --v52;
      }
      while (v52);
      ++v5;
      v4 = v62 + v63;
      v1 = v59;
    }
    while (v61 + 1 != v58);
  }
  return 0;
}

uint64_t ccpolyzp_po2cyc_inv_ntt(unsigned int **a1)
{
  _DWORD *v1;
  BOOL v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int v17;
  unsigned int **v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int **v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  _QWORD *v49;
  unsigned int v50;
  unsigned int *v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int *v54;
  BOOL v55;
  _QWORD *v56;
  _QWORD *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int **v60;
  unsigned int v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  unsigned int *v67;
  uint64_t v69;
  _QWORD *v70;
  unsigned int v71;
  unint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  int v75;
  unint64_t v76;
  unsigned int **v77;
  int v78;
  uint64_t v79;

  v1 = *a1;
  v79 = **a1;
  if (*((_BYTE *)*a1 + 8))
    v2 = **a1 >= 3;
  else
    v2 = 0;
  if (!v2)
    return 4294967289;
  v3 = v1[1];
  if (v3)
  {
    v4 = 0;
    v70 = v1 + 4;
    v5 = (v3 - 1);
    if (v79 >= 0x80)
      v6 = 128;
    else
      v6 = v79;
    v77 = a1 + 1;
    v78 = 0;
    v74 = *a1;
    v69 = v6;
    v7 = v79 - v6;
    v8 = v3 - 2;
    v72 = (v3 - 1);
    v73 = v1[1];
    v71 = v3 - 2;
    do
    {
      if (v4 >= v5)
      {
        v11 = v70;
        v14 = v1;
        if ((*v70 & 0x8000000000000000) != 0)
          return 4294967289;
      }
      else
      {
        v9 = v8;
        v10 = v1;
        do
        {
          v10 = (_DWORD *)*((_QWORD *)v10 + 14);
          v2 = v4 >= v9--;
        }
        while (!v2);
        v12 = *((_QWORD *)v10 + 2);
        v11 = v10 + 4;
        if (v12 < 0)
          return 4294967289;
        v13 = v8;
        v14 = v1;
        do
        {
          v14 = (_DWORD *)*((_QWORD *)v14 + 14);
          v2 = v4 >= v13--;
        }
        while (!v2);
      }
      v15 = sizeof_struct_ccrns_mul_modulus();
      v16 = v1;
      if (v4 < v5)
      {
        v17 = v8;
        v16 = v1;
        do
        {
          v16 = (_DWORD *)*((_QWORD *)v16 + 14);
          v2 = v4 >= v17--;
        }
        while (!v2);
      }
      v76 = v4;
      v75 = v79 * v4;
      v18 = &v77[(v79 * v4)];
      if (v79 >= 4)
      {
        v19 = ((unint64_t)(v15 + 7) >> 3) * v69;
        v20 = (uint64_t)&v14[2 * v79 + 2 * v19];
        v21 = (uint64_t)&v16[2 * v79 + 2 * v19 + 2 * v79];
        v22 = v20 + 168;
        v23 = v21 + 168;
        v24 = 1;
        v25 = v79 >> 1;
        v26 = 1;
        do
        {
          v27 = 0;
          v28 = 0;
          v29 = 2 * v24;
          if (v25 <= 1)
            v30 = 1;
          else
            v30 = v25;
          v31 = v24;
          do
          {
            v32 = &(&v77[v78])[v27];
            v33 = v31 - (unint64_t)v27;
            v34 = 2 * v28 * v24;
            if (v26 >= v7)
            {
              if (v34 < v34 + v24)
              {
                v49 = (_QWORD *)(v23 + 24 * (v79 + ~v26));
                v50 = v31;
                do
                {
                  v51 = v18[v50];
                  v52 = (char *)*v32 - (char *)v51 + 2 * *v49;
                  v53 = (unsigned int *)((char *)*v32 + (_QWORD)v51);
                  if ((uint64_t)v53 - 2 * *v49 >= 0)
                    v53 = (unsigned int *)((char *)v53 - 2 * *v49);
                  v54 = (unsigned int *)(v49[1] * v52
                                       - *v49
                                       * (((unint64_t)v52 * (unsigned __int128)(unint64_t)v49[2]) >> 64));
                  *v32++ = v53;
                  v18[v50++] = v54;
                  --v33;
                }
                while (v33);
              }
            }
            else if (v34 < v34 + v24)
            {
              v35 = v31;
              do
              {
                v36 = v18[v35];
                v37 = *(_QWORD *)(v22 + 8 * v26);
                v38 = (char *)*v32 - (char *)v36 + 2 * *v11;
                v39 = (unsigned int *)((char *)*v32 + (_QWORD)v36);
                if ((uint64_t)v39 - 2 * *v11 >= 0)
                  v39 = (unsigned int *)((char *)v39 - 2 * *v11);
                v40 = v38 * v37;
                v41 = ((unint64_t)v38 * (unsigned __int128)v37) >> 64;
                v42 = v11[2];
                v43 = ((unint64_t)v40 * (unsigned __int128)v42) >> 64;
                v44 = (v41 * (unsigned __int128)v42) >> 64;
                v45 = v41 * v42;
                v2 = __CFADD__(v43, v45);
                v46 = v43 + v45;
                v47 = v2;
                v48 = (unsigned int *)(v40
                                     - (v47
                                      + __CFADD__(v40 * v11[3], v46)
                                      + v44
                                      + v11[3] * v41
                                      + (((unint64_t)v40 * (unsigned __int128)(unint64_t)v11[3]) >> 64))
                                     * *v11);
                *v32++ = v39;
                v18[v35++] = v48;
                --v33;
              }
              while (v33);
            }
            ++v28;
            ++v26;
            v27 += v29;
            v31 += v29;
          }
          while (v28 != v30);
          v24 *= 2;
          v55 = v25 > 3;
          v25 >>= 1;
        }
        while (v55);
      }
      v1 = v74;
      v56 = v74;
      v57 = v74;
      v5 = v72;
      v8 = v71;
      if (v76 < v72)
      {
        v58 = v71;
        v56 = v74;
        do
        {
          v56 = (_QWORD *)v56[14];
          v2 = v76 >= v58--;
        }
        while (!v2);
        v59 = v71;
        v57 = v74;
        do
        {
          v57 = (_QWORD *)v57[14];
          v2 = v76 >= v59--;
        }
        while (!v2);
      }
      v60 = &(&v77[v75])[v79 >> 1];
      v61 = v79 >> 1;
      do
      {
        v62 = (unint64_t)*v18 + (_QWORD)*v60;
        if ((uint64_t)(v62 - 2 * *v11) >= 0)
          v62 -= 2 * *v11;
        v64 = v57[11];
        v65 = (unsigned int *)(v62 * v57[12] - v64 * ((v62 * (unsigned __int128)(unint64_t)v57[13]) >> 64));
        if ((uint64_t)v65 - v64 >= 0)
          v65 = (unsigned int *)((char *)v65 - v64);
        v66 = v56[8];
        v63 = (char *)*v18 - (char *)*v60 + 2 * *v11;
        v67 = (unsigned int *)(v56[9] * v63
                             - v66 * (((unint64_t)v56[10] * (unsigned __int128)(unint64_t)v63) >> 64));
        if ((uint64_t)v67 - v66 >= 0)
          v67 = (unsigned int *)((char *)v67 - v66);
        *v18++ = v65;
        *v60++ = v67;
        --v61;
      }
      while (v61);
      v4 = v76 + 1;
      v78 += v79;
    }
    while (v76 + 1 != v73);
  }
  return 0;
}

uint64_t ccrsa_is_valid_prime_ws(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, void *a5, unint64_t a6, uint64_t (**a7)(_QWORD, unint64_t, uint64_t))
{
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t result;

  v14 = *(_QWORD *)(a1 + 16);
  v15 = (_QWORD *)(*(uint64_t (**)(void))(a1 + 24))();
  ccn_set(a2, v15, a3);
  *v15 &= ~1uLL;
  v16 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, a2);
  if (!ccn_gcd_ws(a1, a2, v16, a2, v15, a4, a5) && ccn_n(a2, v16) == 1 && *v16 == 1)
    result = ccprime_rabin_miller_ws(a1, a2, (unint64_t *)a3, a6, a7);
  else
    result = 0;
  *(_QWORD *)(a1 + 16) = v14;
  return result;
}

uint64_t cckyber_kem_keypair_coins(unsigned int *a1, void *a2, uint64_t a3, char *a4, _OWORD *a5)
{
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v9 = cckyber_indcpa_keypair(a1, (uint64_t)a2, a3, a4);
  if (!(_DWORD)v9)
  {
    memcpy((void *)(a3 + 384 * *a1), a2, (384 * *a1) | 0x20);
    cckyber_hash_h((384 * *a1) | 0x20, (char *)a2, a3 + ((((384 * *a1) | 0x20) + 384 * *a1) | 0x40) - 64);
    v10 = a5[1];
    v11 = a3 + ((768 * *a1) | 0x60);
    *(_OWORD *)(v11 - 32) = *a5;
    *(_OWORD *)(v11 - 16) = v10;
  }
  return v9;
}

uint64_t cckyber_kem_keypair(unsigned int *a1, void *a2, uint64_t a3, uint64_t (**a4)(_QWORD, uint64_t, char *))
{
  uint64_t v7;
  uint64_t v8;
  char __s[32];
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C874D8];
  v7 = (*a4)(a4, 64, __s);
  if (!(_DWORD)v7)
    v7 = cckyber_kem_keypair_coins(a1, a2, a3, __s, &v11);
  v8 = v7;
  cc_clear(0x40uLL, __s);
  return v8;
}

uint64_t cckyber_kem_encapsulate_msg(unsigned int *a1, char *a2, uint64_t a3, _OWORD *a4, __int128 *a5)
{
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v14;
  __int128 v15;
  char v16[40];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C874D8];
  v10 = a5[1];
  v14 = *a5;
  v15 = v10;
  cckyber_hash_h((384 * *a1) | 0x20, a2, (uint64_t)v16);
  cckyber_hash_g(0x40uLL, (char *)&v14, (uint64_t)&v14);
  v11 = cckyber_indcpa_encrypt(a1, a2, (uint64_t)a5, v16, a3);
  if (!(_DWORD)v11)
  {
    v12 = v15;
    *a4 = v14;
    a4[1] = v12;
  }
  cc_clear(0x40uLL, &v14);
  return v11;
}

uint64_t cckyber_kem_encapsulate(unsigned int *a1, char *a2, uint64_t a3, _OWORD *a4, uint64_t (**a5)(_QWORD, uint64_t, __int128 *))
{
  uint64_t v9;
  uint64_t v10;
  __int128 __s[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C874D8];
  v9 = (*a5)(a5, 32, __s);
  if ((_DWORD)v9)
    return v9;
  v10 = cckyber_kem_encapsulate_msg(a1, a2, a3, a4, __s);
  cc_clear(0x20uLL, __s);
  return v10;
}

uint64_t cckyber_kem_decapsulate(unsigned int *a1, uint64_t a2, char *a3, char *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  char *v15;
  uint64_t v16;
  char v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t (*v21)(_QWORD *, uint64_t);
  void (*v22)(uint64_t);
  char __s[32];
  __int128 v24;
  __int128 v25;
  uint64_t v26[4];
  char v27[32];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C874D8];
  v8 = *a1;
  v9 = sizeof_struct_ccpolyzp_po2cyc();
  v19[0] = cc_malloc_clear(8* ((v9 + 511) / v9+ (8 * v9 + 2816 * v8 + 1279) / (8 * v9)+ 2 * ((v9 + 511) / v9)+ 4 * ((v9 - 1 + (v8 << 9)) / v9)+ (v9 - 1 + (v8 << 9) * v8) / v9+ (v9 + 384 * v8 + 31) / v9));
  v10 = *a1;
  v11 = sizeof_struct_ccpolyzp_po2cyc();
  v19[1] = (v11 + 511) / v11
         + (8 * v11 + 2816 * v10 + 1279) / (8 * v11)
         + 2 * ((v11 + 511) / v11)
         + 4 * ((v11 - 1 + (v10 << 9)) / v11)
         + (v11 - 1 + (v10 << 9) * v10) / v11
         + (v11 + 384 * v10 + 31) / v11;
  v20 = 0;
  v21 = cc_ws_alloc;
  v22 = cc_ws_free;
  if (!v19[0])
    return 4294967283;
  v12 = (char *)(a2 + (384 * v10));
  cckyber_indcpa_decrypt_ws((uint64_t)v19, a1, a2, (uint64_t)a3, (uint64_t)__s);
  v13 = a2 + ((768 * *a1) | 0x60);
  v14 = *(_OWORD *)(v13 - 48);
  v24 = *(_OWORD *)(v13 - 64);
  v25 = v14;
  cckyber_hash_g(0x40uLL, __s, (uint64_t)v26);
  v15 = (char *)v21(v19, (2816 * (unint64_t)v10 + 1343) >> 6);
  v16 = cckyber_indcpa_encrypt_ws((uint64_t)v19, a1, v12, (uint64_t)__s, v27, (uint64_t)v15);
  v17 = cc_cmp_safe(32 * (a1[1] + *a1 * a1[2]), a3, v15);
  cckyber_rkprf((char *)(a2 + ((768 * *a1) | 0x60) - 32), 32 * (a1[1] + a1[2] * *a1), a3, a4);
  ccn_mux(4, v17, (uint64_t *)a4, (uint64_t *)a4, v26);
  v20 = 0;
  cc_clear(0x40uLL, __s);
  cc_clear(0x40uLL, v26);
  v22((uint64_t)v19);
  return v16;
}

uint64_t ccder_encode_rsa_pub(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = a1 + 3;
  v6 = *a1;
  v7 = ccder_encode_integer(*a1, &a1[2 * *a1 + 4], a2, a3);
  v8 = ccder_encode_integer(v6, v5, a2, v7);
  return ccder_encode_constructed_tl(0x2000000000000010uLL, a3, a2, v8);
}

uint64_t ccrng_process_atfork_child(uint64_t a1)
{
  return cc_lock_init((_DWORD *)(a1 + 208));
}

BOOL ccn_divides1(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = 0;
  if (a1)
  {
    v4 = (2 - ((3 * a3) ^ 2) * a3) * ((3 * a3) ^ 2);
    v5 = (2 - (2 - v4 * a3) * v4 * a3) * (2 - v4 * a3) * v4;
    v6 = (2 - v5 * a3) * v5;
    do
    {
      v7 = *a2++;
      v3 = ((v6 * (v7 - v3) + ((unint64_t)((v7 - __PAIR128__(v7, v3)) >> 64) >> 63)) * (unsigned __int128)a3) >> 64;
      --a1;
    }
    while (a1);
  }
  return (v3 | HIDWORD(v3)) == 0;
}

uint64_t ccpad_pkcs7_ecb_decrypt(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  char v7;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v17;

  v7 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v7 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v7 = 1;
    }
  }
  v17 = v7;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = a3 / v13;
  (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a1 + 24))(a2, a3 / v13, a4, a5);
  v15 = a3 - ccpad_pkcs7_decode(v13, a5 + (v14 - 1) * v13);
  cc_disable_dit(&v17);
  return v15;
}

int8x16_t *ccm128_encrypt(int8x16_t *result, int8x16_t *a2, int8x16_t *a3, int a4, int8x16_t *a5, int8x16_t *a6, unsigned int a7)
{
  int8x16_t v7;
  int8x16_t *v8;
  int8x16_t v19;
  int64x2_t v20;
  int8x16_t v21;
  int8x16_t v64;

  v7 = *(int8x16_t *)&qword_1DEDD0840[2 * a7];
  _Q16 = *a5;
  _Q17 = a5[1];
  _Q18 = a5[2];
  _Q19 = a5[3];
  v8 = a5 + 4;
  _Q20 = *v8;
  _Q21 = v8[1];
  _Q22 = v8[2];
  _Q23 = v8[3];
  v8 += 4;
  _Q24 = *v8;
  _Q25 = v8[1];
  v19 = v8[2];
  v20 = (int64x2_t)vqtbl1q_s8(*a6, *(int8x16_t *)Lbswap_mask_1);
  do
  {
    v20 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddq_s64(v20, *(int64x2_t *)qword_1DEDD0840), v7), vbicq_s8((int8x16_t)v20, v7));
    v21 = *result++;
    __asm
    {
      AESE            V3.16B, V16.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V16.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V17.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V17.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V18.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V18.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V19.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V19.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V20.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V20.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V21.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V21.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V22.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V22.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V23.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V23.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V24.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V24.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V25.16B
      AESE            V1.16B, V25.16B
    }
    v64 = veorq_s8(_Q1, v19);
    *a2++ = veorq_s8(v21, veorq_s8(_Q3, v19));
    _VF = __OFSUB__(a4--, 1);
  }
  while (!((a4 < 0) ^ _VF | (a4 == 0)));
  *a6 = vqtbl1q_s8((int8x16_t)v20, *(int8x16_t *)Lbswap_mask_1);
  *a3 = v64;
  return result;
}

int8x16_t *ccm192_encrypt(int8x16_t *result, int8x16_t *a2, int8x16_t *a3, int a4, int8x16_t *a5, int8x16_t *a6, unsigned int a7)
{
  int8x16_t v7;
  int8x16_t *v8;
  int8x16_t v21;
  int64x2_t v22;
  int8x16_t v23;
  int8x16_t v74;

  v7 = *(int8x16_t *)&qword_1DEDD0840[2 * a7];
  _Q16 = *a5;
  _Q17 = a5[1];
  _Q18 = a5[2];
  _Q19 = a5[3];
  v8 = a5 + 4;
  _Q20 = *v8;
  _Q21 = v8[1];
  _Q22 = v8[2];
  _Q23 = v8[3];
  v8 += 4;
  _Q24 = *v8;
  _Q25 = v8[1];
  _Q26 = v8[2];
  _Q27 = v8[3];
  v21 = v8[4];
  v22 = (int64x2_t)vqtbl1q_s8(*a6, *(int8x16_t *)Lbswap_mask_1);
  do
  {
    v22 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddq_s64(v22, *(int64x2_t *)qword_1DEDD0840), v7), vbicq_s8((int8x16_t)v22, v7));
    v23 = *result++;
    __asm
    {
      AESE            V3.16B, V16.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V16.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V17.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V17.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V18.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V18.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V19.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V19.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V20.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V20.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V21.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V21.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V22.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V22.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V23.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V23.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V24.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V24.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V25.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V25.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V26.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V26.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V27.16B
      AESE            V1.16B, V27.16B
    }
    v74 = veorq_s8(_Q1, v21);
    *a2++ = veorq_s8(v23, veorq_s8(_Q3, v21));
    _VF = __OFSUB__(a4--, 1);
  }
  while (!((a4 < 0) ^ _VF | (a4 == 0)));
  *a6 = vqtbl1q_s8((int8x16_t)v22, *(int8x16_t *)Lbswap_mask_1);
  *a3 = v74;
  return result;
}

int8x16_t *ccm256_encrypt(int8x16_t *result, int8x16_t *a2, int8x16_t *a3, int a4, int8x16_t *a5, int8x16_t *a6, unsigned int a7)
{
  int8x16_t v7;
  int8x16_t *v8;
  int8x16_t v23;
  int64x2_t v24;
  int8x16_t v25;
  int8x16_t v84;

  v7 = *(int8x16_t *)&qword_1DEDD0840[2 * a7];
  _Q16 = *a5;
  _Q17 = a5[1];
  _Q18 = a5[2];
  _Q19 = a5[3];
  v8 = a5 + 4;
  _Q20 = *v8;
  _Q21 = v8[1];
  _Q22 = v8[2];
  _Q23 = v8[3];
  v8 += 4;
  _Q24 = *v8;
  _Q25 = v8[1];
  _Q26 = v8[2];
  _Q27 = v8[3];
  v8 += 4;
  _Q28 = *v8;
  _Q29 = v8[1];
  v23 = v8[2];
  v24 = (int64x2_t)vqtbl1q_s8(*a6, *(int8x16_t *)Lbswap_mask_1);
  do
  {
    v24 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddq_s64(v24, *(int64x2_t *)qword_1DEDD0840), v7), vbicq_s8((int8x16_t)v24, v7));
    v25 = *result++;
    __asm
    {
      AESE            V3.16B, V16.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V16.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V17.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V17.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V18.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V18.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V19.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V19.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V20.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V20.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V21.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V21.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V22.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V22.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V23.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V23.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V24.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V24.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V25.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V25.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V26.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V26.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V27.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V27.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V28.16B
      AESMC           V3.16B, V3.16B
      AESE            V1.16B, V28.16B
      AESMC           V1.16B, V1.16B
      AESE            V3.16B, V29.16B
      AESE            V1.16B, V29.16B
    }
    v84 = veorq_s8(_Q1, v23);
    *a2++ = veorq_s8(v25, veorq_s8(_Q3, v23));
    _VF = __OFSUB__(a4--, 1);
  }
  while (!((a4 < 0) ^ _VF | (a4 == 0)));
  *a6 = vqtbl1q_s8((int8x16_t)v24, *(int8x16_t *)Lbswap_mask_1);
  *a3 = v84;
  return result;
}

uint64_t ccrsa_decrypt_eme_pkcs1v15_blinded_ws(uint64_t a1, uint64_t (**a2)(_QWORD, uint64_t, uint64_t), uint64_t *a3, rsize_t *a4, void *a5, unint64_t a6, unsigned __int8 *a7)
{
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  size_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;

  v14 = ccrsa_ctx_public(a3);
  v15 = ccrsa_block_size(v14);
  if (*a4 < v15)
    return 4294967273;
  v17 = v15;
  v18 = *a3;
  *a4 = v15;
  v20 = *(_QWORD *)(a1 + 16);
  v19 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v18);
  if (ccn_read_uint(v18, v19, a6, a7))
  {
    result = 4294967273;
  }
  else
  {
    result = ccrsa_priv_crypt_blinded_ws(a1, a2, a3, v19, (unint64_t *)v19);
    if (!(_DWORD)result)
      result = ccrsa_eme_pkcs1v15_decode_safe_ws(a1, a3, a4, a5, v17, (unint64_t *)v19);
  }
  *(_QWORD *)(a1 + 16) = v20;
  return result;
}

uint64_t ccsigma_init(uint64_t a1, uint64_t a2, int a3, uint64_t (**a4)(_QWORD, uint64_t, uint64_t *))
{
  char v6;
  uint64_t **v12;
  uint64_t key_fips;
  char v15;

  v6 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v15 = v6;
  *(_QWORD *)a2 = a1;
  *(_DWORD *)(a2 + 8) = a3;
  v12 = (uint64_t **)(*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
  key_fips = ccec_generate_key_fips(*(uint64_t **)a1, a4, v12);
  cc_disable_dit(&v15);
  return key_fips;
}

uint64_t ccsigma_import_signing_key(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  char v6;
  unint64_t **v12;
  uint64_t v13;
  char v15;

  v6 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v15 = v6;
  v12 = (unint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v13 = ccec_x963_import_priv(*(unint64_t **)(*(_QWORD *)a1 + 24), a2, a3, v12);
  if (!(_DWORD)v13)
    ccsigma_set_signing_function(a1, (uint64_t)ccsigma_sign_internal, a1);
  cc_disable_dit(&v15);
  return v13;
}

uint64_t ccsigma_set_signing_function(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  char v10;

  v3 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v10 = v3;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  cc_disable_dit(&v10);
  return 0;
}

uint64_t ccsigma_sign_internal(uint64_t a1, unint64_t a2, unsigned __int8 *a3, unint64_t *a4, char *a5, uint64_t (**a6)(_QWORD, unint64_t, void *))
{
  uint64_t *v12;
  unint64_t v13;
  uint64_t **v14;
  char *v15;

  v12 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v13 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if (*a4 < v13)
    return 4294967289;
  v14 = (uint64_t **)v12;
  *a4 = v13;
  v15 = &a5[ccec_signature_r_s_size(v12)];
  return ccec_sign_composite(v14, a2, a3, a5, v15, a6);
}

uint64_t ccsigma_import_peer_verification_key(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  char v6;
  unint64_t **v12;
  uint64_t v13;
  char v15;

  v6 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v15 = v6;
  v12 = (unint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v13 = ccec_x963_import_pub(*(unint64_t **)(*(_QWORD *)a1 + 24), a2, a3, v12);
  cc_disable_dit(&v15);
  return v13;
}

uint64_t ccsigma_export_key_share(uint64_t **a1, rsize_t *a2, char *a3)
{
  char v6;
  unint64_t v12;
  rsize_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;

  v6 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v17 = v6;
  v12 = ccec_compressed_x962_export_pub_size(**a1);
  v13 = *a2;
  if (*a2 < v12)
  {
    v15 = 4294967289;
    goto LABEL_8;
  }
  *a2 = v12;
  v14 = ((uint64_t (*)(uint64_t **))(*a1)[1])(a1);
  v15 = ccec_compressed_x962_export_pub(v14, a3);
  if ((_DWORD)v15)
  {
    v13 = *a2;
LABEL_8:
    cc_clear(v13, a3);
  }
  cc_disable_dit(&v17);
  return v15;
}

uint64_t ccsigma_import_peer_key_share(unint64_t ***a1, uint64_t a2, unsigned __int8 *a3)
{
  char v6;
  unint64_t **v12;
  uint64_t v13;
  char v15;

  v6 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v15 = v6;
  v12 = (unint64_t **)((uint64_t (*)(unint64_t ***))(*a1)[2])(a1);
  v13 = ccec_compressed_x962_import_pub(**a1, a2, a3, v12);
  cc_disable_dit(&v15);
  return v13;
}

BOOL ccsigma_peer_role(uint64_t a1)
{
  char v1;
  _BOOL8 v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *(_DWORD *)(a1 + 8) == 0;
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccsigma_kex_init_ctx(uint64_t a1)
{
  char v1;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v1 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v10 = v1;
  v7 = 16;
  if (!*(_DWORD *)(a1 + 8))
    v7 = 8;
  v8 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + v7))();
  cc_disable_dit(&v10);
  return v8;
}

uint64_t ccsigma_kex_resp_ctx(uint64_t a1)
{
  char v1;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v1 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v10 = v1;
  v7 = 16;
  if (*(_DWORD *)(a1 + 8) == 1)
    v7 = 8;
  v8 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + v7))();
  cc_disable_dit(&v10);
  return v8;
}

uint64_t ccsigma_derive_session_keys(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, uint64_t, uint64_t *))
{
  char v8;
  uint64_t *v14;
  uint64_t v15;
  _QWORD **v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  char v22;
  char v23[32];
  uint64_t v24;

  v8 = 0;
  v24 = *MEMORY[0x1E0C874D8];
  v22 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v22 = v8;
  v14 = *a1;
  v15 = cczp_bitlen(**a1);
  v21 = (unint64_t)(v15 + 7) >> 3;
  if ((unint64_t)(v15 + 7) > 0x107)
  {
    v19 = 4294967291;
  }
  else
  {
    v16 = (_QWORD **)((uint64_t (*)(uint64_t **))v14[1])(a1);
    v17 = (_QWORD *)((uint64_t (*)(uint64_t **))(*a1)[2])(a1);
    v18 = ccecdh_compute_shared_secret(v16, v17, &v21, v23, a4);
    if (!(_DWORD)v18)
      v18 = ((uint64_t (*)(uint64_t **, unint64_t, char *, uint64_t, uint64_t))v14[12])(a1, v21, v23, a2, a3);
    v19 = v18;
  }
  cc_disable_dit(&v22);
  return v19;
}

uint64_t ccsigma_compute_mac(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;

  v9 = 0;
  v24 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v9 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v9 = 1;
    }
  }
  v24 = v9;
  v15 = *a1;
  if (*(_QWORD *)(*a1 + 64) <= a2)
  {
    v22 = 4294967289;
  }
  else
  {
    v16 = 0;
    if (a2)
    {
      v17 = *(uint64_t **)(v15 + 72);
      v18 = a2;
      do
      {
        v19 = *v17++;
        v16 += v19;
        --v18;
      }
      while (v18);
    }
    v20 = *(_QWORD *)(*(_QWORD *)(v15 + 72) + 8 * a2);
    v21 = (*(uint64_t (**)(uint64_t *))(v15 + 88))(a1);
    v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 112))(a1, v20, v21 + v16, a3, a4, a5);
  }
  cc_disable_dit(&v24);
  return v22;
}

uint64_t ccsigma_sign(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v8;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  _BYTE v20[64];
  uint64_t v21;

  v8 = 0;
  v21 = *MEMORY[0x1E0C874D8];
  v19 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v19 = v8;
  v14 = **(_QWORD **)(*(_QWORD *)a1 + 32);
  if (v14 > 0x40)
  {
    v16 = 4294967291;
  }
  else
  {
    v15 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 136))(a1, *(unsigned int *)(a1 + 8), a3, a4, v20);
    if (!(_DWORD)v15)
    {
      v18 = *(_QWORD *)(*(_QWORD *)a1 + 40);
      v15 = (*(uint64_t (**)(_QWORD, unint64_t, _BYTE *, uint64_t *, uint64_t, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 24), v14, v20, &v18, a2, a5);
    }
    v16 = v15;
  }
  cc_disable_dit(&v19);
  return v16;
}

uint64_t ccsigma_verify(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  char v8;
  unint64_t v14;
  uint64_t (*v15)(uint64_t, _BOOL8, uint64_t, uint64_t, unsigned __int8 *);
  _BOOL8 v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  BOOL v23;
  char v24;
  unsigned __int8 v25[64];
  uint64_t v26;

  v8 = 0;
  v26 = *MEMORY[0x1E0C874D8];
  v24 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v24 = v8;
  v14 = **(_QWORD **)(*(_QWORD *)a1 + 32);
  if (v14 > 0x40)
  {
    v21 = 4294967291;
  }
  else
  {
    v15 = *(uint64_t (**)(uint64_t, _BOOL8, uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)a1 + 136);
    v16 = ccsigma_peer_role(a1);
    v17 = v15(a1, v16, a3, a4, v25);
    if ((_DWORD)v17)
    {
      v21 = v17;
    }
    else
    {
      v18 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      v19 = ccec_signature_r_s_size(v18);
      v23 = 0;
      v20 = ccec_verify_composite(v18, v14, v25, a2, &a2[v19], &v23);
      if (v20 | v23)
        v21 = v20;
      else
        v21 = 4294967150;
    }
  }
  cc_disable_dit(&v24);
  return v21;
}

uint64_t ccsigma_seal(uint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v16;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v39;

  v16 = 0;
  v39 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v16 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v16 = 1;
    }
  }
  v39 = v16;
  v22 = *a1;
  if (*(_QWORD *)(*a1 + 64) <= a2)
    goto LABEL_16;
  v23 = 0;
  if (a2)
  {
    v24 = *(uint64_t **)(v22 + 72);
    v25 = a2;
    do
    {
      v26 = *v24++;
      v23 += v26;
      --v25;
    }
    while (v25);
  }
  v27 = *(_QWORD *)(*(_QWORD *)(v22 + 72) + 8 * a2);
  v28 = (*(uint64_t (**)(uint64_t *))(v22 + 88))(a1);
  v29 = *a1;
  if (*(_QWORD *)(*a1 + 64) <= a3)
  {
LABEL_16:
    v37 = 4294967289;
  }
  else
  {
    v30 = v28 + v23;
    v31 = 0;
    if (a3)
    {
      v32 = *(uint64_t **)(v29 + 72);
      v33 = a3;
      do
      {
        v34 = *v32++;
        v31 += v34;
        --v33;
      }
      while (v33);
    }
    v35 = *(_QWORD *)(*(_QWORD *)(v29 + 72) + 8 * a3);
    v36 = (*(uint64_t (**)(uint64_t *))(v29 + 88))(a1) + v31;
    v37 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 152))(a1, v27, v30, v35, v36, a4, a5, a6, a7, a8, a9);
    if (!(_DWORD)v37)
      (*(void (**)(uint64_t, uint64_t))(*a1 + 168))(v35, v36);
  }
  cc_disable_dit(&v39);
  return v37;
}

uint64_t ccsigma_open(uint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v15;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  char v39;
  _BYTE v40[16];
  uint64_t v41;

  v15 = 0;
  v41 = *MEMORY[0x1E0C874D8];
  v39 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v15 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v15 = 1;
    }
  }
  v39 = v15;
  v21 = *a1;
  if (*(_QWORD *)(*a1 + 144) > 0x10uLL)
  {
    v36 = 4294967291;
  }
  else
  {
    if (*(_QWORD *)(v21 + 64) <= a2)
      goto LABEL_17;
    v22 = 0;
    if (a2)
    {
      v23 = *(uint64_t **)(v21 + 72);
      v24 = a2;
      do
      {
        v25 = *v23++;
        v22 += v25;
        --v24;
      }
      while (v24);
    }
    v26 = *(_QWORD *)(*(_QWORD *)(v21 + 72) + 8 * a2);
    v27 = (*(uint64_t (**)(uint64_t *))(v21 + 88))(a1);
    v28 = *a1;
    if (*(_QWORD *)(*a1 + 64) <= a3)
    {
LABEL_17:
      v36 = 4294967289;
    }
    else
    {
      v38 = a4;
      v29 = v27 + v22;
      v30 = 0;
      if (a3)
      {
        v31 = *(uint64_t **)(v28 + 72);
        v32 = a3;
        do
        {
          v33 = *v31++;
          v30 += v33;
          --v32;
        }
        while (v32);
      }
      v34 = *(_QWORD *)(*(_QWORD *)(v28 + 72) + 8 * a3);
      v35 = (*(uint64_t (**)(uint64_t *))(v28 + 88))(a1) + v30;
      __memcpy_chk();
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *))(*a1 + 160))(a1, v26, v29, v34, v35, v38, a5, a6, a7, a8, v40);
      if (!(_DWORD)v36)
        (*(void (**)(uint64_t, uint64_t))(*a1 + 168))(v34, v35);
    }
  }
  cc_disable_dit(&v39);
  return v36;
}

uint64_t ccsigma_clear_key(uint64_t *a1, unint64_t a2)
{
  char v2;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  rsize_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;

  v2 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v17 = v2;
  v8 = *a1;
  if (*(_QWORD *)(*a1 + 64) <= a2)
  {
    v15 = 4294967289;
  }
  else
  {
    v9 = 0;
    if (a2)
    {
      v10 = *(uint64_t **)(v8 + 72);
      v11 = a2;
      do
      {
        v12 = *v10++;
        v9 += v12;
        --v11;
      }
      while (v11);
    }
    v13 = *(_QWORD *)(*(_QWORD *)(v8 + 72) + 8 * a2);
    v14 = (*(uint64_t (**)(void))(v8 + 88))();
    cc_clear(v13, (void *)(v14 + v9));
    v15 = 0;
  }
  cc_disable_dit(&v17);
  return v15;
}

_BYTE *ccsigma_clear(uint64_t a1)
{
  char v1;
  char v8;

  v1 = 0;
  v8 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v8 = v1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  return cc_disable_dit(&v8);
}

uint64_t *AccelerateCrypto_SHA512_compress(uint64_t *result, uint64_t a2, int8x16_t *a3)
{
  int8x16_t *v3;
  int8x16_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  __int128 *i8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int64x2_t v23;
  int8x16_t v24;
  int64x2_t v25;
  uint64_t v26;
  int8x16_t v27;
  int64x2_t v28;
  uint64_t v29;
  uint64_t v30;
  int8x16_t v31;
  int64x2_t v32;
  int64x2_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64x2_t v37;
  int8x16_t v38;
  int64x2_t v39;
  uint64_t v40;
  int8x16_t v41;
  int64x2_t v42;
  uint64_t v43;
  uint64_t v44;
  int8x16_t v45;
  int64x2_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64x2_t v50;
  int8x16_t v51;
  int64x2_t v52;
  uint64_t v53;
  int8x16_t v54;
  int64x2_t v55;
  uint64_t v56;
  uint64_t v57;
  int8x16_t v58;
  int64x2_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64x2_t v63;
  int8x16_t v64;
  int64x2_t v65;
  uint64_t v66;
  int8x16_t v67;
  int64x2_t v68;
  uint64_t v69;
  uint64_t v70;
  int8x16_t v71;
  int64x2_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int64x2_t v76;
  int8x16_t v77;
  int64x2_t v78;
  uint64_t v79;
  int8x16_t v80;
  int64x2_t v81;
  uint64_t v82;
  uint64_t v83;
  int8x16_t v84;
  int64x2_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int64x2_t v89;
  int8x16_t v90;
  int64x2_t v91;
  uint64_t v92;
  int8x16_t v93;
  int64x2_t v94;
  uint64_t v95;
  uint64_t v96;
  int8x16_t v97;
  int64x2_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int64x2_t v102;
  int8x16_t v103;
  int64x2_t v104;
  uint64_t v105;
  int8x16_t v106;
  int64x2_t v107;
  int8x16_t v108;
  int64x2_t v109;
  uint64_t v110;
  int64x2_t v111;
  int8x16_t v112;
  int64x2_t v113;
  uint64_t v114;
  int8x16_t v115;
  int64x2_t v116;
  int8x16_t v117;
  int64x2_t v118;
  uint64_t v119;
  BOOL v120;
  __int128 *v121;
  int8x16_t *v122;
  int8x16_t v123;
  uint64_t v124;
  int64x2_t *v125;
  int64x2_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int8x16_t v132;
  uint64_t v133;
  int64x2_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int8x16_t v140;
  uint64_t v141;
  int64x2_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int8x16_t v148;
  uint64_t v149;
  int64x2_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int8x16_t v156;
  uint64_t v157;
  int64x2_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int8x16_t v164;
  uint64_t v165;
  int64x2_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int8x16_t v172;
  uint64_t v173;
  int64x2_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int8x16_t v180;
  uint64_t v181;
  int64x2_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int64x2_t v240;
  int64x2_t v241;
  int64x2_t v242;
  int64x2_t v243;
  int64x2_t v244;
  int64x2_t v245;
  int64x2_t v246;
  int64x2_t v247;

  if (a2)
  {
    v4 = *a3;
    v3 = a3 + 8;
    v5 = (int64x2_t)vrev64q_s8(v4);
    v6 = (int64x2_t)vrev64q_s8(v3[-7]);
    v7 = (int64x2_t)vrev64q_s8(v3[-6]);
    v8 = (int64x2_t)vrev64q_s8(v3[-5]);
    v9 = (int64x2_t)vrev64q_s8(v3[-4]);
    v10 = (int64x2_t)vrev64q_s8(v3[-3]);
    v11 = (int64x2_t)vrev64q_s8(v3[-2]);
    v12 = (int64x2_t)vrev64q_s8(v3[-1]);
    i8 = &xmmword_1DEE29220;
    v240 = vaddq_s64((int64x2_t)sha512_K, v5);
    v241 = vaddq_s64(unk_1DEE291B0, v6);
    v242 = vaddq_s64(unk_1DEE291C0, v7);
    v243 = vaddq_s64(unk_1DEE291D0, v8);
    v244 = vaddq_s64((int64x2_t)xmmword_1DEE291E0, v9);
    v245 = vaddq_s64(unk_1DEE291F0, v10);
    v246 = vaddq_s64(unk_1DEE29200, v11);
    v247 = vaddq_s64(unk_1DEE29210, v12);
    while (1)
    {
      v14 = *result;
      v15 = result[1];
      v16 = result[2];
      v17 = result[3];
      v18 = result[4];
      v19 = result[5];
      v20 = result[6];
      v21 = result[7];
      v22 = 4;
      do
      {
        v23 = (int64x2_t)vextq_s8((int8x16_t)v5, (int8x16_t)v6, 8uLL);
        v24 = (int8x16_t)vshrq_n_u64((uint64x2_t)v12, 0x13uLL);
        v25 = vshlq_n_s64(v12, 3uLL);
        v26 = v21
            + v240.i64[0]
            + (__ROR8__(v18, 14) ^ __ROR8__(v18, 18) ^ __ROR8__(v18, 41))
            + ((v19 ^ v20) & v18 ^ v20);
        v27 = (int8x16_t)vshrq_n_u64((uint64x2_t)v23, 1uLL);
        v28 = vshlq_n_s64(v23, 0x38uLL);
        v29 = v17 + v26;
        v30 = v26 + (__ROR8__(v14, 28) ^ __ROR8__(v14, 34) ^ __ROR8__(v14, 39)) + ((v15 ^ v16) & v14 ^ v15 & v16);
        v31 = veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v12, 6uLL), v24), (int8x16_t)v25), (int8x16_t)vshrq_n_u64((uint64x2_t)v24, 0x2AuLL));
        v32 = (int64x2_t)*i8;
        v33 = (int64x2_t *)(i8 + 1);
        v5 = vaddq_s64(vaddq_s64(vaddq_s64(v5, (int64x2_t)vextq_s8((int8x16_t)v9, (int8x16_t)v10, 8uLL)), (int64x2_t)veorq_s8(v31, (int8x16_t)vshlq_n_s64(v25, 0x2AuLL))), (int64x2_t)veorq_s8(veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v23, 7uLL), v27), (int8x16_t)v28), (int8x16_t)vshrq_n_u64((uint64x2_t)v27, 7uLL)), (int8x16_t)vshlq_n_s64(v28, 7uLL)));
        v34 = v20
            + v240.i64[1]
            + (__ROR8__(v29, 14) ^ __ROR8__(v29, 18) ^ __ROR8__(v29, 41))
            + ((v18 ^ v19) & v29 ^ v19);
        v35 = v16 + v34;
        v36 = v34 + (__ROR8__(v30, 28) ^ __ROR8__(v30, 34) ^ __ROR8__(v30, 39)) + ((v14 ^ v15) & v30 ^ v14 & v15);
        v240 = vaddq_s64(v32, v5);
        v37 = (int64x2_t)vextq_s8((int8x16_t)v6, (int8x16_t)v7, 8uLL);
        v38 = (int8x16_t)vshrq_n_u64((uint64x2_t)v5, 0x13uLL);
        v39 = vshlq_n_s64(v5, 3uLL);
        v40 = v19
            + v241.i64[0]
            + (__ROR8__(v35, 14) ^ __ROR8__(v35, 18) ^ __ROR8__(v35, 41))
            + ((v29 ^ v18) & v35 ^ v18);
        v41 = (int8x16_t)vshrq_n_u64((uint64x2_t)v37, 1uLL);
        v42 = vshlq_n_s64(v37, 0x38uLL);
        v43 = v15 + v40;
        v44 = v40 + (__ROR8__(v36, 28) ^ __ROR8__(v36, 34) ^ __ROR8__(v36, 39)) + ((v30 ^ v14) & v36 ^ v30 & v14);
        v45 = veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v5, 6uLL), v38), (int8x16_t)v39), (int8x16_t)vshrq_n_u64((uint64x2_t)v38, 0x2AuLL));
        v46 = *v33++;
        v6 = vaddq_s64(vaddq_s64(vaddq_s64(v6, (int64x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v11, 8uLL)), (int64x2_t)veorq_s8(v45, (int8x16_t)vshlq_n_s64(v39, 0x2AuLL))), (int64x2_t)veorq_s8(veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v37, 7uLL), v41), (int8x16_t)v42), (int8x16_t)vshrq_n_u64((uint64x2_t)v41, 7uLL)), (int8x16_t)vshlq_n_s64(v42, 7uLL)));
        v47 = v18
            + v241.i64[1]
            + (__ROR8__(v43, 14) ^ __ROR8__(v43, 18) ^ __ROR8__(v43, 41))
            + ((v35 ^ v29) & v43 ^ v29);
        v48 = v14 + v47;
        v49 = v47 + (__ROR8__(v44, 28) ^ __ROR8__(v44, 34) ^ __ROR8__(v44, 39)) + ((v36 ^ v30) & v44 ^ v36 & v30);
        v241 = vaddq_s64(v46, v6);
        v50 = (int64x2_t)vextq_s8((int8x16_t)v7, (int8x16_t)v8, 8uLL);
        v51 = (int8x16_t)vshrq_n_u64((uint64x2_t)v6, 0x13uLL);
        v52 = vshlq_n_s64(v6, 3uLL);
        v53 = v29
            + v242.i64[0]
            + (__ROR8__(v48, 14) ^ __ROR8__(v48, 18) ^ __ROR8__(v48, 41))
            + ((v43 ^ v35) & v48 ^ v35);
        v54 = (int8x16_t)vshrq_n_u64((uint64x2_t)v50, 1uLL);
        v55 = vshlq_n_s64(v50, 0x38uLL);
        v56 = v30 + v53;
        v57 = v53 + (__ROR8__(v49, 28) ^ __ROR8__(v49, 34) ^ __ROR8__(v49, 39)) + ((v44 ^ v36) & v49 ^ v44 & v36);
        v58 = veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v6, 6uLL), v51), (int8x16_t)v52), (int8x16_t)vshrq_n_u64((uint64x2_t)v51, 0x2AuLL));
        v59 = *v33++;
        v7 = vaddq_s64(vaddq_s64(vaddq_s64(v7, (int64x2_t)vextq_s8((int8x16_t)v11, (int8x16_t)v12, 8uLL)), (int64x2_t)veorq_s8(v58, (int8x16_t)vshlq_n_s64(v52, 0x2AuLL))), (int64x2_t)veorq_s8(veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v50, 7uLL), v54), (int8x16_t)v55), (int8x16_t)vshrq_n_u64((uint64x2_t)v54, 7uLL)), (int8x16_t)vshlq_n_s64(v55, 7uLL)));
        v60 = v35
            + v242.i64[1]
            + (__ROR8__(v56, 14) ^ __ROR8__(v56, 18) ^ __ROR8__(v56, 41))
            + ((v48 ^ v43) & v56 ^ v43);
        v61 = v36 + v60;
        v62 = v60 + (__ROR8__(v57, 28) ^ __ROR8__(v57, 34) ^ __ROR8__(v57, 39)) + ((v49 ^ v44) & v57 ^ v49 & v44);
        v242 = vaddq_s64(v59, v7);
        v63 = (int64x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v9, 8uLL);
        v64 = (int8x16_t)vshrq_n_u64((uint64x2_t)v7, 0x13uLL);
        v65 = vshlq_n_s64(v7, 3uLL);
        v66 = v43
            + v243.i64[0]
            + (__ROR8__(v61, 14) ^ __ROR8__(v61, 18) ^ __ROR8__(v61, 41))
            + ((v56 ^ v48) & v61 ^ v48);
        v67 = (int8x16_t)vshrq_n_u64((uint64x2_t)v63, 1uLL);
        v68 = vshlq_n_s64(v63, 0x38uLL);
        v69 = v44 + v66;
        v70 = v66 + (__ROR8__(v62, 28) ^ __ROR8__(v62, 34) ^ __ROR8__(v62, 39)) + ((v57 ^ v49) & v62 ^ v57 & v49);
        v71 = veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v7, 6uLL), v64), (int8x16_t)v65), (int8x16_t)vshrq_n_u64((uint64x2_t)v64, 0x2AuLL));
        v72 = *v33++;
        v8 = vaddq_s64(vaddq_s64(vaddq_s64(v8, (int64x2_t)vextq_s8((int8x16_t)v12, (int8x16_t)v5, 8uLL)), (int64x2_t)veorq_s8(v71, (int8x16_t)vshlq_n_s64(v65, 0x2AuLL))), (int64x2_t)veorq_s8(veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v63, 7uLL), v67), (int8x16_t)v68), (int8x16_t)vshrq_n_u64((uint64x2_t)v67, 7uLL)), (int8x16_t)vshlq_n_s64(v68, 7uLL)));
        v73 = v48
            + v243.i64[1]
            + (__ROR8__(v69, 14) ^ __ROR8__(v69, 18) ^ __ROR8__(v69, 41))
            + ((v61 ^ v56) & v69 ^ v56);
        v74 = v49 + v73;
        v75 = v73 + (__ROR8__(v70, 28) ^ __ROR8__(v70, 34) ^ __ROR8__(v70, 39)) + ((v62 ^ v57) & v70 ^ v62 & v57);
        v243 = vaddq_s64(v72, v8);
        v76 = (int64x2_t)vextq_s8((int8x16_t)v9, (int8x16_t)v10, 8uLL);
        v77 = (int8x16_t)vshrq_n_u64((uint64x2_t)v8, 0x13uLL);
        v78 = vshlq_n_s64(v8, 3uLL);
        v79 = v56
            + v244.i64[0]
            + (__ROR8__(v74, 14) ^ __ROR8__(v74, 18) ^ __ROR8__(v74, 41))
            + ((v69 ^ v61) & v74 ^ v61);
        v80 = (int8x16_t)vshrq_n_u64((uint64x2_t)v76, 1uLL);
        v81 = vshlq_n_s64(v76, 0x38uLL);
        v82 = v57 + v79;
        v83 = v79 + (__ROR8__(v75, 28) ^ __ROR8__(v75, 34) ^ __ROR8__(v75, 39)) + ((v70 ^ v62) & v75 ^ v70 & v62);
        v84 = veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v8, 6uLL), v77), (int8x16_t)v78), (int8x16_t)vshrq_n_u64((uint64x2_t)v77, 0x2AuLL));
        v85 = *v33++;
        v9 = vaddq_s64(vaddq_s64(vaddq_s64(v9, (int64x2_t)vextq_s8((int8x16_t)v5, (int8x16_t)v6, 8uLL)), (int64x2_t)veorq_s8(v84, (int8x16_t)vshlq_n_s64(v78, 0x2AuLL))), (int64x2_t)veorq_s8(veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v76, 7uLL), v80), (int8x16_t)v81), (int8x16_t)vshrq_n_u64((uint64x2_t)v80, 7uLL)), (int8x16_t)vshlq_n_s64(v81, 7uLL)));
        v86 = v61
            + v244.i64[1]
            + (__ROR8__(v82, 14) ^ __ROR8__(v82, 18) ^ __ROR8__(v82, 41))
            + ((v74 ^ v69) & v82 ^ v69);
        v87 = v62 + v86;
        v88 = v86 + (__ROR8__(v83, 28) ^ __ROR8__(v83, 34) ^ __ROR8__(v83, 39)) + ((v75 ^ v70) & v83 ^ v75 & v70);
        v244 = vaddq_s64(v85, v9);
        v89 = (int64x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v11, 8uLL);
        v90 = (int8x16_t)vshrq_n_u64((uint64x2_t)v9, 0x13uLL);
        v91 = vshlq_n_s64(v9, 3uLL);
        v92 = v69
            + v245.i64[0]
            + (__ROR8__(v87, 14) ^ __ROR8__(v87, 18) ^ __ROR8__(v87, 41))
            + ((v82 ^ v74) & v87 ^ v74);
        v93 = (int8x16_t)vshrq_n_u64((uint64x2_t)v89, 1uLL);
        v94 = vshlq_n_s64(v89, 0x38uLL);
        v95 = v70 + v92;
        v96 = v92 + (__ROR8__(v88, 28) ^ __ROR8__(v88, 34) ^ __ROR8__(v88, 39)) + ((v83 ^ v75) & v88 ^ v83 & v75);
        v97 = veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v9, 6uLL), v90), (int8x16_t)v91), (int8x16_t)vshrq_n_u64((uint64x2_t)v90, 0x2AuLL));
        v98 = *v33++;
        v10 = vaddq_s64(vaddq_s64(vaddq_s64(v10, (int64x2_t)vextq_s8((int8x16_t)v6, (int8x16_t)v7, 8uLL)), (int64x2_t)veorq_s8(v97, (int8x16_t)vshlq_n_s64(v91, 0x2AuLL))), (int64x2_t)veorq_s8(veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v89, 7uLL), v93), (int8x16_t)v94), (int8x16_t)vshrq_n_u64((uint64x2_t)v93, 7uLL)), (int8x16_t)vshlq_n_s64(v94, 7uLL)));
        v99 = v74
            + v245.i64[1]
            + (__ROR8__(v95, 14) ^ __ROR8__(v95, 18) ^ __ROR8__(v95, 41))
            + ((v87 ^ v82) & v95 ^ v82);
        v100 = v75 + v99;
        v101 = v99 + (__ROR8__(v96, 28) ^ __ROR8__(v96, 34) ^ __ROR8__(v96, 39)) + ((v88 ^ v83) & v96 ^ v88 & v83);
        v245 = vaddq_s64(v98, v10);
        v102 = (int64x2_t)vextq_s8((int8x16_t)v11, (int8x16_t)v12, 8uLL);
        v103 = (int8x16_t)vshrq_n_u64((uint64x2_t)v10, 0x13uLL);
        v104 = vshlq_n_s64(v10, 3uLL);
        v105 = v82
             + v246.i64[0]
             + (__ROR8__(v100, 14) ^ __ROR8__(v100, 18) ^ __ROR8__(v100, 41))
             + ((v95 ^ v87) & v100 ^ v87);
        v106 = (int8x16_t)vshrq_n_u64((uint64x2_t)v102, 1uLL);
        v107 = vshlq_n_s64(v102, 0x38uLL);
        v21 = v83 + v105;
        v17 = v105 + (__ROR8__(v101, 28) ^ __ROR8__(v101, 34) ^ __ROR8__(v101, 39)) + ((v96 ^ v88) & v101 ^ v96 & v88);
        v108 = veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v10, 6uLL), v103), (int8x16_t)v104), (int8x16_t)vshrq_n_u64((uint64x2_t)v103, 0x2AuLL));
        v109 = *v33++;
        v11 = vaddq_s64(vaddq_s64(vaddq_s64(v11, (int64x2_t)vextq_s8((int8x16_t)v7, (int8x16_t)v8, 8uLL)), (int64x2_t)veorq_s8(v108, (int8x16_t)vshlq_n_s64(v104, 0x2AuLL))), (int64x2_t)veorq_s8(veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v102, 7uLL), v106), (int8x16_t)v107), (int8x16_t)vshrq_n_u64((uint64x2_t)v106, 7uLL)), (int8x16_t)vshlq_n_s64(v107, 7uLL)));
        v110 = v87
             + v246.i64[1]
             + (__ROR8__(v21, 14) ^ __ROR8__(v21, 18) ^ __ROR8__(v21, 41))
             + ((v100 ^ v95) & v21 ^ v95);
        v20 = v88 + v110;
        v16 = v110 + (__ROR8__(v17, 28) ^ __ROR8__(v17, 34) ^ __ROR8__(v17, 39)) + ((v101 ^ v96) & v17 ^ v101 & v96);
        v246 = vaddq_s64(v109, v11);
        v111 = (int64x2_t)vextq_s8((int8x16_t)v12, (int8x16_t)v5, 8uLL);
        v112 = (int8x16_t)vshrq_n_u64((uint64x2_t)v11, 0x13uLL);
        v113 = vshlq_n_s64(v11, 3uLL);
        v114 = v95
             + v247.i64[0]
             + (__ROR8__(v20, 14) ^ __ROR8__(v20, 18) ^ __ROR8__(v20, 41))
             + ((v21 ^ v100) & v20 ^ v100);
        v115 = (int8x16_t)vshrq_n_u64((uint64x2_t)v111, 1uLL);
        v116 = vshlq_n_s64(v111, 0x38uLL);
        v19 = v96 + v114;
        v15 = v114 + (__ROR8__(v16, 28) ^ __ROR8__(v16, 34) ^ __ROR8__(v16, 39)) + ((v17 ^ v101) & v16 ^ v17 & v101);
        v117 = veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v11, 6uLL), v112), (int8x16_t)v113), (int8x16_t)vshrq_n_u64((uint64x2_t)v112, 0x2AuLL));
        v118 = *v33;
        i8 = (__int128 *)v33[1].i8;
        v12 = vaddq_s64(vaddq_s64(vaddq_s64(v12, (int64x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v9, 8uLL)), (int64x2_t)veorq_s8(v117, (int8x16_t)vshlq_n_s64(v113, 0x2AuLL))), (int64x2_t)veorq_s8(veorq_s8(veorq_s8(veorq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v111, 7uLL), v115), (int8x16_t)v116), (int8x16_t)vshrq_n_u64((uint64x2_t)v115, 7uLL)), (int8x16_t)vshlq_n_s64(v116, 7uLL)));
        v119 = v100
             + v247.i64[1]
             + (__ROR8__(v19, 14) ^ __ROR8__(v19, 18) ^ __ROR8__(v19, 41))
             + ((v20 ^ v21) & v19 ^ v21);
        v18 = v101 + v119;
        v14 = v119 + (__ROR8__(v15, 28) ^ __ROR8__(v15, 34) ^ __ROR8__(v15, 39)) + ((v16 ^ v17) & v15 ^ v16 & v17);
        v247 = vaddq_s64(v118, v12);
        v120 = __OFSUB__(v22--, 1);
      }
      while (!((v22 < 0) ^ v120 | (v22 == 0)));
      v121 = i8 - 40;
      if (!--a2)
        break;
      v123 = *v3;
      v122 = v3 + 1;
      v124 = v21 + v240.i64[0] + (__ROR8__(v18, 14) ^ __ROR8__(v18, 18) ^ __ROR8__(v18, 41)) + ((v19 ^ v20) & v18 ^ v20);
      v126 = (int64x2_t)*v121;
      v125 = (int64x2_t *)(v121 + 1);
      v127 = v17 + v124;
      v128 = v124 + (__ROR8__(v14, 28) ^ __ROR8__(v14, 34) ^ __ROR8__(v14, 39)) + ((v15 ^ v16) & v14 ^ v15 & v16);
      v5 = (int64x2_t)vrev64q_s8(v123);
      v129 = v20
           + v240.i64[1]
           + (__ROR8__(v127, 14) ^ __ROR8__(v127, 18) ^ __ROR8__(v127, 41))
           + ((v18 ^ v19) & v127 ^ v19);
      v130 = v16 + v129;
      v240 = vaddq_s64(v126, v5);
      v131 = v129 + (__ROR8__(v128, 28) ^ __ROR8__(v128, 34) ^ __ROR8__(v128, 39)) + ((v14 ^ v15) & v128 ^ v14 & v15);
      v132 = *v122++;
      v133 = v19
           + v241.i64[0]
           + (__ROR8__(v130, 14) ^ __ROR8__(v130, 18) ^ __ROR8__(v130, 41))
           + ((v127 ^ v18) & v130 ^ v18);
      v134 = *v125++;
      v135 = v15 + v133;
      v136 = v133 + (__ROR8__(v131, 28) ^ __ROR8__(v131, 34) ^ __ROR8__(v131, 39)) + ((v128 ^ v14) & v131 ^ v128 & v14);
      v6 = (int64x2_t)vrev64q_s8(v132);
      v137 = v18
           + v241.i64[1]
           + (__ROR8__(v135, 14) ^ __ROR8__(v135, 18) ^ __ROR8__(v135, 41))
           + ((v130 ^ v127) & v135 ^ v127);
      v138 = v14 + v137;
      v241 = vaddq_s64(v134, v6);
      v139 = v137
           + (__ROR8__(v136, 28) ^ __ROR8__(v136, 34) ^ __ROR8__(v136, 39))
           + ((v131 ^ v128) & v136 ^ v131 & v128);
      v140 = *v122++;
      v141 = v127
           + v242.i64[0]
           + (__ROR8__(v138, 14) ^ __ROR8__(v138, 18) ^ __ROR8__(v138, 41))
           + ((v135 ^ v130) & v138 ^ v130);
      v142 = *v125++;
      v143 = v128 + v141;
      v144 = v141
           + (__ROR8__(v139, 28) ^ __ROR8__(v139, 34) ^ __ROR8__(v139, 39))
           + ((v136 ^ v131) & v139 ^ v136 & v131);
      v7 = (int64x2_t)vrev64q_s8(v140);
      v145 = v130
           + v242.i64[1]
           + (__ROR8__(v143, 14) ^ __ROR8__(v143, 18) ^ __ROR8__(v143, 41))
           + ((v138 ^ v135) & v143 ^ v135);
      v146 = v131 + v145;
      v242 = vaddq_s64(v142, v7);
      v147 = v145
           + (__ROR8__(v144, 28) ^ __ROR8__(v144, 34) ^ __ROR8__(v144, 39))
           + ((v139 ^ v136) & v144 ^ v139 & v136);
      v148 = *v122++;
      v149 = v135
           + v243.i64[0]
           + (__ROR8__(v146, 14) ^ __ROR8__(v146, 18) ^ __ROR8__(v146, 41))
           + ((v143 ^ v138) & v146 ^ v138);
      v150 = *v125++;
      v151 = v136 + v149;
      v152 = v149
           + (__ROR8__(v147, 28) ^ __ROR8__(v147, 34) ^ __ROR8__(v147, 39))
           + ((v144 ^ v139) & v147 ^ v144 & v139);
      v8 = (int64x2_t)vrev64q_s8(v148);
      v153 = v138
           + v243.i64[1]
           + (__ROR8__(v151, 14) ^ __ROR8__(v151, 18) ^ __ROR8__(v151, 41))
           + ((v146 ^ v143) & v151 ^ v143);
      v154 = v139 + v153;
      v243 = vaddq_s64(v150, v8);
      v155 = v153
           + (__ROR8__(v152, 28) ^ __ROR8__(v152, 34) ^ __ROR8__(v152, 39))
           + ((v147 ^ v144) & v152 ^ v147 & v144);
      v156 = *v122++;
      v157 = v143
           + v244.i64[0]
           + (__ROR8__(v154, 14) ^ __ROR8__(v154, 18) ^ __ROR8__(v154, 41))
           + ((v151 ^ v146) & v154 ^ v146);
      v158 = *v125++;
      v159 = v144 + v157;
      v160 = v157
           + (__ROR8__(v155, 28) ^ __ROR8__(v155, 34) ^ __ROR8__(v155, 39))
           + ((v152 ^ v147) & v155 ^ v152 & v147);
      v9 = (int64x2_t)vrev64q_s8(v156);
      v161 = v146
           + v244.i64[1]
           + (__ROR8__(v159, 14) ^ __ROR8__(v159, 18) ^ __ROR8__(v159, 41))
           + ((v154 ^ v151) & v159 ^ v151);
      v162 = v147 + v161;
      v244 = vaddq_s64(v158, v9);
      v163 = v161
           + (__ROR8__(v160, 28) ^ __ROR8__(v160, 34) ^ __ROR8__(v160, 39))
           + ((v155 ^ v152) & v160 ^ v155 & v152);
      v164 = *v122++;
      v165 = v151
           + v245.i64[0]
           + (__ROR8__(v162, 14) ^ __ROR8__(v162, 18) ^ __ROR8__(v162, 41))
           + ((v159 ^ v154) & v162 ^ v154);
      v166 = *v125++;
      v167 = v152 + v165;
      v168 = v165
           + (__ROR8__(v163, 28) ^ __ROR8__(v163, 34) ^ __ROR8__(v163, 39))
           + ((v160 ^ v155) & v163 ^ v160 & v155);
      v10 = (int64x2_t)vrev64q_s8(v164);
      v169 = v154
           + v245.i64[1]
           + (__ROR8__(v167, 14) ^ __ROR8__(v167, 18) ^ __ROR8__(v167, 41))
           + ((v162 ^ v159) & v167 ^ v159);
      v170 = v155 + v169;
      v245 = vaddq_s64(v166, v10);
      v171 = v169
           + (__ROR8__(v168, 28) ^ __ROR8__(v168, 34) ^ __ROR8__(v168, 39))
           + ((v163 ^ v160) & v168 ^ v163 & v160);
      v172 = *v122++;
      v173 = v159
           + v246.i64[0]
           + (__ROR8__(v170, 14) ^ __ROR8__(v170, 18) ^ __ROR8__(v170, 41))
           + ((v167 ^ v162) & v170 ^ v162);
      v174 = *v125++;
      v175 = v160 + v173;
      v176 = v173
           + (__ROR8__(v171, 28) ^ __ROR8__(v171, 34) ^ __ROR8__(v171, 39))
           + ((v168 ^ v163) & v171 ^ v168 & v163);
      v11 = (int64x2_t)vrev64q_s8(v172);
      v177 = v162
           + v246.i64[1]
           + (__ROR8__(v175, 14) ^ __ROR8__(v175, 18) ^ __ROR8__(v175, 41))
           + ((v170 ^ v167) & v175 ^ v167);
      v178 = v163 + v177;
      v246 = vaddq_s64(v174, v11);
      v179 = v177
           + (__ROR8__(v176, 28) ^ __ROR8__(v176, 34) ^ __ROR8__(v176, 39))
           + ((v171 ^ v168) & v176 ^ v171 & v168);
      v180 = *v122;
      v3 = v122 + 1;
      v181 = v167
           + v247.i64[0]
           + (__ROR8__(v178, 14) ^ __ROR8__(v178, 18) ^ __ROR8__(v178, 41))
           + ((v175 ^ v170) & v178 ^ v170);
      v182 = *v125;
      i8 = (__int128 *)v125[1].i8;
      v183 = v168 + v181;
      v184 = v181
           + (__ROR8__(v179, 28) ^ __ROR8__(v179, 34) ^ __ROR8__(v179, 39))
           + ((v176 ^ v171) & v179 ^ v176 & v171);
      v12 = (int64x2_t)vrev64q_s8(v180);
      v185 = v170
           + v247.i64[1]
           + (__ROR8__(v183, 14) ^ __ROR8__(v183, 18) ^ __ROR8__(v183, 41))
           + ((v178 ^ v175) & v183 ^ v175);
      v247 = vaddq_s64(v182, v12);
      v186 = result[1] + v184;
      *result += v185
               + (__ROR8__(v184, 28) ^ __ROR8__(v184, 34) ^ __ROR8__(v184, 39))
               + ((v179 ^ v176) & v184 ^ v179 & v176);
      result[1] = v186;
      v187 = result[3] + v176;
      result[2] += v179;
      result[3] = v187;
      v188 = result[5] + v183;
      result[4] += v171 + v185;
      result[5] = v188;
      v189 = result[7] + v175;
      result[6] += v178;
      result[7] = v189;
    }
    v190 = v21 + v240.i64[0] + (__ROR8__(v18, 14) ^ __ROR8__(v18, 18) ^ __ROR8__(v18, 41)) + ((v19 ^ v20) & v18 ^ v20);
    v191 = v17 + v190;
    v192 = v190 + (__ROR8__(v14, 28) ^ __ROR8__(v14, 34) ^ __ROR8__(v14, 39)) + ((v15 ^ v16) & v14 ^ v15 & v16);
    v193 = v20
         + v240.i64[1]
         + (__ROR8__(v191, 14) ^ __ROR8__(v191, 18) ^ __ROR8__(v191, 41))
         + ((v18 ^ v19) & v191 ^ v19);
    v194 = v16 + v193;
    v195 = v193 + (__ROR8__(v192, 28) ^ __ROR8__(v192, 34) ^ __ROR8__(v192, 39)) + ((v14 ^ v15) & v192 ^ v14 & v15);
    v196 = v19
         + v241.i64[0]
         + (__ROR8__(v194, 14) ^ __ROR8__(v194, 18) ^ __ROR8__(v194, 41))
         + ((v191 ^ v18) & v194 ^ v18);
    v197 = v15 + v196;
    v198 = v196 + (__ROR8__(v195, 28) ^ __ROR8__(v195, 34) ^ __ROR8__(v195, 39)) + ((v192 ^ v14) & v195 ^ v192 & v14);
    v199 = v18
         + v241.i64[1]
         + (__ROR8__(v197, 14) ^ __ROR8__(v197, 18) ^ __ROR8__(v197, 41))
         + ((v194 ^ v191) & v197 ^ v191);
    v200 = v14 + v199;
    v201 = v199 + (__ROR8__(v198, 28) ^ __ROR8__(v198, 34) ^ __ROR8__(v198, 39)) + ((v195 ^ v192) & v198 ^ v195 & v192);
    v202 = v191
         + v242.i64[0]
         + (__ROR8__(v200, 14) ^ __ROR8__(v200, 18) ^ __ROR8__(v200, 41))
         + ((v197 ^ v194) & v200 ^ v194);
    v203 = v192 + v202;
    v204 = v202 + (__ROR8__(v201, 28) ^ __ROR8__(v201, 34) ^ __ROR8__(v201, 39)) + ((v198 ^ v195) & v201 ^ v198 & v195);
    v205 = v194
         + v242.i64[1]
         + (__ROR8__(v203, 14) ^ __ROR8__(v203, 18) ^ __ROR8__(v203, 41))
         + ((v200 ^ v197) & v203 ^ v197);
    v206 = v195 + v205;
    v207 = v205 + (__ROR8__(v204, 28) ^ __ROR8__(v204, 34) ^ __ROR8__(v204, 39)) + ((v201 ^ v198) & v204 ^ v201 & v198);
    v208 = v197
         + v243.i64[0]
         + (__ROR8__(v206, 14) ^ __ROR8__(v206, 18) ^ __ROR8__(v206, 41))
         + ((v203 ^ v200) & v206 ^ v200);
    v209 = v198 + v208;
    v210 = v208 + (__ROR8__(v207, 28) ^ __ROR8__(v207, 34) ^ __ROR8__(v207, 39)) + ((v204 ^ v201) & v207 ^ v204 & v201);
    v211 = v200
         + v243.i64[1]
         + (__ROR8__(v209, 14) ^ __ROR8__(v209, 18) ^ __ROR8__(v209, 41))
         + ((v206 ^ v203) & v209 ^ v203);
    v212 = v201 + v211;
    v213 = v211 + (__ROR8__(v210, 28) ^ __ROR8__(v210, 34) ^ __ROR8__(v210, 39)) + ((v207 ^ v204) & v210 ^ v207 & v204);
    v214 = v203
         + v244.i64[0]
         + (__ROR8__(v212, 14) ^ __ROR8__(v212, 18) ^ __ROR8__(v212, 41))
         + ((v209 ^ v206) & v212 ^ v206);
    v215 = v204 + v214;
    v216 = v214 + (__ROR8__(v213, 28) ^ __ROR8__(v213, 34) ^ __ROR8__(v213, 39)) + ((v210 ^ v207) & v213 ^ v210 & v207);
    v217 = v206
         + v244.i64[1]
         + (__ROR8__(v215, 14) ^ __ROR8__(v215, 18) ^ __ROR8__(v215, 41))
         + ((v212 ^ v209) & v215 ^ v209);
    v218 = v207 + v217;
    v219 = v217 + (__ROR8__(v216, 28) ^ __ROR8__(v216, 34) ^ __ROR8__(v216, 39)) + ((v213 ^ v210) & v216 ^ v213 & v210);
    v220 = v209
         + v245.i64[0]
         + (__ROR8__(v218, 14) ^ __ROR8__(v218, 18) ^ __ROR8__(v218, 41))
         + ((v215 ^ v212) & v218 ^ v212);
    v221 = v210 + v220;
    v222 = v220 + (__ROR8__(v219, 28) ^ __ROR8__(v219, 34) ^ __ROR8__(v219, 39)) + ((v216 ^ v213) & v219 ^ v216 & v213);
    v223 = v212
         + v245.i64[1]
         + (__ROR8__(v221, 14) ^ __ROR8__(v221, 18) ^ __ROR8__(v221, 41))
         + ((v218 ^ v215) & v221 ^ v215);
    v224 = v213 + v223;
    v225 = v223 + (__ROR8__(v222, 28) ^ __ROR8__(v222, 34) ^ __ROR8__(v222, 39)) + ((v219 ^ v216) & v222 ^ v219 & v216);
    v226 = v215
         + v246.i64[0]
         + (__ROR8__(v224, 14) ^ __ROR8__(v224, 18) ^ __ROR8__(v224, 41))
         + ((v221 ^ v218) & v224 ^ v218);
    v227 = v216 + v226;
    v228 = v226 + (__ROR8__(v225, 28) ^ __ROR8__(v225, 34) ^ __ROR8__(v225, 39)) + ((v222 ^ v219) & v225 ^ v222 & v219);
    v229 = v218
         + v246.i64[1]
         + (__ROR8__(v227, 14) ^ __ROR8__(v227, 18) ^ __ROR8__(v227, 41))
         + ((v224 ^ v221) & v227 ^ v221);
    v230 = v219 + v229;
    v231 = v229 + (__ROR8__(v228, 28) ^ __ROR8__(v228, 34) ^ __ROR8__(v228, 39)) + ((v225 ^ v222) & v228 ^ v225 & v222);
    v232 = v221
         + v247.i64[0]
         + (__ROR8__(v230, 14) ^ __ROR8__(v230, 18) ^ __ROR8__(v230, 41))
         + ((v227 ^ v224) & v230 ^ v224);
    v233 = v222 + v232;
    v234 = v232 + (__ROR8__(v231, 28) ^ __ROR8__(v231, 34) ^ __ROR8__(v231, 39)) + ((v228 ^ v225) & v231 ^ v228 & v225);
    v235 = v224
         + v247.i64[1]
         + (__ROR8__(v233, 14) ^ __ROR8__(v233, 18) ^ __ROR8__(v233, 41))
         + ((v230 ^ v227) & v233 ^ v227);
    v236 = result[1] + v234;
    *result += v235
             + (__ROR8__(v234, 28) ^ __ROR8__(v234, 34) ^ __ROR8__(v234, 39))
             + ((v231 ^ v228) & v234 ^ v231 & v228);
    result[1] = v236;
    v237 = result[3] + v228;
    result[2] += v231;
    result[3] = v237;
    v238 = result[5] + v233;
    result[4] += v225 + v235;
    result[5] = v238;
    v239 = result[7] + v227;
    result[6] += v230;
    result[7] = v239;
  }
  return result;
}

uint64_t cced25519_sign_with_rng(uint64_t a1, void (**a2)(_QWORD, uint64_t, int8x16_t *), char *a3, size_t a4, char *a5, uint64_t a6, char *a7)
{
  char v14;
  uint64_t pub_with_rng;
  _QWORD *v20;
  NSObject *v24;
  uint64_t v25;
  char v27;
  __int128 v28;
  __int128 v29;
  char v30[32];
  uint64_t v31;

  v14 = 0;
  v31 = *MEMORY[0x1E0C874D8];
  v27 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v14 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v14 = 1;
    }
  }
  v27 = v14;
  pub_with_rng = ((uint64_t (*)(_QWORD, uint64_t, char *))*a2)(a2, 32, v30);
  if ((_DWORD)pub_with_rng)
    goto LABEL_21;
  v28 = 0u;
  v29 = 0u;
  v20 = ccsha512_di();
  pub_with_rng = cced25519_make_pub_with_rng(v20, a2, (uint64_t)&v28, a7);
  if ((_DWORD)pub_with_rng)
    goto LABEL_21;
  if (*(_QWORD *)a6 == (_QWORD)v28
    && *(_QWORD *)(a6 + 8) == *((_QWORD *)&v28 + 1)
    && *(_QWORD *)(a6 + 16) == (_QWORD)v29
    && *(_QWORD *)(a6 + 24) == *((_QWORD *)&v29 + 1))
  {
    pub_with_rng = cced25519_sign_internal(a1, a2, a3, a4, a5, (char *)a6, a7, v30);
LABEL_21:
    v25 = pub_with_rng;
    goto LABEL_22;
  }
  v24 = cc_log_default();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
    cced25519_sign_with_rng_cold_1(v24);
  cc_clear(0x40uLL, a3);
  v25 = 4294967289;
LABEL_22:
  cc_disable_dit(&v27);
  return v25;
}

uint64_t cced25519_sign_internal(uint64_t a1, void (**a2)(_QWORD, uint64_t, int8x16_t *), char *a3, size_t a4, char *a5, char *a6, char *a7, char *a8)
{
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  char *v23;
  _OWORD v24[10];
  unsigned __int16 v25[32];
  int8x16_t __src[4];
  unsigned __int16 __s[15];
  char v28;
  char v29[32];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C874D8];
  if (*(_QWORD *)a1 != 64 || *(_QWORD *)(a1 + 16) != 128)
    return 4294967289;
  v23 = a6;
  memset(v24, 0, sizeof(v24));
  v14 = ccdigest(a1, 0x20uLL, a7, (uint64_t)__s);
  LOBYTE(__s[0]) &= 0xF8u;
  v28 = v28 & 0x3F | 0x40;
  MEMORY[0x1E0C86820](v14, v15, v16, v17);
  v19 = (uint64_t *)((char *)&v22 - v18);
  ccdigest_init(a1, (uint64_t *)((char *)&v22 - v18));
  if (a8)
  {
    memset(__src, 0, sizeof(__src));
    ccdigest_update(a1, v19, 0x20uLL, a8);
    ccdigest_update(a1, v19, 0x40uLL, __src[0].i8);
    ccdigest_update(a1, v19, 0x20uLL, v29);
    if (*(_DWORD *)((char *)v19 + *(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) + 8))
      return 0xFFFFFFFFLL;
  }
  else
  {
    ccdigest_update(a1, v19, 0x20uLL, v29);
  }
  ccdigest_update(a1, v19, a4, a5);
  (*(void (**)(uint64_t, _QWORD *, int8x16_t *))(a1 + 56))(a1, v19, __src);
  cc_clear(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) + 12, v19);
  sc_reduce((unsigned __int16 *)__src);
  v20 = ge_scalarmult_base_masked((uint64_t)v24, __src, a2);
  if (!(_DWORD)v20)
  {
    ge_p3_tobytes((uint64_t)a3, (int *)v24);
    ccdigest_init(a1, v19);
    ccdigest_update(a1, v19, 0x20uLL, a3);
    ccdigest_update(a1, v19, 0x20uLL, v23);
    ccdigest_update(a1, v19, a4, a5);
    (*(void (**)(uint64_t, _QWORD *, unsigned __int16 *))(a1 + 56))(a1, v19, v25);
    cc_clear(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) + 12, v19);
    sc_reduce(v25);
    sc_muladd(a3 + 32, v25, __s, (unsigned __int16 *)__src);
  }
  cc_clear(0x40uLL, __s);
  return v20;
}

uint64_t cced25519_sign(uint64_t a1, char *a2, size_t a3, char *a4, uint64_t a5, char *a6)
{
  char v12;
  uint64_t *v18;
  uint64_t v19;
  char v21;

  v12 = 0;
  v21 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v12 = 1;
    }
  }
  v21 = v12;
  v18 = ccrng(0);
  if (v18)
    v19 = cced25519_sign_with_rng(a1, (void (**)(_QWORD, uint64_t, int8x16_t *))v18, a2, a3, a4, a5, a6);
  else
    v19 = 0xFFFFFFFFLL;
  cc_disable_dit(&v21);
  return v19;
}

uint64_t ccpad_cts2_decrypt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v12;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  char *v24;
  char *v25;
  char v26;
  char v27;
  char v28;
  char v30;
  _BYTE v31[16];
  _BYTE v32[16];
  _BYTE v33[16];
  uint64_t v34;

  v12 = 0;
  v34 = *MEMORY[0x1E0C874D8];
  v30 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v12 = 1;
    }
  }
  v30 = v12;
  v18 = *(_QWORD *)(a1 + 8);
  v19 = (a4 - 1) / v18;
  if (v19 >= 2)
  {
    v21 = (v19 - 1) * v18;
    (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a2, a3);
    v20 = a4 - v21;
    a5 += v21;
    a6 += v21;
  }
  else
  {
    v20 = a4;
  }
  if (2 * v18 == v20)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 24))(a2, a3, 2, a5, a6);
  }
  else
  {
    v22 = v20 - v18;
    __memcpy_chk();
    __memcpy_chk();
    ecb_from_cbc(a1, a2, (uint64_t)v31, (uint64_t)v33);
    if (v20 - v18 < v18)
      memcpy(&v32[v22], &v33[v22], 2 * v18 - v20);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t))(a1 + 24))(a2, a3, 1, v32, a6);
    if (v20 != v18)
    {
      v23 = (_BYTE *)(a6 + v18);
      v24 = v33;
      v25 = v32;
      do
      {
        v27 = *v25++;
        v26 = v27;
        v28 = *v24++;
        *v23++ = v28 ^ v26;
        --v22;
      }
      while (v22);
    }
  }
  cc_disable_dit(&v30);
  return a4;
}

uint64_t ecb_from_cbc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  rsize_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C874D8];
  v8 = *(_QWORD *)(a1 + 8);
  v9 = MEMORY[0x1E0C86820](a1, a2, a3, a4);
  v11 = (char *)v13 - v10;
  cccbc_set_iv(v9, (char *)v13 - v10, 0);
  cccbc_update(a1, a2, (uint64_t)v11, 1, a3, a4);
  return cc_clear(v8, v11);
}

uint64_t ccrsa_verify_pkcs1v15_internal(unint64_t *a1, uint64_t a2, unint64_t a3, char *a4, unint64_t a5, unsigned __int8 *a6, int a7, unsigned __int8 *a8)
{
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v24[4];
  void (*v25)(uint64_t);

  v14 = *a1;
  v15 = sizeof_struct_ccrns_mul_modulus();
  v16 = sizeof_struct_ccpolyzp_po2cyc();
  v24[0] = cc_malloc_clear(8 * ((v15 + v16 - 1) / v16 + 13 * v14) + 8);
  v17 = *a1;
  v18 = sizeof_struct_ccrns_mul_modulus();
  v19 = sizeof_struct_ccpolyzp_po2cyc();
  v24[1] = (v18 + v19 - 1) / v19 + 13 * v17 + 1;
  v24[2] = 0;
  v24[3] = cc_ws_alloc;
  v25 = cc_ws_free;
  if (!v24[0])
    return 4294967283;
  v20 = ccrsa_verify_pkcs1v15_internal_ws((uint64_t)v24, a1, a2, a3, a4, a5, a6, a7, a8);
  v25((uint64_t)v24);
  return v20;
}

uint64_t ccapsic_client_check_intersect_response(uint64_t **a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  char v9;
  uint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t scalar_fips_retry;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v30;
  _QWORD *v31;
  char v33;

  v9 = 0;
  v33 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v9 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v9 = 1;
    }
  }
  v33 = v9;
  v15 = *a1;
  if ((uint64_t *)*a6 != *a1 || (uint64_t *)*a2 != v15 || (uint64_t *)*a3 != v15)
    goto LABEL_22;
  v16 = (unint64_t *)(a1 + 24);
  v17 = *v15;
  v18 = a1[1];
  scalar_fips_retry = ccec_generate_scalar_fips_retry(v15, (uint64_t (**)(_QWORD, unint64_t, void *))v18, a1 + 24);
  if ((_DWORD)scalar_fips_retry)
    goto LABEL_21;
  v30 = &v16[v17];
  scalar_fips_retry = ccec_generate_scalar_fips_retry(v15, (uint64_t (**)(_QWORD, unint64_t, void *))v18, v30);
  if ((_DWORD)scalar_fips_retry)
    goto LABEL_21;
  scalar_fips_retry = cch2c((uint64_t)a1[2], (uint64_t)a1[3]);
  if ((_DWORD)scalar_fips_retry)
    goto LABEL_21;
  v31 = a2;
  v20 = 3 * v17;
  v21 = *a1;
  v22 = **a1;
  v23 = (uint64_t)(a6 + 2);
  if (!ccn_cmp(3 * v17, &v16[9 * v22 + 2 * v22], a6 + 2)
    || (v24 = (char *)(v31 + 2), !ccn_cmp(3 * v17, (unint64_t *)&v21[2 * v22 + 4 + v22], v31 + 2)))
  {
LABEL_22:
    v28 = 4294967289;
    goto LABEL_20;
  }
  v25 = (char *)(a3 + 2);
  scalar_fips_retry = ccec_projectify(v15, (uint64_t)(a3 + 2), (uint64_t)v24, (uint64_t)v18);
  if ((_DWORD)scalar_fips_retry
    || (v26 = (char *)&v16[2 * v17],
        v27 = (uint64_t)&v26[48 * v17],
        scalar_fips_retry = ccec_projectify(v15, v27, v23, (uint64_t)v18),
        (_DWORD)scalar_fips_retry)
    || (scalar_fips_retry = ccec_twin_mult(v15, v24, v16, (uint64_t)v25, v30, v26), (_DWORD)scalar_fips_retry)
    || (scalar_fips_retry = ccec_twin_mult(v15, v25, v16, v27, v30, &v26[8 * v20]), (_DWORD)scalar_fips_retry)
    || (scalar_fips_retry = ccec_affinify(v15, (uint64_t)v25, (uint64_t)v25), (_DWORD)scalar_fips_retry))
  {
LABEL_21:
    v28 = scalar_fips_retry;
    goto LABEL_20;
  }
  v28 = ccec_affinify(v15, (uint64_t)v24, (uint64_t)v24);
  if (!(_DWORD)v28)
  {
    ccn_seti(*v15, &v25[16 * *(_QWORD *)*a3], 1);
    ccn_seti(*v15, &v24[16 * *(_QWORD *)*v31], 1);
  }
LABEL_20:
  cc_disable_dit(&v33);
  return v28;
}

void *ccdh_gp_apple768()
{
  return &_ccdh_gp_apple768;
}

_DWORD **cche_mul_poly_sk(_DWORD **result, unsigned int **a2, _DWORD **a3)
{
  unsigned int *v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int **v8;
  _QWORD *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;

  v3 = *a2;
  v4 = (*a2)[1];
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = *v3;
    v8 = a2 + 1;
    do
    {
      v9 = v3;
      if (v4 - 1 > v6)
      {
        v10 = v4 - 1;
        v9 = v3;
        do
        {
          v9 = (_QWORD *)v9[14];
          --v10;
        }
        while (v10 > v6);
      }
      if ((_DWORD)v7)
      {
        v11 = **a3 * v6;
        v12 = **result * v6;
        v13 = v7;
        v14 = v5;
        do
        {
          v15 = (unint64_t)v8[v14];
          v16 = (unint64_t)a3[v11 + 1];
          v17 = (v16 * (unsigned __int128)v15) >> 64;
          v18 = v16 * v15;
          v19 = v9[4];
          v20 = ((unint64_t)v18 * (unsigned __int128)v19) >> 64;
          v21 = (v17 * (unsigned __int128)v19) >> 64;
          v22 = v17 * v19;
          v23 = __CFADD__(v20, v22);
          v24 = v20 + v22;
          v25 = v23;
          v26 = v25
              + __CFADD__(v18 * v9[5], v24)
              + v21
              + v9[5] * v17
              + (((unint64_t)v18 * (unsigned __int128)(unint64_t)v9[5]) >> 64);
          v27 = v9[2];
          v28 = (_DWORD *)(v18 - v26 * v27);
          if ((uint64_t)v28 - v27 >= 0)
            v28 = (_DWORD *)((char *)v28 - v27);
          result[v12 + 1] = v28;
          ++v11;
          ++v14;
          ++v12;
          --v13;
        }
        while (v13);
      }
      ++v6;
      v5 += v7;
    }
    while (v6 != v4);
  }
  return result;
}

uint64_t cced25519_to_ed25519_point_ws(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  cczp_n(a2);
  v4 = *(_QWORD *)(a1 + 16);
  cczp_mul_ws(a1, a2);
  cczp_mul_ws(a1, a2);
  cczp_mul_ws(a1, a2);
  result = cczp_sqr_ws(a1, a2);
  *(_QWORD *)(a1 + 16) = v4;
  return result;
}

void *cced25519_from_ed25519_point_ws(uint64_t a1, _QWORD *a2, char *a3, char *a4)
{
  uint64_t v7;

  v7 = cczp_n((uint64_t)a2);
  ccn_set(v7, a3, a4);
  ccn_set(v7, &a3[8 * *a2], &a4[8 * v7]);
  return ccn_set(v7, &a3[16 * *a2], &a4[24 * v7]);
}

uint64_t cced25519_hash_to_scalar_ws(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, size_t a5, char *a6, size_t a7, char *a8, size_t a9, char *a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  _BYTE __s[64];
  uint64_t v37;

  v31 = a8;
  v35 = a4;
  v37 = *MEMORY[0x1E0C874D8];
  v32 = *a2;
  v16 = cczp_n((uint64_t)a2);
  v34 = *(_QWORD *)(a1 + 16);
  v17 = 2 * v16;
  v30 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v16);
  v33 = &v29;
  MEMORY[0x1E0C86820](v30, v18, v19, v20);
  v22 = (uint64_t *)((char *)&v29 - v21);
  ccdigest_init(a3, (uint64_t *)((char *)&v29 - v21));
  ccdigest_update(a3, v22, a5, a6);
  ccdigest_update(a3, v22, a7, v31);
  ccdigest_update(a3, v22, a9, a10);
  (*(void (**)(uint64_t, _QWORD *, _BYTE *))(a3 + 56))(a3, v22, __s);
  cc_clear(*(_QWORD *)(a3 + 8) + *(_QWORD *)(a3 + 16) + 12, v22);
  v23 = (char *)v30;
  if (v17)
  {
    v24 = (uint64_t *)__s;
    v25 = (_QWORD *)v30;
    v26 = v17;
    do
    {
      v27 = *v24++;
      *v25++ = v27;
      --v26;
    }
    while (v26);
  }
  cczp_modn_ws(a1, &a2[5 * v32 + 4], v35, v17, v23);
  result = cc_clear(0x40uLL, __s);
  *(_QWORD *)(a1 + 16) = v34;
  return result;
}

uint64_t ccss_shamir_generate_share_poly_ws(uint64_t a1, uint64_t *a2, uint64_t (**a3)(_QWORD, unint64_t, uint64_t), unint64_t a4, unsigned __int8 *a5, int a6)
{
  uint64_t result;

  if (!ccss_shamir_secret_one_byte_smaller_than_prime(*a2, a4) && !a6)
    return 4294967176;
  result = ccss_shamir_generate_random_poly_ws(a1, (uint64_t)a2, a3);
  if (!(_DWORD)result)
    return ccss_encode_string_into_value_smaller_than_prime(*a2, a2 + 2, a4, a5);
  return result;
}

uint64_t ccrng_zero_generate(int a1, size_t a2, void *a3)
{
  bzero(a3, a2);
  return 0;
}

unint64_t ccec_diversify_min_entropy_len(_QWORD *a1)
{
  char v1;
  unint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = ccec_scalar_fips_extrabits_min_entropy_len(a1);
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccec_diversify_pub(uint64_t *a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4, uint64_t (**a5)(_QWORD, uint64_t, uint64_t *), uint64_t **a6, uint64_t **a7)
{
  char v14;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t scalar_fips_extrabits_ws;
  uint64_t v31;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t (*v35)(_QWORD *, uint64_t);
  void (*v36)(uint64_t);
  char v37;

  v14 = 0;
  v37 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v14 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v14 = 1;
    }
  }
  v37 = v14;
  v20 = *a1;
  v21 = 26 * *a1;
  v22 = sizeof_struct_ccpolyzp_po2cyc();
  v23 = (v22 + 127) / v22 + 4 * v20 + 3;
  if (v21 > v23)
    v23 = v21;
  v24 = cc_malloc_clear(8 * (v23 + v20));
  v33[0] = v24;
  v25 = *a1;
  v26 = 26 * *a1;
  v27 = sizeof_struct_ccpolyzp_po2cyc();
  v28 = (v27 + 127) / v27 + 4 * v25 + 3;
  if (v26 > v28)
    v28 = v26;
  v33[1] = v28 + v25;
  v34 = 0;
  v35 = cc_ws_alloc;
  v36 = cc_ws_free;
  if (v24)
  {
    v29 = (char *)cc_ws_alloc(v33, v25);
    scalar_fips_extrabits_ws = ccec_generate_scalar_fips_extrabits_ws((uint64_t)v33, a1, a3, a4, v29);
    if (!(_DWORD)scalar_fips_extrabits_ws)
    {
      scalar_fips_extrabits_ws = ccec_make_pub_from_priv_ws((uint64_t)v33, a1, a5, (unint64_t *)v29, 0, a6);
      if (!(_DWORD)scalar_fips_extrabits_ws)
        scalar_fips_extrabits_ws = ccec_make_pub_from_priv_ws((uint64_t)v33, a1, a5, (unint64_t *)v29, (unint64_t *)(a2 + 16), a7);
    }
    v31 = scalar_fips_extrabits_ws;
    v34 = 0;
    v36((uint64_t)v33);
  }
  else
  {
    v31 = 4294967283;
  }
  cc_disable_dit(&v37);
  return v31;
}

_BYTE *ccvrf_factory_irtfdraft03(uint64_t a1, _QWORD *a2)
{
  char v4;
  char v11;

  v4 = 0;
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v11 = v4;
  if (*a2 == *(_QWORD *)ccsha512_di())
  {
    *(_OWORD *)(a1 + 32) = xmmword_1EA953288;
    *(_OWORD *)(a1 + 48) = unk_1EA953298;
    *(_OWORD *)(a1 + 64) = xmmword_1EA9532A8;
    *(_QWORD *)(a1 + 80) = ccvrf_irtf_ed25519_proof_to_hash;
    *(_OWORD *)a1 = _vrf_irtf_ed25519_draft03;
    *(_OWORD *)(a1 + 16) = unk_1EA953278;
    *(_QWORD *)(a1 + 40) = a2;
  }
  return cc_disable_dit(&v11);
}

_BYTE *ccvrf_factory_irtfdraft03_default(uint64_t a1)
{
  char v2;
  _QWORD *v8;
  char v10;

  v2 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v10 = v2;
  v8 = ccsha512_di();
  ccvrf_factory_irtfdraft03(a1, v8);
  return cc_disable_dit(&v10);
}

uint64_t ccvrf_sizeof_proof(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t ccvrf_sizeof_hash(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t ccvrf_sizeof_public_key(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t ccvrf_sizeof_secret_key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t ccec_der_export_diversified_pub_size(uint64_t *a1, uint64_t *a2, char a3)
{
  char v4;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v4 = 0;
  v18 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v18 = v4;
  v10 = *a2;
  if ((a3 & 4) != 0)
  {
    v14 = cczp_bitlen(v10);
    v12 = ccder_sizeof_raw_octet_string((unint64_t)(v14 + 7) >> 3);
    v13 = (unint64_t)(cczp_bitlen(*a1) + 7) >> 3;
  }
  else
  {
    v11 = cczp_bitlen(v10);
    v12 = ccder_sizeof_raw_octet_string(((unint64_t)(v11 + 7) >> 2) | 1);
    v13 = ((unint64_t)(cczp_bitlen(*a1) + 7) >> 2) | 1;
  }
  v15 = ccder_sizeof_raw_octet_string(v13);
  v16 = ccder_sizeof(0x2000000000000010, v15 + v12);
  cc_disable_dit(&v18);
  return v16;
}

uint64_t ccec_der_export_diversified_pub(uint64_t a1, uint64_t *a2, char a3, uint64_t a4, uint64_t a5)
{
  char v10;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t (*v31)(_QWORD *, uint64_t);
  void (*v32)(uint64_t);
  char v33;

  v10 = 0;
  v33 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v33 = v10;
  v16 = (_QWORD *)*a2;
  v29[0] = cc_malloc_clear((32 * *(_QWORD *)*a2) | 0x10);
  v29[1] = (4 * *v16) | 2;
  v30 = 0;
  v31 = cc_ws_alloc;
  v32 = cc_ws_free;
  if (v29[0])
  {
    v17 = *(_QWORD *)*a2;
    v18 = cczp_bitlen(*a2);
    v19 = cczp_bitlen(*a2);
    v20 = (2 * v17) | 1;
    v21 = (char *)cc_ws_alloc(v29, v20);
    v22 = (char *)v31(v29, v20);
    if ((a3 & 4) != 0)
    {
      if (!ccec_compact_export_pub(v21, (uint64_t)a2) && !ccec_compact_export_pub(v22, a1))
      {
        v23 = (unint64_t)(v18 + 7) >> 3;
        goto LABEL_14;
      }
    }
    else if (!ccec_export_pub((uint64_t)a2, v21) && !ccec_export_pub(a1, v22))
    {
      v23 = ((unint64_t)(v19 + 7) >> 2) | 1;
LABEL_14:
      v25 = a5 + a4;
      v26 = ccder_encode_raw_octet_string(v23, (uint64_t)v21, a5, v25);
      v27 = ccder_encode_raw_octet_string(v23, (uint64_t)v22, a5, v26);
      v24 = ccder_encode_constructed_tl(0x2000000000000010uLL, v25, a5, v27);
      v30 = 0;
LABEL_15:
      v32((uint64_t)v29);
      goto LABEL_16;
    }
    v24 = 0;
    goto LABEL_15;
  }
  v24 = 0;
LABEL_16:
  cc_disable_dit(&v33);
  return v24;
}

uint64_t ccec_get_fullkey_components(unint64_t **a1, uint64_t *a2, uint64_t a3, unint64_t *a4, uint64_t a5, unint64_t *a6, uint64_t a7, unint64_t *a8)
{
  char v11;
  unint64_t v17;
  unint64_t **v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  char v24;

  v11 = 0;
  v24 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v11 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v11 = 1;
    }
  }
  v24 = v11;
  v17 = **a1;
  if (ccec_get_pubkey_components((uint64_t)a1, a2, a3, a4, a5, a6)
    || (v20 = *a1, v18 = a1 + 2,
                   v19 = v20,
                   v21 = ccn_write_uint_size(v17, (unint64_t *)&v18[3 * *v20]),
                   v21 > *a8))
  {
    v22 = 0xFFFFFFFFLL;
  }
  else
  {
    *a8 = v21;
    ccn_write_uint(v17, (unint64_t *)&v18[3 * *v19], v21, a7);
    v22 = 0;
  }
  cc_disable_dit(&v24);
  return v22;
}

_BYTE *ccmode_factory_cbc_encrypt(_QWORD *a1, _QWORD *a2)
{
  char v2;
  uint64_t v8;
  char v10;

  v2 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v10 = v2;
  v8 = a2[1];
  *a1 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  a1[1] = v8;
  a1[2] = ccmode_cbc_init;
  a1[3] = ccmode_cbc_encrypt;
  a1[4] = a2;
  return cc_disable_dit(&v10);
}

uint64_t ccdes_ltc_setup(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != 8)
    return 0xFFFFFFFFLL;
  deskey(a4, 0, a2);
  deskey(a4, 1, a2 + 8);
  return 0;
}

uint64_t ccec_generate_scalar_fips_retry(_QWORD *a1, uint64_t (**a2)(_QWORD, unint64_t, void *), _QWORD *a3)
{
  char v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t scalar_fips_retry_ws;
  _QWORD v16[4];
  void (*v17)(uint64_t);
  char v18;

  v6 = 0;
  v18 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v18 = v6;
  v12 = (uint64_t)&a1[5 * *a1 + 4];
  v13 = cczp_n(v12);
  v16[0] = cc_malloc_clear(8 * v13);
  v16[1] = cczp_n(v12);
  v16[2] = 0;
  v16[3] = cc_ws_alloc;
  v17 = cc_ws_free;
  if (v16[0])
  {
    scalar_fips_retry_ws = ccec_generate_scalar_fips_retry_ws((uint64_t)v16, a1, a2, a3);
    v17((uint64_t)v16);
  }
  else
  {
    scalar_fips_retry_ws = 4294967283;
  }
  cc_disable_dit(&v18);
  return scalar_fips_retry_ws;
}

uint64_t ccec_sign_msg_ws(uint64_t a1, unint64_t **a2, unint64_t *a3, size_t a4, char *a5, unint64_t *a6, uint64_t a7, uint64_t (**a8)(_QWORD, unint64_t, void *))
{
  unsigned __int8 v15[64];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C874D8];
  ccdigest((uint64_t)a3, a4, a5, (uint64_t)v15);
  return ccec_sign_ws(a1, a2, *a3, v15, a6, a7, a8);
}

uint64_t ccec_sign_ws(uint64_t a1, unint64_t **a2, unint64_t a3, unsigned __int8 *a4, unint64_t *a5, uint64_t a6, uint64_t (**a7)(_QWORD, unint64_t, void *))
{
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  void *v17;
  uint64_t result;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v14 = **a2;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v14);
  v17 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v14);
  result = ccec_sign_internal_ws(a1, a2, a3, a4, v16, v17, a7);
  if (!(_DWORD)result)
  {
    v19 = *a2;
    v20 = **a2;
    v21 = ccder_sizeof_integer(v20, v16);
    v22 = ccder_sizeof_integer(v20, (unint64_t *)v17);
    v23 = ccder_sizeof(0x2000000000000010, v22 + v21);
    v24 = *a5;
    *a5 = v23;
    if (v24 >= v23)
    {
      v25 = a6 + v23;
      v26 = *v19;
      v27 = ccder_encode_integer(*v19, (unint64_t *)v17, a6, a6 + v23);
      v28 = ccder_encode_integer(v26, v16, a6, v27);
      ccder_encode_constructed_tl(0x2000000000000010uLL, v25, a6, v28);
      result = 0;
    }
    else
    {
      result = 4294967133;
    }
  }
  *(_QWORD *)(a1 + 16) = v15;
  return result;
}

uint64_t ccec_sign_msg(unint64_t **a1, unint64_t *a2, size_t a3, char *a4, unint64_t *a5, uint64_t a6, uint64_t (**a7)(_QWORD, unint64_t, void *))
{
  char v14;
  unint64_t *v20;
  uint64_t v21;
  _QWORD v23[4];
  void (*v24)(uint64_t);
  char v25;
  unsigned __int8 v26[64];
  uint64_t v27;

  v14 = 0;
  v27 = *MEMORY[0x1E0C874D8];
  v25 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v14 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v14 = 1;
    }
  }
  v25 = v14;
  v20 = *a1;
  v23[0] = cc_malloc_clear(280 * **a1);
  v23[1] = 35 * *v20;
  v23[2] = 0;
  v23[3] = cc_ws_alloc;
  v24 = cc_ws_free;
  if (v23[0])
  {
    ccdigest((uint64_t)a2, a3, a4, (uint64_t)v26);
    v21 = ccec_sign_ws((uint64_t)v23, a1, *a2, v26, a5, a6, a7);
    v24((uint64_t)v23);
  }
  else
  {
    v21 = 4294967283;
  }
  cc_disable_dit(&v25);
  return v21;
}

uint64_t ccec_sign(unint64_t **a1, unint64_t a2, unsigned __int8 *a3, unint64_t *a4, uint64_t a5, uint64_t (**a6)(_QWORD, unint64_t, void *))
{
  char v12;
  unint64_t *v18;
  uint64_t v19;
  _QWORD v21[4];
  void (*v22)(uint64_t);
  char v23;

  v12 = 0;
  v23 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v12 = 1;
    }
  }
  v23 = v12;
  v18 = *a1;
  v21[0] = cc_malloc_clear(280 * **a1);
  v21[1] = 35 * *v18;
  v21[2] = 0;
  v21[3] = cc_ws_alloc;
  v22 = cc_ws_free;
  if (v21[0])
  {
    v19 = ccec_sign_ws((uint64_t)v21, a1, a2, a3, a4, a5, a6);
    v22((uint64_t)v21);
  }
  else
  {
    v19 = 4294967283;
  }
  cc_disable_dit(&v23);
  return v19;
}

uint64_t cch2c_encode_to_curve_ro_ws(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;

  v10 = (_QWORD *)(*(uint64_t (**)(void))(a2 + 16))();
  v11 = *v10;
  v14 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, _QWORD))(a1 + 24))(a1, *v10);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v11);
  v12 = (unint64_t)(24 * v11 + 23) >> 3;
  (*(void (**)(uint64_t, unint64_t))(a1 + 24))(a1, v12);
  (*(void (**)(uint64_t, unint64_t))(a1 + 24))(a1, v12);
  *a7 = v10;
  result = cch2c_hash_to_base_ws(a1, a2);
  if (!(_DWORD)result)
  {
    result = cch2c_hash_to_base_ws(a1, a2);
    if (!(_DWORD)result)
    {
      result = cch2c_map_to_curve_ws(a1, a2);
      if (!(_DWORD)result)
      {
        result = ccec_projectify_ws(a1, (uint64_t)v10);
        if (!(_DWORD)result)
        {
          result = cch2c_map_to_curve_ws(a1, a2);
          if (!(_DWORD)result)
          {
            result = ccec_projectify_ws(a1, (uint64_t)v10);
            if (!(_DWORD)result)
            {
              ccec_full_add_ws(a1, (uint64_t)v10);
              result = ccec_affinify_ws(a1, (uint64_t)v10);
              if (!(_DWORD)result)
                result = (*(uint64_t (**)(uint64_t, _QWORD *))(a2 + 48))(a2, a7);
            }
          }
        }
      }
    }
  }
  *(_QWORD *)(a1 + 16) = v14;
  return result;
}

uint64_t cch2c_encode_to_curve_ws(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t ccmode_ccm_crypt(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  if (a3)
  {
    v9 = result;
    v10 = 0;
    v11 = *(_QWORD *)(*(_QWORD *)result + 8);
    v12 = *(_QWORD *)(a2 + 80);
    v19 = (v11 + ~(_DWORD)v12);
    v13 = result + 8;
    v14 = a2 + 48;
    v15 = *(unsigned int *)(a2 + 68);
    v16 = a2 + v12;
    do
    {
      if (!v15)
      {
        v17 = v19;
        do
        {
          if ((int)v17 < 1)
            break;
          v18 = (*(_BYTE *)(v16 + v17--))++ + 1;
        }
        while ((v18 & 0x100) != 0);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v13, 1, a2, v14);
        v15 = *(unsigned int *)(a2 + 68);
      }
      *(_BYTE *)(a5 + v10) = *(_BYTE *)(a2 + v15 + 48) ^ *(_BYTE *)(a4 + v10);
      v15 = (*(_DWORD *)(a2 + 68) + 1) % v11;
      *(_DWORD *)(a2 + 68) = v15;
      ++v10;
    }
    while (v10 != a3);
  }
  return result;
}

uint64_t ccmode_ccm_encrypt(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  _BOOL4 v11;

  v10 = *(_DWORD *)(a2 + 64);
  if (v10 == 5)
  {
    v11 = 0;
LABEL_5:
    ccmode_ccm_macdata(a1, a2, v11, a3, a4);
    ccmode_ccm_crypt(a1, a2, a3, a4, a5);
    return 0;
  }
  if (v10 == 4)
  {
    v11 = *(_DWORD *)(a2 + 72) != 0;
    *(_DWORD *)(a2 + 64) = 5;
    goto LABEL_5;
  }
  return 4294967228;
}

uint64_t ccss_shamir_evaluate_poly_to_buffer(uint64_t a1, unsigned int a2, char *a3)
{
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  unsigned int v12;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t (*v16)(_QWORD *, uint64_t);
  void (*v17)(uint64_t);

  v14[0] = cc_malloc_clear(**(_QWORD **)a1 << 6);
  v6 = *(uint64_t **)a1;
  v7 = **(_QWORD **)a1;
  v14[1] = 8 * v7;
  v15 = 0;
  v16 = cc_ws_alloc;
  v17 = cc_ws_free;
  if (!v14[0])
    return 4294967283;
  v8 = (_QWORD *)cc_ws_alloc(v14, v7);
  v9 = (_QWORD *)v16(v14, v7);
  v16(v14, v7);
  v10 = (void *)v16(v14, v7);
  ccn_seti(v7, v8, a2);
  ccn_seti(v7, v9, a2);
  v11 = (void *)ccss_shamir_poly_coefficient(a1, 0);
  ccn_set(v7, v10, v11);
  if (*(_DWORD *)(a1 + 8))
  {
    v12 = 1;
    do
    {
      ccss_shamir_poly_coefficient(a1, v12);
      cczp_mul_ws((uint64_t)v14, (uint64_t)v6);
      cczp_add_ws((uint64_t)v14, (uint64_t)v6);
      cczp_mul_ws((uint64_t)v14, (uint64_t)v6);
      ++v12;
    }
    while (v12 <= *(_DWORD *)(a1 + 8));
  }
  if (v7)
    ccn_set(v7, a3, v10);
  ccn_zero(0, &a3[8 * v7]);
  v15 = 0;
  v17((uint64_t)v14);
  return 0;
}

void ccvrf_irtf_ed25519_verify(uint64_t a1, uint64_t a2, char *a3, size_t a4, uint64_t a5)
{
  int v10;
  size_t v11;
  _OWORD v12[10];
  _OWORD v13[10];
  _OWORD v14[10];
  _OWORD v15[10];
  _OWORD v16[10];
  _OWORD v17[10];
  _OWORD v18[10];
  _OWORD v19[10];
  int *v20[4];
  _QWORD v21[2];
  int8x16_t v22[4];
  int8x16_t v23[2];
  _OWORD v24[2];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C874D8];
  if (!ge_has_small_order(a2))
  {
    memset(v12, 0, sizeof(v12));
    if (!ccvrf_irtf_ed25519_string_to_point((int *)v12, a2))
    {
      memset(v24, 0, sizeof(v24));
      memset(v23, 0, sizeof(v23));
      memset(v22, 0, sizeof(v22));
      v21[0] = 0;
      v21[1] = 0;
      memset(v19, 0, sizeof(v19));
      memset(v18, 0, sizeof(v18));
      memset(v17, 0, sizeof(v17));
      memset(v16, 0, sizeof(v16));
      memset(v15, 0, sizeof(v15));
      memset(v14, 0, sizeof(v14));
      memset(v13, 0, sizeof(v13));
      ccvrf_irtf_ed25519_decode_proof(a5, (int *)v18, v23, (uint64_t)v22);
      if (!v10)
      {
        v11 = *(_QWORD *)(a1 + 32);
        bzero((char *)v23 + (v11 >> 1), v11 >> 1);
        bzero((char *)v22 + v11, v11);
        sc_reduce((unsigned __int16 *)v22);
        ccvrf_irtf_ed25519_hash2curve_elligator2(*(_QWORD *)(a1 + 40), (uint64_t)v12, a3, a4, (uint64_t)v24);
        ge_frombytes_vartime((int *)v19, (uint64_t)v24);
        ge_scalarmult(v15, v23, (uint64_t)v12);
        ge_p3_to_cached((uint64_t)v13, (uint64_t)v15);
        ge_scalarmult_base(v15, v22);
        ge_sub((int *)v14, (uint64_t)v15, (int *)v13);
        ge_p1p1_to_p3(v17, (int *)v14);
        ge_scalarmult(v15, v23, (uint64_t)v18);
        ge_p3_to_cached((uint64_t)v13, (uint64_t)v15);
        ge_scalarmult(v15, v22, (uint64_t)v19);
        ge_sub((int *)v14, (uint64_t)v15, (int *)v13);
        ge_p1p1_to_p3(v16, (int *)v14);
        v20[0] = (int *)v19;
        v20[1] = (int *)v18;
        v20[2] = (int *)v17;
        v20[3] = (int *)v16;
        ccvrf_irtf_ed25519_hash_points(a1, v20, 4, v21);
        cc_cmp_safe(*(_QWORD *)(a1 + 32) >> 1, v23[0].i8, (char *)v21);
      }
    }
  }
}

uint64_t ccvrf_verify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v13;
  uint64_t v19;
  char v21;

  v13 = 0;
  v21 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v13 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v13 = 1;
    }
  }
  v21 = v13;
  if (ccvrf_sizeof_public_key(a1) == a2 && ccvrf_sizeof_proof(a1) == a6)
    v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 72))(a1, a3, a5, a4, a7);
  else
    v19 = 4294967289;
  cc_disable_dit(&v21);
  return v19;
}

void *ccsrp_gp_rfc5054_1024()
{
  return &_ccsrp_gp_rfc5054_1024;
}

_BYTE *ccmode_factory_ccm_encrypt(uint64_t a1, _QWORD *a2)
{
  char v2;
  char v9;

  v2 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v9 = v2;
  *(_QWORD *)a1 = ((a2[1] + 7) & 0xFFFFFFFFFFFFFFF8) + ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  *(_OWORD *)(a1 + 8) = xmmword_1DEE1AA30;
  *(_QWORD *)(a1 + 24) = ccmode_ccm_init;
  *(_QWORD *)(a1 + 32) = ccmode_ccm_set_iv;
  *(_QWORD *)(a1 + 40) = ccmode_ccm_cbcmac;
  *(_QWORD *)(a1 + 48) = ccmode_ccm_encrypt;
  *(_QWORD *)(a1 + 56) = ccmode_ccm_finalize;
  *(_QWORD *)(a1 + 64) = ccmode_ccm_reset;
  *(_QWORD *)(a1 + 72) = a2;
  *(_BYTE *)(a1 + 80) = 1;
  *(_DWORD *)(a1 + 81) = 0;
  *(_DWORD *)(a1 + 84) = 0;
  return cc_disable_dit(&v9);
}

uint64_t ccder_blob_decode_range_strict(unsigned __int8 **a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t result;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unint64_t v8;

  v8 = 0;
  result = ccder_blob_decode_tl_internal(a1, a2, &v8, 1);
  if ((_DWORD)result)
  {
    v6 = *a1;
    v7 = &(*a1)[v8];
    *a1 = v7;
    *a3 = v6;
    a3[1] = v7;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

unsigned int *cckyber_polyvec_encode(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  int v6;
  int v7;
  unint64_t v8;

  if (*result)
  {
    v5 = result;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      result = (unsigned int *)cckyber_poly_encode(a2 + (v6 & 0xFFFFFF80), a3 + 2 * (v7 & 0xFFFFFF00));
      ++v8;
      v7 += 256;
      v6 += 384;
    }
    while (v8 < *v5);
  }
  return result;
}

unsigned int *cckyber_polyvec_decode(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  int v6;
  int v7;
  unint64_t v8;

  if (*result)
  {
    v5 = result;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      result = (unsigned int *)cckyber_poly_decode(a2 + 2 * (v6 & 0xFFFFFF00), a3 + (v7 & 0xFFFFFF80));
      ++v8;
      v7 += 384;
      v6 += 256;
    }
    while (v8 < *v5);
  }
  return result;
}

unsigned int *cckyber_polyvec_compress(unsigned int *result, uint64_t a2, uint64_t a3)
{
  uint64_t (**v5)(uint64_t, uint64_t);
  unsigned int v6;
  int v7;
  unint64_t v8;
  int v9;

  if (*result)
  {
    v5 = (uint64_t (**)(uint64_t, uint64_t))result;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 32 * (result[2] & 0xFFFFFF);
    do
    {
      result = (unsigned int *)v5[4](a2 + v6, a3 + 2 * (v7 & 0xFFFFFF00));
      ++v8;
      v7 += 256;
      v6 += v9;
    }
    while (v8 < *(unsigned int *)v5);
  }
  return result;
}

unsigned int *cckyber_polyvec_decompress(unsigned int *result, uint64_t a2, uint64_t a3)
{
  uint64_t (**v5)(uint64_t, uint64_t);
  unsigned int v6;
  int v7;
  unint64_t v8;
  int v9;

  if (*result)
  {
    v5 = (uint64_t (**)(uint64_t, uint64_t))result;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 32 * (result[2] & 0xFFFFFF);
    do
    {
      result = (unsigned int *)v5[5](a2 + 2 * (v7 & 0xFFFFFF00), a3 + v6);
      ++v8;
      v7 += 256;
      v6 += v9;
    }
    while (v8 < *(unsigned int *)v5);
  }
  return result;
}

unsigned int *cckyber_polyvec_add(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v7;
  uint64_t v8;
  unint64_t v9;

  if (*result)
  {
    v7 = result;
    v8 = 0;
    v9 = 0;
    do
    {
      result = (unsigned int *)cckyber_poly_add(a2 + ((2 * v8) & 0x1FFFFFE00), a3 + ((2 * v8) & 0x1FFFFFE00), a4 + ((2 * v8) & 0x1FFFFFE00));
      ++v9;
      v8 += 256;
    }
    while (v9 < *v7);
  }
  return result;
}

unsigned int *cckyber_polyvec_reduce(unsigned int *result, uint64_t a2)
{
  unsigned int *v3;
  int v4;
  unint64_t v5;

  if (*result)
  {
    v3 = result;
    v4 = 0;
    v5 = 0;
    do
    {
      result = (unsigned int *)cckyber_poly_reduce(a2 + 2 * (v4 & 0xFFFFFF00));
      ++v5;
      v4 += 256;
    }
    while (v5 < *v3);
  }
  return result;
}

unsigned int *cckyber_polyvec_ntt_forward(unsigned int *result, uint64_t a2)
{
  unsigned int *v3;
  int v4;
  unint64_t v5;

  if (*result)
  {
    v3 = result;
    v4 = 0;
    v5 = 0;
    do
    {
      result = (unsigned int *)cckyber_ntt_forward(a2 + 2 * (v4 & 0xFFFFFF00));
      ++v5;
      v4 += 256;
    }
    while (v5 < *v3);
  }
  return result;
}

uint64_t cckyber_polyvec_basemul(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  _BYTE v11[512];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C874D8];
  result = cckyber_ntt_basemul(a2, a3, a4);
  if (*a1 >= 2u)
  {
    v9 = 1;
    v10 = 256;
    do
    {
      cckyber_ntt_basemul((uint64_t)v11, a3 + ((2 * v10) & 0x1FFFFFE00), a4 + ((2 * v10) & 0x1FFFFFE00));
      result = cckyber_poly_add(a2, a2, (uint64_t)v11);
      ++v9;
      v10 += 256;
    }
    while (v9 < *a1);
  }
  return result;
}

uint64_t ccmode_ccm_set_iv(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t result;
  unint64_t v14;
  BOOL v15;
  BOOL v16;
  _BYTE *v17;
  _BYTE *v18;
  unint64_t v19;
  int v20;
  int v21;
  uint8x8_t v22;
  int16x8_t v23;
  int8x8_t v24;

  if (*(_QWORD *)(*(_QWORD *)a1 + 8) != 16)
    return 0xFFFFFFFFLL;
  *(_DWORD *)(a2 + 64) = 1;
  cc_clear(0x10uLL, (void *)(a2 + 48));
  *(_DWORD *)(a2 + 68) = 0;
  if ((unint64_t)(a5 - 17) < 0xFFFFFFFFFFFFFFF3)
    return 0xFFFFFFFFLL;
  result = 0xFFFFFFFFLL;
  if ((a5 & 1) == 0)
  {
    v14 = 15 - a3;
    if (6 - a3 >= 0xFFFFFFFFFFFFFFF9 && a3 >= 7 && a3 <= 0xD)
    {
      v15 = v14 >= 8 || a7 >> (8 * v14) == 0;
      v16 = !v15;
      if (!HIDWORD(a6) && !v16)
      {
        *(_BYTE *)(a2 + 16) = (((4 * a5) & 0xF8) - 8) | ((a6 != 0) << 6) | (14 - a3);
        *(_QWORD *)(a2 + 80) = a3;
        *(_QWORD *)(a2 + 88) = a5;
        v17 = (_BYTE *)(a2 + 17);
        __memcpy_chk();
        v18 = (_BYTE *)(a2 + 31);
        v19 = 15 - a3;
        do
        {
          *v18-- = a7;
          a7 >>= 8;
          --v19;
        }
        while (v19);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1 + 8, 1, a2 + 16, a2 + 16);
        *(_BYTE *)a2 = 14 - a3;
        __memcpy_chk();
        cc_clear(15 - a3, (void *)(a2 + 1 + a3));
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1 + 8, 1, a2, a2 + 32);
        if (a6)
        {
          if (a6 >> 8 > 0xFE)
          {
            v22.i32[1] = -1;
            v23 = (int16x8_t)vshlq_u64((uint64x2_t)vdupq_n_s64(a6), (uint64x2_t)xmmword_1DEE228F0);
            *(int32x2_t *)v23.i8 = vmovn_s64((int64x2_t)v23);
            v22.i32[0] = *(_DWORD *)(a2 + 16);
            v24.i32[0] = 16646399;
            v24.i16[2] = v23.i16[0];
            v24.i16[3] = v23.i16[2];
            *(int8x8_t *)v23.i8 = veor_s8((int8x8_t)*(_OWORD *)&vmovl_u8(v22), v24);
            *(_DWORD *)(a2 + 16) = vmovn_s16(v23).u32[0];
            *(_BYTE *)(a2 + 20) ^= BYTE1(a6);
            v17 = (_BYTE *)(a2 + 21);
            v20 = 6;
          }
          else
          {
            *(_BYTE *)(a2 + 16) ^= BYTE1(a6);
            v20 = 2;
          }
          *v17 ^= a6;
          v21 = 4;
        }
        else
        {
          v20 = 0;
          v21 = 5;
        }
        result = 0;
        *(_DWORD *)(a2 + 72) = v20;
        *(_DWORD *)(a2 + 64) = v21;
      }
    }
  }
  return result;
}

void cc_try_abort()
{
  cc_abort();
}

unint64_t ccz_write_uint_size(uint64_t a1)
{
  char v2;
  uint64_t v8;
  unint64_t v9;
  char v11;

  v2 = 0;
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v11 = v2;
  v8 = ccz_n(a1);
  v9 = ccn_write_uint_size(v8, *(unint64_t **)(a1 + 24));
  cc_disable_dit(&v11);
  return v9;
}

_BYTE *ccz_write_uint(uint64_t a1, unint64_t a2, char *a3)
{
  char v6;
  unint64_t v12;
  char v14;

  v6 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v14 = v6;
  v12 = ccz_n(a1);
  ccn_write_uint_padded(v12, *(unint64_t **)(a1 + 24), a2, a3);
  return cc_disable_dit(&v14);
}

uint64_t ccdrbg_must_reseed(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v8;
  char v10;

  v2 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v10 = v2;
  v8 = (*(uint64_t (**)(uint64_t))(a1 + 48))(a2);
  cc_disable_dit(&v10);
  return v8;
}

uint64_t ccdrbg_done(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a2);
}

uint64_t ccdrbg_context_size(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t ccnistkdf_ctr_hmac_fixed(rsize_t *a1, uint64_t a2, uint64_t a3, size_t a4, char *a5, rsize_t a6, char *a7)
{
  char *v7;
  char v12;
  rsize_t v18;
  rsize_t v19;
  size_t v20;
  rsize_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  size_t v25;
  char *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;
  _BYTE v31[200];
  _BYTE __src[64];
  uint64_t v33;

  v7 = a7;
  v12 = 0;
  v33 = *MEMORY[0x1E0C874D8];
  v30 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v12 = 1;
    }
  }
  v30 = v12;
  if (a6)
  {
    v18 = *a1;
    v19 = a6 / *a1;
    v20 = a6 % *a1;
    if (v20)
      v21 = v19 + 1;
    else
      v21 = a6 / *a1;
    v22 = 4294967289;
    if (!HIDWORD(v21) && a2 && a3 && a7)
    {
      v29[0] = v21;
      v29[1] = v29;
      MEMORY[0x1E0C86820](a1, a2, a2, a3);
      v24 = (_QWORD *)((char *)v29 - v23);
      cchmac_init((uint64_t)a1, (_QWORD *)((char *)v29 - v23), v25, v26);
      __memcpy_chk();
      if (v18 <= a6)
      {
        v27 = 1;
        do
        {
          F_0((uint64_t)a1, v24, v31, v27++, a4, a5, (uint64_t)v7);
          v7 += v18;
        }
        while (v27 <= v19);
      }
      if (v20)
      {
        F_0((uint64_t)a1, v24, v31, v29[0], a4, a5, (uint64_t)__src);
        memcpy(v7, __src, v20);
      }
      cc_clear(v18, __src);
      cc_clear(((a1[1] + a1[2] + 19) & 0xFFFFFFFFFFFFFFF8) + a1[1], v24);
      cc_clear(a1[1], v31);
      v22 = 0;
    }
  }
  else
  {
    v22 = 4294967289;
  }
  cc_disable_dit(&v30);
  return v22;
}

uint64_t ccnistkdf_ctr_hmac(rsize_t *a1, uint64_t a2, uint64_t a3, size_t a4, const void *a5, size_t a6, const void *a7, rsize_t a8, char *a9)
{
  char v17;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  size_t v28;
  char *v29;
  _QWORD v31[4];
  void (*v32)(uint64_t);
  char v33;

  v17 = 0;
  v33 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v17 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v17 = 1;
    }
  }
  v33 = v17;
  v23 = a6 + a4 + 12;
  v24 = v23 >> 3;
  v31[0] = cc_malloc_clear(v23 & 0xFFFFFFFFFFFFFFF8);
  v31[1] = v24;
  v31[2] = 0;
  v31[3] = cc_ws_alloc;
  v32 = cc_ws_free;
  if (v31[0])
  {
    v25 = (char *)cc_ws_alloc(v31, v24);
    if ((a8 & 0x1FFFFFFFE0000000) != 0)
    {
      v26 = 4294967289;
    }
    else
    {
      v27 = v25;
      v28 = a6 + a4 + 5;
      if (a4 && a5)
        memcpy(v25, a5, a4);
      v29 = &v27[a4];
      *v29 = 0;
      if (a6 && a7)
        memcpy(v29 + 1, a7, a6);
      *(_DWORD *)&v29[a6 + 1] = ((_DWORD)a8 << 11) & 0xFF0000 | ((_DWORD)a8 << 27) | (a8 >> 5) & 0xFF00 | (a8 >> 21);
      v26 = ccnistkdf_ctr_hmac_fixed(a1, a2, a3, v28, v27, a8, a9);
    }
    v32((uint64_t)v31);
  }
  else
  {
    v26 = 4294967283;
  }
  cc_disable_dit(&v33);
  return v26;
}

uint64_t ltc_rc2_ecb_encrypt(uint64_t a1, uint64_t a2, unsigned __int16 *a3, _WORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  _DWORD *v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  char v13;
  unsigned __int16 v14;
  unsigned __int16 v15;

  for (; a2; --a2)
  {
    v4 = 0;
    v5 = a3[3];
    v6 = a3[2];
    v7 = a3[1];
    v8 = (_DWORD *)(a1 + 8);
    v9 = *a3;
    do
    {
      v10 = (v7 & ~v5 | v6 & v5) + v9 + *(v8 - 2);
      v9 = (v10 >> 15) & 1 | (2 * (unsigned __int16)v10);
      v11 = *(v8 - 1) + v7 + (v6 & ~v9) + (v9 & v5);
      v7 = ((unsigned __int16)v11 >> 14) & 0xFFFC0003 | (4 * (unsigned __int16)v11);
      v12 = *v8 + v6 + (v5 & ~v7) + (v7 & v9);
      v6 = ((unsigned __int16)v12 >> 13) & 0xFFF80007 | (8 * (unsigned __int16)v12);
      v5 = ((unsigned __int16)(v8[1] + v5 + (v9 & ~(_WORD)v6) + (v6 & v7)) >> 11) & 0xFFE0001F | (32
                                                                                                * (unsigned __int16)(v8[1] + v5 + (v9 & ~(_WORD)v6) + (v6 & v7)));
      if ((_DWORD)v4 == 10 || (_DWORD)v4 == 4)
      {
        v13 = *(_DWORD *)(a1 + 4 * (v5 & 0x3F)) + v9;
        v9 = (unsigned __int16)(*(_DWORD *)(a1 + 4 * (v5 & 0x3F)) + v9);
        v14 = *(_DWORD *)(a1 + 4 * (v13 & 0x3F)) + v7;
        v7 = v14;
        v15 = *(_DWORD *)(a1 + 4 * (v14 & 0x3F)) + v6;
        v6 = v15;
        v5 = (unsigned __int16)(*(_DWORD *)(a1 + 4 * (v15 & 0x3F)) + v5);
      }
      v8 += 4;
      ++v4;
    }
    while (v4 != 16);
    *a4 = v9;
    a4[1] = v7;
    a4[2] = v6;
    a3 += 4;
    a4[3] = v5;
    a4 += 4;
  }
  return 0;
}

uint64_t ccss_encode_string_into_value_smaller_than_prime(uint64_t a1, _QWORD *a2, unint64_t a3, unsigned __int8 *a4)
{
  uint64_t v8;
  unint64_t *v9;
  uint64_t uint;
  uint64_t v11;

  v8 = cczp_n(a1);
  v9 = (unint64_t *)cczp_prime(a1);
  uint = ccn_read_uint(v8, a2, a3, a4);
  if ((_DWORD)uint)
  {
    v11 = uint;
LABEL_7:
    cc_clear(8 * v8, a2);
    return v11;
  }
  if ((ccn_cmp(v8, a2, v9) & 0x80000000) == 0)
  {
    v11 = 4294967176;
    goto LABEL_7;
  }
  return 0;
}

BOOL ccss_shamir_secret_one_byte_smaller_than_prime(uint64_t a1, unint64_t a2)
{
  return a2 < (unint64_t)(cczp_bitlen(a1) + 7) >> 3;
}

uint64_t cczp_is_quadratic_residue_ws(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  int8x16_t *v8;
  void *v9;
  int8x16_t *v10;
  _QWORD *v11;
  unsigned int v12;
  _BOOL4 v13;
  uint64_t result;

  v6 = cczp_n(a2);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  v9 = (void *)cczp_prime(a2);
  ccn_set(v6, v8, v9);
  v8->i64[0] &= ~1uLL;
  v10 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  ccn_shift_right(v6, v10, v8, 1);
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  v12 = cczp_power_fast_ws(a1, a2, v11, a3, (unint64_t *)v10);
  cczp_from_ws(a1, a2);
  v13 = ccn_n(v6, v11) == 1 && *v11 == 1;
  result = v13 & ~(((v12 | ((unint64_t)(int)v12 >> 32)) + 0xFFFFFFFF) >> 32);
  *(_QWORD *)(a1 + 16) = v7;
  return result;
}

BOOL ccz_is_prime(uint64_t a1, unsigned int a2)
{
  char v4;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  _BOOL8 v13;
  char v15;

  v4 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v15 = v4;
  v10 = ccrng(0);
  if (v10)
  {
    v11 = v10;
    v12 = ccz_n(a1);
    v13 = ccprime_rabin_miller(v12, *(unint64_t **)(a1 + 24), a2, (uint64_t (**)(_QWORD, unint64_t, uint64_t))v11) == 1;
  }
  else
  {
    v13 = 0;
  }
  cc_disable_dit(&v15);
  return v13;
}

uint64_t ccckg_owner_generate_share(uint64_t a1, size_t a2, const void *a3, uint64_t a4, char *a5)
{
  char v10;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  size_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t **v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t key_fips_ws;
  uint64_t (**v33)(_QWORD, size_t, uint64_t);
  uint64_t (*v34)(_QWORD, size_t, uint64_t);
  size_t v35;
  _QWORD *v36;
  char *v37;
  _QWORD *v38;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t (*v42)(_QWORD *, uint64_t);
  void (*v43)(uint64_t);
  char v44;

  v10 = 0;
  v44 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v44 = v10;
  v16 = (uint64_t *)ccckg_ctx_cp(a1);
  v17 = *v16;
  v18 = sizeof_struct_cche_galois_key();
  v19 = sizeof_struct_ccpolyzp_po2cyc();
  v40[0] = cc_malloc_clear(8 * ((v18 + v19 + 4 * v17 * v19 - 1) / v19 + 49 * v17));
  v20 = *v16;
  v21 = sizeof_struct_cche_galois_key();
  v22 = sizeof_struct_ccpolyzp_po2cyc();
  v40[1] = (v21 + v22 + 4 * v20 * v22 - 1) / v22 + 49 * v20;
  v41 = 0;
  v42 = cc_ws_alloc;
  v43 = cc_ws_free;
  if (v40[0])
  {
    v23 = (size_t *)ccckg_ctx_di(a1);
    v24 = (uint64_t *)ccckg_ctx_cp(a1);
    if (*(_BYTE *)(a1 + 32))
    {
      v25 = 4294967210;
LABEL_17:
      cc_ws_free((uint64_t)v40);
      goto LABEL_18;
    }
    v26 = v24;
    v27 = *v24;
    if (ccckg_sizeof_commitment((uint64_t)v24, (uint64_t)v23) != a2 || ccckg_sizeof_share((uint64_t)v26, v23) != a4)
    {
      v25 = 4294967289;
      goto LABEL_17;
    }
    v28 = (uint64_t **)cc_ws_alloc(v40, (4 * (v27 & 0x7FFFFFFFFFFFFFFLL)) | 2);
    *v28 = v26;
    v29 = (_QWORD *)ccckg_ctx_di(a1);
    v30 = (_QWORD *)ccckg_ctx_cp(a1);
    v31 = a1 + 40;
    memcpy((void *)(a1 + 40 + 8 * *v30 + ((*v29 + 7) & 0xFFFFFFFFFFFFFFF8)), a3, a2);
    key_fips_ws = ccec_generate_key_fips_ws((uint64_t)v40, v26, *(uint64_t (***)(_QWORD, uint64_t, uint64_t *))(a1 + 24), v28);
    if ((_DWORD)key_fips_ws
      || (v33 = *(uint64_t (***)(_QWORD, size_t, uint64_t))(a1 + 24),
          v34 = *v33,
          v35 = *v23,
          v36 = (_QWORD *)ccckg_ctx_cp(a1),
          key_fips_ws = v34(v33, v35, v31 + 8 * *v36),
          (_DWORD)key_fips_ws))
    {
      v25 = key_fips_ws;
    }
    else
    {
      ccn_set(v27, (void *)(a1 + 40), &v28[3 * **v28 + 2]);
      v25 = ccec_export_pub((uint64_t)v28, a5);
      if (!(_DWORD)v25)
      {
        v37 = &a5[((unint64_t)(cczp_bitlen((uint64_t)*v28) + 7) >> 2) | 1];
        v38 = (_QWORD *)ccckg_ctx_cp(a1);
        memcpy(v37, (const void *)(v31 + 8 * *v38), *v23);
        *(_BYTE *)(a1 + 32) = 2;
      }
    }
    v41 = 0;
    v43((uint64_t)v40);
  }
  else
  {
    v25 = 4294967283;
  }
LABEL_18:
  cc_disable_dit(&v44);
  return v25;
}

uint64_t ccckg_owner_finish_derive_p(uint64_t a1, unsigned __int8 *a2, uint64_t **a3, uint64_t (**a4)(_QWORD, uint64_t, uint64_t *))
{
  uint64_t *v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t result;

  v8 = (uint64_t *)ccckg_ctx_cp(a1);
  v9 = *v8;
  v10 = a3 + 2;
  v11 = &a3[3 * **a3 + 2];
  v12 = cczp_bitlen((uint64_t)&v8[5 * *v8 + 4]);
  ccn_read_uint(v9, v11, (unint64_t)(v12 + 7) >> 3, a2);
  if (ccec_validate_scalar(v8, (unint64_t *)&a3[3 * **a3 + 2]))
    return 4294967289;
  result = cczp_add((uint64_t)&v8[5 * *v8 + 4], (uint64_t)&v10[3 * **a3], (uint64_t)&v10[3 * **a3], a1 + 40);
  if (!(_DWORD)result)
    return ccec_make_pub_from_priv(v8, a4, (unint64_t *)&v10[3 * **a3], 0, a3);
  return result;
}

uint64_t ccckg_owner_finish(uint64_t a1, size_t a2, char *a3, uint64_t a4, uint64_t a5, char *a6)
{
  char v12;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  char __s[64];
  uint64_t v31;

  v12 = 0;
  v31 = *MEMORY[0x1E0C874D8];
  v29 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v12 = 1;
    }
  }
  v29 = v12;
  v18 = (uint64_t *)ccckg_ctx_di(a1);
  v19 = (_QWORD *)ccckg_ctx_cp(a1);
  if (*(_BYTE *)(a1 + 32) == 2)
  {
    v20 = v19;
    if (*(_QWORD **)a4 == v19 && ccckg_sizeof_opening(v19, v18) == a2)
    {
      ccdigest((uint64_t)v18, a2, a3, (uint64_t)__s);
      v21 = *v18;
      v22 = (_QWORD *)ccckg_ctx_di(a1);
      v23 = (_QWORD *)ccckg_ctx_cp(a1);
      if (cc_cmp_safe(v21, __s, (char *)(a1 + 40 + 8 * *v23 + ((*v22 + 7) & 0xFFFFFFFFFFFFFFF8))))
      {
        v24 = 4294967294;
      }
      else
      {
        v26 = ccckg_owner_finish_derive_p(a1, (unsigned __int8 *)a3, (uint64_t **)a4, *(uint64_t (***)(_QWORD, uint64_t, uint64_t *))(a1 + 24));
        if ((_DWORD)v26)
        {
          v24 = v26;
        }
        else
        {
          v27 = (uint64_t)&a3[(unint64_t)(cczp_bitlen((uint64_t)&v20[5 * *v20 + 4]) + 7) >> 3];
          v28 = (_QWORD *)ccckg_ctx_cp(a1);
          v24 = ccckg_derive_sk(a1, (unint64_t *)(a4 + 16), v27, a1 + 40 + 8 * *v28, a5, a6);
          if (!(_DWORD)v24)
            *(_BYTE *)(a1 + 32) = 3;
        }
      }
      cc_clear(0x40uLL, __s);
    }
    else
    {
      v24 = 4294967289;
    }
  }
  else
  {
    v24 = 4294967210;
  }
  cc_disable_dit(&v29);
  return v24;
}

BOOL ccec_validate_pub(uint64_t **a1)
{
  char v2;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  _BOOL8 v19;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t (*v23)(_QWORD *, uint64_t);
  void (*v24)(uint64_t);
  char v25;

  v2 = 0;
  v25 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v25 = v2;
  v8 = *a1;
  v9 = **a1;
  v10 = sizeof_struct_ccpolyzp_po2cyc();
  v11 = 5 * v9 + (v10 + 7) / v10 + 3;
  if (v11 <= 7 * v9)
    v11 = 7 * v9;
  v12 = cc_malloc_clear(8 * (v11 + 3 * v9));
  v21[0] = v12;
  v13 = *v8;
  v14 = sizeof_struct_ccpolyzp_po2cyc();
  v15 = 5 * v13 + (v14 + 7) / v14 + 3;
  if (v15 <= 7 * v13)
    v15 = 7 * v13;
  v21[1] = v15 + 3 * v13;
  v22 = 0;
  v23 = cc_ws_alloc;
  v24 = cc_ws_free;
  if (v12)
  {
    v16 = *a1;
    v17 = cc_ws_alloc(v21, 3 * **a1);
    v18 = ccec_validate_point_and_projectify_ws((uint64_t)v21, v16, v17, (unint64_t *)a1 + 2);
    v22 = 0;
    v24((uint64_t)v21);
    v19 = v18 == 0;
  }
  else
  {
    v19 = 0;
  }
  cc_disable_dit(&v25);
  return v19;
}

uint64_t ccpad_cts3_decrypt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v11;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  char v23;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  char v27;
  char v28;
  char v29;
  char v31;
  _BYTE v32[32];
  _BYTE v33[16];
  uint64_t v34;

  v11 = 0;
  v34 = *MEMORY[0x1E0C874D8];
  v31 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v11 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v11 = 1;
    }
  }
  v31 = v11;
  v17 = *(_QWORD *)(a1 + 8);
  v18 = &v32[v17];
  v19 = (a4 - 1) / v17;
  if (v19 >= 2)
  {
    v21 = (v19 - 1) * v17;
    (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a2, a3);
    v20 = a4 - v21;
    a6 += v21;
  }
  else
  {
    v20 = a4;
  }
  __memcpy_chk();
  if (2 * v17 == v20)
  {
    for (i = 0; i != v17; ++i)
    {
      v23 = v32[i];
      v32[i] = v18[i];
      v18[i] = v23;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t))(a1 + 24))(a2, a3, 2, v32, a6);
  }
  else
  {
    v24 = v20 - v17;
    ecb_from_cbc(a1, a2, (uint64_t)v32, (uint64_t)v33);
    if (v20 - v17 < v17)
      memcpy(&v32[v20], &v33[v24], 2 * v17 - v20);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t))(a1 + 24))(a2, a3, 1, &v32[v17], a6);
    if (v20 != v17)
    {
      v25 = (_BYTE *)(a6 + v17);
      v26 = v33;
      do
      {
        v28 = *v18++;
        v27 = v28;
        v29 = *v26++;
        *v25++ = v29 ^ v27;
        --v24;
      }
      while (v24);
    }
  }
  cc_disable_dit(&v31);
  return a4;
}

uint64_t ccrsa_generate_prime_ws(uint64_t a1, unint64_t a2, void *a3, void *a4, uint64_t (**a5)(_QWORD, unint64_t, uint64_t), uint64_t (**a6)(_QWORD, unint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v6 = a2 + 63;
  if (a2 + 63 < 0x40)
    return 4294967289;
  v14 = v6 >> 6;
  v15 = ccn_n(v6 >> 6, a4);
  v17 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    result = ccn_random_bits(a2, (uint64_t)a3, a5);
    if ((_DWORD)result)
      break;
    ccn_set_bit((uint64_t)a3, a2 - 1, 1);
    ccn_set_bit((uint64_t)a3, a2 - 2, 1);
    ccn_set_bit((uint64_t)a3, 0, 1);
    v16 = ccrsa_num_mr_iterations(a2);
    LODWORD(result) = ccrsa_is_valid_prime_ws(a1, v14, a3, v15, a4, v16, a6);
    if ((_DWORD)result == 1 || (result & 0x80000000) != 0)
    {
      if ((_DWORD)result == 1)
        result = 0;
      else
        result = result;
      break;
    }
  }
  *(_QWORD *)(a1 + 16) = v17;
  return result;
}

void *ccec_cp_ed448_asm()
{
  return &ccec_ed448_asm_params;
}

uint64_t ccrsa_get_pubkey_components(unint64_t *a1, uint64_t a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  char v10;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v23;

  v10 = 0;
  v23 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v23 = v10;
  v16 = a1 + 3;
  v17 = *a1;
  v18 = ccn_write_uint_size(*a1, a1 + 3);
  if (v18 <= *a3
    && (*a3 = v18,
        ccn_write_uint(v17, a1 + 3, v18, a2),
        v19 = *a1,
        v20 = ccn_write_uint_size(v19, &v16[2 * v19 + 1]),
        v20 <= *a5))
  {
    *a5 = v20;
    ccn_write_uint(v19, &v16[2 * v19 + 1], v20, a4);
    v21 = 0;
  }
  else
  {
    v21 = 0xFFFFFFFFLL;
  }
  cc_disable_dit(&v23);
  return v21;
}

uint64_t ccpad_pkcs7_decrypt(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  char v8;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v18;

  v8 = 0;
  v18 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v18 = v8;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = a4 / v14;
  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(a1 + 24))(a2, a3, a4 / v14, a5, a6);
  v16 = a4 - ccpad_pkcs7_decode(v14, a6 + (v15 - 1) * v14);
  cc_disable_dit(&v18);
  return v16;
}

uint64_t ccaes_gladman_encrypt_key128(int *a1, int *a2)
{
  int v2;
  int v3;
  int v4;
  unint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t result;
  int v31;
  int v32;
  int v33;

  v2 = *a1;
  *a2 = *a1;
  v3 = a1[1];
  a2[1] = v3;
  v4 = a1[2];
  a2[2] = v4;
  v5 = a1[3];
  a2[3] = v5;
  v6 = t_fl[BYTE1(v5)] ^ t_fl[BYTE2(v5) + 256] ^ *(_DWORD *)((char *)&t_fl[512] + ((v5 >> 22) & 0x3FC)) ^ t_fl[v5 + 768] ^ 1 ^ v2;
  a2[4] = v6;
  a2[5] = v6 ^ v3;
  v7 = v6 ^ v3 ^ v4;
  a2[6] = v7;
  a2[7] = v7 ^ v5;
  v8 = t_fl[((v7 ^ v5) >> 16) + 256] ^ t_fl[((unsigned __int16)(v7 ^ v5) >> 8)] ^ t_fl[((v7 ^ v5) >> 24) + 512] ^ t_fl[(v7 ^ v5) + 768] ^ 2;
  v9 = v8 ^ v6;
  v10 = v8 ^ v3;
  a2[8] = v9;
  a2[9] = v10;
  a2[10] = v10 ^ v7;
  a2[11] = v10 ^ v5;
  v11 = t_fl[((unsigned __int16)(v10 ^ v5) >> 8)] ^ t_fl[((v10 ^ v5) >> 16)
                                                                        + 256] ^ t_fl[((v10 ^ v5) >> 24)
                                                                                    + 512] ^ t_fl[(v10 ^ v5)
                                                                                                + 768] ^ v9 ^ 4;
  a2[12] = v11;
  a2[13] = v11 ^ v10;
  v12 = v11 ^ v7;
  v13 = v12 ^ v10 ^ v5;
  a2[14] = v12;
  a2[15] = v13;
  v14 = t_fl[BYTE2(v13) + 256] ^ t_fl[BYTE1(v13)] ^ t_fl[HIBYTE(v13) + 512] ^ t_fl[(v12 ^ v10 ^ v5)
                                                                                 + 768] ^ 8;
  v15 = v14 ^ v11;
  v16 = v14 ^ v10;
  a2[16] = v15;
  a2[17] = v16;
  LODWORD(v5) = v14 ^ v5;
  a2[18] = v16 ^ v12;
  a2[19] = v5;
  v17 = t_fl[BYTE1(v5)] ^ t_fl[BYTE2(v5) + 256] ^ t_fl[BYTE3(v5) + 512] ^ t_fl[v5 + 768] ^ v15 ^ 0x10;
  a2[20] = v17;
  a2[21] = v17 ^ v16;
  v18 = v17 ^ v12;
  a2[22] = v18;
  a2[23] = v18 ^ v5;
  v19 = t_fl[((v18 ^ v5) >> 16) + 256] ^ t_fl[((unsigned __int16)(v18 ^ v5) >> 8)] ^ t_fl[((v18 ^ v5) >> 24) + 512] ^ t_fl[(v18 ^ v5) + 768] ^ 0x20;
  v20 = v19 ^ v17;
  v21 = v19 ^ v16;
  a2[24] = v20;
  a2[25] = v21;
  a2[26] = v21 ^ v18;
  a2[27] = v21 ^ v5;
  v22 = t_fl[((unsigned __int16)(v21 ^ v5) >> 8)] ^ t_fl[((v21 ^ v5) >> 16)
                                                                        + 256] ^ t_fl[((v21 ^ v5) >> 24)
                                                                                    + 512] ^ t_fl[(v21 ^ v5)
                                                                                                + 768] ^ v20 ^ 0x40;
  a2[28] = v22;
  a2[29] = v22 ^ v21;
  v23 = v22 ^ v18;
  v24 = v23 ^ v21 ^ v5;
  a2[30] = v23;
  a2[31] = v24;
  v25 = t_fl[BYTE2(v24) + 256] ^ t_fl[BYTE1(v24)] ^ t_fl[HIBYTE(v24) + 512] ^ t_fl[(v23 ^ v21 ^ v5)
                                                                                 + 768] ^ 0x80;
  v26 = v25 ^ v22;
  v27 = v25 ^ v21;
  a2[32] = v26;
  a2[33] = v27;
  LODWORD(v5) = v25 ^ v5;
  a2[34] = v27 ^ v23;
  a2[35] = v5;
  v28 = t_fl[BYTE1(v5)] ^ t_fl[BYTE2(v5) + 256] ^ t_fl[BYTE3(v5) + 512] ^ t_fl[v5 + 768] ^ v26 ^ 0x1B;
  a2[36] = v28;
  a2[37] = v28 ^ v27;
  v29 = v28 ^ v23;
  a2[38] = v29;
  a2[39] = v29 ^ v5;
  result = ((v29 ^ v5) >> 16);
  v31 = t_fl[result + 256] ^ t_fl[((unsigned __int16)(v29 ^ v5) >> 8)] ^ t_fl[((v29 ^ v5) >> 24)
                                                                                             + 512] ^ t_fl[(v29 ^ v5) + 768] ^ 0x36;
  v32 = v31 ^ v28;
  v33 = v31 ^ v27;
  a2[40] = v32;
  a2[41] = v33;
  a2[42] = v33 ^ v29;
  a2[43] = v33 ^ v5;
  a2[60] = 10;
  return result;
}

uint64_t ccaes_gladman_encrypt_key192(int *a1, int *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t result;
  unsigned int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;

  v2 = *a1;
  *a2 = *a1;
  v3 = a1[1];
  a2[1] = v3;
  v4 = a1[2];
  a2[2] = v4;
  v5 = a1[3];
  a2[3] = v5;
  v6 = a1[4];
  a2[4] = v6;
  v7 = a1[5];
  a2[5] = v7;
  v8 = t_fl[BYTE1(v7)] ^ t_fl[BYTE2(v7) + 256] ^ *(_DWORD *)((char *)&t_fl[512] + ((v7 >> 22) & 0x3FC)) ^ t_fl[v7 + 768] ^ 1 ^ v2;
  a2[6] = v8;
  a2[7] = v8 ^ v3;
  v9 = v8 ^ v3 ^ v4;
  a2[8] = v9;
  a2[9] = v9 ^ v5;
  v10 = v9 ^ v5 ^ v6;
  a2[10] = v10;
  a2[11] = v10 ^ v7;
  v11 = t_fl[((v10 ^ v7) >> 16) + 256] ^ t_fl[((unsigned __int16)(v10 ^ v7) >> 8)] ^ t_fl[((v10 ^ v7) >> 24) + 512] ^ t_fl[(v10 ^ v7) + 768] ^ 2;
  v12 = v11 ^ v8;
  v13 = v11 ^ v3;
  a2[12] = v12;
  a2[13] = v13;
  a2[14] = v13 ^ v9;
  a2[15] = v13 ^ v5;
  v14 = v13 ^ v5 ^ v7;
  a2[16] = v13 ^ v5 ^ v10;
  a2[17] = v14;
  LODWORD(v7) = t_fl[((unsigned __int16)(v13 ^ v5 ^ v7) >> 8)] ^ t_fl[BYTE2(v14) + 256] ^ t_fl[HIBYTE(v14) + 512] ^ t_fl[(v13 ^ v5 ^ v7) + 768] ^ v12 ^ 4;
  a2[18] = v7;
  a2[19] = v7 ^ v13;
  v15 = v7 ^ v9;
  a2[20] = v15;
  a2[21] = v15 ^ v13 ^ v5;
  v16 = v15 ^ v10 ^ v14;
  a2[22] = v15 ^ v10;
  a2[23] = v16;
  v17 = t_fl[BYTE2(v16) + 256] ^ t_fl[BYTE1(v16)] ^ t_fl[HIBYTE(v16) + 512] ^ t_fl[(v15 ^ v10 ^ v14)
                                                                                 + 768] ^ 8;
  LODWORD(v7) = v17 ^ v7;
  v18 = v17 ^ v13;
  a2[24] = v7;
  a2[25] = v18;
  v19 = v17 ^ v5;
  a2[26] = v18 ^ v15;
  a2[27] = v19;
  a2[28] = v19 ^ v15 ^ v10;
  a2[29] = v19 ^ v14;
  LODWORD(v7) = t_fl[((unsigned __int16)(v19 ^ v14) >> 8)] ^ t_fl[((v19 ^ v14) >> 16)
                                                                                 + 256] ^ t_fl[((v19 ^ v14) >> 24) + 512] ^ t_fl[(v19 ^ v14) + 768] ^ v7 ^ 0x10;
  a2[30] = v7;
  a2[31] = v7 ^ v18;
  v20 = v7 ^ v15;
  a2[32] = v20;
  a2[33] = v20 ^ v19;
  v21 = v7 ^ v10;
  v22 = v21 ^ v19 ^ v14;
  a2[34] = v21;
  a2[35] = v22;
  v23 = t_fl[BYTE2(v22) + 256] ^ t_fl[BYTE1(v22)] ^ t_fl[HIBYTE(v22) + 512] ^ t_fl[(v21 ^ v19 ^ v14)
                                                                                 + 768] ^ 0x20;
  LODWORD(v7) = v23 ^ v7;
  result = v23 ^ v18;
  a2[36] = v7;
  a2[37] = result;
  a2[38] = result ^ v20;
  a2[39] = result ^ v19;
  v25 = result ^ v14;
  a2[40] = result ^ v19 ^ v21;
  a2[41] = v25;
  LODWORD(v7) = t_fl[BYTE1(v25)] ^ t_fl[BYTE2(v25) + 256] ^ t_fl[HIBYTE(v25) + 512] ^ t_fl[v25 + 768] ^ v7 ^ 0x40;
  a2[42] = v7;
  a2[43] = v7 ^ result;
  v26 = v7 ^ v20;
  a2[44] = v26;
  a2[45] = v26 ^ result ^ v19;
  v27 = v26 ^ v21;
  v28 = v27 ^ v25;
  a2[46] = v27;
  a2[47] = v28;
  v29 = t_fl[BYTE2(v28) + 256] ^ t_fl[BYTE1(v28)] ^ t_fl[HIBYTE(v28) + 512] ^ t_fl[v28 + 768] ^ 0x80;
  a2[48] = v29 ^ v7;
  a2[49] = v29 ^ result;
  a2[50] = v29 ^ result ^ v26;
  a2[51] = v29 ^ v19;
  a2[60] = 12;
  return result;
}

uint64_t ccaes_gladman_encrypt_key256(int *a1, int *a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  uint64_t result;
  int v44;
  int v45;

  v2 = *a1;
  *a2 = *a1;
  v3 = a1[1];
  a2[1] = v3;
  v4 = a1[2];
  a2[2] = v4;
  v5 = a1[3];
  a2[3] = v5;
  v6 = a1[4];
  a2[4] = v6;
  v7 = a1[5];
  a2[5] = v7;
  v8 = a1[6];
  a2[6] = v8;
  v9 = a1[7];
  a2[7] = v9;
  v10 = t_fl[BYTE1(v9)] ^ t_fl[BYTE2(v9) + 256] ^ *(_DWORD *)((char *)&t_fl[512] + ((v9 >> 22) & 0x3FC)) ^ t_fl[v9 + 768] ^ 1 ^ v2;
  a2[8] = v10;
  a2[9] = v10 ^ v3;
  v11 = v10 ^ v3 ^ v4;
  a2[10] = v11;
  a2[11] = v11 ^ v5;
  v12 = t_fl[(v11 ^ v5)] ^ t_fl[((unsigned __int16)(v11 ^ v5) >> 8) + 256] ^ t_fl[((v11 ^ v5) >> 16) + 512] ^ t_fl[((v11 ^ v5) >> 24) + 768] ^ v6;
  a2[12] = v12;
  a2[13] = v12 ^ v7;
  v13 = v12 ^ v7 ^ v8;
  a2[14] = v13;
  a2[15] = v13 ^ v9;
  v14 = t_fl[((v13 ^ v9) >> 16) + 256] ^ t_fl[((unsigned __int16)(v13 ^ v9) >> 8)] ^ t_fl[((v13 ^ v9) >> 24) + 512] ^ t_fl[(v13 ^ v9) + 768] ^ 2;
  v15 = v14 ^ v10;
  v16 = v14 ^ v3;
  a2[16] = v14 ^ v10;
  a2[17] = v16;
  a2[18] = v16 ^ v11;
  a2[19] = v16 ^ v5;
  v17 = t_fl[((unsigned __int16)(v16 ^ v5) >> 8) + 256] ^ t_fl[(v16 ^ v5)] ^ t_fl[((v16 ^ v5) >> 16) + 512] ^ t_fl[((v16 ^ v5) >> 24) + 768];
  v18 = v17 ^ v12;
  v19 = v17 ^ v7;
  a2[20] = v18;
  a2[21] = v19;
  a2[22] = v19 ^ v13;
  a2[23] = v19 ^ v9;
  v20 = t_fl[((unsigned __int16)(v19 ^ v9) >> 8)] ^ t_fl[((v19 ^ v9) >> 16)
                                                                        + 256] ^ t_fl[((v19 ^ v9) >> 24)
                                                                                    + 512] ^ t_fl[(v19 ^ v9)
                                                                                                + 768] ^ v15 ^ 4;
  a2[24] = v20;
  a2[25] = v20 ^ v16;
  v21 = v20 ^ v11;
  v22 = v21 ^ v16 ^ v5;
  a2[26] = v21;
  a2[27] = v22;
  v23 = t_fl[(v21 ^ v16 ^ v5)] ^ t_fl[BYTE1(v22) + 256] ^ t_fl[BYTE2(v22) + 512] ^ t_fl[HIBYTE(v22) + 768] ^ v18;
  a2[28] = v23;
  a2[29] = v23 ^ v19;
  v24 = v23 ^ v13;
  v25 = v24 ^ v19 ^ v9;
  a2[30] = v24;
  a2[31] = v25;
  v26 = t_fl[BYTE2(v25) + 256] ^ t_fl[BYTE1(v25)] ^ t_fl[HIBYTE(v25) + 512] ^ t_fl[(v24 ^ v19 ^ v9)
                                                                                 + 768] ^ 8;
  v27 = v26 ^ v20;
  v28 = v26 ^ v16;
  a2[32] = v27;
  a2[33] = v28;
  v29 = v26 ^ v5;
  a2[34] = v28 ^ v21;
  a2[35] = v29;
  v30 = t_fl[BYTE1(v29) + 256] ^ t_fl[v29] ^ t_fl[BYTE2(v29) + 512] ^ t_fl[HIBYTE(v29) + 768];
  v31 = v30 ^ v23;
  v32 = v30 ^ v19;
  a2[36] = v31;
  a2[37] = v32;
  LODWORD(v9) = v30 ^ v9;
  a2[38] = v32 ^ v24;
  a2[39] = v9;
  v33 = t_fl[BYTE1(v9)] ^ t_fl[BYTE2(v9) + 256] ^ t_fl[BYTE3(v9) + 512] ^ t_fl[v9 + 768] ^ v27 ^ 0x10;
  a2[40] = v33;
  a2[41] = v33 ^ v28;
  v34 = v33 ^ v21;
  a2[42] = v34;
  a2[43] = v34 ^ v29;
  v35 = t_fl[(v34 ^ v29)] ^ t_fl[((unsigned __int16)(v34 ^ v29) >> 8) + 256] ^ t_fl[((v34 ^ v29) >> 16) + 512] ^ t_fl[((v34 ^ v29) >> 24) + 768] ^ v31;
  a2[44] = v35;
  a2[45] = v35 ^ v32;
  v36 = v35 ^ v24;
  a2[46] = v36;
  a2[47] = v36 ^ v9;
  v37 = t_fl[((v36 ^ v9) >> 16) + 256] ^ t_fl[((unsigned __int16)(v36 ^ v9) >> 8)] ^ t_fl[((v36 ^ v9) >> 24) + 512] ^ t_fl[(v36 ^ v9) + 768] ^ 0x20;
  v38 = v37 ^ v33;
  v39 = v37 ^ v28;
  a2[48] = v38;
  a2[49] = v39;
  v40 = v39 ^ v29;
  a2[50] = v39 ^ v34;
  a2[51] = v40;
  v41 = t_fl[BYTE1(v40) + 256] ^ t_fl[v40] ^ t_fl[BYTE2(v40) + 512] ^ t_fl[HIBYTE(v40) + 768];
  v42 = v41 ^ v32;
  a2[52] = v41 ^ v35;
  a2[53] = v42;
  result = v42 ^ v36;
  LODWORD(v9) = v42 ^ v9;
  a2[54] = result;
  a2[55] = v9;
  v44 = t_fl[BYTE1(v9)] ^ t_fl[BYTE2(v9) + 256] ^ t_fl[BYTE3(v9) + 512] ^ t_fl[v9 + 768] ^ v38 ^ 0x40;
  a2[56] = v44;
  a2[57] = v44 ^ v39;
  v45 = v44 ^ v34;
  a2[58] = v45;
  a2[59] = v45 ^ v40;
  a2[60] = 14;
  return result;
}

uint64_t ccaes_gladman_encrypt_key(int *a1, uint64_t a2, int *a3)
{
  uint64_t v3;

  v3 = 4294967289;
  if (a2 <= 127)
  {
    if (a2 != 16)
    {
      if (a2 != 24)
      {
        if (a2 != 32)
          return v3;
        goto LABEL_10;
      }
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  switch(a2)
  {
    case 256:
LABEL_10:
      ccaes_gladman_encrypt_key256(a1, a3);
      return 0;
    case 192:
LABEL_11:
      ccaes_gladman_encrypt_key192(a1, a3);
      return 0;
    case 128:
LABEL_9:
      ccaes_gladman_encrypt_key128(a1, a3);
      return 0;
  }
  return v3;
}

uint64_t ccaes_gladman_decrypt_key128(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  uint64_t result;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;

  v2 = *a1;
  *a2 = *a1;
  v3 = a1[1];
  a2[1] = v3;
  v4 = a1[2];
  a2[2] = v4;
  v5 = a1[3];
  a2[3] = v5;
  v6 = v5 ^ v3;
  v7 = t_fl[BYTE2(v5) + 256] ^ t_fl[BYTE1(v5)] ^ *(_DWORD *)((char *)&t_fl[512] + ((v5 >> 22) & 0x3FC)) ^ t_fl[v5 + 768] ^ 1;
  v8 = v5 ^ v3 ^ v2 ^ v4;
  v9 = t_im[((unsigned __int16)(v7 ^ v2) >> 8) + 256] ^ t_im[(v7 ^ v2)] ^ dword_1DEE271E8[((v7 ^ v2) >> 16)] ^ dword_1DEE271E8[((v7 ^ v2) >> 24) + 256];
  a2[4] = v9;
  v10 = v7 ^ v2 ^ v3;
  v11 = v8 ^ v7;
  v12 = t_im[BYTE1(v10) + 256] ^ t_im[v10] ^ dword_1DEE271E8[BYTE2(v10)] ^ dword_1DEE271E8[HIBYTE(v10) + 256];
  a2[5] = v12;
  v13 = v10 ^ v4;
  v14 = t_im[BYTE1(v13) + 256] ^ t_im[v13] ^ dword_1DEE271E8[BYTE2(v13)] ^ dword_1DEE271E8[HIBYTE(v13) + 256];
  a2[6] = v14;
  v15 = t_im[((unsigned __int16)(v13 ^ v5) >> 8) + 256] ^ t_im[(v13 ^ v5)] ^ dword_1DEE271E8[((v13 ^ v5) >> 16)] ^ dword_1DEE271E8[((v13 ^ v5) >> 24) + 256];
  a2[7] = v15;
  v16 = t_fl[BYTE2(v11) + 256] ^ t_fl[BYTE1(v11)] ^ t_fl[HIBYTE(v11) + 512] ^ t_fl[v11 + 768] ^ 2;
  v17 = v6 ^ v16;
  v18 = t_im[(LOBYTE(t_fl[BYTE2(v11) + 256]) ^ LOBYTE(t_fl[BYTE1(v11)]) ^ LOBYTE(t_fl[HIBYTE(v11) + 512]) ^ LOBYTE(t_fl[v11 + 768])) ^ 2] ^ t_im[BYTE1(v16) + 256] ^ dword_1DEE271E8[BYTE2(v16)] ^ dword_1DEE271E8[HIBYTE(v16) + 256] ^ v9;
  a2[8] = v18;
  a2[9] = v18 ^ v12;
  v19 = v18 ^ v12 ^ v14;
  a2[10] = v19;
  a2[11] = v19 ^ v15;
  v20 = t_fl[BYTE2(v17) + 256] ^ t_fl[BYTE1(v17)] ^ t_fl[HIBYTE(v17) + 512] ^ t_fl[v17 + 768] ^ 4;
  v21 = v5 ^ v4 ^ v20;
  v22 = t_im[BYTE1(v20) + 256] ^ t_im[(LOBYTE(t_fl[BYTE2(v17) + 256]) ^ LOBYTE(t_fl[BYTE1(v17)]) ^ LOBYTE(t_fl[HIBYTE(v17) + 512]) ^ LOBYTE(t_fl[v17 + 768])) ^ 4] ^ dword_1DEE271E8[BYTE2(v20)] ^ dword_1DEE271E8[HIBYTE(v20) + 256];
  v23 = v22 ^ v18;
  v24 = v22 ^ v12;
  a2[12] = v23;
  a2[13] = v22 ^ v12;
  a2[14] = v22 ^ v12 ^ v19;
  a2[15] = v22 ^ v12 ^ v15;
  v25 = t_fl[BYTE2(v21) + 256] ^ t_fl[BYTE1(v21)] ^ t_fl[HIBYTE(v21) + 512] ^ t_fl[v21 + 768] ^ 8;
  v26 = v25 ^ v5;
  LODWORD(v5) = t_im[(LOBYTE(t_fl[BYTE2(v21) + 256]) ^ LOBYTE(t_fl[BYTE1(v21)]) ^ LOBYTE(t_fl[HIBYTE(v21) + 512]) ^ LOBYTE(t_fl[v21 + 768])) ^ 8] ^ t_im[BYTE1(v25) + 256] ^ dword_1DEE271E8[BYTE2(v25)] ^ dword_1DEE271E8[HIBYTE(v25) + 256] ^ v23;
  a2[16] = v5;
  a2[17] = v5 ^ v24;
  v27 = v5 ^ v19;
  a2[18] = v27;
  a2[19] = v27 ^ v24 ^ v15;
  v28 = t_fl[BYTE2(v26) + 256] ^ t_fl[BYTE1(v26)] ^ t_fl[HIBYTE(v26) + 512] ^ t_fl[v26 + 768] ^ 0x10;
  v29 = v28 ^ v11;
  v30 = t_im[BYTE1(v28) + 256] ^ t_im[(LOBYTE(t_fl[BYTE2(v26) + 256]) ^ LOBYTE(t_fl[BYTE1(v26)]) ^ LOBYTE(t_fl[HIBYTE(v26) + 512]) ^ LOBYTE(t_fl[v26 + 768])) ^ 0x10] ^ dword_1DEE271E8[BYTE2(v28)] ^ dword_1DEE271E8[HIBYTE(v28) + 256];
  v31 = v30 ^ v5;
  v32 = v30 ^ v24;
  a2[20] = v30 ^ v5;
  a2[21] = v32;
  LODWORD(v5) = v30 ^ v15;
  a2[22] = v32 ^ v27;
  a2[23] = v30 ^ v15;
  v33 = t_fl[BYTE2(v29) + 256] ^ t_fl[BYTE1(v29)] ^ t_fl[HIBYTE(v29) + 512] ^ t_fl[v29 + 768] ^ 0x20;
  result = v33 ^ v17;
  v35 = t_im[(LOBYTE(t_fl[BYTE2(v29) + 256]) ^ LOBYTE(t_fl[BYTE1(v29)]) ^ LOBYTE(t_fl[HIBYTE(v29) + 512]) ^ LOBYTE(t_fl[v29 + 768])) ^ 0x20] ^ t_im[BYTE1(v33) + 256] ^ dword_1DEE271E8[BYTE2(v33)] ^ dword_1DEE271E8[HIBYTE(v33) + 256] ^ v31;
  a2[24] = v35;
  a2[25] = v35 ^ v32;
  v36 = v35 ^ v27;
  a2[26] = v35 ^ v27;
  a2[27] = v35 ^ v27 ^ v5;
  v37 = t_fl[BYTE2(result) + 256] ^ t_fl[BYTE1(result)] ^ t_fl[BYTE3(result) + 512] ^ t_fl[result + 768] ^ 0x40;
  v38 = v37 ^ v21;
  v39 = t_im[BYTE1(v37) + 256] ^ t_im[(LOBYTE(t_fl[BYTE2(result) + 256]) ^ LOBYTE(t_fl[BYTE1(result)]) ^ LOBYTE(t_fl[BYTE3(result) + 512]) ^ LOBYTE(t_fl[result + 768])) ^ 0x40] ^ dword_1DEE271E8[BYTE2(v37)] ^ dword_1DEE271E8[HIBYTE(v37) + 256];
  v40 = v39 ^ v35;
  v41 = v39 ^ v32;
  a2[28] = v40;
  a2[29] = v39 ^ v32;
  a2[30] = v39 ^ v32 ^ v36;
  a2[31] = v39 ^ v32 ^ v5;
  v42 = t_fl[BYTE2(v38) + 256] ^ t_fl[BYTE1(v38)] ^ t_fl[HIBYTE(v38) + 512] ^ t_fl[v38 + 768] ^ 0x80;
  v43 = v42 ^ v26;
  v44 = t_im[(LOBYTE(t_fl[BYTE2(v38) + 256]) ^ LOBYTE(t_fl[BYTE1(v38)]) ^ LOBYTE(t_fl[HIBYTE(v38) + 512]) ^ LOBYTE(t_fl[v38 + 768])) ^ 0x80] ^ t_im[BYTE1(v42) + 256] ^ dword_1DEE271E8[BYTE2(v42)] ^ dword_1DEE271E8[HIBYTE(v42) + 256] ^ v40;
  a2[32] = v44;
  a2[33] = v44 ^ v41;
  v45 = v44 ^ v36;
  a2[34] = v45;
  a2[35] = v45 ^ v41 ^ v5;
  v46 = t_fl[BYTE2(v43) + 256] ^ t_fl[BYTE1(v43)] ^ t_fl[HIBYTE(v43) + 512] ^ t_fl[v43 + 768] ^ 0x1B;
  v47 = v46 ^ v29;
  v48 = t_im[BYTE1(v46) + 256] ^ t_im[(LOBYTE(t_fl[BYTE2(v43) + 256]) ^ LOBYTE(t_fl[BYTE1(v43)]) ^ LOBYTE(t_fl[HIBYTE(v43) + 512]) ^ LOBYTE(t_fl[v43 + 768])) ^ 0x1B] ^ dword_1DEE271E8[BYTE2(v46)] ^ dword_1DEE271E8[HIBYTE(v46) + 256];
  a2[36] = v48 ^ v44;
  a2[37] = v48 ^ v41;
  a2[38] = v48 ^ v41 ^ v45;
  a2[39] = v48 ^ v5;
  v49 = t_fl[BYTE1(v47)] ^ t_fl[BYTE2(v47) + 256] ^ t_fl[HIBYTE(v47) + 512] ^ t_fl[v47 + 768] ^ result ^ 0x36;
  a2[40] = v43 ^ v38 ^ v49 ^ v47;
  a2[41] = v49 ^ v43;
  a2[42] = v49 ^ v47;
  a2[43] = v49;
  a2[60] = 10;
  return result;
}

uint64_t ccaes_gladman_decrypt_key192(int *a1, int *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t result;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;

  v2 = *a1;
  *a2 = *a1;
  v3 = a1[1];
  a2[1] = v3;
  v4 = a1[2];
  a2[2] = v4;
  v5 = a1[3];
  a2[3] = v5;
  v7 = a1[4];
  v6 = a1[5];
  a2[4] = t_im[BYTE1(v7) + 256] ^ t_im[v7] ^ dword_1DEE271E8[BYTE2(v7)] ^ *(_DWORD *)((char *)&dword_1DEE271E8[256] + ((v7 >> 22) & 0x3FC));
  v8 = (v6 >> 22) & 0x3FC;
  a2[5] = t_im[BYTE1(v6) + 256] ^ t_im[v6] ^ dword_1DEE271E8[BYTE2(v6)] ^ *(_DWORD *)((char *)&dword_1DEE271E8[256] + v8);
  v9 = t_fl[BYTE1(v6)] ^ t_fl[BYTE2(v6) + 256] ^ *(_DWORD *)((char *)&t_fl[512] + v8) ^ t_fl[v6 + 768] ^ 1 ^ v2;
  v10 = t_im[BYTE1(v9) + 256] ^ t_im[v9] ^ dword_1DEE271E8[BYTE2(v9)] ^ dword_1DEE271E8[HIBYTE(v9) + 256];
  a2[6] = v10;
  v11 = t_im[((unsigned __int16)(v9 ^ v3) >> 8) + 256] ^ t_im[(v9 ^ v3)] ^ dword_1DEE271E8[((v9 ^ v3) >> 16)] ^ dword_1DEE271E8[((v9 ^ v3) >> 24) + 256];
  a2[7] = v11;
  v12 = v9 ^ v3 ^ v4;
  v13 = t_im[BYTE1(v12) + 256] ^ t_im[(v9 ^ v3 ^ v4)] ^ dword_1DEE271E8[BYTE2(v12)] ^ dword_1DEE271E8[HIBYTE(v12) + 256];
  a2[8] = v13;
  v14 = t_im[((unsigned __int16)(v12 ^ v5) >> 8) + 256] ^ t_im[(v12 ^ v5)] ^ dword_1DEE271E8[((v12 ^ v5) >> 16)] ^ dword_1DEE271E8[((v12 ^ v5) >> 24) + 256];
  a2[9] = v14;
  LODWORD(v7) = v12 ^ v5 ^ v7;
  v15 = t_im[BYTE1(v7) + 256] ^ t_im[v7] ^ dword_1DEE271E8[BYTE2(v7)] ^ dword_1DEE271E8[BYTE3(v7) + 256];
  a2[10] = v15;
  v16 = (v7 ^ v6) >> 24;
  v17 = t_im[((unsigned __int16)(v7 ^ v6) >> 8) + 256] ^ t_im[(v7 ^ v6)] ^ dword_1DEE271E8[((v7 ^ v6) >> 16)] ^ dword_1DEE271E8[v16 + 256];
  a2[11] = v17;
  v18 = t_fl[((v7 ^ v6) >> 16) + 256] ^ t_fl[((unsigned __int16)(v7 ^ v6) >> 8)] ^ t_fl[v16 + 512] ^ t_fl[(v7 ^ v6) + 768] ^ 2;
  v19 = v18 ^ v9;
  v20 = t_im[v18] ^ t_im[BYTE1(v18) + 256] ^ dword_1DEE271E8[BYTE2(v18)] ^ dword_1DEE271E8[HIBYTE(v18) + 256] ^ v10;
  v21 = v18 ^ v3;
  a2[12] = v20;
  a2[13] = v20 ^ v11;
  v22 = v20 ^ v11 ^ v13;
  a2[14] = v22;
  a2[15] = v22 ^ v14;
  v23 = v22 ^ v14 ^ v15;
  v24 = v6 ^ v5 ^ v21;
  a2[16] = v23;
  a2[17] = v23 ^ v17;
  LODWORD(v6) = t_fl[BYTE2(v24) + 256] ^ t_fl[((unsigned __int16)(v6 ^ v5 ^ v21) >> 8)] ^ t_fl[HIBYTE(v24) + 512] ^ t_fl[(v6 ^ v5 ^ v21) + 768] ^ 4;
  v25 = v19 ^ v6;
  LODWORD(v6) = t_im[BYTE1(v6) + 256] ^ t_im[v6] ^ dword_1DEE271E8[BYTE2(v6)] ^ dword_1DEE271E8[BYTE3(v6) + 256];
  v26 = v6 ^ v20;
  v27 = v6 ^ v11;
  a2[18] = v6 ^ v20;
  a2[19] = v27;
  v28 = v25 ^ v12;
  a2[20] = v27 ^ v22;
  a2[21] = v27 ^ v14;
  result = v27 ^ v14 ^ v17;
  a2[22] = v27 ^ v14 ^ v23;
  a2[23] = result;
  v30 = t_fl[((v24 ^ v7 ^ v28) >> 16) + 256] ^ t_fl[((unsigned __int16)(v24 ^ v7 ^ v28) >> 8)] ^ t_fl[((v24 ^ v7 ^ v28) >> 24) + 512] ^ t_fl[(v24 ^ v7 ^ v28) + 768] ^ 8;
  v31 = t_im[(LOBYTE(t_fl[((v24 ^ v7 ^ v28) >> 16) + 256]) ^ LOBYTE(t_fl[((unsigned __int16)(v24 ^ v7 ^ v28) >> 8)]) ^ LOBYTE(t_fl[((v24 ^ v7 ^ v28) >> 24) + 512]) ^ LOBYTE(t_fl[(v24 ^ v7 ^ v28) + 768])) ^ 8] ^ t_im[BYTE1(v30) + 256] ^ dword_1DEE271E8[BYTE2(v30)] ^ dword_1DEE271E8[HIBYTE(v30) + 256] ^ v26;
  v32 = v30 ^ v21;
  a2[24] = v31;
  a2[25] = v31 ^ v27;
  v33 = v31 ^ v22;
  v34 = v30 ^ v5;
  a2[26] = v33;
  a2[27] = v33 ^ v27 ^ v14;
  a2[28] = v33 ^ v23;
  a2[29] = v33 ^ v23 ^ result;
  v35 = t_fl[((v34 ^ v24) >> 16) + 256] ^ t_fl[((unsigned __int16)(v34 ^ v24) >> 8)] ^ t_fl[((v34 ^ v24) >> 24) + 512] ^ t_fl[(v34 ^ v24) + 768] ^ 0x10;
  v36 = v30 ^ v25 ^ v35;
  v37 = t_im[BYTE1(v35) + 256] ^ t_im[(LOBYTE(t_fl[((v34 ^ v24) >> 16) + 256]) ^ LOBYTE(t_fl[((unsigned __int16)(v34 ^ v24) >> 8)]) ^ LOBYTE(t_fl[((v34 ^ v24) >> 24) + 512]) ^ LOBYTE(t_fl[(v34 ^ v24) + 768])) ^ 0x10] ^ dword_1DEE271E8[BYTE2(v35)] ^ dword_1DEE271E8[HIBYTE(v35) + 256];
  v38 = v37 ^ v31;
  v39 = v37 ^ v27;
  a2[30] = v38;
  a2[31] = v39;
  v40 = v37 ^ v14;
  a2[32] = v39 ^ v33;
  a2[33] = v40;
  LODWORD(v7) = v36 ^ v7;
  a2[34] = v40 ^ v33 ^ v23;
  a2[35] = v40 ^ result;
  v41 = v36 ^ v28;
  v42 = t_fl[((v7 ^ v34 ^ v24) >> 16) + 256] ^ t_fl[((unsigned __int16)(v7 ^ v34 ^ v24) >> 8)] ^ t_fl[((v7 ^ v34 ^ v24) >> 24) + 512] ^ t_fl[(v7 ^ v34 ^ v24) + 768] ^ 0x20;
  v43 = t_im[(LOBYTE(t_fl[((v7 ^ v34 ^ v24) >> 16) + 256]) ^ LOBYTE(t_fl[((unsigned __int16)(v7 ^ v34 ^ v24) >> 8)]) ^ LOBYTE(t_fl[((v7 ^ v34 ^ v24) >> 24) + 512]) ^ LOBYTE(t_fl[(v7 ^ v34 ^ v24) + 768])) ^ 0x20] ^ t_im[BYTE1(v42) + 256] ^ dword_1DEE271E8[BYTE2(v42)] ^ dword_1DEE271E8[HIBYTE(v42) + 256] ^ v38;
  v44 = v32 ^ v42;
  a2[36] = v43;
  a2[37] = v43 ^ v39;
  v45 = v43 ^ v33;
  a2[38] = v45;
  a2[39] = v45 ^ v40;
  v46 = v43 ^ v23;
  v47 = v44 ^ v24;
  a2[40] = v46;
  a2[41] = v46 ^ v40 ^ result;
  v48 = t_fl[BYTE2(v47) + 256] ^ t_fl[BYTE1(v47)] ^ t_fl[HIBYTE(v47) + 512] ^ t_fl[v47 + 768] ^ 0x40;
  v49 = v42 ^ v36 ^ v48;
  v50 = t_im[BYTE1(v48) + 256] ^ t_im[(LOBYTE(t_fl[BYTE2(v47) + 256]) ^ LOBYTE(t_fl[BYTE1(v47)]) ^ LOBYTE(t_fl[HIBYTE(v47) + 512]) ^ LOBYTE(t_fl[v47 + 768])) ^ 0x40] ^ dword_1DEE271E8[BYTE2(v48)] ^ dword_1DEE271E8[HIBYTE(v48) + 256];
  v51 = v50 ^ v43;
  v52 = v50 ^ v39;
  a2[42] = v51;
  a2[43] = v52;
  a2[44] = v52 ^ v45;
  a2[45] = v52 ^ v40;
  a2[46] = v52 ^ v40 ^ v46;
  a2[47] = v52 ^ result;
  v53 = t_fl[((v47 ^ v7 ^ v41 ^ v49) >> 16) + 256] ^ t_fl[((unsigned __int16)(v47 ^ v7 ^ v41 ^ v49) >> 8)] ^ t_fl[((v47 ^ v7 ^ v41 ^ v49) >> 24) + 512] ^ t_fl[(v47 ^ v7 ^ v41 ^ v49) + 768] ^ 0x80;
  a2[48] = v53 ^ v49;
  a2[49] = v53 ^ v44;
  a2[50] = v53 ^ v44 ^ v41 ^ v49;
  a2[51] = v53 ^ v34;
  a2[60] = 12;
  return result;
}

uint64_t ccaes_gladman_decrypt_key256(int *a1, int *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  uint64_t result;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;

  v2 = *a1;
  *a2 = *a1;
  v3 = a1[1];
  a2[1] = v3;
  v4 = v3;
  v60 = v3;
  v5 = a1[2];
  a2[2] = v5;
  v6 = a1[3];
  a2[3] = v6;
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  v10 = a1[7];
  a2[4] = t_im[BYTE1(v7) + 256] ^ t_im[a1[4]] ^ dword_1DEE271E8[BYTE2(v7)] ^ *(_DWORD *)((char *)&dword_1DEE271E8[256] + ((v7 >> 22) & 0x3FC));
  a2[5] = t_im[BYTE1(v8) + 256] ^ t_im[v8] ^ dword_1DEE271E8[BYTE2(v8)] ^ *(_DWORD *)((char *)&dword_1DEE271E8[256] + ((v8 >> 22) & 0x3FC));
  a2[6] = t_im[BYTE1(v9) + 256] ^ t_im[v9] ^ dword_1DEE271E8[BYTE2(v9)] ^ *(_DWORD *)((char *)&dword_1DEE271E8[256] + ((v9 >> 22) & 0x3FC));
  v65 = v10;
  v11 = (v10 >> 22) & 0x3FC;
  a2[7] = t_im[BYTE1(v10) + 256] ^ t_im[v10] ^ dword_1DEE271E8[BYTE2(v10)] ^ *(_DWORD *)((char *)&dword_1DEE271E8[256] + v11);
  v12 = t_fl[BYTE1(v10)] ^ t_fl[BYTE2(v10) + 256] ^ *(_DWORD *)((char *)&t_fl[512] + v11) ^ t_fl[v10
                                                                                               + 768] ^ 1 ^ v2;
  v13 = t_im[BYTE1(v12) + 256] ^ t_im[v12] ^ dword_1DEE271E8[BYTE2(v12)] ^ dword_1DEE271E8[HIBYTE(v12) + 256];
  a2[8] = v13;
  v63 = t_im[((unsigned __int16)(v12 ^ v4) >> 8) + 256] ^ t_im[(v12 ^ v4)] ^ dword_1DEE271E8[((v12 ^ v4) >> 16)] ^ dword_1DEE271E8[((v12 ^ v4) >> 24) + 256];
  a2[9] = v63;
  v14 = v12 ^ v4 ^ v5;
  v15 = t_im[BYTE1(v14) + 256] ^ t_im[v14] ^ dword_1DEE271E8[BYTE2(v14)] ^ dword_1DEE271E8[HIBYTE(v14) + 256];
  a2[10] = v15;
  v57 = v6;
  v16 = (v14 ^ v6) >> 24;
  v62 = t_im[((unsigned __int16)(v14 ^ v6) >> 8) + 256] ^ t_im[(v14 ^ v6)] ^ dword_1DEE271E8[((v14 ^ v6) >> 16)] ^ dword_1DEE271E8[v16 + 256];
  a2[11] = v62;
  v17 = t_fl[(v14 ^ v6)] ^ t_fl[((unsigned __int16)(v14 ^ v6) >> 8) + 256] ^ t_fl[((v14 ^ v6) >> 16) + 512] ^ t_fl[v16 + 768] ^ v7;
  LODWORD(v11) = t_im[BYTE1(v17) + 256] ^ t_im[(LOBYTE(t_fl[(v14 ^ v6)]) ^ LOBYTE(t_fl[((unsigned __int16)(v14 ^ v6) >> 8) + 256]) ^ LOBYTE(t_fl[((v14 ^ v6) >> 16) + 512]) ^ LOBYTE(t_fl[v16 + 768]) ^ v7)] ^ dword_1DEE271E8[BYTE2(v17)] ^ dword_1DEE271E8[HIBYTE(v17) + 256];
  a2[12] = v11;
  LODWORD(v7) = v17 ^ v8;
  v18 = t_im[((unsigned __int16)(v17 ^ v8) >> 8) + 256] ^ t_im[(v17 ^ v8)] ^ dword_1DEE271E8[((v17 ^ v8) >> 16)] ^ dword_1DEE271E8[((v17 ^ v8) >> 24) + 256];
  a2[13] = v18;
  v55 = v18;
  v19 = t_im[((unsigned __int16)(v7 ^ v9) >> 8) + 256] ^ t_im[(v7 ^ v9)] ^ dword_1DEE271E8[((v7 ^ v9) >> 16)] ^ dword_1DEE271E8[((v7 ^ v9) >> 24) + 256];
  a2[14] = v19;
  v59 = v17 ^ v8 ^ v9 ^ v10;
  v64 = t_im[BYTE1(v59) + 256] ^ t_im[(v17 ^ v8 ^ v9 ^ v10)] ^ dword_1DEE271E8[BYTE2(v59)] ^ dword_1DEE271E8[HIBYTE(v59) + 256];
  a2[15] = v64;
  v20 = t_fl[BYTE2(v59) + 256] ^ t_fl[BYTE1(v59)] ^ t_fl[HIBYTE(v59) + 512] ^ t_fl[(v17 ^ v8 ^ v9 ^ v10)
                                                                                 + 768] ^ 2;
  v21 = t_im[v20] ^ t_im[BYTE1(v20) + 256] ^ dword_1DEE271E8[BYTE2(v20)] ^ dword_1DEE271E8[HIBYTE(v20) + 256] ^ v13;
  v61 = v20 ^ v60;
  a2[16] = v21;
  a2[17] = v21 ^ v63;
  v22 = v61 ^ v6;
  v56 = v21 ^ v63 ^ v15;
  a2[18] = v56;
  a2[19] = v56 ^ v62;
  v23 = t_fl[(v61 ^ v6)];
  v24 = t_fl[BYTE1(v22) + 256] ^ v23 ^ t_fl[BYTE2(v22) + 512] ^ t_fl[HIBYTE(v22) + 768];
  v25 = t_im[(LOBYTE(t_fl[BYTE1(v22) + 256]) ^ v23 ^ LOBYTE(t_fl[BYTE2(v22) + 512]) ^ LOBYTE(t_fl[HIBYTE(v22) + 768]))] ^ t_im[BYTE1(v24) + 256] ^ dword_1DEE271E8[BYTE2(v24)] ^ dword_1DEE271E8[HIBYTE(v24) + 256] ^ v11;
  a2[20] = v25;
  a2[21] = v25 ^ v18;
  v26 = v25 ^ v18 ^ v19;
  a2[22] = v26;
  a2[23] = v26 ^ v64;
  v58 = v24 ^ v8 ^ v10;
  LODWORD(v10) = t_fl[BYTE2(v58) + 256] ^ t_fl[BYTE1(v58)] ^ t_fl[HIBYTE(v58) + 512] ^ t_fl[v58 + 768] ^ 4;
  v27 = v20 ^ v12 ^ v10;
  LODWORD(v10) = t_im[BYTE1(v10) + 256] ^ t_im[v10] ^ dword_1DEE271E8[BYTE2(v10)] ^ dword_1DEE271E8[BYTE3(v10) + 256];
  v28 = v10 ^ v21;
  v29 = v10 ^ v63;
  a2[25] = v10 ^ v63;
  a2[26] = v10 ^ v63 ^ v56;
  a2[24] = v10 ^ v21;
  v30 = v27 ^ v14;
  a2[27] = v10 ^ v63 ^ v62;
  LODWORD(v10) = t_fl[((unsigned __int16)(v27 ^ v14 ^ v22) >> 8) + 256] ^ t_fl[(v27 ^ v14 ^ v22)] ^ t_fl[((v30 ^ v22) >> 16) + 512] ^ t_fl[((v30 ^ v22) >> 24) + 768];
  v31 = v24 ^ v17;
  v32 = t_im[BYTE1(v10) + 256] ^ t_im[(LOBYTE(t_fl[((unsigned __int16)(v27 ^ v14 ^ v22) >> 8)
                                                                  + 256]) ^ LOBYTE(t_fl[(v27 ^ v14 ^ v22)]) ^ LOBYTE(t_fl[((v30 ^ v22) >> 16) + 512]) ^ LOBYTE(t_fl[((v30 ^ v22) >> 24) + 768]))] ^ dword_1DEE271E8[BYTE2(v10)] ^ dword_1DEE271E8[BYTE3(v10) + 256];
  v33 = v32 ^ v25;
  v34 = v32 ^ v55;
  a2[28] = v33;
  a2[29] = v32 ^ v55;
  LODWORD(v10) = v31 ^ v7 ^ v9 ^ v58 ^ v10;
  v35 = v32 ^ v55 ^ v64;
  a2[30] = v32 ^ v55 ^ v26;
  a2[31] = v35;
  v36 = t_fl[BYTE2(v10) + 256] ^ t_fl[BYTE1(v10)] ^ t_fl[BYTE3(v10) + 512] ^ t_fl[v10 + 768] ^ 8;
  v37 = t_im[(LOBYTE(t_fl[BYTE2(v10) + 256]) ^ LOBYTE(t_fl[BYTE1(v10)]) ^ LOBYTE(t_fl[BYTE3(v10) + 512]) ^ LOBYTE(t_fl[v10 + 768])) ^ 8] ^ t_im[BYTE1(v36) + 256] ^ dword_1DEE271E8[BYTE2(v36)] ^ dword_1DEE271E8[HIBYTE(v36) + 256] ^ v28;
  a2[32] = v37;
  a2[33] = v37 ^ v29;
  v38 = v36 ^ v57;
  a2[34] = v37 ^ v56;
  a2[35] = v37 ^ v56 ^ v29 ^ v62;
  LODWORD(v10) = t_fl[((unsigned __int16)(v36 ^ v57) >> 8) + 256] ^ t_fl[(v36 ^ v57)] ^ t_fl[((v36 ^ v57) >> 16) + 512] ^ t_fl[((v36 ^ v57) >> 24) + 768];
  v39 = t_im[(LOBYTE(t_fl[BYTE1(v38) + 256]) ^ LOBYTE(t_fl[v38]) ^ LOBYTE(t_fl[BYTE2(v38) + 512]) ^ LOBYTE(t_fl[HIBYTE(v38) + 768]))] ^ t_im[BYTE1(v10) + 256] ^ dword_1DEE271E8[BYTE2(v10)] ^ dword_1DEE271E8[BYTE3(v10) + 256] ^ v33;
  a2[36] = v39;
  a2[37] = v39 ^ v34;
  v40 = v39 ^ v26;
  v41 = v10 ^ v65;
  a2[38] = v39 ^ v26;
  a2[39] = v39 ^ v26 ^ v35;
  LODWORD(v10) = t_fl[((v10 ^ v65) >> 16) + 256] ^ t_fl[((unsigned __int16)(v10 ^ v65) >> 8)] ^ t_fl[((v10 ^ v65) >> 24) + 512] ^ t_fl[(v10 ^ v65) + 768] ^ 0x10;
  result = v36 ^ v27 ^ v10;
  LODWORD(v10) = t_im[BYTE1(v10) + 256] ^ t_im[(LOBYTE(t_fl[BYTE2(v41) + 256]) ^ LOBYTE(t_fl[BYTE1(v41)]) ^ LOBYTE(t_fl[HIBYTE(v41) + 512]) ^ LOBYTE(t_fl[v41 + 768])) ^ 0x10] ^ dword_1DEE271E8[BYTE2(v10)] ^ dword_1DEE271E8[BYTE3(v10) + 256];
  v43 = v10 ^ v37;
  LODWORD(v8) = v10 ^ v29;
  a2[40] = v10 ^ v37;
  a2[41] = v10 ^ v29;
  v44 = v10 ^ v29 ^ v37 ^ v56;
  LODWORD(v10) = v10 ^ v62;
  a2[42] = v44;
  a2[43] = v10;
  v45 = t_fl[((unsigned __int16)(v38 ^ v30 ^ result) >> 8) + 256] ^ t_fl[(v38 ^ v30 ^ result)] ^ t_fl[((v38 ^ v30 ^ result) >> 16) + 512] ^ t_fl[((v38 ^ v30 ^ result) >> 24) + 768];
  v46 = t_im[BYTE1(v45) + 256] ^ t_im[(LOBYTE(t_fl[((unsigned __int16)(v38 ^ v30 ^ result) >> 8)
                                                                  + 256]) ^ LOBYTE(t_fl[(v38 ^ v30 ^ result)]) ^ LOBYTE(t_fl[((v38 ^ v30 ^ result) >> 16) + 512]) ^ LOBYTE(t_fl[((v38 ^ v30 ^ result) >> 24) + 768]))] ^ dword_1DEE271E8[BYTE2(v45)] ^ dword_1DEE271E8[HIBYTE(v45) + 256];
  v47 = v46 ^ v39;
  v48 = v46 ^ v34;
  a2[44] = v47;
  a2[45] = v48;
  LODWORD(v7) = v59 ^ v45;
  a2[46] = v48 ^ v40;
  a2[47] = v46 ^ v64;
  v49 = t_fl[((v59 ^ v45) >> 16) + 256] ^ t_fl[((unsigned __int16)(v59 ^ v45) >> 8)] ^ t_fl[((v59 ^ v45) >> 24) + 512] ^ t_fl[(v59 ^ v45) + 768] ^ 0x20;
  v50 = t_im[(LOBYTE(t_fl[BYTE2(v7) + 256]) ^ LOBYTE(t_fl[BYTE1(v7)]) ^ LOBYTE(t_fl[BYTE3(v7) + 512]) ^ LOBYTE(t_fl[v7 + 768])) ^ 0x20] ^ t_im[BYTE1(v49) + 256] ^ dword_1DEE271E8[BYTE2(v49)] ^ dword_1DEE271E8[HIBYTE(v49) + 256] ^ v43;
  a2[48] = v50;
  a2[49] = v50 ^ v8;
  LODWORD(v8) = v36 ^ v61 ^ v49;
  v51 = v50 ^ v37 ^ v56;
  v52 = v8 ^ v36 ^ v57;
  a2[50] = v51;
  a2[51] = v51 ^ v10;
  LODWORD(v7) = t_fl[HIBYTE(v52) + 768];
  LODWORD(v10) = t_fl[((unsigned __int16)(v36 ^ v61 ^ v49 ^ v36 ^ v57) >> 8) + 256] ^ t_fl[(v36 ^ v61 ^ v49 ^ v36 ^ v57)] ^ t_fl[BYTE2(v52) + 512] ^ v7;
  v53 = t_im[(LOBYTE(t_fl[BYTE1(v52) + 256]) ^ LOBYTE(t_fl[v52]) ^ LOBYTE(t_fl[BYTE2(v52) + 512]) ^ v7)] ^ t_im[BYTE1(v10) + 256] ^ dword_1DEE271E8[BYTE2(v10)] ^ dword_1DEE271E8[BYTE3(v10) + 256] ^ v47;
  a2[52] = v53;
  a2[53] = v53 ^ v48;
  v54 = v53 ^ v40;
  a2[54] = v54;
  a2[55] = v54 ^ v46 ^ v64;
  LODWORD(v10) = t_fl[((unsigned __int16)(v58 ^ v10) >> 8)] ^ t_fl[((v58 ^ v10) >> 16)
                                                                                  + 256] ^ t_fl[((v58 ^ v10) >> 24)
                                                                                              + 512] ^ t_fl[(v58 ^ v10) + 768] ^ v49 ^ 0x40;
  a2[56] = v10 ^ result;
  a2[57] = v10 ^ result ^ v8;
  a2[58] = v10 ^ v30;
  a2[59] = v10 ^ v30 ^ v52;
  a2[60] = 14;
  return result;
}

uint64_t ccaes_gladman_decrypt_key(int *a1, uint64_t a2, int *a3)
{
  uint64_t v3;

  v3 = 4294967289;
  if (a2 <= 127)
  {
    if (a2 != 16)
    {
      if (a2 != 24)
      {
        if (a2 != 32)
          return v3;
        goto LABEL_10;
      }
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  switch(a2)
  {
    case 256:
LABEL_10:
      ccaes_gladman_decrypt_key256(a1, a3);
      return 0;
    case 192:
LABEL_11:
      ccaes_gladman_decrypt_key192(a1, a3);
      return 0;
    case 128:
LABEL_9:
      ccaes_gladman_decrypt_key128((unsigned int *)a1, (unsigned int *)a3);
      return 0;
  }
  return v3;
}

uint64_t done(char *__s)
{
  uint64_t result;

  cc_clear(0x20uLL, __s);
  result = cc_clear(0x10uLL, __s + 32);
  *((_QWORD *)__s + 6) = -1;
  return result;
}

BOOL must_reseed(uint64_t a1)
{
  return *(_DWORD *)(a1 + 72) && *(_QWORD *)(a1 + 48) > 0x1000000000000uLL;
}

uint64_t ccrsa_get_fullkey_components(unint64_t *a1, uint64_t a2, unint64_t *a3, uint64_t a4, unint64_t *a5, uint64_t a6, unint64_t *a7, uint64_t a8, unint64_t *a9)
{
  char v16;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  char v41;

  v16 = 0;
  v41 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v16 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v16 = 1;
    }
  }
  v41 = v16;
  v22 = *a1;
  v23 = ccrsa_ctx_private_zp(a1);
  v24 = cczp_n(v23);
  v25 = ccrsa_ctx_private_zp(a1);
  v26 = (unint64_t *)cczp_prime(v25);
  v27 = ccn_write_uint_size(v24, v26);
  if (v27 > *a7)
    goto LABEL_9;
  *a7 = v27;
  ccn_write_uint(v24, v26, v27, a6);
  v28 = ccrsa_ctx_private_zp(a1);
  v29 = (_QWORD *)ccrsa_ctx_private_zp(a1);
  v30 = cczp_n(v28 + 16 * *v29 + 32);
  v31 = ccrsa_ctx_private_zp(a1);
  v32 = (_QWORD *)ccrsa_ctx_private_zp(a1);
  v33 = (unint64_t *)cczp_prime(v31 + 16 * *v32 + 32);
  v34 = ccn_write_uint_size(v30, v33);
  if (v34 > *a9)
    goto LABEL_9;
  *a9 = v34;
  ccn_write_uint(v30, v33, v34, a8);
  v35 = ccn_write_uint_size(v22, a1 + 3);
  if (v35 <= *a3
    && (*a3 = v35,
        ccn_write_uint(v22, a1 + 3, v35, a2),
        v36 = &a1[3 * *a1 + 4],
        v37 = ccn_write_uint_size(v22, v36),
        v37 <= *a5))
  {
    *a5 = v37;
    ccn_write_uint(v22, v36, v37, a4);
    v38 = 0;
  }
  else
  {
LABEL_9:
    v38 = 0xFFFFFFFFLL;
  }
  cc_disable_dit(&v41);
  return v38;
}

void *ccec_cp_x448_asm()
{
  return &ccec_x448_asm_params;
}

uint64_t sizeof_struct_cche_galois_key()
{
  return 16;
}

uint64_t cche_secret_key_sizeof(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = cche_param_ctx_chain_const(a1);
  v2 = (*(_DWORD *)(v1 + 12) * *(_DWORD *)(v1 + 8))
     + ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3);
  return v2 * sizeof_struct_ccpolyzp_po2cyc();
}

unint64_t cche_ciphertext_sizeof(uint64_t a1, int a2, unsigned int a3)
{
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unint64_t v10;

  v5 = (unsigned int *)cche_param_ctx_chain_const(a1);
  v6 = *v5;
  v7 = (unint64_t)(sizeof_struct_ccpolyzp_po2cyc_ctx() + 7) >> 3;
  if (v6 >= 0x80)
    v8 = 128;
  else
    v8 = v6;
  v9 = &v5[2
         * (v7 + 2 * (v6 + ((unint64_t)(sizeof_struct_ccrns_mul_modulus() + 7) >> 3) * v8) + 6)
         * (v5[1] - a2)];
  v10 = sizeof_struct_ccpolyzp_po2cyc();
  return 8 * ((v10 + 23) / v10 + (v9[3] * v9[2] + ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3)) * a3);
}

unint64_t cche_plaintext_sizeof(uint64_t a1)
{
  unsigned int *v1;

  v1 = cche_param_ctx_plaintext_ctx(a1);
  return (sizeof_struct_ccpolyzp_po2cyc() + 8 * v1[1] * *v1 + 7) & 0xFFFFFFFFFFFFFFF8;
}

unint64_t cche_dcrt_plaintext_sizeof(uint64_t a1, int a2)
{
  int v3;

  v3 = cche_param_ctx_polynomial_degree(a1);
  return (sizeof_struct_ccpolyzp_po2cyc() + 8 * (v3 * a2) + 7) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t cche_rng_seed_sizeof()
{
  return 32;
}

unint64_t cche_galois_key_sizeof(uint64_t a1, unsigned int a2)
{
  return 8 * cche_galois_key_nof_n(a1, a2);
}

unint64_t cche_relin_key_sizeof(uint64_t a1)
{
  return 8 * cche_relin_key_nof_n(a1);
}

uint64_t ccz_cmpi(uint64_t a1, unsigned int a2)
{
  char v3;
  uint64_t v9;
  _QWORD v11[4];
  char v12;
  _QWORD v13[2];

  v3 = 0;
  v13[1] = *MEMORY[0x1E0C874D8];
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v12 = v3;
  v13[0] = a2;
  v11[0] = ccn_n(1, v13);
  v11[1] = 0;
  v11[2] = 1;
  v11[3] = v13;
  v9 = ccz_cmp(a1, (uint64_t)v11);
  cc_disable_dit(&v12);
  return v9;
}

_BYTE *ccmode_factory_cfb_decrypt(_QWORD *a1, _QWORD *a2)
{
  char v2;
  char v9;

  v2 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v9 = v2;
  *a1 = ((2 * a2[1] + 14) & 0xFFFFFFFFFFFFFFF0) + ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  a1[1] = 1;
  a1[2] = ccmode_cfb_init;
  a1[3] = ccmode_cfb_decrypt;
  a1[4] = a2;
  return cc_disable_dit(&v9);
}

void *ccsrp_gp_rfc5054_3072()
{
  return &_ccsrp_gp_rfc5054_3072;
}

uint64_t ccmode_cbc_encrypt(uint64_t *a1, char *a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  size_t v10;
  char *i;
  char *v12;
  char *v13;

  if (a3)
  {
    v6 = a3;
    v8 = a1 + 1;
    v9 = *a1;
    v10 = *(_QWORD *)(*a1 + 8);
    for (i = a2; ; i = v12)
    {
      v12 = a5;
      if (v10)
      {
        v13 = i - 1;
        do
        {
          a5[v10 - 1] = v13[v10] ^ *(_BYTE *)(a4 - 1 + v10);
          --v10;
        }
        while (v10);
      }
      (*(void (**)(uint64_t *, uint64_t, char *, char *))(v9 + 24))(v8, 1, a5, a5);
      v10 = *(_QWORD *)(v9 + 8);
      if (!--v6)
        break;
      a4 += v10;
      a5 = &v12[v10];
    }
    memcpy(a2, v12, v10);
  }
  return 0;
}

uint64_t ltc_des_ecb_decrypt(uint64_t a1, uint64_t a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C874D8];
  if (a2)
  {
    v6 = a2;
    v7 = a1 + 128;
    do
    {
      --v6;
      v8 = *a3;
      v9 = a3[1];
      a3 += 2;
      v12 = bswap32(v8);
      v13 = bswap32(v9);
      desfunc(&v12, v7);
      v10 = bswap32(v13);
      *a4 = bswap32(v12);
      a4[1] = v10;
      a4 += 2;
    }
    while (v6);
  }
  return 0;
}

uint64_t ccmode_ccm_finalize(uint64_t a1, uint64_t a2, void *__dst)
{
  uint64_t i;

  if (*(_DWORD *)(a2 + 64) == 1)
    return 4294967228;
  if (*(_DWORD *)(a2 + 72))
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1 + 8, 1, a2 + 16, a2 + 16);
  for (i = *(_QWORD *)(*(_QWORD *)a1 + 8); i; --i)
    *(_BYTE *)(a2 + i + 31) ^= *(_BYTE *)(a2 + i + 15);
  memcpy(__dst, (const void *)(a2 + 32), *(_QWORD *)(a2 + 88));
  return 0;
}

_QWORD *ccaes_cfb8_encrypt_mode()
{
  _QWORD *v0;

  v0 = ccaes_ecb_encrypt_mode();
  ccmode_factory_cfb8_encrypt(cfb8_aes_encrypt, v0);
  return cfb8_aes_encrypt;
}

uint64_t ccmode_cfb8_init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *__src)
{
  uint64_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;

  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)a2 = v8;
  v9 = *(_QWORD *)(v8 + 8);
  v10 = a2 + ((v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  v11 = v10 + 8;
  if (__src)
    memcpy((void *)(v10 + 8), __src, v9);
  else
    cc_clear(*(_QWORD *)(v8 + 8), (void *)(v10 + 8));
  v12 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v8 + 16))(v8, a2 + 8 + ((2 * *(_QWORD *)(*(_QWORD *)a2 + 8) + 14) & 0xFFFFFFFFFFFFFFF0), a3, a4);
  (*(void (**)(unint64_t, uint64_t, size_t, uint64_t))(v8 + 24))(a2 + 8 + ((2 * *(_QWORD *)(*(_QWORD *)a2 + 8) + 14) & 0xFFFFFFFFFFFFFFF0), 1, v11, a2 + 8);
  return v12;
}

uint64_t cche_crt_composer_init_ws(uint64_t a1, unint64_t *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C874D8];
  *a2 = a3;
  if (a3)
  {
    v8 = 0;
    v9 = a2 + 8;
    v10 = 1;
    v11 = 1;
    do
    {
      v12 = sizeof_struct_ccpolyzp_po2cyc();
      v13 = &v9[((v12 + 15) / v12 + 6) * v8];
      *v13 = *(_QWORD *)(a4 + 8 * v8);
      v14 = *(_QWORD *)(a4 + 8 * v8);
      if (!is_mul_ok(v14, v11))
        return 0xFFFFFFFFLL;
      result = ccpolyzp_po2cyc_modulus_to_cczp_ws(a1, v13 + 2, v14);
      if ((_DWORD)result)
        return result;
      v11 *= v14;
      v8 = v10++;
    }
    while (v8 < a3);
    result = ccpolyzp_po2cyc_modulus_to_cczp_ws(a1, a2 + 2, v11);
    if (!(_DWORD)result)
    {
      v16 = 0;
      a2[1] = v11;
      while (1)
      {
        v17 = sizeof_struct_ccpolyzp_po2cyc();
        v18 = &v9[((v17 + 15) / v17 + 6) * v16];
        v20[0] = v11 / *(_QWORD *)(a4 + 8 * v16);
        cczp_modn_ws(a1, v18 + 2, &v19, 1, (char *)v20);
        result = cczp_inv_ws(a1, (uint64_t)(v18 + 2));
        if ((_DWORD)result)
          break;
        cczp_mul_ws(a1, (uint64_t)(a2 + 2));
        if (a3 <= ++v16)
          return 0;
      }
    }
  }
  else
  {
    result = ccpolyzp_po2cyc_modulus_to_cczp_ws(a1, a2 + 2, 1uLL);
    if (!(_DWORD)result)
      a2[1] = 1;
  }
  return result;
}

uint64_t cche_crt_composer_compose_ws(uint64_t a1, unint64_t *a2, uint64_t a3, void *__dst, uint64_t *__src)
{
  uint64_t *v5;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int inited;
  uint64_t v28;
  _QWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v5 = __src;
  if (*a2 == 1)
  {
    memcpy(__dst, __src, 8 * a3);
    return 0;
  }
  else
  {
    v11 = *(_QWORD *)cczp_prime((uint64_t)(a2 + 2));
    v31 = 0u;
    v32 = 0u;
    v30 = 0u;
    inited = ccrns_modulus_init_var_time_ws(a1, (unint64_t *)&v30, v11);
    if (inited)
      v12 = 1;
    else
      v12 = a3 == 0;
    if (!v12)
    {
      v13 = 0;
      v14 = 8 * a3;
      v28 = a3;
      v29 = __dst;
      do
      {
        if (*a2)
        {
          v15 = 0;
          v16 = 0;
          v17 = v5;
          do
          {
            v18 = sizeof_struct_ccpolyzp_po2cyc();
            v19 = (uint64_t *)&a2[((v18 + 15) / v18 + 6) * v15 + 8];
            v20 = ccpolyzp_po2cyc_centered_to_rem(*v17, *v19);
            v21 = v19[1];
            v22 = v21 * v20;
            v23 = ((unint64_t)v21 * (unsigned __int128)(unint64_t)v20) >> 64;
            v24 = __CFADD__(((unint64_t)v22 * (unsigned __int128)(unint64_t)v31) >> 64, v23 * v31);
            v25 = v22
                - (v24
                 + __CFADD__(v22 * *((_QWORD *)&v31 + 1), (__PAIR128__(v23, v22) * (unint64_t)v31) >> 64)
                 + ((v23 * (unsigned __int128)(unint64_t)v31) >> 64)
                 + *((_QWORD *)&v31 + 1) * v23
                 + (((unint64_t)v22 * (unsigned __int128)*((unint64_t *)&v31 + 1)) >> 64))
                * v30;
            if (v25 - (uint64_t)v30 >= 0)
              v25 -= v30;
            v26 = v25 + v16;
            if (v26 - v11 >= 0)
              v16 = v26 - v11;
            else
              v16 = v26;
            ++v15;
            v17 = (uint64_t *)((char *)v17 + v14);
          }
          while (v15 < *a2);
        }
        else
        {
          v16 = 0;
        }
        v29[v13++] = ccpolyzp_po2cyc_rem_to_centered(v16, a2[1]);
        ++v5;
      }
      while (v13 != v28);
    }
    return inited;
  }
}

uint64_t cche_crt_compose_ws(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, unint64_t a5, uint64_t a6)
{
  uint64_t (*v12)(uint64_t, unint64_t);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t result;

  v13 = *(_QWORD *)(a1 + 16);
  v12 = *(uint64_t (**)(uint64_t, unint64_t))(a1 + 24);
  v14 = a5;
  v15 = sizeof_struct_ccpolyzp_po2cyc();
  v16 = (unint64_t *)v12(a1, (v15 + 15) / v15 + 6 + ((v15 + 15) / v15 + 6) * v14);
  result = cche_crt_composer_init_ws(a1, v16, a5, a6);
  if (!(_DWORD)result)
    result = cche_crt_composer_compose_ws(a1, v16, a2, a3, a4);
  *(_QWORD *)(a1 + 16) = v13;
  return result;
}

uint64_t cche_crt_compose(uint64_t a1, void *a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  char v10;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v21[4];
  void (*v22)(uint64_t);
  char v23;

  v10 = 0;
  v23 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v23 = v10;
  v16 = a4;
  v17 = sizeof_struct_ccpolyzp_po2cyc();
  v21[0] = cc_malloc_clear(8 * (v16 + 1) * ((v17 + 15) / v17 + 6) + 72);
  v18 = sizeof_struct_ccpolyzp_po2cyc();
  v21[1] = ((v18 + 15) / v18 + 6) * (v16 + 1) + 9;
  v21[2] = 0;
  v21[3] = cc_ws_alloc;
  v22 = cc_ws_free;
  if (v21[0])
  {
    v19 = cche_crt_compose_ws((uint64_t)v21, a1, a2, a3, a4, a5);
    v22((uint64_t)v21);
  }
  else
  {
    v19 = 4294967283;
  }
  cc_disable_dit(&v23);
  return v19;
}

uint64_t ccmode_siv_reset(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x1E0C874D8];
  v2 = *(_QWORD **)(*a1 + 56);
  if (v2[1] != 16)
    return 4294967226;
  v4[0] = 0;
  v4[1] = 0;
  cccmac_one_shot_generate(v2, a1[1] >> 1, (uint64_t)(a1 + 3), 0x10uLL, (char *)v4, 0x10uLL, a1 + 11);
  result = 0;
  a1[2] = 2;
  return result;
}

uint64_t ccsha3_384_vng_hwassist_compress(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return cckeccak_absorb_blocks(a1, 0x68uLL, a2, a3, (uint64_t (*)(_QWORD *))AccelerateCrypto_SHA3_keccak_hwassist);
}

uint64_t ccsha3_384_vng_hwassist_final(unint64_t *a1, uint64_t a2, _QWORD *a3)
{
  return ccsha3_final(a1, a2, a3, (uint64_t (*)(uint64_t *))AccelerateCrypto_SHA3_keccak_hwassist);
}

uint64_t ccsha3_384_vng_compress(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return cckeccak_absorb_blocks(a1, 0x68uLL, a2, a3, AccelerateCrypto_SHA3_keccak);
}

uint64_t ccsha3_384_vng_final(unint64_t *a1, uint64_t a2, _QWORD *a3)
{
  return ccsha3_final(a1, a2, a3, AccelerateCrypto_SHA3_keccak);
}

uint64_t fipspost_post_shake(char a1)
{
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD v8[12];
  unint64_t v9;
  char v10[480];
  char v11[32];
  _OWORD v12[2];
  _OWORD v13[2];
  _OWORD v14[2];
  _OWORD v15[2];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C874D8];
  v15[0] = xmmword_1DEE279E8;
  v15[1] = unk_1DEE279F8;
  v14[0] = xmmword_1DEE27A08;
  v14[1] = unk_1DEE27A18;
  v13[0] = xmmword_1DEE27A28;
  v13[1] = unk_1DEE27A38;
  v12[0] = xmmword_1DEE27A48;
  v12[1] = unk_1DEE27A58;
  v9 = 0xA3A3A3A3A3A3A3A3;
  *(_QWORD *)&v1 = 0xA3A3A3A3A3A3A3A3;
  *((_QWORD *)&v1 + 1) = 0xA3A3A3A3A3A3A3A3;
  v8[10] = v1;
  v8[11] = v1;
  v8[8] = v1;
  v8[9] = v1;
  v8[6] = v1;
  v8[7] = v1;
  v8[4] = v1;
  v8[5] = v1;
  v8[2] = v1;
  v8[3] = v1;
  v8[0] = v1;
  v8[1] = v1;
  if ((a1 & 0x10) != 0)
  {
    LOBYTE(v15[0]) = 66;
    LOBYTE(v14[0]) = -86;
    LOBYTE(v13[0]) = 69;
    LOBYTE(v12[0]) = 107;
  }
  ccshake128(0, (char *)v8, 0x200uLL, v10);
  if (cc_cmp_safe(32, v11, (char *)v15))
  {
    v2 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: SHAKE128, 0-bit message failed\n", v2, "fipspost_post_shake", 62);
    v3 = 4294967221;
  }
  else
  {
    v3 = 0;
  }
  ccshake256(0, (char *)v8, 0x200uLL, v10);
  if (cc_cmp_safe(32, v11, (char *)v14))
  {
    v4 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: SHAKE256, 0-bit message failed\n", v4, "fipspost_post_shake", 68);
    v3 = 4294967221;
  }
  ccshake128(0xC8uLL, (char *)v8, 0x200uLL, v10);
  if (cc_cmp_safe(32, v11, (char *)v13))
  {
    v5 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: SHAKE128, 1600-bit message failed\n", v5, "fipspost_post_shake", 74);
    v3 = 4294967221;
  }
  ccshake256(0xC8uLL, (char *)v8, 0x200uLL, v10);
  if (cc_cmp_safe(32, v11, (char *)v12))
  {
    v6 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: SHAKE256, 1600-bit message failed\n", v6, "fipspost_post_shake", 80);
    return 4294967221;
  }
  return v3;
}

uint64_t ccvrf_irtf_ed25519_hash2curve_elligator2(uint64_t a1, uint64_t a2, char *a3, size_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE v16[6];
  char v17;
  char __src;
  __int128 v19;
  char v20;
  char v21[32];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C874D8];
  __src = 4;
  v17 = 1;
  v9 = ccvrf_irtf_ed25519_point_to_string(v21, a2);
  MEMORY[0x1E0C86820](v9, v10, v11, v12);
  v14 = &v16[-v13];
  ccdigest_init(a1, &v16[-v13]);
  ccdigest_update(a1, v14, 1uLL, &__src);
  ccdigest_update(a1, v14, 1uLL, &v17);
  ccdigest_update(a1, v14, 0x20uLL, v21);
  ccdigest_update(a1, v14, a4, a3);
  (*(void (**)(uint64_t, _QWORD *, __int128 *))(a1 + 56))(a1, v14, &v19);
  v20 &= ~0x80u;
  return ge_from_uniform(a5, &v19);
}

uint64_t ccmode_gcm_encrypt(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8, double a9, int8x16_t a10)
{
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int8x16_t v20;
  uint64_t v21;
  uint64_t result;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t j;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;

  v14 = *(_QWORD *)(a1 + 96);
  ccmode_gcm_aad_finalize(a1, a5, a6, a7, a8, a9, a10);
  if (*(_WORD *)(a1 + 80) != 3)
    return 4294967228;
  v21 = *(_QWORD *)(a1 + 96);
  result = 4294967229;
  if (!__CFADD__(v21, a2) && v21 + a2 <= 0xFFFFFFFE0)
  {
    v23 = v14 & 0xF;
    if ((v14 & 0xF) != 0)
    {
      v24 = 16 - v23;
      if (a2 < v24)
      {
LABEL_18:
        if (!a2)
          return 0;
        v30 = v23;
        v31 = a4 - 1;
        v32 = a1 + v23 + 63;
        v33 = a2;
        do
        {
          *(_BYTE *)(v31 + v33) = *(_BYTE *)(v32 + v33) ^ *(_BYTE *)(a3 - 1 + v33);
          --v33;
        }
        while (v33);
        v34 = v30 + a1 + 15;
        v35 = a2;
        do
        {
          *(_BYTE *)(v34 + v35) ^= *(_BYTE *)(v31 + v35);
          --v35;
        }
        while (v35);
        result = 0;
        *(_QWORD *)(a1 + 96) += a2;
        return result;
      }
      v25 = a4 - 1;
      v26 = 16 - v23;
      do
      {
        *(_BYTE *)(v25 + v26) = *(_BYTE *)((v14 & 0xF) + a1 + 63 + v26) ^ *(_BYTE *)(a3 - 1 + v26);
        --v26;
      }
      while (v26);
      v27 = 16 - v23;
      do
      {
        *(_BYTE *)((v14 & 0xF) + a1 + 15 + v27) ^= *(_BYTE *)(v25 + v27);
        --v27;
      }
      while (v27);
      ccmode_gcm_mult_h((uint64x2_t *)a1, (int8x16_t *)(a1 + 16), v15, v16, v17, v18, v19, v20);
      a2 -= v24;
      a3 += v24;
      a4 += v24;
      *(_QWORD *)(a1 + 96) += v24;
      ccmode_gcm_update_pad(a1);
    }
    if (a2 >= 0x10)
    {
      do
      {
        for (i = 0; i != -16; --i)
          *(_BYTE *)(a4 + i + 15) = *(_BYTE *)(a1 + i + 79) ^ *(_BYTE *)(a3 + i + 15);
        for (j = 0; j != -16; --j)
          *(_BYTE *)(a1 + j + 31) ^= *(_BYTE *)(a4 + j + 15);
        ccmode_gcm_mult_h((uint64x2_t *)a1, (int8x16_t *)(a1 + 16), v15, v16, v17, v18, v19, v20);
        a2 -= 16;
        a3 += 16;
        a4 += 16;
        *(_QWORD *)(a1 + 96) += 16;
        ccmode_gcm_update_pad(a1);
      }
      while (a2 > 0xF);
    }
    v23 = 0;
    goto LABEL_18;
  }
  return result;
}

uint64_t ccec_mult_blinded(uint64_t *a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (**a5)(_QWORD, uint64_t, uint64_t *))
{
  char v10;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[4];
  void (*v21)(uint64_t);
  char v22;

  v10 = 0;
  v22 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v22 = v10;
  v16 = cc_malloc_clear(184 * *a1);
  v17 = 23 * *a1;
  v20[0] = v16;
  v20[1] = v17;
  v20[2] = 0;
  v20[3] = cc_ws_alloc;
  v21 = cc_ws_free;
  if (v16)
  {
    v18 = ccec_mult_blinded_ws((uint64_t)v20, a1, a2, a3, a4, a5);
    v21((uint64_t)v20);
  }
  else
  {
    v18 = 4294967283;
  }
  cc_disable_dit(&v22);
  return v18;
}

unint64_t ccsae_verify_confirmation(_QWORD *a1, char *a2, char *a3)
{
  char v6;
  _QWORD *v12;
  unint64_t v13;
  _QWORD v15[4];
  void (*v16)(uint64_t);
  char v17;

  v6 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v17 = v6;
  v12 = (_QWORD *)*a1;
  v15[0] = cc_malloc_clear(8 * *(_QWORD *)*a1);
  v15[1] = *v12;
  v15[2] = 0;
  v15[3] = cc_ws_alloc;
  v16 = cc_ws_free;
  if (v15[0])
  {
    v13 = ccsae_verify_confirmation_ws((uint64_t)v15, (uint64_t)a1, a2, a3);
    v16((uint64_t)v15);
  }
  else
  {
    v13 = 4294967283;
  }
  cc_disable_dit(&v17);
  return v13;
}

unint64_t ccsae_verify_confirmation_ws(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  int v4;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  size_t v21;
  uint64_t v23;
  char v24[64];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C874D8];
  v4 = *(unsigned __int8 *)(a2 + 24);
  if (v4 != CCSAE_STATE_COMMIT_BOTH && v4 != CCSAE_STATE_CONFIRMATION_GENERATED)
    return 4294967210;
  v10 = **(_QWORD **)a2;
  v11 = cczp_bitlen(*(_QWORD *)a2);
  v23 = (uint64_t)&v23;
  v12 = (unint64_t)(v11 + 7) >> 3;
  v13 = *(uint64_t **)(a2 + 16);
  MEMORY[0x1E0C86820](v11, v14, v15, v16);
  v18 = &v24[-v17 - 8];
  v19 = *(_QWORD *)(a1 + 16);
  v20 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v10);
  v21 = ccsae_sizeof_kck_internal(a2);
  cchmac_init((uint64_t)v13, v18, v21, (char *)(a2 + 48));
  cchmac_update((uint64_t)v13, v18, 2uLL, a3);
  ccn_write_uint_padded(v10, (unint64_t *)(a2 + 144 + 16 * **(_QWORD **)a2), v12, v20);
  cchmac_update((uint64_t)v13, v18, v12, v20);
  ccn_write_uint_padded(v10, (unint64_t *)(a2 + 144 + 56 * **(_QWORD **)a2), v12, v20);
  cchmac_update((uint64_t)v13, v18, v12, v20);
  ccn_write_uint_padded(v10, (unint64_t *)(a2 + 144 + (**(_QWORD **)a2 << 6)), v12, v20);
  cchmac_update((uint64_t)v13, v18, v12, v20);
  ccn_write_uint_padded(v10, (unint64_t *)(a2 + 144 + 24 * **(_QWORD **)a2), v12, v20);
  cchmac_update((uint64_t)v13, v18, v12, v20);
  ccn_write_uint_padded(v10, (unint64_t *)(a2 + 144 + 40 * **(_QWORD **)a2), v12, v20);
  cchmac_update((uint64_t)v13, v18, v12, v20);
  ccn_write_uint_padded(v10, (unint64_t *)(a2 + 144 + 48 * **(_QWORD **)a2), v12, v20);
  cchmac_update((uint64_t)v13, v18, v12, v20);
  cchmac_final((uint64_t)v13, v18, (uint64_t)v24);
  cc_clear(((v13[1] + v13[2] + 19) & 0xFFFFFFFFFFFFFFF8) + v13[1], v18);
  *(_BYTE *)(a2 + 24) |= CCSAE_STATE_CONFIRMATION_VERIFIED;
  *(_QWORD *)(a1 + 16) = v19;
  return cc_cmp_safe(*v13, v24, a4);
}

uint64_t ccdh_compute_shared_secret_ws(uint64_t a1, _QWORD *a2, _QWORD *a3, unint64_t *a4, uint64_t a5, uint64_t (**a6)(_QWORD, uint64_t, uint64_t *))
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v12 = (_QWORD *)*a2;
  v13 = ccdh_gp_n(*a2);
  if (*a4 < (unint64_t)(cczp_bitlen((uint64_t)v12) + 7) >> 3)
    return 4294967244;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v13);
  result = ccdh_check_pub_ws(a1, v12, a3);
  if (!(_DWORD)result)
  {
    v20 = a5;
    v17 = cczp_bitlen((uint64_t)v12);
    v18 = ccdh_gp_n(*a2);
    result = ccdh_power_blinded_ws(a1, a6, v12, v16, a3 + 2, v17, &a2[v18 + 2]);
    if (!(_DWORD)result)
    {
      if (ccdh_valid_shared_secret(v13, v16, (uint64_t)v12))
      {
        v19 = ccn_write_uint_size(v13, (unint64_t *)v16);
        *a4 = v19;
        ccn_write_uint(v13, (unint64_t *)v16, v19, v20);
        result = 0;
      }
      else
      {
        *a4 = 0;
        result = 4294967244;
      }
    }
  }
  *(_QWORD *)(a1 + 16) = v15;
  return result;
}

uint64_t ccdh_compute_shared_secret(_QWORD *a1, _QWORD *a2, unint64_t *a3, uint64_t a4, uint64_t (**a5)(_QWORD, uint64_t, uint64_t *))
{
  char v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[4];
  void (*v23)(uint64_t);
  char v24;

  v10 = 0;
  v24 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v24 = v10;
  v16 = *a1;
  v17 = ccdh_gp_n(*a1);
  v18 = CCDH_POWER_BLINDED_WORKSPACE_N(v17);
  v22[0] = cc_malloc_clear(8 * (v18 + v17));
  v19 = ccdh_gp_n(v16);
  v22[1] = CCDH_POWER_BLINDED_WORKSPACE_N(v19) + v19;
  v22[2] = 0;
  v22[3] = cc_ws_alloc;
  v23 = cc_ws_free;
  if (v22[0])
  {
    v20 = ccdh_compute_shared_secret_ws((uint64_t)v22, a1, a2, a3, a4, a5);
    v23((uint64_t)v22);
  }
  else
  {
    v20 = 4294967283;
  }
  cc_disable_dit(&v24);
  return v20;
}

BOOL ccn_sub(_BOOL8 a1, _QWORD *a2, uint64_t *a3, unint64_t *a4)
{
  char v4;
  _BOOL8 v10;
  _OWORD v12[2];
  uint64_t (*v13)(_QWORD);
  char v14;

  v4 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v14 = v4;
  v12[0] = xmmword_1EA955470;
  v12[1] = unk_1EA955480;
  v13 = cc_ws_free_null;
  v10 = ccn_sub_asm(a1, a2, a3, a4);
  cc_ws_free_null(v12);
  cc_disable_dit(&v14);
  return v10;
}

_BYTE *ccz_set_bit(_QWORD *a1, unint64_t a2, unsigned int a3)
{
  char v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;

  v6 = 0;
  v16 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v16 = v6;
  if (ccz_n((uint64_t)a1) <= a2 >> 6)
  {
    ccz_set_capacity((uint64_t)a1, (a2 >> 6) + 1);
    v12 = (a2 >> 6) + 1 - ccz_n((uint64_t)a1);
    v13 = a1[3];
    v14 = ccz_n((uint64_t)a1);
    ccn_zero(v12, (void *)(v13 + 8 * v14));
    ccz_set_n(a1, (a2 >> 6) + 1);
  }
  ccn_set_bit(a1[3], a2, a3);
  return cc_disable_dit(&v16);
}

uint64_t ccder_sizeof_octet_string(uint64_t a1, unint64_t *a2)
{
  return ccder_sizeof_implicit_octet_string(4, a1, a2);
}

BOOL ccn_abs(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  _BOOL8 v6;

  v6 = ccn_sub_ws(0, a1, a2, a3, a4);
  ccn_cond_neg(a1, v6, a2, a2);
  return v6;
}

uint64_t CCPOLYZP_PO2CYC_BASE_CONVERT_INIT_WORKSPACE_N(unsigned int a1)
{
  return 2 * a1 + 10;
}

uint64_t ccpolyzp_po2cyc_base_convert_init_ws(uint64_t a1, uint64_t *a2, char *a3, _DWORD *a4)
{
  _DWORD *v4;
  char *v5;
  uint64_t *v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  _DWORD *v20;
  _DWORD *v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _BOOL8 v71;
  unint64_t v72;
  int v73;
  unsigned int v74;
  char *v75;
  unsigned int v76;
  _QWORD *v77;
  int v78;
  unsigned __int8 *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  unsigned int v84;
  unsigned int v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t *v106;
  _DWORD *v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  char v112[16];
  unint64_t v113;
  uint64_t v114;
  uint64_t v115[2];

  v115[1] = *MEMORY[0x1E0C874D8];
  if (*(_DWORD *)a3 != *a4)
    return 4294967289;
  v4 = a4;
  v5 = a3;
  v6 = a2;
  *a2 = (uint64_t)a3;
  a2[1] = (uint64_t)a4;
  v8 = *((unsigned int *)a3 + 1);
  v109 = a4[1];
  v104 = *(_QWORD *)(a1 + 16);
  v9 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v8 + 1);
  v108 = a1;
  v105 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v8 + 1);
  v107 = v4;
  v110 = v8;
  if ((_DWORD)v8)
  {
    v10 = 0;
    v106 = v6 + 12;
    while (1)
    {
      v11 = v10;
      ccn_seti(v110, v9, 1);
      v12 = 0;
      ++v10;
      do
      {
        v13 = v10;
        if (v12 != v11)
        {
          v14 = (*((_DWORD *)v5 + 1) - 1);
          v15 = v5;
          if (v12 < v14)
          {
            v15 = v5;
            do
            {
              v15 = (char *)*((_QWORD *)v15 + 14);
              LODWORD(v14) = v14 - 1;
            }
            while (v14 > v12);
          }
          v13 = v12 + 1;
          ccn_muln(v12 + 1, (uint64_t)v105, (uint64_t)v9, 1uLL, (_QWORD *)v15 + 18);
          ccn_set(v13, v9, v105);
        }
        v12 = v13;
      }
      while (v13 != v110);
      if (v109)
        break;
LABEL_20:
      if (v10 == v110)
        goto LABEL_21;
    }
    v16 = 0;
    while (1)
    {
      v17 = v10;
      v18 = v5;
      v19 = v4[1] - 1;
      v20 = v4;
      v21 = v4;
      if (v19 > v16)
      {
        v22 = v4[1] - 1;
        v20 = v4;
        do
        {
          v20 = (_DWORD *)*((_QWORD *)v20 + 14);
          --v22;
        }
        while (v22 > v16);
        v21 = v4;
        do
        {
          v21 = (_DWORD *)*((_QWORD *)v21 + 14);
          --v19;
        }
        while (v19 > v16);
      }
      v23 = v20 + 30;
      v24 = *((_QWORD *)v21 + 2);
      v25 = v6;
      v26 = v11 + *(_DWORD *)(*v6 + 4) * v16;
      v27 = &v106[((unint64_t)(sizeof_struct_ccrns_mul_modulus() + 7) >> 3) * v26];
      v115[0] = 0;
      cczp_modn_ws(v108, v23, v115, v110, (char *)v9);
      v4 = v107;
      v28 = v27;
      v6 = v25;
      v5 = v18;
      if (ccrns_mul_modulus_init_ws(v108, v28, v24, v115[0]))
        break;
      v10 = v17;
      if (++v16 == v109)
        goto LABEL_20;
    }
  }
LABEL_21:
  *(_QWORD *)(v108 + 16) = v104;
  v29 = *v6;
  v30 = *(unsigned int *)(*v6 + 4);
  if (!(_DWORD)v30)
  {
LABEL_45:
    v57 = v6[1];
    v58 = *(_DWORD *)(v57 + 4);
    while (--v58)
      v57 = *(_QWORD *)(v57 + 112);
    v59 = *(_DWORD *)(*v6 + 4);
    v60 = *(_QWORD *)(v57 + 16);
    if (v59)
    {
      v61 = 0;
      v62 = *(_QWORD *)(v57 + 32);
      v63 = *(_QWORD *)(v57 + 40);
      v64 = 1;
      v65 = v107;
      do
      {
        v66 = *v6;
        if (v59 - 1 > v61)
        {
          v67 = v59 - 1;
          v66 = *v6;
          do
          {
            v66 = *(_QWORD *)(v66 + 112);
            --v67;
          }
          while (v67 > v61);
        }
        v68 = *(_QWORD *)(v66 + 16);
        v69 = v68 * v64;
        v70 = (v68 * (unsigned __int128)v64) >> 64;
        v71 = __CFADD__((v69 * (unsigned __int128)v62) >> 64, v70 * v62);
        v72 = v69
            - (v71
             + __CFADD__(v69 * v63, (__PAIR128__(v70, v69) * v62) >> 64)
             + ((v70 * (unsigned __int128)v62) >> 64)
             + v63 * v70
             + ((v69 * (unsigned __int128)v63) >> 64))
            * v60;
        if ((uint64_t)(v72 - v60) >= 0)
          v64 = v72 - v60;
        else
          v64 = v72;
        ++v61;
      }
      while (v61 != v59);
    }
    else
    {
      v64 = 1;
      v65 = v107;
    }
    result = ccrns_mul_modulus_init_ws(v108, v6 + 2, v60, v64);
    if ((_DWORD)result)
      return result;
    v73 = *((_DWORD *)v5 + 1);
    if (!v73)
    {
LABEL_70:
      v114 = 0x1FFFFFFFFFFFFFFFLL;
      v77 = v65;
      v78 = v65[1] - 1;
      if (v65[1] != 1)
      {
        v77 = v65;
        do
        {
          v77 = (_QWORD *)v77[14];
          --v78;
        }
        while (v78);
      }
      cczp_modn_ws(v108, v77 + 15, v6 + 5, 1, (char *)&v114);
      result = cczp_inv_field_ws(v108, (uint64_t)(v77 + 15), v6 + 6, v6 + 5);
      if (!(_DWORD)result)
      {
        result = ccpolyzp_po2cyc_base_convert_neg_q_inv_mod_t_ws(v108, v6 + 7, v6, 0);
        if (!(_DWORD)result)
        {
          if (v65[1] < 2u
            || (result = ccpolyzp_po2cyc_base_convert_neg_q_inv_mod_t_ws(v108, v6 + 8, v6, 1u), !(_DWORD)result))
          {
            cczp_modn_ws(v108, v77 + 15, (uint64_t *)&v113, 1, v5 + 144);
            result = cczp_inv_field_ws(v108, (uint64_t)(v77 + 15), &v113, &v113);
            if (!(_DWORD)result)
            {
              v79 = (unsigned __int8 *)cczp_prime((uint64_t)(v77 + 15));
              v115[0] = 0;
              ccn_read_uint(1uLL, v115, 8uLL, v79);
              result = ccrns_mul_modulus_init_var_time_ws(v108, v6 + 9, bswap64(v115[0]), v113);
              if (!(_DWORD)result)
              {
                LODWORD(v80) = *((_DWORD *)v5 + 1) - 1;
                if (*((_DWORD *)v5 + 1) == 1)
                {
LABEL_94:
                  ccn_mul_ws(v108, 1, (uint64_t)v112, (uint64_t)(v77 + 18), (uint64_t)&v114);
                  LODWORD(v97) = *((_DWORD *)v5 + 1);
                  if ((_DWORD)v97)
                  {
                    v98 = 0;
                    do
                    {
                      v99 = v5;
                      if (v98 < (v97 - 1))
                      {
                        v100 = v97 - 2;
                        v99 = v5;
                        do
                        {
                          v99 = (char *)*((_QWORD *)v99 + 14);
                          v43 = v98 >= v100--;
                        }
                        while (!v43);
                      }
                      cczp_modn_ws(v108, (_QWORD *)v99 + 15, &v111, 2, v112);
                      v101 = v111;
                      v102 = *v6;
                      v103 = sizeof_struct_ccrns_mul_modulus();
                      v6[((unint64_t)(v103 + 7) >> 3)
                       * (*(_DWORD *)(v6[1] + 4) * *(_DWORD *)(v102 + 4))
                       + 12
                       + ((unint64_t)(v103 + 7) >> 3) * *(unsigned int *)(v102 + 4)
                       + v98++] = v101;
                      v97 = *((unsigned int *)v5 + 1);
                    }
                    while (v98 < v97);
                  }
                  return 0;
                }
                else
                {
                  v81 = 0;
                  v82 = *((_QWORD *)v5 + 2);
                  v83 = v6 + 12;
                  while (1)
                  {
                    v84 = v80 - 1;
                    v85 = v84;
                    v86 = v5;
                    do
                    {
                      v86 = (char *)*((_QWORD *)v86 + 14);
                      v43 = v81 >= v85--;
                    }
                    while (!v43);
                    v87 = v5;
                    do
                    {
                      v87 = (char *)*((_QWORD *)v87 + 14);
                      v43 = v81 >= v84--;
                    }
                    while (!v43);
                    v88 = *v6;
                    v89 = sizeof_struct_ccrns_mul_modulus();
                    v90 = &v83[((unint64_t)(v89 + 7) >> 3)
                             * (*(_DWORD *)(v6[1] + 4) * *(_DWORD *)(v88 + 4))
                             + ((unint64_t)(v89 + 7) >> 3) * *(unsigned int *)(v88 + 4)
                             + *(unsigned int *)(v88 + 4)
                             + ((unint64_t)(v89 + 7) >> 3) * v81];
                    v91 = *((_QWORD *)v87 + 2);
                    v92 = v82 - v91 * ((*((unint64_t *)v87 + 3) * (unsigned __int128)v82) >> 64);
                    v93 = v92 - v91 >= 0
                        ? v92 - v91
                        : v82 - v91 * ((*((unint64_t *)v87 + 3) * (unsigned __int128)v82) >> 64);
                    result = ccrns_mul_modulus_init_var_time_ws(v108, v90, v91, v93);
                    if ((_DWORD)result)
                      break;
                    v115[0] = v93;
                    result = cczp_inv_field_ws(v108, (uint64_t)(v86 + 120), v115, v115);
                    if ((_DWORD)result)
                      break;
                    v94 = v115[0];
                    v95 = *v6;
                    v96 = (unint64_t)(sizeof_struct_ccrns_mul_modulus() + 7) >> 3;
                    result = ccrns_mul_modulus_init_var_time_ws(v108, &v83[v96 * (*(_DWORD *)(v6[1] + 4) * *(_DWORD *)(v95 + 4))+ v96 * *(unsigned int *)(v95 + 4)+ *(unsigned int *)(v95 + 4)+ v96 * (*(_DWORD *)(v95 + 4) - 1)+ v96 * v81], *((_QWORD *)v87 + 2), v94);
                    if ((_DWORD)result)
                      break;
                    ++v81;
                    v80 = (*((_DWORD *)v5 + 1) - 1);
                    if (v81 >= v80)
                      goto LABEL_94;
                  }
                }
              }
            }
          }
        }
      }
      return result;
    }
    v74 = 0;
    while (1)
    {
      v75 = v5;
      if (v73 - 1 > v74)
      {
        v76 = v73 - 1;
        v75 = v5;
        do
        {
          v75 = (char *)*((_QWORD *)v75 + 14);
          --v76;
        }
        while (v76 > v74);
      }
      if (*((_QWORD *)v75 + 2) == 0x1FFFFFFFFFFFFFFFLL)
        return 4294967289;
      if (++v74 == v73)
        goto LABEL_70;
    }
  }
  v31 = 0;
  while (1)
  {
    v32 = *(_DWORD *)(v29 + 4);
    v33 = (v32 - 1);
    v34 = v29;
    v35 = (_QWORD *)v29;
    if (v31 < v33)
    {
      v36 = v32 - 1;
      v34 = v29;
      do
      {
        v34 = *(_QWORD *)(v34 + 112);
        --v36;
      }
      while (v36 > v31);
      v37 = v32 - 1;
      v35 = (_QWORD *)v29;
      do
      {
        v35 = (_QWORD *)v35[14];
        --v37;
      }
      while (v37 > v31);
    }
    v38 = 0;
    v39 = v32 - 2;
    v40 = 1;
    do
    {
      if (v31 != v38)
      {
        v41 = v29;
        if (v38 < v33)
        {
          v42 = v39;
          v41 = v29;
          do
          {
            v41 = *(_QWORD *)(v41 + 112);
            v43 = v38 >= v42--;
          }
          while (!v43);
        }
        v44 = v35[2];
        v45 = *(_QWORD *)(v41 + 16)
            - v44 * (((unint64_t)v35[3] * (unsigned __int128)*(unint64_t *)(v41 + 16)) >> 64);
        if ((uint64_t)(v45 - v44) >= 0)
          v45 -= v44;
        v46 = v45 * v40;
        v47 = (v45 * (unsigned __int128)(unint64_t)v40) >> 64;
        v48 = v35[4];
        v49 = ((unint64_t)v46 * (unsigned __int128)v48) >> 64;
        v50 = (v47 * (unsigned __int128)v48) >> 64;
        v51 = v47 * v48;
        v43 = __CFADD__(v49, v51);
        v52 = v49 + v51;
        v53 = v43;
        v40 = v46
            - (v53
             + __CFADD__(v46 * v35[5], v52)
             + v50
             + v35[5] * v47
             + (((unint64_t)v46 * (unsigned __int128)(unint64_t)v35[5]) >> 64))
            * v44;
        if (v40 - v44 >= 0)
          v40 -= v44;
      }
      ++v38;
    }
    while (v38 != v30);
    v115[0] = v40;
    result = cczp_inv_field_ws(v108, v34 + 120, v115, v115);
    if ((_DWORD)result)
      return result;
    v55 = *v6;
    v56 = sizeof_struct_ccrns_mul_modulus();
    result = ccrns_mul_modulus_init_var_time_ws(v108, &v6[((unint64_t)(v56 + 7) >> 3) * (*(_DWORD *)(v6[1] + 4) * *(_DWORD *)(v55 + 4))+ 12+ ((unint64_t)(v56 + 7) >> 3) * v31], v35[2], v115[0]);
    if ((_DWORD)result)
      return result;
    if (++v31 == v30)
      goto LABEL_45;
  }
}

uint64_t ccpolyzp_po2cyc_base_convert_neg_q_inv_mod_t_ws(uint64_t a1, _QWORD *a2, uint64_t *a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  unsigned int v10;
  unsigned int i;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17[2];

  v17[1] = *MEMORY[0x1E0C874D8];
  v7 = *a3;
  v6 = a3[1];
  v8 = *(_DWORD *)(v6 + 4);
  while (--v8 > a4)
    v6 = *(_QWORD *)(v6 + 112);
  v9 = (_QWORD *)(v6 + 120);
  ccn_seti(1, a2, 1);
  v10 = *(_DWORD *)(v7 + 4);
  if (v10)
  {
    for (i = 0; i < v10; ++i)
    {
      v12 = v10 - 1;
      v13 = v7;
      if (v12 > i)
      {
        v13 = v7;
        do
        {
          v13 = *(_QWORD *)(v13 + 112);
          --v12;
        }
        while (v12 > i);
      }
      v14 = (char *)cczp_prime(v13 + 120);
      cczp_modn_ws(a1, v9, v17, 1, v14);
      cczp_mul_ws(a1, (uint64_t)v9);
      v10 = *(_DWORD *)(v7 + 4);
    }
  }
  v15 = cczp_inv_field_ws(a1, (uint64_t)v9, a2, a2);
  if (!(_DWORD)v15)
    cczp_negate((uint64_t)v9, a2, a2);
  return v15;
}

uint64_t ccpolyzp_po2cyc_base_convert_poly_ws(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v46[2];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C874D8];
  v7 = (unsigned int *)*a3;
  if (!ccpolyzp_po2cyc_ctx_eq(*a3, (_DWORD *)*a4))
    return 4294967289;
  v8 = *a2;
  if (!ccpolyzp_po2cyc_ctx_eq(*a2, (_DWORD *)a4[1]))
    return 4294967289;
  v9 = *v7;
  if (!*v7)
    return 0;
  v10 = 0;
  v11 = a2 + 1;
  v12 = *(_DWORD *)(v8 + 4);
  v13 = v12;
  v43 = v8;
  v44 = a2;
  v42 = a2 + 1;
  while (!v13)
  {
LABEL_26:
    if (++v10 >= v9)
      return 0;
  }
  v14 = 0;
  while (1)
  {
    v15 = v13 - 1;
    v16 = (_QWORD *)v8;
    if (v13 - 1 > v14)
    {
      v16 = (_QWORD *)v8;
      do
      {
        v16 = (_QWORD *)v16[14];
        --v15;
      }
      while (v15 > v14);
    }
    v49 = 0;
    v50 = 0;
    if (v7[1])
      break;
    v30 = 0;
    v29 = 0;
LABEL_19:
    v31 = v16[4];
    v32 = (v31 * (unsigned __int128)(unint64_t)v29) >> 64;
    v33 = v31 * v30;
    v34 = (v31 * (unsigned __int128)v30) >> 64;
    v35 = __CFADD__(v32, v33);
    v36 = v32 + v33;
    v37 = v35;
    v38 = v37
        + __CFADD__(v16[5] * v29, v36)
        + v34
        + v16[5] * v30
        + (((unint64_t)v16[5] * (unsigned __int128)(unint64_t)v29) >> 64);
    v39 = v16[2];
    v40 = v29 - v38 * v39;
    if (v40 - v39 >= 0)
      v40 -= v39;
    v11[v10 + *(_DWORD *)*a2 * v14++] = v40;
    v13 = v12;
    if (v14 >= v12)
    {
      v9 = *v7;
      v13 = v12;
      goto LABEL_26;
    }
  }
  v17 = 0;
  while (1)
  {
    v18 = *(_DWORD *)(*a4 + 4);
    v19 = (unint64_t)(sizeof_struct_ccrns_mul_modulus() + 7) >> 3;
    v20 = v19 * (v17 + v14 * v18);
    v21 = a3[(v10 + *(_DWORD *)*a3 * v17) + 1];
    v22 = &a4[v19 * (*(_DWORD *)(a4[1] + 4) * v18) + 12 + v19 * v17];
    v23 = v22[1];
    v24 = ((unint64_t)v22[2] * (unsigned __int128)(unint64_t)v21) >> 64;
    v25 = *v22;
    v26 = v23 * v21 - v25 * v24;
    v27 = v26 - v25;
    v28 = v27 >= 0 ? v27 : v26;
    v47 = a4[v20 + 13];
    v48 = v28;
    ccn_mul_ws(a1, 1, (uint64_t)v46, (uint64_t)&v48, (uint64_t)&v47);
    if (ccn_add_ws(a1, 2, &v49, &v49, v46))
      return 0xFFFFFFFFLL;
    if (++v17 >= (unint64_t)v7[1])
    {
      v29 = v49;
      v30 = v50;
      v8 = v43;
      a2 = v44;
      v12 = *(_DWORD *)(v43 + 4);
      v11 = v42;
      goto LABEL_19;
    }
  }
}

uint64_t CCPOLYZP_PO2CYC_BASE_CONVERT_EXACT_POLY_WORKSPACE_N(uint64_t a1)
{
  return a1 & 0x1FFFFFFFFFFFFFFFLL;
}

uint64_t ccpolyzp_po2cyc_base_convert_exact_poly_ws(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  _QWORD *v24;
  unsigned int v25;
  uint64_t v26;
  double *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;

  v7 = (unsigned int *)*a3;
  if (!ccpolyzp_po2cyc_ctx_eq(*a3, (_DWORD *)*a4))
    return 4294967289;
  v8 = *a2;
  v9 = a4[1];
  v10 = *(_DWORD *)(v9 + 4);
  while (--v10)
    v9 = *(_QWORD *)(v9 + 112);
  if (!ccpolyzp_po2cyc_ctx_eq(*a2, (_DWORD *)v9))
    return 4294967289;
  v11 = *(_DWORD *)(v8 + 4) - 1;
  if (*(_DWORD *)(v8 + 4) != 1)
  {
    do
    {
      v8 = *(_QWORD *)(v8 + 112);
      --v11;
    }
    while (v11);
  }
  v12 = *v7;
  v38 = *(_QWORD *)(a1 + 16);
  v13 = (double *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12);
  cc_clear(8 * v12, v13);
  v14 = *v7;
  v15 = v7[1];
  if ((_DWORD)v15)
  {
    v16 = 0;
    v39 = (*(_DWORD *)(a4[1] + 4) * *(_DWORD *)(*a4 + 4));
    do
    {
      v17 = v7;
      if (v16 < (v15 - 1))
      {
        v18 = v15 - 2;
        v17 = v7;
        do
          v17 = (unsigned int *)*((_QWORD *)v17 + 14);
        while (v16 < v18--);
      }
      v20 = sizeof_struct_ccrns_mul_modulus();
      if ((_DWORD)v14)
      {
        v21 = (unint64_t)(v20 + 7) >> 3;
        v22 = &a4[v21 * v16 + 12];
        v23 = a2 + 1;
        v24 = &v22[v21 * v39];
        v25 = *(_DWORD *)*a3 * v16;
        v26 = v14;
        v27 = v13;
        do
        {
          v28 = v24[1] * a3[v25 + 1]
              - *v24 * (((unint64_t)v24[2] * (unsigned __int128)(unint64_t)a3[v25 + 1]) >> 64);
          if ((uint64_t)(v28 - *v24) >= 0)
            v28 -= *v24;
          *v27 = *v27 + (double)v28 / (double)*((unint64_t *)v17 + 2);
          v29 = v28 * v22[1] - *v22 * ((v28 * (unsigned __int128)(unint64_t)v22[2]) >> 64);
          if (v29 - *v22 >= 0)
            v29 -= *v22;
          if (v16)
            v30 = *v23;
          else
            v30 = 0;
          v31 = *(_QWORD *)(v8 + 16);
          v32 = v30 + v29;
          if (v32 - v31 >= 0)
            v32 -= v31;
          *v23++ = v32;
          ++v27;
          ++v25;
          --v26;
        }
        while (v26);
      }
      ++v16;
    }
    while (v16 != v15);
  }
  if ((_DWORD)v14)
  {
    v33 = a2 + 1;
    do
    {
      v34 = *v13++;
      v35 = a4[2];
      v36 = a4[3] * (unint64_t)(v34 + 0.5)
          - v35 * (((unint64_t)(v34 + 0.5) * (unsigned __int128)(unint64_t)a4[4]) >> 64);
      if (v36 - v35 >= 0)
        v36 -= v35;
      *v33 = (*(_QWORD *)(v8 + 16) & ((*v33 - v36) >> 63)) + *v33 - v36;
      ++v33;
      --v14;
    }
    while (v14);
  }
  result = 0;
  *(_QWORD *)(a1 + 16) = v38;
  return result;
}

unint64_t CCPOLYZP_PO2CYC_BASE_CONVERT_DIVIDE_AND_ROUND_WORKSPACE_N(int a1, int a2)
{
  return (2 * a1)
       + (unint64_t)(a2 * a1)
       + 2 * ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3)
       + 18;
}

uint64_t ccpolyzp_po2cyc_base_convert_divide_and_round_ws(uint64_t a1, _DWORD **a2, uint64_t *a3, uint64_t *a4)
{
  unsigned int *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, unint64_t);
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  void *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, unint64_t);
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  int *v28;
  int v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C874D8];
  if (!ccpolyzp_po2cyc_ctx_eq(*a3, (_DWORD *)*a4))
    return 4294967289;
  v8 = *a2;
  if ((*a2)[1] != 1)
    return 4294967289;
  v9 = a4[1];
  v10 = *(_DWORD *)(v9 + 4);
  if (v10 == 1)
    return 4294967289;
  v11 = 1;
  v12 = a4[1];
  do
  {
    v12 = *(_QWORD *)(v12 + 112);
    ++v11;
  }
  while (v10 != v11);
  v13 = 4294967289;
  if (v10 == 2
    && *((_QWORD *)v8 + 2) == *(_QWORD *)(v12 + 16)
    && *(_QWORD *)(*(_QWORD *)(v9 + 112) + 16) != 0x1FFFFFFFFFFFFFFFLL
    && *(_QWORD *)(v9 + 16) == 0x1FFFFFFFFFFFFFFFLL)
  {
    v15 = *(_QWORD *)(a1 + 16);
    v14 = *(uint64_t (**)(uint64_t, unint64_t))(a1 + 24);
    v16 = (_DWORD *)*a3;
    v17 = sizeof_struct_ccpolyzp_po2cyc();
    v18 = (void *)v14(a1, (v16[1] * *v16) + ((unint64_t)(v17 + 7) >> 3));
    v19 = (_DWORD *)*a3;
    v20 = sizeof_struct_ccpolyzp_po2cyc();
    memmove(v18, a3, (v20 + 8 * (v19[1] * *v19) + 7) & 0xFFFFFFFFFFFFFFF8);
    v21 = *a4;
    v22 = sizeof_struct_ccrns_mul_modulus();
    ccpolyzp_po2cyc_coeff_scalar_mul_ws(a1, (_DWORD **)v18, (unsigned int **)a3, (uint64_t)&a4[((unint64_t)(v22 + 7) >> 3) * (*(_DWORD *)(a4[1] + 4) * *(_DWORD *)(v21 + 4))+ 12+ ((unint64_t)(v22 + 7) >> 3) * *(unsigned int *)(v21 + 4)]);
    LODWORD(v21) = *(_DWORD *)*a3;
    v23 = *(uint64_t (**)(uint64_t, unint64_t))(a1 + 24);
    v24 = sizeof_struct_ccpolyzp_po2cyc();
    v25 = (uint64_t *)v23(a1, (2 * v21) + ((unint64_t)(v24 + 7) >> 3));
    ccpolyzp_po2cyc_init_zero(v25, (_DWORD *)a4[1]);
    v13 = ccpolyzp_po2cyc_base_convert_poly_ws(a1, v25, (uint64_t *)v18, a4);
    if (!(_DWORD)v13)
    {
      v40 = *(_OWORD *)(a4 + 7);
      ccpolyzp_po2cyc_coeff_scalar_mul_ws(a1, (_DWORD **)v25, (unsigned int **)v25, (uint64_t)&v40);
      v26 = *(unsigned int *)*a3;
      if ((_DWORD)v26)
      {
        v28 = (int *)*v25;
        v27 = v25 + 1;
        v29 = *v28;
        v30 = a2 + 1;
        v31 = v27;
        do
        {
          v33 = *v31++;
          v32 = v33;
          v34 = v27[v29];
          v35 = *((_QWORD *)v8 + 2);
          v36 = v34 - v35 * ((*((unint64_t *)v8 + 3) * (unsigned __int128)v34) >> 64);
          if (v36 - v35 >= 0)
            v36 -= v35;
          v37 = v32
              - (((v35 & ((v36 - a4[5]) >> 63)) + v36 - a4[5]) & ((uint64_t)(0xFFFFFFFFFFFFFFELL - v34) >> 63) | v36 & (((0xFFFFFFFFFFFFFFELL - v34) >> 63) - 1));
          *v30++ = (v35 & (v37 >> 63)) + v37;
          ++v29;
          --v26;
        }
        while (v26);
      }
      v39 = a4[6];
      ccpolyzp_po2cyc_coeff_scalar_mul_ws(a1, a2, a2, (uint64_t)&v39);
    }
    *(_QWORD *)(a1 + 16) = v15;
  }
  return v13;
}

unint64_t CCPOLYZP_PO2CYC_BASE_CONVERT_MOD_T_DIVIDE_AND_ROUND_Q_LAST_WORKSPACE_N(unsigned int a1, int a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = CCPOLYZP_PO2CYC_WORKSPACE_N(a1, a2 - 1);
  v4 = CCPOLYZP_PO2CYC_WORKSPACE_N(a1, 1);
  v5 = CCPOLYZP_PO2CYC_CTX_WORKSPACE_N(a1);
  v6 = CCPOLYZP_PO2CYC_CTX_INIT_WORKSPACE_N(1);
  if (v6 <= v4)
    v7 = v4;
  else
    v7 = v6;
  return v4 + v3 + v5 + v7;
}

uint64_t ccpolyzp_po2cyc_base_convert_mod_t_divide_and_round_q_last_ws(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unsigned int *v6;
  unsigned int *v7;
  uint64_t (*v8)(uint64_t, unint64_t);
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t (*v12)(uint64_t, unint64_t);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, unint64_t);
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t result;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t (*v23)(uint64_t, unint64_t);
  uint64_t v24;
  unsigned int **v25;
  unsigned int *v26;
  size_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unsigned int v41;
  uint64_t v43;
  _QWORD *v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  unsigned int *v76;
  unsigned int v77;
  unint64_t *v78;
  _QWORD *__dst;
  unint64_t *__dsta;
  uint64_t v81;
  unsigned int **v82;
  uint64_t v83;
  unsigned int v84;
  int v85;

  v6 = (unsigned int *)*a2;
  v7 = *(unsigned int **)(*a2 + 112);
  if (!ccpolyzp_po2cyc_ctx_eq(*a2, (_DWORD *)*a3) || !*((_QWORD *)v6 + 14))
    return 4294967289;
  v74 = *(_QWORD *)(a1 + 16);
  v75 = a2;
  v8 = *(uint64_t (**)(uint64_t, unint64_t))(a1 + 24);
  v9 = sizeof_struct_ccpolyzp_po2cyc();
  v82 = (unsigned int **)v8(a1, v7[1] * *v7 + ((unint64_t)(v9 + 7) >> 3));
  *v82 = v7;
  v10 = a3[1];
  v11 = *(_DWORD *)(v10 + 4);
  while (--v11)
    v10 = *(_QWORD *)(v10 + 112);
  v84 = *v6;
  v85 = 1;
  v12 = *(uint64_t (**)(uint64_t, unint64_t))(a1 + 24);
  v13 = sizeof_struct_ccpolyzp_po2cyc();
  __dst = (_QWORD *)v12(a1, v84 + ((unint64_t)(v13 + 7) >> 3));
  v14 = *(uint64_t (**)(uint64_t, unint64_t))(a1 + 24);
  v15 = *v6;
  v16 = (unint64_t)(sizeof_struct_ccpolyzp_po2cyc_ctx() + 7) >> 3;
  if (v15 >= 0x80)
    v17 = 128;
  else
    v17 = v15;
  v18 = sizeof_struct_ccrns_mul_modulus();
  v19 = (unsigned int *)v14(a1, v16 + 2 * (v15 + ((unint64_t)(v18 + 7) >> 3) * v17) + 6);
  v83 = *((_QWORD *)v6 + 2);
  result = ccpolyzp_po2cyc_ctx_init_ws(a1, v19, &v84, &v83, 0);
  if (!(_DWORD)result)
  {
    v21 = v75 + 1;
    v76 = v7;
    v22 = &v75[*(_DWORD *)*v75 * v7[1] + 1];
    v23 = *(uint64_t (**)(uint64_t, unint64_t))(a1 + 24);
    v24 = sizeof_struct_ccpolyzp_po2cyc();
    v25 = (unsigned int **)v23(a1, v85 * v84 + ((unint64_t)(v24 + 7) >> 3));
    result = ccpolyzp_po2cyc_init(v25, v19, v22);
    if (!(_DWORD)result)
    {
      result = ccpolyzp_po2cyc_inv_ntt(v25);
      if (!(_DWORD)result)
      {
        v73 = a1;
        v26 = *v25;
        v27 = (sizeof_struct_ccpolyzp_po2cyc() + 8 * v26[1] * *v26 + 7) & 0xFFFFFFFFFFFFFFF8;
        memmove(__dst, v25, v27);
        v28 = v84;
        if (v84)
        {
          v29 = __dst + 1;
          do
          {
            v30 = *(_QWORD *)(v10 + 16);
            v31 = *v29 - v30 * ((*(unint64_t *)(v10 + 24) * (unsigned __int128)(unint64_t)*v29) >> 64);
            if (v31 - v30 >= 0)
              v31 -= v30;
            v32 = a3[9];
            v33 = (v30 - v31) * a3[10]
                - v32 * (((unint64_t)(v30 - v31) * (unsigned __int128)(unint64_t)a3[11]) >> 64);
            if (v33 - v32 >= 0)
              v33 -= v32;
            *v29++ = v33;
            --v28;
          }
          while (v28);
        }
        v34 = v76[1];
        if ((_DWORD)v34)
        {
          v35 = 0;
          v36 = v6[1];
          v37 = v36 - 1;
          v38 = *(unsigned int *)(*a3 + 4);
          v81 = (*(_DWORD *)(a3[1] + 4) * v38);
          v39 = *v76;
          v78 = (unint64_t *)(v25 + 1);
          __dsta = __dst + 1;
          v77 = v36 - 2;
          do
          {
            v40 = v6;
            if (v35 < v37)
            {
              v41 = v77;
              v40 = v6;
              do
                v40 = (_QWORD *)v40[14];
              while (v35 < v41--);
            }
            v43 = sizeof_struct_ccrns_mul_modulus();
            if ((_DWORD)v39)
            {
              v44 = &a3[((unint64_t)(v43 + 7) >> 3) * v81
                      + 12
                      + ((unint64_t)(v43 + 7) >> 3) * v38
                      + v38
                      + ((unint64_t)(v43 + 7) >> 3) * v35];
              v45 = **v82 * v35;
              v46 = v39;
              v47 = v78;
              v48 = __dsta;
              do
              {
                v49 = *v48++;
                v51 = v40[2];
                v50 = v40[3];
                v52 = v49 - v51 * ((v50 * (unsigned __int128)v49) >> 64);
                if ((uint64_t)(v52 - v51) >= 0)
                  v52 -= v51;
                v53 = v52 * v44[1] - *v44 * ((v52 * (unsigned __int128)(unint64_t)v44[2]) >> 64);
                v55 = *v47++;
                v54 = v55;
                v56 = (v55 * (unsigned __int128)v50) >> 64;
                if (v53 - *v44 >= 0)
                  v53 -= *v44;
                v57 = v54 - v51 * v56;
                if ((uint64_t)(v57 - v51) >= 0)
                  v57 -= v51;
                v58 = (unsigned int *)(v53 + v57);
                if ((uint64_t)v58 - v51 >= 0)
                  v58 = (unsigned int *)((char *)v58 - v51);
                v82[++v45] = v58;
                --v46;
              }
              while (v46);
            }
            ++v35;
          }
          while (v35 != v34);
        }
        result = ccpolyzp_po2cyc_fwd_ntt(v82);
        if (!(_DWORD)result)
        {
          v59 = v76[1];
          if ((_DWORD)v59)
          {
            v60 = 0;
            v61 = a3 + 12;
            v62 = a3[1];
            v63 = *(unsigned int *)(*a3 + 4);
            v64 = (*(_DWORD *)(v62 + 4) * v63);
            v65 = *v76;
            do
            {
              v66 = sizeof_struct_ccrns_mul_modulus();
              if ((_DWORD)v65)
              {
                v67 = &v61[((unint64_t)(v66 + 7) >> 3) * v64
                         + ((unint64_t)(v66 + 7) >> 3) * v63
                         + v63
                         + ((unint64_t)(v66 + 7) >> 3) * (v63 - 1)
                         + ((unint64_t)(v66 + 7) >> 3) * v60];
                v68 = **v82 * v60;
                v69 = *(_DWORD *)*v75 * v60;
                v70 = v65;
                do
                {
                  v71 = v21[v69] - (_QWORD)v82[v68 + 1];
                  v72 = ((*v67 & (v71 >> 63)) + v71) * v67[1]
                      - *v67
                      * ((((*v67 & (unint64_t)(v71 >> 63)) + v71) * (unsigned __int128)(unint64_t)v67[2]) >> 64);
                  if (v72 - *v67 >= 0)
                    v72 -= *v67;
                  v21[v69] = v72;
                  ++v68;
                  ++v69;
                  --v70;
                }
                while (v70);
              }
              ++v60;
            }
            while (v60 != v59);
          }
          result = 0;
          *v75 = *(_QWORD *)(*v75 + 112);
        }
        a1 = v73;
      }
    }
  }
  *(_QWORD *)(a1 + 16) = v74;
  return result;
}

uint64_t fipspost_post_hmac(char a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  char *v14;
  char *v15;
  const char *v16;
  const char *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v21[64];
  _OWORD v22[4];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C874D8];
  v2 = ccsha1_di();
  v3 = ccsha256_di();
  v4 = ccsha512_di();
  v5 = ccsha512_256_di();
  v6 = ccsha3_224_di();
  v7 = ccsha3_256_di();
  v8 = ccsha3_384_di();
  v9 = ccsha3_512_di();
  v10 = 0;
  v11 = 0;
  v12 = "\x01\xEE\xD8\x1B\x811*\x16\xFAƨ\x1E\x98\x05\xE1\xD7\x84D[\xFF\x8C愙\xBE\x95\xEB\x4A\x36˰\x034\x97:\xE0\x72\x9E'P\xB4"
  memset(v22, 0, sizeof(v22));
  if ((a1 & 0x10) == 0)
    v12 = "\xEE\xD8\x1B\x811*\x16\xFAƨ\x1E\x98\x05\xE1\xD7\x84D[\xFF\x8C愙\xBE\x95\xEB\x4A\x36˰\x034\x97:\xE0\x72\x9E'P\xB4"
  v21[0] = v2;
  v21[1] = 50;
  v13 = "\x01\xF3\xD9\x84\x1Cx.\x1D\xC8\x4D_\xBD\x95#h;\x8D)\xD1\xD5\x85-:tR\x0482:-_\x19\xA9\xB1\xA0-%M֭\x84ӛ\x97]\xCE\x60j\xBCe\xBD";
  v21[2] = v12;
  v21[3] = 128;
  v21[4] = "\xF0\x6B\xB4\x5B\xD0\x60X'\x82L\xD0\x4D\xA7[hz\x86\xC9\x39\xEF\xAF\xF9\xF1\x32\xDD\xC1\xD7\x04!\b\t\x94=\x94\b"
           "\xF2\x4E\x1D\x77Ư\xA6 B\x19\r8U\x0F\xE0\xE4\x22yr\xFC\xB0\x8F.\x0E\xE3\xF8\x2C\xA6\xAB3\x02\xCC\x7B7\xDD\xCF\xFD"
           "V\xD0\x41\x04gkC\xC2\x24\x90\x03;т\x82\xF9\x1F?\x9B\x01O\x10A\a\x9A^\b\xDE\xD1\xC7\xE62Aq;yٞ\x10'\x8F\x81\x9C"
           "!\xFFQ\ruU\x9B\x85Hn\xDC\x62\x10";
  v21[5] = 20;
  v21[6] = "\x88n\xAEp\xF3\x6B\xD3\x80^\xEB\x12\x74\xB3$\x8F\xCC\xF5\xE1\x5B\x80";
  v21[7] = "sha1";
        "\x1EW\xBEF\xA5\r\xF5\xCE\xC1\xE0N\x93D&QK\x19\xEF\x61\x1F\xD7\x45\xED\x0D\x95\xB2\xEA\x8B\x01\x03\x80m\xACL\x03\b"
        "\xA8,&\x98URk\xDF\x78@\xDE\x0F\x8DO\x03\xEA\x5F\xF4\r(\xD5\x41P\x19\x0F\xAF\xF9\x8B\xB1\x1A\xFD\xEEb7\xF2\xC2\x3C"
        "\xCE\xC1\xE0N\x93D&QK\x19\xEF\x61\x1F\xD7\x45\xED\x0D\x95\xB2\xEA\x8B\x01\x03\x80m\xACL\x03\b\xA8,&\x98URk\xDF\x78"
        "@\xDE\x0F\x8DO\x03\xEA\x5F\xF4\r(\xD5\x41P\x19\x0F\xAF\xF9\x8B\xB1\x1A\xFD\xEE\x14zF\xD6\x7E\xEF\x0B\x5E\x9F\x99"
        "$\n"
        "\xF4\xD3\x14\xA30MX\x02\xD6\x54\x9Aw\x06T'k\x97\x9B\xA3Cg_\xFC\x88\xEF\x03\x9CE\x1B\x96\xE3\xB1\x58\x9D\xD4\x0E\xEE"
        "\x12\x0Eѐ\xAC\xFE\x031aT\xE7\x1A\x2A\xB3\xDD\x3A\x06\xAD\x86\xBDA\xEE\x29\xE0\xF6\xB7\x56\x03ӏ\xC9\xFF\x1C5\x90\xBB"
        "\xF2\xD8\x71\xFA֊\x86wi\xF3\x2A\x34\x75B\x19\x0F1iҖ\xC1\x8A@\x1C\xFD\xAC\x9A\rs\xB3\x88~\xAF\x8F\x87\b\xBA\xB3\x8E"
        "\xD7\xE0\xC9W\x05\xBFՅK|÷\xC8\xEA\xCA\x32A\x88@\xAE\xDE\x68\xE7\xCD\x62\x1EC\x8FmaX;Ea\xFC\xA5G\x19\x04\xBDy\"\x89"
        "Y\xA3\x90\x86L\x8Ap\xA50i\xDA\x41r\xCA\x34\xC0\xEAIn\x12\x8D\u0378\xC3\x01secret-key\x13\x13";
  v21[8] = v3;
  v21[9] = 50;
  v15 = "\x01secret-key\x13\x13";
  if ((a1 & 0x10) == 0)
    v13 = "\xF3\xD9\x84\x1Cx.\x1D\xC8\x4D_\xBD\x95#h;\x8D)\xD1\xD5\x85-:tR\x0482:-_\x19\xA9\xB1\xA0-%M֭\x84ӛ\x97]\xCE\x60j\xBCe\xBD";
  v21[10] = v13;
  v21[11] = 128;
  v21[12] = &unk_1DEE27A68;
  v21[13] = 32;
  v21[14] = "\xC1\xCC\xF9\x1E\x8E\xA5\x8A\x16uk\xE8\xE4\x08\xF3\x08\xC9\xE1\x02\xEA\xE3\x54O\xB66\xDB\x18)4\x80\xAE\xD1\xE1";
  v21[15] = "sha256";
  if ((a1 & 0x10) == 0)
  v21[16] = v4;
  v21[17] = 110;
  v21[18] = v14;
  v21[19] = 128;
  if ((a1 & 0x10) == 0)
    v15 = "secret-key\x13\x13";
  v21[20] = "\x94\x14zF\xD6\x7E\xEF\x0B\x5E\x9F\x99$\n\xF4\xD3\x14\xA30MX\x02\xD6\x54\x9Aw\x06T'k\x97\x9B\xA3Cg_\xFC\x88\xEF\x03\x9CE\x1B\x96\xE3\xB1\x58\x9D\xD4\x0E\xEE\x12\x0Eѐ\xAC\xFE\x031aT\xE7\x1A\x2A\xB3\xDD\x3A\x06\xAD\x86\xBDA\xEE\x29\xE0\xF6\xB7\x56\x03ӏ\xC9\xFF\x1C5\x90\xBB\xF2\xD8\x71\xFA֊\x86wi\xF3\x2A\x34\x75B\x19\x0F1iҖ\xC1\x8A@\x1C\xFD\xAC\x9A\rs\xB3\x88~\xAF\x8F\x87\b\xBA\xB3\x8E\xD7\xE0\xC9W\x05\xBFՅK|÷\xC8\xEA\xCA\x32A\x88@\xAE\xDE\x68\xE7\xCD\x62\x1EC\x8FmaX;Ea\xFC\xA5G\x19\x04\xBDy\"\x89Y\xA3\x90\x86L\x8Ap\xA50i\xDA\x41r\xCA\x34\xC0\xEAIn\x12\x8D\u0378\xC3\x01secret-key\x13\x13";
  v21[21] = 64;
  v21[22] = "W\x05\xBFՅK|÷\xC8\xEA\xCA\x32A\x88@\xAE\xDE\x68\xE7\xCD\x62\x1EC\x8FmaX;Ea\xFC\xA5G\x19\x04\xBDy\"\x89Y\xA3\x90\x86L\x8Ap\xA50i\xDA\x41r\xCA\x34\xC0\xEAIn\x12\x8D\u0378\xC3\x01secret-key\x13\x13";
  v21[23] = "sha512";
  if ((a1 & 0x10) != 0)
    v16 = "\x01secret-key";
  else
    v16 = "secret-key";
  v21[24] = v5;
  v21[25] = 10;
  if ((a1 & 0x10) != 0)
    v17 = "\x01value to digest";
  else
    v17 = "value to digest";
  v21[26] = v15;
  v21[27] = 15;
  v21[28] = "value to digest";
  v21[29] = 32;
  v21[31] = "sha512/256";
  v21[32] = v6;
  v21[33] = 10;
  v21[34] = v16;
  v21[35] = 15;
  v21[36] = v17;
  v21[37] = 28;
  v21[38] = &unk_1DEE27AE9;
  v21[39] = "sha3_224";
  v21[40] = v7;
  v21[41] = 10;
  v21[42] = v16;
  v21[43] = 15;
  v21[44] = v17;
  v21[45] = 32;
  v21[46] = "\xE6\x5B\x43\x9A֞-\x0F\xE2\xC4\x15KUO\xE9\x96\x2A\x9A\x1E\xCE\x26\x84eB\xB3\xED\x8F\xCB\x16\xF3\x67\xC8\xDE\x41"
            "x\xB5\xFA\xF0\x52\xAB\x3E@\x9Fq\x15E\x95\n"
            "D\f\x8B\xFFv1\xFA\x0F\xE5\xD6\x1B\xC4\xCA_\xF9\xCE\x14\xE4\x52\x6E]|\x1D_Ъ\x9Dc\"\x12b~";
  v21[47] = "sha3_256";
  v21[48] = v8;
  v21[49] = 10;
  v21[50] = v16;
  v21[51] = 15;
  v21[52] = v17;
  v21[53] = 48;
  v21[54] = "\xDE\x41x\xB5\xFA\xF0\x52\xAB\x3E@\x9Fq\x15E\x95\nD\f\x8B\xFFv1\xFA\x0F\xE5\xD6\x1B\xC4\xCA_\xF9\xCE\x14\xE4\x52\x6E]|\x1D_Ъ\x9Dc\"\x12b~";
  v21[55] = "sha3_384";
  v21[56] = v9;
  v21[57] = 10;
  v21[58] = v16;
  v21[59] = 15;
  v21[60] = v17;
  v21[61] = 64;
  v21[62] = "\xEB\x10\xD9e\x80\xBF\x8E\xEE\xE5\x46\r^X7\xF5\x55\x57\x09\x01\x139\xB96\xA6{u7\x7F]\x18\xAE\xDB\xF7\x92\xB5"
            "\xA6\xF4\xA8\x53\x7B@\xD5\x5E\xC5\x0C\x8D}[I4\xC3\x04\xCC\xEB\xF6\x15\x26\x4B+v\x16\xB9\xBF\x1A";
  v21[63] = "sha3_512";
  do
  {
    v18 = &v21[v10];
    cchmac(v21[v10], v21[v10 + 1], v21[v10 + 2], v21[v10 + 3], (char *)v21[v10 + 4], (uint64_t)v22);
    if (cc_cmp_safe(v18[5], (char *)v22, (char *)v18[6]))
    {
      v19 = mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: digest: %s\n", v19, "fipspost_post_hmac", 235, (const char *)v18[7]);
      v11 = 4294967221;
    }
    v10 += 8;
  }
  while (v10 != 64);
  return v11;
}

uint64_t cced448_sign_internal(uint64_t *a1, char *a2, unint64_t a3, char *a4, char *a5, char *a6, uint64_t (**a7)(_QWORD, uint64_t, char *))
{
  uint64_t v14;
  uint64_t v15;
  void *v17;
  __int128 v18;
  uint64_t (*v19)(_QWORD *, uint64_t);
  void (*v20)(uint64_t);
  uint64_t v21[7];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C874D8];
  v14 = (*a7)(a7, 57, (char *)v21);
  if ((_DWORD)v14)
    return v14;
  v17 = cc_malloc_clear(0x700uLL);
  v18 = xmmword_1DEE27B10;
  v19 = cc_ws_alloc;
  v20 = cc_ws_free;
  if (!v17)
    return 4294967283;
  v15 = cced448_sign_ws((uint64_t)&v17, a1, a2, a3, a4, a5, a6, (char *)v21, (uint64_t (**)(_QWORD, uint64_t, uint64_t *))a7);
  v20((uint64_t)&v17);
  return v15;
}

uint64_t cced448_sign_ws(uint64_t a1, uint64_t *a2, char *a3, unint64_t a4, char *a5, char *a6, char *a7, char *a8, uint64_t (**a9)(_QWORD, uint64_t, uint64_t *))
{
  uint64_t v13;
  unint64_t *v14;
  uint64_t *v15;
  _BYTE *v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v33;
  uint64_t v35;
  uint64_t v36;
  char v40[57];
  _OWORD __s[8];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C874D8];
  v35 = *a2;
  v13 = cczp_n((uint64_t)a2);
  v36 = *(_QWORD *)(a1 + 16);
  v14 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v13);
  v15 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v13);
  v33 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v13);
  v16 = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 3 * v13);
  memset(__s, 0, 126);
  ccshake256(0x39uLL, a7, 0x72uLL, (char *)__s);
  LOBYTE(__s[0]) &= 0xFCu;
  BYTE7(__s[3]) |= 0x80u;
  if (v13)
  {
    v17 = (unint64_t *)__s;
    v18 = v14;
    v19 = v13;
    do
    {
      v20 = *v17++;
      *v18++ = v20;
      --v19;
    }
    while (v19);
  }
  v21 = cced448_scalar_mult_base_masked_ws(a1, a2, a9, (uint64_t)v16, v14);
  if ((_DWORD)v21)
    goto LABEL_24;
  v21 = ccec_affinify_ws(a1, (uint64_t)a2);
  if ((_DWORD)v21)
    goto LABEL_24;
  v22 = 0;
  v23 = (uint64_t)&a2[5 * v35 + 4];
  v24 = &v16[8 * *a2];
  do
  {
    *(_QWORD *)&v40[v22] = *(_QWORD *)&v24[v22];
    v22 += 8;
  }
  while (v22 != 56);
  v40[56] = *v16 << 7;
  if (cc_cmp_safe(57, a6, v40))
  {
    v31 = 4294967289;
    goto LABEL_23;
  }
  v25 = a8 ? 57 : 0;
  v26 = a8 ? 69 : 57;
  cced448_shake_to_scalar_ws(a1, a2, v15, v25, a8, v26, (char *)&__s[3] + 9, a4, a5);
  v21 = cced448_scalar_mult_base_masked_ws(a1, a2, a9, (uint64_t)v16, (unint64_t *)v15);
  if ((_DWORD)v21 || (v21 = ccec_affinify_ws(a1, (uint64_t)a2), (_DWORD)v21))
  {
LABEL_24:
    v31 = v21;
  }
  else
  {
    v27 = 0;
    v28 = &v16[8 * *a2];
    do
    {
      *(_QWORD *)&a3[v27] = *(_QWORD *)&v28[v27];
      v27 += 8;
    }
    while (v27 != 56);
    a3[56] = *v16 << 7;
    cced448_shake_to_scalar_ws(a1, a2, v33, 0x39uLL, a3, 0x39uLL, a6, a4, a5);
    cczp_mul_ws(a1, v23);
    cczp_add_ws(a1, v23);
    if (v13)
    {
      v29 = a3 + 64;
      do
      {
        v30 = *v14++;
        *(_QWORD *)(v29 - 7) = v30;
        v29 += 8;
        --v13;
      }
      while (v13);
    }
    v31 = 0;
    a3[113] = 0;
  }
LABEL_23:
  cc_clear(0x7EuLL, __s);
  *(_QWORD *)(a1 + 16) = v36;
  return v31;
}

uint64_t cced448_sign(uint64_t (**a1)(_QWORD, uint64_t, char *), char *a2, unint64_t a3, char *a4, char *a5, char *a6)
{
  char v12;
  uint64_t *v18;
  uint64_t v19;
  char v21;

  v12 = 0;
  v21 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v12 = 1;
    }
  }
  v21 = v12;
  v18 = (uint64_t *)ccec_cp_ed448();
  v19 = cced448_sign_internal(v18, a2, a3, a4, a5, a6, a1);
  cc_disable_dit(&v21);
  return v19;
}

unint64_t ccwrap_unwrapped_size(unint64_t a1)
{
  char v1;
  unint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  if (a1 >= 8)
    v7 = a1 - 8;
  else
    v7 = 0;
  cc_disable_dit(&v9);
  return v7;
}

uint64_t cckyber_poly_compress_d1(uint64_t result, uint64_t a2)
{
  uint64_t i;
  uint64_t v3;
  int v4;

  for (i = 0; i != 32; ++i)
  {
    v3 = 0;
    v4 = 0;
    *(_BYTE *)(result + i) = 0;
    do
    {
      v4 |= (((1290168
             * (unint64_t)(((int)((((*(__int16 *)(a2 + 2 * v3) >> 15) & 0xD01)
                                                      + *(__int16 *)(a2 + 2 * v3)) << 16) >> 15)
                                              + 1664)) >> 32) & 1) << v3;
      *(_BYTE *)(result + i) = v4;
      ++v3;
    }
    while (v3 != 8);
    a2 += 16;
  }
  return result;
}

_BYTE *cckyber_poly_compress_d4(_BYTE *result, uint64_t a2)
{
  uint64_t i;
  uint64_t v3;
  char v4;
  char v5;
  unsigned int v6;
  _BYTE v7[4];

  for (i = 0; i != 128; ++i)
  {
    v3 = 0;
    v4 = 1;
    do
    {
      v5 = v4;
      v6 = *(__int16 *)(a2 + 2 * (v3 | (2 * i)));
      *(_WORD *)&v7[2 * v3] = ((1290168
                              * (unint64_t)(((int)((((v6 >> 15) & 0xD01) + v6) << 16) >> 12) + 1664)) >> 32) & 0xF;
      v3 = 1;
      v4 = 0;
    }
    while ((v5 & 1) != 0);
    *result++ = v7[0] & 0xF | (16 * v7[2]);
  }
  return result;
}

uint64_t cckyber_poly_compress_d5(uint64_t result, int16x8_t *a2)
{
  uint64_t v2;
  int8x16_t v3;
  uint64x2_t v4;
  int8x16_t v5;
  uint32x2_t v6;
  int8x16_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int8x16_t v10;
  int8x16_t v11;
  _BYTE *v12;
  int8x16_t v13;
  int8x16_t v14;

  v2 = 0;
  v3 = (int8x16_t)vdupq_n_s16(0xD01u);
  v4 = (uint64x2_t)vdupq_n_s64(0x680uLL);
  v5 = (int8x16_t)vdupq_n_s64(0xFFFFFFE0uLL);
  v6 = (uint32x2_t)vdup_n_s32(0x13AFB8u);
  v7.i64[0] = 0x1F001F001F001FLL;
  v7.i64[1] = 0x1F001F001F001FLL;
  do
  {
    v8 = *a2++;
    v9 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vcltzq_s16(v8), v3), v8);
    v10 = (int8x16_t)vmovl_s16(*(int16x4_t *)v9.i8);
    v11 = (int8x16_t)vmovl_high_s16(v9);
    v12 = (_BYTE *)(result + v2);
    v13 = (int8x16_t)vuzp1q_s16((int16x8_t)vuzp2q_s32((int32x4_t)vmull_u32((uint32x2_t)vmovn_s64((int64x2_t)vandq_s8((int8x16_t)vaddw_u32(v4, (uint32x2_t)vshl_n_s32(*(int32x2_t *)v10.i8, 5uLL)), v5)), v6), (int32x4_t)vmull_u32((uint32x2_t)vmovn_s64((int64x2_t)vandq_s8((int8x16_t)vaddw_u32(v4, (uint32x2_t)vshl_n_s32((int32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL), 5uLL)), v5)), v6)), (int16x8_t)vuzp2q_s32((int32x4_t)vmull_u32((uint32x2_t)vmovn_s64((int64x2_t)vandq_s8((int8x16_t)vaddw_u32(
                                                                                                 v4,
                                                                                                 (uint32x2_t)vshl_n_s32(*(int32x2_t *)v11.i8, 5uLL)),
                                                                                    v5)),
                                                 v6),
                                    (int32x4_t)vmull_u32((uint32x2_t)vmovn_s64((int64x2_t)vandq_s8((int8x16_t)vaddw_u32(v4, (uint32x2_t)vshl_n_s32((int32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL), 5uLL)), v5)), v6)));
    v14 = vandq_s8(v13, v7);
    *v12 = v14.i8[0] | (32 * v14.i8[2]);
    v12[2] = (16 * v14.i8[8]) | (v14.u16[3] >> 1);
    v12[1] = (4 * v14.i8[4]) | (v14.u16[1] >> 3) | (v14.i8[6] << 7);
    v12[3] = (2 * v14.i8[10]) | (v14.u16[4] >> 4) | (v14.i8[12] << 6);
    v12[4] = (8 * v13.i8[14]) | (v14.u16[6] >> 2);
    v2 += 5;
  }
  while (v2 != 160);
  return result;
}

uint64_t cckyber_poly_compress_d10(uint64_t result, int16x4_t *a2)
{
  uint64_t v2;
  int8x8_t v3;
  uint64x2_t v4;
  int8x16_t v5;
  uint32x2_t v6;
  int16x4_t v7;
  int8x16_t v8;
  _BYTE *v9;

  v2 = 0;
  v3 = (int8x8_t)vdup_n_s16(0xD01u);
  v4 = (uint64x2_t)vdupq_n_s64(0x680uLL);
  v5 = (int8x16_t)vdupq_n_s64(0xFFFFFE80uLL);
  v6 = (uint32x2_t)vdup_n_s32(0x13AFB8u);
  do
  {
    v7 = *a2++;
    v8 = (int8x16_t)vmovl_s16(vadd_s16((int16x4_t)vand_s8((int8x8_t)vcltz_s16(v7), v3), v7));
    v9 = (_BYTE *)(result + v2);
    v8.i64[0] = *(_QWORD *)&vmovn_s32(vuzp2q_s32((int32x4_t)vmull_u32((uint32x2_t)vmovn_s64((int64x2_t)vandq_s8((int8x16_t)vaddw_u32(v4, (uint32x2_t)vshl_n_s32(*(int32x2_t *)v8.i8, 0xAuLL)), v5)), v6), (int32x4_t)vmull_u32((uint32x2_t)vmovn_s64((int64x2_t)vandq_s8((int8x16_t)vaddw_u32(v4, (uint32x2_t)vshl_n_s32((int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL), 0xAuLL)), v5)), v6))) & 0x3FF03FF03FF03FFLL;
    *v9 = v8.i8[0];
    v9[1] = (4 * v8.i8[2]) | v8.i8[1];
    v9[2] = (16 * v8.i8[4]) | (v8.u16[1] >> 6);
    v9[3] = (v8.i8[6] << 6) | (v8.u16[2] >> 4);
    v9[4] = v8.u16[3] >> 2;
    v2 += 5;
  }
  while (v2 != 320);
  return result;
}

uint64_t cckyber_poly_compress_d11(uint64_t result, int16x8_t *a2)
{
  uint64_t v2;
  int8x16_t v3;
  uint32x2_t v4;
  int64x2_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int8x16_t v8;
  int8x16_t v9;
  unsigned __int128 v10;
  _BYTE *v11;

  v2 = 0;
  v3 = (int8x16_t)vdupq_n_s16(0xD01u);
  v4 = (uint32x2_t)vdup_n_s32(0x13AFB8u);
  v5 = vdupq_n_s64(0x7FF62C00uLL);
  do
  {
    v6 = *a2++;
    v7 = vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vcltzq_s16(v6), v3), v6);
    v8 = (int8x16_t)vmovl_s16(*(int16x4_t *)v7.i8);
    v9 = (int8x16_t)vmovl_high_s16(v7);
    v10 = *(_OWORD *)&vuzp1q_s16((int16x8_t)vaddhn_high_s64(vaddhn_s64((int64x2_t)vmull_u32((uint32x2_t)vshl_n_s32(*(int32x2_t *)v8.i8, 0xBuLL), v4), v5), (int64x2_t)vmull_u32((uint32x2_t)vshl_n_s32((int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL), 0xBuLL), v4), v5), (int16x8_t)vaddhn_high_s64(vaddhn_s64((int64x2_t)vmull_u32((uint32x2_t)vshl_n_s32(*(int32x2_t *)v9.i8, 0xBuLL), v4), v5), (int64x2_t)vmull_u32((uint32x2_t)vshl_n_s32((int32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL), 0xBuLL), v4),
                                     v5)) & __PAIR128__(0x7FF07FF07FF07FFLL, 0x7FF07FF07FF07FFLL);
    v11 = (_BYTE *)(result + v2);
    *v11 = v10;
    v11[3] = WORD2(v10) >> 2;
    v11[4] = (2 * BYTE6(v10)) | ((WORD2(v10) & 0x400) != 0);
    v11[1] = (8 * BYTE2(v10)) | BYTE1(v10);
    v11[2] = (BYTE4(v10) << 6) | (WORD1(v10) >> 5);
    v11[7] = WORD5(v10) >> 1;
    v11[5] = (16 * BYTE8(v10)) | (WORD3(v10) >> 7);
    v11[8] = (4 * BYTE12(v10)) | (WORD5(v10) >> 9) & 3;
    v11[6] = (BYTE10(v10) << 7) | (WORD4(v10) >> 4);
    v11[9] = (32 * BYTE14(v10)) | (WORD6(v10) >> 6);
    v11[10] = HIWORD(v10) >> 3;
    v2 += 11;
  }
  while (v2 != 352);
  return result;
}

_WORD *cckyber_poly_decompress_d1(_WORD *result, uint64_t a2)
{
  uint64_t i;
  int j;

  for (i = 0; i != 32; ++i)
  {
    for (j = 0; j != 8; ++j)
      *result++ = (3329 * ((*(unsigned __int8 *)(a2 + i) >> j) & 1u) + 1) >> 1;
  }
  return result;
}

_WORD *cckyber_poly_decompress_d4(_WORD *result, uint64_t a2)
{
  uint64_t i;

  for (i = 0; i != 128; ++i)
  {
    *result = (3329 * (*(_BYTE *)(a2 + i) & 0xFu) + 8) >> 4;
    result[1] = (3329 * (*(_BYTE *)(a2 + i) >> 4) + 8) >> 4;
    result += 2;
  }
  return result;
}

_WORD *cckyber_poly_decompress_d5(_WORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  unsigned int v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _BYTE v9[8];
  uint64_t v10;

  v2 = 0;
  v10 = *MEMORY[0x1E0C874D8];
  do
  {
    v3 = 0;
    v4 = (_BYTE *)(a2 + 5 * v2);
    v9[0] = *v4;
    v5 = v4[1];
    HIDWORD(v6) = v5;
    LODWORD(v6) = v9[0] << 24;
    v9[1] = v6 >> 29;
    v9[2] = v5 >> 2;
    v7 = v4[2];
    HIDWORD(v6) = v7;
    LODWORD(v6) = v5 << 24;
    v9[3] = v6 >> 31;
    v8 = v4[3];
    HIDWORD(v6) = v8;
    LODWORD(v6) = v7 << 24;
    v9[4] = v6 >> 28;
    v9[5] = v8 >> 1;
    HIDWORD(v6) = v4[4];
    LODWORD(v6) = v8 << 24;
    v9[6] = v6 >> 30;
    v9[7] = HIDWORD(v6) >> 3;
    do
      *result++ = (3329 * (v9[v3++] & 0x1Fu) + 16) >> 5;
    while (v3 != 8);
    ++v2;
  }
  while (v2 != 32);
  return result;
}

uint64_t cckyber_poly_decompress_d10(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  _WORD v10[4];
  uint64_t v11;

  v2 = 0;
  v11 = *MEMORY[0x1E0C874D8];
  do
  {
    v3 = 0;
    v4 = (unsigned __int8 *)(a2 + 5 * v2);
    v5 = v4[1];
    v10[0] = *v4 | (unsigned __int16)((_WORD)v5 << 8);
    v6 = v5 >> 2;
    v7 = v4[2];
    v10[1] = v6 | ((_WORD)v7 << 6);
    v8 = v7 >> 4;
    v9 = v4[3];
    v10[2] = v8 | (16 * v9);
    v10[3] = (v9 >> 6) | (4 * v4[4]);
    do
    {
      *(_WORD *)(result + v3 * 2) = (3329 * (v10[v3] & 0x3FFu) + 512) >> 10;
      ++v3;
    }
    while (v3 != 4);
    ++v2;
    result += 8;
  }
  while (v2 != 64);
  return result;
}

uint64_t cckyber_poly_decompress_d11(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _WORD v16[8];
  uint64_t v17;

  v2 = 0;
  v17 = *MEMORY[0x1E0C874D8];
  do
  {
    v3 = 0;
    v4 = (unsigned __int8 *)(a2 + 11 * v2);
    v5 = v4[1];
    v16[0] = *v4 | (unsigned __int16)((_WORD)v5 << 8);
    v6 = v5 >> 3;
    v7 = v4[2];
    v16[1] = v6 | (32 * v7);
    LOWORD(v6) = (v7 >> 6) | (4 * v4[3]);
    v8 = v4[4];
    v16[2] = v6 | ((_WORD)v8 << 10);
    v9 = v8 >> 1;
    v10 = v4[5];
    v16[3] = v9 | ((_WORD)v10 << 7);
    v11 = v10 >> 4;
    v12 = v4[6];
    v16[4] = v11 | (16 * v12);
    LOWORD(v11) = (v12 >> 7) | (2 * v4[7]);
    v13 = v4[8];
    v16[5] = v11 | ((_WORD)v13 << 9);
    v14 = v13 >> 2;
    v15 = v4[9];
    v16[6] = v14 | ((_WORD)v15 << 6);
    v16[7] = (v15 >> 5) | (8 * v4[10]);
    do
    {
      *(_WORD *)(result + v3 * 2) = (3329 * (v16[v3] & 0x7FFu) + 1024) >> 11;
      ++v3;
    }
    while (v3 != 8);
    ++v2;
    result += 16;
  }
  while (v2 != 32);
  return result;
}

uint64_t ccsae_verify_commitment(unint64_t **a1, unsigned __int8 *a2)
{
  char v4;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  _QWORD **v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  rsize_t *v23;
  uint64_t v24;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t (*v32)(_QWORD *, uint64_t);
  void (*v33)(uint64_t);
  char v34;
  char __s[64];
  uint64_t v36;

  v4 = 0;
  v36 = *MEMORY[0x1E0C874D8];
  v34 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v34 = v4;
  v10 = *a1;
  v30[0] = cc_malloc_clear(288 * **a1);
  v30[1] = 36 * *v10;
  v31 = 0;
  v32 = cc_ws_alloc;
  v33 = cc_ws_free;
  if (!v30[0])
  {
    v24 = 4294967283;
    goto LABEL_23;
  }
  if (*((unsigned __int8 *)a1 + 24) != CCSAE_STATE_COMMIT_GENERATED)
  {
    v24 = 4294967210;
    cc_ws_free((uint64_t)v30);
    goto LABEL_23;
  }
  v11 = a1[1];
  v29 = (uint64_t)a1[2];
  v12 = (uint64_t *)*a1;
  v13 = **a1;
  v14 = (unint64_t)(cczp_bitlen((uint64_t)*a1) + 7) >> 3;
  v26 = (unint64_t *)cc_ws_alloc(v30, v13);
  v15 = v32(v30, 3 * v13);
  v28 = v32(v30, 3 * v13);
  v27 = v32(v30, 3 * v13);
  v16 = (unint64_t *)v32(v30, 3 * v13);
  v17 = a1 + 18;
  ccn_read_uint(v13, &a1[2 * **a1 + 18], v14, a2);
  v18 = &a2[v14];
  ccn_read_uint(v13, &a1[7 * **a1 + 18], v14, v18);
  ccn_read_uint(v13, &a1[8 * **a1 + 18], v14, &v18[v14]);
  if (ccn_n(v13, &a1[2 * **a1 + 18]) == 1 && v17[2 * **a1] == (_QWORD *)1)
    goto LABEL_25;
  v19 = ccec_validate_scalar(v12, (unint64_t *)&v17[2 * **a1]);
  if (!(_DWORD)v19)
  {
    v20 = **a1;
    if (ccn_cmp(v13, (unint64_t *)&v17[2 * v20], (unint64_t *)&v17[3 * v20])
      && ccn_cmp(v13, (unint64_t *)&v17[7 * v20], (unint64_t *)&v17[5 * v20])
      && ccn_cmp(v13, (unint64_t *)&v17[8 * v20], (unint64_t *)&v17[6 * v20]))
    {
      v19 = ccec_validate_point_and_projectify_ws((uint64_t)v30, v12, v28, (unint64_t *)&v17[7 * v20]);
      if (!(_DWORD)v19)
      {
        v19 = ccec_projectify_ws((uint64_t)v30, (uint64_t)v12);
        if (!(_DWORD)v19)
        {
          v19 = ccec_mult_blinded_ws((uint64_t)v30, v12, v27, (unint64_t *)&v17[2 * **a1], v15, (uint64_t (**)(_QWORD, uint64_t, uint64_t *))v11);
          if (!(_DWORD)v19)
          {
            ccec_full_add_ws((uint64_t)v30, (uint64_t)v12);
            v19 = ccec_mult_blinded_ws((uint64_t)v30, v12, (uint64_t)v16, (unint64_t *)&v17[4 * **a1], v15, (uint64_t (**)(_QWORD, uint64_t, uint64_t *))v11);
            if (!(_DWORD)v19)
            {
              v19 = ccec_affinify_ws((uint64_t)v30, (uint64_t)v12);
              if (!(_DWORD)v19)
              {
                v21 = (uint64_t)&v12[5 * v13 + 4];
                v22 = (unint64_t *)v12;
                v23 = (rsize_t *)v29;
                ccsae_generate_keyseed_ws((uint64_t)v30, v22, v29, v16, (uint64_t)__s);
                cczp_add_ws((uint64_t)v30, v21);
                v24 = ccsae_gen_keys_ws((uint64_t)v30, (uint64_t)a1, __s, v26);
                if (!(_DWORD)v24)
                  *((_BYTE *)a1 + 24) |= CCSAE_STATE_COMMIT_VERIFIED;
                goto LABEL_20;
              }
            }
          }
        }
      }
      goto LABEL_24;
    }
LABEL_25:
    v24 = 4294967289;
    goto LABEL_26;
  }
LABEL_24:
  v24 = v19;
LABEL_26:
  v23 = (rsize_t *)v29;
LABEL_20:
  cc_clear(*v23, __s);
  v31 = 0;
  v33((uint64_t)v30);
LABEL_23:
  cc_disable_dit(&v34);
  return v24;
}

uint64_t ccsae_generate_keyseed_ws(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  _OWORD v20[2];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C874D8];
  v9 = *a2;
  v10 = (unint64_t)(cczp_bitlen((uint64_t)a2) + 7) >> 3;
  memset(v20, 0, sizeof(v20));
  v11 = *(_QWORD *)(a1 + 16);
  v12 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v9);
  v13 = ccn_write_uint_padded(v9, a4, v10, v12);
  MEMORY[0x1E0C86820](v13, v14, v15, v16);
  v18 = (_QWORD *)((char *)v20 - v17);
  cchmac_init(a3, (_OWORD *)((char *)v20 - v17), 0x20uLL, (char *)v20);
  cchmac_update(a3, v18, v10, v12);
  cchmac_final(a3, v18, a5);
  result = cc_clear(((*(_QWORD *)(a3 + 8) + *(_QWORD *)(a3 + 16) + 19) & 0xFFFFFFFFFFFFFFF8) + *(_QWORD *)(a3 + 8), v18);
  *(_QWORD *)(a1 + 16) = v11;
  return result;
}

uint64_t ccchacha20(_DWORD *a1, _DWORD *a2, int a3, unint64_t a4, int8x16_t *a5, int8x16_t *a6)
{
  char v11;
  char v18;
  int32x4_t __s[8];
  uint64_t v20;
  uint64_t v21;

  v11 = 0;
  v21 = *MEMORY[0x1E0C874D8];
  v18 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v11 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v11 = 1;
    }
  }
  v18 = v11;
  v20 = 0;
  memset(__s, 0, sizeof(__s));
  ccchacha20_init((uint64_t)__s, a1);
  ccchacha20_setnonce(__s, a2);
  ccchacha20_setcounter((uint64_t)__s, a3);
  _ccchacha20_xor(__s, a4, a6, a5);
  ccchacha20_final(__s);
  cc_disable_dit(&v18);
  return 0;
}

uint64_t ccchacha20_setcounter(uint64_t a1, int a2)
{
  char v2;
  char v9;

  v2 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v9 = v2;
  *(_DWORD *)(a1 + 48) = a2;
  cc_disable_dit(&v9);
  return 0;
}

uint64_t ccchacha20_final(void *__s)
{
  char v1;
  char v8;

  v1 = 0;
  v8 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v8 = v1;
  cc_clear(0x88uLL, __s);
  cc_disable_dit(&v8);
  return 0;
}

uint64_t ccpoly1305(uint64_t a1, unint64_t a2, unsigned int *a3, uint64_t a4)
{
  char v7;
  char v14;
  _OWORD v15[6];
  uint64_t v16;

  v7 = 0;
  v16 = *MEMORY[0x1E0C874D8];
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v7 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v7 = 1;
    }
  }
  v14 = v7;
  memset(v15, 0, sizeof(v15));
  ccpoly1305_init((uint64_t)v15, a1);
  ccpoly1305_update((uint64_t)v15, a2, a3);
  ccpoly1305_final((uint64_t)v15, a4);
  cc_disable_dit(&v14);
  return 0;
}

uint64_t ccchacha20poly1305_incnonce()
{
  char v0;
  char v7;

  v0 = 0;
  v7 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v0 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v0 = 1;
    }
  }
  v7 = v0;
  cc_disable_dit(&v7);
  return 1;
}

uint64_t ccchacha20poly1305_aad(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int *a4)
{
  char v6;
  uint64_t v12;
  char v14;

  v6 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v14 = v6;
  if (*(_BYTE *)(a2 + 248) == 2)
  {
    ccpoly1305_update(a2 + 136, a3, a4);
    v12 = 0;
    *(_QWORD *)(a2 + 232) += a3;
  }
  else
  {
    v12 = 1;
  }
  cc_disable_dit(&v14);
  return v12;
}

uint64_t ccchacha20poly1305_encrypt_oneshot(uint64_t a1, _DWORD *a2, _DWORD *a3, unint64_t a4, unsigned int *a5, unint64_t a6, int8x16_t *a7, int8x16_t *a8, uint64_t a9)
{
  char v15;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  int32x4_t __s[16];
  uint64_t v28;

  v15 = 0;
  v28 = *MEMORY[0x1E0C874D8];
  v26 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v15 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v15 = 1;
    }
  }
  v26 = v15;
  memset(__s, 0, sizeof(__s));
  v21 = ccchacha20poly1305_init(a1, (uint64_t)__s, a2);
  v22 = ccchacha20poly1305_setnonce(v21, __s, a3);
  v23 = ccchacha20poly1305_aad(v22, (uint64_t)__s, a4, a5);
  v24 = ccchacha20poly1305_encrypt(v23, (uint64_t)__s, a6, a7, a8);
  ccchacha20poly1305_finalize(v24, (uint64_t)__s, a9);
  ccchacha20_final(__s);
  cc_disable_dit(&v26);
  return 0;
}

uint64_t ccchacha20poly1305_decrypt_oneshot(uint64_t a1, _DWORD *a2, _DWORD *a3, unint64_t a4, unsigned int *a5, unint64_t a6, int8x16_t *a7, int8x16_t *a8, char *a9)
{
  char v15;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  int32x4_t __s[16];
  uint64_t v29;

  v15 = 0;
  v29 = *MEMORY[0x1E0C874D8];
  v27 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v15 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v15 = 1;
    }
  }
  v27 = v15;
  memset(__s, 0, sizeof(__s));
  v21 = ccchacha20poly1305_init(a1, (uint64_t)__s, a2);
  v22 = ccchacha20poly1305_setnonce(v21, __s, a3);
  v23 = ccchacha20poly1305_aad(v22, (uint64_t)__s, a4, a5);
  v24 = ccchacha20poly1305_decrypt(v23, (uint64_t)__s, a6, a7, a8);
  v25 = ccchacha20poly1305_verify(v24, (uint64_t)__s, a9);
  ccchacha20_final(__s);
  cc_disable_dit(&v27);
  return v25;
}

uint64_t ccvrf_irtf_ed25519_derive_scalar_internal(uint64_t a1, char *a2, void *a3, void *a4)
{
  _BYTE __src[31];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C874D8];
  ccdigest(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), a2, (uint64_t)__src);
  __src[0] &= 0xF8u;
  v9 = v9 & 0x3F | 0x40;
  memcpy(a3, __src, *(_QWORD *)(a1 + 32));
  memcpy(a4, &__src[*(_QWORD *)(a1 + 32)], *(_QWORD *)(a1 + 32));
  cc_clear(0x40uLL, __src);
  return 0;
}

uint64_t ccvrf_irtf_ed25519_derive_public_key_internal(uint64_t a1, char *a2, _DWORD *a3)
{
  int8x16_t __s;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C874D8];
  ccdigest(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), a2, (uint64_t)&__s);
  __s.i8[0] &= 0xF8u;
  v6 = v6 & 0x3F | 0x40;
  ge_scalarmult_base(a3, &__s);
  cc_clear(0x40uLL, &__s);
  return 0;
}

uint64_t ccvrf_irtf_ed25519_derive_public_key(uint64_t a1, char *a2, uint64_t a3)
{
  _OWORD v5[10];

  memset(v5, 0, sizeof(v5));
  ccvrf_irtf_ed25519_derive_public_key_internal(a1, a2, v5);
  ge_p3_tobytes(a3, (int *)v5);
  return 0;
}

uint64_t ccvrf_derive_public_key(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v9;
  uint64_t v15;
  char v17;

  v9 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v9 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v9 = 1;
    }
  }
  v17 = v9;
  if (ccvrf_sizeof_secret_key(a1) == a2 && ccvrf_sizeof_public_key(a1) == a4)
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 56))(a1, a3, a5);
  else
    v15 = 4294967289;
  cc_disable_dit(&v17);
  return v15;
}

uint64_t ccsae_generate_confirmation(_QWORD *a1, char *a2, uint64_t a3)
{
  char v6;
  _QWORD *v12;
  uint64_t confirmation_ws;
  _QWORD v15[4];
  void (*v16)(uint64_t);
  char v17;

  v6 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v17 = v6;
  v12 = (_QWORD *)*a1;
  v15[0] = cc_malloc_clear(8 * *(_QWORD *)*a1);
  v15[1] = *v12;
  v15[2] = 0;
  v15[3] = cc_ws_alloc;
  v16 = cc_ws_free;
  if (v15[0])
  {
    confirmation_ws = ccsae_generate_confirmation_ws((uint64_t)v15, (uint64_t)a1, a2, a3);
    v16((uint64_t)v15);
  }
  else
  {
    confirmation_ws = 4294967283;
  }
  cc_disable_dit(&v17);
  return confirmation_ws;
}

uint64_t ccsae_generate_confirmation_ws(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  int v4;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  size_t v21;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C874D8];
  v4 = *(unsigned __int8 *)(a2 + 24);
  if (v4 != CCSAE_STATE_COMMIT_BOTH && v4 != CCSAE_STATE_CONFIRMATION_VERIFIED)
    return 4294967210;
  v10 = **(_QWORD **)a2;
  v11 = cczp_bitlen(*(_QWORD *)a2);
  v23[0] = v23;
  v12 = (unint64_t)(v11 + 7) >> 3;
  v13 = *(_QWORD *)(a2 + 16);
  MEMORY[0x1E0C86820](v11, v14, v15, v16);
  v18 = (_QWORD *)((char *)v23 - v17);
  v19 = *(_QWORD *)(a1 + 16);
  v20 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v10);
  v21 = ccsae_sizeof_kck_internal(a2);
  cchmac_init(v13, v18, v21, (char *)(a2 + 48));
  cchmac_update(v13, v18, 2uLL, a3);
  ccn_write_uint_padded(v10, (unint64_t *)(a2 + 144 + 24 * **(_QWORD **)a2), v12, v20);
  cchmac_update(v13, v18, v12, v20);
  ccn_write_uint_padded(v10, (unint64_t *)(a2 + 144 + 40 * **(_QWORD **)a2), v12, v20);
  cchmac_update(v13, v18, v12, v20);
  ccn_write_uint_padded(v10, (unint64_t *)(a2 + 144 + 48 * **(_QWORD **)a2), v12, v20);
  cchmac_update(v13, v18, v12, v20);
  ccn_write_uint_padded(v10, (unint64_t *)(a2 + 144 + 16 * **(_QWORD **)a2), v12, v20);
  cchmac_update(v13, v18, v12, v20);
  ccn_write_uint_padded(v10, (unint64_t *)(a2 + 144 + 56 * **(_QWORD **)a2), v12, v20);
  cchmac_update(v13, v18, v12, v20);
  ccn_write_uint_padded(v10, (unint64_t *)(a2 + 144 + (**(_QWORD **)a2 << 6)), v12, v20);
  cchmac_update(v13, v18, v12, v20);
  cchmac_final(v13, v18, a4);
  cc_clear(((*(_QWORD *)(v13 + 8) + *(_QWORD *)(v13 + 16) + 19) & 0xFFFFFFFFFFFFFFF8) + *(_QWORD *)(v13 + 8), v18);
  *(_BYTE *)(a2 + 24) |= CCSAE_STATE_CONFIRMATION_GENERATED;
  *(_QWORD *)(a1 + 16) = v19;
  return 0;
}

uint64_t fipspost_post_integrity(char a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t j;
  char __s[32];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C874D8];
  if (fipspost_get_hmac(a2, __s, 0))
  {
    v3 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: could not create the hash\n", v3, "fipspost_post_integrity", 27);
    v4 = 4294967224;
  }
  else
  {
    if ((a1 & 0x10) != 0)
      __s[0] ^= 1u;
    if (cc_cmp_safe(32, __s, fipspost_precalc_hmac))
    {
      v5 = mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: MAC generated: ", v5, "fipspost_post_integrity", 37);
      for (i = 0; i != 32; ++i)
        printf("%02X", __s[i]);
      putchar(10);
      v7 = mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d:   In variable: ", v7, "fipspost_post_integrity", 38);
      for (j = 0; j != 32; ++j)
        printf("%02X", fipspost_precalc_hmac[j]);
      putchar(10);
      v4 = 4294967222;
    }
    else
    {
      v4 = 0;
    }
  }
  cc_clear(0x20uLL, __s);
  return v4;
}

_QWORD *eay_RC4_set_key(_QWORD *result, uint64_t a2, uint64_t a3)
{
  int32x4_t v3;
  _QWORD *v4;
  uint64_t v5;
  int32x4_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  unsigned int v9;
  _DWORD *v10;
  int v11;
  unsigned __int8 v12;
  unsigned int v13;
  int v14;
  unsigned __int8 v15;
  unsigned int v16;
  int v17;
  unsigned __int8 v18;
  unsigned int v19;
  int v20;
  unsigned __int8 v21;
  BOOL v22;

  v3 = (int32x4_t)xmmword_1DEE27BA0;
  v4 = result + 1;
  v5 = 1;
  v6.i64[0] = 0x400000004;
  v6.i64[1] = 0x400000004;
  do
  {
    *(int32x4_t *)&result[v5] = v3;
    v3 = vaddq_s32(v3, v6);
    v5 += 2;
  }
  while (v5 != 129);
  v7 = 0;
  v8 = 0;
  v9 = 0;
  *result = 0;
  do
  {
    v10 = &result[v7];
    v11 = v10[2];
    v12 = v11 + v8 + *(_BYTE *)(a3 + v9);
    if (v9 + 1 == a2)
      v13 = 0;
    else
      v13 = v9 + 1;
    v10[2] = *((_DWORD *)v4 + v12);
    *((_DWORD *)v4 + v12) = v11;
    v14 = v10[3];
    v15 = v14 + v12 + *(_BYTE *)(a3 + v13);
    if (v13 + 1 == a2)
      v16 = 0;
    else
      v16 = v13 + 1;
    v10[3] = *((_DWORD *)v4 + v15);
    *((_DWORD *)v4 + v15) = v14;
    v17 = v10[4];
    v18 = v17 + v15 + *(_BYTE *)(a3 + v16);
    if (v16 + 1 == a2)
      v19 = 0;
    else
      v19 = v16 + 1;
    v10[4] = *((_DWORD *)v4 + v18);
    *((_DWORD *)v4 + v18) = v17;
    v20 = v10[5];
    v21 = *(_BYTE *)(a3 + v19) + v20 + v18;
    v8 = v21;
    if (v19 + 1 == a2)
      v9 = 0;
    else
      v9 = v19 + 1;
    v10[5] = *((_DWORD *)v4 + v21);
    *((_DWORD *)v4 + v21) = v20;
    v22 = v7 >= 126;
    v7 += 2;
  }
  while (!v22);
  return result;
}

int *eay_RC4(int *result, unint64_t a2, char *a3, _BYTE *a4)
{
  int v4;
  int v5;
  _DWORD *v6;
  unint64_t v7;
  int v8;
  unsigned __int8 v9;
  int v10;
  int v11;
  unsigned __int8 v12;
  int v13;
  int v14;
  unsigned __int8 v15;
  int v16;
  int v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  unsigned __int8 v21;
  int v22;
  int v23;
  unsigned __int8 v24;
  int v25;
  int v26;
  unsigned __int8 v27;
  int v28;
  int v29;
  int v30;
  int v31;
  char *v32;
  int v33;
  int v34;
  int v35;
  char v36;

  v4 = *result;
  v5 = result[1];
  v6 = result + 2;
  v7 = a2 >> 3;
  if ((a2 >> 3))
  {
    do
    {
      v8 = v6[(v4 + 1)];
      v9 = v8 + v5;
      v10 = v6[v9];
      v6[(v4 + 1)] = v10;
      v6[v9] = v8;
      *a4 = *a3 ^ v6[(v10 + v8)];
      v11 = v6[(v4 + 2)];
      v12 = v11 + v9;
      v13 = v6[v12];
      v6[(v4 + 2)] = v13;
      v6[v12] = v11;
      a4[1] = a3[1] ^ v6[(v13 + v11)];
      v14 = v6[(v4 + 3)];
      v15 = v14 + v12;
      v16 = v6[v15];
      v6[(v4 + 3)] = v16;
      v6[v15] = v14;
      a4[2] = a3[2] ^ v6[(v16 + v14)];
      v17 = v6[(v4 + 4)];
      v18 = v17 + v15;
      v19 = v6[v18];
      v6[(v4 + 4)] = v19;
      v6[v18] = v17;
      a4[3] = a3[3] ^ v6[(v19 + v17)];
      v20 = v6[(v4 + 5)];
      v21 = v20 + v18;
      v22 = v6[v21];
      v6[(v4 + 5)] = v22;
      v6[v21] = v20;
      a4[4] = a3[4] ^ v6[(v22 + v20)];
      v23 = v6[(v4 + 6)];
      v24 = v23 + v21;
      v25 = v6[v24];
      v6[(v4 + 6)] = v25;
      v6[v24] = v23;
      a4[5] = a3[5] ^ v6[(v25 + v23)];
      v26 = v6[(v4 + 7)];
      v27 = v26 + v24;
      v28 = v6[v27];
      v6[(v4 + 7)] = v28;
      v6[v27] = v26;
      a4[6] = a3[6] ^ v6[(v28 + v26)];
      v4 = (v4 + 8);
      v29 = v6[v4];
      v5 = (v29 + v27);
      v30 = v6[v5];
      v6[v4] = v30;
      v6[v5] = v29;
      v31 = v6[(v30 + v29)];
      v32 = a3 + 8;
      a4[7] = a3[7] ^ v31;
      a4 += 8;
      a3 += 8;
      LODWORD(v7) = v7 - 1;
    }
    while ((_DWORD)v7);
    a3 = v32;
  }
  v33 = a2 & 7;
  if ((a2 & 7) != 0)
  {
    do
    {
      v4 = (v4 + 1);
      v34 = v6[v4];
      v5 = (v34 + v5);
      v35 = v6[v5];
      v6[v4] = v35;
      v6[v5] = v34;
      v36 = *a3++;
      *a4++ = v36 ^ v6[(v35 + v34)];
      --v33;
    }
    while (v33);
  }
  *result = v4;
  result[1] = v5;
  return result;
}

uint64_t cccfb8_context_size(uint64_t *a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *a1;
  cc_disable_dit(&v9);
  return v7;
}

uint64_t cccfb8_block_size(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *(_QWORD *)(a1 + 8);
  cc_disable_dit(&v9);
  return v7;
}

uint64_t cccfb8_init(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = (*(uint64_t (**)(void))(a1 + 16))();
  cc_disable_dit(&v9);
  return v7;
}

uint64_t cccfb8_update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5;
  uint64_t v11;
  char v13;

  v5 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v13 = v5;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 24))(a2, a3, a4, a5);
  cc_disable_dit(&v13);
  return v11;
}

uint64_t cccfb8_one_shot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v11;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE v21[7];
  char v22;
  uint64_t v23;

  v11 = 0;
  v23 = *MEMORY[0x1E0C874D8];
  v22 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v11 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v11 = 1;
    }
  }
  v22 = v11;
  MEMORY[0x1E0C86820](a1, a2, a2, a3);
  v18 = &v21[-v17];
  v19 = (*(uint64_t (**)(uint64_t, _BYTE *))(a1 + 16))(a1, &v21[-v17]);
  if (!(_DWORD)v19)
    v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(a1 + 24))(v18, a5, a6, a7);
  cc_clear(*(_QWORD *)a1, v18);
  cc_disable_dit(&v22);
  return v19;
}

unint64_t cclr_block_nbytes(uint64_t a1)
{
  char v1;
  unint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = (unint64_t)(*(_QWORD *)(a1 + 8) + 7) >> 3;
  cc_disable_dit(&v9);
  return v7;
}

uint64_t cclr_aes_init(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5;
  uint64_t v11;
  char v13;

  v5 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v13 = v5;
  a1[3] = a2;
  a1[4] = a3;
  v11 = 4294967289;
  if ((unint64_t)(a4 - 129) >= 0xFFFFFFFFFFFFFF80
    && (a4 & 7) == 0
    && (unint64_t)(a5 - 11) >= 0xFFFFFFFFFFFFFFF9)
  {
    v11 = 0;
    *a1 = &cclr_aes_info;
    a1[1] = a4;
    a1[2] = a5;
  }
  cc_disable_dit(&v13);
  return v11;
}

uint64_t cclr_encrypt_block(uint64_t a1, rsize_t a2, char *a3, uint64_t a4)
{
  char v4;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  _BYTE v15[10];
  uint64_t v16;

  v4 = 0;
  v16 = *MEMORY[0x1E0C874D8];
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v14 = v4;
  v10 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)(v10 - 11) < 0xFFFFFFFFFFFFFFF9)
  {
    v12 = 4294967289;
  }
  else
  {
    v11 = 0;
    do
    {
      v15[v11] = v11;
      ++v11;
    }
    while (v10 != v11);
    v12 = cclr_permute(a1, a2, a3, a4, (uint64_t)v15);
  }
  cc_disable_dit(&v14);
  return v12;
}

uint64_t cclr_permute(uint64_t a1, rsize_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  rsize_t v7;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unsigned __int8 *v15;
  int v16;
  size_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  char *v30;
  unsigned __int8 v31;
  char *v32;
  int v33;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  rsize_t v39;
  uint64_t v40;
  uint64_t __src;
  unint64_t __src_8;
  __int128 v43;
  __int128 v44;
  _BYTE v45[16];
  _BYTE __s[2];
  _QWORD v47[3];

  v40 = a5;
  v7 = a2;
  *(_QWORD *)((char *)&v47[1] + 6) = *MEMORY[0x1E0C874D8];
  if (cclr_block_nbytes(a1) != a2)
  {
    v28 = 4294967289;
LABEL_27:
    cc_clear(v7, a3);
    goto LABEL_28;
  }
  v39 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  __s[0] = v9;
  __s[1] = v10;
  v47[0] = 0;
  *(_QWORD *)((char *)v47 + 6) = 0;
  __src = 0;
  v43 = 0u;
  v44 = 0u;
  v11 = v9 >> 1;
  __src_8 = ((v9 >> 1) + 7) >> 3;
  v12 = (v9 >> 1) & 7;
  LOBYTE(v43) = -1 << v12;
  __memcpy_chk();
  *((_BYTE *)&__src + __src_8 - 1) &= v43;
  v13 = v9 + 1;
  v38 = v9 >> 4;
  *(_QWORD *)&v44 = (((v9 + 1) >> 1) + 7) >> 3;
  v36 = (v9 + 7) >> 3;
  v14 = v36 - (v9 >> 4);
  if (v12)
  {
    if (v14 != 1)
    {
      v15 = (unsigned __int8 *)(a4 + v38 + 1);
      v16 = *(unsigned __int8 *)(a4 + v38);
      v17 = v14 - 1;
      v18 = (char *)&v43 + 8;
      do
      {
        v19 = *v15++;
        *v18++ = (unsigned __int16)((v19 | (v16 << 8)) << (v11 & 7)) >> 8;
        v16 = v19;
        --v17;
      }
      while (v17);
    }
    *((_BYTE *)&v43 + v14 + 7) = *(unsigned __int8 *)(a4 + (v9 >> 4) + v14 - 1) << v12;
  }
  else
  {
    __memcpy_chk();
  }
  v7 = v39;
  v37 = v11;
  BYTE8(v44) = -1 << ((v13 >> 1) & 7);
  *((_BYTE *)&v43 + v44 + 7) &= -1 << ((v13 >> 1) & 7);
  if (v10)
  {
    v35 = v12;
    v20 = 0;
    while (1)
    {
      v21 = *(_BYTE *)(v40 + v20) & 1;
      LOBYTE(v47[0]) = *(_BYTE *)(v40 + v20);
      __memcpy_chk();
      v22 = (**(uint64_t (***)(uint64_t, _BYTE *, _BYTE *))a1)(a1, v45, __s);
      if ((_DWORD)v22)
        break;
      v23 = &__src + 3 * v21;
      v26 = v23[1];
      v24 = v23 + 1;
      v25 = v26;
      if (v26)
      {
        do
        {
          *((_BYTE *)&v40 + 24 * v21 + v25 + 7) ^= v45[v25 - 1];
          --v25;
        }
        while (v25);
        v27 = *v24;
      }
      else
      {
        v27 = 0;
      }
      *((_BYTE *)&__src + 24 * v21 + v27 - 1) &= *((_BYTE *)&v43 + 24 * v21);
      if ((unint64_t)++v20 >= *(_QWORD *)(a1 + 16))
      {
        v28 = 0;
        v7 = v39;
        v12 = v35;
        goto LABEL_18;
      }
    }
    v28 = v22;
    v7 = v39;
    goto LABEL_27;
  }
  v28 = 4294967289;
LABEL_18:
  v29 = __src_8 - 1;
  a3[__src_8 - 1] = 0;
  v30 = &a3[v38];
  if (v12)
  {
    if (v14 != 1)
    {
      v31 = *((_BYTE *)&v43 + v14 + 7);
      v32 = &a3[v36 - 1];
      do
      {
        v33 = *((unsigned __int8 *)&v43 + v14 + 6);
        *v32-- = (v31 | (v33 << 8)) >> (v37 & 7);
        --v14;
        v31 = v33;
      }
      while (v14 != 1);
    }
    *v30 = BYTE8(v43) >> v12;
  }
  else
  {
    memcpy(v30, (char *)&v43 + 8, v14);
  }
  memcpy(a3, &__src, v29);
  a3[v29] |= *((_BYTE *)&__src + v29);
  if (!v10)
    goto LABEL_27;
  v28 = 0;
LABEL_28:
  cc_clear(0x30uLL, &__src);
  cc_clear(0x10uLL, __s);
  cc_clear(0x10uLL, v45);
  return v28;
}

uint64_t cclr_decrypt_block(uint64_t a1, rsize_t a2, char *a3, uint64_t a4)
{
  char v4;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int64x2_t v13;
  uint64x2_t v14;
  int64x2_t v15;
  int32x2_t v16;
  uint64_t v17;
  char v19;
  _BYTE v20[10];
  uint64_t v21;

  v4 = 0;
  v21 = *MEMORY[0x1E0C874D8];
  v19 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v19 = v4;
  v10 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)(v10 - 11) < 0xFFFFFFFFFFFFFFF9)
  {
    v17 = 4294967289;
  }
  else
  {
    v11 = 0;
    v12 = v10 - 1;
    v13 = (int64x2_t)xmmword_1DEE1D020;
    v14 = (uint64x2_t)vdupq_n_s64(v10 - 1);
    v15 = vdupq_n_s64(2uLL);
    do
    {
      v16 = vmovn_s64((int64x2_t)vcgeq_u64(v14, (uint64x2_t)v13));
      if ((v16.i8[0] & 1) != 0)
        v20[v11] = v12;
      if ((v16.i8[4] & 1) != 0)
        v20[v11 + 1] = v10 + (v11 ^ 0xFE);
      v11 += 2;
      v13 = vaddq_s64(v13, v15);
      v12 -= 2;
    }
    while (((v10 + 1) & 0xFFFFFFFFFFFFFFFELL) != v11);
    v17 = cclr_permute(a1, a2, a3, a4, (uint64_t)v20);
  }
  cc_disable_dit(&v19);
  return v17;
}

uint64_t cclr_aes_prf_eval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ccecb_update(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), 1, a3, a2);
}

unint64_t ccspake_sizeof_w(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (*(uint64_t (**)(void))(a1 + 8))();
  v3 = (_QWORD *)(*(uint64_t (**)(void))(a1 + 8))();
  v4 = cczp_bitlen(v2 + 40 * *v3 + 32);
  if (*(_DWORD *)a1)
    return (unint64_t)(v4 + 7) >> 3;
  else
    return ((unint64_t)(v4 + 7) >> 3) + 8;
}

unint64_t ccspake_sizeof_point(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(void))(a1 + 8))();
  return ((unint64_t)(cczp_bitlen(v1) + 7) >> 2) | 1;
}

uint64_t ccspake_sizeof_ctx(uint64_t a1)
{
  return (*(_QWORD *)(*(uint64_t (**)(void))(a1 + 8))() << 6) + 336;
}

uint64_t ccspake_reduce_w(uint64_t a1, unint64_t a2, unsigned __int8 *a3, unint64_t a4, char *a5)
{
  char v10;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char *v36;
  uint64_t scalar_fips_extrabits_ws;
  _QWORD v39[2];
  uint64_t v40;
  uint64_t (*v41)(_QWORD *, uint64_t);
  void (*v42)(uint64_t);
  char v43;

  v10 = 0;
  v43 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v43 = v10;
  v16 = (uint64_t *)(*(uint64_t (**)(void))(a1 + 8))();
  v17 = *v16;
  v18 = sizeof_struct_ccpolyzp_po2cyc();
  v39[0] = cc_malloc_clear(8 * (5 * v17 + (v18 + 127) / v18) + 24);
  v19 = *v16;
  v20 = sizeof_struct_ccpolyzp_po2cyc();
  v39[1] = 5 * v19 + (v20 + 127) / v20 + 3;
  v40 = 0;
  v41 = cc_ws_alloc;
  v42 = cc_ws_free;
  if (v39[0])
  {
    if (!*(_DWORD *)a1)
      goto LABEL_13;
    v24 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8))(v20, v21, v22, v23);
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8))(v24, v25, v26, v27);
    v29 = cczp_bitlen(v24 + 40 * *v28 + 32);
    v33 = (unint64_t)(v29 + 7) >> 3;
    if (!*(_DWORD *)a1)
      v33 += 8;
    if (v33 == a4)
    {
      v34 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8))(v29, v30, v31, v32);
      v35 = *v34;
      v36 = (char *)cc_ws_alloc(v39, *v34);
      scalar_fips_extrabits_ws = ccec_generate_scalar_fips_extrabits_ws((uint64_t)v39, v34, a2, a3, v36);
      if (!(_DWORD)scalar_fips_extrabits_ws)
        ccn_write_uint_padded_ct(v35, (unint64_t *)v36, a4, a5);
      v40 = 0;
      v42((uint64_t)v39);
    }
    else
    {
LABEL_13:
      scalar_fips_extrabits_ws = 4294967289;
      cc_ws_free((uint64_t)v39);
    }
  }
  else
  {
    scalar_fips_extrabits_ws = 4294967283;
  }
  cc_disable_dit(&v43);
  return scalar_fips_extrabits_ws;
}

uint64_t ccspake_generate_L(uint64_t a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4, char *a5, uint64_t (**a6)(_QWORD, uint64_t, uint64_t *))
{
  char v12;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t **v42;
  uint64_t uint;
  uint64_t v44;
  _QWORD v46[2];
  uint64_t v47;
  uint64_t (*v48)(_QWORD *, uint64_t);
  void (*v49)(uint64_t);
  char v50;

  v12 = 0;
  v50 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v12 = 1;
    }
  }
  v50 = v12;
  v18 = (uint64_t *)(*(uint64_t (**)(void))(a1 + 8))();
  v19 = *v18;
  v20 = sizeof_struct_cche_galois_key();
  v21 = sizeof_struct_ccpolyzp_po2cyc();
  v46[0] = cc_malloc_clear(8 * ((v20 + v21 + 4 * v19 * v21 - 1) / v21 + 50 * v19));
  v22 = *v18;
  v23 = sizeof_struct_cche_galois_key();
  v24 = sizeof_struct_ccpolyzp_po2cyc();
  v46[1] = (v23 + v24 + 4 * v22 * v24 - 1) / v24 + 50 * v22;
  v47 = 0;
  v48 = cc_ws_alloc;
  v49 = cc_ws_free;
  if (!v46[0])
  {
    v44 = 4294967283;
    goto LABEL_18;
  }
  v27 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(a1 + 8))(v24, v25, v26);
  v30 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(v27, v28, v29);
  v31 = cczp_bitlen(v27 + 40 * *v30 + 32);
  v34 = (unint64_t)(v31 + 7) >> 3;
  if (!*(_DWORD *)a1)
    v34 += 8;
  if (v34 != a2
    || (v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(v31, v32, v33),
        v36 = cczp_bitlen(v35),
        (((unint64_t)(v36 + 7) >> 2) | 1) != a4))
  {
    v44 = 4294967289;
    cc_ws_free((uint64_t)v46);
    goto LABEL_18;
  }
  v39 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(v36, v37, v38);
  v40 = *v39;
  v41 = (unint64_t *)cc_ws_alloc(v46, *v39);
  v42 = (uint64_t **)v48(v46, (4 * (v40 & 0x7FFFFFFFFFFFFFFLL)) | 2);
  *v42 = v39;
  if (*(_DWORD *)a1)
  {
    uint = ccn_read_uint(v40, v41, a2, a3);
    if ((_DWORD)uint)
      goto LABEL_14;
    uint = ccec_make_pub_from_priv_ws((uint64_t)v46, v39, a6, v41, 0, v42);
    if ((_DWORD)uint)
      goto LABEL_14;
  }
  else
  {
    uint = ccec_generate_key_deterministic_ws((uint64_t)v46, v39, a2, a3, a6, 1, v42);
    if ((_DWORD)uint)
      goto LABEL_14;
  }
  uint = ccec_export_pub((uint64_t)v42, a5);
LABEL_14:
  v44 = uint;
  v47 = 0;
  v49((uint64_t)v46);
LABEL_18:
  cc_disable_dit(&v50);
  return v44;
}

uint64_t ccspake_cmp_pub_key(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = a1 + 16;
  v4 = **(_QWORD **)a1;
  v5 = ccn_cmp(v4, a2, (unint64_t *)(a1 + 16));
  return ccn_cmp(v4, &a2[v4], (unint64_t *)(v3 + 8 * v4)) | v5;
}

void *ccspake_store_pub_key(uint64_t **a1, char *a2)
{
  uint64_t v4;
  uint64_t **v5;

  v4 = **a1;
  v5 = a1 + 2;
  ccn_set(v4, a2, a1 + 2);
  return ccn_set(v4, &a2[8 * v4], &v5[**a1]);
}

uint64_t ccspake_import_pub_ws(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  result = ccec_import_pub_ws();
  *(_QWORD *)(a1 + 16) = v2;
  return result;
}

uint64_t ccecies_encrypt_gcm_composite(uint64_t **a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v18;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t **v33;
  char *v34;
  uint64_t key_ws;
  uint64_t v36;
  _QWORD v39[2];
  uint64_t v40;
  uint64_t (*v41)(_QWORD *, uint64_t);
  void (*v42)(uint64_t);
  char v43;
  size_t v44;

  v18 = 0;
  v43 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v18 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v18 = 1;
    }
  }
  v43 = v18;
  v24 = *a1;
  v25 = **a1;
  v26 = sizeof_struct_cche_galois_key();
  v27 = sizeof_struct_ccpolyzp_po2cyc();
  v39[0] = cc_malloc_clear((v25 << 8) + 16 * ((v26 + v27 + 4 * v25 * v27 - 1) / v27));
  v28 = *v24;
  v29 = sizeof_struct_cche_galois_key();
  v30 = sizeof_struct_ccpolyzp_po2cyc();
  v39[1] = 32 * v28 + 2 * ((v29 + v30 + 4 * v28 * v30 - 1) / v30);
  v40 = 0;
  v41 = cc_ws_alloc;
  v42 = cc_ws_free;
  if (v39[0])
  {
    v31 = *a1;
    v32 = **a1;
    v33 = (uint64_t **)cc_ws_alloc(v39, (4 * (v32 & 0x7FFFFFFFFFFFFFFLL)) | 2);
    v44 = (unint64_t)(cczp_bitlen((uint64_t)v31) + 7) >> 3;
    v34 = (char *)v41(v39, v32);
    key_ws = ccecdh_generate_key_ws((uint64_t)v39, v31, *(uint64_t (***)(_QWORD, uint64_t, uint64_t *))(a2 + 8), v33);
    if (!(_DWORD)key_ws)
    {
      key_ws = ccecdh_compute_shared_secret_ws((uint64_t)v39, v33, a1, &v44, v34, *(uint64_t (***)(_QWORD, uint64_t, uint64_t *))(a2 + 8));
      if (!(_DWORD)key_ws)
        key_ws = ccecies_encrypt_gcm_from_shared_secret_composite(a1, a2, (uint64_t *)v33, v44, v34, a6, a7, a8, a9, a10, a11, a3, a4, a5);
    }
    v36 = key_ws;
    v40 = 0;
    v42((uint64_t)v39);
  }
  else
  {
    v36 = 4294967283;
  }
  cc_disable_dit(&v43);
  return v36;
}

uint64_t ccecies_encrypt_gcm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, rsize_t *a9, void *a10)
{
  char v16;
  unint64_t v22;
  unint64_t v23;
  rsize_t v24;
  uint64_t v25;
  char v29;

  v16 = 0;
  v29 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v16 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v16 = 1;
    }
  }
  v29 = v16;
  v22 = ccecies_pub_key_size(a1, a2);
  v23 = ccecies_encrypt_gcm_ciphertext_size(a1, a2, a3);
  v24 = *a9;
  if (v23 > *a9)
  {
    v25 = 4294967289;
LABEL_11:
    cc_clear(v24, a10);
    goto LABEL_8;
  }
  v25 = ccecies_encrypt_gcm_composite((uint64_t **)a1, a2, (char *)a10, (uint64_t)a10 + v22, (uint64_t)a10 + v22 + a3, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)v25)
  {
    v24 = *a9;
    goto LABEL_11;
  }
  *a9 = v23;
LABEL_8:
  cc_disable_dit(&v29);
  return v25;
}

_BYTE *ccz_addi(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  char v5;
  _QWORD v12[4];
  char v13;
  _QWORD v14[2];

  v5 = 0;
  v14[1] = *MEMORY[0x1E0C874D8];
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v13 = v5;
  v14[0] = a3;
  v12[0] = ccn_n(1, v14);
  v12[1] = 0;
  v12[2] = 1;
  v12[3] = v14;
  ccz_add(a1, a2, (uint64_t)v12);
  return cc_disable_dit(&v13);
}

uint64_t ccrsa_decrypt_eme_pkcs1v15(uint64_t *a1, rsize_t *a2, void *a3, unint64_t a4, unsigned __int8 *a5)
{
  char v10;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD v32[4];
  void (*v33)(uint64_t);
  char v34;

  v10 = 0;
  v34 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v34 = v10;
  v16 = *a1;
  v17 = sizeof_struct_ccrns_mul_modulus();
  v18 = sizeof_struct_ccpolyzp_po2cyc();
  v19 = (v17 + v18 - 1) / v18 + 11 * v16;
  v20 = CCRSA_CRT_POWER_BLINDED_WORKSPACE_N(v16);
  if (v19 + 1 > v20)
    v21 = v19 + 1;
  else
    v21 = v20;
  v22 = cc_malloc_clear(8 * (v21 + 3 * v16));
  v32[0] = v22;
  v23 = *a1;
  v24 = sizeof_struct_ccrns_mul_modulus();
  v25 = sizeof_struct_ccpolyzp_po2cyc();
  v26 = (v24 + v25 - 1) / v25 + 11 * v23;
  v27 = CCRSA_CRT_POWER_BLINDED_WORKSPACE_N(v23);
  if (v26 + 1 > v27)
    v28 = v26 + 1;
  else
    v28 = v27;
  v32[1] = v28 + 3 * v23;
  v32[2] = 0;
  v32[3] = cc_ws_alloc;
  v33 = cc_ws_free;
  if (v22)
  {
    v29 = ccrng(0);
    if (v29)
    {
      v30 = ccrsa_decrypt_eme_pkcs1v15_blinded_ws((uint64_t)v32, (uint64_t (**)(_QWORD, uint64_t, uint64_t))v29, a1, a2, a3, a4, a5);
      v33((uint64_t)v32);
    }
    else
    {
      v30 = 0xFFFFFFFFLL;
      cc_ws_free((uint64_t)v32);
    }
  }
  else
  {
    v30 = 4294967283;
  }
  cc_disable_dit(&v34);
  return v30;
}

uint64_t cced448_make_pub(uint64_t (**a1)(_QWORD, uint64_t, uint64_t *), uint64_t a2, char *a3)
{
  char v6;
  uint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  _BYTE *v15;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  void *v24;
  __int128 v25;
  uint64_t (*v26)(void **, uint64_t);
  void (*v27)(uint64_t);
  char v28;
  char __s[55];
  char v30;
  uint64_t v31;

  v6 = 0;
  v31 = *MEMORY[0x1E0C874D8];
  v28 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v28 = v6;
  v12 = (uint64_t *)ccec_cp_ed448();
  v24 = cc_malloc_clear(0x690uLL);
  v25 = xmmword_1DEE27BC0;
  v26 = (uint64_t (*)(void **, uint64_t))cc_ws_alloc;
  v27 = cc_ws_free;
  if (v24)
  {
    v13 = cczp_n((uint64_t)v12);
    v14 = (unint64_t *)cc_ws_alloc(&v24, v13);
    v15 = (_BYTE *)v26(&v24, 3 * v13);
    ccshake256(0x39uLL, a3, 0x72uLL, __s);
    __s[0] &= 0xFCu;
    v30 |= 0x80u;
    if (v13)
    {
      v16 = __s;
      v17 = v14;
      do
      {
        v18 = *(_QWORD *)v16;
        v16 += 8;
        *v17++ = v18;
        --v13;
      }
      while (v13);
    }
    v19 = cced448_scalar_mult_base_masked_ws((uint64_t)&v24, v12, a1, (uint64_t)v15, v14);
    if ((_DWORD)v19 || (v19 = ccec_affinify_ws((uint64_t)&v24, (uint64_t)v12), (_DWORD)v19))
    {
      v22 = v19;
    }
    else
    {
      v20 = 0;
      v21 = &v15[8 * *v12];
      do
      {
        *(_QWORD *)(a2 + v20) = *(_QWORD *)&v21[v20];
        v20 += 8;
      }
      while (v20 != 56);
      v22 = 0;
      *(_BYTE *)(a2 + 56) = *v15 << 7;
    }
    cc_clear(0x72uLL, __s);
    *((_QWORD *)&v25 + 1) = 0;
    v27((uint64_t)&v24);
  }
  else
  {
    v22 = 4294967283;
  }
  cc_disable_dit(&v28);
  return v22;
}

uint64_t cced448_make_key_pair(uint64_t (**a1)(_QWORD, uint64_t, char *), uint64_t a2, char *a3)
{
  char v6;
  uint64_t pub;
  uint64_t v13;
  char v15;

  v6 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v15 = v6;
  pub = (*a1)(a1, 57, a3);
  if (!(_DWORD)pub)
    pub = cced448_make_pub((uint64_t (**)(_QWORD, uint64_t, uint64_t *))a1, a2, a3);
  v13 = pub;
  cc_disable_dit(&v15);
  return v13;
}

uint64_t cced448_shake_to_scalar_ws(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4, char *a5, unint64_t a6, char *a7, unint64_t a8, char *a9)
{
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t i;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  unsigned int __s[88];
  _OWORD __dst[7];
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C874D8];
  v15 = ccshake256_xi();
  v22 = *a2;
  v16 = cczp_n((uint64_t)a2);
  v23 = *(_QWORD *)(a1 + 16);
  v17 = (2 * v16) | 1;
  v18 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v17);
  v27 = 0;
  memset(__dst, 0, sizeof(__dst));
  ccxof_init((uint64_t)v15, __s);
  ccxof_absorb(v15, (char *)__s, 0xAuLL, "SigEd448");
  ccxof_absorb(v15, (char *)__s, a4, a5);
  ccxof_absorb(v15, (char *)__s, a6, a7);
  ccxof_absorb(v15, (char *)__s, a8, a9);
  ccxof_squeeze(v15, __s, 0x72uLL, (char *)__dst);
  cc_clear(0x158uLL, __s);
  for (i = 0; i != v17; ++i)
    *(_QWORD *)&v18[8 * i] = *((_QWORD *)__dst + i);
  cczp_modn_ws(a1, &a2[5 * v22 + 4], a3, v17, v18);
  result = cc_clear(0x78uLL, __dst);
  *(_QWORD *)(a1 + 16) = v23;
  return result;
}

int64x2_t *ccaes_xts_decrypt_vng_wrapper(int8x16_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, int8x16_t *a5)
{
  unint64_t v5;
  int64x2_t *v6;

  v5 = *a2 + a3;
  if (v5 > 0x100000)
    return 0;
  *a2 = v5;
  v6 = (int64x2_t *)(a2 + 1);
  if (a3)
    ccaes_xts_decrypt_vng_vector(a5, a4, v6, a3, a1 + 1);
  return v6;
}

uint64_t fipspost_get_hmac(char *a1, _OWORD *a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  const char *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const char *v17;
  BOOL v18;
  unint64_t v20;
  int v21;
  unint64_t v22;
  BOOL v23;
  int v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  size_t v28;
  char *v29;
  uint64_t v32;
  _QWORD *v33;
  __int128 v34;
  _OWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _OWORD *v38;
  _QWORD **v39;
  const char *v40;
  char v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C874D8];
  result = (uint64_t)ccsha256_di();
  v41 = 0;
  if (a3)
  {
    v10 = (unint64_t)&a1[a3];
    v11 = __CFADD__(a1, a3);
    result = 4294967224;
    if (a3 < 0x28 || v11)
      return result;
  }
  else
  {
    v10 = 0;
  }
  if (*(_DWORD *)a1 == -17958194)
  {
    v38 = a2;
    v12 = a1 + 28;
  }
  else
  {
    if (*(_DWORD *)a1 != -17958193)
      return 4294967223;
    v38 = a2;
    v12 = a1 + 32;
  }
  v40 = v12;
  v39 = &v36;
  v13 = *((_DWORD *)a1 + 4);
  v42 = 0u;
  v43 = 0u;
  MEMORY[0x1E0C86820](result, v7, v8, v9);
  v36 = (_QWORD **)((char *)&v36 - v14);
  v37 = v15;
  cchmac_init(v15, (_QWORD **)((char *)&v36 - v14), 1uLL, &v41);
  if (v13)
  {
    v16 = 0;
    v17 = v40;
    while (1)
    {
      v18 = (unint64_t)(v17 + 56) <= v10 || v10 == 0;
      if (!v18 || v17 < a1)
        break;
      if (!strncmp("__TEXT", v17 + 8, 6uLL) || !strncmp("__TEXT_EXEC", v17 + 8, 0xBuLL))
      {
        if (*(_DWORD *)v40 == 1)
        {
          v24 = *((_DWORD *)v17 + 12);
          if (v24)
          {
            v25 = (unint64_t)(v17 + 124);
            do
            {
              v26 = v25 <= v10 || v10 == 0;
              result = 4294967224;
              if (!v26 || v17 + 56 < a1)
                return result;
              if (!strcmp((const char *)(v25 - 68), "__text")
                && (!strcmp((const char *)(v25 - 52), "__TEXT") || !strcmp((const char *)(v25 - 52), "__TEXT_EXEC")))
              {
                v28 = *(unsigned int *)(v25 - 32);
                v29 = &a1[*(unsigned int *)(v25 - 28)];
LABEL_62:
                if (((unint64_t)&v29[v28] <= v10 || v10 == 0) && &v29[v28 - 1] >= a1)
                {
                  v33 = v36;
                  v32 = v37;
                  cchmac_update(v37, v36, v28, v29);
                  cchmac_final(v32, v33, (uint64_t)&v42);
                  result = 0;
                  v34 = v43;
                  v35 = v38;
                  *v38 = v42;
                  v35[1] = v34;
                  return result;
                }
                return 4294967224;
              }
              v25 += 68;
            }
            while (--v24);
          }
        }
        else if (*(_DWORD *)v40 == 25)
        {
          v20 = (unint64_t)(v17 + 72);
          v21 = *((_DWORD *)v17 + 16);
          if (v10 && v20 > v10)
            return 4294967224;
          if (v21)
          {
            v22 = (unint64_t)(v17 + 152);
            do
            {
              v23 = v22 <= v10 || v10 == 0;
              result = 4294967224;
              if (!v23 || v20 < (unint64_t)a1)
                return result;
              if (!strcmp((const char *)(v22 - 80), "__text")
                && (!strcmp((const char *)(v22 - 64), "__TEXT") || !strcmp((const char *)(v22 - 64), "__TEXT_EXEC")))
              {
                v29 = &a1[*(unsigned int *)(v22 - 32)];
                v28 = *(_QWORD *)(v22 - 40);
                goto LABEL_62;
              }
              v22 += 80;
            }
            while (--v21);
          }
        }
      }
      ++v16;
      v17 += *((unsigned int *)v17 + 1);
      if (v16 == v13)
        goto LABEL_55;
    }
  }
  else
  {
LABEL_55:
    v27 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: could not create the hash\n", v27, "fipspost_get_hmac", 251);
  }
  return 4294967224;
}

uint64_t fipspost_post_ecdh(char a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t **v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t (*v24)(_QWORD *, uint64_t);
  void (*v25)(uint64_t);
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[2];
  _OWORD v30[2];
  _OWORD v31[2];
  _OWORD v32[2];
  _OWORD v33[2];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C874D8];
  v2 = (uint64_t *)ccec_cp_256();
  v3 = *v2;
  v4 = sizeof_struct_cche_galois_key();
  v5 = sizeof_struct_ccpolyzp_po2cyc();
  v6 = sizeof_struct_cche_galois_key();
  v22[0] = cc_malloc_clear(8 * ((v5 - 1 + v4 + 4 * v5 * v3) / v5 + 29 * v3 + (3 * v5 * v3 + v5 - 1 + v6) / v5));
  v7 = *v2;
  v8 = sizeof_struct_cche_galois_key();
  v9 = sizeof_struct_ccpolyzp_po2cyc();
  v22[1] = (v9 - 1 + v8 + 4 * v9 * v7) / v9 + 29 * v7 + (3 * v9 * v7 + v9 - 1 + sizeof_struct_cche_galois_key()) / v9;
  v23 = 0;
  v24 = cc_ws_alloc;
  v25 = cc_ws_free;
  if (v22[0])
  {
    v33[0] = xmmword_1DEE27C40;
    v33[1] = unk_1DEE27C50;
    v32[0] = xmmword_1DEE27C60;
    v32[1] = unk_1DEE27C70;
    v31[0] = xmmword_1DEE27C80;
    v31[1] = unk_1DEE27C90;
    v30[0] = xmmword_1DEE27CA0;
    v30[1] = unk_1DEE27CB0;
    v29[0] = xmmword_1DEE27CC0;
    v29[1] = unk_1DEE27CD0;
    v27 = 0u;
    v28 = 0u;
    v26 = 32;
    v10 = cczp_bitlen((uint64_t)v2);
    v11 = (unint64_t **)cc_ws_alloc(v22, (4 * (v7 & 0x7FFFFFFFFFFFFFFLL)) | 2);
    v12 = (_QWORD *)v24(v22, (unint64_t)(24 * v7 + 23) >> 3);
    if (ccec_make_priv(v10, 0x20uLL, (unsigned __int8 *)v30, 0x20uLL, (unsigned __int8 *)v29, 0x20uLL, (unsigned __int8 *)v31, v11))
    {
      v13 = mach_absolute_time();
      v14 = 4294967224;
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: result: %d\n", v13, "fipspost_post_ecdh_ws", 85, -72);
    }
    else
    {
      if (ccec_make_pub(v10, 0x20uLL, (unsigned __int8 *)v33, 0x20uLL, (unsigned __int8 *)v32, (uint64_t)v12))
      {
        v15 = mach_absolute_time();
        v14 = 4294967224;
        v16 = 93;
      }
      else
      {
        if (!ccecdh_compute_shared_secret_ws((uint64_t)v22, v11, v12, &v26, (char *)&v27, (uint64_t (**)(_QWORD, uint64_t, uint64_t *))&ccrng_zero))
        {
          if ((a1 & 0x10) != 0)
            LOBYTE(v27) = v27 ^ 1;
          if ((_QWORD)v27 == 0x1FF20641062FC46
            && *((_QWORD *)&v27 + 1) == 0x252DDDFB34A4542ELL
            && (_QWORD)v28 == 0x681E56602085C5CCLL
            && *((_QWORD *)&v28 + 1) == 0x7BBD978977D70D04)
          {
            v14 = 0;
          }
          else
          {
            v21 = mach_absolute_time();
            printf("FIPSPOST_USER [%llu] %s:%d: FAILED: memcmp\n", v21, "fipspost_post_ecdh_ws", 111);
            v14 = 4294967221;
          }
          goto LABEL_10;
        }
        v15 = mach_absolute_time();
        v14 = 4294967224;
        v16 = 100;
      }
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: result: %d\n", v15, "fipspost_post_ecdh_ws", v16, -72);
    }
LABEL_10:
    v23 = 0;
    v25((uint64_t)v22);
    return v14;
  }
  return 4294967283;
}

uint64_t cczp_add(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[4];
  void (*v18)(uint64_t);
  char v19;

  v8 = 0;
  v19 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v19 = v8;
  v14 = cczp_n(a1);
  v17[0] = cc_malloc_clear(8 * v14);
  v17[1] = cczp_n(a1);
  v17[2] = 0;
  v17[3] = cc_ws_alloc;
  v18 = cc_ws_free;
  if (v17[0])
  {
    (**(void (***)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 16))(v17, a1, a2, a3, a4);
    v18((uint64_t)v17);
    v15 = 0;
  }
  else
  {
    v15 = 4294967283;
  }
  cc_disable_dit(&v19);
  return v15;
}

void *ccec_cp_ed25519_asm()
{
  return &ccec_cp25519_asm_params;
}

uint64_t ccrns_modulus_init_ws(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  return ccrns_modulus_init_helper_ws(a1, a2, a3, 0);
}

uint64_t ccrns_modulus_init_helper_ws(uint64_t a1, unint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v7;
  unint64_t v8;
  _BOOL4 v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t __src[3];
  __int128 v17;
  uint64_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C874D8];
  if (a3 < 2)
    return 4294967289;
  *a2 = a3;
  v19[0] = a3;
  if (a4 == 1)
  {
    a2[1] = __udivti3();
    goto LABEL_7;
  }
  if (!a4)
  {
    v7 = ccrns_modulus_compute_mod_factor_ws(a1, 1u, a2 + 1, 1, a3);
    if ((_DWORD)v7)
      return v7;
LABEL_7:
    v7 = ccrns_modulus_compute_mod_factor_ws(a1, 2u, a2 + 2, 1, a3);
    if ((_DWORD)v7)
      return v7;
  }
  v8 = *a2;
  v10 = (*a2 & (*a2 - 1)) != 0 || v8 == 0;
  v17 = xmmword_1DEE27CE0;
  v18 = 0;
  ccn_shift_left_multi(3uLL, (uint64_t)&v17, (uint64_t)&v17, v10 - __clz(v8) + 63 + 128, (uint64x2_t)xmmword_1DEE27CE0);
  ccn_divmod_ws(a1, 3, (uint64_t)&v17, 3uLL, (uint64_t)__src, 1, (char *)&v15, (uint64_t)v19);
  v11 = 0xFFFFFFFFLL;
  if (!ccn_add1_ws(a1, 3, __src, __src, ((v15 | HIDWORD(v15)) + 0xFFFFFFFF) >> 32))
  {
    v14 = 0;
    v13 = xmmword_1DEE27CE0;
    ccn_shift_left_multi(3uLL, (uint64_t)&v13, (uint64_t)&v13, 0x80uLL, (uint64x2_t)xmmword_1DEE27CE0);
    if (ccn_sub_ws(a1, 3, __src, __src, (unint64_t *)&v13))
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      ccn_set(2, a2 + 4, __src);
      return 0;
    }
  }
  return v11;
}

uint64_t ccrns_modulus_init_var_time_ws(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  return ccrns_modulus_init_helper_ws(a1, a2, a3, 1);
}

uint64_t ccrns_mul_modulus_init_ws(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;

  v4 = 4294967289;
  if (a3 >= 2 && a4 < a3)
  {
    *a2 = a3;
    a2[1] = a4;
    ccrns_modulus_compute_mod_factor_ws(a1, 1u, a2 + 2, a4, a3);
    return 0;
  }
  return v4;
}

uint64_t ccrns_modulus_compute_mod_factor_ws(uint64_t a1, unsigned int a2, void *a3, uint64_t a4, uint64_t a5)
{
  _BYTE v9[32];
  _BYTE v10[32];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C874D8];
  if (a5 < 2)
    return 4294967289;
  v13 = a4;
  v14[0] = a5;
  v11 = xmmword_1DEE27CE0;
  v12 = 0;
  ccn_shift_left_multi(3uLL, (uint64_t)&v11, (uint64_t)&v11, a2 << 6, (uint64x2_t)xmmword_1DEE27CE0);
  ccn_muln(3, (uint64_t)v10, (uint64_t)&v11, 1uLL, &v13);
  ccn_divmod_ws(a1, 4, (uint64_t)v10, 3uLL, (uint64_t)v9, 1, 0, (uint64_t)v14);
  if (a2)
    memcpy(a3, v9, 8 * a2);
  return 0;
}

uint64_t ccrns_mul_modulus_init_var_time_ws(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = 4294967289;
  if (a3 >= 2 && a4 < a3)
  {
    *a2 = a3;
    a2[1] = a4;
    v6 = __udivti3();
    result = 0;
    a2[2] = v6;
  }
  return result;
}

void *ccpolyzp_po2cyc_scalar_divmod_ws(uint64_t a1, void *a2, uint64_t *a3, unint64_t *a4)
{
  unint64_t v8;
  _BOOL4 v10;
  int8x16_t __src;
  _BYTE v13[16];
  uint64_t v14[3];

  v14[2] = *MEMORY[0x1E0C874D8];
  ccn_mul_ws(a1, 2, (uint64_t)v13, (uint64_t)a3, (uint64_t)(a4 + 4));
  ccn_sub_ws(a1, 2, &__src, a3, (unint64_t *)v14);
  ccn_shift_right(2, &__src, &__src, 1);
  ccn_add_ws(a1, 2, &__src, __src.i64, v14);
  v8 = *a4;
  v10 = (*a4 & (*a4 - 1)) != 0 || v8 == 0;
  ccn_shift_right_multi(2, &__src, &__src, v10 - __clz(v8) + 63 - 1);
  return ccn_set(1, a2, &__src);
}

unint64_t ccpolyzp_po2cyc_rem_to_centered(uint64_t a1, uint64_t a2)
{
  return (((((unint64_t)(a2 - 1) >> 1) - a1) >> 63) - 1) & a1 | (a1 - a2) & ((uint64_t)(((unint64_t)(a2 - 1) >> 1)
                                                                                            - a1) >> 63);
}

uint64_t ccpolyzp_po2cyc_centered_to_rem(uint64_t a1, uint64_t a2)
{
  return (a2 + a1) & (a1 >> 63) | (((unint64_t)a1 >> 63) - 1) & a1;
}

uint64_t ccpolyzp_po2cyc_int_to_rem(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = ((unint64_t)a1 >> 63) - 1;
  v3 = v2 & a1 | -a1 & (a1 >> 63);
  v4 = v3 - *a2 * (((unint64_t)a2[1] * (unsigned __int128)(unint64_t)v3) >> 64);
  if ((uint64_t)(v4 - *a2) >= 0)
    v4 -= *a2;
  return (*a2 - v4) & -(uint64_t)(((v4 | HIDWORD(v4)) + 0xFFFFFFFF) >> 32) & (a1 >> 63) | v4 & v2;
}

uint64_t ccn_print(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  FILE **v3;
  uint64_t v4;

  if (result)
  {
    v2 = a2 - 8;
    v3 = (FILE **)MEMORY[0x1E0C874E0];
    do
    {
      v4 = result - 1;
      fprintf(*v3, "%.016llx", *(_QWORD *)(v2 + 8 * result));
      result = v4;
    }
    while (v4);
  }
  return result;
}

size_t ccn_lprint(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  FILE **v5;

  v4 = a1;
  v5 = (FILE **)MEMORY[0x1E0C874E0];
  fprintf((FILE *)*MEMORY[0x1E0C874E0], "%s { %zu, ", a2, a1);
  for (; v4; --v4)
    fprintf(*v5, "%.016llx", *(_QWORD *)(a3 - 8 + 8 * v4));
  return fwrite("}\n", 2uLL, 1uLL, *v5);
}

_QWORD *ccn_addmod_p25519(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *result;

  v4 = *a2;
  v5 = a2[1];
  v3 = a2 + 2;
  v6 = v3[1];
  v8 = *a3;
  v9 = a3[1];
  v7 = a3 + 2;
  v10 = v7[1];
  v11 = v9 + __CFADD__(v4, v8) + v5;
  v12 = *v7 + (__CFADD__(__CFADD__(v4, v8), v5) | __CFADD__(v9, __CFADD__(v4, v8) + v5)) + *v3;
  v13 = v10
      + (__CFADD__(__CFADD__(__CFADD__(v4, v8), v5) | __CFADD__(v9, __CFADD__(v4, v8) + v5), *v3) | __CFADD__(*v7, (__CFADD__(__CFADD__(v4, v8), v5) | __CFADD__(v9, __CFADD__(v4, v8) + v5)) + *v3))
      + v6;
  v14 = !(__CFADD__(__CFADD__(__CFADD__(__CFADD__(v4, v8), v5) | __CFADD__(v9, __CFADD__(v4, v8) + v5), *v3) | __CFADD__(*v7, (__CFADD__(__CFADD__(v4, v8), v5) | __CFADD__(v9, __CFADD__(v4, v8) + v5)) + *v3), v6) | __CFADD__(v10, (__CFADD__(__CFADD__(__CFADD__(v4, v8), v5) | __CFADD__(v9, __CFADD__(v4, v8) + v5), *v3) | __CFADD__(*v7, (__CFADD__(__CFADD__(v4, v8), v5) | __CFADD__(v9, __CFADD__(v4, v8) + v5))+ *v3))+ v6))? 0: 0x26uLL;
  *a1 = v4 + v8 + v14 + (!__CFADD__(__CFADD__(__CFADD__(__CFADD__(v4 + v8, v14), v11), v12), v13) ? 0 : 0x26uLL);
  a1[1] = __CFADD__(v4 + v8, v14) + v11;
  result = a1 + 2;
  *result = __CFADD__(__CFADD__(v4 + v8, v14), v11) + v12;
  result[1] = __CFADD__(__CFADD__(__CFADD__(v4 + v8, v14), v11), v12) + v13;
  return result;
}

_OWORD *ccn_submod_p25519(_QWORD *a1, unint64_t *a2, unint64_t *a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _BOOL1 v13;
  uint64_t v14;
  _OWORD *result;

  v4 = *a2;
  v5 = a2[1];
  v3 = a2 + 2;
  v6 = v3[1];
  v8 = *a3;
  v9 = a3[1];
  v7 = a3 + 2;
  v10 = v7[1];
  v11 = *v3 - (*v7 + (__PAIR128__(v5, v4) < __PAIR128__(v9, v8)));
  v13 = __CFSUB__(*v3, *v7, __PAIR128__(v5, v4) >= __PAIR128__(v9, v8));
  v12 = v6 - (v10 + !v13);
  v14 = -(uint64_t)!__CFSUB__(v6, v10, v13) & 0x26;
  *a1 = v4
      - v8
      - v14
      - (-(uint64_t)(__PAIR128__(v12, v11) < (__PAIR128__(v5, v4) - __PAIR128__(v9, v8) < (unint64_t)v14)) & 0x26);
  a1[1] = (__PAIR128__(v5, v4) - __PAIR128__(v9, v8) - (unint64_t)v14) >> 64;
  result = a1 + 2;
  *result = __PAIR128__(v12, v11) - (__PAIR128__(v5, v4) - __PAIR128__(v9, v8) < (unint64_t)v14);
  return result;
}

_QWORD *ccn_mulmod_p25519(_QWORD *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  _BOOL8 v57;
  _BOOL8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL8 v62;
  uint64_t v63;
  uint64_t v64;
  _BOOL8 v65;
  uint64_t v66;
  _BOOL8 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BOOL8 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _BOOL8 v77;
  unint64_t v78;
  _BOOL8 v79;
  unint64_t v80;
  _BOOL8 v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _BOOL8 v86;
  uint64_t v87;
  uint64_t v88;
  _BOOL8 v89;
  uint64_t v90;
  _BOOL8 v91;
  _BOOL8 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BOOL8 v96;
  uint64_t v97;
  _BOOL8 v98;
  uint64_t v99;
  _QWORD *result;

  v4 = *a2;
  v5 = a2[1];
  v3 = a2 + 2;
  v6 = *v3;
  v7 = v3[1];
  v9 = *a3;
  v10 = a3[1];
  v8 = a3 + 2;
  v11 = *v8;
  v12 = v8[1];
  v13 = v4 * v9;
  v14 = (v5 * (unsigned __int128)v9) >> 64;
  v15 = *v3 * v9;
  v16 = (v6 * (unsigned __int128)v9) >> 64;
  v18 = v9;
  v17 = (__PAIR128__(v5, v4) * v9) >> 64;
  v19 = __CFADD__(__CFADD__((v4 * (unsigned __int128)v9) >> 64, v5 * v9), v14);
  v20 = __CFADD__((v4 * (unsigned __int128)v9) >> 64, v5 * v9) + v14;
  v19 |= __CFADD__(v15, v20);
  v20 += v15;
  v21 = (v7 * (unsigned __int128)v9) >> 64;
  v22 = (v7 * (unsigned __int128)v10) >> 64;
  v24 = v19;
  v19 = __CFADD__(v19, v16);
  v23 = v24 + v16;
  v19 |= __CFADD__(v7 * v9, v23);
  v23 += v7 * v9;
  v26 = v19;
  v19 = __CFADD__(v19, v21);
  v25 = v26 + v21;
  v19 |= __CFADD__(v7 * v10, v25);
  v25 += v7 * v10;
  v27 = v7 * *v8;
  v28 = (v7 * (unsigned __int128)v11) >> 64;
  v30 = v19;
  v19 = __CFADD__(v19, v22);
  v29 = v30 + v22;
  v19 |= __CFADD__(v27, v29);
  v29 += v27;
  v32 = v19;
  v19 = __CFADD__(v19, v28);
  v31 = v32 + v28;
  v19 |= __CFADD__(v7 * v12, v31);
  v31 += v7 * v12;
  v33 = v19 + ((v7 * (unsigned __int128)v12) >> 64);
  v34 = (v4 * (unsigned __int128)v10) >> 64;
  v19 = __CFADD__(v17, v4 * v10);
  v35 = (__PAIR128__(v10, v18) * __PAIR128__(v5, v4)) >> 64;
  v37 = v19;
  v19 = __CFADD__(v19, v20);
  v36 = v37 + v20;
  v19 |= __CFADD__(v34, v36);
  v36 += v34;
  v38 = (v6 * (unsigned __int128)v10) >> 64;
  v40 = v19;
  v19 = __CFADD__(v19, v23);
  v39 = v40 + v23;
  v19 |= __CFADD__(v6 * v10, v39);
  v39 += v6 * v10;
  v42 = v19;
  v19 = __CFADD__(v19, v25);
  v41 = v42 + v25;
  v19 |= __CFADD__(v38, v41);
  v41 += v38;
  v43 = (v6 * (unsigned __int128)v12) >> 64;
  v45 = v19;
  v19 = __CFADD__(v19, v29);
  v44 = v45 + v29;
  v19 |= __CFADD__(v6 * v12, v44);
  v44 += v6 * v12;
  v47 = v19;
  v19 = __CFADD__(v19, v31);
  v46 = v47 + v31;
  v19 |= __CFADD__(v43, v46);
  v46 += v43;
  v48 = v19 + v33;
  v49 = (v5 * (unsigned __int128)v10) >> 64;
  v19 = __CFADD__(v36, v5 * v10);
  v50 = v36 + v5 * v10;
  v52 = v19;
  v19 = __CFADD__(v19, v39);
  v51 = v52 + v39;
  v19 |= __CFADD__(v49, v51);
  v51 += v49;
  v53 = (v6 * (unsigned __int128)v11) >> 64;
  v55 = v19;
  v19 = __CFADD__(v19, v41);
  v54 = v55 + v41;
  v19 |= __CFADD__(v6 * v11, v54);
  v54 += v6 * v11;
  v57 = v19;
  v19 = __CFADD__(v19, v44);
  v56 = v57 + v44;
  v19 |= __CFADD__(v53, v56);
  v56 += v53;
  v58 = v19;
  v59 = (v4 * (unsigned __int128)v11) >> 64;
  v19 = __CFADD__(v50, v4 * v11);
  v60 = v50 + v4 * v11;
  v62 = v19;
  v19 = __CFADD__(v19, v51);
  v61 = v62 + v51;
  v19 |= __CFADD__(v59, v61);
  v61 += v59;
  v63 = (v5 * (unsigned __int128)v12) >> 64;
  v65 = v19;
  v19 = __CFADD__(v19, v54);
  v64 = v65 + v54;
  v19 |= __CFADD__(v5 * v12, v64);
  v64 += v5 * v12;
  v67 = v19;
  v19 = __CFADD__(v19, v56);
  v66 = v67 + v56;
  v19 |= __CFADD__(v63, v66);
  v66 += v63;
  v68 = v19 + v58;
  v69 = (v5 * (unsigned __int128)v11) >> 64;
  v19 = __CFADD__(v61, v5 * v11);
  v70 = v61 + v5 * v11;
  v72 = v19;
  v19 = __CFADD__(v19, v64);
  v71 = v72 + v64;
  v19 |= __CFADD__(v69, v71);
  v71 += v69;
  v73 = v19;
  v74 = (v4 * (unsigned __int128)v12) >> 64;
  v19 = __CFADD__(v70, v4 * v12);
  v75 = v70 + v4 * v12;
  v77 = v19;
  v19 = __CFADD__(v19, v71);
  v76 = v77 + v71;
  v19 |= __CFADD__(v74, v76);
  v76 += v74;
  v79 = v19;
  v19 = __CFADD__(v19, v66);
  v78 = v79 + v66;
  v19 |= __CFADD__(v73, v78);
  v78 += v73;
  v81 = v19;
  v19 = __CFADD__(v19, v46);
  v80 = v81 + v46;
  v19 |= __CFADD__(v68, v80);
  v80 += v68;
  v82 = v19 + v48;
  v83 = (v76 * (unsigned __int128)0x26uLL) >> 64;
  v19 = __CFADD__(v13, 38 * v76);
  v84 = v13 + 38 * v76;
  v86 = v19;
  v19 = __CFADD__(v19, v35);
  v85 = v86 + v35;
  v19 |= __CFADD__(v83, v85);
  v85 += v83;
  v87 = (v80 * (unsigned __int128)0x26uLL) >> 64;
  v89 = v19;
  v19 = __CFADD__(v19, v60);
  v88 = v89 + v60;
  v19 |= __CFADD__(38 * v80, v88);
  v88 += 38 * v80;
  v91 = v19;
  v19 = __CFADD__(v19, v75);
  v90 = v91 + v75;
  v19 |= __CFADD__(v87, v90);
  v90 += v87;
  v92 = v19;
  v93 = (v78 * (unsigned __int128)0x26uLL) >> 64;
  v19 = __CFADD__(v85, 38 * v78);
  v94 = v85 + 38 * v78;
  v96 = v19;
  v19 = __CFADD__(v19, v88);
  v95 = v96 + v88;
  v19 |= __CFADD__(v93, v95);
  v95 += v93;
  v98 = v19;
  v19 = __CFADD__(v19, v90);
  v97 = v98 + v90;
  v19 |= __CFADD__(38 * v82, v97);
  v97 += 38 * v82;
  v99 = 38 * (((v82 * (unsigned __int128)0x26uLL) >> 64) + v19 + v92);
  *a1 = v84 + v99 + (!__CFADD__(__CFADD__(__CFADD__(__CFADD__(v84, v99), v94), v95), v97) ? 0 : 0x26uLL);
  a1[1] = __CFADD__(v84, v99) + v94;
  result = a1 + 2;
  *result = __CFADD__(__CFADD__(v84, v99), v94) + v95;
  result[1] = __CFADD__(__CFADD__(__CFADD__(v84, v99), v94), v95) + v97;
  return result;
}

void ccn_sqrmod_p25519()
{
  JUMPOUT(0x1DEDE1540);
}

uint64_t cccmac_init(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  char v8;
  uint64_t subkeys;
  char v16;
  _QWORD v17[3];

  v8 = 0;
  v17[2] = *MEMORY[0x1E0C874D8];
  v16 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v16 = v8;
  subkeys = 4294967289;
  if (a3 <= 0x20 && ((1 << a3) & 0x101010000) != 0)
  {
    cccbc_init((uint64_t)a1);
    v17[0] = 0;
    v17[1] = 0;
    cccbc_set_iv((uint64_t)a1, (void *)(a2 + 72 + *a1), v17);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = a1;
    *(_QWORD *)(a2 + 48) = 0;
    subkeys = cccmac_generate_subkeys((uint64_t)a1, a3, a4, (char *)a2, a2 + 16);
  }
  cc_disable_dit(&v16);
  return subkeys;
}

uint64_t ccec_compute_key(_QWORD **a1, _QWORD *a2, unint64_t *a3, char *a4)
{
  char v4;
  uint64_t v10;
  char v12;

  v4 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v12 = v4;
  v10 = ccecdh_compute_shared_secret(a1, a2, a3, a4, 0);
  cc_disable_dit(&v12);
  return v10;
}

uint64_t ccdh_init_gp_from_bytes(uint64_t *a1, unint64_t a2, unint64_t a3, unsigned __int8 *a4, unint64_t a5, unsigned __int8 *a6, unint64_t a7, unsigned __int8 *a8, unint64_t a9)
{
  char v16;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t uint;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t);
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  unint64_t *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t inited;
  unint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int8x16_t *v49;
  int8x16_t *v50;
  uint64_t v51;
  _QWORD v54[2];
  uint64_t v55;
  uint64_t (*v56)(_QWORD *, uint64_t);
  void (*v57)(uint64_t);
  char v58;

  v16 = 0;
  v58 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v16 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v16 = 1;
    }
  }
  v58 = v16;
  v22 = sizeof_struct_ccrns_mul_modulus();
  v23 = sizeof_struct_ccpolyzp_po2cyc();
  v24 = (20 * a2) | 2;
  v54[0] = cc_malloc_clear(8 * ((v22 + v23 - 1) / v23 + v24));
  v25 = sizeof_struct_ccrns_mul_modulus();
  v26 = sizeof_struct_ccpolyzp_po2cyc();
  v54[1] = (v25 + v26 - 1) / v26 + v24;
  v55 = 0;
  v56 = cc_ws_alloc;
  v57 = cc_ws_free;
  if (!v54[0])
  {
    v35 = 4294967283;
    goto LABEL_36;
  }
  v27 = a1 + 3;
  uint = ccn_read_uint(a2, a1 + 3, a3, a4);
  if ((_DWORD)uint
    || (v29 = ccdh_gp_prime(a1),
        v30 = ccn_n(a2, v29),
        *a1 = v30,
        uint = ccn_read_uint(v30, &v27[v30 + 1 + v30], a5, a6),
        (_DWORD)uint))
  {
    v35 = uint;
  }
  else
  {
    v31 = (unint64_t *)ccdh_gp_prime(a1);
    v32 = (unint64_t *)ccdh_gp_g(a1);
    v33 = ccdh_lookup_gp(v30, v31, v30, v32);
    if (v33)
    {
      ccdh_copy_gp(a1, v33);
      v34 = ccdh_gp_l(a1);
      v35 = 0;
      v36 = cc_ws_free;
      if (a9 && !v34)
      {
        v35 = 0;
        v37 = 160;
        if (a9 > 0xA0)
          v37 = a9;
        v27[*a1 + 1 + *a1 + *a1 + *a1] = v37;
        goto LABEL_14;
      }
LABEL_35:
      v36((uint64_t)v54);
      goto LABEL_36;
    }
    v38 = ccrng(0);
    if (v38)
    {
      v39 = v38;
      v40 = (unint64_t *)ccdh_gp_prime(a1);
      v41 = ccprime_rabin_miller_ws((uint64_t)v54, v30, v40, 5uLL, (uint64_t (**)(_QWORD, unint64_t, uint64_t))v39);
      v35 = v41;
      if ((v41 & 0x80000000) == 0)
      {
        if ((_DWORD)v41 != 1)
        {
          v35 = 4294967130;
          goto LABEL_34;
        }
        v42 = &v27[*a1 + 1 + *a1 + *a1];
        v42[*a1] = 0;
        if (!a8)
        {
          ccn_zero(v30, v42);
          if (a9)
          {
            v46 = 160;
            if (a9 > 0xA0)
              v46 = a9;
            v27[*a1 + 1 + *a1 + *a1 + *a1] = v46;
          }
          if ((*(_BYTE *)ccdh_gp_prime(a1) & 1) == 0)
          {
            v35 = 4294967289;
            goto LABEL_34;
          }
          v47 = v55;
          v48 = ccdh_gp_n(a1);
          v49 = (int8x16_t *)v56(v54, v48);
          v50 = (int8x16_t *)ccdh_gp_prime(a1);
          ccn_shift_right(v48, v49, v50, 1);
          v51 = ccprime_rabin_miller_ws((uint64_t)v54, v48, (unint64_t *)v49, 5uLL, (uint64_t (**)(_QWORD, unint64_t, uint64_t))v39);
          v35 = v51;
          v55 = v47;
          if ((v51 & 0x80000000) != 0)
            goto LABEL_34;
          if ((_DWORD)v51 != 1)
          {
            v35 = 4294967128;
            goto LABEL_34;
          }
LABEL_32:
          inited = cczp_init_ws((uint64_t)v54, a1);
          goto LABEL_33;
        }
        inited = ccn_read_uint(v30, v42, a7, a8);
        if ((_DWORD)inited)
        {
LABEL_33:
          v35 = inited;
          goto LABEL_34;
        }
        v44 = (unint64_t *)ccdh_gp_order(a1);
        v45 = ccprime_rabin_miller_ws((uint64_t)v54, v30, v44, 5uLL, (uint64_t (**)(_QWORD, unint64_t, uint64_t))v39);
        v35 = v45;
        if ((v45 & 0x80000000) == 0)
        {
          if ((_DWORD)v45 != 1)
          {
            v35 = 4294967129;
            goto LABEL_34;
          }
          goto LABEL_32;
        }
      }
LABEL_34:
      v55 = 0;
      v36 = v57;
      goto LABEL_35;
    }
    v35 = 0xFFFFFFFFLL;
  }
LABEL_14:
  cc_ws_free((uint64_t)v54);
LABEL_36:
  cc_disable_dit(&v58);
  return v35;
}

uint64_t ccrsa_emsa_pss_encode(uint64_t a1, uint64_t a2, size_t a3, char *a4, size_t a5, uint64_t a6, unint64_t a7, _BYTE *a8)
{
  char *v11;
  size_t v12;
  char v14;
  unint64_t v19;
  size_t v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  char *v26;
  char *v27;
  unsigned int v28;
  _BYTE *v29;
  char v30;
  unint64_t v31;
  char v32;
  size_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  size_t *v38;
  uint64_t __src;
  char v40;
  uint64_t v41;

  v11 = a4;
  v12 = a3;
  v14 = 0;
  v41 = *MEMORY[0x1E0C874D8];
  v40 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v14 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v14 = 1;
    }
  }
  v40 = v14;
  v19 = (a7 + 7) >> 3;
  v20 = a5 + a3;
  if (8 * (a5 + a3) + 9 <= a7 && v19 >= a5 + a3 + 2)
  {
    v36 = a7 + 7;
    v37 = a2;
    v38 = &v34;
    __src = 0;
    v34 = ~a5;
    v35 = &a8[v19 + ~a5];
    MEMORY[0x1E0C86820](a1, a2, a3, a4);
    v24 = (size_t *)((char *)&v34 - v23);
    v26 = v25;
    ccdigest_init(a1, (size_t *)((char *)&v34 - v23));
    ccdigest_update(a1, v24, 8uLL, (char *)&__src);
    ccdigest_update(a1, v24, a5, v26);
    if (v12)
      ccdigest_update(a1, v24, v12, v11);
    v27 = v35;
    (*(void (**)(uint64_t, _QWORD *, char *))(a1 + 56))(a1, v24, v35);
    cc_clear(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) + 12, v24);
    v28 = ccmgf(v37, v19 + v34, (uint64_t)a8, a5, v27);
    a8[v19 - v20 - 2] ^= 1u;
    if (v12)
    {
      v29 = &a8[~v20 + v19];
      do
      {
        v30 = *v11++;
        *v29++ ^= v30;
        --v12;
      }
      while (v12);
    }
    v31 = (v36 & 0xFFFFFFFFFFFFFFF8) - a7;
    if (v31 >= 8)
      v22 = 0xFFFFFFFFLL;
    else
      v22 = v28;
    if (v31 >= 8)
      v32 = -1;
    else
      v32 = 0xFFu >> v31;
    *a8 &= v32;
    a8[v19 - 1] = -68;
  }
  else
  {
    v22 = 4294967271;
  }
  cc_disable_dit(&v40);
  return v22;
}

uint64_t ccsrp_generate_v_ws(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  _QWORD *v6;
  unint64_t v7;
  uint64_t (**v8)(_QWORD, uint64_t, uint64_t *);
  uint64_t *v9;
  void *v10;

  v6 = *(_QWORD **)(a2 + 8);
  v7 = 8 * **(_QWORD **)a2;
  v8 = *(uint64_t (***)(_QWORD, uint64_t, uint64_t *))(a2 + 16);
  v9 = (uint64_t *)(a2 + 16 * ccdh_gp_n(v6) + 32);
  v10 = (void *)ccdh_gp_g(*(_QWORD **)(a2 + 8));
  return ccdh_power_blinded_ws(a1, v8, v6, v9, v10, v7, a3);
}

uint64_t ccsrp_generate_salt_and_verification(uint64_t a1, uint64_t (**a2)(_QWORD, size_t, char *), char *a3, size_t a4, char *a5, size_t a6, char *a7, char *a8)
{
  char v15;
  uint64_t verifier;
  char v23;

  v15 = 0;
  v23 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v15 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v15 = 1;
    }
  }
  v23 = v15;
  verifier = (*a2)(a2, a6, a7);
  if (!(_DWORD)verifier)
    verifier = ccsrp_generate_verifier(a1, a3, a4, a5, a6, a7, a8);
  cc_disable_dit(&v23);
  return verifier;
}

uint64_t ccsrp_generate_verifier(uint64_t a1, char *a2, size_t a3, char *a4, size_t a5, char *a6, char *a7)
{
  char v14;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t x;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t (*v33)(_QWORD *, uint64_t);
  void (*v34)(uint64_t);
  char v35;

  v14 = 0;
  v35 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v14 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v14 = 1;
    }
  }
  v35 = v14;
  v20 = ccdh_gp_n(*(_QWORD *)(a1 + 8));
  v21 = CCDH_POWER_BLINDED_WORKSPACE_N(v20);
  v31[0] = cc_malloc_clear(8 * (v21 + v20));
  v31[1] = CCDH_POWER_BLINDED_WORKSPACE_N(v20) + v20;
  v32 = 0;
  v33 = cc_ws_alloc;
  v34 = cc_ws_free;
  if (v31[0])
  {
    v22 = ccdh_gp_n(*(_QWORD *)(a1 + 8));
    v23 = (_QWORD *)cc_ws_alloc(v31, v22);
    v24 = ccdh_gp_n(*(_QWORD *)(a1 + 8));
    v22 *= 8;
    cc_clear(v22, (void *)(a1 + 32 + 16 * v24));
    cc_clear(v22, v23);
    x = ccsrp_generate_x(a1, v23, a2, a5, a6, a3, a4);
    if ((_DWORD)x || (x = ccsrp_generate_v_ws((uint64_t)v31, a1, v23), (_DWORD)x))
    {
      v29 = x;
    }
    else
    {
      v26 = (unint64_t *)(a1 + 32 + 16 * ccdh_gp_n(*(_QWORD *)(a1 + 8)));
      v27 = ccdh_gp_n(*(_QWORD *)(a1 + 8));
      v28 = ccdh_gp_n(*(_QWORD *)(a1 + 8));
      ccn_write_uint_padded_ct(v27, v26, 8 * v28, a7);
      v29 = 0;
    }
    v32 = 0;
    v34((uint64_t)v31);
  }
  else
  {
    v29 = 4294967283;
  }
  cc_disable_dit(&v35);
  return v29;
}

BOOL ccdh_valid_shared_secret(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  _BOOL8 result;

  v6 = a1 - 1;
  v7 = ccdh_gp_prime(a3);
  v8 = ccn_cmp(v6, (unint64_t *)(v7 + 8), a2 + 1);
  v9 = *a2;
  v10 = (_DWORD *)ccdh_gp_prime(a3);
  if (!a1)
    return 0;
  v11 = (*v10 - 1) ^ v9 | v8 | (((*(_QWORD *)v10 - 1) ^ v9 | (unint64_t)v8) >> 32);
  if ((unint64_t)ccn_n(a1, a2) > 1)
    return v11 != 0;
  result = 0;
  if (*a2 >= 2uLL && v11)
    return 1;
  return result;
}

uint64_t ccvrf_irtf_ed25519_prove(uint64_t a1, char *a2, char *a3, size_t a4, _OWORD *a5)
{
  char *v8;
  int v10;
  _OWORD v12[10];
  _OWORD v13[10];
  _OWORD v14[10];
  _OWORD v15[10];
  _OWORD v16[10];
  char v17[32];
  int8x16_t v18[2];
  int *v19[4];
  _OWORD v20[2];
  __int128 v21;
  __int128 v22;
  int8x16_t __s[2];
  _OWORD v24[2];
  uint64_t v25;

  v8 = a2;
  v25 = *MEMORY[0x1E0C874D8];
  memset(v12, 0, sizeof(v12));
  v10 = ccvrf_irtf_ed25519_derive_scalar_internal(a1, a2, v18, v17);
  LODWORD(v8) = ccvrf_irtf_ed25519_derive_public_key_internal(a1, v8, v12);
  memset(v24, 0, sizeof(v24));
  memset(__s, 0, sizeof(__s));
  v21 = 0u;
  v22 = 0u;
  memset(v20, 0, sizeof(v20));
  memset(v16, 0, sizeof(v16));
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  memset(v13, 0, sizeof(v13));
  ccvrf_irtf_ed25519_hash2curve_elligator2(*(_QWORD *)(a1 + 40), (uint64_t)v12, a3, a4, (uint64_t)v24);
  ge_frombytes_vartime((int *)v16, (uint64_t)v24);
  ge_scalarmult(v15, v18, (uint64_t)v16);
  ccvrf_irtf_nonce_generation(*(_QWORD *)(a1 + 40), __s, v17, (char *)v24);
  ge_scalarmult_base(v14, __s);
  ge_scalarmult(v13, __s, (uint64_t)v16);
  v19[0] = (int *)v16;
  v19[1] = (int *)v15;
  v19[2] = (int *)v14;
  v19[3] = (int *)v13;
  ccvrf_irtf_ed25519_hash_points(a1, v19, 4, &v21);
  cc_clear(0x10uLL, &v22);
  sc_muladd(v20, (unsigned __int16 *)&v21, (unsigned __int16 *)v18, (unsigned __int16 *)__s);
  ccvrf_irtf_ed25519_encode_proof((int *)v15, &v21, v20, a5);
  cc_clear(0x20uLL, __s);
  cc_clear(0x20uLL, v24);
  cc_clear(0x20uLL, &v21);
  cc_clear(0xA0uLL, v16);
  cc_clear(0xA0uLL, v15);
  cc_clear(0xA0uLL, v14);
  cc_clear(0xA0uLL, v13);
  cc_clear(0x20uLL, v18);
  cc_clear(0x20uLL, v17);
  cc_clear(0xA0uLL, v12);
  return v8 | v10;
}

uint64_t ccvrf_prove(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v13;
  uint64_t v19;
  char v21;

  v13 = 0;
  v21 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v13 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v13 = 1;
    }
  }
  v21 = v13;
  if (ccvrf_sizeof_secret_key(a1) == a2 && ccvrf_sizeof_proof(a1) == a6)
    v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 64))(a1, a3, a5, a4, a7);
  else
    v19 = 4294967289;
  cc_disable_dit(&v21);
  return v19;
}

uint64_t ccvrf_irtf_nonce_generation(uint64_t a1, _OWORD *a2, char *a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;
  uint64_t v13;
  _OWORD __s[4];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C874D8];
  v8 = MEMORY[0x1E0C86820](a1, a2, a3, a4);
  v10 = (uint64_t *)((char *)&v13 - v9);
  ccdigest_init(v8, (uint64_t *)((char *)&v13 - v9));
  ccdigest_update(a1, v10, 0x20uLL, a3);
  ccdigest_update(a1, v10, 0x20uLL, a4);
  (*(void (**)(uint64_t, _QWORD *, _OWORD *))(a1 + 56))(a1, v10, __s);
  sc_reduce((unsigned __int16 *)__s);
  v11 = __s[1];
  *a2 = __s[0];
  a2[1] = v11;
  cc_clear(0x40uLL, __s);
  return cc_clear(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) + 12, v10);
}

uint64_t ccrsa_eme_pkcs1v15_decode_safe_ws(uint64_t a1, _QWORD *a2, rsize_t *a3, void *a4, size_t a5, unint64_t *a6)
{
  void *v12;
  uint64_t v13;
  _BYTE __s[32];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C874D8];
  v12 = ccsha256_di();
  ccdigest((uint64_t)v12, 8 * *a2, (char *)&a2[3 * *a2 + 4], (uint64_t)__s);
  v13 = ccrsa_eme_pkcs1v15_decode_internal_ws(a1, (uint64_t)__s, a3, a4, a5, a6);
  cc_clear(0x20uLL, __s);
  return v13;
}

uint64_t ccrsa_eme_pkcs1v15_decode_internal_ws(uint64_t a1, uint64_t a2, rsize_t *a3, void *a4, size_t a5, unint64_t *a6)
{
  uint64_t v6;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  void *v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  rsize_t v29;
  uint64_t v30;
  size_t v31;
  char v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t (*v37[3])(_QWORD, uint64_t, unint64_t *);
  _QWORD v38[2];
  _OWORD v39[3];
  uint64_t v40;
  _OWORD v41[9];
  char v42[48];
  _BYTE __s[32];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C874D8];
  v6 = 4294967273;
  if (a5 < 0xB || *a3 < a5)
    return v6;
  v29 = a5 - 11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = ccrsa_n_from_size(a5);
  ccn_swap(v13, a6);
  v14 = (char *)ccrsa_block_start(a5, a6, 0);
  v28 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v13);
  v35 = 0;
  v40 = 0;
  memset(v39, 0, sizeof(v39));
  v38[1] = 0;
  v38[0] = ccsha256_di();
  ccdrbg_factory_nisthmac(v39, (uint64_t)v38);
  v15 = ccsha256_di();
  ccdigest((uint64_t)v15, a5, v14, (uint64_t)__s);
  strcpy(v42, "ccrsa_eme_pkcs1v15_decode_generate_random");
  memset(v41, 0, sizeof(v41));
  inited = ccdrbg_init((uint64_t)v39);
  if ((_DWORD)inited
    || (memset(v37, 0, sizeof(v37)),
        inited = ccrng_drbg_init_withdrbg((uint64_t (**)(uint64_t, uint64_t, uint64_t))v37, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v39, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v41), (_DWORD)inited)|| (inited = v37[0](v37, v29, v28), (_DWORD)inited))
  {
    v6 = inited;
    goto LABEL_16;
  }
  v36 = 0;
  v6 = ccrng_uniform(v37, a5 - 10, &v36);
  if ((_DWORD)v6)
  {
LABEL_16:
    v17 = 0;
    goto LABEL_8;
  }
  v17 = v36;
  v35 = v36;
LABEL_8:
  cc_clear(0x20uLL, __s);
  cc_clear(8uLL, &v36);
  ccdrbg_done((uint64_t)v39, (uint64_t)v41);
  if ((_DWORD)v6)
  {
    cc_clear(v29, v28);
    cc_clear(8uLL, &v35);
  }
  else
  {
    v26 = v13;
    v27 = v12;
    v18 = 0;
    v19 = ((v14[1] ^ 2 | (unint64_t)*v14) + 0xFFFFFFFF) >> 32;
    v20 = 1;
    v21 = 2;
    do
    {
      v22 = ((unint64_t)v14[v21] + 0xFFFFFFFF) >> 32;
      v18 = v18 & (v20 - 1) | v21 & -v20;
      v33 = v18;
      v20 &= v22;
      v32 = v20;
      ++v21;
    }
    while (a5 != v21);
    v31 = ~v18 + a5;
    v30 = v18 - 2;
    v23 = (((((unint64_t)(v18 - 2) >> 3) | ((unint64_t)(v18 - 2) >> 35)) + 0xFFFFFFFF) >> 32) ^ 1 | v20 | v19;
    v34 = v23;
    v24 = v18 + 1;
    cc_clear(*a3, a4);
    *(_QWORD *)&v41[0] = *a3;
    ccrsa_xor_varlen((uint64_t *)v41, (uint64_t)a4, v23, v29, v17, (unsigned __int8 *)v28);
    *(_QWORD *)&v39[0] = *a3;
    ccrsa_xor_varlen((uint64_t *)v39, (uint64_t)a4, v23 ^ 1, a5, v24, (unsigned __int8 *)v14);
    *a3 = v39[0] & (v23 - 1) | (unint64_t)(v41[0] & -v23);
    cc_clear(8uLL, v41);
    cc_clear(8uLL, v39);
    v13 = v26;
    v12 = v27;
  }
  ccn_swap(v13, a6);
  cc_clear(8uLL, &v35);
  cc_clear(4uLL, &v34);
  cc_clear(8uLL, &v33);
  cc_clear(1uLL, &v32);
  cc_clear(8uLL, &v31);
  cc_clear(8uLL, &v30);
  *(_QWORD *)(a1 + 16) = v12;
  return v6;
}

uint64_t ccrsa_eme_pkcs1v15_decode_safe(uint64_t *a1, rsize_t *a2, void *a3, size_t a4, unint64_t *a5)
{
  char v10;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[4];
  void (*v21)(uint64_t);
  char v22;

  v10 = 0;
  v22 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v22 = v10;
  v16 = cc_malloc_clear(8 * *a1);
  v17 = *a1;
  v20[0] = v16;
  v20[1] = v17;
  v20[2] = 0;
  v20[3] = cc_ws_alloc;
  v21 = cc_ws_free;
  if (v16)
  {
    v18 = ccrsa_eme_pkcs1v15_decode_safe_ws((uint64_t)v20, a1, a2, a3, a4, a5);
    v21((uint64_t)v20);
  }
  else
  {
    v18 = 4294967283;
  }
  cc_disable_dit(&v22);
  return v18;
}

uint64_t ccrsa_eme_pkcs1v15_decode(rsize_t *a1, void *a2, size_t a3, unint64_t *a4)
{
  char v8;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v18;
  _QWORD v19[4];
  void (*v20)(uint64_t);
  char v21;

  v8 = 0;
  v21 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v21 = v8;
  v14 = ccrsa_n_from_size(a3);
  v19[0] = cc_malloc_clear(8 * v14);
  v19[1] = v14;
  v19[2] = 0;
  v19[3] = cc_ws_alloc;
  v20 = cc_ws_free;
  if (!v19[0])
  {
    v16 = 4294967283;
    goto LABEL_13;
  }
  v18 = 0;
  if ((ccrsa_eme_pkcs1v15_decode_entropy_init & 1) == 0)
  {
    v15 = ccrng(&v18);
    if (!v15)
      goto LABEL_11;
    v18 = ((uint64_t (*)(uint64_t *, uint64_t, void *))*v15)(v15, 32, &ccrsa_eme_pkcs1v15_decode_entropy);
    if (v18)
      goto LABEL_11;
    ccrsa_eme_pkcs1v15_decode_entropy_init = 1;
  }
  v18 = ccrsa_eme_pkcs1v15_decode_internal_ws((uint64_t)v19, (uint64_t)&ccrsa_eme_pkcs1v15_decode_entropy, a1, a2, a3, a4);
LABEL_11:
  v20((uint64_t)v19);
  v16 = v18;
LABEL_13:
  cc_disable_dit(&v21);
  return v16;
}

uint64_t *ccrsa_xor_varlen(uint64_t *result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  unint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  if (*result)
  {
    v6 = 0;
    v7 = -a5;
    do
    {
      v8 = 0;
      if (a4)
      {
        v9 = a6;
        v10 = v7;
        v11 = a4;
        do
        {
          v12 = *v9++;
          v8 ^= v12 & -a3 & ((((v10 | HIDWORD(v10)) + 0xFFFFFFFF) >> 32) - 1);
          ++v10;
          --v11;
        }
        while (v11);
      }
      *(_BYTE *)(a2 + v6++) ^= v8;
      v13 = *result;
      --v7;
    }
    while (v6 < *result);
  }
  else
  {
    v13 = 0;
  }
  *result = v13 & (a3 - 1) | (a4 - a5) & -(uint64_t)a3;
  return result;
}

uint64_t ccckg_ctx_cp(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t ccckg_ctx_di(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

unint64_t ccckg_sizeof_ctx(_QWORD *a1, _QWORD *a2)
{
  return ((2 * *a2 + 14) & 0xFFFFFFFFFFFFFFF0) + 8 * *a1 + 40;
}

uint64_t ccckg_sizeof_commitment(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

unint64_t ccckg_sizeof_share(uint64_t a1, _QWORD *a2)
{
  return (((unint64_t)(cczp_bitlen(a1) + 7) >> 2) | 1) + *a2;
}

unint64_t ccckg_sizeof_opening(_QWORD *a1, _QWORD *a2)
{
  return *a2 + ((unint64_t)(cczp_bitlen((uint64_t)&a1[5 * *a1 + 4]) + 7) >> 3);
}

uint64_t ccckg_init(_DWORD *__s, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  char v8;
  char v15;

  v8 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v15 = v8;
  cc_clear(((2 * *a3 + 14) & 0xFFFFFFFFFFFFFFF0) + 8 * *a2 + 40, __s);
  *__s = 1;
  *((_QWORD *)__s + 1) = a2;
  *((_QWORD *)__s + 2) = a3;
  *((_QWORD *)__s + 3) = a4;
  *((_BYTE *)__s + 32) = 0;
  cc_disable_dit(&v15);
  return 0;
}

uint64_t ccckg_derive_sk(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6)
{
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21[66];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C874D8];
  v12 = *(unint64_t **)(a1 + 8);
  v11 = *(uint64_t **)(a1 + 16);
  v13 = *v12;
  v14 = cczp_bitlen((uint64_t)v12);
  ccn_write_uint_padded(v13, a2, (unint64_t)(v14 + 7) >> 3, v21);
  v17 = a3;
  v18 = *v11;
  v19 = a4;
  v20 = v18;
  v15 = cczp_bitlen((uint64_t)v12);
  return ccansikdf_x963_iovec(v11, (unint64_t)(v15 + 7) >> 3, v21, 2, (uint64_t)&v17, a5, a6);
}

uint64_t ccsrp_generate_x(uint64_t a1, _QWORD *a2, char *a3, size_t a4, char *a5, size_t a6, char *a7)
{
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t uint;
  unsigned __int8 __s[64];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C874D8];
  v14 = *(_QWORD *)a1;
  MEMORY[0x1E0C86820](a1, a2, a3, a4);
  v16 = &__s[-v15 - 8];
  ccdigest_init(v14, &__s[-v15 - 8]);
  if ((*(_BYTE *)(a1 + 24) & 2) == 0)
  {
    v17 = strlen(a3);
    ccdigest_update(v14, v16, v17, a3);
  }
  ccdigest_update(v14, v16, 1uLL, ":");
  ccdigest_update(v14, v16, a6, a7);
  (*(void (**)(uint64_t, unsigned __int8 *, unsigned __int8 *))(v14 + 56))(v14, v16, __s);
  ccdigest_init(v14, v16);
  ccdigest_update(v14, v16, a4, a5);
  ccdigest_update(v14, v16, *(_QWORD *)v14, (char *)__s);
  (*(void (**)(uint64_t, unsigned __int8 *, unsigned __int8 *))(v14 + 56))(v14, v16, __s);
  v18 = *(_QWORD *)v14;
  v19 = ccdh_gp_n(*(_QWORD *)(a1 + 8));
  uint = ccn_read_uint(v19, a2, v18, __s);
  cc_clear(*(_QWORD *)v14, __s);
  cc_clear(*(_QWORD *)(v14 + 8) + *(_QWORD *)(v14 + 16) + 12, v16);
  return uint;
}

unint64_t ccecies_pub_key_size(uint64_t *a1, uint64_t a2)
{
  char v2;
  unint64_t v8;
  char v10;

  v2 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v10 = v2;
  v8 = ccecies_pub_key_size_cp(*a1, a2);
  cc_disable_dit(&v10);
  return v8;
}

unint64_t ccecies_pub_key_size_cp(uint64_t a1, uint64_t a2)
{
  char v2;
  int v8;
  unint64_t v9;
  char v11;

  v2 = 0;
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v11 = v2;
  v8 = *(_DWORD *)(a2 + 32);
  if ((v8 & 2) != 0)
  {
    v9 = ((unint64_t)(cczp_bitlen(a1) + 7) >> 2) | 1;
  }
  else if ((v8 & 4) != 0)
  {
    v9 = (unint64_t)(cczp_bitlen(a1) + 7) >> 3;
  }
  else
  {
    v9 = 0;
  }
  cc_disable_dit(&v11);
  return v9;
}

unint64_t CCHE_CIPHER_PLAIN_CTX_INIT_WORKSPACE_N(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (3 * (unint64_t)a1 + 3 <= 2 * (unint64_t)a1)
    v1 = 2 * a1;
  else
    v1 = 3 * a1 + 3;
  v2 = a1;
  if ((_DWORD)a1)
    v3 = v1;
  else
    v3 = 3;
  v4 = CCPOLYZP_PO2CYC_CTX_Q_PROD_WORKSPACE_N(a1);
  if (v4 <= v3)
    v5 = v3;
  else
    v5 = v4;
  return v5 + 2 * v2;
}

uint64_t cche_cipher_plain_ctx_init_ws(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unsigned int v12;
  uint64_t *v13;
  _QWORD *v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t result;
  unint64_t v18[2];

  v18[1] = *MEMORY[0x1E0C874D8];
  v8 = *(unsigned int *)(a4 + 4);
  *(_QWORD *)a2 = a3;
  *(_QWORD *)(a2 + 8) = a4;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v8);
  ccpolyzp_po2cyc_ctx_q_prod_ws(a1, v10, a4);
  v18[0] = cche_param_ctx_plaintext_modulus(a3);
  v11 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v8);
  ccn_divmod_ws(a1, v8, (uint64_t)v10, v8, (uint64_t)v11, 1, (char *)(a2 + 16), (uint64_t)v18);
  *(_QWORD *)(a2 + 24) = (unint64_t)(cche_param_ctx_plaintext_modulus(a3) + 1) >> 1;
  if ((_DWORD)v8)
  {
    v12 = 0;
    v13 = (uint64_t *)(a2 + 32);
    v14 = (_QWORD *)(a2 + 32 + 8 * *(unsigned int *)(*(_QWORD *)(a2 + 8) + 4));
    while (1)
    {
      v15 = *(_DWORD *)(a4 + 4) - 1;
      v16 = (_QWORD *)a4;
      if (v15 > v12)
      {
        v16 = (_QWORD *)a4;
        do
        {
          v16 = (_QWORD *)v16[14];
          --v15;
        }
        while (v15 > v12);
      }
      cczp_modn_ws(a1, v16 + 15, v13, v8, v11);
      if (ccn_sub_ws(a1, 1, v14, v16 + 18, v18))
        break;
      ++v13;
      ++v14;
      if (++v12 == (_DWORD)v8)
        goto LABEL_8;
    }
    result = 0xFFFFFFFFLL;
  }
  else
  {
LABEL_8:
    result = 0;
  }
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

uint64_t ccecb_context_size(uint64_t *a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *a1;
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccecb_block_size(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *(_QWORD *)(a1 + 8);
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccecb_init(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = (*(uint64_t (**)(void))(a1 + 16))();
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccecb_update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5;
  uint64_t v11;
  char v13;

  v5 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v13 = v5;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 24))(a2, a3, a4, a5);
  cc_disable_dit(&v13);
  return v11;
}

uint64_t ccecb_one_shot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v6;
  uint64_t v12;
  char v14;

  v6 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v14 = v6;
  v12 = ccecb_one_shot_explicit(a1, a2, *(_QWORD *)(a1 + 8), a4, a3, a5, a6);
  cc_disable_dit(&v14);
  return v12;
}

uint64_t ccecb_one_shot_explicit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v11;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[7];
  char v24;
  uint64_t v25;

  v11 = 0;
  v25 = *MEMORY[0x1E0C874D8];
  v24 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v11 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v11 = 1;
    }
  }
  v24 = v11;
  if (*(_QWORD *)(a1 + 8) == a3)
  {
    MEMORY[0x1E0C86820](a1, a2, a3, a4);
    v18 = &v23[-v17];
    v21 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(a1 + 16))(a1, &v23[-v17], v20, v19);
    if (!(_DWORD)v21)
      v21 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(a1 + 24))(v18, a4, a6, a7);
    cc_clear(*(_QWORD *)a1, v18);
  }
  else
  {
    v21 = 4294967289;
  }
  cc_disable_dit(&v24);
  return v21;
}

uint64_t ccckg2_contributor_commit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(_QWORD, uint64_t, uint64_t *))
{
  char v8;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v23[4];
  void (*v24)(uint64_t);
  char v25;

  v8 = 0;
  v25 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v25 = v8;
  v14 = (uint64_t *)ccckg2_ctx_cp(a1);
  v15 = *v14;
  v16 = sizeof_struct_cche_galois_key();
  v17 = sizeof_struct_ccpolyzp_po2cyc();
  v23[0] = cc_malloc_clear(8 * ((v16 + v17 + 4 * v15 * v17 - 1) / v17 + 49 * v15));
  v18 = *v14;
  v19 = sizeof_struct_cche_galois_key();
  v20 = sizeof_struct_ccpolyzp_po2cyc();
  v23[1] = (v19 + v20 + 4 * v18 * v20 - 1) / v20 + 49 * v18;
  v23[2] = 0;
  v23[3] = cc_ws_alloc;
  v24 = cc_ws_free;
  if (v23[0])
  {
    v21 = ccckg2_contributor_commit_ws((uint64_t)v23, a1, a2, a3, a4);
    v24((uint64_t)v23);
  }
  else
  {
    v21 = 4294967283;
  }
  cc_disable_dit(&v25);
  return v21;
}

uint64_t ccckg2_contributor_commit_ws(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(_QWORD, uint64_t, uint64_t *))
{
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t result;
  uint64_t **v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char __src[66];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C874D8];
  v10 = ccckg2_ctx_di(a2);
  v11 = (unint64_t *)ccckg2_ctx_cp(a2);
  v12 = *v11;
  MEMORY[0x1E0C86820](v11, v13, v14, v15);
  v17 = (uint64_t *)((char *)&v29 - v16);
  if (*(_BYTE *)(a2 + 32))
    return 4294967210;
  if (*(_DWORD *)a2 != 2 || *(_QWORD *)v10 != a3)
    return 4294967289;
  v30 = *(_QWORD *)(a1 + 16);
  v19 = (uint64_t **)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, (4 * (v12 & 0x7FFFFFFFFFFFFFFLL)) | 2);
  *v19 = (uint64_t *)v11;
  v20 = a2 + 40;
  result = ccec_generate_scalar_fips_retry_ws(a1, v11, (uint64_t (**)(_QWORD, unint64_t, void *))a5, (_QWORD *)(a2 + 40));
  if (!(_DWORD)result)
  {
    result = ccec_generate_key_fips_ws(a1, (uint64_t *)v11, a5, v19);
    if (!(_DWORD)result)
    {
      v21 = (_QWORD *)ccckg2_ctx_cp(a2);
      ccn_set(v12, (void *)(v20 + 8 * *v21), &v19[3 * **v19 + 2]);
      v22 = (_QWORD *)ccckg2_ctx_cp(a2);
      v23 = (_QWORD *)ccckg2_ctx_cp(a2);
      result = ccec_export_pub((uint64_t)v19, (char *)(v20 + 8 * *v23 + 8 * *v22));
      if (!(_DWORD)result)
      {
        v24 = cczp_bitlen((uint64_t)&v11[5 * *v11 + 4]);
        ccn_write_uint_padded(v12, (unint64_t *)(a2 + 40), (unint64_t)(v24 + 7) >> 3, __src);
        ccdigest_init(v10, v17);
        v25 = cczp_bitlen((uint64_t)&v11[5 * *v11 + 4]);
        ccdigest_update(v10, v17, (unint64_t)(v25 + 7) >> 3, __src);
        v26 = ((unint64_t)(cczp_bitlen((uint64_t)*v19) + 7) >> 2) | 1;
        v27 = (_QWORD *)ccckg2_ctx_cp(a2);
        v28 = (_QWORD *)ccckg2_ctx_cp(a2);
        ccdigest_update(v10, v17, v26, (char *)(v20 + 8 * *v28 + 8 * *v27));
        (*(void (**)(uint64_t, _QWORD *, uint64_t))(v10 + 56))(v10, v17, a4);
        cc_clear(*(_QWORD *)(v10 + 8) + *(_QWORD *)(v10 + 16) + 12, v17);
        result = 0;
        *(_BYTE *)(a2 + 32) = 1;
      }
    }
  }
  *(_QWORD *)(a1 + 16) = v30;
  return result;
}

uint64_t ccckg2_contributor_finish(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, char *a5, _QWORD *a6, uint64_t a7, char *a8, uint64_t (**a9)(_QWORD, uint64_t, uint64_t *))
{
  char v16;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  const void *v40;
  uint64_t v41;
  unint64_t v43;
  _QWORD v45[2];
  uint64_t v46;
  uint64_t (*v47)(_QWORD *, uint64_t);
  void (*v48)(uint64_t);
  char v49;

  v16 = 0;
  v49 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v16 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v16 = 1;
    }
  }
  v49 = v16;
  v22 = (uint64_t *)ccckg2_ctx_cp(a1);
  v23 = *v22;
  v24 = sizeof_struct_cche_galois_key();
  v25 = sizeof_struct_ccpolyzp_po2cyc();
  v45[0] = cc_malloc_clear((v23 << 8) + 8 * ((v24 + v25 + 3 * v23 * v25 - 1) / v25));
  v26 = *v22;
  v27 = sizeof_struct_cche_galois_key();
  v28 = sizeof_struct_ccpolyzp_po2cyc();
  v45[1] = (v27 + v28 + 3 * v26 * v28 - 1) / v28 + 32 * v26;
  v46 = 0;
  v47 = cc_ws_alloc;
  v48 = cc_ws_free;
  if (!v45[0])
  {
    v36 = 4294967283;
    goto LABEL_19;
  }
  v29 = (_QWORD *)ccckg2_ctx_cp(a1);
  if (*(_BYTE *)(a1 + 32) != 1)
  {
    v36 = 4294967210;
LABEL_18:
    cc_ws_free((uint64_t)v45);
    goto LABEL_19;
  }
  if (*(_DWORD *)a1 != 2
    || (v30 = v29, (_QWORD *)*a6 != v29)
    || (v31 = *v29, (((unint64_t)(cczp_bitlen((uint64_t)v29) + 7) >> 1) & 0x7FFFFFFFFFFFFFFCLL | 2) != a2)
    || (v43 = v31,
        v32 = v30 + 4,
        v33 = cczp_bitlen((uint64_t)&v30[5 * *v30 + 4]) + 7,
        (((unint64_t)(cczp_bitlen((uint64_t)v30) + 7) >> 2) | 1) + (v33 >> 3) != a4))
  {
    v36 = 4294967289;
    goto LABEL_18;
  }
  v34 = ccckg_contributor_finish_derive_p_ws((uint64_t)v45, a1, a3, (uint64_t)a6, a9);
  if ((_DWORD)v34)
  {
    v36 = v34;
  }
  else
  {
    v35 = cczp_bitlen((uint64_t)v30);
    v36 = ccckg2_derive_sk_ws((uint64_t)v45, a1, &a3[((unint64_t)(v35 + 7) >> 2) | 1], (uint64_t)a6, a7, a8, a9);
    if (!(_DWORD)v36)
    {
      v37 = cczp_bitlen((uint64_t)&v32[5 * *v30]);
      ccn_write_uint_padded(v43, (unint64_t *)(a1 + 40), (unint64_t)(v37 + 7) >> 3, a5);
      v38 = &a5[(unint64_t)(cczp_bitlen((uint64_t)&v32[5 * *v30]) + 7) >> 3];
      v39 = (_QWORD *)ccckg2_ctx_cp(a1);
      v40 = (const void *)(a1 + 40 + 8 * *(_QWORD *)ccckg2_ctx_cp(a1) + 8 * *v39);
      v41 = cczp_bitlen((uint64_t)v30);
      memcpy(v38, v40, ((unint64_t)(v41 + 7) >> 2) | 1);
      *(_BYTE *)(a1 + 32) = 3;
    }
  }
  v46 = 0;
  v48((uint64_t)v45);
LABEL_19:
  cc_disable_dit(&v49);
  return v36;
}

uint64_t ccofb_context_size(uint64_t *a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *a1;
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccofb_block_size(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *(_QWORD *)(a1 + 8);
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccofb_init(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = (*(uint64_t (**)(void))(a1 + 16))();
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccofb_update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5;
  uint64_t v11;
  char v13;

  v5 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v13 = v5;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 24))(a2, a3, a4, a5);
  cc_disable_dit(&v13);
  return v11;
}

uint64_t ccofb_one_shot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v11;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE v21[7];
  char v22;
  uint64_t v23;

  v11 = 0;
  v23 = *MEMORY[0x1E0C874D8];
  v22 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v11 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v11 = 1;
    }
  }
  v22 = v11;
  MEMORY[0x1E0C86820](a1, a2, a2, a3);
  v18 = &v21[-v17];
  v19 = (*(uint64_t (**)(uint64_t, _BYTE *))(a1 + 16))(a1, &v21[-v17]);
  if (!(_DWORD)v19)
    v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(a1 + 24))(v18, a5, a6, a7);
  cc_clear(*(_QWORD *)a1, v18);
  cc_disable_dit(&v22);
  return v19;
}

uint64_t cczp_inv(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];
  void (*v16)(uint64_t);
  char v17;

  v6 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v17 = v6;
  v12 = cczp_n(a1);
  v15[0] = cc_malloc_clear(72 * v12);
  v15[1] = 9 * cczp_n(a1);
  v15[2] = 0;
  v15[3] = cc_ws_alloc;
  v16 = cc_ws_free;
  if (v15[0])
  {
    v13 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 40))(v15, a1, a2, a3);
    v16((uint64_t)v15);
  }
  else
  {
    v13 = 4294967283;
  }
  cc_disable_dit(&v17);
  return v13;
}

uint64_t ccdh_import_priv(_QWORD *a1, unint64_t a2, unsigned __int8 *a3, uint64_t *a4)
{
  char v8;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t *v27;
  void (*v28)(uint64_t);
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t (*v33)(_QWORD *, uint64_t);
  void (*v34)(uint64_t);
  char v35;

  v8 = 0;
  v35 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v35 = v8;
  v14 = ccdh_gp_n(a1);
  v15 = sizeof_struct_ccrns_mul_modulus();
  v16 = sizeof_struct_ccpolyzp_po2cyc();
  v31[0] = cc_malloc_clear(8 * ((v15 + v16 - 1) / v16 + 12 * v14) + 8);
  v17 = ccdh_gp_n(a1);
  v18 = sizeof_struct_ccrns_mul_modulus();
  v19 = sizeof_struct_ccpolyzp_po2cyc();
  v31[1] = (v18 + v19 - 1) / v19 + 12 * v17 + 1;
  v32 = 0;
  v33 = cc_ws_alloc;
  v34 = cc_ws_free;
  if (v31[0])
  {
    v20 = ccdh_gp_n(a1);
    v21 = (unint64_t *)ccdh_gp_g(a1);
    v22 = (_QWORD *)ccdh_ctx_public(a4);
    ccdh_ctx_init((uint64_t)a1, v22);
    v24 = *a4;
    v23 = a4 + 2;
    v25 = (unint64_t *)&v23[ccdh_gp_n(v24)];
    if (ccn_read_uint(v20, v25, a2, a3))
    {
      v26 = 4294967244;
    }
    else
    {
      v27 = (unint64_t *)cczp_prime((uint64_t)a1);
      if ((ccn_cmp(v20, v25, v27) & 0x80000000) != 0)
      {
        v30 = cczp_bitlen((uint64_t)a1);
        if (cczp_mm_power_ws((uint64_t)v31, a1, v23, v21, v30, v25))
          v26 = 4294967250;
        else
          v26 = 0;
        v28 = v34;
        goto LABEL_12;
      }
      v26 = 4294967247;
    }
    v28 = cc_ws_free;
LABEL_12:
    v32 = 0;
    v28((uint64_t)v31);
    goto LABEL_13;
  }
  v26 = 4294967283;
LABEL_13:
  cc_disable_dit(&v35);
  return v26;
}

uint64_t ccpolyzp_po2cyc_bytes_to_coeffs(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v6 = a5 - a6;
  if (a5 <= a6 || a3 != (v6 * a1 + 7) >> 3 && (v6 + 8 * a3 - 1) / v6 != a1)
    return 4294967289;
  if (a3)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = a5 - a6;
    do
    {
      v12 = *(unsigned __int8 *)(a4 + v7);
      v13 = 8;
      do
      {
        if (!v11)
        {
          *(_QWORD *)(a2 + 8 * v10++) = v9 << a6;
          v11 = a5 - a6;
          v9 = 0;
        }
        if (v11 >= v13)
          v14 = v13;
        else
          v14 = v11;
        v9 = (v9 << v14) | (v12 >> (8 - v14));
        v12 = (v12 << v14);
        v11 -= v14;
        v13 -= v14;
      }
      while (v13);
      v7 = ++v8;
    }
    while (v8 < a3);
  }
  else
  {
    v10 = 0;
    v9 = 0;
    LOBYTE(v11) = a5 - a6;
  }
  if (v10 >= a1)
    return 0;
  result = 0;
  *(_QWORD *)(a2 + 8 * v10) = v9 << (v11 + a6);
  return result;
}

uint64_t ccpolyzp_po2cyc_coeffs_to_bytes(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;

  v6 = a5 - a6;
  if (a5 <= a6 || a1 != (v6 * a3 + 7) >> 3 && (v6 + 8 * a1 - 1) / v6 != a3)
    return 4294967289;
  if (a3)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    LODWORD(v10) = 0;
    v11 = 8;
    do
    {
      v12 = *(_QWORD *)(a4 + 8 * v7) >> a6;
      v13 = a5 - a6;
      do
      {
        if (!v11)
        {
          *(_BYTE *)(a2 + v8) = v10;
          v10 = 0;
          if (v8 + 1 == a1)
            return v10;
          v11 = 8;
          ++v8;
        }
        if (v13 >= v11)
          v14 = v11;
        else
          v14 = v13;
        v11 -= v14;
        v15 = v13 - v14;
        v16 = ((_DWORD)v10 << v14) | (v12 >> (v13 - v14)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v13);
        LODWORD(v10) = v16;
        v13 = v15;
      }
      while (v15);
      v7 = ++v9;
    }
    while (v9 < a3);
    v17 = v16;
  }
  else
  {
    v17 = 0;
    v8 = 0;
    LOBYTE(v11) = 8;
  }
  v10 = 0;
  if (v8 < a1)
    *(_BYTE *)(a2 + v8) = v17 << v11;
  return v10;
}

uint64_t ccpolyzp_po2cyc_serialize_poly_nbytes(unsigned int *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v4 = 0;
  result = 0;
  do
  {
    v6 = a1;
    if (v2 - 1 > v4)
    {
      v7 = v2 - 1;
      v6 = a1;
      do
      {
        v6 = (unsigned int *)*((_QWORD *)v6 + 14);
        --v7;
      }
      while (v7 > v4);
    }
    result += ((64 - a2 - __clz(*((_QWORD *)v6 + 2))) * *a1 + 7) >> 3;
    ++v4;
  }
  while (v4 != v2);
  return result;
}

uint64_t ccpolyzp_po2cyc_serialize_poly_ws(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int **a5)
{
  unsigned int *v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  unsigned int *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  v8 = *a5;
  v9 = **a5;
  v10 = (*a5)[1];
  if (ccpolyzp_po2cyc_serialize_poly_nbytes(*a5, a4) != a2 || a4 && v10 != 1)
    return 4294967289;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v9);
  if (v10)
  {
    v13 = v12;
    v14 = 0;
    while (1)
    {
      if ((_DWORD)v9)
      {
        v15 = **a5 * v14;
        v16 = v9;
        v17 = (_QWORD *)v13;
        do
        {
          *v17++ = a5[++v15];
          --v16;
        }
        while (v16);
      }
      v18 = v8[1] - 1;
      v19 = v8;
      if (v18 > v14)
      {
        v19 = v8;
        do
        {
          v19 = (unsigned int *)*((_QWORD *)v19 + 14);
          --v18;
        }
        while (v18 > v14);
      }
      v20 = 64 - __clz(*((_QWORD *)v19 + 2));
      if (v20 <= a4)
        return 4294967289;
      v21 = ((v20 - a4) * v9 + 7) >> 3;
      result = ccpolyzp_po2cyc_coeffs_to_bytes(v21, a3, v9, v13, v20, a4);
      if ((_DWORD)result)
        goto LABEL_18;
      a3 += v21;
      if (++v14 == v10)
      {
        result = 0;
        goto LABEL_18;
      }
    }
  }
  result = 0;
LABEL_18:
  *(_QWORD *)(a1 + 16) = v11;
  return result;
}

uint64_t ccpolyzp_po2cyc_deserialize_poly_ws(uint64_t a1, unsigned int **a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;
  unsigned int v20;
  unint64_t v21;
  unsigned int **v22;
  unsigned int *v23;

  v8 = *a2;
  v9 = **a2;
  v10 = (*a2)[1];
  if (ccpolyzp_po2cyc_serialize_poly_nbytes(*a2, a3) != a4 || a3 && v10 != 1)
    return 4294967289;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v9);
  if (v10)
  {
    v13 = v12;
    v14 = 0;
    while (1)
    {
      v15 = v8[1] - 1;
      v16 = v8;
      if (v15 > v14)
      {
        v16 = v8;
        do
        {
          v16 = (unsigned int *)*((_QWORD *)v16 + 14);
          --v15;
        }
        while (v15 > v14);
      }
      v17 = 64 - __clz(*((_QWORD *)v16 + 2));
      if (v17 <= a3)
        return 4294967289;
      v18 = ((v17 - a3) * v9 + 7) >> 3;
      result = ccpolyzp_po2cyc_bytes_to_coeffs(v9, v13, v18, a5, v17, a3);
      if ((_DWORD)result)
        goto LABEL_18;
      if ((_DWORD)v9)
      {
        v20 = **a2 * v14;
        v21 = v9;
        v22 = (unsigned int **)v13;
        do
        {
          v23 = *v22++;
          a2[++v20] = v23;
          --v21;
        }
        while (v21);
      }
      a5 += v18;
      if (++v14 == v10)
      {
        result = 0;
        goto LABEL_18;
      }
    }
  }
  result = 0;
LABEL_18:
  *(_QWORD *)(a1 + 16) = v11;
  return result;
}

uint64_t cckyber_poly_getnoise(uint64_t a1, char *a2, char a3)
{
  char v5[128];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C874D8];
  cckyber_prf(a2, a3, v5);
  return cckyber_sample_cbd_eta2(a1, (uint64_t)v5);
}

uint64_t cckyber_poly_encode(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = 0;
  v3 = (_BYTE *)(result + 2);
  do
  {
    v4 = ((*(__int16 *)(a2 + v2) >> 15) & 0xD01) + *(__int16 *)(a2 + v2);
    v5 = ((*(__int16 *)(a2 + v2 + 2) >> 15) & 0xD01) + *(__int16 *)(a2 + v2 + 2);
    *(v3 - 2) = v4;
    *(v3 - 1) = (16 * v5) | BYTE1(v4);
    *v3 = v5 >> 4;
    v3 += 3;
    v2 += 4;
  }
  while (v2 != 512);
  return result;
}

uint64_t cckyber_poly_decode(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  __int16 v8;

  v2 = 0;
  v3 = (unsigned __int8 *)(a2 + 2);
  do
  {
    v4 = *(v3 - 1);
    v5 = *(v3 - 2) | ((v4 & 0xF) << 8);
    v6 = *v3;
    v3 += 3;
    v7 = (v4 >> 4) | (16 * v6);
    if (v5 >= 0xD01)
      LOWORD(v5) = v5 - 3329;
    *(_WORD *)(result + v2) = v5;
    if (v7 >= 0xD01)
      v8 = v7 - 3329;
    else
      v8 = v7;
    *(_WORD *)(result + v2 + 2) = v8;
    v2 += 4;
  }
  while (v2 != 512);
  return result;
}

uint64_t cckyber_poly_compress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 16))(a2, a3);
}

uint64_t cckyber_poly_decompress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a2, a3);
}

uint64_t cckyber_poly_add(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t i;

  for (i = 0; i != 512; i += 2)
    *(_WORD *)(result + i) = *(_WORD *)(a3 + i) + *(_WORD *)(a2 + i);
  return result;
}

uint64_t cckyber_poly_sub(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t i;

  for (i = 0; i != 512; i += 2)
    *(_WORD *)(result + i) = *(_WORD *)(a2 + i) - *(_WORD *)(a3 + i);
  return result;
}

uint64_t cckyber_poly_reduce(uint64_t result)
{
  uint64_t v1;
  int32x4_t v2;
  int32x4_t v3;
  int32x4_t v4;

  v1 = 0;
  v2 = vdupq_n_s32(0x13AFB8u);
  v3 = vdupq_n_s32(0xD01u);
  v4 = vdupq_n_s32(0x6808u);
  do
  {
    *(int16x8_t *)(result + v1) = vaddhn_high_s32(vaddhn_s32(vmulq_s32(vshrq_n_s32(vmulq_s32(vmovl_s16(*(int16x4_t *)(result + v1)), v2), 0x10uLL), v3), v4), vmulq_s32(vshrq_n_s32(vmulq_s32(vmovl_high_s16(*(int16x8_t *)(result + v1)), v2), 0x10uLL), v3), v4);
    v1 += 16;
  }
  while (v1 != 512);
  return result;
}

uint64_t cckyber_poly_toplant(uint64_t result)
{
  uint64_t v1;
  int32x4_t v2;
  int32x4_t v3;
  int32x4_t v4;

  v1 = 0;
  v2 = vdupq_n_s32(0x97F44FAC);
  v3 = vdupq_n_s32(0xD01u);
  v4 = vdupq_n_s32(0x6808u);
  do
  {
    *(int16x8_t *)(result + v1) = vaddhn_high_s32(vaddhn_s32(vmulq_s32(vshrq_n_s32(vmulq_s32(vmovl_s16(*(int16x4_t *)(result + v1)), v2), 0x10uLL), v3), v4), vmulq_s32(vshrq_n_s32(vmulq_s32(vmovl_high_s16(*(int16x8_t *)(result + v1)), v2), 0x10uLL), v3), v4);
    v1 += 16;
  }
  while (v1 != 512);
  return result;
}

uint64_t fipspost_post_pbkdf(char a1)
{
  size_t *v2;
  const char *v4;
  size_t *v5;
  const char *v6;
  size_t *v7;
  const char *v8;
  char *v9;
  const char *v10;
  const char *v11;
  size_t *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t *v21;
  size_t *v25;
  size_t *v29;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[20];
  _OWORD v38[4];
  char v39;
  _OWORD __s2[9];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C874D8];
  memset(__s2, 0, 143);
  v2 = (size_t *)ccsha1_di();
  if (ccpbkdf2_hmac(v2, 88, (uint64_t)"roAhfqRBzTqHATLXmmLLiQIyBUchpmcqrXWMWoztGqWZrEbqIZFKWphBFbGkoJmnRaqDXZaYMreSUJhWTLypGstb", 0x15uLL, "\x0E\xDD\x678Ί\x1F}\x97?#\xACpC\x1C\xBF\xD0\x54P0\x93", 0x371uLL, 0x8FuLL, (char *)__s2))
  {
    mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed ccpbkdf2_hmac (SHA-1): %d\n");
    return 4294967224;
  }
  if ((a1 & 0x10) != 0)
    v4 = "\x01%\xE7\x18\xC0u=ъτS\x0E\xFE\"\xBB0\xB3\xD8\x65\xC5\x33\xED\x7A\xC4\xF90)\x130\xF5\x03\x46\x0DFiΡų\xB0x\xFC0Y"
         "Vs\n"
         "\\4p\x99\xAEe\x8B<.\v\xC8\x5D\x92\xEE\x26\x5B\x8CH\x8E\xAA\xC0\xB1>ѳv\xA9Q\x1F\xB0\x85\\\x9A\xD5\x29[c\x03|\n"
         "\xF8\x15\x05\xC0\xCF\x89\xC6\xEAG\x90\xED\xC3\x9E\x80\xD6\x18/\x82\xF3\x42\x50\x9Aէz\xCF\x76R\x0F\x97\x1C\xEA\x63"
         "\x4D\x8C#\xAA\xE1\xEA\xC2@%\x9F\xB4\xCE\x5F|^:\xF2\x88\x18\x32\xA9CZ";
  else
    v4 = "%\xE7\x18\xC0u=ъτS\x0E\xFE\"\xBB0\xB3\xD8\x65\xC5\x33\xED\x7A\xC4\xF90)\x130\xF5\x03\x46\x0DFiΡų\xB0x\xFC0YVs\n"
         "\\4p\x99\xAEe\x8B<.\v\xC8\x5D\x92\xEE\x26\x5B\x8CH\x8E\xAA\xC0\xB1>ѳv\xA9Q\x1F\xB0\x85\\\x9A\xD5\x29[c\x03|\n"
         "\xF8\x15\x05\xC0\xCF\x89\xC6\xEAG\x90\xED\xC3\x9E\x80\xD6\x18/\x82\xF3\x42\x50\x9Aէz\xCF\x76R\x0F\x97\x1C\xEA\x63"
         "\x4D\x8C#\xAA\xE1\xEA\xC2@%\x9F\xB4\xCE\x5F|^:\xF2\x88\x18\x32\xA9CZ";
  if (!memcmp(v4, __s2, 0x8FuLL))
  {
    v39 = 0;
    memset(v38, 0, sizeof(v38));
    v5 = (size_t *)ccsha256_di();
    if (ccpbkdf2_hmac(v5, 34, (uint64_t)"PpKpAmtfcDCPtAtwRMnHBueaQklIgpzLiH", 0x1CuLL, "\x8B\x81\xB8F\xFC{Љ}ivwoo\x1Be\xBF\xB9M\x92+fI-\\L\x8C\x82", 0x300uLL, 0x41uLL, (char *)v38))
    {
      mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed ccpbkdf2_hmac (SHA-256): %d\n");
      return 4294967224;
    }
    if ((a1 & 0x10) != 0)
      v6 = "\x01p\xCC\x73\x87%\xA7\x13g\x1C\xE2\xA3\x632\x86\x9C9\x14\xC5\x21ø*\xB9t\x93RM~*\xD5\x2C\x03J\xA2\xFD\a\xF1\x01"
           "\x5B\x23E\x84q\xA4\x9E\xB72\xBB\xA9\xB0F\xB3\xF8\xF5\x90\x7C\xCF\x96\x9C\\v\xF7\x22\xFB\xBB";
    else
      v6 = "p\xCC\x73\x87%\xA7\x13g\x1C\xE2\xA3\x632\x86\x9C9\x14\xC5\x21ø*\xB9t\x93RM~*\xD5\x2C\x03J\xA2\xFD\a\xF1\x01\x5B"
           "\x23E\x84q\xA4\x9E\xB72\xBB\xA9\xB0F\xB3\xF8\xF5\x90\x7C\xCF\x96\x9C\\v\xF7\x22\xFB\xBB";
    if (!memcmp(v6, v38, 0x41uLL))
    {
      memset(v37, 0, 319);
      v7 = (size_t *)ccsha512_di();
      if (ccpbkdf2_hmac(v7, 17, (uint64_t)"SeiPcvDyiAvRsPPKX", 0x1CuLL, "\x1C\x1A+Ib\x97\xDE\x6D\xED\xAA\xE8~\xB2z\x04\b\x04\x9C\x13\xE8\xD2\x37\x03\x81\a\xD3\xCC\xA8", 0x244uLL, 0x13FuLL, (char *)v37))
      {
        mach_absolute_time();
        printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed ccpbkdf2_hmac (SHA-512): %d\n");
        return 4294967224;
      }
      if ((a1 & 0x10) != 0)
        v8 = "\x01+\xAC\xA7o;\xB3t\xAE.\"\x15N\xAF\xC3\x0C\x97\x86\xC1\xD1[\xDD\x42\xCE\x65\xA5\xBD\a\xA1\xFAN\xAAI\bh\x1F"
             "~\x19\xCA\x3F(\xA8\x95\x8D\xD9\xCD\x7Fޟ\xEC\xDB\xF2\r\x8Dq\xF2\x0A"
             "\x23\x0Cr\x15\x8AE\xA1\xB0\xEC\x7F\x49\xF8ѡ\x9B\xFE\xD0\x31'+Izt{\b:Vhi\x9D\xE0\x10\x71ݰ\xDD\xE4/\a/\x0E]*4"
             "\x98\x17·\x11\b\x85-0\xF9P\x8B\x1913!T\xBE\\\x97\x03\x11\x0F\xE1\xFB\x4B\x7Fo\xC1\xB6\f\xDA\x25\xEB\xC2\xE5"
             "\xEC\x23\xCE.D#\xC7\xFE\xD6\xE2\xA5)=\xA8\xAF]3\xAD. \xE5\x9E\xDD/\x1E\xB7\xDD\xE4\x81\x1B\t\xB2s5\xE5\xFE\x31"
             "8\xED\x5E\xC8~\xC3\x54\xADO\xE7\x07\x82\x10\x9Brb\xBF\x14\x1F\x0F\n"
             "\xAE\x14rǙ\xFF\xB6i\bCPT\xE1\xF6\x9B\xA1ne\x81\x96\xF5\xBE\x6D\x0F\x94\x91\xE5\x4C\x11\xCA\x0F\xAFx\xCE\x09"
             "*\xD0\x1C\xE9\x66\x1A\xAD\xA0\xC4\x4B\xD2\x6B\xFA\xB7u\xC4\x66|\xC8\xFEλ\xDE\xC2\xF9\xD8\x23˳\xC1\x4B\xDC\x49"
             "\xE9\x26\x08\xB4\xB4\xC3\x20\xC5\x63Wf(W\x89\xC7\x7B.\x13\xB9\xC8\xEA]5c\xDF\x20\x12l\x1B\xA1\\\x94Y\x19z\xA6"
             "\b\xB0\xF0\x46\xDC\x44\xAA/U]\x89\x8A\xE6\x4B\xAA\xDE\x1Aܞ\xB9#";
      else
        v8 = "+\xAC\xA7o;\xB3t\xAE.\"\x15N\xAF\xC3\x0C\x97\x86\xC1\xD1[\xDD\x42\xCE\x65\xA5\xBD\a\xA1\xFAN\xAAI\bh\x1F~\x19"
             "\xCA\x3F(\xA8\x95\x8D\xD9\xCD\x7Fޟ\xEC\xDB\xF2\r\x8Dq\xF2\x0A"
             "\x23\x0Cr\x15\x8AE\xA1\xB0\xEC\x7F\x49\xF8ѡ\x9B\xFE\xD0\x31'+Izt{\b:Vhi\x9D\xE0\x10\x71ݰ\xDD\xE4/\a/\x0E]*4"
             "\x98\x17·\x11\b\x85-0\xF9P\x8B\x1913!T\xBE\\\x97\x03\x11\x0F\xE1\xFB\x4B\x7Fo\xC1\xB6\f\xDA\x25\xEB\xC2\xE5"
             "\xEC\x23\xCE.D#\xC7\xFE\xD6\xE2\xA5)=\xA8\xAF]3\xAD. \xE5\x9E\xDD/\x1E\xB7\xDD\xE4\x81\x1B\t\xB2s5\xE5\xFE\x31"
             "8\xED\x5E\xC8~\xC3\x54\xADO\xE7\x07\x82\x10\x9Brb\xBF\x14\x1F\x0F\n"
             "\xAE\x14rǙ\xFF\xB6i\bCPT\xE1\xF6\x9B\xA1ne\x81\x96\xF5\xBE\x6D\x0F\x94\x91\xE5\x4C\x11\xCA\x0F\xAFx\xCE\x09"
             "*\xD0\x1C\xE9\x66\x1A\xAD\xA0\xC4\x4B\xD2\x6B\xFA\xB7u\xC4\x66|\xC8\xFEλ\xDE\xC2\xF9\xD8\x23˳\xC1\x4B\xDC\x49"
             "\xE9\x26\x08\xB4\xB4\xC3\x20\xC5\x63Wf(W\x89\xC7\x7B.\x13\xB9\xC8\xEA]5c\xDF\x20\x12l\x1B\xA1\\\x94Y\x19z\xA6"
             "\b\xB0\xF0\x46\xDC\x44\xAA/U]\x89\x8A\xE6\x4B\xAA\xDE\x1Aܞ\xB9#";
      if (!memcmp(v8, v37, 0x13FuLL))
      {
        if ((a1 & 0x10) != 0)
          v9 = "\x01\xE1\x6F\xDB\x97\xD0\xD9\xE8\x91\xC4\xE0\x1A\xE95\xBF=Z@\x83\x87/\xD9\x06\x98;\x84\x03o\xAE>\x0F\xA0f";
        else
          v9 = "\xE1\x6F\xDB\x97\xD0\xD9\xE8\x91\xC4\xE0\x1A\xE95\xBF=Z@\x83\x87/\xD9\x06\x98;\x84\x03o\xAE>\x0F\xA0f";
        if ((a1 & 0x10) != 0)
          v10 = "\x01Z\xBC\x17C\xA8J\xE3\xDA\xAA\xF0\x70\x4B\xA6\xFF\xC9\x33{\x1F\x99\x14\xF7\xFA\xFC\x3F>o~\t\xEF\xD5\x31\x96";
        else
          v10 = "Z\xBC\x17C\xA8J\xE3\xDA\xAA\xF0\x70\x4B\xA6\xFF\xC9\x33{\x1F\x99\x14\xF7\xFA\xFC\x3F>o~\t\xEF\xD5\x31\x96";
        if ((a1 & 0x10) != 0)
          v11 = "\x01\x96\xBA\x8C\x13%\xBE~\x7Flb\x97*[\xB5\xCE\xD4\xFF\x8FȐ[\xA8\xAAez)\xAA\xC5\x23|ކ";
        else
          v11 = "\x96\xBA\x8C\x13%\xBE~\x7Flb\x97*[\xB5\xCE\xD4\xFF\x8FȐ[\xA8\xAAez)\xAA\xC5\x23|ކ";
        v12 = (size_t *)ccsha3_224_di();
        if (ccpbkdf2_hmac(v12, 88, (uint64_t)"roAhfqRBzTqHATLXmmLLiQIyBUchpmcqrXWMWoztGqWZrEbqIZFKWphBFbGkoJmnRaqDXZaYMreSUJhWTLypGstb", 0x15uLL, "\x0E\xDD\x678Ί\x1F}\x97?#\xACpC\x1C\xBF\xD0\x54P0\x93", 0x3E8uLL, 0x20uLL, (char *)&v33))
        {
          mach_absolute_time();
          printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed ccpbkdf2_hmac (SHA3-224): %d\n");
          return 4294967224;
        }
        v13 = "\x01\x16\xD1\x47C\x97\xE5\x2A\x54GD\xB6\xEC\x78\xB3r\x9As\xA0\x16<\x1F)}4[n\xD3\x51\xC5\x5C\xAC\xD3\x16\xD1"
              "\x47C\x97\xE5\x2A\x54GD\xB6\xEC\x78\xB3r\x9As\xA0\x16<\x1F)}4[n\xD3\x51\xC5\x5C\xAC\xD3\x01\xE1\x6F\xDB\x97"
              "\xD0\xD9\xE8\x91\xC4\xE0\x1A\xE95\xBF=Z@\x83\x87/\xD9\x06\x98;\x84\x03o\xAE>\x0F\xA0f";
        if ((a1 & 0x10) == 0)
          v13 = "\x16\xD1\x47C\x97\xE5\x2A\x54GD\xB6\xEC\x78\xB3r\x9As\xA0\x16<\x1F)}4[n\xD3\x51\xC5\x5C\xAC\xD3\x01\xE1\x6F\xDB\x97\xD0\xD9\xE8\x91\xC4\xE0\x1A\xE95\xBF=Z@\x83\x87/\xD9\x06\x98;\x84\x03o\xAE>\x0F\xA0f";
        v14 = *(_QWORD *)v13;
        v15 = *((_QWORD *)v13 + 1);
        v17 = *((_QWORD *)v13 + 2);
        v16 = *((_QWORD *)v13 + 3);
        if (v14 == v33 && v15 == v34 && v17 == v35 && v16 == v36)
        {
          v21 = (size_t *)ccsha3_256_di();
          if (ccpbkdf2_hmac(v21, 88, (uint64_t)"roAhfqRBzTqHATLXmmLLiQIyBUchpmcqrXWMWoztGqWZrEbqIZFKWphBFbGkoJmnRaqDXZaYMreSUJhWTLypGstb", 0x15uLL, "\x0E\xDD\x678Ί\x1F}\x97?#\xACpC\x1C\xBF\xD0\x54P0\x93", 0x3E8uLL, 0x20uLL, (char *)&v33))
          {
            mach_absolute_time();
            printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed ccpbkdf2_hmac (SHA3-256): %d\n");
            return 4294967224;
          }
          if (*(_QWORD *)v9 == v33
            && *((_QWORD *)v9 + 1) == v34
            && *((_QWORD *)v9 + 2) == v35
            && *((_QWORD *)v9 + 3) == v36)
          {
            v25 = (size_t *)ccsha3_384_di();
            if (ccpbkdf2_hmac(v25, 88, (uint64_t)"roAhfqRBzTqHATLXmmLLiQIyBUchpmcqrXWMWoztGqWZrEbqIZFKWphBFbGkoJmnRaqDXZaYMreSUJhWTLypGstb", 0x15uLL, "\x0E\xDD\x678Ί\x1F}\x97?#\xACpC\x1C\xBF\xD0\x54P0\x93", 0x3E8uLL, 0x20uLL, (char *)&v33))
            {
              mach_absolute_time();
              printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed ccpbkdf2_hmac (SHA3-384): %d\n");
              return 4294967224;
            }
            if (*(_QWORD *)v10 == v33
              && *((_QWORD *)v10 + 1) == v34
              && *((_QWORD *)v10 + 2) == v35
              && *((_QWORD *)v10 + 3) == v36)
            {
              v29 = (size_t *)ccsha3_512_di();
              if (ccpbkdf2_hmac(v29, 88, (uint64_t)"roAhfqRBzTqHATLXmmLLiQIyBUchpmcqrXWMWoztGqWZrEbqIZFKWphBFbGkoJmnRaqDXZaYMreSUJhWTLypGstb", 0x15uLL, "\x0E\xDD\x678Ί\x1F}\x97?#\xACpC\x1C\xBF\xD0\x54P0\x93", 0x3E8uLL, 0x20uLL, (char *)&v33))
              {
                mach_absolute_time();
                printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed ccpbkdf2_hmac (SHA3-512): %d\n");
                return 4294967224;
              }
              if (*(_QWORD *)v11 == v33
                && *((_QWORD *)v11 + 1) == v34
                && *((_QWORD *)v11 + 2) == v35
                && *((_QWORD *)v11 + 3) == v36)
              {
                return 0;
              }
              mach_absolute_time();
              printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed PBKDF_SHA3_512 KAT\n");
            }
            else
            {
              mach_absolute_time();
              printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed PBKDF_SHA3_384 KAT\n");
            }
          }
          else
          {
            mach_absolute_time();
            printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed PBKDF_SHA3_256 KAT\n");
          }
        }
        else
        {
          mach_absolute_time();
          printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed PBKDF_SHA3_224 KAT\n");
        }
      }
      else
      {
        mach_absolute_time();
        printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed PBKDF_SHA512 KAT\n");
      }
    }
    else
    {
      mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed PBKDF_SHA2 KAT\n");
    }
  }
  else
  {
    mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed PBKDF_SHA1 KAT\n");
  }
  return 4294967221;
}

uint64_t ccecies_decrypt_gcm_setup(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, int a6)
{
  char v10;
  uint64_t *v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  char v22;

  v10 = 0;
  v22 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v22 = v10;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + 32) = a6;
  *(_DWORD *)(a1 + 24) = a4;
  v16 = ccrng(0);
  *(_QWORD *)(a1 + 8) = v16;
  if (v16)
  {
    if ((a5 - 17) >= 0xFFFFFFFB)
      v17 = 0;
    else
      v17 = -5;
    if (((1 << a4) & 0x101010000) != 0)
      v18 = v17;
    else
      v18 = -5;
    if (a4 <= 0x20)
      v19 = v18;
    else
      v19 = -5;
    if (*(_DWORD *)(a3 + 8) == 78647)
      v20 = v19;
    else
      v20 = 4294967291;
  }
  else
  {
    v20 = 0xFFFFFFFFLL;
  }
  cc_disable_dit(&v22);
  return v20;
}

uint64_t ccsha3_512_vng_hwassist_compress(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return cckeccak_absorb_blocks(a1, 0x48uLL, a2, a3, (uint64_t (*)(_QWORD *))AccelerateCrypto_SHA3_keccak_hwassist);
}

uint64_t ccsha3_512_vng_hwassist_final(unint64_t *a1, uint64_t a2, _QWORD *a3)
{
  return ccsha3_final(a1, a2, a3, (uint64_t (*)(uint64_t *))AccelerateCrypto_SHA3_keccak_hwassist);
}

uint64_t ccsha3_512_vng_compress(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return cckeccak_absorb_blocks(a1, 0x48uLL, a2, a3, AccelerateCrypto_SHA3_keccak);
}

uint64_t ccsha3_512_vng_final(unint64_t *a1, uint64_t a2, _QWORD *a3)
{
  return ccsha3_final(a1, a2, a3, AccelerateCrypto_SHA3_keccak);
}

unint64_t ccwrap_auth_decrypt_withiv(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, size_t *a5, char *a6, char *a7)
{
  unint64_t v11;
  char v14;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  rsize_t v32;
  size_t *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char v38;
  uint64_t __s;
  uint64_t v40;
  uint64_t v41;

  v11 = a3;
  v14 = 0;
  v41 = *MEMORY[0x1E0C874D8];
  v38 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v14 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v14 = 1;
    }
  }
  v38 = v14;
  v20 = ccwrap_unwrapped_size(a3);
  *a5 = v20;
  if (!ccwrap_argsvalid(a1, v20, v11))
  {
    cc_clear(0x10uLL, &__s);
    v31 = 4294967289;
    goto LABEL_13;
  }
  v37 = a7;
  v21 = v11 >> 3;
  v22 = (v11 >> 3) - 1;
  __s = *a4;
  v34 = a5;
  memmove(a6, a4 + 1, *a5);
  v23 = 6 * (v11 >> 3) - 6;
  v35 = v11;
  v36 = a6;
  v24 = 1 - (v11 >> 3);
  v25 = a6 - 16;
  v26 = 5;
  do
  {
    v27 = v26;
    if (v22)
    {
      v28 = v21;
      v29 = v23;
      do
      {
        v30 = *(_QWORD *)&v25[8 * v28];
        __s ^= bswap64(v29);
        v40 = v30;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *))(a1 + 24))(a2, 1, &__s, &__s);
        *(_QWORD *)&v25[8 * v28] = v40;
        --v29;
        --v28;
      }
      while (v28 != 1);
    }
    v26 = v27 - 1;
    v23 += v24;
  }
  while (v27);
  v31 = cc_cmp_safe(8, (char *)&__s, v37);
  cc_clear(0x10uLL, &__s);
  if ((_DWORD)v31)
  {
    v31 = 4294967294;
    v11 = v35;
    a6 = v36;
    a5 = v34;
LABEL_13:
    *a5 = 0;
    v32 = ccwrap_unwrapped_size(v11);
    cc_clear(v32, a6);
  }
  cc_disable_dit(&v38);
  return v31;
}

uint64_t fipspost_post_drbg_hmac(char a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];
  void (*v12)(uint64_t);
  _QWORD v13[2];
  _QWORD __s1[16];
  _OWORD __s2[8];
  _OWORD v16[2];
  _OWORD v17[2];
  _OWORD v18[2];
  _OWORD v19[7];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C874D8];
  v19[5] = xmmword_1DEE27DC0;
  v19[6] = unk_1DEE27DD0;
  v19[3] = unk_1DEE27DF0;
  v19[4] = xmmword_1DEE27F00;
  v19[1] = unk_1DEE27E10;
  v19[2] = xmmword_1DEE27DE0;
  v18[1] = unk_1DEE27E30;
  v19[0] = xmmword_1DEE27E00;
  v17[1] = unk_1DEE27E50;
  v18[0] = xmmword_1DEE27E20;
  v16[1] = unk_1DEE27E70;
  v17[0] = xmmword_1DEE27E40;
  __s2[4] = xmmword_1DEE27EC0;
  __s2[5] = unk_1DEE27ED0;
  __s2[6] = xmmword_1DEE27EE0;
  __s2[7] = unk_1DEE27EF0;
  v16[0] = xmmword_1DEE27E60;
  __s2[0] = xmmword_1DEE27E80;
  __s2[1] = unk_1DEE27E90;
  __s2[2] = xmmword_1DEE27EA0;
  __s2[3] = unk_1DEE27EB0;
  __s1[0] = 0;
  __s1[1] = 0;
  v13[0] = ccsha256_di();
  v13[1] = 0;
  ccdrbg_factory_nisthmac(fipspost_post_drbg_hmac_info, (uint64_t)v13);
  v11[0] = cc_malloc_clear((fipspost_post_drbg_hmac_info[0] + 7) & 0xFFFFFFFFFFFFFFF8);
  v11[1] = (unint64_t)(fipspost_post_drbg_hmac_info[0] + 7) >> 3;
  v11[2] = 0;
  v11[3] = cc_ws_alloc;
  v12 = cc_ws_free;
  if (!v11[0])
    return 4294967283;
  v2 = cc_ws_alloc(v11, (unint64_t)(fipspost_post_drbg_hmac_info[0] + 7) >> 3);
  if ((a1 & 0x10) != 0)
    LOBYTE(__s2[0]) = -36;
  v3 = ccdrbg_init((uint64_t)fipspost_post_drbg_hmac_info);
  v4 = ccdrbg_reseed((uint64_t)fipspost_post_drbg_hmac_info, v2, 32, (uint64_t)v19, 32, (uint64_t)v18);
  v5 = ccdrbg_generate((uint64_t)fipspost_post_drbg_hmac_info, v2, 128, (uint64_t)__s1, 32, (uint64_t)v17);
  v6 = ccdrbg_generate((uint64_t)fipspost_post_drbg_hmac_info, v2, 128, (uint64_t)__s1, 32, (uint64_t)v16) | v5 | v4 | v3;
  v7 = v6 != 0;
  if (!v6 && !memcmp(__s1, __s2, 0x80uLL))
  {
    v9 = 0;
  }
  else
  {
    v8 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: rc: %d\n", v8, "fipspost_post_drbg_hmac", 147, v7);
    v9 = 4294967224;
  }
  v12((uint64_t)v11);
  return v9;
}

uint64_t cccmac_final_generate(char *__s, size_t a2, void *a3)
{
  char v6;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  char v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t i;
  char v22;
  _BYTE __src[16];
  uint64_t v24;

  v6 = 0;
  v24 = *MEMORY[0x1E0C874D8];
  v22 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v22 = v6;
  v11 = (_QWORD *)*((_QWORD *)__s + 8);
  v12 = *((_QWORD *)__s + 6);
  v13 = *((_QWORD *)__s + 7) + v12;
  *((_QWORD *)__s + 7) = v13;
  if (v12 > 0x10)
  {
    v16 = 0xFFFFFFFFLL;
  }
  else
  {
    if (v12)
      _ZF = 1;
    else
      _ZF = v13 == 0;
    v15 = !_ZF;
    v16 = 0xFFFFFFFFLL;
    if (a2 - 17 >= 0xFFFFFFFFFFFFFFF0 && (v15 & 1) == 0)
    {
      v17 = __s + 32;
      v18 = __s;
      if (v12 != 16)
      {
        v18 = __s + 16;
        v19 = &v17[v12];
        cc_clear(16 - v12, &v17[v12]);
        *v19 = 0x80;
      }
      for (i = 0; i != -16; --i)
        __s[i + 47] ^= v18[i + 15];
      cccbc_update((uint64_t)v11, (uint64_t)(__s + 72), (uint64_t)&__s[*v11 + 72], 1, (uint64_t)(__s + 32), (uint64_t)__src);
      memcpy(a3, __src, a2);
      v16 = 0;
      v11 = (_QWORD *)*((_QWORD *)__s + 8);
    }
  }
  cc_clear(v11[1] + *v11 + 80, __s);
  cc_disable_dit(&v22);
  return v16;
}

uint64_t cccmac_final_verify(char *a1, uint64_t a2, char *a3)
{
  char v5;
  uint64_t v11;
  char v13;
  char v14[16];
  uint64_t v15;

  v5 = 0;
  v15 = *MEMORY[0x1E0C874D8];
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v13 = v5;
  if (cccmac_final_generate(a1, 0x10uLL, v14))
  {
    v11 = 0xFFFFFFFFLL;
  }
  else if (cc_cmp_safe(a2, a3, v14))
  {
    v11 = 4294967291;
  }
  else
  {
    v11 = 0;
  }
  cc_disable_dit(&v13);
  return v11;
}

uint64_t ccdigest_oid_lookup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v10;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v19;
  char v20;

  v10 = 0;
  v20 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v20 = v10;
  v19 = &a9;
  do
  {
    v16 = v19++;
    v17 = *v16;
  }
  while (*v16 && !ccoid_equal(*(_QWORD *)(v17 + 32), a1));
  cc_disable_dit(&v20);
  return v17;
}

uint64_t cckyber_indcpa_keypair(unsigned int *a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  __int128 v25;
  _OWORD *v26;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t (*v31)(_QWORD *, uint64_t);
  void (*v32)(uint64_t);
  _OWORD __s[2];
  char v34[32];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C874D8];
  v8 = *a1;
  v9 = sizeof_struct_ccpolyzp_po2cyc();
  v29[0] = cc_malloc_clear(8 * ((v9 - 1 + (v8 << 9)) / v9 + (v9 - 1 + (v8 << 9) * v8) / v9) + 16
                                                                                            * ((v9 - 1 + (v8 << 9))
                                                                                             / v9));
  v10 = *a1;
  v11 = sizeof_struct_ccpolyzp_po2cyc();
  v29[1] = (v11 - 1 + (v10 << 9)) / v11 + (v11 - 1 + (v10 << 9) * v10) / v11 + 2 * ((v11 - 1 + (v10 << 9)) / v11);
  v30 = 0;
  v31 = cc_ws_alloc;
  v32 = cc_ws_free;
  if (!v29[0])
    return 4294967283;
  v28 = a2;
  v12 = cc_ws_alloc(v29, ((v10 << 6) * v10) & 0x1FFFFFFFFFFFFFC0);
  v13 = v31(v29, v10 << 6);
  v14 = v31(v29, v10 << 6);
  v15 = v31(v29, v10 << 6);
  cckyber_hash_g(0x20uLL, a4, (uint64_t)__s);
  cckyber_sample_ntt(a1, (char *)__s, 0, v12);
  if (*a1)
  {
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = v17++;
      cckyber_poly_getnoise(v15 + 2 * (v16 & 0xFFFFFF00), v34, v18);
      v19 = *a1;
      v16 += 256;
    }
    while (v17 < v19);
    if ((_DWORD)v19)
    {
      v20 = 0;
      v21 = 0;
      do
      {
        cckyber_poly_getnoise(v13 + 2 * (v20 & 0xFFFFFF00), v34, v17);
        ++v21;
        v20 += 256;
        LODWORD(v17) = v17 + 1;
      }
      while (v21 < *a1);
    }
  }
  cckyber_polyvec_ntt_forward(a1, v15);
  cckyber_polyvec_reduce(a1, v15);
  cckyber_polyvec_ntt_forward(a1, v13);
  LODWORD(v22) = *a1;
  if (*a1)
  {
    v23 = 0;
    v24 = 0;
    do
    {
      cckyber_polyvec_basemul(a1, v14 + 2 * v23, v12 + 2 * v23 * v22, v15);
      cckyber_poly_toplant(v14 + 2 * v23);
      ++v24;
      v22 = *a1;
      v23 += 256;
    }
    while (v24 < v22);
  }
  cckyber_polyvec_add(a1, v14, v14, v13);
  cckyber_polyvec_reduce(a1, v14);
  cckyber_polyvec_encode(a1, v28, v14);
  v25 = __s[1];
  v26 = (_OWORD *)(v28 + 384 * *a1);
  *v26 = __s[0];
  v26[1] = v25;
  cckyber_polyvec_encode(a1, a3, v15);
  v30 = 0;
  cc_clear(0x40uLL, __s);
  v32((uint64_t)v29);
  return 0;
}

uint64_t cckyber_indcpa_encrypt_ws(uint64_t a1, unsigned int *a2, char *a3, uint64_t a4, char *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t result;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;

  v10 = *a2;
  v36 = *(_QWORD *)(a1 + 16);
  v35 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 64);
  v34 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 64);
  v32 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v10 << 6);
  v38 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 64);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v10 << 6);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v10 << 6);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v10 << 6);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, ((v10 << 6) * v10) & 0x1FFFFFFFFFFFFFC0);
  cckyber_polyvec_decode(a2, v13, (uint64_t)a3);
  v15 = &a3[384 * *a2];
  v16 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, (48 * v10) | 4);
  cckyber_polyvec_encode(a2, (uint64_t)v16, v13);
  v17 = &v16[384 * *a2];
  v18 = *((_OWORD *)v15 + 1);
  *(_OWORD *)v17 = *(_OWORD *)v15;
  *((_OWORD *)v17 + 1) = v18;
  if (cc_cmp_safe((384 * *a2) | 0x20, v16, a3))
    return 4294967289;
  v31 = v13;
  cckyber_sample_ntt(a2, v15, 1, v14);
  if (*a2)
  {
    v20 = 0;
    v21 = 0;
    do
    {
      cckyber_poly_getnoise(v11 + 2 * (v20 & 0xFFFFFF00), a5, v21++);
      v22 = *a2;
      v20 += 256;
    }
    while (v21 < v22);
    v23 = v32;
    if ((_DWORD)v22)
    {
      v24 = 0;
      v25 = 0;
      v26 = v21;
      do
      {
        LODWORD(v21) = v26 + 1;
        cckyber_poly_getnoise(v32 + 2 * (v24 & 0xFFFFFF00), a5, v26);
        ++v25;
        v24 += 256;
        v26 = v21;
      }
      while (v25 < *a2);
    }
  }
  else
  {
    LOBYTE(v21) = 0;
    v23 = v32;
  }
  cckyber_poly_getnoise(v38, a5, v21);
  cckyber_poly_from_msg(v34, a4);
  cckyber_polyvec_ntt_forward(a2, v11);
  LODWORD(v27) = *a2;
  if (*a2)
  {
    v28 = 0;
    v29 = 0;
    do
    {
      cckyber_polyvec_basemul(a2, v12 + 2 * v28, v14 + 2 * v28 * v27, v11);
      cckyber_ntt_inverse(v12 + 2 * v28);
      ++v29;
      v27 = *a2;
      v28 += 256;
    }
    while (v29 < v27);
  }
  cckyber_polyvec_add(a2, v12, v12, v23);
  cckyber_polyvec_reduce(a2, v12);
  v30 = v35;
  cckyber_polyvec_basemul(a2, v35, v31, v11);
  cckyber_ntt_inverse(v35);
  cckyber_poly_add(v30, v30, v38);
  cckyber_poly_add(v30, v30, v34);
  cckyber_poly_reduce(v35);
  cckyber_polyvec_compress(a2, a6, v12);
  cckyber_poly_compress((uint64_t)a2, a6 + 32 * a2[2] * *a2, v35);
  result = 0;
  *(_QWORD *)(a1 + 16) = v36;
  return result;
}

uint64_t cckyber_indcpa_encrypt(unsigned int *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v16[4];
  void (*v17)(uint64_t);

  v10 = *a1;
  v11 = sizeof_struct_ccpolyzp_po2cyc();
  v16[0] = cc_malloc_clear(8* (3 * ((v11 + 511) / v11)+ 4 * ((v11 - 1 + (v10 << 9)) / v11)+ (v11 + 384 * v10 + 31) / v11+ (v11 - 1 + (v10 << 9) * v10) / v11));
  v12 = *a1;
  v13 = sizeof_struct_ccpolyzp_po2cyc();
  v16[1] = 3 * ((v13 + 511) / v13)
         + 4 * ((v13 - 1 + (v12 << 9)) / v13)
         + (v13 + 384 * v12 + 31) / v13
         + (v13 - 1 + (v12 << 9) * v12) / v13;
  v16[2] = 0;
  v16[3] = cc_ws_alloc;
  v17 = cc_ws_free;
  if (!v16[0])
    return 4294967283;
  v14 = cckyber_indcpa_encrypt_ws((uint64_t)v16, a1, a2, a3, a4, a5);
  v17((uint64_t)v16);
  return v14;
}

uint64_t cckyber_indcpa_decrypt_ws(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v9 = *a2;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 64);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 64);
  v9 <<= 6;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9);
  v15 = a4 + 32 * a2[2] * *a2;
  cckyber_polyvec_decompress(a2, v13, a4);
  cckyber_poly_decompress((uint64_t)a2, v11, v15);
  cckyber_polyvec_decode(a2, v14, a3);
  cckyber_polyvec_ntt_forward(a2, v13);
  cckyber_polyvec_basemul(a2, v12, v14, v13);
  cckyber_ntt_inverse(v12);
  cckyber_poly_sub(v12, v11, v12);
  cckyber_poly_reduce(v12);
  result = cckyber_poly_to_msg(a5, v12);
  *(_QWORD *)(a1 + 16) = v10;
  return result;
}

uint64_t ccsrp_generate_server_pubkey_ws(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t private_key_bitlen;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)(_QWORD, uint64_t, uint64_t *);
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = ccdh_gp_n(*(_QWORD *)(a2 + 8));
  v5 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  v6 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  if ((*(_WORD *)(a2 + 24) & 0x1C0) != 0)
  {
    ccdh_gp_n(*(_QWORD *)(a2 + 8));
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 8);
    ccdh_gp_n(v7);
    cczp_mul_ws(a1, v7);
  }
  private_key_bitlen = ccdh_generate_private_key_bitlen(*(_QWORD **)(a2 + 8));
  v9 = ccdh_gp_n(*(_QWORD *)(a2 + 8));
  v10 = ccdh_gp_n(*(_QWORD *)(a2 + 8));
  if (ccn_bitlen(v9, (unint64_t *)(a2 + 32 + 8 * v10)) > private_key_bitlen)
    private_key_bitlen = cczp_bitlen(*(_QWORD *)(a2 + 8));
  v12 = *(_QWORD **)(a2 + 8);
  v11 = *(uint64_t (***)(_QWORD, uint64_t, uint64_t *))(a2 + 16);
  v13 = (void *)ccdh_gp_g(v12);
  v14 = ccdh_gp_n(*(_QWORD *)(a2 + 8));
  v15 = ccdh_power_blinded_ws(a1, v11, v12, v6, v13, private_key_bitlen, (unint64_t *)(a2 + 32 + 8 * v14));
  if (!(_DWORD)v15)
  {
    v16 = *(_QWORD *)(a2 + 8);
    ccdh_gp_n(v16);
    cczp_add_ws(a1, v16);
  }
  *(_QWORD *)(a1 + 16) = v5;
  return v15;
}

uint64_t ccsrp_generate_server_S_ws(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v8;
  uint64_t *v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t private_key_bitlen;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t (**v19)(_QWORD, uint64_t, uint64_t *);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v8 = ccdh_gp_n(*(_QWORD *)(a2 + 8));
  v24 = *(_QWORD *)(a1 + 16);
  v9 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v8);
  v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v8);
  v11 = *(const void **)(a2 + 8);
  v12 = a2 + 32;
  v13 = ccdh_gp_n(v11);
  v14 = cczp_mm_power_fast_ws(a1, v11, v9, (unint64_t *)(a2 + 32 + 16 * v13), a4);
  if ((_DWORD)v14)
  {
    v22 = v14;
LABEL_5:
    ccn_zero(v8, a3);
    goto LABEL_6;
  }
  cczp_mul_ws(a1, *(_QWORD *)(a2 + 8));
  private_key_bitlen = ccdh_generate_private_key_bitlen(*(_QWORD **)(a2 + 8));
  v16 = ccdh_gp_n(*(_QWORD *)(a2 + 8));
  v17 = ccdh_gp_n(*(_QWORD *)(a2 + 8));
  if (ccn_bitlen(v16, (unint64_t *)(v12 + 8 * v17)) > private_key_bitlen)
    private_key_bitlen = cczp_bitlen(*(_QWORD *)(a2 + 8));
  v20 = a2 + 8;
  v18 = *(_QWORD **)(a2 + 8);
  v19 = *(uint64_t (***)(_QWORD, uint64_t, uint64_t *))(v20 + 8);
  v21 = ccdh_gp_n(v18);
  v22 = ccdh_power_blinded_ws(a1, v19, v18, (uint64_t *)a3, v10, private_key_bitlen, (unint64_t *)(v12 + 8 * v21));
  if ((_DWORD)v22)
    goto LABEL_5;
LABEL_6:
  *(_QWORD *)(a1 + 16) = v24;
  return v22;
}

uint64_t ccsrp_server_generate_public_key(uint64_t a1, uint64_t (**a2)(_QWORD, unint64_t, uint64_t), unsigned __int8 *a3, char *a4)
{
  char v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t uint;
  _QWORD *v22;
  uint64_t v23;
  uint64_t server_pubkey_ws;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t (*v30)(_QWORD *, uint64_t);
  void (*v31)(uint64_t);
  char v32;

  v8 = 0;
  v32 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v32 = v8;
  v14 = ccdh_gp_n(*(_QWORD *)(a1 + 8));
  v15 = CCDH_POWER_BLINDED_WORKSPACE_N(v14);
  v28[0] = cc_malloc_clear(8 * (3 * v14 + v15));
  v28[1] = CCDH_POWER_BLINDED_WORKSPACE_N(v14) + 3 * v14;
  v29 = 0;
  v30 = cc_ws_alloc;
  v31 = cc_ws_free;
  if (v28[0])
  {
    v16 = ccdh_gp_n(*(_QWORD *)(a1 + 8));
    v17 = (_QWORD *)cc_ws_alloc(v28, v16);
    v18 = (_QWORD *)(a1 + 32 + 16 * ccdh_gp_n(*(_QWORD *)(a1 + 8)));
    v19 = ccdh_gp_n(*(_QWORD *)(a1 + 8));
    v20 = ccdh_gp_n(*(_QWORD *)(a1 + 8));
    uint = ccn_read_uint(v19, v18, 8 * v20, a3);
    if ((_DWORD)uint
      || (*(_DWORD *)(a1 + 24) &= ~1u,
          v22 = *(_QWORD **)(a1 + 8),
          v23 = ccdh_gp_n(v22),
          uint = ccdh_generate_private_key_ws((uint64_t)v28, v22, (void *)(a1 + 32 + 8 * v23), a2),
          (_DWORD)uint))
    {
      server_pubkey_ws = uint;
    }
    else
    {
      if ((*(_WORD *)(a1 + 24) & 0x1C0) == 0)
        ccsrp_generate_k_ws((uint64_t)v28, a1, v17);
      server_pubkey_ws = ccsrp_generate_server_pubkey_ws((uint64_t)v28, a1);
      if (!(_DWORD)server_pubkey_ws)
      {
        ccdh_gp_n(*(_QWORD *)(a1 + 8));
        v25 = ccdh_gp_n(*(_QWORD *)(a1 + 8));
        v26 = ccdh_gp_n(*(_QWORD *)(a1 + 8));
        ccn_write_uint_padded_ct(v25, (unint64_t *)(a1 + 32), 8 * v26, a4);
      }
    }
    v29 = 0;
    v31((uint64_t)v28);
  }
  else
  {
    server_pubkey_ws = 4294967283;
  }
  cc_disable_dit(&v32);
  return server_pubkey_ws;
}

uint64_t ccsrp_server_compute_session(uint64_t a1, char *a2, size_t a3, char *a4, unsigned __int8 *a5)
{
  char v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t uint;
  uint64_t K_from_S_ws;
  uint64_t v27;
  char *v29;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t (*v32)(_QWORD *, uint64_t);
  void (*v33)(uint64_t);
  char v34;

  v10 = 0;
  v34 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v34 = v10;
  v16 = ccdh_gp_n(*(_QWORD *)(a1 + 8));
  v17 = CCDH_POWER_BLINDED_WORKSPACE_N(v16);
  v30[0] = cc_malloc_clear(8 * (v17 + 4 * v16));
  v30[1] = CCDH_POWER_BLINDED_WORKSPACE_N(v16) + 4 * v16;
  v31 = 0;
  v32 = cc_ws_alloc;
  v33 = cc_ws_free;
  if (!v30[0])
  {
    K_from_S_ws = 4294967283;
    goto LABEL_15;
  }
  v18 = ccdh_gp_n(*(_QWORD *)(a1 + 8));
  v19 = a1 + 32;
  ccdh_gp_n(*(_QWORD *)(a1 + 8));
  if (!ccn_n(v18, a1 + 32))
  {
    K_from_S_ws = 4294967237;
    cc_ws_free((uint64_t)v30);
    goto LABEL_15;
  }
  v29 = a4;
  v20 = (unint64_t *)cc_ws_alloc(v30, v18);
  v21 = (unint64_t *)v32(v30, v18);
  v22 = ccdh_gp_n(*(_QWORD *)(a1 + 8));
  v23 = ccdh_gp_n(*(_QWORD *)(a1 + 8));
  v24 = ccdh_gp_n(*(_QWORD *)(a1 + 8));
  uint = ccn_read_uint(v23, v20, 8 * v24, a5);
  if (!(_DWORD)uint)
  {
    cczp_mod_ws((uint64_t)v30, *(_QWORD *)(a1 + 8));
    if (!ccn_n(v18, v21))
    {
      K_from_S_ws = 4294967238;
      goto LABEL_12;
    }
    ccdh_gp_n(*(_QWORD *)(a1 + 8));
    ccsrp_generate_u_ws((uint64_t)v30, (uint64_t *)a1, v21, v20, (unint64_t *)(a1 + 32));
    uint = ccsrp_generate_server_S_ws((uint64_t)v30, a1, (void *)(v19 + 24 * v22), v21);
    if (!(_DWORD)uint)
    {
      K_from_S_ws = ccsrp_generate_K_from_S_ws((uint64_t)v30, a1, (unint64_t *)(v19 + 24 * v22));
      if (!(_DWORD)K_from_S_ws)
      {
        ccdh_gp_n(*(_QWORD *)(a1 + 8));
        ccsrp_generate_M_ws((uint64_t)v30, (size_t **)a1, a2, a3, v29, v20, (unint64_t *)(a1 + 32));
        ccsrp_generate_H_AMK_ws((uint64_t)v30, a1, v20, v27);
      }
      goto LABEL_12;
    }
  }
  K_from_S_ws = uint;
LABEL_12:
  v31 = 0;
  v33((uint64_t)v30);
LABEL_15:
  cc_disable_dit(&v34);
  return K_from_S_ws;
}

uint64_t ccsrp_server_start_authentication(uint64_t a1, uint64_t (**a2)(_QWORD, unint64_t, uint64_t), char *a3, size_t a4, char *a5, unsigned __int8 *a6, unsigned __int8 *a7, char *a8)
{
  char v13;
  uint64_t public_key;
  uint64_t v20;
  char v22;

  v13 = 0;
  v22 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v13 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v13 = 1;
    }
  }
  v22 = v13;
  *(_QWORD *)(a1 + 16) = a2;
  public_key = ccsrp_server_generate_public_key(a1, a2, a6, a8);
  if (!(_DWORD)public_key)
    public_key = ccsrp_server_compute_session(a1, a3, a4, a5, a7);
  v20 = public_key;
  cc_disable_dit(&v22);
  return v20;
}

uint64_t ccsrp_server_verify_session(uint64_t a1, char *a2, void *a3)
{
  char v6;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  const void *v17;
  size_t v18;
  char v20;

  v6 = 0;
  v20 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v20 = v6;
  v12 = ccsrp_sizeof_M_HAMK(*(_QWORD *)a1);
  v13 = ccdh_gp_n(*(_QWORD *)(a1 + 8));
  v14 = cc_cmp_safe(v12, (char *)(a1 + 32 + 32 * v13 + 2 * **(_QWORD **)a1), a2);
  v15 = *(_DWORD *)(a1 + 24);
  if (v14)
  {
    v16 = 0;
    *(_DWORD *)(a1 + 24) = v15 & 0xFFFFFFFE;
  }
  else
  {
    *(_DWORD *)(a1 + 24) = v15 & 0xFFFFFFFE | (v15 >> 2) & 1;
    if (((v15 >> 2) & 1) != 0)
    {
      v17 = (const void *)(a1 + 32 + 32 * ccdh_gp_n(*(_QWORD *)(a1 + 8)) + 3 * **(_QWORD **)a1);
      v18 = ccsrp_sizeof_M_HAMK(*(_QWORD *)a1);
      memcpy(a3, v17, v18);
      v16 = *(_BYTE *)(a1 + 24) & 1;
    }
    else
    {
      v16 = 0;
    }
  }
  cc_disable_dit(&v20);
  return v16;
}

_BYTE *ccspake_transcript_init(uint64_t a1)
{
  uint64_t v2;

  v2 = (**(uint64_t (***)(void))(a1 + 8))();
  return ccdigest_init(v2, (_QWORD *)(a1 + 64));
}

_BYTE *ccspake_transcript_append(uint64_t a1, size_t a2, char *a3)
{
  uint64_t v6;
  _BYTE *result;
  uint64_t v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C874D8];
  v9[0] = a2;
  v6 = (**(uint64_t (***)(uint64_t, size_t))(a1 + 8))(a1, a2);
  result = ccdigest_update(v6, (_QWORD *)(a1 + 64), 8uLL, (char *)v9);
  if (a2)
  {
    v8 = (**(uint64_t (***)(_BYTE *))(a1 + 8))(result);
    return ccdigest_update(v8, (_QWORD *)(a1 + 64), a2, a3);
  }
  return result;
}

_BYTE *ccspake_transcript_begin(uint64_t a1, size_t a2, char *a3, size_t a4, char *a5, size_t a6, char *a7)
{
  _BYTE *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;

  ccspake_transcript_append(a1, a2, a3);
  ccspake_transcript_append(a1, a4, a5);
  v12 = ccspake_transcript_append(a1, a6, a7);
  v13 = (unint64_t *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 8))(v12);
  v14 = *v13;
  v15 = *(unint64_t **)(*(_QWORD *)a1 + 24);
  ccspake_transcript_append_point(a1, v13, *(unint64_t **)(*(_QWORD *)a1 + 16), (unint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8 * *v13));
  return ccspake_transcript_append_point(a1, v13, v15, &v15[v14]);
}

_BYTE *ccspake_transcript_append_point(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v8;
  unint64_t v9;
  char v11;
  _OWORD v12[8];
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C874D8];
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  v11 = 4;
  v8 = cczp_bitlen((uint64_t)a2) + 7;
  v9 = *a2;
  ccn_write_uint_padded(v9, a3, v8 >> 3, (char *)v12);
  ccn_write_uint_padded(v9, a4, v8 >> 3, (char *)v12 + (v8 >> 3));
  return ccspake_transcript_append(a1, (v8 >> 2) | 1, &v11);
}

_BYTE *ccspake_transcript_append_scalar(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v6;
  _OWORD v8[4];
  __int16 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C874D8];
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v6 = (unint64_t)(cczp_bitlen((uint64_t)&a2[5 * *a2 + 4]) + 7) >> 3;
  ccn_write_uint_padded(*a2, a3, v6, (char *)v8);
  return ccspake_transcript_append(a1, v6, (char *)v8);
}

uint64_t ccspake_transcript_finish(uint64_t (***a1)(void), uint64_t a2)
{
  uint64_t (***v3)(void);
  uint64_t v4;

  v3 = a1;
  v4 = (*a1[1])();
  v3 += 8;
  (*(void (**)(uint64_t, uint64_t (***)(void), uint64_t))(v4 + 56))(v4, v3, a2);
  return cc_clear(*(_QWORD *)(v4 + 8) + *(_QWORD *)(v4 + 16) + 12, v3);
}

uint64_t ccrsa_oaep_encode_parameter_ws(uint64_t a1, size_t *a2, uint64_t (**a3)(_QWORD, size_t, char *), uint64_t a4, void *a5, size_t a6, const void *a7, size_t a8, char *a9)
{
  uint64_t v9;
  rsize_t v10;
  uint64_t v12;
  uint64_t (*v20)(_QWORD, size_t, char *);
  unint64_t v21;
  char *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  _BYTE __s[64];
  char __src[64];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C874D8];
  v9 = a4 - 1;
  v10 = *a2;
  if (a4 - 1 >= ((2 * *a2) | 1) && v9 + ~(2 * v10) >= a6)
  {
    v20 = *a3;
    if (v10 > 0xB)
    {
      v12 = v20(a3, *a2, __src);
      if ((_DWORD)v12)
        return v12;
    }
    else
    {
      v12 = v20(a3, 12, __s);
      __memcpy_chk();
      cc_clear(v10, __s);
      if ((_DWORD)v12)
        return v12;
    }
    v26 = v9 - v10;
    v21 = (v9 - v10 + 7) >> 3;
    v27 = *(_QWORD *)(a1 + 16);
    v22 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v21);
    v25 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v21);
    ccn_zero(v21, v22);
    ccdigest((uint64_t)a2, a8, a9, (uint64_t)v22);
    v22[v26 + ~a6] = 1;
    memcpy(&v22[v26 - a6], a7, a6);
    ccmgf((uint64_t)a2, v26, v25, *a2, __src);
    ccn_xor(v21, (uint64_t)v22, (uint64_t)v22, v25);
    ccmgf((uint64_t)a2, *a2, (uint64_t)__s, v26, v22);
    ccn_xor((*a2 + 7) >> 3, (uint64_t)__src, (uint64_t)__src, (uint64_t)__s);
    v23 = ccrsa_block_start(a4, a5, 0);
    memmove((void *)(v23 + 1), __src, *a2);
    v24 = (_BYTE *)ccrsa_block_start(a4, a5, 1);
    *v24 = 0;
    memcpy(&v24[*a2 + 1], v22, v26);
    ccn_swap((unint64_t)(a4 + 7) >> 3, (unint64_t *)a5);
    cc_clear(0x40uLL, __src);
    cc_clear(0x40uLL, __s);
    *(_QWORD *)(a1 + 16) = v27;
    return v12;
  }
  return 4294967273;
}

uint64_t ccrsa_oaep_encode_parameter(size_t *a1, uint64_t (**a2)(_QWORD, size_t, char *), uint64_t a3, void *a4, size_t a5, const void *a6, size_t a7, char *a8)
{
  char v16;
  unint64_t v22;
  uint64_t v23;
  _QWORD v25[4];
  void (*v26)(uint64_t);
  char v27;

  v16 = 0;
  v27 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v16 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v16 = 1;
    }
  }
  v27 = v16;
  v22 = ((a3 + ~*a1 + 7) >> 2) & 0x3FFFFFFFFFFFFFFELL;
  v25[0] = cc_malloc_clear(8 * v22);
  v25[1] = v22;
  v25[2] = 0;
  v25[3] = cc_ws_alloc;
  v26 = cc_ws_free;
  if (v25[0])
  {
    v23 = ccrsa_oaep_encode_parameter_ws((uint64_t)v25, a1, a2, a3, a4, a5, a6, a7, a8);
    v26((uint64_t)v25);
  }
  else
  {
    v23 = 4294967283;
  }
  cc_disable_dit(&v27);
  return v23;
}

uint64_t ccder_encode_tag(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  if (!a3)
    return 0;
  v4 = a2;
  v5 = a3;
  if (ccder_blob_encode_tag(&v4, a1))
    return v5;
  else
    return 0;
}

uint64_t ccder_encode_len(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  if (!a3)
    return 0;
  v4 = a2;
  v5 = a3;
  if (ccder_blob_encode_len(&v4, a1))
    return v5;
  else
    return 0;
}

uint64_t ccder_encode_body_nocopy(unint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];
  uint64_t v5;
  uint64_t v6;

  if (!a3)
    return 0;
  v4[0] = 0;
  v4[1] = 0;
  v5 = a2;
  v6 = a3;
  if (ccder_blob_reserve(&v5, a1, v4))
    return v6;
  else
    return 0;
}

uint64_t ccder_encode_oid(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  if (!a3)
    return 0;
  v4 = a2;
  v5 = a3;
  if (ccder_blob_encode_oid(&v4, a1))
    return v5;
  else
    return 0;
}

uint64_t ccder_encode_implicit_integer(unint64_t a1, unint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;

  if (!a5)
    return 0;
  v6 = a4;
  v7 = a5;
  if (ccder_blob_encode_implicit_integer(&v6, a1, a2, a3))
    return v7;
  else
    return 0;
}

uint64_t ccder_encode_implicit_uint64(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  if (!a4)
    return 0;
  v5 = a3;
  v6 = a4;
  if (ccder_blob_encode_implicit_uint64(&v5, a1, a2))
    return v6;
  else
    return 0;
}

uint64_t ccder_encode_uint64(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  if (!a3)
    return 0;
  v4 = a2;
  v5 = a3;
  if (ccder_blob_encode_uint64(&v4, a1))
    return v5;
  else
    return 0;
}

uint64_t ccder_encode_implicit_octet_string(unint64_t a1, unint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;

  if (!a5)
    return 0;
  v6 = a4;
  v7 = a5;
  if (ccder_blob_encode_implicit_octet_string(&v6, a1, a2, a3))
    return v7;
  else
    return 0;
}

uint64_t ccder_encode_octet_string(unint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  if (!a4)
    return 0;
  v5 = a3;
  v6 = a4;
  if (ccder_blob_encode_octet_string(&v5, a1, a2))
    return v6;
  else
    return 0;
}

uint64_t ccder_encode_implicit_raw_octet_string(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;

  if (!a5)
    return 0;
  v6 = a4;
  v7 = a5;
  if (ccder_blob_encode_implicit_raw_octet_string(&v6, a1, a2, a3))
    return v7;
  else
    return 0;
}

uint64_t ccder_encode_raw_octet_string(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  if (!a4)
    return 0;
  v5 = a3;
  v6 = a4;
  if (ccder_blob_encode_raw_octet_string((uint64_t)&v5, a1, a2))
    return v6;
  else
    return 0;
}

unsigned __int8 *ccder_decode_len(unint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4[2];

  if (!a2)
    return 0;
  v4[0] = a2;
  v4[1] = a3;
  if (ccder_blob_decode_len(v4, a1))
    return v4[0];
  else
    return 0;
}

unsigned __int8 *ccder_decode_len_strict(unint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4[2];

  if (!a2)
    return 0;
  v4[0] = a2;
  v4[1] = a3;
  if (ccder_blob_decode_len_strict(v4, a1))
    return v4[0];
  else
    return 0;
}

unsigned __int8 *ccder_decode_tl_strict(uint64_t a1, unint64_t *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unsigned __int8 *v5[2];

  if (!a3)
    return 0;
  v5[0] = a3;
  v5[1] = a4;
  if (ccder_blob_decode_tl_strict(v5, a1, a2))
    return v5[0];
  else
    return 0;
}

unsigned __int8 *ccder_decode_constructed_tl_strict(uint64_t a1, unsigned __int8 **a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  int v5;
  unsigned __int8 *result;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9[2];

  *a2 = a3;
  if (!a3)
    return 0;
  v7 = 0;
  v8 = 0;
  v9[0] = a3;
  v9[1] = a4;
  v5 = ccder_blob_decode_range_strict(v9, a1, &v7);
  result = 0;
  if (v5)
  {
    result = v7;
    *a2 = v8;
  }
  return result;
}

unsigned __int8 *ccder_decode_sequence_tl_strict(unsigned __int8 **a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v4;
  unsigned __int8 *result;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8[2];

  *a1 = a2;
  if (!a2)
    return 0;
  v6 = 0;
  v7 = 0;
  v8[0] = a2;
  v8[1] = a3;
  v4 = ccder_blob_decode_sequence_tl_strict(v8, &v6);
  result = 0;
  if (v4)
  {
    result = v6;
    *a1 = v7;
  }
  return result;
}

unsigned __int8 *ccder_decode_uint_strict(unint64_t a1, _QWORD *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unsigned __int8 *v5[2];

  if (!a3)
    return 0;
  v5[0] = a3;
  v5[1] = a4;
  if (ccder_blob_decode_uint_strict(v5, a1, a2))
    return v5[0];
  else
    return 0;
}

unsigned __int8 *ccder_decode_uint64(unint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4[2];

  if (!a2)
    return 0;
  v4[0] = a2;
  v4[1] = a3;
  if (ccder_blob_decode_uint64(v4, a1))
    return v4[0];
  else
    return 0;
}

unsigned __int8 *ccder_decode_seqii_strict(unint64_t a1, _QWORD *a2, _QWORD *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  unsigned __int8 *v6[2];

  if (!a4)
    return 0;
  v6[0] = a4;
  v6[1] = a5;
  if (ccder_blob_decode_seqii_strict(v6, a1, a2, a3))
    return v6[0];
  else
    return 0;
}

unsigned __int8 *ccder_decode_oid(unsigned __int8 **a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4[2];

  *a1 = 0;
  if (!a2)
    return 0;
  v4[0] = a2;
  v4[1] = a3;
  if (ccder_blob_decode_oid(v4, a1))
    return v4[0];
  else
    return 0;
}

unsigned __int8 *ccder_decode_bitstring(_QWORD *a1, unint64_t *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unsigned __int8 *result;
  _QWORD v7[2];
  unsigned __int8 *v8[2];

  if (!a3)
    return 0;
  v7[0] = 0;
  v7[1] = 0;
  v8[0] = a3;
  v8[1] = a4;
  if (ccder_blob_decode_bitstring(v8, (uint64_t)v7, a2))
  {
    *a1 = v7[0];
    return v8[0];
  }
  else
  {
    result = 0;
    *a2 = 0;
    *a1 = 0;
  }
  return result;
}

uint64_t ccshake_init(rsize_t *a1, void *a2)
{
  return cc_clear(*a1, a2);
}

uint64_t ccshake128(unint64_t a1, char *a2, size_t a3, char *a4)
{
  _QWORD *v8;
  _QWORD __s[49];

  __s[48] = *MEMORY[0x1E0C874D8];
  v8 = ccshake128_xi();
  ccxof_init((uint64_t)v8, __s);
  ccxof_absorb(v8, (char *)__s, a1, a2);
  ccxof_squeeze(v8, (unsigned int *)__s, a3, a4);
  return cc_clear(0x178uLL, __s);
}

uint64_t ccshake256(unint64_t a1, char *a2, size_t a3, char *a4)
{
  _QWORD *v8;
  _QWORD __s[45];

  __s[44] = *MEMORY[0x1E0C874D8];
  v8 = ccshake256_xi();
  ccxof_init((uint64_t)v8, __s);
  ccxof_absorb(v8, (char *)__s, a1, a2);
  ccxof_squeeze(v8, (unsigned int *)__s, a3, a4);
  return cc_clear(0x158uLL, __s);
}

void *cckem_kyber768()
{
  return &cckem_kyber768_info;
}

uint64_t cckem_kyber768_generate_key(uint64_t a1, uint64_t (**a2)(_QWORD, uint64_t, char *))
{
  uint64_t v4;

  v4 = cckem_public_ctx();
  return cckyber_kem_keypair(cckyber768_params, (void *)(v4 + 8), a1 + *(_QWORD *)(*(_QWORD *)a1 + 8) + 8, a2);
}

uint64_t cckem_kyber768_derive_key_from_seed(uint64_t a1, unint64_t a2, char *a3, uint64_t (**a4)(_QWORD, uint64_t, _OWORD *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD __s[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C874D8];
  if (a2 < 0x20)
    return 4294967289;
  v7 = cckem_public_ctx();
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v9 = (*a4)(a4, 32, __s);
  if (!(_DWORD)v9)
    v9 = cckyber_kem_keypair_coins(cckyber768_params, (void *)(v7 + 8), a1 + v8 + 8, a3, __s);
  v10 = v9;
  cc_clear(0x20uLL, __s);
  return v10;
}

uint64_t cckem_kyber768_encapsulate(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t (**a4)(_QWORD, uint64_t, __int128 *))
{
  return cckyber_kem_encapsulate(cckyber768_params, (char *)(a1 + 8), a2, a3, a4);
}

uint64_t cckem_kyber768_decapsulate(uint64_t a1, char *a2, char *a3)
{
  return cckyber_kem_decapsulate(cckyber768_params, a1 + *(_QWORD *)(*(_QWORD *)a1 + 8) + 8, a2, a3);
}

uint64_t cckem_kyber768_export_pubkey(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6;
  size_t v7;

  v6 = *a2;
  if (v6 < cckem_pubkey_nbytes_ctx(a1))
    return 4294967289;
  v7 = cckem_pubkey_nbytes_ctx(a1);
  *a2 = v7;
  memcpy(a3, (const void *)(a1 + 8), v7);
  return 0;
}

uint64_t cckem_kyber768_import_pubkey(uint64_t a1, size_t a2, const void *a3, _QWORD *a4)
{
  if (cckem_pubkey_nbytes_info(a1) != a2)
    return 4294967289;
  cckem_pub_ctx_init(a4, a1);
  memcpy(a4 + 1, a3, a2);
  return 0;
}

uint64_t cckem_kyber768_export_privkey(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;

  v6 = *a2;
  v7 = ((uint64_t (*)(void))cckem_public_ctx)();
  if (v6 < cckem_privkey_nbytes_ctx(v7))
    return 4294967289;
  v8 = cckem_public_ctx(a1);
  v9 = cckem_privkey_nbytes_ctx(v8);
  *a2 = v9;
  memcpy(a3, (const void *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 8) + 8), v9);
  return 0;
}

uint64_t cckem_kyber768_import_privkey(_QWORD *a1, size_t a2, const void *a3, _QWORD *a4)
{
  if (cckem_privkey_nbytes_info(a1) != a2)
    return 4294967289;
  cckem_full_ctx_init(a4, a1);
  memcpy((char *)a4 + *(_QWORD *)(*a4 + 8) + 8, a3, a2);
  return 0;
}

void cc_abort()
{
  abort();
}

void *ccdh_gp_rfc3526group16()
{
  return &_ccdh_gp_rfc3526group16;
}

void *ccsrp_gp_rfc5054_8192()
{
  return &_ccsrp_gp_rfc5054_8192;
}

uint64_t ccmode_ccm_decrypt(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9;
  _BOOL4 v10;

  v9 = *(_DWORD *)(a2 + 64);
  if (v9 == 5)
  {
    v10 = 0;
LABEL_5:
    ccmode_ccm_crypt(a1, a2, a3, a4, a5);
    ccmode_ccm_macdata(a1, a2, v10, a3, a5);
    return 0;
  }
  if (v9 == 4)
  {
    v10 = *(_DWORD *)(a2 + 72) != 0;
    *(_DWORD *)(a2 + 64) = 5;
    goto LABEL_5;
  }
  return 4294967228;
}

uint64_t ccz_write_radix_size(uint64_t a1, int a2)
{
  char v4;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  char v15;

  v4 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v15 = v4;
  v10 = ccz_n(a1);
  v11 = ccz_sign(a1);
  if (a2 == 16 || a2 == 10)
  {
    if (ccz_is_zero(a1))
    {
      v12 = 1;
    }
    else
    {
      v13 = v11 >> 31;
      if (a2 == 16)
        v12 = v13 + ((ccn_bitlen(v10, *(unint64_t **)(a1 + 24)) + 3) >> 2);
      else
        v12 = ccz_write_radix_10(a1, 0, 0) + v13;
    }
  }
  else
  {
    v12 = 0;
  }
  cc_disable_dit(&v15);
  return v12;
}

uint64_t ccz_write_radix_10(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t i;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;

  v17 = 0u;
  v18 = 0u;
  ccz_init(*(_QWORD *)(a1 + 8), (uint64_t)&v17);
  ccz_set((uint64_t)&v17, a1);
  v6 = ccz_n((uint64_t)&v17);
  v7 = ccn_n(v6, *((_QWORD *)&v18 + 1));
  ccz_set_n(&v17, v7);
  v8 = &a3[a2];
  for (i = 0; !ccz_is_zero((uint64_t)&v17); ++i)
  {
    if (v8 && v8 <= a3)
      break;
    if ((ccz_cmpi((uint64_t)&v17, 0xAu) & 0x80000000) != 0)
    {
      v16 = **((_QWORD **)&v18 + 1);
      ccz_zero(&v17);
      if (!v8)
        continue;
    }
    else
    {
      v20 = 0u;
      v21 = 0u;
      memset(v19, 0, sizeof(v19));
      ccz_init(*((uint64_t *)&v17 + 1), (uint64_t)&v20);
      ccz_init(*((uint64_t *)&v17 + 1), (uint64_t)v19);
      v11 = ccz_bitlen((uint64_t)&v17) - 4;
      ccz_set((uint64_t)&v20, (uint64_t)&v17);
      ccz_zero(&v17);
      ccz_seti((uint64_t)v19, 10);
      ccz_lsl((uint64_t)v19, (uint64_t)v19, v11);
      v12 = 0;
      v13 = v11;
      do
      {
        if ((ccz_cmp((uint64_t)&v20, (uint64_t)v19) & 0x80000000) == 0)
        {
          ccz_sub((uint64_t)&v20, (uint64_t)&v20, (uint64_t)v19);
          ccz_set_bit(&v17, v13, 1u);
        }
        ccz_lsr((uint64_t)v19, (uint64_t)v19, 1uLL);
        ++v12;
        --v13;
      }
      while (v12 <= v11);
      v14 = ccz_n((uint64_t)&v17);
      v15 = ccn_n(v14, *((_QWORD *)&v18 + 1));
      ccz_set_n(&v17, v15);
      v16 = **((_QWORD **)&v21 + 1);
      ccz_free((uint64_t)&v20);
      ccz_free((uint64_t)v19);
      if (!v8)
        continue;
    }
    *--v8 = DIGITS[v16];
  }
  if (v8 > a3)
    memset(a3, 48, a2 - i);
  ccz_free((uint64_t)&v17);
  return i;
}

uint64_t ccz_write_radix(uint64_t a1, uint64_t a2, char *a3, int a4)
{
  uint64_t v6;
  char v8;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  BOOL v22;
  char v24;

  v6 = a2;
  v8 = 0;
  v24 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v24 = v8;
  if (a4 != 16 && a4 != 10)
  {
    v14 = 4294967251;
    goto LABEL_24;
  }
  if (!a2)
    goto LABEL_11;
  if (!ccz_is_zero(a1) && (ccz_sign(a1) & 0x80000000) != 0)
  {
    if ((unint64_t)v6 < 2)
    {
LABEL_11:
      v14 = 4294967289;
      goto LABEL_24;
    }
    *a3++ = 45;
    --v6;
  }
  if (a4 == 10)
  {
    ccz_write_radix_10(a1, v6, a3);
  }
  else
  {
    v15 = ccz_n(a1);
    v16 = ccn_bitlen(v15, *(unint64_t **)(a1 + 24)) + 3;
    v17 = v16 >> 2;
    if (v6 >= 1 && v16 >= 4)
    {
      v18 = 0;
      v19 = (unint64_t)&a3[v6 - 1];
      v20 = 1;
      v21 = (_BYTE *)v19;
      do
      {
        *v21-- = DIGITS[(*(_QWORD *)(*(_QWORD *)(a1 + 24) + (((v20 - 1) >> 1) & 0x7FFFFFFFFFFFFFF8)) >> (v18 & 0x3C)) & 0xFLL];
        if (v20 >= v17)
          break;
        ++v20;
        v18 += 4;
        v22 = v19 > (unint64_t)a3;
        v19 = (unint64_t)v21;
      }
      while (v22);
    }
    if (v6 > v17)
      memset(a3, 48, v6 - v17);
  }
  v14 = 0;
LABEL_24:
  cc_disable_dit(&v24);
  return v14;
}

uint64_t ccascon_cmac_init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v6;
  uint64_t v12;
  char v14;

  v6 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v14 = v6;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 24))(a2, a3, a4, a5, a6);
  cc_disable_dit(&v14);
  return v12;
}

uint64_t ccascon_cmac_process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  uint64_t v10;
  char v12;

  v4 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v12 = v4;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 32))(a2, a3, a4);
  cc_disable_dit(&v12);
  return v10;
}

uint64_t ccascon_cmac_tag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  uint64_t v10;
  char v12;

  v4 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v12 = v4;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 40))(a2, a3, a4);
  cc_disable_dit(&v12);
  return v10;
}

uint64_t ccascon_cmac_verify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5;
  uint64_t v11;
  char v13;

  v5 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v13 = v5;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 48))(a2, a3, a4, a5);
  cc_disable_dit(&v13);
  return v11;
}

uint64_t ccascon_cmac_ref_process(unint64_t *a1, unint64_t a2, unint64_t *a3)
{
  ccascon_ascon128a_ref_accumulate_encrypt(a1, 0, a2, a3);
  return 0;
}

uint64_t ccascon_cmac_ref_tag(_OWORD *a1, uint64_t a2, unint64_t *a3)
{
  __int128 v5;
  _OWORD v7[3];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[2] = a1[2];
  ccascon_ascon128a_ref_pad((uint64_t)v7);
  ccascon_ascon128a_ref_finalize((unint64_t *)v7, a2, a3);
  cc_clear(0x30uLL, v7);
  return 0;
}

uint64_t ccascon_cmac_ref_verify(_OWORD *a1, uint64_t a2, char *a3, unint64_t *a4)
{
  __int128 v7;
  uint64_t v8;
  _OWORD v10[3];
  char __s[16];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C874D8];
  v7 = a1[1];
  v10[0] = *a1;
  v10[1] = v7;
  v10[2] = a1[2];
  ccascon_ascon128a_ref_pad((uint64_t)v10);
  ccascon_ascon128a_ref_finalize((unint64_t *)v10, (uint64_t)__s, a4);
  if (cc_cmp_safe(a2, a3, __s))
    v8 = 4294967294;
  else
    v8 = 0;
  cc_clear(0x30uLL, v10);
  cc_clear(0x10uLL, __s);
  return v8;
}

void *ccascon_ascon128a_cmac()
{
  return &ccascon_ascon128a_cmac_ref;
}

uint64_t cc_log_default()
{
  if (cc_log_default_initp != -1)
    _os_once();
  return cc_log_default_log;
}

os_log_t cc_log_init(os_log_t *a1)
{
  os_log_t result;

  result = os_log_create("com.apple.corecrypto", "default");
  *a1 = result;
  return result;
}

uint64_t ccsae_init_p384_sha384(_QWORD *a1, uint64_t a2)
{
  char v4;
  _QWORD *v10;
  void *v11;
  char v13;

  v4 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v13 = v4;
  v10 = (_QWORD *)ccec_cp_384();
  v11 = ccsha384_di();
  ccsae_init(a1, v10, a2, (uint64_t)v11);
  cc_disable_dit(&v13);
  return 0;
}

uint64_t ccsae_init(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  char v8;
  rsize_t v14;
  char *v15;
  char v17;

  v8 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v17 = v8;
  v14 = ccsae_sizeof_ctx(a2);
  cc_clear(v14, a1);
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  *((_DWORD *)a1 + 7) = 0;
  *((_BYTE *)a1 + 24) = CCSAE_STATE_INIT;
  *((_BYTE *)a1 + 25) = 40;
  v15 = SAE_HUNT_PECK_LABEL;
  a1[4] = SAE_KCK_PMK_LABEL[0];
  a1[5] = v15;
  cc_disable_dit(&v17);
  return 0;
}

uint64_t ccsae_init_p256_sha256(_QWORD *a1, uint64_t a2)
{
  char v4;
  _QWORD *v10;
  void *v11;
  char v13;

  v4 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v13 = v4;
  v10 = (_QWORD *)ccec_cp_256();
  v11 = ccsha256_di();
  ccsae_init(a1, v10, a2, (uint64_t)v11);
  cc_disable_dit(&v13);
  return 0;
}

uint64_t cch2c_map_to_curve_sswu_ws(uint64_t a1, uint64_t a2, int *a3, uint64_t *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  void *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  uint64_t v20;

  v7 = (_QWORD *)(*(uint64_t (**)(void))(a2 + 16))();
  v8 = cczp_n((uint64_t)v7);
  *a4 = (uint64_t)v7;
  a4 += 2;
  v9 = &a4[*v7];
  v10 = &a4[2 * *v7];
  v18 = *(_QWORD *)(a1 + 16);
  v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v8);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v8);
  v12 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v8);
  v15 = v8;
  v16 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v8);
  v17 = *a3;
  ccn_seti(v8, v10, *(unsigned int *)(a2 + 12));
  cczp_to_ws(a1, (uint64_t)v7);
  cczp_inv_ws(a1, (uint64_t)v7);
  cczp_negate((uint64_t)v7, v10, (unint64_t *)v10);
  ccn_seti(v8, v9, 3);
  cczp_to_ws(a1, (uint64_t)v7);
  cczp_inv_ws(a1, (uint64_t)v7);
  cczp_mul_ws(a1, (uint64_t)v7);
  cczp_negate((uint64_t)v7, v9, (unint64_t *)v9);
  cczp_to_ws(a1, (uint64_t)v7);
  cczp_sqr_ws(a1, (uint64_t)v7);
  cczp_mul_ws(a1, (uint64_t)v7);
  cczp_sqr_ws(a1, (uint64_t)v7);
  cczp_add_ws(a1, (uint64_t)v7);
  v20 = *(_QWORD *)(a1 + 16);
  v13 = cczp_n((uint64_t)v7);
  LOBYTE(v8) = ccn_n(v13, v12) == 0;
  cczp_inv_ws(a1, (uint64_t)v7);
  ccn_cond_clear(v13, v8, v12);
  *(_QWORD *)(a1 + 16) = v20;
  LOBYTE(v8) = ccn_n(v15, v12) == 0;
  ccn_seti(v15, a4, 1);
  cczp_to_ws(a1, (uint64_t)v7);
  cczp_add_ws(a1, (uint64_t)v7);
  ccn_mux(v15, v8, v12, v16, v12);
  cczp_mul_ws(a1, (uint64_t)v7);
  cczp_sqr_ws(a1, (uint64_t)v7);
  cczp_add_ws(a1, (uint64_t)v7);
  cczp_mul_ws(a1, (uint64_t)v7);
  cczp_add_ws(a1, (uint64_t)v7);
  cczp_mul_ws(a1, (uint64_t)v7);
  cczp_mul_ws(a1, (uint64_t)v7);
  cczp_mul_ws(a1, (uint64_t)v7);
  LOBYTE(v8) = cczp_is_quadratic_residue_ws(a1, (uint64_t)v7, v11);
  ccn_mux(v15, v8, a4, v12, a4);
  cczp_from_ws(a1, (uint64_t)v7);
  ccn_mux(v15, v8, v10, (uint64_t *)v11, v10);
  cczp_sqrt_ws(a1, (uint64_t)v7);
  cczp_from_ws(a1, (uint64_t)v7);
  cczp_cond_negate((uint64_t)v7, (*v9 ^ v17) & 1, v9, (unint64_t *)v9);
  ccn_seti(v15, v10, 1);
  *(_QWORD *)(a1 + 16) = v18;
  return 0;
}

uint64_t map_to_curve_sswu(uint64_t a1, int *a2, uint64_t *a3)
{
  char v6;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[4];
  void (*v16)(uint64_t);
  char v17;

  v6 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v17 = v6;
  v12 = (_QWORD *)(*(uint64_t (**)(void))(a1 + 16))();
  v15[0] = cc_malloc_clear(144 * *v12);
  v15[1] = 18 * *v12;
  v15[2] = 0;
  v15[3] = cc_ws_alloc;
  v16 = cc_ws_free;
  if (v15[0])
  {
    cch2c_map_to_curve_sswu_ws((uint64_t)v15, a1, a2, a3);
    v16((uint64_t)v15);
    v13 = 0;
  }
  else
  {
    v13 = 4294967283;
  }
  cc_disable_dit(&v17);
  return v13;
}

uint64_t cch2c_map_to_curve_ws(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t ccaes_vng_ccm_decrypt(_DWORD *a1, int8x16_t *a2, unint64_t a3, int8x16_t *a4, int8x16_t *a5)
{
  __int32 v10;
  unint64_t v11;
  unint64_t v12;
  int8x16_t *v13;
  unint64_t v14;
  int v15;
  unint64_t v16;

  v10 = a2[4].i32[0];
  if (v10 == 5)
    goto LABEL_6;
  if (v10 == 4)
  {
    if (a2[4].i32[2])
    {
      (*(void (**)(_DWORD *, uint64_t, int8x16_t *, int8x16_t *))(*(_QWORD *)a1 + 24))(a1 + 2, 1, a2 + 1, a2 + 1);
      a2[4].i32[2] = 0;
    }
    a2[4].i32[0] = 5;
LABEL_6:
    v11 = a2[4].u32[1];
    if ((_DWORD)v11)
    {
      v12 = v11 >= a3 ? a3 : a2[4].u32[1];
      ccmode_ccm_crypt((uint64_t)a1, (uint64_t)a2, v12, (uint64_t)a4, (uint64_t)a5);
      ccmode_ccm_macdata((uint64_t)a1, (uint64_t)a2, 0, v12, (uint64_t)a5);
      a4 = (int8x16_t *)((char *)a4 + v12);
      a5 = (int8x16_t *)((char *)a5 + v12);
      a3 -= v12;
      if (a2[4].i32[1])
        goto LABEL_24;
    }
    if (a3 < 0x10)
      goto LABEL_24;
    v13 = (int8x16_t *)(a1 + 2);
    v14 = a3 >> 4;
    v15 = a1[62];
    if (v15 > 159)
    {
      if (v15 == 224)
      {
LABEL_21:
        ccm256_decrypt(a4, a5, a2 + 1, v14, v13, a2, *(_QWORD *)(*(_QWORD *)a1 + 8) + ~a2[5].i32[0]);
        goto LABEL_23;
      }
      if (v15 == 192)
      {
LABEL_22:
        ccm192_decrypt(a4, a5, a2 + 1, v14, v13, a2, *(_QWORD *)(*(_QWORD *)a1 + 8) + ~a2[5].i32[0]);
        goto LABEL_23;
      }
      if (v15 != 160)
      {
LABEL_23:
        v16 = a3 & 0xFFFFFFFFFFFFFFF0;
        a3 &= 0xFu;
        a4 = (int8x16_t *)((char *)a4 + v16);
        a5 = (int8x16_t *)((char *)a5 + v16);
LABEL_24:
        ccmode_ccm_crypt((uint64_t)a1, (uint64_t)a2, a3, (uint64_t)a4, (uint64_t)a5);
        ccmode_ccm_macdata((uint64_t)a1, (uint64_t)a2, 0, a3, (uint64_t)a5);
        return 0;
      }
    }
    else if (v15 != 10)
    {
      if (v15 != 12)
      {
        if (v15 != 14)
          goto LABEL_23;
        goto LABEL_21;
      }
      goto LABEL_22;
    }
    ccm128_decrypt(a4, a5, a2 + 1, v14, v13, a2, *(_QWORD *)(*(_QWORD *)a1 + 8) + ~a2[5].i32[0]);
    goto LABEL_23;
  }
  return 4294967228;
}

uint64_t fipspost_post_drbg_ctr()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v5;
  _QWORD v6[4];
  void (*v7)(uint64_t);
  uint64_t *v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C874D8];
  v11 = 0;
  v12 = 0;
  v8 = ccaes_ctr_crypt_mode();
  v9 = xmmword_1DEE27F50;
  DWORD2(v9) = 0;
  v10 = fipspost_post_drbg_ctr_df_ctx;
  ccdrbg_factory_nistctr(fipspost_post_drbg_ctr_info, (uint64_t)&v8);
  v6[0] = cc_malloc_clear((fipspost_post_drbg_ctr_info[0] + 7) & 0xFFFFFFFFFFFFFFF8);
  v6[1] = (unint64_t)(fipspost_post_drbg_ctr_info[0] + 7) >> 3;
  v6[2] = 0;
  v6[3] = cc_ws_alloc;
  v7 = cc_ws_free;
  if (v6[0])
  {
    v0 = cc_ws_alloc(v6, (unint64_t)(fipspost_post_drbg_ctr_info[0] + 7) >> 3);
    v1 = ccaes_cbc_encrypt_mode();
    if (ccdrbg_df_bc_init(fipspost_post_drbg_ctr_df_ctx, v1, 0x10uLL))
    {
      mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccdrbg_df_bc_init\n");
    }
    else if (ccdrbg_init((uint64_t)fipspost_post_drbg_ctr_info))
    {
      mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccdrbg_init\n");
    }
    else if (ccdrbg_reseed((uint64_t)fipspost_post_drbg_ctr_info, v0, 16, (uint64_t)"4\x83.\xC3\x2B\x10Xɍr\xB0\xB6\x89\xA8\xDA\xE2", 16, (uint64_t)"߱烂\xC8\xDB\xD7\xEF\x1A \v\x13g\x1A\xE2\x83.\xC3\x2B\x10Xɍr\xB0\xB6\x89\xA8\xDA\xE2"))
    {
      mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccdrbg_reseed\n");
    }
    else if (ccdrbg_generate((uint64_t)fipspost_post_drbg_ctr_info, v0, 16, (uint64_t)&v11, 0, 0))
    {
      mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccdrbg_generate\n");
    }
    else if (ccdrbg_reseed((uint64_t)fipspost_post_drbg_ctr_info, v0, 16, (uint64_t)"\xBE\xE1\x92\xEF&ݻ#j\xF8)\xD0\xC7\xD8\x49\xB7", 16, (uint64_t)"ʃ\xD6\x45^\x98\xCD\x09\xD6\x65\x86\xE2\x63\x92m\xE6\xE1\x92\xEF&ݻ#j\xF8)\xD0\xC7\xD8\x49\xB7"))
    {
      mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccdrbg_reseed 2\n");
    }
    else
    {
      if (!ccdrbg_generate((uint64_t)fipspost_post_drbg_ctr_info, v0, 16, (uint64_t)&v11, 0, 0))
      {
        if (v11 == 0xED42DA4BEFDD5852 && v12 == 0x87B07451F1579E49)
        {
          v2 = 0;
        }
        else
        {
          v5 = mach_absolute_time();
          printf("FIPSPOST_USER [%llu] %s:%d: FAILED: memcmp\n", v5, "fipspost_post_drbg_ctr", 116);
          v2 = 4294967221;
        }
        goto LABEL_16;
      }
      mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccdrbg_generate 2\n");
    }
    v2 = 4294967224;
LABEL_16:
    v7((uint64_t)v6);
    return v2;
  }
  return 4294967283;
}

BOOL ccn_add(_BOOL8 a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  char v4;
  _BOOL8 v10;
  _OWORD v12[2];
  uint64_t (*v13)(_QWORD);
  char v14;

  v4 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v14 = v4;
  v12[0] = xmmword_1EA9555E0;
  v12[1] = unk_1EA9555F0;
  v13 = cc_ws_free_null;
  v10 = ccn_add_asm(a1, a2, a3, a4);
  cc_ws_free_null(v12);
  cc_disable_dit(&v14);
  return v10;
}

uint64_t ltc_des3_ecb_decrypt(uint64_t a1, uint64_t a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C874D8];
  if (a2)
  {
    v6 = a2;
    v7 = a1 + 384;
    do
    {
      --v6;
      v8 = *a3;
      v9 = a3[1];
      a3 += 2;
      v12 = bswap32(v8);
      v13 = bswap32(v9);
      desfunc3(&v12, v7);
      v10 = bswap32(v13);
      *a4 = bswap32(v12);
      a4[1] = v10;
      a4 += 2;
    }
    while (v6);
  }
  return 0;
}

uint64_t cccbc_context_size(uint64_t *a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *a1;
  cc_disable_dit(&v9);
  return v7;
}

uint64_t cccbc_block_size(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *(_QWORD *)(a1 + 8);
  cc_disable_dit(&v9);
  return v7;
}

uint64_t cccbc_copy_iv(void *a1, const void *a2, size_t a3)
{
  char v3;
  char v10;

  v3 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v10 = v3;
  memcpy(a1, a2, a3);
  cc_disable_dit(&v10);
  return 0;
}

uint64_t cccbc_clear_iv(void *__s, rsize_t __n)
{
  char v2;
  char v9;

  v2 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v9 = v2;
  cc_clear(__n, __s);
  cc_disable_dit(&v9);
  return 0;
}

uint64_t cccbc_set_iv(uint64_t a1, void *__s, const void *a3)
{
  char v3;
  size_t v9;
  char v11;

  v3 = 0;
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v11 = v3;
  v9 = *(_QWORD *)(a1 + 8);
  if (a3)
    cccbc_copy_iv(__s, a3, v9);
  else
    cccbc_clear_iv(__s, v9);
  cc_disable_dit(&v11);
  return 0;
}

uint64_t cccbc_one_shot(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v9;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v9 = 0;
  v18 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v9 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v9 = 1;
    }
  }
  v18 = v9;
  if (a4)
    v15 = *(_QWORD *)(a1 + 8);
  else
    v15 = 0;
  v16 = cccbc_one_shot_explicit(a1, a2, v15, *(_QWORD *)(a1 + 8), a5, a3, a4, a6, a7);
  cc_disable_dit(&v18);
  return v16;
}

uint64_t cccbc_one_shot_explicit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7, uint64_t a8, uint64_t a9)
{
  char v13;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v32[7];
  char v33;
  uint64_t v34;

  v13 = 0;
  v34 = *MEMORY[0x1E0C874D8];
  v33 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v13 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v13 = 1;
    }
  }
  v33 = v13;
  if (*(_QWORD *)(a1 + 8) == a4 && (!a3 || a3 == a4))
  {
    v20 = MEMORY[0x1E0C86820](a1, a2, a3, a4);
    v22 = &v32[-v21];
    MEMORY[0x1E0C86820](v20, v23, v24, v25);
    v27 = &v32[-v26];
    v30 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(a1 + 16))(a1, v22, v29, v28);
    if ((_DWORD)v30)
    {
      v19 = v30;
    }
    else
    {
      if (a7)
        memcpy(v27, a7, *(_QWORD *)(a1 + 8));
      else
        cc_clear(*(_QWORD *)(a1 + 8), v27);
      v19 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t, uint64_t, uint64_t))(a1 + 24))(v22, v27, a5, a8, a9);
      cc_clear(*(_QWORD *)a1, v22);
    }
  }
  else
  {
    v19 = 4294967289;
  }
  cc_disable_dit(&v33);
  return v19;
}

void *ccdh_gp_rfc5114_MODP_1024_160()
{
  return &_ccdh_gp_rfc5114_MODP_1024_160;
}

uint64_t ccec_verify_composite_digest_ws(uint64_t a1, uint64_t *a2, unint64_t a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6, _QWORD *a7)
{
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C874D8];
  if (a7)
  {
    *a7 = 0;
    a7[1] = 0;
  }
  v21 = 0uLL;
  v13 = *(_QWORD *)*a2;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v13);
  v16 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v13);
  v17 = ccec_signature_r_s_size(a2);
  if (ccn_read_uint(v13, v15, v17, a5)
    || (v18 = ccec_signature_r_s_size(a2), ccn_read_uint(v13, v16, v18, a6)))
  {
    result = 4294967289;
  }
  else
  {
    result = ccec_verify_internal_ws(a1, (unint64_t **)a2, a3, a4, v15, v16, (uint64_t)&v21);
    if (a7 && !(_DWORD)result)
      *(_OWORD *)a7 = v21;
  }
  *(_QWORD *)(a1 + 16) = v14;
  return result;
}

uint64_t ccec_verify_composite_msg_ws(uint64_t a1, uint64_t *a2, unint64_t *a3, size_t a4, char *a5, unsigned __int8 *a6, unsigned __int8 *a7, _QWORD *a8)
{
  unsigned __int8 v15[64];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C874D8];
  ccdigest((uint64_t)a3, a4, a5, (uint64_t)v15);
  return ccec_verify_composite_digest_ws(a1, a2, *a3, v15, a6, a7, a8);
}

uint64_t ccec_verify_composite_msg(uint64_t *a1, unint64_t *a2, size_t a3, char *a4, unsigned __int8 *a5, unsigned __int8 *a6, _QWORD *a7)
{
  char v14;
  uint64_t v20;
  _QWORD v22[4];
  void (*v23)(uint64_t);
  char v24;
  unsigned __int8 v25[64];
  uint64_t v26;

  v14 = 0;
  v26 = *MEMORY[0x1E0C874D8];
  v24 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v14 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v14 = 1;
    }
  }
  v24 = v14;
  v22[0] = cc_malloc_clear(376 * *(_QWORD *)*a1);
  v22[1] = 47 * *(_QWORD *)*a1;
  v22[2] = 0;
  v22[3] = cc_ws_alloc;
  v23 = cc_ws_free;
  if (v22[0])
  {
    ccdigest((uint64_t)a2, a3, a4, (uint64_t)v25);
    v20 = ccec_verify_composite_digest_ws((uint64_t)v22, a1, *a2, v25, a5, a6, a7);
    v23((uint64_t)v22);
  }
  else
  {
    v20 = 4294967283;
  }
  cc_disable_dit(&v24);
  return v20;
}

uint64_t ccec_diversify_priv_twin(uint64_t *a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4, uint64_t (**a5)(_QWORD, uint64_t, uint64_t *), uint64_t **a6)
{
  char v11;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t pub_from_priv_ws;
  uint64_t v29;
  unint64_t *v30;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t (*v34)(_QWORD *, uint64_t);
  void (*v35)(uint64_t);
  char v36;

  v11 = 0;
  v36 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v11 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v11 = 1;
    }
  }
  v36 = v11;
  v17 = *a1;
  v18 = 26 * *a1;
  v19 = sizeof_struct_ccpolyzp_po2cyc();
  v20 = (v19 + 127) / v19 + 4 * v17 + 3;
  if (v18 > v20)
    v20 = v18;
  v21 = cc_malloc_clear(8 * v20 + 16 * v17);
  v32[0] = v21;
  v22 = *a1;
  v23 = 26 * *a1;
  v24 = sizeof_struct_ccpolyzp_po2cyc();
  v25 = (v24 + 127) / v24 + 4 * v22 + 3;
  if (v23 > v25)
    v25 = v23;
  v32[1] = v25 + 2 * v22;
  v33 = 0;
  v34 = cc_ws_alloc;
  v35 = cc_ws_free;
  if (v21)
  {
    v26 = (char *)cc_ws_alloc(v32, v22);
    v27 = (char *)v34(v32, v22);
    pub_from_priv_ws = ccec_diversify_twin_scalars_ws((uint64_t)v32, a1, v26, v27, a3, a4);
    if (!(_DWORD)pub_from_priv_ws)
    {
      v29 = (uint64_t)&a1[5 * *a1 + 4];
      v30 = (unint64_t *)&a6[3 * **a6 + 2];
      cczp_mul_ws((uint64_t)v32, v29);
      cczp_add_ws((uint64_t)v32, v29);
      pub_from_priv_ws = ccec_make_pub_from_priv_ws((uint64_t)v32, a1, a5, v30, 0, a6);
    }
    v33 = 0;
    v35((uint64_t)v32);
  }
  else
  {
    pub_from_priv_ws = 4294967283;
  }
  cc_disable_dit(&v36);
  return pub_from_priv_ws;
}

uint64_t ccwrap_auth_encrypt(uint64_t a1, uint64_t a2, size_t a3, const void *a4, uint64_t *a5, _QWORD *a6)
{
  char v6;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v6 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v15 = v6;
  v14 = 0xA6A6A6A6A6A6A6A6;
  v12 = ccwrap_auth_encrypt_withiv(a1, a2, a3, a4, a5, a6, &v14);
  cc_disable_dit(&v15);
  return v12;
}

_QWORD *ccn_mulmod_p224(_QWORD *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BOOL1 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  _BOOL8 v57;
  _BOOL8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL8 v62;
  uint64_t v63;
  uint64_t v64;
  _BOOL8 v65;
  uint64_t v66;
  _BOOL8 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BOOL8 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL8 v77;
  uint64_t v78;
  _BOOL8 v79;
  uint64_t v80;
  _BOOL8 v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _BOOL8 v87;
  unint64_t v88;
  _BOOL8 v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unsigned __int128 v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unsigned __int128 v98;
  unint64_t v99;
  _BOOL8 v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unsigned __int128 v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unsigned __int128 v109;
  unint64_t v110;
  _BOOL8 v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unsigned __int128 v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unsigned __int128 v120;
  unint64_t v121;
  _BOOL8 v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unsigned __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *result;

  v4 = *a2;
  v5 = a2[1];
  v3 = a2 + 2;
  v6 = *v3;
  v7 = v3[1];
  v9 = *a3;
  v10 = a3[1];
  v8 = a3 + 2;
  v11 = *v8;
  v12 = v8[1];
  v13 = v4 * v9;
  v14 = (v5 * (unsigned __int128)v9) >> 64;
  v15 = *v3 * v9;
  v16 = (v6 * (unsigned __int128)v9) >> 64;
  v18 = v9;
  v17 = (__PAIR128__(v5, v4) * v9) >> 64;
  v19 = __CFADD__(__CFADD__((v4 * (unsigned __int128)v9) >> 64, v5 * v9), v14);
  v20 = __CFADD__((v4 * (unsigned __int128)v9) >> 64, v5 * v9) + v14;
  v19 |= __CFADD__(v15, v20);
  v20 += v15;
  v21 = (v7 * (unsigned __int128)v9) >> 64;
  v22 = (v7 * (unsigned __int128)v10) >> 64;
  v24 = v19;
  v19 = __CFADD__(v19, v16);
  v23 = v24 + v16;
  v19 |= __CFADD__(v7 * v9, v23);
  v23 += v7 * v9;
  v26 = v19;
  v19 = __CFADD__(v19, v21);
  v25 = v26 + v21;
  v19 |= __CFADD__(v7 * v10, v25);
  v25 += v7 * v10;
  v27 = v7 * *v8;
  v28 = (v7 * (unsigned __int128)v11) >> 64;
  v30 = v19;
  v19 = __CFADD__(v19, v22);
  v29 = v30 + v22;
  v19 |= __CFADD__(v27, v29);
  v29 += v27;
  v32 = v19;
  v19 = __CFADD__(v19, v28);
  v31 = v32 + v28;
  v19 |= __CFADD__(v7 * v12, v31);
  v31 += v7 * v12;
  v33 = v19 + ((v7 * (unsigned __int128)v12) >> 64);
  v34 = (v4 * (unsigned __int128)v10) >> 64;
  v19 = __CFADD__(v17, v4 * v10);
  v35 = (__PAIR128__(v10, v18) * __PAIR128__(v5, v4)) >> 64;
  v37 = v19;
  v19 = __CFADD__(v19, v20);
  v36 = v37 + v20;
  v19 |= __CFADD__(v34, v36);
  v36 += v34;
  v38 = (v6 * (unsigned __int128)v10) >> 64;
  v40 = v19;
  v19 = __CFADD__(v19, v23);
  v39 = v40 + v23;
  v19 |= __CFADD__(v6 * v10, v39);
  v39 += v6 * v10;
  v42 = v19;
  v19 = __CFADD__(v19, v25);
  v41 = v42 + v25;
  v19 |= __CFADD__(v38, v41);
  v41 += v38;
  v43 = (v6 * (unsigned __int128)v12) >> 64;
  v45 = v19;
  v19 = __CFADD__(v19, v29);
  v44 = v45 + v29;
  v19 |= __CFADD__(v6 * v12, v44);
  v44 += v6 * v12;
  v47 = v19;
  v19 = __CFADD__(v19, v31);
  v46 = v47 + v31;
  v19 |= __CFADD__(v43, v46);
  v46 += v43;
  v48 = v19 + v33;
  v49 = (v5 * (unsigned __int128)v10) >> 64;
  v19 = __CFADD__(v36, v5 * v10);
  v50 = v36 + v5 * v10;
  v52 = v19;
  v19 = __CFADD__(v19, v39);
  v51 = v52 + v39;
  v19 |= __CFADD__(v49, v51);
  v51 += v49;
  v53 = (v6 * (unsigned __int128)v11) >> 64;
  v55 = v19;
  v19 = __CFADD__(v19, v41);
  v54 = v55 + v41;
  v19 |= __CFADD__(v6 * v11, v54);
  v54 += v6 * v11;
  v57 = v19;
  v19 = __CFADD__(v19, v44);
  v56 = v57 + v44;
  v19 |= __CFADD__(v53, v56);
  v56 += v53;
  v58 = v19;
  v59 = (v4 * (unsigned __int128)v11) >> 64;
  v19 = __CFADD__(v50, v4 * v11);
  v60 = v50 + v4 * v11;
  v62 = v19;
  v19 = __CFADD__(v19, v51);
  v61 = v62 + v51;
  v19 |= __CFADD__(v59, v61);
  v61 += v59;
  v63 = (v5 * (unsigned __int128)v12) >> 64;
  v65 = v19;
  v19 = __CFADD__(v19, v54);
  v64 = v65 + v54;
  v19 |= __CFADD__(v5 * v12, v64);
  v64 += v5 * v12;
  v67 = v19;
  v19 = __CFADD__(v19, v56);
  v66 = v67 + v56;
  v19 |= __CFADD__(v63, v66);
  v66 += v63;
  v68 = v19 + v58;
  v69 = (v5 * (unsigned __int128)v11) >> 64;
  v19 = __CFADD__(v61, v5 * v11);
  v70 = v61 + v5 * v11;
  v72 = v19;
  v19 = __CFADD__(v19, v64);
  v71 = v72 + v64;
  v19 |= __CFADD__(v69, v71);
  v71 += v69;
  v73 = v19;
  v74 = (v4 * (unsigned __int128)v12) >> 64;
  v19 = __CFADD__(v70, v4 * v12);
  v75 = v70 + v4 * v12;
  v77 = v19;
  v19 = __CFADD__(v19, v71);
  v76 = v77 + v71;
  v19 |= __CFADD__(v74, v76);
  v76 += v74;
  v79 = v19;
  v19 = __CFADD__(v19, v66);
  v78 = v79 + v66;
  v19 |= __CFADD__(v73, v78);
  v78 += v73;
  v81 = v19;
  v19 = __CFADD__(v19, v46);
  v80 = v81 + v46;
  v19 |= __CFADD__(v68, v80);
  v80 += v68;
  v82 = v19 + v48;
  v83 = 0xFFFFFFFF00000000 * v13;
  v84 = (unint64_t)-v13 >> 32;
  v19 = __CFADD__(__CFADD__(v13, -v13), v35);
  v85 = __CFADD__(v13, -v13) + v35;
  v87 = v19;
  v19 = __CFADD__(v19, v60);
  v86 = v87 + v60;
  v89 = v19;
  v19 = __CFADD__(v19, v75);
  v88 = v89 + v75;
  v19 |= __CFADD__(0xFFFFFFFF00000000 * v13, v88);
  v88 += 0xFFFFFFFF00000000 * v13;
  v90 = v19 + v84;
  v19 = v85 >= v83;
  v91 = v85 - v83;
  LOBYTE(v89) = v19;
  v19 = __CFSUB__(v86, v84, v19);
  v92 = v86 - (v84 + !v89);
  v93 = __PAIR128__(v90, v88) - !v19;
  v94 = 0xFFFFFFFF00000000 * v91;
  v95 = (unint64_t)-(uint64_t)v91 >> 32;
  v19 = __CFADD__(__CFADD__(v91, -(uint64_t)v91), v92);
  v98 = __PAIR128__(v93, __CFADD__(v91, -(uint64_t)v91)) + v92;
  v97 = v98 >> 64;
  v96 = v98;
  v100 = __CFADD__(v19, (_QWORD)v93);
  v19 = __CFADD__(v100, v76);
  v99 = v100 + v76;
  v19 |= __CFADD__(0xFFFFFFFF00000000 * v91, v99);
  v99 += 0xFFFFFFFF00000000 * v91;
  v101 = v19 + v95;
  v19 = v96 >= v94;
  v102 = v96 - v94;
  LOBYTE(v100) = v19;
  v19 = __CFSUB__(v97, v95, v19);
  v103 = v97 - (v95 + !v100);
  v104 = __PAIR128__(v101, v99) - !v19;
  v105 = 0xFFFFFFFF00000000 * v102;
  v106 = (unint64_t)-(uint64_t)v102 >> 32;
  v19 = __CFADD__(__CFADD__(v102, -(uint64_t)v102), v103);
  v109 = __PAIR128__(v104, __CFADD__(v102, -(uint64_t)v102)) + v103;
  v108 = v109 >> 64;
  v107 = v109;
  v111 = __CFADD__(v19, (_QWORD)v104);
  v19 = __CFADD__(v111, v78);
  v110 = v111 + v78;
  v19 |= __CFADD__(0xFFFFFFFF00000000 * v102, v110);
  v110 += 0xFFFFFFFF00000000 * v102;
  v112 = v19 + v106;
  v19 = v107 >= v105;
  v113 = v107 - v105;
  LOBYTE(v111) = v19;
  v19 = __CFSUB__(v108, v106, v19);
  v114 = v108 - (v106 + !v111);
  v115 = __PAIR128__(v112, v110) - !v19;
  v116 = 0xFFFFFFFF00000000 * v113;
  v117 = (unint64_t)-(uint64_t)v113 >> 32;
  v19 = __CFADD__(__CFADD__(v113, -(uint64_t)v113), v114);
  v120 = __PAIR128__(v115, __CFADD__(v113, -(uint64_t)v113)) + v114;
  v119 = v120 >> 64;
  v118 = v120;
  v122 = __CFADD__(v19, (_QWORD)v115);
  v19 = __CFADD__(v122, v80);
  v121 = v122 + v80;
  v19 |= __CFADD__(0xFFFFFFFF00000000 * v113, v121);
  v121 += 0xFFFFFFFF00000000 * v113;
  v123 = v19 + v117;
  v19 = v118 >= v116;
  v124 = v118 - v116;
  LOBYTE(v122) = v19;
  v19 = __CFSUB__(v119, v117, v19);
  v125 = v119 - (v117 + !v122);
  v126 = __PAIR128__(v123, v121) - !v19;
  v127 = v126
       + (__CFADD__(__CFADD__(*((_QWORD *)&v93 + 1), v124), *((_QWORD *)&v104 + 1)) | __CFADD__(v125, __CFADD__(*((_QWORD *)&v93 + 1), v124) + *((_QWORD *)&v104 + 1)))
       + *((_QWORD *)&v115 + 1);
  v128 = v82
       + (__CFADD__(__CFADD__(__CFADD__(*((_QWORD *)&v93 + 1), v124), *((_QWORD *)&v104 + 1)) | __CFADD__(v125, __CFADD__(*((_QWORD *)&v93 + 1), v124) + *((_QWORD *)&v104 + 1)), *((_QWORD *)&v115 + 1)) | __CFADD__((_QWORD)v126, (__CFADD__(__CFADD__(*((_QWORD *)&v93 + 1), v124), *((_QWORD *)&v104 + 1)) | __CFADD__(v125, __CFADD__(*((_QWORD *)&v93 + 1), v124) + *((_QWORD *)&v104 + 1)))+ *((_QWORD *)&v115 + 1)))+ *((_QWORD *)&v126 + 1);
  v129 = *((_QWORD *)&v93 + 1) + v124 - 1;
  v130 = v125
       + __CFADD__(*((_QWORD *)&v93 + 1), v124)
       + *((_QWORD *)&v104 + 1)
       - ((*((_QWORD *)&v93 + 1) + v124 == 0)
        - 0x100000000);
  v19 = __CFSUB__(v127, -1, __PAIR128__(v125 + (unint64_t)__CFADD__(*((_QWORD *)&v93 + 1), v124) + *((_QWORD *)&v104 + 1), *((_QWORD *)&v93 + 1) + v124) >= __PAIR128__(0xFFFFFFFF00000000, 1));
  v131 = v127
       - ((__PAIR128__(v125 + (unint64_t)__CFADD__(*((_QWORD *)&v93 + 1), v124) + *((_QWORD *)&v104 + 1), *((_QWORD *)&v93 + 1) + v124) < __PAIR128__(0xFFFFFFFF00000000, 1))- 1);
  LOBYTE(v122) = v19;
  v19 = __CFSUB__(v128, 0xFFFFFFFFLL, v19);
  v132 = v128 - (!v122 + 0xFFFFFFFFLL);
  v133 = 1 - !v19;
  v134 = 1 - !v19;
  v19 = __CFADD__(__CFADD__(v129, v133 >> 63), v130);
  v135 = __CFADD__(v129, v133 >> 63) + v130;
  v137 = v19 | __CFADD__(v133 & 0xFFFFFFFF00000000, v135);
  v19 = __CFADD__(v137, v131);
  v136 = v137 + v131;
  *a1 = v129 + (v133 >> 63);
  a1[1] = (v133 & 0xFFFFFFFF00000000) + v135;
  result = a1 + 2;
  *result = v133 + v136;
  result[1] = v134 + (v19 | __CFADD__(v133, v136)) + v132;
  return result;
}

uint64_t ccdes_cbc_cksum(unsigned int *a1, _DWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6)
{
  char v10;
  uint64_t *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  char v24;
  unsigned int v25[2];
  _OWORD __s[16];
  _QWORD v27[2];

  v10 = 0;
  v27[1] = *MEMORY[0x1E0C874D8];
  v24 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v24 = v10;
  v27[0] = 0;
  if (ccdes_ltc_setup(0, __s, a5, a4))
  {
    v27[0] = 0xAAAAAAAAAAAAAAAALL;
    v16 = ccrng(0);
    if (v16)
      ((void (*)(uint64_t *, uint64_t, _QWORD *))*v16)(v16, 8, v27);
  }
  else
  {
    v17 = bswap32(*a6);
    v18 = bswap32(a6[1]);
    if (a3 >= 8)
    {
      do
      {
        v19 = *a1;
        v20 = a1[1];
        a1 += 2;
        LODWORD(v27[0]) = bswap32(v19) ^ v17;
        HIDWORD(v27[0]) = bswap32(v20) ^ v18;
        desfunc((unsigned int *)v27, (uint64_t)__s);
        v17 = v27[0];
        v18 = HIDWORD(v27[0]);
        a3 -= 8;
      }
      while (a3 > 7);
    }
    if (a3)
    {
      __memcpy_chk();
      cc_clear(8 - a3, (char *)v25 + a3);
      LODWORD(v27[0]) = bswap32(v25[0]) ^ v17;
      HIDWORD(v27[0]) = bswap32(v25[1]) ^ v18;
      desfunc((unsigned int *)v27, (uint64_t)__s);
    }
  }
  if (a2)
  {
    v21 = bswap32(HIDWORD(v27[0]));
    *a2 = bswap32(v27[0]);
    a2[1] = v21;
  }
  LODWORD(v27[0]) = 0;
  cc_clear(0x100uLL, __s);
  v22 = HIDWORD(v27[0]);
  cc_disable_dit(&v24);
  return v22;
}

uint64_t cckyber_sample_ntt(unsigned int *a1, char *a2, char a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  unsigned int v10;
  char *v11;
  unsigned int v12;
  unint64_t i;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  _BYTE v25[3];
  unsigned int __s[96];
  char __dst[2];
  _BYTE v28[182];

  *(_QWORD *)&v28[166] = *MEMORY[0x1E0C874D8];
  v8 = ccshake128_xi();
  if (*a1)
  {
    v9 = v8;
    v10 = 0;
    v11 = &v25[a3 & 1];
    do
    {
      v12 = 0;
      do
      {
        ccxof_init((uint64_t)v9, __s);
        ccxof_absorb(v9, (char *)__s, 0x20uLL, a2);
        v25[0] = v12;
        v25[1] = v10;
        v25[2] = v12;
        ccxof_absorb(v9, (char *)__s, 2uLL, v11);
        for (i = 0; i < 0x100; i += v15)
        {
          ccxof_squeeze(v9, __s, 0xA8uLL, __dst);
          v14 = 0;
          v15 = 0;
          v16 = 256 - i;
          v17 = *a1;
          v18 = a4 + 2 * ((v12 + *a1 * v10) << 8) + 2 * i;
          v19 = v28;
          do
          {
            v20 = *(v19 - 1);
            v21 = *(v19 - 2) | ((v20 & 0xF) << 8);
            v22 = *v19;
            if (v21 <= 0xD00)
              *(_WORD *)(v18 + 2 * v15++) = v21;
            if (v15 < v16)
            {
              v23 = (v20 >> 4) | (16 * v22);
              if (v23 <= 0xD00)
                *(_WORD *)(v18 + 2 * v15++) = v23;
            }
            if (v14 > 0x36)
              break;
            v19 += 3;
            ++v14;
          }
          while (v15 < v16);
        }
        ++v12;
      }
      while (v12 < v17);
      ++v10;
    }
    while (v10 < v17);
  }
  return cc_clear(0x178uLL, __s);
}

uint64_t cckyber_sample_cbd_eta2(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int8x16_t v3;
  int64x2_t v4;
  int8x16_t v5;
  uint64_t v6;
  uint64x2_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;

  v2 = 0;
  v3 = (int8x16_t)vdupq_n_s64(2uLL);
  v4 = vdupq_n_s64(8uLL);
  v5.i64[0] = 0x3000300030003;
  v5.i64[1] = 0x3000300030003;
  do
  {
    v6 = 0;
    v7 = (uint64x2_t)vdupq_n_s64(((*(_QWORD *)(a2 + 8 * v2) >> 1) & 0x5555555555555555)+ (*(_QWORD *)(a2 + 8 * v2) & 0x5555555555555555uLL));
    v8 = (int64x2_t)xmmword_1DEE1D020;
    v9 = (int64x2_t)xmmword_1DEE27F80;
    v10 = (int64x2_t)xmmword_1DEE27F70;
    v11 = (int64x2_t)xmmword_1DEE27F60;
    do
    {
      v12 = vshlq_n_s64(v9, 2uLL);
      v13 = vshlq_n_s64(v8, 2uLL);
      v14 = vshlq_n_s64(v11, 2uLL);
      v15 = vshlq_n_s64(v10, 2uLL);
      *(int16x8_t *)(result + v6) = vsubq_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v7, (uint64x2_t)vnegq_s64(v13)), (int32x4_t)vshlq_u64(v7, (uint64x2_t)vnegq_s64(v12))), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v7, (uint64x2_t)vnegq_s64(v15)), (int32x4_t)vshlq_u64(v7, (uint64x2_t)vnegq_s64(v14)))), v5), (int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16(
                                                                (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v7, (uint64x2_t)vnegq_s64((int64x2_t)vorrq_s8((int8x16_t)v13, v3))), (int32x4_t)vshlq_u64(v7, (uint64x2_t)vnegq_s64((int64x2_t)vorrq_s8((int8x16_t)v12, v3)))), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v7, (uint64x2_t)vnegq_s64((int64x2_t)vorrq_s8((int8x16_t)v15, v3))), (int32x4_t)vshlq_u64(v7, (uint64x2_t)vnegq_s64((int64x2_t)vorrq_s8((int8x16_t)v14, v3))))), v5));
      v10 = vaddq_s64(v10, v4);
      v9 = vaddq_s64(v9, v4);
      v8 = vaddq_s64(v8, v4);
      v11 = vaddq_s64(v11, v4);
      v6 += 16;
    }
    while (v6 != 32);
    ++v2;
    result += 32;
  }
  while (v2 != 16);
  return result;
}

uint64_t ccec_twin_mult(uint64_t *a1, char *a2, unint64_t *a3, uint64_t a4, unint64_t *a5, char *a6)
{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];
  void (*v17)(uint64_t);

  v12 = cc_malloc_clear(264 * *a1);
  v13 = 33 * *a1;
  v16[0] = v12;
  v16[1] = v13;
  v16[2] = 0;
  v16[3] = cc_ws_alloc;
  v17 = cc_ws_free;
  if (!v12)
    return 4294967283;
  v14 = ccec_twin_mult_ws((uint64_t)v16, a1, a2, a3, a4, a5, a6);
  v17((uint64_t)v16);
  return v14;
}

uint64_t cch2c_ws(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    return cch2c_encode_to_curve_ws(a1, a2);
  else
    return 4294967289;
}

uint64_t cch2c(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v19[4];
  void (*v20)(uint64_t);
  char v21;

  v4 = 0;
  v21 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v21 = v4;
  v10 = (uint64_t *)(*(uint64_t (**)(void))(a1 + 16))();
  v11 = *v10;
  v12 = sizeof_struct_cche_galois_key();
  v13 = sizeof_struct_ccpolyzp_po2cyc();
  v19[0] = cc_malloc_clear(144 * v11 + 16 * ((v12 + v13 + 3 * v11 * v13 - 1) / v13 + v11));
  v14 = *v10;
  v15 = sizeof_struct_cche_galois_key();
  v16 = sizeof_struct_ccpolyzp_po2cyc();
  v19[1] = 18 * v14 + 2 * ((v15 + v16 + 3 * v14 * v16 - 1) / v16 + v14);
  v19[2] = 0;
  v19[3] = cc_ws_alloc;
  v20 = cc_ws_free;
  if (v19[0])
  {
    if (a2)
    {
      v17 = cch2c_encode_to_curve_ws((uint64_t)v19, a1);
      v20((uint64_t)v19);
    }
    else
    {
      v17 = 4294967289;
      cc_ws_free((uint64_t)v19);
    }
  }
  else
  {
    v17 = 4294967283;
  }
  cc_disable_dit(&v21);
  return v17;
}

uint64_t cch2c_name(uint64_t *a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *a1;
  cc_disable_dit(&v9);
  return v7;
}

uint64_t clear_cofactor_nop()
{
  return 0;
}

double deskey(uint64_t a1, int a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t j;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t k;
  uint64_t v16;
  const float *v17;
  uint32x2_t v18;
  int8x8_t v19;
  int8x8_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  double result;
  __int128 v25;
  _BYTE v26[240];
  _OWORD v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v3 = 0;
  v34 = *MEMORY[0x1E0C874D8];
  do
  {
    v26[v3 + 56] = (bytebit[pc1[v3] & 7] & ~*(unsigned __int8 *)(a1 + ((unint64_t)pc1[v3] >> 3))) == 0;
    ++v3;
  }
  while (v3 != 56);
  for (i = 0; i != 16; ++i)
  {
    v5 = 0;
    if (a2 == 1)
      v6 = 15 - i;
    else
      v6 = i;
    v7 = (2 * v6) | 1u;
    v8 = &v26[8 * v6 + 112];
    *v8 = 0;
    v9 = totrot[i];
    do
    {
      v10 = v9 + v5;
      if ((unint64_t)(v9 + v5) >= 0x1C)
        v10 = (v9 - 28 + v5);
      v26[v5++] = v26[v10 + 56];
    }
    while (v5 != 28);
    for (j = 0; j != 28; ++j)
    {
      v12 = v9 + j;
      if ((unint64_t)(v9 + j + 28) < 0x38)
        v12 = v9 + j + 28;
      v26[j + 28] = v26[v12 + 56];
    }
    v13 = 0;
    v14 = 0;
    for (k = 0; k != 24; ++k)
    {
      if (v26[pc2[k]])
      {
        v14 |= bigbyte[k];
        *(_DWORD *)v8 = v14;
      }
      if (v26[pc2[k + 24]])
      {
        v13 |= bigbyte[k];
        *(_DWORD *)&v26[4 * v7 + 112] = v13;
      }
    }
  }
  v16 = 0;
  do
  {
    v17 = (const float *)&v26[v16 + 112];
    v18 = (uint32x2_t)vld1_dup_f32(v17++);
    *(float *)&v17 = *v17;
    v19 = (int8x8_t)vdup_n_s32(v17);
    v20 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)v19, (uint32x2_t)0xFFFFFFFCFFFFFFFALL), (int8x8_t)0x3F000000003FLL);
    v19.i32[0] = v17 >> 10;
    *(int8x8_t *)((char *)v27 + v16) = vorr_s8(vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_u32(v18, (uint32x2_t)0xC0000000ALL), (int8x8_t)0x3F000000003F0000), vand_s8((int8x8_t)vshl_u32(v18, (uint32x2_t)0x1000000006), (int8x8_t)0x3F00003F000000)), v20), vand_s8(v19, (int8x8_t)0x3F00003F00));
    v16 += 8;
  }
  while ((_DWORD)v16 != 128);
  v21 = v31;
  a3[4] = v30;
  a3[5] = v21;
  v22 = v33;
  a3[6] = v32;
  a3[7] = v22;
  v23 = v27[1];
  *a3 = v27[0];
  a3[1] = v23;
  result = *(double *)&v28;
  v25 = v29;
  a3[2] = v28;
  a3[3] = v25;
  return result;
}

unsigned int *desfunc(unsigned int *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;

  v2 = 0;
  v3 = result[1];
  v4 = (v3 ^ (*result >> 4)) & 0xF0F0F0F;
  v5 = v4 ^ v3;
  v6 = *result ^ (16 * v4);
  v7 = (unsigned __int16)v5 ^ HIWORD(v6);
  v8 = v7 ^ v5;
  v9 = v6 ^ (v7 << 16);
  v10 = (v9 ^ (v8 >> 2)) & 0x33333333;
  v11 = v10 ^ v9;
  v12 = v8 ^ (4 * v10);
  v13 = (v11 ^ (v12 >> 8)) & 0xFF00FF;
  v14 = v13 ^ v11;
  v15 = __ROR4__(v12 ^ (v13 << 8), 31);
  v16 = (v14 ^ v15) & 0xAAAAAAAA;
  v17 = v16 ^ v15;
  HIDWORD(v19) = v16 ^ v14;
  LODWORD(v19) = v16 ^ v14;
  v18 = v19 >> 31;
  do
  {
    v20 = *(_DWORD *)(a2 + v2) ^ __ROR4__(v17, 4);
    v21 = *(_DWORD *)(a2 + v2 + 4) ^ v17;
    v18 ^= SP7[v20 & 0x3F] ^ SP5[(v20 >> 8) & 0x3F] ^ SP3[HIWORD(v20) & 0x3F] ^ SP1[HIBYTE(v20) & 0x3F] ^ SP8[v21 & 0x3F] ^ SP6[(v21 >> 8) & 0x3F] ^ SP4[HIWORD(v21) & 0x3F] ^ SP2[HIBYTE(v21) & 0x3F];
    v22 = *(_DWORD *)(a2 + v2 + 8) ^ __ROR4__(v18, 4);
    v23 = *(_DWORD *)(a2 + v2 + 12) ^ v18;
    v17 ^= SP7[v22 & 0x3F] ^ SP5[(v22 >> 8) & 0x3F] ^ SP3[HIWORD(v22) & 0x3F] ^ SP1[HIBYTE(v22) & 0x3F] ^ SP8[v23 & 0x3F] ^ SP6[(v23 >> 8) & 0x3F] ^ SP4[HIWORD(v23) & 0x3F] ^ SP2[HIBYTE(v23) & 0x3F];
    v2 += 16;
  }
  while ((_DWORD)v2 != 128);
  v24 = (v18 ^ __ROR4__(v17, 1)) & 0xAAAAAAAA;
  v25 = v24 ^ v18;
  v27 = __PAIR64__(v24 ^ v18, __ROR4__(v17, 1));
  v26 = v24 ^ v27;
  LODWORD(v27) = v25;
  v28 = (v26 ^ ((v27 >> 1) >> 8)) & 0xFF00FF;
  v29 = v28 ^ v26;
  v30 = (v28 << 8) ^ __ROR4__(v25, 1);
  v31 = (v29 ^ (v30 >> 2)) & 0x33333333;
  v32 = v31 ^ v29;
  v33 = v30 ^ (4 * v31);
  v34 = (unsigned __int16)v33 ^ HIWORD(v32);
  v35 = v34 ^ v33;
  v36 = v32 ^ (v34 << 16);
  v37 = (v35 ^ (v36 >> 4)) & 0xF0F0F0F;
  *result = v36 ^ (16 * v37);
  result[1] = v37 ^ v35;
  return result;
}

unsigned int *desfunc3(unsigned int *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unint64_t v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;

  v2 = 0;
  v3 = result[1];
  v4 = (v3 ^ (*result >> 4)) & 0xF0F0F0F;
  v5 = v4 ^ v3;
  v6 = *result ^ (16 * v4);
  v7 = (unsigned __int16)v5 ^ HIWORD(v6);
  v8 = v7 ^ v5;
  v9 = v6 ^ (v7 << 16);
  v10 = (v9 ^ (v8 >> 2)) & 0x33333333;
  v11 = v10 ^ v9;
  v12 = v8 ^ (4 * v10);
  v13 = (v11 ^ (v12 >> 8)) & 0xFF00FF;
  v14 = v13 ^ v11;
  v15 = __ROR4__(v12 ^ (v13 << 8), 31);
  v16 = (v14 ^ v15) & 0xAAAAAAAA;
  v17 = v16 ^ v15;
  HIDWORD(v19) = v16 ^ v14;
  LODWORD(v19) = v16 ^ v14;
  v18 = v19 >> 31;
  do
  {
    v20 = *(_DWORD *)(a2 + v2) ^ __ROR4__(v17, 4);
    v21 = *(_DWORD *)(a2 + v2 + 4) ^ v17;
    v18 ^= SP7[v20 & 0x3F] ^ SP5[(v20 >> 8) & 0x3F] ^ SP3[HIWORD(v20) & 0x3F] ^ SP1[HIBYTE(v20) & 0x3F] ^ SP8[v21 & 0x3F] ^ SP6[(v21 >> 8) & 0x3F] ^ SP4[HIWORD(v21) & 0x3F] ^ SP2[HIBYTE(v21) & 0x3F];
    v22 = *(_DWORD *)(a2 + v2 + 8) ^ __ROR4__(v18, 4);
    v23 = *(_DWORD *)(a2 + v2 + 12) ^ v18;
    v17 ^= SP7[v22 & 0x3F] ^ SP5[(v22 >> 8) & 0x3F] ^ SP3[HIWORD(v22) & 0x3F] ^ SP1[HIBYTE(v22) & 0x3F] ^ SP8[v23 & 0x3F] ^ SP6[(v23 >> 8) & 0x3F] ^ SP4[HIWORD(v23) & 0x3F] ^ SP2[HIBYTE(v23) & 0x3F];
    v2 += 16;
  }
  while ((_DWORD)v2 != 128);
  v24 = 0;
  v25 = a2 + 128;
  do
  {
    v26 = *(_DWORD *)(v25 + v24) ^ __ROR4__(v18, 4);
    v27 = *(_DWORD *)(v25 + v24 + 4) ^ v18;
    v17 ^= SP7[v26 & 0x3F] ^ SP5[(v26 >> 8) & 0x3F] ^ SP3[HIWORD(v26) & 0x3F] ^ SP1[HIBYTE(v26) & 0x3F] ^ SP8[v27 & 0x3F] ^ SP6[(v27 >> 8) & 0x3F] ^ SP4[HIWORD(v27) & 0x3F] ^ SP2[HIBYTE(v27) & 0x3F];
    v28 = *(_DWORD *)(v25 + v24 + 8) ^ __ROR4__(v17, 4);
    v29 = *(_DWORD *)(v25 + v24 + 12) ^ v17;
    v18 ^= SP7[v28 & 0x3F] ^ SP5[(v28 >> 8) & 0x3F] ^ SP3[HIWORD(v28) & 0x3F] ^ SP1[HIBYTE(v28) & 0x3F] ^ SP8[v29 & 0x3F] ^ SP6[(v29 >> 8) & 0x3F] ^ SP4[HIWORD(v29) & 0x3F] ^ SP2[HIBYTE(v29) & 0x3F];
    v24 += 16;
  }
  while ((_DWORD)v24 != 128);
  v30 = 0;
  v31 = a2 + 256;
  do
  {
    v32 = *(_DWORD *)(v31 + v30) ^ __ROR4__(v17, 4);
    v33 = *(_DWORD *)(v31 + v30 + 4) ^ v17;
    v18 ^= SP7[v32 & 0x3F] ^ SP5[(v32 >> 8) & 0x3F] ^ SP3[HIWORD(v32) & 0x3F] ^ SP1[HIBYTE(v32) & 0x3F] ^ SP8[v33 & 0x3F] ^ SP6[(v33 >> 8) & 0x3F] ^ SP4[HIWORD(v33) & 0x3F] ^ SP2[HIBYTE(v33) & 0x3F];
    v34 = *(_DWORD *)(v31 + v30 + 8) ^ __ROR4__(v18, 4);
    v35 = *(_DWORD *)(v31 + v30 + 12) ^ v18;
    v17 ^= SP7[v34 & 0x3F] ^ SP5[(v34 >> 8) & 0x3F] ^ SP3[HIWORD(v34) & 0x3F] ^ SP1[HIBYTE(v34) & 0x3F] ^ SP8[v35 & 0x3F] ^ SP6[(v35 >> 8) & 0x3F] ^ SP4[HIWORD(v35) & 0x3F] ^ SP2[HIBYTE(v35) & 0x3F];
    v30 += 16;
  }
  while ((_DWORD)v30 != 128);
  v36 = (v18 ^ __ROR4__(v17, 1)) & 0xAAAAAAAA;
  v38 = __PAIR64__(v36 ^ v18, __ROR4__(v17, 1));
  v37 = v36 ^ v38;
  LODWORD(v38) = v36 ^ v18;
  v39 = (v37 ^ ((v38 >> 1) >> 8)) & 0xFF00FF;
  v40 = v39 ^ v37;
  v41 = (v39 << 8) ^ __ROR4__(v36 ^ v18, 1);
  v42 = (v40 ^ (v41 >> 2)) & 0x33333333;
  v43 = v42 ^ v40;
  v44 = v41 ^ (4 * v42);
  v45 = (unsigned __int16)v44 ^ HIWORD(v43);
  v46 = v45 ^ v44;
  v47 = v43 ^ (v45 << 16);
  v48 = (v46 ^ (v47 >> 4)) & 0xF0F0F0F;
  *result = v47 ^ (16 * v48);
  result[1] = v48 ^ v46;
  return result;
}

uint64_t ccblowfish_ltc_ecb_decrypt(_DWORD *a1, uint64_t a2, unsigned int *a3, _BYTE *a4)
{
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;
  unint64_t i;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  for (; a2; --a2)
  {
    v4 = a1[1041] ^ bswap32(*a3);
    v5 = bswap32(a3[1]) ^ a1[1040];
    v6 = a1 + 1039;
    for (i = 19; i > 4; i -= 4)
    {
      v8 = (((a1[BYTE2(v4) + 256] + a1[HIBYTE(v4)]) ^ a1[BYTE1(v4) + 512]) + a1[v4 + 768]) ^ v5;
      v9 = *v6 ^ v4 ^ (((a1[BYTE2(v8) + 256] + a1[HIBYTE(v8)]) ^ a1[BYTE1(v8) + 512]) + a1[v8 + 768]);
      v10 = *(v6 - 1) ^ v8 ^ (((a1[BYTE2(v9) + 256] + a1[HIBYTE(v9)]) ^ a1[BYTE1(v9) + 512])
                            + a1[v9 + 768]);
      v4 = *(v6 - 2) ^ v9 ^ (((a1[BYTE2(v10) + 256] + a1[HIBYTE(v10)]) ^ a1[BYTE1(v10) + 512])
                           + a1[v10 + 768]);
      v5 = *(v6 - 3) ^ v10;
      v6 -= 4;
    }
    *a4 = HIBYTE(v5);
    a4[1] = BYTE2(v5);
    a4[2] = BYTE1(v5);
    a4[3] = v5;
    a4[4] = HIBYTE(v4);
    a4[5] = BYTE2(v4);
    a4[6] = BYTE1(v4);
    a4[7] = v4;
    a4 += 8;
    a3 += 2;
  }
  return 0;
}

uint64_t ccmode_cbc_decrypt(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t i;
  unint64_t v12;
  char v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE v17[16];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C874D8];
  v5 = a1 + 1;
  v6 = *a1;
  if (*(_QWORD *)(*a1 + 8) > 0x10uLL)
    return 4294967289;
  for (i = a3; i; a5 += v16)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t, _BYTE *))(v6 + 24))(v5, 1, a4, v17);
    if (*(_QWORD *)(v6 + 8))
    {
      v12 = 0;
      do
      {
        v13 = *(_BYTE *)(a2 + v12);
        v14 = v17[v12];
        *(_BYTE *)(a2 + v12) = *(_BYTE *)(a4 + v12);
        *(_BYTE *)(a5 + v12++) = v14 ^ v13;
        v15 = *(_QWORD *)(v6 + 8);
      }
      while (v12 < v15);
    }
    else
    {
      v15 = 0;
    }
    if (--i)
      v16 = v15;
    else
      v16 = 0;
    a4 += v16;
  }
  return 0;
}

void *ccrc2_ecb_decrypt_mode()
{
  return &ccrc2_ltc_ecb_decrypt_mode;
}

void *ccrc2_ecb_encrypt_mode()
{
  return &ccrc2_ltc_ecb_encrypt_mode;
}

_QWORD *ccrc2_cbc_encrypt_mode()
{
  ccmode_factory_cbc_encrypt(cbc_rc2_encrypt, ccrc2_ltc_ecb_encrypt_mode);
  return cbc_rc2_encrypt;
}

_QWORD *ccrc2_cbc_decrypt_mode()
{
  ccmode_factory_cbc_decrypt(cbc_rc2_decrypt, ccrc2_ltc_ecb_decrypt_mode);
  return cbc_rc2_decrypt;
}

_QWORD *ccrc2_cfb_encrypt_mode()
{
  ccmode_factory_cfb_encrypt(cfb_rc2_encrypt, ccrc2_ltc_ecb_encrypt_mode);
  return cfb_rc2_encrypt;
}

_QWORD *ccrc2_cfb_decrypt_mode()
{
  ccmode_factory_cfb_decrypt(cfb_rc2_decrypt, ccrc2_ltc_ecb_encrypt_mode);
  return cfb_rc2_decrypt;
}

_QWORD *ccrc2_cfb8_encrypt_mode()
{
  ccmode_factory_cfb8_encrypt(cfb8_rc2_encrypt, ccrc2_ltc_ecb_encrypt_mode);
  return cfb8_rc2_encrypt;
}

_QWORD *ccrc2_cfb8_decrypt_mode()
{
  ccmode_factory_cfb8_decrypt(cfb8_rc2_decrypt, ccrc2_ltc_ecb_encrypt_mode);
  return cfb8_rc2_decrypt;
}

_QWORD *ccrc2_ctr_crypt_mode()
{
  ccmode_factory_ctr_crypt(ctr_rc2, ccrc2_ltc_ecb_encrypt_mode);
  return ctr_rc2;
}

_QWORD *ccrc2_ofb_crypt_mode()
{
  ccmode_factory_ofb_crypt(ofb_rc2, ccrc2_ltc_ecb_encrypt_mode);
  return ofb_rc2;
}

int8x16_t *ccmode_xts_crypt(uint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  int8x16_t *v6;
  uint64_t v7;
  _QWORD *v10;
  uint64_t v11;

  v5 = *a2 + a3;
  if (v5 > 0x100000)
    return 0;
  v7 = a3;
  *a2 = v5;
  v6 = (int8x16_t *)(a2 + 1);
  if (a3)
  {
    v10 = a1 + 2;
    v11 = *a1;
    do
    {
      ccn_xor(2, a5, a4, (uint64_t)v6);
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v11 + 24))(v10, 1, a5, a5);
      ccn_xor(2, a5, a5, (uint64_t)v6);
      ccmode_xts_mult_alpha(v6);
      a4 += 16;
      a5 += 16;
      --v7;
    }
    while (v7);
  }
  return v6;
}

void *ccshake128_xi()
{
  if ((MEMORY[0xFFFFFC010] & 0x100000000) != 0)
    return &ccxof_shake128_vng_arm64_hwassist_xi;
  else
    return &ccxof_shake128_vng_xi;
}

uint64_t ccshake128_vng_arm64_hwassist_absorb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return cckeccak_absorb_blocks(a2, *(_QWORD *)(a1 + 8), a3, a4, (uint64_t (*)(_QWORD *))AccelerateCrypto_SHA3_keccak_hwassist);
}

uint64_t ccshake128_vng_arm64_hwassist_absorb_last(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  return cckeccak_absorb_and_pad(a2, *(_QWORD *)(a1 + 8), a3, a4, 0x1Fu, (uint64_t (*)(_QWORD *))AccelerateCrypto_SHA3_keccak_hwassist);
}

uint64_t ccshake128_vng_arm64_hwassist_squeeze(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  return cckeccak_squeeze(a2, *(_QWORD *)(a1 + 8), a3, a4, (uint64_t (*)(uint64_t *))AccelerateCrypto_SHA3_keccak_hwassist);
}

uint64_t ccshake128_vng_absorb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return cckeccak_absorb_blocks(a2, *(_QWORD *)(a1 + 8), a3, a4, AccelerateCrypto_SHA3_keccak);
}

uint64_t ccshake128_vng_absorb_last(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  return cckeccak_absorb_and_pad(a2, *(_QWORD *)(a1 + 8), a3, a4, 0x1Fu, AccelerateCrypto_SHA3_keccak);
}

uint64_t ccshake128_vng_squeeze(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  return cckeccak_squeeze(a2, *(_QWORD *)(a1 + 8), a3, a4, AccelerateCrypto_SHA3_keccak);
}

uint64_t ccec_make_priv(uint64_t a1, unint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned __int8 *a5, unint64_t a6, unsigned __int8 *a7, unint64_t **a8)
{
  char v15;
  unint64_t *cp;
  _QWORD *v22;
  uint64_t uint;
  char v25;

  v15 = 0;
  v25 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v15 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v15 = 1;
    }
  }
  v25 = v15;
  cp = (unint64_t *)ccec_get_cp(a1);
  *a8 = cp;
  v22 = a8 + 2;
  uint = ccn_read_uint(*cp, a8 + 2, a2, a3);
  if (!(_DWORD)uint)
  {
    uint = ccn_read_uint(*cp, &v22[**a8], a4, a5);
    if (!(_DWORD)uint)
    {
      uint = ccn_read_uint(*cp, &v22[3 * **a8], a6, a7);
      if (!(_DWORD)uint)
        ccn_seti(*cp, &v22[2 * **a8], 1);
    }
  }
  cc_disable_dit(&v25);
  return uint;
}

uint64_t ccec_generate_scalar_legacy_ws(uint64_t a1, uint64_t *a2, size_t a3, void *__src, void *__dst)
{
  uint64_t v6;
  uint64_t *v7;
  size_t v8;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t *v16;
  BOOL v17;
  uint64_t result;

  v7 = a2 + 4;
  v6 = *a2;
  v8 = 8 * *a2;
  if (v8 > a3)
    return 4294967276;
  v12 = (uint64_t)&v7[5 * v6];
  memcpy(__dst, __src, v8);
  v13 = cczp_bitlen((uint64_t)&v7[5 * *a2]);
  if ((v13 & 0x3F) != 0)
    *((_QWORD *)__dst + v6 - 1) &= 0xFFFFFFFFFFFFFFFFLL >> -(v13 & 0x3F);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  v16 = (unint64_t *)cczp_prime(v12);
  v17 = ccn_sub_ws(a1, v6, v15, (uint64_t *)__dst, v16);
  ccn_mux(v6, !v17, (uint64_t *)__dst, v15, (uint64_t *)__dst);
  result = 0;
  *(_QWORD *)(a1 + 16) = v14;
  return result;
}

uint64_t ccsrp_generate_M_ws(uint64_t a1, size_t **a2, char *a3, size_t a4, char *a5, unint64_t *a6, unint64_t *a7)
{
  size_t *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t *v17;
  unint64_t *v18;
  size_t v19;
  size_t v20;
  size_t session_key_length;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  size_t v25;
  char *v26;
  unint64_t *v27;
  unint64_t *v28;
  uint64_t v29;
  size_t *v30;
  char v31[64];
  char v32[64];
  _BYTE v33[64];
  _BYTE __s[64];
  uint64_t v35;

  v27 = a6;
  v28 = a7;
  v25 = a4;
  v26 = a5;
  v30 = &v25;
  v35 = *MEMORY[0x1E0C874D8];
  v10 = *a2;
  v11 = **a2;
  v12 = MEMORY[0x1E0C86820](a1, a2, a3, a4);
  v14 = (size_t *)((char *)&v25 - v13);
  v16 = (*(_DWORD *)(v15 + 24) >> 10) & 1;
  v29 = *(_QWORD *)(v12 + 16);
  v17 = (unint64_t *)ccdh_gp_prime(*(_QWORD *)(v15 + 8));
  ccsrp_digest_ccn_ws(a1, (uint64_t *)a2, v17, (uint64_t)__s, v16);
  v18 = (unint64_t *)ccdh_gp_g(a2[1]);
  ccsrp_digest_ccn_ws(a1, (uint64_t *)a2, v18, (uint64_t)v33, v16);
  if (v11)
  {
    v19 = v11;
    do
    {
      v31[v19 - 1] = v32[v19 + 63] ^ v33[v19 + 63];
      --v19;
    }
    while (v19);
  }
  v20 = strlen(a3);
  ccdigest((uint64_t)v10, v20, a3, (uint64_t)v32);
  ccdigest_init((uint64_t)v10, v14);
  ccdigest_update((uint64_t)v10, v14, v11, v31);
  ccdigest_update((uint64_t)v10, v14, v11, v32);
  ccdigest_update((uint64_t)v10, v14, v25, v26);
  ccsrp_digest_update_ccn_ws(a1, (uint64_t *)a2, v14, v27, v16);
  ccsrp_digest_update_ccn_ws(a1, (uint64_t *)a2, v14, v28, v16);
  session_key_length = ccsrp_get_session_key_length((uint64_t *)a2);
  v22 = ccdh_gp_n(a2[1]);
  ccdigest_update((uint64_t)v10, v14, session_key_length, (char *)&a2[4 * v22 + 4]);
  v23 = ccdh_gp_n(a2[1]);
  ((void (*)(size_t *, _QWORD *, size_t))v10[7])(v10, v14, (uint64_t)&a2[4 * v23 + 4] + 2 * **a2);
  cc_clear(v10[1] + v10[2] + 12, v14);
  cc_clear(0x40uLL, __s);
  cc_clear(0x40uLL, v33);
  cc_clear(0x40uLL, v31);
  result = cc_clear(0x40uLL, v32);
  *(_QWORD *)(a1 + 16) = v29;
  return result;
}

void *ccaes_siv_hmac_sha256_decrypt_mode()
{
  void *v0;
  uint64_t *v1;

  v0 = ccsha256_di();
  v1 = ccaes_ctr_crypt_mode();
  ccmode_factory_siv_hmac_decrypt((uint64_t)&siv_hmac_decrypt, (uint64_t)v0, (uint64_t)v1);
  return &siv_hmac_decrypt;
}

uint64_t pgp_key_checksum(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int16 i;
  __int16 v3;

  for (i = 0; a1; --a1)
  {
    v3 = *a2++;
    i += v3;
  }
  return i;
}

uint64_t cccurve448_internal(uint64_t a1, char *a2, uint64_t a3, uint64_t *a4, uint64_t (**a5)(_QWORD, unint64_t, uint64_t))
{
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t non_zero_element_ws;
  __int128 v16;
  uint64_t i;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char v27;
  unint64_t j;
  char v29;
  uint64_t *v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  char *v38;
  uint64_t v39;
  _QWORD *__src;
  void *v41;
  __int128 v42;
  uint64_t (*v43)(void **, uint64_t);
  void (*v44)(uint64_t);
  uint64_t v45;
  _OWORD v46[3];
  uint64_t v47;
  _OWORD __s[3];
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C874D8];
  v41 = cc_malloc_clear(0x380uLL);
  v42 = xmmword_1DEE288C0;
  v43 = (uint64_t (*)(void **, uint64_t))cc_ws_alloc;
  v44 = cc_ws_free;
  if (!v41)
    return 4294967283;
  v38 = a2;
  v10 = cczp_n(a1);
  v11 = (char *)cc_ws_alloc(&v41, v10);
  v12 = (void *)v43(&v41, v10);
  v39 = v43(&v41, v10);
  __src = (_QWORD *)v43(&v41, v10);
  v13 = v43(&v41, v10);
  v14 = v43(&v41, v10);
  non_zero_element_ws = cczp_generate_non_zero_element_ws((uint64_t)&v41, a1, a5, v11);
  if ((_DWORD)non_zero_element_ws
    || (non_zero_element_ws = cczp_generate_non_zero_element_ws((uint64_t)&v41, a1, a5, (char *)v12),
        (_DWORD)non_zero_element_ws))
  {
    v21 = non_zero_element_ws;
  }
  else
  {
    v45 = 0;
    (*a5)(a5, 8uLL, (uint64_t)&v45);
    ccn_mux_seed_mask(v45);
    v49 = *(_QWORD *)(a3 + 48);
    v16 = *(_OWORD *)(a3 + 16);
    __s[0] = *(_OWORD *)a3;
    __s[1] = v16;
    __s[2] = *(_OWORD *)(a3 + 32);
    LOBYTE(__s[0]) &= 0xFCu;
    HIBYTE(v49) |= 0x80u;
    v36 = (uint64_t *)v13;
    v37 = (uint64_t *)v14;
    if (v10)
    {
      for (i = 0; i != v10; ++i)
        *(_QWORD *)(v39 + 8 * i) = *((_QWORD *)__s + i);
      cc_clear(0x38uLL, __s);
      v18 = __src;
      v19 = v10;
      do
      {
        v20 = *a4++;
        *v18++ = v20;
        --v19;
      }
      while (v19);
    }
    else
    {
      cc_clear(0x38uLL, __s);
    }
    cczp_mul_ws((uint64_t)&v41, a1);
    v22 = cczp_n(a1);
    v35 = *((_QWORD *)&v42 + 1);
    v23 = (char *)v43(&v41, 2 * v22);
    v24 = &v23[8 * v22];
    v25 = (char *)v43(&v41, 2 * v22);
    v26 = &v25[8 * v22];
    v43(&v41, v22);
    v43(&v41, v22);
    cc_clear(8 * v22, v26);
    ccn_set(v22, v24, v11);
    ccn_set(v22, v23, __src);
    v34 = v22;
    ccn_set(v22, v25, v12);
    v27 = 0;
    for (j = 447; j != -1; --j)
    {
      v29 = v27;
      v27 = (*(_QWORD *)(v39 + ((j >> 3) & 0x1FFFFFFFFFFFFFF8)) >> j) & 1;
      ccn_cond_swap(14, v27 ^ v29, (uint64_t *)v23, (uint64_t *)v25);
      cczp_sub_ws((uint64_t)&v41, a1);
      cczp_sub_ws((uint64_t)&v41, a1);
      cczp_add_ws((uint64_t)&v41, a1);
      cczp_add_ws((uint64_t)&v41, a1);
      cczp_mul_ws((uint64_t)&v41, a1);
      cczp_mul_ws((uint64_t)&v41, a1);
      cczp_sqr_ws((uint64_t)&v41, a1);
      cczp_sqr_ws((uint64_t)&v41, a1);
      cczp_add_ws((uint64_t)&v41, a1);
      cczp_sub_ws((uint64_t)&v41, a1);
      cczp_mul_ws((uint64_t)&v41, a1);
      cczp_sub_ws((uint64_t)&v41, a1);
      cczp_sqr_ws((uint64_t)&v41, a1);
      cczp_mul_ws((uint64_t)&v41, a1);
      cczp_sqr_ws((uint64_t)&v41, a1);
      cczp_mul_ws((uint64_t)&v41, a1);
      cczp_add_ws((uint64_t)&v41, a1);
      cczp_mul_ws((uint64_t)&v41, a1);
      cczp_mul_ws((uint64_t)&v41, a1);
    }
    ccn_mux(v34, v27, v36, (uint64_t *)v23, (uint64_t *)v25);
    v30 = v37;
    ccn_mux(v34, v27, v37, (uint64_t *)v24, (uint64_t *)v26);
    *((_QWORD *)&v42 + 1) = v35;
    cczp_inv_ws((uint64_t)&v41, a1);
    cczp_mul_ws((uint64_t)&v41, a1);
    cczp_from_ws((uint64_t)&v41, a1);
    if (v10)
    {
      v31 = v38 + 3;
      do
      {
        v32 = *v30++;
        *(_QWORD *)(v31 - 3) = v32;
        v31 += 8;
        --v10;
      }
      while (v10);
    }
    v47 = 0;
    memset(v46, 0, sizeof(v46));
    if (cc_cmp_safe(56, v38, (char *)v46))
      v21 = 0;
    else
      v21 = 4294967289;
  }
  *((_QWORD *)&v42 + 1) = 0;
  v44((uint64_t)&v41);
  return v21;
}

uint64_t cccurve448(uint64_t (**a1)(_QWORD, unint64_t, uint64_t), char *a2, uint64_t a3, uint64_t *a4)
{
  char v8;
  uint64_t v14;
  uint64_t v15;
  char v17;

  v8 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v17 = v8;
  v14 = ccec_cp_x448();
  v15 = cccurve448_internal(v14, a2, a3, a4, a1);
  cc_disable_dit(&v17);
  return v15;
}

uint64_t cccurve448_make_priv(uint64_t (**a1)(_QWORD, uint64_t, _BYTE *), _BYTE *a2)
{
  char v3;
  uint64_t v9;
  char v11;

  v3 = 0;
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v11 = v3;
  v9 = (*a1)(a1, 56, a2);
  if (!(_DWORD)v9)
  {
    *a2 &= 0xFCu;
    a2[55] |= 0x80u;
  }
  cc_disable_dit(&v11);
  return v9;
}

uint64_t cccurve448_make_pub(uint64_t (**a1)(_QWORD, unint64_t, uint64_t), char *a2, uint64_t a3)
{
  char v3;
  uint64_t v9;
  char v11;

  v3 = 0;
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v11 = v3;
  v9 = cccurve448(a1, a2, a3, kX448BasePoint);
  cc_disable_dit(&v11);
  return v9;
}

uint64_t cccurve448_make_key_pair(uint64_t (**a1)(_QWORD, unint64_t, uint64_t), char *a2, _BYTE *a3)
{
  char v6;
  uint64_t priv;
  uint64_t v13;
  char v15;

  v6 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v15 = v6;
  priv = cccurve448_make_priv((uint64_t (**)(_QWORD, uint64_t, _BYTE *))a1, a3);
  if (!(_DWORD)priv)
    priv = cccurve448_make_pub(a1, a2, (uint64_t)a3);
  v13 = priv;
  cc_disable_dit(&v15);
  return v13;
}

uint64_t ccspake_kex_generate(unsigned __int8 *a1, uint64_t a2, _BYTE *a3)
{
  char v6;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD v31[4];
  void (*v32)(uint64_t);
  char v33;

  v6 = 0;
  v33 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v33 = v6;
  v11 = (unint64_t *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a1 + 8))(a1);
  v12 = cczp_bitlen((uint64_t)v11);
  v13 = a1[60];
  if (v13 == CCSPAKE_STATE_INIT || v13 == CCSPAKE_STATE_KEX_PROCESS)
  {
    v15 = (unint64_t)(v12 + 7) >> 3;
    if (((2 * v15) | 1) == a2)
    {
      v16 = *v11;
      v17 = sizeof_struct_cche_galois_key();
      v18 = sizeof_struct_ccpolyzp_po2cyc();
      v31[0] = cc_malloc_clear(8 * ((v17 + v18 + v18 * 3 * v16 - 1) / v18 + 33 * v16));
      v19 = sizeof_struct_cche_galois_key();
      v20 = sizeof_struct_ccpolyzp_po2cyc();
      v31[1] = (v19 + v20 + v20 * 3 * v16 - 1) / v20 + 33 * v16;
      v31[2] = 0;
      v31[3] = cc_ws_alloc;
      v32 = cc_ws_free;
      if (v31[0])
      {
        v21 = ccspake_lazy_gen_xy_XY_ws((uint64_t)v31, (unint64_t *)a1);
        v29 = v21;
        if (!(_DWORD)v21)
        {
          *a3 = 4;
          v25 = a3 + 1;
          v26 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 8))(v21, v22, v23, v24);
          v27 = ccn_write_uint_padded(v16, (unint64_t *)&a1[32 * *v26 + 336], v15, v25);
          v28 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(v27);
          ccn_write_uint_padded(v16, (unint64_t *)&a1[40 * *v28 + 336], v15, &v25[v15]);
          a1[60] |= CCSPAKE_STATE_KEX_GENERATE;
        }
        v32((uint64_t)v31);
      }
      else
      {
        v29 = 4294967283;
      }
    }
    else
    {
      v29 = 4294967289;
    }
  }
  else
  {
    v29 = 4294967210;
  }
  cc_disable_dit(&v33);
  return v29;
}

uint64_t ccspake_lazy_gen_xy_XY_ws(uint64_t a1, unint64_t *a2)
{
  uint64_t (**v4)(_QWORD, uint64_t, uint64_t *);
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = (uint64_t (**)(_QWORD, uint64_t, uint64_t *))a2[2];
  v5 = (uint64_t *)(*(uint64_t (**)(void))(*a2 + 8))();
  v6 = *v5;
  v7 = a2 + 42;
  v8 = (_QWORD *)(*(uint64_t (**)(void))(*a2 + 8))();
  if (ccn_n(v6, &a2[3 * *v8 + 42]))
    return 0;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = (uint64_t **)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, (unint64_t)(24 * v6 + 23) >> 3);
  *v11 = v5;
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 3 * v6);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 3 * v6);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 3 * v6);
  v13 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  result = ccec_generate_scalar_fips_retry_ws(a1, v5, (uint64_t (**)(_QWORD, unint64_t, void *))a2[2], v13);
  if (!(_DWORD)result)
  {
    result = ccec_projectify_ws(a1, (uint64_t)v5);
    if (!(_DWORD)result)
    {
      result = ccec_mult_blinded_ws(a1, v5, v18, v13, v12, v4);
      if (!(_DWORD)result)
      {
        result = ccec_projectify_ws(a1, (uint64_t)v5);
        if (!(_DWORD)result)
        {
          (*(void (**)(void))(*a2 + 8))();
          result = ccec_mult_blinded_ws(a1, v5, v17, a2 + 42, v12, v4);
          if (!(_DWORD)result)
          {
            ccec_full_add_ws(a1, (uint64_t)v5);
            result = ccec_affinify_ws(a1, (uint64_t)v5);
            if (!(_DWORD)result)
            {
              v14 = (_QWORD *)(*(uint64_t (**)(void))(*a2 + 8))();
              v15 = ccspake_store_pub_key(v11, (char *)&v7[4 * *v14]);
              v16 = (_QWORD *)(*(uint64_t (**)(void *))(*a2 + 8))(v15);
              ccn_set(v6, &v7[3 * *v16], v13);
              result = 0;
            }
          }
        }
      }
    }
  }
  *(_QWORD *)(a1 + 16) = v10;
  return result;
}

uint64_t ccspake_kex_process(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (**v27)(_QWORD, uint64_t, uint64_t *);
  int v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  unint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  void *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *appended;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  unint64_t *v49;
  _QWORD *v50;
  _BYTE *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  _QWORD v55[2];
  uint64_t v56;
  uint64_t (*v57)(_QWORD *, uint64_t);
  void (*v58)(uint64_t);
  char v59;

  v4 = 0;
  v59 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v59 = v4;
  v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  v11 = *v10;
  v12 = sizeof_struct_cche_galois_key();
  v13 = sizeof_struct_ccpolyzp_po2cyc();
  v55[0] = cc_malloc_clear(432 * v11 + 16 * ((v12 + v13 + 3 * v11 * v13 - 1) / v13));
  v14 = *v10;
  v15 = sizeof_struct_cche_galois_key();
  v16 = sizeof_struct_ccpolyzp_po2cyc();
  v55[1] = 54 * v14 + 2 * ((v15 + v16 + 3 * v14 * v16 - 1) / v16);
  v56 = 0;
  v57 = cc_ws_alloc;
  v58 = cc_ws_free;
  if (v55[0])
  {
    v17 = *(_QWORD *)a1;
    v18 = (uint64_t *)(*(uint64_t (**)(void))(*(_QWORD *)a1 + 8))();
    v19 = *v18;
    if (ccspake_sizeof_point(v17) != a2)
    {
      v29 = 4294967289;
      goto LABEL_15;
    }
    v20 = (uint64_t **)cc_ws_alloc(v55, (unint64_t)(24 * v19 + 23) >> 3);
    *v20 = v18;
    v21 = 3 * v19;
    v22 = v57(v55, 3 * v19);
    v23 = v57(v55, 3 * v19);
    v24 = (char *)v57(v55, 3 * v19);
    v25 = v57(v55, v21);
    v54 = (unint64_t *)v57(v55, v21);
    v53 = (unint64_t *)v57(v55, v21);
    v26 = v57(v55, v21);
    v27 = *(uint64_t (***)(_QWORD, uint64_t, uint64_t *))(a1 + 16);
    v28 = *(unsigned __int8 *)(a1 + 60);
    if (v28 != CCSPAKE_STATE_INIT && v28 != CCSPAKE_STATE_KEX_GENERATE)
    {
      v29 = 4294967210;
LABEL_15:
      v58((uint64_t)v55);
      goto LABEL_16;
    }
    v52 = v26;
    v29 = ccspake_import_pub_ws((uint64_t)v55);
    if (!(_DWORD)v29)
    {
      v29 = ccspake_lazy_gen_xy_XY_ws((uint64_t)v55, (unint64_t *)a1);
      if (!(_DWORD)v29)
      {
        v31 = a1 + 336;
        v32 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)a1 + 8))();
        if (ccspake_cmp_pub_key((uint64_t)v20, (unint64_t *)(a1 + 336 + 32 * *v32)))
        {
          v29 = ccec_projectify_ws((uint64_t)v55, (uint64_t)v18);
          if ((_DWORD)v29)
            goto LABEL_14;
          v29 = ccec_projectify_ws((uint64_t)v55, (uint64_t)v18);
          if ((_DWORD)v29)
            goto LABEL_14;
          (*(void (**)(void))(*(_QWORD *)a1 + 8))();
          v29 = ccec_mult_blinded_ws((uint64_t)v55, v18, (uint64_t)v24, (unint64_t *)(a1 + 336), v22, v27);
          if ((_DWORD)v29)
            goto LABEL_14;
          v33 = ccec_full_sub_ws((uint64_t)v55, v18, v25, v23, v24);
          v34 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(v33);
          v29 = ccec_mult_blinded_ws((uint64_t)v55, v18, (uint64_t)v54, (unint64_t *)(v31 + 24 * *v34), v25, v27);
          if ((_DWORD)v29)
            goto LABEL_14;
          v35 = *(unsigned __int8 *)(a1 + 24);
          v36 = (unint64_t *)(v31 + 8 * *(_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)a1 + 8))());
          v37 = v18;
          if (v35)
          {
            v38 = (uint64_t)v53;
            v39 = v25;
          }
          else
          {
            v29 = ccec_validate_point_and_projectify_ws((uint64_t)v55, v18, v52, v36);
            if ((_DWORD)v29)
              goto LABEL_14;
            v36 = (unint64_t *)(v31 + 24 * *(_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)a1 + 8))());
            v37 = v18;
            v39 = v52;
            v38 = (uint64_t)v53;
          }
          v29 = ccec_mult_blinded_ws((uint64_t)v55, v37, v38, v36, v39, v27);
          if (!(_DWORD)v29)
          {
            v29 = ccec_affinify_ws((uint64_t)v55, (uint64_t)v18);
            if (!(_DWORD)v29)
            {
              v29 = ccec_affinify_ws((uint64_t)v55, (uint64_t)v18);
              if (!(_DWORD)v29)
              {
                v40 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)a1 + 8))();
                v41 = ccspake_store_pub_key(v20, (char *)(v31 + 48 * *v40));
                v42 = *(unsigned __int8 *)(a1 + 24);
                v43 = *(_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)a1 + 8))(v41);
                v44 = *(_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)a1 + 8))();
                if (v42)
                {
                  appended = ccspake_transcript_append_point(a1, (unint64_t *)v18, (unint64_t *)(v31 + 32 * v43), (unint64_t *)(v31 + 40 * v44));
                  v46 = 6 * *(_QWORD *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 8))(appended);
                  v47 = 7;
                }
                else
                {
                  v48 = ccspake_transcript_append_point(a1, (unint64_t *)v18, (unint64_t *)(v31 + 48 * v43), (unint64_t *)(v31 + 56 * v44));
                  v46 = 4 * *(_QWORD *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 8))(v48);
                  v47 = 5;
                }
                v49 = (unint64_t *)(v31 + 8 * v46);
                v50 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)a1 + 8))();
                ccspake_transcript_append_point(a1, (unint64_t *)v18, v49, (unint64_t *)(v31 + 8 * *v50 * v47));
                ccspake_transcript_append_point(a1, (unint64_t *)v18, v54, &v54[*v18]);
                v51 = ccspake_transcript_append_point(a1, (unint64_t *)v18, v53, &v53[*v18]);
                (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 8))(v51);
                ccspake_transcript_append_scalar(a1, (unint64_t *)v18, (unint64_t *)(a1 + 336));
                ccspake_transcript_finish((uint64_t (***)(void))a1, a1 + 272);
                v29 = 0;
                *(_BYTE *)(a1 + 60) |= CCSPAKE_STATE_KEX_PROCESS;
              }
            }
          }
          goto LABEL_14;
        }
        v29 = 4294967289;
      }
    }
LABEL_14:
    v56 = 0;
    goto LABEL_15;
  }
  v29 = 4294967283;
LABEL_16:
  cc_disable_dit(&v59);
  return v29;
}

int8x16_t *ccmode_xts_mult_alpha(int8x16_t *result)
{
  int8x16_t v1;

  v1 = *result;
  *result = vorrq_s8(vaddq_s8(*result, *result), vextq_s8((int8x16_t)0, (int8x16_t)vshrq_n_u8(*(uint8x16_t *)result, 7uLL), 0xFuLL));
  if (v1.i8[15] < 0)
    result->i8[0] ^= 0x87u;
  return result;
}

uint64_t ccrsa_generate_key(unint64_t a1, uint64_t *a2, unint64_t a3, unsigned __int8 *a4, uint64_t (**a5)(_QWORD, unint64_t, uint64_t))
{
  char v5;
  uint64_t key_internal;
  char v13;

  v5 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v13 = v5;
  key_internal = ccrsa_generate_key_internal(a1, a2, a3, a4, a5, a5);
  cc_disable_dit(&v13);
  return key_internal;
}

uint64_t ccsha3_224_vng_hwassist_compress(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return cckeccak_absorb_blocks(a1, 0x90uLL, a2, a3, (uint64_t (*)(_QWORD *))AccelerateCrypto_SHA3_keccak_hwassist);
}

uint64_t ccsha3_224_vng_hwassist_final(unint64_t *a1, uint64_t a2, _QWORD *a3)
{
  return ccsha3_final(a1, a2, a3, (uint64_t (*)(uint64_t *))AccelerateCrypto_SHA3_keccak_hwassist);
}

uint64_t ccsha3_224_vng_compress(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return cckeccak_absorb_blocks(a1, 0x90uLL, a2, a3, AccelerateCrypto_SHA3_keccak);
}

uint64_t ccsha3_224_vng_final(unint64_t *a1, uint64_t a2, _QWORD *a3)
{
  return ccsha3_final(a1, a2, a3, AccelerateCrypto_SHA3_keccak);
}

uint64_t ccrsa_make_pub(unint64_t *a1, unint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned __int8 *a5)
{
  char v8;
  unint64_t v14;
  uint64_t v15;
  char v17;

  v8 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v17 = v8;
  v14 = *a1;
  if (ccn_read_uint(*a1, a1 + 3, a4, a5) || ccn_read_uint(v14, &a1[2 * *a1 + 4], a2, a3))
    v15 = 4294967273;
  else
    v15 = cczp_init(a1);
  cc_disable_dit(&v17);
  return v15;
}

unint64_t CCHE_ENCRYPT_ZERO_SYMMETRIC_HELPER_WORKSPACE_N(unint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v4 = sizeof_struct_ccpolyzp_po2cyc_block_rng_state();
  v5 = CCPOLYZP_PO2CYC_RANDOM_UNIFORM_WORKSPACE_N(a1);
  v6 = v5 + (a2 * a1) + ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3);
  v7 = CCPOLYZP_PO2CYC_RANDOM_CBD_WORKSPACE_N(a1);
  if (v6 <= v7)
    v8 = v7;
  else
    v8 = v6;
  return v8 + ((unint64_t)(v4 + 7) >> 3);
}

uint64_t cche_encrypt_zero_symmetric_eval_ws(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t *a4, unsigned int a5, uint64_t a6, uint64_t (**a7)(_QWORD, uint64_t, uint64_t))
{
  return cche_encrypt_zero_symmetric_helper_ws(a1, a2, a3, a4, a5, 1, a6, a7);
}

uint64_t cche_encrypt_zero_symmetric_helper_ws(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t *a4, unsigned int a5, int a6, uint64_t a7, uint64_t (**a8)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t result;
  unsigned int *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int **v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  unsigned int *v31;
  unint64_t v32;
  unsigned int **v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int **v36;
  uint64_t (**v37)(_QWORD, uint64_t, uint64_t);
  uint64_t (*v38)(uint64_t, unint64_t);
  uint64_t v39;
  unsigned int **v40;
  uint64_t (**v41)(_QWORD, uint64_t, const double *);
  unsigned int **v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t (**v49)(_QWORD, uint64_t, uint64_t);
  uint64_t *v50;
  int v51;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C874D8];
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *a4;
  v17 = cche_param_ctx_chain_const((uint64_t)a3);
  v18 = ccpolyzp_po2cyc_ctx_eq(v16, (_DWORD *)(v17 + 8));
  result = 4294967289;
  if (a5 && v18)
  {
    if (*(_DWORD *)(cche_param_ctx_chain_const((uint64_t)a3) + 12) < a5)
      return 4294967289;
    v50 = a4;
    v51 = a6;
    v20 = (unsigned int *)cche_param_ctx_chain_const((uint64_t)a3);
    v21 = *v20;
    v22 = (unint64_t)(sizeof_struct_ccpolyzp_po2cyc_ctx() + 7) >> 3;
    if (v21 >= 0x80)
      v23 = 128;
    else
      v23 = v21;
    v24 = &v20[2
             * (v22 + 2 * (v21 + ((unint64_t)(sizeof_struct_ccrns_mul_modulus() + 7) >> 3) * v23) + 6)
             * (v20[1] - a5)
             + 2];
    v25 = cche_ciphertext_fresh_npolys();
    *(_QWORD *)a2 = a3;
    *(_DWORD *)(a2 + 8) = v25;
    *(_QWORD *)(a2 + 16) = 1;
    *(_QWORD *)(a2 + 24) = v24;
    v26 = (unsigned int **)(a2 + 24);
    v27 = v24;
    if (v25 >= 2)
    {
      v49 = a8;
      v28 = v15;
      v29 = v25;
      for (i = 1; i != v29; ++i)
      {
        v31 = *v26;
        v26[(v31[1] * *v31 + ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3)) * i] = v24;
      }
      v27 = *v26;
      v15 = v28;
      a8 = v49;
    }
    v32 = v27[1] * *v27 + ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3);
    v33 = &v26[v32];
    if (a7)
    {
      result = (*a8)(a8, 32, a7);
      if ((_DWORD)result)
        goto LABEL_32;
      v34 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 536);
      result = ccpolyzp_po2cyc_block_rng_init(v34, a7);
      if ((_DWORD)result)
        goto LABEL_32;
      v35 = a1;
      v36 = v33;
      v37 = (uint64_t (**)(_QWORD, uint64_t, uint64_t))v34;
    }
    else
    {
      v35 = a1;
      v36 = &v26[v32];
      v37 = a8;
    }
    result = ccpolyzp_po2cyc_random_uniform_ws(v35, v36, v37);
    if (!(_DWORD)result)
    {
      v38 = *(uint64_t (**)(uint64_t, unint64_t))(a1 + 24);
      v39 = sizeof_struct_ccpolyzp_po2cyc();
      v40 = (unsigned int **)v38(a1, v24[1] * *v24 + ((unint64_t)(v39 + 7) >> 3));
      v41 = (uint64_t (**)(_QWORD, uint64_t, const double *))a8;
      v42 = v40;
      *v40 = v24;
      result = ccpolyzp_po2cyc_random_cbd_ws(a1, v40, v41, 0);
      if (!(_DWORD)result)
      {
        if (cche_param_ctx_he_scheme(a3) == 2)
        {
          v43 = cche_param_ctx_plaintext_modulus((uint64_t)a3);
          v44 = 0;
          v58 = 0;
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v53 = v43;
          if (a5 <= 1)
            v45 = 1;
          else
            v45 = a5;
          v46 = 8 * v45;
          do
          {
            *(uint64_t *)((char *)&v53 + v44) = v43;
            v44 += 8;
          }
          while (v46 != v44);
          ccpolyzp_po2cyc_coeff_scalar_mul_ws(a1, v42, v42, (uint64_t)&v53);
        }
        cche_mul_poly_sk((_DWORD **)(a2 + 24), v33, (_DWORD **)v50);
        if (!v51)
        {
          result = ccpolyzp_po2cyc_inv_ntt((unsigned int **)(a2 + 24));
          if ((_DWORD)result)
            goto LABEL_32;
          result = ccpolyzp_po2cyc_inv_ntt(v33);
          if ((_DWORD)result)
            goto LABEL_32;
          ccpolyzp_po2cyc_coeff_add((int **)(a2 + 24), a2 + 24, v42);
          ccpolyzp_po2cyc_coeff_negate((int **)(a2 + 24), a2 + 24);
          goto LABEL_31;
        }
        result = ccpolyzp_po2cyc_fwd_ntt(v42);
        if (!(_DWORD)result)
        {
          ccpolyzp_po2cyc_eval_add(a2 + 24, a2 + 24, v42);
          ccpolyzp_po2cyc_eval_negate(a2 + 24, a2 + 24);
LABEL_31:
          v47 = sizeof_struct_ccpolyzp_po2cyc();
          cc_clear((v47 + 8 * v24[1] * *v24 + 7) & 0xFFFFFFFFFFFFFFF8, v42);
          v48 = cche_ciphertext_fresh_npolys();
          result = 0;
          *(_DWORD *)(a2 + 8) = v48;
          *(_QWORD *)a2 = a3;
          *(_QWORD *)(a2 + 16) = 1;
        }
      }
    }
LABEL_32:
    *(_QWORD *)(a1 + 16) = v15;
  }
  return result;
}

uint64_t cche_encrypt_symmetric_ws(uint64_t a1, uint64_t a2, unint64_t *a3, unsigned int *a4, uint64_t *a5, unsigned int a6, uint64_t a7, uint64_t (**a8)(_QWORD, uint64_t, uint64_t))
{
  uint64_t result;

  result = cche_encrypt_zero_symmetric_helper_ws(a1, a2, a4, a5, a6, 0, a7, a8);
  if (!(_DWORD)result)
    return cche_ciphertext_plaintext_add_ws(a1, a2, a2, a3);
  return result;
}

uint64_t cche_encrypt_symmetric(uint64_t a1, unint64_t *a2, unsigned int *a3, uint64_t *a4, unsigned int a5, uint64_t a6, uint64_t (**a7)(_QWORD, uint64_t, uint64_t))
{
  char v14;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD v31[4];
  void (*v32)(uint64_t);
  char v33;

  v14 = 0;
  v33 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v14 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v14 = 1;
    }
  }
  v33 = v14;
  v20 = cche_param_ctx_polynomial_degree((uint64_t)a3);
  v21 = CCHE_ENCRYPT_ZERO_SYMMETRIC_HELPER_WORKSPACE_N(v20, a5);
  v22 = CCHE_CIPHERTEXT_PLAINTEXT_ADD_WORKSPACE_N(v20);
  if (v21 <= v22)
    v23 = v22;
  else
    v23 = v21;
  v24 = cc_malloc_clear(8 * v23);
  v31[0] = v24;
  v25 = cche_param_ctx_polynomial_degree((uint64_t)a3);
  v26 = CCHE_ENCRYPT_ZERO_SYMMETRIC_HELPER_WORKSPACE_N(v25, a5);
  v27 = CCHE_CIPHERTEXT_PLAINTEXT_ADD_WORKSPACE_N(v25);
  if (v26 <= v27)
    v28 = v27;
  else
    v28 = v26;
  v31[1] = v28;
  v31[2] = 0;
  v31[3] = cc_ws_alloc;
  v32 = cc_ws_free;
  if (v24)
  {
    v29 = cche_encrypt_symmetric_ws((uint64_t)v31, a1, a2, a3, a4, a5, a6, a7);
    v32((uint64_t)v31);
  }
  else
  {
    v29 = 4294967283;
  }
  cc_disable_dit(&v33);
  return v29;
}

uint64_t cczp_mm_init_ws(uint64_t a1, uint64_t *a2, uint64_t a3, void *__src)
{
  uint64_t result;

  *a2 = a3;
  ccn_set(a3, a2 + 3, __src);
  result = cczp_init_ws(a1, a2);
  a2[2] = (uint64_t)cczp_montgomery_funcs;
  return result;
}

void *cczp_mm_init_copy(_QWORD *a1, const void *a2)
{
  uint64_t v4;
  void *result;

  v4 = cczp_n((uint64_t)a2);
  result = memcpy(a1, a2, 16 * v4 + 32);
  a1[2] = cczp_montgomery_funcs;
  return result;
}

uint64_t cczp_mm_mod_ws(uint64_t a1, _QWORD *a2, uint64_t *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t result;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = 2 * cczp_n((uint64_t)a2);
  v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9);
  ccn_set(v9, v10, a4);
  result = cczp_mm_redc_ws(a1, a2, a3, (uint64_t *)v10);
  *(_QWORD *)(a1 + 16) = v8;
  return result;
}

void cczp_mm_inv_ws()
{
  cc_try_abort();
}

uint64_t sub_1DEDED440()
{
  return 0xFFFFFFFFLL;
}

void cczp_mm_sqrt_ws()
{
  cc_try_abort();
}

uint64_t sub_1DEDED460()
{
  return 0xFFFFFFFFLL;
}

uint64_t ccec448_inv_ws(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  cczp_sqr_ws(a1, a2);
  cczp_mul_ws(a1, a2);
  cczp_sqr_ws(a1, a2);
  cczp_mul_ws(a1, a2);
  cczp_sqr_ws(a1, a2);
  v4 = 2;
  do
  {
    cczp_sqr_ws(a1, a2);
    --v4;
  }
  while (v4);
  cczp_mul_ws(a1, a2);
  cczp_sqr_ws(a1, a2);
  v5 = 5;
  do
  {
    cczp_sqr_ws(a1, a2);
    --v5;
  }
  while (v5);
  cczp_mul_ws(a1, a2);
  cczp_sqr_ws(a1, a2);
  cczp_mul_ws(a1, a2);
  cczp_sqr_ws(a1, a2);
  v6 = 12;
  do
  {
    cczp_sqr_ws(a1, a2);
    --v6;
  }
  while (v6);
  cczp_mul_ws(a1, a2);
  cczp_sqr_ws(a1, a2);
  cczp_mul_ws(a1, a2);
  cczp_sqr_ws(a1, a2);
  v7 = 26;
  do
  {
    cczp_sqr_ws(a1, a2);
    --v7;
  }
  while (v7);
  cczp_mul_ws(a1, a2);
  cczp_sqr_ws(a1, a2);
  cczp_mul_ws(a1, a2);
  cczp_sqr_ws(a1, a2);
  v8 = 54;
  do
  {
    cczp_sqr_ws(a1, a2);
    --v8;
  }
  while (v8);
  cczp_mul_ws(a1, a2);
  cczp_sqr_ws(a1, a2);
  cczp_mul_ws(a1, a2);
  cczp_sqr_ws(a1, a2);
  v9 = 110;
  do
  {
    cczp_sqr_ws(a1, a2);
    --v9;
  }
  while (v9);
  cczp_mul_ws(a1, a2);
  cczp_sqr_ws(a1, a2);
  cczp_mul_ws(a1, a2);
  cczp_sqr_ws(a1, a2);
  v10 = 222;
  do
  {
    cczp_sqr_ws(a1, a2);
    --v10;
  }
  while (v10);
  cczp_mul_ws(a1, a2);
  cczp_sqr_ws(a1, a2);
  cczp_sqr_ws(a1, a2);
  cczp_mul_ws(a1, a2);
  return 0;
}

uint64_t ccec448_from_ws(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v6;
  unsigned __int128 v7;
  unsigned __int128 v8;
  unsigned __int128 v9;
  unsigned __int128 v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int128 v17;
  uint64_t v19[8];

  v19[7] = *MEMORY[0x1E0C874D8];
  v6 = (_QWORD *)cczp_prime(a2);
  v7 = (unint64_t)*a4 - __PAIR128__(*v6, *v6);
  v8 = (unint64_t)a4[1]
     - __PAIR128__(v6[1], v6[1])
     + __PAIR128__(*((uint64_t *)&v7 + 1) >> 63, *((uint64_t *)&v7 + 1) >> 63);
  v19[0] = *a4 - *v6;
  v19[1] = v8;
  v9 = (unint64_t)a4[2] - __PAIR128__(v6[2], v6[2]);
  v10 = (unint64_t)a4[3]
      - __PAIR128__(v6[3], v6[3])
      + __PAIR128__(((*((uint64_t *)&v8 + 1) >> 63) + __CFADD__((_QWORD)v9, *((uint64_t *)&v8 + 1) >> 63) + *((_QWORD *)&v9 + 1)) >> 63, ((*((uint64_t *)&v8 + 1) >> 63) + __CFADD__((_QWORD)v9, *((uint64_t *)&v8 + 1) >> 63) + *((_QWORD *)&v9 + 1)) >> 63);
  v19[2] = v9 + (*((uint64_t *)&v8 + 1) >> 63);
  v19[3] = v10;
  v12 = ((unint64_t)a4[4] - __PAIR128__(v6[4], v6[4])) >> 64;
  v11 = a4[4] - v6[4];
  v13 = (*((uint64_t *)&v10 + 1) >> 63) + __CFADD__(v11, *((uint64_t *)&v10 + 1) >> 63) + v12;
  v14 = (unint64_t)a4[5] - __PAIR128__(v12, v6[5]);
  v15 = v14 + (v13 >> 63);
  v16 = (v13 >> 63) + __CFADD__((_QWORD)v14, v13 >> 63) + *((_QWORD *)&v14 + 1);
  v19[4] = v11 + (*((uint64_t *)&v10 + 1) >> 63);
  v19[5] = v15;
  v17 = (unint64_t)a4[6] - __PAIR128__(v6[6], v6[6]);
  v19[6] = v17 + (v16 >> 63);
  return ccn_mux(7, (v16 >> 63) + __CFADD__((_QWORD)v17, v16 >> 63) + *((_QWORD *)&v17 + 1) < 0, a3, a4, v19);
}

_QWORD *ccec448_add_asm(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5)
{
  return ccn_addmod_p448(a3, a4, a5);
}

char *ccec448_sub_asm(uint64_t a1, uint64_t a2, _OWORD *a3, unint64_t *a4, unint64_t *a5)
{
  return ccn_submod_p448(a3, a4, a5);
}

uint64_t ccec448_mul_asm(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5)
{
  return ccn_mulmod_p448(a3, a4, a5);
}

void ccec448_sqr_asm()
{
  ccn_sqrmod_p448();
}

BOOL ccrsa_import_priv_ws(uint64_t a1, unint64_t *a2, uint64_t a3, unsigned __int8 *a4)
{
  return ccder_decode_rsa_priv_ws(a1, a2, a4, &a4[a3]) == 0;
}

_BYTE *ccrsa_dump_public_key(uint64_t *a1)
{
  char v2;
  uint64_t v8;
  char v10;

  v2 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v10 = v2;
  v8 = ccrsa_pubkeylength((uint64_t)a1);
  fprintf((FILE *)*MEMORY[0x1E0C874E0], "%lu bit rsa key\n", v8);
  ccn_lprint(*a1, "m  = 0x", (uint64_t)(a1 + 3));
  ccn_lprint(*a1, "e  = 0x", (uint64_t)&a1[2 * *a1 + 4]);
  return cc_disable_dit(&v10);
}

_BYTE *ccrsa_dump_full_key(_QWORD *a1)
{
  char v2;
  uint64_t *v8;
  uint64_t v9;
  FILE **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char v41;

  v2 = 0;
  v41 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v41 = v2;
  v8 = (uint64_t *)ccrsa_ctx_public(a1);
  v9 = ccrsa_pubkeylength((uint64_t)v8);
  v10 = (FILE **)MEMORY[0x1E0C874E0];
  fprintf((FILE *)*MEMORY[0x1E0C874E0], "%lu bit rsa key\n", v9);
  ccn_lprint(*v8, "m  = 0x", (uint64_t)(v8 + 3));
  ccn_lprint(*v8, "e  = 0x", (uint64_t)&v8[2 * *v8 + 4]);
  ccn_lprint(*v8, "d  = 0x", (uint64_t)&v8[3 * *v8 + 4]);
  v11 = ccrsa_ctx_private_zp(a1);
  v12 = cczp_n(v11);
  v13 = ccrsa_ctx_private_zp(a1);
  v14 = cczp_prime(v13);
  ccn_lprint(v12, "p  = 0x", v14);
  v15 = ccrsa_ctx_private_zp(a1);
  v16 = (_QWORD *)ccrsa_ctx_private_zp(a1);
  v17 = cczp_n(v15 + 16 * *v16 + 32);
  v18 = ccrsa_ctx_private_zp(a1);
  v19 = (_QWORD *)ccrsa_ctx_private_zp(a1);
  v20 = cczp_prime(v18 + 16 * *v19 + 32);
  ccn_lprint(v17, "q  = 0x", v20);
  v21 = ccrsa_ctx_private_zp(a1);
  v22 = cczp_n(v21);
  v23 = ccrsa_ctx_private_zp(a1);
  v24 = v23 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a1);
  v25 = (_QWORD *)ccrsa_ctx_private_zp(a1);
  ccn_lprint(v22, "dp = 0x", v24 + 16 * *v25 + 64);
  v26 = ccrsa_ctx_private_zp(a1);
  v27 = (_QWORD *)ccrsa_ctx_private_zp(a1);
  v28 = cczp_n(v26 + 16 * *v27 + 32);
  v29 = ccrsa_ctx_private_zp(a1);
  v30 = v29 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a1);
  v31 = v30 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a1);
  v32 = (_QWORD *)ccrsa_ctx_private_zp(a1);
  ccn_lprint(v28, "dq = 0x", v31 + 8 * *v32 + 64);
  v33 = ccrsa_ctx_private_zp(a1);
  v34 = cczp_n(v33);
  v35 = ccrsa_ctx_private_zp(a1);
  v36 = v35 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a1);
  v37 = v36 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a1);
  v38 = v37 + 8 * *(_QWORD *)ccrsa_ctx_private_zp(a1);
  v39 = (_QWORD *)ccrsa_ctx_private_zp(a1);
  ccn_lprint(v34, "qinv=0x", v38 + 8 * *v39 + 64);
  fputc(10, *v10);
  return cc_disable_dit(&v41);
}

uint64_t md2_processblock(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  if (a2)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 48;
    do
    {
      result = md2_compress(v5, a3);
      v7 = 0;
      v8 = *(_BYTE *)(v5 + 63);
      do
      {
        v8 = *(_BYTE *)(v6 + v7) ^ PI_SUBST[(*(_BYTE *)(a3 + v7) ^ v8)];
        *(_BYTE *)(v6 + v7++) = v8;
      }
      while (v7 != 16);
      a3 += 16;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t md2_final(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  const void *v11;
  char *v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  char v16;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C874D8];
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  MEMORY[0x1E0C86820](a1, a2, a3, a4);
  v9 = (char *)v18 - v8;
  memcpy((char *)v18 - v8, v11, v10 + 4);
  v12 = &v9[v6 + 8];
  v13 = *(unsigned int *)&v12[v7];
  if (v13 <= 0xF)
    memset(&v9[v6 + 8 + v13], 16 - v13, 16 - v13);
  v14 = v9 + 56;
  md2_compress((uint64_t)(v9 + 8), (uint64_t)v12);
  v15 = 0;
  v16 = v9[71];
  do
  {
    v16 = *((_BYTE *)v14 + v15) ^ PI_SUBST[(v12[v15] ^ v16)];
    *((_BYTE *)v14 + v15++) = v16;
  }
  while (v15 != 16);
  *(_OWORD *)v12 = *v14;
  md2_compress((uint64_t)(v9 + 8), (uint64_t)v12);
  *a3 = *(_OWORD *)(v9 + 8);
  return cc_clear(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) + 12, v9);
}

uint64_t md2_compress(uint64_t result, uint64_t a2)
{
  uint64_t i;
  char v3;
  uint64_t v4;
  unsigned __int8 v5;
  int j;
  uint64_t k;

  for (i = 0; i != 16; ++i)
  {
    v3 = *(_BYTE *)(a2 + i);
    v4 = result + i;
    *(_BYTE *)(v4 + 16) = v3;
    *(_BYTE *)(v4 + 32) = *(_BYTE *)(result + i) ^ v3;
  }
  v5 = 0;
  for (j = 0; j != 18; ++j)
  {
    for (k = 0; k != 48; ++k)
    {
      v5 = *(_BYTE *)(result + k) ^ PI_SUBST[v5];
      *(_BYTE *)(result + k) = v5;
    }
    v5 += j;
  }
  return result;
}

uint64_t ccecies_derive_gcm_key_iv(uint64_t a1, size_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8)
{
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD v17[2];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C874D8];
  v8 = *(_DWORD *)(a1 + 32);
  if (a4)
    v9 = 0;
  else
    v9 = (*(_DWORD *)(a1 + 32) & 0x20) != 0;
  v10 = 4294967289;
  if (!v9 && (*(_DWORD *)(a1 + 32) & 0x21) != 0x21 && ((a4 != 0) & v8) == 0)
  {
    v12 = *(unsigned int *)(a1 + 24);
    if ((v8 & 0x10) == 0)
    {
      v12 = (v12 + 16);
      goto LABEL_11;
    }
    if (v12 <= 0xFFFFFFEF)
    {
      v13 = &a8[v12];
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
LABEL_11:
      memset(v17, 0, sizeof(v17));
      if ((v8 & 0x21) != 0)
      {
        *(_QWORD *)&v17[0] = a7;
        *((_QWORD *)&v17[0] + 1) = a6;
        v14 = 1;
        if ((v8 & 0x20) == 0 && (v8 & 1) != 0)
          return ccansikdf_x963_iovec(*(_QWORD **)a1, a2, a3, v14, (uint64_t)v17, v12, a8);
      }
      else
      {
        LODWORD(v14) = 0;
      }
      v15 = &v17[v14];
      *v15 = a5;
      v15[1] = a4;
      v14 = (v14 + 1);
      return ccansikdf_x963_iovec(*(_QWORD **)a1, a2, a3, v14, (uint64_t)v17, v12, a8);
    }
  }
  return v10;
}

_BYTE *cckyber_hash_h(size_t a1, char *a2, uint64_t a3)
{
  void *v6;

  v6 = ccsha3_256_di();
  return ccdigest((uint64_t)v6, a1, a2, a3);
}

_BYTE *cckyber_hash_g(size_t a1, char *a2, uint64_t a3)
{
  void *v6;

  v6 = ccsha3_512_di();
  return ccdigest((uint64_t)v6, a1, a2, a3);
}

uint64_t cckyber_prf(char *a1, char a2, char *a3)
{
  _QWORD *v5;
  char __src;
  _QWORD __s[45];

  __s[44] = *MEMORY[0x1E0C874D8];
  __src = a2;
  v5 = ccshake256_xi();
  ccxof_init((uint64_t)v5, __s);
  ccxof_absorb(v5, (char *)__s, 0x20uLL, a1);
  ccxof_absorb(v5, (char *)__s, 1uLL, &__src);
  ccxof_squeeze(v5, (unsigned int *)__s, 0x80uLL, a3);
  return cc_clear(0x158uLL, __s);
}

uint64_t cckyber_rkprf(char *a1, unint64_t a2, char *a3, char *a4)
{
  _QWORD *v8;
  _QWORD __s[45];

  __s[44] = *MEMORY[0x1E0C874D8];
  v8 = ccshake256_xi();
  ccxof_init((uint64_t)v8, __s);
  ccxof_absorb(v8, (char *)__s, 0x20uLL, a1);
  ccxof_absorb(v8, (char *)__s, a2, a3);
  ccxof_squeeze(v8, (unsigned int *)__s, 0x20uLL, a4);
  return cc_clear(0x158uLL, __s);
}

int *CC_CAST_encrypt(int *result, uint64_t a2)
{
  int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;

  v2 = result[1];
  v3 = __ROR4__(*(_DWORD *)a2 + v2, -*(_BYTE *)(a2 + 4));
  v4 = ((CC_CAST_S_table1[v3] ^ CC_CAST_S_table0[BYTE1(v3)])
      - CC_CAST_S_table2[HIBYTE(v3)]
      + CC_CAST_S_table3[BYTE2(v3)]) ^ *result;
  v5 = __ROR4__(v4 ^ *(_DWORD *)(a2 + 8), -*(_BYTE *)(a2 + 12));
  v6 = CC_CAST_S_table3[BYTE2(v5)] ^ v2 ^ (CC_CAST_S_table0[BYTE1(v5)]
                                         - CC_CAST_S_table1[v5]
                                         + CC_CAST_S_table2[HIBYTE(v5)]);
  v7 = __ROR4__(*(_DWORD *)(a2 + 16) - v6, -*(_BYTE *)(a2 + 20));
  v8 = (((CC_CAST_S_table1[v7] + CC_CAST_S_table0[BYTE1(v7)]) ^ CC_CAST_S_table2[HIBYTE(v7)])
      - CC_CAST_S_table3[BYTE2(v7)]) ^ v4;
  v9 = __ROR4__(v8 + *(_DWORD *)(a2 + 24), -*(_BYTE *)(a2 + 28));
  v10 = ((CC_CAST_S_table1[v9] ^ CC_CAST_S_table0[BYTE1(v9)])
       - CC_CAST_S_table2[HIBYTE(v9)]
       + CC_CAST_S_table3[BYTE2(v9)]) ^ v6;
  v11 = __ROR4__(v10 ^ *(_DWORD *)(a2 + 32), -*(_BYTE *)(a2 + 36));
  v12 = CC_CAST_S_table3[BYTE2(v11)] ^ v8 ^ (CC_CAST_S_table0[BYTE1(v11)]
                                           - CC_CAST_S_table1[v11]
                                           + CC_CAST_S_table2[HIBYTE(v11)]);
  v13 = __ROR4__(*(_DWORD *)(a2 + 40) - v12, -*(_BYTE *)(a2 + 44));
  v14 = (((CC_CAST_S_table1[v13] + CC_CAST_S_table0[BYTE1(v13)]) ^ CC_CAST_S_table2[HIBYTE(v13)])
       - CC_CAST_S_table3[BYTE2(v13)]) ^ v10;
  v15 = __ROR4__(v14 + *(_DWORD *)(a2 + 48), -*(_BYTE *)(a2 + 52));
  v16 = ((CC_CAST_S_table1[v15] ^ CC_CAST_S_table0[BYTE1(v15)])
       - CC_CAST_S_table2[HIBYTE(v15)]
       + CC_CAST_S_table3[BYTE2(v15)]) ^ v12;
  v17 = __ROR4__(v16 ^ *(_DWORD *)(a2 + 56), -*(_BYTE *)(a2 + 60));
  v18 = CC_CAST_S_table3[BYTE2(v17)] ^ v14 ^ (CC_CAST_S_table0[BYTE1(v17)]
                                            - CC_CAST_S_table1[v17]
                                            + CC_CAST_S_table2[HIBYTE(v17)]);
  v19 = __ROR4__(*(_DWORD *)(a2 + 64) - v18, -*(_BYTE *)(a2 + 68));
  v20 = (((CC_CAST_S_table1[v19] + CC_CAST_S_table0[BYTE1(v19)]) ^ CC_CAST_S_table2[HIBYTE(v19)])
       - CC_CAST_S_table3[BYTE2(v19)]) ^ v16;
  v21 = __ROR4__(v20 + *(_DWORD *)(a2 + 72), -*(_BYTE *)(a2 + 76));
  v22 = ((CC_CAST_S_table1[v21] ^ CC_CAST_S_table0[BYTE1(v21)])
       - CC_CAST_S_table2[HIBYTE(v21)]
       + CC_CAST_S_table3[BYTE2(v21)]) ^ v18;
  v23 = __ROR4__(v22 ^ *(_DWORD *)(a2 + 80), -*(_BYTE *)(a2 + 84));
  v24 = CC_CAST_S_table3[BYTE2(v23)] ^ v20 ^ (CC_CAST_S_table0[BYTE1(v23)]
                                            - CC_CAST_S_table1[v23]
                                            + CC_CAST_S_table2[HIBYTE(v23)]);
  v25 = __ROR4__(*(_DWORD *)(a2 + 88) - v24, -*(_BYTE *)(a2 + 92));
  v26 = (((CC_CAST_S_table1[v25] + CC_CAST_S_table0[BYTE1(v25)]) ^ CC_CAST_S_table2[HIBYTE(v25)])
       - CC_CAST_S_table3[BYTE2(v25)]) ^ v22;
  if (!*(_DWORD *)(a2 + 128))
  {
    v27 = __ROR4__(*(_DWORD *)(a2 + 96) + v26, -*(_BYTE *)(a2 + 100));
    v28 = ((CC_CAST_S_table1[v27] ^ CC_CAST_S_table0[BYTE1(v27)])
         - CC_CAST_S_table2[HIBYTE(v27)]
         + CC_CAST_S_table3[BYTE2(v27)]) ^ v24;
    v29 = __ROR4__(v28 ^ *(_DWORD *)(a2 + 104), -*(_BYTE *)(a2 + 108));
    v30 = CC_CAST_S_table3[BYTE2(v29)] ^ v26 ^ (CC_CAST_S_table0[BYTE1(v29)]
                                              - CC_CAST_S_table1[v29]
                                              + CC_CAST_S_table2[HIBYTE(v29)]);
    v31 = __ROR4__(*(_DWORD *)(a2 + 112) - v30, -*(_BYTE *)(a2 + 116));
    v24 = (((CC_CAST_S_table1[v31] + CC_CAST_S_table0[BYTE1(v31)]) ^ CC_CAST_S_table2[HIBYTE(v31)])
         - CC_CAST_S_table3[BYTE2(v31)]) ^ v28;
    v32 = __ROR4__(v24 + *(_DWORD *)(a2 + 120), -*(_BYTE *)(a2 + 124));
    v26 = ((CC_CAST_S_table1[v32] ^ CC_CAST_S_table0[BYTE1(v32)])
         - CC_CAST_S_table2[HIBYTE(v32)]
         + CC_CAST_S_table3[BYTE2(v32)]) ^ v30;
  }
  *result = v26;
  result[1] = v24;
  return result;
}

int *CC_CAST_decrypt(int *result, uint64_t a2)
{
  int v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;

  v3 = *result;
  v2 = result[1];
  if (!*(_DWORD *)(a2 + 128))
  {
    v4 = __ROR4__(*(_DWORD *)(a2 + 120) + v2, -*(_BYTE *)(a2 + 124));
    v5 = ((CC_CAST_S_table1[v4] ^ CC_CAST_S_table0[BYTE1(v4)])
        - CC_CAST_S_table2[HIBYTE(v4)]
        + CC_CAST_S_table3[BYTE2(v4)]) ^ v3;
    v6 = __ROR4__(*(_DWORD *)(a2 + 112) - v5, -*(_BYTE *)(a2 + 116));
    v7 = (((CC_CAST_S_table1[v6] + CC_CAST_S_table0[BYTE1(v6)]) ^ CC_CAST_S_table2[HIBYTE(v6)])
        - CC_CAST_S_table3[BYTE2(v6)]) ^ v2;
    v8 = __ROR4__(v7 ^ *(_DWORD *)(a2 + 104), -*(_BYTE *)(a2 + 108));
    v3 = CC_CAST_S_table3[BYTE2(v8)] ^ v5 ^ (CC_CAST_S_table0[BYTE1(v8)]
                                           - CC_CAST_S_table1[v8]
                                           + CC_CAST_S_table2[HIBYTE(v8)]);
    v9 = __ROR4__(v3 + *(_DWORD *)(a2 + 96), -*(_BYTE *)(a2 + 100));
    v2 = ((CC_CAST_S_table1[v9] ^ CC_CAST_S_table0[BYTE1(v9)])
        - CC_CAST_S_table2[HIBYTE(v9)]
        + CC_CAST_S_table3[BYTE2(v9)]) ^ v7;
  }
  v10 = __ROR4__(*(_DWORD *)(a2 + 88) - v2, -*(_BYTE *)(a2 + 92));
  v11 = (((CC_CAST_S_table1[v10] + CC_CAST_S_table0[BYTE1(v10)]) ^ CC_CAST_S_table2[HIBYTE(v10)])
       - CC_CAST_S_table3[BYTE2(v10)]) ^ v3;
  v12 = __ROR4__(v11 ^ *(_DWORD *)(a2 + 80), -*(_BYTE *)(a2 + 84));
  v13 = CC_CAST_S_table3[BYTE2(v12)] ^ v2 ^ (CC_CAST_S_table0[BYTE1(v12)]
                                           - CC_CAST_S_table1[v12]
                                           + CC_CAST_S_table2[HIBYTE(v12)]);
  v14 = __ROR4__(v13 + *(_DWORD *)(a2 + 72), -*(_BYTE *)(a2 + 76));
  v15 = ((CC_CAST_S_table1[v14] ^ CC_CAST_S_table0[BYTE1(v14)])
       - CC_CAST_S_table2[HIBYTE(v14)]
       + CC_CAST_S_table3[BYTE2(v14)]) ^ v11;
  v16 = __ROR4__(*(_DWORD *)(a2 + 64) - v15, -*(_BYTE *)(a2 + 68));
  v17 = (((CC_CAST_S_table1[v16] + CC_CAST_S_table0[BYTE1(v16)]) ^ CC_CAST_S_table2[HIBYTE(v16)])
       - CC_CAST_S_table3[BYTE2(v16)]) ^ v13;
  v18 = __ROR4__(v17 ^ *(_DWORD *)(a2 + 56), -*(_BYTE *)(a2 + 60));
  v19 = CC_CAST_S_table3[BYTE2(v18)] ^ v15 ^ (CC_CAST_S_table0[BYTE1(v18)]
                                            - CC_CAST_S_table1[v18]
                                            + CC_CAST_S_table2[HIBYTE(v18)]);
  v20 = __ROR4__(v19 + *(_DWORD *)(a2 + 48), -*(_BYTE *)(a2 + 52));
  v21 = ((CC_CAST_S_table1[v20] ^ CC_CAST_S_table0[BYTE1(v20)])
       - CC_CAST_S_table2[HIBYTE(v20)]
       + CC_CAST_S_table3[BYTE2(v20)]) ^ v17;
  v22 = __ROR4__(*(_DWORD *)(a2 + 40) - v21, -*(_BYTE *)(a2 + 44));
  v23 = (((CC_CAST_S_table1[v22] + CC_CAST_S_table0[BYTE1(v22)]) ^ CC_CAST_S_table2[HIBYTE(v22)])
       - CC_CAST_S_table3[BYTE2(v22)]) ^ v19;
  v24 = __ROR4__(v23 ^ *(_DWORD *)(a2 + 32), -*(_BYTE *)(a2 + 36));
  v25 = CC_CAST_S_table3[BYTE2(v24)] ^ v21 ^ (CC_CAST_S_table0[BYTE1(v24)]
                                            - CC_CAST_S_table1[v24]
                                            + CC_CAST_S_table2[HIBYTE(v24)]);
  v26 = __ROR4__(v25 + *(_DWORD *)(a2 + 24), -*(_BYTE *)(a2 + 28));
  v27 = ((CC_CAST_S_table1[v26] ^ CC_CAST_S_table0[BYTE1(v26)])
       - CC_CAST_S_table2[HIBYTE(v26)]
       + CC_CAST_S_table3[BYTE2(v26)]) ^ v23;
  v28 = __ROR4__(*(_DWORD *)(a2 + 16) - v27, -*(_BYTE *)(a2 + 20));
  v29 = (((CC_CAST_S_table1[v28] + CC_CAST_S_table0[BYTE1(v28)]) ^ CC_CAST_S_table2[HIBYTE(v28)])
       - CC_CAST_S_table3[BYTE2(v28)]) ^ v25;
  v30 = __ROR4__(v29 ^ *(_DWORD *)(a2 + 8), -*(_BYTE *)(a2 + 12));
  v31 = CC_CAST_S_table3[BYTE2(v30)] ^ v27 ^ (CC_CAST_S_table0[BYTE1(v30)]
                                            - CC_CAST_S_table1[v30]
                                            + CC_CAST_S_table2[HIBYTE(v30)]);
  v32 = __ROR4__(v31 + *(_DWORD *)a2, -*(_BYTE *)(a2 + 4));
  *result = ((CC_CAST_S_table1[v32] ^ CC_CAST_S_table0[BYTE1(v32)])
           - CC_CAST_S_table2[HIBYTE(v32)]
           + CC_CAST_S_table3[BYTE2(v32)]) ^ v29;
  result[1] = v31;
  return result;
}

uint64_t ccrsa_generate_key_deterministic(unint64_t a1, uint64_t *a2, unint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t (**a10)(_QWORD, unint64_t, uint64_t))
{
  char v14;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t *v44;
  unint64_t v45;
  unsigned __int8 *v46;
  uint64_t (*v47[3])(_QWORD, unint64_t, uint64_t);
  _QWORD v48[4];
  void (*v49)(uint64_t);
  _OWORD v50[3];
  uint64_t v51;
  _QWORD v52[4];
  char v53;
  _OWORD v54[34];
  uint64_t v55;

  v14 = 0;
  v55 = *MEMORY[0x1E0C874D8];
  v53 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v14 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v14 = 1;
    }
  }
  v53 = v14;
  if (a9 == 1)
  {
    memset(v54, 0, 512);
    v20 = ccaes_cbc_encrypt_mode();
    v21 = ccdrbg_df_bc_init(v54, v20, 0x10uLL);
    if ((_DWORD)v21)
    {
      v42 = v21;
    }
    else
    {
      v46 = a4;
      v44 = a2;
      v45 = a3;
      v52[0] = ccaes_ctr_crypt_mode();
      v52[1] = 16;
      v52[2] = 0;
      v52[3] = v54;
      v51 = 0;
      memset(v50, 0, sizeof(v50));
      ccdrbg_factory_nistctr(v50, (uint64_t)v52);
      v22 = (a1 + 63) >> 6;
      v23 = sizeof_struct_ccrns_mul_modulus();
      v24 = sizeof_struct_ccpolyzp_po2cyc();
      v25 = (v23 + v24 - 1) / v24;
      v26 = 11 * v22 + 1;
      v27 = CCRSA_CRT_POWER_BLINDED_WORKSPACE_N(v22);
      if (v25 + v26 <= v27)
        v28 = v27;
      else
        v28 = v25 + v26;
      v29 = 7 * ((a1 + 63) >> 6);
      v30 = v28 + v29;
      v31 = 21 * v22 + 2;
      if (v30 <= v25 + v31)
        v30 = v25 + v31;
      v32 = cc_malloc_clear((*(_QWORD *)&v50[0] + 8 * v30 + 7) & 0xFFFFFFFFFFFFFFF8);
      v48[0] = v32;
      v33 = sizeof_struct_ccrns_mul_modulus();
      v34 = sizeof_struct_ccpolyzp_po2cyc();
      v35 = (v33 + v34 - 1) / v34;
      v36 = v35 + v26;
      v37 = CCRSA_CRT_POWER_BLINDED_WORKSPACE_N((a1 + 63) >> 6);
      if (v36 <= v37)
        v38 = v37;
      else
        v38 = v36;
      v39 = v38 + v29;
      v40 = v35 + v31;
      if (v39 > v35 + v31)
        v40 = v39;
      v48[1] = v40 + ((unint64_t)(*(_QWORD *)&v50[0] + 7) >> 3);
      v48[2] = 0;
      v48[3] = cc_ws_alloc;
      v49 = cc_ws_free;
      if (v32)
      {
        v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))cc_ws_alloc(v48, (unint64_t)(*(_QWORD *)&v50[0] + 7) >> 3);
        if (!ccdrbg_init((uint64_t)v50))
        {
          memset(v47, 0, sizeof(v47));
          if (!ccrng_drbg_init_withdrbg((uint64_t (**)(uint64_t, uint64_t, uint64_t))v47, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v50, v41)&& !ccrsa_generate_key_internal_ws((uint64_t)v48, a1, v44, v45, v46, v47, a10))
          {
            ccdrbg_done((uint64_t)v50, (uint64_t)v41);
          }
        }
        v49((uint64_t)v48);
        v42 = 0;
      }
      else
      {
        v42 = 4294967283;
      }
    }
  }
  else
  {
    v42 = 4294967289;
  }
  cc_disable_dit(&v53);
  return v42;
}

uint64_t cced448_verify_internal(uint64_t *a1, unint64_t a2, char *a3, char *a4, char *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  void *v43;
  __int128 v44;
  uint64_t (*v45)(void **, uint64_t);
  void (*v46)(uint64_t);
  char v47[57];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C874D8];
  v43 = cc_malloc_clear(0xA48uLL);
  v44 = xmmword_1DEE28A80;
  v45 = (uint64_t (*)(void **, uint64_t))cc_ws_alloc;
  v46 = cc_ws_free;
  if (!v43)
    return 4294967283;
  v10 = *a1;
  v11 = cczp_n((uint64_t)a1);
  v12 = cc_ws_alloc(&v43, v11);
  v13 = (unint64_t *)v45(&v43, v11);
  v14 = (_QWORD *)v45(&v43, 3 * v11);
  if (v11)
  {
    v15 = (unint64_t *)(a4 + 57);
    v16 = v13;
    v17 = v11;
    do
    {
      v18 = *v15++;
      *v16++ = v18;
      --v17;
    }
    while (v17);
  }
  if (a4[113]
    || (v19 = (unint64_t *)cczp_prime((uint64_t)&a1[5 * v10 + 4]), (ccn_cmp(v11, v13, v19) & 0x80000000) == 0))
  {
    v36 = 4294967150;
  }
  else
  {
    v42 = (uint64_t)v13;
    v20 = cczp_n((uint64_t)a1);
    if ((a5[56] & 0x7F) == 0)
    {
      v21 = v20;
      v41 = (uint64_t *)v12;
      v22 = *a1;
      v23 = &v14[*a1];
      if (v20)
      {
        v24 = a5;
        v25 = &v14[*a1];
        v26 = v20;
        do
        {
          v27 = *(_QWORD *)v24;
          v24 += 8;
          *v25++ = v27;
          --v26;
        }
        while (v26);
      }
      v28 = (unint64_t *)cczp_prime((uint64_t)a1);
      if ((ccn_cmp(v21, v23, v28) & 0x80000000) != 0)
      {
        v39 = a3;
        v40 = a2;
        v29 = &v14[2 * v22];
        v38 = *((_QWORD *)&v44 + 1);
        v45(&v43, v21);
        v30 = (unint64_t *)v45(&v43, v21);
        v31 = (unint64_t *)v45(&v43, v21);
        ccn_seti(v21, v29, 1);
        cczp_sqr_ws((uint64_t)&v43, (uint64_t)a1);
        cczp_mul_ws((uint64_t)&v43, (uint64_t)a1);
        cczp_sub_ws((uint64_t)&v43, (uint64_t)a1);
        cczp_sub_ws((uint64_t)&v43, (uint64_t)a1);
        cczp_sqr_ws((uint64_t)&v43, (uint64_t)a1);
        cczp_mul_ws((uint64_t)&v43, (uint64_t)a1);
        cczp_sqr_ws((uint64_t)&v43, (uint64_t)a1);
        cczp_mul_ws((uint64_t)&v43, (uint64_t)a1);
        cczp_mul_ws((uint64_t)&v43, (uint64_t)a1);
        cczp_mul_ws((uint64_t)&v43, (uint64_t)a1);
        v32 = cczp_power_fast_ws((uint64_t)&v43, (uint64_t)a1, v14, v14, kPsub3div4);
        if ((_DWORD)v32)
        {
LABEL_29:
          v36 = v32;
          goto LABEL_24;
        }
        cczp_mul_ws((uint64_t)&v43, (uint64_t)a1);
        cczp_mul_ws((uint64_t)&v43, (uint64_t)a1);
        cczp_sqr_ws((uint64_t)&v43, (uint64_t)a1);
        cczp_mul_ws((uint64_t)&v43, (uint64_t)a1);
        cczp_from_ws((uint64_t)&v43, (uint64_t)a1);
        cczp_from_ws((uint64_t)&v43, (uint64_t)a1);
        if (!ccn_cmp(v21, v30, v31))
        {
          cczp_from_ws((uint64_t)&v43, (uint64_t)a1);
          v33 = a5[56];
          if (ccn_n(v21, v14) || (v33 & 0x80000000) == 0)
          {
            if ((*v14 & 1) == (unint64_t)v33 >> 7)
              cczp_negate((uint64_t)a1, v14, v14);
            *((_QWORD *)&v44 + 1) = v38;
            cced448_shake_to_scalar_ws((uint64_t)&v43, a1, v41, 0x39uLL, a4, 0x39uLL, a5, v40, v39);
            cced448_double_scalar_mult_ws((uint64_t)&v43, a1, (char *)v14, v42, (uint64_t)v41);
            v32 = ccec_affinify_ws((uint64_t)&v43, (uint64_t)a1);
            if (!(_DWORD)v32)
            {
              v34 = 0;
              v35 = &v14[*a1];
              do
              {
                *(_QWORD *)&v47[v34 * 8] = v35[v34];
                ++v34;
              }
              while (v34 != 7);
              v47[56] = *(_BYTE *)v14 << 7;
              if (cc_cmp_safe(57, v47, a4))
                v36 = 4294967150;
              else
                v36 = 0;
              goto LABEL_24;
            }
            goto LABEL_29;
          }
        }
      }
    }
    v36 = 4294967289;
  }
LABEL_24:
  *((_QWORD *)&v44 + 1) = 0;
  v46((uint64_t)&v43);
  return v36;
}

uint64_t cced448_verify(unint64_t a1, char *a2, char *a3, char *a4)
{
  char v8;
  uint64_t *v14;
  uint64_t v15;
  char v17;

  v8 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v17 = v8;
  v14 = (uint64_t *)ccec_cp_ed448();
  v15 = cced448_verify_internal(v14, a1, a2, a3, a4);
  cc_disable_dit(&v17);
  return v15;
}

uint64_t cckeccak_absorb_blocks(uint64_t result, unint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(_QWORD *))
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  if (a3)
  {
    v9 = (_QWORD *)result;
    v10 = 0;
    if (a2 >> 3 <= 1)
      v11 = 1;
    else
      v11 = a2 >> 3;
    do
    {
      v12 = v9;
      v13 = v11;
      if (a2 >= 8)
      {
        do
        {
          v14 = *a4++;
          *v12++ ^= v14;
          --v13;
        }
        while (v13);
      }
      result = a5(v9);
      ++v10;
    }
    while (v10 != a3);
  }
  return result;
}

uint64_t cckeccak_absorb_and_pad(uint64_t result, unint64_t a2, unint64_t a3, uint64_t *a4, unsigned int a5, uint64_t (*a6)(_QWORD *))
{
  _QWORD *v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];

  v10 = (_QWORD *)result;
  v25[1] = *MEMORY[0x1E0C874D8];
  v11 = a3 / a2;
  if (a2 <= a3)
  {
    v13 = 0;
    if (a2 >> 3 <= 1)
      v14 = 1;
    else
      v14 = a2 >> 3;
    v15 = a4;
    do
    {
      v16 = v10;
      v17 = v14;
      if (a2 >= 8)
      {
        do
        {
          v18 = *v15++;
          *v16++ ^= v18;
          --v17;
        }
        while (v17);
      }
      result = a6(v10);
      ++v13;
    }
    while (v13 != v11);
  }
  v19 = a3 - v11 * a2;
  v20 = (uint64_t *)((char *)a4 + v11 * a2);
  v21 = v19 >> 3;
  if (v19 >= 8)
  {
    v22 = 0;
    if (v21 <= 1)
      v23 = 1;
    else
      v23 = v19 >> 3;
    do
    {
      v24 = *v20++;
      v10[v22++] ^= v24;
    }
    while (v23 != v22);
  }
  else
  {
    v22 = 0;
  }
  if ((a3 & 7) != 0)
  {
    v25[0] = 0;
    __memcpy_chk();
    v10[v22] = v10[v22];
    result = cc_clear(8uLL, v25);
  }
  v10[v21] ^= (unint64_t)a5 << (8 * (v19 & 7u));
  *(_QWORD *)((char *)v10 + ((a2 - 1) & 0xFFFFFFFFFFFFFFF8)) ^= 128 << (8 * ((a2 - 1) & 7));
  return result;
}

uint64_t cckeccak_squeeze(uint64_t result, unint64_t a2, unint64_t a3, _QWORD *a4, uint64_t (*a5)(uint64_t *))
{
  unint64_t v7;
  uint64_t *v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  v7 = a3;
  v8 = (uint64_t *)result;
  v18[1] = *MEMORY[0x1E0C874D8];
  if (a3 >= a2)
  {
    if (a2 >> 3 <= 1)
      v10 = 1;
    else
      v10 = a2 >> 3;
    do
    {
      result = a5(v8);
      v11 = v8;
      v12 = v10;
      if (a2 >= 8)
      {
        do
        {
          v13 = *v11++;
          *a4++ = v13;
          --v12;
        }
        while (v12);
      }
      v7 -= a2;
    }
    while (v7 >= a2);
  }
  if (v7)
  {
    result = a5(v8);
    if (v7 >= 8)
    {
      v14 = v7 >> 3;
      v15 = v8;
      v16 = v7 >> 3;
      do
      {
        v17 = *v15++;
        *a4++ = v17;
        --v16;
      }
      while (v16);
    }
    else
    {
      v14 = 0;
    }
    if ((v7 & 7) != 0)
    {
      v18[0] = v8[v14];
      memcpy(a4, v18, v7 & 7);
      return cc_clear(8uLL, v18);
    }
  }
  return result;
}

uint64_t frandom(int8x16_t *a1, void (**a2)(_QWORD, uint64_t, int8x16_t *))
{
  unsigned int v4;
  int v5;
  int8x16_t v6;
  int v7;
  uint64_t v8;

  v4 = 0;
  while (1)
  {
    (*a2)(a2, 32, a1);
    v5 = a1[1].i8[15] & 0x7F;
    a1[1].i8[15] = v5;
    v6 = vorrq_s8(a1[1], *a1);
    if (vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)))
    {
      v7 = v5 ^ 0x7F;
      v8 = 30;
      do
        v7 |= a1->u8[v8--] ^ 0xFF;
      while (v8);
      if (v7 | ((unsigned __int16)(a1->u8[0] - 237) >> 8))
        break;
    }
    if (v4++ >= 9)
      return 0xFFFFFFFFLL;
  }
  return 0;
}

BOOL ccec_pairwise_consistency_check(uint64_t **a1, uint64_t (**a2)(_QWORD, unint64_t, void *))
{
  char v4;
  uint64_t *v10;
  int v11;
  _BOOL8 v12;
  _QWORD v14[4];
  void (*v15)(uint64_t);
  char v16;

  v4 = 0;
  v16 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v16 = v4;
  v10 = *a1;
  v14[0] = cc_malloc_clear(392 * **a1);
  v14[1] = 49 * *v10;
  v14[2] = 0;
  v14[3] = cc_ws_alloc;
  v15 = cc_ws_free;
  if (v14[0])
  {
    v11 = ccec_pairwise_consistency_check_ws((uint64_t)v14, a1, a2);
    v15((uint64_t)v14);
    v12 = v11 == 0;
  }
  else
  {
    v12 = 0;
  }
  cc_disable_dit(&v16);
  return v12;
}

uint64_t ccec_compact_generate_key_checksign_ws(uint64_t a1, uint64_t (**a2)(_QWORD, unint64_t, void *), uint64_t a3)
{
  uint64_t result;

  if (*(_BYTE *)(a3 + 8) != 2)
    return 4294967210;
  result = ccec_sign_internal_ws(a1, (unint64_t **)(a3 + 16 + 16 * *(_QWORD *)a3), 0x20uLL, FAKE_DIGEST, (_QWORD *)(a3 + 16), (void *)(a3 + 16 + 8 * *(_QWORD *)a3), a2);
  if (!(_DWORD)result)
    *(_BYTE *)(a3 + 8) = 3;
  return result;
}

uint64_t ccec_compact_generate_key_checkverify_and_extract_ws(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x1E0C874D8];
  *a3 = 0;
  if (*(_BYTE *)(a2 + 8) != 3)
    return 4294967210;
  v7[0] = 0;
  v7[1] = 0;
  v5 = ccec_verify_internal_ws(a1, (unint64_t **)(a2 + 16 + 16 * *(_QWORD *)a2), 0x20uLL, FAKE_DIGEST, (unint64_t *)(a2 + 16), (unint64_t *)(a2 + 16 + 8 * *(_QWORD *)a2), (uint64_t)v7);
  if (!(_DWORD)v5 && !cc_cmp_safe(16, CCEC_FAULT_CANARY, (char *)v7))
  {
    *(_BYTE *)(a2 + 8) = 4;
    *a3 = a2 + 16 * *(_QWORD *)a2 + 16;
  }
  return v5;
}

_DWORD *rmd160_compress(_DWORD *result, uint64_t a2, _DWORD *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  unsigned int v99;
  int v100;
  int v101;
  int v102;
  unint64_t v103;
  int v104;
  int v105;
  int v106;
  unsigned int v107;
  int v108;
  int v109;
  int v110;
  unint64_t v111;
  int v112;
  int v113;
  int v114;
  unsigned int v115;
  int v116;
  int v117;
  int v118;
  unint64_t v119;
  int v120;
  int v121;
  int v122;
  unsigned int v123;
  int v124;
  int v125;
  int v126;
  unint64_t v127;
  int v128;
  int v129;
  int v130;
  unsigned int v131;
  int v132;
  int v133;
  int v134;
  unint64_t v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  unsigned int v141;
  int v142;
  unsigned int v143;
  int v144;
  unsigned int v145;
  int v146;
  unint64_t v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  int v151;
  int v152;
  unint64_t v153;
  int v154;
  unsigned int v155;
  int v156;
  unint64_t v157;
  int v158;
  int v159;
  unsigned int v160;
  unint64_t v161;
  int v162;
  int v163;
  unsigned int v164;
  int v165;
  int v166;
  unsigned int v167;
  unint64_t v168;
  int v169;
  int v170;
  int v171;
  unint64_t v172;
  unsigned int v173;
  int v174;
  int v175;
  unint64_t v176;
  int v177;
  unsigned int v178;
  int v179;
  unsigned int v180;
  unint64_t v181;
  int v182;
  int v183;
  int v184;
  unint64_t v185;
  int v186;
  int v187;
  unsigned int v188;
  unint64_t v189;
  int v190;
  int v191;
  unsigned int v192;
  int v193;
  unsigned int v194;
  unint64_t v195;
  int v196;
  int v197;
  unsigned int v198;
  unint64_t v199;
  unsigned int v200;
  int v201;
  int v202;
  unint64_t v203;
  int v204;
  unsigned int v205;
  int v206;
  unsigned int v207;
  unint64_t v208;
  int v209;
  int v210;
  unint64_t v211;
  int v212;
  int v213;
  unsigned int v214;
  unint64_t v215;
  int v216;
  int v217;
  unsigned int v218;
  unint64_t v219;
  int v220;
  int v221;
  unsigned int v222;
  unsigned int v223;
  int v224;
  unint64_t v225;
  unsigned int v226;
  int v227;
  unint64_t v228;
  int v229;
  int v230;
  unsigned int v231;
  unint64_t v232;
  int v233;
  unsigned int v234;
  unint64_t v235;
  int v236;
  int v237;
  unsigned int v238;
  unint64_t v239;
  int v240;
  int v241;
  unsigned int v242;
  int v243;
  unint64_t v244;
  int v245;
  int v246;
  int v247;
  unint64_t v248;
  int v249;
  int v250;
  unsigned int v251;
  int v252;
  int v253;
  unint64_t v254;
  unsigned int v255;
  int v256;
  unint64_t v257;
  int v258;
  int v259;
  unsigned int v260;
  unint64_t v261;
  int v262;
  unsigned int v263;
  unint64_t v264;
  int v265;
  int v266;
  unsigned int v267;
  unint64_t v268;
  int v269;
  int v270;
  unsigned int v271;
  int v272;
  unint64_t v273;
  int v274;
  int v275;
  unint64_t v276;
  int v277;
  int v278;
  unsigned int v279;
  unsigned int v280;
  unint64_t v281;
  unsigned int v282;
  int v283;
  unint64_t v284;
  int v285;
  int v286;
  unsigned int v287;
  unint64_t v288;
  int v289;
  unsigned int v290;
  unint64_t v291;
  int v292;
  int v293;
  unsigned int v294;
  unint64_t v295;
  int v296;
  int v297;
  unsigned int v298;
  int v299;
  unint64_t v300;
  int v301;
  int v302;
  int v303;
  int v304;
  unint64_t v305;
  int v306;
  int v307;
  unsigned int v308;
  unint64_t v309;
  int v310;
  int v311;
  unsigned int v312;
  unint64_t v313;
  int v314;
  int v315;
  int v316;
  unint64_t v317;
  unsigned int v318;
  int v319;
  int v320;
  unint64_t v321;
  int v322;
  int v323;
  unsigned int v324;
  unint64_t v325;
  int v326;
  unsigned int v327;
  int v328;
  int v329;
  unint64_t v330;
  int v331;
  int v332;
  unsigned int v333;
  unint64_t v334;
  int v335;
  int v336;
  int v337;
  int v338;
  int v339;
  unsigned int v340;
  int v341;
  unint64_t v342;
  int v343;
  int v344;
  unsigned int v345;
  unint64_t v346;
  int v347;
  int v348;
  int v349;
  int v350;
  int v351;
  unsigned int v352;
  int v353;
  unint64_t v354;
  int v355;
  int v356;
  unsigned int v357;
  unint64_t v358;
  int v359;
  int v360;
  int v361;
  int v362;
  int v363;
  unsigned int v364;
  int v365;
  unint64_t v366;
  int v367;
  int v368;
  unsigned int v369;
  unint64_t v370;
  int v371;
  int v372;
  int v373;
  int v374;
  int v375;
  int v376;
  int v377;
  unint64_t v378;
  int v379;
  int v380;
  unsigned int v381;
  unint64_t v382;
  int v383;
  int v384;
  int v385;
  int v386;
  int v387;
  int v388;
  int v389;
  unint64_t v390;
  int v391;
  int v392;
  unsigned int v393;
  unint64_t v394;
  int v395;
  int v396;
  int v397;
  unsigned int v398;
  int v399;
  int v400;
  int v401;
  unint64_t v402;
  int v403;
  int v404;
  int v405;
  unint64_t v406;
  int v407;
  int v408;
  int v409;
  int v410;
  int v411;
  int v412;
  int v413;
  unint64_t v414;
  int v415;
  int v416;
  unsigned int v417;
  unint64_t v418;
  int v419;
  int v420;
  int v421;
  int v422;
  int v423;
  int v424;
  int v425;
  int v426;
  int v427;
  unint64_t v428;
  int v429;
  int v430;
  int v431;
  int v432;
  int v433;
  int v434;
  int v435;
  int v436;
  int v437;
  int v438;
  int v439;
  int v440;
  int v441;
  int v442;
  int v443;
  int v444;
  unsigned int v445;
  int v446;
  int v447;
  int v448;
  int v449;
  int v450;
  int v451;
  int v452;
  int v453;
  int v454;
  int v455;
  int v456;
  unint64_t v457;
  int v458;
  int v459;
  int v460;
  int v461;
  int v462;
  unsigned int v463;
  int v464;
  int v465;
  int v466;
  int v467;
  int v468;
  int v469;
  int v470;
  int v471;
  int v472;
  unsigned int v473;
  int v474;
  int v475;
  int v476;
  int v477;
  int v478;
  int v479;
  int v480;
  unint64_t v481;
  int v482;
  int v483;
  int v484;
  int v485;
  int v486;
  unsigned int v487;
  int v488;
  unsigned int v489;
  int v490;
  unsigned int v491;
  unsigned int v492;
  unint64_t v493;
  int v494;
  int v495;
  unsigned int v496;
  unint64_t v497;
  int v498;
  int v499;
  unsigned int v500;
  unint64_t v501;
  int v502;
  int v503;
  unsigned int v504;
  unint64_t v505;
  int v506;
  int v507;
  unsigned int v508;
  unint64_t v509;
  int v510;
  int v511;
  unsigned int v512;
  unint64_t v513;
  int v514;
  int v515;
  unsigned int v516;
  unint64_t v517;
  int v518;
  int v519;
  unsigned int v520;
  unint64_t v521;
  int v522;
  int v523;
  unsigned int v524;
  unint64_t v525;
  int v526;
  int v527;
  int v528;
  unsigned int v529;
  unint64_t v530;
  int v531;
  int v532;
  unsigned int v533;
  unint64_t v534;
  int v535;
  int v536;
  int v537;
  unint64_t v538;
  int v539;
  int v540;
  int v541;
  unint64_t v542;
  int v543;
  int v544;
  unsigned int v545;
  unint64_t v546;
  int v547;
  int v548;
  int v549;
  int v550;
  int v551;
  int v552;
  unint64_t v553;
  int v554;
  int v555;
  unint64_t v556;
  int v557;
  int v558;
  int v559;
  int v560;
  int v561;
  _DWORD *v562;
  int v563;
  int v564;
  int v565;
  int v566;
  int v567;
  uint64_t v568;
  int v569;
  int v570;
  int v571;
  int v572;
  int v573;
  _DWORD *v574;

  v562 = result;
  if (a2)
  {
    v3 = *result;
    v4 = result[1];
    v6 = result[2];
    v5 = result[3];
    v7 = result[4];
    do
    {
      v573 = v3;
      v571 = v6;
      v574 = a3;
      v568 = a2;
      v8 = *a3;
      v9 = a3[1];
      HIDWORD(v11) = v6;
      LODWORD(v11) = v6;
      v10 = v11 >> 22;
      v12 = a3[2];
      v13 = a3[3];
      v14 = a3[4];
      v15 = a3[5];
      v16 = a3[6];
      v17 = a3[7];
      v18 = a3[8];
      v19 = a3[9];
      HIDWORD(v11) = (v6 ^ v4 ^ v5) + v3 + *a3;
      LODWORD(v11) = HIDWORD(v11);
      v20 = (v11 >> 21) + v7;
      v572 = v7;
      HIDWORD(v11) = v9 + v7 + (v4 ^ __ROR4__(v6, 22) ^ v20);
      LODWORD(v11) = HIDWORD(v11);
      v21 = v11 >> 18;
      HIDWORD(v11) = v4;
      LODWORD(v11) = v4;
      v22 = v11 >> 22;
      v23 = a3[10];
      v24 = a3[11];
      v25 = v21 + v5;
      v26 = a3[12];
      LODWORD(v11) = v12 + v5 + (v20 ^ __ROR4__(v4, 22) ^ v25);
      HIDWORD(v11) = v11;
      v27 = v11 >> 17;
      v28 = a3[13];
      v29 = a3[14];
      v30 = a3[15];
      HIDWORD(v11) = v20;
      LODWORD(v11) = v20;
      v31 = v11 >> 22;
      v567 = v10;
      v32 = v27 + v10;
      LODWORD(v11) = v13 + v10 + (v25 ^ __ROR4__(v20, 22) ^ v32);
      HIDWORD(v11) = v11;
      v33 = (v11 >> 20) + v22;
      HIDWORD(v11) = v25;
      LODWORD(v11) = v25;
      v34 = v11 >> 22;
      LODWORD(v11) = v14 + v22 + (v32 ^ __ROR4__(v25, 22) ^ v33);
      HIDWORD(v11) = v11;
      v35 = v11 >> 27;
      HIDWORD(v11) = v32;
      LODWORD(v11) = v32;
      v36 = v11 >> 22;
      v37 = v35 + v31;
      LODWORD(v11) = v31 + v15 + (v33 ^ __ROR4__(v32, 22) ^ v37);
      HIDWORD(v11) = v11;
      v38 = (v11 >> 24) + v34;
      HIDWORD(v11) = v33;
      LODWORD(v11) = v33;
      v39 = v11 >> 22;
      LODWORD(v11) = v34 + v16 + (v37 ^ __ROR4__(v33, 22) ^ v38);
      HIDWORD(v11) = v11;
      v40 = v11 >> 25;
      HIDWORD(v11) = v37;
      LODWORD(v11) = v37;
      v41 = v11 >> 22;
      v42 = v40 + v36;
      LODWORD(v11) = v36 + v17 + (v38 ^ __ROR4__(v37, 22) ^ v42);
      HIDWORD(v11) = v11;
      v43 = (v11 >> 23) + v39;
      HIDWORD(v11) = v38;
      LODWORD(v11) = v38;
      v44 = v11 >> 22;
      LODWORD(v11) = v39 + v18 + (v42 ^ __ROR4__(v38, 22) ^ v43);
      HIDWORD(v11) = v11;
      v45 = v11 >> 21;
      HIDWORD(v11) = v42;
      LODWORD(v11) = v42;
      v46 = v11 >> 22;
      v47 = v45 + v41;
      v48 = v19;
      LODWORD(v11) = v41 + v19 + (v43 ^ __ROR4__(v42, 22) ^ v47);
      HIDWORD(v11) = v11;
      v49 = (v11 >> 19) + v44;
      HIDWORD(v11) = v43;
      LODWORD(v11) = v43;
      v50 = v11 >> 22;
      LODWORD(v11) = v44 + v23 + (v47 ^ __ROR4__(v43, 22) ^ v49);
      HIDWORD(v11) = v11;
      v51 = v11 >> 18;
      HIDWORD(v11) = v47;
      LODWORD(v11) = v47;
      v52 = v11 >> 22;
      v53 = v51 + v46;
      v54 = v24;
      LODWORD(v11) = v46 + v24 + (v49 ^ __ROR4__(v47, 22) ^ v53);
      HIDWORD(v11) = v11;
      v55 = (v11 >> 17) + v50;
      HIDWORD(v11) = v49;
      LODWORD(v11) = v49;
      v56 = v11 >> 22;
      LODWORD(v11) = v50 + v26 + (v53 ^ __ROR4__(v49, 22) ^ v55);
      HIDWORD(v11) = v11;
      v57 = v11 >> 26;
      HIDWORD(v11) = v53;
      LODWORD(v11) = v53;
      v58 = v11 >> 22;
      v59 = v57 + v52;
      LODWORD(v11) = v52 + v28 + (v55 ^ __ROR4__(v53, 22) ^ v59);
      HIDWORD(v11) = v11;
      v60 = (v11 >> 25) + v56;
      HIDWORD(v11) = v55;
      LODWORD(v11) = v55;
      v61 = v11 >> 22;
      LODWORD(v11) = v56 + v29 + (v59 ^ __ROR4__(v55, 22) ^ v60);
      HIDWORD(v11) = v11;
      v62 = v11 >> 23;
      HIDWORD(v11) = v59;
      LODWORD(v11) = v59;
      v63 = v11 >> 22;
      v64 = v62 + v58;
      LODWORD(v11) = v58 + v30 + (v60 ^ __ROR4__(v59, 22) ^ v64);
      HIDWORD(v11) = v11;
      v65 = (v11 >> 24) + v61;
      HIDWORD(v11) = v60;
      LODWORD(v11) = v60;
      v66 = v11 >> 22;
      HIDWORD(v11) = v17 + 1518500249 + v61 + (v66 & ~v65) + (v65 & v64);
      LODWORD(v11) = HIDWORD(v11);
      v67 = (v11 >> 25) + v63;
      HIDWORD(v11) = v64;
      LODWORD(v11) = v64;
      v68 = v11 >> 22;
      HIDWORD(v11) = v14 + 1518500249 + v63 + (v68 & ~v67) + (v67 & v65);
      LODWORD(v11) = HIDWORD(v11);
      v69 = (v11 >> 26) + v66;
      HIDWORD(v11) = v65;
      LODWORD(v11) = v65;
      v70 = v11 >> 22;
      HIDWORD(v11) = v28 + 1518500249 + v66 + (v70 & ~v69) + (v69 & v67);
      LODWORD(v11) = HIDWORD(v11);
      v71 = (v11 >> 24) + v68;
      HIDWORD(v11) = v67;
      LODWORD(v11) = v67;
      v72 = v11 >> 22;
      HIDWORD(v11) = v9 + 1518500249 + v68 + (v72 & ~v71) + (v71 & v69);
      LODWORD(v11) = HIDWORD(v11);
      v73 = (v11 >> 19) + v70;
      HIDWORD(v11) = v69;
      LODWORD(v11) = v69;
      v74 = v11 >> 22;
      HIDWORD(v11) = v23 + 1518500249 + v70 + (v74 & ~v73) + (v73 & v71);
      LODWORD(v11) = HIDWORD(v11);
      v75 = (v11 >> 21) + v72;
      HIDWORD(v11) = v71;
      LODWORD(v11) = v71;
      v76 = v11 >> 22;
      v566 = v16;
      HIDWORD(v11) = v16 + 1518500249 + v72 + (v76 & ~v75) + (v75 & v73);
      LODWORD(v11) = HIDWORD(v11);
      v77 = (v11 >> 23) + v74;
      HIDWORD(v11) = v73;
      LODWORD(v11) = v73;
      v78 = v11 >> 22;
      HIDWORD(v11) = v30 + 1518500249 + v74 + (v78 & ~v77) + (v77 & v75);
      LODWORD(v11) = HIDWORD(v11);
      v79 = (v11 >> 25) + v76;
      HIDWORD(v11) = v75;
      LODWORD(v11) = v75;
      v80 = v11 >> 22;
      v570 = v13;
      HIDWORD(v11) = v13 + 1518500249 + v76 + (v80 & ~v79) + (v79 & v77);
      LODWORD(v11) = HIDWORD(v11);
      v81 = (v11 >> 17) + v78;
      HIDWORD(v11) = v77;
      LODWORD(v11) = v77;
      v82 = v11 >> 22;
      HIDWORD(v11) = v26 + 1518500249 + v78 + (v82 & ~v81) + (v81 & v79);
      LODWORD(v11) = HIDWORD(v11);
      v83 = (v11 >> 25) + v80;
      HIDWORD(v11) = v79;
      LODWORD(v11) = v79;
      v84 = v11 >> 22;
      HIDWORD(v11) = v8 + 1518500249 + v80 + (v84 & ~v83) + (v83 & v81);
      LODWORD(v11) = HIDWORD(v11);
      v85 = (v11 >> 20) + v82;
      HIDWORD(v11) = v81;
      LODWORD(v11) = v81;
      v86 = v11 >> 22;
      HIDWORD(v11) = v48 + 1518500249 + v82 + (v86 & ~v85) + (v85 & v83);
      LODWORD(v11) = HIDWORD(v11);
      v87 = (v11 >> 17) + v84;
      HIDWORD(v11) = v83;
      LODWORD(v11) = v83;
      v88 = v11 >> 22;
      HIDWORD(v11) = v15 + 1518500249 + v84 + (v88 & ~v87) + (v87 & v85);
      LODWORD(v11) = HIDWORD(v11);
      v89 = (v11 >> 23) + v86;
      HIDWORD(v11) = v85;
      LODWORD(v11) = v85;
      v90 = v11 >> 22;
      HIDWORD(v11) = v12 + 1518500249 + v86 + (v90 & ~v89) + (v89 & v87);
      LODWORD(v11) = HIDWORD(v11);
      v91 = (v11 >> 21) + v88;
      HIDWORD(v11) = v87;
      LODWORD(v11) = v87;
      v92 = v11 >> 22;
      v93 = v29 + 1518500249 + v88 + (v92 & ~v91) + (v91 & v89);
      HIDWORD(v11) = v89;
      LODWORD(v11) = v89;
      v94 = v11 >> 22;
      HIDWORD(v11) = v93;
      LODWORD(v11) = v93;
      v95 = (v11 >> 25) + v90;
      HIDWORD(v11) = v54 + 1518500249 + v90 + (v94 & ~v95) + (v95 & v91);
      LODWORD(v11) = HIDWORD(v11);
      v96 = v11 >> 19;
      HIDWORD(v11) = v91;
      LODWORD(v11) = v91;
      v97 = v11 >> 22;
      v98 = v96 + v92;
      HIDWORD(v11) = v18 + 1518500249 + v92 + (v97 & ~v98) + (v98 & v95);
      LODWORD(v11) = HIDWORD(v11);
      v99 = (v11 >> 20) + v94;
      HIDWORD(v11) = v95;
      LODWORD(v11) = v95;
      v100 = v11 >> 22;
      LODWORD(v11) = v13 + 1859775393 + v94 + ((v99 | ~v98) ^ __ROR4__(v95, 22));
      HIDWORD(v11) = v11;
      v101 = (v11 >> 21) + v97;
      HIDWORD(v11) = v98;
      LODWORD(v11) = v98;
      v102 = v11 >> 22;
      v569 = v23;
      v103 = __PAIR64__(v99, __ROR4__(v98, 22));
      v104 = v23 + 1859775393 + v97 + ((v101 | ~v99) ^ v103);
      LODWORD(v103) = v99;
      v105 = v103 >> 22;
      HIDWORD(v103) = v104;
      LODWORD(v103) = v104;
      v106 = (v103 >> 19) + v100;
      LODWORD(v103) = v29 + 1859775393 + v100 + ((v106 | ~v101) ^ __ROR4__(v99, 22));
      HIDWORD(v103) = v103;
      v107 = (v103 >> 26) + v102;
      HIDWORD(v103) = v101;
      LODWORD(v103) = v101;
      v108 = v103 >> 22;
      LODWORD(v103) = v14 + 1859775393 + v102 + ((v107 | ~v106) ^ __ROR4__(v101, 22));
      HIDWORD(v103) = v103;
      v109 = (v103 >> 25) + v105;
      HIDWORD(v103) = v106;
      LODWORD(v103) = v106;
      v110 = v103 >> 22;
      v111 = __PAIR64__(v107, __ROR4__(v106, 22));
      v112 = v48 + 1859775393 + v105 + ((v109 | ~v107) ^ v111);
      LODWORD(v111) = v107;
      v113 = v111 >> 22;
      HIDWORD(v111) = v112;
      LODWORD(v111) = v112;
      v114 = (v111 >> 18) + v108;
      LODWORD(v111) = v30 + 1859775393 + v108 + ((v114 | ~v109) ^ __ROR4__(v107, 22));
      HIDWORD(v111) = v111;
      v115 = (v111 >> 23) + v110;
      HIDWORD(v111) = v109;
      LODWORD(v111) = v109;
      v116 = v111 >> 22;
      LODWORD(v111) = v18 + 1859775393 + v110 + ((v115 | ~v114) ^ __ROR4__(v109, 22));
      HIDWORD(v111) = v111;
      v117 = (v111 >> 19) + v113;
      HIDWORD(v111) = v114;
      LODWORD(v111) = v114;
      v118 = v111 >> 22;
      v565 = v9;
      v119 = __PAIR64__(v115, __ROR4__(v114, 22));
      v120 = v9 + 1859775393 + v113 + ((v117 | ~v115) ^ v119);
      LODWORD(v119) = v115;
      v121 = v119 >> 22;
      HIDWORD(v119) = v120;
      LODWORD(v119) = v120;
      v122 = (v119 >> 17) + v116;
      v564 = v12;
      LODWORD(v119) = v12 + 1859775393 + v116 + ((v122 | ~v117) ^ __ROR4__(v115, 22));
      HIDWORD(v119) = v119;
      v123 = (v119 >> 18) + v118;
      HIDWORD(v119) = v117;
      LODWORD(v119) = v117;
      v124 = v119 >> 22;
      LODWORD(v119) = v17 + 1859775393 + v118 + ((v123 | ~v122) ^ __ROR4__(v117, 22));
      HIDWORD(v119) = v119;
      v125 = (v119 >> 24) + v121;
      HIDWORD(v119) = v122;
      LODWORD(v119) = v122;
      v126 = v119 >> 22;
      v127 = __PAIR64__(v123, __ROR4__(v122, 22));
      v128 = v8 + 1859775393 + v121 + ((v125 | ~v123) ^ v127);
      LODWORD(v127) = v123;
      v129 = v127 >> 22;
      HIDWORD(v127) = v128;
      LODWORD(v127) = v128;
      v130 = (v127 >> 19) + v124;
      LODWORD(v127) = v16 + 1859775393 + v124 + ((v130 | ~v125) ^ __ROR4__(v123, 22));
      HIDWORD(v127) = v127;
      v131 = (v127 >> 26) + v126;
      HIDWORD(v127) = v125;
      LODWORD(v127) = v125;
      v132 = v127 >> 22;
      LODWORD(v127) = v28 + 1859775393 + v126 + ((v131 | ~v130) ^ __ROR4__(v125, 22));
      HIDWORD(v127) = v127;
      v133 = (v127 >> 27) + v129;
      HIDWORD(v127) = v130;
      LODWORD(v127) = v130;
      v134 = v127 >> 22;
      v135 = __PAIR64__(v131, __ROR4__(v130, 22));
      v136 = v54 + 1859775393 + v129 + ((v133 | ~v131) ^ v135);
      LODWORD(v135) = v131;
      v137 = v135 >> 22;
      HIDWORD(v135) = v136;
      LODWORD(v135) = v136;
      v138 = (v135 >> 20) + v132;
      LODWORD(v135) = v15 + 1859775393 + v132 + ((v138 | ~v133) ^ __ROR4__(v131, 22));
      HIDWORD(v135) = v135;
      v139 = (v135 >> 25) + v134;
      HIDWORD(v135) = v133;
      LODWORD(v135) = v133;
      v140 = v135 >> 22;
      LODWORD(v135) = v26 + 1859775393 + v134 + ((v139 | ~v138) ^ __ROR4__(v133, 22));
      HIDWORD(v135) = v135;
      v141 = (v135 >> 27) + v137;
      HIDWORD(v135) = v138;
      LODWORD(v135) = v138;
      v142 = v135 >> 22;
      LODWORD(v135) = v9 - 1894007588 + v137 + (v139 & ~__ROR4__(v138, 22)) + (v141 & __ROR4__(v138, 22));
      HIDWORD(v135) = v135;
      v143 = (v135 >> 21) + v140;
      HIDWORD(v135) = v139;
      LODWORD(v135) = v139;
      v144 = v135 >> 22;
      LODWORD(v135) = v48 - 1894007588 + v140 + (v141 & ~__ROR4__(v139, 22)) + (v143 & __ROR4__(v139, 22));
      HIDWORD(v135) = v135;
      v145 = (v135 >> 20) + v142;
      v146 = v54 - 1894007588 + v142 + (v143 & ~__ROR4__(v141, 22)) + (v145 & __ROR4__(v141, 22));
      v147 = __PAIR64__(v146, __ROR4__(v143, 22));
      v148 = v23 - 1894007588 + v144 + (v145 & ~(_DWORD)v147);
      LODWORD(v147) = v146;
      v149 = (v147 >> 18) + v144;
      HIDWORD(v147) = v573 + 1352829926 + ((v571 | ~v5) ^ v4) + v15;
      LODWORD(v147) = HIDWORD(v147);
      v150 = (v147 >> 24) + v572;
      LODWORD(v147) = v572 + 1352829926 + v29 + (v150 ^ (v4 | ~__ROR4__(v571, 22)));
      HIDWORD(v147) = v147;
      v151 = (v147 >> 23) + v5;
      v152 = v5 + 1352829926 + v17 + (v151 ^ (v150 | ~__ROR4__(v4, 22)));
      v153 = __PAIR64__(v152, __ROR4__(v143, 22));
      v154 = v148 + (v149 & v153);
      LODWORD(v153) = v152;
      v155 = (v153 >> 23) + v567;
      LODWORD(v153) = v567 + 1352829926 + v8 + (v155 ^ (v151 | ~__ROR4__(v150, 22)));
      HIDWORD(v153) = v153;
      v156 = (v153 >> 21) + v22;
      v157 = __PAIR64__(v150, __ROR4__(v151, 22));
      v158 = v22 + 1352829926 + v48 + (v156 ^ (v155 | ~(_DWORD)v157));
      LODWORD(v157) = v150;
      v159 = v157 >> 22;
      HIDWORD(v157) = v158;
      LODWORD(v157) = v158;
      v160 = (v157 >> 19) + v159;
      v161 = __PAIR64__(v141, __ROR4__(v155, 22));
      v162 = v12 + 1352829926 + v159 + (v160 ^ (v156 | ~(_DWORD)v161));
      LODWORD(v161) = v141;
      v163 = v161 >> 22;
      HIDWORD(v161) = v154;
      LODWORD(v161) = v154;
      v164 = (v161 >> 17) + v163;
      HIDWORD(v161) = v151;
      LODWORD(v161) = v151;
      v165 = v161 >> 22;
      HIDWORD(v161) = v162;
      LODWORD(v161) = v162;
      v166 = v8;
      v563 = v8;
      v167 = (v161 >> 17) + v165;
      v168 = __PAIR64__(v155, __ROR4__(v156, 22));
      v169 = v54 + 1352829926 + v165 + (v167 ^ (v160 | ~(_DWORD)v168));
      LODWORD(v168) = v155;
      v170 = v168 >> 22;
      HIDWORD(v168) = v169;
      LODWORD(v168) = v169;
      v171 = (v168 >> 17) + v170;
      v172 = __PAIR64__(v143, __ROR4__(v145, 22));
      v173 = v8 - 1894007588 + v163 + (v149 & ~__ROR4__(v145, 22)) + (v164 & v172);
      LODWORD(v172) = v143;
      v174 = v172 >> 22;
      v175 = v18 - 1894007588 + v174 + (v164 & ~__ROR4__(v149, 22));
      v176 = __PAIR64__(v173, __ROR4__(v160, 22));
      v177 = v14 + 1352829926 + v170 + (v171 ^ (v167 | ~(_DWORD)v176));
      LODWORD(v176) = v173;
      v178 = (v176 >> 18) + v174;
      HIDWORD(v176) = v156;
      LODWORD(v176) = v156;
      v179 = v176 >> 22;
      HIDWORD(v176) = v177;
      LODWORD(v176) = v177;
      v180 = (v176 >> 27) + v179;
      v181 = __PAIR64__(v160, __ROR4__(v149, 22));
      v182 = v175 + (v178 & v181);
      LODWORD(v181) = v160;
      v183 = v181 >> 22;
      HIDWORD(v181) = v28 + 1352829926 + v179 + (v180 ^ (v171 | ~__ROR4__(v167, 22)));
      LODWORD(v181) = HIDWORD(v181);
      v184 = (v181 >> 25) + v183;
      v185 = __PAIR64__(v167, __ROR4__(v171, 22));
      v186 = v566 + 1352829926 + v183 + (v184 ^ (v180 | ~(_DWORD)v185));
      LODWORD(v185) = v167;
      v187 = v185 >> 22;
      HIDWORD(v185) = v186;
      LODWORD(v185) = v186;
      v188 = (v185 >> 25) + v187;
      v189 = __PAIR64__(v145, __ROR4__(v180, 22));
      v190 = v30 + 1352829926 + v187 + (v188 ^ (v184 | ~(_DWORD)v189));
      LODWORD(v189) = v145;
      v191 = v189 >> 22;
      HIDWORD(v189) = v182;
      LODWORD(v189) = v182;
      v192 = (v189 >> 17) + v191;
      HIDWORD(v189) = v171;
      LODWORD(v189) = v171;
      v193 = v189 >> 22;
      HIDWORD(v189) = v190;
      LODWORD(v189) = v190;
      v194 = (v189 >> 24) + v193;
      v195 = __PAIR64__(v180, __ROR4__(v184, 22));
      v196 = v18 + 1352829926 + v193 + (v194 ^ (v188 | ~(_DWORD)v195));
      LODWORD(v195) = v180;
      v197 = v195 >> 22;
      HIDWORD(v195) = v196;
      LODWORD(v195) = v196;
      v198 = (v195 >> 21) + v197;
      v199 = __PAIR64__(v149, __ROR4__(v164, 22));
      v200 = v26 - 1894007588 + v191 + (v178 & ~__ROR4__(v164, 22)) + (v192 & v199);
      LODWORD(v199) = v149;
      v201 = v199 >> 22;
      v202 = v14 - 1894007588 + v201 + (v192 & ~__ROR4__(v178, 22));
      v203 = __PAIR64__(v200, __ROR4__(v188, 22));
      v204 = v565 + 1352829926 + v197 + (v198 ^ (v194 | ~(_DWORD)v203));
      LODWORD(v203) = v200;
      v205 = (v203 >> 23) + v201;
      HIDWORD(v203) = v184;
      LODWORD(v203) = v184;
      v206 = v203 >> 22;
      HIDWORD(v203) = v204;
      LODWORD(v203) = v204;
      v207 = (v203 >> 18) + v206;
      v208 = __PAIR64__(v164, __ROR4__(v178, 22));
      v209 = v202 + (v205 & v208);
      LODWORD(v208) = v164;
      v210 = v208 >> 22;
      v211 = __PAIR64__(v188, __ROR4__(v192, 22));
      v212 = v28 - 1894007588 + v210 + (v205 & ~(_DWORD)v211);
      LODWORD(v211) = v188;
      v213 = v211 >> 22;
      HIDWORD(v211) = v569 + 1352829926 + v206 + (v207 ^ (v198 | ~__ROR4__(v194, 22)));
      LODWORD(v211) = HIDWORD(v211);
      v214 = (v211 >> 18) + v213;
      v215 = __PAIR64__(v194, __ROR4__(v198, 22));
      v216 = v13 + 1352829926 + v213 + (v214 ^ (v207 | ~(_DWORD)v215));
      LODWORD(v215) = v194;
      v217 = v215 >> 22;
      HIDWORD(v215) = v216;
      LODWORD(v215) = v216;
      v218 = (v215 >> 20) + v217;
      v219 = __PAIR64__(v198, __ROR4__(v207, 22));
      v220 = v26 + 1352829926 + v217 + (v218 ^ (v214 | ~(_DWORD)v219));
      LODWORD(v219) = v198;
      v221 = v219 >> 22;
      HIDWORD(v219) = v220;
      LODWORD(v219) = v220;
      v222 = (v219 >> 26) + v221;
      HIDWORD(v219) = v209;
      LODWORD(v219) = v209;
      v223 = (v219 >> 24) + v210;
      v224 = v566 + 1548603684 + v221 + (v218 & ~__ROR4__(v214, 22)) + (v222 & __ROR4__(v214, 22));
      v225 = __PAIR64__(v178, __ROR4__(v192, 22));
      v226 = v212 + (v223 & v225);
      LODWORD(v225) = v178;
      v227 = v225 >> 22;
      v228 = __PAIR64__(v207, __ROR4__(v205, 22));
      v229 = v13 - 1894007588 + v227 + (v223 & ~(_DWORD)v228);
      LODWORD(v228) = v207;
      v230 = v228 >> 22;
      HIDWORD(v228) = v224;
      LODWORD(v228) = v224;
      v231 = (v228 >> 23) + v230;
      v232 = __PAIR64__(v226, __ROR4__(v218, 22));
      v233 = v54 + 1548603684 + v230 + (v222 & ~(_DWORD)v232);
      LODWORD(v232) = v226;
      v234 = (v232 >> 23) + v227;
      v235 = __PAIR64__(v214, __ROR4__(v218, 22));
      v236 = v233 + (v231 & v235);
      LODWORD(v235) = v214;
      v237 = v235 >> 22;
      HIDWORD(v235) = v236;
      LODWORD(v235) = v236;
      v238 = (v235 >> 19) + v237;
      v239 = __PAIR64__(v218, __ROR4__(v222, 22));
      v240 = v13 + 1548603684 + v237 + (v231 & ~__ROR4__(v222, 22)) + (v238 & v239);
      LODWORD(v239) = v218;
      v241 = v239 >> 22;
      HIDWORD(v239) = v240;
      LODWORD(v239) = v240;
      v242 = (v239 >> 17) + v241;
      v243 = v17 + 1548603684 + v241 + (v238 & ~__ROR4__(v231, 22));
      v244 = __PAIR64__(v192, __ROR4__(v205, 22));
      v245 = v229 + (v234 & v244);
      LODWORD(v244) = v192;
      v246 = v244 >> 22;
      v247 = v17 - 1894007588 + v246 + (v234 & ~__ROR4__(v223, 22));
      v248 = __PAIR64__(v222, __ROR4__(v231, 22));
      v249 = v243 + (v242 & v248);
      LODWORD(v248) = v222;
      v250 = v248 >> 22;
      HIDWORD(v248) = v249;
      LODWORD(v248) = v249;
      v251 = (v248 >> 25) + v250;
      HIDWORD(v248) = v245;
      LODWORD(v248) = v245;
      v252 = (v248 >> 18) + v246;
      v253 = v166 + 1548603684 + v250 + (v242 & ~__ROR4__(v238, 22)) + (v251 & __ROR4__(v238, 22));
      v254 = __PAIR64__(v205, __ROR4__(v223, 22));
      v255 = v247 + (v252 & v254);
      LODWORD(v254) = v205;
      v256 = v254 >> 22;
      v257 = __PAIR64__(v231, __ROR4__(v234, 22));
      v258 = v30 - 1894007588 + v256 + (v252 & ~(_DWORD)v257);
      LODWORD(v257) = v231;
      v259 = v257 >> 22;
      HIDWORD(v257) = v253;
      LODWORD(v257) = v253;
      v260 = (v257 >> 20) + v259;
      v261 = __PAIR64__(v255, __ROR4__(v242, 22));
      v262 = v28 + 1548603684 + v259 + (v251 & ~(_DWORD)v261);
      LODWORD(v261) = v255;
      v263 = (v261 >> 27) + v256;
      v264 = __PAIR64__(v238, __ROR4__(v242, 22));
      v265 = v262 + (v260 & v264);
      LODWORD(v264) = v238;
      v266 = v264 >> 22;
      HIDWORD(v264) = v265;
      LODWORD(v264) = v265;
      v267 = (v264 >> 24) + v266;
      v268 = __PAIR64__(v242, __ROR4__(v251, 22));
      v269 = v15 + 1548603684 + v266 + (v260 & ~__ROR4__(v251, 22)) + (v267 & v268);
      LODWORD(v268) = v242;
      v270 = v268 >> 22;
      HIDWORD(v268) = v269;
      LODWORD(v268) = v269;
      v271 = (v268 >> 23) + v270;
      v272 = v569 + 1548603684 + v270 + (v267 & ~__ROR4__(v260, 22));
      v273 = __PAIR64__(v223, __ROR4__(v234, 22));
      v274 = v258 + (v263 & v273);
      LODWORD(v273) = v223;
      v275 = v273 >> 22;
      v276 = __PAIR64__(v251, __ROR4__(v260, 22));
      v277 = v272 + (v271 & v276);
      LODWORD(v276) = v251;
      v278 = v276 >> 22;
      HIDWORD(v276) = v277;
      LODWORD(v276) = v277;
      v279 = (v276 >> 21) + v278;
      HIDWORD(v276) = v274;
      LODWORD(v276) = v274;
      v280 = (v276 >> 26) + v275;
      v281 = __PAIR64__(v234, __ROR4__(v252, 22));
      v282 = v29 - 1894007588 + v275 + (v263 & ~__ROR4__(v252, 22)) + (v280 & v281);
      LODWORD(v281) = v234;
      v283 = v281 >> 22;
      v284 = __PAIR64__(v260, __ROR4__(v263, 22));
      v285 = v15 - 1894007588 + v283 + (v280 & ~(_DWORD)v284);
      LODWORD(v284) = v260;
      v286 = v284 >> 22;
      HIDWORD(v284) = v29 + 1548603684 + v278 + (v271 & ~__ROR4__(v267, 22)) + (v279 & __ROR4__(v267, 22));
      LODWORD(v284) = HIDWORD(v284);
      v287 = (v284 >> 25) + v286;
      v288 = __PAIR64__(v282, __ROR4__(v271, 22));
      v289 = v30 + 1548603684 + v286 + (v279 & ~(_DWORD)v288);
      LODWORD(v288) = v282;
      v290 = (v288 >> 24) + v283;
      v291 = __PAIR64__(v267, __ROR4__(v271, 22));
      v292 = v289 + (v287 & v291);
      LODWORD(v291) = v267;
      v293 = v291 >> 22;
      HIDWORD(v291) = v292;
      LODWORD(v291) = v292;
      v294 = (v291 >> 25) + v293;
      v295 = __PAIR64__(v271, __ROR4__(v279, 22));
      v296 = v18 + 1548603684 + v293 + (v287 & ~__ROR4__(v279, 22)) + (v294 & v295);
      LODWORD(v295) = v271;
      v297 = v295 >> 22;
      HIDWORD(v295) = v296;
      LODWORD(v295) = v296;
      v298 = (v295 >> 20) + v297;
      v299 = v285 + (v290 & __ROR4__(v263, 22));
      v300 = __PAIR64__(v279, __ROR4__(v287, 22));
      v301 = v26 + 1548603684 + v297 + (v294 & ~__ROR4__(v287, 22)) + (v298 & v300);
      LODWORD(v300) = v279;
      v302 = v300 >> 22;
      HIDWORD(v300) = v301;
      LODWORD(v300) = v301;
      v303 = (v300 >> 25) + v302;
      HIDWORD(v300) = v252;
      LODWORD(v300) = v252;
      v304 = v300 >> 22;
      v305 = __PAIR64__(v299, __ROR4__(v294, 22));
      v306 = v14 + 1548603684 + v302 + (v298 & ~(_DWORD)v305);
      LODWORD(v305) = v299;
      v307 = v566 - 1894007588 + v304;
      v308 = (v305 >> 26) + v304;
      v309 = __PAIR64__(v287, __ROR4__(v294, 22));
      v310 = v306 + (v303 & v309);
      LODWORD(v309) = v287;
      v311 = v309 >> 22;
      HIDWORD(v309) = v310;
      LODWORD(v309) = v310;
      v312 = (v309 >> 26) + v311;
      v313 = __PAIR64__(v294, __ROR4__(v298, 22));
      v314 = v48 + 1548603684 + v311 + (v303 & ~__ROR4__(v298, 22)) + (v312 & v313);
      LODWORD(v313) = v294;
      v315 = v313 >> 22;
      HIDWORD(v313) = v314;
      LODWORD(v313) = v314;
      v316 = (v313 >> 17) + v315;
      v317 = __PAIR64__(v263, __ROR4__(v280, 22));
      v318 = v307 + (v290 & ~__ROR4__(v280, 22)) + (v308 & v317);
      LODWORD(v317) = v263;
      v319 = v317 >> 22;
      v320 = v564 - 1894007588 + v319 + (v308 & ~__ROR4__(v290, 22));
      v321 = __PAIR64__(v298, __ROR4__(v303, 22));
      v322 = v565 + 1548603684 + v315 + (v312 & ~__ROR4__(v303, 22)) + (v316 & v321);
      LODWORD(v321) = v298;
      v323 = v321 >> 22;
      HIDWORD(v321) = v322;
      LODWORD(v321) = v322;
      v324 = (v321 >> 19) + v323;
      v325 = __PAIR64__(v318, __ROR4__(v312, 22));
      v326 = v564 + 1548603684 + v323 + (v316 & ~__ROR4__(v312, 22)) + (v324 & v325);
      LODWORD(v325) = v318;
      v327 = (v325 >> 27) + v319;
      HIDWORD(v325) = v303;
      LODWORD(v325) = v303;
      v328 = v325 >> 22;
      HIDWORD(v325) = v326;
      LODWORD(v325) = v326;
      v329 = (v325 >> 21) + v328;
      v330 = __PAIR64__(v312, __ROR4__(v290, 22));
      v331 = v320 + (v327 & v330);
      LODWORD(v330) = v312;
      v332 = v330 >> 22;
      HIDWORD(v330) = v30 + 1836072691 + v328 + ((v329 | ~v324) ^ __ROR4__(v316, 22));
      LODWORD(v330) = HIDWORD(v330);
      v333 = (v330 >> 23) + v332;
      v334 = __PAIR64__(v280, __ROR4__(v324, 22));
      v335 = v15 + 1836072691 + v332 + ((v333 | ~v329) ^ v334);
      LODWORD(v334) = v280;
      v336 = v334 >> 22;
      HIDWORD(v334) = v316;
      LODWORD(v334) = v316;
      v337 = v334 >> 22;
      HIDWORD(v334) = v335;
      LODWORD(v334) = v335;
      v338 = (v334 >> 25) + v337;
      HIDWORD(v334) = v331;
      LODWORD(v334) = v331;
      v339 = v14 - 1454113458 + v336;
      v340 = (v334 >> 20) + v336;
      v341 = v565 + 1836072691 + v337 + ((v338 | ~v333) ^ __ROR4__(v329, 22));
      v342 = __PAIR64__(v324, __ROR4__(v308, 22));
      v343 = v339 + (v340 ^ (v327 | ~(_DWORD)v342));
      LODWORD(v342) = v324;
      v344 = v342 >> 22;
      HIDWORD(v342) = v341;
      LODWORD(v342) = v341;
      v345 = (v342 >> 17) + v344;
      v346 = __PAIR64__(v290, __ROR4__(v333, 22));
      v347 = v13 + 1836072691 + v344 + ((v345 | ~v338) ^ v346);
      LODWORD(v346) = v290;
      v348 = v346 >> 22;
      HIDWORD(v346) = v329;
      LODWORD(v346) = v329;
      v349 = v346 >> 22;
      HIDWORD(v346) = v347;
      LODWORD(v346) = v347;
      v350 = (v346 >> 21) + v349;
      HIDWORD(v346) = v343;
      LODWORD(v346) = v343;
      v351 = v563 - 1454113458 + v348;
      v352 = (v346 >> 23) + v348;
      v353 = v17 + 1836072691 + v349 + ((v350 | ~v345) ^ __ROR4__(v338, 22));
      v354 = __PAIR64__(v333, __ROR4__(v327, 22));
      v355 = v351 + (v352 ^ (v340 | ~(_DWORD)v354));
      LODWORD(v354) = v333;
      v356 = v354 >> 22;
      HIDWORD(v354) = v353;
      LODWORD(v354) = v353;
      v357 = (v354 >> 24) + v356;
      v358 = __PAIR64__(v308, __ROR4__(v345, 22));
      v359 = v29 + 1836072691 + v356 + ((v357 | ~v350) ^ v358);
      LODWORD(v358) = v308;
      v360 = v358 >> 22;
      HIDWORD(v358) = v338;
      LODWORD(v358) = v338;
      v361 = v358 >> 22;
      HIDWORD(v358) = v359;
      LODWORD(v358) = v359;
      v362 = (v358 >> 26) + v361;
      HIDWORD(v358) = v355;
      LODWORD(v358) = v355;
      v363 = v15 - 1454113458 + v360;
      v364 = (v358 >> 17) + v360;
      v365 = v566 + 1836072691 + v361 + ((v362 | ~v357) ^ __ROR4__(v350, 22));
      v366 = __PAIR64__(v345, __ROR4__(v340, 22));
      v367 = v363 + (v364 ^ (v352 | ~(_DWORD)v366));
      LODWORD(v366) = v345;
      v368 = v366 >> 22;
      HIDWORD(v366) = v365;
      LODWORD(v366) = v365;
      v369 = (v366 >> 26) + v368;
      v370 = __PAIR64__(v327, __ROR4__(v357, 22));
      v371 = v48 + 1836072691 + v368 + ((v369 | ~v362) ^ v370);
      LODWORD(v370) = v327;
      v372 = v370 >> 22;
      HIDWORD(v370) = v350;
      LODWORD(v370) = v350;
      v373 = v370 >> 22;
      HIDWORD(v370) = v371;
      LODWORD(v370) = v371;
      v374 = (v370 >> 18) + v373;
      HIDWORD(v370) = v367;
      LODWORD(v370) = v367;
      v375 = v48 - 1454113458 + v372;
      v376 = (v370 >> 27) + v372;
      v377 = v54 + 1836072691 + v373 + ((v374 | ~v369) ^ __ROR4__(v362, 22));
      v378 = __PAIR64__(v357, __ROR4__(v352, 22));
      v379 = v375 + (v376 ^ (v364 | ~(_DWORD)v378));
      LODWORD(v378) = v357;
      v380 = v378 >> 22;
      HIDWORD(v378) = v377;
      LODWORD(v378) = v377;
      v381 = (v378 >> 20) + v380;
      v382 = __PAIR64__(v340, __ROR4__(v369, 22));
      v383 = v18 + 1836072691 + v380 + ((v381 | ~v374) ^ v382);
      LODWORD(v382) = v340;
      v384 = v382 >> 22;
      HIDWORD(v382) = v362;
      LODWORD(v382) = v362;
      v385 = v382 >> 22;
      HIDWORD(v382) = v383;
      LODWORD(v382) = v383;
      v386 = (v382 >> 19) + v385;
      v387 = v26 + 1836072691 + v385;
      HIDWORD(v382) = v379;
      LODWORD(v382) = v379;
      v388 = v17 - 1454113458 + v384;
      v389 = (v382 >> 21) + v384;
      v390 = __PAIR64__(v369, __ROR4__(v364, 22));
      v391 = v388 + (v389 ^ (v376 | ~(_DWORD)v390));
      LODWORD(v390) = v369;
      v392 = v390 >> 22;
      HIDWORD(v390) = v387 + ((v386 | ~v381) ^ __ROR4__(v374, 22));
      LODWORD(v390) = HIDWORD(v390);
      v393 = (v390 >> 27) + v392;
      v394 = __PAIR64__(v352, __ROR4__(v381, 22));
      v395 = v564 + 1836072691 + v392 + ((v393 | ~v386) ^ v394);
      LODWORD(v394) = v352;
      v396 = v394 >> 22;
      HIDWORD(v394) = v374;
      LODWORD(v394) = v374;
      v397 = v394 >> 22;
      HIDWORD(v394) = v395;
      LODWORD(v394) = v395;
      v398 = (v394 >> 18) + v397;
      HIDWORD(v394) = v391;
      LODWORD(v394) = v391;
      v399 = v26 - 1454113458 + v396;
      v400 = (v394 >> 26) + v396;
      v401 = v569 + 1836072691 + v397 + ((v398 | ~v393) ^ __ROR4__(v386, 22));
      v402 = __PAIR64__(v381, __ROR4__(v376, 22));
      v403 = v399 + (v400 ^ (v389 | ~(_DWORD)v402));
      LODWORD(v402) = v381;
      v404 = v402 >> 22;
      HIDWORD(v402) = v401;
      LODWORD(v402) = v401;
      v405 = (v402 >> 19) + v404;
      v406 = __PAIR64__(v364, __ROR4__(v393, 22));
      v407 = v563 + 1836072691 + v404 + ((v405 | ~v398) ^ v406);
      LODWORD(v406) = v364;
      v408 = v406 >> 22;
      HIDWORD(v406) = v386;
      LODWORD(v406) = v386;
      v409 = v406 >> 22;
      HIDWORD(v406) = v407;
      LODWORD(v406) = v407;
      v410 = (v406 >> 19) + v409;
      HIDWORD(v406) = v403;
      LODWORD(v406) = v403;
      v411 = v564 - 1454113458 + v408;
      v412 = (v406 >> 24) + v408;
      v413 = v14 + 1836072691 + v409 + ((v410 | ~v405) ^ __ROR4__(v398, 22));
      v414 = __PAIR64__(v393, __ROR4__(v389, 22));
      v415 = v411 + (v412 ^ (v400 | ~(_DWORD)v414));
      LODWORD(v414) = v393;
      v416 = v414 >> 22;
      HIDWORD(v414) = v413;
      LODWORD(v414) = v413;
      v417 = (v414 >> 25) + v416;
      v418 = __PAIR64__(v398, __ROR4__(v405, 22));
      v419 = v28 + 1836072691 + v416 + ((v417 | ~v410) ^ v418);
      LODWORD(v418) = v398;
      v420 = v418 >> 22;
      HIDWORD(v418) = v419;
      LODWORD(v418) = v419;
      v421 = (v418 >> 27) + v420;
      HIDWORD(v418) = v410;
      LODWORD(v418) = v410;
      v422 = v418 >> 22;
      HIDWORD(v418) = v376;
      LODWORD(v418) = v376;
      v423 = v418 >> 22;
      HIDWORD(v418) = v415;
      LODWORD(v418) = v415;
      v424 = v569 - 1454113458 + v423;
      v425 = (v418 >> 19) + v423;
      HIDWORD(v418) = v405;
      LODWORD(v418) = v405;
      v426 = v418 >> 22;
      HIDWORD(v418) = v18 + 2053994217 + v420 + (v422 & ~v421) + (v421 & v417);
      LODWORD(v418) = HIDWORD(v418);
      v427 = v418 >> 17;
      v428 = __PAIR64__(v417, __ROR4__(v400, 22));
      v429 = v424 + (v425 ^ (v412 | ~(_DWORD)v428));
      v430 = v427 + v426;
      LODWORD(v428) = v417;
      v431 = v428 >> 22;
      v432 = v566 + 2053994217 + v426 + (v431 & ~v430) + (v430 & v421);
      HIDWORD(v428) = v389;
      LODWORD(v428) = v389;
      v433 = v428 >> 22;
      HIDWORD(v428) = v429;
      LODWORD(v428) = v429;
      v434 = (v428 >> 20) + v433;
      HIDWORD(v428) = v432;
      LODWORD(v428) = v432;
      v435 = (v428 >> 27) + v422;
      v436 = v14 + 2053994217 + v422;
      HIDWORD(v428) = v421;
      LODWORD(v428) = v421;
      v437 = v428 >> 22;
      HIDWORD(v428) = v436 + (v437 & ~v435) + (v435 & v430);
      LODWORD(v428) = HIDWORD(v428);
      v438 = (v428 >> 24) + v431;
      HIDWORD(v428) = v430;
      LODWORD(v428) = v430;
      v439 = v428 >> 22;
      HIDWORD(v428) = v565 + 2053994217 + v431 + (v439 & ~v438) + (v438 & v435);
      LODWORD(v428) = HIDWORD(v428);
      v440 = (v428 >> 21) + v437;
      HIDWORD(v428) = v435;
      LODWORD(v428) = v435;
      v441 = v428 >> 22;
      HIDWORD(v428) = v400;
      LODWORD(v428) = v400;
      v442 = v428 >> 22;
      HIDWORD(v428) = v29 - 1454113458 + v433 + (v434 ^ (v425 | ~__ROR4__(v412, 22)));
      LODWORD(v428) = HIDWORD(v428);
      v443 = v565 - 1454113458 + v442;
      v444 = (v428 >> 27) + v442;
      HIDWORD(v428) = v13 + 2053994217 + v437 + (v441 & ~v440) + (v440 & v438);
      LODWORD(v428) = HIDWORD(v428);
      v445 = (v428 >> 18) + v439;
      HIDWORD(v428) = v438;
      LODWORD(v428) = v438;
      v446 = v428 >> 22;
      v447 = v54 + 2053994217 + v439 + (v446 & ~v445);
      v448 = v443 + (v444 ^ (v434 | ~__ROR4__(v425, 22)));
      HIDWORD(v428) = v447 + (v445 & v440);
      LODWORD(v428) = HIDWORD(v428);
      v449 = (v428 >> 18) + v441;
      v450 = v30 + 2053994217 + v441;
      HIDWORD(v428) = v412;
      LODWORD(v428) = v412;
      v451 = v428 >> 22;
      HIDWORD(v428) = v440;
      LODWORD(v428) = v440;
      v452 = v428 >> 22;
      v453 = v450 + (v452 & ~v449);
      HIDWORD(v428) = v448;
      LODWORD(v428) = v448;
      v454 = v13 - 1454113458 + v451;
      v455 = (v428 >> 20) + v451;
      HIDWORD(v428) = v453 + (v449 & v445);
      LODWORD(v428) = HIDWORD(v428);
      v456 = v428 >> 26;
      v457 = __PAIR64__(v445, __ROR4__(v434, 22));
      v458 = v454 + (v455 ^ (v444 | ~(_DWORD)v457));
      v459 = v456 + v446;
      v460 = v563 + 2053994217 + v446;
      LODWORD(v457) = v445;
      v461 = v457 >> 22;
      HIDWORD(v457) = v425;
      LODWORD(v457) = v425;
      v462 = v457 >> 22;
      HIDWORD(v457) = v458;
      LODWORD(v457) = v458;
      v463 = (v457 >> 19) + v462;
      HIDWORD(v457) = v460 + (v461 & ~v459) + (v459 & v449);
      LODWORD(v457) = HIDWORD(v457);
      v464 = (v457 >> 18) + v452;
      HIDWORD(v457) = v449;
      LODWORD(v457) = v449;
      v465 = v457 >> 22;
      HIDWORD(v457) = v15 + 2053994217 + v452 + (v465 & ~v464) + (v464 & v459);
      LODWORD(v457) = HIDWORD(v457);
      v466 = (v457 >> 26) + v461;
      HIDWORD(v457) = v459;
      LODWORD(v457) = v459;
      v467 = v457 >> 22;
      HIDWORD(v457) = v26 + 2053994217 + v461 + (v467 & ~v466) + (v466 & v464);
      LODWORD(v457) = HIDWORD(v457);
      v468 = (v457 >> 23) + v465;
      HIDWORD(v457) = v464;
      LODWORD(v457) = v464;
      v469 = v457 >> 22;
      HIDWORD(v457) = v434;
      LODWORD(v457) = v434;
      v470 = v457 >> 22;
      HIDWORD(v457) = v18 - 1454113458 + v462 + (v463 ^ (v455 | ~__ROR4__(v444, 22)));
      LODWORD(v457) = HIDWORD(v457);
      v471 = v54 - 1454113458 + v470;
      v472 = (v457 >> 18) + v470;
      HIDWORD(v457) = v564 + 2053994217 + v465 + (v469 & ~v468) + (v468 & v466);
      LODWORD(v457) = HIDWORD(v457);
      v473 = (v457 >> 20) + v467;
      HIDWORD(v457) = v466;
      LODWORD(v457) = v466;
      v474 = v457 >> 22;
      HIDWORD(v457) = v28 + 2053994217 + v467 + (v474 & ~v473) + (v473 & v468);
      LODWORD(v457) = HIDWORD(v457);
      v475 = (v457 >> 23) + v469;
      HIDWORD(v457) = v444;
      LODWORD(v457) = v444;
      v476 = v457 >> 22;
      HIDWORD(v457) = v468;
      LODWORD(v457) = v468;
      v477 = v457 >> 22;
      HIDWORD(v457) = v471 + (v472 ^ (v463 | ~__ROR4__(v455, 22)));
      LODWORD(v457) = HIDWORD(v457);
      v478 = v566 - 1454113458 + v476;
      v479 = (v457 >> 21) + v476;
      HIDWORD(v457) = v48 + 2053994217 + v469 + (v477 & ~v475) + (v475 & v473);
      LODWORD(v457) = HIDWORD(v457);
      v480 = v457 >> 20;
      v481 = __PAIR64__(v473, __ROR4__(v463, 22));
      v482 = v478 + (v479 ^ (v472 | ~(_DWORD)v481));
      v483 = v480 + v474;
      LODWORD(v481) = v473;
      v484 = v481 >> 22;
      HIDWORD(v481) = v455;
      LODWORD(v481) = v455;
      v485 = v481 >> 22;
      HIDWORD(v481) = v482;
      LODWORD(v481) = v482;
      v486 = (v481 >> 24) + v485;
      HIDWORD(v481) = v17 + 2053994217 + v474 + (v484 & ~v483) + (v483 & v475);
      LODWORD(v481) = HIDWORD(v481);
      v487 = (v481 >> 27) + v477;
      HIDWORD(v481) = v475;
      LODWORD(v481) = v475;
      v488 = v481 >> 22;
      HIDWORD(v481) = v569 + 2053994217 + v477 + (v488 & ~v487) + (v487 & v483);
      LODWORD(v481) = HIDWORD(v481);
      v489 = (v481 >> 17) + v484;
      HIDWORD(v481) = v483;
      LODWORD(v481) = v483;
      v490 = v481 >> 22;
      HIDWORD(v481) = v29 + 2053994217 + v484 + (v490 & ~v489) + (v489 & v487);
      LODWORD(v481) = HIDWORD(v481);
      v491 = (v481 >> 24) + v488;
      LODWORD(v481) = v488 + v26 + (v489 ^ __ROR4__(v487, 22) ^ v491);
      HIDWORD(v481) = v481;
      v492 = (v481 >> 24) + v490;
      v493 = __PAIR64__(v487, __ROR4__(v489, 22));
      v494 = v491 ^ v493 ^ v492;
      LODWORD(v493) = v487;
      v495 = v493 >> 22;
      HIDWORD(v493) = v490 + v30 + v494;
      LODWORD(v493) = HIDWORD(v493);
      v496 = (v493 >> 27) + v495;
      v497 = __PAIR64__(v489, __ROR4__(v491, 22));
      v498 = v495 + v569 + (v492 ^ v497 ^ v496);
      LODWORD(v497) = v489;
      v499 = v497 >> 22;
      HIDWORD(v497) = v498;
      LODWORD(v497) = v498;
      v500 = (v497 >> 20) + v499;
      v501 = __PAIR64__(v491, __ROR4__(v492, 22));
      v502 = v496 ^ v501 ^ v500;
      LODWORD(v501) = v491;
      v503 = v501 >> 22;
      HIDWORD(v501) = v499 + v14 + v502;
      LODWORD(v501) = HIDWORD(v501);
      v504 = (v501 >> 23) + v503;
      v505 = __PAIR64__(v492, __ROR4__(v496, 22));
      v506 = v503 + v565 + (v500 ^ v505 ^ v504);
      LODWORD(v505) = v492;
      v507 = v505 >> 22;
      HIDWORD(v505) = v506;
      LODWORD(v505) = v506;
      v508 = (v505 >> 20) + v507;
      v509 = __PAIR64__(v496, __ROR4__(v500, 22));
      v510 = v504 ^ v509 ^ v508;
      LODWORD(v509) = v496;
      v511 = v509 >> 22;
      HIDWORD(v509) = v507 + v15 + v510;
      LODWORD(v509) = HIDWORD(v509);
      v512 = (v509 >> 27) + v511;
      v513 = __PAIR64__(v500, __ROR4__(v504, 22));
      v514 = v511 + v18 + (v508 ^ v513 ^ v512);
      LODWORD(v513) = v500;
      v515 = v513 >> 22;
      HIDWORD(v513) = v514;
      LODWORD(v513) = v514;
      v516 = (v513 >> 18) + v515;
      v517 = __PAIR64__(v504, __ROR4__(v508, 22));
      v518 = v512 ^ v517 ^ v516;
      LODWORD(v517) = v504;
      v519 = v517 >> 22;
      HIDWORD(v517) = v515 + v17 + v518;
      LODWORD(v517) = HIDWORD(v517);
      v520 = (v517 >> 26) + v519;
      v521 = __PAIR64__(v508, __ROR4__(v512, 22));
      v522 = v519 + v566 + (v516 ^ v521 ^ v520);
      LODWORD(v521) = v508;
      v523 = v521 >> 22;
      HIDWORD(v521) = v522;
      LODWORD(v521) = v522;
      v524 = (v521 >> 24) + v523;
      v525 = __PAIR64__(v512, __ROR4__(v472, 22));
      v526 = v486 ^ (v479 | ~(_DWORD)v525);
      LODWORD(v525) = v512;
      v527 = v525 >> 22;
      HIDWORD(v525) = v523 + v564 + (v520 ^ __ROR4__(v516, 22) ^ v524);
      LODWORD(v525) = HIDWORD(v525);
      v528 = v30 - 1454113458 + v485 + v526;
      v529 = (v525 >> 19) + v527;
      v530 = __PAIR64__(v516, __ROR4__(v520, 22));
      v531 = v524 ^ v530 ^ v529;
      LODWORD(v530) = v516;
      v532 = v530 >> 22;
      HIDWORD(v530) = v527 + v28 + v531;
      LODWORD(v530) = HIDWORD(v530);
      v533 = (v530 >> 26) + v532;
      v534 = __PAIR64__(v520, __ROR4__(v524, 22));
      v535 = v532 + v29 + (v529 ^ v534 ^ v533);
      LODWORD(v534) = v520;
      v536 = v534 >> 22;
      HIDWORD(v534) = v535;
      LODWORD(v534) = v535;
      v537 = (v534 >> 27) + v536;
      v538 = __PAIR64__(v524, __ROR4__(v529, 22));
      v539 = v533 ^ v538 ^ v537;
      LODWORD(v538) = v524;
      v540 = v538 >> 22;
      HIDWORD(v538) = v536 + v563 + v539;
      LODWORD(v538) = HIDWORD(v538);
      v541 = (v538 >> 17) + v540;
      v542 = __PAIR64__(v529, __ROR4__(v533, 22));
      v543 = v540 + v570 + (v537 ^ v542 ^ v541);
      LODWORD(v542) = v529;
      v544 = v542 >> 22;
      HIDWORD(v542) = v543;
      LODWORD(v542) = v543;
      v545 = (v542 >> 19) + v544;
      v546 = __PAIR64__(v463, __ROR4__(v537, 22));
      v547 = v541 ^ v546 ^ v545;
      LODWORD(v546) = v463;
      v548 = v546 >> 22;
      v549 = v544 + v48 + v547;
      HIDWORD(v546) = v528;
      LODWORD(v546) = v528;
      v550 = v28 - 1454113458 + v548;
      v551 = (v546 >> 27) + v548;
      v553 = __PAIR64__(v533, __ROR4__(v479, 22));
      v552 = v486 | ~(_DWORD)v553;
      LODWORD(v553) = v533;
      v554 = v553 >> 22;
      HIDWORD(v553) = v549;
      LODWORD(v553) = v549;
      v555 = v550 + (v551 ^ v552);
      result = (_DWORD *)((v553 >> 21) + v554);
      v556 = __PAIR64__(v545, __ROR4__(v541, 22));
      v557 = v554 + v54 + (v545 ^ v556 ^ result);
      LODWORD(v556) = v545;
      v558 = v551 + v4 + (v556 >> 22);
      HIDWORD(v556) = v541;
      LODWORD(v556) = v541;
      v559 = v571 + (v556 >> 22);
      HIDWORD(v556) = v486;
      LODWORD(v556) = v486;
      v4 = (v556 >> 22) + v559;
      HIDWORD(v556) = v537;
      LODWORD(v556) = v537;
      v560 = v556 >> 22;
      HIDWORD(v556) = v479;
      LODWORD(v556) = v479;
      v6 = (v556 >> 22) + v5 + v560;
      HIDWORD(v556) = v472;
      LODWORD(v556) = v472;
      v561 = v556 >> 22;
      HIDWORD(v556) = v557;
      LODWORD(v556) = v557;
      v5 = v561 + v572 + v560 + (v556 >> 21);
      HIDWORD(v556) = v555;
      LODWORD(v556) = v555;
      v7 = v561 + v573 + (_DWORD)result + (v556 >> 26);
      v562[2] = v6;
      v562[3] = v5;
      v562[4] = v7;
      *v562 = v558;
      v562[1] = v4;
      a3 = v574 + 16;
      v3 = v558;
      a2 = v568 - 1;
    }
    while (v568 != 1);
  }
  return result;
}

_BYTE *ccsrp_digest_ccn_ws(uint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *result;

  v10 = ccdh_gp_n(a2[1]);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v10);
  v13 = ccdh_gp_n(a2[1]);
  v14 = ccdh_gp_n(a2[1]);
  v15 = ccn_write_uint_padded_ct(v13, a3, 8 * v14, v12);
  if (a5)
    v16 = v15;
  else
    v16 = 0;
  v17 = *a2;
  v18 = ccdh_gp_n(a2[1]);
  result = ccdigest(v17, 8 * v18 - v16, &v12[v16], a4);
  *(_QWORD *)(a1 + 16) = v11;
  return result;
}

_BYTE *ccsrp_digest_update_ccn_ws(uint64_t a1, uint64_t *a2, _QWORD *a3, unint64_t *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *result;

  v10 = ccdh_gp_n(a2[1]);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v10);
  v13 = ccdh_gp_n(a2[1]);
  v14 = ccdh_gp_n(a2[1]);
  v15 = ccn_write_uint_padded_ct(v13, a4, 8 * v14, v12);
  if (a5)
    v16 = v15;
  else
    v16 = 0;
  v17 = *a2;
  v18 = ccdh_gp_n(a2[1]);
  result = ccdigest_update(v17, a3, 8 * v18 - v16, &v12[v16]);
  *(_QWORD *)(a1 + 16) = v11;
  return result;
}

uint64_t ccsrp_digest_ccn_ccn_ws(uint64_t a1, uint64_t *a2, _QWORD *a3, unint64_t *a4, unint64_t *a5, unint64_t a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  unsigned __int8 __s[64];
  uint64_t v22;

  v20 = (uint64_t)&v20;
  v22 = *MEMORY[0x1E0C874D8];
  v14 = *a2;
  MEMORY[0x1E0C86820](a1, a2, a3, a4);
  v16 = &__s[-v15 - 8];
  ccdigest_init(v14, &__s[-v15 - 8]);
  v17 = *(_QWORD *)(a1 + 16);
  if (a4)
    ccsrp_digest_update_ccn_ws(a1, a2, v16, a4, a7);
  ccsrp_digest_update_ccn_ws(a1, a2, v16, a5, a7);
  (*(void (**)(uint64_t, unsigned __int8 *, unsigned __int8 *))(v14 + 56))(v14, v16, __s);
  if (a6 - 1 >= *(_QWORD *)v14)
    a6 = *(_QWORD *)v14;
  v18 = ccdh_gp_n(a2[1]);
  ccn_read_uint(v18, a3, a6, __s);
  cc_clear(*(_QWORD *)v14, __s);
  result = cc_clear(*(_QWORD *)(v14 + 8) + *(_QWORD *)(v14 + 16) + 12, v16);
  *(_QWORD *)(a1 + 16) = v17;
  return result;
}

uint64_t ccec_generate_key_deterministic_ws(uint64_t a1, uint64_t *a2, unint64_t a3, unsigned __int8 *__src, uint64_t (**a5)(_QWORD, uint64_t, uint64_t *), int a6, uint64_t **a7)
{
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t (*v17[3])(_QWORD, unint64_t, void *);

  *a7 = a2;
  if ((~a6 & 0x19) != 0)
  {
    if ((a6 & 1) != 0)
    {
      result = ccec_generate_scalar_fips_extrabits_ws(a1, a2, a3, __src, (char *)&a7[3 * *a2 + 2]);
      if ((_DWORD)result)
        return result;
    }
    else
    {
      if ((a6 & 4) == 0)
        return 4294967275;
      result = ccec_generate_scalar_legacy_ws(a1, a2, a3, __src, &a7[3 * *a2 + 2]);
      if ((_DWORD)result)
        return result;
    }
LABEL_12:
    result = ccec_make_pub_from_priv_ws(a1, a2, a5, (unint64_t *)&a7[3 * **a7 + 2], 0, a7);
    if (!(_DWORD)result)
    {
      if ((~a6 & 9) == 0)
        ccec_compact_transform_key_ws(a1, a7);
      if (ccec_pairwise_consistency_check_ws(a1, a7, (uint64_t (**)(_QWORD, unint64_t, void *))a5))return 4294967278;
      else
        return 0;
    }
    return result;
  }
  memset(v17, 0, sizeof(v17));
  v14 = ((unint64_t)(cczp_bitlen((uint64_t)a2) + 62) >> 3) & 0x1FFFFFFFFFFFFFF8;
  v15 = a3 - v14;
  if (v15 < 10 * (((unint64_t)(cczp_bitlen((uint64_t)&a2[5 * *a2 + 4]) + 63) >> 3) & 0x1FFFFFFFFFFFFFF8))
    return 4294967286;
  result = ccrng_sequence_non_repeat_init((uint64_t (**)(uint64_t, unint64_t, uint64_t))v17, (uint64_t (*)(uint64_t, unint64_t, uint64_t))v15, (uint64_t (*)(uint64_t, unint64_t, uint64_t))&__src[v14]);
  if (!(_DWORD)result)
  {
    result = ccec_generate_scalar_fips_retry_ws(a1, a2, v17, &a7[3 * **a7 + 2]);
    if (!(_DWORD)result)
      goto LABEL_12;
  }
  return result;
}

uint64_t ccec_generate_key_deterministic(uint64_t *a1, unint64_t a2, unsigned __int8 *a3, uint64_t (**a4)(_QWORD, uint64_t, uint64_t *), int a5, uint64_t **a6)
{
  char v12;
  void *v18;
  uint64_t v19;
  uint64_t key_deterministic_ws;
  _QWORD v22[4];
  void (*v23)(uint64_t);
  char v24;

  v12 = 0;
  v24 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v12 = 1;
    }
  }
  v24 = v12;
  v18 = cc_malloc_clear(392 * *a1);
  v19 = 49 * *a1;
  v22[0] = v18;
  v22[1] = v19;
  v22[2] = 0;
  v22[3] = cc_ws_alloc;
  v23 = cc_ws_free;
  if (v18)
  {
    key_deterministic_ws = ccec_generate_key_deterministic_ws((uint64_t)v22, a1, a2, a3, a4, a5, a6);
    v23((uint64_t)v22);
  }
  else
  {
    key_deterministic_ws = 4294967283;
  }
  cc_disable_dit(&v24);
  return key_deterministic_ws;
}

uint64_t ccmode_ofb_crypt(_QWORD *a1, uint64_t a2, char *a3, _BYTE *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;

  v5 = a1[1];
  if (a2)
  {
    v8 = a2;
    v9 = *a1;
    v10 = a1 + 2;
    v11 = (unint64_t)a1 + ((*(_QWORD *)(*a1 + 8) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    do
    {
      if (v5 == *(_QWORD *)(v9 + 8))
      {
        (*(void (**)(unint64_t, uint64_t, _QWORD *, _QWORD *))(v9 + 24))(v11, 1, a1 + 2, a1 + 2);
        v5 = 0;
      }
      v12 = *a3++;
      v13 = v5 + 1;
      *a4++ = *((_BYTE *)v10 + v5++) ^ v12;
      --v8;
    }
    while (v8);
  }
  else
  {
    v13 = a1[1];
  }
  a1[1] = v13;
  return 0;
}

uint64_t cccast_ecb_decrypt(uint64_t a1, uint64_t a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v6;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C874D8];
  if (a2)
  {
    v6 = a2;
    do
    {
      --v6;
      v8 = *a3;
      v9 = a3[1];
      a3 += 2;
      v12 = bswap32(v8);
      v13 = bswap32(v9);
      CC_CAST_decrypt((int *)&v12, a1);
      v10 = bswap32(v13);
      *a4 = bswap32(v12);
      a4[1] = v10;
      a4 += 2;
    }
    while (v6);
  }
  return 0;
}

unint64_t CCHE_CIPHERTEXT_PLAINTEXT_ADD_WORKSPACE_N(unsigned int a1)
{
  return ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3) + a1;
}

uint64_t cche_ciphertext_plaintext_add_ws(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  int v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int *v15;
  uint64_t (*v16)(uint64_t, unint64_t);
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unsigned int v26;
  _QWORD *v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  uint64_t v52;
  _DWORD **v53;
  uint64_t result;
  int v55;
  int **v56;
  unsigned int v57;
  int *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  _QWORD *v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unint64_t *v69;
  uint64_t v70;
  int *v71;
  unsigned int v72;
  unint64_t *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _DWORD **v94;
  uint64_t v95;
  unint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104[2];
  uint64_t v105[2];
  uint64_t __dst;
  _QWORD v107[2];

  v107[1] = *MEMORY[0x1E0C874D8];
  v8 = cche_param_ctx_he_scheme(*(unsigned int **)a3);
  if (v8 == 2)
  {
    v55 = *(_DWORD *)(a3 + 8);
    if (v55 == cche_ciphertext_fresh_npolys() && *(_DWORD *)(a2 + 8) == v55)
    {
      v56 = (int **)(a2 + 24);
      if (ccpolyzp_po2cyc_ctx_eq(*(_QWORD *)(a3 + 24), *(_DWORD **)(a2 + 24)))
      {
        v57 = cche_param_ctx_polynomial_degree(*(_QWORD *)a3);
        v58 = *v56;
        v59 = **v56;
        v60 = (*v56)[1];
        v62 = **(_DWORD **)(a3 + 24);
        v61 = *(_DWORD *)(*(_QWORD *)(a3 + 24) + 4);
        v63 = (_QWORD *)*a4;
        v64 = *(_DWORD *)(*a4 + 4) - 1;
        v102 = a2;
        v98 = (v62 * v61);
        v100 = (v60 * v59);
        if (*(_DWORD *)(*a4 + 4) != 1)
        {
          do
          {
            v63 = (_QWORD *)v63[14];
            --v64;
          }
          while (v64);
        }
        if (v61)
        {
          v65 = 0;
          v66 = 0;
          v67 = 0;
          v68 = v60 - 1;
          v69 = a4 + 1;
          v70 = a2 + 32;
          do
          {
            v71 = v58;
            if (v68 > v67)
            {
              v72 = v68;
              v71 = v58;
              do
              {
                v71 = (int *)*((_QWORD *)v71 + 14);
                --v72;
              }
              while (v72 > v67);
            }
            v73 = v69;
            v74 = v65;
            v75 = v66;
            v76 = v57;
            if (v57)
            {
              do
              {
                v77 = *v73++;
                v78 = *(_QWORD *)(a3 + 16);
                v79 = (v78 * (unsigned __int128)v77) >> 64;
                v80 = v78 * v77;
                v81 = v63[4];
                v82 = ((unint64_t)v80 * (unsigned __int128)v81) >> 64;
                v83 = (v79 * (unsigned __int128)v81) >> 64;
                v84 = v79 * v81;
                v42 = __CFADD__(v82, v84);
                v85 = v82 + v84;
                v86 = v42;
                v87 = v86
                    + __CFADD__(v80 * v63[5], v85)
                    + v83
                    + v63[5] * v79
                    + (((unint64_t)v80 * (unsigned __int128)(unint64_t)v63[5]) >> 64);
                v88 = v63[2];
                v89 = v80 - v87 * v88;
                v90 = v89 - v88;
                if (v90 >= 0)
                  v89 = v90;
                v91 = *((_QWORD *)v71 + 2);
                v92 = v89 + *(_QWORD *)(a3 + 32 + 8 * v74);
                if (v92 - v91 >= 0)
                  v92 -= v91;
                *(_QWORD *)(v70 + 8 * v75++) = v92;
                ++v74;
                --v76;
              }
              while (v76);
            }
            ++v67;
            v66 += v59;
            v65 += v62;
          }
          while (v67 != v61);
        }
        v93 = sizeof_struct_ccpolyzp_po2cyc();
        memmove(&(&v56[v100])[(unint64_t)(v93 + 7) >> 3], (const void *)(a3 + 24 + 8 * (v98 + ((unint64_t)(v93 + 7) >> 3))), (v93+ 7+ 8* (*(_DWORD *)(*(_QWORD *)(a3 + 24 + 8 * (v98 + ((unint64_t)(v93 + 7) >> 3))) + 4)* **(_DWORD **)(a3 + 24 + 8 * (v98 + ((unint64_t)(v93 + 7) >> 3))))) & 0xFFFFFFFFFFFFFFF8);
        result = 0;
        *(_QWORD *)(v102 + 16) = *(_QWORD *)(a3 + 16);
        return result;
      }
    }
    return 4294967289;
  }
  if (v8 != 1)
    return 4294967289;
  v9 = *(_DWORD *)(a3 + 8);
  if (v9 != cche_ciphertext_fresh_npolys())
    return 4294967289;
  if (*(_DWORD *)(a2 + 8) != v9)
    return 4294967289;
  v94 = (_DWORD **)(a3 + 24);
  v103 = (_QWORD *)(a2 + 24);
  if (!ccpolyzp_po2cyc_ctx_eq(*(_QWORD *)(a3 + 24), *(_DWORD **)(a2 + 24)) || *(_QWORD *)(a3 + 16) != 1)
    return 4294967289;
  v101 = a2;
  v95 = *(_QWORD *)(a1 + 16);
  v10 = *(unsigned int **)a3;
  v11 = cche_param_ctx_polynomial_degree(*(_QWORD *)a3);
  v12 = *(_DWORD *)(*(_QWORD *)(a3 + 24) + 4);
  v13 = cche_param_ctx_cipher_plain_ctx_const((uint64_t)v10, v12);
  v14 = (_DWORD *)*v103;
  v15 = cche_param_ctx_plaintext_ctx((uint64_t)v10);
  v16 = *(uint64_t (**)(uint64_t, unint64_t))(a1 + 24);
  v17 = sizeof_struct_ccpolyzp_po2cyc();
  v18 = v11;
  v97 = v13;
  v99 = a4;
  v96 = (unint64_t *)v16(a1, ((unint64_t)(v17 + 7) >> 3) + v11);
  *v96 = *a4;
  ccn_set(1, &__dst, (void *)(v13 + 24));
  ccn_zero(1, v107);
  if (v11)
  {
    v19 = (unint64_t *)(v15 + 4);
    v20 = v13 + 16;
    v21 = (uint64_t)(v99 + 1);
    v22 = (char *)(v96 + 1);
    v23 = v18;
    while (1)
    {
      ccn_mul_ws(a1, 1, (uint64_t)v105, v20, v21);
      if (ccn_add_ws(a1, 2, v104, v105, &__dst))
        break;
      ccpolyzp_po2cyc_scalar_divmod_ws(a1, v22, v104, v19);
      v22 += 8;
      v21 += 8;
      if (!--v23)
        goto LABEL_11;
    }
    result = 0xFFFFFFFFLL;
  }
  else
  {
LABEL_11:
    if (v12)
    {
      v24 = 0;
      v25 = (unint64_t *)(v97 + 32);
      v26 = v14[1] - 1;
      do
      {
        v27 = v14;
        if (v26 > v24)
        {
          v28 = v26;
          v27 = v14;
          do
          {
            v27 = (_QWORD *)v27[14];
            --v28;
          }
          while (v28 > v24);
        }
        if ((_DWORD)v18)
        {
          v29 = *v25;
          v30 = **v94 * v24;
          v31 = *(_DWORD *)*v103 * v24;
          v32 = v99 + 1;
          v33 = (uint64_t *)(v96 + 1);
          v34 = v18;
          do
          {
            v35 = *v32++;
            v36 = (v35 * (unsigned __int128)v29) >> 64;
            v37 = v35 * v29;
            v38 = v27[4];
            v39 = (v35 * v29 * (unsigned __int128)v38) >> 64;
            v40 = (v36 * (unsigned __int128)v38) >> 64;
            v41 = v36 * v38;
            v42 = __CFADD__(v39, v41);
            v43 = v39 + v41;
            v44 = v42;
            v45 = v44
                + __CFADD__(v37 * v27[5], v43)
                + v40
                + v27[5] * v36
                + (((unint64_t)v37 * (unsigned __int128)(unint64_t)v27[5]) >> 64);
            v46 = v27[2];
            v47 = v37 - v45 * v46;
            if (v47 - v46 >= 0)
              v47 -= v46;
            v48 = *v33++;
            v49 = v47 + v48;
            if (v49 - v46 >= 0)
              v49 -= v46;
            v50 = v49 + *(_QWORD *)(a3 + 32 + 8 * v30);
            if (v50 - v46 >= 0)
              v50 -= v46;
            *(_QWORD *)(v101 + 32 + 8 * v31++) = v50;
            ++v30;
            --v34;
          }
          while (v34);
        }
        ++v25;
        ++v24;
      }
      while (v24 != v12);
    }
    v51 = *(_DWORD **)(v101 + 24);
    v52 = sizeof_struct_ccpolyzp_po2cyc();
    v53 = &(&v94[*(_DWORD *)(*(_QWORD *)(a3 + 24) + 4) * **(_DWORD **)(a3 + 24)])[(unint64_t)(v52 + 7) >> 3];
    memmove(&v103[(v51[1] * *v51) + ((unint64_t)(v52 + 7) >> 3)], v53, (v52 + 7 + 8 * ((*v53)[1] * **v53)) & 0xFFFFFFFFFFFFFFF8);
    result = 0;
    *(_QWORD *)(v101 + 16) = *(_QWORD *)(a3 + 16);
  }
  *(_QWORD *)(a1 + 16) = v95;
  return result;
}

uint64_t cche_ciphertext_plaintext_add(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  char v6;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD v17[4];
  void (*v18)(uint64_t);
  char v19;

  v6 = 0;
  v19 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v19 = v6;
  v12 = cche_param_ctx_polynomial_degree(*a2);
  v13 = sizeof_struct_ccpolyzp_po2cyc();
  v17[0] = cc_malloc_clear((v13 + 8 * v12 + 7) & 0xFFFFFFFFFFFFFFF8);
  v14 = cche_param_ctx_polynomial_degree(*a2);
  v17[1] = ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3) + v14;
  v17[2] = 0;
  v17[3] = cc_ws_alloc;
  v18 = cc_ws_free;
  if (v17[0])
  {
    v15 = cche_ciphertext_plaintext_add_ws((uint64_t)v17, a1, (uint64_t)a2, a3);
    v18((uint64_t)v17);
  }
  else
  {
    v15 = 4294967283;
  }
  cc_disable_dit(&v19);
  return v15;
}

uint64_t cche_ciphertext_coeff_plaintext_mul_ws(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t (*v11)(uint64_t, unint64_t);
  _DWORD *v12;
  uint64_t v13;
  unsigned int **v14;
  uint64_t v15;
  uint64_t result;

  if (*(_DWORD *)(a2 + 8) != *(_DWORD *)(a3 + 8))
    return 4294967289;
  v8 = *(_QWORD *)(a1 + 16);
  if (!ccpolyzp_po2cyc_ctx_eq(*(_QWORD *)(a2 + 24), *(_DWORD **)(a3 + 24)))
    return 4294967289;
  v9 = *a4;
  v10 = cche_param_ctx_plaintext_ctx(*(_QWORD *)a3);
  if (!ccpolyzp_po2cyc_ctx_eq(v9, v10))
    return 4294967289;
  v11 = *(uint64_t (**)(uint64_t, unint64_t))(a1 + 24);
  v12 = *(_DWORD **)(a3 + 24);
  v13 = sizeof_struct_ccpolyzp_po2cyc();
  v14 = (unsigned int **)v11(a1, (v12[1] * *v12) + ((unint64_t)(v13 + 7) >> 3));
  v15 = cche_param_ctx_cipher_plain_ctx_const(*(_QWORD *)a3, *(_DWORD *)(*(_QWORD *)(a3 + 24) + 4));
  result = cche_dcrt_plaintext_encode_ws(a1, v14, (uint64_t)a4, v15);
  if (!(_DWORD)result)
    result = cche_ciphertext_coeff_dcrt_plaintext_mul(a2, a3, (uint64_t *)v14);
  *(_QWORD *)(a1 + 16) = v8;
  return result;
}

uint64_t cche_param_ctx_cipher_plain_ctx_const(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *cche_param_ctx_plaintext_ctx(a1);
  v5 = cche_param_ctx_plaintext_ctx(a1);
  v6 = cche_param_ctx_polynomial_degree(a1);
  v7 = sizeof_struct_ccpolyzp_po2cyc_ctx() + 7;
  if (v6 >= 0x80)
    v8 = 128;
  else
    v8 = v6;
  v9 = ((unint64_t)(sizeof_struct_ccrns_mul_modulus() + 7) >> 3) * v8 + v6;
  v10 = (4 * v4 + 7) & 0x7FFFFFFF8;
  v11 = cche_param_ctx_chain_const(a1);
  v12 = cche_decrypt_ctx_nof_n((unsigned int *)(v11 + 8));
  v13 = v12;
  if (a2 < 2)
    return (uint64_t)&v5[4 * v9 + 12 + 2 * (v7 >> 3) + 2 * v12] + v10;
  v14 = sizeof_struct_cche_cipher_plain_ctx();
  return (uint64_t)&v5[4 * v9 + 16 + 4 * (((a2 - 2) * (unint64_t)(a2 - 3)) >> 1) + 2 * v13]
       + ((v14 + 7) & 0xFFFFFFFFFFFFFFF8)
       + (v7 & 0xFFFFFFFFFFFFFFF8)
       + v10
       + (((v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 32) * (a2 - 2);
}

uint64_t cche_ciphertext_coeff_dcrt_plaintext_mul(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  char v6;
  _DWORD **v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  _DWORD *v21;
  unsigned int **v22;
  uint64_t v23;
  char v25;

  v6 = 0;
  v25 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v25 = v6;
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && (v12 = (_DWORD **)(a1 + 24), ccpolyzp_po2cyc_ctx_eq(*(_QWORD *)(a1 + 24), *(_DWORD **)(a2 + 24)))
    && ccpolyzp_po2cyc_ctx_eq(*a3, *(_DWORD **)(a2 + 24)))
  {
    v13 = *(unsigned int *)(a2 + 8);
    if (a1 != a2)
    {
      v14 = *(_DWORD **)(a2 + 24);
      v15 = sizeof_struct_ccrns_mul_modulus();
      v16 = sizeof_struct_ccpolyzp_po2cyc();
      v17 = (v15 + v16 - 1) / v16;
      v18 = sizeof_struct_ccpolyzp_po2cyc();
      memmove((void *)a1, (const void *)a2, 8 * (v17 + ((v14[1] * *v14) + ((unint64_t)(v18 + 7) >> 3)) * v13));
    }
    v19 = cche_ciphertext_fwd_ntt(a1);
    if (!(_DWORD)v19)
    {
      if ((_DWORD)v13)
      {
        for (i = 0; i != v13; ++i)
        {
          v21 = *v12;
          v22 = &v12[((v21[1] * *v21) + ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3))
                   * i];
          ccpolyzp_po2cyc_eval_mul(v22, v22, (_DWORD **)a3);
        }
      }
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v19 = cche_ciphertext_inv_ntt(a1);
    }
    v23 = v19;
  }
  else
  {
    v23 = 4294967289;
  }
  cc_disable_dit(&v25);
  return v23;
}

uint64_t cche_ciphertext_coeff_plaintext_mul(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  char v6;
  int *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD v19[4];
  void (*v20)(uint64_t);
  char v21;

  v6 = 0;
  v21 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v21 = v6;
  v12 = *(int **)(a2 + 24);
  v13 = *v12;
  v14 = v12[1];
  v15 = sizeof_struct_ccpolyzp_po2cyc();
  v19[0] = cc_malloc_clear((v15 + 8 * (v14 * v13) + 7) & 0xFFFFFFFFFFFFFFF8);
  v16 = *v12;
  LODWORD(v12) = v12[1];
  v19[1] = ((_DWORD)v12 * v16) + ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3);
  v19[2] = 0;
  v19[3] = cc_ws_alloc;
  v20 = cc_ws_free;
  if (v19[0])
  {
    v17 = cche_ciphertext_coeff_plaintext_mul_ws((uint64_t)v19, a1, a2, a3);
    v20((uint64_t)v19);
  }
  else
  {
    v17 = 4294967283;
  }
  cc_disable_dit(&v21);
  return v17;
}

uint64_t cche_ciphertext_eval_plaintext_mul_ws(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t (*v11)(uint64_t, unint64_t);
  _DWORD *v12;
  uint64_t v13;
  unsigned int **v14;
  uint64_t v15;
  uint64_t result;

  if (*(_DWORD *)(a2 + 8) != *(_DWORD *)(a3 + 8))
    return 4294967289;
  v8 = *(_QWORD *)(a1 + 16);
  if (!ccpolyzp_po2cyc_ctx_eq(*(_QWORD *)(a2 + 24), *(_DWORD **)(a3 + 24)))
    return 4294967289;
  v9 = *a4;
  v10 = cche_param_ctx_plaintext_ctx(*(_QWORD *)a3);
  if (!ccpolyzp_po2cyc_ctx_eq(v9, v10))
    return 4294967289;
  v11 = *(uint64_t (**)(uint64_t, unint64_t))(a1 + 24);
  v12 = *(_DWORD **)(a3 + 24);
  v13 = sizeof_struct_ccpolyzp_po2cyc();
  v14 = (unsigned int **)v11(a1, (v12[1] * *v12) + ((unint64_t)(v13 + 7) >> 3));
  v15 = cche_param_ctx_cipher_plain_ctx_const(*(_QWORD *)a3, *(_DWORD *)(*(_QWORD *)(a3 + 24) + 4));
  result = cche_dcrt_plaintext_encode_ws(a1, v14, (uint64_t)a4, v15);
  if (!(_DWORD)result)
  {
    result = cche_ciphertext_eval_dcrt_plaintext_mul(a2, a3, (uint64_t *)v14);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  }
  *(_QWORD *)(a1 + 16) = v8;
  return result;
}

uint64_t cche_ciphertext_eval_dcrt_plaintext_mul(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  char v6;
  _DWORD **v12;
  _DWORD **v13;
  uint64_t v14;
  uint64_t i;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v20;

  v6 = 0;
  v20 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v20 = v6;
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && (v12 = (_DWORD **)(a1 + 24),
        v13 = (_DWORD **)(a2 + 24),
        ccpolyzp_po2cyc_ctx_eq(*(_QWORD *)(a1 + 24), *(_DWORD **)(a2 + 24)))
    && ccpolyzp_po2cyc_ctx_eq(*a3, *v13))
  {
    v14 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v14)
    {
      for (i = 0; i != v14; ++i)
      {
        v16 = *v12;
        v17 = sizeof_struct_ccpolyzp_po2cyc();
        ccpolyzp_po2cyc_eval_mul(&v12[((v16[1] * *v16) + ((unint64_t)(v17 + 7) >> 3)) * i], &v13[(((*v13)[1] * **v13) + ((unint64_t)(v17 + 7) >> 3)) * i], (_DWORD **)a3);
      }
    }
    v18 = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  else
  {
    v18 = 4294967289;
  }
  cc_disable_dit(&v20);
  return v18;
}

uint64_t cche_ciphertext_eval_plaintext_mul(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  char v6;
  int *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD v19[4];
  void (*v20)(uint64_t);
  char v21;

  v6 = 0;
  v21 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v21 = v6;
  v12 = *(int **)(a2 + 24);
  v13 = *v12;
  v14 = v12[1];
  v15 = sizeof_struct_ccpolyzp_po2cyc();
  v19[0] = cc_malloc_clear((v15 + 8 * (v14 * v13) + 7) & 0xFFFFFFFFFFFFFFF8);
  v16 = *v12;
  LODWORD(v12) = v12[1];
  v19[1] = ((_DWORD)v12 * v16) + ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3);
  v19[2] = 0;
  v19[3] = cc_ws_alloc;
  v20 = cc_ws_free;
  if (v19[0])
  {
    v17 = cche_ciphertext_eval_plaintext_mul_ws((uint64_t)v19, a1, a2, a3);
    v20((uint64_t)v19);
  }
  else
  {
    v17 = 4294967283;
  }
  cc_disable_dit(&v21);
  return v17;
}

void *ccec_cp_x25519_asm()
{
  return &ccec_cp25519_asm_params_0;
}

uint64_t ccaes_cfb_encrypt_vng_vector(uint64_t result, int8x16_t *a2, uint64_t a3, int8x16_t *a4, int8x16_t *a5)
{
  uint64_t v5;
  int8x16_t *v6;
  uint64_t v8;
  BOOL v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v19;

  if (a3)
  {
    v5 = *(unsigned int *)(result + 240);
    if ((_DWORD)v5 == 160 || (_DWORD)v5 == 192 || (_DWORD)v5 == 224)
    {
      do
      {
        _Q2 = *(_OWORD *)result;
        v6 = (int8x16_t *)(result + 16);
        v8 = v5 - 16;
        do
        {
          __asm
          {
            AESE            V0.16B, V2.16B
            AESMC           V0.16B, V0.16B
          }
          _Q2 = (__int128)*v6++;
          v15 = v8 <= 16;
          v8 -= 16;
        }
        while (!v15);
        v16 = *v6;
        result = (uint64_t)v6->i64 - v5;
        v17 = *a4++;
        __asm { AESE            V0.16B, V2.16B }
        v19 = veorq_s8(veorq_s8(_Q0, v16), v17);
        *a5++ = v19;
        v15 = a3-- <= 1;
      }
      while (!v15);
      result = 0;
      *a2 = v19;
    }
    else
    {
      return -1;
    }
  }
  return result;
}

uint64_t ccmode_siv_decrypt(_QWORD *a1, unint64_t a2, _OWORD *a3, char *a4)
{
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  __int128 v12;
  char v13[16];
  char v14[24];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C874D8];
  if (*(_QWORD *)(*(_QWORD *)(*a1 + 56) + 8) != 16)
    return 4294967226;
  v5 = a1[2];
  if (v5 != 4 && v5 != 2)
    return 4294967228;
  v7 = a2 - 16;
  if (a2 >= 0x10)
  {
    v10 = *(_QWORD *)(*a1 + 64);
    *(_OWORD *)v14 = *a3;
    v12 = *(_OWORD *)v14;
    BYTE8(v12) = v14[8] & 0x7F;
    BYTE12(v12) = v14[12] & 0x7F;
    v8 = ccctr_one_shot(v10, a1[1] >> 1, (uint64_t)(a1 + 7), (uint64_t)&v12, v7, (uint64_t)(a3 + 1), (uint64_t)a4);
    if (!(_DWORD)v8)
    {
      v8 = ccmode_siv_auth_finalize((uint64_t)a1, v7, a4, v13);
      if (!(_DWORD)v8)
      {
        if (!cc_cmp_safe(16, v13, v14) && a1[2] == 5)
          return 0;
        v8 = 4294967227;
      }
    }
    cc_clear(v7, a4);
    return v8;
  }
  return 4294967229;
}

uint64_t cczp_generate_non_zero_element_ws(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, unint64_t, uint64_t), char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;

  v8 = cczp_n(a2);
  v9 = cczp_bitlen(a2);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v8);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v8 + 1);
  v13 = ccn_random_bits(v9 + 64, v12, a3);
  if (!(_DWORD)v13)
  {
    v14 = (unint64_t *)cczp_prime(a2);
    ccn_sub1(v8, v11, v14, 1uLL);
    ccn_divmod_ws(a1, (unint64_t)(v9 + 127) >> 6, v12, 0, 0, v8, a4, (uint64_t)v11);
    ccn_add1_ws(a1, v8, a4, (uint64_t *)a4, 1);
  }
  *(_QWORD *)(a1 + 16) = v10;
  return v13;
}

void *ccdh_gp_rfc3526group05()
{
  return &_ccdh_gp_rfc3526group05;
}

uint64_t ccrng_test_init(uint64_t (**a1)(uint64_t a1, uint64_t a2, uint64_t a3), uint64_t a2, uint64_t a3, const char *a4)
{
  _QWORD *v6;
  uint64_t result;

  *a1 = ccrng_test_generate;
  v6 = ccaes_cbc_encrypt_mode();
  result = ccdrbg_df_bc_init(ccrng_test_init_df_ctx, v6, 0x10uLL);
  if (!(_DWORD)result)
  {
    ccrng_test_init_custom = (uint64_t)ccaes_ctr_crypt_mode();
    ccdrbg_factory_nistctr(a1 + 1, (uint64_t)&ccrng_test_init_custom);
    a1[8] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))malloc_type_malloc(2 * (_QWORD)a1[1], 0xE5F22845uLL);
    if (!a4)
      a4 = (const char *)&unk_1DEE1715E;
    strlen(a4);
    return ccdrbg_init((uint64_t)(a1 + 1));
  }
  return result;
}

uint64_t ccrng_test_generate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ccdrbg_generate(a1 + 8, *(_QWORD *)(a1 + 64), a2, a3, 0, 0);
}

void ccrng_test_done(uint64_t a1)
{
  ccdrbg_done(a1 + 8, *(_QWORD *)(a1 + 64));
  free(*(void **)(a1 + 64));
  *(_QWORD *)(a1 + 64) = 0;
}

BOOL ccec_is_compactable_pub(uint64_t **a1)
{
  char v2;
  uint64_t *v8;
  uint64_t v9;
  _QWORD **v10;
  uint64_t v11;
  uint64_t *v12;
  _BOOL8 v13;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t (*v17)(_QWORD *, uint64_t);
  void (*v18)(uint64_t);
  char v19;

  v2 = 0;
  v19 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v19 = v2;
  v8 = *a1;
  v9 = **a1;
  v15[0] = cc_malloc_clear(8 * v9);
  v15[1] = v9;
  v16 = 0;
  v17 = cc_ws_alloc;
  v18 = cc_ws_free;
  if (v15[0])
  {
    v10 = a1 + 2;
    v11 = *v8;
    if (ccn_n(*v8, &v10[2 * *v8]) == 1 && v10[2 * *v8] == (_QWORD *)1)
    {
      v12 = (uint64_t *)cc_ws_alloc(v15, v11);
      cczp_negate((uint64_t)v8, v12, (unint64_t *)&v10[*v8]);
      v13 = (int)ccn_cmp(v11, (unint64_t *)v12, (unint64_t *)&v10[*v8]) >= 0;
      v16 = 0;
      v18((uint64_t)v15);
    }
    else
    {
      v13 = 0;
      cc_ws_free((uint64_t)v15);
    }
  }
  else
  {
    v13 = 0;
  }
  cc_disable_dit(&v19);
  return v13;
}

uint64_t ccec_compact_export_pub(char *a1, uint64_t a2)
{
  char v4;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v13;
  char v14;

  v4 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v14 = v4;
  v10 = *(uint64_t **)a2;
  v13 = (unint64_t)(cczp_bitlen(*(_QWORD *)a2) + 7) >> 3;
  v11 = ccec_export_affine_point(v10, 4, (unint64_t *)(a2 + 16), &v13, a1);
  cc_disable_dit(&v14);
  return v11;
}

uint64_t ccprime_rabin_miller_init_ws(uint64_t a1, uint64_t *a2, unint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t inited;
  uint64_t *v10;
  int8x16_t *v11;
  unint64_t v12;

  v8 = *(_QWORD *)(a1 + 16);
  inited = cczp_mm_init_ws(a1, a2, a3, a4);
  if (!(_DWORD)inited)
  {
    v10 = &a2[2 * *a2];
    v11 = (int8x16_t *)&v10[*a2 + 5];
    ccn_set(a3, v11, a4);
    v11->i64[0] &= ~1uLL;
    v12 = ccn_trailing_zeros(a3, (uint64_t)v11);
    v10[4] = v12;
    ccn_shift_right_multi(a3, (int8x16_t *)(v10 + 5), v11, v12);
    cczp_to_ws(a1, (uint64_t)a2);
  }
  *(_QWORD *)(a1 + 16) = v8;
  return inited;
}

uint64_t ccprime_rabin_miller_iteration_ws(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (**a4)(_QWORD, unint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  char v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v21;

  v4 = *a2;
  v5 = &a2[2 * *a2];
  if ((unint64_t)v5[4] > 0x3F)
    return 0;
  v21 = v5[4];
  v9 = (uint64_t)(v5 + 5);
  v10 = cczp_n((uint64_t)a2);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v10);
  v13 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v10);
  cczp_to_ws(a1, (uint64_t)a2);
  ccn_seti(v10, v13, 1);
  cczp_to_ws(a1, (uint64_t)a2);
  v14 = cczp_power_blinded_ws(a1, (uint64_t)a2, v12, (unint64_t *)v12, v10 << 6, v9, a4);
  if (!(_DWORD)v14)
  {
    v15 = (unint64_t *)(v9 + 8 * v4);
    v16 = ccn_cmp(v10, v15, (unint64_t *)v12);
    v14 = ((ccn_cmp(v10, (unint64_t *)v12, v13) & 1) == 0) | ((v16 & 1) == 0);
    v17 = 1;
    do
    {
      if ((v14 | (((v17 ^ (unint64_t)v21) + 0xFFFFFFFF) >> 32)) != 1)
        break;
      cczp_sqr_ws(a1, (uint64_t)a2);
      v14 |= (ccn_cmp(v10, v15, (unint64_t *)v12) & 1) == 0;
      v18 = ccn_cmp(v10, (unint64_t *)v12, v13);
      v19 = (v14 & 1) == 0 && v18 == 0;
      if (v19)
        break;
      v19 = v17++ == 63;
    }
    while (!v19);
  }
  *(_QWORD *)(a1 + 16) = v11;
  return v14;
}

uint64_t ccprime_rabin_miller_ws(uint64_t a1, unint64_t a2, unint64_t *a3, unint64_t a4, uint64_t (**a5)(_QWORD, unint64_t, uint64_t))
{
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  if (!a4)
    return 4294967289;
  result = ccn_n(a2, a3);
  if (result)
  {
    v11 = result;
    v12 = *a3;
    if (result == 1 && v12 == 1)
      return 0;
    if ((v12 & 1) != 0)
    {
      v14 = 0;
      while (1)
      {
        v13 = (unsigned __int16)ccn_prime_table[v14];
        if (ccn_divides1(a2, a3, v13))
          break;
        if (++v14 == 255)
        {
          v15 = *(_QWORD *)(a1 + 16);
          v16 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 4 * a2 + 5);
          result = ccprime_rabin_miller_init_ws(a1, v16, a2, a3);
          if (!(_DWORD)result)
          {
            v17 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, a2);
            v18 = 0;
            if (a4 <= 1)
              v19 = 1;
            else
              v19 = a4;
            v26 = v19;
LABEL_21:
            v20 = cczp_n((uint64_t)v16);
            v21 = *(_QWORD *)(a1 + 16);
            v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v20);
            cc_clear(16 * v20, v22);
            v23 = cczp_bitlen((uint64_t)v16);
            v27 = v21;
            if ((unint64_t)cczp_bitlen((uint64_t)v16) <= 0x40)
              v24 = cczp_bitlen((uint64_t)v16) + (v20 << 6) - 1;
            else
              v24 = v23 + 64;
            v25 = 100;
            while (1)
            {
              result = ccn_random_bits(v24, (uint64_t)v22, a5);
              if ((_DWORD)result)
                break;
              cczp_mod_ws(a1, (uint64_t)v16);
              if (v20 && ((unint64_t)ccn_n(v20, v17) > 1 || *v17 > 1uLL))
              {
                *(_QWORD *)(a1 + 16) = v27;
                result = ccprime_rabin_miller_iteration_ws(a1, v16, (uint64_t)v17, a5);
                if ((_DWORD)result == 1 && ++v18 != v26)
                  goto LABEL_21;
                break;
              }
              if (!--v25)
                cc_try_abort();
            }
          }
          *(_QWORD *)(a1 + 16) = v15;
          return result;
        }
      }
    }
    else
    {
      v13 = 2;
    }
    return v11 == 1 && *a3 == v13;
  }
  return result;
}

uint64_t ccprime_rabin_miller(unint64_t a1, unint64_t *a2, unint64_t a3, uint64_t (**a4)(_QWORD, unint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v15[4];
  void (*v16)(uint64_t);

  v8 = sizeof_struct_ccrns_mul_modulus();
  v9 = sizeof_struct_ccpolyzp_po2cyc();
  v10 = 19 * a1 + 2;
  v15[0] = cc_malloc_clear(8 * ((v8 + v9 - 1) / v9 + v10));
  v11 = sizeof_struct_ccrns_mul_modulus();
  v12 = sizeof_struct_ccpolyzp_po2cyc();
  v15[1] = (v11 + v12 - 1) / v12 + v10;
  v15[2] = 0;
  v15[3] = cc_ws_alloc;
  v16 = cc_ws_free;
  if (!v15[0])
    return 4294967283;
  v13 = ccprime_rabin_miller_ws((uint64_t)v15, a1, a2, a3, a4);
  v16((uint64_t)v15);
  return v13;
}

uint64_t ccmode_siv_hmac_nonce(_QWORD *a1, size_t a2, char *a3)
{
  uint64_t v3;
  uint64_t result;

  v3 = a1[3];
  if (v3 != 4 && v3 != 2)
    return 4294967228;
  if (!a2)
    return 4294967194;
  ccmode_siv_hmac_auth_backend(a1, a2, a3, 78);
  result = 0;
  a1[3] = 6;
  return result;
}

_BYTE *ccmode_factory_ccm_decrypt(uint64_t a1, _QWORD *a2)
{
  char v2;
  char v9;

  v2 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v9 = v2;
  *(_QWORD *)a1 = ((a2[1] + 7) & 0xFFFFFFFFFFFFFFF8) + ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  *(_OWORD *)(a1 + 8) = xmmword_1DEE1AA30;
  *(_QWORD *)(a1 + 24) = ccmode_ccm_init;
  *(_QWORD *)(a1 + 32) = ccmode_ccm_set_iv;
  *(_QWORD *)(a1 + 40) = ccmode_ccm_cbcmac;
  *(_QWORD *)(a1 + 48) = ccmode_ccm_decrypt;
  *(_QWORD *)(a1 + 56) = ccmode_ccm_finalize;
  *(_QWORD *)(a1 + 64) = ccmode_ccm_reset;
  *(_QWORD *)(a1 + 72) = a2;
  *(_QWORD *)(a1 + 80) = 0;
  return cc_disable_dit(&v9);
}

size_t ccpad_cts2_encrypt(uint64_t a1, uint64_t a2, uint64_t a3, size_t a4, uint64_t a5, char *a6)
{
  char v12;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  char v24;
  char v26;
  _BYTE __src[32];
  uint64_t v28;

  v12 = 0;
  v28 = *MEMORY[0x1E0C874D8];
  v26 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v12 = 1;
    }
  }
  v26 = v12;
  v18 = *(_QWORD *)(a1 + 8);
  v19 = (a4 - 1) / v18;
  if (v19 >= 2)
  {
    v21 = (v19 - 1) * v18;
    (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a2, a3);
    v20 = a4 - v21;
    a5 += v21;
    a6 += v21;
  }
  else
  {
    v20 = a4;
  }
  if (v20 == 2 * v18)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *))(a1 + 24))(a2, a3, 2, a5, __src);
  }
  else
  {
    cc_clear(2 * v18, __src);
    __memcpy_chk();
    (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *, _BYTE *))(a1 + 24))(a2, a3, 2, __src, __src);
    v22 = 0;
    v23 = &__src[v18];
    do
    {
      v24 = __src[v22];
      __src[v22] = v23[v22];
      v23[v22++] = v24;
    }
    while (v18 != v22);
  }
  memcpy(a6, __src, v20);
  cc_disable_dit(&v26);
  return a4;
}

_BYTE *cc_atfork_child()
{
  char v0;
  char v7;

  v0 = 0;
  v7 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v0 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v0 = 1;
    }
  }
  v7 = v0;
  ccrng_atfork_child();
  return cc_disable_dit(&v7);
}

uint64_t cccmac_one_shot_generate(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4, char *a5, size_t a6, void *a7)
{
  char v12;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v12 = 0;
  v26 = *MEMORY[0x1E0C874D8];
  HIBYTE(v25) = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v12 = 1;
    }
  }
  HIBYTE(v25) = v12;
  MEMORY[0x1E0C86820](a1, a2, a2, a3);
  v19 = (char *)(&v25 - 2 * v18);
  v22 = cccmac_init(a1, (uint64_t)v19, v20, v21);
  if (!(_DWORD)v22)
  {
    v22 = cccmac_update(v19, a4, a5);
    if (!(_DWORD)v22)
      v22 = cccmac_final_generate(v19, a6, a7);
  }
  v23 = v22;
  cc_clear(a1[1] + *a1 + 80, v19);
  cc_disable_dit((_BYTE *)&v25 + 7);
  return v23;
}

uint64_t cccmac_one_shot_verify(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4, char *a5, uint64_t a6, char *a7)
{
  char v12;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v12 = 0;
  v26 = *MEMORY[0x1E0C874D8];
  HIBYTE(v25) = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v12 = 1;
    }
  }
  HIBYTE(v25) = v12;
  MEMORY[0x1E0C86820](a1, a2, a2, a3);
  v19 = (char *)(&v25 - 2 * v18);
  v22 = cccmac_init(a1, (uint64_t)v19, v20, v21);
  if (!(_DWORD)v22)
  {
    v22 = cccmac_update(v19, a4, a5);
    if (!(_DWORD)v22)
      v22 = cccmac_final_verify(v19, a6, a7);
  }
  v23 = v22;
  cc_clear(a1[1] + *a1 + 80, v19);
  cc_disable_dit((_BYTE *)&v25 + 7);
  return v23;
}

int8x16_t *ccm128_decrypt(int8x16_t *a1, int8x16_t *a2, int8x16_t *a3, int a4, int8x16_t *a5, int8x16_t *a6, unsigned int a7)
{
  int8x16_t v7;
  int8x16_t *v8;
  int8x16_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int8x16_t *result;
  int8x16_t v23;
  int8x16_t *v47;
  int v48;
  int8x16_t v49;

  v7 = *(int8x16_t *)&qword_1DEDF3700[2 * a7];
  _Q16 = *a5;
  _Q17 = a5[1];
  _Q18 = a5[2];
  _Q19 = a5[3];
  v8 = a5 + 4;
  _Q20 = *v8;
  _Q21 = v8[1];
  _Q22 = v8[2];
  _Q23 = v8[3];
  v8 += 4;
  _Q24 = *v8;
  _Q25 = v8[1];
  v19 = v8[2];
  v20 = (int64x2_t)vqtbl1q_s8(*a6, *(int8x16_t *)Lbswap_mask_2);
  v21 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddq_s64(v20, *(int64x2_t *)qword_1DEDF3700), v7), vbicq_s8((int8x16_t)v20, v7));
  v23 = *a1;
  result = a1 + 1;
  __asm
  {
    AESE            V3.16B, V16.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V17.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V18.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V19.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V20.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V21.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V22.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V23.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V24.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V25.16B
  }
  *a2 = veorq_s8(v23, veorq_s8(_Q3, v19));
  v47 = a2 + 1;
  v48 = a4 - 1;
  if (v48)
  {
    do
    {
      v21 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddq_s64(v21, *(int64x2_t *)qword_1DEDF3700), v7), vbicq_s8((int8x16_t)v21, v7));
      v49 = *result++;
      __asm
      {
        AESE            V3.16B, V16.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V16.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V17.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V17.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V18.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V18.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V19.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V19.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V20.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V20.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V21.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V21.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V22.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V22.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V23.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V23.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V24.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V24.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V25.16B
        AESE            V1.16B, V25.16B
      }
      *v47++ = veorq_s8(v49, veorq_s8(_Q3, v19));
      _VF = __OFSUB__(v48--, 1);
    }
    while (!((v48 < 0) ^ _VF | (v48 == 0)));
  }
  __asm
  {
    AESE            V1.16B, V16.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V17.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V18.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V19.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V20.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V21.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V22.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V23.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V24.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V25.16B
  }
  *a6 = vqtbl1q_s8((int8x16_t)v21, *(int8x16_t *)Lbswap_mask_2);
  *a3 = veorq_s8(_Q1, v19);
  return result;
}

int8x16_t *ccm192_decrypt(int8x16_t *a1, int8x16_t *a2, int8x16_t *a3, int a4, int8x16_t *a5, int8x16_t *a6, unsigned int a7)
{
  int8x16_t v7;
  int8x16_t *v8;
  int8x16_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int8x16_t *result;
  int8x16_t v25;
  int8x16_t *v53;
  int v54;
  int8x16_t v55;

  v7 = *(int8x16_t *)&qword_1DEDF3700[2 * a7];
  _Q16 = *a5;
  _Q17 = a5[1];
  _Q18 = a5[2];
  _Q19 = a5[3];
  v8 = a5 + 4;
  _Q20 = *v8;
  _Q21 = v8[1];
  _Q22 = v8[2];
  _Q23 = v8[3];
  v8 += 4;
  _Q24 = *v8;
  _Q25 = v8[1];
  _Q26 = v8[2];
  _Q27 = v8[3];
  v21 = v8[4];
  v22 = (int64x2_t)vqtbl1q_s8(*a6, *(int8x16_t *)Lbswap_mask_2);
  v23 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddq_s64(v22, *(int64x2_t *)qword_1DEDF3700), v7), vbicq_s8((int8x16_t)v22, v7));
  v25 = *a1;
  result = a1 + 1;
  __asm
  {
    AESE            V3.16B, V16.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V17.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V18.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V19.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V20.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V21.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V22.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V23.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V24.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V25.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V26.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V27.16B
  }
  *a2 = veorq_s8(v25, veorq_s8(_Q3, v21));
  v53 = a2 + 1;
  v54 = a4 - 1;
  if (v54)
  {
    do
    {
      v23 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddq_s64(v23, *(int64x2_t *)qword_1DEDF3700), v7), vbicq_s8((int8x16_t)v23, v7));
      v55 = *result++;
      __asm
      {
        AESE            V3.16B, V16.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V16.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V17.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V17.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V18.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V18.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V19.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V19.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V20.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V20.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V21.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V21.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V22.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V22.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V23.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V23.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V24.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V24.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V25.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V25.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V26.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V26.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V27.16B
        AESE            V1.16B, V27.16B
      }
      *v53++ = veorq_s8(v55, veorq_s8(_Q3, v21));
      _VF = __OFSUB__(v54--, 1);
    }
    while (!((v54 < 0) ^ _VF | (v54 == 0)));
  }
  __asm
  {
    AESE            V1.16B, V16.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V17.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V18.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V19.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V20.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V21.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V22.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V23.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V24.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V25.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V26.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V27.16B
  }
  *a6 = vqtbl1q_s8((int8x16_t)v23, *(int8x16_t *)Lbswap_mask_2);
  *a3 = veorq_s8(_Q1, v21);
  return result;
}

int8x16_t *ccm256_decrypt(int8x16_t *a1, int8x16_t *a2, int8x16_t *a3, int a4, int8x16_t *a5, int8x16_t *a6, unsigned int a7)
{
  int8x16_t v7;
  int8x16_t *v8;
  int8x16_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int8x16_t *result;
  int8x16_t v27;
  int8x16_t *v59;
  int v60;
  int8x16_t v61;

  v7 = *(int8x16_t *)&qword_1DEDF3700[2 * a7];
  _Q16 = *a5;
  _Q17 = a5[1];
  _Q18 = a5[2];
  _Q19 = a5[3];
  v8 = a5 + 4;
  _Q20 = *v8;
  _Q21 = v8[1];
  _Q22 = v8[2];
  _Q23 = v8[3];
  v8 += 4;
  _Q24 = *v8;
  _Q25 = v8[1];
  _Q26 = v8[2];
  _Q27 = v8[3];
  v8 += 4;
  _Q28 = *v8;
  _Q29 = v8[1];
  v23 = v8[2];
  v24 = (int64x2_t)vqtbl1q_s8(*a6, *(int8x16_t *)Lbswap_mask_2);
  v25 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddq_s64(v24, *(int64x2_t *)qword_1DEDF3700), v7), vbicq_s8((int8x16_t)v24, v7));
  v27 = *a1;
  result = a1 + 1;
  __asm
  {
    AESE            V3.16B, V16.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V17.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V18.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V19.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V20.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V21.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V22.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V23.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V24.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V25.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V26.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V27.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V28.16B
    AESMC           V3.16B, V3.16B
    AESE            V3.16B, V29.16B
  }
  *a2 = veorq_s8(v27, veorq_s8(_Q3, v23));
  v59 = a2 + 1;
  v60 = a4 - 1;
  if (v60)
  {
    do
    {
      v25 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vaddq_s64(v25, *(int64x2_t *)qword_1DEDF3700), v7), vbicq_s8((int8x16_t)v25, v7));
      v61 = *result++;
      __asm
      {
        AESE            V3.16B, V16.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V16.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V17.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V17.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V18.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V18.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V19.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V19.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V20.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V20.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V21.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V21.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V22.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V22.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V23.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V23.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V24.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V24.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V25.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V25.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V26.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V26.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V27.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V27.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V28.16B
        AESMC           V3.16B, V3.16B
        AESE            V1.16B, V28.16B
        AESMC           V1.16B, V1.16B
        AESE            V3.16B, V29.16B
        AESE            V1.16B, V29.16B
      }
      *v59++ = veorq_s8(v61, veorq_s8(_Q3, v23));
      _VF = __OFSUB__(v60--, 1);
    }
    while (!((v60 < 0) ^ _VF | (v60 == 0)));
  }
  __asm
  {
    AESE            V1.16B, V16.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V17.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V18.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V19.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V20.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V21.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V22.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V23.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V24.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V25.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V26.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V27.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V28.16B
    AESMC           V1.16B, V1.16B
    AESE            V1.16B, V29.16B
  }
  *a6 = vqtbl1q_s8((int8x16_t)v25, *(int8x16_t *)Lbswap_mask_2);
  *a3 = veorq_s8(_Q1, v23);
  return result;
}

uint64_t ccaes_ofb_crypt_vng_vector(uint64_t result, int8x16_t *a2, uint64_t a3, int8x16_t *a4, int8x16_t *a5)
{
  uint64_t v5;
  int8x16_t *v6;
  uint64_t v8;
  BOOL v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v19;

  if (a3)
  {
    v5 = *(unsigned int *)(result + 240);
    if ((_DWORD)v5 == 160 || (_DWORD)v5 == 192 || (_DWORD)v5 == 224)
    {
      do
      {
        _Q2 = *(_OWORD *)result;
        v6 = (int8x16_t *)(result + 16);
        v8 = v5 - 16;
        do
        {
          __asm
          {
            AESE            V0.16B, V2.16B
            AESMC           V0.16B, V0.16B
          }
          _Q2 = (__int128)*v6++;
          v15 = v8 <= 16;
          v8 -= 16;
        }
        while (!v15);
        v16 = *v6;
        result = (uint64_t)v6->i64 - v5;
        v17 = *a4++;
        __asm { AESE            V0.16B, V2.16B }
        v19 = veorq_s8(_Q0, v16);
        *a5++ = veorq_s8(v19, v17);
        v15 = a3-- <= 1;
      }
      while (!v15);
      result = 0;
      *a2 = v19;
    }
    else
    {
      return -1;
    }
  }
  return result;
}

void *ccrc4()
{
  return &ccrc4_eay;
}

void *ccaes_siv_decrypt_mode()
{
  void *v0;
  uint64_t *v1;

  v0 = ccaes_cbc_encrypt_mode();
  v1 = ccaes_ctr_crypt_mode();
  ccmode_factory_siv_decrypt((uint64_t)&siv_decrypt, (uint64_t)v0, (uint64_t)v1);
  return &siv_decrypt;
}

uint64_t ccrsa_sign_pkcs1v15_blinded_ws(uint64_t a1, uint64_t (**a2)(_QWORD, uint64_t, uint64_t), unint64_t *a3, unsigned __int8 *a4, size_t a5, const void *a6, unint64_t *a7, unsigned __int8 *a8)
{
  unint64_t v16;
  unint64_t v17;
  uint64_t result;
  unint64_t v19;
  uint64_t *v20;
  uint64_t (**v21)(_QWORD, uint64_t, uint64_t);
  uint64_t v22;

  v16 = *a3;
  v17 = ccn_write_uint_size(*a3, a3 + 3);
  if (*a7 < v17)
    return 4294967273;
  v19 = v17;
  v21 = a2;
  v22 = *(_QWORD *)(a1 + 16);
  v20 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v16);
  *a7 = v19;
  result = ccrsa_emsa_pkcs1v15_encode(v19, a8, a5, a6, a4);
  if (!(_DWORD)result)
  {
    ccn_read_uint(v16, v20, v19, a8);
    result = ccrsa_priv_crypt_blinded_ws(a1, v21, (uint64_t *)a3, v20, (unint64_t *)v20);
    if (!(_DWORD)result)
    {
      ccn_write_uint_padded_ct(v16, (unint64_t *)v20, v19, (char *)a8);
      result = 0;
    }
  }
  *(_QWORD *)(a1 + 16) = v22;
  return result;
}

uint64_t ccrsa_sign_pkcs1v15_blinded(uint64_t (**a1)(_QWORD, uint64_t, uint64_t), unint64_t *a2, unsigned __int8 *a3, size_t a4, const void *a5, unint64_t *a6, unsigned __int8 *a7)
{
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD v29[4];
  void (*v30)(uint64_t);

  v13 = *a2;
  v14 = sizeof_struct_ccrns_mul_modulus();
  v15 = sizeof_struct_ccpolyzp_po2cyc();
  v16 = (v14 + v15 - 1) / v15 + 11 * v13;
  v17 = CCRSA_CRT_POWER_BLINDED_WORKSPACE_N(v13);
  if (v16 + 1 > v17)
    v18 = v16 + 1;
  else
    v18 = v17;
  v19 = cc_malloc_clear(8 * (v18 + 3 * v13));
  v29[0] = v19;
  v20 = *a2;
  v21 = sizeof_struct_ccrns_mul_modulus();
  v22 = sizeof_struct_ccpolyzp_po2cyc();
  v23 = (v21 + v22 - 1) / v22 + 11 * v20;
  v24 = CCRSA_CRT_POWER_BLINDED_WORKSPACE_N(v20);
  if (v23 + 1 > v24)
    v25 = v23 + 1;
  else
    v25 = v24;
  v29[1] = v25 + 3 * v20;
  v29[2] = 0;
  v29[3] = cc_ws_alloc;
  v30 = cc_ws_free;
  if (!v19)
    return 4294967283;
  v26 = ccrsa_sign_pkcs1v15_blinded_ws((uint64_t)v29, a1, a2, a3, a4, a5, a6, a7);
  v30((uint64_t)v29);
  return v26;
}

uint64_t ccrsa_sign_pkcs1v15(unint64_t *a1, unsigned __int8 *a2, size_t a3, const void *a4, unint64_t *a5, unsigned __int8 *a6)
{
  char v12;
  uint64_t *v18;
  uint64_t v19;
  char v21;

  v12 = 0;
  v21 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v12 = 1;
    }
  }
  v21 = v12;
  v18 = ccrng(0);
  if (v18)
    v19 = ccrsa_sign_pkcs1v15_blinded((uint64_t (**)(_QWORD, uint64_t, uint64_t))v18, a1, a2, a3, a4, a5, a6);
  else
    v19 = 0xFFFFFFFFLL;
  cc_disable_dit(&v21);
  return v19;
}

uint64_t ccrsa_sign_pkcs1v15_msg_blinded_ws(uint64_t a1, uint64_t (**a2)(_QWORD, uint64_t, uint64_t), unint64_t *a3, uint64_t a4, size_t a5, char *a6, unint64_t *a7, unsigned __int8 *a8)
{
  _BYTE v15[64];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C874D8];
  ccdigest(a4, a5, a6, (uint64_t)v15);
  return ccrsa_sign_pkcs1v15_blinded_ws(a1, a2, a3, *(unsigned __int8 **)(a4 + 32), *(_QWORD *)a4, v15, a7, a8);
}

uint64_t ccrsa_sign_pkcs1v15_msg_blinded(uint64_t (**a1)(_QWORD, uint64_t, uint64_t), unint64_t *a2, uint64_t a3, size_t a4, char *a5, unint64_t *a6, unsigned __int8 *a7)
{
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD v29[4];
  void (*v30)(uint64_t);
  _BYTE v31[64];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C874D8];
  v13 = *a2;
  v14 = sizeof_struct_ccrns_mul_modulus();
  v15 = sizeof_struct_ccpolyzp_po2cyc();
  v16 = (v14 + v15 - 1) / v15 + 11 * v13;
  v17 = CCRSA_CRT_POWER_BLINDED_WORKSPACE_N(v13);
  if (v16 + 1 > v17)
    v18 = v16 + 1;
  else
    v18 = v17;
  v19 = cc_malloc_clear(8 * (v18 + 3 * v13));
  v29[0] = v19;
  v20 = *a2;
  v21 = sizeof_struct_ccrns_mul_modulus();
  v22 = sizeof_struct_ccpolyzp_po2cyc();
  v23 = (v21 + v22 - 1) / v22 + 11 * v20;
  v24 = CCRSA_CRT_POWER_BLINDED_WORKSPACE_N(v20);
  if (v23 + 1 > v24)
    v25 = v23 + 1;
  else
    v25 = v24;
  v29[1] = v25 + 3 * v20;
  v29[2] = 0;
  v29[3] = cc_ws_alloc;
  v30 = cc_ws_free;
  if (!v19)
    return 4294967283;
  ccdigest(a3, a4, a5, (uint64_t)v31);
  v26 = ccrsa_sign_pkcs1v15_blinded_ws((uint64_t)v29, a1, a2, *(unsigned __int8 **)(a3 + 32), *(_QWORD *)a3, v31, a6, a7);
  v30((uint64_t)v29);
  return v26;
}

uint64_t ccrsa_sign_pkcs1v15_msg(unint64_t *a1, uint64_t a2, size_t a3, char *a4, unint64_t *a5, unsigned __int8 *a6)
{
  char v10;
  uint64_t v16;
  char v18;
  _BYTE v19[64];
  uint64_t v20;

  v10 = 0;
  v20 = *MEMORY[0x1E0C874D8];
  v18 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v18 = v10;
  ccdigest(a2, a3, a4, (uint64_t)v19);
  v16 = ccrsa_sign_pkcs1v15(a1, *(unsigned __int8 **)(a2 + 32), *(_QWORD *)a2, v19, a5, a6);
  cc_disable_dit(&v18);
  return v16;
}

uint64_t ccsha3_final(unint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t (*a4)(uint64_t *))
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  const void *v13;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C874D8];
  v8 = a1[1];
  v7 = a1[2];
  v9 = a2 + v8 + 8;
  if (v7 <= *(unsigned int *)(v9 + v7))
    *(_DWORD *)(v9 + v7) = 0;
  MEMORY[0x1E0C86820](a1, a2, a3, a4);
  v11 = (char *)v15 - v10;
  memcpy((char *)v15 - v10, v13, v12 + 12);
  cckeccak_absorb_and_pad((uint64_t)(v11 + 8), v7, *(unsigned int *)&v11[v8 + 8 + v7], (uint64_t *)&v11[v8 + 8], 6u, a4);
  cckeccak_squeeze((uint64_t)(v11 + 8), a1[2], *a1, a3, a4);
  return cc_clear(a1[1] + a1[2] + 12, v11);
}

uint64_t ccrsa_generate_probable_prime_ws(uint64_t a1, unint64_t a2, char *a3, int8x16_t *a4, unint64_t a5, unint64_t a6, uint64_t a7, void *a8, uint64_t (**a9)(_QWORD, unint64_t, void *), uint64_t (**a10)(_QWORD, unint64_t, uint64_t), unint64_t *a11)
{
  unint64_t *v17;
  uint64_t (**v18)(_QWORD, unint64_t, void *);
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t result;
  unint64_t v28;
  unint64_t *v29;
  char *v30;
  char *v31;
  unint64_t *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int8x16_t *v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  int is_valid_prime_ws;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *__s;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  rsize_t __n;
  uint64_t v59;
  unint64_t v62;
  void *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  unsigned int v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;

  v17 = a11;
  v18 = a9;
  v19 = (a2 + 63) >> 6;
  v41 = *(_QWORD *)(a1 + 16);
  v63 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v19);
  v69 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v19);
  v20 = 0;
  v72 = (a5 + 63) >> 6;
  if (a5 + 1 > a6)
    v21 = a5 + 1;
  else
    v21 = a6;
  v22 = (v21 + 63) >> 6;
  v53 = a5 + 63;
  v52 = v22 - ((a5 + 63) >> 6);
  v54 = a6 - 1;
  v55 = a5 - 1;
  v57 = (a6 + 63) >> 6;
  v51 = a6 + 63;
  v50 = v22 - v57;
  v47 = 2 * v22;
  v64 = v22;
  v43 = v19 - 2 * v22;
  v45 = a2 - 5;
  v23 = a2 - 1;
  v75 = a2 - 256;
  __n = 8 * v19;
  v49 = a2;
  v24 = 5 * a2;
  if (5 * a2 <= 1)
    v24 = 1;
  v42 = v24;
  v62 = a6;
  v25 = a5;
  v48 = a5;
  __s = a3;
  do
  {
    v67 = v20;
    ccn_zero(v72, v63);
    ccn_zero(v72, v69);
    if (ccn_random_bits_fips(v25, v63, v18) || ccn_random_bits_fips(v62, v69, v18))
    {
      result = 4294967260;
      goto LABEL_60;
    }
    v73 = *(_QWORD *)(a1 + 16);
    ccn_set_bit((uint64_t)v63, v55, 1);
    ccn_set_bit((uint64_t)v69, v54, 1);
    if (v17)
    {
      v17 += 387 * v17[2];
      *v17 = ccn_bitlen(v72, (unint64_t *)v63);
      v17[1] = ccn_bitlen(v72, (unint64_t *)v69);
      __memcpy_chk();
      __memcpy_chk();
      v17[3] |= 1uLL;
      v17[67] |= 1uLL;
    }
    v26 = v64;
    result = ccrsa_find_next_prime_ws(a1, v25, (unint64_t *)v63, a10);
    if ((_DWORD)result)
      goto LABEL_60;
    result = ccrsa_find_next_prime_ws(a1, v62, (unint64_t *)v69, a10);
    if ((_DWORD)result || !v17)
    {
      *(_QWORD *)(a1 + 16) = v73;
      v28 = v49;
      if ((_DWORD)result)
        goto LABEL_60;
    }
    else
    {
      __memcpy_chk();
      v26 = v64;
      __memcpy_chk();
      *(_QWORD *)(a1 + 16) = v73;
      v28 = v49;
    }
    v68 = ccrsa_num_mr_iterations(v28);
    v59 = *(_QWORD *)(a1 + 16);
    v29 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v19);
    v56 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v19);
    v74 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v19);
    *v29 = v28;
    v65 = ccn_bitlen(1, v29);
    v70 = *(_QWORD *)(a1 + 16);
    v30 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v19);
    v31 = &v30[8 * v26];
    if (v53 >= 0x40)
      ccn_set(v72, v31, v63);
    ccn_zero(v52, &v31[8 * v72]);
    if (v51 >= 0x40)
      ccn_set(v57, v29, v69);
    ccn_zero(v50, &v29[v57]);
    if (ccn_invmod_ws(a1, v64, v30, v64, v31, v29))
    {
      v66 = a11;
LABEL_50:
      v33 = v67;
      *(_QWORD *)(a1 + 16) = v70;
      v34 = -32;
      goto LABEL_51;
    }
    ccn_sub_ws(a1, v64, v30, (uint64_t *)v29, (unint64_t *)v30);
    ccn_add_ws(a1, v64, v31, (uint64_t *)v31, (uint64_t *)v31);
    v32 = (unint64_t *)v74;
    ccn_mul_ws(a1, v64, (uint64_t)v74, (uint64_t)v31, (uint64_t)v29);
    if (v19 <= v47)
    {
      ccn_mul_ws(a1, v64, (uint64_t)v29, (uint64_t)v31, (uint64_t)v30);
      ccn_add1_ws(a1, v47, v29, (uint64_t *)v29, 1);
    }
    else
    {
      ccn_zero(v43, &v74[v47]);
      ccn_mul_ws(a1, v64, (uint64_t)v29, (uint64_t)v31, (uint64_t)v30);
      ccn_add1_ws(a1, v47, v29, (uint64_t *)v29, 1);
      v32 = (unint64_t *)v74;
      ccn_zero(v43, &v29[v47]);
    }
    *(_QWORD *)(a1 + 16) = v70;
    v33 = v67;
    a3 = __s;
    if (ccn_bitlen(v19, v32) <= v45 - v65)
    {
      v35 = 0;
      v66 = a11;
      v18 = a9;
LABEL_27:
      v44 = v35;
      ccn_zero(v19, a4);
      v70 = *(_QWORD *)(a1 + 16);
      v36 = (int8x16_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v19);
      v37 = 100;
      while (!ccn_random_bits_fips(v28, a4, a9))
      {
        ccn_set_bit((uint64_t)a4, v23, 1);
        ccn_shift_right_multi(v19, v36, a4, v75);
        if ((ccn_cmp(4, (unint64_t *)v36, SQRT2) & 0x80000000) == 0)
        {
          *(_QWORD *)(a1 + 16) = v70;
          if (v66)
          {
            v66 += 387 * v66[2];
            __memcpy_chk();
          }
          else
          {
            v66 = 0;
          }
          ccn_divmod_ws(a1, v19, (uint64_t)a4, 0, 0, v19, __s, (uint64_t)v74);
          v71 = ccn_sub_ws(a1, v19, __s, (uint64_t *)v29, (unint64_t *)__s);
          ccn_add_ws(a1, v19, v56, v74, (uint64_t *)__s);
          ccn_mux(v19, v71, (uint64_t *)__s, v56, (uint64_t *)__s);
          v38 = ccn_add_ws(a1, v19, __s, a4->i64, (uint64_t *)__s);
          if (v28)
          {
            v39 = v42;
            while (!v38 && ccn_bitlen(v19, (unint64_t *)__s) <= v28)
            {
              is_valid_prime_ws = ccrsa_is_valid_prime_ws(a1, v19, __s, a7, a8, v68, a10);
              if (is_valid_prime_ws < 0)
              {
                v34 = -32;
                goto LABEL_47;
              }
              if (is_valid_prime_ws == 1)
              {
                v34 = 0;
                v25 = v48;
                v17 = a11;
                v33 = v67;
                goto LABEL_52;
              }
              v38 = ccn_add_ws(a1, v19, __s, (uint64_t *)__s, v74);
              if (!--v39)
                goto LABEL_45;
            }
            v35 = v44 + 1;
            v34 = -30;
            v33 = v67;
            if (v44 != 99)
              goto LABEL_27;
          }
          else
          {
LABEL_45:
            v34 = -31;
LABEL_47:
            v33 = v67;
          }
          goto LABEL_51;
        }
        if (!--v37)
          goto LABEL_50;
      }
      goto LABEL_50;
    }
    v34 = -38;
    v66 = a11;
    v18 = a9;
LABEL_51:
    cc_clear(__n, a3);
    cc_clear(__n, a4);
    v25 = v48;
    v17 = a11;
LABEL_52:
    if (v66)
      memcpy(v66 + 323, a3, __n);
    *(_QWORD *)(a1 + 16) = v59;
    if (!v34)
      break;
    v20 = v33 + 1;
  }
  while (v33 < 0x63);
  if (v33 == 99)
    result = 0xFFFFFFFFLL;
  else
    result = v34;
LABEL_60:
  *(_QWORD *)(a1 + 16) = v41;
  return result;
}

uint64_t ccrsa_check_delta_100bits_ws(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t *a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t *v13;
  void *v14;
  unint64_t v15;
  int v16;

  v12 = *(_QWORD *)(a1 + 16);
  v13 = (uint64_t *)(*(uint64_t (**)(void))(a1 + 24))();
  v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, a2);
  v15 = ccn_bitlen(a2, a3);
  ccn_zero(a2, v14);
  ccn_set_bit((uint64_t)v14, v15 - 100, 1);
  ccn_abs(a2, v13, (uint64_t *)a3, a4);
  LODWORD(a4) = ccn_cmp(a2, (unint64_t *)v13, (unint64_t *)v14);
  ccn_abs(a2, v13, a5, a6);
  v16 = ccn_cmp(a2, (unint64_t *)v13, (unint64_t *)v14);
  *(_QWORD *)(a1 + 16) = v12;
  if (v16 + (_DWORD)a4 == 2)
    return 0;
  else
    return 4294967257;
}

uint64_t ccrsa_crt_make_fips186_key_ws(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4, void *a5, unint64_t *a6, unint64_t *a7)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t result;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  unint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v13 = *a3;
  v14 = ((unint64_t)*a3 >> 1) + 1;
  v15 = (_QWORD *)ccrsa_ctx_public(a3);
  v16 = ccn_bitlen(v14, a6);
  if (ccn_bitlen(v14, a7) + v16 > v13 << 6)
    return 4294967273;
  v26 = *(_QWORD *)(a1 + 16);
  v18 = &v15[2 * *v15];
  v19 = v18 + 4;
  if (a4)
    ccn_set(a4, v18 + 4, a5);
  ccn_zero(v13 - a4, &v19[a4]);
  v20 = ccn_cmp(v14, a6, a7);
  if (v20 >= 0)
    v21 = a7;
  else
    v21 = a6;
  if (v20 >= 0)
    a7 = a6;
  *(_QWORD *)ccrsa_ctx_private_zp(a3) = v14;
  v22 = ccrsa_ctx_private_zp(a3);
  *(_QWORD *)(v22 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a3) + 32) = v14;
  v23 = (_QWORD *)ccrsa_ctx_private_zp(a3);
  v24 = ccrsa_ctx_private_zp(a3);
  v25 = v24 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a3);
  ccn_set(v14, v23 + 3, a7);
  ccn_set(v14, (void *)(v25 + 56), v21);
  result = cczp_init_ws(a1, v23);
  if (!(_DWORD)result)
  {
    result = cczp_init_ws(a1, (_QWORD *)(v25 + 32));
    if (!(_DWORD)result)
    {
      result = ccrsa_crt_makekey_ws(a1, a3);
      if (!(_DWORD)result)
      {
        if (cczp_bitlen((uint64_t)v15) + 1 >= a2)
          result = 0;
        else
          result = 4294967273;
      }
    }
  }
  *(_QWORD *)(a1 + 16) = v26;
  return result;
}

uint64_t ccrsa_generate_fips186_key_trace(unint64_t a1, uint64_t *a2, unint64_t a3, unsigned __int8 *a4, uint64_t (**a5)(_QWORD, unint64_t, void *), uint64_t (**a6)(_QWORD, unint64_t, uint64_t), _QWORD *a7)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  void *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int8x16_t *v46;
  uint64_t v47;
  int8x16_t *v48;
  uint64_t probable_prime_ws;
  unint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v59;
  unint64_t v60;
  unint64_t v62;
  char *v66;
  _QWORD v67[2];
  uint64_t v68;
  uint64_t (*v69)(_QWORD *, uint64_t);
  void (*v70)(uint64_t);

  v9 = a1 + 63;
  v10 = (a1 + 63) >> 6;
  v11 = sizeof_struct_ccrns_mul_modulus();
  v12 = sizeof_struct_ccpolyzp_po2cyc();
  v13 = (v11 + v12 - 1) / v12;
  v14 = 11 * v10 + 1;
  v15 = CCRSA_CRT_POWER_BLINDED_WORKSPACE_N(v10);
  if (v13 + v14 <= v15)
    v16 = v15;
  else
    v16 = v13 + v14;
  v17 = 8 * v10 - (v9 >> 6);
  v18 = v16 + v17;
  v19 = (v10 & 0x3FFFFFFFFFFFFFELL) + (v9 >> 6) + 25 * v10 + 4;
  if (v18 <= v13 + v19)
    v18 = v13 + v19;
  v20 = v9 >> 7;
  v21 = 3 * (v9 >> 7) + 3;
  v22 = cc_malloc_clear(8 * (v18 + v21));
  v67[0] = v22;
  v23 = sizeof_struct_ccrns_mul_modulus();
  v24 = sizeof_struct_ccpolyzp_po2cyc();
  v25 = (v23 + v24 - 1) / v24;
  v26 = v25 + v14;
  v60 = v10;
  v27 = CCRSA_CRT_POWER_BLINDED_WORKSPACE_N(v10);
  if (v26 <= v27)
    v28 = v27;
  else
    v28 = v26;
  v29 = v28 + v17;
  if (v29 <= v25 + v19)
    v29 = v25 + v19;
  v67[1] = v29 + v21;
  v68 = 0;
  v69 = cc_ws_alloc;
  v70 = cc_ws_free;
  if (!v22)
    return 4294967283;
  if (a1 > 0x2000)
  {
    v30 = 4294967273;
LABEL_17:
    cc_ws_free((uint64_t)v67);
    return v30;
  }
  v31 = a1;
  *a2 = v10;
  v32 = (uint64_t *)ccrsa_ctx_public(a2);
  if (ccn_read_uint(v10, &v32[2 * *v32 + 4], a3, a4))
  {
    v30 = 4294967268;
    goto LABEL_17;
  }
  v34 = v20 + 1;
  v66 = (char *)cc_ws_alloc(v67, v20 + 1);
  v35 = (char *)v69(v67, v20 + 1);
  v36 = *a2;
  v53 = *v32;
  v37 = (void *)v69(v67, v34);
  v62 = v34;
  cc_clear(8 * v34, v37);
  v56 = (unint64_t *)v37;
  v57 = (v31 + 1) >> 1;
  ccn_set_bit((uint64_t)v37, v57, 1);
  if (v31 >= 0x200)
  {
    v38 = (a3 + 7) >> 3;
    v54 = (unint64_t *)&a2[3 * v36 + 4];
    v55 = v31;
    v39 = (unint64_t *)&v32[2 * v53 + 4];
    v40 = v31 - ((v31 + 1) >> 1);
    v41 = 171;
    if (v31 > 0xFFE)
      v41 = 201;
    v42 = 101;
    if (v31 > 0x400)
      v42 = 141;
    if (v31 <= 0xBFE)
      v43 = v42;
    else
      v43 = v41;
    v44 = v62;
LABEL_29:
    v45 = ccn_bitlen(v38, v39);
    v59 = v68;
    v46 = (int8x16_t *)v69(v67, v44);
    v47 = v69(v67, v44);
    v30 = 4294967268;
    if ((*(_BYTE *)v39 & 1) != 0 && v45 >= 0x11 && v45 <= 0xFF)
    {
      v48 = (int8x16_t *)v47;
      if (a7)
      {
        cc_clear(0x1830uLL, a7);
        a7[389] = 0;
        a7[2] = 0;
      }
      probable_prime_ws = ccrsa_generate_probable_prime_ws((uint64_t)v67, v57, v66, v46, v43, v43, v38, v39, a5, a6, a7);
      if (!(_DWORD)probable_prime_ws)
      {
        v50 = 0;
        while (1)
        {
          if (a7)
          {
            a7[389] = 1;
            a7[2] = 1;
          }
          probable_prime_ws = ccrsa_generate_probable_prime_ws((uint64_t)v67, v40, v35, v48, v43, v43, v38, v39, a5, a6, a7);
          if ((_DWORD)probable_prime_ws)
            break;
          v51 = ccrsa_check_delta_100bits_ws((uint64_t)v67, v62, (unint64_t *)v66, (unint64_t *)v35, v46->i64, (unint64_t *)v48);
          v30 = v51;
          if (v50 <= 0x62)
          {
            ++v50;
            if ((_DWORD)v51 == -39)
              continue;
          }
          v68 = v59;
          v44 = v62;
          if ((_DWORD)v51)
            goto LABEL_48;
          probable_prime_ws = ccrsa_crt_make_fips186_key_ws((uint64_t)v67, v55, a2, v38, v39, (unint64_t *)v66, (unint64_t *)v35);
          if ((_DWORD)probable_prime_ws)
            break;
          if ((int)ccn_cmpn(v60, v54, v62, v56) < 1)
            goto LABEL_29;
          ccrsa_pairwise_consistency_check_ws((uint64_t)v67, a2, (uint64_t (**)(_QWORD, uint64_t, uint64_t))a5);
          if (v52)
            v30 = 4294967259;
          else
            v30 = 0;
          goto LABEL_48;
        }
      }
      v30 = probable_prime_ws;
    }
  }
  else
  {
    v30 = 4294967268;
  }
LABEL_48:
  v68 = 0;
  v70((uint64_t)v67);
  return v30;
}

uint64_t ccrsa_generate_fips186_key(unint64_t a1, uint64_t *a2, unint64_t a3, unsigned __int8 *a4, uint64_t (**a5)(_QWORD, unint64_t, void *), uint64_t (**a6)(_QWORD, unint64_t, uint64_t))
{
  char v6;
  uint64_t fips186_key_trace;
  char v14;

  v6 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v14 = v6;
  fips186_key_trace = ccrsa_generate_fips186_key_trace(a1, a2, a3, a4, a5, a6, 0);
  cc_try_abort_if ((_DWORD)fips186_key_trace == -37);
  cc_disable_dit(&v14);
  return fips186_key_trace;
}

uint64_t ccrsa_find_next_prime_ws(uint64_t a1, unint64_t a2, unint64_t *a3, uint64_t (**a4)(_QWORD, unint64_t, uint64_t))
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;

  v7 = (a2 + 63) >> 6;
  v8 = ccrsa_num_mr_iterations_aux(a2);
  v9 = ccn_sub1(v7, a3, a3, 2uLL);
  if (v9)
    return 4294967262;
  *a3 |= 1uLL;
  v11 = *(_QWORD *)(a1 + 16);
  while (!(_DWORD)v9)
  {
    if (!ccn_add1_ws(a1, v7, a3, (uint64_t *)a3, 2))
    {
      LODWORD(v9) = ccprime_rabin_miller_ws(a1, v7, a3, v8, a4);
      if (v9 < 2)
        continue;
    }
    result = 4294967262;
    goto LABEL_9;
  }
  result = 0;
LABEL_9:
  *(_QWORD *)(a1 + 16) = v11;
  return result;
}

uint64_t ccrsa_sign_pss_blinded(uint64_t (**a1)(_QWORD, uint64_t, uint64_t), uint64_t *a2, uint64_t *a3, uint64_t a4, rsize_t a5, uint64_t (**a6)(_QWORD, rsize_t, char *), size_t a7, uint64_t a8, unint64_t *a9, char *a10)
{
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v36;
  uint64_t (*v37)(_QWORD, rsize_t, char *);
  unsigned int v38;
  uint64_t (*v39)(_QWORD *, uint64_t);
  uint64_t v40;
  unint64_t *v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD v48[2];
  uint64_t v49;
  uint64_t (*v50)(_QWORD *, uint64_t);
  void (*v51)(uint64_t);
  char v52[64];
  _BYTE __s[12];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C874D8];
  v16 = *a2;
  v17 = sizeof_struct_ccrns_mul_modulus();
  v18 = sizeof_struct_ccpolyzp_po2cyc();
  v19 = (v17 + v18 - 1) / v18 + 11 * v16;
  v20 = CCRSA_CRT_POWER_BLINDED_WORKSPACE_N(v16);
  if (v19 + 1 > v20)
    v21 = v19 + 1;
  else
    v21 = v20;
  v22 = cc_malloc_clear(8 * (v21 + 3 * v16));
  v48[0] = v22;
  v23 = *a2;
  v24 = sizeof_struct_ccrns_mul_modulus();
  v25 = sizeof_struct_ccpolyzp_po2cyc();
  v26 = (v24 + v25 - 1) / v25 + 11 * v23;
  v27 = CCRSA_CRT_POWER_BLINDED_WORKSPACE_N(v23);
  if (v26 + 1 > v27)
    v28 = v26 + 1;
  else
    v28 = v27;
  v48[1] = v28 + 3 * v23;
  v49 = 0;
  v50 = cc_ws_alloc;
  v51 = cc_ws_free;
  if (!v22)
    return 4294967283;
  v29 = cczp_bitlen((uint64_t)a2);
  if (v29 == 1024)
  {
    v30 = *a3;
    v32 = a7 - 2 < a5 && v30 == 512;
    v33 = 4294967273;
    if (a5 > a7 || v32)
      goto LABEL_24;
  }
  else
  {
    if (a5 > a7)
    {
LABEL_23:
      v33 = 4294967273;
LABEL_24:
      cc_ws_free((uint64_t)v48);
      return v33;
    }
    v30 = *a3;
  }
  if (v30 != a7)
    goto LABEL_23;
  v34 = (unint64_t)(v29 + 7) >> 3;
  if (*a9 < v34)
    goto LABEL_23;
  v36 = v29 - 1;
  *a9 = v34;
  v45 = (unint64_t)(v29 + 6) >> 3;
  if (a5)
  {
    v37 = *a6;
    if (a5 > 0xB)
    {
      v38 = v37(a6, a5, v52);
    }
    else
    {
      v38 = v37(a6, 12, __s);
      __memcpy_chk();
      cc_clear(a5, __s);
    }
    v44 = v49;
    v39 = v50;
  }
  else
  {
    v44 = 0;
    v38 = 0;
    v39 = cc_ws_alloc;
  }
  v40 = *a2;
  v41 = (unint64_t *)v39(v48, *a2);
  v41[v40 - 1] = 0;
  *v41 = 0;
  v42 = ccrsa_emsa_pss_encode((uint64_t)a3, a4, a5, v52, a7, a8, v36, (_BYTE *)v41 + 8 * v40 - v45);
  ccn_swap(v40, v41);
  v43 = ccrsa_priv_crypt_blinded_ws((uint64_t)v48, a1, a2, (uint64_t *)v41, v41) | v42;
  if (v43 | v38)
  {
    cc_clear(8 * v40, v41);
    if (v38)
      v33 = v38;
    else
      v33 = v43;
  }
  else
  {
    ccn_write_uint_padded_ct(v40, v41, *a9, a10);
    v33 = 0;
  }
  v49 = v44;
  v51((uint64_t)v48);
  return v33;
}

uint64_t fipspost_post_hkdf(char a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  __int128 v14;
  __int128 v15;
  void *v16;
  const char *v17;
  __int128 v18;
  __int128 v19;
  void *v20;
  const char *v21;
  __int128 v22;
  __int128 v23;
  void *v24;
  const char *v25;
  __int128 v26;
  __int128 v27;
  void *v28;
  const char *v29;
  __int128 v30;
  __int128 v31;
  void *v32;
  const char *v33;
  __int128 v34;
  __int128 v35;
  void *v36;
  const char *v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[2];
  uint64_t v41;
  __int128 v42;
  _OWORD v43[2];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C874D8];
  v2 = ccsha1_di();
  v3 = ccsha256_di();
  v4 = ccsha512_di();
  v5 = ccsha3_224_di();
  v6 = ccsha3_256_di();
  v7 = ccsha3_384_di();
  v8 = ccsha3_512_di();
  memset(v43, 0, sizeof(v43));
  v42 = 0uLL;
  v41 = 0;
  memset(v40, 0, sizeof(v40));
  if ((a1 & 0x10) != 0)
    LOBYTE(v43[0]) = 1;
  v9 = 0;
  v10 = 0;
  v13[0] = v2;
  v13[1] = "sha1";
  v14 = xmmword_1DEE28D28;
  v15 = unk_1DEE28D38;
  v16 = v3;
  v17 = "sha256";
  v18 = xmmword_1DEE28D48;
  v19 = unk_1DEE28D58;
  v20 = v4;
  v21 = "sha512";
  v22 = xmmword_1DEE28D68;
  v23 = unk_1DEE28D78;
  v24 = v5;
  v25 = "sha3_224";
  v26 = xmmword_1DEE28D88;
  v27 = unk_1DEE28D98;
  v28 = v6;
  v29 = "sha3_256";
  v30 = xmmword_1DEE28DA8;
  v31 = unk_1DEE28DB8;
  v32 = v7;
  v33 = "sha3_384";
  v34 = xmmword_1DEE28DC8;
  v35 = unk_1DEE28DD8;
  v36 = v8;
  v37 = "sha3_512";
  v38 = xmmword_1DEE28DE8;
  v39 = unk_1DEE28DF8;
  do
  {
    cchkdf((uint64_t *)v13[v9], 0x20uLL, (char *)v43, 16, &v42, 8uLL, (char *)&v41, 32, (uint64_t)v40);
    if (cc_cmp_safe(32, (char *)v40, (char *)&v13[v9 + 2]))
    {
      v11 = mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: HKDF with digest %s\n", v11, "fipspost_post_hkdf", 86, (const char *)v13[v9 + 1]);
      v10 = 4294967221;
    }
    v9 += 6;
  }
  while (v9 != 42);
  return v10;
}

uint64_t cccmac_sl_test_xor(uint64_t result, char *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t i;
  unsigned int v5;

  LOBYTE(v2) = 0;
  v3 = *a2;
  for (i = 15; i != -1; --i)
  {
    v5 = a2[i];
    *(_BYTE *)(result + i) = v2 | (2 * v5);
    v2 = v5 >> 7;
  }
  *(_BYTE *)(result + 15) ^= (v3 >> 7) & 0x87;
  return result;
}

uint64_t cccmac_generate_subkeys(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t result;
  unsigned int v8;
  unsigned int v9;
  uint64_t i;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t j;
  unsigned int v15;
  _QWORD __s[2];
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C874D8];
  v17[0] = 0;
  v17[1] = 0;
  __s[0] = 0;
  __s[1] = 0;
  result = cccbc_one_shot(a1, a2, a3, v17, 1, (uint64_t)__s, (uint64_t)__s);
  if (!(_DWORD)result)
  {
    LOBYTE(v8) = 0;
    v9 = SLOBYTE(__s[0]);
    for (i = 15; i != -1; --i)
    {
      v11 = *((unsigned __int8 *)__s + i);
      a4[i] = v8 | (2 * v11);
      v8 = v11 >> 7;
    }
    LOBYTE(v12) = 0;
    a4[15] ^= (v9 >> 7) & 0x87;
    v13 = *a4;
    for (j = 15; j != -1; --j)
    {
      v15 = a4[j];
      *(_BYTE *)(a5 + j) = v12 | (2 * v15);
      v12 = v15 >> 7;
    }
    *(_BYTE *)(a5 + 15) ^= (v13 >> 7) & 0x87;
    cc_clear(0x10uLL, __s);
    return 0;
  }
  return result;
}

uint64_t ccec_affine_point_from_x_ws(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, _QWORD))(a1 + 24))(a1, *a2);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v7);
  if ((ccn_cmp(*a2, a4, a2 + 3) & 0x80000000) != 0)
  {
    cczp_to_ws(a1, (uint64_t)a2);
    cczp_sqr_ws(a1, (uint64_t)a2);
    cczp_mul_ws(a1, (uint64_t)a2);
    cczp_add_ws(a1, (uint64_t)a2);
    cczp_add_ws(a1, (uint64_t)a2);
    cczp_sub_ws(a1, (uint64_t)a2);
    cczp_add_ws(a1, (uint64_t)a2);
    result = cczp_sqrt_ws(a1, (uint64_t)a2);
    if (!(_DWORD)result)
    {
      cczp_from_ws(a1, (uint64_t)a2);
      cczp_from_ws(a1, (uint64_t)a2);
      result = 0;
    }
  }
  else
  {
    result = 4294967289;
  }
  *(_QWORD *)(a1 + 16) = v8;
  return result;
}

uint64_t cczp_generate_random_element_ws(uint64_t a1, _QWORD *a2, uint64_t (**a3)(_QWORD, unint64_t, uint64_t), uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = cczp_n((uint64_t)a2);
  v10 = cczp_bitlen((uint64_t)a2);
  v11 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9 + 1);
  v12 = ccn_random_bits(v10 + 64, (uint64_t)v11, a3);
  if (!(_DWORD)v12)
    cczp_modn_ws(a1, a2, a4, (unint64_t)(v10 + 127) >> 6, v11);
  *(_QWORD *)(a1 + 16) = v8;
  return v12;
}

const char *fips_allowed_mode_(const char *result, uint64_t a2)
{
  const char *v3;

  if (result)
  {
    v3 = result;
    if (strcmp(result, "ccaes_ctr_crypt_mode")
      && strcmp(v3, "ccaes_ecb_encrypt_mode")
      && strcmp(v3, "ccaes_ecb_decrypt_mode")
      && strcmp(v3, "ccaes_cbc_encrypt_mode")
      && strcmp(v3, "ccaes_cbc_decrypt_mode")
      && strcmp(v3, "ccaes_ccm_encrypt_mode")
      && strcmp(v3, "ccaes_ccm_decrypt_mode")
      && strcmp(v3, "ccaes_cfb_encrypt_mode")
      && strcmp(v3, "ccaes_cfb_decrypt_mode")
      && strcmp(v3, "ccaes_cfb8_encrypt_mode")
      && strcmp(v3, "ccaes_cfb8_decrypt_mode")
      && strcmp(v3, "ccaes_ofb_crypt_mode")
      && strcmp(v3, "ccwrap_auth_encrypt_withiv")
      && strcmp(v3, "ccwrap_auth_decrypt_withiv")
      && strcmp(v3, "ccaes_gcm_encrypt_mode")
      && strcmp(v3, "ccaes_gcm_decrypt_mode"))
    {
      if (!strcmp(v3, "ccaes_xts_encrypt_mode") || !strcmp(v3, "ccaes_xts_decrypt_mode"))
        return (const char *)(a2 == 16 || a2 == 32);
      if (strcmp(v3, "ccpad_cts1_encrypt")
        && strcmp(v3, "ccpad_cts1_decrypt")
        && strcmp(v3, "ccpad_cts2_encrypt")
        && strcmp(v3, "ccpad_cts2_decrypt")
        && strcmp(v3, "ccpad_cts3_encrypt")
        && strcmp(v3, "ccpad_cts3_decrypt"))
      {
        return 0;
      }
    }
    return (const char *)(a2 == 32 || (a2 & 0xFFFFFFFFFFFFFFF7) == 16);
  }
  return result;
}

BOOL fips_allowed(char *__s1, const char *a2)
{
  _BOOL8 v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  unint64_t v32;
  unint64_t v34;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;

  if (!a2)
  {
    if (__s1)
    {
      v43 = strcmp(__s1, "fipspost_post_integrity");
      v42 = strcmp(__s1, "ccsha1_di");
      v41 = strcmp(__s1, "ccsha224_di");
      v40 = strcmp(__s1, "ccsha256_di");
      v39 = strcmp(__s1, "ccsha384_di");
      v38 = strcmp(__s1, "ccsha512_di");
      v37 = strcmp(__s1, "ccsha512_256_di");
      v36 = strcmp(__s1, "ccsha3_224_di");
      v5 = strcmp(__s1, "ccsha3_256_di");
      v6 = strcmp(__s1, "ccsha3_384_di");
      v7 = strcmp(__s1, "ccsha3_512_di");
      v8 = strcmp(__s1, "ccshake128_xi");
      v9 = strcmp(__s1, "ccshake256_xi");
      v10 = strcmp(__s1, "ccdh_gp_rfc3526group14");
      v11 = strcmp(__s1, "ccdh_gp_rfc3526group15");
      v12 = strcmp(__s1, "ccdh_gp_rfc3526group16");
      v13 = strcmp(__s1, "ccdh_gp_rfc3526group17");
      v14 = strcmp(__s1, "ccdh_gp_rfc3526group18");
      if (v43)
        v15 = v42 == 0;
      else
        v15 = 1;
      return v15
          || v41 == 0
          || v40 == 0
          || v39 == 0
          || v38 == 0
          || v37 == 0
          || v36 == 0
          || v5 == 0
          || v6 == 0
          || v7 == 0
          || v8 == 0
          || v9 == 0
          || v10 == 0
          || v11 == 0
          || v12 == 0
          || v13 == 0
          || v14 == 0;
    }
    return 0;
  }
  if (!__s1)
    return 0;
  if (!strcmp(__s1, "ccec_generate_key_fips")
    || !strcmp(__s1, "ccec_sign_msg")
    || !strcmp(__s1, "ccec_make_priv")
    || !strcmp(__s1, "ccec_make_pub"))
  {
    v4 = !strcmp(a2, "ccec_cp_224")
      || !strcmp(a2, "ccec_cp_256")
      || !strcmp(a2, "ccec_cp_384")
      || strcmp(a2, "ccec_cp_521") == 0;
  }
  else
  {
    v4 = 0;
  }
  if (!strcmp(__s1, "ccec_verify_msg") || !strcmp(__s1, "ccec_validate_pub"))
    v4 = !strcmp(a2, "ccec_cp_192")
      || !strcmp(a2, "ccec_cp_224")
      || !strcmp(a2, "ccec_cp_256")
      || !strcmp(a2, "ccec_cp_384")
      || strcmp(a2, "ccec_cp_521") == 0;
  if (!strcmp(__s1, "cchmac"))
    v4 = !strcmp(a2, "ccsha1_di")
      || !strcmp(a2, "ccsha224_di")
      || !strcmp(a2, "ccsha256_di")
      || !strcmp(a2, "ccsha384_di")
      || !strcmp(a2, "ccsha512_di")
      || !strcmp(a2, "ccsha512_256_di")
      || !strcmp(a2, "ccsha3_224_di")
      || !strcmp(a2, "ccsha3_256_di")
      || !strcmp(a2, "ccsha3_384_di")
      || strcmp(a2, "ccsha3_512_di") == 0;
  if (!strcmp(__s1, "ccecdh_compute_shared_secret") || !strcmp(__s1, "ccecdh_generate_key"))
    v4 = !strcmp(a2, "ccec_cp_224")
      || !strcmp(a2, "ccec_cp_256")
      || !strcmp(a2, "ccec_cp_384")
      || strcmp(a2, "ccec_cp_521") == 0;
  if (!strcmp(__s1, "ccdh_generate_key")
    || !strcmp(__s1, "ccdh_import_pub")
    || !strcmp(__s1, "ccdh_import_priv")
    || !strcmp(__s1, "ccdh_compute_shared_secret"))
  {
    v4 = !strcmp(a2, "2048")
      || !strcmp(a2, "3072")
      || !strcmp(a2, "4096")
      || !strcmp(a2, "6144")
      || strcmp(a2, "8192") == 0;
  }
  if (!strcmp(__s1, "ccnistkdf_ctr_hmac") || !strcmp(__s1, "ccnistkdf_ctr_hmac_fixed"))
    v4 = !strcmp(a2, "ccsha1_di")
      || !strcmp(a2, "ccsha224_di")
      || !strcmp(a2, "ccsha256_di")
      || !strcmp(a2, "ccsha384_di")
      || !strcmp(a2, "ccsha512_di")
      || !strcmp(a2, "ccsha512_256_di")
      || !strcmp(a2, "ccsha3_224_di")
      || !strcmp(a2, "ccsha3_256_di")
      || !strcmp(a2, "ccsha3_384_di")
      || strcmp(a2, "ccsha3_512_di") == 0;
  if (!strcmp(__s1, "cchkdf"))
    v4 = !strcmp(a2, "ccsha1_di")
      || !strcmp(a2, "ccsha224_di")
      || !strcmp(a2, "ccsha256_di")
      || !strcmp(a2, "ccsha384_di")
      || !strcmp(a2, "ccsha512_di")
      || !strcmp(a2, "ccsha512_256_di")
      || !strcmp(a2, "ccsha3_224_di")
      || !strcmp(a2, "ccsha3_256_di")
      || !strcmp(a2, "ccsha3_384_di")
      || strcmp(a2, "ccsha3_512_di") == 0;
  if (!strcmp(__s1, "ccpbkdf2_hmac"))
    v4 = !strcmp(a2, "ccsha1_di")
      || !strcmp(a2, "ccsha224_di")
      || !strcmp(a2, "ccsha256_di")
      || !strcmp(a2, "ccsha384_di")
      || !strcmp(a2, "ccsha512_di")
      || !strcmp(a2, "ccsha512_256_di")
      || !strcmp(a2, "ccsha3_224_di")
      || !strcmp(a2, "ccsha3_256_di")
      || !strcmp(a2, "ccsha3_384_di")
      || strcmp(a2, "ccsha3_512_di") == 0;
  if (!strcmp(__s1, "ccnistkdf_ctr_cmac") || !strcmp(__s1, "ccnistkdf_ctr_cmac_fixed"))
  {
    v34 = strtoul(a2, 0, 10);
    return v34 == 32 || (v34 & 0xFFFFFFFFFFFFFFF7) == 16;
  }
  if (!strcmp(__s1, "ccrsa_generate_fips186_key")
    || !strcmp(__s1, "ccrsa_sign_pss_msg")
    || !strcmp(__s1, "ccrsa_sign_pkcs1v15_msg"))
  {
    v4 = strtoul(a2, 0, 10) > 0x7FF;
  }
  if (!strcmp(__s1, "ccrsa_verify_pss_msg") || !strcmp(__s1, "ccrsa_verify_pkcs1v15_msg"))
  {
    v32 = strtoul(a2, 0, 10);
    return v32 == 1024 || v32 > 0x7FF;
  }
  return v4;
}

BOOL fips_allowed_drbg_(const char *a1, const char *a2, const char *a3)
{
  _BOOL8 v3;

  v3 = 0;
  if (a1 && a2 && a3)
  {
    if (!strcmp(a1, "ccdrbg_init")
      || !strcmp(a1, "ccdrbg_reseed")
      || !strcmp(a1, "ccdrbg_generate")
      || !strcmp(a1, "ccdrbg_done"))
    {
      if (!strcmp(a2, "ccdrbg_factory_nisthmac"))
        v3 = !strcmp(a3, "ccsha1_di") || !strcmp(a3, "ccsha256_di") || strcmp(a3, "ccsha512_di") == 0;
      else
        v3 = 0;
      if (!strcmp(a2, "ccdrbg_factory_nistctr"))
        return !strcmp(a3, "CCAES_KEY_SIZE_128") || strcmp(a3, "CCAES_KEY_SIZE_256") == 0;
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void *ccckg2_params_p224_sha256_v2()
{
  return &_ccckg2_params_p224_sha256_v2;
}

uint64_t ccckg2_ctx_cp(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t ccckg2_ctx_di(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

unint64_t ccckg2_sizeof_ctx(uint64_t a1)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;

  v2 = (uint64_t *)(*(uint64_t (**)(void))(a1 + 8))();
  v3 = (_QWORD *)(*(uint64_t (**)(void))(a1 + 16))();
  v4 = *v2;
  v5 = ((((unint64_t)(cczp_bitlen((uint64_t)v2) + 7) >> 2) & 0x3FFFFFFFFFFFFFFELL) + 16 * v4) | 1;
  if (v5 <= ((*v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 * *v2)
    v5 = ((*v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 * *v2;
  return v5 + 40;
}

uint64_t ccckg2_sizeof_commitment(uint64_t a1)
{
  return *(_QWORD *)(*(uint64_t (**)(void))(a1 + 16))();
}

unint64_t ccckg2_sizeof_share(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(void))(a1 + 8))();
  return ((unint64_t)(cczp_bitlen(v1) + 7) >> 1) & 0x7FFFFFFFFFFFFFFCLL | 2;
}

unint64_t ccckg2_sizeof_opening(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;

  v1 = (_QWORD *)(*(uint64_t (**)(void))(a1 + 8))();
  v2 = cczp_bitlen((uint64_t)&v1[5 * *v1 + 4]) + 7;
  return (((unint64_t)(cczp_bitlen((uint64_t)v1) + 7) >> 2) | 1) + (v2 >> 3);
}

uint64_t ccckg2_init(_DWORD *a1, uint64_t a2)
{
  char v4;
  rsize_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;

  v4 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v15 = v4;
  if (*(_DWORD *)a2 == 2)
  {
    v10 = ccckg2_sizeof_ctx(a2);
    v11 = cc_clear(v10, a1);
    *a1 = *(_DWORD *)a2;
    *((_QWORD *)a1 + 1) = (*(uint64_t (**)(uint64_t))(a2 + 8))(v11);
    v12 = (*(uint64_t (**)(void))(a2 + 16))();
    v13 = 0;
    *((_QWORD *)a1 + 2) = v12;
    *((_BYTE *)a1 + 32) = 0;
  }
  else
  {
    v13 = 4294967289;
  }
  cc_disable_dit(&v15);
  return v13;
}

uint64_t ccckg2_derive_sk_ws(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t (**a7)(_QWORD, uint64_t, uint64_t *))
{
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v25;
  char v26[133];
  char v27[66];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C874D8];
  if (*a3 != 4)
    return 4294967289;
  v12 = *(uint64_t **)(a2 + 8);
  v22 = *(_QWORD **)(a2 + 16);
  v13 = *v12;
  v25 = *(_QWORD *)(a1 + 16);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 3 * *v12);
  v15 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 3 * v13);
  v16 = (uint64_t **)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, (24 * v13 + 23) >> 3);
  *v16 = v12;
  v17 = cczp_bitlen((uint64_t)v12);
  result = ccec_raw_import_pub(v12, ((unint64_t)(v17 + 7) >> 2) & 0x3FFFFFFFFFFFFFFELL, a3 + 1, (uint64_t)v16);
  if (!(_DWORD)result)
  {
    result = ccec_validate_point_and_projectify_ws(a1, v12, v14, (unint64_t *)v16 + 2);
    if (!(_DWORD)result)
    {
      result = ccec_mult_blinded_ws(a1, v12, v15, (unint64_t *)(a2 + 8 * **(_QWORD **)(a2 + 8) + 40), v14, a7);
      if (!(_DWORD)result)
      {
        result = ccec_affinify_ws(a1, (uint64_t)v12);
        if (!(_DWORD)result)
        {
          v19 = cczp_bitlen((uint64_t)v12);
          ccn_write_uint_padded(v13, (unint64_t *)(a4 + 16), (unint64_t)(v19 + 7) >> 3, v27);
          result = ccec_export_pub((uint64_t)v16, v26);
          if (!(_DWORD)result)
          {
            v20 = (unint64_t)(cczp_bitlen((uint64_t)v12) + 7) >> 3;
            v21 = cczp_bitlen((uint64_t)v12);
            result = ccansikdf_x963(v22, v20, v27, ((unint64_t)(v21 + 7) >> 2) | 1, (uint64_t)v26, a5, a6);
          }
        }
      }
    }
  }
  *(_QWORD *)(a1 + 16) = v25;
  return result;
}

uint64_t ccckg2_derive_sk(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, char *a5, uint64_t (**a6)(_QWORD, uint64_t, uint64_t *))
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v21[4];
  void (*v22)(uint64_t);

  v12 = *(uint64_t **)(a1 + 8);
  v13 = *v12;
  v14 = sizeof_struct_cche_galois_key();
  v15 = sizeof_struct_ccpolyzp_po2cyc();
  v21[0] = cc_malloc_clear(8 * ((v14 + v15 + 3 * v13 * v15 - 1) / v15 + 29 * v13));
  v16 = *v12;
  v17 = sizeof_struct_cche_galois_key();
  v18 = sizeof_struct_ccpolyzp_po2cyc();
  v21[1] = (v17 + v18 + 3 * v16 * v18 - 1) / v18 + 29 * v16;
  v21[2] = 0;
  v21[3] = cc_ws_alloc;
  v22 = cc_ws_free;
  if (!v21[0])
    return 4294967283;
  v19 = ccckg2_derive_sk_ws((uint64_t)v21, a1, a2, a3, a4, a5, a6);
  v22((uint64_t)v21);
  return v19;
}

uint64_t ccecies_export_eph_pub(char a1, uint64_t a2, char *a3)
{
  if ((a1 & 2) != 0)
    return ccec_export_pub(a2, a3);
  if ((a1 & 4) != 0)
    return ccec_compact_export_pub(a3, a2);
  return 4294967289;
}

uint64_t cche_decrypt_ctx_nof_n(unsigned int *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;

  v2 = sizeof_struct_ccpolyzp_po2cyc() + 7;
  v3 = *a1;
  v4 = sizeof_struct_ccpolyzp_po2cyc();
  v5 = sizeof_struct_ccpolyzp_po2cyc();
  v6 = (v5 - 1 + v4) / v5;
  v7 = sizeof_struct_ccpolyzp_po2cyc_ctx() + 7;
  if (v3 >= 0x80)
    v8 = 128;
  else
    v8 = v3;
  v9 = (unint64_t)(sizeof_struct_ccrns_mul_modulus() + 7) >> 3;
  v10 = v6 + (v2 >> 3) + 2 * (v7 >> 3) + 4 * (v3 + v9 * v8) + 12;
  if (a1[1] <= 1)
    v11 = 1;
  else
    v11 = a1[1];
  v12 = sizeof_struct_ccpolyzp_po2cyc_base_convert();
  v13 = 1;
  v14 = 2;
  do
  {
    v10 += v13 + (v14 + (unint64_t)v13 + 2 * (v13 - 1)) * v9 + (v5 - 1 + v12) / v5;
    ++v13;
    v14 += 2;
  }
  while (v13 <= v11);
  return v10;
}

unint64_t CCHE_DECRYPT_CTX_INIT_WORKSPACE_N(unsigned int a1)
{
  unint64_t v2;
  unint64_t result;

  v2 = CCPOLYZP_PO2CYC_CTX_INIT_WORKSPACE_N(1);
  result = CCPOLYZP_PO2CYC_BASE_CONVERT_INIT_WORKSPACE_N(a1);
  if (v2 > result)
    return v2;
  return result;
}

uint64_t cche_decrypt_ctx_init_ws(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  unsigned int *v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t i;
  uint64_t *v28;
  uint64_t *v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t v34[3];

  v4 = a2;
  v34[2] = *MEMORY[0x1E0C874D8];
  *a2 = a3;
  v6 = (unsigned int *)(a2 + 1);
  v32 = cche_param_ctx_polynomial_degree(a3);
  v33 = 2;
  v34[0] = cche_param_ctx_plaintext_modulus(a3);
  v34[1] = 0x1FFFFFFFFFFFFFFFLL;
  v30 = v6;
  v31 = a1;
  result = ccpolyzp_po2cyc_ctx_chain_init_ws(a1, v6, &v32, v34);
  if (!(_DWORD)result)
  {
    v8 = v33;
    v9 = *((unsigned int *)v4 + 2);
    v10 = (unint64_t)(sizeof_struct_ccpolyzp_po2cyc_ctx() + 7) >> 3;
    if (v9 >= 0x80)
      v11 = 128;
    else
      v11 = v9;
    v29 = &v4[(v10 + 2 * (v9 + ((unint64_t)(sizeof_struct_ccrns_mul_modulus() + 7) >> 3) * v11) + 6)
            * (*((_DWORD *)v4 + 3) - v8)
            + 2];
    v12 = cche_param_ctx_chain_const(*v4) + 8;
    v28 = v4;
    while (1)
    {
      v13 = *(unsigned int *)(v12 + 4);
      v14 = sizeof_struct_ccpolyzp_po2cyc();
      v15 = sizeof_struct_ccpolyzp_po2cyc();
      v16 = v15 - 1 + v14;
      v17 = *((unsigned int *)v4 + 2);
      v18 = *((unsigned int *)v4 + 3);
      v19 = v16 / v15;
      v20 = (unint64_t)(sizeof_struct_ccpolyzp_po2cyc_ctx() + 7) >> 3;
      v21 = v17 >= 0x80 ? 128 : v17;
      v22 = (unint64_t)(sizeof_struct_ccrns_mul_modulus() + 7) >> 3;
      v23 = (uint64_t *)&v30[2 * v19 + 2 * (v20 + 2 * (v17 + v22 * v21) + 6) * v18];
      if (v13 >= 2)
      {
        v24 = sizeof_struct_ccpolyzp_po2cyc_base_convert();
        v25 = v18;
        v26 = 1;
        for (i = 1; i != v13; ++i)
        {
          v23 += i + (v24 + v15 - 1) / v15 + (v26 + v25) * v22;
          v26 += 3;
          v25 += v18;
        }
      }
      result = ccpolyzp_po2cyc_base_convert_init_ws(v31, v23, (char *)v12, v29);
      if ((_DWORD)result)
        break;
      v12 = *(_QWORD *)(v12 + 112);
      v4 = v28;
      if (!v12)
        return 0;
    }
  }
  return result;
}

unint64_t CCHE_DECRYPT_WORKSPACE_N(uint64_t a1, int a2)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = cche_ciphertext_fresh_npolys();
  v5 = sizeof_struct_ccrns_mul_modulus();
  v6 = sizeof_struct_ccpolyzp_po2cyc();
  v7 = (v5 + v6 - 1) / v6
     + ((a2 * a1) + ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3)) * v4;
  v8 = CCPOLYZP_PO2CYC_BASE_CONVERT_DIVIDE_AND_ROUND_WORKSPACE_N(a1, a2);
  v9 = CCPOLYZP_PO2CYC_BASE_CONVERT_EXACT_POLY_WORKSPACE_N(a1) + 15;
  if (v8 > v9)
    v9 = v8;
  return v7 + v9;
}

uint64_t cche_decrypt_ws(uint64_t a1, unsigned int **a2, unsigned int *a3, uint64_t a4, _DWORD **a5)
{
  int v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, unint64_t);
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unsigned int **v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t *v54;
  int v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  unsigned int *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v10 = *(_DWORD *)(a4 + 8);
  if (v10 != cche_ciphertext_fresh_npolys())
    return 4294967289;
  if (!cche_param_ctx_eq(*(unsigned int **)a4, a3))
    return 4294967289;
  v11 = *a5;
  v12 = cche_param_ctx_chain_const((uint64_t)a3);
  if (!ccpolyzp_po2cyc_ctx_eq((uint64_t)v11, (_DWORD *)(v12 + 8)))
    return 4294967289;
  v13 = *(_QWORD *)(a1 + 16);
  *a2 = cche_param_ctx_plaintext_ctx((uint64_t)a3);
  v14 = *(uint64_t (**)(uint64_t, unint64_t))(a1 + 24);
  v15 = *(_DWORD **)(a4 + 24);
  v16 = *(unsigned int *)(a4 + 8);
  v17 = sizeof_struct_ccrns_mul_modulus();
  v18 = sizeof_struct_ccpolyzp_po2cyc();
  v19 = (v17 + v18 - 1) / v18;
  v20 = sizeof_struct_ccpolyzp_po2cyc();
  v21 = (_QWORD *)v14(a1, v19 + ((v15[1] * *v15) + ((unint64_t)(v20 + 7) >> 3)) * v16);
  v22 = *(_DWORD **)(a4 + 24);
  v23 = *(unsigned int *)(a4 + 8);
  v24 = sizeof_struct_ccrns_mul_modulus();
  v25 = sizeof_struct_ccpolyzp_po2cyc();
  v26 = (v24 + v25 - 1) / v25;
  v27 = sizeof_struct_ccpolyzp_po2cyc();
  memmove(v21, (const void *)a4, 8 * (v26 + ((v22[1] * *v22) + ((unint64_t)(v27 + 7) >> 3)) * v23));
  v29 = (_DWORD *)v21[3];
  v28 = (uint64_t)(v21 + 3);
  v30 = (unsigned int **)(v28
                        + 8
                        * ((v29[1] * *v29) + ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3)));
  v31 = ccpolyzp_po2cyc_fwd_ntt(v30);
  if ((_DWORD)v31)
    goto LABEL_20;
  cche_mul_poly_sk(v30, v30, a5);
  v31 = ccpolyzp_po2cyc_inv_ntt(v30);
  if ((_DWORD)v31)
    goto LABEL_20;
  v61 = (uint64_t *)a2;
  v62 = v13;
  v63 = a1;
  ccpolyzp_po2cyc_coeff_add((int **)v30, v28, v30);
  v32 = *cche_param_ctx_plaintext_ctx((uint64_t)a3);
  v33 = cche_param_ctx_plaintext_ctx((uint64_t)a3);
  v60 = a3;
  v34 = cche_param_ctx_polynomial_degree((uint64_t)a3);
  v35 = (unint64_t)(sizeof_struct_ccpolyzp_po2cyc_ctx() + 7) >> 3;
  if (v34 >= 0x80)
    v36 = 128;
  else
    v36 = v34;
  v37 = (unint64_t)(sizeof_struct_ccrns_mul_modulus() + 7) >> 3;
  v38 = v35 + 6;
  v39 = (uint64_t)&v33[4 * v37 * v36 + 12 + 4 * v34 + 2 * v35] + ((4 * v32 + 7) & 0x7FFFFFFF8);
  v40 = (*v30)[1];
  v41 = sizeof_struct_ccpolyzp_po2cyc();
  v42 = sizeof_struct_ccpolyzp_po2cyc();
  v43 = v42 - 1;
  v44 = *(unsigned int *)(v39 + 8);
  v46 = *(unsigned int *)(v39 + 12);
  v45 = v39 + 8;
  if (v44 >= 0x80)
    v47 = 128;
  else
    v47 = v44;
  v48 = (uint64_t *)(v45 + 8 * ((v42 - 1 + v41) / v42 + (v38 + 2 * (v44 + v37 * v47)) * v46));
  if (v40 < 2)
  {
    a1 = v63;
    v54 = v61;
  }
  else
  {
    v49 = v42;
    v50 = sizeof_struct_ccpolyzp_po2cyc_base_convert();
    v51 = 1;
    v52 = v46;
    v53 = 1;
    a1 = v63;
    v54 = v61;
    do
    {
      v48 += v53 + (v50 + v43) / v49 + (v51 + v52) * v37;
      ++v53;
      v51 += 3;
      v52 += v46;
    }
    while (v40 != v53);
  }
  v55 = cche_param_ctx_he_scheme(v60);
  if (v55 == 2)
  {
    v31 = ccpolyzp_po2cyc_base_convert_exact_poly_ws(a1, v54, (uint64_t *)v30, v48);
    v13 = v62;
    if ((_DWORD)v31)
      goto LABEL_20;
LABEL_22:
    v64 = *(_QWORD *)(a4 + 16);
    v56 = cche_param_ctx_plaintext_modulus_inverse_ws(a1, &v64, (uint64_t)v60, v64);
    if (!(_DWORD)v56)
      ccpolyzp_po2cyc_coeff_scalar_mul_ws(a1, (_DWORD **)v54, (unsigned int **)v54, (uint64_t)&v64);
    goto LABEL_25;
  }
  v13 = v62;
  if (v55 != 1)
  {
    v56 = 4294967289;
    goto LABEL_25;
  }
  v31 = ccpolyzp_po2cyc_base_convert_divide_and_round_ws(a1, (_DWORD **)v54, (uint64_t *)v30, v48);
  if (!(_DWORD)v31)
    goto LABEL_22;
LABEL_20:
  v56 = v31;
LABEL_25:
  v57 = *v30;
  v58 = sizeof_struct_ccpolyzp_po2cyc();
  cc_clear((v58 + 8 * v57[1] * *v57 + 7) & 0xFFFFFFFFFFFFFFF8, v30);
  *(_QWORD *)(a1 + 16) = v13;
  return v56;
}

uint64_t cche_decrypt(unsigned int **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  char v8;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD v19[4];
  void (*v20)(uint64_t);
  char v21;

  v8 = 0;
  v21 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v21 = v8;
  v14 = cche_param_ctx_polynomial_degree((uint64_t)a2);
  v15 = CCHE_DECRYPT_WORKSPACE_N(v14, *(_DWORD *)(*(_QWORD *)(a3 + 24) + 4));
  v19[0] = cc_malloc_clear(8 * v15);
  v16 = cche_param_ctx_polynomial_degree((uint64_t)a2);
  v19[1] = CCHE_DECRYPT_WORKSPACE_N(v16, *(_DWORD *)(*(_QWORD *)(a3 + 24) + 4));
  v19[2] = 0;
  v19[3] = cc_ws_alloc;
  v20 = cc_ws_free;
  if (v19[0])
  {
    v17 = cche_decrypt_ws((uint64_t)v19, a1, a2, a3, a4);
    v20((uint64_t)v19);
  }
  else
  {
    v17 = 4294967283;
  }
  cc_disable_dit(&v21);
  return v17;
}

uint64_t ccder_blob_decode_uint_strict(unsigned __int8 **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t result;
  unsigned __int8 *v6[2];

  v6[0] = 0;
  v6[1] = 0;
  result = ccder_blob_decode_range_strict(a1, 2, v6);
  if ((_DWORD)result)
    return ccder_blob_decode_uint_range(v6, a2, a3);
  return result;
}

void *ccdes_ecb_encrypt_mode()
{
  return &ccdes_ltc_ecb_encrypt_mode;
}

_BYTE *ccmode_factory_gcm_encrypt(_QWORD *a1, _QWORD *a2)
{
  char v2;
  char v9;

  v2 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v9 = v2;
  *a1 = ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) + 5 * ((a2[1] + 7) & 0xFFFFFFFFFFFFFFF8) + 384;
  a1[1] = 4073947;
  a1[2] = 1;
  a1[3] = ccmode_gcm_init;
  a1[4] = ccmode_gcm_set_iv;
  a1[5] = ccmode_gcm_aad;
  a1[6] = ccmode_gcm_encrypt;
  a1[7] = ccmode_gcm_finalize;
  a1[8] = ccmode_gcm_reset;
  a1[9] = a2;
  return cc_disable_dit(&v9);
}

uint64_t ccss_shamir_share_generator_init(uint64_t *a1, int *a2, uint64_t (**a3)(_QWORD, unint64_t, uint64_t), unsigned __int8 *a4, unint64_t a5)
{
  char v10;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t share_poly_ws;
  _QWORD v22[4];
  void (*v23)(uint64_t);
  char v24;

  v10 = 0;
  v24 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v24 = v10;
  v16 = cczp_n((uint64_t)(a2 + 2));
  v17 = sizeof_struct_ccpolyzp_po2cyc();
  v22[0] = cc_malloc_clear(8 * (5 * v16 + (v17 + 7) / v17) + 24);
  v18 = cczp_n((uint64_t)(a2 + 2));
  v19 = sizeof_struct_ccpolyzp_po2cyc();
  v22[1] = 5 * v18 + (v19 + 7) / v19 + 3;
  v22[2] = 0;
  v22[3] = cc_ws_alloc;
  v23 = cc_ws_free;
  if (v22[0])
  {
    ccss_shamir_init_share_poly((uint64_t)a1, a2);
    share_poly_ws = ccss_shamir_generate_share_poly_ws((uint64_t)v22, a1, a3, a5, a4, 0);
    v23((uint64_t)v22);
  }
  else
  {
    share_poly_ws = 4294967283;
  }
  cc_disable_dit(&v24);
  return share_poly_ws;
}

uint64_t ccss_shamir_share_generator_init_with_secrets_less_than_prime(uint64_t *a1, int *a2, uint64_t (**a3)(_QWORD, unint64_t, uint64_t), unsigned __int8 *a4, unint64_t a5)
{
  char v10;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t share_poly_ws;
  _QWORD v22[4];
  void (*v23)(uint64_t);
  char v24;

  v10 = 0;
  v24 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v24 = v10;
  v16 = cczp_n((uint64_t)(a2 + 2));
  v17 = sizeof_struct_ccpolyzp_po2cyc();
  v22[0] = cc_malloc_clear(8 * (5 * v16 + (v17 + 7) / v17) + 24);
  v18 = cczp_n((uint64_t)(a2 + 2));
  v19 = sizeof_struct_ccpolyzp_po2cyc();
  v22[1] = 5 * v18 + (v19 + 7) / v19 + 3;
  v22[2] = 0;
  v22[3] = cc_ws_alloc;
  v23 = cc_ws_free;
  if (v22[0])
  {
    ccss_shamir_init_share_poly((uint64_t)a1, a2);
    share_poly_ws = ccss_shamir_generate_share_poly_ws((uint64_t)v22, a1, a3, a5, a4, 1);
    v23((uint64_t)v22);
  }
  else
  {
    share_poly_ws = 4294967283;
  }
  cc_disable_dit(&v24);
  return share_poly_ws;
}

uint64_t ccder_blob_decode_oid(unsigned __int8 **a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  uint64_t result;
  unsigned __int8 *v5;
  unsigned __int8 *v6[2];

  v3 = *a1;
  v6[0] = 0;
  v6[1] = 0;
  result = ccder_blob_decode_range(a1, 6, v6);
  if ((_DWORD)result)
    v5 = v3;
  else
    v5 = 0;
  *a2 = v5;
  return result;
}

uint64_t cche_ciphertext_fresh_npolys()
{
  char v0;
  char v7;

  v0 = 0;
  v7 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v0 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v0 = 1;
    }
  }
  v7 = v0;
  cc_disable_dit(&v7);
  return 2;
}

uint64_t cche_ciphertext_fresh_correction_factor()
{
  char v0;
  char v7;

  v0 = 0;
  v7 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v0 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v0 = 1;
    }
  }
  v7 = v0;
  cc_disable_dit(&v7);
  return 1;
}

uint64_t cche_ciphertext_correction_factor(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *(_QWORD *)(a1 + 16);
  cc_disable_dit(&v9);
  return v7;
}

uint64_t cche_ciphertext_fwd_ntt(uint64_t a1)
{
  char v2;
  uint64_t v8;
  _DWORD **v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;

  v2 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v15 = v2;
  if (*(_DWORD *)(a1 + 8))
  {
    v8 = 0;
    v9 = (_DWORD **)(a1 + 24);
    while (1)
    {
      v10 = *v9;
      v11 = sizeof_struct_ccpolyzp_po2cyc();
      v12 = ccpolyzp_po2cyc_fwd_ntt(&v9[((v10[1] * *v10) + ((unint64_t)(v11 + 7) >> 3)) * v8]);
      if ((_DWORD)v12)
        break;
      if (++v8 >= (unint64_t)*(unsigned int *)(a1 + 8))
        goto LABEL_9;
    }
    v13 = v12;
  }
  else
  {
LABEL_9:
    v13 = 0;
  }
  cc_disable_dit(&v15);
  return v13;
}

uint64_t cche_ciphertext_inv_ntt(uint64_t a1)
{
  char v2;
  uint64_t v8;
  _DWORD **v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;

  v2 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v15 = v2;
  if (*(_DWORD *)(a1 + 8))
  {
    v8 = 0;
    v9 = (_DWORD **)(a1 + 24);
    while (1)
    {
      v10 = *v9;
      v11 = sizeof_struct_ccpolyzp_po2cyc();
      v12 = ccpolyzp_po2cyc_inv_ntt(&v9[((v10[1] * *v10) + ((unint64_t)(v11 + 7) >> 3)) * v8]);
      if ((_DWORD)v12)
        break;
      if (++v8 >= (unint64_t)*(unsigned int *)(a1 + 8))
        goto LABEL_9;
    }
    v13 = v12;
  }
  else
  {
LABEL_9:
    v13 = 0;
  }
  cc_disable_dit(&v15);
  return v13;
}

void *ccdh_gp_rfc5114_MODP_2048_224()
{
  return &_ccdh_gp_rfc5114_MODP_2048_224;
}

unint64_t ccpad_xts_decrypt(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  char v12;
  uint64_t v18;
  unint64_t v19;
  int8x16_t *v20;
  uint64_t v21;
  char v23;
  _BYTE v24[16];
  int8x16_t v25;
  uint64_t v26;

  v12 = 0;
  v26 = *MEMORY[0x1E0C874D8];
  v23 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v12 = 1;
    }
  }
  v23 = v12;
  v18 = a4 & 0xF;
  if ((a4 & 0xF) != 0)
  {
    v19 = a4 & 0xFFFFFFFFFFFFFFF0;
    v20 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(a1 + 48))(a2, a3, (a4 >> 4) - 1, a5, a6);
    v25 = *v20;
    ccmode_xts_mult_alpha(v20);
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, _BYTE *))(a1 + 48))(a2, a3, 1, a5 + v19 - 16, v24);
    v21 = 0;
    *v20 = v25;
    do
    {
      v25.i8[v21] = *(_BYTE *)(a5 + v19 + v21);
      *(_BYTE *)(a6 + v19 + v21) = v24[v21];
      ++v21;
    }
    while (v18 != v21);
    if ((unint64_t)(v21 - 1) <= 0xE)
      memcpy((void *)((unint64_t)&v25 | v18), &v24[v18], 16 - v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t, int8x16_t *, unint64_t))(a1 + 48))(a2, a3, 1, &v25, a6 + v19 - 16);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(a1 + 48))(a2, a3, a4 >> 4, a5, a6);
  }
  cc_disable_dit(&v23);
  return a4;
}

unint64_t fipspost_post_tdes_ecb(char a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char v7[8];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C874D8];
  v2 = ccdes3_ecb_decrypt_mode();
  if ((a1 & 0x10) != 0)
    v3 = &invalid_key;
  else
    v3 = &valid_key;
  if (ccecb_one_shot((uint64_t)v2, 24, (uint64_t)v3, 1, (uint64_t)&ciphertext_data, (uint64_t)v7))
  {
    v4 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: des3_ecb_decrypt one_shot\n", v4, "fipspost_post_tdes_ecb_decrypt", 40);
    return 4294967223;
  }
  else
  {
    result = cc_cmp_safe(8, v7, plaintext_data);
    if ((_DWORD)result)
    {
      v6 = mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: des3_ecb_decrypt cmp\n", v6, "fipspost_post_tdes_ecb_decrypt", 45);
      return 4294967221;
    }
  }
  return result;
}

void *ccaes_xts_encrypt_mode()
{
  return &ccaes_arm_xts_encrypt_mode;
}

uint64_t cczp_mul(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[4];
  void (*v18)(uint64_t);
  char v19;

  v8 = 0;
  v19 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v19 = v8;
  v14 = cczp_n(a1);
  v17[0] = cc_malloc_clear(32 * v14);
  v17[1] = 4 * cczp_n(a1);
  v17[2] = 0;
  v17[3] = cc_ws_alloc;
  v18 = cc_ws_free;
  if (v17[0])
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(v17, a1, a2, a3, a4);
    v18((uint64_t)v17);
    v15 = 0;
  }
  else
  {
    v15 = 4294967283;
  }
  cc_disable_dit(&v19);
  return v15;
}

uint64_t ccvrf_irtf_ed25519_string_to_point(int *a1, uint64_t a2)
{
  if (ge_frombytes_vartime(a1, a2))
    return 4294967209;
  else
    return 0;
}

__n128 ccvrf_irtf_ed25519_decode_proof(uint64_t a1, int *a2, _OWORD *a3, uint64_t a4)
{
  __n128 result;
  __int128 v8;

  if (!ge_frombytes_vartime(a2, a1))
  {
    *a3 = *(_OWORD *)(a1 + 32);
    result = *(__n128 *)(a1 + 48);
    v8 = *(_OWORD *)(a1 + 64);
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v8;
  }
  return result;
}

uint64_t ccvrf_irtf_ed25519_encode_proof(int *a1, _OWORD *a2, _OWORD *a3, _OWORD *a4)
{
  __int128 v7;

  ge_p3_tobytes((uint64_t)a4, a1);
  a4[2] = *a2;
  v7 = a3[1];
  a4[3] = *a3;
  a4[4] = v7;
  return 0;
}

uint64_t ccvrf_irtf_ed25519_hash_points(uint64_t a1, int **a2, uint64_t a3, void *a4)
{
  _QWORD *v8;
  uint64_t v9;
  int *v10;
  _BYTE __src[64];
  __int16 v13;
  _QWORD v14[17];

  v14[16] = *MEMORY[0x1E0C874D8];
  v13 = 516;
  if (a3)
  {
    v8 = v14;
    v9 = a3;
    do
    {
      v10 = *a2++;
      ge_p3_tobytes((uint64_t)v8, v10);
      v8 += 4;
      --v9;
    }
    while (v9);
  }
  ccdigest(*(_QWORD *)(a1 + 40), (32 * a3) | 2, (char *)&v13, (uint64_t)__src);
  memcpy(a4, __src, *(_QWORD *)(a1 + 32) >> 1);
  return cc_clear(0x40uLL, __src);
}

unint64_t CCPOLYZP_PO2CYC_WORKSPACE_N(int a1, int a2)
{
  return (a2 * a1) + ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3);
}

uint64_t ccpolyzp_po2cyc_init(_QWORD *a1, _DWORD *a2, uint64_t *a3)
{
  int v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = a2;
  v3 = *a2 * a2[1];
  if (v3)
  {
    v4 = a1 + 1;
    do
    {
      v5 = *a3++;
      *v4++ = v5;
      --v3;
    }
    while (v3);
  }
  return 0;
}

uint64_t ccpolyzp_po2cyc_init_zero(_QWORD *a1, _DWORD *a2)
{
  *a1 = a2;
  return cc_clear(8 * (*a2 * a2[1]), a1 + 1);
}

uint64_t ccpolyzp_po2cyc_modulus_to_cczp_ws(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  uint64_t result;
  unint64_t v6;

  *a2 = 1;
  v6 = bswap64(a3);
  result = ccn_read_uint(1uLL, a2 + 3, 8uLL, (unsigned __int8 *)&v6);
  if (!(_DWORD)result)
    return cczp_init_ws(a1, a2);
  return result;
}

int **ccpolyzp_po2cyc_coeff_negate(int **result, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  int *v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  uint64_t v12;
  unint64_t *v13;
  uint64_t *v14;
  int v15;
  unint64_t v16;

  v2 = *(_DWORD **)a2;
  v3 = *(unsigned int *)(*(_QWORD *)a2 + 4);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = *v2;
    v6 = *result++;
    v7 = *v6;
    v8 = a2 + 8;
    do
    {
      v9 = v2;
      if (v4 < (v3 - 1))
      {
        v10 = v3 - 2;
        v9 = v2;
        do
          v9 = (_DWORD *)*((_QWORD *)v9 + 14);
        while (v4 < v10--);
      }
      if (v5)
      {
        v12 = *((_QWORD *)v9 + 2);
        v13 = (unint64_t *)(v8 + 8 * (v5 * v4));
        v14 = (uint64_t *)&result[(v7 * v4)];
        v15 = v5;
        do
        {
          v16 = *v13++;
          *v14++ = (v12 - v16) & -(uint64_t)(((v16 | HIDWORD(v16)) + 0xFFFFFFFF) >> 32);
          --v15;
        }
        while (v15);
      }
      ++v4;
    }
    while (v4 != v3);
  }
  return result;
}

int **ccpolyzp_po2cyc_coeff_add(int **result, uint64_t a2, _QWORD *a3)
{
  _DWORD *v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  int *v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  int *v11;
  int v12;
  _DWORD *v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  int **v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;

  v3 = *(_DWORD **)a2;
  v4 = *(unsigned int *)(*(_QWORD *)a2 + 4);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = *v3;
    v7 = *result++;
    v8 = *v7;
    v9 = a2 + 8;
    v11 = (int *)*a3;
    v10 = a3 + 1;
    v12 = *v11;
    do
    {
      v13 = v3;
      if (v5 < (v4 - 1))
      {
        v14 = v4 - 2;
        v13 = v3;
        do
          v13 = (_DWORD *)*((_QWORD *)v13 + 14);
        while (v5 < v14--);
      }
      if (v6)
      {
        v16 = *((_QWORD *)v13 + 2);
        v17 = &v10[(v12 * v5)];
        v18 = (uint64_t *)(v9 + 8 * (v6 * v5));
        v19 = &result[(v8 * v5)];
        v20 = v6;
        do
        {
          v22 = *v18++;
          v21 = v22;
          v23 = *v17++;
          v24 = (int *)(v23 + v21);
          if ((uint64_t)v24 - v16 >= 0)
            v24 = (int *)((char *)v24 - v16);
          *v19++ = v24;
          --v20;
        }
        while (v20);
      }
      ++v5;
    }
    while (v5 != v4);
  }
  return result;
}

_DWORD **ccpolyzp_po2cyc_eval_mul(_DWORD **result, unsigned int **a2, _DWORD **a3)
{
  unsigned int *v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int **v8;
  _QWORD *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;

  v3 = *a2;
  v4 = (*a2)[1];
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = *v3;
    v8 = a2 + 1;
    do
    {
      v9 = v3;
      if (v4 - 1 > v6)
      {
        v10 = v4 - 1;
        v9 = v3;
        do
        {
          v9 = (_QWORD *)v9[14];
          --v10;
        }
        while (v10 > v6);
      }
      if ((_DWORD)v7)
      {
        v11 = **a3 * v6;
        v12 = **result * v6;
        v13 = v7;
        v14 = v5;
        do
        {
          v15 = (unint64_t)v8[v14];
          v16 = (unint64_t)a3[v11 + 1];
          v17 = (v16 * (unsigned __int128)v15) >> 64;
          v18 = v16 * v15;
          v19 = v9[4];
          v20 = ((unint64_t)v18 * (unsigned __int128)v19) >> 64;
          v21 = (v17 * (unsigned __int128)v19) >> 64;
          v22 = v17 * v19;
          v23 = __CFADD__(v20, v22);
          v24 = v20 + v22;
          v25 = v23;
          v26 = v25
              + __CFADD__(v18 * v9[5], v24)
              + v21
              + v9[5] * v17
              + (((unint64_t)v18 * (unsigned __int128)(unint64_t)v9[5]) >> 64);
          v27 = v9[2];
          v28 = (_DWORD *)(v18 - v26 * v27);
          if ((uint64_t)v28 - v27 >= 0)
            v28 = (_DWORD *)((char *)v28 - v27);
          result[++v12] = v28;
          ++v11;
          ++v14;
          --v13;
        }
        while (v13);
      }
      ++v6;
      v5 += v7;
    }
    while (v6 != v4);
  }
  return result;
}

uint64_t ccpolyzp_po2cyc_coeff_scalar_mul_ws(uint64_t result, _DWORD **a2, unsigned int **a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int **v11;
  _DWORD **v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v4 = (*a3)[1];
  if ((_DWORD)v4)
  {
    v8 = result;
    v9 = 0;
    v10 = **a3;
    v11 = a3 + 1;
    v12 = a2 + 1;
    do
    {
      v13 = (uint64_t)*a3;
      v14 = (*a3)[1];
      if (v9 < v14 - 1)
      {
        v15 = v14 - 2;
        do
          v13 = *(_QWORD *)(v13 + 112);
        while (v9 < v15--);
      }
      v17 = *(_QWORD *)(v13 + 16);
      v25 = 0;
      v26 = 0;
      v27 = 0;
      result = ccrns_mul_modulus_init_ws(v8, &v25, v17, *(_QWORD *)(a4 + 8 * v9));
      if ((_DWORD)v10)
      {
        v19 = v26;
        v18 = v27;
        v20 = v25;
        v21 = **a2 * v9;
        v22 = **a3 * v9;
        v23 = v10;
        do
        {
          v24 = (_DWORD *)(v19 * (_QWORD)v11[v22] - v20 * ((v18 * (unsigned __int128)(unint64_t)v11[v22]) >> 64));
          if ((uint64_t)v24 - v20 >= 0)
            v24 = (_DWORD *)((char *)v24 - v20);
          v12[v21++] = v24;
          ++v22;
          --v23;
        }
        while (v23);
      }
      ++v9;
    }
    while (v9 != v4);
  }
  return result;
}

uint64_t ccpolyzp_po2cyc_divide_and_round_q_last_ws(uint64_t a1, int8x16_t **a2)
{
  int8x16_t *v2;
  unsigned int v3;
  uint64_t v6;
  unsigned int v7;
  char *i8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int8x16_t **v12;
  int8x16_t *v13;
  __int32 v14;
  uint64_t *v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t v21;

  v21.i64[1] = *MEMORY[0x1E0C874D8];
  v2 = *a2;
  if (!(*a2)[7].i64[0])
    return 4294967289;
  v3 = v2->u32[1];
  if (v3 < 2)
    return 4294967289;
  v6 = v2->u32[0];
  v7 = v3 - 1;
  i8 = v2[9].i8;
  ccn_shift_right(1, &v21, v2 + 9, 1);
  if ((_DWORD)v6)
  {
    v9 = 0;
    v10 = (uint64_t)&v2[7].i64[1];
    do
    {
      cczp_add_ws(a1, v10);
      ++v9;
    }
    while ((_DWORD)v6 != v9);
  }
  v11 = 0;
  v12 = a2 + 1;
  while (1)
  {
    v13 = *a2;
    v14 = (*a2)->i32[1];
    while (--v14 > v11)
      v13 = (int8x16_t *)v13[7].i64[0];
    v15 = &v13[7].i64[1];
    cczp_modn_ws(a1, &v13[7].i64[1], &v20, 1, v21.i8);
    cczp_modn_ws(a1, v15, &v19, 1, i8);
    result = cczp_inv_field_ws(a1, (uint64_t)v15, &v19, &v19);
    if ((_DWORD)result)
      break;
    if ((_DWORD)v6)
    {
      v17 = 0;
      do
      {
        cczp_modn_ws(a1, v15, &v18, 1, (char *)&v12[v17] + 8 * (*a2)->i32[0] * v7);
        cczp_sub_ws(a1, (uint64_t)v15);
        cczp_sub_ws(a1, (uint64_t)v15);
        cczp_mul_ws(a1, (uint64_t)v15);
        ++v17;
      }
      while ((_DWORD)v6 != v17);
    }
    if (++v11 == v7)
    {
      cc_clear(8 * v6, &v12[(*a2)->i32[0] * v7]);
      result = 0;
      *a2 = (int8x16_t *)(*a2)[7].i64[0];
      return result;
    }
  }
  return result;
}

uint64_t ccwrap_auth_encrypt_withiv(uint64_t a1, uint64_t a2, size_t a3, const void *a4, uint64_t *a5, _QWORD *a6, uint64_t *a7)
{
  char v14;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v29;
  uint64_t *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v14 = 0;
  v34 = *MEMORY[0x1E0C874D8];
  v31 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v14 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v14 = 1;
    }
  }
  v31 = v14;
  v20 = ccwrap_wrapped_size(a3);
  *a5 = v20;
  if (ccwrap_argsvalid(a1, a3, v20))
  {
    v32 = *a7;
    v29 = a6;
    v30 = a6 + 1;
    memmove(a6 + 1, a4, a3);
    v21 = 0;
    if (a3 >> 3 <= 1)
      v22 = 1;
    else
      v22 = a3 >> 3;
    v23 = 1;
    do
    {
      if (a3 >= 8)
      {
        v24 = v30;
        v25 = v23;
        v26 = v22;
        do
        {
          v33 = *v24;
          (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *))(a1 + 24))(a2, 1, &v32, &v32);
          v32 ^= bswap64(v25);
          *v24++ = v33;
          ++v25;
          --v26;
        }
        while (v26);
      }
      ++v21;
      v23 += a3 >> 3;
    }
    while (v21 != 6);
    v27 = 0;
    *v29 = v32;
  }
  else
  {
    *a5 = 0;
    v27 = 4294967289;
  }
  cc_disable_dit(&v31);
  return v27;
}

uint64_t ccdh_import_pub(uint64_t a1, unint64_t a2, unsigned __int8 *a3, _QWORD *a4)
{
  char v7;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  char v19;

  v7 = 0;
  v19 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v7 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v7 = 1;
    }
  }
  v19 = v7;
  v13 = a4 + 2;
  ccdh_ctx_init(a1, a4);
  v14 = ccdh_gp_n(a1);
  if (ccn_read_uint(v14, v13, a2, a3))
  {
    v15 = 4294967244;
  }
  else
  {
    v16 = ccdh_gp_n(a1);
    v17 = (unint64_t *)ccdh_gp_prime(a1);
    if ((int)ccn_cmp(v16, v13, v17) >= 0)
      v15 = 4294967247;
    else
      v15 = 0;
  }
  cc_disable_dit(&v19);
  return v15;
}

uint64_t ccmode_xts_init(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, char *a5)
{
  uint64_t v10;

  if (cc_cmp_safe(a3, a4, a5))
    v10 = 0;
  else
    v10 = 4294967132;
  (*(void (**)(uint64_t, uint64_t, uint64_t, char *, char *))(a1 + 32))(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t ccapsic_client_state_sizeof(_QWORD **a1)
{
  return 112 * **a1 + 192;
}

uint64_t ccapsic_server_state_sizeof(_QWORD **a1)
{
  return 120 * **a1 + 192;
}

uint64_t ccapsic_server_init(_QWORD **a1, uint64_t **a2, uint64_t a3, size_t a4, const void *a5)
{
  char v7;
  uint64_t v13;
  char v15;

  v7 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v7 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v7 = 1;
    }
  }
  v15 = v7;
  v13 = ccapsic_client_init((uint64_t)a1, a2, a3, a4, a5);
  if (!(_DWORD)v13)
    ccn_set(**a2, &(&a1[12 * **a1])[2 * **a1 + 24], &a2[3 * **a2 + 2]);
  cc_disable_dit(&v15);
  return v13;
}

uint64_t ccapsic_client_init(uint64_t a1, uint64_t **a2, uint64_t a3, size_t a4, const void *a5)
{
  char v9;
  uint64_t *v15;
  const void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  char **v20;
  const char *v21;
  size_t v22;
  const void *v23;
  size_t v24;
  char v26;

  v9 = 0;
  v26 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v9 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v9 = 1;
    }
  }
  v26 = v9;
  v15 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  v16 = a2 + 2;
  if (ccec_is_point_at_infinity(*a2, (uint64_t)(a2 + 2)))
    goto LABEL_11;
  memcpy((void *)(a1 + 192 + 16 * **(_QWORD **)a1 + 72 * **(_QWORD **)a1), v16, 24 * *v15);
  v17 = ccec_projectify(v15, a1 + 192 + 16 * **(_QWORD **)a1, (uint64_t)&v15[2 * *v15 + 4 + *v15], a3);
  if ((_DWORD)v17
    || (v17 = ccec_projectify(v15, a1 + 192 + 16 * **(_QWORD **)a1 + 24 * **(_QWORD **)a1, (uint64_t)v16, a3),
        (_DWORD)v17))
  {
    v19 = v17;
    goto LABEL_17;
  }
  v18 = *(void **)a1;
  if (v18 == (void *)ccec_cp_256())
  {
    v20 = &cch2c_p256_sha256_sswu_ro_info;
  }
  else if (v18 == (void *)ccec_cp_384())
  {
    v20 = &cch2c_p384_sha512_sswu_ro_info;
  }
  else
  {
    if (v18 != ccec_cp_521())
      goto LABEL_11;
    v20 = &cch2c_p521_sha512_sswu_ro_info;
  }
  *(_QWORD *)(a1 + 16) = v20;
  v21 = (const char *)cch2c_name((uint64_t *)v20);
  if (a4 - 129 >= 0xFFFFFFFFFFFFFF80)
  {
    v22 = strlen(v21);
    v23 = (const void *)cch2c_name(*(uint64_t **)(a1 + 16));
    memcpy((void *)(a1 + 32), v23, v22);
    v24 = a1 + 32 + v22;
    *(_DWORD *)v24 = 1230196801;
    *(_BYTE *)(v24 + 4) = 67;
    memcpy((void *)(v24 + 5), a5, a4);
    v19 = 0;
    *(_QWORD *)(a1 + 24) = a4 + v22 + 5;
    goto LABEL_17;
  }
LABEL_11:
  v19 = 4294967289;
LABEL_17:
  cc_disable_dit(&v26);
  return v19;
}

void *cckem_kyber1024()
{
  return &cckem_kyber1024_info;
}

uint64_t cckem_kyber1024_generate_key(uint64_t a1, uint64_t (**a2)(_QWORD, uint64_t, char *))
{
  uint64_t v4;

  v4 = cckem_public_ctx(a1);
  return cckyber_kem_keypair(cckyber1024_params, (void *)(v4 + 8), a1 + *(_QWORD *)(*(_QWORD *)a1 + 8) + 8, a2);
}

uint64_t cckem_kyber1024_derive_key_from_seed(uint64_t a1, unint64_t a2, char *a3, uint64_t (**a4)(_QWORD, uint64_t, _OWORD *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD __s[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C874D8];
  if (a2 < 0x20)
    return 4294967289;
  v7 = cckem_public_ctx(a1);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v9 = (*a4)(a4, 32, __s);
  if (!(_DWORD)v9)
    v9 = cckyber_kem_keypair_coins(cckyber1024_params, (void *)(v7 + 8), a1 + v8 + 8, a3, __s);
  v10 = v9;
  cc_clear(0x20uLL, __s);
  return v10;
}

uint64_t cckem_kyber1024_encapsulate(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t (**a4)(_QWORD, uint64_t, __int128 *))
{
  return cckyber_kem_encapsulate(cckyber1024_params, (char *)(a1 + 8), a2, a3, a4);
}

uint64_t cckem_kyber1024_decapsulate(uint64_t a1, char *a2, char *a3)
{
  return cckyber_kem_decapsulate(cckyber1024_params, a1 + *(_QWORD *)(*(_QWORD *)a1 + 8) + 8, a2, a3);
}

uint64_t cckem_kyber1024_export_pubkey(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6;
  size_t v7;

  v6 = *a2;
  if (v6 < cckem_pubkey_nbytes_ctx(a1))
    return 4294967289;
  v7 = cckem_pubkey_nbytes_ctx(a1);
  *a2 = v7;
  memcpy(a3, (const void *)(a1 + 8), v7);
  return 0;
}

uint64_t cckem_kyber1024_import_pubkey(uint64_t a1, size_t a2, const void *a3, _QWORD *a4)
{
  if (cckem_pubkey_nbytes_info(a1) != a2)
    return 4294967289;
  cckem_pub_ctx_init(a4, a1);
  memcpy(a4 + 1, a3, a2);
  return 0;
}

uint64_t cckem_kyber1024_export_privkey(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;

  v6 = *a2;
  v7 = cckem_public_ctx(a1);
  if (v6 < cckem_privkey_nbytes_ctx(v7))
    return 4294967289;
  v8 = cckem_public_ctx(a1);
  v9 = cckem_privkey_nbytes_ctx(v8);
  *a2 = v9;
  memcpy(a3, (const void *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 8) + 8), v9);
  return 0;
}

uint64_t cckem_kyber1024_import_privkey(_QWORD *a1, size_t a2, const void *a3, _QWORD *a4)
{
  if (cckem_privkey_nbytes_info(a1) != a2)
    return 4294967289;
  cckem_full_ctx_init(a4, a1);
  memcpy((char *)a4 + *(_QWORD *)(*a4 + 8) + 8, a3, a2);
  return 0;
}

double ccmode_factory_siv_hmac_decrypt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = 600;
  *(_OWORD *)a1 = xmmword_1DEE1D060;
  *(_QWORD *)(a1 + 16) = ccmode_siv_hmac_init;
  *(_QWORD *)(a1 + 24) = ccmode_siv_hmac_nonce;
  *(_QWORD *)(a1 + 32) = ccmode_siv_hmac_auth;
  *(_QWORD *)(a1 + 40) = ccmode_siv_hmac_decrypt;
  *(_QWORD *)(a1 + 48) = ccmode_siv_hmac_reset;
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 64) = a3;
  return result;
}

uint64_t ccaes_cfb_decrypt_vng(int8x16_t *a1, unint64_t a2, int8x16_t *a3, int8x16_t *a4)
{
  int8x16_t *v4;
  int8x16_t *v5;
  unint64_t v6;
  int8x16_t *v8;
  uint64_t v9;
  unint64_t v10;
  __int128 *i8;
  int8x16_t *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int8 v18;
  uint64_t v19;
  uint64_t result;

  v4 = a4;
  v5 = a3;
  v6 = a2;
  v8 = a1 + 1;
  v9 = a1->i64[1];
  v10 = (unint64_t)(*(_QWORD *)(a1->i64[0] + 8) + 7) >> 3;
  i8 = (__int128 *)a1[v10 + 1].i8;
  v12 = (int8x16_t *)((char *)a1 + 8 * v10 + 16);
  v13 = v9 == 16 || a2 == 0;
  if (!v13)
  {
    v14 = 0;
    v15 = (uint64_t)a1[1].i64 + v9;
    v16 = v15 + 8 * v10;
    do
    {
      *(_BYTE *)(v16 + v14) = a3->i8[v14];
      a4->i8[v14] = *(_BYTE *)(v15 + v14) ^ a3->i8[v14];
      v17 = v14 + 1;
      if (v9 + v14 == 15)
        break;
      v13 = a2 - 1 == v14++;
    }
    while (!v13);
    v9 += v17;
    v4 = (int8x16_t *)((char *)a4 + v17);
    v5 = (int8x16_t *)((char *)a3 + v17);
    v6 = a2 - v17;
  }
  if (v6 >= 0x10)
  {
    ccaes_cfb_decrypt_vng_vector((uint64_t)i8, v12, v6 >> 4, v5, v4);
    v5 = (int8x16_t *)((char *)v5 + (v6 & 0xFFFFFFFFFFFFFFF0));
    v4 = (int8x16_t *)((char *)v4 + (v6 & 0xFFFFFFFFFFFFFFF0));
    v6 &= 0xFu;
  }
  if (v6)
  {
    while (1)
    {
      if (v9 == 16)
      {
        if (AccelerateCrypto_AES_encrypt((uint64_t)v12, v8, i8))
          return 0xFFFFFFFFLL;
        v9 = 0;
      }
      v12->i8[v9] = v5->i8[0];
      v18 = v5->i8[0];
      v5 = (int8x16_t *)((char *)v5 + 1);
      v19 = v9 + 1;
      v4->i8[0] = v8->i8[v9] ^ v18;
      v4 = (int8x16_t *)((char *)v4 + 1);
      ++v9;
      if (!--v6)
        goto LABEL_19;
    }
  }
  v19 = v9;
LABEL_19:
  result = 0;
  a1->i64[1] = v19;
  return result;
}

size_t ccpad_cts3_encrypt(uint64_t a1, uint64_t a2, uint64_t a3, size_t a4, _BYTE *a5, char *a6)
{
  char v12;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  char v24;
  char v26;
  _BYTE __src[32];
  uint64_t v28;

  v12 = 0;
  v28 = *MEMORY[0x1E0C874D8];
  v26 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v12 = 1;
    }
  }
  v26 = v12;
  v18 = *(_QWORD *)(a1 + 8);
  v19 = (a4 - 1) / v18;
  if (v19 >= 2)
  {
    v21 = (v19 - 1) * v18;
    (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a2, a3);
    v20 = a4 - v21;
    a5 += v21;
    a6 += v21;
  }
  else
  {
    v20 = a4;
  }
  if (v20 != 2 * v18)
  {
    cc_clear(2 * v18, __src);
    __memcpy_chk();
    a5 = __src;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *, _BYTE *))(a1 + 24))(a2, a3, 2, a5, __src);
  v22 = 0;
  v23 = &__src[v18];
  do
  {
    v24 = __src[v22];
    __src[v22] = v23[v22];
    v23[v22++] = v24;
  }
  while (v18 != v22);
  memcpy(a6, __src, v20);
  cc_disable_dit(&v26);
  return a4;
}

unint64_t ccecies_decrypt_gcm_plaintext_size(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  char v3;
  unint64_t v9;
  char v11;

  v3 = 0;
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v11 = v3;
  v9 = ccecies_decrypt_gcm_plaintext_size_cp(*a1, a2, a3);
  cc_disable_dit(&v11);
  return v9;
}

unint64_t ccecies_decrypt_gcm_plaintext_size_cp(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char v5;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v16;

  v5 = 0;
  v16 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v16 = v5;
  v11 = ccecies_pub_key_size_cp(a1, a2);
  if (v11 - 1 >= a3)
  {
    v14 = 0;
  }
  else
  {
    v12 = v11 + *(unsigned int *)(a2 + 28);
    _CF = a3 >= v12;
    v13 = a3 - v12;
    if (_CF)
      v14 = v13;
    else
      v14 = 0;
  }
  cc_disable_dit(&v16);
  return v14;
}

void *ccsha512_256_di()
{
  if (MEMORY[0xFFFFFC010] < 0)
    return &ccsha512_256_vng_arm_hw_di;
  else
    return &ccsha512_256_vng_arm_di;
}

uint64_t cche_ciphertext_coeff_decompose_nptexts(uint64_t a1, uint64_t a2)
{
  char v4;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  int v16;
  char v18;

  v4 = 0;
  v18 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v18 = v4;
  v10 = *(_DWORD *)(a1 + 8);
  if (v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4);
    do
    {
      if ((_DWORD)v14)
      {
        for (i = 0; i != v14; ++i)
        {
          if (a2)
            v16 = *(_DWORD *)(a2 + 4 * (v11 + i));
          else
            v16 = 0;
          v13 = cche_ciphertext_coeff_decompose_nptexts_rns((uint64_t *)a1, i, v16) + v13;
        }
      }
      ++v12;
      v11 += v14;
    }
    while (v12 != v10);
  }
  else
  {
    v13 = 0;
  }
  cc_disable_dit(&v18);
  return v13;
}

uint64_t cche_ciphertext_coeff_decompose_nptexts_rns(uint64_t *a1, unsigned int a2, int a3)
{
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  int v11;
  uint8x8_t v12;
  int v13;

  v6 = cche_param_ctx_plaintext_modulus(*a1);
  v7 = a1[3];
  v8 = *(_DWORD *)(v7 + 4);
  while (--v8 > a2)
    v7 = *(_QWORD *)(v7 + 112);
  v9 = __clz(v6);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = __clz(v10);
  v12 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] == 1)
    v13 = 63;
  else
    v13 = 64;
  return (v13 - (v9 + a3 + v11) + 62) / (63 - v9);
}

uint64_t cche_ciphertext_coeff_compose(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, unint64_t a6, uint64_t a7)
{
  char v14;
  unsigned int *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  size_t v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t i;
  _DWORD *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int **v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int **v40;
  unsigned int v41;
  int v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  char v58;

  v14 = 0;
  v58 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v14 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v14 = 1;
    }
  }
  v58 = v14;
  if (!a2 || cche_param_ctx_key_ctx_nmoduli(a4) < a5 || cche_param_ctx_plaintext_modulus(a4) <= a6)
    goto LABEL_32;
  v54 = a2;
  v20 = (unsigned int *)cche_param_ctx_chain_const(a4);
  v21 = *v20;
  v22 = (unint64_t)(sizeof_struct_ccpolyzp_po2cyc_ctx() + 7) >> 3;
  if (v21 >= 0x80)
    v23 = 128;
  else
    v23 = v21;
  v24 = (unint64_t)&v20[2
                             * (v22
                              + 2 * (v21 + ((unint64_t)(sizeof_struct_ccrns_mul_modulus() + 7) >> 3) * v23)
                              + 6)
                             * (v20[1] - a5)
                             + 2];
  v25 = cche_ciphertext_fresh_npolys();
  v26 = cche_ciphertext_sizeof(a4, a5, v25);
  bzero(a1, v26);
  v27 = cche_ciphertext_fresh_npolys();
  *a1 = a4;
  *((_DWORD *)a1 + 2) = v27;
  a1[2] = 1;
  v57 = (uint64_t)a1;
  a1[3] = v24;
  v28 = a1 + 3;
  v56 = v28;
  if (v27 >= 2)
  {
    v29 = v27;
    for (i = 1; i != v29; ++i)
    {
      v31 = (_DWORD *)*v28;
      v28[((v31[1] * *v31) + ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3)) * i] = v24;
    }
  }
  *(_QWORD *)(v57 + 16) = a6;
  if (cche_ciphertext_coeff_decompose_nptexts(v57, a7) != v54)
  {
LABEL_32:
    v49 = 4294967289;
    goto LABEL_33;
  }
  v52 = *(unsigned int *)(v57 + 8);
  if ((_DWORD)v52)
  {
    v51 = a5;
    v32 = 0;
    v33 = 0;
    v34 = 63 - __clz(cche_param_ctx_plaintext_modulus(a4));
    v53 = (*(_DWORD *)(*v28 + 4) * *(_DWORD *)*v28);
    while (1)
    {
      v35 = (unsigned int **)&v28[(v53 + ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3)) * v32];
      v36 = *v35;
      v37 = (*v35)[1];
      v55 = v32;
      if ((_DWORD)v37)
        break;
LABEL_30:
      v28 = v56;
      v32 = v55 + 1;
      if (v55 + 1 == v52)
        goto LABEL_31;
    }
    v38 = 0;
    v39 = v32 * v51;
    v40 = v35 + 1;
    while (1)
    {
      v41 = a7 ? *(_DWORD *)(a7 + 4 * (v39 + v38)) : 0;
      v42 = cche_ciphertext_coeff_decompose_nptexts_rns((uint64_t *)v57, v38, v41);
      if (v42)
        break;
LABEL_29:
      if (++v38 == v37)
        goto LABEL_30;
    }
    v43 = 0;
    v44 = v41;
    while (v44 <= 0x3F)
    {
      v45 = *v36;
      if ((_DWORD)v45)
      {
        v46 = (uint64_t *)(*(_QWORD *)(a3 + 8 * v33) + 8);
        v47 = v38 * v45;
        do
        {
          v48 = *v46++;
          v40[v47] = (unsigned int *)((unint64_t)v40[v47] | (v48 << v44));
          ++v47;
          --v45;
        }
        while (v45);
      }
      v44 += v34;
      ++v43;
      ++v33;
      if (v43 == v42)
        goto LABEL_29;
    }
    goto LABEL_32;
  }
LABEL_31:
  v49 = 0;
LABEL_33:
  cc_disable_dit(&v58);
  return v49;
}

unint64_t cche_ciphertext_coeff_decompose(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v12;
  _DWORD **v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  char v17;
  char v18;
  uint64_t v19;
  unsigned int v20;
  _DWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int **v25;
  int v26;
  int v27;
  int i;
  unsigned int **v29;
  uint64_t v30;
  unint64_t *v31;
  unsigned int v32;
  _DWORD **v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v42;

  v4 = a4;
  v5 = a3;
  v6 = 0;
  v42 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v42 = v6;
  if (cche_ciphertext_coeff_decompose_nptexts(a3, a4) == a1)
  {
    v40 = *(_QWORD *)v5;
    v12 = cche_param_ctx_plaintext_modulus(*(_QWORD *)v5);
    v13 = (_DWORD **)(v5 + 24);
    v14 = *(unsigned int *)(v5 + 8);
    if ((_DWORD)v14)
    {
      v15 = 0;
      v16 = 0;
      v17 = __clz(v12);
      v18 = 63 - v17;
      v19 = ~(-1 << ~v17);
      v20 = *(_DWORD *)(*(_QWORD *)(v5 + 24) + 4);
      v38 = v5;
      v39 = v4;
      v34 = (_DWORD **)(v5 + 24);
      v37 = v20;
      do
      {
        v21 = *v13;
        v22 = sizeof_struct_ccpolyzp_po2cyc();
        if (v20)
        {
          v23 = v15;
          v24 = 0;
          v25 = &v13[((v21[1] * *v21) + ((unint64_t)(v22 + 7) >> 3)) * v23];
          v35 = v23;
          v36 = v20 * v23;
          do
          {
            if (v4)
              LODWORD(v4) = *(_DWORD *)(v4 + 4 * (v36 + v24));
            v26 = cche_ciphertext_coeff_decompose_nptexts_rns((uint64_t *)v5, v24, v4);
            if (v26)
            {
              v27 = v26;
              for (i = 0; i != v27; ++i)
              {
                v29 = *(unsigned int ***)(a2 + 8 * v16);
                *v29 = cche_param_ctx_plaintext_ctx(v40);
                v30 = **v25;
                if ((_DWORD)v30)
                {
                  v31 = (unint64_t *)(v29 + 1);
                  v32 = v24 * v30;
                  do
                  {
                    *v31++ = ((unint64_t)v25[++v32] >> v4) & v19;
                    --v30;
                  }
                  while (v30);
                }
                LOBYTE(v4) = v4 + v18;
                ++v16;
              }
            }
            ++v24;
            v20 = v37;
            v5 = v38;
            v4 = v39;
          }
          while (v24 != v37);
          v14 = *(unsigned int *)(v38 + 8);
          v13 = v34;
          v15 = v35;
        }
        ++v15;
      }
      while (v15 < v14);
      v14 = 0;
    }
  }
  else
  {
    v14 = 4294967289;
  }
  cc_disable_dit(&v42);
  return v14;
}

uint64_t ccrng_sequence_init(uint64_t (**a1)(uint64_t a1, uint64_t a2, uint64_t a3), uint64_t (*a2)(uint64_t a1, uint64_t a2, uint64_t a3), uint64_t (*a3)(uint64_t a1, uint64_t a2, uint64_t a3))
{
  char v3;
  char v10;

  v3 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v10 = v3;
  *a1 = sequence_repeat_generate;
  a1[1] = a3;
  a1[2] = a2;
  cc_disable_dit(&v10);
  return 0;
}

uint64_t sequence_repeat_generate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t i;

  if (!*(_QWORD *)(a1 + 16))
    return 4294967291;
  if (a2)
  {
    for (i = 0; i != a2; ++i)
      *(_BYTE *)(a3 + i) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + i % *(_QWORD *)(a1 + 16));
  }
  return 0;
}

uint64_t ccrng_sequence_non_repeat_init(uint64_t (**a1)(uint64_t a1, unint64_t a2, uint64_t a3), uint64_t (*a2)(uint64_t a1, unint64_t a2, uint64_t a3), uint64_t (*a3)(uint64_t a1, unint64_t a2, uint64_t a3))
{
  *a1 = non_repeat_sequence_generate;
  a1[1] = a3;
  a1[2] = a2;
  return 0;
}

uint64_t non_repeat_sequence_generate(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t i;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 < a2)
    return 4294967286;
  if (a2)
  {
    for (i = 0; i != a2; ++i)
      *(_BYTE *)(a3 + i) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + i);
    v3 = *(_QWORD *)(a1 + 16);
  }
  v4 = 0;
  *(_QWORD *)(a1 + 8) += a2;
  *(_QWORD *)(a1 + 16) = v3 - a2;
  return v4;
}

uint64_t ccrsa_num_mr_iterations(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 5;
  v2 = 16;
  if (a1 > 0x1FF)
    v2 = 7;
  if (a1 <= 0x3FF)
    v1 = v2;
  if (a1 <= 0x5FF)
    return v1;
  else
    return 4;
}

uint64_t ccrsa_num_mr_iterations_aux(unint64_t a1)
{
  uint64_t v1;

  v1 = 38;
  if (a1 > 0xAA)
    v1 = 41;
  if (a1 <= 0xC8)
    return v1;
  else
    return 44;
}

void *ccec_get_cp(uint64_t a1)
{
  char v1;
  void *v7;
  void *v8;
  char v10;

  v1 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v7 = 0;
  v10 = v1;
  if (a1 <= 255)
  {
    if (a1 == 192)
    {
      v8 = ccec_cp_192();
      goto LABEL_16;
    }
    if (a1 == 224)
    {
      v8 = (void *)ccec_cp_224();
      goto LABEL_16;
    }
  }
  else
  {
    switch(a1)
    {
      case 256:
        v8 = (void *)ccec_cp_256();
        goto LABEL_16;
      case 384:
        v8 = (void *)ccec_cp_384();
        goto LABEL_16;
      case 521:
        v8 = ccec_cp_521();
LABEL_16:
        v7 = v8;
        break;
    }
  }
  cc_disable_dit(&v10);
  return v7;
}

uint64_t ccec_keysize_is_supported(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = 1;
  if (a1 <= 255)
  {
    if (a1 != 192 && a1 != 224)
      goto LABEL_12;
  }
  else if (a1 != 256 && a1 != 384 && a1 != 521)
  {
LABEL_12:
    v7 = 0;
  }
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccn_p224_sqrt_ws(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  return cczp_sqrt_tonelli_shanks_precomp_ws(a1, a2, a3, a4, 0x60uLL, SQRT_C3, &SQRT_C5);
}

uint64_t ccn_p224_to_ws(uint64_t a1, uint64_t a2)
{
  return cczp_mul_ws(a1, a2);
}

uint64_t ccec_affinify_homogeneous_ws(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = cczp_n((uint64_t)a2);
  if (!ccn_n(v7, a4 + 16 * *a2))
    return 4294967289;
  v8 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v7);
  v9 = cczp_inv_ws(a1, (uint64_t)a2);
  if (!(_DWORD)v9)
  {
    cczp_mul_ws(a1, (uint64_t)a2);
    cczp_mul_ws(a1, (uint64_t)a2);
    cczp_from_ws(a1, (uint64_t)a2);
    cczp_from_ws(a1, (uint64_t)a2);
  }
  *(_QWORD *)(a1 + 16) = v8;
  return v9;
}

uint64_t ccec_affinify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char v6;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];
  void (*v17)(uint64_t);
  char v18;

  v6 = 0;
  v18 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v18 = v6;
  v12 = cc_malloc_clear(88 * *a1);
  v13 = 11 * *a1;
  v16[0] = v12;
  v16[1] = v13;
  v16[2] = 0;
  v16[3] = cc_ws_alloc;
  v17 = cc_ws_free;
  if (v12)
  {
    v14 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t, uint64_t))(a1[2] + 80))(v16, a1, a2, a3);
    v17((uint64_t)v16);
  }
  else
  {
    v14 = 4294967283;
  }
  cc_disable_dit(&v18);
  return v14;
}

uint64_t ccsae_generate_h2c_pt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, const void *a6, size_t a7, char *a8)
{
  char v12;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t);
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t (*v37)(_QWORD *, uint64_t);
  void (*v38)(uint64_t);
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v12 = 0;
  v41 = *MEMORY[0x1E0C874D8];
  v39 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v12 = 1;
    }
  }
  v39 = v12;
  v18 = (uint64_t *)(*(uint64_t (**)(void))(a1 + 16))();
  v19 = *v18;
  v20 = sizeof_struct_cche_galois_key();
  v21 = sizeof_struct_ccpolyzp_po2cyc();
  v22 = (v20 + v21 + 3 * v19 * v21 - 1) / v21;
  v35[0] = cc_malloc_clear(16 * (v22 + v19) + 8 * (v22 + 18 * v19));
  v23 = *v18;
  v24 = sizeof_struct_cche_galois_key();
  v25 = sizeof_struct_ccpolyzp_po2cyc();
  v26 = (v24 + v25 + 3 * v23 * v25 - 1) / v25;
  v35[1] = v26 + 18 * v23 + 2 * (v26 + v23);
  v36 = 0;
  v37 = cc_ws_alloc;
  v38 = cc_ws_free;
  if (v35[0])
  {
    v27 = 4294967289;
    v28 = cc_ws_free;
    if (a5 <= 0x40 && a7 <= 0x40)
    {
      v29 = (_QWORD *)(*(uint64_t (**)(void))(a1 + 16))();
      v30 = cc_ws_alloc(v35, (unint64_t)(24 * *v29 + 23) >> 3);
      memset(v40, 0, sizeof(v40));
      __memcpy_chk();
      memcpy((char *)v40 + a5, a6, a7);
      v31 = cch2c_ws((uint64_t)v35, a1, a3);
      if (!(_DWORD)v31)
        v31 = ccec_export_pub(v30, a8);
      v27 = v31;
      v36 = 0;
      v28 = v38;
    }
    v28((uint64_t)v35);
  }
  else
  {
    v27 = 4294967283;
  }
  cc_disable_dit(&v39);
  return v27;
}

uint64_t ccmgf(uint64_t a1, uint64_t a2, uint64_t a3, size_t a4, char *a5)
{
  char v8;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  size_t v21;
  uint64_t v23;
  _BYTE __src[64];
  uint64_t v25;

  v8 = 0;
  v25 = *MEMORY[0x1E0C874D8];
  HIBYTE(v23) = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  HIBYTE(v23) = v8;
  MEMORY[0x1E0C86820](a1, a2, a3, a4);
  v15 = &__src[-v14 - 8];
  v17 = v16 / *(_QWORD *)a1;
  v18 = v17 * *(_QWORD *)a1;
  v20 = (char *)(v19 + v18);
  v21 = v16 - v18;
  if (v16 != v18)
  {
    ccdigest_init(a1, v15);
    ccdigest_update(a1, v15, a4, a5);
    *(_DWORD *)((char *)&v23 + 3) = bswap32(v17);
    ccdigest_update(a1, v15, 4uLL, (char *)&v23 + 3);
    (*(void (**)(uint64_t, _QWORD *, _BYTE *))(a1 + 56))(a1, v15, __src);
    memmove(v20, __src, v21);
  }
  while ((_DWORD)v17)
  {
    LODWORD(v17) = v17 - 1;
    v20 -= *(_QWORD *)a1;
    ccdigest_init(a1, v15);
    ccdigest_update(a1, v15, a4, a5);
    *(_DWORD *)((char *)&v23 + 3) = bswap32(v17);
    ccdigest_update(a1, v15, 4uLL, (char *)&v23 + 3);
    (*(void (**)(uint64_t, _QWORD *, char *))(a1 + 56))(a1, v15, v20);
  }
  cc_clear(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) + 12, v15);
  cc_clear(0x40uLL, __src);
  cc_disable_dit((_BYTE *)&v23 + 7);
  return 0;
}

uint64_t *ccaes_ccm_encrypt_mode()
{
  unint64_t v0;
  unint64_t v1;
  void *v2;

  v0 = (*((_QWORD *)ccaes_ecb_encrypt_mode() + 1) + 7) & 0xFFFFFFFFFFFFFFF8;
  v1 = v0 + ((*(_QWORD *)ccaes_ecb_encrypt_mode() + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v2 = ccaes_ecb_encrypt_mode();
  ccm_encrypt_info = v1;
  unk_1F0454A08 = xmmword_1DEE1AA30;
  qword_1F0454A18 = (uint64_t)ccmode_ccm_init;
  unk_1F0454A20 = ccmode_ccm_set_iv;
  qword_1F0454A28 = (uint64_t)ccmode_ccm_cbcmac;
  unk_1F0454A30 = ccaes_vng_ccm_encrypt_wrapper;
  qword_1F0454A38 = (uint64_t)ccmode_ccm_finalize;
  unk_1F0454A40 = ccmode_ccm_reset;
  qword_1F0454A48 = (uint64_t)v2;
  byte_1F0454A50 = 1;
  *(_DWORD *)algn_1F0454A51 = 0;
  dword_1F0454A54 = 0;
  return &ccm_encrypt_info;
}

unint64_t ccdh_generate_private_key_bitlen(_QWORD *a1)
{
  if (ccdh_gp_order_bitlen(a1))
    return ccdh_gp_order_bitlen(a1);
  if (ccdh_gp_l(a1))
    return ccdh_gp_l(a1);
  return cczp_bitlen((uint64_t)a1);
}

uint64_t ccdh_generate_private_key_ws(uint64_t a1, _QWORD *a2, void *a3, uint64_t (**a4)(_QWORD, unint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t private_key_bitlen;
  uint64_t result;
  unint64_t *v14;
  unint64_t v15;

  v8 = ccdh_gp_n(a2);
  v9 = ccdh_gp_l(a2);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v8);
  ccn_zero(v8, a3);
  ccn_zero(v8, v11);
  if (v9 > cczp_bitlen((uint64_t)a2))
  {
    result = 4294967245;
  }
  else
  {
    private_key_bitlen = ccdh_generate_private_key_bitlen(a2);
    result = ccn_random_bits(private_key_bitlen, (uint64_t)a3, a4);
    if (!(_DWORD)result)
    {
      if (ccdh_gp_order_bitlen(a2) || !v9)
      {
        if (ccdh_gp_order_bitlen(a2))
          v14 = (unint64_t *)ccdh_gp_order(a2);
        else
          v14 = (unint64_t *)ccdh_gp_prime(a2);
        ccn_sub1(v8, v11, v14, 2uLL);
        v15 = 0;
        while ((int)ccn_cmp(v8, (unint64_t *)a3, v11) > 0 || !ccn_n(v8, a3))
        {
          result = ccn_random_bits(private_key_bitlen, (uint64_t)a3, a4);
          if ((_DWORD)result)
            goto LABEL_16;
          if (++v15 == 100)
            goto LABEL_15;
        }
        if (v15 >= 0x64)
        {
LABEL_15:
          result = 4294967249;
          goto LABEL_16;
        }
      }
      else
      {
        ccn_set_bit((uint64_t)a3, v9 - 1, 1);
      }
      result = 0;
    }
  }
LABEL_16:
  *(_QWORD *)(a1 + 16) = v10;
  return result;
}

uint64_t ccentropy_digest_init(uint64_t a1, uint64_t a2, int a3)
{
  char v3;
  char v10;

  v3 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v10 = v3;
  *(_QWORD *)a1 = entropy_digest_info;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 376) = a3;
  *(_DWORD *)(a1 + 380) = 0;
  ccdigest_init(a2, (_QWORD *)(a1 + 16));
  cc_disable_dit(&v10);
  return 0;
}

uint64_t ccentropy_digest_get_seed(uint64_t a1, size_t a2, void *a3)
{
  uint64_t v3;
  _QWORD *v7;
  _BYTE __src[64];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C874D8];
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v3 < a2)
    return 4294967291;
  if (*(_DWORD *)(a1 + 380) < *(_DWORD *)(a1 + 376))
    return 4294967286;
  *(_DWORD *)(a1 + 380) = 0;
  v7 = (_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(v3 + 56))(v3, a1 + 16, __src);
  ccdigest_init(v3, v7);
  memcpy(a3, __src, a2);
  cc_clear(0x40uLL, __src);
  return 0;
}

uint64_t ccentropy_digest_add_entropy(uint64_t a1, int a2, size_t a3, char *a4, BOOL *a5)
{
  int v5;
  BOOL v6;
  unsigned int v7;

  v5 = *(_DWORD *)(a1 + 380);
  v6 = __CFADD__(v5, a2);
  v7 = v5 + a2;
  if (v6)
    v7 = -1;
  *(_DWORD *)(a1 + 380) = v7;
  if (a5)
    *a5 = v7 >= *(_DWORD *)(a1 + 376);
  ccdigest_update(*(_QWORD *)(a1 + 8), (_QWORD *)(a1 + 16), a3, a4);
  return 0;
}

uint64_t ccentropy_digest_reset(uint64_t a1)
{
  *(_DWORD *)(a1 + 380) = 0;
  return 0;
}

uint64_t ccrng_drbg_init(uint64_t (**a1)(uint64_t a1, uint64_t a2, uint64_t a3), uint64_t (*a2)(uint64_t a1, uint64_t a2, uint64_t a3), uint64_t (*a3)(uint64_t a1, uint64_t a2, uint64_t a3))
{
  char v6;
  uint64_t v12;
  char v14;

  v6 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v14 = v6;
  v12 = ccdrbg_init((uint64_t)a2);
  if (!(_DWORD)v12)
    ccrng_drbg_init_withdrbg(a1, a2, a3);
  cc_disable_dit(&v14);
  return v12;
}

uint64_t ccrng_drbg_init_withdrbg(uint64_t (**a1)(uint64_t a1, uint64_t a2, uint64_t a3), uint64_t (*a2)(uint64_t a1, uint64_t a2, uint64_t a3), uint64_t (*a3)(uint64_t a1, uint64_t a2, uint64_t a3))
{
  char v3;
  char v10;

  v3 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v10 = v3;
  *a1 = generate_4;
  a1[1] = a2;
  a1[2] = a3;
  cc_disable_dit(&v10);
  return 0;
}

uint64_t ccrng_drbg_reseed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5;
  uint64_t v11;
  char v13;

  v5 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v13 = v5;
  v11 = ccdrbg_reseed(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a2, a3, a4, a5);
  cc_disable_dit(&v13);
  return v11;
}

_BYTE *ccrng_drbg_done(uint64_t a1)
{
  char v2;
  char v9;

  v2 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v9 = v2;
  ccdrbg_done(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 16) = 0;
  return cc_disable_dit(&v9);
}

void *ccec_cp_224_asm()
{
  return &ccec_cp224_asm;
}

_QWORD *ccn_p224_mul_asm_ws(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4, unint64_t *a5)
{
  return ccn_mulmod_p224(a3, a4, a5);
}

_QWORD *ccn_p224_sqr_asm_ws(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4)
{
  return ccn_mulmod_p224(a3, a4, a4);
}

uint64_t ccn_p224_inv_asm_ws(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v7;
  int v8;
  unint64_t *v9;
  unint64_t *v10;
  _QWORD *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t result;
  _OWORD v19[2];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C874D8];
  v7 = *(_QWORD *)(a1 + 16);
  v8 = 4;
  v9 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4);
  v10 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4);
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4);
  ccn_mulmod_p224(v9, a4, a4);
  ccn_mulmod_p224(v10, v9, a4);
  ccn_mulmod_p224(v10, v10, v10);
  ccn_mulmod_p224(v10, v10, v10);
  ccn_mulmod_p224(v9, v9, v10);
  ccn_mulmod_p224(v10, v9, a4);
  ccn_set(4, v11, v10);
  do
  {
    ccn_mulmod_p224(v10, v10, v10);
    --v8;
  }
  while (v8);
  ccn_mulmod_p224(v9, v9, v10);
  ccn_mulmod_p224(v10, v9, a4);
  v12 = 8;
  do
  {
    ccn_mulmod_p224(v10, v10, v10);
    --v12;
  }
  while (v12);
  ccn_mulmod_p224(v9, v9, v10);
  ccn_mulmod_p224(v10, v9, a4);
  v13 = 16;
  do
  {
    ccn_mulmod_p224(v10, v10, v10);
    --v13;
  }
  while (v13);
  ccn_mulmod_p224(v9, v9, v10);
  ccn_mulmod_p224(v10, v9, a4);
  ccn_set(4, v11, v10);
  v14 = 32;
  do
  {
    ccn_mulmod_p224(v11, v11, v11);
    --v14;
  }
  while (v14);
  ccn_mulmod_p224(v11, v11, v10);
  v15 = 32;
  do
  {
    ccn_mulmod_p224(v11, v11, v11);
    --v15;
  }
  while (v15);
  ccn_mulmod_p224(v11, v11, v10);
  ccn_set(4, v10, v11);
  v16 = 32;
  do
  {
    ccn_mulmod_p224(v11, v11, v11);
    --v16;
  }
  while (v16);
  ccn_mulmod_p224(v11, v11, v9);
  v17 = 96;
  do
  {
    ccn_mulmod_p224(v11, v11, v11);
    --v17;
  }
  while (v17);
  ccn_mulmod_p224(v10, v10, v11);
  ccn_mulmod_p224(v9, v10, a4);
  v19[0] = xmmword_1DEE28EB0;
  v19[1] = unk_1DEE28EC0;
  ccn_mulmod_p224(v9, v9, (unint64_t *)v19);
  if (ccn_n(4, v9) == 1 && *v9 == 1)
  {
    ccn_set(4, a3, v10);
    result = 0;
  }
  else
  {
    result = 4294967254;
  }
  *(_QWORD *)(a1 + 16) = v7;
  return result;
}

_QWORD *ccn_p224_from_asm_ws(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4)
{
  _OWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C874D8];
  v5[0] = xmmword_1DEE28EB0;
  v5[1] = unk_1DEE28EC0;
  return ccn_mulmod_p224(a3, a4, (unint64_t *)v5);
}

uint64_t ccentropy_lock_init(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char v3;
  char v10;

  v3 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v10 = v3;
  *a1 = entropy_lock_info;
  a1[1] = a2;
  a1[2] = a3;
  cc_disable_dit(&v10);
  return 0;
}

uint64_t ccentropy_lock_get_seed(uint64_t a1)
{
  uint64_t seed;

  os_unfair_lock_lock(*(os_unfair_lock_t *)(a1 + 16));
  seed = ccentropy_get_seed(*(uint64_t (****)(_QWORD))(a1 + 8));
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 16));
  return seed;
}

uint64_t ccentropy_lock_add_entropy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v10;

  os_unfair_lock_lock(*(os_unfair_lock_t *)(a1 + 16));
  v10 = ccentropy_add_entropy(*(_QWORD *)(a1 + 8), a2, a3, a4, a5);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 16));
  return v10;
}

uint64_t ccentropy_lock_reset(uint64_t a1)
{
  uint64_t v2;

  os_unfair_lock_lock(*(os_unfair_lock_t *)(a1 + 16));
  v2 = ccentropy_reset(*(_QWORD *)(a1 + 8));
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 16));
  return v2;
}

uint64_t ccmode_gcm_decrypt(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8, double a9, int8x16_t a10)
{
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int8x16_t v20;
  uint64_t v21;
  uint64_t result;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t j;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v14 = *(_QWORD *)(a1 + 96);
  ccmode_gcm_aad_finalize(a1, a5, a6, a7, a8, a9, a10);
  if (*(_WORD *)(a1 + 80) != 3)
    return 4294967228;
  v21 = *(_QWORD *)(a1 + 96);
  result = 4294967229;
  if (!__CFADD__(v21, a2) && v21 + a2 <= 0xFFFFFFFE0)
  {
    v23 = v14 & 0xF;
    if ((v14 & 0xF) != 0)
    {
      v24 = 16 - v23;
      if (a2 < v24)
      {
LABEL_18:
        if (!a2)
          return 0;
        v31 = v23;
        v32 = a3 - 1;
        v33 = a1 + v23 + 15;
        v34 = a2;
        do
        {
          *(_BYTE *)(v33 + v34) ^= *(_BYTE *)(v32 + v34);
          --v34;
        }
        while (v34);
        v35 = v31 + a1 + 63;
        v36 = a2;
        do
        {
          *(_BYTE *)(a4 - 1 + v36) = *(_BYTE *)(v35 + v36) ^ *(_BYTE *)(v32 + v36);
          --v36;
        }
        while (v36);
        result = 0;
        *(_QWORD *)(a1 + 96) += a2;
        return result;
      }
      v25 = v14 & 0xF;
      v26 = a3 - 1;
      v27 = 16 - v23;
      do
      {
        *(_BYTE *)(v25 + a1 + 15 + v27) ^= *(_BYTE *)(v26 + v27);
        --v27;
      }
      while (v27);
      ccmode_gcm_mult_h((uint64x2_t *)a1, (int8x16_t *)(a1 + 16), v15, v16, v17, v18, v19, v20);
      v28 = v24;
      do
      {
        *(_BYTE *)(a4 - 1 + v28) = *(_BYTE *)(v25 + a1 + 63 + v28) ^ *(_BYTE *)(v26 + v28);
        --v28;
      }
      while (v28);
      a2 -= v24;
      a3 += v24;
      a4 += v24;
      *(_QWORD *)(a1 + 96) += v24;
      ccmode_gcm_update_pad(a1);
    }
    if (a2 >= 0x10)
    {
      do
      {
        for (i = 0; i != -16; --i)
          *(_BYTE *)(a1 + i + 31) ^= *(_BYTE *)(a3 + i + 15);
        ccmode_gcm_mult_h((uint64x2_t *)a1, (int8x16_t *)(a1 + 16), v15, v16, v17, v18, v19, v20);
        for (j = 0; j != -16; --j)
          *(_BYTE *)(a4 + j + 15) = *(_BYTE *)(a1 + j + 79) ^ *(_BYTE *)(a3 + j + 15);
        a2 -= 16;
        a3 += 16;
        a4 += 16;
        *(_QWORD *)(a1 + 96) += 16;
        ccmode_gcm_update_pad(a1);
      }
      while (a2 > 0xF);
    }
    v23 = 0;
    goto LABEL_18;
  }
  return result;
}

unint64_t *AccelerateCrypto_SHA3_keccak_hwassist(unint64_t *result, int8x16_t _Q0, __n128 _Q1, __n128 _Q2, __n128 _Q3, __n128 _Q4, __n128 _Q5, __n128 _Q6, __n128 _Q7)
{
  uint64_t v26;
  uint64_t *v27;

  _Q0.i64[0] = *result;
  _Q1.n128_u64[0] = result[1];
  _Q2.n128_u64[0] = result[2];
  _Q3.n128_u64[0] = result[3];
  _Q4.n128_u64[0] = result[4];
  _Q5.n128_u64[0] = result[5];
  _Q6.n128_u64[0] = result[6];
  _Q7.n128_u64[0] = result[7];
  *(_QWORD *)&_Q8 = result[8];
  *(_QWORD *)&_Q9 = result[9];
  *(_QWORD *)&_Q10 = result[10];
  *(_QWORD *)&_Q11 = result[11];
  *(_QWORD *)&_Q12 = result[12];
  *(_QWORD *)&_Q13 = result[13];
  *(_QWORD *)&_Q14 = result[14];
  *(_QWORD *)&_Q15 = result[15];
  *(_QWORD *)&_Q16 = result[16];
  *(_QWORD *)&_Q17 = result[17];
  *(_QWORD *)&_Q18 = result[18];
  *(_QWORD *)&_Q19 = result[19];
  *(_QWORD *)&_Q20 = result[20];
  *(_QWORD *)&_Q21 = result[21];
  *(_QWORD *)&_Q22 = result[22];
  *(_QWORD *)&_Q23 = result[23];
  *(_QWORD *)&_Q24 = result[24];
  v26 = 0;
  v27 = &qword_1DEE28ED0;
  do
  {
    __asm
    {
      EOR3            V25.16B, V0.16B, V5.16B, V10.16B
      EOR3            V26.16B, V1.16B, V6.16B, V11.16B
      EOR3            V27.16B, V2.16B, V7.16B, V12.16B
      EOR3            V28.16B, V3.16B, V8.16B, V13.16B
      EOR3            V29.16B, V4.16B, V9.16B, V14.16B
      EOR3            V25.16B, V25.16B, V15.16B, V20.16B
      EOR3            V26.16B, V26.16B, V16.16B, V21.16B
      EOR3            V27.16B, V27.16B, V17.16B, V22.16B
      EOR3            V28.16B, V28.16B, V18.16B, V23.16B
      EOR3            V29.16B, V29.16B, V19.16B, V24.16B
      RAX1            V30.2D, V25.2D, V27.2D
      RAX1            V31.2D, V26.2D, V28.2D
      RAX1            V27.2D, V27.2D, V29.2D
      RAX1            V28.2D, V28.2D, V25.2D
      RAX1            V29.2D, V29.2D, V26.2D
      XAR             V25.2D, V1.2D, V30.2D, #0x3F ; '?'
      XAR             V1.2D, V6.2D, V30.2D, #0x14
      XAR             V6.2D, V9.2D, V28.2D, #0x2C ; ','
      XAR             V9.2D, V22.2D, V31.2D, #3
      XAR             V22.2D, V14.2D, V28.2D, #0x19
      XAR             V14.2D, V20.2D, V29.2D, #0x2E ; '.'
      XAR             V20.2D, V2.2D, V31.2D, #2
      XAR             V2.2D, V12.2D, V31.2D, #0x15
      XAR             V12.2D, V13.2D, V27.2D, #0x27 ; '''
      XAR             V13.2D, V19.2D, V28.2D, #0x38 ; '8'
      XAR             V19.2D, V23.2D, V27.2D, #8
      XAR             V23.2D, V15.2D, V29.2D, #0x17
      XAR             V15.2D, V4.2D, V28.2D, #0x25 ; '%'
      XAR             V26.2D, V21.2D, V30.2D, #0x3E ; '>'
      XAR             V8.2D, V8.2D, V27.2D, #9
    }
    _Q0 = veorq_s8(_Q0, _Q29);
    __asm
    {
      BCAX            V21.16B, V8.16B, V23.16B, V22.16B
      XAR             V28.2D, V24.2D, V28.2D, #0x32 ; '2'
      BCAX            V24.16B, V26.16B, V8.16B, V20.16B
      XAR             V18.2D, V18.2D, V27.2D, #0x2B ; '+'
      BCAX            V23.16B, V23.16B, V20.16B, V26.16B
      XAR             V11.2D, V11.2D, V30.2D, #0x36 ; '6'
      BCAX            V20.16B, V20.16B, V22.16B, V8.16B
      XAR             V30.2D, V16.2D, V30.2D, #0x13
      BCAX            V22.16B, V22.16B, V26.16B, V23.16B
      XAR             V16.2D, V5.2D, V29.2D, #0x1C
      XAR             V27.2D, V3.2D, V27.2D, #0x24 ; '$'
      BCAX            V3.16B, V18.16B, V0.16B, V28.16B
      XAR             V29.2D, V10.2D, V29.2D, #0x3D ; '='
      BCAX            V4.16B, V28.16B, V1.16B, V0.16B
      XAR             V10.2D, V17.2D, V31.2D, #0x31 ; '1'
      BCAX            V0.16B, V0.16B, V2.16B, V1.16B
      XAR             V7.2D, V7.2D, V31.2D, #0x3A ; ':'
      BCAX            V1.16B, V1.16B, V18.16B, V2.16B
      BCAX            V2.16B, V2.16B, V28.16B, V18.16B
      BCAX            V17.16B, V11.16B, V19.16B, V10.16B
      BCAX            V18.16B, V10.16B, V15.16B, V19.16B
      BCAX            V19.16B, V19.16B, V16.16B, V15.16B
      BCAX            V15.16B, V15.16B, V11.16B, V16.16B
      BCAX            V16.16B, V16.16B, V10.16B, V11.16B
      BCAX            V10.16B, V25.16B, V12.16B, V7.16B
      BCAX            V11.16B, V7.16B, V13.16B, V12.16B
      BCAX            V12.16B, V12.16B, V14.16B, V13.16B
      BCAX            V13.16B, V13.16B, V25.16B, V14.16B
      BCAX            V14.16B, V14.16B, V7.16B, V25.16B
    }
    *(_QWORD *)&_Q26 = *v27;
    __asm
    {
      BCAX            V7.16B, V29.16B, V9.16B, V30.16B
      BCAX            V8.16B, V30.16B, V27.16B, V9.16B
      BCAX            V9.16B, V9.16B, V6.16B, V27.16B
      BCAX            V5.16B, V27.16B, V29.16B, V6.16B
    }
    ++v27;
    __asm { BCAX            V6.16B, V6.16B, V30.16B, V29.16B }
    v26 += 8;
    *(int8x8_t *)_Q0.i8 = veor_s8(*(int8x8_t *)_Q0.i8, *(int8x8_t *)&_Q26);
  }
  while (v26 != 192);
  *result = _Q0.i64[0];
  result[1] = _Q1.n128_u64[0];
  result[2] = _Q2.n128_u64[0];
  result[3] = _Q3.n128_u64[0];
  result[4] = _Q4.n128_u64[0];
  result[5] = _Q5.n128_u64[0];
  result[6] = _Q6.n128_u64[0];
  result[7] = _Q7.n128_u64[0];
  result[8] = _Q8;
  result[9] = _Q9;
  result[10] = _Q10;
  result[11] = _Q11;
  result[12] = _Q12;
  result[13] = _Q13;
  result[14] = _Q14;
  result[15] = _Q15;
  result[16] = _Q16;
  result[17] = _Q17;
  result[18] = _Q18;
  result[19] = _Q19;
  result[20] = _Q20;
  result[21] = _Q21;
  result[22] = _Q22;
  result[23] = _Q23;
  result[24] = _Q24;
  return result;
}

unsigned __int8 *ccder_decode_dhparams(uint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unint64_t *v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unint64_t v16;
  unsigned __int8 *v17;

  v17 = a3;
  v6 = ccdh_gp_n(a1);
  v16 = 0;
  v7 = ccder_decode_constructed_tl(0x2000000000000010, &v17, a2, a3);
  v8 = a1 + 3;
  v9 = ccder_decode_uint(v6, a1 + 3, v7, v17);
  if (v9 && cczp_init(a1))
    return 0;
  v11 = ccder_decode_uint(v6, &v8[*a1 + 1 + *a1], v9, v17);
  v12 = ccdh_lookup_gp(v6, (unint64_t *)a1 + 3, v6, &v8[*a1 + 1 + *a1]);
  if (v12)
    ccdh_copy_gp(a1, v12);
  else
    ccn_zero(v6, &v8[*a1 + 1 + *a1 + *a1]);
  v13 = ccder_decode_uint64(&v16, v11, v17);
  if (v13)
    v10 = v13;
  else
    v10 = v11;
  v14 = v16;
  v8[*a1 + 1 + *a1 + *a1 + *a1] = v16;
  ccdh_ramp_gp_exponent(v14, a1);
  return v10;
}

unsigned __int8 *ccder_decode_dhparam_n(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 *result;
  unint64_t v3;
  unsigned __int8 *v4;

  v3 = 0;
  v4 = a2;
  result = ccder_decode_constructed_tl(0x2000000000000010, &v4, a1, a2);
  if (result)
  {
    if (ccder_decode_uint_n(&v3, result, v4))
      return (unsigned __int8 *)v3;
    else
      return 0;
  }
  return result;
}

uint64_t ccrsa_decrypt_oaep_blinded_ws(uint64_t a1, uint64_t (**a2)(_QWORD, uint64_t, uint64_t), uint64_t *a3, uint64_t *a4, size_t *a5, void *a6, unint64_t a7, unsigned __int8 *a8, size_t a9, char *a10)
{
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  void *v25;
  uint64_t v26;

  v18 = ccrsa_ctx_public(a3);
  v19 = ccrsa_block_size(v18);
  v20 = 2 * *a4;
  if (v19 < v20 + 2)
    return 4294967272;
  v22 = v19;
  result = 4294967273;
  if (v22 <= a7 && *a5 >= v22 - v20 - 2)
  {
    v25 = a6;
    v23 = *a3;
    v26 = *(_QWORD *)(a1 + 16);
    v24 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, *a3);
    result = ccn_read_uint(v23, v24, a7, a8);
    if (!(_DWORD)result)
    {
      result = ccrsa_priv_crypt_blinded_ws(a1, a2, a3, v24, (unint64_t *)v24);
      if (!(_DWORD)result)
        result = ccrsa_oaep_decode_parameter_ws(a1, a4, a5, v25, v22, (unint64_t *)v24, a9, a10);
    }
    *(_QWORD *)(a1 + 16) = v26;
  }
  return result;
}

uint64_t ccrsa_encrypt_eme_pkcs1v15_ws(uint64_t a1, uint64_t *a2, uint64_t (**a3)(_QWORD, size_t, char *), unint64_t *a4, char *a5, size_t a6, void *a7)
{
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  int v19;

  v14 = ccrsa_block_size((uint64_t)a2);
  result = 4294967268;
  if (v14)
  {
    v16 = *a2;
    if (*a2)
    {
      if ((unint64_t)ccn_n(*a2, a2 + 3) > 1 || (unint64_t)a2[3] >= 2)
      {
        if (*a4 >= v14)
        {
          *a4 = v14;
          v17 = *(_QWORD *)(a1 + 16);
          v18 = (_WORD *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v16);
          cc_clear(8 * v16, v18);
          result = ccrsa_eme_pkcs1v15_encode(a3, v14, v18, a6, a7);
          if (!(_DWORD)result)
          {
            result = ccrsa_pub_crypt_ws(a1, a2, (uint64_t *)v18, (unint64_t *)v18);
            if (!(_DWORD)result)
            {
              v19 = ccn_write_uint_padded_ct(v16, (unint64_t *)v18, v14, a5);
              result = v19 & (v19 >> 31);
            }
          }
          *(_QWORD *)(a1 + 16) = v17;
        }
        else
        {
          return 4294967273;
        }
      }
      else
      {
        return 4294967268;
      }
    }
  }
  return result;
}

uint64_t ccrsa_encrypt_eme_pkcs1v15(uint64_t *a1, uint64_t (**a2)(_QWORD, size_t, char *), unint64_t *a3, char *a4, size_t a5, void *a6)
{
  char v12;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v26[4];
  void (*v27)(uint64_t);
  char v28;

  v12 = 0;
  v28 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v12 = 1;
    }
  }
  v28 = v12;
  v18 = *a1;
  v19 = sizeof_struct_ccrns_mul_modulus();
  v20 = sizeof_struct_ccpolyzp_po2cyc();
  v26[0] = cc_malloc_clear(8 * ((v19 + v20 - 1) / v20 + 12 * v18) + 8);
  v21 = *a1;
  v22 = sizeof_struct_ccrns_mul_modulus();
  v23 = sizeof_struct_ccpolyzp_po2cyc();
  v26[1] = (v22 + v23 - 1) / v23 + 12 * v21 + 1;
  v26[2] = 0;
  v26[3] = cc_ws_alloc;
  v27 = cc_ws_free;
  if (v26[0])
  {
    v24 = ccrsa_encrypt_eme_pkcs1v15_ws((uint64_t)v26, a1, a2, a3, a4, a5, a6);
    v27((uint64_t)v26);
  }
  else
  {
    v24 = 4294967283;
  }
  cc_disable_dit(&v28);
  return v24;
}

uint64_t fipspost_post_aes_xts(char a1)
{
  void *v1;
  void *v2;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C874D8];
  v11 = 0;
  v10 = 0;
  v9 = 41;
  if ((a1 & 0x10) != 0)
    v1 = &unk_1DEE28F90;
  else
    v1 = &unk_1DEE28FA2;
  v2 = ccaes_xts_encrypt_mode();
  v7 = 0;
  v8 = 0;
  if (ccxts_one_shot((uint64_t)v2, 16, (uint64_t)v1, (uint64_t)"O\x9B6!r\x8D\x8AgT\x9Ft\xAA\b-X\xEF\x14{\xB2\xA2\x05\x97M\x1E\xFD8h\x85\xB2G\x97", (uint64_t)&v9, 1, (uint64_t)"\x18\x14{\xB2\xA2\x05\x97M\x1E\xFD8h\x85\xB2G\x97", (uint64_t)&v7))
  {
    mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: encrypt\n");
    return 4294967223;
  }
  if (v7 == 0x15E6D4FF84381AB9 && v8 == 0xFFA95FCBAEAA5A1CLL)
  {
    v5 = ccaes_xts_decrypt_mode();
    v7 = 0;
    v8 = 0;
    if (ccxts_one_shot((uint64_t)v5, 16, (uint64_t)v1, (uint64_t)"O\x9B6!r\x8D\x8AgT\x9Ft\xAA\b-X\xEF\x14{\xB2\xA2\x05\x97M\x1E\xFD8h\x85\xB2G\x97", (uint64_t)&v9, 1, (uint64_t)"\xB9\x1A8\x84\xFF\xD4\xE6\x15\x1CZ\xAA\xAE\xCB\x5F\xA9\xFF", (uint64_t)&v7))
    {
      mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: decrypt\n");
      return 4294967223;
    }
    if (v7 == 0x4D9705A2B27B1418 && v8 == 0x9747B2856838FD1ELL)
      return 0;
    mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: decrypt\n");
  }
  else
  {
    mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: encrypt\n");
  }
  return 4294967221;
}

void *ccspake_cp_256()
{
  return &ccspake_cp256;
}

void *ccspake_cp_256_rfc()
{
  return &ccspake_cp256_rfc;
}

uint64_t (**ccspake_mac_hkdf_hmac_sha256())()
{
  return &ccspake_mac_hkdf_hmac_sha256_decl;
}

uint64_t (**ccspake_mac_hkdf_hmac_sha512())()
{
  return &ccspake_mac_hkdf_hmac_sha512_decl;
}

uint64_t ccspake_mac_hkdf_hmac_compute(uint64_t a1, uint64_t a2, uint64_t a3, size_t a4, char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v13;

  v7 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v7 + 24) != a6)
    return 4294967289;
  v13 = (*(uint64_t (**)(void))v7)();
  cchmac(v13, a2, a3, a4, a5, a7);
  return 0;
}

uint64_t ccdh_check_pub_ws(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t result;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t *v13;
  int v14;
  unint64_t *v15;

  v6 = ccdh_gp_n(a2);
  if (v6 != ccdh_gp_n(*a3))
    return 4294967243;
  v7 = (unint64_t *)ccdh_gp_prime(a2);
  v8 = (unint64_t *)ccdh_gp_prime(*a3);
  if (ccn_cmp(v6, v7, v8))
    return 4294967243;
  if ((*(_BYTE *)ccdh_gp_prime(a2) & 1) == 0)
    return 4294967245;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  v12 = (unint64_t *)ccdh_gp_prime(a2);
  if (ccn_sub1(v6, v11, v12, 1uLL))
    goto LABEL_7;
  v13 = a3 + 2;
  v14 = ccn_cmp(v6, v13, v11);
  result = 4294967247;
  if ((v14 & 0x80000000) == 0 || !v6)
    goto LABEL_8;
  if ((unint64_t)ccn_n(v6, v13) <= 1 && *v13 < 2
    || ccdh_gp_order_bitlen(a2)
    && ((v15 = (unint64_t *)ccdh_gp_order(a2),
         cczp_mm_power_fast_ws(a1, a2, (uint64_t *)v11, v13, v15))
     || ccn_n(v6, v11) != 1
     || *v11 != 1))
  {
LABEL_7:
    result = 4294967247;
  }
  else
  {
    result = 0;
  }
LABEL_8:
  *(_QWORD *)(a1 + 16) = v10;
  return result;
}

uint64_t ccmode_cfb_encrypt(_QWORD *a1, uint64_t a2, char *a3, _BYTE *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  v5 = a1[1];
  if (a2)
  {
    v8 = a2;
    v9 = *a1;
    v10 = (unint64_t)(*(_QWORD *)(*a1 + 8) + 7) >> 3;
    v11 = a1 + 2;
    v12 = (uint64_t)&a1[2 * v10 + 2];
    v13 = (uint64_t)&a1[v10 + 2];
    do
    {
      if (v5 == *(_QWORD *)(v9 + 8))
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(v9 + 24))(v12, 1, v13, a1 + 2);
        v5 = 0;
      }
      v14 = *a3++;
      v15 = *((_BYTE *)v11 + v5);
      *a4++ = v15 ^ v14;
      *(_BYTE *)(v13 + v5++) = v15 ^ v14;
      --v8;
    }
    while (v8);
  }
  a1[1] = v5;
  return 0;
}

_BYTE *ccmode_factory_xts_decrypt(int64x2_t *a1, _QWORD *a2, uint64_t a3)
{
  char v3;
  uint64_t v9;
  int64x2_t v10;
  char v12;

  v3 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v12 = v3;
  v9 = a2[1];
  v10.i64[0] = 2 * *a2;
  v10.i64[1] = v9;
  *a1 = vaddq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v10, (int64x2_t)xmmword_1DEE18870), (int8x16_t)xmmword_1DEE18880), (int64x2_t)xmmword_1DEE18890);
  a1[1].i64[0] = v9;
  a1[1].i64[1] = (uint64_t)ccmode_xts_init;
  a1[2].i64[0] = (uint64_t)ccmode_xts_key_sched;
  a1[2].i64[1] = (uint64_t)ccmode_xts_set_tweak;
  a1[3].i64[0] = (uint64_t)ccmode_xts_crypt;
  a1[3].i64[1] = (uint64_t)a2;
  a1[4].i64[0] = a3;
  a1[4].i64[1] = 21;
  return cc_disable_dit(&v12);
}

uint64_t ccrsa_crt_makekey_ws(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  _DWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void *v39;
  _QWORD *v40;
  _QWORD *__n;
  uint64_t v42;
  _QWORD *__dst;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *__src;

  v4 = ccrsa_ctx_private_zp(a2);
  v5 = ccrsa_ctx_private_zp(a2);
  v6 = v5 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a2) + 32;
  v7 = cczp_n((uint64_t)a2);
  v8 = cczp_n(v4);
  v9 = cczp_n(v6);
  if (v8 < v9 || v8 > (v7 >> 1) + 1)
    return 0xFFFFFFFFLL;
  v11 = v9;
  v12 = (unint64_t *)cczp_prime(v4);
  v13 = (unint64_t *)cczp_prime(v6);
  if ((int)ccn_cmpn(v8, v12, v11, v13) < 1)
    return 4294967289;
  v42 = *(_QWORD *)(a1 + 16);
  v14 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v7 + 2);
  __dst = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, (v7 >> 1) + 1);
  v44 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, (v7 >> 1) + 1);
  cc_clear(8 * v7, v14);
  v15 = cczp_prime(v4);
  v16 = cczp_prime(v6);
  v46 = a1;
  __src = v14;
  ccn_mul_ws(a1, v11, (uint64_t)v14, v15, v16);
  v45 = v8 - v11;
  if (v8 != v11)
  {
    v17 = &v14[16 * v11];
    v18 = v11;
    v19 = &__src[8 * v11];
    do
    {
      v20 = cczp_prime(v6);
      v21 = cczp_prime(v4);
      *(_QWORD *)v17 = ccn_addmul1(v11, v19, v20, *(_QWORD *)(v21 + 8 * v18));
      v17 += 8;
      ++v18;
      v19 += 8;
    }
    while (v8 != v18);
  }
  v40 = a2 + 3;
  ccn_set(v7, a2 + 3, __src);
  v22 = v46;
  result = cczp_init_ws(v46, a2);
  if (!(_DWORD)result)
  {
    v23 = (void *)cczp_prime(v4);
    ccn_set(v8, __dst, v23);
    v24 = (void *)cczp_prime(v6);
    if (v11)
      ccn_set(v11, v44, v24);
    ccn_zero(v45, &v44[v11]);
    *__dst &= ~1uLL;
    *v44 &= ~1uLL;
    cc_clear(8 * v7, __src);
    ccn_lcm_ws(v46, v8, (uint64_t)__src, __dst, v44);
    v25 = &v40[2 * *a2 + 1];
    __n = &v40[3 * *a2 + 1];
    v26 = ccn_n(v7, v25);
    result = ccn_invmod_ws(v46, v7, __n, v26, v25, __src);
    if ((_DWORD)result)
    {
      v22 = v46;
    }
    else
    {
      v27 = ccrsa_ctx_private_zp(a2);
      v28 = v27 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a2);
      v29 = (_QWORD *)ccrsa_ctx_private_zp(a2);
      ccn_divmod_ws(v46, v7, (uint64_t)__n, 0, 0, v8, (char *)(v28 + 16 * *v29 + 64), (uint64_t)__dst);
      v30 = ccrsa_ctx_private_zp(a2);
      v31 = v30 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a2);
      v32 = v31 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a2);
      v33 = (_QWORD *)ccrsa_ctx_private_zp(a2);
      ccn_divmod_ws(v46, v7, (uint64_t)__n, 0, 0, v8, (char *)(v32 + 8 * *v33 + 64), (uint64_t)v44);
      v34 = ccrsa_ctx_private_zp(a2);
      v35 = v34 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a2);
      v36 = v35 + 16 * *(_QWORD *)ccrsa_ctx_private_zp(a2);
      v37 = v36 + 8 * *(_QWORD *)ccrsa_ctx_private_zp(a2);
      v38 = (char *)(v37 + 8 * *(_QWORD *)ccrsa_ctx_private_zp(a2) + 64);
      v39 = (void *)cczp_prime(v6);
      v22 = v46;
      if (v11)
        ccn_set(v11, v38, v39);
      ccn_zero(v45, &v38[8 * v11]);
      ccrsa_ctx_private_zp(a2);
      ccrsa_ctx_private_zp(a2);
      ccrsa_ctx_private_zp(a2);
      ccrsa_ctx_private_zp(a2);
      ccrsa_ctx_private_zp(a2);
      ccrsa_ctx_private_zp(a2);
      ccrsa_ctx_private_zp(a2);
      ccrsa_ctx_private_zp(a2);
      ccrsa_ctx_private_zp(a2);
      ccrsa_ctx_private_zp(a2);
      result = cczp_inv_ws(v46, v4);
      if ((_DWORD)result)
        result = 4294967263;
    }
  }
  *(_QWORD *)(v22 + 16) = v42;
  return result;
}

uint64_t ccec_compressed_x962_import_pub(unint64_t *a1, uint64_t a2, unsigned __int8 *a3, unint64_t **a4)
{
  char v4;
  unsigned int v10;
  uint64_t v11;
  char v13;

  v4 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v13 = v4;
  v10 = ccec_x963_import_pub(a1, a2, a3, a4);
  if (v10 == -7)
    v11 = 4294967135;
  else
    v11 = v10;
  cc_disable_dit(&v13);
  return v11;
}

void *ccaes_siv_encrypt_mode()
{
  void *v0;
  uint64_t *v1;

  v0 = ccaes_cbc_encrypt_mode();
  v1 = ccaes_ctr_crypt_mode();
  ccmode_factory_siv_encrypt((uint64_t)&siv_encrypt, (uint64_t)v0, (uint64_t)v1);
  return &siv_encrypt;
}

_BYTE *ccz_mod(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  _OWORD v13[2];
  char v14;

  v6 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v14 = v6;
  memset(v13, 0, sizeof(v13));
  ccz_init(*(_QWORD *)(a1 + 8), (uint64_t)v13);
  ccz_divmod((uint64_t)v13, a1, a2, a3);
  ccz_free((uint64_t)v13);
  return cc_disable_dit(&v14);
}

uint64_t ccec_curve_for_length_lookup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v10;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v20;
  char v21;

  v10 = 0;
  v21 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v21 = v10;
  v20 = &a9;
  do
  {
    v15 = v20++;
    v16 = *v15;
    if (!*v15)
      break;
    v17 = cczp_bitlen(*v15);
  }
  while (v17 != a1 && ((v17 + 7) & 0xFFFFFFFFFFFFFFF8) != a1);
  cc_disable_dit(&v21);
  return v16;
}

uint64_t ccec_compact_export(int a1, char *a2, uint64_t **a3)
{
  char v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  char v20;

  v6 = 0;
  v20 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v20 = v6;
  v12 = ccec_compact_export_pub(a2, (uint64_t)a3);
  v13 = v12;
  if (a1 && !(_DWORD)v12)
  {
    v14 = *a3;
    v15 = **a3;
    v16 = (unint64_t)(cczp_bitlen((uint64_t)&(*a3)[5 * v15 + 4]) + 7) >> 3;
    v17 = cczp_bitlen((uint64_t)v14);
    v18 = ccn_write_uint_padded_ct(v15, (unint64_t *)&a3[3 * v15 + 2], v16, &a2[(unint64_t)(v17 + 7) >> 3]);
    v13 = v18 & (v18 >> 31);
  }
  cc_disable_dit(&v20);
  return v13;
}

_BYTE *ccmode_factory_siv_decrypt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  char v10;

  v3 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v10 = v3;
  *(_OWORD *)a1 = xmmword_1DEE18850;
  *(_QWORD *)(a1 + 16) = ccmode_siv_init;
  *(_QWORD *)(a1 + 24) = ccmode_siv_auth;
  *(_QWORD *)(a1 + 32) = ccmode_siv_auth;
  *(_QWORD *)(a1 + 40) = ccmode_siv_decrypt;
  *(_QWORD *)(a1 + 48) = ccmode_siv_reset;
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 64) = a3;
  return cc_disable_dit(&v10);
}

uint64_t ccdes3_ltc_setup(uint64_t a1, _OWORD *a2, uint64_t a3, char *a4)
{
  if (a3 != 24)
    return 0xFFFFFFFFLL;
  deskey((uint64_t)a4, 0, a2);
  deskey((uint64_t)(a4 + 8), 1, a2 + 8);
  deskey((uint64_t)(a4 + 16), 0, a2 + 16);
  deskey((uint64_t)a4, 1, a2 + 40);
  deskey((uint64_t)(a4 + 8), 0, a2 + 32);
  deskey((uint64_t)(a4 + 16), 1, a2 + 24);
  if (!cc_cmp_safe(8, a4, a4 + 8) || !cc_cmp_safe(8, a4, a4 + 16))
    return 0xFFFFFFFFLL;
  if (cc_cmp_safe(8, a4 + 8, a4 + 16))
    return 0;
  return 0xFFFFFFFFLL;
}

uint64_t ccss_shamir_share_bag_set_ith_share(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t result;

  result = ccss_shamir_consistent_primes(*a1 + 8, *(_QWORD *)a3);
  if (!(_DWORD)result)
  {
    if (*(_DWORD *)*a1 <= a2)
      return 4294967165;
    else
      return ccss_shamir_share_bag_set_ith_share_with_xy(a1, a2, *(_DWORD *)(a3 + 8), (void *)(a3 + 16));
  }
  return result;
}

uint64_t ccss_shamir_share_bag_set_ith_share_with_xy(_QWORD *a1, unsigned int a2, int a3, void *a4)
{
  uint64_t v8;
  _DWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;

  v8 = cczp_n(*a1 + 8);
  v9 = (_DWORD *)*a1;
  if (*(_DWORD *)*a1 <= a2)
    return 4294967165;
  v10 = &a1[a2 * v8 + a2];
  *((_DWORD *)v10 + 4) = a3;
  v11 = v10 + 3;
  v12 = cczp_n((uint64_t)(v9 + 2));
  ccn_set(v12, v11, a4);
  return 0;
}

uint64_t ccss_shamir_share_bag_copy_ith_share_x(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 8) - 1 < a2)
    cc_abort();
  return *(unsigned int *)(a1 + 8 * (a2 * cczp_n(*(_QWORD *)a1 + 8) + a2) + 16);
}

uint64_t ccss_shamir_share_bag_ith_share_y(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 8) - 1 < a2)
    cc_abort();
  return a1 + 8 * (a2 * cczp_n(*(_QWORD *)a1 + 8) + a2) + 24;
}

uint64_t ccss_shamir_share_import(uint64_t a1, int a2, unsigned __int8 *a3, unint64_t a4)
{
  char v6;
  uint64_t v12;
  char v14;

  v6 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v14 = v6;
  v12 = ccss_encode_string_into_value_smaller_than_prime(*(_QWORD *)a1, (_QWORD *)(a1 + 16), a4, a3);
  if (!(_DWORD)v12)
    *(_DWORD *)(a1 + 8) = a2;
  cc_disable_dit(&v14);
  return v12;
}

uint64_t ccss_shamir_share_sizeof_y(uint64_t *a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = 8 * cczp_n(*a1);
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccss_shamir_share_export(uint64_t a1, _DWORD *a2, char *a3, unint64_t a4)
{
  char v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v8 = 0;
  v18 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v18 = v8;
  v14 = cczp_n(*(_QWORD *)a1);
  if (ccn_write_uint_size(v14, (unint64_t *)(a1 + 16)) <= a4)
  {
    v16 = cczp_n(*(_QWORD *)a1);
    ccn_write_uint_padded_ct(v16, (unint64_t *)(a1 + 16), a4, a3);
    v15 = 0;
    *a2 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    v15 = 4294967289;
  }
  cc_disable_dit(&v18);
  return v15;
}

uint64_t ccrsa_verify_pkcs1v15_allowshortsigs(unint64_t *a1, uint64_t a2, unint64_t a3, char *a4, unint64_t a5, unsigned __int8 *a6, _BYTE *a7)
{
  char v8;
  unsigned int v14;
  uint64_t v15;
  char v17;
  _QWORD v18[3];

  v8 = 0;
  v18[2] = *MEMORY[0x1E0C874D8];
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v17 = v8;
  *a7 = 0;
  v18[0] = 0;
  v18[1] = 0;
  v14 = ccrsa_verify_pkcs1v15_internal(a1, a2, a3, a4, a5, a6, 2110636126, (unsigned __int8 *)v18);
  if (v14)
  {
    if (v14 == -146)
      v15 = 0;
    else
      v15 = v14;
  }
  else
  {
    v15 = 0;
    *a7 = 1;
  }
  cc_disable_dit(&v17);
  return v15;
}

_BYTE *ccmode_factory_cfb_encrypt(_QWORD *a1, _QWORD *a2)
{
  char v2;
  char v9;

  v2 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v9 = v2;
  *a1 = ((2 * a2[1] + 14) & 0xFFFFFFFFFFFFFFF0) + ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  a1[1] = 1;
  a1[2] = ccmode_cfb_init;
  a1[3] = ccmode_cfb_encrypt;
  a1[4] = a2;
  return cc_disable_dit(&v9);
}

uint64_t ccec_generate_key_internal_legacy_ws(uint64_t a1, uint64_t *a2, uint64_t (**a3)(_QWORD, size_t, void *), uint64_t **a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  uint64_t result;

  v8 = *a2;
  *a4 = a2;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v8);
  v11 = 8 * v8;
  result = (*a3)(a3, v11, v10);
  if (!(_DWORD)result)
  {
    result = ccec_generate_scalar_legacy_ws(a1, a2, v11, v10, &a4[3 * **a4 + 2]);
    if (!(_DWORD)result)
      result = ccec_make_pub_from_priv_ws(a1, a2, 0, (unint64_t *)&a4[3 * **a4 + 2], 0, a4);
  }
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

uint64_t cckem_generate_key(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  cc_disable_dit(&v9);
  return v7;
}

uint64_t cckem_derive_key_from_seed(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  cc_disable_dit(&v9);
  return v7;
}

uint64_t cckem_encapsulate(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  uint64_t v10;
  uint64_t v11;
  char v13;

  v4 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v13 = v4;
  v10 = *a1;
  if (*(_QWORD *)(*a1 + 16) == a2 && *(_QWORD *)(v10 + 24) == a4)
    v11 = (*(uint64_t (**)(void))(v10 + 48))();
  else
    v11 = 4294967289;
  cc_disable_dit(&v13);
  return v11;
}

uint64_t cckem_encapsulated_key_nbytes_ctx(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 16);
}

uint64_t cckem_shared_key_nbytes_ctx(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 24);
}

uint64_t cckem_decapsulate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v9;
  uint64_t v15;
  char v17;

  v9 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v9 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v9 = 1;
    }
  }
  v17 = v9;
  if (*(_QWORD *)(*(_QWORD *)cckem_public_ctx(a1) + 16) == a2
    && *(_QWORD *)(*(_QWORD *)cckem_public_ctx(a1) + 24) == a4)
  {
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a3, a5);
  }
  else
  {
    v15 = 4294967289;
  }
  cc_disable_dit(&v17);
  return v15;
}

uint64_t cckem_export_pubkey(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t cckem_import_pubkey(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 72))();
}

uint64_t cckem_export_privkey(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  cc_disable_dit(&v9);
  return v7;
}

uint64_t cckem_import_privkey(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = (*(uint64_t (**)(void))(a1 + 88))();
  cc_disable_dit(&v9);
  return v7;
}

uint64_t cckem_pubkey_nbytes_info(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t cckem_pubkey_nbytes_ctx(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 8);
}

uint64_t cckem_privkey_nbytes_info(_QWORD *a1)
{
  return *a1 - a1[1];
}

uint64_t cckem_privkey_nbytes_ctx(uint64_t a1)
{
  return **(_QWORD **)a1 - *(_QWORD *)(*(_QWORD *)a1 + 8);
}

uint64_t cckem_encapsulated_key_nbytes_info(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t cckem_shared_key_nbytes_info(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t ge_frombytes_vartime(int *a1, uint64_t a2)
{
  int *v4;
  _OWORD v6[2];
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;
  _OWORD v12[2];
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C874D8];
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v7 = 0;
  v4 = a1 + 10;
  memset(v6, 0, sizeof(v6));
  fe_frombytes(a1 + 10, (unsigned int *)a2);
  fe_1((uint64_t)(a1 + 20));
  fe_sq(v14, v4);
  fe_mul(v12, (int *)v14, d);
  fe_sub((uint64_t)v14, (uint64_t)v14, (uint64_t)(a1 + 20));
  fe_add((uint64_t)v12, (uint64_t)v12, (uint64_t)(a1 + 20));
  fe_sq(v10, (int *)v12);
  fe_mul(v10, (int *)v10, (int *)v12);
  fe_sq(a1, (int *)v10);
  fe_mul(a1, a1, (int *)v12);
  fe_mul(a1, a1, (int *)v14);
  fe_pow22523(a1, a1);
  fe_mul(a1, a1, (int *)v10);
  fe_mul(a1, a1, (int *)v14);
  fe_sq(v8, a1);
  fe_mul(v8, (int *)v8, (int *)v12);
  fe_sub((uint64_t)v6, (uint64_t)v8, (uint64_t)v14);
  if (fe_isnonzero(v6))
  {
    fe_add((uint64_t)v6, (uint64_t)v8, (uint64_t)v14);
    if (fe_isnonzero(v6))
      return 0xFFFFFFFFLL;
    fe_mul(a1, a1, sqrtm1);
  }
  if (fe_isnegative(a1) != *(unsigned __int8 *)(a2 + 31) >> 7)
    fe_neg((uint64_t)a1, (uint64_t)a1);
  fe_mul(a1 + 30, a1, v4);
  return 0;
}

uint64_t ge_from_uniform(uint64_t a1, _OWORD *a2)
{
  __int128 v3;
  char v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _OWORD v15[7];
  uint64_t v16;
  _OWORD v17[10];
  _OWORD v18[10];
  _OWORD v19[2];
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;
  _OWORD v25[2];
  uint64_t v26;
  _OWORD v27[2];
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C874D8];
  v32 = 0;
  memset(v31, 0, sizeof(v31));
  v30 = 0;
  memset(v29, 0, sizeof(v29));
  v28 = 0;
  memset(v27, 0, sizeof(v27));
  v26 = 0;
  memset(v25, 0, sizeof(v25));
  v24 = 0;
  memset(v23, 0, sizeof(v23));
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  memset(v18, 0, sizeof(v18));
  memset(v17, 0, sizeof(v17));
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  v3 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_BYTE *)(a1 + 31);
  *(_BYTE *)(a1 + 31) = v4 & 0x7F;
  fe_frombytes(v27, (unsigned int *)a1);
  fe_sq2(v27, (int *)v27);
  ++LODWORD(v27[0]);
  fe_invert(v27, (int *)v27);
  fe_mul(v25, (int *)curve25519_A, (int *)v27);
  fe_neg((uint64_t)v25, (uint64_t)v25);
  fe_sq(v23, (int *)v25);
  fe_mul(v21, (int *)v25, (int *)v23);
  fe_add((uint64_t)v31, (uint64_t)v21, (uint64_t)v25);
  fe_mul(v23, (int *)v23, (int *)curve25519_A);
  fe_add((uint64_t)v31, (uint64_t)v23, (uint64_t)v31);
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  v38 = 0;
  v36 = 0u;
  v37 = 0u;
  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  fe_sq(&v42, (int *)v31);
  fe_mul(&v39, (int *)&v42, (int *)v31);
  fe_sq(&v42, (int *)&v39);
  fe_sq(&v36, (int *)&v42);
  fe_sq(&v36, (int *)&v36);
  fe_mul(&v36, (int *)&v36, (int *)&v42);
  fe_mul(&v39, (int *)&v36, (int *)v31);
  fe_sq(&v36, (int *)&v39);
  v5 = 4;
  do
  {
    fe_sq(&v36, (int *)&v36);
    --v5;
  }
  while (v5);
  fe_mul(&v39, (int *)&v36, (int *)&v39);
  fe_sq(&v36, (int *)&v39);
  v6 = 9;
  do
  {
    fe_sq(&v36, (int *)&v36);
    --v6;
  }
  while (v6);
  fe_mul(&v36, (int *)&v36, (int *)&v39);
  fe_sq(&v33, (int *)&v36);
  v7 = 19;
  do
  {
    fe_sq(&v33, (int *)&v33);
    --v7;
  }
  while (v7);
  fe_mul(&v36, (int *)&v33, (int *)&v36);
  fe_sq(&v36, (int *)&v36);
  v8 = 9;
  do
  {
    fe_sq(&v36, (int *)&v36);
    --v8;
  }
  while (v8);
  fe_mul(&v39, (int *)&v36, (int *)&v39);
  fe_sq(&v36, (int *)&v39);
  v9 = 49;
  do
  {
    fe_sq(&v36, (int *)&v36);
    --v9;
  }
  while (v9);
  fe_mul(&v36, (int *)&v36, (int *)&v39);
  fe_sq(&v33, (int *)&v36);
  v10 = 99;
  do
  {
    fe_sq(&v33, (int *)&v33);
    --v10;
  }
  while (v10);
  fe_mul(&v36, (int *)&v33, (int *)&v36);
  fe_sq(&v36, (int *)&v36);
  v11 = 49;
  do
  {
    fe_sq(&v36, (int *)&v36);
    --v11;
  }
  while (v11);
  fe_mul(&v39, (int *)&v36, (int *)&v39);
  fe_sq(&v39, (int *)&v39);
  v12 = 3;
  do
  {
    fe_sq(&v39, (int *)&v39);
    --v12;
  }
  while (v12);
  fe_mul(v31, (int *)&v39, (int *)&v42);
  fe_tobytes(a1, v31);
  v13 = *(_BYTE *)(a1 + 1) & 1;
  fe_neg((uint64_t)v29, (uint64_t)v25);
  fe_cmov((uint64_t *)v25, (uint64_t *)v29, v13);
  fe_0((uint64_t)v23);
  fe_cmov((uint64_t *)v23, curve25519_A, v13);
  fe_sub((uint64_t)v25, (uint64_t)v25, (uint64_t)v23);
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  v38 = 0;
  v36 = 0u;
  v37 = 0u;
  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  fe_1((uint64_t)&v42);
  fe_add((uint64_t)&v39, (uint64_t)v25, (uint64_t)&v42);
  fe_sub((uint64_t)&v33, (uint64_t)v25, (uint64_t)&v42);
  fe_invert(&v36, (int *)&v39);
  fe_mul(v19, (int *)&v33, (int *)&v36);
  fe_tobytes(a1, v19);
  *(_BYTE *)(a1 + 31) |= v4 & 0x80;
  ge_frombytes_vartime((int *)v18, a1);
  ge_p3_dbl(v17, (uint64_t)v18);
  ge_p1p1_to_p2(v15, (int *)v17);
  ge_p2_dbl(v17, (int *)v15);
  ge_p1p1_to_p2(v15, (int *)v17);
  ge_p2_dbl(v17, (int *)v15);
  ge_p1p1_to_p3(v18, (int *)v17);
  return ge_p3_tobytes(a1, (int *)v18);
}

uint64_t ge_scalarmult(_DWORD *a1, int8x16_t *a2, uint64_t a3)
{
  uint64_t v6;
  int8x16_t v7;
  int8x16_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  _OWORD v15[10];
  _OWORD v16[10];
  _OWORD v17[10];
  _OWORD v18[10];
  _OWORD v19[10];
  _OWORD v20[10];
  _OWORD v21[10];
  _OWORD v22[10];
  _OWORD v23[10];
  _OWORD v24[10];
  _OWORD v25[10];
  _OWORD v26[10];
  _OWORD v27[10];
  _OWORD v28[10];
  _OWORD v29[10];
  _OWORD v30[7];
  uint64_t v31;
  _OWORD v32[10];
  uint64_t v33[20];
  int v34[40];
  uint64_t v35;
  int v36[40];
  uint64_t v37;
  int v38[40];
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[63];
  char v42;
  uint64_t v43;
  int8x16x2_t v44;

  v43 = *MEMORY[0x1E0C874D8];
  memset(v32, 0, sizeof(v32));
  v31 = 0;
  memset(v30, 0, sizeof(v30));
  memset(v29, 0, sizeof(v29));
  memset(v28, 0, sizeof(v28));
  memset(v27, 0, sizeof(v27));
  memset(v26, 0, sizeof(v26));
  memset(v25, 0, sizeof(v25));
  memset(v24, 0, sizeof(v24));
  memset(v23, 0, sizeof(v23));
  memset(v22, 0, sizeof(v22));
  memset(v21, 0, sizeof(v21));
  memset(v20, 0, sizeof(v20));
  memset(v19, 0, sizeof(v19));
  memset(v18, 0, sizeof(v18));
  memset(v17, 0, sizeof(v17));
  memset(v16, 0, sizeof(v16));
  memset(v15, 0, sizeof(v15));
  ge_p3_to_cached((uint64_t)v33, a3);
  ge_p3_dbl(v29, a3);
  ge_p1p1_to_p3(v22, (int *)v29);
  ge_p3_to_cached((uint64_t)v34, (uint64_t)v22);
  ge_add((int *)v28, a3, v34);
  ge_p1p1_to_p3(v21, (int *)v28);
  ge_p3_to_cached((uint64_t)&v35, (uint64_t)v21);
  ge_p3_dbl(v27, (uint64_t)v22);
  ge_p1p1_to_p3(v20, (int *)v27);
  ge_p3_to_cached((uint64_t)v36, (uint64_t)v20);
  ge_add((int *)v26, a3, v36);
  ge_p1p1_to_p3(v19, (int *)v26);
  ge_p3_to_cached((uint64_t)&v37, (uint64_t)v19);
  ge_p3_dbl(v25, (uint64_t)v21);
  ge_p1p1_to_p3(v18, (int *)v25);
  ge_p3_to_cached((uint64_t)v38, (uint64_t)v18);
  ge_add((int *)v24, a3, v38);
  ge_p1p1_to_p3(v17, (int *)v24);
  ge_p3_to_cached((uint64_t)&v39, (uint64_t)v17);
  ge_p3_dbl(v23, (uint64_t)v20);
  ge_p1p1_to_p3(v16, (int *)v23);
  ge_p3_to_cached((uint64_t)&v40, (uint64_t)v16);
  v6 = 0;
  v7.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v7.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  do
  {
    v8 = *a2++;
    v44.val[0] = vandq_s8(v8, v7);
    v44.val[1] = (int8x16_t)vshrq_n_u8((uint8x16_t)v8, 4uLL);
    v9 = &v41[v6];
    vst2q_s8(v9, v44);
    v6 += 32;
  }
  while (v6 != 64);
  v10 = 0;
  v11 = 0;
  do
  {
    v12 = v41[v10] + v11;
    v11 = (v12 + 8) << 24 >> 28;
    v41[v10++] = v12 - ((v12 + 8) & 0xF0);
  }
  while (v10 != 63);
  v42 += v11;
  ge_p3_0((uint64_t)a1);
  v13 = 63;
  do
  {
    ge_select_cached((uint64_t *)v15, v33, (char)v41[v13]);
    ge_add((int *)v32, (uint64_t)a1, (int *)v15);
    ge_p1p1_to_p2(v30, (int *)v32);
    ge_p2_dbl(v32, (int *)v30);
    ge_p1p1_to_p2(v30, (int *)v32);
    ge_p2_dbl(v32, (int *)v30);
    ge_p1p1_to_p2(v30, (int *)v32);
    ge_p2_dbl(v32, (int *)v30);
    ge_p1p1_to_p2(v30, (int *)v32);
    ge_p2_dbl(v32, (int *)v30);
    ge_p1p1_to_p3(a1, (int *)v32);
    --v13;
  }
  while (v13);
  ge_select_cached((uint64_t *)v15, v33, v41[0]);
  ge_add((int *)v32, (uint64_t)a1, (int *)v15);
  return ge_p1p1_to_p3(a1, (int *)v32);
}

uint64_t ge_select_cached(uint64_t *a1, uint64_t *a2, int a3)
{
  int v5;
  int v6;
  _OWORD v8[5];
  _OWORD v9[5];

  memset(v9, 0, sizeof(v9));
  v5 = (a3 >> 7) & 1;
  v6 = a3 - 2 * (a3 & (a3 >> 31));
  memset(v8, 0, sizeof(v8));
  fe_1((uint64_t)a1);
  fe_1((uint64_t)(a1 + 5));
  fe_1((uint64_t)(a1 + 10));
  fe_0((uint64_t)(a1 + 15));
  ge_cmov_cached(a1, a2, (v6 ^ 1) - 1 < 0);
  ge_cmov_cached(a1, a2 + 20, (v6 ^ 2) - 1 < 0);
  ge_cmov_cached(a1, a2 + 40, (v6 ^ 3) - 1 < 0);
  ge_cmov_cached(a1, a2 + 60, (v6 ^ 4) - 1 < 0);
  ge_cmov_cached(a1, a2 + 80, (v6 ^ 5) - 1 < 0);
  ge_cmov_cached(a1, a2 + 100, (v6 ^ 6) - 1 < 0);
  ge_cmov_cached(a1, a2 + 120, (v6 ^ 7) - 1 < 0);
  ge_cmov_cached(a1, a2 + 140, (v6 ^ 8) - 1 < 0);
  fe_copy((uint64_t)v8, (uint64_t)(a1 + 5));
  fe_copy((uint64_t)&v8[2] + 8, (uint64_t)a1);
  fe_copy((uint64_t)v9, (uint64_t)(a1 + 10));
  fe_neg((uint64_t)&v9[2] + 8, (uint64_t)(a1 + 15));
  return ge_cmov_cached(a1, (uint64_t *)v8, v5);
}

uint64_t ge_scalarmult_cofactor(_DWORD *a1)
{
  _OWORD v3[7];
  uint64_t v4;
  _OWORD v5[10];

  memset(v5, 0, sizeof(v5));
  v4 = 0;
  memset(v3, 0, sizeof(v3));
  ge_p3_dbl(v5, (uint64_t)a1);
  ge_p1p1_to_p2(v3, (int *)v5);
  ge_p2_dbl(v5, (int *)v3);
  ge_p1p1_to_p2(v3, (int *)v5);
  ge_p2_dbl(v5, (int *)v3);
  return ge_p1p1_to_p3(a1, (int *)v5);
}

uint64_t ge_has_small_order(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char v4;
  char *v5;
  char v6;
  uint64_t v7;
  char v8;
  char *v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  unsigned __int8 v14[8];

  v1 = 0;
  memset(v14, 0, 7);
  v2 = &ge_has_small_order_small_order_blocklist;
  do
  {
    v3 = 0;
    v4 = *(_BYTE *)(a1 + v1);
    v5 = v2;
    do
    {
      v6 = *v5;
      v5 += 32;
      v14[v3++] |= v6 ^ v4;
    }
    while (v3 != 7);
    ++v1;
    ++v2;
  }
  while (v1 != 31);
  v7 = 0;
  v8 = *(_BYTE *)(a1 + 31) & 0x7F;
  v9 = &byte_1DEE29057;
  do
  {
    v10 = *v9;
    v9 += 32;
    v14[v7++] |= v8 ^ v10;
  }
  while (v7 != 7);
  v11 = 0;
  v12 = 0;
  do
    v12 |= v14[v11++] - 1;
  while (v11 != 7);
  return (v12 >> 8) & 1;
}

uint64_t ge_cmov_cached(uint64_t *a1, uint64_t *a2, char a3)
{
  fe_cmov(a1, a2, a3);
  fe_cmov(a1 + 5, a2 + 5, a3);
  fe_cmov(a1 + 10, a2 + 10, a3);
  return fe_cmov(a1 + 15, a2 + 15, a3);
}

uint64_t fipspost_post_aes_cbc(char a1)
{
  const char *v1;
  char v2;
  char *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  int v20;
  const char *v21;
  const char *v22;
  char *v23;
  _QWORD v24[2];
  int v25;
  const char *v26;
  const char *v27;
  const char *v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C874D8];
  v1 = "2]\xE3\x14\xE9)\xED\x08\x97\x87Т\x05\xD1\xEB3";
  v19 = 16;
  v21 = "4I\x1B&m\x8F\xB5L\\\xE1\xA9\xFB\xF1\x7B\x09\x8C";
  v22 = "\x9B\xC2\x0B)Q\xFFr\xD3\xF2\x80\xFF;\xD2\xDC=\xCC\x06\xFE\x99qc\xCB\xCBU\x85>(Wt̨\x9D";
  if ((a1 & 0x10) != 0)
    v1 = "\x012]\xE3\x14\xE9)\xED\x08\x97\x87Т\x05\xD1\xEB3";
  v2 = 1;
  v20 = 1;
  v23 = "\x06\xFE\x99qc\xCB\xCBU\x85>(Wt̨\x9D";
  v24[0] = v1;
  v3 = "\x9Ef\x1D\xB3\x809 \x9Ar\xC7\xD2\x96@f\x88\xF2PSPOST_USER [%llu] %s:%d: FAILED: test %d\n";
  if ((a1 & 0x10) != 0)
    v3 = "\x01\x9Ef\x1D\xB3\x809 \x9Ar\xC7\xD2\x96@f\x88\xF2\x1D\xB3\x809 \x9Ar\xC7\xD2\x96@f\x88\xF2PSPOST_USER [%llu] %s:%d: FAILED: test %d\n";
  v24[1] = 16;
  v25 = 0;
  v26 = "ƎN\xB2\xCA\x2Aů꣗\x11\x94";
  v27 = "\x11ݝ\xA1\xBD\":\xCF\x68š\xE1\x96\x4C\x18\x9B";
  v28 = "\xAA6W\x9B\fr\xC5\x28\x16{p\x12\xD7\xFA\xF0\xDE\x9Ef\x1D\xB3\x809 \x9Ar\xC7\xD2\x96@f\x88\xF2\x1D\xB3\x809 \x9Ar"
        "\xC7\xD2\x96@f\x88\xF2PSPOST_USER [%llu] %s:%d: FAILED: test %d\n";
  v29 = v3;
  v4 = ccaes_cbc_encrypt_mode();
  v5 = ccaes_cbc_decrypt_mode();
  v6 = 0;
  v7 = 0;
  while (1)
  {
    v8 = v2;
    v9 = &v19 + 6 * v6;
    v10 = (uint64_t)(*((_DWORD *)v9 + 2) ? v4 : v5);
    if (cccbc_one_shot(v10, *v9, v9[2], (const void *)v9[3], 1, v9[4], (uint64_t)v18))
      break;
    v11 = (uint64_t *)v24[6 * v6];
    v13 = *v11;
    v12 = v11[1];
    if (v13 != v18[0] || v12 != v18[1])
    {
      v15 = mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: AES-CBC KAT Failed %d\n", v15, "fipspost_post_aes_cbc", 96, 2 * v6);
      v7 = v7 | 0xFFFFFFB5;
    }
    v2 = 0;
    v6 = 1;
    if ((v8 & 1) == 0)
      return v7;
  }
  v16 = mach_absolute_time();
  printf("FIPSPOST_USER [%llu] %s:%d: FAILED: test %d\n", v16, "fipspost_post_aes_cbc", 87, 2 * v6);
  return 4294967223;
}

uint64_t fipspost_post_aes_ecb(char a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v12[16];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C874D8];
  v2 = ccaes_ecb_encrypt_mode();
  if ((a1 & 0x10) != 0)
    v3 = &invalid_key_0;
  else
    v3 = &valid_key_0;
  if (ccecb_one_shot((uint64_t)v2, 16, (uint64_t)v3, 1, (uint64_t)plaintext_data_0, (uint64_t)v12))
  {
    v4 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: aes_ecb_encrypt one_shot\n", v4, "fipspost_post_aes_ecb_encrypt", 36);
    v5 = -73;
  }
  else if (cc_cmp_safe(16, v12, ciphertext_data_0))
  {
    v6 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: aes_ecb_encrypt cmp\n", v6, "fipspost_post_aes_ecb_encrypt", 41);
    v5 = -75;
  }
  else
  {
    v5 = 0;
  }
  v7 = ccaes_ecb_decrypt_mode();
  if (ccecb_one_shot((uint64_t)v7, 16, (uint64_t)v3, 1, (uint64_t)ciphertext_data_0, (uint64_t)v12))
  {
    v8 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: aes_ecb_decrypt one_shot\n", v8, "fipspost_post_aes_ecb_decrypt", 59);
    v9 = -73;
  }
  else if (cc_cmp_safe(16, v12, plaintext_data_0))
  {
    v10 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: aes_ecb_decrypt cmp\n", v10, "fipspost_post_aes_ecb_decrypt", 64);
    v9 = -75;
  }
  else
  {
    v9 = 0;
  }
  return v9 | v5;
}

void *ccdh_gp_rfc3526group15()
{
  return &_ccdh_gp_rfc3526group15;
}

uint64_t cccast_ecb_encrypt(uint64_t a1, uint64_t a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v6;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C874D8];
  if (a2)
  {
    v6 = a2;
    do
    {
      --v6;
      v8 = *a3;
      v9 = a3[1];
      a3 += 2;
      v12 = bswap32(v8);
      v13 = bswap32(v9);
      CC_CAST_encrypt((int *)&v12, a1);
      v10 = bswap32(v13);
      *a4 = bswap32(v12);
      a4[1] = v10;
      a4 += 2;
    }
    while (v6);
  }
  return 0;
}

void *ccaes_siv_hmac_sha256_encrypt_mode()
{
  void *v0;
  uint64_t *v1;

  v0 = ccsha256_di();
  v1 = ccaes_ctr_crypt_mode();
  ccmode_factory_siv_hmac_encrypt((uint64_t)&siv_hmac_encrypt, (uint64_t)v0, (uint64_t)v1);
  return &siv_hmac_encrypt;
}

uint64_t ccder_blob_encode_octet_string(uint64_t *a1, unint64_t a2, unint64_t *a3)
{
  return ccder_blob_encode_implicit_octet_string(a1, 4uLL, a2, a3);
}

unint64_t CCHE_CIPHERTEXT_MOD_SWITCH_DOWN_WORKSPACE_N(unsigned int a1, int a2)
{
  unint64_t result;

  result = CCPOLYZP_PO2CYC_BASE_CONVERT_MOD_T_DIVIDE_AND_ROUND_Q_LAST_WORKSPACE_N(a1, a2);
  if (result <= 8)
    return 8;
  return result;
}

uint64_t cche_ciphertext_mod_switch_down_ws(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _DWORD *v4;
  int8x16_t **v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  int8x16_t **v10;
  uint64_t result;
  _DWORD *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t i;
  int8x16_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  int8x16_t **v41;
  uint64_t *v42;
  uint64_t v43;

  v2 = (uint64_t *)a2;
  v5 = (int8x16_t **)(a2 + 24);
  v4 = *(_DWORD **)(a2 + 24);
  v6 = sizeof_struct_ccpolyzp_po2cyc();
  if (!*((_DWORD *)v2 + 2))
    return 0;
  v7 = *(_DWORD *)*v2;
  if (v7)
  {
    v8 = 0;
    v9 = (v4[1] * *v4) + ((unint64_t)(v6 + 7) >> 3);
    v10 = v5;
    v42 = v2;
    v43 = a1;
    v41 = v5;
    v40 = *(_DWORD *)*v2;
    v39 = v9;
    while (v7 != 2)
    {
      if (v7 == 1)
      {
        result = ccpolyzp_po2cyc_divide_and_round_q_last_ws(a1, v10);
        if ((_DWORD)result)
          return result;
      }
      if (v8)
        goto LABEL_22;
LABEL_23:
      v10 += v9;
      if (++v8 >= (unint64_t)*((unsigned int *)v2 + 2))
        return 0;
    }
    v12 = (_DWORD *)*v2;
    v13 = *cche_param_ctx_plaintext_ctx(*v2);
    v14 = cche_param_ctx_plaintext_ctx((uint64_t)v12);
    v15 = cche_param_ctx_polynomial_degree((uint64_t)v12);
    v16 = (unint64_t)(sizeof_struct_ccpolyzp_po2cyc_ctx() + 7) >> 3;
    if (v15 >= 0x80)
      v17 = 128;
    else
      v17 = v15;
    v18 = (unint64_t)(sizeof_struct_ccrns_mul_modulus() + 7) >> 3;
    v19 = v16 + 6;
    v20 = (uint64_t)&v14[4 * v18 * v17 + 12 + 4 * v15 + 2 * v16] + ((4 * v13 + 7) & 0x7FFFFFFF8);
    v21 = (*v10)->u32[1];
    v22 = sizeof_struct_ccpolyzp_po2cyc();
    v23 = sizeof_struct_ccpolyzp_po2cyc();
    v24 = v23 - 1;
    v25 = *(unsigned int *)(v20 + 8);
    v27 = *(unsigned int *)(v20 + 12);
    v26 = v20 + 8;
    if (v25 >= 0x80)
      v28 = 128;
    else
      v28 = v25;
    v29 = (_QWORD *)(v26 + 8 * ((v23 - 1 + v22) / v23 + (v19 + 2 * (v25 + v18 * v28)) * v27));
    if (v21 >= 2)
    {
      v30 = v23;
      v31 = sizeof_struct_ccpolyzp_po2cyc_base_convert();
      v32 = v27;
      v33 = 1;
      for (i = 1; i != v21; ++i)
      {
        v29 += i + (v31 + v24) / v30 + (v33 + v32) * v18;
        v33 += 3;
        v32 += v27;
      }
    }
    result = ccpolyzp_po2cyc_fwd_ntt((unsigned int **)v10);
    if ((_DWORD)result)
      return result;
    a1 = v43;
    result = ccpolyzp_po2cyc_base_convert_mod_t_divide_and_round_q_last_ws(v43, (uint64_t *)v10, v29);
    if ((_DWORD)result)
      return result;
    result = ccpolyzp_po2cyc_inv_ntt((unsigned int **)v10);
    if ((_DWORD)result)
      return result;
    v5 = v41;
    v2 = v42;
    v7 = v40;
    v9 = v39;
    if (!v8)
    {
      v37 = v29[9];
      v38 = v29[10] * v42[2] - v37 * (((unint64_t)v29[11] * (unsigned __int128)(unint64_t)v42[2]) >> 64);
      if (v38 - v37 >= 0)
        v38 -= v37;
      v42[2] = v38;
      goto LABEL_23;
    }
LABEL_22:
    v35 = *v5;
    v36 = sizeof_struct_ccpolyzp_po2cyc();
    memmove(&v5[((v35->i32[1] * v35->i32[0]) + ((unint64_t)(v36 + 7) >> 3)) * v8], v10, (v36 + 7 + 8 * ((*v10)->i32[1] * (*v10)->i32[0])) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_23;
  }
  return 4294967289;
}

uint64_t ccecies_decrypt_gcm_from_shared_secret_composite(uint64_t a1, uint64_t a2, size_t a3, char *a4, rsize_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char __s[48];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C874D8];
  v18 = ccecies_pub_key_size_cp(a1, a2);
  v19 = ccecies_derive_gcm_key_iv(a2, a3, a4, a9, a10, v18, a6, __s);
  if ((_DWORD)v19)
  {
    v20 = v19;
    goto LABEL_3;
  }
  v20 = ccecies_decrypt_gcm_decrypt(a2, (uint64_t)__s, a11, a12);
  if ((_DWORD)v20)
LABEL_3:
    cc_clear(a5, a13);
  cc_clear(0x30uLL, __s);
  return v20;
}

uint64_t ccecies_decrypt_gcm_from_shared_secret(uint64_t a1, uint64_t a2, size_t a3, char *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, rsize_t *a11, void *a12)
{
  char v18;
  unint64_t v24;
  rsize_t v25;
  rsize_t v26;
  uint64_t v27;
  char v31;

  v18 = 0;
  v31 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v18 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v18 = 1;
    }
  }
  v31 = v18;
  v24 = ccecies_pub_key_size_cp(a1, a2);
  v25 = ccecies_decrypt_gcm_plaintext_size_cp(a1, a2, a5);
  if ((*(_BYTE *)(a2 + 32) & 0x21) == 0)
  {
    v27 = 4294967291;
    goto LABEL_13;
  }
  v26 = v25;
  if (!v25 || v25 > *a11)
  {
    v27 = 4294967289;
    goto LABEL_13;
  }
  v27 = ccecies_decrypt_gcm_from_shared_secret_composite(a1, a2, a3, a4, v25, a6, a6 + v24, a6 + a5 - *(unsigned int *)(a2 + 28), a7, a8, a9, a10, a12);
  if ((_DWORD)v27)
  {
LABEL_13:
    cc_clear(*a11, a12);
    goto LABEL_10;
  }
  *a11 = v26;
LABEL_10:
  cc_disable_dit(&v31);
  return v27;
}

uint64_t fipspost_post_aes_gcm(char a1)
{
  const char *v1;
  const char *v2;
  uint64_t *v3;
  uint64_t *v6;
  __int128 v8;
  _BYTE v9[16];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C874D8];
  if ((a1 & 0x10) != 0)
    v1 = "\x01\xF2\xA1\x24\x6B\xFF-\x89:\xEF\xCD\xE5\x90z\x12\a\x9B";
  else
    v1 = "\xF2\xA1\x24\x6B\xFF-\x89:\xEF\xCD\xE5\x90z\x12\a\x9B";
  if ((a1 & 0x10) != 0)
    v2 = "\x01&\x86\xF5\xA1\x1F\x0CKS\x81\n[2\xB0\xA8\xFF\xBC";
  else
    v2 = "&\x86\xF5\xA1\x1F\x0CKS\x81\n[2\xB0\xA8\xFF\xBC";
  v8 = *(_OWORD *)v1;
  v3 = ccaes_gcm_decrypt_mode();
  {
    mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccgcm_one_shot decrypt\n");
    return 4294967223;
  }
  if ((_QWORD)v8 == *(_QWORD *)v1 && *((_QWORD *)&v8 + 1) == *((_QWORD *)v1 + 1))
  {
    v8 = 0uLL;
    v6 = ccaes_gcm_encrypt_mode();
    if (ccgcm_one_shot((rsize_t *)v6, 16, (uint64_t)"pȿ\xB6\x02v\xE2\x18\xA0\uD8AA\xD1\xFD\xC1\x9C", 12, (uint64_t)&unk_1DEE29184, 0, 0, 0, 0, (uint64_t)v9, 16, (uint64_t)&v8))
    {
      mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccgcm_one_shot encrypt\n");
      return 4294967223;
    }
    if ((_QWORD)v8 == *(_QWORD *)v2 && *((_QWORD *)&v8 + 1) == *((_QWORD *)v2 + 1))
      return 0;
    mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccgcm_one_shot encrypt\n");
  }
  else
  {
    mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccgcm_one_shot decrypt\n");
  }
  return 4294967221;
}

uint64_t ccrsa_sign_pss(uint64_t *a1, uint64_t *a2, uint64_t a3, rsize_t a4, uint64_t (**a5)(_QWORD, rsize_t, char *), size_t a6, uint64_t a7, unint64_t *a8, char *a9)
{
  char v17;
  uint64_t *v23;
  uint64_t v24;
  char v26;

  v17 = 0;
  v26 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v17 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v17 = 1;
    }
  }
  v26 = v17;
  v23 = ccrng(0);
  if (v23)
    v24 = ccrsa_sign_pss_blinded((uint64_t (**)(_QWORD, uint64_t, uint64_t))v23, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  else
    v24 = 0xFFFFFFFFLL;
  cc_disable_dit(&v26);
  return v24;
}

uint64_t ccrsa_sign_pss_msg(uint64_t *a1, uint64_t *a2, uint64_t a3, rsize_t a4, uint64_t (**a5)(_QWORD, rsize_t, char *), size_t a6, char *a7, unint64_t *a8, char *a9)
{
  char v15;
  uint64_t v21;
  char v23;
  _BYTE v24[64];
  uint64_t v25;

  v15 = 0;
  v25 = *MEMORY[0x1E0C874D8];
  v23 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v15 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v15 = 1;
    }
  }
  v23 = v15;
  ccdigest((uint64_t)a2, a6, a7, (uint64_t)v24);
  v21 = ccrsa_sign_pss(a1, a2, a3, a4, a5, *a2, (uint64_t)v24, a8, a9);
  cc_disable_dit(&v23);
  return v21;
}

uint64_t ccansikdf_x963(_QWORD *a1, size_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7)
{
  char v7;
  uint64_t v13;
  char v15;
  _QWORD v16[3];

  v7 = 0;
  v16[2] = *MEMORY[0x1E0C874D8];
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v7 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v7 = 1;
    }
  }
  v15 = v7;
  v16[0] = a5;
  v16[1] = a4;
  v13 = ccansikdf_x963_iovec(a1, a2, a3, 1, (uint64_t)v16, a6, a7);
  cc_disable_dit(&v15);
  return v13;
}

uint64_t ccansikdf_x963_iovec(_QWORD *a1, size_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7)
{
  unint64_t v7;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t i;
  _BYTE __src[64];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C874D8];
  v7 = (unint64_t)(a6 + *a1 - 1) / *a1;
  if (v7 > 0xFFFFFFFE)
    return 4294967289;
  v16 = MEMORY[0x1E0C86820](a1, a2, a3, a4);
  v18 = &__src[-v17 - 8];
  ccdigest_init(v16, &__src[-v17 - 8]);
  v19 = ccdigest_update((uint64_t)a1, v18, a2, a3);
  MEMORY[0x1E0C86820](v19, v20, v21, v22);
  v24 = &__src[-v23 - 8];
  if (v7 >= 2)
  {
    for (i = 1; i != v7; ++i)
    {
      ccansikdf_x963_round((uint64_t)a1, v24, v18, i, a4, a5, (uint64_t)a7);
      a7 += *a1;
    }
  }
  ccansikdf_x963_round((uint64_t)a1, v24, v18, v7, a4, a5, (uint64_t)__src);
  memcpy(a7, __src, a6 - *a1 * (v7 - 1));
  cc_clear(a1[1] + a1[2] + 12, v24);
  cc_clear(a1[1] + a1[2] + 12, v18);
  return 0;
}

uint64_t ccansikdf_x963_round(uint64_t a1, _QWORD *__dst, void *__src, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  size_t *v13;
  unsigned int __srca;

  memcpy(__dst, __src, *(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) + 12);
  __srca = bswap32(a4);
  ccdigest_update(a1, __dst, 4uLL, (char *)&__srca);
  if (a5)
  {
    v13 = (size_t *)(a6 + 8);
    do
    {
      ccdigest_update(a1, __dst, *v13, (char *)*(v13 - 1));
      v13 += 2;
      --a5;
    }
    while (a5);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(a1 + 56))(a1, __dst, a7);
}

uint64_t ccder_encode_rsa_pub_size(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = a1 + 24;
  v2 = *(_QWORD *)a1;
  v3 = ccder_sizeof_integer(*(_QWORD *)a1, (unint64_t *)(a1 + 24));
  v4 = ccder_sizeof_integer(v2, (unint64_t *)(v1 + 16 * v2 + 8)) + v3;
  return ccder_sizeof(0x2000000000000010, v4);
}

uint64_t ccrsa_oaep_encode(size_t *a1, uint64_t (**a2)(_QWORD, size_t, char *), uint64_t a3, void *a4, size_t a5, const void *a6)
{
  char v6;
  uint64_t v12;
  char v14;

  v6 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v14 = v6;
  v12 = ccrsa_oaep_encode_parameter(a1, a2, a3, a4, a5, a6, 0, 0);
  cc_disable_dit(&v14);
  return v12;
}

uint64_t ccrsa_oaep_decode(uint64_t *a1, size_t *a2, void *a3, uint64_t a4, unint64_t *a5)
{
  char v5;
  uint64_t v11;
  char v13;

  v5 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v13 = v5;
  v11 = ccrsa_oaep_decode_parameter(a1, a2, a3, a4, a5, 0, 0);
  cc_disable_dit(&v13);
  return v11;
}

unint64_t ccrsa_sizeof_n_from_size(uint64_t a1)
{
  return (a1 + 7) & 0xFFFFFFFFFFFFFFF8;
}

unsigned int *sha1_compress_0(unsigned int *result, uint64_t a2, const char *a3)
{
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint16x8_t v19;
  uint16x8_t v20;
  int8x16_t v21;
  uint16x8_t v22;
  unint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  int v35;
  unsigned int v36;
  int v37;
  unint64_t v38;
  int v39;
  unsigned int v40;
  unint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  int *v45;
  unint64_t i;
  unint64_t v47;
  unsigned int v48;
  int v49;
  int v50;
  unint64_t v51;
  unsigned int v52;
  int v53;
  int v54;
  unint64_t v55;
  unsigned int v56;
  int v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  int v61;
  int *v62;
  unint64_t v63;
  int v64;
  unint64_t v65;
  int v66;
  int v67;
  int v68;
  unint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  unint64_t v74;
  int v75;
  int v76;
  int *v77;
  unint64_t j;
  unint64_t v79;
  unsigned int v80;
  int v81;
  int v82;
  unint64_t v83;
  unsigned int v84;
  int v85;
  int v86;
  unint64_t v87;
  unsigned int v88;
  int v89;
  unint64_t v90;
  int v91;
  unint64_t v92;
  int v93;
  _OWORD v94[2];
  _OWORD v95[4];
  uint64_t v96;
  uint64_t v97;
  _QWORD v98[10];
  int8x16x4_t v99;

  v98[8] = *MEMORY[0x1E0C874D8];
  if (a2)
  {
    v3 = *result;
    v4 = result[1];
    v5 = result[2];
    v6 = result[3];
    v7 = result[4];
    do
    {
      v8 = 0;
      v99 = vld4q_s8(a3);
      v9 = vmovl_u8(*(uint8x8_t *)v99.val[0].i8);
      v10 = vmovl_high_u8((uint8x16_t)v99.val[0]);
      _Q16 = vmovl_u8(*(uint8x8_t *)v99.val[1].i8);
      _Q17 = vmovl_high_u8((uint8x16_t)v99.val[1]);
      __asm
      {
        SHLL2           V18.4S, V17.8H, #0x10
        SHLL2           V19.4S, V16.8H, #0x10
      }
      v19 = vmovl_high_u8((uint8x16_t)v99.val[2]);
      v20 = vmovl_u8(*(uint8x8_t *)v99.val[2].i8);
      v21 = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q16.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v20.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v9.i8), 0x18uLL));
      v22 = vmovl_high_u8((uint8x16_t)v99.val[3]);
      v99.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v99.val[3].i8);
      v95[0] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q17.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v19.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v10.i8), 0x18uLL)), (int8x16_t)vmovl_u16(*(uint16x4_t *)v22.i8));
      v95[1] = vorrq_s8(vorrq_s8(vorrq_s8(_Q18, (int8x16_t)vshll_high_n_u16(v19, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v10), 0x18uLL)), (int8x16_t)vmovl_high_u16(v22));
      v94[0] = vorrq_s8(v21, (int8x16_t)vmovl_u16(*(uint16x4_t *)v99.val[0].i8));
      v94[1] = vorrq_s8(vorrq_s8(vorrq_s8(_Q19, (int8x16_t)vshll_high_n_u16(v20, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v9), 0x18uLL)), (int8x16_t)vmovl_high_u16((uint16x8_t)v99.val[0]));
      do
      {
        HIDWORD(v23) = *(_DWORD *)((char *)v95 + v8) ^ *(_DWORD *)((char *)&v95[1] + v8 + 4) ^ *(_DWORD *)((char *)v94 + v8 + 8) ^ *(_DWORD *)((char *)v94 + v8);
        LODWORD(v23) = HIDWORD(v23);
        *(_DWORD *)((char *)&v95[2] + v8) = v23 >> 31;
        v8 += 4;
      }
      while (v8 != 256);
      v24 = -5;
      v25 = (_DWORD *)v94 + 2;
      v26 = v7;
      v27 = v6;
      v28 = v5;
      v29 = v4;
      v30 = v3;
      do
      {
        HIDWORD(v31) = v30;
        LODWORD(v31) = v30;
        v32 = (v31 >> 27) + v26 + 1518500249 + (v28 & v29 | v27 & ~v29) + *(v25 - 2);
        HIDWORD(v31) = v29;
        LODWORD(v31) = v29;
        v33 = v31 >> 2;
        v34 = __PAIR64__(v32, __ROR4__(v29, 2));
        v35 = v30 & v34 | v28 & ~v30;
        LODWORD(v34) = v32;
        v36 = v27 + 1518500249 + v35 + *(v25 - 1) + (v34 >> 27);
        HIDWORD(v34) = v30;
        LODWORD(v34) = v30;
        v37 = v34 >> 2;
        v38 = __PAIR64__(v36, __ROR4__(v30, 2));
        v39 = v32 & v38 | v33 & ~v32;
        LODWORD(v38) = v36;
        v40 = v28 + 1518500249 + *v25 + v39 + (v38 >> 27);
        HIDWORD(v38) = v32;
        LODWORD(v38) = v32;
        v26 = v38 >> 2;
        v41 = __PAIR64__(v40, __ROR4__(v32, 2));
        v42 = v36 & v41 | v37 & ~v36;
        LODWORD(v41) = v40;
        v29 = v33 + 1518500249 + v25[1] + v42 + (v41 >> 27);
        HIDWORD(v41) = v36;
        LODWORD(v41) = v36;
        v27 = v41 >> 2;
        HIDWORD(v41) = v29;
        LODWORD(v41) = v29;
        v43 = v41 >> 27;
        v44 = __PAIR64__(v40, __ROR4__(v36, 2));
        v30 = v37 + 1518500249 + v25[2] + (v40 & v44 | v26 & ~v40) + v43;
        LODWORD(v44) = v40;
        v28 = v44 >> 2;
        v24 += 5;
        v25 += 5;
      }
      while (v24 < 0xF);
      --a2;
      v45 = (int *)&v96;
      for (i = 15; i < 0x23; i += 5)
      {
        HIDWORD(v47) = v30;
        LODWORD(v47) = v30;
        v48 = (v47 >> 27) + 1859775393 + (v28 ^ v29 ^ v27) + v26 + *(v45 - 4);
        HIDWORD(v47) = v29;
        LODWORD(v47) = v29;
        v49 = v47 >> 2;
        HIDWORD(v47) = v48;
        LODWORD(v47) = v48;
        v50 = v47 >> 27;
        v51 = __PAIR64__(v30, __ROR4__(v29, 2));
        v52 = v27 + 1859775393 + (v30 ^ v51 ^ v28) + *(v45 - 3) + v50;
        LODWORD(v51) = v30;
        v53 = v51 >> 2;
        HIDWORD(v51) = v52;
        LODWORD(v51) = v52;
        v54 = v51 >> 27;
        v55 = __PAIR64__(v48, __ROR4__(v30, 2));
        v56 = v28 + 1859775393 + *(v45 - 2) + (v49 ^ v55 ^ v48) + v54;
        LODWORD(v55) = v48;
        v26 = v55 >> 2;
        HIDWORD(v55) = v56;
        LODWORD(v55) = v56;
        v57 = v55 >> 27;
        v58 = __PAIR64__(v52, __ROR4__(v30, 2));
        v29 = v49 + 1859775393 + *(v45 - 1) + (v26 ^ v58 ^ v52) + v57;
        LODWORD(v58) = v52;
        v27 = v58 >> 2;
        HIDWORD(v58) = v29;
        LODWORD(v58) = v29;
        v59 = v58 >> 27;
        v60 = __PAIR64__(v56, __ROR4__(v48, 2));
        v61 = *v45;
        v45 += 5;
        v30 = v53 + 1859775393 + v61 + (v27 ^ v60 ^ v56) + v59;
        LODWORD(v60) = v56;
        v28 = v60 >> 2;
      }
      v62 = (int *)&v97;
      v63 = 35;
      do
      {
        HIDWORD(v65) = v30;
        LODWORD(v65) = v30;
        v64 = v65 >> 27;
        HIDWORD(v65) = v29;
        LODWORD(v65) = v29;
        v66 = v65 >> 2;
        v67 = v64 + v26 - 1894007588 + (v27 & (v28 | v29) | v28 & v29) + *(v62 - 4);
        HIDWORD(v65) = v67;
        LODWORD(v65) = v67;
        v68 = v65 >> 27;
        v69 = __PAIR64__(v30, __ROR4__(v29, 2));
        v70 = (v30 | v69) & v28 | v30 & __ROR4__(v29, 2);
        LODWORD(v69) = v30;
        v71 = v69 >> 2;
        v72 = v27 - 1894007588 + v70 + *(v62 - 3) + v68;
        HIDWORD(v69) = v72;
        LODWORD(v69) = v72;
        v73 = v28
            - 1894007588
            + *(v62 - 2)
            + ((v67 | __ROR4__(v30, 2)) & __ROR4__(v29, 2) | v67 & __ROR4__(v30, 2))
            + (v69 >> 27);
        HIDWORD(v69) = v73;
        LODWORD(v69) = v73;
        v29 = v66
            - 1894007588
            + *(v62 - 1)
            + ((v72 | __ROR4__(v67, 2)) & __ROR4__(v30, 2) | v72 & __ROR4__(v67, 2))
            + (v69 >> 27);
        v74 = __PAIR64__(v67, __ROR4__(v67, 2));
        v75 = (v73 | __ROR4__(v72, 2)) & v74 | v73 & __ROR4__(v72, 2);
        v76 = *v62;
        v62 += 5;
        LODWORD(v74) = v67;
        v26 = v74 >> 2;
        HIDWORD(v74) = v72;
        LODWORD(v74) = v72;
        v27 = v74 >> 2;
        HIDWORD(v74) = v29;
        LODWORD(v74) = v29;
        v30 = v71 - 1894007588 + v76 + v75 + (v74 >> 27);
        v63 += 5;
        HIDWORD(v74) = v73;
        LODWORD(v74) = v73;
        v28 = v74 >> 2;
      }
      while (v63 < 0x37);
      v77 = (int *)v98;
      for (j = 55; j < 0x4B; j += 5)
      {
        HIDWORD(v79) = v30;
        LODWORD(v79) = v30;
        v80 = (v79 >> 27) - 899497514 + (v28 ^ v29 ^ v27) + v26 + *(v77 - 4);
        HIDWORD(v79) = v29;
        LODWORD(v79) = v29;
        v81 = v79 >> 2;
        HIDWORD(v79) = v80;
        LODWORD(v79) = v80;
        v82 = v79 >> 27;
        v83 = __PAIR64__(v30, __ROR4__(v29, 2));
        v84 = v27 - 899497514 + (v30 ^ v83 ^ v28) + *(v77 - 3) + v82;
        LODWORD(v83) = v30;
        v85 = v83 >> 2;
        HIDWORD(v83) = v84;
        LODWORD(v83) = v84;
        v86 = v83 >> 27;
        v87 = __PAIR64__(v80, __ROR4__(v30, 2));
        v88 = v28 - 899497514 + *(v77 - 2) + (v81 ^ v87 ^ v80) + v86;
        LODWORD(v87) = v80;
        v26 = v87 >> 2;
        HIDWORD(v87) = v88;
        LODWORD(v87) = v88;
        v89 = v87 >> 27;
        v90 = __PAIR64__(v84, __ROR4__(v30, 2));
        v29 = v81 - 899497514 + *(v77 - 1) + (v26 ^ v90 ^ v84) + v89;
        LODWORD(v90) = v84;
        v27 = v90 >> 2;
        HIDWORD(v90) = v29;
        LODWORD(v90) = v29;
        v91 = v90 >> 27;
        v92 = __PAIR64__(v88, __ROR4__(v80, 2));
        v93 = *v77;
        v77 += 5;
        v30 = v85 - 899497514 + v93 + (v27 ^ v92 ^ v88) + v91;
        LODWORD(v92) = v88;
        v28 = v92 >> 2;
      }
      v3 += v30;
      v4 += v29;
      *result = v3;
      result[1] = v4;
      v5 += v28;
      v6 += v27;
      result[2] = v5;
      result[3] = v6;
      v7 += v26;
      a3 += 64;
      result[4] = v7;
    }
    while (a2);
  }
  return result;
}

uint64_t ccaes_ecb_decrypt(_DWORD *a1, uint64_t a2, _DWORD *a3, int *a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int *v8;
  int i;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  _DWORD *v16;

  if (a2)
  {
    while (1)
    {
      v4 = a1[61] ^ *a3;
      v5 = a1[62] ^ a3[1];
      v6 = a1[63] ^ a3[2];
      v7 = a1[64] ^ a3[3];
      v8 = a1 + 72;
      for (i = (a1[121] >> 5) - 1; ; --i)
      {
        v10 = TD1[BYTE1(v7)] ^ TD0[v4] ^ TD2[BYTE2(v6)] ^ TD3[HIBYTE(v5)] ^ *(v8 - 7);
        v11 = TD1[BYTE1(v4)] ^ TD0[v5] ^ TD2[BYTE2(v7)] ^ TD3[HIBYTE(v6)] ^ *(v8 - 6);
        v12 = TD1[BYTE1(v5)] ^ TD0[v6] ^ TD2[BYTE2(v4)] ^ TD3[HIBYTE(v7)] ^ *(v8 - 5);
        v13 = TD1[BYTE1(v6)] ^ TD0[v7] ^ TD2[BYTE2(v5)] ^ TD3[HIBYTE(v4)] ^ *(v8 - 4);
        if (!i)
          break;
        v4 = TD1[BYTE1(v13)] ^ TD0[v10] ^ TD2[BYTE2(v12)] ^ TD3[HIBYTE(v11)] ^ *(v8 - 3);
        v5 = TD1[BYTE1(v10)] ^ TD0[v11] ^ TD2[BYTE2(v13)] ^ TD3[HIBYTE(v12)] ^ *(v8 - 2);
        v14 = *(v8 - 1);
        v15 = *v8;
        v8 += 8;
        v6 = TD1[BYTE1(v11)] ^ TD0[v12] ^ TD2[BYTE2(v10)] ^ TD3[HIBYTE(v13)] ^ v14;
        v7 = TD1[BYTE1(v12)] ^ TD0[v13] ^ TD2[BYTE2(v11)] ^ TD3[HIBYTE(v10)] ^ v15;
      }
      v16 = &a1[8 * ((a1[121] >> 5) - 1)];
      *a4 = (Td4[4 * v10] | (Td4[4 * BYTE1(v13) + 1] << 8) | (Td4[4 * BYTE2(v12) + 2] << 16) | (Td4[4 * HIBYTE(v11) + 3] << 24)) ^ v16[69];
      a4[1] = (Td4[4 * v11] | (Td4[4 * BYTE1(v10) + 1] << 8) | (Td4[4 * BYTE2(v13) + 2] << 16) | (Td4[4 * HIBYTE(v12) + 3] << 24)) ^ v16[70];
      a4[2] = (Td4[4 * v12] | (Td4[4 * BYTE1(v11) + 1] << 8) | (Td4[4 * BYTE2(v10) + 2] << 16) | (Td4[4 * HIBYTE(v13) + 3] << 24)) ^ v16[71];
      a4[3] = (Td4[4 * v13] | (Td4[4 * BYTE1(v12) + 1] << 8) | (Td4[4 * BYTE2(v11) + 2] << 16) | (Td4[4 * HIBYTE(v10) + 3] << 24)) ^ v16[72];
      if (!--a2)
        break;
      a4 += 4;
      a3 += 4;
    }
  }
  return 0;
}

int8x16_t *ccaes_xts_decrypt_vng_vector(int8x16_t *result, uint64_t a2, int64x2_t *a3, uint64_t a4, int8x16_t *a5)
{
  int8x16_t v5;
  unsigned __int32 v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int64x2_t v25;
  BOOL v26;
  uint64_t i;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v37;
  int8x16_t v38;
  int64x2_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int64x2_t v62;
  int8x16_t v64;
  int8x16_t v65;
  int64x2_t v82;
  int8x16_t v84;
  int8x16_t v85;
  int64x2_t v102;
  int8x16_t v104;
  int8x16_t v105;
  int64x2_t v122;
  int8x16_t v124;
  int8x16_t v125;
  int64x2_t v142;
  int8x16_t v144;
  int8x16_t v145;
  int64x2_t v162;
  int8x16_t v164;
  int8x16_t v165;
  uint64_t v183;
  int8x16_t *v208;
  int8x16_t *v209;
  uint64_t j;
  int8x16_t v211;
  uint64_t v213;
  int64x2_t v217;
  int8x16_t v218;
  int8x16_t v219;
  int8x16_t v220;
  int8x16_t v221;
  int8x16_t v222;
  int8x16_t v223;
  int8x16_t v224;

  v6 = a5[15].u32[0];
  v7 = veorq_s8(v5, v5);
  v7.i64[0] = 134;
  v8 = *a5;
  v217 = *a3;
  v9 = (int8x16_t)vshrq_n_u64((uint64x2_t)v217, 0x3FuLL);
  v10 = (int8x16_t)vshrq_n_s64(v217, 0x3FuLL);
  v218 = veorq_s8(vorrq_s8(vextq_s8(v9, v9, 8uLL), (int8x16_t)vshlq_n_s64(v217, 1uLL)), vandq_s8(vextq_s8(v10, v10, 0xFuLL), v7));
  v11 = (int8x16_t)vshrq_n_u64((uint64x2_t)v218, 0x3FuLL);
  v12 = (int8x16_t)vshrq_n_s64((int64x2_t)v218, 0x3FuLL);
  v219 = veorq_s8(vorrq_s8(vextq_s8(v11, v11, 8uLL), (int8x16_t)vshlq_n_s64((int64x2_t)v218, 1uLL)), vandq_s8(vextq_s8(v12, v12, 0xFuLL), v7));
  v13 = (int8x16_t)vshrq_n_u64((uint64x2_t)v219, 0x3FuLL);
  v14 = (int8x16_t)vshrq_n_s64((int64x2_t)v219, 0x3FuLL);
  v220 = veorq_s8(vorrq_s8(vextq_s8(v13, v13, 8uLL), (int8x16_t)vshlq_n_s64((int64x2_t)v219, 1uLL)), vandq_s8(vextq_s8(v14, v14, 0xFuLL), v7));
  v15 = (int8x16_t)vshrq_n_u64((uint64x2_t)v220, 0x3FuLL);
  v16 = (int8x16_t)vshrq_n_s64((int64x2_t)v220, 0x3FuLL);
  v221 = veorq_s8(vorrq_s8(vextq_s8(v15, v15, 8uLL), (int8x16_t)vshlq_n_s64((int64x2_t)v220, 1uLL)), vandq_s8(vextq_s8(v16, v16, 0xFuLL), v7));
  v17 = (int8x16_t)vshrq_n_u64((uint64x2_t)v221, 0x3FuLL);
  v18 = (int8x16_t)vshrq_n_s64((int64x2_t)v221, 0x3FuLL);
  v222 = veorq_s8(vorrq_s8(vextq_s8(v17, v17, 8uLL), (int8x16_t)vshlq_n_s64((int64x2_t)v221, 1uLL)), vandq_s8(vextq_s8(v18, v18, 0xFuLL), v7));
  v19 = (int8x16_t)vshrq_n_u64((uint64x2_t)v222, 0x3FuLL);
  v20 = (int8x16_t)vshrq_n_s64((int64x2_t)v222, 0x3FuLL);
  v223 = veorq_s8(vorrq_s8(vextq_s8(v19, v19, 8uLL), (int8x16_t)vshlq_n_s64((int64x2_t)v222, 1uLL)), vandq_s8(vextq_s8(v20, v20, 0xFuLL), v7));
  v21 = (int8x16_t)vshrq_n_u64((uint64x2_t)v223, 0x3FuLL);
  v22 = (int8x16_t)vshrq_n_s64((int64x2_t)v223, 0x3FuLL);
  v224 = veorq_s8(vorrq_s8(vextq_s8(v21, v21, 8uLL), (int8x16_t)vshlq_n_s64((int64x2_t)v223, 1uLL)), vandq_s8(vextq_s8(v22, v22, 0xFuLL), v7));
  v23 = (int8x16_t)vshrq_n_u64((uint64x2_t)v224, 0x3FuLL);
  v24 = (int8x16_t)vshrq_n_s64((int64x2_t)v224, 0x3FuLL);
  v25 = (int64x2_t)veorq_s8(vorrq_s8(vextq_s8(v23, v23, 8uLL), (int8x16_t)vshlq_n_s64((int64x2_t)v224, 1uLL)), vandq_s8(vextq_s8(v24, v24, 0xFuLL), v7));
  v26 = a4 < 8;
  for (i = a4 - 8; !v26; i -= 8)
  {
    v28 = (int8x16_t)v217;
    v29 = v218;
    v30 = v219;
    v31 = v220;
    v32 = v221;
    v33 = v222;
    v34 = v223;
    v35 = v224;
    a2 += 128;
    _Q16 = *(__int128 *)((char *)a5 + v6);
    v217 = v25;
    v37 = (int8x16_t)vshrq_n_u64((uint64x2_t)v25, 0x3FuLL);
    v38 = (int8x16_t)vshrq_n_s64(v25, 0x3FuLL);
    v39 = (int64x2_t)veorq_s8(vorrq_s8(vextq_s8(v37, v37, 8uLL), (int8x16_t)vshlq_n_s64(v25, 1uLL)), vandq_s8(vextq_s8(v38, v38, 0xFuLL), v7));
    v40 = (int8x16_t)vshrq_n_u64((uint64x2_t)v39, 0x3FuLL);
    v41 = (int8x16_t)vshrq_n_s64(v39, 0x3FuLL);
    v218 = (int8x16_t)v39;
    __asm
    {
      AESD            V0.16B, V16.16B
      AESIMC          V0.16B, V0.16B
      AESD            V1.16B, V16.16B
      AESIMC          V1.16B, V1.16B
      AESD            V2.16B, V16.16B
      AESIMC          V2.16B, V2.16B
      AESD            V3.16B, V16.16B
      AESIMC          V3.16B, V3.16B
      AESD            V4.16B, V16.16B
      AESIMC          V4.16B, V4.16B
      AESD            V5.16B, V16.16B
      AESIMC          V5.16B, V5.16B
      AESD            V6.16B, V16.16B
      AESIMC          V6.16B, V6.16B
      AESD            V7.16B, V16.16B
      AESIMC          V7.16B, V7.16B
    }
    v62 = (int64x2_t)veorq_s8(vorrq_s8(vextq_s8(v40, v40, 8uLL), (int8x16_t)vshlq_n_s64(v39, 1uLL)), vandq_s8(vextq_s8(v41, v41, 0xFuLL), v7));
    _Q16 = *(__int128 *)((char *)&a5[-1] + v6);
    v64 = (int8x16_t)vshrq_n_u64((uint64x2_t)v62, 0x3FuLL);
    v65 = (int8x16_t)vshrq_n_s64(v62, 0x3FuLL);
    v219 = (int8x16_t)v62;
    __asm
    {
      AESD            V0.16B, V16.16B
      AESIMC          V0.16B, V0.16B
      AESD            V1.16B, V16.16B
      AESIMC          V1.16B, V1.16B
      AESD            V2.16B, V16.16B
      AESIMC          V2.16B, V2.16B
      AESD            V3.16B, V16.16B
      AESIMC          V3.16B, V3.16B
      AESD            V4.16B, V16.16B
      AESIMC          V4.16B, V4.16B
      AESD            V5.16B, V16.16B
      AESIMC          V5.16B, V5.16B
      AESD            V6.16B, V16.16B
      AESIMC          V6.16B, V6.16B
      AESD            V7.16B, V16.16B
      AESIMC          V7.16B, V7.16B
    }
    v82 = (int64x2_t)veorq_s8(vorrq_s8(vextq_s8(v64, v64, 8uLL), (int8x16_t)vshlq_n_s64(v62, 1uLL)), vandq_s8(vextq_s8(v65, v65, 0xFuLL), v7));
    _Q16 = *(__int128 *)((char *)&a5[-2] + v6);
    v84 = (int8x16_t)vshrq_n_u64((uint64x2_t)v82, 0x3FuLL);
    v85 = (int8x16_t)vshrq_n_s64(v82, 0x3FuLL);
    v220 = (int8x16_t)v82;
    __asm
    {
      AESD            V0.16B, V16.16B
      AESIMC          V0.16B, V0.16B
      AESD            V1.16B, V16.16B
      AESIMC          V1.16B, V1.16B
      AESD            V2.16B, V16.16B
      AESIMC          V2.16B, V2.16B
      AESD            V3.16B, V16.16B
      AESIMC          V3.16B, V3.16B
      AESD            V4.16B, V16.16B
      AESIMC          V4.16B, V4.16B
      AESD            V5.16B, V16.16B
      AESIMC          V5.16B, V5.16B
      AESD            V6.16B, V16.16B
      AESIMC          V6.16B, V6.16B
      AESD            V7.16B, V16.16B
      AESIMC          V7.16B, V7.16B
    }
    v102 = (int64x2_t)veorq_s8(vorrq_s8(vextq_s8(v84, v84, 8uLL), (int8x16_t)vshlq_n_s64(v82, 1uLL)), vandq_s8(vextq_s8(v85, v85, 0xFuLL), v7));
    _Q16 = *(__int128 *)((char *)&a5[-3] + v6);
    v104 = (int8x16_t)vshrq_n_u64((uint64x2_t)v102, 0x3FuLL);
    v105 = (int8x16_t)vshrq_n_s64(v102, 0x3FuLL);
    v221 = (int8x16_t)v102;
    __asm
    {
      AESD            V0.16B, V16.16B
      AESIMC          V0.16B, V0.16B
      AESD            V1.16B, V16.16B
      AESIMC          V1.16B, V1.16B
      AESD            V2.16B, V16.16B
      AESIMC          V2.16B, V2.16B
      AESD            V3.16B, V16.16B
      AESIMC          V3.16B, V3.16B
      AESD            V4.16B, V16.16B
      AESIMC          V4.16B, V4.16B
      AESD            V5.16B, V16.16B
      AESIMC          V5.16B, V5.16B
      AESD            V6.16B, V16.16B
      AESIMC          V6.16B, V6.16B
      AESD            V7.16B, V16.16B
      AESIMC          V7.16B, V7.16B
    }
    v122 = (int64x2_t)veorq_s8(vorrq_s8(vextq_s8(v104, v104, 8uLL), (int8x16_t)vshlq_n_s64(v102, 1uLL)), vandq_s8(vextq_s8(v105, v105, 0xFuLL), v7));
    _Q16 = *(__int128 *)((char *)&a5[-4] + v6);
    v124 = (int8x16_t)vshrq_n_u64((uint64x2_t)v122, 0x3FuLL);
    v125 = (int8x16_t)vshrq_n_s64(v122, 0x3FuLL);
    v222 = (int8x16_t)v122;
    __asm
    {
      AESD            V0.16B, V16.16B
      AESIMC          V0.16B, V0.16B
      AESD            V1.16B, V16.16B
      AESIMC          V1.16B, V1.16B
      AESD            V2.16B, V16.16B
      AESIMC          V2.16B, V2.16B
      AESD            V3.16B, V16.16B
      AESIMC          V3.16B, V3.16B
      AESD            V4.16B, V16.16B
      AESIMC          V4.16B, V4.16B
      AESD            V5.16B, V16.16B
      AESIMC          V5.16B, V5.16B
      AESD            V6.16B, V16.16B
      AESIMC          V6.16B, V6.16B
      AESD            V7.16B, V16.16B
      AESIMC          V7.16B, V7.16B
    }
    v142 = (int64x2_t)veorq_s8(vorrq_s8(vextq_s8(v124, v124, 8uLL), (int8x16_t)vshlq_n_s64(v122, 1uLL)), vandq_s8(vextq_s8(v125, v125, 0xFuLL), v7));
    _Q16 = *(__int128 *)((char *)&a5[-5] + v6);
    v144 = (int8x16_t)vshrq_n_u64((uint64x2_t)v142, 0x3FuLL);
    v145 = (int8x16_t)vshrq_n_s64(v142, 0x3FuLL);
    v223 = (int8x16_t)v142;
    __asm
    {
      AESD            V0.16B, V16.16B
      AESIMC          V0.16B, V0.16B
      AESD            V1.16B, V16.16B
      AESIMC          V1.16B, V1.16B
      AESD            V2.16B, V16.16B
      AESIMC          V2.16B, V2.16B
      AESD            V3.16B, V16.16B
      AESIMC          V3.16B, V3.16B
      AESD            V4.16B, V16.16B
      AESIMC          V4.16B, V4.16B
      AESD            V5.16B, V16.16B
      AESIMC          V5.16B, V5.16B
      AESD            V6.16B, V16.16B
      AESIMC          V6.16B, V6.16B
      AESD            V7.16B, V16.16B
      AESIMC          V7.16B, V7.16B
    }
    v162 = (int64x2_t)veorq_s8(vorrq_s8(vextq_s8(v144, v144, 8uLL), (int8x16_t)vshlq_n_s64(v142, 1uLL)), vandq_s8(vextq_s8(v145, v145, 0xFuLL), v7));
    _Q16 = *(__int128 *)((char *)&a5[-6] + v6);
    v164 = (int8x16_t)vshrq_n_u64((uint64x2_t)v162, 0x3FuLL);
    v165 = (int8x16_t)vshrq_n_s64(v162, 0x3FuLL);
    v224 = (int8x16_t)v162;
    __asm
    {
      AESD            V0.16B, V16.16B
      AESIMC          V0.16B, V0.16B
      AESD            V1.16B, V16.16B
      AESIMC          V1.16B, V1.16B
      AESD            V2.16B, V16.16B
      AESIMC          V2.16B, V2.16B
      AESD            V3.16B, V16.16B
      AESIMC          V3.16B, V3.16B
      AESD            V4.16B, V16.16B
      AESIMC          V4.16B, V4.16B
      AESD            V5.16B, V16.16B
      AESIMC          V5.16B, V5.16B
      AESD            V6.16B, V16.16B
      AESIMC          V6.16B, V6.16B
      AESD            V7.16B, V16.16B
      AESIMC          V7.16B, V7.16B
    }
    v25 = (int64x2_t)veorq_s8(vorrq_s8(vextq_s8(v164, v164, 8uLL), (int8x16_t)vshlq_n_s64(v162, 1uLL)), vandq_s8(vextq_s8(v165, v165, 0xFuLL), v7));
    _Q16 = *(__int128 *)((char *)&a5[-7] + v6);
    v183 = v6 - 128;
    do
    {
      __asm
      {
        AESD            V0.16B, V16.16B
        AESIMC          V0.16B, V0.16B
        AESD            V1.16B, V16.16B
        AESIMC          V1.16B, V1.16B
        AESD            V2.16B, V16.16B
        AESIMC          V2.16B, V2.16B
        AESD            V3.16B, V16.16B
        AESIMC          V3.16B, V3.16B
        AESD            V4.16B, V16.16B
        AESIMC          V4.16B, V4.16B
        AESD            V5.16B, V16.16B
        AESIMC          V5.16B, V5.16B
        AESD            V6.16B, V16.16B
        AESIMC          V6.16B, V6.16B
        AESD            V7.16B, V16.16B
        AESIMC          V7.16B, V7.16B
      }
      _Q16 = *(__int128 *)((char *)a5 + v183);
      v26 = v183 <= 16;
      v183 -= 16;
    }
    while (!v26);
    __asm
    {
      AESD            V0.16B, V16.16B
      AESD            V1.16B, V16.16B
      AESD            V2.16B, V16.16B
      AESD            V3.16B, V16.16B
      AESD            V4.16B, V16.16B
      AESD            V5.16B, V16.16B
      AESD            V6.16B, V16.16B
      AESD            V7.16B, V16.16B
    }
    *result = veorq_s8(veorq_s8(_Q0, v8), v28);
    result[1] = veorq_s8(veorq_s8(_Q1, v8), v29);
    result[2] = veorq_s8(veorq_s8(_Q2, v8), v30);
    result[3] = veorq_s8(veorq_s8(_Q3, v8), v31);
    v208 = result + 4;
    *v208 = veorq_s8(veorq_s8(_Q4, v8), v32);
    v208[1] = veorq_s8(veorq_s8(_Q5, v8), v33);
    v208[2] = veorq_s8(veorq_s8(_Q6, v8), v34);
    v208[3] = veorq_s8(veorq_s8(_Q7, v8), v35);
    result = v208 + 4;
    v26 = i < 8;
  }
  v209 = (int8x16_t *)&v217;
  v26 = i < -7;
  for (j = i + 7; !v26; --j)
  {
    v211 = *v209++;
    a2 += 16;
    _Q16 = *(__int128 *)((char *)a5 + v6);
    v213 = v6 - 16;
    do
    {
      __asm
      {
        AESD            V0.16B, V16.16B
        AESIMC          V0.16B, V0.16B
      }
      _Q16 = *(__int128 *)((char *)a5 + v213);
      v26 = v213 <= 16;
      v213 -= 16;
    }
    while (!v26);
    __asm { AESD            V0.16B, V16.16B }
    *result++ = veorq_s8(veorq_s8(_Q0, v8), v211);
    v26 = j < 1;
  }
  *a3 = *(int64x2_t *)v209;
  return result;
}

uint64_t cccmac_update(_QWORD *a1, unint64_t a2, char *__src)
{
  char *v3;
  unint64_t v4;
  char v6;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  char v19;
  _BYTE v20[256];
  uint64_t v21;

  v3 = __src;
  v4 = a2;
  v6 = 0;
  v21 = *MEMORY[0x1E0C874D8];
  v19 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v12 = 0;
  v19 = v6;
  if (a2 && __src)
  {
    v13 = a1[6];
    if (16 - v13 >= a2)
      v14 = a2;
    else
      v14 = 16 - v13;
    if (v13 <= 0x10)
    {
      v15 = (_QWORD *)a1[8];
      if (v13)
      {
        memcpy((char *)a1 + v13 + 32, __src, v14);
        a1[6] += v14;
        v4 -= v14;
        if (!v4)
        {
          v12 = 0;
          goto LABEL_23;
        }
        v3 += v14;
        cccbc_update((uint64_t)v15, (uint64_t)(a1 + 9), (uint64_t)a1 + *v15 + 72, 1, (uint64_t)(a1 + 4), (uint64_t)v20);
        a1[7] += 16;
      }
      if (v4 >= 0x11)
      {
        v16 = (v4 - 1) >> 4;
        do
        {
          if (v16 >= 0x10)
            v17 = 16;
          else
            v17 = v16;
          cccbc_update((uint64_t)v15, (uint64_t)(a1 + 9), (uint64_t)a1 + *v15 + 72, v17, (uint64_t)v3, (uint64_t)v20);
          v3 += 16 * v17;
          v16 -= v17;
        }
        while (v16);
      }
      __memcpy_chk();
      v12 = 0;
      a1[6] = v4 - ((v4 - 1) & 0xFFFFFFFFFFFFFFF0);
    }
    else
    {
      v12 = 0xFFFFFFFFLL;
    }
  }
LABEL_23:
  cc_disable_dit(&v19);
  return v12;
}

_BYTE *ccmode_factory_ofb_crypt(_QWORD *a1, _QWORD *a2)
{
  char v2;
  char v9;

  v2 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v9 = v2;
  *a1 = ((a2[1] + 7) & 0xFFFFFFFFFFFFFFF8) + ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  a1[1] = 1;
  a1[2] = ccmode_ofb_init;
  a1[3] = ccmode_ofb_crypt;
  a1[4] = a2;
  return cc_disable_dit(&v9);
}

uint64_t ccrsa_decrypt_oaep_ws(uint64_t a1, uint64_t *a2, uint64_t *a3, size_t *a4, void *a5, unint64_t a6, unsigned __int8 *a7, size_t a8, char *a9)
{
  uint64_t *v17;

  v17 = ccrng(0);
  if (v17)
    return ccrsa_decrypt_oaep_blinded_ws(a1, (uint64_t (**)(_QWORD, uint64_t, uint64_t))v17, a2, a3, a4, a5, a6, a7, a8, a9);
  else
    return 0xFFFFFFFFLL;
}

uint64_t ccrsa_decrypt_oaep(uint64_t *a1, uint64_t *a2, size_t *a3, void *a4, unint64_t a5, unsigned __int8 *a6, size_t a7, char *a8)
{
  char v14;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD v37[4];
  void (*v38)(uint64_t);
  char v39;

  v14 = 0;
  v39 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v14 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v14 = 1;
    }
  }
  v39 = v14;
  v20 = *a1;
  v21 = sizeof_struct_ccrns_mul_modulus();
  v22 = sizeof_struct_ccpolyzp_po2cyc();
  v23 = (v21 + v22 - 1) / v22 + 11 * v20;
  v24 = CCRSA_CRT_POWER_BLINDED_WORKSPACE_N(v20);
  if (v23 + 1 > v24)
    v25 = v23 + 1;
  else
    v25 = v24;
  v26 = cc_malloc_clear(8 * (v25 + 3 * v20));
  v37[0] = v26;
  v27 = *a1;
  v28 = sizeof_struct_ccrns_mul_modulus();
  v29 = sizeof_struct_ccpolyzp_po2cyc();
  v30 = (v28 + v29 - 1) / v29 + 11 * v27;
  v31 = CCRSA_CRT_POWER_BLINDED_WORKSPACE_N(v27);
  if (v30 + 1 > v31)
    v32 = v30 + 1;
  else
    v32 = v31;
  v37[1] = v32 + 3 * v27;
  v37[2] = 0;
  v37[3] = cc_ws_alloc;
  v38 = cc_ws_free;
  if (v26)
  {
    v33 = ccrsa_decrypt_oaep_ws((uint64_t)v37, a1, a2, a3, a4, a5, a6, a7, a8);
    v38((uint64_t)v37);
  }
  else
  {
    v33 = 4294967283;
  }
  cc_disable_dit(&v39);
  return v33;
}

uint64_t ccder_blob_decode_tl_strict(unsigned __int8 **a1, uint64_t a2, unint64_t *a3)
{
  return ccder_blob_decode_tl_internal(a1, a2, a3, 1);
}

int64x2_t *ccaes_xts_encrypt_vng_wrapper(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, int8x16_t *a5)
{
  unint64_t v5;
  int64x2_t *v6;

  v5 = *a2 + a3;
  if (v5 > 0x100000)
    return 0;
  *a2 = v5;
  v6 = (int64x2_t *)(a2 + 1);
  if (a3)
    ccaes_xts_encrypt_vng_vector(a5, a4, v6, a3, (__int128 *)(a1 + 16));
  return v6;
}

_BYTE *ccz_subi(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v3;
  _QWORD v10[4];
  char v11;
  _QWORD v12[2];

  v3 = 0;
  v12[1] = *MEMORY[0x1E0C874D8];
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v11 = v3;
  v12[0] = a3;
  v10[0] = 1;
  v10[1] = 0;
  v10[3] = v12;
  v10[2] = 1;
  ccz_sub(a1, a2, (uint64_t)v10);
  return cc_disable_dit(&v11);
}

uint64_t ccctr_block_size(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *(_QWORD *)(a1 + 8);
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccctr_one_shot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v11;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE v21[7];
  char v22;
  uint64_t v23;

  v11 = 0;
  v23 = *MEMORY[0x1E0C874D8];
  v22 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v11 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v11 = 1;
    }
  }
  v22 = v11;
  MEMORY[0x1E0C86820](a1, a2, a2, a3);
  v18 = &v21[-v17];
  v19 = (*(uint64_t (**)(uint64_t, _BYTE *))(a1 + 24))(a1, &v21[-v17]);
  if (!(_DWORD)v19)
    v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(a1 + 40))(v18, a5, a6, a7);
  cc_clear(*(_QWORD *)a1, v18);
  cc_disable_dit(&v22);
  return v19;
}

uint64_t ccn_lcm_ws(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v10;
  int8x16_t *v11;
  unint64_t v12;
  uint64_t result;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int8x16_t *)(*(uint64_t (**)(void))(a1 + 24))();
  v12 = ccn_gcd_ws(a1, a2, v11->i64, a2, a4, a2, a5);
  ccn_div_exact_ws(a1, a2, v11->i8, (uint64_t *)a5, v11);
  ccn_shift_right_multi(a2, v11, v11, v12);
  result = ccn_mul_ws(a1, a2, a3, (uint64_t)a4, (uint64_t)v11);
  *(_QWORD *)(a1 + 16) = v10;
  return result;
}

uint64_t ccecies_encrypt_gcm_setup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, int a7)
{
  char v7;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  char v18;

  v7 = 0;
  v18 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v7 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v7 = 1;
    }
  }
  v18 = v7;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 28) = a6;
  *(_DWORD *)(a1 + 32) = a7;
  *(_DWORD *)(a1 + 24) = a5;
  if ((a6 - 17) >= 0xFFFFFFFB)
    v13 = 0;
  else
    v13 = -5;
  if (((1 << a5) & 0x101010000) != 0)
    v14 = v13;
  else
    v14 = -5;
  if (a5 <= 0x20)
    v15 = v14;
  else
    v15 = -5;
  if (*(_DWORD *)(a4 + 8) == 4073947)
    v16 = v15;
  else
    v16 = 4294967291;
  cc_disable_dit(&v18);
  return v16;
}

uint64_t ccecies_decrypt_gcm_decrypt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  _BYTE v26[16];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C874D8];
  v7 = *(_QWORD *)(a1 + 16);
  MEMORY[0x1E0C86820](a1, a2, *(unsigned int *)(a1 + 24), a2);
  v15 = &v26[-v14 - 8];
  if (*(_DWORD *)(v7 + 8) != 78647)
    return 4294967291;
  v16 = v10;
  v17 = v11;
  v18 = v13;
  v25 = v12;
  v19 = v9 + v8;
  v20 = ccgcm_init(v7);
  v21 = ccgcm_set_iv(v7, (uint64_t)v15, 16, v19) | v20;
  if (a3 && a4)
    v21 |= ccgcm_aad(v7, (uint64_t)v15, a3, a4);
  v22 = ccgcm_update(v7, (uint64_t)v15, v16, v17, v18) | v21;
  if (!(_DWORD)v22)
  {
    v23 = *(unsigned int *)(a1 + 28);
    __memcpy_chk();
    v22 = ccgcm_finalize(v7, (uint64_t)v15, v23, (uint64_t)v26);
  }
  cc_clear(*(_QWORD *)v7, v15);
  return v22;
}

void *ccblowfish_ecb_decrypt_mode()
{
  return &ccblowfish_ltc_ecb_decrypt_mode;
}

void *ccblowfish_ecb_encrypt_mode()
{
  return &ccblowfish_ltc_ecb_encrypt_mode;
}

_QWORD *ccblowfish_cbc_encrypt_mode()
{
  ccmode_factory_cbc_encrypt(cbc_blowfish_encrypt, ccblowfish_ltc_ecb_encrypt_mode);
  return cbc_blowfish_encrypt;
}

_QWORD *ccblowfish_cbc_decrypt_mode()
{
  ccmode_factory_cbc_decrypt(cbc_blowfish_decrypt, ccblowfish_ltc_ecb_decrypt_mode);
  return cbc_blowfish_decrypt;
}

_QWORD *ccblowfish_cfb_encrypt_mode()
{
  ccmode_factory_cfb_encrypt(cfb_blowfish_encrypt, ccblowfish_ltc_ecb_encrypt_mode);
  return cfb_blowfish_encrypt;
}

_QWORD *ccblowfish_cfb_decrypt_mode()
{
  ccmode_factory_cfb_decrypt(cfb_blowfish_decrypt, ccblowfish_ltc_ecb_encrypt_mode);
  return cfb_blowfish_decrypt;
}

_QWORD *ccblowfish_cfb8_encrypt_mode()
{
  ccmode_factory_cfb8_encrypt(cfb8_blowfish_encrypt, ccblowfish_ltc_ecb_encrypt_mode);
  return cfb8_blowfish_encrypt;
}

_QWORD *ccblowfish_cfb8_decrypt_mode()
{
  ccmode_factory_cfb8_decrypt(cfb8_blowfish_decrypt, ccblowfish_ltc_ecb_encrypt_mode);
  return cfb8_blowfish_decrypt;
}

_QWORD *ccblowfish_ctr_crypt_mode()
{
  ccmode_factory_ctr_crypt(ctr_blowfish, ccblowfish_ltc_ecb_encrypt_mode);
  return ctr_blowfish;
}

_QWORD *ccblowfish_ofb_crypt_mode()
{
  ccmode_factory_ofb_crypt(ofb_blowfish, ccblowfish_ltc_ecb_encrypt_mode);
  return ofb_blowfish;
}

const char *cc_impl_name(int a1)
{
  if ((a1 - 1) > 0x38)
    return "UNKNOWN";
  else
    return off_1EA955848[a1 - 1];
}

int8x16_t *ccaes_xts_encrypt_vng_vector(int8x16_t *result, uint64_t a2, int64x2_t *a3, uint64_t a4, __int128 *a5)
{
  int8x16_t v5;
  int v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int64x2_t v24;
  BOOL v25;
  uint64_t i;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v46;
  int8x16_t v49;
  int8x16_t v65;
  int8x16_t v68;
  int8x16_t v84;
  int8x16_t v87;
  int8x16_t v103;
  int8x16_t v106;
  int8x16_t v122;
  int8x16_t v125;
  int8x16_t v141;
  int8x16_t v144;
  int8x16_t v160;
  int8x16_t v163;
  int8x16_t v209;
  int8x16_t *v284;
  int8x16_t *v285;
  uint64_t j;
  int8x16_t v287;
  int64x2_t v326;
  int8x16_t v327;
  int8x16_t v328;
  int8x16_t v329;
  int8x16_t v330;
  int8x16_t v331;
  int8x16_t v332;
  int8x16_t v333;

  v6 = *((_DWORD *)a5 + 60);
  v7 = veorq_s8(v5, v5);
  v7.i64[0] = 134;
  v326 = *a3;
  v8 = (int8x16_t)vshrq_n_u64((uint64x2_t)v326, 0x3FuLL);
  v9 = (int8x16_t)vshrq_n_s64(v326, 0x3FuLL);
  v327 = veorq_s8(vorrq_s8(vextq_s8(v8, v8, 8uLL), (int8x16_t)vshlq_n_s64(v326, 1uLL)), vandq_s8(vextq_s8(v9, v9, 0xFuLL), v7));
  v10 = (int8x16_t)vshrq_n_u64((uint64x2_t)v327, 0x3FuLL);
  v11 = (int8x16_t)vshrq_n_s64((int64x2_t)v327, 0x3FuLL);
  v328 = veorq_s8(vorrq_s8(vextq_s8(v10, v10, 8uLL), (int8x16_t)vshlq_n_s64((int64x2_t)v327, 1uLL)), vandq_s8(vextq_s8(v11, v11, 0xFuLL), v7));
  v12 = (int8x16_t)vshrq_n_u64((uint64x2_t)v328, 0x3FuLL);
  v13 = (int8x16_t)vshrq_n_s64((int64x2_t)v328, 0x3FuLL);
  v329 = veorq_s8(vorrq_s8(vextq_s8(v12, v12, 8uLL), (int8x16_t)vshlq_n_s64((int64x2_t)v328, 1uLL)), vandq_s8(vextq_s8(v13, v13, 0xFuLL), v7));
  v14 = (int8x16_t)vshrq_n_u64((uint64x2_t)v329, 0x3FuLL);
  v15 = (int8x16_t)vshrq_n_s64((int64x2_t)v329, 0x3FuLL);
  v330 = veorq_s8(vorrq_s8(vextq_s8(v14, v14, 8uLL), (int8x16_t)vshlq_n_s64((int64x2_t)v329, 1uLL)), vandq_s8(vextq_s8(v15, v15, 0xFuLL), v7));
  v16 = (int8x16_t)vshrq_n_u64((uint64x2_t)v330, 0x3FuLL);
  v17 = (int8x16_t)vshrq_n_s64((int64x2_t)v330, 0x3FuLL);
  v331 = veorq_s8(vorrq_s8(vextq_s8(v16, v16, 8uLL), (int8x16_t)vshlq_n_s64((int64x2_t)v330, 1uLL)), vandq_s8(vextq_s8(v17, v17, 0xFuLL), v7));
  v18 = (int8x16_t)vshrq_n_u64((uint64x2_t)v331, 0x3FuLL);
  v19 = (int8x16_t)vshrq_n_s64((int64x2_t)v331, 0x3FuLL);
  v332 = veorq_s8(vorrq_s8(vextq_s8(v18, v18, 8uLL), (int8x16_t)vshlq_n_s64((int64x2_t)v331, 1uLL)), vandq_s8(vextq_s8(v19, v19, 0xFuLL), v7));
  v20 = (int8x16_t)vshrq_n_u64((uint64x2_t)v332, 0x3FuLL);
  v21 = (int8x16_t)vshrq_n_s64((int64x2_t)v332, 0x3FuLL);
  v333 = veorq_s8(vorrq_s8(vextq_s8(v20, v20, 8uLL), (int8x16_t)vshlq_n_s64((int64x2_t)v332, 1uLL)), vandq_s8(vextq_s8(v21, v21, 0xFuLL), v7));
  v22 = (int8x16_t)vshrq_n_u64((uint64x2_t)v333, 0x3FuLL);
  v23 = (int8x16_t)vshrq_n_s64((int64x2_t)v333, 0x3FuLL);
  v24 = (int64x2_t)veorq_s8(vorrq_s8(vextq_s8(v22, v22, 8uLL), (int8x16_t)vshlq_n_s64((int64x2_t)v333, 1uLL)), vandq_s8(vextq_s8(v23, v23, 0xFuLL), v7));
  v25 = a4 < 8;
  for (i = a4 - 8; !v25; i -= 8)
  {
    v27 = (int8x16_t)v326;
    v28 = v327;
    v29 = v328;
    v30 = v329;
    v31 = v330;
    v32 = v331;
    v33 = v332;
    v34 = v333;
    a2 += 128;
    _Q16 = *a5;
    v326 = v24;
    v36 = (int8x16_t)vshrq_n_u64((uint64x2_t)v24, 0x3FuLL);
    v37 = (int8x16_t)vshrq_n_s64(v24, 0x3FuLL);
    __asm
    {
      AESE            V0.16B, V16.16B
      AESMC           V0.16B, V0.16B
    }
    v327 = veorq_s8(vorrq_s8(vextq_s8(v36, v36, 8uLL), (int8x16_t)vshlq_n_s64(v24, 1uLL)), vandq_s8(vextq_s8(v37, v37, 0xFuLL), v7));
    __asm
    {
      AESE            V1.16B, V16.16B
      AESMC           V1.16B, V1.16B
    }
    v46 = (int8x16_t)vshrq_n_u64((uint64x2_t)v327, 0x3FuLL);
    __asm
    {
      AESE            V2.16B, V16.16B
      AESMC           V2.16B, V2.16B
    }
    v49 = (int8x16_t)vshrq_n_s64((int64x2_t)v327, 0x3FuLL);
    __asm
    {
      AESE            V3.16B, V16.16B
      AESMC           V3.16B, V3.16B
      AESE            V4.16B, V16.16B
      AESMC           V4.16B, V4.16B
      AESE            V5.16B, V16.16B
      AESMC           V5.16B, V5.16B
      AESE            V6.16B, V16.16B
      AESMC           V6.16B, V6.16B
      AESE            V7.16B, V16.16B
      AESMC           V7.16B, V7.16B
    }
    _Q16 = a5[1];
    __asm
    {
      AESE            V0.16B, V16.16B
      AESMC           V0.16B, V0.16B
    }
    v328 = veorq_s8(vorrq_s8(vextq_s8(v46, v46, 8uLL), (int8x16_t)vshlq_n_s64((int64x2_t)v327, 1uLL)), vandq_s8(vextq_s8(v49, v49, 0xFuLL), v7));
    __asm
    {
      AESE            V1.16B, V16.16B
      AESMC           V1.16B, V1.16B
    }
    v65 = (int8x16_t)vshrq_n_u64((uint64x2_t)v328, 0x3FuLL);
    __asm
    {
      AESE            V2.16B, V16.16B
      AESMC           V2.16B, V2.16B
    }
    v68 = (int8x16_t)vshrq_n_s64((int64x2_t)v328, 0x3FuLL);
    __asm
    {
      AESE            V3.16B, V16.16B
      AESMC           V3.16B, V3.16B
      AESE            V4.16B, V16.16B
      AESMC           V4.16B, V4.16B
      AESE            V5.16B, V16.16B
      AESMC           V5.16B, V5.16B
      AESE            V6.16B, V16.16B
      AESMC           V6.16B, V6.16B
      AESE            V7.16B, V16.16B
      AESMC           V7.16B, V7.16B
    }
    _Q16 = a5[2];
    __asm
    {
      AESE            V0.16B, V16.16B
      AESMC           V0.16B, V0.16B
    }
    v329 = veorq_s8(vorrq_s8(vextq_s8(v65, v65, 8uLL), (int8x16_t)vshlq_n_s64((int64x2_t)v328, 1uLL)), vandq_s8(vextq_s8(v68, v68, 0xFuLL), v7));
    __asm
    {
      AESE            V1.16B, V16.16B
      AESMC           V1.16B, V1.16B
    }
    v84 = (int8x16_t)vshrq_n_u64((uint64x2_t)v329, 0x3FuLL);
    __asm
    {
      AESE            V2.16B, V16.16B
      AESMC           V2.16B, V2.16B
    }
    v87 = (int8x16_t)vshrq_n_s64((int64x2_t)v329, 0x3FuLL);
    __asm
    {
      AESE            V3.16B, V16.16B
      AESMC           V3.16B, V3.16B
      AESE            V4.16B, V16.16B
      AESMC           V4.16B, V4.16B
      AESE            V5.16B, V16.16B
      AESMC           V5.16B, V5.16B
      AESE            V6.16B, V16.16B
      AESMC           V6.16B, V6.16B
      AESE            V7.16B, V16.16B
      AESMC           V7.16B, V7.16B
    }
    _Q16 = a5[3];
    __asm
    {
      AESE            V0.16B, V16.16B
      AESMC           V0.16B, V0.16B
    }
    v330 = veorq_s8(vorrq_s8(vextq_s8(v84, v84, 8uLL), (int8x16_t)vshlq_n_s64((int64x2_t)v329, 1uLL)), vandq_s8(vextq_s8(v87, v87, 0xFuLL), v7));
    __asm
    {
      AESE            V1.16B, V16.16B
      AESMC           V1.16B, V1.16B
    }
    v103 = (int8x16_t)vshrq_n_u64((uint64x2_t)v330, 0x3FuLL);
    __asm
    {
      AESE            V2.16B, V16.16B
      AESMC           V2.16B, V2.16B
    }
    v106 = (int8x16_t)vshrq_n_s64((int64x2_t)v330, 0x3FuLL);
    __asm
    {
      AESE            V3.16B, V16.16B
      AESMC           V3.16B, V3.16B
      AESE            V4.16B, V16.16B
      AESMC           V4.16B, V4.16B
      AESE            V5.16B, V16.16B
      AESMC           V5.16B, V5.16B
      AESE            V6.16B, V16.16B
      AESMC           V6.16B, V6.16B
      AESE            V7.16B, V16.16B
      AESMC           V7.16B, V7.16B
    }
    _Q16 = a5[4];
    __asm
    {
      AESE            V0.16B, V16.16B
      AESMC           V0.16B, V0.16B
    }
    v331 = veorq_s8(vorrq_s8(vextq_s8(v103, v103, 8uLL), (int8x16_t)vshlq_n_s64((int64x2_t)v330, 1uLL)), vandq_s8(vextq_s8(v106, v106, 0xFuLL), v7));
    __asm
    {
      AESE            V1.16B, V16.16B
      AESMC           V1.16B, V1.16B
    }
    v122 = (int8x16_t)vshrq_n_u64((uint64x2_t)v331, 0x3FuLL);
    __asm
    {
      AESE            V2.16B, V16.16B
      AESMC           V2.16B, V2.16B
    }
    v125 = (int8x16_t)vshrq_n_s64((int64x2_t)v331, 0x3FuLL);
    __asm
    {
      AESE            V3.16B, V16.16B
      AESMC           V3.16B, V3.16B
      AESE            V4.16B, V16.16B
      AESMC           V4.16B, V4.16B
      AESE            V5.16B, V16.16B
      AESMC           V5.16B, V5.16B
      AESE            V6.16B, V16.16B
      AESMC           V6.16B, V6.16B
      AESE            V7.16B, V16.16B
      AESMC           V7.16B, V7.16B
    }
    _Q16 = a5[5];
    __asm
    {
      AESE            V0.16B, V16.16B
      AESMC           V0.16B, V0.16B
    }
    v332 = veorq_s8(vorrq_s8(vextq_s8(v122, v122, 8uLL), (int8x16_t)vshlq_n_s64((int64x2_t)v331, 1uLL)), vandq_s8(vextq_s8(v125, v125, 0xFuLL), v7));
    __asm
    {
      AESE            V1.16B, V16.16B
      AESMC           V1.16B, V1.16B
    }
    v141 = (int8x16_t)vshrq_n_u64((uint64x2_t)v332, 0x3FuLL);
    __asm
    {
      AESE            V2.16B, V16.16B
      AESMC           V2.16B, V2.16B
    }
    v144 = (int8x16_t)vshrq_n_s64((int64x2_t)v332, 0x3FuLL);
    __asm
    {
      AESE            V3.16B, V16.16B
      AESMC           V3.16B, V3.16B
      AESE            V4.16B, V16.16B
      AESMC           V4.16B, V4.16B
      AESE            V5.16B, V16.16B
      AESMC           V5.16B, V5.16B
      AESE            V6.16B, V16.16B
      AESMC           V6.16B, V6.16B
      AESE            V7.16B, V16.16B
      AESMC           V7.16B, V7.16B
    }
    _Q16 = a5[6];
    __asm
    {
      AESE            V0.16B, V16.16B
      AESMC           V0.16B, V0.16B
    }
    v333 = veorq_s8(vorrq_s8(vextq_s8(v141, v141, 8uLL), (int8x16_t)vshlq_n_s64((int64x2_t)v332, 1uLL)), vandq_s8(vextq_s8(v144, v144, 0xFuLL), v7));
    __asm
    {
      AESE            V1.16B, V16.16B
      AESMC           V1.16B, V1.16B
    }
    v160 = (int8x16_t)vshrq_n_u64((uint64x2_t)v333, 0x3FuLL);
    __asm
    {
      AESE            V2.16B, V16.16B
      AESMC           V2.16B, V2.16B
    }
    v163 = (int8x16_t)vshrq_n_s64((int64x2_t)v333, 0x3FuLL);
    __asm
    {
      AESE            V3.16B, V16.16B
      AESMC           V3.16B, V3.16B
      AESE            V4.16B, V16.16B
      AESMC           V4.16B, V4.16B
      AESE            V5.16B, V16.16B
      AESMC           V5.16B, V5.16B
      AESE            V6.16B, V16.16B
      AESMC           V6.16B, V6.16B
      AESE            V7.16B, V16.16B
      AESMC           V7.16B, V7.16B
    }
    v24 = (int64x2_t)veorq_s8(vorrq_s8(vextq_s8(v160, v160, 8uLL), (int8x16_t)vshlq_n_s64((int64x2_t)v333, 1uLL)), vandq_s8(vextq_s8(v163, v163, 0xFuLL), v7));
    _Q16 = a5[7];
    __asm
    {
      AESE            V0.16B, V16.16B
      AESMC           V0.16B, V0.16B
      AESE            V1.16B, V16.16B
      AESMC           V1.16B, V1.16B
      AESE            V2.16B, V16.16B
      AESMC           V2.16B, V2.16B
      AESE            V3.16B, V16.16B
      AESMC           V3.16B, V3.16B
      AESE            V4.16B, V16.16B
      AESMC           V4.16B, V4.16B
      AESE            V5.16B, V16.16B
      AESMC           V5.16B, V5.16B
      AESE            V6.16B, V16.16B
      AESMC           V6.16B, V6.16B
      AESE            V7.16B, V16.16B
      AESMC           V7.16B, V7.16B
    }
    _Q16 = a5[8];
    __asm
    {
      AESE            V0.16B, V16.16B
      AESMC           V0.16B, V0.16B
      AESE            V1.16B, V16.16B
      AESMC           V1.16B, V1.16B
      AESE            V2.16B, V16.16B
      AESMC           V2.16B, V2.16B
      AESE            V3.16B, V16.16B
      AESMC           V3.16B, V3.16B
      AESE            V4.16B, V16.16B
      AESMC           V4.16B, V4.16B
      AESE            V5.16B, V16.16B
      AESMC           V5.16B, V5.16B
      AESE            V6.16B, V16.16B
      AESMC           V6.16B, V6.16B
      AESE            V7.16B, V16.16B
      AESMC           V7.16B, V7.16B
    }
    _Q16 = a5[9];
    v209 = (int8x16_t)a5[10];
    if (v6 > 160)
    {
      __asm
      {
        AESE            V0.16B, V16.16B
        AESMC           V0.16B, V0.16B
        AESE            V1.16B, V16.16B
        AESMC           V1.16B, V1.16B
        AESE            V2.16B, V16.16B
        AESMC           V2.16B, V2.16B
        AESE            V3.16B, V16.16B
        AESMC           V3.16B, V3.16B
        AESE            V4.16B, V16.16B
        AESMC           V4.16B, V4.16B
        AESE            V5.16B, V16.16B
        AESMC           V5.16B, V5.16B
        AESE            V6.16B, V16.16B
        AESMC           V6.16B, V6.16B
        AESE            V7.16B, V16.16B
        AESMC           V7.16B, V7.16B
      }
      _Q16 = a5[10];
      __asm
      {
        AESE            V0.16B, V16.16B
        AESMC           V0.16B, V0.16B
        AESE            V1.16B, V16.16B
        AESMC           V1.16B, V1.16B
        AESE            V2.16B, V16.16B
        AESMC           V2.16B, V2.16B
        AESE            V3.16B, V16.16B
        AESMC           V3.16B, V3.16B
        AESE            V4.16B, V16.16B
        AESMC           V4.16B, V4.16B
        AESE            V5.16B, V16.16B
        AESMC           V5.16B, V5.16B
        AESE            V6.16B, V16.16B
        AESMC           V6.16B, V6.16B
        AESE            V7.16B, V16.16B
        AESMC           V7.16B, V7.16B
      }
      _Q16 = a5[11];
      v209 = (int8x16_t)a5[12];
      if (v6 > 192)
      {
        __asm
        {
          AESE            V0.16B, V16.16B
          AESMC           V0.16B, V0.16B
          AESE            V1.16B, V16.16B
          AESMC           V1.16B, V1.16B
          AESE            V2.16B, V16.16B
          AESMC           V2.16B, V2.16B
          AESE            V3.16B, V16.16B
          AESMC           V3.16B, V3.16B
          AESE            V4.16B, V16.16B
          AESMC           V4.16B, V4.16B
          AESE            V5.16B, V16.16B
          AESMC           V5.16B, V5.16B
          AESE            V6.16B, V16.16B
          AESMC           V6.16B, V6.16B
          AESE            V7.16B, V16.16B
          AESMC           V7.16B, V7.16B
        }
        _Q16 = a5[12];
        __asm
        {
          AESE            V0.16B, V16.16B
          AESMC           V0.16B, V0.16B
          AESE            V1.16B, V16.16B
          AESMC           V1.16B, V1.16B
          AESE            V2.16B, V16.16B
          AESMC           V2.16B, V2.16B
          AESE            V3.16B, V16.16B
          AESMC           V3.16B, V3.16B
          AESE            V4.16B, V16.16B
          AESMC           V4.16B, V4.16B
          AESE            V5.16B, V16.16B
          AESMC           V5.16B, V5.16B
          AESE            V6.16B, V16.16B
          AESMC           V6.16B, V6.16B
          AESE            V7.16B, V16.16B
          AESMC           V7.16B, V7.16B
        }
        _Q16 = a5[13];
        v209 = (int8x16_t)a5[14];
      }
    }
    __asm
    {
      AESE            V0.16B, V16.16B
      AESE            V1.16B, V16.16B
      AESE            V2.16B, V16.16B
      AESE            V3.16B, V16.16B
      AESE            V4.16B, V16.16B
      AESE            V5.16B, V16.16B
      AESE            V6.16B, V16.16B
      AESE            V7.16B, V16.16B
    }
    *result = veorq_s8(veorq_s8(_Q0, v209), v27);
    result[1] = veorq_s8(veorq_s8(_Q1, v209), v28);
    result[2] = veorq_s8(veorq_s8(_Q2, v209), v29);
    result[3] = veorq_s8(veorq_s8(_Q3, v209), v30);
    v284 = result + 4;
    *v284 = veorq_s8(veorq_s8(_Q4, v209), v31);
    v284[1] = veorq_s8(veorq_s8(_Q5, v209), v32);
    v284[2] = veorq_s8(veorq_s8(_Q6, v209), v33);
    v284[3] = veorq_s8(veorq_s8(_Q7, v209), v34);
    result = v284 + 4;
    v25 = i < 8;
  }
  v285 = (int8x16_t *)&v326;
  v25 = i < -7;
  for (j = i + 7; !v25; --j)
  {
    v287 = *v285++;
    a2 += 16;
    _Q16 = *a5;
    __asm
    {
      AESE            V0.16B, V16.16B
      AESMC           V0.16B, V0.16B
    }
    _Q16 = a5[1];
    __asm
    {
      AESE            V0.16B, V16.16B
      AESMC           V0.16B, V0.16B
    }
    _Q16 = a5[2];
    __asm
    {
      AESE            V0.16B, V16.16B
      AESMC           V0.16B, V0.16B
    }
    _Q16 = a5[3];
    __asm
    {
      AESE            V0.16B, V16.16B
      AESMC           V0.16B, V0.16B
    }
    _Q16 = a5[4];
    __asm
    {
      AESE            V0.16B, V16.16B
      AESMC           V0.16B, V0.16B
    }
    _Q16 = a5[5];
    __asm
    {
      AESE            V0.16B, V16.16B
      AESMC           V0.16B, V0.16B
    }
    _Q16 = a5[6];
    __asm
    {
      AESE            V0.16B, V16.16B
      AESMC           V0.16B, V0.16B
    }
    _Q16 = a5[7];
    __asm
    {
      AESE            V0.16B, V16.16B
      AESMC           V0.16B, V0.16B
    }
    _Q16 = a5[8];
    __asm
    {
      AESE            V0.16B, V16.16B
      AESMC           V0.16B, V0.16B
    }
    _Q16 = a5[9];
    _Q17 = (int8x16_t)a5[10];
    if (v6 > 160)
    {
      __asm
      {
        AESE            V0.16B, V16.16B
        AESMC           V0.16B, V0.16B
        AESE            V0.16B, V17.16B
        AESMC           V0.16B, V0.16B
      }
      _Q16 = a5[11];
      _Q17 = (int8x16_t)a5[12];
      if (v6 > 192)
      {
        __asm
        {
          AESE            V0.16B, V16.16B
          AESMC           V0.16B, V0.16B
          AESE            V0.16B, V17.16B
          AESMC           V0.16B, V0.16B
        }
        _Q16 = a5[13];
        _Q17 = (int8x16_t)a5[14];
      }
    }
    __asm { AESE            V0.16B, V16.16B }
    *result++ = veorq_s8(veorq_s8(_Q0, _Q17), v287);
    v25 = j < 1;
  }
  *a3 = *(int64x2_t *)v285;
  return result;
}

uint64_t ccder_encode_dhparams_size(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = ccdh_gp_n(a1);
  v3 = ccdh_gp_l(a1);
  v4 = (unint64_t *)ccdh_gp_prime(a1);
  v5 = ccder_sizeof_integer(v2, v4);
  v6 = (unint64_t *)ccdh_gp_g(a1);
  v7 = ccder_sizeof_integer(v2, v6);
  if (v3)
    v8 = ccder_sizeof_uint64(v3);
  else
    v8 = 0;
  return ccder_sizeof(0x2000000000000010, v7 + v5 + v8);
}

uint64_t ccder_encode_dhparams(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = ccdh_gp_n(a1);
  v7 = (unint64_t *)ccdh_gp_prime(a1);
  v8 = (unint64_t *)ccdh_gp_g(a1);
  v9 = ccdh_gp_l(a1);
  v10 = a3;
  if (v9)
  {
    v11 = ccdh_gp_l(a1);
    v10 = ccder_encode_uint64(v11, a2, a3);
  }
  v12 = ccder_encode_integer(v6, v8, a2, v10);
  v13 = ccder_encode_integer(v6, v7, a2, v12);
  return ccder_encode_constructed_tl(0x2000000000000010uLL, a3, a2, v13);
}

uint64_t ccgcm_context_size(uint64_t *a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *a1;
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccgcm_block_size(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *(_QWORD *)(a1 + 16);
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccgcm_one_shot_legacy(rsize_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  char v18;
  uint64_t v24;
  _WORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v18 = 0;
  v30 = *MEMORY[0x1E0C874D8];
  HIBYTE(v29) = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v18 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v18 = 1;
    }
  }
  HIBYTE(v29) = v18;
  MEMORY[0x1E0C86820](a1, a2, a2, a3);
  v25 = (_WORD *)((char *)&v29 - v24);
  v26 = ccgcm_init((uint64_t)a1);
  if (!(_DWORD)v26)
  {
    v26 = ccgcm_set_iv_legacy((uint64_t)a1, v25, a4, a5);
    if (!(_DWORD)v26)
    {
      v26 = ccgcm_aad((uint64_t)a1, (uint64_t)v25, a6, a7);
      if (!(_DWORD)v26)
      {
        v26 = ccgcm_update((uint64_t)a1, (uint64_t)v25, a8, a9, a10);
        if (!(_DWORD)v26)
          v26 = ccgcm_finalize((uint64_t)a1, (uint64_t)v25, a11, a12);
      }
    }
  }
  v27 = v26;
  cc_clear(*a1, v25);
  cc_disable_dit((_BYTE *)&v29 + 7);
  return v27;
}

uint64_t ccxts_context_size(uint64_t *a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *a1;
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccxts_block_size(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *(_QWORD *)(a1 + 16);
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccxts_init(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = (*(uint64_t (**)(void))(a1 + 24))();
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccxts_set_tweak(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  uint64_t v10;
  char v12;

  v4 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v12 = v4;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 40))(a2, a3, a4);
  cc_disable_dit(&v12);
  return v10;
}

uint64_t ccxts_update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v6;
  uint64_t v12;
  char v14;

  v6 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v14 = v6;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 48))(a2, a3, a4, a5, a6);
  cc_disable_dit(&v14);
  return v12;
}

uint64_t ccxts_one_shot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v13;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE v29[7];
  char v30;
  uint64_t v31;

  v13 = 0;
  v31 = *MEMORY[0x1E0C874D8];
  v30 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v13 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v13 = 1;
    }
  }
  v30 = v13;
  v19 = MEMORY[0x1E0C86820](a1, a2, a2, a3);
  v21 = &v29[-v20];
  MEMORY[0x1E0C86820](v19, v22, v23, v24);
  v26 = &v29[-v25];
  v27 = ccxts_init(a1);
  if (!(_DWORD)v27)
  {
    v27 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(a1 + 40))(v21, v26, a5);
    if (!(_DWORD)v27)
    {
      if ((*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t, uint64_t, uint64_t))(a1 + 48))(v21, v26, a6, a7, a8))
        v27 = 0;
      else
        v27 = 4294967289;
    }
  }
  cc_clear(*(_QWORD *)a1, v21);
  cc_clear(*(_QWORD *)(a1 + 8), v26);
  cc_disable_dit(&v30);
  return v27;
}

uint64_t ccec_der_import_priv_keytype(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, _QWORD *a4)
{
  char v6;
  uint64_t v12;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;

  v6 = 0;
  v20 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v20 = v6;
  v18 = 0;
  v19 = 0;
  v16 = 0;
  v17 = 0;
  v14 = 0;
  v15 = 0;
  if (ccder_decode_eckey(&v19, &v18, &v16, &v14, &v17, &v15, a2, &a2[a1]))
  {
    v12 = 0;
    *a3 = v14;
    *a4 = v18;
  }
  else
  {
    v12 = 0xFFFFFFFFLL;
  }
  cc_disable_dit(&v20);
  return v12;
}

uint64_t ccvrf_irtf_ed25519_proof_to_hash(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD v8[10];
  __int16 v9;
  uint64_t v10;
  _OWORD v11[2];
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C874D8];
  memset(v8, 0, sizeof(v8));
  v12 = 0uLL;
  memset(v11, 0, sizeof(v11));
  ccvrf_irtf_ed25519_decode_proof(a2, (int *)v8, &v12, (uint64_t)v11);
  v6 = v5;
  if (!(_DWORD)v5)
  {
    v9 = 772;
    ge_scalarmult_cofactor(v8);
    ccvrf_irtf_ed25519_point_to_string(&v10, v8);
    ccdigest(*(_QWORD *)(a1 + 40), 0x22uLL, (char *)&v9, a3);
  }
  return v6;
}

uint64_t ccvrf_proof_to_hash(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v9;
  uint64_t v15;
  char v17;

  v9 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v9 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v9 = 1;
    }
  }
  v17 = v9;
  if (ccvrf_sizeof_proof(a1) == a2 && ccvrf_sizeof_hash(a1) == a4)
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 80))(a1, a3, a5);
  else
    v15 = 4294967289;
  cc_disable_dit(&v17);
  return v15;
}

uint64_t cczp_sqrt_tonelli_shanks_precomp_ws(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, unint64_t a5, unint64_t *a6, void *a7)
{
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  unint64_t *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v23;
  unint64_t *v25;

  v12 = cczp_n(a2);
  v23 = *(_QWORD *)(a1 + 16);
  v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12);
  v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12);
  v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12);
  v16 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12);
  result = cczp_power_fast_ws(a1, a2, a3, a4, a6);
  v18 = v23;
  if (!(_DWORD)result)
  {
    ccn_seti(v12, v16, 1);
    v25 = v16;
    cczp_to_ws(a1, a2);
    ccn_set(v12, v15, a7);
    cczp_sqr_ws(a1, a2);
    cczp_mul_ws(a1, a2);
    cczp_mul_ws(a1, a2);
    if (a5 >= 2)
    {
      while (1)
      {
        ccn_set(v12, v14, v13);
        if (a5 - 1 < 2)
          break;
        v19 = 2;
        do
        {
          cczp_sqr_ws(a1, a2);
          ++v19;
        }
        while (a5 != v19);
        v20 = ccn_cmp(v12, (unint64_t *)v14, v25) & 1;
        cczp_mul_ws(a1, a2);
        ccn_mux(v12, v20, a3, (uint64_t *)v14, a3);
        cczp_sqr_ws(a1, a2);
        cczp_mul_ws(a1, a2);
        ccn_mux(v12, v20, (uint64_t *)v13, (uint64_t *)v14, (uint64_t *)v13);
        --a5;
      }
      v21 = ccn_cmp(v12, (unint64_t *)v14, v25) & 1;
      cczp_mul_ws(a1, a2);
      ccn_mux(v12, v21, a3, (uint64_t *)v14, a3);
      cczp_sqr_ws(a1, a2);
      cczp_mul_ws(a1, a2);
      ccn_mux(v12, v21, (uint64_t *)v13, (uint64_t *)v14, (uint64_t *)v13);
    }
    cczp_sqr_ws(a1, a2);
    if (ccn_cmp(v12, (unint64_t *)v14, (unint64_t *)a4))
      result = 4294967289;
    else
      result = 0;
    v18 = v23;
  }
  *(_QWORD *)(a1 + 16) = v18;
  return result;
}

uint64_t cczp_sqrt_default_ws(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int8x16_t *v11;
  void *v12;
  uint64_t result;
  unint64_t v14;
  int8x16_t *v15;
  uint64_t *v16;

  v8 = ~*(_DWORD *)cczp_prime(a2) & 3;
  v9 = cczp_n(a2);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9);
  v12 = (void *)cczp_prime(a2);
  if (v8)
  {
    ccn_set(v9, v11, v12);
    v11->i64[0] &= ~1uLL;
    v14 = ccn_trailing_zeros(v9, (uint64_t)v11);
    ccn_shift_right_multi(v9, v11, v11, v14);
    v15 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9);
    ccn_sub1(v9, v15, (unint64_t *)v11, 1uLL);
    ccn_shift_right(v9, v15, v15, 1);
    v16 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9);
    ccn_seti(v9, v16, 1);
    while (cczp_is_quadratic_residue_ws(a1, a2, v16) == 1)
      ccn_add1_ws(a1, v9, v16, v16, 1);
    result = cczp_power_fast_ws(a1, a2, v16, v16, (unint64_t *)v11);
    if (!(_DWORD)result)
      result = cczp_sqrt_tonelli_shanks_precomp_ws(a1, a2, a3, a4, v14, (unint64_t *)v15, v16);
  }
  else
  {
    ccn_add1_ws(a1, v9, v11, (uint64_t *)v12, 1);
    ccn_shift_right(v9, v11, v11, 2);
    result = cczp_power_fast_ws(a1, a2, a3, a4, (unint64_t *)v11);
    if (!(_DWORD)result)
    {
      cczp_sqr_ws(a1, a2);
      if (ccn_cmp(v9, (unint64_t *)v11, (unint64_t *)a4))
        result = 4294967289;
      else
        result = 0;
    }
  }
  *(_QWORD *)(a1 + 16) = v10;
  return result;
}

uint64_t cczp_sqrt_ws(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 16) + 48))();
}

void *ccsrp_gp_rfc5054_4096()
{
  return &_ccsrp_gp_rfc5054_4096;
}

uint64_t cced25519_verify_internal(uint64_t *a1, uint64_t a2, size_t a3, char *a4, char *a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  void *v40;
  __int128 v41;
  uint64_t (*v42)(void **, uint64_t);
  void (*v43)(uint64_t);
  char v44[31];
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C874D8];
  v40 = cc_malloc_clear(0x5E0uLL);
  v41 = xmmword_1DEE29490;
  v42 = (uint64_t (*)(void **, uint64_t))cc_ws_alloc;
  v43 = cc_ws_free;
  if (!v40)
    return 4294967283;
  v12 = (uint64_t)&a1[5 * *a1 + 4];
  v13 = cczp_n((uint64_t)a1);
  v39 = (uint64_t *)cc_ws_alloc(&v40, v13);
  v14 = (unint64_t *)v42(&v40, v13);
  v15 = (_QWORD *)v42(&v40, 3 * v13);
  if (v13)
  {
    v16 = (unint64_t *)(a5 + 32);
    v17 = v14;
    v18 = v13;
    do
    {
      v19 = *v16++;
      *v17++ = v19;
      --v18;
    }
    while (v18);
  }
  v20 = (unint64_t *)cczp_prime(v12);
  if ((ccn_cmp(v13, v14, v20) & 0x80000000) == 0)
  {
    v35 = 4294967150;
    goto LABEL_24;
  }
  cced25519_hash_to_scalar_ws((uint64_t)&v40, a1, a2, v39, 0x20uLL, a5, 0x20uLL, (char *)a6, a3, a4);
  v21 = cczp_n((uint64_t)a1);
  v22 = v21;
  v23 = *a1;
  v24 = &v15[*a1];
  v25 = *((unsigned __int8 *)a6 + 31);
  if (v21)
  {
    v26 = &v15[*a1];
    v27 = v21;
    do
    {
      v28 = *a6++;
      *v26++ = v28;
      --v27;
    }
    while (v27);
  }
  v24[v21 - 1] &= ~0x8000000000000000;
  v29 = (unint64_t *)cczp_prime((uint64_t)a1);
  if ((ccn_cmp(v22, v24, v29) & 0x80000000) == 0)
    goto LABEL_27;
  v37 = *((_QWORD *)&v41 + 1);
  v38 = v25;
  v42(&v40, v22);
  v30 = (uint64_t *)v42(&v40, v22);
  v31 = (unint64_t *)v42(&v40, v22);
  ccn_seti(v22, &v15[2 * v23], 1);
  cczp_sqr_ws((uint64_t)&v40, (uint64_t)a1);
  cczp_mul_ws((uint64_t)&v40, (uint64_t)a1);
  cczp_sub_ws((uint64_t)&v40, (uint64_t)a1);
  cczp_add_ws((uint64_t)&v40, (uint64_t)a1);
  cczp_sqr_ws((uint64_t)&v40, (uint64_t)a1);
  cczp_mul_ws((uint64_t)&v40, (uint64_t)a1);
  cczp_mul_ws((uint64_t)&v40, (uint64_t)a1);
  cczp_mul_ws((uint64_t)&v40, (uint64_t)a1);
  cczp_mul_ws((uint64_t)&v40, (uint64_t)a1);
  v32 = cczp_power_fast_ws((uint64_t)&v40, (uint64_t)a1, v15, v15, kPsub5div8);
  if ((_DWORD)v32)
  {
LABEL_28:
    v35 = v32;
    goto LABEL_24;
  }
  cczp_mul_ws((uint64_t)&v40, (uint64_t)a1);
  cczp_sqr_ws((uint64_t)&v40, (uint64_t)a1);
  cczp_mul_ws((uint64_t)&v40, (uint64_t)a1);
  cczp_from_ws((uint64_t)&v40, (uint64_t)a1);
  cczp_from_ws((uint64_t)&v40, (uint64_t)a1);
  if (ccn_cmp(v22, (unint64_t *)v30, v31))
  {
    cczp_negate((uint64_t)a1, v30, (unint64_t *)v30);
    if (ccn_cmp(v22, (unint64_t *)v30, v31))
      goto LABEL_27;
    cczp_mul_ws((uint64_t)&v40, (uint64_t)a1);
  }
  cczp_from_ws((uint64_t)&v40, (uint64_t)a1);
  if (ccn_n(v22, v15) || ((char)v38 & 0x80000000) == 0)
  {
    if ((*v15 & 1) == v38 >> 7)
      cczp_negate((uint64_t)a1, v15, v15);
    *((_QWORD *)&v41 + 1) = v37;
    cced25519_double_scalar_mult_ws((uint64_t)&v40, a1, (char *)v15, (uint64_t)v14, (uint64_t)v39);
    v32 = ccec_affinify_ws((uint64_t)&v40, (uint64_t)a1);
    if (!(_DWORD)v32)
    {
      v33 = 0;
      v34 = &v15[*a1];
      do
      {
        *(_QWORD *)&v44[v33 * 8] = v34[v33];
        ++v33;
      }
      while (v33 != 4);
      v45 |= *(_BYTE *)v15 << 7;
      if (cc_cmp_safe(32, v44, a5))
        v35 = 4294967150;
      else
        v35 = 0;
      goto LABEL_24;
    }
    goto LABEL_28;
  }
LABEL_27:
  v35 = 4294967289;
LABEL_24:
  *((_QWORD *)&v41 + 1) = 0;
  v43((uint64_t)&v40);
  return v35;
}

uint64_t cced25519_verify(uint64_t a1, size_t a2, char *a3, char *a4, uint64_t *a5)
{
  char v10;
  uint64_t *v16;
  uint64_t v17;
  char v19;

  v10 = 0;
  v19 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v19 = v10;
  v16 = (uint64_t *)ccec_cp_ed25519();
  v17 = cced25519_verify_internal(v16, a1, a2, a3, a4, a5);
  cc_disable_dit(&v19);
  return v17;
}

uint64_t ccxof_init(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 16))(a1, (uint64_t)a2 + *(_QWORD *)(a1 + 8) + 8);
}

_QWORD *ccxof_absorb(_QWORD *result, char *__dst, unint64_t a3, char *__src)
{
  char *v4;
  unint64_t v5;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;

  v4 = __src;
  v5 = a3;
  v7 = result;
  v8 = __dst + 8;
  v9 = *(unsigned int *)__dst;
  v10 = result[1];
  v11 = &__dst[v10 + 8];
  if ((_DWORD)v9)
  {
    v12 = v10 - v9;
    v13 = v12 >= a3 ? a3 : v12;
    result = memcpy(&v8[v9], __src, v13);
    v4 += v13;
    v5 -= v13;
    *(_DWORD *)__dst = v13 + v9;
    v10 = v7[1];
    if (v13 + v9 == v10)
    {
      result = (_QWORD *)((uint64_t (*)(_QWORD *, char *, uint64_t, char *))v7[3])(v7, v11, 1, v8);
      *(_DWORD *)__dst = 0;
      v10 = v7[1];
    }
  }
  v14 = v5 / v10;
  if (v10 <= v5)
  {
    result = (_QWORD *)((uint64_t (*)(_QWORD *, char *, unint64_t, char *))v7[3])(v7, v11, v14, v4);
    v10 = v7[1];
  }
  v15 = v10 * v14;
  v16 = v5 - v15;
  if (v16)
  {
    result = memcpy(v8, &v4[v15], v16);
    *(_DWORD *)__dst = v16;
  }
  return result;
}

_QWORD *ccxof_squeeze(_QWORD *result, unsigned int *a2, size_t a3, char *__dst)
{
  _QWORD *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  size_t v13;

  v7 = result;
  v8 = a2 + 2;
  v9 = (uint64_t)a2 + result[1] + 8;
  v10 = *a2;
  if (a2[1])
  {
    if (!a3)
      goto LABEL_13;
  }
  else
  {
    result = (_QWORD *)((uint64_t (*)(_QWORD *, uint64_t, uint64_t, unsigned int *))result[4])(result, (uint64_t)a2 + result[1] + 8, v10, v8);
    LODWORD(v10) = 0;
    *(_QWORD *)a2 = 0x100000000;
    if (!a3)
      goto LABEL_13;
  }
  v11 = v10;
  do
  {
    v12 = v7[1];
    if (!v11)
    {
      ((void (*)(_QWORD *, uint64_t, size_t, unsigned int *))v7[5])(v7, v9, v12, v8);
      v12 = v7[1];
      v11 = v12;
    }
    if (a3 >= v11)
      v13 = v11;
    else
      v13 = a3;
    result = memcpy(__dst, (char *)v8 + v12 - v11, v13);
    v11 -= v13;
    __dst += v13;
    a3 -= v13;
  }
  while (a3);
  LODWORD(v10) = v11;
LABEL_13:
  *a2 = v10;
  return result;
}

uint64_t ccec_full_sub(uint64_t *a1, uint64_t a2, uint64_t a3, char *a4)
{
  char v8;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[4];
  void (*v19)(uint64_t);
  char v20;

  v8 = 0;
  v20 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v20 = v8;
  v14 = cc_malloc_clear(144 * *a1);
  v15 = 18 * *a1;
  v18[0] = v14;
  v18[1] = v15;
  v18[2] = 0;
  v18[3] = cc_ws_alloc;
  v19 = cc_ws_free;
  if (v14)
  {
    ccec_full_sub_ws((uint64_t)v18, a1, a2, a3, a4);
    v19((uint64_t)v18);
    v16 = 0;
  }
  else
  {
    v16 = 4294967283;
  }
  cc_disable_dit(&v20);
  return v16;
}

uint64_t ccrng_system_init(uint64_t *a1)
{
  char v2;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v11;
  char v12;

  v2 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v12 = v2;
  v11 = 0;
  v8 = ccrng(&v11);
  if (v8)
    *a1 = *v8;
  v9 = v11;
  cc_disable_dit(&v12);
  return v9;
}

_BYTE *ccrng_system_done()
{
  char v0;
  char v7;

  v0 = 0;
  v7 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v0 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v0 = 1;
    }
  }
  v7 = v0;
  return cc_disable_dit(&v7);
}

uint64_t cczp_sub(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8;
  uint64_t v14;
  _QWORD v16[4];
  void (*v17)(uint64_t);
  char v18;

  v8 = 0;
  v18 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v18 = v8;
  cczp_n(a1);
  v16[0] = cc_malloc_clear(0);
  cczp_n(a1);
  v16[1] = 0;
  v16[2] = 0;
  v16[3] = cc_ws_alloc;
  v17 = cc_ws_free;
  if (v16[0])
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 8))(v16, a1, a2, a3, a4);
    v17((uint64_t)v16);
    v14 = 0;
  }
  else
  {
    v14 = 4294967283;
  }
  cc_disable_dit(&v18);
  return v14;
}

uint64_t ccaes_vng_ccm_encrypt(_DWORD *a1, int8x16_t *a2, unint64_t a3, int8x16_t *a4, int8x16_t *a5)
{
  __int32 v10;
  unint64_t v11;
  unint64_t v12;
  int8x16_t *v13;
  unint64_t v14;
  int v15;
  unint64_t v16;

  v10 = a2[4].i32[0];
  if (v10 == 5)
    goto LABEL_6;
  if (v10 == 4)
  {
    if (a2[4].i32[2])
    {
      (*(void (**)(_DWORD *, uint64_t, int8x16_t *, int8x16_t *))(*(_QWORD *)a1 + 24))(a1 + 2, 1, a2 + 1, a2 + 1);
      a2[4].i32[2] = 0;
    }
    a2[4].i32[0] = 5;
LABEL_6:
    v11 = a2[4].u32[1];
    if ((_DWORD)v11)
    {
      v12 = v11 >= a3 ? a3 : a2[4].u32[1];
      ccmode_ccm_macdata((uint64_t)a1, (uint64_t)a2, 0, v12, (uint64_t)a4);
      ccmode_ccm_crypt((uint64_t)a1, (uint64_t)a2, v12, (uint64_t)a4, (uint64_t)a5);
      a4 = (int8x16_t *)((char *)a4 + v12);
      a5 = (int8x16_t *)((char *)a5 + v12);
      a3 -= v12;
      if (a2[4].i32[1])
        goto LABEL_24;
    }
    if (a3 < 0x10)
      goto LABEL_24;
    v13 = (int8x16_t *)(a1 + 2);
    v14 = a3 >> 4;
    v15 = a1[62];
    if (v15 > 159)
    {
      if (v15 == 224)
      {
LABEL_21:
        ccm256_encrypt(a4, a5, a2 + 1, v14, v13, a2, *(_QWORD *)(*(_QWORD *)a1 + 8) + ~a2[5].i32[0]);
        goto LABEL_23;
      }
      if (v15 == 192)
      {
LABEL_22:
        ccm192_encrypt(a4, a5, a2 + 1, v14, v13, a2, *(_QWORD *)(*(_QWORD *)a1 + 8) + ~a2[5].i32[0]);
        goto LABEL_23;
      }
      if (v15 != 160)
      {
LABEL_23:
        v16 = a3 & 0xFFFFFFFFFFFFFFF0;
        a3 &= 0xFu;
        a4 = (int8x16_t *)((char *)a4 + v16);
        a5 = (int8x16_t *)((char *)a5 + v16);
LABEL_24:
        ccmode_ccm_macdata((uint64_t)a1, (uint64_t)a2, 0, a3, (uint64_t)a4);
        ccmode_ccm_crypt((uint64_t)a1, (uint64_t)a2, a3, (uint64_t)a4, (uint64_t)a5);
        return 0;
      }
    }
    else if (v15 != 10)
    {
      if (v15 != 12)
      {
        if (v15 != 14)
          goto LABEL_23;
        goto LABEL_21;
      }
      goto LABEL_22;
    }
    ccm128_encrypt(a4, a5, a2 + 1, v14, v13, a2, *(_QWORD *)(*(_QWORD *)a1 + 8) + ~a2[5].i32[0]);
    goto LABEL_23;
  }
  return 4294967228;
}

uint64_t ccpad_cts1_decrypt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v12;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  char *v24;
  char *v25;
  char v26;
  char v27;
  char v28;
  char v30;
  _BYTE v31[16];
  _BYTE v32[16];
  _BYTE v33[16];
  uint64_t v34;

  v12 = 0;
  v34 = *MEMORY[0x1E0C874D8];
  v30 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v12 = 1;
    }
  }
  v30 = v12;
  v18 = *(_QWORD *)(a1 + 8);
  v19 = (a4 - 1) / v18;
  if (v19 >= 2)
  {
    v21 = (v19 - 1) * v18;
    (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a2, a3);
    v20 = a4 - v21;
    a5 += v21;
    a6 += v21;
  }
  else
  {
    v20 = a4;
  }
  if (2 * v18 == v20)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 24))(a2, a3, 2, a5, a6);
  }
  else
  {
    v22 = v20 - v18;
    __memcpy_chk();
    __memcpy_chk();
    ecb_from_cbc(a1, a2, (uint64_t)v31, (uint64_t)v33);
    if (v20 - v18 < v18)
      memcpy(&v32[v22], &v33[v22], 2 * v18 - v20);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t))(a1 + 24))(a2, a3, 1, v32, a6);
    if (v20 != v18)
    {
      v23 = (_BYTE *)(a6 + v18);
      v24 = v33;
      v25 = v32;
      do
      {
        v27 = *v25++;
        v26 = v27;
        v28 = *v24++;
        *v23++ = v28 ^ v26;
        --v22;
      }
      while (v22);
    }
  }
  cc_disable_dit(&v30);
  return a4;
}

uint64_t cckem_sizeof_full_ctx(_QWORD *a1)
{
  return *a1 + 8;
}

uint64_t cckem_sizeof_pub_ctx(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 8;
}

_BYTE *cckem_full_ctx_init(_QWORD *a1, _QWORD *a2)
{
  char v4;
  char v11;

  v4 = 0;
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v11 = v4;
  bzero(a1, *a2 + 8);
  *a1 = a2;
  return cc_disable_dit(&v11);
}

_BYTE *cckem_pub_ctx_init(_QWORD *a1, uint64_t a2)
{
  char v4;
  char v11;

  v4 = 0;
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v11 = v4;
  bzero(a1, *(_QWORD *)(a2 + 8) + 8);
  *a1 = a2;
  return cc_disable_dit(&v11);
}

const char *ccscrypt_salsa20_8(const char *result, uint64_t a2)
{
  uint16x8_t v2;
  int8x16_t v3;
  uint16x8_t v4;
  int8x16_t v5;
  uint16x8_t v6;
  uint16x8_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v14;
  int8x16_t v20;
  uint16x8_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  uint64_t v59;
  int8x16x4_t v60;

  v59 = *MEMORY[0x1E0C874D8];
  v60 = vld4q_s8(result);
  v2 = vmovl_u8(*(uint8x8_t *)v60.val[0].i8);
  v3 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v2.i8);
  v4 = vmovl_high_u8((uint8x16_t)v60.val[0]);
  v5 = (int8x16_t)vmovl_high_u16(v4);
  v6 = vmovl_high_u8((uint8x16_t)v60.val[1]);
  v7 = vmovl_u8(*(uint8x8_t *)v60.val[1].i8);
  v8 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v6.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v4.i8));
  v9 = vorrq_s8((int8x16_t)vshll_high_n_u16(v7, 8uLL), (int8x16_t)vmovl_high_u16(v2));
  v10 = vorrq_s8((int8x16_t)vshll_high_n_u16(v6, 8uLL), v5);
  v11 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v7.i8, 8uLL), v3);
  _Q16 = vmovl_u8(*(uint8x8_t *)v60.val[2].i8);
  _Q17 = (int8x16_t)vmovl_high_u8((uint8x16_t)v60.val[2]);
  v14 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q17.i8, 0x10uLL);
  __asm
  {
    SHLL2           V19.4S, V16.8H, #0x10
    SHLL2           V17.4S, V17.8H, #0x10
  }
  v20 = vorrq_s8(v11, (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q16.i8, 0x10uLL));
  v21 = vmovl_high_u8((uint8x16_t)v60.val[3]);
  v60.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v60.val[3].i8);
  v55 = vorrq_s8(v20, (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v60.val[0].i8), 0x18uLL));
  v56 = vorrq_s8(vorrq_s8(v9, _Q19), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v60.val[0]), 0x18uLL));
  v58 = vorrq_s8(vorrq_s8(v10, _Q17), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v21), 0x18uLL));
  v57 = vorrq_s8(vorrq_s8(v8, v14), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v21.i8), 0x18uLL));
  v23 = v56.i32[0];
  v22 = v56.i32[1];
  v25 = v55.i32[0];
  v24 = v55.i32[1];
  v27 = v57.i32[0];
  v26 = v57.i32[1];
  v29 = v58.i32[0];
  v28 = v58.i32[1];
  v31 = v58.i32[2];
  v30 = v58.i32[3];
  v32 = v57.i32[2];
  v33 = v57.i32[3];
  v35 = v55.i32[2];
  v34 = v55.i32[3];
  v36 = -8;
  v38 = v56.i32[2];
  v37 = v56.i32[3];
  do
  {
    v39 = v23 ^ __ROR4__(v29 + v25, 25);
    v40 = v27 ^ __ROR4__(v39 + v25, 23);
    v41 = v29 ^ __ROR4__(v40 + v39, 19);
    v42 = v25 ^ __ROR4__(v41 + v40, 14);
    v43 = v26 ^ __ROR4__(v24 + v22, 25);
    v44 = v28 ^ __ROR4__(v43 + v22, 23);
    v45 = v24 ^ __ROR4__(v44 + v43, 19);
    v46 = v22 ^ __ROR4__(v45 + v44, 14);
    v47 = v31 ^ __ROR4__(v38 + v32, 25);
    v48 = v35 ^ __ROR4__(v47 + v32, 23);
    v49 = v38 ^ __ROR4__(v48 + v47, 19);
    v50 = v32 ^ __ROR4__(v49 + v48, 14);
    v51 = v34 ^ __ROR4__(v33 + v30, 25);
    v52 = v37 ^ __ROR4__(v51 + v30, 23);
    v53 = v33 ^ __ROR4__(v52 + v51, 19);
    v54 = v30 ^ __ROR4__(v53 + v52, 14);
    v24 = v45 ^ __ROR4__(v51 + v42, 25);
    v35 = v48 ^ __ROR4__(v24 + v42, 23);
    v34 = v51 ^ __ROR4__(v35 + v24, 19);
    v25 = v42 ^ __ROR4__(v34 + v35, 14);
    v38 = v49 ^ __ROR4__(v46 + v39, 25);
    v37 = v52 ^ __ROR4__(v38 + v46, 23);
    v23 = v39 ^ __ROR4__(v37 + v38, 19);
    v22 = v46 ^ __ROR4__(v23 + v37, 14);
    v33 = v53 ^ __ROR4__(v50 + v43, 25);
    v27 = v40 ^ __ROR4__(v33 + v50, 23);
    v26 = v43 ^ __ROR4__(v27 + v33, 19);
    v32 = v50 ^ __ROR4__(v26 + v27, 14);
    v29 = v41 ^ __ROR4__(v54 + v47, 25);
    v28 = v44 ^ __ROR4__(v29 + v54, 23);
    v31 = v47 ^ __ROR4__(v28 + v29, 19);
    v30 = v54 ^ __ROR4__(v31 + v28, 14);
    v36 += 2;
  }
  while (v36);
  v56.i64[0] = __PAIR64__(v22, v23);
  v55.i64[0] = __PAIR64__(v24, v25);
  v57.i64[0] = __PAIR64__(v26, v27);
  v58.i64[0] = __PAIR64__(v28, v29);
  v58.i64[1] = __PAIR64__(v30, v31);
  v57.i64[1] = __PAIR64__(v33, v32);
  v55.i64[1] = __PAIR64__(v34, v35);
  v56.i64[1] = __PAIR64__(v37, v38);
  do
  {
    *(_DWORD *)(a2 + v36) = *(_DWORD *)&result[v36] + *(__int32 *)((char *)v55.i32 + v36);
    v36 += 4;
  }
  while (v36 != 64);
  return result;
}

__n128 ccscrypt_blockmix_salsa8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  __n128 *v7;
  __n128 v8;
  __n128 result;
  __n128 v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t i;
  __n128 *v14;
  __n128 v15;
  __n128 v16;
  __int128 *v17;
  _OWORD *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD *v23;
  __n128 *v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  uint64_t v31;

  v3 = a3;
  v31 = *MEMORY[0x1E0C874D8];
  v6 = 2 * a3;
  v7 = (__n128 *)&a1[8 * a3];
  v8 = v7[-3];
  v27 = v7[-4];
  v28 = v8;
  result = v7[-2];
  v10 = v7[-1];
  v29 = result;
  v30 = v10;
  if (2 * a3)
  {
    v11 = 0;
    v12 = a1;
    do
    {
      for (i = 0; i != 4; ++i)
        *(int8x16_t *)((char *)&v27 + i * 16) = veorq_s8((int8x16_t)v12[i], *(int8x16_t *)((char *)&v27 + i * 16));
      ccscrypt_salsa20_8((const char *)&v27, (uint64_t)&v27);
      v14 = (__n128 *)&a2[4 * v11];
      v15 = v28;
      *v14 = v27;
      v14[1] = v15;
      result.n128_u64[0] = v29.n128_u64[0];
      v16 = v30;
      v14[2] = v29;
      v14[3] = v16;
      ++v11;
      v12 += 4;
    }
    while (v11 != v6);
  }
  if (v3)
  {
    v17 = a2;
    v18 = a1;
    v19 = v3;
    do
    {
      v20 = *v17;
      v21 = v17[1];
      v22 = v17[3];
      v18[2] = v17[2];
      v18[3] = v22;
      *v18 = v20;
      v18[1] = v21;
      v18 += 4;
      v17 += 8;
      --v19;
    }
    while (v19);
    v23 = &a1[4 * v3];
    v24 = (__n128 *)(a2 + 4);
    do
    {
      result = *v24;
      v25 = v24[1];
      v26 = v24[3];
      v23[2] = v24[2];
      v23[3] = v26;
      *v23 = result;
      v23[1] = v25;
      v23 += 4;
      v24 += 8;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *ccscrypt_romix(uint64_t a1, void *a2, uint64_t a3, char *a4, _OWORD *__dst, _OWORD *a6)
{
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _BYTE *v17;
  size_t v18;
  char v19;

  v12 = a1 << 7;
  memcpy(__dst, a2, a1 << 7);
  if (a3)
  {
    v13 = a4;
    v14 = a3;
    do
    {
      memcpy(v13, __dst, v12);
      ccscrypt_blockmix_salsa8(__dst, a6, a1);
      v13 += v12;
      --v14;
    }
    while (v14);
    v15 = 0;
    do
    {
      if (v12)
      {
        v16 = &a4[(*(_QWORD *)((_BYTE *)__dst + v12 - 64) & (a3 - 1)) * v12];
        v17 = __dst;
        v18 = v12;
        do
        {
          v19 = *v16++;
          *v17++ ^= v19;
          --v18;
        }
        while (v18);
      }
      ccscrypt_blockmix_salsa8(__dst, a6, a1);
      ++v15;
    }
    while (v15 != a3);
  }
  return memcpy(a2, __dst, v12);
}

uint64_t ccscrypt_storage_size(unint64_t a1, unsigned int a2, unsigned int a3)
{
  char v3;
  uint64_t v8;
  uint8x8_t v9;
  unint64_t v11;
  uint64_t v12;
  _BOOL4 v14;
  uint64_t v15;
  int v17;
  unint64_t v18;
  uint64_t v19;
  char v21;

  v3 = 0;
  v21 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v21 = v3;
  v8 = -7;
  if (a2 && a1)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
    v9.i16[0] = vaddlv_u8(v9);
    if (0xFFFFFFE0 / (a2 << 7) >= a3 && v9.u32[0] <= 1uLL)
    {
      v11 = (unint64_t)a2 << 7;
      v12 = v11 * a3;
      v14 = !is_mul_ok(v11, a3) || v12 < 0;
      v15 = v11 * a1;
      v17 = !is_mul_ok(v11, a1) || v15 < 0 || v14;
      v18 = v12 + ((unint64_t)a2 << 8);
      if (__OFADD__(v12, (unint64_t)a2 << 8))
        v17 = 1;
      _VF = __OFADD__(v15, v18);
      v19 = v15 + v18;
      if (_VF)
        v17 = 1;
      if (v17)
        v8 = -12;
      else
        v8 = v19;
    }
  }
  cc_disable_dit(&v21);
  return v8;
}

rsize_t ccscrypt(uint64_t a1, uint64_t a2, size_t a3, char *a4, char *a5, unint64_t a6, unsigned int a7, unsigned int a8, size_t a9, char *a10)
{
  char v18;
  rsize_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  size_t *v29;
  char *v30;
  size_t v31;
  char *v32;
  char *v33;
  size_t *v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char v40;

  v18 = 0;
  v40 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v18 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v18 = 1;
    }
  }
  v40 = v18;
  v24 = ccscrypt_storage_size(a6, a7, a8);
  if ((v24 & 0x8000000000000000) == 0)
  {
    if (a9 <= 0xFFFFFFFE0)
    {
      v37 = a4;
      v39 = a5;
      v25 = a1;
      v26 = a8;
      v27 = (unint64_t)a7 << 7;
      v28 = v27 * a8;
      v29 = (size_t *)ccsha256_di();
      v36 = v25;
      if (ccpbkdf2_hmac(v29, v25, a2, a3, v37, 1uLL, v28, v39))
        goto LABEL_13;
      v38 = a2;
      if (a8)
      {
        v30 = v39;
        v31 = v28 + ((unint64_t)a7 << 7);
        v32 = &v39[v31];
        v33 = &v39[128 * (unint64_t)a7 + v31];
        do
        {
          ccscrypt_romix(a7, v30, a6, v33, &v39[v28], v32);
          v30 += v27;
          --v26;
        }
        while (v26);
      }
      v34 = (size_t *)ccsha256_di();
      if (ccpbkdf2_hmac(v34, v36, v38, v28, v39, 1uLL, a9, a10))
      {
LABEL_13:
        v24 = 0xFFFFFFFFLL;
      }
      else
      {
        cc_clear(v24, v39);
        v24 = 0;
      }
    }
    else
    {
      v24 = 4294967289;
    }
  }
  cc_disable_dit(&v40);
  return v24;
}

uint64_t ccsae_sizeof_ctx(_QWORD *a1)
{
  return 72 * *a1 + 144;
}

unint64_t ccsae_sizeof_commitment(uint64_t *a1)
{
  return 3 * ((unint64_t)(cczp_bitlen(*a1) + 7) >> 3);
}

uint64_t ccsae_sizeof_confirmation(uint64_t a1)
{
  return **(_QWORD **)(a1 + 16);
}

unint64_t ccsae_sizeof_pt(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(void))(a1 + 16))();
  return ((unint64_t)(cczp_bitlen(v1) + 7) >> 2) | 1;
}

_BYTE *ccsae_lexographic_order_key(void *__s1, size_t a2, void *__s2, size_t a4, char *a5)
{
  char v10;
  size_t v16;
  int v17;
  char *v18;
  const void *v19;
  size_t v20;
  char v22;

  v10 = 0;
  v22 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v22 = v10;
  if (a2 >= a4)
    v16 = a4;
  else
    v16 = a2;
  v17 = memcmp(__s1, __s2, v16);
  if (v17 < 0 || !v17 && a2 <= a4)
  {
    memcpy(a5, __s2, a4);
    v18 = &a5[a4];
    v19 = __s1;
    v20 = a2;
  }
  else
  {
    memcpy(a5, __s1, a2);
    v18 = &a5[a2];
    v19 = __s2;
    v20 = a4;
  }
  memcpy(v18, v19, v20);
  return cc_disable_dit(&v22);
}

uint64_t ccsae_gen_keys_ws(uint64_t a1, uint64_t a2, char *a3, unint64_t *a4)
{
  size_t *v8;
  unint64_t *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  char v20[96];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C874D8];
  v8 = *(size_t **)(a2 + 16);
  v9 = *(unint64_t **)a2;
  v10 = **(_QWORD **)a2;
  v11 = ((unint64_t)(cczp_bitlen(*(_QWORD *)a2) + 7) >> 3) + 19;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v10 + 3);
  v14 = *(char **)(a2 + 32);
  v15 = ccsae_sizeof_kck_internal(a2);
  sae_construct_fixed_data(v9, v14, a4, 8 * v15 + 256, v13);
  v16 = ccsae_sizeof_kck_internal(a2);
  ccsae_ctr_hmac_fixed(v8, a3, v13, v11, v20, v16 + 32);
  ccsae_sizeof_kck_internal(a2);
  __memcpy_chk();
  v17 = ccsae_sizeof_kck_internal(a2);
  v18 = *(_OWORD *)&v20[v17 + 16];
  *(_OWORD *)(a2 + 112) = *(_OWORD *)&v20[v17];
  *(_OWORD *)(a2 + 128) = v18;
  *(_QWORD *)(a1 + 16) = v12;
  return 0;
}

uint64_t sae_construct_fixed_data(unint64_t *a1, char *__s, unint64_t *a3, __int16 a4, char *a5)
{
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  uint64_t result;

  v10 = *a1;
  v11 = strlen(__s);
  v12 = (unint64_t)(cczp_bitlen((uint64_t)a1) + 7) >> 3;
  a5 += 2;
  memcpy(a5, __s, v11);
  v13 = &a5[v11];
  result = ccn_write_uint_padded(v10, a3, v12, v13);
  *(_WORD *)&v13[v12] = a4;
  return result;
}

uint64_t ccsae_ctr_hmac_fixed(size_t *a1, char *a2, char *a3, size_t a4, char *a5, size_t a6)
{
  size_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  size_t v18;
  _QWORD v20[2];
  size_t v21;
  _BYTE __src[64];
  uint64_t v23;

  v20[1] = v20;
  v23 = *MEMORY[0x1E0C874D8];
  v12 = *a1;
  MEMORY[0x1E0C86820](a1, a2, a3, a4);
  v15 = (_QWORD *)((char *)v20 - v14);
  if ((v16 & 1) == 0)
  {
    v17 = 1;
    v21 = v13 / v12;
    do
    {
      cchmac_init((uint64_t)a1, v15, v12, a2);
      *(_WORD *)a3 = v17;
      cchmac_update((uint64_t)a1, v15, a4, a3);
      cchmac_final((uint64_t)a1, v15, (uint64_t)__src);
      if (a6 >= v12)
        v18 = v12;
      else
        v18 = a6;
      memcpy(a5, __src, v18);
      ++v17;
      a5 += v12;
      a6 -= v12;
    }
    while (v17 <= v21);
  }
  cc_clear(((a1[1] + a1[2] + 19) & 0xFFFFFFFFFFFFFFF8) + a1[1], v15);
  return cc_clear(v12, __src);
}

uint64_t ccsae_gen_password_value_ws(uint64_t a1, uint64_t *a2, char *a3, int8x16_t *a4)
{
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  __int16 v14;
  uint64_t result;
  char v16;
  size_t *v17;
  uint64_t v19;

  v17 = (size_t *)a2[2];
  v7 = (unint64_t *)*a2;
  v9 = (unint64_t *)(*a2 + 24);
  v8 = *(_QWORD *)*a2;
  v10 = (unint64_t)(cczp_bitlen(*a2) + 7) >> 3;
  v16 = cczp_bitlen((uint64_t)v7);
  v19 = *(_QWORD *)(a1 + 16);
  v11 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v8);
  v12 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v8 + 4);
  v13 = (char *)a2[5];
  v14 = cczp_bitlen((uint64_t)v7);
  sae_construct_fixed_data(v7, v13, v9, v14, v12);
  ccsae_ctr_hmac_fixed(v17, a3, v12, v10 + 27, v11, v10);
  result = ccn_read_uint(v8, a4, v10, (unsigned __int8 *)v11);
  if ((v16 & 7) != 0)
    result = ccn_shift_right(v8, a4, a4, 8 - (v16 & 7));
  *(_QWORD *)(a1 + 16) = v19;
  return result;
}

unint64_t ccsae_y2_from_x_ws(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  int v15;
  int v16;
  int v17;
  char is_quadratic_residue_ws;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, *a2);
  v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v8);
  v11 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v8);
  ccn_set(v8, v10, a4);
  v12 = (unint64_t *)cczp_prime((uint64_t)a2);
  ccn_sub1(v8, v11, v12, 1uLL);
  v13 = *a2;
  v14 = (unint64_t *)cczp_prime((uint64_t)a2);
  v15 = ccn_cmp(v13, (unint64_t *)v10, v14);
  v16 = (v15 + 1) & 1;
  v17 = (v15 + 1) >> 1;
  LODWORD(v13) = v17 | v16;
  ccn_mux(v8, v17 | v16, (uint64_t *)v10, v11, (uint64_t *)v10);
  cczp_to_ws(a1, (uint64_t)a2);
  cczp_sqr_ws(a1, (uint64_t)a2);
  cczp_mul_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  cczp_sub_ws(a1, (uint64_t)a2);
  cczp_add_ws(a1, (uint64_t)a2);
  is_quadratic_residue_ws = cczp_is_quadratic_residue_ws(a1, (uint64_t)a2, a3);
  *(_QWORD *)(a1 + 16) = v9;
  return ((((unint64_t)(is_quadratic_residue_ws - 1) + 0xFFFFFFFF) >> 32) ^ 1) & ~(_DWORD)v13;
}

uint64_t ccec_rfc6637_wrap_core_ws(uint64_t a1, uint64_t *a2, uint64_t *a3, _WORD *a4, uint64_t a5, char a6, size_t a7, unsigned __int8 *a8, char *a9, uint64_t (**a10)(void), char *a11, uint64_t (**a12)(_QWORD, uint64_t, uint64_t *))
{
  rsize_t *v20;
  rsize_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  size_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  _WORD *v37;
  size_t v38;
  size_t v39;
  size_t v40;
  __int128 v41;
  uint64_t *v42;
  void *v43;
  rsize_t v44;
  uint64_t v45;
  size_t v46;
  _BYTE *v47;
  size_t v48;
  size_t v49;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  _WORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  size_t v61;
  _BYTE __s[64];
  _OWORD v63[2];
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C874D8];
  v20 = (rsize_t *)(*((uint64_t (**)(void))*a10 + 2))();
  if (a7 > 0x24)
    return 4294967289;
  v21 = v20;
  if (*v20 < *((_QWORD *)*a10 + 4))
    return 4294967289;
  v55 = a4;
  v59 = a8;
  v54 = (uint64_t *)a10[1]();
  v23 = ccecb_context_size(v54);
  v58 = &v51;
  MEMORY[0x1E0C86820](v23, v24, v25, v26);
  v53 = (char *)&v51 - v27;
  v28 = *(_QWORD *)(a1 + 16);
  v56 = *(_QWORD *)*a2;
  v57 = v28;
  v29 = (char *)(*(uint64_t (**)(uint64_t))(a1 + 24))(a1);
  v61 = (unint64_t)(cczp_bitlen(*a2) + 7) >> 3;
  v30 = ccecdh_compute_shared_secret_ws(a1, (_QWORD **)a3, a2, &v61, v29, a12);
  if ((_DWORD)v30)
  {
    v22 = v30;
  }
  else
  {
    v52 = a11;
    LOBYTE(v63[0]) = a6;
    v31 = a5;
    v32 = v59;
    __memcpy_chk();
    *(_WORD *)((char *)v63 + a7 + 1) = __rev16(pgp_key_checksum(a7, v32));
    memset((char *)v63 + a7 + 3, 37 - a7, 37 - a7);
    ccec_rfc6637_kdf((uint64_t)v21, a9, (uint64_t)*a10, v61, v29, 0x14uLL, v52, (uint64_t)__s);
    v52 = v29;
    cc_clear(v61, v29);
    v33 = ccec_rfc6637_wrap_pub_size(a3, v31);
    v34 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, (2 * v56) | 1);
    v35 = v34;
    v56 = v31;
    if ((v31 & 1) != 0)
      v36 = ccec_compact_export_pub(v34, (uint64_t)a3);
    else
      v36 = ccec_export_pub((uint64_t)a3, v34);
    v22 = v36;
    v37 = v55;
    if (!(_DWORD)v36)
    {
      *v55 = bswap32(8 * v33) >> 16;
      memcpy(v37 + 1, v35, v33);
      v38 = (size_t)v37 + v33;
      *((_BYTE *)v37 + v33 + 2) = 40;
      v39 = v33 + 3;
      v40 = (size_t)v37 + v33 + 3;
      v41 = v63[1];
      *(_OWORD *)v40 = v63[0];
      *(_OWORD *)(v40 + 16) = v41;
      *(_QWORD *)(v40 + 32) = v64;
      v42 = v54;
      v43 = v53;
      ccecb_init((uint64_t)v54);
      cc_clear(*v21, __s);
      v60 = 0;
      v22 = ccwrap_auth_encrypt((uint64_t)v42, (uint64_t)v43, 0x28uLL, v63, &v60, (_QWORD *)v40);
      v44 = ccecb_context_size(v42);
      cc_clear(v44, v43);
      v45 = v60;
      *(_BYTE *)(v38 + 2) = v60;
      if ((v56 & 2) != 0)
      {
        v46 = v45 + v39;
        v47 = (char *)v37 + v46;
        *v47 = a7;
        v48 = v61;
        v47[1] = v61;
        v49 = v46 + 2;
        memcpy((char *)v37 + v46 + 2, v59, a7);
        memcpy((char *)v37 + a7 + v49, v52, v48);
      }
    }
  }
  *(_QWORD *)(a1 + 16) = v57;
  return v22;
}

unint64_t ccecdh_pairwise_consistency_check_ws(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t (**a4)(_QWORD, uint64_t, uint64_t *))
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t result;
  unint64_t **v15;
  unint64_t v16;
  unsigned __int8 *v17;
  void *v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v28;
  unint64_t v29;

  v6 = *a2;
  v7 = **a2;
  v28 = *(_QWORD *)(a1 + 16);
  v8 = (unint64_t **)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, (4 * (v7 & 0x7FFFFFFFFFFFFFFLL)) | 2);
  *v8 = (unint64_t *)v6;
  v9 = *v6;
  v10 = (uint64_t)&v8[3 * *v6 + 2];
  ccn_set(1, (void *)v10, &REF_K);
  ccn_zero(v9 - 1, (void *)(v10 + 8));
  v11 = *(_QWORD *)(a1 + 16);
  v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 3 * *v6);
  v13 = v28;
  result = ccecdh_fast_scalar_mult_ws(a1, v6, v12, (unint64_t *)&v8[3 * **v8 + 2]);
  if (!(_DWORD)result)
  {
    result = ccec_affinify_ws(a1, (uint64_t)v6);
    *(_QWORD *)(a1 + 16) = v11;
    if ((_DWORD)result)
      goto LABEL_13;
    v15 = v8 + 2;
    v16 = (unint64_t)(cczp_bitlen((uint64_t)v6) + 7) >> 3;
    v29 = v16;
    v17 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v7);
    v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v7);
    cc_clear(v16, v17);
    cc_clear(v16, v18);
    result = ccecdh_compute_shared_secret_ws(a1, a2, v8, &v29, (char *)v17, a4);
    if ((_DWORD)result)
      goto LABEL_13;
    if (!v29)
      goto LABEL_12;
    v19 = 0;
    v20 = 0;
    do
      v20 |= v17[v19++];
    while (v29 != v19);
    if (!v20)
    {
LABEL_12:
      result = 4294967278;
LABEL_13:
      v13 = v28;
      goto LABEL_14;
    }
    v21 = (uint64_t *)*v8;
    v22 = **v8;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = (void *)(*(uint64_t (**)(uint64_t))(a1 + 24))(a1);
    result = ccecdh_fast_scalar_mult_ws(a1, v21, v24, (unint64_t *)&v15[3 * v22]);
    v13 = v28;
    if (!(_DWORD)result)
    {
      v25 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v22);
      result = ccec_affinify_x_only_ws(a1, v21, (uint64_t)v25, (uint64_t)v24);
      if (!(_DWORD)result)
      {
        v26 = cczp_bitlen((uint64_t)v21);
        ccn_write_uint_padded(v22, v25, (unint64_t)(v26 + 7) >> 3, (char *)v18);
        *(_QWORD *)(a1 + 16) = v23;
        if (v29 == v16)
        {
          result = cc_cmp_safe(v16, (char *)v17, (char *)v18);
          if (!(_DWORD)result)
            goto LABEL_13;
        }
        goto LABEL_12;
      }
    }
  }
LABEL_14:
  *(_QWORD *)(a1 + 16) = v13;
  return result;
}

uint64_t ccecdh_fast_scalar_mult_ws(uint64_t a1, uint64_t *a2, void *a3, unint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = 3 * *a2;
  v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v10);
  v12 = ccec_projectify_ws(a1, (uint64_t)a2);
  if (!(_DWORD)v12)
  {
    ccn_set(v10, a3, v11);
    v13 = ccn_bitlen(v8, a4);
    if (v13 != 1)
    {
      v14 = v13 - 2;
      do
      {
        ccec_double_ws(a1, a2);
        if (((*(unint64_t *)((char *)a4 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
          ccec_full_add_normalized_ws(a1, a2, (char *)a3, (uint64_t)a3, (char *)v11);
        --v14;
      }
      while (v14 != -1);
    }
  }
  *(_QWORD *)(a1 + 16) = v9;
  return v12;
}

uint64_t fipspost_post_kdf_ctr(char a1)
{
  rsize_t *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  rsize_t *v9;
  char *v10;
  uint64_t v11;
  rsize_t *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  const char *v18;
  const char *v19;
  const char *v20;
  rsize_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  rsize_t *v27;
  uint64_t v29;
  rsize_t *v30;
  uint64_t v32;
  rsize_t *v33;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD __s2[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C874D8];
  v43 = 0;
  v44 = 0;
  v2 = (rsize_t *)ccsha1_di();
  if (ccnistkdf_ctr_hmac_fixed(v2, 20, (uint64_t)"\xF7\x59\x17\x33\xC8\x56Y5e\x13\tu5\x19T\xD0\x15Z\xBF<", 0x3CuLL, "\x8E4~\xF5\x5D\x5F\x5E\x99\xEA\xB6\xDEpkQ\xDE\x7C\xE0\x04\xF3\x88(\x89\xE2\x59\xFFN\\\xFF\x10!g\xA5\xA4\xBDq\x15x\xD4\xCE\x17ݚ\xBEV\xE5\x1C\x1F-\xF9P\xE2\xFC\x81.\xC1\xB2\x17\xCA\x08\xD6\x014\xFED\xB0\xD8\xC4\x1B\x93\xF5\xFA\x64\xFB\x96\xF0\x0E\x5B4\xFED\xB0\xD8\xC4\x1B\x93\xF5\xFA\x64\xFB\x96\xF0\x0E\x5BFIPSPOST_USER [%llu] %s:%d: FAILED: failed ccnistkdf_ctr_hmac_fixed (SHA-1): %d\n", 0x10uLL, (char *)&v43))
  {
    mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed ccnistkdf_ctr_hmac_fixed (SHA-1): %d\n");
    return 4294967224;
  }
  v3 = "\x014\xFED\xB0\xD8\xC4\x1B\x93\xF5\xFA\x64\xFB\x96\xF0\x0E\x5B4\xFED\xB0\xD8\xC4\x1B\x93\xF5\xFA\x64\xFB\x96\xF0\x0E\x5BFIPSPOST_USER [%llu] %s:%d: FAILED: failed ccnistkdf_ctr_hmac_fixed (SHA-1): %d\n";
  if ((a1 & 0x10) == 0)
    v3 = "4\xFED\xB0\xD8\xC4\x1B\x93\xF5\xFA\x64\xFB\x96\xF0\x0E\x5BFIPSPOST_USER [%llu] %s:%d: FAILED: failed ccnistkdf_ctr_hmac_fixed (SHA-1): %d\n";
  v5 = *(_QWORD *)v3;
  v4 = *((_QWORD *)v3 + 1);
  if (v5 == v43 && v4 == v44)
  {
    v8 = 0;
  }
  else
  {
    v7 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed HMAC_SHA1 KAT\n", v7, "fipspost_post_kdf_ctr", 70);
    v8 = 4294967221;
  }
  v42 = 0;
  memset(__s2, 0, sizeof(__s2));
  v9 = (rsize_t *)ccsha256_di();
  if (ccnistkdf_ctr_hmac_fixed(v9, 32, (uint64_t)"ľ\xDB\xDD\xB6d\x93\xE7\xC7\x25\x9A;\xBB\xC2\x5F\x8C~\f\xA7\xFE(M\x92\xD4\x31\xD9\xCD\x99"
                                "\xA0\xD2\x14\xAC",
                       0x3CuLL,
                       "\x1Ci\xC5\x47fy\x1E1\\,\xC5\xC4~\xCD\x3F\xFA\xB8}\r'=\xD9\x20\xE7\x09\x55\x81L\"\x0E\xAC\xAC楔eB\xDA"
                       "\x3D\xFE$\xFFbkH\x97\x89\x8C\xAF\xB7ۃ\xBD\xFF<\x14\xFAF\xFDK",
                       0x28uLL,
                       (char *)__s2))
  {
    mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed ccnistkdf_ctr_hmac_fixed (SHA-256): %d\n");
    return 4294967224;
  }
  if ((a1 & 0x10) != 0)
    v10 = "\x01\x1D\xA4v8\xD6\xC9\xC4\xD0Mt\xD4\x64\v\xBDB\xAB\x81M\x9E\x8C\xC2\x2FC&iR9\xF9k\x06\x93\xF1\x2D\x0D\xD1\x15"
          ",\xF4\x44\x30\x1D\xA4v8\xD6\xC9\xC4\xD0Mt\xD4\x64\v\xBDB\xAB\x81M\x9E\x8C\xC2\x2FC&iR9\xF9k\x06\x93\xF1\x2D\x0D"
          "\xD1\x15,\xF4\x44\x30FIPSPOST_USER [%llu] %s:%d: FAILED: failed ccnistkdf_ctr_hmac_fixed (SHA-256): %d\n";
  else
    v10 = "\x1D\xA4v8\xD6\xC9\xC4\xD0Mt\xD4\x64\v\xBDB\xAB\x81M\x9E\x8C\xC2\x2FC&iR9\xF9k\x06\x93\xF1\x2D\x0D\xD1\x15,\xF4\x44\x30FIPSPOST_USER [%llu] %s:%d: FAILED: failed ccnistkdf_ctr_hmac_fixed (SHA-256): %d\n";
  if (memcmp(v10, __s2, 0x28uLL))
  {
    v11 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed HMAC_SHA256 KAT\n", v11, "fipspost_post_kdf_ctr", 123);
    v8 = 4294967221;
  }
  v39 = 0;
  v40 = 0;
  v12 = (rsize_t *)ccsha512_di();
  if (ccnistkdf_ctr_hmac_fixed(v12, 64, (uint64_t)"\xDD\x5D\xBDEY>\xE2\xAC\x13\x97H\xE7\x64\x5BE\x0F\"=/\xF2\x97\xB7\x3F\xD7\x1C\xBC\xEB\xE7\x1DAe<\x95\v\x88P\r\xE5\x32\x2D\x99\xEF\x18\xDF\xDD\x30B\x82\x94ĳ\tOL\x95C4哽\x98.\xC6\x14", 0x3CuLL, "\xB5\v\f\x96<k04\xB8\xCF\x19\xCD\x3F\\N\xBEOI\x85\xAF\f\x03\xE5\x75\xDBb\xE6\xFD\xF1\xEC\xFE\x4F(\xB9]|\xE1\x6D\xF8XC$n\x15WΕ\xBB&̚!\x97K\xBD.\xB6\x9E\x83U", 0x10uLL, (char *)&v39))
  {
    mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed ccnistkdf_ctr_hmac_fixed (SHA-512): %d\n");
    return 4294967224;
  }
  v13 = "\x01\xE5\x99\x3B\xF9\xBD*\xA1\xC4\x57F\x04.\x12Y\x81U";
  if ((a1 & 0x10) == 0)
    v13 = "\xE5\x99\x3B\xF9\xBD*\xA1\xC4\x57F\x04.\x12Y\x81U";
  v15 = *(_QWORD *)v13;
  v14 = *((_QWORD *)v13 + 1);
  if (v15 != v39 || v14 != v40)
  {
    v17 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed HMAC_SHA512 KAT\n", v17, "fipspost_post_kdf_ctr", 174);
    v8 = 4294967221;
  }
  v37 = 0;
  v38 = 0;
  if ((a1 & 0x10) != 0)
    v18 = "\x01Z\xC9\xF7\xEC\x38\xF6\x8Bv#\x94\xD3\xCA\xEC\xEB\xA5\xBB";
  else
    v18 = "Z\xC9\xF7\xEC\x38\xF6\x8Bv#\x94\xD3\xCA\xEC\xEB\xA5\xBB";
  if ((a1 & 0x10) != 0)
    v19 = "\x01h\x8B\x9E(#+vT\xF95\x93\xA5\xC3\xF085";
  else
    v19 = "h\x8B\x9E(#+vT\xF95\x93\xA5\xC3\xF085";
  if ((a1 & 0x10) != 0)
    v20 = "\x01\xFE\xA9j\xF5\x19\x2A\xD4'\x1Dy\xB9\x80\x80;W\x11";
  else
    v20 = "\xFE\xA9j\xF5\x19\x2A\xD4'\x1Dy\xB9\x80\x80;W\x11";
  v21 = (rsize_t *)ccsha3_224_di();
  if (ccnistkdf_ctr_hmac_fixed(v21, 20, (uint64_t)"\xF7\x59\x17\x33\xC8\x56Y5e\x13\tu5\x19T\xD0\x15Z\xBF<", 0x3CuLL, "\x8E4~\xF5\x5D\x5F\x5E\x99\xEA\xB6\xDEpkQ\xDE\x7C\xE0\x04\xF3\x88(\x89\xE2\x59\xFFN\\\xFF\x10!g\xA5\xA4\xBDq\x15x\xD4\xCE\x17ݚ\xBEV\xE5\x1C\x1F-\xF9P\xE2\xFC\x81.\xC1\xB2\x17\xCA\x08\xD6\x014\xFED\xB0\xD8\xC4\x1B\x93\xF5\xFA\x64\xFB\x96\xF0\x0E\x5B4\xFED\xB0\xD8\xC4\x1B\x93\xF5\xFA\x64\xFB\x96\xF0\x0E\x5BFIPSPOST_USER [%llu] %s:%d: FAILED: failed ccnistkdf_ctr_hmac_fixed (SHA-1): %d\n", 0x10uLL, (char *)&v37))
  {
    mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed ccnistkdf_ctr_hmac_fixed (SHA3-224): %d\n");
    return 4294967224;
  }
  v22 = (uint64_t *)&unk_1DEE294F8;
  if ((a1 & 0x10) == 0)
    v22 = (uint64_t *)&unk_1DEE2950A;
  v24 = *v22;
  v23 = v22[1];
  if (v24 != v37 || v23 != v38)
  {
    v26 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed HMAC_SHA3_224 KAT\n", v26, "fipspost_post_kdf_ctr", 213);
    v8 = 4294967221;
  }
  v27 = (rsize_t *)ccsha3_256_di();
  if (ccnistkdf_ctr_hmac_fixed(v27, 20, (uint64_t)"\xF7\x59\x17\x33\xC8\x56Y5e\x13\tu5\x19T\xD0\x15Z\xBF<", 0x3CuLL, "\x8E4~\xF5\x5D\x5F\x5E\x99\xEA\xB6\xDEpkQ\xDE\x7C\xE0\x04\xF3\x88(\x89\xE2\x59\xFFN\\\xFF\x10!g\xA5\xA4\xBDq\x15x\xD4\xCE\x17ݚ\xBEV\xE5\x1C\x1F-\xF9P\xE2\xFC\x81.\xC1\xB2\x17\xCA\x08\xD6\x014\xFED\xB0\xD8\xC4\x1B\x93\xF5\xFA\x64\xFB\x96\xF0\x0E\x5B4\xFED\xB0\xD8\xC4\x1B\x93\xF5\xFA\x64\xFB\x96\xF0\x0E\x5BFIPSPOST_USER [%llu] %s:%d: FAILED: failed ccnistkdf_ctr_hmac_fixed (SHA-1): %d\n", 0x10uLL, (char *)&v37))
  {
    mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed ccnistkdf_ctr_hmac_fixed (SHA3-256): %d\n");
    return 4294967224;
  }
  if (*(_QWORD *)v18 != v37 || *((_QWORD *)v18 + 1) != v38)
  {
    v29 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed HMAC_SHA3_256 KAT\n", v29, "fipspost_post_kdf_ctr", 227);
    v8 = 4294967221;
  }
  v30 = (rsize_t *)ccsha3_384_di();
  if (ccnistkdf_ctr_hmac_fixed(v30, 20, (uint64_t)"\xF7\x59\x17\x33\xC8\x56Y5e\x13\tu5\x19T\xD0\x15Z\xBF<", 0x3CuLL, "\x8E4~\xF5\x5D\x5F\x5E\x99\xEA\xB6\xDEpkQ\xDE\x7C\xE0\x04\xF3\x88(\x89\xE2\x59\xFFN\\\xFF\x10!g\xA5\xA4\xBDq\x15x\xD4\xCE\x17ݚ\xBEV\xE5\x1C\x1F-\xF9P\xE2\xFC\x81.\xC1\xB2\x17\xCA\x08\xD6\x014\xFED\xB0\xD8\xC4\x1B\x93\xF5\xFA\x64\xFB\x96\xF0\x0E\x5B4\xFED\xB0\xD8\xC4\x1B\x93\xF5\xFA\x64\xFB\x96\xF0\x0E\x5BFIPSPOST_USER [%llu] %s:%d: FAILED: failed ccnistkdf_ctr_hmac_fixed (SHA-1): %d\n", 0x10uLL, (char *)&v37))
  {
    mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed ccnistkdf_ctr_hmac_fixed (SHA3-384): %d\n");
    return 4294967224;
  }
  if (*(_QWORD *)v19 != v37 || *((_QWORD *)v19 + 1) != v38)
  {
    v32 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed HMAC_SHA3_384 KAT\n", v32, "fipspost_post_kdf_ctr", 241);
    v8 = 4294967221;
  }
  v33 = (rsize_t *)ccsha3_512_di();
  if (ccnistkdf_ctr_hmac_fixed(v33, 20, (uint64_t)"\xF7\x59\x17\x33\xC8\x56Y5e\x13\tu5\x19T\xD0\x15Z\xBF<", 0x3CuLL, "\x8E4~\xF5\x5D\x5F\x5E\x99\xEA\xB6\xDEpkQ\xDE\x7C\xE0\x04\xF3\x88(\x89\xE2\x59\xFFN\\\xFF\x10!g\xA5\xA4\xBDq\x15x\xD4\xCE\x17ݚ\xBEV\xE5\x1C\x1F-\xF9P\xE2\xFC\x81.\xC1\xB2\x17\xCA\x08\xD6\x014\xFED\xB0\xD8\xC4\x1B\x93\xF5\xFA\x64\xFB\x96\xF0\x0E\x5B4\xFED\xB0\xD8\xC4\x1B\x93\xF5\xFA\x64\xFB\x96\xF0\x0E\x5BFIPSPOST_USER [%llu] %s:%d: FAILED: failed ccnistkdf_ctr_hmac_fixed (SHA-1): %d\n", 0x10uLL, (char *)&v37))
  {
    mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed ccnistkdf_ctr_hmac_fixed (SHA3-512): %d\n");
    return 4294967224;
  }
  if (*(_QWORD *)v20 != v37 || *((_QWORD *)v20 + 1) != v38)
  {
    v36 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed HMAC_SHA3_512 KAT\n", v36, "fipspost_post_kdf_ctr", 255);
    return 4294967221;
  }
  return v8;
}

uint64_t cczp_power_blinded_ws(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, unint64_t a5, uint64_t a6, uint64_t (**a7)(_QWORD, unint64_t, uint64_t))
{
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t result;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21[2];

  v21[1] = *MEMORY[0x1E0C874D8];
  if (a5 <= 0x20)
    v13 = 32;
  else
    v13 = a5;
  v14 = cczp_n(a2);
  v15 = (unint64_t *)cczp_prime(a2);
  if ((ccn_cmp(v14, a4, v15) & 0x80000000) == 0)
    return 4294967289;
  v17 = *(_QWORD *)(a1 + 16);
  v18 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v14);
  v19 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v14);
  result = ccn_random_bits(32, (uint64_t)v21, a7);
  if (!(_DWORD)result)
  {
    v21[0] |= 0x80000000uLL;
    ccn_mux_seed_mask(v21[0]);
    ccn_divmod_ws(a1, (unint64_t)(v13 + 63) >> 6, a6, (unint64_t)(v13 + 63) >> 6, (uint64_t)v18, 1, (char *)&v20, (uint64_t)v21);
    result = cczp_power_ws(a1, a2, v19, a4, v13 - 31, v18);
    if (!(_DWORD)result)
    {
      result = cczp_power_ws(a1, a2, a3, a4, 32, &v20);
      if (!(_DWORD)result)
      {
        result = cczp_power_ws(a1, a2, v18, (unint64_t *)v19, 32, v21);
        if (!(_DWORD)result)
        {
          cczp_mul_ws(a1, a2);
          result = 0;
        }
      }
    }
  }
  *(_QWORD *)(a1 + 16) = v17;
  return result;
}

uint64_t ccec_compact_import_priv_size(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  if (a1 <= 63)
  {
    if (a1 == 48)
    {
      v7 = 192;
      goto LABEL_17;
    }
    if (a1 == 56)
    {
      v7 = 224;
      goto LABEL_17;
    }
LABEL_16:
    v7 = 0;
    goto LABEL_17;
  }
  if (a1 == 64)
  {
    v7 = 256;
    goto LABEL_17;
  }
  if (a1 == 96)
  {
    v7 = 384;
    goto LABEL_17;
  }
  if (a1 != 132)
    goto LABEL_16;
  v7 = 521;
LABEL_17:
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccec_compact_import_priv(unint64_t *a1, uint64_t a2, unsigned __int8 *a3, unint64_t **a4)
{
  char v8;
  unint64_t v14;
  uint64_t v15;
  uint64_t uint;
  unint64_t v17;
  unint64_t **v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;

  v8 = 0;
  v23 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v23 = v8;
  v14 = cczp_bitlen((uint64_t)a1) + 7;
  if (((unint64_t)(cczp_bitlen((uint64_t)&a1[5 * *a1 + 4]) + 7) >> 3) + (v14 >> 3) == a2)
  {
    *a4 = a1;
    v15 = cczp_bitlen((uint64_t)a1);
    uint = ccec_compact_import_pub(a1, (unint64_t)(v15 + 7) >> 3, a3, a4);
    if (!(_DWORD)uint)
    {
      v17 = *a1;
      v18 = &a4[3 * **a4 + 2];
      v19 = (unint64_t)(cczp_bitlen((uint64_t)&a1[5 * *a1 + 4]) + 7) >> 3;
      v20 = cczp_bitlen((uint64_t)a1);
      uint = ccn_read_uint(v17, v18, v19, &a3[(unint64_t)(v20 + 7) >> 3]);
    }
    v21 = uint;
  }
  else
  {
    v21 = 4294967124;
  }
  cc_disable_dit(&v23);
  return v21;
}

uint64_t ltc_des_ecb_encrypt(uint64_t a1, uint64_t a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v6;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C874D8];
  if (a2)
  {
    v6 = a2;
    do
    {
      --v6;
      v8 = *a3;
      v9 = a3[1];
      a3 += 2;
      v12 = bswap32(v8);
      v13 = bswap32(v9);
      desfunc(&v12, a1);
      v10 = bswap32(v13);
      *a4 = bswap32(v12);
      a4[1] = v10;
      a4 += 2;
    }
    while (v6);
  }
  return 0;
}

void *ccec_cp_192()
{
  return &ccec_cp192;
}

uint64_t ccn_mod_192_ws(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  _BOOL8 v8;
  _BOOL8 v9;
  unint64_t *v10;
  BOOL v11;
  uint64_t v13[3];
  uint64_t v14[3];
  uint64_t v15[3];
  uint64_t v16[4];

  v16[3] = *MEMORY[0x1E0C874D8];
  v7 = a4[4];
  v16[0] = a4[3];
  v16[1] = v16[0];
  v16[2] = 0;
  v15[0] = 0;
  v15[1] = v7;
  v15[2] = v7;
  v14[0] = a4[5];
  v14[1] = v14[0];
  v14[2] = v14[0];
  v8 = ccn_add_ws(a1, 3, a3, a4, v16);
  v9 = ccn_add_ws(a1, 3, a3, a3, v15) + v8;
  v13[0] = v9 + ccn_add_ws(a1, 3, a3, a3, v14);
  v13[1] = v13[0];
  v13[2] = 0;
  LOBYTE(v9) = ccn_add_ws(a1, 3, v13, a3, v13);
  v10 = (unint64_t *)cczp_prime(a2);
  v11 = ccn_sub_ws(a1, 3, a3, v13, v10);
  return ccn_mux(3, !v11 | v9, a3, a3, v13);
}

uint64_t fipspost_post_rsa_enc_dec(char a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  size_t *v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t (*v27)(_QWORD *, uint64_t);
  void (*v28)(uint64_t);
  unint64_t v29;
  char v30[256];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C874D8];
  v2 = sizeof_struct_cche_cipher_plain_ctx() + 8;
  v3 = sizeof_struct_ccpolyzp_po2cyc();
  v4 = (v2
      - 1
      + 2 * v2
      + (v3 - 1 + 32 * v3) / v3 * v3
      + 3 * (v3 - 1 + 32 * v3) / v3 * v3
      - v3 * (((v3 - 1 + 32 * v3) / v3) >> 1)
      + 8 * (v3 + v3 * (((v3 - 1 + 32 * v3) / v3) >> 1)))
     / v3;
  v5 = (sizeof_struct_ccrns_mul_modulus() + v3 - 1) / v3 + 353;
  v6 = CCRSA_CRT_POWER_BLINDED_WORKSPACE_N(0x20uLL);
  if (v5 <= v6)
    v7 = v6;
  else
    v7 = v5;
  v8 = cc_malloc_clear(8 * (v4 + v7) + 768);
  v25[0] = v8;
  v9 = sizeof_struct_cche_cipher_plain_ctx() + 8;
  v10 = sizeof_struct_ccpolyzp_po2cyc();
  v11 = (v9
       - 1
       + 2 * v9
       + (v10 - 1 + 32 * v10) / v10 * v10
       + 3 * (v10 - 1 + 32 * v10) / v10 * v10
       - v10 * (((v10 - 1 + 32 * v10) / v10) >> 1)
       + 8 * (v10 + v10 * (((v10 - 1 + 32 * v10) / v10) >> 1)))
      / v10;
  v12 = (sizeof_struct_ccrns_mul_modulus() + v10 - 1) / v10 + 353;
  v13 = CCRSA_CRT_POWER_BLINDED_WORKSPACE_N(0x20uLL);
  if (v12 <= v13)
    v14 = v13;
  else
    v14 = v12;
  v25[1] = v11 + v14 + 96;
  v26 = 0;
  v27 = cc_ws_alloc;
  v28 = cc_ws_free;
  if (!v8)
    return 4294967283;
  v15 = (uint64_t *)cc_ws_alloc(v25, 262);
  *v15 = 32;
  if (ccrsa_import_priv_ws((uint64_t)v25, (unint64_t *)v15, 1191, FIPS_RSA_OAEP_KEY))
  {
    mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccrsa_import_priv\n");
  }
  else
  {
    v29 = 256;
    v17 = (uint64_t *)ccrsa_ctx_public(v15);
    v18 = (size_t *)ccsha256_di();
    if (ccrsa_encrypt_oaep_ws((uint64_t)v25, v17, v18, (uint64_t (**)(_QWORD, size_t, char *))&ccrng_zero, &v29, v30, 0x20uLL, &FIPS_RSA_OAEP_MESSAGE, 0, 0))
    {
      mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccrsa_encrypt_oaep\n");
    }
    else
    {
      if (!fipspost_post_rsa_oaep_decrypt_ws((uint64_t)v25, a1, v15, v29))
      {
        v19 = 0;
        goto LABEL_16;
      }
      mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: fipspost_post_rsa_oaep_consistency\n");
    }
  }
  v19 = -72;
LABEL_16:
  v26 = 0;
  v20 = (uint64_t *)v27(v25, 262);
  *v20 = 32;
  if (ccrsa_import_priv_ws((uint64_t)v25, (unint64_t *)v20, 1191, FIPS_RSA_OAEP_KEY))
  {
    v21 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccrsa_import_priv\n", v21, "fipspost_post_rsa_oaep_kat_ws", 132);
    v22 = -72;
  }
  else if (fipspost_post_rsa_oaep_decrypt_ws((uint64_t)v25, a1, v20, 0x100uLL))
  {
    v23 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: fipspost_post_rsa_oaep_kat\n", v23, "fipspost_post_rsa_oaep_kat_ws", 143);
    v22 = -75;
  }
  else
  {
    v22 = 0;
  }
  v16 = v22 | v19;
  v26 = 0;
  v28((uint64_t)v25);
  return v16;
}

uint64_t fipspost_post_rsa_oaep_decrypt_ws(uint64_t a1, char a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;
  size_t v15;
  unsigned __int8 v16[256];
  _QWORD v17[33];

  v17[32] = *MEMORY[0x1E0C874D8];
  v15 = 256;
  __memcpy_chk();
  if ((a2 & 0x10) != 0)
    v16[0] ^= 0xAAu;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = (uint64_t *)ccsha256_di();
  if (ccrsa_decrypt_oaep_blinded_ws(a1, (uint64_t (**)(_QWORD, uint64_t, uint64_t))&ccrng_zero, a3, v9, &v15, v17, a4, v16, 0, 0))
  {
    v10 = mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: ccrsa_decrypt_oaep\n", v10, "fipspost_post_rsa_oaep_decrypt_ws", 56);
    result = 4294967224;
  }
  else
  {
    if (v15 == 32)
    {
      if (v17[0] == 0xE7E6E5E4E3E2E1E0
        && v17[1] == 0xEFEEEDECEBEAE9E8
        && v17[2] == 0xF7F6F5F4F3F2F1F0
        && v17[3] == 0xFFFEFDFCFBFAF9F8)
      {
        result = 0;
        goto LABEL_19;
      }
      mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: plaintext != message\n");
    }
    else
    {
      mach_absolute_time();
      printf("FIPSPOST_USER [%llu] %s:%d: FAILED: len(plaintext) != len(message)\n");
    }
    result = 4294967221;
  }
LABEL_19:
  *(_QWORD *)(a1 + 16) = v8;
  return result;
}

uint64_t ccsae_generate_commitment_init(uint64_t a1)
{
  char v1;
  int v7;
  uint64_t v8;
  char v10;

  v1 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v10 = v1;
  v7 = *(unsigned __int8 *)(a1 + 24);
  if (v7 == CCSAE_STATE_INIT)
  {
    v8 = 0;
    *(_WORD *)(a1 + 48) = 256;
    *(_BYTE *)(a1 + 50) = 0;
    *(_BYTE *)(a1 + 24) = CCSAE_STATE_COMMIT_INIT | v7;
  }
  else
  {
    v8 = 4294967210;
  }
  cc_disable_dit(&v10);
  return v8;
}

uint64_t ccsae_generate_commitment_partial(uint64_t **a1, void *a2, size_t a3, void *a4, size_t a5, char *a6, size_t a7, char *a8, unint64_t a9, char a10)
{
  char v18;
  uint64_t *v24;
  uint64_t commitment_partial_ws;
  _QWORD v27[4];
  void (*v28)(uint64_t);
  char v29;

  v18 = 0;
  v29 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v18 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v18 = 1;
    }
  }
  v29 = v18;
  v24 = *a1;
  v27[0] = cc_malloc_clear(104 * **a1);
  v27[1] = 13 * *v24;
  v27[2] = 0;
  v27[3] = cc_ws_alloc;
  v28 = cc_ws_free;
  if (v27[0])
  {
    commitment_partial_ws = ccsae_generate_commitment_partial_ws((uint64_t)v27, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    v28((uint64_t)v27);
  }
  else
  {
    commitment_partial_ws = 4294967283;
  }
  cc_disable_dit(&v29);
  return commitment_partial_ws;
}

uint64_t ccsae_generate_commitment_partial_ws(uint64_t a1, uint64_t **a2, void *__s1, size_t a4, void *__s2, size_t a6, char *a7, size_t a8, char *a9, unint64_t a10, unsigned __int8 a11)
{
  int v11;
  int v13;
  int v17;
  int v18;
  uint64_t result;
  uint64_t *v21;
  int v22;
  int v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  size_t v35;
  char v36;
  int v37;
  _QWORD **v38;
  uint64_t v39;
  int v40;
  size_t v41;
  uint64_t v42;
  size_t *v43;
  const void *v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  char v48;
  char v49[32];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C874D8];
  v11 = *((unsigned __int8 *)a2 + 24);
  if (v11 != CCSAE_STATE_COMMIT_UPDATE && v11 != CCSAE_STATE_COMMIT_INIT)
    return 4294967210;
  v13 = a11;
  if (!a11)
    return 4294967289;
  result = 4294967289;
  if (a4 <= 0x10 && a6 <= 0x10 && a8 <= 0x40 && a10 <= 0x40)
  {
    v17 = *((unsigned __int8 *)a2 + 25);
    v18 = v17 - (*((_BYTE *)a2 + 49) - 1);
    if (v17 == (*((_BYTE *)a2 + 49) - 1))
    {
      return 0;
    }
    else
    {
      v41 = a10;
      if (v18 <= a11)
        v13 = v18;
      v47 = v13;
      v21 = a2[2];
      v45 = *a2;
      v46 = *v45;
      v22 = *((unsigned __int8 *)a2 + 48);
      v23 = *((unsigned __int8 *)a2 + 50);
      v44 = (const void *)(a6 + a4);
      v24 = ccsae_lexographic_order_key(__s1, a4, __s2, a6, v49);
      v43 = &v41;
      v42 = *(_QWORD *)(a1 + 16);
      MEMORY[0x1E0C86820](v24, v25, v26, v27);
      v29 = (size_t *)((char *)&v41 - v28);
      cchmac_init((uint64_t)v21, (size_t *)((char *)&v41 - v28), (size_t)v44, v49);
      v30 = cchmac_update((uint64_t)v21, v29, a8, a7);
      if (a9)
        v30 = cchmac_update((uint64_t)v21, v29, v41, a9);
      MEMORY[0x1E0C86820](v30, v31, ((v21[1] + v21[2] + 19) & 0xFFFFFFFFFFFFFFF8) + v21[1], v32);
      v34 = (char *)&v41 - v33;
      memcpy((char *)&v41 - v33, v29, v35);
      v36 = v47;
      if ((_BYTE)v47)
      {
        v37 = 0;
        v38 = a2 + 18;
        v44 = v34;
        do
        {
          v48 = *((_BYTE *)a2 + 49) + v37;
          memcpy(v29, v44, ((v21[1] + v21[2] + 19) & 0xFFFFFFFFFFFFFFF8) + v21[1]);
          cchmac_update((uint64_t)v21, v29, 1uLL, &v48);
          cchmac_final((uint64_t)v21, v29, (uint64_t)&v38[5 * **a2]);
          ccsae_gen_password_value_ws(a1, (uint64_t *)a2, (char *)&v38[5 * **a2], (int8x16_t *)&v38[8 * **a2]);
          ccn_mux(v46, v23, (uint64_t *)a2 + 18, (uint64_t *)a2 + 18, (uint64_t *)&v38[8 * **a2]);
          v39 = **a2;
          v22 = *((_BYTE *)&v38[5 * v39 - 1] + *v21 + 7) & ~(_BYTE)v23 & 1 | v22 & -v23;
          v40 = ccsae_y2_from_x_ws(a1, v45, &v38[v39], a2 + 18);
          v36 = v47;
          v23 |= v40;
          ++v37;
        }
        while (v37 < v47);
      }
      *((_BYTE *)a2 + 48) = v22;
      *((_BYTE *)a2 + 50) = v23;
      *((_BYTE *)a2 + 49) += v36;
      *((_BYTE *)a2 + 24) |= CCSAE_STATE_COMMIT_UPDATE;
      *(_QWORD *)(a1 + 16) = v42;
      if (*((unsigned __int8 *)a2 + 49) - 1 == *((unsigned __int8 *)a2 + 25))
        return 0;
      else
        return 4294967163;
    }
  }
  return result;
}

uint64_t ccsae_generate_commitment_finalize(uint64_t a1, char *a2)
{
  char v4;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t commitment_shared_ws;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t (*v19)(_QWORD *, uint64_t);
  void (*v20)(uint64_t);
  char v21;

  v4 = 0;
  v21 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v21 = v4;
  v10 = *(_QWORD **)a1;
  v17[0] = cc_malloc_clear(216 * **(_QWORD **)a1);
  v17[1] = 27 * *v10;
  v18 = 0;
  v19 = cc_ws_alloc;
  v20 = cc_ws_free;
  if (!v17[0])
  {
    commitment_shared_ws = 4294967283;
    goto LABEL_19;
  }
  if (*(unsigned __int8 *)(a1 + 24) != CCSAE_STATE_COMMIT_UPDATE)
  {
    commitment_shared_ws = 4294967210;
LABEL_18:
    cc_ws_free((uint64_t)v17);
    goto LABEL_19;
  }
  if (*(unsigned __int8 *)(a1 + 49) <= *(unsigned __int8 *)(a1 + 25))
  {
    commitment_shared_ws = 4294967164;
    goto LABEL_18;
  }
  if (!*(_BYTE *)(a1 + 50))
  {
    commitment_shared_ws = 4294967211;
    goto LABEL_18;
  }
  v11 = *(_QWORD *)a1;
  v12 = *(_BYTE *)(a1 + 48);
  v13 = cc_ws_alloc(v17, 3 * **(_QWORD **)a1);
  v14 = cczp_sqrt_ws((uint64_t)v17, v11);
  if ((_DWORD)v14
    || (cczp_from_ws((uint64_t)v17, v11),
        cczp_cond_negate(v11, *(_BYTE *)(a1 + 144 + 8 * **(_QWORD **)a1) & 1 ^ v12 & 1, (uint64_t *)(a1 + 144 + 8 * **(_QWORD **)a1), (unint64_t *)(a1 + 144 + 8 * **(_QWORD **)a1)), v14 = ccec_projectify_ws((uint64_t)v17, v11), (_DWORD)v14))
  {
    commitment_shared_ws = v14;
  }
  else
  {
    commitment_shared_ws = ccsae_generate_commitment_shared_ws((uint64_t)v17, (uint64_t *)a1, v13, a2);
    if (!(_DWORD)commitment_shared_ws)
    {
      *(_DWORD *)(a1 + 28) = 1;
      *(_BYTE *)(a1 + 24) |= CCSAE_STATE_COMMIT_GENERATED;
    }
  }
  v18 = 0;
  v20((uint64_t)v17);
LABEL_19:
  cc_disable_dit(&v21);
  return commitment_shared_ws;
}

uint64_t ccsae_generate_commitment(uint64_t **a1, void *a2, size_t a3, void *a4, size_t a5, char *a6, size_t a7, char *a8, unint64_t a9, char *a10)
{
  char v18;
  uint64_t commitment_init;
  char v26;

  v18 = 0;
  v26 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v18 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v18 = 1;
    }
  }
  v26 = v18;
  commitment_init = ccsae_generate_commitment_init((uint64_t)a1);
  if (!(_DWORD)commitment_init)
  {
    commitment_init = ccsae_generate_commitment_partial(a1, a2, a3, a4, a5, a6, a7, a8, a9, 40);
    if (!(_DWORD)commitment_init)
      commitment_init = ccsae_generate_commitment_finalize((uint64_t)a1, a10);
  }
  cc_disable_dit(&v26);
  return commitment_init;
}

uint64_t ccsae_generate_h2c_commit_finalize(_QWORD *a1, char *a2)
{
  char v4;
  _QWORD *v10;
  uint64_t h2c_commit_finalize_ws;
  _QWORD v13[4];
  void (*v14)(uint64_t);
  char v15;

  v4 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v15 = v4;
  v10 = (_QWORD *)*a1;
  v13[0] = cc_malloc_clear(192 * *(_QWORD *)*a1);
  v13[1] = 24 * *v10;
  v13[2] = 0;
  v13[3] = cc_ws_alloc;
  v14 = cc_ws_free;
  if (v13[0])
  {
    h2c_commit_finalize_ws = ccsae_generate_h2c_commit_finalize_ws((uint64_t)v13, (uint64_t)a1, a2);
    v14((uint64_t)v13);
  }
  else
  {
    h2c_commit_finalize_ws = 4294967283;
  }
  cc_disable_dit(&v15);
  return h2c_commit_finalize_ws;
}

uint64_t ccsae_generate_h2c_commit_finalize_ws(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t result;

  if (*(unsigned __int8 *)(a2 + 24) != CCSAE_STATE_COMMIT_UPDATE)
    return 4294967210;
  result = ccsae_generate_commitment_shared_ws(a1, (uint64_t *)a2, a2 + 144, a3);
  if (!(_DWORD)result)
  {
    *(_DWORD *)(a2 + 28) = 2;
    *(_BYTE *)(a2 + 24) |= CCSAE_STATE_COMMIT_GENERATED;
  }
  return result;
}

uint64_t ccsae_generate_h2c_commit_init(uint64_t **a1, void *a2, size_t a3, void *a4, size_t a5, uint64_t a6, uint64_t a7)
{
  char v13;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t h2c_commit_init_ws;
  _QWORD v29[4];
  void (*v30)(uint64_t);
  char v31;

  v13 = 0;
  v31 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v13 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v13 = 1;
    }
  }
  v31 = v13;
  v19 = *a1;
  v20 = **a1;
  v21 = sizeof_struct_cche_galois_key();
  v22 = sizeof_struct_ccpolyzp_po2cyc();
  v29[0] = cc_malloc_clear(8 * ((v21 + v22 + 3 * v20 * v22 - 1) / v22 + 28 * v20));
  v23 = *v19;
  v24 = sizeof_struct_cche_galois_key();
  v25 = sizeof_struct_ccpolyzp_po2cyc();
  v29[1] = (v24 + v25 + 3 * v23 * v25 - 1) / v25 + 28 * v23;
  v29[2] = 0;
  v29[3] = cc_ws_alloc;
  v30 = cc_ws_free;
  if (v29[0])
  {
    h2c_commit_init_ws = ccsae_generate_h2c_commit_init_ws((uint64_t)v29, (uint64_t)a1, a2, a3, a4, a5, a6, a7);
    v30((uint64_t)v29);
  }
  else
  {
    h2c_commit_init_ws = 4294967283;
  }
  cc_disable_dit(&v31);
  return h2c_commit_init_ws;
}

uint64_t ccsae_generate_h2c_commit_init_ws(uint64_t a1, uint64_t a2, void *a3, size_t a4, void *a5, size_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t result;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t (**v22)(_QWORD, uint64_t, uint64_t *);
  uint64_t **v23;
  char *v24;
  _OWORD v29[4];
  unsigned __int8 v30[64];
  _QWORD v31[8];
  char v32[32];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C874D8];
  if (*(unsigned __int8 *)(a2 + 24) != CCSAE_STATE_INIT)
    return 4294967210;
  v12 = *(uint64_t **)(a2 + 16);
  v13 = *(uint64_t **)a2;
  v22 = *(uint64_t (***)(_QWORD, uint64_t, uint64_t *))(a2 + 8);
  v14 = **(_QWORD **)a2;
  v15 = *v12;
  memset(v29, 0, sizeof(v29));
  v16 = *(_QWORD *)(a1 + 16);
  v17 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v14);
  v24 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v14);
  v23 = (uint64_t **)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, (unint64_t)(24 * v14 + 23) >> 3);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 3 * v14);
  result = 4294967289;
  if (a4 <= 0x10 && a6 <= 0x10)
  {
    v19 = (unint64_t)(v15 + 7) >> 3;
    ccsae_lexographic_order_key(a3, a4, a5, a6, v32);
    cchmac((uint64_t)v12, *v12, (uint64_t)v29, a6 + a4, v32, (uint64_t)v30);
    result = ccn_read_uint(v19, v31, *v12, v30);
    if (!(_DWORD)result)
    {
      v20 = (void *)cczp_prime((uint64_t)&v13[5 * v14 + 4]);
      ccn_set(v14, v17, v20);
      *v17 &= ~1uLL;
      ccn_divmod_ws(a1, v19, (uint64_t)v31, 0, 0, v14, v24, (uint64_t)v17);
      ccn_add1_ws(a1, v14, v24, (uint64_t *)v24, 1);
      *v23 = v13;
      result = ccec_import_pub_ws(a1, v13, a8, a7, v23);
      if (!(_DWORD)result)
      {
        result = ccec_validate_point_and_projectify_ws(a1, v13, v21, (unint64_t *)v23 + 2);
        if (!(_DWORD)result)
        {
          result = ccec_mult_blinded_ws(a1, v13, a2 + 144, (unint64_t *)v24, v21, v22);
          if (!(_DWORD)result)
            *(_BYTE *)(a2 + 24) |= CCSAE_STATE_COMMIT_UPDATE;
        }
      }
    }
  }
  *(_QWORD *)(a1 + 16) = v16;
  return result;
}

uint64_t ccsae_generate_h2c_commit(uint64_t **a1, void *a2, size_t a3, void *a4, size_t a5, uint64_t a6, uint64_t a7, char *a8)
{
  char v13;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t h2c_commit_init_ws;
  uint64_t v31;
  _QWORD v36[4];
  void (*v37)(uint64_t);
  char v38;

  v13 = 0;
  v38 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v13 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v13 = 1;
    }
  }
  v38 = v13;
  v19 = **a1;
  v20 = sizeof_struct_cche_galois_key();
  v21 = sizeof_struct_ccpolyzp_po2cyc();
  v22 = 3 * v19;
  v23 = 28 * v19;
  v24 = (v20 + v21 + v21 * 3 * v19 - 1) / v21 + 28 * v19;
  v25 = 24 * v19;
  if (v24 <= 24 * v19)
    v24 = 24 * v19;
  v26 = cc_malloc_clear(8 * v24);
  v36[0] = v26;
  v27 = sizeof_struct_cche_galois_key();
  v28 = sizeof_struct_ccpolyzp_po2cyc();
  v29 = (v27 + v28 + v28 * v22 - 1) / v28 + v23;
  if (v29 <= 8 * v22)
    v29 = v25;
  v36[1] = v29;
  v36[2] = 0;
  v36[3] = cc_ws_alloc;
  v37 = cc_ws_free;
  if (v26)
  {
    h2c_commit_init_ws = ccsae_generate_h2c_commit_init_ws((uint64_t)v36, (uint64_t)a1, a2, a3, a4, a5, a6, a7);
    if (!(_DWORD)h2c_commit_init_ws)
      h2c_commit_init_ws = ccsae_generate_h2c_commit_finalize_ws((uint64_t)v36, (uint64_t)a1, a8);
    v31 = h2c_commit_init_ws;
    v37((uint64_t)v36);
  }
  else
  {
    v31 = 4294967283;
  }
  cc_disable_dit(&v38);
  return v31;
}

uint64_t ccsae_generate_commitment_shared_ws(uint64_t a1, uint64_t *a2, uint64_t a3, char *a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)(_QWORD, unint64_t, void *);
  unint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;

  v8 = (uint64_t *)*a2;
  v9 = *(_QWORD *)*a2;
  v10 = cczp_bitlen(*a2);
  v11 = (uint64_t (**)(_QWORD, unint64_t, void *))a2[1];
  v16 = *(_QWORD *)(a1 + 16);
  v12 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9);
  v13 = a2 + 18;
  if (ccec_generate_scalar_fips_retry_ws(a1, v8, v11, &a2[4 * *(_QWORD *)*a2 + 18])
    || ccec_generate_scalar_fips_retry_ws(a1, v8, v11, v12)
    || ccec_mult_blinded_ws(a1, v8, (uint64_t)&v13[5 * *(_QWORD *)*a2], v12, a3, (uint64_t (**)(_QWORD, uint64_t, uint64_t *))v11)|| ccec_affinify_ws(a1, (uint64_t)v8)|| (cczp_negate((uint64_t)v8, &v13[6 * *(_QWORD *)*a2], (unint64_t *)&v13[6 * *(_QWORD *)*a2]), cczp_add_ws(a1, (uint64_t)&v8[5 * *v8 + 4]), !v9)|| (unint64_t)ccn_n(v9, &v13[3 * *(_QWORD *)*a2]) <= 1 && (unint64_t)v13[3 * *(_QWORD *)*a2] < 2|| (v14 = (unint64_t)(v10 + 7) >> 3, (ccn_write_uint_padded_ct(v9, (unint64_t *)&v13[3 * *(_QWORD *)*a2], v14, a4) & 0x80000000) != 0)|| (ccn_write_uint_padded_ct(v9, (unint64_t *)&v13[5 * *(_QWORD *)*a2], v14, &a4[v14]) & 0x80000000) != 0|| (ccn_write_uint_padded_ct(v9, (unint64_t *)&v13[6 * *(_QWORD *)*a2], v14, &a4[2 * v14]) & 0x80000000) != 0)
  {
    result = 4294967289;
  }
  else
  {
    result = ccec_affinify_ws(a1, (uint64_t)v8);
  }
  *(_QWORD *)(a1 + 16) = v16;
  return result;
}

uint64_t cche_serialize_ciphertext_coeff_nbytes(uint64_t a1, unsigned int *a2)
{
  char v3;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  char v15;

  v3 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v15 = v3;
  v9 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v9)
  {
    v10 = *(unsigned int **)(a1 + 24);
    v11 = 2;
    v12 = a2;
    do
    {
      if (a2)
        v13 = *v12;
      else
        v13 = 0;
      v11 += ccpolyzp_po2cyc_serialize_poly_nbytes(v10, v13);
      ++v12;
      --v9;
    }
    while (v9);
  }
  else
  {
    v11 = 2;
  }
  cc_disable_dit(&v15);
  return v11;
}

uint64_t cche_serialize_ciphertext_eval_nbytes(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = cche_serialize_ciphertext_coeff_nbytes(a1, 0);
  cc_disable_dit(&v9);
  return v7;
}

uint64_t cche_serialize_seeded_ciphertext_coeff_nbytes(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = ccpolyzp_po2cyc_serialize_poly_nbytes(*(unsigned int **)(a1 + 24), 0);
  cc_disable_dit(&v9);
  return v7;
}

uint64_t cche_serialize_seeded_ciphertext_eval_nbytes(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = cche_serialize_seeded_ciphertext_coeff_nbytes(a1);
  cc_disable_dit(&v9);
  return v7;
}

_BYTE *cche_serialize_ciphertext_coeff_max_nskip_lsbs(_DWORD *a1, unsigned int *a2)
{
  char v4;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v14;

  v4 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v14 = v4;
  if (a2[2])
  {
    v10 = 0;
    do
    {
      a1[v10++] = 0;
      v11 = a2[2];
    }
    while (v10 < v11);
  }
  else
  {
    LODWORD(v11) = 0;
  }
  if ((_DWORD)v11 == cche_ciphertext_fresh_npolys())
  {
    v12 = *(_QWORD *)a2;
    *a1 = *(_DWORD *)(*(_QWORD *)a2 + 20);
    a1[1] = *(_DWORD *)(v12 + 24);
  }
  return cc_disable_dit(&v14);
}

uint64_t cche_serialize_ciphertext_coeff_ws(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v9;
  uint64_t v10;
  _DWORD **v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int **v19;
  uint64_t v20;
  uint64_t result;
  _DWORD v22[2];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C874D8];
  if (cche_serialize_ciphertext_coeff_nbytes(a4, a5) != a2)
    return 4294967289;
  v9 = *(unsigned int *)(a4 + 8);
  if (WORD1(v9))
    return 4294967289;
  if (!a5)
    goto LABEL_9;
  if ((_DWORD)v9 != cche_ciphertext_fresh_npolys())
    return 4294967289;
  cche_serialize_ciphertext_coeff_max_nskip_lsbs(v22, (unsigned int *)a4);
  if ((_DWORD)v9)
  {
    v10 = 0;
    while (a5[v10] <= v22[v10])
    {
      if (v9 == ++v10)
        goto LABEL_9;
    }
    return 4294967289;
  }
LABEL_9:
  v13 = *(unsigned int **)(a4 + 24);
  v11 = (_DWORD **)(a4 + 24);
  v12 = v13;
  *a3 = v9;
  if (!(_DWORD)v9)
    return 0;
  v14 = 0;
  v15 = (uint64_t)(a3 + 1);
  while (1)
  {
    v16 = *v11;
    v17 = sizeof_struct_ccpolyzp_po2cyc();
    v18 = a5 ? a5[v14] : 0;
    v19 = &v11[((v16[1] * *v16) + ((unint64_t)(v17 + 7) >> 3)) * v14];
    v20 = ccpolyzp_po2cyc_serialize_poly_nbytes(v12, v18);
    result = ccpolyzp_po2cyc_serialize_poly_ws(a1, v20, v15, v18, v19);
    if ((_DWORD)result)
      break;
    v15 += v20;
    if (v9 == ++v14)
      return 0;
  }
  return result;
}

uint64_t cche_serialize_ciphertext_coeff(uint64_t a1, _WORD *a2, uint64_t *a3, unsigned int *a4)
{
  char v8;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD v19[4];
  void (*v20)(uint64_t);
  char v21;

  v8 = 0;
  v21 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v21 = v8;
  v14 = cche_param_ctx_polynomial_degree(*a3);
  v15 = CCPOLYZP_PO2CYC_SERIALIZE_POLY_WORKSPACE_N(v14);
  v19[0] = cc_malloc_clear(8 * v15);
  v16 = cche_param_ctx_polynomial_degree(*a3);
  v19[1] = CCPOLYZP_PO2CYC_SERIALIZE_POLY_WORKSPACE_N(v16);
  v19[2] = 0;
  v19[3] = cc_ws_alloc;
  v20 = cc_ws_free;
  if (v19[0])
  {
    v17 = cche_serialize_ciphertext_coeff_ws((uint64_t)v19, a1, a2, (uint64_t)a3, a4);
    v20((uint64_t)v19);
  }
  else
  {
    v17 = 4294967283;
  }
  cc_disable_dit(&v21);
  return v17;
}

uint64_t cche_serialize_ciphertext_eval(uint64_t a1, _WORD *a2, uint64_t *a3)
{
  char v6;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD v17[4];
  void (*v18)(uint64_t);
  char v19;

  v6 = 0;
  v19 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v19 = v6;
  v12 = cche_param_ctx_polynomial_degree(*a3);
  v13 = CCPOLYZP_PO2CYC_SERIALIZE_POLY_WORKSPACE_N(v12);
  v17[0] = cc_malloc_clear(8 * v13);
  v14 = cche_param_ctx_polynomial_degree(*a3);
  v17[1] = CCPOLYZP_PO2CYC_SERIALIZE_POLY_WORKSPACE_N(v14);
  v17[2] = 0;
  v17[3] = cc_ws_alloc;
  v18 = cc_ws_free;
  if (v17[0])
  {
    v15 = cche_serialize_ciphertext_coeff_ws((uint64_t)v17, a1, a2, (uint64_t)a3, 0);
    v18((uint64_t)v17);
  }
  else
  {
    v15 = 4294967283;
  }
  cc_disable_dit(&v19);
  return v15;
}

uint64_t cche_deserialize_ciphertext_coeff_ws(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, unsigned int *a5)
{
  unsigned int *v9;
  _DWORD **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t result;

  v10 = (_DWORD **)(a2 + 24);
  v9 = *(unsigned int **)(a2 + 24);
  if (cche_serialize_ciphertext_coeff_nbytes(a2, a5) != a3)
    return 4294967289;
  v11 = (unsigned __int16)*a4;
  if ((_DWORD)v11 != *(_DWORD *)(a2 + 8))
    return 4294967289;
  if (!*a4)
    return 0;
  v12 = 0;
  v13 = (uint64_t)(a4 + 1);
  while (1)
  {
    v14 = a5 ? a5[v12] : 0;
    v15 = ccpolyzp_po2cyc_serialize_poly_nbytes(v9, v14);
    v16 = *v10;
    v17 = sizeof_struct_ccpolyzp_po2cyc();
    result = ccpolyzp_po2cyc_deserialize_poly_ws(a1, &v10[((v16[1] * *v16) + ((unint64_t)(v17 + 7) >> 3)) * v12], v14, v15, v13);
    if ((_DWORD)result)
      break;
    v13 += v15;
    if (v11 == ++v12)
      return 0;
  }
  return result;
}

uint64_t cche_deserialize_ciphertext_coeff(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, int a5, unsigned int a6, uint64_t a7, unsigned int *a8)
{
  char v16;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _DWORD **v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[4];
  void (*v38)(uint64_t);
  char v39;

  v16 = 0;
  v39 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v16 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v16 = 1;
    }
  }
  v39 = v16;
  v22 = cche_param_ctx_polynomial_degree(a4);
  v23 = CCPOLYZP_PO2CYC_SERIALIZE_POLY_WORKSPACE_N(v22);
  v37[0] = cc_malloc_clear(8 * v23);
  v24 = cche_param_ctx_polynomial_degree(a4);
  v37[1] = CCPOLYZP_PO2CYC_SERIALIZE_POLY_WORKSPACE_N(v24);
  v37[2] = 0;
  v37[3] = cc_ws_alloc;
  v38 = cc_ws_free;
  if (v37[0])
  {
    v35 = a2;
    v36 = a7;
    v25 = (unsigned int *)cche_param_ctx_chain_const(a4);
    v26 = *v25;
    v27 = (unint64_t)(sizeof_struct_ccpolyzp_po2cyc_ctx() + 7) >> 3;
    if (v26 >= 0x80)
      v28 = 128;
    else
      v28 = v26;
    v29 = (unint64_t)&v25[2
                               * (v27
                                + 2 * (v26 + ((unint64_t)(sizeof_struct_ccrns_mul_modulus() + 7) >> 3) * v28)
                                + 6)
                               * (v25[1] - a5)
                               + 2];
    *(_QWORD *)a1 = a4;
    *(_DWORD *)(a1 + 8) = a6;
    *(_QWORD *)(a1 + 16) = 1;
    *(_QWORD *)(a1 + 24) = v29;
    v30 = (_DWORD **)(a1 + 24);
    if (a6 >= 2)
    {
      v31 = 1;
      do
      {
        v32 = *v30;
        v30[((v32[1] * *v32) + ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3)) * v31++] = (_DWORD *)v29;
      }
      while (a6 != v31);
    }
    v33 = cche_deserialize_ciphertext_coeff_ws((uint64_t)v37, a1, v35, a3, a8);
    *(_QWORD *)(a1 + 16) = v36;
    v38((uint64_t)v37);
  }
  else
  {
    v33 = 4294967283;
  }
  cc_disable_dit(&v39);
  return v33;
}

uint64_t cche_deserialize_ciphertext_eval(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, int a5, unsigned int a6, uint64_t a7)
{
  char v14;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD **v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v33;
  _QWORD v34[4];
  void (*v35)(uint64_t);
  char v36;

  v14 = 0;
  v36 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v14 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v14 = 1;
    }
  }
  v36 = v14;
  v20 = cche_param_ctx_polynomial_degree(a4);
  v21 = CCPOLYZP_PO2CYC_SERIALIZE_POLY_WORKSPACE_N(v20);
  v34[0] = cc_malloc_clear(8 * v21);
  v22 = cche_param_ctx_polynomial_degree(a4);
  v34[1] = CCPOLYZP_PO2CYC_SERIALIZE_POLY_WORKSPACE_N(v22);
  v34[2] = 0;
  v34[3] = cc_ws_alloc;
  v35 = cc_ws_free;
  if (v34[0])
  {
    v33 = a7;
    v23 = (unsigned int *)cche_param_ctx_chain_const(a4);
    v24 = *v23;
    v25 = (unint64_t)(sizeof_struct_ccpolyzp_po2cyc_ctx() + 7) >> 3;
    if (v24 >= 0x80)
      v26 = 128;
    else
      v26 = v24;
    v27 = (unint64_t)&v23[2
                               * (v25
                                + 2 * (v24 + ((unint64_t)(sizeof_struct_ccrns_mul_modulus() + 7) >> 3) * v26)
                                + 6)
                               * (v23[1] - a5)
                               + 2];
    *(_QWORD *)a1 = a4;
    *(_DWORD *)(a1 + 8) = a6;
    *(_QWORD *)(a1 + 16) = 1;
    *(_QWORD *)(a1 + 24) = v27;
    v28 = (_DWORD **)(a1 + 24);
    if (a6 >= 2)
    {
      v29 = 1;
      do
      {
        v30 = *v28;
        v28[((v30[1] * *v30) + ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3)) * v29++] = (_DWORD *)v27;
      }
      while (a6 != v29);
    }
    v31 = cche_deserialize_ciphertext_coeff_ws((uint64_t)v34, a1, a2, a3, 0);
    *(_QWORD *)(a1 + 16) = v33;
    v35((uint64_t)v34);
  }
  else
  {
    v31 = 4294967283;
  }
  cc_disable_dit(&v36);
  return v31;
}

uint64_t cche_serialize_seeded_ciphertext_coeff(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD v17[4];
  void (*v18)(uint64_t);
  char v19;

  v6 = 0;
  v19 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v19 = v6;
  v12 = cche_param_ctx_polynomial_degree(*(_QWORD *)a3);
  v13 = CCPOLYZP_PO2CYC_SERIALIZE_POLY_WORKSPACE_N(v12);
  v17[0] = cc_malloc_clear(8 * v13);
  v14 = cche_param_ctx_polynomial_degree(*(_QWORD *)a3);
  v17[1] = CCPOLYZP_PO2CYC_SERIALIZE_POLY_WORKSPACE_N(v14);
  v17[2] = 0;
  v17[3] = cc_ws_alloc;
  v18 = cc_ws_free;
  if (v17[0])
  {
    v15 = ccpolyzp_po2cyc_serialize_poly_ws((uint64_t)v17, a1, a2, 0, (unsigned int **)(a3 + 24));
    v18((uint64_t)v17);
  }
  else
  {
    v15 = 4294967283;
  }
  cc_disable_dit(&v19);
  return v15;
}

uint64_t cche_serialize_seeded_ciphertext_eval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD v17[4];
  void (*v18)(uint64_t);
  char v19;

  v6 = 0;
  v19 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v19 = v6;
  v12 = cche_param_ctx_polynomial_degree(*(_QWORD *)a3);
  v13 = CCPOLYZP_PO2CYC_SERIALIZE_POLY_WORKSPACE_N(v12);
  v17[0] = cc_malloc_clear(8 * v13);
  v14 = cche_param_ctx_polynomial_degree(*(_QWORD *)a3);
  v17[1] = CCPOLYZP_PO2CYC_SERIALIZE_POLY_WORKSPACE_N(v14);
  v17[2] = 0;
  v17[3] = cc_ws_alloc;
  v18 = cc_ws_free;
  if (v17[0])
  {
    v15 = ccpolyzp_po2cyc_serialize_poly_ws((uint64_t)v17, a1, a2, 0, (unsigned int **)(a3 + 24));
    v18((uint64_t)v17);
  }
  else
  {
    v15 = 4294967283;
  }
  cc_disable_dit(&v19);
  return v15;
}

uint64_t cche_deserialize_seeded_ciphertext_coeff_ws(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  _DWORD *v7;
  unsigned int **v8;

  result = cche_deserialize_seeded_ciphertext_eval_ws(a1, a2, a3, a4, a5);
  if (!(_DWORD)result)
  {
    v7 = *(_DWORD **)(a2 + 24);
    v8 = (unsigned int **)(a2
                         + 24
                         + 8
                         * ((v7[1] * *v7) + ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3)));
    return ccpolyzp_po2cyc_inv_ntt(v8);
  }
  return result;
}

uint64_t cche_deserialize_seeded_ciphertext_eval_ws(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  unsigned int **v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t (**v15)(_QWORD, uint64_t, uint64_t);
  unsigned int *v16;
  uint64_t v17;

  v10 = *(_DWORD *)(a2 + 8);
  if (v10 != cche_ciphertext_fresh_npolys())
    return 4294967289;
  v12 = *(unsigned int **)(a2 + 24);
  v11 = (unsigned int **)(a2 + 24);
  if (ccpolyzp_po2cyc_serialize_poly_nbytes(v12, 0) != a3)
    return 4294967289;
  v13 = *(_QWORD *)(a1 + 16);
  result = ccpolyzp_po2cyc_deserialize_poly_ws(a1, v11, 0, a3, a4);
  if (!(_DWORD)result)
  {
    v15 = (uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 536);
    result = ccpolyzp_po2cyc_block_rng_init((uint64_t)v15, a5);
    if (!(_DWORD)result)
    {
      v16 = *v11;
      v17 = sizeof_struct_ccpolyzp_po2cyc();
      result = ccpolyzp_po2cyc_random_uniform_ws(a1, &(&v11[v16[1] * *v16])[(unint64_t)(v17 + 7) >> 3], v15);
    }
  }
  *(_QWORD *)(a1 + 16) = v13;
  return result;
}

unint64_t CCHE_DESERIALIZE_SEEDED_CIPHERTEXT_EVAL_WORKSPACE_N(unint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = CCPOLYZP_PO2CYC_SERIALIZE_POLY_WORKSPACE_N(a1);
  v3 = CCPOLYZP_PO2CYC_RANDOM_UNIFORM_WORKSPACE_N(a1);
  v4 = sizeof_struct_ccpolyzp_po2cyc_block_rng_state();
  v5 = sizeof_struct_ccpolyzp_po2cyc();
  if (v2 <= (v4 + v5 - 1) / v5 + v3)
    return (v4 + v5 - 1) / v5 + v3;
  else
    return v2;
}

uint64_t cche_deserialize_seeded_ciphertext_coeff(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  char v14;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  _DWORD **v29;
  uint64_t v30;
  uint64_t i;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v35;
  _QWORD v36[4];
  void (*v37)(uint64_t);
  char v38;

  v14 = 0;
  v38 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v14 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v14 = 1;
    }
  }
  v38 = v14;
  v20 = cche_param_ctx_polynomial_degree(a5);
  v21 = CCHE_DESERIALIZE_SEEDED_CIPHERTEXT_EVAL_WORKSPACE_N(v20);
  v36[0] = cc_malloc_clear(8 * v21);
  v22 = cche_param_ctx_polynomial_degree(a5);
  v36[1] = CCHE_DESERIALIZE_SEEDED_CIPHERTEXT_EVAL_WORKSPACE_N(v22);
  v36[2] = 0;
  v36[3] = cc_ws_alloc;
  v37 = cc_ws_free;
  if (v36[0])
  {
    v35 = a7;
    v23 = (unsigned int *)cche_param_ctx_chain_const(a5);
    v24 = *v23;
    v25 = (unint64_t)(sizeof_struct_ccpolyzp_po2cyc_ctx() + 7) >> 3;
    if (v24 >= 0x80)
      v26 = 128;
    else
      v26 = v24;
    v27 = (unint64_t)&v23[2
                               * (v25
                                + 2 * (v24 + ((unint64_t)(sizeof_struct_ccrns_mul_modulus() + 7) >> 3) * v26)
                                + 6)
                               * (v23[1] - a6)
                               + 2];
    v28 = cche_ciphertext_fresh_npolys();
    *(_QWORD *)a1 = a5;
    *(_DWORD *)(a1 + 8) = v28;
    *(_QWORD *)(a1 + 16) = 1;
    *(_QWORD *)(a1 + 24) = v27;
    v29 = (_DWORD **)(a1 + 24);
    if (v28 >= 2)
    {
      v30 = v28;
      for (i = 1; i != v30; ++i)
      {
        v32 = *v29;
        v29[((v32[1] * *v32) + ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3)) * i] = (_DWORD *)v27;
      }
    }
    v33 = cche_deserialize_seeded_ciphertext_coeff_ws((uint64_t)v36, a1, a2, a3, a4);
    *(_QWORD *)(a1 + 16) = v35;
    v37((uint64_t)v36);
  }
  else
  {
    v33 = 4294967283;
  }
  cc_disable_dit(&v38);
  return v33;
}

uint64_t cche_deserialize_seeded_ciphertext_eval(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  char v14;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  _DWORD **v29;
  uint64_t v30;
  uint64_t i;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v35;
  _QWORD v36[4];
  void (*v37)(uint64_t);
  char v38;

  v14 = 0;
  v38 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v14 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v14 = 1;
    }
  }
  v38 = v14;
  v20 = cche_param_ctx_polynomial_degree(a5);
  v21 = CCHE_DESERIALIZE_SEEDED_CIPHERTEXT_EVAL_WORKSPACE_N(v20);
  v36[0] = cc_malloc_clear(8 * v21);
  v22 = cche_param_ctx_polynomial_degree(a5);
  v36[1] = CCHE_DESERIALIZE_SEEDED_CIPHERTEXT_EVAL_WORKSPACE_N(v22);
  v36[2] = 0;
  v36[3] = cc_ws_alloc;
  v37 = cc_ws_free;
  if (v36[0])
  {
    v35 = a7;
    v23 = (unsigned int *)cche_param_ctx_chain_const(a5);
    v24 = *v23;
    v25 = (unint64_t)(sizeof_struct_ccpolyzp_po2cyc_ctx() + 7) >> 3;
    if (v24 >= 0x80)
      v26 = 128;
    else
      v26 = v24;
    v27 = (unint64_t)&v23[2
                               * (v25
                                + 2 * (v24 + ((unint64_t)(sizeof_struct_ccrns_mul_modulus() + 7) >> 3) * v26)
                                + 6)
                               * (v23[1] - a6)
                               + 2];
    v28 = cche_ciphertext_fresh_npolys();
    *(_QWORD *)a1 = a5;
    *(_DWORD *)(a1 + 8) = v28;
    *(_QWORD *)(a1 + 16) = 1;
    *(_QWORD *)(a1 + 24) = v27;
    v29 = (_DWORD **)(a1 + 24);
    if (v28 >= 2)
    {
      v30 = v28;
      for (i = 1; i != v30; ++i)
      {
        v32 = *v29;
        v29[((v32[1] * *v32) + ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3)) * i] = (_DWORD *)v27;
      }
    }
    v33 = cche_deserialize_seeded_ciphertext_eval_ws((uint64_t)v36, a1, a2, a3, a4);
    *(_QWORD *)(a1 + 16) = v35;
    v37((uint64_t)v36);
  }
  else
  {
    v33 = 4294967283;
  }
  cc_disable_dit(&v38);
  return v33;
}

uint64_t cche_bytes_to_coeffs(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  char v5;
  uint64_t v11;
  char v13;

  v5 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v13 = v5;
  v11 = ccpolyzp_po2cyc_bytes_to_coeffs(a1, a2, a3, a4, a5, 0);
  cc_disable_dit(&v13);
  return v11;
}

uint64_t cche_coeffs_to_bytes(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  char v5;
  uint64_t v11;
  char v13;

  v5 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v13 = v5;
  v11 = ccpolyzp_po2cyc_coeffs_to_bytes(a1, a2, a3, a4, a5, 0);
  cc_disable_dit(&v13);
  return v11;
}

uint64_t ccdes_key_is_weak(char *a1, uint64_t a2)
{
  char v3;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v3 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v12 = v3;
  if (a2 == 8)
  {
    v9 = 0;
    while (cc_cmp_safe(8, &weak_keys[v9], a1))
    {
      v9 += 8;
      if (v9 == 128)
      {
        v10 = 0;
        goto LABEL_11;
      }
    }
  }
  v10 = 0xFFFFFFFFLL;
LABEL_11:
  cc_disable_dit(&v12);
  return v10;
}

_BYTE *ccdes_key_set_odd_parity(_BYTE *a1, uint64_t a2)
{
  char v2;
  char i;

  v2 = 0;
  i = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  for (i = v2; a2; --a2)
  {
    *a1 = odd_parity[*a1];
    ++a1;
  }
  return cc_disable_dit(&i);
}

__int128 *ccsha512_ltc_compress(__int128 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[4];
  _BYTE v38[608];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t i;

  for (i = *MEMORY[0x1E0C874D8]; a2; --a2)
  {
    v3 = 0;
    v4 = result[1];
    v39 = *result;
    v40 = v4;
    v5 = result[3];
    v41 = result[2];
    v42 = v5;
    do
    {
      v37[v3] = bswap64(*(_QWORD *)(a3 + v3 * 8));
      ++v3;
    }
    while (v3 != 16);
    v6 = 0;
    v7 = v37[0];
    do
    {
      v8 = v37[v6 / 8 + 1];
      *(_QWORD *)&v38[v6 + 96] = (__ROR8__(*(_QWORD *)&v38[v6 + 80], 19) ^ __ROR8__(*(_QWORD *)&v38[v6 + 80], 61) ^ (*(_QWORD *)&v38[v6 + 80] >> 6))
                               + *(_QWORD *)&v38[v6 + 40]
                               + v7
                               + (__ROR8__(v8, 1) ^ __ROR8__(v8, 8) ^ (v8 >> 7));
      v6 += 8;
      v7 = v8;
    }
    while (v6 != 512);
    v9 = *((_QWORD *)&v42 + 1);
    v10 = v42;
    v12 = *((_QWORD *)&v41 + 1);
    v11 = v41;
    v14 = *((_QWORD *)&v39 + 1);
    v13 = v39;
    v15 = &xmmword_1DEE21CF0;
    v16 = -8;
    v17 = v38;
    v18 = *((_QWORD *)&v40 + 1);
    v19 = v40;
    do
    {
      v20 = (__ROR8__(v11, 14) ^ __ROR8__(v11, 18) ^ __ROR8__(v11, 41))
          + v9
          + *((_QWORD *)v15 - 4)
          + *(v17 - 4)
          + (v12 & v11 | v10 & ~v11);
      v21 = v18 + v20;
      v22 = v20 + (__ROR8__(v13, 28) ^ __ROR8__(v13, 34) ^ __ROR8__(v13, 39)) + ((v14 | v13) & v19 | v14 & v13);
      v23 = (v11 & v21 | v12 & ~v21)
          + v10
          + *((_QWORD *)v15 - 3)
          + *(v17 - 3)
          + (__ROR8__(v21, 14) ^ __ROR8__(v21, 18) ^ __ROR8__(v21, 41));
      v24 = v23 + v19;
      v25 = (__ROR8__(v22, 28) ^ __ROR8__(v22, 34) ^ __ROR8__(v22, 39)) + ((v22 | v13) & v14 | v22 & v13) + v23;
      v26 = *((_QWORD *)v15 - 2)
          + v12
          + *(v17 - 2)
          + (v21 & v24 | v11 & ~v24)
          + (__ROR8__(v24, 14) ^ __ROR8__(v24, 18) ^ __ROR8__(v24, 41));
      v27 = v26 + v14;
      v28 = (__ROR8__(v25, 28) ^ __ROR8__(v25, 34) ^ __ROR8__(v25, 39)) + ((v25 | v22) & v13 | v25 & v22) + v26;
      v29 = *((_QWORD *)v15 - 1)
          + v11
          + *(v17 - 1)
          + (v24 & v27 | v21 & ~v27)
          + (__ROR8__(v27, 14) ^ __ROR8__(v27, 18) ^ __ROR8__(v27, 41));
      v30 = v29 + v13;
      v31 = (__ROR8__(v28, 28) ^ __ROR8__(v28, 34) ^ __ROR8__(v28, 39)) + ((v28 | v25) & v22 | v28 & v25) + v29;
      v32 = *(_QWORD *)v15
          + *v17
          + v21
          + (v27 & v30 | v24 & ~v30)
          + (__ROR8__(v30, 14) ^ __ROR8__(v30, 18) ^ __ROR8__(v30, 41));
      v9 = v32 + v22;
      v18 = (__ROR8__(v31, 28) ^ __ROR8__(v31, 34) ^ __ROR8__(v31, 39)) + ((v31 | v28) & v25 | v31 & v28) + v32;
      v33 = *((_QWORD *)v15 + 1)
          + v17[1]
          + v24
          + (v30 & v9 | v27 & ~v9)
          + (__ROR8__(v9, 14) ^ __ROR8__(v9, 18) ^ __ROR8__(v9, 41));
      v10 = v33 + v25;
      v19 = (__ROR8__(v18, 28) ^ __ROR8__(v18, 34) ^ __ROR8__(v18, 39)) + ((v18 | v31) & v28 | v18 & v31) + v33;
      v34 = *((_QWORD *)v15 + 2)
          + v17[2]
          + v27
          + (v9 & v10 | v30 & ~v10)
          + (__ROR8__(v10, 14) ^ __ROR8__(v10, 18) ^ __ROR8__(v10, 41));
      v12 = v34 + v28;
      v14 = (__ROR8__(v19, 28) ^ __ROR8__(v19, 34) ^ __ROR8__(v19, 39)) + ((v19 | v18) & v31 | v19 & v18) + v34;
      v35 = *((_QWORD *)v15 + 3)
          + v17[3]
          + v30
          + (v10 & v12 | v9 & ~v12)
          + (__ROR8__(v12, 14) ^ __ROR8__(v12, 18) ^ __ROR8__(v12, 41));
      v11 = v35 + v31;
      v13 = (__ROR8__(v14, 28) ^ __ROR8__(v14, 34) ^ __ROR8__(v14, 39)) + ((v14 | v19) & v18 | v14 & v19) + v35;
      v16 += 8;
      v17 += 8;
      v15 += 4;
    }
    while (v16 < 0x48);
    v36 = 0;
    *(_QWORD *)&v42 = v10;
    *((_QWORD *)&v42 + 1) = v9;
    *(_QWORD *)&v41 = v11;
    *((_QWORD *)&v41 + 1) = v12;
    *(_QWORD *)&v39 = v13;
    *((_QWORD *)&v39 + 1) = v14;
    *(_QWORD *)&v40 = v19;
    *((_QWORD *)&v40 + 1) = v18;
    do
    {
      result[v36] = (__int128)vaddq_s64(*(int64x2_t *)((char *)&v39 + v36 * 16), (int64x2_t)result[v36]);
      ++v36;
    }
    while (v36 != 4);
    a3 += 128;
  }
  return result;
}

void *ccspake_cp_384()
{
  return &ccspake_cp384;
}

void *ccspake_cp_384_rfc()
{
  return &ccspake_cp384_rfc;
}

int8x16_t *ccaes_arm_decrypt_cbc(int8x16_t *result, int8x16_t *a2, uint64_t a3, int8x16_t *a4, int8x16_t *a5)
{
  uint64_t v5;
  int8x16_t v6;
  BOOL v7;
  uint64_t i;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  uint64_t v23;
  int8x16_t v62;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v70;
  uint64_t j;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  uint64_t v93;
  int8x16_t v112;
  uint64_t k;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v124;
  int8x16_t v125;
  uint64_t v126;
  int8x16_t v137;
  uint64_t m;
  uint64_t v142;
  int8x16_t v146;

  if (a3)
  {
    v5 = result[15].u32[0];
    if (v5 == 160 || v5 == 192 || v5 == 224)
    {
      v6 = *a2;
      v7 = a3 < 16;
      for (i = a3 - 16; !v7; i -= 16)
      {
        v9 = *a4;
        a4 += 16;
        v10 = v9;
        v11 = a4[-13];
        v12 = a4[-12];
        v13 = a4[-11];
        v14 = a4[-10];
        v15 = a4[-9];
        v16 = a4[-8];
        v17 = a4[-7];
        v18 = a4[-6];
        _Q16 = *(__int128 *)((char *)result + v5);
        v20 = a4[-5];
        v21 = *result;
        v22 = a4[-4];
        v23 = v5 - 16;
        do
        {
          __asm
          {
            AESD            V0.16B, V16.16B
            AESIMC          V0.16B, V0.16B
            AESD            V1.16B, V16.16B
            AESIMC          V1.16B, V1.16B
            AESD            V2.16B, V16.16B
            AESIMC          V2.16B, V2.16B
            AESD            V3.16B, V16.16B
            AESIMC          V3.16B, V3.16B
            AESD            V4.16B, V16.16B
            AESIMC          V4.16B, V4.16B
            AESD            V5.16B, V16.16B
            AESIMC          V5.16B, V5.16B
            AESD            V6.16B, V16.16B
            AESIMC          V6.16B, V6.16B
            AESD            V7.16B, V16.16B
            AESIMC          V7.16B, V7.16B
            AESD            V8.16B, V16.16B
            AESIMC          V8.16B, V8.16B
            AESD            V9.16B, V16.16B
            AESIMC          V9.16B, V9.16B
            AESD            V10.16B, V16.16B
            AESIMC          V10.16B, V10.16B
            AESD            V11.16B, V16.16B
            AESIMC          V11.16B, V11.16B
            AESD            V12.16B, V16.16B
            AESIMC          V12.16B, V12.16B
            AESD            V13.16B, V16.16B
            AESIMC          V13.16B, V13.16B
            AESD            V14.16B, V16.16B
            AESIMC          V14.16B, V14.16B
            AESD            V15.16B, V16.16B
            AESIMC          V15.16B, V15.16B
          }
          _Q16 = *(__int128 *)((char *)result + v23);
          v7 = v23 <= 16;
          v23 -= 16;
        }
        while (!v7);
        a5 += 16;
        __asm
        {
          AESD            V0.16B, V16.16B
          AESD            V1.16B, V16.16B
        }
        v62 = veorq_s8(veorq_s8(_Q0, v21), v6);
        v6 = a4[-1];
        __asm { AESD            V2.16B, V16.16B }
        v64 = veorq_s8(veorq_s8(_Q1, v21), v10);
        v65 = a4[-3];
        __asm { AESD            V3.16B, V16.16B }
        v67 = veorq_s8(veorq_s8(_Q2, v21), a4[-15]);
        v68 = a4[-2];
        __asm { AESD            V4.16B, V16.16B }
        v70 = veorq_s8(veorq_s8(_Q3, v21), a4[-14]);
        a5[-16] = v62;
        __asm { AESD            V5.16B, V16.16B }
        a5[-15] = v64;
        __asm { AESD            V6.16B, V16.16B }
        a5[-14] = v67;
        __asm { AESD            V7.16B, V16.16B }
        a5[-13] = v70;
        __asm { AESD            V8.16B, V16.16B }
        a5[-12] = veorq_s8(veorq_s8(_Q4, v21), v11);
        __asm { AESD            V9.16B, V16.16B }
        a5[-11] = veorq_s8(veorq_s8(_Q5, v21), v12);
        __asm { AESD            V10.16B, V16.16B }
        a5[-10] = veorq_s8(veorq_s8(_Q6, v21), v13);
        __asm { AESD            V11.16B, V16.16B }
        a5[-9] = veorq_s8(veorq_s8(_Q7, v21), v14);
        __asm { AESD            V12.16B, V16.16B }
        a5[-8] = veorq_s8(veorq_s8(_Q8, v21), v15);
        __asm { AESD            V13.16B, V16.16B }
        a5[-7] = veorq_s8(veorq_s8(_Q9, v21), v16);
        __asm { AESD            V14.16B, V16.16B }
        a5[-6] = veorq_s8(veorq_s8(_Q10, v21), v17);
        __asm { AESD            V15.16B, V16.16B }
        a5[-5] = veorq_s8(veorq_s8(_Q11, v21), v18);
        a5[-4] = veorq_s8(veorq_s8(_Q12, v21), v20);
        a5[-3] = veorq_s8(veorq_s8(_Q13, v21), v22);
        a5[-2] = veorq_s8(veorq_s8(_Q14, v21), v65);
        a5[-1] = veorq_s8(veorq_s8(_Q15, v21), v68);
        v7 = i < 16;
      }
      v7 = i < -8;
      for (j = i + 8; !v7; j -= 8)
      {
        v83 = *a4;
        a4 += 8;
        v84 = v83;
        v85 = a4[-7];
        v86 = a4[-6];
        v87 = a4[-5];
        v88 = a4[-4];
        _Q16 = *(__int128 *)((char *)result + v5);
        v90 = a4[-3];
        v91 = *result;
        v92 = a4[-2];
        v93 = v5 - 16;
        do
        {
          __asm
          {
            AESD            V0.16B, V16.16B
            AESIMC          V0.16B, V0.16B
            AESD            V1.16B, V16.16B
            AESIMC          V1.16B, V1.16B
            AESD            V2.16B, V16.16B
            AESIMC          V2.16B, V2.16B
            AESD            V3.16B, V16.16B
            AESIMC          V3.16B, V3.16B
            AESD            V4.16B, V16.16B
            AESIMC          V4.16B, V4.16B
            AESD            V5.16B, V16.16B
            AESIMC          V5.16B, V5.16B
            AESD            V6.16B, V16.16B
            AESIMC          V6.16B, V6.16B
            AESD            V7.16B, V16.16B
            AESIMC          V7.16B, V7.16B
          }
          _Q16 = *(__int128 *)((char *)result + v93);
          v7 = v93 <= 16;
          v93 -= 16;
        }
        while (!v7);
        a5 += 8;
        __asm
        {
          AESD            V0.16B, V16.16B
          AESD            V1.16B, V16.16B
        }
        v112 = veorq_s8(veorq_s8(_Q0, v91), v6);
        v6 = a4[-1];
        __asm { AESD            V2.16B, V16.16B }
        a5[-8] = v112;
        __asm { AESD            V3.16B, V16.16B }
        a5[-7] = veorq_s8(veorq_s8(_Q1, v91), v84);
        __asm { AESD            V4.16B, V16.16B }
        a5[-6] = veorq_s8(veorq_s8(_Q2, v91), v85);
        __asm { AESD            V5.16B, V16.16B }
        a5[-5] = veorq_s8(veorq_s8(_Q3, v91), v86);
        __asm { AESD            V6.16B, V16.16B }
        a5[-4] = veorq_s8(veorq_s8(_Q4, v91), v87);
        __asm { AESD            V7.16B, V16.16B }
        a5[-3] = veorq_s8(veorq_s8(_Q5, v91), v88);
        a5[-2] = veorq_s8(veorq_s8(_Q6, v91), v90);
        a5[-1] = veorq_s8(veorq_s8(_Q7, v91), v92);
        v7 = j < 8;
      }
      v7 = j < -4;
      for (k = j + 4; !v7; k -= 4)
      {
        v120 = *a4;
        a4 += 4;
        v121 = v120;
        v122 = a4[-3];
        _Q16 = *(__int128 *)((char *)result + v5);
        v124 = a4[-2];
        v125 = *result;
        v126 = v5 - 16;
        do
        {
          __asm
          {
            AESD            V0.16B, V16.16B
            AESIMC          V0.16B, V0.16B
            AESD            V1.16B, V16.16B
            AESIMC          V1.16B, V1.16B
            AESD            V2.16B, V16.16B
            AESIMC          V2.16B, V2.16B
            AESD            V3.16B, V16.16B
            AESIMC          V3.16B, V3.16B
          }
          _Q16 = *(__int128 *)((char *)result + v126);
          v7 = v126 <= 16;
          v126 -= 16;
        }
        while (!v7);
        a5 += 4;
        __asm
        {
          AESD            V0.16B, V16.16B
          AESD            V1.16B, V16.16B
        }
        v137 = veorq_s8(veorq_s8(_Q0, v125), v6);
        v6 = a4[-1];
        __asm { AESD            V2.16B, V16.16B }
        a5[-4] = v137;
        __asm { AESD            V3.16B, V16.16B }
        a5[-3] = veorq_s8(veorq_s8(_Q1, v125), v121);
        a5[-2] = veorq_s8(veorq_s8(_Q2, v125), v122);
        a5[-1] = veorq_s8(veorq_s8(_Q3, v125), v124);
        v7 = k < 4;
      }
      v7 = k <= -4;
      for (m = k + 4; !v7; --m)
      {
        _Q16 = *(__int128 *)((char *)result + v5);
        v142 = v5 - 16;
        ++a4;
        do
        {
          __asm
          {
            AESD            V0.16B, V16.16B
            AESIMC          V0.16B, V0.16B
          }
          _Q16 = *(__int128 *)((char *)result + v142);
          v7 = v142 <= 16;
          v142 -= 16;
        }
        while (!v7);
        __asm { AESD            V0.16B, V16.16B }
        v146 = veorq_s8(veorq_s8(_Q0, *result), v6);
        v6 = a4[-1];
        *a5++ = v146;
        v7 = m <= 1;
      }
      result = 0;
      *a2 = v6;
    }
    else
    {
      return (int8x16_t *)-1;
    }
  }
  return result;
}

uint64_t ccpost_digest_message(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  _BOOL4 v5;
  char v7[64];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C874D8];
  v4 = (uint64_t *)(*(uint64_t (**)(void))(a1 + 8))();
  ccdigest((uint64_t)v4, *(_QWORD *)(a1 + 24), *(char **)(a1 + 16), (uint64_t)v7);
  v5 = cc_cmp_safe(*v4, v7, *(char **)(a1 + 32)) != 0;
  return ccpost_report(a1, a2, v5);
}

_QWORD *ccdes_cbc_encrypt_mode()
{
  _QWORD *v0;

  v0 = ccdes_ecb_encrypt_mode();
  ccmode_factory_cbc_encrypt(cbc_des_encrypt, v0);
  return cbc_des_encrypt;
}

_QWORD *ccdes_cbc_decrypt_mode()
{
  _QWORD *v0;

  v0 = ccdes_ecb_decrypt_mode();
  ccmode_factory_cbc_decrypt(cbc_des_decrypt, v0);
  return cbc_des_decrypt;
}

_QWORD *ccdes_cfb_encrypt_mode()
{
  _QWORD *v0;

  v0 = ccdes_ecb_encrypt_mode();
  ccmode_factory_cfb_encrypt(cfb_des_encrypt, v0);
  return cfb_des_encrypt;
}

_QWORD *ccdes_cfb_decrypt_mode()
{
  _QWORD *v0;

  v0 = ccdes_ecb_encrypt_mode();
  ccmode_factory_cfb_decrypt(cfb_des_decrypt, v0);
  return cfb_des_decrypt;
}

_QWORD *ccdes_cfb8_encrypt_mode()
{
  _QWORD *v0;

  v0 = ccdes_ecb_encrypt_mode();
  ccmode_factory_cfb8_encrypt(cfb8_des_encrypt, v0);
  return cfb8_des_encrypt;
}

_QWORD *ccdes_cfb8_decrypt_mode()
{
  _QWORD *v0;

  v0 = ccdes_ecb_encrypt_mode();
  ccmode_factory_cfb8_decrypt(cfb8_des_decrypt, v0);
  return cfb8_des_decrypt;
}

_QWORD *ccdes_ctr_crypt_mode()
{
  _QWORD *v0;

  v0 = ccdes_ecb_encrypt_mode();
  ccmode_factory_ctr_crypt(ctr_des, v0);
  return ctr_des;
}

_QWORD *ccdes_ofb_crypt_mode()
{
  _QWORD *v0;

  v0 = ccdes_ecb_encrypt_mode();
  ccmode_factory_ofb_crypt(ofb_des, v0);
  return ofb_des;
}

_QWORD *ccdes3_cbc_encrypt_mode()
{
  _QWORD *v0;

  v0 = ccdes3_ecb_encrypt_mode();
  ccmode_factory_cbc_encrypt(cbc_des3_encrypt, v0);
  return cbc_des3_encrypt;
}

_QWORD *ccdes3_cbc_decrypt_mode()
{
  _QWORD *v0;

  v0 = ccdes3_ecb_decrypt_mode();
  ccmode_factory_cbc_decrypt(cbc_des3_decrypt, v0);
  return cbc_des3_decrypt;
}

_QWORD *ccdes3_cfb_encrypt_mode()
{
  _QWORD *v0;

  v0 = ccdes3_ecb_encrypt_mode();
  ccmode_factory_cfb_encrypt(cfb_des3_encrypt, v0);
  return cfb_des3_encrypt;
}

_QWORD *ccdes3_cfb_decrypt_mode()
{
  _QWORD *v0;

  v0 = ccdes3_ecb_encrypt_mode();
  ccmode_factory_cfb_decrypt(cfb_des3_decrypt, v0);
  return cfb_des3_decrypt;
}

_QWORD *ccdes3_cfb8_encrypt_mode()
{
  _QWORD *v0;

  v0 = ccdes3_ecb_encrypt_mode();
  ccmode_factory_cfb8_encrypt(cfb8_des3_encrypt, v0);
  return cfb8_des3_encrypt;
}

_QWORD *ccdes3_cfb8_decrypt_mode()
{
  _QWORD *v0;

  v0 = ccdes3_ecb_encrypt_mode();
  ccmode_factory_cfb8_decrypt(cfb8_des3_decrypt, v0);
  return cfb8_des3_decrypt;
}

_QWORD *ccdes3_ctr_crypt_mode()
{
  _QWORD *v0;

  v0 = ccdes3_ecb_encrypt_mode();
  ccmode_factory_ctr_crypt(ctr_des3, v0);
  return ctr_des3;
}

_QWORD *ccdes3_ofb_crypt_mode()
{
  _QWORD *v0;

  v0 = ccdes3_ecb_encrypt_mode();
  ccmode_factory_ofb_crypt(ofb_des3, v0);
  return ofb_des3;
}

uint64_t ccecies_encrypt_gcm_from_shared_secret_composite(_QWORD *a1, uint64_t a2, uint64_t *a3, size_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14)
{
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char __s[48];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C874D8];
  v22 = ccecies_pub_key_size(a3, a2);
  if (*a1 == *a3)
  {
    v23 = v22;
    v24 = ccecies_export_eph_pub(*(_DWORD *)(a2 + 32), (uint64_t)a3, a12);
    if (!(_DWORD)v24)
    {
      v24 = ccecies_derive_gcm_key_iv(a2, a4, a5, a8, a9, v23, (uint64_t)a12, __s);
      if (!(_DWORD)v24)
        v24 = ccecies_encrypt_gcm_encrypt(a2, (uint64_t)__s, a10, a11, a6, a7, a13, a14);
    }
    v25 = v24;
  }
  else
  {
    v25 = 4294967289;
  }
  cc_clear(0x30uLL, __s);
  return v25;
}

uint64_t ccecies_encrypt_gcm_from_shared_secret(_QWORD *a1, uint64_t a2, uint64_t *a3, size_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, rsize_t *a12, void *a13)
{
  char v19;
  unint64_t v25;
  unint64_t v26;
  rsize_t v27;
  uint64_t v28;
  char v32;

  v19 = 0;
  v32 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v19 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v19 = 1;
    }
  }
  v32 = v19;
  v25 = ccecies_pub_key_size(a3, a2);
  v26 = ccecies_encrypt_gcm_ciphertext_size(a3, a2, a6);
  v27 = *a12;
  if ((*(_BYTE *)(a2 + 32) & 0x21) == 0)
  {
    v28 = 4294967291;
    goto LABEL_14;
  }
  if (v26 > v27 || *a1 != *a3)
  {
    v28 = 4294967289;
LABEL_14:
    cc_clear(v27, a13);
    goto LABEL_10;
  }
  v28 = ccecies_encrypt_gcm_from_shared_secret_composite(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (char *)a13, (uint64_t)a13 + v25, (uint64_t)a13 + v25 + a6);
  if ((_DWORD)v28)
  {
    v27 = *a12;
    goto LABEL_14;
  }
  *a12 = v26;
LABEL_10:
  cc_disable_dit(&v32);
  return v28;
}

uint64_t ccn_cond_shift_right_carry(unint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, unint64_t a6)
{
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = ccn_mux_next_mask();
  v13 = __ROR8__(0x5555555555555555, a2 | (2 * result));
  if (a1)
  {
    v14 = a1 - 1;
    v15 = 8 * a1 - 8;
    do
    {
      v16 = 2 * a6;
      v17 = a6 >> a5;
      a6 = *(_QWORD *)(a4 + 8 * v14);
      v18 = (v16 << ~a5) | (a6 >> a5);
      if ((a5 & 0x40) != 0)
        v18 = v17;
      *(_QWORD *)(a3 + 8 * v14) = a6 ^ result;
      *(_QWORD *)(a3 + 8 * v14--) = (a6 ^ v18) & v13 ^ (a6 ^ v18) & 0x5555555555555555 ^ a6 ^ result ^ result;
      v15 -= 8;
    }
    while (v14 < a1);
  }
  return result;
}

uint64_t ccn_cond_shift_right(unint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  return ccn_cond_shift_right_carry(a1, a2, a3, a4, a5, 0);
}

uint64_t ccss_shamir_share_bag_recover_secret(unsigned int **a1, char *a2, unint64_t a3)
{
  char v6;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t *v34;
  int v35;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  _QWORD *v40;
  unint64_t *v41;
  unsigned int v42;
  uint64_t v43;
  _QWORD v44[2];
  uint64_t v45;
  uint64_t (*v46)(_QWORD *, uint64_t);
  void (*v47)(uint64_t);
  char v48;

  v6 = 0;
  v48 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v48 = v6;
  v12 = cczp_n((uint64_t)(*a1 + 2));
  v13 = 15 * v12;
  v44[0] = cc_malloc_clear(120 * v12);
  v44[1] = v13;
  v45 = 0;
  v46 = cc_ws_alloc;
  v47 = cc_ws_free;
  if (!v44[0])
  {
    v16 = 4294967283;
    goto LABEL_30;
  }
  v14 = *a1;
  v15 = **a1;
  if (*((_DWORD *)a1 + 2) < v15)
  {
    v16 = 4294967175;
    cc_ws_free((uint64_t)v44);
    goto LABEL_30;
  }
  v38 = a3;
  v39 = a2;
  v17 = (uint64_t)(v14 + 2);
  v18 = cczp_n((uint64_t)(v14 + 2));
  v19 = (uint64_t *)cc_ws_alloc(v44, v18);
  v20 = (_QWORD *)v46(v44, v18);
  v46(v44, v18);
  v40 = (_QWORD *)v46(v44, v18);
  v21 = (_QWORD *)v46(v44, v18);
  v41 = (unint64_t *)v46(v44, v18);
  ccn_seti(v18, v41, 0);
  v22 = **a1;
  v23 = v22 - 1;
  if (v22 != 1 && csss_shamir_share_bag_can_recover_secret((uint64_t)a1))
  {
    v43 = (uint64_t)(*a1 + 2);
    v42 = v23;
    v24 = cczp_n(v43);
    v37 = v45;
    v25 = (_QWORD *)v46(v44, v24);
    v26 = ccss_shamir_share_bag_copy_ith_share_x((uint64_t)a1, 0);
    ccn_seti(v24, v19, v26);
    v27 = 1;
    do
    {
      v28 = ccss_shamir_share_bag_copy_ith_share_x((uint64_t)a1, v27);
      ccn_seti(v24, v25, v28);
      cczp_mul_ws((uint64_t)v44, v43);
      ++v27;
    }
    while (v27 <= v42);
    if ((v42 & 1) != 0)
      cczp_negate(v43, v19, (unint64_t *)v19);
    v45 = v37;
  }
  if (v15)
  {
    v29 = 0;
LABEL_18:
    v30 = ccss_shamir_share_bag_copy_ith_share_x((uint64_t)a1, v29);
    ccss_shamir_share_bag_ith_share_y((uint64_t)a1, v29);
    ccn_seti(v18, v20, 1);
    v31 = 0;
    while (1)
    {
      v32 = ccss_shamir_share_bag_copy_ith_share_x((uint64_t)a1, v31);
      if (v30 <= v32)
      {
        if (v30 >= v32)
        {
          if (v29 != v31)
          {
            v16 = 4294967172;
            goto LABEL_29;
          }
          goto LABEL_25;
        }
        v33 = v32;
        v34 = (unint64_t *)cczp_prime(v17);
        ccn_sub1(v18, v21, v34, v33 - v30);
      }
      else
      {
        ccn_seti(v18, v21, v30 - v32);
      }
      cczp_mul_ws((uint64_t)v44, v17);
LABEL_25:
      if (v15 == ++v31)
      {
        ccn_seti(v18, v40, v30);
        cczp_mul_ws((uint64_t)v44, v17);
        cczp_inv_ws((uint64_t)v44, v17);
        cczp_mul_ws((uint64_t)v44, v17);
        cczp_mul_ws((uint64_t)v44, v17);
        cczp_add_ws((uint64_t)v44, v17);
        if (++v29 != v15)
          goto LABEL_18;
        break;
      }
    }
  }
  v35 = ccn_write_uint_padded_ct(v18, v41, v38, v39);
  v16 = v35 & (v35 >> 31);
LABEL_29:
  v45 = 0;
  v47((uint64_t)v44);
LABEL_30:
  cc_disable_dit(&v48);
  return v16;
}

uint64_t ccsrp_generate_H_AMK_ws(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  size_t session_key_length;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C874D8];
  v7 = *(_QWORD *)a2;
  MEMORY[0x1E0C86820](a1, a2, a3, a4);
  v9 = (_QWORD *)((char *)v17 - v8);
  ccdigest_init(v7, (_QWORD *)((char *)v17 - v8));
  v10 = *(_QWORD *)(a1 + 16);
  ccsrp_digest_update_ccn_ws(a1, (uint64_t *)a2, v9, a3, (*(_DWORD *)(a2 + 24) >> 10) & 1);
  v11 = ccsrp_session_size(a2);
  v12 = ccdh_gp_n(*(_QWORD *)(a2 + 8));
  ccdigest_update(v7, v9, v11, (char *)(a2 + 32 + 32 * v12 + 2 * **(_QWORD **)a2));
  session_key_length = ccsrp_get_session_key_length((uint64_t *)a2);
  v14 = ccdh_gp_n(*(_QWORD *)(a2 + 8));
  ccdigest_update(v7, v9, session_key_length, (char *)(a2 + 32 + 32 * v14));
  v15 = ccdh_gp_n(*(_QWORD *)(a2 + 8));
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v7 + 56))(v7, v9, a2 + 32 + 32 * v15 + 3 * **(_QWORD **)a2);
  result = cc_clear(*(_QWORD *)(v7 + 8) + *(_QWORD *)(v7 + 16) + 12, v9);
  *(_QWORD *)(a1 + 16) = v10;
  return result;
}

uint64_t ccsrp_sizeof_verifier()
{
  return 8 * ccdh_gp_n();
}

uint64_t ccsrp_sizeof_public_key()
{
  return 8 * ccdh_gp_n();
}

uint64_t ccsrp_sizeof_M_HAMK(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t ccsrp_ctx_init_with_size_option(_QWORD *__s, rsize_t __n, uint64_t a3, uint64_t a4, unsigned __int16 a5, uint64_t a6)
{
  int v11;

  cc_clear(__n, __s);
  *__s = a3;
  __s[1] = a4;
  v11 = *((_DWORD *)__s + 6);
  __s[2] = a6;
  *((_DWORD *)__s + 6) = v11 & 0xFFF80002 | (8 * a5);
  return 0;
}

uint64_t ccsrp_client_set_noUsernameInX(uint64_t a1, uint64_t a2)
{
  int v2;

  if ((_DWORD)a2)
    v2 = 2;
  else
    v2 = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 24) & 0xFFFFFFFD | v2;
  return a2;
}

uint64_t ccsrp_is_authenticated(uint64_t a1)
{
  return *(_DWORD *)(a1 + 24) & 1;
}

uint64_t ccsrp_exchange_size(uint64_t a1)
{
  return 8 * ccdh_gp_n(*(_QWORD *)(a1 + 8));
}

uint64_t ccsrp_session_size(uint64_t a1)
{
  return **(_QWORD **)a1;
}

uint64_t ccsrp_sizeof_session_key(uint64_t a1, char a2)
{
  if ((a2 & 7u) - 1 < 2)
    return 2 * *(_QWORD *)a1;
  if ((a2 & 7) != 0)
    return 0;
  return *(_QWORD *)a1;
}

uint64_t ccsrp_get_session_key_length(uint64_t *a1)
{
  uint64_t v1;
  int v2;

  v1 = *a1;
  v2 = (*((_DWORD *)a1 + 6) >> 3) & 7;
  if ((v2 - 1) < 2)
    return 2 * *(_QWORD *)v1;
  if (v2)
    return 0;
  return *(_QWORD *)v1;
}

uint64_t ccsrp_get_session_key(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  int v3;
  uint64_t v4;

  v2 = *(uint64_t **)a1;
  v3 = (*(_DWORD *)(a1 + 24) >> 3) & 7;
  if ((v3 - 1) >= 2)
  {
    if (v3)
      v4 = 0;
    else
      v4 = *v2;
  }
  else
  {
    v4 = 2 * *v2;
  }
  *a2 = v4;
  if ((*(_BYTE *)(a1 + 24) & 4) != 0)
    return a1 + 32 * ccdh_gp_n(*(_QWORD *)(a1 + 8)) + 32;
  else
    return 0;
}

uint64_t ccsrp_get_premaster_secret(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 24) & 4) != 0)
    return a1 + 24 * ccdh_gp_n(*(_QWORD *)(a1 + 8)) + 32;
  else
    return 0;
}

uint64_t ccsrp_ctx_init_option(_QWORD *a1, _QWORD *a2, _QWORD *a3, unsigned __int16 a4, uint64_t a5)
{
  uint64_t v10;
  int v11;

  v10 = ccdh_ccn_size(a3);
  cc_clear(4 * (*a2 + v10) + 48, a1);
  *a1 = a2;
  a1[1] = a3;
  v11 = *((_DWORD *)a1 + 6);
  a1[2] = a5;
  *((_DWORD *)a1 + 6) = v11 & 0xFFF80002 | (8 * a4);
  return 0;
}

uint64_t ccsrp_ctx_init(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  rsize_t v6;
  uint64_t *v7;
  uint64_t result;
  int v9;

  v6 = 4 * (*a2 + ccdh_ccn_size(a3)) + 48;
  v7 = ccrng(0);
  result = cc_clear(v6, a1);
  *a1 = a2;
  a1[1] = a3;
  v9 = *((_DWORD *)a1 + 6);
  a1[2] = v7;
  *((_DWORD *)a1 + 6) = v9 & 0xFFF80002;
  return result;
}

void *ccdes_ecb_decrypt_mode()
{
  return &ccdes_ltc_ecb_decrypt_mode;
}

uint64_t ccaes_gladman_encrypt(_DWORD *a1, int *a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _DWORD *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  _DWORD *v20;
  _DWORD *v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  int v67;

  v5 = a1[65];
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  if (a3)
  {
    v10 = (_DWORD *)(a4 + 8);
    do
    {
      if (v5)
      {
        v11 = *a1 ^ v6 ^ *(v10 - 2);
        v12 = a1[1] ^ v7 ^ *(v10 - 1);
        v13 = a1[2] ^ v8 ^ *v10;
        v14 = a1[3] ^ v9 ^ v10[1];
      }
      else
      {
        v11 = *a1 ^ *(v10 - 2);
        v12 = a1[1] ^ *(v10 - 1);
        v13 = a1[2] ^ *v10;
        v14 = a1[3] ^ v10[1];
      }
      v15 = a1[60];
      if (v15 == 12)
      {
        v20 = a1;
      }
      else
      {
        if (v15 != 14)
        {
          v21 = a1;
          goto LABEL_12;
        }
        v16 = t_fn[v11] ^ a1[4] ^ t_fn[BYTE1(v12) + 256] ^ t_fn[BYTE2(v13) + 512] ^ t_fn[HIBYTE(v14) + 768];
        v17 = t_fn[v12] ^ a1[5] ^ t_fn[BYTE1(v13) + 256] ^ t_fn[BYTE2(v14) + 512] ^ t_fn[HIBYTE(v11) + 768];
        v18 = t_fn[v13] ^ a1[6] ^ t_fn[BYTE1(v14) + 256] ^ t_fn[BYTE2(v11) + 512] ^ t_fn[HIBYTE(v12) + 768];
        v19 = t_fn[v14] ^ a1[7] ^ t_fn[BYTE1(v11) + 256] ^ t_fn[BYTE2(v12) + 512] ^ t_fn[HIBYTE(v13) + 768];
        v11 = t_fn[v16] ^ a1[8] ^ t_fn[BYTE1(v17) + 256] ^ t_fn[BYTE2(v18) + 512] ^ t_fn[HIBYTE(v19) + 768];
        v12 = t_fn[v17] ^ a1[9] ^ t_fn[BYTE1(v18) + 256] ^ t_fn[BYTE2(v19) + 512] ^ t_fn[HIBYTE(v16) + 768];
        v13 = t_fn[v18] ^ a1[10] ^ t_fn[BYTE1(v19) + 256] ^ t_fn[BYTE2(v16) + 512] ^ t_fn[HIBYTE(v17) + 768];
        v14 = t_fn[v19] ^ a1[11] ^ t_fn[BYTE1(v16) + 256] ^ t_fn[BYTE2(v17) + 512] ^ t_fn[HIBYTE(v18) + 768];
        v20 = a1 + 8;
      }
      v22 = v20[8];
      v21 = v20 + 8;
      v23 = t_fn[v11] ^ *(v21 - 4) ^ t_fn[BYTE1(v12) + 256] ^ t_fn[BYTE2(v13) + 512] ^ t_fn[HIBYTE(v14) + 768];
      v24 = t_fn[v12] ^ *(v21 - 3) ^ t_fn[BYTE1(v13) + 256] ^ t_fn[BYTE2(v14) + 512] ^ t_fn[HIBYTE(v11) + 768];
      v25 = t_fn[v13] ^ *(v21 - 2) ^ t_fn[BYTE1(v14) + 256] ^ t_fn[BYTE2(v11) + 512] ^ t_fn[HIBYTE(v12) + 768];
      v26 = t_fn[v14] ^ *(v21 - 1) ^ t_fn[BYTE1(v11) + 256] ^ t_fn[BYTE2(v12) + 512] ^ t_fn[HIBYTE(v13) + 768];
      v11 = t_fn[v23] ^ v22 ^ t_fn[BYTE1(v24) + 256] ^ t_fn[BYTE2(v25) + 512] ^ t_fn[HIBYTE(v26) + 768];
      v12 = t_fn[v24] ^ v21[1] ^ t_fn[BYTE1(v25) + 256] ^ t_fn[BYTE2(v26) + 512] ^ t_fn[HIBYTE(v23) + 768];
      v13 = t_fn[v25] ^ v21[2] ^ t_fn[BYTE1(v26) + 256] ^ t_fn[BYTE2(v23) + 512] ^ t_fn[HIBYTE(v24) + 768];
      v14 = t_fn[v26] ^ v21[3] ^ t_fn[BYTE1(v23) + 256] ^ t_fn[BYTE2(v24) + 512] ^ t_fn[HIBYTE(v25) + 768];
LABEL_12:
      v27 = t_fn[v11] ^ v21[4] ^ t_fn[BYTE1(v12) + 256] ^ t_fn[BYTE2(v13) + 512] ^ t_fn[HIBYTE(v14) + 768];
      v28 = t_fn[v12] ^ v21[5] ^ t_fn[BYTE1(v13) + 256] ^ t_fn[BYTE2(v14) + 512] ^ t_fn[HIBYTE(v11) + 768];
      v29 = t_fn[v13] ^ v21[6] ^ t_fn[BYTE1(v14) + 256] ^ t_fn[BYTE2(v11) + 512] ^ t_fn[HIBYTE(v12) + 768];
      v30 = t_fn[v14] ^ v21[7] ^ t_fn[BYTE1(v11) + 256] ^ t_fn[BYTE2(v12) + 512] ^ t_fn[HIBYTE(v13) + 768];
      v31 = t_fn[v27] ^ v21[8] ^ t_fn[BYTE1(v28) + 256] ^ t_fn[BYTE2(v29) + 512] ^ t_fn[HIBYTE(v30) + 768];
      v32 = t_fn[v28] ^ v21[9] ^ t_fn[BYTE1(v29) + 256] ^ t_fn[BYTE2(v30) + 512] ^ t_fn[HIBYTE(v27) + 768];
      v33 = t_fn[v29] ^ v21[10] ^ t_fn[BYTE1(v30) + 256] ^ t_fn[BYTE2(v27) + 512] ^ t_fn[HIBYTE(v28) + 768];
      v34 = t_fn[v30] ^ v21[11] ^ t_fn[BYTE1(v27) + 256] ^ t_fn[BYTE2(v28) + 512] ^ t_fn[HIBYTE(v29) + 768];
      v35 = t_fn[v31] ^ v21[12] ^ t_fn[BYTE1(v32) + 256] ^ t_fn[BYTE2(v33) + 512] ^ t_fn[HIBYTE(v34) + 768];
      v36 = t_fn[v32] ^ v21[13] ^ t_fn[BYTE1(v33) + 256] ^ t_fn[BYTE2(v34) + 512] ^ t_fn[HIBYTE(v31) + 768];
      v37 = t_fn[v33] ^ v21[14] ^ t_fn[BYTE1(v34) + 256] ^ t_fn[BYTE2(v31) + 512] ^ t_fn[HIBYTE(v32) + 768];
      v38 = t_fn[v34] ^ v21[15] ^ t_fn[BYTE1(v31) + 256] ^ t_fn[BYTE2(v32) + 512] ^ t_fn[HIBYTE(v33) + 768];
      v39 = t_fn[v35] ^ v21[16] ^ t_fn[BYTE1(v36) + 256] ^ t_fn[BYTE2(v37) + 512] ^ t_fn[HIBYTE(v38) + 768];
      v40 = t_fn[v36] ^ v21[17] ^ t_fn[BYTE1(v37) + 256] ^ t_fn[BYTE2(v38) + 512] ^ t_fn[HIBYTE(v35) + 768];
      v41 = t_fn[v37] ^ v21[18] ^ t_fn[BYTE1(v38) + 256] ^ t_fn[BYTE2(v35) + 512] ^ t_fn[HIBYTE(v36) + 768];
      v42 = t_fn[v38] ^ v21[19] ^ t_fn[BYTE1(v35) + 256] ^ t_fn[BYTE2(v36) + 512] ^ t_fn[HIBYTE(v37) + 768];
      v43 = t_fn[v39] ^ v21[20] ^ t_fn[BYTE1(v40) + 256] ^ t_fn[BYTE2(v41) + 512] ^ t_fn[HIBYTE(v42) + 768];
      v44 = t_fn[v40] ^ v21[21] ^ t_fn[BYTE1(v41) + 256] ^ t_fn[BYTE2(v42) + 512] ^ t_fn[HIBYTE(v39) + 768];
      v45 = t_fn[v41] ^ v21[22] ^ t_fn[BYTE1(v42) + 256] ^ t_fn[BYTE2(v39) + 512] ^ t_fn[HIBYTE(v40) + 768];
      v46 = t_fn[v42] ^ v21[23] ^ t_fn[BYTE1(v39) + 256] ^ t_fn[BYTE2(v40) + 512] ^ t_fn[HIBYTE(v41) + 768];
      v47 = t_fn[v43] ^ v21[24] ^ t_fn[BYTE1(v44) + 256] ^ t_fn[BYTE2(v45) + 512] ^ t_fn[HIBYTE(v46) + 768];
      v48 = t_fn[v44] ^ v21[25] ^ t_fn[BYTE1(v45) + 256] ^ t_fn[BYTE2(v46) + 512] ^ t_fn[HIBYTE(v43) + 768];
      v49 = t_fn[v45] ^ v21[26] ^ t_fn[BYTE1(v46) + 256] ^ t_fn[BYTE2(v43) + 512] ^ t_fn[HIBYTE(v44) + 768];
      v50 = t_fn[v46] ^ v21[27] ^ t_fn[BYTE1(v43) + 256] ^ t_fn[BYTE2(v44) + 512] ^ t_fn[HIBYTE(v45) + 768];
      v51 = t_fn[v47] ^ v21[28] ^ t_fn[BYTE1(v48) + 256] ^ t_fn[BYTE2(v49) + 512] ^ t_fn[HIBYTE(v50) + 768];
      v52 = t_fn[v48] ^ v21[29] ^ t_fn[BYTE1(v49) + 256] ^ t_fn[BYTE2(v50) + 512] ^ t_fn[HIBYTE(v47) + 768];
      v53 = t_fn[v49] ^ v21[30] ^ t_fn[BYTE1(v50) + 256] ^ t_fn[BYTE2(v47) + 512] ^ t_fn[HIBYTE(v48) + 768];
      v54 = t_fn[v50] ^ v21[31] ^ t_fn[BYTE1(v47) + 256] ^ t_fn[BYTE2(v48) + 512] ^ t_fn[HIBYTE(v49) + 768];
      v55 = t_fn[v51] ^ v21[32] ^ t_fn[BYTE1(v52) + 256] ^ t_fn[BYTE2(v53) + 512] ^ t_fn[HIBYTE(v54) + 768];
      v56 = t_fn[v52] ^ v21[33] ^ t_fn[BYTE1(v53) + 256] ^ t_fn[BYTE2(v54) + 512] ^ t_fn[HIBYTE(v51) + 768];
      v57 = t_fn[v53] ^ v21[34] ^ t_fn[BYTE1(v54) + 256] ^ t_fn[BYTE2(v51) + 512] ^ t_fn[HIBYTE(v52) + 768];
      v58 = t_fn[v54] ^ v21[35] ^ t_fn[BYTE1(v51) + 256] ^ t_fn[BYTE2(v52) + 512] ^ t_fn[HIBYTE(v53) + 768];
      v59 = t_fn[v55] ^ v21[36] ^ t_fn[BYTE1(v56) + 256] ^ t_fn[BYTE2(v57) + 512] ^ t_fn[HIBYTE(v58) + 768];
      v60 = t_fn[v56] ^ v21[37] ^ t_fn[BYTE1(v57) + 256] ^ t_fn[BYTE2(v58) + 512] ^ t_fn[HIBYTE(v55) + 768];
      v61 = t_fn[v57] ^ v21[38] ^ t_fn[BYTE1(v58) + 256] ^ t_fn[BYTE2(v55) + 512] ^ t_fn[HIBYTE(v56) + 768];
      v62 = t_fl[(LOBYTE(t_fn[v55]) ^ *((_BYTE *)v21 + 144) ^ LOBYTE(t_fn[BYTE1(v56) + 256]) ^ LOBYTE(t_fn[BYTE2(v57) + 512]) ^ LOBYTE(t_fn[HIBYTE(v58) + 768]))];
      v63 = t_fn[v58] ^ v21[39] ^ t_fn[BYTE1(v55) + 256] ^ t_fn[BYTE2(v56) + 512] ^ t_fn[HIBYTE(v57) + 768];
      v6 = v62 ^ v21[40] ^ t_fl[BYTE1(v60) + 256] ^ t_fl[BYTE2(v61) + 512] ^ t_fl[HIBYTE(v63) + 768];
      v7 = t_fl[v60] ^ v21[41] ^ t_fl[BYTE1(v61) + 256] ^ t_fl[BYTE2(v63) + 512] ^ t_fl[HIBYTE(v59) + 768];
      v64 = v21[43];
      v8 = t_fl[v61] ^ v21[42] ^ t_fl[BYTE1(v63) + 256] ^ t_fl[BYTE2(v59) + 512] ^ t_fl[HIBYTE(v60) + 768];
      v65 = t_fl[BYTE1(v59) + 256] ^ t_fl[BYTE2(v60) + 512];
      v66 = t_fl[HIBYTE(v61) + 768];
      v67 = t_fl[v63] ^ v64 ^ v65;
      *a5 = v6;
      a5[1] = v7;
      v9 = v67 ^ v66;
      a5[2] = v8;
      a5[3] = v9;
      a5 += 4;
      v10 += 4;
      --a3;
    }
    while (a3);
  }
  if (v5)
  {
    *a2 = v6;
    a2[1] = v7;
    a2[2] = v8;
    a2[3] = v9;
  }
  return 0;
}

uint64_t ccaes_gladman_decrypt(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t v6;
  int v7;
  __int128 *v8;
  int v9;
  int v10;
  int v11;
  _DWORD *v12;
  int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  _DWORD *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int *v73;
  int *v74;
  int *v75;
  int *v76;
  __int128 v78;

  v5 = *(_DWORD *)(a1 + 260);
  if (a3 || !v5)
  {
    v6 = a4 + 16 * a3;
    v7 = *(_DWORD *)(v6 - 16);
    v9 = *(_DWORD *)(v6 - 12);
    v8 = (__int128 *)(v6 - 16);
    v10 = *((_DWORD *)v8 + 2);
    v11 = *((_DWORD *)v8 + 3);
    if (a3 && v5)
    {
      v78 = *v8;
LABEL_7:
      v12 = (_DWORD *)(a1 + 4 * (4 * *(_DWORD *)(a1 + 240)));
      v13 = (int *)(16 * a3 + a5 - 8);
      while (1)
      {
        v14 = *v12 ^ v7;
        v15 = v12[1] ^ v9;
        v16 = v12[2] ^ v10;
        v17 = v12[3] ^ v11;
        v18 = *(_DWORD *)(a1 + 240);
        v19 = v12;
        if (v18 != 12)
        {
          if (v18 != 14)
            goto LABEL_12;
          v20 = t_in[v14] ^ *(v12 - 4) ^ t_in[BYTE1(v17) + 256] ^ t_in[BYTE2(v16) + 512] ^ t_in[HIBYTE(v15) + 768];
          v21 = t_in[v15] ^ *(v12 - 3) ^ t_in[BYTE1(v14) + 256] ^ t_in[BYTE2(v17) + 512] ^ t_in[HIBYTE(v16) + 768];
          v22 = t_in[v16] ^ *(v12 - 2) ^ t_in[BYTE1(v15) + 256] ^ t_in[BYTE2(v14) + 512] ^ t_in[HIBYTE(v17) + 768];
          v23 = t_in[v17] ^ *(v12 - 1) ^ t_in[BYTE1(v16) + 256] ^ t_in[BYTE2(v15) + 512] ^ t_in[HIBYTE(v14) + 768];
          v14 = t_in[v20] ^ *(v12 - 8) ^ t_in[BYTE1(v23) + 256] ^ t_in[BYTE2(v22) + 512] ^ t_in[HIBYTE(v21) + 768];
          v15 = t_in[v21] ^ *(v12 - 7) ^ t_in[BYTE1(v20) + 256] ^ t_in[BYTE2(v23) + 512] ^ t_in[HIBYTE(v22) + 768];
          v16 = t_in[v22] ^ *(v12 - 6) ^ t_in[BYTE1(v21) + 256] ^ t_in[BYTE2(v20) + 512] ^ t_in[HIBYTE(v23) + 768];
          v17 = t_in[v23] ^ *(v12 - 5) ^ t_in[BYTE1(v22) + 256] ^ t_in[BYTE2(v21) + 512] ^ t_in[HIBYTE(v20) + 768];
          v19 = v12 - 8;
        }
        v24 = *(v19 - 8);
        v19 -= 8;
        v25 = t_in[v14] ^ v19[4] ^ t_in[BYTE1(v17) + 256] ^ t_in[BYTE2(v16) + 512] ^ t_in[HIBYTE(v15) + 768];
        v26 = t_in[v15] ^ v19[5] ^ t_in[BYTE1(v14) + 256] ^ t_in[BYTE2(v17) + 512] ^ t_in[HIBYTE(v16) + 768];
        v27 = t_in[v16] ^ v19[6] ^ t_in[BYTE1(v15) + 256] ^ t_in[BYTE2(v14) + 512] ^ t_in[HIBYTE(v17) + 768];
        v28 = t_in[v17] ^ v19[7] ^ t_in[BYTE1(v16) + 256] ^ t_in[BYTE2(v15) + 512] ^ t_in[HIBYTE(v14) + 768];
        v14 = t_in[v25] ^ v24 ^ t_in[BYTE1(v28) + 256] ^ t_in[BYTE2(v27) + 512] ^ t_in[HIBYTE(v26) + 768];
        v15 = t_in[v26] ^ v19[1] ^ t_in[BYTE1(v25) + 256] ^ t_in[BYTE2(v28) + 512] ^ t_in[HIBYTE(v27) + 768];
        v16 = t_in[v27] ^ v19[2] ^ t_in[BYTE1(v26) + 256] ^ t_in[BYTE2(v25) + 512] ^ t_in[HIBYTE(v28) + 768];
        v17 = t_in[v28] ^ v19[3] ^ t_in[BYTE1(v27) + 256] ^ t_in[BYTE2(v26) + 512] ^ t_in[HIBYTE(v25) + 768];
LABEL_12:
        v29 = t_in[v14] ^ *(v19 - 4) ^ t_in[BYTE1(v17) + 256] ^ t_in[BYTE2(v16) + 512] ^ t_in[HIBYTE(v15) + 768];
        v30 = t_in[v15] ^ *(v19 - 3) ^ t_in[BYTE1(v14) + 256] ^ t_in[BYTE2(v17) + 512] ^ t_in[HIBYTE(v16) + 768];
        v31 = t_in[v16] ^ *(v19 - 2) ^ t_in[BYTE1(v15) + 256] ^ t_in[BYTE2(v14) + 512] ^ t_in[HIBYTE(v17) + 768];
        v32 = t_in[v17] ^ *(v19 - 1) ^ t_in[BYTE1(v16) + 256] ^ t_in[BYTE2(v15) + 512] ^ t_in[HIBYTE(v14) + 768];
        v33 = t_in[v29] ^ *(v19 - 8) ^ t_in[BYTE1(v32) + 256] ^ t_in[BYTE2(v31) + 512] ^ t_in[HIBYTE(v30) + 768];
        v34 = t_in[v30] ^ *(v19 - 7) ^ t_in[BYTE1(v29) + 256] ^ t_in[BYTE2(v32) + 512];
        v35 = t_in[v31] ^ *(v19 - 6) ^ t_in[BYTE1(v30) + 256] ^ t_in[BYTE2(v29) + 512] ^ t_in[HIBYTE(v32) + 768];
        v36 = t_in[v32] ^ *(v19 - 5) ^ t_in[BYTE1(v31) + 256] ^ t_in[BYTE2(v30) + 512] ^ t_in[HIBYTE(v29) + 768];
        v37 = v34 ^ t_in[HIBYTE(v31) + 768];
        v38 = t_in[v33] ^ *(v19 - 12) ^ t_in[BYTE1(v36) + 256] ^ t_in[BYTE2(v35) + 512] ^ t_in[HIBYTE(v37) + 768];
        v39 = t_in[(v34 ^ LOBYTE(t_in[HIBYTE(v31) + 768]))] ^ *(v19 - 11) ^ t_in[BYTE1(v33) + 256] ^ t_in[BYTE2(v36) + 512] ^ t_in[HIBYTE(v35) + 768];
        v40 = t_in[v35] ^ *(v19 - 10) ^ t_in[BYTE1(v37) + 256] ^ t_in[BYTE2(v33) + 512] ^ t_in[HIBYTE(v36) + 768];
        v41 = t_in[v36] ^ *(v19 - 9) ^ t_in[BYTE1(v35) + 256] ^ t_in[BYTE2(v37) + 512] ^ t_in[HIBYTE(v33) + 768];
        v42 = t_in[v38] ^ *(v19 - 16) ^ t_in[BYTE1(v41) + 256] ^ t_in[BYTE2(v40) + 512] ^ t_in[HIBYTE(v39) + 768];
        v43 = t_in[v39] ^ *(v19 - 15) ^ t_in[BYTE1(v38) + 256] ^ t_in[BYTE2(v41) + 512] ^ t_in[HIBYTE(v40) + 768];
        v44 = t_in[v40] ^ *(v19 - 14) ^ t_in[BYTE1(v39) + 256] ^ t_in[BYTE2(v38) + 512] ^ t_in[HIBYTE(v41) + 768];
        v45 = t_in[v41] ^ *(v19 - 13) ^ t_in[BYTE1(v40) + 256] ^ t_in[BYTE2(v39) + 512] ^ t_in[HIBYTE(v38) + 768];
        v46 = t_in[v42] ^ *(v19 - 20) ^ t_in[BYTE1(v45) + 256] ^ t_in[BYTE2(v44) + 512] ^ t_in[HIBYTE(v43) + 768];
        v47 = t_in[v43] ^ *(v19 - 19) ^ t_in[BYTE1(v42) + 256] ^ t_in[BYTE2(v45) + 512];
        v48 = t_in[v44] ^ *(v19 - 18) ^ t_in[BYTE1(v43) + 256] ^ t_in[BYTE2(v42) + 512] ^ t_in[HIBYTE(v45) + 768];
        v49 = t_in[v45] ^ *(v19 - 17) ^ t_in[BYTE1(v44) + 256] ^ t_in[BYTE2(v43) + 512] ^ t_in[HIBYTE(v42) + 768];
        v50 = v47 ^ t_in[HIBYTE(v44) + 768];
        v51 = t_in[v46] ^ *(v19 - 24) ^ t_in[BYTE1(v49) + 256] ^ t_in[BYTE2(v48) + 512] ^ t_in[HIBYTE(v50) + 768];
        v52 = t_in[v50] ^ *(v19 - 23) ^ t_in[BYTE1(v46) + 256] ^ t_in[BYTE2(v49) + 512] ^ t_in[HIBYTE(v48) + 768];
        v53 = t_in[v48] ^ *(v19 - 22) ^ t_in[BYTE1(v50) + 256] ^ t_in[BYTE2(v46) + 512] ^ t_in[HIBYTE(v49) + 768];
        v54 = t_in[v49] ^ *(v19 - 21) ^ t_in[BYTE1(v48) + 256] ^ t_in[BYTE2(v50) + 512] ^ t_in[HIBYTE(v46) + 768];
        v55 = t_in[v51] ^ *(v19 - 28) ^ t_in[BYTE1(v54) + 256] ^ t_in[BYTE2(v53) + 512] ^ t_in[HIBYTE(v52) + 768];
        v56 = t_in[v52] ^ *(v19 - 27) ^ t_in[BYTE1(v51) + 256] ^ t_in[BYTE2(v54) + 512] ^ t_in[HIBYTE(v53) + 768];
        v57 = t_in[v53] ^ *(v19 - 26) ^ t_in[BYTE1(v52) + 256] ^ t_in[BYTE2(v51) + 512] ^ t_in[HIBYTE(v54) + 768];
        v58 = t_in[v54] ^ *(v19 - 25) ^ t_in[BYTE1(v53) + 256] ^ t_in[BYTE2(v52) + 512] ^ t_in[HIBYTE(v51) + 768];
        v59 = t_in[v55] ^ *(v19 - 32) ^ t_in[BYTE1(v58) + 256] ^ t_in[BYTE2(v57) + 512] ^ t_in[HIBYTE(v56) + 768];
        v60 = t_in[v56] ^ *(v19 - 31) ^ t_in[BYTE1(v55) + 256] ^ t_in[BYTE2(v58) + 512] ^ t_in[HIBYTE(v57) + 768];
        v61 = t_in[HIBYTE(v58) + 768];
        v62 = t_in[v57] ^ *(v19 - 30) ^ t_in[BYTE1(v56) + 256] ^ t_in[BYTE2(v55) + 512];
        v63 = t_in[BYTE1(v57) + 256];
        LOWORD(v57) = v62 ^ v61;
        v64 = t_in[v58] ^ *(v19 - 29) ^ v63 ^ t_in[BYTE2(v56) + 512] ^ t_in[HIBYTE(v55) + 768];
        v65 = t_in[v59] ^ *(v19 - 36) ^ t_in[BYTE1(v64) + 256] ^ t_in[((v62 ^ v61) >> 16)
                                                                                     + 512] ^ t_in[HIBYTE(v60) + 768];
        v66 = t_in[v60] ^ *(v19 - 35) ^ t_in[BYTE1(v59) + 256] ^ t_in[BYTE2(v64) + 512] ^ t_in[((v62 ^ v61) >> 24) + 768];
        v67 = t_in[v57] ^ *(v19 - 34) ^ t_in[BYTE1(v60) + 256] ^ t_in[BYTE2(v59) + 512] ^ t_in[HIBYTE(v64) + 768];
        v68 = t_in[v64] ^ *(v19 - 33) ^ t_in[BYTE1(v57) + 256] ^ t_in[BYTE2(v60) + 512] ^ t_in[HIBYTE(v59) + 768];
        v69 = t_il[v65] ^ *(v19 - 40) ^ t_il[BYTE1(v68) + 256] ^ t_il[BYTE2(v67) + 512] ^ t_il[HIBYTE(v66) + 768];
        v70 = t_il[v66] ^ *(v19 - 39) ^ t_il[BYTE1(v65) + 256] ^ t_il[BYTE2(v68) + 512] ^ t_il[HIBYTE(v67) + 768];
        v71 = t_il[(LOBYTE(t_in[v57]) ^ *((_BYTE *)v19 - 136) ^ LOBYTE(t_in[BYTE1(v60) + 256]) ^ LOBYTE(t_in[BYTE2(v59) + 512]) ^ LOBYTE(t_in[HIBYTE(v64) + 768]))] ^ *(v19 - 38) ^ t_il[BYTE1(v66) + 256] ^ t_il[BYTE2(v65) + 512] ^ t_il[HIBYTE(v68) + 768];
        v72 = t_il[v68] ^ *(v19 - 37) ^ t_il[BYTE1(v67) + 256] ^ t_il[BYTE2(v66) + 512] ^ t_il[HIBYTE(v65) + 768];
        if (v5)
        {
          if (a3 == 1)
          {
            v73 = a2;
            v74 = a2 + 1;
            v75 = a2 + 2;
            v76 = a2 + 3;
          }
          else
          {
            v73 = (int *)(v8 - 1);
            v74 = (int *)v8 - 3;
            v75 = (int *)v8 - 2;
            v76 = (int *)v8-- - 1;
          }
          v11 = *v76;
          v10 = *v75;
          v9 = *v74;
          v7 = *v73;
          v69 ^= v7;
          v70 ^= v9;
          v71 ^= v10;
          v72 ^= v11;
        }
        else
        {
          if (a3 == 1)
          {
            *(v13 - 2) = v69;
            *(v13 - 1) = v70;
            *v13 = v71;
            v13[1] = v72;
            return 0;
          }
          v7 = *((_DWORD *)v8 - 4);
          v9 = *((_DWORD *)v8-- - 3);
          v10 = *((_DWORD *)v8 + 2);
          v11 = *((_DWORD *)v8 + 3);
        }
        *(v13 - 2) = v69;
        *(v13 - 1) = v70;
        *v13 = v71;
        v13[1] = v72;
        v13 -= 4;
        if (!--a3)
          goto LABEL_20;
      }
    }
    if (a3)
      goto LABEL_7;
LABEL_20:
    if (v5)
      *(_OWORD *)a2 = v78;
  }
  return 0;
}

__int128 *cc_module_id(int a1)
{
  int v1;

  strcpy((char *)&cc_module_id_moduleProc, "Apple ARM");
  cc_module_id_moduleSecLevel = 3230803;
  switch(a1)
  {
    case 0:
      snprintf((char *)&cc_module_id_moduleID, 0x100uLL, "%s v%s [%s, %s, %s, %s]", "Apple corecrypto Module");
      break;
    case 1:
      strcpy((char *)&cc_module_id_moduleID, "Apple corecrypto Module");
      break;
    case 2:
      BYTE4(cc_module_id_moduleID) = 0;
      v1 = 808334385;
      goto LABEL_7;
    case 3:
      BYTE4(cc_module_id_moduleID) = 0;
      v1 = 1919251285;
LABEL_7:
      LODWORD(cc_module_id_moduleID) = v1;
      break;
    case 4:
      strcpy((char *)&cc_module_id_moduleID, "Software");
      break;
    case 5:
    case 6:
      snprintf((char *)&cc_module_id_moduleID, 0x100uLL, "%s");
      break;
    default:
      strcpy((char *)&cc_module_id_moduleID, "INVALID Module ID");
      break;
  }
  return &cc_module_id_moduleID;
}

uint64_t ccpolyzp_po2cyc_coeff_apply_galois(uint64_t *a1, unsigned int **a2, unsigned int a3)
{
  unsigned int *v6;
  unsigned int v7;
  uint8x8_t v8;
  BOOL v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  unsigned int **v13;
  unsigned int v14;
  uint64_t *v15;
  int *v16;
  int v17;
  unsigned int *v18;
  unsigned int v19;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t *v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  if (a1 == (uint64_t *)a2)
    return 4294967289;
  if (!ccpolyzp_po2cyc_ctx_eq(*a1, *a2))
    return 4294967289;
  v6 = *a2;
  v7 = **a2;
  v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v7 <= 0x100000 && v8.i32[0] == 1;
  if (!v9)
    return 4294967289;
  result = 4294967289;
  if (a3 >= 2 && (a3 & 1) != 0 && 2 * v7 > a3)
  {
    v11 = v6[1];
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = a2 + 1;
      v14 = 0x80000000 >> __clz(v7);
      v16 = (int *)*a1;
      v15 = a1 + 1;
      v17 = *v16;
      do
      {
        v18 = v6;
        if (v12 < (v11 - 1))
        {
          v19 = v11 - 2;
          v18 = v6;
          do
            v18 = (unsigned int *)*((_QWORD *)v18 + 14);
          while (v12 < v19--);
        }
        v21 = 0;
        v22 = 0;
        v23 = *((_QWORD *)v18 + 2);
        v24 = (unint64_t *)&v13[v7 * v12];
        v25 = v7;
        do
        {
          v9 = (v22 & v14) == 0;
          v22 += a3;
          v26 = v17 * v12 + v21;
          v28 = *v24++;
          v27 = v28;
          v29 = (v23 - v28) & -(uint64_t)(((v28 | HIDWORD(v28)) + 0xFFFFFFFF) >> 32);
          if (!v9)
            v27 = v29;
          v15[v26] = v27;
          v21 = v22 & (v7 - 1);
          --v25;
        }
        while (v25);
        ++v12;
      }
      while (v12 != v11);
    }
    return 0;
  }
  return result;
}

uint64_t ccpolyzp_po2cyc_eval_apply_galois(uint64_t *a1, unsigned int **a2, unsigned int a3)
{
  unsigned int v6;
  uint8x8_t v7;
  uint64_t result;
  int v10;
  char v11;
  unsigned int v12;
  int v13;
  uint64_t *v14;
  unsigned int v15;
  unsigned int v16;

  if (a1 == (uint64_t *)a2)
    return 4294967289;
  if (!ccpolyzp_po2cyc_ctx_eq(*a1, *a2))
    return 4294967289;
  v6 = **a2;
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v6 > 0x100000 || v7.i32[0] != 1)
    return 4294967289;
  result = 4294967289;
  if (a3 >= 2 && (a3 & 1) != 0 && 2 * v6 > a3)
  {
    v16 = (*a2)[1];
    if (v16)
    {
      v10 = 0;
      v11 = __clz(v6);
      v12 = a3;
      do
      {
        v13 = 0;
        v14 = &a1[(*(_DWORD *)*a1 * v10) + 1];
        do
        {
          v15 = __rbit32(v6 + v13++);
          ccn_set(1, v14++, &(&a2[(__rbit32((v6 - 1) & ((v12 * (unint64_t)(v15 >> v11)) >> 1)) >> (v11 + 1)) + 1])[**a2 * v10]);
        }
        while (v6 != v13);
        ++v10;
      }
      while (v10 != v16);
    }
    return 0;
  }
  return result;
}

uint64_t ccsiv_context_size(uint64_t *a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *a1;
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccsiv_block_size(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *(_QWORD *)(a1 + 8);
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccsiv_ciphertext_size(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v8;
  char v10;

  v2 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v10 = v2;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + a2;
  cc_disable_dit(&v10);
  return v8;
}

unint64_t ccsiv_plaintext_size(uint64_t a1, unint64_t a2)
{
  char v2;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v12;

  v2 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v12 = v2;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  _CF = a2 >= v8;
  v9 = a2 - v8;
  if (_CF)
    v10 = v9;
  else
    v10 = 0;
  cc_disable_dit(&v12);
  return v10;
}

uint64_t ccsiv_init(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = (*(uint64_t (**)(void))(a1 + 16))();
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccsiv_set_nonce(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  uint64_t v10;
  char v12;

  v4 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v12 = v4;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 24))(a2, a3, a4);
  cc_disable_dit(&v12);
  return v10;
}

uint64_t ccsiv_aad(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  uint64_t v10;
  char v12;

  v4 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v12 = v4;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 32))(a2, a3, a4);
  cc_disable_dit(&v12);
  return v10;
}

uint64_t ccsiv_crypt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5;
  uint64_t v11;
  char v13;

  v5 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v13 = v5;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 40))(a2, a3, a4, a5);
  cc_disable_dit(&v13);
  return v11;
}

uint64_t ccsiv_reset(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v8;
  char v10;

  v2 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v10 = v2;
  v8 = (*(uint64_t (**)(uint64_t))(a1 + 48))(a2);
  cc_disable_dit(&v10);
  return v8;
}

uint64_t ccsiv_one_shot(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char v16;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE v26[7];
  char v27;
  uint64_t v28;

  v16 = 0;
  v28 = *MEMORY[0x1E0C874D8];
  v27 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v16 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v16 = 1;
    }
  }
  v27 = v16;
  MEMORY[0x1E0C86820](a1, a2, a2, a3);
  v23 = &v26[-v22];
  v24 = (*(uint64_t (**)(uint64_t, _BYTE *))(a1 + 16))(a1, &v26[-v22]);
  if (!(_DWORD)v24)
  {
    v24 = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t))(a1 + 24))(v23, a4, a5);
    if (!(_DWORD)v24)
    {
      v24 = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t))(a1 + 32))(v23, a6, a7);
      if (!(_DWORD)v24)
      {
        v24 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(a1 + 40))(v23, a8, a9, a10);
        if (!(_DWORD)v24)
          cc_clear(*(_QWORD *)a1, v23);
      }
    }
  }
  cc_disable_dit(&v27);
  return v24;
}

uint64_t ccss_sizeof_shamir_share_generator_serialization(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 8) + 2;
  v4 = 8 * cczp_n(*(_QWORD *)a1);
  if (!is_mul_ok(v3, v4))
    return 0;
  result = 0;
  v6 = v3 * v4;
  v7 = __CFADD__(v6, 9);
  v8 = v6 + 9;
  v9 = v7;
  v10 = v9 << 63 >> 63;
  if (v10 == v9 && (v10 & 0x8000000000000000) == 0)
  {
    *a2 = v8;
    return 1;
  }
  return result;
}

uint64_t ccss_shamir_share_generator_serialize(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  char *v18;
  unint64_t v20;
  char v21;

  v6 = 0;
  v21 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v21 = v6;
  v20 = 0;
  v12 = 4294967289;
  if (ccss_sizeof_shamir_share_generator_serialization(a3, &v20) && v20 <= a1)
  {
    *(_BYTE *)a2 = 1;
    v13 = **(_QWORD **)a3;
    if ((v13 >> 29))
    {
      v12 = 4294967284;
    }
    else
    {
      v14 = 8 * v13;
      *(_DWORD *)(a2 + 1) = bswap32(8 * v13);
      v15 = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a2 + 5) = bswap32(v15);
      v16 = ccn_write_uint_padded_ct(v13, (unint64_t *)(*(_QWORD *)a3 + 24), 8 * v13, (char *)(a2 + 9));
      if ((v16 & 0x80000000) == 0)
      {
        v17 = 0;
        v18 = (char *)(v14 + a2 + 9);
        while (1)
        {
          v16 = ccn_write_uint_padded_ct(v13, (unint64_t *)(a3 + 8 * v13 * v17 + 16), 8 * v13, v18);
          if ((v16 & 0x80000000) != 0)
            break;
          ++v17;
          v18 += v14;
          if (v17 > v15)
          {
            v12 = 0;
            goto LABEL_13;
          }
        }
      }
      v12 = v16;
    }
  }
LABEL_13:
  cc_disable_dit(&v21);
  return v12;
}

uint64_t ccss_shamir_share_generator_deserialize(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  char v8;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t uint;
  unint64_t *v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unint64_t *v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t (*v27)(_QWORD *, uint64_t);
  void (*v28)(uint64_t);
  char v29;

  v8 = 0;
  v29 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v29 = v8;
  v14 = *(_QWORD *)(a2 + 8);
  v25[0] = cc_malloc_clear(8 * v14);
  v25[1] = v14;
  v26 = 0;
  v27 = cc_ws_alloc;
  v28 = cc_ws_free;
  if (!v25[0])
  {
    v23 = 4294967283;
    goto LABEL_22;
  }
  ccss_shamir_init_share_poly(a1, (int *)a2);
  if (a3 >= 0xA && *(_BYTE *)a4 == 1)
  {
    v15 = bswap32(*(_DWORD *)(a4 + 1));
    if ((_DWORD)v15)
    {
      if (v14 == (v15 + 7) >> 3)
      {
        v16 = bswap32(*(_DWORD *)(a4 + 5));
        *(_DWORD *)(a1 + 8) = v16;
        if ((_DWORD)v16 != -1 && (_DWORD)v16 + 1 == *(_DWORD *)a2 && (v16 + 2) * v15 + 9 == a3)
        {
          v17 = (unint64_t *)cc_ws_alloc(v25, v14);
          uint = ccn_read_uint(v14, v17, v15, (unsigned __int8 *)(a4 + 9));
          if ((_DWORD)uint)
          {
            v23 = uint;
            goto LABEL_20;
          }
          v19 = (unint64_t *)cczp_prime(*(_QWORD *)a1);
          if (!ccn_cmp(v14, v17, v19))
          {
            v20 = 0;
            v21 = (unsigned __int8 *)(v15 + a4 + 9);
            while (!ccn_read_uint(v14, (_QWORD *)(a1 + 8 * v14 * v20 + 16), v15, v21))
            {
              v22 = (unint64_t *)cczp_prime(*(_QWORD *)a1);
              if (ccn_cmp(v14, (unint64_t *)(a1 + 8 * v14 * v20 + 16), v22) != -1)
                break;
              ++v20;
              v21 += v15;
              if (v20 > *(_DWORD *)(a1 + 8))
              {
                v23 = 0;
                goto LABEL_20;
              }
            }
          }
        }
      }
    }
  }
  v23 = 4294967289;
LABEL_20:
  v26 = 0;
  v28((uint64_t)v25);
LABEL_22:
  cc_disable_dit(&v29);
  return v23;
}

uint64_t ccmode_ccm_init(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 72);
  *a2 = v2;
  (*(void (**)(void))(v2 + 16))();
  return 0;
}

void ccrsa_pairwise_consistency_check_ws(uint64_t a1, uint64_t *a2, uint64_t (**a3)(_QWORD, uint64_t, uint64_t))
{
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  unsigned __int8 *v12;
  void *v13;
  void *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v6 = (unint64_t *)ccrsa_ctx_public(a2);
  v7 = *a2;
  v8 = cczp_bitlen((uint64_t)v6);
  v18 = 0;
  v16 = *(_QWORD *)(a1 + 16);
  v9 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v7);
  v10 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v7);
  v11 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v7);
  v12 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v7);
  v17 = (unint64_t)(v8 + 7) >> 3;
  v13 = ccsha256_di();
  if (!ccrsa_sign_pkcs1v15_msg_blinded_ws(a1, a3, (unint64_t *)a2, (uint64_t)v13, 0, &v18, &v17, v12))
  {
    v14 = ccsha256_di();
    ccrsa_verify_pkcs1v15_msg_ws(a1, v6, (uint64_t)v14, 0, &v18, v17, v12, 0);
    if (!v15)
    {
      ccn_seti(v7, v10, 42);
      ccn_set_bit((uint64_t)v10, v8 - 9, 1);
      if (!ccrsa_pub_crypt_ws(a1, (uint64_t *)v6, v9, v10)
        && ccn_cmp(v7, v10, (unint64_t *)v9)
        && !ccrsa_priv_crypt_blinded_ws(a1, a3, a2, (uint64_t *)v11, (unint64_t *)v9))
      {
        ccn_cmp(v7, v11, v10);
      }
    }
  }
  *(_QWORD *)(a1 + 16) = v16;
}

uint64_t ccpost(unsigned int *a1, int64x2_t *a2)
{
  char v3;
  int64x2_t *v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;

  v3 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v13 = v3;
  memset(v12, 0, sizeof(v12));
  if (a2)
    v9 = a2;
  else
    v9 = (int64x2_t *)v12;
  cc_clear(0x18uLL, v9);
  ccpost_internal(a1, v9);
  if (v9->i64[1])
    v10 = 4294967221;
  else
    v10 = 0;
  cc_disable_dit(&v13);
  return v10;
}

unsigned int *ccpost_internal(unsigned int *result, int64x2_t *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *result;
    if (v2 < 2)
    {
      return (unsigned int *)((uint64_t (*)(uint64_t, uint64_t))vector_handlers[v2])((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      *a2 = vaddq_s64(*a2, vdupq_n_s64(1uLL));
      if (!a2[1].i64[0])
        a2[1].i64[0] = (uint64_t)result;
    }
  }
  return result;
}

uint64_t ccpost_report(uint64_t result, _QWORD *a2, int a3)
{
  uint64_t v3;

  ++*a2;
  if (a3)
  {
    v3 = a2[2];
    ++a2[1];
    if (!v3)
      a2[2] = result;
  }
  return result;
}

unint64_t ccec_rfc6637_wrap_pub_size(uint64_t *a1, char a2)
{
  uint64_t v3;

  v3 = cczp_bitlen(*a1);
  if ((a2 & 1) != 0)
    return (unint64_t)(v3 + 7) >> 3;
  else
    return ((unint64_t)(v3 + 7) >> 2) | 1;
}

unint64_t ccec_rfc6637_wrap_key_size(uint64_t *a1, char a2, uint64_t a3)
{
  char v6;
  uint64_t v12;
  unint64_t v13;
  char v15;

  v6 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v15 = v6;
  v12 = cczp_bitlen(*a1);
  if ((a2 & 1) != 0)
    v13 = (unint64_t)(v12 + 7) >> 3;
  else
    v13 = ((unint64_t)(v12 + 7) >> 2) | 1;
  if ((a2 & 2) != 0)
    v13 += a3 + ((unint64_t)(cczp_bitlen(*a1) + 7) >> 3) + 2;
  cc_disable_dit(&v15);
  return v13 + 51;
}

uint64_t ccec_rfc6637_wrap_key(uint64_t *a1, _WORD *a2, uint64_t a3, char a4, size_t a5, unsigned __int8 *a6, char *a7, uint64_t (**a8)(void), char *a9, uint64_t (**a10)(_QWORD, uint64_t, uint64_t *))
{
  char v17;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t **v31;
  uint64_t key_ws;
  uint64_t v33;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t (*v38)(_QWORD *, uint64_t);
  void (*v39)(uint64_t);
  char v40;

  v17 = 0;
  v40 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v17 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v17 = 1;
    }
  }
  v40 = v17;
  v23 = (uint64_t *)*a1;
  v24 = *(_QWORD *)*a1;
  v25 = sizeof_struct_cche_galois_key();
  v26 = sizeof_struct_ccpolyzp_po2cyc();
  v36[0] = cc_malloc_clear(248 * v24 + 16 * ((v25 + v26 + 4 * v24 * v26 - 1) / v26));
  v27 = *v23;
  v28 = sizeof_struct_cche_galois_key();
  v29 = sizeof_struct_ccpolyzp_po2cyc();
  v36[1] = 31 * v27 + 2 * ((v28 + v29 + 4 * v27 * v29 - 1) / v29);
  v37 = 0;
  v38 = cc_ws_alloc;
  v39 = cc_ws_free;
  if (v36[0])
  {
    v30 = (uint64_t *)*a1;
    v31 = (uint64_t **)cc_ws_alloc(v36, (4 * (*(_QWORD *)*a1 & 0x7FFFFFFFFFFFFFFLL)) | 2);
    key_ws = ccecdh_generate_key_ws((uint64_t)v36, v30, a10, v31);
    if (!(_DWORD)key_ws)
      key_ws = ccec_rfc6637_wrap_core_ws((uint64_t)v36, a1, (uint64_t *)v31, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    v33 = key_ws;
    v37 = 0;
    v39((uint64_t)v36);
  }
  else
  {
    v33 = 4294967283;
  }
  cc_disable_dit(&v40);
  return v33;
}

_BYTE *ccdrbg_factory_nisthmac(_QWORD *a1, uint64_t a2)
{
  char v2;
  char v9;

  v2 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v9 = v2;
  *a1 = 160;
  a1[1] = init_1;
  a1[2] = reseed_0;
  a1[3] = generate_5;
  a1[4] = done_0;
  a1[5] = a2;
  a1[6] = must_reseed_0;
  return cc_disable_dit(&v9);
}

uint64_t done_0(_QWORD *a1)
{
  uint64_t result;

  cc_clear(0x40uLL, a1 + 1);
  result = cc_clear(0x40uLL, a1 + 9);
  a1[17] = -1;
  return result;
}

BOOL must_reseed_0(_QWORD *a1)
{
  return *(_DWORD *)(*a1 + 8) && a1[17] > 0x1000000000000uLL;
}

unint64_t cche_relin_key_nof_n(uint64_t a1)
{
  unint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;

  v2 = sizeof_struct_ccpolyzp_po2cyc() + 7;
  v3 = cche_param_ctx_key_ctx_nmoduli(a1);
  if ((v3 - 1) <= 1)
    v4 = 1;
  else
    v4 = (v3 - 1);
  v5 = cche_param_ctx_polynomial_degree(a1);
  v6 = cche_ciphertext_fresh_npolys();
  v7 = sizeof_struct_ccrns_mul_modulus();
  v8 = sizeof_struct_ccpolyzp_po2cyc();
  return ((v7 + v8 - 1) / v8
        + ((v5 * v3) + ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3)) * v6)
       * v4
       + (v2 >> 3);
}

unint64_t cche_relin_key_ciphertext(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;

  v4 = cche_param_ctx_chain_const(*a1);
  v5 = a2;
  v6 = cche_ciphertext_fresh_npolys();
  v7 = sizeof_struct_ccrns_mul_modulus();
  v8 = sizeof_struct_ccpolyzp_po2cyc();
  return (unint64_t)&a1[((v7 + v8 - 1) / v8
                              + ((*(_DWORD *)(v4 + 12) * *(_DWORD *)(v4 + 8))
                               + ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3))
                              * v6)
                             * v5
                             + 1];
}

uint64_t cche_relin_key_generate_ws(uint64_t a1, uint64_t *a2, unsigned int **a3, unsigned int *a4, int a5, uint64_t a6, uint64_t (**a7)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t (*v14)(uint64_t, unint64_t);
  uint64_t v15;
  uint64_t v16;
  unsigned int **v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  unsigned int v24;
  BOOL v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int **v51;
  unsigned int v53;

  v10 = cche_param_ctx_chain_const((uint64_t)a4);
  v11 = *(_DWORD *)(v10 + 12);
  if (v11 < 2)
    return 4294967289;
  v12 = v10;
  v13 = cche_param_ctx_ciphertext_ctx_nmoduli((uint64_t)a4);
  if (a5)
  {
    if (cche_rng_seed_sizeof() * v13 != a5)
      return 4294967289;
  }
  *a2 = (uint64_t)a4;
  v53 = cche_param_ctx_polynomial_degree((uint64_t)a4);
  v15 = *(_QWORD *)(a1 + 16);
  v14 = *(uint64_t (**)(uint64_t, unint64_t))(a1 + 24);
  v16 = sizeof_struct_ccpolyzp_po2cyc();
  v17 = (unsigned int **)v14(a1, *(_DWORD *)(v12 + 8) * v11 + ((unint64_t)(v16 + 7) >> 3));
  *v17 = *a3;
  v51 = v17;
  ccpolyzp_po2cyc_eval_mul(v17, a3, a3);
  v18 = *(_DWORD *)(v12 + 12) - 1;
  v19 = v12 + 8;
  if (v18 > v13)
  {
    v19 = v12 + 8;
    do
    {
      v19 = *(_QWORD *)(v19 + 112);
      --v18;
    }
    while (v18 > v13);
  }
  if (v13)
  {
    v50 = v15;
    v20 = 0;
    v21 = v13;
    while (1)
    {
      v22 = *(_DWORD *)(v12 + 12);
      v23 = (_QWORD *)(v12 + 8);
      if (v20 < (v22 - 1))
      {
        v24 = v22 - 2;
        v23 = (_QWORD *)(v12 + 8);
        do
        {
          v23 = (_QWORD *)v23[14];
          v25 = v20 >= v24--;
        }
        while (!v25);
      }
      v26 = cche_relin_key_ciphertext(a2, v20);
      v27 = *(_DWORD *)(v12 + 12);
      v28 = a6 ? a6 + cche_rng_seed_sizeof() * v20 : 0;
      result = cche_encrypt_zero_symmetric_eval_ws(a1, v26, a4, (uint64_t *)a3, v27, v28, a7);
      if ((_DWORD)result)
        break;
      if (v53)
      {
        v30 = v23[2];
        v31 = *(_QWORD *)(v19 + 16)
            - v30 * (((unint64_t)v23[3] * (unsigned __int128)*(unint64_t *)(v19 + 16)) >> 64);
        v32 = v31 - v30;
        if (v32 >= 0)
          v31 = v32;
        v33 = v26 + 32;
        v34 = v53;
        v35 = **v51 * v20;
        v36 = **(_DWORD **)(v26 + 24) * v20;
        do
        {
          v37 = (unint64_t)v51[v35 + 1];
          v38 = (v37 * (unsigned __int128)(unint64_t)v31) >> 64;
          v39 = v37 * v31;
          v40 = v23[4];
          v41 = ((unint64_t)v39 * (unsigned __int128)v40) >> 64;
          v42 = (v38 * (unsigned __int128)v40) >> 64;
          v43 = v38 * v40;
          v25 = __CFADD__(v41, v43);
          v44 = v41 + v43;
          v45 = v25;
          v46 = v45
              + __CFADD__(v39 * v23[5], v44)
              + v42
              + v23[5] * v38
              + (((unint64_t)v39 * (unsigned __int128)(unint64_t)v23[5]) >> 64);
          v47 = v23[2];
          v48 = v39 - v46 * v47;
          if (v48 - v47 >= 0)
            v48 -= v47;
          v49 = v48 + *(_QWORD *)(v33 + 8 * v36);
          if (v49 - v47 >= 0)
            v49 -= v47;
          *(_QWORD *)(v33 + 8 * v36) = v49;
          ++v35;
          ++v36;
          --v34;
        }
        while (v34);
      }
      if (++v20 == v21)
      {
        result = 0;
        break;
      }
    }
    v15 = v50;
  }
  else
  {
    result = 0;
  }
  *(_QWORD *)(a1 + 16) = v15;
  return result;
}

uint64_t cche_relin_key_generate(uint64_t *a1, unsigned int **a2, unsigned int *a3, int a4, uint64_t a5, uint64_t (**a6)(_QWORD, uint64_t, uint64_t))
{
  char v12;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t ws;
  _QWORD v30[4];
  void (*v31)(uint64_t);
  char v32;

  v12 = 0;
  v32 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v12 = 1;
    }
  }
  v32 = v12;
  v18 = cche_param_ctx_chain_const((uint64_t)a3);
  v19 = cche_param_ctx_polynomial_degree((uint64_t)a3);
  v20 = v19;
  v21 = *(unsigned int *)(v18 + 12);
  v22 = CCPOLYZP_PO2CYC_WORKSPACE_N(v19, *(_DWORD *)(v18 + 12));
  v23 = CCHE_ENCRYPT_ZERO_SYMMETRIC_EVAL_WORKSPACE_N(v20, v21);
  v30[0] = cc_malloc_clear(8 * (v23 + v22));
  v24 = cche_param_ctx_polynomial_degree((uint64_t)a3);
  v25 = v24;
  v26 = *(unsigned int *)(v18 + 12);
  v27 = CCPOLYZP_PO2CYC_WORKSPACE_N(v24, v26);
  v30[1] = CCHE_ENCRYPT_ZERO_SYMMETRIC_EVAL_WORKSPACE_N(v25, v26) + v27;
  v30[2] = 0;
  v30[3] = cc_ws_alloc;
  v31 = cc_ws_free;
  if (v30[0])
  {
    ws = cche_relin_key_generate_ws((uint64_t)v30, a1, a2, a3, a4, a5, a6);
    v31((uint64_t)v30);
  }
  else
  {
    ws = 4294967283;
  }
  cc_disable_dit(&v32);
  return ws;
}

uint64_t cche_relin_key_save_ws(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t result;

  v8 = cche_param_ctx_chain_const(*a4);
  if (*(_DWORD *)(v8 + 12) < 2u)
    return 4294967289;
  v9 = (unsigned int *)(v8 + 8);
  v10 = cche_param_ctx_ciphertext_ctx_nmoduli(*a4);
  v11 = ccpolyzp_po2cyc_serialize_poly_nbytes(v9, 0);
  if (v11 * v10 != a2)
    return 4294967289;
  if (!v10)
    return 0;
  v12 = v11;
  v13 = 0;
  while (1)
  {
    v14 = cche_relin_key_ciphertext(a4, v13);
    result = ccpolyzp_po2cyc_serialize_poly_ws(a1, v12, a3, 0, (unsigned int **)(v14 + 24));
    if ((_DWORD)result)
      break;
    a3 += v12;
    if (v10 == ++v13)
      return 0;
  }
  return result;
}

uint64_t cche_relin_key_save(int a1, uint64_t a2, uint64_t *a3)
{
  char v6;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD v17[4];
  void (*v18)(uint64_t);
  char v19;

  v6 = 0;
  v19 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v19 = v6;
  v12 = cche_param_ctx_polynomial_degree(*a3);
  v13 = CCPOLYZP_PO2CYC_SERIALIZE_POLY_WORKSPACE_N(v12);
  v17[0] = cc_malloc_clear(8 * v13);
  v14 = cche_param_ctx_polynomial_degree(*a3);
  v17[1] = CCPOLYZP_PO2CYC_SERIALIZE_POLY_WORKSPACE_N(v14);
  v17[2] = 0;
  v17[3] = cc_ws_alloc;
  v18 = cc_ws_free;
  if (v17[0])
  {
    v15 = cche_relin_key_save_ws((uint64_t)v17, a1, a2, a3);
    v18((uint64_t)v17);
  }
  else
  {
    v15 = 4294967283;
  }
  cc_disable_dit(&v19);
  return v15;
}

uint64_t cche_relin_key_load_ws(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  _DWORD **v20;
  uint64_t v21;
  uint64_t i;
  _DWORD *v23;
  uint64_t result;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;

  v11 = a3;
  v12 = cche_param_ctx_chain_const(a3);
  if (*(_DWORD *)(v12 + 12) < 2u)
    return 4294967289;
  v13 = (unsigned int *)(v12 + 8);
  v14 = cche_param_ctx_ciphertext_ctx_nmoduli(v11);
  v15 = ccpolyzp_po2cyc_serialize_poly_nbytes(v13, 0);
  v27 = cche_rng_seed_sizeof();
  if (v15 * v14 != a4 || v27 * v14 != a6)
    return 4294967289;
  *a2 = v11;
  if (!v14)
    return 0;
  v17 = 0;
  v26 = v14;
  v25 = v11;
  while (1)
  {
    v18 = cche_relin_key_ciphertext(a2, v17);
    v19 = cche_ciphertext_fresh_npolys();
    *(_QWORD *)v18 = v11;
    *(_DWORD *)(v18 + 8) = v19;
    *(_QWORD *)(v18 + 16) = 1;
    *(_QWORD *)(v18 + 24) = v13;
    v20 = (_DWORD **)(v18 + 24);
    if (v19 >= 2)
    {
      v21 = v19;
      for (i = 1; i != v21; ++i)
      {
        v23 = *v20;
        v20[((v23[1] * *v23) + ((unint64_t)(sizeof_struct_ccpolyzp_po2cyc() + 7) >> 3)) * i] = v13;
      }
    }
    result = cche_deserialize_seeded_ciphertext_eval_ws(a1, v18, v15, a5, a7);
    if ((_DWORD)result)
      break;
    a7 += v27;
    a5 += v15;
    ++v17;
    v11 = v25;
    if (v17 == v26)
      return 0;
  }
  return result;
}

uint64_t cche_relin_key_load(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6)
{
  char v12;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t ws;
  _QWORD v23[4];
  void (*v24)(uint64_t);
  char v25;

  v12 = 0;
  v25 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v12 = 1;
    }
  }
  v25 = v12;
  v18 = cche_param_ctx_polynomial_degree(a2);
  v19 = CCHE_DESERIALIZE_SEEDED_CIPHERTEXT_EVAL_WORKSPACE_N(v18);
  v23[0] = cc_malloc_clear(8 * v19);
  v20 = cche_param_ctx_polynomial_degree(a2);
  v23[1] = CCHE_DESERIALIZE_SEEDED_CIPHERTEXT_EVAL_WORKSPACE_N(v20);
  v23[2] = 0;
  v23[3] = cc_ws_alloc;
  v24 = cc_ws_free;
  if (v23[0])
  {
    ws = cche_relin_key_load_ws((uint64_t)v23, a1, a2, a3, a4, a5, a6);
    v24((uint64_t)v23);
  }
  else
  {
    ws = 4294967283;
  }
  cc_disable_dit(&v25);
  return ws;
}

uint64_t ccrsa_pubkeylength(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = cczp_bitlen(a1);
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccsiv_hmac_context_size(uint64_t *a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *a1;
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccsiv_hmac_block_size(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *(_QWORD *)(a1 + 8);
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccsiv_hmac_ciphertext_size(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v8;
  char v10;

  v2 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v10 = v2;
  v8 = *(_QWORD *)(a1 + 16) + a2;
  cc_disable_dit(&v10);
  return v8;
}

unint64_t ccsiv_hmac_plaintext_size(uint64_t a1, unint64_t a2)
{
  char v2;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v12;

  v2 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v12 = v2;
  v8 = *(_QWORD *)(a1 + 16);
  _CF = a2 >= v8;
  v9 = a2 - v8;
  if (_CF)
    v10 = v9;
  else
    v10 = 0;
  cc_disable_dit(&v12);
  return v10;
}

uint64_t ccsiv_hmac_init(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = (*(uint64_t (**)(void))(a1 + 16))();
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccsiv_hmac_aad(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  uint64_t v10;
  char v12;

  v4 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v12 = v4;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 32))(a2, a3, a4);
  cc_disable_dit(&v12);
  return v10;
}

uint64_t ccsiv_hmac_set_nonce(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  uint64_t v10;
  char v12;

  v4 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v12 = v4;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 24))(a2, a3, a4);
  cc_disable_dit(&v12);
  return v10;
}

uint64_t ccsiv_hmac_crypt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5;
  uint64_t v11;
  char v13;

  v5 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v13 = v5;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 40))(a2, a3, a4, a5);
  cc_disable_dit(&v13);
  return v11;
}

uint64_t ccsiv_hmac_reset(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v8;
  char v10;

  v2 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v10 = v2;
  v8 = (*(uint64_t (**)(uint64_t))(a1 + 48))(a2);
  cc_disable_dit(&v10);
  return v8;
}

uint64_t ccsiv_hmac_one_shot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v16;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE v26[7];
  char v27;
  uint64_t v28;

  v16 = 0;
  v28 = *MEMORY[0x1E0C874D8];
  v27 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v16 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v16 = 1;
    }
  }
  v27 = v16;
  MEMORY[0x1E0C86820](a1, a2, a2, a3);
  v23 = &v26[-v22];
  v24 = (*(uint64_t (**)(uint64_t, _BYTE *))(a1 + 16))(a1, &v26[-v22]);
  if (!(_DWORD)v24)
  {
    if (!a7 || (v24 = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t))(a1 + 32))(v23, a7, a8), !(_DWORD)v24))
    {
      if (!a5 || (v24 = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t))(a1 + 24))(v23, a5, a6), !(_DWORD)v24))
      {
        v24 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(a1 + 40))(v23, a9, a10, a11);
        if (!(_DWORD)v24)
          cc_clear(*(_QWORD *)a1, v23);
      }
    }
  }
  cc_disable_dit(&v27);
  return v24;
}

uint64_t fipspost_post_aes_cmac(char a1)
{
  _QWORD *v2;
  char *v4;
  uint64_t v5;
  int v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  int v13;
  int v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C874D8];
  v2 = ccaes_cbc_encrypt_mode();
  v14 = 0;
  if (cccmac_one_shot_generate(v2, 16, (uint64_t)"\xE4\xB7\x64[/}c\xB4gL\xD0\x19p\xC9\xD1\xEC\xF2\x66\xA1\x87", 0, (char *)&unk_1DEE1715E, 4uLL, &v14))
  {
    mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed cccmac_one_shot_generate COUNT #0: %d\n");
    return 4294967224;
  }
  v4 = "\x01\xF2\x66\xA1\x87";
  if ((a1 & 0x10) == 0)
    v4 = "\xF2\x66\xA1\x87";
  if (*(_DWORD *)v4 != v14)
  {
    v5 = mach_absolute_time();
    v6 = 56;
LABEL_8:
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed AES-CMAC KAT\n", v5, "fipspost_post_aes_cmac", v6);
    return 4294967221;
  }
  v13 = 0;
  {
    mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed cccmac_one_shot_generate COUNT #32: %d\n");
    return 4294967224;
  }
  v7 = "\x01\xFB\xFE\xA4\x1B";
  if ((a1 & 0x10) == 0)
    v7 = "\xFB\xFE\xA4\x1B";
  if (*(_DWORD *)v7 != v13)
  {
    v5 = mach_absolute_time();
    v6 = 95;
    goto LABEL_8;
  }
  *(_QWORD *)((char *)v15 + 7) = 0;
  v15[0] = 0;
  if (cccmac_one_shot_generate(v2, 16, (uint64_t)"\x18tYlݽ\xF1\x8A\x10\xBCq\xD6\x0Ck\xB9=", 0x25uLL, "\x12\xA3@\xEF\x01\x5D\xC0\xA3\x86%\xA4\x84~\xB6\xCA\xC9ʹE\x05H\xE9\xF9\x64\x02ue1\xA6\xA5\xBF\x9C7\xC1\x46\xBB\x01", 0xFuLL, v15))
  {
    mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed cccmac_one_shot_generate COUNT #79: %d\n");
    return 4294967224;
  }
  v8 = "\x01&\xA5\xFD%\x80Q)uk[\x1A\xC3\x3D\x87t";
  if ((a1 & 0x10) == 0)
    v8 = "&\xA5\xFD%\x80Q)uk[\x1A\xC3\x3D\x87t";
  v9 = *(_QWORD *)v8;
  v10 = *(_QWORD *)(v8 + 7);
  if (v9 != v15[0] || v10 != *(_QWORD *)((char *)v15 + 7))
  {
    v5 = mach_absolute_time();
    v6 = 134;
    goto LABEL_8;
  }
  if ((a1 & 0x10) != 0)
    v12 = "\x01\xD4\xD7\xFC\xC5\xF9y#\x0F";
  else
    v12 = "\xD4\xD7\xFC\xC5\xF9y#\x0F";
  if (cccmac_one_shot_verify(v2, 16, (uint64_t)"rV\xE3\x44\xF6\x8B>\x7F\x9D\xD6\xE0L\\e\x13\\", 0, (char *)&unk_1DEE1715E, 8, v12))
  {
    mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed cccmac_one_shot_verify COUNT #2: %d\n");
    return 4294967224;
  }
  if (!cccmac_one_shot_verify(v2, 16, (uint64_t)"e\x83\xA4\xFF'\xB6\xE1\x09\x04m\x11\xB9w\xC8\x29=", 0x20uLL, "\xB6;\xE3\x20\xF9.\x01&\x0F\xBA71\"$IJ'd\xDF\xC9((|u\xDC\x1C\xAF\xEE\x7B\x69\x8DH",
                        8,
                        "\xFA\f\xCE\xD2.\x89k@"))
  {
    mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed cccmac_one_shot_verify COUNT #47: %d\n");
    return 4294967224;
  }
  if (!cccmac_one_shot_verify(v2, 16, (uint64_t)"\xED\xFE\x2E\x15\xED\xF0\xB0\u0088ue\x1DK\xEC\xFC\xA5", 0x40uLL, aP_1, 8, "{ps\x02\x19\x90}\x18"))
  {
    mach_absolute_time();
    printf("FIPSPOST_USER [%llu] %s:%d: FAILED: failed cccmac_one_shot_verify COUNT #89: %d\n");
    return 4294967224;
  }
  return 0;
}

void *ccaes_cfb_encrypt_mode()
{
  return &ccaes_arm_cfb_encrypt_mode;
}

uint64_t ccdh_ctx_init(uint64_t result, _QWORD *a2)
{
  *a2 = result;
  return result;
}

uint64_t ccdh_ccn_size(_QWORD *a1)
{
  return 8 * *a1;
}

uint64_t ccdh_export_pub_size(_QWORD **a1)
{
  return 8 * **a1;
}

uint64_t ccdh_gp_g(_QWORD *a1)
{
  return (uint64_t)&a1[*a1 + 4 + *a1];
}

uint64_t ccdh_gp_order(_QWORD *a1)
{
  return (uint64_t)&a1[*a1 + 4 + *a1 + *a1];
}

uint64_t ccdh_gp_l(_QWORD *a1)
{
  return a1[*a1 + 4 + *a1 + *a1 + *a1];
}

unint64_t ccdh_gp_order_bitlen(_QWORD *a1)
{
  uint64_t v2;

  v2 = cczp_n((uint64_t)a1);
  return ccn_bitlen(v2, &a1[*a1 + 4 + *a1 + *a1]);
}

double fe_0(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

double fe_1(uint64_t a1)
{
  double result;

  *(_DWORD *)a1 = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_DWORD *)(a1 + 36) = 0;
  return result;
}

int32x4_t fe_add(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int32x4_t result;
  int32x4_t v4;
  int32x2_t v5;

  result = vaddq_s32(*(int32x4_t *)a3, *(int32x4_t *)a2);
  v4 = vaddq_s32(*(int32x4_t *)(a3 + 16), *(int32x4_t *)(a2 + 16));
  v5 = vadd_s32(*(int32x2_t *)(a3 + 32), *(int32x2_t *)(a2 + 32));
  *(int32x4_t *)a1 = result;
  *(int32x4_t *)(a1 + 16) = v4;
  *(int32x2_t *)(a1 + 32) = v5;
  return result;
}

uint64_t fe_cmov(uint64_t *a1, uint64_t *a2, char a3)
{
  return ccn_mux(5, a3, a1, a2, a1);
}

__n128 fe_copy(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  uint64_t v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = v4;
  return result;
}

uint64_t fe_invert(_DWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  _OWORD v13[2];
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  _OWORD v17[2];
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C874D8];
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  fe_sq(v19, a2);
  fe_sq(v17, (int *)v19);
  fe_sq(v17, (int *)v17);
  fe_mul(v17, a2, (int *)v17);
  fe_mul(v19, (int *)v19, (int *)v17);
  fe_sq(v15, (int *)v19);
  fe_mul(v17, (int *)v17, (int *)v15);
  fe_sq(v15, (int *)v17);
  v4 = 4;
  do
  {
    fe_sq(v15, (int *)v15);
    --v4;
  }
  while (v4);
  fe_mul(v17, (int *)v15, (int *)v17);
  fe_sq(v15, (int *)v17);
  v5 = 9;
  do
  {
    fe_sq(v15, (int *)v15);
    --v5;
  }
  while (v5);
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  fe_mul(v15, (int *)v15, (int *)v17);
  fe_sq(v13, (int *)v15);
  v6 = 19;
  do
  {
    fe_sq(v13, (int *)v13);
    --v6;
  }
  while (v6);
  fe_mul(v15, (int *)v13, (int *)v15);
  fe_sq(v15, (int *)v15);
  v7 = 9;
  do
  {
    fe_sq(v15, (int *)v15);
    --v7;
  }
  while (v7);
  fe_mul(v17, (int *)v15, (int *)v17);
  fe_sq(v15, (int *)v17);
  v8 = 49;
  do
  {
    fe_sq(v15, (int *)v15);
    --v8;
  }
  while (v8);
  fe_mul(v15, (int *)v15, (int *)v17);
  fe_sq(v13, (int *)v15);
  v9 = 99;
  do
  {
    fe_sq(v13, (int *)v13);
    --v9;
  }
  while (v9);
  fe_mul(v15, (int *)v13, (int *)v15);
  fe_sq(v15, (int *)v15);
  v10 = 49;
  do
  {
    fe_sq(v15, (int *)v15);
    --v10;
  }
  while (v10);
  fe_mul(v17, (int *)v15, (int *)v17);
  fe_sq(v17, (int *)v17);
  v11 = 4;
  do
  {
    fe_sq(v17, (int *)v17);
    --v11;
  }
  while (v11);
  return fe_mul(a1, (int *)v17, (int *)v19);
}

_DWORD *fe_sq(_DWORD *result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;

  v3 = a2[4];
  v2 = a2[5];
  v5 = a2[6];
  v4 = a2[7];
  v6 = 19 * (int)v5;
  v7 = *a2;
  v8 = a2[1];
  v9 = 38 * (int)v4;
  v11 = a2[8];
  v10 = a2[9];
  v12 = 19 * (int)v11;
  v13 = a2[2];
  v14 = a2[3];
  v15 = 2 * v7;
  v16 = 2 * v13;
  v17 = 2 * v14;
  v18 = 38 * (int)v10;
  v19 = 2 * v7 * v8;
  v20 = 2 * v8 * v13;
  v21 = 38 * (int)v2 * (uint64_t)(int)v2
      + (int)v7 * (uint64_t)(int)v7
      + v6 * 2 * v3
      + v9 * 2 * v14
      + v12 * 2 * v13
      + v18 * 2 * v8;
  v22 = 2 * v8 * v8 + v13 * 2 * v7;
  v23 = 2 * v14 * 2 * v8 + (int)v13 * (uint64_t)(int)v13 + v3 * 2 * v7 + v9 * v4 + 2 * v5 * v12 + v18 * 2 * v2;
  v24 = v19 + v6 * 2 * v2 + v9 * v3 + v12 * 2 * v14 + v18 * v13 + ((v21 + 0x2000000) >> 26);
  v25 = 2 * v13 * v14 + v3 * 2 * v8 + v2 * v15 + v12 * 2 * v4 + v18 * v5 + ((v23 + 0x2000000) >> 26);
  v26 = v22 + v6 * v5 + v9 * 2 * v2 + v12 * 2 * v3 + v18 * 2 * v14 + ((v24 + 0x1000000) >> 25);
  v27 = v20 + v14 * v15;
  v28 = v3 * v16 + 2 * v14 * v14 + 2 * v2 * 2 * v8 + v5 * v15 + v12 * v11 + v18 * 2 * v4 + ((v25 + 0x1000000) >> 25);
  v29 = v27 + v9 * v5 + v12 * 2 * v2 + v18 * v3 + ((v26 + 0x2000000) >> 26);
  LODWORD(v12) = v26 - ((v26 + 0x2000000) & 0xFC000000);
  v30 = 2 * v3 * v2;
  v31 = v17 * v3 + v2 * v16;
  v32 = v5 * v16 + (int)v3 * (uint64_t)(int)v3 + 2 * v2 * v17;
  v33 = v31 + v5 * 2 * v8 + v4 * v15 + v18 * v11 + ((v28 + 0x2000000) >> 26);
  v34 = v30 + v5 * v17 + v4 * v16 + v11 * 2 * v8;
  v35 = v32 + 2 * v4 * 2 * v8 + v11 * v15 + v18 * v10 + ((v33 + 0x1000000) >> 25);
  v36 = v34 + v10 * v15 + ((v35 + 0x2000000) >> 26);
  v37 = v21 - ((v21 + 0x2000000) & 0xFFFFFFFFFC000000) + 19 * ((v36 + 0x1000000) >> 25);
  *result = v37 - ((v37 + 0x2000000) & 0xFC000000);
  result[1] = v24 - ((v24 + 0x1000000) & 0xFE000000) + ((v37 + 0x2000000) >> 26);
  v38 = v23 - ((v23 + 0x2000000) & 0xFFFFFFFFFC000000) + ((v29 + 0x1000000) >> 25);
  result[2] = v12;
  result[3] = v29 - ((v29 + 0x1000000) & 0xFE000000);
  result[4] = v38 - ((v38 + 0x2000000) & 0xFC000000);
  result[5] = v25 - ((v25 + 0x1000000) & 0xFE000000) + ((v38 + 0x2000000) >> 26);
  result[6] = v28 - ((v28 + 0x2000000) & 0xFC000000);
  result[7] = v33 - ((v33 + 0x1000000) & 0xFE000000);
  result[8] = v35 - ((v35 + 0x2000000) & 0xFC000000);
  result[9] = v36 - ((v36 + 0x1000000) & 0xFE000000);
  return result;
}

uint64_t fe_mul(_DWORD *a1, int *a2, int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t result;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v4 = a2[8];
  v5 = a3[1];
  v6 = 2 * a2[9];
  v7 = a2[9];
  v9 = a3[2];
  v8 = a3[3];
  v10 = 19 * v9;
  v11 = 19 * (int)v8;
  v12 = a3[4];
  v81 = a3[5];
  v13 = 19 * v12;
  v14 = 19 * (int)v81;
  v16 = a2[2];
  v15 = a2[3];
  v82 = a2[1];
  v17 = a2[4];
  v18 = a2[5];
  v19 = a2[6];
  v20 = a2[7];
  v71 = 2 * v15;
  v72 = 2 * v18;
  v21 = 19 * v5 * v6 + *a3 * (uint64_t)*a2 + v10 * v4 + v11 * 2 * v20;
  v22 = *a3 * (uint64_t)(int)v82 + (int)v5 * (uint64_t)*a2 + v10 * v7 + v11 * v4;
  v23 = v5 * 2 * v82 + *a3 * (uint64_t)(int)v16 + v9 * (uint64_t)*a2 + v11 * v6;
  v24 = v21 + v13 * v19 + v14 * 2 * v18;
  v25 = v5 * 2 * v15
      + *a3 * (uint64_t)(int)v17
      + v9 * (uint64_t)(int)v16
      + v8 * 2 * v82
      + v12 * (uint64_t)*a2
      + v14 * 2 * v7;
  v79 = v15;
  v26 = v22 + v13 * v20 + v14 * v19;
  v80 = v23 + v13 * v4 + v14 * 2 * v20;
  v27 = *a3 * (uint64_t)(int)v15
      + (int)v5 * (uint64_t)(int)v16
      + v9 * (uint64_t)(int)v82
      + (int)v8 * (uint64_t)*a2
      + v13 * v7
      + v14 * v4;
  LODWORD(v23) = a3[6];
  v28 = a3[7];
  v29 = 19 * (int)v23;
  v30 = v24 + v29 * v17;
  v31 = v25 + v29 * v4;
  v75 = v18;
  v32 = v26 + v29 * v18;
  v33 = *a3 * (uint64_t)(int)v18
      + (int)v5 * (uint64_t)(int)v17
      + v9 * (uint64_t)(int)v15
      + (int)v8 * (uint64_t)(int)v16
      + v12 * (uint64_t)(int)v82
      + (int)v81 * (uint64_t)*a2
      + v29 * a2[9];
  v34 = a2[9];
  v35 = v80 + v29 * v19;
  v36 = v27 + v29 * v20;
  v37 = 19 * (int)v28;
  v74 = v31 + v37 * 2 * v20;
  v76 = v32 + v37 * v17;
  v77 = v30 + v37 * v71;
  v38 = v33 + v37 * v4;
  v78 = v35 + v37 * v72;
  v39 = v5 * v72
      + *a3 * (uint64_t)(int)v19
      + v9 * (uint64_t)(int)v17
      + v8 * v71
      + v12 * (uint64_t)(int)v16
      + v81 * 2 * v82
      + (int)v23 * (uint64_t)*a2
      + v37 * 2 * v34;
  v73 = v36 + v37 * v19;
  LODWORD(v37) = a3[8];
  LODWORD(v80) = a3[9];
  v40 = 19 * (int)v37;
  v41 = 19 * (int)v80;
  v42 = v39 + v40 * v4 + v41 * 2 * v20;
  v43 = v5 * 2 * v20 + *a3 * (uint64_t)(int)v4;
  v44 = v38 + v40 * v20;
  v45 = *a3 * (uint64_t)(int)v34 + (int)v5 * (uint64_t)(int)v4 + v9 * (uint64_t)(int)v20;
  v46 = *a3 * (uint64_t)(int)v20 + (int)v5 * (uint64_t)(int)v19 + v9 * (uint64_t)(int)v75;
  v47 = v74 + v40 * v19 + v41 * v72;
  v48 = v43 + v9 * (uint64_t)(int)v19 + v8 * v72;
  v49 = v44 + v41 * v19;
  v50 = v45 + (int)v8 * (uint64_t)(int)v19;
  v51 = v46
      + (int)v8 * (uint64_t)(int)v17
      + v12 * (uint64_t)(int)v79
      + (int)v81 * (uint64_t)(int)v16
      + (int)v23 * (uint64_t)(int)v82
      + (int)v28 * (uint64_t)*a2
      + v40 * v34;
  v52 = v77 + v40 * v16;
  v53 = v76 + v40 * v79;
  v54 = v50 + v12 * (uint64_t)(int)v75;
  v55 = v78 + v40 * v17 + v41 * v71;
  v56 = v73 + v40 * v75 + v41 * v17;
  v57 = v51 + v41 * v4;
  v58 = v52 + v41 * 2 * v82;
  v59 = v48
      + v12 * (uint64_t)(int)v17
      + v81 * v71
      + (int)v23 * (uint64_t)(int)v16
      + v28 * 2 * v82
      + (int)v37 * (uint64_t)*a2
      + v41 * 2 * v34;
  result = 0x2000000;
  v61 = v53 + v41 * v16 + ((v58 + 0x2000000) >> 26);
  v62 = v49 + ((v47 + 0x2000000) >> 26);
  v63 = v55 + ((v61 + 0x1000000) >> 25);
  v64 = v42 + ((v62 + 0x1000000) >> 25);
  v65 = v56 + ((v63 + 0x2000000) >> 26);
  v66 = v57 + ((v64 + 0x2000000) >> 26);
  v67 = v59 + ((v66 + 0x1000000) >> 25);
  v68 = v54
      + (int)v81 * (uint64_t)(int)v17
      + (int)v23 * (uint64_t)(int)v79
      + (int)v28 * (uint64_t)(int)v16
      + (int)v37 * (uint64_t)(int)v82
      + (int)v80 * (uint64_t)*a2
      + ((v67 + 0x2000000) >> 26);
  v69 = v58 - ((v58 + 0x2000000) & 0xFFFFFFFFFC000000) + 19 * ((v68 + 0x1000000) >> 25);
  *a1 = v69 - ((v69 + 0x2000000) & 0xFC000000);
  a1[1] = v61 - ((v61 + 0x1000000) & 0xFE000000) + ((v69 + 0x2000000) >> 26);
  v70 = v47 - ((v47 + 0x2000000) & 0xFFFFFFFFFC000000) + ((v65 + 0x1000000) >> 25);
  a1[2] = v63 - ((v63 + 0x2000000) & 0xFC000000);
  a1[3] = v65 - ((v65 + 0x1000000) & 0xFE000000);
  a1[4] = v70 - ((v70 + 0x2000000) & 0xFC000000);
  a1[5] = v62 - ((v62 + 0x1000000) & 0xFE000000) + ((v70 + 0x2000000) >> 26);
  a1[6] = v64 - ((v64 + 0x2000000) & 0xFC000000);
  a1[7] = v66 - ((v66 + 0x1000000) & 0xFE000000);
  a1[8] = v67 - ((v67 + 0x2000000) & 0xFC000000);
  a1[9] = v68 - ((v68 + 0x1000000) & 0xFE000000);
  return result;
}

uint64_t fe_isnegative(_DWORD *a1)
{
  _BYTE v2[32];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C874D8];
  fe_tobytes((uint64_t)v2, a1);
  return v2[0] & 1;
}

uint64_t fe_tobytes(uint64_t result, _DWORD *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;

  v2 = a2[1];
  v3 = a2[2];
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[6];
  v8 = a2[7];
  v9 = a2[8];
  v10 = a2[9];
  v11 = *a2
      + 19
      * ((v10
        + ((v9
          + ((v8
            + ((v7
              + ((v6
                + ((v5 + ((v4 + ((v3 + ((v2 + ((*a2 + ((19 * v10 + 0x1000000) >> 25)) >> 26)) >> 25)) >> 26)) >> 25)) >> 26)) >> 25)) >> 26)) >> 25)) >> 26)) >> 25);
  v12 = v2 + (v11 >> 26);
  v13 = v3 + ((int)v12 >> 25);
  v14 = v4 + ((int)v13 >> 26);
  v15 = v5 + ((int)v14 >> 25);
  v16 = v6 + ((int)v15 >> 26);
  v17 = v7 + (v16 >> 25);
  v18 = v8 + ((int)v17 >> 26);
  v19 = v9 + ((int)v18 >> 25);
  v20 = v10 + ((int)v19 >> 26);
  *(_WORD *)result = v11;
  *(_BYTE *)(result + 2) = BYTE2(v11);
  *(_BYTE *)(result + 3) = HIBYTE(v11) & 3 | (4 * v12);
  *(_BYTE *)(result + 4) = v12 >> 6;
  *(_BYTE *)(result + 5) = v12 >> 14;
  *(_BYTE *)(result + 6) = (v12 >> 22) & 7 | (8 * v13);
  *(_BYTE *)(result + 7) = v13 >> 5;
  *(_BYTE *)(result + 8) = v13 >> 13;
  *(_BYTE *)(result + 9) = (v13 >> 21) & 0x1F | (32 * v14);
  *(_BYTE *)(result + 10) = v14 >> 3;
  *(_BYTE *)(result + 11) = v14 >> 11;
  *(_BYTE *)(result + 12) = (v14 >> 19) & 0x3F | ((_BYTE)v15 << 6);
  *(_BYTE *)(result + 13) = v15 >> 2;
  *(_BYTE *)(result + 14) = v15 >> 10;
  *(_BYTE *)(result + 15) = v15 >> 18;
  *(_WORD *)(result + 16) = v16;
  *(_BYTE *)(result + 18) = BYTE2(v16);
  *(_BYTE *)(result + 19) = HIBYTE(v16) & 1 | (2 * v17);
  *(_BYTE *)(result + 20) = v17 >> 7;
  *(_BYTE *)(result + 21) = v17 >> 15;
  *(_BYTE *)(result + 22) = (v17 >> 23) & 7 | (8 * v18);
  *(_BYTE *)(result + 23) = v18 >> 5;
  *(_BYTE *)(result + 24) = v18 >> 13;
  *(_BYTE *)(result + 25) = (v18 >> 21) & 0xF | (16 * v19);
  *(_BYTE *)(result + 26) = v19 >> 4;
  *(_BYTE *)(result + 27) = v19 >> 12;
  *(_BYTE *)(result + 28) = (v19 >> 20) & 0x3F | ((_BYTE)v20 << 6);
  *(_BYTE *)(result + 29) = v20 >> 2;
  *(_BYTE *)(result + 30) = v20 >> 10;
  *(_BYTE *)(result + 31) = (v20 >> 18) & 0x7F;
  return result;
}

uint64_t fe_isnonzero(_DWORD *a1)
{
  int8x16_t v2[2];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C874D8];
  fe_tobytes((uint64_t)v2, a1);
  return crypto_verify_32(v2, zero);
}

uint64_t crypto_verify_32(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t v2;

  v2 = vorrq_s8(veorq_s8(*a2, *a1), veorq_s8(a2[1], a1[1]));
  *(int8x8_t *)v2.i8 = vorr_s8(*(int8x8_t *)v2.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL));
  return ((((v2.i8[0] | v2.i8[4] | ((v2.i32[0] | v2.i32[1]) >> 16) | ((unsigned __int16)(v2.i16[0] | v2.i16[2] | ((v2.i32[0] | v2.i32[1]) >> 16)) >> 8))
          - 1) >> 8) & 1)
       - 1;
}

_DWORD *fe_frombytes(_DWORD *result, unsigned int *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;

  v2 = *((unsigned __int8 *)a2 + 6);
  v3 = (*((unsigned __int8 *)a2 + 4) << 6) | (*((unsigned __int8 *)a2 + 5) << 14) | ((_DWORD)v2 << 22);
  v4 = *((unsigned __int8 *)a2 + 12);
  v5 = *((unsigned __int8 *)a2 + 25);
  v6 = (unint64_t)(*((_BYTE *)a2 + 31) & 0x7F) << 18;
  v7 = v6 | (*((unsigned __int8 *)a2 + 30) << 10) | (4 * *((unsigned __int8 *)a2 + 29));
  v6 += 0x1000000;
  v8 = a2[4];
  v9 = *a2 + 19 * (v6 >> 25);
  v10 = (v2 << 22) + 0x1000000;
  v11 = v8 + 0x1000000;
  v12 = ((32 * *((unsigned __int8 *)a2 + 7)) | ((unint64_t)*((unsigned __int8 *)a2 + 8) << 13) | ((unint64_t)*((unsigned __int8 *)a2 + 9) << 21))
      + (v10 >> 25);
  LODWORD(v10) = v3 - (v10 & 0x7E000000) + ((unint64_t)(v9 + 0x2000000) >> 26);
  v13 = v9 - ((v9 + 0x2000000) & 0xFC000000);
  v14 = ((v12 + 0x2000000) >> 26)
      + ((8 * *((unsigned __int8 *)a2 + 10)) | (*((unsigned __int8 *)a2 + 11) << 11) | ((_DWORD)v4 << 19));
  v15 = (v4 << 19) + 0x1000000;
  v16 = v14 - (v15 & 0xE000000);
  v17 = ((4 * *((unsigned __int8 *)a2 + 13)) | ((unint64_t)*((unsigned __int8 *)a2 + 14) << 10) | ((unint64_t)*((unsigned __int8 *)a2 + 15) << 18))
      + (v15 >> 25);
  LODWORD(v9) = v8 - ((v8 + 0x1000000) & 0xFE000000) + ((v17 + 0x2000000) >> 26);
  v18 = *((unsigned __int8 *)a2 + 26);
  v19 = (((unint64_t)*((unsigned __int8 *)a2 + 20) << 7) | ((unint64_t)*((unsigned __int8 *)a2 + 21) << 15) | ((unint64_t)*((unsigned __int8 *)a2 + 22) << 23))
      + (v11 >> 25);
  v20 = ((v19 + 0x2000000) >> 26)
      + ((32 * *((unsigned __int8 *)a2 + 23)) | (*((unsigned __int8 *)a2 + 24) << 13) | ((_DWORD)v5 << 21));
  v21 = *((unsigned __int8 *)a2 + 27);
  v22 = *((unsigned __int8 *)a2 + 28);
  v23 = (v5 << 21) + 0x1000000;
  v24 = v20 - (v23 & 0x3E000000);
  *result = v13;
  result[1] = v10;
  v25 = ((16 * v18) | (v21 << 12) | (v22 << 20)) + (v23 >> 25);
  result[2] = v12 - ((v12 + 0x2000000) & 0xFC000000);
  result[3] = v16;
  result[4] = v17 - ((v17 + 0x2000000) & 0xFC000000);
  result[5] = v9;
  result[6] = v19 - ((v19 + 0x2000000) & 0xFC000000);
  result[7] = v24;
  result[8] = v25 - ((v25 + 0x2000000) & 0xFC000000);
  result[9] = v7 + ((unint64_t)(v25 + 0x2000000) >> 26) - (v6 & 0x2000000);
  return result;
}

int32x4_t fe_neg(uint64_t a1, uint64_t a2)
{
  int32x4_t result;
  int32x4_t v3;
  int32x2_t v4;

  result = vnegq_s32(*(int32x4_t *)a2);
  v3 = vnegq_s32(*(int32x4_t *)(a2 + 16));
  v4 = vneg_s32(*(int32x2_t *)(a2 + 32));
  *(int32x4_t *)a1 = result;
  *(int32x4_t *)(a1 + 16) = v3;
  *(int32x2_t *)(a1 + 32) = v4;
  return result;
}

uint64_t fe_pow22523(_DWORD *a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _OWORD v12[2];
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C874D8];
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  fe_sq(v16, a2);
  fe_sq(v14, (int *)v16);
  fe_sq(v14, (int *)v14);
  fe_mul(v14, a2, (int *)v14);
  fe_mul(v16, (int *)v16, (int *)v14);
  fe_sq(v16, (int *)v16);
  fe_mul(v16, (int *)v14, (int *)v16);
  fe_sq(v14, (int *)v16);
  v4 = 4;
  do
  {
    fe_sq(v14, (int *)v14);
    --v4;
  }
  while (v4);
  fe_mul(v16, (int *)v14, (int *)v16);
  fe_sq(v14, (int *)v16);
  v5 = 9;
  do
  {
    fe_sq(v14, (int *)v14);
    --v5;
  }
  while (v5);
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  fe_mul(v14, (int *)v14, (int *)v16);
  fe_sq(v12, (int *)v14);
  v6 = 19;
  do
  {
    fe_sq(v12, (int *)v12);
    --v6;
  }
  while (v6);
  fe_mul(v14, (int *)v12, (int *)v14);
  fe_sq(v14, (int *)v14);
  v7 = 9;
  do
  {
    fe_sq(v14, (int *)v14);
    --v7;
  }
  while (v7);
  fe_mul(v16, (int *)v14, (int *)v16);
  fe_sq(v14, (int *)v16);
  v8 = 49;
  do
  {
    fe_sq(v14, (int *)v14);
    --v8;
  }
  while (v8);
  fe_mul(v14, (int *)v14, (int *)v16);
  fe_sq(v12, (int *)v14);
  v9 = 99;
  do
  {
    fe_sq(v12, (int *)v12);
    --v9;
  }
  while (v9);
  fe_mul(v14, (int *)v12, (int *)v14);
  fe_sq(v14, (int *)v14);
  v10 = 49;
  do
  {
    fe_sq(v14, (int *)v14);
    --v10;
  }
  while (v10);
  fe_mul(v16, (int *)v14, (int *)v16);
  fe_sq(v16, (int *)v16);
  fe_sq(v16, (int *)v16);
  return fe_mul(a1, (int *)v16, a2);
}

_DWORD *fe_sq2(_DWORD *result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[4];
  v5 = a2[5];
  v7 = a2[6];
  v6 = a2[7];
  v8 = 19 * (int)v7;
  v9 = a2[2];
  v10 = a2[3];
  v12 = a2[8];
  v11 = a2[9];
  v13 = 2 * v2;
  v14 = 2 * v3;
  v15 = 2 * v9;
  v16 = 38 * (int)v6;
  v17 = 2 * v10;
  v18 = 2 * v5;
  v19 = 19 * (int)v12;
  v20 = 38 * (int)v11;
  v21 = 2 * v2 * v3;
  v22 = 38 * (int)v5 * (uint64_t)(int)v5 + (int)v2 * (uint64_t)(int)v2 + v8 * 2 * v4;
  v23 = 2 * v3 * v3 + v9 * v13 + v8 * v7;
  v24 = v21 + v8 * 2 * v5 + v16 * v4 + v19 * 2 * v10 + v20 * v9;
  v25 = 2 * v10 * v14 + (int)v9 * (uint64_t)(int)v9;
  v26 = v22 + v16 * 2 * v10;
  v27 = v23 + v16 * 2 * v5;
  v28 = v14 * v9 + v10 * v13 + v16 * v7;
  v29 = v25 + v4 * v13 + v16 * v6 + 2 * v7 * v19;
  v30 = v4 * v15 + 2 * v10 * v10;
  v31 = v27 + v19 * 2 * v4;
  v32 = v28 + v19 * 2 * v5;
  v33 = v15 * v10 + v4 * v14 + v5 * v13 + v19 * 2 * v6;
  v34 = v30 + 2 * v5 * v14 + v7 * v13 + v19 * v12;
  v35 = 2 * v4 * v5;
  v36 = v17 * v4 + v5 * v15;
  v37 = v32 + v20 * v4;
  v38 = v29 + v20 * v18;
  v39 = v7 * v15 + (int)v4 * (uint64_t)(int)v4 + v18 * v17;
  v40 = v31 + v20 * v17;
  v41 = v35 + v7 * v17;
  v42 = v33 + v20 * v7;
  v43 = v36 + v7 * v14;
  v44 = v26 + v19 * v15 + v20 * v14;
  v45 = v34 + v20 * 2 * v6;
  v46 = 2 * v44 + 0x2000000;
  v47 = (v46 >> 26) + 2 * v24;
  v48 = v43 + v6 * v13 + v20 * v12;
  v49 = v39 + 2 * v6 * v14 + v12 * v13;
  v50 = 2 * v44 - (v46 & 0xFFFFFFFFFC000000);
  v51 = 2 * v38 + 0x2000000;
  v52 = v49 + v20 * v11;
  v53 = (v51 >> 26) + 2 * v42;
  v54 = v41 + v6 * v15 + v12 * v14;
  v55 = ((v47 + 0x1000000) >> 25) + 2 * v40;
  v56 = v54 + v11 * v13;
  v57 = ((v53 + 0x1000000) >> 25) + 2 * v45;
  v58 = ((v55 + 0x2000000) >> 26) + 2 * v37;
  v59 = ((v57 + 0x2000000) >> 26) + 2 * v48;
  v60 = ((v59 + 0x1000000) >> 25) + 2 * v52;
  v61 = ((v60 + 0x2000000) >> 26) + 2 * v56;
  v62 = v50 + 19 * ((v61 + 0x1000000) >> 25);
  *result = v62 - ((v62 + 0x2000000) & 0xFC000000);
  result[1] = v47 - ((v47 + 0x1000000) & 0xFE000000) + ((v62 + 0x2000000) >> 26);
  v63 = 2 * v38 - (v51 & 0xFFFFFFFFFC000000) + ((v58 + 0x1000000) >> 25);
  result[2] = v55 - ((v55 + 0x2000000) & 0xFC000000);
  result[3] = v58 - ((v58 + 0x1000000) & 0xFE000000);
  result[4] = v63 - ((v63 + 0x2000000) & 0xFC000000);
  result[5] = v53 - ((v53 + 0x1000000) & 0xFE000000) + ((v63 + 0x2000000) >> 26);
  result[6] = v57 - ((v57 + 0x2000000) & 0xFC000000);
  result[7] = v59 - ((v59 + 0x1000000) & 0xFE000000);
  result[8] = v60 - ((v60 + 0x2000000) & 0xFC000000);
  result[9] = v61 - ((v61 + 0x1000000) & 0xFE000000);
  return result;
}

int32x4_t fe_sub(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int32x4_t result;
  int32x4_t v4;
  int32x2_t v5;

  result = vsubq_s32(*(int32x4_t *)a2, *(int32x4_t *)a3);
  v4 = vsubq_s32(*(int32x4_t *)(a2 + 16), *(int32x4_t *)(a3 + 16));
  v5 = vsub_s32(*(int32x2_t *)(a2 + 32), *(int32x2_t *)(a3 + 32));
  *(int32x4_t *)a1 = result;
  *(int32x4_t *)(a1 + 16) = v4;
  *(int32x2_t *)(a1 + 32) = v5;
  return result;
}

double ge_add(int *a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  double result;
  _OWORD v8[2];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C874D8];
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v6 = a2 + 40;
  fe_add((uint64_t)a1, a2 + 40, a2);
  fe_sub((uint64_t)(a1 + 10), v6, a2);
  fe_mul(a1 + 20, a1, a3);
  fe_mul(a1 + 10, a1 + 10, a3 + 10);
  fe_mul(a1 + 30, a3 + 30, (int *)(a2 + 120));
  fe_mul(a1, (int *)(a2 + 80), a3 + 20);
  fe_add((uint64_t)v8, (uint64_t)a1, (uint64_t)a1);
  fe_sub((uint64_t)a1, (uint64_t)(a1 + 20), (uint64_t)(a1 + 10));
  fe_add((uint64_t)(a1 + 10), (uint64_t)(a1 + 20), (uint64_t)(a1 + 10));
  fe_add((uint64_t)(a1 + 20), (uint64_t)v8, (uint64_t)(a1 + 30));
  *(_QWORD *)&result = fe_sub((uint64_t)(a1 + 30), (uint64_t)v8, (uint64_t)(a1 + 30)).u64[0];
  return result;
}

uint64_t ge_p3_to_cached(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v4 = a2 + 40;
  fe_add(a1, a2 + 40, a2);
  fe_sub(a1 + 40, v4, a2);
  v5 = *(_OWORD *)(a2 + 96);
  v6 = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 112) = v6;
  return fe_mul((_DWORD *)(a1 + 120), (int *)(a2 + 120), d2);
}

double ge_p3_dbl(_DWORD *a1, uint64_t a2)
{
  _OWORD v4[7];
  uint64_t v5;

  v5 = 0;
  memset(v4, 0, sizeof(v4));
  ge_p3_to_p2((uint64_t)v4, a2);
  return ge_p2_dbl(a1, (int *)v4);
}

uint64_t ge_p1p1_to_p3(_DWORD *a1, int *a2)
{
  int *v4;

  v4 = a2 + 30;
  fe_mul(a1, a2, a2 + 30);
  fe_mul(a1 + 10, a2 + 10, a2 + 20);
  fe_mul(a1 + 20, a2 + 20, v4);
  return fe_mul(a1 + 30, a2, a2 + 10);
}

double ge_p2_dbl(_DWORD *a1, int *a2)
{
  double result;
  _OWORD v5[2];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C874D8];
  v6 = 0;
  memset(v5, 0, sizeof(v5));
  fe_sq(a1, a2);
  fe_sq(a1 + 20, a2 + 10);
  fe_sq2(a1 + 30, a2 + 20);
  fe_add((uint64_t)(a1 + 10), (uint64_t)a2, (uint64_t)(a2 + 10));
  fe_sq(v5, a1 + 10);
  fe_add((uint64_t)(a1 + 10), (uint64_t)(a1 + 20), (uint64_t)a1);
  fe_sub((uint64_t)(a1 + 20), (uint64_t)(a1 + 20), (uint64_t)a1);
  fe_sub((uint64_t)a1, (uint64_t)v5, (uint64_t)(a1 + 10));
  *(_QWORD *)&result = fe_sub((uint64_t)(a1 + 30), (uint64_t)(a1 + 30), (uint64_t)(a1 + 20)).u64[0];
  return result;
}

double ge_sub(int *a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  double result;
  _OWORD v8[2];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C874D8];
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v6 = a2 + 40;
  fe_add((uint64_t)a1, a2 + 40, a2);
  fe_sub((uint64_t)(a1 + 10), v6, a2);
  fe_mul(a1 + 20, a1, a3 + 10);
  fe_mul(a1 + 10, a1 + 10, a3);
  fe_mul(a1 + 30, a3 + 30, (int *)(a2 + 120));
  fe_mul(a1, (int *)(a2 + 80), a3 + 20);
  fe_add((uint64_t)v8, (uint64_t)a1, (uint64_t)a1);
  fe_sub((uint64_t)a1, (uint64_t)(a1 + 20), (uint64_t)(a1 + 10));
  fe_add((uint64_t)(a1 + 10), (uint64_t)(a1 + 20), (uint64_t)(a1 + 10));
  fe_sub((uint64_t)(a1 + 20), (uint64_t)v8, (uint64_t)(a1 + 30));
  *(_QWORD *)&result = fe_add((uint64_t)(a1 + 30), (uint64_t)v8, (uint64_t)(a1 + 30)).u64[0];
  return result;
}

double ge_madd(int *a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  double result;
  _OWORD v8[2];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C874D8];
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v6 = a2 + 40;
  fe_add((uint64_t)a1, a2 + 40, a2);
  fe_sub((uint64_t)(a1 + 10), v6, a2);
  fe_mul(a1 + 20, a1, a3);
  fe_mul(a1 + 10, a1 + 10, a3 + 10);
  fe_mul(a1 + 30, a3 + 20, (int *)(a2 + 120));
  fe_add((uint64_t)v8, a2 + 80, a2 + 80);
  fe_sub((uint64_t)a1, (uint64_t)(a1 + 20), (uint64_t)(a1 + 10));
  fe_add((uint64_t)(a1 + 10), (uint64_t)(a1 + 20), (uint64_t)(a1 + 10));
  fe_add((uint64_t)(a1 + 20), (uint64_t)v8, (uint64_t)(a1 + 30));
  *(_QWORD *)&result = fe_sub((uint64_t)(a1 + 30), (uint64_t)v8, (uint64_t)(a1 + 30)).u64[0];
  return result;
}

uint64_t ge_p1p1_to_p2(_DWORD *a1, int *a2)
{
  int *v2;
  int *v4;
  int *v5;

  v2 = a2;
  v4 = a2 + 30;
  fe_mul(a1, a2, a2 + 30);
  v5 = v2 + 10;
  v2 += 20;
  fe_mul(a1 + 10, v5, v2);
  return fe_mul(a1 + 20, v2, v4);
}

__n128 ge_p3_to_p2(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  uint64_t v8;

  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 32) = v3;
  v4 = *(_OWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 72) = v5;
  result = *(__n128 *)(a2 + 80);
  v7 = *(_OWORD *)(a2 + 96);
  v8 = *(_QWORD *)(a2 + 112);
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v7;
  *(_QWORD *)(a1 + 112) = v8;
  return result;
}

uint64_t ge_p3_tobytes(uint64_t a1, int *a2)
{
  uint64_t result;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  _BYTE v11[32];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C874D8];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v8 = 0;
  memset(v7, 0, sizeof(v7));
  v6 = 0;
  memset(v5, 0, sizeof(v5));
  fe_invert(v9, a2 + 20);
  fe_mul(v7, a2, (int *)v9);
  fe_mul(v5, a2 + 10, (int *)v9);
  fe_tobytes(a1, v5);
  result = fe_tobytes((uint64_t)v11, v7);
  *(_BYTE *)(a1 + 31) ^= v11[0] << 7;
  return result;
}

double ge_p3_0(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_QWORD *)(a1 + 76) = 0x100000000;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  return result;
}

uint64_t ge_scalarmult_base(_DWORD *a1, int8x16_t *a2)
{
  *((_QWORD *)a1 + 4) = 0;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  a1[10] = 1;
  *(_OWORD *)(a1 + 11) = 0u;
  *(_OWORD *)(a1 + 15) = 0u;
  *(_QWORD *)(a1 + 19) = 0x100000000;
  *(_OWORD *)(a1 + 21) = 0u;
  *(_OWORD *)(a1 + 25) = 0u;
  *(_OWORD *)(a1 + 29) = 0u;
  *(_OWORD *)(a1 + 33) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  return ge_scalarmult_base_internal(a1, a2);
}

uint64_t ge_scalarmult_base_internal(_DWORD *a1, int8x16_t *a2)
{
  uint64_t v3;
  int8x16_t v4;
  int8x16_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  BOOL v12;
  int v13;
  unint64_t v14;
  uint64_t result;
  _OWORD v16[7];
  uint64_t v17;
  _OWORD v18[7];
  uint64_t v19;
  _OWORD v20[10];
  _OWORD v21[7];
  uint64_t v22;
  _BYTE v23[63];
  char v24;
  uint64_t v25;
  int8x16x2_t v26;

  v3 = 0;
  v25 = *MEMORY[0x1E0C874D8];
  v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  do
  {
    v5 = *a2++;
    v26.val[0] = vandq_s8(v5, v4);
    v26.val[1] = (int8x16_t)vshrq_n_u8((uint8x16_t)v5, 4uLL);
    v6 = &v23[v3];
    vst2q_s8(v6, v26);
    v3 += 32;
  }
  while (v3 != 64);
  v7 = 0;
  v8 = 0;
  do
  {
    v9 = v23[v7] + v8;
    v8 = (v9 + 8) << 24 >> 28;
    v23[v7++] = v9 - ((v9 + 8) & 0xF0);
  }
  while (v7 != 63);
  v10 = 0;
  memset(v20, 0, sizeof(v20));
  memset(v16, 0, sizeof(v16));
  v24 += v8;
  v11 = 1;
  v17 = 0;
  do
  {
    ge_select((uint64_t)v16, v10, (char)v23[v11]);
    ge_madd((int *)v20, (uint64_t)a1, (int *)v16);
    ge_p1p1_to_p3(a1, (int *)v20);
    ++v10;
    v12 = v11 >= 0x3E;
    v11 += 2;
  }
  while (!v12);
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  ge_p3_to_p2((uint64_t)v21, (uint64_t)a1);
  ge_p2_dbl(v20, (int *)v21);
  ge_p1p1_to_p2(v18, (int *)v20);
  ge_p2_dbl(v20, (int *)v18);
  ge_p1p1_to_p2(v18, (int *)v20);
  ge_p2_dbl(v20, (int *)v18);
  ge_p1p1_to_p2(v18, (int *)v20);
  ge_p2_dbl(v20, (int *)v18);
  ge_p1p1_to_p3(a1, (int *)v20);
  v13 = 0;
  v14 = 0;
  do
  {
    ge_select((uint64_t)v16, v13, (char)v23[v14]);
    ge_madd((int *)v20, (uint64_t)a1, (int *)v16);
    result = ge_p1p1_to_p3(a1, (int *)v20);
    ++v13;
    v12 = v14 >= 0x3E;
    v14 += 2;
  }
  while (!v12);
  return result;
}

uint64_t ge_scalarmult_base_masked(uint64_t a1, int8x16_t *a2, void (**a3)(_QWORD, uint64_t, int8x16_t *))
{
  uint64_t v6;
  __int128 v7;
  uint64_t v9;
  int8x16_t v10[2];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C874D8];
  v6 = frandom(v10, a3);
  if (!(_DWORD)v6)
  {
    v9 = 0;
    (*a3)(a3, 8, (int8x16_t *)&v9);
    ccn_mux_seed_mask(v9);
    fe_frombytes((_DWORD *)(a1 + 80), (unsigned int *)v10);
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_QWORD *)(a1 + 152) = 0;
    v7 = *(_OWORD *)(a1 + 96);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(a1 + 56) = v7;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 112);
    ge_scalarmult_base_internal((_DWORD *)a1, a2);
  }
  return v6;
}

_BYTE *sc_muladd(_BYTE *a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  int64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int64_t v121;
  int64_t v122;
  int64_t v123;
  int64_t v124;
  int64_t v125;
  uint64_t v126;
  uint64_t v127;
  int64_t v128;
  uint64_t v129;
  _BYTE *result;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v161;
  unint64_t v162;

  v4 = *a2 | ((a2[1] & 0x1F) << 16);
  v5 = *(unsigned int *)((char *)a2 + 15);
  v6 = (v5 >> 24) | ((unint64_t)*((unsigned __int8 *)a2 + 19) << 8) | ((unint64_t)*((unsigned __int8 *)a2
                                                                                                + 20) << 16);
  v7 = *(unsigned __int16 *)((char *)a2 + 21) | ((*((_BYTE *)a2 + 23) & 0x1F) << 16);
  v8 = *a3 | ((a3[1] & 0x1F) << 16);
  v9 = *(unsigned int *)((char *)a3 + 15);
  v10 = (v9 >> 24) | ((unint64_t)*((unsigned __int8 *)a3 + 19) << 8) | ((unint64_t)*((unsigned __int8 *)a3
                                                                                                 + 20) << 16);
  v11 = *(unsigned __int16 *)((char *)a3 + 21) | ((*((_BYTE *)a3 + 23) & 0x1F) << 16);
  v12 = *(unsigned int *)((char *)a4 + 15);
  v152 = (v12 >> 24) | ((unint64_t)*((unsigned __int8 *)a4 + 19) << 8) | ((unint64_t)*((unsigned __int8 *)a4 + 20) << 16);
  v13 = ((unint64_t)*(unsigned int *)(a2 + 1) >> 5) & 0x1FFFFF;
  v14 = ((unint64_t)(HIBYTE(*(_DWORD *)(a2 + 1)) | (*((unsigned __int8 *)a2 + 6) << 8) | (*((unsigned __int8 *)a2
                                                                                                 + 7) << 16)) >> 2) & 0x1FFFFF;
  v15 = ((unint64_t)*(unsigned int *)(a3 + 1) >> 5) & 0x1FFFFF;
  v16 = ((unint64_t)(HIBYTE(*(_DWORD *)(a3 + 1)) | (*((unsigned __int8 *)a3 + 6) << 8) | (*((unsigned __int8 *)a3
                                                                                                 + 7) << 16)) >> 2) & 0x1FFFFF;
  v162 = v15 * v13
       + v8 * v14
       + v16 * v4
       + (((unint64_t)(HIBYTE(*(_DWORD *)(a4 + 1)) | (*((unsigned __int8 *)a4 + 6) << 8) | (*((unsigned __int8 *)a4 + 7) << 16)) >> 2) & 0x1FFFFF);
  v17 = ((unint64_t)*(unsigned int *)((char *)a2 + 7) >> 7) & 0x1FFFFF;
  v18 = ((unint64_t)*(unsigned int *)(a2 + 5) >> 4) & 0x1FFFFF;
  v19 = ((unint64_t)*(unsigned int *)((char *)a3 + 7) >> 7) & 0x1FFFFF;
  v20 = ((unint64_t)*(unsigned int *)(a3 + 5) >> 4) & 0x1FFFFF;
  v21 = v15 * (unint64_t)v17
      + v8 * (unint64_t)v18
      + v19 * (unint64_t)v13
      + v4 * (unint64_t)v20
      + v16 * v14
      + (((unint64_t)*(unsigned int *)(a4 + 5) >> 4) & 0x1FFFFF);
  v22 = ((unint64_t)(HIBYTE(*(_DWORD *)(a2 + 5)) | (*((unsigned __int8 *)a2 + 14) << 8) | (*((unsigned __int8 *)a2
                                                                                                  + 15) << 16)) >> 1) & 0x1FFFFF;
  v23 = (v5 >> 6) & 0x1FFFFF;
  v24 = (v9 >> 6) & 0x1FFFFF;
  v25 = ((unint64_t)(HIBYTE(*(_DWORD *)(a3 + 5)) | (*((unsigned __int8 *)a3 + 14) << 8) | (*((unsigned __int8 *)a3
                                                                                                  + 15) << 16)) >> 1) & 0x1FFFFF;
  v158 = v22 * v15
       + v8 * (unint64_t)v23
       + v19 * (unint64_t)v17
       + v14 * v20
       + v16 * (unint64_t)v18
       + v4 * (unint64_t)v24
       + v25 * (unint64_t)v13
       + ((v12 >> 6) & 0x1FFFFF);
  v26 = v6 >> 3;
  v10 >>= 3;
  v155 = (v6 >> 3) * (unint64_t)v15
       + v8 * (unint64_t)v7
       + v22 * (unint64_t)v19
       + v20 * (unint64_t)v18
       + v16 * (unint64_t)v23
       + v14 * v24
       + v25 * (unint64_t)v17
       + v10 * (unint64_t)v13
       + v11 * (unint64_t)v4
       + *(unsigned __int16 *)((char *)a4 + 21)
       + ((unint64_t)(*((_BYTE *)a4 + 23) & 0x1F) << 16);
  v27 = ((unint64_t)*(unsigned int *)((char *)a2 + 23) >> 5) & 0x1FFFFF;
  v28 = ((unint64_t)(HIBYTE(*(_DWORD *)((char *)a2 + 23)) | (*((unsigned __int8 *)a2 + 27) << 8) | (*((unsigned __int8 *)a2 + 28) << 16)) >> 2) & 0x1FFFFF;
  v29 = ((unint64_t)*(unsigned int *)((char *)a3 + 23) >> 5) & 0x1FFFFF;
  v30 = ((unint64_t)(HIBYTE(*(_DWORD *)((char *)a3 + 23)) | (*((unsigned __int8 *)a3 + 27) << 8) | (*((unsigned __int8 *)a3 + 28) << 16)) >> 2) & 0x1FFFFF;
  v154 = v15 * v27
       + v8 * v28
       + v26 * (unint64_t)v19
       + v20 * (unint64_t)v23
       + v16 * (unint64_t)v7
       + v24 * (unint64_t)v18
       + v25 * (unint64_t)v22
       + v10 * (unint64_t)v17
       + v29 * (unint64_t)v13
       + v11 * v14
       + v30 * v4
       + (((unint64_t)(HIBYTE(*(_DWORD *)((char *)a4 + 23)) | (*((unsigned __int8 *)a4 + 27) << 8) | (*((unsigned __int8 *)a4 + 28) << 16)) >> 2) & 0x1FFFFF);
  v31 = (*a4 | ((unint64_t)(a4[1] & 0x1F) << 16)) + v8 * (unint64_t)v4;
  v32 = v4 * (unint64_t)v15
      + v8 * (unint64_t)v13
      + (((unint64_t)*(unsigned int *)(a4 + 1) >> 5) & 0x1FFFFF)
      + ((v31 + 0x100000) >> 21);
  v159 = v31 - ((v31 + 0x100000) & 0xFFFFFE00000);
  v156 = v14 * (unint64_t)v15
       + v8 * (unint64_t)v17
       + v4 * (unint64_t)v19
       + v16 * (unint64_t)v13
       + (((unint64_t)*(unsigned int *)((char *)a4 + 7) >> 7) & 0x1FFFFF);
  v161 = v15 * (unint64_t)v18
       + v8 * (unint64_t)v22
       + v14 * (unint64_t)v19
       + v20 * (unint64_t)v13
       + v16 * (unint64_t)v17
       + v25 * (unint64_t)v4
       + (((unint64_t)(HIBYTE(*(_DWORD *)(a4 + 5)) | (*((unsigned __int8 *)a4 + 14) << 8) | (*((unsigned __int8 *)a4 + 15) << 16)) >> 1) & 0x1FFFFF)
       + ((v21 + 0x100000) >> 21);
  v149 = v15 * (unint64_t)v23
       + v8 * (unint64_t)v26
       + v19 * (unint64_t)v18
       + v20 * (unint64_t)v17
       + v16 * (unint64_t)v22
       + v24 * (unint64_t)v13
       + v25 * (unint64_t)v14
       + v10 * (unint64_t)v4
       + (v152 >> 3);
  v148 = v7 * (unint64_t)v15
       + v8 * (unint64_t)v27
       + v19 * (unint64_t)v23
       + v22 * (unint64_t)v20
       + v16 * (unint64_t)v26
       + v24 * (unint64_t)v17
       + v25 * (unint64_t)v18
       + v10 * (unint64_t)v14
       + v4 * (unint64_t)v29
       + v11 * (unint64_t)v13
       + (((unint64_t)*(unsigned int *)((char *)a4 + 23) >> 5) & 0x1FFFFF);
  v33 = (unint64_t)*((unsigned int *)a2 + 7) >> 7;
  v34 = (unint64_t)*((unsigned int *)a3 + 7) >> 7;
  v143 = v15 * (unint64_t)v33
       + v19 * (unint64_t)v27
       + v7 * (unint64_t)v20
       + v16 * (unint64_t)v28
       + v24 * (unint64_t)v23
       + v25 * (unint64_t)v26
       + v10 * (unint64_t)v22
       + v29 * (unint64_t)v17
       + v11 * (unint64_t)v18
       + v34 * (unint64_t)v13;
  v147 = v28 * (unint64_t)v15
       + v8 * (unint64_t)v33
       + v7 * (unint64_t)v19
       + v26 * (unint64_t)v20
       + v16 * (unint64_t)v27
       + v22 * (unint64_t)v24
       + v25 * (unint64_t)v23
       + v10 * (unint64_t)v18
       + v14 * (unint64_t)v29
       + v11 * (unint64_t)v17
       + v4 * (unint64_t)v34
       + v30 * (unint64_t)v13
       + ((unint64_t)*((unsigned int *)a4 + 7) >> 7);
  v144 = v28 * (unint64_t)v19
       + v20 * (unint64_t)v27
       + v16 * (unint64_t)v33;
  v35 = v11;
  v36 = v10 * (unint64_t)v33
      + v29 * (unint64_t)v27
      + v11 * (unint64_t)v28
      + v26 * (unint64_t)v34
      + v30 * (unint64_t)v7;
  v37 = v28 * (unint64_t)v29
      + v11 * (unint64_t)v33
      + v7 * (unint64_t)v34
      + v30 * (unint64_t)v27
      + ((v36 + 0x100000) >> 21);
  v142 = v36 - ((v36 + 0x100000) & 0xFFFFFFFFFFE00000);
  v38 = v29 * (unint64_t)v33
      + v34 * (unint64_t)v27
      + v30 * (unint64_t)v28;
  v39 = v28 * (unint64_t)v34
      + v30 * (unint64_t)v33
      + ((v38 + 0x100000) >> 21);
  v40 = v38 - ((v38 + 0x100000) & 0x1FFFFFFE00000);
  v41 = v34 * (unint64_t)v33;
  v150 = v32 + 0x100000;
  v151 = v32 - ((v32 + 0x100000) & 0xFFFFFFFFFFE00000);
  v42 = v156 + ((v162 + 0x100000) >> 21);
  v157 = v21 - ((v21 + 0x100000) & 0xFFFFFFFFFFE00000) + ((v42 + 0x100000) >> 21);
  v153 = v42 - ((v42 + 0x100000) & 0xFFFFFFFFFFE00000);
  v43 = v19 * (unint64_t)v33
      + v28 * (unint64_t)v20;
  v44 = v20 * (unint64_t)v33;
  v45 = v28 * (unint64_t)v24
      + v25 * (unint64_t)v33
      + v10 * (unint64_t)v27
      + v26 * (unint64_t)v29
      + v35 * (unint64_t)v7
      + v22 * (unint64_t)v34
      + v30 * (unint64_t)v23;
  LODWORD(v36) = v7;
  v46 = v24 * (unint64_t)v33
      + v10 * (unint64_t)v28
      + v7 * (unint64_t)v29
      + v35 * (unint64_t)v27
      + v34 * (unint64_t)v23
      + v30 * (unint64_t)v26
      + ((v45 + 0x100000) >> 21);
  v47 = v142 + ((v46 + 0x100000) >> 21);
  v146 = v46 - ((v46 + 0x100000) & 0xFFFFFFFFFFE00000);
  v48 = v43 + v7 * (unint64_t)v24 + v25 * (unint64_t)v27;
  v49 = v44 + v24 * (unint64_t)v27;
  v50 = v144 + v26 * (unint64_t)v24;
  v51 = v40 + ((v37 + 0x100000) >> 21);
  v52 = v37 - ((v37 + 0x100000) & 0xFFFFFFFFFFE00000);
  v53 = v41 - ((v41 + 0x100000) & 0x7FFFFFFE00000) + ((v39 + 0x100000) >> 21);
  v54 = v39 - ((v39 + 0x100000) & 0x1FFFFFFE00000);
  v55 = v50 + v25 * (unint64_t)v36;
  v56 = (v41 + 0x100000) >> 21;
  v145 = v45 - 683901 * (int)v56 - ((v45 + 0x100000) & 0xFFFFFFFFFFE00000);
  v57 = v55
      + v10 * (unint64_t)v23
      + v29 * (unint64_t)v18
      + v35 * (unint64_t)v22;
  v58 = v143 + v30 * (unint64_t)v14;
  v59 = v48
      + v10 * (unint64_t)v26
      + v22 * (unint64_t)v29
      + v35 * (unint64_t)v23
      + v34 * (unint64_t)v17
      + v30 * (unint64_t)v18;
  v60 = v49
      + v25 * (unint64_t)v28
      + v10 * (unint64_t)v36
      + v29 * (unint64_t)v23
      + v35 * (unint64_t)v26
      + v34 * (unint64_t)v18
      + v30 * (unint64_t)v22
      + ((v59 + 0x100000) >> 21);
  v61 = 654183 * v53 + 470296 * v56 - 997805 * v54 + v58;
  v58 += 0x100000;
  v62 = v57
      + v14 * (unint64_t)v34
      + v30 * (unint64_t)v17
      + (v58 >> 21);
  v63 = v61 + 136657 * v51 - 683901 * v52 - (v58 & 0xFFFFFFFFFFE00000);
  v64 = v149 + ((v158 + 0x100000) >> 21);
  v65 = v148 + ((v155 + 0x100000) >> 21);
  v66 = 666643 * v51
      + 470296 * v52
      + 654183 * v47
      + ((v64 + 0x100000) >> 21)
      + v155
      - ((v155 + 0x100000) & 0xFFFFFFFFFFE00000);
  v67 = v147 + ((v154 + 0x100000) >> 21);
  v68 = 666643 * v53
      + 470296 * v54
      + 654183 * v51
      - 997805 * v52
      + 136657 * v47
      + ((v65 + 0x100000) >> 21)
      + v154
      - ((v154 + 0x100000) & 0xFFFFFFFFFFE00000);
  v69 = v158 + 666643 * v47 - ((v158 + 0x100000) & 0xFFFFFFFFFFE00000) + ((v161 + 0x100000) >> 21);
  v70 = 666643 * v52
      + 470296 * v47
      + v64
      + ((uint64_t)(v69 + 0x100000) >> 21)
      - ((v64 + 0x100000) & 0xFFFFFFFFFFE00000);
  v71 = 666643 * v54 + 470296 * v51 + 654183 * v52 - 997805 * v47 + v65 - ((v65 + 0x100000) & 0xFFFFFFFFFFE00000);
  v72 = v63 + ((v67 + 0x100000) >> 21);
  v73 = 470296 * v53
      + 666643 * v56
      + 654183 * v54
      - 997805 * v51
      + 136657 * v52
      - 683901 * v47
      + v67
      - ((v67 + 0x100000) & 0xFFFFFFFFFFE00000);
  v74 = -997805 * v53 + 654183 * v56 + 136657 * v54 - 683901 * v51 + v62;
  v62 += 0x100000;
  v75 = v59
      - 997805 * (int)v56
      + 136657 * v53
      - 683901 * v54
      - ((v59 + 0x100000) & 0xFFFFFFFFFFE00000)
      + (v62 >> 21);
  v76 = v74 - (v62 & 0xFFFFFFFFFFE00000) + ((uint64_t)(v72 + 0x100000) >> 21);
  v77 = v72 - ((v72 + 0x100000) & 0xFFFFFFFFFFE00000);
  v78 = -683901 * v53 + 136657 * v56;
  v79 = v145 + ((v60 + 0x100000) >> 21);
  v80 = v73 + ((uint64_t)(v68 + 0x100000) >> 21);
  v81 = v78 + v60 - ((v60 + 0x100000) & 0xFFFFFFFFFFE00000) + ((uint64_t)(v75 + 0x100000) >> 21);
  v82 = v146 + ((uint64_t)(v79 + 0x100000) >> 21);
  v83 = v77 + ((uint64_t)(v80 + 0x100000) >> 21);
  v84 = v80 - ((v80 + 0x100000) & 0xFFFFFFFFFFE00000);
  v85 = v75 - ((v75 + 0x100000) & 0xFFFFFFFFFFE00000) + ((uint64_t)(v76 + 0x100000) >> 21);
  v86 = v76 - ((v76 + 0x100000) & 0xFFFFFFFFFFE00000);
  v87 = v79 - ((v79 + 0x100000) & 0xFFFFFFFFFFE00000) + ((uint64_t)(v81 + 0x100000) >> 21);
  v88 = v81 - ((v81 + 0x100000) & 0xFFFFFFFFFFE00000);
  v89 = v71 + ((uint64_t)(v66 + 0x100000) >> 21);
  v90 = -683901 * v82 + ((uint64_t)(v89 + 0x100000) >> 21) + v68 - ((v68 + 0x100000) & 0xFFFFFFFFFFE00000);
  v91 = -997805 * v82
      + 136657 * v87
      - 683901 * v88
      + ((uint64_t)(v70 + 0x100000) >> 21)
      + v66
      - ((v66 + 0x100000) & 0xFFFFFFFFFFE00000);
  v92 = v69 + 470296 * v82 - ((v69 + 0x100000) & 0xFFFFFFFFFFE00000);
  v93 = v159 + 666643 * v83;
  v94 = v151 + 470296 * v83 + 666643 * v86 + ((uint64_t)(v93 + 0x100000) >> 21);
  v95 = v161 + 666643 * v82 - ((v161 + 0x100000) & 0xFFFFFFFFFFE00000);
  v96 = v92 + 654183 * v87 - 997805 * v88 + 136657 * v85 - 683901 * v86;
  v97 = 654183 * v82
      - 997805 * v87
      + 136657 * v88
      + v70
      - ((v70 + 0x100000) & 0xFFFFFFFFFFE00000)
      - 683901 * v85
      + ((v96 + 0x100000) >> 21);
  v98 = 136657 * v82
      - 683901 * v87
      + v89
      - ((v89 + 0x100000) & 0xFFFFFFFFFFE00000)
      + ((uint64_t)(v91 + 0x100000) >> 21);
  v99 = v84 + ((uint64_t)(v90 + 0x100000) >> 21);
  v100 = v94 + 0x100000;
  v101 = v98 + 0x100000;
  v102 = v98 - ((v98 + 0x100000) & 0xFFFFFFFFFFE00000);
  v103 = (uint64_t)(v99 + 0x100000) >> 21;
  v104 = v94 + 470296 * v103 - ((v94 + 0x100000) & 0xFFFFFFFFFFE00000);
  v105 = v162 + (v150 >> 21) - ((v162 + 0x100000) & 0xFFFFFFFFFFE00000) + 654183 * v83 + 666643 * v85 + 470296 * v86;
  v106 = v153 + 666643 * v88 - 997805 * v83 + 470296 * v85 + 654183 * v86 + ((uint64_t)(v105 + 0x100000) >> 21);
  v107 = v106 + 0x100000;
  v108 = v105 + 654183 * v103 - ((v105 + 0x100000) & 0xFFFFFFFFFFE00000) + (v100 >> 21);
  v109 = v106 - 997805 * v103 - ((v106 + 0x100000) & 0xFFFFFFFFFFE00000);
  v110 = v157 + 666643 * v87;
  v111 = v95 + 470296 * v87 + 654183 * v88;
  v112 = v110 + 470296 * v88 + 136657 * v83;
  v113 = v111 - 683901 * v83 - 997805 * v85;
  v114 = v112 + 654183 * v85 - 997805 * v86;
  v115 = v113 + 136657 * v86 + ((v114 + 0x100000) >> 21);
  v116 = v90 + (v101 >> 21) - ((v90 + 0x100000) & 0xFFFFFFFFFFE00000);
  v117 = v93 - ((v93 + 0x100000) & 0xFFFFFFFFFFE00000) + 666643 * v103;
  v118 = v104 + (v117 >> 21);
  v119 = v108 + (v118 >> 21);
  v120 = v109 + (v119 >> 21);
  v121 = v114 + 136657 * v103 - ((v114 + 0x100000) & 0xFFFFFFFFFFE00000) + (v107 >> 21) + (v120 >> 21);
  v122 = v115 - 683901 * v103 - ((v115 + 0x100000) & 0xFFFFFFFFFFE00000) + (v121 >> 21);
  v123 = v96 - ((v96 + 0x100000) & 0xFFFFFFFFFFE00000) + ((v115 + 0x100000) >> 21) + (v122 >> 21);
  v124 = v97 - ((v97 + 0x100000) & 0xFFFFFFFFFFE00000) + (v123 >> 21);
  v125 = v91 - ((v91 + 0x100000) & 0xFFFFFFFFFFE00000) + ((uint64_t)(v97 + 0x100000) >> 21) + (v124 >> 21);
  v126 = v102 + (v125 >> 21);
  v127 = v116 + (v126 >> 21);
  v128 = v99 - ((v99 + 0x100000) & 0xFFFFFFFFFFE00000) + (v127 >> 21);
  v129 = (v117 & 0x1FFFFF) + 666643 * (v128 >> 21);
  result = a1;
  a1[1] = (unsigned __int16)(v117 + 11283 * (v128 >> 21)) >> 8;
  v131 = (v118 & 0x1FFFFF) + 470296 * (v128 >> 21) + (v129 >> 21);
  *a1 = v117 + 19 * (v128 >> 21);
  a1[2] = ((unint64_t)((v117 & 0x1FFFFF) + 666643 * (v128 >> 21)) >> 16) & 0x1F | (32 * (v118 + 24 * (v128 >> 21) + (v129 >> 21)));
  a1[3] = (unint64_t)v131 >> 3;
  a1[4] = (unint64_t)v131 >> 11;
  v132 = (v119 & 0x1FFFFF) + 654183 * (v128 >> 21) + (v131 >> 21);
  a1[5] = (v131 >> 19) & 3 | (4 * (v119 + 103 * (v128 >> 21) + (v131 >> 21)));
  a1[6] = (unint64_t)v132 >> 6;
  v133 = (v120 & 0x1FFFFF) - 997805 * (v128 >> 21) + (v132 >> 21);
  a1[7] = (v132 >> 14) & 0x7F | (((_BYTE)v120
                                              - -83 * (v128 >> 21)
                                              + (v132 >> 21)) << 7);
  a1[8] = (unint64_t)v133 >> 1;
  a1[9] = (unint64_t)v133 >> 9;
  v134 = (v121 & 0x1FFFFF) + 136657 * (v128 >> 21) + (v133 >> 21);
  a1[10] = (v133 >> 17) & 0xF | (16 * (v121 - 47 * (v128 >> 21) + (v133 >> 21)));
  a1[11] = (unint64_t)v134 >> 4;
  a1[12] = (unint64_t)v134 >> 12;
  v135 = (v122 & 0x1FFFFF) - 683901 * (v128 >> 21) + (v134 >> 21);
  a1[13] = ((v134 & 0x100000) != 0) | (2 * (v122 - 125 * (v128 >> 21) + (v134 >> 21)));
  a1[14] = (unint64_t)v135 >> 7;
  v136 = (v123 & 0x1FFFFF) + (v135 >> 21);
  a1[15] = (v135 >> 15) & 0x3F | (((_BYTE)v123 + (v135 >> 21)) << 6);
  a1[16] = (unint64_t)v136 >> 2;
  a1[17] = (unint64_t)v136 >> 10;
  v137 = (v124 & 0x1FFFFF) + (v136 >> 21);
  a1[18] = (v136 >> 18) & 7 | (8 * (v97 + (v123 >> 21) + (v136 >> 21)));
  a1[19] = (unint64_t)v137 >> 5;
  v138 = (v125 & 0x1FFFFF) + (v137 >> 21);
  a1[20] = (unint64_t)v137 >> 13;
  a1[22] = (unsigned __int16)(v125 + (v137 >> 21)) >> 8;
  v139 = (v126 & 0x1FFFFF) + (v138 >> 21);
  a1[21] = v138;
  a1[23] = BYTE2(v138) & 0x1F | (32 * (v126 + (v138 >> 21)));
  a1[24] = (unint64_t)v139 >> 3;
  a1[25] = (unint64_t)v139 >> 11;
  v140 = (v127 & 0x1FFFFF) + (v139 >> 21);
  a1[26] = (v139 >> 19) & 3 | (4 * (v127 + (v139 >> 21)));
  a1[27] = (unint64_t)v140 >> 6;
  v141 = (v128 & 0x1FFFFF) + (v140 >> 21);
  a1[28] = (v140 >> 14) & 0x7F | (((_BYTE)v99
                                               + (v127 >> 21)
                                               + (v140 >> 21)) << 7);
  a1[29] = v141 >> 1;
  a1[30] = v141 >> 9;
  a1[31] = v141 >> 17;
  return result;
}

unsigned __int16 *sc_reduce(unsigned __int16 *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  int64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int64_t v88;
  uint64_t v89;
  int64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;

  v1 = *(unsigned int *)((char *)result + 15);
  v2 = *((unsigned int *)result + 9);
  v3 = (v2 >> 24) | ((unint64_t)*((unsigned __int8 *)result + 40) << 8) | ((unint64_t)*((unsigned __int8 *)result + 41) << 16);
  v4 = ((unint64_t)(HIBYTE(*((_DWORD *)result + 11)) | (*((unsigned __int8 *)result + 48) << 8) | (*((unsigned __int8 *)result + 49) << 16)) >> 2) & 0x1FFFFF;
  v5 = ((unint64_t)*(unsigned int *)((char *)result + 49) >> 7) & 0x1FFFFF;
  v6 = ((unint64_t)*((unsigned int *)result + 13) >> 4) & 0x1FFFFF;
  v7 = ((unint64_t)(HIBYTE(*((_DWORD *)result + 13)) | (*((unsigned __int8 *)result + 56) << 8) | (*((unsigned __int8 *)result + 57) << 16)) >> 1) & 0x1FFFFF;
  v8 = ((v1 >> 6) & 0x1FFFFF) + 666643 * v4;
  v9 = (*(unsigned __int16 *)((char *)result + 21) | ((unint64_t)(*((_BYTE *)result + 23) & 0x1F) << 16))
     + 470296 * v5
     + 666643 * v6
     + 654183 * v4;
  v10 = (((v1 >> 24) | ((unint64_t)*((unsigned __int8 *)result + 19) << 8) | ((unint64_t)*((unsigned __int8 *)result + 20) << 16)) >> 3)
      + 666643 * v5
      + 470296 * v4
      + ((unint64_t)(v8 + 0x100000) >> 21);
  v11 = (((unint64_t)*(unsigned int *)((char *)result + 23) >> 5) & 0x1FFFFF)
      + 654183 * v5
      + 470296 * v6
      - 997805 * (int)v4
      + 666643 * v7
      + ((v9 + 0x100000) >> 21);
  v12 = (((unint64_t)(HIBYTE(*(_DWORD *)((char *)result + 23)) | (*((unsigned __int8 *)result + 27) << 8) | (*((unsigned __int8 *)result + 28) << 16)) >> 2) & 0x1FFFFF)
      - 997805 * (int)v5
      + 654183 * v6
      + 136657 * v4;
  v13 = (((unint64_t)*((unsigned int *)result + 7) >> 7) & 0x1FFFFF)
      + 136657 * v5
      - 997805 * (int)v6
      - 683901 * (int)v4;
  v14 = (((unint64_t)*(unsigned int *)((char *)result + 31) >> 4) & 0x1FFFFF)
      - 683901 * (int)v5
      + 136657 * v6;
  v15 = (((unint64_t)(HIBYTE(*(_DWORD *)((char *)result + 31)) | (*((unsigned __int8 *)result + 35) << 8) | (*((unsigned __int8 *)result + 36) << 16)) >> 1) & 0x1FFFFF)
      - 683901 * (int)v6;
  v16 = (unint64_t)*((unsigned int *)result + 15) >> 3;
  v17 = ((v2 >> 6) & 0x1FFFFF) - 997805 * (int)v16;
  v18 = (v3 >> 3) + 136657 * v16;
  v19 = (result[21] | ((unint64_t)(result[22] & 0x1F) << 16)) - 683901 * (int)v16;
  v20 = v14 + 470296 * v16;
  v21 = v13 + 666643 * v16;
  v22 = v15 + 654183 * v16;
  v23 = ((unint64_t)*(unsigned int *)((char *)result + 57) >> 6) & 0x1FFFFF;
  v24 = v18 - 683901 * (int)v23;
  v25 = v17 + 136657 * v23 - 683901 * (int)v7;
  v26 = v20 + 654183 * v23 - 997805 * (int)v7;
  v27 = v12 + 666643 * v23 + 470296 * v7;
  v28 = v21 + 470296 * v23;
  v29 = v22 - 997805 * (int)v23;
  v30 = v28 + 654183 * v7 + ((v27 + 0x100000) >> 21);
  v31 = v29 + 136657 * v7 + ((v26 + 0x100000) >> 21);
  v32 = v26 - ((v26 + 0x100000) & 0xFFFFFFFFFFE00000);
  v33 = v24 + ((v25 + 0x100000) >> 21);
  v34 = (((unint64_t)*((unsigned int *)result + 11) >> 5) & 0x1FFFFF) + ((uint64_t)(v19 + 0x100000) >> 21);
  v35 = v9 - ((v9 + 0x100000) & 0xFFFFFE00000) + ((v10 + 0x100000) >> 21);
  v36 = v10 - ((v10 + 0x100000) & 0x7FFFFFFFFFE00000);
  v37 = v32 + ((v30 + 0x100000) >> 21);
  v38 = v30 - ((v30 + 0x100000) & 0xFFFFFFFFFFE00000);
  v39 = v25 - ((v25 + 0x100000) & 0xFFFFFFFFFFE00000) + ((v31 + 0x100000) >> 21);
  v40 = v31 - ((v31 + 0x100000) & 0xFFFFFFFFFFE00000);
  v41 = v19 - ((v19 + 0x100000) & 0xFFFFFFFFFFE00000) + ((v33 + 0x100000) >> 21);
  v42 = v33 - ((v33 + 0x100000) & 0xFFFFFFFFFFE00000);
  v43 = (((unint64_t)*(unsigned int *)((char *)result + 7) >> 7) & 0x1FFFFF) + 666643 * v42;
  v44 = (((unint64_t)*(unsigned int *)(result + 5) >> 4) & 0x1FFFFF) + 666643 * v41 + 470296 * v42;
  v45 = (((unint64_t)(HIBYTE(*(_DWORD *)(result + 5)) | (*((unsigned __int8 *)result + 14) << 8) | (*((unsigned __int8 *)result + 15) << 16)) >> 1) & 0x1FFFFF)
      + 666643 * v34
      + 470296 * v41
      + 654183 * v42;
  v46 = v8 - ((v8 + 0x100000) & 0x7FFFFE00000) + 470296 * v34 + 654183 * v41 - 997805 * v42;
  v47 = v36 + 654183 * v34 - 997805 * v41 + 136657 * v42;
  v48 = v35 - 997805 * v34 + 136657 * v41 - 683901 * v42;
  v49 = (((unint64_t)(HIBYTE(*(_DWORD *)(result + 1)) | (*((unsigned __int8 *)result + 6) << 8) | (*((unsigned __int8 *)result + 7) << 16)) >> 2) & 0x1FFFFF)
      + 666643 * v39;
  v50 = v43 + 470296 * v39;
  v51 = v44 + 654183 * v39;
  v52 = v45 - 997805 * v39;
  v53 = v46 + 136657 * v39;
  v54 = v47 - 683901 * v39;
  v55 = (((unint64_t)*(unsigned int *)(result + 1) >> 5) & 0x1FFFFF) + 666643 * v40;
  v56 = v49 + 470296 * v40;
  v57 = v50 + 654183 * v40;
  v58 = v51 - 997805 * v40;
  v59 = v52 + 136657 * v40;
  v60 = v53 - 683901 * v40;
  v61 = v27 - 683901 * v34 - ((v27 + 0x100000) & 0xFFFFFFFFFFE00000) + ((uint64_t)(v11 + 0x100000) >> 21);
  v62 = (*result | ((unint64_t)(result[1] & 0x1F) << 16)) + 666643 * v37;
  v63 = v56 + 654183 * v37;
  v64 = v58 + 136657 * v37;
  v65 = v55 + 470296 * v37 + ((uint64_t)(v62 + 0x100000) >> 21);
  v66 = v54 + ((uint64_t)(v60 + 0x100000) >> 21);
  v67 = v11 + 136657 * v34 - ((v11 + 0x100000) & 0xFFFFFFFFFFE00000) - 683901 * v41 + ((v48 + 0x100000) >> 21);
  v68 = v48 - ((v48 + 0x100000) & 0xFFFFFFFFFFE00000);
  v69 = v38 + ((uint64_t)(v61 + 0x100000) >> 21);
  v70 = v61 - ((v61 + 0x100000) & 0xFFFFFFFFFFE00000);
  v71 = v65 + 0x100000;
  v72 = v70 + ((uint64_t)(v67 + 0x100000) >> 21);
  v73 = v67 - ((v67 + 0x100000) & 0xFFFFFFFFFFE00000);
  v74 = (uint64_t)(v69 + 0x100000) >> 21;
  v75 = v65 + 470296 * v74 - ((v65 + 0x100000) & 0xFFFFFFFFFFE00000);
  v76 = v57 - 997805 * v37 + ((uint64_t)(v63 + 0x100000) >> 21);
  v77 = v63 + 654183 * v74 - ((v63 + 0x100000) & 0xFFFFFFFFFFE00000) + (v71 >> 21);
  v78 = v76 - 997805 * v74 - ((v76 + 0x100000) & 0xFFFFFFFFFFE00000);
  v79 = v59 - 683901 * v37 + ((uint64_t)(v64 + 0x100000) >> 21);
  v80 = v64 + 136657 * v74 - ((v64 + 0x100000) & 0xFFFFFFFFFFE00000) + ((v76 + 0x100000) >> 21);
  v81 = v62 - ((v62 + 0x100000) & 0xFFFFFFFFFFE00000) + 666643 * v74;
  v82 = v79 - 683901 * v74;
  v79 += 0x100000;
  v83 = v60 - ((v60 + 0x100000) & 0xFFFFFFFFFFE00000) + (v79 >> 21);
  v84 = v75 + (v81 >> 21);
  v85 = v77 + (v84 >> 21);
  v86 = v78 + (v85 >> 21);
  v87 = v80 + (v86 >> 21);
  v88 = v82 - (v79 & 0xFFFFFFFFFFE00000) + (v87 >> 21);
  v89 = v83 + (v88 >> 21);
  v90 = v66 - ((v66 + 0x100000) & 0xFFFFFFFFFFE00000) + (v89 >> 21);
  v91 = v68 + ((uint64_t)(v66 + 0x100000) >> 21) + (v90 >> 21);
  v92 = v73 + (v91 >> 21);
  v93 = v72 + (v92 >> 21);
  v94 = v69 - ((v69 + 0x100000) & 0xFFFFFFFFFFE00000) + (v93 >> 21);
  v95 = (v81 & 0x1FFFFF) + 666643 * (v94 >> 21);
  *((_BYTE *)result + 1) = (unsigned __int16)(v81 + 11283 * (v94 >> 21)) >> 8;
  v96 = (v84 & 0x1FFFFF) + 470296 * (v94 >> 21) + (v95 >> 21);
  *(_BYTE *)result = v81 + 19 * (v94 >> 21);
  *((_BYTE *)result + 2) = ((unint64_t)((v81 & 0x1FFFFF) + 666643 * (v94 >> 21)) >> 16) & 0x1F | (32 * (v84 + 24 * (v94 >> 21) + (v95 >> 21)));
  *((_BYTE *)result + 3) = (unint64_t)v96 >> 3;
  *((_BYTE *)result + 4) = (unint64_t)v96 >> 11;
  v97 = (v85 & 0x1FFFFF) + 654183 * (v94 >> 21) + (v96 >> 21);
  *((_BYTE *)result + 5) = (v96 >> 19) & 3 | (4 * (v85 + 103 * (v94 >> 21) + (v96 >> 21)));
  *((_BYTE *)result + 6) = (unint64_t)v97 >> 6;
  v98 = (v86 & 0x1FFFFF) - 997805 * (v94 >> 21) + (v97 >> 21);
  *((_BYTE *)result + 7) = (v97 >> 14) & 0x7F | (((_BYTE)v86
                                                              - -83 * (v94 >> 21)
                                                              + (v97 >> 21)) << 7);
  *((_BYTE *)result + 8) = (unint64_t)v98 >> 1;
  *((_BYTE *)result + 9) = (unint64_t)v98 >> 9;
  v99 = (v87 & 0x1FFFFF) + 136657 * (v94 >> 21) + (v98 >> 21);
  *((_BYTE *)result + 10) = (v98 >> 17) & 0xF | (16 * (v87 - 47 * (v94 >> 21) + (v98 >> 21)));
  *((_BYTE *)result + 11) = (unint64_t)v99 >> 4;
  *((_BYTE *)result + 12) = (unint64_t)v99 >> 12;
  v100 = (v88 & 0x1FFFFF) - 683901 * (v94 >> 21) + (v99 >> 21);
  *((_BYTE *)result + 13) = ((v99 & 0x100000) != 0) | (2 * (v88 - 125 * (v94 >> 21) + (v99 >> 21)));
  *((_BYTE *)result + 14) = (unint64_t)v100 >> 7;
  v101 = (v89 & 0x1FFFFF) + (v100 >> 21);
  *((_BYTE *)result + 15) = (v100 >> 15) & 0x3F | (((_BYTE)v89 + (v100 >> 21)) << 6);
  *((_BYTE *)result + 16) = (unint64_t)v101 >> 2;
  *((_BYTE *)result + 17) = (unint64_t)v101 >> 10;
  v102 = (v90 & 0x1FFFFF) + (v101 >> 21);
  *((_BYTE *)result + 18) = (v101 >> 18) & 7 | (8 * (v66 + (v89 >> 21) + (v101 >> 21)));
  *((_BYTE *)result + 19) = (unint64_t)v102 >> 5;
  *((_BYTE *)result + 20) = (unint64_t)v102 >> 13;
  *((_BYTE *)result + 22) = (unsigned __int16)(v91 + (v102 >> 21)) >> 8;
  v103 = (v92 & 0x1FFFFF) + (((v91 & 0x1FFFFF) + (v102 >> 21)) >> 21);
  *((_BYTE *)result + 21) = v91 + (v102 >> 21);
  *((_BYTE *)result + 23) = ((unint64_t)((v91 & 0x1FFFFF) + (v102 >> 21)) >> 16) & 0x1F | (32 * v103);
  *((_BYTE *)result + 24) = (unint64_t)v103 >> 3;
  *((_BYTE *)result + 25) = (unint64_t)v103 >> 11;
  v104 = (v93 & 0x1FFFFF) + (v103 >> 21);
  *((_BYTE *)result + 26) = (v103 >> 19) & 3 | (4 * v104);
  *((_BYTE *)result + 27) = (unint64_t)v104 >> 6;
  v105 = (v94 & 0x1FFFFF) + (v104 >> 21);
  *((_BYTE *)result + 28) = (v104 >> 14) & 0x7F | ((_BYTE)v105 << 7);
  *((_BYTE *)result + 29) = v105 >> 1;
  *((_BYTE *)result + 30) = v105 >> 9;
  *((_BYTE *)result + 31) = v105 >> 17;
  return result;
}

uint64_t ge_select(uint64_t a1, int a2, int a3)
{
  int v4;
  int v5;
  uint64_t *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int32x4_t v10;
  int32x4_t v11;
  _OWORD v13[7];
  int32x2_t v14;

  v4 = (a3 >> 7) & 1;
  v5 = a3 - 2 * (a3 & (a3 >> 31));
  *(_DWORD *)a1 = 1;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_QWORD *)(a1 + 36) = 0x100000000;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  v6 = (uint64_t *)((char *)&base + 960 * a2);
  ge_cmov((uint64_t *)a1, v6, ((a3 - 2 * (a3 & (a3 >> 31))) ^ 1) - 1 < 0);
  ge_cmov((uint64_t *)a1, v6 + 15, (v5 ^ 2) - 1 < 0);
  ge_cmov((uint64_t *)a1, v6 + 30, (v5 ^ 3) - 1 < 0);
  ge_cmov((uint64_t *)a1, v6 + 45, (v5 ^ 4) - 1 < 0);
  ge_cmov((uint64_t *)a1, v6 + 60, (v5 ^ 5) - 1 < 0);
  ge_cmov((uint64_t *)a1, v6 + 75, (v5 ^ 6) - 1 < 0);
  ge_cmov((uint64_t *)a1, v6 + 90, (v5 ^ 7) - 1 < 0);
  ge_cmov((uint64_t *)a1, v6 + 105, (v5 ^ 8) - 1 < 0);
  *(_QWORD *)&v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_OWORD *)(a1 + 56);
  v13[0] = *(_OWORD *)(a1 + 40);
  v13[1] = v8;
  *((_QWORD *)&v7 + 1) = *(_QWORD *)a1;
  v9 = *(_OWORD *)(a1 + 8);
  v13[2] = v7;
  v13[3] = v9;
  v10 = *(int32x4_t *)(a1 + 96);
  v11 = vnegq_s32(*(int32x4_t *)(a1 + 80));
  v13[4] = *(_OWORD *)(a1 + 24);
  v13[5] = v11;
  v13[6] = vnegq_s32(v10);
  v14 = vneg_s32(*(int32x2_t *)(a1 + 112));
  return ge_cmov((uint64_t *)a1, (uint64_t *)v13, v4);
}

uint64_t ge_cmov(uint64_t *a1, uint64_t *a2, char a3)
{
  ccn_mux(5, a3, a1, a2, a1);
  ccn_mux(5, a3, a1 + 5, a2 + 5, a1 + 5);
  return ccn_mux(5, a3, a1 + 10, a2 + 10, a1 + 10);
}

unsigned int *ccsha256_ltc_compress(unsigned int *result, uint64_t a2, const char *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  int8x16_t v16;
  uint16x8_t v22;
  uint16x8_t v23;
  int8x16_t v24;
  uint16x8_t v25;
  __int32 v26;
  unint64_t v27;
  int v28;
  int *v29;
  unint64_t v30;
  int8x16_t *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  int v41;
  int v42;
  unint64_t v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  unint64_t v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  unint64_t v54;
  int v55;
  int v56;
  unsigned int v57;
  int v58;
  unint64_t v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  unint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  int v69;
  int v70;
  unint64_t v71;
  int v72;
  int v73;
  unint64_t v74;
  int v75;
  int8x16_t v76;
  int8x16_t v77;
  _OWORD v78[14];
  uint64_t v79;
  int8x16x4_t v80;

  v79 = *MEMORY[0x1E0C874D8];
  if (a2)
  {
    v3 = *result;
    v4 = result[1];
    v5 = result[2];
    v6 = result[3];
    v7 = result[4];
    v8 = result[5];
    v9 = result[6];
    v10 = result[7];
    do
    {
      v11 = 0;
      --a2;
      v80 = vld4q_s8(a3);
      v12 = vmovl_u8(*(uint8x8_t *)v80.val[0].i8);
      v13 = vmovl_high_u8((uint8x16_t)v80.val[0]);
      _Q16 = vmovl_high_u8((uint8x16_t)v80.val[1]);
      _Q17 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v80.val[1].i8);
      v16 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q17.i8, 0x10uLL);
      __asm
      {
        SHLL2           V19.4S, V16.8H, #0x10
        SHLL2           V17.4S, V17.8H, #0x10
      }
      v22 = vmovl_u8(*(uint8x8_t *)v80.val[2].i8);
      v23 = vmovl_high_u8((uint8x16_t)v80.val[2]);
      v24 = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q16.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v23.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v13.i8), 0x18uLL));
      v25 = vmovl_u8(*(uint8x8_t *)v80.val[3].i8);
      v80.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v80.val[3]);
      v78[0] = vorrq_s8(v24, (int8x16_t)vmovl_u16(*(uint16x4_t *)v80.val[0].i8));
      v78[1] = vorrq_s8(vorrq_s8(vorrq_s8(_Q19, (int8x16_t)vshll_high_n_u16(v23, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v13), 0x18uLL)), (int8x16_t)vmovl_high_u16((uint16x8_t)v80.val[0]));
      v76 = vorrq_s8(vorrq_s8(vorrq_s8(v16, (int8x16_t)vshll_n_u16(*(uint16x4_t *)v22.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v12.i8), 0x18uLL)), (int8x16_t)vmovl_u16(*(uint16x4_t *)v25.i8));
      v77 = vorrq_s8(vorrq_s8(vorrq_s8(_Q17, (int8x16_t)vshll_high_n_u16(v22, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v12), 0x18uLL)), (int8x16_t)vmovl_high_u16(v25));
      v26 = v76.i32[0];
      do
      {
        HIDWORD(v27) = *(_DWORD *)((char *)&v78[1] + v11 * 4 + 8);
        LODWORD(v27) = HIDWORD(v27);
        v28 = (v27 >> 17) ^ __ROR4__(HIDWORD(v27), 19) ^ (HIDWORD(v27) >> 10);
        HIDWORD(v27) = v76.i32[v11 + 1];
        LODWORD(v27) = HIDWORD(v27);
        *(_DWORD *)((char *)&v78[2] + v11 * 4) = v28
                                               + *(_DWORD *)((char *)v78 + v11 * 4 + 4)
                                               + v26
                                               + ((v27 >> 7) ^ __ROR4__(HIDWORD(v27), 18) ^ (HIDWORD(v27) >> 3));
        ++v11;
        v26 = HIDWORD(v27);
      }
      while (v11 != 48);
      v29 = &dword_1DEE1CF30;
      v30 = -8;
      v31 = &v77;
      v32 = v3;
      v33 = v4;
      v34 = v5;
      v35 = v6;
      v36 = v7;
      v37 = v8;
      v38 = v9;
      v39 = v10;
      do
      {
        HIDWORD(v40) = v36;
        LODWORD(v40) = v36;
        v41 = (v40 >> 6) ^ __ROR4__(v36, 11);
        v43 = __PAIR64__(v32, __ROR4__(v36, 25));
        v42 = v41 ^ v43;
        LODWORD(v43) = v32;
        v44 = (v37 & v36 | v38 & ~v36) + v39 + *(v29 - 4) + v31[-1].i32[0] + v42;
        v45 = v44 + v35;
        v46 = ((v43 >> 2) ^ __ROR4__(v32, 13) ^ __ROR4__(v32, 22)) + ((v32 | v33) & v34 | v32 & v33) + v44;
        HIDWORD(v43) = v45;
        LODWORD(v43) = v45;
        v47 = (v43 >> 6) ^ __ROR4__(v45, 11);
        v48 = __PAIR64__(v46, __ROR4__(v45, 25));
        v49 = *(v29 - 3) + v38 + v31[-1].i32[1] + (v36 & v45 | v37 & ~v45) + (v47 ^ v48);
        LODWORD(v48) = v46;
        v50 = v49 + v34;
        v51 = ((v48 >> 2) ^ __ROR4__(v46, 13) ^ __ROR4__(v46, 22)) + ((v46 | v32) & v33 | v46 & v32) + v49;
        HIDWORD(v48) = v50;
        LODWORD(v48) = v50;
        v52 = (v48 >> 6) ^ __ROR4__(v50, 11);
        v54 = __PAIR64__(v51, __ROR4__(v50, 25));
        v53 = v52 ^ v54;
        LODWORD(v54) = v51;
        v55 = *(v29 - 2) + v37 + v31[-1].i32[2] + (v45 & v50 | v36 & ~v50) + v53;
        v56 = v55 + v33;
        v57 = ((v54 >> 2) ^ __ROR4__(v51, 13) ^ __ROR4__(v51, 22)) + ((v51 | v46) & v32 | v51 & v46) + v55;
        HIDWORD(v54) = v56;
        LODWORD(v54) = v56;
        v58 = (v54 >> 6) ^ __ROR4__(v56, 11);
        v59 = __PAIR64__(v57, __ROR4__(v56, 25));
        v60 = *(v29 - 1) + v36 + v31[-1].i32[3] + (v50 & v56 | v45 & ~v56) + (v58 ^ v59);
        LODWORD(v59) = v57;
        v61 = v60 + v32;
        v62 = ((v59 >> 2) ^ __ROR4__(v57, 13) ^ __ROR4__(v57, 22)) + ((v57 | v51) & v46 | v57 & v51) + v60;
        HIDWORD(v59) = v61;
        LODWORD(v59) = v61;
        v63 = (v59 >> 6) ^ __ROR4__(v61, 11);
        v65 = __PAIR64__(v62, __ROR4__(v61, 25));
        v64 = v63 ^ v65;
        LODWORD(v65) = v62;
        v66 = *v29 + v31->i32[0] + v45 + (v56 & v61 | v50 & ~v61) + v64;
        v39 = v66 + v46;
        v35 = ((v65 >> 2) ^ __ROR4__(v62, 13) ^ __ROR4__(v62, 22)) + ((v62 | v57) & v51 | v62 & v57) + v66;
        HIDWORD(v65) = v39;
        LODWORD(v65) = v39;
        v67 = (v65 >> 6) ^ __ROR4__(v39, 11);
        v68 = __PAIR64__(v35, __ROR4__(v39, 25));
        v69 = v50 + v29[1] + v31->i32[1] + (v61 & v39 | v56 & ~v39) + (v67 ^ v68);
        LODWORD(v68) = v35;
        v38 = v69 + v51;
        v34 = ((v68 >> 2) ^ __ROR4__(v35, 13) ^ __ROR4__(v35, 22)) + ((v35 | v62) & v57 | v35 & v62) + v69;
        HIDWORD(v68) = v38;
        LODWORD(v68) = v38;
        v70 = (v68 >> 6) ^ __ROR4__(v38, 11);
        v71 = __PAIR64__(v34, __ROR4__(v38, 25));
        v72 = v31->i32[2] + v29[2] + v56 + (v39 & v38 | v61 & ~v38) + (v70 ^ v71);
        LODWORD(v71) = v34;
        v37 = v72 + v57;
        v33 = ((v71 >> 2) ^ __ROR4__(v34, 13) ^ __ROR4__(v34, 22)) + ((v34 | v35) & v62 | v34 & v35) + v72;
        HIDWORD(v71) = v37;
        LODWORD(v71) = v37;
        v73 = (v71 >> 6) ^ __ROR4__(v37, 11);
        v74 = __PAIR64__(v33, __ROR4__(v37, 25));
        v75 = v31->i32[3] + v29[3] + v61 + (v38 & v37 | v39 & ~v37) + (v73 ^ v74);
        LODWORD(v74) = v33;
        v36 = v75 + v62;
        v32 = ((v74 >> 2) ^ __ROR4__(v33, 13) ^ __ROR4__(v33, 22)) + ((v33 | v34) & v35 | v33 & v34) + v75;
        v30 += 8;
        v31 += 2;
        v29 += 8;
      }
      while (v30 < 0x38);
      v3 += v32;
      v4 += v33;
      *result = v3;
      result[1] = v4;
      v5 += v34;
      v6 += v35;
      result[2] = v5;
      result[3] = v6;
      v7 += v36;
      v8 += v37;
      result[4] = v7;
      result[5] = v8;
      v9 += v38;
      v10 += v39;
      a3 += 64;
      result[6] = v9;
      result[7] = v10;
    }
    while (a2);
  }
  return result;
}

BOOL ccec25519_mul121666_ws(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8[5];

  v8[4] = *MEMORY[0x1E0C874D8];
  v6 = ccn_mul1(4, v8, a4, 121666);
  result = ccn_add1_ws(a1, 4, a3, v8, 38 * v6);
  *a3 += result ? 0x26uLL : 0;
  return result;
}

uint64_t ccec25519_inv_ws(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4);
  v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4);
  v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4);
  cczp_sqr_ws(a1, a2);
  ccn_set(4, v7, v8);
  cczp_sqr_ws(a1, a2);
  cczp_sqr_ws(a1, a2);
  cczp_mul_ws(a1, a2);
  cczp_mul_ws(a1, a2);
  cczp_sqr_ws(a1, a2);
  cczp_mul_ws(a1, a2);
  ccn_set(4, v7, v9);
  v10 = 5;
  do
  {
    cczp_sqr_ws(a1, a2);
    --v10;
  }
  while (v10);
  cczp_mul_ws(a1, a2);
  ccn_set(4, v7, v9);
  v11 = 10;
  do
  {
    cczp_sqr_ws(a1, a2);
    --v11;
  }
  while (v11);
  cczp_mul_ws(a1, a2);
  ccn_set(4, v7, a3);
  v12 = 20;
  do
  {
    cczp_sqr_ws(a1, a2);
    --v12;
  }
  while (v12);
  cczp_mul_ws(a1, a2);
  ccn_set(4, v7, v7);
  v13 = 10;
  do
  {
    cczp_sqr_ws(a1, a2);
    --v13;
  }
  while (v13);
  cczp_mul_ws(a1, a2);
  ccn_set(4, v7, v9);
  v14 = 50;
  do
  {
    cczp_sqr_ws(a1, a2);
    --v14;
  }
  while (v14);
  cczp_mul_ws(a1, a2);
  ccn_set(4, v7, a3);
  v15 = 100;
  do
  {
    cczp_sqr_ws(a1, a2);
    --v15;
  }
  while (v15);
  cczp_mul_ws(a1, a2);
  ccn_set(4, v7, v7);
  v16 = 50;
  do
  {
    cczp_sqr_ws(a1, a2);
    --v16;
  }
  while (v16);
  cczp_mul_ws(a1, a2);
  ccn_set(4, v7, v7);
  v17 = 5;
  do
  {
    cczp_sqr_ws(a1, a2);
    --v17;
  }
  while (v17);
  cczp_mul_ws(a1, a2);
  *(_QWORD *)(a1 + 16) = v6;
  return 0;
}

uint64_t ccec25519_from_ws(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _BOOL8 v7;
  unint64_t *v8;
  int v9;
  unint64_t v11[5];

  v11[4] = *MEMORY[0x1E0C874D8];
  v7 = ccn_add1_ws(a1, 4, a3, a4, (a4[3] >> 63) & 0x13);
  ccn_set_bit((uint64_t)a3, 0xFFuLL, v7);
  v8 = (unint64_t *)cczp_prime(a2);
  v9 = ccn_sub_ws(a1, 4, v11, a3, v8);
  ccn_sub1(4, a3, v11, -v9 & 0x13);
  return ccn_set_bit((uint64_t)a3, 0xFFuLL, 0);
}

_QWORD *ccec25519_add_asm_ws(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5)
{
  return ccn_addmod_p25519(a3, a4, a5);
}

_OWORD *ccec25519_sub_asm_ws(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4, unint64_t *a5)
{
  return ccn_submod_p25519(a3, a4, a5);
}

_QWORD *ccec25519_mul_asm_ws(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4, unint64_t *a5)
{
  return ccn_mulmod_p25519(a3, a4, a5);
}

void ccec25519_sqr_asm_ws()
{
  ccn_sqrmod_p25519();
}

uint64_t ccec_der_import_diversified_pub(unint64_t *a1, uint64_t a2, unsigned __int8 *a3, _DWORD *a4, unint64_t **a5, unint64_t **a6)
{
  char v10;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  unsigned __int8 *v32;
  char v33;

  v10 = 0;
  v33 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v33 = v10;
  v15 = &a3[a2];
  v31 = 0;
  v32 = &a3[a2];
  v16 = ccder_decode_constructed_tl(0x2000000000000010, &v32, a3, &a3[a2]);
  v17 = ccder_decode_tl(4, (unint64_t *)&v31, v16, v32);
  v18 = v17;
  if (v17)
    v19 = &v17[v31];
  else
    v19 = 0;
  if (v17)
    v20 = v31;
  else
    v20 = 0;
  v21 = ccder_decode_tl(4, (unint64_t *)&v31, v19, v32);
  v22 = &v21[v31];
  if (v21)
  {
    v23 = v31;
  }
  else
  {
    v22 = 0;
    v23 = 0;
  }
  v24 = 0xFFFFFFFFLL;
  if (v18)
  {
    v25 = v21;
    if (v21 && v22 == v15)
    {
      v27 = ccec_compact_import_pub(a1, v20, v18, a5);
      if (v27)
      {
        v28 = ccec_import_pub(a1, v20, v18, a5);
        if ((_DWORD)v28)
        {
          v24 = v28;
          goto LABEL_27;
        }
        v29 = ccec_import_pub(a1, v23, v25, a6);
      }
      else
      {
        v29 = ccec_compact_import_pub(a1, v23, v25, a6);
      }
      v24 = v29;
      if (a4 && !(_DWORD)v29)
        *a4 = 4 * (v27 == 0);
    }
  }
LABEL_27:
  cc_disable_dit(&v33);
  return v24;
}

uint64_t ccn_recode_ssw(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;

  v4 = result << 6;
  if (result << 6)
  {
    v5 = 0;
    do
    {
      *(_BYTE *)(a4 + v5) = (*(_QWORD *)(a2 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1;
      ++v5;
    }
    while (v4 != v5);
    if ((int)v4 >= 1)
    {
      v6 = 0;
      v7 = 1 << (a3 - 1);
      v8 = 1 << a3;
      v9 = -(1 << a3);
      v10 = (int)((_DWORD)result << 6);
      v11 = a4 + 1;
      result = 1;
      do
      {
        if (*(_BYTE *)(a4 + v6))
          v12 = v7 < 3;
        else
          v12 = 1;
        if (!v12)
        {
          v13 = v11;
          v14 = 1;
          v15 = result;
          do
          {
            v16 = v14 + v6;
            if (v14 + v6 >= v10)
              break;
            if (*(_BYTE *)(a4 + v16))
            {
              v17 = *(char *)(a4 + v16) << v14;
              v18 = *(char *)(a4 + v6);
              if (v17 + v18 >= v8)
              {
                v19 = v18 - v17;
                if (v19 <= v9)
                  break;
                v20 = 0;
                *(_BYTE *)(a4 + v6) = v19;
                while (*(_BYTE *)(v13 + v20))
                {
                  *(_BYTE *)(v13 + v20++) = 0;
                  if (v15 + (int)v20 >= (int)v4)
                    goto LABEL_21;
                }
                *(_BYTE *)(v13 + v20) = 1;
              }
              else
              {
                *(_BYTE *)(a4 + v6) = v17 + v18;
                *(_BYTE *)(a4 + v16) = 0;
              }
            }
LABEL_21:
            ++v14;
            ++v15;
            ++v13;
          }
          while (v14 != v7 - 1);
        }
        ++v6;
        ++result;
        ++v11;
      }
      while (v6 != (v4 & 0xFFFFFFC0));
    }
  }
  return result;
}

uint64_t ltc_des3_ecb_encrypt(uint64_t a1, uint64_t a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v6;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C874D8];
  if (a2)
  {
    v6 = a2;
    do
    {
      --v6;
      v8 = *a3;
      v9 = a3[1];
      a3 += 2;
      v12 = bswap32(v8);
      v13 = bswap32(v9);
      desfunc3(&v12, a1);
      v10 = bswap32(v13);
      *a4 = bswap32(v12);
      a4[1] = v10;
      a4 += 2;
    }
    while (v6);
  }
  return 0;
}

uint64_t ccec_sign_composite_msg_ws(uint64_t a1, uint64_t **a2, unint64_t *a3, size_t a4, char *a5, char *a6, char *a7, uint64_t (**a8)(_QWORD, unint64_t, void *))
{
  unsigned __int8 v15[64];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C874D8];
  ccdigest((uint64_t)a3, a4, a5, (uint64_t)v15);
  return ccec_sign_composite_ws(a1, a2, *a3, v15, a6, a7, a8);
}

uint64_t ccec_sign_composite_msg(uint64_t **a1, unint64_t *a2, size_t a3, char *a4, char *a5, char *a6, uint64_t (**a7)(_QWORD, unint64_t, void *))
{
  char v14;
  uint64_t v20;
  _QWORD v22[4];
  void (*v23)(uint64_t);
  char v24;
  unsigned __int8 v25[64];
  uint64_t v26;

  v14 = 0;
  v26 = *MEMORY[0x1E0C874D8];
  v24 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v14 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v14 = 1;
    }
  }
  v24 = v14;
  v22[0] = cc_malloc_clear(280 * **a1);
  v22[1] = 35 * **a1;
  v22[2] = 0;
  v22[3] = cc_ws_alloc;
  v23 = cc_ws_free;
  if (v22[0])
  {
    ccdigest((uint64_t)a2, a3, a4, (uint64_t)v25);
    v20 = ccec_sign_composite_ws((uint64_t)v22, a1, *a2, v25, a5, a6, a7);
    v23((uint64_t)v22);
  }
  else
  {
    v20 = 4294967283;
  }
  cc_disable_dit(&v24);
  return v20;
}

_BYTE *ccz_neg(uint64_t a1)
{
  char v2;
  int v8;
  char v10;

  v2 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v10 = v2;
  if (ccz_n(a1))
  {
    v8 = ccz_sign(a1);
    ccz_set_sign(a1, -v8);
  }
  return cc_disable_dit(&v10);
}

void *ccdh_gp_rfc2409group02()
{
  return &_ccdh_gp_rfc2409group02;
}

uint64_t ccder_blob_decode_len_strict(unsigned __int8 **a1, unint64_t *a2)
{
  return ccder_blob_decode_len_internal(a1, a2, 1);
}

unint64_t ccn_trailing_zeros(unint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  if (result)
  {
    v2 = result;
    result = 0;
    v3 = v2 - 1;
    v4 = (v2 << 6) - 64;
    do
    {
      v5 = *(_QWORD *)(a2 + 8 * v3);
      result = ((((v5 | HIDWORD(v5)) + 0xFFFFFFFF) >> 32) - 1) & result | (__clz(__rbit64(v5 | 0x8000000000000000))
                                                                                       + v4) & -(uint64_t)(((v5 | HIDWORD(v5)) + 0xFFFFFFFF) >> 32);
      --v3;
      v4 -= 64;
    }
    while (v3 < v2);
  }
  return result;
}

unint64_t ccder_sizeof_overflow(uint64_t a1, unint64_t a2, char *a3)
{
  unint64_t result;
  char v5;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  if (*a3)
  {
    result = 0;
    v5 = 1;
  }
  else
  {
    v7 = ccder_sizeof_tag(a1);
    v8 = ccder_sizeof_len(a2);
    v9 = __CFADD__(v8 + v7, a2);
    result = v8 + v7 + a2;
    v5 = v9;
  }
  *a3 = v5;
  return result;
}

uint64_t ccccm_context_size(uint64_t *a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *a1;
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccccm_block_size(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = *(_QWORD *)(a1 + 16);
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccccm_init(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = (*(uint64_t (**)(void))(a1 + 24))();
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccccm_set_iv(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v14;
  char v16;

  v8 = 0;
  v16 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v16 = v8;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32))(a2, a3, a4, a5, a6, a7, a8);
  cc_disable_dit(&v16);
  return v14;
}

uint64_t ccccm_cbcmac(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5;
  uint64_t v11;
  char v13;

  v5 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v13 = v5;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 40))(a2, a3, a4, a5);
  cc_disable_dit(&v13);
  return v11;
}

uint64_t ccccm_aad(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5;
  uint64_t v11;
  char v13;

  v5 = 0;
  v13 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v5 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v5 = 1;
    }
  }
  v13 = v5;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 40))(a2, a3, a4, a5);
  cc_disable_dit(&v13);
  return v11;
}

uint64_t ccccm_update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v6;
  uint64_t v12;
  char v14;

  v6 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v14 = v6;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 48))(a2, a3, a4, a5, a6);
  cc_disable_dit(&v14);
  return v12;
}

uint64_t ccccm_encrypt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v6;
  uint64_t v12;
  char v14;

  v6 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v14 = v6;
  if (*(_BYTE *)(a1 + 80))
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 48))(a2, a3, a4, a5, a6);
  else
    v12 = 4294967228;
  cc_disable_dit(&v14);
  return v12;
}

uint64_t ccccm_decrypt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v6;
  uint64_t v12;
  char v14;

  v6 = 0;
  v14 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v14 = v6;
  if (*(_BYTE *)(a1 + 80))
    v12 = 4294967228;
  else
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 48))(a2, a3, a4, a5, a6);
  cc_disable_dit(&v14);
  return v12;
}

uint64_t ccccm_finalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  uint64_t v10;
  char v12;

  v4 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v12 = v4;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 56))(a2, a3, a4);
  cc_disable_dit(&v12);
  return v10;
}

uint64_t ccccm_finalize_and_generate_tag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  uint64_t v10;
  char v12;

  v4 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v12 = v4;
  if (*(_BYTE *)(a1 + 80))
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 56))(a2, a3, a4);
  else
    v10 = 4294967228;
  cc_disable_dit(&v12);
  return v10;
}

uint64_t ccccm_finalize_and_verify_tag(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  char v6;
  uint64_t v12;
  uint64_t v13;
  char v15;
  char __s[16];
  uint64_t v17;

  v6 = 0;
  v17 = *MEMORY[0x1E0C874D8];
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v6 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v6 = 1;
    }
  }
  v15 = v6;
  if (*(_BYTE *)(a1 + 80))
  {
    v13 = 4294967228;
  }
  else
  {
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(a1 + 56))(a2, a3, __s);
    if ((_DWORD)v12)
    {
      v13 = v12;
    }
    else if (cc_cmp_safe(*(_QWORD *)(a3 + 88), __s, a4))
    {
      cc_clear(*(_QWORD *)(a3 + 88), __s);
      v13 = 4294967227;
    }
    else
    {
      v13 = 0;
    }
  }
  cc_disable_dit(&v15);
  return v13;
}

uint64_t ccccm_reset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v9;
  char v11;

  v3 = 0;
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v11 = v3;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 64))(a2, a3);
  cc_disable_dit(&v11);
  return v9;
}

uint64_t ccccm_one_shot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  char v17;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v34 = a8;
  v17 = 0;
  v36 = *MEMORY[0x1E0C874D8];
  v35 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v17 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v17 = 1;
    }
  }
  v35 = v17;
  v23 = MEMORY[0x1E0C86820](a1, a2, a2, a3);
  v25 = (char *)&v33 - v24;
  MEMORY[0x1E0C86820](v23, v26, v27, v28);
  v30 = (char *)&v33 - v29;
  v31 = (*(uint64_t (**)(uint64_t, char *))(a1 + 24))(a1, v25);
  if (!(_DWORD)v31)
  {
    v31 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32))(v25, v30, a4, a5, a11, a9, a6);
    if (!(_DWORD)v31)
    {
      v31 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(a1 + 40))(v25, v30, a9, a10);
      if (!(_DWORD)v31)
      {
        v31 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t, uint64_t))(a1 + 48))(v25, v30, a6, a7, v34);
        if (!(_DWORD)v31)
          v31 = (*(uint64_t (**)(char *, char *, uint64_t))(a1 + 56))(v25, v30, a12);
      }
    }
  }
  cc_clear(*(_QWORD *)a1, v25);
  cc_clear(*(_QWORD *)(a1 + 8), v30);
  cc_disable_dit(&v35);
  return v31;
}

uint64_t ccccm_one_shot_encrypt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  char v16;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v16 = 0;
  v36 = *MEMORY[0x1E0C874D8];
  v35 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v16 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v16 = 1;
    }
  }
  v35 = v16;
  if (*(_BYTE *)(a1 + 80))
  {
    v34 = a8;
    v23 = MEMORY[0x1E0C86820](a1, a2, a2, a3);
    v25 = (char *)&v33 - v24;
    MEMORY[0x1E0C86820](v23, v26, v27, v28);
    v30 = (char *)&v33 - v29;
    v31 = (*(uint64_t (**)(uint64_t, char *))(a1 + 24))(a1, v25);
    if (!(_DWORD)v31)
    {
      v31 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32))(v25, v30, a4, a5, a11, a9, a6);
      if (!(_DWORD)v31)
      {
        v31 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(a1 + 40))(v25, v30, a9, a10);
        if (!(_DWORD)v31)
        {
          v31 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t, uint64_t))(a1 + 48))(v25, v30, a6, a7, v34);
          if (!(_DWORD)v31)
            v31 = (*(uint64_t (**)(char *, char *, uint64_t))(a1 + 56))(v25, v30, a12);
        }
      }
    }
    cc_clear(*(_QWORD *)a1, v25);
    cc_clear(*(_QWORD *)(a1 + 8), v30);
  }
  else
  {
    v31 = 4294967228;
  }
  cc_disable_dit(&v35);
  return v31;
}

uint64_t ccccm_one_shot_decrypt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12)
{
  char v16;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v16 = 0;
  v36 = *MEMORY[0x1E0C874D8];
  v35 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v16 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v16 = 1;
    }
  }
  v35 = v16;
  if (*(_BYTE *)(a1 + 80))
  {
    v31 = 4294967228;
  }
  else
  {
    v34 = a8;
    v23 = MEMORY[0x1E0C86820](a1, a2, a2, a3);
    v25 = (char *)&v33 - v24;
    MEMORY[0x1E0C86820](v23, v26, v27, v28);
    v30 = (char *)&v33 - v29;
    v31 = (*(uint64_t (**)(uint64_t, char *))(a1 + 24))(a1, v25);
    if (!(_DWORD)v31)
    {
      v31 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32))(v25, v30, a4, a5, a11, a9, a6);
      if (!(_DWORD)v31)
      {
        v31 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(a1 + 40))(v25, v30, a9, a10);
        if (!(_DWORD)v31)
        {
          v31 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t, uint64_t))(a1 + 48))(v25, v30, a6, a7, v34);
          if (!(_DWORD)v31)
            v31 = ccccm_finalize_and_verify_tag(a1, (uint64_t)v25, (uint64_t)v30, a12);
        }
      }
    }
    cc_clear(*(_QWORD *)a1, v25);
    cc_clear(*(_QWORD *)(a1 + 8), v30);
  }
  cc_disable_dit(&v35);
  return v31;
}

uint64_t ccec_extract_rs_ws(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned __int8 *a4, char *a5, char *a6)
{
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  v12 = *(_QWORD *)*a2;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v12);
  v15 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v12);
  if (ccder_decode_seqii(v12, v14, v15, a4, &a4[a3]) != &a4[a3]
    || a5 && (v16 = ccec_signature_r_s_size(a2), (ccn_write_uint_padded_ct(v12, v14, v16, a5) & 0x80000000) != 0)
    || a6 && (v17 = ccec_signature_r_s_size(a2), (ccn_write_uint_padded_ct(v12, v15, v17, a6) & 0x80000000) != 0))
  {
    result = 4294967289;
  }
  else
  {
    result = 0;
  }
  *(_QWORD *)(a1 + 16) = v13;
  return result;
}

uint64_t ccec_extract_rs(uint64_t *a1, uint64_t a2, unsigned __int8 *a3, char *a4, char *a5)
{
  char v10;
  uint64_t rs_ws;
  _QWORD v18[4];
  void (*v19)(uint64_t);
  char v20;

  v10 = 0;
  v20 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v10 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v10 = 1;
    }
  }
  v20 = v10;
  v18[0] = cc_malloc_clear(16 * *(_QWORD *)*a1);
  v18[1] = 2 * *(_QWORD *)*a1;
  v18[2] = 0;
  v18[3] = cc_ws_alloc;
  v19 = cc_ws_free;
  if (v18[0])
  {
    rs_ws = ccec_extract_rs_ws((uint64_t)v18, a1, a2, a3, a4, a5);
    v19((uint64_t)v18);
  }
  else
  {
    rs_ws = 4294967283;
  }
  cc_disable_dit(&v20);
  return rs_ws;
}

uint64_t ccec_verify_msg_ws(uint64_t a1, unint64_t **a2, unint64_t *a3, size_t a4, char *a5, uint64_t a6, unsigned __int8 *a7, _QWORD *a8)
{
  unsigned __int8 v15[64];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C874D8];
  ccdigest((uint64_t)a3, a4, a5, (uint64_t)v15);
  return ccec_verify_digest_ws(a1, a2, *a3, v15, a6, a7, a8);
}

uint64_t ccec_verify_msg(unint64_t **a1, unint64_t *a2, size_t a3, char *a4, uint64_t a5, unsigned __int8 *a6, _QWORD *a7)
{
  char v14;
  unint64_t *v20;
  uint64_t v21;
  _QWORD v23[4];
  void (*v24)(uint64_t);
  char v25;
  unsigned __int8 v26[64];
  uint64_t v27;

  v14 = 0;
  v27 = *MEMORY[0x1E0C874D8];
  v25 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v14 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v14 = 1;
    }
  }
  v25 = v14;
  v20 = *a1;
  v23[0] = cc_malloc_clear(376 * **a1);
  v23[1] = 47 * *v20;
  v23[2] = 0;
  v23[3] = cc_ws_alloc;
  v24 = cc_ws_free;
  if (v23[0])
  {
    ccdigest((uint64_t)a2, a3, a4, (uint64_t)v26);
    v21 = ccec_verify_digest_ws((uint64_t)v23, a1, *a2, v26, a5, a6, a7);
    v24((uint64_t)v23);
  }
  else
  {
    v21 = 4294967283;
  }
  cc_disable_dit(&v25);
  return v21;
}

uint64_t ccec_x963_import_priv_size(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  if (a1 <= 96)
  {
    if (a1 == 73)
    {
      v7 = 192;
      goto LABEL_17;
    }
    if (a1 == 85)
    {
      v7 = 224;
      goto LABEL_17;
    }
LABEL_16:
    v7 = 0;
    goto LABEL_17;
  }
  if (a1 == 97)
  {
    v7 = 256;
    goto LABEL_17;
  }
  if (a1 == 145)
  {
    v7 = 384;
    goto LABEL_17;
  }
  if (a1 != 199)
    goto LABEL_16;
  v7 = 521;
LABEL_17:
  cc_disable_dit(&v9);
  return v7;
}

uint64_t ccec_x963_import_priv_ws(uint64_t a1, unint64_t *a2, unint64_t a3, unsigned __int8 *a4, unint64_t **a5)
{
  unsigned int v5;
  BOOL v6;
  int v7;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  unint64_t **v19;
  unint64_t v20;
  uint64_t v21;

  v5 = *a4;
  v6 = v5 > 7;
  v7 = (1 << v5) & 0xD0;
  if (v6 || v7 == 0)
    return 4294967289;
  v14 = a2 + 4;
  if (a3 < (unint64_t)(cczp_bitlen((uint64_t)&a2[5 * *a2 + 4]) + 7) >> 3)
    return 4294967289;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = cczp_bitlen((uint64_t)&v14[5 * *a2]);
  result = ccec_x963_import_pub_ws(a1, a2, a3 - ((unint64_t)(v16 + 7) >> 3), a4, a5);
  if (!(_DWORD)result)
  {
    v18 = *a2;
    v19 = &a5[3 * **a5 + 2];
    v20 = (unint64_t)(cczp_bitlen((uint64_t)&v14[5 * *a2]) + 7) >> 3;
    v21 = cczp_bitlen((uint64_t)a2);
    result = ccn_read_uint(v18, v19, v20, &a4[((unint64_t)(v21 + 7) >> 2) | 1]);
  }
  *(_QWORD *)(a1 + 16) = v15;
  return result;
}

uint64_t ccec_x963_import_priv(unint64_t *a1, unint64_t a2, unsigned __int8 *a3, unint64_t **a4)
{
  char v8;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[4];
  void (*v19)(uint64_t);
  char v20;

  v8 = 0;
  v20 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v20 = v8;
  v14 = cc_malloc_clear(160 * *a1);
  v15 = 20 * *a1;
  v18[0] = v14;
  v18[1] = v15;
  v18[2] = 0;
  v18[3] = cc_ws_alloc;
  v19 = cc_ws_free;
  if (v14)
  {
    v16 = ccec_x963_import_priv_ws((uint64_t)v18, a1, a2, a3, a4);
    v19((uint64_t)v18);
  }
  else
  {
    v16 = 4294967283;
  }
  cc_disable_dit(&v20);
  return v16;
}

uint64_t ccmode_siv_hmac_reset(uint64_t a1)
{
  cchmac_init(*(_QWORD *)(*(_QWORD *)a1 + 56), (_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 8) >> 1, (char *)(a1 + 32));
  *(_QWORD *)(a1 + 24) = 2;
  return 0;
}

uint64_t ccmode_ccm_macdata(uint64_t result, uint64_t a2, int a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v8 = result;
  v9 = *(_DWORD *)(*(_QWORD *)result + 8);
  if (a3)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 24))(result + 8, 1, a2 + 16, a2 + 16);
    v10 = 0;
    *(_DWORD *)(a2 + 72) = 0;
  }
  else
  {
    v10 = *(_DWORD *)(a2 + 72);
  }
  v17 = a2;
  if (a4)
  {
    v11 = 0;
    v12 = a2 + 16;
    v13 = a5 - 1;
    v14 = a2 + 15;
    do
    {
      if (a4 - v11 >= v9 - v10)
        v15 = v9 - v10;
      else
        v15 = a4 - v11;
      if (v15)
      {
        v16 = v15;
        do
        {
          *(_BYTE *)(v14 + v10 + v16) ^= *(_BYTE *)(v13 + v11 + v16);
          --v16;
        }
        while (v16);
      }
      v10 = (v10 + v15) % v9;
      if (!v10)
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8 + 8, 1, v12, v12);
      v11 += v15;
    }
    while (v11 < a4);
  }
  *(_DWORD *)(v17 + 72) = v10;
  return result;
}

uint64_t ccmode_ccm_cbcmac(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a3 && *(_DWORD *)(a2 + 64) != 4)
    return 4294967228;
  ccmode_ccm_macdata(a1, a2, 0, a3, a4);
  return 0;
}

void cced25519_sign_with_rng_cold_1(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl(&dword_1DED93000, log, OS_LOG_TYPE_FAULT, "cced25519_sign: pk != sk * G", v1, 2u);
}

void ccec_sign_internal_ws_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C874D8];
  v2 = 134217984;
  v3 = a1;
  _os_log_fault_impl(&dword_1DED93000, a2, OS_LOG_TYPE_FAULT, "Digest should be at least 128 bits long: argument digest_len = %lu", (uint8_t *)&v2, 0xCu);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1E0C874A8]();
}

uint64_t __memset_chk()
{
  return MEMORY[0x1E0C874B8]();
}

uint64_t __udivti3()
{
  return MEMORY[0x1E0C86840]();
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C88EB0](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _os_once()
{
  return MEMORY[0x1E0C88AA0]();
}

void abort(void)
{
  MEMORY[0x1E0C87558]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C87668](a1, a2);
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x1E0C87678](*(_QWORD *)&__clock_id);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C87730](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1E0C87738](*(_QWORD *)&a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C88920](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C87798](__ptr, __size, __nitems, __stream);
}

int getentropy(void *buffer, size_t size)
{
  return MEMORY[0x1E0C88158](buffer, size);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C882B0]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C88400](info);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C88978](size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C87828](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C87830](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C87838](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C87840](__b, *(_QWORD *)&__c, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return MEMORY[0x1E0C87848](__s, __smax, *(_QWORD *)&__c, __n);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C88EF8](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C88F18](oslog, type);
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
  MEMORY[0x1E0C88BC8](lock);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C88BD0](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C88BF0](lock);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C87890](a1);
}

int putchar(int a1)
{
  return MEMORY[0x1E0C87898](*(_QWORD *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C87950](__str, __size, __format);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C87990](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C879D8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C879E8](__s1, __s2, __n);
}

